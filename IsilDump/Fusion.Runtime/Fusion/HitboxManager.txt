Type: Fusion.HitboxManager

Method: System.Boolean Raycast(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, Fusion.PlayerRef player, out Fusion.LagCompensatedHit hit, System.Int32 layerMask = -1, Fusion.HitOptions options = 0, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E83060 LDR X30, [X31 + 0x50]
	0x01E83064 ADD X31, X31, 0xA0
	0x01E83068 RET
	0x01E8306C SUB X31, X31, 0xB0
	0x01E83070 STR D8, [X31 + 0x70]
	0x01E83074 STP X30, X23, [X31 + 0x80]
	0x01E83078 STP X22, X21, [X31 + 0x90]
	0x01E8307C STP X20, X19, [X31 + 0xA0]
	0x01E83080 ADRP X21, 0x2556000
	0x01E83084 LDRB W9, [X21 + 0x1EB]
	0x01E83088 MOV X20, X0
	0x01E8308C MOV X19, X8
	0x01E83090 TBNZ X9, 0x0, 0x1E830B4
	0x01E83094 ADRP X0, 0x227A000
	0x01E83098 LDR X0, [X0 + 0xD98]
	0x01E8309C BL 0x1C16CF4
	0x01E830A0 ADRP X0, 0x227A000
	0x01E830A4 LDR X0, [X0 + 0xDA8]
	0x01E830A8 BL 0x1C16CF4
	0x01E830AC MOVZ W8, 0x1
	0x01E830B0 STRB W8, [X21 + 0x1EB]
	0x01E830B4 CBZ X20, 0x1E83160
	0x01E830B8 ADRP X23, 0x227A000
	0x01E830BC LDR X23, [X23 + 0xDA8]
	0x01E830C0 ADD X8, X31, 0x8
	0x01E830C4 MOV X0, X20
	0x01E830C8 MOV W1, W31
	0x01E830CC LDR X2, [X23]
	0x01E830D0 BL 0x2FECABC
	0x01E830D4 LDR W8, [X20 + 0x18]
	0x01E830D8 MOV W21, W31
	0x01E830DC CMP W8, 0x2
	0x01E830E0 B.LT 0x1E83124
	0x01E830E4 LDR V8, [X31 + 0x4C]
	0x01E830E8 MOV W21, W31
	0x01E830EC MOVZ W22, 0x1
	0x01E830F0 LDR X2, [X23]
	0x01E830F4 ADD X8, X31, 0x8
	0x01E830F8 MOV X0, X20
	0x01E830FC MOV W1, W22
	0x01E83100 BL 0x2FECABC
	0x01E83104 LDR V0, [X31 + 0x4C]
	0x01E83108 LDR W8, [X20 + 0x18]
	0x01E8310C FCMP S0, S8
	0x01E83110 CSEL W21, W22, W21, MI
	0x01E83114 ADD W22, W22, 0x1
	0x01E83118 FCSEL S8, S0, S8, MI
	0x01E8311C CMP W22, W8
	0x01E83120 B.LT 0x1E830F0
	0x01E83124 LDR X2, [X23]
	0x01E83128 ADD X8, X31, 0x8
	0x01E8312C MOV X0, X20
	0x01E83130 MOV W1, W21
	0x01E83134 BL 0x2FECABC
	0x01E83138 ADD X1, X31, 0x8
	0x01E8313C MOVZ W2, 0x68
	0x01E83140 MOV X0, X19
	0x01E83144 BL 0x3EB1AC0
	0x01E83148 LDP X20, X19, [X31 + 0xA0]
	0x01E8314C LDP X22, X21, [X31 + 0x90]
	0x01E83150 LDP X30, X23, [X31 + 0x80]
	0x01E83154 LDR V8, [X31 + 0x70]
	0x01E83158 ADD X31, X31, 0xB0
	0x01E8315C RET
	0x01E83160 BL 0x1C16F20
	0x01E83164 SUB X31, X31, 0x100
	0x01E83168 STR X30, [X31 + 0xD0]
	0x01E8316C STP X22, X21, [X31 + 0xE0]
	0x01E83170 STP X20, X19, [X31 + 0xF0]
	0x01E83174 ADRP X22, 0x2556000
	0x01E83178 LDRB W8, [X22 + 0x1EC]
	0x01E8317C MOV X19, X2
	0x01E83180 MOV X21, X1
	0x01E83184 MOV X20, X0
	0x01E83188 TBNZ X8, 0x0, 0x1E831AC
	0x01E8318C ADRP X0, 0x227A000
	0x01E83190 LDR X0, [X0 + 0xD78]
	0x01E83194 BL 0x1C16CF4
	0x01E83198 ADRP X0, 0x2273000
	0x01E8319C LDR X0, [X0 + 0xEF8]
	0x01E831A0 BL 0x1C16CF4
	0x01E831A4 MOVZ W8, 0x1
	0x01E831A8 STRB W8, [X22 + 0x1EC]
	0x01E831AC CBZ X21, 0x1E83288
	0x01E831B0 MOV X2, X21
	0x01E831B4 LDRB W8, [X2 + 0x20]!
	0x01E831B8 CBNZ W8, 0x1E831D4
	0x01E831BC LDR W1, [X21 + 0x1C]
	0x01E831C0 ADD X3, X21, 0x38
	0x01E831C4 ADD X4, X21, 0x30
	0x01E831C8 MOV X0, X20
	0x01E831CC MOV X5, X31
	0x01E831D0 BL 0x1E89388
	0x01E831D4 LDR X2, [X20 + 0x60]
	0x01E831D8 CBZ X2, 0x1E83288
	0x01E831DC LDP W8, W9, [X2 + 0x18]
	0x01E831E0 ADD W9, W9, 0x1
	0x01E831E4 CMP W8, 0x1
	0x01E831E8 STP W31, W9, [X2 + 0x18]
	0x01E831EC B.LT 0x1E83208
	0x01E831F0 LDR X0, [X2 + 0x10]
	0x01E831F4 MOV W1, W31
	0x01E831F8 MOV W2, W8
	0x01E831FC MOV X3, X31
	0x01E83200 BL 0x339FA34
	0x01E83204 LDR X2, [X20 + 0x60]
	0x01E83208 MOV X0, X20
	0x01E8320C MOV X1, X21
	0x01E83210 MOV W3, W31
	0x01E83214 BL 0x1E82258
	0x01E83218 MOV W21, W0
	0x01E8321C CMP W0, 0x0
	0x01E83220 B.LE 0x1E83258
	0x01E83224 LDR X0, [X20 + 0x60]
	0x01E83228 ADD X8, X31, 0x0
	0x01E8322C MOV X1, X31
	0x01E83230 BL 0x1E8950C
	0x01E83234 ADD X0, X31, 0x68
	0x01E83238 ADD X1, X31, 0x0
	0x01E8323C MOVZ W2, 0x68
	0x01E83240 BL 0x3EB1AC0
	0x01E83244 ADD X1, X31, 0x68
	0x01E83248 MOVZ W2, 0x68
	0x01E8324C MOV X0, X19
	0x01E83250 BL 0x3EB1AC0
	0x01E83254 B 0x1E8326C

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+224], D14
	003 Move [X31+240], D13
	004 Move [X31+248], D12
	005 Move [X31+256], D11
	006 Move [X31+264], D10
	007 Move [X31+272], D9
	008 Move [X31+280], D8
	009 Move [X31+288], X29
	010 Move [X31+296], X30
	011 Move [X31+304], X26
	012 Move [X31+312], X25
	013 Move [X31+320], X24
	014 Move [X31+328], X23
	015 Move [X31+336], X22
	016 Move [X31+344], X21
	017 Move [X31+352], X20
	018 Move [X31+360], X19
	019 Move X26, 0x2557000
	020 Move W8, [X26+485]
	021 Move X21, X6
	022 Move W22, W5
	023 Move W23, W4
	024 Move W24, W3
	025 Move X19, X2
	026 Move X25, X1
	027 Move V8, V6
	028 Move V9, V5
	029 Move V10, V4
	030 Move V11, V3
	031 Move V12, V2
	032 Move V13, V1
	033 Move V14, V0
	034 Move X20, X0
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {44}
	039 Move X0, 0x227B000
	040 Move X0, [X0+3448]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X26+485], W8
	044 And X1, X25, 0
	045 Add X2, X31, 232
	046 Add X3, X31, 216
	047 Add X4, X31, 208
	048 Move X0, X20
	049 Move X5, X31
	050 Move [X31+232], X31
	051 Move [X31+208], X31
	052 Move [X31+216], X31
	053 Call 0x1E8A388
	054 Move X8, [X20+104]
	055 Compare X8, 0
	056 JumpIfEqual {161}
	057 Move [X8+28], W25
	058 Move X8, [X20+104]
	059 Compare X8, 0
	060 JumpIfEqual {161}
	061 Move [X8+84], S14
	062 Move [X8+92], S13
	063 Move [X8+92], S12
	064 Move X8, [X20+104]
	065 Compare X8, 0
	066 JumpIfEqual {161}
	067 Move [X8+72], S11
	068 Move [X8+80], S10
	069 Move [X8+80], S9
	070 Move X8, [X20+104]
	071 Compare X8, 0
	072 JumpIfEqual {161}
	073 Move [X8+96], S8
	074 Move X9, [X31+232]
	075 Move [X8+32], X9
	076 Move X8, [X20+104]
	077 Compare X8, 0
	078 JumpIfEqual {161}
	079 Move X9, [X31+216]
	080 Move [X8+56], X9
	081 Move X8, [X20+104]
	082 Compare X8, 0
	083 JumpIfEqual {161}
	084 Move X9, [X31+208]
	085 Move W0, W24
	086 Move X1, X31
	087 Move [X8+48], X9
	088 Move X25, [X20+104]
	089 Call LayerMask.op_Implicit, X0
	090 Compare X25, 0
	091 JumpIfEqual {161}
	092 Move [X25+24], W0
	093 Move X1, [X20+104]
	094 Compare X1, 0
	095 JumpIfEqual {161}
	096 Move [X1+16], W22
	097 Move [X1+20], W23
	098 Move [X1+64], X21
	099 Move X2, [X20+96]
	100 Compare X2, 0
	101 JumpIfEqual {161}
	102 Move W8, [X2+24]
	103 Move W9, [X2+28]
	104 Add W9, W9, 1
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move [X2+24], W31
	107 Move [X2+28], W9
	108 Move X0, [X2+16]
	109 Move W1, W31
	110 Move W2, W8
	111 Move X3, X31
	112 Call Array.Clear, X0, X1, X2
	113 Move X2, [X20+96]
	114 Move X1, [X20+104]
	115 Move X0, X20
	116 Move W3, W31
	117 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	118 Move W21, W0
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X0, [X20+96]
	121 Add X8, X31, 0
	122 Move X1, X31
	123 Call 0x1E8A50C
	124 Add X0, X31, 104
	125 Add X1, X31, 0
	126 Move W2, 104
	127 Call 0x3EB2AC0
	128 Add X1, X31, 104
	129 Move W2, 104
	130 Move X0, X19
	131 Call 0x3EB2AC0
	132 NotImplemented "Instruction MOVI not yet implemented."
	133 Move [X19+96], X31
	134 Move [X19+64], V0
	135 Move [X19+72], V0
	136 Move [X19+32], V0
	137 Move [X19+40], V0
	138 Move [X19], V0
	139 Move [X19+8], V0
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X20, [X31+352]
	142 Move X19, [X31+360]
	143 Move X22, [X31+336]
	144 Move X21, [X31+344]
	145 Move X24, [X31+320]
	146 Move X23, [X31+328]
	147 Move X26, [X31+304]
	148 Move X25, [X31+312]
	149 Move X29, [X31+288]
	150 Move X30, [X31+296]
	151 Move D9, [X31+272]
	152 Move D8, [X31+280]
	153 Move D11, [X31+256]
	154 Move D10, [X31+264]
	155 Move D13, [X31+240]
	156 Move D12, [X31+248]
	157 Move V14, [X31+224]
	158 NotImplemented "Instruction CSET not yet implemented."
	159 Add X31, X31, 368
	160 Return X0
	161 Call 0x1C17F20

Method: System.Boolean Raycast(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, out Fusion.LagCompensatedHit hit, System.Int32 layerMask = -1, Fusion.HitOptions options = 0, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E834B8 ADRP X23, 0x2271000
	0x01E834BC LDR W1, [X8 + 0x8]
	0x01E834C0 LDR X23, [X23 + 0x470]
	0x01E834C4 ADD X0, X31, 0x18
	0x01E834C8 STR X31, [X31 + 0x18]
	0x01E834CC LDR X2, [X23]
	0x01E834D0 BL 0x24341FC
	0x01E834D4 LDR X8, [X31 + 0x18]
	0x01E834D8 STR X8, [X21]
	0x01E834DC LDR X8, [X22 + 0x20]
	0x01E834E0 CBZ X8, 0x1E835A4
	0x01E834E4 LDR W1, [X8 + 0xC]
	0x01E834E8 LDR X2, [X23]
	0x01E834EC ADD X0, X31, 0x8
	0x01E834F0 STR X31, [X31 + 0x8]
	0x01E834F4 BL 0x24341FC
	0x01E834F8 LDR X8, [X31 + 0x8]
	0x01E834FC STR X8, [X20]
	0x01E83500 LDR X8, [X22 + 0x20]
	0x01E83504 CBZ X8, 0x1E835A4
	0x01E83508 LDR V0, [X8 + 0x4]
	0x01E8350C ADRP X8, 0x2274000
	0x01E83510 LDR X8, [X8 + 0x138]
	0x01E83514 ADD X0, X31, 0x0
	0x01E83518 STR X31, [X31]
	0x01E8351C LDR X1, [X8]
	0x01E83520 BL 0x243AC08
	0x01E83524 LDR X8, [X31]
	0x01E83528 STR X8, [X19]
	0x01E8352C B 0x1E8358C
	0x01E83530 LDR X0, [X23 + 0x90]
	0x01E83534 CBZ X0, 0x1E8354C
	0x01E83538 MOV X1, X31
	0x01E8353C BL 0x1EEACB8
	0x01E83540 CBZ X0, 0x1E835A4
	0x01E83544 ADD X8, X0, 0x30
	0x01E83548 B 0x1E83560
	0x01E8354C LDR X8, [X23 + 0x38]
	0x01E83550 CBZ X8, 0x1E835A4
	0x01E83554 LDR X8, [X8 + 0x50]
	0x01E83558 CBZ X8, 0x1E835A4
	0x01E8355C ADD X8, X8, 0x48
	0x01E83560 LDR W1, [X8]
	0x01E83564 ADRP X8, 0x2271000
	0x01E83568 LDR X8, [X8 + 0x470]
	0x01E8356C ADD X0, X31, 0x18
	0x01E83570 STR X31, [X31 + 0x18]
	0x01E83574 LDR X2, [X8]
	0x01E83578 BL 0x24341FC
	0x01E8357C LDR X8, [X31 + 0x18]
	0x01E83580 STR X8, [X21]
	0x01E83584 STR X31, [X20]
	0x01E83588 STR X31, [X19]
	0x01E8358C LDP X20, X19, [X31 + 0x40]
	0x01E83590 LDP X22, X21, [X31 + 0x30]
	0x01E83594 LDP X24, X23, [X31 + 0x20]
	0x01E83598 LDR X30, [X31 + 0x10]
	0x01E8359C ADD X31, X31, 0x50
	0x01E835A0 RET
	0x01E835A4 BL 0x1C16F20
	0x01E835A8 STR X30, [X31 - 0x10]!
	0x01E835AC LDR X8, [X0 + 0xA0]
	0x01E835B0 CBZ X8, 0x1E835C0
	0x01E835B4 LDR X0, [X8 + 0x10]
	0x01E835B8 LDR X30, [X31], #0x10
	0x01E835BC RET
	0x01E835C0 BL 0x1C16F20
	0x01E835C4 SUB X31, X31, 0x70
	0x01E835C8 STR D8, [X31 + 0x50]
	0x01E835CC STR X30, [X31 + 0x58]
	0x01E835D0 STP X20, X19, [X31 + 0x60]
	0x01E835D4 STP X31, X31, [X31]
	0x01E835D8 LDR W9, [X0 + 0x14]
	0x01E835DC LDUR X10, [X0 + 0xC]
	0x01E835E0 MOV X20, X0
	0x01E835E4 STR W9, [X31 + 0x48]
	0x01E835E8 STR X10, [X31 + 0x40]
	0x01E835EC LDR W9, [X0 + 0x8]
	0x01E835F0 LDR X10, [X0]
	0x01E835F4 LDR V8, [X0 + 0x18]
	0x01E835F8 STR W9, [X31 + 0x38]
	0x01E835FC STR X10, [X31 + 0x30]
	0x01E83600 LDR W9, [X0 + 0x30]
	0x01E83604 LDR X10, [X0 + 0x28]
	0x01E83608 STR W9, [X31 + 0x28]
	0x01E8360C STR X10, [X31 + 0x20]
	0x01E83610 LDUR V0, [X0 + 0x34]
	0x01E83614 STR V0, [X31 + 0x1]
	0x01E83618 LDR X0, [X0 + 0x20]
	0x01E8361C CBZ X0, 0x1E83698
	0x01E83620 MOV X1, X31
	0x01E83624 MOV X19, X8
	0x01E83628 BL 0x3C32ECC
	0x01E8362C ADRP X9, 0xFFFFFFFFFEC6A000
	0x01E83630 LDR X10, [X31 + 0x40]
	0x01E83634 LDR V0, [X9 + 0xEC0]
	0x01E83638 LDR W9, [X31 + 0x48]
	0x01E8363C LDR X8, [X20 + 0x20]
	0x01E83640 STP X0, X10, [X19 + 0x8]
	0x01E83644 LDR X10, [X31 + 0x30]
	0x01E83648 STR W9, [X19 + 0x18]
	0x01E8364C LDR W9, [X31 + 0x38]
	0x01E83650 LDR V1, [X31 + 0x1]
	0x01E83654 STUR X10, [X19 + 0x1C]
	0x01E83658 LDR X10, [X31 + 0x20]
	0x01E8365C STR W9, [X19 + 0x24]
	0x01E83660 LDR W9, [X31 + 0x28]
	0x01E83664 STUR V1, [X19 + 0x34]
	0x01E83668 LDR V1, [X31]
	0x01E8366C STR S8, [X19 + 0x44]
	0x01E83670 STR X10, [X19 + 0x28]
	0x01E83674 STR W9, [X19 + 0x30]
	0x01E83678 STP X8, X31, [X19 + 0x48]
	0x01E8367C STR D0, [X19]
	0x01E83680 STUR V1, [X19 + 0x58]
	0x01E83684 LDP X20, X19, [X31 + 0x60]
	0x01E83688 LDR X30, [X31 + 0x58]
	0x01E8368C LDR V8, [X31 + 0x50]
	0x01E83690 ADD X31, X31, 0x70
	0x01E83694 RET
	0x01E83698 BL 0x1C16F20
	0x01E8369C STP X30, X21, [X31 - 0x20]!
	0x01E836A0 STP X20, X19, [X31 + 0x10]
	0x01E836A4 ADRP X20, 0x2556000
	0x01E836A8 LDRB W8, [X20 + 0x1F3]
	0x01E836AC MOV X19, X0
	0x01E836B0 TBNZ X8, 0x0, 0x1E836C8
	0x01E836B4 ADRP X0, 0x227A000
	0x01E836B8 LDR X0, [X0 + 0xDB0]

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+208], D14
	003 Move [X31+216], D13
	004 Move [X31+224], D12
	005 Move [X31+232], D11
	006 Move [X31+240], D10
	007 Move [X31+248], D9
	008 Move [X31+256], D8
	009 Move [X31+264], X29
	010 Move [X31+272], X30
	011 Move [X31+280], X27
	012 Move [X31+288], X26
	013 Move [X31+296], X25
	014 Move [X31+304], X24
	015 Move [X31+312], X23
	016 Move [X31+320], X22
	017 Move [X31+328], X21
	018 Move [X31+336], X20
	019 Move [X31+344], X19
	020 Move X27, 0x2557000
	021 Move W8, [X27+486]
	022 Move W21, W7
	023 Move W22, W6
	024 Move W23, W5
	025 Move X19, X4
	026 Move X24, X3
	027 Move X25, X2
	028 Move W26, W1
	029 Move V8, V6
	030 Move V9, V5
	031 Move V10, V4
	032 Move V11, V3
	033 Move V12, V2
	034 Move V13, V1
	035 Move V14, V0
	036 Move X20, X0
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {49}
	041 Move X0, 0x227B000
	042 Move X0, [X0+3448]
	043 Call 0x1C17CF4
	044 Move X0, 0x2272000
	045 Move X0, [X0+1136]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X27+486], W8
	049 Move X8, [X20+104]
	050 Compare X8, 0
	051 JumpIfEqual {163}
	052 Move [X8+28], W31
	053 Move X8, [X20+104]
	054 Compare X8, 0
	055 JumpIfEqual {163}
	056 Move [X8+84], S14
	057 Move [X8+92], S13
	058 Move [X8+92], S12
	059 Move X8, [X20+104]
	060 Compare X8, 0
	061 JumpIfEqual {163}
	062 Move [X8+72], S11
	063 Move [X8+80], S10
	064 Move [X8+80], S9
	065 Move X27, [X20+104]
	066 Compare X27, 0
	067 JumpIfEqual {163}
	068 Move X8, 0x2272000
	069 Move X8, [X8+1136]
	070 Move [X27+96], S8
	071 Add X0, X31, 104
	072 Move W1, W26
	073 Move X2, [X8]
	074 Move [X31+104], X31
	075 Call Nullable`1<Int32>..ctor, X0, X1
	076 Move X8, [X31+104]
	077 Move [X27+32], X8
	078 Move X8, [X20+104]
	079 Compare X8, 0
	080 JumpIfEqual {163}
	081 Move [X8+56], X25
	082 Move X8, [X20+104]
	083 Compare X8, 0
	084 JumpIfEqual {163}
	085 Move [X8+48], X24
	086 Move X24, [X20+104]
	087 Move W0, W23
	088 Move X1, X31
	089 Call LayerMask.op_Implicit, X0
	090 Compare X24, 0
	091 JumpIfEqual {163}
	092 Move [X24+24], W0
	093 Move X1, [X20+104]
	094 Compare X1, 0
	095 JumpIfEqual {163}
	096 Move X8, [X31+352]
	097 Move [X1+16], W21
	098 Move [X1+20], W22
	099 Move [X1+64], X8
	100 Move X2, [X20+96]
	101 Compare X2, 0
	102 JumpIfEqual {163}
	103 Move W8, [X2+24]
	104 Move W9, [X2+28]
	105 Add W9, W9, 1
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move [X2+24], W31
	108 Move [X2+28], W9
	109 Move X0, [X2+16]
	110 Move W1, W31
	111 Move W2, W8
	112 Move X3, X31
	113 Call Array.Clear, X0, X1, X2
	114 Move X2, [X20+96]
	115 Move X1, [X20+104]
	116 Move X0, X20
	117 Move W3, W31
	118 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	119 Move W21, W0
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X0, [X20+96]
	122 Add X8, X31, 0
	123 Move X1, X31
	124 Call 0x1E8A50C
	125 Add X0, X31, 104
	126 Add X1, X31, 0
	127 Move W2, 104
	128 Call 0x3EB2AC0
	129 Add X1, X31, 104
	130 Move W2, 104
	131 Move X0, X19
	132 Call 0x3EB2AC0
	133 NotImplemented "Instruction MOVI not yet implemented."
	134 Move [X19+96], X31
	135 Move [X19+64], V0
	136 Move [X19+72], V0
	137 Move [X19+32], V0
	138 Move [X19+40], V0
	139 Move [X19], V0
	140 Move [X19+8], V0
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X20, [X31+336]
	143 Move X19, [X31+344]
	144 Move X22, [X31+320]
	145 Move X21, [X31+328]
	146 Move X24, [X31+304]
	147 Move X23, [X31+312]
	148 Move X26, [X31+288]
	149 Move X25, [X31+296]
	150 Move X30, [X31+272]
	151 Move X27, [X31+280]
	152 Move X29, [X31+264]
	153 Move D9, [X31+248]
	154 Move D8, [X31+256]
	155 Move D11, [X31+232]
	156 Move D10, [X31+240]
	157 Move D13, [X31+216]
	158 Move D12, [X31+224]
	159 Move V14, [X31+208]
	160 NotImplemented "Instruction CSET not yet implemented."
	161 Add X31, X31, 352
	162 Return X0
	163 Call 0x1C17F20

Method: System.Int32 RaycastAll(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, Fusion.PlayerRef player, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask = -1, System.Boolean clearHits = True, Fusion.HitOptions options = 0, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E836BC BL 0x1C16CF4
	0x01E836C0 MOVZ W8, 0x1
	0x01E836C4 STRB W8, [X20 + 0x1F3]
	0x01E836C8 LDR X1, [X19 + 0x38]
	0x01E836CC CBZ X1, 0x1E83730
	0x01E836D0 LDR X8, [X1 + 0x98]
	0x01E836D4 CBZ X8, 0x1E83730
	0x01E836D8 LDR X8, [X8 + 0x28]
	0x01E836DC ADRP X21, 0x227A000
	0x01E836E0 LDR X21, [X21 + 0xDB0]
	0x01E836E4 MOV X0, X19
	0x01E836E8 STR X8, [X19 + 0x88]
	0x01E836EC BL 0x1E83734
	0x01E836F0 MOV X1, X0
	0x01E836F4 MOV X0, X19
	0x01E836F8 BL 0x1E83924
	0x01E836FC MOV X0, X19
	0x01E83700 BL 0x1E83A68
	0x01E83704 LDR X0, [X21]
	0x01E83708 LDR X20, [X19 + 0x90]
	0x01E8370C BL 0x1C16F10
	0x01E83710 MOV X1, X20
	0x01E83714 MOV X2, X31
	0x01E83718 MOV X21, X0
	0x01E8371C BL 0x1EE9BC4
	0x01E83720 STR X21, [X19 + 0x58]
	0x01E83724 LDP X20, X19, [X31 + 0x10]
	0x01E83728 LDP X30, X21, [X31], #0x20
	0x01E8372C RET
	0x01E83730 BL 0x1C16F20
	0x01E83734 STP X30, X25, [X31 - 0x40]!
	0x01E83738 STP X24, X23, [X31 + 0x10]
	0x01E8373C STP X22, X21, [X31 + 0x20]
	0x01E83740 STP X20, X19, [X31 + 0x30]
	0x01E83744 ADRP X24, 0x2556000
	0x01E83748 ADRP X25, 0x227A000
	0x01E8374C ADRP X20, 0x227A000
	0x01E83750 ADRP X22, 0x227A000
	0x01E83754 ADRP X23, 0x2270000
	0x01E83758 LDRB W8, [X24 + 0x1F6]
	0x01E8375C LDR X25, [X25 + 0xDB8]
	0x01E83760 LDR X20, [X20 + 0xDC0]
	0x01E83764 LDR X22, [X22 + 0xDC8]
	0x01E83768 LDR X23, [X23 + 0x6C0]
	0x01E8376C MOV X21, X1
	0x01E83770 MOV X19, X0
	0x01E83774 TBNZ X8, 0x0, 0x1E837C8
	0x01E83778 ADRP X0, 0x227A000
	0x01E8377C LDR X0, [X0 + 0xDC8]
	0x01E83780 BL 0x1C16CF4
	0x01E83784 ADRP X0, 0x227A000
	0x01E83788 LDR X0, [X0 + 0xDD0]
	0x01E8378C BL 0x1C16CF4
	0x01E83790 ADRP X0, 0x227A000
	0x01E83794 LDR X0, [X0 + 0xDD8]
	0x01E83798 BL 0x1C16CF4
	0x01E8379C ADRP X0, 0x227A000
	0x01E837A0 LDR X0, [X0 + 0xDC0]
	0x01E837A4 BL 0x1C16CF4
	0x01E837A8 ADRP X0, 0x227A000
	0x01E837AC LDR X0, [X0 + 0xDB8]
	0x01E837B0 BL 0x1C16CF4
	0x01E837B4 ADRP X0, 0x2270000
	0x01E837B8 LDR X0, [X0 + 0x6C0]
	0x01E837BC BL 0x1C16CF4
	0x01E837C0 MOVZ W8, 0x1
	0x01E837C4 STRB W8, [X24 + 0x1F6]
	0x01E837C8 LDR X0, [X25]
	0x01E837CC BL 0x1C16F10
	0x01E837D0 LDR X1, [X20]
	0x01E837D4 MOV X20, X0
	0x01E837D8 BL 0x301B7C4
	0x01E837DC LDR X0, [X23]
	0x01E837E0 LDR X22, [X22]
	0x01E837E4 LDR W8, [X0 + 0xE0]
	0x01E837E8 CBNZ W8, 0x1E837F0
	0x01E837EC BL 0x1C16DFC
	0x01E837F0 MOV X0, X22
	0x01E837F4 MOV X1, X31
	0x01E837F8 BL 0x338C698
	0x01E837FC CBZ X21, 0x1E83914
	0x01E83800 MOV X1, X0
	0x01E83804 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X26
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move W23, W5
	019 Move W21, W4
	020 Move W25, W3
	021 Move X19, X2
	022 Move X26, X1
	023 And X1, X1, 0
	024 Add X2, X31, 24
	025 Add X3, X31, 16
	026 Add X4, X31, 8
	027 Move X5, X31
	028 Move X20, X7
	029 Move W22, W6
	030 Move V8, V6
	031 Move V9, V5
	032 Move V10, V4
	033 Move V11, V3
	034 Move V12, V2
	035 Move V13, V1
	036 Move V14, V0
	037 Move X24, X0
	038 Move [X31+16], X31
	039 Move [X31+24], X31
	040 Move [X31+8], X31
	041 Call 0x1E8A388
	042 Move X8, [X24+112]
	043 Compare X8, 0
	044 JumpIfEqual {109}
	045 Move [X8+28], W26
	046 Move X8, [X24+112]
	047 Compare X8, 0
	048 JumpIfEqual {109}
	049 Move [X8+84], S14
	050 Move [X8+92], S13
	051 Move [X8+92], S12
	052 Move X8, [X24+112]
	053 Compare X8, 0
	054 JumpIfEqual {109}
	055 Move [X8+72], S11
	056 Move [X8+80], S10
	057 Move [X8+80], S9
	058 Move X8, [X24+112]
	059 Compare X8, 0
	060 JumpIfEqual {109}
	061 Move [X8+96], S8
	062 Move X9, [X31+24]
	063 Move [X8+32], X9
	064 Move X8, [X24+112]
	065 Compare X8, 0
	066 JumpIfEqual {109}
	067 Move X9, [X31+16]
	068 Move [X8+56], X9
	069 Move X8, [X24+112]
	070 Compare X8, 0
	071 JumpIfEqual {109}
	072 Move X9, [X31+8]
	073 Move W0, W25
	074 Move X1, X31
	075 Move [X8+48], X9
	076 Move X26, [X24+112]
	077 Call LayerMask.op_Implicit, X0
	078 Compare X26, 0
	079 JumpIfEqual {109}
	080 Move [X26+24], W0
	081 Move X1, [X24+112]
	082 Compare X1, 0
	083 JumpIfEqual {109}
	084 And W3, W21, 1
	085 Move X0, X24
	086 Move X2, X19
	087 Move [X1+16], W22
	088 Move [X1+20], W23
	089 Move [X1+64], X20
	090 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	091 Move X20, [X31+144]
	092 Move X19, [X31+152]
	093 Move X22, [X31+128]
	094 Move X21, [X31+136]
	095 Move X24, [X31+112]
	096 Move X23, [X31+120]
	097 Move X26, [X31+96]
	098 Move X25, [X31+104]
	099 Move X30, [X31+88]
	100 Move D9, [X31+72]
	101 Move D8, [X31+80]
	102 Move D11, [X31+56]
	103 Move D10, [X31+64]
	104 Move D13, [X31+40]
	105 Move D12, [X31+48]
	106 Move V14, [X31+32]
	107 Add X31, X31, 160
	108 Return X0
	109 Call 0x1C17F20

Method: System.Int32 RaycastAll(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask = -1, System.Boolean clearHits = True, Fusion.HitOptions options = 0, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E83808 MOV X2, X31
	0x01E8380C BL 0x1EA2104
	0x01E83810 CBZ X0, 0x1E83914
	0x01E83814 LDR X8, [X0 + 0x18]
	0x01E83818 MOV X21, X0
	0x01E8381C CMP W8, 0x1
	0x01E83820 B.LT 0x1E838FC
	0x01E83824 ADRP X24, 0x227A000
	0x01E83828 ADRP X25, 0x227A000
	0x01E8382C LDR X24, [X24 + 0xDD0]
	0x01E83830 LDR X25, [X25 + 0xDD8]
	0x01E83834 MOV X23, X31
	0x01E83838 AND X8, X8, 0x0
	0x01E8383C CMP X23, W8, UXTW
	0x01E83840 B.CS 0x1E83920
	0x01E83844 ADD X8, X21, X23, 0x3, LSL
	0x01E83848 LDR X22, [X8 + 0x20]
	0x01E8384C CBZ X22, 0x1E838EC
	0x01E83850 LDRB W8, [X22 + 0x30]
	0x01E83854 ANDS W31, W8, 0x1C
	0x01E83858 B.NE 0x1E838E4
	0x01E8385C LDR X8, [X22]
	0x01E83860 LDR X1, [X24]
	0x01E83864 LDRB W10, [X8 + 0x130]
	0x01E83868 LDRB W9, [X1 + 0x130]
	0x01E8386C CMP W10, W9
	0x01E83870 B.CC 0x1E83918
	0x01E83874 LDR X8, [X8 + 0xC8]
	0x01E83878 ADD X8, X8, X9, 0x3, LSL
	0x01E8387C LDUR X8, [X8 - 0x8]
	0x01E83880 CMP X8, X1
	0x01E83884 B.NE 0x1E83918
	0x01E83888 STR X19, [X22 + 0xB0]
	0x01E8388C CBZ X20, 0x1E83914
	0x01E83890 LDR W10, [X20 + 0x1C]
	0x01E83894 LDR X8, [X20 + 0x10]
	0x01E83898 LDR X9, [X25]
	0x01E8389C ADD W10, W10, 0x1
	0x01E838A0 STR W10, [X20 + 0x1C]
	0x01E838A4 CBZ X8, 0x1E83914
	0x01E838A8 LDRSW X10, [X20 + 0x18]
	0x01E838AC LDR W11, [X8 + 0x18]
	0x01E838B0 CMP W10, W11
	0x01E838B4 B.CS 0x1E838CC
	0x01E838B8 ADD W9, W10, 0x1
	0x01E838BC ADD X8, X8, X10, 0x3, LSL
	0x01E838C0 STR W9, [X20 + 0x18]
	0x01E838C4 STR X22, [X8 + 0x20]
	0x01E838C8 B 0x1E838E4
	0x01E838CC LDR X8, [X9 + 0x20]
	0x01E838D0 MOV X0, X20
	0x01E838D4 MOV X1, X22
	0x01E838D8 LDR X8, [X8 + 0xC0]
	0x01E838DC LDR X2, [X8 + 0x70]
	0x01E838E0 BL 0x301BF90
	0x01E838E4 LDR X22, [X22 + 0x28]
	0x01E838E8 CBNZ X22, 0x1E83850
	0x01E838EC LDR W8, [X21 + 0x18]
	0x01E838F0 ADD X23, X23, 0x1
	0x01E838F4 CMP X23, W8, SXTW
	0x01E838F8 B.LT 0x1E8383C
	0x01E838FC MOV X0, X20
	0x01E83900 LDP X20, X19, [X31 + 0x30]
	0x01E83904 LDP X22, X21, [X31 + 0x20]
	0x01E83908 LDP X24, X23, [X31 + 0x10]
	0x01E8390C LDP X30, X25, [X31], #0x40
	0x01E83910 RET
	0x01E83914 BL 0x1C16F20
	0x01E83918 MOV X0, X22
	0x01E8391C BL 0x1C171E0
	0x01E83920 BL 0x1C16F28
	0x01E83924 STR X30, [X31 - 0x40]!
	0x01E83928 STP X24, X23, [X31 + 0x10]
	0x01E8392C STP X22, X21, [X31 + 0x20]
	0x01E83930 STP X20, X19, [X31 + 0x30]
	0x01E83934 ADRP X21, 0x2556000
	0x01E83938 LDRB W8, [X21 + 0x1F5]
	0x01E8393C MOV X20, X1
	0x01E83940 MOV X19, X0
	0x01E83944 TBNZ X8, 0x0, 0x1E8395C
	0x01E83948 ADRP X0, 0x227A000
	0x01E8394C LDR X0, [X0 + 0xDE0]
	0x01E83950 BL 0x1C16CF4
	0x01E83954 MOVZ W8, 0x1
	0x01E83958 STRB W8, [X21 + 0x1F5]
	0x01E8395C LDR X8, [X19 + 0x88]
	0x01E83960 CBZ X8, 0x1E83A64
	0x01E83964 LDR W9, [X8 + 0x14]

ISIL:
	001 Move [X31-144], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X27
	010 Move [X31+80], X26
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move X27, 0x2557000
	019 Move W8, [X27+487]
	020 Move W21, W7
	021 Move W20, W6
	022 Move W23, W5
	023 Move X19, X4
	024 Move X24, X3
	025 Move X25, X2
	026 Move W26, W1
	027 Move V8, V6
	028 Move V9, V5
	029 Move V10, V4
	030 Move V11, V3
	031 Move V12, V2
	032 Move V13, V1
	033 Move V14, V0
	034 Move X22, X0
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {44}
	039 Move X0, 0x2272000
	040 Move X0, [X0+1136]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X27+487], W8
	044 Move X8, [X22+112]
	045 Compare X8, 0
	046 JumpIfEqual {118}
	047 Move [X8+28], W31
	048 Move X8, [X22+112]
	049 Compare X8, 0
	050 JumpIfEqual {118}
	051 Move [X8+84], S14
	052 Move [X8+92], S13
	053 Move [X8+92], S12
	054 Move X8, [X22+112]
	055 Compare X8, 0
	056 JumpIfEqual {118}
	057 Move [X8+72], S11
	058 Move [X8+80], S10
	059 Move [X8+80], S9
	060 Move X27, [X22+112]
	061 Compare X27, 0
	062 JumpIfEqual {118}
	063 Move X8, 0x2272000
	064 Move X8, [X8+1136]
	065 Move [X27+96], S8
	066 Add X0, X31, 8
	067 Move W1, W26
	068 Move X2, [X8]
	069 Move [X31+8], X31
	070 Call Nullable`1<Int32>..ctor, X0, X1
	071 Move X8, [X31+8]
	072 Move [X27+32], X8
	073 Move X8, [X22+112]
	074 Compare X8, 0
	075 JumpIfEqual {118}
	076 Move [X8+56], X25
	077 Move X8, [X22+112]
	078 Compare X8, 0
	079 JumpIfEqual {118}
	080 Move [X8+48], X24
	081 Move X24, [X22+112]
	082 Move W0, W23
	083 Move X1, X31
	084 Call LayerMask.op_Implicit, X0
	085 Compare X24, 0
	086 JumpIfEqual {118}
	087 Move [X24+24], W0
	088 Move X1, [X22+112]
	089 Compare X1, 0
	090 JumpIfEqual {118}
	091 Move W8, [X31+144]
	092 Move X9, [X31+152]
	093 And W3, W20, 1
	094 Move X0, X22
	095 Move X2, X19
	096 Move [X1+16], W8
	097 Move [X1+20], W21
	098 Move [X1+64], X9
	099 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	100 Move X20, [X31+128]
	101 Move X19, [X31+136]
	102 Move X22, [X31+112]
	103 Move X21, [X31+120]
	104 Move X24, [X31+96]
	105 Move X23, [X31+104]
	106 Move X26, [X31+80]
	107 Move X25, [X31+88]
	108 Move X30, [X31+64]
	109 Move X27, [X31+72]
	110 Move D9, [X31+48]
	111 Move D8, [X31+56]
	112 Move D11, [X31+32]
	113 Move D10, [X31+40]
	114 Move D13, [X31+16]
	115 Move D12, [X31+24]
	116 Move V14, [X31+144]
	117 Return X0
	118 Call 0x1C17F20

Method: System.Int32 OverlapSphere(UnityEngine.Vector3 origin, System.Single radius, Fusion.PlayerRef player, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask = -1, Fusion.HitOptions options = 0, System.Boolean clearHits = True, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E83968 LDR X8, [X19 + 0x38]
	0x01E8396C MOVZ W10, 0x1E
	0x01E83970 CMP W9, 0x1E
	0x01E83974 CSEL W22, W9, W10, GT
	0x01E83978 CBZ X8, 0x1E83A64
	0x01E8397C LDR X0, [X8 + 0x50]
	0x01E83980 CBZ X0, 0x1E83A64
	0x01E83984 MOV X1, X31
	0x01E83988 BL 0x1EC0510
	0x01E8398C LDR X8, [X19 + 0x88]
	0x01E83990 CBZ X8, 0x1E83A64
	0x01E83994 ADRP X24, 0x2555000
	0x01E83998 LDRB W9, [X24 + 0xABE]
	0x01E8399C LDR W23, [X8 + 0x18]
	0x01E839A0 MOV W21, W0
	0x01E839A4 CBNZ W9, 0x1E839BC
	0x01E839A8 ADRP X0, 0x2270000
	0x01E839AC LDR X0, [X0 + 0x5A8]
	0x01E839B0 BL 0x1C16CF4
	0x01E839B4 MOVZ W8, 0x1
	0x01E839B8 STRB W8, [X24 + 0xABE]
	0x01E839BC ADRP X8, 0x2270000
	0x01E839C0 LDR X8, [X8 + 0x5A8]
	0x01E839C4 LDR X0, [X8]
	0x01E839C8 LDR W8, [X0 + 0xE0]
	0x01E839CC CBNZ W8, 0x1E839D4
	0x01E839D0 BL 0x1C16DFC
	0x01E839D4 LDR X8, [X19 + 0x88]
	0x01E839D8 CBZ X8, 0x1E83A64
	0x01E839DC ADRP X8, 0xFFFFFFFFFEC67000
	0x01E839E0 LDR V0, [X8 + 0x410]
	0x01E839E4 ADRP X8, 0x227A000
	0x01E839E8 LDR X8, [X8 + 0xDE0]
	0x01E839EC SCVTF S1, W22
	0x01E839F0 FMUL S0, S1, S0
	0x01E839F4 SCVTF S1, W21
	0x01E839F8 MOVZ W9, 0x7F800000
	0x01E839FC FMUL S0, S0, S1
	0x01E83A00 LDR X0, [X8]
	0x01E83A04 FMOV S1, W9
	0x01E83A08 FRINTP S0, S0
	0x01E83A0C MOVZ W10, 0x80000000
	0x01E83A10 FCVTZS W8, S0
	0x01E83A14 FCMP S0, S1
	0x01E83A18 CSEL W21, W10, W8, EQ
	0x01E83A1C CMP W23, 0x10
	0x01E83A20 MOVZ W8, 0x10
	0x01E83A24 CSEL W22, W23, W8, GT
	0x01E83A28 BL 0x1C16F10
	0x01E83A2C ADRP X8, 0xFFFFFFFFFEC67000
	0x01E83A30 LDR V0, [X8 + 0x35C]
	0x01E83A34 MOV X1, X20
	0x01E83A38 MOV W2, W21
	0x01E83A3C MOV W3, W22
	0x01E83A40 MOV X4, X31
	0x01E83A44 MOV X23, X0
	0x01E83A48 BL 0x1EEACEC
	0x01E83A4C STR X23, [X19 + 0x90]
	0x01E83A50 LDP X20, X19, [X31 + 0x30]
	0x01E83A54 LDP X22, X21, [X31 + 0x20]
	0x01E83A58 LDP X24, X23, [X31 + 0x10]
	0x01E83A5C LDR X30, [X31], #0x40
	0x01E83A60 RET
	0x01E83A64 BL 0x1C16F20
	0x01E83A68 SUB X31, X31, 0x180
	0x01E83A6C STP X29, X30, [X31 + 0x120]
	0x01E83A70 STP X28, X27, [X31 + 0x130]
	0x01E83A74 STP X26, X25, [X31 + 0x140]
	0x01E83A78 STP X24, X23, [X31 + 0x150]
	0x01E83A7C STP X22, X21, [X31 + 0x160]
	0x01E83A80 STP X20, X19, [X31 + 0x170]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X31
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move W20, W5
	017 Move W23, W4
	018 Move W25, W3
	019 Move X19, X2
	020 Move X26, X1
	021 And X1, X1, 0
	022 Add X2, X31, 56
	023 Add X3, X31, 8
	024 Add X4, X31, 0
	025 Move X5, X31
	026 Move X21, X7
	027 Move W22, W6
	028 Move V8, V3
	029 Move V9, V2
	030 Move V10, V1
	031 Move V11, V0
	032 Move X24, X0
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call 0x1E8A388
	036 Move X8, [X24+120]
	037 Compare X8, 0
	038 JumpIfEqual {94}
	039 Move [X8+28], W26
	040 Move X8, [X24+120]
	041 Compare X8, 0
	042 JumpIfEqual {94}
	043 Move [X8+72], S11
	044 Move [X8+80], S10
	045 Move [X8+80], S9
	046 Move X8, [X24+120]
	047 Compare X8, 0
	048 JumpIfEqual {94}
	049 Move [X8+84], S8
	050 Move X9, [X31+56]
	051 Move [X8+32], X9
	052 Move X8, [X24+120]
	053 Compare X8, 0
	054 JumpIfEqual {94}
	055 Move X9, [X31+8]
	056 Move [X8+56], X9
	057 Move X8, [X24+120]
	058 Compare X8, 0
	059 JumpIfEqual {94}
	060 Move X9, [X31]
	061 Move W0, W25
	062 Move X1, X31
	063 Move [X8+48], X9
	064 Move X26, [X24+120]
	065 Call LayerMask.op_Implicit, X0
	066 Compare X26, 0
	067 JumpIfEqual {94}
	068 Move [X26+24], W0
	069 Move X1, [X24+120]
	070 Compare X1, 0
	071 JumpIfEqual {94}
	072 And W3, W20, 1
	073 Move X0, X24
	074 Move X2, X19
	075 Move [X1+16], W22
	076 Move [X1+20], W23
	077 Move [X1+64], X21
	078 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	079 Move X20, [X31+112]
	080 Move X19, [X31+120]
	081 Move X22, [X31+96]
	082 Move X21, [X31+104]
	083 Move X24, [X31+80]
	084 Move X23, [X31+88]
	085 Move X26, [X31+64]
	086 Move X25, [X31+72]
	087 Move X30, [X31+48]
	088 Move D9, [X31+32]
	089 Move D8, [X31+40]
	090 Move D11, [X31+16]
	091 Move D10, [X31+24]
	092 Add X31, X31, 128
	093 Return X0
	094 Call 0x1C17F20

Method: System.Int32 OverlapSphere(UnityEngine.Vector3 origin, System.Single radius, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask = -1, Fusion.HitOptions options = 0, System.Boolean clearHits = True, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E83A84 ADRP X20, 0x2556000
	0x01E83A88 LDRB W8, [X20 + 0x1F4]
	0x01E83A8C MOV X19, X0
	0x01E83A90 TBNZ X8, 0x0, 0x1E83AFC
	0x01E83A94 ADRP X0, 0x227A000
	0x01E83A98 LDR X0, [X0 + 0xDE8]
	0x01E83A9C BL 0x1C16CF4
	0x01E83AA0 ADRP X0, 0x227A000
	0x01E83AA4 LDR X0, [X0 + 0xDF0]
	0x01E83AA8 BL 0x1C16CF4
	0x01E83AAC ADRP X0, 0x2275000
	0x01E83AB0 LDR X0, [X0 + 0x138]
	0x01E83AB4 BL 0x1C16CF4
	0x01E83AB8 ADRP X0, 0x227A000
	0x01E83ABC LDR X0, [X0 + 0xDF8]
	0x01E83AC0 BL 0x1C16CF4
	0x01E83AC4 ADRP X0, 0x227A000
	0x01E83AC8 LDR X0, [X0 + 0xE00]
	0x01E83ACC BL 0x1C16CF4
	0x01E83AD0 ADRP X0, 0x2276000
	0x01E83AD4 LDR X0, [X0 + 0x488]
	0x01E83AD8 BL 0x1C16CF4
	0x01E83ADC ADRP X0, 0x227A000
	0x01E83AE0 LDR X0, [X0 + 0xE08]
	0x01E83AE4 BL 0x1C16CF4
	0x01E83AE8 ADRP X0, 0x227A000
	0x01E83AEC LDR X0, [X0 + 0xE10]
	0x01E83AF0 BL 0x1C16CF4
	0x01E83AF4 MOVZ W8, 0x1
	0x01E83AF8 STRB W8, [X20 + 0x1F4]
	0x01E83AFC MOVI V0.2D, 0x0
	0x01E83B00 STR X31, [X31 + 0x110]
	0x01E83B04 STP V0, V0, [X31 + 0xC0]
	0x01E83B08 STP V0, V0, [X31 + 0xE0]
	0x01E83B0C STR V0, [X31 + 0x10]
	0x01E83B10 STP V0, V0, [X31 + 0x70]
	0x01E83B14 STP V0, V0, [X31 + 0x90]
	0x01E83B18 STR V0, [X31 + 0xB]
	0x01E83B1C STP V0, V0, [X31]
	0x01E83B20 STP V0, V0, [X31 + 0x20]
	0x01E83B24 STP V0, V0, [X31 + 0x40]
	0x01E83B28 STR X31, [X31 + 0x60]
	0x01E83B2C LDR X8, [X19 + 0x88]
	0x01E83B30 CBZ X8, 0x1E83C98
	0x01E83B34 ADRP X9, 0x227A000
	0x01E83B38 LDR X9, [X9 + 0xE08]
	0x01E83B3C ADRP X22, 0x2276000
	0x01E83B40 ADRP X23, 0x227A000
	0x01E83B44 ADRP X27, 0x227A000
	0x01E83B48 ADRP X26, 0x2275000
	0x01E83B4C LDR X22, [X22 + 0x488]
	0x01E83B50 LDR X23, [X23 + 0xE00]
	0x01E83B54 LDR X27, [X27 + 0xDF8]
	0x01E83B58 LDR X26, [X26 + 0x138]
	0x01E83B5C LDR X0, [X9]
	0x01E83B60 ADRP X25, 0x227A000
	0x01E83B64 ADRP X28, 0x227A000
	0x01E83B68 ADRP X24, 0x227A000
	0x01E83B6C LDR W20, [X8 + 0x1C]
	0x01E83B70 LDR X25, [X25 + 0xDF0]
	0x01E83B74 LDR X28, [X28 + 0xE10]
	0x01E83B78 LDR X24, [X24 + 0xDE8]
	0x01E83B7C BL 0x1C16F10
	0x01E83B80 ADD X1, X31, 0xC0
	0x01E83B84 MOV X2, X31
	0x01E83B88 MOV X21, X0
	0x01E83B8C BL 0x1EEE5FC
	0x01E83B90 STR X21, [X19 + 0x68]

ISIL:
	001 Move [X31-96], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X27, 0x2557000
	013 Move W8, [X27+488]
	014 Move W20, W7
	015 Move W21, W6
	016 Move W23, W5
	017 Move X19, X4
	018 Move X24, X3
	019 Move X25, X2
	020 Move W26, W1
	021 Move V8, V3
	022 Move X22, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0x2272000
	028 Move X0, [X0+1136]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X27+488], W8
	032 Move X8, [X22+120]
	033 Compare X8, 0
	034 JumpIfEqual {88}
	035 Move [X8+28], W31
	036 Move X27, [X22+120]
	037 Compare X27, 0
	038 JumpIfEqual {88}
	039 Move X8, 0x2272000
	040 Move X8, [X8+1136]
	041 Move [X27+84], S8
	042 Add X0, X31, 8
	043 Move W1, W26
	044 Move X2, [X8]
	045 Move [X31+8], X31
	046 Call Nullable`1<Int32>..ctor, X0, X1
	047 Move X8, [X31+8]
	048 Move [X27+32], X8
	049 Move X8, [X22+120]
	050 Compare X8, 0
	051 JumpIfEqual {88}
	052 Move [X8+56], X25
	053 Move X8, [X22+120]
	054 Compare X8, 0
	055 JumpIfEqual {88}
	056 Move [X8+48], X24
	057 Move X24, [X22+120]
	058 Move W0, W23
	059 Move X1, X31
	060 Call LayerMask.op_Implicit, X0
	061 Compare X24, 0
	062 JumpIfEqual {88}
	063 Move [X24+24], W0
	064 Move X1, [X22+120]
	065 Compare X1, 0
	066 JumpIfEqual {88}
	067 Move W8, [X31+96]
	068 Move X9, [X31+104]
	069 And W3, W20, 1
	070 Move X0, X22
	071 Move X2, X19
	072 Move [X1+16], W8
	073 Move [X1+20], W21
	074 Move [X1+64], X9
	075 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	076 Move X20, [X31+80]
	077 Move X19, [X31+88]
	078 Move X22, [X31+64]
	079 Move X21, [X31+72]
	080 Move X24, [X31+48]
	081 Move X23, [X31+56]
	082 Move X26, [X31+32]
	083 Move X25, [X31+40]
	084 Move X30, [X31+16]
	085 Move X27, [X31+24]
	086 Move V8, [X31+96]
	087 Return X0
	088 Call 0x1C17F20

Method: System.Int32 OverlapBox(UnityEngine.Vector3 center, UnityEngine.Vector3 extents, UnityEngine.Quaternion orientation, Fusion.PlayerRef player, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask = -1, Fusion.HitOptions options = 0, System.Boolean clearHits = True, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E83B94 LDR X0, [X22]
	0x01E83B98 MOV W1, W20
	0x01E83B9C BL 0x1C16D6C
	0x01E83BA0 LDR X8, [X23]
	0x01E83BA4 MOV X21, X0
	0x01E83BA8 MOV W1, W20
	0x01E83BAC MOV X0, X8
	0x01E83BB0 BL 0x1C16D6C
	0x01E83BB4 LDR X8, [X27]
	0x01E83BB8 MOV X22, X0
	0x01E83BBC MOV X0, X8
	0x01E83BC0 BL 0x1C16F10
	0x01E83BC4 ADD X1, X31, 0xC0
	0x01E83BC8 MOV X2, X21
	0x01E83BCC MOV X3, X22
	0x01E83BD0 MOV X4, X31
	0x01E83BD4 MOV X23, X0
	0x01E83BD8 BL 0x1EEE644
	0x01E83BDC STR X23, [X19 + 0x70]
	0x01E83BE0 LDR X0, [X26]
	0x01E83BE4 MOV W1, W20
	0x01E83BE8 BL 0x1C16D6C
	0x01E83BEC LDR X8, [X25]
	0x01E83BF0 MOV X21, X0
	0x01E83BF4 MOV W1, W20
	0x01E83BF8 MOV X0, X8
	0x01E83BFC BL 0x1C16D6C
	0x01E83C00 LDR X8, [X28]
	0x01E83C04 MOV X22, X0
	0x01E83C08 MOV X0, X8
	0x01E83C0C BL 0x1C16F10
	0x01E83C10 ADD X1, X31, 0x70
	0x01E83C14 MOV X2, X21
	0x01E83C18 MOV X3, X22
	0x01E83C1C MOV X4, X31
	0x01E83C20 MOV X23, X0
	0x01E83C24 BL 0x1EEFA88
	0x01E83C28 STR X23, [X19 + 0x78]
	0x01E83C2C LDR X0, [X26]
	0x01E83C30 MOV W1, W20
	0x01E83C34 BL 0x1C16D6C
	0x01E83C38 LDR X8, [X25]
	0x01E83C3C MOV X21, X0
	0x01E83C40 MOV W1, W20
	0x01E83C44 MOV X0, X8
	0x01E83C48 BL 0x1C16D6C
	0x01E83C4C LDR X8, [X24]
	0x01E83C50 MOV X20, X0
	0x01E83C54 MOV X0, X8
	0x01E83C58 BL 0x1C16F10
	0x01E83C5C ADD X1, X31, 0x0
	0x01E83C60 MOV X2, X21
	0x01E83C64 MOV X3, X20
	0x01E83C68 MOV X4, X31
	0x01E83C6C MOV X22, X0
	0x01E83C70 BL 0x1EED5E0
	0x01E83C74 STR X22, [X19 + 0x80]
	0x01E83C78 LDP X20, X19, [X31 + 0x170]
	0x01E83C7C LDP X22, X21, [X31 + 0x160]
	0x01E83C80 LDP X24, X23, [X31 + 0x150]
	0x01E83C84 LDP X26, X25, [X31 + 0x140]
	0x01E83C88 LDP X28, X27, [X31 + 0x130]
	0x01E83C8C LDP X29, X30, [X31 + 0x120]
	0x01E83C90 ADD X31, X31, 0x180
	0x01E83C94 RET
	0x01E83C98 BL 0x1C16F20
	0x01E83C9C ADRP X8, 0xFFFFFFFFFEC67000
	0x01E83CA0 LDR V0, [X8 + 0x35C]
	0x01E83CA4 RET
	0x01E83CA8 STR X30, [X31 - 0x30]!
	0x01E83CAC STP X22, X21, [X31 + 0x10]
	0x01E83CB0 STP X20, X19, [X31 + 0x20]
	0x01E83CB4 ADRP X22, 0x2556000
	0x01E83CB8 LDRB W8, [X22 + 0x1F7]
	0x01E83CBC MOV W21, W2
	0x01E83CC0 MOV W20, W1
	0x01E83CC4 MOV X19, X0
	0x01E83CC8 TBNZ X8, 0x0, 0x1E83CEC
	0x01E83CCC ADRP X0, 0x227A000
	0x01E83CD0 LDR X0, [X0 + 0xE18]
	0x01E83CD4 BL 0x1C16CF4
	0x01E83CD8 ADRP X0, 0x227A000
	0x01E83CDC LDR X0, [X0 + 0xE20]
	0x01E83CE0 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X31
	010 Move [X31+80], X26
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move W20, W5
	019 Move W23, W4
	020 Move W25, W3
	021 Move X19, X2
	022 Move X26, X1
	023 And X1, X1, 0
	024 Add X2, X31, 72
	025 Add X3, X31, 8
	026 Add X4, X31, 0
	027 Move X5, X31
	028 Move X21, X7
	029 Move W22, W6
	030 Move V8, V5
	031 Move V9, V4
	032 Move V10, V3
	033 Move V11, V2
	034 Move V12, V1
	035 Move V13, V0
	036 Move X24, X0
	037 Move [X31], X31
	038 Move [X31+8], X31
	039 Call 0x1E8A388
	040 Move X8, [X24+128]
	041 Compare X8, 0
	042 JumpIfEqual {116}
	043 Move [X8+28], W26
	044 Move X8, [X24+128]
	045 Compare X8, 0
	046 JumpIfEqual {116}
	047 Move [X8+72], S13
	048 Move [X8+80], S12
	049 Move [X8+80], S11
	050 Move X8, [X24+128]
	051 Compare X8, 0
	052 JumpIfEqual {116}
	053 Move [X8+84], S10
	054 Move [X8+92], S9
	055 Move [X8+92], S8
	056 Move X8, [X24+128]
	057 Compare X8, 0
	058 JumpIfEqual {116}
	059 Move S0, [X31+144]
	060 Move S1, [X31+148]
	061 Move S2, [X31+152]
	062 Move S3, [X31+156]
	063 Move [X8+96], S0
	064 Move [X8+104], S1
	065 Move [X8+104], S2
	066 Move [X8+112], S3
	067 Move X8, [X24+128]
	068 Compare X8, 0
	069 JumpIfEqual {116}
	070 Move X9, [X31+72]
	071 Move [X8+32], X9
	072 Move X8, [X24+128]
	073 Compare X8, 0
	074 JumpIfEqual {116}
	075 Move X9, [X31+8]
	076 Move [X8+56], X9
	077 Move X8, [X24+128]
	078 Compare X8, 0
	079 JumpIfEqual {116}
	080 Move X9, [X31]
	081 Move W0, W25
	082 Move X1, X31
	083 Move [X8+48], X9
	084 Move X26, [X24+128]
	085 Call LayerMask.op_Implicit, X0
	086 Compare X26, 0
	087 JumpIfEqual {116}
	088 Move [X26+24], W0
	089 Move X1, [X24+128]
	090 Compare X1, 0
	091 JumpIfEqual {116}
	092 And W3, W20, 1
	093 Move X0, X24
	094 Move X2, X19
	095 Move [X1+16], W22
	096 Move [X1+20], W23
	097 Move [X1+64], X21
	098 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	099 Move X20, [X31+128]
	100 Move X19, [X31+136]
	101 Move X22, [X31+112]
	102 Move X21, [X31+120]
	103 Move X24, [X31+96]
	104 Move X23, [X31+104]
	105 Move X26, [X31+80]
	106 Move X25, [X31+88]
	107 Move X30, [X31+64]
	108 Move D9, [X31+48]
	109 Move D8, [X31+56]
	110 Move D11, [X31+32]
	111 Move D10, [X31+40]
	112 Move D13, [X31+16]
	113 Move D12, [X31+24]
	114 Add X31, X31, 144
	115 Return X0
	116 Call 0x1C17F20

Method: System.Int32 OverlapBox(UnityEngine.Vector3 center, UnityEngine.Vector3 extents, UnityEngine.Quaternion orientation, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask = -1, Fusion.HitOptions options = 0, System.Boolean clearHits = True, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots = null)

Disassembly:
	0x01E83CE4 MOVZ W8, 0x1
	0x01E83CE8 STRB W8, [X22 + 0x1F7]
	0x01E83CEC LDR X0, [X19 + 0x38]
	0x01E83CF0 CBZ X0, 0x1E83E40
	0x01E83CF4 MOV X1, X31
	0x01E83CF8 BL 0x1E9E7E0
	0x01E83CFC TBNZ X0, 0x0, 0x1E83E30
	0x01E83D00 LDR X8, [X19 + 0x90]
	0x01E83D04 CBNZ X8, 0x1E83D10
	0x01E83D08 MOV X0, X19
	0x01E83D0C BL 0x1E8369C
	0x01E83D10 LDR X0, [X19 + 0x38]
	0x01E83D14 CBZ X0, 0x1E83E40
	0x01E83D18 MOV X1, X31
	0x01E83D1C BL 0x1E9DEF4
	0x01E83D20 TBZ X0, 0x0, 0x1E83D68
	0x01E83D24 ADRP X8, 0x227A000
	0x01E83D28 LDR X8, [X8 + 0xE20]
	0x01E83D2C MOV X1, X31
	0x01E83D30 LDR X21, [X8]
	0x01E83D34 MOV X0, X21
	0x01E83D38 BL 0x32277A8
	0x01E83D3C TBNZ X0, 0x0, 0x1E83E44
	0x01E83D40 MOV X0, X21
	0x01E83D44 MOV X1, X31
	0x01E83D48 MOV X2, X31
	0x01E83D4C BL 0x3C42C88
	0x01E83D50 LDR X8, [X19 + 0x38]
	0x01E83D54 CBZ X8, 0x1E83E40
	0x01E83D58 LDR X8, [X8 + 0x50]
	0x01E83D5C CBZ X8, 0x1E83E40
	0x01E83D60 LDR W21, [X8 + 0x48]
	0x01E83D64 B 0x1E83DAC
	0x01E83D68 LDR X0, [X19 + 0x38]
	0x01E83D6C CBZ X0, 0x1E83E40
	0x01E83D70 MOV X1, X31
	0x01E83D74 BL 0x1E9E538
	0x01E83D78 CMP W0, 0x4
	0x01E83D7C B.EQ 0x1E83E30
	0x01E83D80 ADRP X8, 0x227A000
	0x01E83D84 LDR X8, [X8 + 0xE18]
	0x01E83D88 MOV X1, X31
	0x01E83D8C LDR X22, [X8]
	0x01E83D90 MOV X0, X22
	0x01E83D94 BL 0x32277A8
	0x01E83D98 TBNZ X0, 0x0, 0x1E83E44
	0x01E83D9C MOV X0, X22
	0x01E83DA0 MOV X1, X31
	0x01E83DA4 MOV X2, X31
	0x01E83DA8 BL 0x3C42C88
	0x01E83DAC MOV X0, X19
	0x01E83DB0 MOV W1, W20
	0x01E83DB4 MOV W2, W21
	0x01E83DB8 BL 0x1E83EA0
	0x01E83DBC MOV X0, X31
	0x01E83DC0 BL 0x3C42D48
	0x01E83DC4 LDR X0, [X19 + 0x90]
	0x01E83DC8 CBZ X0, 0x1E83E40
	0x01E83DCC MOV X1, X31
	0x01E83DD0 BL 0x1EEA9E4
	0x01E83DD4 CBZ X0, 0x1E83E10
	0x01E83DD8 LDR X0, [X19 + 0x90]
	0x01E83DDC CBZ X0, 0x1E83E40
	0x01E83DE0 MOV X1, X31
	0x01E83DE4 BL 0x1EEA9E4
	0x01E83DE8 CBZ X0, 0x1E83E40
	0x01E83DEC LDR W8, [X0 + 0x20]
	0x01E83DF0 LDR X0, [X19 + 0x90]
	0x01E83DF4 STR W8, [X19 + 0x48]
	0x01E83DF8 CBZ X0, 0x1E83E40
	0x01E83DFC MOV X1, X31
	0x01E83E00 BL 0x1EEA9E4
	0x01E83E04 CBZ X0, 0x1E83E40
	0x01E83E08 LDR W8, [X0 + 0x3C]
	0x01E83E0C STR W8, [X19 + 0x4C]
	0x01E83E10 LDR X0, [X19 + 0x90]
	0x01E83E14 CBZ X0, 0x1E83E40
	0x01E83E18 MOV X1, X31
	0x01E83E1C BL 0x1EEACB8
	0x01E83E20 CBZ X0, 0x1E83E40
	0x01E83E24 MOV X1, X31
	0x01E83E28 BL 0x1EEC978
	0x01E83E2C STR W0, [X19 + 0x50]
	0x01E83E30 LDP X20, X19, [X31 + 0x20]
	0x01E83E34 LDP X22, X21, [X31 + 0x10]
	0x01E83E38 LDR X30, [X31], #0x30
	0x01E83E3C RET
	0x01E83E40 BL 0x1C16F20
	0x01E83E44 ADRP X0, 0x2278000
	0x01E83E48 LDR X0, [X0 + 0x578]
	0x01E83E4C BL 0x1C16D08
	0x01E83E50 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X27
	010 Move [X31+80], X26
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move X27, 0x2557000
	019 Move W8, [X27+489]
	020 Move W20, W7
	021 Move W21, W6
	022 Move W23, W5
	023 Move X19, X4
	024 Move X24, X3
	025 Move X25, X2
	026 Move W26, W1
	027 Move V8, V5
	028 Move V9, V4
	029 Move V10, V3
	030 Move V11, V2
	031 Move V12, V1
	032 Move V13, V0
	033 Move X22, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {43}
	038 Move X0, 0x2272000
	039 Move X0, [X0+1136]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X27+489], W8
	043 Move X8, [X22+128]
	044 Compare X8, 0
	045 JumpIfEqual {127}
	046 Move [X8+28], W31
	047 Move X8, [X22+128]
	048 Compare X8, 0
	049 JumpIfEqual {127}
	050 Move [X8+72], S13
	051 Move [X8+80], S12
	052 Move [X8+80], S11
	053 Move X8, [X22+128]
	054 Compare X8, 0
	055 JumpIfEqual {127}
	056 Move [X8+84], S10
	057 Move [X8+92], S9
	058 Move [X8+92], S8
	059 Move X8, [X22+128]
	060 Compare X8, 0
	061 JumpIfEqual {127}
	062 Move S1, [X31+144]
	063 Move S0, [X31+148]
	064 Move S3, [X31+152]
	065 Move S2, [X31+156]
	066 Move X9, 0x2272000
	067 Move X9, [X9+1136]
	068 Move [X8+96], S1
	069 Move [X8+104], S0
	070 Move [X8+104], S3
	071 Move [X8+112], S2
	072 Move X27, [X22+128]
	073 Move X2, [X9]
	074 Add X0, X31, 8
	075 Move W1, W26
	076 Move [X31+8], X31
	077 Call Nullable`1<Int32>..ctor, X0, X1
	078 Compare X27, 0
	079 JumpIfEqual {127}
	080 Move X8, [X31+8]
	081 Move [X27+32], X8
	082 Move X8, [X22+128]
	083 Compare X8, 0
	084 JumpIfEqual {127}
	085 Move [X8+56], X25
	086 Move X8, [X22+128]
	087 Compare X8, 0
	088 JumpIfEqual {127}
	089 Move [X8+48], X24
	090 Move X24, [X22+128]
	091 Move W0, W23
	092 Move X1, X31
	093 Call LayerMask.op_Implicit, X0
	094 Compare X24, 0
	095 JumpIfEqual {127}
	096 Move [X24+24], W0
	097 Move X1, [X22+128]
	098 Compare X1, 0
	099 JumpIfEqual {127}
	100 Move W8, [X31+160]
	101 Move X9, [X31+168]
	102 And W3, W20, 1
	103 Move X0, X22
	104 Move X2, X19
	105 Move [X1+16], W8
	106 Move [X1+20], W21
	107 Move [X1+64], X9
	108 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	109 Move X20, [X31+128]
	110 Move X19, [X31+136]
	111 Move X22, [X31+112]
	112 Move X21, [X31+120]
	113 Move X24, [X31+96]
	114 Move X23, [X31+104]
	115 Move X26, [X31+80]
	116 Move X25, [X31+88]
	117 Move X30, [X31+64]
	118 Move X27, [X31+72]
	119 Move D9, [X31+48]
	120 Move D8, [X31+56]
	121 Move D11, [X31+32]
	122 Move D10, [X31+40]
	123 Move D13, [X31+16]
	124 Move D12, [X31+24]
	125 Add X31, X31, 144
	126 Return X0
	127 Call 0x1C17F20

Method: System.Void PositionRotation(Fusion.Hitbox hitbox, System.Int32 tick, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, System.Boolean subtickAccuracy = False, System.Nullable`1<System.Int32> tickTo = null, System.Nullable`1<System.Single> alpha = null)

Disassembly:
	0x01E83E54 MOV X19, X0
	0x01E83E58 ADRP X0, 0x2278000
	0x01E83E5C LDR X0, [X0 + 0x580]
	0x01E83E60 BL 0x1C16D08
	0x01E83E64 MOV X20, X0
	0x01E83E68 ADRP X0, 0x2278000
	0x01E83E6C LDR X0, [X0 + 0x588]
	0x01E83E70 BL 0x1C16D08
	0x01E83E74 MOV X2, X0
	0x01E83E78 MOV X0, X19
	0x01E83E7C MOV X1, X20
	0x01E83E80 MOV X3, X31
	0x01E83E84 BL 0x330E16C
	0x01E83E88 ADRP X0, 0x2278000
	0x01E83E8C LDR X0, [X0 + 0x590]
	0x01E83E90 BL 0x1C16D08
	0x01E83E94 MOV X1, X0
	0x01E83E98 MOV X0, X19
	0x01E83E9C BL 0x1C16DEC
	0x01E83EA0 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+56], X1
	003 Move [X31+64], X30
	004 And W31, W5, 1
	005 Move W8, 4
	006 Move [X31+12], W31
	007 Move [X31+16], W2
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Add X1, X31, 0
	010 Move X2, X3
	011 Move X3, X4
	012 Move [X31+44], X31
	013 Move [X31+36], X31
	014 Move [X31+52], W31
	015 Move [X31+4], X31
	016 Move [X31+20], X6
	017 Move [X31+28], X7
	018 Move [X31], W8
	019 Call HitboxManager.PositionRotationInternal, X0, X1, X2, X3
	020 Move X30, [X31+64]
	021 Add X31, X31, 80
	022 Return 

Method: System.Void PositionRotation(Fusion.Hitbox hitbox, Fusion.PlayerRef player, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, System.Boolean subTickAccuracy = False)

Disassembly:
	0x01E83F74 ADRP X23, 0x227A000
	0x01E83F78 LDR X23, [X23 + 0xDD0]
	0x01E83F7C MOV X22, X31
	0x01E83F80 AND X8, X8, 0x0
	0x01E83F84 CMP X22, W8, UXTW
	0x01E83F88 B.CS 0x1E84088
	0x01E83F8C ADD X8, X20, X22, 0x3, LSL
	0x01E83F90 LDR X21, [X8 + 0x20]
	0x01E83F94 CBZ X21, 0x1E84050
	0x01E83F98 LDRB W8, [X21 + 0x30]
	0x01E83F9C ANDS W31, W8, 0x1C
	0x01E83FA0 B.NE 0x1E84048
	0x01E83FA4 LDR X8, [X21]
	0x01E83FA8 LDR X1, [X23]
	0x01E83FAC LDRB W10, [X8 + 0x130]
	0x01E83FB0 LDRB W9, [X1 + 0x130]
	0x01E83FB4 CMP W10, W9
	0x01E83FB8 B.CC 0x1E8407C
	0x01E83FBC LDR X8, [X8 + 0xC8]
	0x01E83FC0 ADD X8, X8, X9, 0x3, LSL
	0x01E83FC4 LDUR X8, [X8 - 0x8]
	0x01E83FC8 CMP X8, X1
	0x01E83FCC B.NE 0x1E8407C
	0x01E83FD0 LDR X8, [X21 + 0xB0]
	0x01E83FD4 CBZ X8, 0x1E8402C
	0x01E83FD8 LDRB W8, [X8 + 0x30]
	0x01E83FDC TBNZ X8, 0x3, 0x1E8402C
	0x01E83FE0 MOV X0, X21
	0x01E83FE4 BL 0x1E840AC
	0x01E83FE8 TBZ X0, 0x0, 0x1E84048
	0x01E83FEC LDR X9, [X19 + 0x90]
	0x01E83FF0 CBZ X9, 0x1E84084
	0x01E83FF4 LDR X8, [X9 + 0x10]
	0x01E83FF8 CBZ X8, 0x1E84084
	0x01E83FFC LDRSW X9, [X9 + 0x20]
	0x01E84000 LDR W10, [X8 + 0x18]
	0x01E84004 CMP W9, W10
	0x01E84008 B.CS 0x1E84088
	0x01E8400C ADD X8, X8, X9, 0x3, LSL
	0x01E84010 LDR X0, [X8 + 0x20]
	0x01E84014 CBZ X0, 0x1E84084
	0x01E84018 LDR X2, [X19 + 0xA0]
	0x01E8401C MOV X1, X21
	0x01E84020 MOV X3, X31
	0x01E84024 BL 0x1E89604
	0x01E84028 B 0x1E84048
	0x01E8402C STR X19, [X21 + 0xB0]
	0x01E84030 LDR X0, [X19 + 0x90]
	0x01E84034 CBZ X0, 0x1E84084
	0x01E84038 LDR X2, [X19 + 0xA0]
	0x01E8403C MOV X1, X21
	0x01E84040 MOV X3, X31
	0x01E84044 BL 0x1EEB3BC
	0x01E84048 LDR X21, [X21 + 0x28]
	0x01E8404C CBNZ X21, 0x1E83F98
	0x01E84050 LDR W8, [X20 + 0x18]
	0x01E84054 ADD X22, X22, 0x1
	0x01E84058 CMP X22, W8, SXTW
	0x01E8405C B.LT 0x1E83F84
	0x01E84060 LDR X0, [X19 + 0x90]
	0x01E84064 CBZ X0, 0x1E84084
	0x01E84068 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+80], X30
	003 Move [X31+96], X26
	004 Move [X31+104], X25
	005 Move [X31+112], X24
	006 Move [X31+120], X23
	007 Move [X31+128], X22
	008 Move [X31+136], X21
	009 Move [X31+144], X20
	010 Move [X31+152], X19
	011 Move X26, 0x2557000
	012 Move X25, 0x2274000
	013 Move W8, [X26+490]
	014 Move X25, [X25+3840]
	015 Move W24, W5
	016 Move X19, X4
	017 Move X20, X3
	018 Move X23, X2
	019 Move X22, X1
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x2274000
	026 Move X0, [X0+3840]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X26+490], W8
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 And X1, X23, 0
	032 Add X2, X31, 88
	033 Add X3, X31, 72
	034 Add X4, X31, 64
	035 Move X0, X21
	036 Move X5, X31
	037 Move [X31+88], X31
	038 Move [X31+64], X31
	039 Move [X31+72], X31
	040 Move [X31+32], V0
	041 Move [X31+40], V0
	042 Move [X31], V0
	043 Move [X31+8], V0
	044 Call 0x1E8A388
	045 Move X1, [X25]
	046 And W31, W24, 1
	047 Move W8, 4
	048 Add X0, X31, 88
	049 NotImplemented "Instruction CSEL not yet implemented."
	050 Call Nullable`1<Int32>.get_Value, X0
	051 Move X9, [X31+64]
	052 Move X8, [X31+72]
	053 Move [X31+12], W23
	054 Move [X31+16], W0
	055 Add X1, X31, 0
	056 Move X0, X21
	057 Move X2, X20
	058 Move X3, X19
	059 Move [X31+44], X31
	060 Move [X31+36], X31
	061 Move [X31+52], W31
	062 Move [X31], W24
	063 Move [X31+4], X31
	064 Move [X31+20], X8
	065 Move [X31+28], X9
	066 Move [X31+56], X22
	067 Call HitboxManager.PositionRotationInternal, X0, X1, X2, X3
	068 Move X20, [X31+144]
	069 Move X19, [X31+152]
	070 Move X22, [X31+128]
	071 Move X21, [X31+136]
	072 Move X24, [X31+112]
	073 Move X23, [X31+120]
	074 Move X26, [X31+96]
	075 Move X25, [X31+104]
	076 Move X30, [X31+80]
	077 Add X31, X31, 160
	078 Return 

Method: Fusion.LagCompensatedHit GetClosestHit(System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits)

Disassembly:
	0x01E8406C LDP X22, X21, [X31 + 0x10]
	0x01E84070 MOV X1, X31
	0x01E84074 LDP X30, X23, [X31], #0x30
	0x01E84078 B 0x1EEB3A0
	0x01E8407C MOV X0, X21
	0x01E84080 BL 0x1C171E0
	0x01E84084 BL 0x1C16F20
	0x01E84088 BL 0x1C16F28
	0x01E8408C LDR X8, [X0 + 0xB0]
	0x01E84090 CBZ X8, 0x1E840A4
	0x01E84094 LDRB W8, [X8 + 0x30]
	0x01E84098 ANDS W31, W8, 0x8
	0x01E8409C CSET W0, EQ
	0x01E840A0 RET
	0x01E840A4 MOV W0, W31
	0x01E840A8 RET
	0x01E840AC SUB X31, X31, 0x30
	0x01E840B0 STP X30, X21, [X31 + 0x10]
	0x01E840B4 STP X20, X19, [X31 + 0x20]
	0x01E840B8 ADRP X20, 0x2555000
	0x01E840BC LDRB W8, [X20 + 0x1FE]
	0x01E840C0 MOV X19, X0
	0x01E840C4 TBNZ X8, 0x0, 0x1E840DC
	0x01E840C8 ADRP X0, 0x2279000
	0x01E840CC LDR X0, [X0 + 0x48]
	0x01E840D0 BL 0x1C16CF4
	0x01E840D4 MOVZ W8, 0x1
	0x01E840D8 STRB W8, [X20 + 0x1FE]
	0x01E840DC LDR X20, [X19 + 0x38]
	0x01E840E0 CBZ X20, 0x1E84148
	0x01E840E4 ADRP X21, 0x2279000
	0x01E840E8 LDR X19, [X19 + 0x40]
	0x01E840EC LDR X21, [X21 + 0x48]
	0x01E840F0 MOV X0, X20
	0x01E840F4 MOV X1, X31
	0x01E840F8 BL 0x1E9EA20
	0x01E840FC LDR X8, [X20 + 0x50]
	0x01E84100 CBZ X8, 0x1E8411C
	0x01E84104 AND X2, X0, 0x0
	0x01E84108 MOV X0, X8
	0x01E8410C MOV X1, X19
	0x01E84110 MOV X3, X31
	0x01E84114 BL 0x1DBF658
	0x01E84118 B 0x1E84120
	0x01E8411C MOV W0, W31
	0x01E84120 LDR X2, [X21]
	0x01E84124 STRH W0, [X31 + 0xC]
	0x01E84128 ADD X0, X31, 0xC
	0x01E8412C MOVZ W1, 0x1
	0x01E84130 BL 0x242D5B8
	0x01E84134 LDP X20, X19, [X31 + 0x20]
	0x01E84138 LDP X30, X21, [X31 + 0x10]
	0x01E8413C AND W0, W0, 0x1
	0x01E84140 ADD X31, X31, 0x30
	0x01E84144 RET
	0x01E84148 BL 0x1C16F20
	0x01E8414C STR X30, [X31 - 0x10]!
	0x01E84150 LDR X0, [X0 + 0x90]
	0x01E84154 CBZ X0, 0x1E84164
	0x01E84158 MOV X2, X31
	0x01E8415C LDR X30, [X31], #0x10
	0x01E84160 B 0x1EEB4B8

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+112], D8
	003 Move [X31+128], X30
	004 Move [X31+136], X23
	005 Move [X31+144], X22
	006 Move [X31+152], X21
	007 Move [X31+160], X20
	008 Move [X31+168], X19
	009 Move X21, 0x2556000
	010 Move W9, [X21+491]
	011 Move X20, X0
	012 Move X19, X8
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x227A000
	018 Move X0, [X0+3480]
	019 Call 0x1C17CF4
	020 Move X0, 0x227A000
	021 Move X0, [X0+3496]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+491], W8
	025 Compare X20, 0
	026 JumpIfEqual {70}
	027 Move X23, 0x227A000
	028 Move X23, [X23+3496]
	029 Add X8, X31, 8
	030 Move X0, X20
	031 Move W1, W31
	032 Move X2, [X23]
	033 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	034 Move W8, [X20+24]
	035 Move W21, W31
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move V8, [X31+76]
	038 Move W21, W31
	039 Move W22, 1
	040 Move X2, [X23]
	041 Add X8, X31, 8
	042 Move X0, X20
	043 Move W1, W22
	044 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	045 Move V0, [X31+76]
	046 Move W8, [X20+24]
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Add W22, W22, 1
	050 NotImplemented "Instruction FCSEL not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X2, [X23]
	053 Add X8, X31, 8
	054 Move X0, X20
	055 Move W1, W21
	056 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	057 Add X1, X31, 8
	058 Move W2, 104
	059 Move X0, X19
	060 Call 0x3EB2AC0
	061 Move X20, [X31+160]
	062 Move X19, [X31+168]
	063 Move X22, [X31+144]
	064 Move X21, [X31+152]
	065 Move X30, [X31+128]
	066 Move X23, [X31+136]
	067 Move V8, [X31+112]
	068 Add X31, X31, 176
	069 Return X0
	070 Call 0x1C17F20

Method: System.Boolean Raycast(Fusion.LagCompensation.RaycastQuery query, out Fusion.LagCompensatedHit hit)

Disassembly:
	0x01E84164 BL 0x1C16F20
	0x01E84168 STP X30, X19, [X31 - 0x10]!
	0x01E8416C MOV X19, X0
	0x01E84170 LDR X0, [X0 + 0x38]
	0x01E84174 CBZ X0, 0x1E841B0
	0x01E84178 MOV X1, X31
	0x01E8417C BL 0x1E9DEF4
	0x01E84180 TBZ X0, 0x0, 0x1E841A8
	0x01E84184 LDR X8, [X19 + 0x38]
	0x01E84188 CBZ X8, 0x1E841B0
	0x01E8418C LDR X8, [X8 + 0x50]
	0x01E84190 CBZ X8, 0x1E841B0
	0x01E84194 LDR W1, [X8 + 0x48]
	0x01E84198 LDR W2, [X8 + 0x74]
	0x01E8419C MOV X0, X19
	0x01E841A0 LDP X30, X19, [X31], #0x10
	0x01E841A4 B 0x1E83CA8
	0x01E841A8 LDP X30, X19, [X31], #0x10
	0x01E841AC RET
	0x01E841B0 BL 0x1C16F20
	0x01E841B4 SUB X31, X31, 0x30
	0x01E841B8 STP X30, X21, [X31 + 0x10]
	0x01E841BC STP X20, X19, [X31 + 0x20]
	0x01E841C0 STR W31, [X31]
	0x01E841C4 MOV X19, X0
	0x01E841C8 LDR X0, [X0 + 0x38]
	0x01E841CC CBZ X0, 0x1E842AC
	0x01E841D0 MOV W21, W1
	0x01E841D4 MOV X1, X31
	0x01E841D8 BL 0x1E9E87C
	0x01E841DC TBZ X0, 0x0, 0x1E8429C
	0x01E841E0 LDR X8, [X19 + 0x38]
	0x01E841E4 CBZ X8, 0x1E842AC
	0x01E841E8 LDR X0, [X8 + 0x50]
	0x01E841EC CBZ X0, 0x1E842AC
	0x01E841F0 MOV X1, X31
	0x01E841F4 BL 0x1EC048C
	0x01E841F8 LDR X8, [X19 + 0x38]
	0x01E841FC CBZ X8, 0x1E842AC
	0x01E84200 LDR X8, [X8 + 0x50]
	0x01E84204 CBZ X8, 0x1E842AC
	0x01E84208 LDR W8, [X8 + 0x48]
	0x01E8420C MOV W20, W0
	0x01E84210 MUL W1, W0, W21
	0x01E84214 ADD X0, X31, 0x8
	0x01E84218 MOV X2, X31
	0x01E8421C STR W8, [X31 + 0x8]
	0x01E84220 BL 0x1E9023C
	0x01E84224 LDR X8, [X19 + 0x38]
	0x01E84228 CBZ X8, 0x1E842AC
	0x01E8422C LDR X8, [X8 + 0x50]
	0x01E84230 CBZ X8, 0x1E842AC
	0x01E84234 LDR W8, [X8 + 0x48]
	0x01E84238 MOV X21, X0
	0x01E8423C ADD X0, X31, 0x8
	0x01E84240 MOV W1, W20
	0x01E84244 MOV X2, X31
	0x01E84248 STR W8, [X31 + 0x8]
	0x01E8424C BL 0x1E9023C
	0x01E84250 CMP W0, W21
	0x01E84254 STR W0, [X31]
	0x01E84258 B.GT 0x1E8429C
	0x01E8425C MOV W1, W0
	0x01E84260 LDR X8, [X19 + 0x38]
	0x01E84264 CBZ X8, 0x1E842AC
	0x01E84268 LDR X8, [X8 + 0x50]
	0x01E8426C CBZ X8, 0x1E842AC
	0x01E84270 LDR W2, [X8 + 0x74]
	0x01E84274 MOV X0, X19
	0x01E84278 BL 0x1E83CA8
	0x01E8427C ADD X0, X31, 0x0
	0x01E84280 MOV W1, W20
	0x01E84284 MOV X2, X31
	0x01E84288 BL 0x1E9023C

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+208], X30
	003 Move [X31+224], X22
	004 Move [X31+232], X21
	005 Move [X31+240], X20
	006 Move [X31+248], X19
	007 Move X22, 0x2556000
	008 Move W8, [X22+492]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x227A000
	017 Move X0, [X0+3448]
	018 Call 0x1C17CF4
	019 Move X0, 0x2273000
	020 Move X0, [X0+3832]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+492], W8
	024 Compare X21, 0
	025 JumpIfEqual {87}
	026 Move X2, X21
	027 Add X2, X2, 32
	028 Move W8, [X2]
	029 Compare W8, 0
	030 JumpIfNotEqual {37}
	031 Move W1, [X21+28]
	032 Add X3, X21, 56
	033 Add X4, X21, 48
	034 Move X0, X20
	035 Move X5, X31
	036 Call 0x1E8A388
	037 Move X2, [X20+96]
	038 Compare X2, 0
	039 JumpIfEqual {87}
	040 Move W8, [X2+24]
	041 Move W9, [X2+28]
	042 Add W9, W9, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X2+24], W31
	045 Move [X2+28], W9
	046 Move X0, [X2+16]
	047 Move W1, W31
	048 Move W2, W8
	049 Move X3, X31
	050 Call Array.Clear, X0, X1, X2
	051 Move X2, [X20+96]
	052 Move X0, X20
	053 Move X1, X21
	054 Move W3, W31
	055 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	056 Move W21, W0
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, [X20+96]
	059 Add X8, X31, 0
	060 Move X1, X31
	061 Call 0x1E8A50C
	062 Add X0, X31, 104
	063 Add X1, X31, 0
	064 Move W2, 104
	065 Call 0x3EB2AC0
	066 Add X1, X31, 104
	067 Move W2, 104
	068 Move X0, X19
	069 Call 0x3EB2AC0
	070 NotImplemented "Instruction MOVI not yet implemented."
	071 Move [X19+96], X31
	072 Move [X19+64], V0
	073 Move [X19+72], V0
	074 Move [X19+32], V0
	075 Move [X19+40], V0
	076 Move [X19], V0
	077 Move [X19+8], V0
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X20, [X31+240]
	080 Move X19, [X31+248]
	081 Move X22, [X31+224]
	082 Move X21, [X31+232]
	083 Move X30, [X31+208]
	084 NotImplemented "Instruction CSET not yet implemented."
	085 Add X31, X31, 256
	086 Return X0
	087 Call 0x1C17F20

Method: System.Int32 RaycastAll(Fusion.LagCompensation.RaycastAllQuery query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Boolean clearHits = True)

Disassembly:
	0x01E8428C MOV X1, X0
	0x01E84290 CMP W1, W21
	0x01E84294 STR W1, [X31]
	0x01E84298 B.LE 0x1E84260
	0x01E8429C LDP X20, X19, [X31 + 0x20]
	0x01E842A0 LDP X30, X21, [X31 + 0x10]
	0x01E842A4 ADD X31, X31, 0x30
	0x01E842A8 RET
	0x01E842AC BL 0x1C16F20
	0x01E842B0 B 0x1E8369C
	0x01E842B4 STP X30, X25, [X31 - 0x40]!
	0x01E842B8 STP X24, X23, [X31 + 0x10]
	0x01E842BC STP X22, X21, [X31 + 0x20]
	0x01E842C0 STP X20, X19, [X31 + 0x30]
	0x01E842C4 ADRP X24, 0x2555000
	0x01E842C8 ADRP X25, 0x2279000
	0x01E842CC ADRP X20, 0x2279000
	0x01E842D0 ADRP X23, 0x2279000
	0x01E842D4 ADRP X22, 0x2279000
	0x01E842D8 ADRP X21, 0x2279000
	0x01E842DC LDRB W8, [X24 + 0x1F9]
	0x01E842E0 LDR X25, [X25 + 0xE28]
	0x01E842E4 LDR X20, [X20 + 0xE30]
	0x01E842E8 LDR X23, [X23 + 0xE38]
	0x01E842EC LDR X22, [X22 + 0xE40]
	0x01E842F0 LDR X21, [X21 + 0xE48]
	0x01E842F4 MOV X19, X0
	0x01E842F8 TBNZ X8, 0x0, 0x1E84340
	0x01E842FC ADRP X0, 0x2279000
	0x01E84300 LDR X0, [X0 + 0xE48]
	0x01E84304 BL 0x1C16CF4
	0x01E84308 ADRP X0, 0x2279000
	0x01E8430C LDR X0, [X0 + 0xE40]
	0x01E84310 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2556000
	008 Move W8, [X23+493]
	009 Move W21, W3
	010 Move X19, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2273000
	018 Move X0, [X0+3832]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+493], W8
	022 Compare X20, 0
	023 JumpIfEqual {47}
	024 Move X2, X20
	025 Add X2, X2, 32
	026 Move W8, [X2]
	027 Compare W8, 0
	028 JumpIfNotEqual {35}
	029 Move W1, [X20+28]
	030 Add X3, X20, 56
	031 Add X4, X20, 48
	032 Move X0, X22
	033 Move X5, X31
	034 Call 0x1E8A388
	035 And W3, W21, 1
	036 Move X0, X22
	037 Move X1, X20
	038 Move X2, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	046 Return X0
	047 Call 0x1C17F20

Method: System.Int32 OverlapSphere(Fusion.LagCompensation.SphereOverlapQuery query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Boolean clearHits = True)

Disassembly:
	0x01E84314 ADRP X0, 0x2279000
	0x01E84318 LDR X0, [X0 + 0xE30]
	0x01E8431C BL 0x1C16CF4
	0x01E84320 ADRP X0, 0x2279000
	0x01E84324 LDR X0, [X0 + 0xE38]
	0x01E84328 BL 0x1C16CF4
	0x01E8432C ADRP X0, 0x2279000
	0x01E84330 LDR X0, [X0 + 0xE28]
	0x01E84334 BL 0x1C16CF4
	0x01E84338 MOVZ W8, 0x1
	0x01E8433C STRB W8, [X24 + 0x1F9]
	0x01E84340 LDR X0, [X25]
	0x01E84344 BL 0x1C16F10
	0x01E84348 LDR X1, [X20]
	0x01E8434C MOV X20, X0
	0x01E84350 BL 0x2FEC5B4
	0x01E84354 STR X20, [X19 + 0x60]
	0x01E84358 LDR X0, [X23]
	0x01E8435C BL 0x1C16F10
	0x01E84360 LDR X1, [X22]
	0x01E84364 MOV X20, X0
	0x01E84368 BL 0x2FCA4D8
	0x01E8436C STR X20, [X19 + 0x98]
	0x01E84370 LDR X0, [X21]
	0x01E84374 BL 0x1C16F10
	0x01E84378 MOV X1, X31
	0x01E8437C MOV X20, X0
	0x01E84380 BL 0x1EF0D28
	0x01E84384 STR X20, [X19 + 0xA0]
	0x01E84388 MOV X0, X19
	0x01E8438C LDP X20, X19, [X31 + 0x30]
	0x01E84390 LDP X22, X21, [X31 + 0x20]
	0x01E84394 LDP X24, X23, [X31 + 0x10]
	0x01E84398 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2556000
	008 Move W8, [X23+494]
	009 Move W21, W3
	010 Move X19, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2273000
	018 Move X0, [X0+3832]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+494], W8
	022 Compare X20, 0
	023 JumpIfEqual {47}
	024 Move X2, X20
	025 Add X2, X2, 32
	026 Move W8, [X2]
	027 Compare W8, 0
	028 JumpIfNotEqual {35}
	029 Move W1, [X20+28]
	030 Add X3, X20, 56
	031 Add X4, X20, 48
	032 Move X0, X22
	033 Move X5, X31
	034 Call 0x1E8A388
	035 And W3, W21, 1
	036 Move X0, X22
	037 Move X1, X20
	038 Move X2, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	046 Return X0
	047 Call 0x1C17F20

Method: System.Int32 OverlapBox(Fusion.LagCompensation.BoxOverlapQuery query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Boolean clearHits = True)

Disassembly:
	0x01E8439C LDP X30, X25, [X31], #0x40
	0x01E843A0 B 0x1E74F1C
	0x01E843A4 MOV W0, W31
	0x01E843A8 RET
	0x01E843AC ADRP X8, 0xFFFFFFFFFEC6A000
	0x01E843B0 LDR V0, [X8 + 0x2C0]
	0x01E843B4 MOVZ W8, 0x40
	0x01E843B8 MOV X1, X31
	0x01E843BC STR W8, [X0 + 0x1C]
	0x01E843C0 STUR D0, [X0 + 0x14]
	0x01E843C4 B 0x33BDD8C
	0x01E843C8 SUB X31, X31, 0x90
	0x01E843CC STR D14, [X31 + 0x30]
	0x01E843D0 STP D13, D12, [X31 + 0x40]
	0x01E843D4 STP D11, D10, [X31 + 0x50]
	0x01E843D8 STP D9, D8, [X31 + 0x60]
	0x01E843DC STP X30, X21, [X31 + 0x70]
	0x01E843E0 STP X20, X19, [X31 + 0x80]
	0x01E843E4 MOV X1, X31
	0x01E843E8 MOV X20, X0
	0x01E843EC MOV X19, X8
	0x01E843F0 STP X31, X31, [X31]
	0x01E843F4 BL 0x3C8E678
	0x01E843F8 MOV X0, X20
	0x01E843FC MOV X1, X31
	0x01E84400 MOV V9.16B, V0.16B
	0x01E84404 MOV V10.16B, V1.16B
	0x01E84408 MOV V11.16B, V2.16B
	0x01E8440C BL 0x3C8E684
	0x01E84410 MOV X0, X20
	0x01E84414 MOV X1, X31
	0x01E84418 MOV V8.16B, V0.16B
	0x01E8441C BL 0x3C8E66C
	0x01E84420 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2556000
	008 Move W8, [X23+495]
	009 Move W21, W3
	010 Move X19, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2273000
	018 Move X0, [X0+3832]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+495], W8
	022 Compare X20, 0
	023 JumpIfEqual {47}
	024 Move X2, X20
	025 Add X2, X2, 32
	026 Move W8, [X2]
	027 Compare W8, 0
	028 JumpIfNotEqual {35}
	029 Move W1, [X20+28]
	030 Add X3, X20, 56
	031 Add X4, X20, 48
	032 Move X0, X22
	033 Move X5, X31
	034 Call 0x1E8A388
	035 And W3, W21, 1
	036 Move X0, X22
	037 Move X1, X20
	038 Move X2, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Call HitboxManager.QueryInternal, X0, X1, X2, X3
	046 Return X0
	047 Call 0x1C17F20

Method: System.Void GetPlayerTickAndAlpha(Fusion.PlayerRef player, out System.Nullable`1<System.Int32> tickFrom, out System.Nullable`1<System.Int32> tickTo, out System.Nullable`1<System.Single> alpha)

Disassembly:
	0x01E84424 MOV X1, X31
	0x01E84428 MOV V12.16B, V0.16B
	0x01E8442C MOV V13.16B, V1.16B
	0x01E84430 MOV V14.16B, V2.16B
	0x01E84434 STP X31, X31, [X31 + 0x18]
	0x01E84438 STR W31, [X31 + 0x28]
	0x01E8443C STR X31, [X31 + 0x10]
	0x01E84440 BL 0x3C8E5C0
	0x01E84444 CBZ X0, 0x1E844C0
	0x01E84448 MOV X1, X31
	0x01E8444C BL 0x3C32ECC
	0x01E84450 MOV X21, X0
	0x01E84454 MOV X0, X20
	0x01E84458 MOV X1, X31
	0x01E8445C BL 0x3C8E5C0
	0x01E84460 ADRP X8, 0xFFFFFFFFFEC69000
	0x01E84464 LDR W9, [X31 + 0x28]
	0x01E84468 LDR X10, [X31 + 0x20]
	0x01E8446C LDP V1, V0, [X31]
	0x01E84470 LDR V2, [X8 + 0x898]
	0x01E84474 STR X21, [X19 + 0x8]
	0x01E84478 STP S9, S10, [X19 + 0x10]
	0x01E8447C STP S11, S12, [X19 + 0x18]
	0x01E84480 STP S13, S14, [X19 + 0x20]
	0x01E84484 STP X31, X0, [X19 + 0x48]
	0x01E84488 STR S8, [X19 + 0x44]
	0x01E8448C STR X10, [X19 + 0x28]
	0x01E84490 STR W9, [X19 + 0x30]
	0x01E84494 STUR V0, [X19 + 0x34]
	0x01E84498 STR D2, [X19]
	0x01E8449C STUR V1, [X19 + 0x58]
	0x01E844A0 LDP X20, X19, [X31 + 0x80]
	0x01E844A4 LDP X30, X21, [X31 + 0x70]
	0x01E844A8 LDP D9, D8, [X31 + 0x60]
	0x01E844AC LDP D11, D10, [X31 + 0x50]
	0x01E844B0 LDP D13, D12, [X31 + 0x40]
	0x01E844B4 LDR V14, [X31 + 0x30]
	0x01E844B8 ADD X31, X31, 0x90
	0x01E844BC RET
	0x01E844C0 BL 0x1C16F20
	0x01E844C4 SUB X31, X31, 0x70
	0x01E844C8 STR D12, [X31 + 0x20]
	0x01E844CC STP D11, D10, [X31 + 0x30]
	0x01E844D0 STP D9, D8, [X31 + 0x40]
	0x01E844D4 STP X30, X21, [X31 + 0x50]
	0x01E844D8 STP X20, X19, [X31 + 0x60]
	0x01E844DC MOV X1, X31
	0x01E844E0 MOV X20, X0
	0x01E844E4 MOV X19, X8
	0x01E844E8 BL 0x3C896A8
	0x01E844EC MOV X0, X20
	0x01E844F0 MOV X1, X31
	0x01E844F4 MOV V9.16B, V0.16B
	0x01E844F8 MOV V10.16B, V1.16B
	0x01E844FC BL 0x3C896B0
	0x01E84500 MOV X0, X20
	0x01E84504 MOV X1, X31
	0x01E84508 MOV V8.16B, V0.16B
	0x01E8450C BL 0x3C896A0
	0x01E84510 MOV X0, X20
	0x01E84514 MOV X1, X31
	0x01E84518 MOV V11.16B, V0.16B
	0x01E8451C MOV V12.16B, V1.16B
	0x01E84520 STP X31, X31, [X31 + 0x8]
	0x01E84524 STR W31, [X31 + 0x18]
	0x01E84528 STR X31, [X31]
	0x01E8452C BL 0x3C896B8
	0x01E84530 CBZ X0, 0x1E845AC
	0x01E84534 MOV X1, X31
	0x01E84538 BL 0x3C32ECC
	0x01E8453C MOV X21, X0
	0x01E84540 MOV X0, X20
	0x01E84544 MOV X1, X31
	0x01E84548 BL 0x3C896B8
	0x01E8454C ADRP X8, 0xFFFFFFFFFEC69000
	0x01E84550 LDR W9, [X31 + 0x18]
	0x01E84554 LDR V0, [X8 + 0xEC8]
	0x01E84558 LDR X8, [X31 + 0x10]
	0x01E8455C LDR V1, [X31]
	0x01E84560 STR X21, [X19 + 0x8]
	0x01E84564 STP S9, S10, [X19 + 0x10]
	0x01E84568 STR W31, [X19 + 0x18]
	0x01E8456C STP S11, S12, [X19 + 0x1C]
	0x01E84570 STR W31, [X19 + 0x24]
	0x01E84574 STR S8, [X19 + 0x44]
	0x01E84578 STP X31, X31, [X19 + 0x48]
	0x01E8457C STR X8, [X19 + 0x28]
	0x01E84580 STR W9, [X19 + 0x30]
	0x01E84584 STUR V1, [X19 + 0x34]
	0x01E84588 STR D0, [X19]
	0x01E8458C STP X0, X31, [X19 + 0x58]
	0x01E84590 LDP X20, X19, [X31 + 0x60]
	0x01E84594 LDP X30, X21, [X31 + 0x50]
	0x01E84598 LDP D9, D8, [X31 + 0x40]
	0x01E8459C LDP D11, D10, [X31 + 0x30]
	0x01E845A0 LDR V12, [X31 + 0x20]
	0x01E845A4 ADD X31, X31, 0x70

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X24, 0x2556000
	010 Move W8, [X24+496]
	011 Move X19, X4
	012 Move X20, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X23, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x2271000
	021 Move X0, [X0+1136]
	022 Call 0x1C17CF4
	023 Move X0, 0x2274000
	024 Move X0, [X0+312]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+496], W8
	028 Move X8, [X23+56]
	029 Compare X8, 0
	030 JumpIfEqual {118}
	031 Move X0, [X8+80]
	032 Compare X0, 0
	033 JumpIfEqual {118}
	034 And X1, X22, 0
	035 Move X2, X31
	036 Call Simulation.GetInputForPlayer, X0, X1
	037 Compare X0, 0
	038 JumpIfEqual {83}
	039 Move X22, X0
	040 Move X0, [X23+56]
	041 Compare X0, 0
	042 JumpIfEqual {118}
	043 Move X1, X31
	044 Call NetworkRunner.get_IsClient, X0
	045 Move X8, [X22+32]
	046 Compare X8, 0
	047 JumpIfEqual {118}
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {98}
	052 Move X23, 0x2271000
	053 Move W1, [X8+8]
	054 Move X23, [X23+1136]
	055 Add X0, X31, 24
	056 Move [X31+24], X31
	057 Move X2, [X23]
	058 Call Nullable`1<Int32>..ctor, X0, X1
	059 Move X8, [X31+24]
	060 Move [X21], X8
	061 Move X8, [X22+32]
	062 Compare X8, 0
	063 JumpIfEqual {118}
	064 Move W1, [X8+12]
	065 Move X2, [X23]
	066 Add X0, X31, 8
	067 Move [X31+8], X31
	068 Call Nullable`1<Int32>..ctor, X0, X1
	069 Move X8, [X31+8]
	070 Move [X20], X8
	071 Move X8, [X22+32]
	072 Compare X8, 0
	073 JumpIfEqual {118}
	074 Move V0, [X8+4]
	075 Move X8, 0x2274000
	076 Move X8, [X8+312]
	077 Add X0, X31, 0
	078 Move [X31], X31
	079 Move X1, [X8]
	080 Call Nullable`1<Single>..ctor, X0, V0
	081 Move X8, [X31]
	082 Move [X19], X8
	083 Move X0, [X23+144]
	084 Compare X0, 0
	085 JumpIfEqual {91}
	086 Move X1, X31
	087 Call HitboxBuffer.get_Current, X0
	088 Compare X0, 0
	089 JumpIfEqual {118}
	090 Add X8, X0, 48
	091 Move X8, [X23+56]
	092 Compare X8, 0
	093 JumpIfEqual {118}
	094 Move X8, [X8+80]
	095 Compare X8, 0
	096 JumpIfEqual {118}
	097 Add X8, X8, 72
	098 Move W1, [X8]
	099 Move X8, 0x2271000
	100 Move X8, [X8+1136]
	101 Add X0, X31, 24
	102 Move [X31+24], X31
	103 Move X2, [X8]
	104 Call Nullable`1<Int32>..ctor, X0, X1
	105 Move X8, [X31+24]
	106 Move [X21], X8
	107 Move [X20], X31
	108 Move [X19], X31
	109 Move X20, [X31+64]
	110 Move X19, [X31+72]
	111 Move X22, [X31+48]
	112 Move X21, [X31+56]
	113 Move X24, [X31+32]
	114 Move X23, [X31+40]
	115 Move X30, [X31+16]
	116 Add X31, X31, 80
	117 Return 
	118 Call 0x1C17F20

Method: Fusion.Statistics.LagCompensationStatisticsSnapshot GetStatisticsSnapshot()

Disassembly:
	0x01E845A8 RET
	0x01E845AC BL 0x1C16F20
	0x01E845B0 STR D8, [X31 - 0x60]!
	0x01E845B4 STP X29, X30, [X31 + 0x10]
	0x01E845B8 STP X26, X25, [X31 + 0x20]
	0x01E845BC STP X24, X23, [X31 + 0x30]
	0x01E845C0 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+160]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+16]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 QueryInternal(Fusion.LagCompensation.Query query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Boolean clearHits)

Disassembly:
	0x01E83258 MOVI V0.2D, 0x0
	0x01E8325C STR X31, [X19 + 0x60]
	0x01E83260 STP V0, V0, [X19 + 0x40]
	0x01E83264 STP V0, V0, [X19 + 0x20]
	0x01E83268 STP V0, V0, [X19]
	0x01E8326C CMP W21, 0x0
	0x01E83270 LDP X20, X19, [X31 + 0xF0]
	0x01E83274 LDP X22, X21, [X31 + 0xE0]
	0x01E83278 LDR X30, [X31 + 0xD0]
	0x01E8327C CSET W0, GT
	0x01E83280 ADD X31, X31, 0x100
	0x01E83284 RET
	0x01E83288 BL 0x1C16F20
	0x01E8328C STP X30, X23, [X31 - 0x30]!
	0x01E83290 STP X22, X21, [X31 + 0x10]
	0x01E83294 STP X20, X19, [X31 + 0x20]
	0x01E83298 ADRP X23, 0x2556000
	0x01E8329C LDRB W8, [X23 + 0x1ED]
	0x01E832A0 MOV W21, W3
	0x01E832A4 MOV X19, X2
	0x01E832A8 MOV X20, X1
	0x01E832AC MOV X22, X0
	0x01E832B0 TBNZ X8, 0x0, 0x1E832C8
	0x01E832B4 ADRP X0, 0x2273000
	0x01E832B8 LDR X0, [X0 + 0xEF8]
	0x01E832BC BL 0x1C16CF4
	0x01E832C0 MOVZ W8, 0x1
	0x01E832C4 STRB W8, [X23 + 0x1ED]
	0x01E832C8 CBZ X20, 0x1E83310
	0x01E832CC MOV X2, X20
	0x01E832D0 LDRB W8, [X2 + 0x20]!
	0x01E832D4 CBNZ W8, 0x1E832F0
	0x01E832D8 LDR W1, [X20 + 0x1C]
	0x01E832DC ADD X3, X20, 0x38
	0x01E832E0 ADD X4, X20, 0x30
	0x01E832E4 MOV X0, X22
	0x01E832E8 MOV X5, X31
	0x01E832EC BL 0x1E89388
	0x01E832F0 AND W3, W21, 0x1
	0x01E832F4 MOV X0, X22
	0x01E832F8 MOV X1, X20
	0x01E832FC MOV X2, X19
	0x01E83300 LDP X20, X19, [X31 + 0x20]
	0x01E83304 LDP X22, X21, [X31 + 0x10]
	0x01E83308 LDP X30, X23, [X31], #0x30
	0x01E8330C B 0x1E82258
	0x01E83310 BL 0x1C16F20
	0x01E83314 STP X30, X23, [X31 - 0x30]!
	0x01E83318 STP X22, X21, [X31 + 0x10]
	0x01E8331C STP X20, X19, [X31 + 0x20]
	0x01E83320 ADRP X23, 0x2556000
	0x01E83324 LDRB W8, [X23 + 0x1EE]
	0x01E83328 MOV W21, W3
	0x01E8332C MOV X19, X2
	0x01E83330 MOV X20, X1
	0x01E83334 MOV X22, X0
	0x01E83338 TBNZ X8, 0x0, 0x1E83350
	0x01E8333C ADRP X0, 0x2273000
	0x01E83340 LDR X0, [X0 + 0xEF8]
	0x01E83344 BL 0x1C16CF4
	0x01E83348 MOVZ W8, 0x1
	0x01E8334C STRB W8, [X23 + 0x1EE]
	0x01E83350 CBZ X20, 0x1E83398
	0x01E83354 MOV X2, X20
	0x01E83358 LDRB W8, [X2 + 0x20]!
	0x01E8335C CBNZ W8, 0x1E83378
	0x01E83360 LDR W1, [X20 + 0x1C]
	0x01E83364 ADD X3, X20, 0x38
	0x01E83368 ADD X4, X20, 0x30
	0x01E8336C MOV X0, X22
	0x01E83370 MOV X5, X31
	0x01E83374 BL 0x1E89388
	0x01E83378 AND W3, W21, 0x1
	0x01E8337C MOV X0, X22
	0x01E83380 MOV X1, X20
	0x01E83384 MOV X2, X19
	0x01E83388 LDP X20, X19, [X31 + 0x20]
	0x01E8338C LDP X22, X21, [X31 + 0x10]
	0x01E83390 LDP X30, X23, [X31], #0x30
	0x01E83394 B 0x1E82258
	0x01E83398 BL 0x1C16F20
	0x01E8339C STP X30, X23, [X31 - 0x30]!
	0x01E833A0 STP X22, X21, [X31 + 0x10]
	0x01E833A4 STP X20, X19, [X31 + 0x20]
	0x01E833A8 ADRP X23, 0x2556000
	0x01E833AC LDRB W8, [X23 + 0x1EF]
	0x01E833B0 MOV W21, W3
	0x01E833B4 MOV X19, X2
	0x01E833B8 MOV X20, X1
	0x01E833BC MOV X22, X0
	0x01E833C0 TBNZ X8, 0x0, 0x1E833D8
	0x01E833C4 ADRP X0, 0x2273000
	0x01E833C8 LDR X0, [X0 + 0xEF8]
	0x01E833CC BL 0x1C16CF4
	0x01E833D0 MOVZ W8, 0x1
	0x01E833D4 STRB W8, [X23 + 0x1EF]
	0x01E833D8 CBZ X20, 0x1E83420
	0x01E833DC MOV X2, X20
	0x01E833E0 LDRB W8, [X2 + 0x20]!
	0x01E833E4 CBNZ W8, 0x1E83400
	0x01E833E8 LDR W1, [X20 + 0x1C]
	0x01E833EC ADD X3, X20, 0x38
	0x01E833F0 ADD X4, X20, 0x30
	0x01E833F4 MOV X0, X22
	0x01E833F8 MOV X5, X31
	0x01E833FC BL 0x1E89388
	0x01E83400 AND W3, W21, 0x1
	0x01E83404 MOV X0, X22
	0x01E83408 MOV X1, X20
	0x01E8340C MOV X2, X19
	0x01E83410 LDP X20, X19, [X31 + 0x20]
	0x01E83414 LDP X22, X21, [X31 + 0x10]
	0x01E83418 LDP X30, X23, [X31], #0x30
	0x01E8341C B 0x1E82258
	0x01E83420 BL 0x1C16F20
	0x01E83424 SUB X31, X31, 0x50
	0x01E83428 STR X30, [X31 + 0x10]
	0x01E8342C STP X24, X23, [X31 + 0x20]
	0x01E83430 STP X22, X21, [X31 + 0x30]
	0x01E83434 STP X20, X19, [X31 + 0x40]
	0x01E83438 ADRP X24, 0x2556000
	0x01E8343C LDRB W8, [X24 + 0x1F0]
	0x01E83440 MOV X19, X4
	0x01E83444 MOV X20, X3
	0x01E83448 MOV X21, X2
	0x01E8344C MOV X22, X1
	0x01E83450 MOV X23, X0
	0x01E83454 TBNZ X8, 0x0, 0x1E83478
	0x01E83458 ADRP X0, 0x2271000
	0x01E8345C LDR X0, [X0 + 0x470]
	0x01E83460 BL 0x1C16CF4
	0x01E83464 ADRP X0, 0x2274000
	0x01E83468 LDR X0, [X0 + 0x138]
	0x01E8346C BL 0x1C16CF4
	0x01E83470 MOVZ W8, 0x1
	0x01E83474 STRB W8, [X24 + 0x1F0]
	0x01E83478 LDR X8, [X23 + 0x38]
	0x01E8347C CBZ X8, 0x1E835A4
	0x01E83480 LDR X0, [X8 + 0x50]
	0x01E83484 CBZ X0, 0x1E835A4
	0x01E83488 AND X1, X22, 0x0
	0x01E8348C MOV X2, X31
	0x01E83490 BL 0x1EC3E44
	0x01E83494 CBZ X0, 0x1E83530
	0x01E83498 MOV X22, X0
	0x01E8349C LDR X0, [X23 + 0x38]
	0x01E834A0 CBZ X0, 0x1E835A4
	0x01E834A4 MOV X1, X31
	0x01E834A8 BL 0x1E9E87C
	0x01E834AC LDR X8, [X22 + 0x20]
	0x01E834B0 CBZ X8, 0x1E835A4
	0x01E834B4 TBNZ X0, 0x0, 0x1E83560

ISIL:
	001 Subtract X31, X31, 496
	002 Move [X31+400], X29
	003 Move [X31+416], X30
	004 Move [X31+424], X27
	005 Move [X31+432], X26
	006 Move [X31+440], X25
	007 Move [X31+448], X24
	008 Move [X31+456], X23
	009 Move [X31+464], X22
	010 Move [X31+472], X21
	011 Move [X31+480], X20
	012 Move [X31+488], X19
	013 Move X23, 0x2557000
	014 Move W8, [X23+497]
	015 Move W22, W3
	016 Move X19, X2
	017 Move X20, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {43}
	023 Move X0, 0x227B000
	024 Move X0, [X0+3456]
	025 Call 0x1C17CF4
	026 Move X0, 0x227B000
	027 Move X0, [X0+3448]
	028 Call 0x1C17CF4
	029 Move X0, 0x227B000
	030 Move X0, [X0+3464]
	031 Call 0x1C17CF4
	032 Move X0, 0x227B000
	033 Move X0, [X0+3472]
	034 Call 0x1C17CF4
	035 Move X0, 0x227B000
	036 Move X0, [X0+3480]
	037 Call 0x1C17CF4
	038 Move X0, 0x227B000
	039 Move X0, [X0+3488]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X23+497], W8
	043 Move X0, [X21+56]
	044 Compare X0, 0
	045 JumpIfEqual {173}
	046 Move X1, X31
	047 Call NetworkRunner.get_Topology, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W0, W31
	050 Move TEMP, X22
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {66}
	054 Compare X19, 0
	055 JumpIfEqual {173}
	056 Move W2, [X19+24]
	057 Move W8, [X19+28]
	058 Add W8, W8, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move [X19+24], W31
	061 Move [X19+28], W8
	062 Move X0, [X19+16]
	063 Move W1, W31
	064 Move X3, X31
	065 Call Array.Clear, X0, X1, X2
	066 Move X8, [X21+152]
	067 Compare X8, 0
	068 JumpIfEqual {173}
	069 Move W2, [X8+24]
	070 Move W9, [X8+28]
	071 Add W9, W9, 1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X8+24], W31
	074 Move [X8+28], W9
	075 Move X0, [X8+16]
	076 Move W1, W31
	077 Move X3, X31
	078 Call Array.Clear, X0, X1, X2
	079 Move X0, [X21+144]
	080 Compare X0, 0
	081 JumpIfEqual {173}
	082 Move X2, [X21+152]
	083 Move X1, X20
	084 Move X3, X31
	085 Call HitboxBuffer.PerformQuery, X0, X1, X2
	086 Compare X19, 0
	087 JumpIfEqual {173}
	088 Move X0, [X21+152]
	089 Compare X0, 0
	090 JumpIfEqual {173}
	091 Move X25, 0x227B000
	092 Move X26, 0x227B000
	093 Move W24, [X19+24]
	094 Move X25, [X25+3488]
	095 Move X26, [X26+3456]
	096 Move W22, W31
	097 Move W27, 104
	098 Move W8, [X0+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X2, [X25]
	101 Add X8, X31, 296
	102 Move W1, W22
	103 Call List`1<HitboxHit>.get_Item, X0, X1
	104 Add X0, X31, 112
	105 Add X1, X31, 296
	106 Move W2, 80
	107 Call 0x3EB2AC0
	108 Add X8, X31, 8
	109 Add X0, X31, 112
	110 Call LagCompensatedHit.FromHitboxHit, X0
	111 Move X23, [X26]
	112 Add X0, X31, 192
	113 Add X1, X31, 8
	114 Move W2, 104
	115 Call 0x3EB2AC0
	116 Move W9, [X19+28]
	117 Move X8, [X19+16]
	118 Add W9, W9, 1
	119 Move [X19+28], W9
	120 Compare X8, 0
	121 JumpIfEqual {173}
	122 NotImplemented "Instruction LDRSW not yet implemented."
	123 Move W10, [X8+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction MADD not yet implemented."
	126 Add W10, W9, 1
	127 Add X0, X8, 32
	128 Add X1, X31, 192
	129 Move W2, 104
	130 Move [X19+24], W10
	131 Call 0x3EB2AC0
	132 Move X8, [X23+32]
	133 Add X0, X31, 296
	134 Add X1, X31, 192
	135 Move W2, 104
	136 Move X8, [X8+192]
	137 Move X23, [X8+112]
	138 Call 0x3EB2AC0
	139 Add X1, X31, 296
	140 Move X0, X19
	141 Move X2, X23
	142 Call List`1<LagCompensatedHit>.AddWithResize, X0, X1
	143 Move X0, [X21+152]
	144 Add W22, W22, 1
	145 Compare X0, 0
	146 JumpIfNotEqual {98}
	147 Compare X20, 0
	148 JumpIfEqual {173}
	149 Move W3, [X20+20]
	150 And W31, W3, 3
	151 Move X8, [X20]
	152 Move X1, [X21+56]
	153 Move X0, X20
	154 Move X2, X19
	155 Move X9, [X8+424]
	156 Move X4, [X8+432]
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Move W8, [X19+24]
	159 Subtract W0, W8, W24
	160 Move X20, [X31+480]
	161 Move X19, [X31+488]
	162 Move X22, [X31+464]
	163 Move X21, [X31+472]
	164 Move X24, [X31+448]
	165 Move X23, [X31+456]
	166 Move X26, [X31+432]
	167 Move X25, [X31+440]
	168 Move X30, [X31+416]
	169 Move X27, [X31+424]
	170 Move X29, [X31+400]
	171 Add X31, X31, 496
	172 Return X0
	173 Call 0x1C17F20

Method: System.Void PositionRotationInternal(ref Fusion.LagCompensation.PositionRotationQueryParams param, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)

Disassembly:
	0x01E83EA4 STP X22, X21, [X31 + 0x10]
	0x01E83EA8 STP X20, X19, [X31 + 0x20]
	0x01E83EAC ADRP X22, 0x2556000
	0x01E83EB0 LDRB W8, [X22 + 0x1F8]
	0x01E83EB4 MOV W20, W2
	0x01E83EB8 MOV W21, W1
	0x01E83EBC MOV X19, X0
	0x01E83EC0 TBNZ X8, 0x0, 0x1E83EF0
	0x01E83EC4 ADRP X0, 0x227A000
	0x01E83EC8 LDR X0, [X0 + 0xDC8]
	0x01E83ECC BL 0x1C16CF4
	0x01E83ED0 ADRP X0, 0x227A000
	0x01E83ED4 LDR X0, [X0 + 0xDD0]
	0x01E83ED8 BL 0x1C16CF4
	0x01E83EDC ADRP X0, 0x2270000
	0x01E83EE0 LDR X0, [X0 + 0x6C0]
	0x01E83EE4 BL 0x1C16CF4
	0x01E83EE8 MOVZ W8, 0x1
	0x01E83EEC STRB W8, [X22 + 0x1F8]
	0x01E83EF0 LDR X0, [X19 + 0x38]
	0x01E83EF4 CBZ X0, 0x1E84084
	0x01E83EF8 MOV X1, X31
	0x01E83EFC BL 0x1EA62F0
	0x01E83F00 LDR X0, [X19 + 0x90]
	0x01E83F04 CBZ X0, 0x1E84084
	0x01E83F08 ADRP X22, 0x227A000
	0x01E83F0C ADRP X23, 0x2270000
	0x01E83F10 LDR X22, [X22 + 0xDC8]
	0x01E83F14 LDR X23, [X23 + 0x6C0]
	0x01E83F18 MOV W1, W21
	0x01E83F1C MOV W2, W20
	0x01E83F20 MOV X3, X31
	0x01E83F24 BL 0x1EEB194
	0x01E83F28 LDR X0, [X23]
	0x01E83F2C LDR X20, [X19 + 0x38]
	0x01E83F30 LDR X21, [X22]
	0x01E83F34 LDR W8, [X0 + 0xE0]
	0x01E83F38 CBNZ W8, 0x1E83F40
	0x01E83F3C BL 0x1C16DFC
	0x01E83F40 MOV X0, X21
	0x01E83F44 MOV X1, X31
	0x01E83F48 BL 0x338C698
	0x01E83F4C CBZ X20, 0x1E84084
	0x01E83F50 MOV X1, X0
	0x01E83F54 MOV X0, X20
	0x01E83F58 MOV X2, X31
	0x01E83F5C BL 0x1EA2104
	0x01E83F60 CBZ X0, 0x1E84084
	0x01E83F64 LDR X8, [X0 + 0x18]
	0x01E83F68 MOV X20, X0
	0x01E83F6C CMP W8, 0x1
	0x01E83F70 B.LT 0x1E84060

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2557000
	008 Move W8, [X23+498]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2275000
	018 Move X0, [X0+192]
	019 Call 0x1C17CF4
	020 Move X0, 0x2275000
	021 Move X0, [X0+280]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+498], W8
	025 Move X0, [X22+56]
	026 Compare X0, 0
	027 JumpIfEqual {70}
	028 Move X1, X31
	029 Call NetworkRunner.get_IsClient, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {36}
	034 Move [X21+28], X31
	035 Move [X21+20], X31
	036 Move W8, [X21]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 4
	039 Compare TEMP, 4
	040 JumpIfEqual {55}
	041 Move X0, X21
	042 Add X0, X0, 28
	043 Move W8, [X0]
	044 Compare W8, 0
	045 JumpIfEqual {55}
	046 Move X8, 0x2275000
	047 Move X8, [X8+280]
	048 Move X1, [X8]
	049 Call Nullable`1<Single>.get_Value, X0
	050 Move S1, 0.5
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 Move W8, [X21+16]
	053 Add W8, W8, 1
	054 Move [X21+16], W8
	055 Move X0, [X22+144]
	056 Compare X0, 0
	057 JumpIfEqual {70}
	058 Move X1, X21
	059 Move X2, X20
	060 Move X3, X19
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X4, X31
	066 Move X30, [X31+48]
	067 Move X23, [X31+56]
	068 Call HitboxBuffer.PositionQueryInternal, X0, X1, X2, X3
	069 Return 
	070 Call 0x1C17F20

Method: System.Void Init()

Disassembly:
	0x01E8469C ADD X1, X31, 0x138
	0x01E846A0 MOVZ W2, 0x68
	0x01E846A4 BL 0x3EB1AC0
	0x01E846A8 LDR X24, [X25]
	0x01E846AC ADD X0, X31, 0x138
	0x01E846B0 ADD X1, X31, 0x68
	0x01E846B4 MOVZ W2, 0x68
	0x01E846B8 BL 0x3EB1AC0
	0x01E846BC ADD X2, X31, 0x138
	0x01E846C0 MOV X0, X20
	0x01E846C4 MOV W1, W22
	0x01E846C8 MOV X3, X24
	0x01E846CC BL 0x2FECB20
	0x01E846D0 LDR X24, [X25]
	0x01E846D4 ADD X0, X31, 0x138
	0x01E846D8 ADD X1, X31, 0xD0
	0x01E846DC MOVZ W2, 0x68
	0x01E846E0 BL 0x3EB1AC0
	0x01E846E4 ADD X2, X31, 0x138
	0x01E846E8 MOV X0, X20
	0x01E846EC MOV W1, W23
	0x01E846F0 MOV X3, X24
	0x01E846F4 BL 0x2FECB20
	0x01E846F8 ADD W22, W22, 0x1
	0x01E846FC ADD W23, W23, 0x1
	0x01E84700 CMP W19, W23
	0x01E84704 B.NE 0x1E84640
	0x01E84708 LDR X2, [X26]
	0x01E8470C ADD X8, X31, 0x138
	0x01E84710 MOV X0, X20
	0x01E84714 MOV W1, W22
	0x01E84718 BL 0x2FECABC
	0x01E8471C ADD X0, X31, 0xD0
	0x01E84720 ADD X1, X31, 0x138
	0x01E84724 MOVZ W2, 0x68
	0x01E84728 BL 0x3EB1AC0
	0x01E8472C LDR X2, [X26]
	0x01E84730 ADD X8, X31, 0x138

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2556000
	006 Move W8, [X20+499]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x227A000
	013 Move X0, [X0+3504]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+499], W8
	017 Move X1, [X19+56]
	018 Compare X1, 0
	019 JumpIfEqual {47}
	020 Move X8, [X1+152]
	021 Compare X8, 0
	022 JumpIfEqual {47}
	023 Move X8, [X8+40]
	024 Move X21, 0x227A000
	025 Move X21, [X21+3504]
	026 Move X0, X19
	027 Move [X19+136], X8
	028 Call HitboxManager.GetObjects, X0, X1
	029 Move X1, X0
	030 Move X0, X19
	031 Call HitboxManager.Init, X0, X1
	032 Move X0, X19
	033 Call HitboxManager.InitQueries, X0
	034 Move X0, [X21]
	035 Move X20, [X19+144]
	036 Call 0x1C17F10
	037 Move X1, X20
	038 Move X2, X31
	039 Move X21, X0
	040 Call LagCompensationDraw..ctor, X0, X1
	041 Move [X19+88], X21
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 
	047 Call 0x1C17F20

Method: System.Void InitQueries()

Disassembly:
	0x01E84A68 CSET W0, EQ
	0x01E84A6C LDP X30, X21, [X31], #0x20
	0x01E84A70 RET
	0x01E84A74 STR X30, [X31 - 0x30]!
	0x01E84A78 STP X22, X21, [X31 + 0x10]
	0x01E84A7C STP X20, X19, [X31 + 0x20]
	0x01E84A80 ADRP X21, 0x2555000
	0x01E84A84 ADRP X22, 0x2279000
	0x01E84A88 LDRB W8, [X21 + 0x1FD]
	0x01E84A8C LDR X22, [X22 + 0xD58]
	0x01E84A90 MOV W19, W1
	0x01E84A94 MOV X20, X0
	0x01E84A98 TBNZ X8, 0x0, 0x1E84AB0
	0x01E84A9C ADRP X0, 0x2279000
	0x01E84AA0 LDR X0, [X0 + 0xD58]
	0x01E84AA4 BL 0x1C16CF4
	0x01E84AA8 MOVZ W8, 0x1
	0x01E84AAC STRB W8, [X21 + 0x1FD]
	0x01E84AB0 LDR X2, [X22]
	0x01E84AB4 MOV X0, X20
	0x01E84AB8 MOV W1, W31
	0x01E84ABC BL 0x22275E4
	0x01E84AC0 LDR W8, [X0]
	0x01E84AC4 ORN W9, W31, W19, 0x0
	0x01E84AC8 LDP X20, X19, [X31 + 0x20]
	0x01E84ACC LDP X22, X21, [X31 + 0x10]
	0x01E84AD0 BFM W8, W9, 0x0, 0x0
	0x01E84AD4 STR W8, [X0]
	0x01E84AD8 LDR X30, [X31], #0x30
	0x01E84ADC RET
	0x01E84AE0 LDR X0, [X0 + 0xB0]
	0x01E84AE4 RET
	0x01E84AE8 STR X1, [X0 + 0xB0]
	0x01E84AEC RET
	0x01E84AF0 STP X30, X19, [X31 - 0x10]!
	0x01E84AF4 MOV X1, X31
	0x01E84AF8 MOV X19, X0
	0x01E84AFC BL 0x3C32E90
	0x01E84B00 STR X0, [X19 + 0xB8]
	0x01E84B04 LDP X30, X19, [X31], #0x10
	0x01E84B08 RET
	0x01E84B0C SUB X31, X31, 0x110
	0x01E84B10 STR D14, [X31 + 0xB0]
	0x01E84B14 STP D13, D12, [X31 + 0xC0]
	0x01E84B18 STP D11, D10, [X31 + 0xD0]
	0x01E84B1C STP D9, D8, [X31 + 0xE0]
	0x01E84B20 STP X29, X30, [X31 + 0xF0]
	0x01E84B24 STP X20, X19, [X31 + 0x100]
	0x01E84B28 MOVI V0.2D, 0x0
	0x01E84B2C MOV X1, X31
	0x01E84B30 MOV X19, X0
	0x01E84B34 STR W31, [X31 + 0xA8]
	0x01E84B38 STP X31, X31, [X31 + 0x98]
	0x01E84B3C STR X31, [X31 + 0x90]
	0x01E84B40 STP V0, V0, [X31 + 0x70]
	0x01E84B44 STP V0, V0, [X31 + 0x50]
	0x01E84B48 BL 0x3C32E90
	0x01E84B4C CBZ X0, 0x1E84C28
	0x01E84B50 ADD X1, X31, 0xA0
	0x01E84B54 ADD X2, X31, 0x90
	0x01E84B58 MOV X3, X31
	0x01E84B5C BL 0x3C40168
	0x01E84B60 ADRP X20, 0x2554000
	0x01E84B64 LDP S8, S9, [X31 + 0xA0]
	0x01E84B68 LDR V10, [X31 + 0xA8]
	0x01E84B6C LDP S11, S12, [X31 + 0x90]
	0x01E84B70 LDRB W8, [X20 + 0x85B]
	0x01E84B74 LDP S14, S13, [X31 + 0x98]
	0x01E84B78 CBNZ W8, 0x1E84B90
	0x01E84B7C ADRP X0, 0x226F000
	0x01E84B80 LDR X0, [X0 + 0x5A0]
	0x01E84B84 BL 0x1C16CF4
	0x01E84B88 MOVZ W8, 0x1
	0x01E84B8C STRB W8, [X20 + 0x85B]
	0x01E84B90 ADRP X8, 0x226F000
	0x01E84B94 LDR X8, [X8 + 0x5A0]
	0x01E84B98 MOV V1.16B, V9.16B
	0x01E84B9C MOV V2.16B, V10.16B
	0x01E84BA0 MOV V3.16B, V11.16B
	0x01E84BA4 LDR X8, [X8]
	0x01E84BA8 MOV V4.16B, V12.16B
	0x01E84BAC MOV V5.16B, V14.16B
	0x01E84BB0 MOV V6.16B, V13.16B
	0x01E84BB4 LDR X8, [X8 + 0xB8]
	0x01E84BB8 MOV X0, X31
	0x01E84BBC LDR V0, [X8 + 0x14]
	0x01E84BC0 LDUR X9, [X8 + 0xC]
	0x01E84BC4 ADD X8, X31, 0x10
	0x01E84BC8 STR S0, [X31 + 0x8]
	0x01E84BCC MOV V0.16B, V8.16B
	0x01E84BD0 STR X9, [X31]
	0x01E84BD4 BL 0x3C26FA8
	0x01E84BD8 LDP V0, V1, [X31 + 0x10]
	0x01E84BDC LDP V2, V3, [X31 + 0x30]
	0x01E84BE0 ADD X1, X31, 0x50
	0x01E84BE4 MOV X0, X19
	0x01E84BE8 STP V0, V1, [X31 + 0x50]
	0x01E84BEC STP V2, V3, [X31 + 0x70]
	0x01E84BF0 LDR X8, [X19]
	0x01E84BF4 LDP S0, S1, [X19 + 0x94]
	0x01E84BF8 LDP S2, S3, [X19 + 0x9C]
	0x01E84BFC LDR X9, [X8 + 0x248]
	0x01E84C00 LDR X2, [X8 + 0x250]
	0x01E84C04 BLR X9
	0x01E84C08 LDP X20, X19, [X31 + 0x100]
	0x01E84C0C LDP X29, X30, [X31 + 0xF0]
	0x01E84C10 LDP D9, D8, [X31 + 0xE0]
	0x01E84C14 LDP D11, D10, [X31 + 0xD0]
	0x01E84C18 LDP D13, D12, [X31 + 0xC0]
	0x01E84C1C LDR V14, [X31 + 0xB0]
	0x01E84C20 ADD X31, X31, 0x110
	0x01E84C24 RET
	0x01E84C28 BL 0x1C16F20
	0x01E84C2C SUB X31, X31, 0xB0
	0x01E84C30 STP D11, D10, [X31 + 0x80]
	0x01E84C34 STP D9, D8, [X31 + 0x90]
	0x01E84C38 STP X30, X19, [X31 + 0xA0]
	0x01E84C3C MOV V8.16B, V3.16B
	0x01E84C40 MOV V9.16B, V2.16B
	0x01E84C44 MOV V10.16B, V1.16B
	0x01E84C48 MOV V11.16B, V0.16B
	0x01E84C4C LDP V1, V0, [X1 + 0x20]
	0x01E84C50 LDP V3, V2, [X1]
	0x01E84C54 MOV X19, X0
	0x01E84C58 ADD X0, X31, 0x40
	0x01E84C5C MOV X1, X31
	0x01E84C60 STP V1, V0, [X31 + 0x60]
	0x01E84C64 STP V3, V2, [X31 + 0x40]
	0x01E84C68 BL 0x3C0D150
	0x01E84C6C MOV V0.16B, V11.16B
	0x01E84C70 MOV V1.16B, V10.16B
	0x01E84C74 MOV V2.16B, V9.16B
	0x01E84C78 MOV V3.16B, V8.16B
	0x01E84C7C MOV X0, X31
	0x01E84C80 BL 0x3C0D030
	0x01E84C84 LDP S1, S2, [X19 + 0x8C]
	0x01E84C88 LDP S3, S0, [X19 + 0x84]
	0x01E84C8C MOV X0, X31
	0x01E84C90 BL 0x3C0CB98
	0x01E84C94 FMOV S0, 1
	0x01E84C98 FMOV S1, 1

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+288], X29
	003 Move [X31+296], X30
	004 Move [X31+304], X28
	005 Move [X31+312], X27
	006 Move [X31+320], X26
	007 Move [X31+328], X25
	008 Move [X31+336], X24
	009 Move [X31+344], X23
	010 Move [X31+352], X22
	011 Move [X31+360], X21
	012 Move [X31+368], X20
	013 Move [X31+376], X19
	014 Move X20, 0x2556000
	015 Move W8, [X20+500]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {47}
	021 Move X0, 0x227A000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move X0, 0x227A000
	025 Move X0, [X0+3568]
	026 Call 0x1C17CF4
	027 Move X0, 0x2275000
	028 Move X0, [X0+312]
	029 Call 0x1C17CF4
	030 Move X0, 0x227A000
	031 Move X0, [X0+3576]
	032 Call 0x1C17CF4
	033 Move X0, 0x227A000
	034 Move X0, [X0+3584]
	035 Call 0x1C17CF4
	036 Move X0, 0x2276000
	037 Move X0, [X0+1160]
	038 Call 0x1C17CF4
	039 Move X0, 0x227A000
	040 Move X0, [X0+3592]
	041 Call 0x1C17CF4
	042 Move X0, 0x227A000
	043 Move X0, [X0+3600]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+500], W8
	047 NotImplemented "Instruction MOVI not yet implemented."
	048 Move [X31+272], X31
	049 Move [X31+192], V0
	050 Move [X31+200], V0
	051 Move [X31+224], V0
	052 Move [X31+232], V0
	053 Move [X31+16], V0
	054 Move [X31+112], V0
	055 Move [X31+120], V0
	056 Move [X31+144], V0
	057 Move [X31+152], V0
	058 Move [X31+11], V0
	059 Move [X31], V0
	060 Move [X31+8], V0
	061 Move [X31+32], V0
	062 Move [X31+40], V0
	063 Move [X31+64], V0
	064 Move [X31+72], V0
	065 Move [X31+96], X31
	066 Move X8, [X19+136]
	067 Compare X8, 0
	068 JumpIfEqual {164}
	069 Move X9, 0x227A000
	070 Move X9, [X9+3592]
	071 Move X22, 0x2276000
	072 Move X23, 0x227A000
	073 Move X27, 0x227A000
	074 Move X26, 0x2275000
	075 Move X22, [X22+1160]
	076 Move X23, [X23+3584]
	077 Move X27, [X27+3576]
	078 Move X26, [X26+312]
	079 Move X0, [X9]
	080 Move X25, 0x227A000
	081 Move X28, 0x227A000
	082 Move X24, 0x227A000
	083 Move W20, [X8+28]
	084 Move X25, [X25+3568]
	085 Move X28, [X28+3600]
	086 Move X24, [X24+3560]
	087 Call 0x1C17F10
	088 Add X1, X31, 192
	089 Move X2, X31
	090 Move X21, X0
	091 Call RaycastQuery..ctor, X0, X1
	092 Move [X19+104], X21
	093 Move X0, [X22]
	094 Move W1, W20
	095 Call 0x1C17D6C
	096 Move X8, [X23]
	097 Move X21, X0
	098 Move W1, W20
	099 Move X0, X8
	100 Call 0x1C17D6C
	101 Move X8, [X27]
	102 Move X22, X0
	103 Move X0, X8
	104 Call 0x1C17F10
	105 Add X1, X31, 192
	106 Move X2, X21
	107 Move X3, X22
	108 Move X4, X31
	109 Move X23, X0
	110 Call RaycastAllQuery..ctor, X0, X1, X2, X3
	111 Move [X19+112], X23
	112 Move X0, [X26]
	113 Move W1, W20
	114 Call 0x1C17D6C
	115 Move X8, [X25]
	116 Move X21, X0
	117 Move W1, W20
	118 Move X0, X8
	119 Call 0x1C17D6C
	120 Move X8, [X28]
	121 Move X22, X0
	122 Move X0, X8
	123 Call 0x1C17F10
	124 Add X1, X31, 112
	125 Move X2, X21
	126 Move X3, X22
	127 Move X4, X31
	128 Move X23, X0
	129 Call SphereOverlapQuery..ctor, X0, X1, X2, X3
	130 Move [X19+120], X23
	131 Move X0, [X26]
	132 Move W1, W20
	133 Call 0x1C17D6C
	134 Move X8, [X25]
	135 Move X21, X0
	136 Move W1, W20
	137 Move X0, X8
	138 Call 0x1C17D6C
	139 Move X8, [X24]
	140 Move X20, X0
	141 Move X0, X8
	142 Call 0x1C17F10
	143 Add X1, X31, 0
	144 Move X2, X21
	145 Move X3, X20
	146 Move X4, X31
	147 Move X22, X0
	148 Call BoxOverlapQuery..ctor, X0, X1, X2, X3
	149 Move [X19+128], X22
	150 Move X20, [X31+368]
	151 Move X19, [X31+376]
	152 Move X22, [X31+352]
	153 Move X21, [X31+360]
	154 Move X24, [X31+336]
	155 Move X23, [X31+344]
	156 Move X26, [X31+320]
	157 Move X25, [X31+328]
	158 Move X28, [X31+304]
	159 Move X27, [X31+312]
	160 Move X29, [X31+288]
	161 Move X30, [X31+296]
	162 Add X31, X31, 384
	163 Return 
	164 Call 0x1C17F20

Method: System.Void Init(System.Collections.Generic.List`1<Fusion.HitboxRoot> initialObjects)

Disassembly:
	0x01E84924 MOV X3, X24
	0x01E84928 BL 0x2FECB20
	0x01E8492C ADD W22, W22, 0x1
	0x01E84930 ADD W23, W23, 0x1
	0x01E84934 CMP W19, W23
	0x01E84938 B.NE 0x1E84874
	0x01E8493C LDR X2, [X26]
	0x01E84940 ADD X8, X31, 0x138
	0x01E84944 MOV X0, X20
	0x01E84948 MOV W1, W22
	0x01E8494C BL 0x2FECABC
	0x01E84950 ADD X0, X31, 0xD0
	0x01E84954 ADD X1, X31, 0x138
	0x01E84958 MOVZ W2, 0x68
	0x01E8495C BL 0x3EB1AC0
	0x01E84960 LDR X2, [X26]
	0x01E84964 ADD X8, X31, 0x138
	0x01E84968 MOV X0, X20
	0x01E8496C MOV W1, W19
	0x01E84970 BL 0x2FECABC
	0x01E84974 ADD X0, X31, 0x0
	0x01E84978 ADD X1, X31, 0x138
	0x01E8497C MOVZ W2, 0x68
	0x01E84980 BL 0x3EB1AC0
	0x01E84984 LDR X23, [X25]
	0x01E84988 ADD X0, X31, 0x138
	0x01E8498C ADD X1, X31, 0x0
	0x01E84990 MOVZ W2, 0x68
	0x01E84994 BL 0x3EB1AC0
	0x01E84998 ADD X2, X31, 0x138
	0x01E8499C MOV X0, X20
	0x01E849A0 MOV W1, W22
	0x01E849A4 MOV X3, X23
	0x01E849A8 BL 0x2FECB20
	0x01E849AC LDR X23, [X25]
	0x01E849B0 ADD X0, X31, 0x138
	0x01E849B4 ADD X1, X31, 0xD0
	0x01E849B8 MOVZ W2, 0x68
	0x01E849BC BL 0x3EB1AC0
	0x01E849C0 ADD X2, X31, 0x138
	0x01E849C4 MOV X0, X20
	0x01E849C8 MOV W1, W19
	0x01E849CC MOV X3, X23
	0x01E849D0 BL 0x2FECB20
	0x01E849D4 SUB W2, W22, 0x1
	0x01E849D8 MOV X0, X20
	0x01E849DC MOV W1, W21
	0x01E849E0 BL 0x1E847E4
	0x01E849E4 ADD W1, W22, 0x1
	0x01E849E8 MOV X0, X20
	0x01E849EC MOV W2, W19
	0x01E849F0 BL 0x1E847E4
	0x01E849F4 ADD X31, X31, 0x1A0
	0x01E849F8 LDP X20, X19, [X31 + 0x50]
	0x01E849FC LDP X22, X21, [X31 + 0x40]
	0x01E84A00 LDP X24, X23, [X31 + 0x30]
	0x01E84A04 LDP X26, X25, [X31 + 0x20]
	0x01E84A08 LDP X29, X30, [X31 + 0x10]
	0x01E84A0C LDR V8, [X31], #0x60
	0x01E84A10 RET
	0x01E84A14 BL 0x1C16F20
	0x01E84A18 STP X30, X21, [X31 - 0x20]!
	0x01E84A1C STP X20, X19, [X31 + 0x10]
	0x01E84A20 ADRP X20, 0x2555000
	0x01E84A24 ADRP X21, 0x2279000
	0x01E84A28 LDRB W8, [X20 + 0x1FC]
	0x01E84A2C LDR X21, [X21 + 0xD58]
	0x01E84A30 MOV X19, X0
	0x01E84A34 TBNZ X8, 0x0, 0x1E84A4C
	0x01E84A38 ADRP X0, 0x2279000
	0x01E84A3C LDR X0, [X0 + 0xD58]
	0x01E84A40 BL 0x1C16CF4
	0x01E84A44 MOVZ W8, 0x1
	0x01E84A48 STRB W8, [X20 + 0x1FC]
	0x01E84A4C LDR X2, [X21]
	0x01E84A50 MOV X0, X19
	0x01E84A54 MOV W1, W31
	0x01E84A58 BL 0x22275E4
	0x01E84A5C LDRB W8, [X0]
	0x01E84A60 LDP X20, X19, [X31 + 0x10]
	0x01E84A64 ANDS W31, W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2556000
	009 Move W8, [X21+501]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x227A000
	017 Move X0, [X0+3552]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+501], W8
	021 Move X8, [X19+136]
	022 Compare X8, 0
	023 JumpIfEqual {97}
	024 Move W9, [X8+20]
	025 Move X8, [X19+56]
	026 Move W10, 30
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSEL not yet implemented."
	029 Compare X8, 0
	030 JumpIfEqual {97}
	031 Move X0, [X8+80]
	032 Compare X0, 0
	033 JumpIfEqual {97}
	034 Move X1, X31
	035 Call Simulation.get_TickRate, X0
	036 Move X8, [X19+136]
	037 Compare X8, 0
	038 JumpIfEqual {97}
	039 Move X24, 0x2555000
	040 Move W9, [X24+2750]
	041 Move W23, [X8+24]
	042 Move W21, W0
	043 Compare W9, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0x2270000
	046 Move X0, [X0+1448]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X24+2750], W8
	050 Move X8, 0x2270000
	051 Move X8, [X8+1448]
	052 Move X0, [X8]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X8, [X19+136]
	058 Compare X8, 0
	059 JumpIfEqual {97}
	060 Move X8, -20549632
	061 Move V0, [X8+1040]
	062 Move X8, 0x227A000
	063 Move X8, [X8+3552]
	064 NotImplemented "Instruction SCVTF not yet implemented."
	065 Multiply S0, S1, S0
	066 NotImplemented "Instruction SCVTF not yet implemented."
	067 Move W9, 0x7F800000
	068 Multiply S0, S0, S1
	069 Move X0, [X8]
	070 Move S1, W9
	071 NotImplemented "Instruction FRINTP not yet implemented."
	072 Move W10, 0x80000000
	073 NotImplemented "Instruction FCVTZS not yet implemented."
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W8, 16
	078 NotImplemented "Instruction CSEL not yet implemented."
	079 Call 0x1C17F10
	080 Move X8, -20549632
	081 Move V0, [X8+860]
	082 Move X1, X20
	083 Move W2, W21
	084 Move W3, W22
	085 Move X4, X31
	086 Move X23, X0
	087 Call HitboxBuffer..ctor, X0, X1, X2, X3, V0
	088 Move [X19+144], X23
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Return 
	097 Call 0x1C17F20

Method: System.Collections.Generic.List`1<Fusion.HitboxRoot> GetObjects(Fusion.NetworkRunner runner)

Disassembly:
	0x01E84734 MOV X0, X20
	0x01E84738 MOV W1, W19
	0x01E8473C BL 0x2FECABC
	0x01E84740 ADD X0, X31, 0x0
	0x01E84744 ADD X1, X31, 0x138
	0x01E84748 MOVZ W2, 0x68
	0x01E8474C BL 0x3EB1AC0
	0x01E84750 LDR X23, [X25]
	0x01E84754 ADD X0, X31, 0x138
	0x01E84758 ADD X1, X31, 0x0
	0x01E8475C MOVZ W2, 0x68
	0x01E84760 BL 0x3EB1AC0
	0x01E84764 ADD X2, X31, 0x138
	0x01E84768 MOV X0, X20
	0x01E8476C MOV W1, W22
	0x01E84770 MOV X3, X23
	0x01E84774 BL 0x2FECB20
	0x01E84778 LDR X23, [X25]
	0x01E8477C ADD X0, X31, 0x138
	0x01E84780 ADD X1, X31, 0xD0
	0x01E84784 MOVZ W2, 0x68
	0x01E84788 BL 0x3EB1AC0
	0x01E8478C ADD X2, X31, 0x138
	0x01E84790 MOV X0, X20
	0x01E84794 MOV W1, W19
	0x01E84798 MOV X3, X23
	0x01E8479C BL 0x2FECB20
	0x01E847A0 SUB W2, W22, 0x1
	0x01E847A4 MOV X0, X20
	0x01E847A8 MOV W1, W21
	0x01E847AC BL 0x1E845B0
	0x01E847B0 ADD W1, W22, 0x1
	0x01E847B4 MOV X0, X20
	0x01E847B8 MOV W2, W19
	0x01E847BC BL 0x1E845B0
	0x01E847C0 ADD X31, X31, 0x1A0
	0x01E847C4 LDP X20, X19, [X31 + 0x50]
	0x01E847C8 LDP X22, X21, [X31 + 0x40]
	0x01E847CC LDP X24, X23, [X31 + 0x30]
	0x01E847D0 LDP X26, X25, [X31 + 0x20]
	0x01E847D4 LDP X29, X30, [X31 + 0x10]
	0x01E847D8 LDR V8, [X31], #0x60
	0x01E847DC RET
	0x01E847E0 BL 0x1C16F20
	0x01E847E4 STR D8, [X31 - 0x60]!
	0x01E847E8 STP X29, X30, [X31 + 0x10]
	0x01E847EC STP X26, X25, [X31 + 0x20]
	0x01E847F0 STP X24, X23, [X31 + 0x30]
	0x01E847F4 STP X22, X21, [X31 + 0x40]
	0x01E847F8 STP X20, X19, [X31 + 0x50]
	0x01E847FC SUB X31, X31, 0x1A0
	0x01E84800 ADRP X22, 0x2555000
	0x01E84804 LDRB W8, [X22 + 0x1FB]
	0x01E84808 MOV W19, W2
	0x01E8480C MOV W21, W1
	0x01E84810 MOV X20, X0
	0x01E84814 TBNZ X8, 0x0, 0x1E84838
	0x01E84818 ADRP X0, 0x2279000
	0x01E8481C LDR X0, [X0 + 0xDA8]
	0x01E84820 BL 0x1C16CF4
	0x01E84824 ADRP X0, 0x2279000
	0x01E84828 LDR X0, [X0 + 0xE50]
	0x01E8482C BL 0x1C16CF4
	0x01E84830 MOVZ W8, 0x1
	0x01E84834 STRB W8, [X22 + 0x1FB]
	0x01E84838 CMP W21, W19
	0x01E8483C B.GE 0x1E849F4
	0x01E84840 CBZ X20, 0x1E84A14
	0x01E84844 ADRP X26, 0x2279000
	0x01E84848 LDR X26, [X26 + 0xDA8]
	0x01E8484C ADD X8, X31, 0x138
	0x01E84850 MOV X0, X20
	0x01E84854 MOV W1, W19
	0x01E84858 LDR X2, [X26]
	0x01E8485C BL 0x2FECABC
	0x01E84860 ADRP X25, 0x2279000
	0x01E84864 LDR V8, [X31 + 0x17C]
	0x01E84868 LDR X25, [X25 + 0xE50]
	0x01E8486C MOV W22, W21
	0x01E84870 MOV W23, W21
	0x01E84874 LDR X2, [X26]
	0x01E84878 ADD X8, X31, 0x138
	0x01E8487C MOV X0, X20
	0x01E84880 MOV W1, W23
	0x01E84884 BL 0x2FECABC
	0x01E84888 LDR V0, [X31 + 0x17C]
	0x01E8488C FCMP S0, S8
	0x01E84890 B.PL 0x1E84930
	0x01E84894 LDR X2, [X26]
	0x01E84898 ADD X8, X31, 0x138
	0x01E8489C MOV X0, X20
	0x01E848A0 MOV W1, W22
	0x01E848A4 BL 0x2FECABC
	0x01E848A8 ADD X0, X31, 0xD0
	0x01E848AC ADD X1, X31, 0x138
	0x01E848B0 MOVZ W2, 0x68
	0x01E848B4 BL 0x3EB1AC0
	0x01E848B8 LDR X2, [X26]
	0x01E848BC ADD X8, X31, 0x138
	0x01E848C0 MOV X0, X20
	0x01E848C4 MOV W1, W23
	0x01E848C8 BL 0x2FECABC
	0x01E848CC ADD X0, X31, 0x68
	0x01E848D0 ADD X1, X31, 0x138
	0x01E848D4 MOVZ W2, 0x68
	0x01E848D8 BL 0x3EB1AC0
	0x01E848DC LDR X24, [X25]
	0x01E848E0 ADD X0, X31, 0x138
	0x01E848E4 ADD X1, X31, 0x68
	0x01E848E8 MOVZ W2, 0x68
	0x01E848EC BL 0x3EB1AC0
	0x01E848F0 ADD X2, X31, 0x138
	0x01E848F4 MOV X0, X20
	0x01E848F8 MOV W1, W22
	0x01E848FC MOV X3, X24
	0x01E84900 BL 0x2FECB20
	0x01E84904 LDR X24, [X25]
	0x01E84908 ADD X0, X31, 0x138
	0x01E8490C ADD X1, X31, 0xD0
	0x01E84910 MOVZ W2, 0x68
	0x01E84914 BL 0x3EB1AC0
	0x01E84918 ADD X2, X31, 0x138
	0x01E8491C MOV X0, X20
	0x01E84920 MOV W1, W23

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x2556000
	010 Move X25, 0x227A000
	011 Move X20, 0x227A000
	012 Move X22, 0x227A000
	013 Move X23, 0x2270000
	014 Move W8, [X24+502]
	015 Move X25, [X25+3512]
	016 Move X20, [X20+3520]
	017 Move X22, [X22+3528]
	018 Move X23, [X23+1728]
	019 Move X21, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {45}
	025 Move X0, 0x227A000
	026 Move X0, [X0+3528]
	027 Call 0x1C17CF4
	028 Move X0, 0x227A000
	029 Move X0, [X0+3536]
	030 Call 0x1C17CF4
	031 Move X0, 0x227A000
	032 Move X0, [X0+3544]
	033 Call 0x1C17CF4
	034 Move X0, 0x227A000
	035 Move X0, [X0+3520]
	036 Call 0x1C17CF4
	037 Move X0, 0x227A000
	038 Move X0, [X0+3512]
	039 Call 0x1C17CF4
	040 Move X0, 0x2270000
	041 Move X0, [X0+1728]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X24+502], W8
	045 Move X0, [X25]
	046 Call 0x1C17F10
	047 Move X1, [X20]
	048 Move X20, X0
	049 Call List`1<Object>..ctor, X0
	050 Move X0, [X23]
	051 Move X22, [X22]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X22
	057 Move X1, X31
	058 Call Type.GetTypeFromHandle, X0
	059 Compare X21, 0
	060 JumpIfEqual {131}
	061 Move X1, X0
	062 Move X0, X21
	063 Move X2, X31
	064 Call NetworkRunner.GetAllBehaviours, X0, X1
	065 Compare X0, 0
	066 JumpIfEqual {131}
	067 Move X8, [X0+24]
	068 Move X21, X0
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X24, 0x227A000
	071 Move X25, 0x227A000
	072 Move X24, [X24+3536]
	073 Move X25, [X25+3544]
	074 Move X23, X31
	075 And X8, X8, 0
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Add X8, X21, X23
	078 Move X22, [X8+32]
	079 Compare X22, 0
	080 JumpIfEqual {118}
	081 Move W8, [X22+48]
	082 And W31, W8, 28
	083 Move X8, [X22]
	084 Move X1, [X24]
	085 Move W10, [X8+304]
	086 Move W9, [X1+304]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X8, [X8+200]
	089 Add X8, X8, X9
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move [X22+176], X19
	093 Compare X20, 0
	094 JumpIfEqual {131}
	095 Move W10, [X20+28]
	096 Move X8, [X20+16]
	097 Move X9, [X25]
	098 Add W10, W10, 1
	099 Move [X20+28], W10
	100 Compare X8, 0
	101 JumpIfEqual {131}
	102 NotImplemented "Instruction LDRSW not yet implemented."
	103 Move W11, [X8+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add W9, W10, 1
	106 Add X8, X8, X10
	107 Move [X20+24], W9
	108 Move [X8+32], X22
	109 Move X8, [X9+32]
	110 Move X0, X20
	111 Move X1, X22
	112 Move X8, [X8+192]
	113 Move X2, [X8+112]
	114 Call List`1<Object>.AddWithResize, X0, X1
	115 Move X22, [X22+40]
	116 Compare X22, 0
	117 JumpIfNotEqual {81}
	118 Move W8, [X21+24]
	119 Add X23, X23, 1
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X0, X20
	122 Move X20, [X31+48]
	123 Move X19, [X31+56]
	124 Move X22, [X31+32]
	125 Move X21, [X31+40]
	126 Move X24, [X31+16]
	127 Move X23, [X31+24]
	128 Move X30, [X31+64]
	129 Move X25, [X31+72]
	130 Return X0
	131 Call 0x1C17F20
	132 Move X0, X22
	133 Call 0x1C181E0
	134 Call 0x1C17F28

Method: System.Void RegisterHitboxSnapshot(System.Int32 tick, System.Int32 dataTick)

Disassembly:
	0x01E84CA8 BL 0x3C0D030
	0x01E84CAC ADRP X19, 0x2554000
	0x01E84CB0 LDRB W8, [X19 + 0xAC0]
	0x01E84CB4 CBNZ W8, 0x1E84CCC
	0x01E84CB8 ADRP X0, 0x2273000
	0x01E84CBC LDR X0, [X0 + 0x270]
	0x01E84CC0 BL 0x1C16CF4
	0x01E84CC4 MOVZ W8, 0x1
	0x01E84CC8 STRB W8, [X19 + 0xAC0]
	0x01E84CCC ADRP X8, 0x2273000
	0x01E84CD0 LDR X8, [X8 + 0x270]
	0x01E84CD4 ADD X0, X31, 0x0
	0x01E84CD8 MOV X1, X31
	0x01E84CDC LDR X8, [X8]
	0x01E84CE0 LDR X8, [X8 + 0xB8]
	0x01E84CE4 LDP V1, V0, [X8 + 0x60]
	0x01E84CE8 LDP V2, V3, [X8 + 0x40]
	0x01E84CEC STP V1, V0, [X31 + 0x20]
	0x01E84CF0 STP V2, V3, [X31]
	0x01E84CF4 BL 0x3C0D150
	0x01E84CF8 LDP X30, X19, [X31 + 0xA0]
	0x01E84CFC LDP D9, D8, [X31 + 0x90]
	0x01E84D00 LDP D11, D10, [X31 + 0x80]
	0x01E84D04 ADD X31, X31, 0xB0
	0x01E84D08 RET
	0x01E84D0C STR X30, [X31 - 0x30]!
	0x01E84D10 STP X22, X21, [X31 + 0x10]
	0x01E84D14 STP X20, X19, [X31 + 0x20]
	0x01E84D18 ADRP X21, 0x2555000
	0x01E84D1C ADRP X20, 0x2279000
	0x01E84D20 LDRB W8, [X21 + 0x1FF]
	0x01E84D24 LDR X20, [X20 + 0xB88]
	0x01E84D28 MOV X19, X0
	0x01E84D2C TBNZ X8, 0x0, 0x1E84D8C
	0x01E84D30 ADRP X0, 0x2279000
	0x01E84D34 LDR X0, [X0 + 0xE58]
	0x01E84D38 BL 0x1C16CF4
	0x01E84D3C ADRP X0, 0x226F000
	0x01E84D40 LDR X0, [X0 + 0xA28]
	0x01E84D44 BL 0x1C16CF4
	0x01E84D48 ADRP X0, 0x226F000
	0x01E84D4C LDR X0, [X0 + 0x758]
	0x01E84D50 BL 0x1C16CF4
	0x01E84D54 ADRP X0, 0x2279000
	0x01E84D58 LDR X0, [X0 + 0xE60]
	0x01E84D5C BL 0x1C16CF4
	0x01E84D60 ADRP X0, 0x2279000
	0x01E84D64 LDR X0, [X0 + 0xE68]
	0x01E84D68 BL 0x1C16CF4
	0x01E84D6C ADRP X0, 0x2279000
	0x01E84D70 LDR X0, [X0 + 0xB88]
	0x01E84D74 BL 0x1C16CF4
	0x01E84D78 ADRP X0, 0x2279000
	0x01E84D7C LDR X0, [X0 + 0xE70]
	0x01E84D80 BL 0x1C16CF4
	0x01E84D84 MOVZ W8, 0x1
	0x01E84D88 STRB W8, [X21 + 0x1FF]
	0x01E84D8C ADRP X22, 0x2279000
	0x01E84D90 LDR W21, [X19 + 0x80]
	0x01E84D94 LDR X22, [X22 + 0xE68]
	0x01E84D98 MOV X0, X19
	0x01E84D9C MOV X1, X31
	0x01E84DA0 BL 0x3C32E90
	0x01E84DA4 LDR X8, [X20]
	0x01E84DA8 MOV X20, X0
	0x01E84DAC LDR W9, [X8 + 0xE0]
	0x01E84DB0 CBNZ W9, 0x1E84DBC
	0x01E84DB4 MOV X0, X8
	0x01E84DB8 BL 0x1C16DFC
	0x01E84DBC LDR X3, [X22]
	0x01E84DC0 UBFM W2, W21, 0x1, 0x1
	0x01E84DC4 MOV X0, X20
	0x01E84DC8 MOV X1, X31
	0x01E84DCC BL 0x2223D74
	0x01E84DD0 CBZ X0, 0x1E84EDC
	0x01E84DD4 ADRP X8, 0x2279000
	0x01E84DD8 LDR X8, [X8 + 0xE60]
	0x01E84DDC LDR X1, [X8]
	0x01E84DE0 BL 0x301DDC4
	0x01E84DE4 MOV X20, X19
	0x01E84DE8 STR X0, [X20 + 0xA8]!
	0x01E84DEC CBZ X0, 0x1E84EDC
	0x01E84DF0 LDR W8, [X0 + 0x18]
	0x01E84DF4 CMP W8, 0x20
	0x01E84DF8 B.LT 0x1E84E80
	0x01E84DFC ADRP X8, 0x226F000
	0x01E84E00 LDR X8, [X8 + 0x758]
	0x01E84E04 ADD X1, X31, 0xC
	0x01E84E08 LDR X0, [X8]
	0x01E84E0C MOVZ W8, 0x1F
	0x01E84E10 STR W8, [X31 + 0xC]
	0x01E84E14 BL 0x1C16E04
	0x01E84E18 ADRP X8, 0x2279000
	0x01E84E1C LDR X8, [X8 + 0xE70]
	0x01E84E20 MOV X1, X0
	0x01E84E24 MOV X2, X31
	0x01E84E28 LDR X8, [X8]
	0x01E84E2C MOV X0, X8
	0x01E84E30 BL 0x321EFD0
	0x01E84E34 ADRP X8, 0x226F000
	0x01E84E38 LDR X8, [X8 + 0xA28]
	0x01E84E3C MOV X21, X0
	0x01E84E40 LDR X8, [X8]
	0x01E84E44 LDR W9, [X8 + 0xE0]
	0x01E84E48 CBNZ W9, 0x1E84E54
	0x01E84E4C MOV X0, X8
	0x01E84E50 BL 0x1C16DFC
	0x01E84E54 MOV X0, X21
	0x01E84E58 MOV X1, X31
	0x01E84E5C BL 0x3C06A04
	0x01E84E60 ADRP X8, 0x2279000
	0x01E84E64 LDR X8, [X8 + 0xE58]
	0x01E84E68 MOVZ W1, 0x1F
	0x01E84E6C MOV X0, X20
	0x01E84E70 LDR X2, [X8]
	0x01E84E74 BL 0x2142E6C
	0x01E84E78 LDR X0, [X20]
	0x01E84E7C CBZ X0, 0x1E84EDC
	0x01E84E80 LDR W8, [X0 + 0x18]
	0x01E84E84 CMP W8, 0x1
	0x01E84E88 B.LT 0x1E84EB8
	0x01E84E8C MOV W9, W31
	0x01E84E90 CMP W9, W8
	0x01E84E94 B.CS 0x1E84EE0
	0x01E84E98 ADD X10, X0, W9, 0x3, SXTW
	0x01E84E9C LDR X10, [X10 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2556000
	007 Move W8, [X22+503]
	008 Move W21, W2
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x227A000
	016 Move X0, [X0+3608]
	017 Call 0x1C17CF4
	018 Move X0, 0x227A000
	019 Move X0, [X0+3616]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+503], W8
	023 Move X0, [X19+56]
	024 Compare X0, 0
	025 JumpIfEqual {134}
	026 Move X1, X31
	027 Call NetworkRunner.get_IsShutdown, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {128}
	032 Move X8, [X19+144]
	033 Compare X8, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X19
	036 Call HitboxManager.Init, X0
	037 Move X0, [X19+56]
	038 Compare X0, 0
	039 JumpIfEqual {134}
	040 Move X1, X31
	041 Call NetworkRunner.get_IsServer, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {67}
	046 Move X8, 0x227A000
	047 Move X8, [X8+3616]
	048 Move X1, X31
	049 Move X21, [X8]
	050 Move X0, X21
	051 Call String.IsNullOrEmpty, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {135}
	056 Move X0, X21
	057 Move X1, X31
	058 Move X2, X31
	059 Call Profiler.BeginSampleImpl, X0, X1
	060 Move X8, [X19+56]
	061 Compare X8, 0
	062 JumpIfEqual {134}
	063 Move X8, [X8+80]
	064 Compare X8, 0
	065 JumpIfEqual {134}
	066 Move W21, [X8+72]
	067 Move X0, [X19+56]
	068 Compare X0, 0
	069 JumpIfEqual {134}
	070 Move X1, X31
	071 Call NetworkRunner.get_Stage, X0
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X8, 0x227A000
	074 Move X8, [X8+3608]
	075 Move X1, X31
	076 Move X22, [X8]
	077 Move X0, X22
	078 Call String.IsNullOrEmpty, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {135}
	083 Move X0, X22
	084 Move X1, X31
	085 Move X2, X31
	086 Call Profiler.BeginSampleImpl, X0, X1
	087 Move X0, X19
	088 Move W1, W20
	089 Move W2, W21
	090 Call HitboxManager.AdvanceAndRegister, X0, X1, X2
	091 Move X0, X31
	092 Call Profiler.EndSample
	093 Move X0, [X19+144]
	094 Compare X0, 0
	095 JumpIfEqual {134}
	096 Move X1, X31
	097 Call HitboxBuffer.get_BVH, X0
	098 Compare X0, 0
	099 JumpIfEqual {118}
	100 Move X0, [X19+144]
	101 Compare X0, 0
	102 JumpIfEqual {134}
	103 Move X1, X31
	104 Call HitboxBuffer.get_BVH, X0
	105 Compare X0, 0
	106 JumpIfEqual {134}
	107 Move W8, [X0+32]
	108 Move X0, [X19+144]
	109 Move [X19+72], W8
	110 Compare X0, 0
	111 JumpIfEqual {134}
	112 Move X1, X31
	113 Call HitboxBuffer.get_BVH, X0
	114 Compare X0, 0
	115 JumpIfEqual {134}
	116 Move W8, [X0+60]
	117 Move [X19+76], W8
	118 Move X0, [X19+144]
	119 Compare X0, 0
	120 JumpIfEqual {134}
	121 Move X1, X31
	122 Call HitboxBuffer.get_Current, X0
	123 Compare X0, 0
	124 JumpIfEqual {134}
	125 Move X1, X31
	126 Call HitboxSnapshot.get_CollidersCount, X0
	127 Move [X19+80], W0
	128 Move X20, [X31+32]
	129 Move X19, [X31+40]
	130 Move X22, [X31+16]
	131 Move X21, [X31+24]
	132 Move X30, [X31+48]
	133 Return 
	134 Call 0x1C17F20
	135 Move X0, 0x2278000
	136 Move X0, [X0+1400]
	137 Call 0x1C17D08
	138 Call 0x1C17F10
	139 Move X19, X0
	140 Move X0, 0x2278000
	141 Move X0, [X0+1408]
	142 Call 0x1C17D08
	143 Move X20, X0
	144 Move X0, 0x2278000
	145 Move X0, [X0+1416]
	146 Call 0x1C17D08
	147 Move X2, X0
	148 Move X0, X19
	149 Move X1, X20
	150 Move X3, X31
	151 Call ArgumentException..ctor, X0, X1, X2
	152 Move X0, 0x2278000
	153 Move X0, [X0+1424]
	154 Call 0x1C17D08
	155 Move X1, X0
	156 Move X0, X19
	157 Call 0x1C17DEC

Method: System.Void AdvanceAndRegister(System.Int32 tick, System.Int32 dataTick)

Disassembly:
	0x01E84EA0 CBZ X10, 0x1E84EDC
	0x01E84EA4 STR W9, [X10 + 0x50]
	0x01E84EA8 ADD W9, W9, 0x1
	0x01E84EAC CMP W9, W8
	0x01E84EB0 STR X19, [X10 + 0x48]
	0x01E84EB4 B.LT 0x1E84E90
	0x01E84EB8 LDR V0, [X19 + 0x84]
	0x01E84EBC FCMP S0, 0x0
	0x01E84EC0 B.NE 0x1E84ECC
	0x01E84EC4 MOV X0, X19
	0x01E84EC8 BL 0x1E84EE4
	0x01E84ECC LDP X20, X19, [X31 + 0x20]
	0x01E84ED0 LDP X22, X21, [X31 + 0x10]
	0x01E84ED4 LDR X30, [X31], #0x30
	0x01E84ED8 RET
	0x01E84EDC BL 0x1C16F20
	0x01E84EE0 BL 0x1C16F28
	0x01E84EE4 SUB X31, X31, 0x90
	0x01E84EE8 STP D15, D14, [X31 + 0x10]
	0x01E84EEC STP D13, D12, [X31 + 0x20]
	0x01E84EF0 STP D11, D10, [X31 + 0x30]
	0x01E84EF4 STP D9, D8, [X31 + 0x40]
	0x01E84EF8 STP X30, X25, [X31 + 0x50]
	0x01E84EFC STP X24, X23, [X31 + 0x60]
	0x01E84F00 STP X22, X21, [X31 + 0x70]
	0x01E84F04 STP X20, X19, [X31 + 0x80]
	0x01E84F08 LDR X8, [X0 + 0xA8]
	0x01E84F0C CBZ X8, 0x1E8514C
	0x01E84F10 LDR X8, [X8 + 0x18]
	0x01E84F14 CBZ X8, 0x1E85124
	0x01E84F18 MOV X1, X31
	0x01E84F1C MOV X19, X0
	0x01E84F20 BL 0x3C32E90
	0x01E84F24 CBZ X0, 0x1E8514C
	0x01E84F28 MOV X1, X31
	0x01E84F2C BL 0x3C3F58C
	0x01E84F30 MOV X0, X19
	0x01E84F34 MOV X1, X31
	0x01E84F38 MOV V8.16B, V0.16B
	0x01E84F3C MOV V9.16B, V1.16B
	0x01E84F40 MOV V10.16B, V2.16B
	0x01E84F44 BL 0x3C32E90
	0x01E84F48 CBZ X0, 0x1E8514C
	0x01E84F4C MOV X1, X31
	0x01E84F50 BL 0x3C3DEB4
	0x01E84F54 LDP S4, S5, [X19 + 0x88]
	0x01E84F58 LDR V6, [X19 + 0x90]
	0x01E84F5C MOV X0, X31
	0x01E84F60 BL 0x3C2A9FC
	0x01E84F64 LDR X22, [X19 + 0xA8]
	0x01E84F68 CBZ X22, 0x1E8514C
	0x01E84F6C LDR W8, [X22 + 0x18]
	0x01E84F70 CMP W8, 0x1
	0x01E84F74 B.LT 0x1E8511C
	0x01E84F78 FADD S3, S8, S0
	0x01E84F7C FADD S0, S9, S1
	0x01E84F80 STP S0, S3, [X31 + 0x8]
	0x01E84F84 ADRP X20, 0x226F000
	0x01E84F88 LDR X20, [X20 + 0x5A8]
	0x01E84F8C MOV W23, W31
	0x01E84F90 FADD S14, S10, S2
	0x01E84F94 FMOV S15, W31
	0x01E84F98 ADRP X24, 0x2554000
	0x01E84F9C MOVZ W25, 0x1
	0x01E84FA0 CMP W23, W8
	0x01E84FA4 B.CS 0x1E85150
	0x01E84FA8 ADD X8, X22, W23, 0x3, SXTW
	0x01E84FAC LDR X21, [X8 + 0x20]
	0x01E84FB0 CBZ X21, 0x1E8514C
	0x01E84FB4 LDR W8, [X21 + 0x20]
	0x01E84FB8 CBZ W8, 0x1E85108
	0x01E84FBC MOV X0, X21
	0x01E84FC0 MOV X1, X31
	0x01E84FC4 BL 0x3C32E90
	0x01E84FC8 CBZ X0, 0x1E8514C
	0x01E84FCC MOV X1, X31
	0x01E84FD0 BL 0x3C3F58C
	0x01E84FD4 MOV X0, X21
	0x01E84FD8 MOV X1, X31
	0x01E84FDC MOV V8.16B, V0.16B
	0x01E84FE0 MOV V9.16B, V1.16B
	0x01E84FE4 MOV V10.16B, V2.16B
	0x01E84FE8 BL 0x3C32E90
	0x01E84FEC CBZ X0, 0x1E8514C
	0x01E84FF0 MOV X1, X31
	0x01E84FF4 BL 0x3C3DEB4
	0x01E84FF8 LDP S4, S5, [X21 + 0x3C]
	0x01E84FFC LDR V6, [X21 + 0x44]
	0x01E85000 MOV X0, X31
	0x01E85004 BL 0x3C2A9FC
	0x01E85008 LDRB W8, [X24 + 0x784]
	0x01E8500C MOV V11.16B, V0.16B
	0x01E85010 MOV V12.16B, V1.16B
	0x01E85014 MOV V13.16B, V2.16B
	0x01E85018 CBNZ W8, 0x1E85028
	0x01E8501C MOV X0, X20
	0x01E85020 BL 0x1C16CF4
	0x01E85024 STRB W25, [X24 + 0x784]
	0x01E85028 LDR X0, [X20]
	0x01E8502C LDR W8, [X0 + 0xE0]
	0x01E85030 CBNZ W8, 0x1E85038
	0x01E85034 BL 0x1C16DFC
	0x01E85038 LDR V3, [X31 + 0xC]
	0x01E8503C FADD S0, S8, S11
	0x01E85040 FADD S1, S9, S12
	0x01E85044 FADD S2, S10, S13
	0x01E85048 FSUB S0, S0, S3
	0x01E8504C LDR V3, [X31 + 0x8]
	0x01E85050 LDR W8, [X21 + 0x20]
	0x01E85054 FSUB S2, S2, S14
	0x01E85058 FMUL S0, S0, S0
	0x01E8505C FSUB S1, S1, S3
	0x01E85060 FMUL S1, S1, S1
	0x01E85064 FMUL S2, S2, S2
	0x01E85068 FADD S0, S0, S1
	0x01E8506C FADD S0, S2, S0
	0x01E85070 CMP W8, 0x1
	0x01E85074 FSQRT S8, S0
	0x01E85078 B.EQ 0x1E85098
	0x01E8507C CMP W8, 0x3
	0x01E85080 B.EQ 0x1E850E0
	0x01E85084 CMP W8, 0x2
	0x01E85088 B.NE 0x1E850FC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x2556000
	008 Move W8, [X22+504]
	009 Move W20, W2
	010 Move W21, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x227A000
	017 Move X0, [X0+3528]
	018 Call 0x1C17CF4
	019 Move X0, 0x227A000
	020 Move X0, [X0+3536]
	021 Call 0x1C17CF4
	022 Move X0, 0x2270000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+504], W8
	027 Move X0, [X19+56]
	028 Compare X0, 0
	029 JumpIfEqual {143}
	030 Move X1, X31
	031 Call NetworkRunner.InvokeOnBeforeHitboxRegistration, X0
	032 Move X0, [X19+144]
	033 Compare X0, 0
	034 JumpIfEqual {143}
	035 Move X22, 0x227A000
	036 Move X23, 0x2270000
	037 Move X22, [X22+3528]
	038 Move X23, [X23+1728]
	039 Move W1, W21
	040 Move W2, W20
	041 Move X3, X31
	042 Call HitboxBuffer.Advance, X0, X1, X2
	043 Move X0, [X23]
	044 Move X20, [X19+56]
	045 Move X21, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Move X1, X31
	052 Call Type.GetTypeFromHandle, X0
	053 Compare X20, 0
	054 JumpIfEqual {143}
	055 Move X1, X0
	056 Move X0, X20
	057 Move X2, X31
	058 Call NetworkRunner.GetAllBehaviours, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {143}
	061 Move X8, [X0+24]
	062 Move X20, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X23, 0x227A000
	065 Move X23, [X23+3536]
	066 Move X22, X31
	067 And X8, X8, 0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X8, X20, X22
	070 Move X21, [X8+32]
	071 Compare X21, 0
	072 JumpIfEqual {126}
	073 Move W8, [X21+48]
	074 And W31, W8, 28
	075 Move X8, [X21]
	076 Move X1, [X23]
	077 Move W10, [X8+304]
	078 Move W9, [X1+304]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X8, [X8+200]
	081 Add X8, X8, X9
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X8, [X21+176]
	085 Compare X8, 0
	086 JumpIfEqual {115}
	087 Move W8, [X8+48]
	088 Move TEMP, X8
	089 And TEMP, TEMP, 8
	090 Compare TEMP, 8
	091 JumpIfEqual {115}
	092 Move X0, X21
	093 Call HitboxRoot.get_InInterest, X0
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {123}
	098 Move X9, [X19+144]
	099 Compare X9, 0
	100 JumpIfEqual {143}
	101 Move X8, [X9+16]
	102 Compare X8, 0
	103 JumpIfEqual {143}
	104 NotImplemented "Instruction LDRSW not yet implemented."
	105 Move W10, [X8+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Add X8, X8, X9
	108 Move X0, [X8+32]
	109 Compare X0, 0
	110 JumpIfEqual {143}
	111 Move X2, [X19+160]
	112 Move X1, X21
	113 Move X3, X31
	114 Call 0x1E8A604
	115 Move [X21+176], X19
	116 Move X0, [X19+144]
	117 Compare X0, 0
	118 JumpIfEqual {143}
	119 Move X2, [X19+160]
	120 Move X1, X21
	121 Move X3, X31
	122 Call HitboxBuffer.Add, X0, X1, X2
	123 Move X21, [X21+40]
	124 Compare X21, 0
	125 JumpIfNotEqual {73}
	126 Move W8, [X20+24]
	127 Add X22, X22, 1
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X0, [X19+144]
	130 Compare X0, 0
	131 JumpIfEqual {143}
	132 Move X20, [X31+32]
	133 Move X19, [X31+40]
	134 Move X22, [X31+16]
	135 Move X21, [X31+24]
	136 Move X1, X31
	137 Move X30, [X31+48]
	138 Move X23, [X31+56]
	139 Call HitboxBuffer.PosUpdateRefit, X0
	140 Return 
	141 Move X0, X21
	142 Call 0x1C181E0
	143 Call 0x1C17F20
	144 Call 0x1C17F28

Method: System.Boolean Remove(Fusion.HitboxRoot root)

Disassembly:
	0x01E8514C BL 0x1C16F20
	0x01E85150 BL 0x1C16F28
	0x01E85154 STP X30, X23, [X31 - 0x30]!
	0x01E85158 STP X22, X21, [X31 + 0x10]
	0x01E8515C STP X20, X19, [X31 + 0x20]
	0x01E85160 ADRP X22, 0x2554000
	0x01E85164 ADRP X23, 0x2278000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+144]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call HitboxBuffer.Remove, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void Fusion.IAfterTick.AfterTick()

Disassembly:
	0x01E85168 LDRB W8, [X22 + 0x200]
	0x01E8516C LDR X23, [X23 + 0xD58]
	0x01E85170 MOV W19, W2
	0x01E85174 MOV X20, X1
	0x01E85178 MOV X21, X0
	0x01E8517C TBNZ X8, 0x0, 0x1E85194
	0x01E85180 ADRP X0, 0x2278000
	0x01E85184 LDR X0, [X0 + 0xD58]
	0x01E85188 BL 0x1C16CF4
	0x01E8518C MOVZ W8, 0x1
	0x01E85190 STRB W8, [X22 + 0x200]
	0x01E85194 LDR X2, [X23]
	0x01E85198 MOV X0, X21
	0x01E8519C MOV W1, W31
	0x01E851A0 BL 0x22275E4
	0x01E851A4 CBZ X20, 0x1E851E0
	0x01E851A8 LDR W8, [X20 + 0x50]
	0x01E851AC LDR W9, [X0]
	0x01E851B0 MOVZ W10, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+56]
	005 Compare X0, 0
	006 JumpIfEqual {29}
	007 Move X1, X31
	008 Call NetworkRunner.get_IsServer, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {26}
	013 Move X8, [X19+56]
	014 Compare X8, 0
	015 JumpIfEqual {29}
	016 Move X8, [X8+80]
	017 Compare X8, 0
	018 JumpIfEqual {29}
	019 Move W1, [X8+72]
	020 Move W2, [X8+116]
	021 Move X0, X19
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call HitboxManager.RegisterHitboxSnapshot, X0, X1, X2
	025 Return 
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void Fusion.IBeforeSimulation.BeforeSimulation(System.Int32 forwardTickCount)

Disassembly:
	0x01E851B4 ANDS W31, W19, 0x1
	0x01E851B8 ADD W8, W8, 0x1
	0x01E851BC LSLV W8, W10, W8
	0x01E851C0 LDP X20, X19, [X31 + 0x20]
	0x01E851C4 LDP X22, X21, [X31 + 0x10]
	0x01E851C8 ORR W10, W8, W9, 0x0
	0x01E851CC BIC W8, W9, W8, 0x0
	0x01E851D0 CSEL W8, W8, W10, NE
	0x01E851D4 STR W8, [X0]
	0x01E851D8 LDP X30, X23, [X31], #0x30
	0x01E851DC RET
	0x01E851E0 BL 0x1C16F20
	0x01E851E4 STR X30, [X31 - 0x30]!
	0x01E851E8 STP X22, X21, [X31 + 0x10]
	0x01E851EC STP X20, X19, [X31 + 0x20]
	0x01E851F0 ADRP X21, 0x2554000
	0x01E851F4 ADRP X22, 0x2278000
	0x01E851F8 LDRB W8, [X21 + 0x201]
	0x01E851FC LDR X22, [X22 + 0xD58]
	0x01E85200 MOV X19, X1
	0x01E85204 MOV X20, X0
	0x01E85208 TBNZ X8, 0x0, 0x1E85220
	0x01E8520C ADRP X0, 0x2278000
	0x01E85210 LDR X0, [X0 + 0xD58]
	0x01E85214 BL 0x1C16CF4
	0x01E85218 MOVZ W8, 0x1
	0x01E8521C STRB W8, [X21 + 0x201]
	0x01E85220 LDR X2, [X22]
	0x01E85224 MOV X0, X20
	0x01E85228 MOV W1, W31
	0x01E8522C BL 0x22275E4
	0x01E85230 CBZ X19, 0x1E8525C
	0x01E85234 LDR W8, [X19 + 0x50]
	0x01E85238 LDR W9, [X0]
	0x01E8523C LDP X20, X19, [X31 + 0x20]
	0x01E85240 LDP X22, X21, [X31 + 0x10]
	0x01E85244 ADD W8, W8, 0x1
	0x01E85248 LSRV W8, W9, W8
	0x01E8524C ANDS W31, W8, 0x1
	0x01E85250 CSET W0, EQ
	0x01E85254 LDR X30, [X31], #0x30
	0x01E85258 RET
	0x01E8525C BL 0x1C16F20
	0x01E85260 STR X30, [X31 - 0x10]!
	0x01E85264 LDR X8, [X0 + 0xB0]
	0x01E85268 CBZ X8, 0x1E85290
	0x01E8526C LDRB W9, [X8 + 0x30]
	0x01E85270 TBNZ X9, 0x3, 0x1E85290
	0x01E85274 STR X31, [X0 + 0xB0]
	0x01E85278 MOV X1, X0
	0x01E8527C LDR X0, [X8 + 0x90]
	0x01E85280 CBZ X0, 0x1E85298
	0x01E85284 MOV X2, X31
	0x01E85288 LDR X30, [X31], #0x10
	0x01E8528C B 0x1EEB4B8
	0x01E85290 LDR X30, [X31], #0x10
	0x01E85294 RET
	0x01E85298 BL 0x1C16F20
	0x01E8529C SUB X31, X31, 0x50
	0x01E852A0 STP X30, X25, [X31 + 0x10]
	0x01E852A4 STP X24, X23, [X31 + 0x20]
	0x01E852A8 STP X22, X21, [X31 + 0x30]
	0x01E852AC STP X20, X19, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31], W31
	007 Move X19, X0
	008 Move X0, [X0+56]
	009 Compare X0, 0
	010 JumpIfEqual {77}
	011 Move W21, W1
	012 Move X1, X31
	013 Call NetworkRunner.get_IsClient, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {71}
	018 Move X8, [X19+56]
	019 Compare X8, 0
	020 JumpIfEqual {77}
	021 Move X0, [X8+80]
	022 Compare X0, 0
	023 JumpIfEqual {77}
	024 Move X1, X31
	025 Call Simulation.get_TickStride, X0
	026 Move X8, [X19+56]
	027 Compare X8, 0
	028 JumpIfEqual {77}
	029 Move X8, [X8+80]
	030 Compare X8, 0
	031 JumpIfEqual {77}
	032 Move W8, [X8+72]
	033 Move W20, W0
	034 Multiply W1, W0, W21
	035 Add X0, X31, 8
	036 Move X2, X31
	037 Move [X31+8], W8
	038 Call Tick.Next, X0, X1
	039 Move X8, [X19+56]
	040 Compare X8, 0
	041 JumpIfEqual {77}
	042 Move X8, [X8+80]
	043 Compare X8, 0
	044 JumpIfEqual {77}
	045 Move W8, [X8+72]
	046 Move X21, X0
	047 Add X0, X31, 8
	048 Move W1, W20
	049 Move X2, X31
	050 Move [X31+8], W8
	051 Call Tick.Next, X0, X1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move [X31], W0
	054 Move W1, W0
	055 Move X8, [X19+56]
	056 Compare X8, 0
	057 JumpIfEqual {77}
	058 Move X8, [X8+80]
	059 Compare X8, 0
	060 JumpIfEqual {77}
	061 Move W2, [X8+116]
	062 Move X0, X19
	063 Call HitboxManager.RegisterHitboxSnapshot, X0, X1, X2
	064 Add X0, X31, 0
	065 Move W1, W20
	066 Move X2, X31
	067 Call Tick.Next, X0, X1
	068 Move X1, X0
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move [X31], W1
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X30, [X31+16]
	074 Move X21, [X31+24]
	075 Add X31, X31, 48
	076 Return 
	077 Call 0x1C17F20

Method: System.Void Fusion.ISpawned.Spawned()

Disassembly:
	0x01E852B0 ADRP X22, 0x2554000

ISIL:
	001 Call HitboxManager.Init, X0
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x01E852B4 LDRB W8, [X22 + 0x202]
	0x01E852B8 MOV W19, W2
	0x01E852BC MOV X20, X1
	0x01E852C0 MOV X21, X0
	0x01E852C4 TBNZ X8, 0x0, 0x1E852DC
	0x01E852C8 ADRP X0, 0x2278000
	0x01E852CC LDR X0, [X0 + 0xE78]
	0x01E852D0 BL 0x1C16CF4
	0x01E852D4 MOVZ W8, 0x1
	0x01E852D8 STRB W8, [X22 + 0x202]
	0x01E852DC STR W31, [X31 + 0xC]
	0x01E852E0 LDRB W8, [X21 + 0x80]
	0x01E852E4 TBZ X8, 0x0, 0x1E852F0
	0x01E852E8 MOV X0, X21
	0x01E852EC BL 0x1E84D0C
	0x01E852F0 LDR X23, [X21 + 0xA8]
	0x01E852F4 CBZ X23, 0x1E853D4
	0x01E852F8 LDR W8, [X23 + 0x18]
	0x01E852FC CMP W8, 0x1
	0x01E85300 B.LT 0x1E853D4
	0x01E85304 ADRP X25, 0x2278000
	0x01E85308 LDR X25, [X25 + 0xE78]
	0x01E8530C MOV W24, W31
	0x01E85310 CMP W24, W8
	0x01E85314 B.CS 0x1E853F0
	0x01E85318 CBZ X20, 0x1E853EC
	0x01E8531C LDR X8, [X20]
	0x01E85320 ADD X9, X23, W24, 0x3, SXTW
	0x01E85324 LDR X21, [X9 + 0x20]
	0x01E85328 LDR X1, [X25]
	0x01E8532C LDRH W9, [X8 + 0x12E]
	0x01E85330 CBZ X9, 0x1E85354
	0x01E85334 LDR X10, [X8 + 0xB0]
	0x01E85338 ADD X10, X10, 0x8
	0x01E8533C LDUR X11, [X10 - 0x8]
	0x01E85340 CMP X11, X1
	0x01E85344 B.EQ 0x1E85364
	0x01E85348 SUBS X9, X9, 0x1
	0x01E8534C ADD X10, X10, 0x10
	0x01E85350 B.NE 0x1E8533C
	0x01E85354 MOV X0, X20
	0x01E85358 MOV W2, W31
	0x01E8535C BL 0x1C5C788
	0x01E85360 B 0x1E85370
	0x01E85364 LDRSW X9, [X10]
	0x01E85368 ADD X8, X8, X9, 0x4, LSL
	0x01E8536C ADD X0, X8, 0x138
	0x01E85370 LDP X8, X2, [X0]
	0x01E85374 ADD X1, X31, 0xC
	0x01E85378 MOV X0, X20
	0x01E8537C BLR X8
	0x01E85380 CBZ X21, 0x1E853EC
	0x01E85384 MOV X22, X0
	0x01E85388 MOV X0, X21
	0x01E8538C MOV X1, X31
	0x01E85390 BL 0x3C32ECC
	0x01E85394 CBZ X0, 0x1E853EC
	0x01E85398 MOV X1, X31
	0x01E8539C BL 0x3C357F8
	0x01E853A0 TBNZ X0, 0x0, 0x1E853AC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x2555000
	010 Move X25, 0x2279000
	011 Move X20, 0x2279000
	012 Move X23, 0x2279000
	013 Move X22, 0x2279000
	014 Move X21, 0x2279000
	015 Move W8, [X24+505]
	016 Move X25, [X25+3624]
	017 Move X20, [X20+3632]
	018 Move X23, [X23+3640]
	019 Move X22, [X22+3648]
	020 Move X21, [X21+3656]
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0x2279000
	027 Move X0, [X0+3656]
	028 Call 0x1C17CF4
	029 Move X0, 0x2279000
	030 Move X0, [X0+3648]
	031 Call 0x1C17CF4
	032 Move X0, 0x2279000
	033 Move X0, [X0+3632]
	034 Call 0x1C17CF4
	035 Move X0, 0x2279000
	036 Move X0, [X0+3640]
	037 Call 0x1C17CF4
	038 Move X0, 0x2279000
	039 Move X0, [X0+3624]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X24+505], W8
	043 Move X0, [X25]
	044 Call 0x1C17F10
	045 Move X1, [X20]
	046 Move X20, X0
	047 Call List`1<LagCompensatedHit>..ctor, X0
	048 Move [X19+96], X20
	049 Move X0, [X23]
	050 Call 0x1C17F10
	051 Move X1, [X22]
	052 Move X20, X0
	053 Call List`1<HitboxHit>..ctor, X0
	054 Move [X19+152], X20
	055 Move X0, [X21]
	056 Call 0x1C17F10
	057 Move X1, X31
	058 Move X20, X0
	059 Call LagCompensationStatisticsManager..ctor, X0
	060 Move [X19+160], X20
	061 Move X0, X19
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X1, X31
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Call SimulationBehaviour..ctor, X0
	072 Return 

