Type: Fusion.TimeSyncConfiguration

Method: Fusion.TimeSyncConfiguration GetFromTickrate(Fusion.TickRate/Resolved tickrate)

Disassembly:
	0x01ECC594 LDR X23, [X23 + 0x7C0]
	0x01ECC598 LDRH W9, [X8 + 0x12E]
	0x01ECC59C LDR X1, [X23]
	0x01ECC5A0 CBZ X9, 0x1ECC5C4
	0x01ECC5A4 LDR X10, [X8 + 0xB0]
	0x01ECC5A8 ADD X10, X10, 0x8
	0x01ECC5AC LDUR X11, [X10 - 0x8]
	0x01ECC5B0 CMP X11, X1
	0x01ECC5B4 B.EQ 0x1ECC5D4
	0x01ECC5B8 SUBS X9, X9, 0x1
	0x01ECC5BC ADD X10, X10, 0x10
	0x01ECC5C0 B.NE 0x1ECC5AC
	0x01ECC5C4 MOV X0, X20
	0x01ECC5C8 MOV W2, W31
	0x01ECC5CC BL 0x1C5C788
	0x01ECC5D0 B 0x1ECC5E0
	0x01ECC5D4 LDRSW X9, [X10]
	0x01ECC5D8 ADD X8, X8, X9, 0x4, LSL
	0x01ECC5DC ADD X0, X8, 0x138
	0x01ECC5E0 LDP X8, X1, [X0]
	0x01ECC5E4 MOV X0, X20
	0x01ECC5E8 BLR X8
	0x01ECC5EC TBNZ X0, 0x0, 0x1ECC684
	0x01ECC5F0 LDR X8, [X19]
	0x01ECC5F4 MOV X0, X19
	0x01ECC5F8 LDR X9, [X8 + 0x248]
	0x01ECC5FC LDR X1, [X8 + 0x250]
	0x01ECC600 BLR X9
	0x01ECC604 CMP W0, 0x1
	0x01ECC608 B.LT 0x1ECC684
	0x01ECC60C LDR X20, [X19 + 0x68]
	0x01ECC610 ADD X8, X31, 0x60
	0x01ECC614 MOV X0, X19
	0x01ECC618 MOV X1, X31
	0x01ECC61C BL 0x1EC02E4
	0x01ECC620 LDP V0, V1, [X31 + 0x60]
	0x01ECC624 LDR W8, [X31 + 0x80]
	0x01ECC628 STP V0, V1, [X31 + 0x30]
	0x01ECC62C STR W8, [X31 + 0x50]
	0x01ECC630 CBZ X20, 0x1ECC91C
	0x01ECC634 LDP V0, V1, [X31 + 0x30]
	0x01ECC638 LDR W8, [X31 + 0x50]
	0x01ECC63C LDR X1, [X23]
	0x01ECC640 STP V0, V1, [X31]
	0x01ECC644 STR W8, [X31 + 0x20]
	0x01ECC648 LDR X8, [X20]
	0x01ECC64C LDRH W9, [X8 + 0x12E]
	0x01ECC650 CBZ X9, 0x1ECC674
	0x01ECC654 LDR X10, [X8 + 0xB0]
	0x01ECC658 ADD X10, X10, 0x8
	0x01ECC65C LDUR X11, [X10 - 0x8]
	0x01ECC660 CMP X11, X1
	0x01ECC664 B.EQ 0x1ECC748
	0x01ECC668 SUBS X9, X9, 0x1
	0x01ECC66C ADD X10, X10, 0x10
	0x01ECC670 B.NE 0x1ECC65C
	0x01ECC674 MOVZ W2, 0x1
	0x01ECC678 MOV X0, X20
	0x01ECC67C BL 0x1C5C788
	0x01ECC680 B 0x1ECC758
	0x01ECC684 LDR X20, [X19 + 0x68]
	0x01ECC688 CBZ X20, 0x1ECC91C
	0x01ECC68C LDR X8, [X20]
	0x01ECC690 LDR X1, [X23]
	0x01ECC694 LDRH W9, [X8 + 0x12E]
	0x01ECC698 CBZ X9, 0x1ECC6BC
	0x01ECC69C LDR X10, [X8 + 0xB0]
	0x01ECC6A0 ADD X10, X10, 0x8
	0x01ECC6A4 LDUR X11, [X10 - 0x8]
	0x01ECC6A8 CMP X11, X1
	0x01ECC6AC B.EQ 0x1ECC6CC
	0x01ECC6B0 SUBS X9, X9, 0x1
	0x01ECC6B4 ADD X10, X10, 0x10
	0x01ECC6B8 B.NE 0x1ECC6A4
	0x01ECC6BC MOV X0, X20
	0x01ECC6C0 MOV W2, W31
	0x01ECC6C4 BL 0x1C5C788
	0x01ECC6C8 B 0x1ECC6D8
	0x01ECC6CC LDRSW X9, [X10]
	0x01ECC6D0 ADD X8, X8, X9, 0x4, LSL
	0x01ECC6D4 ADD X0, X8, 0x138
	0x01ECC6D8 LDP X8, X1, [X0]
	0x01ECC6DC MOV X0, X20
	0x01ECC6E0 BLR X8
	0x01ECC6E4 TBZ X0, 0x0, 0x1ECC8DC
	0x01ECC6E8 LDR W8, [X19 + 0x1D0]
	0x01ECC6EC CMP W8, 0x1
	0x01ECC6F0 B.LT 0x1ECC8DC
	0x01ECC6F4 LDR X8, [X19]
	0x01ECC6F8 MOV X0, X19
	0x01ECC6FC LDR X9, [X8 + 0x248]
	0x01ECC700 LDR X1, [X8 + 0x250]
	0x01ECC704 BLR X9
	0x01ECC708 LDR W21, [X19 + 0x1D0]
	0x01ECC70C MOV X20, X0
	0x01ECC710 MOV X0, X19
	0x01ECC714 MOV X1, X31
	0x01ECC718 BL 0x1EC0524
	0x01ECC71C SUB W8, W20, W21
	0x01ECC720 SCVTF D1, W8
	0x01ECC724 FMUL D0, D0, D1
	0x01ECC728 FMOV D1, 1
	0x01ECC72C FCMP D0, D1
	0x01ECC730 B.LE 0x1ECC8DC
	0x01ECC734 LDR X8, [X19 + 0x1A8]
	0x01ECC738 LDR X20, [X19 + 0x68]
	0x01ECC73C CBZ X8, 0x1ECC858
	0x01ECC740 LDR V8, [X8 + 0x48]
	0x01ECC744 B 0x1ECC85C
	0x01ECC748 LDR W9, [X10]
	0x01ECC74C ADD W9, W9, 0x1
	0x01ECC750 ADD X8, X8, W9, 0x4, SXTW
	0x01ECC754 ADD X0, X8, 0x138
	0x01ECC758 LDP V0, V1, [X31]
	0x01ECC75C LDR W8, [X31 + 0x20]
	0x01ECC760 LDR X9, [X0]
	0x01ECC764 ADD X1, X31, 0x60
	0x01ECC768 STP V0, V1, [X31 + 0x60]
	0x01ECC76C STR W8, [X31 + 0x80]
	0x01ECC770 LDR X2, [X0 + 0x8]
	0x01ECC774 MOV X0, X20
	0x01ECC778 BLR X9
	0x01ECC77C LDR X20, [X19 + 0x68]
	0x01ECC780 MOV X0, X19
	0x01ECC784 BL 0x1ECB518
	0x01ECC788 CBZ X20, 0x1ECC91C
	0x01ECC78C LDR X8, [X20]
	0x01ECC790 LDR X1, [X23]
	0x01ECC794 MOV X21, X0
	0x01ECC798 LDRH W9, [X8 + 0x12E]
	0x01ECC79C CBZ X9, 0x1ECC7C0
	0x01ECC7A0 LDR X10, [X8 + 0xB0]
	0x01ECC7A4 ADD X10, X10, 0x8
	0x01ECC7A8 LDUR X11, [X10 - 0x8]
	0x01ECC7AC CMP X11, X1
	0x01ECC7B0 B.EQ 0x1ECC7D0
	0x01ECC7B4 SUBS X9, X9, 0x1
	0x01ECC7B8 ADD X10, X10, 0x10
	0x01ECC7BC B.NE 0x1ECC7A8
	0x01ECC7C0 MOVZ W2, 0x2
	0x01ECC7C4 MOV X0, X20
	0x01ECC7C8 BL 0x1C5C788
	0x01ECC7CC B 0x1ECC7E0
	0x01ECC7D0 LDR W9, [X10]
	0x01ECC7D4 ADD W9, W9, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x250E000
	007 Move X22, 0x2234000
	008 Move W8, [X19+1304]
	009 Move X22, [X22+3448]
	010 Move X20, X1
	011 Move X21, X0
	012 ShiftRight X21, 32
	013 And X21, X21, 0x7FFFFFFF
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2234000
	019 Move X0, [X0+3448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1304], W8
	023 Move X0, [X22]
	024 Call 0x1C17F10
	025 Move X8, -20836352
	026 Move V0, [X8+153]
	027 Move X8, 0x40140000
	028 NotImplemented "Instruction MOVI not yet implemented."
	029 Move X1, X31
	030 Move X19, X0
	031 Move [X0+32], X8
	032 Move [X0+1], V0
	033 Move [X0+40], D1
	034 Call Object..ctor, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W8, 1
	048 Move W10, 1280
	049 NotImplemented "Instruction LSLV not yet implemented."
	050 NotImplemented "Instruction MOVK not yet implemented."
	051 And W31, W9, W10
	052 Move X9, 0x40240000
	053 Move [X19+24], X9
	054 Move [X19+40], W8
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X8, 0x40140000
	062 Move W9, 1
	063 Move [X19+24], X8
	064 Move [X19+40], W9
	065 Move X8, X20
	066 ShiftRight X8, 32
	067 And X8, X8, 0x7FFFFFFF
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W9, 1
	081 Move W10, 1280
	082 NotImplemented "Instruction LSLV not yet implemented."
	083 NotImplemented "Instruction MOVK not yet implemented."
	084 And W31, W8, W10
	085 Move X8, 0x40240000
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X8, 0x40140000
	091 Move W9, 1
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X8, 0x40140000
	095 Move W9, 2
	096 Move [X19+32], X8
	097 Move [X19+44], W9
	098 Move X0, X19
	099 Move X20, [X31+32]
	100 Move X19, [X31+40]
	101 Move X22, [X31+16]
	102 Move X21, [X31+24]
	103 Move X30, [X31+48]
	104 Return X0

Method: System.Double get_SampleWindowSecondsNormalized()

Disassembly:
	0x01ED8DF0 LDR X0, [X0 + 0xF0]
	0x01ED8DF4 BL 0x1C16CF4
	0x01ED8DF8 ADRP X0, 0x2228000
	0x01ED8DFC LDR X0, [X0 + 0xF8]
	0x01ED8E00 BL 0x1C16CF4
	0x01ED8E04 MOVZ W8, 0x1
	0x01ED8E08 STRB W8, [X20 + 0x539]
	0x01ED8E0C LDR X0, [X19 + 0x20]
	0x01ED8E10 MOVZ W8, 0x1
	0x01ED8E14 STRB W8, [X19 + 0x30]
	0x01ED8E18 CBZ X0, 0x1ED8E58
	0x01ED8E1C ADRP X21, 0x2228000
	0x01ED8E20 LDR X21, [X21 + 0xF8]
	0x01ED8E24 MOV W20, W31
	0x01ED8E28 LDR W8, [X0 + 0x18]
	0x01ED8E2C CMP W20, W8
	0x01ED8E30 B.GE 0x1ED8E5C
	0x01ED8E34 LDR X2, [X21]
	0x01ED8E38 MOV W1, W20
	0x01ED8E3C BL 0x301BCCC
	0x01ED8E40 CBZ X0, 0x1ED8E58
	0x01ED8E44 LDR X1, [X19 + 0x10]
	0x01ED8E48 BL 0x1ED8BE0
	0x01ED8E4C LDR X0, [X19 + 0x20]
	0x01ED8E50 ADD W20, W20, 0x1
	0x01ED8E54 CBNZ X0, 0x1ED8E28
	0x01ED8E58 BL 0x1C16F20

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2502000
	007 Move X20, 0x2223000
	008 Move W8, [X21+1305]
	009 Move X20, [X20+3176]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2223000
	016 Move X0, [X0+3176]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1305], W8
	020 Move X0, [X20]
	021 Move V8, [X19+16]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move D1, 1
	031 Move D2, 8.000000000465661
	032 Move V0, V8
	033 Move X0, X31
	034 Move V8, [X31+48]
	035 Call Maths.Clamp, V0, V1, V2
	036 Return V0

Method: System.Double get_MaxLateInputsNormalized()

Disassembly:
	0x01ED8E5C STP X31, X31, [X19 + 0x18]
	0x01ED8E60 LDP X20, X19, [X31 + 0x10]
	0x01ED8E64 LDP X30, X21, [X31], #0x20
	0x01ED8E68 RET
	0x01ED8E6C LDR W0, [X0 + 0x10]
	0x01ED8E70 RET
	0x01ED8E74 STP X30, X23, [X31 - 0x30]!
	0x01ED8E78 STP X22, X21, [X31 + 0x10]
	0x01ED8E7C STP X20, X19, [X31 + 0x20]
	0x01ED8E80 ADRP X23, 0x2501000
	0x01ED8E84 ADRP X22, 0x2227000
	0x01ED8E88 ADRP X21, 0x221E000
	0x01ED8E8C LDRB W8, [X23 + 0x53A]
	0x01ED8E90 LDR X22, [X22 + 0xDB0]
	0x01ED8E94 LDR X21, [X21 + 0xE40]
	0x01ED8E98 MOV W20, W1
	0x01ED8E9C MOV X19, X0
	0x01ED8EA0 TBNZ X8, 0x0, 0x1ED8EDC
	0x01ED8EA4 ADRP X0, 0x2228000
	0x01ED8EA8 LDR X0, [X0 + 0x100]
	0x01ED8EAC BL 0x1C16CF4
	0x01ED8EB0 ADRP X0, 0x2228000
	0x01ED8EB4 LDR X0, [X0 + 0x108]
	0x01ED8EB8 BL 0x1C16CF4
	0x01ED8EBC ADRP X0, 0x221E000
	0x01ED8EC0 LDR X0, [X0 + 0xE40]
	0x01ED8EC4 BL 0x1C16CF4
	0x01ED8EC8 ADRP X0, 0x2227000
	0x01ED8ECC LDR X0, [X0 + 0xDB0]
	0x01ED8ED0 BL 0x1C16CF4
	0x01ED8ED4 MOVZ W8, 0x1
	0x01ED8ED8 STRB W8, [X23 + 0x53A]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2502000
	007 Move X20, 0x2223000
	008 Move W8, [X21+1306]
	009 Move X20, [X20+3176]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2223000
	016 Move X0, [X0+3176]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1306], W8
	020 Move X0, [X20]
	021 Move V8, [X19+24]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X8, -20881408
	027 Move V1, [X8+3904]
	028 Move D2, 16.000000002095476
	029 Move V0, V8
	030 Move X0, X31
	031 Call Maths.Clamp, V0, V1, V2
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Move X21, [X31+24]
	036 Move X8, 0x40590000
	037 Move D1, X8
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 Move V8, [X31+48]
	040 Return V0

Method: System.Double get_MaxLateSnapshotsNormalized()

Disassembly:
	0x01ED8EDC MOV X0, X19
	0x01ED8EE0 MOV X1, X31
	0x01ED8EE4 BL 0x33BDD8C
	0x01ED8EE8 LDR X0, [X22]
	0x01ED8EEC MOV W1, W20
	0x01ED8EF0 BL 0x1C16D6C
	0x01ED8EF4 STR X0, [X19 + 0x18]
	0x01ED8EF8 LDR X0, [X21]
	0x01ED8EFC LDR W8, [X0 + 0xE0]
	0x01ED8F00 CBNZ W8, 0x1ED8F08
	0x01ED8F04 BL 0x1C16DFC
	0x01ED8F08 ADRP X20, 0x2501000
	0x01ED8F0C LDRB W8, [X20 + 0x4B6]
	0x01ED8F10 CBNZ W8, 0x1ED8F28
	0x01ED8F14 ADRP X0, 0x221E000
	0x01ED8F18 LDR X0, [X0 + 0xE40]
	0x01ED8F1C BL 0x1C16CF4
	0x01ED8F20 MOVZ W8, 0x1
	0x01ED8F24 STRB W8, [X20 + 0x4B6]
	0x01ED8F28 LDR X0, [X21]
	0x01ED8F2C ADRP X23, 0x2228000
	0x01ED8F30 ADRP X22, 0x2228000
	0x01ED8F34 LDR W8, [X0 + 0xE0]
	0x01ED8F38 LDR X23, [X23 + 0x108]
	0x01ED8F3C LDR X22, [X22 + 0x100]
	0x01ED8F40 CBNZ W8, 0x1ED8F4C
	0x01ED8F44 BL 0x1C16DFC
	0x01ED8F48 LDR X0, [X21]
	0x01ED8F4C LDR X8, [X0 + 0xB8]
	0x01ED8F50 LDR X0, [X23]
	0x01ED8F54 LDR X20, [X8]
	0x01ED8F58 BL 0x1C16F10

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2502000
	007 Move X20, 0x2223000
	008 Move W8, [X21+1307]
	009 Move X20, [X20+3176]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2223000
	016 Move X0, [X0+3176]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1307], W8
	020 Move X0, [X20]
	021 Move V8, [X19+32]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X8, -20881408
	027 Move V1, [X8+3904]
	028 Move D2, 16.000000002095476
	029 Move V0, V8
	030 Move X0, X31
	031 Call Maths.Clamp, V0, V1, V2
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Move X21, [X31+24]
	036 Move X8, 0x40590000
	037 Move D1, X8
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 Move V8, [X31+48]
	040 Return V0

Method: System.Int32 get_RedundantInputsNormalized()

Disassembly:
	0x01ED8F5C LDR X2, [X22]
	0x01ED8F60 MOV X1, X20
	0x01ED8F64 MOV X21, X0
	0x01ED8F68 BL 0x2AE6640
	0x01ED8F6C STR X21, [X19 + 0x20]
	0x01ED8F70 LDP X20, X19, [X31 + 0x20]
	0x01ED8F74 LDP X22, X21, [X31 + 0x10]
	0x01ED8F78 LDP X30, X23, [X31], #0x30
	0x01ED8F7C RET
	0x01ED8F80 STR X30, [X31 - 0x10]!
	0x01ED8F84 TBNZ X1, 0x1F, 0x1ED8FB4
	0x01ED8F88 LDR W8, [X0 + 0x10]
	0x01ED8F8C CMP W8, W1
	0x01ED8F90 B.LE 0x1ED8FB4
	0x01ED8F94 LDR X8, [X0 + 0x18]
	0x01ED8F98 CBZ X8, 0x1ED8FC0
	0x01ED8F9C LDR W9, [X8 + 0x18]
	0x01ED8FA0 CMP W9, W1
	0x01ED8FA4 B.LS 0x1ED8FC4
	0x01ED8FA8 ADD X8, X8, W1, 0x3, UXTW
	0x01ED8FAC LDR X0, [X8 + 0x20]
	0x01ED8FB0 B 0x1ED8FB8
	0x01ED8FB4 MOV X0, X31
	0x01ED8FB8 LDR X30, [X31], #0x10
	0x01ED8FBC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2502000
	006 Move X20, 0x2223000
	007 Move W8, [X21+1308]
	008 Move X20, [X20+3176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2223000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1308], W8
	019 Move X0, [X20]
	020 Move W19, [X19+40]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W2, 8
	029 Move W1, W31
	030 Move X3, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Maths.Clamp, X0, X1, X2
	034 Return X0

Method: System.Int32 get_RedundantSnapshotsNormalized()

Disassembly:
	0x01ED8FC0 BL 0x1C16F20
	0x01ED8FC4 BL 0x1C16F28
	0x01ED8FC8 SUB X31, X31, 0x30
	0x01ED8FCC STP X30, X21, [X31 + 0x10]
	0x01ED8FD0 STP X20, X19, [X31 + 0x20]
	0x01ED8FD4 ADRP X21, 0x2501000
	0x01ED8FD8 LDRB W8, [X21 + 0x53B]
	0x01ED8FDC MOV X19, X1
	0x01ED8FE0 MOV X20, X0
	0x01ED8FE4 TBNZ X8, 0x0, 0x1ED8FFC
	0x01ED8FE8 ADRP X0, 0x2228000
	0x01ED8FEC LDR X0, [X0 + 0x110]
	0x01ED8FF0 BL 0x1C16CF4
	0x01ED8FF4 MOVZ W8, 0x1
	0x01ED8FF8 STRB W8, [X21 + 0x53B]
	0x01ED8FFC STR X31, [X31 + 0x8]
	0x01ED9000 LDR X0, [X20 + 0x20]
	0x01ED9004 CBZ X0, 0x1ED903C
	0x01ED9008 ADRP X8, 0x2227000
	0x01ED900C LDR X8, [X8 + 0x110]
	0x01ED9010 AND X1, X19, 0x0
	0x01ED9014 ADD X2, X31, 0x8
	0x01ED9018 LDR X3, [X8]
	0x01ED901C BL 0x2AE89D0
	0x01ED9020 LDR X8, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2502000
	006 Move X20, 0x2223000
	007 Move W8, [X21+1309]
	008 Move X20, [X20+3176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2223000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1309], W8
	019 Move X0, [X20]
	020 Move W19, [X19+44]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W2, 8
	029 Move W1, W31
	030 Move X3, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Maths.Clamp, X0, X1, X2
	034 Return X0

Method: System.Double get_MaxSimSpeedAdjust()

Disassembly:
	0x01ED9024 LDP X20, X19, [X31 + 0x20]
	0x01ED9028 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move D0, 4.000000000232831
	002 Return V0

Method: System.Double get_MaxSimSpeedAdjustNormalized()

Disassembly:
	0x01ED902C ANDS W31, W0, 0x1
	0x01ED9030 CSEL X0, X8, X31, NE
	0x01ED9034 ADD X31, X31, 0x30
	0x01ED9038 RET
	0x01ED903C BL 0x1C16F20
	0x01ED9040 STR X30, [X31 - 0x20]!
	0x01ED9044 STP X20, X19, [X31 + 0x10]
	0x01ED9048 ADRP X20, 0x2500000
	0x01ED904C LDRB W8, [X20 + 0x53C]
	0x01ED9050 MOV X19, X0
	0x01ED9054 TBNZ X8, 0x0, 0x1ED906C
	0x01ED9058 ADRP X0, 0x2227000
	0x01ED905C LDR X0, [X0 + 0x118]
	0x01ED9060 BL 0x1C16CF4
	0x01ED9064 MOVZ W8, 0x1
	0x01ED9068 STRB W8, [X20 + 0x53C]
	0x01ED906C LDR X0, [X19 + 0x18]
	0x01ED9070 STR W31, [X19 + 0x10]
	0x01ED9074 CBZ X0, 0x1ED90A8
	0x01ED9078 LDR W2, [X0 + 0x18]
	0x01ED907C MOV W1, W31
	0x01ED9080 MOV X3, X31
	0x01ED9084 BL 0x339FA34
	0x01ED9088 LDR X0, [X19 + 0x20]
	0x01ED908C CBZ X0, 0x1ED90A8
	0x01ED9090 ADRP X8, 0x2227000
	0x01ED9094 LDR X8, [X8 + 0x118]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2501000
	005 Move X20, 0x2222000
	006 Move W8, [X19+1310]
	007 Move X20, [X20+3176]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2222000
	013 Move X0, [X0+3176]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1310], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move D0, 4.000000000232831
	023 Move D1, 1
	024 Move D2, 8.000000000465661
	025 Move X0, X31
	026 Call Maths.Clamp, V0, V1, V2
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, 0x40590000
	030 Move D1, X8
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 Move X30, [X31+32]
	033 Return V0

Method: System.Double get_MaxInterpSpeedAdjust()

Disassembly:
	0x01ED9098 LDP X20, X19, [X31 + 0x10]
	0x01ED909C LDR X1, [X8]

ISIL:
	001 Move D0, 4.000000000232831
	002 Return V0

Method: System.Double get_MaxInterpSpeedAdjustNormalized()

Disassembly:
	0x01ED90A0 LDR X30, [X31], #0x20
	0x01ED90A4 B 0x2AE7064
	0x01ED90A8 BL 0x1C16F20
	0x01ED90AC STR X30, [X31 - 0x30]!
	0x01ED90B0 STP X22, X21, [X31 + 0x10]
	0x01ED90B4 STP X20, X19, [X31 + 0x20]
	0x01ED90B8 ADRP X21, 0x2500000
	0x01ED90BC LDRB W8, [X21 + 0x53D]
	0x01ED90C0 MOV X19, X1
	0x01ED90C4 MOV X20, X0
	0x01ED90C8 TBNZ X8, 0x0, 0x1ED90E0
	0x01ED90CC ADRP X0, 0x2227000
	0x01ED90D0 LDR X0, [X0 + 0x120]
	0x01ED90D4 BL 0x1C16CF4
	0x01ED90D8 MOVZ W8, 0x1
	0x01ED90DC STRB W8, [X21 + 0x53D]
	0x01ED90E0 LDRSW X21, [X20 + 0x10]
	0x01ED90E4 LDR X22, [X20 + 0x18]
	0x01ED90E8 ADD W8, W21, 0x1
	0x01ED90EC STR W8, [X20 + 0x10]
	0x01ED90F0 CBZ X22, 0x1ED9150
	0x01ED90F4 CBZ X19, 0x1ED910C
	0x01ED90F8 LDR X8, [X22]
	0x01ED90FC MOV X0, X19
	0x01ED9100 LDR X1, [X8 + 0x40]
	0x01ED9104 BL 0x1C16E00
	0x01ED9108 CBZ X0, 0x1ED9158

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2501000
	005 Move X20, 0x2222000
	006 Move W8, [X19+1311]
	007 Move X20, [X20+3176]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2222000
	013 Move X0, [X0+3176]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1311], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move D0, 4.000000000232831
	023 Move D1, 1
	024 Move D2, 8.000000000465661
	025 Move X0, X31
	026 Call Maths.Clamp, V0, V1, V2
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, 0x40590000
	030 Move D1, X8
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 Move X30, [X31+32]
	033 Return V0

Method: System.Void .ctor()

Disassembly:
	0x01ED8DCC LDR X30, [X31], #0x50
	0x01ED8DD0 RET
	0x01ED8DD4 STP X30, X21, [X31 - 0x20]!
	0x01ED8DD8 STP X20, X19, [X31 + 0x10]
	0x01ED8DDC ADRP X20, 0x2501000
	0x01ED8DE0 LDRB W8, [X20 + 0x539]
	0x01ED8DE4 MOV X19, X0
	0x01ED8DE8 TBNZ X8, 0x0, 0x1ED8E0C
	0x01ED8DEC ADRP X0, 0x2228000

ISIL:
	001 Move X8, -20885504
	002 Move V0, [X8+153]
	003 Move X8, 0x40140000
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move X1, X31
	006 Move [X0+32], X8
	007 Move [X0+1], V0
	008 Move [X0+40], D1
	009 Call Object..ctor, X0
	010 Return 

