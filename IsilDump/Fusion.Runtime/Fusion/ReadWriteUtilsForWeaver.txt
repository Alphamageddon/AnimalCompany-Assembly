Type: Fusion.ReadWriteUtilsForWeaver

Method: System.Boolean ReadBoolean(System.Int32* data)

Disassembly:
	0x01E8EC7C BL 0x1C16CF4
	0x01E8EC80 MOVZ W8, 0x1
	0x01E8EC84 STRB W8, [X20 + 0x25C]
	0x01E8EC88 LDR W8, [X19 + 0x10]

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void WriteBoolean(System.Int32* data, System.Boolean value)

Disassembly:
	0x01E8EC8C ADDS W31, W8, 0x2
	0x01E8EC90 B.NE 0x1E8ECB0
	0x01E8EC94 LDR W20, [X19 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0], W8
	003 Return 

Method: System.Int32 GetByteArrayHashCode(System.Byte* ptr, System.Int32 length)

Disassembly:
	0x01E8EC98 MOV X0, X31
	0x01E8EC9C BL 0x33C151C
	0x01E8ECA0 CMP W20, W0
	0x01E8ECA4 B.NE 0x1E8ECB0
	0x01E8ECA8 STR W31, [X19 + 0x10]
	0x01E8ECAC B 0x1E8ECDC
	0x01E8ECB0 ADRP X8, 0x2270000
	0x01E8ECB4 LDR X8, [X8 + 0x88]
	0x01E8ECB8 LDR X0, [X8]
	0x01E8ECBC BL 0x1C16F10
	0x01E8ECC0 MOV X1, X31
	0x01E8ECC4 MOV X19, X0
	0x01E8ECC8 BL 0x33BDD8C
	0x01E8ECCC MOV X0, X31
	0x01E8ECD0 STR W31, [X19 + 0x10]
	0x01E8ECD4 BL 0x33C151C
	0x01E8ECD8 STR W0, [X19 + 0x20]
	0x01E8ECDC MOV X0, X19
	0x01E8ECE0 LDP X20, X19, [X31 + 0x10]
	0x01E8ECE4 LDR X30, [X31], #0x20
	0x01E8ECE8 RET
	0x01E8ECEC B 0x1E8EC5C
	0x01E8ECF0 RET
	0x01E8ECF4 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x254C000
	007 Move X22, 0x2271000
	008 Move W8, [X21+589]
	009 Move X22, [X22+88]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2271000
	017 Move X0, [X0+88]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+589], W8
	021 Move X3, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W2, 0x1505
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 Move X30, [X31+48]
	031 Call 0x21EC3E0, X0, X1, X2
	032 Return X0

Method: System.Int32 WriteStringUtf8NoHash(System.Void* destination, System.String str)

Disassembly:
	0x01E8ECF8 STP X20, X19, [X31 + 0x10]
	0x01E8ECFC ADRP X20, 0x254B000

ISIL:
	001 Move X2, X31
	002 Call Native.WriteLengthPrefixedUTF8, X0, X1
	003 Return X0

Method: System.Int32 ReadStringUtf8NoHash(System.Void* source, out System.String result)

Disassembly:
	0x01E8ED00 LDRB W8, [X20 + 0x25D]
	0x01E8ED04 MOV X19, X0

ISIL:
	001 Move X2, X31
	002 Call Native.ReadLengthPrefixedUTF8, X0, X1
	003 Return X0

Method: System.Int32 GetByteCountUtf8NoHash(System.String value)

Disassembly:
	0x01E8ED08 TBNZ X8, 0x0, 0x1E8ED20
	0x01E8ED0C ADRP X0, 0x2270000

ISIL:
	001 Move X1, X31
	002 Call Native.GetLengthPrefixedUTF8ByteCount, X0
	003 Return X0

Method: System.Int32 GetStringHashCode(System.String value, System.Int32 maxLength)

Disassembly:
	0x01E8ED10 LDR X0, [X0 + 0xC0]
	0x01E8ED14 BL 0x1C16CF4
	0x01E8ED18 MOVZ W8, 0x1
	0x01E8ED1C STRB W8, [X20 + 0x25D]
	0x01E8ED20 LDR W8, [X19 + 0x10]
	0x01E8ED24 CMP W8, 0x1
	0x01E8ED28 B.EQ 0x1E8ED5C
	0x01E8ED2C CBNZ W8, 0x1E8ED68
	0x01E8ED30 MOVN W8, 0x0
	0x01E8ED34 MOV X0, X31
	0x01E8ED38 STR W8, [X19 + 0x10]
	0x01E8ED3C BL 0x33C0128
	0x01E8ED40 CBZ X0, 0x1E8EDDC
	0x01E8ED44 MOV X1, X31
	0x01E8ED48 BL 0x33C0134
	0x01E8ED4C MOV W8, W31
	0x01E8ED50 STR X0, [X19 + 0x28]
	0x01E8ED54 STR W31, [X19 + 0x30]
	0x01E8ED58 B 0x1E8EDA4
	0x01E8ED5C MOVN W8, 0x0
	0x01E8ED60 STR W8, [X19 + 0x10]
	0x01E8ED64 B 0x1E8ED94
	0x01E8ED68 MOV W0, W31
	0x01E8ED6C B 0x1E8EDCC
	0x01E8ED70 B.CS 0x1E8EDD8
	0x01E8ED74 ADRP X9, 0x2270000
	0x01E8ED78 LDR X9, [X9 + 0xC0]
	0x01E8ED7C ADD X8, X0, W8, 0x3, SXTW
	0x01E8ED80 LDR X20, [X8 + 0x20]
	0x01E8ED84 LDR X1, [X9]
	0x01E8ED88 MOV X0, X20
	0x01E8ED8C BL 0x21A885C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x254C000
	006 Move W8, [X21+590]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2266000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+590], W8
	018 Compare X19, 0
	019 JumpIfEqual {42}
	020 Move X8, 0x2266000
	021 Move X8, [X8+1448]
	022 Move W21, [X19+16]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W0, W21
	029 Move W1, W20
	030 Move X2, X31
	031 Call Math.Min, X0, X1
	032 Move W1, W0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W2, 0x1505
	037 NotImplemented "Instruction MOVK not yet implemented."
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call HashCodeUtilities.GetHashDeterministicInternal, X0, X1, X2
	041 Return X0
	042 Call 0x1C17F20

Method: System.Int32 WriteStringUtf32NoHash(System.Int32* ptr, System.Int32 maxLength, System.String value)

Disassembly:
	0x01E8ED90 CBNZ X0, 0x1E8EDC0
	0x01E8ED94 LDR W8, [X19 + 0x30]
	0x01E8ED98 LDR X0, [X19 + 0x28]
	0x01E8ED9C ADD W8, W8, 0x1
	0x01E8EDA0 STR W8, [X19 + 0x30]
	0x01E8EDA4 CBZ X0, 0x1E8EDDC
	0x01E8EDA8 LDR W9, [X0 + 0x18]
	0x01E8EDAC CMP W8, W9
	0x01E8EDB0 B.LT 0x1E8ED70
	0x01E8EDB4 MOV W0, W31
	0x01E8EDB8 STR X31, [X19 + 0x28]
	0x01E8EDBC B 0x1E8EDCC
	0x01E8EDC0 MOVZ W0, 0x1
	0x01E8EDC4 STR X20, [X19 + 0x18]
	0x01E8EDC8 STR W0, [X19 + 0x10]
	0x01E8EDCC LDP X20, X19, [X31 + 0x10]
	0x01E8EDD0 LDR X30, [X31], #0x20
	0x01E8EDD4 RET
	0x01E8EDD8 BL 0x1C16F28
	0x01E8EDDC BL 0x1C16F20
	0x01E8EDE0 LDR X0, [X0 + 0x18]
	0x01E8EDE4 RET
	0x01E8EDE8 STP X30, X19, [X31 - 0x10]!
	0x01E8EDEC ADRP X0, 0x2265000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X19, X0
	007 Move X0, X2
	008 Move X1, X31
	009 Move X21, X2
	010 Call String.IsNullOrEmpty, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {17}
	015 Move [X19], W31
	016 Move W0, 4
	017 Add X1, X19, 4
	018 Move X0, X21
	019 Move W2, W20
	020 Move X3, X31
	021 Call UTF32Tools.Convert, X0, X1, X2
	022 Move X8, X0
	023 ShiftRight X8, 32
	024 And X8, X8, 0x7FFFFFFF
	025 Move [X19], W8
	026 Move W8, W8
	027 ShiftRight W8, 30
	028 And W8, W8, 0x1FFFFFFF
	029 Add W0, W8, 4
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Int32 ReadStringUtf32NoHash(System.Int32* ptr, System.Int32 maxLength, out System.String result)

Disassembly:
	0x01E8EDF0 LDR X0, [X0 + 0xB40]
	0x01E8EDF4 BL 0x1C16D08
	0x01E8EDF8 BL 0x1C16F10
	0x01E8EDFC MOV X1, X31
	0x01E8EE00 MOV X19, X0
	0x01E8EE04 BL 0x3380310
	0x01E8EE08 ADRP X0, 0x2270000
	0x01E8EE0C LDR X0, [X0 + 0xC8]
	0x01E8EE10 BL 0x1C16D08
	0x01E8EE14 MOV X1, X0
	0x01E8EE18 MOV X0, X19
	0x01E8EE1C BL 0x1C16DEC
	0x01E8EE20 LDR X0, [X0 + 0x18]
	0x01E8EE24 RET
	0x01E8EE28 STR X30, [X31 - 0x20]!
	0x01E8EE2C STP X20, X19, [X31 + 0x10]
	0x01E8EE30 ADRP X20, 0x254B000
	0x01E8EE34 LDRB W8, [X20 + 0x25E]
	0x01E8EE38 MOV X19, X0
	0x01E8EE3C TBNZ X8, 0x0, 0x1E8EE54
	0x01E8EE40 ADRP X0, 0x2270000
	0x01E8EE44 LDR X0, [X0 + 0x80]
	0x01E8EE48 BL 0x1C16CF4
	0x01E8EE4C MOVZ W8, 0x1
	0x01E8EE50 STRB W8, [X20 + 0x25E]
	0x01E8EE54 LDR W8, [X19 + 0x10]
	0x01E8EE58 ADDS W31, W8, 0x2
	0x01E8EE5C B.NE 0x1E8EE7C
	0x01E8EE60 LDR W20, [X19 + 0x20]
	0x01E8EE64 MOV X0, X31
	0x01E8EE68 BL 0x33C151C
	0x01E8EE6C CMP W20, W0
	0x01E8EE70 B.NE 0x1E8EE7C
	0x01E8EE74 STR W31, [X19 + 0x10]
	0x01E8EE78 B 0x1E8EEA8
	0x01E8EE7C ADRP X8, 0x2270000
	0x01E8EE80 LDR X8, [X8 + 0x80]
	0x01E8EE84 LDR X0, [X8]
	0x01E8EE88 BL 0x1C16F10
	0x01E8EE8C MOV X1, X31
	0x01E8EE90 MOV X19, X0
	0x01E8EE94 BL 0x33BDD8C
	0x01E8EE98 MOV X0, X31
	0x01E8EE9C STR W31, [X19 + 0x10]
	0x01E8EEA0 BL 0x33C151C
	0x01E8EEA4 STR W0, [X19 + 0x20]
	0x01E8EEA8 MOV X0, X19
	0x01E8EEAC LDP X20, X19, [X31 + 0x10]
	0x01E8EEB0 LDR X30, [X31], #0x20
	0x01E8EEB4 RET
	0x01E8EEB8 B 0x1E8EE28
	0x01E8EEBC LDR W8, [X0 + 0x10]
	0x01E8EEC0 CMP W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x254C000
	008 Move X22, 0x2266000
	009 Move W8, [X23+591]
	010 Move X22, [X22+1448]
	011 Move X19, X2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2266000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0x2266000
	022 Move X0, [X0+2440]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+591], W8
	026 Move X0, [X22]
	027 Move W22, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W0, W22
	033 Move W1, W21
	034 Move X2, X31
	035 Call Math.Min, X0, X1
	036 Compare W0, 0
	037 JumpIfEqual {54}
	038 Move W21, W0
	039 Move X0, X31
	040 Add X20, X20, 4
	041 Call Encoding.get_UTF32
	042 Move W21, W21
	043 ShiftRight W21, 30
	044 And W21, W21, 0x1FFFFFFF
	045 Move X4, X0
	046 Move X0, X31
	047 Move X1, X20
	048 Move W2, W31
	049 Move W3, W21
	050 Move X5, X31
	051 Call String.CreateString, X0, X1, X2, X3, X4
	052 Move [X19], X0
	053 Add W0, W21, 4
	054 Move X8, 0x2266000
	055 Move X8, [X8+2440]
	056 Move W0, 4
	057 Move X8, [X8]
	058 Move [X19], X8
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Move X23, [X31+56]
	065 Return X0

Method: System.Int32 WriteStringUtf32WithHash(System.Int32* ptr, System.Int32 maxLength, System.String value, ref System.String cache)

Disassembly:
	0x01E8EEC4 B.EQ 0x1E8EED0
	0x01E8EEC8 ADDS W31, W8, 0x3
	0x01E8EECC B.NE 0x1E8EED4
	0x01E8EED0 B 0x1E8F1EC
	0x01E8EED4 RET
	0x01E8EED8 SUB X31, X31, 0x50
	0x01E8EEDC STP X30, X0, [X31 + 0x10]
	0x01E8EEE0 STP X24, X23, [X31 + 0x20]
	0x01E8EEE4 STP X22, X21, [X31 + 0x30]
	0x01E8EEE8 STP X20, X19, [X31 + 0x40]
	0x01E8EEEC ADRP X19, 0x254B000
	0x01E8EEF0 LDRB W8, [X19 + 0x25F]
	0x01E8EEF4 MOV X20, X0
	0x01E8EEF8 TBNZ X8, 0x0, 0x1E8EF40
	0x01E8EEFC ADRP X0, 0x226F000
	0x01E8EF00 LDR X0, [X0 + 0x9B8]
	0x01E8EF04 BL 0x1C16CF4
	0x01E8EF08 ADRP X0, 0x226F000
	0x01E8EF0C LDR X0, [X0 + 0x9C0]
	0x01E8EF10 BL 0x1C16CF4
	0x01E8EF14 ADRP X0, 0x2265000
	0x01E8EF18 LDR X0, [X0 + 0xE18]
	0x01E8EF1C BL 0x1C16CF4
	0x01E8EF20 ADRP X0, 0x226F000
	0x01E8EF24 LDR X0, [X0 + 0x558]
	0x01E8EF28 BL 0x1C16CF4
	0x01E8EF2C ADRP X0, 0x2265000
	0x01E8EF30 LDR X0, [X0 + 0x6C0]
	0x01E8EF34 BL 0x1C16CF4
	0x01E8EF38 MOVZ W8, 0x1
	0x01E8EF3C STRB W8, [X19 + 0x25F]
	0x01E8EF40 ADD X8, X31, 0x18
	0x01E8EF44 STP X31, X8, [X31]
	0x01E8EF48 LDR W8, [X20 + 0x10]
	0x01E8EF4C CMP W8, 0x1
	0x01E8EF50 B.EQ 0x1E8EFD4
	0x01E8EF54 CBNZ W8, 0x1E8F18C
	0x01E8EF58 MOVN W8, 0x0
	0x01E8EF5C STR W8, [X20 + 0x10]
	0x01E8EF60 BL 0x1E8E358
	0x01E8EF64 MOV X19, X0
	0x01E8EF68 CBZ X0, 0x1E8F144
	0x01E8EF6C ADRP X10, 0x226F000
	0x01E8EF70 LDR X8, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W22, W1
	007 Move X19, X0
	008 Move X0, X2
	009 Move X1, X31
	010 Move X20, X3
	011 Move X21, X2
	012 Call String.IsNullOrEmpty, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {19}
	017 Move [X19], X31
	018 Move W0, 8
	019 Add X1, X19, 8
	020 Move X0, X21
	021 Move W2, W22
	022 Move X3, X31
	023 Call UTF32Tools.Convert, X0, X1, X2
	024 Move X22, X0
	025 ShiftRight X22, 32
	026 And X22, X22, 0x7FFFFFFF
	027 Move [X19], W22
	028 Compare X21, 0
	029 JumpIfEqual {54}
	030 Move W8, [X21+16]
	031 Move X2, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X21
	034 Move W1, W31
	035 Move X3, X31
	036 Call String.Substring, X0, X1, X2
	037 Move X21, X0
	038 Move W1, 0x1505
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 Move X0, X21
	041 Move [X20], X21
	042 Call HashCodeUtilities.GetHashDeterministic, X0, X1
	043 Move W8, W22
	044 ShiftRight W8, 30
	045 And W8, W8, 0x1FFFFFFF
	046 Move [X19+4], W0
	047 Add W0, W8, 8
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return X0
	054 Call 0x1C17F20

Method: System.Int32 ReadStringUtf32WithHash(System.Int32* ptr, System.Int32 maxLength, ref System.String cache)

Disassembly:
	0x01E8EF74 LDR X10, [X10 + 0x9B8]
	0x01E8EF78 LDRH W9, [X8 + 0x12E]
	0x01E8EF7C LDR X1, [X10]
	0x01E8EF80 CBZ X9, 0x1E8EFA4
	0x01E8EF84 LDR X10, [X8 + 0xB0]
	0x01E8EF88 ADD X10, X10, 0x8
	0x01E8EF8C LDUR X11, [X10 - 0x8]
	0x01E8EF90 CMP X11, X1
	0x01E8EF94 B.EQ 0x1E8EFB4
	0x01E8EF98 SUBS X9, X9, 0x1
	0x01E8EF9C ADD X10, X10, 0x10
	0x01E8EFA0 B.NE 0x1E8EF8C
	0x01E8EFA4 MOV X0, X19
	0x01E8EFA8 MOV W2, W31
	0x01E8EFAC BL 0x1C5C788
	0x01E8EFB0 B 0x1E8EFC0
	0x01E8EFB4 LDRSW X9, [X10]
	0x01E8EFB8 ADD X8, X8, X9, 0x4, LSL
	0x01E8EFBC ADD X0, X8, 0x138
	0x01E8EFC0 LDP X8, X1, [X0]
	0x01E8EFC4 MOV X0, X19
	0x01E8EFC8 BLR X8
	0x01E8EFCC LDR X20, [X31 + 0x18]
	0x01E8EFD0 STR X0, [X20 + 0x28]
	0x01E8EFD4 LDR X19, [X20 + 0x28]
	0x01E8EFD8 MOVN W8, 0x2
	0x01E8EFDC STR W8, [X20 + 0x10]
	0x01E8EFE0 CBZ X19, 0x1E8F114
	0x01E8EFE4 ADRP X21, 0x2265000
	0x01E8EFE8 ADRP X22, 0x226F000
	0x01E8EFEC ADRP X23, 0x226F000
	0x01E8EFF0 ADRP X24, 0x2265000
	0x01E8EFF4 LDR X21, [X21 + 0xE18]
	0x01E8EFF8 LDR X22, [X22 + 0x9C0]
	0x01E8EFFC LDR X23, [X23 + 0x558]
	0x01E8F000 LDR X24, [X24 + 0x6C0]
	0x01E8F004 LDR X8, [X19]
	0x01E8F008 LDR X1, [X21]
	0x01E8F00C LDRH W9, [X8 + 0x12E]
	0x01E8F010 CBZ X9, 0x1E8F034
	0x01E8F014 LDR X10, [X8 + 0xB0]
	0x01E8F018 ADD X10, X10, 0x8
	0x01E8F01C LDUR X11, [X10 - 0x8]
	0x01E8F020 CMP X11, X1
	0x01E8F024 B.EQ 0x1E8F044
	0x01E8F028 SUBS X9, X9, 0x1
	0x01E8F02C ADD X10, X10, 0x10
	0x01E8F030 B.NE 0x1E8F01C
	0x01E8F034 MOV X0, X19
	0x01E8F038 MOV W2, W31
	0x01E8F03C BL 0x1C5C788
	0x01E8F040 B 0x1E8F050
	0x01E8F044 LDRSW X9, [X10]
	0x01E8F048 ADD X8, X8, X9, 0x4, LSL
	0x01E8F04C ADD X0, X8, 0x138
	0x01E8F050 LDP X8, X1, [X0]
	0x01E8F054 MOV X0, X19
	0x01E8F058 BLR X8
	0x01E8F05C MOV W8, W0
	0x01E8F060 LDR X0, [X31 + 0x18]
	0x01E8F064 TBZ X8, 0x0, 0x1E8F118
	0x01E8F068 LDR X19, [X0 + 0x28]
	0x01E8F06C CBZ X19, 0x1E8F13C
	0x01E8F070 LDR X8, [X19]
	0x01E8F074 LDR X1, [X22]
	0x01E8F078 LDRH W9, [X8 + 0x12E]
	0x01E8F07C CBZ X9, 0x1E8F0A0
	0x01E8F080 LDR X10, [X8 + 0xB0]
	0x01E8F084 ADD X10, X10, 0x8
	0x01E8F088 LDUR X11, [X10 - 0x8]
	0x01E8F08C CMP X11, X1
	0x01E8F090 B.EQ 0x1E8F0B0
	0x01E8F094 SUBS X9, X9, 0x1
	0x01E8F098 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x254C000
	008 Move X22, 0x2266000
	009 Move W8, [X23+592]
	010 Move X22, [X22+1448]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2266000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0x2266000
	022 Move X0, [X0+2440]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+592], W8
	026 Move X0, [X22]
	027 Move W22, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W0, W22
	033 Move W1, W20
	034 Move X2, X31
	035 Call Math.Min, X0, X1
	036 Move W20, W0
	037 ShiftRight W20, 30
	038 And W20, W20, 0x1FFFFFFF
	039 Compare W0, 0
	040 JumpIfEqual {75}
	041 Move W23, W0
	042 Move X0, [X19]
	043 Add X22, X21, 8
	044 Compare X0, 0
	045 JumpIfEqual {66}
	046 Move W9, [X0+16]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CINC not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction SBFM not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X8, [X0]
	053 Move W21, [X21+4]
	054 Move X9, [X8+344]
	055 Move X1, [X8+352]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, [X19]
	059 Move X1, X22
	060 Move W2, W23
	061 Move W3, W31
	062 Move X4, X31
	063 Call UTF32Tools.CompareOrdinal, X0, X1, X2, X3
	064 Compare W0, 0
	065 JumpIfEqual {79}
	066 Move X0, X31
	067 Call Encoding.get_UTF32
	068 Move X4, X0
	069 Move X0, X31
	070 Move X1, X22
	071 Move W2, W31
	072 Move W3, W20
	073 Move X5, X31
	074 Call String.CreateString, X0, X1, X2, X3, X4
	075 Move X8, 0x2265000
	076 Move X8, [X8+2440]
	077 Move X0, [X8]
	078 Move [X19], X0
	079 Add W0, W20, 8
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 Move X23, [X31+56]
	086 Return X0

Method: System.Int32 GetWordCountString(System.Int32 capacity, System.Boolean withCaching)

Disassembly:
	0x01E8F09C B.NE 0x1E8F088
	0x01E8F0A0 MOV X0, X19
	0x01E8F0A4 MOV W2, W31
	0x01E8F0A8 BL 0x1C5C788
	0x01E8F0AC B 0x1E8F0BC

ISIL:
	001 And W31, W1, 1
	002 Move W8, 1
	003 NotImplemented "Instruction CINC not yet implemented."
	004 Add W0, W8, W0
	005 Return X0

Method: System.Int32 VerifyRawNetworkUnwrap(System.Int32 actual, System.Int32 maxBytes)

Disassembly:
	0x0223E890 ADD X0, X8, 0x138
	0x0223E894 LDP X8, X1, [X0]
	0x0223E898 MOV X0, X21
	0x0223E89C BLR X8
	0x0223E8A0 LDR X8, [X20 + 0x38]
	0x0223E8A4 MOV X22, X0
	0x0223E8A8 LDR X8, [X8 + 0x10]
	0x0223E8AC LDRB W9, [X8 + 0x135]
	0x0223E8B0 TBNZ X9, 0x0, 0x223E8C0
	0x0223E8B4 MOV X0, X8
	0x0223E8B8 BL 0x1C5C684
	0x0223E8BC MOV X8, X0
	0x0223E8C0 MOV X0, X8
	0x0223E8C4 BL 0x1C16F10
	0x0223E8C8 LDR X8, [X20 + 0x38]
	0x0223E8CC MOV X1, X21
	0x0223E8D0 MOV X2, X22
	0x0223E8D4 MOV X23, X0
	0x0223E8D8 LDR X3, [X8 + 0x18]
	0x0223E8DC LDR X8, [X3]
	0x0223E8E0 BLR X8
	0x0223E8E4 CBZ X19, 0x223E90C
	0x0223E8E8 LDR X8, [X20 + 0x38]
	0x0223E8EC MOV X0, X19
	0x0223E8F0 LDP X20, X19, [X31 + 0x20]
	0x0223E8F4 LDP X22, X21, [X31 + 0x10]
	0x0223E8F8 LDR X2, [X8 + 0x20]
	0x0223E8FC MOV X1, X23
	0x0223E900 LDR X3, [X2]
	0x0223E904 LDP X30, X23, [X31], #0x30
	0x0223E908 BR X3
	0x0223E90C BL 0x1C16F20
	0x0223E910 SUB X31, X31, 0x90
	0x0223E914 STP X29, X30, [X31 + 0x30]
	0x0223E918 STP X28, X27, [X31 + 0x40]
	0x0223E91C STP X26, X25, [X31 + 0x50]
	0x0223E920 STP X24, X23, [X31 + 0x60]
	0x0223E924 STP X22, X21, [X31 + 0x70]
	0x0223E928 STP X20, X19, [X31 + 0x80]
	0x0223E92C MOV X27, X1
	0x0223E930 LDR X8, [X27 + 0x38]!
	0x0223E934 MOV X20, X1
	0x0223E938 MOV X19, X0
	0x0223E93C CBNZ X8, 0x223EA5C
	0x0223E940 ADRP X0, 0x1EDE000
	0x0223E944 LDR X0, [X0 + 0x388]
	0x0223E948 BL 0x1C16CF4
	0x0223E94C ADRP X0, 0x1EDE000
	0x0223E950 LDR X0, [X0 + 0x390]
	0x0223E954 BL 0x1C16CF4
	0x0223E958 ADRP X0, 0x1EDE000
	0x0223E95C LDR X0, [X0 + 0x398]
	0x0223E960 BL 0x1C16CF4
	0x0223E964 ADRP X0, 0x1EDE000
	0x0223E968 LDR X0, [X0 + 0x3A0]
	0x0223E96C BL 0x1C16CF4
	0x0223E970 ADRP X0, 0x1EDE000
	0x0223E974 LDR X0, [X0 + 0x3A8]
	0x0223E978 BL 0x1C16CF4
	0x0223E97C ADRP X0, 0x1EDE000
	0x0223E980 LDR X0, [X0 + 0x3B0]
	0x0223E984 BL 0x1C16CF4
	0x0223E988 ADRP X0, 0x1EDE000
	0x0223E98C LDR X0, [X0 + 0x3B8]
	0x0223E990 BL 0x1C16CF4
	0x0223E994 ADRP X0, 0x1EDE000
	0x0223E998 LDR X0, [X0 + 0x3C0]
	0x0223E99C BL 0x1C16CF4
	0x0223E9A0 ADRP X0, 0x1EB5000
	0x0223E9A4 LDR X0, [X0 + 0xE00]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X2+56]
	009 Move X19, X2
	010 Move W21, W1
	011 Move W20, W0
	012 Compare X8, 0
	013 JumpIfNotEqual {16}
	014 Move X0, X19
	015 Call 0x1C5D6E0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W20
	018 Move X20, [X31+48]
	019 Move X19, [X31+56]
	020 Move X22, [X31+32]
	021 Move X21, [X31+40]
	022 Move X30, [X31+16]
	023 Move X23, [X31+24]
	024 Add X31, X31, 64
	025 Return X0
	026 Move X8, [X19+56]
	027 Move X0, 0x1EB6000
	028 Move X22, [X8]
	029 Move X0, [X0+1728]
	030 Call 0x1C17D08
	031 Call 0x19913D0
	032 Move X0, X22
	033 Move X1, X31
	034 Call Type.GetTypeFromHandle, X0
	035 Move X22, X0
	036 Call 0x19913C0
	037 Move X8, [X22]
	038 Move X0, X22
	039 Move X9, [X8+744]
	040 Move X1, [X8+752]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move [X31+12], W21
	043 Move X21, 0x1EB6000
	044 Move X21, [X21+1880]
	045 Move X22, X0
	046 Move X0, X21
	047 Call 0x1C17D08
	048 Add X1, X31, 12
	049 Call 0x1C17E04
	050 Move X23, X0
	051 Move X0, X21
	052 Move [X31+8], W20
	053 Call 0x1C17D08
	054 Add X1, X31, 8
	055 Call 0x1C17E04
	056 Move X20, X0
	057 Move X0, 0x1EDF000
	058 Move X0, [X0+816]
	059 Call 0x1C17D08
	060 Move X1, X22
	061 Move X2, X23
	062 Move X3, X20
	063 Move X4, X31
	064 Call String.Format, X0, X1, X2, X3
	065 Move X20, X0
	066 Move X0, 0x1EB6000
	067 Move X0, [X0+1456]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X1, X20
	071 Move X2, X31
	072 Move X21, X0
	073 Call InvalidOperationException..ctor, X0, X1
	074 Move X0, X21
	075 Move X1, X19
	076 Call 0x1C17DEC

Method: System.Int32 VerifyRawNetworkWrap(System.Int32 actual, System.Int32 maxBytes)

Disassembly:
	0x0223EAC0 ADRP X28, 0x1EB5000
	0x0223EAC4 LDR X28, [X28 + 0x6C0]
	0x0223EAC8 LDR X8, [X27]
	0x0223EACC LDR X0, [X28]
	0x0223EAD0 LDR X21, [X8 + 0x18]
	0x0223EAD4 LDR W9, [X0 + 0xE0]
	0x0223EAD8 CBNZ W9, 0x223EAE0
	0x0223EADC BL 0x1C16DFC
	0x0223EAE0 MOV X0, X21
	0x0223EAE4 MOV X1, X31
	0x0223EAE8 BL 0x338C698
	0x0223EAEC CBZ X0, 0x223F9B0
	0x0223EAF0 MOV X1, X31
	0x0223EAF4 BL 0x3396BF8
	0x0223EAF8 LDR X8, [X28]
	0x0223EAFC LDR X9, [X27]
	0x0223EB00 MOV W21, W0
	0x0223EB04 LDR W10, [X8 + 0xE0]
	0x0223EB08 LDR X22, [X9 + 0x18]
	0x0223EB0C CBNZ W10, 0x223EB18
	0x0223EB10 MOV X0, X8
	0x0223EB14 BL 0x1C16DFC
	0x0223EB18 MOV X0, X22
	0x0223EB1C MOV X1, X31
	0x0223EB20 BL 0x338C698
	0x0223EB24 CBZ X0, 0x223F9B0
	0x0223EB28 LDR X8, [X0]
	0x0223EB2C TBZ X21, 0x0, 0x223EBA4
	0x0223EB30 LDR X9, [X8 + 0x438]
	0x0223EB34 LDR X1, [X8 + 0x440]
	0x0223EB38 BLR X9
	0x0223EB3C CMP W0, 0x1
	0x0223EB40 B.NE 0x223FA7C
	0x0223EB44 ADRP X8, 0x1EBD000
	0x0223EB48 LDR X20, [X19 + 0x40]
	0x0223EB4C LDR X8, [X8 + 0xC60]
	0x0223EB50 MOVZ W1, 0x1
	0x0223EB54 LDR X0, [X8]
	0x0223EB58 BL 0x1C16D6C
	0x0223EB5C LDR X8, [X28]
	0x0223EB60 LDR X9, [X27]
	0x0223EB64 MOV X21, X0
	0x0223EB68 LDR W10, [X8 + 0xE0]
	0x0223EB6C LDR X22, [X9 + 0x18]
	0x0223EB70 CBNZ W10, 0x223EB7C
	0x0223EB74 MOV X0, X8
	0x0223EB78 BL 0x1C16DFC
	0x0223EB7C MOV X0, X22
	0x0223EB80 MOV X1, X31
	0x0223EB84 BL 0x338C698
	0x0223EB88 CBZ X0, 0x223F9B0
	0x0223EB8C LDR X8, [X0]
	0x0223EB90 LDR X9, [X8 + 0x428]
	0x0223EB94 LDR X1, [X8 + 0x430]
	0x0223EB98 BLR X9
	0x0223EB9C CBNZ X21, 0x223ED4C
	0x0223EBA0 B 0x223F9B0
	0x0223EBA4 LDR X9, [X8 + 0x3C8]
	0x0223EBA8 LDR X1, [X8 + 0x3D0]
	0x0223EBAC BLR X9
	0x0223EBB0 TBZ X0, 0x0, 0x223EC30
	0x0223EBB4 LDR X0, [X28]
	0x0223EBB8 LDR X8, [X27]
	0x0223EBBC LDR W9, [X0 + 0xE0]
	0x0223EBC0 LDR X21, [X8 + 0x18]
	0x0223EBC4 CBNZ W9, 0x223EBCC
	0x0223EBC8 BL 0x1C16DFC
	0x0223EBCC MOV X0, X21
	0x0223EBD0 MOV X1, X31
	0x0223EBD4 BL 0x338C698

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X2+56]
	009 Move X19, X2
	010 Move W21, W1
	011 Move W20, W0
	012 Compare X8, 0
	013 JumpIfNotEqual {16}
	014 Move X0, X19
	015 Call 0x1C5D6E0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W20
	018 Move X20, [X31+48]
	019 Move X19, [X31+56]
	020 Move X22, [X31+32]
	021 Move X21, [X31+40]
	022 Move X30, [X31+16]
	023 Move X23, [X31+24]
	024 Add X31, X31, 64
	025 Return X0
	026 Move X8, [X19+56]
	027 Move X0, 0x1EB6000
	028 Move X22, [X8]
	029 Move X0, [X0+1728]
	030 Call 0x1C17D08
	031 Call 0x19913D0
	032 Move X0, X22
	033 Move X1, X31
	034 Call Type.GetTypeFromHandle, X0
	035 Move X22, X0
	036 Call 0x19913C0
	037 Move X8, [X22]
	038 Move X0, X22
	039 Move X9, [X8+744]
	040 Move X1, [X8+752]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move [X31+12], W21
	043 Move X21, 0x1EB6000
	044 Move X21, [X21+1880]
	045 Move X22, X0
	046 Move X0, X21
	047 Call 0x1C17D08
	048 Add X1, X31, 12
	049 Call 0x1C17E04
	050 Move X23, X0
	051 Move X0, X21
	052 Move [X31+8], W20
	053 Call 0x1C17D08
	054 Add X1, X31, 8
	055 Call 0x1C17E04
	056 Move X20, X0
	057 Move X0, 0x1EDF000
	058 Move X0, [X0+824]
	059 Call 0x1C17D08
	060 Move X1, X22
	061 Move X2, X23
	062 Move X3, X20
	063 Move X4, X31
	064 Call String.Format, X0, X1, X2, X3
	065 Move X20, X0
	066 Move X0, 0x1EB6000
	067 Move X0, [X0+1456]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X1, X20
	071 Move X2, X31
	072 Move X21, X0
	073 Call InvalidOperationException..ctor, X0, X1
	074 Move X0, X21
	075 Move X1, X19
	076 Call 0x1C17DEC

