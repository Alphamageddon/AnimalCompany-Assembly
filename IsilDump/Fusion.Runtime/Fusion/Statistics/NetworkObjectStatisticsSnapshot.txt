Type: Fusion.Statistics.NetworkObjectStatisticsSnapshot

Method: System.Int32 get_InPackets()

Disassembly:
	0x01EF2684 LDP X20, X19, [X31 + 0x20]
	0x01EF2688 LDP X30, X23, [X31], #0x30

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_InPackets(System.Int32 value)

Disassembly:
	0x01EF268C RET
	0x01EF2690 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Int32 get_OutPackets()

Disassembly:
	0x01EF2694 STP X22, X21, [X31 + 0x10]
	0x01EF2698 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_OutPackets(System.Int32 value)

Disassembly:
	0x01EF269C ADD W8, W1, 0x7
	0x01EF26A0 ADD W9, W1, 0xE

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.Single get_InBandwidth()

Disassembly:
	0x01EF26A4 CMP W8, 0x0
	0x01EF26A8 CSEL W8, W9, W8, LT

ISIL:
	001 Move V0, [X0+24]
	002 Return V0

Method: System.Void set_InBandwidth(System.Single value)

Disassembly:
	0x01EF26AC SBFM W8, W8, 0x3, 0x1F
	0x01EF26B0 SUB W8, W8, 0x1

ISIL:
	001 Move [X0+24], S0
	002 Return 

Method: System.Single get_OutBandwidth()

Disassembly:
	0x01EF26B4 CMP W8, 0x3
	0x01EF26B8 B.HI 0x1EF26FC

ISIL:
	001 Move V0, [X0+28]
	002 Return V0

Method: System.Void set_OutBandwidth(System.Single value)

Disassembly:
	0x01EF26BC ADRP X9, 0xFFFFFFFFFEC3B000
	0x01EF26C0 ADD X9, X9, 0xC36

ISIL:
	001 Move [X0+28], S0
	002 Return 

Method: System.Void Reset()

Disassembly:
	0x01EF22B4 B 0x1EF22D0
	0x01EF22B8 MOV W8, W31

ISIL:
	001 Move [X0+16], X31
	002 Move [X0+24], X31
	003 Return 

Method: System.Void AddToInPacketsStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF26C4 ADR X10, 0x18
	0x01EF26C8 LDRB W11, [X9, X8, LSL]
	0x01EF26CC ADD X10, X10, X11, 0x2, LSL
	0x01EF26D0 MOV W20, W1
	0x01EF26D4 MOV X21, X0

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+16]
	006 Add W1, W8, W1
	007 Move [X0+16], W1
	008 Return 

Method: System.Void AddToOutPacketsStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF26D8 BR X10
	0x01EF26DC MOV X0, X21
	0x01EF26E0 MOV W1, W20
	0x01EF26E4 BL 0x1EF2210
	0x01EF26E8 MOV W19, W0

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+20]
	006 Add W1, W8, W1
	007 Move [X0+20], W1
	008 Return 

Method: System.Void AddToInBandwidthStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF26EC MOV W8, W31
	0x01EF26F0 MOV W23, W31
	0x01EF26F4 MOV W22, W31
	0x01EF26F8 B 0x1EF27B4
	0x01EF26FC MOV W8, W31

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+24]
	006 Add S0, S1, S0
	007 Move [X0+24], S0
	008 Return 

Method: System.Void AddToOutBandwidthStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF2700 MOV W23, W31
	0x01EF2704 MOV W22, W31
	0x01EF2708 MOV W19, W31
	0x01EF270C B 0x1EF27B4
	0x01EF2710 MOVZ W1, 0x8
	0x01EF2714 MOV X0, X21
	0x01EF2718 BL 0x1EF2210
	0x01EF271C MOV W19, W0
	0x01EF2720 SUB W1, W20, 0x8
	0x01EF2724 MOV X0, X21
	0x01EF2728 BL 0x1EF2210
	0x01EF272C MOV W22, W0
	0x01EF2730 MOV W8, W31
	0x01EF2734 MOV W23, W31
	0x01EF2738 B 0x1EF27B4
	0x01EF273C MOVZ W1, 0x8
	0x01EF2740 MOV X0, X21
	0x01EF2744 BL 0x1EF2210
	0x01EF2748 MOV W19, W0
	0x01EF274C MOVZ W1, 0x8
	0x01EF2750 MOV X0, X21
	0x01EF2754 BL 0x1EF2210
	0x01EF2758 MOV W22, W0
	0x01EF275C SUB W1, W20, 0x10
	0x01EF2760 MOV X0, X21
	0x01EF2764 BL 0x1EF2210
	0x01EF2768 MOV W23, W0
	0x01EF276C MOV W8, W31
	0x01EF2770 B 0x1EF27B4
	0x01EF2774 MOVZ W1, 0x8
	0x01EF2778 MOV X0, X21
	0x01EF277C BL 0x1EF2210
	0x01EF2780 MOV W19, W0
	0x01EF2784 MOVZ W1, 0x8
	0x01EF2788 MOV X0, X21
	0x01EF278C BL 0x1EF2210
	0x01EF2790 MOV W22, W0
	0x01EF2794 MOVZ W1, 0x8
	0x01EF2798 MOV X0, X21
	0x01EF279C BL 0x1EF2210
	0x01EF27A0 MOV W23, W0
	0x01EF27A4 SUB W1, W20, 0x18
	0x01EF27A8 MOV X0, X21
	0x01EF27AC BL 0x1EF2210
	0x01EF27B0 UBFM W8, W0, 0x8, 0x7
	0x01EF27B4 AND W9, W19, 0xFF
	0x01EF27B8 AND W10, W22, 0xFF
	0x01EF27BC AND W11, W23, 0xFF
	0x01EF27C0 LDP X20, X19, [X31 + 0x20]
	0x01EF27C4 LDP X22, X21, [X31 + 0x10]
	0x01EF27C8 ORR W8, W8, W11, 0x10
	0x01EF27CC ORR W8, W8, W9, 0x0
	0x01EF27D0 ORR W0, W8, W10, 0x8
	0x01EF27D4 LDP X30, X23, [X31], #0x30
	0x01EF27D8 RET
	0x01EF27DC MOVZ W2, 0x20
	0x01EF27E0 B 0x1EF2528
	0x01EF27E4 MOVZ W1, 0x20
	0x01EF27E8 B 0x1EF2690
	0x01EF27EC MOVZ W2, 0x20
	0x01EF27F0 B 0x1EF2528
	0x01EF27F4 B 0x1EF2528
	0x01EF27F8 MOVZ W1, 0x20
	0x01EF27FC B 0x1EF2690
	0x01EF2800 B 0x1EF2690
	0x01EF2804 MOVZ W2, 0x20
	0x01EF2808 B 0x1EF2528
	0x01EF280C MOVZ W1, 0x20
	0x01EF2810 B 0x1EF2690
	0x01EF2814 STP X30, X21, [X31 - 0x20]!
	0x01EF2818 STP X20, X19, [X31 + 0x10]
	0x01EF281C MOV X19, X1
	0x01EF2820 SUBS W20, W2, 0x20
	0x01EF2824 MOV X21, X0
	0x01EF2828 B.LE 0x1EF284C
	0x01EF282C MOVZ W2, 0x20
	0x01EF2830 MOV X0, X21
	0x01EF2834 MOV W1, W19
	0x01EF2838 BL 0x1EF2528
	0x01EF283C UBFM X1, X19, 0x20, 0x3F
	0x01EF2840 MOV X0, X21
	0x01EF2844 MOV W2, W20
	0x01EF2848 B 0x1EF2854
	0x01EF284C MOV X0, X21
	0x01EF2850 MOV W1, W19
	0x01EF2854 LDP X20, X19, [X31 + 0x10]
	0x01EF2858 LDP X30, X21, [X31], #0x20
	0x01EF285C B 0x1EF2528
	0x01EF2860 STP X30, X21, [X31 - 0x20]!
	0x01EF2864 STP X20, X19, [X31 + 0x10]
	0x01EF2868 SUBS W20, W1, 0x20
	0x01EF286C MOV X19, X0
	0x01EF2870 B.LE 0x1EF28A0
	0x01EF2874 MOVZ W1, 0x20
	0x01EF2878 MOV X0, X19
	0x01EF287C BL 0x1EF2690
	0x01EF2880 MOV W21, W0
	0x01EF2884 MOV X0, X19
	0x01EF2888 MOV W1, W20
	0x01EF288C BL 0x1EF2690
	0x01EF2890 MOV W8, W0
	0x01EF2894 MOV W0, W21
	0x01EF2898 BFM X0, X8, 0x20, 0x1F
	0x01EF289C B 0x1EF28AC
	0x01EF28A0 MOV X0, X19
	0x01EF28A4 BL 0x1EF2690
	0x01EF28A8 MOV W0, W0
	0x01EF28AC LDP X20, X19, [X31 + 0x10]
	0x01EF28B0 LDP X30, X21, [X31], #0x20
	0x01EF28B4 RET
	0x01EF28B8 STR X30, [X31 - 0x20]!
	0x01EF28BC STP X20, X19, [X31 + 0x10]
	0x01EF28C0 MOVZ W2, 0x20
	0x01EF28C4 MOV X19, X1
	0x01EF28C8 MOV X20, X0
	0x01EF28CC BL 0x1EF2528
	0x01EF28D0 UBFM X1, X19, 0x20, 0x3F
	0x01EF28D4 MOV X0, X20
	0x01EF28D8 LDP X20, X19, [X31 + 0x10]
	0x01EF28DC MOVZ W2, 0x20
	0x01EF28E0 LDR X30, [X31], #0x20
	0x01EF28E4 B 0x1EF2528
	0x01EF28E8 STR X30, [X31 - 0x20]!
	0x01EF28EC STP X20, X19, [X31 + 0x10]
	0x01EF28F0 MOVZ W1, 0x20
	0x01EF28F4 MOV X19, X0
	0x01EF28F8 BL 0x1EF2690
	0x01EF28FC MOV W20, W0
	0x01EF2900 MOVZ W1, 0x20
	0x01EF2904 MOV X0, X19
	0x01EF2908 BL 0x1EF2690
	0x01EF290C MOV W8, W20
	0x01EF2910 LDP X20, X19, [X31 + 0x10]
	0x01EF2914 BFM X8, X0, 0x20, 0x1F
	0x01EF2918 MOV X0, X8
	0x01EF291C LDR X30, [X31], #0x20
	0x01EF2920 RET
	0x01EF2924 B 0x1EF2814
	0x01EF2928 B 0x1EF2860
	0x01EF292C STR X30, [X31 - 0x20]!
	0x01EF2930 STP X20, X19, [X31 + 0x10]
	0x01EF2934 MOVZ W2, 0x20
	0x01EF2938 MOV X19, X1
	0x01EF293C MOV X20, X0
	0x01EF2940 BL 0x1EF2528
	0x01EF2944 UBFM X1, X19, 0x20, 0x3F
	0x01EF2948 MOV X0, X20
	0x01EF294C LDP X20, X19, [X31 + 0x10]
	0x01EF2950 MOVZ W2, 0x20
	0x01EF2954 LDR X30, [X31], #0x20
	0x01EF2958 B 0x1EF2528
	0x01EF295C STR X30, [X31 - 0x20]!
	0x01EF2960 STP X20, X19, [X31 + 0x10]
	0x01EF2964 MOVZ W1, 0x20
	0x01EF2968 MOV X19, X0
	0x01EF296C BL 0x1EF2690
	0x01EF2970 MOV W20, W0
	0x01EF2974 MOVZ W1, 0x20
	0x01EF2978 MOV X0, X19
	0x01EF297C BL 0x1EF2690
	0x01EF2980 MOV W8, W20
	0x01EF2984 LDP X20, X19, [X31 + 0x10]
	0x01EF2988 BFM X8, X0, 0x20, 0x1F
	0x01EF298C MOV X0, X8
	0x01EF2990 LDR X30, [X31], #0x20
	0x01EF2994 RET
	0x01EF2998 STR X30, [X31 - 0x30]!
	0x01EF299C STP X22, X21, [X31 + 0x10]
	0x01EF29A0 STP X20, X19, [X31 + 0x20]
	0x01EF29A4 MOV X19, X0
	0x01EF29A8 LDR X0, [X0 + 0x18]
	0x01EF29AC LDR W1, [X19 + 0x10]
	0x01EF29B0 FMOV W3, S0
	0x01EF29B4 MOVZ W2, 0x8
	0x01EF29B8 UBFM X20, X3, 0x8, 0x3F
	0x01EF29BC UBFM X21, X3, 0x10, 0x3F
	0x01EF29C0 UBFM X22, X3, 0x18, 0x3F
	0x01EF29C4 BL 0x1EF33E0
	0x01EF29C8 LDR W8, [X19 + 0x10]
	0x01EF29CC LDR X0, [X19 + 0x18]
	0x01EF29D0 MOVZ W2, 0x8
	0x01EF29D4 MOV W3, W20
	0x01EF29D8 ADD W1, W8, 0x8
	0x01EF29DC STR W1, [X19 + 0x10]
	0x01EF29E0 BL 0x1EF33E0
	0x01EF29E4 LDR W8, [X19 + 0x10]
	0x01EF29E8 LDR X0, [X19 + 0x18]
	0x01EF29EC MOVZ W2, 0x8
	0x01EF29F0 MOV W3, W21
	0x01EF29F4 ADD W1, W8, 0x8
	0x01EF29F8 STR W1, [X19 + 0x10]
	0x01EF29FC BL 0x1EF33E0
	0x01EF2A00 LDR W8, [X19 + 0x10]
	0x01EF2A04 LDR X0, [X19 + 0x18]
	0x01EF2A08 MOVZ W2, 0x8
	0x01EF2A0C MOV W3, W22
	0x01EF2A10 ADD W1, W8, 0x8
	0x01EF2A14 STR W1, [X19 + 0x10]
	0x01EF2A18 BL 0x1EF33E0
	0x01EF2A1C LDR W8, [X19 + 0x10]
	0x01EF2A20 LDP X22, X21, [X31 + 0x10]
	0x01EF2A24 ADD W8, W8, 0x8
	0x01EF2A28 STR W8, [X19 + 0x10]
	0x01EF2A2C LDP X20, X19, [X31 + 0x20]
	0x01EF2A30 LDR X30, [X31], #0x30
	0x01EF2A34 RET
	0x01EF2A38 FMOV W0, S0
	0x01EF2A3C RET
	0x01EF2A40 STR X30, [X31 - 0x20]!
	0x01EF2A44 STP X20, X19, [X31 + 0x10]
	0x01EF2A48 MOVZ W1, 0x8
	0x01EF2A4C MOV X19, X0
	0x01EF2A50 BL 0x1EF2210
	0x01EF2A54 MOV W20, W0
	0x01EF2A58 MOVZ W1, 0x8
	0x01EF2A5C MOV X0, X19
	0x01EF2A60 BL 0x1EF2210
	0x01EF2A64 AND W8, W0, 0xFF
	0x01EF2A68 MOVZ W1, 0x8
	0x01EF2A6C MOV X0, X19
	0x01EF2A70 BFM W20, W8, 0x18, 0x7
	0x01EF2A74 BL 0x1EF2210
	0x01EF2A78 AND W8, W0, 0xFF
	0x01EF2A7C MOVZ W1, 0x8
	0x01EF2A80 MOV X0, X19
	0x01EF2A84 BFM W20, W8, 0x10, 0x7
	0x01EF2A88 BL 0x1EF2210
	0x01EF2A8C BFM W20, W0, 0x8, 0x7
	0x01EF2A90 FMOV S0, W20
	0x01EF2A94 LDP X20, X19, [X31 + 0x10]
	0x01EF2A98 LDR X30, [X31], #0x20
	0x01EF2A9C RET
	0x01EF2AA0 STR X30, [X31 - 0x50]!
	0x01EF2AA4 STP X26, X25, [X31 + 0x10]
	0x01EF2AA8 STP X24, X23, [X31 + 0x20]
	0x01EF2AAC STP X22, X21, [X31 + 0x30]
	0x01EF2AB0 STP X20, X19, [X31 + 0x40]
	0x01EF2AB4 MOV X19, X0
	0x01EF2AB8 LDR X0, [X0 + 0x18]
	0x01EF2ABC LDR W1, [X19 + 0x10]
	0x01EF2AC0 FMOV X3, D0

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+28]
	006 Add S0, S1, S0
	007 Move [X0+28], S0
	008 Return 
	009 Subtract X31, X31, 80
	010 Move [X31+16], X30
	011 Move [X31+32], X24
	012 Move [X31+40], X23
	013 Move [X31+48], X22
	014 Move [X31+56], X21
	015 Move [X31+64], X20
	016 Move [X31+72], X19
	017 Move X23, 0x24E8000
	018 Move W8, [X23+1493]
	019 Move X19, X3
	020 Move X20, X2
	021 Move X21, X1
	022 Move X22, X0
	023 Compare W8, 0
	024 JumpIfNotEqual {42}
	025 Move X0, 0x220F000
	026 Move X0, [X0+1400]
	027 Call 0x1C17CF4
	028 Move X0, 0x2203000
	029 Move X0, [X0+1136]
	030 Call 0x1C17CF4
	031 Move X0, 0x2206000
	032 Move X0, [X0+192]
	033 Call 0x1C17CF4
	034 Move X0, 0x2205000
	035 Move X0, [X0+3832]
	036 Call 0x1C17CF4
	037 Move X0, 0x2205000
	038 Move X0, [X0+3840]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X23+1493], W8
	042 Move X1, X21
	043 Move [X31+24], X31
	044 Move [X31+8], X31
	045 Call HitboxBuffer.GetClosestTick, X0, X1
	046 Move X8, 0x2203000
	047 Move X8, [X8+1136]
	048 Move W1, W0
	049 Add X0, X31, 0
	050 Move [X31], X31
	051 Move X2, [X8]
	052 Call Nullable`1<Int32>..ctor, X0, X1
	053 Compare X21, 0
	054 JumpIfEqual {144}
	055 Move X8, [X31]
	056 Move X23, X21
	057 Move [X23+32], X8
	058 Move X0, [X22+48]
	059 Compare X0, 0
	060 JumpIfEqual {144}
	061 Move X8, 0x220F000
	062 Move X8, [X8+1400]
	063 Move X1, [X8]
	064 Call HashSet`1<Object>.Clear, X0
	065 Move X24, 0x2205000
	066 Move X24, [X24+3840]
	067 Move X0, X23
	068 Move X1, [X24]
	069 Call Nullable`1<Int32>.get_Value, X0
	070 Move W1, W0
	071 Add X2, X31, 24
	072 Move X0, X22
	073 Call HitboxBuffer.GetClosestSnapshotForTick, X0, X1, X2
	074 Move X23, [X31+24]
	075 Compare X23, 0
	076 JumpIfEqual {144}
	077 Move X2, [X22+48]
	078 Move X0, X23
	079 Move X1, X21
	080 Call HitboxSnapshot.QueryBroadphase, X0, X1, X2
	081 Move W8, [X21+20]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 4
	084 Compare TEMP, 4
	085 JumpIfNotEqual {117}
	086 Move X0, X21
	087 Add X0, X0, 56
	088 Move W8, [X0]
	089 Compare W8, 0
	090 JumpIfEqual {117}
	091 Move W8, [X21+48]
	092 Compare W8, 0
	093 JumpIfEqual {117}
	094 Move X1, [X24]
	095 Call Nullable`1<Int32>.get_Value, X0
	096 Move W1, W0
	097 Add X2, X31, 8
	098 Move X0, X22
	099 Call HitboxBuffer.GetClosestSnapshotForTick, X0, X1, X2
	100 Move X24, [X31+8]
	101 Compare X24, 0
	102 JumpIfEqual {144}
	103 Move X2, [X22+48]
	104 Move X0, X24
	105 Move X1, X21
	106 Call HitboxSnapshot.QueryBroadphase, X0, X1, X2
	107 Move X8, [X21+64]
	108 Compare X8, 0
	109 JumpIfEqual {128}
	110 Move X2, [X22+48]
	111 Move X9, [X8+24]
	112 Move X0, [X8+64]
	113 Move X4, [X8+40]
	114 Move X1, X21
	115 Move X3, X20
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Move X8, [X21+64]
	118 Compare X8, 0
	119 JumpIfEqual {127}
	120 Move X2, [X22+48]
	121 Move X9, [X8+24]
	122 Move X0, [X8+64]
	123 Move X4, [X8+40]
	124 Move X1, X21
	125 Move X3, X20
	126 NotImplemented "Instruction BLR not yet implemented."
	127 Move X24, X31
	128 Move X2, [X22+48]
	129 Move X0, X21
	130 Move X1, X23
	131 Move X3, X20
	132 Move X4, X24
	133 Call HitboxSnapshot.ProcessBroadphaseRootCandidates, X0, X1, X2, X3, X4
	134 Move [X19], X23
	135 Move X20, [X31+64]
	136 Move X19, [X31+72]
	137 Move X22, [X31+48]
	138 Move X21, [X31+56]
	139 Move X24, [X31+32]
	140 Move X23, [X31+40]
	141 Move X30, [X31+16]
	142 Add X31, X31, 80
	143 Return 
	144 Call 0x1C17F20
	145 Subtract X31, X31, 112
	146 Move [X31+64], X30
	147 Move [X31+80], X22
	148 Move [X31+88], X21
	149 Move [X31+96], X20
	150 Move [X31+104], X19
	151 Move X21, 0x24E8000
	152 Move W8, [X21+1494]
	153 Move X20, X2
	154 Move X19, X1
	155 Compare W8, 0
	156 JumpIfNotEqual {174}
	157 Move X0, 0x2209000
	158 Move X0, [X0+2096]
	159 Call 0x1C17CF4
	160 Move X0, 0x2209000
	161 Move X0, [X0+2104]
	162 Call 0x1C17CF4
	163 Move X0, 0x2209000
	164 Move X0, [X0+2112]
	165 Call 0x1C17CF4
	166 Move X0, 0x2209000
	167 Move X0, [X0+2120]
	168 Call 0x1C17CF4
	169 Move X0, 0x220C000
	170 Move X0, [X0+3704]
	171 Call 0x1C17CF4
	172 Move W8, 1
	173 Move [X21+1494], W8
	174 Move [X31+32], X31
	175 Move [X31+40], X31
	176 Move [X31+48], X31
	177 Compare X20, 0
	178 JumpIfEqual {240}
	179 Move X8, 0x2209000
	180 Move X8, [X8+2120]
	181 Move X0, X20
	182 Move X1, [X8]
	183 Add X8, X31, 8
	184 Call HashSet`1<Int32>.GetEnumerator, X0
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 Move X8, [X31+24]
	187 Move X21, 0x2209000
	188 Move X21, [X21+2104]
	189 Move [X31+2], V0
	190 Move [X31+48], X8
	191 Move X22, 0x220C000
	192 Move X22, [X22+3704]
	193 Move X1, [X21]
	194 Add X0, X31, 32
	195 Call Enumerator<Int32>.MoveNext, X0
	196 Move TEMP, X0
	197 And TEMP, TEMP, 1
	198 Compare TEMP, 1
	199 JumpIfNotEqual {227}
	200 Compare X19, 0
	201 JumpIfEqual {239}
	202 Move X8, [X19]
	203 Move W20, [X31+48]
	204 Move X1, [X22]
	205 NotImplemented "Instruction LDRH not yet implemented."
	206 Compare X9, 0
	207 JumpIfEqual {214}
	208 Move X10, [X8+176]
	209 Add X10, X10, 8
	210 NotImplemented "Instruction LDUR not yet implemented."
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Subtract X9, X9, 1
	213 Add X10, X10, 16
	214 Move W2, 2
	215 Move X0, X19
	216 Call 0x1C5D788
	217 Move W9, [X10]
	218 Add W9, W9, 2
	219 Add X8, X8, W9
	220 Add X0, X8, 312
	221 Move X8, [X0]
	222 Move X2, [X0+8]
	223 Move X0, X19
	224 Move W1, W20
	225 NotImplemented "Instruction BLR not yet implemented."
	226 Call HitboxCollider.InitNarrowData, X0
	227 Move X8, 0x2209000
	228 Move X8, [X8+2096]
	229 Add X0, X31, 32
	230 Move X1, [X8]
	231 Call Enumerator<Int32>.Dispose, X0
	232 Move X20, [X31+96]
	233 Move X19, [X31+104]
	234 Move X22, [X31+80]
	235 Move X21, [X31+88]
	236 Move X30, [X31+64]
	237 Add X31, X31, 112
	238 Return 
	239 Call 0x1C17F20
	240 Call 0x1C17F20
	241 Move X19, X0
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Move X0, X19
	244 Call 0x3EB2AD0
	245 Move X20, [X0]
	246 Call 0x3EB2AE0
	247 Move X8, 0x2209000
	248 Move X8, [X8+2096]
	249 Add X0, X31, 32
	250 Move X1, [X8]
	251 Call Enumerator<Int32>.Dispose, X0
	252 Compare X20, 0
	253 JumpIfEqual {232}
	254 Move X0, X20
	255 Call 0x1C17F18
	256 Move X20, X31
	257 Move X19, X0
	258 Move X8, 0x2209000
	259 Move X8, [X8+2096]
	260 Move X1, [X8]
	261 Add X0, X31, 32
	262 Call Enumerator<Int32>.Dispose, X0
	263 Compare X20, 0
	264 JumpIfNotEqual {267}
	265 Move X0, X19
	266 Call 0x1D2D690
	267 Move X0, X20
	268 Call 0x1C17F18
	269 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x01EF20DC MOV X1, X31
	0x01EF20E0 BL 0x1E34CBC

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

