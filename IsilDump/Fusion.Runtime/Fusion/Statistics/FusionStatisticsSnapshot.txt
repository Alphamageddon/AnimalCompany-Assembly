Type: Fusion.Statistics.FusionStatisticsSnapshot

Method: System.Void ClearSnapshot()

Disassembly:
	0x01EF1930 BL 0x1C16CF4
	0x01EF1934 ADRP X0, 0x2209000
	0x01EF1938 LDR X0, [X0 + 0x848]
	0x01EF193C BL 0x1C16CF4
	0x01EF1940 ADRP X0, 0x220C000

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X0+80], V0
	003 Move [X0+88], V0
	004 Move [X0+48], V0
	005 Move [X0+56], V0
	006 Move [X0+16], V0
	007 Move [X0+24], V0
	008 Return 

Method: System.Void CopyFrom(Fusion.Statistics.FusionStatisticsSnapshot snapshot)

Disassembly:
	0x01EF1944 LDR X0, [X0 + 0xE78]
	0x01EF1948 BL 0x1C16CF4
	0x01EF194C MOVZ W8, 0x1
	0x01EF1950 STRB W8, [X21 + 0x5D6]
	0x01EF1954 STP X31, X31, [X31 + 0x20]
	0x01EF1958 STR X31, [X31 + 0x30]
	0x01EF195C CBZ X20, 0x1EF1A44
	0x01EF1960 ADRP X8, 0x2209000
	0x01EF1964 LDR X8, [X8 + 0x848]
	0x01EF1968 MOV X0, X20
	0x01EF196C LDR X1, [X8]
	0x01EF1970 ADD X8, X31, 0x8
	0x01EF1974 BL 0x2DAAA30
	0x01EF1978 LDUR V0, [X31 + 0x8]
	0x01EF197C LDR X8, [X31 + 0x18]
	0x01EF1980 ADRP X21, 0x2209000
	0x01EF1984 LDR X21, [X21 + 0x838]
	0x01EF1988 STR V0, [X31 + 0x2]
	0x01EF198C STR X8, [X31 + 0x30]
	0x01EF1990 ADRP X22, 0x220C000
	0x01EF1994 LDR X22, [X22 + 0xE78]
	0x01EF1998 LDR X1, [X21]
	0x01EF199C ADD X0, X31, 0x20

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {24}
	004 Move V0, [X1+1]
	005 Move [X0+1], V0
	006 Move V0, [X1+2]
	007 Move [X0+2], V0
	008 Move V0, [X1+48]
	009 Move [X0+48], S0
	010 NotImplemented "Instruction LDUR not yet implemented."
	011 Move [X0+52], V0
	012 NotImplemented "Instruction LDUR not yet implemented."
	013 Move [X0+68], V0
	014 Move V0, [X1+84]
	015 Move [X0+84], S0
	016 Move W8, [X1+88]
	017 Move [X0+88], W8
	018 NotImplemented "Instruction LDUR not yet implemented."
	019 Move [X0+92], V0
	020 Move V0, [X1+108]
	021 Move [X0+108], S0
	022 Move X30, [X31+16]
	023 Return 
	024 Call 0x1C17F20

Method: System.Int32 get_Resimulations()

Disassembly:
	0x01EF19A0 BL 0x2BBDA6C
	0x01EF19A4 TBZ X0, 0x0, 0x1EF1A18

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Resimulations(System.Int32 value)

Disassembly:
	0x01EF19A8 CBZ X19, 0x1EF1A40
	0x01EF19AC LDR X8, [X19]

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Int32 get_ForwardTicks()

Disassembly:
	0x01EF19B0 LDR W20, [X31 + 0x30]
	0x01EF19B4 LDR X1, [X22]

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_ForwardTicks(System.Int32 value)

Disassembly:
	0x01EF19B8 LDRH W9, [X8 + 0x12E]
	0x01EF19BC CBZ X9, 0x1EF19E0

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.Int32 get_InPackets()

Disassembly:
	0x01EF19C0 LDR X10, [X8 + 0xB0]
	0x01EF19C4 ADD X10, X10, 0x8

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_InPackets(System.Int32 value)

Disassembly:
	0x01EF19C8 LDUR X11, [X10 - 0x8]
	0x01EF19CC CMP X11, X1

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.Int32 get_OutPackets()

Disassembly:
	0x01EF19D0 B.EQ 0x1EF19F0
	0x01EF19D4 SUBS X9, X9, 0x1

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Void set_OutPackets(System.Int32 value)

Disassembly:
	0x01EF19D8 ADD X10, X10, 0x10
	0x01EF19DC B.NE 0x1EF19C8

ISIL:
	001 Move [X0+28], W1
	002 Return 

Method: System.Single get_InBandwidth()

Disassembly:
	0x01EF19E0 MOVZ W2, 0x2
	0x01EF19E4 MOV X0, X19

ISIL:
	001 Move V0, [X0+32]
	002 Return V0

Method: System.Void set_InBandwidth(System.Single value)

Disassembly:
	0x01EF19E8 BL 0x1C5C788
	0x01EF19EC B 0x1EF1A00

ISIL:
	001 Move [X0+32], S0
	002 Return 

Method: System.Single get_OutBandwidth()

Disassembly:
	0x01EF19F0 LDR W9, [X10]
	0x01EF19F4 ADD W9, W9, 0x2

ISIL:
	001 Move V0, [X0+36]
	002 Return V0

Method: System.Void set_OutBandwidth(System.Single value)

Disassembly:
	0x01EF19F8 ADD X8, X8, W9, 0x4, SXTW
	0x01EF19FC ADD X0, X8, 0x138

ISIL:
	001 Move [X0+36], S0
	002 Return 

Method: System.Single get_RoundTripTime()

Disassembly:
	0x01EF1A00 LDP X8, X2, [X0]
	0x01EF1A04 MOV X0, X19

ISIL:
	001 Move V0, [X0+40]
	002 Return V0

Method: System.Void set_RoundTripTime(System.Single value)

Disassembly:
	0x01EF1A08 MOV W1, W20
	0x01EF1A0C BLR X8

ISIL:
	001 Move [X0+40], S0
	002 Return 

Method: System.Single get_InputInBandwidth()

Disassembly:
	0x01EF1A10 BL 0x1EEBDFC
	0x01EF1A14 B 0x1EF1998

ISIL:
	001 Move V0, [X0+44]
	002 Return V0

Method: System.Void set_InputInBandwidth(System.Single value)

Disassembly:
	0x01EF1A18 ADRP X8, 0x2209000
	0x01EF1A1C LDR X8, [X8 + 0x830]

ISIL:
	001 Move [X0+44], S0
	002 Return 

Method: System.Single get_InputOutBandwidth()

Disassembly:
	0x01EF1A20 ADD X0, X31, 0x20
	0x01EF1A24 LDR X1, [X8]

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_InputOutBandwidth(System.Single value)

Disassembly:
	0x01EF1A28 BL 0x2BBDA68
	0x01EF1A2C LDP X20, X19, [X31 + 0x60]

ISIL:
	001 Move [X0+48], S0
	002 Return 

Method: System.Int32 get_InObjectUpdates()

Disassembly:
	0x01EF1A30 LDP X22, X21, [X31 + 0x50]
	0x01EF1A34 LDR X30, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_InObjectUpdates(System.Int32 value)

Disassembly:
	0x01EF1A38 ADD X31, X31, 0x70
	0x01EF1A3C RET

ISIL:
	001 Move [X0+52], W1
	002 Return 

Method: System.Int32 get_OutObjectUpdates()

Disassembly:
	0x01EF1A40 BL 0x1C16F20
	0x01EF1A44 BL 0x1C16F20

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_OutObjectUpdates(System.Int32 value)

Disassembly:
	0x01EF1A48 B 0x1EF1A50
	0x01EF1A4C B 0x1EF1A50

ISIL:
	001 Move [X0+56], W1
	002 Return 

Method: System.Int32 get_ObjectsAllocMemoryUsedInBytes()

Disassembly:
	0x01EF1A50 MOV X19, X0
	0x01EF1A54 CMP W1, 0x1

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void set_ObjectsAllocMemoryUsedInBytes(System.Int32 value)

Disassembly:
	0x01EF1A58 B.NE 0x1EF1A8C
	0x01EF1A5C MOV X0, X19

ISIL:
	001 Move [X0+60], W1
	002 Return 

Method: System.Int32 get_GeneralAllocMemoryUsedInBytes()

Disassembly:
	0x01EF1A60 BL 0x3EB1AD0
	0x01EF1A64 LDR X20, [X0]

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_GeneralAllocMemoryUsedInBytes(System.Int32 value)

Disassembly:
	0x01EF1A68 BL 0x3EB1AE0
	0x01EF1A6C ADRP X8, 0x2209000

ISIL:
	001 Move [X0+64], W1
	002 Return 

Method: System.Int32 get_ObjectsAllocMemoryFreeInBytes()

Disassembly:
	0x01EF1A70 LDR X8, [X8 + 0x830]
	0x01EF1A74 ADD X0, X31, 0x20

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: System.Void set_ObjectsAllocMemoryFreeInBytes(System.Int32 value)

Disassembly:
	0x01EF1A78 LDR X1, [X8]
	0x01EF1A7C BL 0x2BBDA68

ISIL:
	001 Move [X0+68], W1
	002 Return 

Method: System.Int32 get_GeneralAllocMemoryFreeInBytes()

Disassembly:
	0x01EF1A80 CBZ X20, 0x1EF1A2C
	0x01EF1A84 MOV X0, X20

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_GeneralAllocMemoryFreeInBytes(System.Int32 value)

Disassembly:
	0x01EF1A88 BL 0x1C16F18
	0x01EF1A8C MOV X20, X31

ISIL:
	001 Move [X0+72], W1
	002 Return 

Method: System.Int32 get_WordsWrittenCount()

Disassembly:
	0x01EF1A90 B 0x1EF1A98
	0x01EF1A94 MOV X19, X0

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_WordsWrittenCount(System.Int32 value)

Disassembly:
	0x01EF1A98 ADRP X8, 0x2209000
	0x01EF1A9C LDR X8, [X8 + 0x830]

ISIL:
	001 Move [X0+76], W1
	002 Return 

Method: System.Int32 get_WordsReadCount()

Disassembly:
	0x01EF1AA0 LDR X1, [X8]
	0x01EF1AA4 ADD X0, X31, 0x20

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_WordsReadCount(System.Int32 value)

Disassembly:
	0x01EF1AA8 BL 0x2BBDA68
	0x01EF1AAC CBNZ X20, 0x1EF1AB8

ISIL:
	001 Move [X0+80], W1
	002 Return 

Method: System.Int32 get_WordsWrittenSize()

Disassembly:
	0x01EF1AB0 MOV X0, X19
	0x01EF1AB4 BL 0x1D2C690
	0x01EF1AB8 MOV X0, X20

ISIL:
	001 Move W8, [X0+76]
	002 Move W0, W8
	003 ShiftRight W0, 30
	004 And W0, W0, 0x1FFFFFFF
	005 Return X0

Method: System.Int32 get_WordsReadSize()

Disassembly:
	0x01EF1ABC BL 0x1C16F18
	0x01EF1AC0 BL 0x1990590
	0x01EF1AC4 MOV X1, X31

ISIL:
	001 Move W8, [X0+80]
	002 Move W0, W8
	003 ShiftRight W0, 30
	004 And W0, W0, 0x1FFFFFFF
	005 Return X0

Method: System.Void AddToResimulationStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1AC8 B 0x33A51F0
	0x01EF1ACC MOV X1, X31
	0x01EF1AD0 B 0x33A51F0
	0x01EF1AD4 MOV X1, X31
	0x01EF1AD8 B 0x33A51F0

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+16]
	006 Add W1, W8, W1
	007 Move [X0+16], W1
	008 Return 

Method: System.Void AddToForwardTicksStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1ADC MOV X1, X31
	0x01EF1AE0 B 0x33BDD8C
	0x01EF1AE4 LDR W0, [X0 + 0x14]
	0x01EF1AE8 RET
	0x01EF1AEC STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+20]
	006 Add W1, W8, W1
	007 Move [X0+20], W1
	008 Return 

Method: System.Void AddToInPacketsStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1AF0 STP X20, X19, [X31 + 0x10]
	0x01EF1AF4 ADRP X21, 0x24E8000
	0x01EF1AF8 LDRB W8, [X21 + 0x5D8]
	0x01EF1AFC MOV W20, W1
	0x01EF1B00 MOV X19, X0

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+24]
	006 Add W1, W8, W1
	007 Move [X0+24], W1
	008 Return 

Method: System.Void AddToOutPacketsStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B04 TBNZ X8, 0x0, 0x1EF1B1C
	0x01EF1B08 ADRP X0, 0x2209000
	0x01EF1B0C LDR X0, [X0 + 0xC68]
	0x01EF1B10 BL 0x1C16CF4
	0x01EF1B14 MOVZ W8, 0x1

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+28]
	006 Add W1, W8, W1
	007 Move [X0+28], W1
	008 Return 

Method: System.Void AddToInBandwidthStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B18 STRB W8, [X21 + 0x5D8]
	0x01EF1B1C LDR X21, [X19 + 0x18]
	0x01EF1B20 CBZ X21, 0x1EF1B64
	0x01EF1B24 ADRP X8, 0x2209000
	0x01EF1B28 LDR X8, [X8 + 0xC68]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+32]
	006 Add S0, S1, S0
	007 Move [X0+32], S0
	008 Return 

Method: System.Void AddToOutBandwidthStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B2C LDR X0, [X8]
	0x01EF1B30 LDR W8, [X0 + 0xE0]
	0x01EF1B34 CBNZ W8, 0x1EF1B3C
	0x01EF1B38 BL 0x1C16DFC
	0x01EF1B3C LDR W8, [X21 + 0x18]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+36]
	006 Add S0, S1, S0
	007 Move [X0+36], S0
	008 Return 

Method: System.Void AddToRoundTripTimeStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B40 MOV W0, W20
	0x01EF1B44 MOV W1, W31
	0x01EF1B48 MOV X3, X31
	0x01EF1B4C UBFM W2, W8, 0x1D, 0x1C
	0x01EF1B50 BL 0x1E35134

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+40]
	006 Add S0, S1, S0
	007 Move [X0+40], S0
	008 Return 

Method: System.Void AddToInputInBandwidthStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B54 STR W0, [X19 + 0x14]
	0x01EF1B58 LDP X20, X19, [X31 + 0x10]
	0x01EF1B5C LDP X30, X21, [X31], #0x20
	0x01EF1B60 RET
	0x01EF1B64 BL 0x1C16F20

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+44]
	006 Add S0, S1, S0
	007 Move [X0+44], S0
	008 Return 

Method: System.Void AddToInputOutBandwidthStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B68 LDR W0, [X0 + 0x10]
	0x01EF1B6C RET
	0x01EF1B70 STR X30, [X31 - 0x30]!
	0x01EF1B74 STP X22, X21, [X31 + 0x10]
	0x01EF1B78 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+48]
	006 Add S0, S1, S0
	007 Move [X0+48], S0
	008 Return 

Method: System.Void AddToInObjectUpdatesStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B7C ADRP X22, 0x24E8000
	0x01EF1B80 ADRP X21, 0x2209000
	0x01EF1B84 LDRB W8, [X22 + 0x5D9]
	0x01EF1B88 LDR X21, [X21 + 0xC68]
	0x01EF1B8C MOV W20, W1

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+52]
	006 Add W1, W8, W1
	007 Move [X0+52], W1
	008 Return 

Method: System.Void AddToOutObjectUpdatesStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1B90 MOV X19, X0
	0x01EF1B94 TBNZ X8, 0x0, 0x1EF1BAC
	0x01EF1B98 ADRP X0, 0x2209000
	0x01EF1B9C LDR X0, [X0 + 0xC68]
	0x01EF1BA0 BL 0x1C16CF4

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+56]
	006 Add W1, W8, W1
	007 Move [X0+56], W1
	008 Return 

Method: System.Void AddToObjectsAllocMemoryUsedInBytesStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1BA4 MOVZ W8, 0x1
	0x01EF1BA8 STRB W8, [X22 + 0x5D9]
	0x01EF1BAC LDR X0, [X21]
	0x01EF1BB0 LDR W21, [X19 + 0x14]
	0x01EF1BB4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+60]
	006 Add W1, W8, W1
	007 Move [X0+60], W1
	008 Return 

Method: System.Void AddToGeneralAllocMemoryUsedInBytesStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1BB8 CBNZ W8, 0x1EF1BC0
	0x01EF1BBC BL 0x1C16DFC
	0x01EF1BC0 MOV W0, W20
	0x01EF1BC4 MOV W1, W31
	0x01EF1BC8 MOV W2, W21

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+64]
	006 Add W1, W8, W1
	007 Move [X0+64], W1
	008 Return 

Method: System.Void AddToObjectsAllocMemoryFreeInBytesStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1BCC MOV X3, X31
	0x01EF1BD0 BL 0x1E35134
	0x01EF1BD4 STR W0, [X19 + 0x10]
	0x01EF1BD8 LDP X20, X19, [X31 + 0x20]
	0x01EF1BDC LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+68]
	006 Add W1, W8, W1
	007 Move [X0+68], W1
	008 Return 

Method: System.Void AddToGeneralAllocMemoryFreeInBytesStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1BE0 LDR X30, [X31], #0x30
	0x01EF1BE4 RET
	0x01EF1BE8 STP X30, X21, [X31 - 0x20]!
	0x01EF1BEC STP X20, X19, [X31 + 0x10]
	0x01EF1BF0 ADRP X21, 0x24E8000

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+72]
	006 Add W1, W8, W1
	007 Move [X0+72], W1
	008 Return 

Method: System.Void AddToWordsWrittenCountStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1BF4 ADRP X20, 0x2209000
	0x01EF1BF8 LDRB W8, [X21 + 0x5DA]
	0x01EF1BFC LDR X20, [X20 + 0xC68]
	0x01EF1C00 MOV X19, X0
	0x01EF1C04 TBNZ X8, 0x0, 0x1EF1C1C

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+76]
	006 Add W1, W8, W1
	007 Move [X0+76], W1
	008 Return 

Method: System.Void AddToWordsReadCountStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1C08 ADRP X0, 0x2209000
	0x01EF1C0C LDR X0, [X0 + 0xC68]
	0x01EF1C10 BL 0x1C16CF4
	0x01EF1C14 MOVZ W8, 0x1
	0x01EF1C18 STRB W8, [X21 + 0x5DA]

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+80]
	006 Add W1, W8, W1
	007 Move [X0+80], W1
	008 Return 

Method: System.Single get_InputReceiveDelta()

Disassembly:
	0x01EF1C1C LDR X0, [X20]
	0x01EF1C20 LDR W19, [X19 + 0x10]

ISIL:
	001 Move V0, [X0+84]
	002 Return V0

Method: System.Void set_InputReceiveDelta(System.Single value)

Disassembly:
	0x01EF1C24 LDR W8, [X0 + 0xE0]
	0x01EF1C28 CBNZ W8, 0x1EF1C30

ISIL:
	001 Move [X0+84], S0
	002 Return 

Method: System.Int32 get_TimeResets()

Disassembly:
	0x01EF1C2C BL 0x1C16DFC
	0x01EF1C30 MOV W0, W19

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Void set_TimeResets(System.Int32 value)

Disassembly:
	0x01EF1C34 LDP X20, X19, [X31 + 0x10]
	0x01EF1C38 MOV X1, X31

ISIL:
	001 Move [X0+88], W1
	002 Return 

Method: System.Single get_StateReceiveDelta()

Disassembly:
	0x01EF1C3C LDP X30, X21, [X31], #0x20
	0x01EF1C40 B 0x1E34CBC

ISIL:
	001 Move V0, [X0+92]
	002 Return V0

Method: System.Void set_StateReceiveDelta(System.Single value)

Disassembly:
	0x01EF1C44 LDRB W8, [X0 + 0x10]
	0x01EF1C48 ANDS W31, W8, 0x7

ISIL:
	001 Move [X0+92], S0
	002 Return 

Method: System.Single get_SimulationTimeOffset()

Disassembly:
	0x01EF1C4C CSET W0, EQ
	0x01EF1C50 RET

ISIL:
	001 Move V0, [X0+96]
	002 Return V0

Method: System.Void set_SimulationTimeOffset(System.Single value)

Disassembly:
	0x01EF1C54 STR X30, [X31 - 0x10]!
	0x01EF1C58 LDR X8, [X0 + 0x18]

ISIL:
	001 Move [X0+96], S0
	002 Return 

Method: System.Single get_SimulationSpeed()

Disassembly:
	0x01EF1C5C CBZ X8, 0x1EF1C6C
	0x01EF1C60 LDR W0, [X8 + 0x18]

ISIL:
	001 Move V0, [X0+100]
	002 Return V0

Method: System.Void set_SimulationSpeed(System.Single value)

Disassembly:
	0x01EF1C64 LDR X30, [X31], #0x10
	0x01EF1C68 RET

ISIL:
	001 Move [X0+100], S0
	002 Return 

Method: System.Single get_InterpolationOffset()

Disassembly:
	0x01EF1C6C BL 0x1C16F20
	0x01EF1C70 LDP W8, W9, [X0 + 0x10]

ISIL:
	001 Move V0, [X0+104]
	002 Return V0

Method: System.Void set_InterpolationOffset(System.Single value)

Disassembly:
	0x01EF1C74 CMP W8, W9
	0x01EF1C78 CSET W0, EQ

ISIL:
	001 Move [X0+104], S0
	002 Return 

Method: System.Single get_InterpolationSpeed()

Disassembly:
	0x01EF1C7C RET
	0x01EF1C80 LDP W8, W9, [X0 + 0x10]

ISIL:
	001 Move V0, [X0+108]
	002 Return V0

Method: System.Void set_InterpolationSpeed(System.Single value)

Disassembly:
	0x01EF1C84 CMP W8, W9
	0x01EF1C88 CSET W0, GT

ISIL:
	001 Move [X0+108], S0
	002 Return 

Method: System.Void AddToInputReceiveDeltaStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1C8C RET
	0x01EF1C90 LDRB W0, [X0 + 0x20]
	0x01EF1C94 RET
	0x01EF1C98 AND W8, W1, 0x1
	0x01EF1C9C STRB W8, [X0 + 0x20]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+84]
	006 Add S0, S1, S0
	007 Move [X0+84], S0
	008 Return 

Method: System.Void AddToTimeResetsStat(System.Int32 value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1CA0 RET
	0x01EF1CA4 LDRB W8, [X0 + 0x20]
	0x01EF1CA8 CMP W8, 0x0
	0x01EF1CAC CSET W0, EQ
	0x01EF1CB0 RET

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move W8, [X0+88]
	006 Add W1, W8, W1
	007 Move [X0+88], W1
	008 Return 

Method: System.Void AddToStateReceiveDeltaStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1CB4 ORN W8, W31, W1, 0x0
	0x01EF1CB8 AND W8, W8, 0x1
	0x01EF1CBC STRB W8, [X0 + 0x20]
	0x01EF1CC0 RET
	0x01EF1CC4 LDR X0, [X0 + 0x18]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+92]
	006 Add S0, S1, S0
	007 Move [X0+92], S0
	008 Return 

Method: System.Void AddToSimulationTimeOffsetStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1CC8 RET
	0x01EF1CCC STP X30, X21, [X31 - 0x20]!
	0x01EF1CD0 STP X20, X19, [X31 + 0x10]
	0x01EF1CD4 ADRP X20, 0x24E8000
	0x01EF1CD8 ADRP X21, 0x2202000

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+96]
	006 Add S0, S1, S0
	007 Move [X0+96], S0
	008 Return 

Method: System.Void AddToSimulationSpeedStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1CDC LDRB W8, [X20 + 0x5DB]
	0x01EF1CE0 LDR X21, [X21 + 0x618]
	0x01EF1CE4 MOV X19, X0
	0x01EF1CE8 TBNZ X8, 0x0, 0x1EF1D00
	0x01EF1CEC ADRP X0, 0x2202000

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+100]
	006 Add S0, S1, S0
	007 Move [X0+100], S0
	008 Return 

Method: System.Void AddToInterpolationOffsetStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1CF0 LDR X0, [X0 + 0x618]
	0x01EF1CF4 BL 0x1C16CF4
	0x01EF1CF8 MOVZ W8, 0x1
	0x01EF1CFC STRB W8, [X20 + 0x5DB]
	0x01EF1D00 LDR X0, [X21]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+104]
	006 Add S0, S1, S0
	007 Move [X0+104], S0
	008 Return 

Method: System.Void AddToInterpolationSpeedStat(System.Single value, System.Boolean overrideValue = False)

Disassembly:
	0x01EF1D04 MOV W1, W31
	0x01EF1D08 BL 0x1C16D6C
	0x01EF1D0C MOV X1, X0
	0x01EF1D10 MOV X0, X19
	0x01EF1D14 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {7}
	005 Move V1, [X0+108]
	006 Add S0, S1, S0
	007 Move [X0+108], S0
	008 Return 

Method: System.Void .ctor()

Disassembly:
	0x01EF17FC BL 0x1EEB8C4
	0x01EF1800 LDR X23, [X31 + 0x18]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

