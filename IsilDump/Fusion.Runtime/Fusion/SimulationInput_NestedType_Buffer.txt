Type: Fusion.SimulationInput/Buffer

Method: System.Int32 get_Count()

Disassembly:
	0x01ED9C40 LDP X20, X19, [X31 + 0x50]
	0x01ED9C44 LDP X22, X21, [X31 + 0x40]
	0x01ED9C48 LDR X30, [X31 + 0x30]
	0x01ED9C4C ADD X31, X31, 0x60
	0x01ED9C50 RET
	0x01ED9C54 BL 0x1C16F20
	0x01ED9C58 BL 0x3EB1B20
	0x01ED9C5C STR X30, [X31 - 0x30]!
	0x01ED9C60 STP X22, X21, [X31 + 0x10]
	0x01ED9C64 STP X20, X19, [X31 + 0x20]
	0x01ED9C68 ADRP X21, 0x2500000
	0x01ED9C6C ADRP X22, 0x2227000
	0x01ED9C70 LDRB W8, [X21 + 0x544]
	0x01ED9C74 LDR X22, [X22 + 0x170]
	0x01ED9C78 MOV X19, X1
	0x01ED9C7C MOV X20, X0
	0x01ED9C80 TBNZ X8, 0x0, 0x1ED9C98
	0x01ED9C84 ADRP X0, 0x2227000
	0x01ED9C88 LDR X0, [X0 + 0x170]
	0x01ED9C8C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2501000
	005 Move W8, [X20+1324]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2227000
	012 Move X0, [X0+3624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1324], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x2227000
	020 Move X8, [X8+3624]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call Dictionary`2<Tick, Object>.get_Count, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Boolean get_Full()

Disassembly:
	0x01ECF0BC MOV X20, X0
	0x01ECF0C0 LDR X0, [X21]
	0x01ECF0C4 CBZ X0, 0x1ECF0D8
	0x01ECF0C8 LDR X8, [X20]
	0x01ECF0CC LDR X1, [X8 + 0x40]
	0x01ECF0D0 BL 0x1C16E00
	0x01ECF0D4 CBZ X0, 0x1ECF3AC
	0x01ECF0D8 LDR W8, [X20 + 0x18]
	0x01ECF0DC CBZ W8, 0x1ECF3A8
	0x01ECF0E0 LDR X8, [X21]
	0x01ECF0E4 ADRP X22, 0x2225000
	0x01ECF0E8 LDR X22, [X22 + 0x9D8]
	0x01ECF0EC ADD X1, X31, 0x1C
	0x01ECF0F0 STR X8, [X20 + 0x20]
	0x01ECF0F4 LDRB W8, [X19]
	0x01ECF0F8 LDR X0, [X22]
	0x01ECF0FC STRB W8, [X31 + 0x1C]
	0x01ECF100 BL 0x1C16E04
	0x01ECF104 MOV X21, X0
	0x01ECF108 CBZ X0, 0x1ECF120
	0x01ECF10C LDR X8, [X20]
	0x01ECF110 MOV X0, X21
	0x01ECF114 LDR X1, [X8 + 0x40]
	0x01ECF118 BL 0x1C16E00

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x250B000
	005 Move W8, [X20+1325]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2231000
	012 Move X0, [X0+3624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1325], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {30}
	019 Move X8, 0x2231000
	020 Move X8, [X8+3624]
	021 Move X1, [X8]
	022 Call Dictionary`2<Tick, Object>.get_Count, X0
	023 Move W8, [X19+24]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Move X30, [X31+32]
	029 Return X0
	030 Call 0x1C17F20

Method: System.Void .ctor(Fusion.NetworkProjectConfig cfg)

Disassembly:
	0x01ECCFBC LDR W1, [X8]
	0x01ECCFC0 ADD X2, X31, 0x8
	0x01ECCFC4 BL 0x1ECD1C4
	0x01ECCFC8 TBZ X0, 0x0, 0x1ECCFDC
	0x01ECCFCC LDR X0, [X19 + 0x98]
	0x01ECCFD0 CBZ X0, 0x1ECD098
	0x01ECCFD4 LDR X1, [X31 + 0x8]
	0x01ECCFD8 BL 0x1ECD2E4
	0x01ECCFDC ADD W22, W22, 0x1
	0x01ECCFE0 CMP W20, W22
	0x01ECCFE4 B.NE 0x1ECCF58
	0x01ECCFE8 MOV X0, X19
	0x01ECCFEC MOV X1, X31
	0x01ECCFF0 BL 0x1EC0810
	0x01ECCFF4 CMP W0, 0x1
	0x01ECCFF8 B.NE 0x1ECD06C
	0x01ECCFFC LDR X8, [X19]
	0x01ECD000 LDR W21, [X19 + 0x48]
	0x01ECD004 MOV X0, X19
	0x01ECD008 LDR X9, [X8 + 0x248]
	0x01ECD00C LDR X1, [X8 + 0x250]
	0x01ECD010 BLR X9
	0x01ECD014 ADRP X8, 0x2226000
	0x01ECD018 LDR X8, [X8 + 0x5A8]
	0x01ECD01C MOV X20, X0
	0x01ECD020 LDR X8, [X8]
	0x01ECD024 LDR W9, [X8 + 0xE0]
	0x01ECD028 CBNZ W9, 0x1ECD034
	0x01ECD02C MOV X0, X8
	0x01ECD030 BL 0x1C16DFC
	0x01ECD034 SUB W1, W21, W20
	0x01ECD038 MOV W0, W31
	0x01ECD03C MOV X2, X31
	0x01ECD040 BL 0x337EDF0
	0x01ECD044 MOV W20, W0
	0x01ECD048 CMP W0, 0x1
	0x01ECD04C B.LT 0x1ECD070
	0x01ECD050 MOV X0, X19
	0x01ECD054 BL 0x1ECCA10
	0x01ECD058 MOVZ W2, 0x4
	0x01ECD05C MOV X0, X19
	0x01ECD060 MOV W1, W20
	0x01ECD064 BL 0x1ECC924
	0x01ECD068 B 0x1ECD070
	0x01ECD06C MOV W20, W31
	0x01ECD070 MOV X0, X31
	0x01ECD074 BL 0x1E32194
	0x01ECD078 MOV X0, X19
	0x01ECD07C BL 0x1ECCD94
	0x01ECD080 MOV W0, W20
	0x01ECD084 LDP X20, X19, [X31 + 0x30]
	0x01ECD088 LDP X22, X21, [X31 + 0x20]
	0x01ECD08C LDP X24, X23, [X31 + 0x10]
	0x01ECD090 LDR X30, [X31], #0x40
	0x01ECD094 RET
	0x01ECD098 BL 0x1C16F20
	0x01ECD09C BL 0x1C16F28
	0x01ECD0A0 B 0x1ECD0A4
	0x01ECD0A4 MOV X21, X0
	0x01ECD0A8 CMP W1, 0x1
	0x01ECD0AC B.NE 0x1ECD140
	0x01ECD0B0 MOV X0, X21
	0x01ECD0B4 BL 0x3EB1AD0
	0x01ECD0B8 MOV X21, X0
	0x01ECD0BC ADRP X0, 0x2226000
	0x01ECD0C0 LDR X0, [X0 + 0x7D0]
	0x01ECD0C4 BL 0x1C16D08
	0x01ECD0C8 LDR X8, [X21]
	0x01ECD0CC LDR X1, [X8]
	0x01ECD0D0 BL 0x1C17270
	0x01ECD0D4 TBZ X0, 0x0, 0x1ECD118
	0x01ECD0D8 LDR X21, [X21]
	0x01ECD0DC BL 0x3EB1AE0
	0x01ECD0E0 ADRP X0, 0x222E000
	0x01ECD0E4 LDR X0, [X0 + 0x8B0]
	0x01ECD0E8 BL 0x1C16D08
	0x01ECD0EC LDR W8, [X0 + 0xE0]
	0x01ECD0F0 CBNZ W8, 0x1ECD0F8
	0x01ECD0F4 BL 0x1C16DFC
	0x01ECD0F8 ADRP X0, 0x2232000
	0x01ECD0FC LDR X0, [X0 + 0xDD8]
	0x01ECD100 BL 0x1C16D08
	0x01ECD104 MOV X2, X0
	0x01ECD108 MOV X0, X19

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x250E000
	011 Move W8, [X21+1326]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x2234000
	019 Move X0, [X0+2440]
	020 Call 0x1C17CF4
	021 Move X0, 0x2234000
	022 Move X0, [X0+3520]
	023 Call 0x1C17CF4
	024 Move X0, 0x2234000
	025 Move X0, [X0+3528]
	026 Call 0x1C17CF4
	027 Move X0, 0x2233000
	028 Move X0, [X0+2488]
	029 Call 0x1C17CF4
	030 Move X0, 0x2233000
	031 Move X0, [X0+3536]
	032 Call 0x1C17CF4
	033 Move X0, 0x2232000
	034 Move X0, [X0+360]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+1326], W8
	038 Move X0, X19
	039 Move X1, X31
	040 Call Object..ctor, X0
	041 Move [X19+16], X20
	042 Compare X20, 0
	043 JumpIfEqual {100}
	044 Move X8, [X20+64]
	045 Compare X8, 0
	046 JumpIfEqual {100}
	047 Move X9, 0x2232000
	048 Move X9, [X9+360]
	049 Move X26, 0x2233000
	050 Move X25, 0x2233000
	051 Move X24, 0x2233000
	052 Move X0, [X9]
	053 Move X23, 0x2233000
	054 Move X22, 0x2233000
	055 Move X26, [X26+3536]
	056 Move X25, [X25+3528]
	057 Move W9, [X0+224]
	058 Move X21, [X8+40]
	059 Move X20, [X8+48]
	060 Move X24, [X24+3520]
	061 Move X23, [X23+2488]
	062 Move X22, [X22+2440]
	063 Compare W9, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X21
	067 Move X1, X20
	068 Move X2, X31
	069 Call TickRate.Resolve, X0
	070 Move [X19+24], X0
	071 Move [X19+32], X1
	072 Move X0, [X26]
	073 Call 0x1C17F10
	074 Move X1, X31
	075 Move X20, X0
	076 Call EqualityComparer..ctor, X0
	077 Move X0, [X25]
	078 Call 0x1C17F10
	079 Move X2, [X24]
	080 Move X1, X20
	081 Move X21, X0
	082 Call Dictionary`2<Tick, Object>..ctor, X0, X1
	083 Move [X19+40], X21
	084 Move X0, [X23]
	085 Call 0x1C17F10
	086 Move X1, [X22]
	087 Move X20, X0
	088 Call Dictionary`2<Tick, Double>..ctor, X0
	089 Move [X19+48], X20
	090 Move X20, [X31+64]
	091 Move X19, [X31+72]
	092 Move X22, [X31+48]
	093 Move X21, [X31+56]
	094 Move X24, [X31+32]
	095 Move X23, [X31+40]
	096 Move X26, [X31+16]
	097 Move X25, [X31+24]
	098 Move X30, [X31+80]
	099 Return 
	100 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x01ECDD1C BL 0x1EC0810
	0x01ECDD20 LDR X8, [X19 + 0x10]
	0x01ECDD24 CMP W0, 0x2
	0x01ECDD28 B.NE 0x1ECDD34
	0x01ECDD2C CBNZ X8, 0x1ECDD50
	0x01ECDD30 B 0x1ECDDF0
	0x01ECDD34 CBZ X8, 0x1ECDDF0
	0x01ECDD38 LDR W9, [X8 + 0x4C]
	0x01ECDD3C CMP W9, 0x4
	0x01ECDD40 B.NE 0x1ECDD50
	0x01ECDD44 LDP X20, X19, [X31 + 0x10]
	0x01ECDD48 LDR X30, [X31], #0x20
	0x01ECDD4C RET
	0x01ECDD50 LDR X20, [X8 + 0x108]
	0x01ECDD54 CBZ X20, 0x1ECDDF0
	0x01ECDD58 LDR X0, [X20 + 0x20]
	0x01ECDD5C MOV X1, X31
	0x01ECDD60 BL 0x1EF987C
	0x01ECDD64 LDR X8, [X19 + 0x10]
	0x01ECDD68 CBZ X8, 0x1ECDDF0
	0x01ECDD6C LDR W8, [X8 + 0x48]
	0x01ECDD70 MOV X0, X19
	0x01ECDD74 STR W8, [X20 + 0x1C]
	0x01ECDD78 BL 0x1ED23D4
	0x01ECDD7C MOV X0, X19
	0x01ECDD80 BL 0x1ED2530
	0x01ECDD84 LDR X8, [X19 + 0x10]
	0x01ECDD88 CBZ X8, 0x1ECDDF0
	0x01ECDD8C LDR X8, [X8 + 0x58]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x250D000
	005 Move W8, [X20+1327]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2233000
	012 Move X0, [X0+3560]
	013 Call 0x1C17CF4
	014 Move X0, 0x2233000
	015 Move X0, [X0+3568]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1327], W8
	019 Move X0, [X19+40]
	020 Compare X0, 0
	021 JumpIfEqual {37}
	022 Move X8, 0x2233000
	023 Move X8, [X8+3568]
	024 Move X1, [X8]
	025 Call Dictionary`2<Tick, Object>.Clear, X0
	026 Move X0, [X19+48]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X8, 0x2233000
	030 Move X8, [X8+3560]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, [X8]
	034 Move X30, [X31+32]
	035 Call Dictionary`2<Tick, Double>.Clear, X0
	036 Return 
	037 Call 0x1C17F20

Method: System.Int32 CopySortedTo(Fusion.SimulationInput[] array)

Disassembly:
	0x01ECF41C LDR X30, [X31], #0x20
	0x01ECF420 B 0x1ECEF54
	0x01ECF424 BL 0x1C16F20
	0x01ECF428 ADD X8, X0, 0x28
	0x01ECF42C STR X31, [X0 + 0x30]
	0x01ECF430 MOV X0, X8
	0x01ECF434 MOV X1, X31
	0x01ECF438 B 0x1EF9950
	0x01ECF43C LDR X8, [X0 + 0x20]
	0x01ECF440 CMP X8, 0x0
	0x01ECF444 CSET W0, NE
	0x01ECF448 RET
	0x01ECF44C STR X30, [X31 - 0x20]!
	0x01ECF450 STP X20, X19, [X31 + 0x10]
	0x01ECF454 MOV X19, X1
	0x01ECF458 MOV X1, X31
	0x01ECF45C MOV X20, X0
	0x01ECF460 BL 0x33BDD8C
	0x01ECF464 STR X19, [X20 + 0x10]
	0x01ECF468 LDP X20, X19, [X31 + 0x10]
	0x01ECF46C LDR X30, [X31], #0x20
	0x01ECF470 RET
	0x01ECF474 STP X30, X21, [X31 - 0x20]!
	0x01ECF478 STP X20, X19, [X31 + 0x10]
	0x01ECF47C MOV X21, X0
	0x01ECF480 STR X31, [X21 + 0x18]!
	0x01ECF484 MOV X19, X0
	0x01ECF488 LDUR X0, [X21 - 0x8]
	0x01ECF48C STR W31, [X21 + 0x28]
	0x01ECF490 STR W2, [X21 + 0x18]
	0x01ECF494 STR X1, [X21 + 0x20]
	0x01ECF498 CBZ X0, 0x1ECF530
	0x01ECF49C MOV X2, X31
	0x01ECF4A0 BL 0x1EC1598
	0x01ECF4A4 LDR X8, [X19 + 0x38]
	0x01ECF4A8 STR W0, [X19 + 0x34]
	0x01ECF4AC CBZ X8, 0x1ECF530
	0x01ECF4B0 LDR X0, [X19 + 0x10]
	0x01ECF4B4 CBZ X0, 0x1ECF530
	0x01ECF4B8 LDR X1, [X8 + 0xD0]
	0x01ECF4BC ADD X20, X19, 0x20
	0x01ECF4C0 MOV X2, X20
	0x01ECF4C4 MOV X3, X31
	0x01ECF4C8 BL 0x1EC7E5C
	0x01ECF4CC TBZ X0, 0x0, 0x1ECF514
	0x01ECF4D0 LDR X8, [X19 + 0x20]
	0x01ECF4D4 LDR W9, [X8 + 0x50]
	0x01ECF4D8 ADD W9, W9, 0x40
	0x01ECF4DC STR W9, [X8 + 0x50]
	0x01ECF4E0 LDR X0, [X19 + 0x10]
	0x01ECF4E4 BL 0x1ECF548
	0x01ECF4E8 STR X0, [X19 + 0x28]
	0x01ECF4EC CBZ X0, 0x1ECF508
	0x01ECF4F0 LDR W8, [X19 + 0x30]
	0x01ECF4F4 STR W8, [X0]
	0x01ECF4F8 LDR X8, [X19 + 0x20]
	0x01ECF4FC CMP X8, 0x0
	0x01ECF500 CSET W0, NE
	0x01ECF504 B 0x1ECF524
	0x01ECF508 MOV X0, X20
	0x01ECF50C MOV X1, X31
	0x01ECF510 BL 0x1EF9950
	0x01ECF514 MOVI V0.2D, 0x0
	0x01ECF518 MOV W0, W31
	0x01ECF51C STR X31, [X21 + 0x20]
	0x01ECF520 STP V0, V0, [X21]
	0x01ECF524 LDP X20, X19, [X31 + 0x10]
	0x01ECF528 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x250B000
	006 Move W8, [X21+1328]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x2231000
	014 Move X0, [X0+3624]
	015 Call 0x1C17CF4
	016 Move X0, 0x2231000
	017 Move X0, [X0+3688]
	018 Call 0x1C17CF4
	019 Move X0, 0x2231000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x2231000
	023 Move X0, [X0+3704]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1328], W8
	027 Compare X20, 0
	028 JumpIfEqual {81}
	029 Move X21, 0x2231000
	030 Move X21, [X21+3704]
	031 Move X0, X19
	032 Call Buffer.get_Count, X0
	033 Move W8, [X20+24]
	034 Move X1, [X21]
	035 Move X2, X31
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSET not yet implemented."
	038 Call Assert.Always, X0, X1
	039 Move W2, [X20+24]
	040 Move X0, X20
	041 Move W1, W31
	042 Move X3, X31
	043 Call Array.Clear, X0, X1, X2
	044 Move X0, [X19+40]
	045 Compare X0, 0
	046 JumpIfEqual {81}
	047 Move X8, 0x2231000
	048 Move X8, [X8+3688]
	049 Move X1, [X8]
	050 Call Dictionary`2<Tick, Object>.get_Values, X0
	051 Compare X0, 0
	052 JumpIfEqual {81}
	053 Move X8, 0x2231000
	054 Move X8, [X8+3696]
	055 Move X1, X20
	056 Move W2, W31
	057 Move X3, [X8]
	058 Call ValueCollection<Tick, Object>.CopyTo, X0, X1, X2
	059 Move X0, [X19+40]
	060 Compare X0, 0
	061 JumpIfEqual {81}
	062 Move X21, 0x2231000
	063 Move X21, [X21+3624]
	064 Move X1, [X21]
	065 Call Dictionary`2<Tick, Object>.get_Count, X0
	066 Move W2, W0
	067 Move X0, X20
	068 Move W1, W31
	069 Move X3, X31
	070 Call ArraySpecialized.Sort, X0, X1, X2
	071 Move X0, [X19+40]
	072 Compare X0, 0
	073 JumpIfEqual {81}
	074 Move X1, [X21]
	075 Move X20, [X31+16]
	076 Move X19, [X31+24]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Call Dictionary`2<Tick, Object>.get_Count, X0
	080 Return X0
	081 Call 0x1C17F20

Method: System.Boolean Contains(Fusion.Tick tick)

Disassembly:
	0x01ED9C90 MOVZ W8, 0x1
	0x01ED9C94 STRB W8, [X21 + 0x544]
	0x01ED9C98 LDR X2, [X22]
	0x01ED9C9C MOV X0, X20
	0x01ED9CA0 MOV X1, X19
	0x01ED9CA4 LDP X20, X19, [X31 + 0x20]
	0x01ED9CA8 LDP X22, X21, [X31 + 0x10]
	0x01ED9CAC LDR X30, [X31], #0x30
	0x01ED9CB0 B 0x22554A4
	0x01ED9CB4 STR X30, [X31 - 0x30]!
	0x01ED9CB8 STP X22, X21, [X31 + 0x10]
	0x01ED9CBC STP X20, X19, [X31 + 0x20]
	0x01ED9CC0 ADRP X22, 0x2500000
	0x01ED9CC4 ADRP X21, 0x2227000
	0x01ED9CC8 LDRB W8, [X22 + 0x545]
	0x01ED9CCC LDR X21, [X21 + 0x178]
	0x01ED9CD0 MOV X20, X1
	0x01ED9CD4 MOV X19, X0
	0x01ED9CD8 TBNZ X8, 0x0, 0x1ED9CF0
	0x01ED9CDC ADRP X0, 0x2227000
	0x01ED9CE0 LDR X0, [X0 + 0x178]
	0x01ED9CE4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2501000
	006 Move W8, [X21+1329]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2228000
	014 Move X0, [X0+200]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1329], W8
	018 Move X0, [X20+40]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x2228000
	022 Move X8, [X8+200]
	023 And X1, X19, 0
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call Dictionary`2<Tick, Object>.ContainsKey, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Boolean Remove(Fusion.Tick tick, out Fusion.SimulationInput removed)

Disassembly:
	0x01ECE1C4 BL 0x33BDD8C
	0x01ECE1C8 LDR X8, [X20 + 0x28]
	0x01ECE1CC CBZ X8, 0x1ECE264
	0x01ECE1D0 ADRP X9, 0x2230000
	0x01ECE1D4 LDR X0, [X20 + 0x10]
	0x01ECE1D8 LDR W8, [X8 + 0x10]
	0x01ECE1DC LDR X9, [X9 + 0x450]
	0x01ECE1E0 ADD W1, W8, 0x4
	0x01ECE1E4 LDR X2, [X9]
	0x01ECE1E8 BL 0x2279794
	0x01ECE1EC CBZ X19, 0x1ECE264
	0x01ECE1F0 STR X0, [X19 + 0x20]
	0x01ECE1F4 LDR X0, [X20 + 0x20]
	0x01ECE1F8 CBZ X0, 0x1ECE264
	0x01ECE1FC ADRP X9, 0x2231000
	0x01ECE200 LDR X9, [X9 + 0xE30]
	0x01ECE204 LDR W10, [X0 + 0x1C]
	0x01ECE208 LDR X8, [X0 + 0x10]
	0x01ECE20C LDR X9, [X9]
	0x01ECE210 ADD W10, W10, 0x1
	0x01ECE214 STR W10, [X0 + 0x1C]
	0x01ECE218 CBZ X8, 0x1ECE264
	0x01ECE21C LDRSW X10, [X0 + 0x18]
	0x01ECE220 LDR W11, [X8 + 0x18]
	0x01ECE224 CMP W10, W11
	0x01ECE228 B.CS 0x1ECE240
	0x01ECE22C ADD W9, W10, 0x1
	0x01ECE230 ADD X8, X8, X10, 0x3, LSL
	0x01ECE234 STR W9, [X0 + 0x18]
	0x01ECE238 STR X19, [X8 + 0x20]
	0x01ECE23C B 0x1ECE254
	0x01ECE240 LDR X8, [X9 + 0x20]
	0x01ECE244 MOV X1, X19
	0x01ECE248 LDR X8, [X8 + 0xC0]
	0x01ECE24C LDR X2, [X8 + 0x70]
	0x01ECE250 BL 0x301BF90
	0x01ECE254 MOV X0, X19
	0x01ECE258 LDP X20, X19, [X31 + 0x10]
	0x01ECE25C LDR X30, [X31], #0x20
	0x01ECE260 RET
	0x01ECE264 BL 0x1C16F20
	0x01ECE268 SUB X31, X31, 0x50
	0x01ECE26C STP X30, X25, [X31 + 0x10]
	0x01ECE270 STP X24, X23, [X31 + 0x20]
	0x01ECE274 STP X22, X21, [X31 + 0x30]
	0x01ECE278 STP X20, X19, [X31 + 0x40]
	0x01ECE27C ADRP X22, 0x250B000
	0x01ECE280 LDRB W8, [X22 + 0x535]
	0x01ECE284 MOV X21, X2
	0x01ECE288 MOV X20, X1
	0x01ECE28C MOV X19, X0
	0x01ECE290 STP X2, X3, [X31]
	0x01ECE294 TBNZ X8, 0x0, 0x1ECE2F4
	0x01ECE298 ADRP X0, 0x2231000
	0x01ECE29C LDR X0, [X0 + 0xA88]
	0x01ECE2A0 BL 0x1C16CF4
	0x01ECE2A4 ADRP X0, 0x2231000
	0x01ECE2A8 LDR X0, [X0 + 0xE50]
	0x01ECE2AC BL 0x1C16CF4
	0x01ECE2B0 ADRP X0, 0x2231000
	0x01ECE2B4 LDR X0, [X0 + 0xE28]
	0x01ECE2B8 BL 0x1C16CF4
	0x01ECE2BC ADRP X0, 0x2230000
	0x01ECE2C0 LDR X0, [X0 + 0x7D8]
	0x01ECE2C4 BL 0x1C16CF4
	0x01ECE2C8 ADRP X0, 0x2231000
	0x01ECE2CC LDR X0, [X0 + 0xE58]
	0x01ECE2D0 BL 0x1C16CF4
	0x01ECE2D4 ADRP X0, 0x2230000
	0x01ECE2D8 LDR X0, [X0 + 0x168]
	0x01ECE2DC BL 0x1C16CF4
	0x01ECE2E0 ADRP X0, 0x2231000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x250C000
	007 Move W8, [X22+1330]
	008 Move X20, X2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x2232000
	016 Move X0, [X0+3592]
	017 Call 0x1C17CF4
	018 Move X0, 0x2232000
	019 Move X0, [X0+2704]
	020 Call 0x1C17CF4
	021 Move X0, 0x2232000
	022 Move X0, [X0+3600]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1330], W8
	026 Move X0, [X19+48]
	027 Compare X0, 0
	028 JumpIfEqual {94}
	029 Move X8, 0x2232000
	030 Move X8, [X8+2704]
	031 And X21, X21, 0
	032 Move X1, X21
	033 Move X2, [X8]
	034 Call Dictionary`2<Tick, Double>.Remove, X0, X1
	035 Move X0, [X19+40]
	036 Compare X0, 0
	037 JumpIfEqual {94}
	038 Move X8, 0x2232000
	039 Move X8, [X8+3600]
	040 Move X1, X21
	041 Move X2, X20
	042 Move X3, [X8]
	043 Call Dictionary`2<Tick, Object>.TryGetValue, X0, X1, X2
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {80}
	048 Move X8, [X20]
	049 Compare X8, 0
	050 JumpIfEqual {94}
	051 Move X8, [X8+32]
	052 Compare X8, 0
	053 JumpIfEqual {94}
	054 Move W8, [X8]
	055 Move [X19+56], W8
	056 Move X8, [X20]
	057 Compare X8, 0
	058 JumpIfEqual {94}
	059 Move X8, [X8+32]
	060 Compare X8, 0
	061 JumpIfEqual {94}
	062 Move W8, [X8+8]
	063 Move [X19+64], W8
	064 Move X8, [X20]
	065 Compare X8, 0
	066 JumpIfEqual {94}
	067 Move X8, [X8+32]
	068 Compare X8, 0
	069 JumpIfEqual {94}
	070 Move W8, [X8+12]
	071 Move [X19+68], W8
	072 Move X8, [X20]
	073 Compare X8, 0
	074 JumpIfEqual {94}
	075 Move X8, [X8+32]
	076 Compare X8, 0
	077 JumpIfEqual {94}
	078 Move V0, [X8+4]
	079 Move [X19+60], S0
	080 Move X0, [X19+40]
	081 Compare X0, 0
	082 JumpIfEqual {94}
	083 Move X8, 0x2232000
	084 Move X8, [X8+3592]
	085 Move X1, X21
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X2, [X8]
	091 Move X30, [X31+48]
	092 Call Dictionary`2<Tick, Object>.Remove, X0, X1
	093 Return X0
	094 Call 0x1C17F20

Method: System.Nullable`1<System.Double> GetInsertTime(Fusion.Tick tick)

Disassembly:
	0x01ED2688 CBZ X0, 0x1ED299C
	0x01ED268C LDR X22, [X19 + 0x48]
	0x01ED2690 MOV X21, X0
	0x01ED2694 ADD X0, X0, 0x54
	0x01ED2698 MOV X1, X31
	0x01ED269C BL 0x1E967E8
	0x01ED26A0 CBZ X22, 0x1ED299C
	0x01ED26A4 LDR W8, [X22 + 0x9C]
	0x01ED26A8 BIC W9, W0, W0, 0x1F
	0x01ED26AC CMP W9, W8
	0x01ED26B0 CSEL W8, W8, W0, LT
	0x01ED26B4 CMP W8, 0x1
	0x01ED26B8 B.LT 0x1ED26C8
	0x01ED26BC LDR W9, [X21 + 0x3C]
	0x01ED26C0 CMP W8, W9
	0x01ED26C4 B.LE 0x1ED26D8
	0x01ED26C8 LDR X1, [X19 + 0x48]
	0x01ED26CC MOV X0, X19
	0x01ED26D0 MOV X2, X21
	0x01ED26D4 BL 0x1ED5B84
	0x01ED26D8 LDR X0, [X19 + 0x50]
	0x01ED26DC CBZ X0, 0x1ED2750
	0x01ED26E0 MOV X1, X31
	0x01ED26E4 BL 0x1E97370
	0x01ED26E8 CBZ X20, 0x1ED299C
	0x01ED26EC AND X1, X0, 0x0
	0x01ED26F0 MOVZ W2, 0x1
	0x01ED26F4 MOV X0, X20
	0x01ED26F8 MOV W3, W31
	0x01ED26FC BL 0x1ED0A18
	0x01ED2700 CBZ X0, 0x1ED299C
	0x01ED2704 LDR X22, [X19 + 0x50]
	0x01ED2708 MOV X21, X0
	0x01ED270C ADD X0, X0, 0x54
	0x01ED2710 MOV X1, X31
	0x01ED2714 BL 0x1E967E8
	0x01ED2718 CBZ X22, 0x1ED299C
	0x01ED271C LDR W8, [X22 + 0x9C]
	0x01ED2720 BIC W9, W0, W0, 0x1F
	0x01ED2724 CMP W9, W8
	0x01ED2728 CSEL W8, W8, W0, LT

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x2508000
	007 Move W8, [X21+1331]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x222E000
	015 Move X0, [X0+3888]
	016 Call 0x1C17CF4
	017 Move X0, 0x222D000
	018 Move X0, [X0+2000]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1331], W8
	022 Move [X31+8], X31
	023 Move X0, [X20+48]
	024 Compare X0, 0
	025 JumpIfEqual {54}
	026 Move X8, 0x222E000
	027 Move X8, [X8+3888]
	028 And X1, X19, 0
	029 Add X2, X31, 8
	030 Move X3, [X8]
	031 Call Dictionary`2<Tick, Double>.TryGetValue, X0, X1, X2
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {44}
	036 Move X8, 0x222D000
	037 Move V0, [X31+8]
	038 Move X8, [X8+2000]
	039 Add X0, X31, 16
	040 Move [X31+16], X31
	041 Move [X31+24], X31
	042 Move X1, [X8]
	043 Call Nullable`1<Double>..ctor, X0, V0
	044 Move [X31+16], X31
	045 Move [X31+24], X31
	046 Move X0, [X31+16]
	047 Move X1, [X31+24]
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Add X31, X31, 64
	053 Return X0
	054 Call 0x1C17F20

Method: Fusion.SimulationInput Get(Fusion.Tick tick)

Disassembly:
	0x01ECF044 BL 0x1C16CF4
	0x01ECF048 ADRP X0, 0x2230000
	0x01ECF04C LDR X0, [X0 + 0xEA8]
	0x01ECF050 BL 0x1C16CF4
	0x01ECF054 ADRP X0, 0x222F000
	0x01ECF058 LDR X0, [X0 + 0x680]
	0x01ECF05C BL 0x1C16CF4
	0x01ECF060 ADRP X0, 0x2230000
	0x01ECF064 LDR X0, [X0 + 0xEB0]
	0x01ECF068 BL 0x1C16CF4
	0x01ECF06C ADRP X0, 0x2230000
	0x01ECF070 LDR X0, [X0 + 0xEB8]
	0x01ECF074 BL 0x1C16CF4
	0x01ECF078 ADRP X0, 0x2230000
	0x01ECF07C LDR X0, [X0 + 0xEC0]
	0x01ECF080 BL 0x1C16CF4
	0x01ECF084 ADRP X0, 0x2230000
	0x01ECF088 LDR X0, [X0 + 0xEC8]
	0x01ECF08C BL 0x1C16CF4
	0x01ECF090 ADRP X0, 0x2230000
	0x01ECF094 LDR X0, [X0 + 0xED0]
	0x01ECF098 BL 0x1C16CF4
	0x01ECF09C MOVZ W8, 0x1
	0x01ECF0A0 STRB W8, [X20 + 0x4DE]
	0x01ECF0A4 LDR X0, [X21]
	0x01ECF0A8 MOVZ W1, 0xC
	0x01ECF0AC BL 0x1C16D6C
	0x01ECF0B0 CBZ X0, 0x1ECF3B8
	0x01ECF0B4 ADRP X21, 0x2230000
	0x01ECF0B8 LDR X21, [X21 + 0xED0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x250B000
	007 Move W8, [X21+1332]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2231000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1332], W8
	019 Move [X31+8], X31
	020 Move X0, [X20+40]
	021 Compare X0, 0
	022 JumpIfEqual {38}
	023 Move X8, 0x2231000
	024 Move X8, [X8+3600]
	025 And X1, X19, 0
	026 Add X2, X31, 8
	027 Move X3, [X8]
	028 Call Dictionary`2<Tick, Object>.TryGetValue, X0, X1, X2
	029 Move X8, [X31+8]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 And W31, W0, 1
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Add X31, X31, 48
	037 Return X0
	038 Call 0x1C17F20

Method: Fusion.SimulationInputHeader GetLastUsedInputHeader()

Disassembly:
	0x01ED9CE8 MOVZ W8, 0x1
	0x01ED9CEC STRB W8, [X22 + 0x545]
	0x01ED9CF0 LDR W20, [X20 + 0x50]

ISIL:
	001 Move X8, [X0+56]
	002 Move X1, [X0+64]
	003 Move X0, X8
	004 Return X0

Method: System.Boolean Add(Fusion.SimulationInput input, System.Nullable`1<System.Double> insertTime = null)

Disassembly:
	0x01ECF268 LDR X8, [X20]
	0x01ECF26C MOV X0, X21
	0x01ECF270 LDR X1, [X8 + 0x40]
	0x01ECF274 BL 0x1C16E00
	0x01ECF278 CBZ X0, 0x1ECF3AC
	0x01ECF27C LDR W8, [X20 + 0x18]
	0x01ECF280 CMP W8, 0x7
	0x01ECF284 B.LS 0x1ECF3A8
	0x01ECF288 ADRP X23, 0x2230000
	0x01ECF28C LDR X23, [X23 + 0xEC8]
	0x01ECF290 STR X21, [X20 + 0x58]
	0x01ECF294 LDR X0, [X23]
	0x01ECF298 CBZ X0, 0x1ECF2B0
	0x01ECF29C LDR X8, [X20]
	0x01ECF2A0 LDR X1, [X8 + 0x40]
	0x01ECF2A4 BL 0x1C16E00
	0x01ECF2A8 CBZ X0, 0x1ECF3AC
	0x01ECF2AC LDR W8, [X20 + 0x18]
	0x01ECF2B0 CMP W8, 0x8
	0x01ECF2B4 B.LS 0x1ECF3A8
	0x01ECF2B8 LDR X8, [X23]
	0x01ECF2BC ADD X1, X31, 0xC
	0x01ECF2C0 STR X8, [X20 + 0x60]
	0x01ECF2C4 LDRB W8, [X19 + 0x1]
	0x01ECF2C8 LDR X0, [X22]
	0x01ECF2CC STRB W8, [X31 + 0xC]
	0x01ECF2D0 BL 0x1C16E04
	0x01ECF2D4 MOV X21, X0
	0x01ECF2D8 CBZ X0, 0x1ECF2F0
	0x01ECF2DC LDR X8, [X20]
	0x01ECF2E0 MOV X0, X21
	0x01ECF2E4 LDR X1, [X8 + 0x40]
	0x01ECF2E8 BL 0x1C16E00
	0x01ECF2EC CBZ X0, 0x1ECF3AC
	0x01ECF2F0 LDR W8, [X20 + 0x18]
	0x01ECF2F4 CMP W8, 0x9
	0x01ECF2F8 B.LS 0x1ECF3A8
	0x01ECF2FC ADRP X22, 0x222F000
	0x01ECF300 LDR X22, [X22 + 0x680]
	0x01ECF304 STR X21, [X20 + 0x68]
	0x01ECF308 LDR X0, [X22]
	0x01ECF30C CBZ X0, 0x1ECF324
	0x01ECF310 LDR X8, [X20]
	0x01ECF314 LDR X1, [X8 + 0x40]
	0x01ECF318 BL 0x1C16E00
	0x01ECF31C CBZ X0, 0x1ECF3AC
	0x01ECF320 LDR W8, [X20 + 0x18]
	0x01ECF324 CMP W8, 0xA
	0x01ECF328 B.LS 0x1ECF3A8
	0x01ECF32C LDR X8, [X22]
	0x01ECF330 ADRP X9, 0x2224000
	0x01ECF334 LDR X9, [X9 + 0x758]
	0x01ECF338 ADD X1, X31, 0x8
	0x01ECF33C STR X8, [X20 + 0x70]
	0x01ECF340 LDR W8, [X19 + 0x4]
	0x01ECF344 LDR X0, [X9]
	0x01ECF348 STR W8, [X31 + 0x8]
	0x01ECF34C BL 0x1C16E04
	0x01ECF350 MOV X19, X0
	0x01ECF354 CBZ X0, 0x1ECF36C
	0x01ECF358 LDR X8, [X20]
	0x01ECF35C MOV X0, X19
	0x01ECF360 LDR X1, [X8 + 0x40]
	0x01ECF364 BL 0x1C16E00
	0x01ECF368 CBZ X0, 0x1ECF3AC
	0x01ECF36C LDR W8, [X20 + 0x18]
	0x01ECF370 CMP W8, 0xB
	0x01ECF374 B.LS 0x1ECF3A8
	0x01ECF378 ADRP X8, 0x2230000
	0x01ECF37C LDR X8, [X8 + 0xEC0]
	0x01ECF380 STR X19, [X20 + 0x78]
	0x01ECF384 MOV X1, X20
	0x01ECF388 MOV X2, X31
	0x01ECF38C LDR X0, [X8]
	0x01ECF390 BL 0x3227C5C
	0x01ECF394 LDP X20, X19, [X31 + 0x40]
	0x01ECF398 LDP X22, X21, [X31 + 0x30]
	0x01ECF39C LDP X30, X23, [X31 + 0x20]
	0x01ECF3A0 ADD X31, X31, 0x50
	0x01ECF3A4 RET
	0x01ECF3A8 BL 0x1C16F28
	0x01ECF3AC BL 0x1C16F44
	0x01ECF3B0 MOV X1, X31
	0x01ECF3B4 BL 0x1C16DEC
	0x01ECF3B8 BL 0x1C16F20
	0x01ECF3BC STR X30, [X31 - 0x20]!
	0x01ECF3C0 STP X20, X19, [X31 + 0x10]
	0x01ECF3C4 MOV X19, X1
	0x01ECF3C8 MOV X1, X31
	0x01ECF3CC MOV X20, X0
	0x01ECF3D0 BL 0x33BDD8C
	0x01ECF3D4 STR X19, [X20 + 0x10]
	0x01ECF3D8 LDP X20, X19, [X31 + 0x10]
	0x01ECF3DC LDR X30, [X31], #0x20
	0x01ECF3E0 RET
	0x01ECF3E4 STR X30, [X31 - 0x20]!
	0x01ECF3E8 STP X20, X19, [X31 + 0x10]
	0x01ECF3EC MOV X20, X0
	0x01ECF3F0 LDR X0, [X0 + 0x10]
	0x01ECF3F4 STR X1, [X20 + 0x30]
	0x01ECF3F8 CBZ X0, 0x1ECF424
	0x01ECF3FC MOV X19, X2
	0x01ECF400 MOV X2, X31
	0x01ECF404 BL 0x1EC1598
	0x01ECF408 STR W0, [X20 + 0x18]
	0x01ECF40C ADD X0, X20, 0x1C
	0x01ECF410 STR X19, [X20 + 0x28]
	0x01ECF414 MOV X1, X19
	0x01ECF418 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x250B000
	011 Move W8, [X22+1333]
	012 Move X21, X2
	013 Move X20, X1
	014 Move X19, X0
	015 Move [X31], X2
	016 Move [X31+8], X3
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0x2231000
	022 Move X0, [X0+2696]
	023 Call 0x1C17CF4
	024 Move X0, 0x2231000
	025 Move X0, [X0+3664]
	026 Call 0x1C17CF4
	027 Move X0, 0x2231000
	028 Move X0, [X0+3624]
	029 Call 0x1C17CF4
	030 Move X0, 0x2230000
	031 Move X0, [X0+2008]
	032 Call 0x1C17CF4
	033 Move X0, 0x2231000
	034 Move X0, [X0+3672]
	035 Call 0x1C17CF4
	036 Move X0, 0x2230000
	037 Move X0, [X0+360]
	038 Call 0x1C17CF4
	039 Move X0, 0x2231000
	040 Move X0, [X0+3680]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+1333], W8
	044 Move X0, [X19+40]
	045 Compare X0, 0
	046 JumpIfEqual {134}
	047 Move X8, 0x2231000
	048 Move X8, [X8+3624]
	049 Move X1, [X8]
	050 Call Dictionary`2<Tick, Object>.get_Count, X0
	051 Move X8, [X19+16]
	052 Compare X8, 0
	053 JumpIfEqual {134}
	054 Move X8, [X8+64]
	055 Compare X8, 0
	056 JumpIfEqual {134}
	057 Move X9, 0x2230000
	058 Move X9, [X9+360]
	059 Move W22, W0
	060 Move X25, 0x2231000
	061 Move X24, [X8+40]
	062 Move X23, [X8+48]
	063 Move X0, [X9]
	064 Move W9, [X0+224]
	065 Move X25, [X25+3680]
	066 Compare W9, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X24
	070 Move X1, X23
	071 Move X2, X31
	072 Call TickRate.Resolve, X0
	073 Move X1, [X25]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSET not yet implemented."
	076 Move X2, X31
	077 Call Assert.Always, X0, X1
	078 Compare X20, 0
	079 JumpIfEqual {134}
	080 Move X8, [X20+32]
	081 Compare X8, 0
	082 JumpIfEqual {134}
	083 Move W1, [X8]
	084 Move X0, X19
	085 Call Buffer.Contains, X0, X1
	086 Move W22, W0
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {122}
	091 Move X8, [X20+32]
	092 Compare X8, 0
	093 JumpIfEqual {134}
	094 Move X0, [X19+40]
	095 Compare X0, 0
	096 JumpIfEqual {134}
	097 Move W1, [X8]
	098 Move X8, 0x2231000
	099 Move X8, [X8+3664]
	100 Move X2, X20
	101 Move X3, [X8]
	102 Call Dictionary`2<Tick, Object>.Add, X0, X1, X2
	103 And W31, W21, 255
	104 Move X8, [X20+32]
	105 Compare X8, 0
	106 JumpIfEqual {134}
	107 Move W20, [X8]
	108 Move X8, 0x2231000
	109 Move X19, [X19+48]
	110 Move X8, [X8+3672]
	111 Add X0, X31, 0
	112 Move X1, [X8]
	113 Call Nullable`1<Double>.get_Value, X0
	114 Compare X19, 0
	115 JumpIfEqual {134}
	116 Move X8, 0x2231000
	117 Move X8, [X8+2696]
	118 Move X0, X19
	119 Move X1, X20
	120 Move X2, [X8]
	121 Call Dictionary`2<Tick, Double>.Add, X0, X1, V0
	122 NotImplemented "Instruction ORN not yet implemented."
	123 Move X20, [X31+64]
	124 Move X19, [X31+72]
	125 Move X22, [X31+48]
	126 Move X21, [X31+56]
	127 Move X24, [X31+32]
	128 Move X23, [X31+40]
	129 Move X30, [X31+16]
	130 Move X25, [X31+24]
	131 And W0, W8, 1
	132 Add X31, X31, 80
	133 Return X0
	134 Call 0x1C17F20

