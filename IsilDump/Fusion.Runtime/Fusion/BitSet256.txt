Type: Fusion.BitSet256

Method: Fusion.BitSet256/Iterator GetIterator()

Disassembly:
	0x01E899A8 BL 0x1C16D08
	0x01E899AC BL 0x1C16F10
	0x01E899B0 MOV X19, X0
	0x01E899B4 ADRP X0, 0x2274000
	0x01E899B8 LDR X0, [X0 + 0xF88]
	0x01E899BC BL 0x1C16D08
	0x01E899C0 MOV X20, X0

ISIL:
	001 Move [X8], X31
	002 Move V1, [X0]
	003 Move V0, [X0+16]
	004 Move TEMP, 0
	005 Not TEMP
	006 Move W9, TEMP
	007 Move [X8], W9
	008 Move [X8+24], V0
	009 Move [X8+8], V1
	010 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x01E899DC MOV X3, X31
	0x01E899E0 BL 0x330E16C

ISIL:
	001 Move W0, 256
	002 Return X0

Method: Fusion.BitSet256 FromArray(System.UInt64[] values)

Disassembly:
	0x01E899E4 ADRP X0, 0x2274000
	0x01E899E8 LDR X0, [X0 + 0xF90]
	0x01E899EC BL 0x1C16D08
	0x01E899F0 MOV X1, X0
	0x01E899F4 MOV X0, X19
	0x01E899F8 BL 0x1C16DEC
	0x01E899FC BL 0x3EB1B20
	0x01E89A00 ADD W8, W1, 0x3F
	0x01E89A04 CMP W1, 0x0
	0x01E89A08 CSEL W8, W8, W1, LT
	0x01E89A0C SBFM W8, W8, 0x6, 0x1F
	0x01E89A10 LDR X9, [X0, W8, SXTW]
	0x01E89A14 MOVZ W10, 0x1
	0x01E89A18 LSLV X10, X10, X1
	0x01E89A1C ORR X9, X9, X10, 0x0
	0x01E89A20 STR X9, [X0, W8, SXTW]
	0x01E89A24 RET
	0x01E89A28 ADD W8, W1, 0x3F
	0x01E89A2C CMP W1, 0x0
	0x01E89A30 CSEL W8, W8, W1, LT
	0x01E89A34 SBFM W8, W8, 0x6, 0x1F
	0x01E89A38 LDR X9, [X0, W8, SXTW]
	0x01E89A3C MOVZ W10, 0x1
	0x01E89A40 LSLV X10, X10, X1
	0x01E89A44 BIC X9, X9, X10, 0x0
	0x01E89A48 STR X9, [X0, W8, SXTW]
	0x01E89A4C RET
	0x01E89A50 ADD W8, W1, 0x3F
	0x01E89A54 CMP W1, 0x0
	0x01E89A58 CSEL W8, W8, W1, LT
	0x01E89A5C SBFM W8, W8, 0x6, 0x1F
	0x01E89A60 LDR X8, [X0, W8, SXTW]
	0x01E89A64 LSRV X8, X8, X1
	0x01E89A68 AND W0, W8, 0x1
	0x01E89A6C RET
	0x01E89A70 ADD W8, W1, 0x3F
	0x01E89A74 CMP W1, 0x0
	0x01E89A78 CSEL W8, W8, W1, LT
	0x01E89A7C SBFM W8, W8, 0x6, 0x1F
	0x01E89A80 LDR X9, [X0, W8, SXTW]
	0x01E89A84 MOVZ W10, 0x1
	0x01E89A88 LSLV X10, X10, X1
	0x01E89A8C ANDS W31, W2, 0x1
	0x01E89A90 BIC X11, X9, X10, 0x0
	0x01E89A94 ORR X9, X9, X10, 0x0
	0x01E89A98 CSEL X9, X9, X11, NE
	0x01E89A9C STR X9, [X0, W8, SXTW]
	0x01E89AA0 RET
	0x01E89AA4 LDR X8, [X1]
	0x01E89AA8 LDP X9, X10, [X0]
	0x01E89AAC AND X8, X8, X9, 0x0
	0x01E89AB0 STR X8, [X0]
	0x01E89AB4 LDR X8, [X1 + 0x8]
	0x01E89AB8 AND X8, X8, X10, 0x0
	0x01E89ABC STR X8, [X0 + 0x8]
	0x01E89AC0 LDR X8, [X1 + 0x10]
	0x01E89AC4 LDP X9, X10, [X0 + 0x10]
	0x01E89AC8 AND X8, X8, X9, 0x0
	0x01E89ACC STR X8, [X0 + 0x10]
	0x01E89AD0 LDR X8, [X1 + 0x18]
	0x01E89AD4 AND X8, X8, X10, 0x0
	0x01E89AD8 STR X8, [X0 + 0x18]
	0x01E89ADC LDR X8, [X1 + 0x20]
	0x01E89AE0 LDP X9, X10, [X0 + 0x20]
	0x01E89AE4 AND X8, X8, X9, 0x0
	0x01E89AE8 STR X8, [X0 + 0x20]
	0x01E89AEC LDR X8, [X1 + 0x28]
	0x01E89AF0 AND X8, X8, X10, 0x0
	0x01E89AF4 STR X8, [X0 + 0x28]
	0x01E89AF8 LDR X8, [X1 + 0x30]
	0x01E89AFC LDP X9, X10, [X0 + 0x30]
	0x01E89B00 AND X8, X8, X9, 0x0
	0x01E89B04 STR X8, [X0 + 0x30]
	0x01E89B08 LDR X8, [X1 + 0x38]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 NotImplemented "Instruction MRS not yet implemented."
	006 Move X10, [X9+40]
	007 Move [X31+40], X10
	008 Compare X0, 0
	009 JumpIfEqual {41}
	010 Move X10, [X0+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 And X10, X10, 0
	013 NotImplemented "Instruction MOVI not yet implemented."
	014 Move [X31], V0
	015 Move [X31+8], V0
	016 Compare X10, 0
	017 JumpIfEqual {28}
	018 Move X10, X31
	019 Add X11, X31, 0
	020 Add X12, X0, 32
	021 Move X13, [X12]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move [X11], X13
	024 Move W13, [X0+24]
	025 Add X10, X10, 1
	026 Add X11, X11, 8
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Call 0x1C17F28
	029 Move V1, [X31]
	030 Move V0, [X31+16]
	031 Move [X8], V1
	032 Move [X8+8], V0
	033 Move X8, [X9+40]
	034 Move X9, [X31+40]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Move X30, [X31+48]
	039 Add X31, X31, 80
	040 Return X0
	041 Move X0, 0x2270000
	042 Move X0, [X0+1320]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X19, X0
	046 Move X0, 0x2275000
	047 Move X0, [X0+3800]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Move X2, X31
	052 Call ArgumentNullException..ctor, X0, X1
	053 Move X0, 0x2273000
	054 Move X0, [X0+1400]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X19, X0
	058 Move X0, 0x2275000
	059 Move X0, [X0+3912]
	060 Call 0x1C17D08
	061 Move X20, X0
	062 Move X0, 0x2275000
	063 Move X0, [X0+3800]
	064 Call 0x1C17D08
	065 Move X2, X0
	066 Move X0, X19
	067 Move X1, X20
	068 Move X3, X31
	069 Call ArgumentException..ctor, X0, X1, X2
	070 Move X0, 0x2275000
	071 Move X0, [X0+3920]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Call 0x1C17DEC
	076 Call 0x3EB2B20

Method: System.Void Set(System.Int32 bit)

Disassembly:
	0x01E89B0C AND X8, X8, X10, 0x0
	0x01E89B10 STR X8, [X0 + 0x38]
	0x01E89B14 RET
	0x01E89B18 LDR X8, [X1]
	0x01E89B1C LDP X9, X10, [X0]
	0x01E89B20 ORR X8, X8, X9, 0x0
	0x01E89B24 STR X8, [X0]
	0x01E89B28 LDR X8, [X1 + 0x8]
	0x01E89B2C ORR X8, X8, X10, 0x0
	0x01E89B30 STR X8, [X0 + 0x8]

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 Or X9, X9, X10
	009 Move [X0], X9
	010 Return 

Method: System.Void Clear(System.Int32 bit)

Disassembly:
	0x01E89B34 LDR X8, [X1 + 0x10]
	0x01E89B38 LDP X9, X10, [X0 + 0x10]
	0x01E89B3C ORR X8, X8, X9, 0x0
	0x01E89B40 STR X8, [X0 + 0x10]
	0x01E89B44 LDR X8, [X1 + 0x18]
	0x01E89B48 ORR X8, X8, X10, 0x0
	0x01E89B4C STR X8, [X0 + 0x18]
	0x01E89B50 LDR X8, [X1 + 0x20]
	0x01E89B54 LDP X9, X10, [X0 + 0x20]
	0x01E89B58 ORR X8, X8, X9, 0x0

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 NotImplemented "Instruction BIC not yet implemented."
	009 Move [X0], X9
	010 Return 

Method: System.Boolean get_Item(System.Int32 index)

Disassembly:
	0x01E89B5C STR X8, [X0 + 0x20]
	0x01E89B60 LDR X8, [X1 + 0x28]
	0x01E89B64 ORR X8, X8, X10, 0x0
	0x01E89B68 STR X8, [X0 + 0x28]
	0x01E89B6C LDR X8, [X1 + 0x30]
	0x01E89B70 LDP X9, X10, [X0 + 0x30]
	0x01E89B74 ORR X8, X8, X9, 0x0
	0x01E89B78 STR X8, [X0 + 0x30]

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X8, [X0]
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0

Method: System.Void set_Item(System.Int32 index, System.Boolean value)

Disassembly:
	0x01E89B7C LDR X8, [X1 + 0x38]
	0x01E89B80 ORR X8, X8, X10, 0x0
	0x01E89B84 STR X8, [X0 + 0x38]
	0x01E89B88 RET
	0x01E89B8C LDR X8, [X1]
	0x01E89B90 LDP X9, X10, [X0]
	0x01E89B94 EOR X8, X8, X9, 0x0
	0x01E89B98 STR X8, [X0]
	0x01E89B9C LDR X8, [X1 + 0x8]
	0x01E89BA0 EOR X8, X8, X10, 0x0
	0x01E89BA4 STR X8, [X0 + 0x8]
	0x01E89BA8 LDR X8, [X1 + 0x10]
	0x01E89BAC LDP X9, X10, [X0 + 0x10]

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 And W31, W2, 1
	009 NotImplemented "Instruction BIC not yet implemented."
	010 Or X9, X9, X10
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Move [X0], X9
	013 Return 

Method: System.Void And(Fusion.BitSet256 other)

Disassembly:
	0x01E89BB0 EOR X8, X8, X9, 0x0
	0x01E89BB4 STR X8, [X0 + 0x10]
	0x01E89BB8 LDR X8, [X1 + 0x18]
	0x01E89BBC EOR X8, X8, X10, 0x0
	0x01E89BC0 STR X8, [X0 + 0x18]
	0x01E89BC4 LDR X8, [X1 + 0x20]
	0x01E89BC8 LDP X9, X10, [X0 + 0x20]
	0x01E89BCC EOR X8, X8, X9, 0x0
	0x01E89BD0 STR X8, [X0 + 0x20]
	0x01E89BD4 LDR X8, [X1 + 0x28]
	0x01E89BD8 EOR X8, X8, X10, 0x0
	0x01E89BDC STR X8, [X0 + 0x28]
	0x01E89BE0 LDR X8, [X1 + 0x30]
	0x01E89BE4 LDP X9, X10, [X0 + 0x30]
	0x01E89BE8 EOR X8, X8, X9, 0x0

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 And X8, X8, X9
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 And X8, X8, X10
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 And X8, X8, X9
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 And X8, X8, X10
	016 Move [X0+24], X8
	017 Return 

Method: System.Void Or(Fusion.BitSet256 other)

Disassembly:
	0x01E89BEC STR X8, [X0 + 0x30]
	0x01E89BF0 LDR X8, [X1 + 0x38]
	0x01E89BF4 EOR X8, X8, X10, 0x0
	0x01E89BF8 STR X8, [X0 + 0x38]
	0x01E89BFC RET
	0x01E89C00 LDR X8, [X1]
	0x01E89C04 LDP X9, X10, [X0]
	0x01E89C08 BIC X8, X9, X8, 0x0
	0x01E89C0C STR X8, [X0]
	0x01E89C10 LDR X8, [X1 + 0x8]
	0x01E89C14 BIC X8, X10, X8, 0x0
	0x01E89C18 STR X8, [X0 + 0x8]
	0x01E89C1C LDR X8, [X1 + 0x10]
	0x01E89C20 LDP X9, X10, [X0 + 0x10]
	0x01E89C24 BIC X8, X9, X8, 0x0

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 Or X8, X8, X9
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 Or X8, X8, X10
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 Or X8, X8, X9
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 Or X8, X8, X10
	016 Move [X0+24], X8
	017 Return 

Method: System.Void Xor(Fusion.BitSet256 other)

Disassembly:
	0x01E89C28 STR X8, [X0 + 0x10]
	0x01E89C2C LDR X8, [X1 + 0x18]
	0x01E89C30 BIC X8, X10, X8, 0x0
	0x01E89C34 STR X8, [X0 + 0x18]
	0x01E89C38 LDR X8, [X1 + 0x20]
	0x01E89C3C LDP X9, X10, [X0 + 0x20]
	0x01E89C40 BIC X8, X9, X8, 0x0
	0x01E89C44 STR X8, [X0 + 0x20]
	0x01E89C48 LDR X8, [X1 + 0x28]
	0x01E89C4C BIC X8, X10, X8, 0x0
	0x01E89C50 STR X8, [X0 + 0x28]
	0x01E89C54 LDR X8, [X1 + 0x30]
	0x01E89C58 LDP X9, X10, [X0 + 0x30]
	0x01E89C5C BIC X8, X9, X8, 0x0
	0x01E89C60 STR X8, [X0 + 0x30]

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 Xor X8, X8, X9
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 Xor X8, X8, X10
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 Xor X8, X8, X9
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 Xor X8, X8, X10
	016 Move [X0+24], X8
	017 Return 

Method: System.Void AndNot(Fusion.BitSet256 other)

Disassembly:
	0x01E89C64 LDR X8, [X1 + 0x38]
	0x01E89C68 BIC X8, X10, X8, 0x0
	0x01E89C6C STR X8, [X0 + 0x38]
	0x01E89C70 RET
	0x01E89C74 LDP X8, X9, [X0]
	0x01E89C78 LDP X10, X11, [X0 + 0x10]
	0x01E89C7C ORN X8, X31, X8, 0x0
	0x01E89C80 ORN X9, X31, X9, 0x0
	0x01E89C84 STP X8, X9, [X0]
	0x01E89C88 LDP X8, X9, [X0 + 0x20]
	0x01E89C8C ORN X10, X31, X10, 0x0
	0x01E89C90 ORN X11, X31, X11, 0x0
	0x01E89C94 STP X10, X11, [X0 + 0x10]
	0x01E89C98 LDP X10, X11, [X0 + 0x30]
	0x01E89C9C ORN X8, X31, X8, 0x0

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 NotImplemented "Instruction BIC not yet implemented."
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 NotImplemented "Instruction BIC not yet implemented."
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 NotImplemented "Instruction BIC not yet implemented."
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 NotImplemented "Instruction BIC not yet implemented."
	016 Move [X0+24], X8
	017 Return 

Method: System.Void Not()

Disassembly:
	0x01E89CA0 ORN X9, X31, X9, 0x0
	0x01E89CA4 STP X8, X9, [X0 + 0x20]
	0x01E89CA8 ORN X8, X31, X10, 0x0
	0x01E89CAC ORN X9, X31, X11, 0x0
	0x01E89CB0 STP X8, X9, [X0 + 0x30]
	0x01E89CB4 RET
	0x01E89CB8 MOVI V0.2D, 0x0
	0x01E89CBC STP V0, V0, [X0]
	0x01E89CC0 STP V0, V0, [X0 + 0x20]

ISIL:
	001 Move X8, [X0]
	002 Move X9, [X0+8]
	003 Move X10, [X0+16]
	004 Move X11, [X0+24]
	005 NotImplemented "Instruction ORN not yet implemented."
	006 NotImplemented "Instruction ORN not yet implemented."
	007 NotImplemented "Instruction ORN not yet implemented."
	008 NotImplemented "Instruction ORN not yet implemented."
	009 Move [X0], X8
	010 Move [X0+8], X9
	011 Move [X0+16], X10
	012 Move [X0+24], X11
	013 Return 

Method: System.Void ClearAll()

Disassembly:
	0x01E89CC4 RET
	0x01E89CC8 ADD W8, W1, 0x3F
	0x01E89CCC CMP W1, 0x0

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X0], V0
	003 Move [X0+8], V0
	004 Return 

Method: System.Boolean IsSet(System.Int32 bit)

Disassembly:
	0x01E89CD0 CSEL W8, W8, W1, LT
	0x01E89CD4 SBFM W8, W8, 0x6, 0x1F
	0x01E89CD8 LDR X8, [X0, W8, SXTW]
	0x01E89CDC LSRV X8, X8, X1
	0x01E89CE0 AND W0, W8, 0x1
	0x01E89CE4 RET
	0x01E89CE8 STP X30, X21, [X31 - 0x20]!
	0x01E89CEC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X8, [X0]
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0

Method: System.Int32 GetSetCount()

Disassembly:
	0x01E89CF0 ADRP X21, 0x2550000
	0x01E89CF4 ADRP X20, 0x2271000
	0x01E89CF8 LDRB W8, [X21 + 0x230]
	0x01E89CFC LDR X20, [X20 + 0xC68]
	0x01E89D00 MOV X19, X0
	0x01E89D04 TBNZ X8, 0x0, 0x1E89D1C
	0x01E89D08 ADRP X0, 0x2271000
	0x01E89D0C LDR X0, [X0 + 0xC68]
	0x01E89D10 BL 0x1C16CF4
	0x01E89D14 MOVZ W8, 0x1
	0x01E89D18 STRB W8, [X21 + 0x230]
	0x01E89D1C LDR X0, [X20]
	0x01E89D20 LDR X20, [X19]
	0x01E89D24 LDR W8, [X0 + 0xE0]
	0x01E89D28 CBNZ W8, 0x1E89D30
	0x01E89D2C BL 0x1C16DFC
	0x01E89D30 UBFM X9, X20, 0x1, 0x3F
	0x01E89D34 LDP X10, X11, [X19 + 0x8]
	0x01E89D38 AND X9, X9, 0x5555555555555555
	0x01E89D3C SUB X9, X20, X9
	0x01E89D40 AND X17, X9, 0x3333333333333333
	0x01E89D44 UBFM X9, X9, 0x2, 0x3F
	0x01E89D48 AND X9, X9, 0x3333333333333333
	0x01E89D4C LDP X12, X13, [X19 + 0x18]
	0x01E89D50 ADD X9, X9, X17
	0x01E89D54 UBFM X17, X10, 0x1, 0x3F
	0x01E89D58 AND X17, X17, 0x5555555555555555
	0x01E89D5C SUB X10, X10, X17
	0x01E89D60 UBFM X17, X11, 0x1, 0x3F
	0x01E89D64 AND X17, X17, 0x5555555555555555
	0x01E89D68 LDP X14, X15, [X19 + 0x28]
	0x01E89D6C SUB X11, X11, X17
	0x01E89D70 UBFM X17, X12, 0x1, 0x3F
	0x01E89D74 AND X17, X17, 0x5555555555555555
	0x01E89D78 SUB X12, X12, X17
	0x01E89D7C UBFM X17, X13, 0x1, 0x3F
	0x01E89D80 AND X17, X17, 0x5555555555555555
	0x01E89D84 LDR X16, [X19 + 0x38]
	0x01E89D88 SUB X13, X13, X17
	0x01E89D8C UBFM X17, X14, 0x1, 0x3F
	0x01E89D90 AND X17, X17, 0x5555555555555555
	0x01E89D94 SUB X14, X14, X17
	0x01E89D98 UBFM X17, X15, 0x1, 0x3F
	0x01E89D9C AND X17, X17, 0x5555555555555555
	0x01E89DA0 SUB X15, X15, X17
	0x01E89DA4 UBFM X17, X16, 0x1, 0x3F
	0x01E89DA8 AND X17, X17, 0x5555555555555555
	0x01E89DAC SUB X16, X16, X17
	0x01E89DB0 AND X17, X10, 0x3333333333333333
	0x01E89DB4 UBFM X10, X10, 0x2, 0x3F
	0x01E89DB8 AND X10, X10, 0x3333333333333333
	0x01E89DBC ADD X10, X10, X17
	0x01E89DC0 AND X17, X11, 0x3333333333333333
	0x01E89DC4 UBFM X11, X11, 0x2, 0x3F
	0x01E89DC8 AND X11, X11, 0x3333333333333333
	0x01E89DCC ADD X11, X11, X17
	0x01E89DD0 AND X17, X12, 0x3333333333333333
	0x01E89DD4 UBFM X12, X12, 0x2, 0x3F
	0x01E89DD8 AND X12, X12, 0x3333333333333333
	0x01E89DDC ADD X12, X12, X17
	0x01E89DE0 AND X17, X13, 0x3333333333333333
	0x01E89DE4 UBFM X13, X13, 0x2, 0x3F
	0x01E89DE8 AND X13, X13, 0x3333333333333333
	0x01E89DEC ADD X13, X13, X17
	0x01E89DF0 AND X17, X14, 0x3333333333333333
	0x01E89DF4 UBFM X14, X14, 0x2, 0x3F
	0x01E89DF8 ADD X9, X9, X9, 0x4, LSR
	0x01E89DFC AND X14, X14, 0x3333333333333333
	0x01E89E00 ADD X10, X10, X10, 0x4, LSR
	0x01E89E04 ORR X8, X31, 0x101010101010101
	0x01E89E08 AND X9, X9, 0xF0F0F0F0F0F0F0F

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2551000
	006 Move X20, 0x2272000
	007 Move W8, [X21+547]
	008 Move X20, [X20+3176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2272000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+547], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X8, X20
	026 ShiftRight X8, 1
	027 And X8, X8, 0x7FFFFFFF
	028 Move X10, [X19+8]
	029 Move X11, [X19+16]
	030 And X8, X8, 0x5555555555555555
	031 Subtract X8, X20, X8
	032 And X13, X8, 0x3333333333333333
	033 Move X8, X8
	034 ShiftRight X8, 2
	035 And X8, X8, 0x7FFFFFFF
	036 And X8, X8, 0x3333333333333333
	037 Move X12, [X19+24]
	038 Add X8, X8, X13
	039 Move X13, X10
	040 ShiftRight X13, 1
	041 And X13, X13, 0x7FFFFFFF
	042 And X13, X13, 0x5555555555555555
	043 Subtract X10, X10, X13
	044 Move X13, X11
	045 ShiftRight X13, 1
	046 And X13, X13, 0x7FFFFFFF
	047 And X13, X13, 0x5555555555555555
	048 Subtract X11, X11, X13
	049 Move X13, X12
	050 ShiftRight X13, 1
	051 And X13, X13, 0x7FFFFFFF
	052 And X13, X13, 0x5555555555555555
	053 Subtract X12, X12, X13
	054 And X13, X10, 0x3333333333333333
	055 Move X10, X10
	056 ShiftRight X10, 2
	057 And X10, X10, 0x7FFFFFFF
	058 And X10, X10, 0x3333333333333333
	059 Add X10, X10, X13
	060 And X13, X11, 0x3333333333333333
	061 Move X11, X11
	062 ShiftRight X11, 2
	063 And X11, X11, 0x7FFFFFFF
	064 And X11, X11, 0x3333333333333333
	065 Add X11, X11, X13
	066 And X13, X12, 0x3333333333333333
	067 Move X12, X12
	068 ShiftRight X12, 2
	069 And X12, X12, 0x7FFFFFFF
	070 Add X8, X8, X8
	071 And X12, X12, 0x3333333333333333
	072 Add X10, X10, X10
	073 Or X9, X31, 0x101010101010101
	074 And X8, X8, 0xF0F0F0F0F0F0F0F
	075 Add X12, X12, X13
	076 Add X11, X11, X11
	077 And X10, X10, 0xF0F0F0F0F0F0F0F
	078 Multiply X8, X8, X9
	079 Add X12, X12, X12
	080 And X11, X11, 0xF0F0F0F0F0F0F0F
	081 Multiply X10, X10, X9
	082 Move X8, X8
	083 ShiftRight X8, 56
	084 And X8, X8, 0x7FFFFFFF
	085 And X12, X12, 0xF0F0F0F0F0F0F0F
	086 Multiply X11, X11, X9
	087 Move X10, X10
	088 ShiftRight X10, 56
	089 And X10, X10, 0x7FFFFFFF
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Multiply X9, X12, X9
	093 Move X11, X11
	094 ShiftRight X11, 56
	095 And X11, X11, 0x7FFFFFFF
	096 Add W8, W10, W8
	097 Move X9, X9
	098 ShiftRight X9, 56
	099 And X9, X9, 0x7FFFFFFF
	100 Add W8, W8, W11
	101 Add W0, W8, W9
	102 Move X30, [X31+32]
	103 Move X21, [X31+40]
	104 Return X0

Method: System.Boolean Any()

Disassembly:
	0x01E89E0C ADD X14, X14, X17
	0x01E89E10 AND X17, X15, 0x3333333333333333
	0x01E89E14 UBFM X15, X15, 0x2, 0x3F
	0x01E89E18 ADD X11, X11, X11, 0x4, LSR
	0x01E89E1C AND X10, X10, 0xF0F0F0F0F0F0F0F
	0x01E89E20 AND X15, X15, 0x3333333333333333
	0x01E89E24 MUL X9, X9, X8
	0x01E89E28 ADD X12, X12, X12, 0x4, LSR
	0x01E89E2C AND X11, X11, 0xF0F0F0F0F0F0F0F
	0x01E89E30 MUL X10, X10, X8
	0x01E89E34 ADD X15, X15, X17
	0x01E89E38 AND X17, X16, 0x3333333333333333

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfNotEqual {10}
	004 Move X8, [X0+8]
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {12}
	010 Move W0, 1
	011 Return X0
	012 Move X8, [X0+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Return X0

Method: System.Boolean Empty()

Disassembly:
	0x01E89E3C UBFM X16, X16, 0x2, 0x3F
	0x01E89E40 UBFM X9, X9, 0x38, 0x3F
	0x01E89E44 ADD X13, X13, X13, 0x4, LSR
	0x01E89E48 AND X12, X12, 0xF0F0F0F0F0F0F0F
	0x01E89E4C MUL X11, X11, X8
	0x01E89E50 UBFM X10, X10, 0x38, 0x3F
	0x01E89E54 AND X16, X16, 0x3333333333333333
	0x01E89E58 ADD X14, X14, X14, 0x4, LSR
	0x01E89E5C AND X13, X13, 0xF0F0F0F0F0F0F0F
	0x01E89E60 MUL X12, X12, X8
	0x01E89E64 UBFM X11, X11, 0x38, 0x3F
	0x01E89E68 ADD W9, W10, W9

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfNotEqual {10}
	004 Move X8, [X0+8]
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {12}
	010 Move W0, W31
	011 Return X0
	012 Move X8, [X0+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x01E89E6C ADD X16, X16, X17
	0x01E89E70 ADD X15, X15, X15, 0x4, LSR
	0x01E89E74 AND X14, X14, 0xF0F0F0F0F0F0F0F
	0x01E89E78 MUL X13, X13, X8
	0x01E89E7C UBFM X12, X12, 0x38, 0x3F
	0x01E89E80 ADD W9, W9, W11
	0x01E89E84 ADD X16, X16, X16, 0x4, LSR
	0x01E89E88 AND X15, X15, 0xF0F0F0F0F0F0F0F
	0x01E89E8C MUL X14, X14, X8
	0x01E89E90 UBFM X13, X13, 0x38, 0x3F
	0x01E89E94 ADD W9, W9, W12
	0x01E89E98 AND X16, X16, 0xF0F0F0F0F0F0F0F
	0x01E89E9C MUL X15, X15, X8
	0x01E89EA0 UBFM X14, X14, 0x38, 0x3F
	0x01E89EA4 ADD W9, W9, W13
	0x01E89EA8 LDP X20, X19, [X31 + 0x10]
	0x01E89EAC MUL X8, X16, X8
	0x01E89EB0 UBFM X15, X15, 0x38, 0x3F
	0x01E89EB4 ADD W9, W9, W14
	0x01E89EB8 UBFM X8, X8, 0x38, 0x3F

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2551000
	006 Move X21, 0x2275000
	007 Move W8, [X20+548]
	008 Move X21, [X21+3824]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2275000
	015 Move X0, [X0+3824]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+548], W8
	019 Move X3, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 4
	024 Move W2, 43
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call HashCodeUtilities.GetArrayHashCode, X0, X1, X2
	028 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x01E89EBC ADD W9, W9, W15
	0x01E89EC0 ADD W0, W9, W8
	0x01E89EC4 LDP X30, X21, [X31], #0x20
	0x01E89EC8 RET
	0x01E89ECC LDR X8, [X0]
	0x01E89ED0 CBNZ X8, 0x1E89F04
	0x01E89ED4 LDR X8, [X0 + 0x8]
	0x01E89ED8 CBNZ X8, 0x1E89F04
	0x01E89EDC LDR X8, [X0 + 0x10]
	0x01E89EE0 CBNZ X8, 0x1E89F04
	0x01E89EE4 LDR X8, [X0 + 0x18]
	0x01E89EE8 CBNZ X8, 0x1E89F04
	0x01E89EEC LDR X8, [X0 + 0x20]
	0x01E89EF0 CBNZ X8, 0x1E89F04
	0x01E89EF4 LDR X8, [X0 + 0x28]
	0x01E89EF8 CBNZ X8, 0x1E89F04
	0x01E89EFC LDR X8, [X0 + 0x30]
	0x01E89F00 CBZ X8, 0x1E89F0C
	0x01E89F04 MOVZ W0, 0x1
	0x01E89F08 RET
	0x01E89F0C LDR X8, [X0 + 0x38]
	0x01E89F10 CMP X8, 0x0
	0x01E89F14 CSET W0, NE
	0x01E89F18 RET
	0x01E89F1C LDR X8, [X0]
	0x01E89F20 CBNZ X8, 0x1E89F54
	0x01E89F24 LDR X8, [X0 + 0x8]
	0x01E89F28 CBNZ X8, 0x1E89F54
	0x01E89F2C LDR X8, [X0 + 0x10]
	0x01E89F30 CBNZ X8, 0x1E89F54
	0x01E89F34 LDR X8, [X0 + 0x18]
	0x01E89F38 CBNZ X8, 0x1E89F54
	0x01E89F3C LDR X8, [X0 + 0x20]
	0x01E89F40 CBNZ X8, 0x1E89F54
	0x01E89F44 LDR X8, [X0 + 0x28]
	0x01E89F48 CBNZ X8, 0x1E89F54
	0x01E89F4C LDR X8, [X0 + 0x30]
	0x01E89F50 CBZ X8, 0x1E89F5C
	0x01E89F54 MOV W0, W31
	0x01E89F58 RET
	0x01E89F5C LDR X8, [X0 + 0x38]
	0x01E89F60 CMP X8, 0x0
	0x01E89F64 CSET W0, EQ
	0x01E89F68 RET

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x2551000
	010 Move X20, X1
	011 Move X19, X0
	012 Move [X31+40], X8
	013 Move W8, [X22+549]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2275000
	019 Move X0, [X0+3928]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+549], W8
	023 Compare X20, 0
	024 JumpIfEqual {30}
	025 Move X8, 0x2275000
	026 Move X8, [X8+3928]
	027 Move X9, [X20]
	028 Move X8, [X8]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W0, W31
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move V0, [X0]
	034 Move V1, [X0+16]
	035 Add X1, X31, 0
	036 Move X0, X19
	037 Move [X31], V0
	038 Move [X31+8], V1
	039 Call BitSet256.Equals, X0, X1
	040 Move X8, [X21+40]
	041 Move X9, [X31+40]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X20, [X31+80]
	044 Move X19, [X31+88]
	045 Move X22, [X31+64]
	046 Move X21, [X31+72]
	047 Move X30, [X31+48]
	048 And W0, W0, 1
	049 Add X31, X31, 96
	050 Return X0
	051 Call 0x3EB2B20

Method: System.Boolean Equals(Fusion.BitSet256 other)

Disassembly:
	0x01E89F6C STP X30, X21, [X31 - 0x20]!
	0x01E89F70 STP X20, X19, [X31 + 0x10]
	0x01E89F74 ADRP X20, 0x2550000
	0x01E89F78 ADRP X21, 0x2274000
	0x01E89F7C LDRB W8, [X20 + 0x231]
	0x01E89F80 LDR X21, [X21 + 0xEF0]
	0x01E89F84 MOV X19, X0
	0x01E89F88 TBNZ X8, 0x0, 0x1E89FA0
	0x01E89F8C ADRP X0, 0x2274000
	0x01E89F90 LDR X0, [X0 + 0xEF0]
	0x01E89F94 BL 0x1C16CF4
	0x01E89F98 MOVZ W8, 0x1
	0x01E89F9C STRB W8, [X20 + 0x231]
	0x01E89FA0 LDR X3, [X21]
	0x01E89FA4 MOV X0, X19
	0x01E89FA8 LDP X20, X19, [X31 + 0x10]
	0x01E89FAC MOVZ W1, 0x8
	0x01E89FB0 MOVZ W2, 0x2B
	0x01E89FB4 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move X8, [X0]
	002 Move X9, [X1]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X8, [X0+8]
	005 Move X9, [X1+8]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X8, [X0+16]
	008 Move X9, [X1+16]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X0+24]
	011 Move X9, [X1+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Return X0
	015 Move W0, W31
	016 Return X0

Method: Fusion.BitSet256/Enumerator GetEnumerator()

Disassembly:
	0x01E89FB8 B 0x21EB454
	0x01E89FBC SUB X31, X31, 0x80

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W1, TEMP
	004 Return X0

Method: System.Collections.Generic.IEnumerator`1<System.Int32> System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator()

Disassembly:
	0x01E89FD0 LDR X8, [X21 + 0x28]
	0x01E89FD4 ADRP X22, 0x2550000
	0x01E89FD8 MOV X20, X1
	0x01E89FDC MOV X19, X0
	0x01E89FE0 STR X8, [X31 + 0x48]
	0x01E89FE4 LDRB W8, [X22 + 0x232]
	0x01E89FE8 TBNZ X8, 0x0, 0x1E8A000
	0x01E89FEC ADRP X0, 0x2274000
	0x01E89FF0 LDR X0, [X0 + 0xF98]
	0x01E89FF4 BL 0x1C16CF4
	0x01E89FF8 MOVZ W8, 0x1
	0x01E89FFC STRB W8, [X22 + 0x232]
	0x01E8A000 CBZ X20, 0x1E8A01C
	0x01E8A004 ADRP X8, 0x2273000
	0x01E8A008 LDR X8, [X8 + 0xF98]
	0x01E8A00C LDR X9, [X20]
	0x01E8A010 LDR X8, [X8]
	0x01E8A014 CMP X9, X8
	0x01E8A018 B.EQ 0x1E8A024
	0x01E8A01C MOV W0, W31
	0x01E8A020 B 0x1E8A048
	0x01E8A024 MOV X0, X20
	0x01E8A028 BL 0x1C16E08

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2551000
	007 Move X20, 0x2275000
	008 Move W8, [X21+550]
	009 Move X20, [X20+3936]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2275000
	016 Move X0, [X0+3936]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+550], W8
	020 Move X0, [X20]
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Add X1, X31, 0
	025 Move [X31], X19
	026 Move [X31+8], X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x01E8A02C LDP V1, V0, [X0 + 0x20]
	0x01E8A030 LDP V2, V3, [X0]
	0x01E8A034 ADD X1, X31, 0x0
	0x01E8A038 MOV X0, X19
	0x01E8A03C STP V1, V0, [X31 + 0x20]
	0x01E8A040 STP V2, V3, [X31]
	0x01E8A044 BL 0x1E8A074
	0x01E8A048 LDR X8, [X21 + 0x28]
	0x01E8A04C LDR X9, [X31 + 0x48]
	0x01E8A050 CMP X8, X9
	0x01E8A054 B.NE 0x1E8A070
	0x01E8A058 LDP X20, X19, [X31 + 0x70]
	0x01E8A05C LDP X22, X21, [X31 + 0x60]
	0x01E8A060 LDR X30, [X31 + 0x50]
	0x01E8A064 AND W0, W0, 0x1
	0x01E8A068 ADD X31, X31, 0x80
	0x01E8A06C RET
	0x01E8A070 BL 0x3EB1B20
	0x01E8A074 LDR X8, [X0]
	0x01E8A078 LDR X9, [X1]
	0x01E8A07C CMP X8, X9
	0x01E8A080 B.NE 0x1E8A0F8
	0x01E8A084 LDR X8, [X0 + 0x8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2550000
	007 Move X20, 0x2274000
	008 Move W8, [X21+551]
	009 Move X20, [X20+3936]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2274000
	016 Move X0, [X0+3936]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+551], W8
	020 Move X0, [X20]
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Add X1, X31, 0
	025 Move [X31], X19
	026 Move [X31+8], X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Boolean op_Equality(Fusion.BitSet256 a, Fusion.BitSet256 b)

Disassembly:
	0x01E8A088 LDR X9, [X1 + 0x8]
	0x01E8A08C CMP X8, X9
	0x01E8A090 B.NE 0x1E8A0F8
	0x01E8A094 LDR X8, [X0 + 0x10]
	0x01E8A098 LDR X9, [X1 + 0x10]
	0x01E8A09C CMP X8, X9
	0x01E8A0A0 B.NE 0x1E8A0F8
	0x01E8A0A4 LDR X8, [X0 + 0x18]
	0x01E8A0A8 LDR X9, [X1 + 0x18]
	0x01E8A0AC CMP X8, X9
	0x01E8A0B0 B.NE 0x1E8A0F8
	0x01E8A0B4 LDR X8, [X0 + 0x20]
	0x01E8A0B8 LDR X9, [X1 + 0x20]
	0x01E8A0BC CMP X8, X9
	0x01E8A0C0 B.NE 0x1E8A0F8
	0x01E8A0C4 LDR X8, [X0 + 0x28]
	0x01E8A0C8 LDR X9, [X1 + 0x28]
	0x01E8A0CC CMP X8, X9

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 NotImplemented "Instruction MRS not yet implemented."
	005 Move X8, [X19+40]
	006 Move [X31+40], X8
	007 Move V1, [X1]
	008 Move V0, [X1+16]
	009 Add X1, X31, 0
	010 Move [X31], V1
	011 Move [X31+8], V0
	012 Call BitSet256.Equals, X0, X1
	013 Move X8, [X19+40]
	014 Move X9, [X31+40]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X30, [X31+48]
	017 Move X19, [X31+56]
	018 And W0, W0, 1
	019 Add X31, X31, 64
	020 Return X0
	021 Call 0x3EB2B20

Method: System.Boolean op_Inequality(Fusion.BitSet256 a, Fusion.BitSet256 b)

Disassembly:
	0x01E8A0D0 B.NE 0x1E8A0F8
	0x01E8A0D4 LDR X8, [X0 + 0x30]
	0x01E8A0D8 LDR X9, [X1 + 0x30]
	0x01E8A0DC CMP X8, X9
	0x01E8A0E0 B.NE 0x1E8A0F8
	0x01E8A0E4 LDR X8, [X0 + 0x38]
	0x01E8A0E8 LDR X9, [X1 + 0x38]
	0x01E8A0EC CMP X8, X9
	0x01E8A0F0 CSET W0, EQ
	0x01E8A0F4 RET
	0x01E8A0F8 MOV W0, W31
	0x01E8A0FC RET
	0x01E8A100 MOVN W1, 0x0
	0x01E8A104 RET
	0x01E8A108 MOVN W8, 0x0
	0x01E8A10C STR X1, [X0]
	0x01E8A110 STR W8, [X0 + 0x8]
	0x01E8A114 RET
	0x01E8A118 SUB X31, X31, 0x30

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 NotImplemented "Instruction MRS not yet implemented."
	005 Move X8, [X19+40]
	006 Move [X31+40], X8
	007 Move V1, [X1]
	008 Move V0, [X1+16]
	009 Add X1, X31, 0
	010 Move [X31], V1
	011 Move [X31+8], V0
	012 Call BitSet256.Equals, X0, X1
	013 Move X8, [X19+40]
	014 Move X9, [X31+40]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X30, [X31+48]
	017 Move X19, [X31+56]
	018 Xor W8, W0, 1
	019 And W0, W8, 1
	020 Add X31, X31, 64
	021 Return X0
	022 Call 0x3EB2B20

