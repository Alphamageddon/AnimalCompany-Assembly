Type: Fusion.NetworkObjectHeaderSnapshot

Method: System.Void .ctor(Fusion.Allocator* allocator)

Disassembly:
	0x01E97A38 MOV W2, W21
	0x01E97A3C ADD X0, X31, 0x0
	0x01E97A40 MOV X1, X20
	0x01E97A44 MOV X3, X31
	0x01E97A48 STP X31, X31, [X31]
	0x01E97A4C BL 0x1EBE020
	0x01E97A50 LDR X0, [X19 + 0x20]
	0x01E97A54 CBZ X0, 0x1E97A14
	0x01E97A58 MOV X1, X31
	0x01E97A5C BL 0x1EC0524

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+32], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void Init(Fusion.NetworkObjectHeader* header, System.Boolean copyData)

Disassembly:
	0x01E97A60 CBZ X22, 0x1E97A14
	0x01E97A64 LDP X1, X2, [X31]
	0x01E97A68 MOV X0, X22
	0x01E97A6C MOV W3, W31
	0x01E97A70 MOV X4, X31
	0x01E97A74 BL 0x1EBE16C
	0x01E97A78 LDP X20, X19, [X31 + 0x40]
	0x01E97A7C LDP X22, X21, [X31 + 0x30]
	0x01E97A80 LDP X24, X23, [X31 + 0x20]
	0x01E97A84 LDR X30, [X31 + 0x10]
	0x01E97A88 ADD X31, X31, 0x50
	0x01E97A8C RET
	0x01E97A90 BL 0x1C16F20
	0x01E97A94 BL 0x1C16F20
	0x01E97A98 B 0x1E97AA0
	0x01E97A9C B 0x1E97AA0
	0x01E97AA0 MOV X21, X0
	0x01E97AA4 CMP W1, 0x1
	0x01E97AA8 B.NE 0x1E97B2C
	0x01E97AAC MOV X0, X21
	0x01E97AB0 BL 0x3EB1AD0
	0x01E97AB4 MOV X21, X0
	0x01E97AB8 ADRP X0, 0x225C000
	0x01E97ABC LDR X0, [X0 + 0x7D0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {37}
	007 NotImplemented "Instruction LDRSH not yet implemented."
	008 Move X20, X0
	009 Move X0, [X0+32]
	010 Move W21, W2
	011 Move X19, X1
	012 Move W1, W8
	013 ShiftRight W1, 30
	014 And W1, W1, 0x1FFFFFFF
	015 Move X2, X31
	016 Move [X20+44], W1
	017 Call Allocator.AllocAndClear, X0, X1
	018 Move [X20+48], X0
	019 Move TEMP, X21
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {32}
	023 Move W2, [X20+44]
	024 Move X1, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X3, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Native.MemCpy, X0, X1, X2
	031 Return 
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 
	037 Call 0x1C17F20

Method: System.Void Init(System.Int32 bytes)

Disassembly:
	0x01E97AC0 BL 0x1C16D08
	0x01E97AC4 LDR X8, [X21]
	0x01E97AC8 LDR X1, [X8]
	0x01E97ACC BL 0x1C17270
	0x01E97AD0 TBZ X0, 0x0, 0x1E97B04
	0x01E97AD4 LDR X21, [X21]
	0x01E97AD8 BL 0x3EB1AE0
	0x01E97ADC ADRP X0, 0x2264000
	0x01E97AE0 LDR X0, [X0 + 0x8B0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Move X2, X31
	006 Move [X19+44], W1
	007 Call Allocator.AllocAndClear, X0, X1
	008 Move [X19+48], X0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void Release()

Disassembly:
	0x01E97AE4 BL 0x1C16D08
	0x01E97AE8 LDR W8, [X0 + 0xE0]
	0x01E97AEC CBNZ W8, 0x1E97AF4
	0x01E97AF0 BL 0x1C16DFC
	0x01E97AF4 MOV X0, X21
	0x01E97AF8 MOV X1, X31
	0x01E97AFC BL 0x1E3E4C8
	0x01E97B00 B 0x1E97984
	0x01E97B04 MOVZ W0, 0x8
	0x01E97B08 BL 0x3EB1AF0
	0x01E97B0C LDR X8, [X21]
	0x01E97B10 STR X8, [X0]
	0x01E97B14 ADRP X1, 0x201D000
	0x01E97B18 ADD X1, X1, 0xE58
	0x01E97B1C MOV X2, X31
	0x01E97B20 BL 0x3EB1B00
	0x01E97B24 MOV X21, X0
	0x01E97B28 BL 0x3EB1AE0
	0x01E97B2C MOV X0, X21
	0x01E97B30 BL 0x1D2C690

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2543000
	006 Move X20, 0x2268000
	007 Move W8, [X21+684]
	008 Move X20, [X20+1048]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2268000
	015 Move X0, [X0+1048]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+684], W8
	019 Move [X19+40], X31
	020 Move X0, [X19+32]
	021 Move X2, [X20]
	022 Add X1, X19, 48
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call Allocator.FreeCheckedRef, X0, X1
	028 Return 

Method: Fusion.NetworkObjectHeaderSnapshot Clone(Fusion.Simulation simulation)

Disassembly:
	0x01E97B34 BL 0x1990590
	0x01E97B38 STP X30, X21, [X31 - 0x20]!
	0x01E97B3C STP X20, X19, [X31 + 0x10]
	0x01E97B40 ADRP X21, 0x2542000
	0x01E97B44 LDRB W8, [X21 + 0x2B7]
	0x01E97B48 MOV X19, X1
	0x01E97B4C MOV X20, X0
	0x01E97B50 TBNZ X8, 0x0, 0x1E97B74
	0x01E97B54 ADRP X0, 0x2267000
	0x01E97B58 LDR X0, [X0 + 0x480]
	0x01E97B5C BL 0x1C16CF4
	0x01E97B60 ADRP X0, 0x2267000
	0x01E97B64 LDR X0, [X0 + 0x470]
	0x01E97B68 BL 0x1C16CF4
	0x01E97B6C MOVZ W8, 0x1
	0x01E97B70 STRB W8, [X21 + 0x2B7]
	0x01E97B74 MOV X0, X20
	0x01E97B78 LDRB W8, [X0 + 0x68]!
	0x01E97B7C CBZ W8, 0x1E97BB4
	0x01E97B80 ADRP X8, 0x2267000
	0x01E97B84 LDR X8, [X8 + 0x470]
	0x01E97B88 LDR X1, [X8]
	0x01E97B8C BL 0x243AFD4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {27}
	006 Move X19, X0
	007 Move X0, X1
	008 Move X1, X31
	009 Call Simulation.GetSnapshot, X0
	010 Compare X0, 0
	011 JumpIfEqual {27}
	012 Move X20, X0
	013 Move W1, [X19+44]
	014 Move X0, [X0+32]
	015 Move X2, X31
	016 Move [X20+44], W1
	017 Call Allocator.AllocAndClear, X0, X1
	018 Move [X20+48], X0
	019 Move X0, X20
	020 Move X1, X19
	021 Call NetworkObjectHeaderSnapshot.CopyFrom, X0, X1
	022 Move X0, X20
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.Void CopyFrom(Fusion.NetworkObjectHeader* header)

Disassembly:
	0x01E97938 LDR X0, [X19 + 0x20]
	0x01E9793C CBZ X0, 0x1E97A14
	0x01E97940 MOV X1, X31
	0x01E97944 BL 0x1EC03FC
	0x01E97948 TBZ X0, 0x0, 0x1E97A78

ISIL:
	001 Move X8, [X0+48]
	002 Move W2, [X0+44]
	003 Move X3, X31
	004 Move X0, X8
	005 Call Native.MemCpy, X0, X1, X2
	006 Return 

Method: System.Void CopyTo(Fusion.NetworkObjectHeader* header)

Disassembly:
	0x01E979B8 CBZ X8, 0x1E97A14
	0x01E979BC ADRP X24, 0x225C000
	0x01E979C0 LDR X24, [X24 + 0x5A8]
	0x01E979C4 MOV X23, X31
	0x01E979C8 LDRSH X9, [X8 + 0x6]
	0x01E979CC CMP X23, X9

ISIL:
	001 Move X8, [X0+48]
	002 Move W2, [X0+44]
	003 Move X0, X1
	004 Move X3, X31
	005 Move X1, X8
	006 Call Native.MemCpy, X0, X1, X2
	007 Return 

Method: System.Void CopyFrom(Fusion.NetworkObjectHeaderSnapshot target)

Disassembly:
	0x01E97B90 LDR X8, [X20 + 0x60]
	0x01E97B94 CBZ X8, 0x1E97BDC
	0x01E97B98 LDR W10, [X8 + 0x18]
	0x01E97B9C SUB W9, W0, W19
	0x01E97BA0 CMP W9, W10
	0x01E97BA4 B.CS 0x1E97BB4
	0x01E97BA8 ADD X8, X8, W9, 0x3, SXTW
	0x01E97BAC LDR X0, [X8 + 0x20]
	0x01E97BB0 B 0x1E97BD0
	0x01E97BB4 LDR X0, [X20 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move X8, [X0+48]
	005 Move X1, [X1+48]
	006 Move W2, [X0+44]
	007 Move X3, X31
	008 Move X0, X8
	009 Move X30, [X31+16]
	010 Call Native.MemCpy, X0, X1, X2
	011 Return 
	012 Call 0x1C17F20

Method: System.Void CopyTo(Fusion.NetworkObjectHeaderSnapshot target)

Disassembly:
	0x01E97BB8 CBZ X0, 0x1E97BD0
	0x01E97BBC LDR W8, [X0 + 0x28]
	0x01E97BC0 CMP W8, W19
	0x01E97BC4 B.EQ 0x1E97BD0
	0x01E97BC8 LDR X0, [X0 + 0x18]
	0x01E97BCC CBNZ X0, 0x1E97BBC
	0x01E97BD0 LDP X20, X19, [X31 + 0x10]
	0x01E97BD4 LDP X30, X21, [X31], #0x20
	0x01E97BD8 RET
	0x01E97BDC BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move X8, [X1+48]
	005 Move X1, [X0+48]
	006 Move W2, [X0+44]
	007 Move X3, X31
	008 Move X0, X8
	009 Move X30, [X31+16]
	010 Call Native.MemCpy, X0, X1, X2
	011 Return 
	012 Call 0x1C17F20

Method: System.Void CopyFrom(Fusion.NetworkObjectHeaderSnapshotRef target)

Disassembly:
	0x01E97964 CBZ X0, 0x1E97A14
	0x01E97968 LDR X0, [X0 + 0x10]
	0x01E9796C CBZ X0, 0x1E97A14
	0x01E97970 ADRP X8, 0x2267000
	0x01E97974 LDR X8, [X8 + 0x490]
	0x01E97978 LDR X1, [X8]
	0x01E9797C BL 0x25D229C
	0x01E97980 TBZ X0, 0x0, 0x1E9798C
	0x01E97984 MOV W21, W31
	0x01E97988 B 0x1E979B4

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move X8, [X0+48]
	005 Move X1, [X1+48]
	006 Move W2, [X0+44]
	007 Move X3, X31
	008 Move X0, X8
	009 Move X30, [X31+16]
	010 Call Native.MemCpy, X0, X1, X2
	011 Return 
	012 Call 0x1C17F20

Method: System.Void CopyTo(Fusion.NetworkObjectHeaderSnapshotRef target)

Disassembly:
	0x01E979E8 LDR W22, [X8, X9, LSL #2]
	0x01E979EC CBNZ W10, 0x1E979F4
	0x01E979F0 BL 0x1C16DFC
	0x01E979F4 MOV W0, W21
	0x01E979F8 MOV W1, W22
	0x01E979FC MOV X2, X31
	0x01E97A00 BL 0x337EDF0
	0x01E97A04 LDR X8, [X19 + 0xB0]
	0x01E97A08 BIC W21, W0, W0, 0x1F
	0x01E97A0C ADD X23, X23, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move X8, [X1+48]
	005 Move X1, [X0+48]
	006 Move W2, [X0+44]
	007 Move X3, X31
	008 Move X0, X8
	009 Move X30, [X31+16]
	010 Call Native.MemCpy, X0, X1, X2
	011 Return 
	012 Call 0x1C17F20

Method: System.Int32* GetBehaviourPtr(Fusion.NetworkBehaviour behaviour)

Disassembly:
	0x01E97BE0 STP X30, X19, [X31 - 0x10]!
	0x01E97BE4 AND X1, X1, 0x0
	0x01E97BE8 MOV X19, X2
	0x01E97BEC BL 0x1E97B38
	0x01E97BF0 CMP X0, 0x0
	0x01E97BF4 CSET W8, NE
	0x01E97BF8 STR X0, [X19]
	0x01E97BFC MOV W0, W8

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {9}
	004 Move X8, [X0+48]
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Add X0, X8, X9
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: System.UInt64 BuildCRC()

Disassembly:
	0x01E97858 CBNZ X21, 0x1E97804
	0x01E9785C LDR X0, [X19 + 0x58]
	0x01E97860 B 0x1E97868
	0x01E97864 MOV X0, X31
	0x01E97868 LDP X20, X19, [X31 + 0x30]
	0x01E9786C LDP X22, X21, [X31 + 0x20]
	0x01E97870 LDP X24, X23, [X31 + 0x10]
	0x01E97874 LDR X30, [X31], #0x40
	0x01E97878 RET
	0x01E9787C LDR X22, [X19 + 0x50]
	0x01E97880 MOV X0, X21
	0x01E97884 MOV X1, X22
	0x01E97888 BL 0x1E96D68
	0x01E9788C CBZ X22, 0x1E978A8
	0x01E97890 LDR X1, [X19 + 0x58]
	0x01E97894 MOV X0, X22
	0x01E97898 BL 0x1E96B90
	0x01E9789C MOV X0, X21
	0x01E978A0 MOV X1, X22
	0x01E978A4 B 0x1E97780
	0x01E978A8 BL 0x1C16F20
	0x01E978AC BL 0x1C16F44
	0x01E978B0 MOV X1, X31
	0x01E978B4 BL 0x1C16DEC
	0x01E978B8 BL 0x1C16F28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2543000
	006 Move X20, 0x2265000
	007 Move W8, [X21+685]
	008 Move X20, [X20+1376]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2265000
	015 Move X0, [X0+1376]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+685], W8
	019 Move X0, [X20]
	020 Move X20, [X19+48]
	021 Move W19, [X19+44]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move W1, W19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call CRC64.Compute, X0, X1
	034 Return X0

