Type: Fusion.SerializableDictionary`2

Method: System.Collections.Generic.Dictionary`2<TKey, TValue> get_Inner()

Disassembly:
	0x025DACDC BL 0x1C16F18
	0x025DACE0 MOV X0, X20
	0x025DACE4 BL 0x1C16F18
	0x025DACE8 B 0x25DAD48
	0x025DACEC B 0x25DAD48
	0x025DACF0 B 0x25DACF4
	0x025DACF4 CMP W1, 0x1
	0x025DACF8 STR X0, [X31 + 0x98]
	0x025DACFC B.NE 0x25DAD18
	0x025DAD00 LDR X0, [X31 + 0x98]
	0x025DAD04 BL 0x3EB1AD0
	0x025DAD08 LDR X22, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfNotEqual {13}
	007 Move X8, [X1+32]
	008 Move X0, X19
	009 Move X8, [X8+192]
	010 Move X1, [X8+16]
	011 Call 0x25DB760, X0
	012 Move [X19+32], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0

Method: System.Collections.Generic.ICollection`1<System.Collections.Generic.KeyValuePair`2<TKey, TValue>> get_DictionaryAsCollection()

Disassembly:
	0x025DAD0C BL 0x3EB1AE0
	0x025DAD10 MOV W24, W31
	0x025DAD14 B 0x25DAB80
	0x025DAD18 MOV X22, X31
	0x025DAD1C B 0x25DAD24
	0x025DAD20 STR X0, [X31 + 0x98]
	0x025DAD24 LDR X8, [X19 + 0x20]
	0x025DAD28 LDR X8, [X8 + 0xC0]
	0x025DAD2C LDR X1, [X8 + 0x1C8]
	0x025DAD30 ADD X0, X31, 0x60
	0x025DAD34 BL 0x2BEB0F4
	0x025DAD38 CBZ X22, 0x25DAD88
	0x025DAD3C MOV X0, X22
	0x025DAD40 BL 0x1C16F18
	0x025DAD44 B 0x25DAD48

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfNotEqual {16}
	007 Move X8, [X1+32]
	008 Move X0, X19
	009 Move X8, [X8+192]
	010 Move X8, [X8+24]
	011 Move X8, [X8+32]
	012 Move X8, [X8+192]
	013 Move X1, [X8+16]
	014 Call 0x25DB760, X0
	015 Move [X19+32], X0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0

Method: Fusion.SerializableDictionary`2<TKey, TValue> Wrap(System.Collections.Generic.Dictionary`2<TKey, TValue> dictionary)

Disassembly:
	0x025DAD48 CMP W1, 0x1
	0x025DAD4C B.NE 0x25DAD60
	0x025DAD50 BL 0x3EB1AD0
	0x025DAD54 LDR X20, [X0]
	0x025DAD58 BL 0x3EB1AE0
	0x025DAD5C B 0x25DAC8C
	0x025DAD60 STR X0, [X31 + 0x98]
	0x025DAD64 MOV X20, X31
	0x025DAD68 B 0x25DAD70
	0x025DAD6C STR X0, [X31 + 0x98]
	0x025DAD70 LDR X8, [X19 + 0x20]
	0x025DAD74 LDR X8, [X8 + 0xC0]
	0x025DAD78 LDR X1, [X8 + 0x1F8]
	0x025DAD7C ADD X0, X31, 0x30
	0x025DAD80 BL 0x2BB2B38
	0x025DAD84 CBNZ X20, 0x25DAD90
	0x025DAD88 LDR X0, [X31 + 0x98]
	0x025DAD8C BL 0x1D2C690
	0x025DAD90 MOV X0, X20
	0x025DAD94 BL 0x1C16F18
	0x025DAD98 BL 0x1990590
	0x025DAD9C STR X31, [X0 + 0x20]
	0x025DADA0 RET
	0x025DADA4 LDR X8, [X1 + 0x20]
	0x025DADA8 LDR X8, [X8 + 0xC0]
	0x025DADAC LDR X1, [X8 + 0x208]
	0x025DADB0 B 0x25DAA84
	0x025DADB4 MOV X1, X31
	0x025DADB8 B 0x1E90234
	0x025DADBC STP X30, X19, [X31 - 0x10]!
	0x025DADC0 MOV X19, X0
	0x025DADC4 LDR X0, [X0 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, [X8]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Call 0x1C17F10
	024 Move X8, [X20+32]
	025 Move X20, X0
	026 Move W9, [X8+309]
	027 Move TEMP, X9
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {33}
	031 Move X0, X8
	032 Call 0x1C5D684
	033 Move X0, X20
	034 Move X1, X31
	035 Call SerializableDictionary..ctor, X0
	036 Compare X20, 0
	037 JumpIfEqual {44}
	038 Move [X20+32], X19
	039 Move X0, X20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return X0
	044 Call 0x1C17F20

Method: TValue get_Item(TKey key)

Disassembly:
	0x025DADC8 CBNZ X0, 0x25DADE4
	0x025DADCC LDR X8, [X1 + 0x20]
	0x025DADD0 MOV X0, X19
	0x025DADD4 LDR X8, [X8 + 0xC0]
	0x025DADD8 LDR X1, [X8 + 0x10]
	0x025DADDC BL 0x25DB7D4
	0x025DADE0 STR X0, [X19 + 0x20]
	0x025DADE4 LDP X30, X19, [X31], #0x10
	0x025DADE8 RET
	0x025DADEC STP X30, X19, [X31 - 0x10]!
	0x025DADF0 MOV X19, X0
	0x025DADF4 LDR X0, [X0 + 0x20]
	0x025DADF8 CBNZ X0, 0x25DAE20
	0x025DADFC LDR X8, [X1 + 0x20]
	0x025DAE00 MOV X0, X19
	0x025DAE04 LDR X8, [X8 + 0xC0]
	0x025DAE08 LDR X8, [X8 + 0x18]
	0x025DAE0C LDR X8, [X8 + 0x20]
	0x025DAE10 LDR X8, [X8 + 0xC0]
	0x025DAE14 LDR X1, [X8 + 0x10]
	0x025DAE18 BL 0x25DB7D4
	0x025DAE1C STR X0, [X19 + 0x20]
	0x025DAE20 LDP X30, X19, [X31], #0x10
	0x025DAE24 RET
	0x025DAE28 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+32]
	007 Move X20, X2
	008 Move W19, W1
	009 Compare X0, 0
	010 JumpIfNotEqual {22}
	011 Move X8, [X20+32]
	012 Move X0, X21
	013 Move X8, [X8+192]
	014 Move X8, [X8+24]
	015 Move X8, [X8+32]
	016 Move X8, [X8+192]
	017 Move X1, [X8+16]
	018 Call 0x25DB760, X0
	019 Move [X21+32], X0
	020 Compare X0, 0
	021 JumpIfEqual {32}
	022 Move X8, [X20+32]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X8, [X8+192]
	027 Move X2, [X8+56]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Dictionary`2<ByteEnum, Object>.get_Item, X0, X1
	031 Return X0
	032 Call 0x1C17F20

Method: System.Void set_Item(TKey key, TValue value)

Disassembly:
	0x025DAE2C STP X20, X19, [X31 + 0x10]
	0x025DAE30 LDR X8, [X1 + 0x20]
	0x025DAE34 MOV X20, X1
	0x025DAE38 MOV X19, X0
	0x025DAE3C LDRB W9, [X8 + 0x135]
	0x025DAE40 TBNZ X9, 0x0, 0x25DAE50
	0x025DAE44 MOV X0, X8
	0x025DAE48 BL 0x1C5C684
	0x025DAE4C MOV X8, X0
	0x025DAE50 LDR X8, [X8 + 0xC0]
	0x025DAE54 LDR X0, [X8]
	0x025DAE58 LDRB W8, [X0 + 0x135]
	0x025DAE5C TBNZ X8, 0x0, 0x25DAE64
	0x025DAE60 BL 0x1C5C684
	0x025DAE64 BL 0x1C16F10
	0x025DAE68 LDR X8, [X20 + 0x20]
	0x025DAE6C MOV X20, X0
	0x025DAE70 LDRB W9, [X8 + 0x135]
	0x025DAE74 TBNZ X9, 0x0, 0x25DAE80
	0x025DAE78 MOV X0, X8
	0x025DAE7C BL 0x1C5C684
	0x025DAE80 MOV X0, X20
	0x025DAE84 MOV X1, X31
	0x025DAE88 BL 0x1E90234
	0x025DAE8C CBZ X20, 0x25DAEA4
	0x025DAE90 STR X19, [X20 + 0x20]
	0x025DAE94 MOV X0, X20
	0x025DAE98 LDP X20, X19, [X31 + 0x10]
	0x025DAE9C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X0
	007 Move X0, [X0+32]
	008 Move X20, X3
	009 Move X19, X2
	010 Move W21, W1
	011 Compare X0, 0
	012 JumpIfNotEqual {24}
	013 Move X8, [X20+32]
	014 Move X0, X22
	015 Move X8, [X8+192]
	016 Move X8, [X8+24]
	017 Move X8, [X8+32]
	018 Move X8, [X8+192]
	019 Move X1, [X8+16]
	020 Call 0x25DB760, X0
	021 Move [X22+32], X0
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, [X20+32]
	025 Move W1, W21
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X8, [X8+192]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X3, [X8+72]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<ByteEnum, Object>.set_Item, X0, X1, X2
	035 Return 
	036 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x025DAEA0 RET
	0x025DAEA4 BL 0x1C16F20
	0x025DAEA8 STP X30, X21, [X31 - 0x20]!
	0x025DAEAC STP X20, X19, [X31 + 0x10]
	0x025DAEB0 MOV X21, X0
	0x025DAEB4 LDR X0, [X0 + 0x20]
	0x025DAEB8 MOV X20, X2
	0x025DAEBC MOV W19, W1
	0x025DAEC0 CBNZ X0, 0x25DAEEC
	0x025DAEC4 LDR X8, [X20 + 0x20]
	0x025DAEC8 MOV X0, X21
	0x025DAECC LDR X8, [X8 + 0xC0]
	0x025DAED0 LDR X8, [X8 + 0x18]
	0x025DAED4 LDR X8, [X8 + 0x20]
	0x025DAED8 LDR X8, [X8 + 0xC0]
	0x025DAEDC LDR X1, [X8 + 0x10]
	0x025DAEE0 BL 0x25DB7D4
	0x025DAEE4 STR X0, [X21 + 0x20]
	0x025DAEE8 CBZ X0, 0x25DAF08
	0x025DAEEC LDR X8, [X20 + 0x20]
	0x025DAEF0 MOV W1, W19
	0x025DAEF4 LDP X20, X19, [X31 + 0x10]
	0x025DAEF8 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, [X0+32]
	006 Move X19, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {20}
	009 Move X8, [X19+32]
	010 Move X0, X20
	011 Move X8, [X8+192]
	012 Move X8, [X8+24]
	013 Move X8, [X8+32]
	014 Move X8, [X8+192]
	015 Move X1, [X8+16]
	016 Call 0x25DB760, X0
	017 Move [X20+32], X0
	018 Compare X0, 0
	019 JumpIfEqual {28}
	020 Move X8, [X19+32]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+192]
	024 Move X1, [X8+80]
	025 Move X30, [X31+32]
	026 Call Dictionary`2<ByteEnum, Object>.get_Count, X0
	027 Return X0
	028 Call 0x1C17F20

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x025DAEFC LDR X2, [X8 + 0x38]
	0x025DAF00 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void Add(TKey key, TValue value)

Disassembly:
	0x025DAF04 B 0x2B11FF8
	0x025DAF08 BL 0x1C16F20
	0x025DAF0C STR D8, [X31 - 0x30]!
	0x025DAF10 STP X30, X21, [X31 + 0x10]
	0x025DAF14 STP X20, X19, [X31 + 0x20]
	0x025DAF18 MOV X21, X0
	0x025DAF1C LDR X0, [X0 + 0x20]
	0x025DAF20 MOV X19, X2
	0x025DAF24 MOV V8.16B, V0.16B
	0x025DAF28 MOV W20, W1
	0x025DAF2C CBNZ X0, 0x25DAF58
	0x025DAF30 LDR X8, [X19 + 0x20]
	0x025DAF34 MOV X0, X21
	0x025DAF38 LDR X8, [X8 + 0xC0]
	0x025DAF3C LDR X8, [X8 + 0x18]
	0x025DAF40 LDR X8, [X8 + 0x20]
	0x025DAF44 LDR X8, [X8 + 0xC0]
	0x025DAF48 LDR X1, [X8 + 0x10]
	0x025DAF4C BL 0x25DB7D4
	0x025DAF50 STR X0, [X21 + 0x20]
	0x025DAF54 CBZ X0, 0x25DAF7C
	0x025DAF58 LDR X8, [X19 + 0x20]
	0x025DAF5C MOV W1, W20
	0x025DAF60 LDP X20, X19, [X31 + 0x20]
	0x025DAF64 LDP X30, X21, [X31 + 0x10]
	0x025DAF68 LDR X8, [X8 + 0xC0]
	0x025DAF6C MOV V0.16B, V8.16B
	0x025DAF70 LDR X2, [X8 + 0x48]
	0x025DAF74 LDR V8, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X0
	007 Move X0, [X0+32]
	008 Move X20, X3
	009 Move X19, X2
	010 Move W21, W1
	011 Compare X0, 0
	012 JumpIfNotEqual {24}
	013 Move X8, [X20+32]
	014 Move X0, X22
	015 Move X8, [X8+192]
	016 Move X8, [X8+24]
	017 Move X8, [X8+32]
	018 Move X8, [X8+192]
	019 Move X1, [X8+16]
	020 Call 0x25DB760, X0
	021 Move [X22+32], X0
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, [X20+32]
	025 Move W1, W21
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X8, [X8+192]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X3, [X8+88]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<ByteEnum, Object>.Add, X0, X1, X2
	035 Return 
	036 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x025DAF78 B 0x2B12080
	0x025DAF7C BL 0x1C16F20
	0x025DAF80 STR X30, [X31 - 0x20]!
	0x025DAF84 STP X20, X19, [X31 + 0x10]
	0x025DAF88 MOV X20, X0
	0x025DAF8C LDR X0, [X0 + 0x20]
	0x025DAF90 MOV X19, X1
	0x025DAF94 CBNZ X0, 0x25DAFC0
	0x025DAF98 LDR X8, [X19 + 0x20]
	0x025DAF9C MOV X0, X20
	0x025DAFA0 LDR X8, [X8 + 0xC0]
	0x025DAFA4 LDR X8, [X8 + 0x18]
	0x025DAFA8 LDR X8, [X8 + 0x20]
	0x025DAFAC LDR X8, [X8 + 0xC0]
	0x025DAFB0 LDR X1, [X8 + 0x10]
	0x025DAFB4 BL 0x25DB7D4
	0x025DAFB8 STR X0, [X20 + 0x20]
	0x025DAFBC CBZ X0, 0x25DAFD8
	0x025DAFC0 LDR X8, [X19 + 0x20]
	0x025DAFC4 LDP X20, X19, [X31 + 0x10]
	0x025DAFC8 LDR X8, [X8 + 0xC0]
	0x025DAFCC LDR X1, [X8 + 0x50]
	0x025DAFD0 LDR X30, [X31], #0x20
	0x025DAFD4 B 0x2B11E68
	0x025DAFD8 BL 0x1C16F20
	0x025DAFDC MOV W0, W31
	0x025DAFE0 RET
	0x025DAFE4 STR D8, [X31 - 0x30]!
	0x025DAFE8 STP X30, X21, [X31 + 0x10]
	0x025DAFEC STP X20, X19, [X31 + 0x20]
	0x025DAFF0 MOV X21, X0
	0x025DAFF4 LDR X0, [X0 + 0x20]
	0x025DAFF8 MOV X19, X2
	0x025DAFFC MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+24]
	005 Move X20, X0
	006 Move X19, X1
	007 Compare X8, 0
	008 JumpIfEqual {19}
	009 Move W2, [X8+24]
	010 Move W9, [X8+28]
	011 Add W9, W9, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move [X8+24], W31
	014 Move [X8+28], W9
	015 Move X0, [X8+16]
	016 Move W1, W31
	017 Move X3, X31
	018 Call Array.Clear, X0, X1, X2
	019 Move X0, [X20+32]
	020 Compare X0, 0
	021 JumpIfNotEqual {33}
	022 Move X8, [X19+32]
	023 Move X0, X20
	024 Move X8, [X8+192]
	025 Move X8, [X8+24]
	026 Move X8, [X8+32]
	027 Move X8, [X8+192]
	028 Move X1, [X8+16]
	029 Call 0x25DB760, X0
	030 Move [X20+32], X0
	031 Compare X0, 0
	032 JumpIfEqual {41}
	033 Move X8, [X19+32]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X8, [X8+192]
	037 Move X1, [X8+112]
	038 Move X30, [X31+32]
	039 Call Dictionary`2<ByteEnum, Object>.Clear, X0
	040 Return 
	041 Call 0x1C17F20

Method: System.Boolean ContainsKey(TKey key)

Disassembly:
	0x025DB000 MOV W20, W1
	0x025DB004 CBNZ X0, 0x25DB030
	0x025DB008 LDR X8, [X19 + 0x20]
	0x025DB00C MOV X0, X21
	0x025DB010 LDR X8, [X8 + 0xC0]
	0x025DB014 LDR X8, [X8 + 0x18]
	0x025DB018 LDR X8, [X8 + 0x20]
	0x025DB01C LDR X8, [X8 + 0xC0]
	0x025DB020 LDR X1, [X8 + 0x10]
	0x025DB024 BL 0x25DB7D4
	0x025DB028 STR X0, [X21 + 0x20]
	0x025DB02C CBZ X0, 0x25DB054
	0x025DB030 LDR X8, [X19 + 0x20]
	0x025DB034 MOV W1, W20
	0x025DB038 LDP X20, X19, [X31 + 0x20]
	0x025DB03C LDP X30, X21, [X31 + 0x10]
	0x025DB040 LDR X8, [X8 + 0xC0]
	0x025DB044 MOV V0.16B, V8.16B
	0x025DB048 LDR X2, [X8 + 0x58]
	0x025DB04C LDR V8, [X31], #0x30
	0x025DB050 B 0x2B12094
	0x025DB054 BL 0x1C16F20
	0x025DB058 STR X30, [X31 - 0x20]!
	0x025DB05C STP X20, X19, [X31 + 0x10]
	0x025DB060 LDR X8, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+32]
	007 Move X20, X2
	008 Move W19, W1
	009 Compare X0, 0
	010 JumpIfNotEqual {22}
	011 Move X8, [X20+32]
	012 Move X0, X21
	013 Move X8, [X8+192]
	014 Move X8, [X8+24]
	015 Move X8, [X8+32]
	016 Move X8, [X8+192]
	017 Move X1, [X8+16]
	018 Call 0x25DB760, X0
	019 Move [X21+32], X0
	020 Compare X0, 0
	021 JumpIfEqual {32}
	022 Move X8, [X20+32]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X8, [X8+192]
	027 Move X2, [X8+120]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Dictionary`2<ByteEnum, Object>.ContainsKey, X0, X1
	031 Return X0
	032 Call 0x1C17F20

Method: System.Boolean Remove(TKey key)

Disassembly:
	0x025DB064 MOV X20, X0
	0x025DB068 MOV X19, X1
	0x025DB06C CBZ X8, 0x25DB07C
	0x025DB070 LDR W9, [X8 + 0x1C]
	0x025DB074 ADD W9, W9, 0x1
	0x025DB078 STP W31, W9, [X8 + 0x18]
	0x025DB07C LDR X0, [X20 + 0x20]
	0x025DB080 CBNZ X0, 0x25DB0AC
	0x025DB084 LDR X8, [X19 + 0x20]
	0x025DB088 MOV X0, X20
	0x025DB08C LDR X8, [X8 + 0xC0]
	0x025DB090 LDR X8, [X8 + 0x18]
	0x025DB094 LDR X8, [X8 + 0x20]
	0x025DB098 LDR X8, [X8 + 0xC0]
	0x025DB09C LDR X1, [X8 + 0x10]
	0x025DB0A0 BL 0x25DB7D4
	0x025DB0A4 STR X0, [X20 + 0x20]
	0x025DB0A8 CBZ X0, 0x25DB0C4
	0x025DB0AC LDR X8, [X19 + 0x20]
	0x025DB0B0 LDP X20, X19, [X31 + 0x10]
	0x025DB0B4 LDR X8, [X8 + 0xC0]
	0x025DB0B8 LDR X1, [X8 + 0x70]
	0x025DB0BC LDR X30, [X31], #0x20
	0x025DB0C0 B 0x2B12220
	0x025DB0C4 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+32]
	007 Move X20, X2
	008 Move W19, W1
	009 Compare X0, 0
	010 JumpIfNotEqual {22}
	011 Move X8, [X20+32]
	012 Move X0, X21
	013 Move X8, [X8+192]
	014 Move X8, [X8+24]
	015 Move X8, [X8+32]
	016 Move X8, [X8+192]
	017 Move X1, [X8+16]
	018 Call 0x25DB760, X0
	019 Move [X21+32], X0
	020 Compare X0, 0
	021 JumpIfEqual {32}
	022 Move X8, [X20+32]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X8, [X8+192]
	027 Move X2, [X8+128]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Dictionary`2<ByteEnum, Object>.Remove, X0, X1
	031 Return X0
	032 Call 0x1C17F20

Method: System.Boolean TryGetValue(TKey key, out TValue value)

Disassembly:
	0x025DB0C8 STP X30, X21, [X31 - 0x20]!
	0x025DB0CC STP X20, X19, [X31 + 0x10]
	0x025DB0D0 MOV X21, X0
	0x025DB0D4 LDR X0, [X0 + 0x20]
	0x025DB0D8 MOV X20, X2
	0x025DB0DC MOV W19, W1
	0x025DB0E0 CBNZ X0, 0x25DB10C
	0x025DB0E4 LDR X8, [X20 + 0x20]
	0x025DB0E8 MOV X0, X21
	0x025DB0EC LDR X8, [X8 + 0xC0]
	0x025DB0F0 LDR X8, [X8 + 0x18]
	0x025DB0F4 LDR X8, [X8 + 0x20]
	0x025DB0F8 LDR X8, [X8 + 0xC0]
	0x025DB0FC LDR X1, [X8 + 0x10]
	0x025DB100 BL 0x25DB7D4
	0x025DB104 STR X0, [X21 + 0x20]
	0x025DB108 CBZ X0, 0x25DB128
	0x025DB10C LDR X8, [X20 + 0x20]
	0x025DB110 MOV W1, W19
	0x025DB114 LDP X20, X19, [X31 + 0x10]
	0x025DB118 LDR X8, [X8 + 0xC0]
	0x025DB11C LDR X2, [X8 + 0x78]
	0x025DB120 LDP X30, X21, [X31], #0x20
	0x025DB124 B 0x2B1228C
	0x025DB128 BL 0x1C16F20
	0x025DB12C STP X30, X21, [X31 - 0x20]!
	0x025DB130 STP X20, X19, [X31 + 0x10]
	0x025DB134 MOV X21, X0
	0x025DB138 LDR X0, [X0 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X0
	007 Move X0, [X0+32]
	008 Move X20, X3
	009 Move X19, X2
	010 Move W21, W1
	011 Compare X0, 0
	012 JumpIfNotEqual {24}
	013 Move X8, [X20+32]
	014 Move X0, X22
	015 Move X8, [X8+192]
	016 Move X8, [X8+24]
	017 Move X8, [X8+32]
	018 Move X8, [X8+192]
	019 Move X1, [X8+16]
	020 Call 0x25DB760, X0
	021 Move [X22+32], X0
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, [X20+32]
	025 Move W1, W21
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X8, [X8+192]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X3, [X8+144]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<ByteEnum, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Collections.Generic.Dictionary`2/KeyCollection<TKey, TValue> get_Keys()

Disassembly:
	0x025DB13C MOV X20, X2
	0x025DB140 MOV W19, W1
	0x025DB144 CBNZ X0, 0x25DB170
	0x025DB148 LDR X8, [X20 + 0x20]
	0x025DB14C MOV X0, X21
	0x025DB150 LDR X8, [X8 + 0xC0]
	0x025DB154 LDR X8, [X8 + 0x18]
	0x025DB158 LDR X8, [X8 + 0x20]
	0x025DB15C LDR X8, [X8 + 0xC0]
	0x025DB160 LDR X1, [X8 + 0x10]
	0x025DB164 BL 0x25DB7D4
	0x025DB168 STR X0, [X21 + 0x20]
	0x025DB16C CBZ X0, 0x25DB18C
	0x025DB170 LDR X8, [X20 + 0x20]
	0x025DB174 MOV W1, W19
	0x025DB178 LDP X20, X19, [X31 + 0x10]
	0x025DB17C LDR X8, [X8 + 0xC0]
	0x025DB180 LDR X2, [X8 + 0x80]
	0x025DB184 LDP X30, X21, [X31], #0x20
	0x025DB188 B 0x2B133F4
	0x025DB18C BL 0x1C16F20
	0x025DB190 STR X30, [X31 - 0x30]!
	0x025DB194 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, [X0+32]
	006 Move X19, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {20}
	009 Move X8, [X19+32]
	010 Move X0, X20
	011 Move X8, [X8+192]
	012 Move X8, [X8+24]
	013 Move X8, [X8+32]
	014 Move X8, [X8+192]
	015 Move X1, [X8+16]
	016 Call 0x25DB760, X0
	017 Move [X20+32], X0
	018 Compare X0, 0
	019 JumpIfEqual {28}
	020 Move X8, [X19+32]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+192]
	024 Move X1, [X8+152]
	025 Move X30, [X31+32]
	026 Call Dictionary`2<ByteEnum, Object>.get_Keys, X0
	027 Return X0
	028 Call 0x1C17F20

Method: System.Collections.Generic.Dictionary`2/ValueCollection<TKey, TValue> get_Values()

Disassembly:
	0x025DB198 STP X20, X19, [X31 + 0x20]
	0x025DB19C MOV X22, X0
	0x025DB1A0 LDR X0, [X0 + 0x20]
	0x025DB1A4 MOV X20, X3
	0x025DB1A8 MOV X19, X2
	0x025DB1AC MOV W21, W1
	0x025DB1B0 CBNZ X0, 0x25DB1DC
	0x025DB1B4 LDR X8, [X20 + 0x20]
	0x025DB1B8 MOV X0, X22
	0x025DB1BC LDR X8, [X8 + 0xC0]
	0x025DB1C0 LDR X8, [X8 + 0x18]
	0x025DB1C4 LDR X8, [X8 + 0x20]
	0x025DB1C8 LDR X8, [X8 + 0xC0]
	0x025DB1CC LDR X1, [X8 + 0x10]
	0x025DB1D0 BL 0x25DB7D4
	0x025DB1D4 STR X0, [X22 + 0x20]
	0x025DB1D8 CBZ X0, 0x25DB200
	0x025DB1DC LDR X8, [X20 + 0x20]
	0x025DB1E0 MOV W1, W21
	0x025DB1E4 MOV X2, X19
	0x025DB1E8 LDP X20, X19, [X31 + 0x20]
	0x025DB1EC LDR X8, [X8 + 0xC0]
	0x025DB1F0 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, [X0+32]
	006 Move X19, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {20}
	009 Move X8, [X19+32]
	010 Move X0, X20
	011 Move X8, [X8+192]
	012 Move X8, [X8+24]
	013 Move X8, [X8+32]
	014 Move X8, [X8+192]
	015 Move X1, [X8+16]
	016 Call 0x25DB760, X0
	017 Move [X20+32], X0
	018 Compare X0, 0
	019 JumpIfEqual {28}
	020 Move X8, [X19+32]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+192]
	024 Move X1, [X8+168]
	025 Move X30, [X31+32]
	026 Call Dictionary`2<ByteEnum, Object>.get_Values, X0
	027 Return X0
	028 Call 0x1C17F20

Method: System.Collections.Generic.Dictionary`2/Enumerator<TKey, TValue> GetEnumerator()

Disassembly:
	0x025DB1F4 LDR X3, [X8 + 0x90]
	0x025DB1F8 LDR X30, [X31], #0x30
	0x025DB1FC B 0x2B139CC
	0x025DB200 BL 0x1C16F20
	0x025DB204 STR X30, [X31 - 0x20]!
	0x025DB208 STP X20, X19, [X31 + 0x10]
	0x025DB20C MOV X20, X0
	0x025DB210 LDR X0, [X0 + 0x20]
	0x025DB214 MOV X19, X1
	0x025DB218 CBNZ X0, 0x25DB244
	0x025DB21C LDR X8, [X19 + 0x20]
	0x025DB220 MOV X0, X20
	0x025DB224 LDR X8, [X8 + 0xC0]
	0x025DB228 LDR X8, [X8 + 0x18]
	0x025DB22C LDR X8, [X8 + 0x20]
	0x025DB230 LDR X8, [X8 + 0xC0]
	0x025DB234 LDR X1, [X8 + 0x10]
	0x025DB238 BL 0x25DB7D4
	0x025DB23C STR X0, [X20 + 0x20]
	0x025DB240 CBZ X0, 0x25DB25C
	0x025DB244 LDR X8, [X19 + 0x20]
	0x025DB248 LDP X20, X19, [X31 + 0x10]
	0x025DB24C LDR X8, [X8 + 0xC0]
	0x025DB250 LDR X1, [X8 + 0x98]
	0x025DB254 LDR X30, [X31], #0x20
	0x025DB258 B 0x2B11E78
	0x025DB25C BL 0x1C16F20
	0x025DB260 STR X30, [X31 - 0x20]!
	0x025DB264 STP X20, X19, [X31 + 0x10]
	0x025DB268 MOV X20, X0
	0x025DB26C LDR X0, [X0 + 0x20]
	0x025DB270 MOV X19, X1
	0x025DB274 CBNZ X0, 0x25DB2A0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X21, X0
	007 Move X0, [X0+32]
	008 Move X20, X1
	009 Move X19, X8
	010 Compare X0, 0
	011 JumpIfNotEqual {23}
	012 Move X8, [X20+32]
	013 Move X0, X21
	014 Move X8, [X8+192]
	015 Move X8, [X8+24]
	016 Move X8, [X8+32]
	017 Move X8, [X8+192]
	018 Move X1, [X8+16]
	019 Call 0x25DB760, X0
	020 Move [X21+32], X0
	021 Compare X0, 0
	022 JumpIfEqual {40}
	023 Move X8, [X20+32]
	024 Move X8, [X8+192]
	025 Move X1, [X8+184]
	026 Add X8, X31, 8
	027 Call Dictionary`2<ByteEnum, Object>.GetEnumerator, X0
	028 Move X8, [X31+40]
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Move X30, [X31+48]
	032 Move X21, [X31+56]
	033 Move [X19+32], X8
	034 Move [X19], V1
	035 Move [X19+8], V0
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Add X31, X31, 80
	039 Return X0
	040 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()

Disassembly:
	0x025DB278 LDR X8, [X19 + 0x20]
	0x025DB27C MOV X0, X20
	0x025DB280 LDR X8, [X8 + 0xC0]
	0x025DB284 LDR X8, [X8 + 0x18]
	0x025DB288 LDR X8, [X8 + 0x20]
	0x025DB28C LDR X8, [X8 + 0xC0]
	0x025DB290 LDR X1, [X8 + 0x10]
	0x025DB294 BL 0x25DB7D4
	0x025DB298 STR X0, [X20 + 0x20]
	0x025DB29C CBZ X0, 0x25DB2B8
	0x025DB2A0 LDR X8, [X19 + 0x20]
	0x025DB2A4 LDP X20, X19, [X31 + 0x10]
	0x025DB2A8 LDR X8, [X8 + 0xC0]
	0x025DB2AC LDR X1, [X8 + 0xA8]
	0x025DB2B0 LDR X30, [X31], #0x20
	0x025DB2B4 B 0x2B11F38
	0x025DB2B8 BL 0x1C16F20
	0x025DB2BC SUB X31, X31, 0x40
	0x025DB2C0 STP X30, X21, [X31 + 0x20]
	0x025DB2C4 STP X20, X19, [X31 + 0x30]
	0x025DB2C8 MOV X21, X0
	0x025DB2CC LDR X0, [X0 + 0x20]
	0x025DB2D0 MOV X20, X1
	0x025DB2D4 MOV X19, X8
	0x025DB2D8 CBNZ X0, 0x25DB304
	0x025DB2DC LDR X8, [X20 + 0x20]
	0x025DB2E0 MOV X0, X21
	0x025DB2E4 LDR X8, [X8 + 0xC0]
	0x025DB2E8 LDR X8, [X8 + 0x18]
	0x025DB2EC LDR X8, [X8 + 0x20]
	0x025DB2F0 LDR X8, [X8 + 0xC0]
	0x025DB2F4 LDR X1, [X8 + 0x10]
	0x025DB2F8 BL 0x25DB7D4
	0x025DB2FC STR X0, [X21 + 0x20]
	0x025DB300 CBZ X0, 0x25DB330
	0x025DB304 LDR X8, [X20 + 0x20]
	0x025DB308 LDR X8, [X8 + 0xC0]
	0x025DB30C LDR X1, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X20, X0
	006 Move X0, [X0+32]
	007 Move X19, X1
	008 Compare X0, 0
	009 JumpIfNotEqual {21}
	010 Move X8, [X19+32]
	011 Move X0, X20
	012 Move X8, [X8+192]
	013 Move X8, [X8+24]
	014 Move X8, [X8+32]
	015 Move X8, [X8+192]
	016 Move X1, [X8+16]
	017 Call 0x25DB760, X0
	018 Move [X20+32], X0
	019 Compare X0, 0
	020 JumpIfEqual {45}
	021 Move X8, [X19+32]
	022 Move X8, [X8+192]
	023 Move X1, [X8+184]
	024 Add X8, X31, 0
	025 Call Dictionary`2<ByteEnum, Object>.GetEnumerator, X0
	026 Move X8, [X31+32]
	027 Move V1, [X31]
	028 Move V0, [X31+16]
	029 Add X1, X31, 0
	030 Move [X31+80], X8
	031 Move [X31+48], V1
	032 Move [X31+56], V0
	033 Move [X31], V1
	034 Move [X31+8], V0
	035 Move [X31+32], X8
	036 Move X8, [X19+32]
	037 Move X8, [X8+192]
	038 Move X0, [X8+192]
	039 Call 0x1C17E04
	040 Move X20, [X31+112]
	041 Move X19, [X31+120]
	042 Move X30, [X31+96]
	043 Add X31, X31, 128
	044 Return X0
	045 Call 0x1C17F20

Method: System.Collections.Generic.ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys()

Disassembly:
	0x025DB310 ADD X8, X31, 0x0
	0x025DB314 BL 0x2B1247C
	0x025DB318 LDP V1, V0, [X31]
	0x025DB31C LDP X30, X21, [X31 + 0x20]
	0x025DB320 STP V1, V0, [X19]
	0x025DB324 LDP X20, X19, [X31 + 0x30]
	0x025DB328 ADD X31, X31, 0x40
	0x025DB32C RET
	0x025DB330 BL 0x1C16F20
	0x025DB334 SUB X31, X31, 0x60
	0x025DB338 STR X30, [X31 + 0x40]
	0x025DB33C STP X20, X19, [X31 + 0x50]
	0x025DB340 MOV X20, X0
	0x025DB344 LDR X0, [X0 + 0x20]
	0x025DB348 MOV X19, X1
	0x025DB34C CBNZ X0, 0x25DB378
	0x025DB350 LDR X8, [X19 + 0x20]
	0x025DB354 MOV X0, X20
	0x025DB358 LDR X8, [X8 + 0xC0]
	0x025DB35C LDR X8, [X8 + 0x18]
	0x025DB360 LDR X8, [X8 + 0x20]
	0x025DB364 LDR X8, [X8 + 0xC0]
	0x025DB368 LDR X1, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, [X0+32]
	006 Move X19, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {20}
	009 Move X8, [X19+32]
	010 Move X0, X20
	011 Move X8, [X8+192]
	012 Move X8, [X8+24]
	013 Move X8, [X8+32]
	014 Move X8, [X8+192]
	015 Move X1, [X8+16]
	016 Call 0x25DB760, X0
	017 Move [X20+32], X0
	018 Compare X0, 0
	019 JumpIfEqual {28}
	020 Move X8, [X19+32]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+192]
	024 Move X1, [X8+152]
	025 Move X30, [X31+32]
	026 Call Dictionary`2<ByteEnum, Object>.get_Keys, X0
	027 Return X0
	028 Call 0x1C17F20

Method: System.Collections.Generic.ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values()

Disassembly:
	0x025DB36C BL 0x25DB7D4
	0x025DB370 STR X0, [X20 + 0x20]
	0x025DB374 CBZ X0, 0x25DB3BC
	0x025DB378 LDR X8, [X19 + 0x20]
	0x025DB37C LDR X8, [X8 + 0xC0]
	0x025DB380 LDR X1, [X8 + 0xB8]
	0x025DB384 ADD X8, X31, 0x0
	0x025DB388 BL 0x2B1247C
	0x025DB38C LDP V1, V0, [X31]
	0x025DB390 ADD X1, X31, 0x0
	0x025DB394 STP V1, V0, [X31 + 0x20]
	0x025DB398 STP V1, V0, [X31]
	0x025DB39C LDR X8, [X19 + 0x20]
	0x025DB3A0 LDR X8, [X8 + 0xC0]
	0x025DB3A4 LDR X0, [X8 + 0xC0]
	0x025DB3A8 BL 0x1C16E04
	0x025DB3AC LDP X20, X19, [X31 + 0x50]
	0x025DB3B0 LDR X30, [X31 + 0x40]
	0x025DB3B4 ADD X31, X31, 0x60
	0x025DB3B8 RET
	0x025DB3BC BL 0x1C16F20
	0x025DB3C0 STR X30, [X31 - 0x20]!
	0x025DB3C4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, [X0+32]
	006 Move X19, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {20}
	009 Move X8, [X19+32]
	010 Move X0, X20
	011 Move X8, [X8+192]
	012 Move X8, [X8+24]
	013 Move X8, [X8+32]
	014 Move X8, [X8+192]
	015 Move X1, [X8+16]
	016 Call 0x25DB760, X0
	017 Move [X20+32], X0
	018 Compare X0, 0
	019 JumpIfEqual {28}
	020 Move X8, [X19+32]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+192]
	024 Move X1, [X8+168]
	025 Move X30, [X31+32]
	026 Call Dictionary`2<ByteEnum, Object>.get_Values, X0
	027 Return X0
	028 Call 0x1C17F20

Method: System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair`2<TKey, TValue> item)

Disassembly:
	0x025DB3C8 MOV X20, X0
	0x025DB3CC LDR X0, [X0 + 0x20]
	0x025DB3D0 MOV X19, X1
	0x025DB3D4 CBNZ X0, 0x25DB400
	0x025DB3D8 LDR X8, [X19 + 0x20]
	0x025DB3DC MOV X0, X20
	0x025DB3E0 LDR X8, [X8 + 0xC0]
	0x025DB3E4 LDR X8, [X8 + 0x18]
	0x025DB3E8 LDR X8, [X8 + 0x20]
	0x025DB3EC LDR X8, [X8 + 0xC0]
	0x025DB3F0 LDR X1, [X8 + 0x10]
	0x025DB3F4 BL 0x25DB7D4
	0x025DB3F8 STR X0, [X20 + 0x20]
	0x025DB3FC CBZ X0, 0x25DB418
	0x025DB400 LDR X8, [X19 + 0x20]
	0x025DB404 LDP X20, X19, [X31 + 0x10]
	0x025DB408 LDR X8, [X8 + 0xC0]
	0x025DB40C LDR X1, [X8 + 0x98]
	0x025DB410 LDR X30, [X31], #0x20
	0x025DB414 B 0x2B11E78
	0x025DB418 BL 0x1C16F20
	0x025DB41C STR X30, [X31 - 0x20]!
	0x025DB420 STP X20, X19, [X31 + 0x10]
	0x025DB424 MOV X20, X0
	0x025DB428 LDR X0, [X0 + 0x20]
	0x025DB42C MOV X19, X1
	0x025DB430 CBNZ X0, 0x25DB45C
	0x025DB434 LDR X8, [X19 + 0x20]
	0x025DB438 MOV X0, X20
	0x025DB43C LDR X8, [X8 + 0xC0]
	0x025DB440 LDR X8, [X8 + 0x18]
	0x025DB444 LDR X8, [X8 + 0x20]
	0x025DB448 LDR X8, [X8 + 0xC0]
	0x025DB44C LDR X1, [X8 + 0x10]
	0x025DB450 BL 0x25DB7D4
	0x025DB454 STR X0, [X20 + 0x20]
	0x025DB458 CBZ X0, 0x25DB474
	0x025DB45C LDR X8, [X19 + 0x20]
	0x025DB460 LDP X20, X19, [X31 + 0x10]
	0x025DB464 LDR X8, [X8 + 0xC0]
	0x025DB468 LDR X1, [X8 + 0xA8]
	0x025DB46C LDR X30, [X31], #0x20
	0x025DB470 B 0x2B11F38
	0x025DB474 BL 0x1C16F20
	0x025DB478 STP X30, X21, [X31 - 0x20]!
	0x025DB47C STP X20, X19, [X31 + 0x10]
	0x025DB480 LDR X8, [X2 + 0x20]
	0x025DB484 MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X20, X1
	008 Move X22, X3
	009 Move X19, X2
	010 Move X8, [X8+192]
	011 Move X1, [X8+224]
	012 Call 0x25DAD0C, X0
	013 Compare X0, 0
	014 JumpIfEqual {55}
	015 Move X8, [X22+32]
	016 Move X21, X0
	017 Move X8, [X8+192]
	018 Move X1, [X8+32]
	019 Move W8, [X1+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {27}
	024 Move X0, X1
	025 Call 0x1C5D684
	026 Move X1, X0
	027 Move X8, [X21]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Compare X9, 0
	030 JumpIfEqual {37}
	031 Move X10, [X8+176]
	032 Add X10, X10, 8
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract X9, X9, 1
	036 Add X10, X10, 16
	037 Move W2, 2
	038 Move X0, X21
	039 Call 0x1C5D788
	040 Move W9, [X10]
	041 Add W9, W9, 2
	042 Add X8, X8, W9
	043 Add X0, X8, 312
	044 Move X4, [X0]
	045 Move X3, [X0+8]
	046 Move X0, X21
	047 Move X1, X20
	048 Move X2, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 CallNoReturn X4
	055 Call 0x1C17F20

Method: System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair`2<TKey, TValue> item)

Disassembly:
	0x025DB488 MOV X21, X2
	0x025DB48C LDR X8, [X8 + 0xC0]
	0x025DB490 LDR X1, [X8 + 0xE0]
	0x025DB494 BL 0x25DADEC
	0x025DB498 CBZ X0, 0x25DB524
	0x025DB49C LDR X8, [X21 + 0x20]
	0x025DB4A0 MOV X20, X0
	0x025DB4A4 LDR X8, [X8 + 0xC0]
	0x025DB4A8 LDR X1, [X8 + 0x20]
	0x025DB4AC LDRB W8, [X1 + 0x135]
	0x025DB4B0 TBNZ X8, 0x0, 0x25DB4C0
	0x025DB4B4 MOV X0, X1
	0x025DB4B8 BL 0x1C5C684
	0x025DB4BC MOV X1, X0
	0x025DB4C0 LDR X8, [X20]
	0x025DB4C4 LDRH W9, [X8 + 0x12E]
	0x025DB4C8 CBZ X9, 0x25DB4EC
	0x025DB4CC LDR X10, [X8 + 0xB0]
	0x025DB4D0 ADD X10, X10, 0x8
	0x025DB4D4 LDUR X11, [X10 - 0x8]
	0x025DB4D8 CMP X11, X1
	0x025DB4DC B.EQ 0x25DB4FC
	0x025DB4E0 SUBS X9, X9, 0x1
	0x025DB4E4 ADD X10, X10, 0x10
	0x025DB4E8 B.NE 0x25DB4D4
	0x025DB4EC MOVZ W2, 0x2
	0x025DB4F0 MOV X0, X20
	0x025DB4F4 BL 0x1C5C788
	0x025DB4F8 B 0x25DB50C
	0x025DB4FC LDR W9, [X10]
	0x025DB500 ADD W9, W9, 0x2
	0x025DB504 ADD X8, X8, W9, 0x4, SXTW
	0x025DB508 ADD X0, X8, 0x138
	0x025DB50C LDP X3, X2, [X0]
	0x025DB510 MOV X0, X20
	0x025DB514 MOV X1, X19
	0x025DB518 LDP X20, X19, [X31 + 0x10]
	0x025DB51C LDP X30, X21, [X31], #0x20
	0x025DB520 BR X3
	0x025DB524 BL 0x1C16F20
	0x025DB528 STP X30, X21, [X31 - 0x20]!
	0x025DB52C STP X20, X19, [X31 + 0x10]
	0x025DB530 LDR X8, [X2 + 0x20]
	0x025DB534 MOV X19, X1
	0x025DB538 MOV X21, X2
	0x025DB53C LDR X8, [X8 + 0xC0]
	0x025DB540 LDR X1, [X8 + 0xE0]
	0x025DB544 BL 0x25DADEC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X20, X1
	008 Move X22, X3
	009 Move X19, X2
	010 Move X8, [X8+192]
	011 Move X1, [X8+224]
	012 Call 0x25DAD0C, X0
	013 Compare X0, 0
	014 JumpIfEqual {55}
	015 Move X8, [X22+32]
	016 Move X21, X0
	017 Move X8, [X8+192]
	018 Move X1, [X8+32]
	019 Move W8, [X1+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {27}
	024 Move X0, X1
	025 Call 0x1C5D684
	026 Move X1, X0
	027 Move X8, [X21]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Compare X9, 0
	030 JumpIfEqual {37}
	031 Move X10, [X8+176]
	032 Add X10, X10, 8
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract X9, X9, 1
	036 Add X10, X10, 16
	037 Move W2, 4
	038 Move X0, X21
	039 Call 0x1C5D788
	040 Move W9, [X10]
	041 Add W9, W9, 4
	042 Add X8, X8, W9
	043 Add X0, X8, 312
	044 Move X4, [X0]
	045 Move X3, [X0+8]
	046 Move X0, X21
	047 Move X1, X20
	048 Move X2, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 CallNoReturn X4
	055 Call 0x1C17F20

Method: System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair`2<TKey, TValue>[] array, System.Int32 arrayIndex)

Disassembly:
	0x025DB548 CBZ X0, 0x25DB5D4
	0x025DB54C LDR X8, [X21 + 0x20]
	0x025DB550 MOV X20, X0
	0x025DB554 LDR X8, [X8 + 0xC0]
	0x025DB558 LDR X1, [X8 + 0x20]
	0x025DB55C LDRB W8, [X1 + 0x135]
	0x025DB560 TBNZ X8, 0x0, 0x25DB570
	0x025DB564 MOV X0, X1
	0x025DB568 BL 0x1C5C684
	0x025DB56C MOV X1, X0
	0x025DB570 LDR X8, [X20]
	0x025DB574 LDRH W9, [X8 + 0x12E]
	0x025DB578 CBZ X9, 0x25DB59C
	0x025DB57C LDR X10, [X8 + 0xB0]
	0x025DB580 ADD X10, X10, 0x8
	0x025DB584 LDUR X11, [X10 - 0x8]
	0x025DB588 CMP X11, X1
	0x025DB58C B.EQ 0x25DB5AC
	0x025DB590 SUBS X9, X9, 0x1
	0x025DB594 ADD X10, X10, 0x10
	0x025DB598 B.NE 0x25DB584
	0x025DB59C MOVZ W2, 0x4
	0x025DB5A0 MOV X0, X20
	0x025DB5A4 BL 0x1C5C788
	0x025DB5A8 B 0x25DB5BC
	0x025DB5AC LDR W9, [X10]
	0x025DB5B0 ADD W9, W9, 0x4
	0x025DB5B4 ADD X8, X8, W9, 0x4, SXTW
	0x025DB5B8 ADD X0, X8, 0x138
	0x025DB5BC LDP X3, X2, [X0]
	0x025DB5C0 MOV X0, X20
	0x025DB5C4 MOV X1, X19
	0x025DB5C8 LDP X20, X19, [X31 + 0x10]
	0x025DB5CC LDP X30, X21, [X31], #0x20
	0x025DB5D0 BR X3
	0x025DB5D4 BL 0x1C16F20
	0x025DB5D8 STR X30, [X31 - 0x30]!
	0x025DB5DC STP X22, X21, [X31 + 0x10]
	0x025DB5E0 STP X20, X19, [X31 + 0x20]
	0x025DB5E4 LDR X8, [X3 + 0x20]
	0x025DB5E8 MOV X20, X1
	0x025DB5EC MOV X22, X3
	0x025DB5F0 MOV W19, W2
	0x025DB5F4 LDR X8, [X8 + 0xC0]
	0x025DB5F8 LDR X1, [X8 + 0xE0]
	0x025DB5FC BL 0x25DADEC
	0x025DB600 CBZ X0, 0x25DB694
	0x025DB604 LDR X8, [X22 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X20, X1
	008 Move X22, X3
	009 Move W19, W2
	010 Move X8, [X8+192]
	011 Move X1, [X8+224]
	012 Call 0x25DAD0C, X0
	013 Compare X0, 0
	014 JumpIfEqual {55}
	015 Move X8, [X22+32]
	016 Move X21, X0
	017 Move X8, [X8+192]
	018 Move X1, [X8+32]
	019 Move W8, [X1+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {27}
	024 Move X0, X1
	025 Call 0x1C5D684
	026 Move X1, X0
	027 Move X8, [X21]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Compare X9, 0
	030 JumpIfEqual {37}
	031 Move X10, [X8+176]
	032 Add X10, X10, 8
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract X9, X9, 1
	036 Add X10, X10, 16
	037 Move W2, 5
	038 Move X0, X21
	039 Call 0x1C5D788
	040 Move W9, [X10]
	041 Add W9, W9, 5
	042 Add X8, X8, W9
	043 Add X0, X8, 312
	044 Move X4, [X0]
	045 Move X3, [X0+8]
	046 Move X0, X21
	047 Move X1, X20
	048 Move W2, W19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 CallNoReturn X4
	055 Call 0x1C17F20

Method: System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair`2<TKey, TValue> item)

Disassembly:
	0x025DB608 MOV X21, X0
	0x025DB60C LDR X8, [X8 + 0xC0]
	0x025DB610 LDR X1, [X8 + 0x20]
	0x025DB614 LDRB W8, [X1 + 0x135]
	0x025DB618 TBNZ X8, 0x0, 0x25DB628
	0x025DB61C MOV X0, X1
	0x025DB620 BL 0x1C5C684
	0x025DB624 MOV X1, X0
	0x025DB628 LDR X8, [X21]
	0x025DB62C LDRH W9, [X8 + 0x12E]
	0x025DB630 CBZ X9, 0x25DB654
	0x025DB634 LDR X10, [X8 + 0xB0]
	0x025DB638 ADD X10, X10, 0x8
	0x025DB63C LDUR X11, [X10 - 0x8]
	0x025DB640 CMP X11, X1
	0x025DB644 B.EQ 0x25DB664
	0x025DB648 SUBS X9, X9, 0x1
	0x025DB64C ADD X10, X10, 0x10
	0x025DB650 B.NE 0x25DB63C
	0x025DB654 MOVZ W2, 0x5
	0x025DB658 MOV X0, X21
	0x025DB65C BL 0x1C5C788
	0x025DB660 B 0x25DB674
	0x025DB664 LDR W9, [X10]
	0x025DB668 ADD W9, W9, 0x5
	0x025DB66C ADD X8, X8, W9, 0x4, SXTW
	0x025DB670 ADD X0, X8, 0x138
	0x025DB674 LDP X4, X3, [X0]
	0x025DB678 MOV X0, X21
	0x025DB67C MOV X1, X20
	0x025DB680 MOV W2, W19
	0x025DB684 LDP X20, X19, [X31 + 0x20]
	0x025DB688 LDP X22, X21, [X31 + 0x10]
	0x025DB68C LDR X30, [X31], #0x30
	0x025DB690 BR X4
	0x025DB694 BL 0x1C16F20
	0x025DB698 STP X30, X21, [X31 - 0x20]!
	0x025DB69C STP X20, X19, [X31 + 0x10]
	0x025DB6A0 LDR X8, [X2 + 0x20]
	0x025DB6A4 MOV X19, X1
	0x025DB6A8 MOV X21, X2
	0x025DB6AC LDR X8, [X8 + 0xC0]
	0x025DB6B0 LDR X1, [X8 + 0xE0]
	0x025DB6B4 BL 0x25DADEC
	0x025DB6B8 CBZ X0, 0x25DB744
	0x025DB6BC LDR X8, [X21 + 0x20]
	0x025DB6C0 MOV X20, X0
	0x025DB6C4 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X20, X1
	008 Move X22, X3
	009 Move X19, X2
	010 Move X8, [X8+192]
	011 Move X1, [X8+224]
	012 Call 0x25DAD0C, X0
	013 Compare X0, 0
	014 JumpIfEqual {55}
	015 Move X8, [X22+32]
	016 Move X21, X0
	017 Move X8, [X8+192]
	018 Move X1, [X8+32]
	019 Move W8, [X1+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {27}
	024 Move X0, X1
	025 Call 0x1C5D684
	026 Move X1, X0
	027 Move X8, [X21]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Compare X9, 0
	030 JumpIfEqual {37}
	031 Move X10, [X8+176]
	032 Add X10, X10, 8
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract X9, X9, 1
	036 Add X10, X10, 16
	037 Move W2, 6
	038 Move X0, X21
	039 Call 0x1C5D788
	040 Move W9, [X10]
	041 Add W9, W9, 6
	042 Add X8, X8, W9
	043 Add X0, X8, 312
	044 Move X4, [X0]
	045 Move X3, [X0+8]
	046 Move X0, X21
	047 Move X1, X20
	048 Move X2, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 CallNoReturn X4
	055 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x025DB6C8 LDR X1, [X8 + 0x20]
	0x025DB6CC LDRB W8, [X1 + 0x135]
	0x025DB6D0 TBNZ X8, 0x0, 0x25DB6E0
	0x025DB6D4 MOV X0, X1
	0x025DB6D8 BL 0x1C5C684
	0x025DB6DC MOV X1, X0
	0x025DB6E0 LDR X8, [X20]
	0x025DB6E4 LDRH W9, [X8 + 0x12E]
	0x025DB6E8 CBZ X9, 0x25DB70C
	0x025DB6EC LDR X10, [X8 + 0xB0]
	0x025DB6F0 ADD X10, X10, 0x8
	0x025DB6F4 LDUR X11, [X10 - 0x8]
	0x025DB6F8 CMP X11, X1
	0x025DB6FC B.EQ 0x25DB71C
	0x025DB700 SUBS X9, X9, 0x1
	0x025DB704 ADD X10, X10, 0x10
	0x025DB708 B.NE 0x25DB6F4
	0x025DB70C MOVZ W2, 0x6
	0x025DB710 MOV X0, X20
	0x025DB714 BL 0x1C5C788
	0x025DB718 B 0x25DB72C
	0x025DB71C LDR W9, [X10]
	0x025DB720 ADD W9, W9, 0x6
	0x025DB724 ADD X8, X8, W9, 0x4, SXTW
	0x025DB728 ADD X0, X8, 0x138
	0x025DB72C LDP X3, X2, [X0]
	0x025DB730 MOV X0, X20
	0x025DB734 MOV X1, X19
	0x025DB738 LDP X20, X19, [X31 + 0x10]
	0x025DB73C LDP X30, X21, [X31], #0x20
	0x025DB740 BR X3
	0x025DB744 BL 0x1C16F20
	0x025DB748 SUB X31, X31, 0x60
	0x025DB74C STR X30, [X31 + 0x40]
	0x025DB750 STP X20, X19, [X31 + 0x50]
	0x025DB754 MOV X20, X0
	0x025DB758 LDR X0, [X0 + 0x20]
	0x025DB75C MOV X19, X1

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X20, X0
	006 Move X0, [X0+32]
	007 Move X19, X1
	008 Compare X0, 0
	009 JumpIfNotEqual {21}
	010 Move X8, [X19+32]
	011 Move X0, X20
	012 Move X8, [X8+192]
	013 Move X8, [X8+24]
	014 Move X8, [X8+32]
	015 Move X8, [X8+192]
	016 Move X1, [X8+16]
	017 Call 0x25DB760, X0
	018 Move [X20+32], X0
	019 Compare X0, 0
	020 JumpIfEqual {45}
	021 Move X8, [X19+32]
	022 Move X8, [X8+192]
	023 Move X1, [X8+184]
	024 Add X8, X31, 0
	025 Call Dictionary`2<ByteEnum, Object>.GetEnumerator, X0
	026 Move X8, [X31+32]
	027 Move V1, [X31]
	028 Move V0, [X31+16]
	029 Add X1, X31, 0
	030 Move [X31+80], X8
	031 Move [X31+48], V1
	032 Move [X31+56], V0
	033 Move [X31], V1
	034 Move [X31+8], V0
	035 Move [X31+32], X8
	036 Move X8, [X19+32]
	037 Move X8, [X8+192]
	038 Move X0, [X8+192]
	039 Call 0x1C17E04
	040 Move X20, [X31+112]
	041 Move X19, [X31+120]
	042 Move X30, [X31+96]
	043 Add X31, X31, 128
	044 Return X0
	045 Call 0x1C17F20

Method: System.Collections.Generic.Dictionary`2<TKey, TValue> CreateDictionary()

Disassembly:
	0x025DB760 CBNZ X0, 0x25DB78C
	0x025DB764 LDR X8, [X19 + 0x20]
	0x025DB768 MOV X0, X20
	0x025DB76C LDR X8, [X8 + 0xC0]
	0x025DB770 LDR X8, [X8 + 0x18]
	0x025DB774 LDR X8, [X8 + 0x20]
	0x025DB778 LDR X8, [X8 + 0xC0]
	0x025DB77C LDR X1, [X8 + 0x10]
	0x025DB780 BL 0x25DB7D4
	0x025DB784 STR X0, [X20 + 0x20]
	0x025DB788 CBZ X0, 0x25DB7D0
	0x025DB78C LDR X8, [X19 + 0x20]
	0x025DB790 LDR X8, [X8 + 0xC0]
	0x025DB794 LDR X1, [X8 + 0xB8]
	0x025DB798 ADD X8, X31, 0x0
	0x025DB79C BL 0x2B1247C
	0x025DB7A0 LDP V1, V0, [X31]
	0x025DB7A4 ADD X1, X31, 0x0
	0x025DB7A8 STP V1, V0, [X31 + 0x20]
	0x025DB7AC STP V1, V0, [X31]
	0x025DB7B0 LDR X8, [X19 + 0x20]
	0x025DB7B4 LDR X8, [X8 + 0xC0]
	0x025DB7B8 LDR X0, [X8 + 0xC0]
	0x025DB7BC BL 0x1C16E04
	0x025DB7C0 LDP X20, X19, [X31 + 0x50]
	0x025DB7C4 LDR X30, [X31 + 0x40]
	0x025DB7C8 ADD X31, X31, 0x60
	0x025DB7CC RET
	0x025DB7D0 BL 0x1C16F20
	0x025DB7D4 SUB X31, X31, 0x60
	0x025DB7D8 STR X30, [X31 + 0x10]
	0x025DB7DC STP X26, X25, [X31 + 0x20]
	0x025DB7E0 STP X24, X23, [X31 + 0x30]
	0x025DB7E4 STP X22, X21, [X31 + 0x40]
	0x025DB7E8 STP X20, X19, [X31 + 0x50]
	0x025DB7EC ADRP X21, 0x1DFE000
	0x025DB7F0 LDRB W8, [X21 + 0xF8A]
	0x025DB7F4 MOV X19, X1
	0x025DB7F8 MOV X20, X0
	0x025DB7FC TBNZ X8, 0x0, 0x25DB814
	0x025DB800 ADRP X0, 0x1B18000
	0x025DB804 LDR X0, [X0 + 0x6C0]
	0x025DB808 BL 0x1C16CF4
	0x025DB80C MOVZ W8, 0x1
	0x025DB810 STRB W8, [X21 + 0xF8A]
	0x025DB814 LDR X8, [X20 + 0x18]
	0x025DB818 CBZ X8, 0x25DB828
	0x025DB81C LDR W9, [X8 + 0x1C]
	0x025DB820 ADD W9, W9, 0x1
	0x025DB824 STP W31, W9, [X8 + 0x18]
	0x025DB828 LDR X8, [X19 + 0x20]
	0x025DB82C ADRP X22, 0x1B18000
	0x025DB830 LDR X8, [X8 + 0xC0]
	0x025DB834 LDR X0, [X8 + 0x8]
	0x025DB838 LDRB W8, [X0 + 0x135]
	0x025DB83C LDR X22, [X22 + 0x6C0]
	0x025DB840 TBNZ X8, 0x0, 0x25DB848
	0x025DB844 BL 0x1C5C684
	0x025DB848 BL 0x1C16F10
	0x025DB84C LDR X8, [X19 + 0x20]
	0x025DB850 MOV X21, X0
	0x025DB854 LDR X8, [X8 + 0xC0]
	0x025DB858 LDR X1, [X8 + 0x118]
	0x025DB85C BL 0x2B117E4
	0x025DB860 LDR X8, [X19 + 0x20]
	0x025DB864 LDR X0, [X22]
	0x025DB868 LDR X8, [X8 + 0xC0]
	0x025DB86C LDR W9, [X0 + 0xE0]
	0x025DB870 LDR X22, [X8 + 0x120]
	0x025DB874 CBNZ W9, 0x25DB87C
	0x025DB878 BL 0x1C16DFC
	0x025DB87C MOV X0, X22
	0x025DB880 MOV X1, X31
	0x025DB884 BL 0x338C698
	0x025DB888 CBZ X0, 0x25DBA80
	0x025DB88C MOV X1, X31
	0x025DB890 BL 0x33970C4
	0x025DB894 LDR X8, [X20 + 0x10]
	0x025DB898 CBZ X8, 0x25DBA84
	0x025DB89C MOV W22, W0
	0x025DB8A0 MOV X23, X31
	0x025DB8A4 MOVZ W26, 0xC
	0x025DB8A8 LDR W9, [X8 + 0x18]
	0x025DB8AC CMP X23, W9, SXTW
	0x025DB8B0 B.GE 0x25DBA84
	0x025DB8B4 CMP X23, X9
	0x025DB8B8 B.CS 0x25DBAA4
	0x025DB8BC ADD X8, X8, X23, 0x3, LSL
	0x025DB8C0 LDR X24, [X8 + 0x20]
	0x025DB8C4 TBNZ X22, 0x0, 0x25DB968
	0x025DB8C8 CBZ X21, 0x25DBA80
	0x025DB8CC LDR X8, [X19 + 0x20]
	0x025DB8D0 MOV X0, X21
	0x025DB8D4 LDR X8, [X8 + 0xC0]
	0x025DB8D8 LDR X1, [X8 + 0x138]
	0x025DB8DC BL 0x2B11E4C
	0x025DB8E0 CBZ X0, 0x25DBA80
	0x025DB8E4 LDR X8, [X19 + 0x20]
	0x025DB8E8 MOV X25, X0
	0x025DB8EC LDR X8, [X8 + 0xC0]
	0x025DB8F0 LDR X1, [X8 + 0x140]
	0x025DB8F4 LDRB W8, [X1 + 0x135]
	0x025DB8F8 TBNZ X8, 0x0, 0x25DB908
	0x025DB8FC MOV X0, X1
	0x025DB900 BL 0x1C5C684
	0x025DB904 MOV X1, X0
	0x025DB908 LDR X8, [X25]
	0x025DB90C LDRH W9, [X8 + 0x12E]
	0x025DB910 CBZ X9, 0x25DB934
	0x025DB914 LDR X10, [X8 + 0xB0]
	0x025DB918 ADD X10, X10, 0x8
	0x025DB91C LDUR X11, [X10 - 0x8]
	0x025DB920 CMP X11, X1
	0x025DB924 B.EQ 0x25DB944
	0x025DB928 SUBS X9, X9, 0x1
	0x025DB92C ADD X10, X10, 0x10
	0x025DB930 B.NE 0x25DB91C
	0x025DB934 MOV X0, X25
	0x025DB938 MOV W2, W31
	0x025DB93C BL 0x1C5C788
	0x025DB940 B 0x25DB950
	0x025DB944 LDRSW X9, [X10]
	0x025DB948 ADD X8, X8, X9, 0x4, LSL
	0x025DB94C ADD X0, X8, 0x138
	0x025DB950 LDP X8, X3, [X0]
	0x025DB954 MOV X0, X25
	0x025DB958 MOV W1, W24
	0x025DB95C MOV W2, W31
	0x025DB960 BLR X8
	0x025DB964 TBNZ X0, 0x0, 0x25DB988
	0x025DB968 CBZ X21, 0x25DBA80
	0x025DB96C LDR X8, [X19 + 0x20]
	0x025DB970 MOV X0, X21
	0x025DB974 MOV W1, W24
	0x025DB978 LDR X8, [X8 + 0xC0]
	0x025DB97C LDR X2, [X8 + 0x78]
	0x025DB980 BL 0x2B1228C
	0x025DB984 TBZ X0, 0x0, 0x25DBA3C
	0x025DB988 LDR X25, [X20 + 0x18]
	0x025DB98C CBNZ X25, 0x25DB9C4
	0x025DB990 LDR X8, [X19 + 0x20]
	0x025DB994 LDR X8, [X8 + 0xC0]
	0x025DB998 LDR X0, [X8 + 0x60]
	0x025DB99C LDRB W8, [X0 + 0x135]
	0x025DB9A0 TBNZ X8, 0x0, 0x25DB9A8
	0x025DB9A4 BL 0x1C5C684
	0x025DB9A8 BL 0x1C16F10
	0x025DB9AC LDR X8, [X19 + 0x20]
	0x025DB9B0 MOV X25, X0
	0x025DB9B4 LDR X8, [X8 + 0xC0]
	0x025DB9B8 LDR X1, [X8 + 0x150]
	0x025DB9BC BL 0x2F3B7FC
	0x025DB9C0 STR X25, [X20 + 0x18]
	0x025DB9C4 STR W31, [X31 + 0x8]
	0x025DB9C8 STR X31, [X31]
	0x025DB9CC LDR X8, [X19 + 0x20]
	0x025DB9D0 ADD X0, X31, 0x0
	0x025DB9D4 MOV X1, X24
	0x025DB9D8 MOV W2, W23
	0x025DB9DC LDR X8, [X8 + 0xC0]
	0x025DB9E0 LDR X3, [X8 + 0x160]
	0x025DB9E4 BL 0x27976D4
	0x025DB9E8 CBZ X25, 0x25DBA80
	0x025DB9EC LDR X8, [X19 + 0x20]
	0x025DB9F0 LDR W10, [X25 + 0x1C]
	0x025DB9F4 LDR X1, [X31]
	0x025DB9F8 LDR W2, [X31 + 0x8]
	0x025DB9FC LDR X9, [X8 + 0xC0]
	0x025DBA00 LDR X8, [X25 + 0x10]
	0x025DBA04 ADD W10, W10, 0x1
	0x025DBA08 LDR X9, [X9 + 0x168]
	0x025DBA0C STR W10, [X25 + 0x1C]
	0x025DBA10 CBZ X8, 0x25DBA80
	0x025DBA14 LDRSW X10, [X25 + 0x18]
	0x025DBA18 LDR W11, [X8 + 0x18]
	0x025DBA1C CMP W10, W11
	0x025DBA20 B.CS 0x25DBA60
	0x025DBA24 ADD W9, W10, 0x1
	0x025DBA28 MADD X8, X10, X26, X8
	0x025DBA2C STR W9, [X25 + 0x18]
	0x025DBA30 STR X1, [X8 + 0x20]
	0x025DBA34 STR W2, [X8 + 0x28]
	0x025DBA38 B 0x25DBA74
	0x025DBA3C LDR X8, [X19 + 0x20]
	0x025DBA40 MOV X0, X21
	0x025DBA44 MOV W1, W24
	0x025DBA48 LDR X8, [X8 + 0xC0]
	0x025DBA4C LDR X2, [X8 + 0x58]
	0x025DBA50 UBFM X8, X24, 0x20, 0x3F
	0x025DBA54 FMOV S0, W8
	0x025DBA58 BL 0x2B12094
	0x025DBA5C B 0x25DBA74
	0x025DBA60 LDR X8, [X9 + 0x20]
	0x025DBA64 MOV X0, X25
	0x025DBA68 LDR X8, [X8 + 0xC0]
	0x025DBA6C LDR X3, [X8 + 0x70]
	0x025DBA70 BL 0x2F3C02C
	0x025DBA74 LDR X8, [X20 + 0x10]
	0x025DBA78 ADD X23, X23, 0x1

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], X30
	003 Move [X31+120], X27
	004 Move [X31+128], X26
	005 Move [X31+136], X25
	006 Move [X31+144], X24
	007 Move [X31+152], X23
	008 Move [X31+160], X22
	009 Move [X31+168], X21
	010 Move [X31+176], X20
	011 Move [X31+184], X19
	012 Move X21, 0x1DFF000
	013 Move W8, [X21+3977]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x1B19000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3977], W8
	025 Move X8, [X20+24]
	026 Compare X8, 0
	027 JumpIfEqual {38}
	028 Move W2, [X8+24]
	029 Move W9, [X8+28]
	030 Add W9, W9, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move [X8+24], W31
	033 Move [X8+28], W9
	034 Move X0, [X8+16]
	035 Move W1, W31
	036 Move X3, X31
	037 Call Array.Clear, X0, X1, X2
	038 Move X8, [X19+32]
	039 Move X22, 0x1B19000
	040 Move X8, [X8+192]
	041 Move X0, [X8+8]
	042 Move W8, [X0+309]
	043 Move X22, [X22+1728]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {49}
	048 Call 0x1C5D684
	049 Call 0x1C17F10
	050 Move X8, [X19+32]
	051 Move X21, X0
	052 Move X8, [X8+192]
	053 Move X1, [X8+280]
	054 Call Dictionary`2<ByteEnum, Object>..ctor, X0
	055 Move X8, [X19+32]
	056 Move X0, [X22]
	057 Move X8, [X8+192]
	058 Move W9, [X0+224]
	059 Move X22, [X8+288]
	060 Compare W9, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X22
	064 Move X1, X31
	065 Call Type.GetTypeFromHandle, X0
	066 Compare X0, 0
	067 JumpIfEqual {224}
	068 Move X1, X31
	069 Call Type.get_IsValueType, X0
	070 Move X8, [X20+16]
	071 Compare X8, 0
	072 JumpIfEqual {225}
	073 Move W22, W0
	074 Move X23, X31
	075 Move W27, 24
	076 Move W9, [X8+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Add X8, X8, X23
	080 Move X25, [X8+32]
	081 Move X24, [X8+40]
	082 Move TEMP, X22
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {133}
	086 Compare X21, 0
	087 JumpIfEqual {224}
	088 Move X8, [X19+32]
	089 Move X0, X21
	090 Move X8, [X8+192]
	091 Move X1, [X8+312]
	092 Call Dictionary`2<ByteEnum, Object>.get_Comparer, X0
	093 Compare X0, 0
	094 JumpIfEqual {224}
	095 Move X8, [X19+32]
	096 Move X26, X0
	097 Move X8, [X8+192]
	098 Move X1, [X8+320]
	099 Move W8, [X1+309]
	100 Move TEMP, X8
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {107}
	104 Move X0, X1
	105 Call 0x1C5D684
	106 Move X1, X0
	107 Move X8, [X26]
	108 NotImplemented "Instruction LDRH not yet implemented."
	109 Compare X9, 0
	110 JumpIfEqual {117}
	111 Move X10, [X8+176]
	112 Add X10, X10, 8
	113 NotImplemented "Instruction LDUR not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Subtract X9, X9, 1
	116 Add X10, X10, 16
	117 Move X0, X26
	118 Move W2, W31
	119 Call 0x1C5D788
	120 NotImplemented "Instruction LDRSW not yet implemented."
	121 Add X8, X8, X9
	122 Add X0, X8, 312
	123 Move X8, [X0]
	124 Move X3, [X0+8]
	125 Move X0, X26
	126 Move W1, W25
	127 Move W2, W31
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfEqual {145}
	133 Compare X21, 0
	134 JumpIfEqual {224}
	135 Move X8, [X19+32]
	136 Move X0, X21
	137 Move W1, W25
	138 Move X8, [X8+192]
	139 Move X2, [X8+120]
	140 Call Dictionary`2<ByteEnum, Object>.ContainsKey, X0, X1
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {203}
	145 Move X26, [X20+24]
	146 Compare X26, 0
	147 JumpIfNotEqual {164}
	148 Move X8, [X19+32]
	149 Move X8, [X8+192]
	150 Move X0, [X8+96]
	151 Move W8, [X0+309]
	152 Move TEMP, X8
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfEqual {157}
	156 Call 0x1C5D684
	157 Call 0x1C17F10
	158 Move X8, [X19+32]
	159 Move X26, X0
	160 Move X8, [X8+192]
	161 Move X1, [X8+336]
	162 Call List`1<ValueTuple`2<Entry<ByteEnum, Object>, Int32>>..ctor, X0
	163 Move [X20+24], X26
	164 Move [X31+24], X31
	165 Move [X31+32], X31
	166 Move [X31+40], X31
	167 Move X8, [X19+32]
	168 Add X0, X31, 24
	169 Move X1, X25
	170 Move X2, X24
	171 Move X8, [X8+192]
	172 Move W3, W23
	173 Move X4, [X8+352]
	174 Call 0x279781C, X0, X1, X2
	175 Compare X26, 0
	176 JumpIfEqual {224}
	177 NotImplemented "Instruction LDUR not yet implemented."
	178 Move X9, [X31+40]
	179 Move [X31], V0
	180 Move [X31+16], X9
	181 Move X8, [X19+32]
	182 Move X8, [X8+192]
	183 Move X8, [X8+360]
	184 Move [X31+3], V0
	185 Move [X31+64], X9
	186 Move W10, [X26+28]
	187 Move X9, [X26+16]
	188 Add W10, W10, 1
	189 Move [X26+28], W10
	190 Compare X9, 0
	191 JumpIfEqual {224}
	192 NotImplemented "Instruction LDRSW not yet implemented."
	193 Move W11, [X9+24]
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Add W8, W10, 1
	196 Move [X26+24], W8
	197 Move X8, [X31+64]
	198 Move V0, [X31+3]
	199 NotImplemented "Instruction NOP not yet implemented."
	200 NotImplemented "Instruction MADD not yet implemented."
	201 Move [X9+48], X8
	202 Move [X9+2], V0
	203 Move X8, [X19+32]
	204 Move X0, X21
	205 Move W1, W25
	206 Move X2, X24
	207 Move X8, [X8+192]
	208 Move X3, [X8+88]
	209 Call Dictionary`2<ByteEnum, Object>.Add, X0, X1, X2
	210 Move X8, [X8+32]
	211 Move V0, [X31+3]
	212 Move X9, [X31+64]
	213 Add X1, X31, 80
	214 Move X8, [X8+192]
	215 Move X0, X26
	216 Move X2, [X8+112]
	217 Move [X31+5], V0
	218 Move [X31+96], X9
	219 Call List`1<ValueTuple`2<Entry<ByteEnum, Object>, Int32>>.AddWithResize, X0, X1
	220 Move X8, [X20+16]
	221 Add X23, X23, 1
	222 Compare X8, 0
	223 JumpIfNotEqual {76}
	224 Call 0x1C17F20
	225 Move X0, X21
	226 Move X20, [X31+176]
	227 Move X19, [X31+184]
	228 Move X22, [X31+160]
	229 Move X21, [X31+168]
	230 Move X24, [X31+144]
	231 Move X23, [X31+152]
	232 Move X26, [X31+128]
	233 Move X25, [X31+136]
	234 Move X30, [X31+112]
	235 Move X27, [X31+120]
	236 Add X31, X31, 192
	237 Return X0
	238 Call 0x1C17F28

Method: System.Void Reset()

Disassembly:
	0x025DBA7C CBNZ X8, 0x25DB8A8
	0x025DBA80 BL 0x1C16F20

ISIL:
	001 Move [X0+32], X31
	002 Return 

Method: System.Void Store()

Disassembly:
	0x025DBA84 MOV X0, X21
	0x025DBA88 LDP X20, X19, [X31 + 0x50]
	0x025DBA8C LDP X22, X21, [X31 + 0x40]
	0x025DBA90 LDP X24, X23, [X31 + 0x30]
	0x025DBA94 LDP X26, X25, [X31 + 0x20]
	0x025DBA98 LDR X30, [X31 + 0x10]
	0x025DBA9C ADD X31, X31, 0x60
	0x025DBAA0 RET
	0x025DBAA4 BL 0x1C16F28
	0x025DBAA8 STR X31, [X0 + 0x20]
	0x025DBAAC RET
	0x025DBAB0 SUB X31, X31, 0xA0
	0x025DBAB4 STR X30, [X31 + 0x60]
	0x025DBAB8 STP X24, X23, [X31 + 0x70]
	0x025DBABC STP X22, X21, [X31 + 0x80]
	0x025DBAC0 STP X20, X19, [X31 + 0x90]
	0x025DBAC4 MOVI V0.2D, 0x0
	0x025DBAC8 STP V0, V0, [X31 + 0x40]
	0x025DBACC STP V0, V0, [X31 + 0x20]
	0x025DBAD0 LDR X8, [X1 + 0x20]
	0x025DBAD4 MOV X19, X1
	0x025DBAD8 MOV X21, X0
	0x025DBADC LDR X8, [X8 + 0xC0]
	0x025DBAE0 LDR X1, [X8 + 0x170]
	0x025DBAE4 BL 0x25DAF80
	0x025DBAE8 LDR X8, [X21 + 0x18]
	0x025DBAEC CBZ X8, 0x25DBAF4
	0x025DBAF0 LDR W8, [X8 + 0x18]
	0x025DBAF4 MOV X20, X21
	0x025DBAF8 LDR X9, [X20 + 0x10]!
	0x025DBAFC ADD W1, W8, W0
	0x025DBB00 CBZ X9, 0x25DBB10
	0x025DBB04 LDR W8, [X9 + 0x18]
	0x025DBB08 CMP W1, W8
	0x025DBB0C B.EQ 0x25DBB24
	0x025DBB10 LDR X8, [X19 + 0x20]
	0x025DBB14 MOV X0, X20
	0x025DBB18 LDR X8, [X8 + 0xC0]
	0x025DBB1C LDR X2, [X8 + 0x180]
	0x025DBB20 BL 0x2112D30
	0x025DBB24 LDR X8, [X19 + 0x20]
	0x025DBB28 MOV X0, X21
	0x025DBB2C LDR X8, [X8 + 0xC0]
	0x025DBB30 LDR X1, [X8 + 0x190]
	0x025DBB34 ADD X8, X31, 0x0
	0x025DBB38 BL 0x25DB2BC
	0x025DBB3C LDP V0, V1, [X31]
	0x025DBB40 MOV W23, W31
	0x025DBB44 STP V0, V1, [X31 + 0x40]
	0x025DBB48 LDR X8, [X19 + 0x20]
	0x025DBB4C LDR X8, [X8 + 0xC0]
	0x025DBB50 LDR X1, [X8 + 0x1C0]
	0x025DBB54 ADD X0, X31, 0x40
	0x025DBB58 BL 0x2C1C4D8
	0x025DBB5C TBZ X0, 0x0, 0x25DBB88
	0x025DBB60 LDR X8, [X20]
	0x025DBB64 CBZ X8, 0x25DBCC4
	0x025DBB68 LDR W9, [X8 + 0x18]
	0x025DBB6C CMP W23, W9
	0x025DBB70 B.CS 0x25DBCC8
	0x025DBB74 LDR V0, [X31 + 0x50]
	0x025DBB78 ADD X8, X8, W23, 0x3, SXTW
	0x025DBB7C ADD W23, W23, 0x1
	0x025DBB80 STR D0, [X8 + 0x20]
	0x025DBB84 B 0x25DBB48
	0x025DBB88 MOV X22, X31
	0x025DBB8C MOVZ W24, 0x9
	0x025DBB90 LDR X8, [X19 + 0x20]
	0x025DBB94 ADD X0, X31, 0x40
	0x025DBB98 LDR X8, [X8 + 0xC0]
	0x025DBB9C LDR X1, [X8 + 0x1C8]
	0x025DBBA0 BL 0x2C1C5DC
	0x025DBBA4 CBNZ X22, 0x25DBCD4
	0x025DBBA8 CMP W24, 0x9
	0x025DBBAC B.EQ 0x25DBBB4
	0x025DBBB0 CBNZ W24, 0x25DBCA0
	0x025DBBB4 LDR X0, [X21 + 0x18]
	0x025DBBB8 CBZ X0, 0x25DBCA0
	0x025DBBBC LDR X8, [X19 + 0x20]
	0x025DBBC0 LDR X8, [X8 + 0xC0]
	0x025DBBC4 LDR X1, [X8 + 0x1D0]
	0x025DBBC8 ADD X8, X31, 0x0
	0x025DBBCC BL 0x2F3CC98
	0x025DBBD0 LDP V0, V1, [X31]
	0x025DBBD4 SUB W21, W23, 0x1
	0x025DBBD8 STP V0, V1, [X31 + 0x20]
	0x025DBBDC LDR X8, [X19 + 0x20]
	0x025DBBE0 LDR X8, [X8 + 0xC0]
	0x025DBBE4 LDR X1, [X8 + 0x1F0]
	0x025DBBE8 ADD X0, X31, 0x20
	0x025DBBEC BL 0x2BB2D44
	0x025DBBF0 TBZ X0, 0x0, 0x25DBC84
	0x025DBBF4 LDR X10, [X20]
	0x025DBBF8 LDRSW X9, [X31 + 0x38]
	0x025DBBFC LDR X8, [X31 + 0x30]
	0x025DBC00 SUB W11, W23, 0x1
	0x025DBC04 CMP X10, 0x0
	0x025DBC08 CSET W12, EQ
	0x025DBC0C CMP W11, W9
	0x025DBC10 B.LE 0x25DBC60
	0x025DBC14 SXTW X11, W21
	0x025DBC18 MOV W13, W21
	0x025DBC1C TBNZ X12, 0x0, 0x25DBCBC
	0x025DBC20 LDR W12, [X10 + 0x18]
	0x025DBC24 SUB W14, W13, 0x1
	0x025DBC28 CMP W14, W12
	0x025DBC2C B.CS 0x25DBCC0
	0x025DBC30 CMP W13, W12
	0x025DBC34 B.CS 0x25DBCB8
	0x025DBC38 ADD X10, X10, X11, 0x3, LSL
	0x025DBC3C LDR X12, [X10 + 0x18]
	0x025DBC40 SUB X11, X11, 0x1
	0x025DBC44 MOV W13, W14
	0x025DBC48 STR X12, [X10 + 0x20]
	0x025DBC4C LDR X10, [X20]
	0x025DBC50 CMP X10, 0x0
	0x025DBC54 CSET W12, EQ
	0x025DBC58 CMP X11, X9
	0x025DBC5C B.GT 0x25DBC1C
	0x025DBC60 CBNZ W12, 0x25DBCCC
	0x025DBC64 LDR W11, [X10 + 0x18]
	0x025DBC68 CMP W9, W11
	0x025DBC6C B.CS 0x25DBCD0
	0x025DBC70 ADD X9, X10, X9, 0x3, LSL
	0x025DBC74 ADD W23, W23, 0x1
	0x025DBC78 ADD W21, W21, 0x1
	0x025DBC7C STR X8, [X9 + 0x20]
	0x025DBC80 B 0x25DBBDC
	0x025DBC84 MOV X20, X31
	0x025DBC88 LDR X8, [X19 + 0x20]
	0x025DBC8C ADD X0, X31, 0x20
	0x025DBC90 LDR X8, [X8 + 0xC0]
	0x025DBC94 LDR X1, [X8 + 0x1F8]
	0x025DBC98 BL 0x2BB2D40
	0x025DBC9C CBNZ X20, 0x25DBCDC
	0x025DBCA0 LDP X20, X19, [X31 + 0x90]
	0x025DBCA4 LDP X22, X21, [X31 + 0x80]
	0x025DBCA8 LDP X24, X23, [X31 + 0x70]
	0x025DBCAC LDR X30, [X31 + 0x60]
	0x025DBCB0 ADD X31, X31, 0xA0
	0x025DBCB4 RET
	0x025DBCB8 BL 0x1C16F28
	0x025DBCBC BL 0x1C16F20
	0x025DBCC0 BL 0x1C16F28
	0x025DBCC4 BL 0x1C16F20
	0x025DBCC8 BL 0x1C16F28
	0x025DBCCC BL 0x1C16F20
	0x025DBCD0 BL 0x1C16F28
	0x025DBCD4 MOV X0, X22
	0x025DBCD8 BL 0x1C16F18
	0x025DBCDC MOV X0, X20
	0x025DBCE0 BL 0x1C16F18
	0x025DBCE4 B 0x25DBD44
	0x025DBCE8 B 0x25DBD44
	0x025DBCEC B 0x25DBCF0
	0x025DBCF0 CMP W1, 0x1
	0x025DBCF4 STR X0, [X31 + 0x68]
	0x025DBCF8 B.NE 0x25DBD14
	0x025DBCFC LDR X0, [X31 + 0x68]
	0x025DBD00 BL 0x3EB1AD0
	0x025DBD04 LDR X22, [X0]
	0x025DBD08 BL 0x3EB1AE0
	0x025DBD0C MOV W24, W31
	0x025DBD10 B 0x25DBB90
	0x025DBD14 MOV X22, X31
	0x025DBD18 B 0x25DBD20
	0x025DBD1C STR X0, [X31 + 0x68]
	0x025DBD20 LDR X8, [X19 + 0x20]
	0x025DBD24 LDR X8, [X8 + 0xC0]
	0x025DBD28 LDR X1, [X8 + 0x1C8]
	0x025DBD2C ADD X0, X31, 0x40
	0x025DBD30 BL 0x2C1C5DC
	0x025DBD34 CBZ X22, 0x25DBD84
	0x025DBD38 MOV X0, X22
	0x025DBD3C BL 0x1C16F18
	0x025DBD40 B 0x25DBD44
	0x025DBD44 CMP W1, 0x1
	0x025DBD48 B.NE 0x25DBD5C
	0x025DBD4C BL 0x3EB1AD0
	0x025DBD50 LDR X20, [X0]
	0x025DBD54 BL 0x3EB1AE0
	0x025DBD58 B 0x25DBC88
	0x025DBD5C STR X0, [X31 + 0x68]
	0x025DBD60 MOV X20, X31
	0x025DBD64 B 0x25DBD6C
	0x025DBD68 STR X0, [X31 + 0x68]
	0x025DBD6C LDR X8, [X19 + 0x20]
	0x025DBD70 LDR X8, [X8 + 0xC0]
	0x025DBD74 LDR X1, [X8 + 0x1F8]
	0x025DBD78 ADD X0, X31, 0x20
	0x025DBD7C BL 0x2BB2D40
	0x025DBD80 CBNZ X20, 0x25DBD8C
	0x025DBD84 LDR X0, [X31 + 0x68]
	0x025DBD88 BL 0x1D2C690
	0x025DBD8C MOV X0, X20
	0x025DBD90 BL 0x1C16F18
	0x025DBD94 BL 0x1990590
	0x025DBD98 STR X31, [X0 + 0x20]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+144], X30
	003 Move [X31+160], X24
	004 Move [X31+168], X23
	005 Move [X31+176], X22
	006 Move [X31+184], X21
	007 Move [X31+192], X20
	008 Move [X31+200], X19
	009 NotImplemented "Instruction MOVI not yet implemented."
	010 Move [X31+128], X31
	011 Move [X31+80], X31
	012 Move [X31+96], V0
	013 Move [X31+104], V0
	014 Move [X31+48], V0
	015 Move [X31+56], V0
	016 Move X8, [X1+32]
	017 Move X19, X1
	018 Move X21, X0
	019 Move X8, [X8+192]
	020 Move X1, [X8+368]
	021 Call 0x25DAEA0, X0
	022 Move X8, [X21+24]
	023 Compare X8, 0
	024 JumpIfEqual {26}
	025 Move W8, [X8+24]
	026 Move X20, X21
	027 Add X20, X20, 16
	028 Move X9, [X20]
	029 Add W1, W8, W0
	030 Compare X9, 0
	031 JumpIfEqual {34}
	032 Move W8, [X9+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X8, [X19+32]
	035 Move X0, X20
	036 Move X8, [X8+192]
	037 Move X2, [X8+384]
	038 Call Array.Resize, X0, X1
	039 Move X8, [X19+32]
	040 Move X0, X21
	041 Move X8, [X8+192]
	042 Move X1, [X8+400]
	043 Add X8, X31, 8
	044 Call 0x25DB1F4, X0
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 Move X8, [X31+40]
	048 Move W23, W31
	049 Move [X31+96], V0
	050 Move [X31+104], V1
	051 Move [X31+128], X8
	052 Move X8, [X19+32]
	053 Move X8, [X8+192]
	054 Move X1, [X8+448]
	055 Add X0, X31, 96
	056 Call Enumerator<ByteEnum, Object>.MoveNext, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {73}
	061 Move X8, [X20]
	062 Compare X8, 0
	063 JumpIfEqual {167}
	064 Move W9, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move W9, [X31+112]
	067 Move X10, [X31+120]
	068 Move X11, W23
	069 Add X8, X8, X11
	070 Add W23, W23, 1
	071 Move [X8+32], X9
	072 Move [X8+40], X10
	073 Move X22, X31
	074 Move W24, 9
	075 Move X8, [X19+32]
	076 Add X0, X31, 96
	077 Move X8, [X8+192]
	078 Move X1, [X8+456]
	079 Call Enumerator<ByteEnum, Object>.Dispose, X0
	080 Compare X22, 0
	081 JumpIfNotEqual {171}
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Compare W24, 0
	084 JumpIfNotEqual {155}
	085 Move X0, [X21+24]
	086 Compare X0, 0
	087 JumpIfEqual {155}
	088 Move X8, [X19+32]
	089 Move X8, [X8+192]
	090 Move X1, [X8+464]
	091 Add X8, X31, 8
	092 Call List`1<ValueTuple`2<Entry<ByteEnum, Object>, Int32>>.GetEnumerator, X0
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 Move X8, [X31+40]
	096 Subtract W21, W23, 1
	097 Move [X31+48], V0
	098 Move [X31+56], V1
	099 Move [X31+80], X8
	100 Move X8, [X19+32]
	101 Move X8, [X8+192]
	102 Move X1, [X8+496]
	103 Add X0, X31, 48
	104 Call Enumerator<ValueTuple`2<Entry<ByteEnum, Object>, Int32>>.MoveNext, X0
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {147}
	109 Move X8, [X20]
	110 Move X9, [X31+80]
	111 Move V0, [X31+4]
	112 Subtract W10, W23, 1
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction CSET not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X11, W21
	117 Move X10, W9
	118 Move W13, W21
	119 Move TEMP, X12
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {165}
	123 Move W12, [X8+24]
	124 Subtract W14, W13, 1
	125 NotImplemented "Instruction CMP not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Add X8, X8, X11
	128 Move V1, [X8+1]
	129 Subtract X11, X11, 1
	130 Move W13, W14
	131 Move [X8+2], V1
	132 Move X8, [X20]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 NotImplemented "Instruction CSET not yet implemented."
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Compare W12, 0
	137 JumpIfNotEqual {169}
	138 Move W10, [X8+24]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X9, X9
	141 ShiftRight X9, 32
	142 And X9, X9, 0x7FFFFFFF
	143 Add W23, W23, 1
	144 Add X8, X8, X9
	145 Add W21, W21, 1
	146 Move [X8+2], V0
	147 Move X20, X31
	148 Move X8, [X19+32]
	149 Add X0, X31, 48
	150 Move X8, [X8+192]
	151 Move X1, [X8+504]
	152 Call Enumerator<ValueTuple`2<Entry<ByteEnum, Object>, Int32>>.Dispose, X0
	153 Compare X20, 0
	154 JumpIfNotEqual {173}
	155 Move X20, [X31+192]
	156 Move X19, [X31+200]
	157 Move X22, [X31+176]
	158 Move X21, [X31+184]
	159 Move X24, [X31+160]
	160 Move X23, [X31+168]
	161 Move X30, [X31+144]
	162 Add X31, X31, 208
	163 Return 
	164 Call 0x1C17F28
	165 Call 0x1C17F20
	166 Call 0x1C17F28
	167 Call 0x1C17F20
	168 Call 0x1C17F28
	169 Call 0x1C17F20
	170 Call 0x1C17F28
	171 Move X0, X22
	172 Call 0x1C17F18
	173 Move X0, X20
	174 Call 0x1C17F18
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move [X31+152], X0
	177 Move X0, [X31+152]
	178 Call 0x3EB2AD0
	179 Move X22, [X0]
	180 Call 0x3EB2AE0
	181 Move W24, W31
	182 Move X22, X31
	183 Move [X31+152], X0
	184 Move X8, [X19+32]
	185 Move X8, [X8+192]
	186 Move X1, [X8+456]
	187 Add X0, X31, 96
	188 Call Enumerator<ByteEnum, Object>.Dispose, X0
	189 Compare X22, 0
	190 JumpIfEqual {207}
	191 Move X0, X22
	192 Call 0x1C17F18
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Call 0x3EB2AD0
	195 Move X20, [X0]
	196 Call 0x3EB2AE0
	197 Move [X31+152], X0
	198 Move X20, X31
	199 Move [X31+152], X0
	200 Move X8, [X19+32]
	201 Move X8, [X8+192]
	202 Move X1, [X8+504]
	203 Add X0, X31, 48
	204 Call Enumerator<ValueTuple`2<Entry<ByteEnum, Object>, Int32>>.Dispose, X0
	205 Compare X20, 0
	206 JumpIfNotEqual {209}
	207 Move X0, [X31+152]
	208 Call 0x1D2D690
	209 Move X0, X20
	210 Call 0x1C17F18
	211 Call 0x1991590

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()

Disassembly:
	0x025DBD9C RET
	0x025DBDA0 LDR X8, [X1 + 0x20]

ISIL:
	001 Move [X0+32], X31
	002 Return 

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()

Disassembly:
	0x025DBDA4 LDR X8, [X8 + 0xC0]
	0x025DBDA8 LDR X1, [X8 + 0x208]
	0x025DBDAC B 0x25DBAB0
	0x025DBDB0 MOV X1, X31

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+520]
	004 Call 0x25DBA84, X0
	005 Return 

Method: System.Void .ctor()

Disassembly:
	0x025DBDB4 B 0x1E90234
	0x025DBDB8 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move X1, X31
	002 Call SerializableDictionary..ctor, X0
	003 Return 

