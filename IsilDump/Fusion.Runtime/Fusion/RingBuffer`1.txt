Type: Fusion.RingBuffer`1

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x025D0A38 CBZ X9, 0x25D0A5C
	0x025D0A3C LDR X10, [X8 + 0xB0]
	0x025D0A40 ADD X10, X10, 0x8
	0x025D0A44 LDUR X11, [X10 - 0x8]
	0x025D0A48 CMP X11, X1
	0x025D0A4C B.EQ 0x25D0A6C
	0x025D0A50 SUBS X9, X9, 0x1
	0x025D0A54 ADD X10, X10, 0x10
	0x025D0A58 B.NE 0x25D0A44
	0x025D0A5C MOV X0, X20
	0x025D0A60 MOV W2, W31
	0x025D0A64 BL 0x1C5C788
	0x025D0A68 B 0x25D0A78
	0x025D0A6C LDRSW X9, [X10]
	0x025D0A70 ADD X8, X8, X9, 0x4, LSL
	0x025D0A74 ADD X0, X8, 0x138
	0x025D0A78 LDP X8, X1, [X0]
	0x025D0A7C MOV X0, X20
	0x025D0A80 BLR X8
	0x025D0A84 CBNZ X21, 0x25D0A90
	0x025D0A88 MOV X0, X22
	0x025D0A8C BL 0x1D2C690
	0x025D0A90 MOV X0, X21
	0x025D0A94 BL 0x1C16F18
	0x025D0A98 BL 0x1990590

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X20, X2
	007 Move W19, W1
	008 Move X21, X0
	009 Move X8, [X8+192]
	010 Move X8, [X8]
	011 Move W9, [X8+309]
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X0, X8
	020 Move W1, W31
	021 Call 0x1C17D6C
	022 Move X8, [X20+32]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, X0
	027 Move X8, [X8+192]
	028 Move X0, X21
	029 Move X3, [X8+8]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]

Method: System.Void .ctor(System.Int32 capacity, T[] items)

Disassembly:
	0x025D0A9C STR X30, [X31 - 0x20]!
	0x025D0AA0 STP X20, X19, [X31 + 0x10]
	0x025D0AA4 LDR X8, [X1 + 0x20]
	0x025D0AA8 MOV X20, X1
	0x025D0AAC MOV X19, X0
	0x025D0AB0 LDR X8, [X8 + 0xC0]
	0x025D0AB4 LDR X8, [X8 + 0xE8]
	0x025D0AB8 LDRB W9, [X8 + 0x135]
	0x025D0ABC TBNZ X9, 0x0, 0x25D0ACC
	0x025D0AC0 MOV X0, X8
	0x025D0AC4 BL 0x1C5C684
	0x025D0AC8 MOV X8, X0
	0x025D0ACC MOV X0, X8
	0x025D0AD0 BL 0x1C16F10
	0x025D0AD4 LDR X8, [X20 + 0x20]
	0x025D0AD8 MOV W1, W31
	0x025D0ADC MOV X20, X0
	0x025D0AE0 LDR X8, [X8 + 0xC0]
	0x025D0AE4 LDR X2, [X8 + 0xF0]
	0x025D0AE8 BL 0x2398A58
	0x025D0AEC CBZ X20, 0x25D0B04
	0x025D0AF0 STR X19, [X20 + 0x20]
	0x025D0AF4 MOV X0, X20
	0x025D0AF8 LDP X20, X19, [X31 + 0x10]
	0x025D0AFC LDR X30, [X31], #0x20
	0x025D0B00 RET
	0x025D0B04 BL 0x1C16F20
	0x025D0B08 LDR X8, [X1 + 0x20]
	0x025D0B0C LDR X8, [X8 + 0xC0]
	0x025D0B10 LDR X1, [X8 + 0x100]
	0x025D0B14 B 0x25D0A9C
	0x025D0B18 LDR W0, [X0 + 0x18]
	0x025D0B1C RET
	0x025D0B20 STR X30, [X31 - 0x10]!
	0x025D0B24 LDR X8, [X0 + 0x10]
	0x025D0B28 CBZ X8, 0x25D0B48
	0x025D0B2C LDP W10, W9, [X0 + 0x18]
	0x025D0B30 LDR W8, [X8 + 0x18]
	0x025D0B34 ADD W9, W10, W9
	0x025D0B38 SDIV W10, W9, W8
	0x025D0B3C MSUB W0, W10, W8, W9
	0x025D0B40 LDR X30, [X31], #0x10
	0x025D0B44 RET
	0x025D0B48 BL 0x1C16F20
	0x025D0B4C STR X30, [X31 - 0x10]!
	0x025D0B50 LDR X8, [X0 + 0x10]
	0x025D0B54 CBZ X8, 0x25D0B74
	0x025D0B58 LDR W9, [X0 + 0x18]
	0x025D0B5C LDR W8, [X8 + 0x18]
	0x025D0B60 ADD W9, W9, W1
	0x025D0B64 SDIV W10, W9, W8
	0x025D0B68 MSUB W0, W10, W8, W9
	0x025D0B6C LDR X30, [X31], #0x10
	0x025D0B70 RET
	0x025D0B74 BL 0x1C16F20
	0x025D0B78 STR X30, [X31 - 0x10]!
	0x025D0B7C LDR X8, [X0 + 0x10]
	0x025D0B80 CBZ X8, 0x25D0B9C
	0x025D0B84 LDR W8, [X8 + 0x18]
	0x025D0B88 SUB W8, W8, 0x1
	0x025D0B8C CMP W8, W1
	0x025D0B90 CSINC W0, W31, W1, EQ
	0x025D0B94 LDR X30, [X31], #0x10
	0x025D0B98 RET
	0x025D0B9C BL 0x1C16F20
	0x025D0BA0 STR X30, [X31 - 0x10]!
	0x025D0BA4 CBNZ W1, 0x25D0BB4
	0x025D0BA8 LDR X8, [X0 + 0x10]
	0x025D0BAC CBZ X8, 0x25D0BC0
	0x025D0BB0 LDR W1, [X8 + 0x18]
	0x025D0BB4 SUB W0, W1, 0x1
	0x025D0BB8 LDR X30, [X31], #0x10
	0x025D0BBC RET
	0x025D0BC0 BL 0x1C16F20
	0x025D0BC4 STP X30, X21, [X31 - 0x20]!
	0x025D0BC8 STP X20, X19, [X31 + 0x10]
	0x025D0BCC LDR W8, [X0 + 0x1C]
	0x025D0BD0 CBZ W8, 0x25D0BE0
	0x025D0BD4 LDP X20, X19, [X31 + 0x10]
	0x025D0BD8 LDP X30, X21, [X31], #0x20
	0x025D0BDC RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W22, W1
	007 Move X1, X31
	008 Move X19, X3
	009 Move X21, X2
	010 Move X20, X0
	011 Call Object..ctor, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Compare X21, 0
	014 JumpIfEqual {54}
	015 Move W8, [X21+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, [X19+32]
	018 Move X8, [X8+192]
	019 Move X0, [X8]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move W1, W22
	027 Call 0x1C17D6C
	028 Move [X20+16], X0
	029 Move W2, [X21+24]
	030 Move X1, X0
	031 Move X0, X21
	032 Move X3, X31
	033 Call Array.Copy, X0, X1, X2
	034 Move [X20+24], W31
	035 Move X8, [X21+24]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move [X20+28], W8
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 
	043 Move X0, 0x1B2C000
	044 Move X0, [X0+1400]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X20, X0
	048 Move X0, 0x1B4E000
	049 Move X0, [X0+408]
	050 Call 0x1C17D08
	051 Move X21, X0
	052 Move X0, 0x1B4E000
	053 Move X0, [X0+88]
	054 Move X0, 0x1B29000
	055 Move X0, [X0+1320]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X20, X0
	059 Move X0, 0x1B4E000
	060 Move X0, [X0+416]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X20
	064 Move X2, X31
	065 Call ArgumentNullException..ctor, X0, X1
	066 Move X0, 0x1B2C000
	067 Move X0, [X0+1400]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X20, X0
	071 Move X0, 0x1B4E000
	072 Move X0, [X0+424]
	073 Call 0x1C17D08
	074 Move X21, X0
	075 Move X0, 0x1B4E000
	076 Move X0, [X0+416]
	077 Call 0x1C17D08
	078 Move X2, X0
	079 Move X0, X20
	080 Move X1, X21
	081 Move X3, X31
	082 Call ArgumentException..ctor, X0, X1, X2
	083 Move X0, X20
	084 Move X1, X19
	085 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x025D0BE0 ADRP X0, 0x1B23000
	0x025D0BE4 LDR X0, [X0 + 0x5B0]

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Int32 get_Capacity()

Disassembly:
	0x025D0BE8 MOV X19, X2
	0x025D0BEC MOV X20, X1
	0x025D0BF0 BL 0x1C16D08
	0x025D0BF4 BL 0x1C16F10
	0x025D0BF8 MOV X1, X20
	0x025D0BFC MOV X2, X31
	0x025D0C00 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_IsEmpty()

Disassembly:
	0x025D0C04 BL 0x337DF1C
	0x025D0C08 MOV X0, X21
	0x025D0C0C MOV X1, X19
	0x025D0C10 BL 0x1C16DEC

ISIL:
	001 Move W8, [X0+28]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsFull()

Disassembly:
	0x025D0C14 SUB X31, X31, 0x20
	0x025D0C18 STP X30, X19, [X31 + 0x10]
	0x025D0C1C LDR X8, [X0 + 0x10]
	0x025D0C20 CBZ X8, 0x25D0CBC
	0x025D0C24 LDR X9, [X1 + 0x20]
	0x025D0C28 LDR W11, [X0 + 0x1C]
	0x025D0C2C MOV X19, X1
	0x025D0C30 LDR X9, [X9 + 0xC0]
	0x025D0C34 CBZ W11, 0x25D0C60
	0x025D0C38 LDR W2, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W9, [X0+28]
	006 Move W8, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: T get_Item(System.Int32 index)

Disassembly:
	0x025D0C3C LDR W10, [X8 + 0x18]
	0x025D0C40 STP X31, X31, [X31]
	0x025D0C44 ADD W11, W2, W11
	0x025D0C48 SDIV W12, W11, W10
	0x025D0C4C MSUB W11, W12, W10, W11
	0x025D0C50 SUBS W3, W11, W2
	0x025D0C54 B.LE 0x25D0C98
	0x025D0C58 LDR X4, [X9 + 0x118]
	0x025D0C5C B 0x25D0CA0
	0x025D0C60 LDR X0, [X9]
	0x025D0C64 LDRB W8, [X0 + 0x135]
	0x025D0C68 TBNZ X8, 0x0, 0x25D0C70
	0x025D0C6C BL 0x1C5C684
	0x025D0C70 MOV W1, W31
	0x025D0C74 BL 0x1C16D6C
	0x025D0C78 STP X31, X31, [X31]
	0x025D0C7C LDR X8, [X19 + 0x20]
	0x025D0C80 MOV X1, X0
	0x025D0C84 ADD X0, X31, 0x0
	0x025D0C88 LDR X8, [X8 + 0xC0]
	0x025D0C8C LDR X2, [X8 + 0x110]
	0x025D0C90 BL 0x2B887D0
	0x025D0C94 B 0x25D0CAC
	0x025D0C98 LDR X4, [X9 + 0x118]
	0x025D0C9C SUB W3, W10, W2
	0x025D0CA0 ADD X0, X31, 0x0
	0x025D0CA4 MOV X1, X8
	0x025D0CA8 BL 0x2B88814
	0x025D0CAC LDP X0, X1, [X31]
	0x025D0CB0 LDP X30, X19, [X31 + 0x10]
	0x025D0CB4 ADD X31, X31, 0x20
	0x025D0CB8 RET
	0x025D0CBC BL 0x1C16F20
	0x025D0CC0 SUB X31, X31, 0x20
	0x025D0CC4 STP X30, X19, [X31 + 0x10]
	0x025D0CC8 LDR X8, [X0 + 0x10]
	0x025D0CCC CBZ X8, 0x25D0D6C
	0x025D0CD0 LDR X9, [X1 + 0x20]
	0x025D0CD4 LDR W10, [X0 + 0x1C]
	0x025D0CD8 MOV X19, X1
	0x025D0CDC LDR X9, [X9 + 0xC0]
	0x025D0CE0 CBZ W10, 0x25D0D1C
	0x025D0CE4 LDR W11, [X0 + 0x18]
	0x025D0CE8 LDR W12, [X8 + 0x18]
	0x025D0CEC STP X31, X31, [X31]
	0x025D0CF0 LDR X4, [X9 + 0x118]
	0x025D0CF4 ADD W10, W11, W10
	0x025D0CF8 SDIV W13, W10, W12
	0x025D0CFC MSUB W3, W13, W12, W10
	0x025D0D00 ADD X0, X31, 0x0
	0x025D0D04 MOV X1, X8
	0x025D0D08 CMP W11, W3
	0x025D0D0C B.GE 0x25D0D54
	0x025D0D10 MOV W2, W3
	0x025D0D14 MOV W3, W31
	0x025D0D18 B 0x25D0D58
	0x025D0D1C LDR X0, [X9]
	0x025D0D20 LDRB W8, [X0 + 0x135]
	0x025D0D24 TBNZ X8, 0x0, 0x25D0D2C
	0x025D0D28 BL 0x1C5C684
	0x025D0D2C MOV W1, W31
	0x025D0D30 BL 0x1C16D6C
	0x025D0D34 STP X31, X31, [X31]
	0x025D0D38 LDR X8, [X19 + 0x20]
	0x025D0D3C MOV X1, X0
	0x025D0D40 ADD X0, X31, 0x0
	0x025D0D44 LDR X8, [X8 + 0xC0]
	0x025D0D48 LDR X2, [X8 + 0x110]
	0x025D0D4C BL 0x2B887D0
	0x025D0D50 B 0x25D0D5C
	0x025D0D54 MOV W2, W31
	0x025D0D58 BL 0x2B88814
	0x025D0D5C LDP X0, X1, [X31]
	0x025D0D60 LDP X30, X19, [X31 + 0x10]
	0x025D0D64 ADD X31, X31, 0x20
	0x025D0D68 RET
	0x025D0D6C BL 0x1C16F20
	0x025D0D70 STP X30, X21, [X31 - 0x20]!
	0x025D0D74 STP X20, X19, [X31 + 0x10]
	0x025D0D78 LDR X8, [X2 + 0x20]
	0x025D0D7C MOV X20, X2
	0x025D0D80 MOV W19, W1
	0x025D0D84 MOV X21, X0
	0x025D0D88 LDR X8, [X8 + 0xC0]
	0x025D0D8C LDR X8, [X8]
	0x025D0D90 LDRB W9, [X8 + 0x135]
	0x025D0D94 TBNZ X9, 0x0, 0x25D0DA4
	0x025D0D98 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move W8, [X0+28]
	008 Compare W8, 0
	009 JumpIfEqual {29}
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X8, [X0+16]
	012 Compare X8, 0
	013 JumpIfEqual {91}
	014 Move W9, [X0+24]
	015 Move W10, [X8+24]
	016 Add W9, W9, W1
	017 NotImplemented "Instruction SDIV not yet implemented."
	018 NotImplemented "Instruction MSUB not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add X8, X8, W9
	021 Move V0, [X8+32]
	022 Move X20, [X31+48]
	023 Move X19, [X31+56]
	024 Move X22, [X31+32]
	025 Move X21, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 64
	028 Return X0
	029 Move [X31+28], W1
	030 Move X0, 0x1B24000
	031 Move X0, [X0+1880]
	032 Move X19, X2
	033 Call 0x1C17D08
	034 Add X1, X31, 28
	035 Call 0x1C17E04
	036 Move X20, X0
	037 Move X0, 0x1B4E000
	038 Move X0, [X0+432]
	039 Call 0x1C17D08
	040 Move X1, X20
	041 Move X2, X31
	042 Call String.Format, X0, X1
	043 Move X20, X0
	044 Move X0, 0x1B2E000
	045 Move X0, [X0+3960]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X21, X0
	051 Call IndexOutOfRangeException..ctor, X0, X1
	052 Move X0, X21
	053 Move X1, X19
	054 Call 0x1C17DEC
	055 Move [X31+24], W1
	056 Move X19, 0x1B24000
	057 Move X19, [X19+1880]
	058 Move X22, X0
	059 Move X20, X2
	060 Move X0, X19
	061 Call 0x1C17D08
	062 Add X1, X31, 24
	063 Call 0x1C17E04
	064 Move W8, [X22+28]
	065 Move X21, X0
	066 Move X0, X19
	067 Move [X31+12], W8
	068 Call 0x1C17D08
	069 Add X1, X31, 12
	070 Call 0x1C17E04
	071 Move X19, X0
	072 Move X0, 0x1B4E000
	073 Move X0, [X0+440]
	074 Call 0x1C17D08
	075 Move X1, X21
	076 Move X2, X19
	077 Move X3, X31
	078 Call String.Format, X0, X1, X2
	079 Move X19, X0
	080 Move X0, 0x1B2E000
	081 Move X0, [X0+3960]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X1, X19
	085 Move X2, X31
	086 Move X21, X0
	087 Call IndexOutOfRangeException..ctor, X0, X1
	088 Move X0, X21
	089 Move X1, X20
	090 Call 0x1C17DEC
	091 Call 0x1C17F20
	092 Call 0x1C17F28

Method: System.Void set_Item(System.Int32 index, T value)

Disassembly:
	0x025D0D9C BL 0x1C5C684
	0x025D0DA0 MOV X8, X0
	0x025D0DA4 MOV X0, X8
	0x025D0DA8 MOV W1, W31
	0x025D0DAC BL 0x1C16D6C
	0x025D0DB0 LDR X8, [X20 + 0x20]
	0x025D0DB4 MOV W1, W19
	0x025D0DB8 LDP X20, X19, [X31 + 0x10]
	0x025D0DBC MOV X2, X0
	0x025D0DC0 LDR X8, [X8 + 0xC0]
	0x025D0DC4 MOV X0, X21
	0x025D0DC8 LDR X3, [X8 + 0x8]
	0x025D0DCC LDP X30, X21, [X31], #0x20
	0x025D0DD0 B 0x25D0DD4
	0x025D0DD4 STR X30, [X31 - 0x30]!
	0x025D0DD8 STP X22, X21, [X31 + 0x10]
	0x025D0DDC STP X20, X19, [X31 + 0x20]
	0x025D0DE0 MOV W22, W1
	0x025D0DE4 MOV X1, X31
	0x025D0DE8 MOV X19, X3
	0x025D0DEC MOV X21, X2
	0x025D0DF0 MOV X20, X0
	0x025D0DF4 BL 0x33BDD8C
	0x025D0DF8 CMP W22, 0x0
	0x025D0DFC B.LE 0x25D0E64
	0x025D0E00 CBZ X21, 0x25D0E94
	0x025D0E04 LDR W8, [X21 + 0x18]
	0x025D0E08 CMP W8, W22
	0x025D0E0C B.GT 0x25D0EC8
	0x025D0E10 LDR X8, [X19 + 0x20]
	0x025D0E14 LDR X8, [X8 + 0xC0]
	0x025D0E18 LDR X0, [X8]
	0x025D0E1C LDRB W8, [X0 + 0x135]
	0x025D0E20 TBNZ X8, 0x0, 0x25D0E28
	0x025D0E24 BL 0x1C5C684
	0x025D0E28 MOV W1, W22
	0x025D0E2C BL 0x1C16D6C
	0x025D0E30 STR X0, [X20 + 0x10]
	0x025D0E34 LDR W2, [X21 + 0x18]
	0x025D0E38 MOV X1, X0
	0x025D0E3C MOV X0, X21
	0x025D0E40 MOV X3, X31
	0x025D0E44 BL 0x33A0C7C
	0x025D0E48 STR W31, [X20 + 0x18]
	0x025D0E4C LDR X8, [X21 + 0x18]
	0x025D0E50 LDP X22, X21, [X31 + 0x10]
	0x025D0E54 STR W8, [X20 + 0x1C]
	0x025D0E58 LDP X20, X19, [X31 + 0x20]
	0x025D0E5C LDR X30, [X31], #0x30
	0x025D0E60 RET
	0x025D0E64 ADRP X0, 0x1B2B000
	0x025D0E68 LDR X0, [X0 + 0x578]
	0x025D0E6C BL 0x1C16D08
	0x025D0E70 BL 0x1C16F10
	0x025D0E74 MOV X20, X0
	0x025D0E78 ADRP X0, 0x1B4D000
	0x025D0E7C LDR X0, [X0 + 0x198]
	0x025D0E80 BL 0x1C16D08
	0x025D0E84 MOV X21, X0
	0x025D0E88 ADRP X0, 0x1B4D000
	0x025D0E8C LDR X0, [X0 + 0x58]
	0x025D0E90 B 0x25D0EF4
	0x025D0E94 ADRP X0, 0x1B28000
	0x025D0E98 LDR X0, [X0 + 0x528]
	0x025D0E9C BL 0x1C16D08
	0x025D0EA0 BL 0x1C16F10
	0x025D0EA4 MOV X20, X0
	0x025D0EA8 ADRP X0, 0x1B4D000
	0x025D0EAC LDR X0, [X0 + 0x1A0]
	0x025D0EB0 BL 0x1C16D08
	0x025D0EB4 MOV X1, X0
	0x025D0EB8 MOV X0, X20
	0x025D0EBC MOV X2, X31
	0x025D0EC0 BL 0x330E100
	0x025D0EC4 B 0x25D0F0C
	0x025D0EC8 ADRP X0, 0x1B2B000
	0x025D0ECC LDR X0, [X0 + 0x578]
	0x025D0ED0 BL 0x1C16D08
	0x025D0ED4 BL 0x1C16F10
	0x025D0ED8 MOV X20, X0
	0x025D0EDC ADRP X0, 0x1B4D000
	0x025D0EE0 LDR X0, [X0 + 0x1A8]
	0x025D0EE4 BL 0x1C16D08
	0x025D0EE8 MOV X21, X0
	0x025D0EEC ADRP X0, 0x1B4D000
	0x025D0EF0 LDR X0, [X0 + 0x1A0]
	0x025D0EF4 BL 0x1C16D08
	0x025D0EF8 MOV X2, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move W8, [X0+28]
	008 Compare W8, 0
	009 JumpIfEqual {29}
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X8, [X0+16]
	012 Compare X8, 0
	013 JumpIfEqual {91}
	014 Move W9, [X0+24]
	015 Move W10, [X8+24]
	016 Add W9, W9, W1
	017 NotImplemented "Instruction SDIV not yet implemented."
	018 NotImplemented "Instruction MSUB not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X20, [X31+48]
	021 Move X19, [X31+56]
	022 Move X22, [X31+32]
	023 Move X21, [X31+40]
	024 Move X30, [X31+16]
	025 Add X8, X8, W9
	026 Move [X8+32], D0
	027 Add X31, X31, 64
	028 Return 
	029 Move [X31+28], W1
	030 Move X0, 0x1B24000
	031 Move X0, [X0+1880]
	032 Move X19, X2
	033 Call 0x1C17D08
	034 Add X1, X31, 28
	035 Call 0x1C17E04
	036 Move X20, X0
	037 Move X0, 0x1B4E000
	038 Move X0, [X0+432]
	039 Call 0x1C17D08
	040 Move X1, X20
	041 Move X2, X31
	042 Call String.Format, X0, X1
	043 Move X20, X0
	044 Move X0, 0x1B2E000
	045 Move X0, [X0+3960]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X21, X0
	051 Call IndexOutOfRangeException..ctor, X0, X1
	052 Move X0, X21
	053 Move X1, X19
	054 Call 0x1C17DEC
	055 Move [X31+24], W1
	056 Move X19, 0x1B24000
	057 Move X19, [X19+1880]
	058 Move X22, X0
	059 Move X20, X2
	060 Move X0, X19
	061 Call 0x1C17D08
	062 Add X1, X31, 24
	063 Call 0x1C17E04
	064 Move W8, [X22+28]
	065 Move X21, X0
	066 Move X0, X19
	067 Move [X31+12], W8
	068 Call 0x1C17D08
	069 Add X1, X31, 12
	070 Call 0x1C17E04
	071 Move X19, X0
	072 Move X0, 0x1B4E000
	073 Move X0, [X0+440]
	074 Call 0x1C17D08
	075 Move X1, X21
	076 Move X2, X19
	077 Move X3, X31
	078 Call String.Format, X0, X1, X2
	079 Move X19, X0
	080 Move X0, 0x1B2E000
	081 Move X0, [X0+3960]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X1, X19
	085 Move X2, X31
	086 Move X21, X0
	087 Call IndexOutOfRangeException..ctor, X0, X1
	088 Move X0, X21
	089 Move X1, X20
	090 Call 0x1C17DEC
	091 Call 0x1C17F20
	092 Call 0x1C17F28

Method: T Front()

Disassembly:
	0x025D0EFC MOV X0, X20
	0x025D0F00 MOV X1, X21
	0x025D0F04 MOV X3, X31
	0x025D0F08 BL 0x330E16C
	0x025D0F0C MOV X0, X20
	0x025D0F10 MOV X1, X19
	0x025D0F14 BL 0x1C16DEC
	0x025D0F18 LDR W0, [X0 + 0x1C]
	0x025D0F1C RET
	0x025D0F20 STR X30, [X31 - 0x10]!
	0x025D0F24 LDR X8, [X0 + 0x10]
	0x025D0F28 CBZ X8, 0x25D0F38
	0x025D0F2C LDR W0, [X8 + 0x18]
	0x025D0F30 LDR X30, [X31], #0x10
	0x025D0F34 RET
	0x025D0F38 BL 0x1C16F20
	0x025D0F3C LDR W8, [X0 + 0x1C]
	0x025D0F40 CMP W8, 0x0
	0x025D0F44 CSET W0, EQ
	0x025D0F48 RET
	0x025D0F4C STR X30, [X31 - 0x10]!
	0x025D0F50 LDR X8, [X0 + 0x10]
	0x025D0F54 CBZ X8, 0x25D0F70
	0x025D0F58 LDR W9, [X0 + 0x1C]
	0x025D0F5C LDR W8, [X8 + 0x18]
	0x025D0F60 CMP W9, W8
	0x025D0F64 CSET W0, EQ
	0x025D0F68 LDR X30, [X31], #0x10
	0x025D0F6C RET
	0x025D0F70 BL 0x1C16F20
	0x025D0F74 SUB X31, X31, 0x40
	0x025D0F78 STR X30, [X31 + 0x10]
	0x025D0F7C STP X22, X21, [X31 + 0x20]
	0x025D0F80 STP X20, X19, [X31 + 0x30]
	0x025D0F84 LDR W8, [X0 + 0x1C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1E0A000
	007 Move X21, 0x1B4E000
	008 Move W8, [X22+3920]
	009 Move X21, [X21+448]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1B4E000
	017 Move X0, [X0+448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3920], W8
	021 Move X8, [X20+32]
	022 Move X1, [X21]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+56]
	026 Call 0x25D1BC4, X0, X1
	027 Move X8, [X19+16]
	028 Compare X8, 0
	029 JumpIfEqual {41}
	030 NotImplemented "Instruction LDRSW not yet implemented."
	031 Move W10, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Add X8, X8, X9
	038 Add X0, X8, 32
	039 Move X30, [X31+48]
	040 Return X0
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: T FrontMut()

Disassembly:
	0x025D0F88 CBZ W8, 0x25D0FD8
	0x025D0F8C CMP W8, W1
	0x025D0F90 B.LE 0x25D1040
	0x025D0F94 LDR X8, [X0 + 0x10]
	0x025D0F98 CBZ X8, 0x25D10D0
	0x025D0F9C LDR W9, [X0 + 0x18]
	0x025D0FA0 LDR W10, [X8 + 0x18]
	0x025D0FA4 ADD W9, W9, W1
	0x025D0FA8 SDIV W11, W9, W10
	0x025D0FAC MSUB W9, W11, W10, W9
	0x025D0FB0 CMP W9, W10
	0x025D0FB4 B.CS 0x25D10D4
	0x025D0FB8 SXTW X9, W9
	0x025D0FBC ADD X8, X8, X9, 0x4, LSL
	0x025D0FC0 LDP X0, X1, [X8 + 0x20]
	0x025D0FC4 LDP X20, X19, [X31 + 0x30]
	0x025D0FC8 LDP X22, X21, [X31 + 0x20]
	0x025D0FCC LDR X30, [X31 + 0x10]
	0x025D0FD0 ADD X31, X31, 0x40
	0x025D0FD4 RET
	0x025D0FD8 STR W1, [X31 + 0x1C]
	0x025D0FDC ADRP X0, 0x1B23000
	0x025D0FE0 LDR X0, [X0 + 0x758]
	0x025D0FE4 MOV X19, X2
	0x025D0FE8 BL 0x1C16D08
	0x025D0FEC ADD X1, X31, 0x1C
	0x025D0FF0 BL 0x1C16E04
	0x025D0FF4 MOV X20, X0
	0x025D0FF8 ADRP X0, 0x1B4D000
	0x025D0FFC LDR X0, [X0 + 0x1B0]
	0x025D1000 BL 0x1C16D08
	0x025D1004 MOV X1, X20
	0x025D1008 MOV X2, X31
	0x025D100C BL 0x321EFD0
	0x025D1010 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1E0A000
	007 Move X21, 0x1B4E000
	008 Move W8, [X22+3921]
	009 Move X21, [X21+448]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1B4E000
	017 Move X0, [X0+448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3921], W8
	021 Move X8, [X20+32]
	022 Move X1, [X21]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+56]
	026 Call 0x25D1BC4, X0, X1
	027 Move X8, [X19+16]
	028 Compare X8, 0
	029 JumpIfEqual {41}
	030 NotImplemented "Instruction LDRSW not yet implemented."
	031 Move W10, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Add X8, X8, X9
	038 Add X0, X8, 32
	039 Move X30, [X31+48]
	040 Return X0
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: T Get(System.Int32 index)

Disassembly:
	0x025D1014 ADRP X0, 0x1B2C000
	0x025D1018 LDR X0, [X0 + 0xF78]
	0x025D101C BL 0x1C16D08
	0x025D1020 BL 0x1C16F10
	0x025D1024 MOV X1, X20
	0x025D1028 MOV X2, X31
	0x025D102C MOV X21, X0
	0x025D1030 BL 0x3379B6C
	0x025D1034 MOV X0, X21
	0x025D1038 MOV X1, X19
	0x025D103C BL 0x1C16DEC
	0x025D1040 STR W1, [X31 + 0x18]
	0x025D1044 ADRP X19, 0x1B22000
	0x025D1048 LDR X19, [X19 + 0x758]
	0x025D104C MOV X22, X0
	0x025D1050 MOV X20, X2
	0x025D1054 MOV X0, X19
	0x025D1058 BL 0x1C16D08
	0x025D105C ADD X1, X31, 0x18
	0x025D1060 BL 0x1C16E04
	0x025D1064 LDR W8, [X22 + 0x1C]
	0x025D1068 MOV X21, X0
	0x025D106C MOV X0, X19
	0x025D1070 STR W8, [X31 + 0xC]
	0x025D1074 BL 0x1C16D08
	0x025D1078 ADD X1, X31, 0xC
	0x025D107C BL 0x1C16E04
	0x025D1080 MOV X19, X0
	0x025D1084 ADRP X0, 0x1B4C000
	0x025D1088 LDR X0, [X0 + 0x1B8]
	0x025D108C BL 0x1C16D08
	0x025D1090 MOV X1, X21
	0x025D1094 MOV X2, X19
	0x025D1098 MOV X3, X31
	0x025D109C BL 0x3227BD4
	0x025D10A0 MOV X19, X0
	0x025D10A4 ADRP X0, 0x1B2C000
	0x025D10A8 LDR X0, [X0 + 0xF78]
	0x025D10AC BL 0x1C16D08
	0x025D10B0 BL 0x1C16F10
	0x025D10B4 MOV X1, X19
	0x025D10B8 MOV X2, X31
	0x025D10BC MOV X21, X0
	0x025D10C0 BL 0x3379B6C
	0x025D10C4 MOV X0, X21
	0x025D10C8 MOV X1, X20
	0x025D10CC BL 0x1C16DEC
	0x025D10D0 BL 0x1C16F20
	0x025D10D4 BL 0x1C16F28
	0x025D10D8 SUB X31, X31, 0x40
	0x025D10DC STR X30, [X31 + 0x10]
	0x025D10E0 STP X22, X21, [X31 + 0x20]
	0x025D10E4 STP X20, X19, [X31 + 0x30]
	0x025D10E8 LDR W8, [X0 + 0x1C]
	0x025D10EC CBZ W8, 0x25D113C
	0x025D10F0 CMP W8, W1
	0x025D10F4 B.LE 0x25D11A4
	0x025D10F8 LDR X8, [X0 + 0x10]
	0x025D10FC CBZ X8, 0x25D1234
	0x025D1100 LDR W9, [X0 + 0x18]
	0x025D1104 LDR W10, [X8 + 0x18]
	0x025D1108 ADD W9, W9, W1
	0x025D110C SDIV W11, W9, W10
	0x025D1110 MSUB W9, W11, W10, W9
	0x025D1114 CMP W9, W10
	0x025D1118 B.CS 0x25D1238
	0x025D111C LDP X20, X19, [X31 + 0x30]
	0x025D1120 LDP X22, X21, [X31 + 0x20]
	0x025D1124 LDR X30, [X31 + 0x10]
	0x025D1128 SXTW X9, W9
	0x025D112C ADD X8, X8, X9, 0x4, LSL
	0x025D1130 STP X2, X3, [X8 + 0x20]
	0x025D1134 ADD X31, X31, 0x40
	0x025D1138 RET
	0x025D113C STR W1, [X31 + 0x1C]
	0x025D1140 ADRP X0, 0x1B22000
	0x025D1144 LDR X0, [X0 + 0x758]
	0x025D1148 MOV X19, X4
	0x025D114C BL 0x1C16D08
	0x025D1150 ADD X1, X31, 0x1C
	0x025D1154 BL 0x1C16E04
	0x025D1158 MOV X20, X0
	0x025D115C ADRP X0, 0x1B4C000
	0x025D1160 LDR X0, [X0 + 0x1B0]
	0x025D1164 BL 0x1C16D08
	0x025D1168 MOV X1, X20
	0x025D116C MOV X2, X31
	0x025D1170 BL 0x321EFD0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move W8, [X0+28]
	008 Compare W8, 0
	009 JumpIfEqual {29}
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X8, [X0+16]
	012 Compare X8, 0
	013 JumpIfEqual {91}
	014 Move W9, [X0+24]
	015 Move W10, [X8+24]
	016 Add W9, W9, W1
	017 NotImplemented "Instruction SDIV not yet implemented."
	018 NotImplemented "Instruction MSUB not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X20, [X31+48]
	021 Move X19, [X31+56]
	022 Move X22, [X31+32]
	023 Move X21, [X31+40]
	024 Move X30, [X31+16]
	025 Add X8, X8, W9
	026 Add X0, X8, 32
	027 Add X31, X31, 64
	028 Return X0
	029 Move [X31+28], W1
	030 Move X0, 0x1B23000
	031 Move X0, [X0+1880]
	032 Move X19, X2
	033 Call 0x1C17D08
	034 Add X1, X31, 28
	035 Call 0x1C17E04
	036 Move X20, X0
	037 Move X0, 0x1B4D000
	038 Move X0, [X0+432]
	039 Call 0x1C17D08
	040 Move X1, X20
	041 Move X2, X31
	042 Call String.Format, X0, X1
	043 Move X20, X0
	044 Move X0, 0x1B2D000
	045 Move X0, [X0+3960]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X21, X0
	051 Call IndexOutOfRangeException..ctor, X0, X1
	052 Move X0, X21
	053 Move X1, X19
	054 Call 0x1C17DEC
	055 Move [X31+24], W1
	056 Move X19, 0x1B23000
	057 Move X19, [X19+1880]
	058 Move X22, X0
	059 Move X20, X2
	060 Move X0, X19
	061 Call 0x1C17D08
	062 Add X1, X31, 24
	063 Call 0x1C17E04
	064 Move W8, [X22+28]
	065 Move X21, X0
	066 Move X0, X19
	067 Move [X31+12], W8
	068 Call 0x1C17D08
	069 Add X1, X31, 12
	070 Call 0x1C17E04
	071 Move X19, X0
	072 Move X0, 0x1B4D000
	073 Move X0, [X0+440]
	074 Call 0x1C17D08
	075 Move X1, X21
	076 Move X2, X19
	077 Move X3, X31
	078 Call String.Format, X0, X1, X2
	079 Move X19, X0
	080 Move X0, 0x1B2D000
	081 Move X0, [X0+3960]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X1, X19
	085 Move X2, X31
	086 Move X21, X0
	087 Call IndexOutOfRangeException..ctor, X0, X1
	088 Move X0, X21
	089 Move X1, X20
	090 Call 0x1C17DEC
	091 Call 0x1C17F20
	092 Call 0x1C17F28

Method: T GetMut(System.Int32 index)

Disassembly:
	0x025D1174 MOV X20, X0
	0x025D1178 ADRP X0, 0x1B2C000
	0x025D117C LDR X0, [X0 + 0xF78]
	0x025D1180 BL 0x1C16D08
	0x025D1184 BL 0x1C16F10
	0x025D1188 MOV X1, X20
	0x025D118C MOV X2, X31
	0x025D1190 MOV X21, X0
	0x025D1194 BL 0x3379B6C
	0x025D1198 MOV X0, X21
	0x025D119C MOV X1, X19
	0x025D11A0 BL 0x1C16DEC
	0x025D11A4 STR W1, [X31 + 0x18]
	0x025D11A8 ADRP X19, 0x1B22000
	0x025D11AC LDR X19, [X19 + 0x758]
	0x025D11B0 MOV X22, X0
	0x025D11B4 MOV X20, X4
	0x025D11B8 MOV X0, X19
	0x025D11BC BL 0x1C16D08
	0x025D11C0 ADD X1, X31, 0x18
	0x025D11C4 BL 0x1C16E04
	0x025D11C8 LDR W8, [X22 + 0x1C]
	0x025D11CC MOV X21, X0
	0x025D11D0 MOV X0, X19
	0x025D11D4 STR W8, [X31 + 0xC]
	0x025D11D8 BL 0x1C16D08
	0x025D11DC ADD X1, X31, 0xC
	0x025D11E0 BL 0x1C16E04
	0x025D11E4 MOV X19, X0
	0x025D11E8 ADRP X0, 0x1B4C000
	0x025D11EC LDR X0, [X0 + 0x1B8]
	0x025D11F0 BL 0x1C16D08
	0x025D11F4 MOV X1, X21
	0x025D11F8 MOV X2, X19
	0x025D11FC MOV X3, X31
	0x025D1200 BL 0x3227BD4
	0x025D1204 MOV X19, X0
	0x025D1208 ADRP X0, 0x1B2C000
	0x025D120C LDR X0, [X0 + 0xF78]
	0x025D1210 BL 0x1C16D08
	0x025D1214 BL 0x1C16F10
	0x025D1218 MOV X1, X19
	0x025D121C MOV X2, X31
	0x025D1220 MOV X21, X0
	0x025D1224 BL 0x3379B6C
	0x025D1228 MOV X0, X21
	0x025D122C MOV X1, X20
	0x025D1230 BL 0x1C16DEC
	0x025D1234 BL 0x1C16F20
	0x025D1238 BL 0x1C16F28
	0x025D123C STR X30, [X31 - 0x30]!
	0x025D1240 STP X22, X21, [X31 + 0x10]
	0x025D1244 STP X20, X19, [X31 + 0x20]
	0x025D1248 ADRP X22, 0x1E08000
	0x025D124C ADRP X21, 0x1B4C000
	0x025D1250 LDRB W8, [X22 + 0xF57]
	0x025D1254 LDR X21, [X21 + 0x1C0]
	0x025D1258 MOV X20, X1
	0x025D125C MOV X19, X0
	0x025D1260 TBNZ X8, 0x0, 0x25D1278
	0x025D1264 ADRP X0, 0x1B4C000
	0x025D1268 LDR X0, [X0 + 0x1C0]
	0x025D126C BL 0x1C16CF4
	0x025D1270 MOVZ W8, 0x1
	0x025D1274 STRB W8, [X22 + 0xF57]
	0x025D1278 LDR X8, [X20 + 0x20]
	0x025D127C LDR X1, [X21]
	0x025D1280 MOV X0, X19
	0x025D1284 LDR X8, [X8 + 0xC0]
	0x025D1288 LDR X2, [X8 + 0x38]
	0x025D128C BL 0x25D1F24
	0x025D1290 LDR X8, [X19 + 0x10]
	0x025D1294 CBZ X8, 0x25D12C0
	0x025D1298 LDRSW X9, [X19 + 0x18]
	0x025D129C LDR W10, [X8 + 0x18]
	0x025D12A0 CMP W9, W10
	0x025D12A4 B.CS 0x25D12C4
	0x025D12A8 LDP X20, X19, [X31 + 0x20]
	0x025D12AC LDP X22, X21, [X31 + 0x10]
	0x025D12B0 ADD X8, X8, X9, 0x4, LSL
	0x025D12B4 ADD X0, X8, 0x20
	0x025D12B8 LDR X30, [X31], #0x30
	0x025D12BC RET
	0x025D12C0 BL 0x1C16F20
	0x025D12C4 BL 0x1C16F28
	0x025D12C8 STR X30, [X31 - 0x30]!
	0x025D12CC STP X22, X21, [X31 + 0x10]
	0x025D12D0 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move W8, [X0+28]
	008 Compare W8, 0
	009 JumpIfEqual {29}
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X8, [X0+16]
	012 Compare X8, 0
	013 JumpIfEqual {91}
	014 Move W9, [X0+24]
	015 Move W10, [X8+24]
	016 Add W9, W9, W1
	017 NotImplemented "Instruction SDIV not yet implemented."
	018 NotImplemented "Instruction MSUB not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X20, [X31+48]
	021 Move X19, [X31+56]
	022 Move X22, [X31+32]
	023 Move X21, [X31+40]
	024 Move X30, [X31+16]
	025 Add X8, X8, W9
	026 Add X0, X8, 32
	027 Add X31, X31, 64
	028 Return X0
	029 Move [X31+28], W1
	030 Move X0, 0x1B23000
	031 Move X0, [X0+1880]
	032 Move X19, X2
	033 Call 0x1C17D08
	034 Add X1, X31, 28
	035 Call 0x1C17E04
	036 Move X20, X0
	037 Move X0, 0x1B4D000
	038 Move X0, [X0+432]
	039 Call 0x1C17D08
	040 Move X1, X20
	041 Move X2, X31
	042 Call String.Format, X0, X1
	043 Move X20, X0
	044 Move X0, 0x1B2D000
	045 Move X0, [X0+3960]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X21, X0
	051 Call IndexOutOfRangeException..ctor, X0, X1
	052 Move X0, X21
	053 Move X1, X19
	054 Call 0x1C17DEC
	055 Move [X31+24], W1
	056 Move X19, 0x1B23000
	057 Move X19, [X19+1880]
	058 Move X22, X0
	059 Move X20, X2
	060 Move X0, X19
	061 Call 0x1C17D08
	062 Add X1, X31, 24
	063 Call 0x1C17E04
	064 Move W8, [X22+28]
	065 Move X21, X0
	066 Move X0, X19
	067 Move [X31+12], W8
	068 Call 0x1C17D08
	069 Add X1, X31, 12
	070 Call 0x1C17E04
	071 Move X19, X0
	072 Move X0, 0x1B4D000
	073 Move X0, [X0+440]
	074 Call 0x1C17D08
	075 Move X1, X21
	076 Move X2, X19
	077 Move X3, X31
	078 Call String.Format, X0, X1, X2
	079 Move X19, X0
	080 Move X0, 0x1B2D000
	081 Move X0, [X0+3960]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X1, X19
	085 Move X2, X31
	086 Move X21, X0
	087 Call IndexOutOfRangeException..ctor, X0, X1
	088 Move X0, X21
	089 Move X1, X20
	090 Call 0x1C17DEC
	091 Call 0x1C17F20
	092 Call 0x1C17F28

Method: T Back()

Disassembly:
	0x025D12D4 ADRP X22, 0x1E08000
	0x025D12D8 ADRP X21, 0x1B4C000
	0x025D12DC LDRB W8, [X22 + 0xF58]
	0x025D12E0 LDR X21, [X21 + 0x1C0]
	0x025D12E4 MOV X20, X1
	0x025D12E8 MOV X19, X0
	0x025D12EC TBNZ X8, 0x0, 0x25D1304
	0x025D12F0 ADRP X0, 0x1B4C000
	0x025D12F4 LDR X0, [X0 + 0x1C0]
	0x025D12F8 BL 0x1C16CF4
	0x025D12FC MOVZ W8, 0x1
	0x025D1300 STRB W8, [X22 + 0xF58]
	0x025D1304 LDR X8, [X20 + 0x20]
	0x025D1308 LDR X1, [X21]
	0x025D130C MOV X0, X19
	0x025D1310 LDR X8, [X8 + 0xC0]
	0x025D1314 LDR X2, [X8 + 0x38]
	0x025D1318 BL 0x25D1F24
	0x025D131C LDR X8, [X19 + 0x10]
	0x025D1320 CBZ X8, 0x25D134C
	0x025D1324 LDRSW X9, [X19 + 0x18]
	0x025D1328 LDR W10, [X8 + 0x18]
	0x025D132C CMP W9, W10
	0x025D1330 B.CS 0x25D1350
	0x025D1334 LDP X20, X19, [X31 + 0x20]
	0x025D1338 LDP X22, X21, [X31 + 0x10]
	0x025D133C ADD X8, X8, X9, 0x4, LSL
	0x025D1340 ADD X0, X8, 0x20
	0x025D1344 LDR X30, [X31], #0x30
	0x025D1348 RET
	0x025D134C BL 0x1C16F20
	0x025D1350 BL 0x1C16F28
	0x025D1354 SUB X31, X31, 0x40
	0x025D1358 STR X30, [X31 + 0x10]
	0x025D135C STP X22, X21, [X31 + 0x20]
	0x025D1360 STP X20, X19, [X31 + 0x30]
	0x025D1364 LDR W8, [X0 + 0x1C]
	0x025D1368 CBZ W8, 0x25D13B4
	0x025D136C CMP W8, W1
	0x025D1370 B.LE 0x25D141C
	0x025D1374 LDR X8, [X0 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1E09000
	007 Move X21, 0x1B4D000
	008 Move W8, [X22+3922]
	009 Move X21, [X21+448]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1B4D000
	017 Move X0, [X0+448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3922], W8
	021 Move X8, [X20+32]
	022 Move X1, [X21]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+56]
	026 Call 0x25D1BC4, X0, X1
	027 Move X8, [X19+16]
	028 Compare X8, 0
	029 JumpIfEqual {48}
	030 Move W10, [X19+24]
	031 Move W9, [X19+28]
	032 Move W11, [X8+24]
	033 Add W9, W10, W9
	034 NotImplemented "Instruction SDIV not yet implemented."
	035 NotImplemented "Instruction MSUB not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Subtract W9, W9, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Add X8, X8, W9
	045 Add X0, X8, 32
	046 Move X30, [X31+48]
	047 Return X0
	048 Call 0x1C17F20
	049 Call 0x1C17F28

Method: T BackMut()

Disassembly:
	0x025D1378 CBZ X8, 0x25D14AC
	0x025D137C LDR W9, [X0 + 0x18]
	0x025D1380 LDR W10, [X8 + 0x18]
	0x025D1384 ADD W9, W9, W1
	0x025D1388 SDIV W11, W9, W10
	0x025D138C MSUB W9, W11, W10, W9
	0x025D1390 CMP W9, W10
	0x025D1394 B.CS 0x25D14B0
	0x025D1398 LDP X20, X19, [X31 + 0x30]
	0x025D139C LDP X22, X21, [X31 + 0x20]
	0x025D13A0 LDR X30, [X31 + 0x10]
	0x025D13A4 ADD X8, X8, W9, 0x4, SXTW
	0x025D13A8 ADD X0, X8, 0x20
	0x025D13AC ADD X31, X31, 0x40
	0x025D13B0 RET
	0x025D13B4 STR W1, [X31 + 0x1C]
	0x025D13B8 ADRP X0, 0x1B22000
	0x025D13BC LDR X0, [X0 + 0x758]
	0x025D13C0 MOV X19, X2
	0x025D13C4 BL 0x1C16D08
	0x025D13C8 ADD X1, X31, 0x1C
	0x025D13CC BL 0x1C16E04
	0x025D13D0 MOV X20, X0
	0x025D13D4 ADRP X0, 0x1B4C000
	0x025D13D8 LDR X0, [X0 + 0x1B0]
	0x025D13DC BL 0x1C16D08
	0x025D13E0 MOV X1, X20
	0x025D13E4 MOV X2, X31
	0x025D13E8 BL 0x321EFD0
	0x025D13EC MOV X20, X0
	0x025D13F0 ADRP X0, 0x1B2C000
	0x025D13F4 LDR X0, [X0 + 0xF78]
	0x025D13F8 BL 0x1C16D08
	0x025D13FC BL 0x1C16F10
	0x025D1400 MOV X1, X20
	0x025D1404 MOV X2, X31
	0x025D1408 MOV X21, X0
	0x025D140C BL 0x3379B6C
	0x025D1410 MOV X0, X21
	0x025D1414 MOV X1, X19
	0x025D1418 BL 0x1C16DEC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1E09000
	007 Move X21, 0x1B4D000
	008 Move W8, [X22+3923]
	009 Move X21, [X21+448]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1B4D000
	017 Move X0, [X0+448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3923], W8
	021 Move X8, [X20+32]
	022 Move X1, [X21]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+56]
	026 Call 0x25D1BC4, X0, X1
	027 Move X8, [X19+16]
	028 Compare X8, 0
	029 JumpIfEqual {48}
	030 Move W10, [X19+24]
	031 Move W9, [X19+28]
	032 Move W11, [X8+24]
	033 Add W9, W10, W9
	034 NotImplemented "Instruction SDIV not yet implemented."
	035 NotImplemented "Instruction MSUB not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Subtract W9, W9, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Add X8, X8, W9
	045 Add X0, X8, 32
	046 Move X30, [X31+48]
	047 Return X0
	048 Call 0x1C17F20
	049 Call 0x1C17F28

Method: System.Void PushBack(T item)

Disassembly:
	0x025D141C STR W1, [X31 + 0x18]
	0x025D1420 ADRP X19, 0x1B22000
	0x025D1424 LDR X19, [X19 + 0x758]
	0x025D1428 MOV X22, X0
	0x025D142C MOV X20, X2
	0x025D1430 MOV X0, X19
	0x025D1434 BL 0x1C16D08
	0x025D1438 ADD X1, X31, 0x18
	0x025D143C BL 0x1C16E04
	0x025D1440 LDR W8, [X22 + 0x1C]
	0x025D1444 MOV X21, X0
	0x025D1448 MOV X0, X19
	0x025D144C STR W8, [X31 + 0xC]
	0x025D1450 BL 0x1C16D08
	0x025D1454 ADD X1, X31, 0xC
	0x025D1458 BL 0x1C16E04
	0x025D145C MOV X19, X0
	0x025D1460 ADRP X0, 0x1B4C000
	0x025D1464 LDR X0, [X0 + 0x1B8]
	0x025D1468 BL 0x1C16D08
	0x025D146C MOV X1, X21
	0x025D1470 MOV X2, X19
	0x025D1474 MOV X3, X31
	0x025D1478 BL 0x3227BD4
	0x025D147C MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X9, [X0+16]
	003 Compare X9, 0
	004 JumpIfEqual {23}
	005 Move W10, [X0+24]
	006 Move W8, [X0+28]
	007 Move W11, [X9+24]
	008 Add W10, W10, W8
	009 NotImplemented "Instruction SDIV not yet implemented."
	010 NotImplemented "Instruction MSUB not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X9, X9, W10
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move [X9+32], D0
	015 Subtract W8, W8, 1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSINC not yet implemented."
	018 Move [X0+24], W8
	019 Add W8, W8, 1
	020 Move [X0+28], W8
	021 Move X30, [X31+16]
	022 Return 
	023 Call 0x1C17F20
	024 Call 0x1C17F28

Method: System.Void PushFront(T item)

Disassembly:
	0x025D1480 ADRP X0, 0x1B2C000
	0x025D1484 LDR X0, [X0 + 0xF78]
	0x025D1488 BL 0x1C16D08
	0x025D148C BL 0x1C16F10
	0x025D1490 MOV X1, X19
	0x025D1494 MOV X2, X31
	0x025D1498 MOV X21, X0
	0x025D149C BL 0x3379B6C
	0x025D14A0 MOV X0, X21
	0x025D14A4 MOV X1, X20
	0x025D14A8 BL 0x1C16DEC
	0x025D14AC BL 0x1C16F20
	0x025D14B0 BL 0x1C16F28
	0x025D14B4 SUB X31, X31, 0x40
	0x025D14B8 STR X30, [X31 + 0x10]
	0x025D14BC STP X22, X21, [X31 + 0x20]
	0x025D14C0 STP X20, X19, [X31 + 0x30]
	0x025D14C4 LDR W8, [X0 + 0x1C]
	0x025D14C8 CBZ W8, 0x25D1514
	0x025D14CC CMP W8, W1
	0x025D14D0 B.LE 0x25D157C
	0x025D14D4 LDR X8, [X0 + 0x10]
	0x025D14D8 CBZ X8, 0x25D160C
	0x025D14DC LDR W9, [X0 + 0x18]
	0x025D14E0 LDR W10, [X8 + 0x18]
	0x025D14E4 ADD W9, W9, W1

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+24]
	003 Move X8, [X0+16]
	004 Compare W9, 0
	005 JumpIfEqual {10}
	006 Subtract W9, W9, 1
	007 Move [X0+24], W9
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Compare X8, 0
	011 JumpIfEqual {25}
	012 Move W9, [X8+24]
	013 Subtract W9, W9, 1
	014 Move [X0+24], W9
	015 Move W10, [X8+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W11, [X0+28]
	018 Add X8, X8, W9
	019 Move [X8+32], D0
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Add W8, W11, 1
	022 Move [X0+28], W8
	023 Move X30, [X31+16]
	024 Return 
	025 Call 0x1C17F20
	026 Call 0x1C17F28

Method: T PopBack()

Disassembly:
	0x025D14E8 SDIV W11, W9, W10
	0x025D14EC MSUB W9, W11, W10, W9
	0x025D14F0 CMP W9, W10
	0x025D14F4 B.CS 0x25D1610
	0x025D14F8 LDP X20, X19, [X31 + 0x30]
	0x025D14FC LDP X22, X21, [X31 + 0x20]
	0x025D1500 LDR X30, [X31 + 0x10]
	0x025D1504 ADD X8, X8, W9, 0x4, SXTW
	0x025D1508 ADD X0, X8, 0x20
	0x025D150C ADD X31, X31, 0x40
	0x025D1510 RET
	0x025D1514 STR W1, [X31 + 0x1C]
	0x025D1518 ADRP X0, 0x1B22000
	0x025D151C LDR X0, [X0 + 0x758]
	0x025D1520 MOV X19, X2
	0x025D1524 BL 0x1C16D08
	0x025D1528 ADD X1, X31, 0x1C
	0x025D152C BL 0x1C16E04
	0x025D1530 MOV X20, X0
	0x025D1534 ADRP X0, 0x1B4C000
	0x025D1538 LDR X0, [X0 + 0x1B0]
	0x025D153C BL 0x1C16D08
	0x025D1540 MOV X1, X20
	0x025D1544 MOV X2, X31
	0x025D1548 BL 0x321EFD0
	0x025D154C MOV X20, X0
	0x025D1550 ADRP X0, 0x1B2C000
	0x025D1554 LDR X0, [X0 + 0xF78]
	0x025D1558 BL 0x1C16D08
	0x025D155C BL 0x1C16F10
	0x025D1560 MOV X1, X20
	0x025D1564 MOV X2, X31
	0x025D1568 MOV X21, X0
	0x025D156C BL 0x3379B6C
	0x025D1570 MOV X0, X21
	0x025D1574 MOV X1, X19
	0x025D1578 BL 0x1C16DEC
	0x025D157C STR W1, [X31 + 0x18]
	0x025D1580 ADRP X19, 0x1B22000
	0x025D1584 LDR X19, [X19 + 0x758]
	0x025D1588 MOV X22, X0
	0x025D158C MOV X20, X2
	0x025D1590 MOV X0, X19
	0x025D1594 BL 0x1C16D08
	0x025D1598 ADD X1, X31, 0x18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1E09000
	007 Move X21, 0x1B4D000
	008 Move W8, [X22+3924]
	009 Move X21, [X21+456]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1B4D000
	017 Move X0, [X0+456]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3924], W8
	021 Move X8, [X20+32]
	022 Move X1, [X21]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+56]
	026 Call 0x25D1BC4, X0, X1
	027 Move X8, [X19+16]
	028 Compare X8, 0
	029 JumpIfEqual {52}
	030 Move W10, [X19+24]
	031 Move W9, [X19+28]
	032 Move W11, [X8+24]
	033 Add W9, W10, W9
	034 NotImplemented "Instruction SDIV not yet implemented."
	035 NotImplemented "Instruction MSUB not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Subtract W9, W9, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X8, X8, W9
	041 Move V0, [X8+32]
	042 Move [X8+32], X31
	043 Move W8, [X19+28]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Subtract W8, W8, 1
	047 Move [X19+28], W8
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X30, [X31+48]
	051 Return X0
	052 Call 0x1C17F20
	053 Call 0x1C17F28

Method: T PopFront()

Disassembly:
	0x025D159C BL 0x1C16E04
	0x025D15A0 LDR W8, [X22 + 0x1C]
	0x025D15A4 MOV X21, X0
	0x025D15A8 MOV X0, X19
	0x025D15AC STR W8, [X31 + 0xC]
	0x025D15B0 BL 0x1C16D08
	0x025D15B4 ADD X1, X31, 0xC
	0x025D15B8 BL 0x1C16E04
	0x025D15BC MOV X19, X0
	0x025D15C0 ADRP X0, 0x1B4C000
	0x025D15C4 LDR X0, [X0 + 0x1B8]
	0x025D15C8 BL 0x1C16D08
	0x025D15CC MOV X1, X21
	0x025D15D0 MOV X2, X19
	0x025D15D4 MOV X3, X31
	0x025D15D8 BL 0x3227BD4
	0x025D15DC MOV X19, X0
	0x025D15E0 ADRP X0, 0x1B2C000
	0x025D15E4 LDR X0, [X0 + 0xF78]
	0x025D15E8 BL 0x1C16D08
	0x025D15EC BL 0x1C16F10
	0x025D15F0 MOV X1, X19
	0x025D15F4 MOV X2, X31
	0x025D15F8 MOV X21, X0
	0x025D15FC BL 0x3379B6C
	0x025D1600 MOV X0, X21
	0x025D1604 MOV X1, X20
	0x025D1608 BL 0x1C16DEC
	0x025D160C BL 0x1C16F20
	0x025D1610 BL 0x1C16F28
	0x025D1614 STR X30, [X31 - 0x30]!
	0x025D1618 STP X22, X21, [X31 + 0x10]
	0x025D161C STP X20, X19, [X31 + 0x20]
	0x025D1620 ADRP X22, 0x1E08000
	0x025D1624 ADRP X21, 0x1B4C000
	0x025D1628 LDRB W8, [X22 + 0xF59]
	0x025D162C LDR X21, [X21 + 0x1C0]
	0x025D1630 MOV X20, X1
	0x025D1634 MOV X19, X0
	0x025D1638 TBNZ X8, 0x0, 0x25D1650
	0x025D163C ADRP X0, 0x1B4C000
	0x025D1640 LDR X0, [X0 + 0x1C0]
	0x025D1644 BL 0x1C16CF4
	0x025D1648 MOVZ W8, 0x1
	0x025D164C STRB W8, [X22 + 0xF59]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1E09000
	007 Move X21, 0x1B4D000
	008 Move W8, [X22+3925]
	009 Move X21, [X21+456]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1B4D000
	017 Move X0, [X0+456]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3925], W8
	021 Move X8, [X20+32]
	022 Move X1, [X21]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+56]
	026 Call 0x25D1BC4, X0, X1
	027 Move X8, [X19+16]
	028 Compare X8, 0
	029 JumpIfEqual {54}
	030 NotImplemented "Instruction LDRSW not yet implemented."
	031 Move W10, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, X9
	034 Move V0, [X8+32]
	035 Move [X8+32], X31
	036 Move X8, [X19+16]
	037 Compare X8, 0
	038 JumpIfEqual {54}
	039 Move W8, [X8+24]
	040 Move W10, [X19+24]
	041 Move W9, [X19+28]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Subtract W8, W8, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Subtract W9, W9, 1
	047 NotImplemented "Instruction CSINC not yet implemented."
	048 Move [X19+24], W8
	049 Move [X19+28], W9
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+48]
	053 Return X0
	054 Call 0x1C17F20
	055 Call 0x1C17F28

Method: System.Void Clear()

Disassembly:
	0x025D1650 LDR X8, [X20 + 0x20]
	0x025D1654 LDR X1, [X21]
	0x025D1658 MOV X0, X19
	0x025D165C LDR X8, [X8 + 0xC0]
	0x025D1660 LDR X2, [X8 + 0x38]
	0x025D1664 BL 0x25D1F24
	0x025D1668 LDR X8, [X19 + 0x10]
	0x025D166C CBZ X8, 0x25D16B0
	0x025D1670 LDP W10, W9, [X19 + 0x18]
	0x025D1674 LDR W11, [X8 + 0x18]
	0x025D1678 ADD W9, W10, W9

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+16]
	004 Move [X8+24], X31
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move W2, [X0+24]
	008 Move W1, W31
	009 Move X3, X31
	010 Move X30, [X31+16]
	011 Call Array.Clear, X0, X1, X2
	012 Return 
	013 Call 0x1C17F20

Method: System.Collections.Generic.IList`1<System.ArraySegment`1<T>> ToArraySegments()

Disassembly:
	0x025D167C SDIV W10, W9, W11
	0x025D1680 MSUB W9, W10, W11, W9
	0x025D1684 CMP W9, 0x0
	0x025D1688 CSEL W9, W11, W9, EQ
	0x025D168C SUB W9, W9, 0x1
	0x025D1690 CMP W9, W11
	0x025D1694 B.CS 0x25D16B4
	0x025D1698 LDP X20, X19, [X31 + 0x20]
	0x025D169C LDP X22, X21, [X31 + 0x10]
	0x025D16A0 ADD X8, X8, W9, 0x4, SXTW
	0x025D16A4 ADD X0, X8, 0x20
	0x025D16A8 LDR X30, [X31], #0x30
	0x025D16AC RET
	0x025D16B0 BL 0x1C16F20
	0x025D16B4 BL 0x1C16F28
	0x025D16B8 STR X30, [X31 - 0x30]!
	0x025D16BC STP X22, X21, [X31 + 0x10]
	0x025D16C0 STP X20, X19, [X31 + 0x20]
	0x025D16C4 ADRP X22, 0x1E08000
	0x025D16C8 ADRP X21, 0x1B4C000
	0x025D16CC LDRB W8, [X22 + 0xF5A]
	0x025D16D0 LDR X21, [X21 + 0x1C0]
	0x025D16D4 MOV X20, X1
	0x025D16D8 MOV X19, X0
	0x025D16DC TBNZ X8, 0x0, 0x25D16F4
	0x025D16E0 ADRP X0, 0x1B4C000
	0x025D16E4 LDR X0, [X0 + 0x1C0]
	0x025D16E8 BL 0x1C16CF4
	0x025D16EC MOVZ W8, 0x1
	0x025D16F0 STRB W8, [X22 + 0xF5A]
	0x025D16F4 LDR X8, [X20 + 0x20]
	0x025D16F8 LDR X1, [X21]
	0x025D16FC MOV X0, X19
	0x025D1700 LDR X8, [X8 + 0xC0]
	0x025D1704 LDR X2, [X8 + 0x38]
	0x025D1708 BL 0x25D1F24
	0x025D170C LDR X8, [X19 + 0x10]
	0x025D1710 CBZ X8, 0x25D1754
	0x025D1714 LDP W10, W9, [X19 + 0x18]
	0x025D1718 LDR W11, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move X8, [X8+192]
	009 Move X8, [X8+112]
	010 Move W9, [X8+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {18}
	015 Move X0, X8
	016 Call 0x1C5D684
	017 Move X8, X0
	018 Move W1, 2
	019 Move X0, X8
	020 Call 0x1C17D6C
	021 Move X8, [X19+32]
	022 Move X21, X0
	023 Move X0, X20
	024 Move X8, [X8+192]
	025 Move X1, [X8+120]
	026 Call 0x25D1C14, X0
	027 Compare X21, 0
	028 JumpIfEqual {50}
	029 Move W8, [X21+24]
	030 Compare W8, 0
	031 JumpIfEqual {49}
	032 Move [X21+32], X0
	033 Move [X21+40], X1
	034 Move X8, [X19+32]
	035 Move X0, X20
	036 Move X8, [X8+192]
	037 Move X1, [X8+136]
	038 Call 0x25D1CC0, X0
	039 Move W8, [X21+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move [X21+48], X0
	044 Move [X21+56], X1
	045 Move X0, X21
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1C17F28
	050 Call 0x1C17F20

Method: T[] ToArray()

Disassembly:
	0x025D171C ADD W9, W10, W9
	0x025D1720 SDIV W10, W9, W11
	0x025D1724 MSUB W9, W10, W11, W9
	0x025D1728 CMP W9, 0x0
	0x025D172C CSEL W9, W11, W9, EQ
	0x025D1730 SUB W9, W9, 0x1
	0x025D1734 CMP W9, W11
	0x025D1738 B.CS 0x25D1758
	0x025D173C LDP X20, X19, [X31 + 0x20]
	0x025D1740 LDP X22, X21, [X31 + 0x10]
	0x025D1744 ADD X8, X8, W9, 0x4, SXTW
	0x025D1748 ADD X0, X8, 0x20
	0x025D174C LDR X30, [X31], #0x30
	0x025D1750 RET
	0x025D1754 BL 0x1C16F20
	0x025D1758 BL 0x1C16F28
	0x025D175C STR X30, [X31 - 0x10]!
	0x025D1760 LDR X8, [X0 + 0x10]
	0x025D1764 CBZ X8, 0x25D17CC
	0x025D1768 LDP W9, W10, [X0 + 0x18]
	0x025D176C LDR W11, [X8 + 0x18]
	0x025D1770 ADD W9, W9, W10
	0x025D1774 SDIV W12, W9, W11
	0x025D1778 MSUB W9, W12, W11, W9
	0x025D177C CMP W9, W11
	0x025D1780 B.CS 0x25D17D0
	0x025D1784 SXTW X9, W9
	0x025D1788 CMP W10, W11
	0x025D178C ADD X8, X8, X9, 0x4, LSL
	0x025D1790 STP X1, X2, [X8 + 0x20]
	0x025D1794 B.NE 0x25D17B8
	0x025D1798 LDR X8, [X0 + 0x10]
	0x025D179C CBZ X8, 0x25D17CC
	0x025D17A0 LDR W8, [X8 + 0x18]
	0x025D17A4 SUB W8, W8, 0x1
	0x025D17A8 CMP W8, W9
	0x025D17AC CSINC W8, W31, W9, EQ
	0x025D17B0 STR W8, [X0 + 0x18]
	0x025D17B4 B 0x25D17C4
	0x025D17B8 LDR W8, [X0 + 0x1C]
	0x025D17BC ADD W8, W8, 0x1
	0x025D17C0 STR W8, [X0 + 0x1C]
	0x025D17C4 LDR X30, [X31], #0x10
	0x025D17C8 RET
	0x025D17CC BL 0x1C16F20
	0x025D17D0 BL 0x1C16F28
	0x025D17D4 STR X30, [X31 - 0x10]!
	0x025D17D8 LDR W9, [X0 + 0x18]
	0x025D17DC LDR X8, [X0 + 0x10]
	0x025D17E0 CBZ W9, 0x25D17F4
	0x025D17E4 SUB W9, W9, 0x1
	0x025D17E8 STR W9, [X0 + 0x18]
	0x025D17EC CBNZ X8, 0x25D1804
	0x025D17F0 B 0x25D183C
	0x025D17F4 CBZ X8, 0x25D183C
	0x025D17F8 LDR W9, [X8 + 0x18]
	0x025D17FC SUB W9, W9, 0x1
	0x025D1800 STR W9, [X0 + 0x18]
	0x025D1804 LDR W10, [X8 + 0x18]
	0x025D1808 CMP W9, W10
	0x025D180C B.CS 0x25D1840
	0x025D1810 LDR W11, [X0 + 0x1C]
	0x025D1814 SXTW X9, W9
	0x025D1818 ADD X8, X8, X9, 0x4, LSL
	0x025D181C STP X1, X2, [X8 + 0x20]
	0x025D1820 CMP W11, W10
	0x025D1824 B.EQ 0x25D1834
	0x025D1828 LDR W8, [X0 + 0x1C]
	0x025D182C ADD W8, W8, 0x1
	0x025D1830 STR W8, [X0 + 0x1C]
	0x025D1834 LDR X30, [X31], #0x10
	0x025D1838 RET
	0x025D183C BL 0x1C16F20
	0x025D1840 BL 0x1C16F28
	0x025D1844 STR X30, [X31 - 0x30]!
	0x025D1848 STP X22, X21, [X31 + 0x10]
	0x025D184C STP X20, X19, [X31 + 0x20]
	0x025D1850 ADRP X22, 0x1E08000
	0x025D1854 ADRP X21, 0x1B4C000
	0x025D1858 LDRB W8, [X22 + 0xF5B]
	0x025D185C LDR X21, [X21 + 0x1C8]
	0x025D1860 MOV X20, X1
	0x025D1864 MOV X19, X0
	0x025D1868 TBNZ X8, 0x0, 0x25D1880
	0x025D186C ADRP X0, 0x1B4C000
	0x025D1870 LDR X0, [X0 + 0x1C8]
	0x025D1874 BL 0x1C16CF4
	0x025D1878 MOVZ W8, 0x1
	0x025D187C STRB W8, [X22 + 0xF5B]
	0x025D1880 LDR X8, [X20 + 0x20]
	0x025D1884 LDR X1, [X21]
	0x025D1888 MOV X0, X19
	0x025D188C LDR X8, [X8 + 0xC0]
	0x025D1890 LDR X2, [X8 + 0x38]
	0x025D1894 BL 0x25D1F24
	0x025D1898 LDR X8, [X19 + 0x10]
	0x025D189C CBZ X8, 0x25D18F4
	0x025D18A0 LDP W10, W9, [X19 + 0x18]
	0x025D18A4 LDR W11, [X8 + 0x18]
	0x025D18A8 ADD W9, W10, W9
	0x025D18AC SDIV W10, W9, W11
	0x025D18B0 MSUB W9, W10, W11, W9
	0x025D18B4 CMP W9, 0x0
	0x025D18B8 CSEL W9, W11, W9, EQ
	0x025D18BC SUB W9, W9, 0x1
	0x025D18C0 CMP W9, W11
	0x025D18C4 B.CS 0x25D18F8
	0x025D18C8 SXTW X9, W9
	0x025D18CC ADD X8, X8, X9, 0x4, LSL
	0x025D18D0 LDP X0, X1, [X8 + 0x20]
	0x025D18D4 STP X31, X31, [X8 + 0x20]
	0x025D18D8 LDR W8, [X19 + 0x1C]
	0x025D18DC LDP X22, X21, [X31 + 0x10]
	0x025D18E0 SUB W8, W8, 0x1
	0x025D18E4 STR W8, [X19 + 0x1C]
	0x025D18E8 LDP X20, X19, [X31 + 0x20]
	0x025D18EC LDR X30, [X31], #0x30
	0x025D18F0 RET
	0x025D18F4 BL 0x1C16F20
	0x025D18F8 BL 0x1C16F28
	0x025D18FC STR X30, [X31 - 0x30]!
	0x025D1900 STP X22, X21, [X31 + 0x10]
	0x025D1904 STP X20, X19, [X31 + 0x20]
	0x025D1908 ADRP X22, 0x1E08000
	0x025D190C ADRP X21, 0x1B4C000
	0x025D1910 LDRB W8, [X22 + 0xF5C]
	0x025D1914 LDR X21, [X21 + 0x1C8]
	0x025D1918 MOV X20, X1
	0x025D191C MOV X19, X0
	0x025D1920 TBNZ X8, 0x0, 0x25D1938
	0x025D1924 ADRP X0, 0x1B4C000
	0x025D1928 LDR X0, [X0 + 0x1C8]
	0x025D192C BL 0x1C16CF4
	0x025D1930 MOVZ W8, 0x1
	0x025D1934 STRB W8, [X22 + 0xF5C]
	0x025D1938 LDR X8, [X20 + 0x20]
	0x025D193C LDR X1, [X21]
	0x025D1940 MOV X0, X19
	0x025D1944 LDR X8, [X8 + 0xC0]
	0x025D1948 LDR X2, [X8 + 0x38]
	0x025D194C BL 0x25D1F24
	0x025D1950 LDR X8, [X19 + 0x10]
	0x025D1954 CBZ X8, 0x25D19A8
	0x025D1958 LDRSW X9, [X19 + 0x18]
	0x025D195C LDR W10, [X8 + 0x18]
	0x025D1960 CMP W9, W10
	0x025D1964 B.CS 0x25D19AC
	0x025D1968 ADD X8, X8, X9, 0x4, LSL
	0x025D196C LDP X0, X1, [X8 + 0x20]
	0x025D1970 STP X31, X31, [X8 + 0x20]
	0x025D1974 LDR X8, [X19 + 0x10]
	0x025D1978 CBZ X8, 0x25D19A8
	0x025D197C LDR W8, [X8 + 0x18]
	0x025D1980 LDP W10, W9, [X19 + 0x18]
	0x025D1984 LDP X22, X21, [X31 + 0x10]
	0x025D1988 SUB W8, W8, 0x1
	0x025D198C CMP W8, W10
	0x025D1990 SUB W9, W9, 0x1
	0x025D1994 CSINC W8, W31, W10, EQ
	0x025D1998 STP W8, W9, [X19 + 0x18]
	0x025D199C LDP X20, X19, [X31 + 0x20]
	0x025D19A0 LDR X30, [X31], #0x30
	0x025D19A4 RET
	0x025D19A8 BL 0x1C16F20
	0x025D19AC BL 0x1C16F28
	0x025D19B0 STR X30, [X31 - 0x10]!
	0x025D19B4 MOV X8, X0
	0x025D19B8 LDR X0, [X0 + 0x10]
	0x025D19BC STR X31, [X8 + 0x18]
	0x025D19C0 CBZ X0, 0x25D19D8
	0x025D19C4 LDR W2, [X0 + 0x18]
	0x025D19C8 MOV W1, W31
	0x025D19CC MOV X3, X31
	0x025D19D0 LDR X30, [X31], #0x10
	0x025D19D4 B 0x339FA34
	0x025D19D8 BL 0x1C16F20
	0x025D19DC STP X30, X21, [X31 - 0x20]!
	0x025D19E0 STP X20, X19, [X31 + 0x10]
	0x025D19E4 LDR X8, [X1 + 0x20]
	0x025D19E8 MOV X19, X1
	0x025D19EC MOV X20, X0
	0x025D19F0 LDR X8, [X8 + 0xC0]
	0x025D19F4 LDR X8, [X8 + 0x70]
	0x025D19F8 LDRB W9, [X8 + 0x135]
	0x025D19FC TBNZ X9, 0x0, 0x25D1A0C
	0x025D1A00 MOV X0, X8
	0x025D1A04 BL 0x1C5C684
	0x025D1A08 MOV X8, X0
	0x025D1A0C MOVZ W1, 0x2
	0x025D1A10 MOV X0, X8
	0x025D1A14 BL 0x1C16D6C
	0x025D1A18 LDR X8, [X19 + 0x20]
	0x025D1A1C MOV X21, X0
	0x025D1A20 MOV X0, X20
	0x025D1A24 LDR X8, [X8 + 0xC0]
	0x025D1A28 LDR X1, [X8 + 0x78]
	0x025D1A2C BL 0x25D1F74
	0x025D1A30 CBZ X21, 0x25D1A78
	0x025D1A34 LDR W8, [X21 + 0x18]
	0x025D1A38 CBZ W8, 0x25D1A74
	0x025D1A3C STP X0, X1, [X21 + 0x20]
	0x025D1A40 LDR X8, [X19 + 0x20]
	0x025D1A44 MOV X0, X20
	0x025D1A48 LDR X8, [X8 + 0xC0]
	0x025D1A4C LDR X1, [X8 + 0x88]
	0x025D1A50 BL 0x25D2020
	0x025D1A54 LDR W8, [X21 + 0x18]
	0x025D1A58 CMP W8, 0x1
	0x025D1A5C B.LS 0x25D1A74
	0x025D1A60 LDP X20, X19, [X31 + 0x10]
	0x025D1A64 STP X0, X1, [X21 + 0x30]
	0x025D1A68 MOV X0, X21
	0x025D1A6C LDP X30, X21, [X31], #0x20
	0x025D1A70 RET
	0x025D1A74 BL 0x1C16F28
	0x025D1A78 BL 0x1C16F20
	0x025D1A7C STP X30, X27, [X31 - 0x50]!
	0x025D1A80 STP X26, X25, [X31 + 0x10]
	0x025D1A84 STP X24, X23, [X31 + 0x20]
	0x025D1A88 STP X22, X21, [X31 + 0x30]
	0x025D1A8C STP X20, X19, [X31 + 0x40]
	0x025D1A90 ADRP X19, 0x1E08000
	0x025D1A94 LDRB W8, [X19 + 0xF5D]
	0x025D1A98 MOV X21, X1

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, 0x1E09000
	012 Move W8, [X19+3926]
	013 Move X21, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x1B23000
	020 Move X0, [X0+3584]
	021 Call 0x1C17CF4
	022 Move X0, 0x1B23000
	023 Move X0, [X0+3608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+3926], W8
	027 Move X8, [X21+32]
	028 Move W19, [X20+28]
	029 Move X8, [X8+192]
	030 Move X0, [X8]
	031 Move W8, [X0+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {37}
	036 Call 0x1C5D684
	037 Move W1, W19
	038 Call 0x1C17D6C
	039 Move X8, [X21+32]
	040 Move X19, X0
	041 Move X0, X20
	042 Move X8, [X8+192]
	043 Move X1, [X8+160]
	044 Call 0x25D167C, X0
	045 Compare X0, 0
	046 JumpIfEqual {207}
	047 Move X8, [X21+32]
	048 Move X20, X0
	049 Move X8, [X8+192]
	050 Move X1, [X8+168]
	051 Move W8, [X1+309]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {59}
	056 Move X0, X1
	057 Call 0x1C5D684
	058 Move X1, X0
	059 Move X8, [X20]
	060 NotImplemented "Instruction LDRH not yet implemented."
	061 Compare X9, 0
	062 JumpIfEqual {69}
	063 Move X10, [X8+176]
	064 Add X10, X10, 8
	065 NotImplemented "Instruction LDUR not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Subtract X9, X9, 1
	068 Add X10, X10, 16
	069 Move X0, X20
	070 Move W2, W31
	071 Call 0x1C5D788
	072 NotImplemented "Instruction LDRSW not yet implemented."
	073 Add X8, X8, X9
	074 Add X0, X8, 312
	075 Move X8, [X0]
	076 Move X1, [X0+8]
	077 Move X26, 0x1B23000
	078 Move X26, [X26+3584]
	079 Move X0, X20
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X20, X0
	082 Compare X0, 0
	083 JumpIfEqual {208}
	084 Move X27, 0x1B23000
	085 Move X27, [X27+3608]
	086 Move W22, W31
	087 Move X8, [X20]
	088 Move X1, [X27]
	089 NotImplemented "Instruction LDRH not yet implemented."
	090 Compare X9, 0
	091 JumpIfEqual {98}
	092 Move X10, [X8+176]
	093 Add X10, X10, 8
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Subtract X9, X9, 1
	097 Add X10, X10, 16
	098 Move X0, X20
	099 Move W2, W31
	100 Call 0x1C5D788
	101 NotImplemented "Instruction LDRSW not yet implemented."
	102 Add X8, X8, X9
	103 Add X0, X8, 312
	104 Move X8, [X0]
	105 Move X1, [X0+8]
	106 Move X0, X20
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {169}
	112 Move X8, [X21+32]
	113 Move X8, [X8+192]
	114 Move X1, [X8+184]
	115 Move W8, [X1+309]
	116 Move TEMP, X8
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {123}
	120 Move X0, X1
	121 Call 0x1C5D684
	122 Move X1, X0
	123 Move X8, [X20]
	124 NotImplemented "Instruction LDRH not yet implemented."
	125 Compare X9, 0
	126 JumpIfEqual {133}
	127 Move X10, [X8+176]
	128 Add X10, X10, 8
	129 NotImplemented "Instruction LDUR not yet implemented."
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Subtract X9, X9, 1
	132 Add X10, X10, 16
	133 Move X0, X20
	134 Move W2, W31
	135 Call 0x1C5D788
	136 NotImplemented "Instruction LDRSW not yet implemented."
	137 Add X8, X8, X9
	138 Add X0, X8, 312
	139 Move X8, [X0]
	140 Move X1, [X0+8]
	141 Move X0, X20
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move X8, [X21+32]
	144 Move X23, X0
	145 Move X24, X1
	146 Move X8, [X8+192]
	147 Move X0, [X8+208]
	148 Move W8, [X0+309]
	149 Move TEMP, X8
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfEqual {154}
	153 Call 0x1C5D684
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1C17DFC
	158 Move X25, X24
	159 ShiftRight X25, 32
	160 And X25, X25, 0x7FFFFFFF
	161 Move X0, X23
	162 Move W1, W24
	163 Move X2, X19
	164 Move W3, W22
	165 Move W4, W25
	166 Move X5, X31
	167 Call Array.Copy, X0, X1, X2, X3, X4
	168 Add W22, W22, W25
	169 Move X21, X31
	170 Compare X20, 0
	171 JumpIfEqual {193}
	172 Move X8, [X20]
	173 Move X1, [X26]
	174 NotImplemented "Instruction LDRH not yet implemented."
	175 Compare X9, 0
	176 JumpIfEqual {183}
	177 Move X10, [X8+176]
	178 Add X10, X10, 8
	179 NotImplemented "Instruction LDUR not yet implemented."
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Subtract X9, X9, 1
	182 Add X10, X10, 16
	183 Move X0, X20
	184 Move W2, W31
	185 Call 0x1C5D788
	186 NotImplemented "Instruction LDRSW not yet implemented."
	187 Add X8, X8, X9
	188 Add X0, X8, 312
	189 Move X8, [X0]
	190 Move X1, [X0+8]
	191 Move X0, X20
	192 NotImplemented "Instruction BLR not yet implemented."
	193 Compare X21, 0
	194 JumpIfNotEqual {209}
	195 Move X0, X19
	196 Move X20, [X31+64]
	197 Move X19, [X31+72]
	198 Move X22, [X31+48]
	199 Move X21, [X31+56]
	200 Move X24, [X31+32]
	201 Move X23, [X31+40]
	202 Move X26, [X31+16]
	203 Move X25, [X31+24]
	204 Move X30, [X31+80]
	205 Move X27, [X31+88]
	206 Return X0
	207 Call 0x1C17F20
	208 Call 0x1C17F20
	209 Move X0, X21
	210 Call 0x1C17F18
	211 Move X22, X0
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X0, X22
	214 Call 0x3EB2AD0
	215 Move X21, [X0]
	216 Call 0x3EB2AE0
	217 Move X21, X31
	218 Move X22, X0
	219 Compare X20, 0
	220 JumpIfEqual {242}
	221 Move X8, [X20]
	222 Move X1, [X26]
	223 NotImplemented "Instruction LDRH not yet implemented."
	224 Compare X9, 0
	225 JumpIfEqual {232}
	226 Move X10, [X8+176]
	227 Add X10, X10, 8
	228 NotImplemented "Instruction LDUR not yet implemented."
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Subtract X9, X9, 1
	231 Add X10, X10, 16
	232 Move X0, X20
	233 Move W2, W31
	234 Call 0x1C5D788
	235 NotImplemented "Instruction LDRSW not yet implemented."
	236 Add X8, X8, X9
	237 Add X0, X8, 312
	238 Move X8, [X0]
	239 Move X1, [X0+8]
	240 Move X0, X20
	241 NotImplemented "Instruction BLR not yet implemented."
	242 Compare X21, 0
	243 JumpIfNotEqual {246}
	244 Move X0, X22
	245 Call 0x1D2D690
	246 Move X0, X21
	247 Call 0x1C17F18
	248 Call 0x1991590

Method: System.Collections.Generic.IEnumerator`1<T> GetEnumerator()

Disassembly:
	0x025D1A9C MOV X20, X0
	0x025D1AA0 TBNZ X8, 0x0, 0x25D1AC4
	0x025D1AA4 ADRP X0, 0x1B22000
	0x025D1AA8 LDR X0, [X0 + 0xE00]
	0x025D1AAC BL 0x1C16CF4
	0x025D1AB0 ADRP X0, 0x1B22000
	0x025D1AB4 LDR X0, [X0 + 0xE18]
	0x025D1AB8 BL 0x1C16CF4
	0x025D1ABC MOVZ W8, 0x1
	0x025D1AC0 STRB W8, [X19 + 0xF5D]
	0x025D1AC4 LDR X8, [X21 + 0x20]
	0x025D1AC8 LDR W19, [X20 + 0x1C]
	0x025D1ACC LDR X8, [X8 + 0xC0]
	0x025D1AD0 LDR X0, [X8]
	0x025D1AD4 LDRB W8, [X0 + 0x135]
	0x025D1AD8 TBNZ X8, 0x0, 0x25D1AE0
	0x025D1ADC BL 0x1C5C684
	0x025D1AE0 MOV W1, W19
	0x025D1AE4 BL 0x1C16D6C
	0x025D1AE8 LDR X8, [X21 + 0x20]
	0x025D1AEC MOV X19, X0
	0x025D1AF0 MOV X0, X20
	0x025D1AF4 LDR X8, [X8 + 0xC0]
	0x025D1AF8 LDR X1, [X8 + 0xA0]
	0x025D1AFC BL 0x25D19DC
	0x025D1B00 CBZ X0, 0x25D1D3C
	0x025D1B04 LDR X8, [X21 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move X8, [X8+192]
	008 Move X8, [X8+232]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X0, X8
	018 Call 0x1C17F10
	019 Move X8, [X20+32]
	020 Move W1, W31
	021 Move X20, X0
	022 Move X8, [X8+192]
	023 Move X2, [X8+240]
	024 Call 0x2399A58, X0, X1
	025 Compare X20, 0
	026 JumpIfEqual {33}
	027 Move [X20+32], X19
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0
	033 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x025D1B08 MOV X20, X0
	0x025D1B0C LDR X8, [X8 + 0xC0]
	0x025D1B10 LDR X1, [X8 + 0xA8]
	0x025D1B14 LDRB W8, [X1 + 0x135]

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+256]
	004 Call 0x25D1A9C, X0
	005 Return X0

Method: System.Int32 FrontIndex()

Disassembly:
	0x025D1B18 TBNZ X8, 0x0, 0x25D1B28
	0x025D1B1C MOV X0, X1

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Int32 BackIndex()

Disassembly:
	0x025D1B20 BL 0x1C5C684
	0x025D1B24 MOV X1, X0
	0x025D1B28 LDR X8, [X20]
	0x025D1B2C LDRH W9, [X8 + 0x12E]
	0x025D1B30 CBZ X9, 0x25D1B54
	0x025D1B34 LDR X10, [X8 + 0xB0]
	0x025D1B38 ADD X10, X10, 0x8
	0x025D1B3C LDUR X11, [X10 - 0x8]
	0x025D1B40 CMP X11, X1
	0x025D1B44 B.EQ 0x25D1B64
	0x025D1B48 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W10, [X0+24]
	006 Move W9, [X0+28]
	007 Move W8, [X8+24]
	008 Add W9, W10, W9
	009 NotImplemented "Instruction SDIV not yet implemented."
	010 NotImplemented "Instruction MSUB not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Int32 InternalIndex(System.Int32 index)

Disassembly:
	0x025D1B4C ADD X10, X10, 0x10
	0x025D1B50 B.NE 0x25D1B3C
	0x025D1B54 MOV X0, X20
	0x025D1B58 MOV W2, W31
	0x025D1B5C BL 0x1C5C788
	0x025D1B60 B 0x25D1B70
	0x025D1B64 LDRSW X9, [X10]
	0x025D1B68 ADD X8, X8, X9, 0x4, LSL
	0x025D1B6C ADD X0, X8, 0x138
	0x025D1B70 LDP X8, X1, [X0]
	0x025D1B74 ADRP X26, 0x1B22000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move W9, [X0+24]
	006 Move W8, [X8+24]
	007 Add W9, W9, W1
	008 NotImplemented "Instruction SDIV not yet implemented."
	009 NotImplemented "Instruction MSUB not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Int32 Increment(System.Int32 index)

Disassembly:
	0x025D1B78 LDR X26, [X26 + 0xE00]
	0x025D1B7C MOV X0, X20
	0x025D1B80 BLR X8
	0x025D1B84 MOV X20, X0
	0x025D1B88 CBZ X0, 0x25D1D40
	0x025D1B8C ADRP X27, 0x1B22000
	0x025D1B90 LDR X27, [X27 + 0xE18]
	0x025D1B94 MOV W22, W31
	0x025D1B98 LDR X8, [X20]
	0x025D1B9C LDR X1, [X27]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W8, [X8+24]
	006 Subtract W8, W8, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSINC not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 Decrement(System.Int32 index)

Disassembly:
	0x025D1BA0 LDRH W9, [X8 + 0x12E]
	0x025D1BA4 CBZ X9, 0x25D1BC8
	0x025D1BA8 LDR X10, [X8 + 0xB0]
	0x025D1BAC ADD X10, X10, 0x8
	0x025D1BB0 LDUR X11, [X10 - 0x8]
	0x025D1BB4 CMP X11, X1
	0x025D1BB8 B.EQ 0x25D1BD8
	0x025D1BBC SUBS X9, X9, 0x1
	0x025D1BC0 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-16], X30
	002 Compare W1, 0
	003 JumpIfNotEqual {8}
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {11}
	007 Move W1, [X8+24]
	008 Subtract W0, W1, 1
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void ThrowIfEmpty(System.String message = Cannot access an empty buffer.)

Disassembly:
	0x025D1BC4 B.NE 0x25D1BB0
	0x025D1BC8 MOV X0, X20
	0x025D1BCC MOV W2, W31
	0x025D1BD0 BL 0x1C5C788
	0x025D1BD4 B 0x25D1BE4
	0x025D1BD8 LDRSW X9, [X10]
	0x025D1BDC ADD X8, X8, X9, 0x4, LSL
	0x025D1BE0 ADD X0, X8, 0x138
	0x025D1BE4 LDP X8, X1, [X0]
	0x025D1BE8 MOV X0, X20
	0x025D1BEC BLR X8
	0x025D1BF0 TBZ X0, 0x0, 0x25D1CBC
	0x025D1BF4 LDR X8, [X21 + 0x20]
	0x025D1BF8 LDR X8, [X8 + 0xC0]
	0x025D1BFC LDR X1, [X8 + 0xB8]
	0x025D1C00 LDRB W8, [X1 + 0x135]
	0x025D1C04 TBNZ X8, 0x0, 0x25D1C14
	0x025D1C08 MOV X0, X1
	0x025D1C0C BL 0x1C5C684
	0x025D1C10 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+28]
	006 Compare W8, 0
	007 JumpIfEqual {13}
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Move X21, [X31+40]
	012 Return 
	013 Move X0, 0x1B23000
	014 Move X0, [X0+1456]
	015 Move X19, X2
	016 Move X20, X1
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X1, X20
	020 Move X2, X31
	021 Move X21, X0
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, X21
	024 Move X1, X19
	025 Call 0x1C17DEC

Method: System.ArraySegment`1<T> SpanOne()

Disassembly:
	0x025D1C14 LDR X8, [X20]
	0x025D1C18 LDRH W9, [X8 + 0x12E]
	0x025D1C1C CBZ X9, 0x25D1C40
	0x025D1C20 LDR X10, [X8 + 0xB0]
	0x025D1C24 ADD X10, X10, 0x8
	0x025D1C28 LDUR X11, [X10 - 0x8]
	0x025D1C2C CMP X11, X1
	0x025D1C30 B.EQ 0x25D1C50
	0x025D1C34 SUBS X9, X9, 0x1
	0x025D1C38 ADD X10, X10, 0x10
	0x025D1C3C B.NE 0x25D1C28
	0x025D1C40 MOV X0, X20
	0x025D1C44 MOV W2, W31
	0x025D1C48 BL 0x1C5C788
	0x025D1C4C B 0x25D1C5C
	0x025D1C50 LDRSW X9, [X10]
	0x025D1C54 ADD X8, X8, X9, 0x4, LSL
	0x025D1C58 ADD X0, X8, 0x138
	0x025D1C5C LDP X8, X1, [X0]
	0x025D1C60 MOV X0, X20
	0x025D1C64 BLR X8
	0x025D1C68 LDR X8, [X21 + 0x20]
	0x025D1C6C MOV X23, X0
	0x025D1C70 MOV X24, X1
	0x025D1C74 LDR X8, [X8 + 0xC0]
	0x025D1C78 LDR X0, [X8 + 0xD0]
	0x025D1C7C LDRB W8, [X0 + 0x135]
	0x025D1C80 TBNZ X8, 0x0, 0x25D1C88
	0x025D1C84 BL 0x1C5C684
	0x025D1C88 LDR W8, [X0 + 0xE0]
	0x025D1C8C CBNZ W8, 0x25D1C94
	0x025D1C90 BL 0x1C16DFC
	0x025D1C94 UBFM X25, X24, 0x20, 0x3F
	0x025D1C98 MOV X0, X23
	0x025D1C9C MOV W1, W24
	0x025D1CA0 MOV X2, X19
	0x025D1CA4 MOV W3, W22
	0x025D1CA8 MOV W4, W25
	0x025D1CAC MOV X5, X31
	0x025D1CB0 BL 0x339FCE8
	0x025D1CB4 ADD W22, W22, W25
	0x025D1CB8 B 0x25D1B98
	0x025D1CBC MOV X21, X31

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {50}
	007 Move X9, [X1+32]
	008 Move W11, [X0+28]
	009 Move X19, X1
	010 Move X9, [X9+192]
	011 Compare W11, 0
	012 JumpIfEqual {22}
	013 Move W2, [X0+24]
	014 Move W10, [X8+24]
	015 Move [X31], X31
	016 Move [X31+8], X31
	017 Add W11, W2, W11
	018 NotImplemented "Instruction SDIV not yet implemented."
	019 NotImplemented "Instruction MSUB not yet implemented."
	020 Subtract W3, W11, W2
	021 Move X4, [X9+280]
	022 Move X0, [X9]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move W1, W31
	030 Call 0x1C17D6C
	031 Move [X31], X31
	032 Move [X31+8], X31
	033 Move X8, [X19+32]
	034 Move X1, X0
	035 Add X0, X31, 0
	036 Move X8, [X8+192]
	037 Move X2, [X8+272]
	038 Call ArraySegment`1<Double>..ctor, X0, X1
	039 Move X4, [X9+280]
	040 Subtract W3, W10, W2
	041 Add X0, X31, 0
	042 Move X1, X8
	043 Call ArraySegment`1<Double>..ctor, X0, X1, X2, X3
	044 Move X0, [X31]
	045 Move X1, [X31+8]
	046 Move X30, [X31+16]
	047 Move X19, [X31+24]
	048 Add X31, X31, 32
	049 Return X0
	050 Call 0x1C17F20

Method: System.ArraySegment`1<T> SpanTwo()

Disassembly:
	0x025D1CC0 CBZ X20, 0x25D1D1C
	0x025D1CC4 LDR X8, [X20]
	0x025D1CC8 LDR X1, [X26]
	0x025D1CCC LDRH W9, [X8 + 0x12E]
	0x025D1CD0 CBZ X9, 0x25D1CF4
	0x025D1CD4 LDR X10, [X8 + 0xB0]
	0x025D1CD8 ADD X10, X10, 0x8
	0x025D1CDC LDUR X11, [X10 - 0x8]
	0x025D1CE0 CMP X11, X1
	0x025D1CE4 B.EQ 0x25D1D04
	0x025D1CE8 SUBS X9, X9, 0x1
	0x025D1CEC ADD X10, X10, 0x10
	0x025D1CF0 B.NE 0x25D1CDC
	0x025D1CF4 MOV X0, X20
	0x025D1CF8 MOV W2, W31
	0x025D1CFC BL 0x1C5C788
	0x025D1D00 B 0x25D1D10
	0x025D1D04 LDRSW X9, [X10]
	0x025D1D08 ADD X8, X8, X9, 0x4, LSL
	0x025D1D0C ADD X0, X8, 0x138
	0x025D1D10 LDP X8, X1, [X0]
	0x025D1D14 MOV X0, X20
	0x025D1D18 BLR X8
	0x025D1D1C CBNZ X21, 0x25D1D44
	0x025D1D20 MOV X0, X19
	0x025D1D24 LDP X20, X19, [X31 + 0x40]
	0x025D1D28 LDP X22, X21, [X31 + 0x30]
	0x025D1D2C LDP X24, X23, [X31 + 0x20]
	0x025D1D30 LDP X26, X25, [X31 + 0x10]
	0x025D1D34 LDP X30, X27, [X31], #0x50
	0x025D1D38 RET
	0x025D1D3C BL 0x1C16F20
	0x025D1D40 BL 0x1C16F20
	0x025D1D44 MOV X0, X21
	0x025D1D48 BL 0x1C16F18
	0x025D1D4C B 0x25D1D5C
	0x025D1D50 B 0x25D1D5C
	0x025D1D54 B 0x25D1D5C
	0x025D1D58 B 0x25D1D5C
	0x025D1D5C MOV X22, X0
	0x025D1D60 CMP W1, 0x1
	0x025D1D64 B.NE 0x25D1D7C
	0x025D1D68 MOV X0, X22
	0x025D1D6C BL 0x3EB1AD0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {51}
	007 Move X9, [X1+32]
	008 Move W10, [X0+28]
	009 Move X19, X1
	010 Move X9, [X9+192]
	011 Compare W10, 0
	012 JumpIfEqual {26}
	013 Move W11, [X0+24]
	014 Move W12, [X8+24]
	015 Move [X31], X31
	016 Move [X31+8], X31
	017 Move X4, [X9+280]
	018 Add W10, W11, W10
	019 NotImplemented "Instruction SDIV not yet implemented."
	020 NotImplemented "Instruction MSUB not yet implemented."
	021 Add X0, X31, 0
	022 Move X1, X8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W2, W3
	025 Move W3, W31
	026 Move X0, [X9]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move W1, W31
	034 Call 0x1C17D6C
	035 Move [X31], X31
	036 Move [X31+8], X31
	037 Move X8, [X19+32]
	038 Move X1, X0
	039 Add X0, X31, 0
	040 Move X8, [X8+192]
	041 Move X2, [X8+272]
	042 Call ArraySegment`1<Double>..ctor, X0, X1
	043 Move W2, W31
	044 Call ArraySegment`1<Double>..ctor, X0, X1, X2, X3
	045 Move X0, [X31]
	046 Move X1, [X31+8]
	047 Move X30, [X31+16]
	048 Move X19, [X31+24]
	049 Add X31, X31, 32
	050 Return X0
	051 Call 0x1C17F20

