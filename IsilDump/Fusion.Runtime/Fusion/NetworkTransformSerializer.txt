Type: Fusion.NetworkTransformSerializer

Method: System.Int32 Write(Fusion.Simulation/SendContext sc, Fusion.NetworkObjectMeta meta, Fusion.NetworkBufferSerializerInfo info, System.Int32* ptr, System.Int32 word, System.Int32 prev)

Disassembly:
	0x01E9AA58 ADRP X8, 0x2264000
	0x01E9AA5C LDR W1, [X31 + 0xC]
	0x01E9AA60 LDR X8, [X8 + 0x5D0]
	0x01E9AA64 LDR X2, [X8]
	0x01E9AA68 BL 0x301BCCC
	0x01E9AA6C B 0x1E9AA74
	0x01E9AA70 MOV X0, X31
	0x01E9AA74 LDP X20, X19, [X31 + 0x20]
	0x01E9AA78 LDP X30, X21, [X31 + 0x10]
	0x01E9AA7C ADD X31, X31, 0x30
	0x01E9AA80 RET
	0x01E9AA84 BL 0x1C16F20
	0x01E9AA88 STR X30, [X31 - 0x30]!
	0x01E9AA8C STP X22, X21, [X31 + 0x10]
	0x01E9AA90 STP X20, X19, [X31 + 0x20]
	0x01E9AA94 ADRP X22, 0x253F000
	0x01E9AA98 LDRB W8, [X22 + 0x2EA]
	0x01E9AA9C MOV X19, X2
	0x01E9AAA0 MOV X20, X1
	0x01E9AAA4 MOV X21, X0
	0x01E9AAA8 TBNZ X8, 0x0, 0x1E9AAC0
	0x01E9AAAC ADRP X0, 0x2264000
	0x01E9AAB0 LDR X0, [X0 + 0x5C0]
	0x01E9AAB4 BL 0x1C16CF4
	0x01E9AAB8 MOVZ W8, 0x1
	0x01E9AABC STRB W8, [X22 + 0x2EA]
	0x01E9AAC0 CBZ W20, 0x1E9AAE4
	0x01E9AAC4 LDR X8, [X21 + 0x18]
	0x01E9AAC8 CBZ X8, 0x1E9AB00
	0x01E9AACC LDR W8, [X8 + 0x18]
	0x01E9AAD0 SUB W9, W20, 0x1
	0x01E9AAD4 CMP W9, W8
	0x01E9AAD8 CSET W0, LT
	0x01E9AADC CSEL W8, W9, W31, LT
	0x01E9AAE0 B 0x1E9AAEC
	0x01E9AAE4 MOV W8, W31
	0x01E9AAE8 MOV W0, W31
	0x01E9AAEC STR W8, [X19]
	0x01E9AAF0 LDP X20, X19, [X31 + 0x20]
	0x01E9AAF4 LDP X22, X21, [X31 + 0x10]
	0x01E9AAF8 LDR X30, [X31], #0x30
	0x01E9AAFC RET
	0x01E9AB00 BL 0x1C16F20
	0x01E9AB04 STR X30, [X31 - 0x30]!
	0x01E9AB08 STP X22, X21, [X31 + 0x10]
	0x01E9AB0C STP X20, X19, [X31 + 0x20]
	0x01E9AB10 ADRP X22, 0x253F000
	0x01E9AB14 LDRB W8, [X22 + 0x2E2]
	0x01E9AB18 MOV X19, X2
	0x01E9AB1C MOV X20, X1
	0x01E9AB20 MOV X21, X0
	0x01E9AB24 TBNZ X8, 0x0, 0x1E9AB3C
	0x01E9AB28 ADRP X0, 0x2264000
	0x01E9AB2C LDR X0, [X0 + 0x5A8]
	0x01E9AB30 BL 0x1C16CF4
	0x01E9AB34 MOVZ W8, 0x1
	0x01E9AB38 STRB W8, [X22 + 0x2E2]
	0x01E9AB3C STR W31, [X31 + 0xC]
	0x01E9AB40 LDR X0, [X21 + 0x30]
	0x01E9AB44 CBZ X0, 0x1E9AB8C
	0x01E9AB48 ADRP X8, 0x2264000
	0x01E9AB4C LDR X8, [X8 + 0x5A8]
	0x01E9AB50 ADD X3, X31, 0xC
	0x01E9AB54 MOV X1, X20
	0x01E9AB58 MOV X2, X19
	0x01E9AB5C LDR X4, [X8]
	0x01E9AB60 BL 0x2A81ED0
	0x01E9AB64 TBZ X0, 0x0, 0x1E9AB78
	0x01E9AB68 LDR W0, [X31 + 0xC]
	0x01E9AB6C BL 0x1E9A108
	0x01E9AB70 AND X0, X0, 0x0
	0x01E9AB74 B 0x1E9AB7C
	0x01E9AB78 MOV X0, X31
	0x01E9AB7C LDP X20, X19, [X31 + 0x20]
	0x01E9AB80 LDP X22, X21, [X31 + 0x10]
	0x01E9AB84 LDR X30, [X31], #0x30
	0x01E9AB88 RET
	0x01E9AB8C BL 0x1C16F20
	0x01E9AB90 SUB X31, X31, 0x30
	0x01E9AB94 STP X30, X21, [X31 + 0x10]
	0x01E9AB98 STP X20, X19, [X31 + 0x20]
	0x01E9AB9C ADRP X21, 0x253F000
	0x01E9ABA0 LDRB W8, [X21 + 0x2E3]
	0x01E9ABA4 MOV X20, X1
	0x01E9ABA8 MOV X19, X0
	0x01E9ABAC TBNZ X8, 0x0, 0x1E9ABD0
	0x01E9ABB0 ADRP X0, 0x2264000
	0x01E9ABB4 LDR X0, [X0 + 0x570]
	0x01E9ABB8 BL 0x1C16CF4
	0x01E9ABBC ADRP X0, 0x2264000
	0x01E9ABC0 LDR X0, [X0 + 0x5D0]
	0x01E9ABC4 BL 0x1C16CF4
	0x01E9ABC8 MOVZ W8, 0x1
	0x01E9ABCC STRB W8, [X21 + 0x2E3]
	0x01E9ABD0 AND X1, X20, 0x0
	0x01E9ABD4 ADD X2, X31, 0xC
	0x01E9ABD8 MOV X0, X19
	0x01E9ABDC STR W31, [X31 + 0xC]
	0x01E9ABE0 BL 0x1E9AA88
	0x01E9ABE4 TBZ X0, 0x0, 0x1E9AC54
	0x01E9ABE8 LDR X0, [X19 + 0x18]
	0x01E9ABEC CBZ X0, 0x1E9AC88
	0x01E9ABF0 ADRP X8, 0x2264000
	0x01E9ABF4 LDR W1, [X31 + 0xC]
	0x01E9ABF8 LDR X8, [X8 + 0x5D0]
	0x01E9ABFC LDR X2, [X8]
	0x01E9AC00 BL 0x301BCCC
	0x01E9AC04 CBZ X0, 0x1E9AC88
	0x01E9AC08 ADRP X10, 0x2264000
	0x01E9AC0C LDR X8, [X0]
	0x01E9AC10 LDR X10, [X10 + 0x570]
	0x01E9AC14 MOV X19, X0
	0x01E9AC18 LDRH W9, [X8 + 0x12E]
	0x01E9AC1C LDR X1, [X10]
	0x01E9AC20 CBZ X9, 0x1E9AC44
	0x01E9AC24 LDR X10, [X8 + 0xB0]
	0x01E9AC28 ADD X10, X10, 0x8
	0x01E9AC2C LDUR X11, [X10 - 0x8]
	0x01E9AC30 CMP X11, X1
	0x01E9AC34 B.EQ 0x1E9AC60
	0x01E9AC38 SUBS X9, X9, 0x1
	0x01E9AC3C ADD X10, X10, 0x10
	0x01E9AC40 B.NE 0x1E9AC2C
	0x01E9AC44 MOV X0, X19
	0x01E9AC48 MOV W2, W31
	0x01E9AC4C BL 0x1C5C788
	0x01E9AC50 B 0x1E9AC6C
	0x01E9AC54 MOV X0, X31
	0x01E9AC58 MOV X1, X31
	0x01E9AC5C B 0x1E9AC78
	0x01E9AC60 LDRSW X9, [X10]
	0x01E9AC64 ADD X8, X8, X9, 0x4, LSL
	0x01E9AC68 ADD X0, X8, 0x138
	0x01E9AC6C LDP X8, X1, [X0]
	0x01E9AC70 MOV X0, X19
	0x01E9AC74 BLR X8
	0x01E9AC78 LDP X20, X19, [X31 + 0x20]
	0x01E9AC7C LDP X30, X21, [X31 + 0x10]
	0x01E9AC80 ADD X31, X31, 0x30
	0x01E9AC84 RET
	0x01E9AC88 BL 0x1C16F20
	0x01E9AC8C SUB X31, X31, 0x20
	0x01E9AC90 STP X30, X19, [X31 + 0x10]
	0x01E9AC94 AND X1, X1, 0x0
	0x01E9AC98 ADD X2, X31, 0xC
	0x01E9AC9C MOV X19, X0
	0x01E9ACA0 STR W31, [X31 + 0xC]
	0x01E9ACA4 BL 0x1E9AA88
	0x01E9ACA8 MOV W8, W0
	0x01E9ACAC MOV W0, W31
	0x01E9ACB0 TBZ X8, 0x0, 0x1E9AD18
	0x01E9ACB4 LDR W8, [X31 + 0xC]
	0x01E9ACB8 LDR X9, [X19 + 0x20]
	0x01E9ACBC ADD W10, W8, 0x3F
	0x01E9ACC0 CMP W8, 0x0
	0x01E9ACC4 CSEL W10, W10, W8, LT
	0x01E9ACC8 CBZ X9, 0x1E9AD24
	0x01E9ACCC LDR W11, [X9 + 0x18]
	0x01E9ACD0 SBFM W10, W10, 0x6, 0x1F
	0x01E9ACD4 CMP W10, W11
	0x01E9ACD8 B.CS 0x1E9AD28
	0x01E9ACDC ADD X9, X9, W10, 0x3, SXTW
	0x01E9ACE0 LDR X9, [X9 + 0x20]

ISIL:
	001 Move [X31-112], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X24, 0x2540000
	016 Move W8, [X24+727]
	017 Move W21, W7
	018 Move W22, W6
	019 Move X20, X5
	020 Move X23, X3
	021 Move X19, X1
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x2261000
	027 Move X0, [X0+3176]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X24+727], W8
	031 Compare X19, 0
	032 JumpIfEqual {197}
	033 Move X24, 0x2261000
	034 Move X24, [X24+3176]
	035 Move X0, [X19+32]
	036 Move X8, X23
	037 ShiftRight X8, 32
	038 And X8, X8, 0x7FFFFFFF
	039 Subtract W22, W22, W8
	040 Subtract W1, W22, W21
	041 Move W2, 4
	042 Move X3, X31
	043 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	044 Add X8, X20, W22
	045 Move X21, 0x253F000
	046 Move S14, [X8]
	047 Move S13, [X8+4]
	048 Move S12, [X8+8]
	049 Move S11, [X8+12]
	050 Move S10, [X8+16]
	051 Move S9, [X8+20]
	052 Move V8, [X8+24]
	053 Move W8, [X21+3727]
	054 Move X20, [X19+32]
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, 0x2261000
	058 Move X0, [X0+3176]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X21+3727], W8
	062 Move X0, [X24]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move W8, S14
	068 Move W9, 0x44800000
	069 Move W8, W8
	070 ShiftRight W8, 31
	071 And W8, W8, 0x7FFFFFFF
	072 Move S0, 0.5
	073 Move S1, W9
	074 NotImplemented "Instruction UCVTF not yet implemented."
	075 Move W9, 0x7F800000
	076 Multiply S1, S14, S1
	077 Subtract S0, S0, S2
	078 Move S2, W9
	079 Add S0, S1, S0
	080 NotImplemented "Instruction FCVTZS not yet implemented."
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Move W9, 0x80000000
	083 NotImplemented "Instruction CSEL not yet implemented."
	084 NotImplemented "Instruction SBFM not yet implemented."
	085 Xor W1, W9, W8
	086 Move W2, 4
	087 Move X0, X20
	088 Move X3, X31
	089 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	090 Move W8, [X21+3727]
	091 Move X20, [X19+32]
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x2261000
	095 Move X0, [X0+3176]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X21+3727], W8
	099 Move X0, [X24]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move W8, S13
	105 Move W9, 0x44800000
	106 Move W8, W8
	107 ShiftRight W8, 31
	108 And W8, W8, 0x7FFFFFFF
	109 Move S0, 0.5
	110 Move S1, W9
	111 NotImplemented "Instruction UCVTF not yet implemented."
	112 Move W9, 0x7F800000
	113 Multiply S1, S13, S1
	114 Subtract S0, S0, S2
	115 Move S2, W9
	116 Add S0, S1, S0
	117 NotImplemented "Instruction FCVTZS not yet implemented."
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 Move W9, 0x80000000
	120 NotImplemented "Instruction CSEL not yet implemented."
	121 NotImplemented "Instruction SBFM not yet implemented."
	122 Xor W1, W9, W8
	123 Move W2, 4
	124 Move X0, X20
	125 Move X3, X31
	126 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	127 Move W8, [X21+3727]
	128 Move X20, [X19+32]
	129 Compare W8, 0
	130 JumpIfNotEqual {136}
	131 Move X0, 0x2261000
	132 Move X0, [X0+3176]
	133 Call 0x1C17CF4
	134 Move W8, 1
	135 Move [X21+3727], W8
	136 Move X0, [X24]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move W8, S12
	142 Move W9, 0x44800000
	143 Move W8, W8
	144 ShiftRight W8, 31
	145 And W8, W8, 0x7FFFFFFF
	146 Move S0, 0.5
	147 Move S1, W9
	148 NotImplemented "Instruction UCVTF not yet implemented."
	149 Move W9, 0x7F800000
	150 Multiply S1, S12, S1
	151 Subtract S0, S0, S2
	152 Move S2, W9
	153 Add S0, S1, S0
	154 NotImplemented "Instruction FCVTZS not yet implemented."
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move W9, 0x80000000
	157 NotImplemented "Instruction CSEL not yet implemented."
	158 NotImplemented "Instruction SBFM not yet implemented."
	159 Xor W1, W9, W8
	160 Move W2, 4
	161 Move X0, X20
	162 Move X3, X31
	163 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	164 Move X0, [X24]
	165 Move X19, [X19+32]
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1C17DFC
	170 Move V0, V11
	171 Move V1, V10
	172 Move V2, V9
	173 Move V3, V8
	174 Move X0, X31
	175 Call Maths.QuaternionCompress, X0
	176 Move W1, W0
	177 Move W2, 32
	178 Move X0, X19
	179 Move X3, X31
	180 Call NetBitBuffer.Write, X0, X1, X2
	181 Add W0, W22, 6
	182 Move X20, [X31+96]
	183 Move X19, [X31+104]
	184 Move X22, [X31+80]
	185 Move X21, [X31+88]
	186 Move X24, [X31+64]
	187 Move X23, [X31+72]
	188 Move X30, [X31+56]
	189 Move D9, [X31+40]
	190 Move D8, [X31+48]
	191 Move D11, [X31+24]
	192 Move D10, [X31+32]
	193 Move D13, [X31+8]
	194 Move D12, [X31+16]
	195 Move V14, [X31+112]
	196 Return X0
	197 Call 0x1C17F20

Method: System.Int32 Skip(Fusion.Simulation/RecvContext rc, System.Int32 word)

Disassembly:
	0x01E9ACE4 LSRV X9, X9, X8
	0x01E9ACE8 TBZ X9, 0x0, 0x1E9AD14
	0x01E9ACEC LDR X9, [X19 + 0x28]
	0x01E9ACF0 CBZ X9, 0x1E9AD24
	0x01E9ACF4 LDR W10, [X9 + 0x18]
	0x01E9ACF8 CMP W8, W10
	0x01E9ACFC B.CS 0x1E9AD28
	0x01E9AD00 ADD X8, X9, W8, 0x2, SXTW
	0x01E9AD04 ADD X0, X8, 0x20
	0x01E9AD08 MOV X1, X31
	0x01E9AD0C BL 0x1E9BE30
	0x01E9AD10 B 0x1E9AD18
	0x01E9AD14 MOV W0, W31
	0x01E9AD18 LDP X30, X19, [X31 + 0x10]
	0x01E9AD1C ADD X31, X31, 0x20
	0x01E9AD20 RET
	0x01E9AD24 BL 0x1C16F20
	0x01E9AD28 BL 0x1C16F28
	0x01E9AD2C STR X30, [X31 - 0x20]!
	0x01E9AD30 STP X20, X19, [X31 + 0x10]
	0x01E9AD34 AND X1, X1, 0x0
	0x01E9AD38 ADD X2, X31, 0xC
	0x01E9AD3C MOV X19, X0
	0x01E9AD40 STR W31, [X31 + 0xC]
	0x01E9AD44 BL 0x1E9AA88
	0x01E9AD48 MOV W20, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {29}
	006 Move X0, [X1+40]
	007 Move W19, W2
	008 Move X20, X1
	009 Move W1, 4
	010 Move X2, X31
	011 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	012 Move X0, [X20+40]
	013 Move W1, 4
	014 Move X2, X31
	015 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	016 Move X0, [X20+40]
	017 Move W1, 4
	018 Move X2, X31
	019 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	020 Move X0, [X20+40]
	021 Move W1, 32
	022 Move X2, X31
	023 Call NetBitBuffer.Read, X0, X1
	024 Add W0, W19, 6
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0
	029 Call 0x1C17F20

Method: System.Int32 Read(Fusion.Simulation/RecvContext rc, Fusion.NetworkObjectMeta meta, Fusion.NetworkBufferSerializerInfo info, System.Int32* ptr, System.Int32 word)

Disassembly:
	0x01E9AD4C TBZ X0, 0x0, 0x1E9ADD8
	0x01E9AD50 LDR W8, [X31 + 0xC]
	0x01E9AD54 LDR X9, [X19 + 0x20]
	0x01E9AD58 ADD W10, W8, 0x3F
	0x01E9AD5C CMP W8, 0x0
	0x01E9AD60 CSEL W10, W10, W8, LT
	0x01E9AD64 CBZ X9, 0x1E9ADE8
	0x01E9AD68 LDR W11, [X9 + 0x18]
	0x01E9AD6C SBFM W10, W10, 0x6, 0x1F
	0x01E9AD70 CMP W10, W11
	0x01E9AD74 B.CS 0x1E9ADEC
	0x01E9AD78 ADD X9, X9, W10, 0x3, SXTW
	0x01E9AD7C LDR X9, [X9 + 0x20]
	0x01E9AD80 LSRV X9, X9, X8
	0x01E9AD84 TBZ X9, 0x0, 0x1E9ADD4
	0x01E9AD88 LDR W10, [X19 + 0x38]
	0x01E9AD8C LDR X9, [X19 + 0x28]
	0x01E9AD90 ADD W10, W10, 0x1
	0x01E9AD94 STR W10, [X19 + 0x38]
	0x01E9AD98 CBZ X9, 0x1E9ADE8
	0x01E9AD9C LDR W10, [X9 + 0x18]
	0x01E9ADA0 CMP W8, W10
	0x01E9ADA4 B.CS 0x1E9ADEC
	0x01E9ADA8 ADD X8, X9, W8, 0x2, SXTW
	0x01E9ADAC ADD X19, X8, 0x20
	0x01E9ADB0 MOV X0, X19
	0x01E9ADB4 MOV X1, X31
	0x01E9ADB8 BL 0x1E9BE30
	0x01E9ADBC ADD W20, W0, 0x1
	0x01E9ADC0 MOV X0, X19
	0x01E9ADC4 MOV W1, W20
	0x01E9ADC8 MOV X2, X31
	0x01E9ADCC BL 0x1E9BE3C
	0x01E9ADD0 B 0x1E9ADD8
	0x01E9ADD4 MOV W20, W31
	0x01E9ADD8 MOV W0, W20
	0x01E9ADDC LDP X20, X19, [X31 + 0x10]
	0x01E9ADE0 LDR X30, [X31], #0x20
	0x01E9ADE4 RET
	0x01E9ADE8 BL 0x1C16F20
	0x01E9ADEC BL 0x1C16F28
	0x01E9ADF0 STR X30, [X31 - 0x30]!
	0x01E9ADF4 STP X22, X21, [X31 + 0x10]
	0x01E9ADF8 STP X20, X19, [X31 + 0x20]
	0x01E9ADFC AND X1, X1, 0x0
	0x01E9AE00 ADD X2, X31, 0xC
	0x01E9AE04 MOV X19, X0
	0x01E9AE08 STR W31, [X31 + 0xC]
	0x01E9AE0C BL 0x1E9AA88
	0x01E9AE10 MOV W21, W31
	0x01E9AE14 TBZ X0, 0x0, 0x1E9AEE4
	0x01E9AE18 LDR W20, [X31 + 0xC]
	0x01E9AE1C LDR X8, [X19 + 0x20]
	0x01E9AE20 ADD W9, W20, 0x3F
	0x01E9AE24 CMP W20, 0x0
	0x01E9AE28 CSEL W9, W9, W20, LT
	0x01E9AE2C CBZ X8, 0x1E9AEF8
	0x01E9AE30 LDR W10, [X8 + 0x18]
	0x01E9AE34 SBFM W9, W9, 0x6, 0x1F
	0x01E9AE38 CMP W9, W10
	0x01E9AE3C B.CS 0x1E9AEFC
	0x01E9AE40 ADD X8, X8, W9, 0x3, SXTW
	0x01E9AE44 LDR X8, [X8 + 0x20]
	0x01E9AE48 LSRV X8, X8, X20
	0x01E9AE4C TBZ X8, 0x0, 0x1E9AEE0
	0x01E9AE50 LDR X8, [X19 + 0x28]
	0x01E9AE54 CBZ X8, 0x1E9AEF8
	0x01E9AE58 LDR W9, [X8 + 0x18]
	0x01E9AE5C SXTW X21, W20
	0x01E9AE60 CMP W21, W9
	0x01E9AE64 B.CS 0x1E9AEFC
	0x01E9AE68 ADD X8, X8, X21, 0x2, LSL
	0x01E9AE6C ADD X0, X8, 0x20
	0x01E9AE70 MOV X1, X31
	0x01E9AE74 BL 0x1E9BE30
	0x01E9AE78 CBZ W0, 0x1E9AEE0
	0x01E9AE7C LDR X8, [X19 + 0x28]
	0x01E9AE80 CBZ X8, 0x1E9AEF8
	0x01E9AE84 LDR W9, [X8 + 0x18]
	0x01E9AE88 CMP W21, W9
	0x01E9AE8C B.CS 0x1E9AEFC
	0x01E9AE90 ADD X8, X8, X21, 0x2, LSL
	0x01E9AE94 ADD X22, X8, 0x20
	0x01E9AE98 MOV X0, X22
	0x01E9AE9C MOV X1, X31
	0x01E9AEA0 BL 0x1E9BE30
	0x01E9AEA4 SUB W21, W0, 0x1
	0x01E9AEA8 MOV X0, X22
	0x01E9AEAC MOV W1, W21
	0x01E9AEB0 MOV X2, X31
	0x01E9AEB4 BL 0x1E9BE3C
	0x01E9AEB8 CBNZ W21, 0x1E9AED0
	0x01E9AEBC LDRB W8, [X19 + 0x10]
	0x01E9AEC0 CBZ W8, 0x1E9AED0
	0x01E9AEC4 MOV X0, X19
	0x01E9AEC8 MOV W1, W20
	0x01E9AECC BL 0x1E9AF00
	0x01E9AED0 LDR W8, [X19 + 0x38]
	0x01E9AED4 ADD W8, W8, 0x1
	0x01E9AED8 STR W8, [X19 + 0x38]
	0x01E9AEDC B 0x1E9AEE4
	0x01E9AEE0 MOV W21, W31
	0x01E9AEE4 MOV W0, W21
	0x01E9AEE8 LDP X20, X19, [X31 + 0x20]
	0x01E9AEEC LDP X22, X21, [X31 + 0x10]
	0x01E9AEF0 LDR X30, [X31], #0x30
	0x01E9AEF4 RET
	0x01E9AEF8 BL 0x1C16F20
	0x01E9AEFC BL 0x1C16F28
	0x01E9AF00 STP X30, X21, [X31 - 0x20]!
	0x01E9AF04 STP X20, X19, [X31 + 0x10]
	0x01E9AF08 ADRP X21, 0x253F000
	0x01E9AF0C LDRB W8, [X21 + 0x2E8]
	0x01E9AF10 MOV W20, W1
	0x01E9AF14 MOV X19, X0
	0x01E9AF18 TBNZ X8, 0x0, 0x1E9AF3C
	0x01E9AF1C ADRP X0, 0x2264000
	0x01E9AF20 LDR X0, [X0 + 0x5D8]
	0x01E9AF24 BL 0x1C16CF4
	0x01E9AF28 ADRP X0, 0x2264000
	0x01E9AF2C LDR X0, [X0 + 0x5D0]
	0x01E9AF30 BL 0x1C16CF4
	0x01E9AF34 MOVZ W8, 0x1
	0x01E9AF38 STRB W8, [X21 + 0x2E8]
	0x01E9AF3C LDR X0, [X19 + 0x18]
	0x01E9AF40 CBZ X0, 0x1E9AFEC
	0x01E9AF44 ADRP X8, 0x2264000
	0x01E9AF48 LDR X8, [X8 + 0x5D0]
	0x01E9AF4C MOV W1, W20
	0x01E9AF50 LDR X2, [X8]
	0x01E9AF54 BL 0x301BCCC
	0x01E9AF58 CBZ X0, 0x1E9AFEC
	0x01E9AF5C ADRP X10, 0x2264000
	0x01E9AF60 LDR X8, [X0]
	0x01E9AF64 LDR X10, [X10 + 0x5D8]
	0x01E9AF68 MOV X21, X0
	0x01E9AF6C LDRH W9, [X8 + 0x12E]
	0x01E9AF70 LDR X1, [X10]
	0x01E9AF74 CBZ X9, 0x1E9AF98
	0x01E9AF78 LDR X10, [X8 + 0xB0]
	0x01E9AF7C ADD X10, X10, 0x8
	0x01E9AF80 LDUR X11, [X10 - 0x8]
	0x01E9AF84 CMP X11, X1
	0x01E9AF88 B.EQ 0x1E9AFA8
	0x01E9AF8C SUBS X9, X9, 0x1
	0x01E9AF90 ADD X10, X10, 0x10
	0x01E9AF94 B.NE 0x1E9AF80
	0x01E9AF98 MOVZ W2, 0x1
	0x01E9AF9C MOV X0, X21
	0x01E9AFA0 BL 0x1C5C788
	0x01E9AFA4 B 0x1E9AFB8
	0x01E9AFA8 LDR W9, [X10]
	0x01E9AFAC ADD W9, W9, 0x1
	0x01E9AFB0 ADD X8, X8, W9, 0x4, SXTW
	0x01E9AFB4 ADD X0, X8, 0x138
	0x01E9AFB8 LDP X8, X1, [X0]
	0x01E9AFBC MOV X0, X21
	0x01E9AFC0 BLR X8
	0x01E9AFC4 MOV X0, X19
	0x01E9AFC8 MOV W1, W20
	0x01E9AFCC MOV W2, W31
	0x01E9AFD0 BL 0x1E9B0CC
	0x01E9AFD4 LDR W8, [X19 + 0x38]
	0x01E9AFD8 ADD W8, W8, 0x1

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X22, 0x2540000
	010 Move W8, [X22+728]
	011 Move W19, W6
	012 Move X21, X5
	013 Move X20, X1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2261000
	019 Move X0, [X0+3176]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+728], W8
	023 Compare X20, 0
	024 JumpIfEqual {188}
	025 Move X0, [X20+40]
	026 Move X23, 0x2261000
	027 Move X23, [X23+3176]
	028 Move W1, 4
	029 Move X2, X31
	030 Add X22, X21, W19
	031 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	032 Move X24, 0x253F000
	033 Move W8, [X24+3728]
	034 Move W21, W0
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x2261000
	038 Move X0, [X0+3176]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X24+3728], W8
	042 Move X0, [X23]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Compare X22, 0
	048 JumpIfEqual {188}
	049 And W8, W21, 1
	050 Subtract W8, W31, W8
	051 Xor W8, W8, W21
	052 Move W9, 0x3A800000
	053 NotImplemented "Instruction SCVTF not yet implemented."
	054 Move S1, W9
	055 Multiply S0, S0, S1
	056 Move [X22], S0
	057 Move X0, [X20+40]
	058 Move W1, 4
	059 Move X2, X31
	060 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	061 Move W8, [X24+3728]
	062 Move W21, W0
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x2261000
	066 Move X0, [X0+3176]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X24+3728], W8
	070 Move X0, [X23]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 And W8, W21, 1
	076 Subtract W8, W31, W8
	077 Xor W8, W8, W21
	078 Move W9, 0x3A800000
	079 NotImplemented "Instruction SCVTF not yet implemented."
	080 Move S1, W9
	081 Multiply S0, S0, S1
	082 Move [X22+4], S0
	083 Move X0, [X20+40]
	084 Move W1, 4
	085 Move X2, X31
	086 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	087 Move W8, [X24+3728]
	088 Move W21, W0
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0x2261000
	092 Move X0, [X0+3176]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move [X24+3728], W8
	096 Move X0, [X23]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 And W8, W21, 1
	102 Subtract W8, W31, W8
	103 Xor W8, W8, W21
	104 Move W9, 0x3A800000
	105 NotImplemented "Instruction SCVTF not yet implemented."
	106 Move S1, W9
	107 Multiply S0, S0, S1
	108 Move [X22+8], S0
	109 Move X0, [X20+40]
	110 Move W1, 32
	111 Move X2, X31
	112 Call NetBitBuffer.Read, X0, X1
	113 Move X8, [X23]
	114 Move X20, X0
	115 Move W9, [X8+224]
	116 Compare W9, 0
	117 JumpIfNotEqual {120}
	118 Move X0, X8
	119 Call 0x1C17DFC
	120 Move W0, W20
	121 Move X1, X31
	122 Call Maths.QuaternionDecompress, X0
	123 Move [X22+12], S0
	124 Move [X22+20], S1
	125 Move [X22+20], S2
	126 Move [X22+28], S3
	127 Move X20, 0x2540000
	128 Move W8, [X20+755]
	129 Compare W8, 0
	130 JumpIfNotEqual {144}
	131 Move X0, 0x2261000
	132 Move X0, [X0+1208]
	133 Move [X31+32], V3
	134 Move [X31+40], V0
	135 Move [X31], V1
	136 Move [X31+8], V2
	137 Call 0x1C17CF4
	138 Move V1, [X31]
	139 Move V2, [X31+16]
	140 Move V3, [X31+32]
	141 Move V0, [X31+48]
	142 Move W8, 1
	143 Move [X20+755], W8
	144 Move X8, 0x2261000
	145 Move X8, [X8+1208]
	146 Multiply S4, S0, S0
	147 Multiply S5, S1, S1
	148 Add S4, S4, S5
	149 Move X8, [X8]
	150 Multiply S5, S2, S2
	151 Add S4, S5, S4
	152 Multiply S5, S3, S3
	153 Move X8, [X8+184]
	154 Add S4, S5, S4
	155 NotImplemented "Instruction FSQRT not yet implemented."
	156 Move V6, [X8]
	157 NotImplemented "Instruction FCMP not yet implemented."
	158 Move X20, 0x253F000
	159 Move W8, [X20+1939]
	160 Compare W8, 0
	161 JumpIfNotEqual {167}
	162 Move X0, 0x225B000
	163 Move X0, [X0+1448]
	164 Call 0x1C17CF4
	165 Move W8, 1
	166 Move [X20+1939], W8
	167 Move X8, 0x225B000
	168 Move X8, [X8+1448]
	169 Move X8, [X8]
	170 Move X8, [X8+184]
	171 Move V0, [X8]
	172 Move V0.S[1], V1.S[0]
	173 Move V0.S[2], V2.S[0]
	174 Move V0.S[3], V3.S[0]
	175 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	176 NotImplemented "Instruction INVALID not yet implemented."
	177 Add W0, W19, 6
	178 Move [X22+12], V0
	179 Move X20, [X31+112]
	180 Move X19, [X31+120]
	181 Move X22, [X31+96]
	182 Move X21, [X31+104]
	183 Move X24, [X31+80]
	184 Move X23, [X31+88]
	185 Move X30, [X31+64]
	186 Add X31, X31, 128
	187 Return X0
	188 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E9AFDC STR W8, [X19 + 0x38]
	0x01E9AFE0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01E9AFE4 LDP X30, X21, [X31], #0x20
	0x01E9AFE8 RET
	0x01E9AFEC BL 0x1C16F20
	0x01E9AFF0 STR X30, [X31 - 0x10]!
	0x01E9AFF4 AND X1, X1, 0x0
	0x01E9AFF8 ADD X2, X31, 0xC
	0x01E9AFFC STR W31, [X31 + 0xC]
	0x01E9B000 BL 0x1E9AA88
	0x01E9B004 AND W0, W0, 0x1
	0x01E9B008 LDR X30, [X31], #0x10
	0x01E9B00C RET
	0x01E9B010 SUB X31, X31, 0x20
	0x01E9B014 STP X30, X19, [X31 + 0x10]
	0x01E9B018 AND X1, X1, 0x0
	0x01E9B01C ADD X2, X31, 0xC
	0x01E9B020 MOV X19, X0
	0x01E9B024 STR W31, [X31 + 0xC]
	0x01E9B028 BL 0x1E9AA88
	0x01E9B02C MOV W8, W0
	0x01E9B030 MOV W0, W31
	0x01E9B034 TBZ X8, 0x0, 0x1E9B070
	0x01E9B038 LDR W8, [X31 + 0xC]
	0x01E9B03C LDR X9, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2540000
	005 Move X20, 0x2265000
	006 Move W8, [X19+729]
	007 Move X20, [X20+1088]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2264000
	013 Move X0, [X0+1088]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+729], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

