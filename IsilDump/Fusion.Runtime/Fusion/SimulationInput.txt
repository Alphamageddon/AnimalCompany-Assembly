Type: Fusion.SimulationInput

Method: Fusion.PlayerRef get_Player()

Disassembly:
	0x01ED9BAC MOV X20, X0
	0x01ED9BB0 STR X8, [X31 + 0x28]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_Player(Fusion.PlayerRef value)

Disassembly:
	0x01ED9BB4 LDRB W8, [X22 + 0x543]
	0x01ED9BB8 TBNZ X8, 0x0, 0x1ED9BD0

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: Fusion.SimulationInputHeader* get_Header()

Disassembly:
	0x01ED9BBC ADRP X0, 0x221B000
	0x01ED9BC0 LDR X0, [X0 + 0xFE0]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Int32* get_Data()

Disassembly:
	0x01ED9BC4 BL 0x1C16CF4
	0x01ED9BC8 MOVZ W8, 0x1
	0x01ED9BCC STRB W8, [X22 + 0x543]

ISIL:
	001 Move X8, [X0+32]
	002 Add X0, X8, 16
	003 Return X0

Method: System.Int32 get_Sent()

Disassembly:
	0x01ED9BD0 MOVZ W1, 0x1
	0x01ED9BD4 MOV X0, X20

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Sent(System.Int32 value)

Disassembly:
	0x01ED9BD8 BL 0x1ED94C0
	0x01ED9BDC CBZ X19, 0x1ED9C54

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Void Clear(System.Int32 wordCount)

Disassembly:
	0x01ED2768 B.EQ 0x1ED28EC
	0x01ED276C LDR X9, [X20 + 0x88]
	0x01ED2770 STR W10, [X20 + 0x80]
	0x01ED2774 CBZ X9, 0x1ED299C

ISIL:
	001 Move X0, [X0+32]
	002 Move W1, W1
	003 ShiftRight W1, 30
	004 And W1, W1, 0x1FFFFFFF
	005 Move X2, X31
	006 Call Native.MemClear, X0, X1
	007 Return 

Method: System.Void CopyFrom(Fusion.SimulationInput source, System.Int32 wordCount)

Disassembly:
	0x01ED2778 LDP W2, W10, [X9 + 0x18]
	0x01ED277C ADD W10, W10, 0x1
	0x01ED2780 CMP W2, 0x1
	0x01ED2784 STP W31, W10, [X9 + 0x18]
	0x01ED2788 B.LT 0x1ED27A4
	0x01ED278C LDR X0, [X9 + 0x10]
	0x01ED2790 MOV W1, W31
	0x01ED2794 MOV X3, X31
	0x01ED2798 BL 0x339FA34

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move X0, [X0+32]
	005 Move X1, [X1+32]
	006 Move W2, W2
	007 ShiftRight W2, 30
	008 And W2, W2, 0x1FFFFFFF
	009 Move X3, X31
	010 Move X30, [X31+16]
	011 Call Native.MemCpy, X0, X1, X2
	012 Return 
	013 Call 0x1C17F20

Method: System.Void Serialize(Fusion.SimulationInput previous, Fusion.SimulationConfig config, Fusion.Sockets.NetBitBufferSerializer serializer)

Disassembly:
	0x01ECF6C8 B 0x1ECF700
	0x01ECF6CC ADRP X8, 0x2227000
	0x01ECF6D0 LDR X8, [X8 + 0xE40]
	0x01ECF6D4 LDR X0, [X8]
	0x01ECF6D8 LDR W8, [X0 + 0xE0]
	0x01ECF6DC CBNZ W8, 0x1ECF6E4
	0x01ECF6E0 BL 0x1C16DFC
	0x01ECF6E4 MOV X0, X31
	0x01ECF6E8 BL 0x1E8D7EC
	0x01ECF6EC B 0x1ECF710
	0x01ECF6F0 LDR W9, [X10]
	0x01ECF6F4 ADD W9, W9, 0x23
	0x01ECF6F8 ADD X8, X8, W9, 0x4, SXTW
	0x01ECF6FC ADD X0, X8, 0x138
	0x01ECF700 LDP X8, X1, [X0]
	0x01ECF704 MOV X0, X19
	0x01ECF708 BLR X8
	0x01ECF70C AND X0, X0, 0x0
	0x01ECF710 LDP X20, X19, [X31 + 0x10]
	0x01ECF714 AND X0, X0, 0x0
	0x01ECF718 LDR X30, [X31], #0x20
	0x01ECF71C RET
	0x01ECF720 BL 0x1C16F20
	0x01ECF724 SUB X31, X31, 0x40
	0x01ECF728 STR D8, [X31 + 0x10]
	0x01ECF72C STR X30, [X31 + 0x18]
	0x01ECF730 STP X22, X21, [X31 + 0x20]
	0x01ECF734 STP X20, X19, [X31 + 0x30]
	0x01ECF738 ADRP X22, 0x250A000
	0x01ECF73C ADRP X21, 0x2227000
	0x01ECF740 LDRB W8, [X22 + 0x4E0]
	0x01ECF744 LDR X21, [X21 + 0xE40]
	0x01ECF748 MOV X19, X1
	0x01ECF74C MOV X20, X0
	0x01ECF750 TBNZ X8, 0x0, 0x1ECF774
	0x01ECF754 ADRP X0, 0x2229000
	0x01ECF758 LDR X0, [X0 + 0x20]
	0x01ECF75C BL 0x1C16CF4
	0x01ECF760 ADRP X0, 0x2227000
	0x01ECF764 LDR X0, [X0 + 0xE40]
	0x01ECF768 BL 0x1C16CF4
	0x01ECF76C MOVZ W8, 0x1
	0x01ECF770 STRB W8, [X22 + 0x4E0]
	0x01ECF774 STR X31, [X31 + 0x8]
	0x01ECF778 LDR X8, [X20]
	0x01ECF77C MOV X0, X20
	0x01ECF780 LDR X9, [X8 + 0x268]
	0x01ECF784 LDR X1, [X8 + 0x270]
	0x01ECF788 BLR X9
	0x01ECF78C LDR X8, [X21]
	0x01ECF790 MOV X21, X0
	0x01ECF794 LDR W9, [X8 + 0xE0]
	0x01ECF798 CBNZ W9, 0x1ECF7A4
	0x01ECF79C MOV X0, X8
	0x01ECF7A0 BL 0x1C16DFC
	0x01ECF7A4 CMP W21, W19
	0x01ECF7A8 FMOV D8, X31
	0x01ECF7AC B.EQ 0x1ECF7E4
	0x01ECF7B0 LDR X0, [X20 + 0xB8]
	0x01ECF7B4 CBZ X0, 0x1ECF800
	0x01ECF7B8 ADRP X8, 0x2229000
	0x01ECF7BC LDR X8, [X8 + 0x20]
	0x01ECF7C0 AND X1, X19, 0x0
	0x01ECF7C4 ADD X2, X31, 0x8
	0x01ECF7C8 LDR X3, [X8]
	0x01ECF7CC BL 0x2AE89D0
	0x01ECF7D0 TBZ X0, 0x0, 0x1ECF7E4
	0x01ECF7D4 LDR X8, [X31 + 0x8]
	0x01ECF7D8 CBZ X8, 0x1ECF800
	0x01ECF7DC LDR X8, [X8 + 0xD0]
	0x01ECF7E0 LDR V8, [X8 + 0x48]
	0x01ECF7E4 MOV V0.16B, V8.16B
	0x01ECF7E8 LDP X20, X19, [X31 + 0x30]
	0x01ECF7EC LDP X22, X21, [X31 + 0x20]
	0x01ECF7F0 LDR X30, [X31 + 0x18]
	0x01ECF7F4 LDR V8, [X31 + 0x10]
	0x01ECF7F8 ADD X31, X31, 0x40
	0x01ECF7FC RET
	0x01ECF800 BL 0x1C16F20
	0x01ECF804 SUB X31, X31, 0x120
	0x01ECF808 STR X29, [X31 + 0xD0]
	0x01ECF80C STP X30, X25, [X31 + 0xE0]
	0x01ECF810 STP X24, X23, [X31 + 0xF0]
	0x01ECF814 STP X22, X21, [X31 + 0x100]
	0x01ECF818 STP X20, X19, [X31 + 0x110]
	0x01ECF81C MRS X23, 0xC000
	0x01ECF820 LDR X8, [X23 + 0x28]
	0x01ECF824 ADRP X24, 0x250A000
	0x01ECF828 ADRP X25, 0x2230000
	0x01ECF82C ADRP X21, 0x2230000
	0x01ECF830 STR X8, [X31 + 0xC8]
	0x01ECF834 ADRP X22, 0x2230000
	0x01ECF838 LDRB W8, [X24 + 0x4E1]
	0x01ECF83C LDR X25, [X25 + 0xEE8]
	0x01ECF840 LDR X21, [X21 + 0xEF0]
	0x01ECF844 LDR X22, [X22 + 0xEF8]
	0x01ECF848 MOV X20, X1
	0x01ECF84C MOV X19, X0
	0x01ECF850 TBNZ X8, 0x0, 0x1ECF8A4
	0x01ECF854 ADRP X0, 0x2230000
	0x01ECF858 LDR X0, [X0 + 0xEF0]
	0x01ECF85C BL 0x1C16CF4
	0x01ECF860 ADRP X0, 0x2230000
	0x01ECF864 LDR X0, [X0 + 0xEE8]
	0x01ECF868 BL 0x1C16CF4
	0x01ECF86C ADRP X0, 0x222F000
	0x01ECF870 LDR X0, [X0 + 0x7C0]
	0x01ECF874 BL 0x1C16CF4
	0x01ECF878 ADRP X0, 0x2224000
	0x01ECF87C LDR X0, [X0 + 0x5A8]
	0x01ECF880 BL 0x1C16CF4
	0x01ECF884 ADRP X0, 0x2227000
	0x01ECF888 LDR X0, [X0 + 0x398]
	0x01ECF88C BL 0x1C16CF4
	0x01ECF890 ADRP X0, 0x2230000
	0x01ECF894 LDR X0, [X0 + 0xEF8]
	0x01ECF898 BL 0x1C16CF4
	0x01ECF89C MOVZ W8, 0x1
	0x01ECF8A0 STRB W8, [X24 + 0x4E1]
	0x01ECF8A4 LDR X0, [X25]
	0x01ECF8A8 BL 0x1C16F10
	0x01ECF8AC LDR X1, [X21]
	0x01ECF8B0 MOV X21, X0
	0x01ECF8B4 BL 0x2A66C80
	0x01ECF8B8 ADD X0, X31, 0x50
	0x01ECF8BC MOVZ W2, 0x50
	0x01ECF8C0 MOV X1, X20
	0x01ECF8C4 STR X21, [X19 + 0x1B0]
	0x01ECF8C8 BL 0x3EB1AC0
	0x01ECF8CC ADD X1, X31, 0x50
	0x01ECF8D0 MOV X0, X19
	0x01ECF8D4 MOV X2, X31
	0x01ECF8D8 BL 0x1EC0B70
	0x01ECF8DC LDR X0, [X22]
	0x01ECF8E0 BL 0x1C16F10
	0x01ECF8E4 MOV X1, X31
	0x01ECF8E8 MOV X21, X0
	0x01ECF8EC BL 0x1EDD240
	0x01ECF8F0 ADD X8, X31, 0x28
	0x01ECF8F4 MOV X0, X19
	0x01ECF8F8 STR X21, [X19 + 0x68]
	0x01ECF8FC BL 0x1ECFAB4
	0x01ECF900 CBZ X21, 0x1ECFAAC
	0x01ECF904 LDUR V0, [X31 + 0x28]
	0x01ECF908 LDUR V1, [X31 + 0x38]
	0x01ECF90C LDR W8, [X31 + 0x48]
	0x01ECF910 ADRP X24, 0x222F000
	0x01ECF914 STP V0, V1, [X31]
	0x01ECF918 STR W8, [X31 + 0x20]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x250B000
	011 Move W8, [X24+1322]
	012 Move X19, X4
	013 Move X23, X3
	014 Move X21, X2
	015 Move X22, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x222C000
	022 Move X0, [X0+3176]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+1322], W8
	026 Compare X22, 0
	027 JumpIfEqual {171}
	028 Compare X21, 0
	029 JumpIfEqual {171}
	030 Move W8, [X21+56]
	031 Move X20, [X20+32]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 And W31, W23, 255
	034 Compare X20, 0
	035 JumpIfEqual {171}
	036 Move W1, [X20]
	037 Move X0, X19
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X22, [X31+48]
	041 Move X21, [X31+56]
	042 Move X24, [X31+32]
	043 Move X23, [X31+40]
	044 Move X26, [X31+16]
	045 Move X25, [X31+24]
	046 Move W2, 8
	047 Move X3, X31
	048 Move X30, [X31+80]
	049 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	050 Return 
	051 Move X22, [X22+32]
	052 Move W8, [X21+16]
	053 And W31, W23, 255
	054 Add W9, W8, 4
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X24, 0x222C000
	057 Move X24, [X24+3176]
	058 Move X23, X31
	059 Move W9, [X20]
	060 Move W10, [X22]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W1, 1
	063 Move W2, 1
	064 Move X0, X19
	065 Move X3, X31
	066 Call NetBitBuffer.Write, X0, X1, X2
	067 Move W2, 8
	068 Move X0, X19
	069 Move W1, W23
	070 Move X3, X31
	071 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	072 Move X0, [X24]
	073 NotImplemented "Instruction LDRSW not yet implemented."
	074 NotImplemented "Instruction LDRSW not yet implemented."
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Subtract X8, X25, X26
	080 NotImplemented "Instruction SBFM not yet implemented."
	081 Xor X1, X9, X8
	082 Move W2, 8
	083 Move X0, X19
	084 Move X3, X31
	085 Call NetBitBuffer.WriteInt64VarLength, X0, X1, X2
	086 Move W8, [X21+16]
	087 Add X23, X23, 1
	088 Add W9, W8, 4
	089 Add X20, X20, 4
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Add X22, X22, 4
	092 Move X0, X19
	093 Move X20, [X31+64]
	094 Move X19, [X31+72]
	095 Move X22, [X31+48]
	096 Move X21, [X31+56]
	097 Move X24, [X31+32]
	098 Move X23, [X31+40]
	099 Move X26, [X31+16]
	100 Move X25, [X31+24]
	101 Move W2, 1
	102 Move X1, X31
	103 Move X3, X31
	104 Move X30, [X31+80]
	105 Call NetBitBuffer.Write, X0, X1, X2
	106 Return 
	107 Move W1, 8
	108 Move X0, X19
	109 Move X2, X31
	110 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	111 Compare X20, 0
	112 JumpIfEqual {171}
	113 NotImplemented "Instruction BIC not yet implemented."
	114 Move [X20], W8
	115 Move W8, W8
	116 ShiftRight W8, 30
	117 And W8, W8, 0x1FFFFFFF
	118 Add W2, W8, 16
	119 Move X0, X20
	120 Move X1, X22
	121 Move X3, X31
	122 Call Native.MemCpy, X0, X1, X2
	123 Move W1, 1
	124 Move X0, X19
	125 Move X2, X31
	126 Call NetBitBuffer.Read, X0, X1
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X23, 0x222C000
	129 Move X23, [X23+3176]
	130 Move W1, 8
	131 Move X0, X19
	132 Move X2, X31
	133 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	134 Move W24, [X20]
	135 Move W21, W0
	136 Move W1, 8
	137 Move X0, X19
	138 Move X2, X31
	139 Call NetBitBuffer.ReadInt64VarLength, X0, X1
	140 Move X8, [X23]
	141 Move X22, X0
	142 Move W9, [X8+224]
	143 Compare W9, 0
	144 JumpIfNotEqual {147}
	145 Move X0, X8
	146 Call 0x1C17DFC
	147 And W10, W22, 1
	148 Move X9, X22
	149 ShiftRight X9, 1
	150 And X9, X9, 0x7FFFFFFF
	151 Subtract W10, W31, W10
	152 Xor W9, W9, W10
	153 Move X8, W21
	154 Add W9, W24, W9
	155 Move W1, 1
	156 Move X0, X19
	157 Move X2, X31
	158 Move [X20], W9
	159 Call NetBitBuffer.Read, X0, X1
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X20, [X31+64]
	162 Move X19, [X31+72]
	163 Move X22, [X31+48]
	164 Move X21, [X31+56]
	165 Move X24, [X31+32]
	166 Move X23, [X31+40]
	167 Move X26, [X31+16]
	168 Move X25, [X31+24]
	169 Move X30, [X31+80]
	170 Return 
	171 Call 0x1C17F20

Method: System.Void Dispose(Fusion.Allocator* allocator)

Disassembly:
	0x01ED9BE0 ADRP X22, 0x221B000
	0x01ED9BE4 LDR X22, [X22 + 0xFE0]
	0x01ED9BE8 MOV X1, X0
	0x01ED9BEC MOV X0, X19
	0x01ED9BF0 MOV X2, X31
	0x01ED9BF4 BL 0x32333E0
	0x01ED9BF8 LDR X1, [X22]
	0x01ED9BFC MOV X0, X19
	0x01ED9C00 MOV X2, X31
	0x01ED9C04 BL 0x32333E0
	0x01ED9C08 LDR V0, [X20]
	0x01ED9C0C LDUR V1, [X20 + 0xC]
	0x01ED9C10 ADD X0, X31, 0x0
	0x01ED9C14 STR V0, [X31]
	0x01ED9C18 STUR V1, [X31 + 0xC]
	0x01ED9C1C BL 0x1ED99D4
	0x01ED9C20 MOV X1, X0
	0x01ED9C24 MOV X0, X19
	0x01ED9C28 MOV X2, X31
	0x01ED9C2C BL 0x32333E0
	0x01ED9C30 LDR X8, [X21 + 0x28]
	0x01ED9C34 LDR X9, [X31 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2501000
	007 Move X21, 0x2226000
	008 Move W8, [X22+1323]
	009 Move X21, [X21+1112]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2226000
	017 Move X0, [X0+1112]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1323], W8
	021 Move X2, [X21]
	022 Add X1, X20, 32
	023 Move X0, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x227A830, X0, X1
	030 Return 

Method: System.Void .ctor()

Disassembly:
	0x01ED9C38 CMP X8, X9
	0x01ED9C3C B.NE 0x1ED9C58

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

