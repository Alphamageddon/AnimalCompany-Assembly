Type: Fusion.DynamicHeap

Method: System.Int32 get_MemoryReserved()

Disassembly:
	0x01E7F820 MOVZ W1, 0x5
	0x01E7F824 BL 0x1C16D6C
	0x01E7F828 MOV X20, X0
	0x01E7F82C CBNZ X0, 0x1E7F8A8
	0x01E7F830 BL 0x1C16F20
	0x01E7F834 BL 0x1C16F20

ISIL:
	001 Move W8, [X0+32]
	002 Move W9, [X0+104]
	003 Move W8, W8
	004 ShiftRight W8, 17
	005 And W8, W8, 0xFFFF
	006 Subtract W8, W8, 0x8000
	007 Multiply W0, W8, W9
	008 Return X0

Method: System.Double get_MemoryAllocated()

Disassembly:
	0x01E7F838 BL 0x1C16F20
	0x01E7F83C BL 0x1C16F20
	0x01E7F840 BL 0x1C16F20
	0x01E7F844 BL 0x1C16F20
	0x01E7F848 BL 0x1C16F20
	0x01E7F84C BL 0x1C16F20
	0x01E7F850 ADRP X0, 0x227E000
	0x01E7F854 LDR X0, [X0 + 0xCC8]
	0x01E7F858 BL 0x1C16D08
	0x01E7F85C MOV X1, X20
	0x01E7F860 MOV X2, X31
	0x01E7F864 BL 0x321EFD0
	0x01E7F868 MOV X19, X0
	0x01E7F86C ADRP X0, 0x2274000
	0x01E7F870 LDR X0, [X0 + 0x7D0]
	0x01E7F874 BL 0x1C16D08
	0x01E7F878 BL 0x1C16F10
	0x01E7F87C MOV X1, X19
	0x01E7F880 MOV X2, X31
	0x01E7F884 MOV X20, X0
	0x01E7F888 BL 0x33B2C70
	0x01E7F88C ADRP X0, 0x227E000
	0x01E7F890 LDR X0, [X0 + 0xCD0]
	0x01E7F894 BL 0x1C16D08
	0x01E7F898 MOV X1, X0
	0x01E7F89C MOV X0, X20
	0x01E7F8A0 BL 0x1C16DEC
	0x01E7F8A4 BL 0x1C16F28
	0x01E7F8A8 ADRP X0, 0x227E000
	0x01E7F8AC LDR X0, [X0 + 0xCD8]
	0x01E7F8B0 BL 0x1C16D08
	0x01E7F8B4 LDR W8, [X20 + 0x18]
	0x01E7F8B8 CBNZ W8, 0x1E7F8C0
	0x01E7F8BC BL 0x1C16F28
	0x01E7F8C0 STR X0, [X20 + 0x20]
	0x01E7F8C4 ADRP X0, 0x227E000
	0x01E7F8C8 LDR X0, [X0 + 0xCB8]
	0x01E7F8CC BL 0x1C16D08
	0x01E7F8D0 CBNZ X19, 0x1E7F8D8
	0x01E7F8D4 BL 0x1C16F20
	0x01E7F8D8 LDR X8, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255B000
	006 Move X20, 0x2275000
	007 Move W8, [X21+453]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2275000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+453], W8
	019 Move X0, [X20]
	020 Move W19, [X19+132]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X21, 0x255B000
	026 Move W8, [X21+553]
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x2275000
	030 Move X0, [X0+1448]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+553], W8
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X8, 0x3F500000
	040 NotImplemented "Instruction SCVTF not yet implemented."
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move D1, X8
	044 Multiply D0, D0, D1
	045 Multiply D0, D0, D1
	046 Move W0, 3
	047 Move W1, W31
	048 Move X2, X31
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call Math.Round, V0, X0, X1
	052 Return V0

Method: System.Int32 get_ObjectsAllocated()

Disassembly:
	0x01E7F8DC LDP X9, X1, [X8 + 0x1A8]
	0x01E7F8E0 MOV X0, X19

ISIL:
	001 Move W0, [X0+128]
	002 Return X0

Method: System.Int32 get_GCRoots()

Disassembly:
	0x01E7F8E4 BLR X9
	0x01E7F8E8 LDR W8, [X20 + 0x18]

ISIL:
	001 Move W0, [X0+124]
	002 Return X0

Method: Fusion.DynamicHeap/Phase get_GCPhase()

Disassembly:
	0x01E7F8EC CMP W8, 0x1
	0x01E7F8F0 B.LS 0x1E7F998

ISIL:
	001 Move W0, [X0+84]
	002 Return X0

Method: System.Void Destroy(Fusion.DynamicHeap* heap)

Disassembly:
	0x01E7F8F4 STR X0, [X20 + 0x28]
	0x01E7F8F8 ADRP X0, 0x227D000
	0x01E7F8FC LDR X0, [X0 + 0x790]
	0x01E7F900 BL 0x1C16D08
	0x01E7F904 LDR W8, [X20 + 0x18]
	0x01E7F908 CMP W8, 0x2
	0x01E7F90C B.LS 0x1E7F99C
	0x01E7F910 STR X0, [X20 + 0x30]
	0x01E7F914 LDR X8, [X23]
	0x01E7F918 LDP X9, X1, [X8 + 0x1A8]
	0x01E7F91C MOV X0, X23
	0x01E7F920 BLR X9
	0x01E7F924 LDR W8, [X20 + 0x18]
	0x01E7F928 CMP W8, 0x3
	0x01E7F92C B.LS 0x1E7F9A0
	0x01E7F930 STR X0, [X20 + 0x38]
	0x01E7F934 ADRP X0, 0x227E000
	0x01E7F938 LDR X0, [X0 + 0xCE0]
	0x01E7F93C BL 0x1C16D08
	0x01E7F940 LDR W8, [X20 + 0x18]
	0x01E7F944 CMP W8, 0x4
	0x01E7F948 B.LS 0x1E7F9A4
	0x01E7F94C STR X0, [X20 + 0x40]
	0x01E7F950 MOV X0, X20
	0x01E7F954 MOV X1, X31
	0x01E7F958 BL 0x32278CC
	0x01E7F95C MOV X19, X0
	0x01E7F960 ADRP X0, 0x2274000
	0x01E7F964 LDR X0, [X0 + 0x7D0]
	0x01E7F968 BL 0x1C16D08
	0x01E7F96C BL 0x1C16F10
	0x01E7F970 MOV X20, X0
	0x01E7F974 MOV X1, X19
	0x01E7F978 MOV X2, X31
	0x01E7F97C BL 0x33B2C70
	0x01E7F980 ADRP X0, 0x227E000
	0x01E7F984 LDR X0, [X0 + 0xCD0]
	0x01E7F988 BL 0x1C16D08
	0x01E7F98C MOV X1, X0
	0x01E7F990 MOV X0, X20
	0x01E7F994 BL 0x1C16DEC
	0x01E7F998 BL 0x1C16F28
	0x01E7F99C BL 0x1C16F28
	0x01E7F9A0 BL 0x1C16F28
	0x01E7F9A4 BL 0x1C16F28
	0x01E7F9A8 B 0x1E7FA34
	0x01E7F9AC B 0x1E7FA34
	0x01E7F9B0 B 0x1E7FA34
	0x01E7F9B4 B 0x1E7FA34
	0x01E7F9B8 B 0x1E7FA34
	0x01E7F9BC B 0x1E7FA34
	0x01E7F9C0 B 0x1E7FA34
	0x01E7F9C4 B 0x1E7FA34
	0x01E7F9C8 B 0x1E7FA34
	0x01E7F9CC B 0x1E7FA34
	0x01E7F9D0 B 0x1E7FA34
	0x01E7F9D4 B 0x1E7FA34
	0x01E7F9D8 B 0x1E7FA34
	0x01E7F9DC B 0x1E7FA34
	0x01E7F9E0 B 0x1E7FA34
	0x01E7F9E4 B 0x1E7FA34

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x255B000
	008 Move W8, [X20+454]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227F000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+454], W8
	019 Compare X19, 0
	020 JumpIfEqual {68}
	021 Move W8, [X19+32]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X23, 0x227F000
	024 Move X23, [X23+2976]
	025 Move W21, 1
	026 Move W22, 8
	027 Move X0, [X23]
	028 Move X8, [X19+24]
	029 Move W9, [X0+224]
	030 Move X20, [X22]
	031 Compare W9, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Call DynamicHeap.Destroy, X0
	036 NotImplemented "Instruction LDRSW not yet implemented."
	037 Add X21, X21, 1
	038 Add X22, X22, 8
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, [X19+40]
	041 Move X1, X31
	042 Call Native.Free, X0
	043 Move X0, [X19+24]
	044 Move X1, X31
	045 Call Native.Free, X0
	046 Move X0, [X19+88]
	047 Move X1, X31
	048 Call Native.Free, X0
	049 Move X0, [X19+112]
	050 Move X1, X31
	051 Call Native.Free, X0
	052 Move X0, [X19+48]
	053 Move X1, X31
	054 Call Native.Free, X0
	055 Move X0, [X19+64]
	056 Move X1, X31
	057 Call Native.Free, X0
	058 Move X0, X19
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Call Native.Free, X0
	067 Return 
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Move X23, [X31+56]
	074 Return 

Method: System.Void Destroy(Fusion.DynamicHeap/Block* block)

Disassembly:
	0x01E7F9E8 B 0x1E7FA34
	0x01E7F9EC B 0x1E7FA34
	0x01E7F9F0 B 0x1E7FA34
	0x01E7F9F4 B 0x1E7FA34
	0x01E7F9F8 B 0x1E7FA34
	0x01E7F9FC B 0x1E7FA34
	0x01E7FA00 B 0x1E7FA34
	0x01E7FA04 B 0x1E7FA34
	0x01E7FA08 B 0x1E7FA34
	0x01E7FA0C B 0x1E7FA34
	0x01E7FA10 B 0x1E7FA34
	0x01E7FA14 B 0x1E7FA34
	0x01E7FA18 B 0x1E7FA34
	0x01E7FA1C B 0x1E7FA34

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {18}
	005 Move X19, X0
	006 Move X0, [X0+24]
	007 Move X1, X31
	008 Call Native.Free, X0
	009 Move X0, [X19+56]
	010 Move X1, X31
	011 Call Native.Free, X0
	012 Move X0, X19
	013 Move X1, X31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call Native.Free, X0
	017 Return 
	018 Call 0x1C17F20

Method: Fusion.DynamicHeap* Create(System.Type[] types)

Disassembly:
	0x01E7FA20 B 0x1E7FA34
	0x01E7FA24 B 0x1E7FA34
	0x01E7FA28 B 0x1E7FA34
	0x01E7FA2C B 0x1E7FA34
	0x01E7FA30 B 0x1E7FA34
	0x01E7FA34 MOV X19, X0
	0x01E7FA38 CMP W1, 0x1
	0x01E7FA3C B.NE 0x1E7FA70
	0x01E7FA40 MOV X0, X19
	0x01E7FA44 BL 0x3EB1AD0
	0x01E7FA48 LDR X20, [X0]
	0x01E7FA4C BL 0x3EB1AE0
	0x01E7FA50 ADRP X8, 0x227E000
	0x01E7FA54 LDR X8, [X8 + 0xCA0]
	0x01E7FA58 ADD X0, X31, 0x30
	0x01E7FA5C LDR X1, [X8]
	0x01E7FA60 BL 0x2C0A83C
	0x01E7FA64 CBZ X20, 0x1E7F7D8
	0x01E7FA68 MOV X0, X20
	0x01E7FA6C BL 0x1C16F18
	0x01E7FA70 MOV X20, X31
	0x01E7FA74 B 0x1E7FA7C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255B000
	006 Move X21, 0x227F000
	007 Move W8, [X20+455]
	008 Move X21, [X21+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227F000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+455], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X1, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, 64
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call DynamicHeap.Create, X0, X1
	031 Return X0

Method: T* SetForcedAlive(T* ptr)

Disassembly:
	0x021B1384 BL 0x1C5C788
	0x021B1388 B 0x21B1398
	0x021B138C LDRSW X9, [X10]
	0x021B1390 ADD X8, X8, X9, 0x4, LSL
	0x021B1394 ADD X0, X8, 0x138
	0x021B1398 LDP X8, X1, [X0]
	0x021B139C MOV X0, X24
	0x021B13A0 BLR X8
	0x021B13A4 MOV X24, X0
	0x021B13A8 CBZ X0, 0x21B1618

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Subtract X8, X0, 8
	005 Move W9, [X8]
	006 Or W9, W9, 16
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: Fusion.DynamicHeap* Create(Fusion.DynamicHeap/Config config, System.Type[] types)

Disassembly:
	0x01E7FA80 LDR X8, [X8 + 0xCA0]
	0x01E7FA84 LDR X1, [X8]
	0x01E7FA88 ADD X0, X31, 0x30
	0x01E7FA8C BL 0x2C0A83C
	0x01E7FA90 CBNZ X20, 0x1E7FA9C
	0x01E7FA94 MOV X0, X19
	0x01E7FA98 BL 0x1D2C690
	0x01E7FA9C MOV X0, X20
	0x01E7FAA0 BL 0x1C16F18
	0x01E7FAA4 BL 0x1990590
	0x01E7FAA8 STR X30, [X31 - 0x10]!
	0x01E7FAAC CBZ X0, 0x1E7FAE0
	0x01E7FAB0 LDRH W8, [X0 + 0x48]
	0x01E7FAB4 MOVZ W9, 0x1
	0x01E7FAB8 ADD W10, W8, 0x1
	0x01E7FABC AND W12, W10, 0xFFFF
	0x01E7FAC0 ADD W11, W8, 0x2
	0x01E7FAC4 CMP W12, W10
	0x01E7FAC8 CSINC W10, W11, W8, NE
	0x01E7FACC CSINC W8, W9, W8, NE
	0x01E7FAD0 STRH W10, [X0 + 0x48]
	0x01E7FAD4 MOV W0, W8
	0x01E7FAD8 LDR X30, [X31], #0x10
	0x01E7FADC RET
	0x01E7FAE0 BL 0x1C16F20
	0x01E7FAE4 STR X30, [X31 - 0x10]!
	0x01E7FAE8 CBZ X0, 0x1E7FB00
	0x01E7FAEC LDR X8, [X0 + 0x28]
	0x01E7FAF0 MOVZ W9, 0x30
	0x01E7FAF4 SMADDL X0, X1, X9, X8
	0x01E7FAF8 LDR X30, [X31], #0x10
	0x01E7FAFC RET
	0x01E7FB00 BL 0x1C16F20
	0x01E7FB04 STP X30, X21, [X31 - 0x20]!
	0x01E7FB08 STP X20, X19, [X31 + 0x10]
	0x01E7FB0C ADRP X20, 0x255A000
	0x01E7FB10 ADRP X21, 0x227E000
	0x01E7FB14 LDRB W8, [X20 + 0x1C9]
	0x01E7FB18 LDR X21, [X21 + 0xBA0]
	0x01E7FB1C MOV W19, W1
	0x01E7FB20 TBNZ X8, 0x0, 0x1E7FB38
	0x01E7FB24 ADRP X0, 0x227E000
	0x01E7FB28 LDR X0, [X0 + 0xBA0]
	0x01E7FB2C BL 0x1C16CF4
	0x01E7FB30 MOVZ W8, 0x1
	0x01E7FB34 STRB W8, [X20 + 0x1C9]
	0x01E7FB38 LDR X0, [X21]
	0x01E7FB3C LDR W8, [X0 + 0xE0]
	0x01E7FB40 CBNZ W8, 0x1E7FB48
	0x01E7FB44 BL 0x1C16DFC
	0x01E7FB48 MOV W0, W19
	0x01E7FB4C LDP X20, X19, [X31 + 0x10]
	0x01E7FB50 LDP X30, X21, [X31], #0x20
	0x01E7FB54 B 0x1E7FB58
	0x01E7FB58 STP X30, X21, [X31 - 0x20]!
	0x01E7FB5C STP X20, X19, [X31 + 0x10]
	0x01E7FB60 ADRP X21, 0x255A000
	0x01E7FB64 ADRP X20, 0x227E000
	0x01E7FB68 LDRB W8, [X21 + 0x1D7]
	0x01E7FB6C LDR X20, [X20 + 0xBA0]
	0x01E7FB70 MOV W19, W0
	0x01E7FB74 TBNZ X8, 0x0, 0x1E7FB8C
	0x01E7FB78 ADRP X0, 0x227E000
	0x01E7FB7C LDR X0, [X0 + 0xBA0]
	0x01E7FB80 BL 0x1C16CF4
	0x01E7FB84 MOVZ W8, 0x1
	0x01E7FB88 STRB W8, [X21 + 0x1D7]
	0x01E7FB8C LDR X0, [X20]
	0x01E7FB90 LDR W8, [X0 + 0xE0]
	0x01E7FB94 CBNZ W8, 0x1E7FB9C
	0x01E7FB98 BL 0x1C16DFC
	0x01E7FB9C ADD W8, W19, 0x7
	0x01E7FBA0 ADD W9, W19, 0xE
	0x01E7FBA4 CMP W8, 0x0
	0x01E7FBA8 CSEL W9, W9, W8, LT
	0x01E7FBAC CMP W8, 0x48
	0x01E7FBB0 SBFM W0, W9, 0x3, 0x1F
	0x01E7FBB4 B.LT 0x1E7FBE8
	0x01E7FBB8 LDR X8, [X20]
	0x01E7FBBC SUB W19, W0, 0x1
	0x01E7FBC0 LDR W9, [X8 + 0xE0]
	0x01E7FBC4 CBNZ W9, 0x1E7FBD0
	0x01E7FBC8 MOV X0, X8
	0x01E7FBCC BL 0x1C16DFC
	0x01E7FBD0 MOV W0, W19
	0x01E7FBD4 BL 0x1E80BE8
	0x01E7FBD8 ADD W8, W0, 0x1E
	0x01E7FBDC LSRV W8, W19, W8
	0x01E7FBE0 BFM W8, W0, 0x1E, 0x1D
	0x01E7FBE4 SUB W0, W8, 0x3
	0x01E7FBE8 LDP X20, X19, [X31 + 0x10]
	0x01E7FBEC LDP X30, X21, [X31], #0x20
	0x01E7FBF0 RET
	0x01E7FBF4 SUB X31, X31, 0x60
	0x01E7FBF8 STP X30, X27, [X31 + 0x10]
	0x01E7FBFC STP X26, X25, [X31 + 0x20]
	0x01E7FC00 STP X24, X23, [X31 + 0x30]
	0x01E7FC04 STP X22, X21, [X31 + 0x40]
	0x01E7FC08 STP X20, X19, [X31 + 0x50]
	0x01E7FC0C ADRP X22, 0x255A000
	0x01E7FC10 LDRB W8, [X22 + 0x1CA]
	0x01E7FC14 MOV X20, X2
	0x01E7FC18 MOV W21, W1
	0x01E7FC1C MOV X19, X0
	0x01E7FC20 TBNZ X8, 0x0, 0x1E7FC38
	0x01E7FC24 ADRP X0, 0x227E000
	0x01E7FC28 LDR X0, [X0 + 0xBA0]
	0x01E7FC2C BL 0x1C16CF4
	0x01E7FC30 MOVZ W8, 0x1
	0x01E7FC34 STRB W8, [X22 + 0x1CA]
	0x01E7FC38 SUB W8, W21, 0x8
	0x01E7FC3C UBFM W8, W8, 0x3, 0x1F
	0x01E7FC40 CMP W8, 0xFFF
	0x01E7FC44 B.CS 0x1E7FD94
	0x01E7FC48 ADRP X24, 0x227E000
	0x01E7FC4C LDR X24, [X24 + 0xBA0]
	0x01E7FC50 LDR X0, [X24]
	0x01E7FC54 LDR W8, [X0 + 0xE0]
	0x01E7FC58 CBNZ W8, 0x1E7FC60
	0x01E7FC5C BL 0x1C16DFC
	0x01E7FC60 MOV X0, X19
	0x01E7FC64 MOV W1, W21
	0x01E7FC68 BL 0x1E7FB04
	0x01E7FC6C MOV W22, W0
	0x01E7FC70 MOV W26, W31
	0x01E7FC74 MOVZ W27, 0x30
	0x01E7FC78 LDR X0, [X24]
	0x01E7FC7C LDR W8, [X0 + 0xE0]
	0x01E7FC80 CBNZ W8, 0x1E7FC88
	0x01E7FC84 BL 0x1C16DFC
	0x01E7FC88 CBZ X19, 0x1E7FD90
	0x01E7FC8C LDR X8, [X19 + 0x28]
	0x01E7FC90 NOP
	0x01E7FC94 SMADDL X25, X22, X27, X8
	0x01E7FC98 CBZ X25, 0x1E7FD90
	0x01E7FC9C LDR X23, [X25 + 0x10]
	0x01E7FCA0 CBZ X23, 0x1E7FCCC
	0x01E7FCA4 LDR X0, [X24]
	0x01E7FCA8 LDR W8, [X0 + 0xE0]
	0x01E7FCAC CBNZ W8, 0x1E7FCB4
	0x01E7FCB0 BL 0x1C16DFC
	0x01E7FCB4 MOV X0, X19
	0x01E7FCB8 MOV X1, X23
	0x01E7FCBC MOV W2, W21
	0x01E7FCC0 MOV X3, X20
	0x01E7FCC4 BL 0x1E7FE10
	0x01E7FCC8 CBNZ X0, 0x1E7FD5C
	0x01E7FCCC TBNZ X26, 0x0, 0x1E7FCE4
	0x01E7FCD0 ADD W22, W22, 0x1
	0x01E7FCD4 CMP W22, 0x31
	0x01E7FCD8 MOVZ W26, 0x1
	0x01E7FCDC B.LT 0x1E7FC78
	0x01E7FCE0 B 0x1E7FD10
	0x01E7FCE4 LDR X0, [X24]
	0x01E7FCE8 LDR W8, [X0 + 0xE0]
	0x01E7FCEC CBNZ W8, 0x1E7FCF4
	0x01E7FCF0 BL 0x1C16DFC
	0x01E7FCF4 MOV X0, X19
	0x01E7FCF8 MOV W1, W21
	0x01E7FCFC BL 0x1E7FB04
	0x01E7FD00 LDR X8, [X19 + 0x28]
	0x01E7FD04 MOVZ W9, 0x30
	0x01E7FD08 SMADDL X25, X0, X9, X8
	0x01E7FD0C MOV X26, X25
	0x01E7FD10 LDR X0, [X24]
	0x01E7FD14 LDR W8, [X0 + 0xE0]
	0x01E7FD18 CBNZ W8, 0x1E7FD20
	0x01E7FD1C BL 0x1C16DFC
	0x01E7FD20 MOV X0, X19
	0x01E7FD24 BL 0x1E7FF88
	0x01E7FD28 CBZ X26, 0x1E7FD90
	0x01E7FD2C MOV X1, X0
	0x01E7FD30 CBZ X0, 0x1E7FD90
	0x01E7FD34 LDR W8, [X25]
	0x01E7FD38 ADD X0, X25, 0x8
	0x01E7FD3C STR W8, [X1 + 0x20]
	0x01E7FD40 BL 0x1E7FFE0
	0x01E7FD44 LDR X1, [X25 + 0x10]
	0x01E7FD48 MOV X0, X19
	0x01E7FD4C MOV W2, W21
	0x01E7FD50 MOV X3, X20
	0x01E7FD54 BL 0x1E7FE10
	0x01E7FD58 CBZ X0, 0x1E7FE04
	0x01E7FD5C LDP W8, W9, [X19 + 0x80]
	0x01E7FD60 LDP X22, X21, [X31 + 0x40]
	0x01E7FD64 LDP X24, X23, [X31 + 0x30]
	0x01E7FD68 LDP X30, X27, [X31 + 0x10]
	0x01E7FD6C ADD W8, W8, 0x1
	0x01E7FD70 STR W8, [X19 + 0x80]
	0x01E7FD74 LDR W8, [X25 + 0x24]
	0x01E7FD78 LDP X26, X25, [X31 + 0x20]
	0x01E7FD7C ADD W8, W8, W9
	0x01E7FD80 STR W8, [X19 + 0x84]
	0x01E7FD84 LDP X20, X19, [X31 + 0x50]
	0x01E7FD88 ADD X31, X31, 0x60
	0x01E7FD8C RET
	0x01E7FD90 BL 0x1C16F20
	0x01E7FD94 STR W21, [X31 + 0xC]
	0x01E7FD98 ADRP X0, 0x2274000
	0x01E7FD9C LDR X0, [X0 + 0x758]
	0x01E7FDA0 BL 0x1C16D08
	0x01E7FDA4 ADD X1, X31, 0xC
	0x01E7FDA8 BL 0x1C16E04
	0x01E7FDAC MOV X19, X0
	0x01E7FDB0 ADRP X0, 0x227D000
	0x01E7FDB4 LDR X0, [X0 + 0xDC8]
	0x01E7FDB8 BL 0x1C16D08
	0x01E7FDBC MOV X1, X19
	0x01E7FDC0 MOV X2, X31
	0x01E7FDC4 BL 0x321EFD0
	0x01E7FDC8 MOV X19, X0
	0x01E7FDCC ADRP X0, 0x2274000
	0x01E7FDD0 LDR X0, [X0 + 0x5B0]
	0x01E7FDD4 BL 0x1C16D08
	0x01E7FDD8 BL 0x1C16F10
	0x01E7FDDC MOV X1, X19
	0x01E7FDE0 MOV X2, X31
	0x01E7FDE4 MOV X20, X0
	0x01E7FDE8 BL 0x337DF1C
	0x01E7FDEC ADRP X0, 0x227E000
	0x01E7FDF0 LDR X0, [X0 + 0xCE8]
	0x01E7FDF4 BL 0x1C16D08
	0x01E7FDF8 MOV X1, X0
	0x01E7FDFC MOV X0, X20
	0x01E7FE00 BL 0x1C16DEC
	0x01E7FE04 LDR X0, [X24]
	0x01E7FE08 BL 0x19903D0
	0x01E7FE0C BL 0x1E80024
	0x01E7FE10 STP X30, X25, [X31 - 0x40]!
	0x01E7FE14 STP X24, X23, [X31 + 0x10]
	0x01E7FE18 STP X22, X21, [X31 + 0x20]
	0x01E7FE1C STP X20, X19, [X31 + 0x30]
	0x01E7FE20 ADRP X23, 0x255A000
	0x01E7FE24 LDRB W8, [X23 + 0x1CF]
	0x01E7FE28 MOV X21, X3
	0x01E7FE2C MOV W19, W2
	0x01E7FE30 MOV X20, X1
	0x01E7FE34 MOV X22, X0
	0x01E7FE38 TBNZ X8, 0x0, 0x1E7FE50
	0x01E7FE3C ADRP X0, 0x227E000
	0x01E7FE40 LDR X0, [X0 + 0xBA0]
	0x01E7FE44 BL 0x1C16CF4
	0x01E7FE48 MOVZ W8, 0x1
	0x01E7FE4C STRB W8, [X23 + 0x1CF]
	0x01E7FE50 CBZ X20, 0x1E7FF84
	0x01E7FE54 ADRP X24, 0x227E000
	0x01E7FE58 LDR X24, [X24 + 0xBA0]
	0x01E7FE5C LDRSW X23, [X20 + 0x20]
	0x01E7FE60 LDR X0, [X24]
	0x01E7FE64 LDR W8, [X0 + 0xE0]
	0x01E7FE68 CBNZ W8, 0x1E7FE70
	0x01E7FE6C BL 0x1C16DFC
	0x01E7FE70 CBZ X22, 0x1E7FF84
	0x01E7FE74 LDR X8, [X22 + 0x28]
	0x01E7FE78 LDR X22, [X20 + 0x30]
	0x01E7FE7C MOVZ W9, 0x30
	0x01E7FE80 MADD X23, X23, X9, X8
	0x01E7FE84 CBZ X22, 0x1E7FEC4
	0x01E7FE88 LDR W25, [X22 + 0x4]
	0x01E7FE8C STR W31, [X22 + 0x4]
	0x01E7FE90 LDR W8, [X20 + 0x38]
	0x01E7FE94 SUB W8, W8, 0x1
	0x01E7FE98 STR W8, [X20 + 0x38]
	0x01E7FE9C CBZ W25, 0x1E7FF14
	0x01E7FEA0 LDR X0, [X24]
	0x01E7FEA4 LDR W8, [X0 + 0xE0]
	0x01E7FEA8 CBNZ W8, 0x1E7FEB0
	0x01E7FEAC BL 0x1C16DFC
	0x01E7FEB0 LDR X8, [X20 + 0x28]
	0x01E7FEB4 SUB W9, W25, 0x1
	0x01E7FEB8 ADD X8, X8, W9, SXTW
	0x01E7FEBC STR X8, [X20 + 0x30]
	0x01E7FEC0 B 0x1E7FF18
	0x01E7FEC4 CBZ X23, 0x1E7FF84
	0x01E7FEC8 LDR W8, [X20 + 0x3C]
	0x01E7FECC LDR W9, [X23 + 0x28]
	0x01E7FED0 CMP W8, W9
	0x01E7FED4 B.GE 0x1E7FF64
	0x01E7FED8 LDR X10, [X20]
	0x01E7FEDC LDR X9, [X20 + 0x28]
	0x01E7FEE0 ADD W11, W8, 0x1
	0x01E7FEE4 STR W11, [X20 + 0x3C]
	0x01E7FEE8 CBZ X10, 0x1E7FF84
	0x01E7FEEC LDR W11, [X23 + 0x24]
	0x01E7FEF0 LDRB W10, [X10]
	0x01E7FEF4 MUL W8, W11, W8
	0x01E7FEF8 ADDS X22, X9, W8, SXTW
	0x01E7FEFC STRB W10, [X21]
	0x01E7FF00 B.EQ 0x1E7FF6C
	0x01E7FF04 LDR W8, [X20 + 0x40]
	0x01E7FF08 ADD W8, W8, 0x1
	0x01E7FF0C STR W8, [X20 + 0x40]
	0x01E7FF10 B 0x1E7FF38
	0x01E7FF14 STR X31, [X20 + 0x30]
	0x01E7FF18 LDR X8, [X20]
	0x01E7FF1C CBZ X8, 0x1E7FF84
	0x01E7FF20 LDRB W8, [X8]
	0x01E7FF24 STRB W8, [X21]
	0x01E7FF28 LDR W8, [X20 + 0x40]
	0x01E7FF2C ADD W8, W8, 0x1
	0x01E7FF30 STR W8, [X20 + 0x40]
	0x01E7FF34 CBZ X23, 0x1E7FF84
	0x01E7FF38 LDR W9, [X23 + 0x28]
	0x01E7FF3C CMP W8, W9
	0x01E7FF40 B.NE 0x1E7FF50
	0x01E7FF44 ADD X0, X23, 0x8
	0x01E7FF48 MOV X1, X20
	0x01E7FF4C BL 0x1E80538
	0x01E7FF50 MOV X0, X22
	0x01E7FF54 MOV W1, W19
	0x01E7FF58 MOV X2, X31
	0x01E7FF5C BL 0x1E35770
	0x01E7FF60 B 0x1E7FF6C
	0x01E7FF64 MOV X22, X31
	0x01E7FF68 STRB W31, [X21]
	0x01E7FF6C MOV X0, X22
	0x01E7FF70 LDP X20, X19, [X31 + 0x30]
	0x01E7FF74 LDP X22, X21, [X31 + 0x20]
	0x01E7FF78 LDP X24, X23, [X31 + 0x10]
	0x01E7FF7C LDP X30, X25, [X31], #0x40
	0x01E7FF80 RET
	0x01E7FF84 BL 0x1C16F20
	0x01E7FF88 STP X30, X21, [X31 - 0x20]!
	0x01E7FF8C STP X20, X19, [X31 + 0x10]
	0x01E7FF90 ADRP X20, 0x255A000
	0x01E7FF94 ADRP X21, 0x227E000
	0x01E7FF98 LDRB W8, [X20 + 0x1CC]
	0x01E7FF9C LDR X21, [X21 + 0xBA0]
	0x01E7FFA0 MOV X19, X0
	0x01E7FFA4 TBNZ X8, 0x0, 0x1E7FFBC
	0x01E7FFA8 ADRP X0, 0x227E000
	0x01E7FFAC LDR X0, [X0 + 0xBA0]
	0x01E7FFB0 BL 0x1C16CF4
	0x01E7FFB4 MOVZ W8, 0x1
	0x01E7FFB8 STRB W8, [X20 + 0x1CC]
	0x01E7FFBC LDR X0, [X21]
	0x01E7FFC0 LDR W8, [X0 + 0xE0]
	0x01E7FFC4 CBNZ W8, 0x1E7FFCC
	0x01E7FFC8 BL 0x1C16DFC
	0x01E7FFCC MOV X0, X19
	0x01E7FFD0 LDP X20, X19, [X31 + 0x10]
	0x01E7FFD4 MOV W1, W31
	0x01E7FFD8 LDP X30, X21, [X31], #0x20
	0x01E7FFDC B 0x1E80070
	0x01E7FFE0 STR X30, [X31 - 0x10]!
	0x01E7FFE4 MOV X8, X0
	0x01E7FFE8 LDR X9, [X8 + 0x8]!
	0x01E7FFEC CBZ X1, 0x1E80020
	0x01E7FFF0 STP X31, X9, [X1 + 0x10]
	0x01E7FFF4 CBZ X9, 0x1E80000
	0x01E7FFF8 STR X1, [X9 + 0x10]
	0x01E7FFFC B 0x1E80008
	0x01E80000 ADD X8, X0, 0x10
	0x01E80004 STR X1, [X0 + 0x8]
	0x01E80008 STR X1, [X8]
	0x01E8000C LDR W8, [X0]
	0x01E80010 ADD W8, W8, 0x1
	0x01E80014 STR W8, [X0]
	0x01E80018 LDR X30, [X31], #0x10
	0x01E8001C RET
	0x01E80020 BL 0x1C16F20
	0x01E80024 STP X30, X19, [X31 - 0x10]!
	0x01E80028 ADRP X0, 0x2273000
	0x01E8002C LDR X0, [X0 + 0x7D0]
	0x01E80030 BL 0x1C16D08
	0x01E80034 BL 0x1C16F10
	0x01E80038 MOV X19, X0
	0x01E8003C ADRP X0, 0x227D000
	0x01E80040 LDR X0, [X0 + 0xCF0]
	0x01E80044 BL 0x1C16D08
	0x01E80048 MOV X1, X0
	0x01E8004C MOV X0, X19
	0x01E80050 MOV X2, X31
	0x01E80054 BL 0x33B2C70
	0x01E80058 ADRP X0, 0x227D000
	0x01E8005C LDR X0, [X0 + 0xCF8]
	0x01E80060 BL 0x1C16D08
	0x01E80064 MOV X1, X0
	0x01E80068 MOV X0, X19
	0x01E8006C BL 0x1C16DEC
	0x01E80070 STP X30, X25, [X31 - 0x40]!
	0x01E80074 STP X24, X23, [X31 + 0x10]
	0x01E80078 STP X22, X21, [X31 + 0x20]
	0x01E8007C STP X20, X19, [X31 + 0x30]
	0x01E80080 ADRP X20, 0x227D000
	0x01E80084 LDR X20, [X20 + 0xBA0]
	0x01E80088 MOV W21, W1
	0x01E8008C MOV X19, X0
	0x01E80090 ADRP X24, 0x2559000
	0x01E80094 MOVZ W25, 0x1
	0x01E80098 LDRB W8, [X24 + 0x1CB]
	0x01E8009C TBNZ X8, 0x0, 0x1E800AC
	0x01E800A0 MOV X0, X20
	0x01E800A4 BL 0x1C16CF4
	0x01E800A8 STRB W25, [X24 + 0x1CB]
	0x01E800AC CBZ X19, 0x1E80128
	0x01E800B0 LDR X22, [X19 + 0x8]
	0x01E800B4 CBZ X22, 0x1E800C0
	0x01E800B8 LDR X23, [X22 + 0x28]
	0x01E800BC CBNZ X23, 0x1E800E4
	0x01E800C0 LDR X0, [X20]
	0x01E800C4 TBNZ X21, 0x0, 0x1E8012C
	0x01E800C8 LDR W8, [X0 + 0xE0]
	0x01E800CC CBNZ W8, 0x1E800D4
	0x01E800D0 BL 0x1C16DFC
	0x01E800D4 MOV X0, X19
	0x01E800D8 BL 0x1E801B8
	0x01E800DC MOVZ W21, 0x1
	0x01E800E0 B 0x1E80098
	0x01E800E4 ADD X0, X22, 0x20
	0x01E800E8 MOV X1, X23
	0x01E800EC BL 0x1E8078C
	0x01E800F0 LDR W8, [X23 + 0x24]
	0x01E800F4 ADD W8, W8, 0x1
	0x01E800F8 STR W8, [X23 + 0x24]
	0x01E800FC LDR X8, [X22 + 0x28]
	0x01E80100 CBNZ X8, 0x1E80110
	0x01E80104 MOV X0, X19
	0x01E80108 MOV X1, X22
	0x01E8010C BL 0x1E80150
	0x01E80110 MOV X0, X23
	0x01E80114 LDP X20, X19, [X31 + 0x30]
	0x01E80118 LDP X22, X21, [X31 + 0x20]
	0x01E8011C LDP X24, X23, [X31 + 0x10]
	0x01E80120 LDP X30, X25, [X31], #0x40
	0x01E80124 RET
	0x01E80128 BL 0x1C16F20
	0x01E8012C BL 0x19903D0
	0x01E80130 BL 0x1E80024
	0x01E80134 STP X30, X19, [X31 - 0x10]!
	0x01E80138 LDR X19, [X0 + 0x8]
	0x01E8013C MOV X1, X19
	0x01E80140 BL 0x1E8078C
	0x01E80144 MOV X0, X19
	0x01E80148 LDP X30, X19, [X31], #0x10
	0x01E8014C RET
	0x01E80150 STR X30, [X31 - 0x10]!
	0x01E80154 CBZ X1, 0x1E801B4
	0x01E80158 MOV X8, X1
	0x01E8015C LDR X10, [X8 + 0x8]!
	0x01E80160 CBZ X10, 0x1E8016C
	0x01E80164 LDR X9, [X1 + 0x10]
	0x01E80168 STR X9, [X10 + 0x10]
	0x01E8016C LDR X9, [X1 + 0x10]
	0x01E80170 CBZ X9, 0x1E80178
	0x01E80174 STR X10, [X9 + 0x8]
	0x01E80178 LDR X10, [X0 + 0x10]
	0x01E8017C CMP X10, X1
	0x01E80180 B.NE 0x1E8018C
	0x01E80184 LDR X10, [X8]
	0x01E80188 STR X10, [X0 + 0x10]
	0x01E8018C LDR X10, [X0 + 0x8]
	0x01E80190 CMP X10, X1
	0x01E80194 B.NE 0x1E8019C
	0x01E80198 STR X9, [X0 + 0x8]
	0x01E8019C STP X31, X31, [X8]
	0x01E801A0 LDR W8, [X0]
	0x01E801A4 SUB W8, W8, 0x1
	0x01E801A8 STR W8, [X0]
	0x01E801AC LDR X30, [X31], #0x10
	0x01E801B0 RET
	0x01E801B4 BL 0x1C16F20
	0x01E801B8 STR X30, [X31 - 0x40]!
	0x01E801BC STP X24, X23, [X31 + 0x10]
	0x01E801C0 STP X22, X21, [X31 + 0x20]
	0x01E801C4 STP X20, X19, [X31 + 0x30]
	0x01E801C8 ADRP X20, 0x2559000
	0x01E801CC LDRB W8, [X20 + 0x1CD]
	0x01E801D0 MOV X19, X0
	0x01E801D4 TBNZ X8, 0x0, 0x1E80204
	0x01E801D8 ADRP X0, 0x227D000
	0x01E801DC LDR X0, [X0 + 0xBA0]
	0x01E801E0 BL 0x1C16CF4
	0x01E801E4 ADRP X0, 0x227D000
	0x01E801E8 LDR X0, [X0 + 0xD00]
	0x01E801EC BL 0x1C16CF4
	0x01E801F0 ADRP X0, 0x227D000
	0x01E801F4 LDR X0, [X0 + 0xD08]
	0x01E801F8 BL 0x1C16CF4
	0x01E801FC MOVZ W8, 0x1
	0x01E80200 STRB W8, [X20 + 0x1CD]
	0x01E80204 CBZ X19, 0x1E802E0
	0x01E80208 LDR W8, [X19 + 0x20]
	0x01E8020C CMP W8, 0xFF
	0x01E80210 B.EQ 0x1E80310
	0x01E80214 CMP W8, 0x100
	0x01E80218 B.GE 0x1E80344
	0x01E8021C ADRP X8, 0x227D000
	0x01E80220 LDR X8, [X8 + 0xD08]
	0x01E80224 LDR X0, [X8]
	0x01E80228 BL 0x2222014
	0x01E8022C LDR W8, [X19 + 0x68]
	0x01E80230 MOV X20, X0
	0x01E80234 MOV X1, X31
	0x01E80238 UBFM W0, W8, 0x11, 0x10
	0x01E8023C BL 0x1E35878
	0x01E80240 CBZ X20, 0x1E802E0
	0x01E80244 ADRP X8, 0x227D000
	0x01E80248 LDR X8, [X8 + 0xD00]
	0x01E8024C STR X0, [X20 + 0x38]
	0x01E80250 LDR W0, [X19 + 0x68]
	0x01E80254 LDR X1, [X8]
	0x01E80258 BL 0x22220EC
	0x01E8025C STR X0, [X20 + 0x18]
	0x01E80260 LDR W8, [X19 + 0x20]
	0x01E80264 ADD W9, W8, 0x1
	0x01E80268 STR W9, [X19 + 0x20]
	0x01E8026C STRB W8, [X20]
	0x01E80270 LDR W9, [X19 + 0x68]
	0x01E80274 CMP W9, 0x1
	0x01E80278 B.LT 0x1E802E8
	0x01E8027C MOV X1, X0
	0x01E80280 CBZ X0, 0x1E802E0
	0x01E80284 MOV W22, W31
	0x01E80288 ADD X21, X20, 0x20
	0x01E8028C MOVZ W23, 0x48
	0x01E80290 MOVZ W24, 0x1
	0x01E80294 LDR X8, [X20 + 0x38]
	0x01E80298 SUB W9, W24, 0x1
	0x01E8029C MOV X0, X21
	0x01E802A0 STR X20, [X1]
	0x01E802A4 ADD X8, X8, W22, SXTW
	0x01E802A8 STR X8, [X1 + 0x28]
	0x01E802AC STR W9, [X1 + 0x8]
	0x01E802B0 BL 0x1E80358

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x255B000
	014 Move X20, 0x227F000
	015 Move X25, 0x227F000
	016 Move W8, [X22+456]
	017 Move X20, [X20+2984]
	018 Move X25, [X25+2976]
	019 Move X19, X1
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {105}
	025 Move X0, 0x227F000
	026 Move X0, [X0+2992]
	027 Call 0x1C17CF4
	028 Move X0, 0x227F000
	029 Move X0, [X0+2976]
	030 Call 0x1C17CF4
	031 Move X0, 0x227F000
	032 Move X0, [X0+3000]
	033 Call 0x1C17CF4
	034 Move X0, 0x227F000
	035 Move X0, [X0+3008]
	036 Call 0x1C17CF4
	037 Move X0, 0x227F000
	038 Move X0, [X0+3016]
	039 Call 0x1C17CF4
	040 Move X0, 0x227F000
	041 Move X0, [X0+3024]
	042 Call 0x1C17CF4
	043 Move X0, 0x227F000
	044 Move X0, [X0+3032]
	045 Call 0x1C17CF4
	046 Move X0, 0x227F000
	047 Move X0, [X0+3040]
	048 Call 0x1C17CF4
	049 Move X0, 0x227F000
	050 Move X0, [X0+3048]
	051 Call 0x1C17CF4
	052 Move X0, 0x227F000
	053 Move X0, [X0+3056]
	054 Call 0x1C17CF4
	055 Move X0, 0x2275000
	056 Move X0, [X0+3584]
	057 Call 0x1C17CF4
	058 Move X0, 0x227F000
	059 Move X0, [X0+3064]
	060 Call 0x1C17CF4
	061 Move X0, 0x227F000
	062 Move X0, [X0+3072]
	063 Call 0x1C17CF4
	064 Move X0, 0x2275000
	065 Move X0, [X0+3608]
	066 Call 0x1C17CF4
	067 Move X0, 0x227F000
	068 Move X0, [X0+3080]
	069 Call 0x1C17CF4
	070 Move X0, 0x227F000
	071 Move X0, [X0+3088]
	072 Call 0x1C17CF4
	073 Move X0, 0x227F000
	074 Move X0, [X0+1560]
	075 Call 0x1C17CF4
	076 Move X0, 0x227F000
	077 Move X0, [X0+3096]
	078 Call 0x1C17CF4
	079 Move X0, 0x227F000
	080 Move X0, [X0+3104]
	081 Call 0x1C17CF4
	082 Move X0, 0x227F000
	083 Move X0, [X0+3112]
	084 Call 0x1C17CF4
	085 Move X0, 0x227F000
	086 Move X0, [X0+3120]
	087 Call 0x1C17CF4
	088 Move X0, 0x227F000
	089 Move X0, [X0+3128]
	090 Call 0x1C17CF4
	091 Move X0, 0x227F000
	092 Move X0, [X0+3136]
	093 Call 0x1C17CF4
	094 Move X0, 0x227F000
	095 Move X0, [X0+3144]
	096 Call 0x1C17CF4
	097 Move X0, 0x227F000
	098 Move X0, [X0+2984]
	099 Call 0x1C17CF4
	100 Move X0, 0x227F000
	101 Move X0, [X0+3152]
	102 Call 0x1C17CF4
	103 Move W8, 1
	104 Move [X22+456], W8
	105 Move X0, [X20]
	106 Move X23, 0x227F000
	107 Move X22, 0x227F000
	108 Move X23, [X23+3112]
	109 Move X22, [X22+3096]
	110 Call 0x1C17F10
	111 Move X1, X31
	112 Move X20, X0
	113 Call Object..ctor, X0
	114 Move X0, [X25]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X0, X19
	120 Call DynamicHeap.RegisterTypes, X0
	121 Move X0, [X23]
	122 Call 0x2222EE4
	123 Move X1, [X22]
	124 Move X19, X0
	125 Move W0, 255
	126 Call Native.MallocAndClearPtrArray, X0
	127 Compare X19, 0
	128 JumpIfEqual {505}
	129 Move X8, 0x227F000
	130 Move X8, [X8+3088]
	131 Move X23, 0x227F000
	132 Move X22, 0x227F000
	133 Move X27, 0x227F000
	134 Move X26, 0x227F000
	135 Move X24, 0x227F000
	136 Move W9, 1
	137 Move X23, [X23+3104]
	138 Move X22, [X22+2992]
	139 Move X27, [X27+3152]
	140 Move X26, [X26+3008]
	141 Move X24, [X24+1560]
	142 Move [X19+24], X0
	143 Move [X19+32], W9
	144 NotImplemented "Instruction STRH not yet implemented."
	145 Move [X19+104], W21
	146 Move X1, [X8]
	147 Move W0, 49
	148 Call Native.MallocAndClearArray, X0
	149 Move W8, 1024
	150 Move [X19+40], X0
	151 Move [X19+100], W8
	152 Move X1, [X23]
	153 Move W0, 1024
	154 Call Native.MallocAndClearPtrArray, X0
	155 Move X8, -20516864
	156 Move V0, [X8+1096]
	157 Move [X19+88], X0
	158 Move W0, 1024
	159 Move [X19+120], D0
	160 Move X1, [X23]
	161 Call Native.MallocAndClearPtrArray, X0
	162 Move X21, X31
	163 Move X23, X31
	164 Move W28, 4096
	165 Move [X19+112], X0
	166 Move X8, [X19+40]
	167 Add X29, X21, X8
	168 Move [X29], W23
	169 Move X0, [X22]
	170 Move W8, [X0+224]
	171 Compare W8, 0
	172 JumpIfEqual {174}
	173 Move W8, W23
	174 Call 0x1C17DFC
	175 Move X0, [X22]
	176 Move W8, [X29]
	177 Move X9, [X0+184]
	178 Move X9, [X9]
	179 Compare X9, 0
	180 JumpIfEqual {505}
	181 Move W10, [X9+24]
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Add X8, X9, W8
	184 Move W8, [X8+32]
	185 Move W9, W8
	186 ShiftRight W9, 29
	187 And W9, W9, 0xFFFFFFF
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move [X29+32], W8
	190 Move [X29+36], W9
	191 NotImplemented "Instruction UDIV not yet implemented."
	192 Move W8, W31
	193 Add X23, X23, 1
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Add X21, X21, 48
	196 Move [X29+40], W8
	197 Move X8, [X25]
	198 Move W9, [X8+224]
	199 Compare W9, 0
	200 JumpIfNotEqual {204}
	201 Move X0, X8
	202 Call 0x1C17DFC
	203 Move X8, [X25]
	204 Move X0, [X27]
	205 Move X8, [X8+184]
	206 Move W9, [X0+224]
	207 Move X21, [X8]
	208 Compare W9, 0
	209 JumpIfNotEqual {212}
	210 Call 0x1C17DFC
	211 Move X0, [X27]
	212 Move X8, [X0+184]
	213 Move X22, [X8+8]
	214 Compare X22, 0
	215 JumpIfNotEqual {237}
	216 Move W8, [X0+224]
	217 Compare W8, 0
	218 JumpIfNotEqual {221}
	219 Call 0x1C17DFC
	220 Move X0, [X27]
	221 Move X9, 0x227F000
	222 Move X8, [X0+184]
	223 Move X9, [X9+3048]
	224 Move X23, [X8]
	225 Move X0, [X9]
	226 Call 0x1C17F10
	227 Move X8, 0x227F000
	228 Move X8, [X8+3120]
	229 Move X1, X23
	230 Move X3, X31
	231 Move X22, X0
	232 Move X2, [X8]
	233 Call Func`2<KeyValuePair`2<Object, Object>, UInt16>..ctor, X0, X1, X2
	234 Move X8, [X27]
	235 Move X8, [X8+184]
	236 Move [X8+8], X22
	237 Move X2, [X26]
	238 Move X0, X21
	239 Move X1, X22
	240 Call 0x21CA638, X0, X1
	241 Compare X20, 0
	242 JumpIfEqual {505}
	243 NotImplemented "Instruction STRH not yet implemented."
	244 Move X0, [X25]
	245 Move W8, [X0+224]
	246 Compare W8, 0
	247 JumpIfNotEqual {250}
	248 Call 0x1C17DFC
	249 Move X0, [X25]
	250 Move X8, [X0+184]
	251 Move X21, [X8]
	252 Move X8, 0x227F000
	253 Move X8, [X8+3032]
	254 Move X0, [X8]
	255 Call 0x1C17F10
	256 Move X8, 0x227F000
	257 Move X8, [X8+3144]
	258 Move X1, X20
	259 Move X3, X31
	260 Move X22, X0
	261 Move X2, [X8]
	262 Call Func`2<KeyValuePair`2<Object, Object>, Boolean>..ctor, X0, X1, X2
	263 Move X8, 0x227F000
	264 Move X8, [X8+3000]
	265 Move X0, X21
	266 Move X1, X22
	267 Move X2, [X8]
	268 Call 0x21C4DC0, X0, X1
	269 Compare X1, 0
	270 JumpIfEqual {505}
	271 NotImplemented "Instruction LDRH not yet implemented."
	272 NotImplemented "Instruction LDRH not yet implemented."
	273 Add W0, W9, W8
	274 Move [X19+56], W0
	275 Move X1, [X24]
	276 Call Native.MallocAndClearArray, X0
	277 Move [X19+48], X0
	278 Move W0, [X19+56]
	279 Move X1, [X24]
	280 Call Native.MallocAndClearArray, X0
	281 Move [X19+64], X0
	282 Move X8, [X25]
	283 Move X0, [X27]
	284 Move X8, [X8+184]
	285 Move W9, [X0+224]
	286 Move X20, [X8]
	287 Compare W9, 0
	288 JumpIfNotEqual {291}
	289 Call 0x1C17DFC
	290 Move X0, [X27]
	291 Move X8, [X0+184]
	292 Move X21, [X8+16]
	293 Compare X21, 0
	294 JumpIfNotEqual {316}
	295 Move W8, [X0+224]
	296 Compare W8, 0
	297 JumpIfNotEqual {300}
	298 Call 0x1C17DFC
	299 Move X0, [X27]
	300 Move X9, 0x227F000
	301 Move X8, [X0+184]
	302 Move X9, [X9+3040]
	303 Move X22, [X8]
	304 Move X0, [X9]
	305 Call 0x1C17F10
	306 Move X8, 0x227F000
	307 Move X8, [X8+3128]
	308 Move X1, X22
	309 Move X3, X31
	310 Move X21, X0
	311 Move X2, [X8]
	312 Call Func`2<KeyValuePair`2<Object, Object>, Object>..ctor, X0, X1, X2
	313 Move X8, [X27]
	314 Move X8, [X8+184]
	315 Move [X8+16], X21
	316 Move X8, 0x227F000
	317 Move X8, [X8+3024]
	318 Move X0, X20
	319 Move X1, X21
	320 Move X2, [X8]
	321 Call Enumerable.Select, X0, X1
	322 Move X8, [X27]
	323 Move X20, X0
	324 Move W9, [X8+224]
	325 Compare W9, 0
	326 JumpIfNotEqual {330}
	327 Move X0, X8
	328 Call 0x1C17DFC
	329 Move X8, [X27]
	330 Move X9, [X8+184]
	331 Move X21, [X9+24]
	332 Compare X21, 0
	333 JumpIfNotEqual {356}
	334 Move W9, [X8+224]
	335 Compare W9, 0
	336 JumpIfNotEqual {340}
	337 Move X0, X8
	338 Call 0x1C17DFC
	339 Move X8, [X27]
	340 Move X9, 0x227F000
	341 Move X8, [X8+184]
	342 Move X9, [X9+3056]
	343 Move X22, [X8]
	344 Move X0, [X9]
	345 Call 0x1C17F10
	346 Move X8, 0x227F000
	347 Move X8, [X8+3136]
	348 Move X1, X22
	349 Move X3, X31
	350 Move X21, X0
	351 Move X2, [X8]
	352 Call Func`2<Object, UInt16>..ctor, X0, X1, X2
	353 Move X8, [X27]
	354 Move X8, [X8+184]
	355 Move [X8+24], X21
	356 Move X8, 0x227F000
	357 Move X8, [X8+3016]
	358 Move X0, X20
	359 Move X1, X21
	360 Move X2, [X8]
	361 Call Enumerable.OrderBy, X0, X1
	362 Compare X0, 0
	363 JumpIfEqual {505}
	364 Move X8, [X0]
	365 Move X10, 0x227F000
	366 Move X20, X0
	367 NotImplemented "Instruction LDRH not yet implemented."
	368 Move X10, [X10+3064]
	369 Move X1, [X10]
	370 Compare X9, 0
	371 JumpIfEqual {378}
	372 Move X10, [X8+176]
	373 Add X10, X10, 8
	374 NotImplemented "Instruction LDUR not yet implemented."
	375 NotImplemented "Instruction CMP not yet implemented."
	376 Subtract X9, X9, 1
	377 Add X10, X10, 16
	378 Move X0, X20
	379 Move W2, W31
	380 Call 0x1C5D788
	381 NotImplemented "Instruction LDRSW not yet implemented."
	382 Add X8, X8, X9
	383 Add X0, X8, 312
	384 Move X8, [X0]
	385 Move X1, [X0+8]
	386 Move X0, X20
	387 NotImplemented "Instruction BLR not yet implemented."
	388 Move X20, X0
	389 Compare X0, 0
	390 JumpIfEqual {509}
	391 Move X21, 0x2274000
	392 Move X22, 0x227E000
	393 Move X21, [X21+3608]
	394 Move X22, [X22+3072]
	395 Move X23, 1
	396 Move X8, [X20]
	397 Move X1, [X21]
	398 NotImplemented "Instruction LDRH not yet implemented."
	399 Compare X9, 0
	400 JumpIfEqual {407}
	401 Move X10, [X8+176]
	402 Add X10, X10, 8
	403 NotImplemented "Instruction LDUR not yet implemented."
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Subtract X9, X9, 1
	406 Add X10, X10, 16
	407 Move X0, X20
	408 Move W2, W31
	409 Call 0x1C5D788
	410 NotImplemented "Instruction LDRSW not yet implemented."
	411 Add X8, X8, X9
	412 Add X0, X8, 312
	413 Move X8, [X0]
	414 Move X1, [X0+8]
	415 Move X0, X20
	416 NotImplemented "Instruction BLR not yet implemented."
	417 Move TEMP, X0
	418 And TEMP, TEMP, 1
	419 Compare TEMP, 1
	420 JumpIfNotEqual {463}
	421 Move X8, [X20]
	422 Move X1, [X22]
	423 NotImplemented "Instruction LDRH not yet implemented."
	424 Compare X9, 0
	425 JumpIfEqual {432}
	426 Move X10, [X8+176]
	427 Add X10, X10, 8
	428 NotImplemented "Instruction LDUR not yet implemented."
	429 NotImplemented "Instruction CMP not yet implemented."
	430 Subtract X9, X9, 1
	431 Add X10, X10, 16
	432 Move X0, X20
	433 Move W2, W31
	434 Call 0x1C5D788
	435 NotImplemented "Instruction LDRSW not yet implemented."
	436 Add X8, X8, X9
	437 Add X0, X8, 312
	438 Move X8, [X0]
	439 Move X1, [X0+8]
	440 Move X0, X20
	441 NotImplemented "Instruction BLR not yet implemented."
	442 Compare X0, 0
	443 JumpIfEqual {507}
	444 Move X10, [X0+24]
	445 Compare X10, 0
	446 JumpIfEqual {508}
	447 Move X8, [X19+48]
	448 NotImplemented "Instruction LDRH not yet implemented."
	449 Move X9, [X10+24]
	450 Move [X8], W9
	451 Move X12, [X19+64]
	452 Move W13, [X0+16]
	453 NotImplemented "Instruction CMP not yet implemented."
	454 Move [X12], W13
	455 And X9, X9, 0
	456 Add X10, X10, 32
	457 Add X11, X23, X11
	458 Move W12, [X10+4]
	459 NotImplemented "Instruction SBFM not yet implemented."
	460 Subtract X9, X9, 1
	461 Add X11, X11, X23
	462 Move [X13], W12
	463 Move X21, X31
	464 Compare X20, 0
	465 JumpIfEqual {489}
	466 Move X8, [X20]
	467 Move X10, 0x2274000
	468 NotImplemented "Instruction LDRH not yet implemented."
	469 Move X10, [X10+3584]
	470 Move X1, [X10]
	471 Compare X9, 0
	472 JumpIfEqual {479}
	473 Move X10, [X8+176]
	474 Add X10, X10, 8
	475 NotImplemented "Instruction LDUR not yet implemented."
	476 NotImplemented "Instruction CMP not yet implemented."
	477 Subtract X9, X9, 1
	478 Add X10, X10, 16
	479 Move X0, X20
	480 Move W2, W31
	481 Call 0x1C5D788
	482 NotImplemented "Instruction LDRSW not yet implemented."
	483 Add X8, X8, X9
	484 Add X0, X8, 312
	485 Move X8, [X0]
	486 Move X1, [X0+8]
	487 Move X0, X20
	488 NotImplemented "Instruction BLR not yet implemented."
	489 Compare X21, 0
	490 JumpIfNotEqual {510}
	491 Move X0, X19
	492 Move X20, [X31+80]
	493 Move X19, [X31+88]
	494 Move X22, [X31+64]
	495 Move X21, [X31+72]
	496 Move X24, [X31+48]
	497 Move X23, [X31+56]
	498 Move X26, [X31+32]
	499 Move X25, [X31+40]
	500 Move X28, [X31+16]
	501 Move X27, [X31+24]
	502 Move X29, [X31+96]
	503 Move X30, [X31+104]
	504 Return X0
	505 Call 0x1C17F20
	506 Call 0x1C17F28
	507 Call 0x1C17F20
	508 Call 0x1C17F20
	509 Call 0x1C17F20
	510 Move X0, X21
	511 Call 0x1C17F18
	512 NotImplemented "Instruction CMP not yet implemented."
	513 Call 0x3EB2AD0
	514 Move X21, [X0]
	515 Call 0x3EB2AE0
	516 Move X19, X0
	517 Move X21, X31
	518 Move X19, X0
	519 Compare X20, 0
	520 JumpIfEqual {544}
	521 Move X8, [X20]
	522 Move X10, 0x2274000
	523 NotImplemented "Instruction LDRH not yet implemented."
	524 Move X10, [X10+3584]
	525 Move X1, [X10]
	526 Compare X9, 0
	527 JumpIfEqual {534}
	528 Move X10, [X8+176]
	529 Add X10, X10, 8
	530 NotImplemented "Instruction LDUR not yet implemented."
	531 NotImplemented "Instruction CMP not yet implemented."
	532 Subtract X9, X9, 1
	533 Add X10, X10, 16
	534 Move X0, X20
	535 Move W2, W31
	536 Call 0x1C5D788
	537 NotImplemented "Instruction LDRSW not yet implemented."
	538 Add X8, X8, X9
	539 Add X0, X8, 312
	540 Move X8, [X0]
	541 Move X1, [X0+8]
	542 Move X0, X20
	543 NotImplemented "Instruction BLR not yet implemented."
	544 Compare X21, 0
	545 JumpIfNotEqual {548}
	546 Move X0, X19
	547 Call 0x1D2D690
	548 Move X0, X21
	549 Call 0x1C17F18
	550 Call 0x1991590

Method: System.UInt16 NextGen(Fusion.DynamicHeap* heap)

Disassembly:
	0x01E80AA8 CBZ X0, 0x1E80AD8
	0x01E80AAC CBZ X1, 0x1E80AD8
	0x01E80AB0 LDRH W8, [X0 + 0x48]
	0x01E80AB4 LDRB W9, [X1]
	0x01E80AB8 STRH W2, [X1 + 0x4]
	0x01E80ABC STRB W4, [X1 + 0x1]
	0x01E80AC0 STRH W8, [X1 + 0x2]
	0x01E80AC4 ORR W8, W9, 0x11111111
	0x01E80AC8 STRH W3, [X1 + 0x6]
	0x01E80ACC STRB W8, [X1]
	0x01E80AD0 LDR X30, [X31], #0x10
	0x01E80AD4 RET
	0x01E80AD8 BL 0x1C16F20
	0x01E80ADC STP X30, X21, [X31 - 0x20]!
	0x01E80AE0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {16}
	004 NotImplemented "Instruction LDRH not yet implemented."
	005 Move W9, 1
	006 Add W10, W8, 1
	007 And W12, W10, 0xFFFF
	008 Add W11, W8, 2
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSINC not yet implemented."
	011 NotImplemented "Instruction CSINC not yet implemented."
	012 NotImplemented "Instruction STRH not yet implemented."
	013 Move W0, W8
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20

Method: Fusion.DynamicHeap/Bin* GetBinByIndex(Fusion.DynamicHeap* heap, System.Int32 binIndex)

Disassembly:
	0x01E80AE4 ADRP X21, 0x2559000
	0x01E80AE8 LDRB W8, [X21 + 0x1D4]
	0x01E80AEC MOV X19, X1
	0x01E80AF0 MOV X20, X0
	0x01E80AF4 TBNZ X8, 0x0, 0x1E80B0C
	0x01E80AF8 ADRP X0, 0x227D000
	0x01E80AFC LDR X0, [X0 + 0xD30]
	0x01E80B00 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X8, [X0+40]
	005 Move W9, 48
	006 NotImplemented "Instruction SMADDL not yet implemented."
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetBinIndexForSize(Fusion.DynamicHeap* heap, System.Int32 size)

Disassembly:
	0x01E80B04 MOVZ W8, 0x1
	0x01E80B08 STRB W8, [X21 + 0x1D4]
	0x01E80B0C CBZ X20, 0x1E80B64
	0x01E80B10 LDP W8, W1, [X20 + 0x78]
	0x01E80B14 LDR X0, [X20 + 0x70]
	0x01E80B18 CMP W1, W8
	0x01E80B1C B.NE 0x1E80B40
	0x01E80B20 ADRP X8, 0x227D000
	0x01E80B24 LDR X8, [X8 + 0xD30]
	0x01E80B28 LDR X2, [X8]
	0x01E80B2C BL 0x2221BAC
	0x01E80B30 LDP W8, W1, [X20 + 0x78]
	0x01E80B34 STR X0, [X20 + 0x70]
	0x01E80B38 UBFM W8, W8, 0x1F, 0x1E
	0x01E80B3C STR W8, [X20 + 0x78]
	0x01E80B40 ADD W8, W1, 0x1
	0x01E80B44 STR W8, [X20 + 0x7C]
	0x01E80B48 STR X19, [X0, W1, SXTW]
	0x01E80B4C CBZ X19, 0x1E80B64
	0x01E80B50 MOVZ W8, 0x2
	0x01E80B54 STRB W8, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255A000
	006 Move X21, 0x227E000
	007 Move W8, [X20+457]
	008 Move X21, [X21+2976]
	009 Move W19, W1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227E000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+457], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]

Method: System.Byte* AllocateInternal(Fusion.DynamicHeap* heap, System.Int32 size, out System.Byte block)

Disassembly:
	0x01E80BF4 ADRP X20, 0x227D000
	0x01E80BF8 LDRB W8, [X21 + 0x1D8]
	0x01E80BFC LDR X20, [X20 + 0xBA0]
	0x01E80C00 MOV W19, W0
	0x01E80C04 TBNZ X8, 0x0, 0x1E80C1C
	0x01E80C08 ADRP X0, 0x227D000
	0x01E80C0C LDR X0, [X0 + 0xBA0]
	0x01E80C10 BL 0x1C16CF4
	0x01E80C14 MOVZ W8, 0x1
	0x01E80C18 STRB W8, [X21 + 0x1D8]
	0x01E80C1C LDR X0, [X20]
	0x01E80C20 LDR W8, [X0 + 0xE0]
	0x01E80C24 CBNZ W8, 0x1E80C30
	0x01E80C28 BL 0x1C16DFC
	0x01E80C2C LDR X0, [X20]
	0x01E80C30 LDR X8, [X0 + 0xB8]
	0x01E80C34 LDR X8, [X8 + 0x10]
	0x01E80C38 CBZ X8, 0x1E80C80
	0x01E80C3C MOV W9, W19
	0x01E80C40 MOV W9, W9
	0x01E80C44 MOV W9, W9
	0x01E80C48 LDR W10, [X8 + 0x18]
	0x01E80C4C MOV W9, W9
	0x01E80C50 MOVZ W11, 0xACDD
	0x01E80C54 MOV W9, W9
	0x01E80C58 MOVK W11, 0x7C40000
	0x01E80C5C MUL W9, W9, W11
	0x01E80C60 UBFM W9, W9, 0x1B, 0x1F
	0x01E80C64 CMP W9, W10
	0x01E80C68 B.CS 0x1E80C84
	0x01E80C6C ADD X8, X8, W9, UXTW
	0x01E80C70 LDRB W0, [X8 + 0x20]
	0x01E80C74 LDP X20, X19, [X31 + 0x10]
	0x01E80C78 LDP X30, X21, [X31], #0x20
	0x01E80C7C RET
	0x01E80C80 BL 0x1C16F20
	0x01E80C84 BL 0x1C16F28
	0x01E80C88 STR X30, [X31 - 0x30]!
	0x01E80C8C STP X22, X21, [X31 + 0x10]
	0x01E80C90 STP X20, X19, [X31 + 0x20]
	0x01E80C94 ADRP X22, 0x2559000
	0x01E80C98 ADRP X20, 0x227D000
	0x01E80C9C ADRP X21, 0x2273000
	0x01E80CA0 ADRP X19, 0x227D000
	0x01E80CA4 LDRB W8, [X22 + 0x1D9]
	0x01E80CA8 LDR X20, [X20 + 0xBA0]
	0x01E80CAC LDR X21, [X21 + 0x618]
	0x01E80CB0 LDR X19, [X19 + 0xD38]
	0x01E80CB4 TBNZ X8, 0x0, 0x1E80CE4
	0x01E80CB8 ADRP X0, 0x2273000
	0x01E80CBC LDR X0, [X0 + 0x618]
	0x01E80CC0 BL 0x1C16CF4
	0x01E80CC4 ADRP X0, 0x227D000
	0x01E80CC8 LDR X0, [X0 + 0xBA0]
	0x01E80CCC BL 0x1C16CF4
	0x01E80CD0 ADRP X0, 0x227D000
	0x01E80CD4 LDR X0, [X0 + 0xD38]
	0x01E80CD8 BL 0x1C16CF4
	0x01E80CDC MOVZ W8, 0x1
	0x01E80CE0 STRB W8, [X22 + 0x1D9]
	0x01E80CE4 LDR X8, [X20]
	0x01E80CE8 MOVZ W1, 0x20
	0x01E80CEC LDR X8, [X8 + 0xB8]
	0x01E80CF0 STR X31, [X8]
	0x01E80CF4 LDR X8, [X20]
	0x01E80CF8 LDR X8, [X8 + 0xB8]
	0x01E80CFC STR X31, [X8 + 0x8]
	0x01E80D00 LDR X0, [X21]
	0x01E80D04 BL 0x1C16D6C
	0x01E80D08 LDR X1, [X19]
	0x01E80D0C MOV X2, X31
	0x01E80D10 MOV X19, X0
	0x01E80D14 BL 0x32C5BD8
	0x01E80D18 LDR X8, [X20]
	0x01E80D1C LDP X22, X21, [X31 + 0x10]
	0x01E80D20 LDR X8, [X8 + 0xB8]
	0x01E80D24 STR X19, [X8 + 0x10]
	0x01E80D28 LDP X20, X19, [X31 + 0x20]
	0x01E80D2C LDR X30, [X31], #0x30
	0x01E80D30 RET
	0x01E80D34 STR X30, [X31 - 0x20]!
	0x01E80D38 STP X20, X19, [X31 + 0x10]
	0x01E80D3C LDR X8, [X0 + 0x8]
	0x01E80D40 CMP X8, X1
	0x01E80D44 B.EQ 0x1E80D68
	0x01E80D48 MOV X19, X0
	0x01E80D4C MOV X20, X1
	0x01E80D50 BL 0x1E80150
	0x01E80D54 MOV X0, X19
	0x01E80D58 MOV X1, X20
	0x01E80D5C LDP X20, X19, [X31 + 0x10]
	0x01E80D60 LDR X30, [X31], #0x20
	0x01E80D64 B 0x1E8039C
	0x01E80D68 LDP X20, X19, [X31 + 0x10]
	0x01E80D6C LDR X30, [X31], #0x20
	0x01E80D70 RET
	0x01E80D74 STR X30, [X31 - 0x20]!
	0x01E80D78 STP X20, X19, [X31 + 0x10]
	0x01E80D7C LDR X8, [X0 + 0x10]
	0x01E80D80 CMP X8, X1
	0x01E80D84 B.EQ 0x1E80DA8
	0x01E80D88 MOV X19, X0
	0x01E80D8C MOV X20, X1
	0x01E80D90 BL 0x1E80150
	0x01E80D94 MOV X0, X19
	0x01E80D98 MOV X1, X20
	0x01E80D9C LDP X20, X19, [X31 + 0x10]
	0x01E80DA0 LDR X30, [X31], #0x20
	0x01E80DA4 B 0x1E807F4
	0x01E80DA8 LDP X20, X19, [X31 + 0x10]
	0x01E80DAC LDR X30, [X31], #0x20
	0x01E80DB0 RET
	0x01E80DB4 STR X30, [X31 - 0x10]!
	0x01E80DB8 LDR X8, [X0 + 0x8]
	0x01E80DBC CMP X8, X1
	0x01E80DC0 B.EQ 0x1E80DFC
	0x01E80DC4 CBZ X2, 0x1E80E08
	0x01E80DC8 STR X1, [X2 + 0x10]
	0x01E80DCC CBZ X1, 0x1E80E08
	0x01E80DD0 LDR X8, [X1 + 0x8]
	0x01E80DD4 STR X8, [X2 + 0x8]
	0x01E80DD8 LDR X8, [X1 + 0x8]
	0x01E80DDC CBZ X8, 0x1E80E08
	0x01E80DE0 STR X2, [X8 + 0x10]
	0x01E80DE4 STR X2, [X1 + 0x8]
	0x01E80DE8 LDR W8, [X0]
	0x01E80DEC ADD W8, W8, 0x1
	0x01E80DF0 STR W8, [X0]
	0x01E80DF4 LDR X30, [X31], #0x10
	0x01E80DF8 RET
	0x01E80DFC MOV X1, X2
	0x01E80E00 LDR X30, [X31], #0x10
	0x01E80E04 B 0x1E8039C
	0x01E80E08 BL 0x1C16F20
	0x01E80E0C STR X30, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x255A000
	013 Move W8, [X22+458]
	014 Move X20, X2
	015 Move W21, W1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x227E000
	022 Move X0, [X0+2976]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+458], W8
	026 Subtract W8, W21, 8
	027 Move W8, W8
	028 ShiftRight W8, 3
	029 And W8, W8, 0x7FFFFFFF
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X24, 0x227E000
	032 Move X24, [X24+2976]
	033 Move X0, [X24]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move W1, W21
	040 Call DynamicHeap.GetBinIndexForSize, X0, X1
	041 Move W22, W0
	042 Move W26, W31
	043 Move W27, 48
	044 Move X0, [X24]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Compare X19, 0
	050 JumpIfEqual {132}
	051 Move X8, [X19+40]
	052 NotImplemented "Instruction NOP not yet implemented."
	053 NotImplemented "Instruction SMADDL not yet implemented."
	054 Compare X25, 0
	055 JumpIfEqual {132}
	056 Move X23, [X25+16]
	057 Compare X23, 0
	058 JumpIfEqual {71}
	059 Move X0, [X24]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X19
	065 Move X1, X23
	066 Move W2, W21
	067 Move X3, X20
	068 Call DynamicHeap.TryAllocateFromPage, X0, X1, X2, X3
	069 Compare X0, 0
	070 JumpIfNotEqual {113}
	071 Move TEMP, X26
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {78}
	075 Add W22, W22, 1
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W26, 1
	078 Move X0, [X24]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X0, X19
	084 Move W1, W21
	085 Call DynamicHeap.GetBinIndexForSize, X0, X1
	086 Move X8, [X19+40]
	087 Move W9, 48
	088 NotImplemented "Instruction SMADDL not yet implemented."
	089 Move X26, X25
	090 Move X0, [X24]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X19
	096 Call DynamicHeap.AllocatePage, X0
	097 Compare X26, 0
	098 JumpIfEqual {132}
	099 Move X1, X0
	100 Compare X0, 0
	101 JumpIfEqual {132}
	102 Move W8, [X25]
	103 Add X0, X25, 8
	104 Move [X1+32], W8
	105 Call PageList.AddFirst, X0, X1
	106 Move X1, [X25+16]
	107 Move X0, X19
	108 Move W2, W21
	109 Move X3, X20
	110 Call DynamicHeap.TryAllocateFromPage, X0, X1, X2, X3
	111 Compare X0, 0
	112 JumpIfEqual {161}
	113 Move W8, [X19+128]
	114 Move W9, [X19+132]
	115 Move X22, [X31+64]
	116 Move X21, [X31+72]
	117 Move X24, [X31+48]
	118 Move X23, [X31+56]
	119 Move X30, [X31+16]
	120 Move X27, [X31+24]
	121 Add W8, W8, 1
	122 Move [X19+128], W8
	123 Move W8, [X25+36]
	124 Move X26, [X31+32]
	125 Move X25, [X31+40]
	126 Add W8, W8, W9
	127 Move [X19+132], W8
	128 Move X20, [X31+80]
	129 Move X19, [X31+88]
	130 Add X31, X31, 96
	131 Return X0
	132 Call 0x1C17F20
	133 Move [X31+12], W21
	134 Move X0, 0x2274000
	135 Move X0, [X0+1880]
	136 Call 0x1C17D08
	137 Add X1, X31, 12
	138 Call 0x1C17E04
	139 Move X19, X0
	140 Move X0, 0x227D000
	141 Move X0, [X0+3528]
	142 Call 0x1C17D08
	143 Move X1, X19
	144 Move X2, X31
	145 Call String.Format, X0, X1
	146 Move X19, X0
	147 Move X0, 0x2274000
	148 Move X0, [X0+1456]
	149 Call 0x1C17D08
	150 Call 0x1C17F10
	151 Move X1, X19
	152 Move X2, X31
	153 Move X20, X0
	154 Call InvalidOperationException..ctor, X0, X1
	155 Move X0, 0x227E000
	156 Move X0, [X0+3304]
	157 Call 0x1C17D08
	158 Move X1, X0
	159 Move X0, X20
	160 Call 0x1C17DEC
	161 Move X0, [X24]
	162 Call 0x19913D0
	163 Call DynamicHeap.ThrowHeapCorrupted

Method: Fusion.DynamicHeap/Page* AllocatePage_Internal(Fusion.DynamicHeap* heap, System.Boolean mustSucceed)

Disassembly:
	0x01E81070 MOV X0, X1
	0x01E81074 MOV X1, X31
	0x01E81078 B 0x1C16CB4
	0x01E8107C STR X30, [X31 - 0x10]!
	0x01E81080 LDR X8, [X0 + 0x8]
	0x01E81084 CMP X8, X1
	0x01E81088 B.EQ 0x1E810C4
	0x01E8108C CBZ X2, 0x1E810D0
	0x01E81090 STR X1, [X2 + 0x18]
	0x01E81094 CBZ X1, 0x1E810D0
	0x01E81098 LDR X8, [X1 + 0x10]
	0x01E8109C STR X8, [X2 + 0x10]
	0x01E810A0 LDR X8, [X1 + 0x10]
	0x01E810A4 CBZ X8, 0x1E810D0
	0x01E810A8 STR X2, [X8 + 0x18]
	0x01E810AC STR X2, [X1 + 0x10]
	0x01E810B0 LDR W8, [X0]
	0x01E810B4 ADD W8, W8, 0x1
	0x01E810B8 STR W8, [X0]
	0x01E810BC LDR X30, [X31], #0x10
	0x01E810C0 RET
	0x01E810C4 MOV X1, X2
	0x01E810C8 LDR X30, [X31], #0x10
	0x01E810CC B 0x1E7FFE0
	0x01E810D0 BL 0x1C16F20
	0x01E810D4 STR X30, [X31 - 0x10]!
	0x01E810D8 LDR X8, [X0 + 0x10]
	0x01E810DC CMP X8, X1
	0x01E810E0 B.EQ 0x1E81118
	0x01E810E4 CBZ X1, 0x1E81124
	0x01E810E8 CBZ X2, 0x1E81124
	0x01E810EC LDR X8, [X1 + 0x18]
	0x01E810F0 STP X1, X8, [X2 + 0x10]
	0x01E810F4 LDR X8, [X1 + 0x18]
	0x01E810F8 CBZ X8, 0x1E81124
	0x01E810FC STR X2, [X8 + 0x10]
	0x01E81100 STR X2, [X1 + 0x18]
	0x01E81104 LDR W8, [X0]
	0x01E81108 ADD W8, W8, 0x1
	0x01E8110C STR W8, [X0]
	0x01E81110 LDR X30, [X31], #0x10
	0x01E81114 RET
	0x01E81118 MOV X1, X2
	0x01E8111C LDR X30, [X31], #0x10
	0x01E81120 B 0x1E80358
	0x01E81124 BL 0x1C16F20
	0x01E81128 STP X30, X21, [X31 - 0x20]!
	0x01E8112C STP X20, X19, [X31 + 0x10]
	0x01E81130 LDR W21, [X0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x227D000
	010 Move X20, [X20+2976]
	011 Move W21, W1
	012 Move X19, X0
	013 Move X24, 0x2559000
	014 Move W25, 1
	015 Move W8, [X24+459]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {23}
	020 Move X0, X20
	021 Call 0x1C17CF4
	022 Move [X24+459], W25
	023 Compare X19, 0
	024 JumpIfEqual {65}
	025 Move X22, [X19+8]
	026 Compare X22, 0
	027 JumpIfEqual {31}
	028 Move X23, [X22+40]
	029 Compare X23, 0
	030 JumpIfNotEqual {43}
	031 Move X0, [X20]
	032 Move TEMP, X21
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {66}
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Call DynamicHeap.AllocateBlock, X0
	042 Move W21, 1
	043 Add X0, X22, 32
	044 Move X1, X23
	045 Call PageList.Remove, X0, X1
	046 Move W8, [X23+36]
	047 Add W8, W8, 1
	048 Move [X23+36], W8
	049 Move X8, [X22+40]
	050 Compare X8, 0
	051 JumpIfNotEqual {55}
	052 Move X0, X19
	053 Move X1, X22
	054 Call BlockList.Remove, X0, X1
	055 Move X0, X23
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move X30, [X31+64]
	063 Move X25, [X31+72]
	064 Return X0
	065 Call 0x1C17F20
	066 Call 0x19913D0
	067 Call DynamicHeap.ThrowHeapCorrupted

Method: Fusion.DynamicHeap/Page* AllocatePage(Fusion.DynamicHeap* heap)

Disassembly:
	0x01E80F88 LDR X9, [X19 + 0x20]
	0x01E80F8C STR X8, [X19 + 0x18]
	0x01E80F90 STR X9, [X19 + 0x40]
	0x01E80F94 ADRP X8, 0xFFFFFFFFFFB13000
	0x01E80F98 ADD X8, X8, 0x5BC
	0x01E80F9C STR X8, [X19 + 0x38]
	0x01E80FA0 LDP X20, X19, [X31 + 0x10]
	0x01E80FA4 LDP X30, X21, [X31], #0x20
	0x01E80FA8 RET
	0x01E80FAC ADRP X1, 0xFFFFFFFFFEC9B000
	0x01E80FB0 ADD X1, X1, 0xEE3
	0x01E80FB4 MOV X0, X31
	0x01E80FB8 BL 0x1C16F3C
	0x01E80FBC MOV X1, X31
	0x01E80FC0 BL 0x1C16DEC
	0x01E80FC4 LDR X8, [X0 + 0x40]
	0x01E80FC8 LDR X5, [X0 + 0x18]
	0x01E80FCC LDR X4, [X0 + 0x28]
	0x01E80FD0 MOV X0, X8
	0x01E80FD4 BR X5
	0x01E80FD8 SUB X31, X31, 0x70
	0x01E80FDC STP X30, X25, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255A000
	006 Move X21, 0x227E000
	007 Move W8, [X20+460]
	008 Move X21, [X21+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227E000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+460], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W1, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call DynamicHeap.AllocatePage_Internal, X0, X1
	031 Return X0

Method: System.Void AllocateBlock(Fusion.DynamicHeap* heap)

Disassembly:
	0x01E811B8 LDR X19, [X19 + 0xD40]
	0x01E811BC LDR X20, [X20 + 0xBB0]
	0x01E811C0 TBNZ X8, 0x0, 0x1E811F0
	0x01E811C4 ADRP X0, 0x227C000
	0x01E811C8 LDR X0, [X0 + 0xBB0]
	0x01E811CC BL 0x1C16CF4
	0x01E811D0 ADRP X0, 0x2273000
	0x01E811D4 LDR X0, [X0 + 0xE58]
	0x01E811D8 BL 0x1C16CF4
	0x01E811DC ADRP X0, 0x227C000
	0x01E811E0 LDR X0, [X0 + 0xD40]
	0x01E811E4 BL 0x1C16CF4
	0x01E811E8 MOVZ W8, 0x1
	0x01E811EC STRB W8, [X21 + 0x1DB]
	0x01E811F0 LDR X0, [X22]
	0x01E811F4 MOVZ W1, 0x31
	0x01E811F8 BL 0x1C16D6C
	0x01E811FC LDR X1, [X19]
	0x01E81200 MOV X2, X31
	0x01E81204 MOV X19, X0
	0x01E81208 BL 0x32C5BD8
	0x01E8120C LDR X8, [X20]
	0x01E81210 LDP X22, X21, [X31 + 0x10]
	0x01E81214 LDR X8, [X8 + 0xB8]
	0x01E81218 STR X19, [X8]
	0x01E8121C LDP X20, X19, [X31 + 0x20]
	0x01E81220 LDR X30, [X31], #0x30
	0x01E81224 RET
	0x01E81228 STR X30, [X31 - 0x20]!
	0x01E8122C STP X20, X19, [X31 + 0x10]
	0x01E81230 ADRP X19, 0x2558000
	0x01E81234 ADRP X20, 0x227C000
	0x01E81238 LDRB W8, [X19 + 0x1DC]
	0x01E8123C LDR X20, [X20 + 0xC50]
	0x01E81240 TBNZ X8, 0x0, 0x1E81258
	0x01E81244 ADRP X0, 0x227C000
	0x01E81248 LDR X0, [X0 + 0xC50]
	0x01E8124C BL 0x1C16CF4
	0x01E81250 MOVZ W8, 0x1
	0x01E81254 STRB W8, [X19 + 0x1DC]
	0x01E81258 LDR X0, [X20]
	0x01E8125C BL 0x1C16F10
	0x01E81260 MOV X1, X31
	0x01E81264 MOV X19, X0
	0x01E81268 BL 0x33BDD8C
	0x01E8126C LDR X8, [X20]
	0x01E81270 LDR X8, [X8 + 0xB8]
	0x01E81274 STR X19, [X8]
	0x01E81278 LDP X20, X19, [X31 + 0x10]
	0x01E8127C LDR X30, [X31], #0x20
	0x01E81280 RET
	0x01E81284 MOV X1, X31
	0x01E81288 B 0x33BDD8C
	0x01E8128C STR X30, [X31 - 0x20]!
	0x01E81290 STP X20, X19, [X31 + 0x10]
	0x01E81294 ADRP X20, 0x2558000
	0x01E81298 LDRB W8, [X20 + 0x1DD]
	0x01E8129C MOV X19, X2
	0x01E812A0 TBNZ X8, 0x0, 0x1E812B8
	0x01E812A4 ADRP X0, 0x227C000
	0x01E812A8 LDR X0, [X0 + 0xC08]
	0x01E812AC BL 0x1C16CF4
	0x01E812B0 MOVZ W8, 0x1
	0x01E812B4 STRB W8, [X20 + 0x1DD]
	0x01E812B8 CBZ X19, 0x1E812CC
	0x01E812BC LDRH W0, [X19 + 0x14]
	0x01E812C0 LDP X20, X19, [X31 + 0x10]
	0x01E812C4 LDR X30, [X31], #0x20
	0x01E812C8 RET
	0x01E812CC BL 0x1C16F20
	0x01E812D0 STR X30, [X31 - 0x20]!
	0x01E812D4 STP X20, X19, [X31 + 0x10]
	0x01E812D8 ADRP X20, 0x2558000
	0x01E812DC LDRB W8, [X20 + 0x1DE]
	0x01E812E0 MOV X19, X2
	0x01E812E4 TBNZ X8, 0x0, 0x1E812FC
	0x01E812E8 ADRP X0, 0x227C000
	0x01E812EC LDR X0, [X0 + 0xC08]
	0x01E812F0 BL 0x1C16CF4
	0x01E812F4 MOVZ W8, 0x1
	0x01E812F8 STRB W8, [X20 + 0x1DE]
	0x01E812FC MOV X0, X19
	0x01E81300 LDP X20, X19, [X31 + 0x10]
	0x01E81304 LDR X30, [X31], #0x20
	0x01E81308 RET
	0x01E8130C STR X30, [X31 - 0x10]!
	0x01E81310 CBZ X1, 0x1E81320
	0x01E81314 LDRH W0, [X1 + 0x14]
	0x01E81318 LDR X30, [X31], #0x10
	0x01E8131C RET
	0x01E81320 BL 0x1C16F20
	0x01E81324 STP X30, X21, [X31 - 0x20]!
	0x01E81328 STP X20, X19, [X31 + 0x10]
	0x01E8132C ADRP X21, 0x2558000
	0x01E81330 LDRB W8, [X21 + 0x1DF]
	0x01E81334 MOV X19, X2
	0x01E81338 MOV X20, X0
	0x01E8133C TBNZ X8, 0x0, 0x1E81354
	0x01E81340 ADRP X0, 0x227C000
	0x01E81344 LDR X0, [X0 + 0xC08]
	0x01E81348 BL 0x1C16CF4
	0x01E8134C MOVZ W8, 0x1
	0x01E81350 STRB W8, [X21 + 0x1DF]
	0x01E81354 CBZ X19, 0x1E81374

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2559000
	009 Move W8, [X20+461]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x227D000
	016 Move X0, [X0+2976]
	017 Call 0x1C17CF4
	018 Move X0, 0x227D000
	019 Move X0, [X0+3328]
	020 Call 0x1C17CF4
	021 Move X0, 0x227D000
	022 Move X0, [X0+3336]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+461], W8
	026 Compare X19, 0
	027 JumpIfEqual {81}
	028 Move W8, [X19+32]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X8, 0x227D000
	032 Move X8, [X8+3336]
	033 Move X0, [X8]
	034 Call Native.MallocAndClear
	035 Move W8, [X19+104]
	036 Move X20, X0
	037 Move X1, X31
	038 Move W0, W8
	039 ShiftRight W0, 17
	040 And W0, W0, 0xFFFF
	041 Call Native.MallocAndClear, X0
	042 Compare X20, 0
	043 JumpIfEqual {81}
	044 Move X8, 0x227D000
	045 Move X8, [X8+3328]
	046 Move [X20+56], X0
	047 Move W0, [X19+104]
	048 Move X1, [X8]
	049 Call Native.MallocAndClearArray, X0
	050 Move [X20+24], X0
	051 Move W8, [X19+32]
	052 Add W9, W8, 1
	053 Move [X19+32], W9
	054 Move [X20], W8
	055 Move W9, [X19+104]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X1, X0
	058 Compare X0, 0
	059 JumpIfEqual {81}
	060 Move W22, W31
	061 Add X21, X20, 32
	062 Move W23, 72
	063 Move W24, 1
	064 Move X8, [X20+56]
	065 Subtract W9, W24, 1
	066 Move X0, X21
	067 Move [X1], X20
	068 Add X8, X8, W22
	069 Move [X1+40], X8
	070 Move [X1+8], W9
	071 Call PageList.AddLast, X0, X1
	072 NotImplemented "Instruction LDRSW not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X8, [X20+24]
	075 Add X24, X24, 1
	076 Add W22, W22, 0x8000
	077 Add X1, X23, X8
	078 Add X23, X23, 72
	079 Add X8, X8, X23
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Call 0x1C17F20
	082 Move W8, [X20]
	083 Move X9, [X19+24]
	084 And X8, X8, 255
	085 Move X0, X19
	086 Move X1, X20
	087 Move [X9], X20
	088 Move X20, [X31+48]
	089 Move X19, [X31+56]
	090 Move X22, [X31+32]
	091 Move X21, [X31+40]
	092 Move X24, [X31+16]
	093 Move X23, [X31+24]
	094 Move X30, [X31+64]
	095 Call BlockList.AddFirst, X0, X1
	096 Return 
	097 Move X0, 0x227C000
	098 Move X0, [X0+3512]
	099 Call 0x1C17D08
	100 Call 0x1C17F10
	101 Move X1, X31
	102 Move X19, X0
	103 Call OutOfMemoryException..ctor, X0
	104 Move X0, 0x227D000
	105 Move X0, [X0+3344]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X19
	109 Call 0x1C17DEC
	110 Move X8, 0x227D000
	111 Move X8, [X8+2976]
	112 Move X0, [X8]
	113 Call 0x19913D0
	114 Call DynamicHeap.ThrowHeapCorrupted

Method: System.Int32 BlocksWithAvailablePages(Fusion.DynamicHeap* heap)

Disassembly:
	0x01E813E0 LDP X20, X19, [X31 + 0x20]
	0x01E813E4 LDP X22, X21, [X31 + 0x10]
	0x01E813E8 LDR X30, [X31], #0x30
	0x01E813EC RET
	0x01E813F0 STP X30, X21, [X31 - 0x20]!
	0x01E813F4 STP X20, X19, [X31 + 0x10]
	0x01E813F8 ADRP X20, 0x2558000
	0x01E813FC LDRB W8, [X20 + 0x1E1]
	0x01E81400 MOV X19, X0
	0x01E81404 TBNZ X8, 0x0, 0x1E8141C
	0x01E81408 ADRP X0, 0x227C000
	0x01E8140C LDR X0, [X0 + 0xBA0]
	0x01E81410 BL 0x1C16CF4
	0x01E81414 MOVZ W8, 0x1
	0x01E81418 STRB W8, [X20 + 0x1E1]
	0x01E8141C LDR X20, [X19 + 0x10]
	0x01E81420 CBZ X20, 0x1E81444
	0x01E81424 ADRP X8, 0x227C000
	0x01E81428 LDR X8, [X8 + 0xBA0]
	0x01E8142C LDR X0, [X8]
	0x01E81430 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {19}
	004 NotImplemented "Instruction LDRSW not yet implemented."
	005 Move X8, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W0, W31
	008 Move X10, [X8+24]
	009 Move W0, W31
	010 Subtract X8, X9, 1
	011 Add X9, X10, 8
	012 Move X10, [X9+8]
	013 Move X10, [X10+40]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CINC not yet implemented."
	016 Subtract X8, X8, 1
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20

Method: System.Int32 PagesWithAvailableObjectsInBin(Fusion.DynamicHeap/Bin* bin)

Disassembly:
	0x01E81434 CBNZ W8, 0x1E8143C
	0x01E81438 BL 0x1C16DFC
	0x01E8143C MOV X0, X20
	0x01E81440 BL 0x1E7E8F4
	0x01E81444 MOV X0, X19
	0x01E81448 LDP X20, X19, [X31 + 0x10]
	0x01E8144C MOV X1, X31
	0x01E81450 LDP X30, X21, [X31], #0x20
	0x01E81454 B 0x33CB4DC
	0x01E81458 CMP W1, 0x1
	0x01E8145C MOV X21, X0
	0x01E81460 B.NE 0x1E81490
	0x01E81464 MOV X0, X21
	0x01E81468 BL 0x3EB1AD0
	0x01E8146C LDR X20, [X0]
	0x01E81470 BL 0x3EB1AE0

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {18}
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {15}
	007 Move W9, [X0+40]
	008 Move W0, W31
	009 Move W10, [X8+64]
	010 Move X8, [X8+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CINC not yet implemented."
	013 Compare X8, 0
	014 JumpIfNotEqual {9}
	015 Move W0, W31
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Int32 ObjectsFreeCount(Fusion.DynamicHeap/Page* p)

Disassembly:
	0x01E81474 MOV X0, X19
	0x01E81478 MOV X1, X31
	0x01E8147C BL 0x33CB4DC
	0x01E81480 CBNZ X20, 0x1E81498
	0x01E81484 LDP X20, X19, [X31 + 0x10]
	0x01E81488 LDP X30, X21, [X31], #0x20
	0x01E8148C RET
	0x01E81490 MOV X20, X31
	0x01E81494 B 0x1E814A4
	0x01E81498 MOV X0, X20
	0x01E8149C BL 0x1C16F18
	0x01E814A0 MOV X21, X0
	0x01E814A4 MOV X0, X19
	0x01E814A8 MOV X1, X31
	0x01E814AC BL 0x33CB4DC
	0x01E814B0 CBNZ X20, 0x1E814BC
	0x01E814B4 MOV X0, X21
	0x01E814B8 BL 0x1D2C690
	0x01E814BC MOV X0, X20
	0x01E814C0 BL 0x1C16F18
	0x01E814C4 BL 0x1990590
	0x01E814C8 STR X30, [X31 - 0x30]!
	0x01E814CC STP X22, X21, [X31 + 0x10]
	0x01E814D0 STP X20, X19, [X31 + 0x20]
	0x01E814D4 ADRP X22, 0x2558000
	0x01E814D8 ADRP X21, 0x227C000
	0x01E814DC LDRB W8, [X22 + 0x1E2]
	0x01E814E0 LDR X21, [X21 + 0xBA0]
	0x01E814E4 MOV X19, X1
	0x01E814E8 MOV X20, X0
	0x01E814EC TBNZ X8, 0x0, 0x1E81504
	0x01E814F0 ADRP X0, 0x227C000
	0x01E814F4 LDR X0, [X0 + 0xBA0]
	0x01E814F8 BL 0x1C16CF4
	0x01E814FC MOVZ W8, 0x1
	0x01E81500 STRB W8, [X22 + 0x1E2]
	0x01E81504 LDR X0, [X21]
	0x01E81508 LDR X20, [X20 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2559000
	007 Move W8, [X20+462]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x227D000
	014 Move X0, [X0+2976]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+462], W8
	018 Compare X19, 0
	019 JumpIfEqual {47}
	020 Move X8, [X19+48]
	021 Compare X8, 0
	022 JumpIfEqual {39}
	023 Move X21, 0x227D000
	024 Move X21, [X21+2976]
	025 Move W9, 1
	026 Move W22, [X8+4]
	027 Move W20, W9
	028 Compare W22, 0
	029 JumpIfEqual {40}
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X8, [X19+40]
	036 Subtract W9, W22, 1
	037 Add X8, X8, W9
	038 Add W9, W20, 1
	039 Move W20, W31
	040 Move W0, W20
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0
	047 Call 0x1C17F20

Method: System.Byte* TryAllocateFromPage(Fusion.DynamicHeap* heap, Fusion.DynamicHeap/Page* page, System.Int32 size, out System.Byte block)

Disassembly:
	0x01E80E10 LDR X8, [X0 + 0x10]
	0x01E80E14 CMP X8, X1
	0x01E80E18 B.EQ 0x1E80E50
	0x01E80E1C CBZ X1, 0x1E80E5C
	0x01E80E20 CBZ X2, 0x1E80E5C
	0x01E80E24 LDR X8, [X1 + 0x10]
	0x01E80E28 STP X1, X8, [X2 + 0x8]
	0x01E80E2C LDR X8, [X1 + 0x10]
	0x01E80E30 CBZ X8, 0x1E80E5C
	0x01E80E34 STR X2, [X8 + 0x8]
	0x01E80E38 STR X2, [X1 + 0x10]
	0x01E80E3C LDR W8, [X0]
	0x01E80E40 ADD W8, W8, 0x1
	0x01E80E44 STR W8, [X0]
	0x01E80E48 LDR X30, [X31], #0x10
	0x01E80E4C RET
	0x01E80E50 MOV X1, X2
	0x01E80E54 LDR X30, [X31], #0x10
	0x01E80E58 B 0x1E807F4
	0x01E80E5C BL 0x1C16F20
	0x01E80E60 STP X30, X21, [X31 - 0x20]!
	0x01E80E64 STP X20, X19, [X31 + 0x10]
	0x01E80E68 LDR W21, [X0]
	0x01E80E6C MOV X19, X1
	0x01E80E70 CBZ W21, 0x1E80E84
	0x01E80E74 LDR X20, [X0 + 0x8]
	0x01E80E78 MOV X1, X20
	0x01E80E7C BL 0x1E80150
	0x01E80E80 B 0x1E80E88
	0x01E80E84 MOV X20, X31
	0x01E80E88 STR X20, [X19]
	0x01E80E8C LDP X20, X19, [X31 + 0x10]
	0x01E80E90 CMP W21, 0x0
	0x01E80E94 CSET W0, NE
	0x01E80E98 LDP X30, X21, [X31], #0x20
	0x01E80E9C RET
	0x01E80EA0 STP X30, X19, [X31 - 0x10]!
	0x01E80EA4 LDR X19, [X0 + 0x8]
	0x01E80EA8 MOV X1, X19
	0x01E80EAC BL 0x1E80150
	0x01E80EB0 MOV X0, X19
	0x01E80EB4 LDP X30, X19, [X31], #0x10
	0x01E80EB8 RET
	0x01E80EBC ADD X9, X0, 0x8
	0x01E80EC0 LDR X8, [X9]
	0x01E80EC4 CBZ X8, 0x1E80ED4
	0x01E80EC8 CMP X8, X1
	0x01E80ECC ADD X9, X8, 0x10
	0x01E80ED0 B.NE 0x1E80EC0
	0x01E80ED4 CMP X8, 0x0
	0x01E80ED8 CSET W0, NE
	0x01E80EDC RET
	0x01E80EE0 STP X30, X23, [X31 - 0x30]!
	0x01E80EE4 STP X22, X21, [X31 + 0x10]
	0x01E80EE8 STP X20, X19, [X31 + 0x20]
	0x01E80EEC MOV W22, W1
	0x01E80EF0 MOV X1, X31
	0x01E80EF4 MOV X19, X4
	0x01E80EF8 MOV X20, X3
	0x01E80EFC MOV W21, W2
	0x01E80F00 MOV X23, X0
	0x01E80F04 BL 0x33BDD8C
	0x01E80F08 STR W22, [X23 + 0x10]
	0x01E80F0C STRH W21, [X23 + 0x14]
	0x01E80F10 STP X20, X19, [X23 + 0x18]
	0x01E80F14 LDP X20, X19, [X31 + 0x20]
	0x01E80F18 LDP X22, X21, [X31 + 0x10]
	0x01E80F1C LDP X30, X23, [X31], #0x30
	0x01E80F20 RET
	0x01E80F24 STP X30, X21, [X31 - 0x20]!
	0x01E80F28 STP X20, X19, [X31 + 0x10]
	0x01E80F2C LDR X8, [X2 + 0x8]
	0x01E80F30 STP X1, X2, [X0 + 0x20]
	0x01E80F34 MOV X19, X0
	0x01E80F38 MOV X20, X1
	0x01E80F3C STR X8, [X0 + 0x10]
	0x01E80F40 LDRB W21, [X2 + 0x52]
	0x01E80F44 STR X0, [X0 + 0x40]
	0x01E80F48 MOV X0, X2
	0x01E80F4C BL 0x1C16D84
	0x01E80F50 TBZ X0, 0x0, 0x1E80F68
	0x01E80F54 CMP W21, 0x3
	0x01E80F58 B.NE 0x1E80F84
	0x01E80F5C ADRP X8, 0xFFFFFFFFFFB13000
	0x01E80F60 ADD X8, X8, 0x644
	0x01E80F64 B 0x1E80F78
	0x01E80F68 CMP W21, 0x2
	0x01E80F6C B.NE 0x1E80F80
	0x01E80F70 ADRP X8, 0xFFFFFFFFFFB13000
	0x01E80F74 ADD X8, X8, 0x61C
	0x01E80F78 STR X8, [X19 + 0x18]
	0x01E80F7C B 0x1E80F94
	0x01E80F80 CBZ X20, 0x1E80FAC
	0x01E80F84 LDR X8, [X19 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0x255A000
	010 Move W8, [X23+463]
	011 Move X21, X3
	012 Move W19, W2
	013 Move X20, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x227E000
	020 Move X0, [X0+2976]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+463], W8
	024 Compare X20, 0
	025 JumpIfEqual {109}
	026 Move X24, 0x227E000
	027 Move X24, [X24+2976]
	028 NotImplemented "Instruction LDRSW not yet implemented."
	029 Move X0, [X24]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Compare X22, 0
	035 JumpIfEqual {109}
	036 Move X8, [X22+40]
	037 Move X22, [X20+48]
	038 Move W9, 48
	039 NotImplemented "Instruction MADD not yet implemented."
	040 Compare X22, 0
	041 JumpIfEqual {58}
	042 Move W25, [X22+4]
	043 Move [X22+4], W31
	044 Move W8, [X20+56]
	045 Subtract W8, W8, 1
	046 Move [X20+56], W8
	047 Compare W25, 0
	048 JumpIfEqual {77}
	049 Move X0, [X24]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X8, [X20+40]
	055 Subtract W9, W25, 1
	056 Add X8, X8, W9
	057 Move [X20+48], X8
	058 Compare X23, 0
	059 JumpIfEqual {109}
	060 Move W8, [X20+60]
	061 Move W9, [X23+40]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X10, [X20]
	064 Move X9, [X20+40]
	065 Add W11, W8, 1
	066 Move [X20+60], W11
	067 Compare X10, 0
	068 JumpIfEqual {109}
	069 Move W11, [X23+36]
	070 Move W10, [X10]
	071 Multiply W8, W11, W8
	072 Add X22, X9, W8
	073 Move [X21], W10
	074 Move W8, [X20+64]
	075 Add W8, W8, 1
	076 Move [X20+64], W8
	077 Move [X20+48], X31
	078 Move X8, [X20]
	079 Compare X8, 0
	080 JumpIfEqual {109}
	081 Move W8, [X8]
	082 Move [X21], W8
	083 Move W8, [X20+64]
	084 Add W8, W8, 1
	085 Move [X20+64], W8
	086 Compare X23, 0
	087 JumpIfEqual {109}
	088 Move W9, [X23+40]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add X0, X23, 8
	091 Move X1, X20
	092 Call PageList.MoveLast, X0, X1
	093 Move X0, X22
	094 Move W1, W19
	095 Move X2, X31
	096 Call Native.MemClear, X0, X1
	097 Move X22, X31
	098 Move [X21], W31
	099 Move X0, X22
	100 Move X20, [X31+48]
	101 Move X19, [X31+56]
	102 Move X22, [X31+32]
	103 Move X21, [X31+40]
	104 Move X24, [X31+16]
	105 Move X23, [X31+24]
	106 Move X30, [X31+64]
	107 Move X25, [X31+72]
	108 Return X0
	109 Call 0x1C17F20

Method: System.Void RegisterTypes(System.Type[] types)

Disassembly:
	0x01E802BC B.GE 0x1E802E4
	0x01E802C0 LDR X8, [X20 + 0x18]
	0x01E802C4 ADD X24, X24, 0x1
	0x01E802C8 ADD W22, W22, 0x8000
	0x01E802CC ADD X1, X23, X8
	0x01E802D0 ADD X23, X23, 0x48
	0x01E802D4 ADD X8, X8, X23
	0x01E802D8 CMP X8, 0x48
	0x01E802DC B.NE 0x1E80294
	0x01E802E0 BL 0x1C16F20
	0x01E802E4 LDRB W8, [X20]
	0x01E802E8 LDR X9, [X19 + 0x18]
	0x01E802EC AND X8, X8, 0xFF
	0x01E802F0 MOV X0, X19
	0x01E802F4 MOV X1, X20
	0x01E802F8 STR X20, [X9, X8, LSL #3]
	0x01E802FC LDP X20, X19, [X31 + 0x30]
	0x01E80300 LDP X22, X21, [X31 + 0x20]
	0x01E80304 LDP X24, X23, [X31 + 0x10]
	0x01E80308 LDR X30, [X31], #0x40
	0x01E8030C B 0x1E8039C
	0x01E80310 ADRP X0, 0x227C000
	0x01E80314 LDR X0, [X0 + 0xDB8]
	0x01E80318 BL 0x1C16D08
	0x01E8031C BL 0x1C16F10
	0x01E80320 MOV X1, X31
	0x01E80324 MOV X19, X0
	0x01E80328 BL 0x339F30C
	0x01E8032C ADRP X0, 0x227D000
	0x01E80330 LDR X0, [X0 + 0xD10]
	0x01E80334 BL 0x1C16D08
	0x01E80338 MOV X1, X0
	0x01E8033C MOV X0, X19
	0x01E80340 BL 0x1C16DEC
	0x01E80344 ADRP X8, 0x227D000
	0x01E80348 LDR X8, [X8 + 0xBA0]
	0x01E8034C LDR X0, [X8]
	0x01E80350 BL 0x19903D0
	0x01E80354 BL 0x1E80024
	0x01E80358 STR X30, [X31 - 0x10]!
	0x01E8035C CBZ X1, 0x1E80398
	0x01E80360 STR X31, [X1 + 0x18]
	0x01E80364 LDR X8, [X0 + 0x10]
	0x01E80368 ADD X9, X0, 0x8
	0x01E8036C ADD X10, X8, 0x18
	0x01E80370 CMP X8, 0x0
	0x01E80374 STR X8, [X1 + 0x10]
	0x01E80378 CSEL X8, X9, X10, EQ
	0x01E8037C STR X1, [X8]
	0x01E80380 LDR W8, [X0]
	0x01E80384 STR X1, [X0 + 0x10]
	0x01E80388 ADD W8, W8, 0x1
	0x01E8038C STR W8, [X0]
	0x01E80390 LDR X30, [X31], #0x10
	0x01E80394 RET
	0x01E80398 BL 0x1C16F20
	0x01E8039C STR X30, [X31 - 0x10]!
	0x01E803A0 MOV X8, X0
	0x01E803A4 LDR X9, [X8 + 0x8]!
	0x01E803A8 CBZ X1, 0x1E803DC
	0x01E803AC STP X31, X9, [X1 + 0x8]
	0x01E803B0 CBZ X9, 0x1E803BC
	0x01E803B4 STR X1, [X9 + 0x8]
	0x01E803B8 B 0x1E803C4
	0x01E803BC ADD X8, X0, 0x10
	0x01E803C0 STR X1, [X0 + 0x8]
	0x01E803C4 STR X1, [X8]
	0x01E803C8 LDR W8, [X0]
	0x01E803CC ADD W8, W8, 0x1
	0x01E803D0 STR W8, [X0]
	0x01E803D4 LDR X30, [X31], #0x10
	0x01E803D8 RET
	0x01E803DC BL 0x1C16F20
	0x01E803E0 STR X30, [X31 - 0x10]!
	0x01E803E4 CBZ X0, 0x1E80430
	0x01E803E8 LDRSW X9, [X0 + 0x20]
	0x01E803EC MOV X8, X0
	0x01E803F0 CMP W9, 0x2
	0x01E803F4 B.GE 0x1E80400
	0x01E803F8 MOV W0, W31
	0x01E803FC B 0x1E80428
	0x01E80400 LDR X10, [X8 + 0x18]
	0x01E80404 MOV W0, W31
	0x01E80408 SUB X8, X9, 0x1
	0x01E8040C ADD X9, X10, 0x8
	0x01E80410 LDR X10, [X9], #0x8
	0x01E80414 LDR X10, [X10 + 0x28]
	0x01E80418 CMP X10, 0x0
	0x01E8041C CINC W0, W0, NE
	0x01E80420 SUBS X8, X8, 0x1
	0x01E80424 B.NE 0x1E80410
	0x01E80428 LDR X30, [X31], #0x10
	0x01E8042C RET
	0x01E80430 BL 0x1C16F20
	0x01E80434 STR X30, [X31 - 0x10]!
	0x01E80438 CBZ X0, 0x1E80470
	0x01E8043C LDR X8, [X0 + 0x10]
	0x01E80440 CBZ X8, 0x1E80464
	0x01E80444 LDR W9, [X0 + 0x28]
	0x01E80448 MOV W0, W31
	0x01E8044C LDR W10, [X8 + 0x40]
	0x01E80450 LDR X8, [X8 + 0x18]
	0x01E80454 CMP W10, W9
	0x01E80458 CINC W0, W0, LT
	0x01E8045C CBNZ X8, 0x1E8044C
	0x01E80460 B 0x1E80468
	0x01E80464 MOV W0, W31
	0x01E80468 LDR X30, [X31], #0x10
	0x01E8046C RET
	0x01E80470 BL 0x1C16F20
	0x01E80474 STR X30, [X31 - 0x30]!
	0x01E80478 STP X22, X21, [X31 + 0x10]
	0x01E8047C STP X20, X19, [X31 + 0x20]
	0x01E80480 ADRP X20, 0x2559000
	0x01E80484 LDRB W8, [X20 + 0x1CE]
	0x01E80488 MOV X19, X0
	0x01E8048C TBNZ X8, 0x0, 0x1E804A4
	0x01E80490 ADRP X0, 0x227D000
	0x01E80494 LDR X0, [X0 + 0xBA0]
	0x01E80498 BL 0x1C16CF4
	0x01E8049C MOVZ W8, 0x1
	0x01E804A0 STRB W8, [X20 + 0x1CE]
	0x01E804A4 CBZ X19, 0x1E80508
	0x01E804A8 LDR X8, [X19 + 0x30]
	0x01E804AC CBZ X8, 0x1E804F0
	0x01E804B0 ADRP X21, 0x227D000
	0x01E804B4 LDR X21, [X21 + 0xBA0]
	0x01E804B8 MOVZ W9, 0x1
	0x01E804BC LDR W22, [X8 + 0x4]
	0x01E804C0 MOV W20, W9
	0x01E804C4 CBZ W22, 0x1E804F4
	0x01E804C8 LDR X0, [X21]
	0x01E804CC LDR W8, [X0 + 0xE0]
	0x01E804D0 CBNZ W8, 0x1E804D8
	0x01E804D4 BL 0x1C16DFC
	0x01E804D8 LDR X8, [X19 + 0x28]
	0x01E804DC SUB W9, W22, 0x1
	0x01E804E0 ADDS X8, X8, W9, SXTW
	0x01E804E4 ADD W9, W20, 0x1
	0x01E804E8 B.NE 0x1E804BC
	0x01E804EC B 0x1E804F4
	0x01E804F0 MOV W20, W31
	0x01E804F4 MOV W0, W20
	0x01E804F8 LDP X20, X19, [X31 + 0x20]
	0x01E804FC LDP X22, X21, [X31 + 0x10]
	0x01E80500 LDR X30, [X31], #0x30
	0x01E80504 RET
	0x01E80508 BL 0x1C16F20
	0x01E8050C STR X30, [X31 - 0x10]!
	0x01E80510 CBZ W1, 0x1E80528
	0x01E80514 CBZ X0, 0x1E80534
	0x01E80518 LDR X8, [X0 + 0x28]
	0x01E8051C SUB W9, W1, 0x1
	0x01E80520 ADD X0, X8, W9, SXTW
	0x01E80524 B 0x1E8052C
	0x01E80528 MOV X0, X31
	0x01E8052C LDR X30, [X31], #0x10
	0x01E80530 RET
	0x01E80534 BL 0x1C16F20
	0x01E80538 STR X30, [X31 - 0x20]!
	0x01E8053C STP X20, X19, [X31 + 0x10]
	0x01E80540 LDR X8, [X0 + 0x10]
	0x01E80544 CMP X8, X1
	0x01E80548 B.EQ 0x1E8056C
	0x01E8054C MOV X19, X0
	0x01E80550 MOV X20, X1
	0x01E80554 BL 0x1E8078C
	0x01E80558 MOV X0, X19
	0x01E8055C MOV X1, X20
	0x01E80560 LDP X20, X19, [X31 + 0x10]
	0x01E80564 LDR X30, [X31], #0x20
	0x01E80568 B 0x1E80358
	0x01E8056C LDP X20, X19, [X31 + 0x10]
	0x01E80570 LDR X30, [X31], #0x20
	0x01E80574 RET
	0x01E80578 MOV X1, X31
	0x01E8057C B 0x33BDD8C
	0x01E80580 STR X30, [X31 - 0x10]!
	0x01E80584 CBZ X1, 0x1E805BC
	0x01E80588 LDR X8, [X1 + 0x38]
	0x01E8058C CMP X8, X2
	0x01E80590 B.LS 0x1E8059C
	0x01E80594 MOV W0, W31
	0x01E80598 B 0x1E805B4
	0x01E8059C CBZ X0, 0x1E805BC
	0x01E805A0 LDR W9, [X0 + 0x68]
	0x01E805A4 UBFM W9, W9, 0x11, 0x10
	0x01E805A8 ADD X8, X8, W9, SXTW
	0x01E805AC CMP X8, X2
	0x01E805B0 CSET W0, HI
	0x01E805B4 LDR X30, [X31], #0x10
	0x01E805B8 RET
	0x01E805BC BL 0x1C16F20
	0x01E805C0 STR X30, [X31 - 0x10]!
	0x01E805C4 CBZ X1, 0x1E805E8
	0x01E805C8 LDR X8, [X1 + 0x38]
	0x01E805CC LDR X9, [X1 + 0x18]
	0x01E805D0 MOVZ W10, 0x48
	0x01E805D4 SUB X8, X2, X8
	0x01E805D8 SBFM X8, X8, 0xF, 0x3F
	0x01E805DC MADD X0, X8, X10, X9
	0x01E805E0 LDR X30, [X31], #0x10
	0x01E805E4 RET
	0x01E805E8 BL 0x1C16F20
	0x01E805EC STR X30, [X31 - 0x10]!
	0x01E805F0 CBZ X1, 0x1E80608
	0x01E805F4 CBZ X0, 0x1E80614
	0x01E805F8 LDR W8, [X0 + 0x28]
	0x01E805FC SUB W8, W1, W8
	0x01E80600 ADD W0, W8, 0x1
	0x01E80604 B 0x1E8060C
	0x01E80608 MOV W0, W31
	0x01E8060C LDR X30, [X31], #0x10
	0x01E80610 RET
	0x01E80614 BL 0x1C16F20
	0x01E80618 STR X30, [X31 - 0x30]!
	0x01E8061C STP X22, X21, [X31 + 0x10]
	0x01E80620 STP X20, X19, [X31 + 0x20]
	0x01E80624 ADRP X21, 0x2559000
	0x01E80628 LDRB W8, [X21 + 0x1D1]
	0x01E8062C MOV X20, X2
	0x01E80630 MOV X22, X1
	0x01E80634 MOV X19, X0
	0x01E80638 TBNZ X8, 0x0, 0x1E80650
	0x01E8063C ADRP X0, 0x227D000
	0x01E80640 LDR X0, [X0 + 0xBA0]
	0x01E80644 BL 0x1C16CF4
	0x01E80648 MOVZ W8, 0x1
	0x01E8064C STRB W8, [X21 + 0x1D1]
	0x01E80650 CBZ X19, 0x1E80788
	0x01E80654 ADRP X8, 0x227D000
	0x01E80658 LDR X8, [X8 + 0xBA0]
	0x01E8065C UBFM X9, X20, 0x5, 0x3F
	0x01E80660 AND X9, X9, 0x7FF
	0x01E80664 LDR X0, [X8]
	0x01E80668 LDR X8, [X19 + 0x18]
	0x01E8066C LDR W10, [X0 + 0xE0]
	0x01E80670 LDR X20, [X9, X8, LSL]
	0x01E80674 CBNZ W10, 0x1E8067C
	0x01E80678 BL 0x1C16DFC
	0x01E8067C CBZ X20, 0x1E80788
	0x01E80680 LDR X8, [X20 + 0x38]
	0x01E80684 LDR X9, [X20 + 0x18]
	0x01E80688 MOVZ W10, 0x48
	0x01E8068C SUB X8, X22, X8
	0x01E80690 SBFM X8, X8, 0xF, 0x3F
	0x01E80694 MADD X21, X8, X10, X9
	0x01E80698 CBZ X21, 0x1E80788
	0x01E8069C LDR X8, [X21 + 0x30]
	0x01E806A0 CBZ X8, 0x1E806B0
	0x01E806A4 LDR W9, [X21 + 0x28]
	0x01E806A8 SUB W8, W8, W9
	0x01E806AC ADD W8, W8, 0x1
	0x01E806B0 CBZ X22, 0x1E80788
	0x01E806B4 STR W8, [X22 + 0x4]
	0x01E806B8 LDR W8, [X21 + 0x38]
	0x01E806BC STR X22, [X21 + 0x30]
	0x01E806C0 LDRSW X9, [X21 + 0x20]
	0x01E806C4 MOVZ W11, 0x30
	0x01E806C8 ADD W8, W8, 0x1
	0x01E806CC STR W8, [X21 + 0x38]
	0x01E806D0 LDR X8, [X19 + 0x28]
	0x01E806D4 LDR W10, [X19 + 0x80]
	0x01E806D8 NOP
	0x01E806DC MADD X8, X9, X11, X8
	0x01E806E0 SUB W9, W10, 0x1
	0x01E806E4 STR W9, [X19 + 0x80]
	0x01E806E8 CBZ X8, 0x1E80788
	0x01E806EC LDR W9, [X19 + 0x84]
	0x01E806F0 LDR W10, [X8 + 0x24]
	0x01E806F4 SUB W9, W9, W10
	0x01E806F8 STR W9, [X19 + 0x84]
	0x01E806FC LDR W9, [X21 + 0x40]
	0x01E80700 SUBS W10, W9, 0x1
	0x01E80704 STR W10, [X21 + 0x40]
	0x01E80708 B.EQ 0x1E80730
	0x01E8070C LDR W10, [X8 + 0x28]
	0x01E80710 CMP W10, W9
	0x01E80714 B.NE 0x1E80760
	0x01E80718 MOV X1, X21
	0x01E8071C LDP X20, X19, [X31 + 0x20]
	0x01E80720 LDP X22, X21, [X31 + 0x10]
	0x01E80724 ADD X0, X8, 0x8
	0x01E80728 LDR X30, [X31], #0x30
	0x01E8072C B 0x1E80838
	0x01E80730 ADD X0, X8, 0x8
	0x01E80734 MOV X1, X21
	0x01E80738 BL 0x1E8078C
	0x01E8073C ADD X0, X20, 0x20
	0x01E80740 MOV X1, X21
	0x01E80744 STR W31, [X21 + 0x20]
	0x01E80748 STR X31, [X21 + 0x30]
	0x01E8074C STP W31, W31, [X21 + 0x3C]
	0x01E80750 BL 0x1E80358
	0x01E80754 LDR X8, [X20 + 0x28]
	0x01E80758 CMP X8, X21
	0x01E8075C B.EQ 0x1E80770
	0x01E80760 LDP X20, X19, [X31 + 0x20]
	0x01E80764 LDP X22, X21, [X31 + 0x10]
	0x01E80768 LDR X30, [X31], #0x30
	0x01E8076C RET
	0x01E80770 MOV X0, X19
	0x01E80774 MOV X1, X20
	0x01E80778 LDP X20, X19, [X31 + 0x20]
	0x01E8077C LDP X22, X21, [X31 + 0x10]
	0x01E80780 LDR X30, [X31], #0x30
	0x01E80784 B 0x1E807F4
	0x01E80788 BL 0x1C16F20
	0x01E8078C STR X30, [X31 - 0x10]!
	0x01E80790 CBZ X1, 0x1E807F0
	0x01E80794 MOV X8, X1
	0x01E80798 LDR X10, [X8 + 0x10]!
	0x01E8079C CBZ X10, 0x1E807A8
	0x01E807A0 LDR X9, [X1 + 0x18]
	0x01E807A4 STR X9, [X10 + 0x18]
	0x01E807A8 LDR X9, [X1 + 0x18]
	0x01E807AC CBZ X9, 0x1E807B4
	0x01E807B0 STR X10, [X9 + 0x10]
	0x01E807B4 LDR X10, [X0 + 0x10]
	0x01E807B8 CMP X10, X1
	0x01E807BC B.NE 0x1E807C8
	0x01E807C0 LDR X10, [X8]
	0x01E807C4 STR X10, [X0 + 0x10]
	0x01E807C8 LDR X10, [X0 + 0x8]
	0x01E807CC CMP X10, X1
	0x01E807D0 B.NE 0x1E807D8
	0x01E807D4 STR X9, [X0 + 0x8]
	0x01E807D8 STP X31, X31, [X8]
	0x01E807DC LDR W8, [X0]
	0x01E807E0 SUB W8, W8, 0x1
	0x01E807E4 STR W8, [X0]
	0x01E807E8 LDR X30, [X31], #0x10
	0x01E807EC RET
	0x01E807F0 BL 0x1C16F20
	0x01E807F4 STR X30, [X31 - 0x10]!
	0x01E807F8 CBZ X1, 0x1E80834
	0x01E807FC STR X31, [X1 + 0x10]
	0x01E80800 LDR X8, [X0 + 0x10]
	0x01E80804 ADD X9, X0, 0x8
	0x01E80808 ADD X10, X8, 0x10
	0x01E8080C CMP X8, 0x0
	0x01E80810 STR X8, [X1 + 0x8]
	0x01E80814 CSEL X8, X9, X10, EQ
	0x01E80818 STR X1, [X8]
	0x01E8081C LDR W8, [X0]
	0x01E80820 STR X1, [X0 + 0x10]
	0x01E80824 ADD W8, W8, 0x1
	0x01E80828 STR W8, [X0]
	0x01E8082C LDR X30, [X31], #0x10
	0x01E80830 RET
	0x01E80834 BL 0x1C16F20
	0x01E80838 STR X30, [X31 - 0x20]!
	0x01E8083C STP X20, X19, [X31 + 0x10]
	0x01E80840 LDR X8, [X0 + 0x8]
	0x01E80844 CMP X8, X1
	0x01E80848 B.EQ 0x1E8086C
	0x01E8084C MOV X19, X0
	0x01E80850 MOV X20, X1
	0x01E80854 BL 0x1E8078C
	0x01E80858 MOV X0, X19
	0x01E8085C MOV X1, X20
	0x01E80860 LDP X20, X19, [X31 + 0x10]
	0x01E80864 LDR X30, [X31], #0x20
	0x01E80868 B 0x1E7FFE0
	0x01E8086C LDP X20, X19, [X31 + 0x10]
	0x01E80870 LDR X30, [X31], #0x20
	0x01E80874 RET
	0x01E80878 STR X30, [X31 - 0x30]!
	0x01E8087C STP X22, X21, [X31 + 0x10]
	0x01E80880 STP X20, X19, [X31 + 0x20]
	0x01E80884 ADRP X21, 0x2559000
	0x01E80888 LDRB W8, [X21 + 0x1D2]
	0x01E8088C MOV X19, X1
	0x01E80890 MOV X20, X0
	0x01E80894 TBNZ X8, 0x0, 0x1E808AC
	0x01E80898 ADRP X0, 0x227D000
	0x01E8089C LDR X0, [X0 + 0xBA0]
	0x01E808A0 BL 0x1C16CF4
	0x01E808A4 MOVZ W8, 0x1
	0x01E808A8 STRB W8, [X21 + 0x1D2]
	0x01E808AC LDRB W21, [X19 - 0x8]!
	0x01E808B0 ADRP X10, 0x227D000
	0x01E808B4 LDRB W8, [X19 + 0x7]
	0x01E808B8 LDURH W9, [X19 + 0x5]
	0x01E808BC LDUR W22, [X19 + 0x1]
	0x01E808C0 LDR X10, [X10 + 0xBA0]
	0x01E808C4 TBNZ X21, 0x1, 0x1E80914
	0x01E808C8 TBZ X21, 0x0, 0x1E8097C
	0x01E808CC ADRP X0, 0x2273000
	0x01E808D0 LDR X0, [X0 + 0x5B0]
	0x01E808D4 BL 0x1C16D08
	0x01E808D8 BL 0x1C16F10
	0x01E808DC MOV X19, X0
	0x01E808E0 ADRP X0, 0x227D000
	0x01E808E4 LDR X0, [X0 + 0xD18]
	0x01E808E8 BL 0x1C16D08
	0x01E808EC MOV X1, X0
	0x01E808F0 MOV X0, X19
	0x01E808F4 MOV X2, X31
	0x01E808F8 BL 0x337DF1C
	0x01E808FC ADRP X0, 0x227D000
	0x01E80900 LDR X0, [X0 + 0xD20]
	0x01E80904 BL 0x1C16D08
	0x01E80908 MOV X1, X0
	0x01E8090C MOV X0, X19
	0x01E80910 BL 0x1C16DEC
	0x01E80914 CBZ X20, 0x1E809B8
	0x01E80918 LDRSW X13, [X20 + 0x7C]
	0x01E8091C CMP W13, 0x1
	0x01E80920 B.LT 0x1E8094C
	0x01E80924 LDR X12, [X20 + 0x70]
	0x01E80928 MOV X14, X31
	0x01E8092C MOV X11, X12
	0x01E80930 LDR X15, [X11]
	0x01E80934 CMP X15, X19
	0x01E80938 B.EQ 0x1E80958
	0x01E8093C ADD X14, X14, 0x1
	0x01E80940 CMP X13, X14
	0x01E80944 ADD X11, X11, 0x8
	0x01E80948 B.NE 0x1E80930
	0x01E8094C LDR X0, [X10]
	0x01E80950 BL 0x19903D0
	0x01E80954 BL 0x1E80024
	0x01E80958 SUB W13, W13, 0x1
	0x01E8095C CMP W13, W14
	0x01E80960 STR W13, [X20 + 0x7C]
	0x01E80964 B.LE 0x1E80978
	0x01E80968 ADD X12, X12, W13, 0x3, SXTW
	0x01E8096C LDR X13, [X12]
	0x01E80970 STR X13, [X11]
	0x01E80974 MOV X11, X12
	0x01E80978 STR X31, [X11]
	0x01E8097C STR X31, [X19]
	0x01E80980 LDR X0, [X10]
	0x01E80984 BFM W9, W8, 0x10, 0xF
	0x01E80988 BFM X22, X9, 0x20, 0x1F
	0x01E8098C LDR W10, [X0 + 0xE0]
	0x01E80990 CBNZ W10, 0x1E80998
	0x01E80994 BL 0x1C16DFC
	0x01E80998 MOV W2, W21
	0x01E8099C BFM X2, X22, 0x38, 0x37
	0x01E809A0 MOV X0, X20
	0x01E809A4 MOV X1, X19
	0x01E809A8 LDP X20, X19, [X31 + 0x20]
	0x01E809AC LDP X22, X21, [X31 + 0x10]
	0x01E809B0 LDR X30, [X31], #0x30
	0x01E809B4 B 0x1E80618
	0x01E809B8 BL 0x1C16F20
	0x01E809BC SUB X31, X31, 0x40
	0x01E809C0 STP X30, X23, [X31 + 0x10]
	0x01E809C4 STP X22, X21, [X31 + 0x20]
	0x01E809C8 STP X20, X19, [X31 + 0x30]
	0x01E809CC ADRP X23, 0x2559000
	0x01E809D0 ADRP X22, 0x227D000
	0x01E809D4 ADRP X21, 0x227D000
	0x01E809D8 LDRB W8, [X23 + 0x1D3]
	0x01E809DC LDR X22, [X22 + 0xD28]
	0x01E809E0 LDR X21, [X21 + 0xBA0]
	0x01E809E4 MOV W20, W1
	0x01E809E8 MOV X19, X0
	0x01E809EC TBNZ X8, 0x0, 0x1E80A10
	0x01E809F0 ADRP X0, 0x227D000
	0x01E809F4 LDR X0, [X0 + 0xBA0]
	0x01E809F8 BL 0x1C16CF4
	0x01E809FC ADRP X0, 0x227D000
	0x01E80A00 LDR X0, [X0 + 0xD28]
	0x01E80A04 BL 0x1C16CF4
	0x01E80A08 MOVZ W8, 0x1
	0x01E80A0C STRB W8, [X23 + 0x1D3]
	0x01E80A10 LDR X1, [X22]
	0x01E80A14 CMP W20, 0x0
	0x01E80A18 CSET W0, GT
	0x01E80A1C MOV X2, X31
	0x01E80A20 STRB W31, [X31 + 0xC]
	0x01E80A24 BL 0x1E3BA60
	0x01E80A28 LDR X0, [X21]
	0x01E80A2C LDR W8, [X0 + 0xE0]
	0x01E80A30 CBNZ W8, 0x1E80A38
	0x01E80A34 BL 0x1C16DFC
	0x01E80A38 ADD W1, W20, 0x8
	0x01E80A3C ADD X2, X31, 0xC
	0x01E80A40 MOV X0, X19
	0x01E80A44 BL 0x1E7FBF4
	0x01E80A48 STR X31, [X0]
	0x01E80A4C CBZ X19, 0x1E80A84
	0x01E80A50 LDRH W8, [X19 + 0x48]
	0x01E80A54 LDP X20, X19, [X31 + 0x30]
	0x01E80A58 LDP X22, X21, [X31 + 0x20]
	0x01E80A5C LDP X30, X23, [X31 + 0x10]
	0x01E80A60 STRH W8, [X0 + 0x2]
	0x01E80A64 LDRB W9, [X31 + 0xC]
	0x01E80A68 MOVZ W10, 0xFFFF
	0x01E80A6C ADD X8, X0, 0x8
	0x01E80A70 STRH W10, [X0 + 0x4]
	0x01E80A74 STRB W9, [X0 + 0x1]
	0x01E80A78 MOV X0, X8
	0x01E80A7C ADD X31, X31, 0x40
	0x01E80A80 RET
	0x01E80A84 BL 0x1C16F20
	0x01E80A88 STR X30, [X31 - 0x10]!
	0x01E80A8C SUBS X8, X0, 0x8
	0x01E80A90 B.EQ 0x1E80AA0
	0x01E80A94 LDRH W0, [X8 + 0x6]
	0x01E80A98 LDR X30, [X31], #0x10
	0x01E80A9C RET
	0x01E80AA0 BL 0x1C16F20
	0x01E80AA4 STR X30, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X29
	003 Move [X31+104], X30
	004 Move [X31+112], X28
	005 Move [X31+120], X27
	006 Move [X31+128], X26
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X20, 0x255A000
	015 Move X25, 0x227E000
	016 Move W8, [X20+464]
	017 Move X25, [X25+2976]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {85}
	023 Move X0, 0x227E000
	024 Move X0, [X0+3160]
	025 Call 0x1C17CF4
	026 Move X0, 0x227E000
	027 Move X0, [X0+3168]
	028 Call 0x1C17CF4
	029 Move X0, 0x227E000
	030 Move X0, [X0+3176]
	031 Call 0x1C17CF4
	032 Move X0, 0x227E000
	033 Move X0, [X0+3184]
	034 Call 0x1C17CF4
	035 Move X0, 0x227E000
	036 Move X0, [X0+3192]
	037 Call 0x1C17CF4
	038 Move X0, 0x227E000
	039 Move X0, [X0+3200]
	040 Call 0x1C17CF4
	041 Move X0, 0x227E000
	042 Move X0, [X0+3208]
	043 Call 0x1C17CF4
	044 Move X0, 0x227E000
	045 Move X0, [X0+3216]
	046 Call 0x1C17CF4
	047 Move X0, 0x227E000
	048 Move X0, [X0+3224]
	049 Call 0x1C17CF4
	050 Move X0, 0x227E000
	051 Move X0, [X0+2976]
	052 Call 0x1C17CF4
	053 Move X0, 0x227E000
	054 Move X0, [X0+3232]
	055 Call 0x1C17CF4
	056 Move X0, 0x227E000
	057 Move X0, [X0+3240]
	058 Call 0x1C17CF4
	059 Move X0, 0x227E000
	060 Move X0, [X0+3248]
	061 Call 0x1C17CF4
	062 Move X0, 0x227E000
	063 Move X0, [X0+3256]
	064 Call 0x1C17CF4
	065 Move X0, 0x227E000
	066 Move X0, [X0+3080]
	067 Call 0x1C17CF4
	068 Move X0, 0x2275000
	069 Move X0, [X0+3600]
	070 Call 0x1C17CF4
	071 Move X0, 0x2275000
	072 Move X0, [X0+3608]
	073 Call 0x1C17CF4
	074 Move X0, 0x2278000
	075 Move X0, [X0+2928]
	076 Call 0x1C17CF4
	077 Move X0, 0x2275000
	078 Move X0, [X0+3632]
	079 Call 0x1C17CF4
	080 Move X0, 0x227E000
	081 Move X0, [X0+3264]
	082 Call 0x1C17CF4
	083 Move W8, 1
	084 Move [X20+464], W8
	085 Move X0, [X25]
	086 NotImplemented "Instruction MOVI not yet implemented."
	087 Move [X31+80], X31
	088 Move [X31+48], V0
	089 Move [X31+56], V0
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {95}
	093 Call 0x1C17DFC
	094 Move X0, [X25]
	095 Move X8, [X0+184]
	096 Move X8, [X8]
	097 Compare X8, 0
	098 JumpIfNotEqual {366}
	099 Move X8, 0x227E000
	100 Move X8, [X8+3216]
	101 Move X0, [X8]
	102 Call 0x1C17F10
	103 Move X8, 0x227E000
	104 Move X8, [X8+3208]
	105 Move X20, X0
	106 Move X1, [X8]
	107 Call Dictionary`2<Object, Object>..ctor, X0
	108 Move X0, [X25]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Call 0x1C17DFC
	113 Move X0, [X25]
	114 Move X8, [X0+184]
	115 Move [X8], X20
	116 Move X8, 0x227E000
	117 Move X8, [X8+3224]
	118 Move X0, [X8]
	119 Call 0x1C17F10
	120 Move X8, 0x227E000
	121 Move X8, [X8+3200]
	122 Move X20, X0
	123 Move X1, [X8]
	124 Call Dictionary`2<UInt16, Object>..ctor, X0
	125 Move X8, [X25]
	126 Move X8, [X8+184]
	127 Move [X8+8], X20
	128 Compare X19, 0
	129 JumpIfEqual {396}
	130 Move X8, [X19+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X26, 0x227E000
	133 Move X27, 0x227E000
	134 Move X26, [X26+3264]
	135 Move X27, [X27+3168]
	136 Move X23, X31
	137 And X8, X8, 0
	138 Add X24, X19, 32
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X20, [X24]
	141 Move X1, X31
	142 Move X0, X20
	143 Call UnsafeUtility.IsUnmanaged, X0
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {403}
	148 Move X0, [X25]
	149 Move W8, [X0+224]
	150 Compare W8, 0
	151 JumpIfNotEqual {154}
	152 Call 0x1C17DFC
	153 Move X0, [X25]
	154 Move X8, [X0+184]
	155 Move X0, [X26]
	156 Move X21, [X8]
	157 Call 0x1C17F10
	158 Move X1, X31
	159 Move X22, X0
	160 Call Object..ctor, X0
	161 Compare X22, 0
	162 JumpIfEqual {396}
	163 Move [X22+32], X20
	164 Compare X21, 0
	165 JumpIfEqual {396}
	166 Move X3, [X27]
	167 Move X0, X21
	168 Move X1, X20
	169 Move X2, X22
	170 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	171 Move W8, [X19+24]
	172 Add X23, X23, 1
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move X0, [X25]
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {180}
	178 Call 0x1C17DFC
	179 Move X0, [X25]
	180 Move X8, [X0+184]
	181 Move X0, [X8]
	182 Compare X0, 0
	183 JumpIfEqual {396}
	184 Move X8, 0x227E000
	185 Move X8, [X8+3192]
	186 Move X1, [X8]
	187 Add X8, X31, 8
	188 Call Dictionary`2<Object, Object>.GetEnumerator, X0
	189 NotImplemented "Instruction LDUR not yet implemented."
	190 NotImplemented "Instruction LDUR not yet implemented."
	191 Move X8, [X31+40]
	192 Move X28, 0x227E000
	193 Move X29, 0x227E000
	194 Move X28, [X28+3184]
	195 Move X29, [X29+3160]
	196 Move W26, 1
	197 Move [X31+48], V0
	198 Move [X31+56], V1
	199 Move [X31+80], X8
	200 Move X8, 0x227E000
	201 Move X8, [X8+3240]
	202 Move X1, [X8]
	203 Add X0, X31, 48
	204 Call Enumerator<Object, Object>.MoveNext, X0
	205 Move TEMP, X0
	206 And TEMP, TEMP, 1
	207 Compare TEMP, 1
	208 JumpIfNotEqual {361}
	209 Move X8, 0x2275000
	210 Move X19, [X31+64]
	211 Move X20, [X31+72]
	212 Move X8, [X8+3632]
	213 Move X0, [X8]
	214 Call 0x1C17F10
	215 Move X8, 0x2278000
	216 Move X8, [X8+2928]
	217 Move X21, X0
	218 Move X1, [X8]
	219 Call List`1<Int32>..ctor, X0
	220 Compare X20, 0
	221 JumpIfEqual {398}
	222 Move X0, [X20+32]
	223 Compare X0, 0
	224 JumpIfEqual {399}
	225 Move X8, [X0]
	226 Move X9, [X8+1672]
	227 Move X2, [X8+1680]
	228 Move W1, 52
	229 NotImplemented "Instruction BLR not yet implemented."
	230 Move X22, X0
	231 NotImplemented "Instruction STRH not yet implemented."
	232 Move X0, X19
	233 Move X1, X31
	234 Call UnsafeUtility.SizeOf, X0
	235 Add W8, W0, 7
	236 NotImplemented "Instruction CMP not yet implemented."
	237 NotImplemented "Instruction CSEL not yet implemented."
	238 NotImplemented "Instruction SBFM not yet implemented."
	239 Move [X20+16], W8
	240 Compare X22, 0
	241 JumpIfEqual {397}
	242 Move W8, [X22+24]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move W27, W31
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Add X8, X22, W27
	247 Move X23, [X8+32]
	248 Compare X23, 0
	249 JumpIfEqual {381}
	250 Move X8, [X23]
	251 Move X1, [X8+608]
	252 Move X9, [X8+600]
	253 Move X0, X23
	254 NotImplemented "Instruction BLR not yet implemented."
	255 Compare X0, 0
	256 JumpIfEqual {382}
	257 Move X1, X31
	258 Call Type.get_IsPointer, X0
	259 Move TEMP, X0
	260 And TEMP, TEMP, 1
	261 Compare TEMP, 1
	262 JumpIfNotEqual {328}
	263 Move X0, [X25]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {269}
	267 Call 0x1C17DFC
	268 Move X0, [X25]
	269 Move X8, [X0+184]
	270 Move X9, [X23]
	271 Move X24, [X8]
	272 Move X1, [X9+608]
	273 Move X8, [X9+600]
	274 Move X0, X23
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Compare X0, 0
	277 JumpIfEqual {383}
	278 Move X8, [X0]
	279 Move X1, [X8+1072]
	280 Move X9, [X8+1064]
	281 NotImplemented "Instruction BLR not yet implemented."
	282 Move X1, X0
	283 Compare X24, 0
	284 JumpIfEqual {384}
	285 Move X2, [X28]
	286 Move X0, X24
	287 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	288 Move TEMP, X0
	289 And TEMP, TEMP, 1
	290 Compare TEMP, 1
	291 JumpIfNotEqual {328}
	292 Move X1, [X29]
	293 Move X0, X23
	294 Call 0x21A991C, X0
	295 Compare X0, 0
	296 JumpIfNotEqual {328}
	297 Move X0, X23
	298 Move X1, X31
	299 Call UnsafeUtility.GetFieldOffset, X0
	300 And W31, W0, 7
	301 Compare X21, 0
	302 JumpIfEqual {386}
	303 Move X9, 0x2275000
	304 Move W12, [X21+28]
	305 Move X8, [X21+16]
	306 Move X9, [X9+3600]
	307 Add W10, W0, 7
	308 NotImplemented "Instruction CMP not yet implemented."
	309 NotImplemented "Instruction CSEL not yet implemented."
	310 Move X9, [X9]
	311 Add W10, W12, 1
	312 Move [X21+28], W10
	313 Compare X8, 0
	314 JumpIfEqual {385}
	315 NotImplemented "Instruction LDRSW not yet implemented."
	316 Move W12, [X8+24]
	317 NotImplemented "Instruction SBFM not yet implemented."
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Add W9, W10, 1
	320 Add X8, X8, X10
	321 Move [X21+24], W9
	322 Move [X8+32], W1
	323 Move X8, [X9+32]
	324 Move X8, [X8+192]
	325 Move X2, [X8+112]
	326 Move X0, X21
	327 Call List`1<Int32>.AddWithResize, X0, X1
	328 Move W8, [X22+24]
	329 Add W27, W27, 1
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Compare X21, 0
	332 JumpIfEqual {402}
	333 Move X8, 0x2275000
	334 Move X8, [X8+3608]
	335 Move X1, [X8]
	336 Move X0, X21
	337 Call List`1<Int32>.ToArray, X0
	338 Move [X20+24], X0
	339 Move X0, [X25]
	340 Move W8, [X0+224]
	341 Compare W8, 0
	342 JumpIfNotEqual {345}
	343 Call 0x1C17DFC
	344 Move X0, [X25]
	345 Move X8, [X0+184]
	346 Move X0, [X8+8]
	347 Compare X0, 0
	348 JumpIfEqual {400}
	349 Move X8, 0x227E000
	350 Move X8, [X8+3176]
	351 NotImplemented "Instruction LDRH not yet implemented."
	352 Move X3, [X8]
	353 Move X2, X20
	354 Call Dictionary`2<UInt16, Object>.Add, X0, X1, X2
	355 Move X8, [X20+24]
	356 Compare X8, 0
	357 JumpIfEqual {401}
	358 Move W8, [X8+24]
	359 Add W8, W26, W8
	360 Add W26, W8, 1
	361 Move X8, 0x227E000
	362 Move X8, [X8+3232]
	363 Add X0, X31, 48
	364 Move X1, [X8]
	365 Call Enumerator<Object, Object>.Dispose, X0
	366 Move X20, [X31+176]
	367 Move X19, [X31+184]
	368 Move X22, [X31+160]
	369 Move X21, [X31+168]
	370 Move X24, [X31+144]
	371 Move X23, [X31+152]
	372 Move X26, [X31+128]
	373 Move X25, [X31+136]
	374 Move X28, [X31+112]
	375 Move X27, [X31+120]
	376 Move X29, [X31+96]
	377 Move X30, [X31+104]
	378 Add X31, X31, 192
	379 Return 
	380 Call 0x1C17F28
	381 Call 0x1C17F20
	382 Call 0x1C17F20
	383 Call 0x1C17F20
	384 Call 0x1C17F20
	385 Call 0x1C17F20
	386 Call 0x1C17F20
	387 Move X0, 0x2274000
	388 Move X0, [X0+2760]
	389 Call 0x1C17D08
	390 Move W1, 5
	391 Call 0x1C17D6C
	392 Move X20, X0
	393 Compare X0, 0
	394 JumpIfNotEqual {425}
	395 Call 0x1C17F20
	396 Call 0x1C17F20
	397 Call 0x1C17F20
	398 Call 0x1C17F20
	399 Call 0x1C17F20
	400 Call 0x1C17F20
	401 Call 0x1C17F20
	402 Call 0x1C17F20
	403 Move X0, 0x227E000
	404 Move X0, [X0+3272]
	405 Call 0x1C17D08
	406 Move X1, X20
	407 Move X2, X31
	408 Call String.Format, X0, X1
	409 Move X19, X0
	410 Move X0, 0x2274000
	411 Move X0, [X0+2000]
	412 Call 0x1C17D08
	413 Call 0x1C17F10
	414 Move X1, X19
	415 Move X2, X31
	416 Move X20, X0
	417 Call Exception..ctor, X0, X1
	418 Move X0, 0x227E000
	419 Move X0, [X0+3280]
	420 Call 0x1C17D08
	421 Move X1, X0
	422 Move X0, X20
	423 Call 0x1C17DEC
	424 Call 0x1C17F28
	425 Move X0, 0x227E000
	426 Move X0, [X0+3288]
	427 Call 0x1C17D08
	428 Move W8, [X20+24]
	429 Compare W8, 0
	430 JumpIfNotEqual {432}
	431 Call 0x1C17F28
	432 Move [X20+32], X0
	433 Move X0, 0x227E000
	434 Move X0, [X0+3256]
	435 Call 0x1C17D08
	436 Compare X19, 0
	437 JumpIfNotEqual {439}
	438 Call 0x1C17F20
	439 Move X8, [X19]
	440 Move X9, [X8+424]
	441 Move X1, [X8+432]
	442 Move X0, X19
	443 NotImplemented "Instruction BLR not yet implemented."
	444 Move W8, [X20+24]
	445 NotImplemented "Instruction CMP not yet implemented."
	446 Move [X20+40], X0
	447 Move X0, 0x227D000
	448 Move X0, [X0+1936]
	449 Call 0x1C17D08
	450 Move W8, [X20+24]
	451 NotImplemented "Instruction CMP not yet implemented."
	452 Move [X20+48], X0
	453 Move X8, [X23]
	454 Move X9, [X8+424]
	455 Move X1, [X8+432]
	456 Move X0, X23
	457 NotImplemented "Instruction BLR not yet implemented."
	458 Move W8, [X20+24]
	459 NotImplemented "Instruction CMP not yet implemented."
	460 Move [X20+56], X0
	461 Move X0, 0x227E000
	462 Move X0, [X0+3296]
	463 Call 0x1C17D08
	464 Move W8, [X20+24]
	465 NotImplemented "Instruction CMP not yet implemented."
	466 Move [X20+64], X0
	467 Move X0, X20
	468 Move X1, X31
	469 Call String.Concat, X0
	470 Move X19, X0
	471 Move X0, 0x2274000
	472 Move X0, [X0+2000]
	473 Call 0x1C17D08
	474 Call 0x1C17F10
	475 Move X20, X0
	476 Move X1, X19
	477 Move X2, X31
	478 Call Exception..ctor, X0, X1
	479 Move X0, 0x227E000
	480 Move X0, [X0+3280]
	481 Call 0x1C17D08
	482 Move X1, X0
	483 Move X0, X20
	484 Call 0x1C17DEC
	485 Call 0x1C17F28
	486 Call 0x1C17F28
	487 Call 0x1C17F28
	488 Call 0x1C17F28
	489 Move X19, X0
	490 NotImplemented "Instruction CMP not yet implemented."
	491 Move X0, X19
	492 Call 0x3EB2AD0
	493 Move X20, [X0]
	494 Call 0x3EB2AE0
	495 Move X8, 0x227E000
	496 Move X8, [X8+3232]
	497 Add X0, X31, 48
	498 Move X1, [X8]
	499 Call Enumerator<Object, Object>.Dispose, X0
	500 Compare X20, 0
	501 JumpIfEqual {366}
	502 Move X0, X20
	503 Call 0x1C17F18
	504 Move X20, X31
	505 Move X19, X0
	506 Move X8, 0x227E000
	507 Move X8, [X8+3232]
	508 Move X1, [X8]
	509 Add X0, X31, 48
	510 Call Enumerator<Object, Object>.Dispose, X0
	511 Compare X20, 0
	512 JumpIfNotEqual {515}
	513 Move X0, X19
	514 Call 0x1D2D690
	515 Move X0, X20
	516 Call 0x1C17F18
	517 Call 0x1991590

Method: System.UInt16 GetTypeOffset()

Disassembly:
	0x021B12B8 ADD X31, X19, 0x0
	0x021B12BC ADD X8, X31, 0x0
	0x021B12C0 SUB X22, X8, X9
	0x021B12C4 ADD X31, X22, 0x0
	0x021B12C8 MOV X0, X22
	0x021B12CC MOV W1, W31
	0x021B12D0 MOV X2, X20
	0x021B12D4 BL 0x3EB1B10
	0x021B12D8 ADD X8, X31, 0x0
	0x021B12DC SUB X25, X8, X25
	0x021B12E0 ADD X31, X25, 0x0
	0x021B12E4 MOV X0, X25
	0x021B12E8 MOV W1, W31
	0x021B12EC MOV X2, X26
	0x021B12F0 BL 0x3EB1B10
	0x021B12F4 LDUR X8, [X29 - 0x38]
	0x021B12F8 CBZ X8, 0x21B15F0
	0x021B12FC LDUR X8, [X29 - 0x30]
	0x021B1300 CBZ X8, 0x21B15FC
	0x021B1304 LDP X8, X9, [X29 - 0x48]
	0x021B1308 MOV X0, X21
	0x021B130C MOV X2, X20
	0x021B1310 LDR W8, [X8 + 0x28]
	0x021B1314 CMP W8, 0x0
	0x021B1318 SUB X8, X29, 0x28
	0x021B131C CSEL X1, X9, X8, LT
	0x021B1320 BL 0x3EB1AC0
	0x021B1324 MOV X0, X22
	0x021B1328 MOV X1, X21
	0x021B132C MOV X2, X20
	0x021B1330 BL 0x3EB1AC0
	0x021B1334 LDR X1, [X24]
	0x021B1338 LDRB W8, [X1 + 0x135]
	0x021B133C TBNZ X8, 0x0, 0x21B134C
	0x021B1340 MOV X0, X1
	0x021B1344 BL 0x1C5C684
	0x021B1348 MOV X1, X0
	0x021B134C LDUR X24, [X29 - 0x38]
	0x021B1350 LDR X8, [X24]
	0x021B1354 LDRH W9, [X8 + 0x12E]
	0x021B1358 CBZ X9, 0x21B137C
	0x021B135C LDR X10, [X8 + 0xB0]
	0x021B1360 ADD X10, X10, 0x8
	0x021B1364 LDUR X11, [X10 - 0x8]
	0x021B1368 CMP X11, X1
	0x021B136C B.EQ 0x21B138C
	0x021B1370 SUBS X9, X9, 0x1
	0x021B1374 ADD X10, X10, 0x10
	0x021B1378 B.NE 0x21B1364
	0x021B137C MOV X0, X24
	0x021B1380 MOV W2, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {22}
	008 Move X0, 0x1F6B000
	009 Move X0, [X0+2480]
	010 Call 0x1C17CF4
	011 Move X0, 0x1F4D000
	012 Move X0, [X0+2976]
	013 Call 0x1C17CF4
	014 Move X0, 0x1F43000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move X8, [X19+56]
	018 Compare X8, 0
	019 JumpIfNotEqual {22}
	020 Move X0, X19
	021 Call 0x1C5D6E0
	022 Move X20, 0x1F4D000
	023 Move X20, [X20+2976]
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X9, 0x1F43000
	031 Move X8, [X0+184]
	032 Move X9, [X9+1728]
	033 Move X0, [X9]
	034 Move X9, [X19+56]
	035 Move X19, [X8]
	036 Move W8, [X0+224]
	037 Move X20, [X9]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X31
	043 Call Type.GetTypeFromHandle, X0
	044 Compare X19, 0
	045 JumpIfEqual {59}
	046 Move X8, 0x1F6B000
	047 Move X8, [X8+2480]
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, [X8]
	051 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	052 Compare X0, 0
	053 JumpIfEqual {59}
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Return X0
	059 Call 0x1C17F20

Method: System.Boolean IsPtrInBlock(Fusion.DynamicHeap* heap, Fusion.DynamicHeap/Block* block, System.Void* p)

Disassembly:
	0x01E81580 MOV X0, X20
	0x01E81584 MOV W1, W19
	0x01E81588 LDP X20, X19, [X31 + 0x20]
	0x01E8158C LDP X22, X21, [X31 + 0x10]
	0x01E81590 LDR X30, [X31], #0x30
	0x01E81594 B 0x1E809BC
	0x01E81598 STR X30, [X31 - 0x30]!
	0x01E8159C STP X22, X21, [X31 + 0x10]
	0x01E815A0 STP X20, X19, [X31 + 0x20]
	0x01E815A4 ADRP X22, 0x2558000
	0x01E815A8 ADRP X21, 0x227C000
	0x01E815AC ADRP X20, 0x227C000
	0x01E815B0 LDRB W8, [X22 + 0x1E4]
	0x01E815B4 LDR X21, [X21 + 0xD48]
	0x01E815B8 LDR X20, [X20 + 0xD50]
	0x01E815BC MOV W19, W1

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {18}
	004 Move X8, [X1+56]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, W31
	007 Compare X0, 0
	008 JumpIfEqual {18}
	009 Move W9, [X0+104]
	010 Move W9, W9
	011 ShiftRight W9, 17
	012 And W9, W9, 0xFFFF
	013 Add X8, X8, W9
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F20

Method: Fusion.DynamicHeap/Page* GetPageForPtr(Fusion.DynamicHeap* heap, Fusion.DynamicHeap/Block* block, System.Void* ptr)

Disassembly:
	0x01E815C0 TBNZ X8, 0x0, 0x1E815E4
	0x01E815C4 ADRP X0, 0x227C000
	0x01E815C8 LDR X0, [X0 + 0xD50]
	0x01E815CC BL 0x1C16CF4
	0x01E815D0 ADRP X0, 0x227C000
	0x01E815D4 LDR X0, [X0 + 0xD48]
	0x01E815D8 BL 0x1C16CF4
	0x01E815DC MOVZ W8, 0x1
	0x01E815E0 STRB W8, [X22 + 0x1E4]
	0x01E815E4 LDR X1, [X21]
	0x01E815E8 CMP W19, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move X8, [X1+56]
	005 Move X9, [X1+24]
	006 Move W10, 72
	007 Subtract X8, X2, X8
	008 NotImplemented "Instruction SBFM not yet implemented."
	009 NotImplemented "Instruction MADD not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Int32 GetPageOffset(Fusion.DynamicHeap/Page* page, Fusion.DynamicHeap/ObjectFree* obj)

Disassembly:
	0x01E815EC CSET W0, GT
	0x01E815F0 MOV X2, X31
	0x01E815F4 BL 0x1E3BA60
	0x01E815F8 LDR X1, [X20]
	0x01E815FC CMP W19, 0x10000
	0x01E81600 LDP X20, X19, [X31 + 0x20]
	0x01E81604 LDP X22, X21, [X31 + 0x10]
	0x01E81608 CSET W0, LT
	0x01E8160C MOV X2, X31
	0x01E81610 LDR X30, [X31], #0x30
	0x01E81614 B 0x1E3BA60

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {9}
	004 Compare X0, 0
	005 JumpIfEqual {12}
	006 Move W8, [X0+40]
	007 Subtract W8, W1, W8
	008 Add W0, W8, 1
	009 Move W0, W31
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: Fusion.DynamicHeap/ObjectFree* ResolvePageOffset(Fusion.DynamicHeap/Page* page, System.Int32 offset)

Disassembly:
	0x01E8150C LDR W8, [X0 + 0xE0]
	0x01E81510 CBNZ W8, 0x1E81518
	0x01E81514 BL 0x1C16DFC
	0x01E81518 MOV X0, X20
	0x01E8151C MOV X1, X19
	0x01E81520 LDP X20, X19, [X31 + 0x20]
	0x01E81524 LDP X22, X21, [X31 + 0x10]
	0x01E81528 LDR X30, [X31], #0x30
	0x01E8152C B 0x1E80878
	0x01E81530 STR X30, [X31 - 0x30]!
	0x01E81534 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Compare W1, 0
	003 JumpIfEqual {9}
	004 Compare X0, 0
	005 JumpIfEqual {12}
	006 Move X8, [X0+40]
	007 Subtract W9, W1, 1
	008 Add X0, X8, W9
	009 Move X0, X31
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void FreeInternal(Fusion.DynamicHeap* heap, System.Void* ptr, Fusion.DynamicHeap/Object objData)

Disassembly:
	0x01E81618 LDR V0, [X0 + 0x24]
	0x01E8161C FABS S0, S0
	0x01E81620 RET
	0x01E81624 LDR V0, [X0 + 0x28]
	0x01E81628 FABS S0, S0
	0x01E8162C RET
	0x01E81630 STP D9, D8, [X31 - 0x30]!
	0x01E81634 STR X30, [X31 + 0x10]
	0x01E81638 STP X20, X19, [X31 + 0x20]
	0x01E8163C ADRP X20, 0x2557000
	0x01E81640 LDUR V8, [X0 + 0x3C]
	0x01E81644 LDRB W8, [X20 + 0x786]
	0x01E81648 LDR V9, [X0 + 0x44]
	0x01E8164C MOV X19, X0
	0x01E81650 CBNZ W8, 0x1E81668
	0x01E81654 ADRP X0, 0x2272000
	0x01E81658 LDR X0, [X0 + 0x5A0]
	0x01E8165C BL 0x1C16CF4
	0x01E81660 MOVZ W8, 0x1
	0x01E81664 STRB W8, [X20 + 0x786]
	0x01E81668 ADRP X8, 0x2272000
	0x01E8166C LDR X8, [X8 + 0x5A0]
	0x01E81670 LDR V0, [X19 + 0x28]
	0x01E81674 LDR V1, [X19 + 0x38]
	0x01E81678 FMOV S2, 0.5
	0x01E8167C LDR X8, [X8]
	0x01E81680 FABS S0, S0
	0x01E81684 FMUL S1, S1, S2
	0x01E81688 FCMP S1, S0
	0x01E8168C LDR X8, [X8 + 0xB8]
	0x01E81690 FCSEL S1, S1, S0, GT
	0x01E81694 FSUB S0, S1, S0
	0x01E81698 LDP X20, X19, [X31 + 0x20]
	0x01E8169C LDR V2, [X8 + 0x18]
	0x01E816A0 LDR V3, [X8 + 0x20]
	0x01E816A4 LDR X30, [X31 + 0x10]
	0x00000000 INVALID
	0x01E816AC FMUL S2, S3, S0
	0x01E816B0 FADD V0.2S, V8.2S, V1.2S
	0x01E816B4 FADD S2, S9, S2
	0x01E816B8 MOV S1, V0.S[1]
	0x01E816BC LDP D9, D8, [X31], #0x30
	0x01E816C0 RET
	0x01E816C4 STP D9, D8, [X31 - 0x30]!
	0x01E816C8 STR X30, [X31 + 0x10]
	0x01E816CC STP X20, X19, [X31 + 0x20]
	0x01E816D0 ADRP X20, 0x2557000
	0x01E816D4 LDUR V8, [X0 + 0x3C]
	0x01E816D8 LDRB W8, [X20 + 0xABD]
	0x01E816DC LDR V9, [X0 + 0x44]
	0x01E816E0 MOV X19, X0
	0x01E816E4 CBNZ W8, 0x1E816FC
	0x01E816E8 ADRP X0, 0x2272000
	0x01E816EC LDR X0, [X0 + 0x5A0]
	0x01E816F0 BL 0x1C16CF4
	0x01E816F4 MOVZ W8, 0x1
	0x01E816F8 STRB W8, [X20 + 0xABD]
	0x01E816FC ADRP X8, 0x2272000
	0x01E81700 LDR X8, [X8 + 0x5A0]
	0x01E81704 LDR V0, [X19 + 0x28]
	0x01E81708 LDR V1, [X19 + 0x38]
	0x01E8170C FMOV S2, 0.5
	0x01E81710 LDR X8, [X8]
	0x01E81714 FABS S0, S0
	0x01E81718 FMUL S1, S1, S2
	0x01E8171C FCMP S1, S0
	0x01E81720 LDR X8, [X8 + 0xB8]
	0x01E81724 FCSEL S1, S1, S0, GT
	0x01E81728 FSUB S0, S1, S0
	0x01E8172C LDP X20, X19, [X31 + 0x20]
	0x01E81730 LDUR V2, [X8 + 0x24]
	0x01E81734 LDR V3, [X8 + 0x2C]
	0x01E81738 LDR X30, [X31 + 0x10]
	0x00000000 INVALID
	0x01E81740 FMUL S2, S3, S0
	0x01E81744 FADD V0.2S, V8.2S, V1.2S
	0x01E81748 FADD S2, S9, S2
	0x01E8174C MOV S1, V0.S[1]
	0x01E81750 LDP D9, D8, [X31], #0x30
	0x01E81754 RET
	0x01E81758 LDP S0, S1, [X0 + 0x2C]
	0x01E8175C LDR V2, [X0 + 0x34]
	0x01E81760 FABS S0, S0
	0x01E81764 FABS S1, S1
	0x01E81768 FABS S2, S2
	0x01E8176C RET
	0x01E81770 LDR W0, [X0 + 0x50]
	0x01E81774 RET
	0x01E81778 LDR W8, [X0 + 0x50]
	0x01E8177C MOVZ W9, 0x1
	0x01E81780 ADD W8, W8, 0x1
	0x01E81784 LSLV W0, W9, W8
	0x01E81788 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2559000
	007 Move W8, [X21+465]
	008 Move X20, X2
	009 Move X22, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x227D000
	016 Move X0, [X0+2976]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+465], W8
	020 Compare X19, 0
	021 JumpIfEqual {113}
	022 Move X8, 0x227D000
	023 Move X8, [X8+2976]
	024 Move X9, X20
	025 ShiftRight X9, 5
	026 And X9, X9, 0x7FFFFFFF
	027 And X9, X9, 2047
	028 Move X0, [X8]
	029 Move X8, [X19+24]
	030 Move W10, [X0+224]
	031 Move X20, [X9]
	032 Compare W10, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Compare X20, 0
	036 JumpIfEqual {113}
	037 Move X8, [X20+56]
	038 Move X9, [X20+24]
	039 Move W10, 72
	040 Subtract X8, X22, X8
	041 NotImplemented "Instruction SBFM not yet implemented."
	042 NotImplemented "Instruction MADD not yet implemented."
	043 Compare X21, 0
	044 JumpIfEqual {113}
	045 Move X8, [X21+48]
	046 Compare X8, 0
	047 JumpIfEqual {51}
	048 Move W9, [X21+40]
	049 Subtract W8, W8, W9
	050 Add W8, W8, 1
	051 Compare X22, 0
	052 JumpIfEqual {113}
	053 Move [X22+4], W8
	054 Move W8, [X21+56]
	055 Move [X21+48], X22
	056 NotImplemented "Instruction LDRSW not yet implemented."
	057 Move W11, 48
	058 Add W8, W8, 1
	059 Move [X21+56], W8
	060 Move X8, [X19+40]
	061 Move W10, [X19+128]
	062 NotImplemented "Instruction NOP not yet implemented."
	063 NotImplemented "Instruction MADD not yet implemented."
	064 Subtract W9, W10, 1
	065 Move [X19+128], W9
	066 Compare X8, 0
	067 JumpIfEqual {113}
	068 Move W9, [X19+132]
	069 Move W10, [X8+36]
	070 Subtract W9, W9, W10
	071 Move [X19+132], W9
	072 Move W9, [X21+64]
	073 Subtract W10, W9, 1
	074 Move [X21+64], W10
	075 Move W10, [X8+40]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X1, X21
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Add X0, X8, 8
	083 Move X30, [X31+48]
	084 Call PageList.MoveFirst, X0, X1
	085 Return 
	086 Add X0, X8, 8
	087 Move X1, X21
	088 Call PageList.Remove, X0, X1
	089 Add X0, X20, 32
	090 Move X1, X21
	091 Move [X21+32], W31
	092 Move [X21+48], X31
	093 Move [X21+60], W31
	094 Move [X21+64], W31
	095 Call PageList.AddLast, X0, X1
	096 Move X8, [X20+40]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X20, [X31+32]
	099 Move X19, [X31+40]
	100 Move X22, [X31+16]
	101 Move X21, [X31+24]
	102 Move X30, [X31+48]
	103 Return 
	104 Move X0, X19
	105 Move X1, X20
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X30, [X31+48]
	111 Call BlockList.AddLast, X0, X1
	112 Return 
	113 Call 0x1C17F20

Method: System.Void Free(Fusion.DynamicHeap* heap, System.Void* ptr)

Disassembly:
	0x01E81878 LDR X19, [X19 + 0x758]
	0x01E8187C MOV X0, X19
	0x01E81880 BL 0x1C16D08
	0x01E81884 ADD X1, X31, 0xC
	0x01E81888 BL 0x1C16E04
	0x01E8188C MOV X20, X0
	0x01E81890 MOVZ W8, 0x1F
	0x01E81894 MOV X0, X19
	0x01E81898 STR W8, [X31 + 0x8]
	0x01E8189C BL 0x1C16D08
	0x01E818A0 ADD X1, X31, 0x8
	0x01E818A4 BL 0x1C16E04
	0x01E818A8 MOV X19, X0
	0x01E818AC ADRP X0, 0x227C000
	0x01E818B0 LDR X0, [X0 + 0xD60]
	0x01E818B4 BL 0x1C16D08
	0x01E818B8 MOV X1, X20
	0x01E818BC MOV X2, X19
	0x01E818C0 MOV X3, X31
	0x01E818C4 BL 0x3227BD4
	0x01E818C8 MOV X19, X0
	0x01E818CC ADRP X0, 0x227A000
	0x01E818D0 LDR X0, [X0 + 0x760]
	0x01E818D4 BL 0x1C16D08
	0x01E818D8 BL 0x1C16F10
	0x01E818DC MOV X1, X19
	0x01E818E0 MOV X2, X31
	0x01E818E4 MOV X20, X0
	0x01E818E8 BL 0x3316014
	0x01E818EC ADRP X0, 0x227C000
	0x01E818F0 LDR X0, [X0 + 0xD68]
	0x01E818F4 BL 0x1C16D08
	0x01E818F8 MOV X1, X0
	0x01E818FC MOV X0, X20
	0x01E81900 BL 0x1C16DEC
	0x01E81904 BL 0x1C16F28
	0x01E81908 MOV X8, X0
	0x01E8190C LDR X0, [X0 + 0x48]
	0x01E81910 CBZ X0, 0x1E81928
	0x01E81914 LDRB W9, [X0 + 0x30]
	0x01E81918 TBNZ X9, 0x3, 0x1E81928
	0x01E8191C AND W2, W1, 0x1
	0x01E81920 MOV X1, X8
	0x01E81924 B 0x1E8192C
	0x01E81928 RET
	0x01E8192C STR X30, [X31 - 0x30]!
	0x01E81930 STP X22, X21, [X31 + 0x10]
	0x01E81934 STP X20, X19, [X31 + 0x20]
	0x01E81938 CBZ X1, 0x1E819F8
	0x01E8193C LDR W8, [X1 + 0x50]
	0x01E81940 MOV X20, X1
	0x01E81944 CMP W8, 0x1F
	0x01E81948 B.CS 0x1E819FC
	0x01E8194C LDR X9, [X20 + 0x48]
	0x01E81950 MOV X21, X0
	0x01E81954 CMP X0, X9
	0x01E81958 B.NE 0x1E819E8
	0x01E8195C LDR X9, [X21 + 0xA8]
	0x01E81960 CBZ X9, 0x1E819F8
	0x01E81964 LDR W10, [X9 + 0x18]
	0x01E81968 CMP W8, W10
	0x01E8196C B.GE 0x1E819E8
	0x01E81970 B.CS 0x1E81A90
	0x01E81974 ADD X8, X9, X8, 0x3, LSL
	0x01E81978 LDR X8, [X8 + 0x20]
	0x01E8197C CMP X8, X20
	0x01E81980 B.NE 0x1E819E8
	0x01E81984 ADRP X22, 0x2558000
	0x01E81988 LDRB W8, [X22 + 0x22F]
	0x01E8198C MOV W19, W2
	0x01E81990 CBNZ W8, 0x1E819A8
	0x01E81994 ADRP X0, 0x227C000
	0x01E81998 LDR X0, [X0 + 0xD58]
	0x01E8199C BL 0x1C16CF4
	0x01E819A0 MOVZ W8, 0x1
	0x01E819A4 STRB W8, [X22 + 0x22F]
	0x01E819A8 ADRP X8, 0x227C000
	0x01E819AC LDR X8, [X8 + 0xD58]
	0x01E819B0 MOV X0, X21
	0x01E819B4 MOV W1, W31
	0x01E819B8 LDR X2, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2559000
	007 Move W8, [X21+466]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227D000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+466], W8
	019 Add X19, X19, -8
	020 Move W21, [X19]
	021 Move X10, 0x227D000
	022 Move W8, [X19+7]
	023 NotImplemented "Instruction LDURH not yet implemented."
	024 NotImplemented "Instruction LDUR not yet implemented."
	025 Move X10, [X10+2976]
	026 Move TEMP, X21
	027 And TEMP, TEMP, 2
	028 Compare TEMP, 2
	029 JumpIfEqual {52}
	030 Move TEMP, X21
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {75}
	034 Move X0, 0x2273000
	035 Move X0, [X0+1456]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0x227D000
	040 Move X0, [X0+3352]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X19
	044 Move X2, X31
	045 Call InvalidOperationException..ctor, X0, X1
	046 Move X0, 0x227D000
	047 Move X0, [X0+3360]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call 0x1C17DEC
	052 Compare X20, 0
	053 JumpIfEqual {94}
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X12, [X20+112]
	057 Move X14, X31
	058 Move X11, X12
	059 Move X15, [X11]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X14, X14, 1
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X11, X11, 8
	064 Move X0, [X10]
	065 Call 0x19913D0
	066 Call DynamicHeap.ThrowHeapCorrupted
	067 Subtract W13, W13, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X20+124], W13
	070 Add X12, X12, W13
	071 Move X13, [X12]
	072 Move [X11], X13
	073 Move X11, X12
	074 Move [X11], X31
	075 Move [X19], X31
	076 Move X0, [X10]
	077 NotImplemented "Instruction BFM not yet implemented."
	078 NotImplemented "Instruction BFM not yet implemented."
	079 Move W10, [X0+224]
	080 Compare W10, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move W2, W21
	084 NotImplemented "Instruction BFM not yet implemented."
	085 Move X0, X20
	086 Move X1, X19
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 Call DynamicHeap.FreeInternal, X0, X1, X2
	093 Return 
	094 Call 0x1C17F20

Method: System.Void* Allocate(Fusion.DynamicHeap* heap, System.Int32 size)

Disassembly:
	0x01E819BC BL 0x22275E4
	0x01E819C0 LDR W8, [X20 + 0x50]
	0x01E819C4 LDR W9, [X0]
	0x01E819C8 MOVZ W10, 0x1
	0x01E819CC ANDS W31, W19, 0x1
	0x01E819D0 ADD W8, W8, 0x1
	0x01E819D4 LSLV W8, W10, W8
	0x01E819D8 ORR W10, W8, W9, 0x0
	0x01E819DC BIC W8, W9, W8, 0x0
	0x01E819E0 CSEL W8, W8, W10, NE
	0x01E819E4 STR W8, [X0]
	0x01E819E8 LDP X20, X19, [X31 + 0x20]
	0x01E819EC LDP X22, X21, [X31 + 0x10]
	0x01E819F0 LDR X30, [X31], #0x30
	0x01E819F4 RET
	0x01E819F8 BL 0x1C16F20
	0x01E819FC STR W8, [X31 + 0xC]
	0x01E81A00 ADRP X19, 0x2272000
	0x01E81A04 LDR X19, [X19 + 0x758]
	0x01E81A08 MOV X0, X19
	0x01E81A0C BL 0x1C16D08
	0x01E81A10 ADD X1, X31, 0xC
	0x01E81A14 BL 0x1C16E04
	0x01E81A18 MOV X20, X0
	0x01E81A1C MOVZ W8, 0x1F
	0x01E81A20 MOV X0, X19
	0x01E81A24 STR W8, [X31 + 0x8]
	0x01E81A28 BL 0x1C16D08
	0x01E81A2C ADD X1, X31, 0x8
	0x01E81A30 BL 0x1C16E04
	0x01E81A34 MOV X19, X0
	0x01E81A38 ADRP X0, 0x227C000
	0x01E81A3C LDR X0, [X0 + 0xD60]
	0x01E81A40 BL 0x1C16D08
	0x01E81A44 MOV X1, X20
	0x01E81A48 MOV X2, X19
	0x01E81A4C MOV X3, X31
	0x01E81A50 BL 0x3227BD4
	0x01E81A54 MOV X19, X0
	0x01E81A58 ADRP X0, 0x227A000
	0x01E81A5C LDR X0, [X0 + 0x760]
	0x01E81A60 BL 0x1C16D08
	0x01E81A64 BL 0x1C16F10
	0x01E81A68 MOV X1, X19
	0x01E81A6C MOV X2, X31
	0x01E81A70 MOV X20, X0
	0x01E81A74 BL 0x3316014
	0x01E81A78 ADRP X0, 0x227C000
	0x01E81A7C LDR X0, [X0 + 0xD70]
	0x01E81A80 BL 0x1C16D08
	0x01E81A84 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x2559000
	009 Move X22, 0x227D000
	010 Move X21, 0x227D000
	011 Move W8, [X23+467]
	012 Move X22, [X22+3368]
	013 Move X21, [X21+2976]
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x227D000
	021 Move X0, [X0+2976]
	022 Call 0x1C17CF4
	023 Move X0, 0x227D000
	024 Move X0, [X0+3368]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+467], W8
	028 Move X1, [X22]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Move X2, X31
	032 Move [X31+12], W31
	033 Call Assert.Always, X0, X1
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Add W1, W20, 8
	040 Add X2, X31, 12
	041 Move X0, X19
	042 Call DynamicHeap.AllocateInternal, X0, X1, X2
	043 Move [X0], X31
	044 Compare X19, 0
	045 JumpIfEqual {62}
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X30, [X31+16]
	052 Move X23, [X31+24]
	053 NotImplemented "Instruction STRH not yet implemented."
	054 Move W9, [X31+12]
	055 Move W10, 0xFFFF
	056 Add X8, X0, 8
	057 NotImplemented "Instruction STRH not yet implemented."
	058 Move [X0+1], W9
	059 Move X0, X8
	060 Add X31, X31, 64
	061 Return X0
	062 Call 0x1C17F20

Method: System.Int32 GetArrayLength(System.Void* ptr)

Disassembly:
	0x01E81A88 MOV X0, X20
	0x01E81A8C BL 0x1C16DEC
	0x01E81A90 BL 0x1C16F28
	0x01E81A94 LDR W0, [X0 + 0x54]
	0x01E81A98 RET
	0x01E81A9C STR W1, [X0 + 0x54]
	0x01E81AA0 RET

ISIL:
	001 Move [X31-16], X30
	002 Subtract X8, X0, 8
	003 NotImplemented "Instruction LDRH not yet implemented."
	004 Move X30, [X31+16]
	005 Return X0
	006 Call 0x1C17F20

Method: T* AllocateTracked(Fusion.DynamicHeap* heap, System.UInt16 array = 1, System.Boolean root = False)

Disassembly:
	0x021B0FC4 B.NE 0x21B0FB0
	0x021B0FC8 MOV X0, X19
	0x021B0FCC MOV W2, W31
	0x021B0FD0 BL 0x1C5C788
	0x021B0FD4 B 0x21B0FE4
	0x021B0FD8 LDRSW X9, [X10]
	0x021B0FDC ADD X8, X8, X9, 0x4, LSL
	0x021B0FE0 ADD X0, X8, 0x138
	0x021B0FE4 LDP X8, X1, [X0]
	0x021B0FE8 MOV X0, X19
	0x021B0FEC BLR X8
	0x021B0FF0 TBZ X0, 0x0, 0x21B1080
	0x021B0FF4 LDR X8, [X20 + 0x38]
	0x021B0FF8 LDR X1, [X8 + 0x20]
	0x021B0FFC LDRB W8, [X1 + 0x135]
	0x021B1000 TBNZ X8, 0x0, 0x21B1010
	0x021B1004 MOV X0, X1
	0x021B1008 BL 0x1C5C684
	0x021B100C MOV X1, X0
	0x021B1010 LDR X8, [X19]
	0x021B1014 LDRH W9, [X8 + 0x12E]
	0x021B1018 CBZ X9, 0x21B103C
	0x021B101C LDR X10, [X8 + 0xB0]
	0x021B1020 ADD X10, X10, 0x8
	0x021B1024 LDUR X11, [X10 - 0x8]
	0x021B1028 CMP X11, X1
	0x021B102C B.EQ 0x21B104C
	0x021B1030 SUBS X9, X9, 0x1
	0x021B1034 ADD X10, X10, 0x10
	0x021B1038 B.NE 0x21B1024
	0x021B103C MOV X0, X19
	0x021B1040 MOV W2, W31
	0x021B1044 BL 0x1C5C788
	0x021B1048 B 0x21B1058
	0x021B104C LDRSW X9, [X10]
	0x021B1050 ADD X8, X8, X9, 0x4, LSL
	0x021B1054 ADD X0, X8, 0x138
	0x021B1058 LDP X8, X1, [X0]
	0x021B105C MOV X0, X19
	0x021B1060 BLR X8
	0x021B1064 MOV X2, X0
	0x021B1068 LDR X0, [X23 + 0x40]
	0x021B106C LDR X8, [X23 + 0x18]
	0x021B1070 LDR X3, [X23 + 0x28]
	0x021B1074 MOV X1, X21
	0x021B1078 BLR X8
	0x021B107C B 0x21B0F90
	0x021B1080 MOV X20, X31
	0x021B1084 CBZ X19, 0x21B10E8
	0x021B1088 ADRP X10, 0x1F42000
	0x021B108C LDR X8, [X19]
	0x021B1090 LDR X10, [X10 + 0xE00]
	0x021B1094 LDRH W9, [X8 + 0x12E]
	0x021B1098 LDR X1, [X10]
	0x021B109C CBZ X9, 0x21B10C0
	0x021B10A0 LDR X10, [X8 + 0xB0]
	0x021B10A4 ADD X10, X10, 0x8
	0x021B10A8 LDUR X11, [X10 - 0x8]
	0x021B10AC CMP X11, X1
	0x021B10B0 B.EQ 0x21B10D0
	0x021B10B4 SUBS X9, X9, 0x1
	0x021B10B8 ADD X10, X10, 0x10
	0x021B10BC B.NE 0x21B10A8
	0x021B10C0 MOV X0, X19
	0x021B10C4 MOV W2, W31
	0x021B10C8 BL 0x1C5C788
	0x021B10CC B 0x21B10DC
	0x021B10D0 LDRSW X9, [X10]
	0x021B10D4 ADD X8, X8, X9, 0x4, LSL
	0x021B10D8 ADD X0, X8, 0x138
	0x021B10DC LDP X8, X1, [X0]
	0x021B10E0 MOV X0, X19
	0x021B10E4 BLR X8
	0x021B10E8 CBNZ X20, 0x21B1130
	0x021B10EC MOV X0, X21
	0x021B10F0 LDP X20, X19, [X31 + 0x30]
	0x021B10F4 LDP X22, X21, [X31 + 0x20]
	0x021B10F8 LDP X24, X23, [X31 + 0x10]
	0x021B10FC LDR X30, [X31], #0x40
	0x021B1100 RET
	0x021B1104 BL 0x1C16F20
	0x021B1108 ADRP X0, 0x1F4D000
	0x021B110C LDR X0, [X0 + 0x580]
	0x021B1110 B 0x21B111C
	0x021B1114 ADRP X0, 0x1F6A000
	0x021B1118 LDR X0, [X0 + 0x9B8]
	0x021B111C BL 0x1C16D08
	0x021B1120 MOV X1, X31
	0x021B1124 BL 0x35DEB28
	0x021B1128 MOV X1, X20
	0x021B112C BL 0x1C16DEC
	0x021B1130 MOV X0, X20
	0x021B1134 BL 0x1C16F18
	0x021B1138 B 0x21B114C
	0x021B113C MOV X23, X0
	0x021B1140 MOV X21, X22
	0x021B1144 B 0x21B1150
	0x021B1148 B 0x21B114C
	0x021B114C MOV X23, X0
	0x021B1150 CMP W1, 0x1
	0x021B1154 B.NE 0x21B116C
	0x021B1158 MOV X0, X23
	0x021B115C BL 0x3EB1AD0
	0x021B1160 LDR X20, [X0]
	0x021B1164 BL 0x3EB1AE0
	0x021B1168 B 0x21B1084
	0x021B116C MOV X20, X31
	0x021B1170 B 0x21B1178
	0x021B1174 MOV X23, X0
	0x021B1178 CBZ X19, 0x21B11DC
	0x021B117C ADRP X10, 0x1F42000
	0x021B1180 LDR X8, [X19]
	0x021B1184 LDR X10, [X10 + 0xE00]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X8, [X3+56]
	011 Move X19, X3
	012 Move W23, W2
	013 Move W20, W1
	014 Move X21, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {35}
	017 Move X0, 0x1F6C000
	018 Move X0, [X0+2480]
	019 Call 0x1C17CF4
	020 Move X0, 0x1F4E000
	021 Move X0, [X0+2976]
	022 Call 0x1C17CF4
	023 Move X0, 0x1F43000
	024 Move X0, [X0+1728]
	025 Call 0x1C17CF4
	026 Move X0, 0x1F4D000
	027 Move X0, [X0+3368]
	028 Call 0x1C17CF4
	029 Move X8, [X19+56]
	030 Compare X8, 0
	031 JumpIfNotEqual {35}
	032 Move X0, X19
	033 Call 0x1C5D6E0
	034 Move X8, [X19+56]
	035 Move X9, 0x1F4D000
	036 Move X8, [X8]
	037 Move X9, [X9+3368]
	038 And W25, W20, 0xFFFF
	039 NotImplemented "Instruction CSET not yet implemented."
	040 Move W22, [X8+252]
	041 Move X1, [X9]
	042 Move X2, X31
	043 Move [X31+12], W31
	044 Call Assert.Always, X0, X1
	045 Move X24, 0x1F4D000
	046 Move X24, [X24+2976]
	047 Move X0, [X24]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Or W8, W31, 8
	053 NotImplemented "Instruction MADD not yet implemented."
	054 Add X2, X31, 12
	055 Move X0, X21
	056 Move X3, X31
	057 Call DynamicHeap.AllocateInternal, X0, X1, X2
	058 Move X22, X0
	059 Move TEMP, X23
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {72}
	063 Move X0, [X24]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X21
	069 Move X1, X22
	070 Move X2, X31
	071 Call DynamicHeap.InitRoot, X0, X1
	072 Move X0, [X24]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X8, [X19+56]
	078 Move X0, [X8+8]
	079 Move X8, [X0]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move W4, [X31+12]
	082 Move W2, W0
	083 Move X0, X21
	084 Move X1, X22
	085 Move W3, W20
	086 Move X5, X31
	087 Call DynamicHeap.InitObj, X0, X1, X2, X3, X4
	088 Move X9, 0x1F43000
	089 Move X8, [X24]
	090 Move X9, [X9+1728]
	091 Move X8, [X8+184]
	092 Move X0, [X9]
	093 Move X9, [X19+56]
	094 Move X19, [X8]
	095 Move W10, [X0+224]
	096 Move X20, [X9+16]
	097 Compare W10, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X0, X20
	101 Move X1, X31
	102 Call Type.GetTypeFromHandle, X0
	103 Compare X19, 0
	104 JumpIfEqual {135}
	105 Move X8, 0x1F6B000
	106 Move X8, [X8+2480]
	107 Move X1, X0
	108 Move X0, X19
	109 Move X2, [X8]
	110 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	111 Compare X0, 0
	112 JumpIfEqual {135}
	113 Move X8, [X0+24]
	114 Compare X8, 0
	115 JumpIfEqual {135}
	116 Move X8, [X8+24]
	117 Compare X8, 0
	118 JumpIfNotEqual {124}
	119 Compare X22, 0
	120 JumpIfEqual {135}
	121 Move W8, [X22]
	122 Or W8, W8, 8
	123 Move [X22], W8
	124 Add X0, X22, 8
	125 Move X20, [X31+64]
	126 Move X19, [X31+72]
	127 Move X22, [X31+48]
	128 Move X21, [X31+56]
	129 Move X24, [X31+32]
	130 Move X23, [X31+40]
	131 Move X30, [X31+16]
	132 Move X25, [X31+24]
	133 Add X31, X31, 80
	134 Return X0
	135 Call 0x1C17F20

Method: T* AllocateTrackedPointerArray(Fusion.DynamicHeap* heap, System.UInt16 array, System.Boolean root = False)

Disassembly:
	0x021B1188 LDRH W9, [X8 + 0x12E]
	0x021B118C LDR X1, [X10]
	0x021B1190 CBZ X9, 0x21B11B4
	0x021B1194 LDR X10, [X8 + 0xB0]
	0x021B1198 ADD X10, X10, 0x8
	0x021B119C LDUR X11, [X10 - 0x8]
	0x021B11A0 CMP X11, X1
	0x021B11A4 B.EQ 0x21B11C4
	0x021B11A8 SUBS X9, X9, 0x1
	0x021B11AC ADD X10, X10, 0x10
	0x021B11B0 B.NE 0x21B119C
	0x021B11B4 MOV X0, X19
	0x021B11B8 MOV W2, W31
	0x021B11BC BL 0x1C5C788
	0x021B11C0 B 0x21B11D0
	0x021B11C4 LDRSW X9, [X10]
	0x021B11C8 ADD X8, X8, X9, 0x4, LSL
	0x021B11CC ADD X0, X8, 0x138
	0x021B11D0 LDP X8, X1, [X0]
	0x021B11D4 MOV X0, X19
	0x021B11D8 BLR X8
	0x021B11DC CBNZ X20, 0x21B11E8
	0x021B11E0 MOV X0, X23
	0x021B11E4 BL 0x1D2C690
	0x021B11E8 MOV X0, X20
	0x021B11EC BL 0x1C16F18
	0x021B11F0 BL 0x1990590
	0x021B11F4 STP X29, X30, [X31 - 0x60]!
	0x021B11F8 STP X28, X27, [X31 + 0x10]
	0x021B11FC STP X26, X25, [X31 + 0x20]
	0x021B1200 STP X24, X23, [X31 + 0x30]
	0x021B1204 STP X22, X21, [X31 + 0x40]
	0x021B1208 STP X20, X19, [X31 + 0x50]
	0x021B120C ADD X29, X31, 0x0
	0x021B1210 SUB X31, X31, 0x60
	0x021B1214 STUR X2, [X29 - 0x30]
	0x021B1218 MRS X8, 0xC000
	0x021B121C STP X3, X8, [X29 - 0x58]
	0x021B1220 LDR X8, [X8 + 0x28]
	0x021B1224 MOV X23, X4
	0x021B1228 STUR X8, [X29 - 0x8]
	0x021B122C STUR X1, [X29 - 0x28]
	0x021B1230 LDR X24, [X4 + 0x38]
	0x021B1234 STP X1, X0, [X29 - 0x40]
	0x021B1238 CBNZ X24, 0x21B1268
	0x021B123C ADRP X0, 0x1F42000
	0x021B1240 LDR X0, [X0 + 0xE00]
	0x021B1244 BL 0x1C16CF4
	0x021B1248 ADRP X0, 0x1F42000
	0x021B124C LDR X0, [X0 + 0xE18]
	0x021B1250 BL 0x1C16CF4
	0x021B1254 LDR X24, [X23 + 0x38]
	0x021B1258 CBNZ X24, 0x21B1268
	0x021B125C MOV X0, X23
	0x021B1260 BL 0x1C5C6E0
	0x021B1264 LDR X24, [X23 + 0x38]
	0x021B1268 LDR X8, [X24 + 0x30]
	0x021B126C LDR X9, [X24 + 0x10]
	0x021B1270 LDR W26, [X8 + 0xFC]
	0x021B1274 LDR W20, [X9 + 0xFC]
	0x021B1278 STUR X9, [X29 - 0x48]
	0x021B127C ADD X8, X31, 0x0
	0x021B1280 ADD X9, X26, 0xF
	0x021B1284 AND X25, X9, 0x1FFFFFFFF
	0x021B1288 SUB X27, X8, X25
	0x021B128C ADD X31, X27, 0x0
	0x021B1290 ADD X8, X31, 0x0
	0x021B1294 SUB X28, X8, X25
	0x021B1298 ADD X31, X28, 0x0
	0x021B129C ADD X9, X20, 0xF
	0x021B12A0 ADD X8, X31, 0x0
	0x021B12A4 AND X9, X9, 0x1FFFFFFFF
	0x021B12A8 SUB X21, X8, X9
	0x021B12AC ADD X31, X21, 0x0
	0x021B12B0 ADD X8, X31, 0x0
	0x021B12B4 SUB X19, X8, X9

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X3+56]
	009 Move X21, X3
	010 Move W22, W2
	011 Move W19, W1
	012 Move X20, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {26}
	015 Move X0, 0x1F4D000
	016 Move X0, [X0+2976]
	017 Call 0x1C17CF4
	018 Move X0, 0x1F4D000
	019 Move X0, [X0+3368]
	020 Call 0x1C17CF4
	021 Move X8, [X21+56]
	022 Compare X8, 0
	023 JumpIfNotEqual {26}
	024 Move X0, X21
	025 Call 0x1C5D6E0
	026 Move X8, 0x1F4D000
	027 Move X8, [X8+3368]
	028 And W23, W19, 0xFFFF
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move X2, X31
	031 Move X1, [X8]
	032 Move [X31+12], W31
	033 Call Assert.Always, X0, X1
	034 Move X24, 0x1F4D000
	035 Move X24, [X24+2976]
	036 Move X0, [X24]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W8, W23
	042 ShiftRight W8, 29
	043 And W8, W8, 0xFFFFFFF
	044 Add W1, W8, 8
	045 Add X2, X31, 12
	046 Move X0, X20
	047 Move X3, X31
	048 Call DynamicHeap.AllocateInternal, X0, X1, X2
	049 Move X23, X0
	050 Move TEMP, X22
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {63}
	054 Move X0, [X24]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X20
	060 Move X1, X23
	061 Move X2, X31
	062 Call DynamicHeap.InitRoot, X0, X1
	063 Move X0, [X24]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X8, [X21+56]
	069 Move X0, [X8+8]
	070 Move X8, [X0]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move W4, [X31+12]
	073 Move W2, W0
	074 Move X0, X20
	075 Move X1, X23
	076 Move W3, W19
	077 Move X5, X31
	078 Call DynamicHeap.InitObj, X0, X1, X2, X3, X4
	079 Compare X23, 0
	080 JumpIfEqual {93}
	081 Move W8, [X23]
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Or W8, W8, 4
	087 Move [X23+8], W8
	088 Move X0, X23
	089 Move X24, [X31+16]
	090 Move X23, [X31+24]
	091 Move X30, [X31+64]
	092 Return X0
	093 Call 0x1C17F20

Method: System.Void ThrowHeapCorrupted()

Disassembly:
	0x01E81024 MOVZ W8, 0x1
	0x01E81028 STRB W8, [X25 + 0x1DA]
	0x01E8102C LDR X0, [X24]
	0x01E81030 ADD X1, X31, 0x2C
	0x01E81034 STP X31, X31, [X31 + 0x18]
	0x01E81038 STP X23, X22, [X31 + 0x8]
	0x01E8103C BL 0x1C16E04
	0x01E81040 STR X0, [X31 + 0x18]
	0x01E81044 ADD X1, X31, 0x8
	0x01E81048 MOV X0, X21
	0x01E8104C MOV X2, X20
	0x01E81050 MOV X3, X19
	0x01E81054 BL 0x1C16CB0
	0x01E81058 LDP X20, X19, [X31 + 0x60]
	0x01E8105C LDP X22, X21, [X31 + 0x50]
	0x01E81060 LDP X24, X23, [X31 + 0x40]
	0x01E81064 LDP X30, X25, [X31 + 0x30]
	0x01E81068 ADD X31, X31, 0x70
	0x01E8106C RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2273000
	004 Move X0, [X0+2000]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0x227D000
	009 Move X0, [X0+3312]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call Exception..ctor, X0, X1
	015 Move X0, 0x227D000
	016 Move X0, [X0+3320]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void InitObj(Fusion.DynamicHeap* heap, Fusion.DynamicHeap/Object* obj, System.UInt16 type, System.UInt16 array, System.Byte block)

Disassembly:
	0x01E81AA4 STR D10, [X31 - 0x30]!
	0x01E81AA8 STP D9, D8, [X31 + 0x10]
	0x01E81AAC STP X30, X19, [X31 + 0x20]
	0x01E81AB0 MOV X1, X31
	0x01E81AB4 MOV X19, X0
	0x01E81AB8 BL 0x3C32E90
	0x01E81ABC CBZ X0, 0x1E81B18
	0x01E81AC0 MOV X1, X31
	0x01E81AC4 BL 0x3C3F58C
	0x01E81AC8 MOV X0, X19
	0x01E81ACC MOV X1, X31
	0x01E81AD0 MOV V8.16B, V0.16B
	0x01E81AD4 MOV V9.16B, V1.16B
	0x01E81AD8 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {16}
	004 Compare X1, 0
	005 JumpIfEqual {16}
	006 NotImplemented "Instruction LDRH not yet implemented."
	007 Move W9, [X1]
	008 NotImplemented "Instruction STRH not yet implemented."
	009 Move [X1+1], W4
	010 NotImplemented "Instruction STRH not yet implemented."
	011 Or W8, W9, 0x11111111
	012 NotImplemented "Instruction STRH not yet implemented."
	013 Move [X1], W8
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20

Method: System.Void InitRoot(Fusion.DynamicHeap* heap, Fusion.DynamicHeap/Object* obj)

Disassembly:
	0x01E81ADC BL 0x3C32E90
	0x01E81AE0 CBZ X0, 0x1E81B18
	0x01E81AE4 MOV X1, X31
	0x01E81AE8 BL 0x3C3DEB4
	0x01E81AEC LDP S4, S5, [X19 + 0x3C]
	0x01E81AF0 LDR V6, [X19 + 0x44]
	0x01E81AF4 MOV X0, X31
	0x01E81AF8 BL 0x3C2A9FC
	0x01E81AFC FADD S0, S8, S0
	0x01E81B00 FADD S1, S9, S1
	0x01E81B04 LDP X30, X19, [X31 + 0x20]
	0x01E81B08 LDP D9, D8, [X31 + 0x10]
	0x01E81B0C FADD S2, S10, S2
	0x01E81B10 LDR V10, [X31], #0x30
	0x01E81B14 RET
	0x01E81B18 BL 0x1C16F20
	0x01E81B1C B 0x1E81B20
	0x01E81B20 STP X30, X19, [X31 - 0x10]!
	0x01E81B24 MOV X1, X31
	0x01E81B28 MOV X19, X0
	0x01E81B2C BL 0x3C32ECC
	0x01E81B30 CBZ X0, 0x1E81B60
	0x01E81B34 MOV X1, X31
	0x01E81B38 BL 0x3C35734
	0x01E81B3C MOVZ W8, 0x1
	0x01E81B40 LSLV W8, W8, W0
	0x01E81B44 MOV X0, X19
	0x01E81B48 MOV X1, X31
	0x01E81B4C STR W8, [X19 + 0x68]
	0x01E81B50 BL 0x3C32E90
	0x01E81B54 STR X0, [X19 + 0x70]
	0x01E81B58 LDP X30, X19, [X31], #0x10
	0x01E81B5C RET
	0x01E81B60 BL 0x1C16F20
	0x01E81B64 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2559000
	006 Move W8, [X21+468]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x227D000
	014 Move X0, [X0+3376]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+468], W8
	018 Compare X20, 0
	019 JumpIfEqual {47}
	020 Move W8, [X20+120]
	021 Move W1, [X20+124]
	022 Move X0, [X20+112]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, 0x227D000
	025 Move X8, [X8+3376]
	026 Move X2, [X8]
	027 Call Native.DoublePtrArray, X0, X1
	028 Move W8, [X20+120]
	029 Move W1, [X20+124]
	030 Move [X20+112], X0
	031 Move W8, W8
	032 ShiftRight W8, 31
	033 And W8, W8, 0x3FFFFFFF
	034 Move [X20+120], W8
	035 Add W8, W1, 1
	036 Move [X20+124], W8
	037 Move [X0], X19
	038 Compare X19, 0
	039 JumpIfEqual {47}
	040 Move W8, 2
	041 Move [X19], W8
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 
	047 Call 0x1C17F20

Method: System.Void ExpandStack(Fusion.DynamicHeap* heap)

Disassembly:
	0x01E81B68 STP X22, X21, [X31 + 0x10]
	0x01E81B6C STP X20, X19, [X31 + 0x20]
	0x01E81B70 LDR W8, [X0 + 0x20]
	0x01E81B74 MOV X20, X0
	0x01E81B78 STR W8, [X1]
	0x01E81B7C LDR W8, [X0 + 0x44]
	0x01E81B80 LDUR X9, [X0 + 0x3C]
	0x01E81B84 STR W8, [X1 + 0x50]
	0x01E81B88 STR X9, [X1 + 0x48]
	0x01E81B8C LDR X0, [X0 + 0x70]
	0x01E81B90 CBZ X0, 0x1E81C78
	0x01E81B94 MOV X19, X1
	0x01E81B98 MOV W21, W2
	0x01E81B9C ADD X2, X1, 0x1C4
	0x01E81BA0 ADD X1, X1, 0x1B8
	0x01E81BA4 MOV X3, X31
	0x01E81BA8 BL 0x3C40168
	0x01E81BAC MOV X0, X19
	0x01E81BB0 MOV X1, X31
	0x01E81BB4 BL 0x1EED1D4
	0x01E81BB8 LDUR V0, [X20 + 0x2C]
	0x01E81BBC LDR V1, [X20 + 0x34]
	0x01E81BC0 MOVZ W9, 0x28
	0x01E81BC4 UNIMPLEMENTED
	0x01E81BC8 FABS S1, S1
	0x01E81BCC STUR D0, [X19 + 0x54]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2559000
	005 Move W8, [X20+469]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x227D000
	012 Move X0, [X0+3376]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+469], W8
	016 Compare X19, 0
	017 JumpIfEqual {34}
	018 Move X8, 0x227D000
	019 Move X8, [X8+3376]
	020 Move X0, [X19+88]
	021 Move W1, [X19+100]
	022 Move X2, [X8]
	023 Call Native.DoublePtrArray, X0, X1
	024 Move W8, [X19+100]
	025 Move [X19+88], X0
	026 Move W8, W8
	027 ShiftRight W8, 31
	028 And W8, W8, 0x3FFFFFFF
	029 Move [X19+100], W8
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 
	034 Call 0x1C17F20

Method: System.Void CollectGarbage(Fusion.DynamicHeap* heap, System.Void* dynamicRoots, System.Int32 dynamicRootsLength)

Disassembly:
	0x01E7F2BC SUB X31, X31, 0xC0
	0x01E7F2C0 STP X29, X30, [X31 + 0x60]
	0x01E7F2C4 STP X28, X27, [X31 + 0x70]
	0x01E7F2C8 STP X26, X25, [X31 + 0x80]
	0x01E7F2CC STP X24, X23, [X31 + 0x90]
	0x01E7F2D0 STP X22, X21, [X31 + 0xA0]
	0x01E7F2D4 STP X20, X19, [X31 + 0xB0]
	0x01E7F2D8 ADRP X20, 0x255A000
	0x01E7F2DC ADRP X25, 0x227E000
	0x01E7F2E0 LDRB W8, [X20 + 0x1D0]
	0x01E7F2E4 LDR X25, [X25 + 0xBA0]
	0x01E7F2E8 MOV X19, X0
	0x01E7F2EC TBNZ X8, 0x0, 0x1E7F3E8
	0x01E7F2F0 ADRP X0, 0x227E000
	0x01E7F2F4 LDR X0, [X0 + 0xC58]
	0x01E7F2F8 BL 0x1C16CF4
	0x01E7F2FC ADRP X0, 0x227E000
	0x01E7F300 LDR X0, [X0 + 0xC60]
	0x01E7F304 BL 0x1C16CF4
	0x01E7F308 ADRP X0, 0x227E000
	0x01E7F30C LDR X0, [X0 + 0xC68]
	0x01E7F310 BL 0x1C16CF4
	0x01E7F314 ADRP X0, 0x227E000
	0x01E7F318 LDR X0, [X0 + 0xC70]
	0x01E7F31C BL 0x1C16CF4
	0x01E7F320 ADRP X0, 0x227E000
	0x01E7F324 LDR X0, [X0 + 0xC78]
	0x01E7F328 BL 0x1C16CF4
	0x01E7F32C ADRP X0, 0x227E000
	0x01E7F330 LDR X0, [X0 + 0xC80]
	0x01E7F334 BL 0x1C16CF4
	0x01E7F338 ADRP X0, 0x227E000
	0x01E7F33C LDR X0, [X0 + 0xC88]
	0x01E7F340 BL 0x1C16CF4
	0x01E7F344 ADRP X0, 0x227E000
	0x01E7F348 LDR X0, [X0 + 0xC90]
	0x01E7F34C BL 0x1C16CF4
	0x01E7F350 ADRP X0, 0x227E000
	0x01E7F354 LDR X0, [X0 + 0xC98]
	0x01E7F358 BL 0x1C16CF4
	0x01E7F35C ADRP X0, 0x227E000
	0x01E7F360 LDR X0, [X0 + 0xBA0]
	0x01E7F364 BL 0x1C16CF4
	0x01E7F368 ADRP X0, 0x227E000
	0x01E7F36C LDR X0, [X0 + 0xCA0]
	0x01E7F370 BL 0x1C16CF4
	0x01E7F374 ADRP X0, 0x227E000
	0x01E7F378 LDR X0, [X0 + 0xCA8]
	0x01E7F37C BL 0x1C16CF4
	0x01E7F380 ADRP X0, 0x227E000
	0x01E7F384 LDR X0, [X0 + 0xCB0]
	0x01E7F388 BL 0x1C16CF4
	0x01E7F38C ADRP X0, 0x227E000
	0x01E7F390 LDR X0, [X0 + 0xCB8]
	0x01E7F394 BL 0x1C16CF4
	0x01E7F398 ADRP X0, 0x227E000
	0x01E7F39C LDR X0, [X0 + 0xC08]
	0x01E7F3A0 BL 0x1C16CF4
	0x01E7F3A4 ADRP X0, 0x2275000
	0x01E7F3A8 LDR X0, [X0 + 0xE10]
	0x01E7F3AC BL 0x1C16CF4
	0x01E7F3B0 ADRP X0, 0x2275000
	0x01E7F3B4 LDR X0, [X0 + 0xE18]
	0x01E7F3B8 BL 0x1C16CF4
	0x01E7F3BC ADRP X0, 0x2278000
	0x01E7F3C0 LDR X0, [X0 + 0xB70]
	0x01E7F3C4 BL 0x1C16CF4
	0x01E7F3C8 ADRP X0, 0x2275000
	0x01E7F3CC LDR X0, [X0 + 0xE30]
	0x01E7F3D0 BL 0x1C16CF4
	0x01E7F3D4 ADRP X0, 0x227E000
	0x01E7F3D8 LDR X0, [X0 + 0xCC0]
	0x01E7F3DC BL 0x1C16CF4
	0x01E7F3E0 MOVZ W8, 0x1
	0x01E7F3E4 STRB W8, [X20 + 0x1D0]
	0x01E7F3E8 LDR X0, [X25]
	0x01E7F3EC MOVI V0.2D, 0x0
	0x01E7F3F0 STR X31, [X31 + 0x50]
	0x01E7F3F4 STP V0, V0, [X31 + 0x30]
	0x01E7F3F8 LDR W8, [X0 + 0xE0]
	0x01E7F3FC CBNZ W8, 0x1E7F408
	0x01E7F400 BL 0x1C16DFC
	0x01E7F404 LDR X0, [X25]
	0x01E7F408 LDR X8, [X0 + 0xB8]
	0x01E7F40C LDR X8, [X8]
	0x01E7F410 CBNZ X8, 0x1E7F7D8
	0x01E7F414 ADRP X8, 0x227E000
	0x01E7F418 LDR X8, [X8 + 0xC90]
	0x01E7F41C LDR X0, [X8]
	0x01E7F420 BL 0x1C16F10
	0x01E7F424 ADRP X8, 0x227E000
	0x01E7F428 LDR X8, [X8 + 0xC88]
	0x01E7F42C MOV X20, X0
	0x01E7F430 LDR X1, [X8]
	0x01E7F434 BL 0x2AA4804
	0x01E7F438 LDR X0, [X25]
	0x01E7F43C LDR W8, [X0 + 0xE0]
	0x01E7F440 CBNZ W8, 0x1E7F44C
	0x01E7F444 BL 0x1C16DFC
	0x01E7F448 LDR X0, [X25]
	0x01E7F44C LDR X8, [X0 + 0xB8]
	0x01E7F450 STR X20, [X8]
	0x01E7F454 ADRP X8, 0x227E000
	0x01E7F458 LDR X8, [X8 + 0xC98]
	0x01E7F45C LDR X0, [X8]
	0x01E7F460 BL 0x1C16F10
	0x01E7F464 ADRP X8, 0x227E000
	0x01E7F468 LDR X8, [X8 + 0xC80]
	0x01E7F46C MOV X20, X0
	0x01E7F470 LDR X1, [X8]
	0x01E7F474 BL 0x2AF5AE4
	0x01E7F478 LDR X8, [X25]
	0x01E7F47C LDR X8, [X8 + 0xB8]
	0x01E7F480 STR X20, [X8 + 0x8]
	0x01E7F484 CBZ X19, 0x1E7F834
	0x01E7F488 LDR X8, [X19 + 0x18]
	0x01E7F48C CMP W8, 0x1
	0x01E7F490 B.LT 0x1E7F52C
	0x01E7F494 ADRP X26, 0x227E000
	0x01E7F498 ADRP X27, 0x227E000
	0x01E7F49C LDR X26, [X26 + 0xCC0]
	0x01E7F4A0 LDR X27, [X27 + 0xC60]
	0x01E7F4A4 MOV X23, X31
	0x01E7F4A8 AND X8, X8, 0x0
	0x01E7F4AC ADD X24, X19, 0x20
	0x01E7F4B0 CMP X23, W8, UXTW
	0x01E7F4B4 B.CS 0x1E7F8A4
	0x01E7F4B8 LDR X20, [X24, X23, LSL #3]
	0x01E7F4BC MOV X1, X31
	0x01E7F4C0 MOV X0, X20
	0x01E7F4C4 BL 0x3C002C8
	0x01E7F4C8 TBZ X0, 0x0, 0x1E7F850
	0x01E7F4CC LDR X0, [X25]
	0x01E7F4D0 LDR W8, [X0 + 0xE0]
	0x01E7F4D4 CBNZ W8, 0x1E7F4E0
	0x01E7F4D8 BL 0x1C16DFC
	0x01E7F4DC LDR X0, [X25]
	0x01E7F4E0 LDR X8, [X0 + 0xB8]
	0x01E7F4E4 LDR X0, [X26]
	0x01E7F4E8 LDR X21, [X8]
	0x01E7F4EC BL 0x1C16F10
	0x01E7F4F0 MOV X1, X31
	0x01E7F4F4 MOV X22, X0
	0x01E7F4F8 BL 0x33BDD8C
	0x01E7F4FC CBZ X22, 0x1E7F834
	0x01E7F500 STR X20, [X22 + 0x20]
	0x01E7F504 CBZ X21, 0x1E7F834
	0x01E7F508 LDR X3, [X27]
	0x01E7F50C MOV X0, X21
	0x01E7F510 MOV X1, X20
	0x01E7F514 MOV X2, X22
	0x01E7F518 BL 0x2AA5098
	0x01E7F51C LDR W8, [X19 + 0x18]
	0x01E7F520 ADD X23, X23, 0x1
	0x01E7F524 CMP X23, W8, SXTW
	0x01E7F528 B.LT 0x1E7F4B0
	0x01E7F52C LDR X0, [X25]
	0x01E7F530 LDR W8, [X0 + 0xE0]
	0x01E7F534 CBNZ W8, 0x1E7F540
	0x01E7F538 BL 0x1C16DFC
	0x01E7F53C LDR X0, [X25]
	0x01E7F540 LDR X8, [X0 + 0xB8]
	0x01E7F544 LDR X0, [X8]
	0x01E7F548 CBZ X0, 0x1E7F834
	0x01E7F54C ADRP X8, 0x227E000
	0x01E7F550 LDR X8, [X8 + 0xC78]
	0x01E7F554 LDR X1, [X8]
	0x01E7F558 ADD X8, X31, 0x8
	0x01E7F55C BL 0x2AA54BC
	0x01E7F560 LDUR V0, [X31 + 0x8]
	0x01E7F564 LDUR V1, [X31 + 0x18]
	0x01E7F568 LDR X8, [X31 + 0x28]
	0x01E7F56C ADRP X28, 0x227E000
	0x01E7F570 ADRP X29, 0x227E000
	0x01E7F574 LDR X28, [X28 + 0xC70]
	0x01E7F578 LDR X29, [X29 + 0xC58]
	0x01E7F57C MOVZ W26, 0x1
	0x01E7F580 STP V0, V1, [X31 + 0x30]
	0x01E7F584 STR X8, [X31 + 0x50]
	0x01E7F588 ADRP X8, 0x227E000
	0x01E7F58C LDR X8, [X8 + 0xCA8]
	0x01E7F590 LDR X1, [X8]
	0x01E7F594 ADD X0, X31, 0x30
	0x01E7F598 BL 0x2C0A728
	0x01E7F59C TBZ X0, 0x0, 0x1E7F7C4
	0x01E7F5A0 ADRP X8, 0x2275000
	0x01E7F5A4 LDP X19, X20, [X31 + 0x40]
	0x01E7F5A8 LDR X8, [X8 + 0xE30]
	0x01E7F5AC LDR X0, [X8]
	0x01E7F5B0 BL 0x1C16F10
	0x01E7F5B4 ADRP X8, 0x2278000
	0x01E7F5B8 LDR X8, [X8 + 0xB70]
	0x01E7F5BC MOV X21, X0
	0x01E7F5C0 LDR X1, [X8]
	0x01E7F5C4 BL 0x2FDBF14
	0x01E7F5C8 CBZ X20, 0x1E7F83C
	0x01E7F5CC LDR X0, [X20 + 0x20]
	0x01E7F5D0 CBZ X0, 0x1E7F840
	0x01E7F5D4 LDR X8, [X0]
	0x01E7F5D8 LDR X9, [X8 + 0x688]
	0x01E7F5DC LDR X2, [X8 + 0x690]
	0x01E7F5E0 MOVZ W1, 0x34
	0x01E7F5E4 BLR X9
	0x01E7F5E8 MOV X22, X0
	0x01E7F5EC STRH W26, [X20 + 0x14]
	0x01E7F5F0 MOV X0, X19
	0x01E7F5F4 MOV X1, X31
	0x01E7F5F8 BL 0x3C00250
	0x01E7F5FC ADD W8, W0, 0x7
	0x01E7F600 CMP W0, 0x0
	0x01E7F604 CSEL W8, W8, W0, LT
	0x01E7F608 SBFM W8, W8, 0x3, 0x1F
	0x01E7F60C STR W8, [X20 + 0x10]
	0x01E7F610 CBZ X22, 0x1E7F838
	0x01E7F614 LDR W8, [X22 + 0x18]
	0x01E7F618 CMP W8, 0x1
	0x01E7F61C B.LT 0x1E7F758
	0x01E7F620 MOV W27, W31
	0x01E7F624 CMP W27, W8
	0x01E7F628 B.CS 0x1E7F7F8
	0x01E7F62C ADD X8, X22, W27, 0x3, SXTW
	0x01E7F630 LDR X23, [X8 + 0x20]
	0x01E7F634 CBZ X23, 0x1E7F7FC
	0x01E7F638 LDR X8, [X23]
	0x01E7F63C LDR X1, [X8 + 0x260]
	0x01E7F640 LDR X9, [X8 + 0x258]
	0x01E7F644 MOV X0, X23
	0x01E7F648 BLR X9
	0x01E7F64C CBZ X0, 0x1E7F800
	0x01E7F650 MOV X1, X31
	0x01E7F654 BL 0x3396C18
	0x01E7F658 TBZ X0, 0x0, 0x1E7F748
	0x01E7F65C LDR X0, [X25]
	0x01E7F660 LDR W8, [X0 + 0xE0]
	0x01E7F664 CBNZ W8, 0x1E7F670
	0x01E7F668 BL 0x1C16DFC
	0x01E7F66C LDR X0, [X25]
	0x01E7F670 LDR X8, [X0 + 0xB8]
	0x01E7F674 LDR X9, [X23]
	0x01E7F678 LDR X24, [X8]
	0x01E7F67C LDR X1, [X9 + 0x260]
	0x01E7F680 LDR X8, [X9 + 0x258]
	0x01E7F684 MOV X0, X23
	0x01E7F688 BLR X8
	0x01E7F68C CBZ X0, 0x1E7F804
	0x01E7F690 LDR X8, [X0]
	0x01E7F694 LDR X1, [X8 + 0x430]
	0x01E7F698 LDR X9, [X8 + 0x428]
	0x01E7F69C BLR X9
	0x01E7F6A0 MOV X1, X0
	0x01E7F6A4 CBZ X24, 0x1E7F808
	0x01E7F6A8 LDR X2, [X28]
	0x01E7F6AC MOV X0, X24
	0x01E7F6B0 BL 0x2AA528C
	0x01E7F6B4 TBZ X0, 0x0, 0x1E7F748
	0x01E7F6B8 LDR X1, [X29]
	0x01E7F6BC MOV X0, X23
	0x01E7F6C0 BL 0x21A891C
	0x01E7F6C4 CBNZ X0, 0x1E7F748
	0x01E7F6C8 MOV X0, X23
	0x01E7F6CC MOV X1, X31
	0x01E7F6D0 BL 0x3BFFE58
	0x01E7F6D4 ANDS W31, W0, 0x7
	0x01E7F6D8 B.NE 0x1E7F814
	0x01E7F6DC CBZ X21, 0x1E7F810
	0x01E7F6E0 ADRP X9, 0x2275000
	0x01E7F6E4 LDR W12, [X21 + 0x1C]
	0x01E7F6E8 LDR X8, [X21 + 0x10]
	0x01E7F6EC LDR X9, [X9 + 0xE10]
	0x01E7F6F0 ADD W10, W0, 0x7
	0x01E7F6F4 CMP W0, 0x0
	0x01E7F6F8 CSEL W11, W10, W0, LT
	0x01E7F6FC LDR X9, [X9]
	0x01E7F700 ADD W10, W12, 0x1
	0x01E7F704 STR W10, [X21 + 0x1C]
	0x01E7F708 CBZ X8, 0x1E7F80C
	0x01E7F70C LDRSW X10, [X21 + 0x18]
	0x01E7F710 LDR W12, [X8 + 0x18]
	0x01E7F714 SBFM W1, W11, 0x3, 0x1F
	0x01E7F718 CMP W10, W12
	0x01E7F71C B.CS 0x1E7F734
	0x01E7F720 ADD W9, W10, 0x1
	0x01E7F724 ADD X8, X8, X10, 0x2, LSL
	0x01E7F728 STR W9, [X21 + 0x18]
	0x01E7F72C STR W1, [X8 + 0x20]
	0x01E7F730 B 0x1E7F748
	0x01E7F734 LDR X8, [X9 + 0x20]
	0x01E7F738 LDR X8, [X8 + 0xC0]
	0x01E7F73C LDR X2, [X8 + 0x70]
	0x01E7F740 MOV X0, X21
	0x01E7F744 BL 0x2FDC70C
	0x01E7F748 LDR W8, [X22 + 0x18]
	0x01E7F74C ADD W27, W27, 0x1
	0x01E7F750 CMP W27, W8
	0x01E7F754 B.LT 0x1E7F624
	0x01E7F758 CBZ X21, 0x1E7F84C
	0x01E7F75C ADRP X8, 0x2275000
	0x01E7F760 LDR X8, [X8 + 0xE18]
	0x01E7F764 LDR X1, [X8]
	0x01E7F768 MOV X0, X21
	0x01E7F76C BL 0x2FDE4C8
	0x01E7F770 STR X0, [X20 + 0x18]
	0x01E7F774 LDR X0, [X25]
	0x01E7F778 LDR W8, [X0 + 0xE0]
	0x01E7F77C CBNZ W8, 0x1E7F788
	0x01E7F780 BL 0x1C16DFC
	0x01E7F784 LDR X0, [X25]
	0x01E7F788 LDR X8, [X0 + 0xB8]
	0x01E7F78C LDR X0, [X8 + 0x8]
	0x01E7F790 CBZ X0, 0x1E7F844
	0x01E7F794 ADRP X8, 0x227E000
	0x01E7F798 LDR X8, [X8 + 0xC68]
	0x01E7F79C LDRH W1, [X20 + 0x14]
	0x01E7F7A0 LDR X3, [X8]
	0x01E7F7A4 MOV X2, X20
	0x01E7F7A8 BL 0x2AF639C
	0x01E7F7AC LDR X8, [X20 + 0x18]
	0x01E7F7B0 CBZ X8, 0x1E7F848
	0x01E7F7B4 LDR W8, [X8 + 0x18]
	0x01E7F7B8 ADD W8, W26, W8
	0x01E7F7BC ADD W26, W8, 0x1
	0x01E7F7C0 B 0x1E7F588
	0x01E7F7C4 ADRP X8, 0x227E000
	0x01E7F7C8 LDR X8, [X8 + 0xCA0]
	0x01E7F7CC ADD X0, X31, 0x30
	0x01E7F7D0 LDR X1, [X8]
	0x01E7F7D4 BL 0x2C0A83C
	0x01E7F7D8 LDP X20, X19, [X31 + 0xB0]
	0x01E7F7DC LDP X22, X21, [X31 + 0xA0]
	0x01E7F7E0 LDP X24, X23, [X31 + 0x90]
	0x01E7F7E4 LDP X26, X25, [X31 + 0x80]
	0x01E7F7E8 LDP X28, X27, [X31 + 0x70]
	0x01E7F7EC LDP X29, X30, [X31 + 0x60]
	0x01E7F7F0 ADD X31, X31, 0xC0
	0x01E7F7F4 RET
	0x01E7F7F8 BL 0x1C16F28
	0x01E7F7FC BL 0x1C16F20
	0x01E7F800 BL 0x1C16F20
	0x01E7F804 BL 0x1C16F20
	0x01E7F808 BL 0x1C16F20
	0x01E7F80C BL 0x1C16F20
	0x01E7F810 BL 0x1C16F20
	0x01E7F814 ADRP X0, 0x2274000
	0x01E7F818 LDR X0, [X0 + 0xAC8]
	0x01E7F81C BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x255B000
	015 Move W8, [X22+470]
	016 Move W21, W2
	017 Move X20, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x227F000
	024 Move X0, [X0+2976]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+470], W8
	028 Compare X19, 0
	029 JumpIfEqual {361}
	030 Move W8, [X19+84]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Move X9, -20254720
	034 Add X9, X9, 3080
	035 NotImplemented "Instruction ADR not yet implemented."
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Add X10, X10, X11
	038 CallNoReturn X10
	039 Move X23, 0x227F000
	040 Move X23, [X23+2976]
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Move W8, [X19+124]
	048 Move W12, [X19+100]
	049 Add W9, W22, 1
	050 And W13, W9, 0xFFFF
	051 Add W10, W22, 2
	052 Move W11, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CSINC not yet implemented."
	055 NotImplemented "Instruction CSINC not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction STRH not yet implemented."
	058 Move [X19+96], W8
	059 Move X0, [X23]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X19
	065 Call DynamicHeap.ExpandStack, X0
	066 Move W8, [X19+96]
	067 Move W9, [X19+100]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, [X19+88]
	070 Move X1, [X19+112]
	071 Move W2, W8
	072 ShiftRight W2, 29
	073 And W2, W2, 0xFFFFFFF
	074 Move X3, X31
	075 Call Native.MemCpy, X0, X1, X2
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W8, [X19+96]
	078 Move W21, W21
	079 Move W9, [X19+100]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X0, [X23]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X0, X19
	087 Call DynamicHeap.ExpandStack, X0
	088 Move W8, [X19+96]
	089 Add W10, W8, 1
	090 Move [X19+96], W10
	091 Move X9, [X19+88]
	092 Move X11, [X20+8]
	093 Subtract X21, X21, 1
	094 Subtract X11, X11, 8
	095 Move [X9], X11
	096 Move W8, W10
	097 Move W8, 1
	098 Move [X19+84], W8
	099 Move W8, [X19+96]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X20, [X19+48]
	102 Move X9, [X19+64]
	103 Move W23, 0xFFFF
	104 Move [X31], X9
	105 Move X9, [X19+88]
	106 Subtract W8, W8, 1
	107 Move [X19+96], W8
	108 Move X10, [X9]
	109 Compare X10, 0
	110 JumpIfEqual {361}
	111 NotImplemented "Instruction LDRH not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 NotImplemented "Instruction LDRSH not yet implemented."
	114 Add W31, W8, 1
	115 Move W8, [X10]
	116 NotImplemented "Instruction LDRH not yet implemented."
	117 Add X26, X10, 8
	118 NotImplemented "Instruction STRH not yet implemented."
	119 And W9, W8, 0xFFFFFFEF
	120 Move [X10], W9
	121 Move TEMP, X8
	122 And TEMP, TEMP, 4
	123 Compare TEMP, 4
	124 JumpIfEqual {176}
	125 Compare W25, 0
	126 JumpIfEqual {209}
	127 NotImplemented "Instruction LDRH not yet implemented."
	128 Move W28, W31
	129 Move W8, W25
	130 Move [X31+8], X10
	131 Move W21, [X20]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move W24, 1
	134 Add W8, W29, W24
	135 NotImplemented "Instruction LDRSW not yet implemented."
	136 Move X8, [X26]
	137 Compare X8, 0
	138 JumpIfEqual {165}
	139 Subtract X27, X8, 8
	140 NotImplemented "Instruction LDRH not yet implemented."
	141 NotImplemented "Instruction CMP not yet implemented."
	142 NotImplemented "Instruction LDRH not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move W8, [X20]
	145 Compare W8, 0
	146 JumpIfEqual {164}
	147 Move W8, [X19+96]
	148 Move W9, [X19+100]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X8, 0x227F000
	151 Move X8, [X8+2976]
	152 Move X0, [X8]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X0, X19
	158 Call DynamicHeap.ExpandStack, X0
	159 Move W8, [X19+96]
	160 Move X9, [X19+88]
	161 Add W10, W8, 1
	162 Move [X19+96], W10
	163 Move [X9], X27
	164 NotImplemented "Instruction STRH not yet implemented."
	165 Add W24, W24, 1
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move X10, [X31+8]
	168 NotImplemented "Instruction LDRH not yet implemented."
	169 And W9, W8, 0xFFFF
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move X9, [X31]
	172 NotImplemented "Instruction LDRSW not yet implemented."
	173 Add X26, X26, X9
	174 Add W28, W28, 1
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Compare W25, 0
	177 JumpIfEqual {209}
	178 Move X8, [X26]
	179 Compare X8, 0
	180 JumpIfEqual {207}
	181 Subtract X21, X8, 8
	182 NotImplemented "Instruction LDRH not yet implemented."
	183 NotImplemented "Instruction CMP not yet implemented."
	184 NotImplemented "Instruction LDRH not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move W8, [X20]
	187 Compare W8, 0
	188 JumpIfEqual {206}
	189 Move W8, [X19+96]
	190 Move W9, [X19+100]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X8, 0x227F000
	193 Move X8, [X8+2976]
	194 Move X0, [X8]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1C17DFC
	199 Move X0, X19
	200 Call DynamicHeap.ExpandStack, X0
	201 Move W8, [X19+96]
	202 Move X9, [X19+88]
	203 Add W10, W8, 1
	204 Move [X19+96], W10
	205 Move [X9], X21
	206 NotImplemented "Instruction STRH not yet implemented."
	207 Subtract X25, X25, 1
	208 Add X26, X26, 8
	209 Move W8, [X19+96]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X8, -20516864
	212 Move V0, [X8+3776]
	213 Move W8, 2
	214 Move [X19+84], W8
	215 Move [X19+76], D0
	216 Move W8, [X19+76]
	217 Move W9, [X19+32]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X20, 0x227F000
	220 Move W11, [X19+80]
	221 Move W10, [X19+104]
	222 Move X20, [X20+2976]
	223 Move W21, 72
	224 Move W23, 48
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move X9, [X19+24]
	227 Move X24, [X9]
	228 Compare X24, 0
	229 JumpIfEqual {361}
	230 Move X8, [X24+24]
	231 NotImplemented "Instruction NOP not yet implemented."
	232 NotImplemented "Instruction SMADDL not yet implemented."
	233 Compare X25, 0
	234 JumpIfEqual {361}
	235 Move W8, [X25+60]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X0, [X20]
	238 NotImplemented "Instruction LDRSW not yet implemented."
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {245}
	242 Call 0x1C17DFC
	243 Move W8, [X25+60]
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Move X8, [X19+40]
	246 NotImplemented "Instruction NOP not yet implemented."
	247 NotImplemented "Instruction MADD not yet implemented."
	248 Compare X26, 0
	249 JumpIfEqual {361}
	250 Move W27, W31
	251 Move W8, [X26+36]
	252 Move X9, [X25+40]
	253 Multiply W8, W8, W27
	254 Add X28, X9, W8
	255 NotImplemented "Instruction LDRH not yet implemented."
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move W8, [X28]
	258 Move TEMP, X8
	259 And TEMP, TEMP, 1
	260 Compare TEMP, 1
	261 JumpIfNotEqual {295}
	262 Move TEMP, X8
	263 And TEMP, TEMP, 2
	264 Compare TEMP, 2
	265 JumpIfEqual {362}
	266 Move TEMP, X8
	267 And TEMP, TEMP, 16
	268 Compare TEMP, 16
	269 JumpIfEqual {289}
	270 Move W8, [X19+96]
	271 Move W9, [X19+100]
	272 NotImplemented "Instruction CMP not yet implemented."
	273 Move X0, [X20]
	274 Move W8, [X0+224]
	275 Compare W8, 0
	276 JumpIfNotEqual {278}
	277 Call 0x1C17DFC
	278 Move X0, X19
	279 Call DynamicHeap.ExpandStack, X0
	280 Move W8, [X19+96]
	281 Move X9, [X19+88]
	282 Add W10, W8, 1
	283 Move [X19+96], W10
	284 Move [X9], X28
	285 Compare X28, 0
	286 JumpIfEqual {361}
	287 Move W8, [X28]
	288 Or W8, W8, 32
	289 Compare X28, 0
	290 JumpIfEqual {361}
	291 Move W8, [X28]
	292 NotImplemented "Instruction STRH not yet implemented."
	293 And W8, W8, 0xFFFFFFEF
	294 Move [X28], W8
	295 Move W8, [X25+60]
	296 Add W27, W27, 1
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Move W8, [X19+80]
	299 Move W10, [X19+104]
	300 Add W11, W8, 1
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move [X19+80], W11
	303 Move W8, [X19+76]
	304 Move W9, [X19+32]
	305 Add W8, W8, 1
	306 Move W11, W31
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Move [X19+76], W8
	309 Move [X19+80], W31
	310 Move W8, 3
	311 Move [X19+84], W8
	312 Move W8, [X19+96]
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Move X22, 0x227F000
	315 Move X22, [X22+2976]
	316 Move X9, [X19+88]
	317 Subtract W8, W8, 1
	318 Move [X19+96], W8
	319 Move X20, [X9]
	320 Move W21, [X20]
	321 Move TEMP, X21
	322 And TEMP, TEMP, 16
	323 Compare TEMP, 16
	324 JumpIfEqual {341}
	325 Move W25, [X20+7]
	326 NotImplemented "Instruction LDURH not yet implemented."
	327 NotImplemented "Instruction LDUR not yet implemented."
	328 Move [X20], X31
	329 Move X0, [X22]
	330 Move W8, [X0+224]
	331 Compare W8, 0
	332 JumpIfNotEqual {334}
	333 Call 0x1C17DFC
	334 NotImplemented "Instruction BFM not yet implemented."
	335 NotImplemented "Instruction BFM not yet implemented."
	336 NotImplemented "Instruction BFM not yet implemented."
	337 Move X0, X19
	338 Move X1, X20
	339 Move X2, X21
	340 Call DynamicHeap.FreeInternal, X0, X1, X2
	341 Move W8, [X20]
	342 And W8, W8, 0xFFFFFFEF
	343 Move [X20], W8
	344 Move W8, [X19+96]
	345 NotImplemented "Instruction CMP not yet implemented."
	346 Move [X19+84], W31
	347 Move X20, [X31+96]
	348 Move X19, [X31+104]
	349 Move X22, [X31+80]
	350 Move X21, [X31+88]
	351 Move X24, [X31+64]
	352 Move X23, [X31+72]
	353 Move X26, [X31+48]
	354 Move X25, [X31+56]
	355 Move X28, [X31+32]
	356 Move X27, [X31+40]
	357 Move X29, [X31+16]
	358 Move X30, [X31+24]
	359 Add X31, X31, 112
	360 Return 
	361 Call 0x1C17F20
	362 Move X0, [X20]
	363 Call 0x19913D0
	364 Call DynamicHeap.ThrowHeapCorrupted

Method: System.Int32 GetBin(System.Int32 size)

Disassembly:
	0x01E80B58 LDP X20, X19, [X31 + 0x10]
	0x01E80B5C LDP X30, X21, [X31], #0x20
	0x01E80B60 RET
	0x01E80B64 BL 0x1C16F20
	0x01E80B68 STR X30, [X31 - 0x20]!
	0x01E80B6C STP X20, X19, [X31 + 0x10]
	0x01E80B70 ADRP X20, 0x2559000
	0x01E80B74 LDRB W8, [X20 + 0x1D5]
	0x01E80B78 MOV X19, X0
	0x01E80B7C TBNZ X8, 0x0, 0x1E80B94
	0x01E80B80 ADRP X0, 0x227D000
	0x01E80B84 LDR X0, [X0 + 0xD30]
	0x01E80B88 BL 0x1C16CF4
	0x01E80B8C MOVZ W8, 0x1
	0x01E80B90 STRB W8, [X20 + 0x1D5]
	0x01E80B94 CBZ X19, 0x1E80BCC
	0x01E80B98 ADRP X8, 0x227D000
	0x01E80B9C LDR X8, [X8 + 0xD30]
	0x01E80BA0 LDR X0, [X19 + 0x58]
	0x01E80BA4 LDR W1, [X19 + 0x64]
	0x01E80BA8 LDR X2, [X8]
	0x01E80BAC BL 0x2221BAC
	0x01E80BB0 LDR W8, [X19 + 0x64]
	0x01E80BB4 STR X0, [X19 + 0x58]
	0x01E80BB8 UBFM W8, W8, 0x1F, 0x1E
	0x01E80BBC STR W8, [X19 + 0x64]
	0x01E80BC0 LDP X20, X19, [X31 + 0x10]
	0x01E80BC4 LDR X30, [X31], #0x20
	0x01E80BC8 RET
	0x01E80BCC BL 0x1C16F20
	0x01E80BD0 ADD W8, W0, 0x7
	0x01E80BD4 ADD W9, W0, 0xE
	0x01E80BD8 CMP W8, 0x0
	0x01E80BDC CSEL W8, W9, W8, LT
	0x01E80BE0 SBFM W0, W8, 0x3, 0x1F
	0x01E80BE4 RET
	0x01E80BE8 STP X30, X21, [X31 - 0x20]!
	0x01E80BEC STP X20, X19, [X31 + 0x10]
	0x01E80BF0 ADRP X21, 0x2559000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255A000
	006 Move X20, 0x227E000
	007 Move W8, [X21+471]
	008 Move X20, [X20+2976]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227E000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+471], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add W8, W19, 7
	025 Add W9, W19, 14
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction SBFM not yet implemented."
	030 Move X8, [X20]
	031 Subtract W19, W0, 1
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move W0, W19
	038 Call DynamicHeap.BitScan, X0
	039 Add W8, W0, 30
	040 NotImplemented "Instruction LSRV not yet implemented."
	041 NotImplemented "Instruction BFM not yet implemented."
	042 Subtract W0, W8, 3
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Int32 WordCount(System.Int32 size)

Disassembly:
	0x01E81BD0 STR S1, [X19 + 0x5C]
	0x01E81BD4 LDR W8, [X20 + 0x20]
	0x01E81BD8 CMP W8, 0x2
	0x01E81BDC MOVZ W8, 0x24
	0x01E81BE0 CSEL X8, X8, X9, EQ
	0x01E81BE4 LDR V0, [X20, X8, LSL]

ISIL:
	001 Add W8, W0, 7
	002 Add W9, W0, 14
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 NotImplemented "Instruction SBFM not yet implemented."
	006 Return X0

Method: System.Int32 BitScan(System.UInt32 v)

Disassembly:
	0x01E81BE8 FABS S0, S0
	0x01E81BEC STR S0, [X19 + 0x60]
	0x01E81BF0 LDR V0, [X20 + 0x38]
	0x01E81BF4 STR X20, [X19 + 0x70]
	0x01E81BF8 STR W21, [X19 + 0x7C]
	0x01E81BFC STR S0, [X19 + 0x64]
	0x01E81C00 LDR W8, [X20 + 0x68]
	0x01E81C04 STR W8, [X19 + 0x78]
	0x01E81C08 LDR X21, [X20 + 0x48]
	0x01E81C0C CBZ X21, 0x1E81C78
	0x01E81C10 ADRP X22, 0x2558000
	0x01E81C14 LDRB W8, [X22 + 0x22A]
	0x01E81C18 CBNZ W8, 0x1E81C30
	0x01E81C1C ADRP X0, 0x227C000
	0x01E81C20 LDR X0, [X0 + 0xD58]
	0x01E81C24 BL 0x1C16CF4
	0x01E81C28 MOVZ W8, 0x1
	0x01E81C2C STRB W8, [X22 + 0x22A]
	0x01E81C30 ADRP X8, 0x227C000
	0x01E81C34 LDR X8, [X8 + 0xD58]
	0x01E81C38 MOV X0, X21
	0x01E81C3C MOV W1, W31
	0x01E81C40 LDR X2, [X8]
	0x01E81C44 BL 0x22275E4
	0x01E81C48 LDR W8, [X20 + 0x50]
	0x01E81C4C LDR W9, [X0]
	0x01E81C50 STRB W31, [X19 + 0x1B4]
	0x01E81C54 LDP X22, X21, [X31 + 0x10]
	0x01E81C58 ADD W8, W8, 0x1
	0x01E81C5C LSRV W8, W9, W8
	0x01E81C60 ANDS W31, W8, 0x1
	0x01E81C64 CSET W8, EQ
	0x01E81C68 STRB W8, [X19 + 0x68]
	0x01E81C6C LDP X20, X19, [X31 + 0x20]
	0x01E81C70 LDR X30, [X31], #0x30
	0x01E81C74 RET
	0x01E81C78 BL 0x1C16F20
	0x01E81C7C STR X30, [X31 - 0x20]!
	0x01E81C80 STP X20, X19, [X31 + 0x10]
	0x01E81C84 MOV W20, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2559000
	006 Move X20, 0x227D000
	007 Move W8, [X21+472]
	008 Move X20, [X20+2976]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227D000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+472], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8+16]
	027 Compare X8, 0
	028 JumpIfEqual {49}
	029 Move W9, W19
	030 Move W9, W9
	031 Move W9, W9
	032 Move W10, [X8+24]
	033 Move W9, W9
	034 Move W11, 0xACDD
	035 Move W9, W9
	036 NotImplemented "Instruction MOVK not yet implemented."
	037 Multiply W9, W9, W11
	038 Move W9, W9
	039 ShiftRight W9, 27
	040 And W9, W9, 0x7FFFFFFF
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Add X8, X8, W9
	043 Move W0, [X8+32]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1C17F20
	050 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x01E81C88 MOV X1, X31
	0x01E81C8C MOV X19, X0
	0x01E81C90 BL 0x3C32ECC
	0x01E81C94 CBZ X0, 0x1E81CBC
	0x01E81C98 MOV W1, W20
	0x01E81C9C MOV X2, X31
	0x01E81CA0 BL 0x3C35770
	0x01E81CA4 MOVZ W8, 0x1
	0x01E81CA8 LSLV W8, W8, W20
	0x01E81CAC STR W8, [X19 + 0x68]
	0x01E81CB0 LDP X20, X19, [X31 + 0x10]
	0x01E81CB4 LDR X30, [X31], #0x20
	0x01E81CB8 RET
	0x01E81CBC BL 0x1C16F20
	0x01E81CC0 SUB X31, X31, 0x110
	0x01E81CC4 STP D15, D14, [X31 + 0xA0]
	0x01E81CC8 STP D13, D12, [X31 + 0xB0]
	0x01E81CCC STP D11, D10, [X31 + 0xC0]
	0x01E81CD0 STP D9, D8, [X31 + 0xD0]
	0x01E81CD4 STP X29, X30, [X31 + 0xE0]
	0x01E81CD8 STP X22, X21, [X31 + 0xF0]
	0x01E81CDC STP X20, X19, [X31 + 0x100]
	0x01E81CE0 MOVI V0.2D, 0x0
	0x01E81CE4 MOV X19, X0
	0x01E81CE8 STP V0, V0, [X31 + 0x80]
	0x01E81CEC STP V0, V0, [X31 + 0x60]
	0x01E81CF0 LDP S10, S8, [X0 + 0x58]
	0x01E81CF4 LDR X0, [X0 + 0x48]
	0x01E81CF8 LDP S11, S9, [X19 + 0x60]
	0x01E81CFC CBZ X0, 0x1E81DB4
	0x01E81D00 LDRB W8, [X0 + 0x30]
	0x01E81D04 TBNZ X8, 0x3, 0x1E81DB4
	0x01E81D08 MOV X1, X31
	0x01E81D0C BL 0x1E73930
	0x01E81D10 TBZ X0, 0x0, 0x1E81DB4
	0x01E81D14 LDR X20, [X19 + 0x48]
	0x01E81D18 CBZ X20, 0x1E81EC4
	0x01E81D1C ADRP X21, 0x2558000
	0x01E81D20 LDRB W8, [X21 + 0x22B]
	0x01E81D24 CBNZ W8, 0x1E81D3C
	0x01E81D28 ADRP X0, 0x227C000
	0x01E81D2C LDR X0, [X0 + 0xD58]
	0x01E81D30 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2559000
	007 Move X20, 0x227D000
	008 Move X21, 0x2273000
	009 Move X19, 0x227D000
	010 Move W8, [X22+473]
	011 Move X20, [X20+2976]
	012 Move X21, [X21+1560]
	013 Move X19, [X19+3384]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x2273000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0x227D000
	022 Move X0, [X0+2976]
	023 Call 0x1C17CF4
	024 Move X0, 0x227D000
	025 Move X0, [X0+3384]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+473], W8
	029 Move X8, [X20]
	030 Move W1, 32
	031 Move X8, [X8+184]
	032 Move [X8], X31
	033 Move X8, [X20]
	034 Move X8, [X8+184]
	035 Move [X8+8], X31
	036 Move X0, [X21]
	037 Call 0x1C17D6C
	038 Move X1, [X19]
	039 Move X2, X31
	040 Move X19, X0
	041 Call RuntimeHelpers.InitializeArray, X0, X1
	042 Move X8, [X20]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X8, [X8+184]
	046 Move [X8+16], X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+48]
	050 Return 

