Type: Fusion.SimulationMessageEnvelope

Method: System.Int32 WriteInternal(Fusion.SimulationMessageEnvelope* envelope, T* buffer)

Disassembly:
	0x022564A4 MOV X1, X0
	0x022564A8 LDR X8, [X22]
	0x022564AC LDRH W9, [X8 + 0x12E]
	0x022564B0 CBZ X9, 0x22564D4
	0x022564B4 LDR X10, [X8 + 0xB0]
	0x022564B8 ADD X10, X10, 0x8
	0x022564BC LDUR X11, [X10 - 0x8]
	0x022564C0 CMP X11, X1
	0x022564C4 B.EQ 0x22564E4
	0x022564C8 SUBS X9, X9, 0x1
	0x022564CC ADD X10, X10, 0x10
	0x022564D0 B.NE 0x22564BC
	0x022564D4 MOV X0, X22
	0x022564D8 MOV W2, W31
	0x022564DC BL 0x1C5C788
	0x022564E0 B 0x22564F0
	0x022564E4 LDRSW X9, [X10]
	0x022564E8 ADD X8, X8, X9, 0x4, LSL
	0x022564EC ADD X0, X8, 0x138
	0x022564F0 LDP X9, X2, [X0]
	0x022564F4 ADD X8, X31, 0x1B0
	0x022564F8 MOV X0, X22
	0x022564FC MOV W1, W24
	0x02256500 BLR X9
	0x02256504 LDP V0, V1, [X31 + 0x1B0]
	0x02256508 LDUR V2, [X25 + 0x4C]
	0x0225650C LDP V3, V4, [X31 + 0x150]
	0x02256510 LDUR V5, [X26 + 0xDC]
	0x02256514 STP V0, V1, [X31 + 0x120]
	0x02256518 STUR V2, [X26 + 0xAC]
	0x0225651C STP V3, V4, [X31 + 0x180]
	0x02256520 STUR V5, [X25 + 0x1C]
	0x02256524 LDR X8, [X19 + 0x38]
	0x02256528 LDR X1, [X8 + 0x8]
	0x0225652C LDRB W8, [X1 + 0x135]
	0x02256530 TBNZ X8, 0x0, 0x2256540
	0x02256534 MOV X0, X1
	0x02256538 BL 0x1C5C684
	0x0225653C MOV X1, X0
	0x02256540 LDP V0, V1, [X31 + 0x180]
	0x02256544 LDUR V2, [X25 + 0x1C]
	0x02256548 STP V0, V1, [X31 + 0x30]
	0x0225654C STUR V2, [X31 + 0x4C]
	0x02256550 LDR X8, [X22]
	0x02256554 LDRH W9, [X8 + 0x12E]
	0x02256558 CBZ X9, 0x225657C
	0x0225655C LDR X10, [X8 + 0xB0]
	0x02256560 ADD X10, X10, 0x8
	0x02256564 LDUR X11, [X10 - 0x8]
	0x02256568 CMP X11, X1
	0x0225656C B.EQ 0x225658C
	0x02256570 SUBS X9, X9, 0x1
	0x02256574 ADD X10, X10, 0x10
	0x02256578 B.NE 0x2256564
	0x0225657C MOVZ W2, 0x1
	0x02256580 MOV X0, X22
	0x02256584 BL 0x1C5C788
	0x02256588 B 0x225659C
	0x0225658C LDR W9, [X10]
	0x02256590 ADD W9, W9, 0x1
	0x02256594 ADD X8, X8, W9, 0x4, SXTW
	0x02256598 ADD X0, X8, 0x138
	0x0225659C LDP V0, V1, [X31 + 0x30]
	0x022565A0 LDUR V2, [X31 + 0x4C]
	0x022565A4 LDR X8, [X0]
	0x022565A8 ADD X2, X31, 0x1B0
	0x022565AC STP V0, V1, [X31 + 0x1B0]
	0x022565B0 STUR V2, [X25 + 0x4C]
	0x022565B4 LDR X3, [X0 + 0x8]
	0x022565B8 MOV X0, X22
	0x022565BC MOV W1, W24
	0x022565C0 BLR X8
	0x022565C4 LDUR V0, [X26 + 0xAC]
	0x022565C8 LDP V2, V1, [X31 + 0x120]
	0x022565CC STUR V0, [X26 + 0x7C]
	0x022565D0 STP V2, V1, [X31 + 0xF0]
	0x022565D4 LDR X8, [X19 + 0x38]
	0x022565D8 LDR X1, [X8 + 0x8]
	0x022565DC LDRB W8, [X1 + 0x135]
	0x022565E0 TBNZ X8, 0x0, 0x22565F0
	0x022565E4 MOV X0, X1
	0x022565E8 BL 0x1C5C684
	0x022565EC MOV X1, X0
	0x022565F0 LDP V0, V1, [X31 + 0xF0]
	0x022565F4 LDUR V2, [X26 + 0x7C]
	0x022565F8 STP V0, V1, [X31]
	0x022565FC STUR V2, [X31 + 0x1C]
	0x02256600 LDR X8, [X22]
	0x02256604 LDRH W9, [X8 + 0x12E]
	0x02256608 CBZ X9, 0x225662C
	0x0225660C LDR X10, [X8 + 0xB0]
	0x02256610 ADD X10, X10, 0x8
	0x02256614 LDUR X11, [X10 - 0x8]
	0x02256618 CMP X11, X1
	0x0225661C B.EQ 0x225663C
	0x02256620 SUBS X9, X9, 0x1
	0x02256624 ADD X10, X10, 0x10
	0x02256628 B.NE 0x2256614
	0x0225662C MOVZ W2, 0x1
	0x02256630 MOV X0, X22
	0x02256634 BL 0x1C5C788
	0x02256638 B 0x225664C
	0x0225663C LDR W9, [X10]
	0x02256640 ADD W9, W9, 0x1
	0x02256644 ADD X8, X8, W9, 0x4, SXTW
	0x02256648 ADD X0, X8, 0x138
	0x0225664C LDP V0, V1, [X31]
	0x02256650 LDUR V2, [X31 + 0x1C]
	0x02256654 LDR X8, [X0]
	0x02256658 ADD X2, X31, 0x1B0
	0x0225665C STP V0, V1, [X31 + 0x1B0]
	0x02256660 STUR V2, [X25 + 0x4C]
	0x02256664 LDR X3, [X0 + 0x8]
	0x02256668 MOV X0, X22
	0x0225666C MOV W1, W23
	0x02256670 BLR X8
	0x02256674 MOV W27, W31
	0x02256678 ADD W23, W23, 0x1
	0x0225667C CMP W23, W20
	0x02256680 B.NE 0x2256228
	0x02256684 TBZ X27, 0x0, 0x225621C
	0x02256688 ADD X31, X31, 0x1E0
	0x0225668C LDP X20, X19, [X31 + 0x50]
	0x02256690 LDP X22, X21, [X31 + 0x40]
	0x02256694 LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+56]
	008 Move X20, X2
	009 Move X19, X1
	010 Move X21, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {24}
	013 Move X0, 0x1EA5000
	014 Move X0, [X0+3176]
	015 Call 0x1C17CF4
	016 Move X0, 0x1EA1000
	017 Move X0, [X0+3648]
	018 Call 0x1C17CF4
	019 Move X8, [X20+56]
	020 Compare X8, 0
	021 JumpIfNotEqual {24}
	022 Move X0, X20
	023 Call 0x1C5D6E0
	024 Compare X21, 0
	025 JumpIfEqual {152}
	026 Move X8, [X21+8]
	027 Compare X8, 0
	028 JumpIfEqual {152}
	029 Move X9, [X20+56]
	030 Move W1, [X8+12]
	031 Move W2, 10
	032 Move X0, X19
	033 Move X3, [X9+16]
	034 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	035 Move X8, [X21+8]
	036 Compare X8, 0
	037 JumpIfEqual {152}
	038 Move X9, [X20+56]
	039 Move W1, [X8]
	040 Move W2, 16
	041 Move X0, X19
	042 Move X3, [X9+16]
	043 Call NetBitBuffer.WriteInt32VarLength, X0, X1, X2
	044 Move X8, [X21+8]
	045 Compare X8, 0
	046 JumpIfEqual {152}
	047 Move X9, 0x1EA1000
	048 Move X9, [X9+3648]
	049 Move W22, [X8+4]
	050 Move X0, [X9]
	051 Move W9, [X0+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X8, [X20+56]
	056 Move X0, X19
	057 Move X1, X22
	058 Move X2, [X8+24]
	059 Call 0x226F6B0
	060 Move X8, [X21+8]
	061 Compare X8, 0
	062 JumpIfEqual {152}
	063 Move X9, [X20+56]
	064 Move W1, [X8+24]
	065 Move X0, X19
	066 Move X2, [X9+24]
	067 Call 0x226F6B0
	068 Move X8, [X21+8]
	069 Compare X8, 0
	070 JumpIfEqual {152}
	071 Move W23, [X8+20]
	072 Move W8, 0xFFFD
	073 Move W2, 1
	074 Move X0, X19
	075 And X22, X23, X8
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CSET not yet implemented."
	078 Move X3, X31
	079 Call NetBitBuffer.Write, X0, X1, X2
	080 Compare W22, 0
	081 JumpIfEqual {107}
	082 Move W2, 16
	083 Move X0, X19
	084 Move X1, X22
	085 Move X3, X31
	086 Call NetBitBuffer.Write, X0, X1, X2
	087 Move TEMP, X23
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {107}
	091 NotImplemented "Instruction SBFM not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CSET not yet implemented."
	094 Move W2, 1
	095 Move X0, X19
	096 Move X3, X31
	097 Call NetBitBuffer.Write, X0, X1, X2
	098 Compare W22, 0
	099 JumpIfEqual {107}
	100 Move X1, W22
	101 Move TEMP, 11
	102 Not TEMP
	103 Move W2, TEMP
	104 Move X0, X19
	105 Move X3, X31
	106 Call NetBitBuffer.Write, X0, X1, X2
	107 Move X8, [X21+8]
	108 Compare X8, 0
	109 JumpIfEqual {152}
	110 Move W9, [X8+20]
	111 Move TEMP, X9
	112 And TEMP, TEMP, 8
	113 Compare TEMP, 8
	114 JumpIfEqual {124}
	115 Move X8, [X20+56]
	116 Move X1, [X21]
	117 Move W2, 16
	118 Move X0, X19
	119 Move X3, [X8+48]
	120 Call NetBitBuffer.WriteUInt64VarLength, X0, X1, X2
	121 Move X8, [X21+8]
	122 Compare X8, 0
	123 JumpIfEqual {152}
	124 Move W23, [X8+12]
	125 Move W22, [X19+80]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X8, 0x1EA5000
	128 Move X8, [X8+3176]
	129 Move X0, [X8]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move W0, W23
	135 Move X1, X31
	136 Call Maths.BytesRequiredForBits, X0
	137 Move X8, [X20+56]
	138 Move X9, [X21+8]
	139 Move W2, W0
	140 Move X0, X19
	141 Move X3, [X8+64]
	142 Add X1, X9, 28
	143 Call NetBitBuffer.WriteBytesAligned, X0, X1, X2
	144 Move W0, W22
	145 Move X20, [X31+32]
	146 Move X19, [X31+40]
	147 Move X22, [X31+16]
	148 Move X21, [X31+24]
	149 Move X30, [X31+48]
	150 Move X23, [X31+56]
	151 Return X0
	152 Call 0x1C17F20

Method: System.Void Write(Fusion.SimulationMessageEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer)

Disassembly:
	0x01EDAC5C LDR X0, [X19 + 0xF8]
	0x01EDAC60 CBZ X0, 0x1EDAD60
	0x01EDAC64 MOV X1, X31
	0x01EDAC68 BL 0x1E92770
	0x01EDAC6C LDR X0, [X19 + 0x100]
	0x01EDAC70 CBZ X0, 0x1EDAD60
	0x01EDAC74 MOV X1, X31
	0x01EDAC78 BL 0x1E92770
	0x01EDAC7C LDR X0, [X19 + 0x128]
	0x01EDAC80 CBZ X0, 0x1EDAD60
	0x01EDAC84 MOV X1, X31
	0x01EDAC88 BL 0x1E92770
	0x01EDAC8C STRB W31, [X19 + 0x148]
	0x01EDAC90 STP X31, X31, [X19 + 0x138]
	0x01EDAC94 STRB W31, [X19 + 0x120]
	0x01EDAC98 STP X31, X31, [X19 + 0x110]
	0x01EDAC9C STRB W31, [X19 + 0x188]
	0x01EDACA0 STP X31, X31, [X19 + 0x178]
	0x01EDACA4 STRB W31, [X19 + 0x1A0]
	0x01EDACA8 STP X31, X31, [X19 + 0x190]
	0x01EDACAC STP X31, X31, [X19 + 0x1A8]
	0x01EDACB0 STRB W31, [X19 + 0x1B8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2500000
	007 Move X22, 0x2227000
	008 Move W8, [X21+1348]
	009 Move X22, [X22+368]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2227000
	017 Move X0, [X0+368]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1348], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x22564A4, X0, X1
	030 Return 

Method: System.Int32 GetBitCount(Fusion.SimulationMessageEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer)

Disassembly:
	0x01EDACB4 ADRP X21, 0x24FE000
	0x01EDACB8 LDRB W8, [X21 + 0xF19]
	0x01EDACBC CBNZ W8, 0x1EDACD4
	0x01EDACC0 ADRP X0, 0x2221000
	0x01EDACC4 LDR X0, [X0 + 0x708]
	0x01EDACC8 BL 0x1C16CF4
	0x01EDACCC MOVZ W8, 0x1
	0x01EDACD0 STRB W8, [X21 + 0xF19]
	0x01EDACD4 MOVZ W21, 0x1
	0x01EDACD8 STR X31, [X19 + 0x168]
	0x01EDACDC STRB W21, [X19 + 0x170]
	0x01EDACE0 ADRP X8, 0x2221000
	0x01EDACE4 LDR X8, [X8 + 0x708]
	0x01EDACE8 LDR X0, [X8]
	0x01EDACEC LDR W8, [X0 + 0xE0]
	0x01EDACF0 CBNZ W8, 0x1EDACF8
	0x01EDACF4 BL 0x1C16DFC
	0x01EDACF8 MOV X0, X31
	0x01EDACFC BL 0x364BF5C
	0x01EDAD00 STR X0, [X19 + 0x160]
	0x01EDAD04 ADD X8, X19, 0x1EC
	0x01EDAD08 ADD X9, X19, 0x1F4
	0x01EDAD0C AND X1, X20, 0x0
	0x01EDAD10 MOV X0, X19
	0x01EDAD14 STR X31, [X19 + 0x1C0]
	0x01EDAD18 STR W31, [X19 + 0x1C8]
	0x01EDAD1C STR X31, [X9]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2500000
	007 Move X21, 0x2227000
	008 Move W8, [X22+1349]
	009 Move X21, [X21+376]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2227000
	017 Move X0, [X0+376]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1349], W8
	021 Move W20, [X20+80]
	022 Move X2, [X21]
	023 Add X1, X31, 8
	024 Move X0, X19
	025 Move [X31+8], W20
	026 Call SimulationMessageEnvelope.WriteInternal, X0, X1
	027 Move W8, [X31+8]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Subtract W0, W8, W20
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+48]
	034 Return X0

Method: Fusion.SimulationMessageEnvelope* Read(Fusion.Simulation sim, Fusion.Sockets.NetBitBuffer* buffer)

Disassembly:
	0x01EDAD20 STR X31, [X8]
	0x01EDAD24 BL 0x1EDAD64
	0x01EDAD28 MOV X0, X19
	0x01EDAD2C MOV V0.16B, V10.16B
	0x01EDAD30 MOV V1.16B, V9.16B
	0x01EDAD34 MOV V2.16B, V8.16B
	0x01EDAD38 BL 0x1EDAEF4
	0x01EDAD3C MOV X0, X19
	0x01EDAD40 BL 0x1EDB020
	0x01EDAD44 STRB W21, [X19 + 0x1E8]
	0x01EDAD48 LDP X20, X19, [X31 + 0x30]
	0x01EDAD4C LDP X22, X21, [X31 + 0x20]
	0x01EDAD50 LDR X30, [X31 + 0x18]
	0x01EDAD54 LDP D9, D8, [X31 + 0x8]
	0x01EDAD58 LDR V10, [X31], #0x40
	0x01EDAD5C RET
	0x01EDAD60 BL 0x1C16F20
	0x01EDAD64 STR D8, [X31 - 0x30]!
	0x01EDAD68 STR X30, [X31 + 0x8]
	0x01EDAD6C STP X22, X21, [X31 + 0x10]
	0x01EDAD70 STP X20, X19, [X31 + 0x20]
	0x01EDAD74 LDR W8, [X0 + 0x130]
	0x01EDAD78 MOV X20, X1
	0x01EDAD7C CMP W8, W20
	0x01EDAD80 B.NE 0x1EDAD98
	0x01EDAD84 LDP X20, X19, [X31 + 0x20]
	0x01EDAD88 LDP X22, X21, [X31 + 0x10]
	0x01EDAD8C LDR X30, [X31 + 0x8]
	0x01EDAD90 LDR V8, [X31], #0x30
	0x01EDAD94 RET
	0x01EDAD98 AND X1, X20, 0x0
	0x01EDAD9C MOV X19, X0
	0x01EDADA0 BL 0x1EDBB78
	0x01EDADA4 STR W20, [X19 + 0x130]
	0x01EDADA8 ADRP X20, 0x24FE000
	0x01EDADAC LDRB W8, [X20 + 0xF18]
	0x01EDADB0 CBNZ W8, 0x1EDADC8
	0x01EDADB4 ADRP X0, 0x2221000
	0x01EDADB8 LDR X0, [X0 + 0x708]
	0x01EDADBC BL 0x1C16CF4
	0x01EDADC0 MOVZ W8, 0x1
	0x01EDADC4 STRB W8, [X20 + 0xF18]
	0x01EDADC8 LDRB W8, [X19 + 0x120]
	0x01EDADCC ADRP X20, 0x2221000
	0x01EDADD0 LDR X21, [X19 + 0x118]
	0x01EDADD4 LDR X20, [X20 + 0x708]
	0x01EDADD8 CMP W8, 0x1
	0x01EDADDC B.NE 0x1EDAE24
	0x01EDADE0 ADRP X22, 0x24FE000
	0x01EDADE4 LDRB W8, [X22 + 0xF17]
	0x01EDADE8 CBNZ W8, 0x1EDAE00
	0x01EDADEC ADRP X0, 0x2221000
	0x01EDADF0 LDR X0, [X0 + 0x708]
	0x01EDADF4 BL 0x1C16CF4
	0x01EDADF8 MOVZ W8, 0x1
	0x01EDADFC STRB W8, [X22 + 0xF17]
	0x01EDAE00 LDR X0, [X20]
	0x01EDAE04 LDR W8, [X0 + 0xE0]
	0x01EDAE08 CBNZ W8, 0x1EDAE10
	0x01EDAE0C BL 0x1C16DFC
	0x01EDAE10 MOV X0, X31
	0x01EDAE14 BL 0x364BF5C
	0x01EDAE18 LDR X8, [X19 + 0x110]
	0x01EDAE1C ADD X9, X0, X21
	0x01EDAE20 SUB X21, X9, X8
	0x01EDAE24 LDR X0, [X20]
	0x01EDAE28 LDR W8, [X0 + 0xE0]
	0x01EDAE2C CBNZ W8, 0x1EDAE38
	0x01EDAE30 BL 0x1C16DFC
	0x01EDAE34 LDR X0, [X20]
	0x01EDAE38 LDR X8, [X19 + 0x128]
	0x01EDAE3C CBZ X8, 0x1EDAEF0
	0x01EDAE40 LDR X9, [X0 + 0xB8]
	0x01EDAE44 MOV X0, X8
	0x01EDAE48 MOV X1, X31
	0x01EDAE4C LDR V8, [X9]
	0x01EDAE50 BL 0x1E920B0
	0x01EDAE54 LDR X8, [X19 + 0x128]
	0x01EDAE58 TBZ X0, 0x0, 0x1EDAE74
	0x01EDAE5C CBZ X8, 0x1EDAEF0
	0x01EDAE60 LDR V0, [X19 + 0x50]
	0x01EDAE64 MOV X0, X8
	0x01EDAE68 MOV X1, X31
	0x01EDAE6C BL 0x1E92714
	0x01EDAE70 B 0x1EDAE90
	0x01EDAE74 CBZ X8, 0x1EDAEF0
	0x01EDAE78 SCVTF D0, X21
	0x01EDAE7C SCVTF D1, D8
	0x01EDAE80 FDIV D0, D0, D1
	0x01EDAE84 MOV X0, X8
	0x01EDAE88 MOV X1, X31
	0x01EDAE8C BL 0x1E925E4
	0x01EDAE90 ADRP X21, 0x24FE000
	0x01EDAE94 LDRB W8, [X21 + 0xF19]
	0x01EDAE98 CBNZ W8, 0x1EDAEB0
	0x01EDAE9C ADRP X0, 0x2221000
	0x01EDAEA0 LDR X0, [X0 + 0x708]
	0x01EDAEA4 BL 0x1C16CF4
	0x01EDAEA8 MOVZ W8, 0x1
	0x01EDAEAC STRB W8, [X21 + 0xF19]
	0x01EDAEB0 MOVZ W8, 0x1
	0x01EDAEB4 STR X31, [X19 + 0x118]
	0x01EDAEB8 STRB W8, [X19 + 0x120]
	0x01EDAEBC LDR X0, [X20]
	0x01EDAEC0 LDR W8, [X0 + 0xE0]
	0x01EDAEC4 CBNZ W8, 0x1EDAECC
	0x01EDAEC8 BL 0x1C16DFC
	0x01EDAECC MOV X0, X31
	0x01EDAED0 BL 0x364BF5C
	0x01EDAED4 STR X0, [X19 + 0x110]
	0x01EDAED8 MOV X0, X19
	0x01EDAEDC LDP X20, X19, [X31 + 0x20]
	0x01EDAEE0 LDP X22, X21, [X31 + 0x10]
	0x01EDAEE4 LDR X30, [X31 + 0x8]
	0x01EDAEE8 LDR V8, [X31], #0x30
	0x01EDAEEC B 0x1EDBF38
	0x01EDAEF0 BL 0x1C16F20
	0x01EDAEF4 STP D9, D8, [X31 - 0x30]!
	0x01EDAEF8 STR X30, [X31 + 0x10]
	0x01EDAEFC STP X20, X19, [X31 + 0x20]
	0x01EDAF00 MOV V8.16B, V0.16B
	0x01EDAF04 LDR V0, [X0 + 0x150]
	0x01EDAF08 STP D1, D2, [X0 + 0x150]
	0x01EDAF0C FSUB D0, D1, D0
	0x01EDAF10 FCMP D0, 0x0
	0x01EDAF14 B.LS 0x1EDAFA0
	0x01EDAF18 ADRP X20, 0x24FE000
	0x01EDAF1C LDRB W8, [X20 + 0xF19]
	0x01EDAF20 MOV X19, X0
	0x01EDAF24 CBNZ W8, 0x1EDAF3C
	0x01EDAF28 ADRP X0, 0x2221000
	0x01EDAF2C LDR X0, [X0 + 0x708]
	0x01EDAF30 BL 0x1C16CF4
	0x01EDAF34 MOVZ W8, 0x1
	0x01EDAF38 STRB W8, [X20 + 0xF19]
	0x01EDAF3C MOVZ W8, 0x1
	0x01EDAF40 STR X31, [X19 + 0x140]
	0x01EDAF44 STRB W8, [X19 + 0x148]
	0x01EDAF48 ADRP X8, 0x2221000
	0x01EDAF4C LDR X8, [X8 + 0x708]
	0x01EDAF50 LDR X0, [X8]
	0x01EDAF54 LDR W8, [X0 + 0xE0]
	0x01EDAF58 CBNZ W8, 0x1EDAF60
	0x01EDAF5C BL 0x1C16DFC
	0x01EDAF60 MOV X0, X31
	0x01EDAF64 BL 0x364BF5C
	0x01EDAF68 LDR X8, [X19 + 0xF8]
	0x01EDAF6C STR X0, [X19 + 0x138]
	0x01EDAF70 CBZ X8, 0x1EDB01C
	0x01EDAF74 MOV X0, X8
	0x01EDAF78 MOV X1, X31
	0x01EDAF7C BL 0x1E920B0
	0x01EDAF80 LDR X8, [X19 + 0xF8]
	0x01EDAF84 CBZ X8, 0x1EDB01C
	0x01EDAF88 TBZ X0, 0x0, 0x1EDAFB0
	0x01EDAF8C MOV X0, X8
	0x01EDAF90 MOV V0.16B, V8.16B
	0x01EDAF94 MOV X1, X31
	0x01EDAF98 BL 0x1E92714
	0x01EDAF9C B 0x1EDAFC0
	0x01EDAFA0 LDP X20, X19, [X31 + 0x20]
	0x01EDAFA4 LDR X30, [X31 + 0x10]
	0x01EDAFA8 LDP D9, D8, [X31], #0x30
	0x01EDAFAC RET
	0x01EDAFB0 MOV X0, X8
	0x01EDAFB4 MOV V0.16B, V8.16B
	0x01EDAFB8 MOV X1, X31
	0x01EDAFBC BL 0x1E925E4
	0x01EDAFC0 LDR X0, [X19 + 0x100]
	0x01EDAFC4 CBZ X0, 0x1EDB01C
	0x01EDAFC8 LDR V8, [X19 + 0x1EC]
	0x01EDAFCC LDR V9, [X19 + 0x210]
	0x01EDAFD0 MOV X1, X31
	0x01EDAFD4 BL 0x1E920B0
	0x01EDAFD8 LDR X8, [X19 + 0x100]
	0x01EDAFDC CBZ X8, 0x1EDB01C
	0x01EDAFE0 FCVT S0, S8
	0x01EDAFE4 FADD D0, D9, D0
	0x01EDAFE8 TBZ X0, 0x0, 0x1EDAFFC
	0x01EDAFEC MOV X0, X8
	0x01EDAFF0 MOV X1, X31
	0x01EDAFF4 BL 0x1E92714
	0x01EDAFF8 B 0x1EDB008

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x2500000
	012 Move X24, 0x221D000
	013 Move W8, [X21+1350]
	014 Move X24, [X24+3648]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x2221000
	022 Move X0, [X0+3176]
	023 Call 0x1C17CF4
	024 Move X0, 0x221D000
	025 Move X0, [X0+3648]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1350], W8
	029 Move W1, 10
	030 Move X0, X19
	031 Move X2, X31
	032 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	033 Move W22, W0
	034 Move W1, 16
	035 Move X0, X19
	036 Move X2, X31
	037 Call NetBitBuffer.ReadInt32VarLength, X0, X1
	038 Move X8, [X24]
	039 Move W21, W0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X25, 0x2500000
	046 Move W8, [X25+1377]
	047 Compare W8, 0
	048 JumpIfNotEqual {54}
	049 Move X0, 0x221D000
	050 Move X0, [X0+3648]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X25+1377], W8
	054 Move W1, 1
	055 Move X0, X19
	056 Move X2, X31
	057 Call NetBitBuffer.Read, X0, X1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X27, X31
	060 Move X0, X19
	061 Move X1, X31
	062 Call NetBitBuffer.ReadInt32VarLength, X0
	063 Move X8, [X24]
	064 Move W23, W0
	065 Move W9, [X8+224]
	066 Compare W9, 0
	067 JumpIfNotEqual {70}
	068 Move X0, X8
	069 Call 0x1C17DFC
	070 Move W0, W23
	071 Move X1, X31
	072 Call PlayerRef.FromIndex, X0
	073 And X27, X0, 0
	074 Move W8, [X25+1377]
	075 Compare W8, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x221D000
	078 Move X0, [X0+3648]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X25+1377], W8
	082 Move W1, 1
	083 Move X0, X19
	084 Move X2, X31
	085 Call NetBitBuffer.Read, X0, X1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, X19
	088 Move X1, X31
	089 Call NetBitBuffer.ReadInt32VarLength, X0
	090 Move X8, [X24]
	091 Move W23, W0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {97}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Move W0, W23
	098 Move X1, X31
	099 Call PlayerRef.FromIndex, X0
	100 Move X23, X0
	101 Move W23, W31
	102 Move X25, 0x2221000
	103 Move X25, [X25+3176]
	104 Move W1, 1
	105 Move X0, X19
	106 Move X2, X31
	107 Call NetBitBuffer.Read, X0, X1
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move W1, 16
	110 Move X0, X19
	111 Move X2, X31
	112 Call NetBitBuffer.Read, X0, X1
	113 Move X24, X0
	114 Move TEMP, X24
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {135}
	118 Move W1, 1
	119 Move X0, X19
	120 Move X2, X31
	121 Call NetBitBuffer.Read, X0, X1
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move TEMP, 11
	124 Not TEMP
	125 Move W1, TEMP
	126 Move X0, X19
	127 Move X2, X31
	128 Call NetBitBuffer.Read, X0, X1
	129 Move W8, W0
	130 ShiftRight W8, 16
	131 And W8, W8, 0x7FFF
	132 Move W24, W31
	133 Move W8, W31
	134 Or W24, W8, W24
	135 Move TEMP, X24
	136 And TEMP, TEMP, 8
	137 Compare TEMP, 8
	138 JumpIfEqual {144}
	139 Move W1, 16
	140 Move X0, X19
	141 Move X2, X31
	142 Call NetBitBuffer.ReadUInt64VarLength, X0, X1
	143 Move X26, X0
	144 Move X26, X31
	145 Move X0, [X25]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Move W0, W22
	151 Move X1, X31
	152 Call Maths.BytesRequiredForBits, X0
	153 Move W25, W0
	154 Move X0, X20
	155 Move W1, W25
	156 Call SimulationMessage.Allocate, X0, X1
	157 Move X1, X0
	158 Move X0, X20
	159 Move X2, X26
	160 Call SimulationMessageEnvelope.Allocate, X0, X1, X2
	161 Compare X0, 0
	162 JumpIfEqual {211}
	163 Move X8, [X0+8]
	164 Move X20, X0
	165 Compare X8, 0
	166 JumpIfEqual {211}
	167 Move [X8+8], W22
	168 Move X8, [X20+8]
	169 Compare X8, 0
	170 JumpIfEqual {211}
	171 Move [X8+12], W31
	172 Move X8, [X20+8]
	173 Compare X8, 0
	174 JumpIfEqual {211}
	175 Move [X8], W21
	176 Move X8, [X20+8]
	177 Compare X8, 0
	178 JumpIfEqual {211}
	179 Move [X8+4], W27
	180 Move X8, [X20+8]
	181 Compare X8, 0
	182 JumpIfEqual {211}
	183 Move [X8+24], W23
	184 Move X8, [X20+8]
	185 Compare X8, 0
	186 JumpIfEqual {211}
	187 Or W9, W24, 2
	188 Move [X8+20], W9
	189 Move X8, [X20+8]
	190 Compare X8, 0
	191 JumpIfEqual {211}
	192 Move W9, [X8+8]
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Add X1, X8, 28
	195 Move X0, X19
	196 Move W2, W25
	197 Move X3, X31
	198 Call NetBitBuffer.ReadBytesAligned, X0, X1, X2
	199 Move X0, X20
	200 Move X20, [X31+64]
	201 Move X19, [X31+72]
	202 Move X22, [X31+48]
	203 Move X21, [X31+56]
	204 Move X24, [X31+32]
	205 Move X23, [X31+40]
	206 Move X26, [X31+16]
	207 Move X25, [X31+24]
	208 Move X30, [X31+80]
	209 Move X27, [X31+88]
	210 Return X0
	211 Call 0x1C17F20

Method: Fusion.SimulationMessageEnvelope* Allocate(Fusion.Simulation sim, Fusion.SimulationMessage* message, System.UInt64 sequence)

Disassembly:
	0x01EDAFFC MOV X0, X8
	0x01EDB000 MOV X1, X31
	0x01EDB004 BL 0x1E925E4
	0x01EDB008 MOV X0, X19
	0x01EDB00C LDP X20, X19, [X31 + 0x20]
	0x01EDB010 LDR X30, [X31 + 0x10]
	0x01EDB014 LDP D9, D8, [X31], #0x30
	0x01EDB018 B 0x1EDBE10
	0x01EDB01C BL 0x1C16F20
	0x01EDB020 STP X30, X19, [X31 - 0x10]!
	0x01EDB024 MOV X19, X0
	0x01EDB028 BL 0x1EDB040
	0x01EDB02C MOV X0, X19
	0x01EDB030 BL 0x1EDB2B8
	0x01EDB034 MOV X0, X19
	0x01EDB038 LDP X30, X19, [X31], #0x10
	0x01EDB03C B 0x1EDB4FC
	0x01EDB040 SUB X31, X31, 0x40
	0x01EDB044 STP X30, X21, [X31 + 0x20]
	0x01EDB048 STP X20, X19, [X31 + 0x30]
	0x01EDB04C ADRP X20, 0x24FE000
	0x01EDB050 LDRB W8, [X20 + 0x553]
	0x01EDB054 MOV X19, X0
	0x01EDB058 TBNZ X8, 0x0, 0x1EDB0AC
	0x01EDB05C ADRP X0, 0x2225000
	0x01EDB060 LDR X0, [X0 + 0x1D0]
	0x01EDB064 BL 0x1C16CF4
	0x01EDB068 ADRP X0, 0x2225000
	0x01EDB06C LDR X0, [X0 + 0x1D8]
	0x01EDB070 BL 0x1C16CF4
	0x01EDB074 ADRP X0, 0x2225000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x24FF000
	007 Move W8, [X22+1351]
	008 Move X20, X2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2226000
	016 Move X0, [X0+384]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1351], W8
	020 Compare X21, 0
	021 JumpIfEqual {42}
	022 Move X8, 0x2226000
	023 Move X8, [X8+384]
	024 Move X0, X21
	025 Move X1, [X8]
	026 Call 0x2256010, X0
	027 Compare X0, 0
	028 JumpIfEqual {42}
	029 Move [X0], X20
	030 Move [X0+8], X19
	031 Move [X0+16], X31
	032 Move [X0+24], X31
	033 Move W8, [X19+16]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Add W8, W8, 1
	037 Move [X19+16], W8
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+48]
	041 Return X0
	042 Call 0x1C17F20

Method: System.Void Free(Fusion.Simulation sim, Fusion.SimulationMessageEnvelope* envelope)

Disassembly:
	0x01EDB078 LDR X0, [X0 + 0x1E0]
	0x01EDB07C BL 0x1C16CF4
	0x01EDB080 ADRP X0, 0x2225000
	0x01EDB084 LDR X0, [X0 + 0x1C8]
	0x01EDB088 BL 0x1C16CF4
	0x01EDB08C ADRP X0, 0x2225000
	0x01EDB090 LDR X0, [X0 + 0x1E8]
	0x01EDB094 BL 0x1C16CF4
	0x01EDB098 ADRP X0, 0x2225000
	0x01EDB09C LDR X0, [X0 + 0x1F0]
	0x01EDB0A0 BL 0x1C16CF4
	0x01EDB0A4 MOVZ W8, 0x1
	0x01EDB0A8 STRB W8, [X20 + 0x553]
	0x01EDB0AC STP X31, X31, [X31 + 0x8]
	0x01EDB0B0 STR X31, [X31 + 0x18]
	0x01EDB0B4 LDR X0, [X19 + 0x200]
	0x01EDB0B8 CBZ X0, 0x1EDB238
	0x01EDB0BC ADRP X8, 0x2225000
	0x01EDB0C0 LDR X8, [X8 + 0x1F0]
	0x01EDB0C4 LDR X1, [X8]
	0x01EDB0C8 BL 0x25D19B0
	0x01EDB0CC LDR W8, [X19 + 0x130]
	0x01EDB0D0 LDR X20, [X19 + 0x80]
	0x01EDB0D4 STR X31, [X19 + 0x210]
	0x01EDB0D8 STR W8, [X19 + 0x208]
	0x01EDB0DC CBZ X20, 0x1EDB238
	0x01EDB0E0 ADRP X10, 0x2225000
	0x01EDB0E4 LDR X8, [X20]
	0x01EDB0E8 LDR X10, [X10 + 0x1C8]
	0x01EDB0EC LDRH W9, [X8 + 0x12E]
	0x01EDB0F0 LDR X1, [X10]
	0x01EDB0F4 CBZ X9, 0x1EDB118
	0x01EDB0F8 LDR X10, [X8 + 0xB0]
	0x01EDB0FC ADD X10, X10, 0x8
	0x01EDB100 LDUR X11, [X10 - 0x8]
	0x01EDB104 CMP X11, X1
	0x01EDB108 B.EQ 0x1EDB128
	0x01EDB10C SUBS X9, X9, 0x1
	0x01EDB110 ADD X10, X10, 0x10
	0x01EDB114 B.NE 0x1EDB100
	0x01EDB118 MOVZ W2, 0x2
	0x01EDB11C MOV X0, X20
	0x01EDB120 BL 0x1C5C788
	0x01EDB124 B 0x1EDB138
	0x01EDB128 LDR W9, [X10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {54}
	008 Move X8, [X1+8]
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X8, 0
	012 JumpIfEqual {16}
	013 Move W9, [X8+16]
	014 Subtract W9, W9, 1
	015 Move [X8+16], W9
	016 Compare X20, 0
	017 JumpIfNotEqual {44}
	018 Move X22, 0x24FF000
	019 Move W8, [X22+1212]
	020 Move X21, [X19+8]
	021 Compare W8, 0
	022 JumpIfNotEqual {28}
	023 Move X0, 0x2225000
	024 Move X0, [X0+3416]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1212], W8
	028 Compare X21, 0
	029 JumpIfEqual {54}
	030 Move X9, 0x2225000
	031 Move W8, [X21+16]
	032 Move X9, [X9+3416]
	033 Move X2, X31
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X1, [X9]
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Call Assert.Always, X0, X1
	038 Compare X20, 0
	039 JumpIfEqual {54}
	040 Move X0, X20
	041 Move X1, X21
	042 Move X2, X31
	043 Call Simulation.TempFree, X0, X1
	044 Move X0, X20
	045 Move X1, X19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Call Simulation.TempFree, X0, X1
	053 Return 
	054 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x01EDB12C ADD W9, W9, 0x2
	0x01EDB130 ADD X8, X8, W9, 0x4, SXTW
	0x01EDB134 ADD X0, X8, 0x138
	0x01EDB138 LDP X8, X1, [X0]
	0x01EDB13C MOV X0, X20
	0x01EDB140 BLR X8
	0x01EDB144 MOV X0, X19
	0x01EDB148 STR X31, [X19 + 0x98]
	0x01EDB14C BL 0x1EDB744
	0x01EDB150 LDR V1, [X19 + 0x90]
	0x01EDB154 LDR W8, [X19 + 0x1C0]
	0x01EDB158 MOVZ W20, 0x1
	0x01EDB15C STRB W20, [X19 + 0x1CC]
	0x01EDB160 FADD D0, D0, D1
	0x01EDB164 ADD W8, W8, 0x1
	0x01EDB168 STR D1, [X19 + 0x88]
	0x01EDB16C STR D0, [X19 + 0xE0]
	0x01EDB170 STR W8, [X19 + 0x1C0]
	0x01EDB174 ADRP X21, 0x24FD000
	0x01EDB178 LDRB W8, [X21 + 0xF19]
	0x01EDB17C CBNZ W8, 0x1EDB190
	0x01EDB180 ADRP X0, 0x2220000
	0x01EDB184 LDR X0, [X0 + 0x708]
	0x01EDB188 BL 0x1C16CF4
	0x01EDB18C STRB W20, [X21 + 0xF19]
	0x01EDB190 STR X31, [X19 + 0x180]
	0x01EDB194 STRB W20, [X19 + 0x188]
	0x01EDB198 ADRP X8, 0x2220000
	0x01EDB19C LDR X8, [X8 + 0x708]
	0x01EDB1A0 LDR X0, [X8]
	0x01EDB1A4 LDR W8, [X0 + 0xE0]
	0x01EDB1A8 CBNZ W8, 0x1EDB1B0
	0x01EDB1AC BL 0x1C16DFC
	0x01EDB1B0 MOV X0, X31
	0x01EDB1B4 BL 0x364BF5C
	0x01EDB1B8 LDR X9, [X19 + 0x1D0]
	0x01EDB1BC STR X0, [X19 + 0x178]
	0x01EDB1C0 CBZ X9, 0x1EDB238
	0x01EDB1C4 ADRP X8, 0x2225000
	0x01EDB1C8 LDR X8, [X8 + 0x1E8]
	0x01EDB1CC ADRP X20, 0x2225000
	0x01EDB1D0 ADRP X19, 0x2225000
	0x01EDB1D4 MOV X0, X9
	0x01EDB1D8 LDR X1, [X8]
	0x01EDB1DC LDR X20, [X20 + 0x1D8]
	0x01EDB1E0 LDR X19, [X19 + 0x1D0]
	0x01EDB1E4 ADD X8, X31, 0x8
	0x01EDB1E8 BL 0x301CB58
	0x01EDB1EC LDR X1, [X20]
	0x01EDB1F0 ADD X0, X31, 0x8
	0x01EDB1F4 BL 0x2BC4350
	0x01EDB1F8 TBZ X0, 0x0, 0x1EDB218
	0x01EDB1FC LDR X8, [X31 + 0x18]
	0x01EDB200 CBZ X8, 0x1EDB234
	0x01EDB204 LDR X0, [X8 + 0x40]
	0x01EDB208 LDR X1, [X8 + 0x28]
	0x01EDB20C LDR X9, [X8 + 0x18]
	0x01EDB210 BLR X9
	0x01EDB214 B 0x1EDB1EC
	0x01EDB218 LDR X1, [X19]
	0x01EDB21C ADD X0, X31, 0x8
	0x01EDB220 BL 0x2BC434C
	0x01EDB224 LDP X20, X19, [X31 + 0x30]
	0x01EDB228 LDP X30, X21, [X31 + 0x20]
	0x01EDB22C ADD X31, X31, 0x40
	0x01EDB230 RET
	0x01EDB234 BL 0x1C16F20
	0x01EDB238 BL 0x1C16F20
	0x01EDB23C B 0x1EDB244
	0x01EDB240 B 0x1EDB244
	0x01EDB244 MOV X19, X0
	0x01EDB248 CMP W1, 0x1
	0x01EDB24C B.NE 0x1EDB280
	0x01EDB250 MOV X0, X19
	0x01EDB254 BL 0x3EB1AD0
	0x01EDB258 LDR X20, [X0]
	0x01EDB25C BL 0x3EB1AE0
	0x01EDB260 ADRP X8, 0x2225000
	0x01EDB264 LDR X8, [X8 + 0x1D0]
	0x01EDB268 ADD X0, X31, 0x8
	0x01EDB26C LDR X1, [X8]
	0x01EDB270 BL 0x2BC434C
	0x01EDB274 CBZ X20, 0x1EDB224
	0x01EDB278 MOV X0, X20
	0x01EDB27C BL 0x1C16F18
	0x01EDB280 MOV X20, X31
	0x01EDB284 B 0x1EDB28C
	0x01EDB288 MOV X19, X0
	0x01EDB28C ADRP X8, 0x2225000
	0x01EDB290 LDR X8, [X8 + 0x1D0]
	0x01EDB294 LDR X1, [X8]
	0x01EDB298 ADD X0, X31, 0x8
	0x01EDB29C BL 0x2BC434C
	0x01EDB2A0 CBNZ X20, 0x1EDB2AC
	0x01EDB2A4 MOV X0, X19
	0x01EDB2A8 BL 0x1D2C690
	0x01EDB2AC MOV X0, X20
	0x01EDB2B0 BL 0x1C16F18
	0x01EDB2B4 BL 0x1990590
	0x01EDB2B8 SUB X31, X31, 0x40
	0x01EDB2BC STP X30, X21, [X31 + 0x20]
	0x01EDB2C0 STP X20, X19, [X31 + 0x30]
	0x01EDB2C4 ADRP X20, 0x24FE000
	0x01EDB2C8 LDRB W8, [X20 + 0x554]
	0x01EDB2CC MOV X19, X0
	0x01EDB2D0 TBNZ X8, 0x0, 0x1EDB318
	0x01EDB2D4 ADRP X0, 0x2225000
	0x01EDB2D8 LDR X0, [X0 + 0x1D0]
	0x01EDB2DC BL 0x1C16CF4
	0x01EDB2E0 ADRP X0, 0x2225000
	0x01EDB2E4 LDR X0, [X0 + 0x1D8]
	0x01EDB2E8 BL 0x1C16CF4
	0x01EDB2EC ADRP X0, 0x2225000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x24FF000
	007 Move X21, 0x2219000
	008 Move W8, [X19+1352]
	009 Move X21, [X21+2512]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0x2219000
	016 Move X0, [X0+2512]
	017 Call 0x1C17CF4
	018 Move X0, 0x221A000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0x2219000
	022 Move X0, [X0+2096]
	023 Call 0x1C17CF4
	024 Move X0, 0x2226000
	025 Move X0, [X0+392]
	026 Call 0x1C17CF4
	027 Move X0, 0x2225000
	028 Move X0, [X0+1616]
	029 Call 0x1C17CF4
	030 Move X0, 0x2226000
	031 Move X0, [X0+400]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X19+1352], W8
	035 Move X0, [X21]
	036 Move W1, 4
	037 Call 0x1C17D6C
	038 Compare X0, 0
	039 JumpIfEqual {128}
	040 Move X21, 0x2226000
	041 Move X21, [X21+400]
	042 Move X19, X0
	043 Move X0, [X21]
	044 Compare X0, 0
	045 JumpIfEqual {51}
	046 Move X8, [X19]
	047 Move X1, [X8+64]
	048 Call 0x1C17E00
	049 Compare X0, 0
	050 JumpIfEqual {125}
	051 Move W8, [X19+24]
	052 Compare W8, 0
	053 JumpIfEqual {124}
	054 Move X8, [X21]
	055 Move X9, 0x221A000
	056 Move X9, [X9+1880]
	057 Add X1, X31, 8
	058 Move [X19+32], X8
	059 Move X8, [X20]
	060 Move X0, [X9]
	061 Move [X31+8], X8
	062 Call 0x1C17E04
	063 Move X21, X0
	064 Compare X0, 0
	065 JumpIfEqual {72}
	066 Move X8, [X19]
	067 Move X0, X21
	068 Move X1, [X8+64]
	069 Call 0x1C17E00
	070 Compare X0, 0
	071 JumpIfEqual {125}
	072 Move W8, [X19+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X22, 0x2225000
	075 Move X22, [X22+1616]
	076 Move [X19+40], X21
	077 Move X0, [X22]
	078 Compare X0, 0
	079 JumpIfEqual {86}
	080 Move X8, [X19]
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {125}
	085 Move W8, [X19+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X8, [X22]
	088 Move X9, 0x2226000
	089 Move X9, [X9+392]
	090 Move [X19+48], X8
	091 Move X0, [X20+8]
	092 Move X20, [X9]
	093 Compare X0, 0
	094 JumpIfEqual {100}
	095 Move W1, W31
	096 Call SimulationMessage.ToString, X0, X1
	097 Move X21, X0
	098 Compare X21, 0
	099 JumpIfNotEqual {105}
	100 Move X8, 0x2219000
	101 Move X8, [X8+2096]
	102 Move X21, [X8]
	103 Compare X21, 0
	104 JumpIfEqual {111}
	105 Move X8, [X19]
	106 Move X0, X21
	107 Move X1, [X8+64]
	108 Call 0x1C17E00
	109 Compare X0, 0
	110 JumpIfEqual {125}
	111 Move W8, [X19+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X20
	114 Move X1, X19
	115 Move X2, X31
	116 Move [X19+56], X21
	117 Call String.Format, X0, X1
	118 Move X20, [X31+32]
	119 Move X19, [X31+40]
	120 Move X22, [X31+16]
	121 Move X21, [X31+24]
	122 Move X30, [X31+48]
	123 Return X0
	124 Call 0x1C17F28
	125 Call 0x1C17F44
	126 Move X1, X31
	127 Call 0x1C17DEC
	128 Call 0x1C17F20

Method: System.Void Fusion.ILogDumpable.Dump(System.Text.StringBuilder builder)

Disassembly:
	0x01EDB2F0 LDR X0, [X0 + 0x1E0]
	0x01EDB2F4 BL 0x1C16CF4
	0x01EDB2F8 ADRP X0, 0x2225000
	0x01EDB2FC LDR X0, [X0 + 0x1C8]
	0x01EDB300 BL 0x1C16CF4
	0x01EDB304 ADRP X0, 0x2225000
	0x01EDB308 LDR X0, [X0 + 0x1E8]
	0x01EDB30C BL 0x1C16CF4
	0x01EDB310 MOVZ W8, 0x1
	0x01EDB314 STRB W8, [X20 + 0x554]
	0x01EDB318 STP X31, X31, [X31 + 0x8]
	0x01EDB31C STR X31, [X31 + 0x18]
	0x01EDB320 LDR X20, [X19 + 0xA0]
	0x01EDB324 CBZ X20, 0x1EDB47C
	0x01EDB328 ADRP X10, 0x2225000
	0x01EDB32C LDR X8, [X20]
	0x01EDB330 LDR X10, [X10 + 0x1C8]
	0x01EDB334 LDRH W9, [X8 + 0x12E]
	0x01EDB338 LDR X1, [X10]
	0x01EDB33C CBZ X9, 0x1EDB360
	0x01EDB340 LDR X10, [X8 + 0xB0]
	0x01EDB344 ADD X10, X10, 0x8
	0x01EDB348 LDUR X11, [X10 - 0x8]
	0x01EDB34C CMP X11, X1
	0x01EDB350 B.EQ 0x1EDB370
	0x01EDB354 SUBS X9, X9, 0x1
	0x01EDB358 ADD X10, X10, 0x10
	0x01EDB35C B.NE 0x1EDB348
	0x01EDB360 MOVZ W2, 0x2
	0x01EDB364 MOV X0, X20
	0x01EDB368 BL 0x1C5C788
	0x01EDB36C B 0x1EDB380
	0x01EDB370 LDR W9, [X10]
	0x01EDB374 ADD W9, W9, 0x2
	0x01EDB378 ADD X8, X8, W9, 0x4, SXTW
	0x01EDB37C ADD X0, X8, 0x138
	0x01EDB380 LDP X8, X1, [X0]
	0x01EDB384 MOV X0, X20
	0x01EDB388 BLR X8
	0x01EDB38C LDR V0, [X19 + 0xE0]
	0x01EDB390 LDR V1, [X19 + 0xB0]
	0x01EDB394 LDR W8, [X19 + 0x1C4]
	0x01EDB398 MOVZ W20, 0x1
	0x01EDB39C STR X31, [X19 + 0xB8]
	0x01EDB3A0 FSUB D0, D0, D1
	0x01EDB3A4 ADD W8, W8, 0x1
	0x01EDB3A8 STRB W20, [X19 + 0x1CD]
	0x01EDB3AC STR D1, [X19 + 0xA8]
	0x01EDB3B0 STR D0, [X19 + 0xE8]
	0x01EDB3B4 STR W8, [X19 + 0x1C4]
	0x01EDB3B8 ADRP X21, 0x24FD000
	0x01EDB3BC LDRB W8, [X21 + 0xF19]
	0x01EDB3C0 CBNZ W8, 0x1EDB3D4
	0x01EDB3C4 ADRP X0, 0x2220000
	0x01EDB3C8 LDR X0, [X0 + 0x708]
	0x01EDB3CC BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x24FF000
	010 Move X19, X1
	011 Move X20, X0
	012 Move [X31+40], X8
	013 Move W8, [X22+1353]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x221A000
	019 Move X0, [X0+4064]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1353], W8
	023 Move X0, X20
	024 Call SimulationMessageEnvelope.ToString, X0
	025 Compare X19, 0
	026 JumpIfEqual {63}
	027 Move X1, X0
	028 Move X0, X19
	029 Move X2, X31
	030 Call StringBuilder.Append, X0, X1
	031 Move X8, [X20+8]
	032 Compare X8, 0
	033 JumpIfEqual {53}
	034 Move X8, 0x221A000
	035 Move X8, [X8+4064]
	036 Move X0, X19
	037 Move X2, X31
	038 Move X1, [X8]
	039 Call StringBuilder.Append, X0, X1
	040 Move X8, [X20+8]
	041 Add X0, X31, 0
	042 Move W9, [X8+24]
	043 Move X10, [X8+16]
	044 Move V0, [X8]
	045 Move [X31+24], W9
	046 Move [X31+16], X10
	047 Move [X31], V0
	048 Call SimulationMessage.DumpContents, X0
	049 Move X1, X0
	050 Move X0, X19
	051 Move X2, X31
	052 Call StringBuilder.Append, X0, X1
	053 Move X8, [X21+40]
	054 Move X9, [X31+40]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, [X31+80]
	057 Move X19, [X31+88]
	058 Move X22, [X31+64]
	059 Move X21, [X31+72]
	060 Move X30, [X31+48]
	061 Add X31, X31, 96
	062 Return 
	063 Call 0x1C17F20
	064 Call 0x3EB2B20

