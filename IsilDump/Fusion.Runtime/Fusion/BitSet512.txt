Type: Fusion.BitSet512

Method: Fusion.BitSet512/Iterator GetIterator()

Disassembly:
	0x01E8A878 FADD S0, S1, S0
	0x01E8A87C FCVTZS W8, S0
	0x01E8A880 FCMP S0, S2
	0x01E8A884 MOVZ W9, 0x80000000
	0x01E8A888 CSEL W8, W9, W8, EQ
	0x01E8A88C SBFM W9, W8, 0x1F, 0x1F
	0x01E8A890 EOR W8, W9, W8, 0x1
	0x01E8A894 STR W8, [X19 + 0x4]
	0x01E8A898 LDP X20, X19, [X31 + 0x10]
	0x01E8A89C LDR X30, [X31 + 0x8]

ISIL:
	001 Move [X8], X31
	002 Move V0, [X0+32]
	003 Move V1, [X0+48]
	004 Move V2, [X0]
	005 Move V3, [X0+16]
	006 Move TEMP, 0
	007 Not TEMP
	008 Move W9, TEMP
	009 Move [X8], W9
	010 Move [X8+56], V1
	011 Move [X8+40], V0
	012 Move [X8+24], V3
	013 Move [X8+8], V2
	014 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x01E8A8C4 CBNZ W8, 0x1E8A8DC
	0x01E8A8C8 ADRP X0, 0x2270000

ISIL:
	001 Move W0, 512
	002 Return X0

Method: Fusion.BitSet512 FromArray(System.UInt64[] values)

Disassembly:
	0x01E8A8CC LDR X0, [X0 + 0xC68]
	0x01E8A8D0 BL 0x1C16CF4
	0x01E8A8D4 MOVZ W8, 0x1
	0x01E8A8D8 STRB W8, [X19 + 0xE8F]
	0x01E8A8DC ADRP X20, 0x2270000
	0x01E8A8E0 LDR X20, [X20 + 0xC68]
	0x01E8A8E4 LDR X0, [X20]
	0x01E8A8E8 LDR W8, [X0 + 0xE0]
	0x01E8A8EC CBZ W8, 0x1E8A8F8
	0x01E8A8F0 MOV W8, W31
	0x01E8A8F4 B 0x1E8A908
	0x01E8A8F8 BL 0x1C16DFC
	0x01E8A8FC LDRB W8, [X19 + 0xE8F]
	0x01E8A900 CMP W8, 0x0
	0x01E8A904 CSET W8, EQ
	0x01E8A908 FMOV W9, S9
	0x01E8A90C MOVZ W10, 0x44800000
	0x01E8A910 UBFM W9, W9, 0x1F, 0x1F
	0x01E8A914 FMOV S0, 0.5
	0x01E8A918 FMOV S1, W10
	0x01E8A91C UCVTF S2, W9
	0x01E8A920 MOVZ W11, 0x7F800000
	0x01E8A924 FMUL S1, S9, S1
	0x01E8A928 FSUB S0, S0, S2
	0x01E8A92C FMOV S3, W11
	0x01E8A930 FADD S0, S1, S0
	0x01E8A934 FCVTZS W9, S0
	0x01E8A938 FCMP S0, S3
	0x01E8A93C MOVZ W10, 0x80000000
	0x01E8A940 CSEL W21, W10, W9, EQ
	0x01E8A944 CBZ W8, 0x1E8A95C
	0x01E8A948 ADRP X0, 0x2270000
	0x01E8A94C LDR X0, [X0 + 0xC68]
	0x01E8A950 BL 0x1C16CF4
	0x01E8A954 MOVZ W8, 0x1
	0x01E8A958 STRB W8, [X19 + 0xE8F]
	0x01E8A95C LDR X0, [X20]
	0x01E8A960 LDR W8, [X0 + 0xE0]
	0x01E8A964 CBNZ W8, 0x1E8A96C
	0x01E8A968 BL 0x1C16DFC
	0x01E8A96C SBFM W8, W21, 0x1F, 0x1F
	0x01E8A970 FMOV W9, S8
	0x01E8A974 EOR W0, W8, W21, 0x1
	0x01E8A978 MOVZ W8, 0x44800000
	0x01E8A97C UBFM W9, W9, 0x1F, 0x1F
	0x01E8A980 FMOV S0, 0.5
	0x01E8A984 FMOV S1, W8
	0x01E8A988 UCVTF S2, W9
	0x01E8A98C MOVZ W8, 0x7F800000
	0x01E8A990 FMUL S1, S8, S1
	0x01E8A994 FSUB S0, S0, S2
	0x01E8A998 FMOV S2, W8
	0x01E8A99C FADD S0, S1, S0
	0x01E8A9A0 FCVTZS W8, S0
	0x01E8A9A4 FCMP S0, S2
	0x01E8A9A8 MOVZ W9, 0x80000000
	0x01E8A9AC CSEL W8, W9, W8, EQ
	0x01E8A9B0 LDP X20, X19, [X31 + 0x20]
	0x01E8A9B4 LDP X30, X21, [X31 + 0x10]
	0x01E8A9B8 SBFM W9, W8, 0x1F, 0x1F
	0x01E8A9BC EOR W8, W9, W8, 0x1
	0x01E8A9C0 BFM X0, X8, 0x20, 0x1F
	0x01E8A9C4 LDP D9, D8, [X31], #0x30
	0x01E8A9C8 RET
	0x01E8A9CC STR X30, [X31 - 0x30]!
	0x01E8A9D0 STP X22, X21, [X31 + 0x10]
	0x01E8A9D4 STP X20, X19, [X31 + 0x20]
	0x01E8A9D8 ADRP X21, 0x254E000
	0x01E8A9DC LDRB W8, [X21 + 0xE90]
	0x01E8A9E0 MOV X19, X0
	0x01E8A9E4 CBNZ W8, 0x1E8A9FC
	0x01E8A9E8 ADRP X0, 0x2270000
	0x01E8A9EC LDR X0, [X0 + 0xC68]
	0x01E8A9F0 BL 0x1C16CF4
	0x01E8A9F4 MOVZ W8, 0x1
	0x01E8A9F8 STRB W8, [X21 + 0xE90]
	0x01E8A9FC ADRP X22, 0x2270000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+96], X20
	004 Move [X31+104], X19
	005 NotImplemented "Instruction MRS not yet implemented."
	006 Move X10, [X9+40]
	007 Move [X31+72], X10
	008 Compare X0, 0
	009 JumpIfEqual {47}
	010 Move X10, [X0+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 And X10, X10, 0
	013 NotImplemented "Instruction MOVI not yet implemented."
	014 Move [X31+32], V0
	015 Move [X31+40], V0
	016 Move [X31], V0
	017 Move [X31+8], V0
	018 Compare X10, 0
	019 JumpIfEqual {30}
	020 Move X10, X31
	021 Add X11, X31, 0
	022 Add X12, X0, 32
	023 Move X13, [X12]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move [X11], X13
	026 Move W13, [X0+24]
	027 Add X10, X10, 1
	028 Add X11, X11, 8
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Call 0x1C17F28
	031 Move V1, [X31+32]
	032 Move V0, [X31+48]
	033 Move V3, [X31]
	034 Move V2, [X31+16]
	035 Move [X8+32], V1
	036 Move [X8+40], V0
	037 Move [X8], V3
	038 Move [X8+8], V2
	039 Move X8, [X9+40]
	040 Move X9, [X31+72]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X20, [X31+96]
	043 Move X19, [X31+104]
	044 Move X30, [X31+80]
	045 Add X31, X31, 112
	046 Return X0
	047 Move X0, 0x226F000
	048 Move X0, [X0+1320]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0x2274000
	053 Move X0, [X0+3800]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call ArgumentNullException..ctor, X0, X1
	059 Move X0, 0x2272000
	060 Move X0, [X0+1400]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X19, X0
	064 Move X0, 0x2274000
	065 Move X0, [X0+3976]
	066 Call 0x1C17D08
	067 Move X20, X0
	068 Move X0, 0x2274000
	069 Move X0, [X0+3800]
	070 Call 0x1C17D08
	071 Move X2, X0
	072 Move X0, X19
	073 Move X1, X20
	074 Move X3, X31
	075 Call ArgumentException..ctor, X0, X1, X2
	076 Move X0, 0x2274000
	077 Move X0, [X0+3984]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Call 0x1C17DEC
	082 Call 0x3EB2B20

Method: System.Void Set(System.Int32 bit)

Disassembly:
	0x01E8AA00 LDR X22, [X22 + 0xC68]
	0x01E8AA04 UBFM X20, X19, 0x20, 0x3F
	0x01E8AA08 LDR X0, [X22]
	0x01E8AA0C LDR W8, [X0 + 0xE0]
	0x01E8AA10 CBNZ W8, 0x1E8AA34
	0x01E8AA14 BL 0x1C16DFC
	0x01E8AA18 LDRB W8, [X21 + 0xE90]
	0x01E8AA1C CBNZ W8, 0x1E8AA34
	0x01E8AA20 ADRP X0, 0x2270000
	0x01E8AA24 LDR X0, [X0 + 0xC68]

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 Or X9, X9, X10
	009 Move [X0], X9
	010 Return 

Method: System.Void Clear(System.Int32 bit)

Disassembly:
	0x01E8AA28 BL 0x1C16CF4
	0x01E8AA2C MOVZ W8, 0x1
	0x01E8AA30 STRB W8, [X21 + 0xE90]
	0x01E8AA34 LDR X0, [X22]
	0x01E8AA38 LDR W8, [X0 + 0xE0]
	0x01E8AA3C CBNZ W8, 0x1E8AA44
	0x01E8AA40 BL 0x1C16DFC
	0x01E8AA44 AND W8, W19, 0x1
	0x01E8AA48 MOVZ W9, 0x3A800000
	0x01E8AA4C AND W10, W20, 0x1

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 NotImplemented "Instruction BIC not yet implemented."
	009 Move [X0], X9
	010 Return 

Method: System.Boolean get_Item(System.Int32 index)

Disassembly:
	0x01E8AA50 SUB W8, W31, W8
	0x01E8AA54 FMOV S1, W9
	0x01E8AA58 SUB W9, W31, W10
	0x01E8AA5C EOR W8, W8, W19, 0x1
	0x01E8AA60 EOR W9, W9, W20, 0x1
	0x01E8AA64 LDP X20, X19, [X31 + 0x20]
	0x01E8AA68 LDP X22, X21, [X31 + 0x10]
	0x01E8AA6C SCVTF S0, W8

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X8, [X0]
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0

Method: System.Void set_Item(System.Int32 index, System.Boolean value)

Disassembly:
	0x01E8AA70 SCVTF S2, W9
	0x01E8AA74 FMUL S0, S0, S1
	0x01E8AA78 FMUL S1, S2, S1
	0x01E8AA7C LDR X30, [X31], #0x30
	0x01E8AA80 RET
	0x01E8AA84 LDR W8, [X0]
	0x01E8AA88 CMP W8, W1
	0x01E8AA8C B.NE 0x1E8AAA4
	0x01E8AA90 LDR W8, [X0 + 0x4]
	0x01E8AA94 UBFM X9, X1, 0x20, 0x3F
	0x01E8AA98 CMP W8, W9
	0x01E8AA9C CSET W0, EQ
	0x01E8AAA0 RET

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 And W31, W2, 1
	009 NotImplemented "Instruction BIC not yet implemented."
	010 Or X9, X9, X10
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Move [X0], X9
	013 Return 

Method: System.Void And(Fusion.BitSet512 other)

Disassembly:
	0x01E8AAA4 MOV W0, W31
	0x01E8AAA8 RET
	0x01E8AAAC STP X30, X21, [X31 - 0x20]!
	0x01E8AAB0 STP X20, X19, [X31 + 0x10]
	0x01E8AAB4 ADRP X21, 0x254F000
	0x01E8AAB8 LDRB W8, [X21 + 0x237]
	0x01E8AABC MOV X20, X1
	0x01E8AAC0 MOV X19, X0
	0x01E8AAC4 TBNZ X8, 0x0, 0x1E8AADC
	0x01E8AAC8 ADRP X0, 0x2273000
	0x01E8AACC LDR X0, [X0 + 0xFB0]
	0x01E8AAD0 BL 0x1C16CF4
	0x01E8AAD4 MOVZ W8, 0x1
	0x01E8AAD8 STRB W8, [X21 + 0x237]
	0x01E8AADC CBZ X20, 0x1E8AB24
	0x01E8AAE0 ADRP X8, 0x2273000
	0x01E8AAE4 LDR X8, [X8 + 0xFB0]
	0x01E8AAE8 LDR X9, [X20]
	0x01E8AAEC LDR X8, [X8]
	0x01E8AAF0 CMP X9, X8
	0x01E8AAF4 B.NE 0x1E8AB24
	0x01E8AAF8 MOV X0, X20
	0x01E8AAFC BL 0x1C16E08
	0x01E8AB00 LDR X8, [X0]
	0x01E8AB04 LDR W9, [X19]
	0x01E8AB08 CMP W9, W8
	0x01E8AB0C B.NE 0x1E8AB24
	0x01E8AB10 LDR W9, [X19 + 0x4]
	0x01E8AB14 UBFM X8, X8, 0x20, 0x3F

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 And X8, X8, X9
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 And X8, X8, X10
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 And X8, X8, X9
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 And X8, X8, X10
	016 Move [X0+24], X8
	017 Move X8, [X1+32]
	018 Move X9, [X0+32]
	019 Move X10, [X0+40]
	020 And X8, X8, X9
	021 Move [X0+32], X8
	022 Move X8, [X1+40]
	023 And X8, X8, X10
	024 Move [X0+40], X8
	025 Move X8, [X1+48]
	026 Move X9, [X0+48]
	027 Move X10, [X0+56]
	028 And X8, X8, X9
	029 Move [X0+48], X8
	030 Move X8, [X1+56]
	031 And X8, X8, X10
	032 Move [X0+56], X8
	033 Return 

Method: System.Void Or(Fusion.BitSet512 other)

Disassembly:
	0x01E8AB18 CMP W9, W8
	0x01E8AB1C CSET W0, EQ
	0x01E8AB20 B 0x1E8AB28
	0x01E8AB24 MOV W0, W31
	0x01E8AB28 LDP X20, X19, [X31 + 0x10]
	0x01E8AB2C LDP X30, X21, [X31], #0x20
	0x01E8AB30 RET
	0x01E8AB34 LDP W8, W9, [X0]
	0x01E8AB38 MOVZ W10, 0x18D
	0x01E8AB3C MUL W8, W8, W10
	0x01E8AB40 EOR W0, W8, W9, 0x0
	0x01E8AB44 RET
	0x01E8AB48 UBFM X8, X0, 0x20, 0x3F
	0x01E8AB4C CMP W0, W1
	0x01E8AB50 UBFM X9, X1, 0x20, 0x3F
	0x01E8AB54 CSET W10, EQ
	0x01E8AB58 CMP W8, W9
	0x01E8AB5C CSET W8, EQ
	0x01E8AB60 AND W0, W10, W8, 0x0
	0x01E8AB64 RET
	0x01E8AB68 UBFM X8, X0, 0x20, 0x3F
	0x01E8AB6C CMP W0, W1
	0x01E8AB70 UBFM X9, X1, 0x20, 0x3F
	0x01E8AB74 CSET W10, NE
	0x01E8AB78 CMP W8, W9
	0x01E8AB7C CSET W8, NE
	0x01E8AB80 ORR W0, W10, W8, 0x0
	0x01E8AB84 RET
	0x01E8AB88 STR X30, [X31 - 0x20]!

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 Or X8, X8, X9
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 Or X8, X8, X10
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 Or X8, X8, X9
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 Or X8, X8, X10
	016 Move [X0+24], X8
	017 Move X8, [X1+32]
	018 Move X9, [X0+32]
	019 Move X10, [X0+40]
	020 Or X8, X8, X9
	021 Move [X0+32], X8
	022 Move X8, [X1+40]
	023 Or X8, X8, X10
	024 Move [X0+40], X8
	025 Move X8, [X1+48]
	026 Move X9, [X0+48]
	027 Move X10, [X0+56]
	028 Or X8, X8, X9
	029 Move [X0+48], X8
	030 Move X8, [X1+56]
	031 Or X8, X8, X10
	032 Move [X0+56], X8
	033 Return 

Method: System.Void Xor(Fusion.BitSet512 other)

Disassembly:
	0x01E8AB8C STP X20, X19, [X31 + 0x10]
	0x01E8AB90 ADRP X20, 0x254E000
	0x01E8AB94 LDRB W8, [X20 + 0xE90]
	0x01E8AB98 LDR W19, [X0]
	0x01E8AB9C CBNZ W8, 0x1E8ABB4
	0x01E8ABA0 ADRP X0, 0x2270000
	0x01E8ABA4 LDR X0, [X0 + 0xC68]
	0x01E8ABA8 BL 0x1C16CF4
	0x01E8ABAC MOVZ W8, 0x1
	0x01E8ABB0 STRB W8, [X20 + 0xE90]
	0x01E8ABB4 ADRP X8, 0x2270000
	0x01E8ABB8 LDR X8, [X8 + 0xC68]
	0x01E8ABBC LDR X0, [X8]
	0x01E8ABC0 LDR W8, [X0 + 0xE0]
	0x01E8ABC4 CBNZ W8, 0x1E8ABCC
	0x01E8ABC8 BL 0x1C16DFC
	0x01E8ABCC AND W8, W19, 0x1
	0x01E8ABD0 SUB W8, W31, W8
	0x01E8ABD4 EOR W8, W8, W19, 0x1
	0x01E8ABD8 LDP X20, X19, [X31 + 0x10]
	0x01E8ABDC MOVZ W9, 0x3A800000
	0x01E8ABE0 SCVTF S0, W8
	0x01E8ABE4 FMOV S1, W9
	0x01E8ABE8 FMUL S0, S0, S1
	0x01E8ABEC LDR X30, [X31], #0x20
	0x01E8ABF0 RET
	0x01E8ABF4 STR D8, [X31 - 0x20]!
	0x01E8ABF8 STR X30, [X31 + 0x8]
	0x01E8ABFC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 Xor X8, X8, X9
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 Xor X8, X8, X10
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 Xor X8, X8, X9
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 Xor X8, X8, X10
	016 Move [X0+24], X8
	017 Move X8, [X1+32]
	018 Move X9, [X0+32]
	019 Move X10, [X0+40]
	020 Xor X8, X8, X9
	021 Move [X0+32], X8
	022 Move X8, [X1+40]
	023 Xor X8, X8, X10
	024 Move [X0+40], X8
	025 Move X8, [X1+48]
	026 Move X9, [X0+48]
	027 Move X10, [X0+56]
	028 Xor X8, X8, X9
	029 Move [X0+48], X8
	030 Move X8, [X1+56]
	031 Xor X8, X8, X10
	032 Move [X0+56], X8
	033 Return 

Method: System.Void AndNot(Fusion.BitSet512 other)

Disassembly:
	0x01E8AC00 ADRP X20, 0x254E000
	0x01E8AC04 LDRB W8, [X20 + 0xE8F]
	0x01E8AC08 MOV V8.16B, V0.16B
	0x01E8AC0C MOV X19, X0
	0x01E8AC10 CBNZ W8, 0x1E8AC28
	0x01E8AC14 ADRP X0, 0x2270000
	0x01E8AC18 LDR X0, [X0 + 0xC68]
	0x01E8AC1C BL 0x1C16CF4
	0x01E8AC20 MOVZ W8, 0x1
	0x01E8AC24 STRB W8, [X20 + 0xE8F]
	0x01E8AC28 ADRP X8, 0x2270000
	0x01E8AC2C LDR X8, [X8 + 0xC68]
	0x01E8AC30 LDR X0, [X8]
	0x01E8AC34 LDR W8, [X0 + 0xE0]
	0x01E8AC38 CBNZ W8, 0x1E8AC40
	0x01E8AC3C BL 0x1C16DFC
	0x01E8AC40 FMOV W8, S8
	0x01E8AC44 MOVZ W9, 0x44800000
	0x01E8AC48 UBFM W8, W8, 0x1F, 0x1F
	0x01E8AC4C FMOV S0, 0.5
	0x01E8AC50 FMOV S1, W9
	0x01E8AC54 UCVTF S2, W8
	0x01E8AC58 MOVZ W9, 0x7F800000
	0x01E8AC5C FMUL S1, S8, S1
	0x01E8AC60 FSUB S0, S0, S2
	0x01E8AC64 FMOV S2, W9
	0x01E8AC68 FADD S0, S1, S0
	0x01E8AC6C FCVTZS W8, S0
	0x01E8AC70 FCMP S0, S2

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move X10, [X0+8]
	004 NotImplemented "Instruction BIC not yet implemented."
	005 Move [X0], X8
	006 Move X8, [X1+8]
	007 NotImplemented "Instruction BIC not yet implemented."
	008 Move [X0+8], X8
	009 Move X8, [X1+16]
	010 Move X9, [X0+16]
	011 Move X10, [X0+24]
	012 NotImplemented "Instruction BIC not yet implemented."
	013 Move [X0+16], X8
	014 Move X8, [X1+24]
	015 NotImplemented "Instruction BIC not yet implemented."
	016 Move [X0+24], X8
	017 Move X8, [X1+32]
	018 Move X9, [X0+32]
	019 Move X10, [X0+40]
	020 NotImplemented "Instruction BIC not yet implemented."
	021 Move [X0+32], X8
	022 Move X8, [X1+40]
	023 NotImplemented "Instruction BIC not yet implemented."
	024 Move [X0+40], X8
	025 Move X8, [X1+48]
	026 Move X9, [X0+48]
	027 Move X10, [X0+56]
	028 NotImplemented "Instruction BIC not yet implemented."
	029 Move [X0+48], X8
	030 Move X8, [X1+56]
	031 NotImplemented "Instruction BIC not yet implemented."
	032 Move [X0+56], X8
	033 Return 

Method: System.Void Not()

Disassembly:
	0x01E8AC74 MOVZ W9, 0x80000000
	0x01E8AC78 CSEL W8, W9, W8, EQ
	0x01E8AC7C SBFM W9, W8, 0x1F, 0x1F
	0x01E8AC80 EOR W8, W9, W8, 0x1
	0x01E8AC84 STR W8, [X19]
	0x01E8AC88 LDP X20, X19, [X31 + 0x10]
	0x01E8AC8C LDR X30, [X31 + 0x8]
	0x01E8AC90 LDR V8, [X31], #0x20
	0x01E8AC94 RET
	0x01E8AC98 STR X30, [X31 - 0x20]!
	0x01E8AC9C STP X20, X19, [X31 + 0x10]
	0x01E8ACA0 ADRP X20, 0x254E000
	0x01E8ACA4 LDRB W8, [X20 + 0xE90]
	0x01E8ACA8 LDR W19, [X0 + 0x4]
	0x01E8ACAC CBNZ W8, 0x1E8ACC4
	0x01E8ACB0 ADRP X0, 0x2270000
	0x01E8ACB4 LDR X0, [X0 + 0xC68]

ISIL:
	001 Move X8, [X0]
	002 Move X9, [X0+8]
	003 Move X10, [X0+16]
	004 Move X11, [X0+24]
	005 NotImplemented "Instruction ORN not yet implemented."
	006 NotImplemented "Instruction ORN not yet implemented."
	007 Move [X0], X8
	008 Move [X0+8], X9
	009 Move X8, [X0+32]
	010 Move X9, [X0+40]
	011 NotImplemented "Instruction ORN not yet implemented."
	012 NotImplemented "Instruction ORN not yet implemented."
	013 Move [X0+16], X10
	014 Move [X0+24], X11
	015 Move X10, [X0+48]
	016 Move X11, [X0+56]
	017 NotImplemented "Instruction ORN not yet implemented."
	018 NotImplemented "Instruction ORN not yet implemented."
	019 Move [X0+32], X8
	020 Move [X0+40], X9
	021 NotImplemented "Instruction ORN not yet implemented."
	022 NotImplemented "Instruction ORN not yet implemented."
	023 Move [X0+48], X8
	024 Move [X0+56], X9
	025 Return 

Method: System.Void ClearAll()

Disassembly:
	0x01E8ACB8 BL 0x1C16CF4
	0x01E8ACBC MOVZ W8, 0x1
	0x01E8ACC0 STRB W8, [X20 + 0xE90]
	0x01E8ACC4 ADRP X8, 0x2270000

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X0], V0
	003 Move [X0+8], V0
	004 Move [X0+32], V0
	005 Move [X0+40], V0
	006 Return 

Method: System.Boolean IsSet(System.Int32 bit)

Disassembly:
	0x01E8ACC8 LDR X8, [X8 + 0xC68]
	0x01E8ACCC LDR X0, [X8]
	0x01E8ACD0 LDR W8, [X0 + 0xE0]
	0x01E8ACD4 CBNZ W8, 0x1E8ACDC
	0x01E8ACD8 BL 0x1C16DFC
	0x01E8ACDC AND W8, W19, 0x1
	0x01E8ACE0 SUB W8, W31, W8
	0x01E8ACE4 EOR W8, W8, W19, 0x1

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X8, [X0]
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0

Method: System.Int32 GetSetCount()

Disassembly:
	0x01E8ACE8 LDP X20, X19, [X31 + 0x10]
	0x01E8ACEC MOVZ W9, 0x3A800000
	0x01E8ACF0 SCVTF S0, W8
	0x01E8ACF4 FMOV S1, W9
	0x01E8ACF8 FMUL S0, S0, S1
	0x01E8ACFC LDR X30, [X31], #0x20
	0x01E8AD00 RET
	0x01E8AD04 STR D8, [X31 - 0x20]!
	0x01E8AD08 STR X30, [X31 + 0x8]
	0x01E8AD0C STP X20, X19, [X31 + 0x10]
	0x01E8AD10 ADRP X20, 0x254E000
	0x01E8AD14 LDRB W8, [X20 + 0xE8F]
	0x01E8AD18 MOV V8.16B, V0.16B
	0x01E8AD1C MOV X19, X0
	0x01E8AD20 CBNZ W8, 0x1E8AD38
	0x01E8AD24 ADRP X0, 0x2270000
	0x01E8AD28 LDR X0, [X0 + 0xC68]
	0x01E8AD2C BL 0x1C16CF4
	0x01E8AD30 MOVZ W8, 0x1
	0x01E8AD34 STRB W8, [X20 + 0xE8F]
	0x01E8AD38 ADRP X8, 0x2270000
	0x01E8AD3C LDR X8, [X8 + 0xC68]
	0x01E8AD40 LDR X0, [X8]
	0x01E8AD44 LDR W8, [X0 + 0xE0]
	0x01E8AD48 CBNZ W8, 0x1E8AD50
	0x01E8AD4C BL 0x1C16DFC
	0x01E8AD50 FMOV W8, S8
	0x01E8AD54 MOVZ W9, 0x44800000
	0x01E8AD58 UBFM W8, W8, 0x1F, 0x1F
	0x01E8AD5C FMOV S0, 0.5
	0x01E8AD60 FMOV S1, W9
	0x01E8AD64 UCVTF S2, W8
	0x01E8AD68 MOVZ W9, 0x7F800000
	0x01E8AD6C FMUL S1, S8, S1
	0x01E8AD70 FSUB S0, S0, S2
	0x01E8AD74 FMOV S2, W9
	0x01E8AD78 FADD S0, S1, S0
	0x01E8AD7C FCVTZS W8, S0
	0x01E8AD80 FCMP S0, S2
	0x01E8AD84 MOVZ W9, 0x80000000
	0x01E8AD88 CSEL W8, W9, W8, EQ
	0x01E8AD8C SBFM W9, W8, 0x1F, 0x1F
	0x01E8AD90 EOR W8, W9, W8, 0x1
	0x01E8AD94 STR W8, [X19 + 0x4]
	0x01E8AD98 LDP X20, X19, [X31 + 0x10]
	0x01E8AD9C LDR X30, [X31 + 0x8]
	0x01E8ADA0 LDR V8, [X31], #0x20
	0x01E8ADA4 RET
	0x01E8ADA8 STR X30, [X31 - 0x20]!
	0x01E8ADAC STP X20, X19, [X31 + 0x10]
	0x01E8ADB0 ADRP X20, 0x254E000
	0x01E8ADB4 LDRB W8, [X20 + 0xE90]
	0x01E8ADB8 LDR W19, [X0 + 0x8]
	0x01E8ADBC CBNZ W8, 0x1E8ADD4
	0x01E8ADC0 ADRP X0, 0x2270000
	0x01E8ADC4 LDR X0, [X0 + 0xC68]
	0x01E8ADC8 BL 0x1C16CF4
	0x01E8ADCC MOVZ W8, 0x1
	0x01E8ADD0 STRB W8, [X20 + 0xE90]
	0x01E8ADD4 ADRP X8, 0x2270000
	0x01E8ADD8 LDR X8, [X8 + 0xC68]
	0x01E8ADDC LDR X0, [X8]
	0x01E8ADE0 LDR W8, [X0 + 0xE0]
	0x01E8ADE4 CBNZ W8, 0x1E8ADEC
	0x01E8ADE8 BL 0x1C16DFC
	0x01E8ADEC AND W8, W19, 0x1
	0x01E8ADF0 SUB W8, W31, W8
	0x01E8ADF4 EOR W8, W8, W19, 0x1
	0x01E8ADF8 LDP X20, X19, [X31 + 0x10]
	0x01E8ADFC MOVZ W9, 0x3A800000
	0x01E8AE00 SCVTF S0, W8
	0x01E8AE04 FMOV S1, W9
	0x01E8AE08 FMUL S0, S0, S1
	0x01E8AE0C LDR X30, [X31], #0x20
	0x01E8AE10 RET
	0x01E8AE14 STR D8, [X31 - 0x20]!
	0x01E8AE18 STR X30, [X31 + 0x8]
	0x01E8AE1C STP X20, X19, [X31 + 0x10]
	0x01E8AE20 ADRP X20, 0x254E000
	0x01E8AE24 LDRB W8, [X20 + 0xE8F]
	0x01E8AE28 MOV V8.16B, V0.16B
	0x01E8AE2C MOV X19, X0
	0x01E8AE30 CBNZ W8, 0x1E8AE48
	0x01E8AE34 ADRP X0, 0x2270000
	0x01E8AE38 LDR X0, [X0 + 0xC68]
	0x01E8AE3C BL 0x1C16CF4
	0x01E8AE40 MOVZ W8, 0x1
	0x01E8AE44 STRB W8, [X20 + 0xE8F]
	0x01E8AE48 ADRP X8, 0x2270000
	0x01E8AE4C LDR X8, [X8 + 0xC68]
	0x01E8AE50 LDR X0, [X8]
	0x01E8AE54 LDR W8, [X0 + 0xE0]
	0x01E8AE58 CBNZ W8, 0x1E8AE60
	0x01E8AE5C BL 0x1C16DFC
	0x01E8AE60 FMOV W8, S8
	0x01E8AE64 MOVZ W9, 0x44800000
	0x01E8AE68 UBFM W8, W8, 0x1F, 0x1F
	0x01E8AE6C FMOV S0, 0.5
	0x01E8AE70 FMOV S1, W9
	0x01E8AE74 UCVTF S2, W8
	0x01E8AE78 MOVZ W9, 0x7F800000
	0x01E8AE7C FMUL S1, S8, S1
	0x01E8AE80 FSUB S0, S0, S2
	0x01E8AE84 FMOV S2, W9
	0x01E8AE88 FADD S0, S1, S0
	0x01E8AE8C FCVTZS W8, S0
	0x01E8AE90 FCMP S0, S2
	0x01E8AE94 MOVZ W9, 0x80000000
	0x01E8AE98 CSEL W8, W9, W8, EQ
	0x01E8AE9C SBFM W9, W8, 0x1F, 0x1F
	0x01E8AEA0 EOR W8, W9, W8, 0x1
	0x01E8AEA4 STR W8, [X19 + 0x8]
	0x01E8AEA8 LDP X20, X19, [X31 + 0x10]
	0x01E8AEAC LDR X30, [X31 + 0x8]
	0x01E8AEB0 LDR V8, [X31], #0x20
	0x01E8AEB4 RET
	0x01E8AEB8 STR D10, [X31 - 0x40]!
	0x01E8AEBC STP D9, D8, [X31 + 0x8]
	0x01E8AEC0 STR X30, [X31 + 0x18]
	0x01E8AEC4 STP X22, X21, [X31 + 0x20]
	0x01E8AEC8 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2550000
	006 Move X20, 0x2271000
	007 Move W8, [X21+560]
	008 Move X20, [X20+3176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2271000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+560], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X9, X20
	026 ShiftRight X9, 1
	027 And X9, X9, 0x7FFFFFFF
	028 Move X10, [X19+8]
	029 Move X11, [X19+16]
	030 And X9, X9, 0x5555555555555555
	031 Subtract X9, X20, X9
	032 And X17, X9, 0x3333333333333333
	033 Move X9, X9
	034 ShiftRight X9, 2
	035 And X9, X9, 0x7FFFFFFF
	036 And X9, X9, 0x3333333333333333
	037 Move X12, [X19+24]
	038 Move X13, [X19+32]
	039 Add X9, X9, X17
	040 Move X17, X10
	041 ShiftRight X17, 1
	042 And X17, X17, 0x7FFFFFFF
	043 And X17, X17, 0x5555555555555555
	044 Subtract X10, X10, X17
	045 Move X17, X11
	046 ShiftRight X17, 1
	047 And X17, X17, 0x7FFFFFFF
	048 And X17, X17, 0x5555555555555555
	049 Move X14, [X19+40]
	050 Move X15, [X19+48]
	051 Subtract X11, X11, X17
	052 Move X17, X12
	053 ShiftRight X17, 1
	054 And X17, X17, 0x7FFFFFFF
	055 And X17, X17, 0x5555555555555555
	056 Subtract X12, X12, X17
	057 Move X17, X13
	058 ShiftRight X17, 1
	059 And X17, X17, 0x7FFFFFFF
	060 And X17, X17, 0x5555555555555555
	061 Move X16, [X19+56]
	062 Subtract X13, X13, X17
	063 Move X17, X14
	064 ShiftRight X17, 1
	065 And X17, X17, 0x7FFFFFFF
	066 And X17, X17, 0x5555555555555555
	067 Subtract X14, X14, X17
	068 Move X17, X15
	069 ShiftRight X17, 1
	070 And X17, X17, 0x7FFFFFFF
	071 And X17, X17, 0x5555555555555555
	072 Subtract X15, X15, X17
	073 Move X17, X16
	074 ShiftRight X17, 1
	075 And X17, X17, 0x7FFFFFFF
	076 And X17, X17, 0x5555555555555555
	077 Subtract X16, X16, X17
	078 And X17, X10, 0x3333333333333333
	079 Move X10, X10
	080 ShiftRight X10, 2
	081 And X10, X10, 0x7FFFFFFF
	082 And X10, X10, 0x3333333333333333
	083 Add X10, X10, X17
	084 And X17, X11, 0x3333333333333333
	085 Move X11, X11
	086 ShiftRight X11, 2
	087 And X11, X11, 0x7FFFFFFF
	088 And X11, X11, 0x3333333333333333
	089 Add X11, X11, X17
	090 And X17, X12, 0x3333333333333333
	091 Move X12, X12
	092 ShiftRight X12, 2
	093 And X12, X12, 0x7FFFFFFF
	094 And X12, X12, 0x3333333333333333
	095 Add X12, X12, X17
	096 And X17, X13, 0x3333333333333333
	097 Move X13, X13
	098 ShiftRight X13, 2
	099 And X13, X13, 0x7FFFFFFF
	100 And X13, X13, 0x3333333333333333
	101 Add X13, X13, X17
	102 And X17, X14, 0x3333333333333333
	103 Move X14, X14
	104 ShiftRight X14, 2
	105 And X14, X14, 0x7FFFFFFF
	106 Add X9, X9, X9
	107 And X14, X14, 0x3333333333333333
	108 Add X10, X10, X10
	109 Or X8, X31, 0x101010101010101
	110 And X9, X9, 0xF0F0F0F0F0F0F0F
	111 Add X14, X14, X17
	112 And X17, X15, 0x3333333333333333
	113 Move X15, X15
	114 ShiftRight X15, 2
	115 And X15, X15, 0x7FFFFFFF
	116 Add X11, X11, X11
	117 And X10, X10, 0xF0F0F0F0F0F0F0F
	118 And X15, X15, 0x3333333333333333
	119 Multiply X9, X9, X8
	120 Add X12, X12, X12
	121 And X11, X11, 0xF0F0F0F0F0F0F0F
	122 Multiply X10, X10, X8
	123 Add X15, X15, X17
	124 And X17, X16, 0x3333333333333333
	125 Move X16, X16
	126 ShiftRight X16, 2
	127 And X16, X16, 0x7FFFFFFF
	128 Move X9, X9
	129 ShiftRight X9, 56
	130 And X9, X9, 0x7FFFFFFF
	131 Add X13, X13, X13
	132 And X12, X12, 0xF0F0F0F0F0F0F0F
	133 Multiply X11, X11, X8
	134 Move X10, X10
	135 ShiftRight X10, 56
	136 And X10, X10, 0x7FFFFFFF
	137 And X16, X16, 0x3333333333333333
	138 Add X14, X14, X14
	139 And X13, X13, 0xF0F0F0F0F0F0F0F
	140 Multiply X12, X12, X8
	141 Move X11, X11
	142 ShiftRight X11, 56
	143 And X11, X11, 0x7FFFFFFF
	144 Add W9, W10, W9
	145 Add X16, X16, X17
	146 Add X15, X15, X15
	147 And X14, X14, 0xF0F0F0F0F0F0F0F
	148 Multiply X13, X13, X8
	149 Move X12, X12
	150 ShiftRight X12, 56
	151 And X12, X12, 0x7FFFFFFF
	152 Add W9, W9, W11
	153 Add X16, X16, X16
	154 And X15, X15, 0xF0F0F0F0F0F0F0F
	155 Multiply X14, X14, X8
	156 Move X13, X13
	157 ShiftRight X13, 56
	158 And X13, X13, 0x7FFFFFFF
	159 Add W9, W9, W12
	160 And X16, X16, 0xF0F0F0F0F0F0F0F
	161 Multiply X15, X15, X8
	162 Move X14, X14
	163 ShiftRight X14, 56
	164 And X14, X14, 0x7FFFFFFF
	165 Add W9, W9, W13
	166 Move X20, [X31+16]
	167 Move X19, [X31+24]
	168 Multiply X8, X16, X8
	169 Move X15, X15
	170 ShiftRight X15, 56
	171 And X15, X15, 0x7FFFFFFF
	172 Add W9, W9, W14
	173 Move X8, X8
	174 ShiftRight X8, 56
	175 And X8, X8, 0x7FFFFFFF
	176 Add W9, W9, W15
	177 Add W0, W9, W8
	178 Move X30, [X31+32]
	179 Move X21, [X31+40]
	180 Return X0

Method: System.Boolean Any()

Disassembly:
	0x01E8AECC ADRP X19, 0x254E000
	0x01E8AED0 LDRB W8, [X19 + 0xE8F]
	0x01E8AED4 MOV V8.16B, V2.16B
	0x01E8AED8 MOV V9.16B, V1.16B
	0x01E8AEDC MOV V10.16B, V0.16B
	0x01E8AEE0 CBNZ W8, 0x1E8AEF8
	0x01E8AEE4 ADRP X0, 0x2270000
	0x01E8AEE8 LDR X0, [X0 + 0xC68]
	0x01E8AEEC BL 0x1C16CF4
	0x01E8AEF0 MOVZ W8, 0x1
	0x01E8AEF4 STRB W8, [X19 + 0xE8F]
	0x01E8AEF8 ADRP X20, 0x2270000
	0x01E8AEFC LDR X20, [X20 + 0xC68]
	0x01E8AF00 LDR X0, [X20]
	0x01E8AF04 LDR W8, [X0 + 0xE0]
	0x01E8AF08 CBZ W8, 0x1E8AF14
	0x01E8AF0C MOV W8, W31
	0x01E8AF10 B 0x1E8AF24
	0x01E8AF14 BL 0x1C16DFC
	0x01E8AF18 LDRB W8, [X19 + 0xE8F]

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfNotEqual {22}
	004 Move X8, [X0+8]
	005 Compare X8, 0
	006 JumpIfNotEqual {22}
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfNotEqual {22}
	010 Move X8, [X0+24]
	011 Compare X8, 0
	012 JumpIfNotEqual {22}
	013 Move X8, [X0+32]
	014 Compare X8, 0
	015 JumpIfNotEqual {22}
	016 Move X8, [X0+40]
	017 Compare X8, 0
	018 JumpIfNotEqual {22}
	019 Move X8, [X0+48]
	020 Compare X8, 0
	021 JumpIfEqual {24}
	022 Move W0, 1
	023 Return X0
	024 Move X8, [X0+56]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Return X0

Method: System.Boolean Empty()

Disassembly:
	0x01E8AF1C CMP W8, 0x0
	0x01E8AF20 CSET W8, EQ
	0x01E8AF24 FMOV W9, S10
	0x01E8AF28 MOVZ W10, 0x44800000
	0x01E8AF2C UBFM W9, W9, 0x1F, 0x1F
	0x01E8AF30 FMOV S0, 0.5
	0x01E8AF34 FMOV S1, W10
	0x01E8AF38 UCVTF S2, W9
	0x01E8AF3C MOVZ W11, 0x7F800000
	0x01E8AF40 FMUL S1, S10, S1
	0x01E8AF44 FSUB S0, S0, S2
	0x01E8AF48 FMOV S3, W11
	0x01E8AF4C FADD S0, S1, S0
	0x01E8AF50 FCVTZS W9, S0
	0x01E8AF54 FCMP S0, S3
	0x01E8AF58 MOVZ W10, 0x80000000
	0x01E8AF5C CSEL W21, W10, W9, EQ
	0x01E8AF60 CBZ W8, 0x1E8AF78
	0x01E8AF64 ADRP X0, 0x2270000
	0x01E8AF68 LDR X0, [X0 + 0xC68]

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfNotEqual {22}
	004 Move X8, [X0+8]
	005 Compare X8, 0
	006 JumpIfNotEqual {22}
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfNotEqual {22}
	010 Move X8, [X0+24]
	011 Compare X8, 0
	012 JumpIfNotEqual {22}
	013 Move X8, [X0+32]
	014 Compare X8, 0
	015 JumpIfNotEqual {22}
	016 Move X8, [X0+40]
	017 Compare X8, 0
	018 JumpIfNotEqual {22}
	019 Move X8, [X0+48]
	020 Compare X8, 0
	021 JumpIfEqual {24}
	022 Move W0, W31
	023 Return X0
	024 Move X8, [X0+56]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x01E8AF6C BL 0x1C16CF4
	0x01E8AF70 MOVZ W8, 0x1
	0x01E8AF74 STRB W8, [X19 + 0xE8F]
	0x01E8AF78 LDR X0, [X20]
	0x01E8AF7C LDR W8, [X0 + 0xE0]
	0x01E8AF80 CBZ W8, 0x1E8AF8C
	0x01E8AF84 MOV W8, W31
	0x01E8AF88 B 0x1E8AF9C
	0x01E8AF8C BL 0x1C16DFC
	0x01E8AF90 LDRB W8, [X19 + 0xE8F]
	0x01E8AF94 CMP W8, 0x0
	0x01E8AF98 CSET W8, EQ
	0x01E8AF9C FMOV W9, S9
	0x01E8AFA0 MOVZ W10, 0x44800000
	0x01E8AFA4 UBFM W9, W9, 0x1F, 0x1F
	0x01E8AFA8 FMOV S0, 0.5
	0x01E8AFAC FMOV S1, W10
	0x01E8AFB0 UCVTF S2, W9
	0x01E8AFB4 MOVZ W11, 0x7F800000
	0x01E8AFB8 FMUL S1, S9, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2550000
	006 Move X21, 0x2274000
	007 Move W8, [X20+561]
	008 Move X21, [X21+3824]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2274000
	015 Move X0, [X0+3824]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+561], W8
	019 Move X3, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 8
	024 Move W2, 43
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call HashCodeUtilities.GetArrayHashCode, X0, X1, X2
	028 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x01E8AFBC FSUB S0, S0, S2
	0x01E8AFC0 FMOV S3, W11
	0x01E8AFC4 FADD S0, S1, S0
	0x01E8AFC8 FCVTZS W9, S0
	0x01E8AFCC FCMP S0, S3
	0x01E8AFD0 MOVZ W10, 0x80000000
	0x01E8AFD4 CSEL W22, W10, W9, EQ
	0x01E8AFD8 CBZ W8, 0x1E8AFF0
	0x01E8AFDC ADRP X0, 0x2270000
	0x01E8AFE0 LDR X0, [X0 + 0xC68]
	0x01E8AFE4 BL 0x1C16CF4
	0x01E8AFE8 MOVZ W8, 0x1
	0x01E8AFEC STRB W8, [X19 + 0xE8F]
	0x01E8AFF0 LDR X0, [X20]
	0x01E8AFF4 LDR W8, [X0 + 0xE0]
	0x01E8AFF8 CBNZ W8, 0x1E8B000
	0x01E8AFFC BL 0x1C16DFC
	0x01E8B000 SBFM W9, W21, 0x1F, 0x1F
	0x01E8B004 FMOV W10, S8
	0x01E8B008 EOR W0, W9, W21, 0x1
	0x01E8B00C MOVZ W9, 0x44800000
	0x01E8B010 UBFM W10, W10, 0x1F, 0x1F
	0x01E8B014 FMOV S0, 0.5
	0x01E8B018 FMOV S1, W9
	0x01E8B01C UCVTF S2, W10
	0x01E8B020 MOVZ W9, 0x7F800000
	0x01E8B024 FMUL S1, S8, S1
	0x01E8B028 FSUB S0, S0, S2
	0x01E8B02C SBFM W8, W22, 0x1F, 0x1F
	0x01E8B030 FMOV S2, W9
	0x01E8B034 FADD S0, S1, S0
	0x01E8B038 EOR W8, W8, W22, 0x1
	0x01E8B03C MOVZ W10, 0x80000000
	0x01E8B040 FCVTZS W9, S0
	0x01E8B044 FCMP S0, S2
	0x01E8B048 LDP X20, X19, [X31 + 0x30]
	0x01E8B04C LDP X22, X21, [X31 + 0x20]
	0x01E8B050 LDR X30, [X31 + 0x18]
	0x01E8B054 LDP D9, D8, [X31 + 0x8]
	0x01E8B058 CSEL W9, W10, W9, EQ
	0x01E8B05C SBFM W10, W9, 0x1F, 0x1F
	0x01E8B060 EOR W1, W10, W9, 0x1
	0x01E8B064 BFM X0, X8, 0x20, 0x1F
	0x01E8B068 LDR V10, [X31], #0x40
	0x01E8B06C RET
	0x01E8B070 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+96], X22
	004 Move [X31+104], X21
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x2550000
	010 Move X20, X1
	011 Move X19, X0
	012 Move [X31+72], X8
	013 Move W8, [X22+562]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2274000
	019 Move X0, [X0+3992]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+562], W8
	023 Compare X20, 0
	024 JumpIfEqual {30}
	025 Move X8, 0x2273000
	026 Move X8, [X8+3992]
	027 Move X9, [X20]
	028 Move X8, [X8]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W0, W31
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move V1, [X0+32]
	034 Move V0, [X0+48]
	035 Move V2, [X0]
	036 Move V3, [X0+16]
	037 Add X1, X31, 0
	038 Move X0, X19
	039 Move [X31+32], V1
	040 Move [X31+40], V0
	041 Move [X31], V2
	042 Move [X31+8], V3
	043 Call BitSet512.Equals, X0, X1
	044 Move X8, [X21+40]
	045 Move X9, [X31+72]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X20, [X31+112]
	048 Move X19, [X31+120]
	049 Move X22, [X31+96]
	050 Move X21, [X31+104]
	051 Move X30, [X31+80]
	052 And W0, W0, 1
	053 Add X31, X31, 128
	054 Return X0
	055 Call 0x3EB2B20

Method: System.Boolean Equals(Fusion.BitSet512 other)

Disassembly:
	0x01E8B074 STP X22, X21, [X31 + 0x10]
	0x01E8B078 STP X20, X19, [X31 + 0x20]
	0x01E8B07C ADRP X21, 0x254D000
	0x01E8B080 LDRB W8, [X21 + 0xE90]
	0x01E8B084 MOV X19, X1
	0x01E8B088 MOV X20, X0
	0x01E8B08C CBNZ W8, 0x1E8B0A4
	0x01E8B090 ADRP X0, 0x226F000
	0x01E8B094 LDR X0, [X0 + 0xC68]
	0x01E8B098 BL 0x1C16CF4
	0x01E8B09C MOVZ W8, 0x1
	0x01E8B0A0 STRB W8, [X21 + 0xE90]
	0x01E8B0A4 ADRP X22, 0x226F000
	0x01E8B0A8 LDR X22, [X22 + 0xC68]
	0x01E8B0AC LDR X0, [X22]
	0x01E8B0B0 LDR W8, [X0 + 0xE0]
	0x01E8B0B4 CBNZ W8, 0x1E8B0D8
	0x01E8B0B8 BL 0x1C16DFC
	0x01E8B0BC LDRB W8, [X21 + 0xE90]
	0x01E8B0C0 CBNZ W8, 0x1E8B0D8
	0x01E8B0C4 ADRP X0, 0x226F000
	0x01E8B0C8 LDR X0, [X0 + 0xC68]
	0x01E8B0CC BL 0x1C16CF4
	0x01E8B0D0 MOVZ W8, 0x1
	0x01E8B0D4 STRB W8, [X21 + 0xE90]
	0x01E8B0D8 LDR X0, [X22]
	0x01E8B0DC UBFM X23, X20, 0x20, 0x3F
	0x01E8B0E0 LDR W8, [X0 + 0xE0]
	0x01E8B0E4 CBNZ W8, 0x1E8B108
	0x01E8B0E8 BL 0x1C16DFC
	0x01E8B0EC LDRB W8, [X21 + 0xE90]
	0x01E8B0F0 CBNZ W8, 0x1E8B108
	0x01E8B0F4 ADRP X0, 0x226F000
	0x01E8B0F8 LDR X0, [X0 + 0xC68]
	0x01E8B0FC BL 0x1C16CF4

ISIL:
	001 Move X8, [X0]
	002 Move X9, [X1]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X8, [X0+8]
	005 Move X9, [X1+8]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X8, [X0+16]
	008 Move X9, [X1+16]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X0+24]
	011 Move X9, [X1+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X8, [X0+32]
	014 Move X9, [X1+32]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X8, [X0+40]
	017 Move X9, [X1+40]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X8, [X0+48]
	020 Move X9, [X1+48]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, [X0+56]
	023 Move X9, [X1+56]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Return X0
	027 Move W0, W31
	028 Return X0

Method: Fusion.BitSet512/Enumerator GetEnumerator()

Disassembly:
	0x01E8B100 MOVZ W8, 0x1
	0x01E8B104 STRB W8, [X21 + 0xE90]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W1, TEMP
	004 Return X0

Method: System.Collections.Generic.IEnumerator`1<System.Int32> System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator()

Disassembly:
	0x01E8B118 MOVZ W8, 0x3A800000
	0x01E8B11C AND W9, W20, 0x1
	0x01E8B120 AND W10, W19, 0x1
	0x01E8B124 FMOV S2, W8
	0x01E8B128 AND W8, W23, 0x1
	0x01E8B12C SUB W9, W31, W9
	0x01E8B130 SUB W10, W31, W10
	0x01E8B134 SUB W8, W31, W8
	0x01E8B138 EOR W9, W9, W20, 0x1
	0x01E8B13C EOR W10, W10, W19, 0x1
	0x01E8B140 LDP X20, X19, [X31 + 0x20]
	0x01E8B144 LDP X22, X21, [X31 + 0x10]
	0x01E8B148 EOR W8, W8, W23, 0x1
	0x01E8B14C SCVTF S0, W8
	0x01E8B150 SCVTF S3, W9
	0x01E8B154 SCVTF S4, W10
	0x01E8B158 FMUL S1, S0, S2
	0x01E8B15C FMUL S0, S3, S2
	0x01E8B160 FMUL S2, S4, S2
	0x01E8B164 LDP X30, X23, [X31], #0x30
	0x01E8B168 RET
	0x01E8B16C STP D9, D8, [X31 - 0x30]!
	0x01E8B170 STP X30, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x254F000
	007 Move X20, 0x2273000
	008 Move W8, [X21+563]
	009 Move X20, [X20+4000]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2273000
	016 Move X0, [X0+4000]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+563], W8
	020 Move X0, [X20]
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Add X1, X31, 0
	025 Move [X31], X19
	026 Move [X31+8], X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x01E8B174 STP X20, X19, [X31 + 0x20]
	0x01E8B178 ADRP X19, 0x254D000
	0x01E8B17C LDRB W8, [X19 + 0xE8F]
	0x01E8B180 MOV V8.16B, V1.16B
	0x01E8B184 MOV V9.16B, V0.16B
	0x01E8B188 CBNZ W8, 0x1E8B1A0
	0x01E8B18C ADRP X0, 0x226F000
	0x01E8B190 LDR X0, [X0 + 0xC68]
	0x01E8B194 BL 0x1C16CF4
	0x01E8B198 MOVZ W8, 0x1
	0x01E8B19C STRB W8, [X19 + 0xE8F]
	0x01E8B1A0 ADRP X20, 0x226F000
	0x01E8B1A4 LDR X20, [X20 + 0xC68]
	0x01E8B1A8 LDR X0, [X20]
	0x01E8B1AC LDR W8, [X0 + 0xE0]
	0x01E8B1B0 CBZ W8, 0x1E8B1BC
	0x01E8B1B4 MOV W8, W31
	0x01E8B1B8 B 0x1E8B1CC
	0x01E8B1BC BL 0x1C16DFC
	0x01E8B1C0 LDRB W8, [X19 + 0xE8F]
	0x01E8B1C4 CMP W8, 0x0
	0x01E8B1C8 CSET W8, EQ
	0x01E8B1CC FMOV W9, S9

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x254F000
	007 Move X20, 0x2273000
	008 Move W8, [X21+564]
	009 Move X20, [X20+4000]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2273000
	016 Move X0, [X0+4000]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+564], W8
	020 Move X0, [X20]
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Add X1, X31, 0
	025 Move [X31], X19
	026 Move [X31+8], X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Boolean op_Equality(Fusion.BitSet512 a, Fusion.BitSet512 b)

Disassembly:
	0x01E8B1D0 MOVZ W10, 0x44800000
	0x01E8B1D4 UBFM W9, W9, 0x1F, 0x1F
	0x01E8B1D8 FMOV S0, 0.5
	0x01E8B1DC FMOV S1, W10
	0x01E8B1E0 UCVTF S2, W9
	0x01E8B1E4 MOVZ W11, 0x7F800000
	0x01E8B1E8 FMUL S1, S9, S1
	0x01E8B1EC FSUB S0, S0, S2
	0x01E8B1F0 FMOV S3, W11
	0x01E8B1F4 FADD S0, S1, S0
	0x01E8B1F8 FCVTZS W9, S0
	0x01E8B1FC FCMP S0, S3
	0x01E8B200 MOVZ W10, 0x80000000
	0x01E8B204 CSEL W21, W10, W9, EQ
	0x01E8B208 CBZ W8, 0x1E8B220
	0x01E8B20C ADRP X0, 0x226F000
	0x01E8B210 LDR X0, [X0 + 0xC68]
	0x01E8B214 BL 0x1C16CF4
	0x01E8B218 MOVZ W8, 0x1
	0x01E8B21C STRB W8, [X19 + 0xE8F]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+80], X30
	003 Move [X31+88], X19
	004 NotImplemented "Instruction MRS not yet implemented."
	005 Move X8, [X19+40]
	006 Move [X31+72], X8
	007 Move V1, [X1+32]
	008 Move V0, [X1+48]
	009 Move V3, [X1]
	010 Move V2, [X1+16]
	011 Add X1, X31, 0
	012 Move [X31+32], V1
	013 Move [X31+40], V0
	014 Move [X31], V3
	015 Move [X31+8], V2
	016 Call BitSet512.Equals, X0, X1
	017 Move X8, [X19+40]
	018 Move X9, [X31+72]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X30, [X31+80]
	021 Move X19, [X31+88]
	022 And W0, W0, 1
	023 Add X31, X31, 96
	024 Return X0
	025 Call 0x3EB2B20

Method: System.Boolean op_Inequality(Fusion.BitSet512 a, Fusion.BitSet512 b)

Disassembly:
	0x01E8B220 LDR X0, [X20]
	0x01E8B224 LDR W8, [X0 + 0xE0]
	0x01E8B228 CBNZ W8, 0x1E8B230
	0x01E8B22C BL 0x1C16DFC
	0x01E8B230 SBFM W8, W21, 0x1F, 0x1F
	0x01E8B234 FMOV W9, S8
	0x01E8B238 EOR W0, W8, W21, 0x1
	0x01E8B23C MOVZ W8, 0x44800000
	0x01E8B240 UBFM W9, W9, 0x1F, 0x1F
	0x01E8B244 FMOV S0, 0.5
	0x01E8B248 FMOV S1, W8
	0x01E8B24C UCVTF S2, W9
	0x01E8B250 MOVZ W8, 0x7F800000
	0x01E8B254 FMUL S1, S8, S1
	0x01E8B258 FSUB S0, S0, S2
	0x01E8B25C FMOV S2, W8
	0x01E8B260 FADD S0, S1, S0
	0x01E8B264 FCVTZS W8, S0
	0x01E8B268 FCMP S0, S2
	0x01E8B26C MOVZ W9, 0x80000000
	0x01E8B270 CSEL W8, W9, W8, EQ

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+80], X30
	003 Move [X31+88], X19
	004 NotImplemented "Instruction MRS not yet implemented."
	005 Move X8, [X19+40]
	006 Move [X31+72], X8
	007 Move V1, [X1+32]
	008 Move V0, [X1+48]
	009 Move V3, [X1]
	010 Move V2, [X1+16]
	011 Add X1, X31, 0
	012 Move [X31+32], V1
	013 Move [X31+40], V0
	014 Move [X31], V3
	015 Move [X31+8], V2
	016 Call BitSet512.Equals, X0, X1
	017 Move X8, [X19+40]
	018 Move X9, [X31+72]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X30, [X31+80]
	021 Move X19, [X31+88]
	022 Xor W8, W0, 1
	023 And W0, W8, 1
	024 Add X31, X31, 96
	025 Return X0
	026 Call 0x3EB2B20

