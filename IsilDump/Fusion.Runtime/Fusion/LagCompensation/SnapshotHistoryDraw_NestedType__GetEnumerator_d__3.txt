Type: Fusion.LagCompensation.SnapshotHistoryDraw/<GetEnumerator>d__3

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01EEAF7C STP X20, X19, [X31 + 0x50]
	0x01EEAF80 ADRP X24, 0x24EF000
	0x01EEAF84 ADRP X23, 0x2209000
	0x01EEAF88 LDRB W8, [X24 + 0x5B7]
	0x01EEAF8C LDR X23, [X23 + 0x5A8]
	0x01EEAF90 MOV V8.16B, V0.16B
	0x01EEAF94 MOV W22, W3
	0x01EEAF98 MOV X20, X2
	0x01EEAF9C MOV X21, X1
	0x01EEAFA0 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01EEAFA8 ADRP X0, 0x2216000

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01EEAFAC LDR X0, [X0 + 0x340]
	0x01EEAFB0 BL 0x1C16CF4
	0x01EEAFB4 ADRP X0, 0x2216000
	0x01EEAFB8 LDR X0, [X0 + 0x438]
	0x01EEAFBC BL 0x1C16CF4
	0x01EEAFC0 ADRP X0, 0x2216000
	0x01EEAFC4 LDR X0, [X0 + 0x440]
	0x01EEAFC8 BL 0x1C16CF4
	0x01EEAFCC ADRP X0, 0x2216000
	0x01EEAFD0 LDR X0, [X0 + 0x448]
	0x01EEAFD4 BL 0x1C16CF4
	0x01EEAFD8 ADRP X0, 0x2216000
	0x01EEAFDC LDR X0, [X0 + 0x570]
	0x01EEAFE0 BL 0x1C16CF4
	0x01EEAFE4 ADRP X0, 0x2216000
	0x01EEAFE8 LDR X0, [X0 + 0x450]
	0x01EEAFEC BL 0x1C16CF4
	0x01EEAFF0 ADRP X0, 0x2209000
	0x01EEAFF4 LDR X0, [X0 + 0x5A8]
	0x01EEAFF8 BL 0x1C16CF4
	0x01EEAFFC MOVZ W8, 0x1
	0x01EEB000 STRB W8, [X24 + 0x5B7]
	0x01EEB004 ADRP X24, 0x2215000
	0x01EEB008 LDR X24, [X24 + 0x570]
	0x01EEB00C MOVZ W8, 0x1
	0x01EEB010 MOV X0, X19
	0x01EEB014 MOV X1, X31
	0x01EEB018 STP X31, X31, [X31 + 0x8]
	0x01EEB01C STR X31, [X31 + 0x18]
	0x01EEB020 STR W8, [X19 + 0x18]
	0x01EEB024 BL 0x33BDD8C
	0x01EEB028 LDR X0, [X23]
	0x01EEB02C LDR W8, [X0 + 0xE0]
	0x01EEB030 CBNZ W8, 0x1EEB038
	0x01EEB034 BL 0x1C16DFC
	0x01EEB038 MOVZ W0, 0x10
	0x01EEB03C MOV W1, W22
	0x01EEB040 MOV X2, X31
	0x01EEB044 BL 0x337EDF0
	0x01EEB048 LDR X8, [X24]
	0x01EEB04C MOV W22, W0
	0x01EEB050 MOV W1, W22
	0x01EEB054 MOV X0, X8
	0x01EEB058 BL 0x1C16D6C
	0x01EEB05C STR X0, [X19 + 0x10]
	0x01EEB060 CBZ X20, 0x1EEB0C4
	0x01EEB064 ADRP X8, 0x2215000
	0x01EEB068 LDR X8, [X8 + 0x450]
	0x01EEB06C ADRP X24, 0x2215000
	0x01EEB070 ADRP X23, 0x2215000
	0x01EEB074 MOV X0, X20
	0x01EEB078 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+16]
	006 Move X20, [X0+32]
	007 Move X19, X0
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Compare W8, 0
	010 JumpIfNotEqual {50}
	011 Move TEMP, 0
	012 Not TEMP
	013 Move W8, TEMP
	014 Move W21, W31
	015 Move [X19+16], W8
	016 Move [X19+40], W31
	017 Move W8, [X19+40]
	018 Move TEMP, 0
	019 Not TEMP
	020 Move W9, TEMP
	021 Move [X19+16], W9
	022 Add W21, W8, 1
	023 Move [X19+40], W21
	024 Compare X20, 0
	025 JumpIfEqual {60}
	026 Move X0, [X20+16]
	027 Compare X0, 0
	028 JumpIfEqual {60}
	029 Move X1, X31
	030 Call HitboxBuffer.get_Length, X0
	031 Move X8, [X20+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X20+16]
	034 Compare X9, 0
	035 JumpIfEqual {60}
	036 Move X9, [X9+16]
	037 Compare X9, 0
	038 JumpIfEqual {60}
	039 NotImplemented "Instruction LDRSW not yet implemented."
	040 Move W11, [X9+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Compare X8, 0
	043 JumpIfEqual {60}
	044 Add X9, X9, X10
	045 Move X9, [X9+32]
	046 Move W0, 1
	047 Move [X8+16], X9
	048 Move [X19+24], X8
	049 Move [X19+16], W0
	050 Move W0, W31
	051 Compare X8, 0
	052 JumpIfEqual {60}
	053 Move W0, W31
	054 Move [X8+16], X31
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return X0
	060 Call 0x1C17F20
	061 Call 0x1C17F28

Method: Fusion.LagCompensation.HitboxColliderContainerDraw System.Collections.Generic.IEnumerator<Fusion.LagCompensation.HitboxColliderContainerDraw>.get_Current()

Disassembly:
	0x01EEB07C LDR X24, [X24 + 0x440]
	0x01EEB080 LDR X23, [X23 + 0x438]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01EEB084 ADD X8, X31, 0x8
	0x01EEB088 BL 0x301CB58
	0x01EEB08C LDR X1, [X24]
	0x01EEB090 ADD X0, X31, 0x8
	0x01EEB094 BL 0x2BC4350
	0x01EEB098 TBZ X0, 0x0, 0x1EEB0B8
	0x01EEB09C LDR X0, [X31 + 0x18]
	0x01EEB0A0 CBZ X0, 0x1EEB114
	0x01EEB0A4 MOV X1, X19
	0x01EEB0A8 MOV W2, W31
	0x01EEB0AC MOV X3, X31
	0x01EEB0B0 BL 0x1E8529C
	0x01EEB0B4 B 0x1EEB08C
	0x01EEB0B8 LDR X1, [X23]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2209000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2216000
	011 Move X0, [X0+1256]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01EEB0BC ADD X0, X31, 0x8
	0x01EEB0C0 BL 0x2BC434C

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

