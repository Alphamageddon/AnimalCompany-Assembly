Type: Fusion.LagCompensation.LagCompensatedExt

Method: System.Void SortReference(System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, UnityEngine.Vector3 reference)

Disassembly:
	0x01EEBAD4 LDP X20, X19, [X31 + 0x30]
	0x01EEBAD8 ADD X31, X31, 0x40
	0x01EEBADC RET
	0x01EEBAE0 SUB X31, X31, 0x70
	0x01EEBAE4 STR D14, [X31 + 0x10]
	0x01EEBAE8 STP D13, D12, [X31 + 0x18]
	0x01EEBAEC STP D11, D10, [X31 + 0x28]
	0x01EEBAF0 STP D9, D8, [X31 + 0x38]
	0x01EEBAF4 STR X30, [X31 + 0x48]
	0x01EEBAF8 STP X22, X21, [X31 + 0x50]
	0x01EEBAFC STP X20, X19, [X31 + 0x60]
	0x01EEBB00 MOV X19, X8
	0x01EEBB04 LDRB W8, [X0 + 0x44]
	0x01EEBB08 ADD X20, X0, 0x4
	0x01EEBB0C CBNZ W8, 0x1EEBB9C
	0x01EEBB10 ADRP X22, 0x24ED000
	0x01EEBB14 LDR V8, [X0 + 0x1B8]
	0x01EEBB18 LDR V9, [X0 + 0x1BC]
	0x01EEBB1C LDR V10, [X0 + 0x1C0]
	0x01EEBB20 LDR V11, [X0 + 0x1C4]
	0x01EEBB24 LDR V12, [X0 + 0x1C8]
	0x01EEBB28 LDR V13, [X0 + 0x1CC]
	0x01EEBB2C LDRB W8, [X22 + 0x85B]
	0x01EEBB30 LDR V14, [X0 + 0x1D0]
	0x01EEBB34 MOV X21, X0
	0x01EEBB38 CBNZ W8, 0x1EEBB50
	0x01EEBB3C ADRP X0, 0x2208000
	0x01EEBB40 LDR X0, [X0 + 0x5A0]
	0x01EEBB44 BL 0x1C16CF4
	0x01EEBB48 MOVZ W8, 0x1
	0x01EEBB4C STRB W8, [X22 + 0x85B]
	0x01EEBB50 ADRP X8, 0x2208000
	0x01EEBB54 LDR X8, [X8 + 0x5A0]
	0x01EEBB58 MOV X0, X20
	0x01EEBB5C MOV V1.16B, V9.16B
	0x01EEBB60 MOV V2.16B, V10.16B
	0x01EEBB64 LDR X8, [X8]
	0x01EEBB68 MOV V3.16B, V11.16B
	0x01EEBB6C MOV V4.16B, V12.16B
	0x01EEBB70 MOV V5.16B, V13.16B
	0x01EEBB74 LDR X8, [X8 + 0xB8]
	0x01EEBB78 MOV V6.16B, V14.16B
	0x01EEBB7C LDR V0, [X8 + 0x14]
	0x01EEBB80 LDUR X9, [X8 + 0xC]
	0x01EEBB84 STR S0, [X31 + 0x8]
	0x01EEBB88 MOV V0.16B, V8.16B
	0x01EEBB8C STR X9, [X31]
	0x01EEBB90 BL 0x1EECFC8
	0x01EEBB94 MOVZ W8, 0x1
	0x01EEBB98 STRB W8, [X21 + 0x44]
	0x01EEBB9C LDP V1, V0, [X20 + 0x20]
	0x01EEBBA0 LDP V3, V2, [X20]
	0x01EEBBA4 LDP X22, X21, [X31 + 0x50]
	0x01EEBBA8 LDR X30, [X31 + 0x48]
	0x01EEBBAC STP V1, V0, [X19 + 0x20]
	0x01EEBBB0 STP V3, V2, [X19]
	0x01EEBBB4 LDP X20, X19, [X31 + 0x60]
	0x01EEBBB8 LDP D9, D8, [X31 + 0x38]
	0x01EEBBBC LDP D11, D10, [X31 + 0x28]
	0x01EEBBC0 LDP D13, D12, [X31 + 0x18]
	0x01EEBBC4 LDR V14, [X31 + 0x10]
	0x01EEBBC8 ADD X31, X31, 0x70
	0x01EEBBCC RET
	0x01EEBBD0 STR D10, [X31 - 0x30]!
	0x01EEBBD4 STP D9, D8, [X31 + 0x10]
	0x01EEBBD8 STP X30, X19, [X31 + 0x20]
	0x01EEBBDC MOVZ W1, 0x2
	0x01EEBBE0 MOV X2, X31
	0x01EEBBE4 MOV X19, X0
	0x01EEBBE8 BL 0x3C27C24
	0x01EEBBEC MOVZ W1, 0x1
	0x01EEBBF0 MOV X0, X19
	0x01EEBBF4 MOV X2, X31
	0x01EEBBF8 MOV V8.16B, V0.16B
	0x01EEBBFC MOV V9.16B, V1.16B
	0x01EEBC00 MOV V10.16B, V2.16B
	0x01EEBC04 BL 0x3C27C24
	0x01EEBC08 MOV V3.16B, V0.16B
	0x01EEBC0C MOV V4.16B, V1.16B
	0x01EEBC10 MOV V0.16B, V8.16B
	0x01EEBC14 MOV V1.16B, V9.16B
	0x01EEBC18 LDP X30, X19, [X31 + 0x20]
	0x01EEBC1C LDP D9, D8, [X31 + 0x10]
	0x01EEBC20 MOV V5.16B, V2.16B
	0x01EEBC24 MOV V2.16B, V10.16B
	0x01EEBC28 MOV X0, X31
	0x01EEBC2C LDR V10, [X31], #0x30
	0x01EEBC30 B 0x3C2A810
	0x01EEBC34 SUB X31, X31, 0x70

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+208], D11
	003 Move [X31+216], D10
	004 Move [X31+224], D9
	005 Move [X31+232], D8
	006 Move [X31+240], X29
	007 Move [X31+248], X30
	008 Move [X31+256], X24
	009 Move [X31+264], X23
	010 Move [X31+272], X22
	011 Move [X31+280], X21
	012 Move [X31+288], X20
	013 Move [X31+296], X19
	014 Move X20, 0x24EF000
	015 Move W8, [X20+1454]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0x2213000
	025 Move X0, [X0+3480]
	026 Call 0x1C17CF4
	027 Move X0, 0x2213000
	028 Move X0, [X0+3496]
	029 Call 0x1C17CF4
	030 Move X0, 0x2213000
	031 Move X0, [X0+3664]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+1454], W8
	035 Compare X19, 0
	036 JumpIfEqual {104}
	037 Move W8, [X19+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X22, 0x2213000
	040 Move X23, 0x2213000
	041 Move X22, [X22+3496]
	042 Move X23, [X23+3664]
	043 Move W20, W31
	044 Move X2, [X22]
	045 Add X8, X31, 104
	046 Move X0, X19
	047 Move W1, W20
	048 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	049 Add X0, X31, 8
	050 Add X1, X31, 104
	051 Move W2, 96
	052 Call 0x3EB2AC0
	053 Move X2, [X22]
	054 Move W24, [X31+204]
	055 Add X8, X31, 104
	056 Move X0, X19
	057 Move W1, W20
	058 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	059 Move S0, [X31+132]
	060 Move S1, [X31+136]
	061 Move V2, [X31+140]
	062 Move X21, [X23]
	063 Add X0, X31, 104
	064 Subtract S0, S0, S10
	065 Subtract S1, S1, S9
	066 Subtract S2, S2, S8
	067 Multiply S0, S0, S0
	068 Multiply S1, S1, S1
	069 Add S0, S0, S1
	070 Multiply S1, S2, S2
	071 Add X1, X31, 8
	072 Move W2, 96
	073 Add S11, S0, S1
	074 Call 0x3EB2AC0
	075 Add X2, X31, 104
	076 Move X0, X19
	077 Move W1, W20
	078 Move X3, X21
	079 Move [X31+200], S11
	080 Move [X31+204], W24
	081 Call List`1<LagCompensatedHit>.set_Item, X0, X1, X2
	082 Move W8, [X19+24]
	083 Add W20, W20, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Subtract W2, W8, 1
	086 Move X0, X19
	087 Move W1, W31
	088 Move X3, X31
	089 Call LagCompensatedHit.QuickSort, X0, X1, X2
	090 Move X20, [X31+288]
	091 Move X19, [X31+296]
	092 Move X22, [X31+272]
	093 Move X21, [X31+280]
	094 Move X24, [X31+256]
	095 Move X23, [X31+264]
	096 Move X29, [X31+240]
	097 Move X30, [X31+248]
	098 Move D9, [X31+224]
	099 Move D8, [X31+232]
	100 Move D11, [X31+208]
	101 Move D10, [X31+216]
	102 Add X31, X31, 304
	103 Return 
	104 Call 0x1C17F20

Method: System.Void SortDistance(System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits)

Disassembly:
	0x01EEBC38 STP X30, X23, [X31 + 0x40]
	0x01EEBC3C STP X22, X21, [X31 + 0x50]
	0x01EEBC40 STP X20, X19, [X31 + 0x60]
	0x01EEBC44 ADRP X21, 0x24EE000
	0x01EEBC48 LDRB W8, [X21 + 0x5B4]
	0x01EEBC4C MOV X20, X2
	0x01EEBC50 MOV X19, X1
	0x01EEBC54 TBNZ X8, 0x0, 0x1EEBC9C
	0x01EEBC58 ADRP X0, 0x220F000
	0x01EEBC5C LDR X0, [X0 + 0x830]
	0x01EEBC60 BL 0x1C16CF4
	0x01EEBC64 ADRP X0, 0x220F000
	0x01EEBC68 LDR X0, [X0 + 0x838]
	0x01EEBC6C BL 0x1C16CF4
	0x01EEBC70 ADRP X0, 0x220F000
	0x01EEBC74 LDR X0, [X0 + 0x840]
	0x01EEBC78 BL 0x1C16CF4
	0x01EEBC7C ADRP X0, 0x220F000
	0x01EEBC80 LDR X0, [X0 + 0x848]
	0x01EEBC84 BL 0x1C16CF4
	0x01EEBC88 ADRP X0, 0x2212000
	0x01EEBC8C LDR X0, [X0 + 0xE78]
	0x01EEBC90 BL 0x1C16CF4
	0x01EEBC94 MOVZ W8, 0x1
	0x01EEBC98 STRB W8, [X21 + 0x5B4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x24EF000
	005 Move W8, [X20+1455]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2213000
	012 Move X0, [X0+3480]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1455], W8
	016 Compare X19, 0
	017 JumpIfEqual {32}
	018 Move W8, [X19+24]
	019 Subtract W2, W8, 1
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, W31
	024 Move X3, X31
	025 Move X30, [X31+32]
	026 Call LagCompensatedHit.QuickSortDistance, X0, X1, X2
	027 Return 
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 
	032 Call 0x1C17F20

