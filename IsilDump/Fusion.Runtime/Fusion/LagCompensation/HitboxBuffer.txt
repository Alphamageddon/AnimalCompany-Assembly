Type: Fusion.LagCompensation.HitboxBuffer

Method: System.Int32 get_Length()

Disassembly:
	0x01EEBC9C STP X31, X31, [X31 + 0x20]
	0x01EEBCA0 STR X31, [X31 + 0x30]
	0x01EEBCA4 CBZ X20, 0x1EEBD8C
	0x01EEBCA8 ADRP X8, 0x220F000
	0x01EEBCAC LDR X8, [X8 + 0x848]
	0x01EEBCB0 ADRP X22, 0x220F000
	0x01EEBCB4 ADRP X23, 0x2212000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: Fusion.LagCompensation.BVH get_BVH()

Disassembly:
	0x01EEB9E4 STR S1, [X19 + 0x50]
	0x01EEB9E8 LDR V0, [X21 + 0x60]
	0x01EEB9EC LDR V1, [X20 + 0x60]
	0x01EEB9F0 MOV X0, X31
	0x01EEB9F4 FSUB S1, S1, S0
	0x01EEB9F8 FMUL S1, S4, S1
	0x01EEB9FC FADD S0, S0, S1
	0x01EEBA00 STR S0, [X19 + 0x60]
	0x01EEBA04 LDUR V0, [X21 + 0x54]
	0x01EEBA08 LDR V1, [X21 + 0x5C]
	0x01EEBA0C LDUR V2, [X20 + 0x54]
	0x01EEBA10 LDR V3, [X20 + 0x5C]
	0x01EEBA14 FSUB V2.2S, V2.2S, V0.2S
	0x01EEBA18 FSUB S3, S3, S1
	0x00000000 INVALID
	0x01EEBA20 FMUL S3, S4, S3
	0x01EEBA24 FADD V0.2S, V0.2S, V2.2S
	0x01EEBA28 FADD S1, S1, S3
	0x01EEBA2C STUR D0, [X19 + 0x54]
	0x01EEBA30 STR S1, [X19 + 0x5C]
	0x01EEBA34 LDR V0, [X21 + 0x64]
	0x01EEBA38 LDR V1, [X20 + 0x64]
	0x01EEBA3C FSUB S1, S1, S0
	0x01EEBA40 FMUL S1, S4, S1
	0x01EEBA44 FADD S0, S0, S1
	0x01EEBA48 STR S0, [X19 + 0x64]
	0x01EEBA4C LDR V0, [X21 + 0x1B8]
	0x01EEBA50 LDR V1, [X21 + 0x1C0]
	0x01EEBA54 LDR V2, [X20 + 0x1B8]
	0x01EEBA58 LDR V3, [X20 + 0x1C0]
	0x01EEBA5C FSUB V2.2S, V2.2S, V0.2S
	0x01EEBA60 FSUB S3, S3, S1
	0x00000000 INVALID
	0x01EEBA68 FMUL S3, S4, S3
	0x01EEBA6C FADD V0.2S, V0.2S, V2.2S
	0x01EEBA70 FADD S1, S1, S3
	0x01EEBA74 STR D0, [X19 + 0x1B8]
	0x01EEBA78 STR S1, [X19 + 0x1C0]
	0x01EEBA7C LDR V0, [X21 + 0x1C4]
	0x01EEBA80 LDR V1, [X21 + 0x1C8]
	0x01EEBA84 LDR V2, [X21 + 0x1CC]
	0x01EEBA88 LDR V3, [X21 + 0x1D0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x24EF000
	005 Move W8, [X20+1456]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2216000
	012 Move X0, [X0+832]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1456], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {46}
	019 NotImplemented "Instruction LDRSW not yet implemented."
	020 Move W10, [X8+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Add X8, X8, X9
	023 Move X8, [X8+32]
	024 Compare X8, 0
	025 JumpIfEqual {46}
	026 Move X8, [X8+40]
	027 Compare X8, 0
	028 JumpIfEqual {36}
	029 Move X9, 0x2216000
	030 Move X9, [X9+832]
	031 Move X10, [X8]
	032 Move X9, [X9]
	033 Move W12, [X10+304]
	034 Move W11, [X9+304]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X31
	037 Move X10, [X10+200]
	038 Add X10, X10, X11
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0
	046 Call 0x1C17F20
	047 Call 0x1C17F28

Method: Fusion.LagCompensation.HitboxBuffer/HitboxSnapshot get_Current()

Disassembly:
	0x01EEBCB8 ADRP X21, 0x220F000
	0x01EEBCBC LDR X1, [X8]
	0x01EEBCC0 LDR X22, [X22 + 0x838]
	0x01EEBCC4 LDR X23, [X23 + 0xE78]
	0x01EEBCC8 LDR X21, [X21 + 0x830]
	0x01EEBCCC ADD X8, X31, 0x8
	0x01EEBCD0 MOV X0, X20
	0x01EEBCD4 BL 0x2DAAA30
	0x01EEBCD8 LDUR V0, [X31 + 0x8]
	0x01EEBCDC LDR X8, [X31 + 0x18]
	0x01EEBCE0 STR V0, [X31 + 0x2]
	0x01EEBCE4 STR X8, [X31 + 0x30]
	0x01EEBCE8 LDR X1, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X8, X9
	009 Move X0, [X8+32]
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20
	013 Call 0x1C17F28

Method: System.Void .ctor(System.Collections.Generic.List`1<Fusion.HitboxRoot> initialObjects, System.Int32 bufferSize, System.Int32 hitboxCapacity, System.Single expansionFactor)

Disassembly:
	0x01EEBCEC ADD X0, X31, 0x20
	0x01EEBCF0 BL 0x2BBDA6C
	0x01EEBCF4 TBZ X0, 0x0, 0x1EEBD68
	0x01EEBCF8 CBZ X19, 0x1EEBD88
	0x01EEBCFC LDR X8, [X19]
	0x01EEBD00 LDR W20, [X31 + 0x30]
	0x01EEBD04 LDR X1, [X23]
	0x01EEBD08 LDRH W9, [X8 + 0x12E]
	0x01EEBD0C CBZ X9, 0x1EEBD30
	0x01EEBD10 LDR X10, [X8 + 0xB0]
	0x01EEBD14 ADD X10, X10, 0x8
	0x01EEBD18 LDUR X11, [X10 - 0x8]
	0x01EEBD1C CMP X11, X1
	0x01EEBD20 B.EQ 0x1EEBD40
	0x01EEBD24 SUBS X9, X9, 0x1
	0x01EEBD28 ADD X10, X10, 0x10
	0x01EEBD2C B.NE 0x1EEBD18
	0x01EEBD30 MOVZ W2, 0x2
	0x01EEBD34 MOV X0, X19
	0x01EEBD38 BL 0x1C5C788
	0x01EEBD3C B 0x1EEBD50
	0x01EEBD40 LDR W9, [X10]
	0x01EEBD44 ADD W9, W9, 0x2
	0x01EEBD48 ADD X8, X8, W9, 0x4, SXTW
	0x01EEBD4C ADD X0, X8, 0x138
	0x01EEBD50 LDP X8, X2, [X0]
	0x01EEBD54 MOV X0, X19
	0x01EEBD58 MOV W1, W20
	0x01EEBD5C BLR X8
	0x01EEBD60 BL 0x1EEBDFC
	0x01EEBD64 B 0x1EEBCE8
	0x01EEBD68 LDR X1, [X21]
	0x01EEBD6C ADD X0, X31, 0x20
	0x01EEBD70 BL 0x2BBDA68
	0x01EEBD74 LDP X20, X19, [X31 + 0x60]
	0x01EEBD78 LDP X22, X21, [X31 + 0x50]
	0x01EEBD7C LDP X30, X23, [X31 + 0x40]
	0x01EEBD80 ADD X31, X31, 0x70
	0x01EEBD84 RET
	0x01EEBD88 BL 0x1C16F20
	0x01EEBD8C BL 0x1C16F20
	0x01EEBD90 B 0x1EEBD98
	0x01EEBD94 B 0x1EEBD98
	0x01EEBD98 MOV X19, X0
	0x01EEBD9C CMP W1, 0x1
	0x01EEBDA0 B.NE 0x1EEBDCC
	0x01EEBDA4 MOV X0, X19
	0x01EEBDA8 BL 0x3EB1AD0
	0x01EEBDAC LDR X20, [X0]
	0x01EEBDB0 BL 0x3EB1AE0
	0x01EEBDB4 LDR X1, [X21]
	0x01EEBDB8 ADD X0, X31, 0x20
	0x01EEBDBC BL 0x2BBDA68
	0x01EEBDC0 CBZ X20, 0x1EEBD74
	0x01EEBDC4 MOV X0, X20
	0x01EEBDC8 BL 0x1C16F18
	0x01EEBDCC MOV X20, X31
	0x01EEBDD0 B 0x1EEBDD8
	0x01EEBDD4 MOV X19, X0
	0x01EEBDD8 LDR X1, [X21]
	0x01EEBDDC ADD X0, X31, 0x20
	0x01EEBDE0 BL 0x2BBDA68
	0x01EEBDE4 CBNZ X20, 0x1EEBDF0
	0x01EEBDE8 MOV X0, X19
	0x01EEBDEC BL 0x1D2C690
	0x01EEBDF0 MOV X0, X20
	0x01EEBDF4 BL 0x1C16F18
	0x01EEBDF8 BL 0x1990590
	0x01EEBDFC SUB X31, X31, 0x1E0
	0x01EEBE00 STP D15, D14, [X31 + 0x180]
	0x01EEBE04 STP D13, D12, [X31 + 0x190]
	0x01EEBE08 STP D11, D10, [X31 + 0x1A0]
	0x01EEBE0C STP D9, D8, [X31 + 0x1B0]
	0x01EEBE10 STP X29, X30, [X31 + 0x1C0]
	0x01EEBE14 STP X20, X19, [X31 + 0x1D0]
	0x01EEBE18 MOVI V0.2D, 0x0
	0x01EEBE1C STP V0, V0, [X31 + 0x160]
	0x01EEBE20 STP V0, V0, [X31 + 0x140]
	0x01EEBE24 LDR W8, [X0]
	0x01EEBE28 CMP W8, 0x1
	0x01EEBE2C B.NE 0x1EEBED0
	0x01EEBE30 LDRB W8, [X0 + 0x1B4]
	0x01EEBE34 MOV X19, X0
	0x01EEBE38 CBNZ W8, 0x1EEBED0
	0x01EEBE3C LDR V8, [X19 + 0x1B8]
	0x01EEBE40 LDR V9, [X19 + 0x1BC]
	0x01EEBE44 LDR V10, [X19 + 0x1C0]
	0x01EEBE48 ADD X8, X31, 0x140
	0x01EEBE4C MOV X0, X19
	0x01EEBE50 BL 0x1EEBAE0
	0x01EEBE54 ADD X0, X31, 0x140
	0x01EEBE58 MOV X1, X31
	0x01EEBE5C BL 0x3C26F30
	0x01EEBE60 LDUR X20, [X19 + 0x54]
	0x01EEBE64 LDR V15, [X19 + 0x5C]
	0x01EEBE68 ADD X0, X31, 0x10
	0x01EEBE6C MOVZ W2, 0x12C
	0x01EEBE70 MOV W1, W31
	0x01EEBE74 MOV V11.16B, V0.16B
	0x01EEBE78 MOV V12.16B, V1.16B
	0x01EEBE7C MOV V13.16B, V2.16B
	0x01EEBE80 MOV V14.16B, V3.16B
	0x01EEBE84 BL 0x3EB1B10
	0x01EEBE88 ADD X0, X31, 0x10
	0x01EEBE8C MOV V0.16B, V8.16B
	0x01EEBE90 MOV V1.16B, V9.16B
	0x01EEBE94 MOV V2.16B, V10.16B
	0x01EEBE98 MOV V3.16B, V11.16B
	0x01EEBE9C MOV V4.16B, V12.16B
	0x01EEBEA0 MOV V5.16B, V13.16B
	0x01EEBEA4 MOV V6.16B, V14.16B
	0x01EEBEA8 MOV X1, X31
	0x01EEBEAC STR S15, [X31 + 0x8]
	0x01EEBEB0 STR X20, [X31]
	0x01EEBEB4 BL 0x1EE9030
	0x01EEBEB8 ADD X0, X19, 0x88
	0x01EEBEBC ADD X1, X31, 0x10
	0x01EEBEC0 MOVZ W2, 0x12C
	0x01EEBEC4 BL 0x3EB1AC0
	0x01EEBEC8 MOVZ W8, 0x1
	0x01EEBECC STRB W8, [X19 + 0x1B4]
	0x01EEBED0 LDP X20, X19, [X31 + 0x1D0]
	0x01EEBED4 LDP X29, X30, [X31 + 0x1C0]
	0x01EEBED8 LDP D9, D8, [X31 + 0x1B0]
	0x01EEBEDC LDP D11, D10, [X31 + 0x1A0]
	0x01EEBEE0 LDP D13, D12, [X31 + 0x190]
	0x01EEBEE4 LDP D15, D14, [X31 + 0x180]
	0x01EEBEE8 ADD X31, X31, 0x1E0
	0x01EEBEEC RET
	0x01EEBEF0 SUB X31, X31, 0x50
	0x01EEBEF4 STR X30, [X31 + 0x10]
	0x01EEBEF8 STP X24, X23, [X31 + 0x20]
	0x01EEBEFC STP X22, X21, [X31 + 0x30]
	0x01EEBF00 STP X20, X19, [X31 + 0x40]
	0x01EEBF04 ADRP X24, 0x24EE000
	0x01EEBF08 ADRP X23, 0x2209000
	0x01EEBF0C LDRB W8, [X24 + 0x5B5]
	0x01EEBF10 LDR X23, [X23 + 0x470]
	0x01EEBF14 MOV X19, X3
	0x01EEBF18 MOV X20, X2
	0x01EEBF1C MOV X21, X1
	0x01EEBF20 MOV X22, X0
	0x01EEBF24 TBNZ X8, 0x0, 0x1EEBF6C
	0x01EEBF28 ADRP X0, 0x2215000
	0x01EEBF2C LDR X0, [X0 + 0x578]
	0x01EEBF30 BL 0x1C16CF4
	0x01EEBF34 ADRP X0, 0x2209000
	0x01EEBF38 LDR X0, [X0 + 0x470]
	0x01EEBF3C BL 0x1C16CF4
	0x01EEBF40 ADRP X0, 0x220C000
	0x01EEBF44 LDR X0, [X0 + 0xC0]
	0x01EEBF48 BL 0x1C16CF4
	0x01EEBF4C ADRP X0, 0x220B000
	0x01EEBF50 LDR X0, [X0 + 0xEF8]
	0x01EEBF54 BL 0x1C16CF4
	0x01EEBF58 ADRP X0, 0x220B000
	0x01EEBF5C LDR X0, [X0 + 0xF00]
	0x01EEBF60 BL 0x1C16CF4
	0x01EEBF64 MOVZ W8, 0x1

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X29, 0x24EF000
	015 Move X24, 0x2216000
	016 Move X23, 0x2216000
	017 Move X28, 0x220A000
	018 Move X27, 0x2210000
	019 Move X26, 0x2216000
	020 Move X25, 0x2216000
	021 Move X24, [X24+1352]
	022 Move W8, [X29+1457]
	023 Move X23, [X23+1360]
	024 Move X28, [X28+3592]
	025 Move X27, [X27+1672]
	026 Move X26, [X26+1368]
	027 Move X25, [X25+1376]
	028 Move V8, V0
	029 Move W20, W3
	030 Move W22, W2
	031 Move X21, X1
	032 Move X19, X0
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {66}
	037 Move X0, 0x2216000
	038 Move X0, [X0+1360]
	039 Call 0x1C17CF4
	040 Move X0, 0x2210000
	041 Move X0, [X0+1672]
	042 Call 0x1C17CF4
	043 Move X0, 0x220A000
	044 Move X0, [X0+3592]
	045 Call 0x1C17CF4
	046 Move X0, 0x2216000
	047 Move X0, [X0+1352]
	048 Call 0x1C17CF4
	049 Move X0, 0x2216000
	050 Move X0, [X0+1368]
	051 Call 0x1C17CF4
	052 Move X0, 0x2216000
	053 Move X0, [X0+1384]
	054 Call 0x1C17CF4
	055 Move X0, 0x2216000
	056 Move X0, [X0+952]
	057 Call 0x1C17CF4
	058 Move X0, 0x2216000
	059 Move X0, [X0+1376]
	060 Call 0x1C17CF4
	061 Move X0, 0x2209000
	062 Move X0, [X0+1448]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X29+1457], W8
	066 Move X0, [X24]
	067 Move X24, 0x2216000
	068 Move X24, [X24+1384]
	069 Call 0x1C17F10
	070 Move X1, [X23]
	071 Move X23, X0
	072 Call HashSet`1<Object>..ctor, X0
	073 Move [X19+48], X23
	074 Move X0, [X28]
	075 Call 0x1C17F10
	076 Move X1, [X27]
	077 Move X23, X0
	078 Call HashSet`1<Int32>..ctor, X0
	079 Move X0, X19
	080 Move X1, X31
	081 Move [X19+56], X23
	082 Call Object..ctor, X0
	083 Move X0, [X26]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CSINC not yet implemented."
	086 Call 0x1C17D6C
	087 Move [X19+16], X0
	088 Move X0, [X25]
	089 Call 0x1C17F10
	090 Move X1, X31
	091 Move X23, X0
	092 Call Mapper..ctor, X0
	093 Move [X19+24], X23
	094 Move [X19+32], X31
	095 Compare X21, 0
	096 JumpIfEqual {111}
	097 Move X8, 0x2209000
	098 Move X8, [X8+1448]
	099 Move W22, [X21+24]
	100 Move X0, [X8]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move W0, W20
	106 Move W1, W22
	107 Move X2, X31
	108 Call Math.Max, X0, X1
	109 Move X23, [X19+24]
	110 Move W20, W0
	111 Move X0, [X24]
	112 Move X25, [X19+16]
	113 Call 0x1C17F10
	114 Move X1, X23
	115 Move X2, X21
	116 Move W3, W20
	117 Move V0, V8
	118 Move X22, X0
	119 Call HitboxSnapshot..ctor, X0, X1, X2, X3, V0
	120 Compare X25, 0
	121 JumpIfEqual {165}
	122 Compare X22, 0
	123 JumpIfEqual {130}
	124 Move X8, [X25]
	125 Move X0, X22
	126 Move X1, [X8+64]
	127 Call 0x1C17E00
	128 Compare X0, 0
	129 JumpIfEqual {181}
	130 Move W8, [X25+24]
	131 Compare W8, 0
	132 JumpIfEqual {180}
	133 Move [X25+32], X22
	134 Move X23, [X19+16]
	135 Compare X23, 0
	136 JumpIfEqual {165}
	137 Move W25, 5
	138 NotImplemented "Instruction LDRSW not yet implemented."
	139 Subtract X26, X25, 4
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X0, [X24]
	142 Move X22, [X19+24]
	143 Call 0x1C17F10
	144 Move X1, X22
	145 Move X2, X31
	146 Move W3, W20
	147 Move V0, V8
	148 Move X21, X0
	149 Call HitboxSnapshot..ctor, X0, X1, X2, X3, V0
	150 Compare X21, 0
	151 JumpIfEqual {158}
	152 Move X8, [X23]
	153 Move X0, X21
	154 Move X1, [X8+64]
	155 Call 0x1C17E00
	156 Compare X0, 0
	157 JumpIfEqual {181}
	158 Move W8, [X23+24]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move [X23], X21
	161 Move X23, [X19+16]
	162 Add X25, X25, 1
	163 Compare X23, 0
	164 JumpIfNotEqual {138}
	165 Call 0x1C17F20
	166 Move X20, [X31+96]
	167 Move X19, [X31+104]
	168 Move X22, [X31+80]
	169 Move X21, [X31+88]
	170 Move X24, [X31+64]
	171 Move X23, [X31+72]
	172 Move X26, [X31+48]
	173 Move X25, [X31+56]
	174 Move X28, [X31+32]
	175 Move X27, [X31+40]
	176 Move X29, [X31+16]
	177 Move X30, [X31+24]
	178 Move V8, [X31+112]
	179 Return 
	180 Call 0x1C17F28
	181 Call 0x1C17F44
	182 Move X1, X31
	183 Call 0x1C17DEC

Method: System.Void Advance(System.Int32 tick, System.Int32 dataTick)

Disassembly:
	0x01EEC194 CBNZ W8, 0x1EEC1AC
	0x01EEC198 ADRP X0, 0x2207000
	0x01EEC19C LDR X0, [X0 + 0x5A8]
	0x01EEC1A0 BL 0x1C16CF4
	0x01EEC1A4 MOVZ W8, 0x1
	0x01EEC1A8 STRB W8, [X19 + 0x5D7]
	0x01EEC1AC ADRP X8, 0x2207000
	0x01EEC1B0 LDR X8, [X8 + 0x5A8]
	0x01EEC1B4 FADD S9, S9, S8
	0x01EEC1B8 LDR X0, [X8]
	0x01EEC1BC LDR W8, [X0 + 0xE0]
	0x01EEC1C0 CBNZ W8, 0x1EEC1C8
	0x01EEC1C4 BL 0x1C16DFC
	0x01EEC1C8 FCVT S8, S9
	0x01EEC1CC ADD X0, X31, 0x8
	0x01EEC1D0 MOV V0.16B, V8.16B
	0x01EEC1D4 BL 0x3EB1C00
	0x01EEC1D8 FCMP S9, 0x0
	0x01EEC1DC B.GE 0x1EEC214
	0x01EEC1E0 FMOV D1, -0.5
	0x01EEC1E4 FCMP D0, D1
	0x01EEC1E8 B.NE 0x1EEC23C
	0x01EEC1EC LDR V0, [X31 + 0x8]
	0x01EEC1F0 FMOV D1, -1
	0x01EEC1F4 B 0x1EEC228
	0x01EEC1F8 LDR X1, [X21]
	0x01EEC1FC ADD X0, X19, 0x20
	0x01EEC200 LDP X20, X19, [X31 + 0x30]
	0x01EEC204 LDP X30, X21, [X31 + 0x20]
	0x01EEC208 LDP D9, D8, [X31 + 0x10]
	0x01EEC20C ADD X31, X31, 0x40
	0x01EEC210 B 0x2434214
	0x01EEC214 FMOV D1, 0.5
	0x01EEC218 FCMP D0, D1
	0x01EEC21C B.NE 0x1EEC248
	0x01EEC220 LDR V0, [X31 + 0x8]
	0x01EEC224 FMOV D1, 1
	0x01EEC228 FCVTZS X8, D0
	0x01EEC22C FADD D1, D0, D1
	0x01EEC230 ANDS X31, X8, 0x1
	0x01EEC234 FCSEL D0, D0, D1, EQ
	0x01EEC238 B 0x1EEC250
	0x01EEC23C FADD D0, D8, D1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W9, [X0+40]
	005 Move W8, [X0+32]
	006 Move X19, X0
	007 Move W20, W1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X9, [X19+16]
	010 Compare X9, 0
	011 JumpIfEqual {44}
	012 Move W10, [X9+24]
	013 Add W8, W8, W10
	014 Subtract W8, W8, 1
	015 NotImplemented "Instruction SDIV not yet implemented."
	016 NotImplemented "Instruction MSUB not yet implemented."
	017 Move W10, [X19+36]
	018 Move X9, [X19+16]
	019 Add W10, W10, 1
	020 Move [X19+36], W10
	021 Compare X9, 0
	022 JumpIfEqual {44}
	023 Move W11, [X9+24]
	024 Add W10, W8, 1
	025 NotImplemented "Instruction SDIV not yet implemented."
	026 NotImplemented "Instruction MSUB not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move [X19+32], W10
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Add X10, X9, W10
	031 Move X0, [X10+32]
	032 Compare X0, 0
	033 JumpIfEqual {44}
	034 Add X8, X9, W8
	035 Move X3, [X8+32]
	036 Move W1, W20
	037 Call HitboxSnapshot.CopyFrom, X0, X1, X2, X3
	038 Move [X19+40], W20
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 
	043 Call 0x1C17F28
	044 Call 0x1C17F20

Method: System.Void PosUpdateRefit()

Disassembly:
	0x01EEC3A0 LDR X0, [X0 + 0x588]
	0x01EEC3A4 BL 0x1C16CF4
	0x01EEC3A8 ADRP X0, 0x2214000
	0x01EEC3AC LDR X0, [X0 + 0x590]
	0x01EEC3B0 BL 0x1C16CF4
	0x01EEC3B4 ADRP X0, 0x2209000
	0x01EEC3B8 LDR X0, [X0 + 0x9D8]

ISIL:
	001 Move [X31-16], X30
	002 Call HitboxBuffer.get_BVH, X0
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call BVH.PosUpdateRefit, X0
	008 Return 
	009 Call 0x1C17F20

Method: System.Void Add(Fusion.HitboxRoot root, Fusion.Statistics.LagCompensationStatisticsManager lagCompStatManager)

Disassembly:
	0x01EEC3BC BL 0x1C16CF4
	0x01EEC3C0 ADRP X0, 0x2214000
	0x01EEC3C4 LDR X0, [X0 + 0x598]
	0x01EEC3C8 BL 0x1C16CF4
	0x01EEC3CC ADRP X0, 0x2214000
	0x01EEC3D0 LDR X0, [X0 + 0x5A0]
	0x01EEC3D4 BL 0x1C16CF4
	0x01EEC3D8 ADRP X0, 0x2211000
	0x01EEC3DC LDR X0, [X0 + 0xE78]
	0x01EEC3E0 BL 0x1C16CF4
	0x01EEC3E4 ADRP X0, 0x220B000
	0x01EEC3E8 LDR X0, [X0 + 0x118]
	0x01EEC3EC BL 0x1C16CF4
	0x01EEC3F0 ADRP X0, 0x2207000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X8, X9
	009 Move X0, [X8+32]
	010 Compare X0, 0
	011 JumpIfEqual {13}
	012 Move X30, [X31+16]
	013 Call 0x1C17F20
	014 Call 0x1C17F28

Method: System.Boolean Remove(Fusion.HitboxRoot root)

Disassembly:
	0x01EEC4B8 LDR X8, [X8 + 0x588]
	0x01EEC4BC LDR X1, [X8]
	0x01EEC4C0 ADD X0, X31, 0x40
	0x01EEC4C4 BL 0x2BC3C64
	0x01EEC4C8 TBZ X0, 0x0, 0x1EEC820
	0x01EEC4CC LDR X20, [X31 + 0x50]
	0x01EEC4D0 LDR W8, [X31 + 0xC]
	0x01EEC4D4 CBZ W8, 0x1EEC51C
	0x01EEC4D8 CBZ X20, 0x1EEC878
	0x01EEC4DC LDR X0, [X20 + 0x40]
	0x01EEC4E0 CBZ X0, 0x1EEC874
	0x01EEC4E4 MOV X1, X31
	0x01EEC4E8 BL 0x1E93994
	0x01EEC4EC ADRP X8, 0x220A000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X8, X9
	009 Move X0, [X8+32]
	010 Compare X0, 0
	011 JumpIfEqual {13}
	012 Move X30, [X31+16]
	013 Call 0x1C17F20
	014 Call 0x1C17F28

Method: System.Void Update(Fusion.HitboxRoot root, Fusion.Statistics.LagCompensationStatisticsManager lagCompStatManager)

Disassembly:
	0x01EEC5B0 BLR X8
	0x01EEC5B4 LDRB W8, [X0 + 0x68]
	0x01EEC5B8 MOV X24, X0
	0x01EEC5BC CBZ W8, 0x1EEC60C
	0x01EEC5C0 LDR X8, [X31 + 0x18]
	0x01EEC5C4 LDR W0, [X8 + 0x18]
	0x01EEC5C8 MOV X1, X31
	0x01EEC5CC BL 0x3C35CB8
	0x01EEC5D0 LDR W8, [X24 + 0x78]
	0x01EEC5D4 ANDS W31, W8, W0, 0x0
	0x01EEC5D8 B.EQ 0x1EEC60C
	0x01EEC5DC LDRB W8, [X24 + 0x80]
	0x01EEC5E0 CBZ W8, 0x1EEC60C
	0x01EEC5E4 LDR X0, [X31 + 0x10]
	0x01EEC5E8 CBZ X0, 0x1EEC864

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X8, X9
	009 Move X0, [X8+32]
	010 Compare X0, 0
	011 JumpIfEqual {16}
	012 Move X3, X31
	013 Move X30, [X31+16]
	014 Call 0x1E8A604
	015 Return 
	016 Call 0x1C17F20
	017 Call 0x1C17F28

Method: System.Boolean PerformQuery(Fusion.LagCompensation.Query query, System.Collections.Generic.List`1<Fusion.LagCompensation.HitboxHit> hits)

Disassembly:
	0x01EEC5EC ADRP X8, 0x2209000
	0x01EEC5F0 LDR X8, [X8 + 0x9D8]
	0x01EEC5F4 LDR X2, [X8]
	0x01EEC5F8 MOV W1, W25
	0x01EEC5FC BL 0x2DAB03C
	0x01EEC600 MOV W27, W31
	0x01EEC604 CBNZ W23, 0x1EEC614
	0x01EEC608 B 0x1EEC80C
	0x01EEC60C MOVZ W27, 0x1
	0x01EEC610 CBZ W23, 0x1EEC80C
	0x01EEC614 CBZ X19, 0x1EEC860
	0x01EEC618 LDR X8, [X19]
	0x01EEC61C LDR X1, [X29]
	0x01EEC620 LDRH W9, [X8 + 0x12E]
	0x01EEC624 CBZ X9, 0x1EEC648
	0x01EEC628 LDR X10, [X8 + 0xB0]
	0x01EEC62C ADD X10, X10, 0x8
	0x01EEC630 LDUR X11, [X10 - 0x8]
	0x01EEC634 CMP X11, X1
	0x01EEC638 B.EQ 0x1EEC658
	0x01EEC63C SUBS X9, X9, 0x1
	0x01EEC640 ADD X10, X10, 0x10
	0x01EEC644 B.NE 0x1EEC630
	0x01EEC648 MOVZ W2, 0x2
	0x01EEC64C MOV X0, X19
	0x01EEC650 BL 0x1C5C788
	0x01EEC654 B 0x1EEC668
	0x01EEC658 LDR W9, [X10]
	0x01EEC65C ADD W9, W9, 0x2
	0x01EEC660 ADD X8, X8, W9, 0x4, SXTW
	0x01EEC664 ADD X0, X8, 0x138
	0x01EEC668 LDP X8, X2, [X0]
	0x01EEC66C MOV X0, X19
	0x01EEC670 MOV W1, W25
	0x01EEC674 BLR X8
	0x01EEC678 LDRB W8, [X0 + 0x68]
	0x01EEC67C MOV X26, X0
	0x01EEC680 CBZ W8, 0x1EEC80C
	0x01EEC684 LDRB W8, [X26 + 0x80]
	0x01EEC688 CBZ W8, 0x1EEC80C
	0x01EEC68C TBNZ X27, 0x0, 0x1EEC6C4
	0x01EEC690 ADRP X8, 0x2207000
	0x01EEC694 LDR X8, [X8 + 0x598]
	0x01EEC698 LDR X27, [X24 + 0x70]
	0x01EEC69C LDR X28, [X26 + 0x70]
	0x01EEC6A0 LDR X0, [X8]
	0x01EEC6A4 LDR W8, [X0 + 0xE0]
	0x01EEC6A8 CBNZ W8, 0x1EEC6B0
	0x01EEC6AC BL 0x1C16DFC
	0x01EEC6B0 MOV X0, X27
	0x01EEC6B4 MOV X1, X28
	0x01EEC6B8 MOV X2, X31
	0x01EEC6BC BL 0x3C354F8
	0x01EEC6C0 TBZ X0, 0x0, 0x1EEC704
	0x01EEC6C4 LDR X8, [X21]
	0x01EEC6C8 LDR X1, [X29]
	0x01EEC6CC LDRH W9, [X8 + 0x12E]
	0x01EEC6D0 CBZ X9, 0x1EEC6F4
	0x01EEC6D4 LDR X10, [X8 + 0xB0]
	0x01EEC6D8 ADD X10, X10, 0x8
	0x01EEC6DC LDUR X11, [X10 - 0x8]
	0x01EEC6E0 CMP X11, X1
	0x01EEC6E4 B.EQ 0x1EEC760
	0x01EEC6E8 SUBS X9, X9, 0x1
	0x01EEC6EC ADD X10, X10, 0x10
	0x01EEC6F0 B.NE 0x1EEC6DC
	0x01EEC6F4 MOVZ W2, 0x1
	0x01EEC6F8 MOV X0, X21
	0x01EEC6FC BL 0x1C5C788
	0x01EEC700 B 0x1EEC770
	0x01EEC704 LDR X0, [X31 + 0x10]
	0x01EEC708 CBZ X0, 0x1EEC86C
	0x01EEC70C ADRP X8, 0x2214000
	0x01EEC710 LDR X8, [X8 + 0x5A0]
	0x01EEC714 LDR X2, [X8]
	0x01EEC718 MOV W1, W25
	0x01EEC71C BL 0x2DAA770
	0x01EEC720 LDR X8, [X21]
	0x01EEC724 LDR X1, [X29]
	0x01EEC728 LDRH W9, [X8 + 0x12E]
	0x01EEC72C CBZ X9, 0x1EEC750
	0x01EEC730 LDR X10, [X8 + 0xB0]
	0x01EEC734 ADD X10, X10, 0x8
	0x01EEC738 LDUR X11, [X10 - 0x8]
	0x01EEC73C CMP X11, X1
	0x01EEC740 B.EQ 0x1EEC7AC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x24EE000
	007 Move W8, [X22+1458]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x220F000
	016 Move X0, [X0+1656]
	017 Call 0x1C17CF4
	018 Move X0, 0x220F000
	019 Move X0, [X0+2128]
	020 Call 0x1C17CF4
	021 Move X0, 0x2212000
	022 Move X0, [X0+3704]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1458], W8
	026 Move [X31+8], X31
	027 Move X0, [X21+56]
	028 Compare X0, 0
	029 JumpIfEqual {95}
	030 Move X8, 0x220F000
	031 Move X8, [X8+1656]
	032 Move X1, [X8]
	033 Call HashSet`1<Int32>.Clear, X0
	034 Move X2, [X21+56]
	035 Add X3, X31, 8
	036 Move X0, X21
	037 Move X1, X20
	038 Move X4, X31
	039 Call 0x1EF2714
	040 Move X2, [X21+56]
	041 Compare X2, 0
	042 JumpIfEqual {95}
	043 Move W8, [X2+32]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X1, [X31+8]
	046 Move X0, X21
	047 Move X3, X31
	048 Call 0x1EF28EC
	049 Compare X20, 0
	050 JumpIfEqual {95}
	051 Move X8, [X20]
	052 Move X2, [X21+56]
	053 Move X1, [X31+8]
	054 Move X0, X20
	055 Move X9, [X8+408]
	056 Move X4, [X8+416]
	057 Move X3, X19
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X20, [X31+8]
	060 Compare X20, 0
	061 JumpIfEqual {95}
	062 Move X10, 0x2212000
	063 Move X8, [X20]
	064 Move X10, [X10+3704]
	065 Move W19, W0
	066 NotImplemented "Instruction LDRH not yet implemented."
	067 Move X1, [X10]
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move W2, 4
	077 Move X0, X20
	078 Call 0x1C5D788
	079 Move W19, W31
	080 Move W9, [X10]
	081 Add W9, W9, 4
	082 Add X8, X8, W9
	083 Add X0, X8, 312
	084 Move X8, [X0]
	085 Move X1, [X0+8]
	086 Move X0, X20
	087 NotImplemented "Instruction BLR not yet implemented."
	088 And W0, W19, 1
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Return X0
	095 Call 0x1C17F20

Method: System.Void PositionQueryInternal(ref Fusion.LagCompensation.PositionRotationQueryParams param, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)

Disassembly:
	0x01EEC744 SUBS X9, X9, 0x1
	0x01EEC748 ADD X10, X10, 0x10
	0x01EEC74C B.NE 0x1EEC738
	0x01EEC750 MOVZ W2, 0x1
	0x01EEC754 MOV X0, X21
	0x01EEC758 BL 0x1C5C788
	0x01EEC75C B 0x1EEC7BC
	0x01EEC760 LDR W9, [X10]
	0x01EEC764 ADD W9, W9, 0x1
	0x01EEC768 ADD X8, X8, W9, 0x4, SXTW
	0x01EEC76C ADD X0, X8, 0x138
	0x01EEC770 LDP X8, X2, [X0]
	0x01EEC774 ADD X1, X31, 0x3C
	0x01EEC778 MOV X0, X21
	0x01EEC77C BLR X8
	0x01EEC780 MOVZ W2, 0x1D8
	0x01EEC784 MOV X1, X26
	0x01EEC788 BL 0x3EB1B30
	0x01EEC78C LDR X0, [X31 + 0x10]
	0x01EEC790 CBZ X0, 0x1EEC868
	0x01EEC794 ADRP X8, 0x2209000
	0x01EEC798 LDR W1, [X31 + 0x3C]
	0x01EEC79C LDR X8, [X8 + 0x9D8]
	0x01EEC7A0 LDR X2, [X8]
	0x01EEC7A4 BL 0x2DAB03C
	0x01EEC7A8 B 0x1EEC80C
	0x01EEC7AC LDR W9, [X10]
	0x01EEC7B0 ADD W9, W9, 0x1
	0x01EEC7B4 ADD X8, X8, W9, 0x4, SXTW
	0x01EEC7B8 ADD X0, X8, 0x138
	0x01EEC7BC LDP X8, X2, [X0]
	0x01EEC7C0 ADD X1, X31, 0x38
	0x01EEC7C4 MOV X0, X21
	0x01EEC7C8 BLR X8
	0x01EEC7CC ADRP X8, 0x220B000
	0x01EEC7D0 LDR X8, [X8 + 0x118]
	0x01EEC7D4 MOV X25, X0
	0x01EEC7D8 LDR X1, [X8]
	0x01EEC7DC LDR X0, [X31]
	0x01EEC7E0 BL 0x243AC20
	0x01EEC7E4 MOV X0, X24
	0x01EEC7E8 MOV X1, X26
	0x01EEC7EC MOV X2, X25
	0x01EEC7F0 BL 0x1EEB974
	0x01EEC7F4 ADRP X8, 0x2209000
	0x01EEC7F8 LDR W1, [X31 + 0x38]
	0x01EEC7FC LDR X8, [X8 + 0x9D8]
	0x01EEC800 LDR X2, [X8]
	0x01EEC804 LDR X0, [X31 + 0x10]
	0x01EEC808 BL 0x2DAB03C
	0x01EEC80C LDR W8, [X22 + 0x18]
	0x01EEC810 ADD W20, W20, 0x1
	0x01EEC814 CMP W20, W8
	0x01EEC818 B.LT 0x1EEC538
	0x01EEC81C B 0x1EEC4B4
	0x01EEC820 ADRP X8, 0x2214000
	0x01EEC824 LDR X8, [X8 + 0x580]
	0x01EEC828 ADD X0, X31, 0x40
	0x01EEC82C LDR X1, [X8]
	0x01EEC830 BL 0x2BC3C60
	0x01EEC834 LDP X20, X19, [X31 + 0xB0]
	0x01EEC838 LDP X22, X21, [X31 + 0xA0]
	0x01EEC83C LDP X24, X23, [X31 + 0x90]
	0x01EEC840 LDP X26, X25, [X31 + 0x80]
	0x01EEC844 LDP X28, X27, [X31 + 0x70]
	0x01EEC848 LDP X29, X30, [X31 + 0x60]
	0x01EEC84C ADD X31, X31, 0xC0
	0x01EEC850 RET
	0x01EEC854 BL 0x1C16F20
	0x01EEC858 BL 0x1C16F20
	0x01EEC85C BL 0x1C16F28
	0x01EEC860 BL 0x1C16F20
	0x01EEC864 BL 0x1C16F20
	0x01EEC868 BL 0x1C16F20
	0x01EEC86C BL 0x1C16F20
	0x01EEC870 BL 0x1C16F20
	0x01EEC874 BL 0x1C16F20
	0x01EEC878 BL 0x1C16F20
	0x01EEC87C BL 0x1C16F20
	0x01EEC880 BL 0x1C16F20
	0x01EEC884 B 0x1EEC8E8
	0x01EEC888 B 0x1EEC8E8
	0x01EEC88C B 0x1EEC8E8
	0x01EEC890 B 0x1EEC8E8
	0x01EEC894 B 0x1EEC8E8
	0x01EEC898 B 0x1EEC8E8
	0x01EEC89C B 0x1EEC8E8
	0x01EEC8A0 B 0x1EEC8E8
	0x01EEC8A4 B 0x1EEC8E8
	0x01EEC8A8 B 0x1EEC8E8
	0x01EEC8AC B 0x1EEC8E8
	0x01EEC8B0 B 0x1EEC8E8
	0x01EEC8B4 B 0x1EEC8E8
	0x01EEC8B8 B 0x1EEC8E8
	0x01EEC8BC B 0x1EEC8E8
	0x01EEC8C0 B 0x1EEC8E8

ISIL:
	001 Move [X31-64], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Subtract X31, X31, 1024
	009 Move X23, 0x24EE000
	010 Move W8, [X23+1459]
	011 Move X19, X3
	012 Move X20, X2
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x220C000
	020 Move X0, [X0+192]
	021 Call 0x1C17CF4
	022 Move X0, 0x220B000
	023 Move X0, [X0+3832]
	024 Call 0x1C17CF4
	025 Move X0, 0x220B000
	026 Move X0, [X0+3840]
	027 Call 0x1C17CF4
	028 Move X0, 0x220C000
	029 Move X0, [X0+280]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+1459], W8
	033 Move [X31+1032], X31
	034 Move [X31+544], X31
	035 Move W1, [X21+16]
	036 Add X2, X31, 1032
	037 Move X0, X22
	038 Call HitboxBuffer.GetClosestSnapshotForTick, X0, X1, X2
	039 Move X8, [X21+56]
	040 Compare X8, 0
	041 JumpIfEqual {117}
	042 Move X0, [X31+1032]
	043 Compare X0, 0
	044 JumpIfEqual {117}
	045 Move W23, [X8+84]
	046 Move X2, X31
	047 Move W1, W23
	048 Call 0x1E8A774
	049 Move X1, X0
	050 Add X0, X31, 552
	051 Move W2, 472
	052 Call 0x3EB2AC0
	053 Move W8, [X21]
	054 Move TEMP, X8
	055 And TEMP, TEMP, 4
	056 Compare TEMP, 4
	057 JumpIfNotEqual {91}
	058 Move X0, X21
	059 Add X0, X0, 20
	060 Move W8, [X0]
	061 Compare W8, 0
	062 JumpIfEqual {91}
	063 Add X21, X21, 28
	064 Move W8, [X21]
	065 Compare W8, 0
	066 JumpIfEqual {91}
	067 Move X8, 0x220B000
	068 Move X8, [X8+3840]
	069 Move X1, [X8]
	070 Call Nullable`1<Int32>.get_Value, X0
	071 Move W1, W0
	072 Add X2, X31, 544
	073 Move X0, X22
	074 Call HitboxBuffer.GetClosestSnapshotForTick, X0, X1, X2
	075 Move X0, [X31+544]
	076 Compare X0, 0
	077 JumpIfEqual {117}
	078 Move W1, W23
	079 Move X2, X31
	080 Call 0x1E8A774
	081 Move X8, 0x220C000
	082 Move X8, [X8+280]
	083 Move X22, X0
	084 Move X0, X21
	085 Move X1, [X8]
	086 Call Nullable`1<Single>.get_Value, X0
	087 Add X0, X31, 552
	088 Add X2, X31, 552
	089 Move X1, X22
	090 Call HitboxCollider.Lerp, X0, X1, V0, X2
	091 Add X0, X31, 72
	092 Add X1, X31, 552
	093 Move W2, 472
	094 Call 0x3EB2AC0
	095 Move X8, [X31+512]
	096 Move W9, [X31+520]
	097 Add X0, X31, 552
	098 Move [X20], X8
	099 Add X8, X31, 8
	100 Move [X20+8], W9
	101 Call HitboxCollider.get_LocalToWorld, X0
	102 Add X0, X31, 8
	103 Call HitboxBuffer.QuaternionFromMatrix, X0
	104 Move [X19], S0
	105 Move [X19+8], S1
	106 Move [X19+8], S2
	107 Move [X19+16], S3
	108 Add X31, X31, 1024
	109 Move X20, [X31+48]
	110 Move X19, [X31+56]
	111 Move X22, [X31+32]
	112 Move X21, [X31+40]
	113 Move X30, [X31+16]
	114 Move X23, [X31+24]
	115 Move X29, [X31+64]
	116 Return 
	117 Call 0x1C17F20

Method: System.Void InitColliderCandidatesForNarrowPhase(Fusion.LagCompensation.IHitboxColliderContainer container, System.Collections.Generic.HashSet`1<System.Int32> candidates)

Disassembly:
	0x01EECC34 BL 0x3EB1B10
	0x01EECC38 LDR X8, [X20 + 0x10]
	0x01EECC3C CBZ X8, 0x1EECC68
	0x01EECC40 LDRSW X9, [X19]
	0x01EECC44 LDR W10, [X8 + 0x18]
	0x01EECC48 CMP W9, W10
	0x01EECC4C B.CS 0x1EECC6C
	0x01EECC50 LDP X20, X19, [X31 + 0x10]
	0x01EECC54 MOVZ W10, 0x1D8
	0x01EECC58 MADD X8, X9, X10, X8
	0x01EECC5C ADD X0, X8, 0x20
	0x01EECC60 LDR X30, [X31], #0x20
	0x01EECC64 RET
	0x01EECC68 BL 0x1C16F20
	0x01EECC6C BL 0x1C16F28
	0x01EECC70 SUB X31, X31, 0x30
	0x01EECC74 STP X30, X21, [X31 + 0x10]
	0x01EECC78 STP X20, X19, [X31 + 0x20]
	0x01EECC7C CMP W1, 0x1
	0x01EECC80 B.LT 0x1EECCC4
	0x01EECC84 LDR X8, [X0 + 0x10]
	0x01EECC88 CBZ X8, 0x1EECD60
	0x01EECC8C LDR W9, [X8 + 0x18]
	0x01EECC90 CMP W9, W1
	0x01EECC94 B.LE 0x1EECCC4
	0x01EECC98 B.LS 0x1EECD64
	0x01EECC9C MOVZ W9, 0x1D8
	0x01EECCA0 UMADDL X8, X1, X9, X8
	0x01EECCA4 STRB W31, [X8 + 0xA0]
	0x01EECCA8 LDR W9, [X0 + 0x20]
	0x01EECCAC LDP X20, X19, [X31 + 0x20]
	0x01EECCB0 LDP X30, X21, [X31 + 0x10]
	0x01EECCB4 STR W9, [X8 + 0xA4]
	0x01EECCB8 STR W1, [X0 + 0x20]
	0x01EECCBC ADD X31, X31, 0x30
	0x01EECCC0 RET
	0x01EECCC4 STR W1, [X31 + 0xC]
	0x01EECCC8 ADRP X19, 0x2207000
	0x01EECCCC LDR X19, [X19 + 0x758]
	0x01EECCD0 MOV X20, X0
	0x01EECCD4 MOV X0, X19
	0x01EECCD8 BL 0x1C16D08
	0x01EECCDC ADD X1, X31, 0xC
	0x01EECCE0 BL 0x1C16E04
	0x01EECCE4 MOV X21, X0
	0x01EECCE8 MOV X0, X20
	0x01EECCEC BL 0x1EEC95C
	0x01EECCF0 STR W0, [X31 + 0x8]
	0x01EECCF4 MOV X0, X19
	0x01EECCF8 BL 0x1C16D08
	0x01EECCFC ADD X1, X31, 0x8
	0x01EECD00 BL 0x1C16E04
	0x01EECD04 MOV X19, X0
	0x01EECD08 ADRP X0, 0x2211000
	0x01EECD0C LDR X0, [X0 + 0xF70]
	0x01EECD10 BL 0x1C16D08
	0x01EECD14 MOV X1, X21
	0x01EECD18 MOV X2, X19
	0x01EECD1C MOV X3, X31
	0x01EECD20 BL 0x3227BD4
	0x01EECD24 MOV X19, X0
	0x01EECD28 ADRP X0, 0x2211000
	0x01EECD2C LDR X0, [X0 + 0xF78]
	0x01EECD30 BL 0x1C16D08
	0x01EECD34 BL 0x1C16F10
	0x01EECD38 MOV X1, X19
	0x01EECD3C MOV X2, X31
	0x01EECD40 MOV X20, X0
	0x01EECD44 BL 0x3379B6C
	0x01EECD48 ADRP X0, 0x2214000
	0x01EECD4C LDR X0, [X0 + 0x5B0]
	0x01EECD50 BL 0x1C16D08
	0x01EECD54 MOV X1, X0
	0x01EECD58 MOV X0, X20
	0x01EECD5C BL 0x1C16DEC
	0x01EECD60 BL 0x1C16F20
	0x01EECD64 BL 0x1C16F28
	0x01EECD68 SUB X31, X31, 0x30
	0x01EECD6C STP X30, X21, [X31 + 0x10]
	0x01EECD70 STP X20, X19, [X31 + 0x20]
	0x01EECD74 CMP W1, 0x1
	0x01EECD78 B.LT 0x1EECDB0
	0x01EECD7C LDR X8, [X0 + 0x10]
	0x01EECD80 CBZ X8, 0x1EECE4C
	0x01EECD84 LDR W9, [X8 + 0x18]
	0x01EECD88 CMP W9, W1
	0x01EECD8C B.LE 0x1EECDB0
	0x01EECD90 B.LS 0x1EECE50
	0x01EECD94 LDP X20, X19, [X31 + 0x20]
	0x01EECD98 LDP X30, X21, [X31 + 0x10]
	0x01EECD9C MOVZ W9, 0x1D8
	0x01EECDA0 UMADDL X8, X1, X9, X8
	0x01EECDA4 ADD X0, X8, 0x20
	0x01EECDA8 ADD X31, X31, 0x30
	0x01EECDAC RET
	0x01EECDB0 STR W1, [X31 + 0xC]
	0x01EECDB4 ADRP X19, 0x2207000
	0x01EECDB8 LDR X19, [X19 + 0x758]
	0x01EECDBC MOV X20, X0
	0x01EECDC0 MOV X0, X19
	0x01EECDC4 BL 0x1C16D08
	0x01EECDC8 ADD X1, X31, 0xC
	0x01EECDCC BL 0x1C16E04
	0x01EECDD0 MOV X21, X0
	0x01EECDD4 MOV X0, X20
	0x01EECDD8 BL 0x1EEC95C
	0x01EECDDC STR W0, [X31 + 0x8]
	0x01EECDE0 MOV X0, X19
	0x01EECDE4 BL 0x1C16D08
	0x01EECDE8 ADD X1, X31, 0x8
	0x01EECDEC BL 0x1C16E04
	0x01EECDF0 MOV X19, X0
	0x01EECDF4 ADRP X0, 0x2211000
	0x01EECDF8 LDR X0, [X0 + 0xF70]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X21, 0x24EE000
	009 Move W8, [X21+1460]
	010 Move X20, X2
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x220F000
	017 Move X0, [X0+2096]
	018 Call 0x1C17CF4
	019 Move X0, 0x220F000
	020 Move X0, [X0+2104]
	021 Call 0x1C17CF4
	022 Move X0, 0x220F000
	023 Move X0, [X0+2112]
	024 Call 0x1C17CF4
	025 Move X0, 0x220F000
	026 Move X0, [X0+2120]
	027 Call 0x1C17CF4
	028 Move X0, 0x2212000
	029 Move X0, [X0+3704]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1460], W8
	033 Move [X31+32], X31
	034 Move [X31+40], X31
	035 Move [X31+48], X31
	036 Compare X20, 0
	037 JumpIfEqual {100}
	038 Move X8, 0x220F000
	039 Move X8, [X8+2120]
	040 Move X22, 0x220F000
	041 Move X23, 0x2212000
	042 Move X21, 0x220F000
	043 Move X1, [X8]
	044 Move X22, [X22+2104]
	045 Move X23, [X23+3704]
	046 Move X21, [X21+2096]
	047 Add X8, X31, 8
	048 Move X0, X20
	049 Call HashSet`1<Int32>.GetEnumerator, X0
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move X8, [X31+24]
	052 Move [X31+2], V0
	053 Move [X31+48], X8
	054 Move X1, [X22]
	055 Add X0, X31, 32
	056 Call Enumerator<Int32>.MoveNext, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {88}
	061 Compare X19, 0
	062 JumpIfEqual {99}
	063 Move X8, [X19]
	064 Move W20, [X31+48]
	065 Move X1, [X23]
	066 NotImplemented "Instruction LDRH not yet implemented."
	067 Compare X9, 0
	068 JumpIfEqual {75}
	069 Move X10, [X8+176]
	070 Add X10, X10, 8
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X9, X9, 1
	074 Add X10, X10, 16
	075 Move W2, 2
	076 Move X0, X19
	077 Call 0x1C5D788
	078 Move W9, [X10]
	079 Add W9, W9, 2
	080 Add X8, X8, W9
	081 Add X0, X8, 312
	082 Move X8, [X0]
	083 Move X2, [X0+8]
	084 Move X0, X19
	085 Move W1, W20
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Call HitboxCollider.InitNarrowData, X0
	088 Move X1, [X21]
	089 Add X0, X31, 32
	090 Call Enumerator<Int32>.Dispose, X0
	091 Move X20, [X31+96]
	092 Move X19, [X31+104]
	093 Move X22, [X31+80]
	094 Move X21, [X31+88]
	095 Move X30, [X31+64]
	096 Move X23, [X31+72]
	097 Add X31, X31, 112
	098 Return 
	099 Call 0x1C17F20
	100 Call 0x1C17F20
	101 Move X19, X0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X0, X19
	104 Call 0x3EB2AD0
	105 Move X20, [X0]
	106 Call 0x3EB2AE0
	107 Move X1, [X21]
	108 Add X0, X31, 32
	109 Call Enumerator<Int32>.Dispose, X0
	110 Compare X20, 0
	111 JumpIfEqual {91}
	112 Move X0, X20
	113 Call 0x1C17F18
	114 Move X20, X31
	115 Move X19, X0
	116 Move X1, [X21]
	117 Add X0, X31, 32
	118 Call Enumerator<Int32>.Dispose, X0
	119 Compare X20, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X19
	122 Call 0x1D2D690
	123 Move X0, X20
	124 Call 0x1C17F18
	125 Call 0x1991590

Method: UnityEngine.Quaternion QuaternionFromMatrix(UnityEngine.Matrix4x4 m)

Disassembly:
	0x01EECBD0 MOV X20, X0
	0x01EECBD4 ADD W9, W9, W10
	0x01EECBD8 CMP W9, W1
	0x01EECBDC B.GE 0x1EECBF0
	0x01EECBE0 ADD W10, W10, 0x1
	0x01EECBE4 STR W10, [X20 + 0x1C]
	0x01EECBE8 STR W9, [X19]
	0x01EECBEC B 0x1EECC14
	0x01EECBF0 MOV X0, X20
	0x01EECBF4 BL 0x1EEC9B4
	0x01EECBF8 LDP W9, W10, [X20 + 0x18]
	0x01EECBFC LDR X8, [X20 + 0x10]
	0x01EECC00 ADD W9, W10, W9
	0x01EECC04 ADD W10, W10, 0x1
	0x01EECC08 STR W10, [X20 + 0x1C]
	0x01EECC0C STR W9, [X19]
	0x01EECC10 CBZ X8, 0x1EECC68
	0x01EECC14 LDR W10, [X8 + 0x18]
	0x01EECC18 CMP W9, W10
	0x01EECC1C B.CS 0x1EECC6C
	0x01EECC20 MOVZ W10, 0x1D8
	0x01EECC24 SMADDL X8, X9, X10, X8
	0x01EECC28 ADD X0, X8, 0x20
	0x01EECC2C MOVZ W2, 0x1D8
	0x01EECC30 MOV W1, W31

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W1, 2
	007 Move X2, X31
	008 Move X19, X0
	009 Call Matrix4x4.GetColumn, X0, X1
	010 Move W1, 1
	011 Move X0, X19
	012 Move X2, X31
	013 Move V8, V0
	014 Move V9, V1
	015 Move V10, V2
	016 Call Matrix4x4.GetColumn, X0, X1
	017 Move V3, V0
	018 Move V4, V1
	019 Move V0, V8
	020 Move V1, V9
	021 Move X30, [X31+32]
	022 Move X19, [X31+40]
	023 Move D9, [X31+16]
	024 Move D8, [X31+24]
	025 Move V5, V2
	026 Move V2, V10
	027 Move X0, X31
	028 Move V10, [X31+48]
	029 Call Quaternion.LookRotation, X0, X1
	030 Return X0

Method: System.Void GetClosestSnapshotForTick(System.Int32 tick, out Fusion.LagCompensation.HitboxBuffer/HitboxSnapshot snapshot)

Disassembly:
	0x01EEC8C4 B 0x1EEC8E8
	0x01EEC8C8 B 0x1EEC8E8
	0x01EEC8CC B 0x1EEC8E8
	0x01EEC8D0 B 0x1EEC8E8
	0x01EEC8D4 B 0x1EEC8E8
	0x01EEC8D8 B 0x1EEC8E8
	0x01EEC8DC B 0x1EEC8E8
	0x01EEC8E0 B 0x1EEC8E8
	0x01EEC8E4 B 0x1EEC8E8
	0x01EEC8E8 MOV X19, X0
	0x01EEC8EC CMP W1, 0x1
	0x01EEC8F0 B.NE 0x1EEC924
	0x01EEC8F4 MOV X0, X19
	0x01EEC8F8 BL 0x3EB1AD0
	0x01EEC8FC LDR X20, [X0]
	0x01EEC900 BL 0x3EB1AE0
	0x01EEC904 ADRP X8, 0x2214000
	0x01EEC908 LDR X8, [X8 + 0x580]
	0x01EEC90C ADD X0, X31, 0x40
	0x01EEC910 LDR X1, [X8]
	0x01EEC914 BL 0x2BC3C60
	0x01EEC918 CBZ X20, 0x1EEC834
	0x01EEC91C MOV X0, X20
	0x01EEC920 BL 0x1C16F18
	0x01EEC924 MOV X20, X31
	0x01EEC928 B 0x1EEC930
	0x01EEC92C MOV X19, X0
	0x01EEC930 ADRP X8, 0x2214000
	0x01EEC934 LDR X8, [X8 + 0x580]
	0x01EEC938 LDR X1, [X8]
	0x01EEC93C ADD X0, X31, 0x40
	0x01EEC940 BL 0x2BC3C60
	0x01EEC944 CBNZ X20, 0x1EEC950
	0x01EEC948 MOV X0, X19
	0x01EEC94C BL 0x1D2C690
	0x01EEC950 MOV X0, X20
	0x01EEC954 BL 0x1C16F18
	0x01EEC958 BL 0x1990590
	0x01EEC95C STR X30, [X31 - 0x10]!
	0x01EEC960 LDR X8, [X0 + 0x10]
	0x01EEC964 CBZ X8, 0x1EEC974
	0x01EEC968 LDR W0, [X8 + 0x18]
	0x01EEC96C LDR X30, [X31], #0x10
	0x01EEC970 RET

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+40]
	003 Move X8, [X0+16]
	004 Subtract W10, W1, W9
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Compare X8, 0
	007 JumpIfEqual {37}
	008 NotImplemented "Instruction LDRSW not yet implemented."
	009 Move W9, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, X10
	012 Move X8, [X8+32]
	013 Move [X2], X8
	014 Move X30, [X31+16]
	015 Return 
	016 Compare X8, 0
	017 JumpIfEqual {37}
	018 Move W9, [X8+24]
	019 Move W11, 1
	020 Subtract W11, W11, W9
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W10, [X0+36]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W10, 1
	025 Move W11, [X0+32]
	026 Add W10, W10, W9
	027 Add W10, W10, W11
	028 NotImplemented "Instruction SDIV not yet implemented."
	029 NotImplemented "Instruction MSUB not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X10, W10
	032 Move W10, [X0+32]
	033 Add W10, W10, 1
	034 NotImplemented "Instruction SDIV not yet implemented."
	035 NotImplemented "Instruction MSUB not yet implemented."
	036 Move X10, W10
	037 Call 0x1C17F20
	038 Call 0x1C17F28

Method: System.Void QueryBroadphase(Fusion.LagCompensation.Query query, System.Collections.Generic.HashSet`1<System.Int32> processedColliderIndices, out Fusion.LagCompensation.IHitboxColliderContainer container)

Disassembly:
	0x01EECEF0 LDR X21, [X8 + 0x20]
	0x01EECEF4 CBZ X21, 0x1EECFC0
	0x01EECEF8 LDR W1, [X21 + 0x54]
	0x01EECEFC MOV X0, X20
	0x01EECF00 MOV X2, X31
	0x01EECF04 BL 0x1E89774
	0x01EECF08 MOV X1, X0
	0x01EECF0C TBNZ X23, 0x0, 0x1EECF24
	0x01EECF10 LDR W2, [X20 + 0x34]
	0x01EECF14 MOV X0, X21
	0x01EECF18 MOV X3, X31
	0x01EECF1C BL 0x1E81B64
	0x01EECF20 B 0x1EECF28
	0x01EECF24 STRB W31, [X1 + 0x68]
	0x01EECF28 LDR W8, [X22 + 0x18]
	0x01EECF2C ADD W24, W24, 0x1
	0x01EECF30 CMP W24, W8
	0x01EECF34 B.LT 0x1EECEE4
	0x01EECF38 LDR X21, [X20 + 0x28]
	0x01EECF3C CBZ X21, 0x1EECFC0
	0x01EECF40 ADRP X10, 0x2211000
	0x01EECF44 LDR X8, [X21]
	0x01EECF48 LDR X10, [X10 + 0xF68]
	0x01EECF4C LDR W20, [X20 + 0x34]
	0x01EECF50 LDRH W9, [X8 + 0x12E]
	0x01EECF54 LDR X1, [X10]
	0x01EECF58 CBZ X9, 0x1EECF7C
	0x01EECF5C LDR X10, [X8 + 0xB0]
	0x01EECF60 ADD X10, X10, 0x8
	0x01EECF64 LDUR X11, [X10 - 0x8]
	0x01EECF68 CMP X11, X1
	0x01EECF6C B.EQ 0x1EECF8C
	0x01EECF70 SUBS X9, X9, 0x1
	0x01EECF74 ADD X10, X10, 0x10
	0x01EECF78 B.NE 0x1EECF64
	0x01EECF7C MOVZ W2, 0x4
	0x01EECF80 MOV X0, X21
	0x01EECF84 BL 0x1C5C788
	0x01EECF88 B 0x1EECF9C
	0x01EECF8C LDR W9, [X10]
	0x01EECF90 ADD W9, W9, 0x4
	0x01EECF94 ADD X8, X8, W9, 0x4, SXTW
	0x01EECF98 ADD X0, X8, 0x138
	0x01EECF9C LDP X4, X3, [X0]
	0x01EECFA0 MOV X0, X21
	0x01EECFA4 MOV X1, X19
	0x01EECFA8 MOV W2, W20
	0x01EECFAC LDP X20, X19, [X31 + 0x30]
	0x01EECFB0 LDP X22, X21, [X31 + 0x20]
	0x01EECFB4 LDP X24, X23, [X31 + 0x10]
	0x01EECFB8 LDR X30, [X31], #0x40
	0x01EECFBC BR X4
	0x01EECFC0 BL 0x1C16F20
	0x01EECFC4 BL 0x1C16F28
	0x01EECFC8 LDP S16, S7, [X31 + 0x4]
	0x01EECFCC LDR V17, [X31]
	0x01EECFD0 FMUL S18, S4, S4
	0x01EECFD4 FMUL S19, S5, S5
	0x01EECFD8 FMUL S25, S3, S3
	0x01EECFDC FMUL S21, S3, S4
	0x01EECFE0 FMUL S22, S5, S6
	0x01EECFE4 FMUL S23, S3, S5
	0x01EECFE8 FMUL S24, S4, S6
	0x01EECFEC FMUL S4, S4, S5
	0x01EECFF0 FMUL S3, S3, S6
	0x01EECFF4 STP S0, S1, [X0 + 0x30]
	0x01EECFF8 FADD S0, S18, S19
	0x01EECFFC FADD S6, S25, S19
	0x01EED000 FMOV S20, 1
	0x01EED004 FADD S19, S4, S3
	0x01EED008 FSUB S3, S4, S3
	0x01EED00C FADD S4, S25, S18
	0x01EED010 FADD S0, S0, S0
	0x01EED014 FADD S6, S6, S6
	0x01EED018 STR S2, [X0 + 0x38]
	0x01EED01C FADD S1, S21, S22
	0x01EED020 FSUB S2, S23, S24
	0x01EED024 FSUB S5, S21, S22
	0x01EED028 FADD S21, S23, S24
	0x01EED02C FADD S4, S4, S4
	0x01EED030 FSUB S0, S20, S0
	0x01EED034 FSUB S6, S20, S6
	0x01EED038 FSUB S4, S20, S4
	0x01EED03C FMUL S0, S17, S0
	0x01EED040 FMUL S1, S17, S1
	0x01EED044 FMUL S2, S17, S2
	0x01EED048 FMUL S5, S16, S5
	0x01EED04C FMUL S6, S16, S6
	0x01EED050 FMUL S16, S16, S19
	0x01EED054 FMUL S17, S7, S21
	0x01EED058 FMUL S3, S7, S3
	0x01EED05C MOVZ W8, 0x3F800000
	0x01EED060 FMUL S4, S7, S4
	0x01EED064 FADD S1, S1, S1
	0x01EED068 FADD S2, S2, S2
	0x01EED06C FADD S5, S5, S5
	0x01EED070 FADD S7, S16, S16
	0x01EED074 FADD S16, S17, S17
	0x01EED078 FADD S3, S3, S3
	0x01EED07C STR W31, [X0 + 0xC]
	0x01EED080 STR W31, [X0 + 0x1C]
	0x01EED084 STR W31, [X0 + 0x2C]
	0x01EED088 STP S3, S4, [X0 + 0x24]
	0x01EED08C STP S0, S1, [X0]
	0x01EED090 STR S2, [X0 + 0x8]
	0x01EED094 STP S5, S6, [X0 + 0x10]
	0x01EED098 STR S7, [X0 + 0x18]
	0x01EED09C STR S16, [X0 + 0x20]
	0x01EED0A0 STR W8, [X0 + 0x3C]
	0x01EED0A4 RET
	0x01EED0A8 LDRB W0, [X0 + 0x1B4]
	0x01EED0AC RET
	0x01EED0B0 AND W8, W1, 0x1
	0x01EED0B4 STRB W8, [X0 + 0x1B4]
	0x01EED0B8 RET
	0x01EED0BC STP D9, D8, [X31 - 0x30]!
	0x01EED0C0 STR X30, [X31 + 0x10]
	0x01EED0C4 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X24, 0x24EE000
	010 Move X23, 0x2209000
	011 Move W8, [X24+1461]
	012 Move X23, [X23+1136]
	013 Move X19, X3
	014 Move X20, X2
	015 Move X21, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0x2215000
	022 Move X0, [X0+1400]
	023 Call 0x1C17CF4
	024 Move X0, 0x2209000
	025 Move X0, [X0+1136]
	026 Call 0x1C17CF4
	027 Move X0, 0x220C000
	028 Move X0, [X0+192]
	029 Call 0x1C17CF4
	030 Move X0, 0x220B000
	031 Move X0, [X0+3832]
	032 Call 0x1C17CF4
	033 Move X0, 0x220B000
	034 Move X0, [X0+3840]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X24+1461], W8
	038 Move X1, X21
	039 Move [X31+24], X31
	040 Move [X31+8], X31
	041 Call HitboxBuffer.GetClosestTick, X0, X1
	042 Move X2, [X23]
	043 Move W1, W0
	044 Add X0, X31, 0
	045 Move [X31], X31
	046 Call Nullable`1<Int32>..ctor, X0, X1
	047 Compare X21, 0
	048 JumpIfEqual {138}
	049 Move X8, [X31]
	050 Move X23, X21
	051 Move [X23+32], X8
	052 Move X0, [X22+48]
	053 Compare X0, 0
	054 JumpIfEqual {138}
	055 Move X8, 0x2215000
	056 Move X8, [X8+1400]
	057 Move X24, 0x220B000
	058 Move X1, [X8]
	059 Move X24, [X24+3840]
	060 Call HashSet`1<Object>.Clear, X0
	061 Move X1, [X24]
	062 Move X0, X23
	063 Call Nullable`1<Int32>.get_Value, X0
	064 Move W1, W0
	065 Add X2, X31, 24
	066 Move X0, X22
	067 Call HitboxBuffer.GetClosestSnapshotForTick, X0, X1, X2
	068 Move X23, [X31+24]
	069 Compare X23, 0
	070 JumpIfEqual {138}
	071 Move X2, [X22+48]
	072 Move X0, X23
	073 Move X1, X21
	074 Call HitboxSnapshot.QueryBroadphase, X0, X1, X2
	075 Move W8, [X21+20]
	076 Move TEMP, X8
	077 And TEMP, TEMP, 4
	078 Compare TEMP, 4
	079 JumpIfNotEqual {111}
	080 Move X0, X21
	081 Add X0, X0, 56
	082 Move W8, [X0]
	083 Compare W8, 0
	084 JumpIfEqual {111}
	085 Move W8, [X21+48]
	086 Compare W8, 0
	087 JumpIfEqual {111}
	088 Move X1, [X24]
	089 Call Nullable`1<Int32>.get_Value, X0
	090 Move W1, W0
	091 Add X2, X31, 8
	092 Move X0, X22
	093 Call HitboxBuffer.GetClosestSnapshotForTick, X0, X1, X2
	094 Move X24, [X31+8]
	095 Compare X24, 0
	096 JumpIfEqual {138}
	097 Move X2, [X22+48]
	098 Move X0, X24
	099 Move X1, X21
	100 Call HitboxSnapshot.QueryBroadphase, X0, X1, X2
	101 Move X8, [X21+64]
	102 Compare X8, 0
	103 JumpIfEqual {122}
	104 Move X2, [X22+48]
	105 Move X9, [X8+24]
	106 Move X0, [X8+64]
	107 Move X4, [X8+40]
	108 Move X1, X21
	109 Move X3, X20
	110 NotImplemented "Instruction BLR not yet implemented."
	111 Move X8, [X21+64]
	112 Compare X8, 0
	113 JumpIfEqual {121}
	114 Move X2, [X22+48]
	115 Move X9, [X8+24]
	116 Move X0, [X8+64]
	117 Move X4, [X8+40]
	118 Move X1, X21
	119 Move X3, X20
	120 NotImplemented "Instruction BLR not yet implemented."
	121 Move X24, X31
	122 Move X2, [X22+48]
	123 Move X0, X21
	124 Move X1, X23
	125 Move X3, X20
	126 Move X4, X24
	127 Call HitboxSnapshot.ProcessBroadphaseRootCandidates, X0, X1, X2, X3, X4
	128 Move [X19], X23
	129 Move X20, [X31+64]
	130 Move X19, [X31+72]
	131 Move X22, [X31+48]
	132 Move X21, [X31+56]
	133 Move X24, [X31+32]
	134 Move X23, [X31+40]
	135 Move X30, [X31+16]
	136 Add X31, X31, 80
	137 Return 
	138 Call 0x1C17F20

Method: System.Int32 GetClosestTick(Fusion.LagCompensation.Query query)

Disassembly:
	0x01EED0C8 ADRP X20, 0x24EB000
	0x01EED0CC LDR V8, [X0 + 0x48]
	0x01EED0D0 LDRB W8, [X20 + 0x786]
	0x01EED0D4 LDR V9, [X0 + 0x50]
	0x01EED0D8 MOV X19, X0
	0x01EED0DC CBNZ W8, 0x1EED0F4
	0x01EED0E0 ADRP X0, 0x2206000
	0x01EED0E4 LDR X0, [X0 + 0x5A0]
	0x01EED0E8 BL 0x1C16CF4
	0x01EED0EC MOVZ W8, 0x1
	0x01EED0F0 STRB W8, [X20 + 0x786]
	0x01EED0F4 ADRP X8, 0x2206000
	0x01EED0F8 LDR X8, [X8 + 0x5A0]
	0x01EED0FC LDP S1, S0, [X19 + 0x60]
	0x01EED100 FMOV S2, 0.5
	0x01EED104 LDP X20, X19, [X31 + 0x20]
	0x01EED108 LDR X8, [X8]
	0x01EED10C FMUL S0, S0, S2
	0x01EED110 FCMP S0, S1
	0x01EED114 FCSEL S0, S0, S1, GT
	0x01EED118 LDR X8, [X8 + 0xB8]
	0x01EED11C FSUB S0, S0, S1
	0x01EED120 LDR X30, [X31 + 0x10]
	0x01EED124 LDR V2, [X8 + 0x18]
	0x01EED128 LDR V3, [X8 + 0x20]
	0x00000000 INVALID
	0x01EED130 FMUL S2, S3, S0
	0x01EED134 FADD V0.2S, V8.2S, V1.2S
	0x01EED138 FADD S2, S9, S2
	0x01EED13C MOV S1, V0.S[1]
	0x01EED140 LDP D9, D8, [X31], #0x30
	0x01EED144 RET
	0x01EED148 STP D9, D8, [X31 - 0x30]!
	0x01EED14C STR X30, [X31 + 0x10]
	0x01EED150 STP X20, X19, [X31 + 0x20]
	0x01EED154 ADRP X20, 0x24EB000
	0x01EED158 LDR V8, [X0 + 0x48]
	0x01EED15C LDRB W8, [X20 + 0xABD]
	0x01EED160 LDR V9, [X0 + 0x50]
	0x01EED164 MOV X19, X0
	0x01EED168 CBNZ W8, 0x1EED180
	0x01EED16C ADRP X0, 0x2206000
	0x01EED170 LDR X0, [X0 + 0x5A0]
	0x01EED174 BL 0x1C16CF4
	0x01EED178 MOVZ W8, 0x1
	0x01EED17C STRB W8, [X20 + 0xABD]
	0x01EED180 ADRP X8, 0x2206000
	0x01EED184 LDR X8, [X8 + 0x5A0]
	0x01EED188 LDP S1, S0, [X19 + 0x60]
	0x01EED18C FMOV S2, 0.5
	0x01EED190 LDP X20, X19, [X31 + 0x20]
	0x01EED194 LDR X8, [X8]
	0x01EED198 FMUL S0, S0, S2
	0x01EED19C FCMP S0, S1
	0x01EED1A0 FCSEL S0, S0, S1, GT
	0x01EED1A4 LDR X8, [X8 + 0xB8]
	0x01EED1A8 FSUB S0, S0, S1
	0x01EED1AC LDR X30, [X31 + 0x10]
	0x01EED1B0 LDUR V2, [X8 + 0x24]
	0x01EED1B4 LDR V3, [X8 + 0x2C]
	0x00000000 INVALID
	0x01EED1BC FMUL S2, S3, S0
	0x01EED1C0 FADD V0.2S, V8.2S, V1.2S
	0x01EED1C4 FADD S2, S9, S2
	0x01EED1C8 MOV S1, V0.S[1]
	0x01EED1CC LDP D9, D8, [X31], #0x30
	0x01EED1D0 RET
	0x01EED1D4 STRB W31, [X0 + 0x44]
	0x01EED1D8 RET
	0x01EED1DC STR X30, [X31 - 0x30]!
	0x01EED1E0 STP X22, X21, [X31 + 0x10]
	0x01EED1E4 STP X20, X19, [X31 + 0x20]
	0x01EED1E8 LDR X8, [X2 + 0x8]
	0x01EED1EC STP X1, X2, [X0 + 0x20]
	0x01EED1F0 MOV X19, X0
	0x01EED1F4 MOV X20, X2
	0x01EED1F8 STR X8, [X0 + 0x10]
	0x01EED1FC LDRB W22, [X2 + 0x52]
	0x01EED200 STR X0, [X0 + 0x40]
	0x01EED204 MOV X0, X2
	0x01EED208 MOV X21, X1
	0x01EED20C BL 0x1C16D84
	0x01EED210 TBZ X0, 0x0, 0x1EED228
	0x01EED214 CMP W22, 0x3
	0x01EED218 B.NE 0x1EED264
	0x01EED21C ADRP X8, 0xFFFFFFFFFFAAB000
	0x01EED220 ADD X8, X8, 0x58C
	0x01EED224 B 0x1EED2A8
	0x01EED228 CMP W22, 0x2
	0x01EED22C B.NE 0x1EED260
	0x01EED230 LDRB W8, [X19 + 0x70]
	0x01EED234 CBZ W8, 0x1EED278
	0x01EED238 MOV X0, X20
	0x01EED23C BL 0x1C16D7C
	0x01EED240 MOV W21, W0
	0x01EED244 MOV X0, X20
	0x01EED248 BL 0x1C17238
	0x01EED24C TBZ X21, 0x0, 0x1EED284
	0x01EED250 TBZ X0, 0x0, 0x1EED294
	0x01EED254 ADRP X8, 0xFFFFFFFFFFAAB000
	0x01EED258 ADD X8, X8, 0x6C8
	0x01EED25C B 0x1EED2A8
	0x01EED260 CBZ X21, 0x1EED2C8
	0x01EED264 LDR X8, [X19 + 0x10]
	0x01EED268 LDR X9, [X19 + 0x20]
	0x01EED26C STR X8, [X19 + 0x18]
	0x01EED270 STR X9, [X19 + 0x40]
	0x01EED274 B 0x1EED2AC
	0x01EED278 ADRP X8, 0xFFFFFFFFFFAAB000
	0x01EED27C ADD X8, X8, 0x564

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x24ED000
	009 Move W8, [X20+1462]
	010 Move X19, X1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x220A000
	016 Move X0, [X0+3832]
	017 Call 0x1C17CF4
	018 Move X0, 0x220A000
	019 Move X0, [X0+3840]
	020 Call 0x1C17CF4
	021 Move X0, 0x220B000
	022 Move X0, [X0+280]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1462], W8
	026 Compare X19, 0
	027 JumpIfEqual {125}
	028 Move X20, X19
	029 Move X21, 0x220A000
	030 Add X20, X20, 56
	031 Move W8, [X20]
	032 Move X21, [X21+3840]
	033 Compare W8, 0
	034 JumpIfEqual {88}
	035 Move W8, [X19+20]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 4
	038 Compare TEMP, 4
	039 JumpIfEqual {88}
	040 Move X1, [X21]
	041 Add X0, X19, 32
	042 Call Nullable`1<Int32>.get_Value, X0
	043 Move X1, [X21]
	044 Move W21, W0
	045 Move X0, X20
	046 Call Nullable`1<Int32>.get_Value, X0
	047 Move X8, 0x220B000
	048 Move X8, [X8+280]
	049 Move W20, W0
	050 Add X0, X19, 48
	051 Move X1, [X8]
	052 Call Nullable`1<Single>.get_Value, X0
	053 Move X19, 0x24ED000
	054 Move S2, 1
	055 Move W8, [X19+1495]
	056 NotImplemented "Instruction SCVTF not yet implemented."
	057 NotImplemented "Instruction SCVTF not yet implemented."
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 NotImplemented "Instruction FMIN not yet implemented."
	060 Move S2, W31
	061 NotImplemented "Instruction FCSEL not yet implemented."
	062 Subtract S1, S1, S8
	063 Multiply S9, S1, S0
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x2207000
	067 Move X0, [X0+1448]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X19+1495], W8
	071 Move X8, 0x2207000
	072 Move X8, [X8+1448]
	073 Add S9, S9, S8
	074 Move X0, [X8]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 NotImplemented "Instruction FCVT not yet implemented."
	080 Add X0, X31, 8
	081 Move V0, V8
	082 Call 0x3EB2C00
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 Move D1, -0.5
	085 NotImplemented "Instruction FCMP not yet implemented."
	086 Move V0, [X31+8]
	087 Move D1, -1
	088 Move X1, [X21]
	089 Add X0, X19, 32
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Move D9, [X31+16]
	095 Move D8, [X31+24]
	096 Add X31, X31, 64
	097 Call Nullable`1<Int32>.get_Value, X0
	098 Return X0
	099 Move D1, 0.5
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 Move V0, [X31+8]
	102 Move D1, 1
	103 NotImplemented "Instruction FCVTZS not yet implemented."
	104 Add D1, D0, D1
	105 And X31, X8, 1
	106 NotImplemented "Instruction FCSEL not yet implemented."
	107 Add D0, D8, D1
	108 NotImplemented "Instruction FRINTP not yet implemented."
	109 Add D0, D8, D1
	110 NotImplemented "Instruction FRINTM not yet implemented."
	111 Move X8, 0x7FF00000
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X30, [X31+32]
	115 Move X21, [X31+40]
	116 Move D9, [X31+16]
	117 Move D8, [X31+24]
	118 Move D1, X8
	119 NotImplemented "Instruction FCVTZS not yet implemented."
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 Move W8, 0x80000000
	122 NotImplemented "Instruction CSEL not yet implemented."
	123 Add X31, X31, 64
	124 Return X0
	125 Call 0x1C17F20

