Type: Fusion.LagCompensation.HitboxColliderContainerDraw/<GetEnumerator>d__2

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01EEB124 CMP W1, 0x1
	0x01EEB128 B.NE 0x1EEB15C
	0x01EEB12C MOV X0, X23
	0x01EEB130 BL 0x3EB1AD0
	0x01EEB134 LDR X24, [X0]
	0x01EEB138 BL 0x3EB1AE0
	0x01EEB13C ADRP X8, 0x2215000
	0x01EEB140 LDR X8, [X8 + 0x438]
	0x01EEB144 ADD X0, X31, 0x8
	0x01EEB148 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01EEB150 CBZ X24, 0x1EEB0C4

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01EEB154 MOV X0, X24
	0x01EEB158 BL 0x1C16F18
	0x01EEB15C MOV X24, X31
	0x01EEB160 B 0x1EEB168
	0x01EEB164 MOV X23, X0
	0x01EEB168 ADRP X8, 0x2215000
	0x01EEB16C LDR X8, [X8 + 0x438]
	0x01EEB170 LDR X1, [X8]
	0x01EEB174 ADD X0, X31, 0x8
	0x01EEB178 BL 0x2BC434C
	0x01EEB17C CBNZ X24, 0x1EEB188
	0x01EEB180 MOV X0, X23
	0x01EEB184 BL 0x1D2C690
	0x01EEB188 MOV X0, X24
	0x01EEB18C BL 0x1C16F18
	0x01EEB190 BL 0x1990590
	0x01EEB194 STR X30, [X31 - 0x20]!
	0x01EEB198 STP X20, X19, [X31 + 0x10]
	0x01EEB19C LDR W9, [X0 + 0x28]
	0x01EEB1A0 LDR W8, [X0 + 0x20]
	0x01EEB1A4 MOV X19, X0
	0x01EEB1A8 MOV W20, W1
	0x01EEB1AC CMP W9, W1
	0x01EEB1B0 B.NE 0x1EEB1D4
	0x01EEB1B4 LDR X9, [X19 + 0x10]
	0x01EEB1B8 CBZ X9, 0x1EEB23C
	0x01EEB1BC LDR W10, [X9 + 0x18]
	0x01EEB1C0 ADD W8, W8, W10
	0x01EEB1C4 SUB W8, W8, 0x1
	0x01EEB1C8 SDIV W11, W8, W10
	0x01EEB1CC MSUB W8, W11, W10, W8
	0x01EEB1D0 B 0x1EEB1E8
	0x01EEB1D4 LDR W10, [X19 + 0x24]
	0x01EEB1D8 LDR X9, [X19 + 0x10]
	0x01EEB1DC ADD W10, W10, 0x1
	0x01EEB1E0 STR W10, [X19 + 0x24]
	0x01EEB1E4 CBZ X9, 0x1EEB23C
	0x01EEB1E8 LDR W11, [X9 + 0x18]
	0x01EEB1EC ADD W10, W8, 0x1
	0x01EEB1F0 SDIV W12, W10, W11
	0x01EEB1F4 MSUB W10, W12, W11, W10
	0x01EEB1F8 CMP W10, W11
	0x01EEB1FC STR W10, [X19 + 0x20]
	0x01EEB200 B.CS 0x1EEB238
	0x01EEB204 CMP W8, W11
	0x01EEB208 B.CS 0x1EEB238
	0x01EEB20C ADD X10, X9, W10, 0x3, SXTW
	0x01EEB210 LDR X0, [X10 + 0x20]
	0x01EEB214 CBZ X0, 0x1EEB23C
	0x01EEB218 ADD X8, X9, W8, 0x3, SXTW
	0x01EEB21C LDR X3, [X8 + 0x20]
	0x01EEB220 MOV W1, W20
	0x01EEB224 BL 0x1EEB240
	0x01EEB228 STR W20, [X19 + 0x28]
	0x01EEB22C LDP X20, X19, [X31 + 0x10]
	0x01EEB230 LDR X30, [X31], #0x20
	0x01EEB234 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+16]
	006 Move X20, [X0+32]
	007 Move X19, X0
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Compare W8, 0
	010 JumpIfNotEqual {56}
	011 Move TEMP, 0
	012 Not TEMP
	013 Move W8, TEMP
	014 Move [X19+16], W8
	015 Compare X20, 0
	016 JumpIfEqual {70}
	017 Move X8, [X20+24]
	018 Compare X8, 0
	019 JumpIfEqual {70}
	020 Move X9, [X20+16]
	021 Move W21, 1
	022 Move [X8+24], X9
	023 Move TEMP, 0
	024 Not TEMP
	025 Move W8, TEMP
	026 Move [X19+16], W8
	027 Move X0, [X20+16]
	028 Compare X0, 0
	029 JumpIfEqual {70}
	030 Move W1, [X19+40]
	031 Move X2, X31
	032 Call 0x1E8A774
	033 Move W8, [X0+104]
	034 Compare W8, 0
	035 JumpIfEqual {45}
	036 Move X0, [X20+16]
	037 Compare X0, 0
	038 JumpIfEqual {70}
	039 Move W1, [X19+40]
	040 Move X2, X31
	041 Call 0x1E8A774
	042 Move W8, [X0+128]
	043 Compare W8, 0
	044 JumpIfNotEqual {57}
	045 Move W8, [X19+40]
	046 Add W21, W8, 1
	047 Move [X19+40], W21
	048 Compare X20, 0
	049 JumpIfEqual {70}
	050 Move X0, [X20+16]
	051 Compare X0, 0
	052 JumpIfEqual {70}
	053 Move X1, X31
	054 Call HitboxSnapshot.get_CollidersCount, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W0, W31
	057 Move X8, [X20+24]
	058 Compare X8, 0
	059 JumpIfEqual {70}
	060 Move W9, [X19+40]
	061 Move W0, 1
	062 Move [X8+16], W9
	063 Move [X19+24], X8
	064 Move [X19+16], W0
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Return X0
	070 Call 0x1C17F20

Method: Fusion.LagCompensation.ColliderDrawInfo System.Collections.Generic.IEnumerator<Fusion.LagCompensation.ColliderDrawInfo>.get_Current()

Disassembly:
	0x01EEB238 BL 0x1C16F28
	0x01EEB23C BL 0x1C16F20

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01EEB240 STR X30, [X31 - 0x40]!
	0x01EEB244 STP X24, X23, [X31 + 0x10]
	0x01EEB248 STP X22, X21, [X31 + 0x20]
	0x01EEB24C STP X20, X19, [X31 + 0x30]
	0x01EEB250 ADRP X23, 0x24EE000
	0x01EEB254 LDRB W8, [X23 + 0x5B8]
	0x01EEB258 MOV X19, X3
	0x01EEB25C MOV W21, W2
	0x01EEB260 MOV W22, W1
	0x01EEB264 MOV X20, X0
	0x01EEB268 TBNZ X8, 0x0, 0x1EEB280
	0x01EEB26C ADRP X0, 0x2212000
	0x01EEB270 LDR X0, [X0 + 0xF68]
	0x01EEB274 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2209000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2216000
	011 Move X0, [X0+1272]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01EEB278 MOVZ W8, 0x1
	0x01EEB27C STRB W8, [X23 + 0x5B8]
	0x01EEB280 LDR W2, [X20 + 0x1C]
	0x01EEB284 CMP W2, 0x1
	0x01EEB288 B.LT 0x1EEB29C
	0x01EEB28C LDR X0, [X20 + 0x10]
	0x01EEB290 LDR W1, [X20 + 0x18]
	0x01EEB294 MOV X3, X31
	0x01EEB298 BL 0x339FA34
	0x01EEB29C STR W31, [X20 + 0x1C]
	0x01EEB2A0 CBZ X19, 0x1EEB39C
	0x01EEB2A4 LDR X23, [X20 + 0x28]
	0x01EEB2A8 CBZ X23, 0x1EEB39C
	0x01EEB2AC ADRP X10, 0x2212000
	0x01EEB2B0 LDR X8, [X23]
	0x01EEB2B4 LDR X10, [X10 + 0xF68]
	0x01EEB2B8 LDR X24, [X19 + 0x28]
	0x01EEB2BC LDRH W9, [X8 + 0x12E]
	0x01EEB2C0 LDR X1, [X10]
	0x01EEB2C4 CBZ X9, 0x1EEB2E8
	0x01EEB2C8 LDR X10, [X8 + 0xB0]
	0x01EEB2CC ADD X10, X10, 0x8
	0x01EEB2D0 LDUR X11, [X10 - 0x8]
	0x01EEB2D4 CMP X11, X1
	0x01EEB2D8 B.EQ 0x1EEB2F8
	0x01EEB2DC SUBS X9, X9, 0x1
	0x01EEB2E0 ADD X10, X10, 0x10
	0x01EEB2E4 B.NE 0x1EEB2D0
	0x01EEB2E8 MOV X0, X23
	0x01EEB2EC MOV W2, W31
	0x01EEB2F0 BL 0x1C5C788
	0x01EEB2F4 B 0x1EEB304
	0x01EEB2F8 LDRSW X9, [X10]
	0x01EEB2FC ADD X8, X8, X9, 0x4, LSL
	0x01EEB300 ADD X0, X8, 0x138
	0x01EEB304 LDP X8, X2, [X0]
	0x01EEB308 MOV X0, X23
	0x01EEB30C MOV X1, X24
	0x01EEB310 BLR X8
	0x01EEB314 LDR X2, [X20 + 0x10]
	0x01EEB318 STP W22, W21, [X20 + 0x30]
	0x01EEB31C CBZ X2, 0x1EEB39C
	0x01EEB320 LDR W8, [X2 + 0x18]
	0x01EEB324 LDR W4, [X19 + 0x18]
	0x01EEB328 CMP W4, W8
	0x01EEB32C B.LE 0x1EEB348
	0x01EEB330 LDR W9, [X20 + 0x18]
	0x01EEB334 MOV X0, X20
	0x01EEB338 SUB W1, W9, W8
	0x01EEB33C BL 0x1EEC9B4
	0x01EEB340 LDR X2, [X20 + 0x10]
	0x01EEB344 LDR W4, [X19 + 0x18]
	0x01EEB348 LDR X0, [X19 + 0x10]
	0x01EEB34C MOV W1, W31
	0x01EEB350 MOV W3, W31
	0x01EEB354 MOV X5, X31
	0x01EEB358 BL 0x339FCE8
	0x01EEB35C LDR X0, [X20 + 0x10]
	0x01EEB360 CBZ X0, 0x1EEB39C
	0x01EEB364 LDR W1, [X19 + 0x18]
	0x01EEB368 LDR W8, [X0 + 0x18]
	0x01EEB36C MOV X3, X31
	0x01EEB370 SUB W2, W8, W1
	0x01EEB374 BL 0x339FA34
	0x01EEB378 LDR W8, [X19 + 0x18]
	0x01EEB37C LDP X22, X21, [X31 + 0x20]
	0x01EEB380 LDP X24, X23, [X31 + 0x10]
	0x01EEB384 STR W8, [X20 + 0x18]
	0x01EEB388 LDR W8, [X19 + 0x20]
	0x01EEB38C STR W8, [X20 + 0x20]
	0x01EEB390 LDP X20, X19, [X31 + 0x30]
	0x01EEB394 LDR X30, [X31], #0x40
	0x01EEB398 RET
	0x01EEB39C BL 0x1C16F20
	0x01EEB3A0 STR X30, [X31 - 0x10]!
	0x01EEB3A4 BL 0x1EEA9E4
	0x01EEB3A8 CBZ X0, 0x1EEB3B8
	0x01EEB3AC MOV X1, X31
	0x01EEB3B0 LDR X30, [X31], #0x10
	0x01EEB3B4 B 0x1EDED14
	0x01EEB3B8 BL 0x1C16F20
	0x01EEB3BC STR X30, [X31 - 0x10]!
	0x01EEB3C0 LDR X8, [X0 + 0x10]
	0x01EEB3C4 CBZ X8, 0x1EEB3EC
	0x01EEB3C8 LDRSW X9, [X0 + 0x20]
	0x01EEB3CC LDR W10, [X8 + 0x18]
	0x01EEB3D0 CMP W9, W10
	0x01EEB3D4 B.CS 0x1EEB3F0
	0x01EEB3D8 ADD X8, X8, X9, 0x3, LSL
	0x01EEB3DC LDR X0, [X8 + 0x20]
	0x01EEB3E0 CBZ X0, 0x1EEB3EC
	0x01EEB3E4 LDR X30, [X31], #0x10
	0x01EEB3E8 B 0x1EEB3F4
	0x01EEB3EC BL 0x1C16F20
	0x01EEB3F0 BL 0x1C16F28
	0x01EEB3F4 STP X30, X21, [X31 - 0x20]!
	0x01EEB3F8 STP X20, X19, [X31 + 0x10]
	0x01EEB3FC ADRP X21, 0x24EE000
	0x01EEB400 LDRB W8, [X21 + 0x5BA]
	0x01EEB404 MOV X19, X1
	0x01EEB408 MOV X20, X0
	0x01EEB40C TBNZ X8, 0x0, 0x1EEB424
	0x01EEB410 ADRP X0, 0x2212000
	0x01EEB414 LDR X0, [X0 + 0xF68]
	0x01EEB418 BL 0x1C16CF4
	0x01EEB41C MOVZ W8, 0x1
	0x01EEB420 STRB W8, [X21 + 0x5BA]
	0x01EEB424 CBZ X19, 0x1EEB4B4
	0x01EEB428 LDR W2, [X20 + 0x34]
	0x01EEB42C MOV X0, X19
	0x01EEB430 MOV X1, X20
	0x01EEB434 MOV X3, X31
	0x01EEB438 BL 0x1E8529C
	0x01EEB43C LDR X20, [X20 + 0x28]
	0x01EEB440 CBZ X20, 0x1EEB4B4
	0x01EEB444 ADRP X10, 0x2212000
	0x01EEB448 LDR X8, [X20]
	0x01EEB44C LDR X10, [X10 + 0xF68]
	0x01EEB450 LDRH W9, [X8 + 0x12E]
	0x01EEB454 LDR X1, [X10]
	0x01EEB458 CBZ X9, 0x1EEB47C
	0x01EEB45C LDR X10, [X8 + 0xB0]
	0x01EEB460 ADD X10, X10, 0x8
	0x01EEB464 LDUR X11, [X10 - 0x8]
	0x01EEB468 CMP X11, X1
	0x01EEB46C B.EQ 0x1EEB48C
	0x01EEB470 SUBS X9, X9, 0x1
	0x01EEB474 ADD X10, X10, 0x10
	0x01EEB478 B.NE 0x1EEB464
	0x01EEB47C MOVZ W2, 0x2
	0x01EEB480 MOV X0, X20
	0x01EEB484 BL 0x1C5C788
	0x01EEB488 B 0x1EEB49C
	0x01EEB48C LDR W9, [X10]
	0x01EEB490 ADD W9, W9, 0x2
	0x01EEB494 ADD X8, X8, W9, 0x4, SXTW
	0x01EEB498 ADD X0, X8, 0x138
	0x01EEB49C LDP X3, X2, [X0]
	0x01EEB4A0 MOV X0, X20
	0x01EEB4A4 MOV X1, X19
	0x01EEB4A8 LDP X20, X19, [X31 + 0x10]
	0x01EEB4AC LDP X30, X21, [X31], #0x20
	0x01EEB4B0 BR X3
	0x01EEB4B4 BL 0x1C16F20
	0x01EEB4B8 STR X30, [X31 - 0x10]!
	0x01EEB4BC LDR X8, [X0 + 0x10]
	0x01EEB4C0 CBZ X8, 0x1EEB4E8
	0x01EEB4C4 LDRSW X9, [X0 + 0x20]
	0x01EEB4C8 LDR W10, [X8 + 0x18]
	0x01EEB4CC CMP W9, W10
	0x01EEB4D0 B.CS 0x1EEB4EC
	0x01EEB4D4 ADD X8, X8, X9, 0x3, LSL
	0x01EEB4D8 LDR X0, [X8 + 0x20]
	0x01EEB4DC CBZ X0, 0x1EEB4E8
	0x01EEB4E0 LDR X30, [X31], #0x10
	0x01EEB4E4 B 0x1EEB4F0
	0x01EEB4E8 BL 0x1C16F20
	0x01EEB4EC BL 0x1C16F28
	0x01EEB4F0 STP X30, X21, [X31 - 0x20]!
	0x01EEB4F4 STP X20, X19, [X31 + 0x10]
	0x01EEB4F8 ADRP X21, 0x24EE000
	0x01EEB4FC LDRB W8, [X21 + 0x5BB]
	0x01EEB500 MOV X19, X1
	0x01EEB504 MOV X20, X0
	0x01EEB508 TBNZ X8, 0x0, 0x1EEB520
	0x01EEB50C ADRP X0, 0x2212000
	0x01EEB510 LDR X0, [X0 + 0xF68]
	0x01EEB514 BL 0x1C16CF4
	0x01EEB518 MOVZ W8, 0x1
	0x01EEB51C STRB W8, [X21 + 0x5BB]
	0x01EEB520 CBZ X19, 0x1EEB5AC
	0x01EEB524 MOV X0, X19

ISIL:
	001 Move X0, [X0+24]
	002 Return X0
	003 Move [X31-48], X30
	004 Move [X31+16], X22
	005 Move [X31+24], X21
	006 Move [X31+32], X20
	007 Move [X31+40], X19
	008 Move X21, 0x24EF000
	009 Move W8, [X21+1445]
	010 Move X19, X1
	011 Move X20, X0
	012 Compare W8, 0
	013 JumpIfNotEqual {22}
	014 Move X0, 0x2216000
	015 Move X0, [X0+848]
	016 Call 0x1C17CF4
	017 Move X0, 0x220B000
	018 Move X0, [X0+2520]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1445], W8
	022 Move X21, [X20+104]
	023 Compare X21, 0
	024 JumpIfEqual {91}
	025 Move X22, 0x24EF000
	026 Move W8, [X22+555]
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x2213000
	030 Move X0, [X0+3416]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+555], W8
	034 Move X8, 0x2213000
	035 Move X8, [X8+3416]
	036 Move X0, X21
	037 Move W1, W31
	038 Move X2, [X8]
	039 Call NetworkBehaviour.ReinterpretState, X0, X1
	040 Move W8, [X0]
	041 NotImplemented "Instruction ORN not yet implemented."
	042 And W9, W9, 1
	043 Move [X20+88], W9
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {85}
	048 Move X21, 0x2216000
	049 Move X21, [X21+848]
	050 Move X0, [X21]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X19
	057 Move X2, X31
	058 Call 0x1EEB398
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {85}
	063 Move X0, [X21]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move W1, [X20+76]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare X19, 0
	071 JumpIfEqual {91}
	072 Move X0, [X19+40]
	073 Compare X0, 0
	074 JumpIfEqual {91}
	075 Move X8, 0x220B000
	076 Move X8, [X8+2520]
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X2, [X8]
	082 Move X30, [X31+48]
	083 Call HashSet`1<Int32>.Add, X0, X1
	084 Return X0
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X30, [X31+48]
	090 Return X0
	091 Call 0x1C17F20
	092 Subtract X31, X31, 208
	093 Move [X31+128], D12
	094 Move [X31+144], D11
	095 Move [X31+152], D10
	096 Move [X31+160], D9
	097 Move [X31+168], D8
	098 Move [X31+176], X30
	099 Move [X31+184], X21
	100 Move [X31+192], X20
	101 Move [X31+200], X19
	102 Move X21, 0x24EF000
	103 Move W8, [X21+1447]
	104 Move X20, X1
	105 Move X19, X0
	106 Compare W8, 0
	107 JumpIfNotEqual {113}
	108 Move X0, 0x2216000
	109 Move X0, [X0+848]
	110 Call 0x1C17CF4
	111 Move W8, 1
	112 Move [X21+1447], W8
	113 Move X21, 0x2216000
	114 Move X21, [X21+848]
	115 Move X0, [X21]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Add X8, X31, 80
	121 Move X0, X19
	122 Move X1, X20
	123 Call BVHNode.ComputeMinVolume, X0, X1
	124 NotImplemented "Instruction LDUR not yet implemented."
	125 Move S9, [X31+80]
	126 Move S10, [X31+84]
	127 Move V11, [X31+88]
	128 Move V0, [X19]
	129 Move V8, [X31+100]
	130 Move X8, [X19+16]
	131 Move S12, V1.S[1]
	132 Move [X31], V1
	133 Move [X31+8], V0
	134 Subtract S0, S9, S1
	135 Subtract S1, S10, S12
	136 Subtract S2, S11, S8
	137 Add X0, X31, 16
	138 Move X1, X31
	139 Move [X31+32], X8
	140 Call Bounds.Contains, X0, X1
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {157}
	145 Move V0, [X31]
	146 Add S1, S10, S12
	147 Add S2, S11, S8
	148 Add X0, X31, 16
	149 Add S0, S9, S0
	150 Move X1, X31
	151 Call Bounds.Contains, X0, X1
	152 Move TEMP, X0
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfNotEqual {157}
	156 Move W0, W31
	157 Move V5, [X31]
	158 Move [X19], S9
	159 Move [X19+8], S10
	160 Move [X19+8], S11
	161 Move [X19+20], S8
	162 Move [X19+12], D5
	163 Compare X20, 0
	164 JumpIfEqual {213}
	165 Move V1, [X20+68]
	166 Add S0, S8, S8
	167 Add V2, V5, V5
	168 NotImplemented "Instruction MOVI not yet implemented."
	169 Move S4, 0.5
	170 NotImplemented "Instruction INVALID not yet implemented."
	171 Multiply S0, S0, S1
	172 NotImplemented "Instruction INVALID not yet implemented."
	173 Multiply S0, S0, S4
	174 Add V1, V5, V1
	175 Add S0, S8, S0
	176 Move [X19+12], D1
	177 Move [X19+20], S0
	178 Move X0, [X21]
	179 Move W8, [X0+224]
	180 Compare W8, 0
	181 JumpIfNotEqual {183}
	182 Call 0x1C17DFC
	183 Move X8, [X19+16]
	184 Move V0, [X19]
	185 NotImplemented "Instruction MOVI not yet implemented."
	186 Add X0, X31, 80
	187 Add X1, X31, 48
	188 Move X2, X31
	189 Move [X31+96], V1
	190 Move [X31+104], V1
	191 Move [X31+64], X8
	192 Move [X31+3], V0
	193 Move [X31+5], V1
	194 Call AABB..ctor, X0, X1
	195 Move V1, [X31+96]
	196 Move V0, [X31+112]
	197 Move V2, [X31+5]
	198 Move W0, 1
	199 Move [X19+56], V0
	200 Move [X19+40], V1
	201 Move [X19+24], V2
	202 Move X20, [X31+192]
	203 Move X19, [X31+200]
	204 Move X30, [X31+176]
	205 Move X21, [X31+184]
	206 Move D9, [X31+160]
	207 Move D8, [X31+168]
	208 Move D11, [X31+144]
	209 Move D10, [X31+152]
	210 Move V12, [X31+128]
	211 Add X31, X31, 208
	212 Return X0
	213 Call 0x1C17F20

