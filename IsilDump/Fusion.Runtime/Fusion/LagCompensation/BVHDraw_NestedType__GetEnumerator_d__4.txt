Type: Fusion.LagCompensation.BVHDraw/<GetEnumerator>d__4

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01EEB648 ADRP X8, 0x220F000
	0x01EEB64C LDR X8, [X8 + 0x678]
	0x01EEB650 LDR X1, [X8]
	0x01EEB654 BL 0x2DAA53C
	0x01EEB658 LDR X2, [X21 + 0x38]
	0x01EEB65C ADD X3, X31, 0x8
	0x01EEB660 MOV X0, X21
	0x01EEB664 MOV X1, X20
	0x01EEB668 MOV X4, X31
	0x01EEB66C BL 0x1EF1714

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01EEB674 CBZ X2, 0x1EEB740

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01EEB678 LDR W8, [X2 + 0x20]
	0x01EEB67C CMP W8, 0x1
	0x01EEB680 B.LT 0x1EEB708
	0x01EEB684 LDR X1, [X31 + 0x8]
	0x01EEB688 MOV X0, X21
	0x01EEB68C MOV X3, X31
	0x01EEB690 BL 0x1EF18EC
	0x01EEB694 CBZ X20, 0x1EEB740
	0x01EEB698 LDR X8, [X20]
	0x01EEB69C LDR X2, [X21 + 0x38]
	0x01EEB6A0 LDR X1, [X31 + 0x8]
	0x01EEB6A4 MOV X0, X20
	0x01EEB6A8 LDP X9, X4, [X8 + 0x198]
	0x01EEB6AC MOV X3, X19
	0x01EEB6B0 BLR X9
	0x01EEB6B4 LDR X20, [X31 + 0x8]
	0x01EEB6B8 CBZ X20, 0x1EEB740
	0x01EEB6BC ADRP X10, 0x2212000
	0x01EEB6C0 LDR X8, [X20]
	0x01EEB6C4 LDR X10, [X10 + 0xE78]
	0x01EEB6C8 MOV W19, W0
	0x01EEB6CC LDRH W9, [X8 + 0x12E]
	0x01EEB6D0 LDR X1, [X10]
	0x01EEB6D4 CBZ X9, 0x1EEB6F8
	0x01EEB6D8 LDR X10, [X8 + 0xB0]
	0x01EEB6DC ADD X10, X10, 0x8
	0x01EEB6E0 LDUR X11, [X10 - 0x8]
	0x01EEB6E4 CMP X11, X1
	0x01EEB6E8 B.EQ 0x1EEB710
	0x01EEB6EC SUBS X9, X9, 0x1
	0x01EEB6F0 ADD X10, X10, 0x10
	0x01EEB6F4 B.NE 0x1EEB6E0
	0x01EEB6F8 MOVZ W2, 0x4
	0x01EEB6FC MOV X0, X20
	0x01EEB700 BL 0x1C5C788
	0x01EEB704 B 0x1EEB720
	0x01EEB708 MOV W19, W31
	0x01EEB70C B 0x1EEB72C
	0x01EEB710 LDR W9, [X10]
	0x01EEB714 ADD W9, W9, 0x4
	0x01EEB718 ADD X8, X8, W9, 0x4, SXTW
	0x01EEB71C ADD X0, X8, 0x138
	0x01EEB720 LDP X8, X1, [X0]
	0x01EEB724 MOV X0, X20
	0x01EEB728 BLR X8
	0x01EEB72C AND W0, W19, 0x1
	0x01EEB730 LDP X20, X19, [X31 + 0x20]
	0x01EEB734 LDP X22, X21, [X31 + 0x10]
	0x01EEB738 LDR X30, [X31], #0x30
	0x01EEB73C RET
	0x01EEB740 BL 0x1C16F20
	0x01EEB744 STR X29, [X31 - 0x40]!
	0x01EEB748 STP X30, X23, [X31 + 0x10]
	0x01EEB74C STP X22, X21, [X31 + 0x20]
	0x01EEB750 STP X20, X19, [X31 + 0x30]
	0x01EEB754 SUB X31, X31, 0x400
	0x01EEB758 ADRP X23, 0x24EE000
	0x01EEB75C LDRB W8, [X23 + 0x5B3]
	0x01EEB760 MOV X19, X3
	0x01EEB764 MOV X20, X2
	0x01EEB768 MOV X21, X1
	0x01EEB76C MOV X22, X0
	0x01EEB770 TBNZ X8, 0x0, 0x1EEB7AC
	0x01EEB774 ADRP X0, 0x220C000
	0x01EEB778 LDR X0, [X0 + 0xC0]
	0x01EEB77C BL 0x1C16CF4
	0x01EEB780 ADRP X0, 0x220B000
	0x01EEB784 LDR X0, [X0 + 0xEF8]
	0x01EEB788 BL 0x1C16CF4
	0x01EEB78C ADRP X0, 0x220B000
	0x01EEB790 LDR X0, [X0 + 0xF00]
	0x01EEB794 BL 0x1C16CF4
	0x01EEB798 ADRP X0, 0x220C000
	0x01EEB79C LDR X0, [X0 + 0x118]
	0x01EEB7A0 BL 0x1C16CF4
	0x01EEB7A4 MOVZ W8, 0x1
	0x01EEB7A8 STRB W8, [X23 + 0x5B3]
	0x01EEB7AC STR X31, [X31 + 0x408]
	0x01EEB7B0 STR X31, [X31 + 0x220]
	0x01EEB7B4 LDR W1, [X21 + 0x10]
	0x01EEB7B8 ADD X2, X31, 0x408
	0x01EEB7BC MOV X0, X22
	0x01EEB7C0 BL 0x1EEB8C4
	0x01EEB7C4 LDR X8, [X21 + 0x38]
	0x01EEB7C8 CBZ X8, 0x1EEB8C0
	0x01EEB7CC LDR X0, [X31 + 0x408]
	0x01EEB7D0 CBZ X0, 0x1EEB8C0
	0x01EEB7D4 LDR W23, [X8 + 0x54]
	0x01EEB7D8 MOV X2, X31
	0x01EEB7DC MOV W1, W23
	0x01EEB7E0 BL 0x1E89774
	0x01EEB7E4 MOV X1, X0
	0x01EEB7E8 ADD X0, X31, 0x228
	0x01EEB7EC MOVZ W2, 0x1D8
	0x01EEB7F0 BL 0x3EB1AC0
	0x01EEB7F4 LDRB W8, [X21]
	0x01EEB7F8 TBZ X8, 0x2, 0x1EEB86C
	0x01EEB7FC MOV X0, X21
	0x01EEB800 LDRB W8, [X0 + 0x14]!
	0x01EEB804 CBZ W8, 0x1EEB86C
	0x01EEB808 LDRB W8, [X21 + 0x1C]!
	0x01EEB80C CBZ W8, 0x1EEB86C
	0x01EEB810 ADRP X8, 0x220B000
	0x01EEB814 LDR X8, [X8 + 0xF00]
	0x01EEB818 LDR X1, [X8]
	0x01EEB81C BL 0x2434214
	0x01EEB820 MOV W1, W0
	0x01EEB824 ADD X2, X31, 0x220
	0x01EEB828 MOV X0, X22
	0x01EEB82C BL 0x1EEB8C4
	0x01EEB830 LDR X0, [X31 + 0x220]
	0x01EEB834 CBZ X0, 0x1EEB8C0
	0x01EEB838 MOV W1, W23
	0x01EEB83C MOV X2, X31
	0x01EEB840 BL 0x1E89774
	0x01EEB844 ADRP X8, 0x220C000
	0x01EEB848 LDR X8, [X8 + 0x118]
	0x01EEB84C MOV X22, X0
	0x01EEB850 MOV X0, X21
	0x01EEB854 LDR X1, [X8]
	0x01EEB858 BL 0x243AC20
	0x01EEB85C ADD X0, X31, 0x228
	0x01EEB860 ADD X2, X31, 0x228
	0x01EEB864 MOV X1, X22
	0x01EEB868 BL 0x1EEB974
	0x01EEB86C ADD X0, X31, 0x48
	0x01EEB870 ADD X1, X31, 0x228
	0x01EEB874 MOVZ W2, 0x1D8
	0x01EEB878 BL 0x3EB1AC0
	0x01EEB87C LDR X8, [X31 + 0x200]
	0x01EEB880 LDR W9, [X31 + 0x208]
	0x01EEB884 ADD X0, X31, 0x228
	0x01EEB888 STR X8, [X20]
	0x01EEB88C ADD X8, X31, 0x8
	0x01EEB890 STR W9, [X20 + 0x8]
	0x01EEB894 BL 0x1EEBAE0
	0x01EEB898 ADD X0, X31, 0x8
	0x01EEB89C BL 0x1EEBBD0
	0x01EEB8A0 STP S0, S1, [X19]
	0x01EEB8A4 STP S2, S3, [X19 + 0x8]
	0x01EEB8A8 ADD X31, X31, 0x400
	0x01EEB8AC LDP X20, X19, [X31 + 0x30]
	0x01EEB8B0 LDP X22, X21, [X31 + 0x20]
	0x01EEB8B4 LDP X30, X23, [X31 + 0x10]
	0x01EEB8B8 LDR X29, [X31], #0x40
	0x01EEB8BC RET
	0x01EEB8C0 BL 0x1C16F20
	0x01EEB8C4 STR X30, [X31 - 0x10]!
	0x01EEB8C8 LDR W9, [X0 + 0x28]
	0x01EEB8CC LDR X8, [X0 + 0x10]
	0x01EEB8D0 SUB W10, W1, W9
	0x01EEB8D4 CMP W10, 0x1
	0x01EEB8D8 B.LT 0x1EEB904
	0x01EEB8DC CBZ X8, 0x1EEB96C
	0x01EEB8E0 LDRSW X10, [X0 + 0x20]
	0x01EEB8E4 LDR W9, [X8 + 0x18]
	0x01EEB8E8 CMP W10, W9
	0x01EEB8EC B.CS 0x1EEB970
	0x01EEB8F0 ADD X8, X8, X10, 0x3, LSL
	0x01EEB8F4 LDR X8, [X8 + 0x20]
	0x01EEB8F8 STR X8, [X2]
	0x01EEB8FC LDR X30, [X31], #0x10
	0x01EEB900 RET
	0x01EEB904 CBZ X8, 0x1EEB96C
	0x01EEB908 LDR W9, [X8 + 0x18]
	0x01EEB90C MOVZ W11, 0x1
	0x01EEB910 SUB W11, W11, W9
	0x01EEB914 CMP W10, W11
	0x01EEB918 B.GE 0x1EEB930
	0x01EEB91C LDR W10, [X0 + 0x24]
	0x01EEB920 CMP W10, W9
	0x01EEB924 B.GE 0x1EEB954
	0x01EEB928 MOVZ W10, 0x1
	0x01EEB92C B 0x1EEB8E8
	0x01EEB930 LDR W11, [X0 + 0x20]
	0x01EEB934 ADD W10, W10, W9
	0x01EEB938 ADD W10, W10, W11
	0x01EEB93C SDIV W11, W10, W9
	0x01EEB940 MSUB W10, W11, W9, W10
	0x01EEB944 CMP W10, W9
	0x01EEB948 B.CS 0x1EEB970
	0x01EEB94C SXTW X10, W10
	0x01EEB950 B 0x1EEB8F0
	0x01EEB954 LDR W10, [X0 + 0x20]
	0x01EEB958 ADD W10, W10, 0x1
	0x01EEB95C SDIV W11, W10, W9
	0x01EEB960 MSUB W10, W11, W9, W10
	0x01EEB964 SXTW X10, W10
	0x01EEB968 B 0x1EEB8E8
	0x01EEB96C BL 0x1C16F20
	0x01EEB970 BL 0x1C16F28
	0x01EEB974 SUB X31, X31, 0x40
	0x01EEB978 STR D8, [X31 + 0x10]
	0x01EEB97C STP X30, X21, [X31 + 0x20]
	0x01EEB980 STP X20, X19, [X31 + 0x30]
	0x01EEB984 MOV X19, X2
	0x01EEB988 MOV X21, X0
	0x01EEB98C MOV X20, X1
	0x01EEB990 MOVZ W2, 0x1D8
	0x01EEB994 MOV X0, X19
	0x01EEB998 MOV X1, X21
	0x01EEB99C MOV V8.16B, V0.16B
	0x01EEB9A0 BL 0x3EB1B30
	0x01EEB9A4 LDR V0, [X21 + 0x48]
	0x01EEB9A8 LDR V1, [X21 + 0x50]
	0x01EEB9AC LDR V2, [X20 + 0x48]
	0x01EEB9B0 LDR V3, [X20 + 0x50]
	0x01EEB9B4 FMOV S4, 1
	0x01EEB9B8 FCMP S8, 0x0
	0x01EEB9BC FMOV S5, W31
	0x01EEB9C0 FMIN S4, S8, S4
	0x01EEB9C4 FCSEL S4, S4, S5, PL
	0x01EEB9C8 FSUB V2.2S, V2.2S, V0.2S
	0x01EEB9CC FSUB S3, S3, S1
	0x00000000 INVALID
	0x01EEB9D4 FMUL S3, S4, S3
	0x01EEB9D8 FADD V0.2S, V0.2S, V2.2S
	0x01EEB9DC FADD S1, S1, S3
	0x01EEB9E0 STR D0, [X19 + 0x48]

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+240], X29
	003 Move [X31+248], X30
	004 Move [X31+256], X24
	005 Move [X31+264], X23
	006 Move [X31+272], X22
	007 Move [X31+280], X21
	008 Move [X31+288], X20
	009 Move [X31+296], X19
	010 Move X20, 0x24EF000
	011 Move W8, [X20+1453]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x2216000
	018 Move X0, [X0+848]
	019 Call 0x1C17CF4
	020 Move X0, 0x2216000
	021 Move X0, [X0+1312]
	022 Call 0x1C17CF4
	023 Move X0, 0x2216000
	024 Move X0, [X0+1320]
	025 Call 0x1C17CF4
	026 Move X0, 0x2216000
	027 Move X0, [X0+1328]
	028 Call 0x1C17CF4
	029 Move X0, 0x2216000
	030 Move X0, [X0+1336]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1453], W8
	034 Move W8, [X19+16]
	035 Move X23, 0x2216000
	036 Move X22, [X19+32]
	037 Move X23, [X23+848]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Compare W8, 0
	040 JumpIfNotEqual {245}
	041 Move TEMP, 0
	042 Not TEMP
	043 Move W8, TEMP
	044 Move [X19+16], W8
	045 Compare X22, 0
	046 JumpIfEqual {256}
	047 Move X0, [X22+32]
	048 Compare X0, 0
	049 JumpIfEqual {256}
	050 Move X8, 0x2216000
	051 Move X8, [X8+1312]
	052 Move X1, [X8]
	053 Call 0x2601054, X0
	054 Move X8, [X22+24]
	055 Compare X8, 0
	056 JumpIfEqual {256}
	057 Move X0, [X8+16]
	058 Compare X0, 0
	059 JumpIfEqual {256}
	060 Move X20, [X22+32]
	061 Call HitboxBuffer.get_BVH, X0
	062 Compare X0, 0
	063 JumpIfEqual {256}
	064 Move X1, X31
	065 Call BVH.get_rootBVH, X0
	066 Move X1, X0
	067 Add X0, X31, 0
	068 Move W2, 120
	069 Call 0x3EB2AC0
	070 Compare X20, 0
	071 JumpIfEqual {256}
	072 Move X8, 0x2216000
	073 Move X8, [X8+1328]
	074 Add X0, X31, 120
	075 Add X1, X31, 0
	076 Move W2, 120
	077 Move X21, [X8]
	078 Call 0x3EB2AC0
	079 Add X1, X31, 120
	080 Move X0, X20
	081 Move X2, X21
	082 Call 0x2601578, X0, X1
	083 Move TEMP, 0
	084 Not TEMP
	085 Move W8, TEMP
	086 Move [X19+16], W8
	087 Move X0, [X23]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move W8, [X19+120]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Compare X22, 0
	095 JumpIfEqual {256}
	096 Move X8, [X22+24]
	097 Compare X8, 0
	098 JumpIfEqual {256}
	099 Move X0, [X8+16]
	100 Compare X0, 0
	101 JumpIfEqual {256}
	102 Move X20, [X22+32]
	103 Call HitboxBuffer.get_BVH, X0
	104 Move X8, [X23]
	105 Move X21, X0
	106 Move W9, [X8+224]
	107 Compare W9, 0
	108 JumpIfNotEqual {111}
	109 Move X0, X8
	110 Call 0x1C17DFC
	111 Compare X21, 0
	112 JumpIfEqual {256}
	113 Move X8, [X21+16]
	114 Compare X8, 0
	115 JumpIfEqual {256}
	116 NotImplemented "Instruction LDRSW not yet implemented."
	117 Move W10, [X8+24]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W10, 120
	120 NotImplemented "Instruction MADD not yet implemented."
	121 Add X1, X8, 32
	122 Add X0, X31, 0
	123 Move W2, 120
	124 Call 0x3EB2AC0
	125 Compare X20, 0
	126 JumpIfEqual {256}
	127 Move X8, 0x2216000
	128 Move X8, [X8+1328]
	129 Add X0, X31, 120
	130 Add X1, X31, 0
	131 Move W2, 120
	132 Move X21, [X8]
	133 Call 0x3EB2AC0
	134 Add X1, X31, 120
	135 Move X0, X20
	136 Move X2, X21
	137 Call 0x2601578, X0, X1
	138 Move X0, [X23]
	139 Move W8, [X0+224]
	140 Compare W8, 0
	141 JumpIfNotEqual {143}
	142 Call 0x1C17DFC
	143 Move W8, [X19+124]
	144 Add X24, X19, 40
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Compare X22, 0
	147 JumpIfEqual {256}
	148 Move X8, [X22+24]
	149 Compare X8, 0
	150 JumpIfEqual {256}
	151 Move X0, [X8+16]
	152 Compare X0, 0
	153 JumpIfEqual {256}
	154 Move X20, [X22+32]
	155 Call HitboxBuffer.get_BVH, X0
	156 Move X8, [X23]
	157 Move X21, X0
	158 Move W9, [X8+224]
	159 Compare W9, 0
	160 JumpIfNotEqual {163}
	161 Move X0, X8
	162 Call 0x1C17DFC
	163 Compare X21, 0
	164 JumpIfEqual {256}
	165 Move X8, [X21+16]
	166 Compare X8, 0
	167 JumpIfEqual {256}
	168 NotImplemented "Instruction LDRSW not yet implemented."
	169 Move W10, [X8+24]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move W10, 120
	172 NotImplemented "Instruction MADD not yet implemented."
	173 Add X1, X8, 32
	174 Add X0, X31, 0
	175 Move W2, 120
	176 Call 0x3EB2AC0
	177 Compare X20, 0
	178 JumpIfEqual {256}
	179 Move X8, 0x2216000
	180 Move X8, [X8+1328]
	181 Add X0, X31, 120
	182 Add X1, X31, 0
	183 Move W2, 120
	184 Move X21, [X8]
	185 Call 0x3EB2AC0
	186 Add X1, X31, 120
	187 Move X0, X20
	188 Move X2, X21
	189 Call 0x2601578, X0, X1
	190 NotImplemented "Instruction MOVI not yet implemented."
	191 Move [X24+112], X31
	192 Move [X24+80], V0
	193 Move [X24+88], V0
	194 Move [X24+48], V0
	195 Move [X24+56], V0
	196 Move [X24+16], V0
	197 Move [X24+24], V0
	198 Move [X24], V0
	199 NotImplemented "Instruction MOVI not yet implemented."
	200 Move [X24+112], X31
	201 Move [X24+80], V0
	202 Move [X24+88], V0
	203 Move [X24+48], V0
	204 Move [X24+56], V0
	205 Move [X24+16], V0
	206 Move [X24+24], V0
	207 Move [X24], V0
	208 Compare X22, 0
	209 JumpIfEqual {256}
	210 Move X21, 0x2216000
	211 Move X21, [X21+1320]
	212 Add X20, X19, 40
	213 Move X0, [X22+32]
	214 Compare X0, 0
	215 JumpIfEqual {256}
	216 Move W8, [X0+24]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move X1, [X21]
	219 Add X8, X31, 0
	220 Call 0x26014C4, X0
	221 Add X0, X31, 120
	222 Add X1, X31, 0
	223 Move W2, 120
	224 Call 0x3EB2AC0
	225 Add X1, X31, 120
	226 Move W2, 120
	227 Move X0, X20
	228 Call 0x3EB2AC0
	229 Move X0, [X23]
	230 Move W8, [X0+224]
	231 Compare W8, 0
	232 JumpIfNotEqual {234}
	233 Call 0x1C17DFC
	234 Move W8, [X19+112]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move X0, [X22+24]
	237 Compare X0, 0
	238 JumpIfEqual {256}
	239 Move X1, X20
	240 Move X2, X31
	241 Call BVHNodeDrawInfo.FromBVHNode, X0, X1
	242 Move [X19+24], X0
	243 Move W0, 1
	244 Move [X19+16], W0
	245 Move W0, W31
	246 Move X20, [X31+288]
	247 Move X19, [X31+296]
	248 Move X22, [X31+272]
	249 Move X21, [X31+280]
	250 Move X24, [X31+256]
	251 Move X23, [X31+264]
	252 Move X29, [X31+240]
	253 Move X30, [X31+248]
	254 Add X31, X31, 304
	255 Return X0
	256 Call 0x1C17F20
	257 Call 0x1C17F28

Method: Fusion.LagCompensation.BVHNodeDrawInfo System.Collections.Generic.IEnumerator<Fusion.LagCompensation.BVHNodeDrawInfo>.get_Current()

Disassembly:
	0x01EEBA8C LDR V4, [X20 + 0x1C4]
	0x01EEBA90 LDR V5, [X20 + 0x1C8]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01EEBA94 LDR V6, [X20 + 0x1CC]
	0x01EEBA98 LDR V7, [X20 + 0x1D0]
	0x01EEBA9C STR S8, [X31]
	0x01EEBAA0 BL 0x3C2A4A0
	0x01EEBAA4 STR S0, [X19 + 0x1C4]
	0x01EEBAA8 FMOV S0, 0.5
	0x01EEBAAC FCMP S8, S0
	0x01EEBAB0 STR S1, [X19 + 0x1C8]
	0x01EEBAB4 STR S2, [X19 + 0x1CC]
	0x01EEBAB8 STR S3, [X19 + 0x1D0]
	0x01EEBABC CSEL X8, X20, X21, GT
	0x01EEBAC0 LDR W8, [X8 + 0x78]
	0x01EEBAC4 STRB W31, [X19 + 0x1B4]
	0x01EEBAC8 LDP X30, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2209000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2216000
	011 Move X0, [X0+1344]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01EEBACC LDR V8, [X31 + 0x10]
	0x01EEBAD0 STR W8, [X19 + 0x78]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

