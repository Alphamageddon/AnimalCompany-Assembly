Type: Fusion.BitSet64

Method: Fusion.BitSet64/Iterator GetIterator()

Disassembly:
	0x01E87EE4 ADD W16, W15, 0x40
	0x01E87EE8 CMP W8, 0x0
	0x01E87EEC CSINC W15, W16, W15, LT

ISIL:
	001 Move X1, [X0]
	002 Move TEMP, 0
	003 Not TEMP
	004 Move W0, TEMP
	005 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x01E87F00 B 0x1E87F38
	0x01E87F04 ADD W8, W8, 0x40

ISIL:
	001 Move W0, 64
	002 Return X0

Method: Fusion.BitSet64 FromValue(System.UInt64 value)

Disassembly:
	0x01E87F08 B 0x1E87F18
	0x01E87F0C ADD W8, W8, 0x20
	0x01E87F10 B 0x1E87F18
	0x01E87F14 ADD W8, W8, 0x10
	0x01E87F18 CMP W8, 0x80
	0x01E87F1C STR W8, [X0 + 0x8]
	0x01E87F20 B.LT 0x1E87E80
	0x01E87F24 CMP X12, 0x0
	0x01E87F28 CSET W0, NE
	0x01E87F2C B 0x1E87F40
	0x01E87F30 MOV W0, W31
	0x01E87F34 B 0x1E87F40
	0x01E87F38 STR W8, [X0 + 0x8]
	0x01E87F3C MOVZ W0, 0x1
	0x01E87F40 ADD X31, X31, 0x10
	0x01E87F44 RET
	0x01E87F48 SUB X31, X31, 0x30
	0x01E87F4C STP X30, X21, [X31 + 0x10]
	0x01E87F50 STP X20, X19, [X31 + 0x20]
	0x01E87F54 ADRP X21, 0x2552000
	0x01E87F58 ADRP X20, 0x226C000
	0x01E87F5C LDRB W8, [X21 + 0x21C]
	0x01E87F60 LDR X20, [X20 + 0x758]

ISIL:
	001 Or X8, X31, -1
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return X0
	004 Move [X31-16], X30
	005 Move [X31-8], X19
	006 Move X0, 0x2275000
	007 Move X0, [X0+1888]
	008 Call 0x1C17D08
	009 Call 0x1C17F10
	010 Move X19, X0
	011 Move X0, 0x2277000
	012 Move X0, [X0+3784]
	013 Call 0x1C17D08
	014 Move X1, X0
	015 Move X0, X19
	016 Move X2, X31
	017 Call ArgumentOutOfRangeException..ctor, X0, X1
	018 Move X0, 0x2277000
	019 Move X0, [X0+3792]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Call 0x1C17DEC

Method: Fusion.BitSet64 FromArray(System.UInt64[] values)

Disassembly:
	0x01E87F64 MOV X19, X0
	0x01E87F68 TBNZ X8, 0x0, 0x1E87F80
	0x01E87F6C ADRP X0, 0x226C000
	0x01E87F70 LDR X0, [X0 + 0x758]
	0x01E87F74 BL 0x1C16CF4
	0x01E87F78 MOVZ W8, 0x1
	0x01E87F7C STRB W8, [X21 + 0x21C]
	0x01E87F80 LDR W8, [X19 + 0x8]
	0x01E87F84 LDR X0, [X20]
	0x01E87F88 ADD X1, X31, 0xC
	0x01E87F8C STR W8, [X31 + 0xC]
	0x01E87F90 BL 0x1C16E04
	0x01E87F94 LDP X20, X19, [X31 + 0x20]
	0x01E87F98 LDP X30, X21, [X31 + 0x10]
	0x01E87F9C ADD X31, X31, 0x30
	0x01E87FA0 RET
	0x01E87FA4 MOVN W8, 0x0
	0x01E87FA8 STR X31, [X0]
	0x01E87FAC STR W8, [X0 + 0x8]
	0x01E87FB0 RET
	0x01E87FB4 STR X31, [X8]
	0x01E87FB8 LDR X9, [X0 + 0x10]
	0x01E87FBC LDR V0, [X0]
	0x01E87FC0 MOVN W10, 0x0
	0x01E87FC4 STR W10, [X8]
	0x01E87FC8 STR X9, [X8 + 0x18]
	0x01E87FCC STUR V0, [X8 + 0x8]
	0x01E87FD0 RET
	0x01E87FD4 LDR X8, [X1 + 0x10]
	0x01E87FD8 LDR V0, [X1]
	0x01E87FDC MOVN W9, 0x0
	0x01E87FE0 STR W9, [X0]
	0x01E87FE4 STR X8, [X0 + 0x18]
	0x01E87FE8 STUR V0, [X0 + 0x8]
	0x01E87FEC RET
	0x01E87FF0 MOVZ W0, 0xC0
	0x01E87FF4 RET
	0x01E87FF8 SUB X31, X31, 0x40
	0x01E87FFC STR X30, [X31 + 0x20]
	0x01E88000 STP X20, X19, [X31 + 0x30]
	0x01E88004 MRS X9, 0xC000
	0x01E88008 LDR X10, [X9 + 0x28]
	0x01E8800C STR X10, [X31 + 0x18]
	0x01E88010 CBZ X0, 0x1E88094
	0x01E88014 LDR X10, [X0 + 0x18]
	0x01E88018 CMP W10, 0x3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {13}
	006 Move W8, [X0+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X0, [X0+32]
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return X0
	013 Move X0, 0x2272000
	014 Move X0, [X0+1320]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x2277000
	019 Move X0, [X0+3800]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call ArgumentNullException..ctor, X0, X1
	025 Move X0, 0x2275000
	026 Move X0, [X0+1400]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0x2277000
	031 Move X0, [X0+3808]
	032 Call 0x1C17D08
	033 Move X20, X0
	034 Move X0, 0x2277000
	035 Move X0, [X0+3800]
	036 Call 0x1C17D08
	037 Move X2, X0
	038 Move X0, X19
	039 Move X1, X20
	040 Move X3, X31
	041 Call ArgumentException..ctor, X0, X1, X2
	042 Move X0, 0x2276000
	043 Move X0, [X0+3816]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Call 0x1C17DEC

Method: System.Void Set(System.Int32 bit)

Disassembly:
	0x01E8801C B.NE 0x1E880C8
	0x01E88020 AND X10, X10, 0x0
	0x01E88024 STP X31, X31, [X31]
	0x01E88028 STR X31, [X31 + 0x10]
	0x01E8802C CBZ X10, 0x1E88060
	0x01E88030 MOV X10, X31
	0x01E88034 ADD X11, X31, 0x0
	0x01E88038 ADD X12, X0, 0x20
	0x01E8803C LDR X13, [X12, X10, LSL #3]
	0x01E88040 CMP X10, 0x2

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 Or X9, X9, X10
	009 Move [X0], X9
	010 Return 

Method: System.Void Clear(System.Int32 bit)

Disassembly:
	0x01E88044 STR X13, [X11]
	0x01E88048 B.EQ 0x1E88064
	0x01E8804C LDR W13, [X0 + 0x18]
	0x01E88050 ADD X10, X10, 0x1
	0x01E88054 ADD X11, X11, 0x8
	0x01E88058 CMP X10, X13
	0x01E8805C B.CC 0x1E8803C
	0x01E88060 BL 0x1C16F28
	0x01E88064 LDR X10, [X31 + 0x10]
	0x01E88068 LDR V0, [X31]

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 NotImplemented "Instruction BIC not yet implemented."
	009 Move [X0], X9
	010 Return 

Method: System.Boolean get_Item(System.Int32 index)

Disassembly:
	0x01E8806C STR X10, [X8 + 0x10]
	0x01E88070 STR V0, [X8]
	0x01E88074 LDR X8, [X9 + 0x28]
	0x01E88078 LDR X9, [X31 + 0x18]
	0x01E8807C CMP X8, X9
	0x01E88080 B.NE 0x1E88124
	0x01E88084 LDP X20, X19, [X31 + 0x30]
	0x01E88088 LDR X30, [X31 + 0x20]

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X8, [X0]
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0

Method: System.Void set_Item(System.Int32 index, System.Boolean value)

Disassembly:
	0x01E8808C ADD X31, X31, 0x40
	0x01E88090 RET
	0x01E88094 ADRP X0, 0x2270000
	0x01E88098 LDR X0, [X0 + 0x528]
	0x01E8809C BL 0x1C16D08
	0x01E880A0 BL 0x1C16F10
	0x01E880A4 MOV X19, X0
	0x01E880A8 ADRP X0, 0x2275000
	0x01E880AC LDR X0, [X0 + 0xED8]
	0x01E880B0 BL 0x1C16D08
	0x01E880B4 MOV X1, X0
	0x01E880B8 MOV X0, X19
	0x01E880BC MOV X2, X31

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X9, [X0]
	006 Move W10, 1
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 And W31, W2, 1
	009 NotImplemented "Instruction BIC not yet implemented."
	010 Or X9, X9, X10
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Move [X0], X9
	013 Return 

Method: System.Void And(Fusion.BitSet64 other)

Disassembly:
	0x01E880C0 BL 0x330E100
	0x01E880C4 B 0x1E8810C
	0x01E880C8 ADRP X0, 0x2273000
	0x01E880CC LDR X0, [X0 + 0x578]

ISIL:
	001 Move X8, [X0]
	002 And X8, X8, X1
	003 Move [X0], X8
	004 Return 

Method: System.Void Or(Fusion.BitSet64 other)

Disassembly:
	0x01E880D0 BL 0x1C16D08
	0x01E880D4 BL 0x1C16F10
	0x01E880D8 MOV X19, X0
	0x01E880DC ADRP X0, 0x2275000

ISIL:
	001 Move X8, [X0]
	002 Or X8, X8, X1
	003 Move [X0], X8
	004 Return 

Method: System.Void Xor(Fusion.BitSet64 other)

Disassembly:
	0x01E880E0 LDR X0, [X0 + 0xF28]
	0x01E880E4 BL 0x1C16D08
	0x01E880E8 MOV X20, X0
	0x01E880EC ADRP X0, 0x2275000

ISIL:
	001 Move X8, [X0]
	002 Xor X8, X8, X1
	003 Move [X0], X8
	004 Return 

Method: System.Void AndNot(Fusion.BitSet64 other)

Disassembly:
	0x01E880F0 LDR X0, [X0 + 0xED8]
	0x01E880F4 BL 0x1C16D08
	0x01E880F8 MOV X2, X0
	0x01E880FC MOV X0, X19

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction BIC not yet implemented."
	003 Move [X0], X8
	004 Return 

Method: System.Void Not()

Disassembly:
	0x01E88100 MOV X1, X20
	0x01E88104 MOV X3, X31
	0x01E88108 BL 0x330E16C
	0x01E8810C ADRP X0, 0x2275000

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction ORN not yet implemented."
	003 Move [X0], X8
	004 Return 

Method: System.Void ClearAll()

Disassembly:
	0x01E88110 LDR X0, [X0 + 0xF30]
	0x01E88114 BL 0x1C16D08

ISIL:
	001 Move [X0], X31
	002 Return 

Method: System.Boolean IsSet(System.Int32 bit)

Disassembly:
	0x01E88118 MOV X1, X0
	0x01E8811C MOV X0, X19
	0x01E88120 BL 0x1C16DEC
	0x01E88124 BL 0x3EB1B20
	0x01E88128 ADD W8, W1, 0x3F
	0x01E8812C CMP W1, 0x0
	0x01E88130 CSEL W8, W8, W1, LT
	0x01E88134 SBFM W8, W8, 0x6, 0x1F

ISIL:
	001 Add W8, W1, 63
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SBFM not yet implemented."
	005 Move X8, [X0]
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0

Method: System.Int32 GetSetCount()

Disassembly:
	0x01E88138 LDR X9, [X0, W8, SXTW]
	0x01E8813C MOVZ W10, 0x1
	0x01E88140 LSLV X10, X10, X1
	0x01E88144 ORR X9, X9, X10, 0x0
	0x01E88148 STR X9, [X0, W8, SXTW]
	0x01E8814C RET
	0x01E88150 ADD W8, W1, 0x3F
	0x01E88154 CMP W1, 0x0
	0x01E88158 CSEL W8, W8, W1, LT
	0x01E8815C SBFM W8, W8, 0x6, 0x1F
	0x01E88160 LDR X9, [X0, W8, SXTW]
	0x01E88164 MOVZ W10, 0x1
	0x01E88168 LSLV X10, X10, X1
	0x01E8816C BIC X9, X9, X10, 0x0
	0x01E88170 STR X9, [X0, W8, SXTW]
	0x01E88174 RET
	0x01E88178 ADD W8, W1, 0x3F
	0x01E8817C CMP W1, 0x0
	0x01E88180 CSEL W8, W8, W1, LT
	0x01E88184 SBFM W8, W8, 0x6, 0x1F
	0x01E88188 LDR X8, [X0, W8, SXTW]
	0x01E8818C LSRV X8, X8, X1
	0x01E88190 AND W0, W8, 0x1
	0x01E88194 RET
	0x01E88198 ADD W8, W1, 0x3F
	0x01E8819C CMP W1, 0x0
	0x01E881A0 CSEL W8, W8, W1, LT
	0x01E881A4 SBFM W8, W8, 0x6, 0x1F
	0x01E881A8 LDR X9, [X0, W8, SXTW]
	0x01E881AC MOVZ W10, 0x1
	0x01E881B0 LSLV X10, X10, X1
	0x01E881B4 ANDS W31, W2, 0x1
	0x01E881B8 BIC X11, X9, X10, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2552000
	006 Move X20, 0x2273000
	007 Move W8, [X21+529]
	008 Move X20, [X20+3176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2273000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+529], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X8, X19
	026 ShiftRight X8, 1
	027 And X8, X8, 0x7FFFFFFF
	028 And X8, X8, 0x5555555555555555
	029 Subtract X8, X19, X8
	030 And X9, X8, 0x3333333333333333
	031 Move X8, X8
	032 ShiftRight X8, 2
	033 And X8, X8, 0x7FFFFFFF
	034 And X8, X8, 0x3333333333333333
	035 Add X8, X8, X9
	036 Add X8, X8, X8
	037 And X8, X8, 0xF0F0F0F0F0F0F0F
	038 Or X9, X31, 0x101010101010101
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Multiply X8, X8, X9
	042 Move X0, X8
	043 ShiftRight X0, 56
	044 And X0, X0, 0x7FFFFFFF
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Boolean Any()

Disassembly:
	0x01E881BC ORR X9, X9, X10, 0x0
	0x01E881C0 CSEL X9, X9, X11, NE
	0x01E881C4 STR X9, [X0, W8, SXTW]
	0x01E881C8 RET

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean Empty()

Disassembly:
	0x01E881CC LDR X8, [X1]
	0x01E881D0 LDP X9, X10, [X0]
	0x01E881D4 AND X8, X8, X9, 0x0
	0x01E881D8 STR X8, [X0]

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x01E881DC LDR X8, [X1 + 0x8]
	0x01E881E0 AND X8, X8, X10, 0x0
	0x01E881E4 STR X8, [X0 + 0x8]
	0x01E881E8 LDR X8, [X0 + 0x10]
	0x01E881EC LDR X9, [X1 + 0x10]
	0x01E881F0 AND X8, X9, X8, 0x0
	0x01E881F4 STR X8, [X0 + 0x10]
	0x01E881F8 RET
	0x01E881FC LDR X8, [X1]
	0x01E88200 LDP X9, X10, [X0]
	0x01E88204 ORR X8, X8, X9, 0x0
	0x01E88208 STR X8, [X0]
	0x01E8820C LDR X8, [X1 + 0x8]
	0x01E88210 ORR X8, X8, X10, 0x0
	0x01E88214 STR X8, [X0 + 0x8]
	0x01E88218 LDR X8, [X0 + 0x10]
	0x01E8821C LDR X9, [X1 + 0x10]
	0x01E88220 ORR X8, X9, X8, 0x0
	0x01E88224 STR X8, [X0 + 0x10]
	0x01E88228 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2552000
	006 Move X21, 0x2276000
	007 Move W8, [X20+530]
	008 Move X21, [X21+3824]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2276000
	015 Move X0, [X0+3824]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+530], W8
	019 Move X3, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 1
	024 Move W2, 43
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call HashCodeUtilities.GetArrayHashCode, X0, X1, X2
	028 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x01E8822C LDR X8, [X1]
	0x01E88230 LDP X9, X10, [X0]
	0x01E88234 EOR X8, X8, X9, 0x0
	0x01E88238 STR X8, [X0]
	0x01E8823C LDR X8, [X1 + 0x8]
	0x01E88240 EOR X8, X8, X10, 0x0
	0x01E88244 STR X8, [X0 + 0x8]
	0x01E88248 LDR X8, [X0 + 0x10]
	0x01E8824C LDR X9, [X1 + 0x10]
	0x01E88250 EOR X8, X9, X8, 0x0
	0x01E88254 STR X8, [X0 + 0x10]
	0x01E88258 RET
	0x01E8825C LDR X8, [X1]
	0x01E88260 LDP X9, X10, [X0]
	0x01E88264 BIC X8, X9, X8, 0x0
	0x01E88268 STR X8, [X0]
	0x01E8826C LDR X8, [X1 + 0x8]
	0x01E88270 BIC X8, X10, X8, 0x0
	0x01E88274 STR X8, [X0 + 0x8]
	0x01E88278 LDR X8, [X0 + 0x10]
	0x01E8827C LDR X9, [X1 + 0x10]
	0x01E88280 BIC X8, X8, X9, 0x0
	0x01E88284 STR X8, [X0 + 0x10]
	0x01E88288 RET
	0x01E8828C LDP X8, X9, [X0]
	0x01E88290 LDR X10, [X0 + 0x10]
	0x01E88294 ORN X8, X31, X8, 0x0
	0x01E88298 ORN X9, X31, X9, 0x0
	0x01E8829C ORN X10, X31, X10, 0x0
	0x01E882A0 STP X8, X9, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2552000
	006 Move W8, [X21+531]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2276000
	014 Move X0, [X0+3832]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+531], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x2276000
	021 Move X8, [X8+3832]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X0, X20
	027 Call 0x1C17E08
	028 Move X8, [X0]
	029 Move X9, [X19]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Boolean Equals(Fusion.BitSet64 other)

Disassembly:
	0x01E882A4 STR X10, [X0 + 0x10]
	0x01E882A8 RET
	0x01E882AC STP X31, X31, [X0]
	0x01E882B0 STR X31, [X0 + 0x10]

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: Fusion.BitSet64/Enumerator GetEnumerator()

Disassembly:
	0x01E882B4 RET
	0x01E882B8 ADD W8, W1, 0x3F

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W1, TEMP
	004 Return X0

Method: System.Collections.Generic.IEnumerator`1<System.Int32> System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator()

Disassembly:
	0x01E882CC LSRV X8, X8, X1
	0x01E882D0 AND W0, W8, 0x1
	0x01E882D4 RET
	0x01E882D8 STP X30, X21, [X31 - 0x20]!
	0x01E882DC STP X20, X19, [X31 + 0x10]
	0x01E882E0 ADRP X21, 0x2551000
	0x01E882E4 ADRP X20, 0x2272000
	0x01E882E8 LDRB W8, [X21 + 0x21D]
	0x01E882EC LDR X20, [X20 + 0xC68]
	0x01E882F0 MOV X19, X0
	0x01E882F4 TBNZ X8, 0x0, 0x1E8830C
	0x01E882F8 ADRP X0, 0x2272000
	0x01E882FC LDR X0, [X0 + 0xC68]
	0x01E88300 BL 0x1C16CF4
	0x01E88304 MOVZ W8, 0x1
	0x01E88308 STRB W8, [X21 + 0x21D]
	0x01E8830C LDR X0, [X20]
	0x01E88310 LDR X20, [X19]
	0x01E88314 LDR W8, [X0 + 0xE0]
	0x01E88318 CBNZ W8, 0x1E88320
	0x01E8831C BL 0x1C16DFC
	0x01E88320 UBFM X8, X20, 0x1, 0x3F
	0x01E88324 LDP X10, X11, [X19 + 0x8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2552000
	007 Move X20, 0x2276000
	008 Move W8, [X21+532]
	009 Move X20, [X20+3840]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2276000
	016 Move X0, [X0+3840]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+532], W8
	020 Move X0, [X20]
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Add X1, X31, 0
	025 Move [X31], X19
	026 Move [X31+8], X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x01E88328 AND X8, X8, 0x5555555555555555
	0x01E8832C SUB X8, X20, X8
	0x01E88330 AND X12, X8, 0x3333333333333333
	0x01E88334 UBFM X8, X8, 0x2, 0x3F
	0x01E88338 AND X8, X8, 0x3333333333333333
	0x01E8833C ADD X8, X8, X12
	0x01E88340 UBFM X12, X10, 0x1, 0x3F
	0x01E88344 AND X12, X12, 0x5555555555555555
	0x01E88348 SUB X10, X10, X12
	0x01E8834C UBFM X12, X11, 0x1, 0x3F
	0x01E88350 AND X12, X12, 0x5555555555555555
	0x01E88354 SUB X11, X11, X12
	0x01E88358 AND X12, X10, 0x3333333333333333
	0x01E8835C UBFM X10, X10, 0x2, 0x3F
	0x01E88360 AND X10, X10, 0x3333333333333333
	0x01E88364 ADD X10, X10, X12
	0x01E88368 AND X12, X11, 0x3333333333333333
	0x01E8836C UBFM X11, X11, 0x2, 0x3F
	0x01E88370 AND X11, X11, 0x3333333333333333
	0x01E88374 ADD X8, X8, X8, 0x4, LSR
	0x01E88378 ADD X11, X11, X12
	0x01E8837C ADD X10, X10, X10, 0x4, LSR
	0x01E88380 ORR X9, X31, 0x101010101010101

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2552000
	007 Move X20, 0x2276000
	008 Move W8, [X21+533]
	009 Move X20, [X20+3840]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2276000
	016 Move X0, [X0+3840]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+533], W8
	020 Move X0, [X20]
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Add X1, X31, 0
	025 Move [X31], X19
	026 Move [X31+8], X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Boolean op_Equality(Fusion.BitSet64 a, Fusion.BitSet64 b)

Disassembly:
	0x01E88384 AND X8, X8, 0xF0F0F0F0F0F0F0F
	0x01E88388 ADD X11, X11, X11, 0x4, LSR
	0x01E8838C AND X10, X10, 0xF0F0F0F0F0F0F0F

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean op_Inequality(Fusion.BitSet64 a, Fusion.BitSet64 b)

Disassembly:
	0x01E88390 MUL X8, X8, X9
	0x01E88394 AND X11, X11, 0xF0F0F0F0F0F0F0F
	0x01E88398 MUL X10, X10, X9

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

