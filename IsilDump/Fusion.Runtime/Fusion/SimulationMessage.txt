Type: Fusion.SimulationMessage

Method: System.Void ReferenceCountAdd()

Disassembly:
	0x01EDA164 BL 0x1C16CF4
	0x01EDA168 ADRP X0, 0x2219000
	0x01EDA16C LDR X0, [X0 + 0x830]
	0x01EDA170 BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+16]
	002 Add W8, W8, 1
	003 Move [X0+16], W8
	004 Return 

Method: System.Boolean ReferenceCountSub()

Disassembly:
	0x01EDA174 ADRP X0, 0x2226000
	0x01EDA178 LDR X0, [X0 + 0x188]
	0x01EDA17C BL 0x1C16CF4
	0x01EDA180 ADRP X0, 0x2225000
	0x01EDA184 LDR X0, [X0 + 0x650]
	0x01EDA188 BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+16]
	002 Subtract W9, W8, 1
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Move [X0+16], W9
	005 Move W0, W8
	006 Return X0

Method: System.Void SetTarget(Fusion.PlayerRef target)

Disassembly:
	0x01EDA18C ADRP X0, 0x2226000
	0x01EDA190 LDR X0, [X0 + 0x190]
	0x01EDA194 BL 0x1C16CF4
	0x01EDA198 MOVZ W8, 0x1
	0x01EDA19C STRB W8, [X19 + 0x548]
	0x01EDA1A0 LDR X0, [X21]
	0x01EDA1A4 MOVZ W1, 0x4
	0x01EDA1A8 BL 0x1C16D6C
	0x01EDA1AC CBZ X0, 0x1EDA2EC
	0x01EDA1B0 ADRP X21, 0x2226000
	0x01EDA1B4 LDR X21, [X21 + 0x190]
	0x01EDA1B8 MOV X19, X0
	0x01EDA1BC LDR X0, [X21]
	0x01EDA1C0 CBZ X0, 0x1EDA1D4
	0x01EDA1C4 LDR X8, [X19]
	0x01EDA1C8 LDR X1, [X8 + 0x40]
	0x01EDA1CC BL 0x1C16E00
	0x01EDA1D0 CBZ X0, 0x1EDA2E0
	0x01EDA1D4 LDR W8, [X19 + 0x18]
	0x01EDA1D8 CBZ W8, 0x1EDA2DC
	0x01EDA1DC LDR X8, [X21]
	0x01EDA1E0 ADRP X9, 0x221A000
	0x01EDA1E4 LDR X9, [X9 + 0x758]
	0x01EDA1E8 ADD X1, X31, 0x8
	0x01EDA1EC STR X8, [X19 + 0x20]
	0x01EDA1F0 LDR X8, [X20]
	0x01EDA1F4 LDR X0, [X9]
	0x01EDA1F8 STR X8, [X31 + 0x8]
	0x01EDA1FC BL 0x1C16E04
	0x01EDA200 MOV X21, X0
	0x01EDA204 CBZ X0, 0x1EDA21C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2500000
	007 Move X21, 0x221D000
	008 Move W8, [X22+1342]
	009 Move X21, [X21+3648]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x221D000
	017 Move X0, [X0+3648]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1342], W8
	021 Move [X19+24], W20
	022 Move X0, [X21]
	023 Move W21, [X19+20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W8, 16
	030 Move W9, 32
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Or W8, W21, W8
	033 Move [X19+20], W8
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return 

Method: System.Void SetStatic()

Disassembly:
	0x01EDA208 LDR X8, [X19]
	0x01EDA20C MOV X0, X21
	0x01EDA210 LDR X1, [X8 + 0x40]
	0x01EDA214 BL 0x1C16E00

ISIL:
	001 Move W8, [X0+20]
	002 Or W8, W8, 4
	003 Move [X0+20], W8
	004 Return 

Method: System.Void SetUnreliable()

Disassembly:
	0x01EDA218 CBZ X0, 0x1EDA2E0
	0x01EDA21C LDR W8, [X19 + 0x18]
	0x01EDA220 CMP W8, 0x1
	0x01EDA224 B.LS 0x1EDA2DC

ISIL:
	001 Move W8, [X0+20]
	002 Or W8, W8, 8
	003 Move [X0+20], W8
	004 Return 

Method: System.Void SetNotTickAligned()

Disassembly:
	0x01EDA228 ADRP X22, 0x2225000
	0x01EDA22C LDR X22, [X22 + 0x650]
	0x01EDA230 STR X21, [X19 + 0x28]
	0x01EDA234 LDR X0, [X22]

ISIL:
	001 Move W8, [X0+20]
	002 Or W8, W8, 128
	003 Move [X0+20], W8
	004 Return 

Method: System.Void SetDummy()

Disassembly:
	0x01EDA238 CBZ X0, 0x1EDA250
	0x01EDA23C LDR X8, [X19]
	0x01EDA240 LDR X1, [X8 + 0x40]
	0x01EDA244 BL 0x1C16E00
	0x01EDA248 CBZ X0, 0x1EDA2E0

ISIL:
	001 Move W8, [X0+20]
	002 Move [X0+12], W31
	003 Or W8, W8, 256
	004 Move [X0+20], W8
	005 Return 

Method: System.Boolean GetFlag(System.Int32 flag)

Disassembly:
	0x01EDA24C LDR W8, [X19 + 0x18]
	0x01EDA250 CMP W8, 0x2
	0x01EDA254 B.LS 0x1EDA2DC
	0x01EDA258 LDR X8, [X22]

ISIL:
	001 Move W8, [X0+20]
	002 NotImplemented "Instruction BICS not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean IsTargeted()

Disassembly:
	0x01EDA25C ADRP X9, 0x2226000
	0x01EDA260 LDR X9, [X9 + 0x188]
	0x01EDA264 STR X8, [X19 + 0x30]
	0x01EDA268 LDR X0, [X20 + 0x8]

ISIL:
	001 Move W8, [X0+20]
	002 And W31, W8, 48
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsUnreliable()

Disassembly:
	0x01EDA26C LDR X20, [X9]
	0x01EDA270 CBZ X0, 0x1EDA288
	0x01EDA274 MOV W1, W31

ISIL:
	001 Move W8, [X0+20]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: Fusion.SimulationMessage* Clone(Fusion.Simulation sim, Fusion.SimulationMessage* message)

Disassembly:
	0x01EDA278 BL 0x1ED94C0
	0x01EDA27C MOV X21, X0
	0x01EDA280 CBNZ X21, 0x1EDA298
	0x01EDA284 B 0x1EDA2AC
	0x01EDA288 ADRP X8, 0x2219000
	0x01EDA28C LDR X8, [X8 + 0x830]
	0x01EDA290 LDR X21, [X8]
	0x01EDA294 CBZ X21, 0x1EDA2AC
	0x01EDA298 LDR X8, [X19]
	0x01EDA29C MOV X0, X21
	0x01EDA2A0 LDR X1, [X8 + 0x40]
	0x01EDA2A4 BL 0x1C16E00
	0x01EDA2A8 CBZ X0, 0x1EDA2E0
	0x01EDA2AC LDR W8, [X19 + 0x18]
	0x01EDA2B0 CMP W8, 0x3
	0x01EDA2B4 B.LS 0x1EDA2DC
	0x01EDA2B8 MOV X0, X20
	0x01EDA2BC MOV X1, X19
	0x01EDA2C0 MOV X2, X31
	0x01EDA2C4 STR X21, [X19 + 0x38]
	0x01EDA2C8 BL 0x3227C5C
	0x01EDA2CC LDP X20, X19, [X31 + 0x20]
	0x01EDA2D0 LDP X22, X21, [X31 + 0x10]
	0x01EDA2D4 LDR X30, [X31], #0x30
	0x01EDA2D8 RET
	0x01EDA2DC BL 0x1C16F28
	0x01EDA2E0 BL 0x1C16F44
	0x01EDA2E4 MOV X1, X31
	0x01EDA2E8 BL 0x1C16DEC
	0x01EDA2EC BL 0x1C16F20
	0x01EDA2F0 SUB X31, X31, 0x60
	0x01EDA2F4 STR X30, [X31 + 0x30]
	0x01EDA2F8 STP X22, X21, [X31 + 0x40]
	0x01EDA2FC STP X20, X19, [X31 + 0x50]
	0x01EDA300 MRS X21, 0xC000
	0x01EDA304 LDR X8, [X21 + 0x28]
	0x01EDA308 ADRP X22, 0x24FF000
	0x01EDA30C MOV X19, X1
	0x01EDA310 MOV X20, X0
	0x01EDA314 STR X8, [X31 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2500000
	006 Move W8, [X21+1343]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2221000
	014 Move X0, [X0+3176]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1343], W8
	018 Compare X19, 0
	019 JumpIfEqual {50}
	020 Move X8, 0x2221000
	021 Move X8, [X8+3176]
	022 Move W21, [X19+8]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W0, W21
	029 Move X1, X31
	030 Call Maths.BytesRequiredForBits, X0
	031 Move W21, W0
	032 Move X0, X20
	033 Move W1, W21
	034 Call SimulationMessage.Allocate, X0, X1
	035 Add W2, W21, 28
	036 Move X1, X19
	037 Move X3, X31
	038 Move X20, X0
	039 Call Native.MemCpy, X0, X1, X2
	040 Compare X20, 0
	041 JumpIfEqual {50}
	042 Move [X20], W31
	043 Move [X20+16], W31
	044 Move X0, X20
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0
	050 Call 0x1C17F20

Method: System.Void WriteNetworkedObjectRef(Fusion.SimulationMessage* message, Fusion.NetworkId value)

Disassembly:
	0x01EDA348 MOV X2, X31
	0x01EDA34C BL 0x32333E0
	0x01EDA350 LDR X8, [X20 + 0x8]
	0x01EDA354 CBZ X8, 0x1EDA3A4
	0x01EDA358 ADRP X8, 0x221A000
	0x01EDA35C LDR X8, [X8 + 0xFE0]
	0x01EDA360 MOV X0, X19
	0x01EDA364 MOV X2, X31
	0x01EDA368 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+28], W1
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move W8, [X0+12]
	006 Add W8, W8, 32
	007 Move [X0+12], W8
	008 Move X30, [X31+16]
	009 Return 
	010 Call 0x1C17F20

Method: Fusion.NetworkId ReadNetworkedObjectRef(Fusion.SimulationMessage* message)

Disassembly:
	0x01EDA36C BL 0x32333E0
	0x01EDA370 LDR X8, [X20 + 0x8]
	0x01EDA374 ADD X0, X31, 0x0
	0x01EDA378 LDR W9, [X8 + 0x18]
	0x01EDA37C LDR X10, [X8 + 0x10]
	0x01EDA380 LDR V0, [X8]
	0x01EDA384 STR W9, [X31 + 0x18]
	0x01EDA388 STR X10, [X31 + 0x10]
	0x01EDA38C STR V0, [X31]
	0x01EDA390 BL 0x1ED99D4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 Move W9, [X0+12]
	005 Move W8, [X0+28]
	006 Add W9, W9, 32
	007 Move [X0+12], W9
	008 Move X0, X8
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void WriteVector3(Fusion.SimulationMessage* message, UnityEngine.Vector3 value)

Disassembly:
	0x01EDA394 MOV X1, X0
	0x01EDA398 MOV X0, X19
	0x01EDA39C MOV X2, X31
	0x01EDA3A0 BL 0x32333E0
	0x01EDA3A4 LDR X8, [X21 + 0x28]
	0x01EDA3A8 LDR X9, [X31 + 0x28]
	0x01EDA3AC CMP X8, X9
	0x01EDA3B0 B.NE 0x1EDA3CC
	0x01EDA3B4 LDP X20, X19, [X31 + 0x50]
	0x01EDA3B8 LDP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+28], S0
	003 Move [X0+36], S1
	004 Move [X0+36], S2
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 Move W8, [X0+12]
	008 Add W8, W8, 96
	009 Move [X0+12], W8
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: UnityEngine.Vector3 ReadVector3(Fusion.SimulationMessage* message)

Disassembly:
	0x01EDA3BC LDR X30, [X31 + 0x30]
	0x01EDA3C0 ADD X31, X31, 0x60
	0x01EDA3C4 RET
	0x01EDA3C8 BL 0x1C16F20
	0x01EDA3CC BL 0x3EB1B20
	0x01EDA3D0 MOV X8, X1
	0x01EDA3D4 LDR X1, [X1]
	0x01EDA3D8 CBZ X1, 0x1EDA3E4
	0x01EDA3DC STR X31, [X8]
	0x01EDA3E0 B 0x1EDA3E8

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {12}
	004 Move W8, [X0+12]
	005 Move S1, [X0+32]
	006 Move S2, [X0+36]
	007 Move V0, [X0+28]
	008 Add W8, W8, 96
	009 Move [X0+12], W8
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void WriteInt(Fusion.SimulationMessage* message, System.Int32 value)

Disassembly:
	0x01EDA3E4 RET
	0x01EDA3E8 STR X30, [X31 - 0x20]!
	0x01EDA3EC STP X20, X19, [X31 + 0x10]
	0x01EDA3F0 CBZ X1, 0x1EDA434
	0x01EDA3F4 MOV X19, X1
	0x01EDA3F8 LDR X1, [X1 + 0x20]
	0x01EDA3FC MOV X20, X0
	0x01EDA400 CBZ X1, 0x1EDA418
	0x01EDA404 CBZ X20, 0x1EDA434

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+28], W1
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move W8, [X0+12]
	006 Add W8, W8, 32
	007 Move [X0+12], W8
	008 Move X30, [X31+16]
	009 Return 
	010 Call 0x1C17F20

Method: System.Int32 ReadInt(Fusion.SimulationMessage* message)

Disassembly:
	0x01EDA408 MOV X0, X20
	0x01EDA40C MOV X2, X31
	0x01EDA410 BL 0x1EC2858
	0x01EDA414 B 0x1EDA41C
	0x01EDA418 CBZ X20, 0x1EDA434
	0x01EDA41C MOV X0, X20
	0x01EDA420 MOV X1, X19
	0x01EDA424 LDP X20, X19, [X31 + 0x10]
	0x01EDA428 MOV X2, X31
	0x01EDA42C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 Move W9, [X0+12]
	005 Move W8, [X0+28]
	006 Add W9, W9, 32
	007 Move [X0+12], W9
	008 Move W0, W8
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void Free(Fusion.Simulation sim, Fusion.SimulationMessage* message)

Disassembly:
	0x01EDA430 B 0x1EC2858
	0x01EDA434 BL 0x1C16F20
	0x01EDA438 STP X30, X21, [X31 - 0x20]!
	0x01EDA43C STP X20, X19, [X31 + 0x10]
	0x01EDA440 ADRP X20, 0x24FF000
	0x01EDA444 ADRP X21, 0x221C000
	0x01EDA448 LDRB W8, [X20 + 0x54C]
	0x01EDA44C LDR X21, [X21 + 0xE40]
	0x01EDA450 MOV X19, X0
	0x01EDA454 TBNZ X8, 0x0, 0x1EDA46C
	0x01EDA458 ADRP X0, 0x221C000
	0x01EDA45C LDR X0, [X0 + 0xE40]
	0x01EDA460 BL 0x1C16CF4
	0x01EDA464 MOVZ W8, 0x1
	0x01EDA468 STRB W8, [X20 + 0x54C]
	0x01EDA46C LDR X0, [X21]
	0x01EDA470 LDR W8, [X0 + 0xE0]
	0x01EDA474 CBNZ W8, 0x1EDA47C
	0x01EDA478 BL 0x1C16DFC
	0x01EDA47C MOV X0, X31
	0x01EDA480 BL 0x1E8D7EC
	0x01EDA484 STR W0, [X19 + 0x10]
	0x01EDA488 MOV X0, X19
	0x01EDA48C LDP X20, X19, [X31 + 0x10]
	0x01EDA490 MOV X1, X31
	0x01EDA494 LDP X30, X21, [X31], #0x20
	0x01EDA498 B 0x33BDD8C
	0x01EDA49C STR X30, [X31 - 0x10]!
	0x01EDA4A0 CBZ X1, 0x1EDA4D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2500000
	006 Move W8, [X21+1344]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2226000
	014 Move X0, [X0+3416]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1344], W8
	018 Compare X19, 0
	019 JumpIfEqual {39}
	020 Move X9, 0x2226000
	021 Move W8, [X19+16]
	022 Move X9, [X9+3416]
	023 Move X2, X31
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X1, [X9]
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Call Assert.Always, X0, X1
	028 Compare X20, 0
	029 JumpIfEqual {39}
	030 Move X0, X20
	031 Move X1, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, X31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call Simulation.TempFree, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Byte* GetData(Fusion.SimulationMessage* message)

Disassembly:
	0x01EDA4A4 LDR X8, [X1 + 0x50]
	0x01EDA4A8 CBZ X8, 0x1EDA4D0

ISIL:
	001 Add X0, X0, 28
	002 Return X0

Method: Fusion.SimulationMessage* Allocate(Fusion.Simulation sim, System.Int32 capacityInBytes)

Disassembly:
	0x01EDA318 LDRB W8, [X22 + 0x549]
	0x01EDA31C TBNZ X8, 0x0, 0x1EDA334
	0x01EDA320 ADRP X0, 0x221A000
	0x01EDA324 LDR X0, [X0 + 0xFE0]
	0x01EDA328 BL 0x1C16CF4
	0x01EDA32C MOVZ W8, 0x1
	0x01EDA330 STRB W8, [X22 + 0x549]
	0x01EDA334 MOV X0, X20
	0x01EDA338 BL 0x1EDA12C
	0x01EDA33C CBZ X19, 0x1EDA3C8
	0x01EDA340 MOV X1, X0
	0x01EDA344 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {18}
	005 Move W19, W1
	006 Add W1, W1, 28
	007 Move X2, X31
	008 Call Simulation.TempAlloc, X0, X1
	009 Compare X0, 0
	010 JumpIfEqual {18}
	011 Move W8, W19
	012 ShiftRight W8, 29
	013 And W8, W8, 0xFFFFFFF
	014 Move [X0+8], W8
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Boolean CanAllocateUserPayload(System.Int32 capacityInBytes)

Disassembly:
	0x01EDA4AC LDR X8, [X8 + 0x28]
	0x01EDA4B0 LDR X9, [X0]
	0x01EDA4B4 CMP X8, X9

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.String ToString()

Disassembly:
	0x01EDA4B8 B.EQ 0x1EDA4C0
	0x01EDA4BC STR X8, [X0]

ISIL:
	001 Move W1, 1

Method: System.String ToString(System.Boolean useBrackets)

Disassembly:
	0x01EDA4C0 CMP X8, X9
	0x01EDA4C4 CSET W0, NE
	0x01EDA4C8 LDR X30, [X31], #0x10
	0x01EDA4CC RET
	0x01EDA4D0 BL 0x1C16F20
	0x01EDA4D4 STR X30, [X31 - 0x10]!
	0x01EDA4D8 CBZ X1, 0x1EDA500
	0x01EDA4DC LDR X8, [X1 + 0x28]
	0x01EDA4E0 LDR X9, [X0]
	0x01EDA4E4 CMP X8, X9
	0x01EDA4E8 B.EQ 0x1EDA4F0
	0x01EDA4EC STR X8, [X0]
	0x01EDA4F0 CMP X8, X9
	0x01EDA4F4 CSET W0, NE
	0x01EDA4F8 LDR X30, [X31], #0x10
	0x01EDA4FC RET
	0x01EDA500 BL 0x1C16F20
	0x01EDA504 SUB X31, X31, 0x60
	0x01EDA508 STP D9, D8, [X31 + 0x20]
	0x01EDA50C STP X30, X23, [X31 + 0x30]
	0x01EDA510 STP X22, X21, [X31 + 0x40]
	0x01EDA514 STP X20, X19, [X31 + 0x50]
	0x01EDA518 MRS X20, 0xC000
	0x01EDA51C MOV X19, X8
	0x01EDA520 LDR X8, [X20 + 0x28]
	0x01EDA524 ADRP X21, 0x24FF000
	0x01EDA528 ADRP X22, 0x2224000
	0x01EDA52C STR X8, [X31 + 0x18]
	0x01EDA530 LDRB W8, [X21 + 0x54D]
	0x01EDA534 LDR X22, [X22 + 0x168]
	0x01EDA538 TBNZ X8, 0x0, 0x1EDA550
	0x01EDA53C ADRP X0, 0x2224000
	0x01EDA540 LDR X0, [X0 + 0x168]
	0x01EDA544 BL 0x1C16CF4
	0x01EDA548 MOVZ W8, 0x1
	0x01EDA54C STRB W8, [X21 + 0x54D]
	0x01EDA550 LDR X0, [X22]
	0x01EDA554 LDR W8, [X0 + 0xE0]
	0x01EDA558 CBNZ W8, 0x1EDA560
	0x01EDA55C BL 0x1C16DFC
	0x01EDA560 MOV X0, X31
	0x01EDA564 BL 0x1E90ABC
	0x01EDA568 MOV X2, X31
	0x01EDA56C BL 0x1E916D0
	0x01EDA570 STP X0, X1, [X31 + 0x8]
	0x01EDA574 UBFM X21, X0, 0x20, 0x3F
	0x01EDA578 UBFM X22, X1, 0x20, 0x3F
	0x01EDA57C ADD X0, X31, 0x8
	0x01EDA580 MOV X1, X31
	0x01EDA584 BL 0x1E91918
	0x01EDA588 ADD X0, X31, 0x8
	0x01EDA58C MOV X1, X31
	0x01EDA590 MOV V8.16B, V0.16B
	0x01EDA594 BL 0x1E918C8
	0x01EDA598 LDR W23, [X31 + 0x8]
	0x01EDA59C ADD X0, X31, 0x8
	0x01EDA5A0 MOV X1, X31
	0x01EDA5A4 MOV V9.16B, V0.16B
	0x01EDA5A8 BL 0x1E918F8
	0x01EDA5AC ADRP X8, 0xFFFFFFFFFEC12000
	0x01EDA5B0 MOVZ X9, 0x147B
	0x01EDA5B4 MOVK X9, 0x47AE0000
	0x01EDA5B8 STR D0, [X19 + 0x68]
	0x01EDA5BC LDR V0, [X8 + 0x9A]
	0x01EDA5C0 MOVK X9, 0x7AE1
	0x01EDA5C4 MOVK X9, 0x3F840000
	0x01EDA5C8 FMOV V1.2D, 0xFE000000000000
	0x01EDA5CC MOVN X10, 0x80100000
	0x01EDA5D0 UNIMPLEMENTED
	0x01EDA5D4 STP W21, W22, [X19 + 0x30]
	0x01EDA5D8 STP D8, D9, [X19 + 0x38]
	0x01EDA5DC STP X31, X31, [X19 + 0x50]
	0x01EDA5E0 STP W23, W31, [X19 + 0x60]
	0x01EDA5E4 STP V2, V1, [X19 + 0x10]
	0x01EDA5E8 STR X10, [X19 + 0x48]
	0x01EDA5EC STR V0, [X19]
	0x01EDA5F0 LDR X8, [X20 + 0x28]
	0x01EDA5F4 LDR X9, [X31 + 0x18]
	0x01EDA5F8 CMP X8, X9
	0x01EDA5FC B.NE 0x1EDA618
	0x01EDA600 LDP X20, X19, [X31 + 0x50]
	0x01EDA604 LDP X22, X21, [X31 + 0x40]
	0x01EDA608 LDP X30, X23, [X31 + 0x30]
	0x01EDA60C LDP D9, D8, [X31 + 0x20]
	0x01EDA610 ADD X31, X31, 0x60
	0x01EDA614 RET
	0x01EDA618 BL 0x3EB1B20
	0x01EDA61C STR W1, [X0]
	0x01EDA620 STR D0, [X0 + 0x8]
	0x01EDA624 RET
	0x01EDA628 SUB X31, X31, 0x40
	0x01EDA62C STP X30, X23, [X31 + 0x10]
	0x01EDA630 STP X22, X21, [X31 + 0x20]
	0x01EDA634 STP X20, X19, [X31 + 0x30]
	0x01EDA638 ADRP X23, 0x24FF000
	0x01EDA63C ADRP X20, 0x2224000
	0x01EDA640 ADRP X22, 0x221C000
	0x01EDA644 ADRP X21, 0x2226000
	0x01EDA648 LDRB W8, [X23 + 0x54E]
	0x01EDA64C LDR X20, [X20 + 0x158]
	0x01EDA650 LDR X22, [X22 + 0x978]
	0x01EDA654 LDR X21, [X21 + 0x198]
	0x01EDA658 MOV X19, X0
	0x01EDA65C TBNZ X8, 0x0, 0x1EDA68C
	0x01EDA660 ADRP X0, 0x221C000
	0x01EDA664 LDR X0, [X0 + 0x978]
	0x01EDA668 BL 0x1C16CF4
	0x01EDA66C ADRP X0, 0x2224000
	0x01EDA670 LDR X0, [X0 + 0x158]
	0x01EDA674 BL 0x1C16CF4
	0x01EDA678 ADRP X0, 0x2226000
	0x01EDA67C LDR X0, [X0 + 0x198]
	0x01EDA680 BL 0x1C16CF4
	0x01EDA684 MOVZ W8, 0x1
	0x01EDA688 STRB W8, [X23 + 0x54E]
	0x01EDA68C LDR W8, [X19]
	0x01EDA690 LDR X0, [X20]
	0x01EDA694 ADD X1, X31, 0x8
	0x01EDA698 STR W8, [X31 + 0x8]
	0x01EDA69C BL 0x1C16E04
	0x01EDA6A0 MOV X20, X0
	0x01EDA6A4 LDR V0, [X19 + 0x8]
	0x01EDA6A8 LDR X0, [X22]
	0x01EDA6AC ADD X1, X31, 0x0
	0x01EDA6B0 STR D0, [X31]
	0x01EDA6B4 BL 0x1C16E04
	0x01EDA6B8 LDR X8, [X21]
	0x01EDA6BC MOV X2, X0
	0x01EDA6C0 MOV X1, X20
	0x01EDA6C4 MOV X3, X31
	0x01EDA6C8 MOV X0, X8
	0x01EDA6CC BL 0x3227BD4
	0x01EDA6D0 LDP X20, X19, [X31 + 0x30]
	0x01EDA6D4 LDP X22, X21, [X31 + 0x20]
	0x01EDA6D8 LDP X30, X23, [X31 + 0x10]
	0x01EDA6DC ADD X31, X31, 0x40
	0x01EDA6E0 RET
	0x01EDA6E4 STP X30, X23, [X31 - 0x30]!
	0x01EDA6E8 STP X22, X21, [X31 + 0x10]
	0x01EDA6EC STP X20, X19, [X31 + 0x20]
	0x01EDA6F0 ADRP X23, 0x24FF000
	0x01EDA6F4 ADRP X22, 0x2226000
	0x01EDA6F8 ADRP X21, 0x2226000
	0x01EDA6FC LDRB W8, [X23 + 0x54F]
	0x01EDA700 LDR X22, [X22 + 0x1A0]
	0x01EDA704 LDR X21, [X21 + 0x1A8]
	0x01EDA708 MOV X20, X1
	0x01EDA70C MOV X19, X0
	0x01EDA710 TBNZ X8, 0x0, 0x1EDA734
	0x01EDA714 ADRP X0, 0x2226000
	0x01EDA718 LDR X0, [X0 + 0x1A8]
	0x01EDA71C BL 0x1C16CF4
	0x01EDA720 ADRP X0, 0x2226000
	0x01EDA724 LDR X0, [X0 + 0x1A0]
	0x01EDA728 BL 0x1C16CF4
	0x01EDA72C MOVZ W8, 0x1
	0x01EDA730 STRB W8, [X23 + 0x54F]
	0x01EDA734 MOV X0, X19
	0x01EDA738 MOV X1, X31
	0x01EDA73C BL 0x33BDD8C
	0x01EDA740 ADD X0, X19, 0x10
	0x01EDA744 MOVZ W2, 0x70
	0x01EDA748 MOV X1, X20
	0x01EDA74C BL 0x3EB1B30
	0x01EDA750 LDR X0, [X22]
	0x01EDA754 BL 0x1C16F10
	0x01EDA758 LDR X1, [X21]
	0x01EDA75C MOV X20, X0
	0x01EDA760 BL 0x301B7C4
	0x01EDA764 STR X20, [X19 + 0x1D0]
	0x01EDA768 LDR X0, [X22]
	0x01EDA76C BL 0x1C16F10
	0x01EDA770 LDR X1, [X21]
	0x01EDA774 MOV X20, X0
	0x01EDA778 BL 0x301B7C4
	0x01EDA77C STR X20, [X19 + 0x1D8]
	0x01EDA780 LDR X0, [X22]
	0x01EDA784 BL 0x1C16F10
	0x01EDA788 LDR X1, [X21]
	0x01EDA78C MOV X20, X0
	0x01EDA790 BL 0x301B7C4
	0x01EDA794 STR X20, [X19 + 0x1E0]
	0x01EDA798 MOV X0, X19
	0x01EDA79C LDP X20, X19, [X31 + 0x20]
	0x01EDA7A0 LDP X22, X21, [X31 + 0x10]
	0x01EDA7A4 LDP X30, X23, [X31], #0x30
	0x01EDA7A8 B 0x1EDA7AC
	0x01EDA7AC STR D10, [X31 - 0x60]!
	0x01EDA7B0 STP D9, D8, [X31 + 0x10]
	0x01EDA7B4 STP X30, X25, [X31 + 0x20]
	0x01EDA7B8 STP X24, X23, [X31 + 0x30]
	0x01EDA7BC STP X22, X21, [X31 + 0x40]
	0x01EDA7C0 STP X20, X19, [X31 + 0x50]
	0x01EDA7C4 ADRP X20, 0x24FF000
	0x01EDA7C8 ADRP X24, 0x2226000
	0x01EDA7CC ADRP X23, 0x2226000
	0x01EDA7D0 ADRP X22, 0x2226000
	0x01EDA7D4 ADRP X21, 0x2226000
	0x01EDA7D8 LDRB W8, [X20 + 0x551]
	0x01EDA7DC LDR X24, [X24 + 0x1B0]
	0x01EDA7E0 LDR X23, [X23 + 0xB8]
	0x01EDA7E4 LDR X22, [X22 + 0x1B8]
	0x01EDA7E8 LDR X21, [X21 + 0x1C0]
	0x01EDA7EC MOV X19, X0
	0x01EDA7F0 TBNZ X8, 0x0, 0x1EDA82C
	0x01EDA7F4 ADRP X0, 0x2226000
	0x01EDA7F8 LDR X0, [X0 + 0x1C0]
	0x01EDA7FC BL 0x1C16CF4
	0x01EDA800 ADRP X0, 0x2226000
	0x01EDA804 LDR X0, [X0 + 0x1B8]
	0x01EDA808 BL 0x1C16CF4
	0x01EDA80C ADRP X0, 0x2226000
	0x01EDA810 LDR X0, [X0 + 0xB8]
	0x01EDA814 BL 0x1C16CF4
	0x01EDA818 ADRP X0, 0x2226000
	0x01EDA81C LDR X0, [X0 + 0x1B0]
	0x01EDA820 BL 0x1C16CF4
	0x01EDA824 MOVZ W8, 0x1
	0x01EDA828 STRB W8, [X20 + 0x551]
	0x01EDA82C LDR X0, [X24]
	0x01EDA830 LDR V8, [X19 + 0x10]
	0x01EDA834 BL 0x1C16F10
	0x01EDA838 ADRP X8, 0xFFFFFFFFFEC13000
	0x01EDA83C LDR V10, [X8 + 0xE58]
	0x01EDA840 FNEG D9, D8
	0x01EDA844 FMOV D1, X31
	0x01EDA848 FMOV D2, X31
	0x01EDA84C MOV V0.16B, V10.16B
	0x01EDA850 MOV V3.16B, V9.16B
	0x01EDA854 MOV V4.16B, V8.16B
	0x01EDA858 MOV X1, X31
	0x01EDA85C MOV X20, X0
	0x01EDA860 BL 0x1EDD320
	0x01EDA864 STR X20, [X19 + 0x80]
	0x01EDA868 LDR X0, [X24]
	0x01EDA86C BL 0x1C16F10
	0x01EDA870 FMOV D1, X31
	0x01EDA874 FMOV D2, X31
	0x01EDA878 MOV V0.16B, V10.16B
	0x01EDA87C MOV V3.16B, V9.16B
	0x01EDA880 MOV V4.16B, V8.16B
	0x01EDA884 MOV X1, X31
	0x01EDA888 MOV X20, X0
	0x01EDA88C BL 0x1EDD320
	0x01EDA890 STR X20, [X19 + 0xA0]
	0x01EDA894 LDR X0, [X24]
	0x01EDA898 BL 0x1C16F10
	0x01EDA89C FMOV D1, X31
	0x01EDA8A0 FMOV D2, X31
	0x01EDA8A4 MOV V0.16B, V10.16B
	0x01EDA8A8 MOV V3.16B, V9.16B
	0x01EDA8AC MOV V4.16B, V8.16B
	0x01EDA8B0 MOV X1, X31
	0x01EDA8B4 MOV X20, X0
	0x01EDA8B8 BL 0x1EDD320
	0x01EDA8BC MOVI V0.2D, 0x0
	0x01EDA8C0 STR X20, [X19 + 0xC0]
	0x01EDA8C4 STP X31, X31, [X19 + 0x140]
	0x01EDA8C8 STR X31, [X19 + 0x138]
	0x01EDA8CC STP X31, X31, [X19 + 0x118]
	0x01EDA8D0 STR X31, [X19 + 0x110]
	0x01EDA8D4 STP V0, V0, [X19 + 0x160]
	0x01EDA8D8 STP V0, V0, [X19 + 0x180]
	0x01EDA8DC STP V0, V0, [X19 + 0x1A0]
	0x01EDA8E0 LDR X0, [X23]
	0x01EDA8E4 LDR W24, [X19 + 0x44]
	0x01EDA8E8 LDR V8, [X19 + 0x18]
	0x01EDA8EC BL 0x1C16F10
	0x01EDA8F0 SCVTF D0, W24
	0x01EDA8F4 MOVZ X8, 0x7FF00000
	0x01EDA8F8 FMUL D0, D8, D0
	0x01EDA8FC FMOV D8, X8
	0x01EDA900 FCVTZS W8, D0
	0x01EDA904 FCMP D0, D8
	0x01EDA908 MOVZ W24, 0x80000000
	0x01EDA90C CSEL W1, W24, W8, EQ
	0x01EDA910 MOV X2, X31
	0x01EDA914 MOV X20, X0
	0x01EDA918 BL 0x1E9251C
	0x01EDA91C STR X20, [X19 + 0xF8]
	0x01EDA920 LDR X0, [X23]
	0x01EDA924 LDR W25, [X19 + 0x44]
	0x01EDA928 LDR V9, [X19 + 0x18]
	0x01EDA92C BL 0x1C16F10
	0x01EDA930 SCVTF D0, W25
	0x01EDA934 FMUL D0, D9, D0
	0x01EDA938 FCVTZS W8, D0
	0x01EDA93C FCMP D0, D8
	0x01EDA940 CSEL W1, W24, W8, EQ
	0x01EDA944 MOV X2, X31
	0x01EDA948 MOV X20, X0
	0x01EDA94C BL 0x1E9251C
	0x01EDA950 STR X20, [X19 + 0x100]
	0x01EDA954 LDR X0, [X23]
	0x01EDA958 LDR W25, [X19 + 0x44]
	0x01EDA95C LDR V9, [X19 + 0x18]
	0x01EDA960 BL 0x1C16F10
	0x01EDA964 SCVTF D0, W25
	0x01EDA968 FMUL D0, D9, D0
	0x01EDA96C FCVTZS W8, D0
	0x01EDA970 FCMP D0, D8
	0x01EDA974 CSEL W1, W24, W8, EQ
	0x01EDA978 MOV X2, X31
	0x01EDA97C MOV X20, X0
	0x01EDA980 BL 0x1E9251C
	0x01EDA984 STR X20, [X19 + 0x128]
	0x01EDA988 LDR X0, [X23]
	0x01EDA98C LDR W25, [X19 + 0x44]
	0x01EDA990 LDR V9, [X19 + 0x18]
	0x01EDA994 BL 0x1C16F10
	0x01EDA998 SCVTF D0, W25
	0x01EDA99C FMUL D0, D9, D0
	0x01EDA9A0 FCVTZS W8, D0
	0x01EDA9A4 FCMP D0, D8
	0x01EDA9A8 CSEL W1, W24, W8, EQ
	0x01EDA9AC MOV X2, X31
	0x01EDA9B0 MOV X20, X0
	0x01EDA9B4 BL 0x1E9251C
	0x01EDA9B8 STR X20, [X19 + 0x108]
	0x01EDA9BC LDR X0, [X22]
	0x01EDA9C0 LDR W20, [X19 + 0x70]
	0x01EDA9C4 BL 0x1C16F10
	0x01EDA9C8 LDR X2, [X21]
	0x01EDA9CC MOV W1, W20
	0x01EDA9D0 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+40], X27
	004 Move [X31+48], X26
	005 Move [X31+56], X25
	006 Move [X31+64], X24
	007 Move [X31+72], X23
	008 Move [X31+80], X22
	009 Move [X31+88], X21
	010 Move [X31+96], X20
	011 Move [X31+104], X19
	012 Move X21, 0x2500000
	013 Move X23, 0x221A000
	014 Move X22, 0x2227000
	015 Move X24, 0x221A000
	016 Move W8, [X21+1345]
	017 Move X23, [X23+2512]
	018 Move X22, [X22+296]
	019 Move X24, [X24+2440]
	020 Move W19, W1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {70}
	026 Move X0, 0x2227000
	027 Move X0, [X0+304]
	028 Call 0x1C17CF4
	029 Move X0, 0x221A000
	030 Move X0, [X0+1880]
	031 Call 0x1C17CF4
	032 Move X0, 0x221A000
	033 Move X0, [X0+2512]
	034 Call 0x1C17CF4
	035 Move X0, 0x221D000
	036 Move X0, [X0+3648]
	037 Call 0x1C17CF4
	038 Move X0, 0x2225000
	039 Move X0, [X0+1664]
	040 Call 0x1C17CF4
	041 Move X0, 0x2227000
	042 Move X0, [X0+296]
	043 Call 0x1C17CF4
	044 Move X0, 0x2227000
	045 Move X0, [X0+312]
	046 Call 0x1C17CF4
	047 Move X0, 0x2227000
	048 Move X0, [X0+320]
	049 Call 0x1C17CF4
	050 Move X0, 0x2225000
	051 Move X0, [X0+1688]
	052 Call 0x1C17CF4
	053 Move X0, 0x2227000
	054 Move X0, [X0+328]
	055 Call 0x1C17CF4
	056 Move X0, 0x221A000
	057 Move X0, [X0+2440]
	058 Call 0x1C17CF4
	059 Move X0, 0x2227000
	060 Move X0, [X0+336]
	061 Call 0x1C17CF4
	062 Move X0, 0x2227000
	063 Move X0, [X0+344]
	064 Call 0x1C17CF4
	065 Move X0, 0x221A000
	066 Move X0, [X0+2120]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X21+1345], W8
	070 Move X0, [X23]
	071 Move W1, 16
	072 Call 0x1C17D6C
	073 And W31, W19, 1
	074 NotImplemented "Instruction CSEL not yet implemented."
	075 Compare X0, 0
	076 JumpIfEqual {359}
	077 Move X9, 0x2227000
	078 Move X9, [X9+328]
	079 Move X23, [X8]
	080 Move X21, X0
	081 Move X22, [X9]
	082 Compare X23, 0
	083 JumpIfEqual {90}
	084 Move X8, [X21]
	085 Move X0, X23
	086 Move X1, [X8+64]
	087 Call 0x1C17E00
	088 Compare X0, 0
	089 JumpIfEqual {356}
	090 Move W8, [X21+24]
	091 Compare W8, 0
	092 JumpIfEqual {355}
	093 Move X25, 0x2225000
	094 Move X25, [X25+1664]
	095 Move [X21+32], X23
	096 Move X0, [X25]
	097 Compare X0, 0
	098 JumpIfEqual {105}
	099 Move X8, [X21]
	100 Move X1, [X8+64]
	101 Call 0x1C17E00
	102 Compare X0, 0
	103 JumpIfEqual {356}
	104 Move W8, [X21+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, [X25]
	107 Move X25, 0x221A000
	108 Move X25, [X25+1880]
	109 Add X1, X31, 28
	110 Move [X21+40], X8
	111 Move W8, [X20]
	112 Move X0, [X25]
	113 Move [X31+28], W8
	114 Call 0x1C17E04
	115 Move X23, X0
	116 Compare X0, 0
	117 JumpIfEqual {124}
	118 Move X8, [X21]
	119 Move X0, X23
	120 Move X1, [X8+64]
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {356}
	124 Move W8, [X21+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X26, 0x2225000
	127 Move X26, [X26+1688]
	128 Move [X21+48], X23
	129 Move X0, [X26]
	130 Compare X0, 0
	131 JumpIfEqual {138}
	132 Move X8, [X21]
	133 Move X1, [X8+64]
	134 Call 0x1C17E00
	135 Compare X0, 0
	136 JumpIfEqual {356}
	137 Move W8, [X21+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X8, [X26]
	140 Move X26, 0x221D000
	141 Move X26, [X26+3648]
	142 Add X1, X31, 24
	143 Move [X21+56], X8
	144 Move W8, [X20+4]
	145 Move X0, [X26]
	146 Move [X31+24], W8
	147 Call 0x1C17E04
	148 Move X23, X0
	149 Compare X0, 0
	150 JumpIfEqual {157}
	151 Move X8, [X21]
	152 Move X0, X23
	153 Move X1, [X8+64]
	154 Call 0x1C17E00
	155 Compare X0, 0
	156 JumpIfEqual {356}
	157 Move W8, [X21+24]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X27, 0x2227000
	160 Move X27, [X27+336]
	161 Move [X21+64], X23
	162 Move X0, [X27]
	163 Compare X0, 0
	164 JumpIfEqual {171}
	165 Move X8, [X21]
	166 Move X1, [X8+64]
	167 Call 0x1C17E00
	168 Compare X0, 0
	169 JumpIfEqual {356}
	170 Move W8, [X21+24]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X8, [X27]
	173 Add X1, X31, 20
	174 Move [X21+72], X8
	175 Move W8, [X20+8]
	176 Move X0, [X25]
	177 Move [X31+20], W8
	178 Call 0x1C17E04
	179 Move X23, X0
	180 Compare X0, 0
	181 JumpIfEqual {188}
	182 Move X8, [X21]
	183 Move X0, X23
	184 Move X1, [X8+64]
	185 Call 0x1C17E00
	186 Compare X0, 0
	187 JumpIfEqual {356}
	188 Move W8, [X21+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X27, 0x2227000
	191 Move X27, [X27+320]
	192 Move [X21+80], X23
	193 Move X0, [X27]
	194 Compare X0, 0
	195 JumpIfEqual {202}
	196 Move X8, [X21]
	197 Move X1, [X8+64]
	198 Call 0x1C17E00
	199 Compare X0, 0
	200 JumpIfEqual {356}
	201 Move W8, [X21+24]
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move X8, [X27]
	204 Add X1, X31, 16
	205 Move [X21+88], X8
	206 Move W8, [X20+12]
	207 Move X0, [X25]
	208 Move [X31+16], W8
	209 Call 0x1C17E04
	210 Move X23, X0
	211 Compare X0, 0
	212 JumpIfEqual {219}
	213 Move X8, [X21]
	214 Move X0, X23
	215 Move X1, [X8+64]
	216 Call 0x1C17E00
	217 Compare X0, 0
	218 JumpIfEqual {356}
	219 Move W8, [X21+24]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X27, 0x2227000
	222 Move X27, [X27+344]
	223 Move [X21+96], X23
	224 Move X0, [X27]
	225 Compare X0, 0
	226 JumpIfEqual {233}
	227 Move X8, [X21]
	228 Move X1, [X8+64]
	229 Call 0x1C17E00
	230 Compare X0, 0
	231 JumpIfEqual {356}
	232 Move W8, [X21+24]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move X8, [X27]
	235 Add X1, X31, 12
	236 Move [X21+104], X8
	237 Move W8, [X20+16]
	238 Move X0, [X25]
	239 Move [X31+12], W8
	240 Call 0x1C17E04
	241 Move X23, X0
	242 Compare X0, 0
	243 JumpIfEqual {250}
	244 Move X8, [X21]
	245 Move X0, X23
	246 Move X1, [X8+64]
	247 Call 0x1C17E00
	248 Compare X0, 0
	249 JumpIfEqual {356}
	250 Move W8, [X21+24]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move X27, 0x2227000
	253 Move X27, [X27+312]
	254 Move [X21+112], X23
	255 Move X0, [X27]
	256 Compare X0, 0
	257 JumpIfEqual {264}
	258 Move X8, [X21]
	259 Move X1, [X8+64]
	260 Call 0x1C17E00
	261 Compare X0, 0
	262 JumpIfEqual {356}
	263 Move W8, [X21+24]
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Move X8, [X27]
	266 Add X1, X31, 8
	267 Move [X21+120], X8
	268 Move W8, [X20+24]
	269 Move X0, [X26]
	270 Move [X31+8], W8
	271 Call 0x1C17E04
	272 Move X23, X0
	273 Compare X0, 0
	274 JumpIfEqual {281}
	275 Move X8, [X21]
	276 Move X0, X23
	277 Move X1, [X8+64]
	278 Call 0x1C17E00
	279 Compare X0, 0
	280 JumpIfEqual {356}
	281 Move W8, [X21+24]
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move X8, 0x2227000
	284 Move X8, [X8+304]
	285 Move [X21+128], X23
	286 NotImplemented "Instruction LDRH not yet implemented."
	287 Add X1, X31, 4
	288 Move X0, [X8]
	289 Move [X31+4], W9
	290 Call 0x1C17E04
	291 Move X23, X0
	292 Compare X0, 0
	293 JumpIfEqual {300}
	294 Move X8, [X21]
	295 Move X0, X23
	296 Move X1, [X8+64]
	297 Call 0x1C17E00
	298 Compare X0, 0
	299 JumpIfEqual {356}
	300 Move W8, [X21+24]
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move [X21+136], X23
	303 NotImplemented "Instruction LDRH not yet implemented."
	304 Move X0, [X25]
	305 Add X1, X31, 0
	306 Move W8, W8
	307 ShiftRight W8, 16
	308 And W8, W8, 0x7FFF
	309 Move [X31], W8
	310 Call 0x1C17E04
	311 Move X20, X0
	312 Compare X0, 0
	313 JumpIfEqual {320}
	314 Move X8, [X21]
	315 Move X0, X20
	316 Move X1, [X8+64]
	317 Call 0x1C17E00
	318 Compare X0, 0
	319 JumpIfEqual {356}
	320 Move W8, [X21+24]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move X9, 0x221A000
	323 Move X9, [X9+2120]
	324 And W31, W19, 1
	325 Move [X21+144], X20
	326 NotImplemented "Instruction CSEL not yet implemented."
	327 Move X19, [X9]
	328 Compare X19, 0
	329 JumpIfEqual {337}
	330 Move X8, [X21]
	331 Move X0, X19
	332 Move X1, [X8+64]
	333 Call 0x1C17E00
	334 Compare X0, 0
	335 JumpIfEqual {356}
	336 Move W8, [X21+24]
	337 NotImplemented "Instruction CMP not yet implemented."
	338 Move X0, X22
	339 Move X1, X21
	340 Move X2, X31
	341 Move [X21+152], X19
	342 Call String.Format, X0, X1
	343 Move X20, [X31+96]
	344 Move X19, [X31+104]
	345 Move X22, [X31+80]
	346 Move X21, [X31+88]
	347 Move X24, [X31+64]
	348 Move X23, [X31+72]
	349 Move X26, [X31+48]
	350 Move X25, [X31+56]
	351 Move X30, [X31+32]
	352 Move X27, [X31+40]
	353 Add X31, X31, 112
	354 Return X0
	355 Call 0x1C17F28
	356 Call 0x1C17F44
	357 Move X1, X31
	358 Call 0x1C17DEC
	359 Call 0x1C17F20

Method: System.String DumpContents(Fusion.SimulationMessage message)

Disassembly:
	0x01EDA9D4 BL 0x25D0D70
	0x01EDA9D8 STR X21, [X19 + 0x200]
	0x01EDA9DC LDP X20, X19, [X31 + 0x50]
	0x01EDA9E0 LDP X22, X21, [X31 + 0x40]
	0x01EDA9E4 LDP X24, X23, [X31 + 0x30]
	0x01EDA9E8 LDP X30, X25, [X31 + 0x20]
	0x01EDA9EC LDP D9, D8, [X31 + 0x10]
	0x01EDA9F0 LDR V10, [X31], #0x60
	0x01EDA9F4 RET
	0x01EDA9F8 STR X30, [X31 - 0x20]!
	0x01EDA9FC STP X20, X19, [X31 + 0x10]
	0x01EDAA00 CBZ X1, 0x1EDAA68
	0x01EDAA04 MOV X19, X0
	0x01EDAA08 MOV X0, X1
	0x01EDAA0C MOV X20, X1
	0x01EDAA10 BL 0x1ED7DF0
	0x01EDAA14 STR D0, [X19 + 0x18]
	0x01EDAA18 BL 0x1ED802C
	0x01EDAA1C MOV X0, X20
	0x01EDAA20 STR D0, [X19 + 0x10]
	0x01EDAA24 BL 0x1ED7E5C
	0x01EDAA28 MOV X0, X20
	0x01EDAA2C STR D0, [X19 + 0x20]
	0x01EDAA30 BL 0x1ED7EDC
	0x01EDAA34 MOV X0, X20
	0x01EDAA38 STR D0, [X19 + 0x28]
	0x01EDAA3C BL 0x1ED7F5C
	0x01EDAA40 SCVTF D0, W0
	0x01EDAA44 MOV X0, X20
	0x01EDAA48 STR D0, [X19 + 0x30]
	0x01EDAA4C BL 0x1ED7FC0
	0x01EDAA50 SCVTF D0, W0
	0x01EDAA54 STR D0, [X19 + 0x38]
	0x01EDAA58 MOV X0, X19
	0x01EDAA5C LDP X20, X19, [X31 + 0x10]
	0x01EDAA60 LDR X30, [X31], #0x20
	0x01EDAA64 B 0x1EDA7AC
	0x01EDAA68 BL 0x1C16F20
	0x01EDAA6C STR X30, [X31 - 0x20]!
	0x01EDAA70 STP X20, X19, [X31 + 0x10]
	0x01EDAA74 LDR W8, [X1 + 0x4]
	0x01EDAA78 MOV X19, X1
	0x01EDAA7C MOV X20, X0
	0x01EDAA80 STR W8, [X0 + 0x40]
	0x01EDAA84 LDR W8, [X1 + 0xC]
	0x01EDAA88 STR W8, [X0 + 0x44]
	0x01EDAA8C MOV X0, X1
	0x01EDAA90 MOV X1, X31
	0x01EDAA94 BL 0x1E91918
	0x01EDAA98 MOV X0, X19
	0x01EDAA9C MOV X1, X31
	0x01EDAAA0 STR D0, [X20 + 0x48]
	0x01EDAAA4 BL 0x1E918C8
	0x01EDAAA8 STR D0, [X20 + 0x50]
	0x01EDAAAC LDR W8, [X19]
	0x01EDAAB0 MOV X0, X19
	0x01EDAAB4 MOV X1, X31
	0x01EDAAB8 STR W8, [X20 + 0x70]
	0x01EDAABC BL 0x1E918F8
	0x01EDAAC0 MOVN X8, 0x80100000
	0x01EDAAC4 STR D0, [X20 + 0x78]
	0x01EDAAC8 STP X31, X31, [X20 + 0x60]
	0x01EDAACC STR X8, [X20 + 0x58]
	0x01EDAAD0 MOV X0, X20
	0x01EDAAD4 LDP X20, X19, [X31 + 0x10]
	0x01EDAAD8 LDR X30, [X31], #0x20
	0x01EDAADC B 0x1EDA7AC
	0x01EDAAE0 STR D10, [X31 - 0x40]!
	0x01EDAAE4 STP D9, D8, [X31 + 0x8]
	0x01EDAAE8 STR X30, [X31 + 0x18]
	0x01EDAAEC STP X22, X21, [X31 + 0x20]
	0x01EDAAF0 STP X20, X19, [X31 + 0x30]
	0x01EDAAF4 ADRP X21, 0x24FF000
	0x01EDAAF8 LDRB W8, [X21 + 0x552]
	0x01EDAAFC MOV V8.16B, V2.16B
	0x01EDAB00 MOV V9.16B, V1.16B
	0x01EDAB04 MOV X20, X1
	0x01EDAB08 MOV V10.16B, V0.16B
	0x01EDAB0C MOV X19, X0
	0x01EDAB10 TBNZ X8, 0x0, 0x1EDAB28
	0x01EDAB14 ADRP X0, 0x2226000
	0x01EDAB18 LDR X0, [X0 + 0x1C8]
	0x01EDAB1C BL 0x1C16CF4
	0x01EDAB20 MOVZ W8, 0x1
	0x01EDAB24 STRB W8, [X21 + 0x552]
	0x01EDAB28 LDR X21, [X19 + 0x80]
	0x01EDAB2C CBZ X21, 0x1EDAD60
	0x01EDAB30 ADRP X22, 0x2226000
	0x01EDAB34 LDR X8, [X21]
	0x01EDAB38 LDR X22, [X22 + 0x1C8]
	0x01EDAB3C LDRH W9, [X8 + 0x12E]
	0x01EDAB40 LDR X1, [X22]
	0x01EDAB44 CBZ X9, 0x1EDAB68
	0x01EDAB48 LDR X10, [X8 + 0xB0]
	0x01EDAB4C ADD X10, X10, 0x8
	0x01EDAB50 LDUR X11, [X10 - 0x8]
	0x01EDAB54 CMP X11, X1
	0x01EDAB58 B.EQ 0x1EDAB78
	0x01EDAB5C SUBS X9, X9, 0x1
	0x01EDAB60 ADD X10, X10, 0x10
	0x01EDAB64 B.NE 0x1EDAB50
	0x01EDAB68 MOVZ W2, 0x2
	0x01EDAB6C MOV X0, X21
	0x01EDAB70 BL 0x1C5C788
	0x01EDAB74 B 0x1EDAB88
	0x01EDAB78 LDR W9, [X10]
	0x01EDAB7C ADD W9, W9, 0x2
	0x01EDAB80 ADD X8, X8, W9, 0x4, SXTW
	0x01EDAB84 ADD X0, X8, 0x138
	0x01EDAB88 LDP X8, X1, [X0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x2500000
	011 Move W8, [X20+1346]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {37}
	017 Move X0, 0x2221000
	018 Move X0, [X0+3392]
	019 Call 0x1C17CF4
	020 Move X0, 0x2221000
	021 Move X0, [X0+3176]
	022 Call 0x1C17CF4
	023 Move X0, 0x2227000
	024 Move X0, [X0+352]
	025 Call 0x1C17CF4
	026 Move X0, 0x221B000
	027 Move X0, [X0+4064]
	028 Call 0x1C17CF4
	029 Move X0, 0x221A000
	030 Move X0, [X0+3544]
	031 Call 0x1C17CF4
	032 Move X0, 0x2227000
	033 Move X0, [X0+360]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+1346], W8
	037 Move X20, 0x2221000
	038 Move X21, 0x2221000
	039 Move X23, 0x221B000
	040 Move X22, 0x221A000
	041 Move W8, [X19+20]
	042 Move X20, [X20+3176]
	043 Move X21, [X21+3392]
	044 Move X23, [X23+4064]
	045 Move X22, [X22+3544]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {100}
	050 Move X8, 0x2227000
	051 Move X8, [X8+352]
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 Add X1, X31, 8
	054 Move X0, [X8]
	055 Move [X31+8], X9
	056 Call 0x1C17E04
	057 Move X8, [X20]
	058 Move W25, [X19+8]
	059 Move X20, X0
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X24, 0x2227000
	066 Move X24, [X24+360]
	067 Subtract W0, W25, 8
	068 Move X1, X31
	069 Call Maths.BytesRequiredForBits, X0
	070 Move X8, [X21]
	071 Move W21, W0
	072 Move W9, [X8+224]
	073 Compare W9, 0
	074 JumpIfNotEqual {77}
	075 Move X0, X8
	076 Call 0x1C17DFC
	077 Move X3, [X23]
	078 Move X4, [X22]
	079 Add X0, X19, 36
	080 Move W2, 16
	081 Move W1, W21
	082 Move X5, X31
	083 Call BinUtils.BytesToHex, X0, X1, X2, X3, X4
	084 Move X8, [X24]
	085 Move X2, X0
	086 Move X1, X20
	087 Move X3, X31
	088 Move X0, X8
	089 Call String.Format, X0, X1, X2
	090 Move X20, [X31+64]
	091 Move X19, [X31+72]
	092 Move X22, [X31+48]
	093 Move X21, [X31+56]
	094 Move X24, [X31+32]
	095 Move X23, [X31+40]
	096 Move X30, [X31+16]
	097 Move X25, [X31+24]
	098 Add X31, X31, 80
	099 Return X0
	100 Move X0, [X20]
	101 Move W20, [X19+8]
	102 Add X19, X19, 28
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Move W0, W20
	108 Move X1, X31
	109 Call Maths.BytesRequiredForBits, X0
	110 Move X8, [X21]
	111 Move W20, W0
	112 Move W9, [X8+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {117}
	115 Move X0, X8
	116 Call 0x1C17DFC
	117 Move X3, [X23]
	118 Move X4, [X22]
	119 Move X0, X19
	120 Move W1, W20
	121 Move X20, [X31+64]
	122 Move X19, [X31+72]
	123 Move X22, [X31+48]
	124 Move X21, [X31+56]
	125 Move X24, [X31+32]
	126 Move X23, [X31+40]
	127 Move X30, [X31+16]
	128 Move X25, [X31+24]
	129 Move W2, 16
	130 Move X5, X31
	131 Add X31, X31, 80
	132 Call BinUtils.BytesToHex, X0, X1, X2, X3, X4
	133 Return X0

Method: System.Void Fusion.ILogDumpable.Dump(System.Text.StringBuilder builder)

Disassembly:
	0x01EDAB8C MOV X0, X21
	0x01EDAB90 BLR X8
	0x01EDAB94 LDR X21, [X19 + 0xA0]
	0x01EDAB98 CBZ X21, 0x1EDAD60
	0x01EDAB9C LDR X8, [X21]
	0x01EDABA0 LDR X1, [X22]
	0x01EDABA4 LDRH W9, [X8 + 0x12E]
	0x01EDABA8 CBZ X9, 0x1EDABCC
	0x01EDABAC LDR X10, [X8 + 0xB0]
	0x01EDABB0 ADD X10, X10, 0x8
	0x01EDABB4 LDUR X11, [X10 - 0x8]
	0x01EDABB8 CMP X11, X1
	0x01EDABBC B.EQ 0x1EDABDC
	0x01EDABC0 SUBS X9, X9, 0x1
	0x01EDABC4 ADD X10, X10, 0x10
	0x01EDABC8 B.NE 0x1EDABB4
	0x01EDABCC MOVZ W2, 0x2
	0x01EDABD0 MOV X0, X21
	0x01EDABD4 BL 0x1C5C788
	0x01EDABD8 B 0x1EDABEC
	0x01EDABDC LDR W9, [X10]
	0x01EDABE0 ADD W9, W9, 0x2
	0x01EDABE4 ADD X8, X8, W9, 0x4, SXTW
	0x01EDABE8 ADD X0, X8, 0x138
	0x01EDABEC LDP X8, X1, [X0]
	0x01EDABF0 MOV X0, X21
	0x01EDABF4 BLR X8
	0x01EDABF8 LDR X21, [X19 + 0xC0]
	0x01EDABFC CBZ X21, 0x1EDAD60
	0x01EDAC00 LDR X8, [X21]
	0x01EDAC04 LDR X1, [X22]
	0x01EDAC08 LDRH W9, [X8 + 0x12E]
	0x01EDAC0C CBZ X9, 0x1EDAC30
	0x01EDAC10 LDR X10, [X8 + 0xB0]
	0x01EDAC14 ADD X10, X10, 0x8
	0x01EDAC18 LDUR X11, [X10 - 0x8]
	0x01EDAC1C CMP X11, X1
	0x01EDAC20 B.EQ 0x1EDAC40
	0x01EDAC24 SUBS X9, X9, 0x1
	0x01EDAC28 ADD X10, X10, 0x10
	0x01EDAC2C B.NE 0x1EDAC18
	0x01EDAC30 MOVZ W2, 0x2
	0x01EDAC34 MOV X0, X21
	0x01EDAC38 BL 0x1C5C788
	0x01EDAC3C B 0x1EDAC50
	0x01EDAC40 LDR W9, [X10]
	0x01EDAC44 ADD W9, W9, 0x2
	0x01EDAC48 ADD X8, X8, W9, 0x4, SXTW
	0x01EDAC4C ADD X0, X8, 0x138
	0x01EDAC50 LDP X8, X1, [X0]
	0x01EDAC54 MOV X0, X21
	0x01EDAC58 BLR X8

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x2500000
	010 Move X19, X1
	011 Move X20, X0
	012 Move [X31+40], X8
	013 Move W8, [X22+1347]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x221B000
	019 Move X0, [X0+4064]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1347], W8
	023 Move W1, 1
	024 Move X0, X20
	025 Call SimulationMessage.ToString, X0, X1
	026 Compare X19, 0
	027 JumpIfEqual {58}
	028 Move X22, 0x221B000
	029 Move X22, [X22+4064]
	030 Move X1, X0
	031 Move X0, X19
	032 Move X2, X31
	033 Call StringBuilder.Append, X0, X1
	034 Move X1, [X22]
	035 Move X0, X19
	036 Move X2, X31
	037 Call StringBuilder.Append, X0, X1
	038 Move V0, [X20]
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 Add X0, X31, 0
	041 Move [X31], V0
	042 Move [X31+12], V1
	043 Call SimulationMessage.DumpContents, X0
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call StringBuilder.Append, X0, X1
	048 Move X8, [X21+40]
	049 Move X9, [X31+40]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+80]
	052 Move X19, [X31+88]
	053 Move X22, [X31+64]
	054 Move X21, [X31+72]
	055 Move X30, [X31+48]
	056 Add X31, X31, 96
	057 Return 
	058 Call 0x1C17F20
	059 Call 0x3EB2B20

