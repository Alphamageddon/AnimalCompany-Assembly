Type: Fusion.Timeline

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x01EBF034 MOV X19, X1
	0x01EBF038 MOV X20, X0
	0x01EBF03C TBNZ X8, 0x0, 0x1EBF060
	0x01EBF040 ADRP X0, 0x2240000
	0x01EBF044 LDR X0, [X0 + 0x8D8]
	0x01EBF048 BL 0x1C16CF4
	0x01EBF04C ADRP X0, 0x2240000
	0x01EBF050 LDR X0, [X0 + 0x8E0]
	0x01EBF054 BL 0x1C16CF4
	0x01EBF058 MOVZ W8, 0x1
	0x01EBF05C STRB W8, [X21 + 0x448]
	0x01EBF060 CBZ X19, 0x1EBF0C4
	0x01EBF064 MOV X0, X19
	0x01EBF068 MOV X1, X31
	0x01EBF06C BL 0x1ECAD70
	0x01EBF070 TBZ X0, 0x0, 0x1EBF0B8
	0x01EBF074 LDR W1, [X19 + 0x10]
	0x01EBF078 STR W31, [X19 + 0x10]
	0x01EBF07C LDR X0, [X20 + 0x10]
	0x01EBF080 CBZ X0, 0x1EBF0C4
	0x01EBF084 ADRP X8, 0x2240000
	0x01EBF088 LDR X8, [X8 + 0x8D8]
	0x01EBF08C LDR X2, [X8]
	0x01EBF090 BL 0x2A14A88
	0x01EBF094 LDR X0, [X20 + 0x18]
	0x01EBF098 CBZ X0, 0x1EBF0C4
	0x01EBF09C ADRP X8, 0x2240000
	0x01EBF0A0 LDR X8, [X8 + 0x8E0]
	0x01EBF0A4 MOV X1, X19
	0x01EBF0A8 LDP X20, X19, [X31 + 0x10]
	0x01EBF0AC LDR X2, [X8]
	0x01EBF0B0 LDP X30, X21, [X31], #0x20
	0x01EBF0B4 B 0x2602314
	0x01EBF0B8 LDP X20, X19, [X31 + 0x10]
	0x01EBF0BC LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x251B000
	008 Move X22, 0x2241000
	009 Move X21, 0x2241000
	010 Move W8, [X23+1087]
	011 Move X22, [X22+2056]
	012 Move X21, [X21+2064]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x2241000
	020 Move X0, [X0+2064]
	021 Call 0x1C17CF4
	022 Move X0, 0x2241000
	023 Move X0, [X0+2056]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+1087], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Call Object..ctor, X0
	030 Move X0, [X22]
	031 Call 0x1C17F10
	032 Move X2, [X21]
	033 Move W1, W20
	034 Move X21, X0
	035 Call RingBuffer`1<TimelinePoint>..ctor, X0, X1
	036 Move [X19+16], X21
	037 Move [X19+24], X31
	038 Move [X19+32], X31
	039 Move [X19+40], X31
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Move X23, [X31+56]
	046 Return 

Method: System.Boolean get_IsEmpty()

Disassembly:
	0x01EBF0C0 RET
	0x01EBF0C4 BL 0x1C16F20
	0x01EBF0C8 SUB X31, X31, 0x70
	0x01EBF0CC STP X30, X23, [X31 + 0x40]
	0x01EBF0D0 STP X22, X21, [X31 + 0x50]
	0x01EBF0D4 STP X20, X19, [X31 + 0x60]
	0x01EBF0D8 ADRP X21, 0x251A000
	0x01EBF0DC LDRB W8, [X21 + 0x449]
	0x01EBF0E0 MOV X20, X1
	0x01EBF0E4 MOV X19, X0
	0x01EBF0E8 TBNZ X8, 0x0, 0x1EBF13C
	0x01EBF0EC ADRP X0, 0x2240000
	0x01EBF0F0 LDR X0, [X0 + 0x8E8]
	0x01EBF0F4 BL 0x1C16CF4
	0x01EBF0F8 ADRP X0, 0x223B000
	0x01EBF0FC LDR X0, [X0 + 0x830]
	0x01EBF100 BL 0x1C16CF4
	0x01EBF104 ADRP X0, 0x223B000
	0x01EBF108 LDR X0, [X0 + 0x838]
	0x01EBF10C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x251B000
	005 Move W8, [X20+1088]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2240000
	012 Move X0, [X0+1168]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1088], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x2240000
	020 Move X8, [X8+1168]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call RingBuffer`1<TimelinePoint>.get_IsEmpty, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x01EBF110 ADRP X0, 0x223B000
	0x01EBF114 LDR X0, [X0 + 0x840]
	0x01EBF118 BL 0x1C16CF4
	0x01EBF11C ADRP X0, 0x223B000
	0x01EBF120 LDR X0, [X0 + 0x678]
	0x01EBF124 BL 0x1C16CF4
	0x01EBF128 ADRP X0, 0x223B000
	0x01EBF12C LDR X0, [X0 + 0x848]
	0x01EBF130 BL 0x1C16CF4
	0x01EBF134 MOVZ W8, 0x1
	0x01EBF138 STRB W8, [X21 + 0x449]
	0x01EBF13C STP X31, X31, [X31 + 0x30]
	0x01EBF140 STP X31, X31, [X31 + 0x20]
	0x01EBF144 CBZ X20, 0x1EBF26C
	0x01EBF148 MOV X0, X20
	0x01EBF14C MOV X1, X31
	0x01EBF150 BL 0x1ED810C
	0x01EBF154 LDR X8, [X19 + 0x20]
	0x01EBF158 CBZ X8, 0x1EBF26C
	0x01EBF15C ADRP X9, 0x2240000
	0x01EBF160 LDR X9, [X9 + 0x8E8]
	0x01EBF164 MOV W20, W0
	0x01EBF168 ADD X2, X31, 0x38

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x251B000
	005 Move W8, [X20+1089]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2241000
	012 Move X0, [X0+2072]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1089], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {30}
	019 Move X8, 0x2241000
	020 Move X8, [X8+2072]
	021 Move X1, [X8]
	022 Call RingBuffer`1<TimelinePoint>.Clear, X0
	023 Move [X19+24], X31
	024 Move [X19+32], X31
	025 Move [X19+40], X31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return 
	030 Call 0x1C17F20

Method: System.Void AddPoint(Fusion.TimelinePoint point, System.Double deltaTime, System.Boolean flag = False)

Disassembly:
	0x01EBF16C MOV X0, X8
	0x01EBF170 LDR X3, [X9]
	0x01EBF174 MOV W1, W20
	0x01EBF178 BL 0x2A150AC
	0x01EBF17C TBZ X0, 0x0, 0x1EBF254
	0x01EBF180 LDR X0, [X31 + 0x38]
	0x01EBF184 CBZ X0, 0x1EBF26C
	0x01EBF188 ADRP X8, 0x223B000
	0x01EBF18C LDR X8, [X8 + 0x848]
	0x01EBF190 LDR X1, [X8]
	0x01EBF194 ADD X8, X31, 0x8
	0x01EBF198 BL 0x2DAAA30
	0x01EBF19C LDUR V0, [X31 + 0x8]
	0x01EBF1A0 LDR X8, [X31 + 0x18]
	0x01EBF1A4 ADRP X23, 0x223B000
	0x01EBF1A8 ADD W9, W20, 0x3F
	0x01EBF1AC STR V0, [X31 + 0x2]
	0x01EBF1B0 STR X8, [X31 + 0x30]
	0x01EBF1B4 LDR X23, [X23 + 0x838]
	0x01EBF1B8 CMP W20, 0x0
	0x01EBF1BC MOVZ W10, 0x1
	0x01EBF1C0 CSEL W9, W9, W20, LT
	0x01EBF1C4 LSLV X10, X10, X20
	0x01EBF1C8 SBFM X21, X9, 0x6, 0x1F
	0x01EBF1CC ORN X22, X31, X10, 0x0
	0x01EBF1D0 LDR X1, [X23]
	0x01EBF1D4 ADD X0, X31, 0x20
	0x01EBF1D8 BL 0x2BBDA6C
	0x01EBF1DC TBZ X0, 0x0, 0x1EBF228
	0x01EBF1E0 LDR W1, [X31 + 0x30]
	0x01EBF1E4 MOV X0, X19
	0x01EBF1E8 MOV W2, W31
	0x01EBF1EC BL 0x1EBEC78
	0x01EBF1F0 MOV X20, X0
	0x01EBF1F4 CBZ X0, 0x1EBF268
	0x01EBF1F8 ADD X8, X20, X21, 0x3, LSL
	0x01EBF1FC LDR X9, [X8 + 0x30]
	0x01EBF200 AND X9, X9, X22, 0x0
	0x01EBF204 STR X9, [X8 + 0x30]
	0x01EBF208 MOV X0, X20
	0x01EBF20C MOV X1, X31
	0x01EBF210 BL 0x1ECAD70
	0x01EBF214 TBZ X0, 0x0, 0x1EBF1D0
	0x01EBF218 MOV X0, X19
	0x01EBF21C MOV X1, X20
	0x01EBF220 BL 0x1EBF024
	0x01EBF224 B 0x1EBF1D0
	0x01EBF228 ADRP X8, 0x223B000
	0x01EBF22C LDR X8, [X8 + 0x830]
	0x01EBF230 ADD X0, X31, 0x20
	0x01EBF234 LDR X1, [X8]
	0x01EBF238 BL 0x2BBDA68
	0x01EBF23C LDR X0, [X31 + 0x38]
	0x01EBF240 CBZ X0, 0x1EBF26C
	0x01EBF244 ADRP X8, 0x223B000
	0x01EBF248 LDR X8, [X8 + 0x678]
	0x01EBF24C LDR X1, [X8]
	0x01EBF250 BL 0x2DAA53C
	0x01EBF254 LDP X20, X19, [X31 + 0x60]
	0x01EBF258 LDP X22, X21, [X31 + 0x50]
	0x01EBF25C LDP X30, X23, [X31 + 0x40]
	0x01EBF260 ADD X31, X31, 0x70
	0x01EBF264 RET
	0x01EBF268 BL 0x1C16F20
	0x01EBF26C BL 0x1C16F20
	0x01EBF270 B 0x1EBF280
	0x01EBF274 B 0x1EBF280
	0x01EBF278 B 0x1EBF280
	0x01EBF27C B 0x1EBF280
	0x01EBF280 MOV X19, X0
	0x01EBF284 CMP W1, 0x1
	0x01EBF288 B.NE 0x1EBF2BC
	0x01EBF28C MOV X0, X19
	0x01EBF290 BL 0x3EB1AD0
	0x01EBF294 LDR X20, [X0]
	0x01EBF298 BL 0x3EB1AE0
	0x01EBF29C ADRP X8, 0x223B000
	0x01EBF2A0 LDR X8, [X8 + 0x830]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x251B000
	009 Move W8, [X23+1090]
	010 Move W22, W3
	011 Move V8, V0
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x2241000
	020 Move X0, [X0+2072]
	021 Call 0x1C17CF4
	022 Move X0, 0x2241000
	023 Move X0, [X0+2080]
	024 Call 0x1C17CF4
	025 Move X0, 0x2241000
	026 Move X0, [X0+2088]
	027 Call 0x1C17CF4
	028 Move X0, 0x2240000
	029 Move X0, [X0+1168]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+1090], W8
	033 Move X23, 0x2241000
	034 Move X23, [X23+2088]
	035 Move TEMP, X22
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {84}
	039 Move X0, [X21+16]
	040 Compare X0, 0
	041 JumpIfEqual {99}
	042 Move X8, 0x2240000
	043 Move X8, [X8+1168]
	044 Move X1, [X8]
	045 Call RingBuffer`1<TimelinePoint>.get_IsEmpty, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {84}
	050 Move W8, [X21+44]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move V0, [X21+24]
	053 Move D1, X19
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 Move X0, [X21+16]
	056 Compare X0, 0
	057 JumpIfEqual {99}
	058 Move X8, 0x2241000
	059 Move X8, [X8+2080]
	060 Move X1, [X8]
	061 Call RingBuffer`1<TimelinePoint>.PopBack, X0
	062 Move X8, [X21+16]
	063 Compare X8, 0
	064 JumpIfEqual {99}
	065 Move X9, 0x2241000
	066 Move X9, [X9+2072]
	067 Move X22, X0
	068 Move X0, X8
	069 Move X1, [X9]
	070 Call RingBuffer`1<TimelinePoint>.Clear, X0
	071 Move X0, [X21+16]
	072 Compare X0, 0
	073 JumpIfEqual {99}
	074 Move X8, X20
	075 ShiftRight X8, 32
	076 And X8, X8, 0x7FFFFFFF
	077 Subtract W8, W8, 1
	078 Move X3, [X23]
	079 NotImplemented "Instruction SCVTF not yet implemented."
	080 Multiply D0, D0, D8
	081 Move X2, D0
	082 Move X1, X22
	083 Call RingBuffer`1<TimelinePoint>.PushBack, X0, X1
	084 Move X0, [X21+16]
	085 Compare X0, 0
	086 JumpIfEqual {99}
	087 Move X3, [X23]
	088 Move X1, X20
	089 Move X2, X19
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X22, [X31+32]
	093 Move X21, [X31+40]
	094 Move X30, [X31+16]
	095 Move X23, [X31+24]
	096 Move V8, [X31+64]
	097 Call RingBuffer`1<TimelinePoint>.PushBack, X0, X1
	098 Return 
	099 Call 0x1C17F20

Method: Fusion.InterpolationParams GetInterpolationParams(System.Double time)

Disassembly:
	0x01EBF2A4 ADD X0, X31, 0x20
	0x01EBF2A8 LDR X1, [X8]
	0x01EBF2AC BL 0x2BBDA68
	0x01EBF2B0 CBZ X20, 0x1EBF23C
	0x01EBF2B4 MOV X0, X20
	0x01EBF2B8 BL 0x1C16F18
	0x01EBF2BC MOV X20, X31
	0x01EBF2C0 B 0x1EBF2C8
	0x01EBF2C4 MOV X19, X0
	0x01EBF2C8 ADRP X8, 0x223B000
	0x01EBF2CC LDR X8, [X8 + 0x830]
	0x01EBF2D0 LDR X1, [X8]
	0x01EBF2D4 ADD X0, X31, 0x20
	0x01EBF2D8 BL 0x2BBDA68
	0x01EBF2DC CBNZ X20, 0x1EBF2E8
	0x01EBF2E0 MOV X0, X19
	0x01EBF2E4 BL 0x1D2C690
	0x01EBF2E8 MOV X0, X20
	0x01EBF2EC BL 0x1C16F18
	0x01EBF2F0 BL 0x1990590
	0x01EBF2F4 SUB X31, X31, 0xA0
	0x01EBF2F8 STP X29, X30, [X31 + 0x40]
	0x01EBF2FC STP X28, X27, [X31 + 0x50]
	0x01EBF300 STP X26, X25, [X31 + 0x60]
	0x01EBF304 STP X24, X23, [X31 + 0x70]
	0x01EBF308 STP X22, X21, [X31 + 0x80]
	0x01EBF30C STP X20, X19, [X31 + 0x90]
	0x01EBF310 ADRP X21, 0x251A000
	0x01EBF314 LDRB W8, [X21 + 0x44A]
	0x01EBF318 MOV X19, X1
	0x01EBF31C MOV X20, X0
	0x01EBF320 TBNZ X8, 0x0, 0x1EBF3BC
	0x01EBF324 ADRP X0, 0x2240000
	0x01EBF328 LDR X0, [X0 + 0x8F0]
	0x01EBF32C BL 0x1C16CF4
	0x01EBF330 ADRP X0, 0x2240000
	0x01EBF334 LDR X0, [X0 + 0x8E8]
	0x01EBF338 BL 0x1C16CF4
	0x01EBF33C ADRP X0, 0x223B000
	0x01EBF340 LDR X0, [X0 + 0x830]
	0x01EBF344 BL 0x1C16CF4
	0x01EBF348 ADRP X0, 0x223B000
	0x01EBF34C LDR X0, [X0 + 0x838]
	0x01EBF350 BL 0x1C16CF4
	0x01EBF354 ADRP X0, 0x223B000
	0x01EBF358 LDR X0, [X0 + 0x840]
	0x01EBF35C BL 0x1C16CF4
	0x01EBF360 ADRP X0, 0x223B000
	0x01EBF364 LDR X0, [X0 + 0x678]
	0x01EBF368 BL 0x1C16CF4
	0x01EBF36C ADRP X0, 0x2235000
	0x01EBF370 LDR X0, [X0 + 0xDF8]
	0x01EBF374 BL 0x1C16CF4
	0x01EBF378 ADRP X0, 0x223B000
	0x01EBF37C LDR X0, [X0 + 0x848]
	0x01EBF380 BL 0x1C16CF4
	0x01EBF384 ADRP X0, 0x223B000
	0x01EBF388 LDR X0, [X0 + 0x680]
	0x01EBF38C BL 0x1C16CF4
	0x01EBF390 ADRP X0, 0x223B000
	0x01EBF394 LDR X0, [X0 + 0x688]
	0x01EBF398 BL 0x1C16CF4
	0x01EBF39C ADRP X0, 0x223B000
	0x01EBF3A0 LDR X0, [X0 + 0x850]
	0x01EBF3A4 BL 0x1C16CF4
	0x01EBF3A8 ADRP X0, 0x2235000
	0x01EBF3AC LDR X0, [X0 + 0xE08]
	0x01EBF3B0 BL 0x1C16CF4
	0x01EBF3B4 MOVZ W8, 0x1
	0x01EBF3B8 STRB W8, [X21 + 0x44A]
	0x01EBF3BC STP X31, X31, [X31 + 0x30]
	0x01EBF3C0 STP X31, X31, [X31 + 0x20]
	0x01EBF3C4 CBZ X19, 0x1EBF6A0
	0x01EBF3C8 LDR X8, [X19 + 0x30]
	0x01EBF3CC CBZ X8, 0x1EBF6A0
	0x01EBF3D0 LDRB W9, [X19 + 0x2C]
	0x01EBF3D4 CBNZ W9, 0x1EBF3E0
	0x01EBF3D8 LDR W8, [X8 + 0x20]
	0x01EBF3DC CBZ W8, 0x1EBF6A0
	0x01EBF3E0 MOV X0, X19
	0x01EBF3E4 MOV X1, X31
	0x01EBF3E8 BL 0x1ED810C
	0x01EBF3EC LDR X8, [X20 + 0x20]
	0x01EBF3F0 CBZ X8, 0x1EBF6CC
	0x01EBF3F4 ADRP X9, 0x2240000
	0x01EBF3F8 LDR X9, [X9 + 0x8E8]
	0x01EBF3FC MOV W22, W0
	0x01EBF400 ADD X2, X31, 0x38
	0x01EBF404 MOV X0, X8
	0x01EBF408 LDR X3, [X9]
	0x01EBF40C MOV W1, W22
	0x01EBF410 BL 0x2A150AC
	0x01EBF414 TBNZ X0, 0x0, 0x1EBF464
	0x01EBF418 ADRP X8, 0x2235000
	0x01EBF41C LDR X21, [X20 + 0x20]
	0x01EBF420 LDR X8, [X8 + 0xE08]
	0x01EBF424 LDR X0, [X8]
	0x01EBF428 BL 0x1C16F10
	0x01EBF42C ADRP X8, 0x223B000
	0x01EBF430 LDR X8, [X8 + 0x688]
	0x01EBF434 MOV X23, X0
	0x01EBF438 LDR X1, [X8]
	0x01EBF43C BL 0x2DA9EF4
	0x01EBF440 STR X23, [X31 + 0x38]
	0x01EBF444 CBZ X21, 0x1EBF6CC
	0x01EBF448 ADRP X8, 0x2240000
	0x01EBF44C LDR X8, [X8 + 0x8F0]
	0x01EBF450 MOV X0, X21
	0x01EBF454 MOV W1, W22
	0x01EBF458 MOV X2, X23
	0x01EBF45C LDR X3, [X8]
	0x01EBF460 BL 0x2A1368C
	0x01EBF464 MOVZ W8, 0x1
	0x01EBF468 STRB W8, [X19 + 0x2C]
	0x01EBF46C LDR X0, [X31 + 0x38]
	0x01EBF470 CBZ X0, 0x1EBF6CC
	0x01EBF474 ADRP X27, 0x223B000
	0x01EBF478 LDR X21, [X19 + 0x30]
	0x01EBF47C LDR X27, [X27 + 0x848]
	0x01EBF480 ADD X8, X31, 0x8
	0x01EBF484 LDR X1, [X27]
	0x01EBF488 BL 0x2DAAA30
	0x01EBF48C LDUR V0, [X31 + 0x8]
	0x01EBF490 LDR X8, [X31 + 0x18]
	0x01EBF494 ADRP X23, 0x223B000
	0x01EBF498 LDR X23, [X23 + 0x838]
	0x01EBF49C STR V0, [X31 + 0x2]
	0x01EBF4A0 STR X8, [X31 + 0x30]
	0x01EBF4A4 ADRP X26, 0x2235000
	0x01EBF4A8 LDR X26, [X26 + 0xDF8]
	0x01EBF4AC ADD W9, W22, 0x3F
	0x01EBF4B0 CMP W22, 0x0
	0x01EBF4B4 MOVZ W10, 0x1
	0x01EBF4B8 CSEL W9, W9, W22, LT
	0x01EBF4BC LSLV X24, X10, X22
	0x01EBF4C0 MOV W28, W31
	0x01EBF4C4 SBFM X25, X9, 0x6, 0x1F
	0x01EBF4C8 ORN X29, X31, X24, 0x0
	0x01EBF4CC LDR X1, [X23]
	0x01EBF4D0 ADD X0, X31, 0x20
	0x01EBF4D4 BL 0x2BBDA6C
	0x01EBF4D8 TBZ X0, 0x0, 0x1EBF57C
	0x01EBF4DC CBZ X21, 0x1EBF6C0
	0x01EBF4E0 LDR W22, [X31 + 0x30]
	0x01EBF4E4 LDR X2, [X26]
	0x01EBF4E8 MOV X0, X21
	0x01EBF4EC MOV W1, W22
	0x01EBF4F0 BL 0x2DAA59C
	0x01EBF4F4 TBNZ X0, 0x0, 0x1EBF4CC
	0x01EBF4F8 MOV X0, X20
	0x01EBF4FC MOV W1, W22
	0x01EBF500 MOV W2, W31
	0x01EBF504 BL 0x1EBEC78
	0x01EBF508 MOV X22, X0
	0x01EBF50C MOVZ W28, 0x1
	0x01EBF510 CBZ X0, 0x1EBF4CC
	0x01EBF514 ADD X8, X22, X25, 0x3, LSL
	0x01EBF518 LDR X9, [X8 + 0x30]
	0x01EBF51C AND X9, X9, X29, 0x0
	0x01EBF520 STR X9, [X8 + 0x30]
	0x01EBF524 LDR X8, [X22 + 0x20]
	0x01EBF528 CBZ X8, 0x1EBF554
	0x01EBF52C LDR X28, [X8 + 0x80]
	0x01EBF530 MOV X0, X8
	0x01EBF534 MOV X1, X31
	0x01EBF538 BL 0x1E97370
	0x01EBF53C AND X2, X0, 0x0
	0x01EBF540 MOV X0, X20
	0x01EBF544 MOV X1, X19
	0x01EBF548 BL 0x1EBF7EC
	0x01EBF54C MOV X8, X28
	0x01EBF550 B 0x1EBF528
	0x01EBF554 MOV X0, X22
	0x01EBF558 MOV X1, X31
	0x01EBF55C BL 0x1ECAD70
	0x01EBF560 MOVZ W28, 0x1
	0x01EBF564 TBZ X0, 0x0, 0x1EBF4CC
	0x01EBF568 MOVZ W28, 0x1
	0x01EBF56C MOV X0, X20
	0x01EBF570 MOV X1, X22
	0x01EBF574 BL 0x1EBF024
	0x01EBF578 B 0x1EBF4CC
	0x01EBF57C ADRP X8, 0x223B000
	0x01EBF580 LDR X8, [X8 + 0x830]
	0x01EBF584 ADD X0, X31, 0x20
	0x01EBF588 LDR X1, [X8]
	0x01EBF58C BL 0x2BBDA68
	0x01EBF590 TBZ X28, 0x0, 0x1EBF59C
	0x01EBF594 CBNZ X21, 0x1EBF5B8
	0x01EBF598 B 0x1EBF6CC
	0x01EBF59C LDR X8, [X31 + 0x38]
	0x01EBF5A0 CBZ X8, 0x1EBF6CC
	0x01EBF5A4 CBZ X21, 0x1EBF6CC
	0x01EBF5A8 LDR W8, [X8 + 0x20]
	0x01EBF5AC LDR W9, [X21 + 0x20]
	0x01EBF5B0 CMP W8, W9
	0x01EBF5B4 B.EQ 0x1EBF6A0
	0x01EBF5B8 LDR X1, [X27]
	0x01EBF5BC ADD X8, X31, 0x8
	0x01EBF5C0 MOV X0, X21
	0x01EBF5C4 BL 0x2DAAA30
	0x01EBF5C8 LDUR V0, [X31 + 0x8]
	0x01EBF5CC LDR X8, [X31 + 0x18]
	0x01EBF5D0 STR V0, [X31 + 0x2]
	0x01EBF5D4 STR X8, [X31 + 0x30]
	0x01EBF5D8 LDR X1, [X23]
	0x01EBF5DC ADD X0, X31, 0x20
	0x01EBF5E0 BL 0x2BBDA6C
	0x01EBF5E4 TBZ X0, 0x0, 0x1EBF658
	0x01EBF5E8 LDR X0, [X31 + 0x38]
	0x01EBF5EC CBZ X0, 0x1EBF6C4
	0x01EBF5F0 LDR W22, [X31 + 0x30]
	0x01EBF5F4 LDR X2, [X26]
	0x01EBF5F8 MOV W1, W22
	0x01EBF5FC BL 0x2DAA59C
	0x01EBF600 TBNZ X0, 0x0, 0x1EBF5D8
	0x01EBF604 MOVZ W2, 0x1
	0x01EBF608 MOV X0, X20
	0x01EBF60C MOV W1, W22
	0x01EBF610 BL 0x1EBEC78
	0x01EBF614 CBZ X0, 0x1EBF6C8
	0x01EBF618 ADD X8, X0, X25, 0x3, LSL
	0x01EBF61C LDR X9, [X8 + 0x30]
	0x01EBF620 ORR X9, X9, X24, 0x0
	0x01EBF624 STR X9, [X8 + 0x30]

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x251B000
	011 Move W9, [X20+1091]
	012 Move V8, V0
	013 Move X21, X0
	014 Move X19, X8
	015 Move TEMP, X9
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x223C000
	020 Move X0, [X0+3176]
	021 Call 0x1C17CF4
	022 Move X0, 0x2240000
	023 Move X0, [X0+1160]
	024 Call 0x1C17CF4
	025 Move X0, 0x2241000
	026 Move X0, [X0+2096]
	027 Call 0x1C17CF4
	028 Move X0, 0x2241000
	029 Move X0, [X0+2104]
	030 Call 0x1C17CF4
	031 Move X0, 0x2240000
	032 Move X0, [X0+1168]
	033 Call 0x1C17CF4
	034 Move X0, 0x2241000
	035 Move X0, [X0+2112]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+1091], W8
	039 Move X0, [X21+16]
	040 Compare X0, 0
	041 JumpIfEqual {175}
	042 Move X8, 0x2240000
	043 Move X8, [X8+1168]
	044 Move X1, [X8]
	045 Call RingBuffer`1<TimelinePoint>.get_IsEmpty, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {53}
	050 Move [X19], D8
	051 Move [X19+8], X31
	052 Move [X19+16], X31
	053 Move X0, [X21+16]
	054 Compare X0, 0
	055 JumpIfEqual {176}
	056 Move X22, 0x2241000
	057 Move X22, [X22+2096]
	058 Move X1, [X22]
	059 Call RingBuffer`1<TimelinePoint>.Front, X0
	060 Move X8, X0
	061 Move X0, [X21+16]
	062 Compare X0, 0
	063 JumpIfEqual {177}
	064 Move X23, 0x2240000
	065 Move V9, [X8+8]
	066 Move X23, [X23+1160]
	067 Move X1, [X23]
	068 Call RingBuffer`1<TimelinePoint>.Back, X0
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Move V0, [X0+8]
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 Move X23, 0x2241000
	073 Move X23, [X23+2112]
	074 Move TEMP, 0
	075 Not TEMP
	076 Move W22, TEMP
	077 Move X0, [X21+16]
	078 Compare X0, 0
	079 JumpIfEqual {173}
	080 Move W8, [X0+28]
	081 Add W1, W22, 1
	082 Subtract W8, W8, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X2, [X23]
	085 Call RingBuffer`1<TimelinePoint>.get_Item, X0, X1
	086 Move X0, [X21+16]
	087 Compare X0, 0
	088 JumpIfEqual {174}
	089 Move X2, [X23]
	090 Move X20, X1
	091 Add W1, W22, 2
	092 Call RingBuffer`1<TimelinePoint>.get_Item, X0, X1
	093 Move D9, X20
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Add W22, W22, 1
	096 Move D10, X1
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 Move X0, [X21+16]
	099 Compare X0, 0
	100 JumpIfEqual {182}
	101 Move X2, [X23]
	102 Move W1, W22
	103 Call RingBuffer`1<TimelinePoint>.get_Item, X0, X1
	104 Move X20, X0
	105 Move X0, [X21+16]
	106 Compare X0, 0
	107 JumpIfEqual {183}
	108 Move X2, [X23]
	109 Add W1, W22, 1
	110 Call RingBuffer`1<TimelinePoint>.get_Item, X0, X1
	111 Move X8, 0x223C000
	112 Move X8, [X8+3176]
	113 Move X21, X0
	114 Move X0, [X8]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Subtract D0, D8, D9
	120 Subtract D1, D10, D9
	121 NotImplemented "Instruction FDIV not yet implemented."
	122 Move X0, X31
	123 Call Maths.Clamp01, V0
	124 Move W8, W31
	125 NotImplemented "Instruction INVALID not yet implemented."
	126 Move X0, [X21+16]
	127 Compare X0, 0
	128 JumpIfEqual {178}
	129 Move X1, [X22]
	130 Call RingBuffer`1<TimelinePoint>.Front, X0
	131 Move X8, X0
	132 Move X0, [X21+16]
	133 Move W20, [X8]
	134 Compare X0, 0
	135 JumpIfEqual {179}
	136 Move X1, [X22]
	137 Call RingBuffer`1<TimelinePoint>.Front, X0
	138 Move W21, [X0]
	139 Move W8, 2
	140 Move X0, [X21+16]
	141 Compare X0, 0
	142 JumpIfEqual {180}
	143 Move X1, [X23]
	144 Call RingBuffer`1<TimelinePoint>.Back, X0
	145 Move X8, X0
	146 Move X0, [X21+16]
	147 Move W20, [X8]
	148 Compare X0, 0
	149 JumpIfEqual {181}
	150 Move X1, [X23]
	151 Call RingBuffer`1<TimelinePoint>.Back, X0
	152 Move W21, [X0]
	153 Move W8, 1
	154 Move W20, W31
	155 Move W21, W31
	156 Move W8, W31
	157 Move S0, W31
	158 Move [X19], D8
	159 Move [X19+8], W20
	160 Move [X19+12], W21
	161 Move [X19+16], S0
	162 Move [X19+20], W8
	163 Move X20, [X31+64]
	164 Move X19, [X31+72]
	165 Move X22, [X31+48]
	166 Move X21, [X31+56]
	167 Move X30, [X31+32]
	168 Move X23, [X31+40]
	169 Move D9, [X31+16]
	170 Move D8, [X31+24]
	171 Move V10, [X31+80]
	172 Return X0
	173 Call 0x1C17F20
	174 Call 0x1C17F20
	175 Call 0x1C17F20
	176 Call 0x1C17F20
	177 Call 0x1C17F20
	178 Call 0x1C17F20
	179 Call 0x1C17F20
	180 Call 0x1C17F20
	181 Call 0x1C17F20
	182 Call 0x1C17F20
	183 Call 0x1C17F20
	184 Move X22, X0
	185 Move X22, X0
	186 Move X22, X0
	187 Move W20, W31
	188 Move W21, W31
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X0, X22
	191 Call 0x3EB2AD0
	192 Move X22, X0
	193 Move X0, 0x2235000
	194 Move X0, [X0+2000]
	195 Call 0x1C17D08
	196 Move X8, [X22]
	197 Move X1, [X8]
	198 Call 0x1C18270
	199 Move TEMP, X0
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfNotEqual {215}
	203 Move X22, [X22]
	204 Call 0x3EB2AE0
	205 Move X0, 0x223D000
	206 Move X0, [X0+2224]
	207 Call 0x1C17D08
	208 Move W8, [X0+224]
	209 Compare W8, 0
	210 JumpIfNotEqual {212}
	211 Call 0x1C17DFC
	212 Move X0, X22
	213 Move X1, X31
	214 Call Log.Exception, X0
	215 Move W0, 8
	216 Call 0x3EB2AF0
	217 Move X8, [X22]
	218 Move [X0], X8
	219 Move X1, 0x1FF6000
	220 Add X1, X1, 3672
	221 Move X2, X31
	222 Call 0x3EB2B00
	223 Move X22, X0
	224 Call 0x3EB2AE0
	225 Move X0, X22
	226 Call 0x1D2D690
	227 Call 0x1991590

Method: System.Void UpdateInterpolationParams(System.Double time)

Disassembly:
	0x01EBF628 LDR X8, [X0 + 0x20]
	0x01EBF62C CBZ X8, 0x1EBF5D8
	0x01EBF630 LDR X22, [X8 + 0x80]
	0x01EBF634 MOV X0, X8
	0x01EBF638 MOV X1, X31
	0x01EBF63C BL 0x1E97370
	0x01EBF640 AND X2, X0, 0x0
	0x01EBF644 MOV X0, X20
	0x01EBF648 MOV X1, X19
	0x01EBF64C BL 0x1EBF948
	0x01EBF650 MOV X8, X22
	0x01EBF654 B 0x1EBF62C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Add X8, X31, 8
	005 Move X19, X0
	006 Call Timeline.GetInterpolationParams, X0, V0
	007 Move X8, [X31+24]
	008 NotImplemented "Instruction LDUR not yet implemented."
	009 Move [X19+40], X8
	010 Move [X19+24], V0
	011 Move X30, [X31+32]
	012 Move X19, [X31+40]
	013 Add X31, X31, 48
	014 Return 

