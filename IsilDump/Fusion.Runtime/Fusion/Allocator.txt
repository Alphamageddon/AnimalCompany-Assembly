Type: Fusion.Allocator

Method: Fusion.Allocator/Config get_Configuration()

Disassembly:
	0x01E6694C STR X31, [X2]
	0x01E66950 LDR X30, [X31], #0x10
	0x01E66954 RET
	0x01E66958 BL 0x1C16F20

ISIL:
	001 Move X8, [X0+88]
	002 Move W1, [X0+96]
	003 Move X0, X8
	004 Return X0

Method: Fusion.Ptr Meta(System.Void* p)

Disassembly:
	0x01E6695C STP X30, X21, [X31 - 0x20]!
	0x01E66960 STP X20, X19, [X31 + 0x10]
	0x01E66964 LDR W8, [X1]

ISIL:
	001 Move W8, [X0]
	002 Subtract W0, W1, W8
	003 Return X0

Method: System.Void* Meta(Fusion.Ptr ptr)

Disassembly:
	0x01E66968 LDR W9, [X0]
	0x01E6696C MOV X21, X2
	0x01E66970 SUB W8, W21, W8

ISIL:
	001 Move X8, [X0]
	002 Add X0, X8, W1
	003 Return X0

Method: System.Int32 GetReplicateWordOffset(System.Void* ptr)

Disassembly:
	0x01E66974 CMP W9, W8
	0x01E66978 B.NE 0x1E66988
	0x01E6697C LDP X20, X19, [X31 + 0x10]
	0x01E66980 LDP X30, X21, [X31], #0x20
	0x01E66984 RET
	0x01E66988 MOV X2, X21
	0x01E6698C MOV X19, X1
	0x01E66990 MOV X20, X0
	0x01E66994 BL 0x1E668DC
	0x01E66998 MOV X0, X20

ISIL:
	001 Move X8, [X0]
	002 Move X9, [X0+40]
	003 Subtract W10, W1, W8
	004 Subtract X8, X8, X9
	005 Add X8, X8, W10
	006 Add X9, X8, 3
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move X0, X8
	010 ShiftRight X0, 2
	011 And X0, X0, 0x7FFFFFFF
	012 Return X0

Method: System.Int32 GetReplicateWordOffset(Fusion.Ptr ptr)

Disassembly:
	0x01E6699C MOV X1, X19
	0x01E669A0 LDP X20, X19, [X31 + 0x10]
	0x01E669A4 MOV X2, X21
	0x01E669A8 LDP X30, X21, [X31], #0x20
	0x01E669AC B 0x1E6670C
	0x01E669B0 STR X30, [X31 - 0x10]!
	0x01E669B4 LDR X8, [X0 + 0x50]
	0x01E669B8 ADDS X8, X8, W1, 0x3, SXTW
	0x01E669BC B.EQ 0x1E66A1C

ISIL:
	001 Move X8, [X0]
	002 Move X9, [X0+40]
	003 Add X8, X8, W1
	004 Subtract X8, X8, X9
	005 Add X9, X8, 3
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move X0, X8
	009 ShiftRight X0, 2
	010 And X0, X0, 0x7FFFFFFF
	011 Return X0

Method: Fusion.Ptr Ptr(System.Void* p)

Disassembly:
	0x01E669C0 LDR W11, [X8]
	0x01E669C4 CBZ W11, 0x1E66A14
	0x01E669C8 LDR X10, [X0 + 0x40]

ISIL:
	001 Move W8, [X0]
	002 Subtract W0, W1, W8
	003 Return X0

Method: System.Void* Ptr(Fusion.Ptr ptr)

Disassembly:
	0x01E669CC LDR X9, [X0]
	0x01E669D0 MOV W8, W31
	0x01E669D4 ADD X10, X10, W1, 0x4, SXTW

ISIL:
	001 Move X8, [X0]
	002 Add X0, X8, W1
	003 Return X0

Method: T* Ptr(Fusion.Ptr ptr)

Disassembly:
	0x0227AA64 MOV W1, W31
	0x0227AA68 MOV X2, X23
	0x0227AA6C BL 0x3EB1B10

ISIL:
	001 Move X8, [X0]
	002 Add X0, X8, W1
	003 Return X0

Method: System.Boolean IsPointerInMeta(System.Void* p)

Disassembly:
	0x01E669D8 ADD X11, X9, W11, SXTW
	0x01E669DC MOV W12, W8
	0x01E669E0 MOV W8, W12
	0x01E669E4 TBNZ X12, 0x0, 0x1E66A08
	0x01E669E8 CBZ X11, 0x1E66A1C
	0x01E669EC CBZ X10, 0x1E66A1C
	0x01E669F0 LDR W12, [X11 + 0x14]
	0x01E669F4 LDR W13, [X10 + 0xC]
	0x01E669F8 CMP W12, W13

ISIL:
	001 Move X8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W0, W31
	004 Return X0
	005 Move X8, [X0+8]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.Boolean IsPointerInHeap(System.Void* p)

Disassembly:
	0x01E669FC MOVZ W12, 0x1
	0x01E66A00 B.EQ 0x1E669E0
	0x01E66A04 B 0x1E66A0C
	0x01E66A08 CBZ X11, 0x1E66A1C
	0x01E66A0C LDR W11, [X11 + 0x4]
	0x01E66A10 CBNZ W11, 0x1E669D8
	0x01E66A14 LDR X30, [X31], #0x10
	0x01E66A18 RET
	0x01E66A1C BL 0x1C16F20
	0x01E66A20 CBZ X0, 0x1E66A2C
	0x01E66A24 MOV X1, X31

ISIL:
	001 Move X8, [X0+8]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W0, W31
	004 Return X0
	005 Move W9, [X0+88]
	006 Move W10, [X0+92]
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 Add X8, X8, W9
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0

Method: System.Int32 WordCount(System.Int32 size)

Disassembly:
	0x01E66A34 STR X30, [X31 + 0x90]
	0x01E66A38 STP X26, X25, [X31 + 0xA0]
	0x01E66A3C STP X24, X23, [X31 + 0xB0]

ISIL:
	001 Add W8, W0, 7
	002 NotImplemented "Instruction SBFM not yet implemented."
	003 Return X0

Method: Fusion.Allocator/Bucket* GetBucket(System.Int32 index)

Disassembly:
	0x01E66A40 STP X22, X21, [X31 + 0xC0]
	0x01E66A44 STP X20, X19, [X31 + 0xD0]
	0x01E66A48 ADRP X19, 0x2573000

ISIL:
	001 Move X8, [X0+64]
	002 Add X0, X8, W1
	003 Return X0

Method: Fusion.Allocator/Bucket* GetBucketForBlock(Fusion.Allocator/Block* block)

Disassembly:
	0x01E66A4C LDRB W8, [X19 + 0xFB]
	0x01E66A50 MOV X21, X1
	0x01E66A54 MOV X22, X0
	0x01E66A58 UBFM X23, X0, 0x20, 0x3F
	0x01E66A5C TBNZ X8, 0x0, 0x1E66A74
	0x01E66A60 ADRP X0, 0x2296000
	0x01E66A64 LDR X0, [X0 + 0xE00]
	0x01E66A68 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {9}
	004 NotImplemented "Instruction LDRSW not yet implemented."
	005 Move X9, [X0+64]
	006 Add X0, X9, X8
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: Fusion.Allocator/BlockList* GetBucketList(System.Int32 index)

Disassembly:
	0x01E66A6C MOVZ W8, 0x1
	0x01E66A70 STRB W8, [X19 + 0xFB]
	0x01E66A74 MOVZ W8, 0x1

ISIL:
	001 Move X8, [X0+80]
	002 Add X0, X8, W1
	003 Return X0

Method: Fusion.Allocator/Block* GetBlock(System.Int32 index)

Disassembly:
	0x01E66A78 LSLV W8, W8, W22
	0x01E66A7C LSLV W9, W23, W22
	0x01E66A80 MOVZ W10, 0x1C
	0x01E66A84 ADD W24, W8, 0x7

ISIL:
	001 Move X8, [X0+48]
	002 Move W9, 28
	003 NotImplemented "Instruction SMADDL not yet implemented."
	004 Return X0

Method: Fusion.Allocator/Block* GetBlock(System.Int64 index)

Disassembly:
	0x01E66A88 ADD W7, W9, 0x8
	0x01E66A8C SBFM W20, W24, 0x3, 0x1F
	0x01E66A90 MUL W5, W23, W10
	0x01E66A94 MOVZ W8, 0x8

ISIL:
	001 Move X8, [X0+48]
	002 Move W9, 28
	003 NotImplemented "Instruction MADD not yet implemented."
	004 Return X0

Method: System.Int32 GetBlockBucket(System.Int64 index)

Disassembly:
	0x01E66A98 ADD X9, X31, 0x58
	0x01E66A9C ADD X10, X31, 0x60
	0x01E66AA0 ADD X11, X31, 0x68
	0x01E66AA4 ADD X12, X31, 0x70
	0x01E66AA8 ADD X13, X31, 0x78
	0x01E66AAC ADD X14, X31, 0x80
	0x01E66AB0 STR W8, [X31 + 0x40]
	0x01E66AB4 ADD X8, X31, 0x88
	0x01E66AB8 STP X10, X9, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+48]
	003 Move W9, 28
	004 NotImplemented "Instruction MADD not yet implemented."
	005 Compare X8, 0
	006 JumpIfEqual {10}
	007 Move W0, [X8+8]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: Fusion.Allocator/Block* GetBlockForPointer(System.Void* ptr)

Disassembly:
	0x01E66ABC ADD X9, X31, 0x98
	0x01E66AC0 MOVZ W0, 0x70
	0x01E66AC4 MOVZ W2, 0x390
	0x01E66AC8 MOVZ W3, 0x1C8
	0x01E66ACC MOVZ W4, 0x8
	0x01E66AD0 MOV W1, W20
	0x01E66AD4 MOV W6, W21
	0x01E66AD8 STR X31, [X31 + 0x98]

ISIL:
	001 Move X8, [X0+8]
	002 Move W9, [X0+88]
	003 Move X10, [X0+48]
	004 Subtract X8, X1, X8
	005 NotImplemented "Instruction ASRV not yet implemented."
	006 Move W9, 28
	007 NotImplemented "Instruction MADD not yet implemented."
	008 Return X0

Method: System.Int32 GetBlockIndexForPointer(System.Void* ptr)

Disassembly:
	0x01E66ADC STP X31, X31, [X31 + 0x80]
	0x01E66AE0 STP X31, X31, [X31 + 0x70]
	0x01E66AE4 STP X31, X31, [X31 + 0x60]
	0x01E66AE8 STR X31, [X31 + 0x58]
	0x01E66AEC STR X31, [X31 + 0x48]

ISIL:
	001 Move X8, [X0+8]
	002 Move W9, [X0+88]
	003 Subtract X8, X1, X8
	004 NotImplemented "Instruction ASRV not yet implemented."
	005 Return X0

Method: System.Byte* GetBlockMemory(Fusion.Allocator/Block* block)

Disassembly:
	0x01E66AF0 STP X12, X11, [X31 + 0x20]
	0x01E66AF4 STP X14, X13, [X31 + 0x10]
	0x01E66AF8 STP X9, X8, [X31]
	0x01E66AFC BL 0x1E365F0
	0x01E66B00 LDR X19, [X31 + 0x98]
	0x01E66B04 CBZ X19, 0x1E66CB0
	0x01E66B08 STR W21, [X19 + 0x60]
	0x01E66B0C STR X19, [X19]
	0x01E66B10 LDR X9, [X31 + 0x60]
	0x01E66B14 LDR X12, [X31 + 0x68]
	0x01E66B18 ADD X10, X19, W0, UXTW
	0x01E66B1C ADRP X21, 0x2296000
	0x01E66B20 MOVZ W1, 0x8
	0x01E66B24 STP X12, X9, [X19 + 0x10]
	0x01E66B28 LDR X9, [X31 + 0x88]

ISIL:
	001 Move X8, [X0+48]
	002 Move X9, 0x4925
	003 NotImplemented "Instruction MOVK not yet implemented."
	004 NotImplemented "Instruction MOVK not yet implemented."
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 Move W11, [X0+88]
	007 Subtract X8, X1, X8
	008 Move X10, [X0+8]
	009 NotImplemented "Instruction SMULH not yet implemented."
	010 Move X9, X8
	011 ShiftRight X9, 63
	012 And X9, X9, 0x7FFFFFFF
	013 Move X8, X8
	014 ShiftRight X8, 3
	015 And X8, X8, 0x7FFFFFFF
	016 Add W8, W8, W9
	017 NotImplemented "Instruction LSLV not yet implemented."
	018 Add X0, X10, W8
	019 Return X0

Method: System.Byte* GetBlockMemory(System.Int64 blockIndex)

Disassembly:
	0x01E66B3C SUB W10, W10, W11
	0x01E66B40 STP X9, X11, [X19 + 0x20]
	0x01E66B44 STR W10, [X19 + 0x6C]
	0x01E66B48 LDR X10, [X31 + 0x80]
	0x01E66B4C STP X11, X22, [X19 + 0x50]
	0x01E66B50 STP X10, X9, [X19 + 0x40]
	0x01E66B54 LDR X8, [X31 + 0x70]

ISIL:
	001 Move W8, [X0+88]
	002 Move X9, [X0+8]
	003 Move W10, 1
	004 NotImplemented "Instruction LSLV not yet implemented."
	005 Move X8, W8
	006 NotImplemented "Instruction MADD not yet implemented."
	007 Return X0

Method: System.Boolean TryGetSegmentRoot(System.Void* ptr, out System.Void* root)

Disassembly:
	0x01E66B58 STP X12, X8, [X19 + 0x30]
	0x01E66B5C LDR X0, [X31 + 0x58]
	0x01E66B60 LDR X21, [X21 + 0xE00]
	0x01E66B64 BL 0x1E35B10
	0x01E66B68 MOV X22, X31
	0x01E66B6C MOV X25, X31
	0x01E66B70 STR X0, [X19 + 0x8]
	0x01E66B74 LDR X0, [X21]
	0x01E66B78 LDR W8, [X0 + 0xE0]
	0x01E66B7C CBNZ W8, 0x1E66B88
	0x01E66B80 BL 0x1C16DFC
	0x01E66B84 LDR X0, [X21]
	0x01E66B88 LDR X8, [X0 + 0xB8]
	0x01E66B8C LDR X8, [X8]
	0x01E66B90 CBZ X8, 0x1E66CB0
	0x01E66B94 LDRSW X9, [X8 + 0x18]
	0x01E66B98 CMP X25, X9
	0x01E66B9C B.GE 0x1E66C08
	0x01E66BA0 LDR W9, [X0 + 0xE0]
	0x01E66BA4 LDR X26, [X19 + 0x40]
	0x01E66BA8 CBNZ W9, 0x1E66BC0
	0x01E66BAC BL 0x1C16DFC
	0x01E66BB0 LDR X8, [X21]
	0x01E66BB4 LDR X8, [X8 + 0xB8]
	0x01E66BB8 LDR X8, [X8]
	0x01E66BBC CBZ X8, 0x1E66CB0
	0x01E66BC0 LDR W9, [X8 + 0x18]
	0x01E66BC4 CMP X25, X9
	0x01E66BC8 B.CS 0x1E66CB4
	0x01E66BCC ADD X8, X8, X25, 0x2, LSL
	0x01E66BD0 LDR W8, [X8 + 0x20]
	0x01E66BD4 CMP W8, 0x1
	0x01E66BD8 B.LT 0x1E66BE4
	0x01E66BDC SDIV W9, W20, W8
	0x01E66BE0 B 0x1E66BE8
	0x01E66BE4 MOV W9, W31
	0x01E66BE8 UBFM W10, W8, 0x1D, 0x1C
	0x01E66BEC BFM X8, X9, 0x20, 0x1F

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+8]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, [X0+88]
	005 Move W10, [X0+92]
	006 NotImplemented "Instruction LSLV not yet implemented."
	007 Add X10, X8, W10
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X11, [X0+48]
	010 Subtract X10, X1, X8
	011 NotImplemented "Instruction ASRV not yet implemented."
	012 Move W12, 28
	013 NotImplemented "Instruction MADD not yet implemented."
	014 Compare X11, 0
	015 JumpIfEqual {36}
	016 Move X12, [X0+64]
	017 NotImplemented "Instruction LDRSW not yet implemented."
	018 Add X11, X12, X11
	019 And X9, X9, 31
	020 Move W12, 1
	021 NotImplemented "Instruction LDRSW not yet implemented."
	022 NotImplemented "Instruction LSLV not yet implemented."
	023 Move X9, W9
	024 NotImplemented "Instruction MADD not yet implemented."
	025 Subtract X8, X1, X8
	026 NotImplemented "Instruction SDIV not yet implemented."
	027 Subtract X8, X31, X8
	028 NotImplemented "Instruction MADD not yet implemented."
	029 Add X8, X1, X8
	030 Move W0, 1
	031 Move X8, X31
	032 Move W0, W31
	033 Move [X2], X8
	034 Move X30, [X31+16]
	035 Return X0
	036 Call 0x1C17F20

Method: System.Void* GetSegmentRoot(System.Void* ptr)

Disassembly:
	0x01E66BF0 ADD X9, X22, X26
	0x01E66BF4 ORR X10, X25, X10, 0x20
	0x01E66BF8 ADD X25, X25, 0x1
	0x01E66BFC ADD X22, X22, 0x10
	0x01E66C00 STP X10, X8, [X9]
	0x01E66C04 B 0x1E66B74
	0x01E66C08 CMP W24, 0x8
	0x01E66C0C B.LT 0x1E66C4C
	0x01E66C10 CMP W20, 0x1
	0x01E66C14 MOV X8, X31
	0x01E66C18 MOV W9, W31
	0x01E66C1C CSINC W10, W20, W31, GT
	0x01E66C20 LDR X11, [X19 + 0x40]
	0x01E66C24 ADDS X11, X11, W9, 0x4, UXTB
	0x01E66C28 B.EQ 0x1E66CB0
	0x01E66C2C LDRSW X11, [X11 + 0x8]
	0x01E66C30 LDR X12, [X19 + 0x48]
	0x01E66C34 CMP X8, X11
	0x01E66C38 CINC W9, W9, GT
	0x01E66C3C STRB W9, [X8, X12, LSL]
	0x01E66C40 ADD X8, X8, 0x1
	0x01E66C44 CMP X10, X8
	0x01E66C48 B.NE 0x1E66C20
	0x01E66C4C CMP W23, 0x1
	0x01E66C50 B.LT 0x1E66C90
	0x01E66C54 MOV X20, X31
	0x01E66C58 MOV X21, X31
	0x01E66C5C MOVZ W22, 0xFF
	0x01E66C60 LDR X8, [X19 + 0x30]
	0x01E66C64 ADDS X2, X20, X8
	0x01E66C68 B.EQ 0x1E66CB0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2574000
	007 Move W8, [X21+246]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2297000
	015 Move X0, [X0+3504]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+246], W8
	019 Add X2, X31, 8
	020 Move X0, X20
	021 Move X1, X19
	022 Move [X31+8], X31
	023 Call Allocator.TryGetSegmentRoot, X0, X1, X2
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {29}
	028 Move X0, [X31+8]
	029 Move X8, 0x2297000
	030 Move X8, [X8+3504]
	031 Move X1, X31
	032 Move X0, [X8]
	033 Call Assert.AlwaysFail, X0
	034 Move X0, X31
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Add X31, X31, 48
	040 Return X0

Method: T* AllocArray(Fusion.Allocator* s, System.Int32 length)

Disassembly:
	0x0227A7E8 MOV X0, X21
	0x0227A7EC MOV X1, X20
	0x0227A7F0 MOV X2, X19
	0x0227A7F4 LDP X20, X19, [X31 + 0x20]
	0x0227A7F8 LDP X22, X21, [X31 + 0x10]
	0x0227A7FC LDR X30, [X31], #0x30
	0x0227A800 B 0x227FFFC
	0x0227A804 STR X30, [X31 - 0x30]!
	0x0227A808 STP X22, X21, [X31 + 0x10]
	0x0227A80C STP X20, X19, [X31 + 0x20]
	0x0227A810 LDR X8, [X3 + 0x38]
	0x0227A814 MOV X19, X2
	0x0227A818 MOV X20, X1
	0x0227A81C MOV X21, X0
	0x0227A820 CBNZ X8, 0x227A834
	0x0227A824 MOV X0, X3
	0x0227A828 MOV X22, X3
	0x0227A82C BL 0x1C5C6E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move W19, W1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X2
	011 Move X21, X2
	012 Call 0x1C5D6E0
	013 Move X8, [X21+56]
	014 Move X8, [X8]
	015 Move X0, X20
	016 Move X2, X31
	017 Move W8, [X8+252]
	018 Multiply W1, W8, W19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Call Allocator.Alloc, X0, X1
	024 Return X0

Method: T* AllocAndClearArray(Fusion.Allocator* s, System.Int32 length)

Disassembly:
	0x0227A794 LDR X3, [X8]
	0x0227A798 MOV X0, X21
	0x0227A79C MOV X1, X20

ISIL:
	001 Move W1, W1
	002 ShiftRight W1, 30
	003 And W1, W1, 0x1FFFFFFF
	004 Move X2, X31
	005 Call Allocator.AllocAndClear, X0, X1
	006 Return X0

Method: T* Alloc(Fusion.Allocator* s)

Disassembly:
	0x0227A714 STR X30, [X31 - 0x30]!
	0x0227A718 STP X22, X21, [X31 + 0x10]
	0x0227A71C STP X20, X19, [X31 + 0x20]
	0x0227A720 LDR X8, [X3 + 0x38]
	0x0227A724 MOV X19, X2
	0x0227A728 MOV X20, X1
	0x0227A72C MOV X21, X0
	0x0227A730 CBNZ X8, 0x227A744
	0x0227A734 MOV X0, X3
	0x0227A738 MOV X22, X3
	0x0227A73C BL 0x1C5C6E0
	0x0227A740 LDR X8, [X22 + 0x38]
	0x0227A744 LDR X3, [X8]
	0x0227A748 MOV X0, X21
	0x0227A74C MOV X1, X20
	0x0227A750 MOV X2, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {12}
	008 Move X0, X1
	009 Move X20, X1
	010 Call 0x1C5D6E0
	011 Move X8, [X20+56]
	012 Move X8, [X8]
	013 Move X0, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X2, X31
	017 Move W1, [X8+252]
	018 Move X30, [X31+32]
	019 Call Allocator.Alloc, X0, X1
	020 Return X0

Method: T* AllocAndClear(Fusion.Allocator* s)

Disassembly:
	0x0227A754 LDP X20, X19, [X31 + 0x20]
	0x0227A758 LDP X22, X21, [X31 + 0x10]
	0x0227A75C LDR X30, [X31], #0x30
	0x0227A760 B 0x227DDFC
	0x0227A764 STR X30, [X31 - 0x30]!
	0x0227A768 STP X22, X21, [X31 + 0x10]
	0x0227A76C STP X20, X19, [X31 + 0x20]
	0x0227A770 LDR X8, [X3 + 0x38]
	0x0227A774 MOV X19, X2
	0x0227A778 MOV X20, X1
	0x0227A77C MOV X21, X0
	0x0227A780 CBNZ X8, 0x227A794
	0x0227A784 MOV X0, X3
	0x0227A788 MOV X22, X3
	0x0227A78C BL 0x1C5C6E0
	0x0227A790 LDR X8, [X22 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {12}
	008 Move X0, X1
	009 Move X20, X1
	010 Call 0x1C5D6E0
	011 Move X8, [X20+56]
	012 Move X8, [X8]
	013 Move X0, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X2, X31
	017 Move W1, [X8+252]
	018 Move X30, [X31+32]
	019 Call Allocator.AllocAndClear, X0, X1
	020 Return X0

Method: System.Void* AllocAndClear(Fusion.Allocator* a, System.Int32 size)

Disassembly:
	0x01E66C6C STR W22, [X2 + 0x8]
	0x01E66C70 STR W21, [X2 + 0x18]
	0x01E66C74 LDR X0, [X19 + 0x38]
	0x01E66C78 MOV X1, X19
	0x01E66C7C BL 0x1E66D4C
	0x01E66C80 ADD X21, X21, 0x1
	0x01E66C84 CMP X23, X21
	0x01E66C88 ADD X20, X20, 0x1C
	0x01E66C8C B.NE 0x1E66C60
	0x01E66C90 MOV X0, X19
	0x01E66C94 LDP X20, X19, [X31 + 0xD0]
	0x01E66C98 LDP X22, X21, [X31 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Call Allocator.Alloc, X0, X1
	006 Move W1, W19
	007 Move X2, X31
	008 Move X20, X0
	009 Call Native.MemClear, X0, X1
	010 Move X0, X20
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return X0

Method: System.String PrintDebugInfo(Fusion.Allocator* allocator)

Disassembly:
	0x01E66EC0 BL 0x1C16D6C
	0x01E66EC4 LDR X1, [X19]
	0x01E66EC8 MOV X2, X31
	0x01E66ECC MOV X19, X0
	0x01E66ED0 BL 0x32C5BD8
	0x01E66ED4 LDR X8, [X20]
	0x01E66ED8 LDP X22, X21, [X31 + 0x10]
	0x01E66EDC LDR X8, [X8 + 0xB8]
	0x01E66EE0 STR X19, [X8]
	0x01E66EE4 LDP X20, X19, [X31 + 0x20]
	0x01E66EE8 LDR X30, [X31], #0x30
	0x01E66EEC RET
	0x01E66EF0 STR X30, [X31 - 0x40]!
	0x01E66EF4 STP X24, X23, [X31 + 0x10]
	0x01E66EF8 STP X22, X21, [X31 + 0x20]
	0x01E66EFC STP X20, X19, [X31 + 0x30]
	0x01E66F00 ADRP X24, 0x2573000
	0x01E66F04 ADRP X23, 0x228D000
	0x01E66F08 LDRB W8, [X24 + 0xFD]
	0x01E66F0C LDR X23, [X23 + 0x5A8]
	0x01E66F10 MOV W19, W3
	0x01E66F14 MOV W21, W2
	0x01E66F18 MOV W22, W1
	0x01E66F1C MOV X20, X0
	0x01E66F20 TBNZ X8, 0x0, 0x1E66F38
	0x01E66F24 ADRP X0, 0x228D000
	0x01E66F28 LDR X0, [X0 + 0x5A8]
	0x01E66F2C BL 0x1C16CF4
	0x01E66F30 MOVZ W8, 0x1
	0x01E66F34 STRB W8, [X24 + 0xFD]
	0x01E66F38 STR W22, [X20]
	0x01E66F3C LDR X0, [X23]
	0x01E66F40 LDR W8, [X0 + 0xE0]
	0x01E66F44 CBNZ W8, 0x1E66F4C
	0x01E66F48 BL 0x1C16DFC
	0x01E66F4C MOVZ W0, 0x1
	0x01E66F50 MOV W1, W21
	0x01E66F54 MOV X2, X31
	0x01E66F58 BL 0x337EDF0
	0x01E66F5C STP W0, W19, [X20 + 0x4]
	0x01E66F60 LDP X20, X19, [X31 + 0x30]
	0x01E66F64 LDP X22, X21, [X31 + 0x20]
	0x01E66F68 LDP X24, X23, [X31 + 0x10]
	0x01E66F6C LDR X30, [X31], #0x40
	0x01E66F70 RET
	0x01E66F74 LDR W8, [X0]
	0x01E66F78 CMP W8, W1
	0x01E66F7C B.NE 0x1E66F94
	0x01E66F80 LDR W8, [X0 + 0x4]
	0x01E66F84 UBFM X9, X1, 0x20, 0x3F
	0x01E66F88 CMP W8, W9
	0x01E66F8C CSET W0, EQ
	0x01E66F90 RET
	0x01E66F94 MOV W0, W31
	0x01E66F98 RET
	0x01E66F9C STP X30, X21, [X31 - 0x20]!
	0x01E66FA0 STP X20, X19, [X31 + 0x10]
	0x01E66FA4 ADRP X21, 0x2573000
	0x01E66FA8 LDRB W8, [X21 + 0xFE]
	0x01E66FAC MOV X20, X1
	0x01E66FB0 MOV X19, X0
	0x01E66FB4 TBNZ X8, 0x0, 0x1E66FCC
	0x01E66FB8 ADRP X0, 0x2296000
	0x01E66FBC LDR X0, [X0 + 0xE10]
	0x01E66FC0 BL 0x1C16CF4
	0x01E66FC4 MOVZ W8, 0x1
	0x01E66FC8 STRB W8, [X21 + 0xFE]
	0x01E66FCC CBZ X20, 0x1E67014
	0x01E66FD0 ADRP X8, 0x2296000
	0x01E66FD4 LDR X8, [X8 + 0xE10]
	0x01E66FD8 LDR X9, [X20]
	0x01E66FDC LDR X8, [X8]
	0x01E66FE0 CMP X9, X8
	0x01E66FE4 B.NE 0x1E67014
	0x01E66FE8 MOV X0, X20
	0x01E66FEC BL 0x1C16E08
	0x01E66FF0 LDR X8, [X0]
	0x01E66FF4 LDR W9, [X19]
	0x01E66FF8 CMP W9, W8
	0x01E66FFC B.NE 0x1E67014
	0x01E67000 LDR W9, [X19 + 0x4]
	0x01E67004 UBFM X8, X8, 0x20, 0x3F
	0x01E67008 CMP W9, W8
	0x01E6700C CSET W0, EQ
	0x01E67010 B 0x1E67018
	0x01E67014 MOV W0, W31
	0x01E67018 LDP X20, X19, [X31 + 0x10]
	0x01E6701C LDP X30, X21, [X31], #0x20
	0x01E67020 RET
	0x01E67024 LDP W8, W9, [X0]
	0x01E67028 MOVZ W10, 0x18D
	0x01E6702C MUL W8, W8, W10
	0x01E67030 EOR W0, W8, W9, 0x0
	0x01E67034 RET
	0x01E67038 SUB X31, X31, 0x50
	0x01E6703C STR X30, [X31 + 0x20]
	0x01E67040 STP X22, X21, [X31 + 0x30]
	0x01E67044 STP X20, X19, [X31 + 0x40]
	0x01E67048 ADRP X19, 0x2572000
	0x01E6704C ADRP X21, 0x228C000
	0x01E67050 ADRP X22, 0x228C000
	0x01E67054 LDRB W8, [X19 + 0xFF]
	0x01E67058 LDR X21, [X21 + 0x9D0]
	0x01E6705C LDR X22, [X22 + 0x758]
	0x01E67060 MOV X20, X0
	0x01E67064 TBNZ X8, 0x0, 0x1E67094
	0x01E67068 ADRP X0, 0x228C000
	0x01E6706C LDR X0, [X0 + 0x758]
	0x01E67070 BL 0x1C16CF4
	0x01E67074 ADRP X0, 0x228C000
	0x01E67078 LDR X0, [X0 + 0x9D0]
	0x01E6707C BL 0x1C16CF4
	0x01E67080 ADRP X0, 0x2295000
	0x01E67084 LDR X0, [X0 + 0xE18]
	0x01E67088 BL 0x1C16CF4
	0x01E6708C MOVZ W8, 0x1
	0x01E67090 STRB W8, [X19 + 0xFF]
	0x01E67094 LDR X0, [X21]
	0x01E67098 MOVZ W1, 0x8
	0x01E6709C BL 0x1C16D6C
	0x01E670A0 MOV X19, X0
	0x01E670A4 LDR X0, [X22]
	0x01E670A8 MOVZ W8, 0xC
	0x01E670AC ADD X1, X31, 0x2C
	0x01E670B0 STR W8, [X31 + 0x2C]
	0x01E670B4 BL 0x1C16E04
	0x01E670B8 CBZ X19, 0x1E67304
	0x01E670BC MOV X21, X0
	0x01E670C0 CBZ X0, 0x1E670D8
	0x01E670C4 LDR X8, [X19]
	0x01E670C8 MOV X0, X21
	0x01E670CC LDR X1, [X8 + 0x40]
	0x01E670D0 BL 0x1C16E00
	0x01E670D4 CBZ X0, 0x1E672F8
	0x01E670D8 LDR W8, [X19 + 0x18]
	0x01E670DC CBZ W8, 0x1E672F4
	0x01E670E0 STR X21, [X19 + 0x20]
	0x01E670E4 LDR W8, [X20]
	0x01E670E8 LDR X0, [X22]
	0x01E670EC ADD X1, X31, 0x28
	0x01E670F0 STR W8, [X31 + 0x28]
	0x01E670F4 BL 0x1C16E04
	0x01E670F8 MOV X21, X0
	0x01E670FC CBZ X0, 0x1E67114
	0x01E67100 LDR X8, [X19]
	0x01E67104 MOV X0, X21
	0x01E67108 LDR X1, [X8 + 0x40]
	0x01E6710C BL 0x1C16E00
	0x01E67110 CBZ X0, 0x1E672F8
	0x01E67114 LDR W8, [X19 + 0x18]
	0x01E67118 CMP W8, 0x1
	0x01E6711C B.LS 0x1E672F4
	0x01E67120 STR X21, [X19 + 0x28]
	0x01E67124 LDR W8, [X20 + 0x4]
	0x01E67128 LDR X0, [X22]
	0x01E6712C ADD X1, X31, 0x1C
	0x01E67130 STR W8, [X31 + 0x1C]
	0x01E67134 BL 0x1C16E04
	0x01E67138 MOV X21, X0
	0x01E6713C CBZ X0, 0x1E67154
	0x01E67140 LDR X8, [X19]
	0x01E67144 MOV X0, X21
	0x01E67148 LDR X1, [X8 + 0x40]
	0x01E6714C BL 0x1C16E00
	0x01E67150 CBZ X0, 0x1E672F8
	0x01E67154 LDR W8, [X19 + 0x18]
	0x01E67158 CMP W8, 0x2
	0x01E6715C B.LS 0x1E672F4
	0x01E67160 STR X21, [X19 + 0x30]
	0x01E67164 LDR W8, [X20 + 0x8]
	0x01E67168 LDR X0, [X22]
	0x01E6716C ADD X1, X31, 0x18
	0x01E67170 STR W8, [X31 + 0x18]
	0x01E67174 BL 0x1C16E04
	0x01E67178 MOV X21, X0
	0x01E6717C CBZ X0, 0x1E67194
	0x01E67180 LDR X8, [X19]
	0x01E67184 MOV X0, X21
	0x01E67188 LDR X1, [X8 + 0x40]
	0x01E6718C BL 0x1C16E00
	0x01E67190 CBZ X0, 0x1E672F8
	0x01E67194 LDR W8, [X19 + 0x18]
	0x01E67198 CMP W8, 0x3

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0x2574000
	015 Move W8, [X20+247]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x2290000
	022 Move X0, [X0+2656]
	023 Call 0x1C17CF4
	024 Move X0, 0x228E000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move X0, 0x2297000
	028 Move X0, [X0+3544]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+247], W8
	032 Compare X19, 0
	033 JumpIfEqual {214}
	034 Move X8, 0x228E000
	035 Move X8, [X8+2512]
	036 Move X9, [X19+40]
	037 Move X21, [X19]
	038 Move X22, [X19+8]
	039 Move X23, 0x2290000
	040 Move X0, [X8]
	041 Move X25, [X19+16]
	042 Move X24, [X19+24]
	043 Move X29, [X19+72]
	044 Move X27, [X19+80]
	045 Move X26, [X19+56]
	046 Move X28, [X19+64]
	047 Move X23, [X23+2656]
	048 Move W1, 8
	049 Subtract X20, X9, X21
	050 Call 0x1C17D6C
	051 Move X19, X0
	052 Move X0, [X23]
	053 Add X1, X31, 56
	054 Move [X31+56], X20
	055 Call 0x1C17E04
	056 Compare X19, 0
	057 JumpIfEqual {214}
	058 Move X20, X0
	059 Compare X0, 0
	060 JumpIfEqual {67}
	061 Move X8, [X19]
	062 Move X0, X20
	063 Move X1, [X8+64]
	064 Call 0x1C17E00
	065 Compare X0, 0
	066 JumpIfEqual {211}
	067 Move W8, [X19+24]
	068 Compare W8, 0
	069 JumpIfEqual {210}
	070 Move [X19+32], X20
	071 Move X0, [X23]
	072 Subtract X8, X29, X21
	073 Add X1, X31, 48
	074 Move [X31+48], X8
	075 Call 0x1C17E04
	076 Move X20, X0
	077 Compare X0, 0
	078 JumpIfEqual {85}
	079 Move X8, [X19]
	080 Move X0, X20
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {211}
	085 Move W8, [X19+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X19+40], X20
	088 Move X0, [X23]
	089 Subtract X8, X28, X21
	090 Add X1, X31, 40
	091 Move [X31+40], X8
	092 Call 0x1C17E04
	093 Move X20, X0
	094 Compare X0, 0
	095 JumpIfEqual {102}
	096 Move X8, [X19]
	097 Move X0, X20
	098 Move X1, [X8+64]
	099 Call 0x1C17E00
	100 Compare X0, 0
	101 JumpIfEqual {211}
	102 Move W8, [X19+24]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move [X19+48], X20
	105 Move X0, [X23]
	106 Subtract X8, X27, X21
	107 Add X1, X31, 32
	108 Move [X31+32], X8
	109 Call 0x1C17E04
	110 Move X20, X0
	111 Compare X0, 0
	112 JumpIfEqual {119}
	113 Move X8, [X19]
	114 Move X0, X20
	115 Move X1, [X8+64]
	116 Call 0x1C17E00
	117 Compare X0, 0
	118 JumpIfEqual {211}
	119 Move W8, [X19+24]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move [X19+56], X20
	122 Move X0, [X23]
	123 Subtract X8, X26, X21
	124 Add X1, X31, 24
	125 Move [X31+24], X8
	126 Call 0x1C17E04
	127 Move X20, X0
	128 Compare X0, 0
	129 JumpIfEqual {136}
	130 Move X8, [X19]
	131 Move X0, X20
	132 Move X1, [X8+64]
	133 Call 0x1C17E00
	134 Compare X0, 0
	135 JumpIfEqual {211}
	136 Move W8, [X19+24]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move [X19+64], X20
	139 Move X0, [X23]
	140 Subtract X8, X25, X21
	141 Add X1, X31, 16
	142 Move [X31+16], X8
	143 Call 0x1C17E04
	144 Move X20, X0
	145 Compare X0, 0
	146 JumpIfEqual {153}
	147 Move X8, [X19]
	148 Move X0, X20
	149 Move X1, [X8+64]
	150 Call 0x1C17E00
	151 Compare X0, 0
	152 JumpIfEqual {211}
	153 Move W8, [X19+24]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move [X19+72], X20
	156 Move X0, [X23]
	157 Subtract X8, X24, X21
	158 Add X1, X31, 8
	159 Move [X31+8], X8
	160 Call 0x1C17E04
	161 Move X20, X0
	162 Compare X0, 0
	163 JumpIfEqual {170}
	164 Move X8, [X19]
	165 Move X0, X20
	166 Move X1, [X8+64]
	167 Call 0x1C17E00
	168 Compare X0, 0
	169 JumpIfEqual {211}
	170 Move W8, [X19+24]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move [X19+80], X20
	173 Move X0, [X23]
	174 Subtract X8, X22, X21
	175 Add X1, X31, 0
	176 Move [X31], X8
	177 Call 0x1C17E04
	178 Move X20, X0
	179 Compare X0, 0
	180 JumpIfEqual {187}
	181 Move X8, [X19]
	182 Move X0, X20
	183 Move X1, [X8+64]
	184 Call 0x1C17E00
	185 Compare X0, 0
	186 JumpIfEqual {211}
	187 Move W8, [X19+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X8, 0x2296000
	190 Move X8, [X8+3544]
	191 Move [X19+88], X20
	192 Move X1, X19
	193 Move X2, X31
	194 Move X0, [X8]
	195 Call String.Format, X0, X1
	196 Move X20, [X31+144]
	197 Move X19, [X31+152]
	198 Move X22, [X31+128]
	199 Move X21, [X31+136]
	200 Move X24, [X31+112]
	201 Move X23, [X31+120]
	202 Move X26, [X31+96]
	203 Move X25, [X31+104]
	204 Move X28, [X31+80]
	205 Move X27, [X31+88]
	206 Move X29, [X31+64]
	207 Move X30, [X31+72]
	208 Add X31, X31, 160
	209 Return X0
	210 Call 0x1C17F28
	211 Call 0x1C17F44
	212 Move X1, X31
	213 Call 0x1C17DEC
	214 Call 0x1C17F20

Method: System.Int32 GetTotalSegmentsUsedInBytes()

Disassembly:
	0x01E6719C B.LS 0x1E672F4
	0x01E671A0 STR X21, [X19 + 0x38]
	0x01E671A4 LDR W8, [X20]
	0x01E671A8 LDR X0, [X22]
	0x01E671AC MOVZ W9, 0x1
	0x01E671B0 ADD X1, X31, 0x14
	0x01E671B4 LSLV W8, W9, W8
	0x01E671B8 STR W8, [X31 + 0x14]
	0x01E671BC BL 0x1C16E04
	0x01E671C0 MOV X21, X0
	0x01E671C4 CBZ X0, 0x1E671DC
	0x01E671C8 LDR X8, [X19]
	0x01E671CC MOV X0, X21
	0x01E671D0 LDR X1, [X8 + 0x40]
	0x01E671D4 BL 0x1C16E00
	0x01E671D8 CBZ X0, 0x1E672F8
	0x01E671DC LDR W8, [X19 + 0x18]
	0x01E671E0 CMP W8, 0x4
	0x01E671E4 B.LS 0x1E672F4
	0x01E671E8 STR X21, [X19 + 0x40]
	0x01E671EC LDR W8, [X20]
	0x01E671F0 MOVZ W9, 0x1
	0x01E671F4 LDR X0, [X22]
	0x01E671F8 ADD X1, X31, 0x10
	0x01E671FC LSLV W8, W9, W8
	0x01E67200 ADD W8, W8, 0x7
	0x01E67204 SBFM W8, W8, 0x3, 0x1F

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X9, [X8+64]
	004 Move W0, W31
	005 Move W10, W31
	006 Add X11, X9, W10
	007 Move X12, [X8+80]
	008 Move X10, W10
	009 Add X12, X12, X10
	010 Move W13, [X12]
	011 Compare W13, 0
	012 JumpIfEqual {21}
	013 Move W11, [X11+4]
	014 Move X12, [X8]
	015 Add X13, X12, W13
	016 Move W14, [X13+20]
	017 Move W13, [X13+4]
	018 NotImplemented "Instruction MADD not yet implemented."
	019 Compare W13, 0
	020 JumpIfNotEqual {15}
	021 Add W10, W10, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X30, [X31+16]
	024 Return X0
	025 Call 0x1C17F20

Method: System.Void GetMemorySnapshot(ref Fusion.Statistics.MemoryStatisticsSnapshot snapshot, Fusion.Allocator* a)

Disassembly:
	0x01E67214 CBZ X0, 0x1E6722C
	0x01E67218 LDR X8, [X19]
	0x01E6721C MOV X0, X21
	0x01E67220 LDR X1, [X8 + 0x40]
	0x01E67224 BL 0x1C16E00
	0x01E67228 CBZ X0, 0x1E672F8
	0x01E6722C LDR W8, [X19 + 0x18]
	0x01E67230 CMP W8, 0x5
	0x01E67234 B.LS 0x1E672F4
	0x01E67238 STR X21, [X19 + 0x48]
	0x01E6723C LDP W8, W9, [X20]
	0x01E67240 LDR X0, [X22]
	0x01E67244 ADD X1, X31, 0xC
	0x01E67248 LSLV W8, W9, W8
	0x01E6724C STR W8, [X31 + 0xC]
	0x01E67250 BL 0x1C16E04
	0x01E67254 MOV X21, X0
	0x01E67258 CBZ X0, 0x1E67270
	0x01E6725C LDR X8, [X19]
	0x01E67260 MOV X0, X21
	0x01E67264 LDR X1, [X8 + 0x40]
	0x01E67268 BL 0x1C16E00
	0x01E6726C CBZ X0, 0x1E672F8
	0x01E67270 LDR W8, [X19 + 0x18]
	0x01E67274 CMP W8, 0x6
	0x01E67278 B.LS 0x1E672F4
	0x01E6727C STR X21, [X19 + 0x50]
	0x01E67280 LDP W8, W9, [X20]
	0x01E67284 LDR X0, [X22]
	0x01E67288 ADD X1, X31, 0x8
	0x01E6728C LSLV W8, W9, W8
	0x01E67290 ADD W8, W8, 0x8
	0x01E67294 STR W8, [X31 + 0x8]
	0x01E67298 BL 0x1C16E04
	0x01E6729C MOV X20, X0
	0x01E672A0 CBZ X0, 0x1E672B8
	0x01E672A4 LDR X8, [X19]
	0x01E672A8 MOV X0, X20
	0x01E672AC LDR X1, [X8 + 0x40]
	0x01E672B0 BL 0x1C16E00
	0x01E672B4 CBZ X0, 0x1E672F8
	0x01E672B8 LDR W8, [X19 + 0x18]
	0x01E672BC CMP W8, 0x7
	0x01E672C0 B.LS 0x1E672F4
	0x01E672C4 ADRP X8, 0x2295000
	0x01E672C8 LDR X8, [X8 + 0xE18]
	0x01E672CC STR X20, [X19 + 0x58]
	0x01E672D0 MOV X1, X19
	0x01E672D4 MOV X2, X31
	0x01E672D8 LDR X0, [X8]
	0x01E672DC BL 0x3227C5C
	0x01E672E0 LDP X20, X19, [X31 + 0x40]
	0x01E672E4 LDP X22, X21, [X31 + 0x30]
	0x01E672E8 LDR X30, [X31 + 0x20]
	0x01E672EC ADD X31, X31, 0x50
	0x01E672F0 RET
	0x01E672F4 BL 0x1C16F28
	0x01E672F8 BL 0x1C16F44
	0x01E672FC MOV X1, X31
	0x01E67300 BL 0x1C16DEC
	0x01E67304 BL 0x1C16F20
	0x01E67308 MOV X0, X31
	0x01E6730C RET
	0x01E67310 LDR W8, [X0]
	0x01E67314 CMP W8, W1
	0x01E67318 CSET W0, EQ
	0x01E6731C RET
	0x01E67320 STP X30, X21, [X31 - 0x20]!
	0x01E67324 STP X20, X19, [X31 + 0x10]
	0x01E67328 ADRP X21, 0x2572000
	0x01E6732C LDRB W8, [X21 + 0x100]
	0x01E67330 MOV X20, X1
	0x01E67334 MOV X19, X0
	0x01E67338 TBNZ X8, 0x0, 0x1E67350
	0x01E6733C ADRP X0, 0x2295000
	0x01E67340 LDR X0, [X0 + 0xE20]
	0x01E67344 BL 0x1C16CF4
	0x01E67348 MOVZ W8, 0x1
	0x01E6734C STRB W8, [X21 + 0x100]
	0x01E67350 CBZ X20, 0x1E6736C
	0x01E67354 ADRP X8, 0x2295000
	0x01E67358 LDR X8, [X8 + 0xE20]
	0x01E6735C LDR X9, [X20]
	0x01E67360 LDR X8, [X8]
	0x01E67364 CMP X9, X8
	0x01E67368 B.EQ 0x1E67374
	0x01E6736C MOV W0, W31
	0x01E67370 B 0x1E6738C
	0x01E67374 MOV X0, X20
	0x01E67378 BL 0x1C16E08
	0x01E6737C LDR W8, [X0]
	0x01E67380 LDR W9, [X19]
	0x01E67384 CMP W9, W8
	0x01E67388 CSET W0, EQ
	0x01E6738C LDP X20, X19, [X31 + 0x10]
	0x01E67390 LDP X30, X21, [X31], #0x20
	0x01E67394 RET
	0x01E67398 LDR W0, [X0]
	0x01E6739C RET
	0x01E673A0 STR X30, [X31 - 0x30]!
	0x01E673A4 STP X22, X21, [X31 + 0x10]
	0x01E673A8 STP X20, X19, [X31 + 0x20]
	0x01E673AC ADRP X22, 0x2572000
	0x01E673B0 ADRP X21, 0x228C000
	0x01E673B4 ADRP X20, 0x2295000
	0x01E673B8 LDRB W8, [X22 + 0x101]
	0x01E673BC LDR X21, [X21 + 0x758]
	0x01E673C0 LDR X20, [X20 + 0xE28]
	0x01E673C4 MOV X19, X0
	0x01E673C8 TBNZ X8, 0x0, 0x1E673EC
	0x01E673CC ADRP X0, 0x228C000
	0x01E673D0 LDR X0, [X0 + 0x758]
	0x01E673D4 BL 0x1C16CF4
	0x01E673D8 ADRP X0, 0x2295000
	0x01E673DC LDR X0, [X0 + 0xE28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2573000
	007 Move W8, [X22+248]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x228E000
	016 Move X0, [X0+3672]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+248], W8
	020 Move X8, [X20+8]
	021 Compare X8, 0
	022 JumpIfNotEqual {29}
	023 Move X8, 0x228E000
	024 Move X8, [X8+3672]
	025 Move W1, 57
	026 Move X0, [X8]
	027 Call 0x1C17D6C
	028 Move [X20+8], X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfNotEqual {38}
	032 Move X8, 0x228E000
	033 Move X8, [X8+3672]
	034 Move W1, 57
	035 Move X0, [X8]
	036 Call 0x1C17D6C
	037 Move [X20+16], X0
	038 Move X0, [X20+24]
	039 Compare X0, 0
	040 JumpIfNotEqual {47}
	041 Move X8, 0x228E000
	042 Move X8, [X8+3672]
	043 Move W1, 57
	044 Move X0, [X8]
	045 Call 0x1C17D6C
	046 Move [X20+24], X0
	047 Move X8, [X21+56]
	048 Compare X8, 0
	049 JumpIfEqual {123}
	050 Move W10, [X8]
	051 Compare W10, 0
	052 JumpIfEqual {60}
	053 Move X8, [X21]
	054 Move W9, W31
	055 Add X10, X8, W10
	056 Move W10, [X10+4]
	057 Add W9, W9, 1
	058 Compare W10, 0
	059 JumpIfNotEqual {55}
	060 Move W9, W31
	061 Move W8, W31
	062 Move [X20], W9
	063 Move X9, [X21+80]
	064 Add X9, X9, W8
	065 Move W14, [X9]
	066 Compare W14, 0
	067 JumpIfEqual {91}
	068 Move X9, [X21+64]
	069 Move X11, [X21]
	070 Move W10, W31
	071 Add X12, X9, W8
	072 Add X13, X11, W14
	073 Compare X12, 0
	074 JumpIfEqual {123}
	075 Move W14, [X13+16]
	076 Move W15, [X12+12]
	077 Move W9, W31
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CINC not yet implemented."
	080 Add X14, X13, 12
	081 NotImplemented "Instruction LDRSW not yet implemented."
	082 Compare W14, 0
	083 JumpIfEqual {87}
	084 Move X15, [X19]
	085 Add W9, W9, 1
	086 Add X14, X15, X14
	087 Move W14, [X13+4]
	088 Compare W14, 0
	089 JumpIfNotEqual {72}
	090 Move W11, [X13+20]
	091 Move W9, W31
	092 Move W11, W31
	093 Move W10, W31
	094 Move X12, [X20+8]
	095 Compare X12, 0
	096 JumpIfEqual {123}
	097 Move W13, [X12+24]
	098 Move X8, W8
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X12, X12, X8
	101 Move [X12+32], W10
	102 Move X10, [X20+16]
	103 Compare X10, 0
	104 JumpIfEqual {123}
	105 Move W12, [X10+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Add X10, X10, X8
	108 Move [X10+32], W11
	109 Compare X0, 0
	110 JumpIfEqual {123}
	111 Move W10, [X0+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Add X10, X0, X8
	114 Add W8, W8, 1
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move [X10+32], W9
	117 Move X20, [X31+32]
	118 Move X19, [X31+40]
	119 Move X22, [X31+16]
	120 Move X21, [X31+24]
	121 Move X30, [X31+48]
	122 Return 
	123 Call 0x1C17F20
	124 Call 0x1C17F28

Method: System.Int32 GetFreeSegmentsInBytes()

Disassembly:
	0x01E67414 LDP X20, X19, [X31 + 0x20]
	0x01E67418 LDP X22, X21, [X31 + 0x10]
	0x01E6741C LDR X30, [X31], #0x30
	0x01E67420 RET
	0x01E67424 ADD W0, W0, W1
	0x01E67428 RET
	0x01E6742C SUB W0, W0, W1
	0x01E67430 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Allocator.GetTotalSegmentsUsedInBytes, X0
	005 Move W9, [X19+88]
	006 Move W8, [X19+92]
	007 NotImplemented "Instruction LSLV not yet implemented."
	008 Subtract W0, W8, W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0

Method: System.Boolean CanAllocSize(System.Int32 size)

Disassembly:
	0x01E67434 CMP W1, W2
	0x01E67438 CSET W0, EQ
	0x01E6743C RET
	0x01E67440 MOV X0, X1
	0x01E67444 RET
	0x01E67448 MOV X1, X31
	0x01E6744C B 0x33BDD8C
	0x01E67450 LDR W0, [X0 + 0x10]
	0x01E67454 RET
	0x01E67458 STR X30, [X31 - 0x20]!

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, [X0+88]
	003 Move W9, 1
	004 NotImplemented "Instruction LSLV not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Boolean CanAllocSizeAssert_Temp(System.Int32 size)

Disassembly:
	0x01E6745C STP X20, X19, [X31 + 0x10]
	0x01E67460 MOV W19, W1
	0x01E67464 MOV X1, X31
	0x01E67468 MOV X20, X0
	0x01E6746C BL 0x33A51F0
	0x01E67470 STR W19, [X20 + 0x10]
	0x01E67474 LDP X20, X19, [X31 + 0x10]
	0x01E67478 LDR X30, [X31], #0x20
	0x01E6747C RET
	0x01E67480 LDR X0, [X0 + 0x18]
	0x01E67484 RET
	0x01E67488 LDR W0, [X0 + 0x20]
	0x01E6748C RET
	0x01E67490 LDR W0, [X0 + 0x24]
	0x01E67494 RET
	0x01E67498 STR X30, [X31 - 0x30]!
	0x01E6749C STP X22, X21, [X31 + 0x10]
	0x01E674A0 STP X20, X19, [X31 + 0x20]
	0x01E674A4 MOV X21, X1
	0x01E674A8 MOV X1, X31
	0x01E674AC MOV W19, W3
	0x01E674B0 MOV W20, W2
	0x01E674B4 MOV X22, X0
	0x01E674B8 BL 0x1E2E908
	0x01E674BC STR X21, [X22 + 0x18]
	0x01E674C0 STP W20, W19, [X22 + 0x20]
	0x01E674C4 LDP X20, X19, [X31 + 0x20]
	0x01E674C8 LDP X22, X21, [X31 + 0x10]
	0x01E674CC LDR X30, [X31], #0x30
	0x01E674D0 RET
	0x01E674D4 LDR X0, [X0 + 0x18]
	0x01E674D8 RET
	0x01E674DC LDR X0, [X0 + 0x20]
	0x01E674E0 RET
	0x01E674E4 LDR W0, [X0 + 0x28]
	0x01E674E8 RET
	0x01E674EC STR X30, [X31 - 0x30]!
	0x01E674F0 STP X22, X21, [X31 + 0x10]
	0x01E674F4 STP X20, X19, [X31 + 0x20]
	0x01E674F8 MOV X21, X1
	0x01E674FC MOV X1, X31
	0x01E67500 MOV W19, W3
	0x01E67504 MOV X20, X2
	0x01E67508 MOV X22, X0
	0x01E6750C BL 0x1E2E908
	0x01E67510 STP X21, X20, [X22 + 0x18]
	0x01E67514 STR W19, [X22 + 0x28]
	0x01E67518 LDP X20, X19, [X31 + 0x20]
	0x01E6751C LDP X22, X21, [X31 + 0x10]
	0x01E67520 LDR X30, [X31], #0x30
	0x01E67524 RET
	0x01E67528 MOV X1, X31
	0x01E6752C B 0x33A51F0
	0x01E67530 MOV X1, X31
	0x01E67534 B 0x33A51F0
	0x01E67538 LDR W0, [X0 + 0x10]
	0x01E6753C RET
	0x01E67540 STR X30, [X31 - 0x20]!
	0x01E67544 STP X20, X19, [X31 + 0x10]
	0x01E67548 MOV W19, W1
	0x01E6754C MOV X1, X31
	0x01E67550 MOV X20, X0
	0x01E67554 BL 0x33A51F0
	0x01E67558 STR W19, [X20 + 0x10]
	0x01E6755C LDP X20, X19, [X31 + 0x10]
	0x01E67560 LDR X30, [X31], #0x20
	0x01E67564 RET
	0x01E67568 MOV X1, X31
	0x01E6756C B 0x33A51F0
	0x01E67570 LDR X0, [X0 + 0x10]
	0x01E67574 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x2573000
	008 Move W8, [X21+249]
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x228D000
	016 Move X0, [X0+1880]
	017 Call 0x1C17CF4
	018 Move X0, 0x2296000
	019 Move X0, [X0+3552]
	020 Call 0x1C17CF4
	021 Move X0, 0x2296000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+249], W8
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W8, [X19+88]
	028 Move W21, 1
	029 NotImplemented "Instruction LSLV not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X22, 0x228D000
	032 Move X22, [X22+1880]
	033 Add X1, X31, 24
	034 Move [X31+24], W20
	035 Move X0, [X22]
	036 Call 0x1C17E04
	037 Move W8, [X19+88]
	038 Move X20, X0
	039 Move X0, [X22]
	040 Add X1, X31, 12
	041 NotImplemented "Instruction LSLV not yet implemented."
	042 Move [X31+12], W8
	043 Call 0x1C17E04
	044 Move X8, 0x2296000
	045 Move X8, [X8+3552]
	046 Move X2, X0
	047 Move X1, X20
	048 Move X3, X31
	049 Move X8, [X8]
	050 Move X0, X8
	051 Call String.Format, X0, X1, X2
	052 Move X8, 0x228D000
	053 Move X8, [X8+1880]
	054 Add X1, X31, 28
	055 Move [X31+28], W20
	056 Move X0, [X8]
	057 Call 0x1C17E04
	058 Move X8, 0x2296000
	059 Move X8, [X8+3560]
	060 Move X1, X0
	061 Move X2, X31
	062 Move X8, [X8]
	063 Move X0, X8
	064 Call String.Format, X0, X1
	065 Move X1, X31
	066 Call Assert.AlwaysFail, X0
	067 Move W21, W31
	068 Move W0, W21
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X30, [X31+16]
	074 Add X31, X31, 64
	075 Return X0

Method: System.Void* Alloc(Fusion.Allocator* a, System.Int32 size)

Disassembly:
	0x01E66C9C LDP X24, X23, [X31 + 0xB0]
	0x01E66CA0 LDP X26, X25, [X31 + 0xA0]
	0x01E66CA4 LDR X30, [X31 + 0x90]
	0x01E66CA8 ADD X31, X31, 0xE0
	0x01E66CAC RET
	0x01E66CB0 BL 0x1C16F20
	0x01E66CB4 BL 0x1C16F28
	0x01E66CB8 LDR W8, [X0]
	0x01E66CBC MOVZ W9, 0x1
	0x01E66CC0 LSLV W8, W9, W8
	0x01E66CC4 ADD W8, W8, 0x7
	0x01E66CC8 SBFM W0, W8, 0x3, 0x1F
	0x01E66CCC RET
	0x01E66CD0 LDP W8, W9, [X0]
	0x01E66CD4 LSLV W8, W9, W8
	0x01E66CD8 ADD W0, W8, 0x8
	0x01E66CDC RET
	0x01E66CE0 SUB X31, X31, 0x30
	0x01E66CE4 STR X30, [X31 + 0x20]
	0x01E66CE8 MRS X8, 0xC000
	0x01E66CEC LDR X9, [X8 + 0x28]
	0x01E66CF0 UBFM W10, W1, 0x1D, 0x1C
	0x01E66CF4 CMP W1, 0x1
	0x01E66CF8 STR X9, [X31 + 0x18]
	0x01E66CFC STP W10, W1, [X31 + 0xC]
	0x01E66D00 STR W0, [X31 + 0x8]
	0x01E66D04 B.LT 0x1E66D20
	0x01E66D08 MOVZ W9, 0x1
	0x01E66D0C LSLV W9, W9, W2
	0x01E66D10 ADD W9, W9, 0x7
	0x01E66D14 SBFM W9, W9, 0x3, 0x1F
	0x01E66D18 SDIV W9, W9, W1
	0x01E66D1C B 0x1E66D24
	0x01E66D20 MOV W9, W31
	0x01E66D24 STR W9, [X31 + 0x14]
	0x01E66D28 LDP X0, X1, [X31 + 0x8]
	0x01E66D2C LDR X8, [X8 + 0x28]
	0x01E66D30 LDR X9, [X31 + 0x18]
	0x01E66D34 CMP X8, X9
	0x01E66D38 B.NE 0x1E66D48
	0x01E66D3C LDR X30, [X31 + 0x20]
	0x01E66D40 ADD X31, X31, 0x30
	0x01E66D44 RET
	0x01E66D48 BL 0x3EB1B20
	0x01E66D4C STR X30, [X31 - 0x10]!
	0x01E66D50 CBZ X2, 0x1E66D98
	0x01E66D54 LDR W8, [X1]
	0x01E66D58 STR W31, [X2 + 0x4]
	0x01E66D5C LDR W9, [X0 + 0x4]
	0x01E66D60 STR W9, [X2]
	0x01E66D64 LDRSW X9, [X0 + 0x4]
	0x01E66D68 CBZ W9, 0x1E66D80
	0x01E66D6C LDR X10, [X1]
	0x01E66D70 ADDS X9, X10, X9
	0x01E66D74 B.EQ 0x1E66D98
	0x01E66D78 ADD X9, X9, 0x4
	0x01E66D7C B 0x1E66D84
	0x01E66D80 MOV X9, X0
	0x01E66D84 SUB W8, W2, W8
	0x01E66D88 STR W8, [X9]
	0x01E66D8C STR W8, [X0 + 0x4]
	0x01E66D90 LDR X30, [X31], #0x10
	0x01E66D94 RET
	0x01E66D98 BL 0x1C16F20
	0x01E66D9C STR X30, [X31 - 0x10]!
	0x01E66DA0 ADD X8, X0, 0xC
	0x01E66DA4 LDRSW X8, [X8]
	0x01E66DA8 CBZ W8, 0x1E66DC8
	0x01E66DAC LDR X9, [X1]
	0x01E66DB0 SUB W10, W2, W9
	0x01E66DB4 CMP W8, W10
	0x01E66DB8 B.EQ 0x1E66DC8
	0x01E66DBC ADDS X8, X9, X8
	0x01E66DC0 B.NE 0x1E66DA4
	0x01E66DC4 BL 0x1C16F20
	0x01E66DC8 CMP W8, 0x0
	0x01E66DCC CSET W0, NE
	0x01E66DD0 LDR X30, [X31], #0x10
	0x01E66DD4 RET
	0x01E66DD8 CMP W0, W1
	0x01E66DDC CSET W0, EQ
	0x01E66DE0 RET
	0x01E66DE4 CMP W0, W1
	0x01E66DE8 CSET W0, NE
	0x01E66DEC RET
	0x01E66DF0 STR X30, [X31 - 0x10]!
	0x01E66DF4 LDR W9, [X0]
	0x01E66DF8 CBZ W9, 0x1E66E20
	0x01E66DFC LDR X8, [X1]
	0x01E66E00 ADD X9, X8, W9, SXTW
	0x01E66E04 CMP X2, X9
	0x01E66E08 CSET W0, EQ
	0x01E66E0C B.EQ 0x1E66E24
	0x01E66E10 CBZ X9, 0x1E66E2C
	0x01E66E14 LDR W9, [X9 + 0x4]
	0x01E66E18 CBNZ W9, 0x1E66E00
	0x01E66E1C B 0x1E66E24
	0x01E66E20 MOV W0, W31
	0x01E66E24 LDR X30, [X31], #0x10
	0x01E66E28 RET
	0x01E66E2C BL 0x1C16F20
	0x01E66E30 STR X30, [X31 - 0x10]!
	0x01E66E34 LDR W9, [X0]
	0x01E66E38 CBZ W9, 0x1E66E50
	0x01E66E3C LDR X8, [X1]
	0x01E66E40 ADDS X9, X8, W9, SXTW
	0x01E66E44 B.EQ 0x1E66E58
	0x01E66E48 LDR W9, [X9 + 0x4]
	0x01E66E4C CBNZ W9, 0x1E66E40
	0x01E66E50 LDR X30, [X31], #0x10
	0x01E66E54 RET
	0x01E66E58 BL 0x1C16F20
	0x01E66E5C STR X30, [X31 - 0x30]!
	0x01E66E60 STP X22, X21, [X31 + 0x10]
	0x01E66E64 STP X20, X19, [X31 + 0x20]
	0x01E66E68 ADRP X21, 0x2573000
	0x01E66E6C ADRP X22, 0x228E000
	0x01E66E70 ADRP X19, 0x2296000
	0x01E66E74 ADRP X20, 0x2296000
	0x01E66E78 LDRB W8, [X21 + 0xFC]
	0x01E66E7C LDR X22, [X22 + 0xE58]
	0x01E66E80 LDR X19, [X19 + 0xE08]
	0x01E66E84 LDR X20, [X20 + 0xE00]
	0x01E66E88 TBNZ X8, 0x0, 0x1E66EB8
	0x01E66E8C ADRP X0, 0x2296000
	0x01E66E90 LDR X0, [X0 + 0xE00]
	0x01E66E94 BL 0x1C16CF4
	0x01E66E98 ADRP X0, 0x228E000
	0x01E66E9C LDR X0, [X0 + 0xE58]
	0x01E66EA0 BL 0x1C16CF4
	0x01E66EA4 ADRP X0, 0x2296000
	0x01E66EA8 LDR X0, [X0 + 0xE08]
	0x01E66EAC BL 0x1C16CF4
	0x01E66EB0 MOVZ W8, 0x1
	0x01E66EB4 STRB W8, [X21 + 0xFC]
	0x01E66EB8 LDR X0, [X22]
	0x01E66EBC MOVZ W1, 0x39

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Compare X0, 0
	010 JumpIfEqual {82}
	011 Move W8, [X19+88]
	012 Move W22, 1
	013 NotImplemented "Instruction LSLV not yet implemented."
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X8, [X19+72]
	016 Add W9, W1, 7
	017 NotImplemented "Instruction SBFM not yet implemented."
	018 Move W22, [X8]
	019 Move X8, [X19+80]
	020 Add X20, X8, W22
	021 Move X9, [X19+64]
	022 NotImplemented "Instruction LDRSW not yet implemented."
	023 Add X21, X9, W22
	024 Compare W8, 0
	025 JumpIfEqual {33}
	026 Move X9, [X19]
	027 Move X0, X19
	028 Move X1, X21
	029 Add X2, X9, X8
	030 Call Allocator.TryAllocateSegmentFromBlock, X0, X1, X2, X3
	031 Compare X0, 0
	032 JumpIfNotEqual {75}
	033 Move X0, [X19+56]
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Compare W8, 0
	036 JumpIfNotEqual {54}
	037 And W8, W22, 255
	038 Add W22, W8, 1
	039 And W8, W22, 255
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, 0x2297000
	042 Move X0, [X0+3512]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X1, X31
	046 Move X19, X0
	047 Call OutOfMemoryException..ctor, X0
	048 Move X0, 0x2297000
	049 Move X0, [X0+3520]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Move X9, [X19]
	055 Move X1, X19
	056 Add X22, X9, X8
	057 Move X2, X22
	058 Call BlockList.Remove, X0, X1, X2
	059 Compare X21, 0
	060 JumpIfEqual {82}
	061 Compare X22, 0
	062 JumpIfEqual {82}
	063 Move W8, [X21]
	064 Move X0, X20
	065 Move X1, X19
	066 Move X2, X22
	067 Move [X22+8], W8
	068 Call BlockList.AddFirst, X0, X1, X2
	069 Move X0, X19
	070 Move X1, X21
	071 Move X2, X22
	072 Call Allocator.TryAllocateSegmentFromBlock, X0, X1, X2, X3
	073 Compare X0, 0
	074 JumpIfEqual {136}
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X22, [X31+32]
	078 Move X21, [X31+40]
	079 Move X30, [X31+16]
	080 Add X31, X31, 64
	081 Return X0
	082 Call 0x1C17F20
	083 Move [X31+28], W1
	084 Move X0, 0x228E000
	085 Move X0, [X0+1880]
	086 Call 0x1C17D08
	087 Add X1, X31, 28
	088 Call 0x1C17E04
	089 Move X19, X0
	090 Move X0, 0x2297000
	091 Move X0, [X0+3528]
	092 Call 0x1C17D08
	093 Move X1, X19
	094 Move X2, X31
	095 Call String.Format, X0, X1
	096 Move [X31+24], W1
	097 Move X20, 0x228E000
	098 Move X20, [X20+1880]
	099 Move X0, X20
	100 Call 0x1C17D08
	101 Add X1, X31, 24
	102 Call 0x1C17E04
	103 Move X21, X0
	104 Move X0, X19
	105 Call 0x19913C0
	106 Move W8, [X19+88]
	107 Move X0, X20
	108 NotImplemented "Instruction LSLV not yet implemented."
	109 Move [X31+12], W8
	110 Call 0x1C17D08
	111 Add X1, X31, 12
	112 Call 0x1C17E04
	113 Move X19, X0
	114 Move X0, 0x2297000
	115 Move X0, [X0+3536]
	116 Call 0x1C17D08
	117 Move X1, X21
	118 Move X2, X19
	119 Move X3, X31
	120 Call String.Format, X0, X1, X2
	121 Move X19, X0
	122 Move X0, 0x228E000
	123 Move X0, [X0+1456]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X1, X19
	127 Move X2, X31
	128 Move X20, X0
	129 Call InvalidOperationException..ctor, X0, X1
	130 Move X0, 0x2297000
	131 Move X0, [X0+3520]
	132 Call 0x1C17D08
	133 Move X1, X0
	134 Move X0, X20
	135 Call 0x1C17DEC
	136 Move X0, 0x228E000
	137 Move X0, [X0+2000]
	138 Call 0x1C17D08
	139 Call 0x1C17F10
	140 Move X1, X31
	141 Move X19, X0
	142 Call Exception..ctor, X0

Method: System.Void* TryAllocateSegmentFromBlock(Fusion.Allocator* a, Fusion.Allocator/Bucket* bucket, Fusion.Allocator/Block* block, System.Int32 size)

Disassembly:
	0x01E67578 STR X1, [X0 + 0x10]
	0x01E6757C RET
	0x01E67580 MOV X1, X31
	0x01E67584 B 0x33A51F0
	0x01E67588 LDR X0, [X0 + 0x10]
	0x01E6758C RET
	0x01E67590 STR X1, [X0 + 0x10]
	0x01E67594 RET
	0x01E67598 STR X30, [X31 - 0x20]!
	0x01E6759C STP X20, X19, [X31 + 0x10]
	0x01E675A0 MOV X19, X1
	0x01E675A4 MOV X1, X31
	0x01E675A8 MOV X20, X0
	0x01E675AC BL 0x33A51F0
	0x01E675B0 MOV X0, X19
	0x01E675B4 MOV X1, X31
	0x01E675B8 BL 0x32277A8
	0x01E675BC TBNZ X0, 0x0, 0x1E675D0
	0x01E675C0 STR X19, [X20 + 0x10]
	0x01E675C4 LDP X20, X19, [X31 + 0x10]
	0x01E675C8 LDR X30, [X31], #0x20
	0x01E675CC RET
	0x01E675D0 ADRP X0, 0x2291000
	0x01E675D4 LDR X0, [X0 + 0x528]
	0x01E675D8 BL 0x1C16D08
	0x01E675DC BL 0x1C16F10
	0x01E675E0 MOV X19, X0
	0x01E675E4 ADRP X0, 0x2295000
	0x01E675E8 LDR X0, [X0 + 0xE30]
	0x01E675EC BL 0x1C16D08
	0x01E675F0 MOV X20, X0
	0x01E675F4 ADRP X0, 0x2295000
	0x01E675F8 LDR X0, [X0 + 0xE38]
	0x01E675FC BL 0x1C16D08
	0x01E67600 MOV X2, X0
	0x01E67604 MOV X0, X19
	0x01E67608 MOV X1, X20
	0x01E6760C MOV X3, X31
	0x01E67610 BL 0x3315F7C
	0x01E67614 ADRP X0, 0x2295000
	0x01E67618 LDR X0, [X0 + 0xE40]
	0x01E6761C BL 0x1C16D08
	0x01E67620 MOV X1, X0
	0x01E67624 MOV X0, X19
	0x01E67628 BL 0x1C16DEC
	0x01E6762C LDR W0, [X0 + 0x10]
	0x01E67630 RET
	0x01E67634 LDR W0, [X0 + 0x14]
	0x01E67638 RET
	0x01E6763C STP X30, X21, [X31 - 0x20]!
	0x01E67640 STP X20, X19, [X31 + 0x10]
	0x01E67644 MOV W20, W1
	0x01E67648 MOV X1, X31
	0x01E6764C MOV W19, W2
	0x01E67650 MOV X21, X0
	0x01E67654 BL 0x33A51F0
	0x01E67658 STP W20, W19, [X21 + 0x10]
	0x01E6765C LDP X20, X19, [X31 + 0x10]
	0x01E67660 LDP X30, X21, [X31], #0x20
	0x01E67664 RET
	0x01E67668 LDR W0, [X0 + 0x10]
	0x01E6766C RET
	0x01E67670 STR X30, [X31 - 0x20]!
	0x01E67674 STP X20, X19, [X31 + 0x10]
	0x01E67678 MOV W19, W1
	0x01E6767C MOV X1, X31
	0x01E67680 MOV X20, X0
	0x01E67684 BL 0x33A51F0
	0x01E67688 STR W19, [X20 + 0x10]
	0x01E6768C LDP X20, X19, [X31 + 0x10]
	0x01E67690 LDR X30, [X31], #0x20
	0x01E67694 RET
	0x01E67698 MOV X1, X31
	0x01E6769C B 0x1E2E908
	0x01E676A0 LDR X0, [X0 + 0x10]
	0x01E676A4 RET
	0x01E676A8 STR X30, [X31 - 0x20]!
	0x01E676AC STP X20, X19, [X31 + 0x10]
	0x01E676B0 MOV X19, X1
	0x01E676B4 MOV X1, X31
	0x01E676B8 MOV X20, X0
	0x01E676BC BL 0x33A51F0
	0x01E676C0 STR X19, [X20 + 0x10]
	0x01E676C4 LDP X20, X19, [X31 + 0x10]
	0x01E676C8 LDR X30, [X31], #0x20
	0x01E676CC RET
	0x01E676D0 LDR W0, [X0 + 0x10]
	0x01E676D4 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x2573000
	009 Move W8, [X22+250]
	010 Move X19, X2
	011 Move X21, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x228D000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+250], W8
	022 Compare X19, 0
	023 JumpIfEqual {98}
	024 Move W8, [X19+12]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X9, [X20]
	027 Add X22, X9, X8
	028 Move W8, [X22]
	029 Move [X19+12], W8
	030 Move X8, 0x228D000
	031 Move X8, [X8+1448]
	032 Move W9, [X20+88]
	033 Move W23, [X20+100]
	034 Move X0, [X8]
	035 Move X8, [X20+8]
	036 Move W10, [X0+224]
	037 Subtract X8, X22, X8
	038 NotImplemented "Instruction ASRV not yet implemented."
	039 Compare W10, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move W0, W23
	043 Move W1, W24
	044 Move X2, X31
	045 Call Math.Max, X0, X1
	046 Move [X20+100], W0
	047 Move W8, [X19+20]
	048 Add W8, W8, 1
	049 Move [X19+20], W8
	050 Compare X21, 0
	051 JumpIfEqual {98}
	052 Move W9, [X21+12]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 Move X9, [X20+80]
	056 Move X1, X20
	057 Move X2, X19
	058 Add X0, X9, X8
	059 Call BlockList.MoveLast, X0, X1, X2
	060 Compare X21, 0
	061 JumpIfEqual {98}
	062 Move W8, [X19+16]
	063 Move W9, [X21+12]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X9, [X20+48]
	066 Move X10, 0x4925
	067 NotImplemented "Instruction MOVK not yet implemented."
	068 NotImplemented "Instruction MOVK not yet implemented."
	069 Add W13, W8, 1
	070 NotImplemented "Instruction MOVK not yet implemented."
	071 Move X11, [X20+8]
	072 Move W12, [X20+88]
	073 Move [X19+16], W13
	074 Subtract X9, X19, X9
	075 Move W13, [X21+4]
	076 NotImplemented "Instruction SMULH not yet implemented."
	077 Move X10, X9
	078 ShiftRight X10, 63
	079 And X10, X10, 0x7FFFFFFF
	080 Move X9, X9
	081 ShiftRight X9, 3
	082 And X9, X9, 0x7FFFFFFF
	083 Add W9, W9, W10
	084 NotImplemented "Instruction LSLV not yet implemented."
	085 Add X9, X11, W9
	086 Multiply W8, W13, W8
	087 Add X22, X9, W8
	088 Move X22, X31
	089 Move X0, X22
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X22, [X31+32]
	093 Move X21, [X31+40]
	094 Move X24, [X31+16]
	095 Move X23, [X31+24]
	096 Move X30, [X31+64]
	097 Return X0
	098 Call 0x1C17F20

Method: System.Void FreeCheckedRef(Fusion.Allocator* a, ref T* ptr)

Disassembly:
	0x0227A830 LDR X8, [X22 + 0x38]
	0x0227A834 LDR X3, [X8]
	0x0227A838 MOV X0, X21
	0x0227A83C MOV X1, X20
	0x0227A840 MOV X2, X19
	0x0227A844 LDP X20, X19, [X31 + 0x20]
	0x0227A848 LDP X22, X21, [X31 + 0x10]
	0x0227A84C LDR X30, [X31], #0x30
	0x0227A850 B 0x22810F8
	0x0227A854 STR X30, [X31 - 0x30]!
	0x0227A858 STP X22, X21, [X31 + 0x10]
	0x0227A85C STP X20, X19, [X31 + 0x20]
	0x0227A860 LDR X8, [X3 + 0x38]
	0x0227A864 MOV X19, X2
	0x0227A868 MOV X20, X1
	0x0227A86C MOV X21, X0
	0x0227A870 CBNZ X8, 0x227A884
	0x0227A874 MOV X0, X3
	0x0227A878 MOV X22, X3
	0x0227A87C BL 0x1C5C6E0
	0x0227A880 LDR X8, [X22 + 0x38]
	0x0227A884 LDR X3, [X8]
	0x0227A888 MOV X0, X21
	0x0227A88C MOV X1, X20
	0x0227A890 MOV X2, X19
	0x0227A894 LDP X20, X19, [X31 + 0x20]
	0x0227A898 LDP X22, X21, [X31 + 0x10]
	0x0227A89C LDR X30, [X31], #0x30
	0x0227A8A0 B 0x22821F4
	0x0227A8A4 STR X30, [X31 - 0x30]!
	0x0227A8A8 STP X22, X21, [X31 + 0x10]
	0x0227A8AC STP X20, X19, [X31 + 0x20]
	0x0227A8B0 LDR X8, [X3 + 0x38]
	0x0227A8B4 MOV X19, X2
	0x0227A8B8 MOV X20, X1
	0x0227A8BC MOV X21, X0
	0x0227A8C0 CBNZ X8, 0x227A8D4
	0x0227A8C4 MOV X0, X3
	0x0227A8C8 MOV X22, X3
	0x0227A8CC BL 0x1C5C6E0
	0x0227A8D0 LDR X8, [X22 + 0x38]
	0x0227A8D4 LDR X3, [X8]
	0x0227A8D8 MOV X0, X21
	0x0227A8DC MOV X1, X20
	0x0227A8E0 MOV X2, X19
	0x0227A8E4 LDP X20, X19, [X31 + 0x20]
	0x0227A8E8 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, X1
	004 Move X1, [X1]
	005 Compare X1, 0
	006 JumpIfEqual {10}
	007 Move [X8], X31
	008 Move X2, X31
	009 Call Allocator.Free, X0, X1
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X19, X0
	015 Move X0, X19
	016 Call 0x3EB2AD0
	017 Move X19, X0
	018 Move X0, 0x1E7A000
	019 Move X0, [X0+2000]
	020 Call 0x1C17D08
	021 Move X8, [X19]
	022 Move X1, [X8]
	023 Call 0x1C18270
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {43}
	028 Move X19, [X19]
	029 Call 0x3EB2AE0
	030 Move X0, 0x1E82000
	031 Move X0, [X0+2224]
	032 Call 0x1C17D08
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X31
	039 Move X30, [X31+16]
	040 Move X19, [X31+24]
	041 Call Log.Exception, X0
	042 Return 
	043 Move W0, 8
	044 Call 0x3EB2AF0
	045 Move X8, [X19]
	046 Move [X0], X8
	047 Move X1, 0x1C3B000
	048 Add X1, X1, 3672
	049 Move X2, X31
	050 Call 0x3EB2B00
	051 Move X19, X0
	052 Call 0x3EB2AE0
	053 Move X0, X19
	054 Call 0x1D2D690
	055 Call 0x1991590

Method: System.Void Free(Fusion.Allocator* a, System.Void* ptr)

Disassembly:
	0x01E677A8 STR X30, [X31 + 0x8]
	0x01E677AC STP X20, X19, [X31 + 0x10]
	0x01E677B0 AND W20, W1, 0x1
	0x01E677B4 MOV X1, X31
	0x01E677B8 MOV V8.16B, V0.16B
	0x01E677BC MOV X19, X0
	0x01E677C0 BL 0x3C303D4
	0x01E677C4 STRB W20, [X19 + 0x14]
	0x01E677C8 STR S8, [X19 + 0x18]
	0x01E677CC LDP X20, X19, [X31 + 0x10]
	0x01E677D0 LDR X30, [X31 + 0x8]
	0x01E677D4 LDR V8, [X31], #0x20
	0x01E677D8 RET
	0x01E677DC MOV X1, X31
	0x01E677E0 B 0x33A51F0
	0x01E677E4 LDR W0, [X0 + 0x10]
	0x01E677E8 RET
	0x01E677EC STR W1, [X0 + 0x10]
	0x01E677F0 RET
	0x01E677F4 LDR W0, [X0 + 0x14]
	0x01E677F8 RET
	0x01E677FC STR W1, [X0 + 0x14]
	0x01E67800 RET
	0x01E67804 LDR X0, [X0 + 0x18]
	0x01E67808 RET
	0x01E6780C STR X1, [X0 + 0x18]
	0x01E67810 RET
	0x01E67814 MOV X1, X31
	0x01E67818 B 0x33A51F0
	0x01E6781C STP X30, X21, [X31 - 0x20]!
	0x01E67820 STP X20, X19, [X31 + 0x10]
	0x01E67824 MOV W20, W1
	0x01E67828 MOV X1, X31
	0x01E6782C MOV W19, W2
	0x01E67830 MOV X21, X0
	0x01E67834 BL 0x33A51F0
	0x01E67838 STP W20, W19, [X21 + 0x10]
	0x01E6783C LDP X20, X19, [X31 + 0x10]
	0x01E67840 LDP X30, X21, [X31], #0x20
	0x01E67844 RET
	0x01E67848 MOV X1, X31
	0x01E6784C B 0x33A51F0
	0x01E67850 MOV X1, X31
	0x01E67854 B 0x1E2E908
	0x01E67858 MOV X1, X31
	0x01E6785C B 0x33A51F0
	0x01E67860 LDR W0, [X0 + 0x10]
	0x01E67864 RET
	0x01E67868 STR W1, [X0 + 0x10]
	0x01E6786C RET
	0x01E67870 MOV X1, X31
	0x01E67874 B 0x33A51F0
	0x01E67878 LDR W0, [X0 + 0x10]
	0x01E6787C RET
	0x01E67880 STR W1, [X0 + 0x10]
	0x01E67884 RET
	0x01E67888 MOV X1, X31
	0x01E6788C B 0x33A51F0
	0x01E67890 LDR W0, [X0 + 0x10]
	0x01E67894 RET
	0x01E67898 STR W1, [X0 + 0x10]
	0x01E6789C RET
	0x01E678A0 MOV X1, X31
	0x01E678A4 B 0x33A51F0
	0x01E678A8 LDR W0, [X0 + 0x10]
	0x01E678AC RET
	0x01E678B0 STR W1, [X0 + 0x10]
	0x01E678B4 RET
	0x01E678B8 MOV X1, X31
	0x01E678BC B 0x33A51F0
	0x01E678C0 LDR W0, [X0 + 0x10]
	0x01E678C4 RET
	0x01E678C8 STR W1, [X0 + 0x10]
	0x01E678CC RET
	0x01E678D0 MOV X1, X31
	0x01E678D4 B 0x33A51F0
	0x01E678D8 LDR W0, [X0 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+8]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W9, [X0+88]
	007 Move W10, [X0+92]
	008 Move X19, X0
	009 NotImplemented "Instruction LSLV not yet implemented."
	010 Add X10, X8, W10
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X10, [X19+48]
	013 Subtract X8, X1, X8
	014 NotImplemented "Instruction ASRV not yet implemented."
	015 Move W9, 28
	016 NotImplemented "Instruction MADD not yet implemented."
	017 Move [X1], W31
	018 Compare X20, 0
	019 JumpIfEqual {80}
	020 Move W8, [X20+12]
	021 Move [X1], W8
	022 Move W10, [X19]
	023 Move W9, [X20+20]
	024 NotImplemented "Instruction LDRSW not yet implemented."
	025 Subtract W10, W1, W10
	026 Subtract W11, W9, 1
	027 Move [X20+12], W10
	028 Move [X20+20], W11
	029 Move X10, [X19+64]
	030 Add X10, X10, X8
	031 Move W10, [X10+12]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X19+80]
	034 Move X1, X19
	035 Move X2, X20
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Add X0, X9, X8
	039 Move X30, [X31+32]
	040 Call BlockList.MoveFirst, X0, X1, X2
	041 Return 
	042 Move X9, [X19+80]
	043 Move X1, X19
	044 Move X2, X20
	045 Add X0, X9, X8
	046 Call BlockList.Remove, X0, X1, X2
	047 Move X8, -20426752
	048 Move V0, [X8+94]
	049 Move X1, X19
	050 Move X2, X20
	051 Move [X20+8], V0
	052 Move X0, [X19+56]
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Call BlockList.AddFirst, X0, X1, X2
	057 Return 
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Return 
	062 Move X0, 0x228D000
	063 Move X0, [X0+1456]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0x2296000
	068 Move X0, [X0+3568]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Move X2, X31
	073 Call InvalidOperationException..ctor, X0, X1
	074 Move X0, 0x2296000
	075 Move X0, [X0+3576]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC
	080 Call 0x1C17F20

Method: System.Void DebugVerifyBucketIntegrity(Fusion.Allocator* a, System.Int32 index)

Disassembly:
	0x01E679B0 RET
	0x01E679B4 STR X30, [X31 - 0x40]!
	0x01E679B8 STP X24, X23, [X31 + 0x10]
	0x01E679BC STP X22, X21, [X31 + 0x20]
	0x01E679C0 STP X20, X19, [X31 + 0x30]
	0x01E679C4 ADRP X23, 0x2572000
	0x01E679C8 ADRP X24, 0x228C000
	0x01E679CC ADRP X21, 0x2295000
	0x01E679D0 ADRP X22, 0x2294000
	0x01E679D4 LDRB W8, [X23 + 0x102]
	0x01E679D8 LDR X24, [X24 + 0x618]
	0x01E679DC LDR X21, [X21 + 0xE48]
	0x01E679E0 LDR X22, [X22 + 0xCA8]
	0x01E679E4 MOV X20, X1
	0x01E679E8 MOV X19, X0
	0x01E679EC TBNZ X8, 0x0, 0x1E67A1C
	0x01E679F0 ADRP X0, 0x2294000
	0x01E679F4 LDR X0, [X0 + 0xCA8]
	0x01E679F8 BL 0x1C16CF4
	0x01E679FC ADRP X0, 0x228C000
	0x01E67A00 LDR X0, [X0 + 0x618]
	0x01E67A04 BL 0x1C16CF4
	0x01E67A08 ADRP X0, 0x2295000
	0x01E67A0C LDR X0, [X0 + 0xE48]
	0x01E67A10 BL 0x1C16CF4
	0x01E67A14 MOVZ W8, 0x1
	0x01E67A18 STRB W8, [X23 + 0x102]
	0x01E67A1C LDR X0, [X24]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+80]
	003 Add X8, X8, W1
	004 Move W11, [X8]
	005 Compare W11, 0
	006 JumpIfEqual {31}
	007 Move X10, [X0+64]
	008 Move X9, [X0]
	009 Move W8, W31
	010 Add X10, X10, W1
	011 Add X11, X9, W11
	012 Move W12, W8
	013 Move W8, W12
	014 Move TEMP, X12
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Compare X11, 0
	019 JumpIfEqual {33}
	020 Compare X10, 0
	021 JumpIfEqual {33}
	022 Move W12, [X11+20]
	023 Move W13, [X10+12]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W12, 1
	026 Compare X11, 0
	027 JumpIfEqual {33}
	028 Move W11, [X11+4]
	029 Compare W11, 0
	030 JumpIfNotEqual {11}
	031 Move X30, [X31+16]
	032 Return 
	033 Call 0x1C17F20

Method: System.Void Dispose(Fusion.Allocator* a)

Disassembly:
	0x01E67A20 MOVZ W1, 0x10000
	0x01E67A24 BL 0x1C16D6C
	0x01E67A28 STR X0, [X19 + 0x48]
	0x01E67A2C MOV X0, X19

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {6}
	003 Move X1, X31
	004 Call Native.Free, X0
	005 Return 
	006 Return 

Method: Fusion.Allocator* Create(Fusion.Allocator/Config config)

Disassembly:
	0x01E67A30 MOV X1, X31
	0x01E67A34 BL 0x1EF4E50
	0x01E67A38 LDR X0, [X21]
	0x01E67A3C BL 0x1C16F10
	0x01E67A40 MOV X1, X20
	0x01E67A44 MOV X2, X31
	0x01E67A48 MOV X21, X0
	0x01E67A4C BL 0x1E457C8
	0x01E67A50 STR X21, [X19 + 0x38]
	0x01E67A54 LDR X0, [X22]
	0x01E67A58 BL 0x1C16F10
	0x01E67A5C LDR X8, [X19]
	0x01E67A60 MOV X1, X19
	0x01E67A64 MOV X3, X31
	0x01E67A68 MOV X20, X0
	0x01E67A6C LDR X2, [X8 + 0x1C0]
	0x01E67A70 BL 0x2A77F04
	0x01E67A74 CBZ X21, 0x1E67A98
	0x01E67A78 MOV X0, X21
	0x01E67A7C MOV X1, X20
	0x01E67A80 LDP X20, X19, [X31 + 0x30]
	0x01E67A84 LDP X22, X21, [X31 + 0x20]
	0x01E67A88 LDP X24, X23, [X31 + 0x10]
	0x01E67A8C MOV X2, X31
	0x01E67A90 LDR X30, [X31], #0x40
	0x01E67A94 B 0x1E45628
	0x01E67A98 BL 0x1C16F20
	0x01E67A9C STP X30, X19, [X31 - 0x10]!
	0x01E67AA0 MOV X19, X0
	0x01E67AA4 LDR X0, [X0 + 0x38]
	0x01E67AA8 CBZ X0, 0x1E67AC4
	0x01E67AAC MOV X1, X31
	0x01E67AB0 BL 0x1E46E6C
	0x01E67AB4 MOV X0, X19
	0x01E67AB8 MOV X1, X31
	0x01E67ABC LDP X30, X19, [X31], #0x10
	0x01E67AC0 B 0x1EF4AE8
	0x01E67AC4 LDP X30, X19, [X31], #0x10
	0x01E67AC8 RET
	0x01E67ACC LDR X0, [X0 + 0x38]
	0x01E67AD0 CBZ X0, 0x1E67AF8
	0x01E67AD4 MOV W8, W1
	0x01E67AD8 AND W9, W3, 0x1
	0x01E67ADC MOV W1, W2
	0x01E67AE0 MOV W2, W8
	0x01E67AE4 MOV X3, X4
	0x01E67AE8 MOV W4, W5
	0x01E67AEC MOV W5, W9
	0x01E67AF0 MOV X6, X31
	0x01E67AF4 B 0x1E451E8
	0x01E67AF8 RET
	0x01E67AFC STP X30, X21, [X31 - 0x20]!
	0x01E67B00 STP X20, X19, [X31 + 0x10]
	0x01E67B04 STR X31, [X2]
	0x01E67B08 MOV X19, X2
	0x01E67B0C LDR X2, [X0 + 0x48]
	0x01E67B10 CBZ X2, 0x1E67B58
	0x01E67B14 LDR X8, [X2 + 0x18]
	0x01E67B18 MOV X20, X0
	0x01E67B1C MOV X21, X3
	0x01E67B20 STR W8, [X3]
	0x01E67B24 LDR X0, [X0 + 0x38]
	0x01E67B28 CBZ X0, 0x1E67B58
	0x01E67B2C MOV X3, X21
	0x01E67B30 MOV X4, X31
	0x01E67B34 BL 0x1E45370
	0x01E67B38 LDR W8, [X21]
	0x01E67B3C CMP W8, 0x1
	0x01E67B40 B.LT 0x1E67B4C
	0x01E67B44 LDR X8, [X20 + 0x48]
	0x01E67B48 STR X8, [X19]
	0x01E67B4C LDP X20, X19, [X31 + 0x10]
	0x01E67B50 LDP X30, X21, [X31], #0x20
	0x01E67B54 RET
	0x01E67B58 BL 0x1C16F20
	0x01E67B5C STR X30, [X31 - 0x20]!
	0x01E67B60 STP X20, X19, [X31 + 0x10]
	0x01E67B64 ADRP X20, 0x2572000
	0x01E67B68 LDRB W8, [X20 + 0x103]
	0x01E67B6C MOV X19, X0
	0x01E67B70 TBNZ X8, 0x0, 0x1E67BA0
	0x01E67B74 ADRP X0, 0x2295000
	0x01E67B78 LDR X0, [X0 + 0xE50]
	0x01E67B7C BL 0x1C16CF4
	0x01E67B80 ADRP X0, 0x2295000
	0x01E67B84 LDR X0, [X0 + 0xE58]
	0x01E67B88 BL 0x1C16CF4
	0x01E67B8C ADRP X0, 0x2295000
	0x01E67B90 LDR X0, [X0 + 0xE60]
	0x01E67B94 BL 0x1C16CF4
	0x01E67B98 MOVZ W8, 0x1
	0x01E67B9C STRB W8, [X20 + 0x103]
	0x01E67BA0 LDR X0, [X19 + 0x38]
	0x01E67BA4 CBZ X0, 0x1E67C00
	0x01E67BA8 MOV X1, X31
	0x01E67BAC BL 0x1E46054
	0x01E67BB0 LDR X0, [X19 + 0x18]
	0x01E67BB4 CBZ X0, 0x1E67C00
	0x01E67BB8 ADRP X8, 0x2295000
	0x01E67BBC LDR X8, [X8 + 0xE58]
	0x01E67BC0 LDR X1, [X8]
	0x01E67BC4 BL 0x24EECE0
	0x01E67BC8 LDR X0, [X19 + 0x20]
	0x01E67BCC CBZ X0, 0x1E67C00
	0x01E67BD0 ADRP X8, 0x2295000
	0x01E67BD4 LDR X8, [X8 + 0xE60]
	0x01E67BD8 LDR X1, [X8]
	0x01E67BDC BL 0x24EECE0
	0x01E67BE0 LDR X0, [X19 + 0x10]
	0x01E67BE4 CBZ X0, 0x1E67C00
	0x01E67BE8 ADRP X8, 0x2295000
	0x01E67BEC LDR X8, [X8 + 0xE50]
	0x01E67BF0 LDP X20, X19, [X31 + 0x10]
	0x01E67BF4 LDR X1, [X8]
	0x01E67BF8 LDR X30, [X31], #0x20
	0x01E67BFC B 0x2AA5220
	0x01E67C00 BL 0x1C16F20
	0x01E67C04 LDRB W8, [X0 + 0x40]
	0x01E67C08 CBZ W8, 0x1E67C10
	0x01E67C0C RET
	0x01E67C10 STR X31, [X0 + 0x38]
	0x01E67C14 RET
	0x01E67C18 LDRB W0, [X0 + 0x10]
	0x01E67C1C RET
	0x01E67C20 AND W8, W1, 0x1
	0x01E67C24 STRB W8, [X0 + 0x10]
	0x01E67C28 RET
	0x01E67C2C RET
	0x01E67C30 RET
	0x01E67C34 MOV X2, X1
	0x01E67C38 MOVZ W1, 0x7FF3
	0x01E67C3C B 0x1E67C40
	0x01E67C40 STP X30, X23, [X31 - 0x30]!
	0x01E67C44 STP X22, X21, [X31 + 0x10]
	0x01E67C48 STP X20, X19, [X31 + 0x20]
	0x01E67C4C ADRP X22, 0x2572000
	0x01E67C50 LDRB W8, [X22 + 0x106]
	0x01E67C54 MOV X19, X2
	0x01E67C58 MOV W20, W1
	0x01E67C5C MOV X21, X0
	0x01E67C60 TBNZ X8, 0x0, 0x1E67C84
	0x01E67C64 ADRP X0, 0x2295000
	0x01E67C68 LDR X0, [X0 + 0xE68]
	0x01E67C6C BL 0x1C16CF4
	0x01E67C70 ADRP X0, 0x2295000
	0x01E67C74 LDR X0, [X0 + 0xE70]
	0x01E67C78 BL 0x1C16CF4
	0x01E67C7C MOVZ W8, 0x1
	0x01E67C80 STRB W8, [X22 + 0x106]
	0x01E67C84 MOV W0, W20
	0x01E67C88 BL 0x1E685DC
	0x01E67C8C LDR X8, [X21 + 0x28]
	0x01E67C90 CBZ X8, 0x1E67D30
	0x01E67C94 LDR X22, [X8 + 0x1A8]
	0x01E67C98 MOV W20, W0
	0x01E67C9C CBZ X22, 0x1E67CE8
	0x01E67CA0 ADRP X8, 0x2295000
	0x01E67CA4 LDR X8, [X8 + 0xE70]
	0x01E67CA8 ADRP X23, 0x2295000
	0x01E67CAC LDR X0, [X8]
	0x01E67CB0 LDR X23, [X23 + 0xE68]
	0x01E67CB4 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+144], X30
	003 Move [X31+160], X26
	004 Move [X31+168], X25
	005 Move [X31+176], X24
	006 Move [X31+184], X23
	007 Move [X31+192], X22
	008 Move [X31+200], X21
	009 Move [X31+208], X20
	010 Move [X31+216], X19
	011 Move X19, 0x2573000
	012 Move W8, [X19+251]
	013 Move X21, X1
	014 Move X22, X0
	015 Move X23, X0
	016 ShiftRight X23, 32
	017 And X23, X23, 0x7FFFFFFF
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x2296000
	023 Move X0, [X0+3584]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+251], W8
	027 Move W8, 1
	028 NotImplemented "Instruction LSLV not yet implemented."
	029 NotImplemented "Instruction LSLV not yet implemented."
	030 Move W10, 28
	031 Add W24, W8, 7
	032 Add W7, W9, 8
	033 NotImplemented "Instruction SBFM not yet implemented."
	034 Multiply W5, W23, W10
	035 Move W8, 8
	036 Add X9, X31, 88
	037 Add X10, X31, 96
	038 Add X11, X31, 104
	039 Add X12, X31, 112
	040 Add X13, X31, 120
	041 Add X14, X31, 128
	042 Move [X31+64], W8
	043 Add X8, X31, 136
	044 Move [X31+48], X10
	045 Move [X31+56], X9
	046 Add X9, X31, 152
	047 Move W0, 112
	048 Move W2, 912
	049 Move W3, 456
	050 Move W4, 8
	051 Move W1, W20
	052 Move W6, W21
	053 Move [X31+152], X31
	054 Move [X31+128], X31
	055 Move [X31+136], X31
	056 Move [X31+112], X31
	057 Move [X31+120], X31
	058 Move [X31+96], X31
	059 Move [X31+104], X31
	060 Move [X31+88], X31
	061 Move [X31+72], X31
	062 Move [X31+32], X12
	063 Move [X31+40], X11
	064 Move [X31+16], X14
	065 Move [X31+24], X13
	066 Move [X31], X9
	067 Move [X31+8], X8
	068 Call Native.MallocAndClearBlock, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16
	069 Move X19, [X31+152]
	070 Compare X19, 0
	071 JumpIfEqual {183}
	072 Move [X19+96], W21
	073 Move [X19], X19
	074 Move X9, [X31+96]
	075 Move X12, [X31+104]
	076 Add X10, X19, W0
	077 Move X21, 0x2296000
	078 Move W1, 8
	079 Move [X19+16], X12
	080 Move [X19+24], X9
	081 Move X9, [X31+136]
	082 Move X2, X31
	083 Subtract W11, W10, W9
	084 Move [X19+104], W11
	085 Move X11, [X31+120]
	086 Subtract W10, W10, W11
	087 Move [X19+32], X9
	088 Move [X19+40], X11
	089 Move [X19+108], W10
	090 Move X10, [X31+128]
	091 Move [X19+80], X11
	092 Move [X19+88], X22
	093 Move [X19+64], X10
	094 Move [X19+72], X9
	095 Move X8, [X31+112]
	096 Move [X19+48], X12
	097 Move [X19+56], X8
	098 Move X0, [X31+88]
	099 Move X21, [X21+3584]
	100 Call Native.AlignPointer, X0, X1
	101 Move X22, X31
	102 Move X25, X31
	103 Move [X19+8], X0
	104 Move X0, [X21]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {110}
	108 Call 0x1C17DFC
	109 Move X0, [X21]
	110 Move X8, [X0+184]
	111 Move X8, [X8]
	112 Compare X8, 0
	113 JumpIfEqual {183}
	114 NotImplemented "Instruction LDRSW not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move W9, [X0+224]
	117 Move X26, [X19+64]
	118 Compare W9, 0
	119 JumpIfNotEqual {126}
	120 Call 0x1C17DFC
	121 Move X8, [X21]
	122 Move X8, [X8+184]
	123 Move X8, [X8]
	124 Compare X8, 0
	125 JumpIfEqual {183}
	126 Move W9, [X8+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Add X8, X8, X25
	129 Move W8, [X8+32]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 NotImplemented "Instruction SDIV not yet implemented."
	132 Move W9, W31
	133 Move W10, W8
	134 ShiftRight W10, 29
	135 And W10, W10, 0xFFFFFFF
	136 NotImplemented "Instruction BFM not yet implemented."
	137 Add X9, X22, X26
	138 Or X10, X25, X10
	139 Add X25, X25, 1
	140 Add X22, X22, 16
	141 Move [X9], X10
	142 Move [X9+8], X8
	143 NotImplemented "Instruction CMP not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X8, X31
	146 Move W9, W31
	147 NotImplemented "Instruction CSINC not yet implemented."
	148 Move X11, [X19+64]
	149 Add X11, X11, W9
	150 NotImplemented "Instruction LDRSW not yet implemented."
	151 Move X12, [X19+72]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 NotImplemented "Instruction CINC not yet implemented."
	154 Move [X8], W9
	155 Add X8, X8, 1
	156 NotImplemented "Instruction CMP not yet implemented."
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Move X20, X31
	159 Move X21, X31
	160 Move W22, 255
	161 Move X8, [X19+48]
	162 Add X2, X20, X8
	163 Move [X2+8], W22
	164 Move [X2+24], W21
	165 Move X0, [X19+56]
	166 Move X1, X19
	167 Call BlockList.AddLast, X0, X1, X2
	168 Add X21, X21, 1
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Add X20, X20, 28
	171 Move X0, X19
	172 Move X20, [X31+208]
	173 Move X19, [X31+216]
	174 Move X22, [X31+192]
	175 Move X21, [X31+200]
	176 Move X24, [X31+176]
	177 Move X23, [X31+184]
	178 Move X26, [X31+160]
	179 Move X25, [X31+168]
	180 Move X30, [X31+144]
	181 Add X31, X31, 224
	182 Return X0
	183 Call 0x1C17F20
	184 Call 0x1C17F28

