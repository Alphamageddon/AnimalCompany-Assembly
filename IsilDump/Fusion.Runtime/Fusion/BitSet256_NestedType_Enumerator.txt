Type: Fusion.BitSet256/Enumerator

Method: System.Void .ctor(System.UInt64* bits)

Disassembly:
	0x01E89FC0 STR X30, [X31 + 0x50]
	0x01E89FC4 STP X22, X21, [X31 + 0x60]
	0x01E89FC8 STP X20, X19, [X31 + 0x70]
	0x01E89FCC MRS X21, 0xC000

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move [X0], X1
	005 Move [X0+8], W8
	006 Return 

Method: System.Int32 get_Current()

Disassembly:
	0x01E8A218 RET
	0x01E8A21C BL 0x3EB1B20

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Void Reset()

Disassembly:
	0x01E8A220 SUB X31, X31, 0x60
	0x01E8A224 STP X30, X19, [X31 + 0x50]
	0x01E8A228 MRS X19, 0xC000

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move [X0+8], W8
	005 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01E8A22C LDR X8, [X19 + 0x28]
	0x01E8A230 STR X8, [X31 + 0x48]
	0x01E8A234 LDP V1, V0, [X1 + 0x20]
	0x01E8A238 LDP V3, V2, [X1]
	0x01E8A23C ADD X1, X31, 0x0
	0x01E8A240 STP V1, V0, [X31 + 0x20]
	0x01E8A244 STP V3, V2, [X31]
	0x01E8A248 BL 0x1E8A074
	0x01E8A24C LDR X8, [X19 + 0x28]
	0x01E8A250 LDR X9, [X31 + 0x48]
	0x01E8A254 CMP X8, X9
	0x01E8A258 B.NE 0x1E8A270
	0x01E8A25C LDP X30, X19, [X31 + 0x50]
	0x01E8A260 EOR W8, W0, 0x1
	0x01E8A264 AND W0, W8, 0x1
	0x01E8A268 ADD X31, X31, 0x60
	0x01E8A26C RET
	0x01E8A270 BL 0x3EB1B20
	0x01E8A274 SUB X31, X31, 0x10
	0x01E8A278 STR X31, [X31 + 0x8]
	0x01E8A27C LDR W8, [X0]
	0x01E8A280 ADD W8, W8, 0x1
	0x01E8A284 CMP W8, 0x1FF
	0x01E8A288 STR W8, [X0]
	0x01E8A28C B.GT 0x1E8A350
	0x01E8A290 ADD X9, X0, 0x8
	0x01E8A294 MOVZ W10, 0x1
	0x01E8A298 ADD X11, X31, 0x8
	0x01E8A29C ADD W12, W8, 0x3F
	0x01E8A2A0 CMP W8, 0x0
	0x01E8A2A4 CSEL W12, W12, W8, LT
	0x01E8A2A8 SBFM W13, W12, 0x6, 0x1F
	0x01E8A2AC LDR X14, [X9, W13, SXTW]
	0x01E8A2B0 AND W12, W12, 0xFFFFFFC0
	0x01E8A2B4 SUB W15, W8, W12
	0x01E8A2B8 LSLV X12, X10, X15
	0x01E8A2BC ANDS X12, X14, X12, 0x0
	0x01E8A2C0 STR X14, [X31 + 0x8]
	0x01E8A2C4 B.NE 0x1E8A344
	0x01E8A2C8 CBZ X14, 0x1E8A320
	0x01E8A2CC SXTB W16, W15
	0x01E8A2D0 UBFM W17, W16, 0xA, 0xE
	0x01E8A2D4 ADD W17, W15, W17
	0x01E8A2D8 SBFM W17, W17, 0x5, 0x7
	0x01E8A2DC LDR W17, [X11, W17, SXTW]
	0x01E8A2E0 CBZ W17, 0x1E8A328
	0x01E8A2E4 UBFM W16, W16, 0xB, 0xE
	0x01E8A2E8 ADD W15, W15, W16
	0x01E8A2EC SBFM W15, W15, 0x4, 0x7
	0x01E8A2F0 LDRH W15, [X11, W15, SXTW]
	0x01E8A2F4 CBZ W15, 0x1E8A330
	0x01E8A2F8 MOV W15, W8
	0x01E8A2FC ADD W8, W8, 0x1
	0x01E8A300 ADD W16, W15, 0x40
	0x01E8A304 CMP W8, 0x0
	0x01E8A308 CSINC W15, W16, W15, LT
	0x01E8A30C CMP W13, W15, ASR
	0x01E8A310 B.NE 0x1E8A334
	0x01E8A314 LSRV X15, X14, X8
	0x01E8A318 TBZ X15, 0x0, 0x1E8A2F8

ISIL:
	001 Subtract X31, X31, 16
	002 Move [X31+8], X31
	003 Move W8, [X0+8]
	004 Add W8, W8, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move [X0+8], W8
	007 Move X9, [X0]
	008 Move W10, 1
	009 Add X11, X31, 8
	010 Add W12, W8, 63
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 NotImplemented "Instruction SBFM not yet implemented."
	014 Move X14, [X9]
	015 And W12, W12, 0xFFFFFFC0
	016 Subtract W15, W8, W12
	017 NotImplemented "Instruction LSLV not yet implemented."
	018 And X12, X14, X12
	019 Move [X31+8], X14
	020 Compare X14, 0
	021 JumpIfEqual {50}
	022 NotImplemented "Instruction SXTB not yet implemented."
	023 Move W17, W16
	024 ShiftRight W17, 10
	025 And W17, W17, 0x3FFF
	026 Add W17, W15, W17
	027 NotImplemented "Instruction SBFM not yet implemented."
	028 Move W17, [X11]
	029 Compare W17, 0
	030 JumpIfEqual {51}
	031 Move W16, W16
	032 ShiftRight W16, 11
	033 And W16, W16, 0x3FFF
	034 Add W15, W15, W16
	035 NotImplemented "Instruction SBFM not yet implemented."
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Compare W15, 0
	038 JumpIfEqual {52}
	039 Move W15, W8
	040 Add W8, W8, 1
	041 Add W16, W15, 64
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSINC not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction LSRV not yet implemented."
	046 Move TEMP, X15
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {39}
	050 Add W8, W8, 64
	051 Add W8, W8, 32
	052 Add W8, W8, 16
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X0+8], W8
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSET not yet implemented."
	057 Move W0, W31
	058 Move [X0+8], W8
	059 Move W0, 1
	060 Add X31, X31, 16
	061 Return X0

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01E8A31C B 0x1E8A35C
	0x01E8A320 ADD W8, W8, 0x40
	0x01E8A324 B 0x1E8A334
	0x01E8A328 ADD W8, W8, 0x20
	0x01E8A32C B 0x1E8A334
	0x01E8A330 ADD W8, W8, 0x10
	0x01E8A334 CMP W8, 0x200
	0x01E8A338 STR W8, [X0]
	0x01E8A33C B.LT 0x1E8A29C
	0x01E8A340 MOVN W8, 0x0
	0x01E8A344 CMP X12, 0x0
	0x01E8A348 CSET W0, NE
	0x01E8A34C B 0x1E8A364
	0x01E8A350 MOV W0, W31
	0x01E8A354 MOVN W8, 0x0
	0x01E8A358 B 0x1E8A364
	0x01E8A35C STR W8, [X0]
	0x01E8A360 MOVZ W0, 0x1
	0x01E8A364 STR W8, [X1]
	0x01E8A368 ADD X31, X31, 0x10
	0x01E8A36C RET
	0x01E8A370 LDR W0, [X0 + 0x8]
	0x01E8A374 RET

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2550000
	007 Move X20, 0x226A000
	008 Move W8, [X21+552]
	009 Move X20, [X20+1880]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x226A000
	016 Move X0, [X0+1880]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+552], W8
	020 Move W8, [X19+8]
	021 Move X0, [X20]
	022 Add X1, X31, 12
	023 Move [X31+12], W8
	024 Call 0x1C17E04
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X30, [X31+16]
	028 Move X21, [X31+24]
	029 Add X31, X31, 48
	030 Return X0

Method: System.Void Dispose()

Disassembly:
	0x01E8A378 MOVN W8, 0x0
	0x01E8A37C STR W8, [X0 + 0x8]
	0x01E8A380 RET
	0x01E8A384 SUB X31, X31, 0x10
	0x01E8A388 STR X31, [X31 + 0x8]
	0x01E8A38C LDR W8, [X0 + 0x8]
	0x01E8A390 ADD W8, W8, 0x1
	0x01E8A394 CMP W8, 0x1FF
	0x01E8A398 STR W8, [X0 + 0x8]
	0x01E8A39C B.GT 0x1E8A45C
	0x01E8A3A0 LDR X9, [X0]
	0x01E8A3A4 MOVZ W10, 0x1
	0x01E8A3A8 ADD X11, X31, 0x8
	0x01E8A3AC ADD W12, W8, 0x3F
	0x01E8A3B0 CMP W8, 0x0
	0x01E8A3B4 CSEL W12, W12, W8, LT
	0x01E8A3B8 SBFM W13, W12, 0x6, 0x1F
	0x01E8A3BC LDR X14, [X9, W13, SXTW]
	0x01E8A3C0 AND W12, W12, 0xFFFFFFC0
	0x01E8A3C4 SUB W15, W8, W12
	0x01E8A3C8 LSLV X12, X10, X15
	0x01E8A3CC ANDS X12, X14, X12, 0x0
	0x01E8A3D0 STR X14, [X31 + 0x8]
	0x01E8A3D4 B.NE 0x1E8A450
	0x01E8A3D8 CBZ X14, 0x1E8A430
	0x01E8A3DC SXTB W16, W15
	0x01E8A3E0 UBFM W17, W16, 0xA, 0xE
	0x01E8A3E4 ADD W17, W15, W17
	0x01E8A3E8 SBFM W17, W17, 0x5, 0x7
	0x01E8A3EC LDR W17, [X11, W17, SXTW]
	0x01E8A3F0 CBZ W17, 0x1E8A438
	0x01E8A3F4 UBFM W16, W16, 0xB, 0xE
	0x01E8A3F8 ADD W15, W15, W16
	0x01E8A3FC SBFM W15, W15, 0x4, 0x7
	0x01E8A400 LDRH W15, [X11, W15, SXTW]
	0x01E8A404 CBZ W15, 0x1E8A440
	0x01E8A408 MOV W15, W8
	0x01E8A40C ADD W8, W8, 0x1
	0x01E8A410 ADD W16, W15, 0x40
	0x01E8A414 CMP W8, 0x0
	0x01E8A418 CSINC W15, W16, W15, LT
	0x01E8A41C CMP W13, W15, ASR
	0x01E8A420 B.NE 0x1E8A444
	0x01E8A424 LSRV X15, X14, X8
	0x01E8A428 TBZ X15, 0x0, 0x1E8A408
	0x01E8A42C B 0x1E8A464
	0x01E8A430 ADD W8, W8, 0x40
	0x01E8A434 B 0x1E8A444
	0x01E8A438 ADD W8, W8, 0x20
	0x01E8A43C B 0x1E8A444
	0x01E8A440 ADD W8, W8, 0x10
	0x01E8A444 CMP W8, 0x200
	0x01E8A448 STR W8, [X0 + 0x8]
	0x01E8A44C B.LT 0x1E8A3AC
	0x01E8A450 CMP X12, 0x0
	0x01E8A454 CSET W0, NE
	0x01E8A458 B 0x1E8A46C
	0x01E8A45C MOV W0, W31
	0x01E8A460 B 0x1E8A46C
	0x01E8A464 STR W8, [X0 + 0x8]
	0x01E8A468 MOVZ W0, 0x1
	0x01E8A46C ADD X31, X31, 0x10
	0x01E8A470 RET
	0x01E8A474 SUB X31, X31, 0x30
	0x01E8A478 STP X30, X21, [X31 + 0x10]
	0x01E8A47C STP X20, X19, [X31 + 0x20]
	0x01E8A480 ADRP X21, 0x254F000
	0x01E8A484 ADRP X20, 0x2269000
	0x01E8A488 LDRB W8, [X21 + 0x235]
	0x01E8A48C LDR X20, [X20 + 0x758]
	0x01E8A490 MOV X19, X0
	0x01E8A494 TBNZ X8, 0x0, 0x1E8A4AC
	0x01E8A498 ADRP X0, 0x2269000
	0x01E8A49C LDR X0, [X0 + 0x758]
	0x01E8A4A0 BL 0x1C16CF4
	0x01E8A4A4 MOVZ W8, 0x1
	0x01E8A4A8 STRB W8, [X21 + 0x235]
	0x01E8A4AC LDR W8, [X19 + 0x8]
	0x01E8A4B0 LDR X0, [X20]
	0x01E8A4B4 ADD X1, X31, 0xC
	0x01E8A4B8 STR W8, [X31 + 0xC]
	0x01E8A4BC BL 0x1C16E04
	0x01E8A4C0 LDP X20, X19, [X31 + 0x20]
	0x01E8A4C4 LDP X30, X21, [X31 + 0x10]
	0x01E8A4C8 ADD X31, X31, 0x30
	0x01E8A4CC RET
	0x01E8A4D0 MOVN W8, 0x0
	0x01E8A4D4 STR X31, [X0]
	0x01E8A4D8 STR W8, [X0 + 0x8]
	0x01E8A4DC RET
	0x01E8A4E0 STR D8, [X31 - 0x20]!
	0x01E8A4E4 STP X30, X19, [X31 + 0x10]
	0x01E8A4E8 ADRP X19, 0x254E000
	0x01E8A4EC LDRB W8, [X19 + 0xE8F]
	0x01E8A4F0 MOV V8.16B, V0.16B
	0x01E8A4F4 CBNZ W8, 0x1E8A50C
	0x01E8A4F8 ADRP X0, 0x2270000
	0x01E8A4FC LDR X0, [X0 + 0xC68]
	0x01E8A500 BL 0x1C16CF4
	0x01E8A504 MOVZ W8, 0x1
	0x01E8A508 STRB W8, [X19 + 0xE8F]
	0x01E8A50C ADRP X8, 0x2270000
	0x01E8A510 LDR X8, [X8 + 0xC68]
	0x01E8A514 LDR X0, [X8]
	0x01E8A518 LDR W8, [X0 + 0xE0]
	0x01E8A51C CBNZ W8, 0x1E8A524
	0x01E8A520 BL 0x1C16DFC
	0x01E8A524 FMOV W8, S8
	0x01E8A528 MOVZ W9, 0x44800000
	0x01E8A52C UBFM W8, W8, 0x1F, 0x1F
	0x01E8A530 FMOV S0, 0.5
	0x01E8A534 FMOV S1, W9
	0x01E8A538 UCVTF S2, W8
	0x01E8A53C MOVZ W9, 0x7F800000
	0x01E8A540 FMUL S1, S8, S1
	0x01E8A544 FSUB S0, S0, S2
	0x01E8A548 FMOV S2, W9
	0x01E8A54C FADD S0, S1, S0
	0x01E8A550 FCVTZS W8, S0
	0x01E8A554 FCMP S0, S2
	0x01E8A558 MOVZ W9, 0x80000000
	0x01E8A55C LDP X30, X19, [X31 + 0x10]
	0x01E8A560 CSEL W8, W9, W8, EQ
	0x01E8A564 SBFM W9, W8, 0x1F, 0x1F
	0x01E8A568 EOR W0, W9, W8, 0x1
	0x01E8A56C LDR V8, [X31], #0x20
	0x01E8A570 RET
	0x01E8A574 STR X30, [X31 - 0x20]!
	0x01E8A578 STP X20, X19, [X31 + 0x10]
	0x01E8A57C ADRP X20, 0x254E000
	0x01E8A580 LDRB W8, [X20 + 0xE90]
	0x01E8A584 MOV X19, X0
	0x01E8A588 CBNZ W8, 0x1E8A5A0
	0x01E8A58C ADRP X0, 0x2270000
	0x01E8A590 LDR X0, [X0 + 0xC68]
	0x01E8A594 BL 0x1C16CF4
	0x01E8A598 MOVZ W8, 0x1
	0x01E8A59C STRB W8, [X20 + 0xE90]
	0x01E8A5A0 ADRP X8, 0x2270000
	0x01E8A5A4 LDR X8, [X8 + 0xC68]
	0x01E8A5A8 LDR X0, [X8]
	0x01E8A5AC LDR W8, [X0 + 0xE0]
	0x01E8A5B0 CBNZ W8, 0x1E8A5B8
	0x01E8A5B4 BL 0x1C16DFC
	0x01E8A5B8 AND W8, W19, 0x1
	0x01E8A5BC SUB W8, W31, W8
	0x01E8A5C0 EOR W8, W8, W19, 0x1
	0x01E8A5C4 LDP X20, X19, [X31 + 0x10]
	0x01E8A5C8 MOVZ W9, 0x3A800000
	0x01E8A5CC SCVTF S0, W8
	0x01E8A5D0 FMOV S1, W9
	0x01E8A5D4 FMUL S0, S0, S1
	0x01E8A5D8 LDR X30, [X31], #0x20
	0x01E8A5DC RET
	0x01E8A5E0 LDR W8, [X0]
	0x01E8A5E4 CMP W8, W1
	0x01E8A5E8 CSET W0, EQ
	0x01E8A5EC RET
	0x01E8A5F0 STP X30, X21, [X31 - 0x20]!
	0x01E8A5F4 STP X20, X19, [X31 + 0x10]
	0x01E8A5F8 ADRP X21, 0x254F000
	0x01E8A5FC LDRB W8, [X21 + 0x236]
	0x01E8A600 MOV X20, X1
	0x01E8A604 MOV X19, X0
	0x01E8A608 TBNZ X8, 0x0, 0x1E8A620
	0x01E8A60C ADRP X0, 0x2273000
	0x01E8A610 LDR X0, [X0 + 0xFA8]
	0x01E8A614 BL 0x1C16CF4
	0x01E8A618 MOVZ W8, 0x1
	0x01E8A61C STRB W8, [X21 + 0x236]
	0x01E8A620 CBZ X20, 0x1E8A63C
	0x01E8A624 ADRP X8, 0x2273000
	0x01E8A628 LDR X8, [X8 + 0xFA8]
	0x01E8A62C LDR X9, [X20]
	0x01E8A630 LDR X8, [X8]
	0x01E8A634 CMP X9, X8
	0x01E8A638 B.EQ 0x1E8A644
	0x01E8A63C MOV W0, W31
	0x01E8A640 B 0x1E8A65C
	0x01E8A644 MOV X0, X20
	0x01E8A648 BL 0x1C16E08
	0x01E8A64C LDR W8, [X0]
	0x01E8A650 LDR W9, [X19]
	0x01E8A654 CMP W9, W8
	0x01E8A658 CSET W0, EQ
	0x01E8A65C LDP X20, X19, [X31 + 0x10]
	0x01E8A660 LDP X30, X21, [X31], #0x20
	0x01E8A664 RET
	0x01E8A668 LDR W0, [X0]
	0x01E8A66C RET
	0x01E8A670 CMP W0, W1
	0x01E8A674 CSET W0, EQ
	0x01E8A678 RET
	0x01E8A67C CMP W0, W1
	0x01E8A680 CSET W0, NE
	0x01E8A684 RET
	0x01E8A688 STR X30, [X31 - 0x20]!
	0x01E8A68C STP X20, X19, [X31 + 0x10]
	0x01E8A690 ADRP X20, 0x254E000
	0x01E8A694 LDRB W8, [X20 + 0xE90]
	0x01E8A698 LDR W19, [X0]
	0x01E8A69C CBNZ W8, 0x1E8A6B4
	0x01E8A6A0 ADRP X0, 0x2270000
	0x01E8A6A4 LDR X0, [X0 + 0xC68]
	0x01E8A6A8 BL 0x1C16CF4
	0x01E8A6AC MOVZ W8, 0x1
	0x01E8A6B0 STRB W8, [X20 + 0xE90]
	0x01E8A6B4 ADRP X8, 0x2270000
	0x01E8A6B8 LDR X8, [X8 + 0xC68]
	0x01E8A6BC LDR X0, [X8]
	0x01E8A6C0 LDR W8, [X0 + 0xE0]
	0x01E8A6C4 CBNZ W8, 0x1E8A6CC
	0x01E8A6C8 BL 0x1C16DFC
	0x01E8A6CC AND W8, W19, 0x1
	0x01E8A6D0 SUB W8, W31, W8
	0x01E8A6D4 EOR W8, W8, W19, 0x1
	0x01E8A6D8 LDP X20, X19, [X31 + 0x10]
	0x01E8A6DC MOVZ W9, 0x3A800000
	0x01E8A6E0 SCVTF S0, W8
	0x01E8A6E4 FMOV S1, W9
	0x01E8A6E8 FMUL S0, S0, S1
	0x01E8A6EC LDR X30, [X31], #0x20
	0x01E8A6F0 RET
	0x01E8A6F4 STR D8, [X31 - 0x20]!
	0x01E8A6F8 STR X30, [X31 + 0x8]
	0x01E8A6FC STP X20, X19, [X31 + 0x10]
	0x01E8A700 ADRP X20, 0x254E000
	0x01E8A704 LDRB W8, [X20 + 0xE8F]
	0x01E8A708 MOV V8.16B, V0.16B
	0x01E8A70C MOV X19, X0
	0x01E8A710 CBNZ W8, 0x1E8A728
	0x01E8A714 ADRP X0, 0x2270000
	0x01E8A718 LDR X0, [X0 + 0xC68]
	0x01E8A71C BL 0x1C16CF4
	0x01E8A720 MOVZ W8, 0x1
	0x01E8A724 STRB W8, [X20 + 0xE8F]
	0x01E8A728 ADRP X8, 0x2270000
	0x01E8A72C LDR X8, [X8 + 0xC68]
	0x01E8A730 LDR X0, [X8]
	0x01E8A734 LDR W8, [X0 + 0xE0]
	0x01E8A738 CBNZ W8, 0x1E8A740
	0x01E8A73C BL 0x1C16DFC
	0x01E8A740 FMOV W8, S8
	0x01E8A744 MOVZ W9, 0x44800000
	0x01E8A748 UBFM W8, W8, 0x1F, 0x1F
	0x01E8A74C FMOV S0, 0.5
	0x01E8A750 FMOV S1, W9
	0x01E8A754 UCVTF S2, W8
	0x01E8A758 MOVZ W9, 0x7F800000
	0x01E8A75C FMUL S1, S8, S1
	0x01E8A760 FSUB S0, S0, S2
	0x01E8A764 FMOV S2, W9
	0x01E8A768 FADD S0, S1, S0
	0x01E8A76C FCVTZS W8, S0
	0x01E8A770 FCMP S0, S2
	0x01E8A774 MOVZ W9, 0x80000000
	0x01E8A778 CSEL W8, W9, W8, EQ
	0x01E8A77C SBFM W9, W8, 0x1F, 0x1F
	0x01E8A780 EOR W8, W9, W8, 0x1
	0x01E8A784 STR W8, [X19]
	0x01E8A788 LDP X20, X19, [X31 + 0x10]
	0x01E8A78C LDR X30, [X31 + 0x8]
	0x01E8A790 LDR V8, [X31], #0x20
	0x01E8A794 RET
	0x01E8A798 STR X30, [X31 - 0x20]!
	0x01E8A79C STP X20, X19, [X31 + 0x10]
	0x01E8A7A0 ADRP X20, 0x254E000
	0x01E8A7A4 LDRB W8, [X20 + 0xE90]
	0x01E8A7A8 LDR W19, [X0 + 0x4]
	0x01E8A7AC CBNZ W8, 0x1E8A7C4
	0x01E8A7B0 ADRP X0, 0x2270000
	0x01E8A7B4 LDR X0, [X0 + 0xC68]
	0x01E8A7B8 BL 0x1C16CF4
	0x01E8A7BC MOVZ W8, 0x1
	0x01E8A7C0 STRB W8, [X20 + 0xE90]
	0x01E8A7C4 ADRP X8, 0x2270000
	0x01E8A7C8 LDR X8, [X8 + 0xC68]
	0x01E8A7CC LDR X0, [X8]
	0x01E8A7D0 LDR W8, [X0 + 0xE0]
	0x01E8A7D4 CBNZ W8, 0x1E8A7DC
	0x01E8A7D8 BL 0x1C16DFC
	0x01E8A7DC AND W8, W19, 0x1
	0x01E8A7E0 SUB W8, W31, W8
	0x01E8A7E4 EOR W8, W8, W19, 0x1
	0x01E8A7E8 LDP X20, X19, [X31 + 0x10]
	0x01E8A7EC MOVZ W9, 0x3A800000
	0x01E8A7F0 SCVTF S0, W8
	0x01E8A7F4 FMOV S1, W9
	0x01E8A7F8 FMUL S0, S0, S1
	0x01E8A7FC LDR X30, [X31], #0x20
	0x01E8A800 RET
	0x01E8A804 STR D8, [X31 - 0x20]!
	0x01E8A808 STR X30, [X31 + 0x8]
	0x01E8A80C STP X20, X19, [X31 + 0x10]
	0x01E8A810 ADRP X20, 0x254E000
	0x01E8A814 LDRB W8, [X20 + 0xE8F]
	0x01E8A818 MOV V8.16B, V0.16B
	0x01E8A81C MOV X19, X0
	0x01E8A820 CBNZ W8, 0x1E8A838
	0x01E8A824 ADRP X0, 0x2270000
	0x01E8A828 LDR X0, [X0 + 0xC68]
	0x01E8A82C BL 0x1C16CF4
	0x01E8A830 MOVZ W8, 0x1
	0x01E8A834 STRB W8, [X20 + 0xE8F]
	0x01E8A838 ADRP X8, 0x2270000
	0x01E8A83C LDR X8, [X8 + 0xC68]
	0x01E8A840 LDR X0, [X8]
	0x01E8A844 LDR W8, [X0 + 0xE0]
	0x01E8A848 CBNZ W8, 0x1E8A850
	0x01E8A84C BL 0x1C16DFC
	0x01E8A850 FMOV W8, S8
	0x01E8A854 MOVZ W9, 0x44800000
	0x01E8A858 UBFM W8, W8, 0x1F, 0x1F
	0x01E8A85C FMOV S0, 0.5
	0x01E8A860 FMOV S1, W9
	0x01E8A864 UCVTF S2, W8
	0x01E8A868 MOVZ W9, 0x7F800000
	0x01E8A86C FMUL S1, S8, S1
	0x01E8A870 FSUB S0, S0, S2
	0x01E8A874 FMOV S2, W9

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move [X0], X31
	005 Move [X0+8], W8
	006 Return 
	007 Subtract X31, X31, 80
	008 Move [X31+16], X30
	009 Move [X31+32], X24
	010 Move [X31+40], X23
	011 Move [X31+48], X22
	012 Move [X31+56], X21
	013 Move [X31+64], X20
	014 Move [X31+72], X19
	015 Move X24, 0x2550000
	016 Move W8, [X24+556]
	017 Move X19, X4
	018 Move X20, X3
	019 Move X21, X2
	020 Move X22, X1
	021 Move X23, X0
	022 Compare W8, 0
	023 JumpIfNotEqual {32}
	024 Move X0, 0x226B000
	025 Move X0, [X0+1136]
	026 Call 0x1C17CF4
	027 Move X0, 0x226E000
	028 Move X0, [X0+312]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X24+556], W8
	032 Move X8, [X23+56]
	033 Compare X8, 0
	034 JumpIfEqual {122}
	035 Move X0, [X8+80]
	036 Compare X0, 0
	037 JumpIfEqual {122}
	038 And X1, X22, 0
	039 Move X2, X31
	040 Call Simulation.GetInputForPlayer, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {87}
	043 Move X22, X0
	044 Move X0, [X23+56]
	045 Compare X0, 0
	046 JumpIfEqual {122}
	047 Move X1, X31
	048 Call NetworkRunner.get_IsClient, X0
	049 Move X8, [X22+32]
	050 Compare X8, 0
	051 JumpIfEqual {122}
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {102}
	056 Move X23, 0x226B000
	057 Move W1, [X8+8]
	058 Move X23, [X23+1136]
	059 Add X0, X31, 24
	060 Move [X31+24], X31
	061 Move X2, [X23]
	062 Call Nullable`1<Int32>..ctor, X0, X1
	063 Move X8, [X31+24]
	064 Move [X21], X8
	065 Move X8, [X22+32]
	066 Compare X8, 0
	067 JumpIfEqual {122}
	068 Move W1, [X8+12]
	069 Move X2, [X23]
	070 Add X0, X31, 8
	071 Move [X31+8], X31
	072 Call Nullable`1<Int32>..ctor, X0, X1
	073 Move X8, [X31+8]
	074 Move [X20], X8
	075 Move X8, [X22+32]
	076 Compare X8, 0
	077 JumpIfEqual {122}
	078 Move V0, [X8+4]
	079 Move X8, 0x226E000
	080 Move X8, [X8+312]
	081 Add X0, X31, 0
	082 Move [X31], X31
	083 Move X1, [X8]
	084 Call Nullable`1<Single>..ctor, X0, V0
	085 Move X8, [X31]
	086 Move [X19], X8
	087 Move X0, [X23+144]
	088 Compare X0, 0
	089 JumpIfEqual {95}
	090 Move X1, X31
	091 Call HitboxBuffer.get_Current, X0
	092 Compare X0, 0
	093 JumpIfEqual {122}
	094 Add X8, X0, 48
	095 Move X8, [X23+56]
	096 Compare X8, 0
	097 JumpIfEqual {122}
	098 Move X8, [X8+80]
	099 Compare X8, 0
	100 JumpIfEqual {122}
	101 Add X8, X8, 72
	102 Move W1, [X8]
	103 Move X8, 0x226B000
	104 Move X8, [X8+1136]
	105 Add X0, X31, 24
	106 Move [X31+24], X31
	107 Move X2, [X8]
	108 Call Nullable`1<Int32>..ctor, X0, X1
	109 Move X8, [X31+24]
	110 Move [X21], X8
	111 Move [X20], X31
	112 Move [X19], X31
	113 Move X20, [X31+64]
	114 Move X19, [X31+72]
	115 Move X22, [X31+48]
	116 Move X21, [X31+56]
	117 Move X24, [X31+32]
	118 Move X23, [X31+40]
	119 Move X30, [X31+16]
	120 Add X31, X31, 80
	121 Return 
	122 Call 0x1C17F20
	123 Subtract X31, X31, 176
	124 Move [X31+112], D8
	125 Move [X31+128], X30
	126 Move [X31+136], X23
	127 Move [X31+144], X22
	128 Move [X31+152], X21
	129 Move [X31+160], X20
	130 Move [X31+168], X19
	131 Move X21, 0x2550000
	132 Move W9, [X21+557]
	133 Move X20, X0
	134 Move X19, X8
	135 Compare W9, 0
	136 JumpIfNotEqual {145}
	137 Move X0, 0x2274000
	138 Move X0, [X0+3480]
	139 Call 0x1C17CF4
	140 Move X0, 0x2274000
	141 Move X0, [X0+3496]
	142 Call 0x1C17CF4
	143 Move W8, 1
	144 Move [X21+557], W8
	145 Compare X20, 0
	146 JumpIfEqual {190}
	147 Move X23, 0x2274000
	148 Move X23, [X23+3496]
	149 Add X8, X31, 8
	150 Move X0, X20
	151 Move W1, W31
	152 Move X2, [X23]
	153 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	154 Move W8, [X20+24]
	155 Move W21, W31
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move V8, [X31+76]
	158 Move W21, W31
	159 Move W22, 1
	160 Move X2, [X23]
	161 Add X8, X31, 8
	162 Move X0, X20
	163 Move W1, W22
	164 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	165 Move V0, [X31+76]
	166 Move W8, [X20+24]
	167 NotImplemented "Instruction FCMP not yet implemented."
	168 NotImplemented "Instruction CSEL not yet implemented."
	169 Add W22, W22, 1
	170 NotImplemented "Instruction FCSEL not yet implemented."
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X2, [X23]
	173 Add X8, X31, 8
	174 Move X0, X20
	175 Move W1, W21
	176 Call List`1<LagCompensatedHit>.get_Item, X0, X1
	177 Add X1, X31, 8
	178 Move W2, 104
	179 Move X0, X19
	180 Call 0x3EB2AC0
	181 Move X20, [X31+160]
	182 Move X19, [X31+168]
	183 Move X22, [X31+144]
	184 Move X21, [X31+152]
	185 Move X30, [X31+128]
	186 Move X23, [X31+136]
	187 Move V8, [X31+112]
	188 Add X31, X31, 176
	189 Return 
	190 Call 0x1C17F20
	191 Move [X31-64], X30
	192 Move [X31+16], X24
	193 Move [X31+24], X23
	194 Move [X31+32], X22
	195 Move [X31+40], X21
	196 Move [X31+48], X20
	197 Move [X31+56], X19
	198 Move X21, 0x2550000
	199 Move W8, [X21+558]
	200 Move X19, X1
	201 Move X20, X0
	202 Compare W8, 0
	203 JumpIfNotEqual {209}
	204 Move X0, 0x2274000
	205 Move X0, [X0+3944]
	206 Call 0x1C17CF4
	207 Move W8, 1
	208 Move [X21+558], W8
	209 Compare X19, 0
	210 JumpIfEqual {291}
	211 Move X21, 0x2550000
	212 Move W8, [X21+555]
	213 Compare W8, 0
	214 JumpIfNotEqual {220}
	215 Move X0, 0x2274000
	216 Move X0, [X0+3416]
	217 Call 0x1C17CF4
	218 Move W8, 1
	219 Move [X21+555], W8
	220 Move X8, 0x2274000
	221 Move X8, [X8+3416]
	222 Move X0, X19
	223 Move W1, W31
	224 Move X2, [X8]
	225 Call NetworkBehaviour.ReinterpretState, X0, X1
	226 Move X22, [X19+168]
	227 Compare X22, 0
	228 JumpIfEqual {291}
	229 Move W8, [X22+24]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move W23, [X0]
	232 Move W24, W31
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Add X8, X22, W24
	235 Move X21, [X8+32]
	236 Compare X21, 0
	237 JumpIfEqual {291}
	238 Move W1, [X21+84]
	239 Move X0, X20
	240 Move X2, X31
	241 Call 0x1E8A774
	242 Move X1, X0
	243 Move TEMP, X23
	244 And TEMP, TEMP, 1
	245 Compare TEMP, 1
	246 JumpIfEqual {250}
	247 Move W2, [X20+52]
	248 Move X0, X21
	249 Call Hitbox.SetColliderData, X0, X1, X2
	250 Move [X1+104], W31
	251 Move W8, [X22+24]
	252 Add W24, W24, 1
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X21, [X20+40]
	255 Compare X21, 0
	256 JumpIfEqual {291}
	257 Move X10, 0x2274000
	258 Move X8, [X21]
	259 Move W20, [X20+52]
	260 Move X10, [X10+3944]
	261 NotImplemented "Instruction LDRH not yet implemented."
	262 Move X1, [X10]
	263 Compare X9, 0
	264 JumpIfEqual {271}
	265 Move X10, [X8+176]
	266 Add X10, X10, 8
	267 NotImplemented "Instruction LDUR not yet implemented."
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Subtract X9, X9, 1
	270 Add X10, X10, 16
	271 Move W2, 4
	272 Move X0, X21
	273 Call 0x1C5D788
	274 Move W9, [X10]
	275 Add W9, W9, 4
	276 Add X8, X8, W9
	277 Add X0, X8, 312
	278 Move X4, [X0]
	279 Move X3, [X0+8]
	280 Move X0, X21
	281 Move X1, X19
	282 Move W2, W20
	283 Move X20, [X31+48]
	284 Move X19, [X31+56]
	285 Move X22, [X31+32]
	286 Move X21, [X31+40]
	287 Move X24, [X31+16]
	288 Move X23, [X31+24]
	289 Move X30, [X31+64]
	290 CallNoReturn X4
	291 Call 0x1C17F20
	292 Call 0x1C17F28
	293 Subtract X31, X31, 48
	294 Move [X31+16], X30
	295 Move [X31+24], X21
	296 Move [X31+32], X20
	297 Move [X31+40], X19
	298 Move W20, W1
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move X19, X0
	301 Move X0, X19
	302 Move X1, X31
	303 Call HitboxSnapshot.get_CollidersCapacity, X0
	304 NotImplemented "Instruction CMP not yet implemented."
	305 Move X8, [X19+16]
	306 Compare X8, 0
	307 JumpIfEqual {358}
	308 Move W9, [X8+24]
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move W9, 472
	311 NotImplemented "Instruction UMADDL not yet implemented."
	312 Move X20, [X31+32]
	313 Move X19, [X31+40]
	314 Move X30, [X31+16]
	315 Move X21, [X31+24]
	316 Add X0, X8, 32
	317 Add X31, X31, 48
	318 Return 
	319 Move [X31+12], W20
	320 Move X20, 0x226A000
	321 Move X20, [X20+1880]
	322 Move X0, X20
	323 Call 0x1C17D08
	324 Add X1, X31, 12
	325 Call 0x1C17E04
	326 Move X21, X0
	327 Move X0, X19
	328 Move X1, X31
	329 Call HitboxSnapshot.get_CollidersCapacity, X0
	330 Move [X31+8], W0
	331 Move X0, X20
	332 Call 0x1C17D08
	333 Add X1, X31, 8
	334 Call 0x1C17E04
	335 Move X19, X0
	336 Move X0, 0x2274000
	337 Move X0, [X0+3952]
	338 Call 0x1C17D08
	339 Move X1, X21
	340 Move X2, X19
	341 Move X3, X31
	342 Call String.Format, X0, X1, X2
	343 Move X19, X0
	344 Move X0, 0x2274000
	345 Move X0, [X0+3960]
	346 Call 0x1C17D08
	347 Call 0x1C17F10
	348 Move X1, X19
	349 Move X2, X31
	350 Move X20, X0
	351 Call IndexOutOfRangeException..ctor, X0, X1
	352 Move X0, 0x2274000
	353 Move X0, [X0+3968]
	354 Call 0x1C17D08
	355 Move X1, X0
	356 Move X0, X20
	357 Call 0x1C17DEC
	358 Call 0x1C17F20
	359 Call 0x1C17F28

