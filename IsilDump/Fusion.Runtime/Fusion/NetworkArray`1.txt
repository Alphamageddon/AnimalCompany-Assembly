Type: Fusion.NetworkArray`1

Method: System.Int32 get_Length()

Disassembly:
	0x0240BCEC BL 0x1C16CF4
	0x0240BCF0 ADRP X0, 0x1CE9000

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: T get_Item(System.Int32 index)

Disassembly:
	0x0240BCF4 LDR X0, [X0 + 0xFE0]
	0x0240BCF8 BL 0x1C16CF4
	0x0240BCFC MOVZ W8, 0x1
	0x0240BD00 STRB W8, [X21 + 0x9AF]
	0x0240BD04 STRB W31, [X31 + 0xC]
	0x0240BD08 LDR W8, [X20 + 0x8]
	0x0240BD0C CBZ W8, 0x240BD84
	0x0240BD10 LDR X8, [X20]
	0x0240BD14 CBZ X8, 0x240BD84
	0x0240BD18 LDR X0, [X19 + 0x20]
	0x0240BD1C LDRB W8, [X0 + 0x135]
	0x0240BD20 TBNZ X8, 0x0, 0x240BD28
	0x0240BD24 BL 0x1C5C684
	0x0240BD28 LDR X8, [X0 + 0xC0]
	0x0240BD2C LDR X0, [X8 + 0x30]
	0x0240BD30 LDRB W8, [X0 + 0x135]
	0x0240BD34 TBNZ X8, 0x0, 0x240BD3C
	0x0240BD38 BL 0x1C5C684
	0x0240BD3C LDR X8, [X0 + 0xB8]
	0x0240BD40 LDR X8, [X8]
	0x0240BD44 CBZ X8, 0x240BD8C
	0x0240BD48 LDR X0, [X19 + 0x20]
	0x0240BD4C LDRB W8, [X0 + 0x135]
	0x0240BD50 TBNZ X8, 0x0, 0x240BD58
	0x0240BD54 BL 0x1C5C684
	0x0240BD58 LDR X8, [X0 + 0xC0]
	0x0240BD5C LDR X0, [X8 + 0x30]
	0x0240BD60 LDRB W8, [X0 + 0x135]
	0x0240BD64 TBNZ X8, 0x0, 0x240BD6C
	0x0240BD68 BL 0x1C5C684
	0x0240BD6C LDR X8, [X0 + 0xB8]
	0x0240BD70 LDR X0, [X8]
	0x0240BD74 CBZ X0, 0x240BF8C
	0x0240BD78 MOV X1, X31
	0x0240BD7C BL 0x3232AC0
	0x0240BD80 B 0x240BDF8
	0x0240BD84 MOV X0, X31
	0x0240BD88 B 0x240BF74
	0x0240BD8C ADRP X8, 0x1CE8000
	0x0240BD90 LDR X8, [X8 + 0x8F0]
	0x0240BD94 LDR X0, [X8]
	0x0240BD98 BL 0x1C16F10
	0x0240BD9C MOV X1, X31
	0x0240BDA0 MOV X21, X0
	0x0240BDA4 BL 0x3231AC4
	0x0240BDA8 LDR X0, [X19 + 0x20]
	0x0240BDAC LDRB W8, [X0 + 0x135]
	0x0240BDB0 TBNZ X8, 0x0, 0x240BDB8
	0x0240BDB4 BL 0x1C5C684
	0x0240BDB8 LDR X8, [X0 + 0xC0]
	0x0240BDBC LDR X0, [X8 + 0x30]
	0x0240BDC0 LDRB W8, [X0 + 0x135]
	0x0240BDC4 TBNZ X8, 0x0, 0x240BDCC
	0x0240BDC8 BL 0x1C5C684
	0x0240BDCC LDR X8, [X0 + 0xB8]
	0x0240BDD0 STR X21, [X8]
	0x0240BDD4 LDR X0, [X19 + 0x20]
	0x0240BDD8 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W9, [X0+8]
	006 Move X21, X2
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X20, [X0+16]
	009 Move X8, X0
	010 Compare X20, 0
	011 JumpIfEqual {67}
	012 Move X0, [X21+32]
	013 Move X21, [X8]
	014 Move W19, W1
	015 Move W9, [X0+309]
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move X8, [X0+192]
	022 Move X1, [X8+8]
	023 Move W8, [X1+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {31}
	028 Move X0, X1
	029 Call 0x1C5D684
	030 Move X1, X0
	031 Move X8, [X20]
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Compare X9, 0
	034 JumpIfEqual {41}
	035 Move X10, [X8+176]
	036 Add X10, X10, 8
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract X9, X9, 1
	040 Add X10, X10, 16
	041 Move X0, X20
	042 Move W2, W31
	043 Call 0x1C5D788
	044 NotImplemented "Instruction LDRSW not yet implemented."
	045 Add X8, X8, X9
	046 Add X0, X8, 312
	047 Move X4, [X0]
	048 Move X3, [X0+8]
	049 Move X0, X20
	050 Move W2, W19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X1, X21
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 CallNoReturn X4
	057 Move X0, 0x1CF3000
	058 Move X0, [X0+3960]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X1, X31
	062 Move X19, X0
	063 Call IndexOutOfRangeException..ctor, X0
	064 Move X0, X19
	065 Move X1, X21
	066 Call 0x1C17DEC
	067 Call 0x1C17F20

Method: System.Void set_Item(System.Int32 index, T value)

Disassembly:
	0x0240BDDC TBNZ X8, 0x0, 0x240BDE4
	0x0240BDE0 BL 0x1C5C684
	0x0240BDE4 LDR X8, [X0 + 0xC0]
	0x0240BDE8 LDR X0, [X8 + 0x30]
	0x0240BDEC LDRB W8, [X0 + 0x135]
	0x0240BDF0 TBNZ X8, 0x0, 0x240BDF8
	0x0240BDF4 BL 0x1C5C684
	0x0240BDF8 LDR X0, [X19 + 0x20]
	0x0240BDFC LDRB W8, [X0 + 0x135]
	0x0240BE00 TBNZ X8, 0x0, 0x240BE08
	0x0240BE04 BL 0x1C5C684
	0x0240BE08 LDR X8, [X0 + 0xC0]
	0x0240BE0C LDR X0, [X8 + 0x30]
	0x0240BE10 LDRB W8, [X0 + 0x135]
	0x0240BE14 TBNZ X8, 0x0, 0x240BE1C
	0x0240BE18 BL 0x1C5C684
	0x0240BE1C LDR X8, [X0 + 0xB8]
	0x0240BE20 ADRP X24, 0x1CE8000
	0x0240BE24 ADRP X25, 0x1CE8000
	0x0240BE28 ADRP X26, 0x1CE9000
	0x0240BE2C LDR X21, [X8]
	0x0240BE30 LDR X24, [X24 + 0x6C0]
	0x0240BE34 LDR X25, [X25 + 0xB58]
	0x0240BE38 LDR X26, [X26 + 0xFE0]
	0x0240BE3C MOV W22, W31
	0x0240BE40 LDR X0, [X19 + 0x20]
	0x0240BE44 LDRB W8, [X0 + 0x135]
	0x0240BE48 TBNZ X8, 0x0, 0x240BE50
	0x0240BE4C BL 0x1C5C684
	0x0240BE50 LDR X8, [X24]
	0x0240BE54 LDR X9, [X0 + 0xC0]
	0x0240BE58 LDR W10, [X8 + 0xE0]
	0x0240BE5C LDR X23, [X9 + 0xC0]
	0x0240BE60 CBNZ W10, 0x240BE6C
	0x0240BE64 MOV X0, X8
	0x0240BE68 BL 0x1C16DFC
	0x0240BE6C MOV X0, X23
	0x0240BE70 MOV X1, X31
	0x0240BE74 BL 0x338C698
	0x0240BE78 CBZ X0, 0x240BF8C
	0x0240BE7C MOV X1, X31
	0x0240BE80 BL 0x33970C4
	0x0240BE84 LDR X8, [X19 + 0x20]
	0x0240BE88 MOV W23, W0
	0x0240BE8C LDRB W9, [X8 + 0x135]
	0x0240BE90 TBNZ X9, 0x0, 0x240BEA0
	0x0240BE94 MOV X0, X8
	0x0240BE98 BL 0x1C5C684
	0x0240BE9C MOV X8, X0
	0x0240BEA0 LDR X8, [X8 + 0xC0]
	0x0240BEA4 MOV X0, X20
	0x0240BEA8 MOV W1, W22
	0x0240BEAC LDR X2, [X8 + 0xC8]
	0x0240BEB0 BL 0x240B06C
	0x0240BEB4 AND W8, W0, 0x1
	0x0240BEB8 TBZ X23, 0x0, 0x240BF08
	0x0240BEBC LDR X0, [X25]
	0x0240BEC0 STRB W8, [X31 + 0xC]
	0x0240BEC4 LDR W8, [X0 + 0xE0]
	0x0240BEC8 CBNZ W8, 0x240BED0
	0x0240BECC BL 0x1C16DFC
	0x0240BED0 LDR X0, [X19 + 0x20]
	0x0240BED4 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W9, [X0+8]
	007 Move X22, X3
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X21, [X0+16]
	010 Move X8, X0
	011 Compare X21, 0
	012 JumpIfEqual {72}
	013 Move X0, [X22+32]
	014 Move X22, [X8]
	015 Move W19, W1
	016 Move W20, W2
	017 Move W9, [X0+309]
	018 Move TEMP, X9
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move X8, [X0+192]
	024 Move X1, [X8+8]
	025 Move W8, [X1+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {33}
	030 Move X0, X1
	031 Call 0x1C5D684
	032 Move X1, X0
	033 Move X8, [X21]
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Compare X9, 0
	036 JumpIfEqual {43}
	037 Move X10, [X8+176]
	038 Add X10, X10, 8
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract X9, X9, 1
	042 Add X10, X10, 16
	043 Move W2, 1
	044 Move X0, X21
	045 Call 0x1C5D788
	046 Move W9, [X10]
	047 Add W9, W9, 1
	048 Add X8, X8, W9
	049 Add X0, X8, 312
	050 Move X5, [X0]
	051 Move X4, [X0+8]
	052 And W3, W20, 1
	053 Move X0, X21
	054 Move X1, X22
	055 Move W2, W19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X30, [X31+48]
	061 CallNoReturn X5
	062 Move X0, 0x1CF3000
	063 Move X0, [X0+3960]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X1, X31
	067 Move X19, X0
	068 Call IndexOutOfRangeException..ctor, X0
	069 Move X0, X19
	070 Move X1, X22
	071 Call 0x1C17DEC
	072 Call 0x1C17F20

Method: System.Object Fusion.INetworkArray.get_Item(System.Int32 index)

Disassembly:
	0x0240BED8 TBNZ X8, 0x0, 0x240BEE0
	0x0240BEDC BL 0x1C5C684
	0x0240BEE0 LDR X8, [X0 + 0xC0]
	0x0240BEE4 ADD X0, X31, 0xC
	0x0240BEE8 LDR X1, [X8 + 0xD0]
	0x0240BEEC BL 0x33176C4
	0x0240BEF0 CBZ X21, 0x240BF8C
	0x0240BEF4 MOV X1, X0
	0x0240BEF8 MOV X0, X21
	0x0240BEFC MOV X2, X31
	0x0240BF00 BL 0x32333E0
	0x0240BF04 B 0x240BF40
	0x0240BF08 STRB W8, [X31 + 0x8]
	0x0240BF0C LDR X0, [X19 + 0x20]
	0x0240BF10 LDRB W8, [X0 + 0x135]
	0x0240BF14 TBNZ X8, 0x0, 0x240BF1C
	0x0240BF18 BL 0x1C5C684
	0x0240BF1C LDR X8, [X0 + 0xC0]
	0x0240BF20 ADD X1, X31, 0x8
	0x0240BF24 LDR X0, [X8 + 0x18]
	0x0240BF28 BL 0x1C16E04
	0x0240BF2C CBZ X21, 0x240BF8C
	0x0240BF30 MOV X1, X0
	0x0240BF34 MOV X0, X21
	0x0240BF38 MOV X2, X31
	0x0240BF3C BL 0x3233F90
	0x0240BF40 LDR W8, [X20 + 0x8]
	0x0240BF44 ADD W22, W22, 0x1
	0x0240BF48 CMP W22, W8
	0x0240BF4C B.EQ 0x240BF64
	0x0240BF50 LDR X1, [X26]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X19, X2
	008 Move W20, W1
	009 Move X21, X0
	010 Move W9, [X8+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {18}
	015 Move X0, X8
	016 Call 0x1C5D684
	017 Move X8, X0
	018 Move X8, [X8+192]
	019 Move X0, X21
	020 Move W1, W20
	021 Move X2, [X8+40]
	022 Call 0x240BCF4, X0, X1
	023 And W8, W0, 1
	024 Move [X31+12], W8
	025 Move X0, [X19+32]
	026 Move W8, [X0+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {32}
	031 Call 0x1C5D684
	032 Move X8, [X0+192]
	033 Add X1, X31, 12
	034 Move X0, [X8+24]
	035 Call 0x1C17E04
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Add X31, X31, 48
	041 Return X0

Method: System.Void Fusion.INetworkArray.set_Item(System.Int32 index, System.Object value)

Disassembly:
	0x0240BF54 MOV X0, X21
	0x0240BF58 MOV X2, X31
	0x0240BF5C BL 0x32333E0
	0x0240BF60 B 0x240BE40
	0x0240BF64 LDR X8, [X21]
	0x0240BF68 MOV X0, X21
	0x0240BF6C LDP X9, X1, [X8 + 0x168]
	0x0240BF70 BLR X9
	0x0240BF74 LDP X20, X19, [X31 + 0x40]
	0x0240BF78 LDP X22, X21, [X31 + 0x30]
	0x0240BF7C LDP X24, X23, [X31 + 0x20]
	0x0240BF80 LDP X26, X25, [X31 + 0x10]
	0x0240BF84 LDR X30, [X31], #0x50
	0x0240BF88 RET
	0x0240BF8C BL 0x1C16F20
	0x0240BF90 STR X30, [X31 - 0x30]!
	0x0240BF94 STP X22, X21, [X31 + 0x10]
	0x0240BF98 STP X20, X19, [X31 + 0x20]
	0x0240BF9C MOV X20, X0
	0x0240BFA0 LDR X0, [X1 + 0x20]
	0x0240BFA4 LDR X22, [X20]
	0x0240BFA8 MOV X19, X8
	0x0240BFAC ADD X9, X0, 0x135
	0x0240BFB0 LDRH W9, [X9]
	0x0240BFB4 TBNZ X9, 0x0, 0x240BFCC
	0x0240BFB8 MOV X21, X1
	0x0240BFBC BL 0x1C5C684
	0x0240BFC0 LDR X0, [X21 + 0x20]
	0x0240BFC4 ADD X8, X0, 0x135
	0x0240BFC8 LDRH W9, [X8]
	0x0240BFCC LDR W21, [X20 + 0x8]
	0x0240BFD0 LDR X20, [X20 + 0x10]
	0x0240BFD4 STP X31, X31, [X19]
	0x0240BFD8 STR X31, [X19 + 0x10]
	0x0240BFDC TBNZ X9, 0x0, 0x240BFE4
	0x0240BFE0 BL 0x1C5C684
	0x0240BFE4 STR X22, [X19]
	0x0240BFE8 STR W21, [X19 + 0x8]
	0x0240BFEC STR X20, [X19 + 0x10]
	0x0240BFF0 LDP X20, X19, [X31 + 0x20]
	0x0240BFF4 LDP X22, X21, [X31 + 0x10]
	0x0240BFF8 LDR X30, [X31], #0x30
	0x0240BFFC RET
	0x0240C000 LDR W0, [X0 + 0x8]
	0x0240C004 RET
	0x0240C008 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X21, X3
	008 Move X22, X2
	009 Move W19, W1
	010 Move W9, [X8+309]
	011 Move X20, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X1, [X8+24]
	021 Move W8, [X1+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {29}
	026 Move X0, X1
	027 Call 0x1C5D684
	028 Move X1, X0
	029 Compare X22, 0
	030 JumpIfEqual {59}
	031 Move X8, [X22]
	032 Move X9, [X1+64]
	033 Move X0, X22
	034 Move X8, [X8+64]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Call 0x1C17E08
	037 Move X8, X0
	038 Move X0, [X21+32]
	039 Move W21, [X8]
	040 Move W9, [X0+309]
	041 Move TEMP, X9
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {46}
	045 Call 0x1C5D684
	046 Move X8, [X0+192]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X20
	049 Move W1, W19
	050 Move X3, [X8+56]
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 NotImplemented "Instruction CSET not yet implemented."
	056 Move X30, [X31+48]
	057 Call 0x240BDDC, X0, X1, X2
	058 Return 
	059 Call 0x1C17F20
	060 Call 0x1C181E0

Method: System.Void .ctor(System.Byte* array, System.Int32 length, Fusion.IElementReaderWriter`1<T> readerWriter)

Disassembly:
	0x0240C00C STP X20, X19, [X31 + 0x10]
	0x0240C010 LDR W9, [X0 + 0x8]
	0x0240C014 MOV X21, X2
	0x0240C018 CMP W9, W1

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], W2
	003 Move [X0+16], X3
	004 Return 

Method: Fusion.NetworkArrayReadOnly`1<T> ToReadOnly()

Disassembly:
	0x0240C01C B.LS 0x240C0CC
	0x0240C020 LDR X20, [X0 + 0x10]
	0x0240C024 MOV X8, X0
	0x0240C028 CBZ X20, 0x240C0F4
	0x0240C02C LDR X0, [X21 + 0x20]
	0x0240C030 LDR X21, [X8]
	0x0240C034 MOV W19, W1
	0x0240C038 LDRB W9, [X0 + 0x135]
	0x0240C03C TBNZ X9, 0x0, 0x240C044
	0x0240C040 BL 0x1C5C684
	0x0240C044 LDR X8, [X0 + 0xC0]
	0x0240C048 LDR X1, [X8 + 0x8]
	0x0240C04C LDRB W8, [X1 + 0x135]
	0x0240C050 TBNZ X8, 0x0, 0x240C060
	0x0240C054 MOV X0, X1
	0x0240C058 BL 0x1C5C684
	0x0240C05C MOV X1, X0
	0x0240C060 LDR X8, [X20]
	0x0240C064 LDRH W9, [X8 + 0x12E]
	0x0240C068 CBZ X9, 0x240C08C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, [X0]
	007 Move W21, [X0+8]
	008 Move X22, [X0+16]
	009 Move [X8], X31
	010 Move [X8+8], X31
	011 Move [X8+16], X31
	012 Move X0, [X1+32]
	013 Move X19, X8
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move [X19], X20
	021 Move [X19+8], W21
	022 Move [X19+16], X22
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+48]
	028 Return X0

Method: T Get(System.Int32 index)

Disassembly:
	0x0240C06C LDR X10, [X8 + 0xB0]
	0x0240C070 ADD X10, X10, 0x8
	0x0240C074 LDUR X11, [X10 - 0x8]
	0x0240C078 CMP X11, X1
	0x0240C07C B.EQ 0x240C09C
	0x0240C080 SUBS X9, X9, 0x1
	0x0240C084 ADD X10, X10, 0x10
	0x0240C088 B.NE 0x240C074
	0x0240C08C MOV X0, X20
	0x0240C090 MOV W2, W31
	0x0240C094 BL 0x1C5C788
	0x0240C098 B 0x240C0A8
	0x0240C09C LDRSW X9, [X10]
	0x0240C0A0 ADD X8, X8, X9, 0x4, LSL
	0x0240C0A4 ADD X0, X8, 0x138
	0x0240C0A8 LDP X8, X3, [X0]
	0x0240C0AC MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move W19, W1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X2, [X8+40]
	021 Move X30, [X31+32]
	022 Call 0x240BCF4, X0, X1
	023 Return X0

Method: T Set(System.Int32 index, T value)

Disassembly:
	0x0240C0B0 MOV X1, X21
	0x0240C0B4 MOV W2, W19
	0x0240C0B8 BLR X8
	0x0240C0BC LDP X20, X19, [X31 + 0x10]
	0x0240C0C0 AND X0, X0, 0x0
	0x0240C0C4 LDP X30, X21, [X31], #0x20
	0x0240C0C8 RET
	0x0240C0CC ADRP X0, 0x1CF1000
	0x0240C0D0 LDR X0, [X0 + 0xF78]
	0x0240C0D4 BL 0x1C16D08
	0x0240C0D8 BL 0x1C16F10
	0x0240C0DC MOV X1, X31
	0x0240C0E0 MOV X19, X0
	0x0240C0E4 BL 0x3379B10
	0x0240C0E8 MOV X0, X19
	0x0240C0EC MOV X1, X21
	0x0240C0F0 BL 0x1C16DEC
	0x0240C0F4 BL 0x1C16F20
	0x0240C0F8 STR X30, [X31 - 0x30]!
	0x0240C0FC STP X22, X21, [X31 + 0x10]
	0x0240C100 STP X20, X19, [X31 + 0x20]
	0x0240C104 LDR W9, [X0 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+32]
	006 Move W20, W2
	007 Move W19, W1
	008 Move X21, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 And W20, W20, 1
	019 Move X0, X21
	020 Move W1, W19
	021 Move X3, [X8+56]
	022 Move W2, W20
	023 Call 0x240BDDC, X0, X1, X2
	024 Move W0, W20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: T GetRef(System.Int32 index)

Disassembly:
	0x0240C108 MOV X22, X3
	0x0240C10C CMP W9, W1
	0x0240C110 B.LS 0x240C1C8
	0x0240C114 LDR X21, [X0 + 0x10]
	0x0240C118 MOV X8, X0
	0x0240C11C CBZ X21, 0x240C1F0
	0x0240C120 LDR X0, [X22 + 0x20]
	0x0240C124 LDR X22, [X8]
	0x0240C128 MOV W19, W1
	0x0240C12C MOV X20, X2
	0x0240C130 LDRB W9, [X0 + 0x135]
	0x0240C134 TBNZ X9, 0x0, 0x240C13C
	0x0240C138 BL 0x1C5C684
	0x0240C13C LDR X8, [X0 + 0xC0]
	0x0240C140 LDR X1, [X8 + 0x8]
	0x0240C144 LDRB W8, [X1 + 0x135]
	0x0240C148 TBNZ X8, 0x0, 0x240C158
	0x0240C14C MOV X0, X1
	0x0240C150 BL 0x1C5C684
	0x0240C154 MOV X1, X0
	0x0240C158 LDR X8, [X21]
	0x0240C15C LDRH W9, [X8 + 0x12E]
	0x0240C160 CBZ X9, 0x240C184
	0x0240C164 LDR X10, [X8 + 0xB0]
	0x0240C168 ADD X10, X10, 0x8
	0x0240C16C LDUR X11, [X10 - 0x8]
	0x0240C170 CMP X11, X1
	0x0240C174 B.EQ 0x240C194
	0x0240C178 SUBS X9, X9, 0x1
	0x0240C17C ADD X10, X10, 0x10
	0x0240C180 B.NE 0x240C16C
	0x0240C184 MOVZ W2, 0x1
	0x0240C188 MOV X0, X21
	0x0240C18C BL 0x1C5C788
	0x0240C190 B 0x240C1A4
	0x0240C194 LDR W9, [X10]
	0x0240C198 ADD W9, W9, 0x1
	0x0240C19C ADD X8, X8, W9, 0x4, SXTW
	0x0240C1A0 ADD X0, X8, 0x138
	0x0240C1A4 LDP X5, X4, [X0]
	0x0240C1A8 AND X3, X20, 0x0
	0x0240C1AC MOV X0, X21
	0x0240C1B0 MOV X1, X22
	0x0240C1B4 MOV W2, W19
	0x0240C1B8 LDP X20, X19, [X31 + 0x20]
	0x0240C1BC LDP X22, X21, [X31 + 0x10]
	0x0240C1C0 LDR X30, [X31], #0x30
	0x0240C1C4 BR X5
	0x0240C1C8 ADRP X0, 0x1CF1000
	0x0240C1CC LDR X0, [X0 + 0xF78]
	0x0240C1D0 BL 0x1C16D08
	0x0240C1D4 BL 0x1C16F10
	0x0240C1D8 MOV X1, X31
	0x0240C1DC MOV X19, X0
	0x0240C1E0 BL 0x3379B10
	0x0240C1E4 MOV X0, X19
	0x0240C1E8 MOV X1, X22
	0x0240C1EC BL 0x1C16DEC
	0x0240C1F0 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W9, [X0+8]
	006 Move X21, X2
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X20, [X0+16]
	009 Move X8, X0
	010 Compare X20, 0
	011 JumpIfEqual {68}
	012 Move X0, [X21+32]
	013 Move X21, [X8]
	014 Move W19, W1
	015 Move W9, [X0+309]
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move X8, [X0+192]
	022 Move X1, [X8+8]
	023 Move W8, [X1+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {31}
	028 Move X0, X1
	029 Call 0x1C5D684
	030 Move X1, X0
	031 Move X8, [X20]
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Compare X9, 0
	034 JumpIfEqual {41}
	035 Move X10, [X8+176]
	036 Add X10, X10, 8
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract X9, X9, 1
	040 Add X10, X10, 16
	041 Move W2, 3
	042 Move X0, X20
	043 Call 0x1C5D788
	044 Move W9, [X10]
	045 Add W9, W9, 3
	046 Add X8, X8, W9
	047 Add X0, X8, 312
	048 Move X4, [X0]
	049 Move X3, [X0+8]
	050 Move X0, X20
	051 Move W2, W19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X1, X21
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 CallNoReturn X4
	058 Move X0, 0x1CF2000
	059 Move X0, [X0+3960]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X1, X31
	063 Move X19, X0
	064 Call IndexOutOfRangeException..ctor, X0
	065 Move X0, X19
	066 Move X1, X21
	067 Call 0x1C17DEC
	068 Call 0x1C17F20

Method: T[] ToArray()

Disassembly:
	0x0240C1F4 SUB X31, X31, 0x30
	0x0240C1F8 STP X30, X21, [X31 + 0x10]
	0x0240C1FC STP X20, X19, [X31 + 0x20]
	0x0240C200 LDR X8, [X2 + 0x20]
	0x0240C204 MOV X19, X2
	0x0240C208 MOV W20, W1
	0x0240C20C MOV X21, X0
	0x0240C210 LDRB W9, [X8 + 0x135]
	0x0240C214 TBNZ X9, 0x0, 0x240C224
	0x0240C218 MOV X0, X8
	0x0240C21C BL 0x1C5C684
	0x0240C220 MOV X8, X0
	0x0240C224 LDR X8, [X8 + 0xC0]
	0x0240C228 MOV X0, X21
	0x0240C22C MOV W1, W20
	0x0240C230 LDR X2, [X8 + 0x28]
	0x0240C234 BL 0x240C008
	0x0240C238 STR W0, [X31 + 0x8]
	0x0240C23C LDR X0, [X19 + 0x20]
	0x0240C240 LDRB W8, [X0 + 0x135]
	0x0240C244 TBNZ X8, 0x0, 0x240C24C
	0x0240C248 BL 0x1C5C684
	0x0240C24C LDR X8, [X0 + 0xC0]
	0x0240C250 ADD X1, X31, 0x8
	0x0240C254 LDR X0, [X8 + 0x18]
	0x0240C258 BL 0x1C16E04
	0x0240C25C LDP X20, X19, [X31 + 0x20]
	0x0240C260 LDP X30, X21, [X31 + 0x10]
	0x0240C264 ADD X31, X31, 0x30
	0x0240C268 RET
	0x0240C26C STR X30, [X31 - 0x30]!
	0x0240C270 STP X22, X21, [X31 + 0x10]
	0x0240C274 STP X20, X19, [X31 + 0x20]
	0x0240C278 LDR X8, [X3 + 0x20]
	0x0240C27C MOV X21, X3
	0x0240C280 MOV X22, X2
	0x0240C284 MOV W19, W1
	0x0240C288 LDRB W9, [X8 + 0x135]
	0x0240C28C MOV X20, X0
	0x0240C290 TBNZ X9, 0x0, 0x240C2A0
	0x0240C294 MOV X0, X8
	0x0240C298 BL 0x1C5C684
	0x0240C29C MOV X8, X0
	0x0240C2A0 LDR X8, [X8 + 0xC0]
	0x0240C2A4 LDR X1, [X8 + 0x18]
	0x0240C2A8 LDRB W8, [X1 + 0x135]
	0x0240C2AC TBNZ X8, 0x0, 0x240C2BC
	0x0240C2B0 MOV X0, X1
	0x0240C2B4 BL 0x1C5C684

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, X0
	008 Move X0, [X1+32]
	009 Move W21, [X20+8]
	010 Move X19, X1
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move X8, [X0+192]
	018 Move X0, [X8+96]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W1, W21
	026 Call 0x1C17D6C
	027 Move W8, [X20+8]
	028 Move X21, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X22, X31
	031 Add X23, X21, 32
	032 Move X0, [X19+32]
	033 Move W8, [X0+309]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {39}
	038 Call 0x1C5D684
	039 Move X8, [X0+192]
	040 Move X0, X20
	041 Move W1, W22
	042 Move X2, [X8+40]
	043 Call 0x240BCF4, X0, X1
	044 Compare X21, 0
	045 JumpIfEqual {61}
	046 Move W8, [X21+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 And W8, W0, 1
	049 Move [X23], W8
	050 NotImplemented "Instruction LDRSW not yet implemented."
	051 Add X22, X22, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, X21
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Return X0
	061 Call 0x1C17F20
	062 Call 0x1C17F28

Method: System.Void CopyTo(System.Collections.Generic.List`1<T> list)

Disassembly:
	0x0240C2B8 MOV X1, X0
	0x0240C2BC CBZ X22, 0x240C318
	0x0240C2C0 LDR X8, [X22]
	0x0240C2C4 LDR X9, [X1 + 0x40]
	0x0240C2C8 MOV X0, X22
	0x0240C2CC LDR X8, [X8 + 0x40]
	0x0240C2D0 CMP X8, X9
	0x0240C2D4 B.NE 0x240C31C
	0x0240C2D8 BL 0x1C16E08
	0x0240C2DC MOV X8, X0
	0x0240C2E0 LDR X0, [X21 + 0x20]
	0x0240C2E4 LDR W21, [X8]
	0x0240C2E8 LDRB W9, [X0 + 0x135]
	0x0240C2EC TBNZ X9, 0x0, 0x240C2F4
	0x0240C2F0 BL 0x1C5C684
	0x0240C2F4 LDR X8, [X0 + 0xC0]
	0x0240C2F8 MOV X0, X20
	0x0240C2FC MOV W1, W19
	0x0240C300 MOV X2, X21
	0x0240C304 LDR X3, [X8 + 0x38]
	0x0240C308 LDP X20, X19, [X31 + 0x20]
	0x0240C30C LDP X22, X21, [X31 + 0x10]
	0x0240C310 LDR X30, [X31], #0x30
	0x0240C314 B 0x240C0F8
	0x0240C318 BL 0x1C16F20
	0x0240C31C BL 0x1C171E0
	0x0240C320 STR X1, [X0]
	0x0240C324 STR W2, [X0 + 0x8]
	0x0240C328 STR X3, [X0 + 0x10]
	0x0240C32C RET
	0x0240C330 STR X30, [X31 - 0x30]!
	0x0240C334 STP X22, X21, [X31 + 0x10]
	0x0240C338 STP X20, X19, [X31 + 0x20]
	0x0240C33C LDR X20, [X0]
	0x0240C340 LDR W21, [X0 + 0x8]
	0x0240C344 LDR X22, [X0 + 0x10]
	0x0240C348 STP X31, X31, [X8]
	0x0240C34C STR X31, [X8 + 0x10]
	0x0240C350 LDR X0, [X1 + 0x20]
	0x0240C354 MOV X19, X8
	0x0240C358 LDRB W8, [X0 + 0x135]
	0x0240C35C TBNZ X8, 0x0, 0x240C364
	0x0240C360 BL 0x1C5C684
	0x0240C364 STR X20, [X19]
	0x0240C368 STR W21, [X19 + 0x8]
	0x0240C36C STR X22, [X19 + 0x10]
	0x0240C370 LDP X20, X19, [X31 + 0x20]
	0x0240C374 LDP X22, X21, [X31 + 0x10]
	0x0240C378 LDR X30, [X31], #0x30
	0x0240C37C RET
	0x0240C380 STR X30, [X31 - 0x20]!
	0x0240C384 STP X20, X19, [X31 + 0x10]
	0x0240C388 LDR X8, [X2 + 0x20]
	0x0240C38C MOV W19, W1
	0x0240C390 MOV X20, X0
	0x0240C394 LDRB W9, [X8 + 0x135]
	0x0240C398 TBNZ X9, 0x0, 0x240C3A8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W8, [X0+8]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X19, X2
	010 Move X20, X0
	011 Move X21, X1
	012 Move W22, W31
	013 Move X0, [X19+32]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move X8, [X0+192]
	021 Move X0, X20
	022 Move W1, W22
	023 Move X2, [X8+40]
	024 Call 0x240BCF4, X0, X1
	025 Compare X21, 0
	026 JumpIfEqual {67}
	027 Move W23, W0
	028 Move X0, [X19+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X9, [X0+192]
	036 Move W10, [X21+28]
	037 Move X8, [X21+16]
	038 Move X9, [X9+120]
	039 Add W10, W10, 1
	040 Move [X21+28], W10
	041 Compare X8, 0
	042 JumpIfEqual {67}
	043 NotImplemented "Instruction LDRSW not yet implemented."
	044 Move W11, [X8+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Add W9, W10, 1
	047 And W11, W23, 1
	048 Add X8, X8, X10
	049 Move [X21+24], W9
	050 Move [X8+32], W11
	051 Move X8, [X9+32]
	052 And W1, W23, 1
	053 Move X0, X21
	054 Move X8, [X8+192]
	055 Move X2, [X8+112]
	056 Call List`1<Boolean>.AddWithResize, X0, X1
	057 Move W8, [X20+8]
	058 Add W22, W22, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return 
	067 Call 0x1C17F20

Method: System.Void CopyTo(Fusion.NetworkArray`1<T> array)

Disassembly:
	0x0240C39C MOV X0, X8
	0x0240C3A0 BL 0x1C5C684
	0x0240C3A4 MOV X8, X0
	0x0240C3A8 LDR X8, [X8 + 0xC0]
	0x0240C3AC MOV X0, X20
	0x0240C3B0 MOV W1, W19
	0x0240C3B4 LDR X2, [X8 + 0x28]
	0x0240C3B8 BL 0x240C008
	0x0240C3BC LDP X20, X19, [X31 + 0x10]
	0x0240C3C0 AND X0, X0, 0x0
	0x0240C3C4 LDR X30, [X31], #0x20
	0x0240C3C8 RET
	0x0240C3CC STP X30, X21, [X31 - 0x20]!
	0x0240C3D0 STP X20, X19, [X31 + 0x10]
	0x0240C3D4 LDR X8, [X3 + 0x20]
	0x0240C3D8 MOV X20, X2
	0x0240C3DC MOV W19, W1
	0x0240C3E0 MOV X21, X0
	0x0240C3E4 LDRB W9, [X8 + 0x135]
	0x0240C3E8 TBNZ X9, 0x0, 0x240C3F8
	0x0240C3EC MOV X0, X8
	0x0240C3F0 BL 0x1C5C684
	0x0240C3F4 MOV X8, X0
	0x0240C3F8 LDR X8, [X8 + 0xC0]
	0x0240C3FC AND X20, X20, 0x0
	0x0240C400 MOV X0, X21
	0x0240C404 MOV W1, W19
	0x0240C408 LDR X3, [X8 + 0x38]
	0x0240C40C MOV X2, X20
	0x0240C410 BL 0x240C0F8
	0x0240C414 MOV X0, X20
	0x0240C418 LDP X20, X19, [X31 + 0x10]
	0x0240C41C LDP X30, X21, [X31], #0x20
	0x0240C420 RET
	0x0240C424 STP X30, X21, [X31 - 0x20]!
	0x0240C428 STP X20, X19, [X31 + 0x10]
	0x0240C42C LDR W9, [X0 + 0x8]
	0x0240C430 MOV X21, X2
	0x0240C434 CMP W9, W1
	0x0240C438 B.LS 0x240C4E4
	0x0240C43C LDR X20, [X0 + 0x10]
	0x0240C440 MOV X8, X0
	0x0240C444 CBZ X20, 0x240C50C
	0x0240C448 LDR X0, [X21 + 0x20]
	0x0240C44C LDR X21, [X8]
	0x0240C450 MOV W19, W1
	0x0240C454 LDRB W9, [X0 + 0x135]
	0x0240C458 TBNZ X9, 0x0, 0x240C460
	0x0240C45C BL 0x1C5C684
	0x0240C460 LDR X8, [X0 + 0xC0]
	0x0240C464 LDR X1, [X8 + 0x8]
	0x0240C468 LDRB W8, [X1 + 0x135]
	0x0240C46C TBNZ X8, 0x0, 0x240C47C
	0x0240C470 MOV X0, X1
	0x0240C474 BL 0x1C5C684
	0x0240C478 MOV X1, X0
	0x0240C47C LDR X8, [X20]
	0x0240C480 LDRH W9, [X8 + 0x12E]
	0x0240C484 CBZ X9, 0x240C4A8
	0x0240C488 LDR X10, [X8 + 0xB0]
	0x0240C48C ADD X10, X10, 0x8
	0x0240C490 LDUR X11, [X10 - 0x8]
	0x0240C494 CMP X11, X1
	0x0240C498 B.EQ 0x240C4B8
	0x0240C49C SUBS X9, X9, 0x1
	0x0240C4A0 ADD X10, X10, 0x10
	0x0240C4A4 B.NE 0x240C490
	0x0240C4A8 MOVZ W2, 0x3
	0x0240C4AC MOV X0, X20
	0x0240C4B0 BL 0x1C5C788
	0x0240C4B4 B 0x240C4C8
	0x0240C4B8 LDR W9, [X10]
	0x0240C4BC ADD W9, W9, 0x3
	0x0240C4C0 ADD X8, X8, W9, 0x4, SXTW
	0x0240C4C4 ADD X0, X8, 0x138
	0x0240C4C8 LDP X4, X3, [X0]
	0x0240C4CC MOV X0, X20
	0x0240C4D0 MOV W2, W19
	0x0240C4D4 LDP X20, X19, [X31 + 0x10]
	0x0240C4D8 MOV X1, X21
	0x0240C4DC LDP X30, X21, [X31], #0x20
	0x0240C4E0 BR X4
	0x0240C4E4 ADRP X0, 0x1CF1000
	0x0240C4E8 LDR X0, [X0 + 0xF78]
	0x0240C4EC BL 0x1C16D08
	0x0240C4F0 BL 0x1C16F10
	0x0240C4F4 MOV X1, X31
	0x0240C4F8 MOV X19, X0
	0x0240C4FC BL 0x3379B10
	0x0240C500 MOV X0, X19
	0x0240C504 MOV X1, X21
	0x0240C508 BL 0x1C16DEC
	0x0240C50C BL 0x1C16F20
	0x0240C510 STP X30, X23, [X31 - 0x30]!
	0x0240C514 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X2+32]
	009 Move X19, X2
	010 Move X20, X1
	011 Move X21, X0
	012 Add X9, X8, 309
	013 NotImplemented "Instruction LDRH not yet implemented."
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, X8
	019 Call 0x1C5D684
	020 Move X8, [X19+32]
	021 Add X9, X8, 309
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move W24, [X20+8]
	024 Move TEMP, X9
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {32}
	028 Move X0, X8
	029 Call 0x1C5D684
	030 Move W8, [X20+8]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W22, W31
	034 Move X0, [X19+32]
	035 Move W8, [X0+309]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {41}
	040 Call 0x1C5D684
	041 Move X8, [X0+192]
	042 Move X0, X21
	043 Move W1, W22
	044 Move X2, [X8+40]
	045 Call 0x240BCF4, X0, X1
	046 Move X8, [X19+32]
	047 Move W23, W0
	048 Move W9, [X8+309]
	049 Move TEMP, X9
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {56}
	053 Move X0, X8
	054 Call 0x1C5D684
	055 Move X8, X0
	056 Move X8, [X8+192]
	057 And W2, W23, 1
	058 Move X0, X20
	059 Move W1, W22
	060 Move X3, [X8+56]
	061 Call 0x240BDDC, X0, X1, X2
	062 Add W22, W22, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X20, [X31+48]
	065 Move X19, [X31+56]
	066 Move X22, [X31+32]
	067 Move X21, [X31+40]
	068 Move X24, [X31+16]
	069 Move X23, [X31+24]
	070 Move X30, [X31+64]
	071 Return 
	072 Move W8, [X21+8]
	073 Move X20, 0x1CE8000
	074 Move [X31+12], W8
	075 Move X20, [X20+1880]
	076 Move X0, X20
	077 Call 0x1C17D08
	078 Add X1, X31, 12
	079 Call 0x1C17E04
	080 Move X21, X0
	081 Move X0, X20
	082 Move [X31+8], W24
	083 Call 0x1C17D08
	084 Add X1, X31, 8
	085 Call 0x1C17E04
	086 Move X20, X0
	087 Move X0, 0x1D11000
	088 Move X0, [X0+3048]
	089 Call 0x1C17D08
	090 Move X1, X21
	091 Move X2, X20
	092 Move X3, X31
	093 Call String.Format, X0, X1, X2
	094 Move X20, X0
	095 Move X0, 0x1CF0000
	096 Move X0, [X0+1400]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X21, X0
	100 Move X0, 0x1D10000
	101 Move X0, [X0+1600]
	102 Call 0x1C17D08
	103 Move X2, X0
	104 Move X0, X21
	105 Move X1, X20
	106 Move X3, X31
	107 Call ArgumentException..ctor, X0, X1, X2
	108 Move X0, X21
	109 Move X1, X19
	110 Call 0x1C17DEC

Method: System.Void CopyTo(T[] array, System.Boolean throwIfOverflow = True)

Disassembly:
	0x0240C518 STP X20, X19, [X31 + 0x20]
	0x0240C51C MOV X20, X0
	0x0240C520 LDR X0, [X1 + 0x20]
	0x0240C524 LDR W21, [X20 + 0x8]
	0x0240C528 MOV X19, X1
	0x0240C52C LDRB W8, [X0 + 0x135]
	0x0240C530 TBNZ X8, 0x0, 0x240C538
	0x0240C534 BL 0x1C5C684
	0x0240C538 LDR X8, [X0 + 0xC0]
	0x0240C53C LDR X0, [X8 + 0x60]
	0x0240C540 LDRB W8, [X0 + 0x135]
	0x0240C544 TBNZ X8, 0x0, 0x240C54C
	0x0240C548 BL 0x1C5C684
	0x0240C54C MOV W1, W21
	0x0240C550 BL 0x1C16D6C
	0x0240C554 LDR W8, [X20 + 0x8]
	0x0240C558 MOV X21, X0
	0x0240C55C CMP W8, 0x1
	0x0240C560 B.LT 0x240C5B4
	0x0240C564 MOV X22, X31
	0x0240C568 ADD X23, X21, 0x20
	0x0240C56C LDR X0, [X19 + 0x20]
	0x0240C570 LDRB W8, [X0 + 0x135]
	0x0240C574 TBNZ X8, 0x0, 0x240C57C
	0x0240C578 BL 0x1C5C684
	0x0240C57C LDR X8, [X0 + 0xC0]
	0x0240C580 MOV X0, X20
	0x0240C584 MOV W1, W22
	0x0240C588 LDR X2, [X8 + 0x28]
	0x0240C58C BL 0x240C008
	0x0240C590 CBZ X21, 0x240C5C8
	0x0240C594 LDR W8, [X21 + 0x18]
	0x0240C598 CMP X22, X8
	0x0240C59C B.CS 0x240C5CC
	0x0240C5A0 STR W0, [X23, X22, LSL #2]
	0x0240C5A4 LDRSW X8, [X20 + 0x8]
	0x0240C5A8 ADD X22, X22, 0x1
	0x0240C5AC CMP X22, X8
	0x0240C5B0 B.LT 0x240C56C
	0x0240C5B4 MOV X0, X21
	0x0240C5B8 LDP X20, X19, [X31 + 0x20]
	0x0240C5BC LDP X22, X21, [X31 + 0x10]
	0x0240C5C0 LDP X30, X23, [X31], #0x30
	0x0240C5C4 RET
	0x0240C5C8 BL 0x1C16F20
	0x0240C5CC BL 0x1C16F28
	0x0240C5D0 STP X30, X23, [X31 - 0x30]!
	0x0240C5D4 STP X22, X21, [X31 + 0x10]
	0x0240C5D8 STP X20, X19, [X31 + 0x20]
	0x0240C5DC LDR W8, [X0 + 0x8]
	0x0240C5E0 CMP W8, 0x1
	0x0240C5E4 B.LT 0x240C69C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X3
	009 Compare X1, 0
	010 JumpIfEqual {45}
	011 Move X8, [X1+24]
	012 Move X20, X1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X21, X0
	015 Move X22, X31
	016 And X23, X8, 0
	017 Add X24, X20, 32
	018 Move X0, [X19+32]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move X8, [X0+192]
	026 Move X0, X21
	027 Move W1, W22
	028 Move X2, [X8+40]
	029 Call 0x240BCF4, X0, X1
	030 Move W8, [X20+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 And W8, W0, 1
	033 Move [X24], W8
	034 Add X22, X22, 1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Move X30, [X31+64]
	043 Return 
	044 Call 0x1C17F28
	045 Move X0, 0x1CED000
	046 Move X0, [X0+1320]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X20, X0
	050 Move X0, 0x1D10000
	051 Move X0, [X0+1600]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X20
	055 Move X2, X31
	056 Call ArgumentNullException..ctor, X0, X1
	057 Move X0, X20
	058 Move X1, X19
	059 Call 0x1C17DEC

Method: System.String ToString()

Disassembly:
	0x0240C5E8 MOV X19, X2
	0x0240C5EC MOV X20, X0
	0x0240C5F0 MOV X21, X1
	0x0240C5F4 MOV W22, W31
	0x0240C5F8 LDR X0, [X19 + 0x20]
	0x0240C5FC LDRB W8, [X0 + 0x135]
	0x0240C600 TBNZ X8, 0x0, 0x240C608
	0x0240C604 BL 0x1C5C684
	0x0240C608 LDR X8, [X0 + 0xC0]
	0x0240C60C MOV X0, X20
	0x0240C610 MOV W1, W22
	0x0240C614 LDR X2, [X8 + 0x28]
	0x0240C618 BL 0x240C008

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+32]
	004 Move X19, X0
	005 Move W9, [X8+309]
	006 Move TEMP, X9
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {13}
	010 Move X0, X8
	011 Call 0x1C5D684
	012 Move X8, X0
	013 Move X8, [X8+192]
	014 Move X0, X19
	015 Move X1, [X8+136]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call 0x240CCA4, X0
	019 Return X0

Method: Fusion.NetworkArray`1/Enumerator<T> GetEnumerator()

Disassembly:
	0x0240C61C CBZ X21, 0x240C6AC
	0x0240C620 MOV X23, X0
	0x0240C624 LDR X0, [X19 + 0x20]
	0x0240C628 LDRB W8, [X0 + 0x135]
	0x0240C62C TBNZ X8, 0x0, 0x240C634
	0x0240C630 BL 0x1C5C684
	0x0240C634 LDR X9, [X0 + 0xC0]
	0x0240C638 LDR W10, [X21 + 0x1C]
	0x0240C63C LDR X8, [X21 + 0x10]
	0x0240C640 LDR X9, [X9 + 0x78]
	0x0240C644 ADD W10, W10, 0x1
	0x0240C648 STR W10, [X21 + 0x1C]
	0x0240C64C CBZ X8, 0x240C6AC
	0x0240C650 LDRSW X10, [X21 + 0x18]
	0x0240C654 LDR W11, [X8 + 0x18]
	0x0240C658 CMP W10, W11
	0x0240C65C B.CS 0x240C674
	0x0240C660 ADD W9, W10, 0x1
	0x0240C664 ADD X8, X8, X10, 0x2, LSL
	0x0240C668 STR W9, [X21 + 0x18]
	0x0240C66C STR W23, [X8 + 0x20]
	0x0240C670 B 0x240C68C
	0x0240C674 LDR X8, [X9 + 0x20]
	0x0240C678 AND X1, X23, 0x0
	0x0240C67C MOV X0, X21

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X19, X8
	005 Move X8, [X0+16]
	006 Move V0, [X0]
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Move [X19], V1
	009 Move [X19+8], V1
	010 Move [X31+16], X8
	011 Move [X31], V0
	012 Move X0, [X1+32]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Move X8, [X0+192]
	020 Move V0, [X31]
	021 Move X9, [X31+16]
	022 Add X1, X31, 32
	023 Move X2, [X8+152]
	024 Move X0, X19
	025 Move [X31+2], V0
	026 Move [X31+48], X9
	027 Call 0x2BB7740, X0, X1
	028 Move X30, [X31+64]
	029 Move X19, [X31+72]
	030 Add X31, X31, 80
	031 Return X0

Method: System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()

Disassembly:
	0x0240C680 LDR X8, [X8 + 0xC0]
	0x0240C684 LDR X2, [X8 + 0x70]
	0x0240C688 BL 0x3016AB0
	0x0240C68C LDR W8, [X20 + 0x8]
	0x0240C690 ADD W22, W22, 0x1
	0x0240C694 CMP W22, W8
	0x0240C698 B.LT 0x240C5F8
	0x0240C69C LDP X20, X19, [X31 + 0x20]
	0x0240C6A0 LDP X22, X21, [X31 + 0x10]
	0x0240C6A4 LDP X30, X23, [X31], #0x30
	0x0240C6A8 RET
	0x0240C6AC BL 0x1C16F20
	0x0240C6B0 STR X30, [X31 - 0x40]!
	0x0240C6B4 STP X24, X23, [X31 + 0x10]
	0x0240C6B8 STP X22, X21, [X31 + 0x20]
	0x0240C6BC STP X20, X19, [X31 + 0x30]
	0x0240C6C0 LDR X8, [X2 + 0x20]
	0x0240C6C4 MOV X19, X2
	0x0240C6C8 MOV X20, X1
	0x0240C6CC MOV X21, X0
	0x0240C6D0 ADD X9, X8, 0x135
	0x0240C6D4 LDRH W9, [X9]
	0x0240C6D8 TBNZ X9, 0x0, 0x240C6F0
	0x0240C6DC MOV X0, X8
	0x0240C6E0 BL 0x1C5C684
	0x0240C6E4 LDR X8, [X19 + 0x20]
	0x0240C6E8 ADD X9, X8, 0x135
	0x0240C6EC LDRH W9, [X9]
	0x0240C6F0 LDR W24, [X20 + 0x8]
	0x0240C6F4 TBNZ X9, 0x0, 0x240C70C
	0x0240C6F8 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, X20
	018 Move X1, [X8+160]
	019 Add X8, X31, 0
	020 Call 0x240C61C, X0
	021 Move V1, [X31]
	022 Move V0, [X31+16]
	023 Move [X31+32], V1
	024 Move [X31+40], V0
	025 Move [X31], V1
	026 Move [X31+8], V0
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Add X1, X31, 0
	036 Move X0, [X8+144]
	037 Call 0x1C17E04
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Move X30, [X31+64]
	041 Add X31, X31, 96
	042 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0240C6FC BL 0x1C5C684
	0x0240C700 LDR W8, [X20 + 0x8]
	0x0240C704 CMP W8, W24
	0x0240C708 B.GT 0x240C790
	0x0240C70C CMP W24, 0x1
	0x0240C710 B.LT 0x240C77C
	0x0240C714 MOV W22, W31
	0x0240C718 LDR X0, [X19 + 0x20]
	0x0240C71C LDRB W8, [X0 + 0x135]
	0x0240C720 TBNZ X8, 0x0, 0x240C728
	0x0240C724 BL 0x1C5C684
	0x0240C728 LDR X8, [X0 + 0xC0]
	0x0240C72C MOV X0, X21
	0x0240C730 MOV W1, W22
	0x0240C734 LDR X2, [X8 + 0x28]
	0x0240C738 BL 0x240C008
	0x0240C73C LDR X8, [X19 + 0x20]
	0x0240C740 MOV X23, X0
	0x0240C744 LDRB W9, [X8 + 0x135]
	0x0240C748 TBNZ X9, 0x0, 0x240C758
	0x0240C74C MOV X0, X8
	0x0240C750 BL 0x1C5C684
	0x0240C754 MOV X8, X0
	0x0240C758 LDR X8, [X8 + 0xC0]
	0x0240C75C AND X2, X23, 0x0
	0x0240C760 MOV X0, X20
	0x0240C764 MOV W1, W22
	0x0240C768 LDR X3, [X8 + 0x38]
	0x0240C76C BL 0x240C0F8
	0x0240C770 ADD W22, W22, 0x1
	0x0240C774 CMP W24, W22

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, X20
	018 Move X1, [X8+160]
	019 Add X8, X31, 0
	020 Call 0x240C61C, X0
	021 Move V1, [X31]
	022 Move V0, [X31+16]
	023 Move [X31+32], V1
	024 Move [X31+40], V0
	025 Move [X31], V1
	026 Move [X31+8], V0
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Add X1, X31, 0
	036 Move X0, [X8+144]
	037 Call 0x1C17E04
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Move X30, [X31+64]
	041 Add X31, X31, 96
	042 Return X0

Method: System.Void Clear()

Disassembly:
	0x0240C778 B.NE 0x240C718
	0x0240C77C LDP X20, X19, [X31 + 0x30]
	0x0240C780 LDP X22, X21, [X31 + 0x20]
	0x0240C784 LDP X24, X23, [X31 + 0x10]
	0x0240C788 LDR X30, [X31], #0x40
	0x0240C78C RET
	0x0240C790 LDR W8, [X21 + 0x8]
	0x0240C794 ADRP X20, 0x1CE7000
	0x0240C798 STR W8, [X31 + 0xC]
	0x0240C79C LDR X20, [X20 + 0x758]
	0x0240C7A0 MOV X0, X20
	0x0240C7A4 BL 0x1C16D08
	0x0240C7A8 ADD X1, X31, 0xC
	0x0240C7AC BL 0x1C16E04
	0x0240C7B0 MOV X21, X0
	0x0240C7B4 MOV X0, X20
	0x0240C7B8 STR W24, [X31 + 0x8]
	0x0240C7BC BL 0x1C16D08
	0x0240C7C0 ADD X1, X31, 0x8
	0x0240C7C4 BL 0x1C16E04
	0x0240C7C8 MOV X20, X0
	0x0240C7CC ADRP X0, 0x1D10000
	0x0240C7D0 LDR X0, [X0 + 0xBE8]
	0x0240C7D4 BL 0x1C16D08
	0x0240C7D8 MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+8]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X19, X0
	008 Move X20, X1
	009 Move W21, W31
	010 Move X0, [X20+32]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move X8, [X0+192]
	018 Move X0, X19
	019 Move W1, W21
	020 Move W2, W31
	021 Move X3, [X8+56]
	022 Call 0x240BDDC, X0, X1, X2
	023 Move W8, [X19+8]
	024 Add W21, W21, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 

Method: System.Void CopyFrom(T[] source, System.Int32 sourceOffset, System.Int32 sourceCount)

Disassembly:
	0x0240C7DC MOV X2, X20
	0x0240C7E0 MOV X3, X31
	0x0240C7E4 BL 0x3227BD4
	0x0240C7E8 MOV X20, X0
	0x0240C7EC ADRP X0, 0x1CEF000
	0x0240C7F0 LDR X0, [X0 + 0x578]
	0x0240C7F4 BL 0x1C16D08
	0x0240C7F8 BL 0x1C16F10
	0x0240C7FC MOV X21, X0
	0x0240C800 ADRP X0, 0x1D0F000
	0x0240C804 LDR X0, [X0 + 0x640]
	0x0240C808 BL 0x1C16D08
	0x0240C80C MOV X2, X0
	0x0240C810 MOV X0, X21
	0x0240C814 MOV X1, X20
	0x0240C818 MOV X3, X31
	0x0240C81C BL 0x330E16C
	0x0240C820 MOV X0, X21
	0x0240C824 MOV X1, X19
	0x0240C828 BL 0x1C16DEC
	0x0240C82C STR X30, [X31 - 0x40]!
	0x0240C830 STP X24, X23, [X31 + 0x10]
	0x0240C834 STP X22, X21, [X31 + 0x20]
	0x0240C838 STP X20, X19, [X31 + 0x30]
	0x0240C83C MOV X19, X3
	0x0240C840 CBZ X1, 0x240C8BC
	0x0240C844 LDR X8, [X1 + 0x18]
	0x0240C848 MOV X20, X1
	0x0240C84C CMP W8, 0x1
	0x0240C850 B.LT 0x240C8A4
	0x0240C854 MOV X21, X0
	0x0240C858 MOV X22, X31
	0x0240C85C AND X23, X8, 0x0
	0x0240C860 ADD X24, X20, 0x20
	0x0240C864 LDR X0, [X19 + 0x20]
	0x0240C868 LDRB W8, [X0 + 0x135]
	0x0240C86C TBNZ X8, 0x0, 0x240C874
	0x0240C870 BL 0x1C5C684
	0x0240C874 LDR X8, [X0 + 0xC0]
	0x0240C878 MOV X0, X21
	0x0240C87C MOV W1, W22
	0x0240C880 LDR X2, [X8 + 0x28]
	0x0240C884 BL 0x240C008
	0x0240C888 LDR W8, [X20 + 0x18]
	0x0240C88C CMP X22, X8
	0x0240C890 B.CS 0x240C8B8
	0x0240C894 STR W0, [X24, X22, LSL #2]
	0x0240C898 ADD X22, X22, 0x1
	0x0240C89C CMP X23, X22
	0x0240C8A0 B.NE 0x240C864
	0x0240C8A4 LDP X20, X19, [X31 + 0x30]
	0x0240C8A8 LDP X22, X21, [X31 + 0x20]
	0x0240C8AC LDP X24, X23, [X31 + 0x10]
	0x0240C8B0 LDR X30, [X31], #0x40
	0x0240C8B4 RET
	0x0240C8B8 BL 0x1C16F28
	0x0240C8BC ADRP X0, 0x1CEC000
	0x0240C8C0 LDR X0, [X0 + 0x528]
	0x0240C8C4 BL 0x1C16D08
	0x0240C8C8 BL 0x1C16F10
	0x0240C8CC MOV X20, X0
	0x0240C8D0 ADRP X0, 0x1D0F000
	0x0240C8D4 LDR X0, [X0 + 0x640]
	0x0240C8D8 BL 0x1C16D08
	0x0240C8DC MOV X1, X0
	0x0240C8E0 MOV X0, X20
	0x0240C8E4 MOV X2, X31
	0x0240C8E8 BL 0x330E100
	0x0240C8EC MOV X0, X20
	0x0240C8F0 MOV X1, X19
	0x0240C8F4 BL 0x1C16DEC
	0x0240C8F8 STP X30, X19, [X31 - 0x10]!
	0x0240C8FC LDR X8, [X1 + 0x20]
	0x0240C900 MOV X19, X0
	0x0240C904 LDRB W9, [X8 + 0x135]
	0x0240C908 TBNZ X9, 0x0, 0x240C918
	0x0240C90C MOV X0, X8
	0x0240C910 BL 0x1C5C684
	0x0240C914 MOV X8, X0
	0x0240C918 LDR X8, [X8 + 0xC0]
	0x0240C91C MOV X0, X19
	0x0240C920 LDR X1, [X8 + 0x88]
	0x0240C924 LDP X30, X19, [X31], #0x10
	0x0240C928 B 0x240CFB0
	0x0240C92C SUB X31, X31, 0x50
	0x0240C930 STP X30, X19, [X31 + 0x40]
	0x0240C934 MOV X19, X8
	0x0240C938 LDR X8, [X0 + 0x10]
	0x0240C93C LDR V0, [X0]
	0x0240C940 MOVI V1.2D, 0x0
	0x0240C944 STP V1, V1, [X19]
	0x0240C948 STR X8, [X31 + 0x10]
	0x0240C94C STR V0, [X31]
	0x0240C950 LDR X0, [X1 + 0x20]
	0x0240C954 LDRB W8, [X0 + 0x135]
	0x0240C958 TBNZ X8, 0x0, 0x240C960
	0x0240C95C BL 0x1C5C684
	0x0240C960 LDR X8, [X0 + 0xC0]
	0x0240C964 LDR V0, [X31]
	0x0240C968 LDR X9, [X31 + 0x10]
	0x0240C96C ADD X1, X31, 0x20
	0x0240C970 LDR X2, [X8 + 0x98]
	0x0240C974 MOV X0, X19
	0x0240C978 STR V0, [X31 + 0x2]
	0x0240C97C STR X9, [X31 + 0x30]
	0x0240C980 BL 0x2BC318C
	0x0240C984 LDP X30, X19, [X31 + 0x40]
	0x0240C988 ADD X31, X31, 0x50
	0x0240C98C RET
	0x0240C990 SUB X31, X31, 0x60
	0x0240C994 STR X30, [X31 + 0x40]
	0x0240C998 STP X20, X19, [X31 + 0x50]
	0x0240C99C LDR X8, [X1 + 0x20]
	0x0240C9A0 MOV X19, X1
	0x0240C9A4 MOV X20, X0
	0x0240C9A8 LDRB W9, [X8 + 0x135]
	0x0240C9AC TBNZ X9, 0x0, 0x240C9BC
	0x0240C9B0 MOV X0, X8
	0x0240C9B4 BL 0x1C5C684
	0x0240C9B8 MOV X8, X0
	0x0240C9BC LDR X8, [X8 + 0xC0]
	0x0240C9C0 MOV X0, X20
	0x0240C9C4 LDR X1, [X8 + 0xA0]
	0x0240C9C8 ADD X8, X31, 0x0
	0x0240C9CC BL 0x240C92C
	0x0240C9D0 LDP V1, V0, [X31]
	0x0240C9D4 STP V1, V0, [X31 + 0x20]
	0x0240C9D8 STP V1, V0, [X31]
	0x0240C9DC LDR X0, [X19 + 0x20]
	0x0240C9E0 LDRB W8, [X0 + 0x135]
	0x0240C9E4 TBNZ X8, 0x0, 0x240C9EC
	0x0240C9E8 BL 0x1C5C684
	0x0240C9EC LDR X8, [X0 + 0xC0]
	0x0240C9F0 ADD X1, X31, 0x0
	0x0240C9F4 LDR X0, [X8 + 0x90]
	0x0240C9F8 BL 0x1C16E04
	0x0240C9FC LDP X20, X19, [X31 + 0x50]
	0x0240CA00 LDR X30, [X31 + 0x40]
	0x0240CA04 ADD X31, X31, 0x60
	0x0240CA08 RET
	0x0240CA0C SUB X31, X31, 0x60
	0x0240CA10 STR X30, [X31 + 0x40]
	0x0240CA14 STP X20, X19, [X31 + 0x50]
	0x0240CA18 LDR X8, [X1 + 0x20]
	0x0240CA1C MOV X19, X1
	0x0240CA20 MOV X20, X0
	0x0240CA24 LDRB W9, [X8 + 0x135]
	0x0240CA28 TBNZ X9, 0x0, 0x240CA38
	0x0240CA2C MOV X0, X8
	0x0240CA30 BL 0x1C5C684
	0x0240CA34 MOV X8, X0
	0x0240CA38 LDR X8, [X8 + 0xC0]
	0x0240CA3C MOV X0, X20
	0x0240CA40 LDR X1, [X8 + 0xA0]
	0x0240CA44 ADD X8, X31, 0x0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, X4
	013 Compare X1, 0
	014 JumpIfEqual {68}
	015 Move W8, [X0+8]
	016 Move X21, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X8, [X1+24]
	019 Add W9, W3, W2
	020 Move X20, X1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 And X8, X8, 0
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W23, W2
	026 Move W8, W3
	027 Move X22, X31
	028 Move X24, X23
	029 ShiftRight X24, 32
	030 And X24, X24, 0x7FFFFFFF
	031 Subtract X25, X8, 1
	032 Move X26, 1
	033 Move X0, [X19+32]
	034 Add X8, X20, X24
	035 Move W27, [X8+32]
	036 Move W9, [X0+309]
	037 Move TEMP, X9
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Move X8, [X0+192]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Move X0, X21
	046 Move X3, [X8+56]
	047 Move W1, W22
	048 Call 0x240BDDC, X0, X1, X2
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, [X20+24]
	051 Add X22, X22, 1
	052 Add X9, X23, X22
	053 Add X24, X24, X26
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Call 0x1C17F28
	056 Move X20, [X31+80]
	057 Move X19, [X31+88]
	058 Move X22, [X31+64]
	059 Move X21, [X31+72]
	060 Move X24, [X31+48]
	061 Move X23, [X31+56]
	062 Move X26, [X31+32]
	063 Move X25, [X31+40]
	064 Move X30, [X31+16]
	065 Move X27, [X31+24]
	066 Add X31, X31, 96
	067 Return 
	068 Move X0, 0x1CED000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X20, X0
	073 Move X0, 0x1CF3000
	074 Move X0, [X0+1408]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X20
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, X20
	081 Move [X31+12], W8
	082 Move X20, 0x1CE8000
	083 Move X20, [X20+1880]
	084 Move W22, W3
	085 Move X0, X20
	086 Call 0x1C17D08
	087 Add X1, X31, 12
	088 Call 0x1C17E04
	089 Move X21, X0
	090 Move X0, X20
	091 Move [X31+8], W22
	092 Call 0x1C17D08
	093 Add X1, X31, 8
	094 Call 0x1C17E04
	095 Move X20, X0
	096 Move X0, 0x1D11000
	097 Move X0, [X0+3048]
	098 Call 0x1C17D08
	099 Move X1, X21
	100 Move X2, X20
	101 Move X3, X31
	102 Call String.Format, X0, X1, X2
	103 Move X20, X0
	104 Move X0, 0x1CF0000
	105 Move X0, [X0+1400]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X21, X0
	109 Move X0, 0x1CF3000
	110 Move X0, [X0+1408]
	111 Call 0x1C17D08
	112 Move X2, X0
	113 Move X0, X21
	114 Move X1, X20
	115 Move X3, X31
	116 Call ArgumentException..ctor, X0, X1, X2
	117 Move [X31+12], W3
	118 Move X20, 0x1CE8000
	119 Move X20, [X20+1880]
	120 Move W23, W3
	121 Move W22, W2
	122 Move X0, X20
	123 Call 0x1C17D08
	124 Add X1, X31, 12
	125 Call 0x1C17E04
	126 Move X21, X0
	127 Move X0, X20
	128 Move [X31+8], W22
	129 Call 0x1C17D08
	130 Add X1, X31, 8
	131 Call 0x1C17E04
	132 Move X22, X0
	133 Move X0, X20
	134 Move [X31+4], W23
	135 Call 0x1C17D08
	136 Add X1, X31, 4
	137 Call 0x1C17E04
	138 Move X20, X0
	139 Move X0, 0x1D11000
	140 Move X0, [X0+3056]
	141 Call 0x1C17D08
	142 Move X1, X21
	143 Move X2, X22
	144 Move X3, X20
	145 Move X4, X31
	146 Call String.Format, X0, X1, X2, X3
	147 Move X20, X0
	148 Move X0, 0x1CF0000
	149 Move X0, [X0+1888]
	150 Call 0x1C17D08
	151 Call 0x1C17F10
	152 Move X21, X0
	153 Move X0, 0x1D11000
	154 Move X0, [X0+3064]
	155 Call 0x1C17D08
	156 Move X2, X0
	157 Move X0, X21
	158 Move X1, X20
	159 Move X3, X31
	160 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	161 Move X0, X21
	162 Move X1, X19
	163 Call 0x1C17DEC

Method: System.Void CopyFrom(System.Collections.Generic.List`1<T> source, System.Int32 sourceOffset, System.Int32 sourceCount)

Disassembly:
	0x0240CA48 BL 0x240C92C
	0x0240CA4C LDP V1, V0, [X31]
	0x0240CA50 STP V1, V0, [X31 + 0x20]
	0x0240CA54 STP V1, V0, [X31]
	0x0240CA58 LDR X0, [X19 + 0x20]
	0x0240CA5C LDRB W8, [X0 + 0x135]
	0x0240CA60 TBNZ X8, 0x0, 0x240CA68
	0x0240CA64 BL 0x1C5C684
	0x0240CA68 LDR X8, [X0 + 0xC0]
	0x0240CA6C ADD X1, X31, 0x0
	0x0240CA70 LDR X0, [X8 + 0x90]
	0x0240CA74 BL 0x1C16E04
	0x0240CA78 LDP X20, X19, [X31 + 0x50]
	0x0240CA7C LDR X30, [X31 + 0x40]
	0x0240CA80 ADD X31, X31, 0x60
	0x0240CA84 RET
	0x0240CA88 STP X30, X21, [X31 - 0x20]!
	0x0240CA8C STP X20, X19, [X31 + 0x10]
	0x0240CA90 LDR W8, [X0 + 0x8]
	0x0240CA94 CMP W8, 0x1
	0x0240CA98 B.LT 0x240CAE0
	0x0240CA9C MOV X19, X0
	0x0240CAA0 MOV X20, X1
	0x0240CAA4 MOV W21, W31
	0x0240CAA8 LDR X0, [X20 + 0x20]
	0x0240CAAC LDRB W8, [X0 + 0x135]
	0x0240CAB0 TBNZ X8, 0x0, 0x240CAB8
	0x0240CAB4 BL 0x1C5C684
	0x0240CAB8 LDR X8, [X0 + 0xC0]
	0x0240CABC MOV X0, X19
	0x0240CAC0 MOV W1, W21
	0x0240CAC4 MOV X2, X31
	0x0240CAC8 LDR X3, [X8 + 0x38]
	0x0240CACC BL 0x240C0F8
	0x0240CAD0 LDR W8, [X19 + 0x8]
	0x0240CAD4 ADD W21, W21, 0x1
	0x0240CAD8 CMP W21, W8
	0x0240CADC B.LT 0x240CAA8
	0x0240CAE0 LDP X20, X19, [X31 + 0x10]
	0x0240CAE4 LDP X30, X21, [X31], #0x20
	0x0240CAE8 RET
	0x0240CAEC SUB X31, X31, 0x60
	0x0240CAF0 STP X30, X27, [X31 + 0x10]
	0x0240CAF4 STP X26, X25, [X31 + 0x20]
	0x0240CAF8 STP X24, X23, [X31 + 0x30]
	0x0240CAFC STP X22, X21, [X31 + 0x40]
	0x0240CB00 STP X20, X19, [X31 + 0x50]
	0x0240CB04 MOV X19, X4
	0x0240CB08 CBZ X1, 0x240CBCC
	0x0240CB0C LDR W8, [X0 + 0x8]
	0x0240CB10 MOV X21, X0
	0x0240CB14 CMP W8, W3
	0x0240CB18 B.LT 0x240CC04
	0x0240CB1C LDR X8, [X1 + 0x18]
	0x0240CB20 ADD W9, W3, W2
	0x0240CB24 MOV X20, X1
	0x0240CB28 CMP W9, W8
	0x0240CB2C B.GT 0x240CC98
	0x0240CB30 CMP W3, 0x1
	0x0240CB34 B.LT 0x240CBB0
	0x0240CB38 AND X8, X8, 0x0
	0x0240CB3C CMP X8, W2, UXTW
	0x0240CB40 B.LS 0x240CBAC
	0x0240CB44 MOV W24, W2
	0x0240CB48 MOV W8, W3
	0x0240CB4C MOV X22, X31
	0x0240CB50 UBFM X25, X24, 0x20, 0x1F
	0x0240CB54 SUB X26, X8, 0x1
	0x0240CB58 MOVZ X27, 0x1
	0x0240CB5C LDR X0, [X19 + 0x20]
	0x0240CB60 ADD X8, X20, X25, 0x1E, ASR
	0x0240CB64 LDR W23, [X8 + 0x20]
	0x0240CB68 LDRB W9, [X0 + 0x135]
	0x0240CB6C TBNZ X9, 0x0, 0x240CB74
	0x0240CB70 BL 0x1C5C684
	0x0240CB74 LDR X8, [X0 + 0xC0]
	0x0240CB78 MOV X0, X21
	0x0240CB7C MOV W1, W22
	0x0240CB80 MOV X2, X23
	0x0240CB84 LDR X3, [X8 + 0x38]
	0x0240CB88 BL 0x240C0F8
	0x0240CB8C CMP X26, X22
	0x0240CB90 B.EQ 0x240CBB0
	0x0240CB94 LDR W8, [X20 + 0x18]
	0x0240CB98 ADD X22, X22, 0x1
	0x0240CB9C ADD X9, X24, X22
	0x0240CBA0 ADD X25, X25, X27
	0x0240CBA4 CMP X9, X8
	0x0240CBA8 B.CC 0x240CB5C
	0x0240CBAC BL 0x1C16F28
	0x0240CBB0 LDP X20, X19, [X31 + 0x50]
	0x0240CBB4 LDP X22, X21, [X31 + 0x40]
	0x0240CBB8 LDP X24, X23, [X31 + 0x30]
	0x0240CBBC LDP X26, X25, [X31 + 0x20]
	0x0240CBC0 LDP X30, X27, [X31 + 0x10]
	0x0240CBC4 ADD X31, X31, 0x60
	0x0240CBC8 RET
	0x0240CBCC ADRP X0, 0x1CEC000
	0x0240CBD0 LDR X0, [X0 + 0x528]
	0x0240CBD4 BL 0x1C16D08
	0x0240CBD8 BL 0x1C16F10
	0x0240CBDC MOV X20, X0
	0x0240CBE0 ADRP X0, 0x1CF2000
	0x0240CBE4 LDR X0, [X0 + 0x580]
	0x0240CBE8 BL 0x1C16D08
	0x0240CBEC MOV X1, X0
	0x0240CBF0 MOV X0, X20
	0x0240CBF4 MOV X2, X31
	0x0240CBF8 BL 0x330E100
	0x0240CBFC MOV X0, X20
	0x0240CC00 B 0x240CD4C
	0x0240CC04 STR W8, [X31 + 0xC]
	0x0240CC08 ADRP X20, 0x1CE7000
	0x0240CC0C LDR X20, [X20 + 0x758]
	0x0240CC10 MOV W22, W3
	0x0240CC14 MOV X0, X20
	0x0240CC18 BL 0x1C16D08
	0x0240CC1C ADD X1, X31, 0xC
	0x0240CC20 BL 0x1C16E04
	0x0240CC24 MOV X21, X0
	0x0240CC28 MOV X0, X20
	0x0240CC2C STR W22, [X31 + 0x8]
	0x0240CC30 BL 0x1C16D08
	0x0240CC34 ADD X1, X31, 0x8
	0x0240CC38 BL 0x1C16E04
	0x0240CC3C MOV X20, X0
	0x0240CC40 ADRP X0, 0x1D10000
	0x0240CC44 LDR X0, [X0 + 0xBE8]
	0x0240CC48 BL 0x1C16D08
	0x0240CC4C MOV X1, X21
	0x0240CC50 MOV X2, X20
	0x0240CC54 MOV X3, X31
	0x0240CC58 BL 0x3227BD4
	0x0240CC5C MOV X20, X0
	0x0240CC60 ADRP X0, 0x1CEF000
	0x0240CC64 LDR X0, [X0 + 0x578]
	0x0240CC68 BL 0x1C16D08
	0x0240CC6C BL 0x1C16F10
	0x0240CC70 MOV X21, X0
	0x0240CC74 ADRP X0, 0x1CF2000
	0x0240CC78 LDR X0, [X0 + 0x580]
	0x0240CC7C BL 0x1C16D08
	0x0240CC80 MOV X2, X0
	0x0240CC84 MOV X0, X21
	0x0240CC88 MOV X1, X20
	0x0240CC8C MOV X3, X31
	0x0240CC90 BL 0x330E16C
	0x0240CC94 B 0x240CD48
	0x0240CC98 STR W3, [X31 + 0xC]
	0x0240CC9C ADRP X20, 0x1CE7000
	0x0240CCA0 LDR X20, [X20 + 0x758]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X4
	011 Compare X1, 0
	012 JumpIfEqual {71}
	013 Move W8, [X0+8]
	014 Move W20, W3
	015 Move X23, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X0, [X19+32]
	018 Move W21, W2
	019 Move X22, X1
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move W8, [X22+24]
	027 Add W9, W20, W21
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W24, W31
	031 Move X0, [X19+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X8, [X0+192]
	039 Add W1, W21, W24
	040 Move X0, X22
	041 Move X2, [X8+184]
	042 Call List`1<Boolean>.get_Item, X0, X1
	043 Move X8, [X19+32]
	044 Move W25, W0
	045 Move W9, [X8+309]
	046 Move TEMP, X9
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {53}
	050 Move X0, X8
	051 Call 0x1C5D684
	052 Move X8, X0
	053 Move X8, [X8+192]
	054 And W2, W25, 1
	055 Move X0, X23
	056 Move W1, W24
	057 Move X3, [X8+56]
	058 Call 0x240BDDC, X0, X1, X2
	059 Add W24, W24, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Move X22, [X31+48]
	064 Move X21, [X31+56]
	065 Move X24, [X31+32]
	066 Move X23, [X31+40]
	067 Move X30, [X31+16]
	068 Move X25, [X31+24]
	069 Add X31, X31, 80
	070 Return 
	071 Move X0, 0x1CED000
	072 Move X0, [X0+1320]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0x1CF3000
	077 Move X0, [X0+1408]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X31
	082 Call ArgumentNullException..ctor, X0, X1
	083 Move X0, X20
	084 Move [X31+12], W8
	085 Move X21, 0x1CE8000
	086 Move X21, [X21+1880]
	087 Move X0, X21
	088 Call 0x1C17D08
	089 Add X1, X31, 12
	090 Call 0x1C17E04
	091 Move X22, X0
	092 Move X0, X21
	093 Move [X31+8], W20
	094 Call 0x1C17D08
	095 Add X1, X31, 8
	096 Call 0x1C17E04
	097 Move X20, X0
	098 Move X0, 0x1D11000
	099 Move X0, [X0+3048]
	100 Call 0x1C17D08
	101 Move X1, X22
	102 Move X2, X20
	103 Move X3, X31
	104 Call String.Format, X0, X1, X2
	105 Move X20, X0
	106 Move X0, 0x1CF0000
	107 Move X0, [X0+1400]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X21, X0
	111 Move X0, 0x1CF3000
	112 Move X0, [X0+1408]
	113 Call 0x1C17D08
	114 Move X2, X0
	115 Move X0, X21
	116 Move X1, X20
	117 Move X3, X31
	118 Call ArgumentException..ctor, X0, X1, X2
	119 Move [X31+12], W20
	120 Move X22, 0x1CE8000
	121 Move X22, [X22+1880]
	122 Move X0, X22
	123 Call 0x1C17D08
	124 Add X1, X31, 12
	125 Call 0x1C17E04
	126 Move X23, X0
	127 Move X0, X22
	128 Move [X31+8], W21
	129 Call 0x1C17D08
	130 Add X1, X31, 8
	131 Call 0x1C17E04
	132 Move X21, X0
	133 Move X0, X22
	134 Move [X31+4], W20
	135 Call 0x1C17D08
	136 Add X1, X31, 4
	137 Call 0x1C17E04
	138 Move X20, X0
	139 Move X0, 0x1D11000
	140 Move X0, [X0+3056]
	141 Call 0x1C17D08
	142 Move X1, X23
	143 Move X2, X21
	144 Move X3, X20
	145 Move X4, X31
	146 Call String.Format, X0, X1, X2, X3
	147 Move X20, X0
	148 Move X0, 0x1CF0000
	149 Move X0, [X0+1888]
	150 Call 0x1C17D08
	151 Call 0x1C17F10
	152 Move X21, X0
	153 Move X0, 0x1D11000
	154 Move X0, [X0+3064]
	155 Call 0x1C17D08
	156 Move X2, X0
	157 Move X0, X21
	158 Move X1, X20
	159 Move X3, X31
	160 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	161 Move X0, X21
	162 Move X1, X19
	163 Call 0x1C17DEC

Method: System.String ToListString()

Disassembly:
	0x0240CCA4 MOV W23, W3
	0x0240CCA8 MOV W22, W2
	0x0240CCAC MOV X0, X20
	0x0240CCB0 BL 0x1C16D08
	0x0240CCB4 ADD X1, X31, 0xC
	0x0240CCB8 BL 0x1C16E04
	0x0240CCBC MOV X21, X0
	0x0240CCC0 MOV X0, X20
	0x0240CCC4 STR W22, [X31 + 0x8]
	0x0240CCC8 BL 0x1C16D08
	0x0240CCCC ADD X1, X31, 0x8
	0x0240CCD0 BL 0x1C16E04
	0x0240CCD4 MOV X22, X0
	0x0240CCD8 MOV X0, X20
	0x0240CCDC STR W23, [X31 + 0x4]
	0x0240CCE0 BL 0x1C16D08
	0x0240CCE4 ADD X1, X31, 0x4
	0x0240CCE8 BL 0x1C16E04
	0x0240CCEC MOV X20, X0
	0x0240CCF0 ADRP X0, 0x1D10000
	0x0240CCF4 LDR X0, [X0 + 0xBF0]
	0x0240CCF8 BL 0x1C16D08
	0x0240CCFC MOV X1, X21
	0x0240CD00 MOV X2, X22
	0x0240CD04 MOV X3, X20
	0x0240CD08 MOV X4, X31
	0x0240CD0C BL 0x3227C18
	0x0240CD10 MOV X20, X0
	0x0240CD14 ADRP X0, 0x1CEF000
	0x0240CD18 LDR X0, [X0 + 0x760]
	0x0240CD1C BL 0x1C16D08
	0x0240CD20 BL 0x1C16F10
	0x0240CD24 MOV X21, X0
	0x0240CD28 ADRP X0, 0x1D10000
	0x0240CD2C LDR X0, [X0 + 0xBF8]
	0x0240CD30 BL 0x1C16D08
	0x0240CD34 MOV X2, X0
	0x0240CD38 MOV X0, X21
	0x0240CD3C MOV X1, X20
	0x0240CD40 MOV X3, X31
	0x0240CD44 BL 0x3311888
	0x0240CD48 MOV X0, X21
	0x0240CD4C MOV X1, X19
	0x0240CD50 BL 0x1C16DEC
	0x0240CD54 SUB X31, X31, 0x50
	0x0240CD58 STP X30, X25, [X31 + 0x10]
	0x0240CD5C STP X24, X23, [X31 + 0x20]
	0x0240CD60 STP X22, X21, [X31 + 0x30]
	0x0240CD64 STP X20, X19, [X31 + 0x40]
	0x0240CD68 MOV X19, X4
	0x0240CD6C CBZ X1, 0x240CE34
	0x0240CD70 LDR W8, [X0 + 0x8]
	0x0240CD74 MOV W20, W3
	0x0240CD78 MOV X23, X0
	0x0240CD7C CMP W8, W3
	0x0240CD80 B.LT 0x240CE6C
	0x0240CD84 LDR X0, [X19 + 0x20]
	0x0240CD88 MOV W21, W2
	0x0240CD8C MOV X22, X1
	0x0240CD90 LDRB W8, [X0 + 0x135]
	0x0240CD94 TBNZ X8, 0x0, 0x240CD9C
	0x0240CD98 BL 0x1C5C684
	0x0240CD9C LDR W8, [X22 + 0x18]
	0x0240CDA0 ADD W9, W20, W21
	0x0240CDA4 CMP W8, W9
	0x0240CDA8 B.LT 0x240CEFC
	0x0240CDAC CMP W20, 0x1
	0x0240CDB0 B.LT 0x240CE1C
	0x0240CDB4 MOV W24, W31
	0x0240CDB8 LDR X0, [X19 + 0x20]
	0x0240CDBC LDRB W8, [X0 + 0x135]
	0x0240CDC0 TBNZ X8, 0x0, 0x240CDC8
	0x0240CDC4 BL 0x1C5C684
	0x0240CDC8 LDR X8, [X0 + 0xC0]
	0x0240CDCC ADD W1, W21, W24
	0x0240CDD0 MOV X0, X22
	0x0240CDD4 LDR X2, [X8 + 0xB8]
	0x0240CDD8 BL 0x30167BC
	0x0240CDDC LDR X8, [X19 + 0x20]
	0x0240CDE0 MOV X25, X0
	0x0240CDE4 LDRB W9, [X8 + 0x135]
	0x0240CDE8 TBNZ X9, 0x0, 0x240CDF8
	0x0240CDEC MOV X0, X8
	0x0240CDF0 BL 0x1C5C684
	0x0240CDF4 MOV X8, X0
	0x0240CDF8 LDR X8, [X8 + 0xC0]
	0x0240CDFC AND X2, X25, 0x0
	0x0240CE00 MOV X0, X23
	0x0240CE04 MOV W1, W24
	0x0240CE08 LDR X3, [X8 + 0x38]
	0x0240CE0C BL 0x240C0F8
	0x0240CE10 ADD W24, W24, 0x1
	0x0240CE14 CMP W20, W24
	0x0240CE18 B.NE 0x240CDB8
	0x0240CE1C LDP X20, X19, [X31 + 0x40]
	0x0240CE20 LDP X22, X21, [X31 + 0x30]
	0x0240CE24 LDP X24, X23, [X31 + 0x20]
	0x0240CE28 LDP X30, X25, [X31 + 0x10]
	0x0240CE2C ADD X31, X31, 0x50
	0x0240CE30 RET
	0x0240CE34 ADRP X0, 0x1CEC000
	0x0240CE38 LDR X0, [X0 + 0x528]
	0x0240CE3C BL 0x1C16D08
	0x0240CE40 BL 0x1C16F10
	0x0240CE44 MOV X20, X0
	0x0240CE48 ADRP X0, 0x1CF2000
	0x0240CE4C LDR X0, [X0 + 0x580]
	0x0240CE50 BL 0x1C16D08
	0x0240CE54 MOV X1, X0
	0x0240CE58 MOV X0, X20
	0x0240CE5C MOV X2, X31
	0x0240CE60 BL 0x330E100
	0x0240CE64 MOV X0, X20
	0x0240CE68 B 0x240CFA8
	0x0240CE6C STR W8, [X31 + 0xC]
	0x0240CE70 ADRP X21, 0x1CE7000
	0x0240CE74 LDR X21, [X21 + 0x758]
	0x0240CE78 MOV X0, X21
	0x0240CE7C BL 0x1C16D08
	0x0240CE80 ADD X1, X31, 0xC
	0x0240CE84 BL 0x1C16E04
	0x0240CE88 MOV X22, X0
	0x0240CE8C MOV X0, X21
	0x0240CE90 STR W20, [X31 + 0x8]
	0x0240CE94 BL 0x1C16D08
	0x0240CE98 ADD X1, X31, 0x8
	0x0240CE9C BL 0x1C16E04
	0x0240CEA0 MOV X20, X0
	0x0240CEA4 ADRP X0, 0x1D10000
	0x0240CEA8 LDR X0, [X0 + 0xBE8]
	0x0240CEAC BL 0x1C16D08
	0x0240CEB0 MOV X1, X22
	0x0240CEB4 MOV X2, X20
	0x0240CEB8 MOV X3, X31
	0x0240CEBC BL 0x3227BD4
	0x0240CEC0 MOV X20, X0
	0x0240CEC4 ADRP X0, 0x1CEF000
	0x0240CEC8 LDR X0, [X0 + 0x578]
	0x0240CECC BL 0x1C16D08
	0x0240CED0 BL 0x1C16F10
	0x0240CED4 MOV X21, X0
	0x0240CED8 ADRP X0, 0x1CF2000
	0x0240CEDC LDR X0, [X0 + 0x580]
	0x0240CEE0 BL 0x1C16D08
	0x0240CEE4 MOV X2, X0
	0x0240CEE8 MOV X0, X21
	0x0240CEEC MOV X1, X20
	0x0240CEF0 MOV X3, X31
	0x0240CEF4 BL 0x330E16C
	0x0240CEF8 B 0x240CFA4
	0x0240CEFC STR W20, [X31 + 0xC]
	0x0240CF00 ADRP X22, 0x1CE7000
	0x0240CF04 LDR X22, [X22 + 0x758]
	0x0240CF08 MOV X0, X22
	0x0240CF0C BL 0x1C16D08
	0x0240CF10 ADD X1, X31, 0xC
	0x0240CF14 BL 0x1C16E04
	0x0240CF18 MOV X23, X0
	0x0240CF1C MOV X0, X22
	0x0240CF20 STR W21, [X31 + 0x8]
	0x0240CF24 BL 0x1C16D08
	0x0240CF28 ADD X1, X31, 0x8
	0x0240CF2C BL 0x1C16E04
	0x0240CF30 MOV X21, X0
	0x0240CF34 MOV X0, X22
	0x0240CF38 STR W20, [X31 + 0x4]
	0x0240CF3C BL 0x1C16D08
	0x0240CF40 ADD X1, X31, 0x4
	0x0240CF44 BL 0x1C16E04
	0x0240CF48 MOV X20, X0
	0x0240CF4C ADRP X0, 0x1D10000
	0x0240CF50 LDR X0, [X0 + 0xBF0]
	0x0240CF54 BL 0x1C16D08
	0x0240CF58 MOV X1, X23
	0x0240CF5C MOV X2, X21
	0x0240CF60 MOV X3, X20
	0x0240CF64 MOV X4, X31
	0x0240CF68 BL 0x3227C18
	0x0240CF6C MOV X20, X0
	0x0240CF70 ADRP X0, 0x1CEF000
	0x0240CF74 LDR X0, [X0 + 0x760]
	0x0240CF78 BL 0x1C16D08
	0x0240CF7C BL 0x1C16F10
	0x0240CF80 MOV X21, X0
	0x0240CF84 ADRP X0, 0x1D10000
	0x0240CF88 LDR X0, [X0 + 0xBF8]
	0x0240CF8C BL 0x1C16D08

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1FCE000
	011 Move W8, [X21+2479]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x1CE8000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0x1CE8000
	022 Move X0, [X0+2288]
	023 Call 0x1C17CF4
	024 Move X0, 0x1CE8000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move X0, 0x1CE9000
	028 Move X0, [X0+4064]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+2479], W8
	032 Move [X31+12], W31
	033 Move W8, [X20+8]
	034 Compare W8, 0
	035 JumpIfEqual {79}
	036 Move X8, [X20]
	037 Compare X8, 0
	038 JumpIfEqual {79}
	039 Move X0, [X19+32]
	040 Move W8, [X0+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {46}
	045 Call 0x1C5D684
	046 Move X8, [X0+192]
	047 Move X0, [X8+48]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move X8, [X0+184]
	055 Move X8, [X8]
	056 Compare X8, 0
	057 JumpIfEqual {80}
	058 Move X0, [X19+32]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {65}
	064 Call 0x1C5D684
	065 Move X8, [X0+192]
	066 Move X0, [X8+48]
	067 Move W8, [X0+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {73}
	072 Call 0x1C5D684
	073 Move X8, [X0+184]
	074 Move X0, [X8]
	075 Compare X0, 0
	076 JumpIfEqual {248}
	077 Move X1, X31
	078 Call StringBuilder.Clear, X0
	079 Move X0, X31
	080 Move X8, 0x1CE8000
	081 Move X8, [X8+2288]
	082 Move X0, [X8]
	083 Call 0x1C17F10
	084 Move X1, X31
	085 Move X21, X0
	086 Call StringBuilder..ctor, X0
	087 Move X0, [X19+32]
	088 Move W8, [X0+309]
	089 Move TEMP, X8
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfEqual {94}
	093 Call 0x1C5D684
	094 Move X8, [X0+192]
	095 Move X0, [X8+48]
	096 Move W8, [X0+309]
	097 Move TEMP, X8
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {102}
	101 Call 0x1C5D684
	102 Move X8, [X0+184]
	103 Move [X8], X21
	104 Move X0, [X19+32]
	105 Move W8, [X0+309]
	106 Move TEMP, X8
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {111}
	110 Call 0x1C5D684
	111 Move X8, [X0+192]
	112 Move X0, [X8+48]
	113 Move W8, [X0+309]
	114 Move TEMP, X8
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfEqual {119}
	118 Call 0x1C5D684
	119 Move X0, [X19+32]
	120 Move W8, [X0+309]
	121 Move TEMP, X8
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfEqual {126}
	125 Call 0x1C5D684
	126 Move X8, [X0+192]
	127 Move X0, [X8+48]
	128 Move W8, [X0+309]
	129 Move TEMP, X8
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfEqual {134}
	133 Call 0x1C5D684
	134 Move X8, [X0+184]
	135 Move X24, 0x1CE8000
	136 Move X25, 0x1CE8000
	137 Move X26, 0x1CE9000
	138 Move X21, [X8]
	139 Move X24, [X24+1728]
	140 Move X25, [X25+2904]
	141 Move X26, [X26+4064]
	142 Move W22, W31
	143 Move X0, [X19+32]
	144 Move W8, [X0+309]
	145 Move TEMP, X8
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfEqual {150}
	149 Call 0x1C5D684
	150 Move X8, [X24]
	151 Move X9, [X0+192]
	152 Move W10, [X8+224]
	153 Move X23, [X9+192]
	154 Compare W10, 0
	155 JumpIfNotEqual {158}
	156 Move X0, X8
	157 Call 0x1C17DFC
	158 Move X0, X23
	159 Move X1, X31
	160 Call Type.GetTypeFromHandle, X0
	161 Compare X0, 0
	162 JumpIfEqual {248}
	163 Move X1, X31
	164 Call Type.get_IsValueType, X0
	165 Move X8, [X19+32]
	166 Move W23, W0
	167 Move W9, [X8+309]
	168 Move TEMP, X9
	169 And TEMP, TEMP, 1
	170 Compare TEMP, 1
	171 JumpIfEqual {175}
	172 Move X0, X8
	173 Call 0x1C5D684
	174 Move X8, X0
	175 Move X8, [X8+192]
	176 Move X0, X20
	177 Move W1, W22
	178 Move X2, [X8+200]
	179 Call 0x240C06C, X0, X1
	180 And W8, W0, 1
	181 Move TEMP, X23
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfNotEqual {208}
	185 Move X0, [X25]
	186 Move [X31+12], W8
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {191}
	190 Call 0x1C17DFC
	191 Move X0, [X19+32]
	192 Move W8, [X0+309]
	193 Move TEMP, X8
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfEqual {198}
	197 Call 0x1C5D684
	198 Move X8, [X0+192]
	199 Add X0, X31, 12
	200 Move X1, [X8+208]
	201 Call Boolean.ToString, X0
	202 Compare X21, 0
	203 JumpIfEqual {248}
	204 Move X1, X0
	205 Move X0, X21
	206 Move X2, X31
	207 Call StringBuilder.Append, X0, X1
	208 Move [X31+8], W8
	209 Move X0, [X19+32]
	210 Move W8, [X0+309]
	211 Move TEMP, X8
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfEqual {216}
	215 Call 0x1C5D684
	216 Move X8, [X0+192]
	217 Add X1, X31, 8
	218 Move X0, [X8+24]
	219 Call 0x1C17E04
	220 Compare X21, 0
	221 JumpIfEqual {248}
	222 Move X1, X0
	223 Move X0, X21
	224 Move X2, X31
	225 Call StringBuilder.Append, X0, X1
	226 Move W8, [X20+8]
	227 Add W22, W22, 1
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move X1, [X26]
	230 Move X0, X21
	231 Move X2, X31
	232 Call StringBuilder.Append, X0, X1
	233 Move X8, [X21]
	234 Move X0, X21
	235 Move X9, [X8+360]
	236 Move X1, [X8+368]
	237 NotImplemented "Instruction BLR not yet implemented."
	238 Move X20, [X31+64]
	239 Move X19, [X31+72]
	240 Move X22, [X31+48]
	241 Move X21, [X31+56]
	242 Move X24, [X31+32]
	243 Move X23, [X31+40]
	244 Move X26, [X31+16]
	245 Move X25, [X31+24]
	246 Move X30, [X31+80]
	247 Return X0
	248 Call 0x1C17F20

Method: Fusion.NetworkArrayReadOnly`1<T> op_Implicit(Fusion.NetworkArray`1<T> value)

Disassembly:
	0x0240CF90 MOV X2, X0
	0x0240CF94 MOV X0, X21
	0x0240CF98 MOV X1, X20
	0x0240CF9C MOV X3, X31
	0x0240CFA0 BL 0x3311888
	0x0240CFA4 MOV X0, X21
	0x0240CFA8 MOV X1, X19
	0x0240CFAC BL 0x1C16DEC
	0x0240CFB0 SUB X31, X31, 0x60
	0x0240CFB4 STR X30, [X31 + 0x10]
	0x0240CFB8 STP X26, X25, [X31 + 0x20]
	0x0240CFBC STP X24, X23, [X31 + 0x30]
	0x0240CFC0 STP X22, X21, [X31 + 0x40]
	0x0240CFC4 STP X20, X19, [X31 + 0x50]
	0x0240CFC8 ADRP X21, 0x1FCD000
	0x0240CFCC LDRB W8, [X21 + 0x9B0]
	0x0240CFD0 MOV X19, X1
	0x0240CFD4 MOV X20, X0
	0x0240CFD8 TBNZ X8, 0x0, 0x240D014
	0x0240CFDC ADRP X0, 0x1CEA000
	0x0240CFE0 LDR X0, [X0 + 0x398]
	0x0240CFE4 BL 0x1C16CF4
	0x0240CFE8 ADRP X0, 0x1CE7000
	0x0240CFEC LDR X0, [X0 + 0x8F0]
	0x0240CFF0 BL 0x1C16CF4
	0x0240CFF4 ADRP X0, 0x1CE7000
	0x0240CFF8 LDR X0, [X0 + 0x6C0]
	0x0240CFFC BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X0
	007 Move X0, [X1+32]
	008 Move X22, [X20]
	009 Move X19, X8
	010 Add X9, X0, 309
	011 NotImplemented "Instruction LDRH not yet implemented."
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X21, X1
	017 Call 0x1C5D684
	018 Move X0, [X21+32]
	019 Add X8, X0, 309
	020 NotImplemented "Instruction LDRH not yet implemented."
	021 Move W21, [X20+8]
	022 Move X20, [X20+16]
	023 Move [X19], X31
	024 Move [X19+8], X31
	025 Move [X19+16], X31
	026 Move TEMP, X9
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Move [X19], X22
	032 Move [X19+8], W21
	033 Move [X19+16], X20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return X0

