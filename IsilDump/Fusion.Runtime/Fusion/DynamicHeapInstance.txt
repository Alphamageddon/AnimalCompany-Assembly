Type: Fusion.DynamicHeapInstance

Method: System.Void .ctor(System.Type[] types)

Disassembly:
	0x01E82378 CBZ X0, 0x1E824B4
	0x01E8237C ADRP X25, 0x227B000
	0x01E82380 ADRP X26, 0x227B000
	0x01E82384 LDR W24, [X19 + 0x18]
	0x01E82388 LDR X25, [X25 + 0xDA0]
	0x01E8238C LDR X26, [X26 + 0xD80]
	0x01E82390 MOV W22, W31
	0x01E82394 MOVZ W27, 0x68
	0x01E82398 LDR W8, [X0 + 0x18]
	0x01E8239C CMP W22, W8
	0x01E823A0 B.GE 0x1E82464
	0x01E823A4 LDR X2, [X25]
	0x01E823A8 ADD X8, X31, 0x128
	0x01E823AC MOV W1, W22
	0x01E823B0 BL 0x2FCA9E0
	0x01E823B4 ADD X0, X31, 0x70
	0x01E823B8 ADD X1, X31, 0x128
	0x01E823BC MOVZ W2, 0x50
	0x01E823C0 BL 0x3EB1AC0
	0x01E823C4 ADD X8, X31, 0x8
	0x01E823C8 ADD X0, X31, 0x70
	0x01E823CC BL 0x1E835C4
	0x01E823D0 LDR X23, [X26]
	0x01E823D4 ADD X0, X31, 0xC0
	0x01E823D8 ADD X1, X31, 0x8
	0x01E823DC MOVZ W2, 0x68
	0x01E823E0 BL 0x3EB1AC0
	0x01E823E4 LDR W9, [X19 + 0x1C]
	0x01E823E8 LDR X8, [X19 + 0x10]
	0x01E823EC ADD W9, W9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2558000
	007 Move X21, 0x227C000
	008 Move W8, [X22+480]
	009 Move X21, [X21+2976]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x227C000
	017 Move X0, [X0+2976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+480], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move W0, 64
	030 Move X1, X20
	031 Call DynamicHeap.Create, X0, X1
	032 Move [X19+16], X0
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return 

Method: System.Void Finalize()

Disassembly:
	0x01E823F0 STR W9, [X19 + 0x1C]
	0x01E823F4 CBZ X8, 0x1E824B4
	0x01E823F8 LDRSW X9, [X19 + 0x18]
	0x01E823FC LDR W10, [X8 + 0x18]
	0x01E82400 CMP W9, W10
	0x01E82404 B.CS 0x1E82428
	0x01E82408 MADD X8, X9, X27, X8
	0x01E8240C ADD W10, W9, 0x1
	0x01E82410 ADD X0, X8, 0x20
	0x01E82414 ADD X1, X31, 0xC0
	0x01E82418 MOVZ W2, 0x68
	0x01E8241C STR W10, [X19 + 0x18]
	0x01E82420 BL 0x3EB1AC0
	0x01E82424 B 0x1E82454
	0x01E82428 LDR X8, [X23 + 0x20]
	0x01E8242C ADD X0, X31, 0x128
	0x01E82430 ADD X1, X31, 0xC0
	0x01E82434 MOVZ W2, 0x68
	0x01E82438 LDR X8, [X8 + 0xC0]
	0x01E8243C LDR X23, [X8 + 0x70]
	0x01E82440 BL 0x3EB1AC0
	0x01E82444 ADD X1, X31, 0x128
	0x01E82448 MOV X0, X19
	0x01E8244C MOV X2, X23
	0x01E82450 BL 0x2FECE74
	0x01E82454 LDR X0, [X21 + 0x98]
	0x01E82458 ADD W22, W22, 0x1
	0x01E8245C CBNZ X0, 0x1E82398
	0x01E82460 B 0x1E824B4
	0x01E82464 CBZ X20, 0x1E824B4
	0x01E82468 LDR W3, [X20 + 0x14]
	0x01E8246C ANDS W31, W3, 0x3
	0x01E82470 B.EQ 0x1E8248C
	0x01E82474 LDR X8, [X20]
	0x01E82478 LDR X1, [X21 + 0x38]
	0x01E8247C MOV X0, X20
	0x01E82480 MOV X2, X19
	0x01E82484 LDP X9, X4, [X8 + 0x1A8]
	0x01E82488 BLR X9
	0x01E8248C LDR W8, [X19 + 0x18]
	0x01E82490 SUB W0, W8, W24
	0x01E82494 LDP X20, X19, [X31 + 0x1E0]
	0x01E82498 LDP X22, X21, [X31 + 0x1D0]
	0x01E8249C LDP X24, X23, [X31 + 0x1C0]
	0x01E824A0 LDP X26, X25, [X31 + 0x1B0]
	0x01E824A4 LDP X30, X27, [X31 + 0x1A0]
	0x01E824A8 LDR X29, [X31 + 0x190]
	0x01E824AC ADD X31, X31, 0x1F0
	0x01E824B0 RET
	0x01E824B4 BL 0x1C16F20
	0x01E824B8 SUB X31, X31, 0x160
	0x01E824BC STR D14, [X31 + 0xD0]
	0x01E824C0 STP D13, D12, [X31 + 0xD8]
	0x01E824C4 STP D11, D10, [X31 + 0xE8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2558000
	006 Move W8, [X20+481]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x227C000
	013 Move X0, [X0+2976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+481], W8
	017 Move X20, [X19+16]
	018 Compare X20, 0
	019 JumpIfEqual {29}
	020 Move X8, 0x227C000
	021 Move X8, [X8+2976]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Call DynamicHeap.Destroy, X0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call Object.Finalize, X0
	036 Return 
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X0, X21
	040 Call 0x3EB2AD0
	041 Move X20, [X0]
	042 Call 0x3EB2AE0
	043 Move X0, X19
	044 Move X1, X31
	045 Call Object.Finalize, X0
	046 Compare X20, 0
	047 JumpIfNotEqual {54}
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return 
	053 Move X20, X31
	054 Move X0, X20
	055 Call 0x1C17F18
	056 Move X21, X0
	057 Move X0, X19
	058 Move X1, X31
	059 Call Object.Finalize, X0
	060 Compare X20, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X21
	063 Call 0x1D2D690
	064 Move X0, X20
	065 Call 0x1C17F18
	066 Call 0x1991590

Method: System.Void Free(System.Void* ptr)

Disassembly:
	0x01E824C8 STP D9, D8, [X31 + 0xF8]
	0x01E824CC STR X29, [X31 + 0x108]
	0x01E824D0 STP X30, X27, [X31 + 0x110]
	0x01E824D4 STP X26, X25, [X31 + 0x120]
	0x01E824D8 STP X24, X23, [X31 + 0x130]
	0x01E824DC STP X22, X21, [X31 + 0x140]
	0x01E824E0 STP X20, X19, [X31 + 0x150]
	0x01E824E4 ADRP X27, 0x2557000
	0x01E824E8 LDRB W8, [X27 + 0x1E6]
	0x01E824EC MOV W21, W7
	0x01E824F0 MOV W22, W6
	0x01E824F4 MOV W23, W5
	0x01E824F8 MOV X19, X4
	0x01E824FC MOV X24, X3
	0x01E82500 MOV X25, X2
	0x01E82504 MOV W26, W1
	0x01E82508 MOV V8.16B, V6.16B
	0x01E8250C MOV V9.16B, V5.16B
	0x01E82510 MOV V10.16B, V4.16B
	0x01E82514 MOV V11.16B, V3.16B
	0x01E82518 MOV V12.16B, V2.16B
	0x01E8251C MOV V13.16B, V1.16B
	0x01E82520 MOV V14.16B, V0.16B
	0x01E82524 MOV X20, X0
	0x01E82528 TBNZ X8, 0x0, 0x1E8254C
	0x01E8252C ADRP X0, 0x227B000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2558000
	007 Move X21, 0x227C000
	008 Move W8, [X22+482]
	009 Move X21, [X21+2976]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x227C000
	017 Move X0, [X0+2976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+482], W8
	021 Move X0, [X21]
	022 Move X20, [X20+16]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call DynamicHeap.Free, X0, X1
	035 Return 

Method: System.Void* Allocate(System.Int32 size)

Disassembly:
	0x01E82530 LDR X0, [X0 + 0xD78]
	0x01E82534 BL 0x1C16CF4
	0x01E82538 ADRP X0, 0x2272000
	0x01E8253C LDR X0, [X0 + 0x470]
	0x01E82540 BL 0x1C16CF4
	0x01E82544 MOVZ W8, 0x1
	0x01E82548 STRB W8, [X27 + 0x1E6]
	0x01E8254C LDR X8, [X20 + 0x68]
	0x01E82550 CBZ X8, 0x1E826B8
	0x01E82554 STR W31, [X8 + 0x1C]
	0x01E82558 LDR X8, [X20 + 0x68]
	0x01E8255C CBZ X8, 0x1E826B8
	0x01E82560 STP S14, S13, [X8 + 0x54]
	0x01E82564 STR S12, [X8 + 0x5C]
	0x01E82568 LDR X8, [X20 + 0x68]
	0x01E8256C CBZ X8, 0x1E826B8
	0x01E82570 STP S11, S10, [X8 + 0x48]
	0x01E82574 STR S9, [X8 + 0x50]
	0x01E82578 LDR X27, [X20 + 0x68]
	0x01E8257C CBZ X27, 0x1E826B8
	0x01E82580 ADRP X8, 0x2272000
	0x01E82584 LDR X8, [X8 + 0x470]
	0x01E82588 STR S8, [X27 + 0x60]
	0x01E8258C ADD X0, X31, 0x68
	0x01E82590 MOV W1, W26
	0x01E82594 LDR X2, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2558000
	007 Move X21, 0x227C000
	008 Move W8, [X22+483]
	009 Move X21, [X21+2976]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x227C000
	017 Move X0, [X0+2976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+483], W8
	021 Move X0, [X21]
	022 Move X20, [X20+16]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move W1, W19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call DynamicHeap.Allocate, X0, X1
	035 Return X0

Method: System.Void* AllocateArray(System.Int32 length)

Disassembly:
	0x021B13AC LDR X8, [X24]
	0x021B13B0 ADRP X10, 0x1F42000
	0x021B13B4 LDRH W9, [X8 + 0x12E]
	0x021B13B8 LDR X10, [X10 + 0xE18]
	0x021B13BC LDR X1, [X10]
	0x021B13C0 CBZ X9, 0x21B13E4
	0x021B13C4 LDR X10, [X8 + 0xB0]
	0x021B13C8 ADD X10, X10, 0x8
	0x021B13CC LDUR X11, [X10 - 0x8]
	0x021B13D0 CMP X11, X1
	0x021B13D4 B.EQ 0x21B13F4
	0x021B13D8 SUBS X9, X9, 0x1
	0x021B13DC ADD X10, X10, 0x10
	0x021B13E0 B.NE 0x21B13CC
	0x021B13E4 MOV X0, X24
	0x021B13E8 MOV W2, W31
	0x021B13EC BL 0x1C5C788
	0x021B13F0 B 0x21B1400
	0x021B13F4 LDRSW X9, [X10]
	0x021B13F8 ADD X8, X8, X9, 0x4, LSL
	0x021B13FC ADD X0, X8, 0x138
	0x021B1400 LDP X8, X1, [X0]
	0x021B1404 MOV X0, X24
	0x021B1408 BLR X8
	0x021B140C TBZ X0, 0x0, 0x21B1520
	0x021B1410 LDR X8, [X23 + 0x38]
	0x021B1414 LDR X1, [X8 + 0x20]
	0x021B1418 LDRB W8, [X1 + 0x135]
	0x021B141C TBNZ X8, 0x0, 0x21B142C
	0x021B1420 MOV X0, X1
	0x021B1424 BL 0x1C5C684
	0x021B1428 MOV X1, X0
	0x021B142C LDR X8, [X24]
	0x021B1430 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move W19, W1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {20}
	010 Move X0, 0x1F4D000
	011 Move X0, [X0+2976]
	012 Move X21, X2
	013 Call 0x1C17CF4
	014 Move X8, [X21+56]
	015 Compare X8, 0
	016 JumpIfNotEqual {20}
	017 Move X0, X21
	018 Call 0x1C5D6E0
	019 Move X8, [X21+56]
	020 Move X8, [X8]
	021 Move X0, X20
	022 Move W1, W19
	023 Move X2, X31
	024 Move W21, [X8+252]
	025 Call DynamicHeapInstance.VerifyArrayLength, X0, X1
	026 Move X8, 0x1F4D000
	027 Move X8, [X8+2976]
	028 Move X20, [X20+16]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Multiply W1, W21, W19
	035 Move X0, X20
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, X31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call DynamicHeap.Allocate, X0, X1
	042 Return X0

Method: System.Void* AllocateArrayPointers(System.Int32 length)

Disassembly:
	0x021B1434 CBZ X9, 0x21B1458
	0x021B1438 LDR X10, [X8 + 0xB0]
	0x021B143C ADD X10, X10, 0x8
	0x021B1440 LDUR X11, [X10 - 0x8]
	0x021B1444 CMP X11, X1
	0x021B1448 B.EQ 0x21B1468
	0x021B144C SUBS X9, X9, 0x1
	0x021B1450 ADD X10, X10, 0x10
	0x021B1454 B.NE 0x21B1440
	0x021B1458 MOV X0, X24
	0x021B145C MOV W2, W31
	0x021B1460 BL 0x1C5C788
	0x021B1464 B 0x21B1474
	0x021B1468 LDRSW X9, [X10]
	0x021B146C ADD X8, X8, X9, 0x4, LSL
	0x021B1470 ADD X0, X8, 0x138
	0x021B1474 STUR X27, [X29 - 0x20]
	0x021B1478 LDR X1, [X0 + 0x8]
	0x021B147C LDP X0, X8, [X1 + 0x8]
	0x021B1480 SUB X3, X29, 0x20
	0x021B1484 MOV X2, X24
	0x021B1488 MOV X4, X27
	0x021B148C BLR X8
	0x021B1490 MOV X0, X25
	0x021B1494 MOV X1, X27
	0x021B1498 MOV X2, X26
	0x021B149C BL 0x3EB1AC0
	0x021B14A0 MOV X0, X21
	0x021B14A4 MOV X1, X22
	0x021B14A8 MOV X2, X20
	0x021B14AC BL 0x3EB1AC0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2229000
	007 Move X21, 0x1F4D000
	008 Move W8, [X22+2094]
	009 Move X21, [X21+2976]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1F4D000
	017 Move X0, [X0+2976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2094], W8
	021 Move X0, X20
	022 Move W1, W19
	023 Move X2, X31
	024 Call DynamicHeapInstance.VerifyArrayLength, X0, X1
	025 Move X0, [X21]
	026 Move X20, [X20+16]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move W1, W19
	032 ShiftRight W1, 29
	033 And W1, W1, 0xFFFFFFF
	034 Move X0, X20
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X2, X31
	040 Move X30, [X31+48]
	041 Call DynamicHeap.Allocate, X0, X1
	042 Return X0

Method: System.Void* AllocateTracked(System.Boolean root = False)

Disassembly:
	0x021B14B0 MOV X0, X28
	0x021B14B4 MOV X1, X25
	0x021B14B8 MOV X2, X26
	0x021B14BC BL 0x3EB1AC0
	0x021B14C0 LDR X9, [X23 + 0x38]
	0x021B14C4 LDR X8, [X9 + 0x10]
	0x021B14C8 LDR W10, [X8 + 0x28]
	0x021B14CC MOV X8, X21
	0x021B14D0 TBNZ X10, 0x1F, 0x21B14D8
	0x021B14D4 LDR X8, [X21]
	0x021B14D8 LDP X10, X1, [X9 + 0x30]
	0x021B14DC MOV X9, X28
	0x021B14E0 LDR W10, [X10 + 0x28]
	0x021B14E4 LDR X0, [X1]
	0x021B14E8 TBNZ X10, 0x1F, 0x21B14F0
	0x021B14EC LDR X9, [X28]
	0x021B14F0 STP X8, X9, [X29 - 0x20]
	0x021B14F4 STUR X19, [X29 - 0x10]
	0x021B14F8 LDR X8, [X1 + 0x10]
	0x021B14FC LDUR X2, [X29 - 0x30]
	0x021B1500 SUB X3, X29, 0x20
	0x021B1504 MOV X4, X19
	0x021B1508 BLR X8
	0x021B150C MOV X0, X22
	0x021B1510 MOV X1, X19
	0x021B1514 MOV X2, X20
	0x021B1518 BL 0x3EB1AC0
	0x021B151C B 0x21B13AC
	0x021B1520 MOV X19, X31
	0x021B1524 MOVZ W23, 0xA

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move W19, W1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {19}
	011 Move X0, 0x1F4D000
	012 Move X0, [X0+2976]
	013 Call 0x1C17CF4
	014 Move X8, [X20+56]
	015 Compare X8, 0
	016 JumpIfNotEqual {19}
	017 Move X0, X20
	018 Call 0x1C5D6E0
	019 Move X8, 0x1F4D000
	020 Move X8, [X8+2976]
	021 Move X21, [X21+16]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X8, [X20+56]
	028 And W2, W19, 1
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move W1, 1
	032 Move X3, [X8]
	033 Move X0, X21
	034 Move X4, [X3]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X4

Method: System.Void* AllocateTrackedArray(System.Int32 length, System.Boolean root = False)

Disassembly:
	0x021B1528 CBZ X24, 0x21B158C
	0x021B152C ADRP X10, 0x1F42000
	0x021B1530 LDR X8, [X24]
	0x021B1534 LDR X10, [X10 + 0xE00]
	0x021B1538 LDRH W9, [X8 + 0x12E]
	0x021B153C LDR X1, [X10]
	0x021B1540 CBZ X9, 0x21B1564
	0x021B1544 LDR X10, [X8 + 0xB0]
	0x021B1548 ADD X10, X10, 0x8
	0x021B154C LDUR X11, [X10 - 0x8]
	0x021B1550 CMP X11, X1
	0x021B1554 B.EQ 0x21B1574
	0x021B1558 SUBS X9, X9, 0x1
	0x021B155C ADD X10, X10, 0x10
	0x021B1560 B.NE 0x21B154C
	0x021B1564 MOV X0, X24
	0x021B1568 MOV W2, W31
	0x021B156C BL 0x1C5C788
	0x021B1570 B 0x21B1580
	0x021B1574 LDRSW X9, [X10]
	0x021B1578 ADD X8, X8, X9, 0x4, LSL
	0x021B157C ADD X0, X8, 0x138
	0x021B1580 LDP X8, X1, [X0]
	0x021B1584 MOV X0, X24
	0x021B1588 BLR X8
	0x021B158C CBNZ X19, 0x21B161C
	0x021B1590 CMP W23, 0xA
	0x021B1594 B.EQ 0x21B159C
	0x021B1598 CBNZ W23, 0x21B15BC
	0x021B159C MOV X0, X21
	0x021B15A0 MOV X1, X22
	0x021B15A4 MOV X2, X20
	0x021B15A8 BL 0x3EB1AC0
	0x021B15AC LDUR X0, [X29 - 0x58]
	0x021B15B0 MOV X1, X21
	0x021B15B4 MOV X2, X20
	0x021B15B8 BL 0x3EB1AC0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X21, X3
	008 Move W20, W2
	009 Move W19, W1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {21}
	013 Move X0, 0x1F4D000
	014 Move X0, [X0+2976]
	015 Call 0x1C17CF4
	016 Move X8, [X21+56]
	017 Compare X8, 0
	018 JumpIfNotEqual {21}
	019 Move X0, X21
	020 Call 0x1C5D6E0
	021 Move X0, X22
	022 Move W1, W19
	023 Move X2, X31
	024 Call DynamicHeapInstance.VerifyArrayLength, X0, X1
	025 Move X8, 0x1F4D000
	026 Move X8, [X8+2976]
	027 Move X22, [X22+16]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X8, [X21+56]
	034 And W2, W20, 1
	035 Move X0, X22
	036 Move W1, W19
	037 Move X3, [X8]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X4, [X3]
	043 Move X30, [X31+48]
	044 CallNoReturn X4

Method: System.Void* AllocateTrackedArrayPointers(System.Int32 length, System.Boolean root = False)

Disassembly:
	0x021B15BC LDUR X8, [X29 - 0x50]
	0x021B15C0 LDR X8, [X8 + 0x28]
	0x021B15C4 LDUR X9, [X29 - 0x8]
	0x021B15C8 CMP X8, X9
	0x021B15CC B.NE 0x21B1624
	0x021B15D0 ADD X31, X29, 0x0
	0x021B15D4 LDP X20, X19, [X31 + 0x50]
	0x021B15D8 LDP X22, X21, [X31 + 0x40]
	0x021B15DC LDP X24, X23, [X31 + 0x30]
	0x021B15E0 LDP X26, X25, [X31 + 0x20]
	0x021B15E4 LDP X28, X27, [X31 + 0x10]
	0x021B15E8 LDP X29, X30, [X31], #0x60
	0x021B15EC RET
	0x021B15F0 ADRP X0, 0x1F4D000
	0x021B15F4 LDR X0, [X0 + 0x580]
	0x021B15F8 B 0x21B1604
	0x021B15FC ADRP X0, 0x1F6A000
	0x021B1600 LDR X0, [X0 + 0x9B8]
	0x021B1604 BL 0x1C16D08
	0x021B1608 MOV X1, X31
	0x021B160C BL 0x35DEB28
	0x021B1610 MOV X1, X23
	0x021B1614 BL 0x1C16DEC
	0x021B1618 BL 0x1C16F20
	0x021B161C MOV X0, X19
	0x021B1620 BL 0x1C16F18
	0x021B1624 BL 0x3EB1B20
	0x021B1628 B 0x21B1634
	0x021B162C B 0x21B1634
	0x021B1630 B 0x21B1634
	0x021B1634 MOV X23, X0
	0x021B1638 CMP W1, 0x1
	0x021B163C B.NE 0x21B165C
	0x021B1640 MOV X0, X23
	0x021B1644 BL 0x3EB1AD0
	0x021B1648 LDR X19, [X0]
	0x021B164C BL 0x3EB1AE0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X21, X3
	008 Move W20, W2
	009 Move W19, W1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {21}
	013 Move X0, 0x1F4D000
	014 Move X0, [X0+2976]
	015 Call 0x1C17CF4
	016 Move X8, [X21+56]
	017 Compare X8, 0
	018 JumpIfNotEqual {21}
	019 Move X0, X21
	020 Call 0x1C5D6E0
	021 Move X0, X22
	022 Move W1, W19
	023 Move X2, X31
	024 Call DynamicHeapInstance.VerifyArrayLength, X0, X1
	025 Move X8, 0x1F4D000
	026 Move X8, [X8+2976]
	027 Move X22, [X22+16]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X8, [X21+56]
	034 And W2, W20, 1
	035 Move X0, X22
	036 Move W1, W19
	037 Move X3, [X8]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X4, [X3]
	043 Move X30, [X31+48]
	044 CallNoReturn X4

Method: System.Void VerifyArrayLength(System.Int32 length)

Disassembly:
	0x01E82598 STR X31, [X31 + 0x68]
	0x01E8259C BL 0x24341FC
	0x01E825A0 LDR X8, [X31 + 0x68]
	0x01E825A4 STR X8, [X27 + 0x20]
	0x01E825A8 LDR X8, [X20 + 0x68]
	0x01E825AC CBZ X8, 0x1E826B8
	0x01E825B0 STR X25, [X8 + 0x38]
	0x01E825B4 LDR X8, [X20 + 0x68]
	0x01E825B8 CBZ X8, 0x1E826B8
	0x01E825BC STR X24, [X8 + 0x30]
	0x01E825C0 LDR X24, [X20 + 0x68]
	0x01E825C4 MOV W0, W23
	0x01E825C8 MOV X1, X31
	0x01E825CC BL 0x3C35CBC
	0x01E825D0 CBZ X24, 0x1E826B8
	0x01E825D4 STR W0, [X24 + 0x18]
	0x01E825D8 LDR X1, [X20 + 0x68]
	0x01E825DC CBZ X1, 0x1E826B8
	0x01E825E0 LDR X8, [X31 + 0x160]
	0x01E825E4 STP W21, W22, [X1 + 0x10]
	0x01E825E8 STR X8, [X1 + 0x40]
	0x01E825EC LDR X2, [X20 + 0x60]
	0x01E825F0 CBZ X2, 0x1E826B8
	0x01E825F4 LDP W8, W9, [X2 + 0x18]
	0x01E825F8 ADD W9, W9, 0x1
	0x01E825FC CMP W8, 0x1
	0x01E82600 STP W31, W9, [X2 + 0x18]
	0x01E82604 B.LT 0x1E82620
	0x01E82608 LDR X0, [X2 + 0x10]
	0x01E8260C MOV W1, W31
	0x01E82610 MOV W2, W8
	0x01E82614 MOV X3, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2558000
	007 Move X21, 0x227C000
	008 Move X20, 0x227C000
	009 Move W8, [X22+484]
	010 Move X21, [X21+3400]
	011 Move X20, [X20+3408]
	012 Move W19, W1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x227C000
	018 Move X0, [X0+3408]
	019 Call 0x1C17CF4
	020 Move X0, 0x227C000
	021 Move X0, [X0+3400]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+484], W8
	025 Move X1, [X21]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Move X2, X31
	029 Call Assert.Always, X0, X1
	030 Move X1, [X20]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X2, X31
	038 Move X30, [X31+48]
	039 Call Assert.Always, X0, X1
	040 Return 

