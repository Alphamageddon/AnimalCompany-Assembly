Type: Fusion.TimeSeries

Method: System.Int32 get_Count()

Disassembly:
	0x01E93018 CBNZ W8, 0x1E93020
	0x01E9301C BL 0x1C16DFC
	0x01E93020 MOV X0, X19
	0x01E93024 MOV W1, W20
	0x01E93028 LDP X20, X19, [X31 + 0x20]
	0x01E9302C LDP X22, X21, [X31 + 0x10]
	0x01E93030 MOVZ W2, 0x8
	0x01E93034 MOV X3, X31
	0x01E93038 LDR X30, [X31], #0x30
	0x01E9303C B 0x1EFA340
	0x01E93040 LDR W0, [X0]
	0x01E93044 RET
	0x01E93048 SUB X31, X31, 0x30
	0x01E9304C STP X30, X21, [X31 + 0x10]
	0x01E93050 STP X20, X19, [X31 + 0x20]
	0x01E93054 ADRP X20, 0x2546000
	0x01E93058 ADRP X21, 0x2263000
	0x01E9305C LDRB W8, [X20 + 0x294]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2547000
	005 Move W8, [X20+640]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x226C000
	012 Move X0, [X0+576]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+640], W8
	016 Move X8, [X19+32]
	017 Compare X8, 0
	018 JumpIfEqual {24}
	019 Move W0, [X8+28]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.Int32 get_Capacity()

Disassembly:
	0x01E93060 LDR X21, [X21 + 0x398]
	0x01E93064 MOV X19, X0
	0x01E93068 TBNZ X8, 0x0, 0x1E930D4
	0x01E9306C ADRP X0, 0x2263000
	0x01E93070 LDR X0, [X0 + 0x398]
	0x01E93074 BL 0x1C16CF4
	0x01E93078 ADRP X0, 0x2268000
	0x01E9307C LDR X0, [X0 + 0x720]
	0x01E93080 BL 0x1C16CF4
	0x01E93084 ADRP X0, 0x226B000
	0x01E93088 LDR X0, [X0 + 0x2C8]
	0x01E9308C BL 0x1C16CF4
	0x01E93090 ADRP X0, 0x226B000
	0x01E93094 LDR X0, [X0 + 0x2D0]
	0x01E93098 BL 0x1C16CF4
	0x01E9309C ADRP X0, 0x226B000
	0x01E930A0 LDR X0, [X0 + 0x2D8]
	0x01E930A4 BL 0x1C16CF4
	0x01E930A8 ADRP X0, 0x226B000
	0x01E930AC LDR X0, [X0 + 0x2E0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2547000
	005 Move W8, [X20+641]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x226C000
	012 Move X0, [X0+584]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+641], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x226C000
	020 Move X8, [X8+584]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call 0x25D0BE8, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Boolean get_IsEmpty()

Disassembly:
	0x01E930B0 BL 0x1C16CF4
	0x01E930B4 ADRP X0, 0x226B000
	0x01E930B8 LDR X0, [X0 + 0x2E8]
	0x01E930BC BL 0x1C16CF4
	0x01E930C0 ADRP X0, 0x226B000
	0x01E930C4 LDR X0, [X0 + 0x2F0]
	0x01E930C8 BL 0x1C16CF4
	0x01E930CC MOVZ W8, 0x1
	0x01E930D0 STRB W8, [X20 + 0x294]
	0x01E930D4 LDR X0, [X21]
	0x01E930D8 LDR W8, [X0 + 0xE0]
	0x01E930DC CBNZ W8, 0x1E930E4
	0x01E930E0 BL 0x1C16DFC
	0x01E930E4 LDR W8, [X19]
	0x01E930E8 CMP W8, 0x4
	0x01E930EC B.HI 0x1E93114
	0x01E930F0 ADRP X9, 0xFFFFFFFFFEC9A000
	0x01E930F4 ADD X9, X9, 0xC10
	0x01E930F8 ADR X10, 0x10
	0x01E930FC LDRB W11, [X9, X8, LSL]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2547000
	005 Move W8, [X20+642]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x226C000
	012 Move X0, [X0+592]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+642], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x226C000
	020 Move X8, [X8+592]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call 0x25D0C04, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Boolean get_IsFull()

Disassembly:
	0x01E93100 ADD X10, X10, X11, 0x2, LSL
	0x01E93104 BR X10
	0x01E93108 ADRP X8, 0x226B000
	0x01E9310C LDR X8, [X8 + 0x2F0]
	0x01E93110 B 0x1E93178
	0x01E93114 ADRP X9, 0x2268000
	0x01E93118 LDR X9, [X9 + 0x720]
	0x01E9311C ADD X1, X31, 0xC
	0x01E93120 STR W8, [X31 + 0xC]
	0x01E93124 LDR X0, [X9]
	0x01E93128 BL 0x1C16E04
	0x01E9312C ADRP X8, 0x226B000
	0x01E93130 LDR X8, [X8 + 0x2E0]
	0x01E93134 MOV X1, X0
	0x01E93138 MOV X2, X31
	0x01E9313C LDR X8, [X8]
	0x01E93140 MOV X0, X8
	0x01E93144 BL 0x321EFD0
	0x01E93148 B 0x1E9317C
	0x01E9314C ADRP X8, 0x226B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2547000
	005 Move W8, [X20+643]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x226C000
	012 Move X0, [X0+600]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+643], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x226C000
	020 Move X8, [X8+600]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call 0x25D0C14, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Double get_Latest()

Disassembly:
	0x01E93150 LDR X8, [X8 + 0x2D8]
	0x01E93154 B 0x1E93178
	0x01E93158 ADRP X8, 0x226B000
	0x01E9315C LDR X8, [X8 + 0x2D0]
	0x01E93160 B 0x1E93178
	0x01E93164 ADRP X8, 0x226B000
	0x01E93168 LDR X8, [X8 + 0x2C8]
	0x01E9316C B 0x1E93178
	0x01E93170 ADRP X8, 0x226B000
	0x01E93174 LDR X8, [X8 + 0x2E8]
	0x01E93178 LDR X0, [X8]
	0x01E9317C LDP X20, X19, [X31 + 0x20]
	0x01E93180 LDP X30, X21, [X31 + 0x10]
	0x01E93184 ADD X31, X31, 0x30
	0x01E93188 RET
	0x01E9318C SUB X31, X31, 0x30
	0x01E93190 STP X30, X21, [X31 + 0x10]
	0x01E93194 STP X20, X19, [X31 + 0x20]
	0x01E93198 ADRP X20, 0x2546000
	0x01E9319C ADRP X21, 0x2263000
	0x01E931A0 LDRB W8, [X20 + 0x295]
	0x01E931A4 LDR X21, [X21 + 0x398]
	0x01E931A8 MOV X19, X0
	0x01E931AC TBNZ X8, 0x0, 0x1E931E8
	0x01E931B0 ADRP X0, 0x2263000
	0x01E931B4 LDR X0, [X0 + 0x398]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2547000
	005 Move W8, [X20+644]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x226C000
	012 Move X0, [X0+608]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+644], W8
	016 Move X0, X19
	017 Call TimeSeries.get_IsEmpty, X0
	018 Move D0, X31
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, [X19+32]
	024 Compare X0, 0
	025 JumpIfEqual {35}
	026 Move X8, 0x226C000
	027 Move X8, [X8+608]
	028 Move X1, [X8]
	029 Call 0x25D12D4, X0
	030 Move V0, [X0]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return V0
	035 Call 0x1C17F20

Method: System.Double get_Avg()

Disassembly:
	0x01E931B8 BL 0x1C16CF4
	0x01E931BC ADRP X0, 0x2268000

ISIL:
	001 Move V0, [X0+16]
	002 Return V0

Method: System.Double get_Var()

Disassembly:
	0x01E931C0 LDR X0, [X0 + 0x720]
	0x01E931C4 BL 0x1C16CF4
	0x01E931C8 ADRP X0, 0x226B000
	0x01E931CC LDR X0, [X0 + 0x2F8]
	0x01E931D0 BL 0x1C16CF4
	0x01E931D4 ADRP X0, 0x226B000
	0x01E931D8 LDR X0, [X0 + 0x300]
	0x01E931DC BL 0x1C16CF4
	0x01E931E0 MOVZ W8, 0x1
	0x01E931E4 STRB W8, [X20 + 0x295]
	0x01E931E8 LDR X0, [X21]
	0x01E931EC LDR W8, [X0 + 0xE0]
	0x01E931F0 CBNZ W8, 0x1E931F8
	0x01E931F4 BL 0x1C16DFC
	0x01E931F8 LDR W8, [X19]
	0x01E931FC CBZ W8, 0x1E93238
	0x01E93200 ADRP X9, 0x2268000
	0x01E93204 LDR X9, [X9 + 0x720]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call TimeSeries.get_Count, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move D0, X31
	008 Move V8, [X19+24]
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move X0, X19
	011 Call TimeSeries.get_Count, X0
	012 Subtract W8, W0, 1
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 NotImplemented "Instruction FDIV not yet implemented."
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Move V8, [X31+32]
	018 Return V0

Method: System.Double get_Dev()

Disassembly:
	0x01E93208 ADRP X19, 0x226B000
	0x01E9320C ADD X1, X31, 0xC
	0x01E93210 LDR X0, [X9]
	0x01E93214 LDR X19, [X19 + 0x300]
	0x01E93218 STR W8, [X31 + 0xC]
	0x01E9321C BL 0x1C16E04
	0x01E93220 LDR X8, [X19]
	0x01E93224 MOV X1, X0
	0x01E93228 MOV X2, X31
	0x01E9322C MOV X0, X8
	0x01E93230 BL 0x321EFD0
	0x01E93234 B 0x1E93244
	0x01E93238 ADRP X8, 0x226B000
	0x01E9323C LDR X8, [X8 + 0x2F8]
	0x01E93240 LDR X0, [X8]
	0x01E93244 LDP X20, X19, [X31 + 0x20]
	0x01E93248 LDP X30, X21, [X31 + 0x10]
	0x01E9324C ADD X31, X31, 0x30
	0x01E93250 RET
	0x01E93254 STP X30, X21, [X31 - 0x20]!
	0x01E93258 STP X20, X19, [X31 + 0x10]
	0x01E9325C ADRP X19, 0x2546000
	0x01E93260 ADRP X21, 0x226B000
	0x01E93264 ADRP X20, 0x2263000
	0x01E93268 LDRB W8, [X19 + 0x296]
	0x01E9326C LDR X21, [X21 + 0x308]
	0x01E93270 LDR X20, [X20 + 0x398]
	0x01E93274 TBNZ X8, 0x0, 0x1E93298
	0x01E93278 ADRP X0, 0x226B000
	0x01E9327C LDR X0, [X0 + 0x308]
	0x01E93280 BL 0x1C16CF4
	0x01E93284 ADRP X0, 0x2263000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2547000
	006 Move W8, [X20+645]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2261000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+645], W8
	017 Move X0, X19
	018 Call TimeSeries.get_Var, X0
	019 Move X8, 1
	020 Move V8, V0
	021 Move D0, X8
	022 NotImplemented "Instruction FCMP not yet implemented."
	023 Move D0, X31
	024 Move X8, 0x2261000
	025 Move X8, [X8+1448]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 NotImplemented "Instruction FSQRT not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+8]
	035 Move V8, [X31+32]
	036 Return V0

Method: System.Double get_Min()

Disassembly:
	0x01E93288 LDR X0, [X0 + 0x398]
	0x01E9328C BL 0x1C16CF4
	0x01E93290 MOVZ W8, 0x1
	0x01E93294 STRB W8, [X19 + 0x296]
	0x01E93298 LDR X0, [X21]
	0x01E9329C BL 0x1C16F10
	0x01E932A0 MOV X1, X31
	0x01E932A4 MOV X19, X0
	0x01E932A8 BL 0x33BDD8C
	0x01E932AC LDR X8, [X20]
	0x01E932B0 LDR X8, [X8 + 0xB8]
	0x01E932B4 STR X19, [X8]
	0x01E932B8 LDP X20, X19, [X31 + 0x10]
	0x01E932BC LDP X30, X21, [X31], #0x20
	0x01E932C0 RET
	0x01E932C4 MOV X1, X31
	0x01E932C8 B 0x33BDD8C
	0x01E932CC CMP W1, W2
	0x01E932D0 CSET W0, EQ
	0x01E932D4 RET
	0x01E932D8 MOV X0, X1
	0x01E932DC RET
	0x01E932E0 LDR X8, [X0 + 0x20]
	0x01E932E4 CBZ X8, 0x1E932F0
	0x01E932E8 LDR W0, [X8]
	0x01E932EC RET
	0x01E932F0 MOV X0, X31
	0x01E932F4 RET
	0x01E932F8 LDR X0, [X0 + 0x30]
	0x01E932FC RET
	0x01E93300 LDR X8, [X0 + 0x38]
	0x01E93304 CBZ X8, 0x1E93318
	0x01E93308 LDR X8, [X8 + 0x58]
	0x01E9330C CBZ X8, 0x1E93318
	0x01E93310 LDR W0, [X8 + 0x28]
	0x01E93314 RET
	0x01E93318 MOV X0, X31
	0x01E9331C RET
	0x01E93320 LDR X8, [X0 + 0x58]
	0x01E93324 CMP X8, 0x0
	0x01E93328 CSET W0, NE
	0x01E9332C RET
	0x01E93330 LDR X0, [X0 + 0x58]
	0x01E93334 RET
	0x01E93338 STR X30, [X31 - 0x10]!
	0x01E9333C LDR X8, [X0]
	0x01E93340 CBZ X8, 0x1E93350
	0x01E93344 LDR W0, [X8 + 0x28]
	0x01E93348 LDR X30, [X31], #0x10
	0x01E9334C RET
	0x01E93350 BL 0x1C16F20
	0x01E93354 STR X30, [X31 - 0x20]!
	0x01E93358 STP X20, X19, [X31 + 0x10]
	0x01E9335C ADRP X20, 0x2546000
	0x01E93360 LDRB W8, [X20 + 0x297]

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2547000
	009 Move W8, [X20+646]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2261000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0x226C000
	019 Move X0, [X0+616]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+646], W8
	023 Move X0, X19
	024 Call TimeSeries.get_Count, X0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X21, 0x226C000
	027 Move X22, 0x2261000
	028 Move X21, [X21+616]
	029 Move X22, [X22+1448]
	030 Move W20, W31
	031 Move D8, X31
	032 Move X0, [X19+32]
	033 Compare X0, 0
	034 JumpIfEqual {63}
	035 Move X2, [X21]
	036 Move W1, W20
	037 Call 0x25D0C3C, X0, X1
	038 Move X0, [X22]
	039 Move V9, V0
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move V0, V8
	045 Move V1, V9
	046 Move X0, X31
	047 Call Math.Min, V0, V1
	048 Move X0, X19
	049 Move V8, V0
	050 Add W20, W20, 1
	051 Call TimeSeries.get_Count, X0
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move D8, X31
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X30, [X31+16]
	059 Move V0, V8
	060 Move D9, [X31+64]
	061 Move D8, [X31+72]
	062 Return V0
	063 Call 0x1C17F20

Method: System.Double get_Max()

Disassembly:
	0x01E93364 MOV X19, X0
	0x01E93368 TBNZ X8, 0x0, 0x1E933A4
	0x01E9336C ADRP X0, 0x2263000
	0x01E93370 LDR X0, [X0 + 0x398]
	0x01E93374 BL 0x1C16CF4
	0x01E93378 ADRP X0, 0x226B000
	0x01E9337C LDR X0, [X0 + 0x310]
	0x01E93380 BL 0x1C16CF4
	0x01E93384 ADRP X0, 0x2261000
	0x01E93388 LDR X0, [X0 + 0x608]
	0x01E9338C BL 0x1C16CF4
	0x01E93390 ADRP X0, 0x2260000
	0x01E93394 LDR X0, [X0 + 0x988]
	0x01E93398 BL 0x1C16CF4
	0x01E9339C MOVZ W8, 0x1
	0x01E933A0 STRB W8, [X20 + 0x297]
	0x01E933A4 ADRP X8, 0x2263000
	0x01E933A8 LDR X9, [X19 + 0x20]
	0x01E933AC LDR X8, [X8 + 0x398]
	0x01E933B0 CBZ X9, 0x1E933B8
	0x01E933B4 LDR W9, [X9]
	0x01E933B8 LDR X0, [X8]
	0x01E933BC STR W9, [X31 + 0x8]
	0x01E933C0 LDR W8, [X0 + 0xE0]
	0x01E933C4 CBNZ W8, 0x1E933CC
	0x01E933C8 BL 0x1C16DFC
	0x01E933CC ADD X0, X31, 0x8
	0x01E933D0 BL 0x1E93048
	0x01E933D4 LDRB W8, [X19 + 0x60]
	0x01E933D8 MOV X20, X0
	0x01E933DC TBNZ X8, 0x1, 0x1E9341C
	0x01E933E0 MOV X0, X19
	0x01E933E4 MOV X1, X31
	0x01E933E8 BL 0x3C389D4
	0x01E933EC ADRP X8, 0x226B000
	0x01E933F0 LDR X8, [X8 + 0x310]
	0x01E933F4 ADRP X9, 0x2261000
	0x01E933F8 LDR X9, [X9 + 0x608]
	0x01E933FC MOV X1, X0
	0x01E93400 LDR X8, [X8]
	0x01E93404 MOV X3, X31
	0x01E93408 LDR X2, [X9]
	0x01E9340C MOV X0, X8
	0x01E93410 BL 0x32274B8
	0x01E93414 MOV X1, X0
	0x01E93418 B 0x1E93428
	0x01E9341C ADRP X8, 0x2260000
	0x01E93420 LDR X8, [X8 + 0x988]
	0x01E93424 LDR X1, [X8]
	0x01E93428 MOV X0, X20
	0x01E9342C LDP X20, X19, [X31 + 0x10]
	0x01E93430 MOV X2, X31
	0x01E93434 LDR X30, [X31], #0x20
	0x01E93438 B 0x321B938
	0x01E9343C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2547000
	009 Move W8, [X20+647]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2261000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0x226C000
	019 Move X0, [X0+616]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+647], W8
	023 Move X0, X19
	024 Call TimeSeries.get_Count, X0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X21, 0x226C000
	027 Move X22, 0x2261000
	028 Move X21, [X21+616]
	029 Move X22, [X22+1448]
	030 Move W20, W31
	031 Move D8, X31
	032 Move X0, [X19+32]
	033 Compare X0, 0
	034 JumpIfEqual {63}
	035 Move X2, [X21]
	036 Move W1, W20
	037 Call 0x25D0C3C, X0, X1
	038 Move X0, [X22]
	039 Move V9, V0
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move V0, V8
	045 Move V1, V9
	046 Move X0, X31
	047 Call Math.Max, V0, V1
	048 Move X0, X19
	049 Move V8, V0
	050 Add W20, W20, 1
	051 Call TimeSeries.get_Count, X0
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move D8, X31
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X30, [X31+16]
	059 Move V0, V8
	060 Move D9, [X31+64]
	061 Move D8, [X31+72]
	062 Return V0
	063 Call 0x1C17F20

Method: System.Double Smoothed(System.Double alpha)

Disassembly:
	0x01E93440 STP X20, X19, [X31 + 0x10]
	0x01E93444 ADRP X21, 0x2545000
	0x01E93448 LDRB W8, [X21 + 0xA22]
	0x01E9344C LDR X20, [X0 + 0x30]
	0x01E93450 MOV X19, X0
	0x01E93454 CBNZ W8, 0x1E9346C
	0x01E93458 ADRP X0, 0x2260000
	0x01E9345C LDR X0, [X0 + 0x598]
	0x01E93460 BL 0x1C16CF4
	0x01E93464 MOVZ W8, 0x1
	0x01E93468 STRB W8, [X21 + 0xA22]
	0x01E9346C ADRP X8, 0x2260000
	0x01E93470 LDR X8, [X8 + 0x598]
	0x01E93474 LDR X0, [X8]
	0x01E93478 LDR W8, [X0 + 0xE0]
	0x01E9347C CBNZ W8, 0x1E93484
	0x01E93480 BL 0x1C16DFC
	0x01E93484 MOV X0, X20
	0x01E93488 MOV X1, X31
	0x01E9348C BL 0x3C38948
	0x01E93490 MOV W8, W0
	0x01E93494 MOV X0, X31
	0x01E93498 TBZ X8, 0x0, 0x1E934A8
	0x01E9349C LDR X8, [X19 + 0x30]
	0x01E934A0 CBZ X8, 0x1E934B4
	0x01E934A4 LDR X0, [X8 + 0x50]
	0x01E934A8 LDP X20, X19, [X31 + 0x10]
	0x01E934AC LDP X30, X21, [X31], #0x20
	0x01E934B0 RET
	0x01E934B4 BL 0x1C16F20
	0x01E934B8 STP X30, X21, [X31 - 0x20]!
	0x01E934BC STP X20, X19, [X31 + 0x10]
	0x01E934C0 ADRP X21, 0x2545000
	0x01E934C4 LDRB W8, [X21 + 0xA22]
	0x01E934C8 LDR X20, [X0 + 0x30]
	0x01E934CC MOV X19, X0
	0x01E934D0 CBNZ W8, 0x1E934E8
	0x01E934D4 ADRP X0, 0x2260000
	0x01E934D8 LDR X0, [X0 + 0x598]
	0x01E934DC BL 0x1C16CF4
	0x01E934E0 MOVZ W8, 0x1
	0x01E934E4 STRB W8, [X21 + 0xA22]
	0x01E934E8 ADRP X8, 0x2260000
	0x01E934EC LDR X8, [X8 + 0x598]
	0x01E934F0 LDR X0, [X8]
	0x01E934F4 LDR W8, [X0 + 0xE0]
	0x01E934F8 CBNZ W8, 0x1E93500
	0x01E934FC BL 0x1C16DFC
	0x01E93500 MOV X0, X20
	0x01E93504 MOV X1, X31
	0x01E93508 BL 0x3C38948
	0x01E9350C TBZ X0, 0x0, 0x1E9352C
	0x01E93510 LDR X0, [X19 + 0x30]
	0x01E93514 CBZ X0, 0x1E9353C
	0x01E93518 MOV X1, X19

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2547000
	009 Move W8, [X20+648]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x226C000
	017 Move X0, [X0+616]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+648], W8
	021 Move X0, X19
	022 Call TimeSeries.get_Count, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, [X19+32]
	025 Compare X0, 0
	026 JumpIfEqual {62}
	027 Move X21, 0x226C000
	028 Move X21, [X21+616]
	029 Move W1, W31
	030 Move X2, [X21]
	031 Call 0x25D0C3C, X0, X1
	032 Move X0, X19
	033 Move V9, V0
	034 Call TimeSeries.get_Count, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move D0, 1
	037 Subtract D10, D0, D8
	038 Move W20, 1
	039 Move X0, [X19+32]
	040 Compare X0, 0
	041 JumpIfEqual {62}
	042 Move X2, [X21]
	043 Move W1, W20
	044 Call 0x25D0C3C, X0, X1
	045 Multiply D1, D10, D9
	046 Multiply D0, D0, D8
	047 Move X0, X19
	048 Add D9, D1, D0
	049 Add W20, W20, 1
	050 Call TimeSeries.get_Count, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move D9, X31
	053 Move V0, V9
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Move D9, [X31+16]
	059 Move D8, [X31+24]
	060 Move V10, [X31+64]
	061 Return V0
	062 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x01E9351C LDP X20, X19, [X31 + 0x10]
	0x01E93520 MOV X2, X31
	0x01E93524 LDP X30, X21, [X31], #0x20
	0x01E93528 B 0x1EA1A20
	0x01E9352C LDP X20, X19, [X31 + 0x10]
	0x01E93530 MOV W0, W31
	0x01E93534 LDP X30, X21, [X31], #0x20
	0x01E93538 RET
	0x01E9353C BL 0x1C16F20
	0x01E93540 LDRB W8, [X0 + 0x62]
	0x01E93544 AND W0, W8, 0x1
	0x01E93548 RET
	0x01E9354C LDR X0, [X0 + 0x20]
	0x01E93550 RET
	0x01E93554 STR X30, [X31 - 0x10]!
	0x01E93558 LDR X8, [X0 + 0x20]
	0x01E9355C CBZ X8, 0x1E93584
	0x01E93560 LDR X9, [X0 + 0x78]
	0x01E93564 CBZ X9, 0x1E93584
	0x01E93568 LDRSH W10, [X8 + 0x4]
	0x01E9356C LDR W9, [X9 + 0x18]
	0x01E93570 SUB W9, W10, W9
	0x01E93574 UBFM X9, X9, 0x20, 0x1F
	0x01E93578 ADD X0, X8, X9, 0x1E, ASR
	0x01E9357C LDR X30, [X31], #0x10
	0x01E93580 RET
	0x01E93584 BL 0x1C16F20
	0x01E93588 STR X30, [X31 - 0x30]!
	0x01E9358C STP X22, X21, [X31 + 0x10]
	0x01E93590 STP X20, X19, [X31 + 0x20]
	0x01E93594 LDR X8, [X0 + 0x30]
	0x01E93598 CBZ X8, 0x1E93650
	0x01E9359C LDR X19, [X8 + 0x50]
	0x01E935A0 CBZ X19, 0x1E93664
	0x01E935A4 ADRP X21, 0x2546000
	0x01E935A8 LDRB W8, [X21 + 0x2EE]
	0x01E935AC MOV X20, X0
	0x01E935B0 CBNZ W8, 0x1E935C8
	0x01E935B4 ADRP X0, 0x2263000
	0x01E935B8 LDR X0, [X0 + 0xE40]
	0x01E935BC BL 0x1C16CF4
	0x01E935C0 MOVZ W8, 0x1
	0x01E935C4 STRB W8, [X21 + 0x2EE]
	0x01E935C8 LDR X8, [X20 + 0x20]
	0x01E935CC CBZ X8, 0x1E93650
	0x01E935D0 LDR X8, [X19]
	0x01E935D4 MOV X0, X19
	0x01E935D8 LDR X9, [X8 + 0x268]
	0x01E935DC LDR X1, [X8 + 0x270]
	0x01E935E0 BLR X9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2547000
	008 Move X22, 0x2261000
	009 Move W8, [X21+649]
	010 Move X22, [X22+1448]
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x2261000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move X0, 0x226C000
	021 Move X0, [X0+624]
	022 Call 0x1C17CF4
	023 Move X0, 0x226C000
	024 Move X0, [X0+632]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+649], W8
	028 Move X23, 0x226C000
	029 Move X21, 0x226C000
	030 Move X23, [X23+632]
	031 Move X21, [X21+624]
	032 Move X0, X19
	033 Move X1, X31
	034 Call Object..ctor, X0
	035 Move [X19+16], X31
	036 Move [X19+24], X31
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move W0, 2
	043 Move W1, W20
	044 Move X2, X31
	045 Call Math.Max, X0, X1
	046 Move X8, [X23]
	047 Move W20, W0
	048 Move X0, X8
	049 Call 0x1C17F10
	050 Move X2, [X21]
	051 Move W1, W20
	052 Move X21, X0
	053 Call 0x25D0A38, X0, X1
	054 Move [X19+32], X21
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

Method: System.Void Add(System.Double value)

Disassembly:
	0x01E935E4 ADRP X22, 0x2263000
	0x01E935E8 LDR X22, [X22 + 0xE40]
	0x01E935EC MOV X21, X0
	0x01E935F0 LDR X8, [X22]
	0x01E935F4 LDR W9, [X8 + 0xE0]
	0x01E935F8 CBNZ W9, 0x1E93604
	0x01E935FC MOV X0, X8
	0x01E93600 BL 0x1C16DFC
	0x01E93604 CMP W21, 0x1
	0x01E93608 B.LT 0x1E93650
	0x01E9360C LDR X8, [X20 + 0x20]
	0x01E93610 CBZ X8, 0x1E93664
	0x01E93614 LDR X9, [X19]
	0x01E93618 LDR W20, [X8 + 0x1C]
	0x01E9361C MOV X0, X19
	0x01E93620 LDR X8, [X9 + 0x268]
	0x01E93624 LDR X1, [X9 + 0x270]
	0x01E93628 BLR X8
	0x01E9362C LDR X8, [X22]
	0x01E93630 MOV X19, X0
	0x01E93634 LDR W9, [X8 + 0xE0]
	0x01E93638 CBNZ W9, 0x1E93644
	0x01E9363C MOV X0, X8
	0x01E93640 BL 0x1C16DFC
	0x01E93644 CMP W20, W19
	0x01E93648 CSET W0, EQ
	0x01E9364C B 0x1E93654
	0x01E93650 MOV W0, W31
	0x01E93654 LDP X20, X19, [X31 + 0x20]
	0x01E93658 LDP X22, X21, [X31 + 0x10]
	0x01E9365C LDR X30, [X31], #0x30
	0x01E93660 RET
	0x01E93664 BL 0x1C16F20
	0x01E93668 STR X30, [X31 - 0x20]!
	0x01E9366C STP X20, X19, [X31 + 0x10]
	0x01E93670 LDR X8, [X0 + 0x30]
	0x01E93674 CBZ X8, 0x1E936AC
	0x01E93678 LDR X19, [X8 + 0x50]
	0x01E9367C CBZ X19, 0x1E936F4
	0x01E93680 MOV X20, X0
	0x01E93684 MOV X0, X19
	0x01E93688 MOV X1, X31
	0x01E9368C BL 0x1EC0810
	0x01E93690 CMP W0, 0x1
	0x01E93694 B.NE 0x1E936BC
	0x01E93698 MOV X0, X19
	0x01E9369C LDP X20, X19, [X31 + 0x10]
	0x01E936A0 MOV X1, X31
	0x01E936A4 LDR X30, [X31], #0x20
	0x01E936A8 B 0x1EBDF30
	0x01E936AC LDP X20, X19, [X31 + 0x10]
	0x01E936B0 MOV W0, W31
	0x01E936B4 LDR X30, [X31], #0x20
	0x01E936B8 RET
	0x01E936BC LDR X8, [X19]
	0x01E936C0 MOV X0, X19
	0x01E936C4 LDR X9, [X8 + 0x268]
	0x01E936C8 LDR X1, [X8 + 0x270]
	0x01E936CC BLR X9
	0x01E936D0 LDR X8, [X20 + 0x20]
	0x01E936D4 CBZ X8, 0x1E936F4
	0x01E936D8 LDR W1, [X8 + 0x20]
	0x01E936DC AND X2, X0, 0x0
	0x01E936E0 MOV X0, X19
	0x01E936E4 LDP X20, X19, [X31 + 0x10]
	0x01E936E8 MOV X3, X31
	0x01E936EC LDR X30, [X31], #0x20
	0x01E936F0 B 0x1DBF8E4
	0x01E936F4 BL 0x1C16F20
	0x01E936F8 STR X30, [X31 - 0x30]!
	0x01E936FC STP X22, X21, [X31 + 0x10]
	0x01E93700 STP X20, X19, [X31 + 0x20]
	0x01E93704 MOV X19, X0
	0x01E93708 BL 0x1E9343C
	0x01E9370C CBZ X0, 0x1E937C8
	0x01E93710 MOV X0, X19

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x2547000
	010 Move W8, [X20+650]
	011 Move V8, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x226C000
	018 Move X0, [X0+640]
	019 Call 0x1C17CF4
	020 Move X0, 0x226C000
	021 Move X0, [X0+648]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+650], W8
	025 Move V10, [X19+16]
	026 Move X0, X19
	027 Call TimeSeries.get_IsFull, X0
	028 Move X8, [X19+32]
	029 Compare X8, 0
	030 JumpIfEqual {89}
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {61}
	035 Move X9, 0x226C000
	036 Move X9, [X9+640]
	037 Move X0, X8
	038 Move X1, [X9]
	039 Call 0x25D159C, X0
	040 Move X0, [X19+32]
	041 Compare X0, 0
	042 JumpIfEqual {89}
	043 Move X8, 0x226C000
	044 Move X8, [X8+648]
	045 Move V9, V0
	046 Move V0, V8
	047 Move X1, [X8]
	048 Call 0x25D141C, X0, X1
	049 Move V11, [X19+16]
	050 Move X0, X19
	051 Subtract D12, D8, D9
	052 Call TimeSeries.get_Capacity, X0
	053 NotImplemented "Instruction SCVTF not yet implemented."
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 Add D0, D11, D0
	056 Move [X19+16], D0
	057 Subtract D0, D8, D0
	058 Subtract D1, D9, D10
	059 Add D0, D1, D0
	060 Multiply D0, D12, D0
	061 Move X9, 0x226C000
	062 Move X9, [X9+648]
	063 Move X0, X8
	064 Move V0, V8
	065 Move X1, [X9]
	066 Call 0x25D141C, X0, X1
	067 Move V9, [X19+16]
	068 Move X0, X19
	069 Subtract D10, D8, D10
	070 Call TimeSeries.get_Count, X0
	071 NotImplemented "Instruction SCVTF not yet implemented."
	072 NotImplemented "Instruction FDIV not yet implemented."
	073 Add D0, D9, D0
	074 Move [X19+16], D0
	075 Subtract D0, D8, D0
	076 Multiply D0, D10, D0
	077 Move V1, [X19+24]
	078 Move X30, [X31+40]
	079 Move D9, [X31+24]
	080 Move D8, [X31+32]
	081 Move D11, [X31+8]
	082 Move D10, [X31+16]
	083 Add D0, D1, D0
	084 Move [X19+24], D0
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move V12, [X31+64]
	088 Return 
	089 Call 0x1C17F20

Method: System.Void Fill(System.Double value)

Disassembly:
	0x01E93714 BL 0x1E9343C
	0x01E93718 CBZ X0, 0x1E93848
	0x01E9371C ADRP X21, 0x2546000
	0x01E93720 LDRB W8, [X21 + 0x2EE]
	0x01E93724 MOV X20, X0
	0x01E93728 CBNZ W8, 0x1E93740
	0x01E9372C ADRP X0, 0x2263000
	0x01E93730 LDR X0, [X0 + 0xE40]
	0x01E93734 BL 0x1C16CF4
	0x01E93738 MOVZ W8, 0x1
	0x01E9373C STRB W8, [X21 + 0x2EE]
	0x01E93740 CBZ X19, 0x1E93848
	0x01E93744 LDR X8, [X19 + 0x20]
	0x01E93748 CBZ X8, 0x1E937D0
	0x01E9374C LDR X8, [X20]
	0x01E93750 MOV X0, X20
	0x01E93754 LDR X9, [X8 + 0x268]
	0x01E93758 LDR X1, [X8 + 0x270]
	0x01E9375C BLR X9
	0x01E93760 ADRP X22, 0x2263000
	0x01E93764 LDR X22, [X22 + 0xE40]
	0x01E93768 MOV X21, X0
	0x01E9376C LDR X8, [X22]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move V8, V0
	006 Move X19, X0
	007 Call TimeSeries.Clear, X0
	008 Move X0, X19
	009 Call TimeSeries.get_Capacity, X0
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W20, W31
	012 Move X0, X19
	013 Move V0, V8
	014 Call TimeSeries.Add, X0, V0
	015 Move X0, X19
	016 Add W20, W20, 1
	017 Call TimeSeries.get_Capacity, X0
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+8]
	022 Move V8, [X31+32]
	023 Return 

Method: System.Double QuantileNormal(System.Double p)

Disassembly:
	0x01E937C4 B.NE 0x1E937D0
	0x01E937C8 MOV W8, W31
	0x01E937CC B 0x1E93834
	0x01E937D0 MOV X0, X19
	0x01E937D4 BL 0x1E9343C
	0x01E937D8 CBZ X0, 0x1E93848
	0x01E937DC MOV X1, X31
	0x01E937E0 MOV X20, X0
	0x01E937E4 BL 0x1EC0810
	0x01E937E8 CMP W0, 0x1
	0x01E937EC B.NE 0x1E93800
	0x01E937F0 MOV X0, X20
	0x01E937F4 MOV X1, X31

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move V9, [X0+16]
	006 Move X19, X0
	007 Call TimeSeries.InverseCdfNormal, V0
	008 Move X0, X19
	009 Move V8, V0
	010 Call TimeSeries.get_Dev, X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Multiply D0, D8, D0
	014 Add D0, D9, D0
	015 Move D9, [X31+32]
	016 Move D8, [X31+40]
	017 Return V0

Method: System.Double InverseCdfNormal(System.Double p)

Disassembly:
	0x01E937F8 BL 0x1EBDF30
	0x01E937FC B 0x1E93830
	0x01E93800 LDR X8, [X20]
	0x01E93804 MOV X0, X20
	0x01E93808 LDR X9, [X8 + 0x268]
	0x01E9380C LDR X1, [X8 + 0x270]
	0x01E93810 BLR X9
	0x01E93814 LDR X8, [X19 + 0x20]
	0x01E93818 CBZ X8, 0x1E93848
	0x01E9381C LDR W1, [X8 + 0x20]
	0x01E93820 AND X2, X0, 0x0

ISIL:
	001 Move D1, 0.5
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move [X31-16], X30
	004 Call TimeSeries.<InverseCdfNormal>g__Polynomial|28_0, V0
	005 NotImplemented "Instruction FNEG not yet implemented."
	006 Move X30, [X31+16]
	007 Return V0
	008 Move D1, 1
	009 Subtract D0, D1, D0

Method: System.Void Clear()

Disassembly:
	0x01E93770 LDR W9, [X8 + 0xE0]
	0x01E93774 CBNZ W9, 0x1E93780
	0x01E93778 MOV X0, X8
	0x01E9377C BL 0x1C16DFC
	0x01E93780 CMP W21, 0x1
	0x01E93784 B.LT 0x1E937D0
	0x01E93788 LDR X8, [X19 + 0x20]
	0x01E9378C CBZ X8, 0x1E93848
	0x01E93790 LDR X9, [X20]
	0x01E93794 LDR W21, [X8 + 0x1C]
	0x01E93798 MOV X0, X20
	0x01E9379C LDR X8, [X9 + 0x268]
	0x01E937A0 LDR X1, [X9 + 0x270]
	0x01E937A4 BLR X8
	0x01E937A8 LDR X8, [X22]
	0x01E937AC MOV X20, X0
	0x01E937B0 LDR W9, [X8 + 0xE0]
	0x01E937B4 CBNZ W9, 0x1E937C0
	0x01E937B8 MOV X0, X8
	0x01E937BC BL 0x1C16DFC
	0x01E937C0 CMP W21, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2547000
	005 Move W8, [X20+651]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x226C000
	012 Move X0, [X0+656]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+651], W8
	016 Move X0, [X19+32]
	017 Move [X19+16], X31
	018 Move [X19+24], X31
	019 Compare X0, 0
	020 JumpIfEqual {29}
	021 Move X8, 0x226C000
	022 Move X8, [X8+656]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X1, [X8]
	026 Move X30, [X31+32]
	027 Call 0x25D1650, X0
	028 Return 
	029 Call 0x1C17F20

Method: System.Double <InverseCdfNormal>g__Polynomial|28_0(System.Double x)

Disassembly:
	0x01E93824 MOV X0, X20
	0x01E93828 MOV X3, X31
	0x01E9382C BL 0x1DBF8E4
	0x01E93830 EOR W8, W0, 0x1
	0x01E93834 LDP X20, X19, [X31 + 0x20]
	0x01E93838 LDP X22, X21, [X31 + 0x10]
	0x01E9383C AND W0, W8, 0x1
	0x01E93840 LDR X30, [X31], #0x30
	0x01E93844 RET
	0x01E93848 BL 0x1C16F20
	0x01E9384C STR X30, [X31 - 0x20]!
	0x01E93850 STP X20, X19, [X31 + 0x10]
	0x01E93854 LDRB W8, [X0 + 0x62]
	0x01E93858 TBNZ X8, 0x0, 0x1E9388C
	0x01E9385C MOV X20, X0
	0x01E93860 BL 0x1E9343C
	0x01E93864 CBZ X0, 0x1E938C8
	0x01E93868 MOV X1, X31
	0x01E9386C MOV X19, X0
	0x01E93870 BL 0x1EC0810
	0x01E93874 CMP W0, 0x1
	0x01E93878 B.NE 0x1E93894
	0x01E9387C MOV X0, X19
	0x01E93880 MOV X1, X31
	0x01E93884 BL 0x1EBDF30
	0x01E93888 TBZ X0, 0x0, 0x1E938C8
	0x01E9388C MOV W0, W31
	0x01E93890 B 0x1E938CC
	0x01E93894 LDR X8, [X19]
	0x01E93898 MOV X0, X19
	0x01E9389C LDR X9, [X8 + 0x268]
	0x01E938A0 LDR X1, [X8 + 0x270]
	0x01E938A4 BLR X9
	0x01E938A8 LDR X8, [X20 + 0x20]
	0x01E938AC CBZ X8, 0x1E938D8
	0x01E938B0 LDR W1, [X8 + 0x20]
	0x01E938B4 AND X2, X0, 0x0
	0x01E938B8 MOV X0, X19
	0x01E938BC MOV X3, X31
	0x01E938C0 BL 0x1DBF8E4
	0x01E938C4 TBNZ X0, 0x0, 0x1E9388C
	0x01E938C8 MOVZ W0, 0x1
	0x01E938CC LDP X20, X19, [X31 + 0x10]
	0x01E938D0 LDR X30, [X31], #0x20
	0x01E938D4 RET
	0x01E938D8 BL 0x1C16F20
	0x01E938DC LDR W0, [X0 + 0x80]
	0x01E938E0 RET

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x2547000
	006 Move X20, 0x2261000
	007 Move W8, [X19+652]
	008 Move X20, [X20+1448]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2261000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+652], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move V0, V8
	025 Call 0x3EB2C20
	026 Move X8, -20598784
	027 Move V2, [X8+1440]
	028 Move X8, -20598784
	029 Move D1, -2
	030 Move V3, [X8+3792]
	031 Move X8, -20598784
	032 Add X8, X8, 1928
	033 Multiply D0, D0, D1
	034 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	035 NotImplemented "Instruction FSQRT not yet implemented."
	036 Move X8, -20606976
	037 Multiply D2, D0, D2
	038 Add D2, D2, D3
	039 Move V3, [X8+124]
	040 Move X8, -20602880
	041 Move V1.D[1], V2.D[0]
	042 Move V2, [X8+124]
	043 NotImplemented "Instruction INVALID not yet implemented."
	044 Add V1, V1, V3
	045 NotImplemented "Instruction INVALID not yet implemented."
	046 Add V1, V1, V2
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+8]
	050 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	051 NotImplemented "Instruction INVALID not yet implemented."
	052 Subtract D0, D0, D1
	053 Move V8, [X31+32]
	054 Return V0

