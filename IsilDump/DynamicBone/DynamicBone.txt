Type: DynamicBone

Method: System.Void Start()

Disassembly:
	0x01E24948 BL 0x1C16CF4

ISIL:
No ISIL was generated
Method: System.Void FixedUpdate()

Disassembly:
	0x01E24C40 MOV X0, X22
	0x01E24C44 BL 0x1C16F18
	0x01E24C48 BL 0x1990590
	0x01E24C4C STP X30, X21, [X31 - 0x20]!
	0x01E24C50 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+52]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 

Method: System.Void Update()

Disassembly:
	0x01E24C94 CBZ X0, 0x1E24CD4
	0x01E24C98 ADRP X21, 0x22D6000
	0x01E24C9C LDR X21, [X21 + 0x8C8]
	0x01E24CA0 MOV W20, W31
	0x01E24CA4 LDR W8, [X0 + 0x18]
	0x01E24CA8 CMP W20, W8
	0x01E24CAC B.GE 0x1E24CD8
	0x01E24CB0 LDR X2, [X21]
	0x01E24CB4 MOV W1, W20
	0x01E24CB8 BL 0x301BCCC
	0x01E24CBC MOV X1, X0
	0x01E24CC0 MOV X0, X19
	0x01E24CC4 BL 0x1E258D4
	0x01E24CC8 LDR X0, [X19 + 0x120]
	0x01E24CCC ADD W20, W20, 0x1
	0x01E24CD0 CBNZ X0, 0x1E24CA4
	0x01E24CD4 BL 0x1C16F20
	0x01E24CD8 LDP X20, X19, [X31 + 0x10]
	0x01E24CDC LDP X30, X21, [X31], #0x20
	0x01E24CE0 RET
	0x01E24CE4 B 0x1E24C4C
	0x01E24CE8 STP X30, X21, [X31 - 0x20]!
	0x01E24CEC STP X20, X19, [X31 + 0x10]
	0x01E24CF0 ADRP X20, 0x25B4000
	0x01E24CF4 LDRB W8, [X20 + 0xE40]
	0x01E24CF8 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25B5000
	005 Move W8, [X20+3642]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22D7000
	012 Move X0, [X0+2280]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3642], W8
	016 Move W8, [X19+52]
	017 Move X20, 0x22D7000
	018 Move X20, [X20+2280]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, X19
	021 Call DynamicBone.PreUpdate, X0
	022 Move X8, [X20]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X8, [X8+184]
	026 Move W9, [X8]
	027 Add W9, W9, 1
	028 Move [X8], W9
	029 Move X30, [X31+32]
	030 Return 

Method: System.Void LateUpdate()

Disassembly:
	0x01E24CFC TBNZ X8, 0x0, 0x1E24D2C
	0x01E24D00 ADRP X0, 0x22CF000
	0x01E24D04 LDR X0, [X0 + 0x970]
	0x01E24D08 BL 0x1C16CF4
	0x01E24D0C ADRP X0, 0x22D6000
	0x01E24D10 LDR X0, [X0 + 0x8B0]
	0x01E24D14 BL 0x1C16CF4
	0x01E24D18 ADRP X0, 0x22D6000
	0x01E24D1C LDR X0, [X0 + 0x8C8]
	0x01E24D20 BL 0x1C16CF4
	0x01E24D24 MOVZ W8, 0x1
	0x01E24D28 STRB W8, [X20 + 0xE40]
	0x01E24D2C MOV X0, X19
	0x01E24D30 MOV X1, X31
	0x01E24D34 BL 0x3C323D4
	0x01E24D38 TBZ X0, 0x0, 0x1E24E00
	0x01E24D3C ADRP X20, 0x22CF000
	0x01E24D40 LDR X20, [X20 + 0x970]
	0x01E24D44 LDR X0, [X20]
	0x01E24D48 LDR W8, [X0 + 0xE0]
	0x01E24D4C CBNZ W8, 0x1E24D54
	0x01E24D50 BL 0x1C16DFC
	0x01E24D54 MOV X0, X31
	0x01E24D58 BL 0x3C03278
	0x01E24D5C TBZ X0, 0x0, 0x1E24DA0
	0x01E24D60 LDR X0, [X20]
	0x01E24D64 LDR W8, [X0 + 0xE0]
	0x01E24D68 CBNZ W8, 0x1E24D70
	0x01E24D6C BL 0x1C16DFC
	0x01E24D70 MOV X0, X31
	0x01E24D74 BL 0x3C018E4
	0x01E24D78 TBNZ X0, 0x0, 0x1E24DA0
	0x01E24D7C MOV X0, X19
	0x01E24D80 MOV X1, X31
	0x01E24D84 BL 0x3C32E90
	0x01E24D88 CBZ X0, 0x1E24DFC
	0x01E24D8C MOV X1, X31
	0x01E24D90 BL 0x3C40F8C
	0x01E24D94 TBZ X0, 0x0, 0x1E24DA0
	0x01E24D98 MOV X0, X19
	0x01E24D9C BL 0x1E2394C
	0x01E24DA0 FMOV S0, 1
	0x01E24DA4 FMOV S1, 1
	0x01E24DA8 FMOV S2, 1
	0x01E24DAC FMOV S3, 1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25B5000
	005 Move W8, [X20+3643]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22D7000
	012 Move X0, [X0+2280]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3643], W8
	016 Move W8, [X19+280]
	017 Compare W8, 0
	018 JumpIfEqual {49}
	019 Move X8, 0x22D7000
	020 Move X8, [X8+2280]
	021 Move X8, [X8]
	022 Move X8, [X8+184]
	023 Move W9, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W9, [X8+4]
	026 Add W9, W9, 1
	027 Move [X8], W31
	028 Move [X8+4], W9
	029 Move V0, [X19+192]
	030 Move X0, X19
	031 Call DynamicBone.SetWeight, X0, V0
	032 Move X0, X19
	033 Call DynamicBone.CheckDistance, X0
	034 Move V0, [X19+272]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move W8, [X19+220]
	037 Compare W8, 0
	038 JumpIfEqual {42}
	039 Move W8, [X19+276]
	040 Compare W8, 0
	041 JumpIfNotEqual {48}
	042 Move X0, X19
	043 Call DynamicBone.Prepare, X0
	044 Move X0, X19
	045 Call DynamicBone.UpdateParticles, X0
	046 Move X0, X19
	047 Call DynamicBone.ApplyParticlesToTransforms, X0
	048 Move [X19+280], W31
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 

Method: System.Void Prepare()

Disassembly:
	0x01E24FB8 STP X20, X19, [X31 + 0x20]
	0x01E24FBC ADRP X20, 0x25B4000
	0x01E24FC0 LDRB W8, [X20 + 0xE4E]
	0x01E24FC4 MOV V8.16B, V0.16B
	0x01E24FC8 MOV X19, X0
	0x01E24FCC TBNZ X8, 0x0, 0x1E24FF0
	0x01E24FD0 ADRP X0, 0x22D6000
	0x01E24FD4 LDR X0, [X0 + 0x8B0]
	0x01E24FD8 BL 0x1C16CF4
	0x01E24FDC ADRP X0, 0x22D6000
	0x01E24FE0 LDR X0, [X0 + 0x8C8]
	0x01E24FE4 BL 0x1C16CF4
	0x01E24FE8 MOVZ W8, 0x1
	0x01E24FEC STRB W8, [X20 + 0xE4E]
	0x01E24FF0 LDR X0, [X19 + 0x120]
	0x01E24FF4 CBZ X0, 0x1E25038
	0x01E24FF8 ADRP X21, 0x22D6000
	0x01E24FFC LDR X21, [X21 + 0x8C8]
	0x01E25000 MOV W20, W31
	0x01E25004 LDR W8, [X0 + 0x18]
	0x01E25008 CMP W20, W8
	0x01E2500C B.GE 0x1E2503C
	0x01E25010 LDR X2, [X21]
	0x01E25014 MOV W1, W20
	0x01E25018 BL 0x301BCCC
	0x01E2501C MOV X1, X0
	0x01E25020 MOV X0, X19
	0x01E25024 MOV V0.16B, V8.16B
	0x01E25028 BL 0x1E26160
	0x01E2502C LDR X0, [X19 + 0x120]
	0x01E25030 ADD W20, W20, 0x1
	0x01E25034 CBNZ X0, 0x1E25004
	0x01E25038 BL 0x1C16F20
	0x01E2503C LDP X20, X19, [X31 + 0x20]
	0x01E25040 LDP X30, X21, [X31 + 0x10]
	0x01E25044 LDR V8, [X31], #0x30
	0x01E25048 RET
	0x01E2504C STP X30, X21, [X31 - 0x20]!
	0x01E25050 STP X20, X19, [X31 + 0x10]
	0x01E25054 ADRP X20, 0x25B3000
	0x01E25058 LDRB W8, [X20 + 0xE50]
	0x01E2505C MOV X19, X0
	0x01E25060 TBNZ X8, 0x0, 0x1E25084
	0x01E25064 ADRP X0, 0x22D5000
	0x01E25068 LDR X0, [X0 + 0x8B0]
	0x01E2506C BL 0x1C16CF4
	0x01E25070 ADRP X0, 0x22D5000
	0x01E25074 LDR X0, [X0 + 0x8C8]
	0x01E25078 BL 0x1C16CF4
	0x01E2507C MOVZ W8, 0x1
	0x01E25080 STRB W8, [X20 + 0xE50]
	0x01E25084 LDR X0, [X19 + 0x120]
	0x01E25088 CBZ X0, 0x1E250C8
	0x01E2508C ADRP X21, 0x22D5000
	0x01E25090 LDR X21, [X21 + 0x8C8]
	0x01E25094 MOV W20, W31
	0x01E25098 LDR W8, [X0 + 0x18]
	0x01E2509C CMP W20, W8
	0x01E250A0 B.GE 0x1E250CC
	0x01E250A4 LDR X2, [X21]
	0x01E250A8 MOV W1, W20
	0x01E250AC BL 0x301BCCC
	0x01E250B0 MOV X1, X0
	0x01E250B4 MOV X0, X19
	0x01E250B8 BL 0x1E267DC
	0x01E250BC LDR X0, [X19 + 0x120]
	0x01E250C0 ADD W20, W20, 0x1
	0x01E250C4 CBNZ X0, 0x1E25098
	0x01E250C8 BL 0x1C16F20
	0x01E250CC LDP X20, X19, [X31 + 0x10]
	0x01E250D0 LDP X30, X21, [X31], #0x20
	0x01E250D4 RET
	0x01E250D8 SUB X31, X31, 0xB0
	0x01E250DC STR X30, [X31 + 0x80]
	0x01E250E0 STP X22, X21, [X31 + 0x90]
	0x01E250E4 STP X20, X19, [X31 + 0xA0]
	0x01E250E8 ADRP X21, 0x25B3000
	0x01E250EC ADRP X22, 0x22CE000
	0x01E250F0 LDRB W8, [X21 + 0xE44]
	0x01E250F4 LDR X22, [X22 + 0x598]
	0x01E250F8 MOV X20, X1
	0x01E250FC MOV X19, X0
	0x01E25100 TBNZ X8, 0x0, 0x1E25130
	0x01E25104 ADRP X0, 0x22D5000
	0x01E25108 LDR X0, [X0 + 0x970]
	0x01E2510C BL 0x1C16CF4
	0x01E25110 ADRP X0, 0x22CE000
	0x01E25114 LDR X0, [X0 + 0x598]
	0x01E25118 BL 0x1C16CF4
	0x01E2511C ADRP X0, 0x22D5000
	0x01E25120 LDR X0, [X0 + 0x978]
	0x01E25124 BL 0x1C16CF4
	0x01E25128 MOVZ W8, 0x1
	0x01E2512C STRB W8, [X21 + 0xE44]
	0x01E25130 LDR X0, [X22]
	0x01E25134 LDR W8, [X0 + 0xE0]
	0x01E25138 CBNZ W8, 0x1E25140
	0x01E2513C BL 0x1C16DFC
	0x01E25140 MOV X0, X20
	0x01E25144 MOV X1, X31
	0x01E25148 MOV X2, X31
	0x01E2514C BL 0x3C3883C
	0x01E25150 TBNZ X0, 0x0, 0x1E25208
	0x01E25154 ADRP X8, 0x22D5000
	0x01E25158 LDR X8, [X8 + 0x978]
	0x01E2515C LDR X0, [X8]
	0x01E25160 BL 0x1C16F10
	0x01E25164 MOV X21, X0
	0x01E25168 BL 0x1E25850
	0x01E2516C CBZ X21, 0x1E2521C
	0x01E25170 STR X20, [X21 + 0x10]
	0x01E25174 CBZ X20, 0x1E2521C
	0x01E25178 ADD X8, X31, 0x0
	0x01E2517C MOV X0, X20
	0x01E25180 MOV X1, X31
	0x01E25184 BL 0x3C3FF0C
	0x01E25188 LDP V1, V0, [X31 + 0x20]
	0x01E2518C LDP V3, V2, [X31]
	0x01E25190 STP V1, V0, [X31 + 0x60]
	0x01E25194 STP V3, V2, [X31 + 0x40]
	0x01E25198 STUR V0, [X21 + 0x54]
	0x01E2519C STUR V1, [X21 + 0x44]
	0x01E251A0 STUR V2, [X21 + 0x34]
	0x01E251A4 STUR V3, [X21 + 0x24]
	0x01E251A8 LDR X0, [X19 + 0x120]
	0x01E251AC CBZ X0, 0x1E2521C
	0x01E251B0 ADRP X9, 0x22D5000
	0x01E251B4 LDR X9, [X9 + 0x970]
	0x01E251B8 LDR W10, [X0 + 0x1C]
	0x01E251BC LDR X8, [X0 + 0x10]
	0x01E251C0 LDR X9, [X9]
	0x01E251C4 ADD W10, W10, 0x1
	0x01E251C8 STR W10, [X0 + 0x1C]
	0x01E251CC CBZ X8, 0x1E2521C
	0x01E251D0 LDRSW X10, [X0 + 0x18]
	0x01E251D4 LDR W11, [X8 + 0x18]
	0x01E251D8 CMP W10, W11
	0x01E251DC B.CS 0x1E251F4
	0x01E251E0 ADD W9, W10, 0x1
	0x01E251E4 ADD X8, X8, X10, 0x3, LSL
	0x01E251E8 STR W9, [X0 + 0x18]
	0x01E251EC STR X21, [X8 + 0x20]
	0x01E251F0 B 0x1E25208
	0x01E251F4 LDR X8, [X9 + 0x20]
	0x01E251F8 MOV X1, X21
	0x01E251FC LDR X8, [X8 + 0xC0]
	0x01E25200 LDR X2, [X8 + 0x70]
	0x01E25204 BL 0x301BF90
	0x01E25208 LDP X20, X19, [X31 + 0xA0]
	0x01E2520C LDP X22, X21, [X31 + 0x90]
	0x01E25210 LDR X30, [X31 + 0x80]
	0x01E25214 ADD X31, X31, 0xB0
	0x01E25218 RET
	0x01E2521C BL 0x1C16F20
	0x01E25220 MOV X1, X31
	0x01E25224 B 0x33BDD8C
	0x01E25228 STP D15, D14, [X31 - 0xA0]!
	0x01E2522C STP D13, D12, [X31 + 0x10]
	0x01E25230 STP D11, D10, [X31 + 0x20]
	0x01E25234 STP D9, D8, [X31 + 0x30]
	0x01E25238 STP X29, X30, [X31 + 0x40]
	0x01E2523C STP X28, X27, [X31 + 0x50]
	0x01E25240 STP X26, X25, [X31 + 0x60]
	0x01E25244 STP X24, X23, [X31 + 0x70]
	0x01E25248 STP X22, X21, [X31 + 0x80]
	0x01E2524C STP X20, X19, [X31 + 0x90]
	0x01E25250 ADRP X22, 0x22CE000
	0x01E25254 ADRP X24, 0x22D5000
	0x01E25258 ADRP X25, 0x22CE000
	0x01E2525C ADRP X8, 0xFFFFFFFFFECC4000
	0x01E25260 LDR X22, [X22 + 0x598]
	0x01E25264 LDR X24, [X24 + 0x960]
	0x01E25268 LDR X25, [X25 + 0x5A0]
	0x01E2526C LDR V12, [X8 + 0xF20]
	0x01E25270 MOV V8.16B, V0.16B
	0x01E25274 MOV W29, W3
	0x01E25278 MOV X28, X2
	0x01E2527C MOV X19, X1
	0x01E25280 MOV X20, X0
	0x01E25284 ADRP X26, 0x25B3000
	0x01E25288 ADRP X8, 0x25B3000
	0x01E2528C LDRB W8, [X8 + 0xE45]
	0x01E25290 TBNZ X8, 0x0, 0x1E252E0
	0x01E25294 ADRP X0, 0x22D5000
	0x01E25298 LDR X0, [X0 + 0x980]
	0x01E2529C BL 0x1C16CF4
	0x01E252A0 MOV X0, X24
	0x01E252A4 BL 0x1C16CF4
	0x01E252A8 ADRP X0, 0x22D5000
	0x01E252AC LDR X0, [X0 + 0x908]
	0x01E252B0 BL 0x1C16CF4
	0x01E252B4 ADRP X0, 0x22D5000
	0x01E252B8 LDR X0, [X0 + 0x920]
	0x01E252BC BL 0x1C16CF4
	0x01E252C0 MOV X0, X22
	0x01E252C4 BL 0x1C16CF4
	0x01E252C8 ADRP X0, 0x22D5000
	0x01E252CC LDR X0, [X0 + 0x988]
	0x01E252D0 BL 0x1C16CF4
	0x01E252D4 ADRP X8, 0x25B3000
	0x01E252D8 MOVZ W9, 0x1
	0x01E252DC STRB W9, [X8 + 0xE45]
	0x01E252E0 ADRP X8, 0x22D5000
	0x01E252E4 LDR X8, [X8 + 0x988]
	0x01E252E8 LDR X0, [X8]
	0x01E252EC BL 0x1C16F10
	0x01E252F0 MOV X1, X31
	0x01E252F4 MOV X27, X0
	0x01E252F8 BL 0x33BDD8C
	0x01E252FC CBZ X27, 0x1E2584C
	0x01E25300 STR X28, [X27 + 0x10]
	0x01E25304 LDR X0, [X22]
	0x01E25308 LDR W8, [X0 + 0xE0]
	0x01E2530C CBNZ W8, 0x1E25314
	0x01E25310 BL 0x1C16DFC
	0x01E25314 MOV X0, X28
	0x01E25318 MOV X1, X31
	0x01E2531C MOV X2, X31
	0x01E25320 BL 0x3C354F8
	0x01E25324 AND W8, W0, 0x1
	0x01E25328 MOV X0, X28
	0x01E2532C MOV X1, X31
	0x01E25330 MOV X2, X31
	0x01E25334 STRB W8, [X27 + 0x3D]
	0x01E25338 STR W29, [X27 + 0x18]
	0x01E2533C BL 0x3C354F8
	0x01E25340 TBZ X0, 0x0, 0x1E25394
	0x01E25344 CBZ X28, 0x1E2584C
	0x01E25348 MOV X0, X28
	0x01E2534C MOV X1, X31
	0x01E25350 BL 0x3C3F58C
	0x01E25354 MOV X0, X28
	0x01E25358 MOV X1, X31
	0x01E2535C STP S1, S2, [X27 + 0x50]
	0x01E25360 STP S0, S1, [X27 + 0x40]
	0x01E25364 STP S2, S0, [X27 + 0x48]
	0x01E25368 BL 0x3C3EB78
	0x01E2536C MOV X0, X28
	0x01E25370 MOV X1, X31
	0x01E25374 STP S0, S1, [X27 + 0x64]
	0x01E25378 STR S2, [X27 + 0x6C]
	0x01E2537C BL 0x3C3F830
	0x01E25380 STP S0, S1, [X27 + 0x70]
	0x01E25384 STP S2, S3, [X27 + 0x78]
	0x01E25388 TBNZ X29, 0x1F, 0x1E254B4
	0x01E2538C CBNZ X19, 0x1E2555C
	0x01E25390 B 0x1E2584C
	0x01E25394 CBZ X19, 0x1E2584C
	0x01E25398 LDR X0, [X19 + 0x68]
	0x01E2539C CBZ X0, 0x1E2584C
	0x01E253A0 ADRP X8, 0x22D5000
	0x01E253A4 LDR X8, [X8 + 0x920]
	0x01E253A8 MOV W1, W29
	0x01E253AC LDR X2, [X8]
	0x01E253B0 BL 0x301BCCC
	0x01E253B4 CBZ X0, 0x1E2584C
	0x01E253B8 LDR V0, [X20 + 0x98]
	0x01E253BC LDR X21, [X0 + 0x10]
	0x01E253C0 FCMP S0, 0x0
	0x01E253C4 B.LE 0x1E25458
	0x01E253C8 CBZ X21, 0x1E2584C
	0x01E253CC MOV X0, X21
	0x01E253D0 MOV X1, X31
	0x01E253D4 BL 0x3C3F49C
	0x01E253D8 LDR X8, [X22]
	0x01E253DC MOV X23, X0
	0x01E253E0 LDR W9, [X8 + 0xE0]
	0x01E253E4 CBNZ W9, 0x1E253F0
	0x01E253E8 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], X29
	003 Move [X31+136], X30
	004 Move [X31+144], X28
	005 Move [X31+152], X27
	006 Move [X31+160], X26
	007 Move [X31+168], X25
	008 Move [X31+176], X24
	009 Move [X31+184], X23
	010 Move [X31+192], X22
	011 Move [X31+200], X21
	012 Move [X31+208], X20
	013 Move [X31+216], X19
	014 Move X20, 0x25B5000
	015 Move W8, [X20+3644]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {59}
	021 Move X0, 0x22D7000
	022 Move X0, [X0+2280]
	023 Call 0x1C17CF4
	024 Move X0, 0x22D7000
	025 Move X0, [X0+2288]
	026 Call 0x1C17CF4
	027 Move X0, 0x22D7000
	028 Move X0, [X0+2296]
	029 Call 0x1C17CF4
	030 Move X0, 0x22D6000
	031 Move X0, [X0+2304]
	032 Call 0x1C17CF4
	033 Move X0, 0x22D6000
	034 Move X0, [X0+2312]
	035 Call 0x1C17CF4
	036 Move X0, 0x22D6000
	037 Move X0, [X0+2224]
	038 Call 0x1C17CF4
	039 Move X0, 0x22D6000
	040 Move X0, [X0+2320]
	041 Call 0x1C17CF4
	042 Move X0, 0x22D6000
	043 Move X0, [X0+2328]
	044 Call 0x1C17CF4
	045 Move X0, 0x22D6000
	046 Move X0, [X0+2336]
	047 Call 0x1C17CF4
	048 Move X0, 0x22D6000
	049 Move X0, [X0+2248]
	050 Call 0x1C17CF4
	051 Move X0, 0x22D6000
	052 Move X0, [X0+2344]
	053 Call 0x1C17CF4
	054 Move X0, 0x22CF000
	055 Move X0, [X0+1432]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X20+3644], W8
	059 Move X0, X31
	060 Call Time.get_deltaTime
	061 Move W8, [X19+52]
	062 Move [X19+296], S0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X31
	066 Call Time.get_unscaledDeltaTime
	067 Move X0, X31
	068 Call Time.get_fixedDeltaTime
	069 Move V1, [X19+280]
	070 NotImplemented "Instruction SCVTF not yet implemented."
	071 Multiply S0, S0, S1
	072 Move [X19+296], S0
	073 Move X0, X19
	074 Move X1, X31
	075 Call Component.get_transform, X0
	076 Compare X0, 0
	077 JumpIfEqual {299}
	078 Move X1, X31
	079 Call Transform.get_lossyScale, X0
	080 NotImplemented "Instruction FABS not yet implemented."
	081 Move X0, X19
	082 Move X1, X31
	083 Move [X19+264], S0
	084 Call Component.get_transform, X0
	085 Compare X0, 0
	086 JumpIfEqual {299}
	087 Move X1, X31
	088 Call Transform.get_position, X0
	089 Move X8, X19
	090 Add X8, X8, 252
	091 Move V3, [X8]
	092 Move X0, X19
	093 Move V0.S[1], V1.S[0]
	094 Move X1, X31
	095 Move V4, [X8+8]
	096 Subtract V0, V0, V3
	097 Move [X19+240], D0
	098 Subtract S1, S2, S4
	099 Move [X19+248], S1
	100 Call Component.get_transform, X0
	101 Compare X0, 0
	102 JumpIfEqual {299}
	103 Move X1, X31
	104 Call Transform.get_position, X0
	105 Move X0, [X19+288]
	106 Move [X19+252], S0
	107 Move [X19+260], S1
	108 Move [X19+260], S2
	109 Compare X0, 0
	110 JumpIfEqual {299}
	111 Move X26, 0x22D6000
	112 Move X27, 0x22D6000
	113 Move X24, 0x22D6000
	114 Move X25, 0x22CF000
	115 Move X28, 0x22D6000
	116 Move X29, 0x22D6000
	117 Move X26, [X26+2248]
	118 Move X27, [X27+2336]
	119 Move X24, [X24+2328]
	120 Move X25, [X25+1432]
	121 Move X28, [X28+2288]
	122 Move X29, [X29+2280]
	123 Move W20, W31
	124 Move W8, [X0+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X2, [X26]
	127 Move W1, W20
	128 Call List`1<Object>.get_Item, X0, X1
	129 Compare X0, 0
	130 JumpIfEqual {299}
	131 Move X21, X0
	132 Move X0, [X0+16]
	133 Compare X0, 0
	134 JumpIfEqual {299}
	135 Move S1, [X21+28]
	136 Move S2, [X21+32]
	137 Move V0, [X21+24]
	138 Move X1, X31
	139 Call Transform.TransformDirection, X0, X1
	140 Move X0, [X21+104]
	141 Move [X21+112], S0
	142 Move [X21+120], S1
	143 Move [X21+120], S2
	144 Compare X0, 0
	145 JumpIfEqual {299}
	146 Move W22, W31
	147 Move W8, [X0+24]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move X2, [X27]
	150 Move W1, W22
	151 Call List`1<Object>.get_Item, X0, X1
	152 Compare X0, 0
	153 JumpIfEqual {299}
	154 Move W8, [X0+61]
	155 Move X23, X0
	156 Compare W8, 0
	157 JumpIfEqual {192}
	158 Move X0, [X23+16]
	159 Compare X0, 0
	160 JumpIfEqual {299}
	161 Move X1, X31
	162 Call Transform.get_position, X0
	163 Move X0, [X23+16]
	164 Move [X23+128], S0
	165 Move [X23+136], S1
	166 Move [X23+136], S2
	167 Compare X0, 0
	168 JumpIfEqual {299}
	169 Move X1, X31
	170 Call Transform.get_localPosition, X0
	171 Move X0, [X23+16]
	172 Move [X23+140], S0
	173 Move [X23+148], S1
	174 Move [X23+148], S2
	175 Compare X0, 0
	176 JumpIfEqual {299}
	177 Add X8, X31, 0
	178 Move X1, X31
	179 Call Transform.get_localToWorldMatrix, X0
	180 Move V1, [X31+32]
	181 Move V0, [X31+48]
	182 Move V3, [X31]
	183 Move V2, [X31+16]
	184 Move [X31+96], V1
	185 Move [X31+104], V0
	186 Move [X31+64], V3
	187 Move [X31+72], V2
	188 Move [X23+200], V0
	189 Move [X23+184], V1
	190 Move [X23+168], V2
	191 Move [X23+152], V3
	192 Move X0, [X21+104]
	193 Add W22, W22, 1
	194 Compare X0, 0
	195 JumpIfNotEqual {147}
	196 Move X0, [X19+288]
	197 Add W20, W20, 1
	198 Compare X0, 0
	199 JumpIfNotEqual {124}
	200 Move X8, [X19+304]
	201 Compare X8, 0
	202 JumpIfEqual {213}
	203 Move W2, [X8+24]
	204 Move W9, [X8+28]
	205 Add W9, W9, 1
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move [X8+24], W31
	208 Move [X8+28], W9
	209 Move X0, [X8+16]
	210 Move W1, W31
	211 Move X3, X31
	212 Call Array.Clear, X0, X1, X2
	213 Move X23, 0x22D6000
	214 Move X26, 0x22D6000
	215 Move X0, [X19+200]
	216 Move X23, [X23+2344]
	217 Move X26, [X26+2304]
	218 Compare X0, 0
	219 JumpIfEqual {300}
	220 Move W20, W31
	221 Move W8, [X0+24]
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move X2, [X24]
	224 Move W1, W20
	225 Call List`1<Object>.get_Item, X0, X1
	226 Move X8, [X25]
	227 Move X21, X0
	228 Move W9, [X8+224]
	229 Compare W9, 0
	230 JumpIfNotEqual {233}
	231 Move X0, X8
	232 Call 0x1C17DFC
	233 Move X0, X21
	234 Move X1, X31
	235 Move X2, X31
	236 Call Object.op_Inequality, X0, X1
	237 Move TEMP, X0
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfNotEqual {295}
	241 Compare X21, 0
	242 JumpIfEqual {299}
	243 Move X0, X21
	244 Move X1, X31
	245 Call Behaviour.get_enabled, X0
	246 Move TEMP, X0
	247 And TEMP, TEMP, 1
	248 Compare TEMP, 1
	249 JumpIfNotEqual {295}
	250 Move X22, [X19+304]
	251 Compare X22, 0
	252 JumpIfNotEqual {261}
	253 Move X0, [X23]
	254 Call 0x1C17F10
	255 Move X1, [X26]
	256 Move X22, X0
	257 Call List`1<Object>..ctor, X0
	258 Move [X19+304], X22
	259 Compare X22, 0
	260 JumpIfEqual {299}
	261 Move W10, [X22+28]
	262 Move X8, [X22+16]
	263 Move X9, [X28]
	264 Add W10, W10, 1
	265 Move [X22+28], W10
	266 Compare X8, 0
	267 JumpIfEqual {299}
	268 NotImplemented "Instruction LDRSW not yet implemented."
	269 Move W11, [X8+24]
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Add W9, W10, 1
	272 Add X8, X8, X10
	273 Move [X22+24], W9
	274 Move [X8+32], X21
	275 Move X8, [X9+32]
	276 Move X0, X22
	277 Move X1, X21
	278 Move X8, [X8+192]
	279 Move X2, [X8+112]
	280 Call List`1<Object>.AddWithResize, X0, X1
	281 Move X8, [X29]
	282 Move W9, [X21+52]
	283 Move X8, [X8+184]
	284 Move W8, [X8+4]
	285 NotImplemented "Instruction CMP not yet implemented."
	286 Move X8, [X21]
	287 Move X0, X21
	288 Move X9, [X8+392]
	289 Move X1, [X8+400]
	290 NotImplemented "Instruction BLR not yet implemented."
	291 Move X8, [X29]
	292 Move X8, [X8+184]
	293 Move W8, [X8+4]
	294 Move [X21+52], W8
	295 Move X0, [X19+200]
	296 Add W20, W20, 1
	297 Compare X0, 0
	298 JumpIfNotEqual {221}
	299 Call 0x1C17F20
	300 Move X20, [X31+208]
	301 Move X19, [X31+216]
	302 Move X22, [X31+192]
	303 Move X21, [X31+200]
	304 Move X24, [X31+176]
	305 Move X23, [X31+184]
	306 Move X26, [X31+160]
	307 Move X25, [X31+168]
	308 Move X28, [X31+144]
	309 Move X27, [X31+152]
	310 Move X29, [X31+128]
	311 Move X30, [X31+136]
	312 Add X31, X31, 224
	313 Return 

Method: System.Boolean IsNeedUpdate()

Disassembly:
	0x01E24F84 MOV W2, W19
	0x01E24F88 BL 0x1E25E88
	0x01E24F8C LDR X0, [X20 + 0x120]
	0x01E24F90 ADD W21, W21, 0x1
	0x01E24F94 CBNZ X0, 0x1E24F60
	0x01E24F98 BL 0x1C16F20
	0x01E24F9C LDP X20, X19, [X31 + 0x20]
	0x01E24FA0 LDP X22, X21, [X31 + 0x10]
	0x01E24FA4 LDR X30, [X31 + 0x8]
	0x01E24FA8 LDR V8, [X31], #0x30
	0x01E24FAC RET
	0x01E24FB0 STR D8, [X31 - 0x30]!
	0x01E24FB4 STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move V0, [X0+272]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move W8, [X0+220]
	004 Compare W8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X0+276]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Return X0
	010 Move W0, W31
	011 Return X0
	012 Move W0, 1
	013 Return X0

Method: System.Void PreUpdate()

Disassembly:
	0x01E24C54 ADRP X20, 0x25B4000
	0x01E24C58 LDRB W8, [X20 + 0xE46]
	0x01E24C5C MOV X19, X0
	0x01E24C60 TBNZ X8, 0x0, 0x1E24C84
	0x01E24C64 ADRP X0, 0x22D6000
	0x01E24C68 LDR X0, [X0 + 0x8B0]
	0x01E24C6C BL 0x1C16CF4
	0x01E24C70 ADRP X0, 0x22D6000
	0x01E24C74 LDR X0, [X0 + 0x8C8]
	0x01E24C78 BL 0x1C16CF4
	0x01E24C7C MOVZ W8, 0x1
	0x01E24C80 STRB W8, [X20 + 0xE46]
	0x01E24C84 LDR V0, [X19 + 0xC0]
	0x01E24C88 MOV X0, X19
	0x01E24C8C BL 0x1E23DB0
	0x01E24C90 LDR X0, [X19 + 0x120]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V0, [X0+272]
	004 Move X19, X0
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move W8, [X19+220]
	007 Compare W8, 0
	008 JumpIfEqual {12}
	009 Move W8, [X19+276]
	010 Compare W8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X19
	013 Call DynamicBone.InitTransforms, X0
	014 Move W8, [X19+280]
	015 Add W8, W8, 1
	016 Move [X19+280], W8
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 

Method: System.Void CheckDistance()

Disassembly:
	0x01E24E04 LDP X30, X21, [X31], #0x20
	0x01E24E08 RET
	0x01E24E0C STP X30, X23, [X31 - 0x30]!
	0x01E24E10 STP X22, X21, [X31 + 0x10]
	0x01E24E14 STP X20, X19, [X31 + 0x20]
	0x01E24E18 ADRP X21, 0x25B4000
	0x01E24E1C LDRB W8, [X21 + 0xE41]
	0x01E24E20 MOV X19, X1
	0x01E24E24 MOV X20, X0
	0x01E24E28 TBNZ X8, 0x0, 0x1E24E4C
	0x01E24E2C ADRP X0, 0x22D6000
	0x01E24E30 LDR X0, [X0 + 0x908]
	0x01E24E34 BL 0x1C16CF4
	0x01E24E38 ADRP X0, 0x22D6000
	0x01E24E3C LDR X0, [X0 + 0x920]
	0x01E24E40 BL 0x1C16CF4
	0x01E24E44 MOVZ W8, 0x1
	0x01E24E48 STRB W8, [X21 + 0xE41]
	0x01E24E4C CBZ X19, 0x1E24EE8
	0x01E24E50 LDR X0, [X19 + 0x68]
	0x01E24E54 CBZ X0, 0x1E24EE8
	0x01E24E58 ADRP X23, 0x22D6000
	0x01E24E5C LDR X23, [X23 + 0x920]
	0x01E24E60 MOV W21, W31
	0x01E24E64 LDR W8, [X0 + 0x18]
	0x01E24E68 CMP W21, W8
	0x01E24E6C B.GE 0x1E24EEC
	0x01E24E70 LDR X2, [X23]
	0x01E24E74 MOV W1, W21
	0x01E24E78 BL 0x301BCCC
	0x01E24E7C CBZ X0, 0x1E24EE8
	0x01E24E80 LDR W1, [X0 + 0x18]
	0x01E24E84 MOV X22, X0
	0x01E24E88 TBNZ X1, 0x1F, 0x1E24EB8
	0x01E24E8C LDR X0, [X19 + 0x68]
	0x01E24E90 CBZ X0, 0x1E24EE8
	0x01E24E94 LDR X2, [X23]
	0x01E24E98 BL 0x301BCCC
	0x01E24E9C CBZ X0, 0x1E24EE8
	0x01E24EA0 LDP S1, S2, [X22 + 0x44]
	0x01E24EA4 LDR V0, [X22 + 0x40]
	0x01E24EA8 LDP S3, S4, [X0 + 0x40]
	0x01E24EAC LDR V5, [X0 + 0x48]
	0x01E24EB0 MOV X0, X31
	0x01E24EB4 BL 0x3C0CB04
	0x01E24EB8 LDR V3, [X22 + 0x34]
	0x01E24EBC FCMP S3, 0x0
	0x01E24EC0 B.LE 0x1E24EDC
	0x01E24EC4 LDR V4, [X20 + 0x108]
	0x01E24EC8 LDP S0, S1, [X22 + 0x40]
	0x01E24ECC LDR V2, [X22 + 0x48]
	0x01E24ED0 MOV X0, X31
	0x01E24ED4 FMUL S3, S3, S4
	0x01E24ED8 BL 0x3C0CB98
	0x01E24EDC LDR X0, [X19 + 0x68]
	0x01E24EE0 ADD W21, W21, 0x1
	0x01E24EE4 CBNZ X0, 0x1E24E64
	0x01E24EE8 BL 0x1C16F20
	0x01E24EEC LDP X20, X19, [X31 + 0x20]
	0x01E24EF0 LDP X22, X21, [X31 + 0x10]
	0x01E24EF4 LDP X30, X23, [X31], #0x30
	0x01E24EF8 RET
	0x01E24EFC LDR V0, [X0 + 0x110]
	0x01E24F00 RET
	0x01E24F04 STR D8, [X31 - 0x30]!
	0x01E24F08 STR X30, [X31 + 0x8]
	0x01E24F0C STP X22, X21, [X31 + 0x10]
	0x01E24F10 STP X20, X19, [X31 + 0x20]
	0x01E24F14 ADRP X21, 0x25B4000
	0x01E24F18 LDRB W8, [X21 + 0xE4C]
	0x01E24F1C MOV W19, W1
	0x01E24F20 MOV V8.16B, V0.16B
	0x01E24F24 MOV X20, X0
	0x01E24F28 TBNZ X8, 0x0, 0x1E24F4C
	0x01E24F2C ADRP X0, 0x22D6000
	0x01E24F30 LDR X0, [X0 + 0x8B0]
	0x01E24F34 BL 0x1C16CF4
	0x01E24F38 ADRP X0, 0x22D6000
	0x01E24F3C LDR X0, [X0 + 0x8C8]
	0x01E24F40 BL 0x1C16CF4
	0x01E24F44 MOVZ W8, 0x1
	0x01E24F48 STRB W8, [X21 + 0xE4C]
	0x01E24F4C LDR X0, [X20 + 0x120]
	0x01E24F50 CBZ X0, 0x1E24F98
	0x01E24F54 ADRP X22, 0x22D6000
	0x01E24F58 LDR X22, [X22 + 0x8C8]
	0x01E24F5C MOV W21, W31
	0x01E24F60 LDR W8, [X0 + 0x18]
	0x01E24F64 CMP W21, W8
	0x01E24F68 B.GE 0x1E24F9C
	0x01E24F6C LDR X2, [X22]
	0x01E24F70 MOV W1, W21
	0x01E24F74 BL 0x301BCCC
	0x01E24F78 MOV X1, X0
	0x01E24F7C MOV X0, X20
	0x01E24F80 MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x25B5000
	010 Move W8, [X20+3645]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22D0000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3645], W8
	021 Move W8, [X19+220]
	022 Compare W8, 0
	023 JumpIfEqual {110}
	024 Move X22, 0x22D0000
	025 Move X22, [X22+1432]
	026 Move X20, [X19+224]
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {64}
	040 Move X0, X31
	041 Call Camera.get_main
	042 Move X8, [X22]
	043 Move X21, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {64}
	057 Move X0, X31
	058 Call Camera.get_main
	059 Compare X0, 0
	060 JumpIfEqual {119}
	061 Move X1, X31
	062 Call Component.get_transform, X0
	063 Move X20, X0
	064 Move X0, [X22]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X20
	070 Move X1, X31
	071 Move X2, X31
	072 Call Object.op_Inequality, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {110}
	077 Compare X20, 0
	078 JumpIfEqual {119}
	079 Move X0, X20
	080 Move X1, X31
	081 Call Transform.get_position, X0
	082 Move X0, X19
	083 Move X1, X31
	084 Move V8, V0
	085 Move V9, V1
	086 Move V10, V2
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {119}
	090 Move X1, X31
	091 Call Transform.get_position, X0
	092 Move V3, [X19+232]
	093 Subtract S0, S8, S0
	094 Subtract S1, S9, S1
	095 Subtract S2, S10, S2
	096 Multiply S0, S0, S0
	097 Multiply S1, S1, S1
	098 Multiply S2, S2, S2
	099 Add S0, S0, S1
	100 Move W8, [X19+276]
	101 Add S0, S2, S0
	102 Multiply S1, S3, S3
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 NotImplemented "Instruction CSET not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move X0, X19
	108 Call DynamicBone.ResetParticlesPosition, X0
	109 Move [X19+276], W20
	110 Move X20, [X31+48]
	111 Move X19, [X31+56]
	112 Move X22, [X31+32]
	113 Move X21, [X31+40]
	114 Move X30, [X31+24]
	115 Move D9, [X31+8]
	116 Move D8, [X31+16]
	117 Move V10, [X31+64]
	118 Return 
	119 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x01E25738 MOVZ W8, 0x1

ISIL:
	001 Call DynamicBone.ResetParticlesPosition, X0
	002 Return 

Method: System.Void OnDisable()

Disassembly:
	0x01E2573C STRB W8, [X26 + 0x783]

ISIL:
	001 Call DynamicBone.InitTransforms, X0
	002 Return 

Method: System.Void OnValidate()

Disassembly:
	0x01E25740 LDR X8, [X25]
	0x01E25744 LDR X8, [X8 + 0xB8]
	0x01E25748 LDR V0, [X8]
	0x01E2574C LDUR V1, [X8 + 0x4]
	0x01E25750 FSUB S0, S9, S0
	0x01E25754 FSUB V1.2S, V10.2S, V1.2S
	0x01E25758 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01E25760 FADD S0, S0, S1
	0x01E25764 MOV S1, V1.S[1]
	0x01E25768 FADD S0, S1, S0
	0x01E2576C FCMP S0, S12
	0x01E25770 B.MI 0x1E25790
	0x01E25774 MOV X23, X31
	0x01E25778 MOV X0, X20
	0x01E2577C MOV X1, X19
	0x01E25780 MOV X2, X23
	0x01E25784 MOV W3, W29
	0x01E25788 MOV V0.16B, V8.16B
	0x01E2578C BL 0x1E25228
	0x01E25790 MOV X0, X28
	0x01E25794 MOV X1, X31
	0x01E25798 ADD W21, W21, 0x1
	0x01E2579C BL 0x3C40C8C
	0x01E257A0 CMP W21, W0
	0x01E257A4 B.LT 0x1E256E4
	0x01E257A8 MOV X0, X28
	0x01E257AC MOV X1, X31
	0x01E257B0 BL 0x3C40C8C
	0x01E257B4 CBNZ W0, 0x1E25820
	0x01E257B8 LDR V0, [X20 + 0x98]
	0x01E257BC MOV X28, X31
	0x01E257C0 FCMP S0, 0x0
	0x01E257C4 B.GT 0x1E25288
	0x01E257C8 LDR V9, [X20 + 0x9C]
	0x01E257CC LDRB W8, [X26 + 0x783]
	0x01E257D0 LDR V10, [X20 + 0xA0]
	0x01E257D4 CBNZ W8, 0x1E257E8
	0x01E257D8 MOV X0, X25
	0x01E257DC BL 0x1C16CF4
	0x01E257E0 MOVZ W8, 0x1
	0x01E257E4 STRB W8, [X26 + 0x783]
	0x01E257E8 LDR X8, [X25]
	0x01E257EC MOV X28, X31
	0x01E257F0 LDR X8, [X8 + 0xB8]
	0x01E257F4 LDR V0, [X8]
	0x01E257F8 LDUR V1, [X8 + 0x4]
	0x01E257FC FSUB S0, S9, S0
	0x01E25800 FSUB V1.2S, V10.2S, V1.2S
	0x01E25804 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01E2580C FADD S0, S0, S1
	0x01E25810 MOV S1, V1.S[1]
	0x01E25814 FADD S0, S1, S0
	0x01E25818 FCMP S0, S12
	0x01E2581C B.PL 0x1E25288
	0x01E25820 LDP X20, X19, [X31 + 0x90]
	0x01E25824 LDP X22, X21, [X31 + 0x80]
	0x01E25828 LDP X24, X23, [X31 + 0x70]
	0x01E2582C LDP X26, X25, [X31 + 0x60]
	0x01E25830 LDP X28, X27, [X31 + 0x50]
	0x01E25834 LDP X29, X30, [X31 + 0x40]
	0x01E25838 LDP D9, D8, [X31 + 0x30]
	0x01E2583C LDP D11, D10, [X31 + 0x20]
	0x01E25840 LDP D13, D12, [X31 + 0x10]
	0x01E25844 LDP D15, D14, [X31], #0xA0
	0x01E25848 RET
	0x01E2584C BL 0x1C16F20
	0x01E25850 STR X30, [X31 - 0x30]!
	0x01E25854 STP X22, X21, [X31 + 0x10]
	0x01E25858 STP X20, X19, [X31 + 0x20]
	0x01E2585C ADRP X21, 0x25B3000
	0x01E25860 ADRP X22, 0x22D5000
	0x01E25864 ADRP X20, 0x22D5000
	0x01E25868 LDRB W8, [X21 + 0xE55]
	0x01E2586C LDR X22, [X22 + 0x990]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25B4000
	006 Move X20, 0x22CF000
	007 Move W8, [X21+3646]
	008 Move X20, [X20+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22CF000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3646], W8
	019 Move V0, [X19+48]
	020 Move S1, W31
	021 Move V2, [X19+56]
	022 Move V4, [X19+72]
	023 NotImplemented "Instruction FMAXNM not yet implemented."
	024 Move [X19+48], S0
	025 Move V0, [X19+88]
	026 Move S3, 1
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 NotImplemented "Instruction FMIN not yet implemented."
	029 NotImplemented "Instruction FCSEL not yet implemented."
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 NotImplemented "Instruction FMIN not yet implemented."
	032 Move [X19+56], S2
	033 Move V2, [X19+104]
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 NotImplemented "Instruction FMIN not yet implemented."
	037 Move [X19+72], S4
	038 Move V4, [X19+120]
	039 NotImplemented "Instruction FCSEL not yet implemented."
	040 Move [X19+88], S0
	041 Move V0, [X19+136]
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 NotImplemented "Instruction FMIN not yet implemented."
	044 NotImplemented "Instruction FMIN not yet implemented."
	045 NotImplemented "Instruction FCSEL not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 NotImplemented "Instruction FMAXNM not yet implemented."
	048 NotImplemented "Instruction FCSEL not yet implemented."
	049 Move [X19+104], S2
	050 Move [X19+120], S1
	051 Move [X19+136], S0
	052 Move X0, [X20]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X31
	058 Call Application.get_isEditor
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {89}
	063 Move X0, [X20]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X31
	069 Call Application.get_isPlaying
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {89}
	074 Move X0, X19
	075 Call DynamicBone.IsRootChanged, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {94}
	080 Move X0, X19
	081 Call DynamicBone.InitTransforms, X0
	082 Move X0, X19
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X30, [X31+32]
	086 Move X21, [X31+40]
	087 Call DynamicBone.SetupParticles, X0
	088 Return 
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Return 
	094 Move X0, X19
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X30, [X31+32]
	098 Move X21, [X31+40]
	099 Call DynamicBone.UpdateParameters, X0
	100 Return 

Method: System.Boolean IsRootChanged()

Disassembly:
	0x01E25870 LDR X20, [X20 + 0x998]
	0x01E25874 MOV X19, X0
	0x01E25878 TBNZ X8, 0x0, 0x1E2589C
	0x01E2587C ADRP X0, 0x22D5000
	0x01E25880 LDR X0, [X0 + 0x998]
	0x01E25884 BL 0x1C16CF4
	0x01E25888 ADRP X0, 0x22D5000
	0x01E2588C LDR X0, [X0 + 0x990]
	0x01E25890 BL 0x1C16CF4
	0x01E25894 MOVZ W8, 0x1
	0x01E25898 STRB W8, [X21 + 0xE55]
	0x01E2589C LDR X0, [X22]
	0x01E258A0 BL 0x1C16F10
	0x01E258A4 LDR X1, [X20]
	0x01E258A8 MOV X20, X0
	0x01E258AC BL 0x301B7C4
	0x01E258B0 STR X20, [X19 + 0x68]
	0x01E258B4 MOV X0, X19
	0x01E258B8 LDP X20, X19, [X31 + 0x20]
	0x01E258BC LDP X22, X21, [X31 + 0x10]
	0x01E258C0 MOV X1, X31
	0x01E258C4 LDR X30, [X31], #0x30
	0x01E258C8 B 0x33BDD8C
	0x01E258CC MOV X1, X31
	0x01E258D0 B 0x33BDD8C
	0x01E258D4 SUB X31, X31, 0x80
	0x01E258D8 STR D12, [X31 + 0x20]
	0x01E258DC STP D11, D10, [X31 + 0x30]
	0x01E258E0 STP D9, D8, [X31 + 0x40]
	0x01E258E4 STP X30, X23, [X31 + 0x50]
	0x01E258E8 STP X22, X21, [X31 + 0x60]
	0x01E258EC STP X20, X19, [X31 + 0x70]
	0x01E258F0 ADRP X21, 0x25B3000
	0x01E258F4 LDRB W8, [X21 + 0xE47]
	0x01E258F8 MOV X19, X1
	0x01E258FC MOV X20, X0
	0x01E25900 TBNZ X8, 0x0, 0x1E25924
	0x01E25904 ADRP X0, 0x22D5000
	0x01E25908 LDR X0, [X0 + 0x908]
	0x01E2590C BL 0x1C16CF4
	0x01E25910 ADRP X0, 0x22D5000
	0x01E25914 LDR X0, [X0 + 0x920]
	0x01E25918 BL 0x1C16CF4
	0x01E2591C MOVZ W8, 0x1
	0x01E25920 STRB W8, [X21 + 0xE47]
	0x01E25924 CBZ X19, 0x1E25CA8
	0x01E25928 LDP S0, S1, [X20 + 0xA8]
	0x01E2592C LDR V2, [X20 + 0xB0]
	0x01E25930 ADD X0, X19, 0x24
	0x01E25934 MOV X1, X31
	0x01E25938 BL 0x3C282D0
	0x01E2593C ADRP X21, 0x25B3000
	0x01E25940 LDRB W8, [X21 + 0x785]
	0x01E25944 MOV V8.16B, V2.16B
	0x01E25948 CBNZ W8, 0x1E25968
	0x01E2594C ADRP X0, 0x22CE000
	0x01E25950 LDR X0, [X0 + 0x5A8]
	0x01E25954 STP V1, V0, [X31]
	0x01E25958 BL 0x1C16CF4
	0x01E2595C LDP V1, V0, [X31]
	0x01E25960 MOVZ W8, 0x1
	0x01E25964 STRB W8, [X21 + 0x785]
	0x01E25968 ADRP X21, 0x22CE000
	0x01E2596C LDR X21, [X21 + 0x5A8]
	0x01E25970 LDR X0, [X21]
	0x01E25974 LDR W8, [X0 + 0xE0]
	0x01E25978 CBNZ W8, 0x1E25988
	0x01E2597C STP V1, V0, [X31]
	0x01E25980 BL 0x1C16DFC
	0x01E25984 LDP V1, V0, [X31]
	0x01E25988 ADRP X8, 0xFFFFFFFFFECC5000
	0x01E2598C FMUL S2, S0, S0
	0x01E25990 FMUL S3, S1, S1
	0x01E25994 LDR V4, [X8 + 0x17C]
	0x01E25998 FADD S3, S2, S3
	0x01E2599C FMUL S2, S8, S8
	0x01E259A0 FADD S2, S2, S3
	0x01E259A4 FSQRT S2, S2
	0x01E259A8 FCMP S2, S4
	0x01E259AC B.LE 0x1E259C4
	0x01E259B0 MOV V0.S[1], V1.S[0]
	0x01E259B4 UNIMPLEMENTED
	0x00000000 INVALID
	0x01E259BC FDIV S8, S8, S2
	0x01E259C0 B 0x1E259FC
	0x01E259C4 ADRP X22, 0x25B3000
	0x01E259C8 LDRB W8, [X22 + 0x783]
	0x01E259CC CBNZ W8, 0x1E259E4
	0x01E259D0 ADRP X0, 0x22CE000
	0x01E259D4 LDR X0, [X0 + 0x5A0]
	0x01E259D8 BL 0x1C16CF4
	0x01E259DC MOVZ W8, 0x1
	0x01E259E0 STRB W8, [X22 + 0x783]
	0x01E259E4 ADRP X8, 0x22CE000
	0x01E259E8 LDR X8, [X8 + 0x5A0]
	0x01E259EC LDR X8, [X8]
	0x01E259F0 LDR X8, [X8 + 0xB8]
	0x01E259F4 LDR V9, [X8]
	0x01E259F8 LDR V8, [X8 + 0x8]
	0x01E259FC ADRP X22, 0x25B3000
	0x01E25A00 LDRB W8, [X22 + 0x784]
	0x01E25A04 CBNZ W8, 0x1E25A1C
	0x01E25A08 ADRP X0, 0x22CE000
	0x01E25A0C LDR X0, [X0 + 0x5A8]
	0x01E25A10 BL 0x1C16CF4
	0x01E25A14 MOVZ W8, 0x1
	0x01E25A18 STRB W8, [X22 + 0x784]
	0x01E25A1C LDR X0, [X21]
	0x01E25A20 LDP S12, S11, [X20 + 0xA8]
	0x01E25A24 LDR V10, [X20 + 0xB0]
	0x01E25A28 LDR W8, [X0 + 0xE0]
	0x01E25A2C CBNZ W8, 0x1E25A34
	0x01E25A30 BL 0x1C16DFC
	0x01E25A34 FMUL S0, S12, S12
	0x01E25A38 FMUL S1, S11, S11
	0x01E25A3C FMUL S2, S10, S10
	0x01E25A40 LDR X0, [X19 + 0x68]
	0x01E25A44 FADD S0, S0, S1
	0x01E25A48 FADD S0, S0, S2
	0x01E25A4C FSQRT S0, S0
	0x00000000 INVALID
	0x01E25A54 FMUL S0, S8, S0
	0x01E25A58 STR D1, [X19 + 0x18]
	0x01E25A5C STR S0, [X19 + 0x20]
	0x01E25A60 CBZ X0, 0x1E25CA8
	0x01E25A64 ADRP X23, 0x22D5000
	0x01E25A68 LDR X23, [X23 + 0x920]
	0x01E25A6C MOV W21, W31
	0x01E25A70 FMOV S9, 1
	0x01E25A74 FMOV S10, W31
	0x01E25A78 LDR W8, [X0 + 0x18]
	0x01E25A7C CMP W21, W8
	0x01E25A80 B.GE 0x1E25CAC
	0x01E25A84 LDR X2, [X23]
	0x01E25A88 MOV W1, W21
	0x01E25A8C BL 0x301BCCC
	0x01E25A90 CBZ X0, 0x1E25CA8
	0x01E25A94 LDR V0, [X20 + 0x38]
	0x01E25A98 MOV X22, X0
	0x01E25A9C STR S0, [X0 + 0x20]
	0x01E25AA0 LDR V0, [X20 + 0x48]
	0x01E25AA4 STR S0, [X0 + 0x24]
	0x01E25AA8 LDR V0, [X20 + 0x58]
	0x01E25AAC STR S0, [X0 + 0x28]
	0x01E25AB0 LDR V0, [X20 + 0x68]
	0x01E25AB4 STR S0, [X0 + 0x2C]
	0x01E25AB8 LDR V0, [X20 + 0x78]
	0x01E25ABC STR S0, [X0 + 0x30]
	0x01E25AC0 LDR V0, [X20 + 0x88]
	0x01E25AC4 STR S0, [X0 + 0x34]
	0x01E25AC8 LDR V0, [X19 + 0x64]
	0x01E25ACC FCMP S0, 0x0
	0x01E25AD0 B.LE 0x1E25C44
	0x01E25AD4 LDR V1, [X22 + 0x38]
	0x01E25AD8 LDR X0, [X20 + 0x40]
	0x01E25ADC FDIV S8, S1, S0
	0x01E25AE0 CBZ X0, 0x1E25B18
	0x01E25AE4 MOV X1, X31
	0x01E25AE8 BL 0x3C00D10
	0x01E25AEC CBZ X0, 0x1E25CA8
	0x01E25AF0 LDR X8, [X0 + 0x18]
	0x01E25AF4 CBZ X8, 0x1E25B18
	0x01E25AF8 LDR X0, [X20 + 0x40]
	0x01E25AFC CBZ X0, 0x1E25CA8
	0x01E25B00 LDR V11, [X22 + 0x20]
	0x01E25B04 MOV V0.16B, V8.16B
	0x01E25B08 MOV X1, X31
	0x01E25B0C BL 0x3C00CC4
	0x01E25B10 FMUL S0, S11, S0
	0x01E25B14 STR S0, [X22 + 0x20]
	0x01E25B18 LDR X0, [X20 + 0x50]
	0x01E25B1C CBZ X0, 0x1E25B54
	0x01E25B20 MOV X1, X31
	0x01E25B24 BL 0x3C00D10
	0x01E25B28 CBZ X0, 0x1E25CA8
	0x01E25B2C LDR X8, [X0 + 0x18]
	0x01E25B30 CBZ X8, 0x1E25B54
	0x01E25B34 LDR X0, [X20 + 0x50]
	0x01E25B38 CBZ X0, 0x1E25CA8
	0x01E25B3C LDR V11, [X22 + 0x24]
	0x01E25B40 MOV V0.16B, V8.16B
	0x01E25B44 MOV X1, X31
	0x01E25B48 BL 0x3C00CC4
	0x01E25B4C FMUL S0, S11, S0
	0x01E25B50 STR S0, [X22 + 0x24]
	0x01E25B54 LDR X0, [X20 + 0x60]
	0x01E25B58 CBZ X0, 0x1E25B90
	0x01E25B5C MOV X1, X31
	0x01E25B60 BL 0x3C00D10
	0x01E25B64 CBZ X0, 0x1E25CA8
	0x01E25B68 LDR X8, [X0 + 0x18]
	0x01E25B6C CBZ X8, 0x1E25B90
	0x01E25B70 LDR X0, [X20 + 0x60]
	0x01E25B74 CBZ X0, 0x1E25CA8
	0x01E25B78 LDR V11, [X22 + 0x28]
	0x01E25B7C MOV V0.16B, V8.16B
	0x01E25B80 MOV X1, X31
	0x01E25B84 BL 0x3C00CC4
	0x01E25B88 FMUL S0, S11, S0
	0x01E25B8C STR S0, [X22 + 0x28]
	0x01E25B90 LDR X0, [X20 + 0x70]
	0x01E25B94 CBZ X0, 0x1E25BCC
	0x01E25B98 MOV X1, X31
	0x01E25B9C BL 0x3C00D10
	0x01E25BA0 CBZ X0, 0x1E25CA8
	0x01E25BA4 LDR X8, [X0 + 0x18]
	0x01E25BA8 CBZ X8, 0x1E25BCC
	0x01E25BAC LDR X0, [X20 + 0x70]
	0x01E25BB0 CBZ X0, 0x1E25CA8
	0x01E25BB4 LDR V11, [X22 + 0x2C]
	0x01E25BB8 MOV V0.16B, V8.16B
	0x01E25BBC MOV X1, X31
	0x01E25BC0 BL 0x3C00CC4
	0x01E25BC4 FMUL S0, S11, S0
	0x01E25BC8 STR S0, [X22 + 0x2C]
	0x01E25BCC LDR X0, [X20 + 0x80]
	0x01E25BD0 CBZ X0, 0x1E25C08
	0x01E25BD4 MOV X1, X31
	0x01E25BD8 BL 0x3C00D10
	0x01E25BDC CBZ X0, 0x1E25CA8
	0x01E25BE0 LDR X8, [X0 + 0x18]
	0x01E25BE4 CBZ X8, 0x1E25C08
	0x01E25BE8 LDR X0, [X20 + 0x80]
	0x01E25BEC CBZ X0, 0x1E25CA8
	0x01E25BF0 LDR V11, [X22 + 0x30]
	0x01E25BF4 MOV V0.16B, V8.16B
	0x01E25BF8 MOV X1, X31
	0x01E25BFC BL 0x3C00CC4
	0x01E25C00 FMUL S0, S11, S0
	0x01E25C04 STR S0, [X22 + 0x30]
	0x01E25C08 LDR X0, [X20 + 0x90]
	0x01E25C0C CBZ X0, 0x1E25C44
	0x01E25C10 MOV X1, X31
	0x01E25C14 BL 0x3C00D10
	0x01E25C18 CBZ X0, 0x1E25CA8
	0x01E25C1C LDR X8, [X0 + 0x18]
	0x01E25C20 CBZ X8, 0x1E25C44
	0x01E25C24 LDR X0, [X20 + 0x90]
	0x01E25C28 CBZ X0, 0x1E25CA8
	0x01E25C2C LDR V11, [X22 + 0x34]
	0x01E25C30 MOV V0.16B, V8.16B
	0x01E25C34 MOV X1, X31
	0x01E25C38 BL 0x3C00CC4
	0x01E25C3C FMUL S0, S11, S0
	0x01E25C40 STR S0, [X22 + 0x34]
	0x01E25C44 LDP S0, S1, [X22 + 0x20]
	0x01E25C48 LDP S2, S3, [X22 + 0x28]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], X30
	003 Move [X31+80], X26
	004 Move [X31+88], X25
	005 Move [X31+96], X24
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X22, 0x25B4000
	012 Move X21, 0x22D6000
	013 Move X20, 0x22D6000
	014 Move X24, 0x22CF000
	015 Move W8, [X22+3647]
	016 Move X21, [X21+2352]
	017 Move X20, [X20+2360]
	018 Move X24, [X24+1432]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {65}
	024 Move X0, 0x22D6000
	025 Move X0, [X0+2368]
	026 Call 0x1C17CF4
	027 Move X0, 0x22D6000
	028 Move X0, [X0+2376]
	029 Call 0x1C17CF4
	030 Move X0, 0x22D6000
	031 Move X0, [X0+2384]
	032 Call 0x1C17CF4
	033 Move X0, 0x22D6000
	034 Move X0, [X0+2392]
	035 Call 0x1C17CF4
	036 Move X0, 0x22D6000
	037 Move X0, [X0+2400]
	038 Call 0x1C17CF4
	039 Move X0, 0x22D6000
	040 Move X0, [X0+2408]
	041 Call 0x1C17CF4
	042 Move X0, 0x22D6000
	043 Move X0, [X0+2360]
	044 Call 0x1C17CF4
	045 Move X0, 0x22D6000
	046 Move X0, [X0+2224]
	047 Call 0x1C17CF4
	048 Move X0, 0x22D6000
	049 Move X0, [X0+2232]
	050 Call 0x1C17CF4
	051 Move X0, 0x22D6000
	052 Move X0, [X0+2240]
	053 Call 0x1C17CF4
	054 Move X0, 0x22D6000
	055 Move X0, [X0+2248]
	056 Call 0x1C17CF4
	057 Move X0, 0x22D6000
	058 Move X0, [X0+2352]
	059 Call 0x1C17CF4
	060 Move X0, 0x22CF000
	061 Move X0, [X0+1432]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X22+3647], W8
	065 Move X0, [X21]
	066 Move [X31+32], X31
	067 Move [X31+40], X31
	068 Move [X31+48], X31
	069 Call 0x1C17F10
	070 Move X1, [X20]
	071 Move X20, X0
	072 Call List`1<Object>..ctor, X0
	073 Move X0, [X24]
	074 Move X21, [X19+32]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X22, 0x22D6000
	080 Move X22, [X22+2392]
	081 Move X0, X21
	082 Move X1, X31
	083 Move X2, X31
	084 Call Object.op_Inequality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {111}
	089 Compare X20, 0
	090 JumpIfEqual {243}
	091 Move W10, [X20+28]
	092 Move X1, [X19+32]
	093 Move X8, [X20+16]
	094 Move X9, [X22]
	095 Add W10, W10, 1
	096 Move [X20+28], W10
	097 Compare X8, 0
	098 JumpIfEqual {243}
	099 NotImplemented "Instruction LDRSW not yet implemented."
	100 Move W11, [X8+24]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Add W9, W10, 1
	103 Add X8, X8, X10
	104 Move [X20+24], W9
	105 Move [X8+32], X1
	106 Move X8, [X9+32]
	107 Move X0, X20
	108 Move X8, [X8+192]
	109 Move X2, [X8+112]
	110 Call List`1<Object>.AddWithResize, X0, X1
	111 Move X0, [X19+40]
	112 Compare X0, 0
	113 JumpIfEqual {183}
	114 Move X8, 0x22D6000
	115 Move X8, [X8+2408]
	116 Move X25, 0x22D6000
	117 Move X26, 0x22D6000
	118 Move X23, 0x22D6000
	119 Move X1, [X8]
	120 Move X25, [X25+2376]
	121 Move X26, [X26+2400]
	122 Move X23, [X23+2368]
	123 Add X8, X31, 8
	124 Call List`1<Object>.GetEnumerator, X0
	125 NotImplemented "Instruction LDUR not yet implemented."
	126 Move X8, [X31+24]
	127 Move [X31+2], V0
	128 Move [X31+48], X8
	129 Move X1, [X25]
	130 Add X0, X31, 32
	131 Call Enumerator<Object>.MoveNext, X0
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {180}
	136 Move X0, [X24]
	137 Move X21, [X31+48]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X21
	143 Move X1, X31
	144 Move X2, X31
	145 Call Object.op_Inequality, X0, X1
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {129}
	150 Compare X20, 0
	151 JumpIfEqual {244}
	152 Move X2, [X26]
	153 Move X0, X20
	154 Move X1, X21
	155 Call List`1<Object>.Contains, X0, X1
	156 Move TEMP, X0
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfEqual {129}
	160 Move W10, [X20+28]
	161 Move X8, [X20+16]
	162 Move X9, [X22]
	163 Add W10, W10, 1
	164 Move [X20+28], W10
	165 Compare X8, 0
	166 JumpIfEqual {245}
	167 NotImplemented "Instruction LDRSW not yet implemented."
	168 Move W11, [X8+24]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Add W9, W10, 1
	171 Add X8, X8, X10
	172 Move [X20+24], W9
	173 Move [X8+32], X21
	174 Move X8, [X9+32]
	175 Move X8, [X8+192]
	176 Move X2, [X8+112]
	177 Move X0, X20
	178 Move X1, X21
	179 Call List`1<Object>.AddWithResize, X0, X1
	180 Move X1, [X23]
	181 Add X0, X31, 32
	182 Call Enumerator<Object>.Dispose, X0
	183 Compare X20, 0
	184 JumpIfEqual {243}
	185 Move X8, [X19+288]
	186 Compare X8, 0
	187 JumpIfEqual {243}
	188 Move W9, [X20+24]
	189 Move W8, [X8+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X25, 0x22D6000
	193 Move X26, 0x22D6000
	194 Move X25, [X25+2240]
	195 Move X26, [X26+2248]
	196 Move W21, W31
	197 Move X2, [X25]
	198 Move X0, X20
	199 Move W1, W21
	200 Call List`1<Object>.get_Item, X0, X1
	201 Move X8, [X19+288]
	202 Compare X8, 0
	203 JumpIfEqual {243}
	204 Move X2, [X26]
	205 Move X22, X0
	206 Move X0, X8
	207 Move W1, W21
	208 Call List`1<Object>.get_Item, X0, X1
	209 Compare X0, 0
	210 JumpIfEqual {243}
	211 Move X8, [X24]
	212 Move X23, [X0+16]
	213 Move W9, [X8+224]
	214 Compare W9, 0
	215 JumpIfNotEqual {218}
	216 Move X0, X8
	217 Call 0x1C17DFC
	218 Move X0, X22
	219 Move X1, X23
	220 Move X2, X31
	221 Call Object.op_Inequality, X0, X1
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfEqual {231}
	226 Move W8, [X20+24]
	227 Add W21, W21, 1
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move W0, 1
	230 Move W0, W31
	231 Move X20, [X31+128]
	232 Move X19, [X31+136]
	233 Move X22, [X31+112]
	234 Move X21, [X31+120]
	235 Move X24, [X31+96]
	236 Move X23, [X31+104]
	237 Move X26, [X31+80]
	238 Move X25, [X31+88]
	239 Move X30, [X31+64]
	240 And W0, W0, 1
	241 Add X31, X31, 144
	242 Return X0
	243 Call 0x1C17F20
	244 Call 0x1C17F20
	245 Call 0x1C17F20
	246 Move X21, X0
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move X0, X21
	249 Call 0x3EB2AD0
	250 Move X22, [X0]
	251 Call 0x3EB2AE0
	252 Move X1, [X23]
	253 Add X0, X31, 32
	254 Call Enumerator<Object>.Dispose, X0
	255 Compare X22, 0
	256 JumpIfEqual {183}
	257 Move X0, X22
	258 Call 0x1C17F18
	259 Move X22, X31
	260 Move X21, X0
	261 Move X1, [X23]
	262 Add X0, X31, 32
	263 Call Enumerator<Object>.Dispose, X0
	264 Compare X22, 0
	265 JumpIfNotEqual {268}
	266 Move X0, X21
	267 Call 0x1D2D690
	268 Move X0, X22
	269 Call 0x1C17F18
	270 Call 0x1991590

Method: System.Void OnDidApplyAnimationProperties()

Disassembly:
	0x01E25CE4 TBNZ X8, 0x0, 0x1E25D08

ISIL:
	001 Call DynamicBone.UpdateParameters, X0
	002 Return 

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01E25CE8 ADRP X0, 0x22D5000
	0x01E25CEC LDR X0, [X0 + 0x908]
	0x01E25CF0 BL 0x1C16CF4
	0x01E25CF4 ADRP X0, 0x22D5000
	0x01E25CF8 LDR X0, [X0 + 0x920]
	0x01E25CFC BL 0x1C16CF4
	0x01E25D00 MOVZ W8, 0x1
	0x01E25D04 STRB W8, [X20 + 0xE49]
	0x01E25D08 CBZ X19, 0x1E25D84
	0x01E25D0C LDR X0, [X19 + 0x68]
	0x01E25D10 CBZ X0, 0x1E25D84
	0x01E25D14 ADRP X22, 0x22D5000
	0x01E25D18 LDR X22, [X22 + 0x920]
	0x01E25D1C MOV W20, W31
	0x01E25D20 LDR W8, [X0 + 0x18]
	0x01E25D24 CMP W20, W8
	0x01E25D28 B.GE 0x1E25D88
	0x01E25D2C LDR X2, [X22]
	0x01E25D30 MOV W1, W20
	0x01E25D34 BL 0x301BCCC
	0x01E25D38 CBZ X0, 0x1E25D84
	0x01E25D3C LDRB W8, [X0 + 0x3D]
	0x01E25D40 MOV X21, X0
	0x01E25D44 CBZ W8, 0x1E25D78
	0x01E25D48 LDR X0, [X21 + 0x10]
	0x01E25D4C CBZ X0, 0x1E25D84
	0x01E25D50 LDP S1, S2, [X21 + 0x68]
	0x01E25D54 LDR V0, [X21 + 0x64]
	0x01E25D58 MOV X1, X31
	0x01E25D5C BL 0x3C3EC04
	0x01E25D60 LDR X0, [X21 + 0x10]
	0x01E25D64 CBZ X0, 0x1E25D84
	0x01E25D68 LDP S2, S3, [X21 + 0x78]
	0x01E25D6C LDP S0, S1, [X21 + 0x70]
	0x01E25D70 MOV X1, X31
	0x01E25D74 BL 0x3C3F8B8
	0x01E25D78 LDR X0, [X19 + 0x68]
	0x01E25D7C ADD W20, W20, 0x1
	0x01E25D80 CBNZ X0, 0x1E25D20
	0x01E25D84 BL 0x1C16F20
	0x01E25D88 LDP X20, X19, [X31 + 0x20]
	0x01E25D8C LDP X22, X21, [X31 + 0x10]
	0x01E25D90 LDR X30, [X31], #0x30
	0x01E25D94 RET
	0x01E25D98 STR X30, [X31 - 0x30]!
	0x01E25D9C STP X22, X21, [X31 + 0x10]
	0x01E25DA0 STP X20, X19, [X31 + 0x20]
	0x01E25DA4 ADRP X20, 0x25B3000
	0x01E25DA8 LDRB W8, [X20 + 0xE4B]
	0x01E25DAC MOV X19, X1
	0x01E25DB0 TBNZ X8, 0x0, 0x1E25DD4
	0x01E25DB4 ADRP X0, 0x22D5000
	0x01E25DB8 LDR X0, [X0 + 0x908]
	0x01E25DBC BL 0x1C16CF4
	0x01E25DC0 ADRP X0, 0x22D5000
	0x01E25DC4 LDR X0, [X0 + 0x920]
	0x01E25DC8 BL 0x1C16CF4
	0x01E25DCC MOVZ W8, 0x1
	0x01E25DD0 STRB W8, [X20 + 0xE4B]
	0x01E25DD4 CBZ X19, 0x1E25E74
	0x01E25DD8 LDR X0, [X19 + 0x68]
	0x01E25DDC CBZ X0, 0x1E25E74
	0x01E25DE0 ADRP X22, 0x22D5000
	0x01E25DE4 LDR X22, [X22 + 0x920]
	0x01E25DE8 MOV W20, W31
	0x01E25DEC LDR W8, [X0 + 0x18]
	0x01E25DF0 CMP W20, W8
	0x01E25DF4 B.GE 0x1E25E78
	0x01E25DF8 LDR X2, [X22]
	0x01E25DFC MOV W1, W20
	0x01E25E00 BL 0x301BCCC
	0x01E25E04 CBZ X0, 0x1E25E74
	0x01E25E08 LDRB W8, [X0 + 0x3D]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25B4000
	006 Move W8, [X20+3648]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x22CF000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move X0, 0x22D6000
	016 Move X0, [X0+2224]
	017 Call 0x1C17CF4
	018 Move X0, 0x22D6000
	019 Move X0, [X0+2248]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3648], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call Behaviour.get_enabled, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {92}
	030 Move X20, 0x22CF000
	031 Move X20, [X20+2416]
	032 Move X0, [X20]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call Application.get_isEditor
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {67}
	043 Move X0, [X20]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X31
	049 Call Application.get_isPlaying
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {67}
	054 Move X0, X19
	055 Move X1, X31
	056 Call Component.get_transform, X0
	057 Compare X0, 0
	058 JumpIfEqual {91}
	059 Move X1, X31
	060 Call Transform.get_hasChanged, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {67}
	065 Move X0, X19
	066 Call DynamicBone.SetupParticles, X0
	067 Move S0, 1
	068 Move S1, 1
	069 Move S2, 1
	070 Move S3, 1
	071 Move X0, X31
	072 Call Gizmos.set_color, X0
	073 Move X0, [X19+288]
	074 Compare X0, 0
	075 JumpIfEqual {91}
	076 Move X21, 0x22D6000
	077 Move X21, [X21+2248]
	078 Move W20, W31
	079 Move W8, [X0+24]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X2, [X21]
	082 Move W1, W20
	083 Call List`1<Object>.get_Item, X0, X1
	084 Move X1, X0
	085 Move X0, X19
	086 Call DynamicBone.DrawGizmos, X0, X1
	087 Move X0, [X19+288]
	088 Add W20, W20, 1
	089 Compare X0, 0
	090 JumpIfNotEqual {79}
	091 Call 0x1C17F20
	092 Move X20, [X31+16]
	093 Move X19, [X31+24]
	094 Move X30, [X31+32]
	095 Move X21, [X31+40]
	096 Return 

Method: System.Void DrawGizmos(DynamicBone/ParticleTree pt)

Disassembly:
	0x01E25E0C MOV X21, X0
	0x01E25E10 CBZ W8, 0x1E25E28
	0x01E25E14 LDR X0, [X21 + 0x10]
	0x01E25E18 CBZ X0, 0x1E25E74
	0x01E25E1C MOV X1, X31
	0x01E25E20 BL 0x3C3F58C
	0x01E25E24 B 0x1E25E58
	0x01E25E28 LDR X0, [X19 + 0x68]
	0x01E25E2C CBZ X0, 0x1E25E74
	0x01E25E30 LDR W1, [X21 + 0x18]
	0x01E25E34 LDR X2, [X22]
	0x01E25E38 BL 0x301BCCC
	0x01E25E3C CBZ X0, 0x1E25E74
	0x01E25E40 LDR X0, [X0 + 0x10]
	0x01E25E44 CBZ X0, 0x1E25E74
	0x01E25E48 LDP S1, S2, [X21 + 0x5C]
	0x01E25E4C LDR V0, [X21 + 0x58]
	0x01E25E50 MOV X1, X31
	0x01E25E54 BL 0x3C3DE4C
	0x01E25E58 STP S1, S2, [X21 + 0x50]
	0x01E25E5C STP S0, S1, [X21 + 0x40]
	0x01E25E60 STP S2, S0, [X21 + 0x48]
	0x01E25E64 STRB W31, [X21 + 0x3C]
	0x01E25E68 LDR X0, [X19 + 0x68]
	0x01E25E6C ADD W20, W20, 0x1
	0x01E25E70 CBNZ X0, 0x1E25DEC
	0x01E25E74 BL 0x1C16F20
	0x01E25E78 LDP X20, X19, [X31 + 0x20]
	0x01E25E7C LDP X22, X21, [X31 + 0x10]
	0x01E25E80 LDR X30, [X31], #0x30
	0x01E25E84 RET
	0x01E25E88 SUB X31, X31, 0x90
	0x01E25E8C STP D15, D14, [X31 + 0x20]
	0x01E25E90 STP D13, D12, [X31 + 0x30]
	0x01E25E94 STP D11, D10, [X31 + 0x40]
	0x01E25E98 STP D9, D8, [X31 + 0x50]
	0x01E25E9C STP X30, X23, [X31 + 0x60]
	0x01E25EA0 STP X22, X21, [X31 + 0x70]
	0x01E25EA4 STP X20, X19, [X31 + 0x80]
	0x01E25EA8 ADRP X22, 0x25B3000
	0x01E25EAC LDRB W8, [X22 + 0xE4D]
	0x01E25EB0 MOV W21, W2
	0x01E25EB4 MOV V8.16B, V0.16B
	0x01E25EB8 MOV X19, X1
	0x01E25EBC MOV X20, X0
	0x01E25EC0 TBNZ X8, 0x0, 0x1E25EE4
	0x01E25EC4 ADRP X0, 0x22D5000
	0x01E25EC8 LDR X0, [X0 + 0x908]
	0x01E25ECC BL 0x1C16CF4
	0x01E25ED0 ADRP X0, 0x22D5000
	0x01E25ED4 LDR X0, [X0 + 0x920]
	0x01E25ED8 BL 0x1C16CF4
	0x01E25EDC MOVZ W8, 0x1
	0x01E25EE0 STRB W8, [X22 + 0xE4D]
	0x01E25EE4 ADRP X22, 0x25B3000
	0x01E25EE8 LDR V9, [X20 + 0xA8]
	0x01E25EEC LDRB W8, [X22 + 0x785]
	0x01E25EF0 LDR V10, [X20 + 0xB0]
	0x01E25EF4 CBNZ W8, 0x1E25F0C
	0x01E25EF8 ADRP X0, 0x22CE000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x25B4000
	008 Move W8, [X21+3649]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x22D6000
	016 Move X0, [X0+2312]
	017 Call 0x1C17CF4
	018 Move X0, 0x22D6000
	019 Move X0, [X0+2336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3649], W8
	023 Compare X19, 0
	024 JumpIfEqual {72}
	025 Move X0, [X19+104]
	026 Compare X0, 0
	027 JumpIfEqual {72}
	028 Move X23, 0x22D6000
	029 Move X23, [X23+2336]
	030 Move W21, W31
	031 Move W8, [X0+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X2, [X23]
	034 Move W1, W21
	035 Call List`1<Object>.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {72}
	038 Move W1, [X0+24]
	039 Move X22, X0
	040 Move TEMP, X1
	041 And TEMP, TEMP, -2147483648
	042 Compare TEMP, -2147483648
	043 JumpIfEqual {59}
	044 Move X0, [X19+104]
	045 Compare X0, 0
	046 JumpIfEqual {72}
	047 Move X2, [X23]
	048 Call List`1<Object>.get_Item, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {72}
	051 Move S1, [X22+68]
	052 Move S2, [X22+72]
	053 Move V0, [X22+64]
	054 Move S3, [X0+64]
	055 Move S4, [X0+68]
	056 Move V5, [X0+72]
	057 Move X0, X31
	058 Call Gizmos.DrawLine, X0, X1
	059 Move V3, [X22+52]
	060 NotImplemented "Instruction FCMP not yet implemented."
	061 Move V4, [X20+264]
	062 Move S0, [X22+64]
	063 Move S1, [X22+68]
	064 Move V2, [X22+72]
	065 Move X0, X31
	066 Multiply S3, S3, S4
	067 Call Gizmos.DrawWireSphere, X0, V0
	068 Move X0, [X19+104]
	069 Add W21, W21, 1
	070 Compare X0, 0
	071 JumpIfNotEqual {31}
	072 Call 0x1C17F20
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Move X23, [X31+56]
	079 Return 

Method: System.Void SetWeight(System.Single w)

Disassembly:
	0x01E24DB0 MOV X0, X31
	0x01E24DB4 BL 0x3C0D030
	0x01E24DB8 LDR X0, [X19 + 0x120]
	0x01E24DBC CBZ X0, 0x1E24DFC
	0x01E24DC0 ADRP X21, 0x22D6000
	0x01E24DC4 LDR X21, [X21 + 0x8C8]
	0x01E24DC8 MOV W20, W31
	0x01E24DCC LDR W8, [X0 + 0x18]
	0x01E24DD0 CMP W20, W8
	0x01E24DD4 B.GE 0x1E24E00
	0x01E24DD8 LDR X2, [X21]
	0x01E24DDC MOV W1, W20
	0x01E24DE0 BL 0x301BCCC
	0x01E24DE4 MOV X1, X0
	0x01E24DE8 MOV X0, X19
	0x01E24DEC BL 0x1E24E0C
	0x01E24DF0 LDR X0, [X19 + 0x120]
	0x01E24DF4 ADD W20, W20, 0x1
	0x01E24DF8 CBNZ X0, 0x1E24DCC
	0x01E24DFC BL 0x1C16F20
	0x01E24E00 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V1, [X0+272]
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move X19, X0
	007 Move V8, V0
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move X0, X19
	010 Call DynamicBone.InitTransforms, X0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move X0, X19
	013 Call DynamicBone.ResetParticlesPosition, X0
	014 Move [X19+192], S8
	015 Move [X19+272], S8
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V8, [X31+32]
	019 Return 

Method: System.Single GetWeight()

Disassembly:
	0x01E25EFC LDR X0, [X0 + 0x5A8]
	0x01E25F00 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+272]
	002 Return V0

Method: System.Void UpdateParticles()

Disassembly:
	0x01E253EC BL 0x1C16DFC
	0x01E253F0 MOV X0, X23
	0x01E253F4 MOV X1, X31
	0x01E253F8 MOV X2, X31
	0x01E253FC BL 0x3C354F8
	0x01E25400 TBZ X0, 0x0, 0x1E254BC
	0x01E25404 MOV X0, X21
	0x01E25408 MOV X1, X31
	0x01E2540C BL 0x3C3F58C
	0x01E25410 CBZ X23, 0x1E2584C
	0x01E25414 MOV X0, X23
	0x01E25418 MOV X1, X31
	0x01E2541C FADD S9, S2, S2
	0x01E25420 FADD S10, S1, S1
	0x01E25424 FADD S11, S0, S0
	0x01E25428 BL 0x3C3F58C
	0x01E2542C FSUB S0, S11, S0
	0x01E25430 FSUB S1, S10, S1
	0x01E25434 FSUB S2, S9, S2
	0x01E25438 MOV X0, X21
	0x01E2543C MOV X1, X31
	0x01E25440 BL 0x3C40B58
	0x01E25444 LDR V3, [X20 + 0x98]
	0x01E25448 FMUL S0, S0, S3
	0x01E2544C FMUL S1, S1, S3
	0x01E25450 FMUL S2, S2, S3
	0x01E25454 B 0x1E254AC
	0x01E25458 MOV X0, X20
	0x01E2545C MOV X1, X31
	0x01E25460 BL 0x3C32E90
	0x01E25464 CBZ X0, 0x1E2584C
	0x01E25468 LDP S1, S2, [X20 + 0xA0]
	0x01E2546C LDR V0, [X20 + 0x9C]
	0x01E25470 MOV X1, X31
	0x01E25474 BL 0x3C40610
	0x01E25478 CBZ X21, 0x1E2584C
	0x01E2547C MOV X0, X21
	0x01E25480 MOV X1, X31
	0x01E25484 MOV V9.16B, V0.16B
	0x01E25488 MOV V10.16B, V1.16B
	0x01E2548C MOV V11.16B, V2.16B
	0x01E25490 BL 0x3C3F58C
	0x01E25494 FADD S0, S9, S0
	0x01E25498 FADD S1, S10, S1
	0x01E2549C FADD S2, S11, S2
	0x01E254A0 MOV X0, X21
	0x01E254A4 MOV X1, X31
	0x01E254A8 BL 0x3C40B58
	0x01E254AC STP S0, S1, [X27 + 0x58]
	0x01E254B0 B 0x1E254D0
	0x01E254B4 CBNZ X19, 0x1E25644
	0x01E254B8 B 0x1E2584C
	0x01E254BC LDR V0, [X20 + 0x98]
	0x01E254C0 STR W31, [X27 + 0x5C]
	0x01E254C4 FMOV S2, W31
	0x01E254C8 FMOV S1, W31
	0x01E254CC STR S0, [X27 + 0x58]
	0x01E254D0 MOV X0, X21
	0x01E254D4 MOV X1, X31
	0x01E254D8 STR S2, [X27 + 0x60]
	0x01E254DC BL 0x3C3DE4C
	0x01E254E0 STP S1, S2, [X27 + 0x50]
	0x01E254E4 STP S0, S1, [X27 + 0x40]
	0x01E254E8 STP S2, S0, [X27 + 0x48]
	0x01E254EC LDRB W8, [X26 + 0x783]
	0x01E254F0 CBNZ W8, 0x1E25504
	0x01E254F4 MOV X0, X25
	0x01E254F8 BL 0x1C16CF4
	0x01E254FC MOVZ W8, 0x1
	0x01E25500 STRB W8, [X26 + 0x783]
	0x01E25504 LDR X8, [X25]
	0x01E25508 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25B4000
	007 Move W8, [X20+3650]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22D6000
	014 Move X0, [X0+2224]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3650], W8
	018 Move X8, [X19+288]
	019 Compare X8, 0
	020 JumpIfEqual {74}
	021 Move W8, [X8+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W8, [X19+52]
	024 Move V1, [X19+296]
	025 Move V0, [X19+48]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 Multiply S8, S1, S0
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move V2, [X19+268]
	031 Move S3, 1
	032 Move W8, W31
	033 NotImplemented "Instruction FDIV not yet implemented."
	034 Add S1, S1, S2
	035 Move [X19+268], S1
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Subtract W8, W8, 1
	038 Subtract S1, S1, S0
	039 Add W31, W8, 3
	040 Move [X19+268], S1
	041 Move [X19+268], W31
	042 Move S8, 1
	043 Move W21, 3
	044 Move S8, 1
	045 Move W21, 1
	046 Move W20, W31
	047 Move X0, X19
	048 Move V0, V8
	049 Move W1, W20
	050 Call DynamicBone.UpdateParticles1, X0, V0, X1
	051 Move X0, X19
	052 Move V0, V8
	053 Call DynamicBone.UpdateParticles2, X0, V0
	054 Add W20, W20, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X30, [X31+16]
	059 Move X21, [X31+24]
	060 Move V8, [X31+48]
	061 Return 
	062 Compare W8, 0
	063 JumpIfEqual {66}
	064 Subtract W21, W31, W8
	065 Move S8, 1
	066 Move X0, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X30, [X31+16]
	070 Move X21, [X31+24]
	071 Move V8, [X31+48]
	072 Call DynamicBone.SkipUpdateParticles, X0
	073 Return 
	074 Call 0x1C17F20

Method: System.Void SetupParticles()

Disassembly:
	0x01E2494C MOVZ W8, 0x1
	0x01E24950 STRB W8, [X22 + 0xE3F]
	0x01E24954 LDR X0, [X21]
	0x01E24958 STP X31, X31, [X31 + 0x20]
	0x01E2495C STR X31, [X31 + 0x30]
	0x01E24960 BL 0x1C16F10
	0x01E24964 LDR X1, [X20]
	0x01E24968 MOV X20, X0
	0x01E2496C BL 0x301B7C4
	0x01E24970 LDR X0, [X24]
	0x01E24974 LDR X21, [X19 + 0x20]
	0x01E24978 LDR W8, [X0 + 0xE0]
	0x01E2497C CBNZ W8, 0x1E24984
	0x01E24980 BL 0x1C16DFC
	0x01E24984 ADRP X22, 0x22D6000
	0x01E24988 LDR X22, [X22 + 0x958]
	0x01E2498C MOV X0, X21
	0x01E24990 MOV X1, X31
	0x01E24994 MOV X2, X31
	0x01E24998 BL 0x3C354F8
	0x01E2499C TBZ X0, 0x0, 0x1E249F8
	0x01E249A0 CBZ X20, 0x1E24BC4
	0x01E249A4 LDR W10, [X20 + 0x1C]
	0x01E249A8 LDR X1, [X19 + 0x20]
	0x01E249AC LDR X8, [X20 + 0x10]
	0x01E249B0 LDR X9, [X22]
	0x01E249B4 ADD W10, W10, 0x1
	0x01E249B8 STR W10, [X20 + 0x1C]
	0x01E249BC CBZ X8, 0x1E24BC4
	0x01E249C0 LDRSW X10, [X20 + 0x18]
	0x01E249C4 LDR W11, [X8 + 0x18]
	0x01E249C8 CMP W10, W11
	0x01E249CC B.CS 0x1E249E4
	0x01E249D0 ADD W9, W10, 0x1
	0x01E249D4 ADD X8, X8, X10, 0x3, LSL
	0x01E249D8 STR W9, [X20 + 0x18]
	0x01E249DC STR X1, [X8 + 0x20]
	0x01E249E0 B 0x1E249F8
	0x01E249E4 LDR X8, [X9 + 0x20]
	0x01E249E8 MOV X0, X20
	0x01E249EC LDR X8, [X8 + 0xC0]
	0x01E249F0 LDR X2, [X8 + 0x70]
	0x01E249F4 BL 0x301BF90
	0x01E249F8 LDR X0, [X19 + 0x28]
	0x01E249FC CBZ X0, 0x1E24AF0
	0x01E24A00 ADRP X8, 0x22D6000
	0x01E24A04 LDR X8, [X8 + 0x968]
	0x01E24A08 ADRP X25, 0x22D6000
	0x01E24A0C ADRP X26, 0x22D6000
	0x01E24A10 ADRP X23, 0x22D6000
	0x01E24A14 LDR X1, [X8]
	0x01E24A18 LDR X25, [X25 + 0x948]
	0x01E24A1C LDR X26, [X26 + 0x960]
	0x01E24A20 LDR X23, [X23 + 0x940]
	0x01E24A24 ADD X8, X31, 0x8
	0x01E24A28 BL 0x301CB58
	0x01E24A2C LDUR V0, [X31 + 0x8]
	0x01E24A30 LDR X8, [X31 + 0x18]
	0x01E24A34 STR V0, [X31 + 0x2]
	0x01E24A38 STR X8, [X31 + 0x30]
	0x01E24A3C LDR X1, [X25]
	0x01E24A40 ADD X0, X31, 0x20
	0x01E24A44 BL 0x2BC4350
	0x01E24A48 TBZ X0, 0x0, 0x1E24AE4
	0x01E24A4C LDR X0, [X24]
	0x01E24A50 LDR X21, [X31 + 0x30]
	0x01E24A54 LDR W8, [X0 + 0xE0]
	0x01E24A58 CBNZ W8, 0x1E24A60
	0x01E24A5C BL 0x1C16DFC
	0x01E24A60 MOV X0, X21
	0x01E24A64 MOV X1, X31
	0x01E24A68 MOV X2, X31
	0x01E24A6C BL 0x3C354F8
	0x01E24A70 TBZ X0, 0x0, 0x1E24A3C
	0x01E24A74 CBZ X20, 0x1E24BC8
	0x01E24A78 LDR X2, [X26]
	0x01E24A7C MOV X0, X20
	0x01E24A80 MOV X1, X21
	0x01E24A84 BL 0x301C318
	0x01E24A88 TBNZ X0, 0x0, 0x1E24A3C
	0x01E24A8C LDR W10, [X20 + 0x1C]
	0x01E24A90 LDR X8, [X20 + 0x10]
	0x01E24A94 LDR X9, [X22]
	0x01E24A98 ADD W10, W10, 0x1
	0x01E24A9C STR W10, [X20 + 0x1C]
	0x01E24AA0 CBZ X8, 0x1E24BCC
	0x01E24AA4 LDRSW X10, [X20 + 0x18]
	0x01E24AA8 LDR W11, [X8 + 0x18]
	0x01E24AAC CMP W10, W11
	0x01E24AB0 B.CS 0x1E24AC8
	0x01E24AB4 ADD W9, W10, 0x1
	0x01E24AB8 ADD X8, X8, X10, 0x3, LSL
	0x01E24ABC STR W9, [X20 + 0x18]
	0x01E24AC0 STR X21, [X8 + 0x20]
	0x01E24AC4 B 0x1E24A3C
	0x01E24AC8 LDR X8, [X9 + 0x20]
	0x01E24ACC LDR X8, [X8 + 0xC0]
	0x01E24AD0 LDR X2, [X8 + 0x70]
	0x01E24AD4 MOV X0, X20
	0x01E24AD8 MOV X1, X21
	0x01E24ADC BL 0x301BF90
	0x01E24AE0 B 0x1E24A3C
	0x01E24AE4 LDR X1, [X23]
	0x01E24AE8 ADD X0, X31, 0x20
	0x01E24AEC BL 0x2BC434C
	0x01E24AF0 CBZ X20, 0x1E24BC4
	0x01E24AF4 LDR X8, [X19 + 0x120]
	0x01E24AF8 CBZ X8, 0x1E24BC4
	0x01E24AFC LDR W9, [X20 + 0x18]
	0x01E24B00 LDR W8, [X8 + 0x18]
	0x01E24B04 CMP W9, W8
	0x01E24B08 B.NE 0x1E24B98
	0x01E24B0C CMP W9, 0x1
	0x01E24B10 B.LT 0x1E24BA0
	0x01E24B14 ADRP X25, 0x22D6000
	0x01E24B18 ADRP X26, 0x22D6000
	0x01E24B1C LDR X25, [X25 + 0x8C0]
	0x01E24B20 LDR X26, [X26 + 0x8C8]
	0x01E24B24 MOV W21, W31
	0x01E24B28 LDR X2, [X25]
	0x01E24B2C MOV X0, X20
	0x01E24B30 MOV W1, W21
	0x01E24B34 BL 0x301BCCC
	0x01E24B38 LDR X8, [X19 + 0x120]
	0x01E24B3C CBZ X8, 0x1E24BC4
	0x01E24B40 LDR X2, [X26]
	0x01E24B44 MOV X22, X0
	0x01E24B48 MOV X0, X8
	0x01E24B4C MOV W1, W21
	0x01E24B50 BL 0x301BCCC
	0x01E24B54 CBZ X0, 0x1E24BC4
	0x01E24B58 LDR X8, [X24]
	0x01E24B5C LDR X23, [X0 + 0x10]
	0x01E24B60 LDR W9, [X8 + 0xE0]
	0x01E24B64 CBNZ W9, 0x1E24B70
	0x01E24B68 MOV X0, X8
	0x01E24B6C BL 0x1C16DFC
	0x01E24B70 MOV X0, X22
	0x01E24B74 MOV X1, X23
	0x01E24B78 MOV X2, X31
	0x01E24B7C BL 0x3C354F8
	0x01E24B80 TBNZ X0, 0x0, 0x1E24BA4
	0x01E24B84 LDR W8, [X20 + 0x18]
	0x01E24B88 ADD W21, W21, 0x1
	0x01E24B8C CMP W21, W8
	0x01E24B90 B.LT 0x1E24B28
	0x01E24B94 B 0x1E24BA4
	0x01E24B98 MOVZ W0, 0x1
	0x01E24B9C B 0x1E24BA4
	0x01E24BA0 MOV W0, W31
	0x01E24BA4 LDP X20, X19, [X31 + 0x80]
	0x01E24BA8 LDP X22, X21, [X31 + 0x70]
	0x01E24BAC LDP X24, X23, [X31 + 0x60]
	0x01E24BB0 LDP X26, X25, [X31 + 0x50]
	0x01E24BB4 LDR X30, [X31 + 0x40]
	0x01E24BB8 AND W0, W0, 0x1
	0x01E24BBC ADD X31, X31, 0x90
	0x01E24BC0 RET
	0x01E24BC4 BL 0x1C16F20
	0x01E24BC8 BL 0x1C16F20
	0x01E24BCC BL 0x1C16F20
	0x01E24BD0 B 0x1E24BE8
	0x01E24BD4 B 0x1E24BE8
	0x01E24BD8 B 0x1E24BE8
	0x01E24BDC B 0x1E24BE8
	0x01E24BE0 B 0x1E24BE8
	0x01E24BE4 B 0x1E24BE8
	0x01E24BE8 MOV X21, X0
	0x01E24BEC CMP W1, 0x1
	0x01E24BF0 B.NE 0x1E24C1C
	0x01E24BF4 MOV X0, X21
	0x01E24BF8 BL 0x3EB1AD0
	0x01E24BFC LDR X22, [X0]
	0x01E24C00 BL 0x3EB1AE0
	0x01E24C04 LDR X1, [X23]
	0x01E24C08 ADD X0, X31, 0x20
	0x01E24C0C BL 0x2BC434C
	0x01E24C10 CBZ X22, 0x1E24AF0
	0x01E24C14 MOV X0, X22
	0x01E24C18 BL 0x1C16F18
	0x01E24C1C MOV X22, X31
	0x01E24C20 B 0x1E24C28
	0x01E24C24 MOV X21, X0
	0x01E24C28 LDR X1, [X23]
	0x01E24C2C ADD X0, X31, 0x20
	0x01E24C30 BL 0x2BC434C
	0x01E24C34 CBNZ X22, 0x1E24C40
	0x01E24C38 MOV X0, X21
	0x01E24C3C BL 0x1D2C690

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x25B5000
	014 Move W8, [X20+3651]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {52}
	020 Move X0, 0x22D7000
	021 Move X0, [X0+2208]
	022 Call 0x1C17CF4
	023 Move X0, 0x22D7000
	024 Move X0, [X0+2216]
	025 Call 0x1C17CF4
	026 Move X0, 0x22D7000
	027 Move X0, [X0+2224]
	028 Call 0x1C17CF4
	029 Move X0, 0x22D7000
	030 Move X0, [X0+2232]
	031 Call 0x1C17CF4
	032 Move X0, 0x22D7000
	033 Move X0, [X0+2240]
	034 Call 0x1C17CF4
	035 Move X0, 0x22D7000
	036 Move X0, [X0+2248]
	037 Call 0x1C17CF4
	038 Move X0, 0x22D0000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0x22D7000
	042 Move X0, [X0+2256]
	043 Call 0x1C17CF4
	044 Move X0, 0x22D7000
	045 Move X0, [X0+2264]
	046 Call 0x1C17CF4
	047 Move X0, 0x22D7000
	048 Move X0, [X0+2272]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+3651], W8
	052 Move X8, [X19+288]
	053 Compare X8, 0
	054 JumpIfEqual {214}
	055 Move W2, [X8+24]
	056 Move W9, [X8+28]
	057 Move X24, 0x22D0000
	058 Move X24, [X24+1432]
	059 Add W9, W9, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move [X8+24], W31
	062 Move [X8+28], W9
	063 Move X0, [X8+16]
	064 Move W1, W31
	065 Move X3, X31
	066 Call Array.Clear, X0, X1, X2
	067 Move X0, [X24]
	068 Move X20, [X19+32]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X20
	074 Move X1, X31
	075 Move X2, X31
	076 Call Object.op_Inequality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {84}
	081 Move X1, [X19+32]
	082 Move X0, X19
	083 Call DynamicBone.AppendParticleTree, X0, X1
	084 Move X8, [X19+40]
	085 Compare X8, 0
	086 JumpIfEqual {153}
	087 Move X25, 0x22D7000
	088 Move X26, 0x22D7000
	089 Move X27, 0x22D7000
	090 Move X28, 0x22D7000
	091 Move X29, 0x22D7000
	092 Move X25, [X25+2272]
	093 Move X26, [X26+2240]
	094 Move X27, [X27+2256]
	095 Move X28, [X28+2264]
	096 Move X29, [X29+2216]
	097 Move W20, W31
	098 Move W8, [X8+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, [X25]
	101 Call 0x1C17F10
	102 Move X1, X31
	103 Move X21, X0
	104 Call Object..ctor, X0
	105 Move X0, [X19+40]
	106 Compare X0, 0
	107 JumpIfEqual {214}
	108 Move X2, [X26]
	109 Move W1, W20
	110 Call List`1<Object>.get_Item, X0, X1
	111 Compare X21, 0
	112 JumpIfEqual {214}
	113 Move [X21+16], X0
	114 Move X22, X0
	115 Move X0, [X24]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X0, X22
	121 Move X1, X31
	122 Move X2, X31
	123 Call Object.op_Equality, X0, X1
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {149}
	128 Move X0, [X27]
	129 Move X22, [X19+288]
	130 Call 0x1C17F10
	131 Move X2, [X28]
	132 Move X1, X21
	133 Move X3, X31
	134 Move X23, X0
	135 Call Predicate`1<Object>..ctor, X0, X1, X2
	136 Compare X22, 0
	137 JumpIfEqual {214}
	138 Move X2, [X29]
	139 Move X0, X22
	140 Move X1, X23
	141 Call List`1<Object>.Exists, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfEqual {149}
	146 Move X1, [X21+16]
	147 Move X0, X19
	148 Call DynamicBone.AppendParticleTree, X0, X1
	149 Move X8, [X19+40]
	150 Add W20, W20, 1
	151 Compare X8, 0
	152 JumpIfNotEqual {98}
	153 Move X0, X19
	154 Move X1, X31
	155 Call Component.get_transform, X0
	156 Compare X0, 0
	157 JumpIfEqual {214}
	158 Move X1, X31
	159 Call Transform.get_lossyScale, X0
	160 NotImplemented "Instruction FABS not yet implemented."
	161 Move X0, X19
	162 Move X1, X31
	163 Move [X19+264], S0
	164 Call Component.get_transform, X0
	165 Compare X0, 0
	166 JumpIfEqual {214}
	167 Move X1, X31
	168 Call Transform.get_position, X0
	169 Move [X19+252], S0
	170 Move [X19+260], S1
	171 Move [X19+260], S2
	172 Move X20, 0x25B5000
	173 Move W8, [X20+1923]
	174 Compare W8, 0
	175 JumpIfNotEqual {181}
	176 Move X0, 0x22D0000
	177 Move X0, [X0+1440]
	178 Call 0x1C17CF4
	179 Move W8, 1
	180 Move [X20+1923], W8
	181 Move X8, 0x22D0000
	182 Move X8, [X8+1440]
	183 Move X0, [X19+288]
	184 Move X8, [X8]
	185 Move X8, [X8+184]
	186 Move V0, [X8]
	187 Move V1, [X8+8]
	188 Move [X19+240], D0
	189 Move [X19+248], S1
	190 Compare X0, 0
	191 JumpIfEqual {214}
	192 Move X21, 0x22D7000
	193 Move X21, [X21+2248]
	194 Move W20, W31
	195 Move W8, [X0+24]
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X2, [X21]
	198 Move W1, W20
	199 Call List`1<Object>.get_Item, X0, X1
	200 Compare X0, 0
	201 JumpIfEqual {214}
	202 Move X2, [X0+16]
	203 Move X1, X0
	204 Move S0, W31
	205 Move TEMP, 0
	206 Not TEMP
	207 Move W3, TEMP
	208 Move X0, X19
	209 Call DynamicBone.AppendParticles, X0, X1, X2, X3, V0
	210 Move X0, [X19+288]
	211 Add W20, W20, 1
	212 Compare X0, 0
	213 JumpIfNotEqual {195}
	214 Call 0x1C17F20
	215 Move X0, X19
	216 Move X20, [X31+80]
	217 Move X19, [X31+88]
	218 Move X22, [X31+64]
	219 Move X21, [X31+72]
	220 Move X24, [X31+48]
	221 Move X23, [X31+56]
	222 Move X26, [X31+32]
	223 Move X25, [X31+40]
	224 Move X28, [X31+16]
	225 Move X27, [X31+24]
	226 Move X29, [X31+96]
	227 Move X30, [X31+104]
	228 Call DynamicBone.UpdateParameters, X0
	229 Return 

Method: System.Void AppendParticleTree(UnityEngine.Transform root)

Disassembly:
	0x01E260D8 FSUB S6, S11, S6
	0x00000000 INVALID
	0x01E260E0 FMUL S3, S3, S6
	0x01E260E4 FADD V2.2S, V9.2S, V2.2S
	0x01E260E8 FADD S3, S10, S3
	0x01E260EC FADD V2.2S, V5.2S, V2.2S
	0x01E260F0 FADD S3, S4, S3
	0x01E260F4 FADD V0.2S, V0.2S, V2.2S
	0x01E260F8 FADD S1, S1, S3
	0x01E260FC STR D0, [X0 + 0x40]
	0x01E26100 STR S1, [X0 + 0x48]
	0x01E26104 B 0x1E2612C
	0x01E26108 ADD X8, X0, 0x40
	0x01E2610C LDR W9, [X8 + 0x8]
	0x01E26110 LDR X10, [X8]
	0x01E26114 LDR W11, [X0 + 0x88]
	0x01E26118 LDR X12, [X0 + 0x80]
	0x01E2611C STR W9, [X0 + 0x54]
	0x01E26120 STUR X10, [X0 + 0x4C]
	0x01E26124 STR W11, [X8 + 0x8]
	0x01E26128 STR X12, [X8]
	0x01E2612C LDR X0, [X19 + 0x68]
	0x01E26130 ADD W20, W20, 0x1
	0x01E26134 CBNZ X0, 0x1E26060
	0x01E26138 BL 0x1C16F20
	0x01E2613C LDP X20, X19, [X31 + 0x80]
	0x01E26140 LDP X22, X21, [X31 + 0x70]
	0x01E26144 LDP X30, X23, [X31 + 0x60]
	0x01E26148 LDP D9, D8, [X31 + 0x50]
	0x01E2614C LDP D11, D10, [X31 + 0x40]
	0x01E26150 LDP D13, D12, [X31 + 0x30]
	0x01E26154 LDP D15, D14, [X31 + 0x20]
	0x01E26158 ADD X31, X31, 0x90
	0x01E2615C RET
	0x01E26160 SUB X31, X31, 0x100
	0x01E26164 STP D15, D14, [X31 + 0x60]
	0x01E26168 STP D13, D12, [X31 + 0x70]
	0x01E2616C STP D11, D10, [X31 + 0x80]
	0x01E26170 STP D9, D8, [X31 + 0x90]
	0x01E26174 STP X29, X30, [X31 + 0xA0]
	0x01E26178 STP X28, X27, [X31 + 0xB0]
	0x01E2617C STP X26, X25, [X31 + 0xC0]
	0x01E26180 STP X24, X23, [X31 + 0xD0]
	0x01E26184 STP X22, X21, [X31 + 0xE0]
	0x01E26188 STP X20, X19, [X31 + 0xF0]
	0x01E2618C ADRP X21, 0x25B2000
	0x01E26190 LDRB W8, [X21 + 0xE4F]
	0x01E26194 MOV X19, X1
	0x01E26198 MOV X20, X0
	0x01E2619C STR S0, [X31 + 0xC]
	0x01E261A0 TBNZ X8, 0x0, 0x1E261DC
	0x01E261A4 ADRP X0, 0x22D4000
	0x01E261A8 LDR X0, [X0 + 0x908]
	0x01E261AC BL 0x1C16CF4
	0x01E261B0 ADRP X0, 0x22D4000
	0x01E261B4 LDR X0, [X0 + 0x910]
	0x01E261B8 BL 0x1C16CF4
	0x01E261BC ADRP X0, 0x22D4000
	0x01E261C0 LDR X0, [X0 + 0x918]
	0x01E261C4 BL 0x1C16CF4
	0x01E261C8 ADRP X0, 0x22D4000
	0x01E261CC LDR X0, [X0 + 0x920]
	0x01E261D0 BL 0x1C16CF4
	0x01E261D4 MOVZ W8, 0x1
	0x01E261D8 STRB W8, [X21 + 0xE4F]
	0x01E261DC MOVI V0.2D, 0x0
	0x01E261E0 STP V0, V0, [X31 + 0x40]
	0x01E261E4 STP V0, V0, [X31 + 0x20]
	0x01E261E8 CBZ X19, 0x1E267A8
	0x01E261EC LDR X0, [X19 + 0x68]
	0x01E261F0 CBZ X0, 0x1E267A8
	0x01E261F4 ADRP X27, 0x22D4000
	0x01E261F8 ADRP X22, 0x22D4000
	0x01E261FC ADRP X24, 0x22CD000
	0x01E26200 LDR X27, [X27 + 0x920]
	0x01E26204 LDR X22, [X22 + 0x918]
	0x01E26208 LDR X24, [X24 + 0x5A8]
	0x01E2620C ADRP X23, 0x25B2000
	0x01E26210 FMOV S15, 1
	0x01E26214 MOVZ W21, 0x1
	0x01E26218 LDR W8, [X0 + 0x18]
	0x01E2621C CMP W21, W8

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+144], X22
	004 Move [X31+152], X21
	005 Move [X31+160], X20
	006 Move [X31+168], X19
	007 Move X21, 0x25B3000
	008 Move X22, 0x22CE000
	009 Move W8, [X21+3652]
	010 Move X22, [X22+1432]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x22D5000
	018 Move X0, [X0+2416]
	019 Call 0x1C17CF4
	020 Move X0, 0x22CE000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x22D5000
	024 Move X0, [X0+2424]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3652], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {92}
	041 Move X8, 0x22D5000
	042 Move X8, [X8+2424]
	043 Move X0, [X8]
	044 Call 0x1C17F10
	045 Move X21, X0
	046 Call ParticleTree..ctor, X0
	047 Compare X21, 0
	048 JumpIfEqual {99}
	049 Move [X21+16], X20
	050 Compare X20, 0
	051 JumpIfEqual {99}
	052 Add X8, X31, 0
	053 Move X0, X20
	054 Move X1, X31
	055 Call Transform.get_worldToLocalMatrix, X0
	056 Move V1, [X31+32]
	057 Move V0, [X31+48]
	058 Move V3, [X31]
	059 Move V2, [X31+16]
	060 Move [X31+96], V1
	061 Move [X31+104], V0
	062 Move [X31+64], V3
	063 Move [X31+72], V2
	064 Move [X21+84], V0
	065 Move [X21+68], V1
	066 Move [X21+52], V2
	067 Move [X21+36], V3
	068 Move X0, [X19+288]
	069 Compare X0, 0
	070 JumpIfEqual {99}
	071 Move X9, 0x22D5000
	072 Move X9, [X9+2416]
	073 Move W10, [X0+28]
	074 Move X8, [X0+16]
	075 Move X9, [X9]
	076 Add W10, W10, 1
	077 Move [X0+28], W10
	078 Compare X8, 0
	079 JumpIfEqual {99}
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Move W11, [X8+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add W9, W10, 1
	084 Add X8, X8, X10
	085 Move [X0+24], W9
	086 Move [X8+32], X21
	087 Move X8, [X9+32]
	088 Move X1, X21
	089 Move X8, [X8+192]
	090 Move X2, [X8+112]
	091 Call List`1<Object>.AddWithResize, X0, X1
	092 Move X20, [X31+160]
	093 Move X19, [X31+168]
	094 Move X22, [X31+144]
	095 Move X21, [X31+152]
	096 Move X30, [X31+128]
	097 Add X31, X31, 176
	098 Return 
	099 Call 0x1C17F20

Method: System.Void AppendParticles(DynamicBone/ParticleTree pt, UnityEngine.Transform b, System.Int32 parentIndex, System.Single boneLength)

Disassembly:
	0x01E26228 MOV W1, W21
	0x01E2622C BL 0x301BCCC
	0x01E26230 CBZ X0, 0x1E267A8
	0x01E26234 MOV X25, X0
	0x01E26238 LDR X0, [X19 + 0x68]
	0x01E2623C CBZ X0, 0x1E267A8
	0x01E26240 LDR W1, [X25 + 0x18]
	0x01E26244 LDR X2, [X27]
	0x01E26248 BL 0x301BCCC
	0x01E2624C CBZ X0, 0x1E267A8
	0x01E26250 LDRB W8, [X25 + 0x3D]
	0x01E26254 MOV X26, X0
	0x01E26258 CBZ W8, 0x1E262AC
	0x01E2625C LDR V8, [X26 + 0x80]
	0x01E26260 LDR V9, [X26 + 0x88]
	0x01E26264 LDR V10, [X25 + 0x80]
	0x01E26268 LDRB W8, [X23 + 0x784]
	0x01E2626C LDR V11, [X25 + 0x88]
	0x01E26270 CBNZ W8, 0x1E26284
	0x01E26274 MOV X0, X24
	0x01E26278 BL 0x1C16CF4
	0x01E2627C MOVZ W8, 0x1
	0x01E26280 STRB W8, [X23 + 0x784]
	0x01E26284 LDR X0, [X24]
	0x01E26288 LDR W8, [X0 + 0xE0]
	0x01E2628C CBNZ W8, 0x1E26294
	0x01E26290 BL 0x1C16DFC
	0x01E26294 FSUB V0.2S, V8.2S, V10.2S
	0x01E26298 FSUB S2, S9, S11
	0x00000000 INVALID
	0x01E262A0 FADDP S1, V0.2S
	0x01E262A4 FMUL S0, S2, S2
	0x01E262A8 B 0x1E26304
	0x01E262AC LDP S0, S1, [X25 + 0x58]
	0x01E262B0 LDR V2, [X25 + 0x60]
	0x01E262B4 ADD X0, X26, 0x98
	0x01E262B8 MOV X1, X31
	0x01E262BC BL 0x3C282D0
	0x01E262C0 LDRB W8, [X23 + 0x784]
	0x01E262C4 MOV V9.16B, V0.16B
	0x01E262C8 MOV V10.16B, V1.16B
	0x01E262CC MOV V11.16B, V2.16B
	0x01E262D0 CBNZ W8, 0x1E262E4
	0x01E262D4 MOV X0, X24
	0x01E262D8 BL 0x1C16CF4
	0x01E262DC MOVZ W8, 0x1
	0x01E262E0 STRB W8, [X23 + 0x784]
	0x01E262E4 LDR X0, [X24]
	0x01E262E8 LDR W8, [X0 + 0xE0]
	0x01E262EC CBNZ W8, 0x1E262F4
	0x01E262F0 BL 0x1C16DFC
	0x01E262F4 FMUL S0, S9, S9
	0x01E262F8 FMUL S1, S10, S10
	0x01E262FC FADD S0, S0, S1
	0x01E26300 FMUL S1, S11, S11
	0x01E26304 LDR V2, [X20 + 0x110]
	0x01E26308 FADD S0, S1, S0
	0x01E2630C LDR V1, [X25 + 0x28]
	0x01E26310 FSQRT S14, S0
	0x01E26314 FMIN S3, S2, S15
	0x01E26318 FCMP S2, 0x0
	0x01E2631C FMOV S2, W31
	0x01E26320 FCSEL S2, S3, S2, PL
	0x01E26324 FMOV S3, -1
	0x01E26328 FADD S1, S1, S3
	0x01E2632C FMUL S1, S1, S2
	0x01E26330 FADD S10, S1, S15
	0x01E26334 FCMP S10, 0x0
	0x01E26338 B.GT 0x1E26348
	0x01E2633C LDR V0, [X25 + 0x24]
	0x01E26340 FCMP S0, 0x0
	0x01E26344 B.LE 0x1E26494
	0x01E26348 LDUR V0, [X26 + 0xC8]
	0x01E2634C LDUR V1, [X26 + 0xB8]
	0x01E26350 LDUR V2, [X26 + 0xA8]
	0x01E26354 LDUR V3, [X26 + 0x98]
	0x01E26358 ADD X0, X31, 0x20
	0x01E2635C STP V1, V0, [X31 + 0x40]
	0x01E26360 MOVZ W1, 0x3
	0x01E26364 STP V3, V2, [X31 + 0x20]
	0x01E26368 LDP S0, S1, [X26 + 0x40]
	0x01E2636C LDR V2, [X26 + 0x48]
	0x01E26370 FMOV S3, W31
	0x01E26374 MOV X2, X31
	0x01E26378 BL 0x3C28180
	0x01E2637C LDRB W8, [X25 + 0x3D]
	0x01E26380 MOVZ W9, 0x58
	0x01E26384 MOVZ W10, 0x5C
	0x01E26388 MOVZ W11, 0x60
	0x01E2638C CMP W8, 0x0
	0x01E26390 MOVZ W8, 0x8C
	0x01E26394 CSEL X8, X9, X8, EQ
	0x01E26398 MOVZ W9, 0x90
	0x01E2639C CSEL X9, X10, X9, EQ
	0x01E263A0 MOVZ W10, 0x94
	0x01E263A4 CSEL X10, X11, X10, EQ
	0x01E263A8 LDR V2, [X25, X10, LSL]
	0x01E263AC LDR V1, [X25, X9, LSL]
	0x01E263B0 LDR V0, [X25, X8, LSL]
	0x01E263B4 ADD X0, X31, 0x20
	0x01E263B8 MOV X1, X31
	0x01E263BC BL 0x3C28278
	0x01E263C0 MOV V9.16B, V2.16B
	0x01E263C4 LDR V6, [X25 + 0x40]
	0x01E263C8 LDR V2, [X25 + 0x48]
	0x01E263CC LDR V3, [X25 + 0x24]
	0x01E263D0 LDR V5, [X31 + 0xC]
	0x01E263D4 FCMP S10, 0x0
	0x01E263D8 MOV V0.S[1], V1.S[0]
	0x01E263DC FSUB V1.2S, V0.2S, V6.2S
	0x01E263E0 FSUB S4, S9, S2
	0x01E263E4 FMUL S3, S3, S5
	0x00000000 INVALID
	0x01E263EC FMUL S3, S4, S3
	0x01E263F0 FADD V11.2S, V6.2S, V1.2S
	0x01E263F4 FADD S8, S2, S3
	0x01E263F8 STR D11, [X25 + 0x40]
	0x01E263FC STR S8, [X25 + 0x48]
	0x01E26400 B.LE 0x1E26494
	0x01E26404 LDRB W8, [X23 + 0x784]
	0x01E26408 CBNZ W8, 0x1E26424
	0x01E2640C MOV X0, X24
	0x01E26410 STR V0, [X31 + 0x1]
	0x01E26414 BL 0x1C16CF4
	0x01E26418 LDR V0, [X31 + 0x1]
	0x01E2641C MOVZ W8, 0x1
	0x01E26420 STRB W8, [X23 + 0x784]
	0x01E26424 LDR X0, [X24]
	0x01E26428 LDR W8, [X0 + 0xE0]
	0x01E2642C CBNZ W8, 0x1E2643C
	0x01E26430 STR V0, [X31 + 0x1]
	0x01E26434 BL 0x1C16DFC
	0x01E26438 LDR V0, [X31 + 0x1]
	0x01E2643C FSUB V0.2S, V0.2S, V11.2S
	0x01E26440 FSUB S1, S9, S8
	0x01E26444 FSUB S2, S15, S10
	0x00000000 INVALID
	0x01E2644C FMUL S4, S1, S1
	0x01E26450 FMUL S5, S14, S2
	0x01E26454 FADDP S2, V3.2S
	0x01E26458 FADD S2, S4, S2
	0x01E2645C FSQRT S2, S2
	0x01E26460 FADD S3, S5, S5
	0x01E26464 FCMP S2, S3
	0x01E26468 B.LE 0x1E26494
	0x01E2646C LDR V4, [X25 + 0x40]
	0x01E26470 LDR V5, [X25 + 0x48]
	0x01E26474 FSUB S3, S2, S3
	0x01E26478 FDIV S2, S3, S2
	0x00000000 INVALID
	0x01E26480 FMUL S1, S1, S2
	0x01E26484 FADD V0.2S, V0.2S, V4.2S
	0x01E26488 FADD S1, S1, S5
	0x01E2648C STR D0, [X25 + 0x40]
	0x01E26490 STR S1, [X25 + 0x48]
	0x01E26494 LDR X0, [X20 + 0x130]
	0x01E26498 STR W21, [X31 + 0x10]
	0x01E2649C MOV X21, X19
	0x01E264A0 MOV X19, X23
	0x01E264A4 MOV X23, X27
	0x01E264A8 CBZ X0, 0x1E26510
	0x01E264AC LDR V0, [X25 + 0x34]
	0x01E264B0 LDR V1, [X20 + 0x108]
	0x01E264B4 MOV W27, W31
	0x01E264B8 ADD X28, X25, 0x40
	0x01E264BC FMUL S9, S0, S1
	0x01E264C0 LDR W8, [X0 + 0x18]
	0x01E264C4 CMP W27, W8
	0x01E264C8 B.GE 0x1E26510
	0x01E264CC LDR X2, [X22]
	0x01E264D0 MOV W1, W27
	0x01E264D4 BL 0x301BCCC
	0x01E264D8 CBZ X0, 0x1E267A8
	0x01E264DC LDR X8, [X0]
	0x01E264E0 LDRB W29, [X25 + 0x3C]
	0x01E264E4 MOV X1, X28
	0x01E264E8 MOV V0.16B, V9.16B
	0x01E264EC LDP X9, X2, [X8 + 0x198]
	0x01E264F0 BLR X9
	0x01E264F4 AND W8, W0, 0x1
	0x01E264F8 ORR W8, W29, W8, 0x0
	0x01E264FC STRB W8, [X25 + 0x3C]
	0x01E26500 LDR X0, [X20 + 0x130]
	0x01E26504 ADD W27, W27, 0x1
	0x01E26508 CBNZ X0, 0x1E264C0
	0x01E2650C B 0x1E267A8
	0x01E26510 LDR W8, [X20 + 0xD8]
	0x01E26514 CBZ W8, 0x1E265B8
	0x01E26518 ADD X0, X26, 0x98
	0x01E2651C SUB W1, W8, 0x1
	0x01E26520 MOV X2, X31
	0x01E26524 BL 0x3C27C24
	0x01E26528 ADRP X8, 0x25B2000
	0x01E2652C LDRB W8, [X8 + 0xE59]
	0x01E26530 MOV V9.16B, V0.16B
	0x01E26534 MOV V10.16B, V1.16B
	0x01E26538 MOV V11.16B, V2.16B
	0x01E2653C MOV V12.16B, V3.16B
	0x01E26540 MOV X27, X23
	0x01E26544 CBNZ W8, 0x1E2655C
	0x01E26548 MOV X0, X24
	0x01E2654C BL 0x1C16CF4
	0x01E26550 MOVZ W8, 0x1
	0x01E26554 ADRP X9, 0x25B2000
	0x01E26558 STRB W8, [X9 + 0xE59]
	0x01E2655C LDR X0, [X24]
	0x01E26560 MOV X23, X19
	0x01E26564 LDR W8, [X0 + 0xE0]
	0x01E26568 CBNZ W8, 0x1E26570
	0x01E2656C BL 0x1C16DFC
	0x01E26570 FMUL S2, S9, S9
	0x01E26574 FMUL S3, S10, S10
	0x01E26578 ADRP X8, 0xFFFFFFFFFECC4000
	0x01E2657C FMUL S0, S12, S12
	0x01E26580 FMUL S1, S11, S11
	0x01E26584 FADD S2, S2, S3
	0x01E26588 LDR V12, [X8 + 0x17C]
	0x01E2658C FADD S1, S1, S2
	0x01E26590 FADD S0, S0, S1
	0x01E26594 FSQRT S0, S0
	0x01E26598 FCMP S0, S12
	0x01E2659C MOV X19, X21
	0x01E265A0 B.LE 0x1E265D4
	0x01E265A4 LDR W21, [X31 + 0x10]
	0x01E265A8 FDIV S15, S9, S0
	0x01E265AC FDIV S8, S10, S0
	0x01E265B0 FDIV S13, S11, S0
	0x01E265B4 B 0x1E26614
	0x01E265B8 LDP S8, S9, [X25 + 0x40]
	0x01E265BC LDR V10, [X25 + 0x48]
	0x01E265C0 MOV X27, X23
	0x01E265C4 MOV X23, X19
	0x01E265C8 MOV X19, X21
	0x01E265CC LDR W21, [X31 + 0x10]
	0x01E265D0 B 0x1E26710
	0x01E265D4 ADRP X8, 0x25B2000
	0x01E265D8 LDRB W8, [X8 + 0xE5A]
	0x01E265DC LDR W21, [X31 + 0x10]
	0x01E265E0 CBNZ W8, 0x1E265FC
	0x01E265E4 ADRP X0, 0x22D4000
	0x01E265E8 LDR X0, [X0 + 0x9A0]
	0x01E265EC BL 0x1C16CF4
	0x01E265F0 MOVZ W8, 0x1
	0x01E265F4 ADRP X9, 0x25B2000
	0x01E265F8 STRB W8, [X9 + 0xE5A]
	0x01E265FC ADRP X8, 0x22D4000
	0x01E26600 LDR X8, [X8 + 0x9A0]
	0x01E26604 LDR X8, [X8]
	0x01E26608 LDR X8, [X8 + 0xB8]
	0x01E2660C LDP S15, S8, [X8]
	0x01E26610 LDR V13, [X8 + 0x8]
	0x01E26614 ADRP X8, 0x25B2000
	0x01E26618 LDP S9, S10, [X26 + 0x40]
	0x01E2661C LDRB W8, [X8 + 0x785]
	0x01E26620 LDR V11, [X26 + 0x48]
	0x01E26624 CBNZ W8, 0x1E2663C
	0x01E26628 MOV X0, X24
	0x01E2662C BL 0x1C16CF4
	0x01E26630 MOVZ W8, 0x1
	0x01E26634 ADRP X9, 0x25B2000
	0x01E26638 STRB W8, [X9 + 0x785]
	0x01E2663C LDR X0, [X24]
	0x01E26640 LDR W8, [X0 + 0xE0]
	0x01E26644 CBNZ W8, 0x1E2664C
	0x01E26648 BL 0x1C16DFC
	0x01E2664C FMUL S0, S15, S15
	0x01E26650 FMUL S1, S8, S8
	0x01E26654 FADD S0, S0, S1
	0x01E26658 FMUL S1, S13, S13
	0x01E2665C FADD S0, S1, S0
	0x01E26660 FSQRT S2, S0
	0x01E26664 FCMP S2, S12
	0x01E26668 B.LE 0x1E2667C
	0x01E2666C FDIV S0, S15, S2
	0x01E26670 FDIV S1, S8, S2
	0x01E26674 FDIV S2, S13, S2
	0x01E26678 B 0x1E266B8
	0x01E2667C ADRP X8, 0x25B2000
	0x01E26680 LDRB W8, [X8 + 0x783]
	0x01E26684 CBNZ W8, 0x1E266A0
	0x01E26688 ADRP X0, 0x22CD000
	0x01E2668C LDR X0, [X0 + 0x5A0]
	0x01E26690 BL 0x1C16CF4
	0x01E26694 MOVZ W8, 0x1
	0x01E26698 ADRP X9, 0x25B2000
	0x01E2669C STRB W8, [X9 + 0x783]
	0x01E266A0 ADRP X8, 0x22CD000
	0x01E266A4 LDR X8, [X8 + 0x5A0]
	0x01E266A8 LDR X8, [X8]
	0x01E266AC LDR X8, [X8 + 0xB8]
	0x01E266B0 LDP S0, S1, [X8]
	0x01E266B4 LDR V2, [X8 + 0x8]
	0x01E266B8 LDP S6, S7, [X25 + 0x40]
	0x01E266BC LDR V16, [X25 + 0x48]
	0x01E266C0 FMUL S3, S9, S0
	0x01E266C4 FMUL S4, S10, S1
	0x01E266C8 FMUL S5, S11, S2
	0x01E266CC FADD S3, S3, S4
	0x01E266D0 FADD S3, S5, S3
	0x01E266D4 FMUL S4, S0, S6
	0x01E266D8 FMUL S5, S1, S7
	0x01E266DC FADD S4, S4, S5
	0x01E266E0 FMUL S5, S2, S16
	0x01E266E4 FADD S4, S5, S4
	0x01E266E8 FSUB S3, S4, S3
	0x01E266EC FMUL S0, S0, S3
	0x01E266F0 FMUL S1, S1, S3
	0x01E266F4 FMUL S2, S2, S3
	0x01E266F8 FMOV S15, 1
	0x01E266FC FSUB S8, S6, S0
	0x01E26700 FSUB S9, S7, S1
	0x01E26704 FSUB S10, S16, S2
	0x01E26708 STP S8, S9, [X25 + 0x40]
	0x01E2670C STR S10, [X25 + 0x48]
	0x01E26710 LDP S11, S12, [X26 + 0x40]
	0x01E26714 LDRB W8, [X23 + 0x784]
	0x01E26718 LDR V13, [X26 + 0x48]
	0x01E2671C CBNZ W8, 0x1E26730
	0x01E26720 MOV X0, X24
	0x01E26724 BL 0x1C16CF4
	0x01E26728 MOVZ W8, 0x1
	0x01E2672C STRB W8, [X23 + 0x784]
	0x01E26730 LDR X0, [X24]
	0x01E26734 LDR W8, [X0 + 0xE0]
	0x01E26738 CBNZ W8, 0x1E26740
	0x01E2673C BL 0x1C16DFC
	0x01E26740 FSUB S0, S11, S8
	0x01E26744 FSUB S1, S12, S9
	0x01E26748 FSUB S2, S13, S10
	0x01E2674C FMUL S3, S0, S0
	0x01E26750 FMUL S4, S1, S1
	0x01E26754 FADD S3, S3, S4
	0x01E26758 FMUL S4, S2, S2
	0x01E2675C FADD S3, S3, S4
	0x01E26760 FSQRT S3, S3
	0x01E26764 FCMP S3, 0x0
	0x01E26768 B.LE 0x1E2679C
	0x01E2676C LDP S4, S5, [X25 + 0x40]
	0x01E26770 LDR V6, [X25 + 0x48]
	0x01E26774 FSUB S7, S3, S14
	0x01E26778 FDIV S3, S7, S3
	0x01E2677C FMUL S0, S0, S3
	0x01E26780 FMUL S1, S1, S3
	0x01E26784 FMUL S2, S2, S3
	0x01E26788 FADD S0, S0, S4
	0x01E2678C FADD S1, S1, S5
	0x01E26790 FADD S2, S2, S6
	0x01E26794 STP S0, S1, [X25 + 0x40]
	0x01E26798 STR S2, [X25 + 0x48]
	0x01E2679C LDR X0, [X19 + 0x68]
	0x01E267A0 ADD W21, W21, 0x1
	0x01E267A4 CBNZ X0, 0x1E26218
	0x01E267A8 BL 0x1C16F20
	0x01E267AC LDP X20, X19, [X31 + 0xF0]
	0x01E267B0 LDP X22, X21, [X31 + 0xE0]
	0x01E267B4 LDP X24, X23, [X31 + 0xD0]
	0x01E267B8 LDP X26, X25, [X31 + 0xC0]
	0x01E267BC LDP X28, X27, [X31 + 0xB0]
	0x01E267C0 LDP X29, X30, [X31 + 0xA0]
	0x01E267C4 LDP D9, D8, [X31 + 0x90]
	0x01E267C8 LDP D11, D10, [X31 + 0x80]
	0x01E267CC LDP D13, D12, [X31 + 0x70]
	0x01E267D0 LDP D15, D14, [X31 + 0x60]
	0x01E267D4 ADD X31, X31, 0x100
	0x01E267D8 RET
	0x01E267DC SUB X31, X31, 0x110
	0x01E267E0 STP D15, D14, [X31 + 0x70]
	0x01E267E4 STP D13, D12, [X31 + 0x80]
	0x01E267E8 STP D11, D10, [X31 + 0x90]
	0x01E267EC STP D9, D8, [X31 + 0xA0]
	0x01E267F0 STP X29, X30, [X31 + 0xB0]
	0x01E267F4 STP X28, X27, [X31 + 0xC0]
	0x01E267F8 STP X26, X25, [X31 + 0xD0]
	0x01E267FC STP X24, X23, [X31 + 0xE0]
	0x01E26800 STP X22, X21, [X31 + 0xF0]
	0x01E26804 STP X20, X19, [X31 + 0x100]
	0x01E26808 ADRP X21, 0x25B2000
	0x01E2680C LDRB W8, [X21 + 0xE51]
	0x01E26810 MOV X19, X1
	0x01E26814 MOV X20, X0
	0x01E26818 TBNZ X8, 0x0, 0x1E2683C
	0x01E2681C ADRP X0, 0x22D4000
	0x01E26820 LDR X0, [X0 + 0x908]
	0x01E26824 BL 0x1C16CF4
	0x01E26828 ADRP X0, 0x22D4000
	0x01E2682C LDR X0, [X0 + 0x920]
	0x01E26830 BL 0x1C16CF4
	0x01E26834 MOVZ W8, 0x1
	0x01E26838 STRB W8, [X21 + 0xE51]
	0x01E2683C MOVI V0.2D, 0x0
	0x01E26840 STP V0, V0, [X31 + 0x50]
	0x01E26844 STP V0, V0, [X31 + 0x30]
	0x01E26848 CBZ X19, 0x1E26B98
	0x01E2684C LDR X0, [X19 + 0x68]

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Move X22, 0x22CE000
	022 Move X24, 0x22D5000
	023 Move X25, 0x22CE000
	024 Move X8, -20168704
	025 Move X22, [X22+1432]
	026 Move X24, [X24+2400]
	027 Move X25, [X25+1440]
	028 Move V12, [X8+3872]
	029 Move V8, V0
	030 Move W29, W3
	031 Move X28, X2
	032 Move X19, X1
	033 Move X20, X0
	034 Move X26, 0x25B3000
	035 Move X8, 0x25B3000
	036 Move W8, [X8+3653]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {60}
	041 Move X0, 0x22D5000
	042 Move X0, [X0+2432]
	043 Call 0x1C17CF4
	044 Move X0, X24
	045 Call 0x1C17CF4
	046 Move X0, 0x22D5000
	047 Move X0, [X0+2312]
	048 Call 0x1C17CF4
	049 Move X0, 0x22D5000
	050 Move X0, [X0+2336]
	051 Call 0x1C17CF4
	052 Move X0, X22
	053 Call 0x1C17CF4
	054 Move X0, 0x22D5000
	055 Move X0, [X0+2440]
	056 Call 0x1C17CF4
	057 Move X8, 0x25B3000
	058 Move W9, 1
	059 Move [X8+3653], W9
	060 Move X8, 0x22D5000
	061 Move X8, [X8+2440]
	062 Move X0, [X8]
	063 Call 0x1C17F10
	064 Move X1, X31
	065 Move X27, X0
	066 Call Object..ctor, X0
	067 Compare X27, 0
	068 JumpIfEqual {465}
	069 Move [X27+16], X28
	070 Move X0, [X22]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X28
	076 Move X1, X31
	077 Move X2, X31
	078 Call Object.op_Inequality, X0, X1
	079 And W8, W0, 1
	080 Move X0, X28
	081 Move X1, X31
	082 Move X2, X31
	083 Move [X27+61], W8
	084 Move [X27+24], W29
	085 Call Object.op_Inequality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {120}
	090 Compare X28, 0
	091 JumpIfEqual {465}
	092 Move X0, X28
	093 Move X1, X31
	094 Call Transform.get_position, X0
	095 Move X0, X28
	096 Move X1, X31
	097 Move [X27+80], S1
	098 Move [X27+88], S2
	099 Move [X27+64], S0
	100 Move [X27+72], S1
	101 Move [X27+72], S2
	102 Move [X27+80], S0
	103 Call Transform.get_localPosition, X0
	104 Move X0, X28
	105 Move X1, X31
	106 Move [X27+100], S0
	107 Move [X27+108], S1
	108 Move [X27+108], S2
	109 Call Transform.get_localRotation, X0
	110 Move [X27+112], S0
	111 Move [X27+120], S1
	112 Move [X27+120], S2
	113 Move [X27+128], S3
	114 Move TEMP, X29
	115 And TEMP, TEMP, -2147483648
	116 Compare TEMP, -2147483648
	117 JumpIfEqual {202}
	118 Compare X19, 0
	119 JumpIfNotEqual {252}
	120 Compare X19, 0
	121 JumpIfEqual {465}
	122 Move X0, [X19+104]
	123 Compare X0, 0
	124 JumpIfEqual {465}
	125 Move X8, 0x22D5000
	126 Move X8, [X8+2336]
	127 Move W1, W29
	128 Move X2, [X8]
	129 Call List`1<Object>.get_Item, X0, X1
	130 Compare X0, 0
	131 JumpIfEqual {465}
	132 Move V0, [X20+152]
	133 Move X21, [X0+16]
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 Compare X21, 0
	136 JumpIfEqual {465}
	137 Move X0, X21
	138 Move X1, X31
	139 Call Transform.get_parent, X0
	140 Move X8, [X22]
	141 Move X23, X0
	142 Move W9, [X8+224]
	143 Compare W9, 0
	144 JumpIfNotEqual {147}
	145 Move X0, X8
	146 Call 0x1C17DFC
	147 Move X0, X23
	148 Move X1, X31
	149 Move X2, X31
	150 Call Object.op_Inequality, X0, X1
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {204}
	155 Move X0, X21
	156 Move X1, X31
	157 Call Transform.get_position, X0
	158 Compare X23, 0
	159 JumpIfEqual {465}
	160 Move X0, X23
	161 Move X1, X31
	162 Add S9, S2, S2
	163 Add S10, S1, S1
	164 Add S11, S0, S0
	165 Call Transform.get_position, X0
	166 Subtract S0, S11, S0
	167 Subtract S1, S10, S1
	168 Subtract S2, S9, S2
	169 Move X0, X21
	170 Move X1, X31
	171 Call Transform.InverseTransformPoint, X0, X1
	172 Move V3, [X20+152]
	173 Multiply S0, S0, S3
	174 Multiply S1, S1, S3
	175 Multiply S2, S2, S3
	176 Move X0, X20
	177 Move X1, X31
	178 Call Component.get_transform, X0
	179 Compare X0, 0
	180 JumpIfEqual {465}
	181 Move S1, [X20+160]
	182 Move S2, [X20+164]
	183 Move V0, [X20+156]
	184 Move X1, X31
	185 Call Transform.TransformDirection, X0, X1
	186 Compare X21, 0
	187 JumpIfEqual {465}
	188 Move X0, X21
	189 Move X1, X31
	190 Move V9, V0
	191 Move V10, V1
	192 Move V11, V2
	193 Call Transform.get_position, X0
	194 Add S0, S9, S0
	195 Add S1, S10, S1
	196 Add S2, S11, S2
	197 Move X0, X21
	198 Move X1, X31
	199 Call Transform.InverseTransformPoint, X0, X1
	200 Move [X27+88], S0
	201 Move [X27+96], S1
	202 Compare X19, 0
	203 JumpIfNotEqual {318}
	204 Move V0, [X20+152]
	205 Move [X27+92], W31
	206 Move S2, W31
	207 Move S1, W31
	208 Move [X27+88], S0
	209 Move X0, X21
	210 Move X1, X31
	211 Move [X27+96], S2
	212 Call Transform.TransformPoint, X0, X1
	213 Move [X27+80], S1
	214 Move [X27+88], S2
	215 Move [X27+64], S0
	216 Move [X27+72], S1
	217 Move [X27+72], S2
	218 Move [X27+80], S0
	219 Move W8, [X26+1923]
	220 Compare W8, 0
	221 JumpIfNotEqual {226}
	222 Move X0, X25
	223 Call 0x1C17CF4
	224 Move W8, 1
	225 Move [X26+1923], W8
	226 Move X8, [X25]
	227 Move X8, [X8+184]
	228 Move V0, [X8]
	229 Move V1, [X8+8]
	230 Move X8, 0x25B3000
	231 Move [X27+100], D0
	232 Move [X27+108], S1
	233 Move W8, [X8+1939]
	234 Compare W8, 0
	235 JumpIfNotEqual {242}
	236 Move X0, 0x22CF000
	237 Move X0, [X0+1448]
	238 Call 0x1C17CF4
	239 Move W8, 1
	240 Move X9, 0x25B3000
	241 Move [X9+1939], W8
	242 Move X8, 0x22CF000
	243 Move X8, [X8+1448]
	244 Move X8, [X8]
	245 Move X8, [X8+184]
	246 Move V0, [X8]
	247 Move [X27+7], V0
	248 Move TEMP, X29
	249 And TEMP, TEMP, -2147483648
	250 Compare TEMP, -2147483648
	251 JumpIfEqual {318}
	252 Move X0, [X19+104]
	253 Compare X0, 0
	254 JumpIfEqual {465}
	255 Move X8, 0x22D5000
	256 Move X8, [X8+2336]
	257 Move W1, W29
	258 Move X2, [X8]
	259 Call List`1<Object>.get_Item, X0, X1
	260 Compare X0, 0
	261 JumpIfEqual {465}
	262 Move X0, [X0+16]
	263 Compare X0, 0
	264 JumpIfEqual {465}
	265 Move X1, X31
	266 Call Transform.get_position, X0
	267 Move X8, 0x25B3000
	268 Move S13, [X27+64]
	269 Move S14, [X27+68]
	270 Move W8, [X8+1924]
	271 Move V15, [X27+72]
	272 Move V9, V0
	273 Move V10, V1
	274 Move V11, V2
	275 Compare W8, 0
	276 JumpIfNotEqual {283}
	277 Move X0, 0x22CE000
	278 Move X0, [X0+1448]
	279 Call 0x1C17CF4
	280 Move W8, 1
	281 Move X9, 0x25B3000
	282 Move [X9+1924], W8
	283 Move X8, 0x22CE000
	284 Move X8, [X8+1448]
	285 Move X0, [X8]
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1C17DFC
	290 Subtract S0, S9, S13
	291 Subtract S1, S10, S14
	292 Subtract S2, S11, S15
	293 Multiply S0, S0, S0
	294 Multiply S1, S1, S1
	295 Add S0, S0, S1
	296 Multiply S1, S2, S2
	297 Add S0, S0, S1
	298 NotImplemented "Instruction FSQRT not yet implemented."
	299 Add S8, S8, S0
	300 Move [X27+56], S8
	301 Move V0, [X19+100]
	302 Move X0, [X19+104]
	303 NotImplemented "Instruction FCMP not yet implemented."
	304 NotImplemented "Instruction FCSEL not yet implemented."
	305 Move [X19+100], S0
	306 Compare X0, 0
	307 JumpIfEqual {465}
	308 Move X8, 0x22D5000
	309 Move X8, [X8+2336]
	310 Move W1, W29
	311 Move X2, [X8]
	312 Call List`1<Object>.get_Item, X0, X1
	313 Compare X0, 0
	314 JumpIfEqual {465}
	315 Move W8, [X0+28]
	316 Add W8, W8, 1
	317 Move [X0+28], W8
	318 Move X0, [X19+104]
	319 Compare X0, 0
	320 JumpIfEqual {465}
	321 Move X9, 0x22D5000
	322 Move W29, [X0+24]
	323 Move W10, [X0+28]
	324 Move X8, [X0+16]
	325 Move X9, [X9+2432]
	326 Add W10, W10, 1
	327 Move X9, [X9]
	328 Move [X0+28], W10
	329 Compare X8, 0
	330 JumpIfEqual {465}
	331 Move W10, [X8+24]
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Move X9, W29
	334 Add W10, W29, 1
	335 Add X8, X8, X9
	336 Move [X0+24], W10
	337 Move [X8+32], X27
	338 Move X8, [X9+32]
	339 Move X1, X27
	340 Move X8, [X8+192]
	341 Move X2, [X8+112]
	342 Call List`1<Object>.AddWithResize, X0, X1
	343 Move X0, [X22]
	344 Move W8, [X0+224]
	345 Compare W8, 0
	346 JumpIfNotEqual {348}
	347 Call 0x1C17DFC
	348 Move X0, X28
	349 Move X1, X31
	350 Move X2, X31
	351 Call Object.op_Inequality, X0, X1
	352 Move TEMP, X0
	353 And TEMP, TEMP, 1
	354 Compare TEMP, 1
	355 JumpIfNotEqual {444}
	356 Compare X28, 0
	357 JumpIfEqual {465}
	358 Move X0, X28
	359 Move X1, X31
	360 Call Transform.get_childCount, X0
	361 NotImplemented "Instruction CMP not yet implemented."
	362 Move W21, W31
	363 Move X0, X28
	364 Move W1, W21
	365 Move X2, X31
	366 Call Transform.GetChild, X0, X1
	367 Move X8, [X20+208]
	368 Move X23, X0
	369 Compare X8, 0
	370 JumpIfEqual {403}
	371 Move X2, [X24]
	372 Move X0, X8
	373 Move X1, X23
	374 Call List`1<Object>.Contains, X0, X1
	375 Move TEMP, X0
	376 And TEMP, TEMP, 1
	377 Compare TEMP, 1
	378 JumpIfNotEqual {403}
	379 Move V0, [X20+152]
	380 NotImplemented "Instruction FCMP not yet implemented."
	381 Move V9, [X20+156]
	382 Move W8, [X26+1923]
	383 Move V10, [X20+160]
	384 Compare W8, 0
	385 JumpIfNotEqual {390}
	386 Move X0, X25
	387 Call 0x1C17CF4
	388 Move W8, 1
	389 Move [X26+1923], W8
	390 Move X8, [X25]
	391 Move X8, [X8+184]
	392 Move V0, [X8]
	393 NotImplemented "Instruction LDUR not yet implemented."
	394 Subtract S0, S9, S0
	395 Subtract V1, V10, V1
	396 Multiply S0, S0, S0
	397 NotImplemented "Instruction INVALID not yet implemented."
	398 Add S0, S0, S1
	399 Move S1, V1.S[1]
	400 Add S0, S1, S0
	401 NotImplemented "Instruction FCMP not yet implemented."
	402 Move X23, X31
	403 Move X0, X20
	404 Move X1, X19
	405 Move X2, X23
	406 Move W3, W29
	407 Move V0, V8
	408 Call DynamicBone.AppendParticles, X0, X1, X2, X3, V0
	409 Move X0, X28
	410 Move X1, X31
	411 Add W21, W21, 1
	412 Call Transform.get_childCount, X0
	413 NotImplemented "Instruction CMP not yet implemented."
	414 Move X0, X28
	415 Move X1, X31
	416 Call Transform.get_childCount, X0
	417 Compare W0, 0
	418 JumpIfNotEqual {444}
	419 Move V0, [X20+152]
	420 Move X28, X31
	421 NotImplemented "Instruction FCMP not yet implemented."
	422 Move V9, [X20+156]
	423 Move W8, [X26+1923]
	424 Move V10, [X20+160]
	425 Compare W8, 0
	426 JumpIfNotEqual {431}
	427 Move X0, X25
	428 Call 0x1C17CF4
	429 Move W8, 1
	430 Move [X26+1923], W8
	431 Move X8, [X25]
	432 Move X28, X31
	433 Move X8, [X8+184]
	434 Move V0, [X8]
	435 NotImplemented "Instruction LDUR not yet implemented."
	436 Subtract S0, S9, S0
	437 Subtract V1, V10, V1
	438 Multiply S0, S0, S0
	439 NotImplemented "Instruction INVALID not yet implemented."
	440 Add S0, S0, S1
	441 Move S1, V1.S[1]
	442 Add S0, S1, S0
	443 NotImplemented "Instruction FCMP not yet implemented."
	444 Move X20, [X31+144]
	445 Move X19, [X31+152]
	446 Move X22, [X31+128]
	447 Move X21, [X31+136]
	448 Move X24, [X31+112]
	449 Move X23, [X31+120]
	450 Move X26, [X31+96]
	451 Move X25, [X31+104]
	452 Move X28, [X31+80]
	453 Move X27, [X31+88]
	454 Move X29, [X31+64]
	455 Move X30, [X31+72]
	456 Move D9, [X31+48]
	457 Move D8, [X31+56]
	458 Move D11, [X31+32]
	459 Move D10, [X31+40]
	460 Move D13, [X31+16]
	461 Move D12, [X31+24]
	462 Move D15, [X31+160]
	463 Move D14, [X31+168]
	464 Return 
	465 Call 0x1C17F20

Method: System.Void UpdateParameters()

Disassembly:
	0x01E25C4C ADD W21, W21, 0x1
	0x01E25C50 FCMP S0, 0x0
	0x01E25C54 FMIN S0, S0, S9
	0x01E25C58 FCSEL S0, S0, S10, PL
	0x01E25C5C FCMP S1, 0x0
	0x01E25C60 FMIN S1, S1, S9
	0x01E25C64 FCSEL S1, S1, S10, PL
	0x01E25C68 STP S0, S1, [X22 + 0x20]
	0x01E25C6C LDP S0, S1, [X22 + 0x30]
	0x01E25C70 FCMP S2, 0x0
	0x01E25C74 FMIN S2, S2, S9
	0x01E25C78 FCSEL S2, S2, S10, PL
	0x01E25C7C FCMP S3, 0x0
	0x01E25C80 FMIN S3, S3, S9
	0x01E25C84 FCSEL S3, S3, S10, PL
	0x01E25C88 FCMP S0, 0x0
	0x01E25C8C FMIN S0, S0, S9
	0x01E25C90 FMAXNM S1, S1, S10
	0x01E25C94 FCSEL S0, S0, S10, PL
	0x01E25C98 STP S2, S3, [X22 + 0x28]
	0x01E25C9C STP S0, S1, [X22 + 0x30]
	0x01E25CA0 LDR X0, [X19 + 0x68]
	0x01E25CA4 CBNZ X0, 0x1E25A78
	0x01E25CA8 BL 0x1C16F20
	0x01E25CAC LDP X20, X19, [X31 + 0x70]
	0x01E25CB0 LDP X22, X21, [X31 + 0x60]
	0x01E25CB4 LDP X30, X23, [X31 + 0x50]
	0x01E25CB8 LDP D9, D8, [X31 + 0x40]
	0x01E25CBC LDP D11, D10, [X31 + 0x30]
	0x01E25CC0 LDR V12, [X31 + 0x20]
	0x01E25CC4 ADD X31, X31, 0x80
	0x01E25CC8 RET
	0x01E25CCC STR X30, [X31 - 0x30]!
	0x01E25CD0 STP X22, X21, [X31 + 0x10]
	0x01E25CD4 STP X20, X19, [X31 + 0x20]
	0x01E25CD8 ADRP X20, 0x25B3000
	0x01E25CDC LDRB W8, [X20 + 0xE49]
	0x01E25CE0 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25B4000
	006 Move W8, [X20+3654]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22D6000
	013 Move X0, [X0+2224]
	014 Call 0x1C17CF4
	015 Move X0, 0x22D6000
	016 Move X0, [X0+2248]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3654], W8
	020 Move V0, [X19+192]
	021 Move X0, X19
	022 Call DynamicBone.SetWeight, X0, V0
	023 Move X0, [X19+288]
	024 Compare X0, 0
	025 JumpIfEqual {41}
	026 Move X21, 0x22D6000
	027 Move X21, [X21+2248]
	028 Move W20, W31
	029 Move W8, [X0+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X2, [X21]
	032 Move W1, W20
	033 Call List`1<Object>.get_Item, X0, X1
	034 Move X1, X0
	035 Move X0, X19
	036 Call DynamicBone.UpdateParameters, X0, X1
	037 Move X0, [X19+288]
	038 Add W20, W20, 1
	039 Compare X0, 0
	040 JumpIfNotEqual {29}
	041 Call 0x1C17F20
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 

Method: System.Void UpdateParameters(DynamicBone/ParticleTree pt)

Disassembly:
	0x01E268D4 LDR V0, [X20 + 0xF0]
	0x01E268D8 LDR V2, [X20 + 0xF8]
	0x01E268DC FADD V0.2S, V1.2S, V0.2S
	0x01E268E0 FADD S1, S3, S2
	0x01E268E4 STR D0, [X23 + 0x40]
	0x01E268E8 STR S1, [X23 + 0x48]
	0x01E268EC LDR X0, [X19 + 0x68]
	0x01E268F0 CBZ X0, 0x1E26B98
	0x01E268F4 LDR X2, [X25]
	0x01E268F8 BL 0x301BCCC
	0x01E268FC CBZ X0, 0x1E26B98
	0x01E26900 LDRB W8, [X23 + 0x3D]
	0x01E26904 MOV X24, X0
	0x01E26908 CBZ W8, 0x1E2697C
	0x01E2690C LDR V8, [X24 + 0x80]
	0x01E26910 LDR V9, [X24 + 0x88]
	0x01E26914 LDR V10, [X23 + 0x80]
	0x01E26918 LDRB W8, [X26 + 0x784]
	0x01E2691C LDR V14, [X23 + 0x88]
	0x01E26920 CBNZ W8, 0x1E26930
	0x01E26924 MOV X0, X22
	0x01E26928 BL 0x1C16CF4
	0x01E2692C STRB W27, [X26 + 0x784]
	0x01E26930 LDR X0, [X22]
	0x01E26934 LDR W8, [X0 + 0xE0]
	0x01E26938 CBNZ W8, 0x1E26940
	0x01E2693C BL 0x1C16DFC
	0x01E26940 FSUB V0.2S, V8.2S, V10.2S
	0x01E26944 FSUB S2, S9, S14
	0x00000000 INVALID
	0x01E2694C FADDP S1, V0.2S
	0x01E26950 FMUL S0, S2, S2
	0x01E26954 B 0x1E269D0
	0x01E26958 LDR X8, [X23 + 0x40]
	0x01E2695C LDR W9, [X23 + 0x48]
	0x01E26960 LDR X10, [X23 + 0x80]
	0x01E26964 LDR W11, [X23 + 0x88]
	0x01E26968 STUR X8, [X23 + 0x4C]
	0x01E2696C STR W9, [X23 + 0x54]
	0x01E26970 STR X10, [X23 + 0x40]
	0x01E26974 STR W11, [X23 + 0x48]
	0x01E26978 B 0x1E26B8C
	0x01E2697C LDP S0, S1, [X23 + 0x58]
	0x01E26980 LDR V2, [X23 + 0x60]
	0x01E26984 ADD X0, X24, 0x98
	0x01E26988 MOV X1, X31
	0x01E2698C BL 0x3C282D0
	0x01E26990 LDRB W8, [X26 + 0x784]
	0x01E26994 MOV V8.16B, V0.16B
	0x01E26998 MOV V9.16B, V1.16B
	0x01E2699C MOV V10.16B, V2.16B
	0x01E269A0 CBNZ W8, 0x1E269B0
	0x01E269A4 MOV X0, X22
	0x01E269A8 BL 0x1C16CF4
	0x01E269AC STRB W27, [X26 + 0x784]
	0x01E269B0 LDR X0, [X22]
	0x01E269B4 LDR W8, [X0 + 0xE0]
	0x01E269B8 CBNZ W8, 0x1E269C0
	0x01E269BC BL 0x1C16DFC
	0x01E269C0 FMUL S0, S8, S8
	0x01E269C4 FMUL S1, S9, S9
	0x01E269C8 FADD S0, S0, S1
	0x01E269CC FMUL S1, S10, S10
	0x01E269D0 LDR V2, [X20 + 0x110]
	0x01E269D4 FADD S0, S1, S0
	0x01E269D8 LDR V1, [X23 + 0x28]
	0x01E269DC FSQRT S9, S0
	0x01E269E0 FMIN S3, S2, S11
	0x01E269E4 FCMP S2, 0x0
	0x01E269E8 FCSEL S2, S3, S12, PL
	0x01E269EC FADD S1, S1, S13
	0x01E269F0 FMUL S1, S1, S2
	0x01E269F4 FADD S10, S1, S11
	0x01E269F8 FCMP S10, 0x0
	0x01E269FC B.LE 0x1E26B0C
	0x01E26A00 LDUR V0, [X24 + 0xC8]
	0x01E26A04 LDUR V1, [X24 + 0xB8]
	0x01E26A08 LDUR V2, [X24 + 0xA8]
	0x01E26A0C LDUR V3, [X24 + 0x98]
	0x01E26A10 ADD X0, X31, 0x30
	0x01E26A14 STP V1, V0, [X31 + 0x50]
	0x01E26A18 MOVZ W1, 0x3
	0x01E26A1C STP V3, V2, [X31 + 0x30]
	0x01E26A20 LDP S0, S1, [X24 + 0x40]
	0x01E26A24 LDR V2, [X24 + 0x48]
	0x01E26A28 FMOV S3, W31
	0x01E26A2C MOV X2, X31
	0x01E26A30 BL 0x3C28180
	0x01E26A34 LDRB W8, [X23 + 0x3D]
	0x01E26A38 MOVZ W9, 0x58
	0x01E26A3C MOVZ W10, 0x5C
	0x01E26A40 ADD X0, X31, 0x30
	0x01E26A44 CMP W8, 0x0
	0x01E26A48 MOVZ W8, 0x8C
	0x01E26A4C CSEL X8, X9, X8, EQ
	0x01E26A50 MOVZ W9, 0x90
	0x01E26A54 CSEL X9, X10, X9, EQ
	0x01E26A58 CSEL X10, X29, X28, EQ
	0x01E26A5C LDR V2, [X23, X10, LSL]
	0x01E26A60 LDR V1, [X23, X9, LSL]
	0x01E26A64 LDR V0, [X23, X8, LSL]
	0x01E26A68 MOV X1, X31
	0x01E26A6C BL 0x3C28278
	0x01E26A70 LDR V14, [X23 + 0x40]
	0x01E26A74 LDRB W8, [X26 + 0x784]
	0x01E26A78 LDR V15, [X23 + 0x48]
	0x01E26A7C MOV V8.16B, V2.16B
	0x01E26A80 CBNZ W8, 0x1E26A98
	0x01E26A84 MOV X0, X22
	0x01E26A88 STP V1, V0, [X31 + 0x10]
	0x01E26A8C BL 0x1C16CF4
	0x01E26A90 LDP V1, V0, [X31 + 0x10]
	0x01E26A94 STRB W27, [X26 + 0x784]
	0x01E26A98 LDR X0, [X22]
	0x01E26A9C LDR W8, [X0 + 0xE0]
	0x01E26AA0 CBNZ W8, 0x1E26AB0
	0x01E26AA4 STP V1, V0, [X31 + 0x10]
	0x01E26AA8 BL 0x1C16DFC
	0x01E26AAC LDP V1, V0, [X31 + 0x10]
	0x01E26AB0 MOV V0.S[1], V1.S[0]
	0x01E26AB4 FSUB S2, S11, S10
	0x01E26AB8 FSUB V1.2S, V0.2S, V14.2S
	0x01E26ABC FSUB S6, S8, S15
	0x01E26AC0 FMUL S4, S9, S2
	0x00000000 INVALID
	0x01E26AC8 FMUL S3, S6, S6
	0x01E26ACC FADDP S2, V2.2S
	0x01E26AD0 FADD S2, S2, S3
	0x01E26AD4 FSQRT S2, S2
	0x01E26AD8 FADD S3, S4, S4
	0x01E26ADC FCMP S2, S3
	0x01E26AE0 B.LE 0x1E26B0C
	0x01E26AE4 LDR V4, [X23 + 0x40]
	0x01E26AE8 LDR V5, [X23 + 0x48]
	0x01E26AEC FSUB S3, S2, S3
	0x01E26AF0 FDIV S2, S3, S2
	0x00000000 INVALID
	0x01E26AF8 FMUL S0, S6, S2
	0x01E26AFC FADD V1.2S, V1.2S, V4.2S
	0x01E26B00 FADD S0, S0, S5
	0x01E26B04 STR D1, [X23 + 0x40]
	0x01E26B08 STR S0, [X23 + 0x48]
	0x01E26B0C LDR V8, [X24 + 0x40]
	0x01E26B10 LDR V10, [X24 + 0x48]
	0x01E26B14 LDR V14, [X23 + 0x40]
	0x01E26B18 LDRB W8, [X26 + 0x784]
	0x01E26B1C LDR V15, [X23 + 0x48]
	0x01E26B20 CBNZ W8, 0x1E26B30
	0x01E26B24 MOV X0, X22
	0x01E26B28 BL 0x1C16CF4
	0x01E26B2C STRB W27, [X26 + 0x784]
	0x01E26B30 LDR X0, [X22]
	0x01E26B34 LDR W8, [X0 + 0xE0]
	0x01E26B38 CBNZ W8, 0x1E26B40
	0x01E26B3C BL 0x1C16DFC
	0x01E26B40 FSUB V0.2S, V8.2S, V14.2S
	0x01E26B44 FSUB S1, S10, S15
	0x00000000 INVALID
	0x01E26B4C FADDP S2, V2.2S
	0x01E26B50 FMUL S3, S1, S1
	0x01E26B54 FADD S2, S2, S3
	0x01E26B58 FSQRT S2, S2
	0x01E26B5C FCMP S2, 0x0
	0x01E26B60 B.LE 0x1E26B8C
	0x01E26B64 LDR V3, [X23 + 0x40]
	0x01E26B68 LDR V4, [X23 + 0x48]
	0x01E26B6C FSUB S5, S2, S9
	0x01E26B70 FDIV S2, S5, S2
	0x00000000 INVALID
	0x01E26B78 FMUL S1, S1, S2
	0x01E26B7C FADD V0.2S, V0.2S, V3.2S
	0x01E26B80 FADD S1, S1, S4
	0x01E26B84 STR D0, [X23 + 0x40]
	0x01E26B88 STR S1, [X23 + 0x48]
	0x01E26B8C LDR X0, [X19 + 0x68]
	0x01E26B90 ADD W21, W21, 0x1
	0x01E26B94 CBNZ X0, 0x1E26884
	0x01E26B98 BL 0x1C16F20
	0x01E26B9C LDP X20, X19, [X31 + 0x100]
	0x01E26BA0 LDP X22, X21, [X31 + 0xF0]
	0x01E26BA4 LDP X24, X23, [X31 + 0xE0]
	0x01E26BA8 LDP X26, X25, [X31 + 0xD0]
	0x01E26BAC LDP X28, X27, [X31 + 0xC0]
	0x01E26BB0 LDP X29, X30, [X31 + 0xB0]
	0x01E26BB4 LDP D9, D8, [X31 + 0xA0]
	0x01E26BB8 LDP D11, D10, [X31 + 0x90]
	0x01E26BBC LDP D13, D12, [X31 + 0x80]
	0x01E26BC0 LDP D15, D14, [X31 + 0x70]
	0x01E26BC4 ADD X31, X31, 0x110
	0x01E26BC8 RET
	0x01E26BCC FMUL S6, S0, S3
	0x01E26BD0 FMUL S7, S1, S4
	0x01E26BD4 FADD S6, S6, S7
	0x01E26BD8 FMUL S7, S2, S5
	0x01E26BDC FADD S6, S7, S6
	0x01E26BE0 FADD S6, S6, S6
	0x01E26BE4 FMUL S3, S3, S6
	0x01E26BE8 FMUL S4, S4, S6
	0x01E26BEC FMUL S5, S5, S6
	0x01E26BF0 FSUB S0, S0, S3
	0x01E26BF4 FSUB S1, S1, S4
	0x01E26BF8 FSUB S2, S2, S5
	0x01E26BFC RET
	0x01E26C00 STP D11, D10, [X31 - 0x50]!
	0x01E26C04 STP D9, D8, [X31 + 0x10]
	0x01E26C08 STP X30, X23, [X31 + 0x20]
	0x01E26C0C STP X22, X21, [X31 + 0x30]
	0x01E26C10 STP X20, X19, [X31 + 0x40]
	0x01E26C14 ADRP X20, 0x25B2000
	0x01E26C18 LDRB W8, [X20 + 0xE53]
	0x01E26C1C MOV X19, X1
	0x01E26C20 TBNZ X8, 0x0, 0x1E26C44
	0x01E26C24 ADRP X0, 0x22D4000
	0x01E26C28 LDR X0, [X0 + 0x908]
	0x01E26C2C BL 0x1C16CF4
	0x01E26C30 ADRP X0, 0x22D4000
	0x01E26C34 LDR X0, [X0 + 0x920]
	0x01E26C38 BL 0x1C16CF4
	0x01E26C3C MOVZ W8, 0x1
	0x01E26C40 STRB W8, [X20 + 0xE53]
	0x01E26C44 CBZ X19, 0x1E26DC8
	0x01E26C48 LDR X0, [X19 + 0x68]
	0x01E26C4C CBZ X0, 0x1E26DC8
	0x01E26C50 ADRP X23, 0x22D4000
	0x01E26C54 LDR X23, [X23 + 0x920]
	0x01E26C58 MOVZ W20, 0x1
	0x01E26C5C LDR W8, [X0 + 0x18]
	0x01E26C60 CMP W20, W8
	0x01E26C64 B.GE 0x1E26DCC
	0x01E26C68 LDR X2, [X23]
	0x01E26C6C MOV W1, W20
	0x01E26C70 BL 0x301BCCC
	0x01E26C74 CBZ X0, 0x1E26DC8
	0x01E26C78 MOV X21, X0
	0x01E26C7C LDR X0, [X19 + 0x68]
	0x01E26C80 CBZ X0, 0x1E26DC8
	0x01E26C84 LDR W1, [X21 + 0x18]
	0x01E26C88 LDR X2, [X23]
	0x01E26C8C BL 0x301BCCC
	0x01E26C90 CBZ X0, 0x1E26DC8
	0x01E26C94 LDR W8, [X0 + 0x1C]
	0x01E26C98 MOV X22, X0
	0x01E26C9C CMP W8, 0x1
	0x01E26CA0 B.GT 0x1E26D9C
	0x01E26CA4 LDRB W8, [X21 + 0x3D]
	0x01E26CA8 CBZ W8, 0x1E26CC0
	0x01E26CAC LDR X0, [X21 + 0x10]
	0x01E26CB0 CBZ X0, 0x1E26DC8
	0x01E26CB4 MOV X1, X31
	0x01E26CB8 BL 0x3C3EB78
	0x01E26CBC B 0x1E26CC8
	0x01E26CC0 LDP S0, S1, [X21 + 0x58]
	0x01E26CC4 LDR V2, [X21 + 0x60]
	0x01E26CC8 LDR X0, [X22 + 0x10]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D12
	003 Move [X31+48], D11
	004 Move [X31+56], D10
	005 Move [X31+64], D9
	006 Move [X31+72], D8
	007 Move [X31+80], X30
	008 Move [X31+88], X23
	009 Move [X31+96], X22
	010 Move [X31+104], X21
	011 Move [X31+112], X20
	012 Move [X31+120], X19
	013 Move X21, 0x25B3000
	014 Move W8, [X21+3655]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x22D5000
	022 Move X0, [X0+2312]
	023 Call 0x1C17CF4
	024 Move X0, 0x22D5000
	025 Move X0, [X0+2336]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3655], W8
	029 Compare X19, 0
	030 JumpIfEqual {295}
	031 Move S0, [X20+168]
	032 Move S1, [X20+172]
	033 Move V2, [X20+176]
	034 Add X0, X19, 36
	035 Move X1, X31
	036 Call Matrix4x4.MultiplyVector, X0, X1
	037 Move X21, 0x25B3000
	038 Move W8, [X21+1925]
	039 Move V8, V2
	040 Compare W8, 0
	041 JumpIfNotEqual {51}
	042 Move X0, 0x22CE000
	043 Move X0, [X0+1448]
	044 Move [X31], V1
	045 Move [X31+8], V0
	046 Call 0x1C17CF4
	047 Move V1, [X31]
	048 Move V0, [X31+16]
	049 Move W8, 1
	050 Move [X21+1925], W8
	051 Move X21, 0x22CE000
	052 Move X21, [X21+1448]
	053 Move X0, [X21]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move [X31], V1
	058 Move [X31+8], V0
	059 Call 0x1C17DFC
	060 Move V1, [X31]
	061 Move V0, [X31+16]
	062 Move X8, -20164608
	063 Multiply S2, S0, S0
	064 Multiply S3, S1, S1
	065 Move V4, [X8+380]
	066 Add S3, S2, S3
	067 Multiply S2, S8, S8
	068 Add S2, S2, S3
	069 NotImplemented "Instruction FSQRT not yet implemented."
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 Move V0.S[1], V1.S[0]
	072 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	073 NotImplemented "Instruction INVALID not yet implemented."
	074 NotImplemented "Instruction FDIV not yet implemented."
	075 Move X22, 0x25B3000
	076 Move W8, [X22+1923]
	077 Compare W8, 0
	078 JumpIfNotEqual {84}
	079 Move X0, 0x22CE000
	080 Move X0, [X0+1440]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X22+1923], W8
	084 Move X8, 0x22CE000
	085 Move X8, [X8+1440]
	086 Move X8, [X8]
	087 Move X8, [X8+184]
	088 Move V9, [X8]
	089 Move V8, [X8+8]
	090 Move X22, 0x25B3000
	091 Move W8, [X22+1924]
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x22CE000
	095 Move X0, [X0+1448]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X22+1924], W8
	099 Move X0, [X21]
	100 Move S12, [X20+168]
	101 Move S11, [X20+172]
	102 Move V10, [X20+176]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Multiply S0, S12, S12
	108 Multiply S1, S11, S11
	109 Multiply S2, S10, S10
	110 Move X0, [X19+104]
	111 Add S0, S0, S1
	112 Add S0, S0, S2
	113 NotImplemented "Instruction FSQRT not yet implemented."
	114 NotImplemented "Instruction INVALID not yet implemented."
	115 Multiply S0, S8, S0
	116 Move [X19+24], D1
	117 Move [X19+32], S0
	118 Compare X0, 0
	119 JumpIfEqual {295}
	120 Move X23, 0x22D5000
	121 Move X23, [X23+2336]
	122 Move W21, W31
	123 Move S9, 1
	124 Move S10, W31
	125 Move W8, [X0+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X2, [X23]
	128 Move W1, W21
	129 Call List`1<Object>.get_Item, X0, X1
	130 Compare X0, 0
	131 JumpIfEqual {295}
	132 Move V0, [X20+56]
	133 Move X22, X0
	134 Move [X0+32], S0
	135 Move V0, [X20+72]
	136 Move [X0+36], S0
	137 Move V0, [X20+88]
	138 Move [X0+40], S0
	139 Move V0, [X20+104]
	140 Move [X0+44], S0
	141 Move V0, [X20+120]
	142 Move [X0+48], S0
	143 Move V0, [X20+136]
	144 Move [X0+52], S0
	145 Move V0, [X19+100]
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Move V1, [X22+56]
	148 Move X0, [X20+64]
	149 NotImplemented "Instruction FDIV not yet implemented."
	150 Compare X0, 0
	151 JumpIfEqual {168}
	152 Move X1, X31
	153 Call AnimationCurve.get_keys, X0
	154 Compare X0, 0
	155 JumpIfEqual {295}
	156 Move X8, [X0+24]
	157 Compare X8, 0
	158 JumpIfEqual {168}
	159 Move X0, [X20+64]
	160 Compare X0, 0
	161 JumpIfEqual {295}
	162 Move V11, [X22+32]
	163 Move V0, V8
	164 Move X1, X31
	165 Call AnimationCurve.Evaluate, X0, V0
	166 Multiply S0, S11, S0
	167 Move [X22+32], S0
	168 Move X0, [X20+80]
	169 Compare X0, 0
	170 JumpIfEqual {187}
	171 Move X1, X31
	172 Call AnimationCurve.get_keys, X0
	173 Compare X0, 0
	174 JumpIfEqual {295}
	175 Move X8, [X0+24]
	176 Compare X8, 0
	177 JumpIfEqual {187}
	178 Move X0, [X20+80]
	179 Compare X0, 0
	180 JumpIfEqual {295}
	181 Move V11, [X22+36]
	182 Move V0, V8
	183 Move X1, X31
	184 Call AnimationCurve.Evaluate, X0, V0
	185 Multiply S0, S11, S0
	186 Move [X22+36], S0
	187 Move X0, [X20+96]
	188 Compare X0, 0
	189 JumpIfEqual {206}
	190 Move X1, X31
	191 Call AnimationCurve.get_keys, X0
	192 Compare X0, 0
	193 JumpIfEqual {295}
	194 Move X8, [X0+24]
	195 Compare X8, 0
	196 JumpIfEqual {206}
	197 Move X0, [X20+96]
	198 Compare X0, 0
	199 JumpIfEqual {295}
	200 Move V11, [X22+40]
	201 Move V0, V8
	202 Move X1, X31
	203 Call AnimationCurve.Evaluate, X0, V0
	204 Multiply S0, S11, S0
	205 Move [X22+40], S0
	206 Move X0, [X20+112]
	207 Compare X0, 0
	208 JumpIfEqual {225}
	209 Move X1, X31
	210 Call AnimationCurve.get_keys, X0
	211 Compare X0, 0
	212 JumpIfEqual {295}
	213 Move X8, [X0+24]
	214 Compare X8, 0
	215 JumpIfEqual {225}
	216 Move X0, [X20+112]
	217 Compare X0, 0
	218 JumpIfEqual {295}
	219 Move V11, [X22+44]
	220 Move V0, V8
	221 Move X1, X31
	222 Call AnimationCurve.Evaluate, X0, V0
	223 Multiply S0, S11, S0
	224 Move [X22+44], S0
	225 Move X0, [X20+128]
	226 Compare X0, 0
	227 JumpIfEqual {244}
	228 Move X1, X31
	229 Call AnimationCurve.get_keys, X0
	230 Compare X0, 0
	231 JumpIfEqual {295}
	232 Move X8, [X0+24]
	233 Compare X8, 0
	234 JumpIfEqual {244}
	235 Move X0, [X20+128]
	236 Compare X0, 0
	237 JumpIfEqual {295}
	238 Move V11, [X22+48]
	239 Move V0, V8
	240 Move X1, X31
	241 Call AnimationCurve.Evaluate, X0, V0
	242 Multiply S0, S11, S0
	243 Move [X22+48], S0
	244 Move X0, [X20+144]
	245 Compare X0, 0
	246 JumpIfEqual {263}
	247 Move X1, X31
	248 Call AnimationCurve.get_keys, X0
	249 Compare X0, 0
	250 JumpIfEqual {295}
	251 Move X8, [X0+24]
	252 Compare X8, 0
	253 JumpIfEqual {263}
	254 Move X0, [X20+144]
	255 Compare X0, 0
	256 JumpIfEqual {295}
	257 Move V11, [X22+52]
	258 Move V0, V8
	259 Move X1, X31
	260 Call AnimationCurve.Evaluate, X0, V0
	261 Multiply S0, S11, S0
	262 Move [X22+52], S0
	263 Move S0, [X22+32]
	264 Move S1, [X22+36]
	265 Move S2, [X22+40]
	266 Move S3, [X22+44]
	267 Add W21, W21, 1
	268 NotImplemented "Instruction FCMP not yet implemented."
	269 NotImplemented "Instruction FMIN not yet implemented."
	270 NotImplemented "Instruction FCSEL not yet implemented."
	271 NotImplemented "Instruction FCMP not yet implemented."
	272 NotImplemented "Instruction FMIN not yet implemented."
	273 NotImplemented "Instruction FCSEL not yet implemented."
	274 Move [X22+32], S0
	275 Move [X22+40], S1
	276 Move S0, [X22+48]
	277 Move S1, [X22+52]
	278 NotImplemented "Instruction FCMP not yet implemented."
	279 NotImplemented "Instruction FMIN not yet implemented."
	280 NotImplemented "Instruction FCSEL not yet implemented."
	281 NotImplemented "Instruction FCMP not yet implemented."
	282 NotImplemented "Instruction FMIN not yet implemented."
	283 NotImplemented "Instruction FCSEL not yet implemented."
	284 NotImplemented "Instruction FCMP not yet implemented."
	285 NotImplemented "Instruction FMIN not yet implemented."
	286 NotImplemented "Instruction FMAXNM not yet implemented."
	287 NotImplemented "Instruction FCSEL not yet implemented."
	288 Move [X22+40], S2
	289 Move [X22+48], S3
	290 Move [X22+48], S0
	291 Move [X22+56], S1
	292 Move X0, [X19+104]
	293 Compare X0, 0
	294 JumpIfNotEqual {125}
	295 Call 0x1C17F20
	296 Move X20, [X31+112]
	297 Move X19, [X31+120]
	298 Move X22, [X31+96]
	299 Move X21, [X31+104]
	300 Move X30, [X31+80]
	301 Move X23, [X31+88]
	302 Move D9, [X31+64]
	303 Move D8, [X31+72]
	304 Move D11, [X31+48]
	305 Move D10, [X31+56]
	306 Move V12, [X31+32]
	307 Add X31, X31, 128
	308 Return 

Method: System.Void InitTransforms()

Disassembly:
	0x01E25608 LDR V0, [X19 + 0x64]
	0x01E2560C LDR X0, [X19 + 0x68]
	0x01E25610 FCMP S0, S8
	0x01E25614 FCSEL S0, S0, S8, GT
	0x01E25618 STR S0, [X19 + 0x64]
	0x01E2561C CBZ X0, 0x1E2584C
	0x01E25620 ADRP X8, 0x22D5000
	0x01E25624 LDR X8, [X8 + 0x920]
	0x01E25628 MOV W1, W29
	0x01E2562C LDR X2, [X8]
	0x01E25630 BL 0x301BCCC
	0x01E25634 CBZ X0, 0x1E2584C
	0x01E25638 LDR W8, [X0 + 0x1C]
	0x01E2563C ADD W8, W8, 0x1
	0x01E25640 STR W8, [X0 + 0x1C]
	0x01E25644 LDR X0, [X19 + 0x68]
	0x01E25648 CBZ X0, 0x1E2584C
	0x01E2564C ADRP X9, 0x22D5000
	0x01E25650 LDP W29, W10, [X0 + 0x18]
	0x01E25654 LDR X8, [X0 + 0x10]
	0x01E25658 LDR X9, [X9 + 0x980]
	0x01E2565C ADD W10, W10, 0x1
	0x01E25660 LDR X9, [X9]
	0x01E25664 STR W10, [X0 + 0x1C]
	0x01E25668 CBZ X8, 0x1E2584C
	0x01E2566C LDR W10, [X8 + 0x18]
	0x01E25670 CMP W29, W10
	0x01E25674 B.CS 0x1E25690
	0x01E25678 SXTW X9, W29
	0x01E2567C ADD W10, W29, 0x1
	0x01E25680 ADD X8, X8, X9, 0x3, LSL
	0x01E25684 STR W10, [X0 + 0x18]
	0x01E25688 STR X27, [X8 + 0x20]
	0x01E2568C B 0x1E256A4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25B4000
	006 Move W8, [X20+3656]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22D6000
	013 Move X0, [X0+2224]
	014 Call 0x1C17CF4
	015 Move X0, 0x22D6000
	016 Move X0, [X0+2248]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3656], W8
	020 Move X0, [X19+288]
	021 Compare X0, 0
	022 JumpIfEqual {37}
	023 Move X21, 0x22D6000
	024 Move X21, [X21+2248]
	025 Move W20, W31
	026 Move W8, [X0+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X2, [X21]
	029 Move W1, W20
	030 Call List`1<Object>.get_Item, X0, X1
	031 Move X1, X0
	032 Call DynamicBone.InitTransforms, X0, X1
	033 Move X0, [X19+288]
	034 Add W20, W20, 1
	035 Compare X0, 0
	036 JumpIfNotEqual {26}
	037 Call 0x1C17F20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.Void InitTransforms(DynamicBone/ParticleTree pt)

Disassembly:
	0x01E26CCC CBZ X0, 0x1E26DC8
	0x01E26CD0 MOV X1, X31
	0x01E26CD4 BL 0x3C40610
	0x01E26CD8 LDR V3, [X21 + 0x40]
	0x01E26CDC LDR V5, [X22 + 0x40]
	0x01E26CE0 LDR V4, [X21 + 0x48]
	0x01E26CE4 LDR V6, [X22 + 0x48]
	0x01E26CE8 MOV X0, X31
	0x01E26CEC FSUB V3.2S, V3.2S, V5.2S
	0x01E26CF0 FSUB S5, S4, S6
	0x01E26CF4 MOV S4, V3.S[1]
	0x01E26CF8 BL 0x3C2A1AC
	0x01E26CFC LDR X22, [X22 + 0x10]
	0x01E26D00 CBZ X22, 0x1E26DC8
	0x01E26D04 MOV X0, X22
	0x01E26D08 MOV X1, X31
	0x01E26D0C MOV V10.16B, V0.16B
	0x01E26D10 MOV V9.16B, V1.16B
	0x01E26D14 MOV V8.16B, V2.16B
	0x01E26D18 MOV V11.16B, V3.16B
	0x01E26D1C BL 0x3C3DEB4
	0x01E26D20 FMUL S4, S11, S0
	0x01E26D24 FMUL S5, S10, S3
	0x01E26D28 FMUL S7, S8, S1
	0x01E26D2C FMUL S16, S11, S1
	0x01E26D30 FMUL S17, S9, S3
	0x01E26D34 FMUL S18, S8, S0
	0x01E26D38 FMUL S20, S10, S1
	0x01E26D3C FMUL S21, S10, S0
	0x01E26D40 FMUL S22, S9, S0
	0x01E26D44 FMUL S0, S9, S1
	0x01E26D48 FMUL S1, S11, S2
	0x01E26D4C FMUL S23, S11, S3
	0x01E26D50 FMUL S3, S8, S3
	0x01E26D54 FMUL S6, S9, S2
	0x01E26D58 FMUL S19, S10, S2
	0x01E26D5C FMUL S24, S8, S2
	0x01E26D60 FADD S2, S4, S5
	0x01E26D64 FADD S4, S16, S17
	0x01E26D68 FADD S1, S1, S3
	0x01E26D6C FSUB S3, S23, S21
	0x01E26D70 FADD S2, S6, S2
	0x01E26D74 FADD S4, S18, S4
	0x01E26D78 FADD S5, S20, S1
	0x01E26D7C FSUB S3, S3, S0
	0x01E26D80 FSUB S0, S2, S7
	0x01E26D84 FSUB S1, S4, S19
	0x01E26D88 FSUB S2, S5, S22
	0x01E26D8C FSUB S3, S3, S24
	0x01E26D90 MOV X0, X22
	0x01E26D94 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25B3000
	007 Move W8, [X20+3657]
	008 Move X19, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x22D5000
	014 Move X0, [X0+2312]
	015 Call 0x1C17CF4
	016 Move X0, 0x22D5000
	017 Move X0, [X0+2336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3657], W8
	021 Compare X19, 0
	022 JumpIfEqual {61}
	023 Move X0, [X19+104]
	024 Compare X0, 0
	025 JumpIfEqual {61}
	026 Move X22, 0x22D5000
	027 Move X22, [X22+2336]
	028 Move W20, W31
	029 Move W8, [X0+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X2, [X22]
	032 Move W1, W20
	033 Call List`1<Object>.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {61}
	036 Move W8, [X0+61]
	037 Move X21, X0
	038 Compare W8, 0
	039 JumpIfEqual {57}
	040 Move X0, [X21+16]
	041 Compare X0, 0
	042 JumpIfEqual {61}
	043 Move S1, [X21+104]
	044 Move S2, [X21+108]
	045 Move V0, [X21+100]
	046 Move X1, X31
	047 Call Transform.set_localPosition, X0, X1
	048 Move X0, [X21+16]
	049 Compare X0, 0
	050 JumpIfEqual {61}
	051 Move S2, [X21+120]
	052 Move S3, [X21+124]
	053 Move S0, [X21+112]
	054 Move S1, [X21+116]
	055 Move X1, X31
	056 Call Transform.set_localRotation, X0, X1
	057 Move X0, [X19+104]
	058 Add W20, W20, 1
	059 Compare X0, 0
	060 JumpIfNotEqual {29}
	061 Call 0x1C17F20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Return 

Method: System.Void ResetParticlesPosition()

Disassembly:
	0x01E25690 LDR X8, [X9 + 0x20]
	0x01E25694 MOV X1, X27
	0x01E25698 LDR X8, [X8 + 0xC0]
	0x01E2569C LDR X2, [X8 + 0x70]
	0x01E256A0 BL 0x301BF90
	0x01E256A4 LDR X0, [X22]
	0x01E256A8 LDR W8, [X0 + 0xE0]
	0x01E256AC CBNZ W8, 0x1E256B4
	0x01E256B0 BL 0x1C16DFC
	0x01E256B4 MOV X0, X28
	0x01E256B8 MOV X1, X31
	0x01E256BC MOV X2, X31
	0x01E256C0 BL 0x3C354F8
	0x01E256C4 TBZ X0, 0x0, 0x1E25820
	0x01E256C8 CBZ X28, 0x1E2584C
	0x01E256CC MOV X0, X28
	0x01E256D0 MOV X1, X31
	0x01E256D4 BL 0x3C40C8C
	0x01E256D8 CMP W0, 0x1
	0x01E256DC B.LT 0x1E257A8
	0x01E256E0 MOV W21, W31
	0x01E256E4 MOV X0, X28
	0x01E256E8 MOV W1, W21
	0x01E256EC MOV X2, X31
	0x01E256F0 BL 0x3C410A0
	0x01E256F4 LDR X8, [X20 + 0xD0]
	0x01E256F8 MOV X23, X0
	0x01E256FC CBZ X8, 0x1E25778
	0x01E25700 LDR X2, [X24]
	0x01E25704 MOV X0, X8
	0x01E25708 MOV X1, X23
	0x01E2570C BL 0x301C318
	0x01E25710 TBZ X0, 0x0, 0x1E25778
	0x01E25714 LDR V0, [X20 + 0x98]
	0x01E25718 FCMP S0, 0x0
	0x01E2571C B.GT 0x1E25774
	0x01E25720 LDR V9, [X20 + 0x9C]
	0x01E25724 LDRB W8, [X26 + 0x783]
	0x01E25728 LDR V10, [X20 + 0xA0]
	0x01E2572C CBNZ W8, 0x1E25740
	0x01E25730 MOV X0, X25
	0x01E25734 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25B4000
	006 Move W8, [X20+3658]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22D6000
	013 Move X0, [X0+2224]
	014 Call 0x1C17CF4
	015 Move X0, 0x22D6000
	016 Move X0, [X0+2248]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3658], W8
	020 Move X0, [X19+288]
	021 Compare X0, 0
	022 JumpIfEqual {37}
	023 Move X21, 0x22D6000
	024 Move X21, [X21+2248]
	025 Move W20, W31
	026 Move W8, [X0+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X2, [X21]
	029 Move W1, W20
	030 Call List`1<Object>.get_Item, X0, X1
	031 Move X1, X0
	032 Call DynamicBone.ResetParticlesPosition, X0, X1
	033 Move X0, [X19+288]
	034 Add W20, W20, 1
	035 Compare X0, 0
	036 JumpIfNotEqual {26}
	037 Call 0x1C17F20
	038 Move X0, X19
	039 Move X1, X31
	040 Call Component.get_transform, X0
	041 Compare X0, 0
	042 JumpIfEqual {37}
	043 Move X1, X31
	044 Call Transform.get_position, X0
	045 Move [X19+252], S0
	046 Move [X19+260], S1
	047 Move [X19+260], S2
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return 

Method: System.Void ResetParticlesPosition(DynamicBone/ParticleTree pt)

Disassembly:
	0x01E26D98 BL 0x3C3F7AC
	0x01E26D9C LDRB W8, [X21 + 0x3D]
	0x01E26DA0 CBZ W8, 0x1E26DBC
	0x01E26DA4 LDR X0, [X21 + 0x10]
	0x01E26DA8 CBZ X0, 0x1E26DC8
	0x01E26DAC LDP S1, S2, [X21 + 0x44]
	0x01E26DB0 LDR V0, [X21 + 0x40]
	0x01E26DB4 MOV X1, X31
	0x01E26DB8 BL 0x3C3F62C
	0x01E26DBC LDR X0, [X19 + 0x68]
	0x01E26DC0 ADD W20, W20, 0x1
	0x01E26DC4 CBNZ X0, 0x1E26C5C
	0x01E26DC8 BL 0x1C16F20
	0x01E26DCC LDP X20, X19, [X31 + 0x40]
	0x01E26DD0 LDP X22, X21, [X31 + 0x30]
	0x01E26DD4 LDP X30, X23, [X31 + 0x20]
	0x01E26DD8 LDP D9, D8, [X31 + 0x10]
	0x01E26DDC LDP D11, D10, [X31], #0x50
	0x01E26DE0 RET
	0x01E26DE4 STR X30, [X31 - 0x30]!
	0x01E26DE8 STP X22, X21, [X31 + 0x10]
	0x01E26DEC STP X20, X19, [X31 + 0x20]
	0x01E26DF0 ADRP X20, 0x25B2000
	0x01E26DF4 LDRB W8, [X20 + 0xE54]
	0x01E26DF8 MOV X19, X0
	0x01E26DFC TBNZ X8, 0x0, 0x1E26E20
	0x01E26E00 ADRP X0, 0x22D4000
	0x01E26E04 LDR X0, [X0 + 0x9A8]
	0x01E26E08 BL 0x1C16CF4
	0x01E26E0C ADRP X0, 0x22D4000
	0x01E26E10 LDR X0, [X0 + 0x9B0]
	0x01E26E14 BL 0x1C16CF4
	0x01E26E18 MOVZ W8, 0x1
	0x01E26E1C STRB W8, [X20 + 0xE54]
	0x01E26E20 MOVZ X8, 0x42700000
	0x01E26E24 MOVZ W9, 0xCCCD
	0x01E26E28 MOVK X8, 0x3
	0x01E26E2C MOVK W9, 0x3DCC0000
	0x01E26E30 STR X8, [X19 + 0x30]
	0x01E26E34 STR W9, [X19 + 0x38]
	0x01E26E38 STR W9, [X19 + 0x48]
	0x01E26E3C STR W9, [X19 + 0x58]
	0x01E26E40 ADRP X22, 0x25B2000
	0x01E26E44 ADRP X21, 0x22D4000
	0x01E26E48 ADRP X20, 0x22D4000
	0x01E26E4C LDRB W8, [X22 + 0x783]
	0x01E26E50 LDR X21, [X21 + 0x9B0]
	0x01E26E54 LDR X20, [X20 + 0x9A8]
	0x01E26E58 CBNZ W8, 0x1E26E70
	0x01E26E5C ADRP X0, 0x22CD000
	0x01E26E60 LDR X0, [X0 + 0x5A0]
	0x01E26E64 BL 0x1C16CF4
	0x01E26E68 MOVZ W8, 0x1
	0x01E26E6C STRB W8, [X22 + 0x783]
	0x01E26E70 ADRP X8, 0x22CD000
	0x01E26E74 LDR X8, [X8 + 0x5A0]
	0x01E26E78 LDR X8, [X8]
	0x01E26E7C LDR X9, [X8 + 0xB8]
	0x01E26E80 LDR V0, [X9]
	0x01E26E84 LDR V1, [X9 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25B3000
	007 Move W8, [X20+3659]
	008 Move X19, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x22D5000
	014 Move X0, [X0+2312]
	015 Call 0x1C17CF4
	016 Move X0, 0x22D5000
	017 Move X0, [X0+2336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3659], W8
	021 Compare X19, 0
	022 JumpIfEqual {72}
	023 Move X0, [X19+104]
	024 Compare X0, 0
	025 JumpIfEqual {72}
	026 Move X22, 0x22D5000
	027 Move X22, [X22+2336]
	028 Move W20, W31
	029 Move W8, [X0+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X2, [X22]
	032 Move W1, W20
	033 Call List`1<Object>.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {72}
	036 Move W8, [X0+61]
	037 Move X21, X0
	038 Compare W8, 0
	039 JumpIfEqual {45}
	040 Move X0, [X21+16]
	041 Compare X0, 0
	042 JumpIfEqual {72}
	043 Move X1, X31
	044 Call Transform.get_position, X0
	045 Move X0, [X19+104]
	046 Compare X0, 0
	047 JumpIfEqual {72}
	048 Move W1, [X21+24]
	049 Move X2, [X22]
	050 Call List`1<Object>.get_Item, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {72}
	053 Move X0, [X0+16]
	054 Compare X0, 0
	055 JumpIfEqual {72}
	056 Move S1, [X21+92]
	057 Move S2, [X21+96]
	058 Move V0, [X21+88]
	059 Move X1, X31
	060 Call Transform.TransformPoint, X0, X1
	061 Move [X21+80], S1
	062 Move [X21+88], S2
	063 Move [X21+64], S0
	064 Move [X21+72], S1
	065 Move [X21+72], S2
	066 Move [X21+80], S0
	067 Move [X21+60], W31
	068 Move X0, [X19+104]
	069 Add W20, W20, 1
	070 Compare X0, 0
	071 JumpIfNotEqual {29}
	072 Call 0x1C17F20
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Return 

Method: System.Void UpdateParticles1(System.Single timeVar, System.Int32 loopIndex)

Disassembly:
	0x01E25F04 MOVZ W8, 0x1
	0x01E25F08 STRB W8, [X22 + 0x785]
	0x01E25F0C ADRP X8, 0x22CE000
	0x01E25F10 LDR X8, [X8 + 0x5A8]
	0x01E25F14 LDR X0, [X8]
	0x01E25F18 LDR W8, [X0 + 0xE0]
	0x01E25F1C CBNZ W8, 0x1E25F24
	0x01E25F20 BL 0x1C16DFC
	0x01E25F24 ADRP X8, 0xFFFFFFFFFECC5000
	0x00000000 INVALID
	0x01E25F2C LDR V2, [X8 + 0x17C]
	0x01E25F30 ADRP X22, 0x22CE000
	0x01E25F34 FMUL S1, S10, S10
	0x01E25F38 FADDP S0, V0.2S
	0x01E25F3C LDR X22, [X22 + 0x5A0]
	0x01E25F40 FADD S0, S1, S0
	0x01E25F44 FSQRT S0, S0
	0x01E25F48 FCMP S0, S2
	0x01E25F4C ADRP X23, 0x25B3000
	0x01E25F50 STR S8, [X31 + 0x10]
	0x01E25F54 B.LE 0x1E25F68
	0x01E25F58 UNIMPLEMENTED
	0x00000000 INVALID
	0x01E25F60 FDIV S12, S10, S0
	0x01E25F64 B 0x1E25F94
	0x01E25F68 LDRB W8, [X23 + 0x783]
	0x01E25F6C CBNZ W8, 0x1E25F84
	0x01E25F70 ADRP X0, 0x22CE000
	0x01E25F74 LDR X0, [X0 + 0x5A0]
	0x01E25F78 BL 0x1C16CF4
	0x01E25F7C MOVZ W8, 0x1
	0x01E25F80 STRB W8, [X23 + 0x783]
	0x01E25F84 LDR X8, [X22]
	0x01E25F88 LDR X8, [X8 + 0xB8]
	0x01E25F8C LDR V11, [X8]
	0x01E25F90 LDR V12, [X8 + 0x8]
	0x01E25F94 CBZ X19, 0x1E26138
	0x01E25F98 LDR V13, [X19 + 0x70]
	0x01E25F9C LDR V8, [X19 + 0x78]
	0x01E25FA0 LDUR V5, [X20 + 0xB4]
	0x01E25FA4 LDR V14, [X20 + 0xBC]
	0x01E25FA8 LDR V15, [X20 + 0x108]
	0x01E25FAC CBZ W21, 0x1E25FE8

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x25B4000
	008 Move W8, [X21+3660]
	009 Move W19, W1
	010 Move V8, V0
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x22D6000
	017 Move X0, [X0+2224]
	018 Call 0x1C17CF4
	019 Move X0, 0x22D6000
	020 Move X0, [X0+2248]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3660], W8
	024 Move X0, [X20+288]
	025 Compare X0, 0
	026 JumpIfEqual {44}
	027 Move X22, 0x22D6000
	028 Move X22, [X22+2248]
	029 Move W21, W31
	030 Move W8, [X0+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X2, [X22]
	033 Move W1, W21
	034 Call List`1<Object>.get_Item, X0, X1
	035 Move X1, X0
	036 Move X0, X20
	037 Move V0, V8
	038 Move W2, W19
	039 Call DynamicBone.UpdateParticles1, X0, X1, V0, X2
	040 Move X0, [X20+288]
	041 Add W21, W21, 1
	042 Compare X0, 0
	043 JumpIfNotEqual {30}
	044 Call 0x1C17F20
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+8]
	050 Move V8, [X31+48]
	051 Return 

Method: System.Void UpdateParticles1(DynamicBone/ParticleTree pt, System.Single timeVar, System.Int32 loopIndex)

Disassembly:
	0x01E26E88 STUR D0, [X19 + 0x9C]
	0x01E26E8C STR S1, [X19 + 0xA4]
	0x01E26E90 LDR X9, [X8 + 0xB8]
	0x01E26E94 LDR V0, [X9]
	0x01E26E98 LDR V1, [X9 + 0x8]
	0x01E26E9C MOVZ W9, 0x3F800000
	0x01E26EA0 STR D0, [X19 + 0xA8]
	0x01E26EA4 STR S1, [X19 + 0xB0]
	0x01E26EA8 LDR X8, [X8 + 0xB8]
	0x01E26EAC LDR V0, [X8]
	0x01E26EB0 LDR V1, [X8 + 0x8]
	0x01E26EB4 MOVZ W8, 0x41A00000
	0x01E26EB8 STR W8, [X19 + 0xE8]
	0x01E26EBC MOVZ W8, 0x1
	0x01E26EC0 STR W9, [X19 + 0xC0]
	0x01E26EC4 STRB W8, [X19 + 0xEC]
	0x01E26EC8 STUR D0, [X19 + 0xB4]
	0x01E26ECC STR S1, [X19 + 0xBC]
	0x01E26ED0 STR W9, [X19 + 0x110]
	0x01E26ED4 LDR X0, [X21]
	0x01E26ED8 BL 0x1C16F10
	0x01E26EDC LDR X1, [X20]
	0x01E26EE0 MOV X20, X0
	0x01E26EE4 BL 0x301B7C4
	0x01E26EE8 STR X20, [X19 + 0x120]
	0x01E26EEC MOV X0, X19
	0x01E26EF0 LDP X20, X19, [X31 + 0x20]
	0x01E26EF4 LDP X22, X21, [X31 + 0x10]
	0x01E26EF8 MOV X1, X31
	0x01E26EFC LDR X30, [X31], #0x30
	0x01E26F00 B 0x3C36C30
	0x01E26F04 STP X30, X21, [X31 - 0x20]!
	0x01E26F08 STP X20, X19, [X31 + 0x10]
	0x01E26F0C ADRP X21, 0x25B2000
	0x01E26F10 LDRB W8, [X21 + 0xE56]
	0x01E26F14 MOV X19, X1
	0x01E26F18 MOV X20, X0
	0x01E26F1C TBNZ X8, 0x0, 0x1E26F34
	0x01E26F20 ADRP X0, 0x22CD000
	0x01E26F24 LDR X0, [X0 + 0x598]
	0x01E26F28 BL 0x1C16CF4
	0x01E26F2C MOVZ W8, 0x1
	0x01E26F30 STRB W8, [X21 + 0xE56]
	0x01E26F34 CBZ X19, 0x1E26F70
	0x01E26F38 ADRP X8, 0x22CD000
	0x01E26F3C LDR X8, [X8 + 0x598]
	0x01E26F40 LDR X19, [X19 + 0x10]
	0x01E26F44 LDR X20, [X20 + 0x10]
	0x01E26F48 LDR X0, [X8]
	0x01E26F4C LDR W8, [X0 + 0xE0]
	0x01E26F50 CBNZ W8, 0x1E26F58
	0x01E26F54 BL 0x1C16DFC
	0x01E26F58 MOV X0, X19
	0x01E26F5C MOV X1, X20
	0x01E26F60 LDP X20, X19, [X31 + 0x10]
	0x01E26F64 MOV X2, X31
	0x01E26F68 LDP X30, X21, [X31], #0x20
	0x01E26F6C B 0x3C3883C
	0x01E26F70 BL 0x1C16F20
	0x01E26F74 LDP S0, S1, [X0 + 0x38]
	0x01E26F78 LDR V2, [X0 + 0x40]
	0x01E26F7C FMOV S3, W31
	0x01E26F80 FMAXNM S0, S0, S3
	0x01E26F84 FMAXNM S1, S1, S3
	0x01E26F88 FMAXNM S2, S2, S3
	0x01E26F8C STP S0, S1, [X0 + 0x38]
	0x01E26F90 STR S2, [X0 + 0x40]
	0x01E26F94 RET
	0x01E26F98 STP D13, D12, [X31 - 0x50]!
	0x01E26F9C STP D11, D10, [X31 + 0x10]
	0x01E26FA0 STP D9, D8, [X31 + 0x20]
	0x01E26FA4 STR X30, [X31 + 0x30]
	0x01E26FA8 STP X20, X19, [X31 + 0x40]
	0x01E26FAC MOV X1, X31
	0x01E26FB0 MOV X19, X0
	0x01E26FB4 BL 0x3C32E90
	0x01E26FB8 CBZ X0, 0x1E2731C
	0x01E26FBC MOV X1, X31
	0x01E26FC0 BL 0x3C40EA8
	0x01E26FC4 LDP S1, S2, [X19 + 0x3C]
	0x01E26FC8 FABS S3, S0
	0x01E26FCC LDR V0, [X19 + 0x38]
	0x01E26FD0 FMOV S4, 0.5
	0x01E26FD4 FCMP S2, 0x0
	0x01E26FD8 FMUL S1, S1, S4
	0x01E26FDC B.LS 0x1E26FF4
	0x01E26FE0 ADRP X8, 0xFFFFFFFFFECC4000
	0x01E26FE4 LDR V4, [X8 + 0x330]
	0x01E26FE8 FABD S5, S0, S0
	0x01E26FEC FCMP S5, S4
	0x01E26FF0 B.PL 0x1E27034
	0x01E26FF4 FMUL S2, S3, S0
	0x01E26FF8 FSUB S0, S1, S0
	0x01E26FFC FCMP S0, 0x0
	0x01E27000 STR S2, [X19 + 0x44]
	0x01E27004 B.LS 0x1E2709C
	0x01E27008 LDR W8, [X19 + 0x20]
	0x01E2700C LDP S10, S9, [X19 + 0x24]
	0x01E27010 LDR V8, [X19 + 0x2C]
	0x01E27014 CMP W8, 0x2
	0x01E27018 B.EQ 0x1E270DC
	0x01E2701C CMP W8, 0x1
	0x01E27020 B.EQ 0x1E270F0
	0x01E27024 CBNZ W8, 0x1E27100
	0x01E27028 FADD S11, S0, S10
	0x01E2702C FSUB S10, S10, S0
	0x01E27030 B 0x1E27104
	0x01E27034 FCMP S0, S2
	0x01E27038 FCSEL S4, S0, S2, GT
	0x01E2703C FSUB S5, S1, S4
	0x01E27040 FCMP S5, 0x0
	0x01E27044 B.LS 0x1E27094
	0x01E27048 LDR W8, [X19 + 0x20]
	0x01E2704C LDP S11, S10, [X19 + 0x24]
	0x01E27050 LDR V8, [X19 + 0x2C]
	0x01E27054 FMUL S4, S3, S0
	0x01E27058 FMUL S3, S2, S3
	0x01E2705C STP S4, S3, [X19 + 0x44]
	0x01E27060 FSUB S3, S1, S0
	0x01E27064 CMP W8, 0x2
	0x01E27068 FSUB S0, S1, S2
	0x01E2706C B.EQ 0x1E271F0
	0x01E27070 CMP W8, 0x1
	0x01E27074 B.EQ 0x1E27200
	0x01E27078 CBNZ W8, 0x1E27214
	0x01E2707C FADD S1, S3, S11
	0x01E27080 FSUB S13, S11, S0
	0x01E27084 MOV V11.16B, V1.16B
	0x01E27088 MOV V9.16B, V8.16B
	0x01E2708C MOV V12.16B, V10.16B
	0x01E27090 B 0x1E27220
	0x01E27094 FMUL S0, S3, S4
	0x01E27098 STR S0, [X19 + 0x44]
	0x01E2709C MOV X0, X19
	0x01E270A0 MOV X1, X31
	0x01E270A4 BL 0x3C32E90
	0x01E270A8 CBZ X0, 0x1E2731C
	0x01E270AC LDP S1, S2, [X19 + 0x28]
	0x01E270B0 LDR V0, [X19 + 0x24]
	0x01E270B4 MOV X1, X31
	0x01E270B8 BL 0x3C3DE4C
	0x01E270BC LDR W8, [X19 + 0x30]
	0x01E270C0 STP S0, S1, [X19 + 0x4C]
	0x01E270C4 STR S2, [X19 + 0x54]
	0x01E270C8 CBZ W8, 0x1E270D4
	0x01E270CC MOVZ W8, 0x1
	0x01E270D0 B 0x1E27300
	0x01E270D4 STR W31, [X19 + 0x68]
	0x01E270D8 B 0x1E27304
	0x01E270DC FADD S13, S0, S8
	0x01E270E0 FSUB S8, S8, S0
	0x01E270E4 MOV V11.16B, V10.16B
	0x01E270E8 MOV V12.16B, V9.16B
	0x01E270EC B 0x1E2710C
	0x01E270F0 FADD S12, S0, S9
	0x01E270F4 FSUB S9, S9, S0
	0x01E270F8 MOV V11.16B, V10.16B
	0x01E270FC B 0x1E27108
	0x01E27100 MOV V11.16B, V10.16B
	0x01E27104 MOV V12.16B, V9.16B
	0x01E27108 MOV V13.16B, V8.16B
	0x01E2710C MOV X0, X19
	0x01E27110 MOV X1, X31
	0x01E27114 BL 0x3C32E90
	0x01E27118 CBZ X0, 0x1E2731C
	0x01E2711C MOV V0.16B, V11.16B
	0x01E27120 MOV V1.16B, V12.16B
	0x01E27124 MOV V2.16B, V13.16B
	0x01E27128 MOV X1, X31
	0x01E2712C BL 0x3C3DE4C
	0x01E27130 MOV X0, X19
	0x01E27134 MOV X1, X31
	0x01E27138 STP S0, S1, [X19 + 0x4C]
	0x01E2713C STR S2, [X19 + 0x54]
	0x01E27140 BL 0x3C32E90
	0x01E27144 CBZ X0, 0x1E2731C
	0x01E27148 MOV V0.16B, V10.16B
	0x01E2714C MOV V1.16B, V9.16B
	0x01E27150 MOV V2.16B, V8.16B
	0x01E27154 MOV X1, X31
	0x01E27158 BL 0x3C3DE4C
	0x01E2715C STP S0, S1, [X19 + 0x58]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X22, 0x25B3000
	017 Move W8, [X22+3661]
	018 Move W21, W2
	019 Move V8, V0
	020 Move X19, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x22D5000
	027 Move X0, [X0+2312]
	028 Call 0x1C17CF4
	029 Move X0, 0x22D5000
	030 Move X0, [X0+2336]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+3661], W8
	034 Move X22, 0x25B3000
	035 Move V9, [X20+168]
	036 Move W8, [X22+1925]
	037 Move V10, [X20+176]
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x22CE000
	041 Move X0, [X0+1448]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X22+1925], W8
	045 Move X8, 0x22CE000
	046 Move X8, [X8+1448]
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X8, -20164608
	053 NotImplemented "Instruction INVALID not yet implemented."
	054 Move V2, [X8+380]
	055 Move X22, 0x22CE000
	056 Multiply S1, S10, S10
	057 NotImplemented "Instruction FADDP not yet implemented."
	058 Move X22, [X22+1440]
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X23, 0x25B3000
	063 Move [X31+16], S8
	064 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	065 NotImplemented "Instruction INVALID not yet implemented."
	066 NotImplemented "Instruction FDIV not yet implemented."
	067 Move W8, [X23+1923]
	068 Compare W8, 0
	069 JumpIfNotEqual {75}
	070 Move X0, 0x22CE000
	071 Move X0, [X0+1440]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move [X23+1923], W8
	075 Move X8, [X22]
	076 Move X8, [X8+184]
	077 Move V11, [X8]
	078 Move V12, [X8+8]
	079 Compare X19, 0
	080 JumpIfEqual {191}
	081 Move V13, [X19+112]
	082 Move V8, [X19+120]
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 Move V14, [X20+188]
	085 Move V15, [X20+264]
	086 Compare W21, 0
	087 JumpIfEqual {102}
	088 Move W8, [X23+1923]
	089 Compare W8, 0
	090 JumpIfNotEqual {98}
	091 Move X0, 0x22CE000
	092 Move X0, [X0+1440]
	093 Move [X31+8], D5
	094 Call 0x1C17CF4
	095 Move V5, [X31+8]
	096 Move W8, 1
	097 Move [X23+1923], W8
	098 Move X8, [X22]
	099 Move X8, [X8+184]
	100 Add X9, X8, 4
	101 Add X10, X8, 8
	102 Add X8, X20, 240
	103 Add X9, X20, 244
	104 Add X10, X20, 248
	105 Move X0, [X19+104]
	106 Compare X0, 0
	107 JumpIfEqual {191}
	108 NotImplemented "Instruction INVALID not yet implemented."
	109 Multiply S1, S12, S8
	110 NotImplemented "Instruction FADDP not yet implemented."
	111 Move X21, 0x22D4000
	112 Move V2, [X31+16]
	113 Add S0, S1, S0
	114 Move V4, [X8]
	115 Move X21, [X21+2336]
	116 Move V1, [X9]
	117 Move S3, W31
	118 NotImplemented "Instruction FMAXNM not yet implemented."
	119 NotImplemented "Instruction INVALID not yet implemented."
	120 Multiply S0, S12, S0
	121 Move V8, [X10]
	122 Move V4.S[1], V1.S[0]
	123 Subtract V1, V9, V3
	124 Subtract S0, S10, S0
	125 Multiply S2, S15, S2
	126 Add V1, V5, V1
	127 Add S0, S14, S0
	128 Move W20, W31
	129 Move [X31+1], V4
	130 NotImplemented "Instruction INVALID not yet implemented."
	131 Multiply S10, S2, S0
	132 Move S11, 1
	133 Move W8, [X0+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X2, [X21]
	136 Move W1, W20
	137 Call List`1<Object>.get_Item, X0, X1
	138 Compare X0, 0
	139 JumpIfEqual {191}
	140 Move W8, [X0+24]
	141 Move TEMP, X8
	142 And TEMP, TEMP, -2147483648
	143 Compare TEMP, -2147483648
	144 JumpIfEqual {178}
	145 Move V4, [X0+44]
	146 Move V5, [X31+1]
	147 Move V0, [X0+64]
	148 Move V1, [X0+72]
	149 NotImplemented "Instruction LDUR not yet implemented."
	150 Move V3, [X0+84]
	151 Move V6, [X0+32]
	152 Move W8, [X0+60]
	153 NotImplemented "Instruction INVALID not yet implemented."
	154 Multiply S4, S8, S4
	155 Add V7, V0, V5
	156 Add S16, S1, S4
	157 Move [X0+76], D7
	158 Move [X0+84], S16
	159 Compare W8, 0
	160 JumpIfEqual {165}
	161 Move V7, [X0+48]
	162 Move [X0+60], W31
	163 Add S6, S6, S7
	164 NotImplemented "Instruction FMIN not yet implemented."
	165 Subtract V2, V0, V2
	166 Subtract S3, S1, S3
	167 Subtract S6, S11, S6
	168 NotImplemented "Instruction INVALID not yet implemented."
	169 Multiply S3, S3, S6
	170 Add V2, V9, V2
	171 Add S3, S10, S3
	172 Add V2, V5, V2
	173 Add S3, S4, S3
	174 Add V0, V0, V2
	175 Add S1, S1, S3
	176 Move [X0+64], D0
	177 Move [X0+72], S1
	178 Add X8, X0, 64
	179 Move W9, [X8+8]
	180 Move X10, [X8]
	181 Move W11, [X0+136]
	182 Move X12, [X0+128]
	183 Move [X0+84], W9
	184 Move [X0+76], X10
	185 Move [X8+8], W11
	186 Move [X8], X12
	187 Move X0, [X19+104]
	188 Add W20, W20, 1
	189 Compare X0, 0
	190 JumpIfNotEqual {133}
	191 Call 0x1C17F20
	192 Move X20, [X31+128]
	193 Move X19, [X31+136]
	194 Move X22, [X31+112]
	195 Move X21, [X31+120]
	196 Move X30, [X31+96]
	197 Move X23, [X31+104]
	198 Move D9, [X31+80]
	199 Move D8, [X31+88]
	200 Move D11, [X31+64]
	201 Move D10, [X31+72]
	202 Move D13, [X31+48]
	203 Move D12, [X31+56]
	204 Move D15, [X31+32]
	205 Move D14, [X31+40]
	206 Add X31, X31, 144
	207 Return 

Method: System.Void UpdateParticles2(System.Single timeVar)

Disassembly:
	0x01E25FB0 LDRB W8, [X23 + 0x783]
	0x01E25FB4 CBNZ W8, 0x1E25FD4
	0x01E25FB8 ADRP X0, 0x22CE000
	0x01E25FBC LDR X0, [X0 + 0x5A0]
	0x01E25FC0 STR D5, [X31 + 0x8]
	0x01E25FC4 BL 0x1C16CF4
	0x01E25FC8 LDR V5, [X31 + 0x8]
	0x01E25FCC MOVZ W8, 0x1
	0x01E25FD0 STRB W8, [X23 + 0x783]
	0x01E25FD4 LDR X8, [X22]
	0x01E25FD8 LDR X8, [X8 + 0xB8]
	0x01E25FDC ADD X9, X8, 0x4
	0x01E25FE0 ADD X10, X8, 0x8
	0x01E25FE4 B 0x1E25FF4
	0x01E25FE8 ADD X8, X20, 0xF0
	0x01E25FEC ADD X9, X20, 0xF4
	0x01E25FF0 ADD X10, X20, 0xF8
	0x01E25FF4 LDR X0, [X19 + 0x68]
	0x01E25FF8 CBZ X0, 0x1E26138
	0x00000000 INVALID
	0x01E26000 FMUL S1, S12, S8
	0x01E26004 FADDP S0, V0.2S
	0x01E26008 ADRP X21, 0x22D4000
	0x01E2600C LDR V2, [X31 + 0x10]
	0x01E26010 FADD S0, S1, S0
	0x01E26014 LDR V4, [X8]
	0x01E26018 LDR X21, [X21 + 0x920]
	0x01E2601C LDR V1, [X9]
	0x01E26020 FMOV S3, W31
	0x01E26024 FMAXNM S0, S0, S3
	0x00000000 INVALID
	0x01E2602C FMUL S0, S12, S0
	0x01E26030 LDR V8, [X10]
	0x01E26034 MOV V4.S[1], V1.S[0]
	0x01E26038 FSUB V1.2S, V9.2S, V3.2S
	0x01E2603C FSUB S0, S10, S0
	0x01E26040 FMUL S2, S15, S2
	0x01E26044 FADD V1.2S, V5.2S, V1.2S
	0x01E26048 FADD S0, S14, S0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25B4000
	007 Move W8, [X20+3662]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22D6000
	015 Move X0, [X0+2224]
	016 Call 0x1C17CF4
	017 Move X0, 0x22D6000
	018 Move X0, [X0+2248]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3662], W8
	022 Move X0, [X19+288]
	023 Compare X0, 0
	024 JumpIfEqual {41}
	025 Move X21, 0x22D6000
	026 Move X21, [X21+2248]
	027 Move W20, W31
	028 Move W8, [X0+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X2, [X21]
	031 Move W1, W20
	032 Call List`1<Object>.get_Item, X0, X1
	033 Move X1, X0
	034 Move X0, X19
	035 Move V0, V8
	036 Call DynamicBone.UpdateParticles2, X0, X1, V0
	037 Move X0, [X19+288]
	038 Add W20, W20, 1
	039 Compare X0, 0
	040 JumpIfNotEqual {28}
	041 Call 0x1C17F20
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 Move V8, [X31+48]
	047 Return 

Method: System.Void UpdateParticles2(DynamicBone/ParticleTree pt, System.Single timeVar)

Disassembly:
	0x01E27160 STR S2, [X19 + 0x60]
	0x01E27164 ADRP X20, 0x25B1000
	0x01E27168 LDP S11, S12, [X19 + 0x4C]
	0x01E2716C LDRB W8, [X20 + 0x784]
	0x01E27170 LDR V13, [X19 + 0x54]
	0x01E27174 MOV V8.16B, V0.16B
	0x01E27178 MOV V9.16B, V1.16B
	0x01E2717C MOV V10.16B, V2.16B
	0x01E27180 CBNZ W8, 0x1E27198
	0x01E27184 ADRP X0, 0x22CC000
	0x01E27188 LDR X0, [X0 + 0x5A8]
	0x01E2718C BL 0x1C16CF4
	0x01E27190 MOVZ W8, 0x1
	0x01E27194 STRB W8, [X20 + 0x784]
	0x01E27198 ADRP X8, 0x22CC000
	0x01E2719C LDR X8, [X8 + 0x5A8]
	0x01E271A0 FSUB S11, S8, S11
	0x01E271A4 FSUB S9, S9, S12
	0x01E271A8 FSUB S8, S10, S13
	0x01E271AC LDR X0, [X8]
	0x01E271B0 LDR W8, [X0 + 0xE0]
	0x01E271B4 CBNZ W8, 0x1E271BC
	0x01E271B8 BL 0x1C16DFC
	0x01E271BC FMUL S0, S11, S11
	0x01E271C0 FMUL S1, S9, S9
	0x01E271C4 LDR W8, [X19 + 0x30]
	0x01E271C8 FADD S0, S0, S1
	0x01E271CC FMUL S1, S8, S8
	0x01E271D0 FADD S0, S0, S1
	0x01E271D4 FSQRT S0, S0
	0x01E271D8 STR S0, [X19 + 0x64]
	0x01E271DC CBZ W8, 0x1E271E8
	0x01E271E0 MOVZ W8, 0x3
	0x01E271E4 B 0x1E27300
	0x01E271E8 MOVZ W8, 0x2
	0x01E271EC B 0x1E27300
	0x01E271F0 FADD S1, S3, S8
	0x01E271F4 FSUB S9, S8, S0
	0x01E271F8 MOV V8.16B, V1.16B
	0x01E271FC B 0x1E27218
	0x01E27200 FADD S1, S3, S10
	0x01E27204 FSUB S12, S10, S0
	0x01E27208 MOV V10.16B, V1.16B
	0x01E2720C MOV V9.16B, V8.16B
	0x01E27210 B 0x1E2721C
	0x01E27214 MOV V9.16B, V8.16B
	0x01E27218 MOV V12.16B, V10.16B
	0x01E2721C MOV V13.16B, V11.16B
	0x01E27220 MOV X0, X19
	0x01E27224 MOV X1, X31
	0x01E27228 BL 0x3C32E90
	0x01E2722C CBZ X0, 0x1E2731C
	0x01E27230 MOV V0.16B, V11.16B
	0x01E27234 MOV V1.16B, V10.16B
	0x01E27238 MOV V2.16B, V8.16B
	0x01E2723C MOV X1, X31
	0x01E27240 BL 0x3C3DE4C
	0x01E27244 MOV X0, X19
	0x01E27248 MOV X1, X31
	0x01E2724C STP S0, S1, [X19 + 0x4C]
	0x01E27250 STR S2, [X19 + 0x54]
	0x01E27254 BL 0x3C32E90
	0x01E27258 CBZ X0, 0x1E2731C
	0x01E2725C MOV V0.16B, V13.16B
	0x01E27260 MOV V1.16B, V12.16B
	0x01E27264 MOV V2.16B, V9.16B
	0x01E27268 MOV X1, X31
	0x01E2726C BL 0x3C3DE4C
	0x01E27270 STP S0, S1, [X19 + 0x58]
	0x01E27274 STR S2, [X19 + 0x60]
	0x01E27278 ADRP X20, 0x25B1000
	0x01E2727C LDP S11, S12, [X19 + 0x4C]
	0x01E27280 LDRB W8, [X20 + 0x784]
	0x01E27284 LDR V13, [X19 + 0x54]
	0x01E27288 MOV V8.16B, V0.16B
	0x01E2728C MOV V9.16B, V1.16B
	0x01E27290 MOV V10.16B, V2.16B
	0x01E27294 CBNZ W8, 0x1E272AC
	0x01E27298 ADRP X0, 0x22CC000
	0x01E2729C LDR X0, [X0 + 0x5A8]
	0x01E272A0 BL 0x1C16CF4
	0x01E272A4 MOVZ W8, 0x1
	0x01E272A8 STRB W8, [X20 + 0x784]
	0x01E272AC ADRP X8, 0x22CC000
	0x01E272B0 LDR X8, [X8 + 0x5A8]
	0x01E272B4 FSUB S11, S8, S11
	0x01E272B8 FSUB S9, S9, S12
	0x01E272BC FSUB S8, S10, S13
	0x01E272C0 LDR X0, [X8]
	0x01E272C4 LDR W8, [X0 + 0xE0]
	0x01E272C8 CBNZ W8, 0x1E272D0
	0x01E272CC BL 0x1C16DFC
	0x01E272D0 FMUL S0, S11, S11
	0x01E272D4 FMUL S1, S9, S9
	0x01E272D8 LDR W8, [X19 + 0x30]
	0x01E272DC FADD S0, S0, S1
	0x01E272E0 FMUL S1, S8, S8
	0x01E272E4 FADD S0, S0, S1
	0x01E272E8 FSQRT S0, S0
	0x01E272EC STR S0, [X19 + 0x64]
	0x01E272F0 CBZ W8, 0x1E272FC
	0x01E272F4 MOVZ W8, 0x5
	0x01E272F8 B 0x1E27300
	0x01E272FC MOVZ W8, 0x4
	0x01E27300 STR W8, [X19 + 0x68]
	0x01E27304 LDP X20, X19, [X31 + 0x40]
	0x01E27308 LDR X30, [X31 + 0x30]
	0x01E2730C LDP D9, D8, [X31 + 0x20]
	0x01E27310 LDP D11, D10, [X31 + 0x10]
	0x01E27314 LDP D13, D12, [X31], #0x50
	0x01E27318 RET
	0x01E2731C BL 0x1C16F20
	0x01E27320 SUB X31, X31, 0x20
	0x01E27324 STR X30, [X31 + 0x10]
	0x01E27328 LDR W8, [X0 + 0x68]
	0x01E2732C CMP W8, 0x5
	0x01E27330 B.HI 0x1E27368
	0x01E27334 ADRP X9, 0xFFFFFFFFFED06000
	0x01E27338 ADD X9, X9, 0xA74
	0x01E2733C ADR X10, 0x10
	0x01E27340 LDRB W11, [X9, X8, LSL]
	0x01E27344 ADD X10, X10, X11, 0x2, LSL
	0x01E27348 BR X10
	0x01E2734C LDP S1, S2, [X0 + 0x4C]
	0x01E27350 LDR V3, [X0 + 0x54]
	0x01E27354 LDR V4, [X0 + 0x44]
	0x01E27358 LDR X30, [X31 + 0x10]
	0x01E2735C MOV X0, X1
	0x01E27360 ADD X31, X31, 0x20
	0x01E27364 B 0x1E27430
	0x01E27368 MOV W0, W31
	0x01E2736C B 0x1E27424
	0x01E27370 LDP S1, S2, [X0 + 0x4C]
	0x01E27374 LDR V3, [X0 + 0x54]
	0x01E27378 LDR V4, [X0 + 0x44]
	0x01E2737C LDR X30, [X31 + 0x10]
	0x01E27380 MOV X0, X1
	0x01E27384 ADD X31, X31, 0x20
	0x01E27388 B 0x1E274A0
	0x01E2738C LDP S1, S2, [X0 + 0x4C]
	0x01E27390 LDP S3, S4, [X0 + 0x54]
	0x01E27394 LDP S5, S6, [X0 + 0x5C]
	0x01E27398 LDR V7, [X0 + 0x44]
	0x01E2739C LDR V16, [X0 + 0x64]
	0x01E273A0 MOV X0, X1
	0x01E273A4 STR S16, [X31]
	0x01E273A8 BL 0x1E27500
	0x01E273AC B 0x1E27420
	0x01E273B0 LDP S1, S2, [X0 + 0x4C]
	0x01E273B4 LDP S3, S4, [X0 + 0x54]
	0x01E273B8 LDP S5, S6, [X0 + 0x5C]
	0x01E273BC LDR V7, [X0 + 0x44]
	0x01E273C0 LDR V16, [X0 + 0x64]
	0x01E273C4 MOV X0, X1
	0x01E273C8 STR S16, [X31]
	0x01E273CC BL 0x1E27674
	0x01E273D0 B 0x1E27420
	0x01E273D4 LDP S1, S2, [X0 + 0x4C]
	0x01E273D8 LDP S3, S4, [X0 + 0x54]
	0x01E273DC LDP S5, S6, [X0 + 0x5C]
	0x01E273E0 LDP S7, S16, [X0 + 0x44]
	0x01E273E4 LDR V17, [X0 + 0x64]
	0x01E273E8 MOV X0, X1
	0x01E273EC STR S16, [X31]
	0x01E273F0 STR S17, [X31 + 0x8]
	0x01E273F4 BL 0x1E277C8
	0x01E273F8 B 0x1E27420
	0x01E273FC LDP S1, S2, [X0 + 0x4C]
	0x01E27400 LDP S3, S4, [X0 + 0x54]
	0x01E27404 LDP S5, S6, [X0 + 0x5C]
	0x01E27408 LDP S7, S16, [X0 + 0x44]
	0x01E2740C LDR V17, [X0 + 0x64]
	0x01E27410 MOV X0, X1
	0x01E27414 STR S16, [X31]
	0x01E27418 STR S17, [X31 + 0x8]
	0x01E2741C BL 0x1E27994
	0x01E27420 AND W0, W0, 0x1
	0x01E27424 LDR X30, [X31 + 0x10]
	0x01E27428 ADD X31, X31, 0x20
	0x01E2742C RET
	0x01E27430 LDR V5, [X0]
	0x01E27434 LDR V6, [X0 + 0x8]
	0x01E27438 FADD S0, S0, S4
	0x01E2743C MOV V1.S[1], V2.S[0]
	0x01E27440 FSUB V2.2S, V5.2S, V1.2S
	0x01E27444 FSUB S4, S6, S3
	0x00000000 INVALID
	0x01E2744C FMUL S6, S4, S4
	0x01E27450 FADDP S5, V5.2S
	0x01E27454 FADD S5, S5, S6
	0x01E27458 FMUL S6, S0, S0
	0x01E2745C FCMP S5, 0x0
	0x01E27460 CSET W8, GT
	0x01E27464 FCMP S5, S6
	0x01E27468 CSET W9, MI
	0x01E2746C AND W8, W8, W9, 0x0
	0x01E27470 CMP W8, 0x1
	0x01E27474 B.NE 0x1E27498
	0x01E27478 FSQRT S5, S5
	0x01E2747C FDIV S0, S0, S5
	0x00000000 INVALID
	0x01E27484 FMUL S0, S4, S0
	0x01E27488 FADD V1.2S, V1.2S, V2.2S
	0x01E2748C FADD S0, S3, S0
	0x01E27490 STR D1, [X0]
	0x01E27494 STR S0, [X0 + 0x8]
	0x01E27498 MOV W0, W8
	0x01E2749C RET
	0x01E274A0 LDR V5, [X0]
	0x01E274A4 LDR V6, [X0 + 0x8]
	0x01E274A8 FSUB S4, S4, S0
	0x01E274AC MOV V1.S[1], V2.S[0]
	0x01E274B0 FSUB V2.2S, V5.2S, V1.2S
	0x01E274B4 FSUB S5, S6, S3
	0x00000000 INVALID
	0x01E274BC FADDP S6, V6.2S
	0x01E274C0 FMUL S7, S5, S5
	0x01E274C4 FMUL S0, S4, S4
	0x01E274C8 FADD S6, S6, S7
	0x01E274CC FCMP S6, S0
	0x01E274D0 B.LE 0x1E274F4
	0x01E274D4 FSQRT S7, S6
	0x01E274D8 FDIV S4, S4, S7
	0x00000000 INVALID
	0x01E274E0 FMUL S4, S5, S4
	0x01E274E4 FADD V1.2S, V1.2S, V2.2S
	0x01E274E8 FADD S2, S3, S4
	0x01E274EC STR D1, [X0]
	0x01E274F0 STR S2, [X0 + 0x8]
	0x01E274F4 FCMP S6, S0
	0x01E274F8 CSET W0, GT
	0x01E274FC RET
	0x01E27500 LDP S18, S17, [X0]
	0x01E27504 FADD S0, S0, S7
	0x01E27508 LDR V7, [X0 + 0x8]
	0x01E2750C FSUB S22, S4, S1
	0x01E27510 FSUB S23, S5, S2
	0x01E27514 FSUB S21, S18, S1
	0x01E27518 FSUB S20, S17, S2
	0x01E2751C FSUB S24, S6, S3
	0x01E27520 FSUB S19, S7, S3
	0x01E27524 FMUL S16, S22, S21
	0x01E27528 FMUL S25, S23, S20
	0x01E2752C FADD S16, S16, S25
	0x01E27530 FMUL S25, S24, S19
	0x01E27534 FADD S25, S25, S16
	0x01E27538 FCMP S25, 0x0
	0x01E2753C FMUL S16, S0, S0
	0x01E27540 B.LS 0x1E275C0
	0x01E27544 LDR V1, [X31]
	0x01E27548 FMUL S1, S1, S1
	0x01E2754C FCMP S25, S1
	0x01E27550 B.GE 0x1E2760C
	0x01E27554 FDIV S1, S25, S1
	0x01E27558 FMUL S2, S22, S1
	0x01E2755C FMUL S3, S23, S1
	0x01E27560 FMUL S4, S24, S1
	0x01E27564 FSUB S1, S21, S2
	0x01E27568 FSUB S2, S20, S3
	0x01E2756C FSUB S3, S19, S4
	0x01E27570 FMUL S4, S1, S1
	0x01E27574 FMUL S5, S2, S2
	0x01E27578 FADD S4, S4, S5
	0x01E2757C FMUL S5, S3, S3
	0x01E27580 FADD S4, S5, S4
	0x01E27584 FCMP S4, 0x0
	0x01E27588 MOV W8, W31
	0x01E2758C B.LE 0x1E2766C
	0x01E27590 FCMP S4, S16
	0x01E27594 B.PL 0x1E2766C
	0x01E27598 FSQRT S4, S4
	0x01E2759C FSUB S0, S0, S4
	0x01E275A0 FDIV S0, S0, S4
	0x01E275A4 FMUL S1, S1, S0
	0x01E275A8 FMUL S2, S2, S0
	0x01E275AC FMUL S0, S3, S0
	0x01E275B0 FADD S1, S18, S1
	0x01E275B4 FADD S2, S17, S2
	0x01E275B8 FADD S0, S7, S0
	0x01E275BC B 0x1E27660
	0x01E275C0 FMUL S4, S21, S21
	0x01E275C4 FMUL S5, S20, S20
	0x01E275C8 FADD S4, S4, S5
	0x01E275CC FMUL S5, S19, S19
	0x01E275D0 FADD S4, S4, S5
	0x01E275D4 FCMP S4, 0x0
	0x01E275D8 MOV W8, W31
	0x01E275DC B.LE 0x1E2766C
	0x01E275E0 FCMP S4, S16
	0x01E275E4 B.PL 0x1E2766C
	0x01E275E8 FSQRT S4, S4
	0x01E275EC FDIV S0, S0, S4
	0x01E275F0 FMUL S4, S21, S0
	0x01E275F4 FMUL S5, S20, S0
	0x01E275F8 FMUL S0, S19, S0
	0x01E275FC FADD S1, S1, S4
	0x01E27600 FADD S2, S2, S5
	0x01E27604 FADD S0, S3, S0
	0x01E27608 B 0x1E27660
	0x01E2760C FSUB S1, S18, S4
	0x01E27610 FSUB S2, S17, S5
	0x01E27614 FSUB S3, S7, S6
	0x01E27618 FMUL S7, S1, S1
	0x01E2761C FMUL S17, S2, S2
	0x01E27620 FADD S7, S7, S17
	0x01E27624 FMUL S17, S3, S3
	0x01E27628 FADD S7, S7, S17
	0x01E2762C FCMP S7, 0x0
	0x01E27630 MOV W8, W31
	0x01E27634 B.LE 0x1E2766C
	0x01E27638 FCMP S7, S16
	0x01E2763C B.PL 0x1E2766C
	0x01E27640 FSQRT S7, S7
	0x01E27644 FDIV S0, S0, S7
	0x01E27648 FMUL S1, S1, S0
	0x01E2764C FMUL S2, S2, S0
	0x01E27650 FMUL S0, S3, S0
	0x01E27654 FADD S1, S4, S1
	0x01E27658 FADD S2, S5, S2
	0x01E2765C FADD S0, S6, S0
	0x01E27660 MOVZ W8, 0x1
	0x01E27664 STP S1, S2, [X0]
	0x01E27668 STR S0, [X0 + 0x8]
	0x01E2766C MOV W0, W8
	0x01E27670 RET
	0x01E27674 LDP S17, S16, [X0]
	0x01E27678 FSUB S0, S7, S0
	0x01E2767C LDR V7, [X0 + 0x8]
	0x01E27680 FSUB S22, S4, S1
	0x01E27684 FSUB S23, S5, S2
	0x01E27688 FSUB S21, S17, S1
	0x01E2768C FSUB S20, S16, S2
	0x01E27690 FSUB S24, S6, S3
	0x01E27694 FSUB S19, S7, S3
	0x01E27698 FMUL S18, S22, S21
	0x01E2769C FMUL S25, S23, S20
	0x01E276A0 FADD S18, S18, S25
	0x01E276A4 FMUL S25, S24, S19
	0x01E276A8 FADD S25, S25, S18
	0x01E276AC FCMP S25, 0x0
	0x01E276B0 FMUL S18, S0, S0
	0x01E276B4 B.LS 0x1E27728
	0x01E276B8 LDR V1, [X31]
	0x01E276BC FMUL S1, S1, S1
	0x01E276C0 FCMP S25, S1
	0x01E276C4 B.GE 0x1E27768
	0x01E276C8 FDIV S1, S25, S1
	0x01E276CC FMUL S2, S22, S1
	0x01E276D0 FMUL S3, S23, S1
	0x01E276D4 FMUL S4, S24, S1
	0x01E276D8 FSUB S1, S21, S2
	0x01E276DC FSUB S2, S20, S3
	0x01E276E0 FSUB S3, S19, S4
	0x01E276E4 FMUL S4, S1, S1
	0x01E276E8 FMUL S5, S2, S2
	0x01E276EC FADD S4, S4, S5
	0x01E276F0 FMUL S5, S3, S3
	0x01E276F4 FADD S4, S5, S4
	0x01E276F8 FCMP S4, S18
	0x01E276FC B.LE 0x1E277C0
	0x01E27700 FSQRT S4, S4
	0x01E27704 FSUB S0, S0, S4
	0x01E27708 FDIV S0, S0, S4
	0x01E2770C FMUL S1, S1, S0
	0x01E27710 FMUL S2, S2, S0
	0x01E27714 FMUL S0, S3, S0
	0x01E27718 FADD S1, S17, S1
	0x01E2771C FADD S2, S16, S2
	0x01E27720 FADD S0, S7, S0
	0x01E27724 B 0x1E277B0
	0x01E27728 FMUL S4, S21, S21
	0x01E2772C FMUL S5, S20, S20
	0x01E27730 FADD S4, S4, S5
	0x01E27734 FMUL S5, S19, S19
	0x01E27738 FADD S4, S4, S5
	0x01E2773C FCMP S4, S18
	0x01E27740 B.LE 0x1E277C0
	0x01E27744 FSQRT S4, S4
	0x01E27748 FDIV S0, S0, S4
	0x01E2774C FMUL S4, S21, S0
	0x01E27750 FMUL S5, S20, S0
	0x01E27754 FMUL S0, S19, S0
	0x01E27758 FADD S1, S1, S4
	0x01E2775C FADD S2, S2, S5
	0x01E27760 FADD S0, S3, S0
	0x01E27764 B 0x1E277B0
	0x01E27768 FSUB S1, S17, S4
	0x01E2776C FSUB S2, S16, S5
	0x01E27770 FSUB S3, S7, S6
	0x01E27774 FMUL S7, S1, S1
	0x01E27778 FMUL S16, S2, S2
	0x01E2777C FADD S7, S7, S16
	0x01E27780 FMUL S16, S3, S3
	0x01E27784 FADD S7, S7, S16
	0x01E27788 FCMP S7, S18
	0x01E2778C B.LE 0x1E277C0
	0x01E27790 FSQRT S7, S7
	0x01E27794 FDIV S0, S0, S7
	0x01E27798 FMUL S1, S1, S0
	0x01E2779C FMUL S2, S2, S0
	0x01E277A0 FMUL S0, S3, S0
	0x01E277A4 FADD S1, S4, S1
	0x01E277A8 FADD S2, S5, S2
	0x01E277AC FADD S0, S6, S0
	0x01E277B0 STP S1, S2, [X0]
	0x01E277B4 STR S0, [X0 + 0x8]
	0x01E277B8 MOVZ W0, 0x1
	0x01E277BC RET
	0x01E277C0 MOV W0, W31
	0x01E277C4 RET
	0x01E277C8 LDP S18, S17, [X0]
	0x01E277CC LDR V16, [X0 + 0x8]
	0x01E277D0 FSUB S22, S4, S1
	0x01E277D4 FSUB S23, S5, S2
	0x01E277D8 FSUB S21, S18, S1

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X29
	011 Move [X31+168], X30
	012 Move [X31+176], X28
	013 Move [X31+184], X27
	014 Move [X31+192], X26
	015 Move [X31+200], X25
	016 Move [X31+208], X24
	017 Move [X31+216], X23
	018 Move [X31+224], X22
	019 Move [X31+232], X21
	020 Move [X31+240], X20
	021 Move [X31+248], X19
	022 Move X21, 0x25B2000
	023 Move W8, [X21+3663]
	024 Move X19, X1
	025 Move X20, X0
	026 Move [X31+12], S0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {45}
	031 Move X0, 0x22D4000
	032 Move X0, [X0+2312]
	033 Call 0x1C17CF4
	034 Move X0, 0x22D4000
	035 Move X0, [X0+2320]
	036 Call 0x1C17CF4
	037 Move X0, 0x22D4000
	038 Move X0, [X0+2328]
	039 Call 0x1C17CF4
	040 Move X0, 0x22D4000
	041 Move X0, [X0+2336]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+3663], W8
	045 NotImplemented "Instruction MOVI not yet implemented."
	046 Move [X31+64], V0
	047 Move [X31+72], V0
	048 Move [X31+32], V0
	049 Move [X31+40], V0
	050 Compare X19, 0
	051 JumpIfEqual {443}
	052 Move X0, [X19+104]
	053 Compare X0, 0
	054 JumpIfEqual {443}
	055 Move X27, 0x22D4000
	056 Move X22, 0x22D4000
	057 Move X24, 0x22CD000
	058 Move X27, [X27+2336]
	059 Move X22, [X22+2328]
	060 Move X24, [X24+1448]
	061 Move X23, 0x25B2000
	062 Move S15, 1
	063 Move W21, 1
	064 Move W8, [X0+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X2, [X27]
	067 Move W1, W21
	068 Call List`1<Object>.get_Item, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {443}
	071 Move X25, X0
	072 Move X0, [X19+104]
	073 Compare X0, 0
	074 JumpIfEqual {443}
	075 Move W1, [X25+24]
	076 Move X2, [X27]
	077 Call List`1<Object>.get_Item, X0, X1
	078 Compare X0, 0
	079 JumpIfEqual {443}
	080 Move W8, [X25+61]
	081 Move X26, X0
	082 Compare W8, 0
	083 JumpIfEqual {105}
	084 Move V8, [X26+128]
	085 Move V9, [X26+136]
	086 Move V10, [X25+128]
	087 Move W8, [X23+1924]
	088 Move V11, [X25+136]
	089 Compare W8, 0
	090 JumpIfNotEqual {95}
	091 Move X0, X24
	092 Call 0x1C17CF4
	093 Move W8, 1
	094 Move [X23+1924], W8
	095 Move X0, [X24]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Subtract V0, V8, V10
	101 Subtract S2, S9, S11
	102 NotImplemented "Instruction INVALID not yet implemented."
	103 NotImplemented "Instruction FADDP not yet implemented."
	104 Multiply S0, S2, S2
	105 Move S0, [X25+88]
	106 Move S1, [X25+92]
	107 Move V2, [X25+96]
	108 Add X0, X26, 152
	109 Move X1, X31
	110 Call Matrix4x4.MultiplyVector, X0, X1
	111 Move W8, [X23+1924]
	112 Move V9, V0
	113 Move V10, V1
	114 Move V11, V2
	115 Compare W8, 0
	116 JumpIfNotEqual {121}
	117 Move X0, X24
	118 Call 0x1C17CF4
	119 Move W8, 1
	120 Move [X23+1924], W8
	121 Move X0, [X24]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Multiply S0, S9, S9
	127 Multiply S1, S10, S10
	128 Add S0, S0, S1
	129 Multiply S1, S11, S11
	130 Move V2, [X20+272]
	131 Add S0, S1, S0
	132 Move V1, [X25+40]
	133 NotImplemented "Instruction FSQRT not yet implemented."
	134 NotImplemented "Instruction FMIN not yet implemented."
	135 NotImplemented "Instruction FCMP not yet implemented."
	136 Move S2, W31
	137 NotImplemented "Instruction FCSEL not yet implemented."
	138 Move S3, -1
	139 Add S1, S1, S3
	140 Multiply S1, S1, S2
	141 Add S10, S1, S15
	142 NotImplemented "Instruction FCMP not yet implemented."
	143 Move V0, [X25+36]
	144 NotImplemented "Instruction FCMP not yet implemented."
	145 NotImplemented "Instruction LDUR not yet implemented."
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 Add X0, X31, 32
	150 Move [X31+64], V1
	151 Move [X31+72], V0
	152 Move W1, 3
	153 Move [X31+32], V3
	154 Move [X31+40], V2
	155 Move S0, [X26+64]
	156 Move S1, [X26+68]
	157 Move V2, [X26+72]
	158 Move S3, W31
	159 Move X2, X31
	160 Call Matrix4x4.SetColumn, X0, X1, X2
	161 Move W8, [X25+61]
	162 Move W9, 88
	163 Move W10, 92
	164 Move W11, 96
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W8, 140
	167 NotImplemented "Instruction CSEL not yet implemented."
	168 Move W9, 144
	169 NotImplemented "Instruction CSEL not yet implemented."
	170 Move W10, 148
	171 NotImplemented "Instruction CSEL not yet implemented."
	172 Move V2, [X25]
	173 Move V1, [X25]
	174 Move V0, [X25]
	175 Add X0, X31, 32
	176 Move X1, X31
	177 Call Matrix4x4.MultiplyPoint3x4, X0, X1
	178 Move V9, V2
	179 Move V6, [X25+64]
	180 Move V2, [X25+72]
	181 Move V3, [X25+36]
	182 Move V5, [X31+12]
	183 NotImplemented "Instruction FCMP not yet implemented."
	184 Move V0.S[1], V1.S[0]
	185 Subtract V1, V0, V6
	186 Subtract S4, S9, S2
	187 Multiply S3, S3, S5
	188 NotImplemented "Instruction INVALID not yet implemented."
	189 Multiply S3, S4, S3
	190 Add V11, V6, V1
	191 Add S8, S2, S3
	192 Move [X25+64], D11
	193 Move [X25+72], S8
	194 Move W8, [X23+1924]
	195 Compare W8, 0
	196 JumpIfNotEqual {203}
	197 Move X0, X24
	198 Move [X31+1], V0
	199 Call 0x1C17CF4
	200 Move V0, [X31+1]
	201 Move W8, 1
	202 Move [X23+1924], W8
	203 Move X0, [X24]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {210}
	207 Move [X31+1], V0
	208 Call 0x1C17DFC
	209 Move V0, [X31+1]
	210 Subtract V0, V0, V11
	211 Subtract S1, S9, S8
	212 Subtract S2, S15, S10
	213 NotImplemented "Instruction INVALID not yet implemented."
	214 Multiply S4, S1, S1
	215 Multiply S5, S14, S2
	216 NotImplemented "Instruction FADDP not yet implemented."
	217 Add S2, S4, S2
	218 NotImplemented "Instruction FSQRT not yet implemented."
	219 Add S3, S5, S5
	220 NotImplemented "Instruction FCMP not yet implemented."
	221 Move V4, [X25+64]
	222 Move V5, [X25+72]
	223 Subtract S3, S2, S3
	224 NotImplemented "Instruction FDIV not yet implemented."
	225 NotImplemented "Instruction INVALID not yet implemented."
	226 Multiply S1, S1, S2
	227 Add V0, V0, V4
	228 Add S1, S1, S5
	229 Move [X25+64], D0
	230 Move [X25+72], S1
	231 Move X0, [X20+304]
	232 Move [X31+16], W21
	233 Move X21, X19
	234 Move X19, X23
	235 Move X23, X27
	236 Compare X0, 0
	237 JumpIfEqual {264}
	238 Move V0, [X25+52]
	239 Move V1, [X20+264]
	240 Move W27, W31
	241 Add X28, X25, 64
	242 Multiply S9, S0, S1
	243 Move W8, [X0+24]
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Move X2, [X22]
	246 Move W1, W27
	247 Call List`1<Object>.get_Item, X0, X1
	248 Compare X0, 0
	249 JumpIfEqual {443}
	250 Move X8, [X0]
	251 Move W29, [X25+60]
	252 Move X1, X28
	253 Move V0, V9
	254 Move X9, [X8+408]
	255 Move X2, [X8+416]
	256 NotImplemented "Instruction BLR not yet implemented."
	257 And W8, W0, 1
	258 Or W8, W29, W8
	259 Move [X25+60], W8
	260 Move X0, [X20+304]
	261 Add W27, W27, 1
	262 Compare X0, 0
	263 JumpIfNotEqual {243}
	264 Move W8, [X20+216]
	265 Compare W8, 0
	266 JumpIfEqual {307}
	267 Add X0, X26, 152
	268 Subtract W1, W8, 1
	269 Move X2, X31
	270 Call Matrix4x4.GetColumn, X0, X1
	271 Move X8, 0x25B2000
	272 Move W8, [X8+3673]
	273 Move V9, V0
	274 Move V10, V1
	275 Move V11, V2
	276 Move V12, V3
	277 Move X27, X23
	278 Compare W8, 0
	279 JumpIfNotEqual {285}
	280 Move X0, X24
	281 Call 0x1C17CF4
	282 Move W8, 1
	283 Move X9, 0x25B2000
	284 Move [X9+3673], W8
	285 Move X0, [X24]
	286 Move X23, X19
	287 Move W8, [X0+224]
	288 Compare W8, 0
	289 JumpIfNotEqual {291}
	290 Call 0x1C17DFC
	291 Multiply S2, S9, S9
	292 Multiply S3, S10, S10
	293 Move X8, -20168704
	294 Multiply S0, S12, S12
	295 Multiply S1, S11, S11
	296 Add S2, S2, S3
	297 Move V12, [X8+380]
	298 Add S1, S1, S2
	299 Add S0, S0, S1
	300 NotImplemented "Instruction FSQRT not yet implemented."
	301 NotImplemented "Instruction FCMP not yet implemented."
	302 Move X19, X21
	303 Move W21, [X31+16]
	304 NotImplemented "Instruction FDIV not yet implemented."
	305 NotImplemented "Instruction FDIV not yet implemented."
	306 NotImplemented "Instruction FDIV not yet implemented."
	307 Move S8, [X25+64]
	308 Move S9, [X25+68]
	309 Move V10, [X25+72]
	310 Move X27, X23
	311 Move X23, X19
	312 Move X19, X21
	313 Move W21, [X31+16]
	314 Move X8, 0x25B2000
	315 Move W8, [X8+3674]
	316 Move W21, [X31+16]
	317 Compare W8, 0
	318 JumpIfNotEqual {325}
	319 Move X0, 0x22D4000
	320 Move X0, [X0+2464]
	321 Call 0x1C17CF4
	322 Move W8, 1
	323 Move X9, 0x25B2000
	324 Move [X9+3674], W8
	325 Move X8, 0x22D4000
	326 Move X8, [X8+2464]
	327 Move X8, [X8]
	328 Move X8, [X8+184]
	329 Move S15, [X8]
	330 Move S8, [X8+4]
	331 Move V13, [X8+8]
	332 Move X8, 0x25B2000
	333 Move S9, [X26+64]
	334 Move S10, [X26+68]
	335 Move W8, [X8+1925]
	336 Move V11, [X26+72]
	337 Compare W8, 0
	338 JumpIfNotEqual {344}
	339 Move X0, X24
	340 Call 0x1C17CF4
	341 Move W8, 1
	342 Move X9, 0x25B2000
	343 Move [X9+1925], W8
	344 Move X0, [X24]
	345 Move W8, [X0+224]
	346 Compare W8, 0
	347 JumpIfNotEqual {349}
	348 Call 0x1C17DFC
	349 Multiply S0, S15, S15
	350 Multiply S1, S8, S8
	351 Add S0, S0, S1
	352 Multiply S1, S13, S13
	353 Add S0, S1, S0
	354 NotImplemented "Instruction FSQRT not yet implemented."
	355 NotImplemented "Instruction FCMP not yet implemented."
	356 NotImplemented "Instruction FDIV not yet implemented."
	357 NotImplemented "Instruction FDIV not yet implemented."
	358 NotImplemented "Instruction FDIV not yet implemented."
	359 Move X8, 0x25B2000
	360 Move W8, [X8+1923]
	361 Compare W8, 0
	362 JumpIfNotEqual {369}
	363 Move X0, 0x22CD000
	364 Move X0, [X0+1440]
	365 Call 0x1C17CF4
	366 Move W8, 1
	367 Move X9, 0x25B2000
	368 Move [X9+1923], W8
	369 Move X8, 0x22CD000
	370 Move X8, [X8+1440]
	371 Move X8, [X8]
	372 Move X8, [X8+184]
	373 Move S0, [X8]
	374 Move S1, [X8+4]
	375 Move V2, [X8+8]
	376 Move S6, [X25+64]
	377 Move S7, [X25+68]
	378 Move V16, [X25+72]
	379 Multiply S3, S9, S0
	380 Multiply S4, S10, S1
	381 Multiply S5, S11, S2
	382 Add S3, S3, S4
	383 Add S3, S5, S3
	384 Multiply S4, S0, S6
	385 Multiply S5, S1, S7
	386 Add S4, S4, S5
	387 Multiply S5, S2, S16
	388 Add S4, S5, S4
	389 Subtract S3, S4, S3
	390 Multiply S0, S0, S3
	391 Multiply S1, S1, S3
	392 Multiply S2, S2, S3
	393 Move S15, 1
	394 Subtract S8, S6, S0
	395 Subtract S9, S7, S1
	396 Subtract S10, S16, S2
	397 Move [X25+64], S8
	398 Move [X25+72], S9
	399 Move [X25+72], S10
	400 Move S11, [X26+64]
	401 Move S12, [X26+68]
	402 Move W8, [X23+1924]
	403 Move V13, [X26+72]
	404 Compare W8, 0
	405 JumpIfNotEqual {410}
	406 Move X0, X24
	407 Call 0x1C17CF4
	408 Move W8, 1
	409 Move [X23+1924], W8
	410 Move X0, [X24]
	411 Move W8, [X0+224]
	412 Compare W8, 0
	413 JumpIfNotEqual {415}
	414 Call 0x1C17DFC
	415 Subtract S0, S11, S8
	416 Subtract S1, S12, S9
	417 Subtract S2, S13, S10
	418 Multiply S3, S0, S0
	419 Multiply S4, S1, S1
	420 Add S3, S3, S4
	421 Multiply S4, S2, S2
	422 Add S3, S3, S4
	423 NotImplemented "Instruction FSQRT not yet implemented."
	424 NotImplemented "Instruction FCMP not yet implemented."
	425 Move S4, [X25+64]
	426 Move S5, [X25+68]
	427 Move V6, [X25+72]
	428 Subtract S7, S3, S14
	429 NotImplemented "Instruction FDIV not yet implemented."
	430 Multiply S0, S0, S3
	431 Multiply S1, S1, S3
	432 Multiply S2, S2, S3
	433 Add S0, S0, S4
	434 Add S1, S1, S5
	435 Add S2, S2, S6
	436 Move [X25+64], S0
	437 Move [X25+72], S1
	438 Move [X25+72], S2
	439 Move X0, [X19+104]
	440 Add W21, W21, 1
	441 Compare X0, 0
	442 JumpIfNotEqual {64}
	443 Call 0x1C17F20
	444 Move X20, [X31+240]
	445 Move X19, [X31+248]
	446 Move X22, [X31+224]
	447 Move X21, [X31+232]
	448 Move X24, [X31+208]
	449 Move X23, [X31+216]
	450 Move X26, [X31+192]
	451 Move X25, [X31+200]
	452 Move X28, [X31+176]
	453 Move X27, [X31+184]
	454 Move X29, [X31+160]
	455 Move X30, [X31+168]
	456 Move D9, [X31+144]
	457 Move D8, [X31+152]
	458 Move D11, [X31+128]
	459 Move D10, [X31+136]
	460 Move D13, [X31+112]
	461 Move D12, [X31+120]
	462 Move D15, [X31+96]
	463 Move D14, [X31+104]
	464 Add X31, X31, 256
	465 Return 

Method: System.Void SkipUpdateParticles()

Disassembly:
	0x01E2604C MOV W20, W31
	0x01E26050 STR V4, [X31 + 0x1]
	0x00000000 INVALID
	0x01E26058 FMUL S10, S2, S0
	0x01E2605C FMOV S11, 1
	0x01E26060 LDR W8, [X0 + 0x18]
	0x01E26064 CMP W20, W8
	0x01E26068 B.GE 0x1E2613C
	0x01E2606C LDR X2, [X21]
	0x01E26070 MOV W1, W20
	0x01E26074 BL 0x301BCCC
	0x01E26078 CBZ X0, 0x1E26138
	0x01E2607C LDR W8, [X0 + 0x18]
	0x01E26080 TBNZ X8, 0x1F, 0x1E26108
	0x01E26084 LDR V4, [X0 + 0x2C]
	0x01E26088 LDR V5, [X31 + 0x1]
	0x01E2608C LDR V0, [X0 + 0x40]
	0x01E26090 LDR V1, [X0 + 0x48]
	0x01E26094 LDUR V2, [X0 + 0x4C]
	0x01E26098 LDR V3, [X0 + 0x54]
	0x01E2609C LDR V6, [X0 + 0x20]
	0x01E260A0 LDRB W8, [X0 + 0x3C]
	0x00000000 INVALID
	0x01E260A8 FMUL S4, S8, S4
	0x01E260AC FADD V7.2S, V0.2S, V5.2S
	0x01E260B0 FADD S16, S1, S4
	0x01E260B4 STUR D7, [X0 + 0x4C]
	0x01E260B8 STR S16, [X0 + 0x54]
	0x01E260BC CBZ W8, 0x1E260D0
	0x01E260C0 LDR V7, [X0 + 0x30]
	0x01E260C4 STRB W31, [X0 + 0x3C]
	0x01E260C8 FADD S6, S6, S7
	0x01E260CC FMIN S6, S6, S11
	0x01E260D0 FSUB V2.2S, V0.2S, V2.2S
	0x01E260D4 FSUB S3, S1, S3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25B3000
	006 Move W8, [X20+3664]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22D5000
	013 Move X0, [X0+2224]
	014 Call 0x1C17CF4
	015 Move X0, 0x22D5000
	016 Move X0, [X0+2248]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3664], W8
	020 Move X0, [X19+288]
	021 Compare X0, 0
	022 JumpIfEqual {38}
	023 Move X21, 0x22D5000
	024 Move X21, [X21+2248]
	025 Move W20, W31
	026 Move W8, [X0+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X2, [X21]
	029 Move W1, W20
	030 Call List`1<Object>.get_Item, X0, X1
	031 Move X1, X0
	032 Move X0, X19
	033 Call DynamicBone.SkipUpdateParticles, X0, X1
	034 Move X0, [X19+288]
	035 Add W20, W20, 1
	036 Compare X0, 0
	037 JumpIfNotEqual {26}
	038 Call 0x1C17F20
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 

Method: System.Void SkipUpdateParticles(DynamicBone/ParticleTree pt)

Disassembly:
	0x01E277DC FSUB S20, S17, S2
	0x01E277E0 FSUB S24, S6, S3
	0x01E277E4 FSUB S19, S16, S3
	0x01E277E8 FMUL S25, S22, S21
	0x01E277EC FMUL S26, S23, S20
	0x01E277F0 FADD S25, S25, S26
	0x01E277F4 FMUL S26, S24, S19
	0x01E277F8 FADD S25, S26, S25
	0x01E277FC FCMP S25, 0x0
	0x01E27800 B.LS 0x1E278D0
	0x01E27804 LDR V2, [X31 + 0x8]
	0x01E27808 LDR V1, [X31]
	0x01E2780C FMUL S3, S2, S2
	0x01E27810 FCMP S25, S3
	0x01E27814 B.GE 0x1E27924
	0x01E27818 FDIV S3, S25, S3
	0x01E2781C FDIV S4, S22, S2
	0x01E27820 FDIV S5, S23, S2
	0x01E27824 FDIV S6, S24, S2
	0x01E27828 FMUL S22, S22, S3
	0x01E2782C FMUL S23, S23, S3
	0x01E27830 FMUL S3, S24, S3
	0x01E27834 FMUL S26, S4, S21
	0x01E27838 FMUL S27, S5, S20
	0x01E2783C FMUL S6, S6, S19
	0x01E27840 FSUB S5, S21, S22
	0x01E27844 FSUB S4, S20, S23
	0x01E27848 FSUB S3, S19, S3
	0x01E2784C FADD S19, S26, S27
	0x01E27850 FMUL S20, S5, S5
	0x01E27854 FMUL S21, S4, S4
	0x01E27858 FADD S6, S6, S19
	0x01E2785C FMOV S25, 1
	0x01E27860 FMUL S22, S3, S3
	0x01E27864 FADD S19, S20, S21
	0x01E27868 FDIV S6, S6, S2
	0x01E2786C FMOV S24, W31
	0x01E27870 FADD S2, S22, S19
	0x01E27874 FMIN S19, S6, S25
	0x01E27878 FCMP S6, 0x0
	0x01E2787C FCSEL S6, S19, S24, PL
	0x01E27880 FCMP S2, 0x0
	0x01E27884 MOV W8, W31
	0x01E27888 B.LE 0x1E2798C
	0x01E2788C FSUB S1, S1, S7
	0x01E27890 FMUL S1, S1, S6
	0x01E27894 FADD S1, S1, S7
	0x01E27898 FADD S0, S1, S0
	0x01E2789C FMUL S1, S0, S0
	0x01E278A0 FCMP S2, S1
	0x01E278A4 B.PL 0x1E2798C
	0x01E278A8 FSQRT S1, S2
	0x01E278AC FSUB S0, S0, S1
	0x01E278B0 FDIV S0, S0, S1
	0x01E278B4 FMUL S1, S5, S0
	0x01E278B8 FMUL S2, S4, S0
	0x01E278BC FMUL S0, S3, S0
	0x01E278C0 FADD S1, S18, S1
	0x01E278C4 FADD S2, S17, S2
	0x01E278C8 FADD S0, S16, S0
	0x01E278CC B 0x1E27980
	0x01E278D0 FMUL S4, S21, S21
	0x01E278D4 FMUL S5, S20, S20
	0x01E278D8 FADD S4, S4, S5
	0x01E278DC FMUL S5, S19, S19
	0x01E278E0 FADD S4, S4, S5
	0x01E278E4 FCMP S4, 0x0
	0x01E278E8 MOV W8, W31
	0x01E278EC B.LE 0x1E2798C
	0x01E278F0 FADD S0, S0, S7
	0x01E278F4 FMUL S5, S0, S0
	0x01E278F8 FCMP S4, S5
	0x01E278FC B.PL 0x1E2798C
	0x01E27900 FSQRT S4, S4
	0x01E27904 FDIV S0, S0, S4
	0x01E27908 FMUL S4, S21, S0
	0x01E2790C FMUL S5, S20, S0
	0x01E27910 FMUL S0, S19, S0
	0x01E27914 FADD S1, S1, S4
	0x01E27918 FADD S2, S2, S5
	0x01E2791C FADD S0, S3, S0
	0x01E27920 B 0x1E27980
	0x01E27924 FSUB S2, S18, S4
	0x01E27928 FSUB S3, S17, S5
	0x01E2792C FSUB S7, S16, S6
	0x01E27930 FMUL S16, S2, S2
	0x01E27934 FMUL S17, S3, S3
	0x01E27938 FADD S16, S16, S17
	0x01E2793C FMUL S17, S7, S7
	0x01E27940 FADD S16, S16, S17
	0x01E27944 FCMP S16, 0x0
	0x01E27948 MOV W8, W31
	0x01E2794C B.LE 0x1E2798C
	0x01E27950 FADD S0, S0, S1
	0x01E27954 FMUL S1, S0, S0
	0x01E27958 FCMP S16, S1
	0x01E2795C B.PL 0x1E2798C
	0x01E27960 FSQRT S1, S16
	0x01E27964 FDIV S0, S0, S1
	0x01E27968 FMUL S1, S2, S0
	0x01E2796C FMUL S2, S3, S0
	0x01E27970 FMUL S0, S7, S0
	0x01E27974 FADD S1, S4, S1
	0x01E27978 FADD S2, S5, S2
	0x01E2797C FADD S0, S6, S0
	0x01E27980 MOVZ W8, 0x1
	0x01E27984 STP S1, S2, [X0]
	0x01E27988 STR S0, [X0 + 0x8]
	0x01E2798C MOV W0, W8
	0x01E27990 RET
	0x01E27994 LDP S18, S17, [X0]
	0x01E27998 LDR V16, [X0 + 0x8]
	0x01E2799C FSUB S22, S4, S1
	0x01E279A0 FSUB S23, S5, S2
	0x01E279A4 FSUB S21, S18, S1
	0x01E279A8 FSUB S20, S17, S2
	0x01E279AC FSUB S24, S6, S3
	0x01E279B0 FSUB S19, S16, S3
	0x01E279B4 FMUL S25, S22, S21
	0x01E279B8 FMUL S26, S23, S20
	0x01E279BC FADD S25, S25, S26
	0x01E279C0 FMUL S26, S24, S19
	0x01E279C4 FADD S25, S26, S25
	0x01E279C8 FCMP S25, 0x0
	0x01E279CC B.LS 0x1E27A90
	0x01E279D0 LDR V2, [X31 + 0x8]
	0x01E279D4 LDR V1, [X31]
	0x01E279D8 FMUL S3, S2, S2
	0x01E279DC FCMP S25, S3
	0x01E279E0 B.GE 0x1E27AD8
	0x01E279E4 FDIV S3, S25, S3
	0x01E279E8 FDIV S4, S22, S2
	0x01E279EC FDIV S5, S23, S2
	0x01E279F0 FDIV S6, S24, S2
	0x01E279F4 FMUL S22, S22, S3
	0x01E279F8 FMUL S23, S23, S3
	0x01E279FC FMUL S3, S24, S3
	0x01E27A00 FMUL S26, S4, S21
	0x01E27A04 FMUL S27, S5, S20
	0x01E27A08 FMUL S6, S6, S19
	0x01E27A0C FSUB S5, S21, S22
	0x01E27A10 FSUB S4, S20, S23
	0x01E27A14 FSUB S3, S19, S3
	0x01E27A18 FADD S19, S26, S27
	0x01E27A1C FMUL S20, S5, S5
	0x01E27A20 FMUL S21, S4, S4
	0x01E27A24 FADD S6, S6, S19
	0x01E27A28 FMOV S25, 1
	0x01E27A2C FMUL S22, S3, S3
	0x01E27A30 FADD S19, S20, S21
	0x01E27A34 FDIV S6, S6, S2
	0x01E27A38 FMOV S24, W31
	0x01E27A3C FADD S2, S22, S19
	0x01E27A40 FMIN S19, S6, S25
	0x01E27A44 FCMP S6, 0x0
	0x01E27A48 FCSEL S6, S19, S24, PL
	0x01E27A4C FSUB S1, S1, S7
	0x01E27A50 FMUL S1, S1, S6
	0x01E27A54 FADD S1, S1, S7
	0x01E27A58 FSUB S0, S1, S0
	0x01E27A5C FMUL S1, S0, S0
	0x01E27A60 FCMP S2, S1
	0x01E27A64 B.LE 0x1E27B38
	0x01E27A68 FSQRT S1, S2
	0x01E27A6C FSUB S0, S0, S1
	0x01E27A70 FDIV S0, S0, S1
	0x01E27A74 FMUL S1, S5, S0
	0x01E27A78 FMUL S2, S4, S0
	0x01E27A7C FMUL S0, S3, S0
	0x01E27A80 FADD S1, S18, S1
	0x01E27A84 FADD S2, S17, S2
	0x01E27A88 FADD S0, S16, S0
	0x01E27A8C B 0x1E27B28
	0x01E27A90 FMUL S4, S21, S21
	0x01E27A94 FMUL S5, S20, S20
	0x01E27A98 FSUB S0, S7, S0
	0x01E27A9C FADD S4, S4, S5
	0x01E27AA0 FMUL S5, S19, S19
	0x01E27AA4 FMUL S6, S0, S0
	0x01E27AA8 FADD S4, S4, S5
	0x01E27AAC FCMP S4, S6
	0x01E27AB0 B.LE 0x1E27B38
	0x01E27AB4 FSQRT S4, S4
	0x01E27AB8 FDIV S0, S0, S4
	0x01E27ABC FMUL S4, S21, S0
	0x01E27AC0 FMUL S5, S20, S0
	0x01E27AC4 FMUL S0, S19, S0
	0x01E27AC8 FADD S1, S1, S4
	0x01E27ACC FADD S2, S2, S5
	0x01E27AD0 FADD S0, S3, S0
	0x01E27AD4 B 0x1E27B28
	0x01E27AD8 FSUB S0, S1, S0
	0x01E27ADC FSUB S1, S18, S4
	0x01E27AE0 FSUB S2, S17, S5
	0x01E27AE4 FSUB S3, S16, S6
	0x01E27AE8 FMUL S7, S1, S1
	0x01E27AEC FMUL S17, S2, S2
	0x01E27AF0 FADD S7, S7, S17
	0x01E27AF4 FMUL S17, S3, S3
	0x01E27AF8 FMUL S16, S0, S0
	0x01E27AFC FADD S7, S7, S17
	0x01E27B00 FCMP S7, S16
	0x01E27B04 B.LE 0x1E27B38
	0x01E27B08 FSQRT S7, S7
	0x01E27B0C FDIV S0, S0, S7
	0x01E27B10 FMUL S1, S1, S0
	0x01E27B14 FMUL S2, S2, S0
	0x01E27B18 FMUL S0, S3, S0
	0x01E27B1C FADD S1, S4, S1
	0x01E27B20 FADD S2, S5, S2
	0x01E27B24 FADD S0, S6, S0
	0x01E27B28 STP S1, S2, [X0]
	0x01E27B2C STR S0, [X0 + 0x8]
	0x01E27B30 MOVZ W0, 0x1
	0x01E27B34 RET
	0x01E27B38 MOV W0, W31
	0x01E27B3C RET
	0x01E27B40 STP X30, X19, [X31 - 0x10]!
	0x01E27B44 MOV X1, X31
	0x01E27B48 MOV X19, X0
	0x01E27B4C BL 0x3C323D4
	0x01E27B50 TBZ X0, 0x0, 0x1E27BD8
	0x01E27B54 LDR X8, [X19]
	0x01E27B58 MOV X0, X19
	0x01E27B5C LDP X9, X1, [X8 + 0x188]
	0x01E27B60 BLR X9
	0x01E27B64 LDR W8, [X19 + 0x30]
	0x01E27B68 ADRP X9, 0xFFFFFFFFFECC2000
	0x01E27B6C ADRP X10, 0xFFFFFFFFFECC3000
	0x01E27B70 LDR V1, [X9 + 0xF90]
	0x01E27B74 LDR V2, [X10 + 0x30]
	0x01E27B78 FMOV S0, W31
	0x01E27B7C FMOV S3, 1
	0x01E27B80 CMP W8, 0x0
	0x01E27B84 FCSEL S1, S1, S0, EQ
	0x01E27B88 FCSEL S2, S2, S3, EQ
	0x01E27B8C FMOV S0, 1
	0x01E27B90 FMOV S3, 1
	0x01E27B94 MOV X0, X31
	0x01E27B98 BL 0x3C0D030
	0x01E27B9C LDR W8, [X19 + 0x68]
	0x01E27BA0 CMP W8, 0x5
	0x01E27BA4 B.HI 0x1E27BD8
	0x01E27BA8 MOVZ W9, 0x1
	0x01E27BAC LSLV W8, W9, W8
	0x01E27BB0 ANDS W31, W8, 0x3
	0x01E27BB4 B.NE 0x1E27BE0
	0x01E27BB8 ANDS W31, W8, 0xC
	0x01E27BBC B.EQ 0x1E27BF8
	0x01E27BC0 LDR V6, [X19 + 0x44]
	0x01E27BC4 LDP S0, S1, [X19 + 0x4C]
	0x01E27BC8 LDP S2, S3, [X19 + 0x54]

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+112], D15
	003 Move [X31+120], D14
	004 Move [X31+128], D13
	005 Move [X31+136], D12
	006 Move [X31+144], D11
	007 Move [X31+152], D10
	008 Move [X31+160], D9
	009 Move [X31+168], D8
	010 Move [X31+176], X29
	011 Move [X31+184], X30
	012 Move [X31+192], X28
	013 Move [X31+200], X27
	014 Move [X31+208], X26
	015 Move [X31+216], X25
	016 Move [X31+224], X24
	017 Move [X31+232], X23
	018 Move [X31+240], X22
	019 Move [X31+248], X21
	020 Move [X31+256], X20
	021 Move [X31+264], X19
	022 Move X21, 0x25B2000
	023 Move W8, [X21+3665]
	024 Move X19, X1
	025 Move X20, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0x22D4000
	031 Move X0, [X0+2312]
	032 Call 0x1C17CF4
	033 Move X0, 0x22D4000
	034 Move X0, [X0+2336]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+3665], W8
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X31+80], V0
	040 Move [X31+88], V0
	041 Move [X31+48], V0
	042 Move [X31+56], V0
	043 Compare X19, 0
	044 JumpIfEqual {275}
	045 Move X0, [X19+104]
	046 Compare X0, 0
	047 JumpIfEqual {275}
	048 Move X25, 0x22D4000
	049 Move X22, 0x22CD000
	050 Move X25, [X25+2336]
	051 Move X22, [X22+1448]
	052 Move W21, W31
	053 Move X26, 0x25B2000
	054 Move W27, 1
	055 Move S11, 1
	056 Move S12, W31
	057 Move S13, -1
	058 Move W28, 148
	059 Move W29, 96
	060 Move W8, [X0+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X2, [X25]
	063 Move W1, W21
	064 Call List`1<Object>.get_Item, X0, X1
	065 Compare X0, 0
	066 JumpIfEqual {275}
	067 Move W1, [X0+24]
	068 Move X23, X0
	069 Move TEMP, X1
	070 And TEMP, TEMP, -2147483648
	071 Compare TEMP, -2147483648
	072 JumpIfEqual {120}
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 Move V1, [X20+240]
	075 Move V2, [X23+84]
	076 Move V3, [X20+248]
	077 Add V0, V0, V1
	078 Move [X23+76], D0
	079 Add S2, S2, S3
	080 Move [X23+84], S2
	081 Move V1, [X23+64]
	082 Move V3, [X23+72]
	083 Move V0, [X20+240]
	084 Move V2, [X20+248]
	085 Add V0, V1, V0
	086 Add S1, S3, S2
	087 Move [X23+64], D0
	088 Move [X23+72], S1
	089 Move X0, [X19+104]
	090 Compare X0, 0
	091 JumpIfEqual {275}
	092 Move X2, [X25]
	093 Call List`1<Object>.get_Item, X0, X1
	094 Compare X0, 0
	095 JumpIfEqual {275}
	096 Move W8, [X23+61]
	097 Move X24, X0
	098 Compare W8, 0
	099 JumpIfEqual {128}
	100 Move V8, [X24+128]
	101 Move V9, [X24+136]
	102 Move V10, [X23+128]
	103 Move W8, [X26+1924]
	104 Move V14, [X23+136]
	105 Compare W8, 0
	106 JumpIfNotEqual {110}
	107 Move X0, X22
	108 Call 0x1C17CF4
	109 Move [X26+1924], W27
	110 Move X0, [X22]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Subtract V0, V8, V10
	116 Subtract S2, S9, S14
	117 NotImplemented "Instruction INVALID not yet implemented."
	118 NotImplemented "Instruction FADDP not yet implemented."
	119 Multiply S0, S2, S2
	120 Move X8, [X23+64]
	121 Move W9, [X23+72]
	122 Move X10, [X23+128]
	123 Move W11, [X23+136]
	124 Move [X23+76], X8
	125 Move [X23+84], W9
	126 Move [X23+64], X10
	127 Move [X23+72], W11
	128 Move S0, [X23+88]
	129 Move S1, [X23+92]
	130 Move V2, [X23+96]
	131 Add X0, X24, 152
	132 Move X1, X31
	133 Call Matrix4x4.MultiplyVector, X0, X1
	134 Move W8, [X26+1924]
	135 Move V8, V0
	136 Move V9, V1
	137 Move V10, V2
	138 Compare W8, 0
	139 JumpIfNotEqual {143}
	140 Move X0, X22
	141 Call 0x1C17CF4
	142 Move [X26+1924], W27
	143 Move X0, [X22]
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {148}
	147 Call 0x1C17DFC
	148 Multiply S0, S8, S8
	149 Multiply S1, S9, S9
	150 Add S0, S0, S1
	151 Multiply S1, S10, S10
	152 Move V2, [X20+272]
	153 Add S0, S1, S0
	154 Move V1, [X23+40]
	155 NotImplemented "Instruction FSQRT not yet implemented."
	156 NotImplemented "Instruction FMIN not yet implemented."
	157 NotImplemented "Instruction FCMP not yet implemented."
	158 NotImplemented "Instruction FCSEL not yet implemented."
	159 Add S1, S1, S13
	160 Multiply S1, S1, S2
	161 Add S10, S1, S11
	162 NotImplemented "Instruction FCMP not yet implemented."
	163 NotImplemented "Instruction LDUR not yet implemented."
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 NotImplemented "Instruction LDUR not yet implemented."
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 Add X0, X31, 48
	168 Move [X31+80], V1
	169 Move [X31+88], V0
	170 Move W1, 3
	171 Move [X31+48], V3
	172 Move [X31+56], V2
	173 Move S0, [X24+64]
	174 Move S1, [X24+68]
	175 Move V2, [X24+72]
	176 Move S3, W31
	177 Move X2, X31
	178 Call Matrix4x4.SetColumn, X0, X1, X2
	179 Move W8, [X23+61]
	180 Move W9, 88
	181 Move W10, 92
	182 Add X0, X31, 48
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move W8, 140
	185 NotImplemented "Instruction CSEL not yet implemented."
	186 Move W9, 144
	187 NotImplemented "Instruction CSEL not yet implemented."
	188 NotImplemented "Instruction CSEL not yet implemented."
	189 Move V2, [X23]
	190 Move V1, [X23]
	191 Move V0, [X23]
	192 Move X1, X31
	193 Call Matrix4x4.MultiplyPoint3x4, X0, X1
	194 Move V14, [X23+64]
	195 Move W8, [X26+1924]
	196 Move V15, [X23+72]
	197 Move V8, V2
	198 Compare W8, 0
	199 JumpIfNotEqual {207}
	200 Move X0, X22
	201 Move [X31+16], V1
	202 Move [X31+24], V0
	203 Call 0x1C17CF4
	204 Move V1, [X31+16]
	205 Move V0, [X31+32]
	206 Move [X26+1924], W27
	207 Move X0, [X22]
	208 Move W8, [X0+224]
	209 Compare W8, 0
	210 JumpIfNotEqual {216}
	211 Move [X31+16], V1
	212 Move [X31+24], V0
	213 Call 0x1C17DFC
	214 Move V1, [X31+16]
	215 Move V0, [X31+32]
	216 Move V0.S[1], V1.S[0]
	217 Subtract S2, S11, S10
	218 Subtract V1, V0, V14
	219 Subtract S6, S8, S15
	220 Multiply S4, S9, S2
	221 NotImplemented "Instruction INVALID not yet implemented."
	222 Multiply S3, S6, S6
	223 NotImplemented "Instruction FADDP not yet implemented."
	224 Add S2, S2, S3
	225 NotImplemented "Instruction FSQRT not yet implemented."
	226 Add S3, S4, S4
	227 NotImplemented "Instruction FCMP not yet implemented."
	228 Move V4, [X23+64]
	229 Move V5, [X23+72]
	230 Subtract S3, S2, S3
	231 NotImplemented "Instruction FDIV not yet implemented."
	232 NotImplemented "Instruction INVALID not yet implemented."
	233 Multiply S0, S6, S2
	234 Add V1, V1, V4
	235 Add S0, S0, S5
	236 Move [X23+64], D1
	237 Move [X23+72], S0
	238 Move V8, [X24+64]
	239 Move V10, [X24+72]
	240 Move V14, [X23+64]
	241 Move W8, [X26+1924]
	242 Move V15, [X23+72]
	243 Compare W8, 0
	244 JumpIfNotEqual {248}
	245 Move X0, X22
	246 Call 0x1C17CF4
	247 Move [X26+1924], W27
	248 Move X0, [X22]
	249 Move W8, [X0+224]
	250 Compare W8, 0
	251 JumpIfNotEqual {253}
	252 Call 0x1C17DFC
	253 Subtract V0, V8, V14
	254 Subtract S1, S10, S15
	255 NotImplemented "Instruction INVALID not yet implemented."
	256 NotImplemented "Instruction FADDP not yet implemented."
	257 Multiply S3, S1, S1
	258 Add S2, S2, S3
	259 NotImplemented "Instruction FSQRT not yet implemented."
	260 NotImplemented "Instruction FCMP not yet implemented."
	261 Move V3, [X23+64]
	262 Move V4, [X23+72]
	263 Subtract S5, S2, S9
	264 NotImplemented "Instruction FDIV not yet implemented."
	265 NotImplemented "Instruction INVALID not yet implemented."
	266 Multiply S1, S1, S2
	267 Add V0, V0, V3
	268 Add S1, S1, S4
	269 Move [X23+64], D0
	270 Move [X23+72], S1
	271 Move X0, [X19+104]
	272 Add W21, W21, 1
	273 Compare X0, 0
	274 JumpIfNotEqual {60}
	275 Call 0x1C17F20
	276 Move X20, [X31+256]
	277 Move X19, [X31+264]
	278 Move X22, [X31+240]
	279 Move X21, [X31+248]
	280 Move X24, [X31+224]
	281 Move X23, [X31+232]
	282 Move X26, [X31+208]
	283 Move X25, [X31+216]
	284 Move X28, [X31+192]
	285 Move X27, [X31+200]
	286 Move X29, [X31+176]
	287 Move X30, [X31+184]
	288 Move D9, [X31+160]
	289 Move D8, [X31+168]
	290 Move D11, [X31+144]
	291 Move D10, [X31+152]
	292 Move D13, [X31+128]
	293 Move D12, [X31+136]
	294 Move D15, [X31+112]
	295 Move D14, [X31+120]
	296 Add X31, X31, 272
	297 Return 

Method: UnityEngine.Vector3 MirrorVector(UnityEngine.Vector3 v, UnityEngine.Vector3 axis)

Disassembly:
	0x01E27BCC LDP S4, S5, [X19 + 0x5C]
	0x01E27BD0 MOV V7.16B, V6.16B
	0x01E27BD4 B 0x1E27C08
	0x01E27BD8 LDP X30, X19, [X31], #0x10
	0x01E27BDC RET
	0x01E27BE0 LDP S0, S1, [X19 + 0x4C]
	0x01E27BE4 LDR V2, [X19 + 0x54]
	0x01E27BE8 LDR V3, [X19 + 0x44]
	0x01E27BEC MOV X0, X31
	0x01E27BF0 LDP X30, X19, [X31], #0x10
	0x01E27BF4 B 0x3C0CB98
	0x01E27BF8 LDP S0, S1, [X19 + 0x4C]
	0x01E27BFC LDP S2, S3, [X19 + 0x54]

ISIL:
	001 Multiply S6, S0, S3
	002 Multiply S7, S1, S4
	003 Add S6, S6, S7
	004 Multiply S7, S2, S5
	005 Add S6, S7, S6
	006 Add S6, S6, S6
	007 Multiply S3, S3, S6
	008 Multiply S4, S4, S6
	009 Multiply S5, S5, S6
	010 Subtract S0, S0, S3
	011 Subtract S1, S1, S4
	012 Subtract S2, S2, S5
	013 Return X0

Method: System.Void ApplyParticlesToTransforms()

Disassembly:
	0x01E2550C LDR V0, [X8]
	0x01E25510 LDR V1, [X8 + 0x8]
	0x01E25514 ADRP X8, 0x25B3000
	0x01E25518 STUR D0, [X27 + 0x64]
	0x01E2551C STR S1, [X27 + 0x6C]
	0x01E25520 LDRB W8, [X8 + 0x793]
	0x01E25524 CBNZ W8, 0x1E25540
	0x01E25528 ADRP X0, 0x22CF000
	0x01E2552C LDR X0, [X0 + 0x5A8]
	0x01E25530 BL 0x1C16CF4
	0x01E25534 MOVZ W8, 0x1
	0x01E25538 ADRP X9, 0x25B3000
	0x01E2553C STRB W8, [X9 + 0x793]
	0x01E25540 ADRP X8, 0x22CF000
	0x01E25544 LDR X8, [X8 + 0x5A8]
	0x01E25548 LDR X8, [X8]
	0x01E2554C LDR X8, [X8 + 0xB8]
	0x01E25550 LDR V0, [X8]
	0x01E25554 STR V0, [X27 + 0x7]
	0x01E25558 TBNZ X29, 0x1F, 0x1E25644
	0x01E2555C LDR X0, [X19 + 0x68]
	0x01E25560 CBZ X0, 0x1E2584C
	0x01E25564 ADRP X8, 0x22D5000
	0x01E25568 LDR X8, [X8 + 0x920]
	0x01E2556C MOV W1, W29
	0x01E25570 LDR X2, [X8]
	0x01E25574 BL 0x301BCCC
	0x01E25578 CBZ X0, 0x1E2584C
	0x01E2557C LDR X0, [X0 + 0x10]
	0x01E25580 CBZ X0, 0x1E2584C
	0x01E25584 MOV X1, X31
	0x01E25588 BL 0x3C3F58C
	0x01E2558C ADRP X8, 0x25B3000
	0x01E25590 LDP S13, S14, [X27 + 0x40]
	0x01E25594 LDRB W8, [X8 + 0x784]
	0x01E25598 LDR V15, [X27 + 0x48]
	0x01E2559C MOV V9.16B, V0.16B
	0x01E255A0 MOV V10.16B, V1.16B
	0x01E255A4 MOV V11.16B, V2.16B
	0x01E255A8 CBNZ W8, 0x1E255C4
	0x01E255AC ADRP X0, 0x22CE000
	0x01E255B0 LDR X0, [X0 + 0x5A8]
	0x01E255B4 BL 0x1C16CF4
	0x01E255B8 MOVZ W8, 0x1
	0x01E255BC ADRP X9, 0x25B3000
	0x01E255C0 STRB W8, [X9 + 0x784]
	0x01E255C4 ADRP X8, 0x22CE000
	0x01E255C8 LDR X8, [X8 + 0x5A8]
	0x01E255CC LDR X0, [X8]
	0x01E255D0 LDR W8, [X0 + 0xE0]
	0x01E255D4 CBNZ W8, 0x1E255DC
	0x01E255D8 BL 0x1C16DFC
	0x01E255DC FSUB S0, S9, S13
	0x01E255E0 FSUB S1, S10, S14
	0x01E255E4 FSUB S2, S11, S15
	0x01E255E8 FMUL S0, S0, S0
	0x01E255EC FMUL S1, S1, S1
	0x01E255F0 FADD S0, S0, S1
	0x01E255F4 FMUL S1, S2, S2
	0x01E255F8 FADD S0, S0, S1
	0x01E255FC FSQRT S0, S0
	0x01E25600 FADD S8, S8, S0
	0x01E25604 STR S8, [X27 + 0x38]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25B4000
	007 Move W8, [X20+3666]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x22D6000
	014 Move X0, [X0+2224]
	015 Call 0x1C17CF4
	016 Move X0, 0x22D6000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3666], W8
	021 Move X20, 0x25B4000
	022 Move W8, [X20+2928]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x22CF000
	026 Move X0, [X0+1440]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2928], W8
	030 Move X20, 0x25B4000
	031 Move W8, [X20+1926]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x22CF000
	035 Move X0, [X0+1440]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+1926], W8
	039 Move X20, 0x25B4000
	040 Move W8, [X20+2591]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x22CF000
	044 Move X0, [X0+1440]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+2591], W8
	048 Move X0, [X19+288]
	049 Compare X0, 0
	050 JumpIfEqual {68}
	051 Move X21, 0x22D6000
	052 Move X21, [X21+2248]
	053 Move W20, W31
	054 Move W8, [X0+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X2, [X21]
	057 Move W1, W20
	058 Call List`1<Object>.get_Item, X0, X1
	059 Move X1, X0
	060 Move W2, W31
	061 Move W3, W31
	062 Move W4, W31
	063 Call DynamicBone.ApplyParticlesToTransforms, X0, X1, X2, X3, X4, X5, X6, X7
	064 Move X0, [X19+288]
	065 Add W20, W20, 1
	066 Compare X0, 0
	067 JumpIfNotEqual {54}
	068 Call 0x1C17F20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move X21, [X31+24]
	073 Add X31, X31, 48
	074 Return 

Method: System.Void ApplyParticlesToTransforms(DynamicBone/ParticleTree pt, UnityEngine.Vector3 ax, UnityEngine.Vector3 ay, UnityEngine.Vector3 az, System.Boolean nx, System.Boolean ny, System.Boolean nz)

Disassembly:
	0x01E27C00 LDP S4, S5, [X19 + 0x5C]
	0x01E27C04 LDP S6, S7, [X19 + 0x44]
	0x01E27C08 LDP X30, X19, [X31], #0x10
	0x01E27C0C B 0x1E27C10
	0x01E27C10 STP D15, D14, [X31 - 0x50]!
	0x01E27C14 STP D13, D12, [X31 + 0x10]
	0x01E27C18 STP D11, D10, [X31 + 0x20]
	0x01E27C1C STP D9, D8, [X31 + 0x30]
	0x01E27C20 STR X30, [X31 + 0x40]
	0x01E27C24 MOV X0, X31
	0x01E27C28 MOV V8.16B, V7.16B
	0x01E27C2C MOV V9.16B, V6.16B
	0x01E27C30 MOV V10.16B, V5.16B
	0x01E27C34 MOV V11.16B, V4.16B
	0x01E27C38 MOV V12.16B, V3.16B
	0x01E27C3C MOV V13.16B, V2.16B
	0x01E27C40 MOV V14.16B, V1.16B
	0x01E27C44 MOV V15.16B, V0.16B
	0x01E27C48 BL 0x3C0CB04
	0x01E27C4C MOV V0.16B, V15.16B
	0x01E27C50 MOV V1.16B, V14.16B
	0x01E27C54 MOV V2.16B, V13.16B
	0x01E27C58 MOV V3.16B, V9.16B
	0x01E27C5C MOV X0, X31
	0x01E27C60 BL 0x3C0CB98
	0x01E27C64 MOV V0.16B, V12.16B
	0x01E27C68 MOV V1.16B, V11.16B
	0x01E27C6C MOV V2.16B, V10.16B
	0x01E27C70 MOV V3.16B, V8.16B
	0x01E27C74 LDR X30, [X31 + 0x40]
	0x01E27C78 LDP D9, D8, [X31 + 0x30]
	0x01E27C7C LDP D11, D10, [X31 + 0x20]
	0x01E27C80 LDP D13, D12, [X31 + 0x10]
	0x01E27C84 MOV X0, X31
	0x01E27C88 LDP D15, D14, [X31], #0x50
	0x01E27C8C B 0x3C0CB98
	0x01E27C90 MOVZ W8, 0x3F000000
	0x01E27C94 STR W8, [X0 + 0x38]
	0x01E27C98 B 0x1E27C9C
	0x01E27C9C STP X30, X21, [X31 - 0x20]!
	0x01E27CA0 STP X20, X19, [X31 + 0x10]
	0x01E27CA4 MOVZ W20, 0x1
	0x01E27CA8 STR W20, [X0 + 0x20]
	0x01E27CAC ADRP X21, 0x25B1000
	0x01E27CB0 LDRB W8, [X21 + 0x783]
	0x01E27CB4 MOV X19, X0
	0x01E27CB8 CBNZ W8, 0x1E27CCC
	0x01E27CBC ADRP X0, 0x22CC000
	0x01E27CC0 LDR X0, [X0 + 0x5A0]
	0x01E27CC4 BL 0x1C16CF4
	0x01E27CC8 STRB W20, [X21 + 0x783]
	0x01E27CCC ADRP X8, 0x22CC000
	0x01E27CD0 LDR X8, [X8 + 0x5A0]
	0x01E27CD4 MOV X0, X19
	0x01E27CD8 MOV X1, X31
	0x01E27CDC LDR X8, [X8]
	0x01E27CE0 LDR X8, [X8 + 0xB8]
	0x01E27CE4 LDR V0, [X8]
	0x01E27CE8 LDR V1, [X8 + 0x8]
	0x01E27CEC STUR D0, [X19 + 0x24]
	0x01E27CF0 STR S1, [X19 + 0x2C]
	0x01E27CF4 LDP X20, X19, [X31 + 0x10]
	0x01E27CF8 LDP X30, X21, [X31], #0x20
	0x01E27CFC B 0x3C36C30
	0x01E27D00 STR W1, [X0 + 0x34]
	0x01E27D04 RET
	0x01E27D08 LDR W0, [X0 + 0x34]
	0x01E27D0C RET
	0x01E27D10 RET
	0x01E27D14 RET
	0x01E27D18 MOV W0, W31
	0x01E27D1C RET
	0x01E27D20 RET
	0x01E27D24 STP D13, D12, [X31 - 0x50]!
	0x01E27D28 STP D11, D10, [X31 + 0x10]
	0x01E27D2C STP D9, D8, [X31 + 0x20]
	0x01E27D30 STP X30, X21, [X31 + 0x30]
	0x01E27D34 STP X20, X19, [X31 + 0x40]
	0x01E27D38 ADRP X20, 0x25B1000
	0x01E27D3C LDRB W8, [X20 + 0x786]
	0x01E27D40 MOV X19, X0
	0x01E27D44 CBNZ W8, 0x1E27D5C
	0x01E27D48 ADRP X0, 0x22CC000
	0x01E27D4C LDR X0, [X0 + 0x5A0]
	0x01E27D50 BL 0x1C16CF4
	0x01E27D54 MOVZ W8, 0x1
	0x01E27D58 STRB W8, [X20 + 0x786]
	0x01E27D5C LDR W8, [X19 + 0x20]
	0x01E27D60 ADRP X20, 0x22CC000
	0x01E27D64 LDR X20, [X20 + 0x5A0]
	0x01E27D68 CMP W8, 0x2
	0x01E27D6C B.EQ 0x1E27D98
	0x01E27D70 CMP W8, 0x1
	0x01E27D74 B.EQ 0x1E27DB4
	0x01E27D78 CBNZ W8, 0x1E27DDC
	0x01E27D7C MOV X0, X19
	0x01E27D80 MOV X1, X31
	0x01E27D84 BL 0x3C32E90
	0x01E27D88 CBZ X0, 0x1E27EF0
	0x01E27D8C MOV X1, X31
	0x01E27D90 BL 0x3C3F90C
	0x01E27D94 B 0x1E27DCC
	0x01E27D98 MOV X0, X19
	0x01E27D9C MOV X1, X31
	0x01E27DA0 BL 0x3C32E90
	0x01E27DA4 CBZ X0, 0x1E27EF0
	0x01E27DA8 MOV X1, X31
	0x01E27DAC BL 0x3C3FA04
	0x01E27DB0 B 0x1E27DCC
	0x01E27DB4 MOV X0, X19
	0x01E27DB8 MOV X1, X31
	0x01E27DBC BL 0x3C32E90
	0x01E27DC0 CBZ X0, 0x1E27EF0
	0x01E27DC4 MOV X1, X31
	0x01E27DC8 BL 0x3C3F988
	0x01E27DCC MOV V8.16B, V0.16B
	0x01E27DD0 MOV V9.16B, V1.16B
	0x01E27DD4 MOV V10.16B, V2.16B
	0x01E27DD8 B 0x1E27DEC
	0x01E27DDC LDR X8, [X20]
	0x01E27DE0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x25B2000
	012 Move W8, [X20+3667]
	013 Move X19, X1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x22D4000
	019 Move X0, [X0+2312]
	020 Call 0x1C17CF4
	021 Move X0, 0x22D4000
	022 Move X0, [X0+2336]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3667], W8
	026 Compare X19, 0
	027 JumpIfEqual {134}
	028 Move X0, [X19+104]
	029 Compare X0, 0
	030 JumpIfEqual {134}
	031 Move X23, 0x22D4000
	032 Move X23, [X23+2336]
	033 Move W20, 1
	034 Move W8, [X0+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X2, [X23]
	037 Move W1, W20
	038 Call List`1<Object>.get_Item, X0, X1
	039 Compare X0, 0
	040 JumpIfEqual {134}
	041 Move X21, X0
	042 Move X0, [X19+104]
	043 Compare X0, 0
	044 JumpIfEqual {134}
	045 Move W1, [X21+24]
	046 Move X2, [X23]
	047 Call List`1<Object>.get_Item, X0, X1
	048 Compare X0, 0
	049 JumpIfEqual {134}
	050 Move W8, [X0+28]
	051 Move X22, X0
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, [X21+61]
	054 Compare W8, 0
	055 JumpIfEqual {61}
	056 Move X0, [X21+16]
	057 Compare X0, 0
	058 JumpIfEqual {134}
	059 Move X1, X31
	060 Call Transform.get_localPosition, X0
	061 Move S0, [X21+88]
	062 Move S1, [X21+92]
	063 Move V2, [X21+96]
	064 Move X0, [X22+16]
	065 Compare X0, 0
	066 JumpIfEqual {134}
	067 Move X1, X31
	068 Call Transform.TransformDirection, X0, X1
	069 Move V3, [X21+64]
	070 Move V5, [X22+64]
	071 Move V4, [X21+72]
	072 Move V6, [X22+72]
	073 Move X0, X31
	074 Subtract V3, V3, V5
	075 Subtract S5, S4, S6
	076 Move S4, V3.S[1]
	077 Call Quaternion.FromToRotation, X0, X1
	078 Move X22, [X22+16]
	079 Compare X22, 0
	080 JumpIfEqual {134}
	081 Move X0, X22
	082 Move X1, X31
	083 Move V10, V0
	084 Move V9, V1
	085 Move V8, V2
	086 Move V11, V3
	087 Call Transform.get_rotation, X0
	088 Multiply S4, S11, S0
	089 Multiply S5, S10, S3
	090 Multiply S7, S8, S1
	091 Multiply S16, S11, S1
	092 Multiply S17, S9, S3
	093 Multiply S18, S8, S0
	094 Multiply S20, S10, S1
	095 Multiply S21, S10, S0
	096 Multiply S22, S9, S0
	097 Multiply S0, S9, S1
	098 Multiply S1, S11, S2
	099 Multiply S23, S11, S3
	100 Multiply S3, S8, S3
	101 Multiply S6, S9, S2
	102 Multiply S19, S10, S2
	103 Multiply S24, S8, S2
	104 Add S2, S4, S5
	105 Add S4, S16, S17
	106 Add S1, S1, S3
	107 Subtract S3, S23, S21
	108 Add S2, S6, S2
	109 Add S4, S18, S4
	110 Add S5, S20, S1
	111 Subtract S3, S3, S0
	112 Subtract S0, S2, S7
	113 Subtract S1, S4, S19
	114 Subtract S2, S5, S22
	115 Subtract S3, S3, S24
	116 Move X0, X22
	117 Move X1, X31
	118 Call Transform.set_rotation, X0, X1
	119 Move W8, [X21+61]
	120 Compare W8, 0
	121 JumpIfEqual {130}
	122 Move X0, [X21+16]
	123 Compare X0, 0
	124 JumpIfEqual {134}
	125 Move S1, [X21+68]
	126 Move S2, [X21+72]
	127 Move V0, [X21+64]
	128 Move X1, X31
	129 Call Transform.set_position, X0, X1
	130 Move X0, [X19+104]
	131 Add W20, W20, 1
	132 Compare X0, 0
	133 JumpIfNotEqual {34}
	134 Call 0x1C17F20
	135 Move X20, [X31+64]
	136 Move X19, [X31+72]
	137 Move X22, [X31+48]
	138 Move X21, [X31+56]
	139 Move X30, [X31+32]
	140 Move X23, [X31+40]
	141 Move D9, [X31+16]
	142 Move D8, [X31+24]
	143 Move D11, [X31+80]
	144 Move D10, [X31+88]
	145 Return 

Method: System.Void .ctor()

Disassembly:
	0x01E27DE4 LDP S8, S9, [X8 + 0x18]
	0x01E27DE8 LDR V10, [X8 + 0x20]
	0x01E27DEC MOV X0, X19
	0x01E27DF0 MOV X1, X31
	0x01E27DF4 BL 0x3C32E90
	0x01E27DF8 CBZ X0, 0x1E27EF0
	0x01E27DFC LDP S1, S2, [X19 + 0x28]
	0x01E27E00 LDR V0, [X19 + 0x24]
	0x01E27E04 MOV X1, X31
	0x01E27E08 BL 0x3C3DE4C
	0x01E27E0C ADRP X21, 0x25B1000
	0x01E27E10 LDRB W8, [X21 + 0x785]
	0x01E27E14 MOV V11.16B, V0.16B
	0x01E27E18 MOV V12.16B, V1.16B
	0x01E27E1C MOV V13.16B, V2.16B
	0x01E27E20 CBNZ W8, 0x1E27E38
	0x01E27E24 ADRP X0, 0x22CC000
	0x01E27E28 LDR X0, [X0 + 0x5A8]
	0x01E27E2C BL 0x1C16CF4
	0x01E27E30 MOVZ W8, 0x1
	0x01E27E34 STRB W8, [X21 + 0x785]
	0x01E27E38 ADRP X8, 0x22CC000
	0x01E27E3C LDR X8, [X8 + 0x5A8]
	0x01E27E40 LDR X0, [X8]
	0x01E27E44 LDR W8, [X0 + 0xE0]
	0x01E27E48 CBNZ W8, 0x1E27E50
	0x01E27E4C BL 0x1C16DFC
	0x01E27E50 FMUL S0, S8, S8
	0x01E27E54 FMUL S1, S9, S9
	0x01E27E58 ADRP X8, 0xFFFFFFFFFECC3000
	0x01E27E5C FADD S0, S0, S1
	0x01E27E60 LDR V1, [X8 + 0x17C]
	0x01E27E64 FMUL S2, S10, S10
	0x01E27E68 FADD S0, S2, S0
	0x01E27E6C FSQRT S0, S0
	0x01E27E70 FCMP S0, S1
	0x01E27E74 B.LE 0x1E27E88
	0x01E27E78 FDIV S1, S8, S0
	0x01E27E7C FDIV S2, S9, S0
	0x01E27E80 FDIV S0, S10, S0
	0x01E27E84 B 0x1E27EB8
	0x01E27E88 ADRP X21, 0x25B1000
	0x01E27E8C LDRB W8, [X21 + 0x783]
	0x01E27E90 CBNZ W8, 0x1E27EA8
	0x01E27E94 ADRP X0, 0x22CC000
	0x01E27E98 LDR X0, [X0 + 0x5A0]
	0x01E27E9C BL 0x1C16CF4
	0x01E27EA0 MOVZ W8, 0x1
	0x01E27EA4 STRB W8, [X21 + 0x783]
	0x01E27EA8 LDR X8, [X20]
	0x01E27EAC LDR X8, [X8 + 0xB8]
	0x01E27EB0 LDP S1, S2, [X8]
	0x01E27EB4 LDR V0, [X8 + 0x8]
	0x01E27EB8 STP S1, S2, [X19 + 0x38]
	0x01E27EBC FMUL S1, S11, S1
	0x01E27EC0 FMUL S2, S12, S2
	0x01E27EC4 FMUL S3, S13, S0
	0x01E27EC8 FADD S1, S1, S2
	0x01E27ECC FADD S1, S3, S1
	0x01E27ED0 FNEG S1, S1
	0x01E27ED4 STP S0, S1, [X19 + 0x40]
	0x01E27ED8 LDP X20, X19, [X31 + 0x40]
	0x01E27EDC LDP X30, X21, [X31 + 0x30]
	0x01E27EE0 LDP D9, D8, [X31 + 0x20]
	0x01E27EE4 LDP D11, D10, [X31 + 0x10]
	0x01E27EE8 LDP D13, D12, [X31], #0x50
	0x01E27EEC RET
	0x01E27EF0 BL 0x1C16F20
	0x01E27EF4 LDP S2, S1, [X1]
	0x01E27EF8 LDP S5, S4, [X0 + 0x38]
	0x01E27EFC LDR V0, [X1 + 0x8]
	0x01E27F00 LDP S3, S6, [X0 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25B2000
	007 Move W8, [X20+3668]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x22D4000
	014 Move X0, [X0+2472]
	015 Call 0x1C17CF4
	016 Move X0, 0x22D4000
	017 Move X0, [X0+2480]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3668], W8
	021 Move X8, 0x42700000
	022 Move W9, 0xCCCD
	023 NotImplemented "Instruction MOVK not yet implemented."
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 Move [X19+48], X8
	026 Move [X19+56], W9
	027 Move [X19+72], W9
	028 Move [X19+88], W9
	029 Move X22, 0x25B2000
	030 Move X21, 0x22D4000
	031 Move X20, 0x22D4000
	032 Move W8, [X22+1923]
	033 Move X21, [X21+2480]
	034 Move X20, [X20+2472]
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x22CD000
	038 Move X0, [X0+1440]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X22+1923], W8
	042 Move X8, 0x22CD000
	043 Move X8, [X8+1440]
	044 Move X8, [X8]
	045 Move X9, [X8+184]
	046 Move V0, [X9]
	047 Move V1, [X9+8]
	048 Move [X19+156], D0
	049 Move [X19+164], S1
	050 Move X9, [X8+184]
	051 Move V0, [X9]
	052 Move V1, [X9+8]
	053 Move W9, 0x3F800000
	054 Move [X19+168], D0
	055 Move [X19+176], S1
	056 Move X8, [X8+184]
	057 Move V0, [X8]
	058 Move V1, [X8+8]
	059 Move W8, 0x41A00000
	060 Move [X19+232], W8
	061 Move W8, 1
	062 Move [X19+192], W9
	063 Move [X19+236], W8
	064 Move [X19+180], D0
	065 Move [X19+188], S1
	066 Move [X19+272], W9
	067 Move X0, [X21]
	068 Call 0x1C17F10
	069 Move X1, [X20]
	070 Move X20, X0
	071 Call List`1<Object>..ctor, X0
	072 Move [X19+288], X20
	073 Move X0, X19
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X1, X31
	079 Move X30, [X31+48]
	080 Call MonoBehaviour..ctor, X0
	081 Return 

