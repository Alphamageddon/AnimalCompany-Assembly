Type: UnityEngine.Rendering.VolumeManager

Method: UnityEngine.Rendering.VolumeManager get_instance()

Disassembly:
	0x039EF864 BL 0x1C5C788
	0x039EF868 B 0x39EF878
	0x039EF86C LDRSW X9, [X10]
	0x039EF870 ADD X8, X8, X9, 0x4, LSL
	0x039EF874 ADD X0, X8, 0x138
	0x039EF878 LDP X8, X1, [X0]
	0x039EF87C MOV X0, X19
	0x039EF880 BLR X8
	0x039EF884 CBNZ X21, 0x39EF8CC
	0x039EF888 LDP X20, X19, [X31 + 0x50]
	0x039EF88C LDP X22, X21, [X31 + 0x40]
	0x039EF890 LDP X24, X23, [X31 + 0x30]
	0x039EF894 LDP X26, X25, [X31 + 0x20]
	0x039EF898 LDP X28, X27, [X31 + 0x10]
	0x039EF89C LDP X29, X30, [X31], #0x60
	0x039EF8A0 RET
	0x039EF8A4 BL 0x1C16F20
	0x039EF8A8 BL 0x1C16F20
	0x039EF8AC BL 0x1C16F20
	0x039EF8B0 MOV X0, X8
	0x039EF8B4 BL 0x1C171E0
	0x039EF8B8 BL 0x1C16F20
	0x039EF8BC BL 0x1C16F20
	0x039EF8C0 BL 0x1C16F20
	0x039EF8C4 BL 0x1C16F20
	0x039EF8C8 BL 0x1C16F20
	0x039EF8CC MOV X0, X21
	0x039EF8D0 BL 0x1C16F18
	0x039EF8D4 B 0x39EF928
	0x039EF8D8 B 0x39EF928

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x9F3000
	005 Move X19, 0x72F000
	006 Move W8, [X20+3684]
	007 Move X19, [X19+4032]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x765000
	013 Move X0, [X0+1648]
	014 Call 0x1C17CF4
	015 Move X0, 0x72F000
	016 Move X0, [X0+4032]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3684], W8
	020 Move X0, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X19]
	026 Move X8, [X0+184]
	027 Move X0, [X8]
	028 Compare X0, 0
	029 JumpIfEqual {38}
	030 Move X8, 0x765000
	031 Move X8, [X8+1648]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X1, [X8]
	035 Move X30, [X31+32]
	036 Call 0x2EE9EE4, X0
	037 Return X0
	038 Call 0x1C17F20

Method: UnityEngine.Rendering.VolumeStack get_stack()

Disassembly:
	0x039F1700 BL 0x1C16F20
	0x039F1704 BL 0x1C16F20

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_stack(UnityEngine.Rendering.VolumeStack value)

Disassembly:
	0x039F1708 BL 0x1C16F20
	0x039F170C BL 0x1C16F20

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<System.Type> get_baseComponentTypes()

Disassembly:
	0x039F1710 MOV X0, X22
	0x039F1714 BL 0x1C171E0

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_baseComponentTypes(System.Collections.Generic.IEnumerable`1<System.Type> value)

Disassembly:
	0x039F1718 BL 0x1C16F20
	0x039F171C BL 0x1C16F20
	0x039F1720 BL 0x1C16F20
	0x039F1724 BL 0x1C16F20
	0x039F1728 B 0x39F176C
	0x039F172C B 0x39F176C
	0x039F1730 B 0x39F176C
	0x039F1734 B 0x39F176C
	0x039F1738 B 0x39F176C
	0x039F173C B 0x39F176C
	0x039F1740 B 0x39F176C
	0x039F1744 B 0x39F176C
	0x039F1748 B 0x39F176C
	0x039F174C B 0x39F176C
	0x039F1750 B 0x39F176C
	0x039F1754 B 0x39F176C
	0x039F1758 B 0x39F176C
	0x039F175C B 0x39F176C
	0x039F1760 B 0x39F176C
	0x039F1764 B 0x39F176C
	0x039F1768 B 0x39F176C
	0x039F176C MOV X21, X0
	0x039F1770 CMP W1, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9F1000
	007 Move X22, 0x72C000
	008 Move W8, [X21+3685]
	009 Move X22, [X22+928]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x72C000
	017 Move X0, [X0+928]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3685], W8
	021 Move X1, [X22]
	022 Move X0, X20
	023 Call Enumerable.ToArray, X0
	024 Move [X19+24], X0
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Return 

Method: System.Collections.Generic.List`1<System.ValueTuple`2<System.String, System.Type>> GetSupportedVolumeComponents(System.Type currentPipelineType)

Disassembly:
	0x039F1774 B.NE 0x39F17A8
	0x039F1778 MOV X0, X21
	0x039F177C BL 0x3EB1AD0
	0x039F1780 LDR X22, [X0]
	0x039F1784 BL 0x3EB1AE0
	0x039F1788 ADRP X8, 0x72B000
	0x039F178C LDR X8, [X8 + 0x988]
	0x039F1790 ADD X0, X31, 0x20
	0x039F1794 LDR X1, [X8]
	0x039F1798 BL 0x2BC434C
	0x039F179C CBZ X22, 0x39F16BC
	0x039F17A0 MOV X0, X22
	0x039F17A4 BL 0x1C16F18
	0x039F17A8 MOV X22, X31
	0x039F17AC B 0x39F17B4
	0x039F17B0 MOV X21, X0
	0x039F17B4 ADRP X8, 0x72B000
	0x039F17B8 LDR X8, [X8 + 0x988]
	0x039F17BC LDR X1, [X8]
	0x039F17C0 ADD X0, X31, 0x20
	0x039F17C4 BL 0x2BC434C
	0x039F17C8 CBNZ X22, 0x39F17D4
	0x039F17CC MOV X0, X21
	0x039F17D0 BL 0x1D2C690
	0x039F17D4 MOV X0, X22
	0x039F17D8 BL 0x1C16F18
	0x039F17DC BL 0x1990590
	0x039F17E0 LDR X8, [X0 + 0x48]
	0x039F17E4 STR X8, [X0 + 0x10]
	0x039F17E8 RET
	0x039F17EC CBZ X1, 0x39F17F8
	0x039F17F0 MOV X0, X1
	0x039F17F4 B 0x39F5328
	0x039F17F8 STR X30, [X31 - 0x10]!
	0x039F17FC BL 0x1C16F20
	0x039F1800 B 0x39F5328
	0x039F1804 STR D8, [X31 - 0x40]!
	0x039F1808 STR X30, [X31 + 0x8]
	0x039F180C STP X24, X23, [X31 + 0x10]
	0x039F1810 STP X22, X21, [X31 + 0x20]
	0x039F1814 STP X20, X19, [X31 + 0x30]
	0x039F1818 ADRP X21, 0x9F0000
	0x039F181C LDRB W8, [X21 + 0xE6F]
	0x039F1820 MOV V8.16B, V0.16B
	0x039F1824 MOV X19, X2
	0x039F1828 MOV X20, X1
	0x039F182C TBNZ X8, 0x0, 0x39F1850
	0x039F1830 ADRP X0, 0x762000
	0x039F1834 LDR X0, [X0 + 0x840]
	0x039F1838 BL 0x1C16CF4
	0x039F183C ADRP X0, 0x762000
	0x039F1840 LDR X0, [X0 + 0x848]
	0x039F1844 BL 0x1C16CF4
	0x039F1848 MOVZ W8, 0x1
	0x039F184C STRB W8, [X21 + 0xE6F]
	0x039F1850 CBZ X19, 0x39F18E4
	0x039F1854 LDR W23, [X19 + 0x18]
	0x039F1858 CMP W23, 0x1
	0x039F185C B.LT 0x39F18CC
	0x039F1860 ADRP X24, 0x762000
	0x039F1864 LDR X24, [X24 + 0x848]
	0x039F1868 MOV W21, W31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9F1000
	007 Move X20, 0x72D000
	008 Move W8, [X21+3686]
	009 Move X20, [X20+4032]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x763000
	016 Move X0, [X0+1856]
	017 Call 0x1C17CF4
	018 Move X0, 0x763000
	019 Move X0, [X0+1864]
	020 Call 0x1C17CF4
	021 Move X0, 0x72D000
	022 Move X0, [X0+4032]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3686], W8
	026 Move X0, [X20]
	027 Move [X31+8], X31
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X8, [X0+184]
	034 Move X0, [X8+8]
	035 Compare X0, 0
	036 JumpIfEqual {77}
	037 Move X8, 0x763000
	038 Move X8, [X8+1856]
	039 Add X2, X31, 8
	040 Move X1, X19
	041 Move X3, [X8]
	042 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {70}
	047 Move X0, [X20]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Call VolumeManager.get_instance
	053 Compare X0, 0
	054 JumpIfEqual {77}
	055 Move X0, [X0+24]
	056 Move X1, X19
	057 Call VolumeManager.FilterVolumeComponentTypes, X0, X1
	058 Move X8, [X20]
	059 Move [X31+8], X0
	060 Move X2, X0
	061 Move X8, [X8+184]
	062 Move X0, [X8+8]
	063 Compare X0, 0
	064 JumpIfEqual {77}
	065 Move X8, 0x763000
	066 Move X8, [X8+1864]
	067 Move X1, X19
	068 Move X3, [X8]
	069 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	070 Move X0, [X31+8]
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X30, [X31+16]
	074 Move X21, [X31+24]
	075 Add X31, X31, 48
	076 Return X0
	077 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.ValueTuple`2<System.String, System.Type>> FilterVolumeComponentTypes(System.Type[] types, System.Type currentPipelineType)

Disassembly:
	0x039F186C LDR X2, [X24]
	0x039F1870 MOV X0, X19
	0x039F1874 MOV W1, W21
	0x039F1878 BL 0x301BCCC
	0x039F187C CBZ X0, 0x39F18E4
	0x039F1880 LDRB W8, [X0 + 0x18]
	0x039F1884 MOV X22, X0
	0x039F1888 CBZ W8, 0x39F18C0
	0x039F188C MOV X0, X22
	0x039F1890 MOV X1, X31
	0x039F1894 BL 0x33BE520
	0x039F1898 CBZ X20, 0x39F18E4
	0x039F189C MOV X1, X0
	0x039F18A0 MOV X0, X20
	0x039F18A4 BL 0x39F18E8
	0x039F18A8 LDR X8, [X22]
	0x039F18AC MOV X1, X0
	0x039F18B0 MOV X0, X22
	0x039F18B4 MOV V0.16B, V8.16B
	0x039F18B8 LDP X9, X2, [X8 + 0x198]
	0x039F18BC BLR X9
	0x039F18C0 ADD W21, W21, 0x1
	0x039F18C4 CMP W23, W21
	0x039F18C8 B.NE 0x39F186C
	0x039F18CC LDP X20, X19, [X31 + 0x30]
	0x039F18D0 LDP X22, X21, [X31 + 0x20]
	0x039F18D4 LDP X24, X23, [X31 + 0x10]
	0x039F18D8 LDR X30, [X31 + 0x8]
	0x039F18DC LDR V8, [X31], #0x40
	0x039F18E0 RET
	0x039F18E4 BL 0x1C16F20
	0x039F18E8 SUB X31, X31, 0x30
	0x039F18EC STP X30, X21, [X31 + 0x10]
	0x039F18F0 STP X20, X19, [X31 + 0x20]
	0x039F18F4 ADRP X21, 0x9F0000
	0x039F18F8 LDRB W8, [X21 + 0xEB9]
	0x039F18FC MOV X19, X1
	0x039F1900 MOV X20, X0
	0x039F1904 TBNZ X8, 0x0, 0x39F191C
	0x039F1908 ADRP X0, 0x762000
	0x039F190C LDR X0, [X0 + 0x850]
	0x039F1910 BL 0x1C16CF4
	0x039F1914 MOVZ W8, 0x1
	0x039F1918 STRB W8, [X21 + 0xEB9]
	0x039F191C STR X31, [X31 + 0x8]
	0x039F1920 LDR X0, [X20 + 0x10]
	0x039F1924 CBZ X0, 0x39F1954
	0x039F1928 ADRP X8, 0x762000
	0x039F192C LDR X8, [X8 + 0x850]
	0x039F1930 ADD X2, X31, 0x8
	0x039F1934 MOV X1, X19
	0x039F1938 LDR X3, [X8]
	0x039F193C BL 0x2AA6B2C
	0x039F1940 LDR X0, [X31 + 0x8]
	0x039F1944 LDP X20, X19, [X31 + 0x20]
	0x039F1948 LDP X30, X21, [X31 + 0x10]
	0x039F194C ADD X31, X31, 0x30
	0x039F1950 RET
	0x039F1954 BL 0x1C16F20
	0x039F1958 STP X30, X23, [X31 - 0x30]!
	0x039F195C STP X22, X21, [X31 + 0x10]
	0x039F1960 STP X20, X19, [X31 + 0x20]
	0x039F1964 CBZ X1, 0x39F19F4
	0x039F1968 LDR X21, [X1 + 0x18]
	0x039F196C CBZ X21, 0x39F19F4
	0x039F1970 LDR X22, [X21 + 0x18]
	0x039F1974 CMP W22, 0x1
	0x039F1978 B.LT 0x39F19E4
	0x039F197C CBZ W22, 0x39F19E0
	0x039F1980 MOV X8, X31
	0x039F1984 MOVZ W23, 0x1
	0x039F1988 ADD X8, X21, X8, 0x4, LSL
	0x039F198C LDR X19, [X8 + 0x20]
	0x039F1990 CBZ X19, 0x39F19F4
	0x039F1994 LDR X9, [X19]
	0x039F1998 LDR X20, [X8 + 0x28]
	0x039F199C MOV X0, X19
	0x039F19A0 MOV W1, W31
	0x039F19A4 LDP X8, X2, [X9 + 0x198]
	0x039F19A8 BLR X8
	0x039F19AC LDR X8, [X19]
	0x039F19B0 MOV X0, X19
	0x039F19B4 MOV X1, X20
	0x039F19B8 LDP X9, X2, [X8 + 0x1B8]
	0x039F19BC BLR X9
	0x039F19C0 CMP W22, W23
	0x039F19C4 B.EQ 0x39F19E4
	0x039F19C8 LDR W8, [X21 + 0x18]
	0x039F19CC ADD W9, W23, 0x1
	0x039F19D0 CMP W23, W8
	0x039F19D4 SXTW X8, W23
	0x039F19D8 MOV W23, W9
	0x039F19DC B.CC 0x39F1988
	0x039F19E0 BL 0x1C16F28
	0x039F19E4 LDP X20, X19, [X31 + 0x20]
	0x039F19E8 LDP X22, X21, [X31 + 0x10]
	0x039F19EC LDP X30, X23, [X31], #0x30
	0x039F19F0 RET
	0x039F19F4 BL 0x1C16F20
	0x039F19F8 STR X30, [X31 - 0x20]!
	0x039F19FC STP X20, X19, [X31 + 0x10]
	0x039F1A00 ADRP X20, 0x9F0000
	0x039F1A04 LDRB W8, [X20 + 0xE70]
	0x039F1A08 MOV X19, X0
	0x039F1A0C TBNZ X8, 0x0, 0x39F1A3C
	0x039F1A10 ADRP X0, 0x762000
	0x039F1A14 LDR X0, [X0 + 0x840]
	0x039F1A18 BL 0x1C16CF4
	0x039F1A1C ADRP X0, 0x762000
	0x039F1A20 LDR X0, [X0 + 0x848]
	0x039F1A24 BL 0x1C16CF4
	0x039F1A28 ADRP X0, 0x702000
	0x039F1A2C LDR X0, [X0 + 0x598]
	0x039F1A30 BL 0x1C16CF4
	0x039F1A34 MOVZ W8, 0x1
	0x039F1A38 STRB W8, [X20 + 0xE70]
	0x039F1A3C LDR X0, [X19 + 0x38]
	0x039F1A40 CBZ X0, 0x39F1A98
	0x039F1A44 LDR W8, [X0 + 0x18]
	0x039F1A48 CMP W8, 0x1
	0x039F1A4C B.LT 0x39F1AA8
	0x039F1A50 ADRP X8, 0x762000
	0x039F1A54 LDR X8, [X8 + 0x848]
	0x039F1A58 MOV W1, W31
	0x039F1A5C LDR X2, [X8]
	0x039F1A60 BL 0x301BCCC
	0x039F1A64 ADRP X8, 0x702000
	0x039F1A68 LDR X8, [X8 + 0x598]
	0x039F1A6C MOV X20, X0
	0x039F1A70 LDR X8, [X8]
	0x039F1A74 LDR W9, [X8 + 0xE0]
	0x039F1A78 CBNZ W9, 0x39F1A84
	0x039F1A7C MOV X0, X8
	0x039F1A80 BL 0x1C16DFC
	0x039F1A84 MOV X0, X20
	0x039F1A88 MOV X1, X31
	0x039F1A8C MOV X2, X31
	0x039F1A90 BL 0x3C3883C
	0x039F1A94 TBZ X0, 0x0, 0x39F1AA8
	0x039F1A98 MOV X0, X19
	0x039F1A9C LDP X20, X19, [X31 + 0x10]
	0x039F1AA0 LDR X30, [X31], #0x20
	0x039F1AA4 B 0x39F0FB4
	0x039F1AA8 LDP X20, X19, [X31 + 0x10]
	0x039F1AAC LDR X30, [X31], #0x20
	0x039F1AB0 RET
	0x039F1AB4 SUB X31, X31, 0x80
	0x039F1AB8 STR X30, [X31 + 0x30]
	0x039F1ABC STP X26, X25, [X31 + 0x40]
	0x039F1AC0 STP X24, X23, [X31 + 0x50]
	0x039F1AC4 STP X22, X21, [X31 + 0x60]
	0x039F1AC8 STP X20, X19, [X31 + 0x70]
	0x039F1ACC ADRP X21, 0x9F0000
	0x039F1AD0 LDRB W8, [X21 + 0xE71]
	0x039F1AD4 MOV X19, X1
	0x039F1AD8 MOV X20, X0
	0x039F1ADC TBNZ X8, 0x0, 0x39F1B48
	0x039F1AE0 ADRP X0, 0x762000
	0x039F1AE4 LDR X0, [X0 + 0x858]
	0x039F1AE8 BL 0x1C16CF4
	0x039F1AEC ADRP X0, 0x762000
	0x039F1AF0 LDR X0, [X0 + 0x860]
	0x039F1AF4 BL 0x1C16CF4
	0x039F1AF8 ADRP X0, 0x762000
	0x039F1AFC LDR X0, [X0 + 0x868]
	0x039F1B00 BL 0x1C16CF4
	0x039F1B04 ADRP X0, 0x762000
	0x039F1B08 LDR X0, [X0 + 0x870]
	0x039F1B0C BL 0x1C16CF4
	0x039F1B10 ADRP X0, 0x762000
	0x039F1B14 LDR X0, [X0 + 0x878]
	0x039F1B18 BL 0x1C16CF4
	0x039F1B1C ADRP X0, 0x762000
	0x039F1B20 LDR X0, [X0 + 0x880]
	0x039F1B24 BL 0x1C16CF4
	0x039F1B28 ADRP X0, 0x702000
	0x039F1B2C LDR X0, [X0 + 0x598]
	0x039F1B30 BL 0x1C16CF4
	0x039F1B34 ADRP X0, 0x702000
	0x039F1B38 LDR X0, [X0 + 0x6C0]
	0x039F1B3C BL 0x1C16CF4
	0x039F1B40 MOVZ W8, 0x1
	0x039F1B44 STRB W8, [X21 + 0xE71]
	0x039F1B48 MOVI V0.2D, 0x0
	0x039F1B4C STR X31, [X31 + 0x20]
	0x039F1B50 STP V0, V0, [X31]
	0x039F1B54 CBZ X19, 0x39F1C34
	0x039F1B58 LDR X0, [X19 + 0x10]
	0x039F1B5C CBZ X0, 0x39F1C0C
	0x039F1B60 ADRP X8, 0x762000
	0x039F1B64 LDR X8, [X8 + 0x858]
	0x039F1B68 ADRP X24, 0x762000
	0x039F1B6C LDR X24, [X24 + 0x868]
	0x039F1B70 ADRP X25, 0x702000
	0x039F1B74 LDR X1, [X8]
	0x039F1B78 ADRP X26, 0x702000
	0x039F1B7C ADRP X23, 0x762000
	0x039F1B80 LDR X25, [X25 + 0x6C0]
	0x039F1B84 LDR X26, [X26 + 0x598]
	0x039F1B88 LDR X23, [X23 + 0x860]
	0x039F1B8C ADD X8, X31, 0x0
	0x039F1B90 BL 0x2AA54BC
	0x039F1B94 LDR X1, [X24]
	0x039F1B98 ADD X0, X31, 0x0
	0x039F1B9C BL 0x2C0A728
	0x039F1BA0 TBZ X0, 0x0, 0x39F1BFC
	0x039F1BA4 LDR X0, [X25]
	0x039F1BA8 LDP X22, X21, [X31 + 0x10]
	0x039F1BAC LDR W8, [X0 + 0xE0]
	0x039F1BB0 CBNZ W8, 0x39F1BB8
	0x039F1BB4 BL 0x1C16DFC
	0x039F1BB8 MOV X0, X22
	0x039F1BBC MOV X1, X31
	0x039F1BC0 MOV X2, X31
	0x039F1BC4 BL 0x3395194
	0x039F1BC8 TBNZ X0, 0x0, 0x39F1BF0
	0x039F1BCC LDR X0, [X26]
	0x039F1BD0 LDR W8, [X0 + 0xE0]
	0x039F1BD4 CBNZ W8, 0x39F1BDC
	0x039F1BD8 BL 0x1C16DFC
	0x039F1BDC MOV X0, X21
	0x039F1BE0 MOV X1, X31
	0x039F1BE4 MOV X2, X31
	0x039F1BE8 BL 0x3C3883C
	0x039F1BEC TBZ X0, 0x0, 0x39F1B94
	0x039F1BF0 LDR X1, [X20 + 0x38]
	0x039F1BF4 MOV X0, X19
	0x039F1BF8 BL 0x39F13A4
	0x039F1BFC LDR X1, [X23]
	0x039F1C00 ADD X0, X31, 0x0
	0x039F1C04 BL 0x2C0A83C
	0x039F1C08 B 0x39F1C18
	0x039F1C0C LDR X1, [X20 + 0x38]
	0x039F1C10 MOV X0, X19
	0x039F1C14 BL 0x39F13A4
	0x039F1C18 LDP X20, X19, [X31 + 0x70]
	0x039F1C1C LDP X22, X21, [X31 + 0x60]
	0x039F1C20 LDP X24, X23, [X31 + 0x50]
	0x039F1C24 LDP X26, X25, [X31 + 0x40]
	0x039F1C28 LDR X30, [X31 + 0x30]
	0x039F1C2C ADD X31, X31, 0x80
	0x039F1C30 RET
	0x039F1C34 BL 0x1C16F20
	0x039F1C38 B 0x39F1C4C
	0x039F1C3C B 0x39F1C4C
	0x039F1C40 B 0x39F1C4C
	0x039F1C44 B 0x39F1C4C
	0x039F1C48 B 0x39F1C4C
	0x039F1C4C MOV X19, X0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move [X31], X1
	015 Move X20, 0x9F1000
	016 Move X21, 0x709000
	017 Move X19, 0x709000
	018 Move W8, [X20+3687]
	019 Move X21, [X21+2912]
	020 Move X19, [X19+2920]
	021 Move X26, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {73}
	026 Move X0, 0x763000
	027 Move X0, [X0+1872]
	028 Call 0x1C17CF4
	029 Move X0, 0x763000
	030 Move X0, [X0+1880]
	031 Call 0x1C17CF4
	032 Move X0, 0x763000
	033 Move X0, [X0+1888]
	034 Call 0x1C17CF4
	035 Move X0, 0x763000
	036 Move X0, [X0+1896]
	037 Call 0x1C17CF4
	038 Move X0, 0x763000
	039 Move X0, [X0+1904]
	040 Call 0x1C17CF4
	041 Move X0, 0x709000
	042 Move X0, [X0+2952]
	043 Call 0x1C17CF4
	044 Move X0, 0x709000
	045 Move X0, [X0+2920]
	046 Call 0x1C17CF4
	047 Move X0, 0x709000
	048 Move X0, [X0+2912]
	049 Call 0x1C17CF4
	050 Move X0, 0x763000
	051 Move X0, [X0+1912]
	052 Call 0x1C17CF4
	053 Move X0, 0x705000
	054 Move X0, [X0+632]
	055 Call 0x1C17CF4
	056 Move X0, 0x763000
	057 Move X0, [X0+1920]
	058 Call 0x1C17CF4
	059 Move X0, 0x763000
	060 Move X0, [X0+1928]
	061 Call 0x1C17CF4
	062 Move X0, 0x709000
	063 Move X0, [X0+2992]
	064 Call 0x1C17CF4
	065 Move X0, 0x72E000
	066 Move X0, [X0+64]
	067 Call 0x1C17CF4
	068 Move X0, 0x763000
	069 Move X0, [X0+1936]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X20+3687], W8
	073 Move X0, [X21]
	074 Call 0x1C17F10
	075 Move X1, [X19]
	076 Move X21, X0
	077 Call List`1<ValueTuple`2<Object, Object>>..ctor, X0
	078 Compare X26, 0
	079 JumpIfEqual {268}
	080 Move W8, [X26+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X27, 0x763000
	083 Move X28, 0x763000
	084 Move X29, 0x763000
	085 Move X27, [X27+1936]
	086 Move X28, [X28+1904]
	087 Move X29, [X29+1912]
	088 Move W25, W31
	089 Move [X31+8], X26
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Add X8, X26, W25
	092 Move X22, [X8+32]
	093 Compare X22, 0
	094 JumpIfEqual {268}
	095 Move X8, 0x705000
	096 Move X8, [X8+632]
	097 Move X9, [X22]
	098 Move X0, X22
	099 Move W1, W31
	100 Move X8, [X8]
	101 Move X8, [X8+184]
	102 Move X23, [X8]
	103 Move X8, [X9+504]
	104 Move X2, [X9+512]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Compare X0, 0
	107 JumpIfEqual {268}
	108 Move X8, [X0+24]
	109 Move X24, X0
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move W26, W31
	112 Move X19, X31
	113 And X8, X8, 0
	114 Add X20, X24, 32
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X8, [X20]
	117 Compare X8, 0
	118 JumpIfEqual {133}
	119 Move X9, [X8]
	120 Move X12, [X27]
	121 Move W10, [X9+304]
	122 Move W13, [X12+304]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X11, [X9+200]
	125 Add X13, X11, X13
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X8, [X28]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X8, [X29]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move W26, 1
	133 Move W8, [X24+24]
	134 Add X19, X19, 1
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X9, 0x72E000
	137 Move X9, [X9+64]
	138 Move X23, [X8+16]
	139 Move X9, [X9]
	140 Move W12, [X9+304]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Add X10, X11, X12
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, [X8+24]
	146 Move X8, 0x763000
	147 Move X8, [X8+1872]
	148 Move X1, [X31]
	149 Move X2, [X8]
	150 Call Enumerable.Contains, X0, X1
	151 Xor W8, W0, 1
	152 Or W26, W26, W8
	153 Move W26, W31
	154 Move TEMP, X26
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfEqual {206}
	158 Move X0, X23
	159 Move X1, X31
	160 Call String.IsNullOrEmpty, X0
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfNotEqual {171}
	165 Move X8, [X22]
	166 Move X0, X22
	167 Move X9, [X8+424]
	168 Move X1, [X8+432]
	169 NotImplemented "Instruction BLR not yet implemented."
	170 Move X23, X0
	171 Move X8, 0x709000
	172 Move X8, [X8+2992]
	173 Add X0, X31, 16
	174 Move X1, X23
	175 Move X2, X22
	176 Move X3, [X8]
	177 Move [X31+16], X31
	178 Move [X31+24], X31
	179 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	180 Compare X21, 0
	181 JumpIfEqual {268}
	182 Move X9, 0x709000
	183 Move X1, [X31+16]
	184 Move X2, [X31+24]
	185 Move W10, [X21+28]
	186 Move X8, [X21+16]
	187 Move X9, [X9+2952]
	188 Add W10, W10, 1
	189 Move X9, [X9]
	190 Move [X21+28], W10
	191 Compare X8, 0
	192 JumpIfEqual {268}
	193 NotImplemented "Instruction LDRSW not yet implemented."
	194 Move W11, [X8+24]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Add W9, W10, 1
	197 Add X8, X8, X10
	198 Move [X21+24], W9
	199 Move [X8+32], X1
	200 Move [X8+40], X2
	201 Move X8, [X9+32]
	202 Move X0, X21
	203 Move X8, [X8+192]
	204 Move X3, [X8+112]
	205 Call List`1<ValueTuple`2<Object, Object>>.AddWithResize, X0, X1
	206 Move X26, [X31+8]
	207 Add W25, W25, 1
	208 Move W8, [X26+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move X22, 0x763000
	211 Move X22, [X22+1928]
	212 Move X0, [X22]
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {218}
	216 Call 0x1C17DFC
	217 Move X0, [X22]
	218 Move X8, [X0+184]
	219 Move X24, 0x763000
	220 Move X23, 0x763000
	221 Move X19, [X8+8]
	222 Move X24, [X24+1880]
	223 Move X23, [X23+1888]
	224 Compare X19, 0
	225 JumpIfNotEqual {247}
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {231}
	229 Call 0x1C17DFC
	230 Move X0, [X22]
	231 Move X9, 0x763000
	232 Move X8, [X0+184]
	233 Move X9, [X9+1896]
	234 Move X20, [X8]
	235 Move X0, [X9]
	236 Call 0x1C17F10
	237 Move X8, 0x763000
	238 Move X8, [X8+1920]
	239 Move X1, X20
	240 Move X3, X31
	241 Move X19, X0
	242 Move X2, [X8]
	243 Call Func`2<ValueTuple`2<Object, Object>, Object>..ctor, X0, X1, X2
	244 Move X8, [X22]
	245 Move X8, [X8+184]
	246 Move [X8+8], X19
	247 Move X2, [X24]
	248 Move X0, X21
	249 Move X1, X19
	250 Call 0x21CA7FC, X0, X1
	251 Move X1, [X23]
	252 Call 0x21D8598, X0
	253 Move X20, [X31+112]
	254 Move X19, [X31+120]
	255 Move X22, [X31+96]
	256 Move X21, [X31+104]
	257 Move X24, [X31+80]
	258 Move X23, [X31+88]
	259 Move X26, [X31+64]
	260 Move X25, [X31+72]
	261 Move X28, [X31+48]
	262 Move X27, [X31+56]
	263 Move X29, [X31+32]
	264 Move X30, [X31+40]
	265 Add X31, X31, 128
	266 Return X0
	267 Call 0x1C17F28
	268 Call 0x1C17F20

Method: System.Type[] get_baseComponentTypeArray()

Disassembly:
	0x039F1C50 CMP W1, 0x1
	0x039F1C54 B.NE 0x39F1C80

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_baseComponentTypeArray(System.Type[] value)

Disassembly:
	0x039F1C58 MOV X0, X19
	0x039F1C5C BL 0x3EB1AD0

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: UnityEngine.Rendering.VolumeComponent GetDefaultVolumeComponent(System.Type volumeComponentType)

Disassembly:
	0x039F1C60 LDR X20, [X0]
	0x039F1C64 BL 0x3EB1AE0
	0x039F1C68 LDR X1, [X23]
	0x039F1C6C ADD X0, X31, 0x0
	0x039F1C70 BL 0x2C0A83C
	0x039F1C74 CBZ X20, 0x39F1C18
	0x039F1C78 MOV X0, X20
	0x039F1C7C BL 0x1C16F18
	0x039F1C80 MOV X20, X31
	0x039F1C84 B 0x39F1C8C
	0x039F1C88 MOV X19, X0
	0x039F1C8C LDR X1, [X23]
	0x039F1C90 ADD X0, X31, 0x0
	0x039F1C94 BL 0x2C0A83C
	0x039F1C98 CBNZ X20, 0x39F1CA4
	0x039F1C9C MOV X0, X19
	0x039F1CA0 BL 0x1D2C690
	0x039F1CA4 MOV X0, X20
	0x039F1CA8 BL 0x1C16F18
	0x039F1CAC BL 0x1990590
	0x039F1CB0 STP X30, X21, [X31 - 0x20]!
	0x039F1CB4 STP X20, X19, [X31 + 0x10]
	0x039F1CB8 ADRP X21, 0x9F0000
	0x039F1CBC LDRB W8, [X21 + 0xE72]
	0x039F1CC0 MOV X19, X1
	0x039F1CC4 MOV X20, X0
	0x039F1CC8 TBNZ X8, 0x0, 0x39F1CE0
	0x039F1CCC ADRP X0, 0x762000
	0x039F1CD0 LDR X0, [X0 + 0x888]
	0x039F1CD4 BL 0x1C16CF4
	0x039F1CD8 MOVZ W8, 0x1
	0x039F1CDC STRB W8, [X21 + 0xE72]
	0x039F1CE0 LDR X8, [X20 + 0x28]
	0x039F1CE4 CBZ X8, 0x39F1D20
	0x039F1CE8 CBZ X19, 0x39F1D20
	0x039F1CEC LDR W8, [X8 + 0x18]
	0x039F1CF0 CBZ W8, 0x39F1CFC
	0x039F1CF4 MOVZ W8, 0x1
	0x039F1CF8 B 0x39F1D04
	0x039F1CFC LDRB W9, [X19 + 0x20]
	0x039F1D00 CBZ W9, 0x39F1D18
	0x039F1D04 STRB W8, [X19 + 0x20]
	0x039F1D08 MOVZ W0, 0x1
	0x039F1D0C LDP X20, X19, [X31 + 0x10]
	0x039F1D10 LDP X30, X21, [X31], #0x20
	0x039F1D14 RET
	0x039F1D18 MOV W0, W31
	0x039F1D1C B 0x39F1D0C
	0x039F1D20 BL 0x1C16F20
	0x039F1D24 LDR X8, [X0 + 0x10]
	0x039F1D28 AND X3, X2, 0x0
	0x039F1D2C MOV X2, X1
	0x039F1D30 MOV X1, X8
	0x039F1D34 B 0x39F1D38
	0x039F1D38 SUB X31, X31, 0xB0
	0x039F1D3C STR D14, [X31 + 0x10]
	0x039F1D40 STP D13, D12, [X31 + 0x20]
	0x039F1D44 STP D11, D10, [X31 + 0x30]
	0x039F1D48 STP D9, D8, [X31 + 0x40]
	0x039F1D4C STP X29, X30, [X31 + 0x50]
	0x039F1D50 STP X28, X27, [X31 + 0x60]
	0x039F1D54 STP X26, X25, [X31 + 0x70]
	0x039F1D58 STP X24, X23, [X31 + 0x80]
	0x039F1D5C STP X22, X21, [X31 + 0x90]
	0x039F1D60 STP X20, X19, [X31 + 0xA0]
	0x039F1D64 ADRP X20, 0x9F0000
	0x039F1D68 LDRB W8, [X20 + 0xE73]
	0x039F1D6C MOV X22, X3
	0x039F1D70 MOV X23, X2
	0x039F1D74 MOV X19, X1
	0x039F1D78 MOV X26, X0
	0x039F1D7C TBNZ X8, 0x0, 0x39F1DE8
	0x039F1D80 ADRP X0, 0x762000
	0x039F1D84 LDR X0, [X0 + 0x668]
	0x039F1D88 BL 0x1C16CF4
	0x039F1D8C ADRP X0, 0x72A000
	0x039F1D90 LDR X0, [X0 + 0x260]
	0x039F1D94 BL 0x1C16CF4
	0x039F1D98 ADRP X0, 0x762000
	0x039F1D9C LDR X0, [X0 + 0x890]
	0x039F1DA0 BL 0x1C16CF4
	0x039F1DA4 ADRP X0, 0x762000
	0x039F1DA8 LDR X0, [X0 + 0x898]
	0x039F1DAC BL 0x1C16CF4
	0x039F1DB0 ADRP X0, 0x762000
	0x039F1DB4 LDR X0, [X0 + 0x888]
	0x039F1DB8 BL 0x1C16CF4
	0x039F1DBC ADRP X0, 0x762000
	0x039F1DC0 LDR X0, [X0 + 0x8A0]
	0x039F1DC4 BL 0x1C16CF4
	0x039F1DC8 ADRP X0, 0x762000
	0x039F1DCC LDR X0, [X0 + 0x8A8]
	0x039F1DD0 BL 0x1C16CF4
	0x039F1DD4 ADRP X0, 0x702000
	0x039F1DD8 LDR X0, [X0 + 0x598]
	0x039F1DDC BL 0x1C16CF4
	0x039F1DE0 MOVZ W8, 0x1
	0x039F1DE4 STRB W8, [X20 + 0xE73]
	0x039F1DE8 MOV X0, X26
	0x039F1DEC MOV X1, X19
	0x039F1DF0 STR X31, [X31 + 0x18]
	0x039F1DF4 BL 0x39F1CB0
	0x039F1DF8 TBZ X0, 0x0, 0x39F210C
	0x039F1DFC ADRP X28, 0x702000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X21, 0x9F1000
	010 Move W8, [X21+3688]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x72C000
	018 Move X0, [X0+2440]
	019 Call 0x1C17CF4
	020 Move X0, 0x72C000
	021 Move X0, [X0+2448]
	022 Call 0x1C17CF4
	023 Move X0, 0x72C000
	024 Move X0, [X0+2456]
	025 Call 0x1C17CF4
	026 Move X0, 0x72C000
	027 Move X0, [X0+2464]
	028 Call 0x1C17CF4
	029 Move X0, 0x703000
	030 Move X0, [X0+1728]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+3688], W8
	034 Move [X31+8], X31
	035 Move [X31+16], X31
	036 Move [X31+24], X31
	037 Move X0, [X20+56]
	038 Compare X0, 0
	039 JumpIfEqual {93}
	040 Move X8, 0x72C000
	041 Move X8, [X8+2464]
	042 Move X23, 0x72C000
	043 Move X24, 0x703000
	044 Move X22, 0x72C000
	045 Move X1, [X8]
	046 Move X23, [X23+2448]
	047 Move X24, [X24+1728]
	048 Move X22, [X22+2440]
	049 Add X8, X31, 8
	050 Call List`1<Object>.GetEnumerator, X0
	051 Move X1, [X23]
	052 Add X0, X31, 8
	053 Call Enumerator<Object>.MoveNext, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {78}
	058 Move X20, [X31+24]
	059 Compare X20, 0
	060 JumpIfEqual {92}
	061 Move X0, X20
	062 Move X1, X31
	063 Call "il2cpp_vm_object_is_inst", X0
	064 Move X21, X0
	065 Move X0, [X24]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X21
	071 Move X1, X19
	072 Move X2, X31
	073 Call Type.op_Equality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {51}
	078 Move X20, X31
	079 Move X1, [X22]
	080 Add X0, X31, 8
	081 Call Enumerator<Object>.Dispose, X0
	082 Move X0, X20
	083 Move X20, [X31+80]
	084 Move X19, [X31+88]
	085 Move X22, [X31+64]
	086 Move X21, [X31+72]
	087 Move X24, [X31+48]
	088 Move X23, [X31+56]
	089 Move X30, [X31+32]
	090 Add X31, X31, 96
	091 Return X0
	092 Call 0x1C17F20
	093 Call 0x1C17F20
	094 Move X19, X0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X0, X19
	097 Call 0x3EB2AD0
	098 Move X20, [X0]
	099 Call 0x3EB2AE0
	100 Move X1, [X22]
	101 Add X0, X31, 8
	102 Call Enumerator<Object>.Dispose, X0
	103 Compare X20, 0
	104 JumpIfEqual {82}
	105 Move X0, X20
	106 Call 0x1C17F18
	107 Move X20, X31
	108 Move X19, X0
	109 Move X1, [X22]
	110 Add X0, X31, 8
	111 Call Enumerator<Object>.Dispose, X0
	112 Compare X20, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X19
	115 Call 0x1D2D690
	116 Move X0, X20
	117 Call 0x1C17F18
	118 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x039F1E00 LDR X28, [X28 + 0x598]
	0x039F1E04 MOV X1, X19
	0x039F1E08 BL 0x39F1958
	0x039F1E0C LDR X0, [X28]
	0x039F1E10 LDR W8, [X0 + 0xE0]
	0x039F1E14 CBNZ W8, 0x39F1E1C
	0x039F1E18 BL 0x1C16DFC
	0x039F1E1C MOV X0, X23
	0x039F1E20 MOV X1, X31
	0x039F1E24 MOV X2, X31
	0x039F1E28 BL 0x3C3883C
	0x039F1E2C MOV W21, W0
	0x039F1E30 TBZ X0, 0x0, 0x39F1E70
	0x039F1E34 ADRP X20, 0x9E7000
	0x039F1E38 LDRB W8, [X20 + 0x783]
	0x039F1E3C CBNZ W8, 0x39F1E54
	0x039F1E40 ADRP X0, 0x702000
	0x039F1E44 LDR X0, [X0 + 0x5A0]
	0x039F1E48 BL 0x1C16CF4
	0x039F1E4C MOVZ W8, 0x1
	0x039F1E50 STRB W8, [X20 + 0x783]
	0x039F1E54 ADRP X8, 0x702000
	0x039F1E58 LDR X8, [X8 + 0x5A0]
	0x039F1E5C LDR X8, [X8]
	0x039F1E60 LDR X8, [X8 + 0xB8]
	0x039F1E64 LDP S8, S9, [X8]
	0x039F1E68 LDR V10, [X8 + 0x8]
	0x039F1E6C B 0x39F1E8C
	0x039F1E70 CBZ X23, 0x39F213C
	0x039F1E74 MOV X0, X23
	0x039F1E78 MOV X1, X31
	0x039F1E7C BL 0x3C3F58C
	0x039F1E80 MOV V8.16B, V0.16B
	0x039F1E84 MOV V9.16B, V1.16B
	0x039F1E88 MOV V10.16B, V2.16B
	0x039F1E8C AND X1, X22, 0x0
	0x039F1E90 MOV X0, X26
	0x039F1E94 BL 0x39F2140
	0x039F1E98 MOV X22, X0
	0x039F1E9C STR X31, [X31 + 0x18]
	0x039F1EA0 TBNZ X21, 0x0, 0x39F1EC0
	0x039F1EA4 CBZ X23, 0x39F213C
	0x039F1EA8 ADRP X8, 0x72A000
	0x039F1EAC LDR X8, [X8 + 0x260]
	0x039F1EB0 ADD X1, X31, 0x18
	0x039F1EB4 MOV X0, X23
	0x039F1EB8 LDR X2, [X8]
	0x039F1EBC BL 0x21A4990
	0x039F1EC0 STR W21, [X31 + 0xC]
	0x039F1EC4 CBZ X22, 0x39F213C
	0x039F1EC8 LDR W29, [X22 + 0x18]
	0x039F1ECC CMP W29, 0x1
	0x039F1ED0 B.LT 0x39F210C
	0x039F1ED4 ADRP X21, 0x762000
	0x039F1ED8 LDR X21, [X21 + 0x8A8]
	0x039F1EDC MOV W23, W31
	0x039F1EE0 FMOV S11, 1
	0x039F1EE4 FMOV S12, W31
	0x039F1EE8 LDR X2, [X21]
	0x039F1EEC MOV X0, X22
	0x039F1EF0 MOV W1, W23
	0x039F1EF4 BL 0x301BCCC
	0x039F1EF8 LDR X8, [X28]
	0x039F1EFC MOV X24, X0
	0x039F1F00 LDR W9, [X8 + 0xE0]
	0x039F1F04 CBNZ W9, 0x39F1F10
	0x039F1F08 MOV X0, X8
	0x039F1F0C BL 0x1C16DFC
	0x039F1F10 MOV X0, X24
	0x039F1F14 MOV X1, X31
	0x039F1F18 MOV X2, X31
	0x039F1F1C BL 0x3C3883C
	0x039F1F20 TBNZ X0, 0x0, 0x39F20C0
	0x039F1F24 CBZ X24, 0x39F213C
	0x039F1F28 MOV X0, X24
	0x039F1F2C MOV X1, X31
	0x039F1F30 BL 0x3C323D4
	0x039F1F34 TBZ X0, 0x0, 0x39F20C0
	0x039F1F38 MOV X0, X24
	0x039F1F3C BL 0x39EE6E8
	0x039F1F40 LDR X8, [X28]
	0x039F1F44 MOV X25, X0
	0x039F1F48 LDR W9, [X8 + 0xE0]
	0x039F1F4C CBNZ W9, 0x39F1F58
	0x039F1F50 MOV X0, X8
	0x039F1F54 BL 0x1C16DFC
	0x039F1F58 MOV X0, X25
	0x039F1F5C MOV X1, X31
	0x039F1F60 MOV X2, X31
	0x039F1F64 BL 0x3C3883C
	0x039F1F68 TBNZ X0, 0x0, 0x39F20C0
	0x039F1F6C LDR V0, [X24 + 0x2C]
	0x039F1F70 FCMP S0, 0x0
	0x039F1F74 B.LS 0x39F20C0
	0x039F1F78 LDRB W8, [X24 + 0x20]
	0x039F1F7C CBZ W8, 0x39F1FAC
	0x039F1F80 MOV X0, X24
	0x039F1F84 BL 0x39EE6E8
	0x039F1F88 CBZ X0, 0x39F213C
	0x039F1F8C LDR V0, [X24 + 0x2C]
	0x039F1F90 LDR X2, [X0 + 0x18]
	0x039F1F94 FMIN S1, S0, S11
	0x039F1F98 FCMP S0, 0x0
	0x039F1F9C FCSEL S0, S1, S12, PL
	0x039F1FA0 MOV X1, X19
	0x039F1FA4 BL 0x39F1804
	0x039F1FA8 B 0x39F20C0
	0x039F1FAC LDR W8, [X31 + 0xC]
	0x039F1FB0 TBNZ X8, 0x0, 0x39F20C0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x9F1000
	014 Move X29, 0x763000
	015 Move X20, 0x763000
	016 Move X28, 0x763000
	017 Move X27, 0x763000
	018 Move X26, 0x763000
	019 Move X25, 0x763000
	020 Move X24, 0x72F000
	021 Move X23, 0x763000
	022 Move X22, 0x763000
	023 Move X29, [X29+1944]
	024 Move X20, [X20+1952]
	025 Move X28, [X28+1960]
	026 Move X27, [X27+1968]
	027 Move X26, [X26+1976]
	028 Move W8, [X21+3689]
	029 Move X25, [X25+1984]
	030 Move X24, [X24+3144]
	031 Move X23, [X23+1992]
	032 Move X22, [X22+2000]
	033 Move X19, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {70}
	038 Move X0, 0x763000
	039 Move X0, [X0+1984]
	040 Call 0x1C17CF4
	041 Move X0, 0x763000
	042 Move X0, [X0+1952]
	043 Call 0x1C17CF4
	044 Move X0, 0x763000
	045 Move X0, [X0+1976]
	046 Call 0x1C17CF4
	047 Move X0, 0x763000
	048 Move X0, [X0+1944]
	049 Call 0x1C17CF4
	050 Move X0, 0x763000
	051 Move X0, [X0+2008]
	052 Call 0x1C17CF4
	053 Move X0, 0x763000
	054 Move X0, [X0+1968]
	055 Call 0x1C17CF4
	056 Move X0, 0x763000
	057 Move X0, [X0+1992]
	058 Call 0x1C17CF4
	059 Move X0, 0x72F000
	060 Move X0, [X0+3144]
	061 Call 0x1C17CF4
	062 Move X0, 0x763000
	063 Move X0, [X0+2000]
	064 Call 0x1C17CF4
	065 Move X0, 0x763000
	066 Move X0, [X0+1960]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X21+3689], W8
	070 Move X0, X19
	071 Move X1, X31
	072 Call Object..ctor, X0
	073 Move X0, [X29]
	074 Call 0x1C17F10
	075 Move X1, [X20]
	076 Move X20, X0
	077 Call Dictionary`2<Int32, Object>..ctor, X0
	078 Move [X19+32], X20
	079 Move X0, [X28]
	080 Call 0x1C17F10
	081 Move X1, [X27]
	082 Move X20, X0
	083 Call List`1<Object>..ctor, X0
	084 Move [X19+40], X20
	085 Move X0, [X26]
	086 Call 0x1C17F10
	087 Move X1, [X25]
	088 Move X20, X0
	089 Call Dictionary`2<Int32, Boolean>..ctor, X0
	090 Move [X19+48], X20
	091 Move X0, [X24]
	092 Call 0x1C17F10
	093 Move X2, [X23]
	094 Move W1, 8
	095 Move X20, X0
	096 Call List`1<Object>..ctor, X0, X1
	097 Move [X19+64], X20
	098 Move X0, [X22]
	099 Call 0x1C17F10
	100 Move X8, 0x763000
	101 Move X8, [X8+2008]
	102 Move X20, X0
	103 Move X1, [X8]
	104 Call List`1<Object>..ctor, X0
	105 Move X0, X19
	106 Move [X19+56], X20
	107 Call VolumeManager.ReloadBaseTypes, X0
	108 Move X0, X19
	109 Call VolumeManager.CreateStack, X0
	110 Move [X19+72], X0
	111 Move [X19+16], X0
	112 Move X20, [X31+80]
	113 Move X19, [X31+88]
	114 Move X22, [X31+64]
	115 Move X21, [X31+72]
	116 Move X24, [X31+48]
	117 Move X23, [X31+56]
	118 Move X26, [X31+32]
	119 Move X25, [X31+40]
	120 Move X28, [X31+16]
	121 Move X27, [X31+24]
	122 Move X29, [X31+96]
	123 Move X30, [X31+104]
	124 Return 

Method: UnityEngine.Rendering.VolumeStack CreateStack()

Disassembly:
	0x039F22B8 MOV X1, X31
	0x039F22BC BL 0x3C35734
	0x039F22C0 LSRV W8, W23, W0
	0x039F22C4 TBZ X8, 0x0, 0x39F2348
	0x039F22C8 LDR X0, [X31 + 0x8]
	0x039F22CC CBZ X0, 0x39F2438
	0x039F22D0 LDR W10, [X0 + 0x1C]
	0x039F22D4 LDR X8, [X0 + 0x10]
	0x039F22D8 LDR X9, [X27]
	0x039F22DC ADD W10, W10, 0x1
	0x039F22E0 STR W10, [X0 + 0x1C]
	0x039F22E4 CBZ X8, 0x39F2438
	0x039F22E8 LDRSW X10, [X0 + 0x18]
	0x039F22EC LDR W11, [X8 + 0x18]
	0x039F22F0 CMP W10, W11
	0x039F22F4 B.CS 0x39F230C
	0x039F22F8 ADD W9, W10, 0x1
	0x039F22FC ADD X8, X8, X10, 0x3, LSL
	0x039F2300 STR W9, [X0 + 0x18]
	0x039F2304 STR X22, [X8 + 0x20]
	0x039F2308 B 0x39F2320
	0x039F230C LDR X8, [X9 + 0x20]
	0x039F2310 MOV X1, X22
	0x039F2314 LDR X8, [X8 + 0xC0]
	0x039F2318 LDR X2, [X8 + 0x70]
	0x039F231C BL 0x301BF90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x9F0000
	006 Move X21, 0x762000
	007 Move W8, [X20+3690]
	008 Move X21, [X21+2048]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x762000
	015 Move X0, [X0+2048]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3690], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X20, X0
	022 Call VolumeStack..ctor, X0
	023 Compare X20, 0
	024 JumpIfEqual {34}
	025 Move X1, [X19+56]
	026 Move X0, X20
	027 Call VolumeStack.Reload, X0, X1
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0
	034 Call 0x1C17F20

Method: System.Void ResetMainStack()

Disassembly:
	0x039F27E0 BL 0x2AA4804
	0x039F27E4 LDR X8, [X21]
	0x039F27E8 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move X8, [X0+72]
	002 Move [X0+16], X8
	003 Return 

Method: System.Void DestroyStack(UnityEngine.Rendering.VolumeStack stack)

Disassembly:
	0x039F27EC LDP X24, X23, [X31 + 0x20]
	0x039F27F0 LDP X26, X25, [X31 + 0x10]
	0x039F27F4 LDR X8, [X8 + 0xB8]
	0x039F27F8 STR X19, [X8 + 0x8]
	0x039F27FC LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call VolumeStack.Clear, X0
	005 Return 
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: System.Void ReloadBaseTypes()

Disassembly:
	0x039F1FB4 ADRP X8, 0x762000
	0x039F1FB8 LDR X25, [X26 + 0x40]
	0x039F1FBC LDR X8, [X8 + 0x668]
	0x039F1FC0 MOV X0, X24
	0x039F1FC4 MOV X1, X25
	0x039F1FC8 LDR X2, [X8]
	0x039F1FCC BL 0x21A443C
	0x039F1FD0 CBZ X25, 0x39F213C
	0x039F1FD4 LDR W20, [X25 + 0x18]
	0x039F1FD8 CBZ W20, 0x39F20C0
	0x039F1FDC CMP W20, 0x1
	0x039F1FE0 B.LT 0x39F209C
	0x039F1FE4 MOVZ W8, 0x7F800000
	0x039F1FE8 STR X26, [X31]
	0x039F1FEC MOV W26, W31
	0x039F1FF0 FMOV S13, W8
	0x039F1FF4 ADRP X8, 0x762000
	0x039F1FF8 LDR X8, [X8 + 0x8A0]
	0x039F1FFC MOV X0, X25
	0x039F2000 MOV W1, W26
	0x039F2004 LDR X2, [X8]
	0x039F2008 BL 0x301BCCC
	0x039F200C CBZ X0, 0x39F213C
	0x039F2010 MOV X1, X31
	0x039F2014 MOV X27, X0
	0x039F2018 BL 0x3C8F70C
	0x039F201C TBZ X0, 0x0, 0x39F2064
	0x039F2020 MOV X0, X27
	0x039F2024 MOV V0.16B, V8.16B
	0x039F2028 MOV V1.16B, V9.16B
	0x039F202C MOV V2.16B, V10.16B
	0x039F2030 MOV X1, X31
	0x039F2034 BL 0x3C8F80C
	0x039F2038 FSUB S0, S0, S8
	0x039F203C FSUB S1, S1, S9
	0x039F2040 FSUB S2, S2, S10
	0x039F2044 FMUL S0, S0, S0
	0x039F2048 FMUL S1, S1, S1
	0x039F204C FADD S0, S0, S1
	0x039F2050 FMUL S1, S2, S2
	0x039F2054 FADD S0, S1, S0
	0x039F2058 FCMP S0, S13
	0x039F205C B.PL 0x39F2064
	0x039F2060 MOV V13.16B, V0.16B
	0x039F2064 ADD W26, W26, 0x1
	0x039F2068 CMP W20, W26
	0x039F206C B.NE 0x39F1FF4
	0x039F2070 LDP W2, W8, [X25 + 0x18]
	0x039F2074 ADD W8, W8, 0x1
	0x039F2078 CMP W2, 0x1
	0x039F207C STP W31, W8, [X25 + 0x18]
	0x039F2080 B.LT 0x39F2094
	0x039F2084 LDR X0, [X25 + 0x10]
	0x039F2088 MOV W1, W31
	0x039F208C MOV X3, X31
	0x039F2090 BL 0x339FA34
	0x039F2094 LDR X26, [X31]
	0x039F2098 B 0x39F20B0
	0x039F209C LDR W8, [X25 + 0x1C]
	0x039F20A0 MOVZ W9, 0x7F800000
	0x039F20A4 FMOV S13, W9
	0x039F20A8 ADD W8, W8, 0x1
	0x039F20AC STP W31, W8, [X25 + 0x18]
	0x039F20B0 LDR V0, [X24 + 0x28]
	0x039F20B4 FMUL S0, S0, S0
	0x039F20B8 FCMP S13, S0
	0x039F20BC B.LE 0x39F20D0
	0x039F20C0 ADD W23, W23, 0x1
	0x039F20C4 CMP W23, W29
	0x039F20C8 B.NE 0x39F1EE8
	0x039F20CC B 0x39F210C
	0x039F20D0 FCMP S0, 0x0
	0x039F20D4 FMOV S14, 1
	0x039F20D8 B.LE 0x39F20E4
	0x039F20DC FDIV S0, S13, S0
	0x039F20E0 FSUB S14, S11, S0
	0x039F20E4 MOV X0, X24
	0x039F20E8 BL 0x39EE6E8
	0x039F20EC CBZ X0, 0x39F213C
	0x039F20F0 LDR V0, [X24 + 0x2C]
	0x039F20F4 LDR X2, [X0 + 0x18]
	0x039F20F8 FMIN S1, S0, S11
	0x039F20FC FCMP S0, 0x0
	0x039F2100 FCSEL S0, S1, S12, PL
	0x039F2104 FMUL S0, S14, S0
	0x039F2108 B 0x39F1FA0
	0x039F210C LDP X20, X19, [X31 + 0xA0]
	0x039F2110 LDP X22, X21, [X31 + 0x90]
	0x039F2114 LDP X24, X23, [X31 + 0x80]
	0x039F2118 LDP X26, X25, [X31 + 0x70]
	0x039F211C LDP X28, X27, [X31 + 0x60]
	0x039F2120 LDP X29, X30, [X31 + 0x50]
	0x039F2124 LDP D9, D8, [X31 + 0x40]
	0x039F2128 LDP D11, D10, [X31 + 0x30]
	0x039F212C LDP D13, D12, [X31 + 0x20]
	0x039F2130 LDR V14, [X31 + 0x10]
	0x039F2134 ADD X31, X31, 0xB0
	0x039F2138 RET
	0x039F213C BL 0x1C16F20
	0x039F2140 SUB X31, X31, 0x60
	0x039F2144 STP X30, X27, [X31 + 0x10]
	0x039F2148 STP X26, X25, [X31 + 0x20]
	0x039F214C STP X24, X23, [X31 + 0x30]
	0x039F2150 STP X22, X21, [X31 + 0x40]
	0x039F2154 STP X20, X19, [X31 + 0x50]
	0x039F2158 ADRP X21, 0x9EF000
	0x039F215C LDRB W8, [X21 + 0xE75]
	0x039F2160 MOV X20, X1
	0x039F2164 MOV X19, X0
	0x039F2168 TBNZ X8, 0x0, 0x39F21EC
	0x039F216C ADRP X0, 0x761000
	0x039F2170 LDR X0, [X0 + 0x8B0]
	0x039F2174 BL 0x1C16CF4
	0x039F2178 ADRP X0, 0x761000
	0x039F217C LDR X0, [X0 + 0x8B8]
	0x039F2180 BL 0x1C16CF4
	0x039F2184 ADRP X0, 0x761000
	0x039F2188 LDR X0, [X0 + 0x8C0]
	0x039F218C BL 0x1C16CF4
	0x039F2190 ADRP X0, 0x761000
	0x039F2194 LDR X0, [X0 + 0x690]
	0x039F2198 BL 0x1C16CF4
	0x039F219C ADRP X0, 0x761000
	0x039F21A0 LDR X0, [X0 + 0x678]
	0x039F21A4 BL 0x1C16CF4
	0x039F21A8 ADRP X0, 0x761000
	0x039F21AC LDR X0, [X0 + 0x7B0]
	0x039F21B0 BL 0x1C16CF4
	0x039F21B4 ADRP X0, 0x761000
	0x039F21B8 LDR X0, [X0 + 0x888]
	0x039F21BC BL 0x1C16CF4
	0x039F21C0 ADRP X0, 0x761000
	0x039F21C4 LDR X0, [X0 + 0x8A8]
	0x039F21C8 BL 0x1C16CF4
	0x039F21CC ADRP X0, 0x761000
	0x039F21D0 LDR X0, [X0 + 0x7A8]
	0x039F21D4 BL 0x1C16CF4
	0x039F21D8 ADRP X0, 0x72B000
	0x039F21DC LDR X0, [X0 + 0xFC0]
	0x039F21E0 BL 0x1C16CF4
	0x039F21E4 MOVZ W8, 0x1
	0x039F21E8 STRB W8, [X21 + 0xE75]
	0x039F21EC STR X31, [X31 + 0x8]
	0x039F21F0 STRB W31, [X31 + 0x4]
	0x039F21F4 LDR X21, [X19 + 0x20]
	0x039F21F8 AND X20, X20, 0x0
	0x039F21FC MOV X0, X20
	0x039F2200 MOV X1, X31
	0x039F2204 BL 0x3C35CB8
	0x039F2208 CBZ X21, 0x39F2438
	0x039F220C ADRP X8, 0x761000
	0x039F2210 LDR X8, [X8 + 0x8B8]
	0x039F2214 ADRP X24, 0x761000
	0x039F2218 MOV W1, W0
	0x039F221C ADD X2, X31, 0x8
	0x039F2220 LDR X3, [X8]
	0x039F2224 LDR X24, [X24 + 0x690]
	0x039F2228 MOV X0, X21
	0x039F222C BL 0x2A150AC
	0x039F2230 TBNZ X0, 0x0, 0x39F2390
	0x039F2234 ADRP X8, 0x761000
	0x039F2238 LDR X8, [X8 + 0x7A8]
	0x039F223C LDR X0, [X8]
	0x039F2240 BL 0x1C16F10
	0x039F2244 ADRP X8, 0x761000
	0x039F2248 LDR X8, [X8 + 0x7B0]
	0x039F224C MOV X21, X0
	0x039F2250 LDR X1, [X8]
	0x039F2254 BL 0x301B7C4
	0x039F2258 STR X21, [X31 + 0x8]
	0x039F225C LDR X0, [X19 + 0x28]
	0x039F2260 CBZ X0, 0x39F2438
	0x039F2264 LDR W25, [X0 + 0x18]
	0x039F2268 CMP W25, 0x1
	0x039F226C B.LT 0x39F2360
	0x039F2270 ADRP X26, 0x761000
	0x039F2274 ADRP X27, 0x761000
	0x039F2278 LDR X26, [X26 + 0x8A8]
	0x039F227C LDR X27, [X27 + 0x678]
	0x039F2280 MOV W21, W31
	0x039F2284 LDR X2, [X26]
	0x039F2288 MOV W1, W21
	0x039F228C BL 0x301BCCC
	0x039F2290 MOV X22, X0
	0x039F2294 MOV X0, X20
	0x039F2298 MOV X1, X31
	0x039F229C BL 0x3C35CB8
	0x039F22A0 CBZ X22, 0x39F2438
	0x039F22A4 MOV W23, W0
	0x039F22A8 MOV X0, X22
	0x039F22AC MOV X1, X31
	0x039F22B0 BL 0x3C32ECC
	0x039F22B4 CBZ X0, 0x39F2438

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x9F1000
	011 Move W8, [X20+3691]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {52}
	017 Move X0, 0x763000
	018 Move X0, [X0+2016]
	019 Call 0x1C17CF4
	020 Move X0, 0x72B000
	021 Move X0, [X0+2296]
	022 Call 0x1C17CF4
	023 Move X0, 0x72C000
	024 Move X0, [X0+928]
	025 Call 0x1C17CF4
	026 Move X0, 0x72B000
	027 Move X0, [X0+2304]
	028 Call 0x1C17CF4
	029 Move X0, 0x70C000
	030 Move X0, [X0+2480]
	031 Call 0x1C17CF4
	032 Move X0, 0x762000
	033 Move X0, [X0+1616]
	034 Call 0x1C17CF4
	035 Move X0, 0x762000
	036 Move X0, [X0+2024]
	037 Call 0x1C17CF4
	038 Move X0, 0x762000
	039 Move X0, [X0+2032]
	040 Call 0x1C17CF4
	041 Move X0, 0x762000
	042 Move X0, [X0+1928]
	043 Call 0x1C17CF4
	044 Move X0, 0x760000
	045 Move X0, [X0+1808]
	046 Call 0x1C17CF4
	047 Move X0, 0x762000
	048 Move X0, [X0+2040]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+3691], W8
	052 Move X8, [X19+56]
	053 Compare X8, 0
	054 JumpIfEqual {207}
	055 Move W2, [X8+24]
	056 Move W9, [X8+28]
	057 Move X20, 0x72A000
	058 Move X20, [X20+2296]
	059 Add W9, W9, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move [X8+24], W31
	062 Move [X8+28], W9
	063 Move X0, [X8+16]
	064 Move W1, W31
	065 Move X3, X31
	066 Call Array.Clear, X0, X1, X2
	067 Move X0, [X20]
	068 Move X20, 0x762000
	069 Move X23, 0x762000
	070 Move W8, [X0+224]
	071 Move X20, [X20+2016]
	072 Move X23, [X23+1928]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, [X20]
	077 Call 0x21A8C6C
	078 Move X8, [X23]
	079 Move X20, X0
	080 Move W9, [X8+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {86}
	083 Move X0, X8
	084 Call 0x1C17DFC
	085 Move X8, [X23]
	086 Move X9, [X8+184]
	087 Move X25, 0x72A000
	088 Move X24, 0x72B000
	089 Move X21, [X9+16]
	090 Move X25, [X25+2304]
	091 Move X24, [X24+928]
	092 Compare X21, 0
	093 JumpIfNotEqual {116}
	094 Move W9, [X8+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {100}
	097 Move X0, X8
	098 Call 0x1C17DFC
	099 Move X8, [X23]
	100 Move X9, 0x70C000
	101 Move X8, [X8+184]
	102 Move X9, [X9+2480]
	103 Move X22, [X8]
	104 Move X0, [X9]
	105 Call 0x1C17F10
	106 Move X8, 0x762000
	107 Move X8, [X8+2032]
	108 Move X1, X22
	109 Move X3, X31
	110 Move X21, X0
	111 Move X2, [X8]
	112 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	113 Move X8, [X23]
	114 Move X8, [X8+184]
	115 Move [X8+16], X21
	116 Move X2, [X25]
	117 Move X0, X20
	118 Move X1, X21
	119 Call Enumerable.Where, X0, X1
	120 Move X1, [X24]
	121 Call Enumerable.ToArray, X0
	122 Move [X19+24], X0
	123 Compare X0, 0
	124 JumpIfEqual {207}
	125 Move W8, [X0+24]
	126 Move X20, X0
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X24, 0x762000
	129 Move X25, 0x760000
	130 Move X26, 0x762000
	131 Move X24, [X24+2040]
	132 Move X25, [X25+1808]
	133 Move X26, [X26+1616]
	134 Move X21, X31
	135 Move W23, W31
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Add X8, X20, W23
	138 Move X22, [X8+32]
	139 Compare X22, 0
	140 JumpIfEqual {207}
	141 Move X1, [X24]
	142 Move W2, 56
	143 Move X0, X22
	144 Move X3, X31
	145 Call Type.GetMethod, X0, X1, X2
	146 NotImplemented "Instruction CMP not yet implemented."
	147 NotImplemented "Instruction CSEL not yet implemented."
	148 Compare X0, 0
	149 JumpIfEqual {157}
	150 Compare X21, 0
	151 JumpIfEqual {207}
	152 Move X0, X21
	153 Move X1, X31
	154 Move X2, X31
	155 Move X3, X31
	156 Call MethodBase.Invoke, X0, X1, X2
	157 Move X0, X22
	158 Move X1, X31
	159 Call ScriptableObject.CreateInstance, X0
	160 Move X8, X0
	161 Compare X0, 0
	162 JumpIfEqual {172}
	163 Move X9, [X8]
	164 Move X1, [X25]
	165 Move W11, [X9+304]
	166 Move W10, [X1+304]
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move X9, [X9+200]
	169 Add X9, X9, X10
	170 NotImplemented "Instruction LDUR not yet implemented."
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X0, [X19+56]
	173 Compare X0, 0
	174 JumpIfEqual {207}
	175 Move W11, [X0+28]
	176 Move X9, [X0+16]
	177 Move X10, [X26]
	178 Add W11, W11, 1
	179 Move [X0+28], W11
	180 Compare X9, 0
	181 JumpIfEqual {207}
	182 NotImplemented "Instruction LDRSW not yet implemented."
	183 Move W12, [X9+24]
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Add W10, W11, 1
	186 Add X9, X9, X11
	187 Move [X0+24], W10
	188 Move [X9+32], X8
	189 Move X9, [X10+32]
	190 Move X1, X8
	191 Move X9, [X9+192]
	192 Move X2, [X9+112]
	193 Call List`1<Object>.AddWithResize, X0, X1
	194 Move W8, [X20+24]
	195 Add W23, W23, 1
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X20, [X31+64]
	198 Move X19, [X31+72]
	199 Move X22, [X31+48]
	200 Move X21, [X31+56]
	201 Move X24, [X31+32]
	202 Move X23, [X31+40]
	203 Move X26, [X31+16]
	204 Move X25, [X31+24]
	205 Move X30, [X31+80]
	206 Return 
	207 Call 0x1C17F20
	208 Move X0, X8
	209 Call 0x1C181E0
	210 Call 0x1C17F28

Method: System.Void Register(UnityEngine.Rendering.Volume volume, System.Int32 layer)

Disassembly:
	0x039EF8DC B 0x39EF928
	0x039EF8E0 B 0x39EF928
	0x039EF8E4 B 0x39EF928
	0x039EF8E8 B 0x39EF928
	0x039EF8EC B 0x39EF928
	0x039EF8F0 B 0x39EF928
	0x039EF8F4 B 0x39EF928
	0x039EF8F8 B 0x39EF928
	0x039EF8FC B 0x39EF928
	0x039EF900 B 0x39EF928
	0x039EF904 B 0x39EF928
	0x039EF908 B 0x39EF928
	0x039EF90C B 0x39EF928
	0x039EF910 B 0x39EF928
	0x039EF914 B 0x39EF928
	0x039EF918 B 0x39EF928
	0x039EF91C B 0x39EF928
	0x039EF920 B 0x39EF928
	0x039EF924 B 0x39EF928
	0x039EF928 MOV X20, X0
	0x039EF92C CMP W1, 0x1
	0x039EF930 B.NE 0x39EF948
	0x039EF934 MOV X0, X20
	0x039EF938 BL 0x3EB1AD0
	0x039EF93C LDR X21, [X0]
	0x039EF940 BL 0x3EB1AE0
	0x039EF944 B 0x39EF820
	0x039EF948 MOV X21, X31
	0x039EF94C B 0x39EF954
	0x039EF950 MOV X20, X0
	0x039EF954 CBZ X19, 0x39EF9B8
	0x039EF958 ADRP X10, 0x704000
	0x039EF95C LDR X8, [X19]
	0x039EF960 LDR X10, [X10 + 0xE00]
	0x039EF964 LDRH W9, [X8 + 0x12E]
	0x039EF968 LDR X1, [X10]
	0x039EF96C CBZ X9, 0x39EF990
	0x039EF970 LDR X10, [X8 + 0xB0]
	0x039EF974 ADD X10, X10, 0x8
	0x039EF978 LDUR X11, [X10 - 0x8]
	0x039EF97C CMP X11, X1
	0x039EF980 B.EQ 0x39EF9A0
	0x039EF984 SUBS X9, X9, 0x1
	0x039EF988 ADD X10, X10, 0x10
	0x039EF98C B.NE 0x39EF978
	0x039EF990 MOV X0, X19
	0x039EF994 MOV W2, W31
	0x039EF998 BL 0x1C5C788
	0x039EF99C B 0x39EF9AC
	0x039EF9A0 LDRSW X9, [X10]
	0x039EF9A4 ADD X8, X8, X9, 0x4, LSL
	0x039EF9A8 ADD X0, X8, 0x138
	0x039EF9AC LDP X8, X1, [X0]
	0x039EF9B0 MOV X0, X19
	0x039EF9B4 BLR X8
	0x039EF9B8 CBNZ X21, 0x39EF9C4
	0x039EF9BC MOV X0, X20
	0x039EF9C0 BL 0x1D2C690
	0x039EF9C4 MOV X0, X21
	0x039EF9C8 BL 0x1C16F18
	0x039EF9CC BL 0x1990590
	0x039EF9D0 SUB X31, X31, 0x80
	0x039EF9D4 STP X30, X25, [X31 + 0x40]
	0x039EF9D8 STP X24, X23, [X31 + 0x50]
	0x039EF9DC STP X22, X21, [X31 + 0x60]
	0x039EF9E0 STP X20, X19, [X31 + 0x70]
	0x039EF9E4 ADRP X20, 0x9F2000
	0x039EF9E8 LDRB W8, [X20 + 0xE5B]
	0x039EF9EC MOV X19, X0
	0x039EF9F0 TBNZ X8, 0x0, 0x39EFA5C
	0x039EF9F4 ADRP X0, 0x704000
	0x039EF9F8 LDR X0, [X0 + 0xA28]
	0x039EF9FC BL 0x1C16CF4
	0x039EFA00 ADRP X0, 0x764000
	0x039EFA04 LDR X0, [X0 + 0x6D0]
	0x039EFA08 BL 0x1C16CF4
	0x039EFA0C ADRP X0, 0x764000
	0x039EFA10 LDR X0, [X0 + 0x6D8]
	0x039EFA14 BL 0x1C16CF4
	0x039EFA18 ADRP X0, 0x764000
	0x039EFA1C LDR X0, [X0 + 0x6E0]
	0x039EFA20 BL 0x1C16CF4
	0x039EFA24 ADRP X0, 0x764000
	0x039EFA28 LDR X0, [X0 + 0x6E8]
	0x039EFA2C BL 0x1C16CF4
	0x039EFA30 ADRP X0, 0x764000
	0x039EFA34 LDR X0, [X0 + 0x6F0]
	0x039EFA38 BL 0x1C16CF4
	0x039EFA3C ADRP X0, 0x764000
	0x039EFA40 LDR X0, [X0 + 0x6F8]
	0x039EFA44 BL 0x1C16CF4
	0x039EFA48 ADRP X0, 0x764000
	0x039EFA4C LDR X0, [X0 + 0x700]
	0x039EFA50 BL 0x1C16CF4
	0x039EFA54 MOVZ W8, 0x1
	0x039EFA58 STRB W8, [X20 + 0xE5B]
	0x039EFA5C STP X31, X31, [X31 + 0x20]
	0x039EFA60 STR X31, [X31 + 0x30]
	0x039EFA64 LDR X1, [X19 + 0x28]
	0x039EFA68 CBZ X1, 0x39EFB98
	0x039EFA6C LDP W2, W8, [X1 + 0x18]
	0x039EFA70 ADD W8, W8, 0x1
	0x039EFA74 CMP W2, 0x1
	0x039EFA78 STP W31, W8, [X1 + 0x18]
	0x039EFA7C B.LT 0x39EFA94
	0x039EFA80 LDR X0, [X1 + 0x10]
	0x039EFA84 MOV W1, W31
	0x039EFA88 MOV X3, X31
	0x039EFA8C BL 0x339FA34
	0x039EFA90 LDR X1, [X19 + 0x28]
	0x039EFA94 MOV X0, X19
	0x039EFA98 MOV X2, X31
	0x039EFA9C BL 0x39EF3A8
	0x039EFAA0 LDR X0, [X19 + 0x28]
	0x039EFAA4 CBZ X0, 0x39EFB98
	0x039EFAA8 ADRP X8, 0x764000
	0x039EFAAC LDR X8, [X8 + 0x6F0]
	0x039EFAB0 ADRP X22, 0x764000
	0x039EFAB4 ADRP X23, 0x764000
	0x039EFAB8 LDR X22, [X22 + 0x6D8]
	0x039EFABC LDR X23, [X23 + 0x6F8]
	0x039EFAC0 LDR X1, [X8]
	0x039EFAC4 ADRP X24, 0x764000
	0x039EFAC8 ADRP X25, 0x704000
	0x039EFACC ADRP X21, 0x764000
	0x039EFAD0 LDR X24, [X24 + 0x700]
	0x039EFAD4 LDR X25, [X25 + 0xA28]
	0x039EFAD8 LDR X21, [X21 + 0x6D0]
	0x039EFADC ADD X8, X31, 0x8
	0x039EFAE0 BL 0x301CB58
	0x039EFAE4 LDUR V0, [X31 + 0x8]
	0x039EFAE8 LDR X8, [X31 + 0x18]
	0x039EFAEC STR V0, [X31 + 0x2]
	0x039EFAF0 STR X8, [X31 + 0x30]
	0x039EFAF4 LDR X1, [X22]
	0x039EFAF8 ADD X0, X31, 0x20
	0x039EFAFC BL 0x2BC4350
	0x039EFB00 TBZ X0, 0x0, 0x39EFB70
	0x039EFB04 LDR X0, [X31 + 0x30]
	0x039EFB08 CBZ X0, 0x39EFB1C
	0x039EFB0C LDR X8, [X0]
	0x039EFB10 LDP X9, X1, [X8 + 0x1C8]
	0x039EFB14 BLR X9
	0x039EFB18 B 0x39EFAF4
	0x039EFB1C MOV X0, X19
	0x039EFB20 MOV X1, X31
	0x039EFB24 BL 0x33BE520
	0x039EFB28 CBZ X0, 0x39EFB94
	0x039EFB2C LDR X8, [X0]
	0x039EFB30 LDP X9, X1, [X8 + 0x1A8]
	0x039EFB34 BLR X9
	0x039EFB38 MOV X1, X0
	0x039EFB3C LDR X0, [X23]
	0x039EFB40 LDR X2, [X24]
	0x039EFB44 MOV X3, X31
	0x039EFB48 BL 0x32274B8
	0x039EFB4C MOV X20, X0
	0x039EFB50 LDR X0, [X25]
	0x039EFB54 LDR W8, [X0 + 0xE0]
	0x039EFB58 CBNZ W8, 0x39EFB60
	0x039EFB5C BL 0x1C16DFC
	0x039EFB60 MOV X0, X20
	0x039EFB64 MOV X1, X31
	0x039EFB68 BL 0x3C06A04
	0x039EFB6C B 0x39EFAF4
	0x039EFB70 LDR X1, [X21]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+104], X27
	004 Move [X31+112], X26
	005 Move [X31+120], X25
	006 Move [X31+128], X24
	007 Move [X31+136], X23
	008 Move [X31+144], X22
	009 Move [X31+152], X21
	010 Move [X31+160], X20
	011 Move [X31+168], X19
	012 Move X22, 0x9F3000
	013 Move W8, [X22+3692]
	014 Move W19, W2
	015 Move X21, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {47}
	021 Move X0, 0x72E000
	022 Move X0, [X0+2360]
	023 Call 0x1C17CF4
	024 Move X0, 0x72E000
	025 Move X0, [X0+2376]
	026 Call 0x1C17CF4
	027 Move X0, 0x72E000
	028 Move X0, [X0+2392]
	029 Call 0x1C17CF4
	030 Move X0, 0x72E000
	031 Move X0, [X0+2408]
	032 Call 0x1C17CF4
	033 Move X0, 0x72E000
	034 Move X0, [X0+2416]
	035 Call 0x1C17CF4
	036 Move X0, 0x72E000
	037 Move X0, [X0+2424]
	038 Call 0x1C17CF4
	039 Move X0, 0x765000
	040 Move X0, [X0+1656]
	041 Call 0x1C17CF4
	042 Move X0, 0x765000
	043 Move X0, [X0+1664]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+3692], W8
	047 NotImplemented "Instruction MOVI not yet implemented."
	048 Move [X31+80], X31
	049 Move [X31+48], V0
	050 Move [X31+56], V0
	051 Move X0, [X20+40]
	052 Compare X0, 0
	053 JumpIfEqual {157}
	054 Move X24, 0x765000
	055 Move X24, [X24+1656]
	056 Move W10, [X0+28]
	057 Move X8, [X0+16]
	058 Move X9, [X24]
	059 Add W10, W10, 1
	060 Move [X0+28], W10
	061 Compare X8, 0
	062 JumpIfEqual {157}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Move W11, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W10, 1
	067 Add X8, X8, X10
	068 Move [X0+24], W9
	069 Move [X8+32], X21
	070 Move X8, [X9+32]
	071 Move X1, X21
	072 Move X8, [X8+192]
	073 Move X2, [X8+112]
	074 Call List`1<Object>.AddWithResize, X0, X1
	075 Move X0, [X20+32]
	076 Compare X0, 0
	077 JumpIfEqual {157}
	078 Move X8, 0x72E000
	079 Move X8, [X8+2360]
	080 Move X25, 0x72E000
	081 Move X26, 0x765000
	082 Move X23, 0x72E000
	083 Move X1, [X8]
	084 Move X25, [X25+2392]
	085 Move X26, [X26+1664]
	086 Move X23, [X23+2376]
	087 Add X8, X31, 8
	088 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 Move X8, [X31+40]
	092 Move W9, 1
	093 NotImplemented "Instruction LSLV not yet implemented."
	094 Move [X31+48], V0
	095 Move [X31+56], V1
	096 Move [X31+80], X8
	097 Move X1, [X25]
	098 Add X0, X31, 48
	099 Call Enumerator<Int32, Object>.MoveNext, X0
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {137}
	104 Move W8, [X31+64]
	105 And W31, W27, W8
	106 Move X22, [X31+72]
	107 Compare X22, 0
	108 JumpIfEqual {155}
	109 Move X2, [X26]
	110 Move X0, X22
	111 Move X1, X21
	112 Call List`1<Object>.Contains, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfEqual {97}
	117 Move W10, [X22+28]
	118 Move X8, [X22+16]
	119 Move X9, [X24]
	120 Add W10, W10, 1
	121 Move [X22+28], W10
	122 Compare X8, 0
	123 JumpIfEqual {156}
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Move W11, [X8+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Add W9, W10, 1
	128 Add X8, X8, X10
	129 Move [X22+24], W9
	130 Move [X8+32], X21
	131 Move X8, [X9+32]
	132 Move X8, [X8+192]
	133 Move X2, [X8+112]
	134 Move X0, X22
	135 Move X1, X21
	136 Call List`1<Object>.AddWithResize, X0, X1
	137 Move X1, [X23]
	138 Add X0, X31, 48
	139 Call Enumerator<Int32, Object>.Dispose, X0
	140 Move X0, X20
	141 Move W1, W19
	142 Call VolumeManager.SetLayerDirty, X0, X1
	143 Move X20, [X31+160]
	144 Move X19, [X31+168]
	145 Move X22, [X31+144]
	146 Move X21, [X31+152]
	147 Move X24, [X31+128]
	148 Move X23, [X31+136]
	149 Move X26, [X31+112]
	150 Move X25, [X31+120]
	151 Move X30, [X31+96]
	152 Move X27, [X31+104]
	153 Add X31, X31, 176
	154 Return 
	155 Call 0x1C17F20
	156 Call 0x1C17F20
	157 Call 0x1C17F20
	158 Move X21, X0
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X0, X21
	161 Call 0x3EB2AD0
	162 Move X22, [X0]
	163 Call 0x3EB2AE0
	164 Move X1, [X23]
	165 Add X0, X31, 48
	166 Call Enumerator<Int32, Object>.Dispose, X0
	167 Compare X22, 0
	168 JumpIfEqual {140}
	169 Move X0, X22
	170 Call 0x1C17F18
	171 Move X22, X31
	172 Move X21, X0
	173 Move X1, [X23]
	174 Add X0, X31, 48
	175 Call Enumerator<Int32, Object>.Dispose, X0
	176 Compare X22, 0
	177 JumpIfNotEqual {180}
	178 Move X0, X21
	179 Call 0x1D2D690
	180 Move X0, X22
	181 Call 0x1C17F18
	182 Call 0x1991590

Method: System.Void Unregister(UnityEngine.Rendering.Volume volume, System.Int32 layer)

Disassembly:
	0x039EFBF8 BL 0x2BC434C
	0x039EFBFC CBNZ X20, 0x39EFC08
	0x039EFC00 MOV X0, X19
	0x039EFC04 BL 0x1D2C690
	0x039EFC08 MOV X0, X20
	0x039EFC0C BL 0x1C16F18
	0x039EFC10 BL 0x1990590
	0x039EFC14 SUB X31, X31, 0x40
	0x039EFC18 STR X30, [X31 + 0x20]
	0x039EFC1C STP X20, X19, [X31 + 0x30]
	0x039EFC20 ADRP X20, 0x9F2000
	0x039EFC24 LDRB W8, [X20 + 0xE5C]
	0x039EFC28 MOV X19, X0
	0x039EFC2C TBNZ X8, 0x0, 0x39EFC68
	0x039EFC30 ADRP X0, 0x764000
	0x039EFC34 LDR X0, [X0 + 0x6D0]
	0x039EFC38 BL 0x1C16CF4
	0x039EFC3C ADRP X0, 0x764000
	0x039EFC40 LDR X0, [X0 + 0x6D8]
	0x039EFC44 BL 0x1C16CF4
	0x039EFC48 ADRP X0, 0x764000
	0x039EFC4C LDR X0, [X0 + 0x6E0]
	0x039EFC50 BL 0x1C16CF4
	0x039EFC54 ADRP X0, 0x764000
	0x039EFC58 LDR X0, [X0 + 0x6F0]
	0x039EFC5C BL 0x1C16CF4
	0x039EFC60 MOVZ W8, 0x1
	0x039EFC64 STRB W8, [X20 + 0xE5C]
	0x039EFC68 STP X31, X31, [X31 + 0x8]
	0x039EFC6C STR X31, [X31 + 0x18]
	0x039EFC70 LDR X0, [X19 + 0x28]
	0x039EFC74 CBZ X0, 0x39EFCE0
	0x039EFC78 ADRP X8, 0x764000
	0x039EFC7C LDR X8, [X8 + 0x6F0]
	0x039EFC80 ADRP X20, 0x764000
	0x039EFC84 ADRP X19, 0x764000
	0x039EFC88 LDR X1, [X8]
	0x039EFC8C LDR X20, [X20 + 0x6D8]
	0x039EFC90 LDR X19, [X19 + 0x6D0]
	0x039EFC94 ADD X8, X31, 0x8
	0x039EFC98 BL 0x301CB58
	0x039EFC9C LDR X1, [X20]
	0x039EFCA0 ADD X0, X31, 0x8
	0x039EFCA4 BL 0x2BC4350
	0x039EFCA8 TBZ X0, 0x0, 0x39EFCC4
	0x039EFCAC LDR X0, [X31 + 0x18]
	0x039EFCB0 CBZ X0, 0x39EFC9C
	0x039EFCB4 LDR X8, [X0]
	0x039EFCB8 LDP X9, X1, [X8 + 0x1D8]
	0x039EFCBC BLR X9
	0x039EFCC0 B 0x39EFC9C
	0x039EFCC4 LDR X1, [X19]
	0x039EFCC8 ADD X0, X31, 0x8
	0x039EFCCC BL 0x2BC434C
	0x039EFCD0 LDP X20, X19, [X31 + 0x30]
	0x039EFCD4 LDR X30, [X31 + 0x20]
	0x039EFCD8 ADD X31, X31, 0x40
	0x039EFCDC RET
	0x039EFCE0 BL 0x1C16F20
	0x039EFCE4 B 0x39EFCE8
	0x039EFCE8 MOV X20, X0
	0x039EFCEC CMP W1, 0x1
	0x039EFCF0 B.NE 0x39EFD24
	0x039EFCF4 MOV X0, X20
	0x039EFCF8 BL 0x3EB1AD0
	0x039EFCFC LDR X19, [X0]
	0x039EFD00 BL 0x3EB1AE0
	0x039EFD04 ADRP X8, 0x764000
	0x039EFD08 LDR X8, [X8 + 0x6D0]
	0x039EFD0C ADD X0, X31, 0x8
	0x039EFD10 LDR X1, [X8]
	0x039EFD14 BL 0x2BC434C
	0x039EFD18 CBZ X19, 0x39EFCD0
	0x039EFD1C MOV X0, X19
	0x039EFD20 BL 0x1C16F18
	0x039EFD24 MOV X19, X31
	0x039EFD28 B 0x39EFD30
	0x039EFD2C MOV X20, X0
	0x039EFD30 ADRP X8, 0x764000
	0x039EFD34 LDR X8, [X8 + 0x6D0]
	0x039EFD38 LDR X1, [X8]
	0x039EFD3C ADD X0, X31, 0x8
	0x039EFD40 BL 0x2BC434C
	0x039EFD44 CBNZ X19, 0x39EFD50
	0x039EFD48 MOV X0, X20
	0x039EFD4C BL 0x1D2C690
	0x039EFD50 MOV X0, X19
	0x039EFD54 BL 0x1C16F18
	0x039EFD58 BL 0x1990590
	0x039EFD5C STR D8, [X31 - 0x50]!
	0x039EFD60 STP X30, X25, [X31 + 0x10]
	0x039EFD64 STP X24, X23, [X31 + 0x20]
	0x039EFD68 STP X22, X21, [X31 + 0x30]
	0x039EFD6C STP X20, X19, [X31 + 0x40]
	0x039EFD70 ADRP X21, 0x9F2000
	0x039EFD74 LDRB W8, [X21 + 0xE5D]
	0x039EFD78 MOV V8.16B, V0.16B
	0x039EFD7C MOV X19, X1
	0x039EFD80 MOV X20, X0
	0x039EFD84 TBNZ X8, 0x0, 0x39EFDA8
	0x039EFD88 ADRP X0, 0x764000
	0x039EFD8C LDR X0, [X0 + 0x708]
	0x039EFD90 BL 0x1C16CF4
	0x039EFD94 ADRP X0, 0x762000
	0x039EFD98 LDR X0, [X0 + 0x778]
	0x039EFD9C BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X22, 0x9F3000
	009 Move W8, [X22+3693]
	010 Move W20, W2
	011 Move X19, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {40}
	017 Move X0, 0x72E000
	018 Move X0, [X0+2360]
	019 Call 0x1C17CF4
	020 Move X0, 0x72E000
	021 Move X0, [X0+2376]
	022 Call 0x1C17CF4
	023 Move X0, 0x72E000
	024 Move X0, [X0+2392]
	025 Call 0x1C17CF4
	026 Move X0, 0x72E000
	027 Move X0, [X0+2408]
	028 Call 0x1C17CF4
	029 Move X0, 0x72E000
	030 Move X0, [X0+2416]
	031 Call 0x1C17CF4
	032 Move X0, 0x72E000
	033 Move X0, [X0+2424]
	034 Call 0x1C17CF4
	035 Move X0, 0x765000
	036 Move X0, [X0+1672]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X22+3693], W8
	040 NotImplemented "Instruction MOVI not yet implemented."
	041 Move [X31+32], X31
	042 Move [X31], V0
	043 Move [X31+8], V0
	044 Move X0, [X21+40]
	045 Compare X0, 0
	046 JumpIfEqual {93}
	047 Move X22, 0x765000
	048 Move X22, [X22+1672]
	049 Move X1, X19
	050 Move X2, [X22]
	051 Call List`1<Object>.Remove, X0, X1
	052 Move X0, [X21+32]
	053 Compare X0, 0
	054 JumpIfEqual {93}
	055 Move X8, 0x72E000
	056 Move X8, [X8+2360]
	057 Move X23, 0x72E000
	058 Move X21, 0x72E000
	059 Move X1, [X8]
	060 Move X23, [X23+2392]
	061 Move X21, [X21+2376]
	062 Add X8, X31, 0
	063 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	064 Move W8, 1
	065 NotImplemented "Instruction LSLV not yet implemented."
	066 Move X1, [X23]
	067 Add X0, X31, 0
	068 Call Enumerator<Int32, Object>.MoveNext, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {81}
	073 Move W8, [X31+16]
	074 And W31, W20, W8
	075 Move X0, [X31+24]
	076 Compare X0, 0
	077 JumpIfEqual {92}
	078 Move X2, [X22]
	079 Move X1, X19
	080 Call List`1<Object>.Remove, X0, X1
	081 Move X1, [X21]
	082 Add X0, X31, 0
	083 Call Enumerator<Int32, Object>.Dispose, X0
	084 Move X20, [X31+80]
	085 Move X19, [X31+88]
	086 Move X22, [X31+64]
	087 Move X21, [X31+72]
	088 Move X30, [X31+48]
	089 Move X23, [X31+56]
	090 Add X31, X31, 96
	091 Return 
	092 Call 0x1C17F20
	093 Call 0x1C17F20
	094 Move X19, X0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X0, X19
	097 Call 0x3EB2AD0
	098 Move X20, [X0]
	099 Call 0x3EB2AE0
	100 Move X1, [X21]
	101 Add X0, X31, 0
	102 Call Enumerator<Int32, Object>.Dispose, X0
	103 Compare X20, 0
	104 JumpIfEqual {84}
	105 Move X0, X20
	106 Call 0x1C17F18
	107 Move X20, X31
	108 Move X19, X0
	109 Move X1, [X21]
	110 Add X0, X31, 0
	111 Call Enumerator<Int32, Object>.Dispose, X0
	112 Compare X20, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X19
	115 Call 0x1D2D690
	116 Move X0, X20
	117 Call 0x1C17F18
	118 Call 0x1991590

Method: System.Boolean IsComponentActiveInMask(UnityEngine.LayerMask layerMask)

Disassembly:
	0x022AC680 LDR X0, [X21 + 0x18]
	0x022AC684 CBZ X0, 0x22AC7B4
	0x022AC688 ADRP X8, 0x1E70000
	0x022AC68C LDR X8, [X8 + 0x9A0]
	0x022AC690 LDR X1, [X8]
	0x022AC694 ADD X8, X31, 0x8
	0x022AC698 BL 0x301CB58
	0x022AC69C LDUR V0, [X31 + 0x8]
	0x022AC6A0 LDR X8, [X31 + 0x18]
	0x022AC6A4 ADRP X25, 0x1E70000
	0x022AC6A8 LDR X25, [X25 + 0x990]
	0x022AC6AC STR V0, [X31 + 0x2]
	0x022AC6B0 STR X8, [X31 + 0x30]
	0x022AC6B4 ADRP X26, 0x1E47000
	0x022AC6B8 LDR X26, [X26 + 0x6C0]
	0x022AC6BC LDR X1, [X25]
	0x022AC6C0 ADD X0, X31, 0x20
	0x022AC6C4 BL 0x2BC4350
	0x022AC6C8 MOV W21, W0
	0x022AC6CC TBZ X0, 0x0, 0x22AC770
	0x022AC6D0 LDR X23, [X31 + 0x30]
	0x022AC6D4 CBZ X23, 0x22AC7B0
	0x022AC6D8 MOV X0, X23
	0x022AC6DC MOV X1, X31
	0x022AC6E0 BL 0x33BE520
	0x022AC6E4 MOV X24, X0
	0x022AC6E8 LDR X0, [X26]
	0x022AC6EC LDR W8, [X0 + 0xE0]
	0x022AC6F0 CBNZ W8, 0x22AC6F8
	0x022AC6F4 BL 0x1C16DFC
	0x022AC6F8 MOV X0, X24
	0x022AC6FC MOV X1, X22
	0x022AC700 MOV X2, X31
	0x022AC704 BL 0x3395194
	0x022AC708 TBZ X0, 0x0, 0x22AC6BC
	0x022AC70C LDR X8, [X19 + 0x38]
	0x022AC710 LDR X22, [X8 + 0x8]
	0x022AC714 LDRB W8, [X22 + 0x135]
	0x022AC718 TBNZ X8, 0x0, 0x22AC728
	0x022AC71C MOV X0, X22
	0x022AC720 BL 0x1C5C684
	0x022AC724 MOV X22, X0
	0x022AC728 MOV X0, X23
	0x022AC72C MOV X1, X22
	0x022AC730 BL 0x1C16E00
	0x022AC734 CBZ X0, 0x22AC7B8
	0x022AC738 STR X0, [X20]
	0x022AC73C LDR X8, [X19 + 0x38]
	0x022AC740 LDR X19, [X8 + 0x8]
	0x022AC744 LDRB W8, [X19 + 0x135]
	0x022AC748 TBNZ X8, 0x0, 0x22AC758
	0x022AC74C MOV X0, X19
	0x022AC750 BL 0x1C5C684
	0x022AC754 MOV X19, X0
	0x022AC758 MOV X0, X23
	0x022AC75C MOV X1, X19
	0x022AC760 BL 0x1C16E00
	0x022AC764 CBZ X0, 0x22AC7C4
	0x022AC768 MOVZ W19, 0x4
	0x022AC76C B 0x22AC774
	0x022AC770 MOVZ W19, 0x5
	0x022AC774 ADRP X8, 0x1E70000
	0x022AC778 LDR X8, [X8 + 0x988]
	0x022AC77C ADD X0, X31, 0x20
	0x022AC780 LDR X1, [X8]
	0x022AC784 BL 0x2BC434C
	0x022AC788 CMP W19, 0x4
	0x022AC78C CSET W8, EQ
	0x022AC790 AND W0, W21, W8, 0x0
	0x022AC794 LDP X20, X19, [X31 + 0x80]
	0x022AC798 LDP X22, X21, [X31 + 0x70]
	0x022AC79C LDP X24, X23, [X31 + 0x60]
	0x022AC7A0 LDP X26, X25, [X31 + 0x50]
	0x022AC7A4 LDR X30, [X31 + 0x40]
	0x022AC7A8 ADD X31, X31, 0x90
	0x022AC7AC RET
	0x022AC7B0 BL 0x1C16F20
	0x022AC7B4 BL 0x1C16F20
	0x022AC7B8 MOV X0, X23
	0x022AC7BC MOV X1, X22
	0x022AC7C0 BL 0x1C171E0
	0x022AC7C4 MOV X0, X23
	0x022AC7C8 MOV X1, X19
	0x022AC7CC BL 0x1C171E0
	0x022AC7D0 B 0x22AC7E4
	0x022AC7D4 B 0x22AC7E4
	0x022AC7D8 B 0x22AC7E4
	0x022AC7DC B 0x22AC7E4
	0x022AC7E0 B 0x22AC7E4
	0x022AC7E4 MOV X19, X0
	0x022AC7E8 CMP W1, 0x1
	0x022AC7EC B.NE 0x22AC824
	0x022AC7F0 MOV X0, X19
	0x022AC7F4 BL 0x3EB1AD0
	0x022AC7F8 LDR X20, [X0]
	0x022AC7FC BL 0x3EB1AE0
	0x022AC800 ADRP X8, 0x1E70000
	0x022AC804 LDR X8, [X8 + 0x988]
	0x022AC808 ADD X0, X31, 0x20
	0x022AC80C LDR X1, [X8]
	0x022AC810 BL 0x2BC434C
	0x022AC814 CBNZ X20, 0x22AC82C
	0x022AC818 MOV W21, W31
	0x022AC81C MOV W19, W31
	0x022AC820 B 0x22AC788
	0x022AC824 MOV X20, X31
	0x022AC828 B 0x22AC838
	0x022AC82C MOV X0, X20
	0x022AC830 BL 0x1C16F18
	0x022AC834 MOV X19, X0
	0x022AC838 ADRP X8, 0x1E70000
	0x022AC83C LDR X8, [X8 + 0x988]
	0x022AC840 LDR X1, [X8]
	0x022AC844 ADD X0, X31, 0x20
	0x022AC848 BL 0x2BC434C
	0x022AC84C CBNZ X20, 0x22AC858
	0x022AC850 MOV X0, X19
	0x022AC854 BL 0x1D2C690
	0x022AC858 MOV X0, X20
	0x022AC85C BL 0x1C16F18
	0x022AC860 BL 0x1990590
	0x022AC864 SUB X31, X31, 0x80
	0x022AC868 STP X30, X25, [X31 + 0x40]
	0x022AC86C STP X24, X23, [X31 + 0x50]
	0x022AC870 STP X22, X21, [X31 + 0x60]
	0x022AC874 STP X20, X19, [X31 + 0x70]
	0x022AC878 LDR X8, [X3 + 0x38]
	0x022AC87C MOV X20, X3
	0x022AC880 MOV X19, X2
	0x022AC884 MOV X21, X1
	0x022AC888 MOV X22, X0
	0x022AC88C CBNZ X8, 0x22AC8D0
	0x022AC890 ADRP X0, 0x1E70000
	0x022AC894 LDR X0, [X0 + 0x988]
	0x022AC898 BL 0x1C16CF4
	0x022AC89C ADRP X0, 0x1E70000
	0x022AC8A0 LDR X0, [X0 + 0x990]
	0x022AC8A4 BL 0x1C16CF4
	0x022AC8A8 ADRP X0, 0x1E70000
	0x022AC8AC LDR X0, [X0 + 0x998]
	0x022AC8B0 BL 0x1C16CF4
	0x022AC8B4 ADRP X0, 0x1E70000
	0x022AC8B8 LDR X0, [X0 + 0x9A0]
	0x022AC8BC BL 0x1C16CF4
	0x022AC8C0 LDR X8, [X20 + 0x38]
	0x022AC8C4 CBNZ X8, 0x22AC8D0
	0x022AC8C8 MOV X0, X20
	0x022AC8CC BL 0x1C5C6E0
	0x022AC8D0 STP X31, X31, [X31 + 0x20]
	0x022AC8D4 STR X31, [X31 + 0x30]
	0x022AC8D8 CBZ X19, 0x22ACA2C
	0x022AC8DC LDR X0, [X22 + 0x18]
	0x022AC8E0 CBZ X0, 0x22ACA2C
	0x022AC8E4 ADRP X8, 0x1E70000
	0x022AC8E8 LDR W24, [X19 + 0x18]
	0x022AC8EC LDR X8, [X8 + 0x9A0]
	0x022AC8F0 LDR X1, [X8]
	0x022AC8F4 ADD X8, X31, 0x8
	0x022AC8F8 BL 0x301CB58
	0x022AC8FC LDUR V0, [X31 + 0x8]
	0x022AC900 LDR X8, [X31 + 0x18]
	0x022AC904 ADRP X25, 0x1E70000
	0x022AC908 STR V0, [X31 + 0x2]
	0x022AC90C STR X8, [X31 + 0x30]
	0x022AC910 LDR X25, [X25 + 0x990]
	0x022AC914 LDR X1, [X25]
	0x022AC918 ADD X0, X31, 0x20
	0x022AC91C BL 0x2BC4350
	0x022AC920 TBZ X0, 0x0, 0x22AC9DC
	0x022AC924 LDR X22, [X31 + 0x30]
	0x022AC928 CBZ X22, 0x22ACA14
	0x022AC92C MOV X0, X22
	0x022AC930 MOV X1, X31
	0x022AC934 BL 0x33BE520
	0x022AC938 CBZ X0, 0x22ACA18
	0x022AC93C LDR X8, [X0]
	0x022AC940 LDR X9, [X8 + 0x298]
	0x022AC944 LDR X2, [X8 + 0x2A0]
	0x022AC948 MOV X1, X21
	0x022AC94C BLR X9
	0x022AC950 TBZ X0, 0x0, 0x22AC914
	0x022AC954 LDR X8, [X20 + 0x38]
	0x022AC958 LDR X23, [X8 + 0x10]
	0x022AC95C LDRB W8, [X23 + 0x135]
	0x022AC960 TBNZ X8, 0x0, 0x22AC970
	0x022AC964 MOV X0, X23
	0x022AC968 BL 0x1C5C684
	0x022AC96C MOV X23, X0
	0x022AC970 MOV X0, X22
	0x022AC974 MOV X1, X23
	0x022AC978 BL 0x1C16E00
	0x022AC97C MOV X1, X0
	0x022AC980 CBZ X1, 0x22ACA1C
	0x022AC984 LDR X9, [X20 + 0x38]
	0x022AC988 LDR W10, [X19 + 0x1C]
	0x022AC98C LDR X8, [X19 + 0x10]
	0x022AC990 LDR X9, [X9 + 0x18]
	0x022AC994 ADD W10, W10, 0x1
	0x022AC998 STR W10, [X19 + 0x1C]
	0x022AC99C CBZ X8, 0x22ACA28
	0x022AC9A0 LDRSW X10, [X19 + 0x18]
	0x022AC9A4 LDR W11, [X8 + 0x18]
	0x022AC9A8 CMP W10, W11
	0x022AC9AC B.CS 0x22AC9C4
	0x022AC9B0 ADD W9, W10, 0x1
	0x022AC9B4 ADD X8, X8, X10, 0x3, LSL
	0x022AC9B8 STR W9, [X19 + 0x18]
	0x022AC9BC STR X1, [X8 + 0x20]
	0x022AC9C0 B 0x22AC914
	0x022AC9C4 LDR X8, [X9 + 0x20]
	0x022AC9C8 LDR X8, [X8 + 0xC0]
	0x022AC9CC LDR X2, [X8 + 0x70]
	0x022AC9D0 MOV X0, X19
	0x022AC9D4 BL 0x301BF90
	0x022AC9D8 B 0x22AC914
	0x022AC9DC ADRP X8, 0x1E70000
	0x022AC9E0 LDR X8, [X8 + 0x988]
	0x022AC9E4 ADD X0, X31, 0x20
	0x022AC9E8 LDR X1, [X8]
	0x022AC9EC BL 0x2BC434C
	0x022AC9F0 LDR W8, [X19 + 0x18]
	0x022AC9F4 LDP X20, X19, [X31 + 0x70]
	0x022AC9F8 LDP X22, X21, [X31 + 0x60]
	0x022AC9FC LDP X30, X25, [X31 + 0x40]
	0x022ACA00 CMP W24, W8
	0x022ACA04 LDP X24, X23, [X31 + 0x50]
	0x022ACA08 CSET W0, NE
	0x022ACA0C ADD X31, X31, 0x80
	0x022ACA10 RET
	0x022ACA14 BL 0x1C16F20
	0x022ACA18 BL 0x1C16F20
	0x022ACA1C MOV X0, X22
	0x022ACA20 MOV X1, X23
	0x022ACA24 BL 0x1C171E0
	0x022ACA28 BL 0x1C16F20
	0x022ACA2C BL 0x1C16F20
	0x022ACA30 B 0x22ACA48
	0x022ACA34 B 0x22ACA48

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], X30
	003 Move [X31+144], X28
	004 Move [X31+152], X27
	005 Move [X31+160], X26
	006 Move [X31+168], X25
	007 Move [X31+176], X24
	008 Move [X31+184], X23
	009 Move [X31+192], X22
	010 Move [X31+200], X21
	011 Move [X31+208], X20
	012 Move [X31+216], X19
	013 Move [X31+136], W1
	014 Move X8, [X2+56]
	015 Move X19, X2
	016 Move X20, X0
	017 Compare X8, 0
	018 JumpIfNotEqual {57}
	019 Move X0, 0x1E71000
	020 Move X0, [X0+2360]
	021 Call 0x1C17CF4
	022 Move X0, 0x1E71000
	023 Move X0, [X0+2368]
	024 Call 0x1C17CF4
	025 Move X0, 0x1E71000
	026 Move X0, [X0+2376]
	027 Call 0x1C17CF4
	028 Move X0, 0x1E71000
	029 Move X0, [X0+2384]
	030 Call 0x1C17CF4
	031 Move X0, 0x1E71000
	032 Move X0, [X0+2392]
	033 Call 0x1C17CF4
	034 Move X0, 0x1E71000
	035 Move X0, [X0+2400]
	036 Call 0x1C17CF4
	037 Move X0, 0x1E71000
	038 Move X0, [X0+2408]
	039 Call 0x1C17CF4
	040 Move X0, 0x1E71000
	041 Move X0, [X0+2416]
	042 Call 0x1C17CF4
	043 Move X0, 0x1E71000
	044 Move X0, [X0+2424]
	045 Call 0x1C17CF4
	046 Move X0, 0x1E71000
	047 Move X0, [X0+2432]
	048 Call 0x1C17CF4
	049 Move X0, 0x1E48000
	050 Move X0, [X0+1432]
	051 Call 0x1C17CF4
	052 Move X8, [X19+56]
	053 Compare X8, 0
	054 JumpIfNotEqual {57}
	055 Move X0, X19
	056 Call 0x1C5D6E0
	057 NotImplemented "Instruction MOVI not yet implemented."
	058 Add X0, X31, 136
	059 Move X1, X31
	060 Move [X31+112], X31
	061 Move [X31+48], X31
	062 Move [X31+56], X31
	063 Move [X31+64], X31
	064 Move [X31+80], V0
	065 Move [X31+88], V0
	066 Move [X31+40], X31
	067 Call LayerMask.get_value, X0
	068 Move X9, [X20+32]
	069 Compare X9, 0
	070 JumpIfEqual {219}
	071 Move X8, 0x1E71000
	072 Move X8, [X8+2360]
	073 Move W20, W0
	074 Move X0, X9
	075 Move X1, [X8]
	076 Add X8, X31, 0
	077 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	078 Move V0, [X31]
	079 Move V1, [X31+16]
	080 Move X8, [X31+32]
	081 Move X25, 0x1E71000
	082 Move X26, 0x1E71000
	083 Move X27, 0x1E71000
	084 Move X28, 0x1E48000
	085 Move X25, [X25+2392]
	086 Move X26, [X26+2432]
	087 Move X27, [X27+2384]
	088 Move X28, [X28+1432]
	089 Move [X31+80], V0
	090 Move [X31+88], V1
	091 Move [X31+112], X8
	092 Move X24, 0x1E71000
	093 Move X24, [X24+2368]
	094 Move W23, W31
	095 Move X1, [X25]
	096 Add X0, X31, 80
	097 Call Enumerator<Int32, Object>.MoveNext, X0
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {187}
	102 Move W8, [X31+96]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X0, [X31+104]
	105 Compare X0, 0
	106 JumpIfEqual {222}
	107 Move X1, [X26]
	108 Add X8, X31, 0
	109 Call List`1<Object>.GetEnumerator, X0
	110 Move V0, [X31]
	111 Move X8, [X31+16]
	112 Move [X31+3], V0
	113 Move [X31+64], X8
	114 Move X1, [X27]
	115 Add X0, X31, 48
	116 Call Enumerator<Object>.MoveNext, X0
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfNotEqual {170}
	121 Move X21, [X31+64]
	122 Compare X21, 0
	123 JumpIfEqual {179}
	124 Move X0, X21
	125 Move X1, X31
	126 Call Behaviour.get_enabled, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {114}
	131 Move X0, X21
	132 Move X1, X31
	133 Call Volume.get_profileRef, X0
	134 Move X22, X0
	135 Move X0, [X28]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move X0, X22
	141 Move X1, X31
	142 Move X2, X31
	143 Call Object.op_Equality, X0, X1
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfEqual {114}
	148 Move X0, X21
	149 Move X1, X31
	150 Call Volume.get_profileRef, X0
	151 Compare X0, 0
	152 JumpIfEqual {180}
	153 Move X8, [X19+56]
	154 Move X2, [X8]
	155 Add X1, X31, 40
	156 Call 0x22AD56C, X0, X1
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {114}
	161 Move X8, [X31+40]
	162 Compare X8, 0
	163 JumpIfEqual {181}
	164 Move W8, [X8+24]
	165 Compare W8, 0
	166 JumpIfEqual {114}
	167 Move X21, X31
	168 Move W23, 1
	169 Move W22, 6
	170 Move X21, X31
	171 Move W22, 2
	172 Move X1, [X24]
	173 Add X0, X31, 48
	174 Call Enumerator<Object>.Dispose, X0
	175 Compare X21, 0
	176 JumpIfNotEqual {220}
	177 Or W8, W22, 2
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Call 0x1C17F20
	180 Call 0x1C17F20
	181 Call 0x1C17F20
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Call 0x3EB2AD0
	184 Move X21, [X0]
	185 Call 0x3EB2AE0
	186 Move W22, W31
	187 Move W22, 7
	188 Move X8, 0x1E71000
	189 Move X8, [X8+2376]
	190 Add X0, X31, 80
	191 Move X1, [X8]
	192 Call Enumerator<Int32, Object>.Dispose, X0
	193 NotImplemented "Instruction CMP not yet implemented."
	194 NotImplemented "Instruction CSET not yet implemented."
	195 And W0, W23, W8
	196 Move X20, [X31+208]
	197 Move X19, [X31+216]
	198 Move X22, [X31+192]
	199 Move X21, [X31+200]
	200 Move X24, [X31+176]
	201 Move X23, [X31+184]
	202 Move X26, [X31+160]
	203 Move X25, [X31+168]
	204 Move X28, [X31+144]
	205 Move X27, [X31+152]
	206 Move X30, [X31+128]
	207 Add X31, X31, 224
	208 Return X0
	209 Move X20, X1
	210 Move X19, X0
	211 Move X21, X31
	212 Move X1, [X24]
	213 Add X0, X31, 48
	214 Call Enumerator<Object>.Dispose, X0
	215 Compare X21, 0
	216 JumpIfEqual {227}
	217 Move X0, X21
	218 Call 0x1C17F18
	219 Call 0x1C17F20
	220 Move X0, X21
	221 Call 0x1C17F18
	222 Call 0x1C17F20
	223 Move X20, X1
	224 Move X19, X0
	225 Move X20, X1
	226 Move X19, X0
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move X0, X19
	229 Call 0x3EB2AD0
	230 Move X20, [X0]
	231 Call 0x3EB2AE0
	232 Move X8, 0x1E71000
	233 Move X8, [X8+2376]
	234 Add X0, X31, 80
	235 Move X1, [X8]
	236 Call Enumerator<Int32, Object>.Dispose, X0
	237 Compare X20, 0
	238 JumpIfNotEqual {241}
	239 Move W22, W31
	240 Move X20, X31
	241 Move X0, X20
	242 Call 0x1C17F18
	243 Move X19, X0
	244 Move X8, 0x1E71000
	245 Move X8, [X8+2376]
	246 Move X1, [X8]
	247 Add X0, X31, 80
	248 Call Enumerator<Int32, Object>.Dispose, X0
	249 Compare X20, 0
	250 JumpIfNotEqual {253}
	251 Move X0, X19
	252 Call 0x1D2D690
	253 Move X0, X20
	254 Call 0x1C17F18
	255 Call 0x1991590

Method: System.Void SetLayerDirty(System.Int32 layer)

Disassembly:
	0x039EFEEC BL 0x1C16CF4
	0x039EFEF0 ADRP X0, 0x764000
	0x039EFEF4 LDR X0, [X0 + 0x720]
	0x039EFEF8 BL 0x1C16CF4
	0x039EFEFC ADRP X0, 0x732000
	0x039EFF00 LDR X0, [X0 + 0xC80]
	0x039EFF04 BL 0x1C16CF4
	0x039EFF08 MOVZ W8, 0x1
	0x039EFF0C STRB W8, [X22 + 0xE5E]
	0x039EFF10 CBZ X19, 0x39F019C
	0x039EFF14 ADRP X10, 0x764000
	0x039EFF18 LDR X8, [X19]
	0x039EFF1C LDR X10, [X10 + 0x710]
	0x039EFF20 LDRH W9, [X8 + 0x12E]
	0x039EFF24 LDR X1, [X10]
	0x039EFF28 CBZ X9, 0x39EFF4C
	0x039EFF2C LDR X10, [X8 + 0xB0]
	0x039EFF30 ADD X10, X10, 0x8
	0x039EFF34 LDUR X11, [X10 - 0x8]
	0x039EFF38 CMP X11, X1
	0x039EFF3C B.EQ 0x39EFF5C
	0x039EFF40 SUBS X9, X9, 0x1
	0x039EFF44 ADD X10, X10, 0x10
	0x039EFF48 B.NE 0x39EFF34
	0x039EFF4C MOV X0, X19
	0x039EFF50 MOV W2, W31
	0x039EFF54 BL 0x1C5C788
	0x039EFF58 B 0x39EFF68
	0x039EFF5C LDRSW X9, [X10]
	0x039EFF60 ADD X8, X8, X9, 0x4, LSL
	0x039EFF64 ADD X0, X8, 0x138
	0x039EFF68 LDP X8, X1, [X0]
	0x039EFF6C ADRP X24, 0x704000
	0x039EFF70 LDR X24, [X24 + 0xE00]
	0x039EFF74 MOV X0, X19
	0x039EFF78 BLR X8
	0x039EFF7C MOV X19, X0
	0x039EFF80 CBZ X0, 0x39F01A0
	0x039EFF84 ADRP X25, 0x704000
	0x039EFF88 ADRP X26, 0x764000
	0x039EFF8C ADRP X27, 0x732000
	0x039EFF90 ADRP X28, 0x764000
	0x039EFF94 LDR X25, [X25 + 0xE18]
	0x039EFF98 LDR X26, [X26 + 0x718]
	0x039EFF9C LDR X27, [X27 + 0xC80]
	0x039EFFA0 LDR X28, [X28 + 0x720]
	0x039EFFA4 LDR X8, [X19]
	0x039EFFA8 LDR X1, [X25]
	0x039EFFAC LDRH W9, [X8 + 0x12E]
	0x039EFFB0 CBZ X9, 0x39EFFD4
	0x039EFFB4 LDR X10, [X8 + 0xB0]
	0x039EFFB8 ADD X10, X10, 0x8
	0x039EFFBC LDUR X11, [X10 - 0x8]
	0x039EFFC0 CMP X11, X1
	0x039EFFC4 B.EQ 0x39EFFE4
	0x039EFFC8 SUBS X9, X9, 0x1
	0x039EFFCC ADD X10, X10, 0x10
	0x039EFFD0 B.NE 0x39EFFBC
	0x039EFFD4 MOV X0, X19
	0x039EFFD8 MOV W2, W31
	0x039EFFDC BL 0x1C5C788
	0x039EFFE0 B 0x39EFFF0
	0x039EFFE4 LDRSW X9, [X10]
	0x039EFFE8 ADD X8, X8, X9, 0x4, LSL
	0x039EFFEC ADD X0, X8, 0x138
	0x039EFFF0 LDP X8, X1, [X0]
	0x039EFFF4 MOV X0, X19
	0x039EFFF8 BLR X8
	0x039EFFFC TBZ X0, 0x0, 0x39F0108
	0x039F0000 LDR X8, [X19]
	0x039F0004 LDR X1, [X26]
	0x039F0008 LDRH W9, [X8 + 0x12E]
	0x039F000C CBZ X9, 0x39F0030
	0x039F0010 LDR X10, [X8 + 0xB0]
	0x039F0014 ADD X10, X10, 0x8
	0x039F0018 LDUR X11, [X10 - 0x8]
	0x039F001C CMP X11, X1
	0x039F0020 B.EQ 0x39F0040
	0x039F0024 SUBS X9, X9, 0x1
	0x039F0028 ADD X10, X10, 0x10
	0x039F002C B.NE 0x39F0018
	0x039F0030 MOV X0, X19
	0x039F0034 MOV W2, W31
	0x039F0038 BL 0x1C5C788
	0x039F003C B 0x39F004C
	0x039F0040 LDRSW X9, [X10]
	0x039F0044 ADD X8, X8, X9, 0x4, LSL
	0x039F0048 ADD X0, X8, 0x138
	0x039F004C LDP X8, X1, [X0]
	0x039F0050 MOV X0, X19
	0x039F0054 BLR X8
	0x039F0058 MOV X22, X0
	0x039F005C CBZ X0, 0x39F0188
	0x039F0060 LDR X8, [X22]
	0x039F0064 LDP X9, X2, [X8 + 0x198]
	0x039F0068 AND W1, W20, 0x1
	0x039F006C MOV X0, X22

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X21, 0x9F3000
	009 Move W8, [X21+3694]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x72E000
	017 Move X0, [X0+2360]
	018 Call 0x1C17CF4
	019 Move X0, 0x765000
	020 Move X0, [X0+1680]
	021 Call 0x1C17CF4
	022 Move X0, 0x72E000
	023 Move X0, [X0+2376]
	024 Call 0x1C17CF4
	025 Move X0, 0x72E000
	026 Move X0, [X0+2392]
	027 Call 0x1C17CF4
	028 Move X0, 0x72E000
	029 Move X0, [X0+2408]
	030 Call 0x1C17CF4
	031 Move X0, 0x72E000
	032 Move X0, [X0+2416]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+3694], W8
	036 NotImplemented "Instruction MOVI not yet implemented."
	037 Move [X31+32], X31
	038 Move [X31], V0
	039 Move [X31+8], V0
	040 Move X0, [X19+32]
	041 Compare X0, 0
	042 JumpIfEqual {83}
	043 Move X8, 0x72E000
	044 Move X8, [X8+2360]
	045 Move X22, 0x72E000
	046 Move X23, 0x765000
	047 Move X21, 0x72E000
	048 Move X1, [X8]
	049 Move X22, [X22+2392]
	050 Move X23, [X23+1680]
	051 Move X21, [X21+2376]
	052 Add X8, X31, 0
	053 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	054 Move W8, 1
	055 NotImplemented "Instruction LSLV not yet implemented."
	056 Move X1, [X22]
	057 Add X0, X31, 0
	058 Call Enumerator<Int32, Object>.MoveNext, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {71}
	063 Move W1, [X31+16]
	064 And W31, W20, W1
	065 Move X0, [X19+48]
	066 Compare X0, 0
	067 JumpIfEqual {82}
	068 Move X3, [X23]
	069 Move W2, 1
	070 Call Dictionary`2<Int32, Boolean>.set_Item, X0, X1, X2
	071 Move X1, [X21]
	072 Add X0, X31, 0
	073 Call Enumerator<Int32, Object>.Dispose, X0
	074 Move X20, [X31+80]
	075 Move X19, [X31+88]
	076 Move X22, [X31+64]
	077 Move X21, [X31+72]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Add X31, X31, 96
	081 Return 
	082 Call 0x1C17F20
	083 Call 0x1C17F20
	084 Move X19, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X19
	087 Call 0x3EB2AD0
	088 Move X20, [X0]
	089 Call 0x3EB2AE0
	090 Move X1, [X21]
	091 Add X0, X31, 0
	092 Call Enumerator<Int32, Object>.Dispose, X0
	093 Compare X20, 0
	094 JumpIfEqual {74}
	095 Move X0, X20
	096 Call 0x1C17F18
	097 Move X20, X31
	098 Move X19, X0
	099 Move X1, [X21]
	100 Add X0, X31, 0
	101 Call Enumerator<Int32, Object>.Dispose, X0
	102 Compare X20, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X19
	105 Call 0x1D2D690
	106 Move X0, X20
	107 Call 0x1C17F18
	108 Call 0x1991590

Method: System.Void UpdateVolumeLayer(UnityEngine.Rendering.Volume volume, System.Int32 prevLayer, System.Int32 newLayer)

Disassembly:
	0x039F0070 BLR X9
	0x039F0074 MOV X0, X22
	0x039F0078 MOV X1, X31
	0x039F007C BL 0x33BE520
	0x039F0080 MOV X23, X0
	0x039F0084 BL 0x39F027C
	0x039F0088 TBZ X0, 0x0, 0x39EFFA4
	0x039F008C CBZ X23, 0x39F0194
	0x039F0090 LDR X1, [X27]
	0x039F0094 MOVZ W2, 0x24
	0x039F0098 MOV X0, X23
	0x039F009C MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W3
	006 Move X20, X1
	007 Move X21, X0
	008 Call VolumeManager.Unregister, X0, X1, X2
	009 Move X1, X20
	010 Move W2, W19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X0, X21
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Call VolumeManager.Register, X0, X1, X2
	017 Return 

Method: System.Void OverrideData(UnityEngine.Rendering.VolumeStack stack, System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeComponent> components, System.Single interpFactor)

Disassembly:
	0x039F2804 RET
	0x039F2808 STR X30, [X31 - 0x20]!
	0x039F280C STP X20, X19, [X31 + 0x10]
	0x039F2810 ADRP X19, 0x9EF000
	0x039F2814 ADRP X20, 0x761000
	0x039F2818 LDRB W8, [X19 + 0xE78]
	0x039F281C LDR X20, [X20 + 0x788]
	0x039F2820 TBNZ X8, 0x0, 0x39F2838
	0x039F2824 ADRP X0, 0x761000
	0x039F2828 LDR X0, [X0 + 0x788]
	0x039F282C BL 0x1C16CF4
	0x039F2830 MOVZ W8, 0x1
	0x039F2834 STRB W8, [X19 + 0xE78]
	0x039F2838 LDR X0, [X20]
	0x039F283C BL 0x1C16F10
	0x039F2840 MOV X1, X31
	0x039F2844 MOV X19, X0
	0x039F2848 BL 0x33BDD8C
	0x039F284C LDR X8, [X20]
	0x039F2850 LDR X8, [X8 + 0xB8]
	0x039F2854 STR X19, [X8]
	0x039F2858 LDP X20, X19, [X31 + 0x10]
	0x039F285C LDR X30, [X31], #0x20
	0x039F2860 RET
	0x039F2864 MOV X1, X31
	0x039F2868 B 0x33BDD8C
	0x039F286C MOV X0, X1
	0x039F2870 RET
	0x039F2874 STR X30, [X31 - 0x10]!
	0x039F2878 CBZ X1, 0x39F2898
	0x039F287C MOV X0, X1
	0x039F2880 MOV X1, X31
	0x039F2884 BL 0x339703C
	0x039F2888 ORN W8, W31, W0, 0x0
	0x039F288C AND W0, W8, 0x1
	0x039F2890 LDR X30, [X31], #0x10
	0x039F2894 RET
	0x039F2898 BL 0x1C16F20
	0x039F289C STP X30, X21, [X31 - 0x20]!
	0x039F28A0 STP X20, X19, [X31 + 0x10]
	0x039F28A4 ADRP X20, 0x9EF000
	0x039F28A8 ADRP X21, 0x701000
	0x039F28AC LDRB W8, [X20 + 0xE79]
	0x039F28B0 LDR X21, [X21 + 0x598]
	0x039F28B4 MOV X19, X1
	0x039F28B8 TBNZ X8, 0x0, 0x39F28D0
	0x039F28BC ADRP X0, 0x701000
	0x039F28C0 LDR X0, [X0 + 0x598]
	0x039F28C4 BL 0x1C16CF4
	0x039F28C8 MOVZ W8, 0x1
	0x039F28CC STRB W8, [X20 + 0xE79]
	0x039F28D0 LDR X0, [X21]
	0x039F28D4 LDR W8, [X0 + 0xE0]
	0x039F28D8 CBNZ W8, 0x39F28E0
	0x039F28DC BL 0x1C16DFC
	0x039F28E0 MOV X0, X19
	0x039F28E4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x9F0000
	010 Move W8, [X21+3695]
	011 Move V8, V0
	012 Move X19, X2
	013 Move X20, X1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x762000
	019 Move X0, [X0+2112]
	020 Call 0x1C17CF4
	021 Move X0, 0x762000
	022 Move X0, [X0+2120]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3695], W8
	026 Compare X19, 0
	027 JumpIfEqual {69}
	028 Move W23, [X19+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X24, 0x762000
	031 Move X24, [X24+2120]
	032 Move W21, W31
	033 Move X2, [X24]
	034 Move X0, X19
	035 Move W1, W21
	036 Call List`1<Object>.get_Item, X0, X1
	037 Compare X0, 0
	038 JumpIfEqual {69}
	039 Move W8, [X0+24]
	040 Move X22, X0
	041 Compare W8, 0
	042 JumpIfEqual {58}
	043 Move X0, X22
	044 Move X1, X31
	045 Call "il2cpp_vm_object_is_inst", X0
	046 Compare X20, 0
	047 JumpIfEqual {69}
	048 Move X1, X0
	049 Move X0, X20
	050 Call VolumeStack.GetComponent, X0, X1
	051 Move X8, [X22]
	052 Move X1, X0
	053 Move X0, X22
	054 Move V0, V8
	055 Move X9, [X8+408]
	056 Move X2, [X8+416]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Add W21, W21, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+8]
	067 Move V8, [X31+64]
	068 Return 
	069 Call 0x1C17F20

Method: System.Void ReplaceData(UnityEngine.Rendering.VolumeStack stack)

Disassembly:
	0x039F2958 AND W8, W1, 0x1
	0x039F295C STRB W8, [X0 + 0x10]
	0x039F2960 RET
	0x039F2964 RET
	0x039F2968 RET
	0x039F296C RET
	0x039F2970 MOV X1, X31
	0x039F2974 B 0x33BDD8C
	0x039F2978 STP X30, X23, [X31 - 0x30]!
	0x039F297C STP X22, X21, [X31 + 0x10]
	0x039F2980 STP X20, X19, [X31 + 0x20]
	0x039F2984 ADRP X22, 0x9EF000
	0x039F2988 ADRP X23, 0x761000
	0x039F298C LDRB W8, [X22 + 0xE7C]
	0x039F2990 LDR X23, [X23 + 0x910]
	0x039F2994 MOV W19, W2
	0x039F2998 MOV W21, W1
	0x039F299C MOV X20, X0
	0x039F29A0 TBNZ X8, 0x0, 0x39F29B8
	0x039F29A4 ADRP X0, 0x761000
	0x039F29A8 LDR X0, [X0 + 0x910]
	0x039F29AC BL 0x1C16CF4
	0x039F29B0 MOVZ W8, 0x1
	0x039F29B4 STRB W8, [X22 + 0xE7C]
	0x039F29B8 LDR X3, [X23]
	0x039F29BC AND W1, W21, 0x1
	0x039F29C0 AND W2, W19, 0x1
	0x039F29C4 MOV X0, X20
	0x039F29C8 LDP X20, X19, [X31 + 0x20]
	0x039F29CC LDP X22, X21, [X31 + 0x10]
	0x039F29D0 LDP X30, X23, [X31], #0x30
	0x039F29D4 B 0x2848D04
	0x039F29D8 STR X30, [X31 - 0x40]!
	0x039F29DC STP X24, X23, [X31 + 0x10]
	0x039F29E0 STP X22, X21, [X31 + 0x20]
	0x039F29E4 STP X20, X19, [X31 + 0x30]
	0x039F29E8 ADRP X23, 0x9EF000
	0x039F29EC ADRP X24, 0x761000
	0x039F29F0 LDRB W8, [X23 + 0xE7D]
	0x039F29F4 LDR X24, [X24 + 0x910]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {49}
	009 Move X21, [X1+24]
	010 Compare X21, 0
	011 JumpIfEqual {49}
	012 Move X22, [X21+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Compare W22, 0
	015 JumpIfEqual {41}
	016 Move X8, X31
	017 Move W23, 1
	018 Add X8, X21, X8
	019 Move X19, [X8+32]
	020 Compare X19, 0
	021 JumpIfEqual {49}
	022 Move X9, [X19]
	023 Move X20, [X8+40]
	024 Move X0, X19
	025 Move W1, W31
	026 Move X8, [X9+408]
	027 Move X2, [X9+416]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X1, X20
	032 Move X9, [X8+440]
	033 Move X2, [X8+448]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, [X21+24]
	037 Add W9, W23, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X8, W23
	040 Move W23, W9
	041 Call 0x1C17F28
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Move X23, [X31+56]
	048 Return 
	049 Call 0x1C17F20

Method: System.Void CheckBaseTypes()

Disassembly:
	0x039F29F8 MOV W21, W3
	0x039F29FC MOV W19, W2
	0x039F2A00 MOV W22, W1
	0x039F2A04 MOV X20, X0
	0x039F2A08 TBNZ X8, 0x0, 0x39F2A20
	0x039F2A0C ADRP X0, 0x761000
	0x039F2A10 LDR X0, [X0 + 0x910]
	0x039F2A14 BL 0x1C16CF4
	0x039F2A18 MOVZ W8, 0x1
	0x039F2A1C STRB W8, [X23 + 0xE7D]
	0x039F2A20 LDR X3, [X24]
	0x039F2A24 AND W1, W22, 0x1
	0x039F2A28 AND W2, W21, 0x1
	0x039F2A2C MOV X0, X20
	0x039F2A30 BL 0x2848D04
	0x039F2A34 STR W19, [X20 + 0x14]
	0x039F2A38 LDP X20, X19, [X31 + 0x30]
	0x039F2A3C LDP X22, X21, [X31 + 0x20]
	0x039F2A40 LDP X24, X23, [X31 + 0x10]
	0x039F2A44 LDR X30, [X31], #0x40
	0x039F2A48 RET
	0x039F2A4C STP X30, X23, [X31 - 0x30]!
	0x039F2A50 STP X22, X21, [X31 + 0x10]
	0x039F2A54 STP X20, X19, [X31 + 0x20]
	0x039F2A58 ADRP X22, 0x9EF000
	0x039F2A5C ADRP X23, 0x761000
	0x039F2A60 LDRB W8, [X22 + 0xE7E]
	0x039F2A64 LDR X23, [X23 + 0x918]
	0x039F2A68 MOV W19, W2
	0x039F2A6C MOV X21, X1
	0x039F2A70 MOV X20, X0
	0x039F2A74 TBNZ X8, 0x0, 0x39F2A8C
	0x039F2A78 ADRP X0, 0x761000
	0x039F2A7C LDR X0, [X0 + 0x918]
	0x039F2A80 BL 0x1C16CF4
	0x039F2A84 MOVZ W8, 0x1
	0x039F2A88 STRB W8, [X22 + 0xE7E]
	0x039F2A8C LDR X3, [X23]
	0x039F2A90 AND X1, X21, 0x0
	0x039F2A94 AND W2, W19, 0x1
	0x039F2A98 MOV X0, X20
	0x039F2A9C LDP X20, X19, [X31 + 0x20]
	0x039F2AA0 LDP X22, X21, [X31 + 0x10]
	0x039F2AA4 LDP X30, X23, [X31], #0x30
	0x039F2AA8 B 0x284B108
	0x039F2AAC STP X30, X23, [X31 - 0x30]!
	0x039F2AB0 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x9F0000
	005 Move W8, [X20+3696]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x762000
	012 Move X0, [X0+2112]
	013 Call 0x1C17CF4
	014 Move X0, 0x762000
	015 Move X0, [X0+2120]
	016 Call 0x1C17CF4
	017 Move X0, 0x702000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3696], W8
	022 Move X0, [X19+56]
	023 Compare X0, 0
	024 JumpIfEqual {49}
	025 Move W8, [X0+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0x762000
	028 Move X8, [X8+2120]
	029 Move W1, W31
	030 Move X2, [X8]
	031 Call List`1<Object>.get_Item, X0, X1
	032 Move X8, 0x702000
	033 Move X8, [X8+1432]
	034 Move X20, X0
	035 Move X8, [X8]
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X31
	043 Move X2, X31
	044 Call Object.op_Equality, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {55}
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Call VolumeManager.ReloadBaseTypes, X0
	054 Return 
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Return 

Method: System.Void CheckStack(UnityEngine.Rendering.VolumeStack stack)

Disassembly:
	0x039F2AB4 STP X20, X19, [X31 + 0x20]
	0x039F2AB8 ADRP X22, 0x9EF000
	0x039F2ABC ADRP X23, 0x761000
	0x039F2AC0 LDRB W8, [X22 + 0xE7F]
	0x039F2AC4 LDR X23, [X23 + 0x920]
	0x039F2AC8 MOV W20, W2
	0x039F2ACC MOV W19, W1
	0x039F2AD0 MOV X21, X0
	0x039F2AD4 TBNZ X8, 0x0, 0x39F2AEC
	0x039F2AD8 ADRP X0, 0x761000
	0x039F2ADC LDR X0, [X0 + 0x920]
	0x039F2AE0 BL 0x1C16CF4
	0x039F2AE4 MOVZ W8, 0x1
	0x039F2AE8 STRB W8, [X22 + 0xE7F]
	0x039F2AEC LDR X3, [X23]
	0x039F2AF0 AND W2, W20, 0x1
	0x039F2AF4 MOV X0, X21
	0x039F2AF8 MOV W1, W19
	0x039F2AFC LDP X20, X19, [X31 + 0x20]
	0x039F2B00 LDP X22, X21, [X31 + 0x10]
	0x039F2B04 LDP X30, X23, [X31], #0x30
	0x039F2B08 B 0x284A028
	0x039F2B0C SUB W8, W2, W1
	0x039F2B10 SCVTF S2, W8
	0x039F2B14 SCVTF S1, W1
	0x039F2B18 MOVZ W9, 0x7F800000
	0x039F2B1C FMUL S0, S2, S0
	0x039F2B20 FMOV S2, W9
	0x039F2B24 FADD S0, S0, S1
	0x039F2B28 FCVTZS W8, S0
	0x039F2B2C FCMP S0, S2
	0x039F2B30 MOVZ W9, 0x80000000
	0x039F2B34 CSEL W8, W9, W8, EQ
	0x039F2B38 STR W8, [X0 + 0x14]
	0x039F2B3C RET
	0x039F2B40 STP X30, X23, [X31 - 0x30]!
	0x039F2B44 STP X22, X21, [X31 + 0x10]
	0x039F2B48 STP X20, X19, [X31 + 0x20]
	0x039F2B4C ADRP X22, 0x9EF000
	0x039F2B50 ADRP X23, 0x761000
	0x039F2B54 LDRB W8, [X22 + 0xE80]
	0x039F2B58 LDR X23, [X23 + 0x920]
	0x039F2B5C MOV W20, W2
	0x039F2B60 MOV W19, W1
	0x039F2B64 MOV X21, X0
	0x039F2B68 TBNZ X8, 0x0, 0x39F2B80
	0x039F2B6C ADRP X0, 0x761000
	0x039F2B70 LDR X0, [X0 + 0x920]
	0x039F2B74 BL 0x1C16CF4
	0x039F2B78 MOVZ W8, 0x1
	0x039F2B7C STRB W8, [X22 + 0xE80]
	0x039F2B80 LDR X3, [X23]
	0x039F2B84 AND W2, W20, 0x1
	0x039F2B88 MOV X0, X21
	0x039F2B8C MOV W1, W19
	0x039F2B90 LDP X20, X19, [X31 + 0x20]
	0x039F2B94 LDP X22, X21, [X31 + 0x10]
	0x039F2B98 LDP X30, X23, [X31], #0x30
	0x039F2B9C B 0x284A028
	0x039F2BA0 LDR W0, [X0 + 0x14]
	0x039F2BA4 RET
	0x039F2BA8 LDR W8, [X0 + 0x18]
	0x039F2BAC CMP W8, W1
	0x039F2BB0 CSEL W8, W1, W8, LT
	0x039F2BB4 STR W8, [X0 + 0x14]
	0x039F2BB8 RET
	0x039F2BBC STR X30, [X31 - 0x20]!
	0x039F2BC0 STP X20, X19, [X31 + 0x10]
	0x039F2BC4 MOV W19, W2
	0x039F2BC8 AND W2, W3, 0x1
	0x039F2BCC MOV X20, X0
	0x039F2BD0 BL 0x39F2AAC
	0x039F2BD4 STR W19, [X20 + 0x18]
	0x039F2BD8 LDP X20, X19, [X31 + 0x10]
	0x039F2BDC LDR X30, [X31], #0x20
	0x039F2BE0 RET
	0x039F2BE4 LDR W0, [X0 + 0x14]
	0x039F2BE8 RET
	0x039F2BEC LDR W8, [X0 + 0x18]
	0x039F2BF0 CMP W8, W1
	0x039F2BF4 CSEL W8, W1, W8, LT
	0x039F2BF8 STR W8, [X0 + 0x14]
	0x039F2BFC RET
	0x039F2C00 STR X30, [X31 - 0x40]!
	0x039F2C04 STP X24, X23, [X31 + 0x10]
	0x039F2C08 STP X22, X21, [X31 + 0x20]
	0x039F2C0C STP X20, X19, [X31 + 0x30]
	0x039F2C10 ADRP X23, 0x9EF000
	0x039F2C14 ADRP X24, 0x761000
	0x039F2C18 LDRB W8, [X23 + 0xE81]
	0x039F2C1C LDR X24, [X24 + 0x920]
	0x039F2C20 MOV W22, W3
	0x039F2C24 MOV W19, W2
	0x039F2C28 MOV W21, W1
	0x039F2C2C MOV X20, X0
	0x039F2C30 TBNZ X8, 0x0, 0x39F2C48
	0x039F2C34 ADRP X0, 0x761000
	0x039F2C38 LDR X0, [X0 + 0x920]
	0x039F2C3C BL 0x1C16CF4
	0x039F2C40 MOVZ W8, 0x1
	0x039F2C44 STRB W8, [X23 + 0xE81]
	0x039F2C48 LDR X3, [X24]
	0x039F2C4C AND W2, W22, 0x1
	0x039F2C50 MOV X0, X20
	0x039F2C54 MOV W1, W21
	0x039F2C58 BL 0x284A028
	0x039F2C5C STR W19, [X20 + 0x18]
	0x039F2C60 LDP X20, X19, [X31 + 0x30]
	0x039F2C64 LDP X22, X21, [X31 + 0x20]
	0x039F2C68 LDP X24, X23, [X31 + 0x10]
	0x039F2C6C LDR X30, [X31], #0x40
	0x039F2C70 RET
	0x039F2C74 LDR W0, [X0 + 0x14]
	0x039F2C78 RET
	0x039F2C7C LDR W8, [X0 + 0x18]
	0x039F2C80 CMP W8, W1
	0x039F2C84 CSEL W8, W1, W8, GT
	0x039F2C88 STR W8, [X0 + 0x14]
	0x039F2C8C RET
	0x039F2C90 STR X30, [X31 - 0x20]!
	0x039F2C94 STP X20, X19, [X31 + 0x10]
	0x039F2C98 MOV W19, W2
	0x039F2C9C AND W2, W3, 0x1
	0x039F2CA0 MOV X20, X0
	0x039F2CA4 BL 0x39F2AAC
	0x039F2CA8 STR W19, [X20 + 0x18]
	0x039F2CAC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+64], X26
	004 Move [X31+72], X25
	005 Move [X31+80], X24
	006 Move [X31+88], X23
	007 Move [X31+96], X22
	008 Move [X31+104], X21
	009 Move [X31+112], X20
	010 Move [X31+120], X19
	011 Move X21, 0x9F0000
	012 Move W8, [X21+3697]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {45}
	019 Move X0, 0x762000
	020 Move X0, [X0+2136]
	021 Call 0x1C17CF4
	022 Move X0, 0x762000
	023 Move X0, [X0+2144]
	024 Call 0x1C17CF4
	025 Move X0, 0x762000
	026 Move X0, [X0+2152]
	027 Call 0x1C17CF4
	028 Move X0, 0x762000
	029 Move X0, [X0+2160]
	030 Call 0x1C17CF4
	031 Move X0, 0x762000
	032 Move X0, [X0+2168]
	033 Call 0x1C17CF4
	034 Move X0, 0x762000
	035 Move X0, [X0+2176]
	036 Call 0x1C17CF4
	037 Move X0, 0x702000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move X0, 0x702000
	041 Move X0, [X0+1728]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+3697], W8
	045 NotImplemented "Instruction MOVI not yet implemented."
	046 Move [X31+32], X31
	047 Move [X31], V0
	048 Move [X31+8], V0
	049 Compare X19, 0
	050 JumpIfEqual {122}
	051 Move X0, [X19+16]
	052 Compare X0, 0
	053 JumpIfEqual {108}
	054 Move X8, 0x762000
	055 Move X8, [X8+2136]
	056 Move X24, 0x762000
	057 Move X24, [X24+2152]
	058 Move X25, 0x702000
	059 Move X1, [X8]
	060 Move X26, 0x702000
	061 Move X23, 0x762000
	062 Move X25, [X25+1728]
	063 Move X26, [X26+1432]
	064 Move X23, [X23+2144]
	065 Add X8, X31, 0
	066 Call Dictionary`2<Object, Object>.GetEnumerator, X0
	067 Move X1, [X24]
	068 Add X0, X31, 0
	069 Call Enumerator<Object, Object>.MoveNext, X0
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {105}
	074 Move X0, [X25]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X22
	082 Move X1, X31
	083 Move X2, X31
	084 Call Type.op_Equality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfEqual {102}
	089 Move X0, [X26]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X0, X21
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Equality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {67}
	102 Move X1, [X20+56]
	103 Move X0, X19
	104 Call VolumeStack.Reload, X0, X1
	105 Move X1, [X23]
	106 Add X0, X31, 0
	107 Call Enumerator<Object, Object>.Dispose, X0
	108 Move X1, [X20+56]
	109 Move X0, X19
	110 Call VolumeStack.Reload, X0, X1
	111 Move X20, [X31+112]
	112 Move X19, [X31+120]
	113 Move X22, [X31+96]
	114 Move X21, [X31+104]
	115 Move X24, [X31+80]
	116 Move X23, [X31+88]
	117 Move X26, [X31+64]
	118 Move X25, [X31+72]
	119 Move X30, [X31+48]
	120 Add X31, X31, 128
	121 Return 
	122 Call 0x1C17F20
	123 Move X19, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X0, X19
	126 Call 0x3EB2AD0
	127 Move X20, [X0]
	128 Call 0x3EB2AE0
	129 Move X1, [X23]
	130 Add X0, X31, 0
	131 Call Enumerator<Object, Object>.Dispose, X0
	132 Compare X20, 0
	133 JumpIfEqual {111}
	134 Move X0, X20
	135 Call 0x1C17F18
	136 Move X20, X31
	137 Move X19, X0
	138 Move X1, [X23]
	139 Add X0, X31, 0
	140 Call Enumerator<Object, Object>.Dispose, X0
	141 Compare X20, 0
	142 JumpIfNotEqual {145}
	143 Move X0, X19
	144 Call 0x1D2D690
	145 Move X0, X20
	146 Call 0x1C17F18
	147 Call 0x1991590

Method: System.Boolean CheckUpdateRequired(UnityEngine.Rendering.VolumeStack stack)

Disassembly:
	0x039F2CB0 LDR X30, [X31], #0x20
	0x039F2CB4 RET
	0x039F2CB8 LDR W0, [X0 + 0x14]
	0x039F2CBC RET
	0x039F2CC0 LDR W8, [X0 + 0x18]
	0x039F2CC4 CMP W8, W1
	0x039F2CC8 CSEL W8, W1, W8, GT
	0x039F2CCC STR W8, [X0 + 0x14]
	0x039F2CD0 RET
	0x039F2CD4 STR X30, [X31 - 0x40]!
	0x039F2CD8 STP X24, X23, [X31 + 0x10]
	0x039F2CDC STP X22, X21, [X31 + 0x20]
	0x039F2CE0 STP X20, X19, [X31 + 0x30]
	0x039F2CE4 ADRP X23, 0x9EF000
	0x039F2CE8 ADRP X24, 0x761000
	0x039F2CEC LDRB W8, [X23 + 0xE82]
	0x039F2CF0 LDR X24, [X24 + 0x920]
	0x039F2CF4 MOV W22, W3
	0x039F2CF8 MOV W19, W2
	0x039F2CFC MOV W21, W1
	0x039F2D00 MOV X20, X0
	0x039F2D04 TBNZ X8, 0x0, 0x39F2D1C
	0x039F2D08 ADRP X0, 0x761000
	0x039F2D0C LDR X0, [X0 + 0x920]
	0x039F2D10 BL 0x1C16CF4
	0x039F2D14 MOVZ W8, 0x1
	0x039F2D18 STRB W8, [X23 + 0xE82]
	0x039F2D1C LDR X3, [X24]
	0x039F2D20 AND W2, W22, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9F0000
	006 Move W8, [X21+3698]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x762000
	014 Move X0, [X0+2184]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3698], W8
	018 Move X8, [X20+40]
	019 Compare X8, 0
	020 JumpIfEqual {38}
	021 Compare X19, 0
	022 JumpIfEqual {38}
	023 Move W8, [X8+24]
	024 Compare W8, 0
	025 JumpIfEqual {27}
	026 Move W8, 1
	027 Move W9, [X19+32]
	028 Compare W9, 0
	029 JumpIfEqual {37}
	030 Move [X19+32], W8
	031 Move W0, 1
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0
	037 Move W0, W31
	038 Call 0x1C17F20

Method: System.Void Update(UnityEngine.Transform trigger, UnityEngine.LayerMask layerMask)

Disassembly:
	0x039F2D24 MOV X0, X20
	0x039F2D28 MOV W1, W21
	0x039F2D2C BL 0x284A028
	0x039F2D30 STR W19, [X20 + 0x18]
	0x039F2D34 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move X8, [X0+16]
	002 And X3, X2, 0
	003 Move X2, X1
	004 Move X1, X8

Method: System.Void Update(UnityEngine.Rendering.VolumeStack stack, UnityEngine.Transform trigger, UnityEngine.LayerMask layerMask)

Disassembly:
	0x039F2D38 LDP X22, X21, [X31 + 0x20]
	0x039F2D3C LDP X24, X23, [X31 + 0x10]
	0x039F2D40 LDR X30, [X31], #0x40
	0x039F2D44 RET
	0x039F2D48 LDR W0, [X0 + 0x14]
	0x039F2D4C RET
	0x039F2D50 LDP W9, W8, [X0 + 0x18]
	0x039F2D54 CMP W8, W1
	0x039F2D58 CSEL W8, W8, W1, LT
	0x039F2D5C CMP W9, W1
	0x039F2D60 CSEL W8, W9, W8, GT
	0x039F2D64 STR W8, [X0 + 0x14]
	0x039F2D68 RET
	0x039F2D6C STP X30, X21, [X31 - 0x20]!
	0x039F2D70 STP X20, X19, [X31 + 0x10]
	0x039F2D74 MOV W20, W2
	0x039F2D78 AND W2, W4, 0x1
	0x039F2D7C MOV W19, W3
	0x039F2D80 MOV X21, X0
	0x039F2D84 BL 0x39F2AAC
	0x039F2D88 STP W20, W19, [X21 + 0x18]
	0x039F2D8C LDP X20, X19, [X31 + 0x10]
	0x039F2D90 LDP X30, X21, [X31], #0x20
	0x039F2D94 RET
	0x039F2D98 LDR W0, [X0 + 0x14]
	0x039F2D9C RET
	0x039F2DA0 LDP W9, W8, [X0 + 0x18]
	0x039F2DA4 CMP W8, W1
	0x039F2DA8 CSEL W8, W8, W1, LT
	0x039F2DAC CMP W9, W1
	0x039F2DB0 CSEL W8, W9, W8, GT
	0x039F2DB4 STR W8, [X0 + 0x14]
	0x039F2DB8 RET
	0x039F2DBC STP X30, X25, [X31 - 0x40]!
	0x039F2DC0 STP X24, X23, [X31 + 0x10]
	0x039F2DC4 STP X22, X21, [X31 + 0x20]
	0x039F2DC8 STP X20, X19, [X31 + 0x30]
	0x039F2DCC ADRP X24, 0x9EF000
	0x039F2DD0 ADRP X25, 0x761000
	0x039F2DD4 LDRB W8, [X24 + 0xE83]
	0x039F2DD8 LDR X25, [X25 + 0x920]
	0x039F2DDC MOV W22, W4
	0x039F2DE0 MOV W19, W3
	0x039F2DE4 MOV W20, W2
	0x039F2DE8 MOV W23, W1
	0x039F2DEC MOV X21, X0
	0x039F2DF0 TBNZ X8, 0x0, 0x39F2E08
	0x039F2DF4 ADRP X0, 0x761000
	0x039F2DF8 LDR X0, [X0 + 0x920]
	0x039F2DFC BL 0x1C16CF4
	0x039F2E00 MOVZ W8, 0x1
	0x039F2E04 STRB W8, [X24 + 0xE83]
	0x039F2E08 LDR X3, [X25]
	0x039F2E0C AND W2, W22, 0x1
	0x039F2E10 MOV X0, X21
	0x039F2E14 MOV W1, W23
	0x039F2E18 BL 0x284A028
	0x039F2E1C STP W20, W19, [X21 + 0x18]
	0x039F2E20 LDP X20, X19, [X31 + 0x30]
	0x039F2E24 LDP X22, X21, [X31 + 0x20]
	0x039F2E28 LDP X24, X23, [X31 + 0x10]
	0x039F2E2C LDP X30, X25, [X31], #0x40
	0x039F2E30 RET
	0x039F2E34 STR D8, [X31 - 0x30]!
	0x039F2E38 STR X30, [X31 + 0x8]
	0x039F2E3C STP X22, X21, [X31 + 0x10]
	0x039F2E40 STP X20, X19, [X31 + 0x20]
	0x039F2E44 ADRP X21, 0x9EF000
	0x039F2E48 ADRP X22, 0x761000
	0x039F2E4C LDRB W8, [X21 + 0xE84]
	0x039F2E50 LDR X22, [X22 + 0x928]
	0x039F2E54 MOV W19, W1
	0x039F2E58 MOV V8.16B, V0.16B
	0x039F2E5C MOV X20, X0
	0x039F2E60 TBNZ X8, 0x0, 0x39F2E78
	0x039F2E64 ADRP X0, 0x761000
	0x039F2E68 LDR X0, [X0 + 0x928]
	0x039F2E6C BL 0x1C16CF4
	0x039F2E70 MOVZ W8, 0x1
	0x039F2E74 STRB W8, [X21 + 0xE84]
	0x039F2E78 LDR X2, [X22]
	0x039F2E7C AND W1, W19, 0x1
	0x039F2E80 MOV X0, X20
	0x039F2E84 LDP X20, X19, [X31 + 0x20]
	0x039F2E88 LDP X22, X21, [X31 + 0x10]
	0x039F2E8C LDR X30, [X31 + 0x8]
	0x039F2E90 MOV V0.16B, V8.16B
	0x039F2E94 LDR V8, [X31], #0x30
	0x039F2E98 B 0x284C19C
	0x039F2E9C FSUB S1, S1, S0
	0x039F2EA0 FMUL S1, S1, S2
	0x039F2EA4 FADD S0, S1, S0
	0x039F2EA8 STR S0, [X0 + 0x14]
	0x039F2EAC RET
	0x039F2EB0 STR D8, [X31 - 0x30]!
	0x039F2EB4 STR X30, [X31 + 0x8]
	0x039F2EB8 STP X22, X21, [X31 + 0x10]
	0x039F2EBC STP X20, X19, [X31 + 0x20]
	0x039F2EC0 ADRP X21, 0x9EF000
	0x039F2EC4 ADRP X22, 0x761000
	0x039F2EC8 LDRB W8, [X21 + 0xE85]
	0x039F2ECC LDR X22, [X22 + 0x928]
	0x039F2ED0 MOV W19, W1
	0x039F2ED4 MOV V8.16B, V0.16B
	0x039F2ED8 MOV X20, X0
	0x039F2EDC TBNZ X8, 0x0, 0x39F2EF4
	0x039F2EE0 ADRP X0, 0x761000
	0x039F2EE4 LDR X0, [X0 + 0x928]
	0x039F2EE8 BL 0x1C16CF4
	0x039F2EEC MOVZ W8, 0x1
	0x039F2EF0 STRB W8, [X21 + 0xE85]
	0x039F2EF4 LDR X2, [X22]
	0x039F2EF8 AND W1, W19, 0x1
	0x039F2EFC MOV X0, X20
	0x039F2F00 LDP X20, X19, [X31 + 0x20]
	0x039F2F04 LDP X22, X21, [X31 + 0x10]
	0x039F2F08 LDR X30, [X31 + 0x8]
	0x039F2F0C MOV V0.16B, V8.16B
	0x039F2F10 LDR V8, [X31], #0x30
	0x039F2F14 B 0x284C19C
	0x039F2F18 LDR V0, [X0 + 0x14]
	0x039F2F1C RET
	0x039F2F20 LDR V1, [X0 + 0x18]
	0x039F2F24 FCMP S1, S0
	0x039F2F28 FCSEL S0, S0, S1, MI
	0x039F2F2C STR S0, [X0 + 0x14]
	0x039F2F30 RET
	0x039F2F34 STR D8, [X31 - 0x20]!
	0x039F2F38 STP X30, X19, [X31 + 0x10]
	0x039F2F3C AND W1, W1, 0x1
	0x039F2F40 MOV V8.16B, V1.16B
	0x039F2F44 MOV X19, X0
	0x039F2F48 BL 0x39F2E34
	0x039F2F4C STR S8, [X19 + 0x18]
	0x039F2F50 LDP X30, X19, [X31 + 0x10]
	0x039F2F54 LDR V8, [X31], #0x20
	0x039F2F58 RET
	0x039F2F5C LDR V0, [X0 + 0x14]
	0x039F2F60 RET
	0x039F2F64 LDR V1, [X0 + 0x18]
	0x039F2F68 FCMP S1, S0
	0x039F2F6C FCSEL S0, S0, S1, MI
	0x039F2F70 STR S0, [X0 + 0x14]
	0x039F2F74 RET
	0x039F2F78 STP D9, D8, [X31 - 0x40]!
	0x039F2F7C STR X30, [X31 + 0x10]
	0x039F2F80 STP X22, X21, [X31 + 0x20]
	0x039F2F84 STP X20, X19, [X31 + 0x30]
	0x039F2F88 ADRP X21, 0x9EF000
	0x039F2F8C ADRP X22, 0x761000
	0x039F2F90 LDRB W8, [X21 + 0xE86]
	0x039F2F94 LDR X22, [X22 + 0x928]
	0x039F2F98 MOV W20, W1
	0x039F2F9C MOV V8.16B, V1.16B
	0x039F2FA0 MOV V9.16B, V0.16B
	0x039F2FA4 MOV X19, X0
	0x039F2FA8 TBNZ X8, 0x0, 0x39F2FC0
	0x039F2FAC ADRP X0, 0x761000
	0x039F2FB0 LDR X0, [X0 + 0x928]
	0x039F2FB4 BL 0x1C16CF4
	0x039F2FB8 MOVZ W8, 0x1
	0x039F2FBC STRB W8, [X21 + 0xE86]
	0x039F2FC0 LDR X2, [X22]
	0x039F2FC4 AND W1, W20, 0x1
	0x039F2FC8 MOV X0, X19
	0x039F2FCC MOV V0.16B, V9.16B
	0x039F2FD0 BL 0x284C19C
	0x039F2FD4 STR S8, [X19 + 0x18]
	0x039F2FD8 LDP X20, X19, [X31 + 0x30]
	0x039F2FDC LDP X22, X21, [X31 + 0x20]
	0x039F2FE0 LDR X30, [X31 + 0x10]
	0x039F2FE4 LDP D9, D8, [X31], #0x40
	0x039F2FE8 RET
	0x039F2FEC LDR V0, [X0 + 0x14]
	0x039F2FF0 RET
	0x039F2FF4 LDR V1, [X0 + 0x18]
	0x039F2FF8 FCMP S1, S0
	0x039F2FFC FCSEL S0, S0, S1, GT
	0x039F3000 STR S0, [X0 + 0x14]
	0x039F3004 RET
	0x039F3008 STR D8, [X31 - 0x20]!
	0x039F300C STP X30, X19, [X31 + 0x10]
	0x039F3010 AND W1, W1, 0x1
	0x039F3014 MOV V8.16B, V1.16B
	0x039F3018 MOV X19, X0
	0x039F301C BL 0x39F2E34
	0x039F3020 STR S8, [X19 + 0x18]
	0x039F3024 LDP X30, X19, [X31 + 0x10]
	0x039F3028 LDR V8, [X31], #0x20
	0x039F302C RET
	0x039F3030 LDR V0, [X0 + 0x14]
	0x039F3034 RET
	0x039F3038 LDR V1, [X0 + 0x18]
	0x039F303C FCMP S1, S0
	0x039F3040 FCSEL S0, S0, S1, GT
	0x039F3044 STR S0, [X0 + 0x14]
	0x039F3048 RET
	0x039F304C STP D9, D8, [X31 - 0x40]!
	0x039F3050 STR X30, [X31 + 0x10]
	0x039F3054 STP X22, X21, [X31 + 0x20]
	0x039F3058 STP X20, X19, [X31 + 0x30]
	0x039F305C ADRP X21, 0x9EE000
	0x039F3060 ADRP X22, 0x760000
	0x039F3064 LDRB W8, [X21 + 0xE87]
	0x039F3068 LDR X22, [X22 + 0x928]
	0x039F306C MOV W20, W1
	0x039F3070 MOV V8.16B, V1.16B
	0x039F3074 MOV V9.16B, V0.16B
	0x039F3078 MOV X19, X0
	0x039F307C TBNZ X8, 0x0, 0x39F3094
	0x039F3080 ADRP X0, 0x760000
	0x039F3084 LDR X0, [X0 + 0x928]
	0x039F3088 BL 0x1C16CF4
	0x039F308C MOVZ W8, 0x1
	0x039F3090 STRB W8, [X21 + 0xE87]
	0x039F3094 LDR X2, [X22]
	0x039F3098 AND W1, W20, 0x1
	0x039F309C MOV X0, X19
	0x039F30A0 MOV V0.16B, V9.16B
	0x039F30A4 BL 0x284C19C
	0x039F30A8 STR S8, [X19 + 0x18]
	0x039F30AC LDP X20, X19, [X31 + 0x30]
	0x039F30B0 LDP X22, X21, [X31 + 0x20]
	0x039F30B4 LDR X30, [X31 + 0x10]
	0x039F30B8 LDP D9, D8, [X31], #0x40
	0x039F30BC RET
	0x039F30C0 LDR V0, [X0 + 0x14]
	0x039F30C4 RET
	0x039F30C8 LDP S2, S1, [X0 + 0x18]
	0x039F30CC FCMP S1, S0
	0x039F30D0 FCSEL S1, S1, S0, MI
	0x039F30D4 FCMP S2, S0
	0x039F30D8 FCSEL S0, S1, S2, LE
	0x039F30DC STR S0, [X0 + 0x14]
	0x039F30E0 RET
	0x039F30E4 STP D9, D8, [X31 - 0x20]!
	0x039F30E8 STP X30, X19, [X31 + 0x10]
	0x039F30EC AND W1, W1, 0x1
	0x039F30F0 MOV V8.16B, V2.16B
	0x039F30F4 MOV V9.16B, V1.16B
	0x039F30F8 MOV X19, X0
	0x039F30FC BL 0x39F2E34
	0x039F3100 STP S9, S8, [X19 + 0x18]
	0x039F3104 LDP X30, X19, [X31 + 0x10]
	0x039F3108 LDP D9, D8, [X31], #0x20
	0x039F310C RET
	0x039F3110 LDR V0, [X0 + 0x14]
	0x039F3114 RET
	0x039F3118 LDP S2, S1, [X0 + 0x18]
	0x039F311C FCMP S1, S0
	0x039F3120 FCSEL S1, S1, S0, MI
	0x039F3124 FCMP S2, S0
	0x039F3128 FCSEL S0, S1, S2, LE
	0x039F312C STR S0, [X0 + 0x14]
	0x039F3130 RET
	0x039F3134 STR D10, [X31 - 0x40]!
	0x039F3138 STP D9, D8, [X31 + 0x8]
	0x039F313C STR X30, [X31 + 0x18]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+16], D14
	003 Move [X31+32], D13
	004 Move [X31+40], D12
	005 Move [X31+48], D11
	006 Move [X31+56], D10
	007 Move [X31+64], D9
	008 Move [X31+72], D8
	009 Move [X31+80], X29
	010 Move [X31+88], X30
	011 Move [X31+96], X28
	012 Move [X31+104], X27
	013 Move [X31+112], X26
	014 Move [X31+120], X25
	015 Move [X31+128], X24
	016 Move [X31+136], X23
	017 Move [X31+144], X22
	018 Move [X31+152], X21
	019 Move [X31+160], X20
	020 Move [X31+168], X19
	021 Move X20, 0x9F0000
	022 Move W8, [X20+3699]
	023 Move X22, X3
	024 Move X23, X2
	025 Move X19, X1
	026 Move X26, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {57}
	031 Move X0, 0x762000
	032 Move X0, [X0+1640]
	033 Call 0x1C17CF4
	034 Move X0, 0x72A000
	035 Move X0, [X0+608]
	036 Call 0x1C17CF4
	037 Move X0, 0x762000
	038 Move X0, [X0+2192]
	039 Call 0x1C17CF4
	040 Move X0, 0x762000
	041 Move X0, [X0+2200]
	042 Call 0x1C17CF4
	043 Move X0, 0x762000
	044 Move X0, [X0+2184]
	045 Call 0x1C17CF4
	046 Move X0, 0x762000
	047 Move X0, [X0+2208]
	048 Call 0x1C17CF4
	049 Move X0, 0x762000
	050 Move X0, [X0+2216]
	051 Call 0x1C17CF4
	052 Move X0, 0x702000
	053 Move X0, [X0+1432]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+3699], W8
	057 Move X0, X26
	058 Move X1, X19
	059 Move [X31+24], X31
	060 Call VolumeManager.CheckUpdateRequired, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {286}
	065 Move X28, 0x702000
	066 Move X28, [X28+1432]
	067 Move X1, X19
	068 Call VolumeManager.ReplaceData, X0, X1
	069 Move X0, [X28]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move X0, X23
	075 Move X1, X31
	076 Move X2, X31
	077 Call Object.op_Equality, X0, X1
	078 Move W21, W0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {99}
	083 Move X20, 0x9E7000
	084 Move W8, [X20+1923]
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x702000
	088 Move X0, [X0+1440]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X20+1923], W8
	092 Move X8, 0x702000
	093 Move X8, [X8+1440]
	094 Move X8, [X8]
	095 Move X8, [X8+184]
	096 Move S8, [X8]
	097 Move S9, [X8+4]
	098 Move V10, [X8+8]
	099 Compare X23, 0
	100 JumpIfEqual {307}
	101 Move X0, X23
	102 Move X1, X31
	103 Call Transform.get_position, X0
	104 Move V8, V0
	105 Move V9, V1
	106 Move V10, V2
	107 And X1, X22, 0
	108 Move X0, X26
	109 Call VolumeManager.GrabVolumes, X0, X1
	110 Move X22, X0
	111 Move [X31+24], X31
	112 Move TEMP, X21
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfEqual {124}
	116 Compare X23, 0
	117 JumpIfEqual {307}
	118 Move X8, 0x72A000
	119 Move X8, [X8+608]
	120 Add X1, X31, 24
	121 Move X0, X23
	122 Move X2, [X8]
	123 Call 0x21A5990, X0, X1
	124 Move [X31+12], W21
	125 Compare X22, 0
	126 JumpIfEqual {307}
	127 Move W29, [X22+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X21, 0x762000
	130 Move X21, [X21+2216]
	131 Move W23, W31
	132 Move S11, 1
	133 Move S12, W31
	134 Move X2, [X21]
	135 Move X0, X22
	136 Move W1, W23
	137 Call List`1<Object>.get_Item, X0, X1
	138 Move X8, [X28]
	139 Move X24, X0
	140 Move W9, [X8+224]
	141 Compare W9, 0
	142 JumpIfNotEqual {145}
	143 Move X0, X8
	144 Call 0x1C17DFC
	145 Move X0, X24
	146 Move X1, X31
	147 Move X2, X31
	148 Call Object.op_Equality, X0, X1
	149 Move TEMP, X0
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfEqual {270}
	153 Compare X24, 0
	154 JumpIfEqual {307}
	155 Move X0, X24
	156 Move X1, X31
	157 Call Behaviour.get_enabled, X0
	158 Move TEMP, X0
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfNotEqual {270}
	162 Move X0, X24
	163 Call Volume.get_profileRef, X0
	164 Move X8, [X28]
	165 Move X25, X0
	166 Move W9, [X8+224]
	167 Compare W9, 0
	168 JumpIfNotEqual {171}
	169 Move X0, X8
	170 Call 0x1C17DFC
	171 Move X0, X25
	172 Move X1, X31
	173 Move X2, X31
	174 Call Object.op_Equality, X0, X1
	175 Move TEMP, X0
	176 And TEMP, TEMP, 1
	177 Compare TEMP, 1
	178 JumpIfEqual {270}
	179 Move V0, [X24+44]
	180 NotImplemented "Instruction FCMP not yet implemented."
	181 Move W8, [X24+32]
	182 Compare W8, 0
	183 JumpIfEqual {195}
	184 Move X0, X24
	185 Call Volume.get_profileRef, X0
	186 Compare X0, 0
	187 JumpIfEqual {307}
	188 Move V0, [X24+44]
	189 Move X2, [X0+24]
	190 NotImplemented "Instruction FMIN not yet implemented."
	191 NotImplemented "Instruction FCMP not yet implemented."
	192 NotImplemented "Instruction FCSEL not yet implemented."
	193 Move X1, X19
	194 Call VolumeManager.OverrideData, X0, X1, X2, V0
	195 Move W8, [X31+12]
	196 Move TEMP, X8
	197 And TEMP, TEMP, 1
	198 Compare TEMP, 1
	199 JumpIfEqual {270}
	200 Move X8, 0x762000
	201 Move X25, [X26+64]
	202 Move X8, [X8+1640]
	203 Move X0, X24
	204 Move X1, X25
	205 Move X2, [X8]
	206 Call 0x21A543C, X0, X1
	207 Compare X25, 0
	208 JumpIfEqual {307}
	209 Move W20, [X25+24]
	210 Compare W20, 0
	211 JumpIfEqual {270}
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move W8, 0x7F800000
	214 Move [X31], X26
	215 Move W26, W31
	216 Move S13, W8
	217 Move X8, 0x762000
	218 Move X8, [X8+2208]
	219 Move X0, X25
	220 Move W1, W26
	221 Move X2, [X8]
	222 Call List`1<Object>.get_Item, X0, X1
	223 Compare X0, 0
	224 JumpIfEqual {307}
	225 Move X1, X31
	226 Move X27, X0
	227 Call Collider.get_enabled, X0
	228 Move TEMP, X0
	229 And TEMP, TEMP, 1
	230 Compare TEMP, 1
	231 JumpIfNotEqual {248}
	232 Move X0, X27
	233 Move V0, V8
	234 Move V1, V9
	235 Move V2, V10
	236 Move X1, X31
	237 Call Collider.ClosestPoint, X0, X1
	238 Subtract S0, S0, S8
	239 Subtract S1, S1, S9
	240 Subtract S2, S2, S10
	241 Multiply S0, S0, S0
	242 Multiply S1, S1, S1
	243 Add S0, S0, S1
	244 Multiply S1, S2, S2
	245 Add S0, S1, S0
	246 NotImplemented "Instruction FCMP not yet implemented."
	247 Move V13, V0
	248 Add W26, W26, 1
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move W2, [X25+24]
	251 Move W8, [X25+28]
	252 Add W8, W8, 1
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move [X25+24], W31
	255 Move [X25+28], W8
	256 Move X0, [X25+16]
	257 Move W1, W31
	258 Move X3, X31
	259 Call Array.Clear, X0, X1, X2
	260 Move X26, [X31]
	261 Move W8, [X25+28]
	262 Move W9, 0x7F800000
	263 Move S13, W9
	264 Add W8, W8, 1
	265 Move [X25+24], W31
	266 Move [X25+28], W8
	267 Move V0, [X24+40]
	268 Multiply S0, S0, S0
	269 NotImplemented "Instruction FCMP not yet implemented."
	270 Add W23, W23, 1
	271 NotImplemented "Instruction CMP not yet implemented."
	272 NotImplemented "Instruction FCMP not yet implemented."
	273 Move S14, 1
	274 NotImplemented "Instruction FDIV not yet implemented."
	275 Subtract S14, S11, S0
	276 Move X0, X24
	277 Call Volume.get_profileRef, X0
	278 Compare X0, 0
	279 JumpIfEqual {307}
	280 Move V0, [X24+44]
	281 Move X2, [X0+24]
	282 NotImplemented "Instruction FMIN not yet implemented."
	283 NotImplemented "Instruction FCMP not yet implemented."
	284 NotImplemented "Instruction FCSEL not yet implemented."
	285 Multiply S0, S14, S0
	286 Move X20, [X31+160]
	287 Move X19, [X31+168]
	288 Move X22, [X31+144]
	289 Move X21, [X31+152]
	290 Move X24, [X31+128]
	291 Move X23, [X31+136]
	292 Move X26, [X31+112]
	293 Move X25, [X31+120]
	294 Move X28, [X31+96]
	295 Move X27, [X31+104]
	296 Move X29, [X31+80]
	297 Move X30, [X31+88]
	298 Move D9, [X31+64]
	299 Move D8, [X31+72]
	300 Move D11, [X31+48]
	301 Move D10, [X31+56]
	302 Move D13, [X31+32]
	303 Move D12, [X31+40]
	304 Move V14, [X31+16]
	305 Add X31, X31, 176
	306 Return 
	307 Call 0x1C17F20

Method: UnityEngine.Rendering.Volume[] GetVolumes(UnityEngine.LayerMask layerMask)

Disassembly:
	0x039F343C MOV V2.16B, V9.16B
	0x039F3440 MOV V3.16B, V8.16B
	0x039F3444 MOV W1, W20
	0x039F3448 AND W21, W21, 0x1
	0x039F344C AND W22, W22, 0x1
	0x039F3450 AND W23, W23, 0x1
	0x039F3454 BL 0x28495E8
	0x039F3458 LDR X8, [X19]
	0x039F345C STRB W23, [X19 + 0x24]
	0x039F3460 STRB W22, [X19 + 0x25]
	0x039F3464 STRB W21, [X19 + 0x26]
	0x039F3468 LDP X3, X2, [X8 + 0x198]
	0x039F346C MOV X0, X19
	0x039F3470 MOV W1, W20
	0x039F3474 LDP X20, X19, [X31 + 0x50]
	0x039F3478 LDP X22, X21, [X31 + 0x40]
	0x039F347C LDP X24, X23, [X31 + 0x30]
	0x039F3480 LDP X30, X25, [X31 + 0x20]
	0x039F3484 LDP D9, D8, [X31 + 0x10]
	0x039F3488 LDP D11, D10, [X31], #0x60
	0x039F348C BR X3
	0x039F3490 LDR V16, [X31]
	0x039F3494 MOV V4.S[1], V5.S[0]
	0x039F3498 MOV V0.S[1], V1.S[0]
	0x039F349C MOV V4.S[2], V6.S[0]
	0x039F34A0 MOV V0.S[2], V2.S[0]
	0x039F34A4 MOV V4.S[3], V7.S[0]
	0x039F34A8 MOV V0.S[3], V3.S[0]
	0x039F34AC FSUB V1.4S, V4.4S, V0.4S
	0x00000000 INVALID
	0x039F34B4 FADD V0.4S, V0.4S, V1.4S
	0x039F34B8 STUR V0, [X0 + 0x14]
	0x039F34BC RET
	0x039F34C0 STP D11, D10, [X31 - 0x50]!
	0x039F34C4 STP D9, D8, [X31 + 0x10]
	0x039F34C8 STR X30, [X31 + 0x20]
	0x039F34CC STP X22, X21, [X31 + 0x30]
	0x039F34D0 STP X20, X19, [X31 + 0x40]
	0x039F34D4 ADRP X22, 0x9EE000
	0x039F34D8 ADRP X21, 0x760000
	0x039F34DC LDRB W8, [X22 + 0xE8D]
	0x039F34E0 LDR X21, [X21 + 0x938]
	0x039F34E4 MOV W19, W1
	0x039F34E8 MOV V8.16B, V3.16B
	0x039F34EC MOV V9.16B, V2.16B
	0x039F34F0 MOV V10.16B, V1.16B
	0x039F34F4 MOV V11.16B, V0.16B
	0x039F34F8 MOV X20, X0
	0x039F34FC TBNZ X8, 0x0, 0x39F3514
	0x039F3500 ADRP X0, 0x760000
	0x039F3504 LDR X0, [X0 + 0x938]
	0x039F3508 BL 0x1C16CF4
	0x039F350C MOVZ W8, 0x1
	0x039F3510 STRB W8, [X22 + 0xE8D]
	0x039F3514 MOVZ W8, 0x101
	0x039F3518 STURH W8, [X20 + 0x25]
	0x039F351C LDR X2, [X21]
	0x039F3520 AND W1, W19, 0x1
	0x039F3524 MOV X0, X20
	0x039F3528 MOV V2.16B, V9.16B
	0x039F352C MOV V3.16B, V8.16B
	0x039F3530 LDP X20, X19, [X31 + 0x40]
	0x039F3534 LDP X22, X21, [X31 + 0x30]
	0x039F3538 LDR X30, [X31 + 0x20]
	0x039F353C LDP D9, D8, [X31 + 0x10]
	0x039F3540 MOV V0.16B, V11.16B
	0x039F3544 MOV V1.16B, V10.16B
	0x039F3548 LDP D11, D10, [X31], #0x50
	0x039F354C B 0x28495E8
	0x039F3550 STP D11, D10, [X31 - 0x60]!
	0x039F3554 STP D9, D8, [X31 + 0x10]
	0x039F3558 STP X30, X25, [X31 + 0x20]
	0x039F355C STP X24, X23, [X31 + 0x30]
	0x039F3560 STP X22, X21, [X31 + 0x40]
	0x039F3564 STP X20, X19, [X31 + 0x50]
	0x039F3568 ADRP X25, 0x9EE000
	0x039F356C ADRP X24, 0x760000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9EF000
	007 Move X22, 0x761000
	008 Move W8, [X21+3700]
	009 Move X22, [X22+1928]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x761000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move X0, 0x761000
	020 Move X0, [X0+2256]
	021 Call 0x1C17CF4
	022 Move X0, 0x761000
	023 Move X0, [X0+2264]
	024 Call 0x1C17CF4
	025 Move X0, 0x761000
	026 Move X0, [X0+2272]
	027 Call 0x1C17CF4
	028 Move X0, 0x761000
	029 Move X0, [X0+1928]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+3700], W8
	033 And X1, X20, 0
	034 Move X0, X19
	035 Call VolumeManager.GrabVolumes, X0, X1
	036 Move X8, [X22]
	037 Move X19, X0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {44}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X8, [X22]
	044 Move X9, [X8+184]
	045 Move X20, [X9+24]
	046 Compare X20, 0
	047 JumpIfNotEqual {70}
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {54}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X8, [X22]
	054 Move X9, 0x761000
	055 Move X8, [X8+184]
	056 Move X9, [X9+2264]
	057 Move X21, [X8]
	058 Move X0, [X9]
	059 Call 0x1C17F10
	060 Move X8, 0x761000
	061 Move X8, [X8+2272]
	062 Move X1, X21
	063 Move X3, X31
	064 Move X20, X0
	065 Move X2, [X8]
	066 Call Predicate`1<Object>..ctor, X0, X1, X2
	067 Move X8, [X22]
	068 Move X8, [X8+184]
	069 Move [X8+24], X20
	070 Compare X19, 0
	071 JumpIfEqual {89}
	072 Move X8, 0x761000
	073 Move X8, [X8+2248]
	074 Move X21, 0x761000
	075 Move X0, X19
	076 Move X1, X20
	077 Move X2, [X8]
	078 Move X21, [X21+2256]
	079 Call List`1<Object>.RemoveAll, X0, X1
	080 Move X1, [X21]
	081 Move X0, X19
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Call List`1<Object>.ToArray, X0
	088 Return X0
	089 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Rendering.Volume> GrabVolumes(UnityEngine.LayerMask mask)

Disassembly:
	0x039F3140 STP X22, X21, [X31 + 0x20]
	0x039F3144 STP X20, X19, [X31 + 0x30]
	0x039F3148 ADRP X21, 0x9EE000
	0x039F314C ADRP X22, 0x760000
	0x039F3150 LDRB W8, [X21 + 0xE88]
	0x039F3154 LDR X22, [X22 + 0x928]
	0x039F3158 MOV W20, W1
	0x039F315C MOV V8.16B, V2.16B
	0x039F3160 MOV V9.16B, V1.16B
	0x039F3164 MOV V10.16B, V0.16B
	0x039F3168 MOV X19, X0
	0x039F316C TBNZ X8, 0x0, 0x39F3184
	0x039F3170 ADRP X0, 0x760000
	0x039F3174 LDR X0, [X0 + 0x928]
	0x039F3178 BL 0x1C16CF4
	0x039F317C MOVZ W8, 0x1
	0x039F3180 STRB W8, [X21 + 0xE88]
	0x039F3184 LDR X2, [X22]
	0x039F3188 AND W1, W20, 0x1
	0x039F318C MOV X0, X19
	0x039F3190 MOV V0.16B, V10.16B
	0x039F3194 BL 0x284C19C
	0x039F3198 STP S9, S8, [X19 + 0x18]
	0x039F319C LDP X20, X19, [X31 + 0x30]
	0x039F31A0 LDP X22, X21, [X31 + 0x20]
	0x039F31A4 LDR X30, [X31 + 0x18]
	0x039F31A8 LDP D9, D8, [X31 + 0x8]
	0x039F31AC LDR V10, [X31], #0x40
	0x039F31B0 RET
	0x039F31B4 LDP S0, S1, [X0 + 0x14]
	0x039F31B8 RET
	0x039F31BC LDP S2, S3, [X0 + 0x1C]
	0x039F31C0 FCMP S0, S2
	0x039F31C4 FCSEL S0, S0, S2, GT
	0x039F31C8 FCMP S1, S3
	0x039F31CC FCSEL S1, S1, S3, MI
	0x039F31D0 STP S0, S1, [X0 + 0x14]
	0x039F31D4 RET
	0x039F31D8 STP D11, D10, [X31 - 0x50]!
	0x039F31DC STP D9, D8, [X31 + 0x10]
	0x039F31E0 STR X30, [X31 + 0x20]
	0x039F31E4 STP X22, X21, [X31 + 0x30]
	0x039F31E8 STP X20, X19, [X31 + 0x40]
	0x039F31EC ADRP X21, 0x9EE000
	0x039F31F0 ADRP X22, 0x760000
	0x039F31F4 LDRB W8, [X21 + 0xE89]
	0x039F31F8 LDR X22, [X22 + 0x930]
	0x039F31FC MOV W20, W1
	0x039F3200 MOV V8.16B, V3.16B
	0x039F3204 MOV V9.16B, V2.16B
	0x039F3208 MOV V10.16B, V1.16B
	0x039F320C MOV V11.16B, V0.16B
	0x039F3210 MOV X19, X0
	0x039F3214 TBNZ X8, 0x0, 0x39F322C
	0x039F3218 ADRP X0, 0x760000
	0x039F321C LDR X0, [X0 + 0x930]
	0x039F3220 BL 0x1C16CF4
	0x039F3224 MOVZ W8, 0x1
	0x039F3228 STRB W8, [X21 + 0xE89]
	0x039F322C LDR X2, [X22]
	0x039F3230 AND W1, W20, 0x1
	0x039F3234 MOV X0, X19
	0x039F3238 MOV V0.16B, V11.16B
	0x039F323C MOV V1.16B, V10.16B
	0x039F3240 BL 0x284CA08
	0x039F3244 STP S9, S8, [X19 + 0x1C]
	0x039F3248 LDP X20, X19, [X31 + 0x40]
	0x039F324C LDP X22, X21, [X31 + 0x30]
	0x039F3250 LDR X30, [X31 + 0x20]
	0x039F3254 LDP D9, D8, [X31 + 0x10]
	0x039F3258 LDP D11, D10, [X31], #0x50
	0x039F325C RET
	0x039F3260 FSUB S2, S2, S0
	0x039F3264 FSUB S3, S3, S1
	0x039F3268 FMUL S2, S2, S4
	0x039F326C FMUL S3, S3, S4
	0x039F3270 FADD S0, S0, S2
	0x039F3274 FADD S1, S1, S3
	0x039F3278 STP S0, S1, [X0 + 0x14]
	0x039F327C RET
	0x039F3280 LDP S0, S1, [X0 + 0x14]
	0x039F3284 RET
	0x039F3288 LDP S2, S3, [X0 + 0x1C]
	0x039F328C FCMP S0, S2
	0x039F3290 FCSEL S0, S0, S2, GT
	0x039F3294 FCMP S1, S3
	0x039F3298 FCSEL S1, S1, S3, MI
	0x039F329C STP S0, S1, [X0 + 0x14]
	0x039F32A0 RET
	0x039F32A4 STP D11, D10, [X31 - 0x50]!
	0x039F32A8 STP D9, D8, [X31 + 0x10]
	0x039F32AC STR X30, [X31 + 0x20]
	0x039F32B0 STP X22, X21, [X31 + 0x30]
	0x039F32B4 STP X20, X19, [X31 + 0x40]
	0x039F32B8 ADRP X21, 0x9EE000
	0x039F32BC ADRP X22, 0x760000
	0x039F32C0 LDRB W8, [X21 + 0xE8A]
	0x039F32C4 LDR X22, [X22 + 0x930]
	0x039F32C8 MOV W20, W1
	0x039F32CC MOV V8.16B, V3.16B
	0x039F32D0 MOV V9.16B, V2.16B
	0x039F32D4 MOV V10.16B, V1.16B
	0x039F32D8 MOV V11.16B, V0.16B
	0x039F32DC MOV X19, X0
	0x039F32E0 TBNZ X8, 0x0, 0x39F32F8
	0x039F32E4 ADRP X0, 0x760000
	0x039F32E8 LDR X0, [X0 + 0x930]
	0x039F32EC BL 0x1C16CF4
	0x039F32F0 MOVZ W8, 0x1
	0x039F32F4 STRB W8, [X21 + 0xE8A]
	0x039F32F8 LDR X2, [X22]
	0x039F32FC AND W1, W20, 0x1
	0x039F3300 MOV X0, X19
	0x039F3304 MOV V0.16B, V11.16B
	0x039F3308 MOV V1.16B, V10.16B
	0x039F330C BL 0x284CA08
	0x039F3310 STP S9, S8, [X19 + 0x1C]
	0x039F3314 LDP X20, X19, [X31 + 0x40]
	0x039F3318 LDP X22, X21, [X31 + 0x30]
	0x039F331C LDR X30, [X31 + 0x20]
	0x039F3320 LDP D9, D8, [X31 + 0x10]
	0x039F3324 LDP D11, D10, [X31], #0x50
	0x039F3328 RET
	0x039F332C STP D11, D10, [X31 - 0x50]!
	0x039F3330 STP D9, D8, [X31 + 0x10]
	0x039F3334 STR X30, [X31 + 0x20]
	0x039F3338 STP X22, X21, [X31 + 0x30]
	0x039F333C STP X20, X19, [X31 + 0x40]
	0x039F3340 ADRP X22, 0x9EE000
	0x039F3344 ADRP X21, 0x760000
	0x039F3348 LDRB W8, [X22 + 0xE8B]
	0x039F334C LDR X21, [X21 + 0x938]
	0x039F3350 MOV W19, W1
	0x039F3354 MOV V8.16B, V3.16B
	0x039F3358 MOV V9.16B, V2.16B
	0x039F335C MOV V10.16B, V1.16B
	0x039F3360 MOV V11.16B, V0.16B
	0x039F3364 MOV X20, X0
	0x039F3368 TBNZ X8, 0x0, 0x39F3380
	0x039F336C ADRP X0, 0x760000
	0x039F3370 LDR X0, [X0 + 0x938]
	0x039F3374 BL 0x1C16CF4
	0x039F3378 MOVZ W8, 0x1
	0x039F337C STRB W8, [X22 + 0xE8B]
	0x039F3380 MOVZ W8, 0x101
	0x039F3384 STURH W8, [X20 + 0x25]
	0x039F3388 LDR X2, [X21]
	0x039F338C AND W1, W19, 0x1
	0x039F3390 MOV X0, X20
	0x039F3394 MOV V2.16B, V9.16B
	0x039F3398 MOV V3.16B, V8.16B
	0x039F339C LDP X20, X19, [X31 + 0x40]
	0x039F33A0 LDP X22, X21, [X31 + 0x30]
	0x039F33A4 LDR X30, [X31 + 0x20]
	0x039F33A8 LDP D9, D8, [X31 + 0x10]
	0x039F33AC MOV V0.16B, V11.16B
	0x039F33B0 MOV V1.16B, V10.16B
	0x039F33B4 LDP D11, D10, [X31], #0x50
	0x039F33B8 B 0x28495E8
	0x039F33BC STP D11, D10, [X31 - 0x60]!
	0x039F33C0 STP D9, D8, [X31 + 0x10]
	0x039F33C4 STP X30, X25, [X31 + 0x20]
	0x039F33C8 STP X24, X23, [X31 + 0x30]
	0x039F33CC STP X22, X21, [X31 + 0x40]
	0x039F33D0 STP X20, X19, [X31 + 0x50]
	0x039F33D4 ADRP X25, 0x9EE000
	0x039F33D8 ADRP X24, 0x760000
	0x039F33DC LDRB W8, [X25 + 0xE8C]
	0x039F33E0 LDR X24, [X24 + 0x938]
	0x039F33E4 MOV W20, W4
	0x039F33E8 MOV W21, W3
	0x039F33EC MOV W22, W2
	0x039F33F0 MOV W23, W1
	0x039F33F4 MOV V8.16B, V3.16B
	0x039F33F8 MOV V9.16B, V2.16B
	0x039F33FC MOV V10.16B, V1.16B
	0x039F3400 MOV V11.16B, V0.16B
	0x039F3404 MOV X19, X0
	0x039F3408 TBNZ X8, 0x0, 0x39F3420
	0x039F340C ADRP X0, 0x760000
	0x039F3410 LDR X0, [X0 + 0x938]
	0x039F3414 BL 0x1C16CF4
	0x039F3418 MOVZ W8, 0x1
	0x039F341C STRB W8, [X25 + 0xE8C]
	0x039F3420 MOVZ W8, 0x101
	0x039F3424 STURH W8, [X19 + 0x25]
	0x039F3428 LDR X2, [X24]
	0x039F342C AND W20, W20, 0x1
	0x039F3430 MOV X0, X19
	0x039F3434 MOV V0.16B, V11.16B
	0x039F3438 MOV V1.16B, V10.16B

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x9EF000
	013 Move W8, [X21+3701]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {52}
	020 Move X0, 0x761000
	021 Move X0, [X0+2224]
	022 Call 0x1C17CF4
	023 Move X0, 0x761000
	024 Move X0, [X0+2232]
	025 Call 0x1C17CF4
	026 Move X0, 0x761000
	027 Move X0, [X0+2240]
	028 Call 0x1C17CF4
	029 Move X0, 0x761000
	030 Move X0, [X0+1680]
	031 Call 0x1C17CF4
	032 Move X0, 0x761000
	033 Move X0, [X0+1656]
	034 Call 0x1C17CF4
	035 Move X0, 0x761000
	036 Move X0, [X0+1968]
	037 Call 0x1C17CF4
	038 Move X0, 0x761000
	039 Move X0, [X0+2184]
	040 Call 0x1C17CF4
	041 Move X0, 0x761000
	042 Move X0, [X0+2216]
	043 Call 0x1C17CF4
	044 Move X0, 0x761000
	045 Move X0, [X0+1960]
	046 Call 0x1C17CF4
	047 Move X0, 0x72B000
	048 Move X0, [X0+4032]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X21+3701], W8
	052 Move [X31+8], X31
	053 Move [X31+4], W31
	054 Move X21, [X19+32]
	055 And X20, X20, 0
	056 Move X0, X20
	057 Move X1, X31
	058 Call LayerMask.op_Implicit, X0
	059 Compare X21, 0
	060 JumpIfEqual {220}
	061 Move X8, 0x761000
	062 Move X8, [X8+2232]
	063 Move X24, 0x761000
	064 Move W1, W0
	065 Add X2, X31, 8
	066 Move X3, [X8]
	067 Move X24, [X24+1680]
	068 Move X0, X21
	069 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {167}
	074 Move X8, 0x761000
	075 Move X8, [X8+1960]
	076 Move X0, [X8]
	077 Call 0x1C17F10
	078 Move X8, 0x761000
	079 Move X8, [X8+1968]
	080 Move X21, X0
	081 Move X1, [X8]
	082 Call List`1<Object>..ctor, X0
	083 Move [X31+8], X21
	084 Move X0, [X19+40]
	085 Compare X0, 0
	086 JumpIfEqual {220}
	087 Move W25, [X0+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X26, 0x761000
	090 Move X27, 0x761000
	091 Move X26, [X26+2216]
	092 Move X27, [X27+1656]
	093 Move W21, W31
	094 Move X2, [X26]
	095 Move W1, W21
	096 Call List`1<Object>.get_Item, X0, X1
	097 Move X22, X0
	098 Move X0, X20
	099 Move X1, X31
	100 Call LayerMask.op_Implicit, X0
	101 Compare X22, 0
	102 JumpIfEqual {220}
	103 Move W23, W0
	104 Move X0, X22
	105 Move X1, X31
	106 Call Component.get_gameObject, X0
	107 Compare X0, 0
	108 JumpIfEqual {220}
	109 Move X1, X31
	110 Call GameObject.get_layer, X0
	111 NotImplemented "Instruction LSRV not yet implemented."
	112 Move TEMP, X8
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {149}
	116 Move X0, [X31+8]
	117 Compare X0, 0
	118 JumpIfEqual {220}
	119 Move W10, [X0+28]
	120 Move X8, [X0+16]
	121 Move X9, [X27]
	122 Add W10, W10, 1
	123 Move [X0+28], W10
	124 Compare X8, 0
	125 JumpIfEqual {220}
	126 NotImplemented "Instruction LDRSW not yet implemented."
	127 Move W11, [X8+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Add W9, W10, 1
	130 Add X8, X8, X10
	131 Move [X0+24], W9
	132 Move [X8+32], X22
	133 Move X8, [X9+32]
	134 Move X1, X22
	135 Move X8, [X8+192]
	136 Move X2, [X8+112]
	137 Call List`1<Object>.AddWithResize, X0, X1
	138 Move X22, [X19+48]
	139 Move X0, X20
	140 Move X1, X31
	141 Call LayerMask.op_Implicit, X0
	142 Compare X22, 0
	143 JumpIfEqual {220}
	144 Move X3, [X24]
	145 Move W1, W0
	146 Move W2, 1
	147 Move X0, X22
	148 Call Dictionary`2<Int32, Boolean>.set_Item, X0, X1, X2
	149 Add W21, W21, 1
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X0, [X19+40]
	152 Compare X0, 0
	153 JumpIfNotEqual {94}
	154 Move X21, [X19+32]
	155 Move X0, X20
	156 Move X1, X31
	157 Call LayerMask.op_Implicit, X0
	158 Compare X21, 0
	159 JumpIfEqual {220}
	160 Move X8, 0x761000
	161 Move X2, [X31+8]
	162 Move X8, [X8+2224]
	163 Move W1, W0
	164 Move X0, X21
	165 Move X3, [X8]
	166 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	167 Move X21, [X19+48]
	168 Move X0, X20
	169 Move X1, X31
	170 Call LayerMask.op_Implicit, X0
	171 Compare X21, 0
	172 JumpIfEqual {220}
	173 Move X8, 0x761000
	174 Move X8, [X8+2240]
	175 Move W1, W0
	176 Add X2, X31, 4
	177 Move X0, X21
	178 Move X3, [X8]
	179 Call Dictionary`2<Int32, Boolean>.TryGetValue, X0, X1, X2
	180 Move W8, [X31+4]
	181 And W8, W0, W8
	182 Move TEMP, X8
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfNotEqual {207}
	186 Move X19, [X19+48]
	187 Move X0, X20
	188 Move X1, X31
	189 Call LayerMask.op_Implicit, X0
	190 Compare X19, 0
	191 JumpIfEqual {220}
	192 Move X3, [X24]
	193 Move X20, 0x72B000
	194 Move X20, [X20+4032]
	195 Move W1, W0
	196 Move X0, X19
	197 Move W2, W31
	198 Call Dictionary`2<Int32, Boolean>.set_Item, X0, X1, X2
	199 Move X0, [X20]
	200 Move X19, [X31+8]
	201 Move W8, [X0+224]
	202 Compare W8, 0
	203 JumpIfNotEqual {205}
	204 Call 0x1C17DFC
	205 Move X0, X19
	206 Call VolumeManager.SortByPriority, X0
	207 Move X0, [X31+8]
	208 Move X20, [X31+80]
	209 Move X19, [X31+88]
	210 Move X22, [X31+64]
	211 Move X21, [X31+72]
	212 Move X24, [X31+48]
	213 Move X23, [X31+56]
	214 Move X26, [X31+32]
	215 Move X25, [X31+40]
	216 Move X30, [X31+16]
	217 Move X27, [X31+24]
	218 Add X31, X31, 96
	219 Return X0
	220 Call 0x1C17F20

Method: System.Void SortByPriority(System.Collections.Generic.List`1<UnityEngine.Rendering.Volume> volumes)

Disassembly:
	0x039F3570 LDRB W8, [X25 + 0xE8E]
	0x039F3574 LDR X24, [X24 + 0x938]
	0x039F3578 MOV W20, W4
	0x039F357C MOV W21, W3
	0x039F3580 MOV W22, W2
	0x039F3584 MOV W23, W1
	0x039F3588 MOV V8.16B, V3.16B
	0x039F358C MOV V9.16B, V2.16B
	0x039F3590 MOV V10.16B, V1.16B
	0x039F3594 MOV V11.16B, V0.16B
	0x039F3598 MOV X19, X0
	0x039F359C TBNZ X8, 0x0, 0x39F35B4
	0x039F35A0 ADRP X0, 0x760000
	0x039F35A4 LDR X0, [X0 + 0x938]
	0x039F35A8 BL 0x1C16CF4
	0x039F35AC MOVZ W8, 0x1
	0x039F35B0 STRB W8, [X25 + 0xE8E]
	0x039F35B4 MOVZ W8, 0x101
	0x039F35B8 STURH W8, [X19 + 0x25]
	0x039F35BC LDR X2, [X24]
	0x039F35C0 AND W20, W20, 0x1
	0x039F35C4 MOV X0, X19
	0x039F35C8 MOV V0.16B, V11.16B
	0x039F35CC MOV V1.16B, V10.16B
	0x039F35D0 MOV V2.16B, V9.16B
	0x039F35D4 MOV V3.16B, V8.16B
	0x039F35D8 MOV W1, W20
	0x039F35DC AND W21, W21, 0x1
	0x039F35E0 AND W22, W22, 0x1
	0x039F35E4 AND W23, W23, 0x1
	0x039F35E8 BL 0x28495E8
	0x039F35EC LDR X8, [X19]
	0x039F35F0 STRB W23, [X19 + 0x24]
	0x039F35F4 STRB W22, [X19 + 0x25]
	0x039F35F8 STRB W21, [X19 + 0x26]
	0x039F35FC LDP X3, X2, [X8 + 0x198]
	0x039F3600 MOV X0, X19
	0x039F3604 MOV W1, W20
	0x039F3608 LDP X20, X19, [X31 + 0x50]
	0x039F360C LDP X22, X21, [X31 + 0x40]
	0x039F3610 LDP X24, X23, [X31 + 0x30]
	0x039F3614 LDP X30, X25, [X31 + 0x20]
	0x039F3618 LDP D9, D8, [X31 + 0x10]
	0x039F361C LDP D11, D10, [X31], #0x60
	0x039F3620 BR X3
	0x039F3624 STP D9, D8, [X31 - 0x40]!
	0x039F3628 STR X30, [X31 + 0x10]
	0x039F362C STP X22, X21, [X31 + 0x20]
	0x039F3630 STP X20, X19, [X31 + 0x30]
	0x039F3634 ADRP X21, 0x9EE000
	0x039F3638 ADRP X22, 0x760000
	0x039F363C LDRB W8, [X21 + 0xE8F]
	0x039F3640 LDR X22, [X22 + 0x930]
	0x039F3644 MOV W19, W1
	0x039F3648 MOV V8.16B, V1.16B
	0x039F364C MOV V9.16B, V0.16B
	0x039F3650 MOV X20, X0
	0x039F3654 TBNZ X8, 0x0, 0x39F366C
	0x039F3658 ADRP X0, 0x760000
	0x039F365C LDR X0, [X0 + 0x930]
	0x039F3660 BL 0x1C16CF4
	0x039F3664 MOVZ W8, 0x1
	0x039F3668 STRB W8, [X21 + 0xE8F]
	0x039F366C LDR X2, [X22]
	0x039F3670 AND W1, W19, 0x1
	0x039F3674 MOV X0, X20
	0x039F3678 LDP X20, X19, [X31 + 0x30]
	0x039F367C LDP X22, X21, [X31 + 0x20]
	0x039F3680 LDR X30, [X31 + 0x10]
	0x039F3684 MOV V0.16B, V9.16B
	0x039F3688 MOV V1.16B, V8.16B
	0x039F368C LDP D9, D8, [X31], #0x40
	0x039F3690 B 0x284CA08
	0x039F3694 FSUB S2, S2, S0
	0x039F3698 FSUB S3, S3, S1
	0x039F369C FMUL S2, S2, S4
	0x039F36A0 FMUL S3, S3, S4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x9EF000
	011 Move W8, [X20+3702]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x761000
	018 Move X0, [X0+2184]
	019 Call 0x1C17CF4
	020 Move X0, 0x761000
	021 Move X0, [X0+2216]
	022 Call 0x1C17CF4
	023 Move X0, 0x761000
	024 Move X0, [X0+2280]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3702], W8
	028 Compare X19, 0
	029 JumpIfEqual {87}
	030 Move W8, [X19+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X25, 0x761000
	033 Move X26, 0x761000
	034 Move X25, [X25+2216]
	035 Move X26, [X26+2280]
	036 Move W20, 1
	037 Move W24, 2
	038 Move X2, [X25]
	039 Move X0, X19
	040 Move W1, W20
	041 Call List`1<Object>.get_Item, X0, X1
	042 Move X21, X0
	043 Move W22, W24
	044 Move X2, [X25]
	045 Subtract W23, W22, 2
	046 Move X0, X19
	047 Move W1, W23
	048 Call List`1<Object>.get_Item, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {87}
	051 Compare X21, 0
	052 JumpIfEqual {87}
	053 Move V0, [X0+36]
	054 Move V1, [X21+36]
	055 Subtract W22, W22, 1
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 Move X2, [X25]
	058 Move X0, X19
	059 Move W1, W23
	060 Call List`1<Object>.get_Item, X0, X1
	061 Move X3, [X26]
	062 Move X2, X0
	063 Move X0, X19
	064 Move W1, W22
	065 Call List`1<Object>.set_Item, X0, X1, X2
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W22, W31
	068 Move X3, [X26]
	069 Move X0, X19
	070 Move W1, W22
	071 Move X2, X21
	072 Call List`1<Object>.set_Item, X0, X1, X2
	073 Move W8, [X19+24]
	074 Add W20, W20, 1
	075 Add W24, W24, 1
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X20, [X31+64]
	078 Move X19, [X31+72]
	079 Move X22, [X31+48]
	080 Move X21, [X31+56]
	081 Move X24, [X31+32]
	082 Move X23, [X31+40]
	083 Move X26, [X31+16]
	084 Move X25, [X31+24]
	085 Move X30, [X31+80]
	086 Return 
	087 Call 0x1C17F20

Method: System.Boolean IsVolumeRenderedByCamera(UnityEngine.Rendering.Volume volume, UnityEngine.Camera camera)

Disassembly:
	0x039F36A4 FADD S0, S0, S2
	0x039F36A8 FADD S1, S1, S3

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x039F36AC STP S0, S1, [X0 + 0x14]
	0x039F36B0 RET
	0x039F36B4 STP D9, D8, [X31 - 0x40]!
	0x039F36B8 STR X30, [X31 + 0x10]
	0x039F36BC STP X22, X21, [X31 + 0x20]
	0x039F36C0 STP X20, X19, [X31 + 0x30]
	0x039F36C4 ADRP X21, 0x9EE000
	0x039F36C8 ADRP X22, 0x760000
	0x039F36CC LDRB W8, [X21 + 0xE90]
	0x039F36D0 LDR X22, [X22 + 0x930]
	0x039F36D4 MOV W19, W1
	0x039F36D8 MOV V8.16B, V1.16B
	0x039F36DC MOV V9.16B, V0.16B
	0x039F36E0 MOV X20, X0
	0x039F36E4 TBNZ X8, 0x0, 0x39F36FC
	0x039F36E8 ADRP X0, 0x760000
	0x039F36EC LDR X0, [X0 + 0x930]
	0x039F36F0 BL 0x1C16CF4
	0x039F36F4 MOVZ W8, 0x1
	0x039F36F8 STRB W8, [X21 + 0xE90]
	0x039F36FC LDR X2, [X22]
	0x039F3700 AND W1, W19, 0x1
	0x039F3704 MOV X0, X20
	0x039F3708 LDP X20, X19, [X31 + 0x30]
	0x039F370C LDP X22, X21, [X31 + 0x20]
	0x039F3710 LDR X30, [X31 + 0x10]
	0x039F3714 MOV V0.16B, V9.16B
	0x039F3718 MOV V1.16B, V8.16B
	0x039F371C LDP D9, D8, [X31], #0x40
	0x039F3720 B 0x284CA08
	0x039F3724 STR D10, [X31 - 0x40]!
	0x039F3728 STP D9, D8, [X31 + 0x8]
	0x039F372C STR X30, [X31 + 0x18]
	0x039F3730 STP X22, X21, [X31 + 0x20]
	0x039F3734 STP X20, X19, [X31 + 0x30]
	0x039F3738 ADRP X21, 0x9EE000
	0x039F373C ADRP X22, 0x760000
	0x039F3740 LDRB W8, [X21 + 0xE91]
	0x039F3744 LDR X22, [X22 + 0x940]
	0x039F3748 MOV W19, W1
	0x039F374C MOV V8.16B, V2.16B
	0x039F3750 MOV V9.16B, V1.16B
	0x039F3754 MOV V10.16B, V0.16B
	0x039F3758 MOV X20, X0
	0x039F375C TBNZ X8, 0x0, 0x39F3774
	0x039F3760 ADRP X0, 0x760000
	0x039F3764 LDR X0, [X0 + 0x940]
	0x039F3768 BL 0x1C16CF4
	0x039F376C MOVZ W8, 0x1
	0x039F3770 STRB W8, [X21 + 0xE91]
	0x039F3774 LDR X2, [X22]
	0x039F3778 AND W1, W19, 0x1
	0x039F377C MOV X0, X20
	0x039F3780 MOV V1.16B, V9.16B
	0x039F3784 MOV V2.16B, V8.16B
	0x039F3788 LDP X20, X19, [X31 + 0x30]
	0x039F378C LDP X22, X21, [X31 + 0x20]
	0x039F3790 LDR X30, [X31 + 0x18]
	0x039F3794 LDP D9, D8, [X31 + 0x8]
	0x039F3798 MOV V0.16B, V10.16B
	0x039F379C LDR V10, [X31], #0x40
	0x039F37A0 B 0x284D328
	0x039F37A4 FSUB S3, S3, S0
	0x039F37A8 FSUB S4, S4, S1
	0x039F37AC FSUB S5, S5, S2
	0x039F37B0 FMUL S3, S3, S6
	0x039F37B4 FMUL S4, S4, S6
	0x039F37B8 FMUL S5, S5, S6
	0x039F37BC FADD S0, S0, S3
	0x039F37C0 FADD S1, S1, S4
	0x039F37C4 FADD S2, S2, S5
	0x039F37C8 STP S0, S1, [X0 + 0x14]
	0x039F37CC STR S2, [X0 + 0x1C]
	0x039F37D0 RET
	0x039F37D4 STR D10, [X31 - 0x40]!
	0x039F37D8 STP D9, D8, [X31 + 0x8]
	0x039F37DC STR X30, [X31 + 0x18]
	0x039F37E0 STP X22, X21, [X31 + 0x20]
	0x039F37E4 STP X20, X19, [X31 + 0x30]
	0x039F37E8 ADRP X21, 0x9EE000
	0x039F37EC ADRP X22, 0x760000
	0x039F37F0 LDRB W8, [X21 + 0xE92]
	0x039F37F4 LDR X22, [X22 + 0x940]
	0x039F37F8 MOV W19, W1
	0x039F37FC MOV V8.16B, V2.16B
	0x039F3800 MOV V9.16B, V1.16B
	0x039F3804 MOV V10.16B, V0.16B

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x9EF000
	011 Move X19, 0x761000
	012 Move W8, [X20+3703]
	013 Move X19, [X19+1928]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {44}
	018 Move X0, 0x707000
	019 Move X0, [X0+3040]
	020 Call 0x1C17CF4
	021 Move X0, 0x707000
	022 Move X0, [X0+3032]
	023 Call 0x1C17CF4
	024 Move X0, 0x761000
	025 Move X0, [X0+2288]
	026 Call 0x1C17CF4
	027 Move X0, 0x761000
	028 Move X0, [X0+2296]
	029 Call 0x1C17CF4
	030 Move X0, 0x761000
	031 Move X0, [X0+2304]
	032 Call 0x1C17CF4
	033 Move X0, 0x761000
	034 Move X0, [X0+2312]
	035 Call 0x1C17CF4
	036 Move X0, 0x761000
	037 Move X0, [X0+1928]
	038 Call 0x1C17CF4
	039 Move X0, 0x72B000
	040 Move X0, [X0+4032]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+3703], W8
	044 Move X0, [X19]
	045 Move X26, 0x761000
	046 Move X20, 0x761000
	047 Move X25, 0x761000
	048 Move X24, 0x761000
	049 Move X21, 0x72B000
	050 Move X23, 0x707000
	051 Move X22, 0x707000
	052 Move X26, [X26+2288]
	053 Move X20, [X20+2312]
	054 Move X25, [X25+2304]
	055 Move W8, [X0+224]
	056 Move X24, [X24+2296]
	057 Move X21, [X21+4032]
	058 Move X23, [X23+3032]
	059 Move X22, [X22+3040]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X19]
	064 Move X8, [X0+184]
	065 Move X0, [X26]
	066 Move X19, [X8]
	067 Call 0x1C17F10
	068 Move X2, [X20]
	069 Move X1, X19
	070 Move X3, X31
	071 Move X20, X0
	072 Call Func`1<Object>..ctor, X0, X1, X2
	073 Move X0, [X25]
	074 Call 0x1C17F10
	075 Move X2, [X24]
	076 Move X1, X20
	077 Move X19, X0
	078 Call 0x2EE97EC, X0, X1
	079 Move X8, [X21]
	080 Move X8, [X8+184]
	081 Move [X8], X19
	082 Move X0, [X23]
	083 Call 0x1C17F10
	084 Move X1, [X22]
	085 Move X19, X0
	086 Call Dictionary`2<Object, Object>..ctor, X0
	087 Move X8, [X21]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X26, [X31+16]
	093 Move X25, [X31+24]
	094 Move X8, [X8+184]
	095 Move [X8+8], X19
	096 Move X20, [X31+64]
	097 Move X19, [X31+72]
	098 Move X30, [X31+80]
	099 Return 

