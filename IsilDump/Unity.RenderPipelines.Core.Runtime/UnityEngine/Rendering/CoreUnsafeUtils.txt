Type: UnityEngine.Rendering.CoreUnsafeUtils

Method: System.Void CopyTo(System.Collections.Generic.List`1<T> list, System.Void* dest, System.Int32 count)

Disassembly:
	0x021A7D24 CBNZ X21, 0x21A7DBC
	0x021A7D28 LDR X8, [X19 + 0x38]
	0x021A7D2C LDR X0, [X8 + 0x8]
	0x021A7D30 LDRB W8, [X0 + 0x135]
	0x021A7D34 TBNZ X8, 0x0, 0x21A7D3C
	0x021A7D38 BL 0x1C5C684
	0x021A7D3C LDR W8, [X0 + 0xE0]
	0x021A7D40 CBNZ W8, 0x21A7D48
	0x021A7D44 BL 0x1C16DFC
	0x021A7D48 LDR X8, [X19 + 0x38]
	0x021A7D4C LDR X0, [X8 + 0x8]
	0x021A7D50 LDRB W8, [X0 + 0x135]
	0x021A7D54 TBNZ X8, 0x0, 0x21A7D5C
	0x021A7D58 BL 0x1C5C684
	0x021A7D5C ADRP X9, 0x1F56000
	0x021A7D60 LDR X8, [X0 + 0xB8]
	0x021A7D64 LDR X9, [X9 + 0x9B0]
	0x021A7D68 LDR X22, [X8]
	0x021A7D6C LDR X0, [X9]
	0x021A7D70 BL 0x1C16F10
	0x021A7D74 LDR X8, [X19 + 0x38]
	0x021A7D78 MOV X1, X22
	0x021A7D7C MOV X3, X31
	0x021A7D80 MOV X21, X0
	0x021A7D84 LDR X2, [X8 + 0x10]
	0x021A7D88 BL 0x2D2F428
	0x021A7D8C LDR X8, [X19 + 0x38]
	0x021A7D90 LDR X0, [X8 + 0x8]
	0x021A7D94 LDRB W8, [X0 + 0x135]
	0x021A7D98 TBNZ X8, 0x0, 0x21A7DA0
	0x021A7D9C BL 0x1C5C684
	0x021A7DA0 LDR X8, [X0 + 0xB8]
	0x021A7DA4 STR X21, [X8 + 0x8]
	0x021A7DA8 LDR X8, [X19 + 0x38]
	0x021A7DAC LDR X0, [X8 + 0x8]
	0x021A7DB0 LDRB W8, [X0 + 0x135]
	0x021A7DB4 TBNZ X8, 0x0, 0x21A7DBC
	0x021A7DB8 BL 0x1C5C684
	0x021A7DBC ADRP X8, 0x1F74000
	0x021A7DC0 LDR X8, [X8 + 0x900]
	0x021A7DC4 MOV X0, X20
	0x021A7DC8 MOV X1, X21
	0x021A7DCC LDP X20, X19, [X31 + 0x20]
	0x021A7DD0 LDR X2, [X8]
	0x021A7DD4 LDP X22, X21, [X31 + 0x10]
	0x021A7DD8 LDR X30, [X31], #0x30
	0x021A7DDC B 0x21DA490
	0x021A7DE0 STR X30, [X31 - 0x30]!
	0x021A7DE4 STP X22, X21, [X31 + 0x10]
	0x021A7DE8 STP X20, X19, [X31 + 0x20]
	0x021A7DEC LDR X8, [X0 + 0x38]
	0x021A7DF0 MOV X19, X0
	0x021A7DF4 CBNZ X8, 0x21A7E2C
	0x021A7DF8 ADRP X0, 0x1F74000
	0x021A7DFC LDR X0, [X0 + 0x8F8]
	0x021A7E00 BL 0x1C16CF4
	0x021A7E04 ADRP X0, 0x1F74000
	0x021A7E08 LDR X0, [X0 + 0x900]
	0x021A7E0C BL 0x1C16CF4
	0x021A7E10 ADRP X0, 0x1F56000
	0x021A7E14 LDR X0, [X0 + 0x9B0]
	0x021A7E18 BL 0x1C16CF4
	0x021A7E1C LDR X8, [X19 + 0x38]
	0x021A7E20 CBNZ X8, 0x21A7E2C
	0x021A7E24 MOV X0, X19
	0x021A7E28 BL 0x1C5C6E0
	0x021A7E2C ADRP X8, 0x1F74000
	0x021A7E30 LDR X8, [X8 + 0x8F8]
	0x021A7E34 LDR X0, [X8]
	0x021A7E38 LDR W8, [X0 + 0xE0]
	0x021A7E3C CBNZ W8, 0x21A7E44
	0x021A7E40 BL 0x1C16DFC
	0x021A7E44 MOV X0, X31
	0x021A7E48 BL 0x39E9678

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Add X29, X31, 0
	012 Subtract X31, X31, 48
	013 NotImplemented "Instruction MRS not yet implemented."
	014 Move X8, [X24+40]
	015 Move X19, X3
	016 Move W23, W2
	017 Move X20, X1
	018 Move [X29-8], X8
	019 Move X8, [X3+56]
	020 Move X21, X0
	021 Compare X8, 0
	022 JumpIfNotEqual {26}
	023 Move X0, X19
	024 Call 0x1C5D6E0
	025 Move X8, [X19+56]
	026 Move X9, [X8+24]
	027 Add X10, X31, 0
	028 Move W9, [X9+252]
	029 Add X9, X9, 15
	030 And X9, X9, 0x1FFFFFFFF
	031 Subtract X22, X10, X9
	032 Add X31, X22, 0
	033 Compare X21, 0
	034 JumpIfEqual {84}
	035 Move X1, [X8+8]
	036 Move X0, X21
	037 Move X8, [X1]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W25, W31
	043 Subtract X26, X29, 12
	044 Move X8, [X19+56]
	045 Subtract X3, X29, 40
	046 Move X2, X21
	047 Move X4, X22
	048 Move X1, [X8+16]
	049 Move X0, [X1]
	050 Move [X29-12], W25
	051 Move [X29-40], X26
	052 Move [X29-32], X22
	053 Move X8, [X1+16]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X8, [X19+56]
	056 Subtract X3, X29, 40
	057 Move X2, X31
	058 Move X4, X22
	059 Move X1, [X8+32]
	060 Move X0, [X1]
	061 Move [X29-12], W25
	062 Move [X29-40], X20
	063 Move [X29-32], X26
	064 Move [X29-24], X22
	065 Move X8, [X1+16]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Add W25, W25, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X8, [X24+40]
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add X31, X29, 0
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X22, [X31+48]
	076 Move X21, [X31+56]
	077 Move X24, [X31+32]
	078 Move X23, [X31+40]
	079 Move X26, [X31+16]
	080 Move X25, [X31+24]
	081 Move X29, [X31+80]
	082 Move X30, [X31+88]
	083 Return 
	084 Call 0x1C17F20
	085 Call 0x3EB2B20

Method: System.Void CopyTo(T[] list, System.Void* dest, System.Int32 count)

Disassembly:
	0x021A7CB0 MOV X0, X19
	0x021A7CB4 BL 0x1C5C6E0
	0x021A7CB8 ADRP X8, 0x1F74000
	0x021A7CBC LDR X8, [X8 + 0x8F8]
	0x021A7CC0 LDR X0, [X8]
	0x021A7CC4 LDR W8, [X0 + 0xE0]
	0x021A7CC8 CBNZ W8, 0x21A7CD0
	0x021A7CCC BL 0x1C16DFC
	0x021A7CD0 MOV X0, X31
	0x021A7CD4 BL 0x39E9678
	0x021A7CD8 LDR X8, [X19 + 0x38]
	0x021A7CDC MOV X20, X0
	0x021A7CE0 LDR X8, [X8 + 0x8]
	0x021A7CE4 LDRB W9, [X8 + 0x135]
	0x021A7CE8 TBNZ X9, 0x0, 0x21A7CF8
	0x021A7CEC MOV X0, X8
	0x021A7CF0 BL 0x1C5C684
	0x021A7CF4 MOV X8, X0
	0x021A7CF8 LDR W9, [X8 + 0xE0]
	0x021A7CFC CBNZ W9, 0x21A7D08
	0x021A7D00 MOV X0, X8
	0x021A7D04 BL 0x1C16DFC
	0x021A7D08 LDR X8, [X19 + 0x38]
	0x021A7D0C LDR X0, [X8 + 0x8]
	0x021A7D10 LDRB W8, [X0 + 0x135]
	0x021A7D14 TBNZ X8, 0x0, 0x21A7D1C
	0x021A7D18 BL 0x1C5C684
	0x021A7D1C LDR X8, [X0 + 0xB8]
	0x021A7D20 LDR X21, [X8 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+56]
	006 Move W21, W2
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X3
	012 Call 0x1C5D6E0
	013 Compare X20, 0
	014 JumpIfEqual {34}
	015 Move X8, [X20+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSEL not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 And X8, X8, 0
	020 Move W9, W9
	021 Add X10, X20, 32
	022 Compare X8, 0
	023 JumpIfEqual {33}
	024 Move W11, [X10+4]
	025 Subtract X9, X9, 1
	026 Subtract X8, X8, 1
	027 Move [X19+4], W11
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 
	033 Call 0x1C17F28
	034 Call 0x1C17F20

Method: System.Void CalculateRadixParams(System.Int32 radixBits, out System.Int32 bitStates)

Disassembly:
	0x0399EBA0 LDR X0, [X20]
	0x0399EBA4 LDR X8, [X0 + 0xB8]
	0x0399EBA8 FMOV S0, 1
	0x0399EBAC STRB W21, [X8 + 0x40]
	0x0399EBB0 LDR V1, [X19 + 0x1C]
	0x0399EBB4 STR S1, [X8 + 0x3C]
	0x0399EBB8 CBZ W21, 0x399EBD8
	0x0399EBBC LDR W8, [X0 + 0xE0]
	0x0399EBC0 MOV V0.16B, V1.16B
	0x0399EBC4 CBNZ W8, 0x399EBD8
	0x0399EBC8 BL 0x1C16DFC
	0x0399EBCC LDR X8, [X20]
	0x0399EBD0 LDR X8, [X8 + 0xB8]
	0x0399EBD4 LDR V0, [X8 + 0x3C]
	0x0399EBD8 MOV V1.16B, V0.16B
	0x0399EBDC MOV X0, X31
	0x0399EBE0 BL 0x3C104FC
	0x0399EBE4 MOVZ W0, 0x1
	0x0399EBE8 LDP X20, X19, [X31 + 0x10]
	0x0399EBEC LDP X30, X21, [X31], #0x20
	0x0399EBF0 RET
	0x0399EBF4 LDRB W11, [X19 + 0x21]
	0x0399EBF8 CBZ W11, 0x399EB5C
	0x0399EBFC LDRB W11, [X19 + 0x10]
	0x0399EC00 CBZ W11, 0x399EB5C
	0x0399EC04 LDRB W11, [X19 + 0x50]
	0x0399EC08 CMP W11, 0x1
	0x0399EC0C CSET W11, EQ
	0x0399EC10 B 0x399EB5C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, 1
	005 NotImplemented "Instruction LSLV not yet implemented."
	006 Move W9, 276
	007 And W31, W8, W9
	008 Move [X1], W8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x756000
	013 Move X0, [X0+2000]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x7B4000
	018 Move X0, [X0+640]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call Exception..ctor, X0, X1
	024 Move X0, 0x7B4000
	025 Move X0, [X0+648]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Int32 CalculateRadixSupportSize(System.Int32 bitStates, System.Int32 arrayLength)

Disassembly:
	0x0399EC14 LDRB W8, [X19 + 0x21]
	0x0399EC18 CBZ W8, 0x399EB90
	0x0399EC1C LDRB W8, [X19 + 0x10]

ISIL:
	001 Add W8, W0, W0
	002 Add W0, W8, W1
	003 Return X0

Method: System.Void CalculateRadixSortSupportArrays(System.Int32 bitStates, System.Int32 arrayLength, System.UInt32* supportArray, out System.UInt32* bucketIndices, out System.UInt32* bucketSizes, out System.UInt32* bucketPrefix, out System.UInt32* arrayOutput)

Disassembly:
	0x0399EC20 CBZ W8, 0x399EB90
	0x0399EC24 LDRB W8, [X19 + 0x50]
	0x0399EC28 CMP W8, 0x1
	0x0399EC2C CSET W21, EQ
	0x0399EC30 B 0x399EB94
	0x0399EC34 MOV W0, W31
	0x0399EC38 B 0x399EBE8
	0x0399EC3C LDRB W8, [X0 + 0x28]

ISIL:
	001 Add X8, X2, W0
	002 Move [X3], X2
	003 Move [X4], X8
	004 Add X8, X8, W0
	005 Move [X5], X8
	006 Add X8, X8, W0
	007 Move [X6], X8
	008 Return 

Method: System.Void MergeSort(System.UInt32* array, System.UInt32* support, System.Int32 length)

Disassembly:
	0x0399EC40 CBZ W8, 0x399EC4C
	0x0399EC44 MOV W0, W31
	0x0399EC48 RET
	0x0399EC4C LDRB W8, [X0 + 0x21]
	0x0399EC50 CBZ W8, 0x399EC44
	0x0399EC54 LDRB W8, [X0 + 0x10]
	0x0399EC58 CBZ W8, 0x399EC44
	0x0399EC5C LDRB W8, [X0 + 0x50]
	0x0399EC60 CMP W8, 0x1
	0x0399EC64 CSET W0, EQ
	0x0399EC68 RET
	0x0399EC6C SUB X31, X31, 0xA0
	0x0399EC70 STR X30, [X31 + 0x60]
	0x0399EC74 STP X24, X23, [X31 + 0x70]
	0x0399EC78 STP X22, X21, [X31 + 0x80]
	0x0399EC7C STP X20, X19, [X31 + 0x90]
	0x0399EC80 ADRP X21, 0xA43000
	0x0399EC84 ADRP X20, 0x755000
	0x0399EC88 LDRB W8, [X21 + 0xB6C]
	0x0399EC8C LDR X20, [X20 + 0x598]
	0x0399EC90 MOV X19, X0
	0x0399EC94 TBNZ X8, 0x0, 0x399ED48
	0x0399EC98 ADRP X0, 0x7B3000
	0x0399EC9C LDR X0, [X0 + 0x2E0]
	0x0399ECA0 BL 0x1C16CF4
	0x0399ECA4 ADRP X0, 0x7B3000
	0x0399ECA8 LDR X0, [X0 + 0x2E8]
	0x0399ECAC BL 0x1C16CF4
	0x0399ECB0 ADRP X0, 0x7B3000
	0x0399ECB4 LDR X0, [X0 + 0x2F0]
	0x0399ECB8 BL 0x1C16CF4
	0x0399ECBC ADRP X0, 0x7B3000
	0x0399ECC0 LDR X0, [X0 + 0x2F8]
	0x0399ECC4 BL 0x1C16CF4
	0x0399ECC8 ADRP X0, 0x7B3000
	0x0399ECCC LDR X0, [X0 + 0x300]
	0x0399ECD0 BL 0x1C16CF4
	0x0399ECD4 ADRP X0, 0x7B3000
	0x0399ECD8 LDR X0, [X0 + 0x308]
	0x0399ECDC BL 0x1C16CF4
	0x0399ECE0 ADRP X0, 0x7B3000
	0x0399ECE4 LDR X0, [X0 + 0x2D8]
	0x0399ECE8 BL 0x1C16CF4
	0x0399ECEC ADRP X0, 0x7B3000
	0x0399ECF0 LDR X0, [X0 + 0x310]
	0x0399ECF4 BL 0x1C16CF4
	0x0399ECF8 ADRP X0, 0x7B3000
	0x0399ECFC LDR X0, [X0 + 0x318]
	0x0399ED00 BL 0x1C16CF4
	0x0399ED04 ADRP X0, 0x7B3000
	0x0399ED08 LDR X0, [X0 + 0x320]
	0x0399ED0C BL 0x1C16CF4
	0x0399ED10 ADRP X0, 0x7B3000
	0x0399ED14 LDR X0, [X0 + 0x328]
	0x0399ED18 BL 0x1C16CF4
	0x0399ED1C ADRP X0, 0x7B3000
	0x0399ED20 LDR X0, [X0 + 0x330]
	0x0399ED24 BL 0x1C16CF4
	0x0399ED28 ADRP X0, 0x755000
	0x0399ED2C LDR X0, [X0 + 0x598]
	0x0399ED30 BL 0x1C16CF4
	0x0399ED34 ADRP X0, 0x785000
	0x0399ED38 LDR X0, [X0 + 0xD60]
	0x0399ED3C BL 0x1C16CF4
	0x0399ED40 MOVZ W8, 0x1
	0x0399ED44 STRB W8, [X21 + 0xB6C]
	0x0399ED48 LDR X0, [X20]
	0x0399ED4C MOVI V0.2D, 0x0
	0x0399ED50 STR X31, [X31 + 0x50]
	0x0399ED54 STP V0, V0, [X31 + 0x30]
	0x0399ED58 LDR W8, [X0 + 0xE0]
	0x0399ED5C CBNZ W8, 0x399ED64
	0x0399ED60 BL 0x1C16DFC
	0x0399ED64 MOV X0, X19
	0x0399ED68 MOV X1, X31
	0x0399ED6C MOV X2, X31
	0x0399ED70 BL 0x3C3883C

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, W8
	005 ShiftRight W9, 31
	006 And W9, W9, 0x3FFFFFFF
	007 Move W10, W31
	008 Move W14, W8
	009 Add W11, W14, W8
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W13, W14
	014 Move W15, W10
	015 Move W12, W10
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W13, W14
	018 Move W15, W10
	019 Move W12, W10
	020 Move W12, W10
	021 Move W15, W10
	022 Move W13, W14
	023 Move W16, [X0]
	024 Move W17, [X0]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 NotImplemented "Instruction CINC not yet implemented."
	028 NotImplemented "Instruction CINC not yet implemented."
	029 Move [X1], W16
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add W12, W12, 1
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X16, W15
	035 Move X14, W14
	036 Add X15, X0, W15
	037 Move W17, [X15+4]
	038 Add X16, X16, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X1], W17
	041 Add W12, W12, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X14, W13
	044 Move X15, W11
	045 Add X13, X0, W13
	046 Move W16, [X13+4]
	047 Add X14, X14, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move [X1], W16
	050 Add W12, W12, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X12, W10
	053 Add X13, X1, W10
	054 Add X14, X0, W10
	055 Move X11, W11
	056 Move W15, [X13+4]
	057 Add X12, X12, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move [X14+4], W15
	060 Add W10, W10, W9
	061 Add W14, W10, W8
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, W9
	065 Return 

Method: System.Void MergeSort(System.UInt32[] arr, System.Int32 sortSize, ref System.UInt32[] supportArray)

Disassembly:
	0x0399ED74 MOV W8, W0
	0x0399ED78 MOV X0, X31
	0x0399ED7C TBNZ X8, 0x0, 0x399EFF8
	0x0399ED80 STR X31, [X31 + 0x68]
	0x0399ED84 CBZ X19, 0x399F010
	0x0399ED88 MOV X0, X19
	0x0399ED8C MOV X1, X31
	0x0399ED90 BL 0x3C385F8
	0x0399ED94 ADRP X23, 0x7B3000
	0x0399ED98 LDR X23, [X23 + 0x2D8]
	0x0399ED9C MOV W20, W0
	0x0399EDA0 LDR X8, [X23]
	0x0399EDA4 LDR W9, [X8 + 0xE0]
	0x0399EDA8 CBNZ W9, 0x399EDB8
	0x0399EDAC MOV X0, X8
	0x0399EDB0 BL 0x1C16DFC
	0x0399EDB4 LDR X8, [X23]
	0x0399EDB8 LDR X8, [X8 + 0xB8]
	0x0399EDBC LDR X0, [X8 + 0x18]
	0x0399EDC0 CBZ X0, 0x399F010
	0x0399EDC4 ADRP X8, 0x7B3000
	0x0399EDC8 LDR X8, [X8 + 0x300]
	0x0399EDCC ADD X2, X31, 0x68
	0x0399EDD0 MOV W1, W20
	0x0399EDD4 LDR X3, [X8]
	0x0399EDD8 BL 0x2A150AC
	0x0399EDDC TBNZ X0, 0x0, 0x399EFF4
	0x0399EDE0 LDR X0, [X23]
	0x0399EDE4 LDR W8, [X0 + 0xE0]
	0x0399EDE8 CBNZ W8, 0x399EDF4
	0x0399EDEC BL 0x1C16DFC
	0x0399EDF0 LDR X0, [X23]
	0x0399EDF4 LDR X8, [X0 + 0xB8]
	0x0399EDF8 LDR X0, [X8 + 0x18]
	0x0399EDFC CBZ X0, 0x399F010
	0x0399EE00 ADRP X8, 0x7B3000
	0x0399EE04 LDR X8, [X8 + 0x308]
	0x0399EE08 LDR X1, [X8]
	0x0399EE0C BL 0x2A1345C
	0x0399EE10 CMP W0, 0x20
	0x0399EE14 B.LT 0x399EF24
	0x0399EE18 LDR X0, [X23]
	0x0399EE1C LDR W8, [X0 + 0xE0]
	0x0399EE20 CBNZ W8, 0x399EE2C
	0x0399EE24 BL 0x1C16DFC
	0x0399EE28 LDR X0, [X23]
	0x0399EE2C LDR X8, [X0 + 0xB8]
	0x0399EE30 LDR X0, [X8 + 0x18]
	0x0399EE34 CBZ X0, 0x399F010
	0x0399EE38 ADRP X8, 0x7B3000
	0x0399EE3C LDR X8, [X8 + 0x2E8]
	0x0399EE40 LDR X1, [X8]
	0x0399EE44 ADD X8, X31, 0x8
	0x0399EE48 BL 0x2A13AB4
	0x0399EE4C LDUR V0, [X31 + 0x8]
	0x0399EE50 LDUR V1, [X31 + 0x18]
	0x0399EE54 LDR X8, [X31 + 0x28]
	0x0399EE58 ADRP X22, 0x7B3000
	0x0399EE5C STP V0, V1, [X31 + 0x30]
	0x0399EE60 STR X8, [X31 + 0x50]
	0x0399EE64 LDR X22, [X22 + 0x318]
	0x0399EE68 LDR X1, [X22]
	0x0399EE6C ADD X0, X31, 0x30
	0x0399EE70 BL 0x2BF5330
	0x0399EE74 TBZ X0, 0x0, 0x399EF10
	0x0399EE78 LDR X24, [X31 + 0x48]
	0x0399EE7C CBZ X24, 0x399F014

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA44000
	007 Move W8, [X22+2913]
	008 Move X21, X2
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x756000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0x77F000
	019 Move X0, [X0+3336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2913], W8
	023 Compare X19, 0
	024 JumpIfEqual {80}
	025 Move X8, 0x756000
	026 Move X8, [X8+1448]
	027 Move X0, [X8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W1, [X19+24]
	033 Move W0, W20
	034 Move X2, X31
	035 Call Math.Min, X0, X1
	036 Compare W0, 0
	037 JumpIfEqual {57}
	038 Move W20, W0
	039 Move X0, [X21]
	040 Compare X0, 0
	041 JumpIfEqual {44}
	042 Move W8, [X0+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, 0x77F000
	045 Move X8, [X8+3336]
	046 Move W1, W20
	047 Move X0, [X8]
	048 Call 0x1C17D6C
	049 Move [X21], X0
	050 Move W8, [X19+24]
	051 Add X9, X19, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 Compare X0, 0
	055 JumpIfNotEqual {67}
	056 Move X1, X31
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return 
	063 Move W8, [X19+24]
	064 Add X9, X19, 32
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSEL not yet implemented."
	067 Move W9, [X0+24]
	068 Add X10, X0, 32
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CSEL not yet implemented."
	071 Move W2, W20
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X0, X8
	077 Move X30, [X31+48]
	078 Call CoreUnsafeUtils.MergeSort, X0, X1, X2
	079 Return 
	080 Call 0x1C17F20

Method: System.Void MergeSort(Unity.Collections.NativeArray`1<System.UInt32> arr, System.Int32 sortSize, ref Unity.Collections.NativeArray`1<System.UInt32> supportArray)

Disassembly:
	0x0399EE80 LDR X0, [X24 + 0x90]
	0x0399EE84 LDR X21, [X31 + 0x40]
	0x0399EE88 CBZ X0, 0x399EE9C
	0x0399EE8C LDR X8, [X0]
	0x0399EE90 LDP X9, X1, [X8 + 0x188]
	0x0399EE94 BLR X9
	0x0399EE98 TBNZ X0, 0x0, 0x399EE68
	0x0399EE9C ADRP X8, 0x7B3000
	0x0399EEA0 LDR X8, [X8 + 0x310]
	0x0399EEA4 ADD X0, X31, 0x30
	0x0399EEA8 LDR X1, [X8]
	0x0399EEAC BL 0x2BF5448
	0x0399EEB0 LDR X0, [X23]
	0x0399EEB4 STR X24, [X31 + 0x68]
	0x0399EEB8 LDR W8, [X0 + 0xE0]
	0x0399EEBC CBNZ W8, 0x399EEC8
	0x0399EEC0 BL 0x1C16DFC
	0x0399EEC4 LDR X0, [X23]
	0x0399EEC8 LDR X8, [X0 + 0xB8]
	0x0399EECC LDR X0, [X8 + 0x18]
	0x0399EED0 CBZ X0, 0x399F010
	0x0399EED4 ADRP X8, 0x7B3000
	0x0399EED8 LDR X8, [X8 + 0x2F8]
	0x0399EEDC MOV W1, W21
	0x0399EEE0 LDR X2, [X8]
	0x0399EEE4 BL 0x2A14A88
	0x0399EEE8 LDR X8, [X23]
	0x0399EEEC LDR X8, [X8 + 0xB8]
	0x0399EEF0 LDR X0, [X8 + 0x10]
	0x0399EEF4 CBZ X0, 0x399F010
	0x0399EEF8 ADRP X8, 0x7B3000
	0x0399EEFC LDR X8, [X8 + 0x2F0]
	0x0399EF00 MOV W1, W21
	0x0399EF04 LDR X2, [X8]
	0x0399EF08 BL 0x2A02894
	0x0399EF0C B 0x399EF24
	0x0399EF10 ADRP X8, 0x7B3000
	0x0399EF14 LDR X8, [X8 + 0x310]
	0x0399EF18 ADD X0, X31, 0x30
	0x0399EF1C LDR X1, [X8]
	0x0399EF20 BL 0x2BF5448
	0x0399EF24 LDR X8, [X31 + 0x68]
	0x0399EF28 CBZ X8, 0x399EF80
	0x0399EF2C LDR X0, [X8 + 0x90]
	0x0399EF30 MOVZ W9, 0x3F800000
	0x0399EF34 FMOV V0.2S, 0x0
	0x0399EF38 MOVZ W10, 0x100
	0x0399EF3C MOVZ W11, 0xBF800000
	0x0399EF40 STR W9, [X8 + 0x1C]
	0x0399EF44 MOVZ W9, 0x1
	0x0399EF48 STRH W31, [X8 + 0x10]
	0x0399EF4C STRH W31, [X8 + 0x28]
	0x0399EF50 STUR D0, [X8 + 0x14]
	0x0399EF54 STRH W10, [X8 + 0x20]
	0x0399EF58 STR W11, [X8 + 0x24]
	0x0399EF5C STUR D0, [X8 + 0x2C]
	0x0399EF60 STUR X31, [X8 + 0x34]
	0x0399EF64 STRB W9, [X8 + 0x44]
	0x0399EF68 CBZ X0, 0x399F010
	0x0399EF6C LDR X8, [X0]
	0x0399EF70 MOV X1, X19
	0x0399EF74 LDP X9, X2, [X8 + 0x1A8]
	0x0399EF78 BLR X9
	0x0399EF7C B 0x399EFBC
	0x0399EF80 LDR X0, [X23]
	0x0399EF84 BL 0x1C16F10
	0x0399EF88 MOV X21, X0
	0x0399EF8C BL 0x399F094
	0x0399EF90 ADRP X8, 0x785000
	0x0399EF94 LDR X8, [X8 + 0xD60]
	0x0399EF98 STR X21, [X31 + 0x68]
	0x0399EF9C LDR X0, [X8]
	0x0399EFA0 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xA44000
	009 Move X23, 0x756000
	010 Move W8, [X24+2914]
	011 Move X23, [X23+1448]
	012 Move X19, X3
	013 Move W22, W2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x7B4000
	021 Move X0, [X0+656]
	022 Call 0x1C17CF4
	023 Move X0, 0x756000
	024 Move X0, [X0+1448]
	025 Call 0x1C17CF4
	026 Move X0, 0x7B4000
	027 Move X0, [X0+664]
	028 Call 0x1C17CF4
	029 Move X0, 0x7B4000
	030 Move X0, [X0+672]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X24+2914], W8
	034 Move X0, [X23]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move W0, W22
	040 Move W1, W20
	041 Move X2, X31
	042 Call Math.Min, X0, X1
	043 Compare X21, 0
	044 JumpIfEqual {83}
	045 Move W22, W0
	046 Compare W0, 0
	047 JumpIfEqual {83}
	048 Move X8, [X19]
	049 Compare X8, 0
	050 JumpIfEqual {53}
	051 Move W8, [X19+8]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, 0x7B4000
	054 Move X8, [X8+656]
	055 Move X0, X19
	056 Move W1, W20
	057 Move X2, [X8]
	058 Call ArrayExtensions.ResizeArray, X0, X1
	059 Move X23, 0x7B4000
	060 Move X23, [X23+664]
	061 Move X0, X21
	062 Move X1, X20
	063 Move X2, [X23]
	064 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	065 Move X8, [X19]
	066 Move X1, [X19+8]
	067 Move X2, [X23]
	068 Move X19, X0
	069 Move X0, X8
	070 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	071 Move X1, X0
	072 Move X0, X19
	073 Move W2, W22
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Call CoreUnsafeUtils.MergeSort, X0, X1, X2
	082 Return 
	083 Move X20, [X31+48]
	084 Move X19, [X31+56]
	085 Move X22, [X31+32]
	086 Move X21, [X31+40]
	087 Move X24, [X31+16]
	088 Move X23, [X31+24]
	089 Move X30, [X31+64]
	090 Return 

Method: System.Void InsertionSort(System.UInt32* arr, System.Int32 length)

Disassembly:
	0x0399EFA4 MOV X1, X19
	0x0399EFA8 MOV X2, X31
	0x0399EFAC MOV X22, X0
	0x0399EFB0 BL 0x33D571C
	0x0399EFB4 CBZ X21, 0x399F010
	0x0399EFB8 STR X22, [X21 + 0x90]
	0x0399EFBC LDR X0, [X23]
	0x0399EFC0 LDR W8, [X0 + 0xE0]
	0x0399EFC4 CBNZ W8, 0x399EFD0
	0x0399EFC8 BL 0x1C16DFC
	0x0399EFCC LDR X0, [X23]
	0x0399EFD0 LDR X8, [X0 + 0xB8]
	0x0399EFD4 LDR X0, [X8 + 0x18]
	0x0399EFD8 CBZ X0, 0x399F010
	0x0399EFDC ADRP X8, 0x7B3000
	0x0399EFE0 LDR X2, [X31 + 0x68]
	0x0399EFE4 LDR X8, [X8 + 0x2E0]
	0x0399EFE8 MOV W1, W20
	0x0399EFEC LDR X3, [X8]
	0x0399EFF0 BL 0x2A1368C
	0x0399EFF4 LDR X0, [X31 + 0x68]
	0x0399EFF8 LDP X20, X19, [X31 + 0x90]
	0x0399EFFC LDP X22, X21, [X31 + 0x80]
	0x0399F000 LDP X24, X23, [X31 + 0x70]
	0x0399F004 LDR X30, [X31 + 0x60]
	0x0399F008 ADD X31, X31, 0xA0
	0x0399F00C RET

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X31
	003 Move X9, X31
	004 Move W10, W1
	005 Subtract X11, X0, 4
	006 Move W12, 1
	007 Move X13, X12
	008 Move X14, X8
	009 Compare W9, 0
	010 JumpIfEqual {20}
	011 And X15, X14, 0
	012 Move W16, [X15]
	013 Move W17, [X11]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Subtract X13, X13, 1
	016 Move [X0], W17
	017 Move [X14], W16
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Subtract X14, X14, 4
	020 Add X9, X9, 1
	021 Add X8, X8, 4
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X12, X12, 1
	024 Return 

Method: System.Void InsertionSort(System.UInt32[] arr, System.Int32 sortSize)

Disassembly:
	0x0399F010 BL 0x1C16F20
	0x0399F014 BL 0x1C16F20
	0x0399F018 B 0x399F020
	0x0399F01C B 0x399F020
	0x0399F020 MOV X21, X0
	0x0399F024 CMP W1, 0x1
	0x0399F028 B.NE 0x399F05C
	0x0399F02C MOV X0, X21
	0x0399F030 BL 0x3EB1AD0
	0x0399F034 LDR X22, [X0]
	0x0399F038 BL 0x3EB1AE0
	0x0399F03C ADRP X8, 0x7B2000
	0x0399F040 LDR X8, [X8 + 0x310]
	0x0399F044 ADD X0, X31, 0x30
	0x0399F048 LDR X1, [X8]
	0x0399F04C BL 0x2BF5448
	0x0399F050 CBZ X22, 0x399EF24
	0x0399F054 MOV X0, X22
	0x0399F058 BL 0x1C16F18
	0x0399F05C MOV X22, X31
	0x0399F060 B 0x399F068
	0x0399F064 MOV X21, X0
	0x0399F068 ADRP X8, 0x7B2000
	0x0399F06C LDR X8, [X8 + 0x310]
	0x0399F070 LDR X1, [X8]
	0x0399F074 ADD X0, X31, 0x30
	0x0399F078 BL 0x2BF5448
	0x0399F07C CBNZ X22, 0x399F088
	0x0399F080 MOV X0, X21
	0x0399F084 BL 0x1D2C690
	0x0399F088 MOV X0, X22
	0x0399F08C BL 0x1C16F18
	0x0399F090 BL 0x1990590
	0x0399F094 STR X30, [X31 - 0x20]!
	0x0399F098 STP X20, X19, [X31 + 0x10]
	0x0399F09C MOVZ W8, 0x3F000000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA43000
	006 Move W8, [X21+2915]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x755000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2915], W8
	018 Compare X19, 0
	019 JumpIfEqual {49}
	020 Move X8, 0x755000
	021 Move X8, [X8+1448]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move W0, [X19+24]
	028 Move W1, W20
	029 Move X2, X31
	030 Call Math.Min, X0, X1
	031 Compare W0, 0
	032 JumpIfEqual {44}
	033 Move W8, [X19+24]
	034 Add X9, X19, 32
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move W1, W0
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call CoreUnsafeUtils.InsertionSort, X0, X1
	043 Return 
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 
	049 Call 0x1C17F20

Method: System.Void InsertionSort(Unity.Collections.NativeArray`1<System.UInt32> arr, System.Int32 sortSize)

Disassembly:
	0x0399F0A0 STR W8, [X0 + 0x64]
	0x0399F0A4 ADRP X8, 0xFFFFFFFFFD14F000
	0x0399F0A8 LDR V0, [X8 + 0x240]
	0x0399F0AC MOVZ X8, 0x42C80000
	0x0399F0B0 MOVK X8, 0x101
	0x0399F0B4 STUR X8, [X0 + 0x74]
	0x0399F0B8 ADRP X8, 0xFFFFFFFFFD14D000
	0x0399F0BC STUR D0, [X0 + 0x6C]
	0x0399F0C0 LDR V0, [X8 + 0x30]
	0x0399F0C4 MOVZ W8, 0x42480000
	0x0399F0C8 MOVZ W20, 0x1
	0x0399F0CC STR W8, [X0 + 0x8C]
	0x0399F0D0 MOVZ W8, 0x2
	0x0399F0D4 MOV X1, X31
	0x0399F0D8 MOV X19, X0
	0x0399F0DC STR W31, [X0 + 0x5C]
	0x0399F0E0 STUR X31, [X0 + 0x54]
	0x0399F0E4 STURH W31, [X0 + 0x61]
	0x0399F0E8 STRB W31, [X0 + 0x63]
	0x0399F0EC STRB W31, [X0 + 0x68]
	0x0399F0F0 STURH W31, [X0 + 0x69]
	0x0399F0F4 STRB W31, [X0 + 0x6B]
	0x0399F0F8 STRB W20, [X0 + 0x60]
	0x0399F0FC STUR V0, [X0 + 0x7C]
	0x0399F100 STR W8, [X0 + 0x98]
	0x0399F104 BL 0x33BDD8C
	0x0399F108 FMOV V0.2S, 0x0
	0x0399F10C MOVZ W8, 0x3F800000
	0x0399F110 MOVZ W9, 0x100
	0x0399F114 MOVZ W10, 0xBF800000
	0x0399F118 STRH W31, [X19 + 0x10]
	0x0399F11C STRH W31, [X19 + 0x28]
	0x0399F120 STUR X31, [X19 + 0x34]
	0x0399F124 STUR D0, [X19 + 0x14]
	0x0399F128 STR W8, [X19 + 0x1C]
	0x0399F12C STRH W9, [X19 + 0x20]
	0x0399F130 STR W10, [X19 + 0x24]
	0x0399F134 STUR D0, [X19 + 0x2C]
	0x0399F138 STRB W20, [X19 + 0x44]
	0x0399F13C LDP X20, X19, [X31 + 0x10]
	0x0399F140 LDR X30, [X31], #0x20
	0x0399F144 RET
	0x0399F148 STR W1, [X0 + 0x98]
	0x0399F14C RET
	0x0399F150 LDR W0, [X0 + 0x98]
	0x0399F154 RET
	0x0399F158 STR X30, [X31 - 0x20]!
	0x0399F15C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xA43000
	008 Move X22, 0x755000
	009 Move W8, [X23+2916]
	010 Move X22, [X22+1448]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x755000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0x7B3000
	022 Move X0, [X0+664]
	023 Call 0x1C17CF4
	024 Move X0, 0x7B3000
	025 Move X0, [X0+672]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+2916], W8
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move W0, W19
	035 Move W1, W21
	036 Move X2, X31
	037 Call Math.Min, X0, X1
	038 Compare X20, 0
	039 JumpIfEqual {58}
	040 Move W21, W0
	041 Compare W0, 0
	042 JumpIfEqual {58}
	043 Move X8, 0x7B3000
	044 Move X8, [X8+664]
	045 Move X0, X20
	046 Move X1, X19
	047 Move X2, [X8]
	048 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	049 Move W1, W21
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Call CoreUnsafeUtils.InsertionSort, X0, X1
	057 Return 
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Move X23, [X31+56]
	064 Return 

Method: System.Void RadixSort(System.UInt32* array, System.UInt32* support, System.Int32 radixBits, System.Int32 bitStates, System.Int32 length)

Disassembly:
	0x0399F160 ADRP X20, 0xA42000
	0x0399F164 ADRP X19, 0x7B2000
	0x0399F168 LDRB W8, [X20 + 0xB6D]
	0x0399F16C LDR X19, [X19 + 0x2D8]
	0x0399F170 TBNZ X8, 0x0, 0x399F188
	0x0399F174 ADRP X0, 0x7B2000
	0x0399F178 LDR X0, [X0 + 0x2D8]
	0x0399F17C BL 0x1C16CF4
	0x0399F180 MOVZ W8, 0x1
	0x0399F184 STRB W8, [X20 + 0xB6D]
	0x0399F188 LDR X0, [X19]
	0x0399F18C LDR W8, [X0 + 0xE0]
	0x0399F190 CBNZ W8, 0x399F19C
	0x0399F194 BL 0x1C16DFC
	0x0399F198 LDR X0, [X19]
	0x0399F19C LDR X8, [X0 + 0xB8]
	0x0399F1A0 LDP X20, X19, [X31 + 0x10]
	0x0399F1A4 LDR X0, [X8 + 0x30]
	0x0399F1A8 LDR X30, [X31], #0x20
	0x0399F1AC RET
	0x0399F1B0 MOVZ W9, 0x1
	0x0399F1B4 STRB W9, [X8 + 0xC]
	0x0399F1B8 ADRP X9, 0xFFFFFFFFFD14F000
	0x0399F1BC LDR V0, [X9 + 0x240]
	0x0399F1C0 MOVZ W9, 0x3F000000
	0x0399F1C4 STR W9, [X8 + 0x10]
	0x0399F1C8 ADRP X9, 0xFFFFFFFFFD14D000
	0x0399F1CC STR D0, [X8 + 0x18]
	0x0399F1D0 LDR V0, [X9 + 0x30]
	0x0399F1D4 MOVZ X9, 0x42C80000
	0x0399F1D8 MOVK X9, 0x101
	0x0399F1DC STR X9, [X8 + 0x20]
	0x0399F1E0 MOVZ W9, 0x42480000
	0x0399F1E4 STR W31, [X8 + 0x8]
	0x0399F1E8 STR X31, [X8]
	0x0399F1EC STURH W31, [X8 + 0xD]
	0x0399F1F0 STRB W31, [X8 + 0xF]
	0x0399F1F4 STRB W31, [X8 + 0x14]
	0x0399F1F8 STURH W31, [X8 + 0x15]
	0x0399F1FC STRB W31, [X8 + 0x17]
	0x0399F200 STUR V0, [X8 + 0x28]
	0x0399F204 STR W9, [X8 + 0x38]
	0x0399F208 RET
	0x0399F20C FMOV S0, 1
	0x0399F210 RET
	0x0399F214 SUB X31, X31, 0x40
	0x0399F218 STR D8, [X31 + 0x10]
	0x0399F21C STR X30, [X31 + 0x18]
	0x0399F220 STP X22, X21, [X31 + 0x20]
	0x0399F224 STP X20, X19, [X31 + 0x30]
	0x0399F228 ADRP X21, 0xA42000
	0x0399F22C LDRB W8, [X21 + 0xB6E]
	0x0399F230 MOV X19, X1
	0x0399F234 MOV X20, X0
	0x0399F238 TBNZ X8, 0x0, 0x399F268
	0x0399F23C ADRP X0, 0x754000
	0x0399F240 LDR X0, [X0 + 0x970]
	0x0399F244 BL 0x1C16CF4
	0x0399F248 ADRP X0, 0x7B2000
	0x0399F24C LDR X0, [X0 + 0x338]
	0x0399F250 BL 0x1C16CF4
	0x0399F254 ADRP X0, 0x7B2000
	0x0399F258 LDR X0, [X0 + 0x2D8]
	0x0399F25C BL 0x1C16CF4
	0x0399F260 MOVZ W8, 0x1
	0x0399F264 STRB W8, [X21 + 0xB6E]
	0x0399F268 STRB W31, [X31 + 0xC]
	0x0399F26C LDRB W9, [X19]
	0x0399F270 MOV W8, W31
	0x0399F274 TBZ X9, 0x0, 0x399F2AC
	0x0399F278 ADRP X8, 0x754000
	0x0399F27C LDR X8, [X8 + 0x970]
	0x0399F280 LDR X0, [X8]
	0x0399F284 LDR W8, [X0 + 0xE0]
	0x0399F288 CBNZ W8, 0x399F290
	0x0399F28C BL 0x1C16DFC
	0x0399F290 MOV X0, X31
	0x0399F294 BL 0x3C018E4
	0x0399F298 TBZ X0, 0x0, 0x399F2A4
	0x0399F29C MOVZ W8, 0x1
	0x0399F2A0 B 0x399F2AC
	0x0399F2A4 LDRB W8, [X19 + 0x26]
	0x0399F2A8 AND W8, W8, 0x1
	0x0399F2AC CBZ X20, 0x399F3CC
	0x0399F2B0 FMOV S0, 1
	0x0399F2B4 STRB W8, [X20 + 0x10]
	0x0399F2B8 CBZ W8, 0x399F3A0
	0x0399F2BC LDRB W8, [X19 + 0x24]
	0x0399F2C0 MOVZ W9, 0x42C80000
	0x0399F2C4 FMOV S2, W9
	0x0399F2C8 FMOV S1, 1
	0x0399F2CC STRB W8, [X20 + 0x50]
	0x0399F2D0 LDRB W8, [X19 + 0x1]
	0x0399F2D4 ADRP X21, 0x7B2000

ISIL:
	001 Move [X31-48], X23
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W8, 32
	007 NotImplemented "Instruction SDIV not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X13, -48971776
	010 Add W11, W3, W3
	011 Move W17, 2
	012 Move V0, [X13+121]
	013 Add X10, X1, W3
	014 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	015 Subtract X17, X11, 1
	016 Subtract W16, W3, 1
	017 NotImplemented "Instruction SBFM not yet implemented."
	018 Move W15, W3
	019 Add X13, X10, W3
	020 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	021 Add X17, X11, 1
	022 Move W9, W31
	023 Move W12, W4
	024 Add X5, X13, X14
	025 And X14, X17, 0
	026 Subtract X15, X15, 1
	027 Move W16, W16
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X17, X5
	030 Move X5, X14
	031 Move X6, X1
	032 Move V3, V0
	033 NotImplemented "Instruction INVALID not yet implemented."
	034 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	035 Move W7, S4
	036 Move TEMP, X7
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {41}
	040 Move [X6], W31
	041 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	042 Move TEMP, X7
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 Invalid "Jump target not found in method."
	046 Move [X6+4], W31
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 Subtract X5, X5, 2
	049 Add X6, X6, 8
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Multiply W5, W9, W2
	052 And X6, X5, 31
	053 Move X7, X12
	054 Move X19, X0
	055 Move W20, [X19+4]
	056 Subtract X7, X7, 1
	057 NotImplemented "Instruction LSRV not yet implemented."
	058 And X20, X20, X16
	059 Move W21, [X10]
	060 Add W21, W21, 1
	061 Move [X10], W21
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X6, X15
	064 Move X7, X13
	065 Move X19, X10
	066 Move W20, [X7]
	067 Move W21, [X19+4]
	068 Subtract X6, X6, 1
	069 Add W20, W21, W20
	070 Move [X7+4], W20
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X6, X12
	073 And X5, X5, 31
	074 Move X7, X0
	075 Move W19, [X7+4]
	076 Subtract X6, X6, 1
	077 NotImplemented "Instruction LSRV not yet implemented."
	078 And X20, X20, X16
	079 Move W21, [X1]
	080 Move W22, [X13]
	081 Add W23, W21, 1
	082 Add W21, W21, W22
	083 Move [X1], W23
	084 Move [X17], W19
	085 Add W9, W9, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X5, X0
	088 Move X0, X17
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X23, [X31+48]
	094 Return 

Method: System.Void RadixSort(System.UInt32[] arr, System.Int32 sortSize, ref System.UInt32[] supportArray, System.Int32 radixBits = 8)

Disassembly:
	0x0399F2D8 AND W8, W8, 0x1
	0x0399F2DC STRB W8, [X20 + 0x11]
	0x0399F2E0 LDR V0, [X19 + 0x20]
	0x0399F2E4 ADRP X8, 0xFFFFFFFFFD14B000
	0x0399F2E8 LDR V8, [X8 + 0xBC]
	0x0399F2EC FDIV S0, S0, S2
	0x0399F2F0 FMIN S1, S0, S1
	0x0399F2F4 FCMP S0, S8
	0x0399F2F8 FCSEL S0, S1, S8, PL
	0x0399F2FC STR S0, [X20 + 0x14]
	0x0399F300 LDR V1, [X19 + 0x1C]
	0x0399F304 FDIV S1, S1, S2
	0x0399F308 FMOV S2, 3
	0x0399F30C FMIN S2, S1, S2
	0x0399F310 FCMP S1, S0
	0x0399F314 FCSEL S0, S2, S0, PL
	0x0399F318 STR S0, [X20 + 0x18]
	0x0399F31C LDR X21, [X21 + 0x2D8]
	0x0399F320 LDR X0, [X21]
	0x0399F324 LDR W8, [X0 + 0xE0]
	0x0399F328 CBNZ W8, 0x399F334
	0x0399F32C BL 0x1C16DFC
	0x0399F330 LDR X0, [X21]
	0x0399F334 LDR X8, [X0 + 0xB8]
	0x0399F338 LDR X0, [X8 + 0x10]
	0x0399F33C CBZ X0, 0x399F3CC
	0x0399F340 LDR W1, [X8 + 0x28]
	0x0399F344 ADRP X8, 0x7B2000
	0x0399F348 LDR X8, [X8 + 0x338]
	0x0399F34C ADD X2, X31, 0xC
	0x0399F350 ADD X21, X19, 0x25
	0x0399F354 ADD X22, X31, 0xC
	0x0399F358 LDR X3, [X8]
	0x0399F35C BL 0x2A02E6C
	0x0399F360 ANDS W31, W0, 0x1
	0x0399F364 CSEL X8, X22, X21, NE
	0x0399F368 LDRB W8, [X8]
	0x0399F36C STRB W8, [X20 + 0x44]
	0x0399F370 LDRB W8, [X19 + 0x26]
	0x0399F374 AND W9, W8, 0x1
	0x0399F378 STRB W9, [X20 + 0x20]
	0x0399F37C TBZ X8, 0x0, 0x399F3A4
	0x0399F380 LDR V0, [X19 + 0x28]
	0x0399F384 MOVZ W8, 0x42C80000
	0x0399F388 FMOV S2, W8
	0x0399F38C FMOV S1, 1.5
	0x0399F390 FDIV S0, S0, S2
	0x0399F394 FMIN S1, S0, S1
	0x0399F398 FCMP S0, S8
	0x0399F39C FCSEL S0, S1, S8, PL
	0x0399F3A0 STR S0, [X20 + 0x1C]
	0x0399F3A4 ADD X0, X20, 0x54
	0x0399F3A8 MOVZ W2, 0x3C
	0x0399F3AC MOV X1, X19
	0x0399F3B0 BL 0x3EB1B30
	0x0399F3B4 LDP X20, X19, [X31 + 0x30]
	0x0399F3B8 LDP X22, X21, [X31 + 0x20]
	0x0399F3BC LDR X30, [X31 + 0x18]
	0x0399F3C0 LDR V8, [X31 + 0x10]
	0x0399F3C4 ADD X31, X31, 0x40
	0x0399F3C8 RET
	0x0399F3CC BL 0x1C16F20
	0x0399F3D0 STR D8, [X31 - 0x10]!
	0x0399F3D4 STR X30, [X31 + 0x8]
	0x0399F3D8 LDRB W8, [X0 + 0x10]
	0x0399F3DC FMOV S1, 1
	0x0399F3E0 CBZ W8, 0x399F404
	0x0399F3E4 LDRB W8, [X0 + 0x21]
	0x0399F3E8 FMOV S8, 1
	0x0399F3EC CBZ W8, 0x399F408
	0x0399F3F0 LDRB W8, [X0 + 0x28]
	0x0399F3F4 LDR V1, [X0 + 0x1C]
	0x0399F3F8 CBZ W8, 0x399F418
	0x0399F3FC MOV V8.16B, V1.16B
	0x0399F400 B 0x399F408

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xA43000
	009 Move W8, [X23+2917]
	010 Move W19, W3
	011 Move X22, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x755000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0x77E000
	022 Move X0, [X0+3336]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2917], W8
	026 Move [X31+12], W31
	027 Compare X21, 0
	028 JumpIfEqual {87}
	029 Move X8, 0x755000
	030 Move X8, [X8+1448]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W1, [X21+24]
	037 Move W0, W20
	038 Move X2, X31
	039 Call Math.Min, X0, X1
	040 Move W20, W0
	041 Add X1, X31, 12
	042 Move W0, W19
	043 Call CoreUnsafeUtils.CalculateRadixParams, X0, X1
	044 Compare W20, 0
	045 JumpIfEqual {79}
	046 Move W23, [X31+12]
	047 Move X0, [X22]
	048 Add W8, W23, W23
	049 Add W1, W8, W20
	050 Compare X0, 0
	051 JumpIfEqual {54}
	052 Move W8, [X0+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X8, 0x77E000
	055 Move X8, [X8+3336]
	056 Move X0, [X8]
	057 Call 0x1C17D6C
	058 Move [X22], X0
	059 Move W8, [X21+24]
	060 Add X9, X21, 32
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSEL not yet implemented."
	063 Compare X0, 0
	064 JumpIfNotEqual {70}
	065 Move X1, X31
	066 Move W8, [X21+24]
	067 Add X9, X21, 32
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 Move W9, [X0+24]
	071 Add X10, X0, 32
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSEL not yet implemented."
	074 Move X0, X8
	075 Move W2, W19
	076 Move W3, W23
	077 Move W4, W20
	078 Call CoreUnsafeUtils.RadixSort, X0, X1, X2, X3, X4
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X30, [X31+16]
	084 Move X23, [X31+24]
	085 Add X31, X31, 64
	086 Return 
	087 Call 0x1C17F20

Method: System.Void RadixSort(Unity.Collections.NativeArray`1<System.UInt32> array, System.Int32 sortSize, ref Unity.Collections.NativeArray`1<System.UInt32> supportArray, System.Int32 radixBits = 8)

Disassembly:
	0x0399F404 FMOV S8, 1
	0x0399F408 LDR X30, [X31 + 0x8]
	0x0399F40C MOV V0.16B, V8.16B
	0x0399F410 LDR V8, [X31], #0x10
	0x0399F414 RET
	0x0399F418 LDRB W8, [X0 + 0x50]
	0x0399F41C MOV V8.16B, V1.16B
	0x0399F420 CMP W8, 0x1
	0x0399F424 B.NE 0x399F408
	0x0399F428 MOV X0, X31
	0x0399F42C BL 0x3C104AC
	0x0399F430 MOV X0, X31
	0x0399F434 MOV V8.16B, V0.16B
	0x0399F438 BL 0x3C104D4
	0x0399F43C MOV V1.16B, V0.16B
	0x0399F440 B 0x399F408
	0x0399F444 STP X30, X23, [X31 - 0x30]!
	0x0399F448 STP X22, X21, [X31 + 0x10]
	0x0399F44C STP X20, X19, [X31 + 0x20]
	0x0399F450 ADRP X23, 0xA42000
	0x0399F454 LDRB W8, [X23 + 0xB6F]
	0x0399F458 MOV W21, W3
	0x0399F45C MOV X19, X2
	0x0399F460 MOV X20, X1
	0x0399F464 MOV X22, X0
	0x0399F468 TBNZ X8, 0x0, 0x399F480
	0x0399F46C ADRP X0, 0x754000
	0x0399F470 LDR X0, [X0 + 0x5A8]
	0x0399F474 BL 0x1C16CF4
	0x0399F478 MOVZ W8, 0x1
	0x0399F47C STRB W8, [X23 + 0xB6F]
	0x0399F480 LDRB W8, [X22 + 0x11]
	0x0399F484 CBNZ W8, 0x399F490
	0x0399F488 FMOV S0, W31
	0x0399F48C TBZ X21, 0x0, 0x399F4C4
	0x0399F490 ADRP X8, 0x754000
	0x0399F494 LDR X8, [X8 + 0x5A8]
	0x0399F498 LDR X0, [X8]
	0x0399F49C LDR W8, [X0 + 0xE0]
	0x0399F4A0 CBNZ W8, 0x399F4A8
	0x0399F4A4 BL 0x1C16DFC
	0x0399F4A8 SCVTF D0, W20
	0x0399F4AC SCVTF D1, W19
	0x0399F4B0 FDIV D0, D0, D1
	0x0399F4B4 FMOV D1, 2
	0x0399F4B8 MOV X0, X31
	0x0399F4BC BL 0x337ECD0
	0x00000000 INVALID
	0x0399F4C4 LDP X20, X19, [X31 + 0x20]
	0x0399F4C8 LDP X22, X21, [X31 + 0x10]
	0x0399F4CC LDP X30, X23, [X31], #0x30
	0x0399F4D0 RET
	0x0399F4D4 STR X30, [X31 - 0x30]!
	0x0399F4D8 STP X22, X21, [X31 + 0x10]
	0x0399F4DC STP X20, X19, [X31 + 0x20]
	0x0399F4E0 ADRP X22, 0xA42000
	0x0399F4E4 ADRP X21, 0x7B2000
	0x0399F4E8 LDRB W8, [X22 + 0xB70]
	0x0399F4EC LDR X21, [X21 + 0x2D8]
	0x0399F4F0 MOV W20, W1
	0x0399F4F4 MOV X19, X0
	0x0399F4F8 TBNZ X8, 0x0, 0x399F510
	0x0399F4FC ADRP X0, 0x7B2000
	0x0399F500 LDR X0, [X0 + 0x2D8]
	0x0399F504 BL 0x1C16CF4
	0x0399F508 MOVZ W8, 0x1
	0x0399F50C STRB W8, [X22 + 0xB70]
	0x0399F510 LDR X0, [X21]
	0x0399F514 LDR W8, [X0 + 0xE0]
	0x0399F518 CBNZ W8, 0x399F524
	0x0399F51C BL 0x1C16DFC
	0x0399F520 LDR X0, [X21]
	0x0399F524 LDR X8, [X0 + 0xB8]
	0x0399F528 LDR X8, [X8 + 0x8]
	0x0399F52C CBZ X8, 0x399F550
	0x0399F530 LDR W9, [X8 + 0x18]
	0x0399F534 CBZ W9, 0x399F554
	0x0399F538 MOV W9, W20
	0x0399F53C STP X9, X19, [X8 + 0x20]
	0x0399F540 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xA43000
	011 Move X24, 0x755000
	012 Move W8, [X25+2918]
	013 Move X24, [X24+1448]
	014 Move W19, W4
	015 Move X20, X3
	016 Move W23, W2
	017 Move X21, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x7B3000
	024 Move X0, [X0+656]
	025 Call 0x1C17CF4
	026 Move X0, 0x755000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move X0, 0x7B3000
	030 Move X0, [X0+664]
	031 Call 0x1C17CF4
	032 Move X0, 0x7B3000
	033 Move X0, [X0+672]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X25+2918], W8
	037 Move X0, [X24]
	038 Move [X31+12], W31
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, W23
	044 Move W1, W21
	045 Move X2, X31
	046 Call Math.Min, X0, X1
	047 Move W23, W0
	048 Add X1, X31, 12
	049 Move W0, W19
	050 Call CoreUnsafeUtils.CalculateRadixParams, X0, X1
	051 Compare X22, 0
	052 JumpIfEqual {86}
	053 Compare W23, 0
	054 JumpIfEqual {86}
	055 Move W24, [X31+12]
	056 Move X8, [X20]
	057 Add W9, W24, W24
	058 Add W1, W9, W23
	059 Compare X8, 0
	060 JumpIfEqual {63}
	061 Move W8, [X20+8]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X8, 0x7B3000
	064 Move X8, [X8+656]
	065 Move X0, X20
	066 Move X2, [X8]
	067 Call ArrayExtensions.ResizeArray, X0, X1
	068 Move X25, 0x7B3000
	069 Move X25, [X25+664]
	070 Move X0, X22
	071 Move X1, X21
	072 Move X2, [X25]
	073 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	074 Move X8, [X20]
	075 Move X1, [X20+8]
	076 Move X2, [X25]
	077 Move X20, X0
	078 Move X0, X8
	079 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	080 Move X1, X0
	081 Move X0, X20
	082 Move W2, W19
	083 Move W3, W24
	084 Move W4, W23
	085 Call CoreUnsafeUtils.RadixSort, X0, X1, X2, X3, X4
	086 Move X20, [X31+64]
	087 Move X19, [X31+72]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X30, [X31+16]
	093 Move X25, [X31+24]
	094 Add X31, X31, 80
	095 Return 

Method: System.Void QuickSort(System.UInt32[] arr, System.Int32 left, System.Int32 right)

Disassembly:
	0x0399F544 LDP X22, X21, [X31 + 0x10]
	0x0399F548 LDR X30, [X31], #0x30
	0x0399F54C RET
	0x0399F550 BL 0x1C16F20
	0x0399F554 BL 0x1C16F28
	0x0399F558 STR X30, [X31 - 0x30]!
	0x0399F55C STP X22, X21, [X31 + 0x10]
	0x0399F560 STP X20, X19, [X31 + 0x20]
	0x0399F564 ADRP X22, 0xA42000
	0x0399F568 ADRP X21, 0x7B2000
	0x0399F56C LDRB W8, [X22 + 0xB71]
	0x0399F570 LDR X21, [X21 + 0x2D8]
	0x0399F574 MOV W20, W1
	0x0399F578 MOV X19, X0
	0x0399F57C TBNZ X8, 0x0, 0x399F594
	0x0399F580 ADRP X0, 0x7B2000
	0x0399F584 LDR X0, [X0 + 0x2D8]
	0x0399F588 BL 0x1C16CF4
	0x0399F58C MOVZ W8, 0x1
	0x0399F590 STRB W8, [X22 + 0xB71]
	0x0399F594 LDR X0, [X21]
	0x0399F598 LDR W8, [X0 + 0xE0]
	0x0399F59C CBNZ W8, 0x399F5A8
	0x0399F5A0 BL 0x1C16DFC
	0x0399F5A4 LDR X0, [X21]
	0x0399F5A8 LDR X8, [X0 + 0xB8]
	0x0399F5AC LDR X8, [X8 + 0x8]
	0x0399F5B0 CBZ X8, 0x399F5D8
	0x0399F5B4 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA43000
	007 Move W8, [X22+2919]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x7B3000
	016 Move X0, [X0+680]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2919], W8
	020 Move X8, 0x7B3000
	021 Move X8, [X8+680]
	022 Compare X21, 0
	023 JumpIfEqual {28}
	024 Move W9, [X21+24]
	025 Compare W9, 0
	026 JumpIfEqual {28}
	027 Add X0, X21, 32
	028 Move X0, X31
	029 Move X3, [X8]
	030 Move W1, W20
	031 Move W2, W19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Call CoreUnsafeUtils.QuickSort, X0, X1, X2
	038 Return 

Method: System.Void QuickSort(System.Int32 count, System.Void* data)

Disassembly:
	0x021A89B0 MOV X0, X20
	0x021A89B4 MOV X1, X19
	0x021A89B8 BL 0x1C16E00
	0x021A89BC CBNZ X0, 0x21A89D0
	0x021A89C0 MOV X0, X20
	0x021A89C4 MOV X1, X19
	0x021A89C8 BL 0x1C171E0
	0x021A89CC MOV X0, X31
	0x021A89D0 LDP X20, X19, [X31 + 0x10]
	0x021A89D4 LDP X30, X21, [X31], #0x20
	0x021A89D8 RET
	0x021A89DC STR X30, [X31 - 0x30]!
	0x021A89E0 STP X22, X21, [X31 + 0x10]
	0x021A89E4 STP X20, X19, [X31 + 0x20]
	0x021A89E8 LDR X8, [X2 + 0x38]
	0x021A89EC MOV X19, X2
	0x021A89F0 MOV W20, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X1
	007 Move W20, W0
	008 Compare X8, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X2
	011 Move X21, X2
	012 Call 0x1C5D6E0
	013 Move X8, [X21+56]
	014 Move X3, [X8]
	015 Subtract W2, W20, 1
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W1, W31
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Call 0x21A8A84, X0, X1, X2
	023 Return 

Method: System.Void QuickSort(System.Int32 count, System.Void* data)

Disassembly:
	0x021A8A3C MOV X1, X31
	0x021A8A40 BL 0x338C698
	0x021A8A44 MOV X1, X0
	0x021A8A48 AND W2, W20, 0x1
	0x021A8A4C MOV X0, X21
	0x021A8A50 MOV X3, X31
	0x021A8A54 BL 0x32D45A0
	0x021A8A58 LDR X8, [X19 + 0x38]
	0x021A8A5C MOV X20, X0
	0x021A8A60 LDR X19, [X8 + 0x8]
	0x021A8A64 LDRB W8, [X19 + 0x135]
	0x021A8A68 TBNZ X8, 0x0, 0x21A8A78
	0x021A8A6C MOV X0, X19
	0x021A8A70 BL 0x1C5C684
	0x021A8A74 MOV X19, X0
	0x021A8A78 CBZ X20, 0x21A8A98
	0x021A8A7C MOV X0, X20
	0x021A8A80 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X1
	007 Move W20, W0
	008 Compare X8, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X2
	011 Move X21, X2
	012 Call 0x1C5D6E0
	013 Move X8, [X21+56]
	014 Move X3, [X8]
	015 Subtract W2, W20, 1
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X4, [X3]
	020 Move W1, W31
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 CallNoReturn X4

Method: System.Void QuickSort(System.Void* data, System.Int32 left, System.Int32 right)

Disassembly:
	0x021A8A84 BL 0x1C16E00
	0x021A8A88 CBNZ X0, 0x21A8A9C
	0x021A8A8C MOV X0, X20
	0x021A8A90 MOV X1, X19
	0x021A8A94 BL 0x1C171E0
	0x021A8A98 MOV X0, X31
	0x021A8A9C LDP X20, X19, [X31 + 0x20]
	0x021A8AA0 LDP X22, X21, [X31 + 0x10]
	0x021A8AA4 LDR X30, [X31], #0x30
	0x021A8AA8 RET
	0x021A8AAC STP X30, X21, [X31 - 0x20]!
	0x021A8AB0 STP X20, X19, [X31 + 0x10]
	0x021A8AB4 LDR X8, [X1 + 0x38]
	0x021A8AB8 MOV X19, X1
	0x021A8ABC MOV X20, X0
	0x021A8AC0 CBNZ X8, 0x21A8AE4
	0x021A8AC4 ADRP X0, 0x1F4B000
	0x021A8AC8 LDR X0, [X0 + 0x6C0]
	0x021A8ACC BL 0x1C16CF4
	0x021A8AD0 LDR X8, [X19 + 0x38]
	0x021A8AD4 CBNZ X8, 0x21A8AE4
	0x021A8AD8 MOV X0, X19
	0x021A8ADC BL 0x1C5C6E0
	0x021A8AE0 LDR X8, [X19 + 0x38]
	0x021A8AE4 ADRP X9, 0x1F4B000
	0x021A8AE8 LDR X9, [X9 + 0x6C0]
	0x021A8AEC LDR X21, [X8]
	0x021A8AF0 LDR X0, [X9]
	0x021A8AF4 LDR W9, [X0 + 0xE0]
	0x021A8AF8 CBNZ W9, 0x21A8B00
	0x021A8AFC BL 0x1C16DFC
	0x021A8B00 MOV X0, X21
	0x021A8B04 MOV X1, X31
	0x021A8B08 BL 0x338C698
	0x021A8B0C MOV X1, X0
	0x021A8B10 MOV X0, X20
	0x021A8B14 MOV X2, X31
	0x021A8B18 BL 0x32D45BC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, X3
	008 Move W19, W2
	009 Move W22, W1
	010 Move X21, X0
	011 Move X8, [X20+56]
	012 Compare X8, 0
	013 JumpIfNotEqual {16}
	014 Move X0, X20
	015 Call 0x1C5D6E0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, [X20+56]
	018 Move X0, X21
	019 Move W1, W22
	020 Move W2, W19
	021 Move X3, [X8]
	022 Call 0x21A8130, X0, X1, X2
	023 Move W23, W0
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, [X20+56]
	026 Move X0, X21
	027 Move W1, W22
	028 Move W2, W23
	029 Move X3, [X8+8]
	030 Call 0x21A8A84, X0, X1, X2
	031 Add W22, W23, 1
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X20+56]
	034 Move X20, [X8+8]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Return 

Method: System.Int32 IndexOf(System.Void* data, System.Int32 count, T v)

Disassembly:
	0x021A7F88 ADRP X9, 0x1F4C000
	0x021A7F8C LDR X9, [X9 + 0x6C0]
	0x021A7F90 LDR X20, [X8]
	0x021A7F94 LDR X0, [X9]
	0x021A7F98 LDR W9, [X0 + 0xE0]
	0x021A7F9C CBNZ W9, 0x21A7FA4
	0x021A7FA0 BL 0x1C16DFC
	0x021A7FA4 MOV X0, X20
	0x021A7FA8 MOV X1, X31
	0x021A7FAC BL 0x338C698
	0x021A7FB0 CBZ X0, 0x21A7FE4
	0x021A7FB4 LDR X8, [X0]
	0x021A7FB8 LDR X9, [X8 + 0x898]
	0x021A7FBC LDR X1, [X8 + 0x8A0]
	0x021A7FC0 BLR X9
	0x021A7FC4 LDR X8, [X19 + 0x38]
	0x021A7FC8 LDR X1, [X8 + 0x8]
	0x021A7FCC BL 0x21B4430
	0x021A7FD0 LDR X8, [X19 + 0x38]
	0x021A7FD4 LDP X20, X19, [X31 + 0x10]
	0x021A7FD8 LDR X1, [X8 + 0x18]
	0x021A7FDC LDR X30, [X31], #0x20
	0x021A7FE0 B 0x21C64F4
	0x021A7FE4 BL 0x1C16F20
	0x021A7FE8 STP X29, X30, [X31 - 0x40]!
	0x021A7FEC STP X24, X23, [X31 + 0x10]
	0x021A7FF0 STP X22, X21, [X31 + 0x20]
	0x021A7FF4 STP X20, X19, [X31 + 0x30]
	0x021A7FF8 ADD X29, X31, 0x0
	0x021A7FFC SUB X31, X31, 0x20
	0x021A8000 MRS X24, 0xC000
	0x021A8004 LDR X8, [X24 + 0x28]
	0x021A8008 MOV X20, X1
	0x021A800C MOV X19, X0
	0x021A8010 STUR X8, [X29 - 0x8]
	0x021A8014 LDR X8, [X1 + 0x38]
	0x021A8018 CBNZ X8, 0x21A803C
	0x021A801C ADRP X0, 0x1F4B000
	0x021A8020 LDR X0, [X0 + 0x6C0]
	0x021A8024 BL 0x1C16CF4
	0x021A8028 LDR X8, [X20 + 0x38]
	0x021A802C CBNZ X8, 0x21A803C
	0x021A8030 MOV X0, X20
	0x021A8034 BL 0x1C5C6E0
	0x021A8038 LDR X8, [X20 + 0x38]
	0x021A803C LDR X9, [X8 + 0x20]
	0x021A8040 LDR W21, [X9 + 0xFC]
	0x021A8044 ADD X9, X31, 0x0
	0x021A8048 ADD X10, X21, 0xF
	0x021A804C AND X10, X10, 0x1FFFFFFFF
	0x021A8050 SUB X22, X9, X10
	0x021A8054 ADD X31, X22, 0x0
	0x021A8058 ADRP X9, 0x1F4B000
	0x021A805C LDR X9, [X9 + 0x6C0]
	0x021A8060 LDR X23, [X8]
	0x021A8064 LDR X0, [X9]
	0x021A8068 LDR W9, [X0 + 0xE0]
	0x021A806C CBNZ W9, 0x21A8074
	0x021A8070 BL 0x1C16DFC
	0x021A8074 MOV X0, X23
	0x021A8078 MOV X1, X31
	0x021A807C BL 0x338C698
	0x021A8080 CBZ X0, 0x21A8104
	0x021A8084 LDR X8, [X0]
	0x021A8088 LDR X9, [X8 + 0x898]
	0x021A808C LDR X1, [X8 + 0x8A0]
	0x021A8090 BLR X9
	0x021A8094 LDR X8, [X20 + 0x38]
	0x021A8098 LDR X1, [X8 + 0x8]
	0x021A809C LDR X8, [X1]
	0x021A80A0 BLR X8
	0x021A80A4 LDR X8, [X20 + 0x38]
	0x021A80A8 SUB X3, X29, 0x18
	0x021A80AC MOV X2, X31
	0x021A80B0 MOV X4, X22
	0x021A80B4 LDR X1, [X8 + 0x18]
	0x021A80B8 LDR X8, [X1]
	0x021A80BC STP X0, X22, [X29 - 0x18]
	0x021A80C0 LDR X9, [X1 + 0x10]
	0x021A80C4 MOV X0, X8
	0x021A80C8 BLR X9
	0x021A80CC MOV X0, X19
	0x021A80D0 MOV X1, X22
	0x021A80D4 MOV X2, X21
	0x021A80D8 BL 0x3EB1AC0
	0x021A80DC LDR X8, [X24 + 0x28]
	0x021A80E0 LDUR X9, [X29 - 0x8]
	0x021A80E4 CMP X8, X9
	0x021A80E8 B.NE 0x21A8108
	0x021A80EC ADD X31, X29, 0x0
	0x021A80F0 LDP X20, X19, [X31 + 0x30]
	0x021A80F4 LDP X22, X21, [X31 + 0x20]
	0x021A80F8 LDP X24, X23, [X31 + 0x10]
	0x021A80FC LDP X29, X30, [X31], #0x40
	0x021A8100 RET
	0x021A8104 BL 0x1C16F20
	0x021A8108 BL 0x3EB1B20
	0x021A810C STP X29, X30, [X31 - 0x40]!
	0x021A8110 STP X24, X23, [X31 + 0x10]
	0x021A8114 STP X22, X21, [X31 + 0x20]
	0x021A8118 STP X20, X19, [X31 + 0x30]
	0x021A811C ADD X29, X31, 0x0
	0x021A8120 SUB X31, X31, 0x30
	0x021A8124 MRS X24, 0xC000
	0x021A8128 LDR X8, [X24 + 0x28]
	0x021A812C MOV X20, X2

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 48
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move [X29-48], X8
	017 Move X8, [X8+40]
	018 Move X19, X3
	019 Move X20, X2
	020 Move W21, W1
	021 Move [X29-8], X8
	022 Move X8, [X3+56]
	023 Move X22, X0
	024 Compare X8, 0
	025 JumpIfNotEqual {29}
	026 Move X0, X19
	027 Call 0x1C5D6E0
	028 Move X8, [X19+56]
	029 Move X0, [X8+8]
	030 Move W23, [X0+252]
	031 Move W9, [X0+309]
	032 Move W8, W23
	033 Move TEMP, X9
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {39}
	037 Call 0x1C5D684
	038 Move W8, [X0+252]
	039 Add W8, W8, 16
	040 Add X8, X8, 15
	041 Add X9, X31, 0
	042 And X8, X8, 0x1FFFFFFFF
	043 Subtract X24, X9, X8
	044 Add X31, X24, 0
	045 Add X9, X23, 15
	046 Add X8, X31, 0
	047 And X9, X9, 0x1FFFFFFFF
	048 Subtract X25, X8, X9
	049 Add X31, X25, 0
	050 Add X8, X31, 0
	051 Subtract X27, X8, X9
	052 Add X31, X27, 0
	053 Add X8, X31, 0
	054 Subtract X28, X8, X9
	055 Add X31, X28, 0
	056 Move X0, X28
	057 Move W1, W31
	058 Move X2, X23
	059 Call 0x3EB2B10
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W26, W31
	062 Move X8, [X19+56]
	063 Subtract X3, X29, 40
	064 Move X2, X31
	065 Move X4, X25
	066 Move X1, [X8]
	067 Subtract X8, X29, 12
	068 Move X0, [X1]
	069 Move [X29-12], W26
	070 Move [X29-40], X22
	071 Move [X29-32], X8
	072 Move [X29-24], X25
	073 Move X8, [X1+16]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Move X0, X28
	076 Move X1, X25
	077 Move X2, X23
	078 Call 0x3EB2AC0
	079 Move X0, X27
	080 Move X1, X20
	081 Move X2, X23
	082 Call 0x3EB2AC0
	083 Move X8, [X19+56]
	084 Move X0, [X8+8]
	085 Move W9, [X0+309]
	086 Move TEMP, X9
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {92}
	090 Call 0x1C5D684
	091 Move X8, [X19+56]
	092 Move X1, [X8+24]
	093 Subtract X4, X29, 40
	094 Subtract X5, X29, 12
	095 Move X2, X24
	096 Move X3, X28
	097 Move [X29-40], X27
	098 Call 0x1C18728
	099 NotImplemented "Instruction LDURB not yet implemented."
	100 Compare W8, 0
	101 JumpIfNotEqual {107}
	102 Add W26, W26, 1
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move TEMP, 0
	105 Not TEMP
	106 Move W26, TEMP
	107 NotImplemented "Instruction LDUR not yet implemented."
	108 Move X8, [X8+40]
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move W0, W26
	112 Add X31, X29, 0
	113 Move X20, [X31+80]
	114 Move X19, [X31+88]
	115 Move X22, [X31+64]
	116 Move X21, [X31+72]
	117 Move X24, [X31+48]
	118 Move X23, [X31+56]
	119 Move X26, [X31+32]
	120 Move X25, [X31+40]
	121 Move X28, [X31+16]
	122 Move X27, [X31+24]
	123 Move X29, [X31+96]
	124 Move X30, [X31+104]
	125 Return X0
	126 Call 0x3EB2B20

Method: System.Int32 CompareHashes(System.Int32 oldHashCount, System.Void* oldHashes, System.Int32 newHashCount, System.Void* newHashes, System.Int32* addIndices, System.Int32* removeIndices, out System.Int32 addCount, out System.Int32 remCount)

Disassembly:
	0x021A71F0 ADD X1, X31, 0x4
	0x021A71F4 STR W8, [X31 + 0x4]
	0x021A71F8 LDR X2, [X9 + 0x20]
	0x021A71FC BL 0x29B2C7C
	0x021A7200 STR W0, [X31]
	0x021A7204 LDR X8, [X19 + 0x38]
	0x021A7208 ADD X0, X31, 0x0
	0x021A720C MOV W1, W21
	0x021A7210 LDR X2, [X8 + 0x40]
	0x021A7214 BL 0x337B634
	0x021A7218 CMP W0, 0x0
	0x021A721C B.GT 0x21A71E0
	0x021A7220 CMP W23, W22
	0x021A7224 B.GE 0x21A7240
	0x021A7228 LDR W8, [X31 + 0xC]
	0x021A722C SXTW X9, W22
	0x021A7230 STR W8, [X20, X9, LSL #2]
	0x021A7234 LDR W8, [X31 + 0x4]
	0x021A7238 STR W8, [X20, X24, LSL #2]
	0x021A723C B 0x21A7198
	0x021A7240 MOV W0, W22
	0x021A7244 LDP X20, X19, [X31 + 0x40]
	0x021A7248 LDP X22, X21, [X31 + 0x30]
	0x021A724C LDP X24, X23, [X31 + 0x20]
	0x021A7250 LDR X30, [X31 + 0x10]
	0x021A7254 ADD X31, X31, 0x50
	0x021A7258 RET
	0x021A725C SUB X31, X31, 0x50
	0x021A7260 STR X30, [X31 + 0x10]
	0x021A7264 STP X24, X23, [X31 + 0x20]
	0x021A7268 STP X22, X21, [X31 + 0x30]
	0x021A726C STP X20, X19, [X31 + 0x40]
	0x021A7270 LDR X8, [X3 + 0x38]
	0x021A7274 MOV X19, X3
	0x021A7278 MOV W22, W2
	0x021A727C MOV W23, W1
	0x021A7280 MOV X20, X0
	0x021A7284 CBNZ X8, 0x21A7294
	0x021A7288 MOV X0, X19
	0x021A728C BL 0x1C5C6E0
	0x021A7290 LDR X8, [X19 + 0x38]
	0x021A7294 STR W31, [X31 + 0x1C]
	0x021A7298 STP X31, X31, [X31]
	0x021A729C STRB W31, [X31 + 0x18]
	0x021A72A0 LDR W9, [X20, W23, SXTW]
	0x021A72A4 ADD X0, X31, 0x18
	0x021A72A8 ADD X1, X31, 0x1C
	0x021A72AC STR W9, [X31 + 0x1C]
	0x021A72B0 LDR X2, [X8 + 0x20]
	0x021A72B4 BL 0x399E98C
	0x021A72B8 MOV W21, W0
	0x021A72BC SUB W23, W23, 0x1
	0x021A72C0 ADD W22, W22, 0x1
	0x021A72C4 STR X31, [X31 + 0x8]
	0x021A72C8 ADD W23, W23, 0x1
	0x021A72CC LDR W8, [X20, W23, SXTW]
	0x021A72D0 LDR X9, [X19 + 0x38]
	0x021A72D4 ADD X0, X31, 0x18
	0x021A72D8 ADD X1, X31, 0xC
	0x021A72DC STR W8, [X31 + 0xC]
	0x021A72E0 LDR X2, [X9 + 0x20]
	0x021A72E4 BL 0x399E98C
	0x021A72E8 STR W0, [X31 + 0x8]
	0x021A72EC LDR X8, [X19 + 0x38]
	0x021A72F0 ADD X0, X31, 0x8
	0x021A72F4 MOV W1, W21
	0x021A72F8 LDR X2, [X8 + 0x40]
	0x021A72FC BL 0x3399A54
	0x021A7300 TBNZ X0, 0x1F, 0x21A72C8
	0x021A7304 SXTW X24, W23
	0x021A7308 STR X31, [X31]
	0x021A730C SUB W22, W22, 0x1
	0x021A7310 LDR W8, [X20, W22, SXTW]
	0x021A7314 LDR X9, [X19 + 0x38]
	0x021A7318 ADD X0, X31, 0x18
	0x021A731C ADD X1, X31, 0x4
	0x021A7320 STR W8, [X31 + 0x4]
	0x021A7324 LDR X2, [X9 + 0x20]
	0x021A7328 BL 0x399E98C
	0x021A732C STR W0, [X31]
	0x021A7330 LDR X8, [X19 + 0x38]
	0x021A7334 ADD X0, X31, 0x0
	0x021A7338 MOV W1, W21
	0x021A733C LDR X2, [X8 + 0x40]
	0x021A7340 BL 0x3399A54
	0x021A7344 CMP W0, 0x0
	0x021A7348 B.GT 0x21A730C
	0x021A734C CMP W23, W22
	0x021A7350 B.GE 0x21A736C
	0x021A7354 LDR W8, [X31 + 0xC]
	0x021A7358 SXTW X9, W22
	0x021A735C STR W8, [X20, X9, LSL #2]
	0x021A7360 LDR W8, [X31 + 0x4]
	0x021A7364 STR W8, [X20, X24, LSL #2]
	0x021A7368 B 0x21A72C4
	0x021A736C MOV W0, W22
	0x021A7370 LDP X20, X19, [X31 + 0x40]
	0x021A7374 LDP X22, X21, [X31 + 0x30]
	0x021A7378 LDP X24, X23, [X31 + 0x20]
	0x021A737C LDR X30, [X31 + 0x10]
	0x021A7380 ADD X31, X31, 0x50
	0x021A7384 RET
	0x021A7388 STP X29, X30, [X31 - 0x60]!
	0x021A738C STP X28, X27, [X31 + 0x10]
	0x021A7390 STP X26, X25, [X31 + 0x20]
	0x021A7394 STP X24, X23, [X31 + 0x30]
	0x021A7398 STP X22, X21, [X31 + 0x40]
	0x021A739C STP X20, X19, [X31 + 0x50]
	0x021A73A0 ADD X29, X31, 0x0
	0x021A73A4 SUB X31, X31, 0xC0
	0x021A73A8 STUR W2, [X29 - 0x9C]
	0x021A73AC MRS X8, 0xC000
	0x021A73B0 STUR X8, [X29 - 0x98]
	0x021A73B4 LDR X8, [X8 + 0x28]
	0x021A73B8 MOV X19, X3
	0x021A73BC MOV W22, W1
	0x021A73C0 STUR X8, [X29 - 0x10]
	0x021A73C4 LDR X24, [X19 + 0x38]!
	0x021A73C8 STUR X0, [X29 - 0x38]
	0x021A73CC CBNZ X24, 0x21A73E0
	0x021A73D0 MOV X0, X3
	0x021A73D4 MOV X20, X3
	0x021A73D8 BL 0x1C5C6E0
	0x021A73DC LDR X24, [X20 + 0x38]
	0x021A73E0 LDR X0, [X24]
	0x021A73E4 LDR X8, [X24 + 0x10]
	0x021A73E8 LDR X9, [X24 + 0x30]
	0x021A73EC LDR W23, [X0 + 0xFC]
	0x021A73F0 LDR W20, [X8 + 0xFC]
	0x021A73F4 ADD X8, X0, 0x135
	0x021A73F8 LDRH W8, [X8]
	0x021A73FC LDR W21, [X9 + 0xFC]
	0x021A7400 TBNZ X8, 0x0, 0x21A7424
	0x021A7404 BL 0x1C5C684
	0x021A7408 LDR X24, [X19]
	0x021A740C MOV X8, X0
	0x021A7410 LDR W9, [X8 + 0xFC]
	0x021A7414 LDR X0, [X24]
	0x021A7418 ADD X8, X0, 0x135
	0x021A741C LDRH W8, [X8]
	0x021A7420 B 0x21A7428
	0x021A7424 MOV W9, W23
	0x021A7428 ADD W9, W9, 0x10
	0x021A742C ADD X9, X9, 0xF
	0x021A7430 ADD X10, X31, 0x0
	0x021A7434 AND X9, X9, 0x1FFFFFFFF
	0x021A7438 SUB X9, X10, X9
	0x021A743C STUR X9, [X29 - 0xA8]
	0x021A7440 ADD X31, X9, 0x0
	0x021A7444 TBNZ X8, 0x0, 0x21A7450
	0x021A7448 BL 0x1C5C684
	0x021A744C LDR X24, [X19]
	0x021A7450 LDR W8, [X0 + 0xFC]
	0x021A7454 ADD X9, X31, 0x0
	0x021A7458 ADD W8, W8, 0x10
	0x021A745C ADD X8, X8, 0xF
	0x021A7460 AND X8, X8, 0x1FFFFFFFF
	0x021A7464 SUB X8, X9, X8
	0x021A7468 STUR X8, [X29 - 0x68]
	0x021A746C ADD X31, X8, 0x0
	0x021A7470 LDR X0, [X24 + 0x30]
	0x021A7474 LDRB W8, [X0 + 0x135]
	0x021A7478 TBNZ X8, 0x0, 0x21A7484
	0x021A747C BL 0x1C5C684
	0x021A7480 LDR X24, [X19]
	0x021A7484 LDR W8, [X0 + 0xFC]
	0x021A7488 ADD X9, X31, 0x0
	0x021A748C ADD W8, W8, 0x10
	0x021A7490 ADD X8, X8, 0xF
	0x021A7494 AND X8, X8, 0x1FFFFFFFF
	0x021A7498 SUB X8, X9, X8
	0x021A749C STUR X8, [X29 - 0x70]
	0x021A74A0 ADD X31, X8, 0x0
	0x021A74A4 LDR X0, [X24]
	0x021A74A8 LDRB W8, [X0 + 0x135]
	0x021A74AC TBNZ X8, 0x0, 0x21A74B8
	0x021A74B0 BL 0x1C5C684
	0x021A74B4 LDR X24, [X19]
	0x021A74B8 LDR W8, [X0 + 0xFC]
	0x021A74BC ADD X9, X31, 0x0
	0x021A74C0 ADD W8, W8, 0x10
	0x021A74C4 ADD X8, X8, 0xF
	0x021A74C8 AND X8, X8, 0x1FFFFFFFF
	0x021A74CC SUB X8, X9, X8
	0x021A74D0 STUR X8, [X29 - 0x78]
	0x021A74D4 ADD X31, X8, 0x0
	0x021A74D8 LDR X0, [X24 + 0x30]
	0x021A74DC STUR W22, [X29 - 0xA0]
	0x021A74E0 LDRB W8, [X0 + 0x135]
	0x021A74E4 TBNZ X8, 0x0, 0x21A74F0
	0x021A74E8 BL 0x1C5C684
	0x021A74EC LDR X24, [X19]
	0x021A74F0 LDR W8, [X0 + 0xFC]
	0x021A74F4 ADD X9, X31, 0x0
	0x021A74F8 ADD W8, W8, 0x10
	0x021A74FC ADD X8, X8, 0xF
	0x021A7500 AND X8, X8, 0x1FFFFFFFF
	0x021A7504 SUB X8, X9, X8
	0x021A7508 STUR X8, [X29 - 0x80]
	0x021A750C ADD X31, X8, 0x0
	0x021A7510 ADD X9, X20, 0xF
	0x021A7514 ADD X8, X31, 0x0
	0x021A7518 STUR X20, [X29 - 0x90]
	0x021A751C AND X20, X9, 0x1FFFFFFFF
	0x021A7520 SUB X26, X8, X20
	0x021A7524 ADD X31, X26, 0x0
	0x021A7528 ADD X8, X31, 0x0
	0x021A752C SUB X8, X8, X20
	0x021A7530 STUR X8, [X29 - 0x88]
	0x021A7534 ADD X31, X8, 0x0
	0x021A7538 ADD X9, X21, 0xF
	0x021A753C ADD X8, X31, 0x0
	0x021A7540 AND X22, X9, 0x1FFFFFFFF
	0x021A7544 SUB X28, X8, X22
	0x021A7548 ADD X31, X28, 0x0
	0x021A754C ADD X8, X31, 0x0
	0x021A7550 SUB X27, X8, X22
	0x021A7554 ADD X31, X27, 0x0
	0x021A7558 ADD X9, X23, 0xF
	0x021A755C ADD X8, X31, 0x0
	0x021A7560 AND X9, X9, 0x1FFFFFFFF
	0x021A7564 SUB X25, X8, X9
	0x021A7568 MOV X2, X23
	0x021A756C STUR X23, [X29 - 0xB8]
	0x021A7570 ADD X31, X25, 0x0
	0x021A7574 MOV X0, X25
	0x021A7578 MOV W1, W31
	0x021A757C BL 0x3EB1B10
	0x021A7580 ADD X8, X31, 0x0
	0x021A7584 SUB X0, X8, X20
	0x021A7588 STUR X0, [X29 - 0xB0]
	0x021A758C ADD X31, X0, 0x0
	0x021A7590 LDUR X23, [X29 - 0x90]
	0x021A7594 MOV W1, W31
	0x021A7598 MOV X2, X23
	0x021A759C BL 0x3EB1B10
	0x021A75A0 ADD X8, X31, 0x0
	0x021A75A4 SUB X0, X8, X22
	0x021A75A8 ADD X31, X0, 0x0
	0x021A75AC MOV W1, W31
	0x021A75B0 MOV X2, X21
	0x021A75B4 STUR X0, [X29 - 0x58]
	0x021A75B8 BL 0x3EB1B10

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+176], X29
	003 Move [X31+184], X30
	004 Move [X31+192], X28
	005 Move [X31+200], X27
	006 Move [X31+208], X26
	007 Move [X31+216], X25
	008 Move [X31+224], X24
	009 Move [X31+232], X23
	010 Move [X31+240], X22
	011 Move [X31+248], X21
	012 Move [X31+256], X20
	013 Move [X31+264], X19
	014 Move X29, [X31+272]
	015 Move X19, X7
	016 Move X22, X6
	017 Move X21, X5
	018 Move X8, [X29+56]
	019 Move X23, X4
	020 Move W25, W2
	021 Move W26, W0
	022 Move [X31+88], X3
	023 Move [X31+72], X1
	024 Compare X8, 0
	025 JumpIfNotEqual {29}
	026 Move X0, X29
	027 Call 0x1C5D6E0
	028 Move X8, [X29+56]
	029 Move [X31+144], X31
	030 Move [X31+152], X31
	031 Move [X31+128], X31
	032 Move [X31+136], X31
	033 Move [X31+112], X31
	034 Move [X31+120], X31
	035 Move [X31+96], X31
	036 Move [X31+104], X31
	037 Move X0, [X8]
	038 Call 0x2279000
	039 Move [X31+168], W0
	040 Move X8, [X29+56]
	041 Move X0, [X8+16]
	042 Call 0x2279000
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X31+160], W0
	045 Move [X22], W31
	046 Move [X19], W31
	047 Move [X31+144], X31
	048 Move [X31+152], X31
	049 Move [X31+128], X31
	050 Move [X31+136], X31
	051 Move X8, [X29+56]
	052 Move X1, [X31+72]
	053 Add X2, X31, 144
	054 Move W0, W26
	055 Move X3, [X8+32]
	056 Call 0x21A6F40, X0, X1, X2
	057 Move X8, [X29+56]
	058 Move X1, [X31+88]
	059 Add X2, X31, 128
	060 Move W0, W26
	061 Move X3, [X8+40]
	062 Call 0x21A6F40, X0, X1, X2
	063 Move X0, [X31+144]
	064 Move X1, [X31+152]
	065 Move X2, [X31+128]
	066 Move X3, [X31+136]
	067 Move X4, X31
	068 Call Hash128.op_Equality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {76}
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W28, W31
	077 Move W0, W28
	078 Move X20, [X31+256]
	079 Move X19, [X31+264]
	080 Move X22, [X31+240]
	081 Move X21, [X31+248]
	082 Move X24, [X31+224]
	083 Move X23, [X31+232]
	084 Move X26, [X31+208]
	085 Move X25, [X31+216]
	086 Move X28, [X31+192]
	087 Move X27, [X31+200]
	088 Move X29, [X31+176]
	089 Move X30, [X31+184]
	090 Add X31, X31, 272
	091 Return X0
	092 Move X8, [X31+88]
	093 Move W28, W31
	094 Move W27, W31
	095 Move W20, W31
	096 Move X9, W25
	097 Add X8, X8, 16
	098 Move [X31+32], X23
	099 Move [X31+40], X22
	100 Move [X31+8], X8
	101 Move [X31+16], X9
	102 Move [X31+56], X25
	103 Move [X31+80], X29
	104 Move X8, W20
	105 Move [X31+24], X8
	106 NotImplemented "Instruction SBFM not yet implemented."
	107 Move [X31+64], X8
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add W8, W28, W26
	112 Move W9, W27
	113 NotImplemented "Instruction LDRSW not yet implemented."
	114 Add W11, W10, 1
	115 Move [X19], W11
	116 Move [X21], W9
	117 Add W9, W9, 1
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract W28, W8, W27
	120 Move W27, W26
	121 Move X8, [X31+88]
	122 Move X9, [X31+64]
	123 Add X0, X31, 160
	124 Add X1, X31, 112
	125 Move V0, [X8]
	126 Move X9, [X31+72]
	127 Move X8, [X29+56]
	128 Move [X31+7], V0
	129 Move V0, [X9]
	130 Move [X31+6], V0
	131 Move X2, [X8+88]
	132 Call 0x29B3C74, X0, X1
	133 Move X8, [X29+56]
	134 Move X23, X0
	135 Move X22, X1
	136 Add X0, X31, 168
	137 Move X2, [X8+112]
	138 Add X1, X31, 96
	139 Call 0x29B3C74, X0, X1
	140 Move X29, X0
	141 Move X25, X1
	142 Move X0, X23
	143 Move X1, X22
	144 Move X2, X29
	145 Move X3, X25
	146 Move X4, X31
	147 Call Hash128.op_Equality, X0, X1
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfEqual {208}
	152 Move X0, X23
	153 Move X1, X22
	154 Move X2, X29
	155 Move X3, X25
	156 Move X4, X31
	157 Call Hash128.op_LessThan, X0, X1
	158 Move TEMP, X0
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfEqual {212}
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Add W8, W28, W26
	164 Subtract W8, W8, W27
	165 Move [X31+52], W8
	166 Move X0, X29
	167 Move X1, X25
	168 Move X2, X23
	169 Move X3, X22
	170 Move X4, X31
	171 Call Hash128.op_LessThan, X0, X1
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {185}
	176 NotImplemented "Instruction LDRSW not yet implemented."
	177 Add W28, W28, 1
	178 Add W9, W8, 1
	179 Move [X19], W9
	180 Move [X21], W27
	181 Add W27, W27, 1
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move W28, [X31+52]
	184 Move W27, W26
	185 Move X25, [X31+56]
	186 Move X29, [X31+80]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 NotImplemented "Instruction CSET not yet implemented."
	189 Or W8, W24, W8
	190 Move TEMP, X8
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfEqual {108}
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move X13, [X31+32]
	196 Move X12, [X31+40]
	197 Add W8, W28, W25
	198 Move W9, W20
	199 NotImplemented "Instruction LDRSW not yet implemented."
	200 Add W11, W10, 1
	201 Move [X12], W11
	202 Move [X13], W9
	203 Add W9, W9, 1
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Subtract W28, W8, W20
	206 Move W20, W25
	207 Move W27, W26
	208 Add W20, W20, 1
	209 Add W27, W27, 1
	210 Move X25, [X31+56]
	211 Move X29, [X31+80]
	212 Move X8, [X31+56]
	213 Move X10, X20
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X9, [X31+16]
	216 Move X11, [X31+24]
	217 Add W8, W28, W8
	218 Subtract W8, W8, W10
	219 Move [X31+52], W8
	220 Subtract X24, X9, X11
	221 Move X8, [X31+8]
	222 Move X9, [X31+64]
	223 Add X8, X8, X9
	224 Move [X31+64], X8
	225 Move X0, X23
	226 Move X1, X22
	227 Move X2, X29
	228 Move X3, X25
	229 Move X4, X31
	230 Call Hash128.op_LessThan, X0, X1
	231 Move TEMP, X0
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {210}
	235 Move X10, [X31+40]
	236 Add X0, X31, 160
	237 Add X1, X31, 112
	238 Add W28, W28, 1
	239 NotImplemented "Instruction LDRSW not yet implemented."
	240 Add W9, W8, 1
	241 Move [X10], W9
	242 Move X9, [X31+32]
	243 Move [X9], W20
	244 Move X8, [X31+80]
	245 Move X9, [X31+64]
	246 Move X8, [X8+56]
	247 Move V0, [X9+16]
	248 Move [X31+7], V0
	249 Move X2, [X8+88]
	250 Move [X31+64], X9
	251 Call 0x29B3C74, X0, X1
	252 Move X23, X0
	253 Move X22, X1
	254 Subtract X24, X24, 1
	255 Add W20, W20, 1
	256 Move X25, [X31+56]
	257 Move W28, [X31+52]
	258 Move X29, [X31+80]
	259 Move W20, W25
	260 Move X29, [X31+80]
	261 Move X25, X8
	262 Move X20, X10
	263 NotImplemented "Instruction CMP not yet implemented."
	264 NotImplemented "Instruction CSET not yet implemented."
	265 NotImplemented "Instruction CMP not yet implemented."

Method: System.Int32 CompareHashes(System.Int32 oldHashCount, UnityEngine.Hash128* oldHashes, System.Int32 newHashCount, UnityEngine.Hash128* newHashes, System.Int32* addIndices, System.Int32* removeIndices, out System.Int32 addCount, out System.Int32 remCount)

Disassembly:
	0x0399F5B8 CMP W9, 0x1
	0x0399F5BC B.LS 0x399F5DC
	0x0399F5C0 MOV W9, W20
	0x0399F5C4 STP X9, X19, [X8 + 0x30]
	0x0399F5C8 LDP X20, X19, [X31 + 0x20]
	0x0399F5CC LDP X22, X21, [X31 + 0x10]
	0x0399F5D0 LDR X30, [X31], #0x30
	0x0399F5D4 RET
	0x0399F5D8 BL 0x1C16F20
	0x0399F5DC BL 0x1C16F28
	0x0399F5E0 STP X30, X21, [X31 - 0x20]!
	0x0399F5E4 STP X20, X19, [X31 + 0x10]
	0x0399F5E8 ADRP X21, 0xA42000
	0x0399F5EC ADRP X20, 0x7B2000
	0x0399F5F0 LDRB W8, [X21 + 0xB72]
	0x0399F5F4 LDR X20, [X20 + 0x2D8]
	0x0399F5F8 MOV W19, W0
	0x0399F5FC TBNZ X8, 0x0, 0x399F614
	0x0399F600 ADRP X0, 0x7B2000
	0x0399F604 LDR X0, [X0 + 0x2D8]
	0x0399F608 BL 0x1C16CF4
	0x0399F60C MOVZ W8, 0x1
	0x0399F610 STRB W8, [X21 + 0xB72]
	0x0399F614 LDR X0, [X20]
	0x0399F618 LDR W8, [X0 + 0xE0]
	0x0399F61C CBNZ W8, 0x399F628
	0x0399F620 BL 0x1C16DFC
	0x0399F624 LDR X0, [X20]
	0x0399F628 LDR X8, [X0 + 0xB8]
	0x0399F62C STR W19, [X8]
	0x0399F630 LDP X20, X19, [X31 + 0x10]
	0x0399F634 LDP X30, X21, [X31], #0x20
	0x0399F638 RET
	0x0399F63C STR X30, [X31 - 0x20]!
	0x0399F640 STP X20, X19, [X31 + 0x10]
	0x0399F644 ADRP X20, 0xA42000
	0x0399F648 ADRP X19, 0x7B2000
	0x0399F64C LDRB W8, [X20 + 0xB73]
	0x0399F650 LDR X19, [X19 + 0x2D8]
	0x0399F654 TBNZ X8, 0x0, 0x399F66C
	0x0399F658 ADRP X0, 0x7B2000

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X27, 0xA43000
	013 Move X28, 0x7B3000
	014 Move W8, [X27+2920]
	015 Move X28, [X28+688]
	016 Move X19, X7
	017 Move X20, X6
	018 Move X21, X5
	019 Move X22, X4
	020 Move X23, X3
	021 Move W24, W2
	022 Move X25, X1
	023 Move W26, W0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x7B3000
	029 Move X0, [X0+688]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X27+2920], W8
	033 Move X8, [X28]
	034 Move W0, W26
	035 Move X1, X25
	036 Move W2, W24
	037 Move X3, X23
	038 Move X4, X22
	039 Move X5, X21
	040 Move X6, X20
	041 Move X7, X19
	042 Move X20, [X31+80]
	043 Move X19, [X31+88]
	044 Move X22, [X31+64]
	045 Move X21, [X31+72]
	046 Move X24, [X31+48]
	047 Move X23, [X31+56]
	048 Move X26, [X31+32]
	049 Move X25, [X31+40]
	050 Move X28, [X31+16]
	051 Move X27, [X31+24]
	052 Move [X31+96], X8
	053 Move X30, [X31+96]
	054 Call 0x21A71F0, X0, X1, X2, X3, X4, X5, X6, X7
	055 Return X0

Method: System.Void CombineHashes(System.Int32 count, System.Void* hashes, UnityEngine.Hash128* outHash)

Disassembly:
	0x021A6F40 ADD X24, X24, 0x1
	0x021A6F44 CMP X24, X8
	0x021A6F48 B.CC 0x21A6EE8
	0x021A6F4C BL 0x1C16F28
	0x021A6F50 LDR X8, [X25 + 0x28]
	0x021A6F54 LDUR X9, [X29 - 0x8]
	0x021A6F58 CMP X8, X9
	0x021A6F5C B.NE 0x21A6F84
	0x021A6F60 ADD X31, X29, 0x0
	0x021A6F64 LDP X20, X19, [X31 + 0x50]
	0x021A6F68 LDP X22, X21, [X31 + 0x40]
	0x021A6F6C LDP X24, X23, [X31 + 0x30]
	0x021A6F70 LDP X26, X25, [X31 + 0x20]
	0x021A6F74 LDR X27, [X31 + 0x10]
	0x021A6F78 LDP X29, X30, [X31], #0x60
	0x021A6F7C RET
	0x021A6F80 BL 0x1C16F20
	0x021A6F84 BL 0x3EB1B20
	0x021A6F88 STP X29, X30, [X31 - 0x60]!
	0x021A6F8C STP X28, X27, [X31 + 0x10]
	0x021A6F90 STP X26, X25, [X31 + 0x20]
	0x021A6F94 STP X24, X23, [X31 + 0x30]
	0x021A6F98 STP X22, X21, [X31 + 0x40]
	0x021A6F9C STP X20, X19, [X31 + 0x50]
	0x021A6FA0 ADD X29, X31, 0x0
	0x021A6FA4 SUB X31, X31, 0x30
	0x021A6FA8 MRS X8, 0xC000
	0x021A6FAC STUR X8, [X29 - 0x30]
	0x021A6FB0 LDR X8, [X8 + 0x28]
	0x021A6FB4 MOV X19, X3
	0x021A6FB8 MOV X20, X2
	0x021A6FBC MOV W21, W1
	0x021A6FC0 STUR X8, [X29 - 0x8]
	0x021A6FC4 LDR X8, [X3 + 0x38]
	0x021A6FC8 MOV X22, X0
	0x021A6FCC CBNZ X8, 0x21A6FDC
	0x021A6FD0 MOV X0, X19
	0x021A6FD4 BL 0x1C5C6E0
	0x021A6FD8 LDR X8, [X19 + 0x38]
	0x021A6FDC LDR X0, [X8 + 0x8]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X8, [X3+56]
	008 Move X19, X3
	009 Move X20, X2
	010 Move X21, X1
	011 Move W22, W0
	012 Compare X8, 0
	013 JumpIfNotEqual {17}
	014 Move X0, X19
	015 Call 0x1C5D6E0
	016 Move X8, [X19+56]
	017 Move [X31+16], X31
	018 Move [X31+24], X31
	019 Move [X31], X31
	020 Move [X31+8], X31
	021 Move X0, [X8]
	022 Call 0x2279000
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move [X31+40], W0
	025 Move W22, W22
	026 Move X8, [X19+56]
	027 Move V0, [X21+16]
	028 Add X0, X31, 40
	029 Add X1, X31, 16
	030 Move [X31+1], V0
	031 Move X2, [X8+40]
	032 Call 0x29B3C74, X0, X1
	033 Move [X31], X0
	034 Move [X31+8], X1
	035 Add X0, X31, 0
	036 Move X1, X20
	037 Move X2, X31
	038 Call HashUtilities.AppendHash, X0, X1
	039 Subtract X22, X22, 1
	040 Move X20, [X31+64]
	041 Move X19, [X31+72]
	042 Move X22, [X31+48]
	043 Move X21, [X31+56]
	044 Move X30, [X31+32]
	045 Add X31, X31, 80
	046 Return 

Method: System.Void CombineHashes(System.Int32 count, UnityEngine.Hash128* hashes, UnityEngine.Hash128* outHash)

Disassembly:
	0x0399F65C LDR X0, [X0 + 0x2D8]
	0x0399F660 BL 0x1C16CF4
	0x0399F664 MOVZ W8, 0x1
	0x0399F668 STRB W8, [X20 + 0xB73]
	0x0399F66C LDR X0, [X19]
	0x0399F670 LDR W8, [X0 + 0xE0]
	0x0399F674 CBNZ W8, 0x399F680
	0x0399F678 BL 0x1C16DFC
	0x0399F67C LDR X0, [X19]
	0x0399F680 LDR X8, [X0 + 0xB8]
	0x0399F684 LDP X20, X19, [X31 + 0x10]
	0x0399F688 MOVZ W10, 0x1
	0x0399F68C LDR X9, [X8 + 0x20]
	0x0399F690 STR W31, [X8 + 0x28]
	0x0399F694 STRB W10, [X8 + 0x38]
	0x0399F698 STR X9, [X8 + 0x30]
	0x0399F69C LDR X30, [X31], #0x20
	0x0399F6A0 RET
	0x0399F6A4 STR X30, [X31 - 0x30]!
	0x0399F6A8 STP X22, X21, [X31 + 0x10]
	0x0399F6AC STP X20, X19, [X31 + 0x20]
	0x0399F6B0 ADRP X21, 0xA42000
	0x0399F6B4 LDRB W8, [X21 + 0xB74]
	0x0399F6B8 MOV W19, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xA43000
	008 Move X23, 0x7B3000
	009 Move W8, [X22+2921]
	010 Move X23, [X23+696]
	011 Move X19, X2
	012 Move X20, X1
	013 Move W21, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x7B3000
	019 Move X0, [X0+696]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2921], W8
	023 Move X3, [X23]
	024 Move W0, W21
	025 Move X1, X20
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]
	032 Move X23, [X31+56]
	033 Call 0x21A6F40, X0, X1, X2
	034 Return 

Method: System.Int32 Partition(System.Void* data, System.Int32 left, System.Int32 right)

Disassembly:
	0x021A8130 MOV X19, X1
	0x021A8134 MOV X21, X0
	0x021A8138 STUR X8, [X29 - 0x8]
	0x021A813C STP X1, X0, [X29 - 0x28]
	0x021A8140 LDR X9, [X2 + 0x38]
	0x021A8144 CBNZ X9, 0x21A8154
	0x021A8148 MOV X0, X20
	0x021A814C BL 0x1C5C6E0
	0x021A8150 LDR X9, [X20 + 0x38]
	0x021A8154 LDR X8, [X9]
	0x021A8158 ADD X10, X8, 0x135
	0x021A815C LDRH W10, [X10]
	0x021A8160 TBNZ X10, 0x0, 0x21A8180
	0x021A8164 MOV X0, X8
	0x021A8168 BL 0x1C5C684
	0x021A816C LDR X9, [X20 + 0x38]
	0x021A8170 LDR X8, [X9]
	0x021A8174 ADD X10, X8, 0x135
	0x021A8178 LDRH W10, [X10]
	0x021A817C B 0x21A8184
	0x021A8180 MOV X0, X8
	0x021A8184 LDR W11, [X0 + 0xFC]
	0x021A8188 ADD X12, X31, 0x0
	0x021A818C ADD W11, W11, 0x10
	0x021A8190 ADD X11, X11, 0xF
	0x021A8194 AND X11, X11, 0x1FFFFFFFF
	0x021A8198 SUB X23, X12, X11
	0x021A819C ADD X31, X23, 0x0
	0x021A81A0 TBNZ X10, 0x0, 0x21A81C0
	0x021A81A4 MOV X0, X8
	0x021A81A8 BL 0x1C5C684
	0x021A81AC LDR X9, [X20 + 0x38]
	0x021A81B0 LDR X8, [X9]
	0x021A81B4 ADD X10, X8, 0x135
	0x021A81B8 LDRH W10, [X10]
	0x021A81BC B 0x21A81C4
	0x021A81C0 MOV X0, X8
	0x021A81C4 LDR W11, [X0 + 0xFC]
	0x021A81C8 ADD X12, X31, 0x0
	0x021A81CC ADD W11, W11, 0x10
	0x021A81D0 ADD X11, X11, 0xF
	0x021A81D4 AND X11, X11, 0x1FFFFFFFF
	0x021A81D8 SUB X22, X12, X11
	0x021A81DC ADD X31, X22, 0x0
	0x021A81E0 TBNZ X10, 0x0, 0x21A81F4
	0x021A81E4 MOV X0, X8
	0x021A81E8 BL 0x1C5C684
	0x021A81EC LDR X9, [X20 + 0x38]
	0x021A81F0 MOV X8, X0
	0x021A81F4 LDP X10, X1, [X9]
	0x021A81F8 SUB X9, X29, 0x20
	0x021A81FC SUB X4, X29, 0x18
	0x021A8200 SUB X5, X29, 0xC
	0x021A8204 LDR W10, [X10 + 0x28]
	0x021A8208 MOV X0, X8
	0x021A820C MOV X2, X23
	0x021A8210 STUR X31, [X29 - 0x18]
	0x021A8214 CMP W10, 0x0
	0x021A8218 CSEL X3, X21, X9, LT
	0x021A821C BL 0x1C17728
	0x021A8220 LDR X8, [X20 + 0x38]
	0x021A8224 LDUR W21, [X29 - 0xC]
	0x021A8228 LDR X0, [X8]
	0x021A822C LDRB W9, [X0 + 0x135]
	0x021A8230 TBNZ X9, 0x0, 0x21A8240
	0x021A8234 BL 0x1C5C684
	0x021A8238 LDR X8, [X20 + 0x38]
	0x021A823C LDUR X19, [X29 - 0x28]
	0x021A8240 LDP X9, X1, [X8]
	0x021A8244 SUB X8, X29, 0x28
	0x021A8248 SUB X4, X29, 0x18
	0x021A824C SUB X5, X29, 0xC
	0x021A8250 LDR W9, [X9 + 0x28]
	0x021A8254 MOV X2, X22
	0x021A8258 STUR X31, [X29 - 0x18]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X8, [X3+56]
	010 Move X19, X3
	011 Move W22, W2
	012 Move W23, W1
	013 Move X20, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {19}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Move X8, [X19+56]
	019 Move [X31+28], W31
	020 Move [X31], X31
	021 Move [X31+8], X31
	022 Move [X31+24], W31
	023 Move W9, [X20]
	024 Add X0, X31, 24
	025 Add X1, X31, 28
	026 Move [X31+28], W9
	027 Move X2, [X8+32]
	028 Call DefaultKeyGetter`1<Int32>.Get, X0, X1
	029 Move W21, W0
	030 Subtract W23, W23, 1
	031 Add W22, W22, 1
	032 Move [X31+8], X31
	033 Add W23, W23, 1
	034 Move W8, [X20]
	035 Move X9, [X19+56]
	036 Add X0, X31, 24
	037 Add X1, X31, 12
	038 Move [X31+12], W8
	039 Move X2, [X9+32]
	040 Call DefaultKeyGetter`1<Int32>.Get, X0, X1
	041 Move [X31+8], W0
	042 Move X8, [X19+56]
	043 Add X0, X31, 8
	044 Move W1, W21
	045 Move X2, [X8+64]
	046 Call Int32.CompareTo, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, -2147483648
	049 Compare TEMP, -2147483648
	050 JumpIfEqual {33}
	051 Move X24, W23
	052 Move [X31], X31
	053 Subtract W22, W22, 1
	054 Move W8, [X20]
	055 Move X9, [X19+56]
	056 Add X0, X31, 24
	057 Add X1, X31, 4
	058 Move [X31+4], W8
	059 Move X2, [X9+32]
	060 Call DefaultKeyGetter`1<Int32>.Get, X0, X1
	061 Move [X31], W0
	062 Move X8, [X19+56]
	063 Add X0, X31, 0
	064 Move W1, W21
	065 Move X2, [X8+64]
	066 Call Int32.CompareTo, X0, X1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, [X31+12]
	070 Move X9, W22
	071 Move [X20], W8
	072 Move W8, [X31+4]
	073 Move [X20], W8
	074 Move W0, W22
	075 Move X20, [X31+64]
	076 Move X19, [X31+72]
	077 Move X22, [X31+48]
	078 Move X21, [X31+56]
	079 Move X24, [X31+32]
	080 Move X23, [X31+40]
	081 Move X30, [X31+16]
	082 Add X31, X31, 80
	083 Return X0

Method: System.Boolean HaveDuplicates(System.Int32[] arr)

Disassembly:
	0x0399F6BC MOV X20, X0
	0x0399F6C0 TBNZ X8, 0x0, 0x399F6FC
	0x0399F6C4 ADRP X0, 0x7B2000
	0x0399F6C8 LDR X0, [X0 + 0x340]
	0x0399F6CC BL 0x1C16CF4
	0x0399F6D0 ADRP X0, 0x7B2000
	0x0399F6D4 LDR X0, [X0 + 0x348]
	0x0399F6D8 BL 0x1C16CF4
	0x0399F6DC ADRP X0, 0x7B2000
	0x0399F6E0 LDR X0, [X0 + 0x350]
	0x0399F6E4 BL 0x1C16CF4
	0x0399F6E8 ADRP X0, 0x7B2000
	0x0399F6EC LDR X0, [X0 + 0x2D8]
	0x0399F6F0 BL 0x1C16CF4
	0x0399F6F4 MOVZ W8, 0x1
	0x0399F6F8 STRB W8, [X21 + 0xB74]
	0x0399F6FC CBZ X20, 0x399F7C4
	0x0399F700 ADRP X22, 0x7B2000
	0x0399F704 LDR X22, [X22 + 0x2D8]
	0x0399F708 MOV X0, X20
	0x0399F70C MOV X1, X31
	0x0399F710 BL 0x3C385F8
	0x0399F714 LDR X8, [X22]
	0x0399F718 MOV W20, W0
	0x0399F71C LDR W9, [X8 + 0xE0]
	0x0399F720 CBNZ W9, 0x399F730
	0x0399F724 MOV X0, X8
	0x0399F728 BL 0x1C16DFC
	0x0399F72C LDR X8, [X22]
	0x0399F730 LDR X8, [X8 + 0xB8]
	0x0399F734 LDR X0, [X8 + 0x10]
	0x0399F738 CBZ X0, 0x399F7C4
	0x0399F73C ADRP X8, 0x7B2000
	0x0399F740 LDR X8, [X8 + 0x348]
	0x0399F744 MOV W1, W20
	0x0399F748 LDR X2, [X8]
	0x0399F74C BL 0x2A0172C
	0x0399F750 LDR X8, [X22]
	0x0399F754 MOV W21, W0
	0x0399F758 LDR W9, [X8 + 0xE0]
	0x0399F75C CBNZ W9, 0x399F76C
	0x0399F760 MOV X0, X8
	0x0399F764 BL 0x1C16DFC
	0x0399F768 LDR X8, [X22]
	0x0399F76C LDR X8, [X8 + 0xB8]
	0x0399F770 LDR X0, [X8 + 0x10]
	0x0399F774 CBZ X0, 0x399F7C4
	0x0399F778 TBZ X21, 0x0, 0x399F7A0
	0x0399F77C ADRP X8, 0x7B2000
	0x0399F780 LDR X8, [X8 + 0x350]
	0x0399F784 MOV W1, W20
	0x0399F788 MOV W2, W19
	0x0399F78C LDP X20, X19, [X31 + 0x20]
	0x0399F790 LDR X3, [X8]
	0x0399F794 LDP X22, X21, [X31 + 0x10]
	0x0399F798 LDR X30, [X31], #0x30
	0x0399F79C B 0x2A0152C
	0x0399F7A0 ADRP X8, 0x7B2000
	0x0399F7A4 LDR X8, [X8 + 0x340]
	0x0399F7A8 MOV W1, W20
	0x0399F7AC MOV W2, W19
	0x0399F7B0 LDP X20, X19, [X31 + 0x20]
	0x0399F7B4 LDR X3, [X8]
	0x0399F7B8 LDP X22, X21, [X31 + 0x10]
	0x0399F7BC LDR X30, [X31], #0x30
	0x0399F7C0 B 0x2A01540
	0x0399F7C4 BL 0x1C16F20
	0x0399F7C8 AND W8, W1, 0x1
	0x0399F7CC STRB W8, [X0 + 0x21]
	0x0399F7D0 RET
	0x0399F7D4 SUB X31, X31, 0x100
	0x0399F7D8 STR X30, [X31 + 0xC0]
	0x0399F7DC STP X24, X23, [X31 + 0xD0]
	0x0399F7E0 STP X22, X21, [X31 + 0xE0]
	0x0399F7E4 STP X20, X19, [X31 + 0xF0]
	0x0399F7E8 ADRP X24, 0xA42000
	0x0399F7EC ADRP X22, 0x754000
	0x0399F7F0 LDRB W8, [X24 + 0xB75]
	0x0399F7F4 LDR X22, [X22 + 0x598]
	0x0399F7F8 MOV X19, X2
	0x0399F7FC MOV X20, X1
	0x0399F800 MOV X21, X0
	0x0399F804 ADD X23, X31, 0x80
	0x0399F808 TBNZ X8, 0x0, 0x399F844
	0x0399F80C ADRP X0, 0x7B2000
	0x0399F810 LDR X0, [X0 + 0x2D8]
	0x0399F814 BL 0x1C16CF4
	0x0399F818 ADRP X0, 0x7B2000
	0x0399F81C LDR X0, [X0 + 0x358]
	0x0399F820 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Add X29, X31, 0
	010 Subtract X31, X31, 16
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X8, [X22+40]
	013 Move X20, 0xA43000
	014 Move X19, X0
	015 Move [X29-8], X8
	016 Move W8, [X20+2922]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x7B3000
	022 Move X0, [X0+704]
	023 Call 0x1C17CF4
	024 Move X0, 0x7B3000
	025 Move X0, [X0+712]
	026 Call 0x1C17CF4
	027 Move X0, 0x77E000
	028 Move X0, [X0+72]
	029 Call 0x1C17CF4
	030 Move X0, 0x7B3000
	031 Move X0, [X0+720]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+2922], W8
	035 Move [X29-12], W31
	036 Compare X19, 0
	037 JumpIfEqual {102}
	038 Move X21, [X19+24]
	039 Move X24, 0x7B3000
	040 Move X23, 0x77E000
	041 Move X24, [X24+704]
	042 Move X23, [X23+72]
	043 Move X8, X21
	044 ShiftRight X8, 32
	045 And X8, X8, 0x7FFFFFFF
	046 NotImplemented "Instruction SBFM not yet implemented."
	047 Compare X8, 0
	048 JumpIfEqual {54}
	049 Add X9, X2, 15
	050 Add X8, X31, 0
	051 And X9, X9, 0xFFFFFFFF
	052 Subtract X20, X8, X9
	053 Add X31, X20, 0
	054 Move X20, X31
	055 Move X0, X20
	056 Move W1, W31
	057 Call 0x3EB2B10
	058 Move X3, [X24]
	059 Move X0, X19
	060 Move X1, X20
	061 Move W2, W21
	062 Call 0x21A7CB0, X0, X1, X2
	063 Move W0, [X19+24]
	064 Move X2, [X23]
	065 Move X1, X20
	066 Call 0x21A89B0, X0, X1
	067 Move W19, [X19+24]
	068 Move X21, INVALID
	069 Subtract W9, W19, 1
	070 Add X8, X21, X9
	071 Add X9, X20, W9
	072 Subtract W19, W19, 1
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W10, [X9]
	075 Subtract X0, X29, 12
	076 Move X2, X31
	077 Add X23, X8, X21
	078 Move [X29-12], W10
	079 NotImplemented "Instruction SBFM not yet implemented."
	080 Move W1, [X10]
	081 Subtract X24, X9, 4
	082 Call Int32.CompareTo, X0, X1
	083 Move X9, X24
	084 Move X8, X23
	085 Compare W0, 0
	086 JumpIfNotEqual {72}
	087 Move X8, [X22+40]
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSET not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add X31, X29, 0
	093 Move X20, [X31+48]
	094 Move X19, [X31+56]
	095 Move X22, [X31+32]
	096 Move X21, [X31+40]
	097 Move X24, [X31+16]
	098 Move X23, [X31+24]
	099 Move X29, [X31+64]
	100 Move X30, [X31+72]
	101 Return X0
	102 Call 0x1C17F20
	103 Call 0x3EB2B20

