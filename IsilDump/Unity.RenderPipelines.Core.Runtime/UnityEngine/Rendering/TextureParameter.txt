Type: UnityEngine.Rendering.TextureParameter

Method: System.Void .ctor(UnityEngine.Texture value, System.Boolean overrideState = False)

Disassembly:
	0x039F4994 LDP X20, X19, [X31 + 0x20]
	0x039F4998 LDP X22, X21, [X31 + 0x10]
	0x039F499C LDP X30, X23, [X31], #0x30

ISIL:
	001 And W3, W2, 1
	002 Move W2, 1

Method: System.Void .ctor(UnityEngine.Texture value, UnityEngine.Rendering.TextureDimension dimension, System.Boolean overrideState = False)

Disassembly:
	0x039F49A0 RET
	0x039F49A4 MOVZ W8, 0x1
	0x039F49A8 STRB W8, [X0 + 0x20]
	0x039F49AC RET
	0x039F49B0 STR X30, [X31 - 0x30]!
	0x039F49B4 STP X22, X21, [X31 + 0x10]
	0x039F49B8 STP X20, X19, [X31 + 0x20]
	0x039F49BC ADRP X22, 0x9ED000
	0x039F49C0 LDRB W8, [X22 + 0xEAC]
	0x039F49C4 MOV W21, W2
	0x039F49C8 MOV X20, X1
	0x039F49CC MOV X19, X0
	0x039F49D0 TBNZ X8, 0x0, 0x39F49F4
	0x039F49D4 ADRP X0, 0x75F000
	0x039F49D8 LDR X0, [X0 + 0x650]
	0x039F49DC BL 0x1C16CF4
	0x039F49E0 ADRP X0, 0x75D000
	0x039F49E4 LDR X0, [X0 + 0x710]
	0x039F49E8 BL 0x1C16CF4
	0x039F49EC MOVZ W8, 0x1
	0x039F49F0 STRB W8, [X22 + 0xEAC]
	0x039F49F4 MOV X0, X19
	0x039F49F8 MOV X1, X20
	0x039F49FC BL 0x39F4B2C
	0x039F4A00 TBNZ X0, 0x0, 0x39F4AE4
	0x039F4A04 MOV X0, X20
	0x039F4A08 MOV X1, X31
	0x039F4A0C BL 0x3C36DE8
	0x039F4A10 CBZ X0, 0x39F4AD8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x9EE000
	009 Move X24, 0x760000
	010 Move W8, [X23+3733]
	011 Move X24, [X24+2384]
	012 Move W22, W3
	013 Move W19, W2
	014 Move X21, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x760000
	021 Move X0, [X0+2384]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+3733], W8
	025 Move X3, [X24]
	026 And W2, W22, 1
	027 Move X0, X20
	028 Move X1, X21
	029 Call VolumeParameter`1<Object>..ctor, X0, X1, X2
	030 Move [X20+32], W19
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X22, [X31+32]
	034 Move X21, [X31+40]
	035 Move X24, [X31+16]
	036 Move X23, [X31+24]
	037 Move X30, [X31+64]
	038 Return 

Method: System.Int32 GetHashCode()

Disassembly:
	0x039F4A14 ADRP X9, 0x75D000
	0x039F4A18 LDR X9, [X9 + 0x710]
	0x039F4A1C LDR X8, [X0]
	0x039F4A20 MOV X20, X0
	0x039F4A24 LDR X1, [X9]
	0x039F4A28 LDRB W10, [X8 + 0x130]
	0x039F4A2C LDRB W9, [X1 + 0x130]
	0x039F4A30 CMP W10, W9
	0x039F4A34 B.CC 0x39F4ADC
	0x039F4A38 LDR X8, [X8 + 0xC8]
	0x039F4A3C ADD X8, X8, X9, 0x3, LSL
	0x039F4A40 LDUR X8, [X8 - 0x8]
	0x039F4A44 CMP X8, X1
	0x039F4A48 B.NE 0x39F4ADC
	0x039F4A4C LDR X1, [X20 + 0x28]
	0x039F4A50 AND W2, W21, 0x1
	0x039F4A54 MOV X0, X20
	0x039F4A58 BL 0x39EFE90
	0x039F4A5C LDR X0, [X19 + 0x18]
	0x039F4A60 CBZ X0, 0x39F4AD8
	0x039F4A64 ADRP X9, 0x75F000
	0x039F4A68 LDR X9, [X9 + 0x650]
	0x039F4A6C LDR W10, [X0 + 0x1C]
	0x039F4A70 LDR X8, [X0 + 0x10]
	0x039F4A74 LDR X9, [X9]
	0x039F4A78 ADD W10, W10, 0x1
	0x039F4A7C STR W10, [X0 + 0x1C]
	0x039F4A80 CBZ X8, 0x39F4AD8
	0x039F4A84 LDRSW X10, [X0 + 0x18]
	0x039F4A88 LDR W11, [X8 + 0x18]
	0x039F4A8C CMP W10, W11
	0x039F4A90 B.CS 0x39F4AA8
	0x039F4A94 ADD W9, W10, 0x1
	0x039F4A98 ADD X8, X8, X10, 0x3, LSL
	0x039F4A9C STR W9, [X0 + 0x18]
	0x039F4AA0 STR X20, [X8 + 0x20]
	0x039F4AA4 B 0x39F4ABC
	0x039F4AA8 LDR X8, [X9 + 0x20]
	0x039F4AAC MOV X1, X20
	0x039F4AB0 LDR X8, [X8 + 0xC0]
	0x039F4AB4 LDR X2, [X8 + 0x70]
	0x039F4AB8 BL 0x301BF90
	0x039F4ABC MOVZ W8, 0x1
	0x039F4AC0 STRB W8, [X19 + 0x20]
	0x039F4AC4 MOV X0, X20
	0x039F4AC8 LDP X20, X19, [X31 + 0x20]
	0x039F4ACC LDP X22, X21, [X31 + 0x10]
	0x039F4AD0 LDR X30, [X31], #0x30
	0x039F4AD4 RET
	0x039F4AD8 BL 0x1C16F20
	0x039F4ADC MOV X0, X20
	0x039F4AE0 BL 0x1C171E0
	0x039F4AE4 ADRP X0, 0x6FF000
	0x039F4AE8 LDR X0, [X0 + 0x5B0]
	0x039F4AEC BL 0x1C16D08
	0x039F4AF0 BL 0x1C16F10
	0x039F4AF4 MOV X19, X0
	0x039F4AF8 ADRP X0, 0x75F000
	0x039F4AFC LDR X0, [X0 + 0x9C0]
	0x039F4B00 BL 0x1C16D08
	0x039F4B04 MOV X1, X0
	0x039F4B08 MOV X0, X19
	0x039F4B0C MOV X2, X31
	0x039F4B10 BL 0x337DF1C
	0x039F4B14 ADRP X0, 0x75F000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x9EE000
	007 Move X22, 0x760000
	008 Move X21, 0x700000
	009 Move W8, [X20+3734]
	010 Move X22, [X22+2392]
	011 Move X21, [X21+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x728000
	018 Move X0, [X0+2296]
	019 Call 0x1C17CF4
	020 Move X0, 0x700000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x760000
	024 Move X0, [X0+2392]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3734], W8
	028 Move X1, [X22]
	029 Move X0, X19
	030 Call VolumeParameter`1<Object>.GetHashCode, X0
	031 Move X8, [X19]
	032 Move W20, W0
	033 Move X0, X19
	034 Move X9, [X8+536]
	035 Move X1, [X8+544]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X8, [X21]
	038 Move X21, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X21
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {71}
	052 Move X8, [X19]
	053 Move X20, 0x728000
	054 Move X0, X19
	055 Move X9, [X8+536]
	056 Move X1, [X8+544]
	057 Move X20, [X20+2296]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X8, [X20]
	060 Move X19, X0
	061 Move W9, [X8+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {66}
	064 Move X0, X8
	065 Call 0x1C17DFC
	066 Move X0, X19
	067 Move X1, X31
	068 Call CoreUtils.GetTextureHash, X0
	069 Move W8, 23
	070 Multiply W20, W0, W8
	071 Move W0, W20
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Return X0

