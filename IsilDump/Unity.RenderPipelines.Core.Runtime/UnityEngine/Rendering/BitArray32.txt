Type: UnityEngine.Rendering.BitArray32

Method: System.UInt32 get_capacity()

Disassembly:
	0x039E0894 LDP X20, X19, [X31 + 0x20]
	0x039E0898 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move W0, 32
	002 Return X0

Method: System.Boolean get_allFalse()

Disassembly:
	0x039E089C ADD X31, X31, 0x30
	0x039E08A0 RET
	0x039E08A4 CMP X0, X2
	0x039E08A8 CSET W8, EQ

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_allTrue()

Disassembly:
	0x039E08AC CMP X1, X3
	0x039E08B0 CSET W9, EQ
	0x039E08B4 AND W0, W8, W9, 0x0
	0x039E08B8 RET

ISIL:
	001 Move W8, [X0]
	002 Add W31, W8, 1
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.String get_humanizedVersion()

Disassembly:
	0x039E08BC CMP X0, X2
	0x039E08C0 CSET W8, NE
	0x039E08C4 CMP X1, X3
	0x039E08C8 CSET W9, NE
	0x039E08CC ORR W0, W8, W9, 0x0
	0x039E08D0 RET
	0x039E08D4 STP X30, X21, [X31 - 0x20]!
	0x039E08D8 STP X20, X19, [X31 + 0x10]
	0x039E08DC ADRP X21, 0xA01000
	0x039E08E0 LDRB W8, [X21 + 0xDBE]
	0x039E08E4 MOV X19, X1
	0x039E08E8 MOV X20, X0
	0x039E08EC TBNZ X8, 0x0, 0x39E0904
	0x039E08F0 ADRP X0, 0x773000
	0x039E08F4 LDR X0, [X0 + 0x360]
	0x039E08F8 BL 0x1C16CF4
	0x039E08FC MOVZ W8, 0x1
	0x039E0900 STRB W8, [X21 + 0xDBE]
	0x039E0904 CBZ X19, 0x39E0978
	0x039E0908 ADRP X21, 0x773000
	0x039E090C LDR X21, [X21 + 0x360]
	0x039E0910 LDR X9, [X19]
	0x039E0914 LDR X8, [X21]
	0x039E0918 CMP X9, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA02000
	006 Move X20, 0x71D000
	007 Move W8, [X21+3500]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x71D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3500], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W1, 2
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Convert.ToString, X0, X1
	033 Return X0

Method: System.String get_humanizedData()

Disassembly:
	0x039E091C B.NE 0x39E0978
	0x039E0920 MOV X0, X19
	0x039E0924 BL 0x1C16E08
	0x039E0928 LDR X1, [X0]
	0x039E092C MOV X0, X20
	0x039E0930 MOV X2, X31
	0x039E0934 BL 0x339A94C
	0x039E0938 TBZ X0, 0x0, 0x39E0978
	0x039E093C LDR X8, [X19]
	0x039E0940 LDR X1, [X21]
	0x039E0944 LDR X8, [X8 + 0x40]
	0x039E0948 LDR X9, [X1 + 0x40]
	0x039E094C CMP X8, X9
	0x039E0950 B.NE 0x39E0988
	0x039E0954 MOV X0, X19
	0x039E0958 ADD X20, X20, 0x8
	0x039E095C BL 0x1C16E08
	0x039E0960 LDR X1, [X0 + 0x8]
	0x039E0964 MOV X0, X20
	0x039E0968 LDP X20, X19, [X31 + 0x10]
	0x039E096C MOV X2, X31
	0x039E0970 LDP X30, X21, [X31], #0x20
	0x039E0974 B 0x339A94C
	0x039E0978 LDP X20, X19, [X31 + 0x10]
	0x039E097C MOV W0, W31
	0x039E0980 LDP X30, X21, [X31], #0x20
	0x039E0984 RET
	0x039E0988 MOV X0, X19
	0x039E098C BL 0x1C171E0
	0x039E0990 STR X30, [X31 - 0x20]!
	0x039E0994 STP X20, X19, [X31 + 0x10]
	0x039E0998 MOV X1, X31
	0x039E099C MOV X19, X0
	0x039E09A0 BL 0x339A95C
	0x039E09A4 MOV W20, W0
	0x039E09A8 ADD X0, X19, 0x8
	0x039E09AC MOV X1, X31
	0x039E09B0 BL 0x339A95C
	0x039E09B4 MOVZ W8, 0x5529
	0x039E09B8 MOVK W8, 0xA5550000
	0x039E09BC MADD W8, W20, W8, W0
	0x039E09C0 LDP X20, X19, [X31 + 0x10]
	0x039E09C4 MOVZ W9, 0xFA1
	0x039E09C8 MOVK W9, 0x30320000
	0x039E09CC ADD W0, W8, W9
	0x039E09D0 LDR X30, [X31], #0x20
	0x039E09D4 RET
	0x039E09D8 MOVZ W0, 0x100
	0x039E09DC RET
	0x039E09E0 LDR X8, [X0]
	0x039E09E4 CBNZ X8, 0x39E09F8
	0x039E09E8 LDR X8, [X0 + 0x8]
	0x039E09EC CBNZ X8, 0x39E09F8
	0x039E09F0 LDR X8, [X0 + 0x10]
	0x039E09F4 CBZ X8, 0x39E0A00
	0x039E09F8 MOV W0, W31
	0x039E09FC RET
	0x039E0A00 LDR X8, [X0 + 0x18]
	0x039E0A04 CMP X8, 0x0
	0x039E0A08 CSET W0, EQ
	0x039E0A0C RET
	0x039E0A10 LDR X8, [X0]
	0x039E0A14 ADDS X31, X8, 0x1
	0x039E0A18 B.NE 0x39E0A34
	0x039E0A1C LDR X8, [X0 + 0x8]
	0x039E0A20 ADDS X31, X8, 0x1
	0x039E0A24 B.NE 0x39E0A34
	0x039E0A28 LDR X8, [X0 + 0x10]
	0x039E0A2C ADDS X31, X8, 0x1
	0x039E0A30 B.EQ 0x39E0A3C
	0x039E0A34 MOV W0, W31
	0x039E0A38 RET
	0x039E0A3C LDR X8, [X0 + 0x18]
	0x039E0A40 ADDS X31, X8, 0x1
	0x039E0A44 CSET W0, EQ
	0x039E0A48 RET
	0x039E0A4C STR X30, [X31 - 0x50]!
	0x039E0A50 STP X26, X25, [X31 + 0x10]
	0x039E0A54 STP X24, X23, [X31 + 0x20]
	0x039E0A58 STP X22, X21, [X31 + 0x30]
	0x039E0A5C STP X20, X19, [X31 + 0x40]
	0x039E0A60 ADRP X21, 0xA01000
	0x039E0A64 ADRP X23, 0x773000
	0x039E0A68 ADRP X24, 0x71E000
	0x039E0A6C ADRP X20, 0x71C000
	0x039E0A70 LDRB W8, [X21 + 0xDBF]
	0x039E0A74 LDR X23, [X23 + 0x318]
	0x039E0A78 LDR X24, [X24 + 0x6D8]
	0x039E0A7C LDR X20, [X20 + 0x9E8]
	0x039E0A80 MOV X19, X0
	0x039E0A84 TBNZ X8, 0x0, 0x39E0AD8
	0x039E0A88 ADRP X0, 0x71C000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xA02000
	009 Move X21, 0x774000
	010 Move X22, 0x71F000
	011 Move X20, 0x71D000
	012 Move W8, [X23+3501]
	013 Move X21, [X21+792]
	014 Move X22, [X22+1752]
	015 Move X20, [X20+2536]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x71D000
	022 Move X0, [X0+2536]
	023 Call 0x1C17CF4
	024 Move X0, 0x71C000
	025 Move X0, [X0+1536]
	026 Call 0x1C17CF4
	027 Move X0, 0x71F000
	028 Move X0, [X0+1752]
	029 Call 0x1C17CF4
	030 Move X0, 0x774000
	031 Move X0, [X0+824]
	032 Call 0x1C17CF4
	033 Move X0, 0x774000
	034 Move X0, [X0+832]
	035 Call 0x1C17CF4
	036 Move X0, 0x774000
	037 Move X0, [X0+792]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X23+3501], W8
	041 Move W8, 32
	042 Add X0, X31, 12
	043 Move X1, X31
	044 Move [X31+12], W8
	045 Call UInt32.ToString, X0
	046 Move X8, [X21]
	047 Move X2, [X22]
	048 Move X1, X0
	049 Move X3, X31
	050 Move X0, X8
	051 Call String.Concat, X0, X1, X2
	052 Move X8, [X20]
	053 Move W20, [X19]
	054 Move X19, X0
	055 Move W9, [X8+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {60}
	058 Move X0, X8
	059 Call 0x1C17DFC
	060 Move W1, 2
	061 Move X0, X20
	062 Move X2, X31
	063 Call Convert.ToString, X0, X1
	064 Move X1, X0
	065 Move X0, X19
	066 Move X2, X31
	067 Call String.Format, X0, X1
	068 Compare X0, 0
	069 JumpIfEqual {105}
	070 Move X19, 0x71C000
	071 Move X20, 0x774000
	072 Move X21, 0x774000
	073 Move X19, [X19+1536]
	074 Move X20, [X20+832]
	075 Move X21, [X21+824]
	076 Move W1, 32
	077 Move W2, 48
	078 Move X3, X31
	079 Call String.Replace, X0, X1, X2
	080 Move X8, [X19]
	081 Move X19, X0
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move X1, [X20]
	088 Move X2, [X21]
	089 Move X0, X19
	090 Move X3, X31
	091 Call Regex.Replace, X0, X1, X2
	092 Compare X0, 0
	093 JumpIfEqual {105}
	094 Move W1, 46
	095 Move X2, X31
	096 Call String.TrimEnd, X0, X1
	097 Move X20, [X31+48]
	098 Move X19, [X31+56]
	099 Move X22, [X31+32]
	100 Move X21, [X31+40]
	101 Move X30, [X31+16]
	102 Move X23, [X31+24]
	103 Add X31, X31, 64
	104 Return X0
	105 Call 0x1C17F20

Method: System.Boolean get_Item(System.UInt32 index)

Disassembly:
	0x039E0A8C LDR X0, [X0 + 0x9E8]
	0x039E0A90 BL 0x1C16CF4
	0x039E0A94 ADRP X0, 0x71B000
	0x039E0A98 LDR X0, [X0 + 0x600]

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction LSRV not yet implemented."
	003 And W0, W8, 1
	004 Return X0

Method: System.Void set_Item(System.UInt32 index, System.Boolean value)

Disassembly:
	0x039E0AA8 BL 0x1C16CF4
	0x039E0AAC ADRP X0, 0x773000
	0x039E0AB0 LDR X0, [X0 + 0x338]
	0x039E0AB4 BL 0x1C16CF4
	0x039E0AB8 ADRP X0, 0x773000
	0x039E0ABC LDR X0, [X0 + 0x340]
	0x039E0AC0 BL 0x1C16CF4
	0x039E0AC4 ADRP X0, 0x773000
	0x039E0AC8 LDR X0, [X0 + 0x318]

ISIL:
	001 Move W8, [X0]
	002 Move W9, 1
	003 NotImplemented "Instruction LSLV not yet implemented."
	004 And W31, W2, 1
	005 Or W10, W8, W9
	006 NotImplemented "Instruction BIC not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move [X0], W8
	009 Return 

Method: System.Void .ctor(System.UInt32 initValue)

Disassembly:
	0x039E0AF0 LDR X2, [X24]
	0x039E0AF4 MOV X1, X0

ISIL:
	001 Move [X0], W1
	002 Return 

Method: System.Void .ctor(System.Collections.Generic.IEnumerable`1<System.UInt32> bitIndexTrue)

Disassembly:
	0x039E0AF8 MOV X3, X31
	0x039E0AFC MOV X0, X8
	0x039E0B00 BL 0x32274B8
	0x039E0B04 LDR X8, [X20]
	0x039E0B08 LDR X21, [X19 + 0x18]
	0x039E0B0C MOV X20, X0
	0x039E0B10 LDR W9, [X8 + 0xE0]
	0x039E0B14 CBNZ W9, 0x39E0B20
	0x039E0B18 MOV X0, X8
	0x039E0B1C BL 0x1C16DFC
	0x039E0B20 MOVZ W1, 0x2
	0x039E0B24 MOV X0, X21
	0x039E0B28 MOV X2, X31
	0x039E0B2C BL 0x3322520
	0x039E0B30 MOV X1, X0
	0x039E0B34 MOV X0, X20
	0x039E0B38 MOV X2, X31
	0x039E0B3C BL 0x321EFD0
	0x039E0B40 CBZ X0, 0x39E0D48
	0x039E0B44 ADRP X20, 0x71B000
	0x039E0B48 ADRP X25, 0x773000
	0x039E0B4C ADRP X26, 0x773000
	0x039E0B50 LDR X20, [X20 + 0x600]
	0x039E0B54 LDR X25, [X25 + 0x340]
	0x039E0B58 LDR X26, [X26 + 0x338]
	0x039E0B5C MOVZ W1, 0x20
	0x039E0B60 MOVZ W2, 0x30
	0x039E0B64 MOV X3, X31
	0x039E0B68 BL 0x32296D0
	0x039E0B6C LDR X8, [X20]
	0x039E0B70 MOV X20, X0
	0x039E0B74 LDR W9, [X8 + 0xE0]
	0x039E0B78 CBNZ W9, 0x39E0B84
	0x039E0B7C MOV X0, X8
	0x039E0B80 BL 0x1C16DFC
	0x039E0B84 LDR X1, [X25]
	0x039E0B88 LDR X2, [X26]
	0x039E0B8C MOV X0, X20
	0x039E0B90 MOV X3, X31
	0x039E0B94 BL 0x3632D08
	0x039E0B98 MOV X20, X0
	0x039E0B9C MOVZ W22, 0x40
	0x039E0BA0 ADD X0, X31, 0xC
	0x039E0BA4 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xA02000
	008 Move W8, [X21+3502]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x774000
	016 Move X0, [X0+800]
	017 Call 0x1C17CF4
	018 Move X0, 0x774000
	019 Move X0, [X0+808]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3502], W8
	023 Move [X20], W31
	024 Compare X19, 0
	025 JumpIfEqual {45}
	026 Move X8, 0x774000
	027 Move X8, [X8+800]
	028 Move X0, X19
	029 Move X1, [X8]
	030 Call Enumerable.Count, X0
	031 Subtract W21, W0, 1
	032 Move X22, 0x774000
	033 Move X22, [X22+808]
	034 Move W23, 1
	035 Move X2, [X22]
	036 Move X0, X19
	037 Move W1, W21
	038 Call Enumerable.ElementAt, X0, X1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X20]
	041 NotImplemented "Instruction LSLV not yet implemented."
	042 Or W8, W8, W9
	043 Move [X20], W8
	044 Subtract W21, W21, 1
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Return 

Method: UnityEngine.Rendering.IBitArray BitAnd(UnityEngine.Rendering.IBitArray other)

Disassembly:
	0x039E0BA8 STR W22, [X31 + 0xC]
	0x039E0BAC BL 0x3399B00
	0x039E0BB0 LDR X8, [X23]
	0x039E0BB4 LDR X2, [X24]
	0x039E0BB8 MOV X1, X0
	0x039E0BBC MOV X3, X31
	0x039E0BC0 MOV X0, X8
	0x039E0BC4 BL 0x32274B8
	0x039E0BC8 LDR X8, [X19 + 0x10]
	0x039E0BCC MOV X21, X0
	0x039E0BD0 MOVZ W1, 0x2
	0x039E0BD4 MOV X2, X31
	0x039E0BD8 MOV X0, X8
	0x039E0BDC BL 0x3322520
	0x039E0BE0 MOV X1, X0
	0x039E0BE4 MOV X0, X21
	0x039E0BE8 MOV X2, X31
	0x039E0BEC BL 0x321EFD0
	0x039E0BF0 CBZ X0, 0x39E0D48
	0x039E0BF4 MOVZ W1, 0x20
	0x039E0BF8 MOVZ W2, 0x30
	0x039E0BFC MOV X3, X31
	0x039E0C00 BL 0x32296D0
	0x039E0C04 LDR X1, [X25]
	0x039E0C08 LDR X2, [X26]
	0x039E0C0C MOV X3, X31
	0x039E0C10 BL 0x3632D08
	0x039E0C14 MOV X21, X0
	0x039E0C18 ADD X0, X31, 0xC
	0x039E0C1C MOV X1, X31
	0x039E0C20 STR W22, [X31 + 0xC]
	0x039E0C24 BL 0x3399B00
	0x039E0C28 LDR X8, [X23]
	0x039E0C2C LDR X2, [X24]
	0x039E0C30 MOV X1, X0
	0x039E0C34 MOV X3, X31
	0x039E0C38 MOV X0, X8
	0x039E0C3C BL 0x32274B8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA02000
	007 Move W8, [X21+3503]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x774000
	015 Move X0, [X0+848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3503], W8
	019 Compare X19, 0
	020 JumpIfEqual {43}
	021 Move X21, 0x774000
	022 Move X21, [X21+848]
	023 Move X8, [X19]
	024 Move X1, [X21]
	025 Move X8, [X8+64]
	026 Move X9, [X1+64]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W20, [X20]
	029 Move X0, X19
	030 Call 0x1C17E08
	031 Move W8, [X0]
	032 Move X0, [X21]
	033 Add X1, X31, 8
	034 And W8, W8, W20
	035 Move [X31+8], W8
	036 Call 0x1C17E04
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Add X31, X31, 48
	042 Return X0
	043 Call 0x1C17F20
	044 Move X0, X19
	045 Call 0x1C181E0

Method: UnityEngine.Rendering.IBitArray BitOr(UnityEngine.Rendering.IBitArray other)

Disassembly:
	0x039E0C48 MOVZ W1, 0x2
	0x039E0C4C MOV X2, X31
	0x039E0C50 MOV X0, X8
	0x039E0C54 BL 0x3322520
	0x039E0C58 MOV X1, X0
	0x039E0C5C MOV X0, X22
	0x039E0C60 MOV X2, X31
	0x039E0C64 BL 0x321EFD0
	0x039E0C68 CBZ X0, 0x39E0D48
	0x039E0C6C MOVZ W1, 0x20
	0x039E0C70 MOVZ W2, 0x30
	0x039E0C74 MOV X3, X31
	0x039E0C78 BL 0x32296D0
	0x039E0C7C LDR X1, [X25]
	0x039E0C80 LDR X2, [X26]
	0x039E0C84 MOV X3, X31
	0x039E0C88 BL 0x3632D08
	0x039E0C8C MOV X22, X0
	0x039E0C90 MOVZ W8, 0x40
	0x039E0C94 ADD X0, X31, 0xC
	0x039E0C98 MOV X1, X31
	0x039E0C9C STR W8, [X31 + 0xC]
	0x039E0CA0 BL 0x3399B00
	0x039E0CA4 LDR X8, [X23]
	0x039E0CA8 LDR X2, [X24]
	0x039E0CAC MOV X1, X0
	0x039E0CB0 MOV X3, X31
	0x039E0CB4 MOV X0, X8
	0x039E0CB8 BL 0x32274B8
	0x039E0CBC LDR X8, [X19]
	0x039E0CC0 MOV X19, X0
	0x039E0CC4 MOVZ W1, 0x2
	0x039E0CC8 MOV X2, X31
	0x039E0CCC MOV X0, X8
	0x039E0CD0 BL 0x3322520
	0x039E0CD4 MOV X1, X0
	0x039E0CD8 MOV X0, X19
	0x039E0CDC MOV X2, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA02000
	007 Move W8, [X21+3504]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x774000
	015 Move X0, [X0+848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3504], W8
	019 Compare X19, 0
	020 JumpIfEqual {43}
	021 Move X21, 0x774000
	022 Move X21, [X21+848]
	023 Move X8, [X19]
	024 Move X1, [X21]
	025 Move X8, [X8+64]
	026 Move X9, [X1+64]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W20, [X20]
	029 Move X0, X19
	030 Call 0x1C17E08
	031 Move W8, [X0]
	032 Move X0, [X21]
	033 Add X1, X31, 8
	034 Or W8, W8, W20
	035 Move [X31+8], W8
	036 Call 0x1C17E04
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Add X31, X31, 48
	042 Return X0
	043 Call 0x1C17F20
	044 Move X0, X19
	045 Call 0x1C181E0

Method: UnityEngine.Rendering.IBitArray BitNot()

Disassembly:
	0x039E0CE8 MOVZ W1, 0x20
	0x039E0CEC MOVZ W2, 0x30
	0x039E0CF0 MOV X3, X31
	0x039E0CF4 BL 0x32296D0
	0x039E0CF8 LDR X1, [X25]
	0x039E0CFC LDR X2, [X26]
	0x039E0D00 MOV X3, X31
	0x039E0D04 BL 0x3632D08
	0x039E0D08 CBZ X0, 0x39E0D48
	0x039E0D0C MOVZ W1, 0x2E
	0x039E0D10 MOV X2, X31
	0x039E0D14 BL 0x322BC38
	0x039E0D18 MOV X3, X0
	0x039E0D1C MOV X0, X20
	0x039E0D20 MOV X1, X21
	0x039E0D24 MOV X2, X22
	0x039E0D28 MOV X4, X31
	0x039E0D2C BL 0x32277C4
	0x039E0D30 LDP X20, X19, [X31 + 0x40]
	0x039E0D34 LDP X22, X21, [X31 + 0x30]
	0x039E0D38 LDP X24, X23, [X31 + 0x20]
	0x039E0D3C LDP X26, X25, [X31 + 0x10]
	0x039E0D40 LDR X30, [X31], #0x50
	0x039E0D44 RET

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA02000
	007 Move X20, 0x774000
	008 Move W8, [X21+3505]
	009 Move X20, [X20+848]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x774000
	016 Move X0, [X0+848]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3505], W8
	020 Move W8, [X19]
	021 Move X0, [X20]
	022 Add X1, X31, 8
	023 NotImplemented "Instruction ORN not yet implemented."
	024 Move [X31+8], W8
	025 Call 0x1C17E04
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Add X31, X31, 48
	031 Return X0

Method: UnityEngine.Rendering.BitArray32 op_OnesComplement(UnityEngine.Rendering.BitArray32 a)

Disassembly:
	0x039E0D48 BL 0x1C16F20
	0x039E0D4C SUBS W8, W1, 0x80

ISIL:
	001 NotImplemented "Instruction ORN not yet implemented."
	002 Return X0

Method: UnityEngine.Rendering.BitArray32 op_BitwiseOr(UnityEngine.Rendering.BitArray32 a, UnityEngine.Rendering.BitArray32 b)

Disassembly:
	0x039E0CE0 BL 0x321EFD0
	0x039E0CE4 CBZ X0, 0x39E0D48

ISIL:
	001 Or W0, W1, W0
	002 Return X0

Method: UnityEngine.Rendering.BitArray32 op_BitwiseAnd(UnityEngine.Rendering.BitArray32 a, UnityEngine.Rendering.BitArray32 b)

Disassembly:
	0x039E0C40 LDR X8, [X19 + 0x8]
	0x039E0C44 MOV X22, X0

ISIL:
	001 And W0, W0, W1
	002 Return X0

Method: System.Boolean op_Equality(UnityEngine.Rendering.BitArray32 a, UnityEngine.Rendering.BitArray32 b)

Disassembly:
	0x039E0D50 B.CC 0x39E0D68
	0x039E0D54 CMP W1, 0xC0
	0x039E0D58 B.CC 0x39E0D84

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Rendering.BitArray32 a, UnityEngine.Rendering.BitArray32 b)

Disassembly:
	0x039E0D5C LDR X9, [X0 + 0x18]
	0x039E0D60 AND W8, W1, 0x3F
	0x039E0D64 B 0x39E0D88

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x039E0D68 ADD X8, X0, 0x8
	0x039E0D6C CMP W1, 0x3F
	0x039E0D70 CSEL X8, X8, X0, HI
	0x039E0D74 LDR X9, [X8]
	0x039E0D78 SUB W8, W1, 0x40
	0x039E0D7C CSEL W8, W8, W1, HI
	0x039E0D80 B 0x39E0D88
	0x039E0D84 LDR X9, [X0 + 0x10]
	0x039E0D88 LSRV X8, X9, X8
	0x039E0D8C AND W0, W8, 0x1
	0x039E0D90 RET
	0x039E0D94 SUBS W8, W0, 0x80
	0x039E0D98 B.CC 0x39E0DAC
	0x039E0D9C CMP W0, 0xC0
	0x039E0DA0 B.CC 0x39E0DC0
	0x039E0DA4 AND W8, W0, 0x3F
	0x039E0DA8 B 0x39E0DC4
	0x039E0DAC SUB W8, W0, 0x40
	0x039E0DB0 CMP W0, 0x3F
	0x039E0DB4 CSEL W8, W8, W0, HI
	0x039E0DB8 CSEL X4, X2, X1, HI
	0x039E0DBC B 0x39E0DC4
	0x039E0DC0 MOV X4, X3
	0x039E0DC4 LSRV X8, X4, X8
	0x039E0DC8 AND W0, W8, 0x1
	0x039E0DCC RET
	0x039E0DD0 MOV X8, X0
	0x039E0DD4 ADD X9, X0, 0x8
	0x039E0DD8 ADD X3, X0, 0x10
	0x039E0DDC ADD X4, X0, 0x18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA02000
	006 Move W8, [X21+3506]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x774000
	014 Move X0, [X0+848]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3506], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x774000
	021 Move X8, [X8+848]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X0, X20
	027 Call 0x1C17E08
	028 Move W8, [X0]
	029 Move W9, [X19]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x039E0DE0 AND W5, W2, 0x1
	0x039E0DE4 MOV W0, W1
	0x039E0DE8 MOV X1, X8
	0x039E0DEC MOV X2, X9
	0x039E0DF0 B 0x39E0DF4
	0x039E0DF4 CMP W0, 0x3F
	0x039E0DF8 B.HI 0x39E0E20
	0x039E0DFC LDR X8, [X1]

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X31
	003 Call UInt32.GetHashCode, X0
	004 Move W8, 0x156D
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 Add W0, W0, W8
	007 Move X30, [X31+16]
	008 Return X0

