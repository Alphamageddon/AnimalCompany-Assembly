Type: UnityEngine.Rendering.Texture2DAtlasDynamic

Method: UnityEngine.Rendering.RTHandle get_AtlasTexture()

Disassembly:
	0x039DD7C8 LDR X1, [X9]
	0x039DD7CC BL 0x39DDDCC

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void .ctor(System.Int32 width, System.Int32 height, System.Int32 capacity, UnityEngine.Experimental.Rendering.GraphicsFormat format)

Disassembly:
	0x039DD7D0 LDR X8, [X22]
	0x039DD7D4 MOV X1, X31
	0x039DD7D8 LDR X8, [X8 + 0xB8]
	0x039DD7DC STR X0, [X8 + 0x48]
	0x039DD7E0 BL 0x39D67FC
	0x039DD7E4 LDR X8, [X22]
	0x039DD7E8 MOV X1, X31
	0x039DD7EC LDR X9, [X8 + 0xB8]
	0x039DD7F0 LDR X8, [X9 + 0x88]
	0x039DD7F4 STR X0, [X9 + 0x58]
	0x039DD7F8 MOV X0, X8
	0x039DD7FC BL 0x39CB45C
	0x039DD800 LDR X0, [X23]
	0x039DD804 BL 0x1C16F10
	0x039DD808 MOVZ W1, 0x1
	0x039DD80C MOVZ W2, 0x1
	0x039DD810 MOVZ W3, 0x4
	0x039DD814 MOV W4, W31
	0x039DD818 MOV X5, X31
	0x039DD81C MOV X19, X0
	0x039DD820 BL 0x3C1BEA4
	0x039DD824 CBZ X19, 0x39DD9B8
	0x039DD828 ADRP X8, 0x776000
	0x039DD82C LDR X8, [X8 + 0x288]
	0x039DD830 MOV X0, X19
	0x039DD834 MOV X2, X31
	0x039DD838 LDR X1, [X8]
	0x039DD83C BL 0x3C38A84
	0x039DD840 LDR X8, [X22]
	0x039DD844 FMOV S0, W31
	0x039DD848 FMOV S1, W31
	0x039DD84C FMOV S2, W31
	0x039DD850 LDR X8, [X8 + 0xB8]
	0x039DD854 FMOV S3, 1
	0x039DD858 MOV X0, X19
	0x039DD85C MOV W1, W31
	0x039DD860 MOV W2, W31
	0x039DD864 MOV X3, X31
	0x039DD868 STR X19, [X8 + 0x68]
	0x039DD86C BL 0x3C1C294
	0x039DD870 LDR X8, [X22]
	0x039DD874 LDR X8, [X8 + 0xB8]
	0x039DD878 LDR X0, [X8 + 0x68]
	0x039DD87C CBZ X0, 0x39DD9B8
	0x039DD880 MOV X1, X31
	0x039DD884 BL 0x3C1C540
	0x039DD888 LDR X8, [X22]
	0x039DD88C MOV X1, X31
	0x039DD890 LDR X8, [X8 + 0xB8]
	0x039DD894 LDR X0, [X8 + 0x68]
	0x039DD898 BL 0x39D67FC
	0x039DD89C LDR X8, [X22]
	0x039DD8A0 MOV X1, X31
	0x039DD8A4 LDR X9, [X8 + 0xB8]
	0x039DD8A8 LDR X8, [X9 + 0x80]
	0x039DD8AC STR X0, [X9 + 0x88]
	0x039DD8B0 MOV X0, X8
	0x039DD8B4 BL 0x39CB45C
	0x039DD8B8 LDR X8, [X22]
	0x039DD8BC ADRP X9, 0x776000
	0x039DD8C0 LDR X8, [X8 + 0xB8]
	0x039DD8C4 LDR X9, [X9 + 0x2A0]
	0x039DD8C8 LDR X0, [X8 + 0x68]
	0x039DD8CC LDR X1, [X9]
	0x039DD8D0 BL 0x39DDDCC
	0x039DD8D4 LDR X8, [X22]
	0x039DD8D8 MOV X1, X31
	0x039DD8DC LDR X8, [X8 + 0xB8]
	0x039DD8E0 STR X0, [X8 + 0x78]
	0x039DD8E4 BL 0x39D67FC
	0x039DD8E8 LDR X8, [X22]
	0x039DD8EC MOV X1, X31
	0x039DD8F0 LDR X9, [X8 + 0xB8]
	0x039DD8F4 LDR X8, [X9 + 0x90]
	0x039DD8F8 STR X0, [X9 + 0x80]
	0x039DD8FC MOV X0, X8
	0x039DD900 BL 0x39CB45C
	0x039DD904 ADRP X8, 0x776000
	0x039DD908 LDR X8, [X8 + 0x270]
	0x039DD90C LDR X0, [X8]
	0x039DD910 BL 0x39DDFAC
	0x039DD914 LDR X8, [X22]
	0x039DD918 MOV X1, X31
	0x039DD91C LDR X8, [X8 + 0xB8]
	0x039DD920 STR X0, [X8 + 0x70]
	0x039DD924 BL 0x39D67FC
	0x039DD928 LDR X8, [X22]
	0x039DD92C MOV X1, X31
	0x039DD930 LDR X9, [X8 + 0xB8]
	0x039DD934 LDR X8, [X9 + 0xA8]
	0x039DD938 STR X0, [X9 + 0x90]
	0x039DD93C MOV X0, X8
	0x039DD940 BL 0x39CB45C
	0x039DD944 MOV X0, X31
	0x039DD948 BL 0x3C1B370
	0x039DD94C MOV X1, X31
	0x039DD950 BL 0x39D67FC
	0x039DD954 LDR X8, [X22]
	0x039DD958 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X30
	003 Move [X31+112], X28
	004 Move [X31+120], X27
	005 Move [X31+128], X26
	006 Move [X31+136], X25
	007 Move [X31+144], X24
	008 Move [X31+152], X23
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X24, 0xA05000
	014 Move X27, 0x774000
	015 Move W8, [X24+3456]
	016 Move X27, [X27+2480]
	017 Move W23, W4
	018 Move W20, W3
	019 Move W21, W2
	020 Move W22, W1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0x777000
	027 Move X0, [X0+568]
	028 Call 0x1C17CF4
	029 Move X0, 0x777000
	030 Move X0, [X0+576]
	031 Call 0x1C17CF4
	032 Move X0, 0x777000
	033 Move X0, [X0+584]
	034 Call 0x1C17CF4
	035 Move X0, 0x774000
	036 Move X0, [X0+2480]
	037 Call 0x1C17CF4
	038 Move X0, 0x717000
	039 Move X0, [X0+2440]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X24+3456], W8
	043 Move X28, 0x717000
	044 Move X26, 0x777000
	045 Move X25, 0x777000
	046 Move X24, 0x777000
	047 Move X28, [X28+2440]
	048 Move X26, [X26+568]
	049 Move X25, [X25+584]
	050 Move X24, [X24+576]
	051 Move X0, X19
	052 Move X1, X31
	053 Call Object..ctor, X0
	054 Move [X19+28], W22
	055 Move [X19+32], W21
	056 Move [X19+36], W23
	057 Move X0, [X27]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X8, [X28]
	063 Move W27, 1
	064 Move S0, W31
	065 Move W2, 1
	066 Move W6, 1
	067 Move W7, 2
	068 Move W0, W22
	069 Move W1, W21
	070 Move W3, W31
	071 Move W4, W23
	072 Move W5, W31
	073 Move [X31+80], X8
	074 Move [X31+88], X31
	075 Move [X31+72], W31
	076 Move [X31+64], W31
	077 Move [X31+56], W31
	078 Move [X31+48], W31
	079 Move [X31+24], W31
	080 Move [X31+16], W31
	081 Move [X31+40], W27
	082 Move [X31+32], W27
	083 Move [X31+8], W27
	084 Move [X31], W31
	085 Call RTHandles.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, V0, X13, X14, X15, X16, X17, X18
	086 Move [X19+16], X0
	087 Move [X19+24], W27
	088 Move X0, [X26]
	089 Call 0x1C17F10
	090 Move W1, W22
	091 Move W2, W21
	092 Move W3, W20
	093 Move X23, X0
	094 Call AtlasAllocatorDynamic..ctor, X0, X1, X2, X3
	095 Move [X19+40], X23
	096 Move X0, [X25]
	097 Call 0x1C17F10
	098 Move X2, [X24]
	099 Move W1, W20
	100 Move X21, X0
	101 Call Dictionary`2<Int32, Vector4>..ctor, X0, X1
	102 Move [X19+48], X21
	103 Move X20, [X31+176]
	104 Move X19, [X31+184]
	105 Move X22, [X31+160]
	106 Move X21, [X31+168]
	107 Move X24, [X31+144]
	108 Move X23, [X31+152]
	109 Move X26, [X31+128]
	110 Move X25, [X31+136]
	111 Move X28, [X31+112]
	112 Move X27, [X31+120]
	113 Move X30, [X31+96]
	114 Add X31, X31, 192
	115 Return 

Method: System.Void .ctor(System.Int32 width, System.Int32 height, System.Int32 capacity, UnityEngine.Rendering.RTHandle atlasTexture)

Disassembly:
	0x039DD95C LDR X9, [X8 + 0xB8]
	0x039DD960 LDR X8, [X9 + 0xA0]
	0x039DD964 STR X0, [X9 + 0xA8]
	0x039DD968 MOV X0, X8
	0x039DD96C BL 0x39CB45C
	0x039DD970 MOV X0, X31
	0x039DD974 BL 0x3C1B370
	0x039DD978 ADRP X8, 0x776000
	0x039DD97C LDR X8, [X8 + 0x290]
	0x039DD980 LDR X1, [X8]
	0x039DD984 BL 0x39DDDCC
	0x039DD988 LDR X8, [X22]
	0x039DD98C MOV X1, X31
	0x039DD990 LDR X8, [X8 + 0xB8]
	0x039DD994 STR X0, [X8 + 0x98]
	0x039DD998 BL 0x39D67FC
	0x039DD99C LDR X8, [X22]
	0x039DD9A0 LDR X8, [X8 + 0xB8]
	0x039DD9A4 STR X0, [X8 + 0xA0]
	0x039DD9A8 LDP X20, X19, [X31 + 0x20]
	0x039DD9AC LDP X22, X21, [X31 + 0x10]
	0x039DD9B0 LDP X30, X23, [X31], #0x30
	0x039DD9B4 RET
	0x039DD9B8 BL 0x1C16F20
	0x039DD9BC SUB X31, X31, 0xC0
	0x039DD9C0 STR X30, [X31 + 0x80]
	0x039DD9C4 STP X24, X23, [X31 + 0x90]
	0x039DD9C8 STP X22, X21, [X31 + 0xA0]
	0x039DD9CC STP X20, X19, [X31 + 0xB0]
	0x039DD9D0 ADRP X21, 0xA04000
	0x039DD9D4 ADRP X22, 0x718000
	0x039DD9D8 LDRB W8, [X21 + 0xD94]
	0x039DD9DC LDR X22, [X22 + 0x130]
	0x039DD9E0 MOV X19, X1
	0x039DD9E4 MOV X20, X0
	0x039DD9E8 TBNZ X8, 0x0, 0x39DDA30
	0x039DD9EC ADRP X0, 0x718000
	0x039DD9F0 LDR X0, [X0 + 0x130]
	0x039DD9F4 BL 0x1C16CF4
	0x039DD9F8 ADRP X0, 0x773000
	0x039DD9FC LDR X0, [X0 + 0x618]
	0x039DDA00 BL 0x1C16CF4
	0x039DDA04 ADRP X0, 0x776000
	0x039DDA08 LDR X0, [X0 + 0x2B0]
	0x039DDA0C BL 0x1C16CF4
	0x039DDA10 ADRP X0, 0x776000
	0x039DDA14 LDR X0, [X0 + 0x2B8]
	0x039DDA18 BL 0x1C16CF4
	0x039DDA1C ADRP X0, 0x776000
	0x039DDA20 LDR X0, [X0 + 0x2C0]
	0x039DDA24 BL 0x1C16CF4
	0x039DDA28 MOVZ W8, 0x1
	0x039DDA2C STRB W8, [X21 + 0xD94]
	0x039DDA30 LDR X0, [X22]
	0x039DDA34 BL 0x1C16F10
	0x039DDA38 MOVZ W1, 0x1
	0x039DDA3C MOVZ W2, 0x1
	0x039DDA40 MOVZ W4, 0x25
	0x039DDA44 MOV W3, W31
	0x039DDA48 MOV X5, X31
	0x039DDA4C MOV X21, X0
	0x039DDA50 BL 0x3C216E8
	0x039DDA54 CBZ X21, 0x39DDC0C
	0x039DDA58 LDR X8, [X21]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0xA05000
	011 Move W8, [X24+3457]
	012 Move X23, X4
	013 Move W19, W3
	014 Move W21, W2
	015 Move W22, W1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x777000
	022 Move X0, [X0+568]
	023 Call 0x1C17CF4
	024 Move X0, 0x777000
	025 Move X0, [X0+576]
	026 Call 0x1C17CF4
	027 Move X0, 0x777000
	028 Move X0, [X0+584]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X24+3457], W8
	032 Move X0, X20
	033 Move X1, X31
	034 Call Object..ctor, X0
	035 Move [X20+28], W22
	036 Move [X20+32], W21
	037 Compare X23, 0
	038 JumpIfEqual {78}
	039 Move X0, [X23+24]
	040 Compare X0, 0
	041 JumpIfEqual {78}
	042 Move X24, 0x777000
	043 Move X25, 0x777000
	044 Move X26, 0x777000
	045 Move X24, [X24+568]
	046 Move X25, [X25+584]
	047 Move X26, [X26+576]
	048 Move X1, X31
	049 Call RenderTexture.get_graphicsFormat, X0
	050 Move [X20+36], W0
	051 Move [X20+16], X23
	052 Move [X20+24], W31
	053 Move X0, [X24]
	054 Call 0x1C17F10
	055 Move W1, W22
	056 Move W2, W21
	057 Move W3, W19
	058 Move X23, X0
	059 Call AtlasAllocatorDynamic..ctor, X0, X1, X2, X3
	060 Move [X20+40], X23
	061 Move X0, [X25]
	062 Call 0x1C17F10
	063 Move X2, [X26]
	064 Move W1, W19
	065 Move X21, X0
	066 Call Dictionary`2<Int32, Vector4>..ctor, X0, X1
	067 Move [X20+48], X21
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X22, [X31+48]
	071 Move X21, [X31+56]
	072 Move X24, [X31+32]
	073 Move X23, [X31+40]
	074 Move X26, [X31+16]
	075 Move X25, [X31+24]
	076 Move X30, [X31+80]
	077 Return 
	078 Call 0x1C17F20

Method: System.Void Release()

Disassembly:
	0x039DDA5C ADRP X23, 0x773000
	0x039DDA60 MOVZ W1, 0x5
	0x039DDA64 MOV X0, X21
	0x039DDA68 LDP X9, X2, [X8 + 0x1D8]
	0x039DDA6C LDR X23, [X23 + 0x618]
	0x039DDA70 BLR X9
	0x039DDA74 LDR X0, [X23]
	0x039DDA78 LDR W8, [X0 + 0xE0]
	0x039DDA7C CBNZ W8, 0x39DDA84
	0x039DDA80 BL 0x1C16DFC
	0x039DDA84 ADRP X24, 0xA04000
	0x039DDA88 LDRB W8, [X24 + 0xB3B]
	0x039DDA8C CBNZ W8, 0x39DDAA4
	0x039DDA90 ADRP X0, 0x773000
	0x039DDA94 LDR X0, [X0 + 0x618]
	0x039DDA98 BL 0x1C16CF4
	0x039DDA9C MOVZ W8, 0x1
	0x039DDAA0 STRB W8, [X24 + 0xB3B]
	0x039DDAA4 LDR X0, [X23]
	0x039DDAA8 ADRP X22, 0x776000
	0x039DDAAC LDR W8, [X0 + 0xE0]
	0x039DDAB0 LDR X22, [X22 + 0x2C0]
	0x039DDAB4 CBNZ W8, 0x39DDAC0
	0x039DDAB8 BL 0x1C16DFC
	0x039DDABC LDR X0, [X23]
	0x039DDAC0 LDR X8, [X0 + 0xB8]
	0x039DDAC4 MOV X0, X21
	0x039DDAC8 MOV X2, X31
	0x039DDACC LDR W1, [X8]
	0x039DDAD0 BL 0x3C20604

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA05000
	005 Move W8, [X20+3458]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x774000
	012 Move X0, [X0+2480]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3458], W8
	016 Move X0, X19
	017 Call Texture2DAtlasDynamic.ResetAllocator, X0
	018 Move W8, [X19+24]
	019 Compare W8, 0
	020 JumpIfEqual {36}
	021 Move X8, 0x774000
	022 Move X8, [X8+2480]
	023 Move X19, [X19+16]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Call RTHandles.Release, X0
	035 Return 
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return 

Method: System.Void ResetAllocator()

Disassembly:
	0x039DDAD4 MOV X0, X21
	0x039DDAD8 MOV W1, W31
	0x039DDADC MOV X2, X31
	0x039DDAE0 BL 0x3C20260
	0x039DDAE4 MOV X0, X21
	0x039DDAE8 MOV W1, W31
	0x039DDAEC MOV X2, X31
	0x039DDAF0 BL 0x3C20584
	0x039DDAF4 MOVZ W1, 0x1
	0x039DDAF8 MOV X0, X21
	0x039DDAFC MOV X2, X31
	0x039DDB00 BL 0x3C2070C
	0x039DDB04 LDR X1, [X22]
	0x039DDB08 MOV X0, X21
	0x039DDB0C MOV X2, X31
	0x039DDB10 BL 0x3C38A84
	0x039DDB14 MOV X0, X21
	0x039DDB18 MOV X1, X31
	0x039DDB1C BL 0x3C20A14
	0x039DDB20 CBZ X19, 0x39DDC0C
	0x039DDB24 ADRP X8, 0x776000
	0x039DDB28 LDR X8, [X8 + 0x2B0]
	0x039DDB2C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA05000
	005 Move W8, [X20+3459]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x777000
	012 Move X0, [X0+592]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3459], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Call AtlasAllocatorDynamic.Release, X0
	020 Move X0, [X19+48]
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0x777000
	024 Move X8, [X8+592]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, [X8]
	028 Move X30, [X31+32]
	029 Call Dictionary`2<Int32, Vector4>.Clear, X0
	030 Return 
	031 Call 0x1C17F20

Method: System.Boolean AddTexture(UnityEngine.Rendering.CommandBuffer cmd, out UnityEngine.Vector4 scaleOffset, UnityEngine.Texture texture)

Disassembly:
	0x039DDB30 MOV X2, X31
	0x039DDB34 LDR X1, [X8]
	0x039DDB38 BL 0x3C3B40C
	0x039DDB3C MOV W22, W0
	0x039DDB40 ADD X8, X31, 0x28
	0x039DDB44 MOV X0, X21
	0x039DDB48 MOV X1, X31
	0x039DDB4C BL 0x3C4B274
	0x039DDB50 LDUR V0, [X31 + 0x28]
	0x039DDB54 LDUR V1, [X31 + 0x38]
	0x039DDB58 LDR X8, [X31 + 0x48]
	0x039DDB5C STP V0, V1, [X31 + 0x50]
	0x039DDB60 STR X8, [X31 + 0x70]
	0x039DDB64 CBZ X20, 0x39DDC0C
	0x039DDB68 ADRP X8, 0x776000
	0x039DDB6C LDR X8, [X8 + 0x2B8]
	0x039DDB70 LDP V0, V1, [X31 + 0x50]
	0x039DDB74 LDR X9, [X31 + 0x70]
	0x039DDB78 ADD X4, X31, 0x0
	0x039DDB7C LDR X3, [X8]
	0x039DDB80 MOV X0, X20
	0x039DDB84 MOV X1, X19
	0x039DDB88 MOV W2, W22
	0x039DDB8C MOV X5, X31
	0x039DDB90 STP V0, V1, [X31]
	0x039DDB94 STR X9, [X31 + 0x20]
	0x039DDB98 BL 0x3C4EC10
	0x039DDB9C LDRB W8, [X24 + 0xB3B]
	0x039DDBA0 CBNZ W8, 0x39DDBB8
	0x039DDBA4 ADRP X0, 0x773000
	0x039DDBA8 LDR X0, [X0 + 0x618]
	0x039DDBAC BL 0x1C16CF4
	0x039DDBB0 MOVZ W8, 0x1
	0x039DDBB4 STRB W8, [X24 + 0xB3B]
	0x039DDBB8 LDR X0, [X23]
	0x039DDBBC LDR W8, [X0 + 0xE0]
	0x039DDBC0 CBNZ W8, 0x39DDBCC
	0x039DDBC4 BL 0x1C16DFC
	0x039DDBC8 LDR X0, [X23]
	0x039DDBCC LDR X8, [X0 + 0xB8]
	0x039DDBD0 MOVZ W3, 0x1
	0x039DDBD4 MOVZ W4, 0x1
	0x039DDBD8 MOV X0, X20
	0x039DDBDC LDR W5, [X8]
	0x039DDBE0 MOV X1, X19
	0x039DDBE4 MOV W2, W22
	0x039DDBE8 MOV X6, X31
	0x039DDBEC BL 0x3C4ED78
	0x039DDBF0 MOV X0, X21
	0x039DDBF4 LDP X20, X19, [X31 + 0xB0]
	0x039DDBF8 LDP X22, X21, [X31 + 0xA0]
	0x039DDBFC LDP X24, X23, [X31 + 0x90]
	0x039DDC00 LDR X30, [X31 + 0x80]
	0x039DDC04 ADD X31, X31, 0xC0
	0x039DDC08 RET
	0x039DDC0C BL 0x1C16F20
	0x039DDC10 SUB X31, X31, 0xB0
	0x039DDC14 STR X30, [X31 + 0x80]
	0x039DDC18 STP X22, X21, [X31 + 0x90]
	0x039DDC1C STP X20, X19, [X31 + 0xA0]
	0x039DDC20 ADRP X21, 0xA04000
	0x039DDC24 ADRP X22, 0x718000
	0x039DDC28 LDRB W8, [X21 + 0xD95]
	0x039DDC2C LDR X22, [X22 + 0x130]
	0x039DDC30 MOV X19, X1
	0x039DDC34 MOV X20, X0
	0x039DDC38 TBNZ X8, 0x0, 0x39DDC74
	0x039DDC3C ADRP X0, 0x718000
	0x039DDC40 LDR X0, [X0 + 0x130]
	0x039DDC44 BL 0x1C16CF4
	0x039DDC48 ADRP X0, 0x776000
	0x039DDC4C LDR X0, [X0 + 0x2C8]
	0x039DDC50 BL 0x1C16CF4
	0x039DDC54 ADRP X0, 0x776000
	0x039DDC58 LDR X0, [X0 + 0x2D0]
	0x039DDC5C BL 0x1C16CF4
	0x039DDC60 ADRP X0, 0x776000
	0x039DDC64 LDR X0, [X0 + 0x2D8]
	0x039DDC68 BL 0x1C16CF4
	0x039DDC6C MOVZ W8, 0x1
	0x039DDC70 STRB W8, [X21 + 0xD95]
	0x039DDC74 LDR X0, [X22]
	0x039DDC78 BL 0x1C16F10
	0x039DDC7C MOVZ W1, 0x1
	0x039DDC80 MOVZ W2, 0x1
	0x039DDC84 MOVZ W4, 0x25
	0x039DDC88 MOV W3, W31
	0x039DDC8C MOV X5, X31
	0x039DDC90 MOV X21, X0
	0x039DDC94 BL 0x3C216E8
	0x039DDC98 CBZ X21, 0x39DDDC8
	0x039DDC9C LDR X8, [X21]
	0x039DDCA0 ADRP X22, 0x776000
	0x039DDCA4 MOVZ W1, 0x2
	0x039DDCA8 MOV X0, X21
	0x039DDCAC LDP X9, X2, [X8 + 0x1D8]
	0x039DDCB0 LDR X22, [X22 + 0x2D8]
	0x039DDCB4 BLR X9
	0x039DDCB8 MOVZ W1, 0x1
	0x039DDCBC MOV X0, X21
	0x039DDCC0 MOV X2, X31
	0x039DDCC4 BL 0x3C20604
	0x039DDCC8 MOV X0, X21
	0x039DDCCC MOV W1, W31
	0x039DDCD0 MOV X2, X31
	0x039DDCD4 BL 0x3C20260
	0x039DDCD8 MOV X0, X21
	0x039DDCDC MOV W1, W31
	0x039DDCE0 MOV X2, X31
	0x039DDCE4 BL 0x3C20584
	0x039DDCE8 MOVZ W1, 0x1
	0x039DDCEC MOV X0, X21
	0x039DDCF0 MOV X2, X31
	0x039DDCF4 BL 0x3C2070C
	0x039DDCF8 LDR X1, [X22]
	0x039DDCFC MOV X0, X21
	0x039DDD00 MOV X2, X31
	0x039DDD04 BL 0x3C38A84
	0x039DDD08 MOV X0, X21
	0x039DDD0C MOV X1, X31
	0x039DDD10 BL 0x3C20A14
	0x039DDD14 CBZ X19, 0x39DDDC8
	0x039DDD18 ADRP X8, 0x776000
	0x039DDD1C LDR X8, [X8 + 0x2D0]
	0x039DDD20 MOV X0, X19
	0x039DDD24 MOV X2, X31
	0x039DDD28 LDR X1, [X8]
	0x039DDD2C BL 0x3C3B40C
	0x039DDD30 MOV W22, W0
	0x039DDD34 ADD X8, X31, 0x28
	0x039DDD38 MOV X0, X21
	0x039DDD3C MOV X1, X31
	0x039DDD40 BL 0x3C4B274
	0x039DDD44 LDUR V0, [X31 + 0x28]
	0x039DDD48 LDUR V1, [X31 + 0x38]
	0x039DDD4C LDR X8, [X31 + 0x48]
	0x039DDD50 STP V0, V1, [X31 + 0x50]
	0x039DDD54 STR X8, [X31 + 0x70]
	0x039DDD58 CBZ X20, 0x39DDDC8
	0x039DDD5C ADRP X8, 0x776000
	0x039DDD60 LDR X8, [X8 + 0x2C8]
	0x039DDD64 LDP V0, V1, [X31 + 0x50]
	0x039DDD68 LDR X9, [X31 + 0x70]
	0x039DDD6C ADD X4, X31, 0x0
	0x039DDD70 LDR X3, [X8]
	0x039DDD74 MOV X0, X20
	0x039DDD78 MOV X1, X19
	0x039DDD7C MOV W2, W22
	0x039DDD80 MOV X5, X31
	0x039DDD84 STP V0, V1, [X31]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+128], D11
	003 Move [X31+136], D10
	004 Move [X31+144], D9
	005 Move [X31+152], D8
	006 Move [X31+160], X30
	007 Move [X31+176], X26
	008 Move [X31+184], X25
	009 Move [X31+192], X24
	010 Move [X31+200], X23
	011 Move [X31+208], X22
	012 Move [X31+216], X21
	013 Move [X31+224], X20
	014 Move [X31+232], X19
	015 Move X23, 0xA05000
	016 Move W8, [X23+3460]
	017 Move X20, X3
	018 Move X19, X2
	019 Move X21, X1
	020 Move X22, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0x776000
	026 Move X0, [X0+3624]
	027 Call 0x1C17CF4
	028 Move X0, 0x777000
	029 Move X0, [X0+600]
	030 Call 0x1C17CF4
	031 Move X0, 0x777000
	032 Move X0, [X0+608]
	033 Call 0x1C17CF4
	034 Move X0, 0x741000
	035 Move X0, [X0+592]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+3460], W8
	039 Compare X20, 0
	040 JumpIfEqual {181}
	041 Move X0, X20
	042 Move X1, X31
	043 Call Object.GetInstanceID, X0
	044 Move X8, [X22+48]
	045 Compare X8, 0
	046 JumpIfEqual {181}
	047 Move X9, 0x777000
	048 Move X9, [X9+608]
	049 Move W23, W0
	050 Move X0, X8
	051 Move W1, W23
	052 Move X3, [X9]
	053 Move X2, X19
	054 Call Dictionary`2<Int32, Vector4>.TryGetValue, X0, X1, X2
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {165}
	059 Move X8, [X20]
	060 Move X0, X20
	061 Move X9, [X8+392]
	062 Move X1, [X8+400]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X8, [X20]
	065 Move W24, W0
	066 Move X0, X20
	067 Move X9, [X8+424]
	068 Move X1, [X8+432]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X8, [X22+40]
	071 Compare X8, 0
	072 JumpIfEqual {181}
	073 Move W4, W0
	074 Move X0, X8
	075 Move X1, X19
	076 Move W2, W23
	077 Move W3, W24
	078 Call AtlasAllocatorDynamic.Allocate, X0, X1, X2, X3, X4
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {152}
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 Move V2, [X19]
	085 Move V1, 0
	086 Move X25, 0x741000
	087 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	088 Move X25, [X25+592]
	089 NotImplemented "Instruction INVALID not yet implemented."
	090 Move V0.D[1], V0.D[0]
	091 NotImplemented "Instruction INVALID not yet implemented."
	092 Move [X19], V0
	093 Move X8, [X25]
	094 Move X9, [X20]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X26, 0x776000
	097 Move X26, [X26+3624]
	098 Move W24, W31
	099 Move X0, X20
	100 Move X1, X31
	101 Call Texture.get_mipmapCount, X0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X0, [X22+16]
	104 Add X8, X31, 40
	105 Move X1, X31
	106 Call RTHandle.op_Implicit, X0
	107 NotImplemented "Instruction LDUR not yet implemented."
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 Move X8, [X31+72]
	110 Move [X31+80], V0
	111 Move [X31+88], V1
	112 Move [X31+112], X8
	113 Compare X21, 0
	114 JumpIfEqual {181}
	115 Move V0, [X31+80]
	116 Move V1, [X31+96]
	117 Move X8, [X31+112]
	118 Add X1, X31, 0
	119 Move X0, X21
	120 Move W2, W24
	121 Move X3, X31
	122 Move [X31], V0
	123 Move [X31+8], V1
	124 Move [X31+32], X8
	125 Call CommandBuffer.SetRenderTarget, X0, X1, X2
	126 Move X0, [X26]
	127 Move S11, [X19]
	128 Move S10, [X19+4]
	129 Move S9, [X19+8]
	130 Move S8, [X19+12]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move S0, 1
	136 Move S1, 1
	137 Move S2, W31
	138 Move S3, W31
	139 Move X0, X21
	140 Move X1, X20
	141 Move V4, V11
	142 Move V5, V10
	143 Move V6, V9
	144 Move V7, V8
	145 Move W2, W24
	146 Move W3, W31
	147 Call Blitter.BlitQuad, X0, X1, X2, X3, X4, X5
	148 Move X8, [X25]
	149 Move X9, [X20]
	150 Add W24, W24, 1
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move W0, W31
	153 Move X0, [X22+48]
	154 Compare X0, 0
	155 JumpIfEqual {181}
	156 Move X8, 0x777000
	157 Move S2, [X19+8]
	158 Move S3, [X19+12]
	159 Move S0, [X19]
	160 Move S1, [X19+4]
	161 Move X8, [X8+600]
	162 Move W1, W23
	163 Move X2, [X8]
	164 Call Dictionary`2<Int32, Vector4>.Add, X0, X1, X2
	165 Move W0, 1
	166 Move X20, [X31+224]
	167 Move X19, [X31+232]
	168 Move X22, [X31+208]
	169 Move X21, [X31+216]
	170 Move X24, [X31+192]
	171 Move X23, [X31+200]
	172 Move X26, [X31+176]
	173 Move X25, [X31+184]
	174 Move X30, [X31+160]
	175 Move D9, [X31+144]
	176 Move D8, [X31+152]
	177 Move D11, [X31+128]
	178 Move D10, [X31+136]
	179 Add X31, X31, 240
	180 Return X0
	181 Call 0x1C17F20

Method: System.Boolean IsCached(out UnityEngine.Vector4 scaleOffset, System.Int32 key)

Disassembly:
	0x039DDD88 STR X9, [X31 + 0x20]
	0x039DDD8C BL 0x3C4EC10
	0x039DDD90 MOVZ W3, 0x1
	0x039DDD94 MOVZ W4, 0x1
	0x039DDD98 MOVZ W5, 0x1
	0x039DDD9C MOV X0, X20
	0x039DDDA0 MOV X1, X19
	0x039DDDA4 MOV W2, W22
	0x039DDDA8 MOV X6, X31
	0x039DDDAC BL 0x3C4ED78
	0x039DDDB0 MOV X0, X21
	0x039DDDB4 LDP X20, X19, [X31 + 0xA0]
	0x039DDDB8 LDP X22, X21, [X31 + 0x90]
	0x039DDDBC LDR X30, [X31 + 0x80]
	0x039DDDC0 ADD X31, X31, 0xB0
	0x039DDDC4 RET
	0x039DDDC8 BL 0x1C16F20
	0x039DDDCC STP X30, X27, [X31 - 0x50]!
	0x039DDDD0 STP X26, X25, [X31 + 0x10]
	0x039DDDD4 STP X24, X23, [X31 + 0x20]
	0x039DDDD8 STP X22, X21, [X31 + 0x30]
	0x039DDDDC STP X20, X19, [X31 + 0x40]
	0x039DDDE0 ADRP X20, 0xA04000
	0x039DDDE4 LDRB W8, [X20 + 0xD93]
	0x039DDDE8 MOV X21, X1
	0x039DDDEC MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA05000
	007 Move W8, [X22+3461]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x777000
	016 Move X0, [X0+608]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3461], W8
	020 Move X0, [X21+48]
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X8, 0x777000
	024 Move X8, [X8+608]
	025 Move W1, W20
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X3, [X8]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Dictionary`2<Int32, Vector4>.TryGetValue, X0, X1, X2
	034 Return X0
	035 Call 0x1C17F20

Method: System.Boolean EnsureTextureSlot(out System.Boolean isUploadNeeded, out UnityEngine.Vector4 scaleOffset, System.Int32 key, System.Int32 width, System.Int32 height)

Disassembly:
	0x039DDDF0 TBNZ X8, 0x0, 0x39DDE20
	0x039DDDF4 ADRP X0, 0x71A000
	0x039DDDF8 LDR X0, [X0 + 0x2C8]
	0x039DDDFC BL 0x1C16CF4
	0x039DDE00 ADRP X0, 0x776000
	0x039DDE04 LDR X0, [X0 + 0x2E0]
	0x039DDE08 BL 0x1C16CF4
	0x039DDE0C ADRP X0, 0x773000
	0x039DDE10 LDR X0, [X0 + 0x618]
	0x039DDE14 BL 0x1C16CF4
	0x039DDE18 MOVZ W8, 0x1
	0x039DDE1C STRB W8, [X20 + 0xD93]
	0x039DDE20 CBZ X19, 0x39DDFA8
	0x039DDE24 LDR X8, [X19]
	0x039DDE28 ADRP X20, 0x773000
	0x039DDE2C MOV X0, X19
	0x039DDE30 LDP X9, X1, [X8 + 0x188]
	0x039DDE34 LDR X20, [X20 + 0x618]
	0x039DDE38 BLR X9
	0x039DDE3C LDR X8, [X19]
	0x039DDE40 MOV W23, W0
	0x039DDE44 MOV X0, X19
	0x039DDE48 LDP X9, X1, [X8 + 0x1A8]
	0x039DDE4C BLR X9
	0x039DDE50 LDR X8, [X20]
	0x039DDE54 MOV W24, W0
	0x039DDE58 LDR W9, [X8 + 0xE0]
	0x039DDE5C CBNZ W9, 0x39DDE68
	0x039DDE60 MOV X0, X8
	0x039DDE64 BL 0x1C16DFC
	0x039DDE68 ADRP X27, 0xA04000
	0x039DDE6C LDRB W8, [X27 + 0xB3B]
	0x039DDE70 CBNZ W8, 0x39DDE88
	0x039DDE74 ADRP X0, 0x773000
	0x039DDE78 LDR X0, [X0 + 0x618]
	0x039DDE7C BL 0x1C16CF4
	0x039DDE80 MOVZ W8, 0x1
	0x039DDE84 STRB W8, [X27 + 0xB3B]
	0x039DDE88 LDR X0, [X20]
	0x039DDE8C ADRP X22, 0x776000
	0x039DDE90 LDR W8, [X0 + 0xE0]
	0x039DDE94 LDR X22, [X22 + 0x2E0]
	0x039DDE98 CBNZ W8, 0x39DDEA4
	0x039DDE9C BL 0x1C16DFC
	0x039DDEA0 LDR X0, [X20]
	0x039DDEA4 LDR X8, [X0 + 0xB8]
	0x039DDEA8 MOV X0, X19
	0x039DDEAC MOV X1, X31
	0x039DDEB0 LDR W25, [X8]
	0x039DDEB4 BL 0x3C1B334
	0x039DDEB8 LDR X8, [X22]
	0x039DDEBC MOV W26, W0
	0x039DDEC0 MOV X0, X8
	0x039DDEC4 BL 0x1C16F10
	0x039DDEC8 MOV W1, W23
	0x039DDECC MOV W2, W24
	0x039DDED0 MOV W3, W25
	0x039DDED4 MOV W4, W26
	0x039DDED8 MOV W5, W31
	0x039DDEDC MOV X6, X31
	0x039DDEE0 MOV X22, X0
	0x039DDEE4 BL 0x3C1F57C
	0x039DDEE8 CBZ X22, 0x39DDFA8
	0x039DDEEC ADRP X23, 0x71A000
	0x039DDEF0 LDR X23, [X23 + 0x2C8]
	0x039DDEF4 MOV X0, X22
	0x039DDEF8 MOV X1, X21
	0x039DDEFC MOV X2, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xA05000
	010 Move W8, [X25+3462]
	011 Move W23, W5
	012 Move W24, W4
	013 Move W19, W3
	014 Move X20, X2
	015 Move X22, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x777000
	022 Move X0, [X0+600]
	023 Call 0x1C17CF4
	024 Move X0, 0x777000
	025 Move X0, [X0+608]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+3462], W8
	029 Move [X22], W31
	030 Move X0, [X21+48]
	031 Compare X0, 0
	032 JumpIfEqual {87}
	033 Move X8, 0x777000
	034 Move X8, [X8+608]
	035 Move W1, W19
	036 Move X2, X20
	037 Move X3, [X8]
	038 Call Dictionary`2<Int32, Vector4>.TryGetValue, X0, X1, X2
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {76}
	043 Move X0, [X21+40]
	044 Compare X0, 0
	045 JumpIfEqual {87}
	046 Move X1, X20
	047 Move W2, W19
	048 Move W3, W24
	049 Move W4, W23
	050 Call AtlasAllocatorDynamic.Allocate, X0, X1, X2, X3, X4
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {77}
	055 Move W8, 1
	056 Move [X22], W8
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 Move V1, [X20]
	059 Move V2, 0
	060 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 Move V0.D[1], V0.D[0]
	063 NotImplemented "Instruction INVALID not yet implemented."
	064 Move [X20], V0
	065 Move X0, [X21+48]
	066 Compare X0, 0
	067 JumpIfEqual {87}
	068 Move X8, 0x777000
	069 Move X8, [X8+600]
	070 Move S1, V0.S[1]
	071 Move S2, V0.S[2]
	072 Move S3, V0.S[3]
	073 Move X2, [X8]
	074 Move W1, W19
	075 Call Dictionary`2<Int32, Vector4>.Add, X0, X1, X2
	076 Move W0, 1
	077 Move W0, W31
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Move X22, [X31+32]
	081 Move X21, [X31+40]
	082 Move X24, [X31+16]
	083 Move X23, [X31+24]
	084 Move X30, [X31+64]
	085 Move X25, [X31+72]
	086 Return X0
	087 Call 0x1C17F20

Method: System.Void ReleaseTextureSlot(System.Int32 key)

Disassembly:
	0x039DDF00 BL 0x3C38A84
	0x039DDF04 MOV W21, W31
	0x039DDF08 MOVZ W24, 0x1
	0x039DDF0C LDR X0, [X20]
	0x039DDF10 LDR W8, [X0 + 0xE0]
	0x039DDF14 CBNZ W8, 0x39DDF1C
	0x039DDF18 BL 0x1C16DFC
	0x039DDF1C LDRB W8, [X27 + 0xB3B]
	0x039DDF20 CBNZ W8, 0x39DDF30
	0x039DDF24 MOV X0, X20
	0x039DDF28 BL 0x1C16CF4
	0x039DDF2C STRB W24, [X27 + 0xB3B]
	0x039DDF30 LDR X0, [X20]
	0x039DDF34 LDR W8, [X0 + 0xE0]
	0x039DDF38 CBNZ W8, 0x39DDF44
	0x039DDF3C BL 0x1C16DFC
	0x039DDF40 LDR X0, [X20]
	0x039DDF44 LDR X8, [X0 + 0xB8]
	0x039DDF48 LDR W8, [X8]
	0x039DDF4C CMP W21, W8
	0x039DDF50 B.GE 0x39DDF8C
	0x039DDF54 LDR X0, [X23]
	0x039DDF58 LDR W8, [X0 + 0xE0]
	0x039DDF5C CBNZ W8, 0x39DDF64
	0x039DDF60 BL 0x1C16DFC
	0x039DDF64 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA05000
	006 Move W8, [X21+3463]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x777000
	014 Move X0, [X0+616]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3463], W8
	018 Move X0, [X20+40]
	019 Compare X0, 0
	020 JumpIfEqual {36}
	021 Move W1, W19
	022 Call AtlasAllocatorDynamic.Release, X0, X1
	023 Move X0, [X20+48]
	024 Compare X0, 0
	025 JumpIfEqual {36}
	026 Move X8, 0x777000
	027 Move X8, [X8+616]
	028 Move W1, W19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, [X8]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call Dictionary`2<Int32, Vector4>.Remove, X0, X1
	035 Return 
	036 Call 0x1C17F20

