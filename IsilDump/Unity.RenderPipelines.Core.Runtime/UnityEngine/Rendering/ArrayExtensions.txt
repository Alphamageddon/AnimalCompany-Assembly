Type: UnityEngine.Rendering.ArrayExtensions

Method: System.Void ResizeArray(ref Unity.Collections.NativeArray`1<T> array, System.Int32 capacity)

Disassembly:
	0x02172DA0 STR X30, [X31 + 0x10]
	0x02172DA4 STP X20, X19, [X31 + 0x20]
	0x02172DA8 LDR X8, [X1 + 0x38]
	0x02172DAC MOV X20, X1
	0x02172DB0 MOV V8.16B, V1.16B
	0x02172DB4 MOV V9.16B, V0.16B
	0x02172DB8 MOV X19, X0
	0x02172DBC CBNZ X8, 0x2172DC8
	0x02172DC0 MOV X0, X20
	0x02172DC4 BL 0x1C5C6E0
	0x02172DC8 LDR X8, [X19]
	0x02172DCC CBZ X8, 0x2172E10
	0x02172DD0 LDR X9, [X20 + 0x38]
	0x02172DD4 LDR X20, [X8 + 0x18]
	0x02172DD8 MOV X0, X19
	0x02172DDC LDR X2, [X9 + 0x18]
	0x02172DE0 ADD W1, W20, 0x1
	0x02172DE4 BL 0x214478C
	0x02172DE8 LDR X8, [X19]
	0x02172DEC CBZ X8, 0x2172E60
	0x02172DF0 LDR W9, [X8 + 0x18]
	0x02172DF4 CMP W20, W9
	0x02172DF8 B.CS 0x2172E64
	0x02172DFC SXTW X9, W20
	0x02172E00 ADD X8, X8, X9, 0x3, LSL
	0x02172E04 STR S9, [X8 + 0x20]
	0x02172E08 ADD X8, X8, 0x24
	0x02172E0C B 0x2172E48
	0x02172E10 LDR X8, [X20 + 0x38]
	0x02172E14 LDR X0, [X8 + 0x8]
	0x02172E18 LDRB W8, [X0 + 0x135]
	0x02172E1C TBNZ X8, 0x0, 0x2172E24
	0x02172E20 BL 0x1C5C684
	0x02172E24 MOVZ W1, 0x1
	0x02172E28 BL 0x1C16D6C
	0x02172E2C STR X0, [X19]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X20, X2
	008 Move W21, W1
	009 Move X19, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {15}
	012 Move X0, X20
	013 Call 0x1C5D6E0
	014 Move X8, [X20+56]
	015 Move [X31], X31
	016 Move [X31+8], X31
	017 Move X4, [X8]
	018 Add X0, X31, 0
	019 Move W2, 4
	020 Move W1, W21
	021 Move W3, W31
	022 Call NativeArray`1<Boolean>..ctor, X0, X1, X2, X3
	023 Move X0, [X19]
	024 Compare X0, 0
	025 JumpIfEqual {37}
	026 Move X8, [X20+56]
	027 Move X1, [X19+8]
	028 Move X2, [X31]
	029 Move X3, [X31+8]
	030 Move X5, [X8+48]
	031 Move W4, W1
	032 Call NativeArray`1<Boolean>.Copy, X0, X1, X2
	033 Move X8, [X20+56]
	034 Move X0, X19
	035 Move X1, [X8+56]
	036 Call NativeArray`1<Boolean>.Dispose, X0
	037 Move V0, [X31]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move [X19], V0
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Add X31, X31, 48
	044 Return 

Method: System.Void ResizeArray(ref UnityEngine.Jobs.TransformAccessArray array, System.Int32 capacity)

Disassembly:
	0x039DF0B8 ADRP X22, 0x774000
	0x039DF0BC LDR X22, [X22 + 0x328]
	0x039DF0C0 MOVZ W23, 0x1
	0x039DF0C4 LDR X2, [X22]
	0x039DF0C8 MOV X0, X19
	0x039DF0CC MOV W1, W21
	0x039DF0D0 BL 0x21C0E94
	0x039DF0D4 CMP W0, 0x7
	0x039DF0D8 B.HI 0x39DF0EC
	0x039DF0DC LDRB W8, [X20]
	0x039DF0E0 LSLV W9, W23, W0
	0x039DF0E4 ORR W8, W8, W9, 0x0
	0x039DF0E8 STRB W8, [X20]
	0x039DF0EC SUBS W21, W21, 0x1
	0x039DF0F0 B.PL 0x39DF0C4
	0x039DF0F4 LDP X20, X19, [X31 + 0x20]
	0x039DF0F8 LDP X22, X21, [X31 + 0x10]
	0x039DF0FC LDP X30, X23, [X31], #0x30
	0x039DF100 RET
	0x039DF104 ORN W8, W31, W0, 0x0
	0x039DF108 AND X0, X8, 0xFF
	0x039DF10C RET
	0x039DF110 ORR W8, W1, W0, 0x0
	0x039DF114 AND X0, X8, 0xFF
	0x039DF118 RET
	0x039DF11C AND W8, W0, W1, 0x0
	0x039DF120 AND X0, X8, 0xFF
	0x039DF124 RET
	0x039DF128 SUB X31, X31, 0x30
	0x039DF12C STP X30, X21, [X31 + 0x10]
	0x039DF130 STP X20, X19, [X31 + 0x20]
	0x039DF134 ADRP X21, 0xA02000
	0x039DF138 LDRB W8, [X21 + 0xDA2]
	0x039DF13C MOV X19, X1
	0x039DF140 MOV X20, X0
	0x039DF144 TBNZ X8, 0x0, 0x39DF15C
	0x039DF148 ADRP X0, 0x774000
	0x039DF14C LDR X0, [X0 + 0x330]
	0x039DF150 BL 0x1C16CF4
	0x039DF154 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Add X0, X31, 8
	006 Move TEMP, 0
	007 Not TEMP
	008 Move W2, TEMP
	009 Move X3, X31
	010 Move [X31+8], X31
	011 Call TransformAccessArray..ctor, X0, X1, X2
	012 Move X0, X19
	013 Move X1, X31
	014 Call TransformAccessArray.get_isCreated, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {40}
	019 Move X0, X19
	020 Move X1, X31
	021 Call TransformAccessArray.get_length, X0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W20, W31
	024 Move X0, X19
	025 Move W1, W20
	026 Move X2, X31
	027 Call TransformAccessArray.get_Item, X0, X1
	028 Move X1, X0
	029 Add X0, X31, 8
	030 Move X2, X31
	031 Call TransformAccessArray.Add, X0, X1
	032 Move X0, X19
	033 Move X1, X31
	034 Add W20, W20, 1
	035 Call TransformAccessArray.get_length, X0
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X1, X31
	039 Call TransformAccessArray.Dispose, X0
	040 Move X8, [X31+8]
	041 Move [X19], X8
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return 

Method: System.Void ResizeArray(ref T[] array, System.Int32 capacity)

Disassembly:
	0x02172EC0 ADD X10, X20, 0xF
	0x02172EC4 AND X10, X10, 0x1FFFFFFFF
	0x02172EC8 SUB X21, X9, X10
	0x02172ECC ADD X31, X21, 0x0
	0x02172ED0 LDR X9, [X23]
	0x02172ED4 CBZ X9, 0x2172F70
	0x02172ED8 LDR X2, [X8 + 0x18]
	0x02172EDC LDR X24, [X9 + 0x18]
	0x02172EE0 MOV X0, X23
	0x02172EE4 LDR X8, [X2]
	0x02172EE8 ADD W1, W24, 0x1
	0x02172EEC BLR X8
	0x02172EF0 LDR X8, [X19 + 0x38]
	0x02172EF4 LDR X23, [X23]
	0x02172EF8 MOV X0, X21
	0x02172EFC MOV X2, X20
	0x02172F00 LDR X8, [X8 + 0x10]
	0x02172F04 LDR W8, [X8 + 0x28]
	0x02172F08 CMP W8, 0x0
	0x02172F0C SUB X8, X29, 0x10
	0x02172F10 CSEL X1, X22, X8, LT
	0x02172F14 BL 0x3EB1AC0
	0x02172F18 CBZ X23, 0x2173024
	0x02172F1C LDR W8, [X23 + 0x18]
	0x02172F20 CMP W24, W8
	0x02172F24 B.CS 0x2173020
	0x02172F28 LDR X8, [X23]
	0x02172F2C SXTW X9, W24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move W20, W1
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X2
	011 Move X21, X2
	012 Call 0x1C5D6E0
	013 Move X8, [X21+56]
	014 Move X9, [X19]
	015 Compare X9, 0
	016 JumpIfEqual {26}
	017 Move X2, [X8+16]
	018 Move X0, X19
	019 Move W1, W20
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Call Array.Resize, X0, X1
	025 Return 
	026 Move X0, [X8+8]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move W1, W20
	034 Call 0x1C17D6C
	035 Move [X19], X0
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 

