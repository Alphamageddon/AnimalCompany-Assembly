Type: UnityEngine.Rendering.RTHandles

Method: System.Int32 get_maxWidth()

Disassembly:
	0x039D6100 STRB W8, [X20 + 0xD39]
	0x039D6104 LDR X0, [X19]
	0x039D6108 MOVI V0.2D, 0x0
	0x039D610C STR W31, [X31 + 0xB0]
	0x039D6110 STP V0, V0, [X31 + 0x90]
	0x039D6114 STR V0, [X31 + 0x8]
	0x039D6118 LDR W8, [X0 + 0xE0]
	0x039D611C STP W22, W21, [X31 + 0xC8]
	0x039D6120 STR W23, [X31 + 0x7C]
	0x039D6124 STR X26, [X31 + 0x70]
	0x039D6128 CBNZ W8, 0x39D6134
	0x039D612C BL 0x1C16DFC
	0x039D6130 LDR X0, [X19]
	0x039D6134 LDR W9, [X24 + 0xC]
	0x039D6138 LDR X8, [X0 + 0xB8]
	0x039D613C LDP V0, V1, [X24 + 0x10]
	0x039D6140 LDR V2, [X24]
	0x039D6144 STR W9, [X31 + 0x6C]
	0x039D6148 LDR W9, [X24 + 0x30]
	0x039D614C LDR X26, [X8]
	0x039D6150 ADD X0, X31, 0x80
	0x039D6154 MOV X1, X31
	0x039D6158 STR W9, [X31 + 0xB0]
	0x039D615C STP V0, V1, [X31 + 0x90]
	0x039D6160 STR V2, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA0C000
	005 Move X19, 0x77B000
	006 Move W8, [X20+3378]
	007 Move X19, [X19+2480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x77B000
	013 Move X0, [X0+2480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3378], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8]
	025 Compare X8, 0
	026 JumpIfEqual {32}
	027 Move W0, [X8+96]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0
	032 Call 0x1C17F20

Method: System.Int32 get_maxHeight()

Disassembly:
	0x039D6164 BL 0x3C224C4
	0x039D6168 LDR W8, [X24 + 0x30]
	0x039D616C LDP V2, V0, [X24 + 0x10]
	0x039D6170 LDR V1, [X24]
	0x039D6174 MOV W27, W0
	0x039D6178 ADD X0, X31, 0x80
	0x039D617C MOV X1, X31
	0x039D6180 STR W8, [X31 + 0xB0]
	0x039D6184 STP V2, V0, [X31 + 0x90]
	0x039D6188 STR V1, [X31 + 0x8]
	0x039D618C BL 0x3C22060
	0x039D6190 LDP V1, V0, [X24]
	0x039D6194 LDR V2, [X24 + 0x2]
	0x039D6198 LDR W8, [X24 + 0x30]
	0x039D619C LDR W29, [X24 + 0x20]
	0x039D61A0 MOV W28, W0
	0x039D61A4 ADD X0, X31, 0x80
	0x039D61A8 MOV X1, X31
	0x039D61AC STP V1, V0, [X31 + 0x80]
	0x039D61B0 STR V2, [X31 + 0xA]
	0x039D61B4 STR W8, [X31 + 0xB0]
	0x039D61B8 BL 0x3C22B64
	0x039D61BC LDR W8, [X24 + 0x30]
	0x039D61C0 LDP V2, V0, [X24 + 0x10]
	0x039D61C4 LDR V1, [X24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA0C000
	005 Move X19, 0x77B000
	006 Move W8, [X20+3379]
	007 Move X19, [X19+2480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x77B000
	013 Move X0, [X0+2480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3379], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8]
	025 Compare X8, 0
	026 JumpIfEqual {32}
	027 Move W0, [X8+100]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0
	032 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandleProperties get_rtHandleProperties()

Disassembly:
	0x039D61C8 MOV W19, W0
	0x039D61CC ADD X0, X31, 0x80
	0x039D61D0 MOV X1, X31
	0x039D61D4 STR W8, [X31 + 0xB0]
	0x039D61D8 STP V2, V0, [X31 + 0x90]
	0x039D61DC STR V1, [X31 + 0x8]
	0x039D61E0 BL 0x3C22B1C
	0x039D61E4 LDR W8, [X24 + 0x30]
	0x039D61E8 LDP V2, V0, [X24 + 0x10]
	0x039D61EC LDR V1, [X24]
	0x039D61F0 MOV W20, W0
	0x039D61F4 ADD X0, X31, 0x80
	0x039D61F8 MOV X1, X31
	0x039D61FC STR W8, [X31 + 0xB0]
	0x039D6200 STP V2, V0, [X31 + 0x90]
	0x039D6204 STR V1, [X31 + 0x8]
	0x039D6208 BL 0x3C22B38
	0x039D620C LDP V0, V2, [X24]
	0x039D6210 LDR V1, [X24 + 0x2]
	0x039D6214 LDR W8, [X24 + 0x30]
	0x039D6218 LDR W23, [X24 + 0x8]
	0x039D621C MOV W21, W0
	0x039D6220 ADD X0, X31, 0x80
	0x039D6224 MOV X1, X31
	0x039D6228 STP V0, V2, [X31 + 0x80]
	0x039D622C STR V1, [X31 + 0xA]
	0x039D6230 STR W8, [X31 + 0xB0]
	0x039D6234 BL 0x3C22B90
	0x039D6238 LDR W8, [X24 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA0C000
	006 Move X20, 0x77B000
	007 Move X19, X8
	008 Move W8, [X21+3380]
	009 Move X20, [X20+2480]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x77B000
	015 Move X0, [X0+2480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3380], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8]
	027 Compare X8, 0
	028 JumpIfEqual {40}
	029 Move V1, [X8+64]
	030 Move V0, [X8+80]
	031 Move V2, [X8+3]
	032 Move [X19+16], V1
	033 Move [X19+24], V0
	034 Move [X19], V2
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0
	040 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(System.Int32 width, System.Int32 height, System.Int32 slices = 1, UnityEngine.Rendering.DepthBits depthBufferBits = 0, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat = 4, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, UnityEngine.Rendering.TextureDimension dimension = 2, System.Boolean enableRandomWrite = False, System.Boolean useMipMap = False, System.Boolean autoGenerateMips = True, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, UnityEngine.Rendering.MSAASamples msaaSamples = 1, System.Boolean bindTextureMS = False, System.Boolean useDynamicScale = False, UnityEngine.RenderTextureMemoryless memoryless = 0, UnityEngine.VRTextureUsage vrUsage = 0, System.String name = )

Disassembly:
	0x039CC244 MOVZ W8, 0x1
	0x039CC248 STRB W8, [X20 + 0x784]
	0x039CC24C LDR X0, [X19]
	0x039CC250 ADRP X19, 0x786000
	0x039CC254 FADD S12, S15, S12
	0x039CC258 FMUL S15, S16, S8
	0x039CC25C LDR W8, [X0 + 0xE0]
	0x039CC260 LDR X19, [X19 + 0xD98]
	0x039CC264 FSUB S14, S11, S14
	0x039CC268 FSUB S8, S10, S0
	0x039CC26C FSUB S11, S9, S1
	0x039CC270 CBNZ W8, 0x39CC278
	0x039CC274 BL 0x1C16DFC
	0x039CC278 LDR X0, [X19]
	0x039CC27C FMUL S0, S14, S14
	0x039CC280 FMUL S1, S8, S8
	0x039CC284 FADD S0, S0, S1
	0x039CC288 LDR W8, [X0 + 0xE0]
	0x039CC28C FMUL S1, S11, S11
	0x039CC290 FADD S0, S1, S0
	0x039CC294 FADD S10, S15, S12
	0x039CC298 FSQRT S9, S0
	0x039CC29C CBNZ W8, 0x39CC2A4
	0x039CC2A0 BL 0x1C16DFC
	0x039CC2A4 FDIV S0, S10, S9
	0x039CC2A8 BL 0x3EB1BE0
	0x039CC2AC FMUL S8, S9, S9
	0x039CC2B0 FMUL S12, S10, S10
	0x039CC2B4 FADD S1, S8, S12
	0x039CC2B8 FMUL S14, S9, S1
	0x039CC2BC FDIV S0, S0, S8
	0x039CC2C0 FDIV S1, S10, S14
	0x039CC2C4 FADD S10, S1, S0
	0x039CC2C8 FDIV S0, S13, S9
	0x039CC2CC BL 0x3EB1BE0
	0x039CC2D0 FMUL S1, S13, S13
	0x039CC2D4 FADD S3, S1, S8
	0x039CC2D8 FMUL S3, S9, S3
	0x039CC2DC FDIV S2, S12, S14
	0x039CC2E0 FDIV S1, S1, S3
	0x039CC2E4 FSUB S1, S2, S1
	0x039CC2E8 LDR V2, [X31 + 0x5C]
	0x039CC2EC FDIV S0, S0, S8
	0x039CC2F0 ADRP X8, 0xFFFFFFFFFD11D000
	0x039CC2F4 FDIV S5, S13, S3
	0x039CC2F8 LDR V4, [X8 + 0xF4C]
	0x039CC2FC FADD S0, S5, S0
	0x039CC300 FSUB S0, S10, S0
	0x039CC304 FMUL S0, S11, S0
	0x039CC308 FMUL S1, S2, S1
	0x039CC30C FADD S0, S1, S0
	0x039CC310 FDIV S0, S0, S4
	0x039CC314 LDP X20, X19, [X31 + 0x60]
	0x039CC318 LDR X30, [X31 + 0x50]
	0x039CC31C LDP D9, D8, [X31 + 0x40]
	0x039CC320 LDP D11, D10, [X31 + 0x30]
	0x039CC324 LDP D13, D12, [X31 + 0x20]
	0x039CC328 LDP D15, D14, [X31 + 0x10]
	0x039CC32C ADD X31, X31, 0x70
	0x039CC330 RET
	0x039CC334 STP D13, D12, [X31 - 0x50]!
	0x039CC338 STP D11, D10, [X31 + 0x10]
	0x039CC33C STP D9, D8, [X31 + 0x20]
	0x039CC340 STR X30, [X31 + 0x30]
	0x039CC344 STP X20, X19, [X31 + 0x40]
	0x039CC348 ADRP X19, 0xA15000
	0x039CC34C ADRP X20, 0x786000
	0x039CC350 LDRB W8, [X19 + 0xD01]
	0x039CC354 LDR X20, [X20 + 0xD98]
	0x039CC358 MOV V8.16B, V5.16B
	0x039CC35C MOV V10.16B, V4.16B
	0x039CC360 MOV V11.16B, V3.16B
	0x039CC364 MOV V9.16B, V2.16B
	0x039CC368 MOV V12.16B, V1.16B
	0x039CC36C MOV V13.16B, V0.16B
	0x039CC370 TBNZ X8, 0x0, 0x39CC388
	0x039CC374 ADRP X0, 0x786000
	0x039CC378 LDR X0, [X0 + 0xD98]
	0x039CC37C BL 0x1C16CF4
	0x039CC380 MOVZ W8, 0x1
	0x039CC384 STRB W8, [X19 + 0xD01]
	0x039CC388 LDR X0, [X20]
	0x039CC38C LDR W8, [X0 + 0xE0]
	0x039CC390 CBNZ W8, 0x39CC398
	0x039CC394 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], D8
	003 Move [X31+136], X30
	004 Move [X31+144], X28
	005 Move [X31+152], X27
	006 Move [X31+160], X26
	007 Move [X31+168], X25
	008 Move [X31+176], X24
	009 Move [X31+184], X23
	010 Move [X31+192], X22
	011 Move [X31+200], X21
	012 Move [X31+208], X20
	013 Move [X31+216], X19
	014 Move X28, 0xA16000
	015 Move X27, 0x785000
	016 Move W8, [X28+3381]
	017 Move X27, [X27+2480]
	018 Move V8, V0
	019 Move W25, W7
	020 Move W19, W6
	021 Move W26, W5
	022 Move W24, W4
	023 Move W20, W3
	024 Move W21, W2
	025 Move W22, W1
	026 Move W23, W0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0x785000
	032 Move X0, [X0+2480]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X28+3381], W8
	036 Move X0, [X27]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X27]
	042 Move X8, [X0+184]
	043 Move X0, [X8]
	044 Compare X0, 0
	045 JumpIfEqual {100}
	046 Move X8, [X31+304]
	047 Move W9, [X31+296]
	048 Move W10, [X31+288]
	049 Move W11, [X31+280]
	050 Move W12, [X31+272]
	051 Move W13, [X31+264]
	052 Move W15, [X31+248]
	053 Move W16, [X31+240]
	054 Move W17, [X31+232]
	055 Move W1, [X31+224]
	056 Move W14, [X31+256]
	057 Move [X31+104], X8
	058 Move [X31+96], W9
	059 Move [X31+88], W10
	060 And W8, W11, 1
	061 And W9, W12, 1
	062 Move [X31+64], W13
	063 And W10, W15, 1
	064 And W11, W16, 1
	065 And W12, W17, 1
	066 And W13, W1, 1
	067 Move V0, V8
	068 Move W1, W23
	069 Move W2, W22
	070 Move W3, W19
	071 Move W4, W19
	072 Move W5, W19
	073 Move W6, W21
	074 Move W7, W20
	075 Move [X31+56], W14
	076 Move [X31+16], W25
	077 Move [X31+8], W26
	078 Move [X31+80], W8
	079 Move [X31+72], W9
	080 Move [X31+48], W10
	081 Move [X31+40], W11
	082 Move [X31+32], W12
	083 Move [X31+24], W13
	084 Move [X31], W24
	085 Call RTHandleSystem.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, V0, X16, X17, X18, X19, X20, X21
	086 Move X20, [X31+208]
	087 Move X19, [X31+216]
	088 Move X22, [X31+192]
	089 Move X21, [X31+200]
	090 Move X24, [X31+176]
	091 Move X23, [X31+184]
	092 Move X26, [X31+160]
	093 Move X25, [X31+168]
	094 Move X28, [X31+144]
	095 Move X27, [X31+152]
	096 Move X30, [X31+136]
	097 Move V8, [X31+128]
	098 Add X31, X31, 224
	099 Return X0
	100 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(System.Int32 width, System.Int32 height, UnityEngine.TextureWrapMode wrapModeU, UnityEngine.TextureWrapMode wrapModeV, UnityEngine.TextureWrapMode wrapModeW = 0, System.Int32 slices = 1, UnityEngine.Rendering.DepthBits depthBufferBits = 0, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat = 4, UnityEngine.FilterMode filterMode = 0, UnityEngine.Rendering.TextureDimension dimension = 2, System.Boolean enableRandomWrite = False, System.Boolean useMipMap = False, System.Boolean autoGenerateMips = True, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, UnityEngine.Rendering.MSAASamples msaaSamples = 1, System.Boolean bindTextureMS = False, System.Boolean useDynamicScale = False, UnityEngine.RenderTextureMemoryless memoryless = 0, UnityEngine.VRTextureUsage vrUsage = 0, System.String name = )

Disassembly:
	0x039D62F8 LDR V10, [X31 + 0xC0]
	0x039D62FC ADD X31, X31, 0x140
	0x039D6300 RET
	0x039D6304 BL 0x1C16F20
	0x039D6308 SUB X31, X31, 0xC0
	0x039D630C STR D8, [X31 + 0x60]
	0x039D6310 STR X30, [X31 + 0x68]
	0x039D6314 STP X28, X27, [X31 + 0x70]
	0x039D6318 STP X26, X25, [X31 + 0x80]
	0x039D631C STP X24, X23, [X31 + 0x90]
	0x039D6320 STP X22, X21, [X31 + 0xA0]
	0x039D6324 STP X20, X19, [X31 + 0xB0]
	0x039D6328 ADRP X28, 0xA0B000
	0x039D632C ADRP X27, 0x77A000
	0x039D6330 LDRB W8, [X28 + 0xD3A]
	0x039D6334 LDR X27, [X27 + 0x9B0]
	0x039D6338 MOV V8.16B, V0.16B
	0x039D633C MOV W26, W7
	0x039D6340 MOV W19, W6
	0x039D6344 MOV W20, W5
	0x039D6348 MOV W21, W4
	0x039D634C MOV W22, W3
	0x039D6350 MOV W23, W2
	0x039D6354 MOV W24, W1
	0x039D6358 MOV X25, X0
	0x039D635C TBNZ X8, 0x0, 0x39D6374
	0x039D6360 ADRP X0, 0x77A000
	0x039D6364 LDR X0, [X0 + 0x9B0]
	0x039D6368 BL 0x1C16CF4
	0x039D636C MOVZ W8, 0x1
	0x039D6370 STRB W8, [X28 + 0xD3A]
	0x039D6374 LDR X0, [X27]
	0x039D6378 LDR W8, [X0 + 0xE0]
	0x039D637C CBNZ W8, 0x39D6388
	0x039D6380 BL 0x1C16DFC
	0x039D6384 LDR X0, [X27]
	0x039D6388 LDR X8, [X0 + 0xB8]
	0x039D638C LDR X0, [X8]
	0x039D6390 CBZ X0, 0x39D6448
	0x039D6394 LDR X8, [X31 + 0x108]
	0x039D6398 LDR W9, [X31 + 0x100]
	0x039D639C LDR W10, [X31 + 0xF8]
	0x039D63A0 LDRB W11, [X31 + 0xF0]
	0x039D63A4 LDRB W12, [X31 + 0xE8]
	0x039D63A8 LDR W13, [X31 + 0xE0]
	0x039D63AC LDRB W15, [X31 + 0xD0]
	0x039D63B0 LDRB W16, [X31 + 0xC8]
	0x039D63B4 LDRB W17, [X31 + 0xC0]
	0x039D63B8 LDR W14, [X31 + 0xD8]
	0x039D63BC STR X8, [X31 + 0x50]
	0x039D63C0 STR W9, [X31 + 0x48]
	0x039D63C4 STR W10, [X31 + 0x40]
	0x039D63C8 AND W8, W11, 0x1
	0x039D63CC AND W9, W12, 0x1
	0x039D63D0 STR W13, [X31 + 0x28]
	0x039D63D4 AND W10, W15, 0x1
	0x039D63D8 AND W11, W16, 0x1
	0x039D63DC AND W12, W17, 0x1
	0x039D63E0 AND W13, W26, 0x1
	0x039D63E4 MOV V0.16B, V8.16B
	0x039D63E8 MOV X1, X25
	0x039D63EC MOV W2, W24
	0x039D63F0 MOV W3, W23
	0x039D63F4 MOV W4, W22
	0x039D63F8 MOV W5, W21
	0x039D63FC MOV W6, W20
	0x039D6400 MOV W7, W19
	0x039D6404 STR W14, [X31 + 0x20]
	0x039D6408 STRB W8, [X31 + 0x38]
	0x039D640C STRB W9, [X31 + 0x30]
	0x039D6410 STRB W10, [X31 + 0x18]
	0x039D6414 STRB W11, [X31 + 0x10]
	0x039D6418 STRB W12, [X31 + 0x8]
	0x039D641C STRB W13, [X31]
	0x039D6420 BL 0x39D644C
	0x039D6424 LDP X20, X19, [X31 + 0xB0]
	0x039D6428 LDP X22, X21, [X31 + 0xA0]
	0x039D642C LDP X24, X23, [X31 + 0x90]
	0x039D6430 LDP X26, X25, [X31 + 0x80]
	0x039D6434 LDP X28, X27, [X31 + 0x70]
	0x039D6438 LDR X30, [X31 + 0x68]
	0x039D643C LDR V8, [X31 + 0x60]
	0x039D6440 ADD X31, X31, 0xC0
	0x039D6444 RET
	0x039D6448 BL 0x1C16F20
	0x039D644C SUB X31, X31, 0x100
	0x039D6450 STR D8, [X31 + 0x90]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], D8
	003 Move [X31+136], X30
	004 Move [X31+144], X28
	005 Move [X31+152], X27
	006 Move [X31+160], X26
	007 Move [X31+168], X25
	008 Move [X31+176], X24
	009 Move [X31+184], X23
	010 Move [X31+192], X22
	011 Move [X31+200], X21
	012 Move [X31+208], X20
	013 Move [X31+216], X19
	014 Move X28, 0xA0C000
	015 Move X27, 0x77B000
	016 Move W8, [X28+3382]
	017 Move X27, [X27+2480]
	018 Move V8, V0
	019 Move W26, W7
	020 Move W19, W6
	021 Move W20, W5
	022 Move W21, W4
	023 Move W22, W3
	024 Move W23, W2
	025 Move W24, W1
	026 Move W25, W0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0x77B000
	032 Move X0, [X0+2480]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X28+3382], W8
	036 Move X0, [X27]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X27]
	042 Move X8, [X0+184]
	043 Move X0, [X8]
	044 Compare X0, 0
	045 JumpIfEqual {102}
	046 Move X8, [X31+320]
	047 Move W9, [X31+312]
	048 Move W10, [X31+304]
	049 Move W11, [X31+296]
	050 Move W12, [X31+288]
	051 Move W13, [X31+280]
	052 Move W15, [X31+264]
	053 Move W16, [X31+256]
	054 Move W17, [X31+248]
	055 Move W1, [X31+240]
	056 Move W2, [X31+232]
	057 Move W3, [X31+224]
	058 Move W14, [X31+272]
	059 Move [X31+104], X8
	060 Move [X31+96], W9
	061 Move [X31+88], W10
	062 And W8, W11, 1
	063 And W9, W12, 1
	064 Move [X31+64], W13
	065 And W10, W15, 1
	066 And W11, W16, 1
	067 And W12, W17, 1
	068 And W13, W1, 1
	069 Move [X31+16], W2
	070 Move [X31+8], W3
	071 Move V0, V8
	072 Move W1, W25
	073 Move W2, W24
	074 Move W3, W23
	075 Move W4, W22
	076 Move W5, W21
	077 Move W6, W20
	078 Move W7, W19
	079 Move [X31+56], W14
	080 Move [X31+80], W8
	081 Move [X31+72], W9
	082 Move [X31+48], W10
	083 Move [X31+40], W11
	084 Move [X31+32], W12
	085 Move [X31+24], W13
	086 Move [X31], W26
	087 Call RTHandleSystem.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, V0, X16, X17, X18, X19, X20, X21
	088 Move X20, [X31+208]
	089 Move X19, [X31+216]
	090 Move X22, [X31+192]
	091 Move X21, [X31+200]
	092 Move X24, [X31+176]
	093 Move X23, [X31+184]
	094 Move X26, [X31+160]
	095 Move X25, [X31+168]
	096 Move X28, [X31+144]
	097 Move X27, [X31+152]
	098 Move X30, [X31+136]
	099 Move V8, [X31+128]
	100 Add X31, X31, 224
	101 Return X0
	102 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, System.String name = )

Disassembly:
	0x039D69F4 MOV X2, X31
	0x039D69F8 STP X21, X19, [X20 + 0x10]
	0x039D69FC STR X31, [X20 + 0x20]
	0x039D6A00 STR X31, [X31 + 0x20]
	0x039D6A04 STP V0, V0, [X31]
	0x039D6A08 BL 0x3C4B0C4
	0x039D6A0C LDR X8, [X31 + 0x20]
	0x039D6A10 LDP V0, V1, [X31]
	0x039D6A14 STRH W31, [X20 + 0x50]
	0x039D6A18 STRB W31, [X20 + 0xA8]
	0x039D6A1C STR X8, [X20 + 0x48]
	0x039D6A20 STUR V1, [X20 + 0x38]
	0x039D6A24 STUR V0, [X20 + 0x28]
	0x039D6A28 STRB W31, [X20 + 0x52]
	0x039D6A2C CBZ X19, 0x39D6A58
	0x039D6A30 MOV X0, X19
	0x039D6A34 MOV X1, X31
	0x039D6A38 BL 0x3C389D4
	0x039D6A3C STR X0, [X20 + 0x58]
	0x039D6A40 MOV X0, X20
	0x039D6A44 LDP X20, X19, [X31 + 0x50]
	0x039D6A48 LDP X22, X21, [X31 + 0x40]
	0x039D6A4C LDR X30, [X31 + 0x30]
	0x039D6A50 ADD X31, X31, 0x60
	0x039D6A54 RET
	0x039D6A58 BL 0x1C16F20
	0x039D6A5C SUB X31, X31, 0x60
	0x039D6A60 STR X30, [X31 + 0x30]
	0x039D6A64 STP X22, X21, [X31 + 0x40]
	0x039D6A68 STP X20, X19, [X31 + 0x50]
	0x039D6A6C ADRP X22, 0xA0B000
	0x039D6A70 ADRP X21, 0x71D000
	0x039D6A74 LDRB W8, [X22 + 0xD58]
	0x039D6A78 LDR X21, [X21 + 0x988]
	0x039D6A7C MOV X20, X1
	0x039D6A80 MOV X19, X0
	0x039D6A84 TBNZ X8, 0x0, 0x39D6A9C
	0x039D6A88 ADRP X0, 0x71D000
	0x039D6A8C LDR X0, [X0 + 0x988]
	0x039D6A90 BL 0x1C16CF4
	0x039D6A94 MOVZ W8, 0x1
	0x039D6A98 STRB W8, [X22 + 0xD58]
	0x039D6A9C LDR X8, [X20 + 0x20]
	0x039D6AA0 LDP V1, V0, [X20]
	0x039D6AA4 LDR X2, [X21]
	0x039D6AA8 ADD X1, X31, 0x0
	0x039D6AAC MOV X0, X19
	0x039D6AB0 STR X8, [X31 + 0x20]
	0x039D6AB4 STP V1, V0, [X31]
	0x039D6AB8 BL 0x39D6B74
	0x039D6ABC LDP X20, X19, [X31 + 0x50]
	0x039D6AC0 LDP X22, X21, [X31 + 0x40]
	0x039D6AC4 LDR X30, [X31 + 0x30]
	0x039D6AC8 ADD X31, X31, 0x60
	0x039D6ACC RET
	0x039D6AD0 SUB X31, X31, 0x90
	0x039D6AD4 STR X30, [X31 + 0x60]
	0x039D6AD8 STP X22, X21, [X31 + 0x70]
	0x039D6ADC STP X20, X19, [X31 + 0x80]
	0x039D6AE0 ADRP X22, 0xA0B000
	0x039D6AE4 ADRP X21, 0x77A000
	0x039D6AE8 LDRB W8, [X22 + 0xD3F]
	0x039D6AEC LDR X21, [X21 + 0x9B0]
	0x039D6AF0 MOV X19, X1
	0x039D6AF4 MOV X20, X0
	0x039D6AF8 TBNZ X8, 0x0, 0x39D6B10
	0x039D6AFC ADRP X0, 0x77A000
	0x039D6B00 LDR X0, [X0 + 0x9B0]
	0x039D6B04 BL 0x1C16CF4
	0x039D6B08 MOVZ W8, 0x1
	0x039D6B0C STRB W8, [X22 + 0xD3F]
	0x039D6B10 LDR X0, [X21]
	0x039D6B14 LDR W8, [X0 + 0xE0]
	0x039D6B18 CBNZ W8, 0x39D6B24
	0x039D6B1C BL 0x1C16DFC
	0x039D6B20 LDR X0, [X21]
	0x039D6B24 LDR X8, [X0 + 0xB8]
	0x039D6B28 LDR X9, [X20 + 0x20]
	0x039D6B2C LDP V0, V1, [X20]
	0x039D6B30 LDR X0, [X8]
	0x039D6B34 STR X9, [X31 + 0x50]
	0x039D6B38 STP V0, V1, [X31 + 0x30]
	0x039D6B3C CBZ X0, 0x39D6B70
	0x039D6B40 LDP V0, V1, [X31 + 0x30]
	0x039D6B44 LDR X8, [X31 + 0x50]
	0x039D6B48 ADD X1, X31, 0x0
	0x039D6B4C MOV X2, X19
	0x039D6B50 STP V0, V1, [X31]
	0x039D6B54 STR X8, [X31 + 0x20]
	0x039D6B58 BL 0x39D6B74
	0x039D6B5C LDP X20, X19, [X31 + 0x80]
	0x039D6B60 LDP X22, X21, [X31 + 0x70]
	0x039D6B64 LDR X30, [X31 + 0x60]
	0x039D6B68 ADD X31, X31, 0x90
	0x039D6B6C RET
	0x039D6B70 BL 0x1C16F20
	0x039D6B74 SUB X31, X31, 0x60
	0x039D6B78 STP X30, X23, [X31 + 0x30]
	0x039D6B7C STP X22, X21, [X31 + 0x40]
	0x039D6B80 STP X20, X19, [X31 + 0x50]
	0x039D6B84 ADRP X22, 0xA0B000
	0x039D6B88 ADRP X23, 0x77D000
	0x039D6B8C LDRB W8, [X22 + 0xD59]
	0x039D6B90 LDR X23, [X23 + 0xC0]
	0x039D6B94 MOV X19, X2
	0x039D6B98 MOV X20, X1
	0x039D6B9C MOV X21, X0
	0x039D6BA0 TBNZ X8, 0x0, 0x39D6BB8
	0x039D6BA4 ADRP X0, 0x77D000
	0x039D6BA8 LDR X0, [X0 + 0xC0]
	0x039D6BAC BL 0x1C16CF4
	0x039D6BB0 MOVZ W8, 0x1
	0x039D6BB4 STRB W8, [X22 + 0xD59]
	0x039D6BB8 LDR X0, [X23]
	0x039D6BBC BL 0x1C16F10
	0x039D6BC0 MOV X1, X31
	0x039D6BC4 MOV X22, X0
	0x039D6BC8 BL 0x33BDD8C
	0x039D6BCC STR X21, [X22 + 0x10]
	0x039D6BD0 LDR X8, [X20 + 0x20]
	0x039D6BD4 LDP V1, V0, [X20]
	0x039D6BD8 MOV X0, X22
	0x039D6BDC LDP X30, X23, [X31 + 0x30]
	0x039D6BE0 STR X8, [X31 + 0x20]
	0x039D6BE4 STP V1, V0, [X31]
	0x039D6BE8 STP X31, X31, [X22 + 0x18]
	0x039D6BEC LDP V0, V1, [X31]
	0x039D6BF0 STRH W31, [X22 + 0x50]
	0x039D6BF4 STRB W31, [X22 + 0xA8]
	0x039D6BF8 STRB W31, [X22 + 0x52]
	0x039D6BFC STR X8, [X22 + 0x48]
	0x039D6C00 STUR V1, [X22 + 0x38]
	0x039D6C04 STUR V0, [X22 + 0x28]
	0x039D6C08 STR X19, [X22 + 0x58]
	0x039D6C0C LDP X20, X19, [X31 + 0x50]
	0x039D6C10 LDP X22, X21, [X31 + 0x40]
	0x039D6C14 ADD X31, X31, 0x60
	0x039D6C18 RET
	0x039D6C1C STR X30, [X31 - 0x20]!
	0x039D6C20 STP X20, X19, [X31 + 0x10]
	0x039D6C24 ADRP X20, 0xA0B000
	0x039D6C28 ADRP X19, 0x71D000
	0x039D6C2C LDRB W8, [X20 + 0xD40]
	0x039D6C30 LDR X19, [X19 + 0xA28]
	0x039D6C34 TBNZ X8, 0x0, 0x39D6C58
	0x039D6C38 ADRP X0, 0x71D000
	0x039D6C3C LDR X0, [X0 + 0xA28]
	0x039D6C40 BL 0x1C16CF4
	0x039D6C44 ADRP X0, 0x77D000
	0x039D6C48 LDR X0, [X0 + 0xD0]
	0x039D6C4C BL 0x1C16CF4
	0x039D6C50 MOVZ W8, 0x1
	0x039D6C54 STRB W8, [X20 + 0xD40]
	0x039D6C58 LDR X0, [X19]
	0x039D6C5C ADRP X19, 0x77D000
	0x039D6C60 LDR W8, [X0 + 0xE0]
	0x039D6C64 LDR X19, [X19 + 0xD0]
	0x039D6C68 CBNZ W8, 0x39D6C70
	0x039D6C6C BL 0x1C16DFC
	0x039D6C70 LDR X0, [X19]

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+224], D8
	003 Move [X31+240], X29
	004 Move [X31+248], X30
	005 Move [X31+256], X28
	006 Move [X31+264], X27
	007 Move [X31+272], X26
	008 Move [X31+280], X25
	009 Move [X31+288], X24
	010 Move [X31+296], X23
	011 Move [X31+304], X22
	012 Move [X31+312], X21
	013 Move [X31+320], X20
	014 Move [X31+328], X19
	015 Move X21, 0xA0C000
	016 Move X20, 0x77B000
	017 Move W8, [X21+3383]
	018 Move X20, [X20+2480]
	019 Move X26, X5
	020 Move V8, V0
	021 Move W25, W4
	022 Move W23, W3
	023 Move W19, W2
	024 Move W22, W1
	025 Move X24, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x77B000
	031 Move X0, [X0+2480]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3383], W8
	035 Move X0, [X20]
	036 NotImplemented "Instruction MOVI not yet implemented."
	037 Move [X31+208], W31
	038 Move [X31+176], V0
	039 Move [X31+184], V0
	040 Move [X31+10], V0
	041 Move W8, [X0+224]
	042 Move [X31+232], W23
	043 Move [X31+236], W22
	044 Move [X31+156], W25
	045 Move [X31+144], X26
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move W10, [X24]
	051 Move W9, [X24+4]
	052 Move X8, [X0+184]
	053 Move V0, [X24+16]
	054 Move V1, [X24+32]
	055 Move V2, [X24]
	056 Move [X31+132], W9
	057 Move [X31+136], W10
	058 Move W9, [X24+12]
	059 Move X28, [X8]
	060 Add X0, X31, 160
	061 Move X1, X31
	062 Move [X31+140], W9
	063 Move W9, [X24+48]
	064 Move [X31+176], V0
	065 Move [X31+184], V1
	066 Move [X31+10], V2
	067 Move [X31+208], W9
	068 Call RenderTextureDescriptor.get_depthBufferBits, X0
	069 Move W8, [X24+48]
	070 Move V2, [X24+16]
	071 Move V0, [X24+32]
	072 Move V1, [X24]
	073 Move W29, W0
	074 Add X0, X31, 160
	075 Move X1, X31
	076 Move [X31+208], W8
	077 Move [X31+176], V2
	078 Move [X31+184], V0
	079 Move [X31+10], V1
	080 Call RenderTextureDescriptor.get_graphicsFormat, X0
	081 Move V1, [X24]
	082 Move V0, [X24+16]
	083 Move V2, [X24+2]
	084 Move W8, [X24+48]
	085 Move W26, [X24+32]
	086 Move W20, W0
	087 Add X0, X31, 160
	088 Move X1, X31
	089 Move [X31+160], V1
	090 Move [X31+168], V0
	091 Move [X31+12], V2
	092 Move [X31+208], W8
	093 Call RenderTextureDescriptor.get_enableRandomWrite, X0
	094 Move W8, [X24+48]
	095 Move V2, [X24+16]
	096 Move V0, [X24+32]
	097 Move V1, [X24]
	098 Move W21, W0
	099 Add X0, X31, 160
	100 Move X1, X31
	101 Move [X31+208], W8
	102 Move [X31+176], V2
	103 Move [X31+184], V0
	104 Move [X31+10], V1
	105 Call RenderTextureDescriptor.get_useMipMap, X0
	106 Move W8, [X24+48]
	107 Move V2, [X24+16]
	108 Move V0, [X24+32]
	109 Move V1, [X24]
	110 Move W22, W0
	111 Add X0, X31, 160
	112 Move X1, X31
	113 Move [X31+208], W8
	114 Move [X31+176], V2
	115 Move [X31+184], V0
	116 Move [X31+10], V1
	117 Call RenderTextureDescriptor.get_autoGenerateMips, X0
	118 Move V0, [X24]
	119 Move V2, [X24+16]
	120 Move V1, [X24+2]
	121 Move W8, [X24+48]
	122 Move W27, [X24+8]
	123 Move W23, W0
	124 Add X0, X31, 160
	125 Move X1, X31
	126 Move [X31+160], V0
	127 Move [X31+168], V2
	128 Move [X31+12], V1
	129 Move [X31+208], W8
	130 Call RenderTextureDescriptor.get_bindMS, X0
	131 Move W8, [X24+48]
	132 Move V2, [X24+16]
	133 Move V0, [X24+32]
	134 Move V1, [X24]
	135 Move W25, W0
	136 Add X0, X31, 160
	137 Move X1, X31
	138 Move [X31+208], W8
	139 Move [X31+176], V2
	140 Move [X31+184], V0
	141 Move [X31+10], V1
	142 Call RenderTextureDescriptor.get_useDynamicScale, X0
	143 Compare X28, 0
	144 JumpIfEqual {196}
	145 Move X10, [X31+144]
	146 Move W8, [X24+40]
	147 Move W9, [X24+48]
	148 Move W2, [X31+132]
	149 Move W1, [X31+136]
	150 Move [X31+104], X10
	151 Move W10, [X31+156]
	152 Move W6, [X31+140]
	153 Move [X31+96], W8
	154 Move [X31+88], W9
	155 Move [X31+56], W10
	156 Move W10, [X31+232]
	157 Move W14, [X31+236]
	158 And W8, W0, 1
	159 And W9, W25, 1
	160 And W11, W23, 1
	161 And W10, W10, 1
	162 And W12, W22, 1
	163 And W13, W21, 1
	164 Move V0, V8
	165 Move X0, X28
	166 Move W3, W19
	167 Move W4, W19
	168 Move W5, W19
	169 Move W7, W29
	170 Move [X31+64], W27
	171 Move [X31+16], W26
	172 Move [X31+8], W14
	173 Move [X31+80], W8
	174 Move [X31+72], W9
	175 Move [X31+48], W10
	176 Move [X31+40], W11
	177 Move [X31+32], W12
	178 Move [X31+24], W13
	179 Move [X31], W20
	180 Call RTHandleSystem.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, V0, X16, X17, X18, X19, X20, X21
	181 Move X20, [X31+320]
	182 Move X19, [X31+328]
	183 Move X22, [X31+304]
	184 Move X21, [X31+312]
	185 Move X24, [X31+288]
	186 Move X23, [X31+296]
	187 Move X26, [X31+272]
	188 Move X25, [X31+280]
	189 Move X28, [X31+256]
	190 Move X27, [X31+264]
	191 Move X29, [X31+240]
	192 Move X30, [X31+248]
	193 Move V8, [X31+224]
	194 Add X31, X31, 336
	195 Return X0
	196 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Vector2 scaleFactor, System.Int32 slices = 1, UnityEngine.Rendering.DepthBits depthBufferBits = 0, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat = 4, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, UnityEngine.Rendering.TextureDimension dimension = 2, System.Boolean enableRandomWrite = False, System.Boolean useMipMap = False, System.Boolean autoGenerateMips = True, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, UnityEngine.Rendering.MSAASamples msaaSamples = 1, System.Boolean bindTextureMS = False, System.Boolean useDynamicScale = False, UnityEngine.RenderTextureMemoryless memoryless = 0, UnityEngine.VRTextureUsage vrUsage = 0, System.String name = )

Disassembly:
	0x039D6C74 MOV X1, X31
	0x039D6C78 BL 0x3C0649C
	0x039D6C7C LDP X20, X19, [X31 + 0x10]
	0x039D6C80 MOV X0, X31
	0x039D6C84 LDR X30, [X31], #0x20
	0x039D6C88 RET
	0x039D6C8C STR X30, [X31 - 0x30]!
	0x039D6C90 STP X22, X21, [X31 + 0x10]
	0x039D6C94 STP X20, X19, [X31 + 0x20]
	0x039D6C98 ADRP X22, 0xA0B000
	0x039D6C9C ADRP X21, 0x77A000
	0x039D6CA0 LDRB W8, [X22 + 0xD41]
	0x039D6CA4 LDR X21, [X21 + 0x9B0]
	0x039D6CA8 MOV W19, W1
	0x039D6CAC MOV W20, W0
	0x039D6CB0 TBNZ X8, 0x0, 0x39D6CC8
	0x039D6CB4 ADRP X0, 0x77A000
	0x039D6CB8 LDR X0, [X0 + 0x9B0]
	0x039D6CBC BL 0x1C16CF4
	0x039D6CC0 MOVZ W8, 0x1
	0x039D6CC4 STRB W8, [X22 + 0xD41]
	0x039D6CC8 LDR X0, [X21]
	0x039D6CCC LDR W8, [X0 + 0xE0]
	0x039D6CD0 CBNZ W8, 0x39D6CDC
	0x039D6CD4 BL 0x1C16DFC
	0x039D6CD8 LDR X0, [X21]
	0x039D6CDC LDR X8, [X0 + 0xB8]
	0x039D6CE0 LDR X0, [X8]
	0x039D6CE4 CBZ X0, 0x39D6D00
	0x039D6CE8 MOV W1, W20
	0x039D6CEC MOV W2, W19
	0x039D6CF0 LDP X20, X19, [X31 + 0x20]
	0x039D6CF4 LDP X22, X21, [X31 + 0x10]
	0x039D6CF8 LDR X30, [X31], #0x30
	0x039D6CFC B 0x39D6D04
	0x039D6D00 BL 0x1C16F20
	0x039D6D04 SUB X31, X31, 0xA0
	0x039D6D08 STR X30, [X31 + 0x40]
	0x039D6D0C STP X28, X27, [X31 + 0x50]
	0x039D6D10 STP X26, X25, [X31 + 0x60]
	0x039D6D14 STP X24, X23, [X31 + 0x70]
	0x039D6D18 STP X22, X21, [X31 + 0x80]
	0x039D6D1C STP X20, X19, [X31 + 0x90]
	0x039D6D20 ADRP X22, 0xA0B000
	0x039D6D24 LDRB W8, [X22 + 0xD4B]
	0x039D6D28 MOV W20, W2
	0x039D6D2C MOV W21, W1
	0x039D6D30 MOV X19, X0
	0x039D6D34 TBNZ X8, 0x0, 0x39D6DB8
	0x039D6D38 ADRP X0, 0x71D000
	0x039D6D3C LDR X0, [X0 + 0xA28]
	0x039D6D40 BL 0x1C16CF4
	0x039D6D44 ADRP X0, 0x77B000
	0x039D6D48 LDR X0, [X0 + 0x2D8]
	0x039D6D4C BL 0x1C16CF4
	0x039D6D50 ADRP X0, 0x77D000
	0x039D6D54 LDR X0, [X0 + 0xD8]
	0x039D6D58 BL 0x1C16CF4
	0x039D6D5C ADRP X0, 0x77D000
	0x039D6D60 LDR X0, [X0 + 0xE0]
	0x039D6D64 BL 0x1C16CF4
	0x039D6D68 ADRP X0, 0x77D000
	0x039D6D6C LDR X0, [X0 + 0xE8]
	0x039D6D70 BL 0x1C16CF4
	0x039D6D74 ADRP X0, 0x77D000
	0x039D6D78 LDR X0, [X0 + 0xF0]
	0x039D6D7C BL 0x1C16CF4
	0x039D6D80 ADRP X0, 0x77D000
	0x039D6D84 LDR X0, [X0 + 0xF8]
	0x039D6D88 BL 0x1C16CF4
	0x039D6D8C ADRP X0, 0x77D000
	0x039D6D90 LDR X0, [X0 + 0x100]
	0x039D6D94 BL 0x1C16CF4
	0x039D6D98 ADRP X0, 0x77D000
	0x039D6D9C LDR X0, [X0 + 0x108]
	0x039D6DA0 BL 0x1C16CF4
	0x039D6DA4 ADRP X0, 0x77D000
	0x039D6DA8 LDR X0, [X0 + 0x110]
	0x039D6DAC BL 0x1C16CF4
	0x039D6DB0 MOVZ W8, 0x1
	0x039D6DB4 STRB W8, [X22 + 0xD4B]
	0x039D6DB8 STP X31, X31, [X31 + 0x20]
	0x039D6DBC STR X31, [X31 + 0x30]
	0x039D6DC0 LDR X0, [X19 + 0x18]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+96], D10
	003 Move [X31+104], D9
	004 Move [X31+112], D8
	005 Move [X31+120], X30
	006 Move [X31+128], X28
	007 Move [X31+136], X27
	008 Move [X31+144], X26
	009 Move [X31+152], X25
	010 Move [X31+160], X24
	011 Move [X31+168], X23
	012 Move [X31+176], X22
	013 Move [X31+184], X21
	014 Move [X31+192], X20
	015 Move [X31+200], X19
	016 Move X28, 0xA0C000
	017 Move X27, 0x77B000
	018 Move W8, [X28+3384]
	019 Move X27, [X27+2480]
	020 Move V8, V2
	021 Move W26, W7
	022 Move W25, W6
	023 Move W19, W5
	024 Move W20, W4
	025 Move W21, W3
	026 Move W22, W2
	027 Move W23, W1
	028 Move W24, W0
	029 Move V9, V1
	030 Move V10, V0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {40}
	035 Move X0, 0x77B000
	036 Move X0, [X0+2480]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X28+3384], W8
	040 Move X0, [X27]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {46}
	044 Call 0x1C17DFC
	045 Move X0, [X27]
	046 Move X8, [X0+184]
	047 Move X0, [X8]
	048 Compare X0, 0
	049 JumpIfEqual {101}
	050 Move X8, [X31+272]
	051 Move W9, [X31+264]
	052 Move W10, [X31+256]
	053 Move W11, [X31+248]
	054 Move W12, [X31+240]
	055 Move W15, [X31+216]
	056 Move W16, [X31+208]
	057 Move W13, [X31+232]
	058 Move W14, [X31+224]
	059 Move [X31+72], X8
	060 Move [X31+64], W9
	061 Move [X31+56], W10
	062 And W8, W11, 1
	063 And W9, W12, 1
	064 And W10, W15, 1
	065 And W11, W16, 1
	066 And W12, W26, 1
	067 And W7, W25, 1
	068 Move V0, V10
	069 Move V1, V9
	070 Move V2, V8
	071 Move W1, W24
	072 Move W2, W23
	073 Move W3, W22
	074 Move W4, W21
	075 Move W5, W20
	076 Move W6, W19
	077 Move [X31+32], W13
	078 Move [X31+24], W14
	079 Move [X31+48], W8
	080 Move [X31+40], W9
	081 Move [X31+16], W10
	082 Move [X31+8], W11
	083 Move [X31], W12
	084 Call RTHandleSystem.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, V0, X13, X14, X15, X16, X17, X18
	085 Move X20, [X31+192]
	086 Move X19, [X31+200]
	087 Move X22, [X31+176]
	088 Move X21, [X31+184]
	089 Move X24, [X31+160]
	090 Move X23, [X31+168]
	091 Move X26, [X31+144]
	092 Move X25, [X31+152]
	093 Move X28, [X31+128]
	094 Move X27, [X31+136]
	095 Move X30, [X31+120]
	096 Move D9, [X31+104]
	097 Move D8, [X31+112]
	098 Move V10, [X31+96]
	099 Add X31, X31, 208
	100 Return X0
	101 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Vector2 scaleFactor, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, System.String name = )

Disassembly:
	0x039D7094 BL 0x1C16CF4
	0x039D7098 MOVZ W8, 0x1
	0x039D709C STRB W8, [X21 + 0xD44]
	0x039D70A0 LDR X0, [X20]
	0x039D70A4 LDR W8, [X0 + 0xE0]
	0x039D70A8 CBNZ W8, 0x39D70B4
	0x039D70AC BL 0x1C16DFC
	0x039D70B0 LDR X0, [X20]
	0x039D70B4 LDR X8, [X0 + 0xB8]
	0x039D70B8 LDR X0, [X8]
	0x039D70BC CBZ X0, 0x39D70D0
	0x039D70C0 AND W1, W19, 0x1
	0x039D70C4 LDP X20, X19, [X31 + 0x10]
	0x039D70C8 LDP X30, X21, [X31], #0x20
	0x039D70CC B 0x39D70D4
	0x039D70D0 BL 0x1C16F20
	0x039D70D4 STP X30, X25, [X31 - 0x40]!
	0x039D70D8 STP X24, X23, [X31 + 0x10]
	0x039D70DC STP X22, X21, [X31 + 0x20]
	0x039D70E0 STP X20, X19, [X31 + 0x30]
	0x039D70E4 ADRP X21, 0xA0A000
	0x039D70E8 LDRB W8, [X21 + 0xD4F]
	0x039D70EC MOV X19, X0
	0x039D70F0 AND W20, W1, 0x1
	0x039D70F4 TBNZ X8, 0x0, 0x39D7130
	0x039D70F8 ADRP X0, 0x77C000
	0x039D70FC LDR X0, [X0 + 0x118]
	0x039D7100 BL 0x1C16CF4
	0x039D7104 ADRP X0, 0x77C000
	0x039D7108 LDR X0, [X0 + 0x120]
	0x039D710C BL 0x1C16CF4
	0x039D7110 ADRP X0, 0x77C000
	0x039D7114 LDR X0, [X0 + 0xF8]
	0x039D7118 BL 0x1C16CF4
	0x039D711C ADRP X0, 0x71C000
	0x039D7120 LDR X0, [X0 + 0x598]
	0x039D7124 BL 0x1C16CF4
	0x039D7128 MOVZ W8, 0x1
	0x039D712C STRB W8, [X21 + 0xD4F]
	0x039D7130 LDRB W8, [X19 + 0x10]
	0x039D7134 CMP W8, W20
	0x039D7138 B.EQ 0x39D7230
	0x039D713C LDR X8, [X19 + 0x18]
	0x039D7140 STRB W20, [X19 + 0x10]
	0x039D7144 CBZ X8, 0x39D722C
	0x039D7148 LDR W1, [X8 + 0x20]
	0x039D714C ADRP X8, 0x77C000
	0x039D7150 LDR X8, [X8 + 0x118]
	0x039D7154 ADD X20, X19, 0x20
	0x039D7158 MOV X0, X20
	0x039D715C LDR X2, [X8]
	0x039D7160 BL 0x2142E6C
	0x039D7164 LDR X0, [X19 + 0x18]
	0x039D7168 CBZ X0, 0x39D722C
	0x039D716C ADRP X8, 0x77C000
	0x039D7170 LDR X1, [X20]
	0x039D7174 LDR X8, [X8 + 0x120]
	0x039D7178 LDR X2, [X8]
	0x039D717C BL 0x2DC057C
	0x039D7180 LDR X8, [X20]
	0x039D7184 CBZ X8, 0x39D722C
	0x039D7188 LDR W22, [X8 + 0x18]
	0x039D718C CMP W22, 0x1
	0x039D7190 B.LT 0x39D7230
	0x039D7194 ADRP X24, 0x71C000
	0x039D7198 LDR X24, [X24 + 0x598]
	0x039D719C MOV W23, W31
	0x039D71A0 LDR W9, [X8 + 0x18]
	0x039D71A4 CMP W23, W9
	0x039D71A8 B.CS 0x39D7244
	0x039D71AC ADD X8, X8, W23, 0x3, SXTW
	0x039D71B0 LDR X25, [X8 + 0x20]
	0x039D71B4 CBZ X25, 0x39D722C
	0x039D71B8 LDR X0, [X24]
	0x039D71BC LDR X21, [X25 + 0x18]
	0x039D71C0 LDR W8, [X0 + 0xE0]
	0x039D71C4 CBNZ W8, 0x39D71CC
	0x039D71C8 BL 0x1C16DFC
	0x039D71CC MOV X0, X21
	0x039D71D0 MOV X1, X31
	0x039D71D4 BL 0x3C38948
	0x039D71D8 TBZ X0, 0x0, 0x39D7218
	0x039D71DC CBZ X21, 0x39D722C
	0x039D71E0 MOV X0, X21
	0x039D71E4 MOV X1, X31
	0x039D71E8 BL 0x3C20A50
	0x039D71EC LDRB W8, [X19 + 0x10]
	0x039D71F0 CBZ W8, 0x39D71F8
	0x039D71F4 LDRB W8, [X25 + 0x52]
	0x039D71F8 CMP W8, 0x0
	0x039D71FC CSET W1, NE
	0x039D7200 MOV X0, X21
	0x039D7204 MOV X2, X31
	0x039D7208 BL 0x3C2078C
	0x039D720C MOV X0, X21
	0x039D7210 MOV X1, X31
	0x039D7214 BL 0x3C20A14
	0x039D7218 ADD W23, W23, 0x1
	0x039D721C CMP W22, W23
	0x039D7220 B.EQ 0x39D7230
	0x039D7224 LDR X8, [X20]
	0x039D7228 CBNZ X8, 0x39D71A0
	0x039D722C BL 0x1C16F20
	0x039D7230 LDP X20, X19, [X31 + 0x30]
	0x039D7234 LDP X22, X21, [X31 + 0x20]
	0x039D7238 LDP X24, X23, [X31 + 0x10]
	0x039D723C LDP X30, X25, [X31], #0x40
	0x039D7240 RET
	0x039D7244 BL 0x1C16F28
	0x039D7248 STR X30, [X31 - 0x30]!
	0x039D724C STP X22, X21, [X31 + 0x10]
	0x039D7250 STP X20, X19, [X31 + 0x20]
	0x039D7254 ADRP X22, 0xA0A000
	0x039D7258 ADRP X21, 0x779000
	0x039D725C LDRB W8, [X22 + 0xD45]
	0x039D7260 LDR X21, [X21 + 0x9B0]
	0x039D7264 MOV W19, W1
	0x039D7268 MOV W20, W0
	0x039D726C TBNZ X8, 0x0, 0x39D7284
	0x039D7270 ADRP X0, 0x779000
	0x039D7274 LDR X0, [X0 + 0x9B0]
	0x039D7278 BL 0x1C16CF4
	0x039D727C MOVZ W8, 0x1
	0x039D7280 STRB W8, [X22 + 0xD45]
	0x039D7284 LDR X0, [X21]
	0x039D7288 LDR W8, [X0 + 0xE0]
	0x039D728C CBNZ W8, 0x39D7298
	0x039D7290 BL 0x1C16DFC
	0x039D7294 LDR X0, [X21]
	0x039D7298 LDR X8, [X0 + 0xB8]
	0x039D729C LDR X0, [X8]
	0x039D72A0 CBZ X0, 0x39D72C0
	0x039D72A4 MOV W1, W20
	0x039D72A8 MOV W2, W19
	0x039D72AC LDP X20, X19, [X31 + 0x20]
	0x039D72B0 LDP X22, X21, [X31 + 0x10]
	0x039D72B4 MOV W3, W31
	0x039D72B8 LDR X30, [X31], #0x30
	0x039D72BC B 0x39D7748
	0x039D72C0 BL 0x1C16F20
	0x039D72C4 STR X30, [X31 - 0x30]!
	0x039D72C8 STP X22, X21, [X31 + 0x10]
	0x039D72CC STP X20, X19, [X31 + 0x20]
	0x039D72D0 ADRP X22, 0xA0A000
	0x039D72D4 ADRP X21, 0x779000
	0x039D72D8 LDRB W8, [X22 + 0xD46]
	0x039D72DC LDR X21, [X21 + 0x9B0]
	0x039D72E0 MOV W19, W1
	0x039D72E4 MOV W20, W0
	0x039D72E8 TBNZ X8, 0x0, 0x39D7300
	0x039D72EC ADRP X0, 0x779000
	0x039D72F0 LDR X0, [X0 + 0x9B0]
	0x039D72F4 BL 0x1C16CF4
	0x039D72F8 MOVZ W8, 0x1
	0x039D72FC STRB W8, [X22 + 0xD46]
	0x039D7300 LDR X0, [X21]
	0x039D7304 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+192], D10
	003 Move [X31+208], D9
	004 Move [X31+216], D8
	005 Move [X31+224], X29
	006 Move [X31+232], X30
	007 Move [X31+240], X28
	008 Move [X31+248], X27
	009 Move [X31+256], X26
	010 Move [X31+264], X25
	011 Move [X31+272], X24
	012 Move [X31+280], X23
	013 Move [X31+288], X22
	014 Move [X31+296], X21
	015 Move [X31+304], X20
	016 Move [X31+312], X19
	017 Move X20, 0xA0B000
	018 Move X19, 0x77A000
	019 Move W8, [X20+3385]
	020 Move X19, [X19+2480]
	021 Move X26, X5
	022 Move V8, V2
	023 Move W25, W4
	024 Move W23, W3
	025 Move W21, W2
	026 Move W22, W1
	027 Move X24, X0
	028 Move V9, V1
	029 Move V10, V0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {39}
	034 Move X0, 0x77A000
	035 Move X0, [X0+2480]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+3385], W8
	039 Move X0, [X19]
	040 NotImplemented "Instruction MOVI not yet implemented."
	041 Move [X31+176], W31
	042 Move [X31+144], V0
	043 Move [X31+152], V0
	044 Move [X31+8], V0
	045 Move W8, [X0+224]
	046 Move [X31+200], W22
	047 Move [X31+204], W21
	048 Move [X31+124], W23
	049 Move [X31+112], X26
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X19]
	054 Move W9, [X24+12]
	055 Move X8, [X0+184]
	056 Move V0, [X24+16]
	057 Move V1, [X24+32]
	058 Move V2, [X24]
	059 Move [X31+108], W9
	060 Move W9, [X24+48]
	061 Move X26, [X8]
	062 Add X0, X31, 128
	063 Move X1, X31
	064 Move [X31+176], W9
	065 Move [X31+144], V0
	066 Move [X31+152], V1
	067 Move [X31+8], V2
	068 Call RenderTextureDescriptor.get_depthBufferBits, X0
	069 Move W8, [X24+48]
	070 Move V2, [X24+16]
	071 Move V0, [X24+32]
	072 Move V1, [X24]
	073 Move W27, W0
	074 Add X0, X31, 128
	075 Move X1, X31
	076 Move [X31+176], W8
	077 Move [X31+144], V2
	078 Move [X31+152], V0
	079 Move [X31+8], V1
	080 Call RenderTextureDescriptor.get_graphicsFormat, X0
	081 Move V1, [X24]
	082 Move V0, [X24+16]
	083 Move V2, [X24+2]
	084 Move W8, [X24+48]
	085 Move W29, [X24+32]
	086 Move W28, W0
	087 Add X0, X31, 128
	088 Move X1, X31
	089 Move [X31+128], V1
	090 Move [X31+136], V0
	091 Move [X31+10], V2
	092 Move [X31+176], W8
	093 Call RenderTextureDescriptor.get_enableRandomWrite, X0
	094 Move W8, [X24+48]
	095 Move V2, [X24+16]
	096 Move V0, [X24+32]
	097 Move V1, [X24]
	098 Move W19, W0
	099 Add X0, X31, 128
	100 Move X1, X31
	101 Move [X31+176], W8
	102 Move [X31+144], V2
	103 Move [X31+152], V0
	104 Move [X31+8], V1
	105 Call RenderTextureDescriptor.get_useMipMap, X0
	106 Move W8, [X24+48]
	107 Move V2, [X24+16]
	108 Move V0, [X24+32]
	109 Move V1, [X24]
	110 Move W20, W0
	111 Add X0, X31, 128
	112 Move X1, X31
	113 Move [X31+176], W8
	114 Move [X31+144], V2
	115 Move [X31+152], V0
	116 Move [X31+8], V1
	117 Call RenderTextureDescriptor.get_autoGenerateMips, X0
	118 Move V0, [X24]
	119 Move V2, [X24+16]
	120 Move V1, [X24+2]
	121 Move W8, [X24+48]
	122 Move W23, [X24+8]
	123 Move W21, W0
	124 Add X0, X31, 128
	125 Move X1, X31
	126 Move [X31+128], V0
	127 Move [X31+136], V2
	128 Move [X31+10], V1
	129 Move [X31+176], W8
	130 Call RenderTextureDescriptor.get_bindMS, X0
	131 Move W8, [X24+48]
	132 Move V2, [X24+16]
	133 Move V0, [X24+32]
	134 Move V1, [X24]
	135 Move W22, W0
	136 Add X0, X31, 128
	137 Move X1, X31
	138 Move [X31+176], W8
	139 Move [X31+144], V2
	140 Move [X31+152], V0
	141 Move [X31+8], V1
	142 Call RenderTextureDescriptor.get_useDynamicScale, X0
	143 Compare X26, 0
	144 JumpIfEqual {193}
	145 Move X10, [X31+112]
	146 Move W8, [X24+40]
	147 Move W9, [X24+48]
	148 Move W1, [X31+108]
	149 Move [X31+72], X10
	150 Move W10, [X31+124]
	151 Move W4, [X31+200]
	152 Move W5, [X31+204]
	153 Move [X31+64], W8
	154 Move [X31+56], W9
	155 And W8, W0, 1
	156 And W9, W22, 1
	157 And W10, W10, 1
	158 And W11, W21, 1
	159 And W12, W20, 1
	160 And W7, W19, 1
	161 Move V0, V10
	162 Move V1, V9
	163 Move V2, V8
	164 Move X0, X26
	165 Move W2, W27
	166 Move W3, W28
	167 Move W6, W29
	168 Move [X31+32], W23
	169 Move [X31+24], W25
	170 Move [X31+48], W8
	171 Move [X31+40], W9
	172 Move [X31+16], W10
	173 Move [X31+8], W11
	174 Move [X31], W12
	175 Call RTHandleSystem.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, V0, X13, X14, X15, X16, X17, X18
	176 Move X20, [X31+304]
	177 Move X19, [X31+312]
	178 Move X22, [X31+288]
	179 Move X21, [X31+296]
	180 Move X24, [X31+272]
	181 Move X23, [X31+280]
	182 Move X26, [X31+256]
	183 Move X25, [X31+264]
	184 Move X28, [X31+240]
	185 Move X27, [X31+248]
	186 Move X29, [X31+224]
	187 Move X30, [X31+232]
	188 Move D9, [X31+208]
	189 Move D8, [X31+216]
	190 Move V10, [X31+192]
	191 Add X31, X31, 320
	192 Return X0
	193 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.ScaleFunc scaleFunc, System.Int32 slices = 1, UnityEngine.Rendering.DepthBits depthBufferBits = 0, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat = 4, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, UnityEngine.Rendering.TextureDimension dimension = 2, System.Boolean enableRandomWrite = False, System.Boolean useMipMap = False, System.Boolean autoGenerateMips = True, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, UnityEngine.Rendering.MSAASamples msaaSamples = 1, System.Boolean bindTextureMS = False, System.Boolean useDynamicScale = False, UnityEngine.RenderTextureMemoryless memoryless = 0, UnityEngine.VRTextureUsage vrUsage = 0, System.String name = )

Disassembly:
	0x039D7308 CBNZ W8, 0x39D7314
	0x039D730C BL 0x1C16DFC
	0x039D7310 LDR X0, [X21]
	0x039D7314 LDR X8, [X0 + 0xB8]
	0x039D7318 LDR X0, [X8]
	0x039D731C CBZ X0, 0x39D7340
	0x039D7320 STP W20, W19, [X0 + 0x60]
	0x039D7324 MOV W1, W20
	0x039D7328 MOV W2, W19
	0x039D732C LDP X20, X19, [X31 + 0x20]
	0x039D7330 LDP X22, X21, [X31 + 0x10]
	0x039D7334 MOVZ W3, 0x1
	0x039D7338 LDR X30, [X31], #0x30
	0x039D733C B 0x39D7748
	0x039D7340 BL 0x1C16F20
	0x039D7344 STR X30, [X31 - 0x30]!
	0x039D7348 STP X22, X21, [X31 + 0x10]
	0x039D734C STP X20, X19, [X31 + 0x20]
	0x039D7350 ADRP X22, 0xA0A000
	0x039D7354 ADRP X21, 0x779000
	0x039D7358 LDRB W8, [X22 + 0xD47]
	0x039D735C LDR X21, [X21 + 0x9B0]
	0x039D7360 MOV W19, W1
	0x039D7364 MOV W20, W0
	0x039D7368 TBNZ X8, 0x0, 0x39D7380
	0x039D736C ADRP X0, 0x779000
	0x039D7370 LDR X0, [X0 + 0x9B0]
	0x039D7374 BL 0x1C16CF4
	0x039D7378 MOVZ W8, 0x1
	0x039D737C STRB W8, [X22 + 0xD47]
	0x039D7380 LDR X0, [X21]
	0x039D7384 LDR W8, [X0 + 0xE0]
	0x039D7388 CBNZ W8, 0x39D7394
	0x039D738C BL 0x1C16DFC
	0x039D7390 LDR X0, [X21]
	0x039D7394 LDR X8, [X0 + 0xB8]
	0x039D7398 LDR X0, [X8]
	0x039D739C MOV W8, W20
	0x039D73A0 BFM X8, X19, 0x20, 0x1F
	0x039D73A4 STR X8, [X31 + 0x8]
	0x039D73A8 CBZ X0, 0x39D73C4
	0x039D73AC ADD X1, X31, 0x8
	0x039D73B0 BL 0x39D299C
	0x039D73B4 LDP X20, X19, [X31 + 0x20]
	0x039D73B8 LDP X22, X21, [X31 + 0x10]
	0x039D73BC LDR X30, [X31], #0x30
	0x039D73C0 RET
	0x039D73C4 BL 0x1C16F20
	0x039D73C8 STP X30, X21, [X31 - 0x20]!
	0x039D73CC STP X20, X19, [X31 + 0x10]
	0x039D73D0 ADRP X19, 0xA0A000
	0x039D73D4 ADRP X21, 0x77B000
	0x039D73D8 ADRP X20, 0x779000
	0x039D73DC LDRB W8, [X19 + 0xD48]
	0x039D73E0 LDR X21, [X21 + 0xFA8]
	0x039D73E4 LDR X20, [X20 + 0x9B0]
	0x039D73E8 TBNZ X8, 0x0, 0x39D740C
	0x039D73EC ADRP X0, 0x77B000
	0x039D73F0 LDR X0, [X0 + 0xFA8]
	0x039D73F4 BL 0x1C16CF4
	0x039D73F8 ADRP X0, 0x779000
	0x039D73FC LDR X0, [X0 + 0x9B0]
	0x039D7400 BL 0x1C16CF4
	0x039D7404 MOVZ W8, 0x1
	0x039D7408 STRB W8, [X19 + 0xD48]
	0x039D740C LDR X0, [X21]
	0x039D7410 BL 0x1C16F10
	0x039D7414 MOV X19, X0
	0x039D7418 BL 0x39D2E84
	0x039D741C LDR X8, [X20]
	0x039D7420 LDR X8, [X8 + 0xB8]
	0x039D7424 STR X19, [X8]
	0x039D7428 LDP X20, X19, [X31 + 0x10]
	0x039D742C LDP X30, X21, [X31], #0x20
	0x039D7430 RET
	0x039D7434 STP X30, X21, [X31 - 0x20]!
	0x039D7438 STP X20, X19, [X31 + 0x10]
	0x039D743C LDR X8, [X2 + 0x8]
	0x039D7440 STP X1, X2, [X0 + 0x20]
	0x039D7444 MOV X19, X0
	0x039D7448 MOV X20, X1

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D8
	003 Move [X31+104], X30
	004 Move [X31+112], X28
	005 Move [X31+120], X27
	006 Move [X31+128], X26
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X28, 0xA0B000
	015 Move X27, 0x77A000
	016 Move W8, [X28+3386]
	017 Move X27, [X27+2480]
	018 Move V8, V0
	019 Move W26, W7
	020 Move W19, W6
	021 Move W20, W5
	022 Move W21, W4
	023 Move W22, W3
	024 Move W23, W2
	025 Move W24, W1
	026 Move X25, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0x77A000
	032 Move X0, [X0+2480]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X28+3386], W8
	036 Move X0, [X27]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X27]
	042 Move X8, [X0+184]
	043 Move X0, [X8]
	044 Compare X0, 0
	045 JumpIfEqual {96}
	046 Move X8, [X31+264]
	047 Move W9, [X31+256]
	048 Move W10, [X31+248]
	049 Move W11, [X31+240]
	050 Move W12, [X31+232]
	051 Move W13, [X31+224]
	052 Move W15, [X31+208]
	053 Move W16, [X31+200]
	054 Move W17, [X31+192]
	055 Move W14, [X31+216]
	056 Move [X31+80], X8
	057 Move [X31+72], W9
	058 Move [X31+64], W10
	059 And W8, W11, 1
	060 And W9, W12, 1
	061 Move [X31+40], W13
	062 And W10, W15, 1
	063 And W11, W16, 1
	064 And W12, W17, 1
	065 And W13, W26, 1
	066 Move V0, V8
	067 Move X1, X25
	068 Move W2, W24
	069 Move W3, W23
	070 Move W4, W22
	071 Move W5, W21
	072 Move W6, W20
	073 Move W7, W19
	074 Move [X31+32], W14
	075 Move [X31+56], W8
	076 Move [X31+48], W9
	077 Move [X31+24], W10
	078 Move [X31+16], W11
	079 Move [X31+8], W12
	080 Move [X31], W13
	081 Call RTHandleSystem.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, V0, X13, X14, X15, X16, X17, X18
	082 Move X20, [X31+176]
	083 Move X19, [X31+184]
	084 Move X22, [X31+160]
	085 Move X21, [X31+168]
	086 Move X24, [X31+144]
	087 Move X23, [X31+152]
	088 Move X26, [X31+128]
	089 Move X25, [X31+136]
	090 Move X28, [X31+112]
	091 Move X27, [X31+120]
	092 Move X30, [X31+104]
	093 Move V8, [X31+96]
	094 Add X31, X31, 192
	095 Return X0
	096 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.ScaleFunc scaleFunc, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, System.String name = )

Disassembly:
	0x039D7590 RET
	0x039D7594 STR X30, [X31 - 0x40]!
	0x039D7598 STP X24, X23, [X31 + 0x10]
	0x039D759C STP X22, X21, [X31 + 0x20]
	0x039D75A0 STP X20, X19, [X31 + 0x30]
	0x039D75A4 ADRP X21, 0xA0A000
	0x039D75A8 LDRB W8, [X21 + 0xD52]
	0x039D75AC MOV W20, W1
	0x039D75B0 MOV X19, X0
	0x039D75B4 TBNZ X8, 0x0, 0x39D75F0
	0x039D75B8 ADRP X0, 0x77C000
	0x039D75BC LDR X0, [X0 + 0x118]
	0x039D75C0 BL 0x1C16CF4
	0x039D75C4 ADRP X0, 0x77C000
	0x039D75C8 LDR X0, [X0 + 0x128]
	0x039D75CC BL 0x1C16CF4
	0x039D75D0 ADRP X0, 0x77C000
	0x039D75D4 LDR X0, [X0 + 0x120]
	0x039D75D8 BL 0x1C16CF4
	0x039D75DC ADRP X0, 0x77C000
	0x039D75E0 LDR X0, [X0 + 0xF8]
	0x039D75E4 BL 0x1C16CF4
	0x039D75E8 MOVZ W8, 0x1
	0x039D75EC STRB W8, [X21 + 0xD52]
	0x039D75F0 TBZ X20, 0x0, 0x39D772C
	0x039D75F4 LDR X8, [X19 + 0x18]
	0x039D75F8 CBZ X8, 0x39D7740
	0x039D75FC ADRP X21, 0x77C000
	0x039D7600 LDR W1, [X8 + 0x20]
	0x039D7604 LDR X21, [X21 + 0x118]
	0x039D7608 ADD X20, X19, 0x20
	0x039D760C MOV X0, X20
	0x039D7610 LDR X2, [X21]
	0x039D7614 BL 0x2142E6C
	0x039D7618 LDR X0, [X19 + 0x18]
	0x039D761C CBZ X0, 0x39D7740
	0x039D7620 ADRP X22, 0x77C000
	0x039D7624 LDR X1, [X20]
	0x039D7628 LDR X22, [X22 + 0x120]
	0x039D762C LDR X2, [X22]
	0x039D7630 BL 0x2DC057C
	0x039D7634 LDR X8, [X20]
	0x039D7638 CBZ X8, 0x39D7740
	0x039D763C LDR X9, [X8 + 0x18]
	0x039D7640 CMP W9, 0x1
	0x039D7644 B.LT 0x39D7684
	0x039D7648 MOV X23, X31
	0x039D764C AND X24, X9, 0x0
	0x039D7650 LDR W9, [X8 + 0x18]
	0x039D7654 CMP X23, X9
	0x039D7658 B.CS 0x39D7744
	0x039D765C ADD X8, X8, X23, 0x3, LSL
	0x039D7660 LDR X0, [X8 + 0x20]
	0x039D7664 CBZ X0, 0x39D766C
	0x039D7668 BL 0x39D4B1C
	0x039D766C ADD X23, X23, 0x1
	0x039D7670 CMP X24, X23
	0x039D7674 B.EQ 0x39D7684
	0x039D7678 LDR X8, [X20]
	0x039D767C CBNZ X8, 0x39D7650
	0x039D7680 B 0x39D7740
	0x039D7684 LDR X0, [X19 + 0x18]
	0x039D7688 CBZ X0, 0x39D7740
	0x039D768C ADRP X23, 0x77C000
	0x039D7690 LDR X23, [X23 + 0x128]
	0x039D7694 LDR X1, [X23]
	0x039D7698 BL 0x2DBE450
	0x039D769C LDR X8, [X19 + 0x28]
	0x039D76A0 CBZ X8, 0x39D7740
	0x039D76A4 LDR W1, [X8 + 0x20]
	0x039D76A8 LDR X2, [X21]
	0x039D76AC MOV X0, X20
	0x039D76B0 BL 0x2142E6C
	0x039D76B4 LDR X0, [X19 + 0x28]
	0x039D76B8 CBZ X0, 0x39D7740
	0x039D76BC LDR X1, [X20]
	0x039D76C0 LDR X2, [X22]
	0x039D76C4 BL 0x2DC057C
	0x039D76C8 LDR X8, [X20]
	0x039D76CC CBZ X8, 0x39D7740
	0x039D76D0 LDR X9, [X8 + 0x18]
	0x039D76D4 CMP W9, 0x1
	0x039D76D8 B.LT 0x39D7718
	0x039D76DC MOV X21, X31
	0x039D76E0 AND X22, X9, 0x0
	0x039D76E4 LDR W9, [X8 + 0x18]
	0x039D76E8 CMP X21, X9
	0x039D76EC B.CS 0x39D7744
	0x039D76F0 ADD X8, X8, X21, 0x3, LSL
	0x039D76F4 LDR X0, [X8 + 0x20]
	0x039D76F8 CBZ X0, 0x39D7700
	0x039D76FC BL 0x39D4B1C
	0x039D7700 ADD X21, X21, 0x1
	0x039D7704 CMP X22, X21
	0x039D7708 B.EQ 0x39D7718
	0x039D770C LDR X8, [X20]
	0x039D7710 CBNZ X8, 0x39D76E4
	0x039D7714 B 0x39D7740
	0x039D7718 LDR X0, [X19 + 0x28]
	0x039D771C CBZ X0, 0x39D7740
	0x039D7720 LDR X1, [X23]
	0x039D7724 BL 0x2DBE450
	0x039D7728 STR X31, [X20]
	0x039D772C LDP X20, X19, [X31 + 0x30]
	0x039D7730 LDP X22, X21, [X31 + 0x20]
	0x039D7734 LDP X24, X23, [X31 + 0x10]
	0x039D7738 LDR X30, [X31], #0x40
	0x039D773C RET
	0x039D7740 BL 0x1C16F20
	0x039D7744 BL 0x1C16F28
	0x039D7748 STP D9, D8, [X31 - 0x50]!
	0x039D774C STP X30, X25, [X31 + 0x10]
	0x039D7750 STP X24, X23, [X31 + 0x20]
	0x039D7754 STP X22, X21, [X31 + 0x30]
	0x039D7758 STP X20, X19, [X31 + 0x40]
	0x039D775C ADRP X20, 0xA0A000
	0x039D7760 LDRB W8, [X20 + 0xD4D]
	0x039D7764 MOV W23, W3
	0x039D7768 MOV W21, W2
	0x039D776C MOV W22, W1
	0x039D7770 MOV X19, X0
	0x039D7774 TBNZ X8, 0x0, 0x39D778C
	0x039D7778 ADRP X0, 0x77A000
	0x039D777C LDR X0, [X0 + 0x2D8]
	0x039D7780 BL 0x1C16CF4
	0x039D7784 MOVZ W8, 0x1
	0x039D7788 STRB W8, [X20 + 0xD4D]
	0x039D778C MOV X20, X19
	0x039D7790 LDR V0, [X20 + 0x40]!
	0x039D7794 CMP W22, 0x1
	0x039D7798 CSINC W22, W22, W31, GT
	0x039D779C CMP W21, 0x1
	0x039D77A0 LDP W24, W25, [X20 + 0x20]
	0x039D77A4 CSINC W21, W21, W31, GT
	0x039D77A8 STUR V0, [X20 - 0x10]
	0x039D77AC CMP W22, W24
	0x039D77B0 B.GT 0x39D77CC
	0x039D77B4 CMP W21, W25
	0x039D77B8 B.GT 0x39D77CC
	0x039D77BC FMOV W10, S0
	0x039D77C0 MOV W8, W25
	0x039D77C4 MOV W9, W24
	0x039D77C8 TBZ X23, 0x0, 0x39D77E8
	0x039D77CC MOV X0, X19
	0x039D77D0 MOV W1, W22
	0x039D77D4 MOV W2, W21
	0x039D77D8 MOV W3, W31
	0x039D77DC BL 0x39D78D4
	0x039D77E0 LDP W9, W8, [X19 + 0x60]
	0x039D77E4 LDR W10, [X19 + 0x30]
	0x039D77E8 ADRP X23, 0x77A000
	0x039D77EC LDR X23, [X23 + 0x2D8]
	0x039D77F0 MOV W11, W22
	0x039D77F4 MOV W12, W9
	0x039D77F8 BFM X11, X21, 0x20, 0x1F

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+208], D8
	003 Move [X31+224], X29
	004 Move [X31+232], X30
	005 Move [X31+240], X28
	006 Move [X31+248], X27
	007 Move [X31+256], X26
	008 Move [X31+264], X25
	009 Move [X31+272], X24
	010 Move [X31+280], X23
	011 Move [X31+288], X22
	012 Move [X31+296], X21
	013 Move [X31+304], X20
	014 Move [X31+312], X19
	015 Move X20, 0xA0B000
	016 Move X19, 0x77A000
	017 Move W8, [X20+3387]
	018 Move X19, [X19+2480]
	019 Move X27, X6
	020 Move V8, V0
	021 Move W26, W5
	022 Move W24, W4
	023 Move W21, W3
	024 Move W22, W2
	025 Move X25, X1
	026 Move X23, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0x77A000
	032 Move X0, [X0+2480]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+3387], W8
	036 Move X0, [X19]
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Move [X31+192], W31
	039 Move [X31+160], V0
	040 Move [X31+168], V0
	041 Move [X31+9], V0
	042 Move W8, [X0+224]
	043 Move [X31+216], W22
	044 Move [X31+220], W21
	045 Move [X31+136], X23
	046 Move [X31+132], W24
	047 Move [X31+120], X27
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X19]
	052 Move W9, [X25+12]
	053 Move X8, [X0+184]
	054 Move V0, [X25+16]
	055 Move V1, [X25+32]
	056 Move V2, [X25]
	057 Move [X31+116], W9
	058 Move W9, [X25+48]
	059 Move X27, [X8]
	060 Add X0, X31, 144
	061 Move X1, X31
	062 Move [X31+192], W9
	063 Move [X31+160], V0
	064 Move [X31+168], V1
	065 Move [X31+9], V2
	066 Call RenderTextureDescriptor.get_depthBufferBits, X0
	067 Move W8, [X25+48]
	068 Move V2, [X25+16]
	069 Move V0, [X25+32]
	070 Move V1, [X25]
	071 Move W28, W0
	072 Add X0, X31, 144
	073 Move X1, X31
	074 Move [X31+192], W8
	075 Move [X31+160], V2
	076 Move [X31+168], V0
	077 Move [X31+9], V1
	078 Call RenderTextureDescriptor.get_graphicsFormat, X0
	079 Move V1, [X25]
	080 Move V0, [X25+16]
	081 Move V2, [X25+2]
	082 Move W8, [X25+48]
	083 Move W19, [X25+32]
	084 Move W29, W0
	085 Add X0, X31, 144
	086 Move X1, X31
	087 Move [X31+144], V1
	088 Move [X31+152], V0
	089 Move [X31+11], V2
	090 Move [X31+192], W8
	091 Call RenderTextureDescriptor.get_enableRandomWrite, X0
	092 Move W8, [X25+48]
	093 Move V2, [X25+16]
	094 Move V0, [X25+32]
	095 Move V1, [X25]
	096 Move W20, W0
	097 Add X0, X31, 144
	098 Move X1, X31
	099 Move [X31+192], W8
	100 Move [X31+160], V2
	101 Move [X31+168], V0
	102 Move [X31+9], V1
	103 Call RenderTextureDescriptor.get_useMipMap, X0
	104 Move W8, [X25+48]
	105 Move V2, [X25+16]
	106 Move V0, [X25+32]
	107 Move V1, [X25]
	108 Move W21, W0
	109 Add X0, X31, 144
	110 Move X1, X31
	111 Move [X31+192], W8
	112 Move [X31+160], V2
	113 Move [X31+168], V0
	114 Move [X31+9], V1
	115 Call RenderTextureDescriptor.get_autoGenerateMips, X0
	116 Move V0, [X25]
	117 Move V2, [X25+16]
	118 Move V1, [X25+2]
	119 Move W8, [X25+48]
	120 Move W24, [X25+8]
	121 Move W22, W0
	122 Add X0, X31, 144
	123 Move X1, X31
	124 Move [X31+144], V0
	125 Move [X31+152], V2
	126 Move [X31+11], V1
	127 Move [X31+192], W8
	128 Call RenderTextureDescriptor.get_bindMS, X0
	129 Move W8, [X25+48]
	130 Move V2, [X25+16]
	131 Move V0, [X25+32]
	132 Move V1, [X25]
	133 Move W23, W0
	134 Add X0, X31, 144
	135 Move X1, X31
	136 Move [X31+192], W8
	137 Move [X31+160], V2
	138 Move [X31+168], V0
	139 Move [X31+9], V1
	140 Call RenderTextureDescriptor.get_useDynamicScale, X0
	141 Compare X27, 0
	142 JumpIfEqual {189}
	143 Move X10, [X31+120]
	144 Move W8, [X25+40]
	145 Move W9, [X25+48]
	146 Move X1, [X31+136]
	147 Move [X31+80], X10
	148 Move W10, [X31+132]
	149 Move W2, [X31+116]
	150 Move W5, [X31+216]
	151 Move W6, [X31+220]
	152 Move [X31+72], W8
	153 Move [X31+64], W9
	154 And W8, W0, 1
	155 And W9, W23, 1
	156 And W10, W10, 1
	157 And W11, W22, 1
	158 And W12, W21, 1
	159 And W13, W20, 1
	160 Move V0, V8
	161 Move X0, X27
	162 Move W3, W28
	163 Move W4, W29
	164 Move W7, W19
	165 Move [X31+40], W24
	166 Move [X31+32], W26
	167 Move [X31+56], W8
	168 Move [X31+48], W9
	169 Move [X31+24], W10
	170 Move [X31+16], W11
	171 Move [X31+8], W12
	172 Move [X31], W13
	173 Call RTHandleSystem.Alloc, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, V0, X13, X14, X15, X16, X17, X18
	174 Move X20, [X31+304]
	175 Move X19, [X31+312]
	176 Move X22, [X31+288]
	177 Move X21, [X31+296]
	178 Move X24, [X31+272]
	179 Move X23, [X31+280]
	180 Move X26, [X31+256]
	181 Move X25, [X31+264]
	182 Move X28, [X31+240]
	183 Move X27, [X31+248]
	184 Move X29, [X31+224]
	185 Move X30, [X31+232]
	186 Move V8, [X31+208]
	187 Add X31, X31, 320
	188 Return X0
	189 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Texture tex)

Disassembly:
	0x039D77FC BFM X12, X8, 0x20, 0x1F
	0x039D7800 STP X11, X12, [X19 + 0x40]
	0x039D7804 CBNZ W10, 0x39D7814
	0x039D7808 MOV W24, W9
	0x039D780C MOV W25, W8
	0x039D7810 STP X11, X12, [X19 + 0x30]
	0x039D7814 MOV X0, X19
	0x039D7818 MOV X1, X20
	0x039D781C BL 0x39D299C
	0x039D7820 LDR X0, [X23]
	0x039D7824 MOV V9.16B, V0.16B
	0x039D7828 MOV V8.16B, V1.16B
	0x039D782C LDR W8, [X0 + 0xE0]
	0x039D7830 CBNZ W8, 0x39D7838
	0x039D7834 BL 0x1C16DFC
	0x039D7838 ADRP X20, 0xA0A000
	0x039D783C LDRB W8, [X20 + 0xD5D]
	0x039D7840 CBNZ W8, 0x39D7858
	0x039D7844 ADRP X0, 0x77A000
	0x039D7848 LDR X0, [X0 + 0x2D8]
	0x039D784C BL 0x1C16CF4
	0x039D7850 MOVZ W8, 0x1
	0x039D7854 STRB W8, [X20 + 0xD5D]
	0x039D7858 LDR X0, [X23]
	0x039D785C LDR W8, [X0 + 0xE0]
	0x039D7860 CBNZ W8, 0x39D786C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA0B000
	006 Move X20, 0x77A000
	007 Move W8, [X21+3388]
	008 Move X20, [X20+2480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x77A000
	015 Move X0, [X0+2480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3388], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {34}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.RenderTexture tex)

Disassembly:
	0x039D792C LDR X0, [X0 + 0x120]
	0x039D7930 BL 0x1C16CF4
	0x039D7934 ADRP X0, 0x77C000
	0x039D7938 LDR X0, [X0 + 0xF8]
	0x039D793C BL 0x1C16CF4
	0x039D7940 ADRP X0, 0x71C000
	0x039D7944 LDR X0, [X0 + 0x5A8]
	0x039D7948 BL 0x1C16CF4
	0x039D794C MOVZ W8, 0x1
	0x039D7950 STRB W8, [X23 + 0xD53]
	0x039D7954 LDR X0, [X22]
	0x039D7958 LDR W22, [X21 + 0x60]
	0x039D795C LDR W8, [X0 + 0xE0]
	0x039D7960 CBNZ W8, 0x39D7968
	0x039D7964 BL 0x1C16DFC
	0x039D7968 MOV W0, W20
	0x039D796C MOV W1, W22
	0x039D7970 MOV X2, X31
	0x039D7974 BL 0x337EDF0
	0x039D7978 LDR W1, [X21 + 0x64]
	0x039D797C STR W0, [X21 + 0x60]
	0x039D7980 MOV W0, W19
	0x039D7984 MOV X2, X31
	0x039D7988 BL 0x337EDF0
	0x039D798C LDR X8, [X21 + 0x18]
	0x039D7990 STR W0, [X21 + 0x64]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA0B000
	006 Move X20, 0x77A000
	007 Move W8, [X21+3389]
	008 Move X20, [X20+2480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x77A000
	015 Move X0, [X0+2480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3389], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {34}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.RenderTargetIdentifier tex)

Disassembly:
	0x039D5600 MOV X2, X31
	0x039D5604 BL 0x3C1AADC
	0x039D5608 LDR X8, [X25]
	0x039D560C MOV X0, X25
	0x039D5610 MOV W1, W19
	0x039D5614 LDP X9, X2, [X8 + 0x1D8]
	0x039D5618 BLR X9
	0x039D561C LDR W8, [X31 + 0x88]
	0x039D5620 MOV X0, X25
	0x039D5624 MOV X2, X31
	0x039D5628 AND W1, W8, 0x1
	0x039D562C BL 0x3C2070C
	0x039D5630 AND W21, W26, 0x1
	0x039D5634 MOV X0, X25
	0x039D5638 MOV W1, W21
	0x039D563C MOV X2, X31
	0x039D5640 BL 0x3C20260
	0x039D5644 AND W1, W28, 0x1
	0x039D5648 MOV X0, X25
	0x039D564C MOV X2, X31
	0x039D5650 BL 0x3C20584
	0x039D5654 LDR W1, [X31 + 0x28]
	0x039D5658 MOV X0, X25
	0x039D565C MOV X2, X31
	0x039D5660 BL 0x3C1ABDC
	0x039D5664 MOV X0, X25
	0x039D5668 MOV V0.16B, V8.16B
	0x039D566C MOV X1, X31
	0x039D5670 BL 0x3C1AC5C
	0x039D5674 MOV X0, X25
	0x039D5678 MOV W1, W22
	0x039D567C MOV X2, X31
	0x039D5680 BL 0x3C20684
	0x039D5684 AND W1, W20, 0x1
	0x039D5688 MOV X0, X25
	0x039D568C MOV X2, X31
	0x039D5690 BL 0x3C206C8

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move X21, 0xA0D000
	007 Move X20, 0x77C000
	008 Move W8, [X21+3390]
	009 Move X20, [X20+2480]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x77C000
	016 Move X0, [X0+2480]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3390], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move X9, [X19+32]
	028 Move V0, [X19]
	029 Move V1, [X19+16]
	030 Move X0, [X8]
	031 Move [X31+80], X9
	032 Move [X31+48], V0
	033 Move [X31+56], V1
	034 Compare X0, 0
	035 JumpIfEqual {50}
	036 Move V0, [X31+48]
	037 Move V1, [X31+64]
	038 Move X8, [X31+80]
	039 Add X1, X31, 0
	040 Move [X31], V0
	041 Move [X31+8], V1
	042 Move [X31+32], X8
	043 Call RTHandleSystem.Alloc, X0, X1
	044 Move X20, [X31+112]
	045 Move X19, [X31+120]
	046 Move X30, [X31+96]
	047 Move X21, [X31+104]
	048 Add X31, X31, 128
	049 Return X0
	050 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.RenderTargetIdentifier tex, System.String name)

Disassembly:
	0x039D7AD0 MOV X0, X21
	0x039D7AD4 MOV X1, X31
	0x039D7AD8 BL 0x3C20224
	0x039D7ADC LDRB W23, [X22 + 0x50]
	0x039D7AE0 MOV W22, W0
	0x039D7AE4 MOV X0, X21
	0x039D7AE8 MOV X1, X31
	0x039D7AEC BL 0x3C20648
	0x039D7AF0 MOV W29, W0
	0x039D7AF4 MOV X0, X21
	0x039D7AF8 MOV X1, X31
	0x039D7AFC BL 0x3C20750
	0x039D7B00 ADRP X8, 0x744000
	0x039D7B04 LDR X8, [X8 + 0x8F8]
	0x039D7B08 MOV W20, W0
	0x039D7B0C LDR X8, [X8]
	0x039D7B10 LDR W9, [X8 + 0xE0]
	0x039D7B14 CBNZ W9, 0x39D7B20
	0x039D7B18 MOV X0, X8
	0x039D7B1C BL 0x1C16DFC
	0x039D7B20 LDR W0, [X31 + 0x2C]
	0x039D7B24 CMP W23, 0x0
	0x039D7B28 CSET W7, NE
	0x039D7B2C AND W8, W20, 0x1
	0x039D7B30 AND W6, W22, 0x1
	0x039D7B34 MOV W1, W24
	0x039D7B38 MOV W2, W25
	0x039D7B3C MOV W3, W26
	0x039D7B40 MOV W4, W28
	0x039D7B44 MOV X5, X27
	0x039D7B48 STR X31, [X31 + 0x10]
	0x039D7B4C STRB W8, [X31 + 0x8]
	0x039D7B50 STR W29, [X31]
	0x039D7B54 BL 0x39E8760
	0x039D7B58 MOV X1, X0
	0x039D7B5C MOV X0, X21
	0x039D7B60 MOV X2, X31
	0x039D7B64 BL 0x3C38A84
	0x039D7B68 MOV X0, X21
	0x039D7B6C MOV X1, X31
	0x039D7B70 BL 0x3C20A14

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X22, 0xA0B000
	008 Move X21, 0x77A000
	009 Move W8, [X22+3391]
	010 Move X21, [X21+2480]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x77A000
	018 Move X0, [X0+2480]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3391], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X9, [X20+32]
	030 Move V0, [X20]
	031 Move V1, [X20+16]
	032 Move X0, [X8]
	033 Move [X31+80], X9
	034 Move [X31+48], V0
	035 Move [X31+56], V1
	036 Compare X0, 0
	037 JumpIfEqual {54}
	038 Move V0, [X31+48]
	039 Move V1, [X31+64]
	040 Move X8, [X31+80]
	041 Add X1, X31, 0
	042 Move X2, X19
	043 Move [X31], V0
	044 Move [X31+8], V1
	045 Move [X31+32], X8
	046 Call RTHandleSystem.Alloc, X0, X1, X2
	047 Move X20, [X31+128]
	048 Move X19, [X31+136]
	049 Move X22, [X31+112]
	050 Move X21, [X31+120]
	051 Move X30, [X31+96]
	052 Add X31, X31, 144
	053 Return X0
	054 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.RTHandle tex)

Disassembly:
	0x039D7C1C LDRB W8, [X22 + 0xD5E]
	0x039D7C20 MOV X21, X0
	0x039D7C24 CBNZ W8, 0x39D7C3C
	0x039D7C28 ADRP X0, 0x744000
	0x039D7C2C LDR X0, [X0 + 0x630]
	0x039D7C30 BL 0x1C16CF4
	0x039D7C34 MOVZ W8, 0x1
	0x039D7C38 STRB W8, [X22 + 0xD5E]
	0x039D7C3C ADRP X8, 0x744000
	0x039D7C40 LDR X8, [X8 + 0x630]
	0x039D7C44 UBFM X10, X21, 0x20, 0x3F
	0x039D7C48 LDR X8, [X8]
	0x039D7C4C LDR X8, [X8 + 0xB8]
	0x039D7C50 LDP W9, W8, [X8 + 0x8]
	0x039D7C54 CMP W9, W21
	0x039D7C58 CSEL W22, W9, W21, GT
	0x039D7C5C CMP W8, W10
	0x039D7C60 CSEL W21, W8, W10, GT
	0x039D7C64 CBZ X19, 0x39D7E0C
	0x039D7C68 LDR X8, [X19]
	0x039D7C6C MOV X0, X19
	0x039D7C70 LDP X9, X1, [X8 + 0x188]
	0x039D7C74 BLR X9
	0x039D7C78 CMP W0, W22
	0x039D7C7C B.NE 0x39D7CB8
	0x039D7C80 LDR X8, [X19]
	0x039D7C84 MOV X0, X19
	0x039D7C88 LDP X9, X1, [X8 + 0x1A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA0B000
	005 Move X19, 0x71D000
	006 Move W8, [X20+3392]
	007 Move X19, [X19+2600]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x71D000
	013 Move X0, [X0+2600]
	014 Call 0x1C17CF4
	015 Move X0, 0x77D000
	016 Move X0, [X0+208]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3392], W8
	020 Move X0, [X19]
	021 Move X19, 0x77D000
	022 Move W8, [X0+224]
	023 Move X19, [X19+208]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, [X19]
	028 Move X1, X31
	029 Call Debug.LogError, X0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X0, X31
	033 Move X30, [X31+32]
	034 Return X0

Method: System.Void Initialize(System.Int32 width, System.Int32 height)

Disassembly:
	0x039D7C8C BLR X9
	0x039D7C90 CMP W0, W21
	0x039D7C94 B.NE 0x39D7CB8
	0x039D7C98 LDP X20, X19, [X31 + 0x70]
	0x039D7C9C LDP X22, X21, [X31 + 0x60]
	0x039D7CA0 LDP X24, X23, [X31 + 0x50]
	0x039D7CA4 LDP X26, X25, [X31 + 0x40]
	0x039D7CA8 LDP X28, X27, [X31 + 0x30]
	0x039D7CAC LDP X29, X30, [X31 + 0x20]
	0x039D7CB0 ADD X31, X31, 0x80
	0x039D7CB4 RET
	0x039D7CB8 ADRP X28, 0x744000
	0x039D7CBC LDR X28, [X28 + 0x8F8]
	0x039D7CC0 MOV X0, X19
	0x039D7CC4 MOV X1, X31
	0x039D7CC8 BL 0x3C20A50
	0x039D7CCC LDR X8, [X19]
	0x039D7CD0 MOV X0, X19
	0x039D7CD4 MOV W1, W22
	0x039D7CD8 LDP X9, X2, [X8 + 0x198]
	0x039D7CDC BLR X9
	0x039D7CE0 LDR X8, [X19]
	0x039D7CE4 MOV X0, X19
	0x039D7CE8 MOV W1, W21
	0x039D7CEC LDP X9, X2, [X8 + 0x1B8]
	0x039D7CF0 BLR X9
	0x039D7CF4 LDR X8, [X19]
	0x039D7CF8 MOV X0, X19
	0x039D7CFC LDP X9, X1, [X8 + 0x188]
	0x039D7D00 BLR X9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA0B000
	007 Move X21, 0x77A000
	008 Move W8, [X22+3393]
	009 Move X21, [X21+2480]
	010 Move W19, W1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x77A000
	017 Move X0, [X0+2480]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3393], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Compare X0, 0
	030 JumpIfEqual {38}
	031 Move W1, W20
	032 Move W2, W19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Call 0x1C17F20

Method: System.Void Initialize(System.Int32 width, System.Int32 height, System.Boolean useLegacyDynamicResControl = False)

Disassembly:
	0x039D7FB0 CBZ X26, 0x39D8344
	0x039D7FB4 MOVZ W1, 0x3D
	0x039D7FB8 MOV X0, X26
	0x039D7FBC MOV X2, X31
	0x039D7FC0 BL 0x3C396EC
	0x039D7FC4 MOV X0, X26
	0x039D7FC8 MOV W1, W27
	0x039D7FCC MOV X2, X31
	0x039D7FD0 MOV W28, W27
	0x039D7FD4 BL 0x3C20604
	0x039D7FD8 LDR W1, [X31 + 0x2C]
	0x039D7FDC MOV X0, X26
	0x039D7FE0 MOV X2, X31
	0x039D7FE4 BL 0x3C1AB5C
	0x039D7FE8 LDR W1, [X31 + 0x30]
	0x039D7FEC MOV X0, X26
	0x039D7FF0 MOV X2, X31
	0x039D7FF4 BL 0x3C1AA10
	0x039D7FF8 LDR X8, [X26]
	0x039D7FFC LDR W1, [X31 + 0x4C]
	0x039D8000 MOV X0, X26
	0x039D8004 LDP X9, X2, [X8 + 0x1D8]
	0x039D8008 BLR X9
	0x039D800C AND W1, W23, 0x1
	0x039D8010 MOV X0, X26
	0x039D8014 MOV X2, X31
	0x039D8018 BL 0x3C2070C
	0x039D801C AND W1, W29, 0x1
	0x039D8020 MOV X0, X26
	0x039D8024 MOV X2, X31
	0x039D8028 BL 0x3C20260
	0x039D802C AND W1, W25, 0x1
	0x039D8030 MOV X0, X26
	0x039D8034 MOV X2, X31
	0x039D8038 BL 0x3C20584
	0x039D803C LDR W1, [X31 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xA0B000
	008 Move X22, 0x77A000
	009 Move W8, [X23+3394]
	010 Move X22, [X22+2480]
	011 Move W19, W2
	012 Move W20, W1
	013 Move W21, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x77A000
	019 Move X0, [X0+2480]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3394], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X22]
	029 Move X8, [X0+184]
	030 Move X22, [X8]
	031 Compare X22, 0
	032 JumpIfEqual {50}
	033 Move X0, X22
	034 Move W1, W21
	035 Move W2, W20
	036 Call RTHandleSystem.Initialize, X0, X1, X2
	037 Move TEMP, X19
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {43}
	041 Move W8, 1
	042 Move [X22+16], W8
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Return 
	050 Call 0x1C17F20

Method: System.Void Release(UnityEngine.Rendering.RTHandle rth)

Disassembly:
	0x039CC45C LDP D13, D12, [X31], #0x50
	0x039CC460 RET
	0x039CC464 STR X30, [X31 - 0x30]!
	0x039CC468 STP X22, X21, [X31 + 0x10]
	0x039CC46C STP X20, X19, [X31 + 0x20]
	0x039CC470 ADRP X22, 0xA15000
	0x039CC474 LDRB W8, [X22 + 0xD03]
	0x039CC478 MOV X21, X2
	0x039CC47C MOV X19, X1
	0x039CC480 MOV X20, X0
	0x039CC484 TBNZ X8, 0x0, 0x39CC49C
	0x039CC488 ADRP X0, 0x727000
	0x039CC48C LDR X0, [X0 + 0x598]
	0x039CC490 BL 0x1C16CF4
	0x039CC494 MOVZ W8, 0x1
	0x039CC498 STRB W8, [X22 + 0xD03]
	0x039CC49C CBZ X19, 0x39CC584
	0x039CC4A0 MOV X0, X19
	0x039CC4A4 MOV X1, X31
	0x039CC4A8 BL 0x3C323D4
	0x039CC4AC TBZ X0, 0x0, 0x39CC570
	0x039CC4B0 MOV X0, X19
	0x039CC4B4 MOV X1, X31
	0x039CC4B8 BL 0x3C32ECC
	0x039CC4BC CBZ X0, 0x39CC584
	0x039CC4C0 MOV X1, X31
	0x039CC4C4 BL 0x3C357F8
	0x039CC4C8 TBZ X0, 0x0, 0x39CC570
	0x039CC4CC MOV X0, X19
	0x039CC4D0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA16000
	006 Move X20, 0x785000
	007 Move W8, [X21+3395]
	008 Move X20, [X20+2480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x785000
	015 Move X0, [X0+2480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3395], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8]
	027 Compare X8, 0
	028 JumpIfEqual {43}
	029 Compare X19, 0
	030 JumpIfEqual {38}
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call RTHandle.Release, X0
	037 Return 
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 
	043 Call 0x1C17F20

Method: System.Void SetHardwareDynamicResolutionState(System.Boolean hwDynamicResRequested)

Disassembly:
	0x039D806C AND W1, W19, 0x1
	0x039D8070 MOV X0, X26
	0x039D8074 MOV X2, X31
	0x039D8078 BL 0x3C206C8
	0x039D807C LDR X25, [X31 + 0x40]
	0x039D8080 MOV X0, X26
	0x039D8084 MOV X2, X31
	0x039D8088 LDRB W8, [X25 + 0x10]
	0x039D808C AND W8, W21, W8, 0x0
	0x039D8090 AND W1, W8, 0x1
	0x039D8094 BL 0x3C2078C
	0x039D8098 LDR W1, [X31 + 0x34]
	0x039D809C MOV X0, X26
	0x039D80A0 MOV X2, X31
	0x039D80A4 BL 0x3C20324
	0x039D80A8 B 0x39D820C
	0x039D80AC ANDS W8, W8, 0x1
	0x039D80B0 MOVZ W9, 0x3
	0x039D80B4 CSINC W22, W9, W31, NE
	0x039D80B8 CBZ W8, 0x39D80C4
	0x039D80BC MOV W20, W31
	0x039D80C0 B 0x39D80E0
	0x039D80C4 MOVZ W0, 0xD
	0x039D80C8 MOVZ W1, 0x10
	0x039D80CC MOV X2, X31
	0x039D80D0 MOVZ W20, 0xD

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA0A000
	006 Move X20, 0x779000
	007 Move W8, [X21+3396]
	008 Move X20, [X20+2480]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x779000
	015 Move X0, [X0+2480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3396], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {34}
	029 And W1, W19, 1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call 0x1C17F20

Method: System.Void SetReferenceSize(System.Int32 width, System.Int32 height)

Disassembly:
	0x039D8248 LDR W3, [X31 + 0x3C]
	0x039D824C LDR W4, [X31 + 0x4C]
	0x039D8250 CMP W24, 0x1
	0x039D8254 CSET W7, NE
	0x039D8258 AND W8, W21, 0x1
	0x039D825C AND W6, W29, 0x1
	0x039D8260 MOV W2, W28
	0x039D8264 MOV X5, X20
	0x039D8268 AND W19, W21, 0x1
	0x039D826C STR X31, [X31 + 0x10]
	0x039D8270 STRB W8, [X31 + 0x8]
	0x039D8274 STR W24, [X31]
	0x039D8278 BL 0x39E8760
	0x039D827C MOV X1, X0
	0x039D8280 MOV X0, X26
	0x039D8284 MOV X2, X31
	0x039D8288 BL 0x3C38A84
	0x039D828C MOV X0, X26
	0x039D8290 MOV X1, X31
	0x039D8294 BL 0x3C20A14
	0x039D8298 LDR X0, [X22]
	0x039D829C BL 0x1C16F10
	0x039D82A0 MOV X1, X31
	0x039D82A4 MOV X21, X0
	0x039D82A8 BL 0x33BDD8C
	0x039D82AC MOVI V0.2D, 0x0
	0x039D82B0 ADD X0, X31, 0x50
	0x039D82B4 MOV X1, X26
	0x039D82B8 MOV X2, X31
	0x039D82BC STP X25, X26, [X21 + 0x10]
	0x039D82C0 STR X31, [X21 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA0A000
	007 Move X21, 0x779000
	008 Move W8, [X22+3397]
	009 Move X21, [X21+2480]
	010 Move W19, W1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x779000
	017 Move X0, [X0+2480]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3397], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Compare X0, 0
	030 JumpIfEqual {41}
	031 Move W1, W20
	032 Move W2, W19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W3, W31
	038 Move X30, [X31+48]
	039 Call RTHandleSystem.SetReferenceSize, X0, X1, X2, X3
	040 Return 
	041 Call 0x1C17F20

Method: System.Void ResetReferenceSize(System.Int32 width, System.Int32 height)

Disassembly:
	0x039D82C4 STR X31, [X31 + 0x70]
	0x039D82C8 STP V0, V0, [X31 + 0x50]
	0x039D82CC BL 0x3C4B0C4
	0x039D82D0 LDP V0, V1, [X31 + 0x50]
	0x039D82D4 LDR X8, [X31 + 0x70]
	0x039D82D8 AND W9, W23, 0x1
	0x039D82DC MOVZ W10, 0x1
	0x039D82E0 STRB W27, [X21 + 0x50]
	0x039D82E4 STRB W19, [X21 + 0x52]
	0x039D82E8 STRB W9, [X21 + 0x51]
	0x039D82EC STRB W10, [X21 + 0xA8]
	0x039D82F0 STR X8, [X21 + 0x48]
	0x039D82F4 STUR V1, [X21 + 0x38]
	0x039D82F8 STUR V0, [X21 + 0x28]
	0x039D82FC STR X20, [X21 + 0x58]
	0x039D8300 LDR X0, [X25 + 0x18]
	0x039D8304 CBZ X0, 0x39D8344
	0x039D8308 ADRP X8, 0x77A000
	0x039D830C LDR X8, [X8 + 0xF40]
	0x039D8310 MOV X1, X21
	0x039D8314 LDR X2, [X8]
	0x039D8318 BL 0x2DBEF30
	0x039D831C MOV X0, X21
	0x039D8320 LDP X20, X19, [X31 + 0xE0]
	0x039D8324 LDP X22, X21, [X31 + 0xD0]
	0x039D8328 LDP X24, X23, [X31 + 0xC0]
	0x039D832C LDP X26, X25, [X31 + 0xB0]
	0x039D8330 LDP X28, X27, [X31 + 0xA0]
	0x039D8334 LDP X29, X30, [X31 + 0x90]
	0x039D8338 LDR V8, [X31 + 0x80]
	0x039D833C ADD X31, X31, 0xF0
	0x039D8340 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA0A000
	007 Move X21, 0x779000
	008 Move W8, [X22+3398]
	009 Move X21, [X21+2480]
	010 Move W19, W1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x779000
	017 Move X0, [X0+2480]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3398], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Compare X0, 0
	030 JumpIfEqual {43}
	031 Move [X0+96], W20
	032 Move [X0+100], W19
	033 Move W1, W20
	034 Move W2, W19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move W3, 1
	040 Move X30, [X31+48]
	041 Call RTHandleSystem.SetReferenceSize, X0, X1, X2, X3
	042 Return 
	043 Call 0x1C17F20

Method: UnityEngine.Vector2 CalculateRatioAgainstMaxSize(System.Int32 width, System.Int32 height)

Disassembly:
	0x039D8344 BL 0x1C16F20
	0x039D8348 STR X30, [X31 - 0x20]!
	0x039D834C STP X20, X19, [X31 + 0x10]
	0x039D8350 ADRP X20, 0xA09000
	0x039D8354 ADRP X19, 0x71B000
	0x039D8358 LDRB W8, [X20 + 0xD5A]
	0x039D835C LDR X19, [X19 + 0xA28]
	0x039D8360 TBNZ X8, 0x0, 0x39D8384
	0x039D8364 ADRP X0, 0x71B000
	0x039D8368 LDR X0, [X0 + 0xA28]
	0x039D836C BL 0x1C16CF4
	0x039D8370 ADRP X0, 0x77B000
	0x039D8374 LDR X0, [X0 + 0xD0]
	0x039D8378 BL 0x1C16CF4
	0x039D837C MOVZ W8, 0x1
	0x039D8380 STRB W8, [X20 + 0xD5A]
	0x039D8384 LDR X0, [X19]
	0x039D8388 ADRP X19, 0x77B000
	0x039D838C LDR W8, [X0 + 0xE0]
	0x039D8390 LDR X19, [X19 + 0xD0]
	0x039D8394 CBNZ W8, 0x39D839C
	0x039D8398 BL 0x1C16DFC
	0x039D839C LDR X0, [X19]
	0x039D83A0 MOV X1, X31
	0x039D83A4 BL 0x3C0649C
	0x039D83A8 LDP X20, X19, [X31 + 0x10]
	0x039D83AC MOV X0, X31
	0x039D83B0 LDR X30, [X31], #0x20
	0x039D83B4 RET
	0x039D83B8 SUB X31, X31, 0x70
	0x039D83BC STR X30, [X31 + 0x10]
	0x039D83C0 STP X28, X27, [X31 + 0x20]
	0x039D83C4 STP X26, X25, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA0A000
	007 Move X21, 0x779000
	008 Move W8, [X22+3399]
	009 Move X21, [X21+2480]
	010 Move W19, W1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x779000
	017 Move X0, [X0+2480]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3399], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move W8, W20
	030 NotImplemented "Instruction BFM not yet implemented."
	031 Move [X31+8], X8
	032 Compare X0, 0
	033 JumpIfEqual {42}
	034 Add X1, X31, 8
	035 Call RTHandleSystem.CalculateRatioAgainstMaxSize, X0, X1
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return X0
	042 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x039D83C8 STP X24, X23, [X31 + 0x40]
	0x039D83CC STP X22, X21, [X31 + 0x50]
	0x039D83D0 STP X20, X19, [X31 + 0x60]
	0x039D83D4 ADRP X19, 0xA09000
	0x039D83D8 LDRB W8, [X19 + 0xD5B]
	0x039D83DC MOV X20, X0
	0x039D83E0 TBNZ X8, 0x0, 0x39D844C
	0x039D83E4 ADRP X0, 0x77B000
	0x039D83E8 LDR X0, [X0 + 0x118]
	0x039D83EC BL 0x1C16CF4
	0x039D83F0 ADRP X0, 0x77B000
	0x039D83F4 LDR X0, [X0 + 0x120]
	0x039D83F8 BL 0x1C16CF4
	0x039D83FC ADRP X0, 0x77B000
	0x039D8400 LDR X0, [X0 + 0xF8]
	0x039D8404 BL 0x1C16CF4
	0x039D8408 ADRP X0, 0x71B000
	0x039D840C LDR X0, [X0 + 0x758]
	0x039D8410 BL 0x1C16CF4
	0x039D8414 ADRP X0, 0x71B000
	0x039D8418 LDR X0, [X0 + 0x9D0]
	0x039D841C BL 0x1C16CF4
	0x039D8420 ADRP X0, 0x77B000
	0x039D8424 LDR X0, [X0 + 0x138]
	0x039D8428 BL 0x1C16CF4
	0x039D842C ADRP X0, 0x77B000
	0x039D8430 LDR X0, [X0 + 0x140]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xA0A000
	006 Move X21, 0x77B000
	007 Move X20, 0x779000
	008 Move W8, [X19+3400]
	009 Move X21, [X21+4008]
	010 Move X20, [X20+2480]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x77B000
	016 Move X0, [X0+4008]
	017 Call 0x1C17CF4
	018 Move X0, 0x779000
	019 Move X0, [X0+2480]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3400], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Call RTHandleSystem..ctor, X0
	027 Move X8, [X20]
	028 Move X8, [X8+184]
	029 Move [X8], X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

