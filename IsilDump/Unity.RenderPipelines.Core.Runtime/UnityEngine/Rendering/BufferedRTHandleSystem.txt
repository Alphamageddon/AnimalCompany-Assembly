Type: UnityEngine.Rendering.BufferedRTHandleSystem

Method: System.Int32 get_maxWidth()

Disassembly:
	0x039D3104 LDP X22, X21, [X31 + 0x10]
	0x039D3108 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x039D3118 FADD V2.2S, V3.2S, V1.2S
	0x039D311C MOV S1, V0.S[1]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+96]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_maxHeight()

Disassembly:
	0x039D3120 MOV S3, V2.S[1]
	0x039D3124 LDR V8, [X31], #0x30
	0x039D3128 RET
	0x039D312C STR X30, [X31 - 0x20]!
	0x039D3130 STP X20, X19, [X31 + 0x10]
	0x039D3134 CBZ X1, 0x39D3194
	0x039D3138 LDR X8, [X1]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+100]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandleProperties get_rtHandleProperties()

Disassembly:
	0x039D313C MOV X19, X1
	0x039D3140 MOV X0, X19
	0x039D3144 LDP X9, X1, [X8 + 0x188]
	0x039D3148 BLR X9
	0x039D314C LDR X8, [X19]
	0x039D3150 MOV W20, W0
	0x039D3154 MOV X0, X19
	0x039D3158 LDP X9, X1, [X8 + 0x1A8]
	0x039D315C BLR X9
	0x039D3160 MOV W19, W0

ISIL:
	001 Move [X31-16], X30
	002 Move X9, [X0+24]
	003 Compare X9, 0
	004 JumpIfEqual {13}
	005 Move V1, [X9+64]
	006 Move V0, [X9+80]
	007 Move V2, [X9+3]
	008 Move [X8+16], V1
	009 Move [X8+24], V0
	010 Move [X8], V2
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle GetFrameRT(System.Int32 bufferId, System.Int32 frameIndex)

Disassembly:
	0x039D3164 MOV W0, W20
	0x039D3168 MOV X1, X31
	0x039D316C BL 0x3C2B340
	0x039D3170 MOV W20, W0
	0x039D3174 MOV W0, W19
	0x039D3178 MOV X1, X31
	0x039D317C BL 0x3C2B340
	0x039D3180 SCVTF S0, W20
	0x039D3184 LDP X20, X19, [X31 + 0x10]
	0x039D3188 SCVTF S1, W0
	0x039D318C LDR X30, [X31], #0x20
	0x039D3190 RET
	0x039D3194 BL 0x1C16F20
	0x039D3198 LDR V0, [X0]
	0x039D319C LDR V1, [X1]
	0x039D31A0 LDP D2, D3, [X2]
	0x039D31A4 MOVI V4.2S, 0x3F, 0x18
	0x039D31A8 FADD V5.2S, V0.2S, V1.2S
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x039D31C0 FADD V2.2S, V3.2S, V1.2S
	0x039D31C4 MOV S1, V0.S[1]
	0x039D31C8 MOV S3, V2.S[1]
	0x039D31CC RET
	0x039D31D0 SUB X31, X31, 0x150
	0x039D31D4 STP D15, D14, [X31 + 0xB0]
	0x039D31D8 STP D13, D12, [X31 + 0xC0]
	0x039D31DC STP D11, D10, [X31 + 0xD0]
	0x039D31E0 STP D9, D8, [X31 + 0xE0]
	0x039D31E4 STP X29, X30, [X31 + 0xF0]
	0x039D31E8 STP X28, X27, [X31 + 0x100]
	0x039D31EC STP X26, X25, [X31 + 0x110]
	0x039D31F0 STP X24, X23, [X31 + 0x120]
	0x039D31F4 STP X22, X21, [X31 + 0x130]
	0x039D31F8 STP X20, X19, [X31 + 0x140]
	0x039D31FC ADRP X23, 0xA0E000
	0x039D3200 LDRB W8, [X23 + 0xD25]
	0x039D3204 MOV W19, W4
	0x039D3208 MOV W25, W3
	0x039D320C MOV V10.16B, V5.16B
	0x039D3210 MOV V11.16B, V4.16B
	0x039D3214 MOV X20, X2
	0x039D3218 MOV V12.16B, V3.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA0F000
	007 Move W8, [X22+3357]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x780000
	016 Move X0, [X0+3872]
	017 Call 0x1C17CF4
	018 Move X0, 0x780000
	019 Move X0, [X0+3880]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3357], W8
	023 Move X0, [X21+16]
	024 Compare X0, 0
	025 JumpIfEqual {56}
	026 Move X8, 0x780000
	027 Move X8, [X8+3872]
	028 Move W1, W20
	029 Move X2, [X8]
	030 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {49}
	035 Move X0, [X21+16]
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move X8, 0x780000
	039 Move X8, [X8+3880]
	040 Move W1, W20
	041 Move X2, [X8]
	042 Call Dictionary`2<Int32, Object>.get_Item, X0, X1
	043 Compare X0, 0
	044 JumpIfEqual {56}
	045 Move W8, [X0+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X8, X0, W19
	048 Move X0, [X8+32]
	049 Move X0, X31
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Return X0
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: System.Void AllocBuffer(System.Int32 bufferId, System.Func`3<UnityEngine.Rendering.RTHandleSystem, System.Int32, UnityEngine.Rendering.RTHandle> allocator, System.Int32 bufferCount)

Disassembly:
	0x039D321C MOV V13.16B, V2.16B
	0x039D3220 MOV V14.16B, V1.16B
	0x039D3224 MOV V15.16B, V0.16B
	0x039D3228 MOV X21, X1
	0x039D322C MOV X22, X0
	0x039D3230 STP S6, S7, [X31 + 0x18]
	0x039D3234 TBNZ X8, 0x0, 0x39D3258
	0x039D3238 ADRP X0, 0x77F000
	0x039D323C LDR X0, [X0 + 0xE28]
	0x039D3240 BL 0x1C16CF4
	0x039D3244 ADRP X0, 0x77F000
	0x039D3248 LDR X0, [X0 + 0x9A8]
	0x039D324C BL 0x1C16CF4
	0x039D3250 MOVZ W8, 0x1
	0x039D3254 STRB W8, [X23 + 0xD25]
	0x039D3258 STRB W31, [X31 + 0xA8]
	0x039D325C CBZ X20, 0x39D353C
	0x039D3260 LDR X8, [X20]
	0x039D3264 ADRP X27, 0x77F000
	0x039D3268 MOV X0, X20
	0x039D326C LDP X9, X1, [X8 + 0x188]
	0x039D3270 LDR X27, [X27 + 0x9A8]
	0x039D3274 BLR X9
	0x039D3278 LDR X8, [X20]
	0x039D327C MOV W23, W0
	0x039D3280 MOV X0, X20
	0x039D3284 LDP X9, X1, [X8 + 0x1A8]
	0x039D3288 BLR X9
	0x039D328C MOV W2, W0
	0x039D3290 MOV X0, X22
	0x039D3294 MOV W1, W23
	0x039D3298 MOV X3, X31
	0x039D329C BL 0x39D8F78
	0x039D32A0 LDR W8, [X22 + 0x48]
	0x039D32A4 MOV W26, W0
	0x039D32A8 FMOV S0, 1
	0x039D32AC MOV W0, W8
	0x039D32B0 BL 0x3EB1B60
	0x039D32B4 MOVZ W9, 0x7F800000
	0x039D32B8 FCVTZS W8, S0
	0x039D32BC FMOV S1, W9
	0x039D32C0 UBFM W8, W8, 0x1F, 0x1E
	0x039D32C4 FCMP S0, S1
	0x039D32C8 MOV X0, X22
	0x039D32CC MOV X1, X20
	0x039D32D0 CSEL W23, W31, W8, EQ
	0x039D32D4 BL 0x39D312C
	0x039D32D8 MOV X0, X20
	0x039D32DC MOV X1, X31
	0x039D32E0 MOV V8.16B, V0.16B
	0x039D32E4 MOV V9.16B, V1.16B
	0x039D32E8 BL 0x3C1AB20
	0x039D32EC LDR X1, [X27]
	0x039D32F0 MOV W24, W0
	0x039D32F4 ANDS W31, W25, 0x1
	0x039D32F8 MOV W0, W31
	0x039D32FC CSINC W26, W26, W31, NE
	0x039D3300 BL 0x2235BC0
	0x039D3304 MOV X2, X0
	0x039D3308 ADD X0, X31, 0xA8
	0x039D330C MOV X1, X21
	0x039D3310 MOV X3, X31
	0x039D3314 BL 0x39B1DB0
	0x039D3318 CMP W26, 0x1
	0x039D331C B.LT 0x39D34FC
	0x039D3320 ADRP X27, 0x77F000
	0x039D3324 LDR X27, [X27 + 0xE28]
	0x039D3328 ADRP X29, 0xFFFFFFFFFD1C4000
	0x039D332C MOV W25, W31
	0x039D3330 MOV W28, W19
	0x039D3334 ADD X29, X29, 0xABC
	0x039D3338 LDR X8, [X22 + 0x10]
	0x039D333C CBZ X8, 0x39D3358
	0x039D3340 LDR X9, [X8 + 0x48]
	0x039D3344 LDUR V0, [X8 + 0x38]
	0x039D3348 LDUR V1, [X8 + 0x28]
	0x039D334C STR X9, [X31 + 0x70]
	0x039D3350 STP V1, V0, [X31 + 0x50]
	0x039D3354 B 0x39D3364
	0x039D3358 MOVI V0.2D, 0x0
	0x039D335C STR X31, [X31 + 0x70]
	0x039D3360 STP V0, V0, [X31 + 0x50]
	0x039D3364 LDP V0, V1, [X31 + 0x50]
	0x039D3368 LDR X8, [X31 + 0x70]
	0x039D336C STP V0, V1, [X31 + 0x80]
	0x039D3370 STR X8, [X31 + 0xA0]
	0x039D3374 CBZ X21, 0x39D3538
	0x039D3378 LDP V0, V1, [X31 + 0x80]
	0x039D337C LDR X8, [X31 + 0xA0]
	0x039D3380 STP V0, V1, [X31 + 0x20]
	0x039D3384 STR X8, [X31 + 0x40]
	0x039D3388 ADD X1, X31, 0x20
	0x039D338C MOV X0, X21
	0x039D3390 MOV W2, W25
	0x039D3394 MOV X3, X31
	0x039D3398 BL 0x3C4DCC4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0xA0F000
	011 Move X24, 0x780000
	012 Move W8, [X23+3358]
	013 Move X24, [X24+3888]
	014 Move W21, W3
	015 Move X19, X2
	016 Move W22, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x780000
	023 Move X0, [X0+3896]
	024 Call 0x1C17CF4
	025 Move X0, 0x780000
	026 Move X0, [X0+3888]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X23+3358], W8
	030 Move X0, [X24]
	031 Move W1, W21
	032 Call 0x1C17D6C
	033 Move X8, [X20+16]
	034 Compare X8, 0
	035 JumpIfEqual {109}
	036 Move X9, 0x780000
	037 Move X9, [X9+3896]
	038 Move X21, X0
	039 Move X0, X8
	040 Move W1, W22
	041 Move X3, [X9]
	042 Move X2, X21
	043 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	044 Compare X19, 0
	045 JumpIfEqual {109}
	046 Move X1, [X20+24]
	047 Move X8, [X19+24]
	048 Move X0, [X19+64]
	049 Move X3, [X19+40]
	050 Move W2, W31
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Compare X21, 0
	053 JumpIfEqual {109}
	054 Move X22, X0
	055 Compare X0, 0
	056 JumpIfEqual {63}
	057 Move X8, [X21]
	058 Move X0, X22
	059 Move X1, [X8+64]
	060 Call 0x1C17E00
	061 Compare X0, 0
	062 JumpIfEqual {111}
	063 Move X8, [X21+24]
	064 Compare W8, 0
	065 JumpIfEqual {110}
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X21+32], X22
	068 And X8, X8, 0
	069 Move X24, X31
	070 Add X25, X21, 40
	071 Subtract X26, X8, 1
	072 Move X1, [X20+24]
	073 Move X8, [X19+24]
	074 Move X0, [X19+64]
	075 Move X3, [X19+40]
	076 Add X23, X24, 1
	077 Move W2, W23
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X22, X0
	080 Compare X0, 0
	081 JumpIfEqual {88}
	082 Move X8, [X21]
	083 Move X0, X22
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {111}
	088 Move W8, [X21+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X25], X22
	091 Move X0, [X20+24]
	092 Compare X0, 0
	093 JumpIfEqual {109}
	094 Move W2, 1
	095 Move X1, X22
	096 Call RTHandleSystem.SwitchResizeMode, X0, X1, X2
	097 Add X24, X24, 1
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X20, [X31+64]
	100 Move X19, [X31+72]
	101 Move X22, [X31+48]
	102 Move X21, [X31+56]
	103 Move X24, [X31+32]
	104 Move X23, [X31+40]
	105 Move X26, [X31+16]
	106 Move X25, [X31+24]
	107 Move X30, [X31+80]
	108 Return 
	109 Call 0x1C17F20
	110 Call 0x1C17F28
	111 Call 0x1C17F44
	112 Move X1, X31
	113 Call 0x1C17DEC

Method: System.Void ReleaseBuffer(System.Int32 bufferId)

Disassembly:
	0x039D34B0 BL 0x1C16DFC
	0x039D34B4 CMP W24, 0x0
	0x039D34B8 CSET W3, NE
	0x039D34BC LDP S4, S5, [X31 + 0x18]
	0x039D34C0 MOV X0, X21
	0x039D34C4 MOV X1, X20
	0x039D34C8 MOV V0.16B, V8.16B
	0x039D34CC MOV V1.16B, V9.16B
	0x039D34D0 MOV V2.16B, V11.16B
	0x039D34D4 MOV V3.16B, V10.16B
	0x039D34D8 MOV W2, W25
	0x039D34DC MOV W4, W23
	0x039D34E0 MOV X5, X31
	0x039D34E4 STP S15, S14, [X31]
	0x039D34E8 STP S13, S12, [X31 + 0x8]
	0x039D34EC BL 0x39E38C4
	0x039D34F0 ADD W25, W25, 0x1
	0x039D34F4 CMP W26, W25
	0x039D34F8 B.NE 0x39D3338
	0x039D34FC ADD X0, X31, 0xA8
	0x039D3500 MOV X1, X31
	0x039D3504 BL 0x39B1DB4
	0x039D3508 LDP X20, X19, [X31 + 0x140]
	0x039D350C LDP X22, X21, [X31 + 0x130]
	0x039D3510 LDP X24, X23, [X31 + 0x120]
	0x039D3514 LDP X26, X25, [X31 + 0x110]
	0x039D3518 LDP X28, X27, [X31 + 0x100]
	0x039D351C LDP X29, X30, [X31 + 0xF0]
	0x039D3520 LDP D9, D8, [X31 + 0xE0]
	0x039D3524 LDP D11, D10, [X31 + 0xD0]
	0x039D3528 LDP D13, D12, [X31 + 0xC0]
	0x039D352C LDP D15, D14, [X31 + 0xB0]
	0x039D3530 ADD X31, X31, 0x150
	0x039D3534 RET
	0x039D3538 BL 0x1C16F20
	0x039D353C BL 0x1C16F20
	0x039D3540 B 0x39D3554
	0x039D3544 B 0x39D3554
	0x039D3548 B 0x39D3554
	0x039D354C B 0x39D3554
	0x039D3550 B 0x39D3554
	0x039D3554 MOV X19, X0
	0x039D3558 CMP W1, 0x1
	0x039D355C B.NE 0x39D3588
	0x039D3560 MOV X0, X19
	0x039D3564 BL 0x3EB1AD0
	0x039D3568 LDR X20, [X0]
	0x039D356C BL 0x3EB1AE0
	0x039D3570 ADD X0, X31, 0xA8
	0x039D3574 MOV X1, X31
	0x039D3578 BL 0x39B1DB4
	0x039D357C CBZ X20, 0x39D3508
	0x039D3580 MOV X0, X20
	0x039D3584 BL 0x1C16F18
	0x039D3588 MOV X20, X31
	0x039D358C B 0x39D3594
	0x039D3590 MOV X19, X0
	0x039D3594 ADD X0, X31, 0xA8
	0x039D3598 MOV X1, X31
	0x039D359C BL 0x39B1DB4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xA0F000
	009 Move W8, [X21+3359]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x780000
	017 Move X0, [X0+3928]
	018 Call 0x1C17CF4
	019 Move X0, 0x780000
	020 Move X0, [X0+3936]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3359], W8
	024 Move [X31+8], X31
	025 Move X0, [X20+16]
	026 Compare X0, 0
	027 JumpIfEqual {73}
	028 Move X8, 0x780000
	029 Move X8, [X8+3936]
	030 Add X2, X31, 8
	031 Move W1, W19
	032 Move X3, [X8]
	033 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {57}
	038 Move X21, [X31+8]
	039 Compare X21, 0
	040 JumpIfEqual {73}
	041 Move X8, [X21+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X22, X31
	044 And X8, X8, 0
	045 Add X23, X21, 32
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, [X20+24]
	048 Compare X8, 0
	049 JumpIfEqual {73}
	050 Move X0, [X23]
	051 Compare X0, 0
	052 JumpIfEqual {54}
	053 Call RTHandle.Release, X0
	054 Move W8, [X21+24]
	055 Add X22, X22, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, [X20+16]
	058 Compare X0, 0
	059 JumpIfEqual {73}
	060 Move X8, 0x780000
	061 Move X8, [X8+3928]
	062 Move W1, W19
	063 Move X2, [X8]
	064 Call Dictionary`2<Int32, Object>.Remove, X0, X1
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X22, [X31+32]
	068 Move X21, [X31+40]
	069 Move X30, [X31+16]
	070 Move X23, [X31+24]
	071 Add X31, X31, 64
	072 Return 
	073 Call 0x1C17F20
	074 Call 0x1C17F28

Method: System.Void SwapAndSetReferenceSize(System.Int32 width, System.Int32 height)

Disassembly:
	0x039D35B0 BL 0x1C16F18
	0x039D35B4 BL 0x1990590
	0x039D35B8 STP D15, D14, [X31 - 0x70]!
	0x039D35BC STP D13, D12, [X31 + 0x10]
	0x039D35C0 STP D11, D10, [X31 + 0x20]
	0x039D35C4 STP D9, D8, [X31 + 0x30]
	0x039D35C8 STP X30, X23, [X31 + 0x40]
	0x039D35CC STP X22, X21, [X31 + 0x50]
	0x039D35D0 STP X20, X19, [X31 + 0x60]
	0x039D35D4 MOV X22, X2
	0x039D35D8 MOV X23, X1
	0x039D35DC MOV X1, X2
	0x039D35E0 MOV X2, X31
	0x039D35E4 MOV W20, W4
	0x039D35E8 MOV W19, W3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W2
	006 Move W20, W1
	007 Move X21, X0
	008 Call BufferedRTHandleSystem.Swap, X0
	009 Move X0, [X21+24]
	010 Compare X0, 0
	011 JumpIfEqual {21}
	012 Move W1, W20
	013 Move W2, W19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move W3, W31
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Call RTHandleSystem.SetReferenceSize, X0, X1, X2, X3
	020 Return 
	021 Call 0x1C17F20

Method: System.Void ResetReferenceSize(System.Int32 width, System.Int32 height)

Disassembly:
	0x039D38AC MOV X3, X31
	0x039D38B0 LDP D15, D14, [X31], #0x70
	0x039D38B4 B 0x39DA0DC
	0x039D38B8 LDP X20, X19, [X31 + 0x60]
	0x039D38BC LDP X22, X21, [X31 + 0x50]
	0x039D38C0 LDP X30, X23, [X31 + 0x40]
	0x039D38C4 LDP D9, D8, [X31 + 0x30]
	0x039D38C8 LDP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move [X0+96], W1
	006 Move [X0+100], W2
	007 Move W3, 1
	008 Move X30, [X31+16]
	009 Call RTHandleSystem.SetReferenceSize, X0, X1, X2, X3
	010 Return 
	011 Call 0x1C17F20

Method: System.Int32 GetNumFramesAllocated(System.Int32 bufferId)

Disassembly:
	0x039D38D8 BL 0x1C16F20
	0x039D38DC STP D15, D14, [X31 - 0x70]!
	0x039D38E0 STP D13, D12, [X31 + 0x10]
	0x039D38E4 STP D11, D10, [X31 + 0x20]
	0x039D38E8 STP D9, D8, [X31 + 0x30]
	0x039D38EC STP X30, X23, [X31 + 0x40]
	0x039D38F0 STP X22, X21, [X31 + 0x50]
	0x039D38F4 STP X20, X19, [X31 + 0x60]
	0x039D38F8 MOV X22, X2
	0x039D38FC MOV X23, X1
	0x039D3900 MOV X1, X2
	0x039D3904 MOV X2, X31
	0x039D3908 MOV W20, W4
	0x039D390C MOV W19, W3
	0x039D3910 MOV V8.16B, V7.16B
	0x039D3914 MOV V9.16B, V6.16B
	0x039D3918 MOV V10.16B, V5.16B
	0x039D391C MOV V11.16B, V4.16B
	0x039D3920 MOV V12.16B, V3.16B
	0x039D3924 MOV V13.16B, V2.16B
	0x039D3928 MOV V14.16B, V1.16B
	0x039D392C MOV V15.16B, V0.16B
	0x039D3930 MOV X21, X0
	0x039D3934 BL 0x39D94C0
	0x039D3938 TBZ X0, 0x0, 0x39D39C4
	0x039D393C AND W3, W19, 0x1
	0x039D3940 MOVZ W4, 0x3
	0x039D3944 MOV X0, X21
	0x039D3948 MOV X1, X23
	0x039D394C MOV V0.16B, V15.16B
	0x039D3950 MOV V1.16B, V14.16B
	0x039D3954 MOV V2.16B, V13.16B
	0x039D3958 MOV V3.16B, V12.16B
	0x039D395C MOV X2, X22
	0x039D3960 MOV V4.16B, V11.16B
	0x039D3964 MOV V5.16B, V10.16B
	0x039D3968 MOV V6.16B, V9.16B
	0x039D396C MOV V7.16B, V8.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA0F000
	006 Move W8, [X21+3360]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x780000
	014 Move X0, [X0+3872]
	015 Call 0x1C17CF4
	016 Move X0, 0x780000
	017 Move X0, [X0+3880]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3360], W8
	021 Move X0, [X20+16]
	022 Compare X0, 0
	023 JumpIfEqual {50}
	024 Move X8, 0x780000
	025 Move X8, [X8+3872]
	026 Move W1, W19
	027 Move X2, [X8]
	028 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {44}
	033 Move X0, [X20+16]
	034 Compare X0, 0
	035 JumpIfEqual {50}
	036 Move X8, 0x780000
	037 Move X8, [X8+3880]
	038 Move W1, W19
	039 Move X2, [X8]
	040 Call Dictionary`2<Int32, Object>.get_Item, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {50}
	043 Move W0, [X0+24]
	044 Move W0, W31
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0
	050 Call 0x1C17F20

Method: UnityEngine.Vector2 CalculateRatioAgainstMaxSize(System.Int32 width, System.Int32 height)

Disassembly:
	0x039D3970 BL 0x39D31D0
	0x039D3974 ADDS W31, W20, 0x1
	0x039D3978 B.NE 0x39D3990
	0x039D397C CBZ X22, 0x39D39E4
	0x039D3980 MOV X0, X22
	0x039D3984 MOV X1, X31
	0x039D3988 BL 0x3C385F8
	0x039D398C MOV W20, W0
	0x039D3990 CBZ X21, 0x39D39E4
	0x039D3994 AND W2, W19, 0x1
	0x039D3998 MOV X0, X21

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Move W8, W1
	004 NotImplemented "Instruction BFM not yet implemented."
	005 Move [X31+8], X8
	006 Compare X0, 0
	007 JumpIfEqual {12}
	008 Add X1, X31, 8
	009 Call RTHandleSystem.CalculateRatioAgainstMaxSize, X0, X1
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void Swap()

Disassembly:
	0x039D35EC MOV V8.16B, V7.16B
	0x039D35F0 MOV V9.16B, V6.16B
	0x039D35F4 MOV V10.16B, V5.16B
	0x039D35F8 MOV V11.16B, V4.16B
	0x039D35FC MOV V12.16B, V3.16B
	0x039D3600 MOV V13.16B, V2.16B
	0x039D3604 MOV V14.16B, V1.16B
	0x039D3608 MOV V15.16B, V0.16B
	0x039D360C MOV X21, X0
	0x039D3610 BL 0x39D94C0
	0x039D3614 TBZ X0, 0x0, 0x39D36A0
	0x039D3618 AND W3, W19, 0x1
	0x039D361C MOV X0, X21
	0x039D3620 MOV X1, X23
	0x039D3624 MOV V0.16B, V15.16B
	0x039D3628 MOV V1.16B, V14.16B
	0x039D362C MOV V2.16B, V13.16B
	0x039D3630 MOV V3.16B, V12.16B
	0x039D3634 MOV X2, X22
	0x039D3638 MOV V4.16B, V11.16B
	0x039D363C MOV V5.16B, V10.16B
	0x039D3640 MOV V6.16B, V9.16B
	0x039D3644 MOV V7.16B, V8.16B
	0x039D3648 MOV W4, W31
	0x039D364C BL 0x39D31D0
	0x039D3650 ADDS W31, W20, 0x1
	0x039D3654 B.NE 0x39D366C
	0x039D3658 CBZ X22, 0x39D36C0
	0x039D365C MOV X0, X22
	0x039D3660 MOV X1, X31
	0x039D3664 BL 0x3C385F8
	0x039D3668 MOV W20, W0
	0x039D366C CBZ X21, 0x39D36C0
	0x039D3670 AND W2, W19, 0x1
	0x039D3674 MOV X0, X21
	0x039D3678 MOV W1, W20
	0x039D367C LDP X20, X19, [X31 + 0x60]
	0x039D3680 LDP X22, X21, [X31 + 0x50]
	0x039D3684 LDP X30, X23, [X31 + 0x40]
	0x039D3688 LDP D9, D8, [X31 + 0x30]
	0x039D368C LDP D11, D10, [X31 + 0x20]
	0x039D3690 LDP D13, D12, [X31 + 0x10]
	0x039D3694 MOV X3, X31
	0x039D3698 LDP D15, D14, [X31], #0x70
	0x039D369C B 0x39DA0DC
	0x039D36A0 LDP X20, X19, [X31 + 0x60]
	0x039D36A4 LDP X22, X21, [X31 + 0x50]
	0x039D36A8 LDP X30, X23, [X31 + 0x40]
	0x039D36AC LDP D9, D8, [X31 + 0x30]
	0x039D36B0 LDP D11, D10, [X31 + 0x20]
	0x039D36B4 LDP D13, D12, [X31 + 0x10]
	0x039D36B8 LDP D15, D14, [X31], #0x70
	0x039D36BC RET
	0x039D36C0 BL 0x1C16F20
	0x039D36C4 STP D15, D14, [X31 - 0x70]!
	0x039D36C8 STP D13, D12, [X31 + 0x10]
	0x039D36CC STP D11, D10, [X31 + 0x20]
	0x039D36D0 STP D9, D8, [X31 + 0x30]
	0x039D36D4 STP X30, X23, [X31 + 0x40]
	0x039D36D8 STP X22, X21, [X31 + 0x50]
	0x039D36DC STP X20, X19, [X31 + 0x60]
	0x039D36E0 MOV X22, X2
	0x039D36E4 MOV X23, X1
	0x039D36E8 MOV X1, X2
	0x039D36EC MOV X2, X31
	0x039D36F0 MOV W20, W4
	0x039D36F4 MOV W19, W3
	0x039D36F8 MOV V8.16B, V7.16B
	0x039D36FC MOV V9.16B, V6.16B
	0x039D3700 MOV V10.16B, V5.16B
	0x039D3704 MOV V11.16B, V4.16B
	0x039D3708 MOV V12.16B, V3.16B
	0x039D370C MOV V13.16B, V2.16B
	0x039D3710 MOV V14.16B, V1.16B
	0x039D3714 MOV V15.16B, V0.16B
	0x039D3718 MOV X21, X0
	0x039D371C BL 0x39D94C0
	0x039D3720 TBZ X0, 0x0, 0x39D37AC
	0x039D3724 AND W3, W19, 0x1
	0x039D3728 MOVZ W4, 0x1
	0x039D372C MOV X0, X21
	0x039D3730 MOV X1, X23
	0x039D3734 MOV V0.16B, V15.16B
	0x039D3738 MOV V1.16B, V14.16B
	0x039D373C MOV V2.16B, V13.16B
	0x039D3740 MOV V3.16B, V12.16B
	0x039D3744 MOV X2, X22
	0x039D3748 MOV V4.16B, V11.16B
	0x039D374C MOV V5.16B, V10.16B
	0x039D3750 MOV V6.16B, V9.16B
	0x039D3754 MOV V7.16B, V8.16B
	0x039D3758 BL 0x39D31D0
	0x039D375C ADDS W31, W20, 0x1
	0x039D3760 B.NE 0x39D3778
	0x039D3764 CBZ X22, 0x39D37CC
	0x039D3768 MOV X0, X22
	0x039D376C MOV X1, X31
	0x039D3770 BL 0x3C385F8
	0x039D3774 MOV W20, W0
	0x039D3778 CBZ X21, 0x39D37CC
	0x039D377C AND W2, W19, 0x1
	0x039D3780 MOV X0, X21
	0x039D3784 MOV W1, W20
	0x039D3788 LDP X20, X19, [X31 + 0x60]
	0x039D378C LDP X22, X21, [X31 + 0x50]
	0x039D3790 LDP X30, X23, [X31 + 0x40]
	0x039D3794 LDP D9, D8, [X31 + 0x30]
	0x039D3798 LDP D11, D10, [X31 + 0x20]
	0x039D379C LDP D13, D12, [X31 + 0x10]
	0x039D37A0 MOV X3, X31
	0x039D37A4 LDP D15, D14, [X31], #0x70
	0x039D37A8 B 0x39DA0DC
	0x039D37AC LDP X20, X19, [X31 + 0x60]
	0x039D37B0 LDP X22, X21, [X31 + 0x50]
	0x039D37B4 LDP X30, X23, [X31 + 0x40]
	0x039D37B8 LDP D9, D8, [X31 + 0x30]
	0x039D37BC LDP D11, D10, [X31 + 0x20]
	0x039D37C0 LDP D13, D12, [X31 + 0x10]
	0x039D37C4 LDP D15, D14, [X31], #0x70
	0x039D37C8 RET
	0x039D37CC BL 0x1C16F20
	0x039D37D0 STP D15, D14, [X31 - 0x70]!
	0x039D37D4 STP D13, D12, [X31 + 0x10]
	0x039D37D8 STP D11, D10, [X31 + 0x20]
	0x039D37DC STP D9, D8, [X31 + 0x30]
	0x039D37E0 STP X30, X23, [X31 + 0x40]
	0x039D37E4 STP X22, X21, [X31 + 0x50]
	0x039D37E8 STP X20, X19, [X31 + 0x60]
	0x039D37EC MOV X22, X2
	0x039D37F0 MOV X23, X1
	0x039D37F4 MOV X1, X2
	0x039D37F8 MOV X2, X31
	0x039D37FC MOV W20, W4
	0x039D3800 MOV W19, W3
	0x039D3804 MOV V8.16B, V7.16B
	0x039D3808 MOV V9.16B, V6.16B
	0x039D380C MOV V10.16B, V5.16B
	0x039D3810 MOV V11.16B, V4.16B
	0x039D3814 MOV V12.16B, V3.16B
	0x039D3818 MOV V13.16B, V2.16B
	0x039D381C MOV V14.16B, V1.16B
	0x039D3820 MOV V15.16B, V0.16B
	0x039D3824 MOV X21, X0
	0x039D3828 BL 0x39D94C0
	0x039D382C TBZ X0, 0x0, 0x39D38B8
	0x039D3830 AND W3, W19, 0x1
	0x039D3834 MOVZ W4, 0x2
	0x039D3838 MOV X0, X21
	0x039D383C MOV X1, X23
	0x039D3840 MOV V0.16B, V15.16B
	0x039D3844 MOV V1.16B, V14.16B
	0x039D3848 MOV V2.16B, V13.16B
	0x039D384C MOV V3.16B, V12.16B
	0x039D3850 MOV X2, X22
	0x039D3854 MOV V4.16B, V11.16B
	0x039D3858 MOV V5.16B, V10.16B
	0x039D385C MOV V6.16B, V9.16B
	0x039D3860 MOV V7.16B, V8.16B
	0x039D3864 BL 0x39D31D0
	0x039D3868 ADDS W31, W20, 0x1
	0x039D386C B.NE 0x39D3884
	0x039D3870 CBZ X22, 0x39D38D8
	0x039D3874 MOV X0, X22
	0x039D3878 MOV X1, X31
	0x039D387C BL 0x3C385F8
	0x039D3880 MOV W20, W0
	0x039D3884 CBZ X21, 0x39D38D8
	0x039D3888 AND W2, W19, 0x1
	0x039D388C MOV X0, X21
	0x039D3890 MOV W1, W20
	0x039D3894 LDP X20, X19, [X31 + 0x60]
	0x039D3898 LDP X22, X21, [X31 + 0x50]
	0x039D389C LDP X30, X23, [X31 + 0x40]
	0x039D38A0 LDP D9, D8, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0xA0F000
	012 Move W8, [X20+3361]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x780000
	019 Move X0, [X0+3944]
	020 Call 0x1C17CF4
	021 Move X0, 0x780000
	022 Move X0, [X0+3952]
	023 Call 0x1C17CF4
	024 Move X0, 0x780000
	025 Move X0, [X0+3960]
	026 Call 0x1C17CF4
	027 Move X0, 0x780000
	028 Move X0, [X0+3968]
	029 Call 0x1C17CF4
	030 Move X0, 0x780000
	031 Move X0, [X0+3976]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+3361], W8
	035 NotImplemented "Instruction MOVI not yet implemented."
	036 Move [X31+80], X31
	037 Move [X31+48], V0
	038 Move [X31+56], V0
	039 Move X0, [X19+16]
	040 Compare X0, 0
	041 JumpIfEqual {158}
	042 Move X8, 0x780000
	043 Move X8, [X8+3944]
	044 Move X23, 0x780000
	045 Move X22, 0x780000
	046 Move X1, [X8]
	047 Move X23, [X23+3960]
	048 Move X22, [X22+3952]
	049 Add X8, X31, 8
	050 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 Move X8, [X31+40]
	054 Move [X31+48], V0
	055 Move [X31+56], V1
	056 Move [X31+80], X8
	057 Move X1, [X23]
	058 Add X0, X31, 48
	059 Call Enumerator<Int32, Object>.MoveNext, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {129}
	064 Move X24, [X31+72]
	065 Compare X24, 0
	066 JumpIfEqual {148}
	067 Move X8, [X24+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Compare W8, 0
	070 JumpIfEqual {149}
	071 Move X0, [X19+24]
	072 Compare X0, 0
	073 JumpIfEqual {150}
	074 Move X1, [X24+32]
	075 Move W2, W31
	076 Call RTHandleSystem.SwitchResizeMode, X0, X1, X2
	077 Move W9, W8
	078 Move X9, W9
	079 Subtract X9, X9, 1
	080 Add X10, X24, X9
	081 Move X20, [X10+32]
	082 Move X25, X31
	083 And X8, X8, 0
	084 And X26, X9, 0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Add X9, X24, X25
	087 Move X21, [X9+32]
	088 Compare X21, 0
	089 JumpIfEqual {97}
	090 Move X8, [X24]
	091 Move X1, [X8+64]
	092 Move X0, X21
	093 Call 0x1C17E00
	094 Compare X0, 0
	095 JumpIfEqual {145}
	096 Move W8, [X24+24]
	097 Add X9, X25, 1
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add X10, X24, X25
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X25, X9
	102 Move [X10+40], X21
	103 Compare X20, 0
	104 JumpIfEqual {112}
	105 Move X8, [X24]
	106 Move X1, [X8+64]
	107 Move X0, X20
	108 Call 0x1C17E00
	109 Compare X0, 0
	110 JumpIfEqual {155}
	111 Move X8, [X24+24]
	112 Compare W8, 0
	113 JumpIfEqual {153}
	114 Move [X24+32], X20
	115 Move X0, [X19+24]
	116 Compare X0, 0
	117 JumpIfEqual {152}
	118 Move X1, X20
	119 Move W2, W31
	120 Call RTHandleSystem.SwitchResizeMode, X0, X1, X2
	121 Move W8, [X24+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X0, [X19+24]
	124 Compare X0, 0
	125 JumpIfEqual {154}
	126 Move X1, [X24+40]
	127 Move W2, 1
	128 Call RTHandleSystem.SwitchResizeMode, X0, X1, X2
	129 Move X1, [X22]
	130 Add X0, X31, 48
	131 Call Enumerator<Int32, Object>.Dispose, X0
	132 Move X20, [X31+160]
	133 Move X19, [X31+168]
	134 Move X22, [X31+144]
	135 Move X21, [X31+152]
	136 Move X24, [X31+128]
	137 Move X23, [X31+136]
	138 Move X26, [X31+112]
	139 Move X25, [X31+120]
	140 Move X30, [X31+96]
	141 Add X31, X31, 176
	142 Return 
	143 Call 0x1C17F28
	144 Call 0x1C17F28
	145 Call 0x1C17F44
	146 Move X1, X31
	147 Call 0x1C17DEC
	148 Call 0x1C17F20
	149 Call 0x1C17F28
	150 Call 0x1C17F20
	151 Call 0x1C17F28
	152 Call 0x1C17F20
	153 Call 0x1C17F28
	154 Call 0x1C17F20
	155 Call 0x1C17F44
	156 Move X1, X31
	157 Call 0x1C17DEC
	158 Call 0x1C17F20
	159 Move X19, X0
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X0, X19
	162 Call 0x3EB2AD0
	163 Move X20, [X0]
	164 Call 0x3EB2AE0
	165 Move X1, [X22]
	166 Add X0, X31, 48
	167 Call Enumerator<Int32, Object>.Dispose, X0
	168 Compare X20, 0
	169 JumpIfEqual {132}
	170 Move X0, X20
	171 Call 0x1C17F18
	172 Move X20, X31
	173 Move X19, X0
	174 Move X1, [X22]
	175 Add X0, X31, 48
	176 Call Enumerator<Int32, Object>.Dispose, X0
	177 Compare X20, 0
	178 JumpIfNotEqual {181}
	179 Move X0, X19
	180 Call 0x1D2D690
	181 Move X0, X20
	182 Call 0x1C17F18
	183 Call 0x1991590

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x039D3BA8 ADRP X8, 0x720000
	0x039D3BAC LDR X8, [X8 + 0xA28]
	0x039D3BB0 MOV X19, X0
	0x039D3BB4 LDR X8, [X8]
	0x039D3BB8 LDR W9, [X8 + 0xE0]
	0x039D3BBC CBNZ W9, 0x39D3BC8
	0x039D3BC0 MOV X0, X8
	0x039D3BC4 BL 0x1C16DFC
	0x039D3BC8 MOV X0, X19
	0x039D3BCC MOV X1, X31
	0x039D3BD0 BL 0x3C0649C
	0x039D3BD4 LDP X20, X19, [X31 + 0x30]
	0x039D3BD8 LDP X22, X21, [X31 + 0x20]
	0x039D3BDC LDP X24, X23, [X31 + 0x10]
	0x039D3BE0 MOV W0, W31
	0x039D3BE4 LDP X30, X25, [X31], #0x40
	0x039D3BE8 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+32]
	004 Compare W8, 0
	005 JumpIfNotEqual {21}
	006 Move X19, X0
	007 Move TEMP, X1
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {19}
	011 Move X0, X19
	012 Call BufferedRTHandleSystem.ReleaseAll, X0
	013 Move X0, [X19+24]
	014 Compare X0, 0
	015 JumpIfEqual {24}
	016 Move W1, 1
	017 Call RTHandleSystem.Dispose, X0, X1
	018 Move [X19+24], X31
	019 Move W8, 1
	020 Move [X19+32], W8
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x039D3DD8 MOV W3, W19
	0x039D3DDC LDR X8, [X8 + 0xB8]

ISIL:
	001 Move W1, 1
	002 Call BufferedRTHandleSystem.Dispose, X0, X1
	003 Return 

Method: System.Void ReleaseAll()

Disassembly:
	0x039D3BEC BL 0x1C16F28
	0x039D3BF0 BL 0x1C16F20
	0x039D3BF4 STR X30, [X31 - 0x20]!
	0x039D3BF8 STP X20, X19, [X31 + 0x10]
	0x039D3BFC ADRP X20, 0xA0E000
	0x039D3C00 LDRB W8, [X20 + 0xD27]
	0x039D3C04 MOV X19, X0
	0x039D3C08 TBNZ X8, 0x0, 0x39D3C20
	0x039D3C0C ADRP X0, 0x77F000
	0x039D3C10 LDR X0, [X0 + 0xFF0]
	0x039D3C14 BL 0x1C16CF4
	0x039D3C18 MOVZ W8, 0x1
	0x039D3C1C STRB W8, [X20 + 0xD27]
	0x039D3C20 LDR X0, [X19 + 0x50]
	0x039D3C24 CBZ X0, 0x39D3C40
	0x039D3C28 ADRP X8, 0x77F000
	0x039D3C2C LDR X8, [X8 + 0xFF0]
	0x039D3C30 LDP X20, X19, [X31 + 0x10]
	0x039D3C34 LDR X1, [X8]
	0x039D3C38 LDR X30, [X31], #0x20
	0x039D3C3C B 0x2A25E88
	0x039D3C40 BL 0x1C16F20
	0x039D3C44 STR X30, [X31 - 0x30]!
	0x039D3C48 STP X22, X21, [X31 + 0x10]
	0x039D3C4C STP X20, X19, [X31 + 0x20]
	0x039D3C50 CBZ X1, 0x39D3CB4
	0x039D3C54 LDR X8, [X1]
	0x039D3C58 MOV X20, X1
	0x039D3C5C MOV X19, X0
	0x039D3C60 MOV X0, X20
	0x039D3C64 LDP X9, X1, [X8 + 0x188]
	0x039D3C68 BLR X9
	0x039D3C6C LDR X8, [X20]
	0x039D3C70 MOV W21, W0
	0x039D3C74 MOV X0, X20
	0x039D3C78 LDP X9, X1, [X8 + 0x1A8]
	0x039D3C7C BLR X9
	0x039D3C80 MOV W22, W0
	0x039D3C84 MOV X0, X19
	0x039D3C88 MOV X1, X20
	0x039D3C8C MOV X2, X31
	0x039D3C90 BL 0x39DA344
	0x039D3C94 MOV W1, W0
	0x039D3C98 MOV X0, X19
	0x039D3C9C MOV W2, W21
	0x039D3CA0 MOV W3, W22
	0x039D3CA4 LDP X20, X19, [X31 + 0x20]
	0x039D3CA8 LDP X22, X21, [X31 + 0x10]
	0x039D3CAC LDR X30, [X31], #0x30
	0x039D3CB0 B 0x39D3CF0
	0x039D3CB4 BL 0x1C16F20
	0x039D3CB8 STP X30, X21, [X31 - 0x20]!
	0x039D3CBC STP X20, X19, [X31 + 0x10]
	0x039D3CC0 MOV W20, W2
	0x039D3CC4 MOV X2, X31
	0x039D3CC8 MOV W19, W3
	0x039D3CCC MOV X21, X0
	0x039D3CD0 BL 0x39DA344
	0x039D3CD4 MOV W2, W20
	0x039D3CD8 MOV W3, W19
	0x039D3CDC LDP X20, X19, [X31 + 0x10]
	0x039D3CE0 MOV W1, W0
	0x039D3CE4 MOV X0, X21
	0x039D3CE8 LDP X30, X21, [X31], #0x20
	0x039D3CEC B 0x39D3CF0
	0x039D3CF0 SUB X31, X31, 0x50
	0x039D3CF4 STP X30, X23, [X31 + 0x20]
	0x039D3CF8 STP X22, X21, [X31 + 0x30]
	0x039D3CFC STP X20, X19, [X31 + 0x40]
	0x039D3D00 ADRP X23, 0xA0E000
	0x039D3D04 LDRB W8, [X23 + 0xD28]
	0x039D3D08 MOV W19, W3
	0x039D3D0C MOV W20, W2
	0x039D3D10 MOV W21, W1
	0x039D3D14 MOV X22, X0
	0x039D3D18 TBNZ X8, 0x0, 0x39D3D30
	0x039D3D1C ADRP X0, 0x77F000
	0x039D3D20 LDR X0, [X0 + 0xFF8]
	0x039D3D24 BL 0x1C16CF4
	0x039D3D28 MOVZ W8, 0x1
	0x039D3D2C STRB W8, [X23 + 0xD28]
	0x039D3D30 STP X31, X31, [X31 + 0x10]
	0x039D3D34 STP X31, X31, [X31]
	0x039D3D38 LDR X0, [X22 + 0x50]
	0x039D3D3C CBZ X0, 0x39D3E18
	0x039D3D40 ADRP X8, 0x77F000
	0x039D3D44 LDR X8, [X8 + 0xFF8]
	0x039D3D48 MOV W2, W20
	0x039D3D4C BFM X2, X19, 0x20, 0x1F
	0x039D3D50 MOV W1, W21
	0x039D3D54 LDR X3, [X8]
	0x039D3D58 BL 0x2A25CCC
	0x039D3D5C MOV X0, X22
	0x039D3D60 MOV W1, W21
	0x039D3D64 MOV X2, X31
	0x039D3D68 BL 0x39DABCC
	0x039D3D6C MOV X23, X0
	0x039D3D70 ADD X1, X31, 0x10
	0x039D3D74 MOV X0, X22
	0x039D3D78 MOV W2, W21
	0x039D3D7C MOV X3, X31
	0x039D3D80 BL 0x39DAB08
	0x039D3D84 TBZ X0, 0x0, 0x39D3D9C
	0x039D3D88 CMP W23, W20
	0x039D3D8C B.NE 0x39D3D9C
	0x039D3D90 UBFM X8, X23, 0x20, 0x3F
	0x039D3D94 CMP W8, W19
	0x039D3D98 B.EQ 0x39D3DF8
	0x039D3D9C ADRP X23, 0xA05000
	0x039D3DA0 LDRB W8, [X23 + 0xE5A]
	0x039D3DA4 CBNZ W8, 0x39D3DBC
	0x039D3DA8 ADRP X0, 0x727000
	0x039D3DAC LDR X0, [X0 + 0x9A0]
	0x039D3DB0 BL 0x1C16CF4
	0x039D3DB4 MOVZ W8, 0x1
	0x039D3DB8 STRB W8, [X23 + 0xE5A]
	0x039D3DBC ADRP X8, 0x727000
	0x039D3DC0 LDR X8, [X8 + 0x9A0]
	0x039D3DC4 ADD X4, X31, 0x0
	0x039D3DC8 MOV X0, X22
	0x039D3DCC MOV W1, W21

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0xA0F000
	012 Move W8, [X20+3362]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x780000
	019 Move X0, [X0+3984]
	020 Call 0x1C17CF4
	021 Move X0, 0x780000
	022 Move X0, [X0+3944]
	023 Call 0x1C17CF4
	024 Move X0, 0x780000
	025 Move X0, [X0+3952]
	026 Call 0x1C17CF4
	027 Move X0, 0x780000
	028 Move X0, [X0+3960]
	029 Call 0x1C17CF4
	030 Move X0, 0x780000
	031 Move X0, [X0+3968]
	032 Call 0x1C17CF4
	033 Move X0, 0x780000
	034 Move X0, [X0+3976]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3362], W8
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X31+80], X31
	040 Move [X31+48], V0
	041 Move [X31+56], V0
	042 Move X0, [X19+16]
	043 Compare X0, 0
	044 JumpIfEqual {113}
	045 Move X8, 0x780000
	046 Move X8, [X8+3944]
	047 Move X20, 0x780000
	048 Move X21, 0x780000
	049 Move X22, 0x780000
	050 Move X1, [X8]
	051 Move X20, [X20+3960]
	052 Move X21, [X21+3984]
	053 Move X22, [X22+3952]
	054 Add X8, X31, 8
	055 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 Move X8, [X31+40]
	059 Move [X31+48], V0
	060 Move [X31+56], V1
	061 Move [X31+80], X8
	062 Move X1, [X20]
	063 Add X0, X31, 48
	064 Call Enumerator<Int32, Object>.MoveNext, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {92}
	069 Move X23, [X31+72]
	070 Compare X23, 0
	071 JumpIfEqual {112}
	072 Move X8, [X23+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 And X8, X8, 0
	075 Compare X8, 0
	076 JumpIfEqual {91}
	077 Move X26, X31
	078 Subtract X24, X8, 1
	079 Add X25, X23, 32
	080 Move X8, [X19+24]
	081 Compare X8, 0
	082 JumpIfEqual {111}
	083 Move X0, [X25]
	084 Compare X0, 0
	085 JumpIfEqual {87}
	086 Call RTHandle.Release, X0
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X26, X26, 1
	089 Move W8, [X23+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Call 0x1C17F28
	092 Move X1, [X22]
	093 Add X0, X31, 48
	094 Call Enumerator<Int32, Object>.Dispose, X0
	095 Move X0, [X19+16]
	096 Compare X0, 0
	097 JumpIfEqual {113}
	098 Move X1, [X21]
	099 Call Dictionary`2<Int32, Object>.Clear, X0
	100 Move X20, [X31+160]
	101 Move X19, [X31+168]
	102 Move X22, [X31+144]
	103 Move X21, [X31+152]
	104 Move X24, [X31+128]
	105 Move X23, [X31+136]
	106 Move X26, [X31+112]
	107 Move X25, [X31+120]
	108 Move X30, [X31+96]
	109 Add X31, X31, 176
	110 Return 
	111 Call 0x1C17F20
	112 Call 0x1C17F20
	113 Call 0x1C17F20
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Call 0x3EB2AD0
	116 Move X20, [X0]
	117 Call 0x3EB2AE0
	118 Move X1, [X22]
	119 Add X0, X31, 48
	120 Call Enumerator<Int32, Object>.Dispose, X0
	121 Compare X20, 0
	122 JumpIfEqual {95}
	123 Move X0, X20
	124 Call 0x1C17F18
	125 Move X19, X0
	126 Move X20, X31
	127 Move X19, X0
	128 Move X1, [X22]
	129 Add X0, X31, 48
	130 Call Enumerator<Int32, Object>.Dispose, X0
	131 Compare X20, 0
	132 JumpIfNotEqual {135}
	133 Move X0, X19
	134 Call 0x1D2D690
	135 Move X0, X20
	136 Call 0x1C17F18
	137 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x039D3DE0 LDR V0, [X8]
	0x039D3DE4 STR V0, [X31]
	0x039D3DE8 LDR X8, [X22]
	0x039D3DEC LDP X9, X5, [X8 + 0x1B8]
	0x039D3DF0 BLR X9
	0x039D3DF4 TBZ X0, 0x0, 0x39D3E00
	0x039D3DF8 MOVZ W0, 0x1
	0x039D3DFC B 0x39D3E04
	0x039D3E00 MOV W0, W31
	0x039D3E04 LDP X20, X19, [X31 + 0x40]
	0x039D3E08 LDP X22, X21, [X31 + 0x30]
	0x039D3E0C LDP X30, X23, [X31 + 0x20]
	0x039D3E10 ADD X31, X31, 0x50
	0x039D3E14 RET
	0x039D3E18 BL 0x1C16F20
	0x039D3E1C STP X30, X21, [X31 - 0x20]!
	0x039D3E20 STP X20, X19, [X31 + 0x10]
	0x039D3E24 MOV W20, W3
	0x039D3E28 MOV X3, X31
	0x039D3E2C MOV W19, W4
	0x039D3E30 MOV X21, X0
	0x039D3E34 BL 0x39DAA8C
	0x039D3E38 MOV W2, W20
	0x039D3E3C MOV W3, W19
	0x039D3E40 LDP X20, X19, [X31 + 0x10]
	0x039D3E44 MOV W1, W0
	0x039D3E48 MOV X0, X21
	0x039D3E4C LDP X30, X21, [X31], #0x20
	0x039D3E50 B 0x39D3CF0
	0x039D3E54 SUB X31, X31, 0xF0
	0x039D3E58 STP X29, X30, [X31 + 0x90]
	0x039D3E5C STP X28, X27, [X31 + 0xA0]
	0x039D3E60 STP X26, X25, [X31 + 0xB0]
	0x039D3E64 STP X24, X23, [X31 + 0xC0]
	0x039D3E68 STP X22, X21, [X31 + 0xD0]
	0x039D3E6C STP X20, X19, [X31 + 0xE0]
	0x039D3E70 ADRP X22, 0xA0E000
	0x039D3E74 ADRP X21, 0x780000
	0x039D3E78 ADRP X20, 0x780000
	0x039D3E7C LDRB W8, [X22 + 0xD29]
	0x039D3E80 LDR X21, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xA0F000
	008 Move X23, 0x780000
	009 Move X20, 0x780000
	010 Move X21, 0x780000
	011 Move W8, [X22+3363]
	012 Move X23, [X23+3992]
	013 Move X20, [X20+4000]
	014 Move X21, [X21+4008]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x780000
	021 Move X0, [X0+4000]
	022 Call 0x1C17CF4
	023 Move X0, 0x780000
	024 Move X0, [X0+3992]
	025 Call 0x1C17CF4
	026 Move X0, 0x780000
	027 Move X0, [X0+4008]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3363], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X1, [X20]
	034 Move X20, X0
	035 Call Dictionary`2<Int32, Object>..ctor, X0
	036 Move [X19+16], X20
	037 Move X0, [X21]
	038 Call 0x1C17F10
	039 Move X20, X0
	040 Call RTHandleSystem..ctor, X0
	041 Move [X19+24], X20
	042 Move X0, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X1, X31
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Call Object..ctor, X0
	051 Return 

