Type: UnityEngine.Rendering.DebugUI/EnumField

Method: System.Int32[] get_indexes()

Disassembly:
	0x039AFCC0 TBNZ X8, 0x0, 0x39AFD14
	0x039AFCC4 ADRP X0, 0x7A1000
	0x039AFCC8 LDR X0, [X0 + 0x778]
	0x039AFCCC BL 0x1C16CF4
	0x039AFCD0 ADRP X0, 0x7A2000
	0x039AFCD4 LDR X0, [X0 + 0xCE0]
	0x039AFCD8 BL 0x1C16CF4
	0x039AFCDC ADRP X0, 0x7A2000
	0x039AFCE0 LDR X0, [X0 + 0xCE8]
	0x039AFCE4 BL 0x1C16CF4
	0x039AFCE8 ADRP X0, 0x744000
	0x039AFCEC LDR X0, [X0 + 0xA58]
	0x039AFCF0 BL 0x1C16CF4
	0x039AFCF4 ADRP X0, 0x744000
	0x039AFCF8 LDR X0, [X0 + 0x598]
	0x039AFCFC BL 0x1C16CF4
	0x039AFD00 ADRP X0, 0x7A2000
	0x039AFD04 LDR X0, [X0 + 0xCF0]
	0x039AFD08 BL 0x1C16CF4
	0x039AFD0C MOVZ W8, 0x1
	0x039AFD10 STRB W8, [X19 + 0xC28]
	0x039AFD14 LDR X8, [X21]
	0x039AFD18 LDR X0, [X20]
	0x039AFD1C LDR X8, [X8 + 0xB8]
	0x039AFD20 LDR W9, [X0 + 0xE0]
	0x039AFD24 LDR X19, [X8]
	0x039AFD28 CBNZ W9, 0x39AFD30
	0x039AFD2C BL 0x1C16DFC
	0x039AFD30 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA33000
	005 Move W8, [X20+3089]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x747000
	012 Move X0, [X0+2504]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3089], W8
	016 Move X0, [X19+120]
	017 Compare X0, 0
	018 JumpIfNotEqual {32}
	019 Move X8, [X19+96]
	020 Compare X8, 0
	021 JumpIfEqual {23}
	022 Move W1, [X8+24]
	023 Move W1, W31
	024 Move W0, W31
	025 Move X2, X31
	026 Call Enumerable.Range, X0, X1
	027 Move X8, 0x747000
	028 Move X8, [X8+2504]
	029 Move X1, [X8]
	030 Call Enumerable.ToArray, X0
	031 Move [X19+120], X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Func`1<System.Int32> get_getIndex()

Disassembly:
	0x039AFD34 MOV X1, X31
	0x039AFD38 MOV X2, X31

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_getIndex(System.Func`1<System.Int32> value)

Disassembly:
	0x039AFD3C BL 0x3C354F8
	0x039AFD40 TBZ X0, 0x0, 0x39AFD50

ISIL:
	001 Move [X0+128], X1
	002 Return 

Method: System.Action`1<System.Int32> get_setIndex()

Disassembly:
	0x039AFD44 LDP X20, X19, [X31 + 0x10]
	0x039AFD48 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move X0, [X0+136]
	002 Return X0

Method: System.Void set_setIndex(System.Action`1<System.Int32> value)

Disassembly:
	0x039AFD4C RET
	0x039AFD50 ADRP X8, 0x744000

ISIL:
	001 Move [X0+136], X1
	002 Return 

Method: System.Int32 get_currentIndex()

Disassembly:
	0x039AFD54 LDR X8, [X8 + 0xA58]
	0x039AFD58 LDR X0, [X8]
	0x039AFD5C BL 0x1C16F10
	0x039AFD60 MOV X1, X31
	0x039AFD64 MOV X19, X0
	0x039AFD68 BL 0x3C35A08
	0x039AFD6C CBZ X19, 0x39AFE1C
	0x039AFD70 ADRP X8, 0x7A2000
	0x039AFD74 LDR X8, [X8 + 0xCF0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+128]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move X2, [X8+24]
	006 Move X0, [X8+64]
	007 Move X1, [X8+40]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_currentIndex(System.Int32 value)

Disassembly:
	0x039AFD78 MOV X0, X19
	0x039AFD7C MOV X2, X31
	0x039AFD80 LDR X1, [X8]
	0x039AFD84 BL 0x3C38A84
	0x039AFD88 ADRP X8, 0x7A2000
	0x039AFD8C LDR X8, [X8 + 0xCE8]
	0x039AFD90 MOV X0, X19
	0x039AFD94 LDR X1, [X8]
	0x039AFD98 BL 0x21E51FC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+136]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move X3, [X8+24]
	006 Move X0, [X8+64]
	007 Move X2, [X8+40]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void set_autoEnum(System.Type value)

Disassembly:
	0x039AFD9C LDR X8, [X21]
	0x039AFDA0 LDR X8, [X8 + 0xB8]
	0x039AFDA4 STR X0, [X8]
	0x039AFDA8 LDR X8, [X21]
	0x039AFDAC MOV X0, X31
	0x039AFDB0 LDR X8, [X8 + 0xB8]
	0x039AFDB4 LDR X21, [X8]
	0x039AFDB8 BL 0x3C0E150
	0x039AFDBC CBZ X21, 0x39AFE1C
	0x039AFDC0 STR W0, [X21 + 0x20]
	0x039AFDC4 LDR X0, [X20]
	0x039AFDC8 LDR W8, [X0 + 0xE0]
	0x039AFDCC CBNZ W8, 0x39AFDD4
	0x039AFDD0 BL 0x1C16DFC
	0x039AFDD4 MOV X0, X19
	0x039AFDD8 MOV X1, X31
	0x039AFDDC BL 0x3C39674
	0x039AFDE0 ADRP X8, 0x7A1000
	0x039AFDE4 LDR X8, [X8 + 0x778]
	0x039AFDE8 LDR X0, [X8]
	0x039AFDEC LDR W8, [X0 + 0xE0]
	0x039AFDF0 CBNZ W8, 0x39AFDF8
	0x039AFDF4 BL 0x1C16DFC
	0x039AFDF8 MOV X0, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA33000
	007 Move X22, 0x7A3000
	008 Move W8, [X21+3090]
	009 Move X22, [X22+3152]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7A3000
	017 Move X0, [X0+3152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3090], W8
	021 Move X2, [X22]
	022 Move X0, X19
	023 Move X1, X20
	024 Call 0x2BAA8A8, X0, X1
	025 Move X0, X19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]

Method: System.Void InitQuickSeparators()

Disassembly:
	0x039AFDFC BL 0x399C120
	0x039AFE00 CBZ X0, 0x39AFE1C
	0x039AFE04 MOV X1, X31
	0x039AFE08 BL 0x39A7C34
	0x039AFE0C LDP X20, X19, [X31 + 0x10]
	0x039AFE10 MOV X0, X31
	0x039AFE14 LDP X30, X21, [X31], #0x20
	0x039AFE18 B 0x37F6CAC
	0x039AFE1C BL 0x1C16F20
	0x039AFE20 STP X30, X21, [X31 - 0x20]!
	0x039AFE24 STP X20, X19, [X31 + 0x10]
	0x039AFE28 ADRP X19, 0xA32000
	0x039AFE2C ADRP X20, 0x7A1000
	0x039AFE30 LDRB W8, [X19 + 0xC29]
	0x039AFE34 LDR X20, [X20 + 0x778]
	0x039AFE38 TBNZ X8, 0x0, 0x39AFE74
	0x039AFE3C ADRP X0, 0x76C000
	0x039AFE40 LDR X0, [X0 + 0x8F8]
	0x039AFE44 BL 0x1C16CF4
	0x039AFE48 ADRP X0, 0x7A1000
	0x039AFE4C LDR X0, [X0 + 0x778]
	0x039AFE50 BL 0x1C16CF4
	0x039AFE54 ADRP X0, 0x7A2000
	0x039AFE58 LDR X0, [X0 + 0xCE0]
	0x039AFE5C BL 0x1C16CF4
	0x039AFE60 ADRP X0, 0x744000
	0x039AFE64 LDR X0, [X0 + 0x598]
	0x039AFE68 BL 0x1C16CF4
	0x039AFE6C MOVZ W8, 0x1
	0x039AFE70 STRB W8, [X19 + 0xC29]
	0x039AFE74 LDR X0, [X20]
	0x039AFE78 LDR W8, [X0 + 0xE0]
	0x039AFE7C CBNZ W8, 0x39AFE84
	0x039AFE80 BL 0x1C16DFC
	0x039AFE84 MOV X0, X31
	0x039AFE88 BL 0x399C120
	0x039AFE8C CBZ X0, 0x39AFF4C
	0x039AFE90 ADRP X20, 0x7A2000
	0x039AFE94 ADRP X21, 0x744000
	0x039AFE98 LDR X20, [X20 + 0xCE0]
	0x039AFE9C LDR X21, [X21 + 0x598]
	0x039AFEA0 MOV W1, W31
	0x039AFEA4 MOV X2, X31
	0x039AFEA8 MOV X19, X0
	0x039AFEAC BL 0x39AB5FC
	0x039AFEB0 MOV X0, X19
	0x039AFEB4 MOV W1, W31
	0x039AFEB8 MOV X2, X31
	0x039AFEBC BL 0x39AB878
	0x039AFEC0 LDR X8, [X20]
	0x039AFEC4 LDR X0, [X21]
	0x039AFEC8 LDR X8, [X8 + 0xB8]
	0x039AFECC LDR W9, [X0 + 0xE0]
	0x039AFED0 LDR X19, [X8]
	0x039AFED4 CBNZ W9, 0x39AFEDC
	0x039AFED8 BL 0x1C16DFC
	0x039AFEDC MOV X0, X19
	0x039AFEE0 MOV X1, X31
	0x039AFEE4 MOV X2, X31
	0x039AFEE8 BL 0x3C354F8
	0x039AFEEC TBZ X0, 0x0, 0x39AFF40
	0x039AFEF0 LDR X8, [X20]
	0x039AFEF4 LDR X8, [X8 + 0xB8]
	0x039AFEF8 LDR X0, [X8]
	0x039AFEFC CBZ X0, 0x39AFF4C
	0x039AFF00 MOV X1, X31
	0x039AFF04 BL 0x3C32ECC
	0x039AFF08 ADRP X8, 0x76C000
	0x039AFF0C LDR X8, [X8 + 0x8F8]
	0x039AFF10 MOV X19, X0
	0x039AFF14 LDR X8, [X8]
	0x039AFF18 LDR W9, [X8 + 0xE0]
	0x039AFF1C CBNZ W9, 0x39AFF28
	0x039AFF20 MOV X0, X8
	0x039AFF24 BL 0x1C16DFC
	0x039AFF28 MOV X0, X19
	0x039AFF2C MOV X1, X31
	0x039AFF30 BL 0x39E1DF8
	0x039AFF34 LDR X8, [X20]
	0x039AFF38 LDR X8, [X8 + 0xB8]
	0x039AFF3C STR X31, [X8]
	0x039AFF40 LDP X20, X19, [X31 + 0x10]
	0x039AFF44 LDP X30, X21, [X31], #0x20
	0x039AFF48 RET
	0x039AFF4C BL 0x1C16F20
	0x039AFF50 STR X30, [X31 - 0x30]!
	0x039AFF54 STP X22, X21, [X31 + 0x10]
	0x039AFF58 STP X20, X19, [X31 + 0x20]
	0x039AFF5C ADRP X22, 0xA32000
	0x039AFF60 ADRP X21, 0x7A2000
	0x039AFF64 ADRP X20, 0x744000
	0x039AFF68 LDRB W8, [X22 + 0xC2A]
	0x039AFF6C LDR X21, [X21 + 0xCE0]
	0x039AFF70 LDR X20, [X20 + 0x598]
	0x039AFF74 MOV W19, W0
	0x039AFF78 TBNZ X8, 0x0, 0x39AFF9C
	0x039AFF7C ADRP X0, 0x7A2000
	0x039AFF80 LDR X0, [X0 + 0xCE0]
	0x039AFF84 BL 0x1C16CF4
	0x039AFF88 ADRP X0, 0x744000
	0x039AFF8C LDR X0, [X0 + 0x598]
	0x039AFF90 BL 0x1C16CF4
	0x039AFF94 MOVZ W8, 0x1
	0x039AFF98 STRB W8, [X22 + 0xC2A]
	0x039AFF9C LDR X8, [X21]
	0x039AFFA0 LDR X0, [X20]
	0x039AFFA4 LDR X8, [X8 + 0xB8]
	0x039AFFA8 LDR W9, [X0 + 0xE0]
	0x039AFFAC LDR X20, [X8]
	0x039AFFB0 CBNZ W9, 0x39AFFB8
	0x039AFFB4 BL 0x1C16DFC
	0x039AFFB8 MOV X0, X20
	0x039AFFBC MOV X1, X31
	0x039AFFC0 MOV X2, X31
	0x039AFFC4 BL 0x3C3883C
	0x039AFFC8 TBZ X0, 0x0, 0x39AFFDC
	0x039AFFCC LDP X20, X19, [X31 + 0x20]
	0x039AFFD0 LDP X22, X21, [X31 + 0x10]
	0x039AFFD4 LDR X30, [X31], #0x30
	0x039AFFD8 RET
	0x039AFFDC LDR X8, [X21]
	0x039AFFE0 LDR X8, [X8 + 0xB8]
	0x039AFFE4 LDR X0, [X8]
	0x039AFFE8 CBZ X0, 0x39B0010
	0x039AFFEC TBZ X19, 0x0, 0x39B0000
	0x039AFFF0 LDP X20, X19, [X31 + 0x20]
	0x039AFFF4 LDP X22, X21, [X31 + 0x10]
	0x039AFFF8 LDR X30, [X31], #0x30
	0x039AFFFC B 0x39B0014
	0x039B0000 LDP X20, X19, [X31 + 0x20]
	0x039B0004 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xA33000
	012 Move X23, 0x7A3000
	013 Move W8, [X20+3091]
	014 Move X23, [X23+3160]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {46}
	020 Move X0, 0x746000
	021 Move X0, [X0+88]
	022 Call 0x1C17CF4
	023 Move X0, 0x746000
	024 Move X0, [X0+3056]
	025 Call 0x1C17CF4
	026 Move X0, 0x7A3000
	027 Move X0, [X0+3168]
	028 Call 0x1C17CF4
	029 Move X0, 0x7A3000
	030 Move X0, [X0+3176]
	031 Call 0x1C17CF4
	032 Move X0, 0x7A3000
	033 Move X0, [X0+3184]
	034 Call 0x1C17CF4
	035 Move X0, 0x746000
	036 Move X0, [X0+3672]
	037 Call 0x1C17CF4
	038 Move X0, 0x7A3000
	039 Move X0, [X0+3192]
	040 Call 0x1C17CF4
	041 Move X0, 0x7A3000
	042 Move X0, [X0+3160]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+3091], W8
	046 Move X0, [X23]
	047 Move X20, [X19+96]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X23]
	053 Move X8, [X0+184]
	054 Move X27, 0x7A3000
	055 Move X26, 0x746000
	056 Move X25, 0x746000
	057 Move X24, 0x746000
	058 Move X21, [X8+8]
	059 Move X27, [X27+3176]
	060 Move X26, [X26+3056]
	061 Move X25, [X25+88]
	062 Move X24, [X24+3672]
	063 Compare X21, 0
	064 JumpIfNotEqual {86}
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {70}
	068 Call 0x1C17DFC
	069 Move X0, [X23]
	070 Move X9, 0x7A3000
	071 Move X8, [X0+184]
	072 Move X9, [X9+3184]
	073 Move X22, [X8]
	074 Move X0, [X9]
	075 Call 0x1C17F10
	076 Move X8, 0x7A3000
	077 Move X8, [X8+3192]
	078 Move X1, X22
	079 Move X3, X31
	080 Move X21, X0
	081 Move X2, [X8]
	082 Call Func`2<Object, Object>..ctor, X0, X1, X2
	083 Move X8, [X23]
	084 Move X8, [X8+184]
	085 Move [X8+8], X21
	086 Move X2, [X27]
	087 Move X0, X20
	088 Move X1, X21
	089 Call Enumerable.Select, X0, X1
	090 Move X1, [X26]
	091 Move X20, X0
	092 Call Enumerable.Distinct, X0
	093 Move X1, [X25]
	094 Call Enumerable.Count, X0
	095 Move X8, [X24]
	096 Move W1, W0
	097 Move X0, X8
	098 Call 0x1C17D6C
	099 Move [X19+112], X0
	100 Compare X0, 0
	101 JumpIfEqual {147}
	102 Move W8, [X0+24]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X25, 0x7A3000
	105 Move X25, [X25+3168]
	106 Move W21, W31
	107 Move X22, X31
	108 Move X24, X31
	109 Move X2, [X25]
	110 Move X0, X20
	111 Move W1, W21
	112 Call Enumerable.ElementAt, X0, X1
	113 Move X23, X0
	114 Move X0, X22
	115 Move X1, X23
	116 Move X2, X31
	117 Call String.op_Equality, X0, X1
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {124}
	122 Move X2, [X25]
	123 Add W21, W21, 1
	124 Move X9, [X19+112]
	125 Move X22, X23
	126 Compare X9, 0
	127 JumpIfEqual {147}
	128 Move W8, [X9+24]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Add X9, X9, X24
	131 Add X24, X24, 1
	132 Add W10, W21, 1
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move [X9+32], W21
	135 Move W21, W10
	136 Move X20, [X31+64]
	137 Move X19, [X31+72]
	138 Move X22, [X31+48]
	139 Move X21, [X31+56]
	140 Move X24, [X31+32]
	141 Move X23, [X31+40]
	142 Move X26, [X31+16]
	143 Move X25, [X31+24]
	144 Move X30, [X31+80]
	145 Move X27, [X31+88]
	146 Return 
	147 Call 0x1C17F20
	148 Call 0x1C17F28

Method: System.Void SetValue(System.Int32 value)

Disassembly:
	0x039B0008 LDR X30, [X31], #0x30
	0x039B000C B 0x39B01EC
	0x039B0010 BL 0x1C16F20
	0x039B0014 STR X30, [X31 - 0x30]!
	0x039B0018 STP X22, X21, [X31 + 0x10]
	0x039B001C STP X20, X19, [X31 + 0x20]
	0x039B0020 ADRP X20, 0xA31000
	0x039B0024 ADRP X22, 0x743000
	0x039B0028 LDRB W8, [X20 + 0xC2B]
	0x039B002C LDR X22, [X22 + 0x598]
	0x039B0030 MOV X19, X0
	0x039B0034 TBNZ X8, 0x0, 0x39B00A0
	0x039B0038 ADRP X0, 0x744000
	0x039B003C LDR X0, [X0 + 0xE70]
	0x039B0040 BL 0x1C16CF4
	0x039B0044 ADRP X0, 0x7A1000
	0x039B0048 LDR X0, [X0 + 0xCF8]
	0x039B004C BL 0x1C16CF4
	0x039B0050 ADRP X0, 0x7A1000
	0x039B0054 LDR X0, [X0 + 0xD00]
	0x039B0058 BL 0x1C16CF4
	0x039B005C ADRP X0, 0x743000
	0x039B0060 LDR X0, [X0 + 0xA28]
	0x039B0064 BL 0x1C16CF4
	0x039B0068 ADRP X0, 0x7A1000
	0x039B006C LDR X0, [X0 + 0xD08]
	0x039B0070 BL 0x1C16CF4
	0x039B0074 ADRP X0, 0x743000
	0x039B0078 LDR X0, [X0 + 0x598]
	0x039B007C BL 0x1C16CF4
	0x039B0080 ADRP X0, 0x7A1000
	0x039B0084 LDR X0, [X0 + 0xD10]
	0x039B0088 BL 0x1C16CF4
	0x039B008C ADRP X0, 0x7A1000
	0x039B0090 LDR X0, [X0 + 0xD18]
	0x039B0094 BL 0x1C16CF4
	0x039B0098 MOVZ W8, 0x1
	0x039B009C STRB W8, [X20 + 0xC2B]
	0x039B00A0 LDR X0, [X22]
	0x039B00A4 ADRP X21, 0x7A1000
	0x039B00A8 ADRP X20, 0x7A1000
	0x039B00AC LDR W8, [X0 + 0xE0]
	0x039B00B0 LDR X21, [X21 + 0xD08]
	0x039B00B4 LDR X20, [X20 + 0xCF8]
	0x039B00B8 CBNZ W8, 0x39B00C0
	0x039B00BC BL 0x1C16DFC
	0x039B00C0 LDR X0, [X21]
	0x039B00C4 BL 0x222D200
	0x039B00C8 LDR X1, [X20]
	0x039B00CC MOV X20, X0
	0x039B00D0 MOV X0, X19
	0x039B00D4 BL 0x21A3894
	0x039B00D8 CBZ X20, 0x39B01E8
	0x039B00DC LDR X8, [X20 + 0x18]
	0x039B00E0 CMP W8, 0x2
	0x039B00E4 B.LT 0x39B0154
	0x039B00E8 MOV X21, X0
	0x039B00EC LDR X0, [X22]
	0x039B00F0 LDR W8, [X0 + 0xE0]
	0x039B00F4 CBNZ W8, 0x39B00FC
	0x039B00F8 BL 0x1C16DFC
	0x039B00FC MOV X0, X21
	0x039B0100 MOV X1, X31
	0x039B0104 MOV X2, X31
	0x039B0108 BL 0x3C354F8
	0x039B010C TBZ X0, 0x0, 0x39B0150
	0x039B0110 ADRP X8, 0x743000
	0x039B0114 LDR X8, [X8 + 0xA28]
	0x039B0118 LDR X0, [X8]
	0x039B011C LDR W8, [X0 + 0xE0]
	0x039B0120 CBNZ W8, 0x39B0128
	0x039B0124 BL 0x1C16DFC
	0x039B0128 ADRP X8, 0x7A1000
	0x039B012C LDR X8, [X8 + 0xD10]
	0x039B0130 MOV X1, X31
	0x039B0134 LDR X0, [X8]
	0x039B0138 BL 0x3C06048
	0x039B013C MOV X0, X19
	0x039B0140 LDP X20, X19, [X31 + 0x20]
	0x039B0144 LDP X22, X21, [X31 + 0x10]
	0x039B0148 LDR X30, [X31], #0x30
	0x039B014C B 0x39B01EC
	0x039B0150 LDR X8, [X20 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA32000
	007 Move X21, 0x79F000
	008 Move W8, [X22+3092]
	009 Move X21, [X21+3328]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x79F000
	017 Move X0, [X0+3328]
	018 Call 0x1C17CF4
	019 Move X0, 0x7A2000
	020 Move X0, [X0+3200]
	021 Call 0x1C17CF4
	022 Move X0, 0x7A2000
	023 Move X0, [X0+3208]
	024 Call 0x1C17CF4
	025 Move X0, 0x7A2000
	026 Move X0, [X0+3216]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+3092], W8
	030 Move X8, [X19]
	031 Move X0, X19
	032 Move W1, W20
	033 Move X9, [X8+552]
	034 Move X2, [X8+560]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move [X31+12], W0
	037 Move W1, W0
	038 Move X0, [X19+104]
	039 Move X2, [X21]
	040 Call Array.IndexOf, X0, X1
	041 Move X8, [X19+128]
	042 Compare X8, 0
	043 JumpIfEqual {100}
	044 Move W20, W0
	045 Move X9, [X8+24]
	046 Move X0, [X8+64]
	047 Move X1, [X8+40]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X8, [X19+72]
	051 Compare X8, 0
	052 JumpIfEqual {100}
	053 Move X9, [X8+24]
	054 Move X0, [X8+64]
	055 Move X1, [X8+40]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move W1, W0
	058 Add X0, X31, 12
	059 Move X2, X31
	060 Call Int32.Equals, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {94}
	065 Move X8, [X19+80]
	066 Compare X8, 0
	067 JumpIfEqual {100}
	068 Move W1, [X31+12]
	069 Move X9, [X8+24]
	070 Move X0, [X8+64]
	071 Move X2, [X8+40]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move X8, [X19+88]
	074 Compare X8, 0
	075 JumpIfEqual {82}
	076 Move W2, [X31+12]
	077 Move X9, [X8+24]
	078 Move X0, [X8+64]
	079 Move X3, [X8+40]
	080 Move X1, X19
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move TEMP, X20
	083 And TEMP, TEMP, -2147483648
	084 Compare TEMP, -2147483648
	085 JumpIfEqual {94}
	086 Move X8, [X19+136]
	087 Compare X8, 0
	088 JumpIfEqual {100}
	089 Move X9, [X8+24]
	090 Move X0, [X8+64]
	091 Move X2, [X8+40]
	092 Move W1, W20
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X30, [X31+48]
	099 Return 
	100 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0399D0B4 STP X30, X21, [X31 + 0x20]
	0x0399D0B8 STP X20, X19, [X31 + 0x30]
	0x0399D0BC ADRP X20, 0xA44000
	0x0399D0C0 ADRP X21, 0x7B3000
	0x0399D0C4 LDRB W8, [X20 + 0xB58]
	0x0399D0C8 LDR X21, [X21 + 0x778]
	0x0399D0CC MOV X19, X0
	0x0399D0D0 TBNZ X8, 0x0, 0x399D0E8
	0x0399D0D4 ADRP X0, 0x7B3000
	0x0399D0D8 LDR X0, [X0 + 0x778]
	0x0399D0DC BL 0x1C16CF4
	0x0399D0E0 MOVZ W8, 0x1
	0x0399D0E4 STRB W8, [X20 + 0xB58]
	0x0399D0E8 LDR X0, [X21]
	0x0399D0EC LDR W8, [X0 + 0xE0]
	0x0399D0F0 CBNZ W8, 0x399D0F8
	0x0399D0F4 BL 0x1C16DFC
	0x0399D0F8 BL 0x399C120
	0x0399D0FC CBZ X0, 0x399D468
	0x0399D100 BL 0x399D46C
	0x0399D104 TBZ X0, 0x0, 0x399D11C
	0x0399D108 LDP X20, X19, [X31 + 0x30]
	0x0399D10C LDP X30, X21, [X31 + 0x20]
	0x0399D110 LDP D9, D8, [X31 + 0x10]
	0x0399D114 LDP D11, D10, [X31], #0x40
	0x0399D118 RET
	0x0399D11C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA45000
	006 Move X20, 0x7B5000
	007 Move W8, [X21+3093]
	008 Move X20, [X20+296]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x7B5000
	015 Move X0, [X0+304]
	016 Call 0x1C17CF4
	017 Move X0, 0x7B5000
	018 Move X0, [X0+296]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3093], W8
	022 Move X0, [X20]
	023 Move X20, 0x7B5000
	024 Move W8, [X0+224]
	025 Move X20, [X20+304]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X1, [X20]
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x2BAB280, X0
	036 Return 

