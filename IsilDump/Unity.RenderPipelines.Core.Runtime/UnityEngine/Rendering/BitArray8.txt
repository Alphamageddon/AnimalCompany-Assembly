Type: UnityEngine.Rendering.BitArray8

Method: System.UInt32 get_capacity()

Disassembly:
	0x039DFEC4 LDR X8, [X21]
	0x039DFEC8 LDR X2, [X22]

ISIL:
	001 Move W0, 8
	002 Return X0

Method: System.Boolean get_allFalse()

Disassembly:
	0x039DFECC MOV X1, X0
	0x039DFED0 MOV X3, X31
	0x039DFED4 MOV X0, X8
	0x039DFED8 BL 0x32274B8

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_allTrue()

Disassembly:
	0x039DFEDC LDR X8, [X20]
	0x039DFEE0 LDR X20, [X19]
	0x039DFEE4 MOV X19, X0
	0x039DFEE8 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.String get_humanizedData()

Disassembly:
	0x039DFEEC CBNZ W9, 0x39DFEF8
	0x039DFEF0 MOV X0, X8
	0x039DFEF4 BL 0x1C16DFC
	0x039DFEF8 MOVZ W1, 0x2
	0x039DFEFC MOV X0, X20
	0x039DFF00 MOV X2, X31
	0x039DFF04 BL 0x3322520
	0x039DFF08 MOV X1, X0
	0x039DFF0C MOV X0, X19
	0x039DFF10 MOV X2, X31
	0x039DFF14 BL 0x321EFD0
	0x039DFF18 CBZ X0, 0x39DFF94
	0x039DFF1C ADRP X19, 0x71C000
	0x039DFF20 ADRP X20, 0x774000
	0x039DFF24 ADRP X21, 0x774000
	0x039DFF28 LDR X19, [X19 + 0x600]
	0x039DFF2C LDR X20, [X20 + 0x340]
	0x039DFF30 LDR X21, [X21 + 0x338]
	0x039DFF34 MOVZ W1, 0x20
	0x039DFF38 MOVZ W2, 0x30
	0x039DFF3C MOV X3, X31
	0x039DFF40 BL 0x32296D0
	0x039DFF44 LDR X8, [X19]
	0x039DFF48 MOV X19, X0
	0x039DFF4C LDR W9, [X8 + 0xE0]
	0x039DFF50 CBNZ W9, 0x39DFF5C
	0x039DFF54 MOV X0, X8
	0x039DFF58 BL 0x1C16DFC
	0x039DFF5C LDR X1, [X20]
	0x039DFF60 LDR X2, [X21]
	0x039DFF64 MOV X0, X19
	0x039DFF68 MOV X3, X31
	0x039DFF6C BL 0x3632D08
	0x039DFF70 CBZ X0, 0x39DFF94
	0x039DFF74 MOVZ W1, 0x2E
	0x039DFF78 MOV X2, X31
	0x039DFF7C BL 0x322BC38
	0x039DFF80 LDP X20, X19, [X31 + 0x30]
	0x039DFF84 LDP X22, X21, [X31 + 0x20]
	0x039DFF88 LDP X30, X23, [X31 + 0x10]
	0x039DFF8C ADD X31, X31, 0x40
	0x039DFF90 RET
	0x039DFF94 BL 0x1C16F20
	0x039DFF98 LDR X8, [X0]
	0x039DFF9C LSRV X8, X8, X1
	0x039DFFA0 AND W0, W8, 0x1
	0x039DFFA4 RET
	0x039DFFA8 LSRV X8, X1, X0
	0x039DFFAC AND W0, W8, 0x1
	0x039DFFB0 RET
	0x039DFFB4 LDR X8, [X0]
	0x039DFFB8 MOVZ W9, 0x1
	0x039DFFBC LSLV X9, X9, X1
	0x039DFFC0 ANDS W31, W2, 0x1
	0x039DFFC4 ORR X10, X8, X9, 0x0
	0x039DFFC8 BIC X8, X8, X9, 0x0
	0x039DFFCC CSEL X8, X10, X8, NE
	0x039DFFD0 STR X8, [X0]
	0x039DFFD4 RET
	0x039DFFD8 LDR X8, [X1]
	0x039DFFDC MOVZ W9, 0x1
	0x039DFFE0 LSLV X9, X9, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xA03000
	009 Move X21, 0x775000
	010 Move X22, 0x720000
	011 Move X20, 0x71E000
	012 Move W8, [X23+3488]
	013 Move X21, [X21+792]
	014 Move X22, [X22+1752]
	015 Move X20, [X20+2536]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x71E000
	022 Move X0, [X0+2536]
	023 Call 0x1C17CF4
	024 Move X0, 0x720000
	025 Move X0, [X0+1752]
	026 Call 0x1C17CF4
	027 Move X0, 0x775000
	028 Move X0, [X0+792]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+3488], W8
	032 Move W8, 8
	033 Add X0, X31, 12
	034 Move X1, X31
	035 Move [X31+12], W8
	036 Call UInt32.ToString, X0
	037 Move X8, [X21]
	038 Move X2, [X22]
	039 Move X1, X0
	040 Move X3, X31
	041 Move X0, X8
	042 Call String.Concat, X0, X1, X2
	043 Move X8, [X20]
	044 Move W20, [X19]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move W1, 2
	052 Move W0, W20
	053 Move X2, X31
	054 Call Convert.ToString, X0, X1
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call String.Format, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {73}
	061 Move W1, 32
	062 Move W2, 48
	063 Move X3, X31
	064 Call String.Replace, X0, X1, X2
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X22, [X31+32]
	068 Move X21, [X31+40]
	069 Move X30, [X31+16]
	070 Move X23, [X31+24]
	071 Add X31, X31, 64
	072 Return X0
	073 Call 0x1C17F20

Method: System.Boolean get_Item(System.UInt32 index)

Disassembly:
	0x039DFFE4 ANDS W31, W2, 0x1
	0x039DFFE8 ORR X10, X8, X9, 0x0
	0x039DFFEC BIC X8, X8, X9, 0x0
	0x039DFFF0 CSEL X8, X10, X8, NE

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction LSRV not yet implemented."
	003 And W0, W8, 1
	004 Return X0

Method: System.Void set_Item(System.UInt32 index, System.Boolean value)

Disassembly:
	0x039E0004 STP X30, X23, [X31 - 0x30]!
	0x039E0008 STP X22, X21, [X31 + 0x10]
	0x039E000C STP X20, X19, [X31 + 0x20]
	0x039E0010 ADRP X21, 0xA01000
	0x039E0014 LDRB W8, [X21 + 0xDB4]
	0x039E0018 MOV X19, X1
	0x039E001C MOV X20, X0
	0x039E0020 TBNZ X8, 0x0, 0x39E0044
	0x039E0024 ADRP X0, 0x773000

ISIL:
	001 Move W8, [X0]
	002 Move W9, 1
	003 NotImplemented "Instruction LSLV not yet implemented."
	004 And W31, W2, 1
	005 Or W10, W9, W8
	006 NotImplemented "Instruction BIC not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move [X0], W8
	009 Return 

Method: System.Void .ctor(System.Byte initValue)

Disassembly:
	0x039E004C ADRP X8, 0x773000
	0x039E0050 LDR X8, [X8 + 0x320]

ISIL:
	001 Move [X0], W1
	002 Return 

Method: System.Void .ctor(System.Collections.Generic.IEnumerable`1<System.UInt32> bitIndexTrue)

Disassembly:
	0x039E0054 MOV X0, X19
	0x039E0058 LDR X1, [X8]
	0x039E005C BL 0x21BE3F4
	0x039E0060 SUBS W21, W0, 0x1
	0x039E0064 B.MI 0x39E00A4
	0x039E0068 ADRP X22, 0x773000
	0x039E006C LDR X22, [X22 + 0x328]
	0x039E0070 MOVZ W23, 0x1
	0x039E0074 LDR X2, [X22]
	0x039E0078 MOV X0, X19
	0x039E007C MOV W1, W21
	0x039E0080 BL 0x21C0E94
	0x039E0084 CMP W0, 0x3F
	0x039E0088 B.HI 0x39E009C
	0x039E008C LDR X8, [X20]
	0x039E0090 LSLV X9, X23, X0
	0x039E0094 ORR X8, X8, X9, 0x0
	0x039E0098 STR X8, [X20]
	0x039E009C SUBS W21, W21, 0x1
	0x039E00A0 B.PL 0x39E0074
	0x039E00A4 LDP X20, X19, [X31 + 0x20]
	0x039E00A8 LDP X22, X21, [X31 + 0x10]
	0x039E00AC LDP X30, X23, [X31], #0x30
	0x039E00B0 RET
	0x039E00B4 ORN X0, X31, X0, 0x0
	0x039E00B8 RET
	0x039E00BC ORR X0, X1, X0, 0x0
	0x039E00C0 RET
	0x039E00C4 AND X0, X1, X0, 0x0
	0x039E00C8 RET
	0x039E00CC SUB X31, X31, 0x30
	0x039E00D0 STP X30, X21, [X31 + 0x10]
	0x039E00D4 STP X20, X19, [X31 + 0x20]
	0x039E00D8 ADRP X21, 0xA01000
	0x039E00DC LDRB W8, [X21 + 0xDB5]
	0x039E00E0 MOV X19, X1
	0x039E00E4 MOV X20, X0
	0x039E00E8 TBNZ X8, 0x0, 0x39E0100
	0x039E00EC ADRP X0, 0x773000
	0x039E00F0 LDR X0, [X0 + 0x358]
	0x039E00F4 BL 0x1C16CF4
	0x039E00F8 MOVZ W8, 0x1
	0x039E00FC STRB W8, [X21 + 0xDB5]
	0x039E0100 CBZ X19, 0x39E0158

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xA02000
	008 Move W8, [X21+3489]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x774000
	016 Move X0, [X0+800]
	017 Call 0x1C17CF4
	018 Move X0, 0x774000
	019 Move X0, [X0+808]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3489], W8
	023 Move [X20], W31
	024 Compare X19, 0
	025 JumpIfEqual {45}
	026 Move X8, 0x774000
	027 Move X8, [X8+800]
	028 Move X0, X19
	029 Move X1, [X8]
	030 Call Enumerable.Count, X0
	031 Subtract W21, W0, 1
	032 Move X22, 0x774000
	033 Move X22, [X22+808]
	034 Move W23, 1
	035 Move X2, [X22]
	036 Move X0, X19
	037 Move W1, W21
	038 Call Enumerable.ElementAt, X0, X1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X20]
	041 NotImplemented "Instruction LSLV not yet implemented."
	042 Or W8, W8, W9
	043 Move [X20], W8
	044 Subtract W21, W21, 1
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Return 

Method: UnityEngine.Rendering.BitArray8 op_OnesComplement(UnityEngine.Rendering.BitArray8 a)

Disassembly:
	0x039E0104 ADRP X21, 0x773000
	0x039E0108 LDR X21, [X21 + 0x358]
	0x039E010C LDR X8, [X19]

ISIL:
	001 NotImplemented "Instruction ORN not yet implemented."
	002 And X0, X8, 255
	003 Return X0

Method: UnityEngine.Rendering.BitArray8 op_BitwiseOr(UnityEngine.Rendering.BitArray8 a, UnityEngine.Rendering.BitArray8 b)

Disassembly:
	0x039E0110 LDR X1, [X21]
	0x039E0114 LDR X8, [X8 + 0x40]
	0x039E0118 LDR X9, [X1 + 0x40]

ISIL:
	001 Or W8, W1, W0
	002 And X0, X8, 255
	003 Return X0

Method: UnityEngine.Rendering.BitArray8 op_BitwiseAnd(UnityEngine.Rendering.BitArray8 a, UnityEngine.Rendering.BitArray8 b)

Disassembly:
	0x039E011C CMP X8, X9
	0x039E0120 B.NE 0x39E015C
	0x039E0124 LDR X20, [X20]

ISIL:
	001 And W8, W0, W1
	002 And X0, X8, 255
	003 Return X0

Method: UnityEngine.Rendering.IBitArray BitAnd(UnityEngine.Rendering.IBitArray other)

Disassembly:
	0x039E0128 MOV X0, X19
	0x039E012C BL 0x1C16E08
	0x039E0130 LDR X8, [X0]
	0x039E0134 LDR X0, [X21]
	0x039E0138 ADD X1, X31, 0x8
	0x039E013C AND X8, X8, X20, 0x0
	0x039E0140 STR X8, [X31 + 0x8]
	0x039E0144 BL 0x1C16E04
	0x039E0148 LDP X20, X19, [X31 + 0x20]
	0x039E014C LDP X30, X21, [X31 + 0x10]
	0x039E0150 ADD X31, X31, 0x30
	0x039E0154 RET
	0x039E0158 BL 0x1C16F20
	0x039E015C MOV X0, X19
	0x039E0160 BL 0x1C171E0
	0x039E0164 SUB X31, X31, 0x30
	0x039E0168 STP X30, X21, [X31 + 0x10]
	0x039E016C STP X20, X19, [X31 + 0x20]
	0x039E0170 ADRP X21, 0xA01000
	0x039E0174 LDRB W8, [X21 + 0xDB6]
	0x039E0178 MOV X19, X1
	0x039E017C MOV X20, X0
	0x039E0180 TBNZ X8, 0x0, 0x39E0198
	0x039E0184 ADRP X0, 0x773000
	0x039E0188 LDR X0, [X0 + 0x358]
	0x039E018C BL 0x1C16CF4
	0x039E0190 MOVZ W8, 0x1
	0x039E0194 STRB W8, [X21 + 0xDB6]
	0x039E0198 CBZ X19, 0x39E01F0
	0x039E019C ADRP X21, 0x773000
	0x039E01A0 LDR X21, [X21 + 0x358]
	0x039E01A4 LDR X8, [X19]
	0x039E01A8 LDR X1, [X21]
	0x039E01AC LDR X8, [X8 + 0x40]
	0x039E01B0 LDR X9, [X1 + 0x40]
	0x039E01B4 CMP X8, X9
	0x039E01B8 B.NE 0x39E01F4
	0x039E01BC LDR X20, [X20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA02000
	007 Move W8, [X21+3490]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x774000
	015 Move X0, [X0+816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3490], W8
	019 Compare X19, 0
	020 JumpIfEqual {43}
	021 Move X21, 0x774000
	022 Move X21, [X21+816]
	023 Move X8, [X19]
	024 Move X1, [X21]
	025 Move X8, [X8+64]
	026 Move X9, [X1+64]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W20, [X20]
	029 Move X0, X19
	030 Call 0x1C17E08
	031 Move W8, [X0]
	032 Move X0, [X21]
	033 Add X1, X31, 8
	034 And W8, W8, W20
	035 Move [X31+8], W8
	036 Call 0x1C17E04
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Add X31, X31, 48
	042 Return X0
	043 Call 0x1C17F20
	044 Move X0, X19
	045 Call 0x1C181E0

Method: UnityEngine.Rendering.IBitArray BitOr(UnityEngine.Rendering.IBitArray other)

Disassembly:
	0x039E01C0 MOV X0, X19
	0x039E01C4 BL 0x1C16E08
	0x039E01C8 LDR X8, [X0]
	0x039E01CC LDR X0, [X21]
	0x039E01D0 ADD X1, X31, 0x8
	0x039E01D4 ORR X8, X8, X20, 0x0
	0x039E01D8 STR X8, [X31 + 0x8]
	0x039E01DC BL 0x1C16E04
	0x039E01E0 LDP X20, X19, [X31 + 0x20]
	0x039E01E4 LDP X30, X21, [X31 + 0x10]
	0x039E01E8 ADD X31, X31, 0x30
	0x039E01EC RET
	0x039E01F0 BL 0x1C16F20
	0x039E01F4 MOV X0, X19
	0x039E01F8 BL 0x1C171E0
	0x039E01FC SUB X31, X31, 0x30
	0x039E0200 STP X30, X21, [X31 + 0x10]
	0x039E0204 STP X20, X19, [X31 + 0x20]
	0x039E0208 ADRP X21, 0xA01000
	0x039E020C ADRP X20, 0x773000
	0x039E0210 LDRB W8, [X21 + 0xDB7]
	0x039E0214 LDR X20, [X20 + 0x358]
	0x039E0218 MOV X19, X0
	0x039E021C TBNZ X8, 0x0, 0x39E0234
	0x039E0220 ADRP X0, 0x773000
	0x039E0224 LDR X0, [X0 + 0x358]
	0x039E0228 BL 0x1C16CF4
	0x039E022C MOVZ W8, 0x1
	0x039E0230 STRB W8, [X21 + 0xDB7]
	0x039E0234 LDR X8, [X19]
	0x039E0238 LDR X0, [X20]
	0x039E023C ADD X1, X31, 0x8
	0x039E0240 ORN X8, X31, X8, 0x0
	0x039E0244 STR X8, [X31 + 0x8]
	0x039E0248 BL 0x1C16E04
	0x039E024C LDP X20, X19, [X31 + 0x20]
	0x039E0250 LDP X30, X21, [X31 + 0x10]
	0x039E0254 ADD X31, X31, 0x30

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA02000
	007 Move W8, [X21+3491]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x774000
	015 Move X0, [X0+816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3491], W8
	019 Compare X19, 0
	020 JumpIfEqual {43}
	021 Move X21, 0x774000
	022 Move X21, [X21+816]
	023 Move X8, [X19]
	024 Move X1, [X21]
	025 Move X8, [X8+64]
	026 Move X9, [X1+64]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W20, [X20]
	029 Move X0, X19
	030 Call 0x1C17E08
	031 Move W8, [X0]
	032 Move X0, [X21]
	033 Add X1, X31, 8
	034 Or W8, W8, W20
	035 Move [X31+8], W8
	036 Call 0x1C17E04
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Add X31, X31, 48
	042 Return X0
	043 Call 0x1C17F20
	044 Move X0, X19
	045 Call 0x1C181E0

Method: UnityEngine.Rendering.IBitArray BitNot()

Disassembly:
	0x039E0258 RET
	0x039E025C CMP X0, X1
	0x039E0260 CSET W0, EQ
	0x039E0264 RET
	0x039E0268 CMP X0, X1
	0x039E026C CSET W0, NE
	0x039E0270 RET
	0x039E0274 STP X30, X21, [X31 - 0x20]!
	0x039E0278 STP X20, X19, [X31 + 0x10]
	0x039E027C ADRP X21, 0xA01000
	0x039E0280 LDRB W8, [X21 + 0xDB8]
	0x039E0284 MOV X20, X1
	0x039E0288 MOV X19, X0
	0x039E028C TBNZ X8, 0x0, 0x39E02A4
	0x039E0290 ADRP X0, 0x773000
	0x039E0294 LDR X0, [X0 + 0x358]
	0x039E0298 BL 0x1C16CF4
	0x039E029C MOVZ W8, 0x1
	0x039E02A0 STRB W8, [X21 + 0xDB8]
	0x039E02A4 CBZ X20, 0x39E02C0
	0x039E02A8 ADRP X8, 0x773000
	0x039E02AC LDR X8, [X8 + 0x358]
	0x039E02B0 LDR X9, [X20]
	0x039E02B4 LDR X8, [X8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA02000
	007 Move X20, 0x774000
	008 Move W8, [X21+3492]
	009 Move X20, [X20+816]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x774000
	016 Move X0, [X0+816]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3492], W8
	020 Move W8, [X19]
	021 Move X0, [X20]
	022 Add X1, X31, 8
	023 NotImplemented "Instruction ORN not yet implemented."
	024 Move [X31+8], W8
	025 Call 0x1C17E04
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Add X31, X31, 48
	031 Return X0

Method: System.Boolean op_Equality(UnityEngine.Rendering.BitArray8 a, UnityEngine.Rendering.BitArray8 b)

Disassembly:
	0x039E02B8 CMP X9, X8
	0x039E02BC B.EQ 0x39E02C8
	0x039E02C0 MOV W0, W31
	0x039E02C4 B 0x39E02E0

ISIL:
	001 Xor W8, W1, W0
	002 And X31, X8, 255
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Rendering.BitArray8 a, UnityEngine.Rendering.BitArray8 b)

Disassembly:
	0x039E02C8 MOV X0, X20
	0x039E02CC BL 0x1C16E08
	0x039E02D0 LDR X8, [X0]
	0x039E02D4 LDR X9, [X19]

ISIL:
	001 Xor W8, W1, W0
	002 And X31, X8, 255
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x039E02D8 CMP X8, X9
	0x039E02DC CSET W0, EQ
	0x039E02E0 LDP X20, X19, [X31 + 0x10]
	0x039E02E4 LDP X30, X21, [X31], #0x20
	0x039E02E8 RET
	0x039E02EC STR X30, [X31 - 0x10]!
	0x039E02F0 MOV X1, X31
	0x039E02F4 BL 0x339A95C
	0x039E02F8 MOVZ W8, 0x156D
	0x039E02FC MOVK W8, 0x69700000
	0x039E0300 ADD W0, W0, W8
	0x039E0304 LDR X30, [X31], #0x10
	0x039E0308 RET
	0x039E030C MOVZ W0, 0x80
	0x039E0310 RET
	0x039E0314 LDR X8, [X0]
	0x039E0318 CBZ X8, 0x39E0324
	0x039E031C MOV W0, W31
	0x039E0320 RET
	0x039E0324 LDR X8, [X0 + 0x8]
	0x039E0328 CMP X8, 0x0
	0x039E032C CSET W0, EQ
	0x039E0330 RET
	0x039E0334 LDR X8, [X0]
	0x039E0338 ADDS X31, X8, 0x1
	0x039E033C B.EQ 0x39E0348
	0x039E0340 MOV W0, W31
	0x039E0344 RET
	0x039E0348 LDR X8, [X0 + 0x8]
	0x039E034C ADDS X31, X8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA02000
	006 Move W8, [X21+3493]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x774000
	014 Move X0, [X0+816]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3493], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x774000
	021 Move X8, [X8+816]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X0, X20
	027 Call 0x1C17E08
	028 Move W8, [X0]
	029 Move W9, [X19]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x039E0350 CSET W0, EQ
	0x039E0354 RET
	0x039E0358 STR X30, [X31 - 0x40]!
	0x039E035C STP X24, X23, [X31 + 0x10]
	0x039E0360 STP X22, X21, [X31 + 0x20]
	0x039E0364 STP X20, X19, [X31 + 0x30]
	0x039E0368 ADRP X21, 0xA01000
	0x039E036C ADRP X22, 0x773000

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X31
	003 Call Byte.GetHashCode, X0
	004 Move W8, 0x156D
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 Add W0, W0, W8
	007 Move X30, [X31+16]
	008 Return X0

