Type: UnityEngine.Rendering.ProbeReferenceVolume/<>c__DisplayClass171_0

Method: System.Void .ctor()

Disassembly:
	0x039C5DEC ADRP X0, 0x78C000
	0x039C5DF0 LDR X0, [X0 + 0xF48]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <RegisterDebug>g__RefreshDebug|0(UnityEngine.Rendering.DebugUI/Field`1<T> field, T value)

Disassembly:
	0x022B8D64 STUR X20, [X29 - 0x48]
	0x022B8D68 BL 0x3EB1B10
	0x022B8D6C CMP W22, 0x1
	0x022B8D70 B.LT 0x22B8E40
	0x022B8D74 LDUR X8, [X29 - 0x38]
	0x022B8D78 SXTW X25, W26
	0x022B8D7C SXTW X8, W8
	0x022B8D80 STUR X8, [X29 - 0x30]
	0x022B8D84 SXTW X8, W24
	0x022B8D88 LDP X20, X24, [X29 - 0x28]
	0x022B8D8C MOV W22, W22
	0x022B8D90 STUR X8, [X29 - 0x58]
	0x022B8D94 LDRSW X19, [X21]
	0x022B8D98 LDUR X8, [X29 - 0x28]
	0x022B8D9C CBZ X8, 0x22B8DEC
	0x022B8DA0 LDUR X1, [X29 - 0x48]
	0x022B8DA4 LDUR X2, [X29 - 0x38]
	0x022B8DA8 MOV X0, X28
	0x022B8DAC BL 0x3EB1AC0
	0x022B8DB0 LDR X8, [X24 + 0x38]
	0x022B8DB4 LDR X0, [X8]
	0x022B8DB8 LDRB W9, [X0 + 0x135]
	0x022B8DBC TBNZ X9, 0x0, 0x22B8DC8
	0x022B8DC0 BL 0x1C5C684
	0x022B8DC4 LDR X8, [X24 + 0x38]
	0x022B8DC8 LDR X1, [X8 + 0x18]
	0x022B8DCC LDUR X2, [X29 - 0x40]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+128], X30
	003 Move [X31+136], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Compare X0, 0
	007 JumpIfEqual {37}
	008 Move W1, W31
	009 Move X2, X31
	010 Call ProbeReferenceVolume.UnregisterDebug, X0, X1
	011 Move X0, [X19+16]
	012 NotImplemented "Instruction LDUR not yet implemented."
	013 NotImplemented "Instruction LDUR not yet implemented."
	014 NotImplemented "Instruction LDUR not yet implemented."
	015 NotImplemented "Instruction LDUR not yet implemented."
	016 Move [X31+96], V1
	017 Move [X31+104], V0
	018 Move [X31+64], V3
	019 Move [X31+72], V2
	020 Compare X0, 0
	021 JumpIfEqual {37}
	022 Move V0, [X31+64]
	023 Move V1, [X31+80]
	024 Move V2, [X31+96]
	025 Move V3, [X31+112]
	026 Add X1, X31, 0
	027 Move X2, X31
	028 Move [X31], V0
	029 Move [X31+8], V1
	030 Move [X31+32], V2
	031 Move [X31+40], V3
	032 Call ProbeReferenceVolume.RegisterDebug, X0, X1
	033 Move X30, [X31+128]
	034 Move X19, [X31+136]
	035 Add X31, X31, 144
	036 Return 
	037 Call 0x1C17F20

Method: System.Boolean <RegisterDebug>b__1()

Disassembly:
	0x039C5DF4 BL 0x1C16CF4
	0x039C5DF8 MOVZ W8, 0x1
	0x039C5DFC STRB W8, [X23 + 0xCB9]
	0x039C5E00 LDR X0, [X22]
	0x039C5E04 LDR W8, [X0 + 0xE0]
	0x039C5E08 CBNZ W8, 0x39C5E14
	0x039C5E0C BL 0x1C16DFC
	0x039C5E10 LDR X0, [X22]
	0x039C5E14 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+18]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__2(System.Boolean value)

Disassembly:
	0x039C5E18 LDR X0, [X8 + 0x8]
	0x039C5E1C CBZ X0, 0x39C60A0
	0x039C5E20 MOV X1, X31
	0x039C5E24 BL 0x39B99F4
	0x039C5E28 TBZ X0, 0x0, 0x39C5FAC
	0x039C5E2C LDR X1, [X19 + 0x70]
	0x039C5E30 FMOV S0, 1
	0x039C5E34 FMIN S0, S8, S0
	0x039C5E38 FCMP S8, 0x0
	0x039C5E3C FMOV S1, W31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 And W9, W1, 1
	009 Move [X8+18], W9
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Boolean <RegisterDebug>b__3()

Disassembly:
	0x039C5E40 MOV X0, X21
	0x039C5E44 MOV X2, X31
	0x039C5E48 FCSEL S8, S0, S1, PL
	0x039C5E4C BL 0x321BA08
	0x039C5E50 TBNZ X0, 0x0, 0x39C5E64
	0x039C5E54 MOV X0, X21
	0x039C5E58 MOV X1, X31
	0x039C5E5C BL 0x32277A8
	0x039C5E60 TBZ X0, 0x0, 0x39C5E68

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+17]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__4(System.Boolean value)

Disassembly:
	0x039C5E64 MOV X21, X31
	0x039C5E68 LDR X1, [X19 + 0x78]
	0x039C5E6C CMP X21, 0x0
	0x039C5E70 FMOV S0, W31
	0x039C5E74 MOV X0, X21
	0x039C5E78 MOV X2, X31
	0x039C5E7C FCSEL S8, S0, S8, EQ
	0x039C5E80 BL 0x321BA08
	0x039C5E84 TBZ X0, 0x0, 0x39C5EF8
	0x039C5E88 ADRP X20, 0xA14000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 And W9, W1, 1
	009 Move [X8+17], W9
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Single <RegisterDebug>b__5()

Disassembly:
	0x039C5E8C LDRB W8, [X20 + 0x5AA]
	0x039C5E90 LDR V9, [X19 + 0x80]
	0x039C5E94 CBNZ W8, 0x39C5EAC
	0x039C5E98 ADRP X0, 0x735000
	0x039C5E9C LDR X0, [X0 + 0x4B8]
	0x039C5EA0 BL 0x1C16CF4
	0x039C5EA4 MOVZ W8, 0x1
	0x039C5EA8 STRB W8, [X20 + 0x5AA]
	0x039C5EAC ADRP X8, 0x735000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move V0, [X8+36]
	009 Move X30, [X31+16]
	010 Return V0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__6(System.Single value)

Disassembly:
	0x039C5EB0 LDR X8, [X8 + 0x4B8]
	0x039C5EB4 ADRP X9, 0xFFFFFFFFFD125000
	0x039C5EB8 LDR V0, [X9 + 0x240]
	0x039C5EBC FABS S1, S8
	0x039C5EC0 LDR X8, [X8]
	0x039C5EC4 FABS S2, S9
	0x039C5EC8 FCMP S1, S2
	0x039C5ECC FCSEL S1, S1, S2, GT
	0x039C5ED0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+36], S0
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Boolean <RegisterDebug>b__8()

Disassembly:
	0x039C5ED4 FMUL S0, S1, S0
	0x039C5ED8 FMOV S1, 8
	0x039C5EDC LDR V3, [X8]
	0x039C5EE0 FMUL S1, S3, S1
	0x039C5EE4 FCMP S0, S1
	0x039C5EE8 FCSEL S0, S0, S1, GT
	0x039C5EEC FABD S1, S9, S9
	0x039C5EF0 FCMP S1, S0
	0x039C5EF4 B.MI 0x39C6084

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+16]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__9(System.Boolean value)

Disassembly:
	0x039C5EF8 LDR X1, [X19 + 0x78]
	0x039C5EFC MOV X0, X21
	0x039C5F00 MOV X2, X31
	0x039C5F04 BL 0x3226EF8
	0x039C5F08 MOV W20, W0
	0x039C5F0C STR X21, [X19 + 0x78]
	0x039C5F10 STR S8, [X19 + 0x80]
	0x039C5F14 TBZ X0, 0x0, 0x39C602C
	0x039C5F18 LDR X0, [X22]
	0x039C5F1C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 And W9, W1, 1
	009 Move [X8+16], W9
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Int32 <RegisterDebug>b__10()

Disassembly:
	0x039C5F20 CBNZ W8, 0x39C5F28
	0x039C5F24 BL 0x1C16DFC
	0x039C5F28 LDRB W8, [X23 + 0xCB9]
	0x039C5F2C CBNZ W8, 0x39C5F44
	0x039C5F30 ADRP X0, 0x78C000
	0x039C5F34 LDR X0, [X0 + 0xF48]
	0x039C5F38 BL 0x1C16CF4
	0x039C5F3C MOVZ W8, 0x1
	0x039C5F40 STRB W8, [X23 + 0xCB9]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+28]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__11(System.Int32 value)

Disassembly:
	0x039C5F44 LDR X0, [X22]
	0x039C5F48 LDR W8, [X0 + 0xE0]
	0x039C5F4C CBNZ W8, 0x39C5F58
	0x039C5F50 BL 0x1C16DFC
	0x039C5F54 LDR X0, [X22]
	0x039C5F58 LDR X8, [X0 + 0xB8]
	0x039C5F5C LDR X8, [X8 + 0x8]
	0x039C5F60 CBZ X8, 0x39C60A0
	0x039C5F64 LDR X0, [X8 + 0x188]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+28], W1
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Int32 <RegisterDebug>b__12()

Disassembly:
	0x039C5F68 CBZ X0, 0x39C60A0
	0x039C5F6C ADRP X8, 0x78D000
	0x039C5F70 LDR X8, [X8 + 0x378]
	0x039C5F74 LDR X1, [X8]
	0x039C5F78 ADD X8, X31, 0x8
	0x039C5F7C BL 0x301CB58
	0x039C5F80 ADRP X21, 0x78D000
	0x039C5F84 LDR X21, [X21 + 0x368]
	0x039C5F88 LDR X1, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+28]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__13(System.Int32 value)

Disassembly:
	0x039C5F8C ADD X0, X31, 0x8
	0x039C5F90 BL 0x2BC4350
	0x039C5F94 TBZ X0, 0x0, 0x39C6018
	0x039C5F98 LDR X0, [X31 + 0x18]
	0x039C5F9C CBZ X0, 0x39C609C
	0x039C5FA0 LDP X1, X2, [X19 + 0x70]
	0x039C5FA4 BL 0x39C7FC0
	0x039C5FA8 B 0x39C5F88
	0x039C5FAC ADRP X8, 0x78D000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+28], W1
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Single <RegisterDebug>b__14()

Disassembly:
	0x039C5FB0 LDR X8, [X8 + 0x260]
	0x039C5FB4 LDR X0, [X8]
	0x039C5FB8 LDR W8, [X0 + 0xE0]
	0x039C5FBC CBNZ W8, 0x39C5FC4
	0x039C5FC0 BL 0x1C16DFC
	0x039C5FC4 MOV X0, X31
	0x039C5FC8 BL 0x39B8004
	0x039C5FCC ADRP X8, 0x72E000
	0x039C5FD0 LDR X8, [X8 + 0xA28]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move V0, [X8+32]
	009 Move X30, [X31+16]
	010 Return V0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__15(System.Single value)

Disassembly:
	0x039C5FD4 MOV W19, W0
	0x039C5FD8 LDR X8, [X8]
	0x039C5FDC LDR W9, [X8 + 0xE0]
	0x039C5FE0 CBZ W9, 0x39C5FF4
	0x039C5FE4 TBZ X19, 0x0, 0x39C6000
	0x039C5FE8 ADRP X8, 0x78D000
	0x039C5FEC LDR X8, [X8 + 0xA28]
	0x039C5FF0 B 0x39C6008
	0x039C5FF4 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+32], S0
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Single <RegisterDebug>b__18()

Disassembly:
	0x039C5FF8 BL 0x1C16DFC
	0x039C5FFC TBNZ X19, 0x0, 0x39C5FE8
	0x039C6000 ADRP X8, 0x78C000
	0x039C6004 LDR X8, [X8 + 0xA30]
	0x039C6008 LDR X0, [X8]
	0x039C600C MOV X1, X31
	0x039C6010 BL 0x3C0649C
	0x039C6014 B 0x39C6084
	0x039C6018 ADRP X8, 0x78C000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move V0, [X8+52]
	009 Move X30, [X31+16]
	010 Return V0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__19(System.Single value)

Disassembly:
	0x039C601C LDR X8, [X8 + 0x360]
	0x039C6020 ADD X0, X31, 0x8
	0x039C6024 LDR X1, [X8]
	0x039C6028 BL 0x2BC434C
	0x039C602C LDR X0, [X22]
	0x039C6030 LDR W8, [X0 + 0xE0]
	0x039C6034 CBNZ W8, 0x39C603C
	0x039C6038 BL 0x1C16DFC
	0x039C603C LDRB W8, [X23 + 0xCB9]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+52], S0
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Int32 <RegisterDebug>b__20()

Disassembly:
	0x039C6040 CBNZ W8, 0x39C6058
	0x039C6044 ADRP X0, 0x78B000
	0x039C6048 LDR X0, [X0 + 0xF48]
	0x039C604C BL 0x1C16CF4
	0x039C6050 MOVZ W8, 0x1
	0x039C6054 STRB W8, [X23 + 0xCB9]
	0x039C6058 LDR X0, [X22]
	0x039C605C LDR W8, [X0 + 0xE0]
	0x039C6060 CBNZ W8, 0x39C606C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+44]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__21(System.Int32 v)

Disassembly:
	0x039C6064 BL 0x1C16DFC
	0x039C6068 LDR X0, [X22]
	0x039C606C LDR X8, [X0 + 0xB8]
	0x039C6070 LDR X0, [X8 + 0x8]
	0x039C6074 CBZ X0, 0x39C60A0
	0x039C6078 AND W1, W20, 0x1
	0x039C607C MOV X2, X31
	0x039C6080 BL 0x39C2860
	0x039C6084 LDP X20, X19, [X31 + 0x50]
	0x039C6088 LDP X22, X21, [X31 + 0x40]
	0x039C608C LDP X30, X23, [X31 + 0x30]
	0x039C6090 LDP D9, D8, [X31 + 0x20]
	0x039C6094 ADD X31, X31, 0x60
	0x039C6098 RET
	0x039C609C BL 0x1C16F20
	0x039C60A0 BL 0x1C16F20
	0x039C60A4 B 0x39C60AC
	0x039C60A8 B 0x39C60AC
	0x039C60AC MOV X19, X0
	0x039C60B0 CMP W1, 0x1
	0x039C60B4 B.NE 0x39C60E8
	0x039C60B8 MOV X0, X19
	0x039C60BC BL 0x3EB1AD0
	0x039C60C0 LDR X21, [X0]
	0x039C60C4 BL 0x3EB1AE0
	0x039C60C8 ADRP X8, 0x78C000
	0x039C60CC LDR X8, [X8 + 0x360]
	0x039C60D0 ADD X0, X31, 0x8
	0x039C60D4 LDR X1, [X8]
	0x039C60D8 BL 0x2BC434C
	0x039C60DC CBZ X21, 0x39C602C
	0x039C60E0 MOV X0, X21
	0x039C60E4 BL 0x1C16F18
	0x039C60E8 MOV X21, X31
	0x039C60EC B 0x39C60F4
	0x039C60F0 MOV X19, X0
	0x039C60F4 ADRP X8, 0x78C000
	0x039C60F8 LDR X8, [X8 + 0x360]
	0x039C60FC LDR X1, [X8]
	0x039C6100 ADD X0, X31, 0x8
	0x039C6104 BL 0x2BC434C
	0x039C6108 CBNZ X21, 0x39C6114
	0x039C610C MOV X0, X19
	0x039C6110 BL 0x1D2C690
	0x039C6114 MOV X0, X21
	0x039C6118 BL 0x1C16F18
	0x039C611C BL 0x1990590
	0x039C6120 STR X30, [X31 - 0x10]!
	0x039C6124 LDR X8, [X0 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA1C000
	007 Move W8, [X21+3276]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x78C000
	015 Move X0, [X0+3912]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3276], W8
	019 Move X8, [X20+16]
	020 Compare X8, 0
	021 JumpIfEqual {62}
	022 Move X21, 0x78C000
	023 Move X21, [X21+3912]
	024 Move X20, [X8+400]
	025 Move X0, [X21]
	026 Move W9, [X0+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X22, 0xA1C000
	031 Move W8, [X22+3257]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x78C000
	035 Move X0, [X0+3912]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+3257], W8
	039 Move X0, [X21]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X21]
	045 Move X8, [X0+184]
	046 Move X8, [X8+8]
	047 Compare X8, 0
	048 JumpIfEqual {62}
	049 Compare X20, 0
	050 JumpIfEqual {62}
	051 Move W8, [X8+52]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Subtract W8, W8, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSEL not yet implemented."
	057 Move [X20+44], W8
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+48]
	061 Return 
	062 Call 0x1C17F20

Method: System.Int32 <RegisterDebug>b__24()

Disassembly:
	0x039C6128 CBZ X8, 0x39C6140
	0x039C612C LDR X8, [X8 + 0x190]
	0x039C6130 CBZ X8, 0x39C6140
	0x039C6134 LDR W0, [X8 + 0x44]
	0x039C6138 LDR X30, [X31], #0x10
	0x039C613C RET
	0x039C6140 BL 0x1C16F20
	0x039C6144 STR X30, [X31 - 0x10]!
	0x039C6148 LDR X8, [X0 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+48]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__25(System.Int32 v)

Disassembly:
	0x039C614C CBZ X8, 0x39C6164
	0x039C6150 LDR X8, [X8 + 0x190]
	0x039C6154 CBZ X8, 0x39C6164
	0x039C6158 STR W1, [X8 + 0x44]
	0x039C615C LDR X30, [X31], #0x10
	0x039C6160 RET
	0x039C6164 BL 0x1C16F20
	0x039C6168 STR D8, [X31 - 0x30]!
	0x039C616C STP X30, X21, [X31 + 0x10]
	0x039C6170 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 NotImplemented "Instruction BIC not yet implemented."
	009 Move [X8+48], W9
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Boolean <RegisterDebug>b__28()

Disassembly:
	0x039C6174 ADRP X9, 0xFFFFFFFFFD127000
	0x039C6178 LDR V8, [X9 + 0xCE0]
	0x039C617C MOVZ X8, 0x4
	0x039C6180 MOVZ X20, 0x43480000
	0x039C6184 MOVZ W21, 0xCCCD
	0x039C6188 MOVK X8, 0x3F800000
	0x039C618C MOVK X20, 0x7
	0x039C6190 MOVK W21, 0x3CCC0000
	0x039C6194 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+56]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__29(System.Boolean value)

Disassembly:
	0x039C6198 MOV X19, X0
	0x039C619C STUR X8, [X0 + 0x14]
	0x039C61A0 STR X20, [X0 + 0x28]
	0x039C61A4 STR D8, [X0 + 0x20]
	0x039C61A8 STR W21, [X0 + 0x3C]
	0x039C61AC BL 0x33BDD8C
	0x039C61B0 MOVZ X8, 0x4
	0x039C61B4 MOVZ W9, 0x3F800000
	0x039C61B8 STR D8, [X19 + 0x20]
	0x039C61BC STP X20, X31, [X19 + 0x28]
	0x039C61C0 STRB W31, [X19 + 0x38]
	0x039C61C4 STR W21, [X19 + 0x3C]
	0x039C61C8 STRB W31, [X19 + 0x40]
	0x039C61CC STP X8, X9, [X19 + 0x10]
	0x039C61D0 STR W31, [X19 + 0x44]
	0x039C61D4 LDP X20, X19, [X31 + 0x20]
	0x039C61D8 LDP X30, X21, [X31 + 0x10]
	0x039C61DC LDR V8, [X31], #0x30
	0x039C61E0 RET
	0x039C61E4 ADRP X8, 0xFFFFFFFFFD127000
	0x039C61E8 LDR V0, [X8 + 0xCE8]
	0x039C61EC ADRP X8, 0xFFFFFFFFFD127000
	0x039C61F0 MOVZ W9, 0x3F800000
	0x039C61F4 STR X9, [X0 + 0x18]
	0x039C61F8 STR D0, [X0 + 0x10]
	0x039C61FC LDR V0, [X8 + 0xCE0]
	0x039C6200 MOVZ X9, 0x43480000
	0x039C6204 MOVZ W8, 0xCCCD
	0x039C6208 MOVK X9, 0x7
	0x039C620C MOVK W8, 0x3CCC0000
	0x039C6210 STRB W31, [X0 + 0x38]
	0x039C6214 STRB W31, [X0 + 0x40]
	0x039C6218 STP X9, X31, [X0 + 0x28]
	0x039C621C STR W8, [X0 + 0x3C]
	0x039C6220 STR D0, [X0 + 0x20]
	0x039C6224 STR W31, [X0 + 0x44]
	0x039C6228 RET
	0x039C622C STR X30, [X31 - 0x30]!
	0x039C6230 STP X22, X21, [X31 + 0x10]
	0x039C6234 STP X20, X19, [X31 + 0x20]
	0x039C6238 ADRP X21, 0xA1B000
	0x039C623C ADRP X22, 0x72E000
	0x039C6240 ADRP X20, 0x78C000
	0x039C6244 LDRB W8, [X21 + 0xCD0]
	0x039C6248 LDR X22, [X22 + 0xE70]
	0x039C624C LDR X20, [X20 + 0xA38]
	0x039C6250 MOV X19, X0
	0x039C6254 TBNZ X8, 0x0, 0x39C6278
	0x039C6258 ADRP X0, 0x72E000
	0x039C625C LDR X0, [X0 + 0xE70]
	0x039C6260 BL 0x1C16CF4
	0x039C6264 ADRP X0, 0x78C000
	0x039C6268 LDR X0, [X0 + 0xA38]
	0x039C626C BL 0x1C16CF4
	0x039C6270 MOVZ W8, 0x1
	0x039C6274 STRB W8, [X21 + 0xCD0]
	0x039C6278 LDR X0, [X22]
	0x039C627C BL 0x1C16F10
	0x039C6280 LDR X2, [X20]
	0x039C6284 MOV X1, X19
	0x039C6288 MOV X3, X31
	0x039C628C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA1C000
	006 Move W8, [X21+3277]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x78C000
	014 Move X0, [X0+3912]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3277], W8
	018 Move X8, [X19+16]
	019 Compare X8, 0
	020 JumpIfEqual {79}
	021 Move X8, [X8+400]
	022 Compare X8, 0
	023 JumpIfEqual {79}
	024 And W9, W20, 1
	025 Move [X8+56], W9
	026 Move TEMP, X20
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {74}
	030 Move W8, [X8+16]
	031 Compare W8, 0
	032 JumpIfEqual {74}
	033 Move X8, 0x78C000
	034 Move X8, [X8+3912]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move W0, W31
	041 Move X1, X31
	042 Call ProbeReferenceVolume.CellSize, X0
	043 Move X8, [X19+16]
	044 Compare X8, 0
	045 JumpIfEqual {79}
	046 Move W20, W0
	047 Move X0, X8
	048 Move X1, X31
	049 Call ProbeReferenceVolume.MinBrickSize, X0
	050 Move X9, [X19+16]
	051 Compare X9, 0
	052 JumpIfEqual {79}
	053 Move X8, [X9+400]
	054 Compare X8, 0
	055 JumpIfEqual {79}
	056 Move V1, [X9+536]
	057 NotImplemented "Instruction SCVTF not yet implemented."
	058 Multiply S0, S0, S3
	059 Move S3, 3
	060 Move V2, [X9+532]
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 Move X9, -49131520
	063 Multiply S0, S0, S1
	064 Move V1, [X9+512]
	065 Move V3, [X8+32]
	066 Add S0, S0, S2
	067 Move S2, 10
	068 NotImplemented "Instruction FMIN not yet implemented."
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 NotImplemented "Instruction FCSEL not yet implemented."
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 NotImplemented "Instruction FCSEL not yet implemented."
	073 Move [X8+32], S0
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Return 
	079 Call 0x1C17F20

Method: System.Single <RegisterDebug>b__30()

Disassembly:
	0x039C6290 BL 0x3314368
	0x039C6294 MOV X0, X20
	0x039C6298 LDP X20, X19, [X31 + 0x20]
	0x039C629C LDP X22, X21, [X31 + 0x10]
	0x039C62A0 LDR X30, [X31], #0x30
	0x039C62A4 RET
	0x039C62A8 ADRP X8, 0xFFFFFFFFFD127000
	0x039C62AC LDR V0, [X8 + 0xCE8]
	0x039C62B0 ADRP X8, 0xFFFFFFFFFD127000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move V0, [X8+60]
	009 Move X30, [X31+16]
	010 Return V0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__31(System.Single value)

Disassembly:
	0x039C62B4 MOVZ W9, 0x3F800000
	0x039C62B8 STR X9, [X0 + 0x18]
	0x039C62BC STR D0, [X0 + 0x10]
	0x039C62C0 LDR V0, [X8 + 0xCE0]
	0x039C62C4 MOVZ X9, 0x43480000
	0x039C62C8 MOVZ W8, 0xCCCD
	0x039C62CC MOVK X9, 0x7
	0x039C62D0 MOVK W8, 0x3CCC0000
	0x039C62D4 STRB W31, [X0 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+60], S0
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Single <RegisterDebug>b__34()

Disassembly:
	0x039C62D8 STRB W31, [X0 + 0x40]
	0x039C62DC STP X9, X31, [X0 + 0x28]
	0x039C62E0 STR W8, [X0 + 0x3C]
	0x039C62E4 STR D0, [X0 + 0x20]
	0x039C62E8 STR W31, [X0 + 0x44]
	0x039C62EC RET
	0x039C62F0 STR X30, [X31 - 0x10]!
	0x039C62F4 LDR V0, [X0 + 0x20]
	0x039C62F8 SCVTF S1, S0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move V0, [X8+40]
	009 Move X30, [X31+16]
	010 Return V0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__35(System.Single value)

Disassembly:
	0x039C62FC FMOV S0, 3
	0x039C6300 BL 0x3EB1B50
	0x039C6304 MOVZ W8, 0x7F800000
	0x039C6308 FMOV S1, W8
	0x039C630C FCVTZS W9, S0
	0x039C6310 FCMP S0, S1
	0x039C6314 MOVZ W8, 0x80000000
	0x039C6318 CSEL W0, W8, W9, EQ
	0x039C631C LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+40], S0
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Boolean <RegisterDebug>b__37()

Disassembly:
	0x039C6320 RET
	0x039C6324 LDR W8, [X0 + 0x20]
	0x039C6328 ADD W0, W8, 0x1
	0x039C632C RET
	0x039C6330 LDR V0, [X0 + 0x24]
	0x039C6334 ADRP X8, 0xFFFFFFFFFD124000
	0x039C6338 LDR V1, [X8 + 0x330]
	0x039C633C FMOV S2, 3
	0x039C6340 FMUL S0, S0, S2

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+64]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__38(System.Boolean value)

Disassembly:
	0x039C6344 FMAX S0, S0, S1
	0x039C6348 RET
	0x039C634C STR D8, [X31 - 0x20]!
	0x039C6350 STP X30, X19, [X31 + 0x10]
	0x039C6354 LDR V0, [X0 + 0x20]
	0x039C6358 MOV X19, X0
	0x039C635C FMOV S8, 3
	0x039C6360 SCVTF S1, S0
	0x039C6364 FMOV S0, 3
	0x039C6368 BL 0x3EB1B50

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 And W9, W1, 1
	009 Move [X8+64], W9
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Void <RegisterDebug>g__RefreshScenarioNames|42(System.String guid)

Disassembly:
	0x039C636C MOVZ W8, 0x7F800000
	0x039C6370 LDR V1, [X19 + 0x24]
	0x039C6374 FMOV S2, W8
	0x039C6378 ADRP X8, 0xFFFFFFFFFD124000
	0x039C637C FCVTZS W9, S0
	0x039C6380 FCMP S0, S2
	0x039C6384 LDR V0, [X8 + 0x330]
	0x039C6388 MOVZ W8, 0xCF000000
	0x039C638C LDP X30, X19, [X31 + 0x10]
	0x039C6390 SCVTF S2, W9
	0x039C6394 FMUL S1, S1, S8
	0x039C6398 FMOV S3, W8
	0x039C639C FMAX S0, S1, S0
	0x039C63A0 FCSEL S1, S3, S2, EQ
	0x039C63A4 FMUL S0, S0, S1
	0x039C63A8 LDR V8, [X31], #0x20
	0x039C63AC RET
	0x039C63B0 STR X30, [X31 - 0x20]!
	0x039C63B4 STP X20, X19, [X31 + 0x10]
	0x039C63B8 ADRP X20, 0xA1B000
	0x039C63BC ADRP X19, 0x755000
	0x039C63C0 LDRB W8, [X20 + 0xCD1]
	0x039C63C4 LDR X19, [X19 + 0x8F8]
	0x039C63C8 TBNZ X8, 0x0, 0x39C63EC
	0x039C63CC ADRP X0, 0x78C000
	0x039C63D0 LDR X0, [X0 + 0xA40]
	0x039C63D4 BL 0x1C16CF4
	0x039C63D8 ADRP X0, 0x755000
	0x039C63DC LDR X0, [X0 + 0x8F8]
	0x039C63E0 BL 0x1C16CF4
	0x039C63E4 MOVZ W8, 0x1
	0x039C63E8 STRB W8, [X20 + 0xCD1]
	0x039C63EC LDR X0, [X19]
	0x039C63F0 ADRP X19, 0x78C000
	0x039C63F4 LDR W8, [X0 + 0xE0]
	0x039C63F8 LDR X19, [X19 + 0xA40]
	0x039C63FC CBNZ W8, 0x39C6404
	0x039C6400 BL 0x1C16DFC
	0x039C6404 LDR X0, [X19]
	0x039C6408 LDP X20, X19, [X31 + 0x10]
	0x039C640C LDR X30, [X31], #0x20
	0x039C6410 B 0x21A7F54
	0x039C6414 STP D13, D12, [X31 - 0x60]!
	0x039C6418 STP D11, D10, [X31 + 0x10]
	0x039C641C STP D9, D8, [X31 + 0x20]
	0x039C6420 STR X30, [X31 + 0x30]
	0x039C6424 STP X22, X21, [X31 + 0x40]
	0x039C6428 STP X20, X19, [X31 + 0x50]
	0x039C642C CBZ X1, 0x39C651C
	0x039C6430 LDR V9, [X0 + 0x24]
	0x039C6434 LDR V8, [X1 + 0x24]
	0x039C6438 MOV X19, X1
	0x039C643C MOV X20, X0
	0x039C6440 FCMP S9, S8
	0x039C6444 B.NE 0x39C64FC
	0x039C6448 LDR W21, [X20 + 0x20]
	0x039C644C FMOV S0, 3
	0x039C6450 FMOV S10, 3
	0x039C6454 SCVTF S1, W21
	0x039C6458 BL 0x3EB1B50
	0x039C645C LDR W22, [X19 + 0x20]
	0x039C6460 FCVTZS W8, S0
	0x039C6464 MOVZ W9, 0x7F800000
	0x039C6468 SCVTF S1, W8
	0x039C646C FMOV S12, W9
	0x039C6470 MOVZ W8, 0xCF000000
	0x039C6474 FCMP S0, S12
	0x039C6478 FMOV S13, W8
	0x039C647C FCSEL S11, S13, S1, EQ
	0x039C6480 SCVTF S1, W22
	0x039C6484 FMOV S0, 3
	0x039C6488 BL 0x3EB1B50
	0x039C648C FCVTZS W8, S0
	0x039C6490 FCMP S0, S12
	0x039C6494 SCVTF S0, W8
	0x039C6498 FCSEL S0, S13, S0, EQ
	0x039C649C CMP W21, W22
	0x039C64A0 MOV W0, W31
	0x039C64A4 B.NE 0x39C6500
	0x039C64A8 ADRP X8, 0xFFFFFFFFFD124000
	0x039C64AC LDR V1, [X8 + 0x330]
	0x039C64B0 FMUL S2, S9, S10
	0x039C64B4 FMUL S3, S8, S10
	0x039C64B8 FMAX S2, S2, S1
	0x039C64BC FMAX S1, S3, S1
	0x039C64C0 FMUL S2, S2, S11
	0x039C64C4 FMUL S0, S1, S0
	0x039C64C8 FCMP S2, S0
	0x039C64CC B.NE 0x39C6500
	0x039C64D0 LDR W0, [X20 + 0x28]
	0x039C64D4 MOV X1, X31
	0x039C64D8 BL 0x3C35CB8
	0x039C64DC LDR W8, [X19 + 0x28]
	0x039C64E0 MOV W19, W0
	0x039C64E4 MOV X1, X31
	0x039C64E8 MOV X0, X8
	0x039C64EC BL 0x3C35CB8
	0x039C64F0 CMP W19, W0
	0x039C64F4 CSET W0, EQ
	0x039C64F8 B 0x39C6500
	0x039C64FC MOV W0, W31
	0x039C6500 LDP X20, X19, [X31 + 0x50]
	0x039C6504 LDP X22, X21, [X31 + 0x40]
	0x039C6508 LDR X30, [X31 + 0x30]
	0x039C650C LDP D9, D8, [X31 + 0x20]
	0x039C6510 LDP D11, D10, [X31 + 0x10]
	0x039C6514 LDP D13, D12, [X31], #0x60
	0x039C6518 RET
	0x039C651C BL 0x1C16F20
	0x039C6520 STP X30, X21, [X31 - 0x20]!
	0x039C6524 STP X20, X19, [X31 + 0x10]
	0x039C6528 ADRP X21, 0xA1B000
	0x039C652C ADRP X20, 0x755000
	0x039C6530 LDRB W8, [X21 + 0xCD2]
	0x039C6534 LDR X20, [X20 + 0x8F8]
	0x039C6538 MOV X19, X0
	0x039C653C TBNZ X8, 0x0, 0x39C6560
	0x039C6540 ADRP X0, 0x78C000
	0x039C6544 LDR X0, [X0 + 0xA40]
	0x039C6548 BL 0x1C16CF4
	0x039C654C ADRP X0, 0x755000
	0x039C6550 LDR X0, [X0 + 0x8F8]
	0x039C6554 BL 0x1C16CF4
	0x039C6558 MOVZ W8, 0x1
	0x039C655C STRB W8, [X21 + 0xCD2]
	0x039C6560 LDR X0, [X20]
	0x039C6564 ADRP X20, 0x78C000
	0x039C6568 LDR W8, [X0 + 0xE0]
	0x039C656C LDR X20, [X20 + 0xA40]
	0x039C6570 CBNZ W8, 0x39C6578
	0x039C6574 BL 0x1C16DFC
	0x039C6578 LDR X0, [X20]
	0x039C657C BL 0x21A7F54
	0x039C6580 MOVZ X8, 0x3
	0x039C6584 STR W0, [X19 + 0x18]
	0x039C6588 MOVK X8, 0x3F800000
	0x039C658C MOVN W0, 0x0
	0x039C6590 MOV X1, X31
	0x039C6594 STR X8, [X19 + 0x20]
	0x039C6598 BL 0x3C35CBC
	0x039C659C MOVZ W8, 0xCCCD
	0x039C65A0 MOVK W8, 0x3DCC0000
	0x039C65A4 STP W0, W8, [X19 + 0x28]
	0x039C65A8 MOV X0, X19
	0x039C65AC LDP X20, X19, [X31 + 0x10]
	0x039C65B0 MOV X1, X31
	0x039C65B4 LDP X30, X21, [X31], #0x20
	0x039C65B8 B 0x3C36D2C
	0x039C65BC ADRP X8, 0xFFFFFFFFFD125000
	0x039C65C0 LDR V0, [X8 + 0x91]
	0x039C65C4 MOVZ W8, 0x3F800000
	0x039C65C8 MOV X1, X31
	0x039C65CC STR W8, [X0 + 0x20]
	0x039C65D0 STUR V0, [X0 + 0x28]
	0x039C65D4 B 0x3C36C30
	0x039C65D8 LDR W8, [X0 + 0x90]
	0x039C65DC CBZ W8, 0x39C65E4
	0x039C65E0 RET
	0x039C65E4 LDRB W8, [X0 + 0x94]
	0x039C65E8 MOVZ W9, 0x1
	0x039C65EC STR W9, [X0 + 0x90]
	0x039C65F0 CMP W8, 0x0
	0x039C65F4 CINC W8, W9, EQ
	0x039C65F8 STR W8, [X0 + 0x20]
	0x039C65FC RET
	0x039C6600 STR X30, [X31 - 0x20]!
	0x039C6604 STP X20, X19, [X31 + 0x10]
	0x039C6608 MOVZ W10, 0xCCCD
	0x039C660C MOVZ W8, 0x1
	0x039C6610 FMOV V0.2S, 0x0
	0x039C6614 MOVZ W9, 0x41200000
	0x039C6618 MOVK W10, 0x3DCC0000
	0x039C661C MOV X19, X0
	0x039C6620 STR W8, [X0 + 0x20]
	0x039C6624 STUR D0, [X0 + 0x24]
	0x039C6628 STR W9, [X0 + 0x2C]
	0x039C662C STR W10, [X0 + 0x34]
	0x039C6630 MOVN W0, 0x0
	0x039C6634 MOV X1, X31
	0x039C6638 MOVN W20, 0x0
	0x039C663C BL 0x3C35CBC
	0x039C6640 STR W0, [X19 + 0x38]
	0x039C6644 STR W20, [X19 + 0x40]
	0x039C6648 MOV X0, X19
	0x039C664C LDP X20, X19, [X31 + 0x10]
	0x039C6650 MOV X1, X31
	0x039C6654 LDR X30, [X31], #0x20
	0x039C6658 B 0x3C36C30
	0x039C665C LDR W0, [X0 + 0x18]
	0x039C6660 RET
	0x039C6664 LDR W8, [X0 + 0x84]
	0x039C6668 ADD W0, W8, 0x1
	0x039C666C RET
	0x039C6670 LDR V0, [X0 + 0x88]
	0x039C6674 ADRP X8, 0xFFFFFFFFFD124000
	0x039C6678 LDR V1, [X8 + 0x330]
	0x039C667C FMOV S2, 3
	0x039C6680 FMUL S0, S0, S2
	0x039C6684 FMAX S0, S0, S1
	0x039C6688 RET
	0x039C668C STR X30, [X31 - 0x10]!
	0x039C6690 CBZ X1, 0x39C6700
	0x039C6694 LDR W8, [X0 + 0x84]
	0x039C6698 LDR W9, [X1 + 0x84]
	0x039C669C CMP W8, W9
	0x039C66A0 B.NE 0x39C66F4
	0x039C66A4 LDR V0, [X0 + 0x88]
	0x039C66A8 ADRP X8, 0xFFFFFFFFFD124000
	0x039C66AC LDR V1, [X1 + 0x88]
	0x039C66B0 LDR V2, [X8 + 0x330]
	0x039C66B4 FMOV S3, 3
	0x039C66B8 FMUL S0, S0, S3
	0x039C66BC FMUL S1, S1, S3
	0x039C66C0 FMAX S0, S0, S2
	0x039C66C4 FMAX S1, S1, S2
	0x039C66C8 FCMP S0, S1
	0x039C66CC B.NE 0x39C66F4
	0x039C66D0 LDR W8, [X0 + 0x80]
	0x039C66D4 LDR W9, [X1 + 0x80]
	0x039C66D8 CMP W8, W9
	0x039C66DC B.NE 0x39C66F4
	0x039C66E0 LDR W8, [X0 + 0x74]
	0x039C66E4 LDR W9, [X1 + 0x74]
	0x039C66E8 CMP W8, W9
	0x039C66EC CSET W0, EQ
	0x039C66F0 B 0x39C66F8
	0x039C66F4 MOV W0, W31
	0x039C66F8 LDR X30, [X31], #0x10
	0x039C66FC RET
	0x039C6700 BL 0x1C16F20
	0x039C6704 LDR W8, [X0 + 0x40]
	0x039C6708 LDR W9, [X0 + 0x4C]
	0x039C670C CMP W8, W9
	0x039C6710 B.LT 0x39C6724
	0x039C6714 LDR W8, [X0 + 0x44]
	0x039C6718 LDR W9, [X0 + 0x50]
	0x039C671C CMP W8, W9
	0x039C6720 B.GE 0x39C672C
	0x039C6724 MOVZ W0, 0x1
	0x039C6728 RET
	0x039C672C LDR W8, [X0 + 0x48]
	0x039C6730 LDR W9, [X0 + 0x54]
	0x039C6734 CMP W8, W9
	0x039C6738 CSET W0, LT
	0x039C673C RET
	0x039C6740 LDR X0, [X0 + 0x78]
	0x039C6744 RET
	0x039C6748 ADD W8, W0, 0xF
	0x039C674C CMP W0, 0x0
	0x039C6750 CSEL W8, W8, W0, LT
	0x039C6754 AND W8, W8, 0xFFFFFFF0
	0x039C6758 SUBS W8, W0, W8
	0x039C675C MOVZ W9, 0x10
	0x039C6760 SUB W8, W9, W8
	0x039C6764 CSEL W8, W31, W8, EQ
	0x039C6768 ADD W0, W8, W0
	0x039C676C RET
	0x039C6770 SUB X31, X31, 0xD0
	0x039C6774 STP X29, X30, [X31 + 0x70]
	0x039C6778 STP X28, X27, [X31 + 0x80]
	0x039C677C STP X26, X25, [X31 + 0x90]
	0x039C6780 STP X24, X23, [X31 + 0xA0]
	0x039C6784 STP X22, X21, [X31 + 0xB0]
	0x039C6788 STP X20, X19, [X31 + 0xC0]
	0x039C678C ADRP X21, 0xA1B000
	0x039C6790 ADRP X25, 0x72D000
	0x039C6794 LDRB W8, [X21 + 0xCD3]
	0x039C6798 LDR X25, [X25 + 0x598]
	0x039C679C MOV X20, X2
	0x039C67A0 MOV X22, X1
	0x039C67A4 MOV X19, X0
	0x039C67A8 TBNZ X8, 0x0, 0x39C6838
	0x039C67AC ADRP X0, 0x78C000
	0x039C67B0 LDR X0, [X0 + 0xA48]
	0x039C67B4 BL 0x1C16CF4
	0x039C67B8 ADRP X0, 0x78C000
	0x039C67BC LDR X0, [X0 + 0xA50]
	0x039C67C0 BL 0x1C16CF4
	0x039C67C4 ADRP X0, 0x78C000
	0x039C67C8 LDR X0, [X0 + 0xA58]
	0x039C67CC BL 0x1C16CF4
	0x039C67D0 ADRP X0, 0x756000
	0x039C67D4 LDR X0, [X0 + 0x2B8]
	0x039C67D8 BL 0x1C16CF4
	0x039C67DC ADRP X0, 0x783000
	0x039C67E0 LDR X0, [X0 + 0x6A0]
	0x039C67E4 BL 0x1C16CF4
	0x039C67E8 ADRP X0, 0x72D000
	0x039C67EC LDR X0, [X0 + 0x598]
	0x039C67F0 BL 0x1C16CF4
	0x039C67F4 ADRP X0, 0x78C000
	0x039C67F8 LDR X0, [X0 + 0xA60]
	0x039C67FC BL 0x1C16CF4
	0x039C6800 ADRP X0, 0x78C000
	0x039C6804 LDR X0, [X0 + 0xA68]
	0x039C6808 BL 0x1C16CF4
	0x039C680C ADRP X0, 0x78C000
	0x039C6810 LDR X0, [X0 + 0xA70]
	0x039C6814 BL 0x1C16CF4
	0x039C6818 ADRP X0, 0x78C000
	0x039C681C LDR X0, [X0 + 0xA78]
	0x039C6820 BL 0x1C16CF4
	0x039C6824 ADRP X0, 0x78C000
	0x039C6828 LDR X0, [X0 + 0xA80]
	0x039C682C BL 0x1C16CF4
	0x039C6830 MOVZ W8, 0x1
	0x039C6834 STRB W8, [X21 + 0xCD3]
	0x039C6838 LDR X0, [X25]
	0x039C683C STP X31, X31, [X31 + 0x58]
	0x039C6840 STP X31, X31, [X31 + 0x48]
	0x039C6844 STP X31, X31, [X31 + 0x38]
	0x039C6848 STP X31, X31, [X31 + 0x28]
	0x039C684C STP X31, X31, [X31 + 0x18]
	0x039C6850 STP X31, X31, [X31 + 0x8]
	0x039C6854 LDR W8, [X0 + 0xE0]
	0x039C6858 CBNZ W8, 0x39C6860
	0x039C685C BL 0x1C16DFC
	0x039C6860 MOV X0, X22
	0x039C6864 MOV X1, X31
	0x039C6868 MOV X2, X31
	0x039C686C BL 0x3C3883C
	0x039C6870 TBZ X0, 0x0, 0x39C687C
	0x039C6874 MOV W0, W31
	0x039C6878 B 0x39C6BB4
	0x039C687C CBZ X22, 0x39C6BAC
	0x039C6880 ADRP X26, 0x78C000
	0x039C6884 LDR W8, [X19 + 0x74]
	0x039C6888 LDR W9, [X19 + 0x3C]
	0x039C688C LDR X26, [X26 + 0xA80]
	0x039C6890 MOV X0, X22
	0x039C6894 UBFM W24, W8, 0x1A, 0x19
	0x039C6898 MUL W21, W24, W9
	0x039C689C LDR X1, [X26]
	0x039C68A0 BL 0x229BE9C
	0x039C68A4 STR W31, [X31 + 0x6C]
	0x039C68A8 ADRP X8, 0x78C000
	0x039C68AC LDR X8, [X8 + 0xA60]
	0x039C68B0 LDR W3, [X19 + 0x30]
	0x039C68B4 MOV X22, X0
	0x039C68B8 MOV X23, X1
	0x039C68BC LDR X5, [X8]
	0x039C68C0 ADD X4, X31, 0x6C
	0x039C68C4 MOV X0, X19
	0x039C68C8 MOV X1, X22
	0x039C68CC MOV X2, X23
	0x039C68D0 BL 0x2235AF0
	0x039C68D4 ADRP X8, 0x78C000
	0x039C68D8 LDR X8, [X8 + 0xA68]
	0x039C68DC STP X0, X1, [X31 + 0x58]
	0x039C68E0 ADD X4, X31, 0x6C
	0x039C68E4 MOV X0, X19
	0x039C68E8 LDR X5, [X8]
	0x039C68EC MOV X1, X22
	0x039C68F0 MOV X2, X23
	0x039C68F4 MOV W3, W21
	0x039C68F8 BL 0x22356CC
	0x039C68FC ADD W10, W23, 0xF
	0x039C6900 CMP W23, 0x0
	0x039C6904 CSEL W10, W10, W23, LT
	0x039C6908 AND W10, W10, 0xFFFFFFF0
	0x039C690C LDR W9, [X31 + 0x6C]
	0x039C6910 MOVZ W11, 0x10
	0x039C6914 SUBS W10, W23, W10
	0x039C6918 SUB W10, W11, W10
	0x039C691C CSEL W10, W31, W10, EQ
	0x039C6920 ADD W10, W10, W23
	0x039C6924 MOV X8, X0
	0x039C6928 MOV W0, W31
	0x039C692C CMP W9, W10
	0x039C6930 STP X8, X1, [X31 + 0x48]
	0x039C6934 B.NE 0x39C6BB4
	0x039C6938 LDR X0, [X25]
	0x039C693C LDR W8, [X0 + 0xE0]
	0x039C6940 CBNZ W8, 0x39C6948
	0x039C6944 BL 0x1C16DFC
	0x039C6948 MOV X0, X20
	0x039C694C MOV X1, X31
	0x039C6950 BL 0x3C38948
	0x039C6954 TBZ X0, 0x0, 0x39C6A4C
	0x039C6958 CBZ X20, 0x39C6BAC
	0x039C695C LDR X1, [X26]
	0x039C6960 MOV X0, X20
	0x039C6964 BL 0x229BE9C
	0x039C6968 STR W31, [X31 + 0x6C]
	0x039C696C CBZ X0, 0x39C6A50
	0x039C6970 ADRP X23, 0x78C000
	0x039C6974 LDR X23, [X23 + 0xA78]
	0x039C6978 MOV X22, X0
	0x039C697C MOV X20, X1
	0x039C6980 ADD X4, X31, 0x6C
	0x039C6984 LDR X5, [X23]
	0x039C6988 MOV X0, X19
	0x039C698C MOV X1, X22
	0x039C6990 MOV X2, X20
	0x039C6994 MOV W3, W21
	0x039C6998 BL 0x2235938
	0x039C699C ADRP X25, 0x78C000
	0x039C69A0 LDR X25, [X25 + 0xA70]
	0x039C69A4 STP X0, X1, [X31 + 0x38]
	0x039C69A8 ADD X4, X31, 0x6C
	0x039C69AC MOV X0, X19
	0x039C69B0 LDR X5, [X25]
	0x039C69B4 MOV X1, X22
	0x039C69B8 MOV X2, X20
	0x039C69BC MOV W3, W21
	0x039C69C0 BL 0x2235798
	0x039C69C4 LDR X5, [X25]
	0x039C69C8 STP X0, X1, [X31 + 0x28]
	0x039C69CC ADD X4, X31, 0x6C
	0x039C69D0 MOV X0, X19
	0x039C69D4 MOV X1, X22
	0x039C69D8 MOV X2, X20
	0x039C69DC MOV W3, W21
	0x039C69E0 BL 0x2235798
	0x039C69E4 LDR X5, [X23]
	0x039C69E8 STP X0, X1, [X31 + 0x18]
	0x039C69EC ADD X4, X31, 0x6C
	0x039C69F0 MOV X0, X19
	0x039C69F4 MOV X1, X22
	0x039C69F8 MOV X2, X20
	0x039C69FC MOV W3, W21
	0x039C6A00 BL 0x2235938
	0x039C6A04 ADD W10, W20, 0xF
	0x039C6A08 CMP W20, 0x0
	0x039C6A0C CSEL W10, W10, W20, LT
	0x039C6A10 AND W10, W10, 0xFFFFFFF0
	0x039C6A14 LDR W9, [X31 + 0x6C]
	0x039C6A18 MOVZ W11, 0x10
	0x039C6A1C SUBS W10, W20, W10
	0x039C6A20 SUB W10, W11, W10
	0x039C6A24 CSEL W10, W31, W10, EQ
	0x039C6A28 ADD W10, W10, W20
	0x039C6A2C MOV X8, X0
	0x039C6A30 MOV W0, W31
	0x039C6A34 CMP W9, W10
	0x039C6A38 STP X8, X1, [X31 + 0x8]
	0x039C6A3C B.NE 0x39C6BB4
	0x039C6A40 MOVZ W8, 0x1
	0x039C6A44 STR W8, [X31 + 0x4]
	0x039C6A48 B 0x39C6A64
	0x039C6A4C STR W31, [X31 + 0x6C]
	0x039C6A50 STR W31, [X31 + 0x4]
	0x039C6A54 STP X31, X31, [X31 + 0x38]
	0x039C6A58 STP X31, X31, [X31 + 0x28]
	0x039C6A5C STP X31, X31, [X31 + 0x18]
	0x039C6A60 STP X31, X31, [X31 + 0x8]
	0x039C6A64 LDR X8, [X19 + 0x20]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+144], X29
	003 Move [X31+152], X30
	004 Move [X31+160], X28
	005 Move [X31+168], X27
	006 Move [X31+176], X26
	007 Move [X31+184], X25
	008 Move [X31+192], X24
	009 Move [X31+200], X23
	010 Move [X31+208], X22
	011 Move [X31+216], X21
	012 Move [X31+224], X20
	013 Move [X31+232], X19
	014 Move X23, 0xA1C000
	015 Move X22, 0x72F000
	016 Move X21, 0x72F000
	017 Move W8, [X23+3278]
	018 Move X22, [X22+3120]
	019 Move X21, [X21+3112]
	020 Move X20, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {97}
	026 Move X0, 0x78D000
	027 Move X0, [X0+2512]
	028 Call 0x1C17CF4
	029 Move X0, 0x78D000
	030 Move X0, [X0+2520]
	031 Call 0x1C17CF4
	032 Move X0, 0x78C000
	033 Move X0, [X0+224]
	034 Call 0x1C17CF4
	035 Move X0, 0x78D000
	036 Move X0, [X0+2528]
	037 Call 0x1C17CF4
	038 Move X0, 0x755000
	039 Move X0, [X0+4040]
	040 Call 0x1C17CF4
	041 Move X0, 0x78D000
	042 Move X0, [X0+2536]
	043 Call 0x1C17CF4
	044 Move X0, 0x78D000
	045 Move X0, [X0+2544]
	046 Call 0x1C17CF4
	047 Move X0, 0x78D000
	048 Move X0, [X0+2552]
	049 Call 0x1C17CF4
	050 Move X0, 0x755000
	051 Move X0, [X0+4048]
	052 Call 0x1C17CF4
	053 Move X0, 0x755000
	054 Move X0, [X0+4056]
	055 Call 0x1C17CF4
	056 Move X0, 0x78D000
	057 Move X0, [X0+2560]
	058 Call 0x1C17CF4
	059 Move X0, 0x78D000
	060 Move X0, [X0+2568]
	061 Call 0x1C17CF4
	062 Move X0, 0x759000
	063 Move X0, [X0+3024]
	064 Call 0x1C17CF4
	065 Move X0, 0x72F000
	066 Move X0, [X0+3104]
	067 Call 0x1C17CF4
	068 Move X0, 0x78D000
	069 Move X0, [X0+2576]
	070 Call 0x1C17CF4
	071 Move X0, 0x783000
	072 Move X0, [X0+2096]
	073 Call 0x1C17CF4
	074 Move X0, 0x72F000
	075 Move X0, [X0+3112]
	076 Call 0x1C17CF4
	077 Move X0, 0x72F000
	078 Move X0, [X0+3072]
	079 Call 0x1C17CF4
	080 Move X0, 0x72F000
	081 Move X0, [X0+3120]
	082 Call 0x1C17CF4
	083 Move X0, 0x737000
	084 Move X0, [X0+272]
	085 Call 0x1C17CF4
	086 Move X0, 0x755000
	087 Move X0, [X0+4064]
	088 Call 0x1C17CF4
	089 Move X0, 0x78D000
	090 Move X0, [X0+2584]
	091 Call 0x1C17CF4
	092 Move X0, 0x730000
	093 Move X0, [X0+1944]
	094 Call 0x1C17CF4
	095 Move W8, 1
	096 Move [X23+3278], W8
	097 Move X0, [X22]
	098 Move [X31+112], X31
	099 Move [X31+120], X31
	100 Move [X31+128], X31
	101 Move [X31+80], X31
	102 Move [X31+88], X31
	103 Move [X31+96], X31
	104 Move [X31+48], X31
	105 Move [X31+56], X31
	106 Move [X31+64], X31
	107 Call 0x1C17F10
	108 Move X1, [X21]
	109 Move X21, X0
	110 Call HashSet`1<Object>..ctor, X0
	111 Move X8, [X19+72]
	112 Compare X8, 0
	113 JumpIfEqual {431}
	114 Move X0, [X8+104]
	115 Compare X0, 0
	116 JumpIfEqual {431}
	117 Move X8, 0x78D000
	118 Move X8, [X8+2584]
	119 Move X29, 0x78D000
	120 Move X23, 0x737000
	121 Move X24, 0x755000
	122 Move X27, 0x755000
	123 Move X25, 0x72F000
	124 Move X28, 0x755000
	125 Move X26, 0x78D000
	126 Move X29, [X29+2552]
	127 Move X23, [X23+272]
	128 Move X24, [X24+4064]
	129 Move X27, [X27+4048]
	130 Move X25, [X25+3104]
	131 Move X28, [X28+4040]
	132 Move X26, [X26+2544]
	133 Move X1, [X8]
	134 Add X8, X31, 24
	135 Call List`1<Object>.GetEnumerator, X0
	136 NotImplemented "Instruction LDUR not yet implemented."
	137 Move X8, [X31+40]
	138 Move [X31+7], V0
	139 Move [X31+128], X8
	140 Move X1, [X29]
	141 Add X0, X31, 112
	142 Call Enumerator<Object>.MoveNext, X0
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {194}
	147 Move X22, [X31+128]
	148 Compare X22, 0
	149 JumpIfEqual {423}
	150 Move X0, [X22+24]
	151 Compare X0, 0
	152 JumpIfEqual {424}
	153 Move X2, [X23]
	154 Move X1, X20
	155 Call List`1<Object>.Contains, X0, X1
	156 Move TEMP, X0
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfNotEqual {140}
	160 Move X0, [X22+88]
	161 Compare X0, 0
	162 JumpIfEqual {435}
	163 Move X1, [X24]
	164 Add X8, X31, 24
	165 Call List`1<Object>.GetEnumerator, X0
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 Move X8, [X31+40]
	168 Move [X31+5], V0
	169 Move [X31+96], X8
	170 Move X1, [X27]
	171 Add X0, X31, 80
	172 Call Enumerator<Object>.MoveNext, X0
	173 Move TEMP, X0
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfNotEqual {183}
	177 Compare X21, 0
	178 JumpIfEqual {189}
	179 Move X1, [X31+96]
	180 Move X2, [X25]
	181 Move X0, X21
	182 Call HashSet`1<Object>.Add, X0, X1
	183 Move X22, X31
	184 Move X1, [X28]
	185 Add X0, X31, 80
	186 Call Enumerator<Object>.Dispose, X0
	187 Compare X22, 0
	188 JumpIfEqual {140}
	189 Call 0x1C17F20
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Call 0x3EB2AD0
	192 Move X22, [X0]
	193 Call 0x3EB2AE0
	194 Move X8, 0x78D000
	195 Move X8, [X8+2528]
	196 Add X0, X31, 112
	197 Move X1, [X8]
	198 Call Enumerator<Object>.Dispose, X0
	199 Move X25, 0x759000
	200 Move X25, [X25+3024]
	201 Move X8, [X19+16]
	202 Compare X8, 0
	203 JumpIfEqual {431}
	204 Move X8, [X8+240]
	205 Compare X8, 0
	206 JumpIfEqual {431}
	207 Compare X21, 0
	208 JumpIfEqual {431}
	209 Move X1, [X8+112]
	210 Move X8, 0x783000
	211 Move X8, [X8+2096]
	212 Move X0, X21
	213 Move X2, [X8]
	214 Call HashSet`1<Object>.Remove, X0, X1
	215 Move X8, [X19+16]
	216 Compare X8, 0
	217 JumpIfEqual {431}
	218 Move X0, [X8+480]
	219 Move X1, X20
	220 Move X2, X31
	221 Call String.op_Equality, X0, X1
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {247}
	226 Move X8, [X19+16]
	227 Compare X8, 0
	228 JumpIfEqual {431}
	229 Move X9, [X8+464]
	230 Compare X9, 0
	231 JumpIfEqual {431}
	232 Move W10, [X21+32]
	233 Move W9, [X9+24]
	234 Add W10, W10, 1
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move X9, [X8+240]
	237 Compare X9, 0
	238 JumpIfEqual {431}
	239 Move X0, [X8+488]
	240 Move X1, [X9+112]
	241 Move X2, X31
	242 Call String.op_Equality, X0, X1
	243 Move TEMP, X0
	244 And TEMP, TEMP, 1
	245 Compare TEMP, 1
	246 JumpIfEqual {395}
	247 Move X8, [X19+16]
	248 Compare X8, 0
	249 JumpIfEqual {431}
	250 Move X10, 0x78D000
	251 Move W9, [X21+32]
	252 Move X10, [X10+2512]
	253 Add X0, X8, 464
	254 Add W1, W9, 1
	255 Move X2, [X10]
	256 Call ArrayExtensions.ResizeArray, X0, X1
	257 Move X8, [X19+16]
	258 Compare X8, 0
	259 JumpIfEqual {431}
	260 Move X10, 0x78D000
	261 Move W9, [X21+32]
	262 Move X10, [X10+2520]
	263 Add X0, X8, 472
	264 Add W1, W9, 1
	265 Move X2, [X10]
	266 Call ArrayExtensions.ResizeArray, X0, X1
	267 Move X8, [X19+16]
	268 Compare X8, 0
	269 JumpIfEqual {431}
	270 Move X0, [X25]
	271 Move X23, [X8+464]
	272 Call 0x1C17F10
	273 Move X8, 0x730000
	274 Move X8, [X8+1944]
	275 Move X2, X31
	276 Move X22, X0
	277 Move X1, [X8]
	278 Call GUIContent..ctor, X0, X1
	279 Compare X23, 0
	280 JumpIfEqual {431}
	281 Compare X22, 0
	282 JumpIfEqual {289}
	283 Move X8, [X23]
	284 Move X0, X22
	285 Move X1, [X8+64]
	286 Call 0x1C17E00
	287 Compare X0, 0
	288 JumpIfEqual {439}
	289 Move W8, [X23+24]
	290 Compare W8, 0
	291 JumpIfEqual {438}
	292 Move [X23+32], X22
	293 Move X8, [X19+16]
	294 Compare X8, 0
	295 JumpIfEqual {431}
	296 Move X8, [X8+472]
	297 Compare X8, 0
	298 JumpIfEqual {431}
	299 Move W9, [X8+24]
	300 Compare W9, 0
	301 JumpIfEqual {438}
	302 Move [X8+32], W31
	303 Move X8, 0x78D000
	304 Move X8, [X8+2576]
	305 Move X0, X21
	306 Move X1, [X8]
	307 Add X8, X31, 24
	308 Call HashSet`1<Object>.GetEnumerator, X0
	309 NotImplemented "Instruction LDUR not yet implemented."
	310 Move X8, [X31+40]
	311 Move W23, 1
	312 Move [X31+3], V0
	313 Move [X31+64], X8
	314 Move X1, [X26]
	315 Add X0, X31, 48
	316 Call Enumerator<Object>.MoveNext, X0
	317 Move TEMP, X0
	318 And TEMP, TEMP, 1
	319 Compare TEMP, 1
	320 JumpIfNotEqual {358}
	321 Move X8, [X19+16]
	322 Compare X8, 0
	323 JumpIfEqual {428}
	324 Move X22, [X31+64]
	325 Move X24, [X8+464]
	326 Move X0, [X25]
	327 Call 0x1C17F10
	328 Move X21, X0
	329 Move X1, X22
	330 Move X2, X31
	331 Call GUIContent..ctor, X0, X1
	332 Compare X24, 0
	333 JumpIfEqual {429}
	334 Compare X21, 0
	335 JumpIfEqual {342}
	336 Move X8, [X24]
	337 Move X1, [X8+64]
	338 Move X0, X21
	339 Call 0x1C17E00
	340 Compare X0, 0
	341 JumpIfEqual {432}
	342 Move W8, [X24+24]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Move X8, W23
	345 Add X9, X24, X8
	346 Move [X9+32], X21
	347 Move X9, [X19+16]
	348 Compare X9, 0
	349 JumpIfEqual {426}
	350 Move X9, [X9+472]
	351 Compare X9, 0
	352 JumpIfEqual {427}
	353 Move W10, [X9+24]
	354 NotImplemented "Instruction CMP not yet implemented."
	355 Add X8, X9, X8
	356 Move [X8+32], W23
	357 Add W23, W23, 1
	358 Move X8, 0x78D000
	359 Move X8, [X8+2536]
	360 Add X0, X31, 48
	361 Move X1, [X8]
	362 Call Enumerator<Object>.Dispose, X0
	363 Move X8, [X19+16]
	364 Compare X8, 0
	365 JumpIfEqual {431}
	366 Move X9, [X8+240]
	367 Move [X8+480], X20
	368 Compare X9, 0
	369 JumpIfEqual {431}
	370 Move X9, [X9+112]
	371 Move X0, [X8+496]
	372 Move [X8+488], X9
	373 Compare X0, 0
	374 JumpIfEqual {431}
	375 Move X9, [X8+464]
	376 Move [X0+96], X9
	377 Move X1, [X8+472]
	378 Move X8, 0x78C000
	379 Move X8, [X8+224]
	380 Move X2, [X8]
	381 Call 0x2BAA724, X0, X1
	382 Move X9, [X19+16]
	383 Compare X9, 0
	384 JumpIfEqual {431}
	385 Move X8, [X9+400]
	386 Compare X8, 0
	387 JumpIfEqual {431}
	388 Move X9, [X9+464]
	389 Compare X9, 0
	390 JumpIfEqual {431}
	391 Move W10, [X8+68]
	392 Move W9, [X9+24]
	393 NotImplemented "Instruction CMP not yet implemented."
	394 Move [X8+68], W31
	395 Move X20, [X31+224]
	396 Move X19, [X31+232]
	397 Move X22, [X31+208]
	398 Move X21, [X31+216]
	399 Move X24, [X31+192]
	400 Move X23, [X31+200]
	401 Move X26, [X31+176]
	402 Move X25, [X31+184]
	403 Move X28, [X31+160]
	404 Move X27, [X31+168]
	405 Move X29, [X31+144]
	406 Move X30, [X31+152]
	407 Add X31, X31, 240
	408 Return 
	409 Move [X31+8], X0
	410 Move [X31+16], X1
	411 Move X22, X31
	412 Move X1, [X28]
	413 Add X0, X31, 80
	414 Call Enumerator<Object>.Dispose, X0
	415 Move X25, 0x759000
	416 Move X0, [X31+8]
	417 Move X1, [X31+16]
	418 Move X25, [X25+3024]
	419 Compare X22, 0
	420 JumpIfEqual {446}
	421 Move X0, X22
	422 Call 0x1C17F18
	423 Call 0x1C17F20
	424 Call 0x1C17F20
	425 Call 0x1C17F28
	426 Call 0x1C17F20
	427 Call 0x1C17F20
	428 Call 0x1C17F20
	429 Call 0x1C17F20
	430 Call 0x1C17F28
	431 Call 0x1C17F20
	432 Call 0x1C17F44
	433 Move X1, X31
	434 Call 0x1C17DEC
	435 Call 0x1C17F20
	436 Move X0, X22
	437 Call 0x1C17F18
	438 Call 0x1C17F28
	439 Call 0x1C17F44
	440 Move X1, X31
	441 Call 0x1C17DEC
	442 Move [X31+8], X0
	443 Move [X31+16], X1
	444 Move X25, 0x759000
	445 Move X25, [X25+3024]
	446 NotImplemented "Instruction CMP not yet implemented."
	447 Call 0x3EB2AD0
	448 Move X22, [X0]
	449 Call 0x3EB2AE0
	450 Move X8, 0x78D000
	451 Move X8, [X8+2528]
	452 Add X0, X31, 112
	453 Move X1, [X8]
	454 Call Enumerator<Object>.Dispose, X0
	455 Compare X22, 0
	456 JumpIfEqual {201}
	457 Move X0, X22
	458 Call 0x1C17F18
	459 Move X19, X0
	460 Move X22, X31
	461 Move X19, X0
	462 Move X8, 0x78D000
	463 Move X8, [X8+2528]
	464 Move X1, [X8]
	465 Add X0, X31, 112
	466 Call Enumerator<Object>.Dispose, X0
	467 Compare X22, 0
	468 JumpIfEqual {494}
	469 Move X0, X22
	470 Call 0x1C17F18
	471 NotImplemented "Instruction CMP not yet implemented."
	472 Call 0x3EB2AD0
	473 Move X21, [X0]
	474 Call 0x3EB2AE0
	475 Move X8, 0x78D000
	476 Move X8, [X8+2536]
	477 Add X0, X31, 48
	478 Move X1, [X8]
	479 Call Enumerator<Object>.Dispose, X0
	480 Compare X21, 0
	481 JumpIfEqual {363}
	482 Move X0, X21
	483 Call 0x1C17F18
	484 Move X19, X0
	485 Move X21, X31
	486 Move X19, X0
	487 Move X8, 0x78D000
	488 Move X8, [X8+2536]
	489 Move X1, [X8]
	490 Add X0, X31, 48
	491 Call Enumerator<Object>.Dispose, X0
	492 Compare X21, 0
	493 JumpIfNotEqual {496}
	494 Move X0, X19
	495 Call 0x1D2D690
	496 Move X0, X21
	497 Call 0x1C17F18
	498 Call 0x1991590

Method: System.Int32 <RegisterDebug>b__50()

Disassembly:
	0x039C6A68 CBZ X8, 0x39C6BAC
	0x039C6A6C MOV X26, X31
	0x039C6A70 MOV X9, X31
	0x039C6A74 MOV W27, W31
	0x039C6A78 MOV W20, W31
	0x039C6A7C LDR W10, [X8 + 0x18]
	0x039C6A80 CMP W9, W10
	0x039C6A84 B.GE 0x39C6BB0
	0x039C6A88 CMP W9, W10
	0x039C6A8C B.CS 0x39C6BD4
	0x039C6A90 LDR X10, [X19 + 0x28]
	0x039C6A94 CBZ X10, 0x39C6BAC
	0x039C6A98 LDR W11, [X10 + 0x18]
	0x039C6A9C ADD X28, X9, 0x1
	0x039C6AA0 SUB W12, W28, 0x1
	0x039C6AA4 CMP W12, W11
	0x039C6AA8 B.CS 0x39C6BD4
	0x039C6AAC ADD X8, X8, X9, 0x3, LSL
	0x039C6AB0 ADD X9, X10, X26
	0x039C6AB4 LDR X25, [X8 + 0x20]
	0x039C6AB8 ADRP X8, 0x78C000
	0x039C6ABC LDR W21, [X9 + 0x20]
	0x039C6AC0 LDR W29, [X9 + 0x2C]
	0x039C6AC4 LDR X8, [X8 + 0xA50]
	0x039C6AC8 ADD X0, X31, 0x58
	0x039C6ACC MOV W1, W20
	0x039C6AD0 MOV W2, W21
	0x039C6AD4 LDR X3, [X8]
	0x039C6AD8 BL 0x24015E4
	0x039C6ADC CBZ X25, 0x39C6BAC
	0x039C6AE0 STP X0, X1, [X25 + 0x40]
	0x039C6AE4 ADRP X8, 0x756000
	0x039C6AE8 LDR X8, [X8 + 0x2B8]
	0x039C6AEC MUL W23, W27, W24
	0x039C6AF0 MUL W22, W24, W29
	0x039C6AF4 ADD X0, X31, 0x48
	0x039C6AF8 LDR X3, [X8]
	0x039C6AFC MOV W1, W23
	0x039C6B00 MOV W2, W22
	0x039C6B04 BL 0x23CA8FC
	0x039C6B08 LDR W8, [X31 + 0x4]
	0x039C6B0C STP X0, X1, [X25 + 0x50]
	0x039C6B10 CBZ W8, 0x39C6B94
	0x039C6B14 ADRP X8, 0x78C000
	0x039C6B18 LDR X8, [X8 + 0xA58]
	0x039C6B1C ADD X0, X31, 0x38
	0x039C6B20 MOV W1, W23
	0x039C6B24 MOV W2, W22
	0x039C6B28 LDR X3, [X8]
	0x039C6B2C BL 0x23F1D80
	0x039C6B30 STP X0, X1, [X25 + 0x60]
	0x039C6B34 ADRP X8, 0x78C000
	0x039C6B38 LDR X8, [X8 + 0xA48]
	0x039C6B3C ADD X0, X31, 0x28
	0x039C6B40 MOV W1, W23
	0x039C6B44 MOV W2, W22
	0x039C6B48 LDR X3, [X8]
	0x039C6B4C BL 0x23E5F50
	0x039C6B50 STP X0, X1, [X25 + 0x70]
	0x039C6B54 ADRP X8, 0x78C000
	0x039C6B58 LDR X8, [X8 + 0xA58]
	0x039C6B5C ADD X0, X31, 0x8
	0x039C6B60 MOV W1, W23
	0x039C6B64 MOV W2, W22
	0x039C6B68 LDR X3, [X8]
	0x039C6B6C BL 0x23F1D80
	0x039C6B70 STP X0, X1, [X25 + 0x80]
	0x039C6B74 ADRP X8, 0x78C000
	0x039C6B78 LDR X8, [X8 + 0xA48]
	0x039C6B7C ADD X0, X31, 0x18
	0x039C6B80 MOV W1, W23
	0x039C6B84 MOV W2, W22
	0x039C6B88 LDR X3, [X8]
	0x039C6B8C BL 0x23E5F50
	0x039C6B90 STP X0, X1, [X25 + 0x90]
	0x039C6B94 LDR X8, [X19 + 0x20]
	0x039C6B98 ADD X26, X26, 0x10
	0x039C6B9C ADD W20, W20, W21
	0x039C6BA0 ADD W27, W27, W29
	0x039C6BA4 MOV X9, X28
	0x039C6BA8 CBNZ X8, 0x39C6A7C
	0x039C6BAC BL 0x1C16F20
	0x039C6BB0 MOVZ W0, 0x1
	0x039C6BB4 LDP X20, X19, [X31 + 0xC0]
	0x039C6BB8 LDP X22, X21, [X31 + 0xB0]
	0x039C6BBC LDP X24, X23, [X31 + 0xA0]
	0x039C6BC0 LDP X26, X25, [X31 + 0x90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA1C000
	006 Move X20, 0x72E000
	007 Move W8, [X21+3279]
	008 Move X20, [X20+3216]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x78D000
	015 Move X0, [X0+2592]
	016 Call 0x1C17CF4
	017 Move X0, 0x72E000
	018 Move X0, [X0+3216]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3279], W8
	022 Move X0, [X20]
	023 Move X20, 0x78D000
	024 Move W8, [X0+224]
	025 Move X20, [X20+2592]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call SceneManager.GetActiveScene
	031 Move X8, [X20]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 And X0, X20, 0
	039 Call ProbeVolumeSceneData.GetSceneGUID, X0
	040 Move X1, X0
	041 Move X0, X19
	042 Call <>c__DisplayClass171_0.<RegisterDebug>g__RefreshScenarioNames|42, X0, X1
	043 Move X8, [X19+16]
	044 Compare X8, 0
	045 JumpIfEqual {95}
	046 Move X9, [X8+400]
	047 Compare X9, 0
	048 JumpIfEqual {95}
	049 Move [X9+68], W31
	050 Move X8, [X8+240]
	051 Compare X8, 0
	052 JumpIfEqual {95}
	053 Move X0, [X8+120]
	054 Move X1, X31
	055 Call String.IsNullOrEmpty, X0
	056 Move X8, [X19+16]
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {63}
	061 Compare X8, 0
	062 JumpIfNotEqual {103}
	063 Compare X8, 0
	064 JumpIfEqual {95}
	065 Move W20, 5
	066 Move X9, [X8+464]
	067 Compare X9, 0
	068 JumpIfEqual {95}
	069 Move W10, [X9+24]
	070 Subtract X21, X20, 4
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X0, [X9]
	074 Compare X0, 0
	075 JumpIfEqual {95}
	076 Move X1, X31
	077 Call GUIContent.get_text, X0
	078 Move X8, [X19+16]
	079 Compare X8, 0
	080 JumpIfEqual {95}
	081 Move X8, [X8+240]
	082 Compare X8, 0
	083 JumpIfEqual {95}
	084 Move X1, [X8+120]
	085 Move X2, X31
	086 Call String.op_Equality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {96}
	091 Move X8, [X19+16]
	092 Add X20, X20, 1
	093 Compare X8, 0
	094 JumpIfNotEqual {66}
	095 Call 0x1C17F20
	096 Move X8, [X19+16]
	097 Compare X8, 0
	098 JumpIfEqual {95}
	099 Move X9, [X8+400]
	100 Compare X9, 0
	101 JumpIfEqual {95}
	102 Move [X9+68], W21
	103 Move X8, [X8+400]
	104 Compare X8, 0
	105 JumpIfEqual {95}
	106 Move W0, [X8+68]
	107 Move X20, [X31+16]
	108 Move X19, [X31+24]
	109 Move X30, [X31+32]
	110 Move X21, [X31+40]
	111 Return X0
	112 Call 0x1C17F28

Method: System.Void <RegisterDebug>b__51(System.Int32 value)

Disassembly:
	0x039C6C90 BL 0x1C16CF4
	0x039C6C94 MOVZ W8, 0x1
	0x039C6C98 STRB W8, [X20 + 0xCD4]
	0x039C6C9C LDR X0, [X21]
	0x039C6CA0 STP X31, X31, [X31 + 0xC8]
	0x039C6CA4 STP X31, X31, [X31 + 0xB8]
	0x039C6CA8 STP X31, X31, [X31 + 0xA8]
	0x039C6CAC STP X31, X31, [X31 + 0x98]
	0x039C6CB0 STP X31, X31, [X31 + 0x88]
	0x039C6CB4 STP X31, X31, [X31 + 0x78]
	0x039C6CB8 STP X31, X31, [X31 + 0x68]
	0x039C6CBC LDR W8, [X0 + 0xE0]
	0x039C6CC0 CBNZ W8, 0x39C6CC8
	0x039C6CC4 BL 0x1C16DFC
	0x039C6CC8 MOV X0, X19
	0x039C6CCC MOV X1, X31
	0x039C6CD0 MOV X2, X31
	0x039C6CD4 BL 0x3C3883C
	0x039C6CD8 TBZ X0, 0x0, 0x39C6CE4
	0x039C6CDC MOV W0, W31
	0x039C6CE0 B 0x39C70D4
	0x039C6CE4 CBZ X19, 0x39C70CC
	0x039C6CE8 ADRP X25, 0x78C000
	0x039C6CEC LDR W23, [X26 + 0x74]
	0x039C6CF0 LDR W24, [X26 + 0x3C]
	0x039C6CF4 LDR X25, [X25 + 0xA80]
	0x039C6CF8 MOV X0, X19
	0x039C6CFC LDR X1, [X25]
	0x039C6D00 BL 0x229BE9C
	0x039C6D04 ADRP X8, 0x78C000
	0x039C6D08 LDR X8, [X8 + 0xA88]
	0x039C6D0C MOV X19, X0
	0x039C6D10 MOV X20, X1
	0x039C6D14 ADD X4, X31, 0xDC
	0x039C6D18 LDR X5, [X8]
	0x039C6D1C UBFM W8, W23, 0x18, 0x17

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Compare W1, 0
	007 JumpIfEqual {23}
	008 Move X8, [X20+16]
	009 Compare X8, 0
	010 JumpIfEqual {43}
	011 Move X8, [X8+464]
	012 Compare X8, 0
	013 JumpIfEqual {43}
	014 Move W9, [X8+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X8, W19
	017 Move X0, [X8+32]
	018 Compare X0, 0
	019 JumpIfEqual {43}
	020 Move X1, X31
	021 Call GUIContent.get_text, X0
	022 Move X1, X0
	023 Move X1, X31
	024 Move X8, [X20+16]
	025 Compare X8, 0
	026 JumpIfEqual {43}
	027 Move X0, [X8+240]
	028 Compare X0, 0
	029 JumpIfEqual {43}
	030 Move V0, [X0+128]
	031 Call ProbeVolumeSceneData.BlendLightingScenario, X0, X1, V0
	032 Move X8, [X20+16]
	033 Compare X8, 0
	034 JumpIfEqual {43}
	035 Move X8, [X8+400]
	036 Compare X8, 0
	037 JumpIfEqual {43}
	038 Move [X8+68], W19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Int32 <RegisterDebug>b__52()

Disassembly:
	0x039C7120 BL 0x1C16CF4
	0x039C7124 MOVZ W8, 0x1
	0x039C7128 STRB W8, [X21 + 0xCD5]
	0x039C712C MOVZ W8, 0x5
	0x039C7130 STR W8, [X19 + 0x18]
	0x039C7134 LDR X8, [X20]
	0x039C7138 MOV X0, X19
	0x039C713C MOV X1, X31
	0x039C7140 STR X8, [X19 + 0x78]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move W0, [X8+68]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void <RegisterDebug>b__53(System.Int32 value)

Disassembly:
	0x039C7144 LDP X20, X19, [X31 + 0x10]
	0x039C7148 LDP X30, X21, [X31], #0x20
	0x039C714C B 0x3C36D2C
	0x039C7150 ADRP X8, 0xFFFFFFFFFD126000
	0x039C7154 LDR V0, [X8 + 0xAF8]
	0x039C7158 MOVZ W8, 0x1
	0x039C715C STRB W8, [X0]
	0x039C7160 STR W8, [X0 + 0xC]
	0x039C7164 STUR D0, [X0 + 0x4]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X8, [X8+400]
	006 Compare X8, 0
	007 JumpIfEqual {11}
	008 Move [X8+68], W1
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

