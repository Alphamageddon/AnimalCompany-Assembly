Type: UnityEngine.Rendering.ProbeVolumeAsset

Method: System.Int32 get_Version()

Disassembly:
	0x039C765C STR X9, [X31 + 0x70]
	0x039C7660 LDR W11, [X0 + 0x1C]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Int32 get_maxSubdivision()

Disassembly:
	0x039C7664 LDR X9, [X0 + 0x10]
	0x039C7668 ADD W11, W11, 0x1
	0x039C766C STR W11, [X0 + 0x1C]

ISIL:
	001 Move W8, [X0+132]
	002 Add W0, W8, 1
	003 Return X0

Method: System.Single get_minBrickSize()

Disassembly:
	0x039C7670 CBZ X9, 0x39C7700
	0x039C7674 LDRSW X11, [X0 + 0x18]
	0x039C7678 LDR W12, [X9 + 0x18]
	0x039C767C CMP W11, W12
	0x039C7680 B.CS 0x39C76A8
	0x039C7684 ADD W10, W11, 0x1
	0x039C7688 ADD X9, X9, X11, 0x5, LSL

ISIL:
	001 Move V0, [X0+136]
	002 Move X8, -49135616
	003 Move V1, [X8+816]
	004 Move S2, 3
	005 Multiply S0, S0, S2
	006 NotImplemented "Instruction FMAX not yet implemented."
	007 Return V0

Method: System.Boolean CompatibleWith(UnityEngine.Rendering.ProbeVolumeAsset otherAsset)

Disassembly:
	0x039C768C STR W10, [X0 + 0x18]
	0x039C7690 STR X8, [X9 + 0x20]
	0x039C7694 LDR X8, [X31 + 0x70]
	0x039C7698 LDR V0, [X31 + 0x6]
	0x039C769C STR X8, [X9 + 0x38]
	0x039C76A0 STUR V0, [X9 + 0x28]
	0x039C76A4 B 0x39C7620
	0x039C76A8 LDR X9, [X10 + 0x20]
	0x039C76AC LDR X10, [X31 + 0x70]
	0x039C76B0 LDR V0, [X31 + 0x6]
	0x039C76B4 LDR X9, [X9 + 0xC0]
	0x039C76B8 LDR X2, [X9 + 0x70]
	0x039C76BC STR X8, [X31 + 0x80]
	0x039C76C0 STR X10, [X24 + 0x10]
	0x039C76C4 STR V0, [X24]
	0x039C76C8 ADD X1, X31, 0x80
	0x039C76CC BL 0x31233F4
	0x039C76D0 B 0x39C7620
	0x039C76D4 LDR X1, [X20]
	0x039C76D8 ADD X0, X31, 0x20
	0x039C76DC BL 0x2C13B5C
	0x039C76E0 LDP X20, X19, [X31 + 0xD0]
	0x039C76E4 LDP X22, X21, [X31 + 0xC0]
	0x039C76E8 LDP X24, X23, [X31 + 0xB0]
	0x039C76EC LDR X30, [X31 + 0xA0]
	0x039C76F0 ADD X31, X31, 0xE0
	0x039C76F4 RET
	0x039C76F8 MOV X21, X20
	0x039C76FC BL 0x1C16F20
	0x039C7700 MOV X21, X20

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {27}
	004 Move W8, [X0+132]
	005 Move W9, [X1+132]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move V0, [X0+136]
	008 Move X8, -49135616
	009 Move V1, [X1+136]
	010 Move V2, [X8+816]
	011 Move S3, 3
	012 Multiply S0, S0, S3
	013 Multiply S1, S1, S3
	014 NotImplemented "Instruction FMAX not yet implemented."
	015 NotImplemented "Instruction FMAX not yet implemented."
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move W8, [X0+128]
	018 Move W9, [X1+128]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move W8, [X0+116]
	021 Move W9, [X1+116]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 Move W0, W31
	025 Move X30, [X31+16]
	026 Return X0
	027 Call 0x1C17F20

Method: System.Boolean IsInvalid()

Disassembly:
	0x039C7704 BL 0x1C16F20
	0x039C7708 BL 0x1C16F20
	0x039C770C B 0x39C7710
	0x039C7710 MOV X21, X20
	0x039C7714 B 0x39C7718
	0x039C7718 MOV X19, X0
	0x039C771C CMP W1, 0x1
	0x039C7720 B.NE 0x39C774C
	0x039C7724 MOV X0, X19
	0x039C7728 BL 0x3EB1AD0
	0x039C772C LDR X20, [X0]
	0x039C7730 BL 0x3EB1AE0
	0x039C7734 LDR X1, [X21]
	0x039C7738 ADD X0, X31, 0x20
	0x039C773C BL 0x2C13B5C

ISIL:
	001 Move W8, [X0+64]
	002 Move W9, [X0+76]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, [X0+68]
	005 Move W9, [X0+80]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W0, 1
	008 Return X0
	009 Move W8, [X0+72]
	010 Move W9, [X0+84]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Return X0

Method: System.String GetSerializedFullPath()

Disassembly:
	0x039C7740 CBZ X20, 0x39C76E0
	0x039C7744 MOV X0, X20

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.Int32 AlignUp16(System.Int32 count)

Disassembly:
	0x039C7748 BL 0x1C16F18
	0x039C774C MOV X20, X31
	0x039C7750 B 0x39C7758
	0x039C7754 MOV X19, X0
	0x039C7758 LDR X1, [X21]
	0x039C775C ADD X0, X31, 0x20
	0x039C7760 BL 0x2C13B5C
	0x039C7764 CBNZ X20, 0x39C7770
	0x039C7768 MOV X0, X19
	0x039C776C BL 0x1D2C690

ISIL:
	001 Add W8, W0, 15
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 And W8, W8, 0xFFFFFFF0
	005 Subtract W8, W0, W8
	006 Move W9, 16
	007 Subtract W8, W9, W8
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Add W0, W8, W0
	010 Return X0

Method: Unity.Collections.NativeArray`1<T> GetSubArray(Unity.Collections.NativeArray`1<System.Byte> input, System.Int32 count, ref System.Int32 offset)

Disassembly:
	0x022366CC ADD X10, X10, 0x10
	0x022366D0 B.NE 0x22366BC
	0x022366D4 MOVZ W2, 0x4
	0x022366D8 MOV X0, X21
	0x022366DC BL 0x1C5C788
	0x022366E0 B 0x22366F4
	0x022366E4 LDR W9, [X10]
	0x022366E8 ADD W9, W9, 0x4
	0x022366EC ADD X8, X8, W9, 0x4, SXTW
	0x022366F0 ADD X0, X8, 0x138
	0x022366F4 LDP X8, X1, [X0]
	0x022366F8 MOV X0, X21
	0x022366FC BLR X8
	0x02236700 LDR X8, [X19 + 0x38]
	0x02236704 MOV X0, X20
	0x02236708 LDR X8, [X8]
	0x0223670C LDR X8, [X8 + 0x80]
	0x02236710 ADD X1, X8, 0x40
	0x02236714 BL 0x1C16D18
	0x02236718 LDR X0, [X0]
	0x0223671C LDP X20, X19, [X31 + 0x30]
	0x02236720 LDP X22, X21, [X31 + 0x20]
	0x02236724 LDP X24, X23, [X31 + 0x10]
	0x02236728 LDP X30, X25, [X31], #0x40
	0x0223672C RET
	0x02236730 BL 0x1C16F20
	0x02236734 STR X30, [X31 - 0x30]!
	0x02236738 STP X22, X21, [X31 + 0x10]
	0x0223673C STP X20, X19, [X31 + 0x20]
	0x02236740 LDR X8, [X3 + 0x38]
	0x02236744 MOV X20, X3
	0x02236748 MOV X19, X2
	0x0223674C MOV X21, X1
	0x02236750 MOV X22, X0
	0x02236754 CBNZ X8, 0x2236764
	0x02236758 MOV X0, X20
	0x0223675C BL 0x1C5C6E0
	0x02236760 LDR X8, [X20 + 0x38]
	0x02236764 LDR X2, [X8 + 0x10]
	0x02236768 MOV X0, X22
	0x0223676C MOV X1, X21
	0x02236770 LDR X8, [X2]
	0x02236774 BLR X8
	0x02236778 LDR X8, [X20 + 0x38]
	0x0223677C MOV X1, X19
	0x02236780 LDR X2, [X8 + 0x28]
	0x02236784 LDR X8, [X2]
	0x02236788 BLR X8
	0x0223678C LDR X8, [X20 + 0x38]
	0x02236790 MOV X19, X0
	0x02236794 LDR X8, [X8 + 0x48]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move [X31+16], X1
	009 Move [X31+24], X2
	010 Move X8, [X5+56]
	011 Move X21, X5
	012 Move X19, X4
	013 Move X23, X2
	014 Move W20, W3
	015 Compare X8, 0
	016 JumpIfNotEqual {25}
	017 Move X0, 0x1EE7000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move X8, [X21+56]
	021 Compare X8, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X21
	024 Call 0x1C5D6E0
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Move W1, [X19]
	028 Move X22, X31
	029 Add W8, W1, W20
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X23, X31
	032 Move X8, 0x1EE7000
	033 Move X8, [X8+696]
	034 Add X0, X31, 16
	035 Move W2, W20
	036 Move X3, [X8]
	037 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	038 Move [X31], X0
	039 Move [X31+8], X1
	040 Move X8, [X21+56]
	041 Add X0, X31, 0
	042 Move W1, 1
	043 Move X2, [X8+16]
	044 Call 0x2134254, X0, X1
	045 Move W8, [X19]
	046 Move X22, X0
	047 Move X23, X1
	048 Move X1, X31
	049 Add W0, W8, W20
	050 Call ProbeVolumeAsset.AlignUp16, X0
	051 Move [X19], W0
	052 Move X0, X22
	053 Move X1, X23
	054 Move X20, [X31+64]
	055 Move X19, [X31+72]
	056 Move X22, [X31+48]
	057 Move X21, [X31+56]
	058 Move X30, [X31+32]
	059 Move X23, [X31+40]
	060 Add X31, X31, 80
	061 Return X0

Method: System.Boolean ResolveSharedCellData(UnityEngine.TextAsset cellSharedDataAsset, UnityEngine.TextAsset cellSupportDataAsset)

Disassembly:
	0x039C7770 MOV X0, X20
	0x039C7774 BL 0x1C16F18
	0x039C7778 BL 0x1990590
	0x039C777C STR X30, [X31 - 0x20]!
	0x039C7780 STP X20, X19, [X31 + 0x10]
	0x039C7784 ADRP X20, 0xA1A000
	0x039C7788 LDRB W8, [X20 + 0xCD8]
	0x039C778C MOV X19, X0
	0x039C7790 TBNZ X8, 0x0, 0x39C77A8
	0x039C7794 ADRP X0, 0x78B000
	0x039C7798 LDR X0, [X0 + 0xAA0]
	0x039C779C BL 0x1C16CF4
	0x039C77A0 MOVZ W8, 0x1
	0x039C77A4 STRB W8, [X20 + 0xCD8]
	0x039C77A8 MOV X0, X19
	0x039C77AC BL 0x39C77D4
	0x039C77B0 LDR X0, [X19 + 0x40]
	0x039C77B4 CBZ X0, 0x39C77D0
	0x039C77B8 ADRP X8, 0x78B000
	0x039C77BC LDR X8, [X8 + 0xAA0]
	0x039C77C0 LDP X20, X19, [X31 + 0x10]
	0x039C77C4 LDR X1, [X8]
	0x039C77C8 LDR X30, [X31], #0x20
	0x039C77CC B 0x2ADDD54
	0x039C77D0 BL 0x1C16F20
	0x039C77D4 STP X30, X21, [X31 - 0x20]!
	0x039C77D8 STP X20, X19, [X31 + 0x10]
	0x039C77DC ADRP X21, 0xA1A000
	0x039C77E0 ADRP X20, 0x72C000
	0x039C77E4 LDRB W8, [X21 + 0xCDE]
	0x039C77E8 LDR X20, [X20 + 0x598]
	0x039C77EC MOV X19, X0
	0x039C77F0 TBNZ X8, 0x0, 0x39C7814
	0x039C77F4 ADRP X0, 0x72C000
	0x039C77F8 LDR X0, [X0 + 0x598]
	0x039C77FC BL 0x1C16CF4
	0x039C7800 ADRP X0, 0x78A000
	0x039C7804 LDR X0, [X0 + 0xF48]
	0x039C7808 BL 0x1C16CF4
	0x039C780C MOVZ W8, 0x1
	0x039C7810 STRB W8, [X21 + 0xCDE]
	0x039C7814 LDR X0, [X20]
	0x039C7818 LDR X20, [X19 + 0x20]
	0x039C781C LDR W8, [X0 + 0xE0]
	0x039C7820 CBNZ W8, 0x39C7828
	0x039C7824 BL 0x1C16DFC
	0x039C7828 MOV X0, X20
	0x039C782C MOV X1, X31
	0x039C7830 MOV X2, X31
	0x039C7834 BL 0x3C354F8
	0x039C7838 TBZ X0, 0x0, 0x39C78A0
	0x039C783C ADRP X20, 0x78A000
	0x039C7840 LDR X20, [X20 + 0xF48]
	0x039C7844 LDR X0, [X20]
	0x039C7848 LDR W8, [X0 + 0xE0]
	0x039C784C CBNZ W8, 0x39C7854
	0x039C7850 BL 0x1C16DFC
	0x039C7854 ADRP X21, 0xA1A000
	0x039C7858 LDRB W8, [X21 + 0xCB9]
	0x039C785C CBNZ W8, 0x39C7874
	0x039C7860 ADRP X0, 0x78A000
	0x039C7864 LDR X0, [X0 + 0xF48]
	0x039C7868 BL 0x1C16CF4
	0x039C786C MOVZ W8, 0x1
	0x039C7870 STRB W8, [X21 + 0xCB9]
	0x039C7874 LDR X0, [X20]
	0x039C7878 LDR W8, [X0 + 0xE0]
	0x039C787C CBNZ W8, 0x39C7888
	0x039C7880 BL 0x1C16DFC
	0x039C7884 LDR X0, [X20]
	0x039C7888 LDR X8, [X0 + 0xB8]
	0x039C788C LDR X0, [X8 + 0x8]
	0x039C7890 CBZ X0, 0x39C78B0
	0x039C7894 LDR X1, [X19 + 0x20]
	0x039C7898 MOV X2, X31
	0x039C789C BL 0x39BBF28
	0x039C78A0 STRB W31, [X19 + 0x48]
	0x039C78A4 LDP X20, X19, [X31 + 0x10]
	0x039C78A8 LDP X30, X21, [X31], #0x20
	0x039C78AC RET
	0x039C78B0 BL 0x1C16F20
	0x039C78B4 STP X30, X21, [X31 - 0x20]!
	0x039C78B8 STP X20, X19, [X31 + 0x10]
	0x039C78BC ADRP X21, 0xA1A000
	0x039C78C0 LDRB W8, [X21 + 0xCD9]
	0x039C78C4 MOV X19, X1
	0x039C78C8 MOV X20, X0
	0x039C78CC TBNZ X8, 0x0, 0x39C78E4
	0x039C78D0 ADRP X0, 0x78B000
	0x039C78D4 LDR X0, [X0 + 0xB08]
	0x039C78D8 BL 0x1C16CF4
	0x039C78DC MOVZ W8, 0x1
	0x039C78E0 STRB W8, [X21 + 0xCD9]
	0x039C78E4 LDR X0, [X20 + 0x40]
	0x039C78E8 CBZ X0, 0x39C7908
	0x039C78EC ADRP X8, 0x78B000
	0x039C78F0 LDR X8, [X8 + 0xB08]
	0x039C78F4 MOV X1, X19
	0x039C78F8 LDP X20, X19, [X31 + 0x10]
	0x039C78FC LDR X2, [X8]
	0x039C7900 LDP X30, X21, [X31], #0x20
	0x039C7904 B 0x2ADF0B8
	0x039C7908 BL 0x1C16F20
	0x039C790C SUB X31, X31, 0x80
	0x039C7910 STR X30, [X31 + 0x50]
	0x039C7914 STP X22, X21, [X31 + 0x60]
	0x039C7918 STP X20, X19, [X31 + 0x70]
	0x039C791C ADRP X22, 0xA1A000
	0x039C7920 LDRB W8, [X22 + 0xCDA]
	0x039C7924 MOV X19, X2
	0x039C7928 MOV X21, X1
	0x039C792C MOV X20, X0
	0x039C7930 TBNZ X8, 0x0, 0x39C7960
	0x039C7934 ADRP X0, 0x78B000
	0x039C7938 LDR X0, [X0 + 0xA98]
	0x039C793C BL 0x1C16CF4
	0x039C7940 ADRP X0, 0x78B000
	0x039C7944 LDR X0, [X0 + 0xB08]
	0x039C7948 BL 0x1C16CF4
	0x039C794C ADRP X0, 0x78B000
	0x039C7950 LDR X0, [X0 + 0xB10]
	0x039C7954 BL 0x1C16CF4
	0x039C7958 MOVZ W8, 0x1
	0x039C795C STRB W8, [X22 + 0xCDA]
	0x039C7960 STP X31, X31, [X31 + 0x18]
	0x039C7964 STR X31, [X31 + 0x28]
	0x039C7968 LDR X0, [X20 + 0x40]
	0x039C796C CBZ X0, 0x39C79FC
	0x039C7970 ADRP X8, 0x78B000
	0x039C7974 LDR X8, [X8 + 0xB10]
	0x039C7978 ADD X2, X31, 0x18
	0x039C797C MOV X1, X21
	0x039C7980 LDR X3, [X8]
	0x039C7984 BL 0x2ADF708
	0x039C7988 TBZ X0, 0x0, 0x39C79E8
	0x039C798C LDR X0, [X20 + 0x40]
	0x039C7990 CBZ X0, 0x39C79FC
	0x039C7994 ADRP X8, 0x78B000
	0x039C7998 LDR X8, [X8 + 0xB08]
	0x039C799C MOV X1, X21
	0x039C79A0 LDR X2, [X8]
	0x039C79A4 BL 0x2ADF0B8
	0x039C79A8 LDR X0, [X20 + 0x40]
	0x039C79AC LDUR V0, [X31 + 0x18]
	0x039C79B0 LDR X8, [X31 + 0x28]
	0x039C79B4 STR V0, [X31]
	0x039C79B8 STR X8, [X31 + 0x10]
	0x039C79BC CBZ X0, 0x39C79FC
	0x039C79C0 ADRP X8, 0x78B000
	0x039C79C4 LDR X8, [X8 + 0xA98]
	0x039C79C8 LDR V0, [X31]
	0x039C79CC LDR X9, [X31 + 0x10]
	0x039C79D0 ADD X2, X31, 0x30
	0x039C79D4 LDR X3, [X8]
	0x039C79D8 MOV X1, X19
	0x039C79DC STR V0, [X31 + 0x3]
	0x039C79E0 STR X9, [X31 + 0x40]
	0x039C79E4 BL 0x2ADDACC
	0x039C79E8 LDP X20, X19, [X31 + 0x70]
	0x039C79EC LDP X22, X21, [X31 + 0x60]
	0x039C79F0 LDR X30, [X31 + 0x50]
	0x039C79F4 ADD X31, X31, 0x80
	0x039C79F8 RET
	0x039C79FC BL 0x1C16F20
	0x039C7A00 STP X30, X19, [X31 - 0x10]!
	0x039C7A04 MOV X19, X0
	0x039C7A08 BL 0x39C7A28
	0x039C7A0C TBZ X0, 0x0, 0x39C7A1C
	0x039C7A10 MOV X0, X19
	0x039C7A14 LDP X30, X19, [X31], #0x10
	0x039C7A18 B 0x39C7AB0
	0x039C7A1C MOV W0, W31
	0x039C7A20 LDP X30, X19, [X31], #0x10
	0x039C7A24 RET
	0x039C7A28 STP X30, X21, [X31 - 0x20]!
	0x039C7A2C STP X20, X19, [X31 + 0x10]
	0x039C7A30 ADRP X21, 0xA1A000
	0x039C7A34 ADRP X20, 0x72C000
	0x039C7A38 LDRB W8, [X21 + 0xCDB]
	0x039C7A3C LDR X20, [X20 + 0x598]
	0x039C7A40 MOV X19, X0
	0x039C7A44 TBNZ X8, 0x0, 0x39C7A5C
	0x039C7A48 ADRP X0, 0x72C000
	0x039C7A4C LDR X0, [X0 + 0x598]
	0x039C7A50 BL 0x1C16CF4
	0x039C7A54 MOVZ W8, 0x1
	0x039C7A58 STRB W8, [X21 + 0xCDB]
	0x039C7A5C LDR X0, [X20]
	0x039C7A60 LDR X20, [X19 + 0x20]
	0x039C7A64 LDR W8, [X0 + 0xE0]
	0x039C7A68 CBNZ W8, 0x39C7A70
	0x039C7A6C BL 0x1C16DFC
	0x039C7A70 MOV X0, X20
	0x039C7A74 MOV X1, X31
	0x039C7A78 MOV X2, X31
	0x039C7A7C BL 0x3C354F8
	0x039C7A80 TBZ X0, 0x0, 0x39C7A9C
	0x039C7A84 LDR X0, [X19 + 0x20]
	0x039C7A88 CBZ X0, 0x39C7AAC
	0x039C7A8C LDP X1, X2, [X19 + 0x28]
	0x039C7A90 LDP X20, X19, [X31 + 0x10]
	0x039C7A94 LDP X30, X21, [X31], #0x20
	0x039C7A98 B 0x39C6770
	0x039C7A9C LDP X20, X19, [X31 + 0x10]
	0x039C7AA0 MOV W0, W31
	0x039C7AA4 LDP X30, X21, [X31], #0x20
	0x039C7AA8 RET
	0x039C7AAC BL 0x1C16F20
	0x039C7AB0 SUB X31, X31, 0x60
	0x039C7AB4 STR X30, [X31 + 0x30]
	0x039C7AB8 STP X22, X21, [X31 + 0x40]
	0x039C7ABC STP X20, X19, [X31 + 0x50]
	0x039C7AC0 ADRP X20, 0xA1A000
	0x039C7AC4 LDRB W8, [X20 + 0xCDC]
	0x039C7AC8 MOV X19, X0
	0x039C7ACC TBNZ X8, 0x0, 0x39C7AE4
	0x039C7AD0 ADRP X0, 0x78B000
	0x039C7AD4 LDR X0, [X0 + 0xB10]
	0x039C7AD8 BL 0x1C16CF4
	0x039C7ADC MOVZ W8, 0x1
	0x039C7AE0 STRB W8, [X20 + 0xCDC]
	0x039C7AE4 STP X31, X31, [X31 + 0x18]
	0x039C7AE8 STR X31, [X31 + 0x28]
	0x039C7AEC STP X31, X31, [X31]
	0x039C7AF0 STR X31, [X31 + 0x10]
	0x039C7AF4 ADRP X22, 0x78B000
	0x039C7AF8 LDP X1, X21, [X19 + 0x50]
	0x039C7AFC LDR X22, [X22 + 0xB10]
	0x039C7B00 CBZ X1, 0x39C7B38
	0x039C7B04 LDR X0, [X19 + 0x40]
	0x039C7B08 CBZ X0, 0x39C7BCC
	0x039C7B0C LDR X3, [X22]
	0x039C7B10 ADD X2, X31, 0x18
	0x039C7B14 BL 0x2ADF708
	0x039C7B18 TBZ X0, 0x0, 0x39C7B48
	0x039C7B1C LDR X0, [X19 + 0x20]
	0x039C7B20 CBZ X0, 0x39C7BCC
	0x039C7B24 LDP X1, X2, [X31 + 0x20]
	0x039C7B28 MOV W3, W31
	0x039C7B2C BL 0x39C6C00
	0x039C7B30 AND W20, W0, 0x1
	0x039C7B34 B 0x39C7B4C
	0x039C7B38 MOV W20, W31
	0x039C7B3C MOV X1, X21
	0x039C7B40 CBNZ X1, 0x39C7B54
	0x039C7B44 B 0x39C7B88
	0x039C7B48 MOV W20, W31
	0x039C7B4C LDR X1, [X19 + 0x58]
	0x039C7B50 CBZ X1, 0x39C7B88
	0x039C7B54 LDR X0, [X19 + 0x40]
	0x039C7B58 CBZ X0, 0x39C7BCC
	0x039C7B5C LDR X3, [X22]
	0x039C7B60 ADD X2, X31, 0x0
	0x039C7B64 BL 0x2ADF708
	0x039C7B68 TBZ X0, 0x0, 0x39C7B88
	0x039C7B6C LDR X0, [X19 + 0x20]
	0x039C7B70 CBZ X0, 0x39C7BCC
	0x039C7B74 LDP X1, X2, [X31 + 0x8]
	0x039C7B78 MOV W3, W20
	0x039C7B7C BL 0x39C6C00
	0x039C7B80 AND W8, W0, 0x1
	0x039C7B84 ADD W20, W20, W8
	0x039C7B88 LDR X8, [X19 + 0x20]
	0x039C7B8C CBZ X8, 0x39C7BCC
	0x039C7B90 LDR X8, [X8 + 0x20]
	0x039C7B94 CMP W20, 0x2
	0x039C7B98 CSET W9, EQ
	0x039C7B9C CBZ X8, 0x39C7BCC
	0x039C7BA0 LDR W10, [X8 + 0x18]
	0x039C7BA4 MOV W11, W31
	0x039C7BA8 CMP W11, W10
	0x039C7BAC B.GE 0x39C7BD0
	0x039C7BB0 B.CS 0x39C7BF8
	0x039C7BB4 ADD X12, X8, W11, 0x3, SXTW
	0x039C7BB8 LDR X12, [X12 + 0x20]
	0x039C7BBC CBZ X12, 0x39C7BCC
	0x039C7BC0 ADD W11, W11, 0x1
	0x039C7BC4 STRB W9, [X12 + 0x34]
	0x039C7BC8 CBNZ X8, 0x39C7BA8
	0x039C7BCC BL 0x1C16F20
	0x039C7BD0 CMP X21, 0x0
	0x039C7BD4 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+112], X29
	003 Move [X31+120], X30
	004 Move [X31+128], X28
	005 Move [X31+136], X27
	006 Move [X31+144], X26
	007 Move [X31+152], X25
	008 Move [X31+160], X24
	009 Move [X31+168], X23
	010 Move [X31+176], X22
	011 Move [X31+184], X21
	012 Move [X31+192], X20
	013 Move [X31+200], X19
	014 Move X21, 0xA1B000
	015 Move X25, 0x72D000
	016 Move W8, [X21+3283]
	017 Move X25, [X25+1432]
	018 Move X20, X2
	019 Move X22, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {60}
	025 Move X0, 0x78C000
	026 Move X0, [X0+2632]
	027 Call 0x1C17CF4
	028 Move X0, 0x78C000
	029 Move X0, [X0+2640]
	030 Call 0x1C17CF4
	031 Move X0, 0x78C000
	032 Move X0, [X0+2648]
	033 Call 0x1C17CF4
	034 Move X0, 0x756000
	035 Move X0, [X0+696]
	036 Call 0x1C17CF4
	037 Move X0, 0x783000
	038 Move X0, [X0+1696]
	039 Call 0x1C17CF4
	040 Move X0, 0x72D000
	041 Move X0, [X0+1432]
	042 Call 0x1C17CF4
	043 Move X0, 0x78C000
	044 Move X0, [X0+2656]
	045 Call 0x1C17CF4
	046 Move X0, 0x78C000
	047 Move X0, [X0+2664]
	048 Call 0x1C17CF4
	049 Move X0, 0x78C000
	050 Move X0, [X0+2672]
	051 Call 0x1C17CF4
	052 Move X0, 0x78C000
	053 Move X0, [X0+2680]
	054 Call 0x1C17CF4
	055 Move X0, 0x78C000
	056 Move X0, [X0+2688]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X21+3283], W8
	060 Move X0, [X25]
	061 Move [X31+88], X31
	062 Move [X31+96], X31
	063 Move [X31+72], X31
	064 Move [X31+80], X31
	065 Move [X31+56], X31
	066 Move [X31+64], X31
	067 Move [X31+40], X31
	068 Move [X31+48], X31
	069 Move [X31+24], X31
	070 Move [X31+32], X31
	071 Move [X31+8], X31
	072 Move [X31+16], X31
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X22
	078 Move X1, X31
	079 Move X2, X31
	080 Call Object.op_Equality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {86}
	085 Move W0, W31
	086 Compare X22, 0
	087 JumpIfEqual {314}
	088 Move X26, 0x78C000
	089 Move W8, [X19+116]
	090 Move W9, [X19+60]
	091 Move X26, [X26+2688]
	092 Move X0, X22
	093 Move W24, W8
	094 ShiftRight W24, 26
	095 And W24, W24, 0x1FFFFFF
	096 Multiply W21, W24, W9
	097 Move X1, [X26]
	098 Call 0x229CE9C, X0
	099 Move [X31+108], W31
	100 Move X8, 0x78C000
	101 Move X8, [X8+2656]
	102 Move W3, [X19+48]
	103 Move X22, X0
	104 Move X23, X1
	105 Move X5, [X8]
	106 Add X4, X31, 108
	107 Move X0, X19
	108 Move X1, X22
	109 Move X2, X23
	110 Call ProbeVolumeAsset.GetSubArray, X0, X1, X2, X3
	111 Move X8, 0x78C000
	112 Move X8, [X8+2664]
	113 Move [X31+88], X0
	114 Move [X31+96], X1
	115 Add X4, X31, 108
	116 Move X0, X19
	117 Move X5, [X8]
	118 Move X1, X22
	119 Move X2, X23
	120 Move W3, W21
	121 Call 0x22366CC, X0, X1, X2, X3
	122 Add W10, W23, 15
	123 NotImplemented "Instruction CMP not yet implemented."
	124 NotImplemented "Instruction CSEL not yet implemented."
	125 And W10, W10, 0xFFFFFFF0
	126 Move W9, [X31+108]
	127 Move W11, 16
	128 Subtract W10, W23, W10
	129 Subtract W10, W11, W10
	130 NotImplemented "Instruction CSEL not yet implemented."
	131 Add W10, W10, W23
	132 Move X8, X0
	133 Move W0, W31
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move [X31+72], X8
	136 Move [X31+80], X1
	137 Move X0, [X25]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move X1, X31
	144 Call Object.op_Implicit, X0
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {214}
	149 Compare X20, 0
	150 JumpIfEqual {314}
	151 Move X1, [X26]
	152 Move X0, X20
	153 Call 0x229CE9C, X0
	154 Move [X31+108], W31
	155 Compare X0, 0
	156 JumpIfEqual {215}
	157 Move X23, 0x78C000
	158 Move X23, [X23+2680]
	159 Move X22, X0
	160 Move X20, X1
	161 Add X4, X31, 108
	162 Move X5, [X23]
	163 Move X0, X19
	164 Move X1, X22
	165 Move X2, X20
	166 Move W3, W21
	167 Call ProbeVolumeAsset.GetSubArray, X0, X1, X2, X3
	168 Move X25, 0x78C000
	169 Move X25, [X25+2672]
	170 Move [X31+56], X0
	171 Move [X31+64], X1
	172 Add X4, X31, 108
	173 Move X0, X19
	174 Move X5, [X25]
	175 Move X1, X22
	176 Move X2, X20
	177 Move W3, W21
	178 Call ProbeVolumeAsset.GetSubArray, X0, X1, X2, X3
	179 Move X5, [X25]
	180 Move [X31+40], X0
	181 Move [X31+48], X1
	182 Add X4, X31, 108
	183 Move X0, X19
	184 Move X1, X22
	185 Move X2, X20
	186 Move W3, W21
	187 Call ProbeVolumeAsset.GetSubArray, X0, X1, X2, X3
	188 Move X5, [X23]
	189 Move [X31+24], X0
	190 Move [X31+32], X1
	191 Add X4, X31, 108
	192 Move X0, X19
	193 Move X1, X22
	194 Move X2, X20
	195 Move W3, W21
	196 Call ProbeVolumeAsset.GetSubArray, X0, X1, X2, X3
	197 Add W10, W20, 15
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CSEL not yet implemented."
	200 And W10, W10, 0xFFFFFFF0
	201 Move W9, [X31+108]
	202 Move W11, 16
	203 Subtract W10, W20, W10
	204 Subtract W10, W11, W10
	205 NotImplemented "Instruction CSEL not yet implemented."
	206 Add W10, W10, W20
	207 Move X8, X0
	208 Move W0, W31
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move [X31+8], X8
	211 Move [X31+16], X1
	212 Move W8, 1
	213 Move [X31+4], W8
	214 Move [X31+108], W31
	215 Move [X31+4], W31
	216 Move [X31+56], X31
	217 Move [X31+64], X31
	218 Move [X31+40], X31
	219 Move [X31+48], X31
	220 Move [X31+24], X31
	221 Move [X31+32], X31
	222 Move [X31+8], X31
	223 Move [X31+16], X31
	224 Move X8, [X19+32]
	225 Compare X8, 0
	226 JumpIfEqual {314}
	227 Move X26, X31
	228 Move X9, X31
	229 Move W27, W31
	230 Move W20, W31
	231 Move W10, [X8+24]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move X10, [X19+40]
	235 Compare X10, 0
	236 JumpIfEqual {314}
	237 Move W11, [X10+24]
	238 Add X28, X9, 1
	239 Subtract W12, W28, 1
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Add X8, X8, X9
	242 Add X9, X10, X26
	243 Move X25, [X8+32]
	244 Move X8, 0x78C000
	245 Move W21, [X9+32]
	246 Move W29, [X9+44]
	247 Move X8, [X8+2640]
	248 Add X0, X31, 88
	249 Move W1, W20
	250 Move W2, W21
	251 Move X3, [X8]
	252 Call NativeArray`1<Brick>.GetSubArray, X0, X1, X2
	253 Compare X25, 0
	254 JumpIfEqual {314}
	255 Move [X25+64], X0
	256 Move [X25+72], X1
	257 Move X8, 0x756000
	258 Move X8, [X8+696]
	259 Multiply W23, W27, W24
	260 Multiply W22, W24, W29
	261 Add X0, X31, 72
	262 Move X3, [X8]
	263 Move W1, W23
	264 Move W2, W22
	265 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	266 Move W8, [X31+4]
	267 Move [X25+80], X0
	268 Move [X25+88], X1
	269 Compare W8, 0
	270 JumpIfEqual {307}
	271 Move X8, 0x78C000
	272 Move X8, [X8+2648]
	273 Add X0, X31, 56
	274 Move W1, W23
	275 Move W2, W22
	276 Move X3, [X8]
	277 Call NativeArray`1<Vector3>.GetSubArray, X0, X1, X2
	278 Move [X25+96], X0
	279 Move [X25+104], X1
	280 Move X8, 0x78C000
	281 Move X8, [X8+2632]
	282 Add X0, X31, 40
	283 Move W1, W23
	284 Move W2, W22
	285 Move X3, [X8]
	286 Call NativeArray`1<Single>.GetSubArray, X0, X1, X2
	287 Move [X25+112], X0
	288 Move [X25+120], X1
	289 Move X8, 0x78C000
	290 Move X8, [X8+2648]
	291 Add X0, X31, 8
	292 Move W1, W23
	293 Move W2, W22
	294 Move X3, [X8]
	295 Call NativeArray`1<Vector3>.GetSubArray, X0, X1, X2
	296 Move [X25+128], X0
	297 Move [X25+136], X1
	298 Move X8, 0x78C000
	299 Move X8, [X8+2632]
	300 Add X0, X31, 24
	301 Move W1, W23
	302 Move W2, W22
	303 Move X3, [X8]
	304 Call NativeArray`1<Single>.GetSubArray, X0, X1, X2
	305 Move [X25+144], X0
	306 Move [X25+152], X1
	307 Move X8, [X19+32]
	308 Add X26, X26, 16
	309 Add W20, W20, W21
	310 Add W27, W27, W29
	311 Move X9, X28
	312 Compare X8, 0
	313 JumpIfNotEqual {231}
	314 Call 0x1C17F20
	315 Move W0, 1
	316 Move X20, [X31+192]
	317 Move X19, [X31+200]
	318 Move X22, [X31+176]
	319 Move X21, [X31+184]
	320 Move X24, [X31+160]
	321 Move X23, [X31+168]
	322 Move X26, [X31+144]
	323 Move X25, [X31+152]
	324 Move X28, [X31+128]
	325 Move X27, [X31+136]
	326 Move X29, [X31+112]
	327 Move X30, [X31+120]
	328 Add X31, X31, 208
	329 Return X0
	330 Call 0x1C17F28

Method: System.Boolean ResolvePerScenarioCellData(UnityEngine.TextAsset cellDataAsset, UnityEngine.TextAsset cellOptionalDataAsset, System.Int32 stateIndex)

Disassembly:
	0x039C7C00 STP X20, X19, [X31 + 0x10]
	0x039C7C04 ADRP X21, 0xA1A000
	0x039C7C08 ADRP X20, 0x72C000
	0x039C7C0C LDRB W8, [X21 + 0xCDD]
	0x039C7C10 LDR X20, [X20 + 0x598]
	0x039C7C14 MOV X19, X0
	0x039C7C18 TBNZ X8, 0x0, 0x39C7C3C
	0x039C7C1C ADRP X0, 0x72C000
	0x039C7C20 LDR X0, [X0 + 0x598]
	0x039C7C24 BL 0x1C16CF4
	0x039C7C28 ADRP X0, 0x78A000
	0x039C7C2C LDR X0, [X0 + 0xF48]
	0x039C7C30 BL 0x1C16CF4
	0x039C7C34 MOVZ W8, 0x1
	0x039C7C38 STRB W8, [X21 + 0xCDD]
	0x039C7C3C LDR X0, [X20]
	0x039C7C40 LDR X20, [X19 + 0x20]
	0x039C7C44 LDR W8, [X0 + 0xE0]
	0x039C7C48 CBNZ W8, 0x39C7C50
	0x039C7C4C BL 0x1C16DFC
	0x039C7C50 MOV X0, X20
	0x039C7C54 MOV X1, X31
	0x039C7C58 MOV X2, X31
	0x039C7C5C BL 0x3C3883C
	0x039C7C60 TBNZ X0, 0x0, 0x39C7D14
	0x039C7C64 LDR X8, [X19 + 0x20]
	0x039C7C68 CBZ X8, 0x39C7D20
	0x039C7C6C LDR W9, [X8 + 0x40]
	0x039C7C70 LDR W10, [X8 + 0x4C]
	0x039C7C74 CMP W9, W10
	0x039C7C78 B.LT 0x39C7D14
	0x039C7C7C LDR W9, [X8 + 0x44]
	0x039C7C80 LDR W10, [X8 + 0x50]
	0x039C7C84 CMP W9, W10
	0x039C7C88 B.LT 0x39C7D14
	0x039C7C8C LDR W9, [X8 + 0x48]
	0x039C7C90 LDR W8, [X8 + 0x54]
	0x039C7C94 CMP W9, W8
	0x039C7C98 B.LT 0x39C7D14
	0x039C7C9C MOV X0, X19
	0x039C7CA0 BL 0x39C7AB0
	0x039C7CA4 TBZ X0, 0x0, 0x39C7D14
	0x039C7CA8 ADRP X20, 0x78A000
	0x039C7CAC LDR X20, [X20 + 0xF48]
	0x039C7CB0 LDR X0, [X20]
	0x039C7CB4 LDR W8, [X0 + 0xE0]
	0x039C7CB8 CBNZ W8, 0x39C7CC0
	0x039C7CBC BL 0x1C16DFC
	0x039C7CC0 ADRP X21, 0xA1A000
	0x039C7CC4 LDRB W8, [X21 + 0xCB9]
	0x039C7CC8 CBNZ W8, 0x39C7CE0
	0x039C7CCC ADRP X0, 0x78A000
	0x039C7CD0 LDR X0, [X0 + 0xF48]
	0x039C7CD4 BL 0x1C16CF4
	0x039C7CD8 MOVZ W8, 0x1
	0x039C7CDC STRB W8, [X21 + 0xCB9]
	0x039C7CE0 LDR X0, [X20]
	0x039C7CE4 LDR W8, [X0 + 0xE0]
	0x039C7CE8 CBNZ W8, 0x39C7CF4
	0x039C7CEC BL 0x1C16DFC
	0x039C7CF0 LDR X0, [X20]
	0x039C7CF4 LDR X8, [X0 + 0xB8]
	0x039C7CF8 LDR X0, [X8 + 0x8]
	0x039C7CFC CBZ X0, 0x39C7D20
	0x039C7D00 LDR X1, [X19 + 0x20]
	0x039C7D04 MOV X2, X31
	0x039C7D08 BL 0x39BB7AC
	0x039C7D0C MOVZ W8, 0x1
	0x039C7D10 STRB W8, [X19 + 0x48]
	0x039C7D14 LDP X20, X19, [X31 + 0x10]
	0x039C7D18 LDP X30, X21, [X31], #0x20
	0x039C7D1C RET
	0x039C7D20 BL 0x1C16F20
	0x039C7D24 STP X30, X21, [X31 - 0x20]!
	0x039C7D28 STP X20, X19, [X31 + 0x10]
	0x039C7D2C ADRP X21, 0xA1A000
	0x039C7D30 ADRP X20, 0x78A000
	0x039C7D34 LDRB W8, [X21 + 0xCDF]
	0x039C7D38 LDR X20, [X20 + 0xF48]
	0x039C7D3C MOV X19, X0
	0x039C7D40 TBNZ X8, 0x0, 0x39C7D58
	0x039C7D44 ADRP X0, 0x78A000
	0x039C7D48 LDR X0, [X0 + 0xF48]
	0x039C7D4C BL 0x1C16CF4
	0x039C7D50 MOVZ W8, 0x1
	0x039C7D54 STRB W8, [X21 + 0xCDF]
	0x039C7D58 LDR X0, [X20]
	0x039C7D5C LDR W8, [X0 + 0xE0]
	0x039C7D60 CBNZ W8, 0x39C7D68
	0x039C7D64 BL 0x1C16DFC
	0x039C7D68 ADRP X21, 0xA1A000
	0x039C7D6C LDRB W8, [X21 + 0xCB9]
	0x039C7D70 CBNZ W8, 0x39C7D88
	0x039C7D74 ADRP X0, 0x78A000
	0x039C7D78 LDR X0, [X0 + 0xF48]
	0x039C7D7C BL 0x1C16CF4
	0x039C7D80 MOVZ W8, 0x1
	0x039C7D84 STRB W8, [X21 + 0xCB9]
	0x039C7D88 LDR X0, [X20]
	0x039C7D8C LDR W8, [X0 + 0xE0]
	0x039C7D90 CBNZ W8, 0x39C7D9C
	0x039C7D94 BL 0x1C16DFC
	0x039C7D98 LDR X0, [X20]
	0x039C7D9C LDR X8, [X0 + 0xB8]
	0x039C7DA0 LDR X0, [X8 + 0x8]
	0x039C7DA4 CBZ X0, 0x39C7E14
	0x039C7DA8 MOV X1, X19
	0x039C7DAC MOV X2, X31
	0x039C7DB0 BL 0x39B9B74
	0x039C7DB4 LDRB W8, [X21 + 0xCB9]
	0x039C7DB8 CBNZ W8, 0x39C7DD0
	0x039C7DBC ADRP X0, 0x78A000
	0x039C7DC0 LDR X0, [X0 + 0xF48]
	0x039C7DC4 BL 0x1C16CF4
	0x039C7DC8 MOVZ W8, 0x1
	0x039C7DCC STRB W8, [X21 + 0xCB9]
	0x039C7DD0 LDR X0, [X20]
	0x039C7DD4 LDR W8, [X0 + 0xE0]
	0x039C7DD8 CBNZ W8, 0x39C7DE4
	0x039C7DDC BL 0x1C16DFC
	0x039C7DE0 LDR X0, [X20]
	0x039C7DE4 LDR X8, [X0 + 0xB8]
	0x039C7DE8 LDR X8, [X8 + 0x8]
	0x039C7DEC CBZ X8, 0x39C7E14
	0x039C7DF0 LDR X8, [X8 + 0xF0]
	0x039C7DF4 CBZ X8, 0x39C7E08
	0x039C7DF8 MOV X0, X19
	0x039C7DFC LDP X20, X19, [X31 + 0x10]
	0x039C7E00 LDP X30, X21, [X31], #0x20
	0x039C7E04 B 0x39C7E18
	0x039C7E08 LDP X20, X19, [X31 + 0x10]
	0x039C7E0C LDP X30, X21, [X31], #0x20
	0x039C7E10 RET
	0x039C7E14 BL 0x1C16F20
	0x039C7E18 STP X30, X21, [X31 - 0x20]!
	0x039C7E1C STP X20, X19, [X31 + 0x10]
	0x039C7E20 ADRP X21, 0xA1A000
	0x039C7E24 ADRP X20, 0x78A000
	0x039C7E28 LDRB W8, [X21 + 0xCE1]
	0x039C7E2C LDR X20, [X20 + 0xF48]
	0x039C7E30 MOV X19, X0
	0x039C7E34 TBNZ X8, 0x0, 0x39C7E4C
	0x039C7E38 ADRP X0, 0x78A000
	0x039C7E3C LDR X0, [X0 + 0xF48]
	0x039C7E40 BL 0x1C16CF4
	0x039C7E44 MOVZ W8, 0x1
	0x039C7E48 STRB W8, [X21 + 0xCE1]
	0x039C7E4C MOV X0, X19
	0x039C7E50 BL 0x39C7A28
	0x039C7E54 MOV X0, X19
	0x039C7E58 BL 0x39C77D4
	0x039C7E5C LDR X0, [X20]
	0x039C7E60 LDR W8, [X0 + 0xE0]
	0x039C7E64 CBNZ W8, 0x39C7E6C
	0x039C7E68 BL 0x1C16DFC
	0x039C7E6C ADRP X21, 0xA1A000
	0x039C7E70 LDRB W8, [X21 + 0xCB9]
	0x039C7E74 CBNZ W8, 0x39C7E8C
	0x039C7E78 ADRP X0, 0x78A000
	0x039C7E7C LDR X0, [X0 + 0xF48]
	0x039C7E80 BL 0x1C16CF4
	0x039C7E84 MOVZ W8, 0x1
	0x039C7E88 STRB W8, [X21 + 0xCB9]
	0x039C7E8C LDR X0, [X20]
	0x039C7E90 LDR W8, [X0 + 0xE0]
	0x039C7E94 CBNZ W8, 0x39C7EA0
	0x039C7E98 BL 0x1C16DFC
	0x039C7E9C LDR X0, [X20]
	0x039C7EA0 LDR X8, [X0 + 0xB8]
	0x039C7EA4 LDR X8, [X8 + 0x8]
	0x039C7EA8 CBZ X8, 0x39C7F14
	0x039C7EAC LDR X8, [X8 + 0xF0]
	0x039C7EB0 CBZ X8, 0x39C7F14
	0x039C7EB4 LDR X8, [X8 + 0x70]
	0x039C7EB8 STR X8, [X19 + 0x50]
	0x039C7EBC LDRB W8, [X21 + 0xCB9]
	0x039C7EC0 CBNZ W8, 0x39C7ED8
	0x039C7EC4 MOV X0, X20
	0x039C7EC8 BL 0x1C16CF4
	0x039C7ECC LDR X0, [X20]
	0x039C7ED0 MOVZ W8, 0x1
	0x039C7ED4 STRB W8, [X21 + 0xCB9]
	0x039C7ED8 LDR W8, [X0 + 0xE0]
	0x039C7EDC CBNZ W8, 0x39C7EE8
	0x039C7EE0 BL 0x1C16DFC
	0x039C7EE4 LDR X0, [X20]
	0x039C7EE8 LDR X8, [X0 + 0xB8]
	0x039C7EEC LDR X8, [X8 + 0x8]
	0x039C7EF0 CBZ X8, 0x39C7F14
	0x039C7EF4 LDR X8, [X8 + 0xF0]
	0x039C7EF8 CBZ X8, 0x39C7F14
	0x039C7EFC LDR X8, [X8 + 0x78]
	0x039C7F00 MOV X0, X19
	0x039C7F04 STR X8, [X19 + 0x58]
	0x039C7F08 LDP X20, X19, [X31 + 0x10]
	0x039C7F0C LDP X30, X21, [X31], #0x20
	0x039C7F10 B 0x39C7BFC
	0x039C7F14 BL 0x1C16F20
	0x039C7F18 STP X30, X21, [X31 - 0x20]!
	0x039C7F1C STP X20, X19, [X31 + 0x10]
	0x039C7F20 ADRP X21, 0xA1A000
	0x039C7F24 ADRP X20, 0x78A000
	0x039C7F28 LDRB W8, [X21 + 0xCE0]
	0x039C7F2C LDR X20, [X20 + 0xF48]
	0x039C7F30 MOV X19, X0
	0x039C7F34 TBNZ X8, 0x0, 0x39C7F4C
	0x039C7F38 ADRP X0, 0x78A000
	0x039C7F3C LDR X0, [X0 + 0xF48]
	0x039C7F40 BL 0x1C16CF4
	0x039C7F44 MOVZ W8, 0x1
	0x039C7F48 STRB W8, [X21 + 0xCE0]
	0x039C7F4C MOV X0, X19
	0x039C7F50 BL 0x39C77D4
	0x039C7F54 STP X31, X31, [X19 + 0x50]
	0x039C7F58 LDR X0, [X20]
	0x039C7F5C LDR W8, [X0 + 0xE0]
	0x039C7F60 CBNZ W8, 0x39C7F68
	0x039C7F64 BL 0x1C16DFC
	0x039C7F68 ADRP X21, 0xA1A000
	0x039C7F6C LDRB W8, [X21 + 0xCB9]
	0x039C7F70 CBNZ W8, 0x39C7F88
	0x039C7F74 ADRP X0, 0x78A000
	0x039C7F78 LDR X0, [X0 + 0xF48]
	0x039C7F7C BL 0x1C16CF4
	0x039C7F80 MOVZ W8, 0x1
	0x039C7F84 STRB W8, [X21 + 0xCB9]
	0x039C7F88 LDR X0, [X20]
	0x039C7F8C LDR W8, [X0 + 0xE0]
	0x039C7F90 CBNZ W8, 0x39C7F9C
	0x039C7F94 BL 0x1C16DFC
	0x039C7F98 LDR X0, [X20]
	0x039C7F9C LDR X8, [X0 + 0xB8]
	0x039C7FA0 LDR X0, [X8 + 0x8]
	0x039C7FA4 CBZ X0, 0x39C7FBC
	0x039C7FA8 MOV X1, X19
	0x039C7FAC LDP X20, X19, [X31 + 0x10]
	0x039C7FB0 MOV X2, X31
	0x039C7FB4 LDP X30, X21, [X31], #0x20
	0x039C7FB8 B 0x39B9C44
	0x039C7FBC BL 0x1C16F20
	0x039C7FC0 STP X30, X23, [X31 - 0x30]!
	0x039C7FC4 STP X22, X21, [X31 + 0x10]
	0x039C7FC8 STP X20, X19, [X31 + 0x20]
	0x039C7FCC ADRP X23, 0xA1A000
	0x039C7FD0 ADRP X22, 0x72C000
	0x039C7FD4 LDRB W8, [X23 + 0xCE2]
	0x039C7FD8 LDR X22, [X22 + 0x598]
	0x039C7FDC MOV X20, X2
	0x039C7FE0 MOV X21, X1
	0x039C7FE4 MOV X19, X0
	0x039C7FE8 TBNZ X8, 0x0, 0x39C8000
	0x039C7FEC ADRP X0, 0x72C000
	0x039C7FF0 LDR X0, [X0 + 0x598]
	0x039C7FF4 BL 0x1C16CF4
	0x039C7FF8 MOVZ W8, 0x1
	0x039C7FFC STRB W8, [X23 + 0xCE2]
	0x039C8000 LDR X0, [X22]
	0x039C8004 LDR X22, [X19 + 0x20]
	0x039C8008 LDR W8, [X0 + 0xE0]
	0x039C800C CBNZ W8, 0x39C8014
	0x039C8010 BL 0x1C16DFC
	0x039C8014 MOV X0, X22
	0x039C8018 MOV X1, X31
	0x039C801C MOV X2, X31
	0x039C8020 BL 0x3C3883C
	0x039C8024 TBNZ X0, 0x0, 0x39C8040
	0x039C8028 LDRB W8, [X19 + 0x48]
	0x039C802C STP X21, X20, [X19 + 0x50]
	0x039C8030 CBZ W8, 0x39C8050
	0x039C8034 MOV X0, X19
	0x039C8038 BL 0x39C7AB0
	0x039C803C TBZ X0, 0x0, 0x39C8064
	0x039C8040 LDP X20, X19, [X31 + 0x20]
	0x039C8044 LDP X22, X21, [X31 + 0x10]
	0x039C8048 LDP X30, X23, [X31], #0x30
	0x039C804C RET
	0x039C8050 MOV X0, X19
	0x039C8054 LDP X20, X19, [X31 + 0x20]
	0x039C8058 LDP X22, X21, [X31 + 0x10]
	0x039C805C LDP X30, X23, [X31], #0x30
	0x039C8060 B 0x39C7BFC
	0x039C8064 MOV X0, X19
	0x039C8068 LDP X20, X19, [X31 + 0x20]
	0x039C806C LDP X22, X21, [X31 + 0x10]
	0x039C8070 LDP X30, X23, [X31], #0x30
	0x039C8074 B 0x39C77D4
	0x039C8078 STR X30, [X31 - 0x40]!
	0x039C807C STP X24, X23, [X31 + 0x10]
	0x039C8080 STP X22, X21, [X31 + 0x20]
	0x039C8084 STP X20, X19, [X31 + 0x30]
	0x039C8088 ADRP X23, 0xA19000
	0x039C808C ADRP X24, 0x78A000
	0x039C8090 ADRP X20, 0x78A000
	0x039C8094 ADRP X22, 0x78A000
	0x039C8098 ADRP X21, 0x78A000
	0x039C809C LDRB W8, [X23 + 0xCE3]
	0x039C80A0 LDR X24, [X24 + 0xB18]
	0x039C80A4 LDR X20, [X20 + 0xB20]
	0x039C80A8 LDR X22, [X22 + 0xB28]
	0x039C80AC LDR X21, [X21 + 0xB30]
	0x039C80B0 MOV X19, X0
	0x039C80B4 TBNZ X8, 0x0, 0x39C80F0
	0x039C80B8 ADRP X0, 0x78A000
	0x039C80BC LDR X0, [X0 + 0xB30]
	0x039C80C0 BL 0x1C16CF4
	0x039C80C4 ADRP X0, 0x78A000
	0x039C80C8 LDR X0, [X0 + 0xB28]
	0x039C80CC BL 0x1C16CF4
	0x039C80D0 ADRP X0, 0x78A000
	0x039C80D4 LDR X0, [X0 + 0xB20]
	0x039C80D8 BL 0x1C16CF4
	0x039C80DC ADRP X0, 0x78A000
	0x039C80E0 LDR X0, [X0 + 0xB18]
	0x039C80E4 BL 0x1C16CF4
	0x039C80E8 MOVZ W8, 0x1
	0x039C80EC STRB W8, [X23 + 0xCE3]
	0x039C80F0 LDR X0, [X24]
	0x039C80F4 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+224], X29
	003 Move [X31+232], X30
	004 Move [X31+240], X28
	005 Move [X31+248], X27
	006 Move [X31+256], X26
	007 Move [X31+264], X25
	008 Move [X31+272], X24
	009 Move [X31+280], X23
	010 Move [X31+288], X22
	011 Move [X31+296], X21
	012 Move [X31+304], X20
	013 Move [X31+312], X19
	014 Move [X31+44], W3
	015 Move X20, 0xA1B000
	016 Move X21, 0x72D000
	017 Move W8, [X20+3284]
	018 Move X21, [X21+1432]
	019 Move X22, X2
	020 Move X19, X1
	021 Move X26, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {49}
	026 Move X0, 0x78C000
	027 Move X0, [X0+1488]
	028 Call 0x1C17CF4
	029 Move X0, 0x756000
	030 Move X0, [X0+696]
	031 Call 0x1C17CF4
	032 Move X0, 0x783000
	033 Move X0, [X0+1696]
	034 Call 0x1C17CF4
	035 Move X0, 0x72D000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0x78C000
	039 Move X0, [X0+2664]
	040 Call 0x1C17CF4
	041 Move X0, 0x78C000
	042 Move X0, [X0+2696]
	043 Call 0x1C17CF4
	044 Move X0, 0x78C000
	045 Move X0, [X0+2688]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+3284], W8
	049 Move X0, [X21]
	050 Move [X31+200], X31
	051 Move [X31+208], X31
	052 Move [X31+184], X31
	053 Move [X31+192], X31
	054 Move [X31+168], X31
	055 Move [X31+176], X31
	056 Move [X31+152], X31
	057 Move [X31+160], X31
	058 Move [X31+136], X31
	059 Move [X31+144], X31
	060 Move [X31+120], X31
	061 Move [X31+128], X31
	062 Move [X31+104], X31
	063 Move [X31+112], X31
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X19
	069 Move X1, X31
	070 Move X2, X31
	071 Call Object.op_Equality, X0, X1
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {77}
	076 Move W0, W31
	077 Compare X19, 0
	078 JumpIfEqual {359}
	079 Move X25, 0x78C000
	080 Move W23, [X26+116]
	081 Move W24, [X26+60]
	082 Move X25, [X25+2688]
	083 Move X0, X19
	084 Move X1, [X25]
	085 Call 0x229CE9C, X0
	086 Move X8, 0x78C000
	087 Move X8, [X8+2696]
	088 Move X19, X0
	089 Move X20, X1
	090 Add X4, X31, 220
	091 Move X5, [X8]
	092 Move W8, W23
	093 ShiftRight W8, 24
	094 And W8, W8, 0x7FFFFF
	095 Multiply W23, W8, W24
	096 Move X0, X26
	097 Move X1, X19
	098 Move X2, X20
	099 Move W3, W23
	100 Move [X31+220], W31
	101 Move [X31+28], W8
	102 Call ProbeVolumeAsset.GetSubArray, X0, X1, X2, X3
	103 Move X24, 0x78C000
	104 Move X24, [X24+2664]
	105 Move [X31+200], X0
	106 Move [X31+208], X1
	107 Add X4, X31, 220
	108 Move X0, X26
	109 Move X5, [X24]
	110 Move X1, X19
	111 Move X2, X20
	112 Move W3, W23
	113 Call 0x22366CC, X0, X1, X2, X3
	114 Move X5, [X24]
	115 Move [X31+184], X0
	116 Move [X31+192], X1
	117 Add X4, X31, 220
	118 Move X0, X26
	119 Move X1, X19
	120 Move X2, X20
	121 Move W3, W23
	122 Move [X31+32], X26
	123 Call 0x22366CC, X0, X1, X2, X3
	124 Add W10, W20, 15
	125 NotImplemented "Instruction CMP not yet implemented."
	126 NotImplemented "Instruction CSEL not yet implemented."
	127 And W10, W10, 0xFFFFFFF0
	128 Move W9, [X31+220]
	129 Move W11, 16
	130 Subtract W10, W20, W10
	131 Subtract W10, W11, W10
	132 NotImplemented "Instruction CSEL not yet implemented."
	133 Add W10, W10, W20
	134 Move X8, X0
	135 Move W0, W31
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move [X31+168], X8
	138 Move [X31+176], X1
	139 Move X0, [X21]
	140 Move W8, [X0+224]
	141 Compare W8, 0
	142 JumpIfNotEqual {144}
	143 Call 0x1C17DFC
	144 Move X0, X22
	145 Move X1, X31
	146 Call Object.op_Implicit, X0
	147 Move X19, X31
	148 Move X21, X31
	149 Move TEMP, X0
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfNotEqual {160}
	153 Compare X22, 0
	154 JumpIfEqual {359}
	155 Move X1, [X25]
	156 Move X0, X22
	157 Call 0x229CE9C, X0
	158 Move X21, X0
	159 Move X19, X1
	160 Move X20, [X31+32]
	161 Move X5, [X24]
	162 Add X4, X31, 220
	163 Move X1, X21
	164 Move X0, X20
	165 Move X2, X19
	166 Move W3, W23
	167 Move [X31+220], W31
	168 Call 0x22366CC, X0, X1, X2, X3
	169 Move X5, [X24]
	170 Move [X31+152], X0
	171 Move [X31+160], X1
	172 Add X4, X31, 220
	173 Move X0, X20
	174 Move X1, X21
	175 Move X2, X19
	176 Move W3, W23
	177 Call 0x22366CC, X0, X1, X2, X3
	178 Move X5, [X24]
	179 Move [X31+136], X0
	180 Move [X31+144], X1
	181 Add X4, X31, 220
	182 Move X0, X20
	183 Move X1, X21
	184 Move X2, X19
	185 Move W3, W23
	186 Call 0x22366CC, X0, X1, X2, X3
	187 Move X5, [X24]
	188 Move [X31+120], X0
	189 Move [X31+128], X1
	190 Add X4, X31, 220
	191 Move X0, X20
	192 Move X1, X21
	193 Move X2, X19
	194 Move W3, W23
	195 Call 0x22366CC, X0, X1, X2, X3
	196 Move [X31+104], X0
	197 Move [X31+112], X1
	198 Compare X21, 0
	199 JumpIfEqual {212}
	200 Add W9, W19, 15
	201 NotImplemented "Instruction CMP not yet implemented."
	202 NotImplemented "Instruction CSEL not yet implemented."
	203 And W9, W9, 0xFFFFFFF0
	204 Move W8, [X31+220]
	205 Subtract W9, W19, W9
	206 Move W10, 16
	207 Subtract W9, W10, W9
	208 NotImplemented "Instruction CSEL not yet implemented."
	209 Add W9, W9, W19
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move W0, W31
	212 Move X10, [X31+32]
	213 Move X8, [X10+32]
	214 Compare X8, 0
	215 JumpIfEqual {359}
	216 Move X22, 0x756000
	217 Move X22, [X22+696]
	218 Move X25, X31
	219 Move W26, W31
	220 Move W27, 40
	221 Move [X31+16], X21
	222 NotImplemented "Instruction LDRSW not yet implemented."
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X8, [X10+40]
	225 Compare X8, 0
	226 JumpIfEqual {359}
	227 Move W9, [X8+24]
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Add X8, X8, X27
	230 Move W9, [X8+4]
	231 Move X8, 0x78C000
	232 Move X8, [X8+1488]
	233 Add X0, X31, 200
	234 Move [X31+100], W9
	235 Move X3, [X8]
	236 Move W8, [X31+28]
	237 Multiply W24, W8, W26
	238 Multiply W23, W8, W9
	239 Move W1, W24
	240 Move W2, W23
	241 Call NativeArray`1<UInt16>.GetSubArray, X0, X1, X2
	242 Move X3, [X22]
	243 Move [X31+80], X1
	244 Move [X31+88], X0
	245 Add X0, X31, 184
	246 Move W1, W24
	247 Move W2, W23
	248 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	249 Move X3, [X22]
	250 Move [X31+64], X1
	251 Move [X31+72], X0
	252 Add X0, X31, 168
	253 Move W1, W24
	254 Move W2, W23
	255 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	256 Move [X31+48], X0
	257 Move [X31+56], X1
	258 Compare X21, 0
	259 JumpIfEqual {286}
	260 Move X3, [X22]
	261 Add X0, X31, 152
	262 Move W1, W24
	263 Move W2, W23
	264 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	265 Move X3, [X22]
	266 Move X28, X0
	267 Move X29, X1
	268 Add X0, X31, 136
	269 Move W1, W24
	270 Move W2, W23
	271 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	272 Move X3, [X22]
	273 Move X19, X0
	274 Move X21, X1
	275 Add X0, X31, 120
	276 Move W1, W24
	277 Move W2, W23
	278 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	279 Move X3, [X22]
	280 Move X20, X0
	281 Move X22, X1
	282 Add X0, X31, 104
	283 Move W1, W24
	284 Move W2, W23
	285 Call NativeArray`1<Byte>.GetSubArray, X0, X1, X2
	286 Move X28, X31
	287 Move X29, X31
	288 Move X19, X31
	289 Move X20, X31
	290 Move X22, X31
	291 Move X0, X31
	292 Move X1, X31
	293 Move X10, [X31+32]
	294 Move X8, [X10+32]
	295 Compare X8, 0
	296 JumpIfEqual {359}
	297 Move W9, [X8+24]
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Add X8, X8, X25
	300 Move X8, [X8+32]
	301 Move W9, [X31+44]
	302 Compare W9, 0
	303 JumpIfEqual {326}
	304 Compare X8, 0
	305 JumpIfEqual {359}
	306 Move X11, [X31+88]
	307 Move X9, [X31+80]
	308 Move [X8+320], X28
	309 Move [X8+328], X29
	310 Move [X8+336], X19
	311 Move [X8+344], X21
	312 Move [X8+352], X20
	313 Move [X8+360], X22
	314 Move [X8+272], X11
	315 Move [X8+280], X9
	316 Move X11, [X31+72]
	317 Move X9, [X31+64]
	318 Move [X8+368], X0
	319 Move [X8+288], X11
	320 Move [X8+296], X9
	321 Move X11, [X31+48]
	322 Move X9, [X31+56]
	323 Move [X8+304], X11
	324 Move [X8+312], X9
	325 Add X8, X8, 376
	326 Compare X8, 0
	327 JumpIfEqual {359}
	328 Move X11, [X31+88]
	329 Move X9, [X31+80]
	330 Move [X8+208], X28
	331 Move [X8+216], X29
	332 Move [X8+224], X19
	333 Move [X8+232], X21
	334 Move [X8+240], X20
	335 Move [X8+248], X22
	336 Move [X8+160], X11
	337 Move [X8+168], X9
	338 Move X11, [X31+72]
	339 Move X9, [X31+64]
	340 Move [X8+256], X0
	341 Move [X8+176], X11
	342 Move [X8+184], X9
	343 Move X11, [X31+48]
	344 Move X9, [X31+56]
	345 Move [X8+192], X11
	346 Move [X8+200], X9
	347 Add X8, X8, 264
	348 Move W9, [X31+100]
	349 Move [X8], X1
	350 Move X22, 0x755000
	351 Move X8, [X10+32]
	352 Move X21, [X31+16]
	353 Move X22, [X22+696]
	354 Add W26, W26, W9
	355 Add X25, X25, 1
	356 Add X27, X27, 16
	357 Compare X8, 0
	358 JumpIfNotEqual {222}
	359 Call 0x1C17F20
	360 Move W0, 1
	361 Move X20, [X31+304]
	362 Move X19, [X31+312]
	363 Move X22, [X31+288]
	364 Move X21, [X31+296]
	365 Move X24, [X31+272]
	366 Move X23, [X31+280]
	367 Move X26, [X31+256]
	368 Move X25, [X31+264]
	369 Move X28, [X31+240]
	370 Move X27, [X31+248]
	371 Move X29, [X31+224]
	372 Move X30, [X31+232]
	373 Add X31, X31, 320
	374 Return X0
	375 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x039C80F8 LDR X1, [X20]
	0x039C80FC MOV X20, X0
	0x039C8100 BL 0x3122B98
	0x039C8104 STR X20, [X19 + 0x38]
	0x039C8108 LDR X0, [X22]
	0x039C810C BL 0x1C16F10
	0x039C8110 LDR X1, [X21]
	0x039C8114 MOV X20, X0
	0x039C8118 BL 0x2ADD1AC
	0x039C811C STR X20, [X19 + 0x40]
	0x039C8120 MOV X0, X19
	0x039C8124 LDP X20, X19, [X31 + 0x30]
	0x039C8128 LDP X22, X21, [X31 + 0x20]
	0x039C812C LDP X24, X23, [X31 + 0x10]
	0x039C8130 MOV X1, X31
	0x039C8134 LDR X30, [X31], #0x40
	0x039C8138 B 0x3C36C30
	0x039C813C LDR X0, [X0 + 0x70]
	0x039C8140 RET
	0x039C8144 LDR X0, [X0 + 0x78]
	0x039C8148 RET
	0x039C814C LDR V0, [X0 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA1A000
	006 Move X20, 0x78B000
	007 Move W8, [X21+3285]
	008 Move X20, [X20+2704]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x78B000
	015 Move X0, [X0+2704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3285], W8
	019 Move W8, 5
	020 Move [X19+24], W8
	021 Move X8, [X20]
	022 Move X0, X19
	023 Move X1, X31
	024 Move [X19+120], X8
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call ScriptableObject..ctor, X0
	030 Return 

