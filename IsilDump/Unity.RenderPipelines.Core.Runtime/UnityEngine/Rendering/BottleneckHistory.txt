Type: UnityEngine.Rendering.BottleneckHistory

Method: System.Void .ctor(System.Int32 initialCapacity)

Disassembly:
	0x039B1B50 MOV X0, X19
	0x039B1B54 LDP X20, X19, [X31 + 0x10]
	0x039B1B58 MOV X2, X31
	0x039B1B5C LDR X30, [X31], #0x20
	0x039B1B60 B 0x3C4D6A0
	0x039B1B64 LDP X20, X19, [X31 + 0x10]
	0x039B1B68 LDR X30, [X31], #0x20
	0x039B1B6C RET
	0x039B1B70 LDR X8, [X0 + 0x10]
	0x039B1B74 CBZ X8, 0x39B1B88
	0x039B1B78 LDR X8, [X0 + 0x18]
	0x039B1B7C CMP X8, 0x0
	0x039B1B80 CSET W0, NE
	0x039B1B84 RET
	0x039B1B88 MOV W0, W31
	0x039B1B8C RET
	0x039B1B90 LDR X0, [X0 + 0x10]
	0x039B1B94 RET
	0x039B1B98 STR X1, [X0 + 0x10]
	0x039B1B9C RET
	0x039B1BA0 LDR X0, [X0 + 0x18]
	0x039B1BA4 RET
	0x039B1BA8 STR X1, [X0 + 0x18]
	0x039B1BAC RET
	0x039B1BB0 LDR X0, [X0 + 0x20]
	0x039B1BB4 RET
	0x039B1BB8 STR X1, [X0 + 0x20]
	0x039B1BBC RET
	0x039B1BC0 STR X30, [X31 - 0x20]!
	0x039B1BC4 STP X20, X19, [X31 + 0x10]
	0x039B1BC8 MOV X19, X0
	0x039B1BCC LDR X0, [X0 + 0x28]
	0x039B1BD0 CBZ X0, 0x39B1C00
	0x039B1BD4 AND W20, W1, 0x1
	0x039B1BD8 MOV W1, W20
	0x039B1BDC MOV X2, X31
	0x039B1BE0 BL 0x3C42F24
	0x039B1BE4 LDR X0, [X19 + 0x30]
	0x039B1BE8 CBZ X0, 0x39B1C00
	0x039B1BEC MOV W1, W20
	0x039B1BF0 LDP X20, X19, [X31 + 0x10]
	0x039B1BF4 MOV X2, X31
	0x039B1BF8 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xA31000
	008 Move X23, 0x7A1000
	009 Move X21, 0x7A1000
	010 Move W8, [X22+3125]
	011 Move X23, [X23+3440]
	012 Move X21, [X21+3448]
	013 Move W19, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x7A1000
	020 Move X0, [X0+3448]
	021 Call 0x1C17CF4
	022 Move X0, 0x7A1000
	023 Move X0, [X0+3456]
	024 Call 0x1C17CF4
	025 Move X0, 0x7A1000
	026 Move X0, [X0+3440]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+3125], W8
	030 Move X0, [X23]
	031 Call 0x1C17F10
	032 Move X1, [X21]
	033 Move X21, X0
	034 Call List`1<Int32Enum>..ctor, X0
	035 Move X0, X20
	036 Move X1, X31
	037 Move [X20+16], X21
	038 Call Object..ctor, X0
	039 Move X0, [X20+16]
	040 Compare X0, 0
	041 JumpIfEqual {54}
	042 Move X8, 0x7A1000
	043 Move X8, [X8+3456]
	044 Move W1, W19
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X2, [X8]
	050 Move X30, [X31+48]
	051 Move X23, [X31+56]
	052 Call List`1<Int32Enum>.set_Capacity, X0, X1
	053 Return 
	054 Call 0x1C17F20

Method: System.Void DiscardOldSamples(System.Int32 historySize)

Disassembly:
	0x039B1BFC B 0x3C42F24
	0x039B1C00 BL 0x1C16F20
	0x039B1C04 STP X30, X19, [X31 - 0x10]!
	0x039B1C08 MOV X19, X0
	0x039B1C0C LDR X0, [X0 + 0x28]
	0x039B1C10 CBZ X0, 0x39B1C4C
	0x039B1C14 MOV X1, X31
	0x039B1C18 BL 0x3C42F18
	0x039B1C1C FMOV S0, W31
	0x039B1C20 TBZ X0, 0x0, 0x39B1C44
	0x039B1C24 LDR X0, [X19 + 0x28]
	0x039B1C28 CBZ X0, 0x39B1C4C
	0x039B1C2C MOV X1, X31
	0x039B1C30 BL 0x3C42FD0
	0x039B1C34 ADRP X8, 0xFFFFFFFFFD139000
	0x039B1C38 LDR V0, [X8 + 0x430]
	0x039B1C3C SCVTF S1, X0
	0x039B1C40 FDIV S0, S1, S0
	0x039B1C44 LDP X30, X19, [X31], #0x10
	0x039B1C48 RET
	0x039B1C4C BL 0x1C16F20
	0x039B1C50 STP X30, X19, [X31 - 0x10]!
	0x039B1C54 MOV X19, X0
	0x039B1C58 LDR X0, [X0 + 0x28]
	0x039B1C5C CBZ X0, 0x39B1C8C
	0x039B1C60 MOV X1, X31
	0x039B1C64 BL 0x3C42F18
	0x039B1C68 TBZ X0, 0x0, 0x39B1C80
	0x039B1C6C LDR X0, [X19 + 0x28]
	0x039B1C70 CBZ X0, 0x39B1C8C
	0x039B1C74 MOV X1, X31
	0x039B1C78 LDP X30, X19, [X31], #0x10
	0x039B1C7C B 0x3C43060
	0x039B1C80 MOV W0, W31
	0x039B1C84 LDP X30, X19, [X31], #0x10
	0x039B1C88 RET
	0x039B1C8C BL 0x1C16F20
	0x039B1C90 STP X30, X19, [X31 - 0x10]!
	0x039B1C94 MOV X19, X0
	0x039B1C98 LDR X0, [X0 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA31000
	007 Move W8, [X21+3126]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x7A1000
	015 Move X0, [X0+3464]
	016 Call 0x1C17CF4
	017 Move X0, 0x7A1000
	018 Move X0, [X0+3472]
	019 Call 0x1C17CF4
	020 Move X0, 0x7A1000
	021 Move X0, [X0+3456]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3126], W8
	025 Move X0, [X20+16]
	026 Compare X0, 0
	027 JumpIfEqual {40}
	028 Move X21, 0x7A1000
	029 Move X22, 0x7A1000
	030 Move X21, [X21+3456]
	031 Move X22, [X22+3464]
	032 Move W8, [X0+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X2, [X22]
	035 Move W1, W31
	036 Call List`1<Int32Enum>.RemoveAt, X0, X1
	037 Move X0, [X20+16]
	038 Compare X0, 0
	039 JumpIfNotEqual {32}
	040 Call 0x1C17F20
	041 Move X2, [X21]
	042 Move W1, W19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Call List`1<Int32Enum>.set_Capacity, X0, X1
	049 Return 

Method: System.Void AddBottleneckFromAveragedSample(UnityEngine.Rendering.FrameTimeSample frameHistorySampleAverage)

Disassembly:
	0x039B1C9C CBZ X0, 0x39B1CD8
	0x039B1CA0 MOV X1, X31
	0x039B1CA4 BL 0x3C42F18
	0x039B1CA8 FMOV S0, W31
	0x039B1CAC TBZ X0, 0x0, 0x39B1CD0
	0x039B1CB0 LDR X0, [X19 + 0x28]
	0x039B1CB4 CBZ X0, 0x39B1CD8
	0x039B1CB8 MOV X1, X31
	0x039B1CBC BL 0x3C42F9C
	0x039B1CC0 ADRP X8, 0xFFFFFFFFFD139000
	0x039B1CC4 LDR V0, [X8 + 0x430]
	0x039B1CC8 SCVTF S1, X0
	0x039B1CCC FDIV S0, S1, S0
	0x039B1CD0 LDP X30, X19, [X31], #0x10
	0x039B1CD4 RET
	0x039B1CD8 BL 0x1C16F20
	0x039B1CDC STP X30, X19, [X31 - 0x10]!
	0x039B1CE0 MOV X19, X0
	0x039B1CE4 LDR X0, [X0 + 0x28]
	0x039B1CE8 CBZ X0, 0x39B1D18
	0x039B1CEC MOV X1, X31
	0x039B1CF0 BL 0x3C42F18
	0x039B1CF4 TBZ X0, 0x0, 0x39B1D0C
	0x039B1CF8 LDR X0, [X19 + 0x28]
	0x039B1CFC CBZ X0, 0x39B1D18
	0x039B1D00 MOV X1, X31
	0x039B1D04 LDP X30, X19, [X31], #0x10
	0x039B1D08 B 0x3C43004
	0x039B1D0C MOV W0, W31
	0x039B1D10 LDP X30, X19, [X31], #0x10
	0x039B1D14 RET
	0x039B1D18 BL 0x1C16F20
	0x039B1D1C STP X30, X19, [X31 - 0x10]!
	0x039B1D20 MOV X19, X0
	0x039B1D24 LDR X0, [X0 + 0x30]
	0x039B1D28 CBZ X0, 0x39B1D64
	0x039B1D2C MOV X1, X31
	0x039B1D30 BL 0x3C42F18
	0x039B1D34 FMOV S0, W31
	0x039B1D38 TBZ X0, 0x0, 0x39B1D5C
	0x039B1D3C LDR X0, [X19 + 0x30]
	0x039B1D40 CBZ X0, 0x39B1D64
	0x039B1D44 MOV X1, X31
	0x039B1D48 BL 0x3C42F9C
	0x039B1D4C ADRP X8, 0xFFFFFFFFFD139000
	0x039B1D50 LDR V0, [X8 + 0x430]
	0x039B1D54 SCVTF S1, X0
	0x039B1D58 FDIV S0, S1, S0
	0x039B1D5C LDP X30, X19, [X31], #0x10
	0x039B1D60 RET
	0x039B1D64 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xA31000
	007 Move W8, [X21+3127]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7A1000
	015 Move X0, [X0+3480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3127], W8
	019 Move X8, [X20+16]
	020 Move V0, [X20]
	021 Add X0, X31, 0
	022 Move [X31+16], X8
	023 Move [X31], V0
	024 Call BottleneckHistory.DetermineBottleneck, X0
	025 Move X8, [X19+16]
	026 Compare X8, 0
	027 JumpIfEqual {62}
	028 Move X10, 0x7A1000
	029 Move X10, [X10+3480]
	030 Move W11, [X8+28]
	031 Move X9, [X8+16]
	032 Move X10, [X10]
	033 Add W11, W11, 1
	034 Move [X8+28], W11
	035 Compare X9, 0
	036 JumpIfEqual {62}
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move W12, [X9+24]
	039 Move W1, W0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Add W10, W11, 1
	046 Add X9, X9, X11
	047 Move [X8+24], W10
	048 Move [X9+32], W1
	049 Add X31, X31, 64
	050 Return 
	051 Move X9, [X10+32]
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Move X0, X8
	057 Move X9, [X9+192]
	058 Move X2, [X9+112]
	059 Add X31, X31, 64
	060 Call List`1<Int32Enum>.AddWithResize, X0, X1
	061 Return 
	062 Call 0x1C17F20

Method: System.Void ComputeHistogram()

Disassembly:
	0x039B1E10 LDR X1, [X8]
	0x039B1E14 BL 0x3226EF8
	0x039B1E18 TBZ X0, 0x0, 0x39B1E2C
	0x039B1E1C MOV X0, X22
	0x039B1E20 MOV X1, X21
	0x039B1E24 MOV X2, X31
	0x039B1E28 BL 0x3C4D65C
	0x039B1E2C STR X19, [X20 + 0x18]
	0x039B1E30 LDP X20, X19, [X31 + 0x20]
	0x039B1E34 LDP X22, X21, [X31 + 0x10]
	0x039B1E38 LDP X30, X23, [X31], #0x30
	0x039B1E3C RET
	0x039B1E40 STR X30, [X31 - 0x20]!
	0x039B1E44 STP X20, X19, [X31 + 0x10]
	0x039B1E48 MOV X19, X1
	0x039B1E4C MOV X20, X0
	0x039B1E50 MOV X0, X2
	0x039B1E54 MOV X1, X3
	0x039B1E58 MOV X2, X31
	0x039B1E5C BL 0x321EFD0
	0x039B1E60 MOV X2, X0
	0x039B1E64 MOV X0, X20
	0x039B1E68 MOV X1, X19
	0x039B1E6C LDP X20, X19, [X31 + 0x10]
	0x039B1E70 MOV X3, X31
	0x039B1E74 LDR X30, [X31], #0x20
	0x039B1E78 B 0x39B1DB8
	0x039B1E7C STR X30, [X31 - 0x20]!
	0x039B1E80 STP X20, X19, [X31 + 0x10]
	0x039B1E84 MOV X19, X1
	0x039B1E88 MOV X20, X0
	0x039B1E8C MOV X0, X2
	0x039B1E90 MOV X1, X3
	0x039B1E94 MOV X2, X31
	0x039B1E98 BL 0x3227C5C
	0x039B1E9C MOV X2, X0
	0x039B1EA0 MOV X0, X20
	0x039B1EA4 MOV X1, X19
	0x039B1EA8 LDP X20, X19, [X31 + 0x10]
	0x039B1EAC MOV X3, X31
	0x039B1EB0 LDR X30, [X31], #0x20
	0x039B1EB4 B 0x39B1DB8
	0x039B1EB8 MOVZ W1, 0x1
	0x039B1EBC B 0x39B1EC0
	0x039B1EC0 STP X30, X21, [X31 - 0x20]!
	0x039B1EC4 STP X20, X19, [X31 + 0x10]
	0x039B1EC8 ADRP X21, 0xA30000
	0x039B1ECC LDRB W8, [X21 + 0xC45]
	0x039B1ED0 MOV W20, W1
	0x039B1ED4 MOV X19, X0
	0x039B1ED8 TBNZ X8, 0x0, 0x39B1EF0
	0x039B1EDC ADRP X0, 0x742000
	0x039B1EE0 LDR X0, [X0 + 0x988]
	0x039B1EE4 BL 0x1C16CF4
	0x039B1EE8 MOVZ W8, 0x1
	0x039B1EEC STRB W8, [X21 + 0xC45]
	0x039B1EF0 LDRB W8, [X19 + 0x10]
	0x039B1EF4 CBNZ W8, 0x39B1F3C
	0x039B1EF8 TBZ X20, 0x0, 0x39B1F34
	0x039B1EFC LDR X8, [X19]
	0x039B1F00 CBZ X8, 0x39B1F34
	0x039B1F04 ADRP X8, 0x742000
	0x039B1F08 LDR X0, [X19 + 0x8]
	0x039B1F0C LDR X8, [X8 + 0x988]
	0x039B1F10 MOV X2, X31
	0x039B1F14 LDR X1, [X8]
	0x039B1F18 BL 0x3226EF8
	0x039B1F1C TBZ X0, 0x0, 0x39B1F34

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xA31000
	012 Move W8, [X20+3128]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x7A1000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move X0, 0x7A1000
	022 Move X0, [X0+3488]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3128], W8
	026 Move X0, [X19+16]
	027 Compare X0, 0
	028 JumpIfEqual {58}
	029 Move X21, 0x7A1000
	030 Move X21, [X21+3488]
	031 Move X22, -48340992
	032 Move W20, W31
	033 Move S8, W31
	034 Add X22, X22, 3522
	035 Move S10, 1
	036 Move S9, W31
	037 Move S12, W31
	038 Move S11, W31
	039 Move W8, [X0+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X2, [X21]
	042 Move W1, W20
	043 Call List`1<Int32Enum>.get_Item, X0, X1
	044 Subtract W8, W0, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction ADR not yet implemented."
	047 Move W10, [X22]
	048 Add X9, X9, X10
	049 CallNoReturn X9
	050 Add S11, S11, S10
	051 Add S12, S12, S10
	052 Add S9, S9, S10
	053 Add S8, S8, S10
	054 Move X0, [X19+16]
	055 Add W20, W20, 1
	056 Compare X0, 0
	057 JumpIfNotEqual {39}
	058 Call 0x1C17F20
	059 NotImplemented "Instruction SCVTF not yet implemented."
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 Move [X19+24], S0
	065 Move [X19+32], S2
	066 Move [X19+32], S3
	067 Move [X19+40], S1
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X22, [X31+48]
	071 Move X21, [X31+56]
	072 Move X30, [X31+40]
	073 Move D9, [X31+24]
	074 Move D8, [X31+32]
	075 Move D11, [X31+8]
	076 Move D10, [X31+16]
	077 Move V12, [X31+80]
	078 Return 

Method: UnityEngine.Rendering.PerformanceBottleneck DetermineBottleneck(UnityEngine.Rendering.FrameTimeSample s)

Disassembly:
	0x039B1D68 STP X30, X19, [X31 - 0x10]!
	0x039B1D6C MOV X19, X0
	0x039B1D70 LDR X0, [X0 + 0x30]
	0x039B1D74 CBZ X0, 0x39B1DA4
	0x039B1D78 MOV X1, X31
	0x039B1D7C BL 0x3C42F18
	0x039B1D80 TBZ X0, 0x0, 0x39B1D98
	0x039B1D84 LDR X0, [X19 + 0x30]
	0x039B1D88 CBZ X0, 0x39B1DA4
	0x039B1D8C MOV X1, X31
	0x039B1D90 LDP X30, X19, [X31], #0x10
	0x039B1D94 B 0x3C43004
	0x039B1D98 MOV W0, W31
	0x039B1D9C LDP X30, X19, [X31], #0x10
	0x039B1DA0 RET
	0x039B1DA4 BL 0x1C16F20
	0x039B1DA8 MOV X1, X31
	0x039B1DAC B 0x33BDD8C
	0x039B1DB0 RET
	0x039B1DB4 RET
	0x039B1DB8 STP X30, X23, [X31 - 0x30]!
	0x039B1DBC STP X22, X21, [X31 + 0x10]
	0x039B1DC0 STP X20, X19, [X31 + 0x20]
	0x039B1DC4 ADRP X23, 0xA30000
	0x039B1DC8 LDRB W8, [X23 + 0xC44]
	0x039B1DCC MOV X19, X3
	0x039B1DD0 MOV X21, X2
	0x039B1DD4 MOV X22, X1
	0x039B1DD8 MOV X20, X0
	0x039B1DDC TBNZ X8, 0x0, 0x39B1DF4
	0x039B1DE0 ADRP X0, 0x742000
	0x039B1DE4 LDR X0, [X0 + 0x988]
	0x039B1DE8 BL 0x1C16CF4
	0x039B1DEC MOVZ W8, 0x1
	0x039B1DF0 STRB W8, [X23 + 0xC44]
	0x039B1DF4 STP X22, X21, [X20]
	0x039B1DF8 STRB W31, [X20 + 0x10]
	0x039B1DFC CBZ X22, 0x39B1E2C
	0x039B1E00 ADRP X8, 0x742000
	0x039B1E04 LDR X8, [X8 + 0x988]
	0x039B1E08 MOV X0, X21
	0x039B1E0C MOV X2, X31

ISIL:
	001 Move V2, [X0+20]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move V0, [X0+8]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X8, -49045504
	006 Move V1, [X0+4]
	007 Move V3, [X8+92]
	008 Multiply S1, S1, S3
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move V3, [X0+16]
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move V2, [X0+16]
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 NotImplemented "Instruction FCMP not yet implemented."
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move V0, [X0+12]
	020 Move S1, 0.5
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 Move W0, 1
	023 Return X0
	024 Move W0, W31
	025 Return X0
	026 Move W0, 4
	027 Return X0
	028 Move W0, 2
	029 Return X0
	030 Move W0, 3
	031 Return X0

Method: System.Void Clear()

Disassembly:
	0x039B1F20 LDR X0, [X19]
	0x039B1F24 CBZ X0, 0x39B1F48
	0x039B1F28 LDR X1, [X19 + 0x8]
	0x039B1F2C MOV X2, X31
	0x039B1F30 BL 0x3C4D6A0
	0x039B1F34 MOVZ W8, 0x1
	0x039B1F38 STRB W8, [X19 + 0x10]
	0x039B1F3C LDP X20, X19, [X31 + 0x10]
	0x039B1F40 LDP X30, X21, [X31], #0x20
	0x039B1F44 RET
	0x039B1F48 BL 0x1C16F20
	0x039B1F4C SUB W8, W1, 0x1
	0x039B1F50 CMP W8, 0xC
	0x039B1F54 B.HI 0x39B1F68
	0x039B1F58 ADRP X9, 0xFFFFFFFFFD1E6000
	0x039B1F5C ADD X9, X9, 0xA88
	0x039B1F60 LDR W0, [X9, W8, SXTW]
	0x039B1F64 RET
	0x039B1F68 MOV W0, W31
	0x039B1F6C RET
	0x039B1F70 STP X29, X30, [X31 - 0x60]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA31000
	005 Move W8, [X20+3129]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x7A1000
	012 Move X0, [X0+3496]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3129], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {29}
	019 Move W9, [X8+28]
	020 Add W9, W9, 1
	021 Move [X8+24], W31
	022 Move [X8+28], W9
	023 Move [X19+24], X31
	024 Move [X19+32], X31
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Call 0x1C17F20

