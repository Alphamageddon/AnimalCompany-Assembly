Type: UnityEngine.Rendering.ProbeReferenceVolume/CellInfo

Method: System.Int32 CompareTo(UnityEngine.Rendering.ProbeReferenceVolume/CellInfo other)

Disassembly:
	0x039C4B6C LDRB W8, [X20 + 0xCC8]
	0x039C4B70 LDR X19, [X19 + 0xF48]
	0x039C4B74 TBNZ X8, 0x0, 0x39C4B8C
	0x039C4B78 ADRP X0, 0x78D000
	0x039C4B7C LDR X0, [X0 + 0xF48]
	0x039C4B80 BL 0x1C16CF4
	0x039C4B84 MOVZ W8, 0x1
	0x039C4B88 STRB W8, [X20 + 0xCC8]
	0x039C4B8C LDR X0, [X19]
	0x039C4B90 LDR W8, [X0 + 0xE0]
	0x039C4B94 CBNZ W8, 0x39C4B9C
	0x039C4B98 BL 0x1C16DFC
	0x039C4B9C ADRP X20, 0xA1D000
	0x039C4BA0 LDRB W8, [X20 + 0xCB9]
	0x039C4BA4 CBNZ W8, 0x39C4BBC

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move V0, [X0+152]
	005 Move V1, [X1+152]
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Move TEMP, 0
	008 Not TEMP
	009 Move W0, TEMP
	010 Move W0, 1
	011 Move W0, W31
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x039C4BA8 ADRP X0, 0x78D000
	0x039C4BAC LDR X0, [X0 + 0xF48]
	0x039C4BB0 BL 0x1C16CF4
	0x039C4BB4 MOVZ W8, 0x1
	0x039C4BB8 STRB W8, [X20 + 0xCB9]
	0x039C4BBC LDR X0, [X19]
	0x039C4BC0 LDR W8, [X0 + 0xE0]
	0x039C4BC4 CBNZ W8, 0x39C4BD0
	0x039C4BC8 BL 0x1C16DFC
	0x039C4BCC LDR X0, [X19]
	0x039C4BD0 LDR X8, [X0 + 0xB8]
	0x039C4BD4 LDR X8, [X8 + 0x8]
	0x039C4BD8 CBZ X8, 0x39C4BEC
	0x039C4BDC LDR V0, [X8 + 0x16C]
	0x039C4BE0 LDP X20, X19, [X31 + 0x10]
	0x039C4BE4 LDR X30, [X31], #0x20
	0x039C4BE8 RET
	0x039C4BEC BL 0x1C16F20
	0x039C4BF0 STR D8, [X31 - 0x20]!
	0x039C4BF4 STR X30, [X31 + 0x8]
	0x039C4BF8 STP X20, X19, [X31 + 0x10]
	0x039C4BFC ADRP X20, 0xA1D000
	0x039C4C00 ADRP X19, 0x78D000
	0x039C4C04 LDRB W8, [X20 + 0xCC9]
	0x039C4C08 LDR X19, [X19 + 0xF48]
	0x039C4C0C MOV V8.16B, V0.16B
	0x039C4C10 TBNZ X8, 0x0, 0x39C4C28
	0x039C4C14 ADRP X0, 0x78D000
	0x039C4C18 LDR X0, [X0 + 0xF48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA1E000
	005 Move W8, [X20+3260]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x78F000
	012 Move X0, [X0+968]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3260], W8
	016 Move X8, [X19+32]
	017 Move [X19+16], X31
	018 Move [X19+24], X31
	019 Compare X8, 0
	020 JumpIfEqual {41}
	021 Move W9, [X8+28]
	022 Move TEMP, 0
	023 Not TEMP
	024 Move W10, TEMP
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Add W9, W9, 1
	027 Move [X8+24], W31
	028 Move [X8+28], W9
	029 Move [X19+40], W10
	030 Move [X19+44], W31
	031 Move [X19+48], V0
	032 Move [X19+56], V0
	033 Move [X19+5], V0
	034 Move [X19+148], W10
	035 Move [X19+152], X31
	036 Move [X19+160], X31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x039C4C1C BL 0x1C16CF4
	0x039C4C20 MOVZ W8, 0x1
	0x039C4C24 STRB W8, [X20 + 0xCC9]
	0x039C4C28 LDR X0, [X19]
	0x039C4C2C LDR W8, [X0 + 0xE0]
	0x039C4C30 CBNZ W8, 0x39C4C38
	0x039C4C34 BL 0x1C16DFC
	0x039C4C38 ADRP X20, 0xA1D000
	0x039C4C3C LDRB W8, [X20 + 0xCB9]
	0x039C4C40 CBNZ W8, 0x39C4C58
	0x039C4C44 ADRP X0, 0x78D000
	0x039C4C48 LDR X0, [X0 + 0xF48]
	0x039C4C4C BL 0x1C16CF4
	0x039C4C50 MOVZ W8, 0x1
	0x039C4C54 STRB W8, [X20 + 0xCB9]
	0x039C4C58 LDR X0, [X19]
	0x039C4C5C LDR W8, [X0 + 0xE0]
	0x039C4C60 CBNZ W8, 0x39C4C6C
	0x039C4C64 BL 0x1C16DFC
	0x039C4C68 LDR X0, [X19]
	0x039C4C6C LDR X8, [X0 + 0xB8]
	0x039C4C70 LDR X0, [X8 + 0x8]
	0x039C4C74 CBZ X0, 0x39C4C90
	0x039C4C78 LDP X20, X19, [X31 + 0x10]
	0x039C4C7C LDR X30, [X31 + 0x8]
	0x039C4C80 MOV V0.16B, V8.16B
	0x039C4C84 MOV X1, X31
	0x039C4C88 LDR V8, [X31], #0x20
	0x039C4C8C B 0x39B9A84
	0x039C4C90 BL 0x1C16F20
	0x039C4C94 FMOV S0, W31
	0x039C4C98 RET
	0x039C4C9C FMOV S0, 1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA1E000
	007 Move X22, 0x78F000
	008 Move X20, 0x78F000
	009 Move W8, [X21+3261]
	010 Move X22, [X22+1272]
	011 Move X20, [X20+1280]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x78F000
	018 Move X0, [X0+1280]
	019 Call 0x1C17CF4
	020 Move X0, 0x78F000
	021 Move X0, [X0+1272]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3261], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call List`1<BrickChunkAlloc>..ctor, X0
	030 Move TEMP, 0
	031 Not TEMP
	032 Move W8, TEMP
	033 Move [X19+32], X20
	034 Move [X19+40], W8
	035 Move X0, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X1, X31
	041 Move X30, [X31+48]
	042 Call Object..ctor, X0
	043 Return 

