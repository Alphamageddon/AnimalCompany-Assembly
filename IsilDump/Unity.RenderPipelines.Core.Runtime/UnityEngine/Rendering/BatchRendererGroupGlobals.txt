Type: UnityEngine.Rendering.BatchRendererGroupGlobals

Method: UnityEngine.Rendering.BatchRendererGroupGlobals get_Default()

Disassembly:
	0x039DF928 STP X20, X19, [X31 + 0x30]
	0x039DF92C ADRP X23, 0xA02000
	0x039DF930 ADRP X21, 0x774000
	0x039DF934 ADRP X22, 0x71F000
	0x039DF938 ADRP X20, 0x71D000
	0x039DF93C LDRB W8, [X23 + 0xDAD]
	0x039DF940 LDR X21, [X21 + 0x318]
	0x039DF944 LDR X22, [X22 + 0x6D8]
	0x039DF948 LDR X20, [X20 + 0x9E8]
	0x039DF94C MOV X19, X0
	0x039DF950 TBNZ X8, 0x0, 0x39DF9A4
	0x039DF954 ADRP X0, 0x71D000
	0x039DF958 LDR X0, [X0 + 0x9E8]
	0x039DF95C BL 0x1C16CF4
	0x039DF960 ADRP X0, 0x71C000
	0x039DF964 LDR X0, [X0 + 0x600]
	0x039DF968 BL 0x1C16CF4
	0x039DF96C ADRP X0, 0x71F000
	0x039DF970 LDR X0, [X0 + 0x6D8]
	0x039DF974 BL 0x1C16CF4
	0x039DF978 ADRP X0, 0x774000
	0x039DF97C LDR X0, [X0 + 0x338]
	0x039DF980 BL 0x1C16CF4
	0x039DF984 ADRP X0, 0x774000
	0x039DF988 LDR X0, [X0 + 0x340]
	0x039DF98C BL 0x1C16CF4
	0x039DF990 ADRP X0, 0x774000
	0x039DF994 LDR X0, [X0 + 0x318]
	0x039DF998 BL 0x1C16CF4
	0x039DF99C MOVZ W8, 0x1
	0x039DF9A0 STRB W8, [X23 + 0xDAD]
	0x039DF9A4 MOVZ W8, 0x20
	0x039DF9A8 ADD X0, X31, 0xC
	0x039DF9AC MOV X1, X31
	0x039DF9B0 STR W8, [X31 + 0xC]
	0x039DF9B4 BL 0x3399B00
	0x039DF9B8 LDR X8, [X21]
	0x039DF9BC LDR X2, [X22]
	0x039DF9C0 MOV X1, X0
	0x039DF9C4 MOV X3, X31
	0x039DF9C8 MOV X0, X8
	0x039DF9CC BL 0x32274B8
	0x039DF9D0 LDR X8, [X20]
	0x039DF9D4 LDR W20, [X19]
	0x039DF9D8 MOV X19, X0
	0x039DF9DC LDR W9, [X8 + 0xE0]
	0x039DF9E0 CBNZ W9, 0x39DF9EC
	0x039DF9E4 MOV X0, X8
	0x039DF9E8 BL 0x1C16DFC
	0x039DF9EC MOVZ W1, 0x2
	0x039DF9F0 MOV X0, X20
	0x039DF9F4 MOV X2, X31
	0x039DF9F8 BL 0x3322520
	0x039DF9FC MOV X1, X0
	0x039DFA00 MOV X0, X19
	0x039DFA04 MOV X2, X31
	0x039DFA08 BL 0x321EFD0
	0x039DFA0C CBZ X0, 0x39DFA88
	0x039DFA10 ADRP X19, 0x71C000
	0x039DFA14 ADRP X20, 0x774000
	0x039DFA18 ADRP X21, 0x774000
	0x039DFA1C LDR X19, [X19 + 0x600]
	0x039DFA20 LDR X20, [X20 + 0x340]
	0x039DFA24 LDR X21, [X21 + 0x338]
	0x039DFA28 MOVZ W1, 0x20
	0x039DFA2C MOVZ W2, 0x30
	0x039DFA30 MOV X3, X31
	0x039DFA34 BL 0x32296D0
	0x039DFA38 LDR X8, [X19]
	0x039DFA3C MOV X19, X0
	0x039DFA40 LDR W9, [X8 + 0xE0]
	0x039DFA44 CBNZ W9, 0x39DFA50
	0x039DFA48 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+240], D13
	003 Move [X31+248], D12
	004 Move [X31+256], D11
	005 Move [X31+264], D10
	006 Move [X31+272], D9
	007 Move [X31+280], D8
	008 Move [X31+288], X29
	009 Move [X31+304], X30
	010 Move [X31+312], X21
	011 Move [X31+320], X20
	012 Move [X31+328], X19
	013 Move X20, 0xA03000
	014 Move W9, [X20+3482]
	015 Move X19, X8
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x775000
	021 Move X0, [X0+760]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3482], W8
	025 Move X21, 0xA03000
	026 Move X20, 0x775000
	027 Move W8, [X21+3641]
	028 Move X20, [X20+760]
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0x71C000
	032 Move X0, [X0+2464]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+3641], W8
	036 Move X8, 0x71C000
	037 Move X8, [X8+2464]
	038 Move X0, [X20]
	039 Move X8, [X8]
	040 Move W9, [X0+224]
	041 Move X8, [X8+184]
	042 Move D13, [X8+16]
	043 Move D12, [X8+24]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X31
	048 Call ReflectionProbe.get_defaultTextureHDRDecodeValues
	049 Add X8, X31, 112
	050 Move X0, X31
	051 Move V8, V0
	052 Move V9, V1
	053 Move V10, V2
	054 Move V11, V3
	055 Call RenderSettings.get_ambientProbe
	056 Add X0, X31, 0
	057 Add X1, X31, 112
	058 Move W2, 108
	059 Call 0x3EB2AC0
	060 NotImplemented "Instruction MOVI not yet implemented."
	061 Add X0, X31, 112
	062 Add X1, X31, 0
	063 Move [X31+208], V0
	064 Move [X31+216], V0
	065 Move [X31+176], V0
	066 Move [X31+184], V0
	067 Move [X31+144], V0
	068 Move [X31+152], V0
	069 Move [X31+112], V0
	070 Move [X31+120], V0
	071 Call SHCoefficients..ctor, X0, X1
	072 Add X0, X19, 48
	073 Add X1, X31, 112
	074 Move W2, 128
	075 Move [X19], D13
	076 Move [X19+8], D12
	077 Move [X19+16], S8
	078 Move [X19+24], S9
	079 Move [X19+24], S10
	080 Move [X19+32], S11
	081 Move [X19+32], S8
	082 Move [X19+40], S9
	083 Move [X19+40], S10
	084 Move [X19+48], S11
	085 Call 0x3EB2AC0
	086 Move X20, [X31+320]
	087 Move X19, [X31+328]
	088 Move X30, [X31+304]
	089 Move X21, [X31+312]
	090 Move X29, [X31+288]
	091 Move D9, [X31+272]
	092 Move D8, [X31+280]
	093 Move D11, [X31+256]
	094 Move D10, [X31+264]
	095 Move D13, [X31+240]
	096 Move D12, [X31+248]
	097 Add X31, X31, 336
	098 Return X0

Method: System.Boolean Equals(UnityEngine.Rendering.BatchRendererGroupGlobals other)

Disassembly:
	0x039DFA4C BL 0x1C16DFC
	0x039DFA50 LDR X1, [X20]
	0x039DFA54 LDR X2, [X21]
	0x039DFA58 MOV X0, X19
	0x039DFA5C MOV X3, X31
	0x039DFA60 BL 0x3632D08
	0x039DFA64 CBZ X0, 0x39DFA88
	0x039DFA68 MOVZ W1, 0x2E
	0x039DFA6C MOV X2, X31
	0x039DFA70 BL 0x322BC38
	0x039DFA74 LDP X20, X19, [X31 + 0x30]
	0x039DFA78 LDP X22, X21, [X31 + 0x20]
	0x039DFA7C LDP X30, X23, [X31 + 0x10]
	0x039DFA80 ADD X31, X31, 0x40
	0x039DFA84 RET
	0x039DFA88 BL 0x1C16F20
	0x039DFA8C LDR W8, [X0]
	0x039DFA90 LSRV W8, W8, W1
	0x039DFA94 AND W0, W8, 0x1
	0x039DFA98 RET
	0x039DFA9C LSRV W8, W1, W0
	0x039DFAA0 AND W0, W8, 0x1
	0x039DFAA4 RET
	0x039DFAA8 LDR W8, [X0]
	0x039DFAAC MOVZ W9, 0x1
	0x039DFAB0 LSLV W9, W9, W1
	0x039DFAB4 ANDS W31, W2, 0x1
	0x039DFAB8 ORR W10, W8, W9, 0x0
	0x039DFABC BIC W8, W8, W9, 0x0
	0x039DFAC0 CSEL W8, W10, W8, NE
	0x039DFAC4 STR W8, [X0]
	0x039DFAC8 RET
	0x039DFACC LDR W8, [X1]
	0x039DFAD0 MOVZ W9, 0x1
	0x039DFAD4 LSLV W9, W9, W0
	0x039DFAD8 ANDS W31, W2, 0x1
	0x039DFADC ORR W10, W8, W9, 0x0
	0x039DFAE0 BIC W8, W8, W9, 0x0
	0x039DFAE4 CSEL W8, W10, W8, NE
	0x039DFAE8 STR W8, [X1]
	0x039DFAEC RET
	0x039DFAF0 STR W1, [X0]
	0x039DFAF4 RET
	0x039DFAF8 STP X30, X23, [X31 - 0x30]!
	0x039DFAFC STP X22, X21, [X31 + 0x10]
	0x039DFB00 STP X20, X19, [X31 + 0x20]
	0x039DFB04 ADRP X21, 0xA02000
	0x039DFB08 LDRB W8, [X21 + 0xDAE]
	0x039DFB0C MOV X19, X1
	0x039DFB10 MOV X20, X0
	0x039DFB14 TBNZ X8, 0x0, 0x39DFB38
	0x039DFB18 ADRP X0, 0x774000
	0x039DFB1C LDR X0, [X0 + 0x320]
	0x039DFB20 BL 0x1C16CF4
	0x039DFB24 ADRP X0, 0x774000
	0x039DFB28 LDR X0, [X0 + 0x328]
	0x039DFB2C BL 0x1C16CF4
	0x039DFB30 MOVZ W8, 0x1
	0x039DFB34 STRB W8, [X21 + 0xDAE]
	0x039DFB38 STR W31, [X20]
	0x039DFB3C CBZ X19, 0x39DFB98
	0x039DFB40 ADRP X8, 0x774000
	0x039DFB44 LDR X8, [X8 + 0x320]
	0x039DFB48 MOV X0, X19
	0x039DFB4C LDR X1, [X8]
	0x039DFB50 BL 0x21BE3F4
	0x039DFB54 SUBS W21, W0, 0x1
	0x039DFB58 B.MI 0x39DFB98
	0x039DFB5C ADRP X22, 0x774000
	0x039DFB60 LDR X22, [X22 + 0x328]

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+304], X29
	003 Move [X31+312], X30
	004 Move [X31+320], X20
	005 Move [X31+328], X19
	006 Move V0, [X1]
	007 Move V1, [X0]
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move V0, [X1+4]
	010 Move V1, [X0+4]
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move V0, [X1+8]
	013 Move V1, [X0+8]
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move V0, [X1+12]
	016 Move V1, [X0+12]
	017 NotImplemented "Instruction FCMP not yet implemented."
	018 Move V0, [X1+16]
	019 Move V1, [X0+16]
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Move V0, [X1+20]
	022 Move V1, [X0+20]
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move V0, [X1+24]
	025 Move V1, [X0+24]
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Move V0, [X1+28]
	028 Move V1, [X0+28]
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move V0, [X1+32]
	031 Move V1, [X0+32]
	032 NotImplemented "Instruction FCMP not yet implemented."
	033 Move V0, [X1+36]
	034 Move V1, [X0+36]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move V0, [X1+40]
	037 Move V1, [X0+40]
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V0, [X1+44]
	040 Move V1, [X0+44]
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Add X19, X0, 48
	043 Add X0, X31, 128
	044 Move W2, 176
	045 Add X20, X31, 128
	046 Call 0x3EB2AC0
	047 Add X1, X20, 48
	048 Add X0, X31, 0
	049 Move W2, 128
	050 Call 0x3EB2AC0
	051 Add X1, X31, 0
	052 Move X0, X19
	053 Call SHCoefficients.Equals, X0, X1
	054 Move W0, W31
	055 Move X20, [X31+320]
	056 Move X19, [X31+328]
	057 Move X29, [X31+304]
	058 Move X30, [X31+312]
	059 And W0, W0, 1
	060 Add X31, X31, 336
	061 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x039DFB64 MOVZ W23, 0x1
	0x039DFB68 LDR X2, [X22]
	0x039DFB6C MOV X0, X19
	0x039DFB70 MOV W1, W21
	0x039DFB74 BL 0x21C0E94
	0x039DFB78 CMP W0, 0x1F
	0x039DFB7C B.HI 0x39DFB90
	0x039DFB80 LDR W8, [X20]
	0x039DFB84 LSLV W9, W23, W0
	0x039DFB88 ORR W8, W8, W9, 0x0
	0x039DFB8C STR W8, [X20]
	0x039DFB90 SUBS W21, W21, 0x1
	0x039DFB94 B.PL 0x39DFB68
	0x039DFB98 LDP X20, X19, [X31 + 0x20]
	0x039DFB9C LDP X22, X21, [X31 + 0x10]
	0x039DFBA0 LDP X30, X23, [X31], #0x30
	0x039DFBA4 RET
	0x039DFBA8 SUB X31, X31, 0x30
	0x039DFBAC STP X30, X21, [X31 + 0x10]
	0x039DFBB0 STP X20, X19, [X31 + 0x20]
	0x039DFBB4 ADRP X21, 0xA02000
	0x039DFBB8 LDRB W8, [X21 + 0xDAF]
	0x039DFBBC MOV X19, X1
	0x039DFBC0 MOV X20, X0
	0x039DFBC4 TBNZ X8, 0x0, 0x39DFBDC
	0x039DFBC8 ADRP X0, 0x774000
	0x039DFBCC LDR X0, [X0 + 0x350]
	0x039DFBD0 BL 0x1C16CF4
	0x039DFBD4 MOVZ W8, 0x1
	0x039DFBD8 STRB W8, [X21 + 0xDAF]
	0x039DFBDC CBZ X19, 0x39DFC34
	0x039DFBE0 ADRP X21, 0x774000
	0x039DFBE4 LDR X21, [X21 + 0x350]
	0x039DFBE8 LDR X8, [X19]
	0x039DFBEC LDR X1, [X21]
	0x039DFBF0 LDR X8, [X8 + 0x40]
	0x039DFBF4 LDR X9, [X1 + 0x40]
	0x039DFBF8 CMP X8, X9
	0x039DFBFC B.NE 0x39DFC38
	0x039DFC00 LDR W20, [X20]
	0x039DFC04 MOV X0, X19
	0x039DFC08 BL 0x1C16E08
	0x039DFC0C LDR W8, [X0]
	0x039DFC10 LDR X0, [X21]
	0x039DFC14 ADD X1, X31, 0x8
	0x039DFC18 AND W8, W8, W20, 0x0

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+352], X29
	003 Move [X31+368], X30
	004 Move [X31+376], X21
	005 Move [X31+384], X20
	006 Move [X31+392], X19
	007 Move X21, 0xA03000
	008 Move W8, [X21+3483]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x775000
	016 Move X0, [X0+768]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3483], W8
	020 Compare X20, 0
	021 JumpIfEqual {27}
	022 Move X21, 0x775000
	023 Move X21, [X21+768]
	024 Move X9, [X20]
	025 Move X8, [X21]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W0, W31
	028 Move X0, X20
	029 Call 0x1C17E08
	030 Move X1, X0
	031 Add X0, X31, 176
	032 Move W2, 176
	033 Call 0x3EB2AC0
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Add X0, X31, 0
	040 Add X1, X31, 176
	041 Move W2, 176
	042 Call 0x3EB2AC0
	043 Add X1, X31, 0
	044 Move X0, X19
	045 Call BatchRendererGroupGlobals.Equals, X0, X1
	046 Move X20, [X31+384]
	047 Move X19, [X31+392]
	048 Move X30, [X31+368]
	049 Move X21, [X31+376]
	050 Move X29, [X31+352]
	051 And W0, W0, 1
	052 Add X31, X31, 400
	053 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x039DFC1C STR W8, [X31 + 0x8]
	0x039DFC20 BL 0x1C16E04
	0x039DFC24 LDP X20, X19, [X31 + 0x20]
	0x039DFC28 LDP X30, X21, [X31 + 0x10]
	0x039DFC2C ADD X31, X31, 0x30
	0x039DFC30 RET
	0x039DFC34 BL 0x1C16F20
	0x039DFC38 MOV X0, X19
	0x039DFC3C BL 0x1C171E0
	0x039DFC40 AND W0, W0, W1, 0x0
	0x039DFC44 RET
	0x039DFC48 SUB X31, X31, 0x30
	0x039DFC4C STP X30, X21, [X31 + 0x10]
	0x039DFC50 STP X20, X19, [X31 + 0x20]
	0x039DFC54 ADRP X21, 0xA02000
	0x039DFC58 LDRB W8, [X21 + 0xDB0]
	0x039DFC5C MOV X19, X1
	0x039DFC60 MOV X20, X0
	0x039DFC64 TBNZ X8, 0x0, 0x39DFC7C
	0x039DFC68 ADRP X0, 0x774000
	0x039DFC6C LDR X0, [X0 + 0x350]
	0x039DFC70 BL 0x1C16CF4
	0x039DFC74 MOVZ W8, 0x1
	0x039DFC78 STRB W8, [X21 + 0xDB0]
	0x039DFC7C CBZ X19, 0x39DFCD4
	0x039DFC80 ADRP X21, 0x774000
	0x039DFC84 LDR X21, [X21 + 0x350]
	0x039DFC88 LDR X8, [X19]
	0x039DFC8C LDR X1, [X21]
	0x039DFC90 LDR X8, [X8 + 0x40]
	0x039DFC94 LDR X9, [X1 + 0x40]
	0x039DFC98 CMP X8, X9
	0x039DFC9C B.NE 0x39DFCD8
	0x039DFCA0 LDR W20, [X20]
	0x039DFCA4 MOV X0, X19
	0x039DFCA8 BL 0x1C16E08
	0x039DFCAC LDR W8, [X0]
	0x039DFCB0 LDR X0, [X21]
	0x039DFCB4 ADD X1, X31, 0x8
	0x039DFCB8 ORR W8, W8, W20, 0x0
	0x039DFCBC STR W8, [X31 + 0x8]
	0x039DFCC0 BL 0x1C16E04
	0x039DFCC4 LDP X20, X19, [X31 + 0x20]
	0x039DFCC8 LDP X30, X21, [X31 + 0x10]
	0x039DFCCC ADD X31, X31, 0x30
	0x039DFCD0 RET
	0x039DFCD4 BL 0x1C16F20
	0x039DFCD8 MOV X0, X19
	0x039DFCDC BL 0x1C171E0
	0x039DFCE0 ORR W0, W1, W0, 0x0
	0x039DFCE4 RET
	0x039DFCE8 SUB X31, X31, 0x30
	0x039DFCEC STP X30, X21, [X31 + 0x10]
	0x039DFCF0 STP X20, X19, [X31 + 0x20]
	0x039DFCF4 ADRP X21, 0xA02000
	0x039DFCF8 ADRP X20, 0x774000
	0x039DFCFC LDRB W8, [X21 + 0xDB1]
	0x039DFD00 LDR X20, [X20 + 0x350]
	0x039DFD04 MOV X19, X0
	0x039DFD08 TBNZ X8, 0x0, 0x39DFD20
	0x039DFD0C ADRP X0, 0x774000
	0x039DFD10 LDR X0, [X0 + 0x350]
	0x039DFD14 BL 0x1C16CF4
	0x039DFD18 MOVZ W8, 0x1
	0x039DFD1C STRB W8, [X21 + 0xDB1]
	0x039DFD20 LDR W8, [X19]
	0x039DFD24 LDR X0, [X20]
	0x039DFD28 ADD X1, X31, 0x8
	0x039DFD2C ORN W8, W31, W8, 0x0

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+288], D15
	003 Move [X31+296], D14
	004 Move [X31+304], D13
	005 Move [X31+312], D12
	006 Move [X31+320], D11
	007 Move [X31+328], D10
	008 Move [X31+336], D9
	009 Move [X31+344], D8
	010 Move [X31+352], X29
	011 Move [X31+368], X30
	012 Move [X31+376], X21
	013 Move [X31+384], X20
	014 Move [X31+392], X19
	015 Move X21, 0xA03000
	016 Move X20, 0x73D000
	017 Move W8, [X21+3484]
	018 Move X20, [X20+2832]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x775000
	025 Move X0, [X0+776]
	026 Call 0x1C17CF4
	027 Move X0, 0x73D000
	028 Move X0, [X0+2832]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+3484], W8
	032 Move V0, [X19]
	033 Move V1, [X19+8]
	034 Move X21, 0x775000
	035 Move S13, [X19+20]
	036 Move S14, [X19+24]
	037 Move [X31+364], S0
	038 Move V0, [X19+4]
	039 Move S15, [X19+28]
	040 Move S8, [X19+32]
	041 Move S9, [X19+36]
	042 Move S10, [X19+40]
	043 Move V11, [X19+44]
	044 Move [X31+360], S0
	045 Move S0, [X19+12]
	046 Move S12, [X19+16]
	047 Add X1, X19, 48
	048 Add X0, X31, 32
	049 Move W2, 128
	050 Move [X31+24], S0
	051 Move [X31+32], S1
	052 Move X21, [X21+776]
	053 Call 0x3EB2AC0
	054 Move X0, [X20]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X19, [X21]
	060 Add X0, X31, 160
	061 Add X1, X31, 32
	062 Move W2, 128
	063 Call 0x3EB2AC0
	064 Move V0, [X31+364]
	065 Move V1, [X31+360]
	066 Move S3, [X31+24]
	067 Move S2, [X31+28]
	068 Add X0, X31, 160
	069 Move V4, V12
	070 Move V5, V13
	071 Move V6, V14
	072 Move V7, V15
	073 Move X1, X19
	074 Move [X31+8], S10
	075 Move [X31+16], S11
	076 Move [X31], S8
	077 Move [X31+8], S9
	078 Call HashCode.Combine, X0, X1, X2, X3
	079 Move X20, [X31+384]
	080 Move X19, [X31+392]
	081 Move X30, [X31+368]
	082 Move X21, [X31+376]
	083 Move X29, [X31+352]
	084 Move D9, [X31+336]
	085 Move D8, [X31+344]
	086 Move D11, [X31+320]
	087 Move D10, [X31+328]
	088 Move D13, [X31+304]
	089 Move D12, [X31+312]
	090 Move D15, [X31+288]
	091 Move D14, [X31+296]
	092 Add X31, X31, 400
	093 Return X0

Method: System.Boolean op_Equality(UnityEngine.Rendering.BatchRendererGroupGlobals left, UnityEngine.Rendering.BatchRendererGroupGlobals right)

Disassembly:
	0x039DFD30 STR W8, [X31 + 0x8]
	0x039DFD34 BL 0x1C16E04
	0x039DFD38 LDP X20, X19, [X31 + 0x20]
	0x039DFD3C LDP X30, X21, [X31 + 0x10]
	0x039DFD40 ADD X31, X31, 0x30
	0x039DFD44 RET
	0x039DFD48 ORN W0, W31, W0, 0x0
	0x039DFD4C RET
	0x039DFD50 CMP W0, W1
	0x039DFD54 CSET W0, EQ
	0x039DFD58 RET
	0x039DFD5C CMP W0, W1
	0x039DFD60 CSET W0, NE
	0x039DFD64 RET
	0x039DFD68 STP X30, X21, [X31 - 0x20]!
	0x039DFD6C STP X20, X19, [X31 + 0x10]
	0x039DFD70 ADRP X21, 0xA02000
	0x039DFD74 LDRB W8, [X21 + 0xDB2]
	0x039DFD78 MOV X20, X1
	0x039DFD7C MOV X19, X0
	0x039DFD80 TBNZ X8, 0x0, 0x39DFD98
	0x039DFD84 ADRP X0, 0x774000
	0x039DFD88 LDR X0, [X0 + 0x350]
	0x039DFD8C BL 0x1C16CF4
	0x039DFD90 MOVZ W8, 0x1
	0x039DFD94 STRB W8, [X21 + 0xDB2]
	0x039DFD98 CBZ X20, 0x39DFDB4
	0x039DFD9C ADRP X8, 0x774000
	0x039DFDA0 LDR X8, [X8 + 0x350]
	0x039DFDA4 LDR X9, [X20]
	0x039DFDA8 LDR X8, [X8]
	0x039DFDAC CMP X9, X8
	0x039DFDB0 B.EQ 0x39DFDBC
	0x039DFDB4 MOV W0, W31
	0x039DFDB8 B 0x39DFDD4
	0x039DFDBC MOV X0, X20
	0x039DFDC0 BL 0x1C16E08

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+352], X29
	003 Move [X31+360], X30
	004 Move [X31+368], X22
	005 Move [X31+376], X21
	006 Move [X31+384], X20
	007 Move [X31+392], X19
	008 Move X22, 0xA03000
	009 Move X21, 0x775000
	010 Move W8, [X22+3485]
	011 Move X21, [X21+768]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x775000
	019 Move X0, [X0+768]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3485], W8
	023 Add X0, X31, 176
	024 Move W2, 176
	025 Move X1, X20
	026 Call 0x3EB2AC0
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Add X0, X31, 0
	033 Add X1, X31, 176
	034 Move W2, 176
	035 Call 0x3EB2AC0
	036 Add X1, X31, 0
	037 Move X0, X19
	038 Call BatchRendererGroupGlobals.Equals, X0, X1
	039 Move X20, [X31+384]
	040 Move X19, [X31+392]
	041 Move X22, [X31+368]
	042 Move X21, [X31+376]
	043 Move X29, [X31+352]
	044 Move X30, [X31+360]
	045 And W0, W0, 1
	046 Add X31, X31, 400
	047 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Rendering.BatchRendererGroupGlobals left, UnityEngine.Rendering.BatchRendererGroupGlobals right)

Disassembly:
	0x039DFDC4 LDR W8, [X0]
	0x039DFDC8 LDR W9, [X19]
	0x039DFDCC CMP W8, W9
	0x039DFDD0 CSET W0, EQ
	0x039DFDD4 LDP X20, X19, [X31 + 0x10]
	0x039DFDD8 LDP X30, X21, [X31], #0x20
	0x039DFDDC RET
	0x039DFDE0 STR X30, [X31 - 0x10]!
	0x039DFDE4 MOV X1, X31
	0x039DFDE8 BL 0x3399AF8
	0x039DFDEC MOVZ W8, 0x156D
	0x039DFDF0 MOVK W8, 0x69700000
	0x039DFDF4 ADD W0, W0, W8
	0x039DFDF8 LDR X30, [X31], #0x10
	0x039DFDFC RET
	0x039DFE00 MOVZ W0, 0x40
	0x039DFE04 RET
	0x039DFE08 LDR X8, [X0]
	0x039DFE0C CMP X8, 0x0
	0x039DFE10 CSET W0, EQ
	0x039DFE14 RET
	0x039DFE18 LDR X8, [X0]
	0x039DFE1C ADDS X31, X8, 0x1
	0x039DFE20 CSET W0, EQ
	0x039DFE24 RET
	0x039DFE28 SUB X31, X31, 0x40
	0x039DFE2C STP X30, X23, [X31 + 0x10]
	0x039DFE30 STP X22, X21, [X31 + 0x20]
	0x039DFE34 STP X20, X19, [X31 + 0x30]
	0x039DFE38 ADRP X23, 0xA02000
	0x039DFE3C ADRP X21, 0x774000
	0x039DFE40 ADRP X22, 0x71F000
	0x039DFE44 ADRP X20, 0x71D000
	0x039DFE48 LDRB W8, [X23 + 0xDB3]
	0x039DFE4C LDR X21, [X21 + 0x318]
	0x039DFE50 LDR X22, [X22 + 0x6D8]
	0x039DFE54 LDR X20, [X20 + 0x9E8]
	0x039DFE58 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+352], X29
	003 Move [X31+360], X30
	004 Move [X31+368], X22
	005 Move [X31+376], X21
	006 Move [X31+384], X20
	007 Move [X31+392], X19
	008 Move X22, 0xA03000
	009 Move X21, 0x775000
	010 Move W8, [X22+3486]
	011 Move X21, [X21+768]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x775000
	019 Move X0, [X0+768]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3486], W8
	023 Add X0, X31, 176
	024 Move W2, 176
	025 Move X1, X20
	026 Call 0x3EB2AC0
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Add X0, X31, 0
	033 Add X1, X31, 176
	034 Move W2, 176
	035 Call 0x3EB2AC0
	036 Add X1, X31, 0
	037 Move X0, X19
	038 Call BatchRendererGroupGlobals.Equals, X0, X1
	039 Move X20, [X31+384]
	040 Move X19, [X31+392]
	041 Move X22, [X31+368]
	042 Move X21, [X31+376]
	043 Move X29, [X31+352]
	044 Move X30, [X31+360]
	045 NotImplemented "Instruction ORN not yet implemented."
	046 And W0, W8, 1
	047 Add X31, X31, 400
	048 Return X0

Method: System.Void .cctor()

Disassembly:
	0x039DFE5C TBNZ X8, 0x0, 0x39DFEB0
	0x039DFE60 ADRP X0, 0x71D000
	0x039DFE64 LDR X0, [X0 + 0x9E8]
	0x039DFE68 BL 0x1C16CF4
	0x039DFE6C ADRP X0, 0x71C000
	0x039DFE70 LDR X0, [X0 + 0x600]
	0x039DFE74 BL 0x1C16CF4
	0x039DFE78 ADRP X0, 0x71F000
	0x039DFE7C LDR X0, [X0 + 0x6D8]
	0x039DFE80 BL 0x1C16CF4
	0x039DFE84 ADRP X0, 0x774000
	0x039DFE88 LDR X0, [X0 + 0x338]
	0x039DFE8C BL 0x1C16CF4
	0x039DFE90 ADRP X0, 0x774000
	0x039DFE94 LDR X0, [X0 + 0x340]
	0x039DFE98 BL 0x1C16CF4
	0x039DFE9C ADRP X0, 0x774000
	0x039DFEA0 LDR X0, [X0 + 0x318]
	0x039DFEA4 BL 0x1C16CF4
	0x039DFEA8 MOVZ W8, 0x1
	0x039DFEAC STRB W8, [X23 + 0xDB3]
	0x039DFEB0 MOVZ W8, 0x40
	0x039DFEB4 ADD X0, X31, 0xC
	0x039DFEB8 MOV X1, X31
	0x039DFEBC STR W8, [X31 + 0xC]
	0x039DFEC0 BL 0x3399B00

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xA03000
	006 Move X21, 0x775000
	007 Move X19, 0x775000
	008 Move W8, [X20+3487]
	009 Move X21, [X21+784]
	010 Move X19, [X19+768]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x775000
	016 Move X0, [X0+768]
	017 Call 0x1C17CF4
	018 Move X0, 0x775000
	019 Move X0, [X0+784]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3487], W8
	023 Move X0, [X21]
	024 Move X1, X31
	025 Call Shader.PropertyToID, X0
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], W0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

