Type: UnityEngine.Rendering.UI.UIFoldout

Method: System.Void Start()

Disassembly:
	0x03A019B8 CBNZ W8, 0x3A019F0
	0x03A019BC MOVZ W8, 0x2
	0x03A019C0 B 0x3A019EC
	0x03A019C4 SUB W9, W8, 0x3
	0x03A019C8 CMP W9, 0x2
	0x03A019CC B.CS 0x3A019D8
	0x03A019D0 MOVZ W8, 0x1
	0x03A019D4 B 0x3A019EC
	0x03A019D8 CMP W8, 0x2
	0x03A019DC B.NE 0x3A019F0
	0x03A019E0 STR W31, [X0 + 0x2C]
	0x03A019E4 RET
	0x03A019E8 MOVZ W8, 0x3
	0x03A019EC STR W8, [X0 + 0x2C]
	0x03A019F0 RET
	0x03A019F4 LDR W8, [X0 + 0x2C]
	0x03A019F8 CMP W8, 0x4
	0x03A019FC CSET W0, EQ
	0x03A01A00 RET
	0x03A01A04 ANDS W31, W1, 0x1
	0x03A01A08 MOVZ W8, 0x3
	0x03A01A0C CINC W8, W8, NE
	0x03A01A10 STR W8, [X0 + 0x2C]
	0x03A01A14 RET
	0x03A01A18 STR X30, [X31 - 0x10]!
	0x03A01A1C LDRB W9, [X0 + 0x48]
	0x03A01A20 LDR X8, [X0 + 0x40]
	0x03A01A24 CBZ W9, 0x3A01A48
	0x03A01A28 CBZ X8, 0x3A01A60
	0x03A01A2C LDR W9, [X0 + 0x30]
	0x03A01A30 CMP W9, 0x2
	0x03A01A34 B.NE 0x3A01A54
	0x03A01A38 LDR W9, [X8 + 0x28]
	0x03A01A3C LDR W8, [X8 + 0x50]
	0x03A01A40 MUL W0, W8, W9
	0x03A01A44 B 0x3A01A58
	0x03A01A48 CBZ X8, 0x3A01A60
	0x03A01A4C LDR W0, [X8 + 0x28]
	0x03A01A50 B 0x3A01A58
	0x03A01A54 LDR W0, [X8 + 0x50]
	0x03A01A58 LDR X30, [X31], #0x10
	0x03A01A5C RET
	0x03A01A60 BL 0x1C16F20
	0x03A01A64 STR X30, [X31 - 0x10]!
	0x03A01A68 LDR X8, [X0 + 0x40]
	0x03A01A6C CBZ X8, 0x3A01A7C
	0x03A01A70 LDRB W0, [X8 + 0x54]
	0x03A01A74 LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x9E1000
	007 Move X22, 0x753000
	008 Move X21, 0x753000
	009 Move W8, [X20+3907]
	010 Move X22, [X22+2608]
	011 Move X21, [X21+4064]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x753000
	018 Move X0, [X0+4064]
	019 Call 0x1C17CF4
	020 Move X0, 0x753000
	021 Move X0, [X0+2608]
	022 Call 0x1C17CF4
	023 Move X0, 0x753000
	024 Move X0, [X0+2616]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3907], W8
	028 Move X0, X19
	029 Move X1, X31
	030 Call Toggle.Start, X0
	031 Move X0, [X22]
	032 Move X20, [X19+280]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call 0x27269E8, X0, X1, X2
	039 Compare X20, 0
	040 JumpIfEqual {57}
	041 Move X8, 0x753000
	042 Move X8, [X8+2616]
	043 Move X0, X20
	044 Move X1, X21
	045 Move X2, [X8]
	046 Call 0x27298B4, X0, X1
	047 Move W1, [X19+288]
	048 Move X0, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move W2, 1
	054 Move X30, [X31+48]
	055 Call UIFoldout.SetState, X0, X1, X2
	056 Return 
	057 Call 0x1C17F20

Method: System.Void OnValidate()

Disassembly:
	0x03A01A84 STP D9, D8, [X31 + 0x10]
	0x03A01A88 STR X30, [X31 + 0x20]
	0x03A01A8C LDR X8, [X0 + 0x40]

ISIL:
	001 Move W1, [X0+288]
	002 Move W2, W31

Method: System.Void SetState(System.Boolean state)

Disassembly:
	0x03A01A78 RET
	0x03A01A7C BL 0x1C16F20
	0x03A01A80 STP D11, D10, [X31 - 0x30]!

ISIL:
	001 And W1, W1, 1
	002 Move W2, 1
	003 Call UIFoldout.SetState, X0, X1, X2
	004 Return 

Method: System.Void SetState(System.Boolean state, System.Boolean rebuildLayout)

Disassembly:
	0x03A01A90 CBZ X8, 0x3A01C34
	0x03A01A94 LDR V10, [X8 + 0x4C]
	0x03A01A98 MOV V8.16B, V2.16B
	0x03A01A9C MOV V9.16B, V1.16B
	0x03A01AA0 FCMP S10, 0x0
	0x03A01AA4 B.EQ 0x3A01C1C
	0x03A01AA8 FDIV S11, S0, S10
	0x03A01AAC FCVT S0, S11
	0x03A01AB0 ADD X0, X31, 0x28
	0x03A01AB4 BL 0x3EB1C00
	0x03A01AB8 FCMP S11, 0x0
	0x03A01ABC B.GE 0x3A01AD8
	0x03A01AC0 FMOV D1, -0.5
	0x03A01AC4 FCMP D0, D1
	0x03A01AC8 B.NE 0x3A01B04
	0x03A01ACC LDR V0, [X31 + 0x28]
	0x03A01AD0 FMOV S1, -1
	0x03A01AD4 B 0x3A01AEC
	0x03A01AD8 FMOV D1, 0.5
	0x03A01ADC FCMP D0, D1
	0x03A01AE0 B.NE 0x3A01B14
	0x03A01AE4 LDR V0, [X31 + 0x28]
	0x03A01AE8 FMOV S1, 1
	0x03A01AEC FCVTZS X8, D0
	0x00000000 INVALID
	0x03A01AF4 FADD S1, S0, S1
	0x03A01AF8 ANDS X31, X8, 0x1
	0x03A01AFC FCSEL S11, S0, S1, EQ
	0x03A01B00 B 0x3A01B20
	0x03A01B04 FMOV S0, -0.5
	0x03A01B08 FADD S0, S11, S0
	0x03A01B0C FRINTP S11, S0
	0x03A01B10 B 0x3A01B20
	0x03A01B14 FMOV S0, 0.5
	0x03A01B18 FADD S0, S11, S0
	0x03A01B1C FRINTM S11, S0
	0x03A01B20 FDIV S9, S9, S10
	0x03A01B24 FCVT S0, S9
	0x03A01B28 ADD X0, X31, 0x28
	0x03A01B2C BL 0x3EB1C00
	0x03A01B30 FCMP S9, 0x0
	0x03A01B34 B.GE 0x3A01B50
	0x03A01B38 FMOV D1, -0.5
	0x03A01B3C FCMP D0, D1
	0x03A01B40 B.NE 0x3A01B7C
	0x03A01B44 LDR V0, [X31 + 0x28]
	0x03A01B48 FMOV S1, -1
	0x03A01B4C B 0x3A01B64
	0x03A01B50 FMOV D1, 0.5
	0x03A01B54 FCMP D0, D1
	0x03A01B58 B.NE 0x3A01B8C
	0x03A01B5C LDR V0, [X31 + 0x28]
	0x03A01B60 FMOV S1, 1
	0x03A01B64 FCVTZS X8, D0
	0x00000000 INVALID
	0x03A01B6C FADD S1, S0, S1
	0x03A01B70 ANDS X31, X8, 0x1
	0x03A01B74 FCSEL S9, S0, S1, EQ
	0x03A01B78 B 0x3A01B98
	0x03A01B7C FMOV S0, -0.5
	0x03A01B80 FADD S0, S9, S0
	0x03A01B84 FRINTP S9, S0
	0x03A01B88 B 0x3A01B98
	0x03A01B8C FMOV S0, 0.5
	0x03A01B90 FADD S0, S9, S0
	0x03A01B94 FRINTM S9, S0
	0x03A01B98 FDIV S8, S8, S10
	0x03A01B9C FCVT S0, S8
	0x03A01BA0 ADD X0, X31, 0x28
	0x03A01BA4 BL 0x3EB1C00
	0x03A01BA8 FCMP S8, 0x0
	0x03A01BAC B.GE 0x3A01BC8
	0x03A01BB0 FMOV D1, -0.5
	0x03A01BB4 FCMP D0, D1
	0x03A01BB8 B.NE 0x3A01BF4
	0x03A01BBC LDR V0, [X31 + 0x28]
	0x03A01BC0 FMOV S1, -1
	0x03A01BC4 B 0x3A01BDC
	0x03A01BC8 FMOV D1, 0.5
	0x03A01BCC FCMP D0, D1
	0x03A01BD0 B.NE 0x3A01C04
	0x03A01BD4 LDR V0, [X31 + 0x28]
	0x03A01BD8 FMOV S1, 1
	0x03A01BDC FCVTZS X8, D0
	0x00000000 INVALID
	0x03A01BE4 FADD S1, S0, S1
	0x03A01BE8 ANDS X31, X8, 0x1
	0x03A01BEC FCSEL S1, S0, S1, EQ
	0x03A01BF0 B 0x3A01C10
	0x03A01BF4 FMOV S0, -0.5
	0x03A01BF8 FADD S0, S8, S0
	0x03A01BFC FRINTP S1, S0
	0x03A01C00 B 0x3A01C10
	0x03A01C04 FMOV S0, 0.5
	0x03A01C08 FADD S0, S8, S0
	0x03A01C0C FRINTM S1, S0
	0x03A01C10 FMUL S0, S10, S11
	0x03A01C14 FMUL S9, S10, S9
	0x03A01C18 FMUL S8, S10, S1
	0x03A01C1C MOV V1.16B, V9.16B
	0x03A01C20 MOV V2.16B, V8.16B
	0x03A01C24 LDR X30, [X31 + 0x20]
	0x03A01C28 LDP D9, D8, [X31 + 0x10]
	0x03A01C2C LDP D11, D10, [X31], #0x30
	0x03A01C30 RET
	0x03A01C34 BL 0x1C16F20
	0x03A01C38 MOV X8, X0
	0x03A01C3C LDR X0, [X0 + 0x40]
	0x03A01C40 MOVZ W9, 0x1
	0x03A01C44 STRB W9, [X8 + 0x48]
	0x03A01C48 CBZ X0, 0x3A01C54
	0x03A01C4C MOV X1, X31
	0x03A01C50 B 0x3A21050
	0x03A01C54 RET
	0x03A01C58 LDR W8, [X0 + 0x34]
	0x03A01C5C CMP W8, 0x0
	0x03A01C60 CSET W0, EQ
	0x03A01C64 RET
	0x03A01C68 STR X30, [X31 - 0x10]!
	0x03A01C6C LDR X8, [X0 + 0x40]
	0x03A01C70 CBZ X8, 0x3A01C80
	0x03A01C74 LDR X0, [X8 + 0x30]
	0x03A01C78 LDR X30, [X31], #0x10
	0x03A01C7C RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x9E1000
	008 Move X23, 0x6F3000
	009 Move W8, [X22+3908]
	010 Move X23, [X23+1432]
	011 Move W20, W2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x6F6000
	019 Move X0, [X0+2336]
	020 Call 0x1C17CF4
	021 Move X0, 0x6F3000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x71A000
	025 Move X0, [X0+3184]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+3908], W8
	029 Move X0, [X23]
	030 Move X22, [X19+304]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X22
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {144}
	043 Move X0, [X23]
	044 Move X22, [X19+312]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X22
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {144}
	057 Move X0, [X23]
	058 Move X22, [X19+296]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X22
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Equality, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {144}
	071 Move X0, [X19+304]
	072 Compare X0, 0
	073 JumpIfEqual {161}
	074 Move X1, X31
	075 Call GameObject.get_activeSelf, X0
	076 And W8, W0, 1
	077 And W9, W21, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, [X19+304]
	080 Compare X0, 0
	081 JumpIfEqual {161}
	082 And W1, W21, 1
	083 Move X2, X31
	084 Call GameObject.SetActive, X0, X1
	085 Move X0, [X19+312]
	086 Compare X0, 0
	087 JumpIfEqual {161}
	088 Move X1, X31
	089 Call GameObject.get_activeSelf, X0
	090 Xor W8, W0, W21
	091 Move TEMP, X8
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {102}
	095 Move X0, [X19+312]
	096 Compare X0, 0
	097 JumpIfEqual {161}
	098 NotImplemented "Instruction ORN not yet implemented."
	099 And W1, W8, 1
	100 Move X2, X31
	101 Call GameObject.SetActive, X0, X1
	102 Move X0, [X19+296]
	103 Compare X0, 0
	104 JumpIfEqual {161}
	105 Move X1, X31
	106 Call GameObject.get_activeSelf, X0
	107 And W8, W0, 1
	108 And W9, W21, 1
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X0, [X19+296]
	111 Compare X0, 0
	112 JumpIfEqual {161}
	113 And W1, W21, 1
	114 Move X2, X31
	115 Call GameObject.SetActive, X0, X1
	116 Move TEMP, X20
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {144}
	120 Move X0, X19
	121 Move X1, X31
	122 Call Component.get_transform, X0
	123 Compare X0, 0
	124 JumpIfEqual {161}
	125 Move X1, X31
	126 Call Transform.get_parent, X0
	127 Move X8, 0x6F6000
	128 Move X8, [X8+2336]
	129 Move X19, X0
	130 Move X8, [X8]
	131 Move W9, [X8+224]
	132 Compare W9, 0
	133 JumpIfNotEqual {136}
	134 Move X0, X8
	135 Call 0x1C17DFC
	136 Compare X19, 0
	137 JumpIfEqual {151}
	138 Move X8, 0x71A000
	139 Move X8, [X8+3184]
	140 Move X9, [X19]
	141 Move X8, [X8]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction CSEL not yet implemented."
	144 Move X20, [X31+32]
	145 Move X19, [X31+40]
	146 Move X22, [X31+16]
	147 Move X21, [X31+24]
	148 Move X30, [X31+48]
	149 Move X23, [X31+56]
	150 Return 
	151 Move X0, X31
	152 Move X20, [X31+32]
	153 Move X19, [X31+40]
	154 Move X22, [X31+16]
	155 Move X21, [X31+24]
	156 Move X1, X31
	157 Move X30, [X31+48]
	158 Move X23, [X31+56]
	159 Call LayoutRebuilder.ForceRebuildLayoutImmediate, X0
	160 Return 
	161 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03A01C80 BL 0x1C16F20
	0x03A01C84 STR X30, [X31 - 0x20]!

ISIL:
	001 Move X1, X31
	002 Call Toggle..ctor, X0
	003 Return 

