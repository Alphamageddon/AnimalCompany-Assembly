Type: UnityEngine.Rendering.UI.DebugUIHandlerValueTuple

Method: System.Void OnEnable()

Disassembly:
	0x039FF78C LDR X21, [X21 + 0x9E8]
	0x039FF790 MOV X20, X1

ISIL:
	001 Move [X0+128], W31
	002 Return 

Method: System.Boolean OnSelection(System.Boolean fromNext, UnityEngine.Rendering.UI.DebugUIHandlerWidget previous)

Disassembly:
	0x039FF794 MOV X19, X0
	0x039FF798 TBNZ X8, 0x0, 0x39FF81C
	0x039FF79C ADRP X0, 0x6F6000
	0x039FF7A0 LDR X0, [X0 + 0x5B0]
	0x039FF7A4 BL 0x1C16CF4
	0x039FF7A8 ADRP X0, 0x754000
	0x039FF7AC LDR X0, [X0 + 0x9E8]
	0x039FF7B0 BL 0x1C16CF4
	0x039FF7B4 ADRP X0, 0x754000
	0x039FF7B8 LDR X0, [X0 + 0xF28]
	0x039FF7BC BL 0x1C16CF4
	0x039FF7C0 ADRP X0, 0x754000
	0x039FF7C4 LDR X0, [X0 + 0xF30]
	0x039FF7C8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+96]
	004 Compare X0, 0
	005 JumpIfEqual {17}
	006 Move X9, [X0]
	007 Move S2, [X8+56]
	008 Move S3, [X8+60]
	009 Move S0, [X8+48]
	010 Move S1, [X8+52]
	011 Move X8, [X9+680]
	012 Move X1, [X9+688]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move W0, 1
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20

Method: System.Void OnDeselection()

Disassembly:
	0x039FF7CC ADRP X0, 0x754000
	0x039FF7D0 LDR X0, [X0 + 0xF38]
	0x039FF7D4 BL 0x1C16CF4
	0x039FF7D8 ADRP X0, 0x754000
	0x039FF7DC LDR X0, [X0 + 0xF40]
	0x039FF7E0 BL 0x1C16CF4
	0x039FF7E4 ADRP X0, 0x754000
	0x039FF7E8 LDR X0, [X0 + 0xF48]
	0x039FF7EC BL 0x1C16CF4
	0x039FF7F0 ADRP X0, 0x754000
	0x039FF7F4 LDR X0, [X0 + 0xF50]
	0x039FF7F8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+96]
	004 Compare X0, 0
	005 JumpIfEqual {15}
	006 Move X9, [X0]
	007 Move S2, [X8+40]
	008 Move S3, [X8+44]
	009 Move S0, [X8+32]
	010 Move S1, [X8+36]
	011 Move X2, [X9+680]
	012 Move X1, [X9+688]
	013 Move X30, [X31+16]
	014 CallNoReturn X2
	015 Call 0x1C17F20

Method: System.Void SetWidget(UnityEngine.Rendering.DebugUI/Widget widget)

Disassembly:
	0x039FF7FC ADRP X0, 0x754000
	0x039FF800 LDR X0, [X0 + 0xF20]
	0x039FF804 BL 0x1C16CF4
	0x039FF808 ADRP X0, 0x753000
	0x039FF80C LDR X0, [X0 + 0x690]
	0x039FF810 BL 0x1C16CF4
	0x039FF814 MOVZ W8, 0x1
	0x039FF818 STRB W8, [X23 + 0xF30]
	0x039FF81C STR X20, [X19 + 0x58]
	0x039FF820 LDR X1, [X22]
	0x039FF824 MOV X0, X19
	0x039FF828 BL 0x21A8CFC
	0x039FF82C STR X0, [X19 + 0x88]
	0x039FF830 LDR X1, [X21]
	0x039FF834 MOV X0, X19
	0x039FF838 BL 0x21A3894
	0x039FF83C LDR X8, [X19 + 0x88]
	0x039FF840 STR X0, [X19 + 0x90]
	0x039FF844 CBZ X8, 0x39FF9F0
	0x039FF848 LDR X0, [X19 + 0x60]
	0x039FF84C CBZ X0, 0x39FF9F0
	0x039FF850 LDR X9, [X0]
	0x039FF854 LDR X1, [X8 + 0x28]
	0x039FF858 ADRP X21, 0x753000
	0x039FF85C ADRP X20, 0x754000
	0x039FF860 LDR X8, [X9 + 0x5E8]
	0x039FF864 LDR X2, [X9 + 0x5F0]
	0x039FF868 LDR X21, [X21 + 0x690]
	0x039FF86C LDR X20, [X20 + 0xF28]
	0x039FF870 BLR X8
	0x039FF874 LDR X0, [X21]
	0x039FF878 LDR X23, [X19 + 0x70]
	0x039FF87C BL 0x1C16F10
	0x039FF880 LDR X2, [X20]
	0x039FF884 MOV X1, X19
	0x039FF888 MOV X3, X31
	0x039FF88C MOV X20, X0
	0x039FF890 BL 0x2D27F24
	0x039FF894 CBZ X23, 0x39FF9F0
	0x039FF898 ADRP X22, 0x6F6000
	0x039FF89C LDR X22, [X22 + 0x5B0]
	0x039FF8A0 STR X20, [X23 + 0x70]
	0x039FF8A4 ADRP X20, 0x754000
	0x039FF8A8 LDR X23, [X19 + 0x70]
	0x039FF8AC LDR X0, [X22]
	0x039FF8B0 LDR X20, [X20 + 0xF30]
	0x039FF8B4 BL 0x1C16F10
	0x039FF8B8 LDR X2, [X20]
	0x039FF8BC MOV X1, X19
	0x039FF8C0 MOV X3, X31
	0x039FF8C4 MOV X20, X0
	0x039FF8C8 BL 0x2A6DA40
	0x039FF8CC CBZ X23, 0x39FF9F0
	0x039FF8D0 STR X20, [X23 + 0x78]
	0x039FF8D4 LDR X1, [X19 + 0x70]
	0x039FF8D8 CBZ X1, 0x39FF9F0
	0x039FF8DC LDR X8, [X19 + 0x78]
	0x039FF8E0 ADRP X20, 0x754000
	0x039FF8E4 LDR X20, [X20 + 0xF38]
	0x039FF8E8 MOV X0, X19
	0x039FF8EC STR X8, [X1 + 0x50]
	0x039FF8F0 BL 0x39FF9F4
	0x039FF8F4 LDR X0, [X21]
	0x039FF8F8 LDR X23, [X19 + 0x78]
	0x039FF8FC BL 0x1C16F10
	0x039FF900 LDR X2, [X20]
	0x039FF904 MOV X1, X19
	0x039FF908 MOV X3, X31
	0x039FF90C MOV X20, X0
	0x039FF910 BL 0x2D27F24
	0x039FF914 CBZ X23, 0x39FF9F0
	0x039FF918 STR X20, [X23 + 0x70]
	0x039FF91C LDR X0, [X22]
	0x039FF920 ADRP X20, 0x754000
	0x039FF924 LDR X23, [X19 + 0x78]
	0x039FF928 LDR X20, [X20 + 0xF40]
	0x039FF92C BL 0x1C16F10
	0x039FF930 LDR X2, [X20]
	0x039FF934 MOV X1, X19
	0x039FF938 MOV X3, X31
	0x039FF93C MOV X20, X0
	0x039FF940 BL 0x2A6DA40
	0x039FF944 CBZ X23, 0x39FF9F0
	0x039FF948 STR X20, [X23 + 0x78]
	0x039FF94C LDR X1, [X19 + 0x78]
	0x039FF950 CBZ X1, 0x39FF9F0
	0x039FF954 LDR X8, [X19 + 0x70]
	0x039FF958 ADRP X20, 0x754000
	0x039FF95C MOV X0, X19
	0x039FF960 STR X8, [X1 + 0x48]
	0x039FF964 LDR X8, [X19 + 0x80]
	0x039FF968 LDR X20, [X20 + 0xF48]
	0x039FF96C STR X8, [X1 + 0x50]
	0x039FF970 BL 0x39FF9F4
	0x039FF974 LDR X0, [X21]
	0x039FF978 LDR X23, [X19 + 0x80]
	0x039FF97C BL 0x1C16F10
	0x039FF980 LDR X2, [X20]
	0x039FF984 MOV X1, X19
	0x039FF988 MOV X3, X31
	0x039FF98C MOV X20, X0
	0x039FF990 BL 0x2D27F24
	0x039FF994 CBZ X23, 0x39FF9F0
	0x039FF998 STR X20, [X23 + 0x70]
	0x039FF99C LDR X0, [X22]
	0x039FF9A0 ADRP X20, 0x754000
	0x039FF9A4 LDR X21, [X19 + 0x80]
	0x039FF9A8 LDR X20, [X20 + 0xF50]
	0x039FF9AC BL 0x1C16F10
	0x039FF9B0 LDR X2, [X20]
	0x039FF9B4 MOV X1, X19
	0x039FF9B8 MOV X3, X31
	0x039FF9BC MOV X20, X0
	0x039FF9C0 BL 0x2A6DA40
	0x039FF9C4 CBZ X21, 0x39FF9F0
	0x039FF9C8 STR X20, [X21 + 0x78]
	0x039FF9CC LDR X1, [X19 + 0x80]
	0x039FF9D0 CBZ X1, 0x39FF9F0
	0x039FF9D4 LDR X8, [X19 + 0x78]
	0x039FF9D8 MOV X0, X19
	0x039FF9DC LDP X20, X19, [X31 + 0x20]
	0x039FF9E0 LDP X22, X21, [X31 + 0x10]
	0x039FF9E4 STR X8, [X1 + 0x48]
	0x039FF9E8 LDP X30, X23, [X31], #0x30
	0x039FF9EC B 0x39FF9F4
	0x039FF9F0 BL 0x1C16F20
	0x039FF9F4 STR X30, [X31 - 0x40]!
	0x039FF9F8 STP X24, X23, [X31 + 0x10]
	0x039FF9FC STP X22, X21, [X31 + 0x20]
	0x039FFA00 STP X20, X19, [X31 + 0x30]
	0x039FFA04 ADRP X21, 0x9E2000
	0x039FFA08 LDRB W8, [X21 + 0xF32]
	0x039FFA0C MOV X19, X1
	0x039FFA10 MOV X20, X0
	0x039FFA14 TBNZ X8, 0x0, 0x39FFA50
	0x039FFA18 ADRP X0, 0x754000
	0x039FFA1C LDR X0, [X0 + 0xF58]
	0x039FFA20 BL 0x1C16CF4
	0x039FFA24 ADRP X0, 0x754000
	0x039FFA28 LDR X0, [X0 + 0xF60]
	0x039FFA2C BL 0x1C16CF4
	0x039FFA30 ADRP X0, 0x754000
	0x039FFA34 LDR X0, [X0 + 0xF68]
	0x039FFA38 BL 0x1C16CF4
	0x039FFA3C ADRP X0, 0x753000
	0x039FFA40 LDR X0, [X0 + 0x690]
	0x039FFA44 BL 0x1C16CF4
	0x039FFA48 MOVZ W8, 0x1
	0x039FFA4C STRB W8, [X21 + 0xF32]
	0x039FFA50 CBZ X19, 0x39FFAF0
	0x039FFA54 ADRP X22, 0x753000
	0x039FFA58 LDR X22, [X22 + 0x690]
	0x039FFA5C STR X20, [X19 + 0x40]
	0x039FFA60 ADRP X21, 0x754000
	0x039FFA64 ADRP X23, 0x754000
	0x039FFA68 LDR X0, [X22]
	0x039FFA6C ADRP X24, 0x754000
	0x039FFA70 LDR X21, [X21 + 0xF58]
	0x039FFA74 LDR X23, [X23 + 0xF60]
	0x039FFA78 LDR X24, [X24 + 0xF68]
	0x039FFA7C BL 0x1C16F10
	0x039FFA80 LDR X2, [X21]
	0x039FFA84 MOV X1, X20
	0x039FFA88 MOV X3, X31
	0x039FFA8C MOV X21, X0
	0x039FFA90 BL 0x2D27F24
	0x039FFA94 STR X21, [X19 + 0x80]
	0x039FFA98 LDR X0, [X22]
	0x039FFA9C BL 0x1C16F10
	0x039FFAA0 LDR X2, [X23]
	0x039FFAA4 MOV X1, X20
	0x039FFAA8 MOV X3, X31
	0x039FFAAC MOV X21, X0
	0x039FFAB0 BL 0x2D27F24
	0x039FFAB4 STR X21, [X19 + 0x88]
	0x039FFAB8 LDR X0, [X22]
	0x039FFABC BL 0x1C16F10
	0x039FFAC0 LDR X2, [X24]
	0x039FFAC4 MOV X1, X20
	0x039FFAC8 MOV X3, X31
	0x039FFACC MOV X21, X0
	0x039FFAD0 BL 0x2D27F24
	0x039FFAD4 STR X21, [X19 + 0x90]
	0x039FFAD8 MOV X0, X19
	0x039FFADC LDP X20, X19, [X31 + 0x30]
	0x039FFAE0 LDP X22, X21, [X31 + 0x20]
	0x039FFAE4 LDP X24, X23, [X31 + 0x10]
	0x039FFAE8 LDR X30, [X31], #0x40
	0x039FFAEC B 0x39FB2B0
	0x039FFAF0 BL 0x1C16F20
	0x039FFAF4 STR D8, [X31 - 0x40]!
	0x039FFAF8 STP X30, X23, [X31 + 0x10]
	0x039FFAFC STP X22, X21, [X31 + 0x20]
	0x039FFB00 STP X20, X19, [X31 + 0x30]
	0x039FFB04 ADRP X23, 0x9E2000
	0x039FFB08 LDRB W8, [X23 + 0xF31]
	0x039FFB0C MOV W21, W3
	0x039FFB10 MOV W20, W2
	0x039FFB14 MOV W19, W1
	0x039FFB18 MOV V8.16B, V0.16B
	0x039FFB1C MOV X22, X0
	0x039FFB20 TBNZ X8, 0x0, 0x39FFB38
	0x039FFB24 ADRP X0, 0x754000
	0x039FFB28 LDR X0, [X0 + 0xF70]
	0x039FFB2C BL 0x1C16CF4
	0x039FFB30 MOVZ W8, 0x1
	0x039FFB34 STRB W8, [X23 + 0xF31]
	0x039FFB38 LDR X0, [X22 + 0x88]
	0x039FFB3C CBZ X0, 0x39FFB90
	0x039FFB40 ADRP X8, 0x754000
	0x039FFB44 LDR X8, [X8 + 0xF70]
	0x039FFB48 LDR X1, [X8]

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x9E3000
	015 Move X21, 0x755000
	016 Move W8, [X22+3875]
	017 Move X21, [X21+3784]
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {47}
	024 Move X0, 0x755000
	025 Move X0, [X0+3784]
	026 Call 0x1C17CF4
	027 Move X0, 0x755000
	028 Move X0, [X0+3264]
	029 Call 0x1C17CF4
	030 Move X0, 0x755000
	031 Move X0, [X0+3272]
	032 Call 0x1C17CF4
	033 Move X0, 0x6F9000
	034 Move X0, [X0+464]
	035 Call 0x1C17CF4
	036 Move X0, 0x6F5000
	037 Move X0, [X0+1432]
	038 Call 0x1C17CF4
	039 Move X0, 0x71C000
	040 Move X0, [X0+3184]
	041 Call 0x1C17CF4
	042 Move X0, 0x755000
	043 Move X0, [X0+3216]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+3875], W8
	047 Move [X19+88], X20
	048 Move X1, [X21]
	049 Move X0, X19
	050 Call 0x21A9CFC, X0
	051 Move [X19+112], X0
	052 Compare X0, 0
	053 JumpIfEqual {237}
	054 Move X8, [X19+96]
	055 Compare X8, 0
	056 JumpIfEqual {237}
	057 Move X9, [X8]
	058 Move X1, [X0+40]
	059 Move X0, X8
	060 Move X10, [X9+1512]
	061 Move X2, [X9+1520]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X0, [X19+112]
	064 Compare X0, 0
	065 JumpIfEqual {237}
	066 Move X20, 0x755000
	067 Move X20, [X20+3216]
	068 Move X1, X31
	069 Call ValueTuple.get_numElements, X0
	070 Move X8, [X20]
	071 Move W20, W0
	072 Move W1, W20
	073 Move X0, X8
	074 Call 0x1C17D6C
	075 Move [X19+120], X0
	076 Compare X0, 0
	077 JumpIfEqual {237}
	078 Move X22, [X19+104]
	079 Move X21, X0
	080 Compare X22, 0
	081 JumpIfEqual {88}
	082 Move X8, [X21]
	083 Move X0, X22
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {239}
	088 Move W8, [X21+24]
	089 Compare W8, 0
	090 JumpIfEqual {238}
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move [X21+32], X22
	093 Move X26, 0x755000
	094 Move X27, 0x71C000
	095 Move X25, 0x755000
	096 Move X26, [X26+3264]
	097 Move X27, [X27+3184]
	098 Move X25, [X25+3272]
	099 Move W8, 0x43660000
	100 NotImplemented "Instruction SCVTF not yet implemented."
	101 Move W9, W20
	102 Move S1, W8
	103 Move X23, X31
	104 Move W28, 0x42C80000
	105 Move W29, 0x43480000
	106 NotImplemented "Instruction FDIV not yet implemented."
	107 Subtract X24, X9, 1
	108 Move X0, [X19+104]
	109 Compare X0, 0
	110 JumpIfEqual {237}
	111 Move X1, X31
	112 Call Component.get_gameObject, X0
	113 Move X20, X0
	114 Move X0, X19
	115 Move X1, X31
	116 Call Component.get_transform, X0
	117 Move X8, 0x6F5000
	118 Move X8, [X8+1432]
	119 Move X21, X0
	120 Move X8, [X8]
	121 Move W9, [X8+224]
	122 Compare W9, 0
	123 JumpIfNotEqual {126}
	124 Move X0, X8
	125 Call 0x1C17DFC
	126 Move X8, 0x6F9000
	127 Move X8, [X8+464]
	128 Move X0, X20
	129 Move X1, X21
	130 Move X2, [X8]
	131 Call 0x222E488, X0, X1
	132 Compare X0, 0
	133 JumpIfEqual {237}
	134 Move X1, [X26]
	135 Move X20, X0
	136 Call 0x21E61FC, X0
	137 Compare X0, 0
	138 JumpIfEqual {237}
	139 Move X8, [X0]
	140 Move W1, 1
	141 Move X9, [X8+760]
	142 Move X2, [X8+768]
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move X0, X20
	145 Move X1, X31
	146 Call GameObject.get_transform, X0
	147 Move X8, [X19+96]
	148 Compare X8, 0
	149 JumpIfEqual {237}
	150 Move X21, X0
	151 Move X0, X8
	152 Move X1, X31
	153 Call Component.get_transform, X0
	154 Move X8, [X27]
	155 Compare X0, 0
	156 JumpIfEqual {162}
	157 Move X9, [X0]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 NotImplemented "Instruction CSEL not yet implemented."
	160 Compare X21, 0
	161 JumpIfNotEqual {165}
	162 Move X22, X31
	163 Compare X21, 0
	164 JumpIfEqual {237}
	165 Move X9, [X21]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move S0, W31
	168 Move S1, 1
	169 Move X0, X21
	170 Move X1, X31
	171 Call RectTransform.set_anchorMin, X0, X1
	172 Move S0, W31
	173 Move S1, 1
	174 Move X0, X21
	175 Move X1, X31
	176 Call RectTransform.set_anchorMax, X0, X1
	177 Move S1, 26
	178 Move S0, W28
	179 Move X0, X21
	180 Move X1, X31
	181 Call RectTransform.set_sizeDelta, X0, X1
	182 Compare X22, 0
	183 JumpIfEqual {237}
	184 Move X0, X22
	185 Move X1, X31
	186 Call RectTransform.get_anchoredPosition, X0
	187 Add W8, W23, 2
	188 NotImplemented "Instruction SCVTF not yet implemented."
	189 Multiply S2, S8, S2
	190 Move S3, W29
	191 Add S2, S2, S3
	192 Add S0, S2, S0
	193 Move X0, X21
	194 Move X1, X31
	195 Call RectTransform.set_anchoredPosition, X0, X1
	196 Move S0, W31
	197 Move S1, 1
	198 Move X0, X21
	199 Move X1, X31
	200 Call RectTransform.set_pivot, X0, X1
	201 Move X1, [X25]
	202 Move X21, [X19+120]
	203 Move X0, X20
	204 Call 0x21E62E4, X0
	205 Compare X21, 0
	206 JumpIfEqual {237}
	207 Move X20, X0
	208 Compare X0, 0
	209 JumpIfEqual {216}
	210 Move X8, [X21]
	211 Move X0, X20
	212 Move X1, [X8+64]
	213 Call 0x1C17E00
	214 Compare X0, 0
	215 JumpIfEqual {239}
	216 Move W8, [X21+24]
	217 Add X9, X23, 1
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Add X8, X21, X23
	220 Add X23, X23, 1
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move [X8+40], X20
	223 Move X20, [X31+96]
	224 Move X19, [X31+104]
	225 Move X22, [X31+80]
	226 Move X21, [X31+88]
	227 Move X24, [X31+64]
	228 Move X23, [X31+72]
	229 Move X26, [X31+48]
	230 Move X25, [X31+56]
	231 Move X28, [X31+32]
	232 Move X27, [X31+40]
	233 Move X29, [X31+16]
	234 Move X30, [X31+24]
	235 Move V8, [X31+112]
	236 Return 
	237 Call 0x1C17F20
	238 Call 0x1C17F28
	239 Call 0x1C17F44
	240 Move X1, X31
	241 Call 0x1C17DEC

Method: System.Void UpdateValueLabels()

Disassembly:
	0x039FFB4C BL 0x2D1AA98
	0x039FFB50 LDR X0, [X22 + 0x88]
	0x039FFB54 CBZ X0, 0x39FFB90
	0x039FFB58 LDR X8, [X0]
	0x039FFB5C ANDS W31, W21, 0x1
	0x039FFB60 FCSEL S2, S8, S2, NE
	0x039FFB64 ANDS W31, W20, 0x1
	0x039FFB68 LDR X2, [X8 + 0x238]
	0x039FFB6C LDR X1, [X8 + 0x240]
	0x039FFB70 FCSEL S1, S8, S1, NE
	0x039FFB74 ANDS W31, W19, 0x1
	0x039FFB78 LDP X20, X19, [X31 + 0x30]
	0x039FFB7C LDP X22, X21, [X31 + 0x20]
	0x039FFB80 LDP X30, X23, [X31 + 0x10]
	0x039FFB84 FCSEL S0, S8, S0, NE
	0x039FFB88 LDR V8, [X31], #0x40
	0x039FFB8C BR X2
	0x039FFB90 BL 0x1C16F20
	0x039FFB94 STR X30, [X31 - 0x30]!
	0x039FFB98 STP X22, X21, [X31 + 0x10]
	0x039FFB9C STP X20, X19, [X31 + 0x20]
	0x039FFBA0 ADRP X22, 0x9E2000
	0x039FFBA4 LDRB W8, [X22 + 0xF33]
	0x039FFBA8 MOV X20, X2
	0x039FFBAC MOV W21, W1
	0x039FFBB0 MOV X19, X0
	0x039FFBB4 TBNZ X8, 0x0, 0x39FFBCC
	0x039FFBB8 ADRP X0, 0x751000
	0x039FFBBC LDR X0, [X0 + 0x778]
	0x039FFBC0 BL 0x1C16CF4
	0x039FFBC4 MOVZ W8, 0x1
	0x039FFBC8 STRB W8, [X22 + 0xF33]
	0x039FFBCC TBNZ X21, 0x0, 0x39FFBF4
	0x039FFBD0 LDR X8, [X19 + 0x68]
	0x039FFBD4 CBZ X8, 0x39FFC74
	0x039FFBD8 LDRB W8, [X8 + 0x120]
	0x039FFBDC CBZ W8, 0x39FFBF4
	0x039FFBE0 LDR X0, [X19 + 0x90]
	0x039FFBE4 CBZ X0, 0x39FFC74
	0x039FFBE8 MOV X1, X20
	0x039FFBEC BL 0x39F640C
	0x039FFBF0 TBZ X0, 0x0, 0x39FFC28
	0x039FFBF4 LDR X0, [X19 + 0x60]
	0x039FFBF8 CBZ X0, 0x39FFC74
	0x039FFBFC LDR X8, [X0]
	0x039FFC00 LDP S2, S3, [X19 + 0x38]
	0x039FFC04 LDP S0, S1, [X19 + 0x30]
	0x039FFC08 LDR X9, [X8 + 0x2A8]
	0x039FFC0C LDR X1, [X8 + 0x2B0]
	0x039FFC10 BLR X9
	0x039FFC14 LDP X20, X19, [X31 + 0x20]
	0x039FFC18 LDP X22, X21, [X31 + 0x10]
	0x039FFC1C MOVZ W0, 0x1
	0x039FFC20 LDR X30, [X31], #0x30
	0x039FFC24 RET
	0x039FFC28 LDR X0, [X19 + 0x90]
	0x039FFC2C CBZ X0, 0x39FFC74
	0x039FFC30 BL 0x39F650C
	0x039FFC34 ADRP X8, 0x751000
	0x039FFC38 LDR X8, [X8 + 0x778]
	0x039FFC3C MOV X19, X0
	0x039FFC40 LDR X8, [X8]
	0x039FFC44 LDR W9, [X8 + 0xE0]
	0x039FFC48 CBNZ W9, 0x39FFC54
	0x039FFC4C MOV X0, X8
	0x039FFC50 BL 0x1C16DFC
	0x039FFC54 MOV X0, X31
	0x039FFC58 BL 0x399C120
	0x039FFC5C CBZ X0, 0x39FFC74
	0x039FFC60 MOV X1, X19
	0x039FFC64 MOV W2, W31
	0x039FFC68 MOV X3, X31
	0x039FFC6C BL 0x39A9954
	0x039FFC70 B 0x39FFC14
	0x039FFC74 BL 0x1C16F20
	0x039FFC78 STR X30, [X31 - 0x10]!
	0x039FFC7C MOV X8, X0
	0x039FFC80 LDR X0, [X0 + 0x60]
	0x039FFC84 CBZ X0, 0x39FFCA4
	0x039FFC88 LDR X9, [X0]
	0x039FFC8C LDP S2, S3, [X8 + 0x28]
	0x039FFC90 LDP S0, S1, [X8 + 0x20]
	0x039FFC94 LDR X2, [X9 + 0x2A8]
	0x039FFC98 LDR X1, [X9 + 0x2B0]
	0x039FFC9C LDR X30, [X31], #0x10
	0x039FFCA0 BR X2
	0x039FFCA4 BL 0x1C16F20
	0x039FFCA8 STR X30, [X31 - 0x10]!
	0x039FFCAC LDR X0, [X0 + 0x68]
	0x039FFCB0 CBZ X0, 0x39FFCC4
	0x039FFCB4 MOVZ W1, 0x1
	0x039FFCB8 MOV X2, X31
	0x039FFCBC LDR X30, [X31], #0x10
	0x039FFCC0 B 0x3E47488
	0x039FFCC4 BL 0x1C16F20
	0x039FFCC8 STR X30, [X31 - 0x10]!
	0x039FFCCC LDR X0, [X0 + 0x68]
	0x039FFCD0 CBZ X0, 0x39FFCE4
	0x039FFCD4 MOV W1, W31
	0x039FFCD8 MOV X2, X31
	0x039FFCDC LDR X30, [X31], #0x10
	0x039FFCE0 B 0x3E47488
	0x039FFCE4 BL 0x1C16F20
	0x039FFCE8 STR X30, [X31 - 0x10]!
	0x039FFCEC LDR X0, [X0 + 0x68]
	0x039FFCF0 CBZ X0, 0x39FFD0C
	0x039FFCF4 LDRB W8, [X0 + 0x120]
	0x039FFCF8 MOV X2, X31
	0x039FFCFC CMP W8, 0x0
	0x039FFD00 CSET W1, EQ
	0x039FFD04 LDR X30, [X31], #0x10
	0x039FFD08 B 0x3E47488
	0x039FFD0C BL 0x1C16F20
	0x039FFD10 STP X30, X21, [X31 - 0x20]!
	0x039FFD14 STP X20, X19, [X31 + 0x10]
	0x039FFD18 ADRP X20, 0x9E2000
	0x039FFD1C LDRB W8, [X20 + 0xF34]
	0x039FFD20 MOV X19, X0
	0x039FFD24 TBNZ X8, 0x0, 0x39FFD3C
	0x039FFD28 ADRP X0, 0x6F4000
	0x039FFD2C LDR X0, [X0 + 0x598]
	0x039FFD30 BL 0x1C16CF4
	0x039FFD34 MOVZ W8, 0x1
	0x039FFD38 STRB W8, [X20 + 0xF34]
	0x039FFD3C LDR X8, [X19 + 0x68]
	0x039FFD40 CBZ X8, 0x39FFDD4
	0x039FFD44 LDRB W8, [X8 + 0x120]
	0x039FFD48 CBZ W8, 0x39FFDB4
	0x039FFD4C ADRP X21, 0x6F4000
	0x039FFD50 LDR X21, [X21 + 0x598]
	0x039FFD54 LDR X20, [X19 + 0x90]
	0x039FFD58 LDR X0, [X21]
	0x039FFD5C LDR W8, [X0 + 0xE0]
	0x039FFD60 CBNZ W8, 0x39FFD68
	0x039FFD64 BL 0x1C16DFC
	0x039FFD68 MOV X0, X20
	0x039FFD6C MOV X1, X31
	0x039FFD70 MOV X2, X31
	0x039FFD74 BL 0x3C3883C
	0x039FFD78 TBNZ X0, 0x0, 0x39FFDB4
	0x039FFD7C LDR X0, [X19 + 0x90]
	0x039FFD80 CBZ X0, 0x39FFDD4
	0x039FFD84 BL 0x39F6800
	0x039FFD88 LDR X8, [X21]
	0x039FFD8C MOV X20, X0
	0x039FFD90 LDR W9, [X8 + 0xE0]
	0x039FFD94 CBNZ W9, 0x39FFDA0
	0x039FFD98 MOV X0, X8

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x9E3000
	014 Move W8, [X20+3876]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x755000
	021 Move X0, [X0+3792]
	022 Call 0x1C17CF4
	023 Move X0, 0x6F5000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move X0, 0x6F5000
	027 Move X0, [X0+2704]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3876], W8
	031 Move X0, [X19+112]
	032 Compare X0, 0
	033 JumpIfEqual {160}
	034 Move X22, 0x6F5000
	035 Move X23, 0x6F5000
	036 Move X22, [X22+1432]
	037 Move X23, [X23+2704]
	038 Add X25, X19, 32
	039 Add X26, X19, 36
	040 Add X27, X19, 40
	041 Add X28, X19, 44
	042 Move W29, 4
	043 Move X1, X31
	044 Subtract X24, X29, 4
	045 Call ValueTuple.get_numElements, X0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, [X19+120]
	048 Compare X8, 0
	049 JumpIfEqual {160}
	050 Move W9, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, [X22]
	054 Move X20, [X8]
	055 Move W9, [X0+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X20
	060 Move X1, X31
	061 Move X2, X31
	062 Call Object.op_Inequality, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {156}
	067 Move X8, [X19+112]
	068 Compare X8, 0
	069 JumpIfEqual {160}
	070 Move X8, [X8+72]
	071 Compare X8, 0
	072 JumpIfEqual {160}
	073 Move W9, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, [X8]
	076 Compare X0, 0
	077 JumpIfEqual {160}
	078 Move X8, [X0]
	079 Move X9, [X8+504]
	080 Move X1, [X8+512]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X8, [X19+120]
	083 Compare X8, 0
	084 JumpIfEqual {160}
	085 Move W9, [X8+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X9, [X19+112]
	088 Compare X9, 0
	089 JumpIfEqual {160}
	090 Move X9, [X9+72]
	091 Compare X9, 0
	092 JumpIfEqual {160}
	093 Move W10, [X9+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X20, X0
	096 Move X0, [X9]
	097 Compare X0, 0
	098 JumpIfEqual {160}
	099 Move X9, [X0]
	100 Move X21, [X8]
	101 Move X1, X20
	102 Move X8, [X9+520]
	103 Move X2, [X9+528]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Compare X21, 0
	106 JumpIfEqual {160}
	107 Move X8, [X21]
	108 Move X1, X0
	109 Move X0, X21
	110 Move X9, [X8+1512]
	111 Move X2, [X8+1520]
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Compare X20, 0
	114 JumpIfEqual {156}
	115 Move X8, [X23]
	116 Move X9, [X20]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X8, [X19+120]
	119 Compare X8, 0
	120 JumpIfEqual {160}
	121 Move W9, [X8+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X21, [X8]
	124 Move X0, X20
	125 Call 0x1C17E08
	126 Move V0, [X0]
	127 Move X11, X28
	128 Move X10, X27
	129 Move X9, X26
	130 NotImplemented "Instruction FCMP not yet implemented."
	131 Move X8, X25
	132 Move X9, 0x755000
	133 Move X9, [X9+3792]
	134 Move X0, [X9]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {141}
	138 Move X20, X9
	139 Call 0x1C17DFC
	140 Move X0, [X20]
	141 Move X8, [X0+184]
	142 Add X9, X8, 4
	143 Add X10, X8, 8
	144 Add X11, X8, 12
	145 Compare X21, 0
	146 JumpIfEqual {160}
	147 Move V3, [X11]
	148 Move X11, [X21]
	149 Move V2, [X10]
	150 Move V1, [X9]
	151 Move V0, [X8]
	152 Move X8, [X11+680]
	153 Move X1, [X11+688]
	154 Move X0, X21
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Move X0, [X19+112]
	157 Add X29, X29, 1
	158 Compare X0, 0
	159 JumpIfNotEqual {43}
	160 Call 0x1C17F20
	161 Move X20, [X31+80]
	162 Move X19, [X31+88]
	163 Move X22, [X31+64]
	164 Move X21, [X31+72]
	165 Move X24, [X31+48]
	166 Move X23, [X31+56]
	167 Move X26, [X31+32]
	168 Move X25, [X31+40]
	169 Move X28, [X31+16]
	170 Move X27, [X31+24]
	171 Move X29, [X31+96]
	172 Move X30, [X31+104]
	173 Return 
	174 Call 0x1C17F28

Method: System.Void Update()

Disassembly:
	0x039FFD9C BL 0x1C16DFC
	0x039FFDA0 MOV X0, X20
	0x039FFDA4 MOV X1, X31
	0x039FFDA8 MOV X2, X31
	0x039FFDAC BL 0x3C3883C
	0x039FFDB0 TBZ X0, 0x0, 0x39FFDC4
	0x039FFDB4 MOV X0, X19
	0x039FFDB8 LDP X20, X19, [X31 + 0x10]
	0x039FFDBC LDP X30, X21, [X31], #0x20
	0x039FFDC0 B 0x39F66FC
	0x039FFDC4 MOV X0, X20
	0x039FFDC8 LDP X20, X19, [X31 + 0x10]
	0x039FFDCC LDP X30, X21, [X31], #0x20
	0x039FFDD0 RET
	0x039FFDD4 BL 0x1C16F20
	0x039FFDD8 ADRP X8, 0xFFFFFFFFFD0ED000
	0x039FFDDC ADRP X9, 0xFFFFFFFFFD0EC000
	0x039FFDE0 LDR V0, [X8 + 0xEB]
	0x039FFDE4 LDR V1, [X9 + 0x77]
	0x039FFDE8 MOV X1, X31
	0x039FFDEC STP V0, V1, [X0 + 0x20]
	0x039FFDF0 B 0x3C36C30
	0x039FFDF4 STR X30, [X31 - 0x20]!
	0x039FFDF8 STP X20, X19, [X31 + 0x10]
	0x039FFDFC ADRP X20, 0x9E2000
	0x039FFE00 LDRB W8, [X20 + 0xF35]
	0x039FFE04 MOV X19, X0
	0x039FFE08 TBNZ X8, 0x0, 0x39FFE20
	0x039FFE0C ADRP X0, 0x754000
	0x039FFE10 LDR X0, [X0 + 0xF70]
	0x039FFE14 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+112]
	006 Compare X0, 0
	007 JumpIfEqual {25}
	008 Move V8, [X19+128]
	009 Move X1, X31
	010 Call ValueTuple.get_refreshRate, X0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move X8, [X19]
	013 Move X0, X19
	014 Move X9, [X8+520]
	015 Move X1, [X8+528]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X0, [X19+112]
	018 Compare X0, 0
	019 JumpIfEqual {34}
	020 Move V8, [X19+128]
	021 Move X1, X31
	022 Call ValueTuple.get_refreshRate, X0
	023 Subtract S0, S8, S0
	024 Move [X19+128], S0
	025 Move V8, [X19+128]
	026 Move X0, X31
	027 Call Time.get_deltaTime
	028 Add S0, S8, S0
	029 Move [X19+128], S0
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Move V8, [X31+32]
	033 Return 
	034 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x039FFE18 MOVZ W8, 0x1
	0x039FFE1C STRB W8, [X20 + 0xF35]
	0x039FFE20 LDR X0, [X19 + 0x88]
	0x039FFE24 CBZ X0, 0x39FFE40
	0x039FFE28 ADRP X8, 0x754000
	0x039FFE2C LDR X8, [X8 + 0xF70]
	0x039FFE30 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X8, -49356800
	002 Move X9, -49360896
	003 Move V0, [X8+235]
	004 Move V1, [X9+119]
	005 Move X1, X31
	006 Move [X0+32], V0
	007 Move [X0+40], V1
	008 Call MonoBehaviour..ctor, X0
	009 Return 

Method: System.Void .cctor()

Disassembly:
	0x039FFE34 LDR X1, [X8]
	0x039FFE38 LDR X30, [X31], #0x20
	0x039FFE3C B 0x2D1AA98
	0x039FFE40 BL 0x1C16F20
	0x039FFE44 MOVZ W1, 0x1
	0x039FFE48 MOV W2, W31
	0x039FFE4C MOV W3, W31
	0x039FFE50 B 0x39FFAF4
	0x039FFE54 STR X30, [X31 - 0x20]!
	0x039FFE58 STP X20, X19, [X31 + 0x10]
	0x039FFE5C ADRP X20, 0x9E2000
	0x039FFE60 LDRB W8, [X20 + 0xF36]
	0x039FFE64 MOV X19, X0
	0x039FFE68 TBNZ X8, 0x0, 0x39FFE80
	0x039FFE6C ADRP X0, 0x754000
	0x039FFE70 LDR X0, [X0 + 0xF70]
	0x039FFE74 BL 0x1C16CF4
	0x039FFE78 MOVZ W8, 0x1
	0x039FFE7C STRB W8, [X20 + 0xF36]
	0x039FFE80 LDR X0, [X19 + 0x88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x9E3000
	005 Move X20, 0x755000
	006 Move W8, [X19+3877]
	007 Move X20, [X20+3792]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x755000
	013 Move X0, [X0+3792]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3877], W8
	017 Move X8, [X20]
	018 Move X9, -49364992
	019 Move V0, [X9+169]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], V0
	024 Move X30, [X31+32]
	025 Return 

