Type: UnityEngine.Rendering.VolumeProfile

Method: System.Void OnEnable()

Disassembly:
	0x039F57C4 LDR W8, [X19 + 0x18]
	0x039F57C8 CMP W8, 0x1
	0x039F57CC B.LT 0x39F5A20
	0x039F57D0 ADRP X8, 0xFFFFFFFFFD0F7000
	0x039F57D4 LDR V0, [X8 + 0x4F]
	0x039F57D8 ADRP X9, 0xFFFFFFFFFD0F4000
	0x039F57DC ADRP X10, 0xFFFFFFFFFD0F5000
	0x039F57E0 ADRP X25, 0x75B000
	0x039F57E4 STR V0, [X31]
	0x039F57E8 LDR V8, [X9 + 0xF58]
	0x039F57EC LDR V9, [X10 + 0x328]
	0x039F57F0 LDR X25, [X25 + 0x538]
	0x039F57F4 MOV W20, W31
	0x039F57F8 LDR X2, [X25]
	0x039F57FC MOV X0, X19
	0x039F5800 MOV W1, W20
	0x039F5804 BL 0x2F49C7C
	0x039F5808 CBZ X1, 0x39F5A5C
	0x039F580C LDR W22, [X1 + 0x28]
	0x039F5810 MOV X21, X1
	0x039F5814 ADD X0, X31, 0x458
	0x039F5818 ADD X1, X31, 0xA88
	0x039F581C MOVZ W2, 0x630
	0x039F5820 BL 0x3EB1AC0
	0x039F5824 ADD X2, X31, 0x458
	0x039F5828 MOV X0, X21
	0x039F582C MOV W1, W22
	0x039F5830 MOV X3, X31
	0x039F5834 BL 0x3988BA0
	0x039F5838 MOV X0, X21
	0x039F583C MOV X1, X31
	0x039F5840 BL 0x398632C
	0x039F5844 CMP W0, 0x1
	0x039F5848 B.LT 0x39F5A10
	0x039F584C MOV W22, W31
	0x039F5850 LDP V1, V0, [X24 + 0x370]
	0x039F5854 LDP V3, V2, [X24 + 0x350]
	0x039F5858 CMP W20, 0x0
	0x039F585C CSET W9, EQ
	0x039F5860 STP V1, V0, [X24 + 0x2F0]
	0x039F5864 LDP V0, V1, [X24 + 0x310]
	0x039F5868 STP V3, V2, [X24 + 0x2D0]
	0x039F586C LDP V2, V3, [X24 + 0x330]
	0x039F5870 STP V0, V1, [X24 + 0x290]
	0x039F5874 STP V2, V3, [X24 + 0x2B0]
	0x039F5878 LDR W8, [X19 + 0x18]
	0x039F587C CMP W8, 0x2
	0x039F5880 CSET W10, EQ
	0x039F5884 CMP W8, 0x1
	0x039F5888 CSET W8, EQ
	0x039F588C CMP W22, 0x0
	0x039F5890 AND W10, W9, W10, 0x0
	0x039F5894 CSET W9, EQ
	0x039F5898 TBNZ X10, 0x0, 0x39F58A4
	0x039F589C AND W8, W9, W8, 0x0
	0x039F58A0 CBZ W8, 0x39F5948
	0x039F58A4 ADD X8, X31, 0x260
	0x039F58A8 ADD X0, X31, 0x390
	0x039F58AC MOV X1, X31
	0x039F58B0 BL 0x3C26F38
	0x039F58B4 LDR V0, [X24 + 0x1A]
	0x039F58B8 LDR V1, [X31]
	0x039F58BC LDR X8, [X31 + 0x270]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x9ED000
	007 Move X22, 0x75F000
	008 Move W8, [X20+3754]
	009 Move X22, [X22+2464]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x75F000
	016 Move X0, [X0+2472]
	017 Call 0x1C17CF4
	018 Move X0, 0x75F000
	019 Move X0, [X0+2480]
	020 Call 0x1C17CF4
	021 Move X0, 0x75F000
	022 Move X0, [X0+2488]
	023 Call 0x1C17CF4
	024 Move X0, 0x75F000
	025 Move X0, [X0+2464]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3754], W8
	029 Move X0, [X22]
	030 Move X19, [X19+24]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X22]
	036 Move X8, [X0+184]
	037 Move X20, [X8+8]
	038 Compare X20, 0
	039 JumpIfNotEqual {61}
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X22]
	045 Move X9, 0x75F000
	046 Move X8, [X0+184]
	047 Move X9, [X9+2480]
	048 Move X21, [X8]
	049 Move X0, [X9]
	050 Call 0x1C17F10
	051 Move X8, 0x75F000
	052 Move X8, [X8+2488]
	053 Move X1, X21
	054 Move X3, X31
	055 Move X20, X0
	056 Move X2, [X8]
	057 Call Predicate`1<Object>..ctor, X0, X1, X2
	058 Move X8, [X22]
	059 Move X8, [X8+184]
	060 Move [X8+8], X20
	061 Compare X19, 0
	062 JumpIfEqual {75}
	063 Move X8, 0x75F000
	064 Move X8, [X8+2472]
	065 Move X0, X19
	066 Move X1, X20
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X2, [X8]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Call List`1<Object>.RemoveAll, X0, X1
	074 Return 
	075 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x039F58C0 ADD X0, X31, 0x1C0
	0x039F58C4 MOV X1, X31
	0x00000000 INVALID
	0x039F58CC STR V0, [X24 + 0x10]
	0x039F58D0 STR X8, [X31 + 0x1D0]
	0x039F58D4 ADD X8, X31, 0x260
	0x039F58D8 BL 0x3C277C8
	0x039F58DC LDP V0, V1, [X24 + 0x1A0]
	0x039F58E0 LDP V2, V3, [X24 + 0x1C0]
	0x039F58E4 ADD X8, X31, 0x260
	0x039F58E8 MOV X0, X31
	0x039F58EC STP V0, V1, [X24 + 0x2D0]
	0x039F58F0 STP V2, V3, [X24 + 0x2F0]
	0x039F58F4 FMOV S1, 0.25
	0x039F58F8 MOV V0.16B, V8.16B
	0x039F58FC MOV V2.16B, V9.16B
	0x039F5900 BL 0x3C28344
	0x039F5904 LDP V0, V1, [X24 + 0x1A0]
	0x039F5908 LDP V2, V3, [X24 + 0x1C0]
	0x039F590C ADD X8, X31, 0x260
	0x039F5910 ADD X0, X31, 0x180
	0x039F5914 STP V0, V1, [X24 + 0x80]
	0x039F5918 LDP V0, V1, [X24 + 0x290]
	0x039F591C STP V2, V3, [X24 + 0xA0]
	0x039F5920 LDP V2, V3, [X24 + 0x2B0]
	0x039F5924 ADD X1, X31, 0x140
	0x039F5928 MOV X2, X31
	0x039F592C STP V0, V1, [X24 + 0xC0]
	0x039F5930 STP V2, V3, [X24 + 0xE0]
	0x039F5934 BL 0x3C27F74
	0x039F5938 LDP V0, V1, [X24 + 0x1A0]
	0x039F593C LDP V2, V3, [X24 + 0x1C0]
	0x039F5940 STP V0, V1, [X24 + 0x290]
	0x039F5944 STP V2, V3, [X24 + 0x2B0]
	0x039F5948 LDP V0, V1, [X24 + 0x2D0]
	0x039F594C LDP V2, V3, [X24 + 0x2F0]
	0x039F5950 MOV X0, X21
	0x039F5954 MOV W1, W22
	0x039F5958 MOV X2, X31
	0x039F595C STP V0, V1, [X24 + 0x1A0]
	0x039F5960 STP V2, V3, [X24 + 0x1C0]
	0x039F5964 BL 0x3986250
	0x039F5968 MOV X0, X21
	0x039F596C MOV W1, W22
	0x039F5970 MOV X2, X31
	0x039F5974 MOV V10.16B, V0.16B
	0x039F5978 MOV V11.16B, V1.16B
	0x039F597C MOV V12.16B, V2.16B
	0x039F5980 MOV V13.16B, V3.16B
	0x039F5984 BL 0x39862C0
	0x039F5988 LDP V0, V1, [X24 + 0x1A0]
	0x039F598C LDP V2, V3, [X24 + 0x1C0]
	0x039F5990 MOV W4, W0
	0x039F5994 ADD X0, X31, 0x2A8
	0x039F5998 STP V0, V1, [X24 + 0x40]
	0x039F599C LDP V0, V1, [X24 + 0x290]
	0x039F59A0 STP V2, V3, [X24 + 0x60]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x9ED000
	008 Move W8, [X20+3755]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x75F000
	015 Move X0, [X0+2112]
	016 Call 0x1C17CF4
	017 Move X0, 0x75F000
	018 Move X0, [X0+2120]
	019 Call 0x1C17CF4
	020 Move X0, 0x6FF000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3755], W8
	025 Move X0, [X19+24]
	026 Compare X0, 0
	027 JumpIfEqual {67}
	028 Move X22, 0x75F000
	029 Move X23, 0x6FF000
	030 Move X22, [X22+2120]
	031 Move X23, [X23+1432]
	032 Move W20, W31
	033 Move W8, [X0+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X2, [X22]
	036 Move W1, W20
	037 Call List`1<Object>.get_Item, X0, X1
	038 Move X8, [X23]
	039 Move X21, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X21
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {62}
	053 Move X0, [X19+24]
	054 Compare X0, 0
	055 JumpIfEqual {66}
	056 Move X2, [X22]
	057 Move W1, W20
	058 Call List`1<Object>.get_Item, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {66}
	061 Call VolumeComponent.Release, X0
	062 Move X0, [X19+24]
	063 Add W20, W20, 1
	064 Compare X0, 0
	065 JumpIfNotEqual {33}
	066 Call 0x1C17F20
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Move X23, [X31+56]
	073 Return 

Method: System.Void Reset()

Disassembly:
	0x039F59A4 LDP V2, V3, [X24 + 0x2B0]
	0x039F59A8 ADD X1, X31, 0x100
	0x039F59AC STP V0, V1, [X24]

ISIL:
	001 Move W8, 1
	002 Move [X0+32], W8
	003 Return 

Method: T Add(System.Boolean overrides = False)

Disassembly:
	0x022AD3AC STR V0, [X31 + 0x2]
	0x022AD3B0 STR X8, [X31 + 0x30]
	0x022AD3B4 LDR X8, [X19 + 0x38]
	0x022AD3B8 LDR X1, [X8 + 0x58]
	0x022AD3BC ADD X0, X31, 0x20
	0x022AD3C0 BL 0x2BC4350
	0x022AD3C4 TBZ X0, 0x0, 0x22AD4B0
	0x022AD3C8 LDR X8, [X19 + 0x38]
	0x022AD3CC LDR X21, [X31 + 0x30]
	0x022AD3D0 LDR X1, [X8 + 0x48]
	0x022AD3D4 LDRB W8, [X1 + 0x135]
	0x022AD3D8 TBNZ X8, 0x0, 0x22AD3E8
	0x022AD3DC MOV X0, X1
	0x022AD3E0 BL 0x1C5C684
	0x022AD3E4 MOV X1, X0
	0x022AD3E8 MOV X0, X21
	0x022AD3EC BL 0x1C16E00
	0x022AD3F0 CBZ X0, 0x22AD3B4
	0x022AD3F4 LDR X8, [X19 + 0x38]
	0x022AD3F8 LDR X1, [X8 + 0x48]
	0x022AD3FC LDRB W8, [X1 + 0x135]
	0x022AD400 TBNZ X8, 0x0, 0x22AD410
	0x022AD404 MOV X0, X1
	0x022AD408 BL 0x1C5C684
	0x022AD40C MOV X1, X0
	0x022AD410 MOV X0, X21
	0x022AD414 BL 0x1C16E00
	0x022AD418 LDR X8, [X19 + 0x38]
	0x022AD41C MOV X21, X0
	0x022AD420 LDR X22, [X8 + 0x48]
	0x022AD424 LDRB W8, [X22 + 0x135]
	0x022AD428 TBNZ X8, 0x0, 0x22AD438
	0x022AD42C MOV X0, X22
	0x022AD430 BL 0x1C5C684
	0x022AD434 MOV X22, X0
	0x022AD438 CBZ X21, 0x22AD454
	0x022AD43C MOV X0, X21
	0x022AD440 MOV X1, X22
	0x022AD444 BL 0x1C16E00
	0x022AD448 MOV X1, X0
	0x022AD44C CBNZ X1, 0x22AD458
	0x022AD450 B 0x22AD4E0
	0x022AD454 MOV X1, X31
	0x022AD458 LDR X9, [X19 + 0x38]
	0x022AD45C LDR W10, [X20 + 0x1C]
	0x022AD460 LDR X8, [X20 + 0x10]
	0x022AD464 LDR X9, [X9 + 0x50]
	0x022AD468 ADD W10, W10, 0x1
	0x022AD46C STR W10, [X20 + 0x1C]
	0x022AD470 CBZ X8, 0x22AD4DC
	0x022AD474 LDRSW X10, [X20 + 0x18]
	0x022AD478 LDR W11, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X19, X2
	008 Move W20, W1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {21}
	012 Move X0, 0x1E47000
	013 Move X0, [X0+1728]
	014 Call 0x1C17CF4
	015 Move X8, [X19+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {21}
	018 Move X0, X19
	019 Call 0x1C5D6E0
	020 Move X8, [X19+56]
	021 Move X9, 0x1E47000
	022 Move X9, [X9+1728]
	023 Move X22, [X8]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X22
	030 Move X1, X31
	031 Call Type.GetTypeFromHandle, X0
	032 Move X1, X0
	033 And W2, W20, 1
	034 Move X0, X21
	035 Move X3, X31
	036 Call VolumeProfile.Add, X0, X1, X2
	037 Move X8, [X19+56]
	038 Move X20, X0
	039 Move X19, [X8+8]
	040 Move W8, [X19+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {48}
	045 Move X0, X19
	046 Call 0x1C5D684
	047 Move X19, X0
	048 Compare X20, 0
	049 JumpIfEqual {58}
	050 Move X0, X20
	051 Move X1, X19
	052 Call 0x1C17E00
	053 Compare X0, 0
	054 JumpIfNotEqual {59}
	055 Move X0, X20
	056 Move X1, X19
	057 Call 0x1C181E0
	058 Move X0, X31
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Return X0

Method: UnityEngine.Rendering.VolumeComponent Add(System.Type type, System.Boolean overrides = False)

Disassembly:
	0x039F59B0 ADD X2, X31, 0xC0
	0x039F59B4 STP V2, V3, [X24 + 0x20]
	0x039F59B8 MOV V0.16B, V10.16B
	0x039F59BC MOV V1.16B, V11.16B
	0x039F59C0 MOV V2.16B, V12.16B
	0x039F59C4 MOV V3.16B, V13.16B
	0x039F59C8 MOV X3, X31
	0x039F59CC MOV X5, X31
	0x039F59D0 BL 0x398A5CC
	0x039F59D4 ADD X0, X31, 0x18
	0x039F59D8 ADD X1, X31, 0x2A8
	0x039F59DC MOVZ W2, 0xA8
	0x039F59E0 BL 0x3EB1AC0
	0x039F59E4 ADD X2, X31, 0x18
	0x039F59E8 MOV X0, X21
	0x039F59EC MOV W1, W22
	0x039F59F0 MOV X3, X31
	0x039F59F4 BL 0x3988AA0
	0x039F59F8 MOV X0, X21
	0x039F59FC MOV X1, X31
	0x039F5A00 ADD W22, W22, 0x1
	0x039F5A04 BL 0x398632C
	0x039F5A08 CMP W22, W0
	0x039F5A0C B.LT 0x39F5850
	0x039F5A10 LDR W8, [X19 + 0x18]
	0x039F5A14 ADD W20, W20, 0x1
	0x039F5A18 CMP W20, W8
	0x039F5A1C B.LT 0x39F57F8
	0x039F5A20 LDR X8, [X23 + 0x28]
	0x039F5A24 LDR X9, [X31 + 0x10B8]
	0x039F5A28 CMP X8, X9
	0x039F5A2C B.NE 0x39F5A60
	0x039F5A30 ADD X31, X31, 0x1000
	0x039F5A34 ADD X31, X31, 0xC0
	0x039F5A38 LDP X20, X19, [X31 + 0x70]
	0x039F5A3C LDP X22, X21, [X31 + 0x60]
	0x039F5A40 LDP X24, X23, [X31 + 0x50]
	0x039F5A44 LDP X30, X25, [X31 + 0x40]
	0x039F5A48 LDR X29, [X31 + 0x30]
	0x039F5A4C LDP D9, D8, [X31 + 0x20]
	0x039F5A50 LDP D11, D10, [X31 + 0x10]
	0x039F5A54 LDP D13, D12, [X31], #0x80
	0x039F5A58 RET
	0x039F5A5C BL 0x1C16F20
	0x039F5A60 BL 0x3EB1B20
	0x039F5A64 STR X30, [X31 - 0x20]!
	0x039F5A68 STP X20, X19, [X31 + 0x10]
	0x039F5A6C ADRP X19, 0x9EC000
	0x039F5A70 ADRP X20, 0x75B000
	0x039F5A74 LDRB W8, [X19 + 0xEBC]
	0x039F5A78 LDR X20, [X20 + 0x578]
	0x039F5A7C TBNZ X8, 0x0, 0x39F5A94
	0x039F5A80 ADRP X0, 0x75B000
	0x039F5A84 LDR X0, [X0 + 0x578]
	0x039F5A88 BL 0x1C16CF4
	0x039F5A8C MOVZ W8, 0x1
	0x039F5A90 STRB W8, [X19 + 0xEBC]
	0x039F5A94 LDR X8, [X20]
	0x039F5A98 LDP X20, X19, [X31 + 0x10]
	0x039F5A9C LDR X8, [X8 + 0xB8]
	0x039F5AA0 STRH W31, [X8]
	0x039F5AA4 LDR X30, [X31], #0x20
	0x039F5AA8 RET
	0x039F5AAC STR X30, [X31 - 0x30]!
	0x039F5AB0 STP X22, X21, [X31 + 0x10]
	0x039F5AB4 STP X20, X19, [X31 + 0x20]
	0x039F5AB8 MOV X21, X1
	0x039F5ABC MOV X1, X31
	0x039F5AC0 MOV X19, X3
	0x039F5AC4 MOV X20, X2
	0x039F5AC8 MOV X22, X0
	0x039F5ACC BL 0x33BDD8C
	0x039F5AD0 STP X21, X20, [X22 + 0x10]
	0x039F5AD4 STR X19, [X22 + 0x20]
	0x039F5AD8 LDP X20, X19, [X31 + 0x20]
	0x039F5ADC LDP X22, X21, [X31 + 0x10]
	0x039F5AE0 LDR X30, [X31], #0x30
	0x039F5AE4 RET
	0x039F5AE8 LDR X8, [X0 + 0x10]
	0x039F5AEC CBZ X8, 0x39F5B04
	0x039F5AF0 LDR X3, [X8 + 0x18]
	0x039F5AF4 LDR X0, [X8 + 0x40]
	0x039F5AF8 LDR X2, [X8 + 0x28]
	0x039F5AFC AND W1, W1, 0x1
	0x039F5B00 BR X3
	0x039F5B04 MOV X0, X31
	0x039F5B08 RET
	0x039F5B0C LDR X8, [X0 + 0x18]
	0x039F5B10 CBZ X8, 0x39F5B24
	0x039F5B14 LDR X2, [X8 + 0x18]
	0x039F5B18 LDR X0, [X8 + 0x40]
	0x039F5B1C LDR X1, [X8 + 0x28]
	0x039F5B20 BR X2
	0x039F5B24 MOV X0, X31
	0x039F5B28 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x9ED000
	007 Move W8, [X22+3756]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x75F000
	016 Move X0, [X0+1616]
	017 Call 0x1C17CF4
	018 Move X0, 0x75D000
	019 Move X0, [X0+1808]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3756], W8
	023 Move X0, X19
	024 Move X1, X20
	025 Call VolumeProfile.Has, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {87}
	030 Move X0, X20
	031 Move X1, X31
	032 Call ScriptableObject.CreateInstance, X0
	033 Compare X0, 0
	034 JumpIfEqual {84}
	035 Move X9, 0x75D000
	036 Move X9, [X9+1808]
	037 Move X8, [X0]
	038 Move X20, X0
	039 Move X1, [X9]
	040 Move W10, [X8+304]
	041 Move W9, [X1+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X8+200]
	044 Add X8, X8, X9
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X1, [X20+40]
	048 And W2, W21, 1
	049 Move X0, X20
	050 Call VolumeComponent.SetOverridesTo, X0, X1, X2
	051 Move X0, [X19+24]
	052 Compare X0, 0
	053 JumpIfEqual {84}
	054 Move X9, 0x75F000
	055 Move X9, [X9+1616]
	056 Move W10, [X0+28]
	057 Move X8, [X0+16]
	058 Move X9, [X9]
	059 Add W10, W10, 1
	060 Move [X0+28], W10
	061 Compare X8, 0
	062 JumpIfEqual {84}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Move W11, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W10, 1
	067 Add X8, X8, X10
	068 Move [X0+24], W9
	069 Move [X8+32], X20
	070 Move X8, [X9+32]
	071 Move X1, X20
	072 Move X8, [X8+192]
	073 Move X2, [X8+112]
	074 Call List`1<Object>.AddWithResize, X0, X1
	075 Move W8, 1
	076 Move [X19+32], W8
	077 Move X0, X20
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X30, [X31+48]
	083 Return X0
	084 Call 0x1C17F20
	085 Move X0, X20
	086 Call 0x1C181E0
	087 Move X0, 0x6FF000
	088 Move X0, [X0+1456]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X19, X0
	092 Move X0, 0x75F000
	093 Move X0, [X0+2496]
	094 Call 0x1C17D08
	095 Move X1, X0
	096 Move X0, X19
	097 Move X2, X31
	098 Call InvalidOperationException..ctor, X0, X1
	099 Move X0, 0x75F000
	100 Move X0, [X0+2504]
	101 Call 0x1C17D08
	102 Move X1, X0
	103 Move X0, X19
	104 Call 0x1C17DEC

Method: System.Void Remove()

Disassembly:
	0x022AD4F4 BL 0x1C16F18
	0x022AD4F8 B 0x22AD50C
	0x022AD4FC B 0x22AD50C
	0x022AD500 B 0x22AD50C
	0x022AD504 B 0x22AD50C
	0x022AD508 B 0x22AD50C
	0x022AD50C MOV X20, X0
	0x022AD510 CMP W1, 0x1
	0x022AD514 B.NE 0x22AD52C
	0x022AD518 MOV X0, X20
	0x022AD51C BL 0x3EB1AD0
	0x022AD520 LDR X21, [X0]
	0x022AD524 BL 0x3EB1AE0
	0x022AD528 B 0x22AD4B4
	0x022AD52C MOV X21, X31
	0x022AD530 B 0x22AD538
	0x022AD534 MOV X20, X0
	0x022AD538 LDR X8, [X19 + 0x38]
	0x022AD53C LDR X1, [X8 + 0x60]
	0x022AD540 ADD X0, X31, 0x20
	0x022AD544 BL 0x2BC434C
	0x022AD548 CBNZ X21, 0x22AD554
	0x022AD54C MOV X0, X20
	0x022AD550 BL 0x1D2C690
	0x022AD554 MOV X0, X21
	0x022AD558 BL 0x1C16F18
	0x022AD55C BL 0x1990590
	0x022AD560 STP X29, X30, [X31 - 0x60]!
	0x022AD564 STP X28, X27, [X31 + 0x10]
	0x022AD568 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {18}
	008 Move X0, 0x1E47000
	009 Move X0, [X0+1728]
	010 Move X20, X1
	011 Call 0x1C17CF4
	012 Move X8, [X20+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {18}
	015 Move X0, X20
	016 Call 0x1C5D6E0
	017 Move X8, [X20+56]
	018 Move X9, 0x1E47000
	019 Move X9, [X9+1728]
	020 Move X20, [X8]
	021 Move X0, [X9]
	022 Move W9, [X0+224]
	023 Compare W9, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Type.GetTypeFromHandle, X0
	029 Move X1, X0
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X2, X31
	034 Move X30, [X31+32]
	035 Call VolumeProfile.Remove, X0, X1
	036 Return 

Method: System.Void Remove(System.Type type)

Disassembly:
	0x039F5CE0 MOV X1, X19
	0x039F5CE4 MOV X3, X31
	0x039F5CE8 MOV X23, X0
	0x039F5CEC LDR X2, [X8]
	0x039F5CF0 BL 0x2D2CE34
	0x039F5CF4 CBZ X21, 0x39F5E54
	0x039F5CF8 STR X23, [X21 + 0x78]
	0x039F5CFC LDR X0, [X29]
	0x039F5D00 BL 0x1C16F10
	0x039F5D04 LDR X2, [X27]
	0x039F5D08 MOV X1, X19
	0x039F5D0C MOV X3, X31
	0x039F5D10 MOV X23, X0
	0x039F5D14 BL 0x2A75F2C
	0x039F5D18 STR X23, [X21 + 0x80]
	0x039F5D1C LDR X8, [X19 + 0x78]
	0x039F5D20 CBZ X8, 0x39F5E54
	0x039F5D24 LDR X8, [X8 + 0x60]
	0x039F5D28 CBZ X8, 0x39F5E54
	0x039F5D2C LDR W8, [X8 + 0x18]
	0x039F5D30 SUB W8, W8, 0x1
	0x039F5D34 CMP W20, W8
	0x039F5D38 B.GE 0x39F5D54
	0x039F5D3C LDR X0, [X19 + 0x70]
	0x039F5D40 CBZ X0, 0x39F5E54
	0x039F5D44 LDR X2, [X24]
	0x039F5D48 ADD W1, W20, 0x1
	0x039F5D4C BL 0x301BCCC
	0x039F5D50 B 0x39F5D58
	0x039F5D54 MOV X0, X31
	0x039F5D58 SUBS W1, W20, 0x1
	0x039F5D5C STR X0, [X21 + 0x50]
	0x039F5D60 B.LT 0x39F5D78
	0x039F5D64 LDR X0, [X19 + 0x70]
	0x039F5D68 CBZ X0, 0x39F5E54
	0x039F5D6C LDR X2, [X24]
	0x039F5D70 BL 0x301BCCC
	0x039F5D74 B 0x39F5D7C
	0x039F5D78 MOV X0, X31
	0x039F5D7C STP X19, X0, [X21 + 0x40]
	0x039F5D80 STR W20, [X21 + 0x88]
	0x039F5D84 CBZ X22, 0x39F5E54
	0x039F5D88 LDR X23, [X21 + 0x60]
	0x039F5D8C MOV X0, X22
	0x039F5D90 MOV X1, X31
	0x039F5D94 BL 0x3C69940
	0x039F5D98 CBZ X23, 0x39F5E54
	0x039F5D9C LDR X8, [X23]
	0x039F5DA0 MOV X1, X0
	0x039F5DA4 MOV X0, X23
	0x039F5DA8 LDR X9, [X8 + 0x5E8]
	0x039F5DAC LDR X2, [X8 + 0x5F0]
	0x039F5DB0 BLR X9
	0x039F5DB4 MOV X0, X21
	0x039F5DB8 BL 0x39F5E78
	0x039F5DBC ADD W20, W20, 0x1
	0x039F5DC0 LDR W8, [X25 + 0x18]
	0x039F5DC4 ADD X26, X26, 0x1
	0x039F5DC8 CMP X26, W8, SXTW
	0x039F5DCC B.LT 0x39F5C94
	0x039F5DD0 LDR X0, [X19 + 0x70]
	0x039F5DD4 CBZ X0, 0x39F5E54
	0x039F5DD8 ADRP X22, 0x726000
	0x039F5DDC ADRP X23, 0x75E000
	0x039F5DE0 LDR X22, [X22 + 0x8F8]
	0x039F5DE4 LDR X23, [X23 + 0xA20]
	0x039F5DE8 LDR W8, [X0 + 0x18]
	0x039F5DEC CMP W20, W8
	0x039F5DF0 B.GE 0x39F5E58
	0x039F5DF4 LDR X2, [X24]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x9ED000
	009 Move W8, [X21+3757]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x75F000
	017 Move X0, [X0+2512]
	018 Call 0x1C17CF4
	019 Move X0, 0x75F000
	020 Move X0, [X0+2112]
	021 Call 0x1C17CF4
	022 Move X0, 0x75F000
	023 Move X0, [X0+2120]
	024 Call 0x1C17CF4
	025 Move X0, 0x6FF000
	026 Move X0, [X0+1728]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3757], W8
	030 Move X0, [X19+24]
	031 Compare X0, 0
	032 JumpIfEqual {88}
	033 Move X23, 0x75F000
	034 Move X24, 0x6FF000
	035 Move X23, [X23+2120]
	036 Move X24, [X24+1728]
	037 Move W21, W31
	038 Move W8, [X0+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X2, [X23]
	041 Move W1, W21
	042 Call List`1<Object>.get_Item, X0, X1
	043 Compare X0, 0
	044 JumpIfEqual {88}
	045 Move X1, X31
	046 Call "il2cpp_vm_object_is_inst", X0
	047 Move X8, [X24]
	048 Move X22, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X22
	055 Move X1, X20
	056 Move X2, X31
	057 Call Type.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {66}
	062 Move X0, [X19+24]
	063 Add W21, W21, 1
	064 Compare X0, 0
	065 JumpIfNotEqual {38}
	066 Move TEMP, X21
	067 And TEMP, TEMP, -2147483648
	068 Compare TEMP, -2147483648
	069 JumpIfEqual {80}
	070 Move X0, [X19+24]
	071 Compare X0, 0
	072 JumpIfEqual {88}
	073 Move X8, 0x75F000
	074 Move X8, [X8+2512]
	075 Move W1, W21
	076 Move X2, [X8]
	077 Call List`1<Object>.RemoveAt, X0, X1
	078 Move W8, 1
	079 Move [X19+32], W8
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X24, [X31+16]
	085 Move X23, [X31+24]
	086 Move X30, [X31+64]
	087 Return 
	088 Call 0x1C17F20

Method: System.Boolean Has()

Disassembly:
	0x022AD47C CMP W10, W11
	0x022AD480 B.CS 0x22AD498
	0x022AD484 ADD W9, W10, 0x1
	0x022AD488 ADD X8, X8, X10, 0x3, LSL
	0x022AD48C STR W9, [X20 + 0x18]
	0x022AD490 STR X1, [X8 + 0x20]
	0x022AD494 B 0x22AD3B4
	0x022AD498 LDR X8, [X9 + 0x20]
	0x022AD49C LDR X8, [X8 + 0xC0]
	0x022AD4A0 LDR X2, [X8 + 0x70]
	0x022AD4A4 MOV X0, X20
	0x022AD4A8 BL 0x301BF90
	0x022AD4AC B 0x22AD3B4
	0x022AD4B0 MOV X21, X31
	0x022AD4B4 LDR X8, [X19 + 0x38]
	0x022AD4B8 ADD X0, X31, 0x20
	0x022AD4BC LDR X1, [X8 + 0x60]
	0x022AD4C0 BL 0x2BC434C
	0x022AD4C4 CBNZ X21, 0x22AD4F0
	0x022AD4C8 LDP X20, X19, [X31 + 0x60]
	0x022AD4CC LDP X22, X21, [X31 + 0x50]
	0x022AD4D0 LDR X30, [X31 + 0x40]
	0x022AD4D4 ADD X31, X31, 0x70
	0x022AD4D8 RET
	0x022AD4DC BL 0x1C16F20
	0x022AD4E0 MOV X0, X21
	0x022AD4E4 MOV X1, X22
	0x022AD4E8 BL 0x1C171E0
	0x022AD4EC BL 0x1C16F20
	0x022AD4F0 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {18}
	008 Move X0, 0x1E47000
	009 Move X0, [X0+1728]
	010 Move X20, X1
	011 Call 0x1C17CF4
	012 Move X8, [X20+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {18}
	015 Move X0, X20
	016 Call 0x1C5D6E0
	017 Move X8, [X20+56]
	018 Move X9, 0x1E47000
	019 Move X9, [X9+1728]
	020 Move X20, [X8]
	021 Move X0, [X9]
	022 Move W9, [X0+224]
	023 Compare W9, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Type.GetTypeFromHandle, X0
	029 Move X1, X0
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X2, X31
	034 Move X30, [X31+32]
	035 Call VolumeProfile.Has, X0, X1
	036 Return X0

Method: System.Boolean Has(System.Type type)

Disassembly:
	0x039F5B2C LDR X8, [X0 + 0x20]
	0x039F5B30 CBZ X8, 0x39F5B44
	0x039F5B34 LDR X2, [X8 + 0x18]
	0x039F5B38 LDR X0, [X8 + 0x40]
	0x039F5B3C LDR X1, [X8 + 0x28]
	0x039F5B40 BR X2
	0x039F5B44 MOV X0, X31
	0x039F5B48 RET
	0x039F5B4C STP X29, X30, [X31 - 0x60]!
	0x039F5B50 STP X28, X27, [X31 + 0x10]
	0x039F5B54 STP X26, X25, [X31 + 0x20]
	0x039F5B58 STP X24, X23, [X31 + 0x30]
	0x039F5B5C STP X22, X21, [X31 + 0x40]
	0x039F5B60 STP X20, X19, [X31 + 0x50]
	0x039F5B64 ADRP X23, 0x9EC000
	0x039F5B68 ADRP X22, 0x75E000
	0x039F5B6C ADRP X21, 0x75E000
	0x039F5B70 LDRB W8, [X23 + 0xEBD]
	0x039F5B74 LDR X22, [X22 + 0x9E0]
	0x039F5B78 LDR X21, [X21 + 0x9E8]
	0x039F5B7C MOV X20, X1
	0x039F5B80 MOV X19, X0
	0x039F5B84 TBNZ X8, 0x0, 0x39F5C08
	0x039F5B88 ADRP X0, 0x75E000
	0x039F5B8C LDR X0, [X0 + 0x9F0]
	0x039F5B90 BL 0x1C16CF4
	0x039F5B94 ADRP X0, 0x75E000
	0x039F5B98 LDR X0, [X0 + 0x9E8]
	0x039F5B9C BL 0x1C16CF4
	0x039F5BA0 ADRP X0, 0x726000
	0x039F5BA4 LDR X0, [X0 + 0x8F8]
	0x039F5BA8 BL 0x1C16CF4
	0x039F5BAC ADRP X0, 0x75E000
	0x039F5BB0 LDR X0, [X0 + 0x9F8]
	0x039F5BB4 BL 0x1C16CF4
	0x039F5BB8 ADRP X0, 0x75E000
	0x039F5BBC LDR X0, [X0 + 0xA00]
	0x039F5BC0 BL 0x1C16CF4
	0x039F5BC4 ADRP X0, 0x75E000
	0x039F5BC8 LDR X0, [X0 + 0x9E0]
	0x039F5BCC BL 0x1C16CF4
	0x039F5BD0 ADRP X0, 0x75E000
	0x039F5BD4 LDR X0, [X0 + 0xA08]
	0x039F5BD8 BL 0x1C16CF4
	0x039F5BDC ADRP X0, 0x75E000
	0x039F5BE0 LDR X0, [X0 + 0xA10]
	0x039F5BE4 BL 0x1C16CF4
	0x039F5BE8 ADRP X0, 0x75E000
	0x039F5BEC LDR X0, [X0 + 0xA18]
	0x039F5BF0 BL 0x1C16CF4
	0x039F5BF4 ADRP X0, 0x75E000
	0x039F5BF8 LDR X0, [X0 + 0xA20]
	0x039F5BFC BL 0x1C16CF4
	0x039F5C00 MOVZ W8, 0x1
	0x039F5C04 STRB W8, [X23 + 0xEBD]
	0x039F5C08 STR X20, [X19 + 0x58]
	0x039F5C0C LDR X1, [X22]
	0x039F5C10 MOV X0, X19
	0x039F5C14 BL 0x21A8CFC
	0x039F5C18 STR X0, [X19 + 0x78]
	0x039F5C1C LDR X1, [X21]
	0x039F5C20 MOV X0, X19
	0x039F5C24 BL 0x21A3894
	0x039F5C28 LDR X8, [X19 + 0x78]
	0x039F5C2C STR X0, [X19 + 0x80]
	0x039F5C30 CBZ X8, 0x39F5E54
	0x039F5C34 LDR X0, [X19 + 0x60]
	0x039F5C38 CBZ X0, 0x39F5E54
	0x039F5C3C LDR X9, [X0]
	0x039F5C40 LDR X1, [X8 + 0x28]
	0x039F5C44 LDR X8, [X9 + 0x5E8]
	0x039F5C48 LDR X2, [X9 + 0x5F0]
	0x039F5C4C BLR X8
	0x039F5C50 LDR X8, [X19 + 0x78]
	0x039F5C54 CBZ X8, 0x39F5E54
	0x039F5C58 LDR X25, [X8 + 0x60]
	0x039F5C5C CBZ X25, 0x39F5E54
	0x039F5C60 LDR X8, [X25 + 0x18]
	0x039F5C64 ADRP X24, 0x75E000
	0x039F5C68 LDR X24, [X24 + 0xA18]
	0x039F5C6C MOV W20, W31
	0x039F5C70 CMP W8, 0x1
	0x039F5C74 B.LT 0x39F5DD0
	0x039F5C78 ADRP X29, 0x75E000
	0x039F5C7C ADRP X27, 0x75E000
	0x039F5C80 LDR X29, [X29 + 0x9F0]
	0x039F5C84 LDR X27, [X27 + 0xA00]
	0x039F5C88 MOV X26, X31
	0x039F5C8C AND X8, X8, 0x0
	0x039F5C90 ADD X28, X25, 0x20
	0x039F5C94 CMP X26, W8, UXTW
	0x039F5C98 B.CS 0x39F5E74
	0x039F5C9C LDR X0, [X19 + 0x70]
	0x039F5CA0 CBZ X0, 0x39F5E54
	0x039F5CA4 LDR W8, [X0 + 0x18]
	0x039F5CA8 CMP W20, W8
	0x039F5CAC B.GE 0x39F5DC0
	0x039F5CB0 LDR X2, [X24]
	0x039F5CB4 LDR X22, [X28, X26, LSL #3]
	0x039F5CB8 MOV W1, W20
	0x039F5CBC BL 0x301BCCC
	0x039F5CC0 ADRP X8, 0x75E000
	0x039F5CC4 LDR X8, [X8 + 0xA08]
	0x039F5CC8 MOV X21, X0
	0x039F5CCC LDR X8, [X8]
	0x039F5CD0 MOV X0, X8
	0x039F5CD4 BL 0x1C16F10
	0x039F5CD8 ADRP X8, 0x75E000
	0x039F5CDC LDR X8, [X8 + 0x9F8]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X21, 0x9ED000
	010 Move W8, [X21+3758]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x728000
	018 Move X0, [X0+2440]
	019 Call 0x1C17CF4
	020 Move X0, 0x728000
	021 Move X0, [X0+2448]
	022 Call 0x1C17CF4
	023 Move X0, 0x728000
	024 Move X0, [X0+2456]
	025 Call 0x1C17CF4
	026 Move X0, 0x728000
	027 Move X0, [X0+2464]
	028 Call 0x1C17CF4
	029 Move X0, 0x6FF000
	030 Move X0, [X0+1728]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+3758], W8
	034 Move [X31+8], X31
	035 Move [X31+16], X31
	036 Move [X31+24], X31
	037 Move X0, [X20+24]
	038 Compare X0, 0
	039 JumpIfEqual {96}
	040 Move X8, 0x728000
	041 Move X8, [X8+2464]
	042 Move X23, 0x728000
	043 Move X24, 0x6FF000
	044 Move X22, 0x728000
	045 Move X1, [X8]
	046 Move X23, [X23+2448]
	047 Move X24, [X24+1728]
	048 Move X22, [X22+2440]
	049 Add X8, X31, 8
	050 Call List`1<Object>.GetEnumerator, X0
	051 Move X1, [X23]
	052 Add X0, X31, 8
	053 Call Enumerator<Object>.MoveNext, X0
	054 Move W20, W0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {79}
	059 Move X0, [X31+24]
	060 Compare X0, 0
	061 JumpIfEqual {95}
	062 Move X1, X31
	063 Call "il2cpp_vm_object_is_inst", X0
	064 Move X21, X0
	065 Move X0, [X24]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X21
	071 Move X1, X19
	072 Move X2, X31
	073 Call Type.op_Equality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {51}
	078 Move W19, 4
	079 Move W19, 5
	080 Move X1, [X22]
	081 Add X0, X31, 8
	082 Call Enumerator<Object>.Dispose, X0
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction CSET not yet implemented."
	085 And W0, W20, W8
	086 Move X20, [X31+80]
	087 Move X19, [X31+88]
	088 Move X22, [X31+64]
	089 Move X21, [X31+72]
	090 Move X24, [X31+48]
	091 Move X23, [X31+56]
	092 Move X30, [X31+32]
	093 Add X31, X31, 96
	094 Return X0
	095 Call 0x1C17F20
	096 Call 0x1C17F20
	097 Move X19, X0
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X0, X19
	100 Call 0x3EB2AD0
	101 Move X20, [X0]
	102 Call 0x3EB2AE0
	103 Move X1, [X22]
	104 Add X0, X31, 8
	105 Call Enumerator<Object>.Dispose, X0
	106 Compare X20, 0
	107 JumpIfNotEqual {110}
	108 Move W19, W31
	109 Move X20, X31
	110 Move X0, X20
	111 Call 0x1C17F18
	112 Move X19, X0
	113 Move X1, [X22]
	114 Add X0, X31, 8
	115 Call Enumerator<Object>.Dispose, X0
	116 Compare X20, 0
	117 JumpIfNotEqual {120}
	118 Move X0, X19
	119 Call 0x1D2D690
	120 Move X0, X20
	121 Call 0x1C17F18
	122 Call 0x1991590

Method: System.Boolean HasSubclassOf(System.Type type)

Disassembly:
	0x039F5DF8 MOV W1, W20
	0x039F5DFC BL 0x301BCCC
	0x039F5E00 CBZ X0, 0x39F5E54
	0x039F5E04 MOV X1, X31
	0x039F5E08 BL 0x3C32ECC
	0x039F5E0C LDR X8, [X22]
	0x039F5E10 MOV X21, X0
	0x039F5E14 LDR W9, [X8 + 0xE0]
	0x039F5E18 CBNZ W9, 0x39F5E24
	0x039F5E1C MOV X0, X8
	0x039F5E20 BL 0x1C16DFC
	0x039F5E24 MOV X0, X21
	0x039F5E28 MOV X1, X31
	0x039F5E2C BL 0x39E1DF8
	0x039F5E30 LDR X0, [X19 + 0x70]
	0x039F5E34 CBZ X0, 0x39F5E54
	0x039F5E38 LDR X3, [X23]
	0x039F5E3C MOV W1, W20
	0x039F5E40 MOV X2, X31
	0x039F5E44 BL 0x301BD20
	0x039F5E48 LDR X0, [X19 + 0x70]
	0x039F5E4C ADD W20, W20, 0x1
	0x039F5E50 CBNZ X0, 0x39F5DE8
	0x039F5E54 BL 0x1C16F20
	0x039F5E58 LDP X20, X19, [X31 + 0x50]
	0x039F5E5C LDP X22, X21, [X31 + 0x40]
	0x039F5E60 LDP X24, X23, [X31 + 0x30]
	0x039F5E64 LDP X26, X25, [X31 + 0x20]
	0x039F5E68 LDP X28, X27, [X31 + 0x10]
	0x039F5E6C LDP X29, X30, [X31], #0x60
	0x039F5E70 RET
	0x039F5E74 BL 0x1C16F28
	0x039F5E78 STP X30, X21, [X31 - 0x20]!
	0x039F5E7C STP X20, X19, [X31 + 0x10]
	0x039F5E80 ADRP X20, 0x9EC000
	0x039F5E84 LDRB W8, [X20 + 0xEF7]
	0x039F5E88 MOV X19, X0
	0x039F5E8C TBNZ X8, 0x0, 0x39F5EBC
	0x039F5E90 ADRP X0, 0x75E000
	0x039F5E94 LDR X0, [X0 + 0xA28]
	0x039F5E98 BL 0x1C16CF4
	0x039F5E9C ADRP X0, 0x75E000
	0x039F5EA0 LDR X0, [X0 + 0xA30]
	0x039F5EA4 BL 0x1C16CF4
	0x039F5EA8 ADRP X0, 0x75E000
	0x039F5EAC LDR X0, [X0 + 0xA38]
	0x039F5EB0 BL 0x1C16CF4
	0x039F5EB4 MOVZ W8, 0x1
	0x039F5EB8 STRB W8, [X20 + 0xEF7]
	0x039F5EBC MOV X0, X19
	0x039F5EC0 BL 0x39F6280
	0x039F5EC4 LDR X8, [X19 + 0x68]
	0x039F5EC8 CBZ X8, 0x39F5F20
	0x039F5ECC ADRP X9, 0x75E000
	0x039F5ED0 LDR X9, [X9 + 0xA30]
	0x039F5ED4 ADRP X21, 0x75E000
	0x039F5ED8 LDR X20, [X8 + 0x118]
	0x039F5EDC LDR X0, [X9]
	0x039F5EE0 LDR X21, [X21 + 0xA28]
	0x039F5EE4 BL 0x1C16F10
	0x039F5EE8 LDR X2, [X21]
	0x039F5EEC MOV X1, X19
	0x039F5EF0 MOV X3, X31
	0x039F5EF4 MOV X21, X0
	0x039F5EF8 BL 0x27259E8
	0x039F5EFC CBZ X20, 0x39F5F20
	0x039F5F00 ADRP X8, 0x75E000
	0x039F5F04 LDR X8, [X8 + 0xA38]
	0x039F5F08 MOV X0, X20
	0x039F5F0C LDP X20, X19, [X31 + 0x10]
	0x039F5F10 MOV X1, X21
	0x039F5F14 LDR X2, [X8]
	0x039F5F18 LDP X30, X21, [X31], #0x20
	0x039F5F1C B 0x27288B4
	0x039F5F20 BL 0x1C16F20
	0x039F5F24 STP X30, X21, [X31 - 0x20]!
	0x039F5F28 STP X20, X19, [X31 + 0x10]
	0x039F5F2C ADRP X21, 0x9EC000
	0x039F5F30 LDRB W8, [X21 + 0xEBE]
	0x039F5F34 MOV W19, W1
	0x039F5F38 MOV X20, X0
	0x039F5F3C TBNZ X8, 0x0, 0x39F5F60
	0x039F5F40 ADRP X0, 0x707000
	0x039F5F44 LDR X0, [X0 + 0x9E8]
	0x039F5F48 BL 0x1C16CF4
	0x039F5F4C ADRP X0, 0x75E000
	0x039F5F50 LDR X0, [X0 + 0xA40]
	0x039F5F54 BL 0x1C16CF4
	0x039F5F58 MOVZ W8, 0x1
	0x039F5F5C STRB W8, [X21 + 0xEBE]
	0x039F5F60 CBZ W19, 0x39F5FB8
	0x039F5F64 LDR X0, [X20 + 0x78]
	0x039F5F68 CBZ X0, 0x39F5FC8
	0x039F5F6C ADRP X8, 0x75E000
	0x039F5F70 LDR X8, [X8 + 0xA40]
	0x039F5F74 ADRP X21, 0x707000
	0x039F5F78 ADD W20, W19, 0x1F
	0x039F5F7C LDR X1, [X8]
	0x039F5F80 LDR X21, [X21 + 0x9E8]
	0x039F5F84 BL 0x2D1A074

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0x9ED000
	008 Move W8, [X21+3759]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x728000
	016 Move X0, [X0+2440]
	017 Call 0x1C17CF4
	018 Move X0, 0x728000
	019 Move X0, [X0+2448]
	020 Call 0x1C17CF4
	021 Move X0, 0x728000
	022 Move X0, [X0+2456]
	023 Call 0x1C17CF4
	024 Move X0, 0x728000
	025 Move X0, [X0+2464]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3759], W8
	029 Move [X31+8], X31
	030 Move [X31+16], X31
	031 Move [X31+24], X31
	032 Move X0, [X20+24]
	033 Compare X0, 0
	034 JumpIfEqual {85}
	035 Move X8, 0x728000
	036 Move X8, [X8+2464]
	037 Move X22, 0x728000
	038 Move X21, 0x728000
	039 Move X1, [X8]
	040 Move X22, [X22+2448]
	041 Move X21, [X21+2440]
	042 Add X8, X31, 8
	043 Call List`1<Object>.GetEnumerator, X0
	044 Move X1, [X22]
	045 Add X0, X31, 8
	046 Call Enumerator<Object>.MoveNext, X0
	047 Move W20, W0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {69}
	052 Move X0, [X31+24]
	053 Compare X0, 0
	054 JumpIfEqual {83}
	055 Move X1, X31
	056 Call "il2cpp_vm_object_is_inst", X0
	057 Compare X0, 0
	058 JumpIfEqual {84}
	059 Move X8, [X0]
	060 Move X9, [X8+664]
	061 Move X2, [X8+672]
	062 Move X1, X19
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {44}
	068 Move W19, 4
	069 Move W19, 5
	070 Move X1, [X21]
	071 Add X0, X31, 8
	072 Call Enumerator<Object>.Dispose, X0
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 And W0, W20, W8
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X22, [X31+48]
	079 Move X21, [X31+56]
	080 Move X30, [X31+32]
	081 Add X31, X31, 80
	082 Return X0
	083 Call 0x1C17F20
	084 Call 0x1C17F20
	085 Call 0x1C17F20
	086 Move X19, X0
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, X19
	089 Call 0x3EB2AD0
	090 Move X20, [X0]
	091 Call 0x3EB2AE0
	092 Move X1, [X21]
	093 Add X0, X31, 8
	094 Call Enumerator<Object>.Dispose, X0
	095 Compare X20, 0
	096 JumpIfNotEqual {99}
	097 Move W19, W31
	098 Move X20, X31
	099 Move X0, X20
	100 Call 0x1C17F18
	101 Move X19, X0
	102 Move X1, [X21]
	103 Add X0, X31, 8
	104 Call Enumerator<Object>.Dispose, X0
	105 Compare X20, 0
	106 JumpIfNotEqual {109}
	107 Move X0, X19
	108 Call 0x1D2D690
	109 Move X0, X20
	110 Call 0x1C17F18
	111 Call 0x1991590

Method: System.Boolean TryGet(out T component)

Disassembly:
	0x022AD56C STP X24, X23, [X31 + 0x30]
	0x022AD570 STP X22, X21, [X31 + 0x40]
	0x022AD574 STP X20, X19, [X31 + 0x50]
	0x022AD578 ADD X29, X31, 0x0
	0x022AD57C SUB X31, X31, 0x40
	0x022AD580 STUR X1, [X29 - 0x18]
	0x022AD584 MRS X8, 0xC000
	0x022AD588 STUR X8, [X29 - 0x38]
	0x022AD58C LDR X8, [X8 + 0x28]
	0x022AD590 MOV X19, X2
	0x022AD594 STUR X8, [X29 - 0x8]
	0x022AD598 LDR X8, [X2 + 0x38]
	0x022AD59C STUR X0, [X29 - 0x30]
	0x022AD5A0 CBNZ X8, 0x22AD5B0
	0x022AD5A4 MOV X0, X19
	0x022AD5A8 BL 0x1C5C6E0
	0x022AD5AC LDR X8, [X19 + 0x38]
	0x022AD5B0 LDR X0, [X8 + 0x28]
	0x022AD5B4 LDP X9, X8, [X8 + 0x40]
	0x022AD5B8 LDR W10, [X0 + 0xFC]
	0x022AD5BC LDR W23, [X9 + 0xFC]
	0x022AD5C0 LDRB W9, [X0 + 0x135]
	0x022AD5C4 LDR W24, [X8 + 0xFC]
	0x022AD5C8 MOV W8, W10
	0x022AD5CC STUR X10, [X29 - 0x28]
	0x022AD5D0 TBNZ X9, 0x0, 0x22AD5DC
	0x022AD5D4 BL 0x1C5C684
	0x022AD5D8 LDR W8, [X0 + 0xFC]
	0x022AD5DC ADD W8, W8, 0x10
	0x022AD5E0 ADD X8, X8, 0xF
	0x022AD5E4 ADD X9, X31, 0x0
	0x022AD5E8 AND X8, X8, 0x1FFFFFFFF
	0x022AD5EC SUB X8, X9, X8
	0x022AD5F0 STUR X8, [X29 - 0x40]
	0x022AD5F4 ADD X31, X8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X20, X2
	008 Move X19, X1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {21}
	012 Move X0, 0x1E47000
	013 Move X0, [X0+1728]
	014 Call 0x1C17CF4
	015 Move X8, [X20+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {21}
	018 Move X0, X20
	019 Call 0x1C5D6E0
	020 Move X8, [X20+56]
	021 Move X9, 0x1E47000
	022 Move X9, [X9+1728]
	023 Move X22, [X8]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X22
	030 Move X1, X31
	031 Call Type.GetTypeFromHandle, X0
	032 Move X8, [X20+56]
	033 Move X1, X0
	034 Move X0, X21
	035 Move X2, X19
	036 Move X3, [X8+16]
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]

Method: System.Boolean TryGet(System.Type type, out T component)

Disassembly:
	0x022AD5F8 ADD X9, X23, 0xF
	0x022AD5FC ADD X8, X31, 0x0
	0x022AD600 AND X20, X9, 0x1FFFFFFFF
	0x022AD604 SUB X25, X8, X20
	0x022AD608 ADD X31, X25, 0x0
	0x022AD60C ADD X8, X31, 0x0
	0x022AD610 SUB X26, X8, X20
	0x022AD614 ADD X31, X26, 0x0
	0x022AD618 ADD X9, X24, 0xF
	0x022AD61C ADD X8, X31, 0x0
	0x022AD620 AND X22, X9, 0x1FFFFFFFF
	0x022AD624 SUB X8, X8, X22
	0x022AD628 STUR X8, [X29 - 0x20]
	0x022AD62C ADD X31, X8, 0x0
	0x022AD630 ADD X8, X31, 0x0
	0x022AD634 SUB X28, X8, X22
	0x022AD638 ADD X31, X28, 0x0
	0x022AD63C LDUR X2, [X29 - 0x28]
	0x022AD640 ADD X8, X31, 0x0
	0x022AD644 ADD X9, X2, 0xF
	0x022AD648 AND X9, X9, 0x1FFFFFFFF
	0x022AD64C SUB X8, X8, X9
	0x022AD650 MOV X27, X8
	0x022AD654 ADD X31, X8, 0x0
	0x022AD658 ADD X8, X31, 0x0
	0x022AD65C SUB X21, X8, X9
	0x022AD660 ADD X31, X21, 0x0
	0x022AD664 MOV X0, X21
	0x022AD668 MOV W1, W31
	0x022AD66C BL 0x3EB1B10
	0x022AD670 ADD X8, X31, 0x0
	0x022AD674 SUB X20, X8, X20
	0x022AD678 ADD X31, X20, 0x0
	0x022AD67C MOV X0, X20
	0x022AD680 MOV W1, W31
	0x022AD684 MOV X2, X23
	0x022AD688 BL 0x3EB1B10
	0x022AD68C ADD X8, X31, 0x0
	0x022AD690 SUB X22, X8, X22
	0x022AD694 ADD X31, X22, 0x0
	0x022AD698 MOV X0, X22
	0x022AD69C MOV W1, W31
	0x022AD6A0 MOV X2, X24
	0x022AD6A4 BL 0x3EB1B10
	0x022AD6A8 LDUR X0, [X29 - 0x18]
	0x022AD6AC CBZ X0, 0x22AD8E4
	0x022AD6B0 LDR X8, [X19 + 0x38]
	0x022AD6B4 LDR X1, [X8 + 0x8]
	0x022AD6B8 LDR X8, [X1]
	0x022AD6BC BLR X8
	0x022AD6C0 LDUR X9, [X29 - 0x30]
	0x022AD6C4 CBZ X9, 0x22AD8E4
	0x022AD6C8 LDR X8, [X19 + 0x38]
	0x022AD6CC MOV X0, X9
	0x022AD6D0 LDR X1, [X8 + 0x18]
	0x022AD6D4 LDR X8, [X1]
	0x022AD6D8 BLR X8
	0x022AD6DC CBZ W0, 0x22AD8B0
	0x022AD6E0 LDR X8, [X19 + 0x38]
	0x022AD6E4 LDUR X2, [X29 - 0x30]
	0x022AD6E8 SUB X3, X29, 0x10
	0x022AD6EC MOV X4, X27
	0x022AD6F0 LDR X1, [X8 + 0x20]
	0x022AD6F4 LDR X0, [X1]
	0x022AD6F8 STUR X27, [X29 - 0x10]
	0x022AD6FC LDR X8, [X1 + 0x10]
	0x022AD700 BLR X8
	0x022AD704 LDUR X2, [X29 - 0x28]
	0x022AD708 MOV X0, X21
	0x022AD70C MOV X1, X27
	0x022AD710 BL 0x3EB1AC0
	0x022AD714 LDR X8, [X19 + 0x38]
	0x022AD718 LDR X1, [X8 + 0x58]
	0x022AD71C LDR X8, [X1]
	0x022AD720 MOV X0, X21
	0x022AD724 BLR X8
	0x022AD728 TBZ X0, 0x0, 0x22AD878
	0x022AD72C LDR X8, [X19 + 0x38]
	0x022AD730 LDR X1, [X8 + 0x30]
	0x022AD734 LDR X0, [X1]
	0x022AD738 STUR X25, [X29 - 0x10]
	0x022AD73C LDR X8, [X1 + 0x10]
	0x022AD740 SUB X3, X29, 0x10
	0x022AD744 MOV X2, X21
	0x022AD748 MOV X4, X25
	0x022AD74C BLR X8
	0x022AD750 MOV X0, X20
	0x022AD754 MOV X1, X25
	0x022AD758 MOV X2, X23
	0x022AD75C BL 0x3EB1AC0
	0x022AD760 MOV X0, X26
	0x022AD764 MOV X1, X20
	0x022AD768 MOV X2, X23
	0x022AD76C BL 0x3EB1AC0
	0x022AD770 LDR X8, [X19 + 0x38]
	0x022AD774 LDR X0, [X8 + 0x40]
	0x022AD778 MOV X1, X26
	0x022AD77C BL 0x1C16E04
	0x022AD780 LDR X8, [X19 + 0x38]
	0x022AD784 MOV X27, X0
	0x022AD788 LDR X1, [X8 + 0x48]
	0x022AD78C LDRB W8, [X1 + 0x135]
	0x022AD790 TBNZ X8, 0x0, 0x22AD7A0
	0x022AD794 MOV X0, X1
	0x022AD798 BL 0x1C5C684
	0x022AD79C MOV X1, X0
	0x022AD7A0 MOV X0, X27
	0x022AD7A4 BL 0x1C16E00
	0x022AD7A8 CBZ X0, 0x22AD714
	0x022AD7AC MOV X0, X25
	0x022AD7B0 MOV X1, X20
	0x022AD7B4 MOV X2, X23
	0x022AD7B8 BL 0x3EB1AC0
	0x022AD7BC LDR X8, [X19 + 0x38]
	0x022AD7C0 LDR X0, [X8 + 0x40]
	0x022AD7C4 MOV X1, X25
	0x022AD7C8 BL 0x1C16E04
	0x022AD7CC LDR X8, [X19 + 0x38]
	0x022AD7D0 MOV X27, X0
	0x022AD7D4 LDR X1, [X8 + 0x48]
	0x022AD7D8 LDRB W8, [X1 + 0x135]
	0x022AD7DC TBNZ X8, 0x0, 0x22AD7EC
	0x022AD7E0 MOV X0, X1
	0x022AD7E4 BL 0x1C5C684
	0x022AD7E8 MOV X1, X0
	0x022AD7EC MOV X0, X27
	0x022AD7F0 BL 0x1C16E00
	0x022AD7F4 LDR X8, [X19 + 0x38]
	0x022AD7F8 MOV X27, X0
	0x022AD7FC LDR X1, [X8 + 0x48]
	0x022AD800 LDRB W8, [X1 + 0x135]
	0x022AD804 TBNZ X8, 0x0, 0x22AD814
	0x022AD808 MOV X0, X1
	0x022AD80C BL 0x1C5C684
	0x022AD810 MOV X1, X0
	0x022AD814 LDUR X2, [X29 - 0x20]
	0x022AD818 MOV X0, X27
	0x022AD81C BL 0x1C16E10
	0x022AD820 MOV X1, X0
	0x022AD824 MOV X0, X22
	0x022AD828 MOV X2, X24
	0x022AD82C BL 0x3EB1AC0
	0x022AD830 MOV X0, X28
	0x022AD834 MOV X1, X22
	0x022AD838 MOV X2, X24
	0x022AD83C BL 0x3EB1AC0
	0x022AD840 LDR X8, [X19 + 0x38]
	0x022AD844 MOV X4, X28
	0x022AD848 LDR X9, [X8 + 0x48]
	0x022AD84C LDR W9, [X9 + 0x28]
	0x022AD850 TBNZ X9, 0x1F, 0x22AD858
	0x022AD854 LDR X4, [X28]
	0x022AD858 LDR X1, [X8 + 0x50]
	0x022AD85C LDR X0, [X1]
	0x022AD860 STUR X4, [X29 - 0x10]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], X30
	003 Move [X31+80], X26
	004 Move [X31+88], X25
	005 Move [X31+96], X24
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X8, [X3+56]
	012 Move X19, X3
	013 Move X20, X2
	014 Move X22, X1
	015 Move X21, X0
	016 Compare X8, 0
	017 JumpIfNotEqual {38}
	018 Move X0, 0x1E70000
	019 Move X0, [X0+2440]
	020 Call 0x1C17CF4
	021 Move X0, 0x1E70000
	022 Move X0, [X0+2448]
	023 Call 0x1C17CF4
	024 Move X0, 0x1E70000
	025 Move X0, [X0+2456]
	026 Call 0x1C17CF4
	027 Move X0, 0x1E70000
	028 Move X0, [X0+2464]
	029 Call 0x1C17CF4
	030 Move X0, 0x1E47000
	031 Move X0, [X0+1728]
	032 Call 0x1C17CF4
	033 Move X8, [X19+56]
	034 Compare X8, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X19
	037 Call 0x1C5D6E0
	038 Move [X31+32], X31
	039 Move [X31+40], X31
	040 Move [X31+48], X31
	041 Move [X20], X31
	042 Move X0, [X21+24]
	043 Compare X0, 0
	044 JumpIfEqual {139}
	045 Move X8, 0x1E70000
	046 Move X8, [X8+2464]
	047 Move X1, [X8]
	048 Add X8, X31, 8
	049 Call List`1<Object>.GetEnumerator, X0
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move X8, [X31+24]
	052 Move X25, 0x1E70000
	053 Move X25, [X25+2448]
	054 Move [X31+2], V0
	055 Move [X31+48], X8
	056 Move X26, 0x1E47000
	057 Move X26, [X26+1728]
	058 Move X1, [X25]
	059 Add X0, X31, 32
	060 Call Enumerator<Object>.MoveNext, X0
	061 Move W21, W0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {118}
	066 Move X23, [X31+48]
	067 Compare X23, 0
	068 JumpIfEqual {138}
	069 Move X0, X23
	070 Move X1, X31
	071 Call "il2cpp_vm_object_is_inst", X0
	072 Move X24, X0
	073 Move X0, [X26]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X24
	079 Move X1, X22
	080 Move X2, X31
	081 Call Type.op_Equality, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {58}
	086 Move X8, [X19+56]
	087 Move X22, [X8+8]
	088 Move W8, [X22+309]
	089 Move TEMP, X8
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfEqual {96}
	093 Move X0, X22
	094 Call 0x1C5D684
	095 Move X22, X0
	096 Move X0, X23
	097 Move X1, X22
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {140}
	101 Move [X20], X0
	102 Move X8, [X19+56]
	103 Move X19, [X8+8]
	104 Move W8, [X19+309]
	105 Move TEMP, X8
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {112}
	109 Move X0, X19
	110 Call 0x1C5D684
	111 Move X19, X0
	112 Move X0, X23
	113 Move X1, X19
	114 Call 0x1C17E00
	115 Compare X0, 0
	116 JumpIfEqual {143}
	117 Move W19, 4
	118 Move W19, 5
	119 Move X8, 0x1E70000
	120 Move X8, [X8+2440]
	121 Add X0, X31, 32
	122 Move X1, [X8]
	123 Call Enumerator<Object>.Dispose, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction CSET not yet implemented."
	126 And W0, W21, W8
	127 Move X20, [X31+128]
	128 Move X19, [X31+136]
	129 Move X22, [X31+112]
	130 Move X21, [X31+120]
	131 Move X24, [X31+96]
	132 Move X23, [X31+104]
	133 Move X26, [X31+80]
	134 Move X25, [X31+88]
	135 Move X30, [X31+64]
	136 Add X31, X31, 144
	137 Return X0
	138 Call 0x1C17F20
	139 Call 0x1C17F20
	140 Move X0, X23
	141 Move X1, X22
	142 Call 0x1C181E0
	143 Move X0, X23
	144 Move X1, X19
	145 Call 0x1C181E0
	146 Move X19, X0
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X0, X19
	149 Call 0x3EB2AD0
	150 Move X20, [X0]
	151 Call 0x3EB2AE0
	152 Move X8, 0x1E70000
	153 Move X8, [X8+2440]
	154 Add X0, X31, 32
	155 Move X1, [X8]
	156 Call Enumerator<Object>.Dispose, X0
	157 Compare X20, 0
	158 JumpIfNotEqual {162}
	159 Move W21, W31
	160 Move W19, W31
	161 Move X20, X31
	162 Move X0, X20
	163 Call 0x1C17F18
	164 Move X19, X0
	165 Move X8, 0x1E70000
	166 Move X8, [X8+2440]
	167 Move X1, [X8]
	168 Add X0, X31, 32
	169 Call Enumerator<Object>.Dispose, X0
	170 Compare X20, 0
	171 JumpIfNotEqual {174}
	172 Move X0, X19
	173 Call 0x1D2D690
	174 Move X0, X20
	175 Call 0x1C17F18
	176 Call 0x1991590

Method: System.Boolean TryGetSubclassOf(System.Type type, out T component)

Disassembly:
	0x022ADABC CMP W8, 0x1
	0x022ADAC0 B.LT 0x22ADC50
	0x022ADAC4 LDR X8, [X19 + 0x38]
	0x022ADAC8 MOV X0, X22
	0x022ADACC LDR X1, [X8 + 0x18]
	0x022ADAD0 ADD X8, X31, 0x8
	0x022ADAD4 BL 0x301CB58
	0x022ADAD8 LDUR V0, [X31 + 0x8]
	0x022ADADC LDR X8, [X31 + 0x18]
	0x022ADAE0 ADRP X23, 0x1E6F000
	0x022ADAE4 STR V0, [X31 + 0x2]
	0x022ADAE8 STR X8, [X31 + 0x30]
	0x022ADAEC LDR X23, [X23 + 0x748]
	0x022ADAF0 LDR X8, [X19 + 0x38]
	0x022ADAF4 LDR X1, [X8 + 0x58]
	0x022ADAF8 ADD X0, X31, 0x20
	0x022ADAFC BL 0x2BC4350
	0x022ADB00 TBZ X0, 0x0, 0x22ADC38
	0x022ADB04 LDR X22, [X31 + 0x30]
	0x022ADB08 CBZ X22, 0x22ADC64
	0x022ADB0C LDR X8, [X22]
	0x022ADB10 LDR X1, [X23]
	0x022ADB14 LDRH W9, [X8 + 0x12E]
	0x022ADB18 CBZ X9, 0x22ADB3C
	0x022ADB1C LDR X10, [X8 + 0xB0]
	0x022ADB20 ADD X10, X10, 0x8
	0x022ADB24 LDUR X11, [X10 - 0x8]
	0x022ADB28 CMP X11, X1
	0x022ADB2C B.EQ 0x22ADB4C
	0x022ADB30 SUBS X9, X9, 0x1
	0x022ADB34 ADD X10, X10, 0x10
	0x022ADB38 B.NE 0x22ADB24
	0x022ADB3C MOV X0, X22
	0x022ADB40 MOV W2, W31
	0x022ADB44 BL 0x1C5C788
	0x022ADB48 B 0x22ADB58
	0x022ADB4C LDRSW X9, [X10]
	0x022ADB50 ADD X8, X8, X9, 0x4, LSL
	0x022ADB54 ADD X0, X8, 0x138
	0x022ADB58 LDP X8, X1, [X0]
	0x022ADB5C MOV X0, X22
	0x022ADB60 BLR X8
	0x022ADB64 MOVZ W2, 0x1
	0x022ADB68 MOV X1, X21
	0x022ADB6C MOV X3, X31
	0x022ADB70 BL 0x3225904
	0x022ADB74 CBZ W0, 0x22ADB84
	0x022ADB78 MOV X22, X31
	0x022ADB7C CBZ X22, 0x22ADAF0
	0x022ADB80 B 0x22ADBE8
	0x022ADB84 LDR X8, [X22]
	0x022ADB88 LDR X1, [X23]
	0x022ADB8C LDRH W9, [X8 + 0x12E]
	0x022ADB90 CBZ X9, 0x22ADBB4
	0x022ADB94 LDR X10, [X8 + 0xB0]
	0x022ADB98 ADD X10, X10, 0x8
	0x022ADB9C LDUR X11, [X10 - 0x8]
	0x022ADBA0 CMP X11, X1
	0x022ADBA4 B.EQ 0x22ADBC4
	0x022ADBA8 SUBS X9, X9, 0x1
	0x022ADBAC ADD X10, X10, 0x10
	0x022ADBB0 B.NE 0x22ADB9C
	0x022ADBB4 MOVZ W2, 0x1
	0x022ADBB8 MOV X0, X22
	0x022ADBBC BL 0x1C5C788
	0x022ADBC0 B 0x22ADBD4
	0x022ADBC4 LDR W9, [X10]
	0x022ADBC8 ADD W9, W9, 0x1
	0x022ADBCC ADD X8, X8, W9, 0x4, SXTW
	0x022ADBD0 ADD X0, X8, 0x138
	0x022ADBD4 LDP X8, X1, [X0]
	0x022ADBD8 MOV X0, X22
	0x022ADBDC BLR X8
	0x022ADBE0 MOV X22, X0
	0x022ADBE4 CBZ X22, 0x22ADAF0
	0x022ADBE8 ADRP X8, 0x1E46000
	0x022ADBEC LDR X8, [X8 + 0x6C0]
	0x022ADBF0 LDR X20, [X20 + 0x18]
	0x022ADBF4 LDR X0, [X8]
	0x022ADBF8 LDR X8, [X19 + 0x38]
	0x022ADBFC LDR W9, [X0 + 0xE0]
	0x022ADC00 LDR X21, [X8 + 0x50]
	0x022ADC04 CBNZ W9, 0x22ADC0C
	0x022ADC08 BL 0x1C16DFC
	0x022ADC0C MOV X0, X21
	0x022ADC10 MOV X1, X31
	0x022ADC14 BL 0x338C698
	0x022ADC18 MOV X1, X0
	0x022ADC1C CBZ X20, 0x22ADCAC
	0x022ADC20 ADRP X8, 0x1E6F000
	0x022ADC24 LDR X8, [X8 + 0x9D8]
	0x022ADC28 LDR X3, [X8]
	0x022ADC2C MOV X0, X20
	0x022ADC30 MOV X2, X22
	0x022ADC34 BL 0x2AA5084
	0x022ADC38 MOV X21, X31
	0x022ADC3C LDR X8, [X19 + 0x38]
	0x022ADC40 ADD X0, X31, 0x20
	0x022ADC44 LDR X1, [X8 + 0x60]
	0x022ADC48 BL 0x2BC434C
	0x022ADC4C CBNZ X21, 0x22ADCA4
	0x022ADC50 LDP X20, X19, [X31 + 0x60]
	0x022ADC54 LDP X22, X21, [X31 + 0x50]
	0x022ADC58 LDP X30, X23, [X31 + 0x40]
	0x022ADC5C ADD X31, X31, 0x70
	0x022ADC60 RET
	0x022ADC64 BL 0x1C16F20
	0x022ADC68 ADRP X0, 0x1E4B000
	0x022ADC6C LDR X0, [X0 + 0x528]
	0x022ADC70 BL 0x1C16D08
	0x022ADC74 BL 0x1C16F10
	0x022ADC78 MOV X20, X0
	0x022ADC7C ADRP X0, 0x1E6F000
	0x022ADC80 LDR X0, [X0 + 0x9E0]
	0x022ADC84 BL 0x1C16D08
	0x022ADC88 MOV X1, X0
	0x022ADC8C MOV X0, X20
	0x022ADC90 MOV X2, X31
	0x022ADC94 BL 0x330E100
	0x022ADC98 MOV X0, X20
	0x022ADC9C MOV X1, X19
	0x022ADCA0 BL 0x1C16DEC
	0x022ADCA4 MOV X0, X21
	0x022ADCA8 BL 0x1C16F18
	0x022ADCAC BL 0x1C16F20
	0x022ADCB0 B 0x22ADCCC
	0x022ADCB4 B 0x22ADCCC
	0x022ADCB8 B 0x22ADCCC
	0x022ADCBC B 0x22ADCCC
	0x022ADCC0 B 0x22ADCCC
	0x022ADCC4 B 0x22ADCCC
	0x022ADCC8 B 0x22ADCCC
	0x022ADCCC MOV X20, X0
	0x022ADCD0 CMP W1, 0x1
	0x022ADCD4 B.NE 0x22ADCEC
	0x022ADCD8 MOV X0, X20
	0x022ADCDC BL 0x3EB1AD0
	0x022ADCE0 LDR X21, [X0]
	0x022ADCE4 BL 0x3EB1AE0
	0x022ADCE8 B 0x22ADC3C
	0x022ADCEC MOV X21, X31
	0x022ADCF0 B 0x22ADCF8
	0x022ADCF4 MOV X20, X0
	0x022ADCF8 LDR X8, [X19 + 0x38]
	0x022ADCFC LDR X1, [X8 + 0x60]
	0x022ADD00 ADD X0, X31, 0x20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X8, [X3+56]
	010 Move X19, X3
	011 Move X20, X2
	012 Move X23, X1
	013 Move X21, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {33}
	016 Move X0, 0x1E70000
	017 Move X0, [X0+2440]
	018 Call 0x1C17CF4
	019 Move X0, 0x1E70000
	020 Move X0, [X0+2448]
	021 Call 0x1C17CF4
	022 Move X0, 0x1E70000
	023 Move X0, [X0+2456]
	024 Call 0x1C17CF4
	025 Move X0, 0x1E70000
	026 Move X0, [X0+2464]
	027 Call 0x1C17CF4
	028 Move X8, [X19+56]
	029 Compare X8, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X19
	032 Call 0x1C5D6E0
	033 Move [X31+32], X31
	034 Move [X31+40], X31
	035 Move [X31+48], X31
	036 Move [X20], X31
	037 Move X0, [X21+24]
	038 Compare X0, 0
	039 JumpIfEqual {128}
	040 Move X8, 0x1E70000
	041 Move X8, [X8+2464]
	042 Move X1, [X8]
	043 Add X8, X31, 8
	044 Call List`1<Object>.GetEnumerator, X0
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 Move X8, [X31+24]
	047 Move X24, 0x1E70000
	048 Move [X31+2], V0
	049 Move [X31+48], X8
	050 Move X24, [X24+2448]
	051 Move X1, [X24]
	052 Add X0, X31, 32
	053 Call Enumerator<Object>.MoveNext, X0
	054 Move W21, W0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {108}
	059 Move X22, [X31+48]
	060 Compare X22, 0
	061 JumpIfEqual {126}
	062 Move X0, X22
	063 Move X1, X31
	064 Call "il2cpp_vm_object_is_inst", X0
	065 Compare X0, 0
	066 JumpIfEqual {127}
	067 Move X8, [X0]
	068 Move X9, [X8+664]
	069 Move X2, [X8+672]
	070 Move X1, X23
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {51}
	076 Move X8, [X19+56]
	077 Move X23, [X8+8]
	078 Move W8, [X23+309]
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {86}
	083 Move X0, X23
	084 Call 0x1C5D684
	085 Move X23, X0
	086 Move X0, X22
	087 Move X1, X23
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {129}
	091 Move [X20], X0
	092 Move X8, [X19+56]
	093 Move X19, [X8+8]
	094 Move W8, [X19+309]
	095 Move TEMP, X8
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {102}
	099 Move X0, X19
	100 Call 0x1C5D684
	101 Move X19, X0
	102 Move X0, X22
	103 Move X1, X19
	104 Call 0x1C17E00
	105 Compare X0, 0
	106 JumpIfEqual {132}
	107 Move W19, 4
	108 Move W19, 5
	109 Move X8, 0x1E70000
	110 Move X8, [X8+2440]
	111 Add X0, X31, 32
	112 Move X1, [X8]
	113 Call Enumerator<Object>.Dispose, X0
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CSET not yet implemented."
	116 And W0, W21, W8
	117 Move X20, [X31+112]
	118 Move X19, [X31+120]
	119 Move X22, [X31+96]
	120 Move X21, [X31+104]
	121 Move X24, [X31+80]
	122 Move X23, [X31+88]
	123 Move X30, [X31+64]
	124 Add X31, X31, 128
	125 Return X0
	126 Call 0x1C17F20
	127 Call 0x1C17F20
	128 Call 0x1C17F20
	129 Move X0, X22
	130 Move X1, X23
	131 Call 0x1C181E0
	132 Move X0, X22
	133 Move X1, X19
	134 Call 0x1C181E0
	135 Move X19, X0
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X0, X19
	138 Call 0x3EB2AD0
	139 Move X20, [X0]
	140 Call 0x3EB2AE0
	141 Move X8, 0x1E70000
	142 Move X8, [X8+2440]
	143 Add X0, X31, 32
	144 Move X1, [X8]
	145 Call Enumerator<Object>.Dispose, X0
	146 Compare X20, 0
	147 JumpIfNotEqual {151}
	148 Move W21, W31
	149 Move W19, W31
	150 Move X20, X31
	151 Move X0, X20
	152 Call 0x1C17F18
	153 Move X19, X0
	154 Move X8, 0x1E70000
	155 Move X8, [X8+2440]
	156 Move X1, [X8]
	157 Add X0, X31, 32
	158 Call Enumerator<Object>.Dispose, X0
	159 Compare X20, 0
	160 JumpIfNotEqual {163}
	161 Move X0, X19
	162 Call 0x1D2D690
	163 Move X0, X20
	164 Call 0x1C17F18
	165 Call 0x1991590

Method: System.Boolean TryGetAllSubclassOf(System.Type type, System.Collections.Generic.List`1<T> result)

Disassembly:
	0x022AD864 LDR X8, [X1 + 0x10]
	0x022AD868 LDUR X2, [X29 - 0x18]
	0x022AD86C SUB X3, X29, 0x10
	0x022AD870 BLR X8
	0x022AD874 B 0x22AD714
	0x022AD878 MOV X20, X31
	0x022AD87C LDR X8, [X19 + 0x38]
	0x022AD880 LDR X0, [X8 + 0x28]
	0x022AD884 LDRB W9, [X0 + 0x135]
	0x022AD888 TBNZ X9, 0x0, 0x22AD894
	0x022AD88C BL 0x1C5C684
	0x022AD890 LDR X8, [X19 + 0x38]
	0x022AD894 LDR X1, [X8 + 0x60]
	0x022AD898 LDUR X2, [X29 - 0x40]
	0x022AD89C MOV X3, X21
	0x022AD8A0 MOV X4, X31
	0x022AD8A4 MOV X5, X31
	0x022AD8A8 BL 0x1C17728
	0x022AD8AC CBNZ X20, 0x22AD8E8
	0x022AD8B0 LDUR X8, [X29 - 0x38]
	0x022AD8B4 LDR X8, [X8 + 0x28]
	0x022AD8B8 LDUR X9, [X29 - 0x8]
	0x022AD8BC CMP X8, X9
	0x022AD8C0 B.NE 0x22AD8F0
	0x022AD8C4 ADD X31, X29, 0x0
	0x022AD8C8 LDP X20, X19, [X31 + 0x50]
	0x022AD8CC LDP X22, X21, [X31 + 0x40]
	0x022AD8D0 LDP X24, X23, [X31 + 0x30]
	0x022AD8D4 LDP X26, X25, [X31 + 0x20]
	0x022AD8D8 LDP X28, X27, [X31 + 0x10]
	0x022AD8DC LDP X29, X30, [X31], #0x60
	0x022AD8E0 RET
	0x022AD8E4 BL 0x1C16F20
	0x022AD8E8 MOV X0, X20
	0x022AD8EC BL 0x1C16F18
	0x022AD8F0 BL 0x3EB1B20
	0x022AD8F4 B 0x22AD908
	0x022AD8F8 B 0x22AD908
	0x022AD8FC B 0x22AD908
	0x022AD900 B 0x22AD908
	0x022AD904 B 0x22AD908
	0x022AD908 MOV X22, X0
	0x022AD90C CMP W1, 0x1
	0x022AD910 B.NE 0x22AD928
	0x022AD914 MOV X0, X22
	0x022AD918 BL 0x3EB1AD0
	0x022AD91C LDR X20, [X0]
	0x022AD920 BL 0x3EB1AE0
	0x022AD924 B 0x22AD87C
	0x022AD928 MOV X20, X31
	0x022AD92C B 0x22AD934
	0x022AD930 MOV X22, X0
	0x022AD934 LDR X8, [X19 + 0x38]
	0x022AD938 LDR X0, [X8 + 0x28]
	0x022AD93C LDRB W9, [X0 + 0x135]
	0x022AD940 TBNZ X9, 0x0, 0x22AD94C
	0x022AD944 BL 0x1C5C684
	0x022AD948 LDR X8, [X19 + 0x38]
	0x022AD94C LDR X1, [X8 + 0x60]
	0x022AD950 LDUR X2, [X29 - 0x40]
	0x022AD954 MOV X3, X21
	0x022AD958 MOV X4, X31
	0x022AD95C MOV X5, X31
	0x022AD960 BL 0x1C17728
	0x022AD964 CBNZ X20, 0x22AD970
	0x022AD968 MOV X0, X22
	0x022AD96C BL 0x1D2C690
	0x022AD970 MOV X0, X20
	0x022AD974 BL 0x1C16F18
	0x022AD978 BL 0x1990590
	0x022AD97C STR X30, [X31 - 0x30]!
	0x022AD980 STP X22, X21, [X31 + 0x10]
	0x022AD984 STP X20, X19, [X31 + 0x20]
	0x022AD988 LDR X8, [X3 + 0x38]
	0x022AD98C MOV X19, X2
	0x022AD990 MOV X20, X1
	0x022AD994 MOV X21, X0
	0x022AD998 CBNZ X8, 0x22AD9AC
	0x022AD99C MOV X0, X3
	0x022AD9A0 MOV X22, X3
	0x022AD9A4 BL 0x1C5C6E0
	0x022AD9A8 LDR X8, [X22 + 0x38]
	0x022AD9AC LDR X3, [X8 + 0x8]
	0x022AD9B0 MOV X0, X21
	0x022AD9B4 MOV X1, X20
	0x022AD9B8 MOV X2, X19
	0x022AD9BC LDP X20, X19, [X31 + 0x20]
	0x022AD9C0 LDP X22, X21, [X31 + 0x10]
	0x022AD9C4 LDR X30, [X31], #0x30
	0x022AD9C8 B 0x22ADA1C
	0x022AD9CC STR X30, [X31 - 0x30]!
	0x022AD9D0 STP X22, X21, [X31 + 0x10]
	0x022AD9D4 STP X20, X19, [X31 + 0x20]
	0x022AD9D8 LDR X8, [X3 + 0x38]
	0x022AD9DC MOV X19, X2
	0x022AD9E0 MOV X20, X1
	0x022AD9E4 MOV X21, X0
	0x022AD9E8 CBNZ X8, 0x22AD9FC
	0x022AD9EC MOV X0, X3
	0x022AD9F0 MOV X22, X3
	0x022AD9F4 BL 0x1C5C6E0
	0x022AD9F8 LDR X8, [X22 + 0x38]
	0x022AD9FC LDR X3, [X8 + 0x8]
	0x022ADA00 MOV X0, X21
	0x022ADA04 MOV X1, X20
	0x022ADA08 MOV X2, X19
	0x022ADA0C LDP X20, X19, [X31 + 0x20]
	0x022ADA10 LDP X22, X21, [X31 + 0x10]
	0x022ADA14 LDR X30, [X31], #0x30
	0x022ADA18 B 0x22ADA1C
	0x022ADA1C SUB X31, X31, 0x70
	0x022ADA20 STP X30, X23, [X31 + 0x40]
	0x022ADA24 STP X22, X21, [X31 + 0x50]
	0x022ADA28 STP X20, X19, [X31 + 0x60]
	0x022ADA2C LDR X8, [X3 + 0x38]
	0x022ADA30 MOV X19, X3
	0x022ADA34 MOV X21, X2
	0x022ADA38 MOV X22, X1
	0x022ADA3C MOV X20, X0
	0x022ADA40 CBNZ X8, 0x22ADA84
	0x022ADA44 ADRP X0, 0x1E6F000
	0x022ADA48 LDR X0, [X0 + 0x9D8]
	0x022ADA4C BL 0x1C16CF4
	0x022ADA50 ADRP X0, 0x1E6F000
	0x022ADA54 LDR X0, [X0 + 0x748]
	0x022ADA58 BL 0x1C16CF4
	0x022ADA5C ADRP X0, 0x1E6E000
	0x022ADA60 LDR X0, [X0 + 0xC0]
	0x022ADA64 BL 0x1C16CF4
	0x022ADA68 ADRP X0, 0x1E46000
	0x022ADA6C LDR X0, [X0 + 0x6C0]
	0x022ADA70 BL 0x1C16CF4
	0x022ADA74 LDR X8, [X19 + 0x38]
	0x022ADA78 CBNZ X8, 0x22ADA84
	0x022ADA7C MOV X0, X19
	0x022ADA80 BL 0x1C5C6E0
	0x022ADA84 STP X31, X31, [X31 + 0x20]
	0x022ADA88 STR X31, [X31 + 0x30]
	0x022ADA8C CBZ X22, 0x22ADC68
	0x022ADA90 ADRP X8, 0x1E6E000
	0x022ADA94 LDR X8, [X8 + 0xC0]
	0x022ADA98 LDR X0, [X8]
	0x022ADA9C LDR W8, [X0 + 0xE0]
	0x022ADAA0 CBNZ W8, 0x22ADAA8
	0x022ADAA4 BL 0x1C16DFC
	0x022ADAA8 LDR X8, [X19 + 0x38]
	0x022ADAAC MOV X0, X22
	0x022ADAB0 LDR X1, [X8 + 0x8]
	0x022ADAB4 BL 0x2298468
	0x022ADAB8 LDR W8, [X22 + 0x18]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+72], X25
	004 Move [X31+80], X24
	005 Move [X31+88], X23
	006 Move [X31+96], X22
	007 Move [X31+104], X21
	008 Move [X31+112], X20
	009 Move [X31+120], X19
	010 Move X8, [X3+56]
	011 Move X20, X3
	012 Move X19, X2
	013 Move X21, X1
	014 Move X22, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {34}
	017 Move X0, 0x1E70000
	018 Move X0, [X0+2440]
	019 Call 0x1C17CF4
	020 Move X0, 0x1E70000
	021 Move X0, [X0+2448]
	022 Call 0x1C17CF4
	023 Move X0, 0x1E70000
	024 Move X0, [X0+2456]
	025 Call 0x1C17CF4
	026 Move X0, 0x1E70000
	027 Move X0, [X0+2464]
	028 Call 0x1C17CF4
	029 Move X8, [X20+56]
	030 Compare X8, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X20
	033 Call 0x1C5D6E0
	034 Move [X31+32], X31
	035 Move [X31+40], X31
	036 Move [X31+48], X31
	037 Compare X19, 0
	038 JumpIfEqual {138}
	039 Move X0, [X22+24]
	040 Compare X0, 0
	041 JumpIfEqual {138}
	042 Move X8, 0x1E70000
	043 Move W24, [X19+24]
	044 Move X8, [X8+2464]
	045 Move X1, [X8]
	046 Add X8, X31, 8
	047 Call List`1<Object>.GetEnumerator, X0
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 Move X8, [X31+24]
	050 Move X25, 0x1E70000
	051 Move [X31+2], V0
	052 Move [X31+48], X8
	053 Move X25, [X25+2448]
	054 Move X1, [X25]
	055 Add X0, X31, 32
	056 Call Enumerator<Object>.MoveNext, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {114}
	061 Move X22, [X31+48]
	062 Compare X22, 0
	063 JumpIfEqual {132}
	064 Move X0, X22
	065 Move X1, X31
	066 Call "il2cpp_vm_object_is_inst", X0
	067 Compare X0, 0
	068 JumpIfEqual {133}
	069 Move X8, [X0]
	070 Move X9, [X8+664]
	071 Move X2, [X8+672]
	072 Move X1, X21
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {54}
	078 Move X8, [X20+56]
	079 Move X23, [X8+16]
	080 Move W8, [X23+309]
	081 Move TEMP, X8
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {88}
	085 Move X0, X23
	086 Call 0x1C5D684
	087 Move X23, X0
	088 Move X0, X22
	089 Move X1, X23
	090 Call 0x1C17E00
	091 Move X1, X0
	092 Compare X1, 0
	093 JumpIfEqual {134}
	094 Move X9, [X20+56]
	095 Move W10, [X19+28]
	096 Move X8, [X19+16]
	097 Move X9, [X9+24]
	098 Add W10, W10, 1
	099 Move [X19+28], W10
	100 Compare X8, 0
	101 JumpIfEqual {137}
	102 NotImplemented "Instruction LDRSW not yet implemented."
	103 Move W11, [X8+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add W9, W10, 1
	106 Add X8, X8, X10
	107 Move [X19+24], W9
	108 Move [X8+32], X1
	109 Move X8, [X9+32]
	110 Move X8, [X8+192]
	111 Move X2, [X8+112]
	112 Move X0, X19
	113 Call List`1<Object>.AddWithResize, X0, X1
	114 Move X8, 0x1E70000
	115 Move X8, [X8+2440]
	116 Add X0, X31, 32
	117 Move X1, [X8]
	118 Call Enumerator<Object>.Dispose, X0
	119 Move W8, [X19+24]
	120 Move X20, [X31+112]
	121 Move X19, [X31+120]
	122 Move X22, [X31+96]
	123 Move X21, [X31+104]
	124 Move X30, [X31+64]
	125 Move X25, [X31+72]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X24, [X31+80]
	128 Move X23, [X31+88]
	129 NotImplemented "Instruction CSET not yet implemented."
	130 Add X31, X31, 128
	131 Return X0
	132 Call 0x1C17F20
	133 Call 0x1C17F20
	134 Move X0, X22
	135 Move X1, X23
	136 Call 0x1C181E0
	137 Call 0x1C17F20
	138 Call 0x1C17F20
	139 Move X20, X0
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X0, X20
	142 Call 0x3EB2AD0
	143 Move X21, [X0]
	144 Call 0x3EB2AE0
	145 Move X8, 0x1E70000
	146 Move X8, [X8+2440]
	147 Add X0, X31, 32
	148 Move X1, [X8]
	149 Call Enumerator<Object>.Dispose, X0
	150 Compare X21, 0
	151 JumpIfEqual {119}
	152 Move X0, X21
	153 Call 0x1C17F18
	154 Move X21, X31
	155 Move X20, X0
	156 Move X8, 0x1E70000
	157 Move X8, [X8+2440]
	158 Move X1, [X8]
	159 Add X0, X31, 32
	160 Call Enumerator<Object>.Dispose, X0
	161 Compare X21, 0
	162 JumpIfNotEqual {165}
	163 Move X0, X20
	164 Call 0x1D2D690
	165 Move X0, X21
	166 Call 0x1C17F18
	167 Call 0x1991590

Method: System.Int32 GetHashCode()

Disassembly:
	0x039F5F88 LDR X8, [X21]
	0x039F5F8C MOV X19, X0
	0x039F5F90 LDR W9, [X8 + 0xE0]
	0x039F5F94 CBNZ W9, 0x39F5FA0
	0x039F5F98 MOV X0, X8
	0x039F5F9C BL 0x1C16DFC
	0x039F5FA0 MOV X0, X19
	0x039F5FA4 MOV X1, X31
	0x039F5FA8 BL 0x3320190
	0x039F5FAC LSRV W8, W0, W20
	0x039F5FB0 AND W0, W8, 0x1
	0x039F5FB4 B 0x39F5FBC
	0x039F5FB8 MOV W0, W31
	0x039F5FBC LDP X20, X19, [X31 + 0x10]
	0x039F5FC0 LDP X30, X21, [X31], #0x20
	0x039F5FC4 RET
	0x039F5FC8 BL 0x1C16F20
	0x039F5FCC SUB X31, X31, 0x80
	0x039F5FD0 STP X30, X25, [X31 + 0x40]
	0x039F5FD4 STP X24, X23, [X31 + 0x50]
	0x039F5FD8 STP X22, X21, [X31 + 0x60]
	0x039F5FDC STP X20, X19, [X31 + 0x70]
	0x039F5FE0 ADRP X22, 0x9EC000
	0x039F5FE4 LDRB W8, [X22 + 0xEBF]
	0x039F5FE8 MOV W19, W2
	0x039F5FEC MOV W20, W1
	0x039F5FF0 MOV X21, X0
	0x039F5FF4 TBNZ X8, 0x0, 0x39F606C
	0x039F5FF8 ADRP X0, 0x707000
	0x039F5FFC LDR X0, [X0 + 0x9E8]
	0x039F6000 BL 0x1C16CF4
	0x039F6004 ADRP X0, 0x75D000
	0x039F6008 LDR X0, [X0 + 0xA48]
	0x039F600C BL 0x1C16CF4
	0x039F6010 ADRP X0, 0x6FD000
	0x039F6014 LDR X0, [X0 + 0xDF8]
	0x039F6018 BL 0x1C16CF4
	0x039F601C ADRP X0, 0x75D000
	0x039F6020 LDR X0, [X0 + 0xA50]
	0x039F6024 BL 0x1C16CF4
	0x039F6028 ADRP X0, 0x75D000
	0x039F602C LDR X0, [X0 + 0xA58]
	0x039F6030 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x9ED000
	008 Move W8, [X20+3760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x75F000
	015 Move X0, [X0+2112]
	016 Call 0x1C17CF4
	017 Move X0, 0x75F000
	018 Move X0, [X0+2120]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3760], W8
	022 Move X0, [X19+24]
	023 Compare X0, 0
	024 JumpIfEqual {47}
	025 Move X22, 0x75F000
	026 Move X22, [X22+2120]
	027 Move W20, W31
	028 Move W21, 17
	029 Move W23, 23
	030 Move W8, [X0+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X2, [X22]
	033 Move W1, W20
	034 Call List`1<Object>.get_Item, X0, X1
	035 Compare X0, 0
	036 JumpIfEqual {47}
	037 Move X8, [X0]
	038 Move X9, [X8+344]
	039 Move X1, [X8+352]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move W8, W0
	042 Move X0, [X19+24]
	043 NotImplemented "Instruction MADD not yet implemented."
	044 Add W20, W20, 1
	045 Compare X0, 0
	046 JumpIfNotEqual {30}
	047 Call 0x1C17F20
	048 Move W0, W21
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return X0

Method: System.Int32 GetComponentListHashCode()

Disassembly:
	0x039F6034 ADRP X0, 0x75D000
	0x039F6038 LDR X0, [X0 + 0xA60]
	0x039F603C BL 0x1C16CF4
	0x039F6040 ADRP X0, 0x75D000
	0x039F6044 LDR X0, [X0 + 0xA40]
	0x039F6048 BL 0x1C16CF4
	0x039F604C ADRP X0, 0x75D000
	0x039F6050 LDR X0, [X0 + 0xA68]
	0x039F6054 BL 0x1C16CF4
	0x039F6058 ADRP X0, 0x75D000
	0x039F605C LDR X0, [X0 + 0xA70]
	0x039F6060 BL 0x1C16CF4
	0x039F6064 MOVZ W8, 0x1
	0x039F6068 STRB W8, [X22 + 0xEBF]
	0x039F606C ADRP X25, 0x6FD000
	0x039F6070 ADRP X24, 0x75D000
	0x039F6074 LDR X25, [X25 + 0xDF8]
	0x039F6078 LDR X24, [X24 + 0xA68]
	0x039F607C STP X31, X31, [X31 + 0x20]
	0x039F6080 STR X31, [X31 + 0x30]
	0x039F6084 CBZ W20, 0x39F613C
	0x039F6088 LDR X0, [X21 + 0x78]
	0x039F608C CBZ X0, 0x39F6200
	0x039F6090 ADRP X8, 0x75D000
	0x039F6094 LDR X8, [X8 + 0xA40]
	0x039F6098 ADRP X22, 0x706000
	0x039F609C LDR X1, [X8]
	0x039F60A0 LDR X22, [X22 + 0x9E8]
	0x039F60A4 BL 0x2D1A074
	0x039F60A8 LDR X8, [X22]
	0x039F60AC MOV X22, X0
	0x039F60B0 LDR W9, [X8 + 0xE0]
	0x039F60B4 CBNZ W9, 0x39F60C0
	0x039F60B8 MOV X0, X8
	0x039F60BC BL 0x1C16DFC
	0x039F60C0 MOV X0, X22
	0x039F60C4 MOV X1, X31
	0x039F60C8 BL 0x3320190
	0x039F60CC LDR X21, [X21 + 0x78]
	0x039F60D0 CBZ X21, 0x39F6200
	0x039F60D4 LDR X8, [X21 + 0x68]
	0x039F60D8 CBZ X8, 0x39F6200
	0x039F60DC LDR W9, [X8 + 0x18]
	0x039F60E0 CMP W9, W20
	0x039F60E4 B.LS 0x39F6204
	0x039F60E8 ADD X9, X8, W20, 0x2, SXTW

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x9EC000
	008 Move W8, [X20+3761]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x75E000
	015 Move X0, [X0+2112]
	016 Call 0x1C17CF4
	017 Move X0, 0x75E000
	018 Move X0, [X0+2120]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3761], W8
	022 Move X0, [X19+24]
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move X22, 0x75E000
	026 Move X22, [X22+2120]
	027 Move W20, W31
	028 Move W21, 17
	029 Move W23, 23
	030 Move W8, [X0+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X2, [X22]
	033 Move W1, W20
	034 Call List`1<Object>.get_Item, X0, X1
	035 Compare X0, 0
	036 JumpIfEqual {51}
	037 Move X1, X31
	038 Call "il2cpp_vm_object_is_inst", X0
	039 Compare X0, 0
	040 JumpIfEqual {51}
	041 Move X8, [X0]
	042 Move X9, [X8+344]
	043 Move X1, [X8+352]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move W8, W0
	046 Move X0, [X19+24]
	047 NotImplemented "Instruction MADD not yet implemented."
	048 Add W20, W20, 1
	049 Compare X0, 0
	050 JumpIfNotEqual {30}
	051 Call 0x1C17F20
	052 Move W0, W21
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Return X0

Method: System.Void Sanitize()

Disassembly:
	0x039F60EC LDR X8, [X25]
	0x039F60F0 LDR W9, [X9 + 0x20]
	0x039F60F4 LDR X20, [X21 + 0x70]
	0x039F60F8 ANDS W31, W19, 0x1
	0x039F60FC LDR W10, [X8 + 0xE0]
	0x039F6100 BIC W11, W0, W9, 0x0
	0x039F6104 ORR W9, W9, W0, 0x0
	0x039F6108 CSEL W19, W9, W11, NE
	0x039F610C CBNZ W10, 0x39F6118
	0x039F6110 MOV X0, X8
	0x039F6114 BL 0x1C16DFC
	0x039F6118 MOV X0, X20
	0x039F611C MOV W1, W19
	0x039F6120 MOV X2, X31
	0x039F6124 BL 0x33B0510
	0x039F6128 LDR X2, [X24]
	0x039F612C MOV X1, X0
	0x039F6130 MOV X0, X21
	0x039F6134 BL 0x2D1A098
	0x039F6138 B 0x39F61E8
	0x039F613C LDR X22, [X21 + 0x78]
	0x039F6140 CBZ X22, 0x39F6200
	0x039F6144 LDR X0, [X25]
	0x039F6148 LDR X23, [X22 + 0x70]
	0x039F614C LDR W8, [X0 + 0xE0]
	0x039F6150 CBNZ W8, 0x39F6158
	0x039F6154 BL 0x1C16DFC
	0x039F6158 MOV X0, X23
	0x039F615C MOV W1, W31
	0x039F6160 MOV X2, X31
	0x039F6164 BL 0x33B0510
	0x039F6168 LDR X2, [X24]
	0x039F616C MOV X1, X0
	0x039F6170 MOV X0, X22
	0x039F6174 BL 0x2D1A098
	0x039F6178 LDR X0, [X21 + 0x70]
	0x039F617C CBZ X0, 0x39F6200
	0x039F6180 ADRP X8, 0x75D000
	0x039F6184 LDR X8, [X8 + 0xA70]
	0x039F6188 LDR X1, [X8]
	0x039F618C ADD X8, X31, 0x8
	0x039F6190 BL 0x301CB58
	0x039F6194 LDUR V0, [X31 + 0x8]
	0x039F6198 LDR X8, [X31 + 0x18]
	0x039F619C ADRP X22, 0x75D000
	0x039F61A0 STR V0, [X31 + 0x2]
	0x039F61A4 STR X8, [X31 + 0x30]
	0x039F61A8 LDR X22, [X22 + 0xA58]
	0x039F61AC LDR X1, [X22]
	0x039F61B0 ADD X0, X31, 0x20
	0x039F61B4 BL 0x2BC4350
	0x039F61B8 TBZ X0, 0x0, 0x39F61D4
	0x039F61BC LDR X0, [X31 + 0x30]
	0x039F61C0 CBZ X0, 0x39F61AC
	0x039F61C4 LDR X8, [X0 + 0x78]
	0x039F61C8 CBZ X8, 0x39F61AC
	0x039F61CC BL 0x39F6280
	0x039F61D0 B 0x39F61AC
	0x039F61D4 ADRP X8, 0x75D000
	0x039F61D8 LDR X8, [X8 + 0xA50]
	0x039F61DC ADD X0, X31, 0x20
	0x039F61E0 LDR X1, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x9EC000
	009 Move W8, [X20+3762]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x75E000
	016 Move X0, [X0+2512]
	017 Call 0x1C17CF4
	018 Move X0, 0x75E000
	019 Move X0, [X0+2112]
	020 Call 0x1C17CF4
	021 Move X0, 0x75E000
	022 Move X0, [X0+2120]
	023 Call 0x1C17CF4
	024 Move X0, 0x6FE000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3762], W8
	029 Move X0, [X19+24]
	030 Compare X0, 0
	031 JumpIfEqual {68}
	032 Move W8, [X0+24]
	033 Subtract W20, W8, 1
	034 Move X22, 0x75E000
	035 Move X23, 0x6FE000
	036 Move X24, 0x75E000
	037 Move X22, [X22+2120]
	038 Move X23, [X23+1432]
	039 Move X24, [X24+2512]
	040 Move X2, [X22]
	041 Move W1, W20
	042 Call List`1<Object>.get_Item, X0, X1
	043 Move X8, [X23]
	044 Move X21, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Move X1, X31
	052 Move X2, X31
	053 Call Object.op_Equality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {64}
	058 Move X0, [X19+24]
	059 Compare X0, 0
	060 JumpIfEqual {68}
	061 Move X2, [X24]
	062 Move W1, W20
	063 Call List`1<Object>.RemoveAt, X0, X1
	064 Subtract W20, W20, 1
	065 Move X0, [X19+24]
	066 Compare X0, 0
	067 JumpIfNotEqual {40}
	068 Call 0x1C17F20
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X30, [X31+64]
	076 Return 

Method: System.Void .ctor()

Disassembly:
	0x039F61E4 BL 0x2BC434C
	0x039F61E8 LDP X20, X19, [X31 + 0x70]
	0x039F61EC LDP X22, X21, [X31 + 0x60]
	0x039F61F0 LDP X24, X23, [X31 + 0x50]
	0x039F61F4 LDP X30, X25, [X31 + 0x40]
	0x039F61F8 ADD X31, X31, 0x80
	0x039F61FC RET
	0x039F6200 BL 0x1C16F20
	0x039F6204 BL 0x1C16F28
	0x039F6208 B 0x39F620C
	0x039F620C MOV X23, X0
	0x039F6210 CMP W1, 0x1
	0x039F6214 B.NE 0x39F6248
	0x039F6218 MOV X0, X23
	0x039F621C BL 0x3EB1AD0
	0x039F6220 LDR X22, [X0]
	0x039F6224 BL 0x3EB1AE0
	0x039F6228 ADRP X8, 0x75D000
	0x039F622C LDR X8, [X8 + 0xA50]
	0x039F6230 ADD X0, X31, 0x20
	0x039F6234 LDR X1, [X8]
	0x039F6238 BL 0x2BC434C
	0x039F623C CBZ X22, 0x39F6088
	0x039F6240 MOV X0, X22
	0x039F6244 BL 0x1C16F18
	0x039F6248 MOV X22, X31
	0x039F624C B 0x39F6254
	0x039F6250 MOV X23, X0
	0x039F6254 ADRP X8, 0x75D000
	0x039F6258 LDR X8, [X8 + 0xA50]
	0x039F625C LDR X1, [X8]
	0x039F6260 ADD X0, X31, 0x20
	0x039F6264 BL 0x2BC434C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9EC000
	007 Move X22, 0x75E000
	008 Move X20, 0x75E000
	009 Move W8, [X21+3763]
	010 Move X22, [X22+2000]
	011 Move X20, [X20+2008]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x75E000
	018 Move X0, [X0+2008]
	019 Call 0x1C17CF4
	020 Move X0, 0x75E000
	021 Move X0, [X0+2000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3763], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call List`1<Object>..ctor, X0
	030 Move W8, 1
	031 Move [X19+24], X20
	032 Move [X19+32], W8
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+48]
	040 Call ScriptableObject..ctor, X0
	041 Return 

