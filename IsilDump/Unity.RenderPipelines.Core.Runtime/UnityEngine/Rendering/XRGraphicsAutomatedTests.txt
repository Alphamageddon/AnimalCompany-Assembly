Type: UnityEngine.Rendering.XRGraphicsAutomatedTests

Method: System.Boolean get_activatedFromCommandLine()

Disassembly:
	0x039F6544 LDR X0, [X19 + 0x20]
	0x039F6548 CBZ X0, 0x39F6598

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_enabled()

Disassembly:
	0x039F654C MOV X1, X31
	0x039F6550 BL 0x3C40C8C
	0x039F6554 CBZ W0, 0x39F6588
	0x039F6558 MOV X0, X19
	0x039F655C BL 0x39F96E0
	0x039F6560 CBZ X0, 0x39F6598
	0x039F6564 LDR W8, [X0 + 0x18]
	0x039F6568 CBZ W8, 0x39F6588
	0x039F656C ADRP X9, 0x75D000
	0x039F6570 LDR X9, [X9 + 0xAA0]
	0x039F6574 LDP X20, X19, [X31 + 0x10]
	0x039F6578 SUB W1, W8, 0x1
	0x039F657C LDR X2, [X9]
	0x039F6580 LDR X30, [X31], #0x20
	0x039F6584 B 0x301BCCC
	0x039F6588 LDP X20, X19, [X31 + 0x10]
	0x039F658C MOV X0, X31
	0x039F6590 LDR X30, [X31], #0x20
	0x039F6594 RET
	0x039F6598 BL 0x1C16F20
	0x039F659C STR X30, [X31 - 0x10]!
	0x039F65A0 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x9EC000
	005 Move X19, 0x75B000
	006 Move W8, [X20+3770]
	007 Move X19, [X19+1400]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x75B000
	013 Move X0, [X0+1400]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3770], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void OverrideLayout(UnityEngine.Experimental.Rendering.XRLayout layout, UnityEngine.Camera camera)

Disassembly:
	0x039F65A4 LDR X0, [X0 + 0x60]
	0x039F65A8 CBZ X0, 0x39F65C8
	0x039F65AC LDR X9, [X0]
	0x039F65B0 LDP S2, S3, [X8 + 0x28]
	0x039F65B4 LDP S0, S1, [X8 + 0x20]
	0x039F65B8 LDR X2, [X9 + 0x2A8]
	0x039F65BC LDR X1, [X9 + 0x2B0]
	0x039F65C0 LDR X30, [X31], #0x10
	0x039F65C4 BR X2
	0x039F65C8 BL 0x1C16F20
	0x039F65CC STR X30, [X31 - 0x10]!
	0x039F65D0 LDR X0, [X0 + 0x68]
	0x039F65D4 CBZ X0, 0x39F65E8
	0x039F65D8 MOVZ W1, 0x1
	0x039F65DC MOV X2, X31
	0x039F65E0 LDR X30, [X31], #0x10
	0x039F65E4 B 0x3E47488
	0x039F65E8 BL 0x1C16F20
	0x039F65EC STR X30, [X31 - 0x10]!
	0x039F65F0 LDR X0, [X0 + 0x68]
	0x039F65F4 CBZ X0, 0x39F6608
	0x039F65F8 MOV W1, W31
	0x039F65FC MOV X2, X31
	0x039F6600 LDR X30, [X31], #0x10
	0x039F6604 B 0x3E47488
	0x039F6608 BL 0x1C16F20
	0x039F660C STR X30, [X31 - 0x10]!
	0x039F6610 LDR X0, [X0 + 0x68]
	0x039F6614 CBZ X0, 0x39F6630
	0x039F6618 LDRB W8, [X0 + 0x120]
	0x039F661C MOV X2, X31
	0x039F6620 CMP W8, 0x0
	0x039F6624 CSET W1, EQ
	0x039F6628 LDR X30, [X31], #0x10
	0x039F662C B 0x3E47488
	0x039F6630 BL 0x1C16F20
	0x039F6634 STP X30, X21, [X31 - 0x20]!
	0x039F6638 STP X20, X19, [X31 + 0x10]
	0x039F663C ADRP X20, 0x9EB000
	0x039F6640 LDRB W8, [X20 + 0xEC1]
	0x039F6644 MOV X19, X0
	0x039F6648 TBNZ X8, 0x0, 0x39F6660
	0x039F664C ADRP X0, 0x6FD000
	0x039F6650 LDR X0, [X0 + 0x598]
	0x039F6654 BL 0x1C16CF4
	0x039F6658 MOVZ W8, 0x1
	0x039F665C STRB W8, [X20 + 0xEC1]
	0x039F6660 LDR X8, [X19 + 0x68]
	0x039F6664 CBZ X8, 0x39F66F8
	0x039F6668 LDRB W8, [X8 + 0x120]
	0x039F666C CBZ W8, 0x39F66D8
	0x039F6670 ADRP X21, 0x6FD000
	0x039F6674 LDR X21, [X21 + 0x598]
	0x039F6678 LDR X20, [X19 + 0x80]
	0x039F667C LDR X0, [X21]
	0x039F6680 LDR W8, [X0 + 0xE0]
	0x039F6684 CBNZ W8, 0x39F668C
	0x039F6688 BL 0x1C16DFC
	0x039F668C MOV X0, X20
	0x039F6690 MOV X1, X31
	0x039F6694 MOV X2, X31
	0x039F6698 BL 0x3C3883C
	0x039F669C TBNZ X0, 0x0, 0x39F66D8
	0x039F66A0 LDR X0, [X19 + 0x80]
	0x039F66A4 CBZ X0, 0x39F66F8
	0x039F66A8 BL 0x39F6800
	0x039F66AC LDR X8, [X21]
	0x039F66B0 MOV X20, X0
	0x039F66B4 LDR W9, [X8 + 0xE0]
	0x039F66B8 CBNZ W9, 0x39F66C4
	0x039F66BC MOV X0, X8
	0x039F66C0 BL 0x1C16DFC
	0x039F66C4 MOV X0, X20
	0x039F66C8 MOV X1, X31
	0x039F66CC MOV X2, X31
	0x039F66D0 BL 0x3C3883C
	0x039F66D4 TBZ X0, 0x0, 0x39F66E8
	0x039F66D8 MOV X0, X19
	0x039F66DC LDP X20, X19, [X31 + 0x10]
	0x039F66E0 LDP X30, X21, [X31], #0x20
	0x039F66E4 B 0x39F66FC
	0x039F66E8 MOV X0, X20
	0x039F66EC LDP X20, X19, [X31 + 0x10]
	0x039F66F0 LDP X30, X21, [X31], #0x20
	0x039F66F4 RET
	0x039F66F8 BL 0x1C16F20
	0x039F66FC STP X30, X21, [X31 - 0x20]!
	0x039F6700 STP X20, X19, [X31 + 0x10]
	0x039F6704 ADRP X20, 0x9EB000
	0x039F6708 ADRP X21, 0x6FD000
	0x039F670C LDRB W8, [X20 + 0xF42]
	0x039F6710 LDR X21, [X21 + 0x598]
	0x039F6714 MOV X19, X0
	0x039F6718 TBNZ X8, 0x0, 0x39F6730
	0x039F671C ADRP X0, 0x6FD000
	0x039F6720 LDR X0, [X0 + 0x598]
	0x039F6724 BL 0x1C16CF4
	0x039F6728 MOVZ W8, 0x1
	0x039F672C STRB W8, [X20 + 0xF42]
	0x039F6730 LDR X0, [X21]
	0x039F6734 LDR X20, [X19 + 0x50]
	0x039F6738 LDR W8, [X0 + 0xE0]
	0x039F673C CBNZ W8, 0x39F6744
	0x039F6740 BL 0x1C16DFC
	0x039F6744 MOV X0, X20
	0x039F6748 MOV X1, X31
	0x039F674C MOV X2, X31
	0x039F6750 BL 0x3C354F8
	0x039F6754 TBZ X0, 0x0, 0x39F6760
	0x039F6758 LDR X20, [X19 + 0x50]
	0x039F675C B 0x39F67EC
	0x039F6760 LDR X20, [X19 + 0x40]!
	0x039F6764 LDR X0, [X21]
	0x039F6768 LDR W8, [X0 + 0xE0]
	0x039F676C CBNZ W8, 0x39F6774
	0x039F6770 BL 0x1C16DFC
	0x039F6774 MOV X0, X20
	0x039F6778 MOV X1, X31
	0x039F677C MOV X2, X31
	0x039F6780 BL 0x3C354F8
	0x039F6784 MOV X20, X31
	0x039F6788 TBZ X0, 0x0, 0x39F67EC
	0x039F678C LDR X0, [X21]
	0x039F6790 LDR X19, [X19]
	0x039F6794 LDR W8, [X0 + 0xE0]
	0x039F6798 CBNZ W8, 0x39F67A0
	0x039F679C BL 0x1C16DFC
	0x039F67A0 MOV X0, X19
	0x039F67A4 MOV X1, X31
	0x039F67A8 MOV X2, X31
	0x039F67AC BL 0x3C354F8
	0x039F67B0 TBZ X0, 0x0, 0x39F67E8
	0x039F67B4 CBZ X19, 0x39F67FC
	0x039F67B8 LDR X0, [X21]
	0x039F67BC LDR X20, [X19 + 0x50]
	0x039F67C0 LDR W8, [X0 + 0xE0]
	0x039F67C4 CBNZ W8, 0x39F67CC
	0x039F67C8 BL 0x1C16DFC
	0x039F67CC MOV X0, X20
	0x039F67D0 MOV X1, X31
	0x039F67D4 MOV X2, X31
	0x039F67D8 BL 0x3C354F8
	0x039F67DC ADD X19, X19, 0x40
	0x039F67E0 TBZ X0, 0x0, 0x39F678C
	0x039F67E4 B 0x39F67EC
	0x039F67E8 MOV X20, X31
	0x039F67EC MOV X0, X20
	0x039F67F0 LDP X20, X19, [X31 + 0x10]
	0x039F67F4 LDP X30, X21, [X31], #0x20
	0x039F67F8 RET
	0x039F67FC BL 0x1C16F20
	0x039F6800 STR X30, [X31 - 0x20]!
	0x039F6804 STP X20, X19, [X31 + 0x10]
	0x039F6808 ADRP X20, 0x9EB000
	0x039F680C LDRB W8, [X20 + 0xEDE]
	0x039F6810 MOV X19, X0
	0x039F6814 TBNZ X8, 0x0, 0x39F6838
	0x039F6818 ADRP X0, 0x75D000
	0x039F681C LDR X0, [X0 + 0xA98]
	0x039F6820 BL 0x1C16CF4
	0x039F6824 ADRP X0, 0x75D000
	0x039F6828 LDR X0, [X0 + 0xAA0]
	0x039F682C BL 0x1C16CF4
	0x039F6830 MOVZ W8, 0x1
	0x039F6834 STRB W8, [X20 + 0xEDE]
	0x039F6838 LDR X0, [X19 + 0x20]
	0x039F683C CBZ X0, 0x39F688C
	0x039F6840 MOV X1, X31
	0x039F6844 BL 0x3C40C8C
	0x039F6848 CBZ W0, 0x39F687C
	0x039F684C MOV X0, X19
	0x039F6850 BL 0x39F96E0
	0x039F6854 CBZ X0, 0x39F688C
	0x039F6858 LDR W8, [X0 + 0x18]
	0x039F685C CBZ W8, 0x39F687C
	0x039F6860 ADRP X8, 0x75D000
	0x039F6864 LDR X8, [X8 + 0xAA0]
	0x039F6868 LDP X20, X19, [X31 + 0x10]
	0x039F686C MOV W1, W31
	0x039F6870 LDR X2, [X8]
	0x039F6874 LDR X30, [X31], #0x20
	0x039F6878 B 0x301BCCC
	0x039F687C LDP X20, X19, [X31 + 0x10]
	0x039F6880 MOV X0, X31
	0x039F6884 LDR X30, [X31], #0x20
	0x039F6888 RET
	0x039F688C BL 0x1C16F20
	0x039F6890 ADRP X8, 0xFFFFFFFFFD0F6000
	0x039F6894 ADRP X9, 0xFFFFFFFFFD0F5000
	0x039F6898 LDR V0, [X8 + 0xEB]
	0x039F689C LDR V1, [X9 + 0x77]
	0x039F68A0 MOV X1, X31
	0x039F68A4 STP V0, V1, [X0 + 0x20]
	0x039F68A8 B 0x3C36C30
	0x039F68AC ADRP X8, 0xFFFFFFFFFD0F6000
	0x039F68B0 ADRP X9, 0xFFFFFFFFFD0F5000
	0x039F68B4 LDR V0, [X8 + 0xEB]
	0x039F68B8 LDR V1, [X9 + 0x77]
	0x039F68BC MOV X1, X31
	0x039F68C0 STP V0, V1, [X0 + 0x20]
	0x039F68C4 B 0x3C36C30
	0x039F68C8 STR X30, [X31 - 0x30]!
	0x039F68CC STP X22, X21, [X31 + 0x10]
	0x039F68D0 STP X20, X19, [X31 + 0x20]
	0x039F68D4 ADRP X22, 0x9EB000
	0x039F68D8 ADRP X21, 0x75D000
	0x039F68DC LDRB W8, [X22 + 0xEC2]
	0x039F68E0 LDR X21, [X21 + 0xAA8]
	0x039F68E4 MOV X20, X1
	0x039F68E8 MOV X19, X0
	0x039F68EC TBNZ X8, 0x0, 0x39F6904
	0x039F68F0 ADRP X0, 0x75D000
	0x039F68F4 LDR X0, [X0 + 0xAA8]
	0x039F68F8 BL 0x1C16CF4
	0x039F68FC MOVZ W8, 0x1
	0x039F6900 STRB W8, [X22 + 0xEC2]
	0x039F6904 STR X20, [X19 + 0x58]
	0x039F6908 LDR X1, [X21]
	0x039F690C MOV X0, X19
	0x039F6910 BL 0x21A8CFC
	0x039F6914 STR X0, [X19 + 0x68]
	0x039F6918 CBZ X0, 0x39F6948
	0x039F691C LDR X8, [X19 + 0x60]
	0x039F6920 CBZ X8, 0x39F6948
	0x039F6924 LDR X9, [X8]
	0x039F6928 LDR X1, [X0 + 0x28]
	0x039F692C LDP X20, X19, [X31 + 0x20]
	0x039F6930 LDP X22, X21, [X31 + 0x10]
	0x039F6934 LDR X3, [X9 + 0x5E8]
	0x039F6938 LDR X2, [X9 + 0x5F0]
	0x039F693C MOV X0, X8
	0x039F6940 LDR X30, [X31], #0x30
	0x039F6944 BR X3
	0x039F6948 BL 0x1C16F20
	0x039F694C STR X30, [X31 - 0x10]!
	0x039F6950 MOV X8, X0
	0x039F6954 LDR X0, [X0 + 0x60]
	0x039F6958 CBZ X0, 0x39F6980
	0x039F695C LDR X9, [X0]
	0x039F6960 LDP S2, S3, [X8 + 0x38]
	0x039F6964 LDP S0, S1, [X8 + 0x30]
	0x039F6968 LDR X8, [X9 + 0x2A8]
	0x039F696C LDR X1, [X9 + 0x2B0]
	0x039F6970 BLR X8
	0x039F6974 MOVZ W0, 0x1
	0x039F6978 LDR X30, [X31], #0x10
	0x039F697C RET
	0x039F6980 BL 0x1C16F20
	0x039F6984 STR X30, [X31 - 0x10]!
	0x039F6988 MOV X8, X0
	0x039F698C LDR X0, [X0 + 0x60]
	0x039F6990 CBZ X0, 0x39F69B0
	0x039F6994 LDR X9, [X0]
	0x039F6998 LDP S2, S3, [X8 + 0x28]
	0x039F699C LDP S0, S1, [X8 + 0x20]
	0x039F69A0 LDR X2, [X9 + 0x2A8]
	0x039F69A4 LDR X1, [X9 + 0x2B0]
	0x039F69A8 LDR X30, [X31], #0x10
	0x039F69AC BR X2
	0x039F69B0 BL 0x1C16F20
	0x039F69B4 STR X30, [X31 - 0x10]!
	0x039F69B8 LDR X8, [X0 + 0x68]
	0x039F69BC CBZ X8, 0x39F69E4
	0x039F69C0 LDR X8, [X8 + 0x48]
	0x039F69C4 CBZ X8, 0x39F69DC
	0x039F69C8 LDR X2, [X8 + 0x18]
	0x039F69CC LDR X0, [X8 + 0x40]
	0x039F69D0 LDR X1, [X8 + 0x28]
	0x039F69D4 LDR X30, [X31], #0x10
	0x039F69D8 BR X2
	0x039F69DC LDR X30, [X31], #0x10
	0x039F69E0 RET
	0x039F69E4 BL 0x1C16F20
	0x039F69E8 ADRP X8, 0xFFFFFFFFFD0F6000
	0x039F69EC ADRP X9, 0xFFFFFFFFFD0F5000
	0x039F69F0 LDR V0, [X8 + 0xEB]
	0x039F69F4 LDR V1, [X9 + 0x77]
	0x039F69F8 MOV X1, X31
	0x039F69FC STP V0, V1, [X0 + 0x20]
	0x039F6A00 B 0x3C36C30
	0x039F6A04 MOV X1, X31
	0x039F6A08 B 0x33BDD8C
	0x039F6A0C STP X30, X21, [X31 - 0x20]!
	0x039F6A10 STP X20, X19, [X31 + 0x10]
	0x039F6A14 ADRP X20, 0x9EB000
	0x039F6A18 LDRB W8, [X20 + 0xEC3]
	0x039F6A1C MOV X19, X0
	0x039F6A20 TBNZ X8, 0x0, 0x39F6A80
	0x039F6A24 ADRP X0, 0x75A000
	0x039F6A28 LDR X0, [X0 + 0x778]
	0x039F6A2C BL 0x1C16CF4
	0x039F6A30 ADRP X0, 0x75D000
	0x039F6A34 LDR X0, [X0 + 0xAB0]
	0x039F6A38 BL 0x1C16CF4
	0x039F6A3C ADRP X0, 0x75D000
	0x039F6A40 LDR X0, [X0 + 0xAB8]
	0x039F6A44 BL 0x1C16CF4
	0x039F6A48 ADRP X0, 0x75D000
	0x039F6A4C LDR X0, [X0 + 0xAC0]
	0x039F6A50 BL 0x1C16CF4
	0x039F6A54 ADRP X0, 0x75D000
	0x039F6A58 LDR X0, [X0 + 0xAC8]
	0x039F6A5C BL 0x1C16CF4
	0x039F6A60 ADRP X0, 0x75D000

ISIL:
	001 Move [X31-128], D13
	002 Move [X31-120], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X29
	008 Move [X31+64], X30
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Subtract X31, X31, 4096
	017 Subtract X31, X31, 192
	018 NotImplemented "Instruction MRS not yet implemented."
	019 Move X8, [X23+40]
	020 Move X22, 0x9EC000
	021 Move X21, 0x75B000
	022 Move X20, X1
	023 Move [X31+4280], X8
	024 Move W8, [X22+3771]
	025 Move X21, [X21+1400]
	026 Move X19, X0
	027 Add X24, X31, 192
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {46}
	032 Move X0, 0x75B000
	033 Move X0, [X0+1328]
	034 Call 0x1C17CF4
	035 Move X0, 0x75B000
	036 Move X0, [X0+1336]
	037 Call 0x1C17CF4
	038 Move X0, 0x75B000
	039 Move X0, [X0+1664]
	040 Call 0x1C17CF4
	041 Move X0, 0x75B000
	042 Move X0, [X0+1400]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X22+3771], W8
	046 NotImplemented "Instruction MOVI not yet implemented."
	047 Add X0, X31, 2696
	048 Move W2, 1584
	049 Move W1, W31
	050 Move [X24+880], V0
	051 Move [X24+888], V0
	052 Move [X24+848], V0
	053 Move [X24+856], V0
	054 Move [X24+816], V0
	055 Move [X24+824], V0
	056 Move [X24+784], V0
	057 Move [X24+792], V0
	058 Call 0x3EB2B10
	059 NotImplemented "Instruction MOVI not yet implemented."
	060 Add X0, X31, 680
	061 Move W2, 168
	062 Move W1, W31
	063 Move [X24+752], V0
	064 Move [X24+760], V0
	065 Move [X24+720], V0
	066 Move [X24+728], V0
	067 Move [X24+688], V0
	068 Move [X24+696], V0
	069 Move [X24+656], V0
	070 Move [X24+664], V0
	071 Call 0x3EB2B10
	072 Move X0, [X21]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X22, 0x9EC000
	078 Move W8, [X22+2877]
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x75B000
	082 Move X0, [X0+1400]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X22+2877], W8
	086 Move X0, [X21]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {92}
	090 Call 0x1C17DFC
	091 Move X0, [X21]
	092 Move X8, [X0+184]
	093 Move W9, [X8]
	094 Compare W9, 0
	095 JumpIfEqual {376}
	096 Move W9, [X0+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {102}
	099 Call 0x1C17DFC
	100 Move X8, [X21]
	101 Move X8, [X8+184]
	102 Move W8, [X8+1]
	103 Compare W8, 0
	104 JumpIfEqual {376}
	105 Compare X20, 0
	106 JumpIfEqual {397}
	107 Add X8, X31, 608
	108 Move X0, X20
	109 Move X1, X31
	110 Call Camera.get_projectionMatrix, X0
	111 Move V0, [X24+416]
	112 Move V1, [X24+432]
	113 Move V2, [X24+448]
	114 Move V3, [X24+464]
	115 Add X8, X31, 608
	116 Move X0, X20
	117 Move X1, X31
	118 Move [X24+848], V0
	119 Move [X24+856], V1
	120 Move [X24+880], V2
	121 Move [X24+888], V3
	122 Call Camera.get_worldToCameraMatrix, X0
	123 Move V0, [X24+416]
	124 Move V1, [X24+432]
	125 Move V2, [X24+448]
	126 Move V3, [X24+464]
	127 Add X2, X31, 2696
	128 Move X0, X20
	129 Move W1, W31
	130 Move X3, X31
	131 Move [X24+784], V0
	132 Move [X24+792], V1
	133 Move [X24+816], V2
	134 Move [X24+824], V3
	135 Call Camera.TryGetCullingParameters, X0, X1, X2
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {376}
	140 Move X8, 0x75B000
	141 Move V0, [X24+848]
	142 Move V1, [X24+864]
	143 Move V2, [X24+880]
	144 Move V3, [X24+896]
	145 Move X8, [X8+1664]
	146 Move [X24+416], V0
	147 Move [X24+424], V1
	148 Move [X24+448], V2
	149 Move [X24+456], V3
	150 Move X0, [X8]
	151 Move W8, [X0+224]
	152 Compare W8, 0
	153 JumpIfNotEqual {155}
	154 Call 0x1C17DFC
	155 Move V0, [X24+416]
	156 Move V1, [X24+432]
	157 Move V2, [X24+448]
	158 Move V3, [X24+464]
	159 Add X0, X31, 2696
	160 Add X1, X31, 544
	161 Move X2, X31
	162 Move [X24+352], V0
	163 Move [X24+360], V1
	164 Move [X24+384], V2
	165 Move [X24+392], V3
	166 Call ScriptableCullingParameters.set_stereoProjectionMatrix, X0, X1
	167 Move V0, [X24+784]
	168 Move V1, [X24+800]
	169 Move V2, [X24+816]
	170 Move V3, [X24+832]
	171 Add X0, X31, 2696
	172 Add X1, X31, 480
	173 Move X2, X31
	174 Move [X24+288], V0
	175 Move [X24+296], V1
	176 Move [X24+320], V2
	177 Move [X24+328], V3
	178 Call ScriptableCullingParameters.set_stereoViewMatrix, X0, X1
	179 Add X0, X31, 2696
	180 Move S0, W31
	181 Move X1, X31
	182 Call ScriptableCullingParameters.set_stereoSeparationDistance, X0, V0
	183 Compare X19, 0
	184 JumpIfEqual {397}
	185 Move X19, [X19+16]
	186 Compare X19, 0
	187 JumpIfEqual {397}
	188 Move W8, [X19+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X8, -49319936
	191 Move V0, [X8+79]
	192 Move X9, -49332224
	193 Move X10, -49328128
	194 Move X25, 0x75B000
	195 Move [X31], V0
	196 Move V8, [X9+3928]
	197 Move V9, [X10+808]
	198 Move X25, [X25+1336]
	199 Move W20, W31
	200 Move X2, [X25]
	201 Move X0, X19
	202 Move W1, W20
	203 Call List`1<ValueTuple`2<Object, Object>>.get_Item, X0, X1
	204 Compare X1, 0
	205 JumpIfEqual {397}
	206 Move W22, [X1+40]
	207 Move X21, X1
	208 Add X0, X31, 1112
	209 Add X1, X31, 2696
	210 Move W2, 1584
	211 Call 0x3EB2AC0
	212 Add X2, X31, 1112
	213 Move X0, X21
	214 Move W1, W22
	215 Move X3, X31
	216 Call XRPass.AssignCullingParams, X0, X1, X2
	217 Move X0, X21
	218 Move X1, X31
	219 Call XRPass.get_viewCount, X0
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move W22, W31
	222 Move V1, [X24+880]
	223 Move V0, [X24+896]
	224 Move V3, [X24+848]
	225 Move V2, [X24+864]
	226 NotImplemented "Instruction CMP not yet implemented."
	227 NotImplemented "Instruction CSET not yet implemented."
	228 Move [X24+752], V1
	229 Move [X24+760], V0
	230 Move V0, [X24+784]
	231 Move V1, [X24+800]
	232 Move [X24+720], V3
	233 Move [X24+728], V2
	234 Move V2, [X24+816]
	235 Move V3, [X24+832]
	236 Move [X24+656], V0
	237 Move [X24+664], V1
	238 Move [X24+688], V2
	239 Move [X24+696], V3
	240 Move W8, [X19+24]
	241 NotImplemented "Instruction CMP not yet implemented."
	242 NotImplemented "Instruction CSET not yet implemented."
	243 NotImplemented "Instruction CMP not yet implemented."
	244 NotImplemented "Instruction CSET not yet implemented."
	245 NotImplemented "Instruction CMP not yet implemented."
	246 And W10, W9, W10
	247 NotImplemented "Instruction CSET not yet implemented."
	248 Move TEMP, X10
	249 And TEMP, TEMP, 1
	250 Compare TEMP, 1
	251 JumpIfEqual {255}
	252 And W8, W9, W8
	253 Compare W8, 0
	254 JumpIfEqual {312}
	255 Add X8, X31, 608
	256 Add X0, X31, 912
	257 Move X1, X31
	258 Call Matrix4x4.get_decomposeProjection, X0
	259 Move V0, [X24+26]
	260 Move V1, [X31]
	261 Move X8, [X31+624]
	262 Add X0, X31, 448
	263 Move X1, X31
	264 NotImplemented "Instruction INVALID not yet implemented."
	265 Move [X24+16], V0
	266 Move [X31+464], X8
	267 Add X8, X31, 608
	268 Call Matrix4x4.Frustum, X0
	269 Move V0, [X24+416]
	270 Move V1, [X24+432]
	271 Move V2, [X24+448]
	272 Move V3, [X24+464]
	273 Add X8, X31, 608
	274 Move X0, X31
	275 Move [X24+720], V0
	276 Move [X24+728], V1
	277 Move [X24+752], V2
	278 Move [X24+760], V3
	279 Move S1, 0.25
	280 Move V0, V8
	281 Move V2, V9
	282 Call Matrix4x4.Translate, X0
	283 Move V0, [X24+416]
	284 Move V1, [X24+432]
	285 Move V2, [X24+448]
	286 Move V3, [X24+464]
	287 Add X8, X31, 608
	288 Add X0, X31, 384
	289 Move [X24+128], V0
	290 Move [X24+136], V1
	291 Move V0, [X24+656]
	292 Move V1, [X24+672]
	293 Move [X24+160], V2
	294 Move [X24+168], V3
	295 Move V2, [X24+688]
	296 Move V3, [X24+704]
	297 Add X1, X31, 320
	298 Move X2, X31
	299 Move [X24+192], V0
	300 Move [X24+200], V1
	301 Move [X24+224], V2
	302 Move [X24+232], V3
	303 Call Matrix4x4.op_Multiply, X0, X1
	304 Move V0, [X24+416]
	305 Move V1, [X24+432]
	306 Move V2, [X24+448]
	307 Move V3, [X24+464]
	308 Move [X24+656], V0
	309 Move [X24+664], V1
	310 Move [X24+688], V2
	311 Move [X24+696], V3
	312 Move V0, [X24+720]
	313 Move V1, [X24+736]
	314 Move V2, [X24+752]
	315 Move V3, [X24+768]
	316 Move X0, X21
	317 Move W1, W22
	318 Move X2, X31
	319 Move [X24+416], V0
	320 Move [X24+424], V1
	321 Move [X24+448], V2
	322 Move [X24+456], V3
	323 Call XRPass.GetViewport, X0, X1
	324 Move X0, X21
	325 Move W1, W22
	326 Move X2, X31
	327 Move V10, V0
	328 Move V11, V1
	329 Move V12, V2
	330 Move V13, V3
	331 Call XRPass.GetTextureArraySlice, X0, X1
	332 Move V0, [X24+416]
	333 Move V1, [X24+432]
	334 Move V2, [X24+448]
	335 Move V3, [X24+464]
	336 Move W4, W0
	337 Add X0, X31, 680
	338 Move [X24+64], V0
	339 Move [X24+72], V1
	340 Move V0, [X24+656]
	341 Move V1, [X24+672]
	342 Move [X24+96], V2
	343 Move [X24+104], V3
	344 Move V2, [X24+688]
	345 Move V3, [X24+704]
	346 Add X1, X31, 256
	347 Move [X24], V0
	348 Move [X24+8], V1
	349 Add X2, X31, 192
	350 Move [X24+32], V2
	351 Move [X24+40], V3
	352 Move V0, V10
	353 Move V1, V11
	354 Move V2, V12
	355 Move V3, V13
	356 Move X3, X31
	357 Move X5, X31
	358 Call XRView..ctor, X0, X1, X2, X3, X4, X5
	359 Add X0, X31, 24
	360 Add X1, X31, 680
	361 Move W2, 168
	362 Call 0x3EB2AC0
	363 Add X2, X31, 24
	364 Move X0, X21
	365 Move W1, W22
	366 Move X3, X31
	367 Call XRPass.AssignView, X0, X1, X2
	368 Move X0, X21
	369 Move X1, X31
	370 Add W22, W22, 1
	371 Call XRPass.get_viewCount, X0
	372 NotImplemented "Instruction CMP not yet implemented."
	373 Move W8, [X19+24]
	374 Add W20, W20, 1
	375 NotImplemented "Instruction CMP not yet implemented."
	376 Move X8, [X23+40]
	377 Move X9, [X31+4280]
	378 NotImplemented "Instruction CMP not yet implemented."
	379 Add X31, X31, 4096
	380 Add X31, X31, 192
	381 Move X20, [X31+112]
	382 Move X19, [X31+120]
	383 Move X22, [X31+96]
	384 Move X21, [X31+104]
	385 Move X24, [X31+80]
	386 Move X23, [X31+88]
	387 Move X30, [X31+64]
	388 Move X25, [X31+72]
	389 Move X29, [X31+48]
	390 Move D9, [X31+32]
	391 Move D8, [X31+40]
	392 Move D11, [X31+16]
	393 Move D10, [X31+24]
	394 Move D13, [X31+128]
	395 Move D12, [X31+136]
	396 Return 
	397 Call 0x1C17F20
	398 Call 0x3EB2B20

Method: System.Void .cctor()

Disassembly:
	0x039F6A64 LDR X0, [X0 + 0xAD0]
	0x039F6A68 BL 0x1C16CF4
	0x039F6A6C ADRP X0, 0x75D000
	0x039F6A70 LDR X0, [X0 + 0xAD8]
	0x039F6A74 BL 0x1C16CF4
	0x039F6A78 MOVZ W8, 0x1
	0x039F6A7C STRB W8, [X20 + 0xEC3]
	0x039F6A80 LDR X8, [X19 + 0x38]
	0x039F6A84 CBNZ X8, 0x39F6AB0
	0x039F6A88 ADRP X8, 0x75D000
	0x039F6A8C LDR X8, [X8 + 0xAD8]
	0x039F6A90 LDR X0, [X8]
	0x039F6A94 BL 0x1C16F10
	0x039F6A98 ADRP X8, 0x75D000
	0x039F6A9C LDR X8, [X8 + 0xAC8]
	0x039F6AA0 MOV X20, X0
	0x039F6AA4 LDR X1, [X8]
	0x039F6AA8 BL 0x301B7C4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x9EC000
	005 Move X20, 0x75B000
	006 Move W8, [X19+3772]
	007 Move X20, [X20+1400]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x75B000
	013 Move X0, [X0+1400]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3772], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 NotImplemented "Instruction STRH not yet implemented."
	022 Move X30, [X31+32]
	023 Return 

