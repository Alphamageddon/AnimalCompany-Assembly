Type: UnityEngine.Rendering.DynamicResolutionHandler

Method: System.Void Reset()

Disassembly:
	0x0399FA78 CBNZ W9, 0x399FA88
	0x0399FA7C BL 0x1C16DFC
	0x0399FA80 LDR X8, [X22]
	0x0399FA84 LDR X8, [X8 + 0xB8]
	0x0399FA88 LDR X9, [X8 + 0x8]
	0x0399FA8C CBZ X9, 0x399FC54
	0x0399FA90 LDRSW X8, [X8]
	0x0399FA94 LDR W10, [X9 + 0x18]
	0x0399FA98 CMP W8, W10
	0x0399FA9C B.CS 0x399FC58
	0x0399FAA0 ADD X10, X9, X8, 0x4, LSL
	0x0399FAA4 LDR W11, [X10 + 0x20]
	0x0399FAA8 CBZ W11, 0x399FB24
	0x0399FAAC CMP W11, 0x1
	0x0399FAB0 B.NE 0x399FB68

ISIL:
	001 Move V0, 0
	002 Move W8, 0x3F800000
	003 Move W9, 256
	004 Move W10, 0xBF800000
	005 Move W11, 1
	006 NotImplemented "Instruction STRH not yet implemented."
	007 NotImplemented "Instruction STRH not yet implemented."
	008 Move [X0+52], X31
	009 Move [X0+20], D0
	010 Move [X0+28], W8
	011 NotImplemented "Instruction STRH not yet implemented."
	012 Move [X0+36], W10
	013 Move [X0+44], D0
	014 Move [X0+68], W11
	015 Return 

Method: UnityEngine.Rendering.DynamicResUpscaleFilter get_filter()

Disassembly:
	0x0399FAB4 ADD X8, X9, X8, 0x4, LSL
	0x0399FAB8 LDR X8, [X8 + 0x28]

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: System.Void set_filter(UnityEngine.Rendering.DynamicResUpscaleFilter value)

Disassembly:
	0x0399FABC CBZ X8, 0x399FC54
	0x0399FAC0 LDR X9, [X8 + 0x18]

ISIL:
	001 Move [X0+68], W1
	002 Return 

Method: UnityEngine.Vector2Int get_finalViewport()

Disassembly:
	0x0399FAC4 LDR X0, [X8 + 0x40]
	0x0399FAC8 LDR X1, [X8 + 0x28]

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_finalViewport(UnityEngine.Vector2Int value)

Disassembly:
	0x0399FACC BLR X9
	0x0399FAD0 LDP S2, S3, [X19 + 0x14]

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.Void set_runUpscalerFilterOnFullResolution(System.Boolean value)

Disassembly:
	0x0399FAD4 FMOV S1, 1
	0x0399FAD8 FCMP S0, 0x0
	0x0399FADC FMIN S0, S0, S1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+41], W8
	003 Return 

Method: System.Boolean get_runUpscalerFilterOnFullResolution()

Disassembly:
	0x0399FAE0 FMOV S1, W31
	0x0399FAE4 FCSEL S0, S0, S1, PL
	0x0399FAE8 FMAX S0, S0, S1
	0x0399FAEC FSUB S1, S3, S2
	0x0399FAF0 FMUL S0, S1, S0
	0x0399FAF4 FADD S0, S2, S0
	0x0399FAF8 B 0x399FB64
	0x0399FAFC MOV X0, X19

ISIL:
	001 Move W8, [X0+41]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, 1
	005 Return X0
	006 Move W8, [X0+68]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Return X0

Method: System.Boolean FlushScalableBufferManagerState()

Disassembly:
	0x0399FB00 BL 0x399EB00
	0x0399FB04 LDR X0, [X22]
	0x0399FB08 LDR W8, [X0 + 0xE0]
	0x0399FB0C CBNZ W8, 0x399FB18
	0x0399FB10 BL 0x1C16DFC
	0x0399FB14 LDR X0, [X22]
	0x0399FB18 LDR X8, [X0 + 0xB8]
	0x0399FB1C STRB W31, [X8 + 0x38]
	0x0399FB20 B 0x399FC3C
	0x0399FB24 LDR X8, [X10 + 0x28]
	0x0399FB28 CBZ X8, 0x399FC54
	0x0399FB2C LDR X9, [X8 + 0x18]
	0x0399FB30 LDR X0, [X8 + 0x40]
	0x0399FB34 LDR X1, [X8 + 0x28]
	0x0399FB38 BLR X9
	0x0399FB3C LDP S2, S3, [X19 + 0x14]
	0x0399FB40 FMOV S1, 5
	0x0399FB44 MOVZ W8, 0x42C80000
	0x0399FB48 FMAXNM S0, S0, S1
	0x0399FB4C FMOV S1, W8
	0x0399FB50 FDIV S0, S0, S1
	0x0399FB54 FCMP S0, S3
	0x0399FB58 FCSEL S1, S3, S0, GT
	0x0399FB5C FCMP S0, S2
	0x0399FB60 FCSEL S0, S1, S2, PL
	0x0399FB64 STR S0, [X19 + 0x1C]
	0x0399FB68 LDR V0, [X19 + 0x1C]
	0x0399FB6C LDR V1, [X19 + 0x24]
	0x0399FB70 LDRB W9, [X19 + 0x28]
	0x0399FB74 MOV W21, W31
	0x0399FB78 STR S0, [X19 + 0x24]
	0x0399FB7C FCMP S0, S1
	0x0399FB80 CSET W8, NE
	0x0399FB84 CMP W9, 0x0
	0x0399FB88 CSEL W24, W8, W31, EQ
	0x0399FB8C CBNZ W9, 0x399FBE8
	0x0399FB90 LDRB W9, [X19 + 0x50]
	0x0399FB94 CMP W9, 0x1
	0x0399FB98 CSEL W23, W24, W31, EQ
	0x0399FB9C B.NE 0x399FBE8
	0x0399FBA0 MOV X0, X19
	0x0399FBA4 BL 0x399EB00
	0x0399FBA8 MOV W21, W0
	0x0399FBAC MOV X0, X31
	0x0399FBB0 BL 0x3C104AC
	0x0399FBB4 LDR V1, [X19 + 0x2C]
	0x0399FBB8 FCMP S0, S1
	0x0399FBBC B.NE 0x399FBDC
	0x0399FBC0 MOV X0, X31
	0x0399FBC4 BL 0x3C104D4
	0x0399FBC8 LDR V1, [X19 + 0x30]
	0x0399FBCC MOV W8, W23
	0x0399FBD0 FCMP S0, S1
	0x0399FBD4 B.EQ 0x399FBE8
	0x0399FBD8 B 0x399FBE0
	0x0399FBDC MOV W23, W24
	0x0399FBE0 MOVZ W21, 0x1
	0x0399FBE4 MOV W8, W23
	0x0399FBE8 CBZ X20, 0x399FC08
	0x0399FBEC AND W9, W21, 0x1
	0x0399FBF0 ORR W8, W8, W9, 0x0
	0x0399FBF4 CBZ W8, 0x399FC08
	0x0399FBF8 LDR X8, [X20 + 0x18]
	0x0399FBFC LDR X0, [X20 + 0x40]
	0x0399FC00 LDR X1, [X20 + 0x28]
	0x0399FC04 BLR X8
	0x0399FC08 LDR X0, [X22]
	0x0399FC0C LDR W8, [X0 + 0xE0]
	0x0399FC10 CBNZ W8, 0x399FC1C
	0x0399FC14 BL 0x1C16DFC
	0x0399FC18 LDR X0, [X22]
	0x0399FC1C LDR X8, [X0 + 0xB8]
	0x0399FC20 MOV X0, X31
	0x0399FC24 STRB W31, [X8 + 0x38]
	0x0399FC28 BL 0x3C104AC
	0x0399FC2C MOV X0, X31
	0x0399FC30 STR S0, [X19 + 0x2C]
	0x0399FC34 BL 0x3C104D4
	0x0399FC38 STR S0, [X19 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA43000
	006 Move X20, 0x7B3000
	007 Move W8, [X21+2923]
	008 Move X20, [X20+728]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7B3000
	015 Move X0, [X0+728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2923], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W9, [X19+40]
	027 Move W10, [X8+64]
	028 Compare W9, 0
	029 JumpIfEqual {74}
	030 Move W11, W31
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W9, [X0+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {38}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move X8, [X0+184]
	038 Move V0, [X8+60]
	039 Move V1, [X19+28]
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move W9, [X19+40]
	042 Compare W9, 0
	043 JumpIfEqual {83}
	044 Move W21, W31
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move S0, 1
	052 Move [X8+64], W21
	053 Move V1, [X19+28]
	054 Move [X8+60], S1
	055 Compare W21, 0
	056 JumpIfEqual {65}
	057 Move W8, [X0+224]
	058 Move V0, V1
	059 Compare W8, 0
	060 JumpIfNotEqual {65}
	061 Call 0x1C17DFC
	062 Move X8, [X20]
	063 Move X8, [X8+184]
	064 Move V0, [X8+60]
	065 Move V1, V0
	066 Move X0, X31
	067 Call ScalableBufferManager.ResizeBuffers, V0, V1
	068 Move W0, 1
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return X0
	074 Move W11, [X19+33]
	075 Compare W11, 0
	076 JumpIfEqual {31}
	077 Move W11, [X19+16]
	078 Compare W11, 0
	079 JumpIfEqual {31}
	080 Move W11, [X19+80]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSET not yet implemented."
	083 Move W8, [X19+33]
	084 Compare W8, 0
	085 JumpIfEqual {44}
	086 Move W8, [X19+16]
	087 Compare W8, 0
	088 JumpIfEqual {44}
	089 Move W8, [X19+80]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CSET not yet implemented."
	092 Move W0, W31

Method: UnityEngine.Rendering.DynamicResolutionHandler GetOrCreateDrsInstanceHandler(UnityEngine.Camera camera)

Disassembly:
	0x0399FC6C LDR V0, [X0 + 0x1C]
	0x0399FC70 FMOV S1, 1
	0x0399FC74 FCMP S0, S1
	0x0399FC78 B.NE 0x399FC90
	0x0399FC7C LDRB W8, [X0 + 0x29]
	0x0399FC80 CBNZ W8, 0x399FC90
	0x0399FC84 LDRB W8, [X0 + 0x44]
	0x0399FC88 CMP W8, 0x4
	0x0399FC8C B.NE 0x399FCA0
	0x0399FC90 LDRB W8, [X0 + 0x28]
	0x0399FC94 CBZ W8, 0x399FCA8
	0x0399FC98 MOVZ W0, 0x1
	0x0399FC9C RET
	0x0399FCA0 MOV W0, W31
	0x0399FCA4 RET
	0x0399FCA8 LDRB W8, [X0 + 0x50]
	0x0399FCAC CMP W8, 0x0
	0x0399FCB0 CSET W0, EQ
	0x0399FCB4 RET
	0x0399FCB8 LDRB W8, [X0 + 0x28]
	0x0399FCBC CBZ W8, 0x399FCC8
	0x0399FCC0 MOV W0, W31
	0x0399FCC4 RET
	0x0399FCC8 LDRB W8, [X0 + 0x50]
	0x0399FCCC CMP W8, 0x1
	0x0399FCD0 CSET W0, EQ
	0x0399FCD4 RET
	0x0399FCD8 LDRB W8, [X0 + 0x21]
	0x0399FCDC CBZ W8, 0x399FD08
	0x0399FCE0 LDRB W8, [X0 + 0x10]
	0x0399FCE4 CBZ W8, 0x399FD08
	0x0399FCE8 LDR V0, [X0 + 0x1C]
	0x0399FCEC FMOV S1, 1
	0x0399FCF0 FCMP S0, S1
	0x0399FCF4 B.NE 0x399FD00
	0x0399FCF8 LDRB W8, [X0 + 0x29]
	0x0399FCFC CBZ W8, 0x399FD10
	0x0399FD00 MOVZ W0, 0x1
	0x0399FD04 RET
	0x0399FD08 MOV W0, W31
	0x0399FD0C RET
	0x0399FD10 LDRB W8, [X0 + 0x44]
	0x0399FD14 CMP W8, 0x4
	0x0399FD18 CSET W0, EQ
	0x0399FD1C RET
	0x0399FD20 MOVZ W8, 0x1
	0x0399FD24 STRB W8, [X0 + 0x28]
	0x0399FD28 RET
	0x0399FD2C STR X30, [X31 - 0x20]!
	0x0399FD30 STP X20, X19, [X31 + 0x10]
	0x0399FD34 LDRB W8, [X0 + 0x10]
	0x0399FD38 MOV X19, X1
	0x0399FD3C STUR X1, [X0 + 0x3C]
	0x0399FD40 CBZ W8, 0x399FD6C
	0x0399FD44 LDRB W8, [X0 + 0x21]
	0x0399FD48 MOV X20, X0
	0x0399FD4C CBZ W8, 0x399FD6C
	0x0399FD50 MOV X0, X20
	0x0399FD54 BL 0x399F3D0
	0x0399FD58 MOV X0, X20
	0x0399FD5C MOV X1, X19
	0x0399FD60 BL 0x399FDA4
	0x0399FD64 MOV X19, X0
	0x0399FD68 STUR X0, [X20 + 0x34]
	0x0399FD6C MOV X0, X19
	0x0399FD70 LDP X20, X19, [X31 + 0x10]
	0x0399FD74 LDR X30, [X31], #0x20
	0x0399FD78 RET
	0x0399FD7C STR X30, [X31 - 0x20]!
	0x0399FD80 STP X20, X19, [X31 + 0x10]
	0x0399FD84 MOV X19, X1
	0x0399FD88 MOV X20, X0
	0x0399FD8C BL 0x399F3D0
	0x0399FD90 MOV X0, X20
	0x0399FD94 MOV X1, X19
	0x0399FD98 LDP X20, X19, [X31 + 0x10]
	0x0399FD9C LDR X30, [X31], #0x20
	0x0399FDA0 B 0x399FDA4
	0x0399FDA4 STR D10, [X31 - 0x50]!
	0x0399FDA8 STP D9, D8, [X31 + 0x8]
	0x0399FDAC STR X30, [X31 + 0x18]
	0x0399FDB0 STP X24, X23, [X31 + 0x20]
	0x0399FDB4 STP X22, X21, [X31 + 0x30]
	0x0399FDB8 STP X20, X19, [X31 + 0x40]
	0x0399FDBC ADRP X20, 0xA42000
	0x0399FDC0 LDRB W8, [X20 + 0xB77]
	0x0399FDC4 MOV V8.16B, V1.16B
	0x0399FDC8 MOV V9.16B, V0.16B
	0x0399FDCC MOV X19, X1
	0x0399FDD0 MOV X21, X0
	0x0399FDD4 TBNZ X8, 0x0, 0x399FDEC
	0x0399FDD8 ADRP X0, 0x754000
	0x0399FDDC LDR X0, [X0 + 0x5A8]
	0x0399FDE0 BL 0x1C16CF4
	0x0399FDE4 MOVZ W8, 0x1
	0x0399FDE8 STRB W8, [X20 + 0xB77]
	0x0399FDEC ADRP X23, 0xA39000
	0x0399FDF0 ADRP X24, 0x754000
	0x0399FDF4 LDRB W8, [X23 + 0xABE]
	0x0399FDF8 LDR X24, [X24 + 0x5A8]
	0x0399FDFC UBFM X20, X19, 0x20, 0x3F
	0x0399FE00 SCVTF S10, W19
	0x0399FE04 CBNZ W8, 0x399FE1C
	0x0399FE08 ADRP X0, 0x754000
	0x0399FE0C LDR X0, [X0 + 0x5A8]
	0x0399FE10 BL 0x1C16CF4
	0x0399FE14 MOVZ W8, 0x1
	0x0399FE18 STRB W8, [X23 + 0xABE]
	0x0399FE1C LDR X0, [X24]
	0x0399FE20 FMUL S9, S9, S10
	0x0399FE24 LDR W8, [X0 + 0xE0]
	0x0399FE28 CBZ W8, 0x399FE34
	0x0399FE2C MOV W8, W31
	0x0399FE30 B 0x399FE44
	0x0399FE34 BL 0x1C16DFC
	0x0399FE38 LDRB W8, [X23 + 0xABE]
	0x0399FE3C CMP W8, 0x0
	0x0399FE40 CSET W8, EQ
	0x0399FE44 MOVZ W10, 0x7F800000
	0x0399FE48 FRINTP S0, S9
	0x0399FE4C FMOV S1, W10
	0x0399FE50 FCVTPS W9, S9
	0x0399FE54 MOVZ W11, 0x80000000
	0x0399FE58 FCMP S0, S1
	0x0399FE5C CSEL W22, W11, W9, EQ
	0x0399FE60 SCVTF S9, W20
	0x0399FE64 CBZ W8, 0x399FE7C
	0x0399FE68 ADRP X0, 0x754000
	0x0399FE6C LDR X0, [X0 + 0x5A8]
	0x0399FE70 BL 0x1C16CF4
	0x0399FE74 MOVZ W8, 0x1
	0x0399FE78 STRB W8, [X23 + 0xABE]
	0x0399FE7C LDR X0, [X24]
	0x0399FE80 FMUL S8, S8, S9
	0x0399FE84 LDR W8, [X0 + 0xE0]
	0x0399FE88 CBNZ W8, 0x399FE90
	0x0399FE8C BL 0x1C16DFC
	0x0399FE90 MOVZ W8, 0x7F800000
	0x0399FE94 LDRB W9, [X21 + 0x28]
	0x0399FE98 FRINTP S0, S8
	0x0399FE9C FMOV S1, W8
	0x0399FEA0 FCVTPS W10, S8
	0x0399FEA4 FCMP S0, S1
	0x0399FEA8 MOVZ W8, 0x80000000
	0x0399FEAC CSEL W23, W8, W10, EQ
	0x0399FEB0 CBNZ W9, 0x399FEC0
	0x0399FEB4 LDRB W8, [X21 + 0x50]
	0x0399FEB8 CMP W8, 0x1
	0x0399FEBC B.EQ 0x399FED0
	0x0399FEC0 AND W8, W22, 0x1
	0x0399FEC4 AND W9, W23, 0x1
	0x0399FEC8 ADD W22, W8, W22
	0x0399FECC ADD W23, W9, W23
	0x0399FED0 LDR X0, [X24]
	0x0399FED4 LDR W8, [X0 + 0xE0]
	0x0399FED8 CBNZ W8, 0x399FEE0
	0x0399FEDC BL 0x1C16DFC
	0x0399FEE0 MOV W0, W22
	0x0399FEE4 MOV W1, W19
	0x0399FEE8 MOV X2, X31
	0x0399FEEC BL 0x337EE94
	0x0399FEF0 MOV W19, W0
	0x0399FEF4 MOV W0, W23
	0x0399FEF8 MOV W1, W20
	0x0399FEFC MOV X2, X31
	0x0399FF00 BL 0x337EE94
	0x0399FF04 MOV W8, W19
	0x0399FF08 LDP X20, X19, [X31 + 0x40]
	0x0399FF0C LDP X22, X21, [X31 + 0x30]
	0x0399FF10 LDP X24, X23, [X31 + 0x20]
	0x0399FF14 LDR X30, [X31 + 0x18]
	0x0399FF18 LDP D9, D8, [X31 + 0x8]
	0x0399FF1C BFM X8, X0, 0x20, 0x1F
	0x0399FF20 MOV X0, X8
	0x0399FF24 LDR V10, [X31], #0x50
	0x0399FF28 RET
	0x0399FF2C LDRB W8, [X0 + 0x10]
	0x0399FF30 FMOV S0, 1
	0x0399FF34 CBZ W8, 0x399FF44
	0x0399FF38 LDRB W8, [X0 + 0x21]
	0x0399FF3C CBZ W8, 0x399FF44
	0x0399FF40 LDR V0, [X0 + 0x1C]
	0x0399FF44 RET
	0x0399FF48 LDUR X0, [X0 + 0x34]
	0x0399FF4C RET
	0x0399FF50 LDR V1, [X0 + 0x80]
	0x0399FF54 B 0x399FF58
	0x0399FF58 STP D9, D8, [X31 - 0x30]!
	0x0399FF5C STR X30, [X31 + 0x10]
	0x0399FF60 STP X20, X19, [X31 + 0x20]
	0x0399FF64 ADRP X20, 0xA42000
	0x0399FF68 LDRB W8, [X20 + 0xB78]
	0x0399FF6C MOV V9.16B, V1.16B
	0x0399FF70 MOV V8.16B, V0.16B
	0x0399FF74 MOV X19, X0
	0x0399FF78 TBNZ X8, 0x0, 0x399FF90
	0x0399FF7C ADRP X0, 0x754000
	0x0399FF80 LDR X0, [X0 + 0x5A8]
	0x0399FF84 BL 0x1C16CF4
	0x0399FF88 MOVZ W8, 0x1
	0x0399FF8C STRB W8, [X20 + 0xB78]
	0x0399FF90 LDRB W8, [X19 + 0x10]
	0x0399FF94 CBZ W8, 0x399FFF0
	0x0399FF98 ADRP X8, 0x754000
	0x0399FF9C LDR X8, [X8 + 0x5A8]
	0x0399FFA0 LDR X0, [X8]
	0x0399FFA4 LDR W8, [X0 + 0xE0]
	0x0399FFA8 CBNZ W8, 0x399FFB0
	0x0399FFAC BL 0x1C16DFC
	0x0399FFB0 MOVZ W8, 0x42C80000
	0x0399FFB4 FMOV S0, W8
	0x0399FFB8 FDIV S0, S9, S0
	0x0399FFBC MOV V1.16B, V8.16B
	0x0399FFC0 MOV X0, X31
	0x0399FFC4 BL 0x337EEBC
	0x0399FFC8 LDR V1, [X19 + 0x1C]
	0x0399FFCC FMUL S2, S1, S8
	0x0399FFD0 FCMP S2, S0
	0x0399FFD4 B.GE 0x399FFF0
	0x0399FFD8 FDIV S0, S0, S1
	0x0399FFDC FCMP S0, 0x0
	0x0399FFE0 FMOV S8, W31
	0x0399FFE4 B.MI 0x399FFF0
	0x0399FFE8 FMOV S1, 1
	0x0399FFEC FMIN S8, S0, S1
	0x0399FFF0 LDP X20, X19, [X31 + 0x20]
	0x0399FFF4 LDR X30, [X31 + 0x10]
	0x0399FFF8 MOV V0.16B, V8.16B
	0x0399FFFC LDP D9, D8, [X31], #0x30
	0x039A0000 RET
	0x039A0004 STR X30, [X31 - 0x40]!
	0x039A0008 STP X24, X23, [X31 + 0x10]
	0x039A000C STP X22, X21, [X31 + 0x20]
	0x039A0010 STP X20, X19, [X31 + 0x30]
	0x039A0014 ADRP X20, 0xA41000
	0x039A0018 ADRP X21, 0x7B1000
	0x039A001C ADRP X19, 0x7B1000
	0x039A0020 ADRP X23, 0x7B1000
	0x039A0024 ADRP X22, 0x7B1000
	0x039A0028 LDRB W8, [X20 + 0xB79]
	0x039A002C LDR X21, [X21 + 0x2D8]
	0x039A0030 LDR X19, [X19 + 0x368]
	0x039A0034 LDR X23, [X23 + 0x370]
	0x039A0038 LDR X22, [X22 + 0x378]
	0x039A003C TBNZ X8, 0x0, 0x39A00A8
	0x039A0040 ADRP X0, 0x7B1000
	0x039A0044 LDR X0, [X0 + 0x380]
	0x039A0048 BL 0x1C16CF4
	0x039A004C ADRP X0, 0x7B1000
	0x039A0050 LDR X0, [X0 + 0x388]
	0x039A0054 BL 0x1C16CF4
	0x039A0058 ADRP X0, 0x7B1000
	0x039A005C LDR X0, [X0 + 0x390]
	0x039A0060 BL 0x1C16CF4
	0x039A0064 ADRP X0, 0x7B1000
	0x039A0068 LDR X0, [X0 + 0x398]
	0x039A006C BL 0x1C16CF4
	0x039A0070 ADRP X0, 0x7B1000
	0x039A0074 LDR X0, [X0 + 0x378]
	0x039A0078 BL 0x1C16CF4
	0x039A007C ADRP X0, 0x7B1000
	0x039A0080 LDR X0, [X0 + 0x2D8]
	0x039A0084 BL 0x1C16CF4
	0x039A0088 ADRP X0, 0x7B1000
	0x039A008C LDR X0, [X0 + 0x370]
	0x039A0090 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], X30
	003 Move [X31+112], X24
	004 Move [X31+120], X23
	005 Move [X31+128], X22
	006 Move [X31+136], X21
	007 Move [X31+144], X20
	008 Move [X31+152], X19
	009 Move X21, 0xA43000
	010 Move X20, 0x755000
	011 Move W8, [X21+2924]
	012 Move X20, [X20+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {62}
	018 Move X0, 0x7B3000
	019 Move X0, [X0+736]
	020 Call 0x1C17CF4
	021 Move X0, 0x7B3000
	022 Move X0, [X0+744]
	023 Call 0x1C17CF4
	024 Move X0, 0x7B3000
	025 Move X0, [X0+752]
	026 Call 0x1C17CF4
	027 Move X0, 0x7B3000
	028 Move X0, [X0+760]
	029 Call 0x1C17CF4
	030 Move X0, 0x7B3000
	031 Move X0, [X0+768]
	032 Call 0x1C17CF4
	033 Move X0, 0x7B3000
	034 Move X0, [X0+776]
	035 Call 0x1C17CF4
	036 Move X0, 0x7B3000
	037 Move X0, [X0+728]
	038 Call 0x1C17CF4
	039 Move X0, 0x7B3000
	040 Move X0, [X0+784]
	041 Call 0x1C17CF4
	042 Move X0, 0x7B3000
	043 Move X0, [X0+792]
	044 Call 0x1C17CF4
	045 Move X0, 0x7B3000
	046 Move X0, [X0+800]
	047 Call 0x1C17CF4
	048 Move X0, 0x7B3000
	049 Move X0, [X0+808]
	050 Call 0x1C17CF4
	051 Move X0, 0x7B3000
	052 Move X0, [X0+816]
	053 Call 0x1C17CF4
	054 Move X0, 0x755000
	055 Move X0, [X0+1432]
	056 Call 0x1C17CF4
	057 Move X0, 0x785000
	058 Move X0, [X0+3424]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X21+2924], W8
	062 Move X0, [X20]
	063 NotImplemented "Instruction MOVI not yet implemented."
	064 Move [X31+80], X31
	065 Move [X31+48], V0
	066 Move [X31+56], V0
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X19
	072 Move X1, X31
	073 Move X2, X31
	074 Call Object.op_Equality, X0, X1
	075 Move W8, W0
	076 Move X0, X31
	077 Move TEMP, X8
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {265}
	081 Move [X31+104], X31
	082 Compare X19, 0
	083 JumpIfEqual {274}
	084 Move X0, X19
	085 Move X1, X31
	086 Call Object.GetInstanceID, X0
	087 Move X23, 0x7B3000
	088 Move X23, [X23+728]
	089 Move W20, W0
	090 Move X8, [X23]
	091 Move W9, [X8+224]
	092 Compare W9, 0
	093 JumpIfNotEqual {97}
	094 Move X0, X8
	095 Call 0x1C17DFC
	096 Move X8, [X23]
	097 Move X8, [X8+184]
	098 Move X0, [X8+24]
	099 Compare X0, 0
	100 JumpIfEqual {274}
	101 Move X8, 0x7B3000
	102 Move X8, [X8+768]
	103 Add X2, X31, 104
	104 Move W1, W20
	105 Move X3, [X8]
	106 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfEqual {264}
	111 Move X0, [X23]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {117}
	115 Call 0x1C17DFC
	116 Move X0, [X23]
	117 Move X8, [X0+184]
	118 Move X0, [X8+24]
	119 Compare X0, 0
	120 JumpIfEqual {274}
	121 Move X8, 0x7B3000
	122 Move X8, [X8+776]
	123 Move X1, [X8]
	124 Call Dictionary`2<Int32, Object>.get_Count, X0
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X0, [X23]
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {132}
	130 Call 0x1C17DFC
	131 Move X0, [X23]
	132 Move X8, [X0+184]
	133 Move X0, [X8+24]
	134 Compare X0, 0
	135 JumpIfEqual {274}
	136 Move X8, 0x7B3000
	137 Move X8, [X8+744]
	138 Move X1, [X8]
	139 Add X8, X31, 8
	140 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	141 NotImplemented "Instruction LDUR not yet implemented."
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 Move X8, [X31+40]
	144 Move X22, 0x7B3000
	145 Move [X31+48], V0
	146 Move [X31+56], V1
	147 Move [X31+80], X8
	148 Move X22, [X22+792]
	149 Move X1, [X22]
	150 Add X0, X31, 48
	151 Call Enumerator<Int32, Object>.MoveNext, X0
	152 Move TEMP, X0
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfNotEqual {202}
	156 Move X24, [X31+72]
	157 Compare X24, 0
	158 JumpIfEqual {275}
	159 Move X0, [X24+144]
	160 Move X21, [X31+64]
	161 Compare X0, 0
	162 JumpIfEqual {171}
	163 Move X8, [X0]
	164 Move X9, [X8+392]
	165 Move X1, [X8+400]
	166 NotImplemented "Instruction BLR not yet implemented."
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfEqual {149}
	171 Move X8, 0x7B3000
	172 Move X8, [X8+784]
	173 Add X0, X31, 48
	174 Move X1, [X8]
	175 Call Enumerator<Int32, Object>.Dispose, X0
	176 Move X0, [X23]
	177 Move [X31+104], X24
	178 Move W8, [X0+224]
	179 Compare W8, 0
	180 JumpIfNotEqual {183}
	181 Call 0x1C17DFC
	182 Move X0, [X23]
	183 Move X8, [X0+184]
	184 Move X0, [X8+24]
	185 Compare X0, 0
	186 JumpIfEqual {274}
	187 Move X8, 0x7B3000
	188 Move X8, [X8+760]
	189 Move W1, W21
	190 Move X2, [X8]
	191 Call Dictionary`2<Int32, Object>.Remove, X0, X1
	192 Move X8, [X23]
	193 Move X8, [X8+184]
	194 Move X0, [X8+16]
	195 Compare X0, 0
	196 JumpIfEqual {274}
	197 Move X8, 0x7B3000
	198 Move X8, [X8+752]
	199 Move W1, W21
	200 Move X2, [X8]
	201 Call Dictionary`2<Int32, ByteEnum>.Remove, X0, X1
	202 Move X8, 0x7B3000
	203 Move X8, [X8+784]
	204 Add X0, X31, 48
	205 Move X1, [X8]
	206 Call Enumerator<Int32, Object>.Dispose, X0
	207 Move X8, [X31+104]
	208 Compare X8, 0
	209 JumpIfEqual {232}
	210 Move X0, [X8+144]
	211 Move W9, 0x3F800000
	212 Move V0, 0
	213 Move W10, 256
	214 Move W11, 0xBF800000
	215 Move [X8+28], W9
	216 Move W9, 1
	217 NotImplemented "Instruction STRH not yet implemented."
	218 NotImplemented "Instruction STRH not yet implemented."
	219 Move [X8+20], D0
	220 NotImplemented "Instruction STRH not yet implemented."
	221 Move [X8+36], W11
	222 Move [X8+44], D0
	223 Move [X8+52], X31
	224 Move [X8+68], W9
	225 Compare X0, 0
	226 JumpIfEqual {274}
	227 Move X8, [X0]
	228 Move X1, X19
	229 Move X9, [X8+424]
	230 Move X2, [X8+432]
	231 NotImplemented "Instruction BLR not yet implemented."
	232 Move X0, [X23]
	233 Call 0x1C17F10
	234 Move X21, X0
	235 Call DynamicResolutionHandler..ctor, X0
	236 Move X8, 0x785000
	237 Move X8, [X8+3424]
	238 Move [X31+104], X21
	239 Move X0, [X8]
	240 Call 0x1C17F10
	241 Move X1, X19
	242 Move X2, X31
	243 Move X22, X0
	244 Call WeakReference..ctor, X0, X1
	245 Compare X21, 0
	246 JumpIfEqual {274}
	247 Move [X21+144], X22
	248 Move X0, [X23]
	249 Move W8, [X0+224]
	250 Compare W8, 0
	251 JumpIfNotEqual {254}
	252 Call 0x1C17DFC
	253 Move X0, [X23]
	254 Move X8, [X0+184]
	255 Move X0, [X8+24]
	256 Compare X0, 0
	257 JumpIfEqual {274}
	258 Move X8, 0x7B3000
	259 Move X2, [X31+104]
	260 Move X8, [X8+736]
	261 Move W1, W20
	262 Move X3, [X8]
	263 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	264 Move X0, [X31+104]
	265 Move X20, [X31+144]
	266 Move X19, [X31+152]
	267 Move X22, [X31+128]
	268 Move X21, [X31+136]
	269 Move X24, [X31+112]
	270 Move X23, [X31+120]
	271 Move X30, [X31+96]
	272 Add X31, X31, 160
	273 Return X0
	274 Call 0x1C17F20
	275 Call 0x1C17F20
	276 Move X21, X0
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Move X0, X21
	279 Call 0x3EB2AD0
	280 Move X22, [X0]
	281 Call 0x3EB2AE0
	282 Move X8, 0x7B2000
	283 Move X8, [X8+784]
	284 Add X0, X31, 48
	285 Move X1, [X8]
	286 Call Enumerator<Int32, Object>.Dispose, X0
	287 Compare X22, 0
	288 JumpIfEqual {207}
	289 Move X0, X22
	290 Call 0x1C17F18
	291 Move X22, X31
	292 Move X21, X0
	293 Move X8, 0x7B2000
	294 Move X8, [X8+784]
	295 Move X1, [X8]
	296 Add X0, X31, 48
	297 Call Enumerator<Int32, Object>.Dispose, X0
	298 Compare X22, 0
	299 JumpIfNotEqual {302}
	300 Move X0, X21
	301 Call 0x1D2D690
	302 Move X0, X22
	303 Call 0x1C17F18
	304 Call 0x1991590

Method: System.Void set_upsamplerSchedule(UnityEngine.Rendering.DynamicResolutionHandler/UpsamplerScheduleType value)

Disassembly:
	0x039A0148 LDR X22, [X22 + 0x388]
	0x039A014C BL 0x1C16F10

ISIL:
	001 Move [X0+152], W1
	002 Return 

Method: UnityEngine.Rendering.DynamicResolutionHandler/UpsamplerScheduleType get_upsamplerSchedule()

Disassembly:
	0x039A0150 LDR X1, [X19]
	0x039A0154 MOV X19, X0

ISIL:
	001 Move W0, [X0+152]
	002 Return X0

Method: UnityEngine.Rendering.DynamicResolutionHandler get_instance()

Disassembly:
	0x039A0158 BL 0x2A00C94
	0x039A015C LDR X8, [X21]
	0x039A0160 LDR X8, [X8 + 0xB8]
	0x039A0164 STR X19, [X8 + 0x10]
	0x039A0168 LDR X0, [X20]
	0x039A016C BL 0x1C16F10
	0x039A0170 LDR X2, [X22]
	0x039A0174 MOVZ W1, 0x20
	0x039A0178 MOV X19, X0
	0x039A017C BL 0x2A12DEC
	0x039A0180 LDR X0, [X21]
	0x039A0184 LDR X8, [X0 + 0xB8]
	0x039A0188 STR X19, [X8 + 0x18]
	0x039A018C BL 0x1C16F10
	0x039A0190 MOV X19, X0
	0x039A0194 BL 0x399F094
	0x039A0198 LDR X8, [X21]
	0x039A019C LDP X22, X21, [X31 + 0x20]
	0x039A01A0 MOVZ W9, 0x3F800000
	0x039A01A4 LDR X8, [X8 + 0xB8]
	0x039A01A8 STR X19, [X8 + 0x20]
	0x039A01AC STR X19, [X8 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA42000
	005 Move X19, 0x7B2000
	006 Move W8, [X20+2925]
	007 Move X19, [X19+728]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x7B2000
	013 Move X0, [X0+728]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2925], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+48]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor()

Disassembly:
	0x039A0094 ADRP X0, 0x7B1000
	0x039A0098 LDR X0, [X0 + 0x368]
	0x039A009C BL 0x1C16CF4
	0x039A00A0 MOVZ W8, 0x1
	0x039A00A4 STRB W8, [X20 + 0xB79]
	0x039A00A8 LDR X8, [X21]
	0x039A00AC MOVZ W1, 0x2
	0x039A00B0 LDR X8, [X8 + 0xB8]
	0x039A00B4 STR W31, [X8]
	0x039A00B8 LDR X0, [X19]
	0x039A00BC BL 0x1C16D6C
	0x039A00C0 LDR X8, [X23]
	0x039A00C4 MOV X19, X0
	0x039A00C8 MOV X0, X8
	0x039A00CC BL 0x1C16F10
	0x039A00D0 LDR X2, [X22]
	0x039A00D4 MOV X1, X31
	0x039A00D8 MOV X20, X0
	0x039A00DC BL 0x399E994
	0x039A00E0 CBZ X19, 0x39A01D4
	0x039A00E4 LDR W8, [X19 + 0x18]
	0x039A00E8 CBZ W8, 0x39A01D0
	0x039A00EC MOVZ W24, 0x1
	0x039A00F0 STP X24, X20, [X19 + 0x20]
	0x039A00F4 LDR X0, [X23]
	0x039A00F8 BL 0x1C16F10
	0x039A00FC LDR X2, [X22]
	0x039A0100 MOV X1, X31
	0x039A0104 MOV X20, X0
	0x039A0108 BL 0x399E994
	0x039A010C LDR W8, [X19 + 0x18]
	0x039A0110 CMP W8, 0x1
	0x039A0114 B.LS 0x39A01D0
	0x039A0118 STP X24, X20, [X19 + 0x30]
	0x039A011C LDR X8, [X21]
	0x039A0120 ADRP X9, 0x7B1000
	0x039A0124 ADRP X20, 0x7B1000
	0x039A0128 ADRP X22, 0x7B1000
	0x039A012C LDR X8, [X8 + 0xB8]
	0x039A0130 LDR X9, [X9 + 0x398]
	0x039A0134 STR X19, [X8 + 0x8]
	0x039A0138 LDR X0, [X9]
	0x039A013C ADRP X19, 0x7B1000
	0x039A0140 LDR X19, [X19 + 0x380]
	0x039A0144 LDR X20, [X20 + 0x390]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, 0x3F000000
	005 Move [X0+100], W8
	006 Move X8, -48959488
	007 Move V0, [X8+576]
	008 Move X8, 0x42C80000
	009 NotImplemented "Instruction MOVK not yet implemented."
	010 Move [X0+116], X8
	011 Move X8, -48967680
	012 Move [X0+108], D0
	013 Move V0, [X8+48]
	014 Move W8, 0x42480000
	015 Move W20, 1
	016 Move [X0+140], W8
	017 Move W8, 2
	018 Move X1, X31
	019 Move X19, X0
	020 Move [X0+92], W31
	021 Move [X0+84], X31
	022 NotImplemented "Instruction STURH not yet implemented."
	023 Move [X0+99], W31
	024 Move [X0+104], W31
	025 NotImplemented "Instruction STURH not yet implemented."
	026 Move [X0+107], W31
	027 Move [X0+96], W20
	028 Move [X0+124], V0
	029 Move [X0+152], W8
	030 Call Object..ctor, X0
	031 Move V0, 0
	032 Move W8, 0x3F800000
	033 Move W9, 256
	034 Move W10, 0xBF800000
	035 NotImplemented "Instruction STRH not yet implemented."
	036 NotImplemented "Instruction STRH not yet implemented."
	037 Move [X19+52], X31
	038 Move [X19+20], D0
	039 Move [X19+28], W8
	040 NotImplemented "Instruction STRH not yet implemented."
	041 Move [X19+36], W10
	042 Move [X19+44], D0
	043 Move [X19+68], W20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Return 

Method: System.Single DefaultDynamicResMethod()

Disassembly:
	0x039A020C BL 0x1C16CF4
	0x039A0210 ADRP X0, 0x77C000

ISIL:
	001 Move S0, 1
	002 Return V0

Method: System.Void ProcessSettings(UnityEngine.Rendering.GlobalDynamicResolutionSettings settings)

Disassembly:
	0x039A0214 LDR X0, [X0 + 0x1B0]
	0x039A0218 BL 0x1C16CF4
	0x039A021C ADRP X0, 0x753000
	0x039A0220 LDR X0, [X0 + 0x6C0]
	0x039A0224 BL 0x1C16CF4
	0x039A0228 MOVZ W8, 0x1
	0x039A022C STRB W8, [X20 + 0xB7B]
	0x039A0230 STR X31, [X31 + 0x8]
	0x039A0234 LDR X0, [X19 + 0x18]
	0x039A0238 MOV X1, X31
	0x039A023C BL 0x32277A8
	0x039A0240 MOV W8, W0
	0x039A0244 MOV X0, X31
	0x039A0248 TBNZ X8, 0x0, 0x39A0300
	0x039A024C ADRP X8, 0x753000
	0x039A0250 LDR X8, [X8 + 0x6C0]
	0x039A0254 ADRP X23, 0x77C000
	0x039A0258 ADRP X22, 0x7B1000
	0x039A025C ADRP X21, 0x753000
	0x039A0260 LDR X0, [X8]
	0x039A0264 LDR X20, [X19 + 0x18]
	0x039A0268 LDR W8, [X0 + 0xE0]
	0x039A026C LDR X23, [X23 + 0x1B0]
	0x039A0270 LDR X22, [X22 + 0x3A0]
	0x039A0274 LDR X21, [X21 + 0xDF8]
	0x039A0278 CBNZ W8, 0x39A0280
	0x039A027C BL 0x1C16DFC
	0x039A0280 LDR X1, [X23]
	0x039A0284 LDR X2, [X22]
	0x039A0288 MOV X0, X20
	0x039A028C BL 0x1C1703C
	0x039A0290 LDR X8, [X21]
	0x039A0294 LDR X19, [X19 + 0x10]
	0x039A0298 MOV X20, X0
	0x039A029C LDR W9, [X8 + 0xE0]
	0x039A02A0 CBNZ W9, 0x39A02AC
	0x039A02A4 MOV X0, X8
	0x039A02A8 BL 0x1C16DFC
	0x039A02AC ADD X2, X31, 0x8
	0x039A02B0 MOV X0, X20
	0x039A02B4 MOV X1, X19
	0x039A02B8 MOV X3, X31
	0x039A02BC BL 0x33B2AE8
	0x039A02C0 MOV W8, W0
	0x039A02C4 MOV X0, X31
	0x039A02C8 TBZ X8, 0x0, 0x39A0300
	0x039A02CC LDR X0, [X31 + 0x8]
	0x039A02D0 CBZ X0, 0x39A0300
	0x039A02D4 LDR X8, [X0]
	0x039A02D8 LDR X1, [X21]
	0x039A02DC LDRB W10, [X8 + 0x130]
	0x039A02E0 LDRB W9, [X1 + 0x130]
	0x039A02E4 CMP W10, W9
	0x039A02E8 B.CC 0x39A0314
	0x039A02EC LDR X8, [X8 + 0xC8]
	0x039A02F0 ADD X8, X8, X9, 0x3, LSL
	0x039A02F4 LDUR X8, [X8 - 0x8]
	0x039A02F8 CMP X8, X1
	0x039A02FC B.NE 0x39A0314
	0x039A0300 LDP X20, X19, [X31 + 0x30]
	0x039A0304 LDP X22, X21, [X31 + 0x20]
	0x039A0308 LDP X30, X23, [X31 + 0x10]
	0x039A030C ADD X31, X31, 0x40
	0x039A0310 RET
	0x039A0314 BL 0x1C171E0
	0x039A0318 STP X30, X19, [X31 - 0x10]!
	0x039A031C CBZ X1, 0x39A0344
	0x039A0320 LDR X8, [X1]
	0x039A0324 MOV X19, X0
	0x039A0328 MOV X0, X1
	0x039A032C LDP X9, X8, [X8 + 0x168]
	0x039A0330 MOV X1, X8
	0x039A0334 BLR X9
	0x039A0338 STR X0, [X19 + 0x10]
	0x039A033C LDP X30, X19, [X31], #0x10
	0x039A0340 RET
	0x039A0344 BL 0x1C16F20
	0x039A0348 STP X30, X21, [X31 - 0x20]!
	0x039A034C STP X20, X19, [X31 + 0x10]
	0x039A0350 ADRP X21, 0xA41000
	0x039A0354 LDRB W8, [X21 + 0xB7C]
	0x039A0358 MOV X20, X1
	0x039A035C MOV X19, X0
	0x039A0360 TBNZ X8, 0x0, 0x39A0378
	0x039A0364 ADRP X0, 0x753000
	0x039A0368 LDR X0, [X0 + 0xDF8]
	0x039A036C BL 0x1C16CF4
	0x039A0370 MOVZ W8, 0x1
	0x039A0374 STRB W8, [X21 + 0xB7C]
	0x039A0378 MOV X0, X19
	0x039A037C MOV X1, X31
	0x039A0380 BL 0x33BDD8C
	0x039A0384 CBZ X20, 0x39A03E4
	0x039A0388 LDR X8, [X20]
	0x039A038C ADRP X21, 0x753000
	0x039A0390 MOV X0, X20
	0x039A0394 LDR X9, [X8 + 0x2D8]
	0x039A0398 LDR X1, [X8 + 0x2E0]
	0x039A039C LDR X21, [X21 + 0xDF8]
	0x039A03A0 BLR X9
	0x039A03A4 STR X0, [X19 + 0x18]
	0x039A03A8 LDR X0, [X21]
	0x039A03AC LDR W8, [X0 + 0xE0]
	0x039A03B0 CBNZ W8, 0x39A03B8
	0x039A03B4 BL 0x1C16DFC
	0x039A03B8 MOV X0, X20
	0x039A03BC MOV X1, X31
	0x039A03C0 BL 0x33B03E4
	0x039A03C4 CBZ X0, 0x39A03E4
	0x039A03C8 LDR W8, [X0 + 0x18]
	0x039A03CC CBZ W8, 0x39A03E8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xA42000
	009 Move W8, [X21+2926]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x754000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x7B2000
	020 Move X0, [X0+824]
	021 Call 0x1C17CF4
	022 Move X0, 0x7B2000
	023 Move X0, [X0+728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2926], W8
	027 Move [X31+12], W31
	028 Move W9, [X19]
	029 Move W8, W31
	030 Move TEMP, X9
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {50}
	034 Move X8, 0x754000
	035 Move X8, [X8+2416]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X31
	042 Call Application.get_isPlaying
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {48}
	047 Move W8, 1
	048 Move W8, [X19+38]
	049 And W8, W8, 1
	050 Compare X20, 0
	051 JumpIfEqual {131}
	052 Move S0, 1
	053 Move [X20+16], W8
	054 Compare W8, 0
	055 JumpIfEqual {118}
	056 Move W8, [X19+36]
	057 Move W9, 0x42C80000
	058 Move S2, W9
	059 Move S1, 1
	060 Move [X20+80], W8
	061 Move W8, [X19+1]
	062 Move X21, 0x7B2000
	063 And W8, W8, 1
	064 Move [X20+17], W8
	065 Move V0, [X19+32]
	066 Move X8, -48975872
	067 Move V8, [X8+188]
	068 NotImplemented "Instruction FDIV not yet implemented."
	069 NotImplemented "Instruction FMIN not yet implemented."
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Move [X20+20], S0
	073 Move V1, [X19+28]
	074 NotImplemented "Instruction FDIV not yet implemented."
	075 Move S2, 3
	076 NotImplemented "Instruction FMIN not yet implemented."
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 NotImplemented "Instruction FCSEL not yet implemented."
	079 Move [X20+24], S0
	080 Move X21, [X21+728]
	081 Move X0, [X21]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {87}
	085 Call 0x1C17DFC
	086 Move X0, [X21]
	087 Move X8, [X0+184]
	088 Move X0, [X8+16]
	089 Compare X0, 0
	090 JumpIfEqual {131}
	091 Move W1, [X8+40]
	092 Move X8, 0x7B2000
	093 Move X8, [X8+824]
	094 Add X2, X31, 12
	095 Add X21, X19, 37
	096 Add X22, X31, 12
	097 Move X3, [X8]
	098 Call Dictionary`2<Int32, ByteEnum>.TryGetValue, X0, X1, X2
	099 And W31, W0, 1
	100 NotImplemented "Instruction CSEL not yet implemented."
	101 Move W8, [X8]
	102 Move [X20+68], W8
	103 Move W8, [X19+38]
	104 And W9, W8, 1
	105 Move [X20+32], W9
	106 Move TEMP, X8
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {119}
	110 Move V0, [X19+40]
	111 Move W8, 0x42C80000
	112 Move S2, W8
	113 Move S1, 1.5
	114 NotImplemented "Instruction FDIV not yet implemented."
	115 NotImplemented "Instruction FMIN not yet implemented."
	116 NotImplemented "Instruction FCMP not yet implemented."
	117 NotImplemented "Instruction FCSEL not yet implemented."
	118 Move [X20+28], S0
	119 Add X0, X20, 84
	120 Move W2, 60
	121 Move X1, X19
	122 Call 0x3EB2B30
	123 Move X20, [X31+48]
	124 Move X19, [X31+56]
	125 Move X22, [X31+32]
	126 Move X21, [X31+40]
	127 Move X30, [X31+24]
	128 Move V8, [X31+16]
	129 Add X31, X31, 64
	130 Return 
	131 Call 0x1C17F20

Method: UnityEngine.Vector2 GetResolvedScale()

Disassembly:
	0x039A03D0 LDR X8, [X0 + 0x20]
	0x039A03D4 STR X8, [X19 + 0x10]
	0x039A03D8 LDP X20, X19, [X31 + 0x10]
	0x039A03DC LDP X30, X21, [X31], #0x20
	0x039A03E0 RET
	0x039A03E4 BL 0x1C16F20
	0x039A03E8 BL 0x1C16F28
	0x039A03EC STR X30, [X31 - 0x10]!
	0x039A03F0 MOV X0, X31
	0x039A03F4 BL 0x3E62334
	0x039A03F8 TBZ X0, 0x0, 0x39A0408
	0x039A03FC MOV X0, X31
	0x039A0400 LDR X30, [X31], #0x10
	0x039A0404 B 0x3E62384
	0x039A0408 FMOV S0, 1
	0x039A040C LDR X30, [X31], #0x10
	0x039A0410 RET
	0x039A0414 MOV X0, X31
	0x039A0418 B 0x3E62334
	0x039A041C MOV X0, X31
	0x039A0420 B 0x3E623AC
	0x039A0424 STR X30, [X31 - 0x10]!
	0x039A0428 MOV X0, X31
	0x039A042C BL 0x3E62334
	0x039A0430 TBZ X0, 0x0, 0x39A0440
	0x039A0434 MOV X0, X31
	0x039A0438 LDR X30, [X31], #0x10
	0x039A043C B 0x3E624E0
	0x039A0440 FMOV S0, 1

ISIL:
	001 Move [X31-16], D8
	002 Move [X31+8], X30
	003 Move W8, [X0+16]
	004 Move S1, 1
	005 Compare W8, 0
	006 JumpIfEqual {16}
	007 Move W8, [X0+33]
	008 Move S8, 1
	009 Compare W8, 0
	010 JumpIfEqual {17}
	011 Move W8, [X0+40]
	012 Move V1, [X0+28]
	013 Compare W8, 0
	014 JumpIfEqual {21}
	015 Move V8, V1
	016 Move S8, 1
	017 Move X30, [X31+8]
	018 Move V0, V8
	019 Move V8, [X31+16]
	020 Return X0
	021 Move W8, [X0+80]
	022 Move V8, V1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X31
	025 Call ScalableBufferManager.get_widthScaleFactor
	026 Move X0, X31
	027 Move V8, V0
	028 Call ScalableBufferManager.get_heightScaleFactor
	029 Move V1, V0

Method: System.Single CalculateMipBias(UnityEngine.Vector2Int inputResolution, UnityEngine.Vector2Int outputResolution, System.Boolean forceApply = False)

Disassembly:
	0x039A0444 LDR X30, [X31], #0x10
	0x039A0448 RET
	0x039A044C STR X30, [X31 - 0x10]!
	0x039A0450 MOV X0, X31
	0x039A0454 BL 0x3E62334
	0x039A0458 TBZ X0, 0x0, 0x39A0468
	0x039A045C MOV X0, X31
	0x039A0460 LDR X30, [X31], #0x10
	0x039A0464 B 0x3E6235C
	0x039A0468 MOV W0, W31
	0x039A046C LDR X30, [X31], #0x10
	0x039A0470 RET
	0x039A0474 STP X30, X19, [X31 - 0x10]!
	0x039A0478 ADRP X19, 0xA41000
	0x039A047C LDRB W8, [X19 + 0xB7D]
	0x039A0480 TBNZ X8, 0x0, 0x39A0498
	0x039A0484 ADRP X0, 0x7B1000
	0x039A0488 LDR X0, [X0 + 0x3A8]
	0x039A048C BL 0x1C16CF4
	0x039A0490 MOVZ W8, 0x1
	0x039A0494 STRB W8, [X19 + 0xB7D]
	0x039A0498 MOV X0, X31
	0x039A049C BL 0x3E62334
	0x039A04A0 TBZ X0, 0x0, 0x39A04B0
	0x039A04A4 MOV X0, X31
	0x039A04A8 LDP X30, X19, [X31], #0x10
	0x039A04AC B 0x3E62530
	0x039A04B0 ADRP X8, 0x7B1000
	0x039A04B4 LDR X8, [X8 + 0x3A8]
	0x039A04B8 LDR X0, [X8]
	0x039A04BC LDP X30, X19, [X31], #0x10
	0x039A04C0 RET
	0x039A04C4 STP X30, X19, [X31 - 0x10]!
	0x039A04C8 ADRP X19, 0xA41000
	0x039A04CC LDRB W8, [X19 + 0xB7E]
	0x039A04D0 TBNZ X8, 0x0, 0x39A04E8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xA42000
	008 Move W8, [X23+2927]
	009 Move W21, W3
	010 Move X19, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x754000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+2927], W8
	022 Move W8, [X22+17]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move S0, W31
	026 Move TEMP, X21
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {44}
	030 Move X8, 0x754000
	031 Move X8, [X8+1448]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 NotImplemented "Instruction SCVTF not yet implemented."
	038 NotImplemented "Instruction SCVTF not yet implemented."
	039 NotImplemented "Instruction FDIV not yet implemented."
	040 Move D1, 2
	041 Move X0, X31
	042 Call Math.Log, V0, V1
	043 NotImplemented "Instruction INVALID not yet implemented."
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return V0

Method: System.Void SetDynamicResScaler(UnityEngine.Rendering.PerformDynamicRes scaler, UnityEngine.Rendering.DynamicResScalePolicyType scalerType = 1)

Disassembly:
	0x039A04D4 ADRP X0, 0x753000
	0x039A04D8 LDR X0, [X0 + 0xAC8]
	0x039A04DC BL 0x1C16CF4
	0x039A04E0 MOVZ W8, 0x1
	0x039A04E4 STRB W8, [X19 + 0xB7E]
	0x039A04E8 MOV X0, X31
	0x039A04EC BL 0x3E62334
	0x039A04F0 TBZ X0, 0x0, 0x39A0500
	0x039A04F4 MOV X0, X31
	0x039A04F8 LDP X30, X19, [X31], #0x10
	0x039A04FC B 0x3E62558
	0x039A0500 ADRP X8, 0x753000
	0x039A0504 LDR X8, [X8 + 0xAC8]
	0x039A0508 MOVZ W1, 0x1
	0x039A050C LDR X0, [X8]
	0x039A0510 LDP X30, X19, [X31], #0x10
	0x039A0514 B 0x1C16D6C
	0x039A0518 STR X30, [X31 - 0x10]!
	0x039A051C MOV X0, X31
	0x039A0520 BL 0x3E62334
	0x039A0524 TBZ X0, 0x0, 0x39A0534
	0x039A0528 MOV X0, X31
	0x039A052C LDR X30, [X31], #0x10
	0x039A0530 B 0x3E62580
	0x039A0534 MOVZ W0, 0x1
	0x039A0538 LDR X30, [X31], #0x10
	0x039A053C RET
	0x039A0540 SUB X31, X31, 0x50
	0x039A0544 STP X30, X19, [X31 + 0x40]
	0x039A0548 MOV X0, X31
	0x039A054C MOV X19, X8
	0x039A0550 BL 0x3E62334
	0x039A0554 TBZ X0, 0x0, 0x39A058C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA42000
	007 Move X21, 0x7B2000
	008 Move W8, [X22+2928]
	009 Move X21, [X21+728]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7B2000
	017 Move X0, [X0+728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2928], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X8, [X8+8]
	029 Compare X8, 0
	030 JumpIfEqual {43}
	031 Move W9, [X8+24]
	032 Compare W9, 0
	033 JumpIfEqual {44}
	034 Move W9, W20
	035 Move [X8+32], X9
	036 Move [X8+40], X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Void SetSystemDynamicResScaler(UnityEngine.Rendering.PerformDynamicRes scaler, UnityEngine.Rendering.DynamicResScalePolicyType scalerType = 1)

Disassembly:
	0x039A0558 ADD X8, X31, 0x8
	0x039A055C MOV X0, X31
	0x039A0560 BL 0x3E62434
	0x039A0564 LDR W8, [X31 + 0x38]
	0x039A0568 LDUR V0, [X31 + 0x28]
	0x039A056C LDUR V1, [X31 + 0x18]
	0x039A0570 LDUR V2, [X31 + 0x8]
	0x039A0574 STR W8, [X19 + 0x30]
	0x039A0578 STP V1, V0, [X19 + 0x10]
	0x039A057C STR V2, [X19]
	0x039A0580 LDP X30, X19, [X31 + 0x40]
	0x039A0584 ADD X31, X31, 0x50
	0x039A0588 RET
	0x039A058C MOVI V0.2D, 0x0
	0x039A0590 STR W31, [X19 + 0x30]
	0x039A0594 STP V0, V0, [X19 + 0x10]
	0x039A0598 STR V0, [X19]
	0x039A059C MOV X0, X19
	0x039A05A0 LDP X30, X19, [X31 + 0x40]
	0x039A05A4 MOV W1, W31
	0x039A05A8 MOV W2, W31
	0x039A05AC MOV X3, X31
	0x039A05B0 ADD X31, X31, 0x50
	0x039A05B4 B 0x3C227F4
	0x039A05B8 STR X30, [X31 - 0x10]!
	0x039A05BC MOV X0, X31
	0x039A05C0 BL 0x3E62334
	0x039A05C4 TBZ X0, 0x0, 0x39A05D4
	0x039A05C8 MOV X0, X31
	0x039A05CC LDR X30, [X31], #0x10
	0x039A05D0 B 0x3E623E4
	0x039A05D4 MOV W0, W31
	0x039A05D8 LDR X30, [X31], #0x10
	0x039A05DC RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xA42000
	007 Move X21, 0x7B2000
	008 Move W8, [X22+2929]
	009 Move X21, [X21+728]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7B2000
	017 Move X0, [X0+728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2929], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X8, [X8+8]
	029 Compare X8, 0
	030 JumpIfEqual {42}
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W9, W20
	034 Move [X8+48], X9
	035 Move [X8+56], X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return 
	042 Call 0x1C17F20
	043 Call 0x1C17F28

Method: System.Void SetActiveDynamicScalerSlot(UnityEngine.Rendering.DynamicResScalerSlot slot)

Disassembly:
	0x039A05E0 STR X30, [X31 - 0x10]!
	0x039A05E4 MOV X0, X31
	0x039A05E8 BL 0x3E62334
	0x039A05EC TBZ X0, 0x0, 0x39A05FC
	0x039A05F0 MOV X0, X31
	0x039A05F4 LDR X30, [X31], #0x10
	0x039A05F8 B 0x3E6240C
	0x039A05FC MOV W0, W31
	0x039A0600 LDR X30, [X31], #0x10
	0x039A0604 RET
	0x039A0608 MOV X1, X31
	0x039A060C B 0x33BDD8C
	0x039A0610 STR X30, [X31 - 0x20]!
	0x039A0614 STP X20, X19, [X31 + 0x10]
	0x039A0618 ADRP X20, 0xA41000
	0x039A061C LDRB W8, [X20 + 0xB7F]
	0x039A0620 MOV X19, X0
	0x039A0624 TBNZ X8, 0x0, 0x39A063C
	0x039A0628 ADRP X0, 0x755000
	0x039A062C LDR X0, [X0 + 0x278]
	0x039A0630 BL 0x1C16CF4
	0x039A0634 MOVZ W8, 0x1
	0x039A0638 STRB W8, [X20 + 0xB7F]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA42000
	006 Move X20, 0x7B2000
	007 Move W8, [X21+2930]
	008 Move X20, [X20+728]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7B2000
	015 Move X0, [X0+728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2930], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move [X8], W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: System.Void ClearSelectedCamera()

Disassembly:
	0x039A063C LDR X8, [X19 + 0x18]
	0x039A0640 CBZ X8, 0x39A064C
	0x039A0644 LDR X0, [X8 + 0x10]
	0x039A0648 CBNZ X0, 0x39A0660
	0x039A064C ADRP X8, 0x755000
	0x039A0650 LDR X8, [X8 + 0x278]
	0x039A0654 LDR X8, [X8]
	0x039A0658 LDR X8, [X8 + 0xB8]
	0x039A065C LDR X0, [X8]
	0x039A0660 LDP X20, X19, [X31 + 0x10]
	0x039A0664 LDR X30, [X31], #0x20
	0x039A0668 RET
	0x039A066C LDR X8, [X0 + 0x18]
	0x039A0670 CBZ X8, 0x39A067C
	0x039A0674 LDR W0, [X8 + 0x18]
	0x039A0678 RET
	0x039A067C MOV W0, W31
	0x039A0680 RET
	0x039A0684 STR X30, [X31 - 0x20]!
	0x039A0688 STP X20, X19, [X31 + 0x10]
	0x039A068C ADRP X20, 0xA41000
	0x039A0690 LDRB W8, [X20 + 0xB80]
	0x039A0694 MOV X19, X0
	0x039A0698 TBNZ X8, 0x0, 0x39A06B0
	0x039A069C ADRP X0, 0x7B0000
	0x039A06A0 LDR X0, [X0 + 0x798]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA42000
	005 Move X19, 0x7B2000
	006 Move W8, [X20+2931]
	007 Move X19, [X19+728]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x7B2000
	013 Move X0, [X0+728]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2931], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W10, 1
	027 Move X9, [X8+32]
	028 Move [X8+40], W31
	029 Move [X8+56], W10
	030 Move [X8+48], X9
	031 Move X30, [X31+32]
	032 Return 

Method: System.Void SetUpscaleFilter(UnityEngine.Camera camera, UnityEngine.Rendering.DynamicResUpscaleFilter filter)

Disassembly:
	0x039A06A4 BL 0x1C16CF4
	0x039A06A8 MOVZ W8, 0x1
	0x039A06AC STRB W8, [X20 + 0xB80]
	0x039A06B0 LDR X0, [X19 + 0x10]
	0x039A06B4 CBZ X0, 0x39A06D0
	0x039A06B8 ADRP X8, 0x7B0000
	0x039A06BC LDR X8, [X8 + 0x798]
	0x039A06C0 LDP X20, X19, [X31 + 0x10]
	0x039A06C4 LDR X1, [X8]
	0x039A06C8 LDR X30, [X31], #0x20
	0x039A06CC B 0x301DDC4
	0x039A06D0 BL 0x1C16F20
	0x039A06D4 MOV W0, W31
	0x039A06D8 RET
	0x039A06DC STP X30, X21, [X31 - 0x20]!
	0x039A06E0 STP X20, X19, [X31 + 0x10]
	0x039A06E4 ADRP X21, 0xA41000
	0x039A06E8 LDRB W8, [X21 + 0xB81]
	0x039A06EC MOV X19, X1
	0x039A06F0 MOV X20, X0
	0x039A06F4 TBNZ X8, 0x0, 0x39A070C
	0x039A06F8 ADRP X0, 0x7B0000
	0x039A06FC LDR X0, [X0 + 0x790]
	0x039A0700 BL 0x1C16CF4
	0x039A0704 MOVZ W8, 0x1
	0x039A0708 STRB W8, [X21 + 0xB81]
	0x039A070C CBZ X19, 0x39A0784
	0x039A0710 LDR X0, [X20 + 0x10]
	0x039A0714 CBZ X0, 0x39A0780
	0x039A0718 ADRP X9, 0x7B0000
	0x039A071C LDR X9, [X9 + 0x790]
	0x039A0720 LDR W10, [X0 + 0x1C]
	0x039A0724 LDR X8, [X0 + 0x10]
	0x039A0728 LDR X9, [X9]
	0x039A072C ADD W10, W10, 0x1
	0x039A0730 STR W10, [X0 + 0x1C]
	0x039A0734 CBZ X8, 0x39A0780
	0x039A0738 LDRSW X10, [X0 + 0x18]
	0x039A073C LDR W11, [X8 + 0x18]
	0x039A0740 CMP W10, W11
	0x039A0744 B.CS 0x39A0764
	0x039A0748 ADD W9, W10, 0x1
	0x039A074C ADD X8, X8, X10, 0x3, LSL
	0x039A0750 STR W9, [X0 + 0x18]
	0x039A0754 STR X19, [X8 + 0x20]
	0x039A0758 LDP X20, X19, [X31 + 0x10]
	0x039A075C LDP X30, X21, [X31], #0x20
	0x039A0760 RET
	0x039A0764 LDR X8, [X9 + 0x20]
	0x039A0768 MOV X1, X19
	0x039A076C LDP X20, X19, [X31 + 0x10]
	0x039A0770 LDR X8, [X8 + 0xC0]
	0x039A0774 LDR X2, [X8 + 0x70]
	0x039A0778 LDP X30, X21, [X31], #0x20
	0x039A077C B 0x301BF90
	0x039A0780 BL 0x1C16F20
	0x039A0784 ADRP X0, 0x758000
	0x039A0788 LDR X0, [X0 + 0x528]
	0x039A078C BL 0x1C16D08
	0x039A0790 BL 0x1C16F10
	0x039A0794 MOV X19, X0
	0x039A0798 ADRP X0, 0x7B1000
	0x039A079C LDR X0, [X0 + 0x3B0]
	0x039A07A0 BL 0x1C16D08
	0x039A07A4 MOV X1, X0
	0x039A07A8 MOV X0, X19
	0x039A07AC MOV X2, X31
	0x039A07B0 BL 0x330E100
	0x039A07B4 ADRP X0, 0x7B1000
	0x039A07B8 LDR X0, [X0 + 0x3B8]
	0x039A07BC BL 0x1C16D08
	0x039A07C0 MOV X1, X0
	0x039A07C4 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA42000
	007 Move W8, [X21+2932]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x7B2000
	015 Move X0, [X0+832]
	016 Call 0x1C17CF4
	017 Move X0, 0x7B2000
	018 Move X0, [X0+840]
	019 Call 0x1C17CF4
	020 Move X0, 0x7B2000
	021 Move X0, [X0+848]
	022 Call 0x1C17CF4
	023 Move X0, 0x7B2000
	024 Move X0, [X0+728]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2932], W8
	028 Compare X20, 0
	029 JumpIfEqual {92}
	030 Move X22, 0x7B2000
	031 Move X22, [X22+728]
	032 Move X0, X20
	033 Move X1, X31
	034 Call Object.GetInstanceID, X0
	035 Move X8, [X22]
	036 Move W20, W0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {43}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X8, [X22]
	043 Move X8, [X8+184]
	044 Move X0, [X8+16]
	045 Compare X0, 0
	046 JumpIfEqual {92}
	047 Move X8, 0x7B2000
	048 Move X8, [X8+840]
	049 Move W1, W20
	050 Move X2, [X8]
	051 Call Dictionary`2<Int32, ByteEnum>.ContainsKey, X0, X1
	052 Move X8, [X22]
	053 Move W21, W0
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {60}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move X8, [X22]
	060 Move X8, [X8+184]
	061 Move X0, [X8+16]
	062 Compare X0, 0
	063 JumpIfEqual {92}
	064 Move TEMP, X21
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {80}
	068 Move X8, 0x7B2000
	069 Move X8, [X8+848]
	070 Move W1, W20
	071 Move W2, W19
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X3, [X8]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Call Dictionary`2<Int32, ByteEnum>.set_Item, X0, X1, X2
	079 Return 
	080 Move X8, 0x7B2000
	081 Move X8, [X8+832]
	082 Move W1, W20
	083 Move W2, W19
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X3, [X8]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X30, [X31+48]
	090 Call Dictionary`2<Int32, ByteEnum>.Add, X0, X1, X2
	091 Return 
	092 Call 0x1C17F20

Method: System.Void SetCurrentCameraRequest(System.Boolean cameraRequest)

Disassembly:
	0x039A07C8 BL 0x1C16DEC
	0x039A07CC STR X30, [X31 - 0x20]!
	0x039A07D0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+33], W8
	003 Return 

Method: System.Void UpdateAndUseCamera(UnityEngine.Camera camera, System.Nullable`1<UnityEngine.Rendering.GlobalDynamicResolutionSettings> settings = null, System.Action OnResolutionChange = null)

Disassembly:
	0x039A07D4 ADRP X20, 0xA41000
	0x039A07D8 LDRB W8, [X20 + 0xB82]
	0x039A07DC MOV X19, X0
	0x039A07E0 TBNZ X8, 0x0, 0x39A07F8
	0x039A07E4 ADRP X0, 0x7B1000
	0x039A07E8 LDR X0, [X0 + 0x3C0]
	0x039A07EC BL 0x1C16CF4
	0x039A07F0 MOVZ W8, 0x1
	0x039A07F4 STRB W8, [X20 + 0xB82]
	0x039A07F8 LDR X8, [X19 + 0x10]
	0x039A07FC CBZ X8, 0x39A0838
	0x039A0800 LDP W2, W9, [X8 + 0x18]
	0x039A0804 ADD W9, W9, 0x1
	0x039A0808 CMP W2, 0x1
	0x039A080C STP W31, W9, [X8 + 0x18]
	0x039A0810 B.LT 0x39A082C
	0x039A0814 LDR X0, [X8 + 0x10]
	0x039A0818 LDP X20, X19, [X31 + 0x10]
	0x039A081C MOV W1, W31
	0x039A0820 MOV X3, X31
	0x039A0824 LDR X30, [X31], #0x20
	0x039A0828 B 0x339FA34
	0x039A082C LDP X20, X19, [X31 + 0x10]
	0x039A0830 LDR X30, [X31], #0x20
	0x039A0834 RET
	0x039A0838 BL 0x1C16F20
	0x039A083C B 0x39A07CC
	0x039A0840 STP X30, X23, [X31 - 0x30]!
	0x039A0844 STP X22, X21, [X31 + 0x10]
	0x039A0848 STP X20, X19, [X31 + 0x20]
	0x039A084C ADRP X22, 0xA41000
	0x039A0850 ADRP X23, 0x7B0000
	0x039A0854 ADRP X20, 0x7B0000
	0x039A0858 ADRP X21, 0x7B1000
	0x039A085C LDRB W8, [X22 + 0xB83]
	0x039A0860 LDR X23, [X23 + 0x748]
	0x039A0864 LDR X20, [X20 + 0x750]
	0x039A0868 LDR X21, [X21 + 0x3C8]
	0x039A086C MOV X19, X0
	0x039A0870 TBNZ X8, 0x0, 0x39A08C4
	0x039A0874 ADRP X0, 0x7B1000
	0x039A0878 LDR X0, [X0 + 0x3C8]
	0x039A087C BL 0x1C16CF4
	0x039A0880 ADRP X0, 0x753000
	0x039A0884 LDR X0, [X0 + 0xA28]
	0x039A0888 BL 0x1C16CF4
	0x039A088C ADRP X0, 0x7B0000
	0x039A0890 LDR X0, [X0 + 0x750]
	0x039A0894 BL 0x1C16CF4
	0x039A0898 ADRP X0, 0x7B0000
	0x039A089C LDR X0, [X0 + 0x748]
	0x039A08A0 BL 0x1C16CF4
	0x039A08A4 ADRP X0, 0x7B1000
	0x039A08A8 LDR X0, [X0 + 0x3D0]
	0x039A08AC BL 0x1C16CF4
	0x039A08B0 ADRP X0, 0x7B1000
	0x039A08B4 LDR X0, [X0 + 0x3D8]
	0x039A08B8 BL 0x1C16CF4
	0x039A08BC MOVZ W8, 0x1
	0x039A08C0 STRB W8, [X22 + 0xB83]
	0x039A08C4 LDR X0, [X23]
	0x039A08C8 BL 0x1C16F10
	0x039A08CC LDR X1, [X20]
	0x039A08D0 MOV X20, X0
	0x039A08D4 BL 0x301B7C4
	0x039A08D8 MOV X0, X19
	0x039A08DC MOV X1, X31
	0x039A08E0 STR X20, [X19 + 0x10]
	0x039A08E4 BL 0x33BDD8C
	0x039A08E8 MOV X0, X19
	0x039A08EC MOV X1, X31
	0x039A08F0 BL 0x33BE520
	0x039A08F4 LDR X1, [X21]
	0x039A08F8 BL 0x21A891C
	0x039A08FC STR X0, [X19 + 0x18]
	0x039A0900 CBZ X0, 0x39A0914
	0x039A0904 LDP X20, X19, [X31 + 0x20]
	0x039A0908 LDP X22, X21, [X31 + 0x10]
	0x039A090C LDP X30, X23, [X31], #0x30
	0x039A0910 RET
	0x039A0914 MOV X0, X19
	0x039A0918 MOV X1, X31
	0x039A091C BL 0x33BE520
	0x039A0920 ADRP X8, 0x7B1000
	0x039A0924 LDR X8, [X8 + 0x3D8]
	0x039A0928 ADRP X9, 0x7B1000
	0x039A092C LDR X9, [X9 + 0x3D0]
	0x039A0930 MOV X1, X0
	0x039A0934 LDR X8, [X8]
	0x039A0938 MOV X3, X31
	0x039A093C LDR X2, [X9]
	0x039A0940 MOV X0, X8
	0x039A0944 BL 0x3227BD4
	0x039A0948 ADRP X8, 0x753000
	0x039A094C LDR X8, [X8 + 0xA28]
	0x039A0950 MOV X19, X0
	0x039A0954 LDR X8, [X8]
	0x039A0958 LDR W9, [X8 + 0xE0]
	0x039A095C CBNZ W9, 0x39A0968
	0x039A0960 MOV X0, X8
	0x039A0964 BL 0x1C16DFC
	0x039A0968 MOV X0, X19
	0x039A096C LDP X20, X19, [X31 + 0x20]
	0x039A0970 LDP X22, X21, [X31 + 0x10]
	0x039A0974 MOV X1, X31
	0x039A0978 LDP X30, X23, [X31], #0x30
	0x039A097C B 0x3C06048
	0x039A0980 STP X30, X21, [X31 - 0x20]!
	0x039A0984 STP X20, X19, [X31 + 0x10]
	0x039A0988 ADRP X20, 0xA41000
	0x039A098C LDRB W8, [X20 + 0xB84]
	0x039A0990 MOV X19, X0
	0x039A0994 TBNZ X8, 0x0, 0x39A09B8
	0x039A0998 ADRP X0, 0x7B0000
	0x039A099C LDR X0, [X0 + 0x778]
	0x039A09A0 BL 0x1C16CF4
	0x039A09A4 ADRP X0, 0x77C000
	0x039A09A8 LDR X0, [X0 + 0xB38]
	0x039A09AC BL 0x1C16CF4
	0x039A09B0 MOVZ W8, 0x1
	0x039A09B4 STRB W8, [X20 + 0xB84]
	0x039A09B8 LDR X20, [X19 + 0x18]
	0x039A09BC CBZ X20, 0x39A0A5C
	0x039A09C0 ADRP X10, 0x77C000
	0x039A09C4 LDR X8, [X20]
	0x039A09C8 LDR X10, [X10 + 0xB38]
	0x039A09CC ADRP X21, 0x7B0000
	0x039A09D0 LDRH W9, [X8 + 0x12E]
	0x039A09D4 LDR X1, [X10]

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+192], X30
	003 Move [X31+208], X24
	004 Move [X31+216], X23
	005 Move [X31+224], X22
	006 Move [X31+232], X21
	007 Move [X31+240], X20
	008 Move [X31+248], X19
	009 Move X24, 0xA42000
	010 Move X22, 0x754000
	011 Move W8, [X24+2933]
	012 Move X22, [X22+1432]
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Add X23, X31, 128
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x7B2000
	022 Move X0, [X0+728]
	023 Call 0x1C17CF4
	024 Move X0, 0x7B2000
	025 Move X0, [X0+856]
	026 Call 0x1C17CF4
	027 Move X0, 0x7B2000
	028 Move X0, [X0+864]
	029 Call 0x1C17CF4
	030 Move X0, 0x754000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X24+2933], W8
	035 Move X0, [X22]
	036 NotImplemented "Instruction MOVI not yet implemented."
	037 Move [X23+44], V0
	038 Move [X31+144], V0
	039 Move [X31+152], V0
	040 Move [X31+8], V0
	041 Move X24, 0x7B2000
	042 Move W8, [X0+224]
	043 Move X24, [X24+728]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move X8, [X24]
	052 Move W22, W0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfEqual {65}
	056 Move TEMP, X22
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {71}
	060 Move X8, [X24]
	061 Move W21, W31
	062 Move X9, [X8+184]
	063 Move X10, [X9+32]
	064 Move [X9+48], X10
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move TEMP, X22
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {60}
	071 Move X0, X21
	072 Call DynamicResolutionHandler.GetOrCreateDrsInstanceHandler, X0
	073 Move X8, [X24]
	074 Move X8, [X8+184]
	075 Move [X8+48], X0
	076 Compare X21, 0
	077 JumpIfEqual {157}
	078 Move X0, X21
	079 Move X1, X31
	080 Call Object.GetInstanceID, X0
	081 Move X8, [X24]
	082 Move W21, W0
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {89}
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X8, [X24]
	089 Move X9, [X8+184]
	090 Move W10, [X9+40]
	091 Move [X9+40], W21
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CSET not yet implemented."
	094 Move [X9+56], W10
	095 Move W10, [X20]
	096 Move X21, [X9+48]
	097 Compare W10, 0
	098 JumpIfEqual {115}
	099 Move X8, 0x7B2000
	100 Move X8, [X8+864]
	101 Move X0, X20
	102 Move X1, [X8]
	103 Add X8, X31, 64
	104 Call Nullable`1<GlobalDynamicResolutionSettings>.get_Value, X0
	105 Move V0, [X31+64]
	106 Move V1, [X31+80]
	107 Move V2, [X31+6]
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 Move [X31+128], V0
	110 Move [X31+136], V1
	111 Move [X31+10], V2
	112 Move [X23+44], V3
	113 Compare X21, 0
	114 JumpIfNotEqual {136}
	115 Move W10, [X8+224]
	116 Move X9, X21
	117 Compare W10, 0
	118 JumpIfNotEqual {124}
	119 Move X0, X8
	120 Call 0x1C17DFC
	121 Move X8, [X24]
	122 Move X8, [X8+184]
	123 Move X9, [X8+48]
	124 Compare X9, 0
	125 JumpIfEqual {157}
	126 Move V0, [X9+8]
	127 NotImplemented "Instruction LDUR not yet implemented."
	128 NotImplemented "Instruction LDUR not yet implemented."
	129 NotImplemented "Instruction LDUR not yet implemented."
	130 Move [X23+44], V0
	131 Move [X31+144], V2
	132 Move [X31+152], V1
	133 Move [X31+8], V3
	134 Compare X21, 0
	135 JumpIfEqual {157}
	136 Move V0, [X31+128]
	137 Move V1, [X31+144]
	138 Move V2, [X31+10]
	139 NotImplemented "Instruction LDUR not yet implemented."
	140 Add X1, X31, 0
	141 Move X0, X21
	142 Move X2, X19
	143 Move [X31], V0
	144 Move [X31+8], V1
	145 Move [X31+2], V2
	146 Move [X31+44], V3
	147 Call DynamicResolutionHandler.Update, X0, X1, X2
	148 Move X20, [X31+240]
	149 Move X19, [X31+248]
	150 Move X22, [X31+224]
	151 Move X21, [X31+232]
	152 Move X24, [X31+208]
	153 Move X23, [X31+216]
	154 Move X30, [X31+192]
	155 Add X31, X31, 256
	156 Return 
	157 Call 0x1C17F20

Method: System.Void Update(UnityEngine.Rendering.GlobalDynamicResolutionSettings settings, System.Action OnResolutionChange = null)

Disassembly:
	0x039A09D8 LDR X21, [X21 + 0x778]
	0x039A09DC CBZ X9, 0x39A0A00
	0x039A09E0 LDR X10, [X8 + 0xB0]
	0x039A09E4 ADD X10, X10, 0x8
	0x039A09E8 LDUR X11, [X10 - 0x8]
	0x039A09EC CMP X11, X1
	0x039A09F0 B.EQ 0x39A0A10
	0x039A09F4 SUBS X9, X9, 0x1
	0x039A09F8 ADD X10, X10, 0x10
	0x039A09FC B.NE 0x39A09E8
	0x039A0A00 MOV X0, X20
	0x039A0A04 MOV W2, W31
	0x039A0A08 BL 0x1C5C788
	0x039A0A0C B 0x39A0A1C
	0x039A0A10 LDRSW X9, [X10]
	0x039A0A14 ADD X8, X8, X9, 0x4, LSL
	0x039A0A18 ADD X0, X8, 0x138
	0x039A0A1C LDP X8, X1, [X0]
	0x039A0A20 MOV X0, X20
	0x039A0A24 BLR X8
	0x039A0A28 MOV X0, X19
	0x039A0A2C BL 0x39A0A6C
	0x039A0A30 LDR X1, [X19 + 0x18]
	0x039A0A34 MOV X0, X19
	0x039A0A38 BL 0x39A0F2C
	0x039A0A3C LDR X0, [X21]
	0x039A0A40 LDR W8, [X0 + 0xE0]
	0x039A0A44 CBNZ W8, 0x39A0A4C
	0x039A0A48 BL 0x1C16DFC
	0x039A0A4C BL 0x399C120
	0x039A0A50 CBZ X0, 0x39A0A68
	0x039A0A54 MOVZ W8, 0x1
	0x039A0A58 STRB W8, [X0 + 0x50]
	0x039A0A5C LDP X20, X19, [X31 + 0x10]
	0x039A0A60 LDP X30, X21, [X31], #0x20
	0x039A0A64 RET
	0x039A0A68 BL 0x1C16F20
	0x039A0A6C STP X29, X30, [X31 - 0x60]!
	0x039A0A70 STP X28, X27, [X31 + 0x10]
	0x039A0A74 STP X26, X25, [X31 + 0x20]
	0x039A0A78 STP X24, X23, [X31 + 0x30]
	0x039A0A7C STP X22, X21, [X31 + 0x40]
	0x039A0A80 STP X20, X19, [X31 + 0x50]
	0x039A0A84 ADRP X20, 0xA41000
	0x039A0A88 ADRP X21, 0x7B0000
	0x039A0A8C LDRB W8, [X20 + 0xB86]
	0x039A0A90 LDR X21, [X21 + 0x778]
	0x039A0A94 MOV X19, X0
	0x039A0A98 TBNZ X8, 0x0, 0x39A0AF8
	0x039A0A9C ADRP X0, 0x7B0000
	0x039A0AA0 LDR X0, [X0 + 0x778]
	0x039A0AA4 BL 0x1C16CF4
	0x039A0AA8 ADRP X0, 0x7B1000
	0x039A0AAC LDR X0, [X0 + 0x3E0]
	0x039A0AB0 BL 0x1C16CF4
	0x039A0AB4 ADRP X0, 0x753000
	0x039A0AB8 LDR X0, [X0 + 0xE00]
	0x039A0ABC BL 0x1C16CF4
	0x039A0AC0 ADRP X0, 0x7B1000
	0x039A0AC4 LDR X0, [X0 + 0x3E8]
	0x039A0AC8 BL 0x1C16CF4
	0x039A0ACC ADRP X0, 0x7B1000
	0x039A0AD0 LDR X0, [X0 + 0x3F0]
	0x039A0AD4 BL 0x1C16CF4
	0x039A0AD8 ADRP X0, 0x753000
	0x039A0ADC LDR X0, [X0 + 0xE18]
	0x039A0AE0 BL 0x1C16CF4
	0x039A0AE4 ADRP X0, 0x7B0000
	0x039A0AE8 LDR X0, [X0 + 0x810]
	0x039A0AEC BL 0x1C16CF4
	0x039A0AF0 MOVZ W8, 0x1
	0x039A0AF4 STRB W8, [X20 + 0xB86]
	0x039A0AF8 LDR X0, [X21]
	0x039A0AFC LDR W8, [X0 + 0xE0]
	0x039A0B00 CBNZ W8, 0x39A0B08
	0x039A0B04 BL 0x1C16DFC
	0x039A0B08 BL 0x399C120
	0x039A0B0C LDR X21, [X19 + 0x10]
	0x039A0B10 CBZ X21, 0x39A0E50
	0x039A0B14 ADRP X10, 0x7B1000
	0x039A0B18 LDR X8, [X21]
	0x039A0B1C LDR X10, [X10 + 0x3E8]
	0x039A0B20 MOV X20, X0
	0x039A0B24 LDRH W9, [X8 + 0x12E]
	0x039A0B28 LDR X1, [X10]
	0x039A0B2C CBZ X9, 0x39A0B50
	0x039A0B30 LDR X10, [X8 + 0xB0]
	0x039A0B34 ADD X10, X10, 0x8
	0x039A0B38 LDUR X11, [X10 - 0x8]
	0x039A0B3C CMP X11, X1
	0x039A0B40 B.EQ 0x39A0B60
	0x039A0B44 SUBS X9, X9, 0x1
	0x039A0B48 ADD X10, X10, 0x10
	0x039A0B4C B.NE 0x39A0B38
	0x039A0B50 MOV X0, X21
	0x039A0B54 MOV W2, W31
	0x039A0B58 BL 0x1C5C788
	0x039A0B5C B 0x39A0B6C
	0x039A0B60 LDRSW X9, [X10]
	0x039A0B64 ADD X8, X8, X9, 0x4, LSL
	0x039A0B68 ADD X0, X8, 0x138
	0x039A0B6C LDP X8, X1, [X0]
	0x039A0B70 ADRP X25, 0x753000
	0x039A0B74 LDR X25, [X25 + 0xE00]
	0x039A0B78 MOV X0, X21
	0x039A0B7C BLR X8
	0x039A0B80 MOV X21, X0
	0x039A0B84 CBZ X0, 0x39A0E54
	0x039A0B88 ADRP X26, 0x753000
	0x039A0B8C ADRP X27, 0x7B1000
	0x039A0B90 ADRP X28, 0x7B1000
	0x039A0B94 ADRP X29, 0x7B0000
	0x039A0B98 LDR X26, [X26 + 0xE18]
	0x039A0B9C LDR X27, [X27 + 0x3F0]
	0x039A0BA0 LDR X28, [X28 + 0x3E0]
	0x039A0BA4 LDR X29, [X29 + 0x810]
	0x039A0BA8 LDR X8, [X21]
	0x039A0BAC LDR X1, [X26]
	0x039A0BB0 LDRH W9, [X8 + 0x12E]
	0x039A0BB4 CBZ X9, 0x39A0BD8
	0x039A0BB8 LDR X10, [X8 + 0xB0]
	0x039A0BBC ADD X10, X10, 0x8
	0x039A0BC0 LDUR X11, [X10 - 0x8]
	0x039A0BC4 CMP X11, X1
	0x039A0BC8 B.EQ 0x39A0BE8
	0x039A0BCC SUBS X9, X9, 0x1
	0x039A0BD0 ADD X10, X10, 0x10
	0x039A0BD4 B.NE 0x39A0BC0
	0x039A0BD8 MOV X0, X21
	0x039A0BDC MOV W2, W31
	0x039A0BE0 BL 0x1C5C788
	0x039A0BE4 B 0x39A0BF4
	0x039A0BE8 LDRSW X9, [X10]
	0x039A0BEC ADD X8, X8, X9, 0x4, LSL
	0x039A0BF0 ADD X0, X8, 0x138
	0x039A0BF4 LDP X8, X1, [X0]
	0x039A0BF8 MOV X0, X21
	0x039A0BFC BLR X8
	0x039A0C00 TBZ X0, 0x0, 0x39A0DB0
	0x039A0C04 LDR X8, [X21]
	0x039A0C08 LDR X1, [X27]
	0x039A0C0C LDRH W9, [X8 + 0x12E]
	0x039A0C10 CBZ X9, 0x39A0C34
	0x039A0C14 LDR X10, [X8 + 0xB0]
	0x039A0C18 ADD X10, X10, 0x8
	0x039A0C1C LDUR X11, [X10 - 0x8]
	0x039A0C20 CMP X11, X1
	0x039A0C24 B.EQ 0x39A0C44
	0x039A0C28 SUBS X9, X9, 0x1
	0x039A0C2C ADD X10, X10, 0x10
	0x039A0C30 B.NE 0x39A0C1C
	0x039A0C34 MOV X0, X21
	0x039A0C38 MOV W2, W31
	0x039A0C3C BL 0x1C5C788
	0x039A0C40 B 0x39A0C50
	0x039A0C44 LDRSW X9, [X10]
	0x039A0C48 ADD X8, X8, X9, 0x4, LSL
	0x039A0C4C ADD X0, X8, 0x138
	0x039A0C50 LDP X8, X1, [X0]
	0x039A0C54 MOV X0, X21
	0x039A0C58 BLR X8

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X22, 0xA42000
	010 Move W8, [X22+2934]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x7B2000
	019 Move X0, [X0+728]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2934], W8
	023 Move V3, [X21+16]
	024 Move V0, [X21+32]
	025 NotImplemented "Instruction LDUR not yet implemented."
	026 Move V2, [X21]
	027 Move X22, 0x7B2000
	028 Move X22, [X22+728]
	029 Add X1, X31, 0
	030 Move X0, X19
	031 Move [X31+44], V1
	032 Move [X31+16], V3
	033 Move [X31+24], V0
	034 Move [X31], V2
	035 Call DynamicResolutionHandler.ProcessSettings, X0, X1
	036 Move W8, [X19+16]
	037 Compare W8, 0
	038 JumpIfEqual {88}
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X22]
	045 Move X8, [X0+184]
	046 Move W9, [X8+56]
	047 Compare W9, 0
	048 JumpIfEqual {88}
	049 Move W9, [X19+32]
	050 Compare W9, 0
	051 JumpIfNotEqual {117}
	052 Move W9, [X0+224]
	053 Compare W9, 0
	054 JumpIfNotEqual {58}
	055 Call 0x1C17DFC
	056 Move X8, [X22]
	057 Move X8, [X8+184]
	058 Move X9, [X8+8]
	059 Compare X9, 0
	060 JumpIfEqual {179}
	061 NotImplemented "Instruction LDRSW not yet implemented."
	062 Move W10, [X9+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Add X10, X9, X8
	065 Move W11, [X10+32]
	066 Compare W11, 0
	067 JumpIfEqual {98}
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X8, X9, X8
	070 Move X8, [X8+40]
	071 Compare X8, 0
	072 JumpIfEqual {179}
	073 Move X9, [X8+24]
	074 Move X0, [X8+64]
	075 Move X1, [X8+40]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move S2, [X19+20]
	078 Move S3, [X19+24]
	079 Move S1, 1
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 NotImplemented "Instruction FMIN not yet implemented."
	082 Move S1, W31
	083 NotImplemented "Instruction FCSEL not yet implemented."
	084 NotImplemented "Instruction FMAX not yet implemented."
	085 Subtract S1, S3, S2
	086 Multiply S0, S1, S0
	087 Add S0, S2, S0
	088 Move X0, X19
	089 Call DynamicResolutionHandler.FlushScalableBufferManagerState, X0
	090 Move X0, [X22]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {96}
	094 Call 0x1C17DFC
	095 Move X0, [X22]
	096 Move X8, [X0+184]
	097 Move [X8+56], W31
	098 Move X8, [X10+40]
	099 Compare X8, 0
	100 JumpIfEqual {179}
	101 Move X9, [X8+24]
	102 Move X0, [X8+64]
	103 Move X1, [X8+40]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move S2, [X19+20]
	106 Move S3, [X19+24]
	107 Move S1, 5
	108 Move W8, 0x42C80000
	109 NotImplemented "Instruction FMAXNM not yet implemented."
	110 Move S1, W8
	111 NotImplemented "Instruction FDIV not yet implemented."
	112 NotImplemented "Instruction FCMP not yet implemented."
	113 NotImplemented "Instruction FCSEL not yet implemented."
	114 NotImplemented "Instruction FCMP not yet implemented."
	115 NotImplemented "Instruction FCSEL not yet implemented."
	116 Move [X19+28], S0
	117 Move V0, [X19+28]
	118 Move V1, [X19+36]
	119 Move W9, [X19+40]
	120 Move W21, W31
	121 Move [X19+36], S0
	122 NotImplemented "Instruction FCMP not yet implemented."
	123 NotImplemented "Instruction CSET not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction CSEL not yet implemented."
	126 Compare W9, 0
	127 JumpIfNotEqual {146}
	128 Move W9, [X19+80]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 NotImplemented "Instruction CSEL not yet implemented."
	131 Move X0, X19
	132 Call DynamicResolutionHandler.FlushScalableBufferManagerState, X0
	133 Move W21, W0
	134 Move X0, X31
	135 Call ScalableBufferManager.get_widthScaleFactor
	136 Move V1, [X19+44]
	137 NotImplemented "Instruction FCMP not yet implemented."
	138 Move X0, X31
	139 Call ScalableBufferManager.get_heightScaleFactor
	140 Move V1, [X19+48]
	141 Move W8, W23
	142 NotImplemented "Instruction FCMP not yet implemented."
	143 Move W23, W24
	144 Move W21, 1
	145 Move W8, W23
	146 Compare X20, 0
	147 JumpIfEqual {156}
	148 And W9, W21, 1
	149 Or W8, W8, W9
	150 Compare W8, 0
	151 JumpIfEqual {156}
	152 Move X8, [X20+24]
	153 Move X0, [X20+64]
	154 Move X1, [X20+40]
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Move X0, [X22]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {162}
	160 Call 0x1C17DFC
	161 Move X0, [X22]
	162 Move X8, [X0+184]
	163 Move X0, X31
	164 Move [X8+56], W31
	165 Call ScalableBufferManager.get_widthScaleFactor
	166 Move X0, X31
	167 Move [X19+44], S0
	168 Call ScalableBufferManager.get_heightScaleFactor
	169 Move [X19+48], S0
	170 Move X20, [X31+112]
	171 Move X19, [X31+120]
	172 Move X22, [X31+96]
	173 Move X21, [X31+104]
	174 Move X24, [X31+80]
	175 Move X23, [X31+88]
	176 Move X30, [X31+64]
	177 Add X31, X31, 128
	178 Return 
	179 Call 0x1C17F20
	180 Call 0x1C17F28

Method: System.Boolean SoftwareDynamicResIsEnabled()

Disassembly:
	0x039A0C5C MOV X22, X0
	0x039A0C60 CBZ X0, 0x39A0E48
	0x039A0C64 LDR X8, [X22]
	0x039A0C68 LDR X1, [X28]
	0x039A0C6C LDRH W9, [X8 + 0x12E]
	0x039A0C70 CBZ X9, 0x39A0C94
	0x039A0C74 LDR X10, [X8 + 0xB0]
	0x039A0C78 ADD X10, X10, 0x8
	0x039A0C7C LDUR X11, [X10 - 0x8]
	0x039A0C80 CMP X11, X1
	0x039A0C84 B.EQ 0x39A0CA4
	0x039A0C88 SUBS X9, X9, 0x1
	0x039A0C8C ADD X10, X10, 0x10
	0x039A0C90 B.NE 0x39A0C7C
	0x039A0C94 MOVZ W2, 0x1
	0x039A0C98 MOV X0, X22
	0x039A0C9C BL 0x1C5C788
	0x039A0CA0 B 0x39A0CB4
	0x039A0CA4 LDR W9, [X10]
	0x039A0CA8 ADD W9, W9, 0x1
	0x039A0CAC ADD X8, X8, W9, 0x4, SXTW
	0x039A0CB0 ADD X0, X8, 0x138
	0x039A0CB4 LDP X8, X1, [X0]

ISIL:
	001 Move W8, [X0+33]
	002 Compare W8, 0
	003 JumpIfEqual {20}
	004 Move W8, [X0+16]
	005 Compare W8, 0
	006 JumpIfEqual {20}
	007 Move V0, [X0+28]
	008 Move S1, 1
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move W8, [X0+41]
	011 Compare W8, 0
	012 JumpIfNotEqual {15}
	013 Move W8, [X0+68]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W8, [X0+40]
	016 Compare W8, 0
	017 JumpIfEqual {22}
	018 Move W0, 1
	019 Return X0
	020 Move W0, W31
	021 Return X0
	022 Move W8, [X0+80]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Return X0

Method: System.Boolean HardwareDynamicResIsEnabled()

Disassembly:
	0x0399FC3C LDP X20, X19, [X31 + 0x70]
	0x0399FC40 LDP X22, X21, [X31 + 0x60]
	0x0399FC44 LDP X24, X23, [X31 + 0x50]
	0x0399FC48 LDR X30, [X31 + 0x40]
	0x0399FC4C ADD X31, X31, 0x80
	0x0399FC50 RET
	0x0399FC54 BL 0x1C16F20
	0x0399FC58 BL 0x1C16F28
	0x0399FC5C LDRB W8, [X0 + 0x21]
	0x0399FC60 CBZ W8, 0x399FCA0
	0x0399FC64 LDRB W8, [X0 + 0x10]
	0x0399FC68 CBZ W8, 0x399FCA0

ISIL:
	001 Move W8, [X0+40]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, W31
	005 Return X0
	006 Move W8, [X0+33]
	007 Compare W8, 0
	008 JumpIfEqual {4}
	009 Move W8, [X0+16]
	010 Compare W8, 0
	011 JumpIfEqual {4}
	012 Move W8, [X0+80]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Return X0

Method: System.Boolean RequestsHardwareDynamicResolution()

Disassembly:
	0x039A0CB8 MOV X0, X22
	0x039A0CBC BLR X8
	0x039A0CC0 LDR X8, [X22]
	0x039A0CC4 LDR X1, [X28]
	0x039A0CC8 MOV X23, X0
	0x039A0CCC LDRH W9, [X8 + 0x12E]
	0x039A0CD0 CBZ X9, 0x39A0CF4
	0x039A0CD4 LDR X10, [X8 + 0xB0]

ISIL:
	001 Move W8, [X0+40]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, W31
	005 Return X0
	006 Move W8, [X0+80]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Return X0

Method: System.Boolean DynamicResolutionEnabled()

Disassembly:
	0x039A0CD8 ADD X10, X10, 0x8
	0x039A0CDC LDUR X11, [X10 - 0x8]
	0x039A0CE0 CMP X11, X1
	0x039A0CE4 B.EQ 0x39A0D04
	0x039A0CE8 SUBS X9, X9, 0x1
	0x039A0CEC ADD X10, X10, 0x10
	0x039A0CF0 B.NE 0x39A0CDC
	0x039A0CF4 MOV X0, X22
	0x039A0CF8 MOV W2, W31
	0x039A0CFC BL 0x1C5C788
	0x039A0D00 B 0x39A0D10
	0x039A0D04 LDRSW X9, [X10]
	0x039A0D08 ADD X8, X8, X9, 0x4, LSL
	0x039A0D0C ADD X0, X8, 0x138
	0x039A0D10 LDP X8, X1, [X0]
	0x039A0D14 MOV X0, X22
	0x039A0D18 BLR X8
	0x039A0D1C MOV X1, X0

ISIL:
	001 Move W8, [X0+33]
	002 Compare W8, 0
	003 JumpIfEqual {15}
	004 Move W8, [X0+16]
	005 Compare W8, 0
	006 JumpIfEqual {15}
	007 Move V0, [X0+28]
	008 Move S1, 1
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move W8, [X0+41]
	011 Compare W8, 0
	012 JumpIfEqual {17}
	013 Move W0, 1
	014 Return X0
	015 Move W0, W31
	016 Return X0
	017 Move W8, [X0+68]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSET not yet implemented."
	020 Return X0

Method: System.Void ForceSoftwareFallback()

Disassembly:
	0x039A0D20 CBZ X20, 0x39A0E4C
	0x039A0D24 MOVZ W2, 0x1
	0x039A0D28 MOV X0, X20

ISIL:
	001 Move W8, 1
	002 Move [X0+40], W8
	003 Return 

Method: UnityEngine.Vector2Int GetScaledSize(UnityEngine.Vector2Int size)

Disassembly:
	0x039A0D2C MOV W3, W31
	0x039A0D30 MOV W4, W31
	0x039A0D34 BL 0x399C198
	0x039A0D38 CBZ X0, 0x39A0E40
	0x039A0D3C LDR X8, [X22]
	0x039A0D40 LDR X24, [X0 + 0x28]
	0x039A0D44 LDR X1, [X25]
	0x039A0D48 LDRH W9, [X8 + 0x12E]
	0x039A0D4C CBZ X9, 0x39A0D70
	0x039A0D50 LDR X10, [X8 + 0xB0]
	0x039A0D54 ADD X10, X10, 0x8
	0x039A0D58 LDUR X11, [X10 - 0x8]
	0x039A0D5C CMP X11, X1
	0x039A0D60 B.EQ 0x39A0D80
	0x039A0D64 SUBS X9, X9, 0x1
	0x039A0D68 ADD X10, X10, 0x10
	0x039A0D6C B.NE 0x39A0D58
	0x039A0D70 MOV X0, X22
	0x039A0D74 MOV W2, W31
	0x039A0D78 BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+16]
	005 Move X19, X1
	006 Move [X0+60], X1
	007 Compare W8, 0
	008 JumpIfEqual {20}
	009 Move W8, [X0+33]
	010 Move X20, X0
	011 Compare W8, 0
	012 JumpIfEqual {20}
	013 Move X0, X20
	014 Call DynamicResolutionHandler.GetResolvedScale, X0
	015 Move X0, X20
	016 Move X1, X19
	017 Call DynamicResolutionHandler.ApplyScalesOnSize, X0, X1, X2
	018 Move X19, X0
	019 Move [X20+52], X0
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2Int ApplyScalesOnSize(UnityEngine.Vector2Int size)

Disassembly:
	0x039A0D7C B 0x39A0D8C
	0x039A0D80 LDRSW X9, [X10]
	0x039A0D84 ADD X8, X8, X9, 0x4, LSL
	0x039A0D88 ADD X0, X8, 0x138
	0x039A0D8C LDP X8, X1, [X0]
	0x039A0D90 MOV X0, X22
	0x039A0D94 BLR X8
	0x039A0D98 CBZ X24, 0x39A0E44
	0x039A0D9C LDR X2, [X29]
	0x039A0DA0 MOV X0, X24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call DynamicResolutionHandler.GetResolvedScale, X0
	007 Move X0, X20
	008 Move X1, X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]

Method: UnityEngine.Vector2Int ApplyScalesOnSize(UnityEngine.Vector2Int size, UnityEngine.Vector2 scales)

Disassembly:
	0x039A0DA4 MOV X1, X23
	0x039A0DA8 BL 0x24982D0
	0x039A0DAC B 0x39A0BA8
	0x039A0DB0 MOV X22, X31
	0x039A0DB4 CBZ X21, 0x39A0E10
	0x039A0DB8 LDR X8, [X21]
	0x039A0DBC LDR X1, [X25]
	0x039A0DC0 LDRH W9, [X8 + 0x12E]
	0x039A0DC4 CBZ X9, 0x39A0DE8
	0x039A0DC8 LDR X10, [X8 + 0xB0]
	0x039A0DCC ADD X10, X10, 0x8
	0x039A0DD0 LDUR X11, [X10 - 0x8]
	0x039A0DD4 CMP X11, X1
	0x039A0DD8 B.EQ 0x39A0DF8
	0x039A0DDC SUBS X9, X9, 0x1
	0x039A0DE0 ADD X10, X10, 0x10
	0x039A0DE4 B.NE 0x39A0DD0
	0x039A0DE8 MOV X0, X21
	0x039A0DEC MOV W2, W31
	0x039A0DF0 BL 0x1C5C788
	0x039A0DF4 B 0x39A0E04
	0x039A0DF8 LDRSW X9, [X10]
	0x039A0DFC ADD X8, X8, X9, 0x4, LSL
	0x039A0E00 ADD X0, X8, 0x138
	0x039A0E04 LDP X8, X1, [X0]
	0x039A0E08 MOV X0, X21
	0x039A0E0C BLR X8
	0x039A0E10 CBNZ X22, 0x39A0E58
	0x039A0E14 STR X31, [X19 + 0x10]
	0x039A0E18 CBZ X20, 0x39A0E50
	0x039A0E1C MOV X0, X20
	0x039A0E20 MOV X1, X19
	0x039A0E24 LDP X20, X19, [X31 + 0x50]
	0x039A0E28 LDP X22, X21, [X31 + 0x40]
	0x039A0E2C LDP X24, X23, [X31 + 0x30]
	0x039A0E30 LDP X26, X25, [X31 + 0x20]
	0x039A0E34 LDP X28, X27, [X31 + 0x10]
	0x039A0E38 LDP X29, X30, [X31], #0x60
	0x039A0E3C B 0x39A1198
	0x039A0E40 BL 0x1C16F20
	0x039A0E44 BL 0x1C16F20
	0x039A0E48 BL 0x1C16F20
	0x039A0E4C BL 0x1C16F20
	0x039A0E50 BL 0x1C16F20
	0x039A0E54 BL 0x1C16F20
	0x039A0E58 MOV X0, X22
	0x039A0E5C BL 0x1C16F18
	0x039A0E60 B 0x39A0E8C
	0x039A0E64 B 0x39A0E8C
	0x039A0E68 B 0x39A0E8C
	0x039A0E6C B 0x39A0E8C
	0x039A0E70 B 0x39A0E8C
	0x039A0E74 B 0x39A0E8C
	0x039A0E78 B 0x39A0E8C
	0x039A0E7C B 0x39A0E8C
	0x039A0E80 B 0x39A0E8C
	0x039A0E84 B 0x39A0E8C
	0x039A0E88 B 0x39A0E8C
	0x039A0E8C MOV X23, X0
	0x039A0E90 CMP W1, 0x1
	0x039A0E94 B.NE 0x39A0EAC
	0x039A0E98 MOV X0, X23
	0x039A0E9C BL 0x3EB1AD0
	0x039A0EA0 LDR X22, [X0]
	0x039A0EA4 BL 0x3EB1AE0
	0x039A0EA8 B 0x39A0DB4
	0x039A0EAC MOV X22, X31
	0x039A0EB0 B 0x39A0EB8
	0x039A0EB4 MOV X23, X0
	0x039A0EB8 CBZ X21, 0x39A0F14
	0x039A0EBC LDR X8, [X21]
	0x039A0EC0 LDR X1, [X25]
	0x039A0EC4 LDRH W9, [X8 + 0x12E]
	0x039A0EC8 CBZ X9, 0x39A0EEC
	0x039A0ECC LDR X10, [X8 + 0xB0]
	0x039A0ED0 ADD X10, X10, 0x8
	0x039A0ED4 LDUR X11, [X10 - 0x8]
	0x039A0ED8 CMP X11, X1
	0x039A0EDC B.EQ 0x39A0EFC
	0x039A0EE0 SUBS X9, X9, 0x1
	0x039A0EE4 ADD X10, X10, 0x10
	0x039A0EE8 B.NE 0x39A0ED4
	0x039A0EEC MOV X0, X21
	0x039A0EF0 MOV W2, W31
	0x039A0EF4 BL 0x1C5C788
	0x039A0EF8 B 0x39A0F08
	0x039A0EFC LDRSW X9, [X10]
	0x039A0F00 ADD X8, X8, X9, 0x4, LSL
	0x039A0F04 ADD X0, X8, 0x138
	0x039A0F08 LDP X8, X1, [X0]
	0x039A0F0C MOV X0, X21
	0x039A0F10 BLR X8
	0x039A0F14 CBNZ X22, 0x39A0F20
	0x039A0F18 MOV X0, X23
	0x039A0F1C BL 0x1D2C690
	0x039A0F20 MOV X0, X22
	0x039A0F24 BL 0x1C16F18
	0x039A0F28 BL 0x1990590

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xA42000
	012 Move W8, [X20+2935]
	013 Move V8, V1
	014 Move V9, V0
	015 Move X19, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x754000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2935], W8
	026 Move X23, 0xA39000
	027 Move X24, 0x754000
	028 Move W8, [X23+2750]
	029 Move X24, [X24+1448]
	030 Move X20, X19
	031 ShiftRight X20, 32
	032 And X20, X20, 0x7FFFFFFF
	033 NotImplemented "Instruction SCVTF not yet implemented."
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0x754000
	037 Move X0, [X0+1448]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X23+2750], W8
	041 Move X0, [X24]
	042 Multiply S9, S9, S10
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfEqual {47}
	046 Move W8, W31
	047 Call 0x1C17DFC
	048 Move W8, [X23+2750]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move W10, 0x7F800000
	052 NotImplemented "Instruction FRINTP not yet implemented."
	053 Move S1, W10
	054 NotImplemented "Instruction FCVTPS not yet implemented."
	055 Move W11, 0x80000000
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 NotImplemented "Instruction SCVTF not yet implemented."
	059 Compare W8, 0
	060 JumpIfEqual {66}
	061 Move X0, 0x754000
	062 Move X0, [X0+1448]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X23+2750], W8
	066 Move X0, [X24]
	067 Multiply S8, S8, S9
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move W8, 0x7F800000
	073 Move W9, [X21+40]
	074 NotImplemented "Instruction FRINTP not yet implemented."
	075 Move S1, W8
	076 NotImplemented "Instruction FCVTPS not yet implemented."
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move W8, 0x80000000
	079 NotImplemented "Instruction CSEL not yet implemented."
	080 Compare W9, 0
	081 JumpIfNotEqual {84}
	082 Move W8, [X21+80]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 And W8, W22, 1
	085 And W9, W23, 1
	086 Add W22, W8, W22
	087 Add W23, W9, W23
	088 Move X0, [X24]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move W0, W22
	094 Move W1, W19
	095 Move X2, X31
	096 Call Math.Min, X0, X1
	097 Move W19, W0
	098 Move W0, W23
	099 Move W1, W20
	100 Move X2, X31
	101 Call Math.Min, X0, X1
	102 Move W8, W19
	103 Move X20, [X31+64]
	104 Move X19, [X31+72]
	105 Move X22, [X31+48]
	106 Move X21, [X31+56]
	107 Move X24, [X31+32]
	108 Move X23, [X31+40]
	109 Move X30, [X31+24]
	110 Move D9, [X31+8]
	111 Move D8, [X31+16]
	112 NotImplemented "Instruction BFM not yet implemented."
	113 Move X0, X8
	114 Move V10, [X31+80]
	115 Return X0

Method: System.Single GetCurrentScale()

Disassembly:
	0x039A0F2C STP X30, X23, [X31 - 0x30]!
	0x039A0F30 STP X22, X21, [X31 + 0x10]
	0x039A0F34 STP X20, X19, [X31 + 0x20]
	0x039A0F38 ADRP X21, 0xA41000
	0x039A0F3C ADRP X23, 0x7B1000
	0x039A0F40 ADRP X22, 0x7B0000
	0x039A0F44 LDRB W8, [X21 + 0xB85]

ISIL:
	001 Move W8, [X0+16]
	002 Move S0, 1
	003 Compare W8, 0
	004 JumpIfEqual {9}
	005 Move W8, [X0+33]
	006 Compare W8, 0
	007 JumpIfEqual {9}
	008 Move V0, [X0+28]
	009 Return V0

Method: UnityEngine.Vector2Int GetLastScaledSize()

Disassembly:
	0x039A0F48 LDR X23, [X23 + 0x3F8]
	0x039A0F4C LDR X22, [X22 + 0x778]

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 Return X0

Method: System.Single GetLowResMultiplier(System.Single targetLowRes)

Disassembly:
	0x039A0F50 MOV X20, X1
	0x039A0F54 MOV X19, X0

ISIL:
	001 Move V1, [X0+128]

Method: System.Single GetLowResMultiplier(System.Single targetLowRes, System.Single minimumThreshold)

Disassembly:
	0x039A0F58 TBNZ X8, 0x0, 0x39A0FB8
	0x039A0F5C ADRP X0, 0x7B1000
	0x039A0F60 LDR X0, [X0 + 0x400]
	0x039A0F64 BL 0x1C16CF4
	0x039A0F68 ADRP X0, 0x7B0000
	0x039A0F6C LDR X0, [X0 + 0x778]
	0x039A0F70 BL 0x1C16CF4
	0x039A0F74 ADRP X0, 0x77C000
	0x039A0F78 LDR X0, [X0 + 0xB38]
	0x039A0F7C BL 0x1C16CF4
	0x039A0F80 ADRP X0, 0x7B1000
	0x039A0F84 LDR X0, [X0 + 0x408]
	0x039A0F88 BL 0x1C16CF4
	0x039A0F8C ADRP X0, 0x7B1000
	0x039A0F90 LDR X0, [X0 + 0x410]
	0x039A0F94 BL 0x1C16CF4
	0x039A0F98 ADRP X0, 0x7B1000
	0x039A0F9C LDR X0, [X0 + 0x418]
	0x039A0FA0 BL 0x1C16CF4
	0x039A0FA4 ADRP X0, 0x7B1000
	0x039A0FA8 LDR X0, [X0 + 0x3F8]
	0x039A0FAC BL 0x1C16CF4
	0x039A0FB0 MOVZ W8, 0x1
	0x039A0FB4 STRB W8, [X21 + 0xB85]
	0x039A0FB8 LDR X0, [X23]
	0x039A0FBC BL 0x1C16F10
	0x039A0FC0 MOV X1, X31
	0x039A0FC4 MOV X21, X0
	0x039A0FC8 BL 0x33BDD8C
	0x039A0FCC LDR X0, [X22]
	0x039A0FD0 LDR W8, [X0 + 0xE0]
	0x039A0FD4 CBNZ W8, 0x39A0FDC
	0x039A0FD8 BL 0x1C16DFC
	0x039A0FDC BL 0x399C120
	0x039A0FE0 CBZ X21, 0x39A10D4
	0x039A0FE4 ADRP X8, 0x7B1000
	0x039A0FE8 LDR X8, [X8 + 0x410]
	0x039A0FEC STR X0, [X21 + 0x10]
	0x039A0FF0 ADRP X22, 0x7B1000
	0x039A0FF4 LDR X0, [X8]
	0x039A0FF8 LDR X22, [X22 + 0x408]
	0x039A0FFC BL 0x1C16F10
	0x039A1000 LDR X1, [X22]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xA42000
	007 Move W8, [X20+2936]
	008 Move V9, V1
	009 Move V8, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x754000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2936], W8
	020 Move W8, [X19+16]
	021 Compare W8, 0
	022 JumpIfEqual {44}
	023 Move X8, 0x754000
	024 Move X8, [X8+1448]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W8, 0x42C80000
	031 Move S0, W8
	032 NotImplemented "Instruction FDIV not yet implemented."
	033 Move V1, V8
	034 Move X0, X31
	035 Call Math.Min, V0, V1
	036 Move V1, [X19+28]
	037 Multiply S2, S1, S8
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction FDIV not yet implemented."
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move S8, W31
	042 Move S1, 1
	043 NotImplemented "Instruction FMIN not yet implemented."
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move V0, V8
	048 Move D9, [X31+48]
	049 Move D8, [X31+56]
	050 Return V0

Method: System.Void .cctor()

Disassembly:
	0x039A1004 MOV X22, X0
	0x039A1008 BL 0x301B7C4
	0x039A100C LDR X0, [X21 + 0x10]
	0x039A1010 STR X22, [X21 + 0x18]
	0x039A1014 CBZ X0, 0x39A10D4
	0x039A1018 ADRP X22, 0x7B0000
	0x039A101C ADRP X23, 0x7B0000
	0x039A1020 LDR X22, [X22 + 0x400]
	0x039A1024 LDR X23, [X23 + 0x418]
	0x039A1028 MOV X1, X19
	0x039A102C BL 0x39A10EC
	0x039A1030 STR X20, [X19 + 0x18]
	0x039A1034 LDR X8, [X21 + 0x18]
	0x039A1038 STR X8, [X19 + 0x10]
	0x039A103C LDR X0, [X22]
	0x039A1040 BL 0x1C16F10
	0x039A1044 LDR X2, [X23]
	0x039A1048 MOV X1, X21
	0x039A104C MOV X3, X31
	0x039A1050 MOV X20, X0
	0x039A1054 BL 0x2A6B948
	0x039A1058 LDR X19, [X19 + 0x18]
	0x039A105C CBZ X19, 0x39A10D4
	0x039A1060 ADRP X10, 0x77B000
	0x039A1064 LDR X8, [X19]
	0x039A1068 LDR X10, [X10 + 0xB38]
	0x039A106C LDRH W9, [X8 + 0x12E]
	0x039A1070 LDR X1, [X10]
	0x039A1074 CBZ X9, 0x39A1098
	0x039A1078 LDR X10, [X8 + 0xB0]
	0x039A107C ADD X10, X10, 0x8
	0x039A1080 LDUR X11, [X10 - 0x8]
	0x039A1084 CMP X11, X1
	0x039A1088 B.EQ 0x39A10A8
	0x039A108C SUBS X9, X9, 0x1
	0x039A1090 ADD X10, X10, 0x10
	0x039A1094 B.NE 0x39A1080
	0x039A1098 MOVZ W2, 0x1
	0x039A109C MOV X0, X19
	0x039A10A0 BL 0x1C5C788
	0x039A10A4 B 0x39A10B8
	0x039A10A8 LDR W9, [X10]
	0x039A10AC ADD W9, W9, 0x1
	0x039A10B0 ADD X8, X8, W9, 0x4, SXTW
	0x039A10B4 ADD X0, X8, 0x138
	0x039A10B8 LDP X3, X2, [X0]
	0x039A10BC MOV X0, X19
	0x039A10C0 MOV X1, X20
	0x039A10C4 LDP X20, X19, [X31 + 0x20]
	0x039A10C8 LDP X22, X21, [X31 + 0x10]
	0x039A10CC LDP X30, X23, [X31], #0x30
	0x039A10D0 BR X3
	0x039A10D4 BL 0x1C16F20
	0x039A10D8 MOVZ W8, 0x1
	0x039A10DC STRB W8, [X0 + 0x50]
	0x039A10E0 RET
	0x039A10E4 MOV X1, X31
	0x039A10E8 B 0x33BDD8C
	0x039A10EC STP X30, X21, [X31 - 0x20]!
	0x039A10F0 STP X20, X19, [X31 + 0x10]
	0x039A10F4 ADRP X21, 0xA40000
	0x039A10F8 LDRB W8, [X21 + 0xBD1]
	0x039A10FC MOV X20, X1
	0x039A1100 MOV X19, X0
	0x039A1104 TBNZ X8, 0x0, 0x39A111C
	0x039A1108 ADRP X0, 0x7B0000
	0x039A110C LDR X0, [X0 + 0x420]
	0x039A1110 BL 0x1C16CF4
	0x039A1114 MOVZ W8, 0x1
	0x039A1118 STRB W8, [X21 + 0xBD1]
	0x039A111C CBZ X20, 0x39A1194
	0x039A1120 ADRP X10, 0x7B0000
	0x039A1124 LDR X8, [X20]
	0x039A1128 LDR X10, [X10 + 0x420]
	0x039A112C LDRH W9, [X8 + 0x12E]
	0x039A1130 LDR X1, [X10]
	0x039A1134 CBZ X9, 0x39A1158
	0x039A1138 LDR X10, [X8 + 0xB0]
	0x039A113C ADD X10, X10, 0x8
	0x039A1140 LDUR X11, [X10 - 0x8]
	0x039A1144 CMP X11, X1
	0x039A1148 B.EQ 0x39A1168
	0x039A114C SUBS X9, X9, 0x1
	0x039A1150 ADD X10, X10, 0x10
	0x039A1154 B.NE 0x39A1140
	0x039A1158 MOV X0, X20
	0x039A115C MOV W2, W31
	0x039A1160 BL 0x1C5C788
	0x039A1164 B 0x39A1174
	0x039A1168 LDRSW X9, [X10]
	0x039A116C ADD X8, X8, X9, 0x4, LSL
	0x039A1170 ADD X0, X8, 0x138
	0x039A1174 LDP X8, X1, [X0]
	0x039A1178 MOV X0, X20
	0x039A117C BLR X8
	0x039A1180 MOV X1, X0
	0x039A1184 MOV X0, X19
	0x039A1188 LDP X20, X19, [X31 + 0x10]
	0x039A118C LDP X30, X21, [X31], #0x20
	0x039A1190 B 0x39A934C
	0x039A1194 BL 0x1C16F20
	0x039A1198 STP X30, X21, [X31 - 0x20]!
	0x039A119C STP X20, X19, [X31 + 0x10]
	0x039A11A0 ADRP X21, 0xA40000
	0x039A11A4 LDRB W8, [X21 + 0xBD2]
	0x039A11A8 MOV X20, X1
	0x039A11AC MOV X19, X0
	0x039A11B0 TBNZ X8, 0x0, 0x39A11C8
	0x039A11B4 ADRP X0, 0x7B0000
	0x039A11B8 LDR X0, [X0 + 0x420]
	0x039A11BC BL 0x1C16CF4
	0x039A11C0 MOVZ W8, 0x1
	0x039A11C4 STRB W8, [X21 + 0xBD2]
	0x039A11C8 CBZ X20, 0x39A1240
	0x039A11CC ADRP X10, 0x7B0000
	0x039A11D0 LDR X8, [X20]
	0x039A11D4 LDR X10, [X10 + 0x420]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xA41000
	009 Move X21, 0x7B1000
	010 Move X19, 0x7B1000
	011 Move X23, 0x7B1000
	012 Move X22, 0x7B1000
	013 Move W8, [X20+2937]
	014 Move X21, [X21+728]
	015 Move X19, [X19+872]
	016 Move X23, [X23+880]
	017 Move X22, [X22+888]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {48}
	022 Move X0, 0x7B1000
	023 Move X0, [X0+896]
	024 Call 0x1C17CF4
	025 Move X0, 0x7B1000
	026 Move X0, [X0+904]
	027 Call 0x1C17CF4
	028 Move X0, 0x7B1000
	029 Move X0, [X0+912]
	030 Call 0x1C17CF4
	031 Move X0, 0x7B1000
	032 Move X0, [X0+920]
	033 Call 0x1C17CF4
	034 Move X0, 0x7B1000
	035 Move X0, [X0+888]
	036 Call 0x1C17CF4
	037 Move X0, 0x7B1000
	038 Move X0, [X0+728]
	039 Call 0x1C17CF4
	040 Move X0, 0x7B1000
	041 Move X0, [X0+880]
	042 Call 0x1C17CF4
	043 Move X0, 0x7B1000
	044 Move X0, [X0+872]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+2937], W8
	048 Move X8, [X21]
	049 Move W1, 2
	050 Move X8, [X8+184]
	051 Move [X8], W31
	052 Move X0, [X19]
	053 Call 0x1C17D6C
	054 Move X8, [X23]
	055 Move X19, X0
	056 Move X0, X8
	057 Call 0x1C17F10
	058 Move X2, [X22]
	059 Move X1, X31
	060 Move X20, X0
	061 Call PerformDynamicRes..ctor, X0, X1, X2
	062 Compare X19, 0
	063 JumpIfEqual {129}
	064 Move W8, [X19+24]
	065 Compare W8, 0
	066 JumpIfEqual {128}
	067 Move W24, 1
	068 Move [X19+32], X24
	069 Move [X19+40], X20
	070 Move X0, [X23]
	071 Call 0x1C17F10
	072 Move X2, [X22]
	073 Move X1, X31
	074 Move X20, X0
	075 Call PerformDynamicRes..ctor, X0, X1, X2
	076 Move W8, [X19+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move [X19+48], X24
	079 Move [X19+56], X20
	080 Move X8, [X21]
	081 Move X9, 0x7B1000
	082 Move X20, 0x7B1000
	083 Move X22, 0x7B1000
	084 Move X8, [X8+184]
	085 Move X9, [X9+920]
	086 Move [X8+8], X19
	087 Move X0, [X9]
	088 Move X19, 0x7B1000
	089 Move X19, [X19+896]
	090 Move X20, [X20+912]
	091 Move X22, [X22+904]
	092 Call 0x1C17F10
	093 Move X1, [X19]
	094 Move X19, X0
	095 Call Dictionary`2<Int32, ByteEnum>..ctor, X0
	096 Move X8, [X21]
	097 Move X8, [X8+184]
	098 Move [X8+16], X19
	099 Move X0, [X20]
	100 Call 0x1C17F10
	101 Move X2, [X22]
	102 Move W1, 32
	103 Move X19, X0
	104 Call Dictionary`2<Int32, Object>..ctor, X0, X1
	105 Move X0, [X21]
	106 Move X8, [X0+184]
	107 Move [X8+24], X19
	108 Call 0x1C17F10
	109 Move X19, X0
	110 Call DynamicResolutionHandler..ctor, X0
	111 Move X8, [X21]
	112 Move X22, [X31+32]
	113 Move X21, [X31+40]
	114 Move W9, 0x3F800000
	115 Move X8, [X8+184]
	116 Move [X8+32], X19
	117 Move [X8+48], X19
	118 Move [X8+56], W24
	119 Move X20, [X31+48]
	120 Move X19, [X31+56]
	121 Move X24, [X31+16]
	122 Move X23, [X31+24]
	123 Move [X8+40], W31
	124 Move [X8+60], W9
	125 Move [X8+64], W31
	126 Move X30, [X31+64]
	127 Return 
	128 Call 0x1C17F28
	129 Call 0x1C17F20

