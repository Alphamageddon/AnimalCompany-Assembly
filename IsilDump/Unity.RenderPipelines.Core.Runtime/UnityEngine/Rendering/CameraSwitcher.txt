Type: UnityEngine.Rendering.CameraSwitcher

Method: System.Void OnEnable()

Disassembly:
	0x0399CB78 LDR X9, [X9 + 0x4F8]
	0x0399CB7C STR X8, [X31 + 0x30]
	0x0399CB80 ADD X8, X31, 0x8
	0x0399CB84 MOV X4, X31
	0x0399CB88 LDR X2, [X9]
	0x0399CB8C MOV X5, X31
	0x0399CB90 STR V0, [X31 + 0x2]
	0x0399CB94 BL 0x374A2F4
	0x0399CB98 ADRP X9, 0x7B5000
	0x0399CB9C LDUR V0, [X31 + 0x8]
	0x0399CBA0 LDR X8, [X31 + 0x18]
	0x0399CBA4 LDR X1, [X20]
	0x0399CBA8 LDR X9, [X9 + 0x1D0]
	0x0399CBAC ADD X0, X31, 0x20
	0x0399CBB0 STR X8, [X31 + 0x30]
	0x0399CBB4 ADD X8, X31, 0x8
	0x0399CBB8 LDR X2, [X9]
	0x0399CBBC MOV X3, X31
	0x0399CBC0 MOV X4, X31
	0x0399CBC4 MOV X5, X31
	0x0399CBC8 STR V0, [X31 + 0x2]
	0x0399CBCC BL 0x374A2F4
	0x0399CBD0 LDR X0, [X19 + 0x48]
	0x0399CBD4 LDR X1, [X29]
	0x0399CBD8 ADD X8, X31, 0x8
	0x0399CBDC MOV X2, X31
	0x0399CBE0 MOV X3, X31
	0x0399CBE4 MOV X4, X31
	0x0399CBE8 BL 0x37473F4
	0x0399CBEC ADRP X9, 0x7B5000
	0x0399CBF0 LDUR V0, [X31 + 0x8]
	0x0399CBF4 LDR X8, [X31 + 0x18]
	0x0399CBF8 LDR X1, [X22]
	0x0399CBFC LDR X9, [X9 + 0x1F0]
	0x0399CC00 ADD X0, X31, 0x20
	0x0399CC04 STR X8, [X31 + 0x30]
	0x0399CC08 ADD X8, X31, 0x8
	0x0399CC0C LDR X2, [X9]
	0x0399CC10 MOV X3, X31
	0x0399CC14 MOV X4, X31
	0x0399CC18 MOV X5, X31
	0x0399CC1C STR V0, [X31 + 0x2]
	0x0399CC20 BL 0x374A2F4
	0x0399CC24 ADRP X9, 0x7B5000
	0x0399CC28 LDUR V0, [X31 + 0x8]
	0x0399CC2C LDR X8, [X31 + 0x18]
	0x0399CC30 LDR X1, [X21]
	0x0399CC34 LDR X9, [X9 + 0x1A8]
	0x0399CC38 ADD X0, X31, 0x20
	0x0399CC3C STR X8, [X31 + 0x30]
	0x0399CC40 ADD X8, X31, 0x8
	0x0399CC44 LDR X2, [X9]
	0x0399CC48 MOV X3, X31
	0x0399CC4C MOV X4, X31
	0x0399CC50 MOV X5, X31
	0x0399CC54 STR V0, [X31 + 0x2]
	0x0399CC58 BL 0x374A2F4
	0x0399CC5C LDR X0, [X19 + 0x50]
	0x0399CC60 LDR X1, [X29]
	0x0399CC64 ADD X8, X31, 0x8
	0x0399CC68 MOV X2, X31
	0x0399CC6C MOV X3, X31
	0x0399CC70 MOV X4, X31
	0x0399CC74 BL 0x37473F4
	0x0399CC78 ADRP X9, 0x7B5000
	0x0399CC7C LDUR V0, [X31 + 0x8]
	0x0399CC80 LDR X8, [X31 + 0x18]
	0x0399CC84 LDR X1, [X22]
	0x0399CC88 LDR X9, [X9 + 0x1B8]
	0x0399CC8C ADD X0, X31, 0x20
	0x0399CC90 STR X8, [X31 + 0x30]
	0x0399CC94 ADD X8, X31, 0x8
	0x0399CC98 LDR X2, [X9]
	0x0399CC9C MOV X3, X31
	0x0399CCA0 MOV X4, X31
	0x0399CCA4 MOV X5, X31
	0x0399CCA8 STR V0, [X31 + 0x2]
	0x0399CCAC BL 0x374A2F4
	0x0399CCB0 ADRP X9, 0x7B5000
	0x0399CCB4 LDUR V0, [X31 + 0x8]
	0x0399CCB8 LDR X8, [X31 + 0x18]
	0x0399CCBC LDR X1, [X21]
	0x0399CCC0 LDR X9, [X9 + 0x198]
	0x0399CCC4 ADD X0, X31, 0x20
	0x0399CCC8 STR X8, [X31 + 0x30]
	0x0399CCCC ADD X8, X31, 0x8
	0x0399CCD0 LDR X2, [X9]
	0x0399CCD4 MOV X3, X31
	0x0399CCD8 MOV X4, X31
	0x0399CCDC MOV X5, X31
	0x0399CCE0 STR V0, [X31 + 0x2]
	0x0399CCE4 BL 0x374A2F4
	0x0399CCE8 ADRP X9, 0x77F000
	0x0399CCEC LDUR V0, [X31 + 0x8]
	0x0399CCF0 LDR X8, [X31 + 0x18]
	0x0399CCF4 LDR X1, [X22]
	0x0399CCF8 LDR X9, [X9 + 0x520]
	0x0399CCFC ADD X0, X31, 0x20
	0x0399CD00 STR X8, [X31 + 0x30]
	0x0399CD04 ADD X8, X31, 0x8
	0x0399CD08 LDR X2, [X9]
	0x0399CD0C MOV X3, X31
	0x0399CD10 MOV X4, X31
	0x0399CD14 MOV X5, X31
	0x0399CD18 STR V0, [X31 + 0x2]
	0x0399CD1C BL 0x374A2F4
	0x0399CD20 ADRP X9, 0x77F000
	0x0399CD24 LDUR V0, [X31 + 0x8]
	0x0399CD28 LDR X8, [X31 + 0x18]
	0x0399CD2C LDR X1, [X21]
	0x0399CD30 LDR X9, [X9 + 0x4F0]
	0x0399CD34 ADD X0, X31, 0x20
	0x0399CD38 STR X8, [X31 + 0x30]
	0x0399CD3C ADD X8, X31, 0x8
	0x0399CD40 LDR X2, [X9]
	0x0399CD44 MOV X3, X31
	0x0399CD48 MOV X4, X31
	0x0399CD4C MOV X5, X31
	0x0399CD50 STR V0, [X31 + 0x2]
	0x0399CD54 BL 0x374A2F4
	0x0399CD58 ADRP X9, 0x7B5000
	0x0399CD5C LDUR V0, [X31 + 0x8]
	0x0399CD60 LDR X8, [X31 + 0x18]
	0x0399CD64 LDR X1, [X22]
	0x0399CD68 LDR X9, [X9 + 0x1F8]
	0x0399CD6C ADD X0, X31, 0x20
	0x0399CD70 STR X8, [X31 + 0x30]
	0x0399CD74 ADD X8, X31, 0x8
	0x0399CD78 LDR X2, [X9]
	0x0399CD7C MOV X3, X31
	0x0399CD80 MOV X4, X31
	0x0399CD84 MOV X5, X31
	0x0399CD88 STR V0, [X31 + 0x2]
	0x0399CD8C BL 0x374A2F4
	0x0399CD90 ADRP X9, 0x7B5000
	0x0399CD94 LDUR V0, [X31 + 0x8]
	0x0399CD98 LDR X8, [X31 + 0x18]
	0x0399CD9C LDR X1, [X21]
	0x0399CDA0 LDR X9, [X9 + 0x1A0]
	0x0399CDA4 ADD X0, X31, 0x20
	0x0399CDA8 STR X8, [X31 + 0x30]
	0x0399CDAC ADD X8, X31, 0x8
	0x0399CDB0 LDR X2, [X9]
	0x0399CDB4 MOV X3, X31
	0x0399CDB8 MOV X4, X31
	0x0399CDBC MOV X5, X31
	0x0399CDC0 STR V0, [X31 + 0x2]
	0x0399CDC4 BL 0x374A2F4
	0x0399CDC8 LDR X0, [X19 + 0x40]
	0x0399CDCC CBZ X0, 0x399CE28
	0x0399CDD0 MOV X1, X31
	0x0399CDD4 BL 0x37350C8
	0x0399CDD8 LDR X0, [X19 + 0x38]
	0x0399CDDC CBZ X0, 0x399CE28
	0x0399CDE0 MOV X1, X31
	0x0399CDE4 BL 0x37350C8
	0x0399CDE8 LDR X0, [X19 + 0x48]
	0x0399CDEC CBZ X0, 0x399CE28
	0x0399CDF0 MOV X1, X31
	0x0399CDF4 BL 0x37350C8
	0x0399CDF8 LDR X0, [X19 + 0x50]
	0x0399CDFC CBZ X0, 0x399CE28
	0x0399CE00 MOV X1, X31
	0x0399CE04 BL 0x37350C8
	0x0399CE08 LDP X20, X19, [X31 + 0xB0]
	0x0399CE0C LDP X22, X21, [X31 + 0xA0]
	0x0399CE10 LDP X24, X23, [X31 + 0x90]
	0x0399CE14 LDP X26, X25, [X31 + 0x80]
	0x0399CE18 LDP X28, X27, [X31 + 0x70]
	0x0399CE1C LDP X29, X30, [X31 + 0x60]
	0x0399CE20 ADD X31, X31, 0xC0
	0x0399CE24 RET
	0x0399CE28 BL 0x1C16F20
	0x0399CE2C SUB X31, X31, 0x30
	0x0399CE30 STP X30, X21, [X31 + 0x10]
	0x0399CE34 STP X20, X19, [X31 + 0x20]
	0x0399CE38 ADRP X20, 0xA45000
	0x0399CE3C LDRB W8, [X20 + 0xB57]
	0x0399CE40 MOV X19, X0
	0x0399CE44 TBNZ X8, 0x0, 0x399CE80
	0x0399CE48 ADRP X0, 0x77F000
	0x0399CE4C LDR X0, [X0 + 0x3C0]
	0x0399CE50 BL 0x1C16CF4
	0x0399CE54 ADRP X0, 0x761000
	0x0399CE58 LDR X0, [X0 + 0x170]
	0x0399CE5C BL 0x1C16CF4
	0x0399CE60 ADRP X0, 0x75B000
	0x0399CE64 LDR X0, [X0 + 0xFD8]
	0x0399CE68 BL 0x1C16CF4
	0x0399CE6C ADRP X0, 0x75B000
	0x0399CE70 LDR X0, [X0 + 0xBF0]
	0x0399CE74 BL 0x1C16CF4
	0x0399CE78 MOVZ W8, 0x1
	0x0399CE7C STRB W8, [X20 + 0xB57]
	0x0399CE80 LDR X0, [X19 + 0x38]
	0x0399CE84 STR X31, [X19 + 0x58]
	0x0399CE88 STRB W31, [X19 + 0x70]
	0x0399CE8C STRB W31, [X19 + 0x72]
	0x0399CE90 CBZ X0, 0x399D0A8
	0x0399CE94 ADRP X20, 0x77F000
	0x0399CE98 LDR X20, [X20 + 0x3C0]
	0x0399CE9C LDR X1, [X20]
	0x0399CEA0 BL 0x21F5E68
	0x0399CEA4 LDR V2, [X19 + 0x24]
	0x0399CEA8 MOVZ W8, 0xD70A
	0x0399CEAC MOVK W8, 0x3C230000
	0x0399CEB0 MOV V0.S[1], V1.S[0]
	0x0399CEB4 UNIMPLEMENTED
	0x00000000 INVALID
	0x00000000 INVALID
	0x0399CEC0 STR D0, [X19 + 0x58]
	0x0399CEC4 ADRP X21, 0xA44000
	0x0399CEC8 LDRB W8, [X21 + 0xF9C]
	0x0399CECC CBNZ W8, 0x399CEE4
	0x0399CED0 ADRP X0, 0x7AB000
	0x0399CED4 LDR X0, [X0 + 0xC0]
	0x0399CED8 BL 0x1C16CF4
	0x0399CEDC MOVZ W8, 0x1
	0x0399CEE0 STRB W8, [X21 + 0xF9C]
	0x0399CEE4 ADRP X8, 0x7AB000
	0x0399CEE8 LDR X8, [X8 + 0xC0]
	0x0399CEEC LDR X8, [X8]
	0x0399CEF0 LDR X8, [X8 + 0xB8]
	0x0399CEF4 LDR X0, [X8]
	0x0399CEF8 CBZ X0, 0x399CF3C
	0x0399CEFC MOV X1, X31
	0x0399CF00 BL 0x377CD18
	0x0399CF04 CBZ X0, 0x399CF3C
	0x0399CF08 MOV X1, X31
	0x0399CF0C BL 0x3758A6C
	0x0399CF10 ADRP X8, 0x75B000
	0x0399CF14 LDR X8, [X8 + 0xFD8]
	0x0399CF18 AND W1, W0, 0x1
	0x0399CF1C ADD X0, X31, 0xC
	0x0399CF20 STRH W31, [X31 + 0xC]
	0x0399CF24 LDR X2, [X8]
	0x0399CF28 BL 0x242D570
	0x0399CF2C LDRH W8, [X31 + 0xC]
	0x0399CF30 CMP W8, 0xFF
	0x0399CF34 CSET W8, HI
	0x0399CF38 B 0x399CF40
	0x0399CF3C MOV W8, W31
	0x0399CF40 STRB W8, [X19 + 0x71]
	0x0399CF44 ADRP X21, 0xA3D000
	0x0399CF48 LDRB W8, [X21 + 0x817]
	0x0399CF4C CBNZ W8, 0x399CF64
	0x0399CF50 ADRP X0, 0x77F000
	0x0399CF54 LDR X0, [X0 + 0x528]
	0x0399CF58 BL 0x1C16CF4
	0x0399CF5C MOVZ W8, 0x1
	0x0399CF60 STRB W8, [X21 + 0x817]
	0x0399CF64 ADRP X8, 0x77F000
	0x0399CF68 LDR X8, [X8 + 0x528]
	0x0399CF6C LDR X8, [X8]
	0x0399CF70 LDR X8, [X8 + 0xB8]
	0x0399CF74 LDR X8, [X8]
	0x0399CF78 CBZ X8, 0x399CFC4
	0x0399CF7C LDR X0, [X8 + 0x1A8]
	0x0399CF80 CBZ X0, 0x399CFC4
	0x0399CF84 MOV X1, X31
	0x0399CF88 BL 0x3758A6C
	0x0399CF8C ADRP X8, 0x75B000
	0x0399CF90 LDR X8, [X8 + 0xFD8]
	0x0399CF94 AND W1, W0, 0x1
	0x0399CF98 ADD X0, X31, 0x8
	0x0399CF9C STRH W31, [X31 + 0x8]
	0x0399CFA0 LDR X2, [X8]
	0x0399CFA4 BL 0x242D570
	0x0399CFA8 LDRH W8, [X31 + 0x8]
	0x0399CFAC ANDS W31, W8, 0xFF
	0x0399CFB0 B.EQ 0x399CFC4
	0x0399CFB4 CMP W8, 0xFF
	0x0399CFB8 B.LS 0x399CFC4
	0x0399CFBC MOVZ W8, 0x1
	0x0399CFC0 B 0x399D058
	0x0399CFC4 ADRP X21, 0xA44000
	0x0399CFC8 LDRB W8, [X21 + 0xF98]
	0x0399CFCC CBNZ W8, 0x399CFE4
	0x0399CFD0 ADRP X0, 0x7AA000
	0x0399CFD4 LDR X0, [X0 + 0xEE0]
	0x0399CFD8 BL 0x1C16CF4
	0x0399CFDC MOVZ W8, 0x1
	0x0399CFE0 STRB W8, [X21 + 0xF98]
	0x0399CFE4 ADRP X8, 0x7AA000
	0x0399CFE8 LDR X8, [X8 + 0xEE0]
	0x0399CFEC LDR X8, [X8]
	0x0399CFF0 LDR X8, [X8 + 0xB8]
	0x0399CFF4 LDR X0, [X8]
	0x0399CFF8 CBZ X0, 0x399D044
	0x0399CFFC MOV X1, X31
	0x0399D000 BL 0x377A0A4
	0x0399D004 CBZ X0, 0x399D04C
	0x0399D008 MOV X1, X31
	0x0399D00C BL 0x3758A6C
	0x0399D010 ADRP X8, 0x75A000
	0x0399D014 LDR X8, [X8 + 0xFD8]
	0x0399D018 AND W1, W0, 0x1
	0x0399D01C ADD X0, X31, 0x4
	0x0399D020 STRH W31, [X31 + 0x4]
	0x0399D024 LDR X2, [X8]
	0x0399D028 BL 0x242D570
	0x0399D02C LDRH W9, [X31 + 0x4]
	0x0399D030 CMP W9, 0xFF
	0x0399D034 CSET W8, HI
	0x0399D038 ANDS W31, W9, 0xFF
	0x0399D03C CSET W9, NE
	0x0399D040 B 0x399D054
	0x0399D044 MOV W8, W31
	0x0399D048 B 0x399D058
	0x0399D04C MOV W9, W31
	0x0399D050 MOV W8, W31
	0x0399D054 AND W8, W9, W8, 0x0
	0x0399D058 LDR X0, [X19 + 0x48]
	0x0399D05C STRB W8, [X19 + 0x72]
	0x0399D060 CBZ X0, 0x399D0A8
	0x0399D064 LDR X1, [X20]
	0x0399D068 BL 0x21F5E68
	0x0399D06C LDR X0, [X19 + 0x40]
	0x0399D070 STR S1, [X19 + 0x60]
	0x0399D074 CBZ X0, 0x399D0A8
	0x0399D078 LDR X1, [X20]
	0x0399D07C BL 0x21F5E68
	0x0399D080 LDR X0, [X19 + 0x50]
	0x0399D084 STP S1, S0, [X19 + 0x64]
	0x0399D088 CBZ X0, 0x399D0A8
	0x0399D08C LDR X1, [X20]
	0x0399D090 BL 0x21F5E68

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xA46000
	011 Move X21, 0x780000
	012 Move X22, 0x758000
	013 Move W8, [X20+2899]
	014 Move X21, [X21+712]
	015 Move X22, [X22+1432]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {92}
	021 Move X0, 0x75C000
	022 Move X0, [X0+2816]
	023 Call 0x1C17CF4
	024 Move X0, 0x7B6000
	025 Move X0, [X0+192]
	026 Call 0x1C17CF4
	027 Move X0, 0x7B6000
	028 Move X0, [X0+200]
	029 Call 0x1C17CF4
	030 Move X0, 0x7B6000
	031 Move X0, [X0+208]
	032 Call 0x1C17CF4
	033 Move X0, 0x7B6000
	034 Move X0, [X0+216]
	035 Call 0x1C17CF4
	036 Move X0, 0x780000
	037 Move X0, [X0+712]
	038 Call 0x1C17CF4
	039 Move X0, 0x7B5000
	040 Move X0, [X0+1912]
	041 Call 0x1C17CF4
	042 Move X0, 0x758000
	043 Move X0, [X0+2600]
	044 Call 0x1C17CF4
	045 Move X0, 0x7B6000
	046 Move X0, [X0+224]
	047 Call 0x1C17CF4
	048 Move X0, 0x7B6000
	049 Move X0, [X0+232]
	050 Call 0x1C17CF4
	051 Move X0, 0x7B6000
	052 Move X0, [X0+240]
	053 Call 0x1C17CF4
	054 Move X0, 0x7B6000
	055 Move X0, [X0+248]
	056 Call 0x1C17CF4
	057 Move X0, 0x79E000
	058 Move X0, [X0+1696]
	059 Call 0x1C17CF4
	060 Move X0, 0x7B6000
	061 Move X0, [X0+256]
	062 Call 0x1C17CF4
	063 Move X0, 0x783000
	064 Move X0, [X0+3024]
	065 Call 0x1C17CF4
	066 Move X0, 0x759000
	067 Move X0, [X0+3672]
	068 Call 0x1C17CF4
	069 Move X0, 0x758000
	070 Move X0, [X0+1432]
	071 Call 0x1C17CF4
	072 Move X0, 0x7B5000
	073 Move X0, [X0+1952]
	074 Call 0x1C17CF4
	075 Move X0, 0x7B6000
	076 Move X0, [X0+264]
	077 Call 0x1C17CF4
	078 Move X0, 0x7B6000
	079 Move X0, [X0+272]
	080 Call 0x1C17CF4
	081 Move X0, 0x758000
	082 Move X0, [X0+2096]
	083 Call 0x1C17CF4
	084 Move X0, 0x7B6000
	085 Move X0, [X0+280]
	086 Call 0x1C17CF4
	087 Move X0, 0x7B6000
	088 Move X0, [X0+288]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X20+2899], W8
	092 Move X1, [X21]
	093 Move X0, X19
	094 Call 0x21A4894, X0
	095 Move [X19+48], X0
	096 Move [X19+88], X0
	097 Move X20, X0
	098 Move X0, [X22]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X0, X20
	104 Move X1, X31
	105 Move X2, X31
	106 Call Object.op_Equality, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {133}
	111 Move X8, 0x758000
	112 Move X8, [X8+2600]
	113 Move X19, 0x7B6000
	114 Move X0, [X8]
	115 Move W8, [X0+224]
	116 Move X19, [X19+288]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X0, [X19]
	121 Move X20, [X31+64]
	122 Move X19, [X31+72]
	123 Move X22, [X31+48]
	124 Move X21, [X31+56]
	125 Move X24, [X31+32]
	126 Move X23, [X31+40]
	127 Move X26, [X31+16]
	128 Move X25, [X31+24]
	129 Move X1, X31
	130 Move X30, [X31+80]
	131 Call Debug.LogError, X0
	132 Return 
	133 Move X8, [X19+32]
	134 Compare X8, 0
	135 JumpIfEqual {223}
	136 Move W8, [X8+24]
	137 Move X9, 0x7B6000
	138 Move [X19+40], W8
	139 Move X9, [X9+256]
	140 Add W1, W8, 1
	141 Move X0, [X9]
	142 Call 0x1C17D6C
	143 Move X8, [X19+32]
	144 Move [X19+96], X0
	145 Compare X8, 0
	146 JumpIfEqual {223}
	147 Move X9, 0x759000
	148 Move W8, [X8+24]
	149 Move X9, [X9+3672]
	150 Add W1, W8, 1
	151 Move X0, [X9]
	152 Call 0x1C17D6C
	153 Move X8, [X19+32]
	154 Move [X19+104], X0
	155 Compare X8, 0
	156 JumpIfEqual {223}
	157 Move X24, 0x783000
	158 Move X25, 0x758000
	159 Move X24, [X24+3024]
	160 Move X25, [X25+2096]
	161 Move X23, X31
	162 Move W21, [X8+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X0, [X22]
	166 Add X8, X8, X23
	167 Move X20, [X8+32]
	168 Move W9, [X0+224]
	169 Compare W9, 0
	170 JumpIfNotEqual {172}
	171 Call 0x1C17DFC
	172 Move X0, X20
	173 Move X1, X31
	174 Move X2, X31
	175 Call Object.op_Inequality, X0, X1
	176 Move X26, [X19+96]
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {192}
	181 Compare X20, 0
	182 JumpIfEqual {223}
	183 Move X0, X20
	184 Move X1, X31
	185 Call Object.get_name, X0
	186 Move X8, [X24]
	187 Move X21, X0
	188 Move X0, X8
	189 Call 0x1C17F10
	190 Move X20, X0
	191 Move X1, X21
	192 Move X0, [X24]
	193 Call 0x1C17F10
	194 Move X1, [X25]
	195 Move X20, X0
	196 Move X2, X31
	197 Call GUIContent..ctor, X0, X1
	198 Compare X26, 0
	199 JumpIfEqual {223}
	200 Compare X20, 0
	201 JumpIfEqual {208}
	202 Move X8, [X26]
	203 Move X0, X20
	204 Move X1, [X8+64]
	205 Call 0x1C17E00
	206 Compare X0, 0
	207 JumpIfEqual {367}
	208 Move W8, [X26+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Add X8, X26, X23
	211 Move [X8+32], X20
	212 Move X8, [X19+104]
	213 Compare X8, 0
	214 JumpIfEqual {223}
	215 Move W9, [X8+24]
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Add X8, X8, X23
	218 Move [X8+32], W23
	219 Move X8, [X19+32]
	220 Add X23, X23, 1
	221 Compare X8, 0
	222 JumpIfNotEqual {162}
	223 Call 0x1C17F20
	224 Move X0, [X24]
	225 Move X22, [X19+96]
	226 Call 0x1C17F10
	227 Move X8, 0x7B6000
	228 Move X8, [X8+264]
	229 Move X2, X31
	230 Move X20, X0
	231 Move X1, [X8]
	232 Call GUIContent..ctor, X0, X1
	233 Compare X22, 0
	234 JumpIfEqual {223}
	235 Compare X20, 0
	236 JumpIfEqual {243}
	237 Move X8, [X22]
	238 Move X0, X20
	239 Move X1, [X8+64]
	240 Call 0x1C17E00
	241 Compare X0, 0
	242 JumpIfEqual {367}
	243 Move W8, [X22+24]
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Move X8, X21
	246 ShiftRight X8, 32
	247 And X8, X8, 0x7FFFFFFF
	248 Add X8, X22, X8
	249 Move [X8+32], X20
	250 Move X9, [X19+32]
	251 Compare X9, 0
	252 JumpIfEqual {223}
	253 Move X8, [X19+104]
	254 Compare X8, 0
	255 JumpIfEqual {223}
	256 Move X9, [X9+24]
	257 Move W10, [X8+24]
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move X10, X9
	260 ShiftRight X10, 32
	261 And X10, X10, 0x7FFFFFFF
	262 Add X8, X8, X10
	263 Move [X8+32], W9
	264 Move X8, 0x7B6000
	265 Move X8, [X8+232]
	266 Move X0, [X8]
	267 Call 0x1C17F10
	268 Move X20, X0
	269 Call EnumField..ctor, X0
	270 Compare X20, 0
	271 JumpIfEqual {223}
	272 Move X8, 0x7B6000
	273 Move X8, [X8+280]
	274 Move X22, 0x79E000
	275 Move X8, [X8]
	276 Move [X20+40], X8
	277 Move X22, [X22+1696]
	278 Move X0, [X22]
	279 Call 0x1C17F10
	280 Move X8, 0x7B6000
	281 Move X8, [X8+192]
	282 Move X1, X19
	283 Move X3, X31
	284 Move X21, X0
	285 Move X2, [X8]
	286 Call Func`1<Int32>..ctor, X0, X1, X2
	287 Move [X20+72], X21
	288 Move X23, 0x75C000
	289 Move X23, [X23+2816]
	290 Move X0, [X23]
	291 Call 0x1C17F10
	292 Move X8, 0x7B6000
	293 Move X8, [X8+200]
	294 Move X1, X19
	295 Move X3, X31
	296 Move X21, X0
	297 Move X2, [X8]
	298 Call Action`1<Int32>..ctor, X0, X1, X2
	299 Move [X20+80], X21
	300 Move X8, [X19+96]
	301 Move X9, 0x7B6000
	302 Move X9, [X9+224]
	303 Move X0, X20
	304 Move [X20+96], X8
	305 Move X1, [X19+104]
	306 Move X2, [X9]
	307 Call 0x2BAA724, X0, X1
	308 Move X0, [X22]
	309 Call 0x1C17F10
	310 Move X8, 0x7B6000
	311 Move X8, [X8+208]
	312 Move X1, X19
	313 Move X3, X31
	314 Move X21, X0
	315 Move X2, [X8]
	316 Call Func`1<Int32>..ctor, X0, X1, X2
	317 Move [X20+128], X21
	318 Move X0, [X23]
	319 Call 0x1C17F10
	320 Move X8, 0x7B6000
	321 Move X8, [X8+216]
	322 Move X1, X19
	323 Move X3, X31
	324 Move X21, X0
	325 Move X2, [X8]
	326 Call Action`1<Int32>..ctor, X0, X1, X2
	327 Move [X20+136], X21
	328 Move [X19+112], X20
	329 Move X8, 0x7B4000
	330 Move X8, [X8+1912]
	331 Move X0, [X8]
	332 Move W8, [X0+224]
	333 Compare W8, 0
	334 JumpIfNotEqual {336}
	335 Call 0x1C17DFC
	336 Call DebugManager.get_instance
	337 Compare X0, 0
	338 JumpIfEqual {223}
	339 Move X8, 0x7B5000
	340 Move X8, [X8+272]
	341 Move W2, 1
	342 Move W3, W31
	343 Move W4, W31
	344 Move X1, [X8]
	345 Call DebugManager.GetPanel, X0, X1, X2, X3, X4
	346 Compare X0, 0
	347 JumpIfEqual {223}
	348 Move X0, [X0+40]
	349 Compare X0, 0
	350 JumpIfEqual {223}
	351 Move X8, 0x7B4000
	352 Move X1, [X19+112]
	353 Move X8, [X8+1952]
	354 Move X20, [X31+64]
	355 Move X19, [X31+72]
	356 Move X22, [X31+48]
	357 Move X21, [X31+56]
	358 Move X24, [X31+32]
	359 Move X23, [X31+40]
	360 Move X2, [X8]
	361 Move X26, [X31+16]
	362 Move X25, [X31+24]
	363 Move X30, [X31+80]
	364 Call 0x2498EC8, X0, X1
	365 Return 
	366 Call 0x1C17F28
	367 Call 0x1C17F44
	368 Move X1, X31
	369 Call 0x1C17DEC

Method: System.Void OnDisable()

Disassembly:
	0x0399D380 FMUL S0, S11, S0
	0x0399D384 FMUL S1, S11, S1
	0x0399D388 FMUL S2, S11, S2
	0x0399D38C FMUL S0, S3, S0
	0x0399D390 FMUL S1, S3, S1
	0x0399D394 FMUL S2, S3, S2
	0x0399D398 FADD S0, S8, S0
	0x0399D39C FADD S1, S9, S1
	0x0399D3A0 FADD S2, S10, S2
	0x0399D3A4 MOV X0, X20
	0x0399D3A8 MOV X1, X31
	0x0399D3AC BL 0x3C3F62C
	0x0399D3B0 MOV X0, X19
	0x0399D3B4 MOV X1, X31
	0x0399D3B8 BL 0x3C32E90
	0x0399D3BC CBZ X0, 0x399D468
	0x0399D3C0 MOV X1, X31
	0x0399D3C4 MOV X20, X0
	0x0399D3C8 BL 0x3C3F58C
	0x0399D3CC ADRP X21, 0xA3B000
	0x0399D3D0 LDRB W8, [X21 + 0x786]
	0x0399D3D4 MOV V8.16B, V0.16B
	0x0399D3D8 MOV V9.16B, V1.16B
	0x0399D3DC MOV V10.16B, V2.16B
	0x0399D3E0 CBNZ W8, 0x399D3F8
	0x0399D3E4 ADRP X0, 0x756000
	0x0399D3E8 LDR X0, [X0 + 0x5A0]
	0x0399D3EC BL 0x1C16CF4
	0x0399D3F0 MOVZ W8, 0x1
	0x0399D3F4 STRB W8, [X21 + 0x786]
	0x0399D3F8 ADRP X8, 0x756000
	0x0399D3FC LDR X8, [X8 + 0x5A0]
	0x0399D400 LDR V3, [X19 + 0x6C]
	0x0399D404 MOV X0, X20
	0x0399D408 LDP X20, X19, [X31 + 0x30]
	0x0399D40C LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA45000
	005 Move W8, [X20+2900]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x7B5000
	012 Move X0, [X0+360]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2900], W8
	016 Move X0, [X19+112]
	017 Compare X0, 0
	018 JumpIfEqual {46}
	019 Move X8, [X0]
	020 Move X9, [X8+376]
	021 Move X1, [X8+384]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Compare X0, 0
	024 JumpIfEqual {46}
	025 Move X0, [X19+112]
	026 Compare X0, 0
	027 JumpIfEqual {50}
	028 Move X8, [X0]
	029 Move X9, [X8+376]
	030 Move X1, [X8+384]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Compare X0, 0
	033 JumpIfEqual {50}
	034 Move X0, [X0+40]
	035 Compare X0, 0
	036 JumpIfEqual {50}
	037 Move X8, 0x7B5000
	038 Move X1, [X19+112]
	039 Move X8, [X8+360]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X2, [X8]
	043 Move X30, [X31+32]
	044 Call 0x249916C, X0, X1
	045 Return 
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 
	050 Call 0x1C17F20

Method: System.Int32 GetCameraCount()

Disassembly:
	0x0399D094 STR S1, [X19 + 0x6C]
	0x0399D098 LDP X20, X19, [X31 + 0x20]
	0x0399D09C LDP X30, X21, [X31 + 0x10]
	0x0399D0A0 ADD X31, X31, 0x30
	0x0399D0A4 RET
	0x0399D0A8 BL 0x1C16F20
	0x0399D0AC STP D11, D10, [X31 - 0x40]!
	0x0399D0B0 STP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {9}
	005 Move W8, [X8+24]
	006 Add W0, W8, 1
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: UnityEngine.Camera GetNextCamera()

Disassembly:
	0x0399D410 LDP X30, X21, [X31 + 0x20]
	0x0399D414 MOV X1, X31
	0x0399D418 LDR X8, [X8 + 0xB8]
	0x0399D41C LDP S0, S1, [X8 + 0x18]
	0x0399D420 LDR V2, [X8 + 0x20]
	0x0399D424 FMUL S0, S11, S0
	0x0399D428 FMUL S1, S11, S1
	0x0399D42C FMUL S0, S0, S3
	0x0399D430 FMUL S1, S1, S3
	0x0399D434 FADD S0, S8, S0
	0x0399D438 FADD S1, S9, S1
	0x0399D43C LDP D9, D8, [X31 + 0x10]
	0x0399D440 FMUL S2, S11, S2
	0x0399D444 FMUL S2, S2, S3
	0x0399D448 FADD S2, S10, S2
	0x0399D44C LDP D11, D10, [X31], #0x40
	0x0399D450 B 0x3C3F62C
	0x0399D454 LDRB W8, [X19 + 0x70]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X0, 48
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X8, X8, X9
	011 Add X8, X8, 32
	012 Move X0, [X8]
	013 Move X30, [X31+16]
	014 Return X0
	015 Call 0x1C17F20
	016 Call 0x1C17F28

Method: System.Void SetCameraIndex(System.Int32 index)

Disassembly:
	0x0399D458 CBZ W8, 0x399D2C8
	0x0399D45C LDRB W8, [X19 + 0x71]
	0x0399D460 CBNZ W8, 0x399D2C0
	0x0399D464 B 0x399D2C8
	0x0399D468 BL 0x1C16F20
	0x0399D46C STP X30, X21, [X31 - 0x20]!
	0x0399D470 STP X20, X19, [X31 + 0x10]
	0x0399D474 ADRP X21, 0xA44000
	0x0399D478 ADRP X20, 0x756000
	0x0399D47C LDRB W8, [X21 + 0xBE4]
	0x0399D480 LDR X20, [X20 + 0x598]
	0x0399D484 MOV X19, X0
	0x0399D488 TBNZ X8, 0x0, 0x399D4A0
	0x0399D48C ADRP X0, 0x756000
	0x0399D490 LDR X0, [X0 + 0x598]
	0x0399D494 BL 0x1C16CF4
	0x0399D498 MOVZ W8, 0x1
	0x0399D49C STRB W8, [X21 + 0xBE4]
	0x0399D4A0 LDR X0, [X20]
	0x0399D4A4 LDR X20, [X19 + 0x60]
	0x0399D4A8 LDR W8, [X0 + 0xE0]
	0x0399D4AC CBNZ W8, 0x399D4B4
	0x0399D4B0 BL 0x1C16DFC
	0x0399D4B4 MOV X0, X20
	0x0399D4B8 MOV X1, X31
	0x0399D4BC MOV X2, X31
	0x0399D4C0 BL 0x3C354F8
	0x0399D4C4 TBZ X0, 0x0, 0x399D4E0
	0x0399D4C8 LDR X0, [X19 + 0x60]
	0x0399D4CC CBZ X0, 0x399D4F0
	0x0399D4D0 LDP X20, X19, [X31 + 0x10]
	0x0399D4D4 MOV X1, X31
	0x0399D4D8 LDP X30, X21, [X31], #0x20
	0x0399D4DC B 0x3C35834
	0x0399D4E0 LDP X20, X19, [X31 + 0x10]
	0x0399D4E4 MOV W0, W31
	0x0399D4E8 LDP X30, X21, [X31], #0x20
	0x0399D4EC RET
	0x0399D4F0 BL 0x1C16F20
	0x0399D4F4 ADRP X8, 0xFFFFFFFFFD14F000
	0x0399D4F8 LDR V0, [X8 + 0xE9]
	0x0399D4FC MOVZ W8, 0x41200000
	0x0399D500 MOV X1, X31
	0x0399D504 STR W8, [X0 + 0x30]
	0x0399D508 STR V0, [X0 + 0x2]
	0x0399D50C B 0x3C36C30
	0x0399D510 STR X30, [X31 - 0x20]!
	0x0399D514 STP X20, X19, [X31 + 0x10]
	0x0399D518 ADRP X20, 0xA44000
	0x0399D51C ADRP X19, 0x7B3000
	0x0399D520 LDRB W8, [X20 + 0xB59]
	0x0399D524 LDR X19, [X19 + 0xD20]
	0x0399D528 TBNZ X8, 0x0, 0x399D558
	0x0399D52C ADRP X0, 0x7B3000
	0x0399D530 LDR X0, [X0 + 0xD20]
	0x0399D534 BL 0x1C16CF4
	0x0399D538 ADRP X0, 0x7B4000
	0x0399D53C LDR X0, [X0 + 0x208]
	0x0399D540 BL 0x1C16CF4
	0x0399D544 ADRP X0, 0x756000
	0x0399D548 LDR X0, [X0 + 0x988]
	0x0399D54C BL 0x1C16CF4
	0x0399D550 MOVZ W8, 0x1
	0x0399D554 STRB W8, [X20 + 0xB59]
	0x0399D558 LDR X0, [X19]
	0x0399D55C LDR W8, [X0 + 0xE0]
	0x0399D560 CBNZ W8, 0x399D56C
	0x0399D564 BL 0x1C16DFC
	0x0399D568 LDR X0, [X19]
	0x0399D56C LDR X8, [X0 + 0xB8]
	0x0399D570 LDR X0, [X8]
	0x0399D574 CBZ X0, 0x399D5B4
	0x0399D578 ADRP X8, 0x7B4000
	0x0399D57C LDR X8, [X8 + 0x208]
	0x0399D580 LDR X1, [X8]
	0x0399D584 BL 0x2493CB0
	0x0399D588 CBZ X0, 0x399D5B4
	0x0399D58C ADRP X8, 0x756000
	0x0399D590 LDR X8, [X8 + 0x988]
	0x0399D594 MOV X2, X31
	0x0399D598 MOV X19, X0
	0x0399D59C LDR X1, [X8]
	0x0399D5A0 BL 0x3C4C2CC
	0x0399D5A4 MOV X0, X19
	0x0399D5A8 LDP X20, X19, [X31 + 0x10]
	0x0399D5AC LDR X30, [X31], #0x20
	0x0399D5B0 RET
	0x0399D5B4 BL 0x1C16F20
	0x0399D5B8 STP X30, X21, [X31 - 0x20]!
	0x0399D5BC STP X20, X19, [X31 + 0x10]
	0x0399D5C0 ADRP X21, 0xA44000
	0x0399D5C4 ADRP X20, 0x7B3000
	0x0399D5C8 LDRB W8, [X21 + 0xB5A]
	0x0399D5CC LDR X20, [X20 + 0xD20]
	0x0399D5D0 MOV X19, X0
	0x0399D5D4 TBNZ X8, 0x0, 0x399D5F8
	0x0399D5D8 ADRP X0, 0x7B3000
	0x0399D5DC LDR X0, [X0 + 0xD20]
	0x0399D5E0 BL 0x1C16CF4
	0x0399D5E4 ADRP X0, 0x7B4000
	0x0399D5E8 LDR X0, [X0 + 0x208]
	0x0399D5EC BL 0x1C16CF4
	0x0399D5F0 MOVZ W8, 0x1
	0x0399D5F4 STRB W8, [X21 + 0xB5A]
	0x0399D5F8 LDR X0, [X20]
	0x0399D5FC LDR W8, [X0 + 0xE0]
	0x0399D600 CBNZ W8, 0x399D60C
	0x0399D604 BL 0x1C16DFC
	0x0399D608 LDR X0, [X20]
	0x0399D60C LDR X8, [X0 + 0xB8]
	0x0399D610 LDR X0, [X8]
	0x0399D614 CBZ X0, 0x399D64C
	0x0399D618 ADRP X8, 0x7B4000
	0x0399D61C LDR X8, [X8 + 0x208]
	0x0399D620 LDR X1, [X8]
	0x0399D624 BL 0x2493CB0
	0x0399D628 CBZ X0, 0x399D64C
	0x0399D62C MOV X1, X19
	0x0399D630 MOV X2, X31
	0x0399D634 MOV X20, X0
	0x0399D638 BL 0x3C4C2CC
	0x0399D63C MOV X0, X20
	0x0399D640 LDP X20, X19, [X31 + 0x10]
	0x0399D644 LDP X30, X21, [X31], #0x20
	0x0399D648 RET
	0x0399D64C BL 0x1C16F20
	0x0399D650 STP X30, X21, [X31 - 0x20]!
	0x0399D654 STP X20, X19, [X31 + 0x10]
	0x0399D658 ADRP X21, 0xA44000
	0x0399D65C ADRP X20, 0x7B3000
	0x0399D660 LDRB W8, [X21 + 0xB5B]
	0x0399D664 LDR X20, [X20 + 0xD20]
	0x0399D668 MOV X19, X0
	0x0399D66C TBNZ X8, 0x0, 0x399D690
	0x0399D670 ADRP X0, 0x7B3000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA45000
	007 Move W8, [X21+2901]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x757000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2901], W8
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X19+32]
	021 Compare X8, 0
	022 JumpIfEqual {176}
	023 Move W8, [X8+24]
	024 Add W8, W8, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X19+40], W20
	027 Move X22, 0x757000
	028 Move X22, [X22+1432]
	029 Move X20, [X19+88]
	030 Move X21, [X19+48]
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X21
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {69}
	044 Move X0, [X19+48]
	045 Compare X0, 0
	046 JumpIfEqual {176}
	047 Move X1, X31
	048 Call Component.get_transform, X0
	049 Compare X0, 0
	050 JumpIfEqual {176}
	051 Move X1, X31
	052 Call Transform.get_position, X0
	053 Move X0, [X19+48]
	054 Move [X19+56], S0
	055 Move [X19+64], S1
	056 Move [X19+64], S2
	057 Compare X0, 0
	058 JumpIfEqual {176}
	059 Move X1, X31
	060 Call Component.get_transform, X0
	061 Compare X0, 0
	062 JumpIfEqual {176}
	063 Move X1, X31
	064 Call Transform.get_rotation, X0
	065 Move [X19+68], S0
	066 Move [X19+76], S1
	067 Move [X19+76], S2
	068 Move [X19+84], S3
	069 Move X0, X19
	070 Call CameraSwitcher.GetNextCamera, X0
	071 Move [X19+88], X0
	072 Move X20, X0
	073 Move X0, [X22]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X20
	079 Move X1, X31
	080 Move X2, X31
	081 Call Object.op_Inequality, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {170}
	086 Move X0, [X22]
	087 Move X20, [X19+88]
	088 Move X21, [X19+48]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move X0, X20
	094 Move X1, X21
	095 Move X2, X31
	096 Call Object.op_Equality, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {126}
	101 Move X0, [X19+48]
	102 Compare X0, 0
	103 JumpIfEqual {176}
	104 Move X1, X31
	105 Call Component.get_transform, X0
	106 Compare X0, 0
	107 JumpIfEqual {176}
	108 Move S1, [X19+60]
	109 Move S2, [X19+64]
	110 Move V0, [X19+56]
	111 Move X1, X31
	112 Call Transform.set_position, X0, X1
	113 Move X0, [X19+48]
	114 Compare X0, 0
	115 JumpIfEqual {176}
	116 Move X1, X31
	117 Call Component.get_transform, X0
	118 Compare X0, 0
	119 JumpIfEqual {176}
	120 Move S2, [X19+76]
	121 Move S3, [X19+80]
	122 Move S0, [X19+68]
	123 Move S1, [X19+72]
	124 Move X1, X31
	125 Call Transform.set_rotation, X0, X1
	126 Move X0, X19
	127 Move X1, X31
	128 Call Component.get_transform, X0
	129 Move X8, [X19+88]
	130 Compare X8, 0
	131 JumpIfEqual {176}
	132 Move X20, X0
	133 Move X0, X8
	134 Move X1, X31
	135 Call Component.get_transform, X0
	136 Compare X0, 0
	137 JumpIfEqual {176}
	138 Move X1, X31
	139 Call Transform.get_position, X0
	140 Compare X20, 0
	141 JumpIfEqual {176}
	142 Move X0, X20
	143 Move X1, X31
	144 Call Transform.set_position, X0, X1
	145 Move X0, X19
	146 Move X1, X31
	147 Call Component.get_transform, X0
	148 Move X8, [X19+88]
	149 Compare X8, 0
	150 JumpIfEqual {176}
	151 Move X19, X0
	152 Move X0, X8
	153 Move X1, X31
	154 Call Component.get_transform, X0
	155 Compare X0, 0
	156 JumpIfEqual {176}
	157 Move X1, X31
	158 Call Transform.get_rotation, X0
	159 Compare X19, 0
	160 JumpIfEqual {176}
	161 Move X0, X19
	162 Move X20, [X31+32]
	163 Move X19, [X31+40]
	164 Move X22, [X31+16]
	165 Move X21, [X31+24]
	166 Move X1, X31
	167 Move X30, [X31+48]
	168 Call Transform.set_rotation, X0, X1
	169 Return 
	170 Move X20, [X31+32]
	171 Move X19, [X31+40]
	172 Move X22, [X31+16]
	173 Move X21, [X31+24]
	174 Move X30, [X31+48]
	175 Return 
	176 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0399D674 LDR X0, [X0 + 0xD20]
	0x0399D678 BL 0x1C16CF4
	0x0399D67C ADRP X0, 0x7B4000
	0x0399D680 LDR X0, [X0 + 0x210]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move X1, X31
	005 Move [X0+40], W8
	006 Call MonoBehaviour..ctor, X0
	007 Return 

Method: System.Int32 <OnEnable>b__10_0()

Disassembly:
	0x0399D684 BL 0x1C16CF4
	0x0399D688 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void <OnEnable>b__10_1(System.Int32 value)

Disassembly:
	0x0399D68C STRB W8, [X21 + 0xB5B]

ISIL:
	001 Call CameraSwitcher.SetCameraIndex, X0, X1
	002 Return 

Method: System.Int32 <OnEnable>b__10_2()

Disassembly:
	0x0399D690 LDR X0, [X20]
	0x0399D694 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+120]
	002 Return X0

Method: System.Void <OnEnable>b__10_3(System.Int32 value)

Disassembly:
	0x0399D698 CBNZ W8, 0x399D6A4
	0x0399D69C BL 0x1C16DFC

ISIL:
	001 Move [X0+120], W1
	002 Return 

