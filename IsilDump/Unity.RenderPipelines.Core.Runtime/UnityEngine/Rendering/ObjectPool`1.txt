Type: UnityEngine.Rendering.ObjectPool`1

Method: System.Int32 get_countAll()

Disassembly:
	0x02494BD0 MOV X0, X22
	0x02494BD4 MOV X1, X25

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_countAll(System.Int32 value)

Disassembly:
	0x02494BD8 MOV X2, X20
	0x02494BDC BL 0x3EB1AC0

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: System.Int32 get_countActive()

Disassembly:
	0x02494BE0 MOV X0, X21
	0x02494BE4 MOV X1, X22
	0x02494BE8 MOV X2, X20
	0x02494BEC BL 0x3EB1AC0
	0x02494BF0 MOV X0, X23
	0x02494BF4 MOV X1, X21
	0x02494BF8 MOV X2, X20
	0x02494BFC BL 0x3EB1AC0
	0x02494C00 MOV X0, X21

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X0+44]
	006 Move W8, [X8+24]
	007 Subtract W0, W9, W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Int32 get_countInactive()

Disassembly:
	0x02494C04 MOV X1, X23
	0x02494C08 MOV X2, X20
	0x02494C0C BL 0x3EB1AC0
	0x02494C10 MOV X0, X19
	0x02494C14 MOV X1, X21
	0x02494C18 MOV X2, X20
	0x02494C1C BL 0x3EB1AC0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void .ctor(UnityEngine.Events.UnityAction`1<T> actionOnGet, UnityEngine.Events.UnityAction`1<T> actionOnRelease, System.Boolean collectionCheck = True)

Disassembly:
	0x02494C20 LDR X8, [X27 + 0x28]
	0x02494C24 LDUR X9, [X29 - 0x8]
	0x02494C28 CMP X8, X9
	0x02494C2C B.NE 0x2494C54
	0x02494C30 ADD X31, X29, 0x0
	0x02494C34 LDP X20, X19, [X31 + 0x50]
	0x02494C38 LDP X22, X21, [X31 + 0x40]
	0x02494C3C LDP X24, X23, [X31 + 0x30]
	0x02494C40 LDP X26, X25, [X31 + 0x20]
	0x02494C44 LDP X28, X27, [X31 + 0x10]
	0x02494C48 LDP X29, X30, [X31], #0x60
	0x02494C4C RET
	0x02494C50 BL 0x1C16F20
	0x02494C54 BL 0x3EB1B20
	0x02494C58 STP X29, X30, [X31 - 0x60]!
	0x02494C5C STR X27, [X31 + 0x10]
	0x02494C60 STP X26, X25, [X31 + 0x20]
	0x02494C64 STP X24, X23, [X31 + 0x30]
	0x02494C68 STP X22, X21, [X31 + 0x40]
	0x02494C6C STP X20, X19, [X31 + 0x50]
	0x02494C70 ADD X29, X31, 0x0
	0x02494C74 SUB X31, X31, 0x20
	0x02494C78 MRS X26, 0xC000
	0x02494C7C LDR X8, [X26 + 0x28]
	0x02494C80 ADRP X19, 0x1F45000
	0x02494C84 MOV X22, X2
	0x02494C88 MOV X20, X1
	0x02494C8C STUR X8, [X29 - 0x8]
	0x02494C90 LDRB W8, [X19 + 0xB93]
	0x02494C94 MOV X21, X0
	0x02494C98 STUR X1, [X29 - 0x18]
	0x02494C9C TBNZ X8, 0x0, 0x2494CC0
	0x02494CA0 ADRP X0, 0x1C5F000
	0x02494CA4 LDR X0, [X0 + 0xA28]
	0x02494CA8 BL 0x1C16CF4
	0x02494CAC ADRP X0, 0x1C88000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+32]
	008 Move X22, X4
	009 Move W23, W3
	010 Move X19, X2
	011 Move X8, [X8+192]
	012 Move X20, X1
	013 Move X21, X0
	014 Move X8, [X8+24]
	015 Move W9, [X8+309]
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {23}
	020 Move X0, X8
	021 Call 0x1C5D684
	022 Move X8, X0
	023 Move X0, X8
	024 And W23, W23, 1
	025 Call 0x1C17F10
	026 Move X8, [X22+32]
	027 Move X22, X0
	028 Move X8, [X8+192]
	029 Move X1, [X8+40]
	030 Call Stack`1<Object>..ctor, X0
	031 Move W8, 1
	032 Move X0, X21
	033 Move X1, X31
	034 Move [X21+16], X22
	035 Move [X21+40], W8
	036 Call Object..ctor, X0
	037 Move [X21+24], X20
	038 Move [X21+32], X19
	039 Move [X21+40], W23
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Move X23, [X31+56]
	046 Return 

Method: T Get()

Disassembly:
	0x02494CB0 LDR X0, [X0 + 0xDC8]
	0x02494CB4 BL 0x1C16CF4
	0x02494CB8 MOVZ W8, 0x1
	0x02494CBC STRB W8, [X19 + 0xB93]
	0x02494CC0 LDR X8, [X22 + 0x20]
	0x02494CC4 LDR X8, [X8 + 0xC0]
	0x02494CC8 LDR X9, [X8 + 0x10]
	0x02494CCC LDR W23, [X9 + 0xFC]
	0x02494CD0 ADD X9, X31, 0x0
	0x02494CD4 ADD X10, X23, 0xF
	0x02494CD8 AND X10, X10, 0x1FFFFFFFF
	0x02494CDC SUB X19, X9, X10
	0x02494CE0 ADD X31, X19, 0x0
	0x02494CE4 ADD X9, X31, 0x0
	0x02494CE8 SUB X24, X9, X10
	0x02494CEC ADD X31, X24, 0x0
	0x02494CF0 LDR X0, [X21 + 0x10]
	0x02494CF4 CBZ X0, 0x2494E90
	0x02494CF8 LDR X1, [X8 + 0x60]
	0x02494CFC LDR X8, [X1]
	0x02494D00 BLR X8
	0x02494D04 CMP W0, 0x1
	0x02494D08 B.LT 0x2494DBC
	0x02494D0C LDR X2, [X21 + 0x10]
	0x02494D10 CBZ X2, 0x2494E90
	0x02494D14 LDR X8, [X22 + 0x20]
	0x02494D18 SUB X3, X29, 0x10
	0x02494D1C MOV X4, X19
	0x02494D20 LDR X8, [X8 + 0xC0]
	0x02494D24 LDR X1, [X8 + 0x78]
	0x02494D28 LDR X0, [X1]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Compare X0, 0
	007 JumpIfEqual {35}
	008 Move X8, [X1+32]
	009 Move W9, [X0+24]
	010 Move X8, [X8+192]
	011 Compare W9, 0
	012 JumpIfEqual {16}
	013 Move X1, [X8+80]
	014 Call Stack`1<Object>.Pop, X0
	015 Move X20, X0
	016 Move X0, [X8+56]
	017 Call Activator.CreateInstance
	018 Move W8, [X19+44]
	019 Move X20, X0
	020 Add W8, W8, 1
	021 Move [X19+44], W8
	022 Move X8, [X19+24]
	023 Compare X8, 0
	024 JumpIfEqual {30}
	025 Move X9, [X8+24]
	026 Move X0, [X8+64]
	027 Move X2, [X8+40]
	028 Move X1, X20
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X0, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20

Method: UnityEngine.Rendering.ObjectPool`1/PooledObject<T> Get(out T v)

Disassembly:
	0x02494D2C STUR X19, [X29 - 0x10]
	0x02494D30 LDR X8, [X1 + 0x10]
	0x02494D34 BLR X8
	0x02494D38 LDR X8, [X22 + 0x20]
	0x02494D3C MOV X1, X19
	0x02494D40 LDR X8, [X8 + 0xC0]
	0x02494D44 LDR X0, [X8 + 0x10]
	0x02494D48 BL 0x1C16E04
	0x02494D4C LDR X27, [X22 + 0x20]
	0x02494D50 MOV X25, X0
	0x02494D54 MOV X0, X24
	0x02494D58 MOV X2, X23
	0x02494D5C LDR X8, [X27 + 0xC0]
	0x02494D60 LDR X8, [X8 + 0x10]
	0x02494D64 LDR W8, [X8 + 0x28]
	0x02494D68 CMP W8, 0x0
	0x02494D6C SUB X8, X29, 0x18
	0x02494D70 CSEL X1, X20, X8, LT
	0x02494D74 BL 0x3EB1AC0
	0x02494D78 LDR X8, [X27 + 0xC0]
	0x02494D7C MOV X1, X24
	0x02494D80 LDR X0, [X8 + 0x10]
	0x02494D84 BL 0x1C16E04
	0x02494D88 CMP X25, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X20, X1
	008 Move X19, X2
	009 Move X21, X0
	010 Move X8, [X8+192]
	011 Move X1, [X8+104]
	012 Call 0x2494CB0, X0
	013 Move [X20], X0
	014 Move [X31], X31
	015 Move [X31+8], X31
	016 Move X8, [X19+32]
	017 Move X1, X0
	018 Add X0, X31, 0
	019 Move X2, X21
	020 Move X8, [X8+192]
	021 Move X3, [X8+120]
	022 Call 0x24A79B4, X0, X1, X2
	023 Move X0, [X31]
	024 Move X1, [X31+8]
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X30, [X31+16]
	028 Move X21, [X31+24]
	029 Add X31, X31, 48
	030 Return X0

Method: System.Void Release(T element)

Disassembly:
	0x02494D8C B.NE 0x2494DBC
	0x02494D90 ADRP X8, 0x1C5F000
	0x02494D94 LDR X8, [X8 + 0xA28]
	0x02494D98 LDR X0, [X8]
	0x02494D9C LDR W8, [X0 + 0xE0]
	0x02494DA0 CBNZ W8, 0x2494DA8
	0x02494DA4 BL 0x1C16DFC
	0x02494DA8 ADRP X8, 0x1C88000
	0x02494DAC LDR X8, [X8 + 0xDC8]
	0x02494DB0 MOV X1, X31
	0x02494DB4 LDR X0, [X8]
	0x02494DB8 BL 0x3C0649C
	0x02494DBC LDR X0, [X21 + 0x10]
	0x02494DC0 CBZ X0, 0x2494E90
	0x02494DC4 LDR X8, [X22 + 0x20]
	0x02494DC8 LDR X8, [X8 + 0xC0]
	0x02494DCC LDR X1, [X8 + 0x60]
	0x02494DD0 LDR X8, [X1]
	0x02494DD4 BLR X8
	0x02494DD8 LDR X8, [X22 + 0x20]
	0x02494DDC MOV W24, W0
	0x02494DE0 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+32]
	006 Move X20, X2
	007 Move X21, X0
	008 Move X19, X1
	009 Compare X8, 0
	010 JumpIfEqual {16}
	011 Move X9, [X8+24]
	012 Move X0, [X8+64]
	013 Move X2, [X8+40]
	014 Move X1, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X0, [X21+16]
	017 Compare X0, 0
	018 JumpIfEqual {29}
	019 Move X8, [X20+32]
	020 Move X1, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+192]
	024 Move X2, [X8+128]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call Stack`1<Object>.Push, X0, X1
	028 Return 
	029 Call 0x1C17F20

