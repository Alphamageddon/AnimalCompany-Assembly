Type: UnityEngine.Experimental.Rendering.XRLayout

Method: System.Void AddCamera(UnityEngine.Camera camera, System.Boolean enableXR)

Disassembly:
	0x039860E0 LDR W8, [X24 + 0x18]
	0x039860E4 CMP W8, 0x2
	0x039860E8 B.LS 0x3986240
	0x039860EC MOV X0, X22
	0x039860F0 MOV W1, W23
	0x039860F4 STR X25, [X24 + 0x30]
	0x039860F8 BL 0x39862C0
	0x039860FC LDR X8, [X26]
	0x03986100 STR W0, [X31 + 0x10]
	0x03986104 ADD X1, X31, 0x10
	0x03986108 MOV X0, X8
	0x0398610C BL 0x1C16E04
	0x03986110 MOV X25, X0
	0x03986114 CBZ X0, 0x398612C
	0x03986118 LDR X8, [X24]
	0x0398611C MOV X0, X25
	0x03986120 LDR X1, [X8 + 0x40]
	0x03986124 BL 0x1C16E00
	0x03986128 CBZ X0, 0x3986244
	0x0398612C LDR W8, [X24 + 0x18]
	0x03986130 CMP W8, 0x3
	0x03986134 B.LS 0x3986240
	0x03986138 STR X25, [X24 + 0x38]
	0x0398613C LDR X0, [X29]
	0x03986140 ADD X1, X31, 0xC
	0x03986144 STR S9, [X31 + 0xC]
	0x03986148 BL 0x1C16E04
	0x0398614C MOV X25, X0
	0x03986150 CBZ X0, 0x3986168
	0x03986154 LDR X8, [X24]
	0x03986158 MOV X0, X25
	0x0398615C LDR X1, [X8 + 0x40]
	0x03986160 BL 0x1C16E00
	0x03986164 CBZ X0, 0x3986244
	0x03986168 LDR W8, [X24 + 0x18]
	0x0398616C CMP W8, 0x4
	0x03986170 B.LS 0x3986240
	0x03986174 STR X25, [X24 + 0x40]
	0x03986178 LDR X0, [X29]
	0x0398617C ADD X1, X31, 0x8
	0x03986180 STR S8, [X31 + 0x8]
	0x03986184 BL 0x1C16E04
	0x03986188 MOV X25, X0
	0x0398618C CBZ X0, 0x39861A4
	0x03986190 LDR X8, [X24]
	0x03986194 MOV X0, X25
	0x03986198 LDR X1, [X8 + 0x40]
	0x0398619C BL 0x1C16E00
	0x039861A0 CBZ X0, 0x3986244
	0x039861A4 LDR W8, [X24 + 0x18]
	0x039861A8 CMP W8, 0x5
	0x039861AC B.LS 0x3986240
	0x039861B0 STR X25, [X24 + 0x48]
	0x039861B4 LDR X1, [X27]
	0x039861B8 MOV X0, X20
	0x039861BC MOV X2, X24
	0x039861C0 MOV X3, X31
	0x039861C4 BL 0x3234E54
	0x039861C8 MOV X0, X20
	0x039861CC MOV X1, X31
	0x039861D0 BL 0x3233888
	0x039861D4 MOV X0, X22
	0x039861D8 ADD W23, W23, 0x1
	0x039861DC BL 0x398632C
	0x039861E0 CMP W23, W0
	0x039861E4 B.LT 0x3986010
	0x039861E8 LDR X0, [X19 + 0x10]
	0x039861EC ADD W21, W21, 0x1
	0x039861F0 CBNZ X0, 0x3985FD4
	0x039861F4 BL 0x1C16F20
	0x039861F8 ADRP X8, 0x76D000
	0x039861FC LDR X8, [X8 + 0xA28]
	0x03986200 LDR X0, [X8]
	0x03986204 LDR W8, [X0 + 0xE0]
	0x03986208 CBNZ W8, 0x3986210
	0x0398620C BL 0x1C16DFC
	0x03986210 MOV X0, X20
	0x03986214 MOV X1, X31
	0x03986218 BL 0x3C06048
	0x0398621C LDP X20, X19, [X31 + 0x80]
	0x03986220 LDP X22, X21, [X31 + 0x70]
	0x03986224 LDP X24, X23, [X31 + 0x60]
	0x03986228 LDP X26, X25, [X31 + 0x50]
	0x0398622C LDP X28, X27, [X31 + 0x40]
	0x03986230 LDP X29, X30, [X31 + 0x30]
	0x03986234 LDP D9, D8, [X31 + 0x20]
	0x03986238 ADD X31, X31, 0x90
	0x0398623C RET
	0x03986240 BL 0x1C16F28
	0x03986244 BL 0x1C16F44
	0x03986248 MOV X1, X31
	0x0398624C BL 0x1C16DEC
	0x03986250 SUB X31, X31, 0xD0
	0x03986254 STP X30, X21, [X31 + 0xB0]
	0x03986258 STP X20, X19, [X31 + 0xC0]
	0x0398625C ADRP X21, 0xA5B000
	0x03986260 LDRB W8, [X21 + 0xA6D]
	0x03986264 MOV W19, W1
	0x03986268 MOV X20, X0
	0x0398626C TBNZ X8, 0x0, 0x3986284
	0x03986270 ADRP X0, 0x7CA000
	0x03986274 LDR X0, [X0 + 0x4B0]
	0x03986278 BL 0x1C16CF4
	0x0398627C MOVZ W8, 0x1
	0x03986280 STRB W8, [X21 + 0xA6D]
	0x03986284 LDR X0, [X20 + 0x10]
	0x03986288 CBZ X0, 0x39862BC

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0xA5C000
	010 Move X22, 0x76E000
	011 Move W8, [X23+2644]
	012 Move X22, [X22+1432]
	013 Move W21, W2
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x76E000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x7CB000
	024 Move X0, [X0+1280]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+2644], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {50}
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Move X23, [X31+24]
	047 Move D9, [X31+64]
	048 Move D8, [X31+72]
	049 Return 
	050 Compare X19, 0
	051 JumpIfEqual {133}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Camera.get_cameraType, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X19
	057 Move X1, X31
	058 Call Camera.get_cameraType, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X19
	061 Move X1, X31
	062 Call Camera.get_targetTexture, X0
	063 Move X8, [X22]
	064 Move X22, X0
	065 Move W9, [X8+224]
	066 Compare W9, 0
	067 JumpIfNotEqual {70}
	068 Move X0, X8
	069 Call 0x1C17DFC
	070 Move X0, X22
	071 Move X1, X31
	072 Move X2, X31
	073 Call Object.op_Equality, X0, X1
	074 And W8, W0, 1
	075 Move W8, W31
	076 Move X22, 0x7CB000
	077 Move X22, [X22+1280]
	078 And W21, W21, W8
	079 Move X0, [X22]
	080 Move W9, [X0+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Call XRSystem.get_displayActive
	085 And W31, W0, W21
	086 Move X0, X19
	087 Move X1, X31
	088 Call Camera.get_nearClipPlane, X0
	089 Move X0, X19
	090 Move X1, X31
	091 Move V8, V0
	092 Call Camera.get_farClipPlane, X0
	093 Move X0, [X22]
	094 Move V9, V0
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move V0, V8
	100 Move V1, V9
	101 Call XRSystem.SetDisplayZRange, V0, V1
	102 Move X0, X19
	103 Move X20, [X31+48]
	104 Move X19, [X31+56]
	105 Move X22, [X31+32]
	106 Move X21, [X31+40]
	107 Move X30, [X31+16]
	108 Move X23, [X31+24]
	109 Move D9, [X31+64]
	110 Move D8, [X31+72]
	111 Call XRSystem.CreateDefaultLayout, X0
	112 Return 
	113 Move X0, [X22]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {119}
	117 Call 0x1C17DFC
	118 Move X0, [X22]
	119 Move X8, [X0+184]
	120 Move X0, X20
	121 Move X1, X19
	122 Move X20, [X31+48]
	123 Move X19, [X31+56]
	124 Move X2, [X8+64]
	125 Move X22, [X31+32]
	126 Move X21, [X31+40]
	127 Move X30, [X31+16]
	128 Move X23, [X31+24]
	129 Move D9, [X31+64]
	130 Move D8, [X31+72]
	131 Call XRLayout.AddPass, X0, X1, X2
	132 Return 
	133 Call 0x1C17F20

Method: System.Void ReconfigurePass(UnityEngine.Experimental.Rendering.XRPass xrPass, UnityEngine.Camera camera)

Disassembly:
	0x039869F8 ADD X8, X8, 0xBC
	0x039869FC STUR V0, [X19 + 0x2C]
	0x03986A00 STP V2, V1, [X31 + 0x220]
	0x03986A04 STR V3, [X31 + 0x21]
	0x03986A08 LDR V0, [X8]
	0x03986A0C LDP V1, V2, [X31 + 0x250]
	0x03986A10 LDR V3, [X31 + 0x27]
	0x03986A14 LDUR V4, [X19 + 0x6C]
	0x03986A18 ADD X8, X31, 0xB0
	0x03986A1C STP V1, V2, [X31 + 0xF0]
	0x03986A20 LDP V1, V2, [X31 + 0x210]
	0x03986A24 STR V3, [X31 + 0x11]
	0x03986A28 LDR V3, [X31 + 0x23]
	0x03986A2C STUR V4, [X8 + 0x6C]
	0x03986A30 LDUR V4, [X19 + 0x2C]
	0x03986A34 STP V1, V2, [X31 + 0xB0]
	0x03986A38 STR V3, [X31 + 0xD]
	0x03986A3C STR S8, [X31 + 0x12C]
	0x03986A40 STUR V4, [X8 + 0x2C]
	0x03986A44 STR S0, [X31 + 0xEC]
	0x03986A48 ADD X8, X31, 0x130
	0x03986A4C ADD X0, X31, 0xF0
	0x03986A50 ADD X1, X31, 0xB0
	0x03986A54 MOV X2, X31
	0x03986A58 BL 0x3C27F74
	0x03986A5C LDP V0, V1, [X31 + 0x130]
	0x03986A60 LDP V2, V3, [X31 + 0x150]
	0x03986A64 LDR X0, [X21]
	0x03986A68 STP V0, V1, [X31 + 0x1D0]
	0x03986A6C STP V2, V3, [X31 + 0x1F0]
	0x03986A70 LDR W8, [X0 + 0xE0]
	0x03986A74 CBNZ W8, 0x3986A80
	0x03986A78 BL 0x1C16DFC
	0x03986A7C LDR X0, [X21]
	0x03986A80 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA5C000
	006 Move W8, [X21+2645]
	007 Move X19, X2
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x7CB000
	014 Move X0, [X0+1280]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2645], W8
	018 Compare X20, 0
	019 JumpIfEqual {47}
	020 Move X0, X20
	021 Call XRPass.get_viewCount, X0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, 0x7CB000
	024 Move X8, [X8+1280]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X19
	032 Call XRSystem.ReconfigurePass, X0, X1
	033 Move X0, [X20+24]
	034 Compare X0, 0
	035 JumpIfEqual {47}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call XROcclusionMesh.UpdateCombinedMesh, X0
	041 Return 
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 
	047 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.Camera, UnityEngine.Experimental.Rendering.XRPass>> GetActivePasses()

Disassembly:
	0x03986D0C ADRP X8, 0xA5B000
	0x03986D10 MOVZ W9, 0x1

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void AddPass(UnityEngine.Camera camera, UnityEngine.Experimental.Rendering.XRPass xrPass)

Disassembly:
	0x03986904 LDR X0, [X8]
	0x03986908 LDR W8, [X0 + 0xE0]
	0x0398690C CBNZ W8, 0x3986920
	0x03986910 BL 0x1C16DFC
	0x03986914 ADRP X8, 0x7CA000
	0x03986918 LDR X8, [X8 + 0x568]
	0x0398691C LDR X0, [X8]
	0x03986920 LDR X8, [X0 + 0xB8]
	0x03986924 LDUR V0, [X8 + 0x2C]
	0x03986928 LDP V2, V1, [X8 + 0x10]
	0x0398692C LDR V3, [X8], #0x3C
	0x03986930 STUR V0, [X19 + 0x6C]
	0x03986934 STP V2, V1, [X31 + 0x260]
	0x03986938 STR V3, [X31 + 0x25]
	0x0398693C LDR V8, [X8]
	0x03986940 LDRB W8, [X24 + 0xAC0]
	0x03986944 CBNZ W8, 0x3986958
	0x03986948 MOV X0, X23
	0x0398694C BL 0x1C16CF4
	0x03986950 MOVZ W8, 0x1
	0x03986954 STRB W8, [X24 + 0xAC0]
	0x03986958 LDR X8, [X23]
	0x0398695C LDR X8, [X8 + 0xB8]
	0x03986960 LDUR V0, [X8 + 0x6C]
	0x03986964 LDP V3, V1, [X8 + 0x50]
	0x03986968 LDR V2, [X8 + 0x4]
	0x0398696C STUR V0, [X19 + 0x2C]
	0x03986970 STP V3, V1, [X31 + 0x220]
	0x03986974 STR V2, [X31 + 0x21]
	0x03986978 CBZ W26, 0x39869C4
	0x0398697C CMP W26, 0x2
	0x03986980 FMOV S0, W31
	0x03986984 B.NE 0x3986A0C
	0x03986988 ADRP X8, 0x7CA000
	0x0398698C LDR X8, [X8 + 0x568]
	0x03986990 LDR X0, [X8]
	0x03986994 LDR W8, [X0 + 0xE0]
	0x03986998 CBNZ W8, 0x39869AC
	0x0398699C BL 0x1C16DFC
	0x039869A0 ADRP X8, 0x7CA000
	0x039869A4 LDR X8, [X8 + 0x568]
	0x039869A8 LDR X0, [X8]
	0x039869AC LDR X8, [X0 + 0xB8]
	0x039869B0 LDUR V0, [X8 + 0xEC]
	0x039869B4 LDP V2, V1, [X8 + 0xD0]
	0x039869B8 LDR V3, [X8 + 0xC]
	0x039869BC ADD X8, X8, 0xFC
	0x039869C0 B 0x39869FC
	0x039869C4 ADRP X8, 0x7CA000
	0x039869C8 LDR X8, [X8 + 0x568]
	0x039869CC LDR X0, [X8]
	0x039869D0 LDR W8, [X0 + 0xE0]
	0x039869D4 CBNZ W8, 0x39869E8
	0x039869D8 BL 0x1C16DFC
	0x039869DC ADRP X8, 0x7CA000
	0x039869E0 LDR X8, [X8 + 0x568]
	0x039869E4 LDR X0, [X8]
	0x039869E8 LDR X8, [X0 + 0xB8]
	0x039869EC LDUR V0, [X8 + 0xAC]
	0x039869F0 LDP V2, V1, [X8 + 0x90]
	0x039869F4 LDR V3, [X8 + 0x8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xA5C000
	008 Move W8, [X22+2646]
	009 Move X20, X2
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x7CB000
	017 Move X0, [X0+1304]
	018 Call 0x1C17CF4
	019 Move X0, 0x7CB000
	020 Move X0, [X0+1312]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2646], W8
	024 Compare X20, 0
	025 JumpIfEqual {73}
	026 Move X0, [X20+24]
	027 Compare X0, 0
	028 JumpIfEqual {73}
	029 Move X22, 0x7CB000
	030 Move X22, [X22+1312]
	031 Call XROcclusionMesh.UpdateCombinedMesh, X0
	032 Move X3, [X22]
	033 Move X19, [X19+16]
	034 Add X0, X31, 0
	035 Move X1, X21
	036 Move X2, X20
	037 Move [X31], X31
	038 Move [X31+8], X31
	039 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	040 Compare X19, 0
	041 JumpIfEqual {73}
	042 Move X9, 0x7CB000
	043 Move X9, [X9+1304]
	044 Move W10, [X19+28]
	045 Move X1, [X31]
	046 Move X2, [X31+8]
	047 Move X8, [X19+16]
	048 Move X9, [X9]
	049 Add W10, W10, 1
	050 Move [X19+28], W10
	051 Compare X8, 0
	052 JumpIfEqual {73}
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 Move W11, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add W9, W10, 1
	057 Add X8, X8, X10
	058 Move [X19+24], W9
	059 Move [X8+32], X1
	060 Move [X8+40], X2
	061 Move X8, [X9+32]
	062 Move X0, X19
	063 Move X8, [X8+192]
	064 Move X3, [X8+112]
	065 Call List`1<ValueTuple`2<Object, Object>>.AddWithResize, X0, X1
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X30, [X31+16]
	071 Add X31, X31, 64
	072 Return 
	073 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x03986D14 STRB W9, [X8 + 0xB39]
	0x03986D18 ADRP X8, 0x7CA000
	0x03986D1C LDR X8, [X8 + 0x500]
	0x03986D20 LDR X0, [X8]
	0x03986D24 LDR W8, [X0 + 0xE0]
	0x03986D28 CBNZ W8, 0x3986D3C
	0x03986D2C BL 0x1C16DFC
	0x03986D30 ADRP X8, 0x7CA000
	0x03986D34 LDR X8, [X8 + 0x500]
	0x03986D38 LDR X0, [X8]
	0x03986D3C LDR X8, [X0 + 0xB8]
	0x03986D40 LDRB W8, [X8 + 0x4C]
	0x03986D44 TBZ X8, 0x1, 0x3986D88
	0x03986D48 LDR X0, [X31 + 0x2C0]
	0x03986D4C MOV X1, X31
	0x03986D50 MOV X2, X31
	0x03986D54 BL 0x33C5D2C
	0x03986D58 TBZ X0, 0x0, 0x3986D88
	0x03986D5C LDR X1, [X31 + 0x2C0]
	0x03986D60 LDR X25, [X31 + 0x20]
	0x03986D64 MOV X2, X31
	0x03986D68 MOV X0, X25
	0x03986D6C BL 0x3C4D954
	0x03986D70 ADRP X8, 0x7CA000
	0x03986D74 LDR X8, [X8 + 0x588]
	0x03986D78 LDR X1, [X8]
	0x03986D7C MOV X0, X25
	0x03986D80 MOV X2, X31
	0x03986D84 BL 0x3C4D0E0
	0x03986D88 LDR X0, [X31 + 0x290]
	0x03986D8C CBZ X0, 0x3986F2C
	0x03986D90 LDR X8, [X0]
	0x03986D94 LDP X9, X1, [X8 + 0x1C8]
	0x03986D98 BLR X9
	0x03986D9C LDRB W8, [X24 + 0xAC0]
	0x03986DA0 CMP W0, 0x5
	0x03986DA4 CSET W25, EQ
	0x03986DA8 CBNZ W8, 0x3986DBC
	0x03986DAC MOV X0, X23
	0x03986DB0 BL 0x1C16CF4
	0x03986DB4 MOVZ W8, 0x1
	0x03986DB8 STRB W8, [X24 + 0xAC0]
	0x03986DBC LDR X8, [X23]
	0x03986DC0 LDR X0, [X21]
	0x03986DC4 LDR X8, [X8 + 0xB8]
	0x03986DC8 LDP V0, V1, [X8 + 0x60]
	0x03986DCC LDP V3, V2, [X8 + 0x40]
	0x03986DD0 STP V0, V1, [X31 + 0x150]
	0x03986DD4 STP V3, V2, [X31 + 0x130]
	0x03986DD8 LDR W8, [X0 + 0xE0]
	0x03986DDC CBNZ W8, 0x3986DE8
	0x03986DE0 BL 0x1C16DFC
	0x03986DE4 LDR X0, [X21]
	0x03986DE8 LDR X8, [X0 + 0xB8]
	0x03986DEC LDP V0, V1, [X31 + 0x130]
	0x03986DF0 LDP V2, V3, [X31 + 0x150]
	0x03986DF4 LDR X7, [X8]
	0x03986DF8 STP V0, V1, [X31 + 0x30]
	0x03986DFC STP V2, V3, [X31 + 0x50]
	0x03986E00 LDR X0, [X31 + 0x20]
	0x03986E04 ADD X1, X31, 0x30
	0x03986E08 MOVZ W4, 0x2
	0x03986E0C MOVZ W5, 0x4
	0x03986E10 MOVZ W6, 0x1
	0x03986E14 MOV X2, X20
	0x03986E18 MOV W3, W25
	0x03986E1C STR X31, [X31]
	0x03986E20 BL 0x3C4F388
	0x03986E24 LDR W8, [X31 + 0x2EC]
	0x03986E28 ADD W22, W22, 0x1
	0x03986E2C CMP W22, W8
	0x03986E30 B.LT 0x39866B8
	0x03986E34 B 0x3986E54
	0x03986E38 LDRB W8, [X31 + 0x2E9]
	0x03986E3C LDR X1, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xA5C000
	009 Move W8, [X20+2647]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x7CB000
	016 Move X0, [X0+1320]
	017 Call 0x1C17CF4
	018 Move X0, 0x7CB000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x7CB000
	022 Move X0, [X0+1336]
	023 Call 0x1C17CF4
	024 Move X0, 0x7CB000
	025 Move X0, [X0+1280]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2647], W8
	029 Move X0, [X19+16]
	030 Compare X0, 0
	031 JumpIfEqual {68}
	032 Move X22, 0x7CB000
	033 Move X23, 0x7CB000
	034 Move X22, [X22+1336]
	035 Move X23, [X23+1280]
	036 Move W21, W31
	037 Move TEMP, 0
	038 Not TEMP
	039 Move W24, TEMP
	040 Move W2, [X0+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, [X22]
	043 Add W1, W24, W2
	044 Move X2, X8
	045 Call List`1<ValueTuple`2<Object, Object>>.get_Item, X0, X1
	046 Move X0, [X23]
	047 Move X20, X1
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X23]
	053 Move X8, [X0+184]
	054 Move X8, [X8+64]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Compare X20, 0
	057 JumpIfEqual {68}
	058 Move X8, [X20]
	059 Move X0, X20
	060 Move X9, [X8+376]
	061 Move X1, [X8+384]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X0, [X19+16]
	064 Add W21, W21, 1
	065 Subtract W24, W24, 1
	066 Compare X0, 0
	067 JumpIfNotEqual {40}
	068 Call 0x1C17F20
	069 Move W8, [X0+28]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add W8, W8, 1
	072 Move [X0+24], W31
	073 Move [X0+28], W8
	074 Move X0, [X0+16]
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X22, [X31+32]
	078 Move X21, [X31+40]
	079 Move X24, [X31+16]
	080 Move X23, [X31+24]
	081 Move W1, W31
	082 Move X3, X31
	083 Move X30, [X31+64]
	084 Call Array.Clear, X0, X1, X2
	085 Return 
	086 Move X20, [X31+48]
	087 Move X19, [X31+56]
	088 Move X22, [X31+32]
	089 Move X21, [X31+40]
	090 Move X24, [X31+16]
	091 Move X23, [X31+24]
	092 Move X30, [X31+64]
	093 Return 

Method: System.Void LogDebugInfo()

Disassembly:
	0x03986E40 AND W2, W8, 0x1
	0x03986E44 MOV X0, X22
	0x03986E48 MOV W3, W23
	0x03986E4C MOV X4, X31
	0x03986E50 BL 0x3E65E90
	0x03986E54 ADD X0, X31, 0x2D8
	0x03986E58 MOV X1, X31
	0x03986E5C BL 0x39B1DB4
	0x03986E60 ADRP X19, 0x7CA000
	0x03986E64 LDR X19, [X19 + 0x500]
	0x03986E68 LDR X0, [X19]
	0x03986E6C LDR W8, [X0 + 0xE0]
	0x03986E70 CBNZ W8, 0x3986E78
	0x03986E74 BL 0x1C16DFC
	0x03986E78 ADRP X20, 0xA5B000
	0x03986E7C LDRB W8, [X20 + 0xB39]
	0x03986E80 CBNZ W8, 0x3986E98
	0x03986E84 ADRP X0, 0x7CA000
	0x03986E88 LDR X0, [X0 + 0x500]
	0x03986E8C BL 0x1C16CF4
	0x03986E90 MOVZ W8, 0x1
	0x03986E94 STRB W8, [X20 + 0xB39]
	0x03986E98 LDR X0, [X19]
	0x03986E9C LDR W8, [X0 + 0xE0]
	0x03986EA0 CBNZ W8, 0x3986EAC
	0x03986EA4 BL 0x1C16DFC
	0x03986EA8 LDR X0, [X19]
	0x03986EAC LDR X8, [X0 + 0xB8]
	0x03986EB0 LDRB W8, [X8 + 0x4C]
	0x03986EB4 TBZ X8, 0x1, 0x3986EE8
	0x03986EB8 LDR X19, [X31 + 0x20]
	0x03986EBC CBZ X19, 0x3986F5C
	0x03986EC0 ADRP X8, 0x7CA000
	0x03986EC4 LDR X8, [X8 + 0x588]
	0x03986EC8 MOV X0, X19
	0x03986ECC MOV X2, X31
	0x03986ED0 LDR X1, [X8]
	0x03986ED4 BL 0x3C4D124
	0x03986ED8 MOV X0, X19
	0x03986EDC MOV X1, X31
	0x03986EE0 MOV X2, X31
	0x03986EE4 BL 0x3C4D954
	0x03986EE8 ADD X31, X31, 0x2F0
	0x03986EEC LDP X20, X19, [X31 + 0x90]
	0x03986EF0 LDP X22, X21, [X31 + 0x80]
	0x03986EF4 LDP X24, X23, [X31 + 0x70]
	0x03986EF8 LDP X26, X25, [X31 + 0x60]
	0x03986EFC LDP X28, X27, [X31 + 0x50]
	0x03986F00 LDP X29, X30, [X31 + 0x40]
	0x03986F04 LDP D9, D8, [X31 + 0x30]
	0x03986F08 LDP D11, D10, [X31 + 0x20]
	0x03986F0C LDP D13, D12, [X31 + 0x10]
	0x03986F10 LDP D15, D14, [X31], #0xA0
	0x03986F14 RET
	0x03986F18 BL 0x1C16F20
	0x03986F1C BL 0x1C16F20
	0x03986F20 BL 0x1C16F20
	0x03986F24 BL 0x1C16F20
	0x03986F28 BL 0x1C16F20
	0x03986F2C BL 0x1C16F20
	0x03986F30 BL 0x1C16F20
	0x03986F34 BL 0x1C16F20
	0x03986F38 BL 0x1C16F20
	0x03986F3C BL 0x1C16F20
	0x03986F40 BL 0x1C16F20
	0x03986F44 BL 0x1C16F20
	0x03986F48 BL 0x1C16F20
	0x03986F4C BL 0x1C16F20
	0x03986F50 BL 0x1C16F20
	0x03986F54 BL 0x1C16F20
	0x03986F58 BL 0x1C16F20
	0x03986F5C BL 0x1C16F20
	0x03986F60 BL 0x1C16F20
	0x03986F64 B 0x398704C
	0x03986F68 B 0x398704C
	0x03986F6C B 0x398704C
	0x03986F70 B 0x398704C
	0x03986F74 B 0x398704C
	0x03986F78 B 0x398704C
	0x03986F7C B 0x398704C
	0x03986F80 B 0x398704C
	0x03986F84 B 0x398704C
	0x03986F88 B 0x398704C
	0x03986F8C B 0x398704C
	0x03986F90 B 0x398704C
	0x03986F94 B 0x398704C
	0x03986F98 B 0x398704C
	0x03986F9C B 0x398704C
	0x03986FA0 B 0x398704C
	0x03986FA4 B 0x398704C
	0x03986FA8 B 0x398704C
	0x03986FAC B 0x398704C
	0x03986FB0 B 0x398704C
	0x03986FB4 B 0x398704C
	0x03986FB8 B 0x398704C
	0x03986FBC B 0x398704C
	0x03986FC0 B 0x398704C
	0x03986FC4 B 0x398704C
	0x03986FC8 B 0x398704C
	0x03986FCC B 0x398704C
	0x03986FD0 B 0x398704C
	0x03986FD4 B 0x398704C
	0x03986FD8 B 0x398704C
	0x03986FDC B 0x398704C
	0x03986FE0 B 0x398704C
	0x03986FE4 B 0x398704C
	0x03986FE8 B 0x398704C
	0x03986FEC B 0x398704C
	0x03986FF0 B 0x398704C
	0x03986FF4 B 0x398704C
	0x03986FF8 B 0x398704C
	0x03986FFC B 0x398704C
	0x03987000 B 0x398704C
	0x03987004 B 0x398704C
	0x03987008 B 0x398704C
	0x0398700C B 0x398704C
	0x03987010 B 0x398704C
	0x03987014 B 0x398704C
	0x03987018 B 0x398704C
	0x0398701C B 0x398704C
	0x03987020 B 0x398704C
	0x03987024 B 0x398704C
	0x03987028 B 0x398704C
	0x0398702C B 0x398704C
	0x03987030 B 0x398704C
	0x03987034 B 0x398704C
	0x03987038 B 0x398704C
	0x0398703C B 0x398704C
	0x03987040 B 0x398704C
	0x03987044 B 0x398704C
	0x03987048 B 0x398704C
	0x0398704C MOV X20, X0
	0x03987050 CMP W1, 0x1
	0x03987054 B.NE 0x3987080
	0x03987058 MOV X0, X20
	0x0398705C BL 0x3EB1AD0
	0x03987060 LDR X21, [X0]
	0x03987064 BL 0x3EB1AE0
	0x03987068 ADD X0, X31, 0x2D8
	0x0398706C MOV X1, X31
	0x03987070 BL 0x39B1DB4
	0x03987074 CBZ X21, 0x3986E60
	0x03987078 MOV X0, X21
	0x0398707C BL 0x1C16F18
	0x03987080 MOV X21, X31
	0x03987084 B 0x398708C
	0x03987088 MOV X20, X0
	0x0398708C ADD X0, X31, 0x2D8
	0x03987090 MOV X1, X31
	0x03987094 BL 0x39B1DB4
	0x03987098 CBNZ X21, 0x39870A4
	0x0398709C MOV X0, X20
	0x039870A0 BL 0x1D2C690
	0x039870A4 MOV X0, X21
	0x039870A8 BL 0x1C16F18
	0x039870AC BL 0x1990590
	0x039870B0 STP X29, X30, [X31 - 0x60]!
	0x039870B4 STP X28, X27, [X31 + 0x10]
	0x039870B8 STP X26, X25, [X31 + 0x20]
	0x039870BC STP X24, X23, [X31 + 0x30]
	0x039870C0 STP X22, X21, [X31 + 0x40]
	0x039870C4 STP X20, X19, [X31 + 0x50]
	0x039870C8 ADRP X19, 0xA5A000
	0x039870CC ADRP X24, 0x7C9000
	0x039870D0 ADRP X20, 0x7C9000
	0x039870D4 ADRP X23, 0x7C9000
	0x039870D8 ADRP X22, 0x7C9000
	0x039870DC ADRP X21, 0x7C9000
	0x039870E0 ADRP X29, 0x7C9000
	0x039870E4 ADRP X28, 0x7C9000
	0x039870E8 ADRP X27, 0x7C9000
	0x039870EC ADRP X26, 0x7C9000
	0x039870F0 ADRP X25, 0x7C9000
	0x039870F4 LDR X24, [X24 + 0x590]
	0x039870F8 LDR X20, [X20 + 0x580]
	0x039870FC LDR X23, [X23 + 0x598]
	0x03987100 LDR X22, [X22 + 0x5A0]
	0x03987104 LDR X21, [X21 + 0x5A8]
	0x03987108 LDR X29, [X29 + 0x5B0]
	0x0398710C LDR X28, [X28 + 0x5B8]
	0x03987110 LDR X27, [X27 + 0x5C0]
	0x03987114 LDR X26, [X26 + 0x5C8]
	0x03987118 LDRB W8, [X19 + 0xA5B]
	0x0398711C LDR X25, [X25 + 0x5D0]
	0x03987120 TBNZ X8, 0x0, 0x39871D4
	0x03987124 ADRP X0, 0x7C9000
	0x03987128 LDR X0, [X0 + 0x590]
	0x0398712C BL 0x1C16CF4
	0x03987130 ADRP X0, 0x7C9000
	0x03987134 LDR X0, [X0 + 0x598]
	0x03987138 BL 0x1C16CF4
	0x0398713C ADRP X0, 0x7C9000
	0x03987140 LDR X0, [X0 + 0x580]
	0x03987144 BL 0x1C16CF4
	0x03987148 ADRP X0, 0x7C9000
	0x0398714C LDR X0, [X0 + 0x5D8]
	0x03987150 BL 0x1C16CF4
	0x03987154 ADRP X0, 0x7C9000
	0x03987158 LDR X0, [X0 + 0x5D0]
	0x0398715C BL 0x1C16CF4
	0x03987160 ADRP X0, 0x7C9000
	0x03987164 LDR X0, [X0 + 0x5A0]
	0x03987168 BL 0x1C16CF4
	0x0398716C ADRP X0, 0x7C9000
	0x03987170 LDR X0, [X0 + 0x5E0]
	0x03987174 BL 0x1C16CF4
	0x03987178 ADRP X0, 0x7C9000
	0x0398717C LDR X0, [X0 + 0x5E8]
	0x03987180 BL 0x1C16CF4
	0x03987184 ADRP X0, 0x7C9000
	0x03987188 LDR X0, [X0 + 0x5F0]
	0x0398718C BL 0x1C16CF4
	0x03987190 ADRP X0, 0x7C9000
	0x03987194 LDR X0, [X0 + 0x5C0]
	0x03987198 BL 0x1C16CF4
	0x0398719C ADRP X0, 0x7C9000
	0x039871A0 LDR X0, [X0 + 0x5B8]
	0x039871A4 BL 0x1C16CF4
	0x039871A8 ADRP X0, 0x7C9000
	0x039871AC LDR X0, [X0 + 0x5C8]
	0x039871B0 BL 0x1C16CF4
	0x039871B4 ADRP X0, 0x7C9000
	0x039871B8 LDR X0, [X0 + 0x5A8]
	0x039871BC BL 0x1C16CF4
	0x039871C0 ADRP X0, 0x7C9000
	0x039871C4 LDR X0, [X0 + 0x5B0]
	0x039871C8 BL 0x1C16CF4
	0x039871CC MOVZ W8, 0x1
	0x039871D0 STRB W8, [X19 + 0xA5B]
	0x039871D4 LDR X0, [X24]
	0x039871D8 BL 0x1C16F10
	0x039871DC MOV X1, X31
	0x039871E0 MOV X19, X0
	0x039871E4 BL 0x3C122EC
	0x039871E8 LDR X8, [X20]
	0x039871EC LDR X8, [X8 + 0xB8]
	0x039871F0 STR X19, [X8]
	0x039871F4 LDR X0, [X23]
	0x039871F8 BL 0x1C16F10
	0x039871FC LDR X1, [X22]
	0x03987200 MOV X2, X31
	0x03987204 MOV X19, X0
	0x03987208 BL 0x39B19AC
	0x0398720C LDR X8, [X20]
	0x03987210 MOV X1, X31
	0x03987214 LDR X8, [X8 + 0xB8]
	0x03987218 STR X19, [X8 + 0x8]
	0x0398721C LDR X0, [X21]
	0x03987220 BL 0x3C124EC
	0x03987224 LDR X8, [X20]
	0x03987228 MOV X1, X31
	0x0398722C LDR X8, [X8 + 0xB8]
	0x03987230 STR W0, [X8 + 0x10]
	0x03987234 LDR X0, [X29]
	0x03987238 BL 0x3C124EC
	0x0398723C LDR X8, [X20]
	0x03987240 MOV X1, X31
	0x03987244 LDR X8, [X8 + 0xB8]
	0x03987248 STR W0, [X8 + 0x14]
	0x0398724C LDR X0, [X28]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X29
	005 Move [X31+56], X30
	006 Move [X31+64], X28
	007 Move [X31+72], X27
	008 Move [X31+80], X26
	009 Move [X31+88], X25
	010 Move [X31+96], X24
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X22, 0xA5C000
	017 Move X20, 0x76E000
	018 Move X26, 0x76E000
	019 Move X21, 0x7CB000
	020 Move W8, [X22+2648]
	021 Move X20, [X20+2288]
	022 Move X26, [X26+1880]
	023 Move X21, [X21+1280]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {64}
	029 Move X0, 0x76E000
	030 Move X0, [X0+2904]
	031 Call 0x1C17CF4
	032 Move X0, 0x76E000
	033 Move X0, [X0+2600]
	034 Call 0x1C17CF4
	035 Move X0, 0x76E000
	036 Move X0, [X0+1880]
	037 Call 0x1C17CF4
	038 Move X0, 0x7CB000
	039 Move X0, [X0+1328]
	040 Call 0x1C17CF4
	041 Move X0, 0x7CB000
	042 Move X0, [X0+1336]
	043 Call 0x1C17CF4
	044 Move X0, 0x76E000
	045 Move X0, [X0+2512]
	046 Call 0x1C17CF4
	047 Move X0, 0x76E000
	048 Move X0, [X0+2704]
	049 Call 0x1C17CF4
	050 Move X0, 0x76E000
	051 Move X0, [X0+2288]
	052 Call 0x1C17CF4
	053 Move X0, 0x7CB000
	054 Move X0, [X0+1280]
	055 Call 0x1C17CF4
	056 Move X0, 0x7CB000
	057 Move X0, [X0+1344]
	058 Call 0x1C17CF4
	059 Move X0, 0x7CB000
	060 Move X0, [X0+1352]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X22+2648], W8
	064 Move X0, [X20]
	065 Move X22, 0x76E000
	066 Move X22, [X22+2904]
	067 Call 0x1C17F10
	068 Move X1, X31
	069 Move X20, X0
	070 Call StringBuilder..ctor, X0
	071 Move X0, X31
	072 Call Time.get_frameCount
	073 Move X8, [X26]
	074 Move [X31+28], W0
	075 Add X1, X31, 28
	076 Move X0, X8
	077 Call 0x1C17E04
	078 Move X8, [X21]
	079 Move X21, X0
	080 Move W9, [X8+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {85}
	083 Move X0, X8
	084 Call 0x1C17DFC
	085 Call XRSystem.get_displayActive
	086 Move X8, [X22]
	087 And W9, W0, 1
	088 Add X1, X31, 24
	089 Move [X31+24], W9
	090 Move X0, X8
	091 Call 0x1C17E04
	092 Compare X20, 0
	093 JumpIfEqual {259}
	094 Move X8, 0x7CB000
	095 Move X8, [X8+1352]
	096 Move X3, X0
	097 Move X0, X20
	098 Move X2, X21
	099 Move X1, [X8]
	100 Move X4, X31
	101 Call StringBuilder.AppendFormat, X0, X1, X2, X3
	102 Move X0, X20
	103 Move X1, X31
	104 Call StringBuilder.AppendLine, X0
	105 Move X0, [X19+16]
	106 Compare X0, 0
	107 JumpIfEqual {259}
	108 Move X28, 0x76E000
	109 Move X29, 0x76E000
	110 Move X27, 0x7CB000
	111 Move X28, [X28+2512]
	112 Move X29, [X29+2704]
	113 Move X27, [X27+1344]
	114 Move W21, W31
	115 Move W8, [X0+24]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X8, 0x7CB000
	118 Move X8, [X8+1336]
	119 Move W1, W21
	120 Move X2, [X8]
	121 Call List`1<ValueTuple`2<Object, Object>>.get_Item, X0, X1
	122 Compare X1, 0
	123 JumpIfEqual {259}
	124 Move X0, X1
	125 Move X22, X1
	126 Call XRPass.get_viewCount, X0
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move W23, W31
	129 Move X0, X22
	130 Move W1, W23
	131 Call XRPass.GetViewport, X0, X1
	132 Move X0, [X28]
	133 Move W1, 6
	134 Move V9, V2
	135 Move V8, V3
	136 Call 0x1C17D6C
	137 Move X24, X0
	138 Move W8, [X22+36]
	139 Move X0, [X26]
	140 Add X1, X31, 28
	141 Move [X31+28], W8
	142 Call 0x1C17E04
	143 Compare X24, 0
	144 JumpIfEqual {259}
	145 Move X25, X0
	146 Compare X0, 0
	147 JumpIfEqual {154}
	148 Move X8, [X24]
	149 Move X0, X25
	150 Move X1, [X8+64]
	151 Call 0x1C17E00
	152 Compare X0, 0
	153 JumpIfEqual {287}
	154 Move W8, [X24+24]
	155 Compare W8, 0
	156 JumpIfEqual {286}
	157 Move [X24+32], X25
	158 Move W8, [X22+40]
	159 Move X0, [X26]
	160 Add X1, X31, 24
	161 Move [X31+24], W8
	162 Call 0x1C17E04
	163 Move X25, X0
	164 Compare X0, 0
	165 JumpIfEqual {172}
	166 Move X8, [X24]
	167 Move X0, X25
	168 Move X1, [X8+64]
	169 Call 0x1C17E00
	170 Compare X0, 0
	171 JumpIfEqual {287}
	172 Move W8, [X24+24]
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move [X24+40], X25
	175 Move X0, [X26]
	176 Add X1, X31, 20
	177 Move [X31+20], W23
	178 Call 0x1C17E04
	179 Move X25, X0
	180 Compare X0, 0
	181 JumpIfEqual {188}
	182 Move X8, [X24]
	183 Move X0, X25
	184 Move X1, [X8+64]
	185 Call 0x1C17E00
	186 Compare X0, 0
	187 JumpIfEqual {287}
	188 Move W8, [X24+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X0, X22
	191 Move W1, W23
	192 Move [X24+48], X25
	193 Call XRPass.GetTextureArraySlice, X0, X1
	194 Move X8, [X26]
	195 Move [X31+16], W0
	196 Add X1, X31, 16
	197 Move X0, X8
	198 Call 0x1C17E04
	199 Move X25, X0
	200 Compare X0, 0
	201 JumpIfEqual {208}
	202 Move X8, [X24]
	203 Move X0, X25
	204 Move X1, [X8+64]
	205 Call 0x1C17E00
	206 Compare X0, 0
	207 JumpIfEqual {287}
	208 Move W8, [X24+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move [X24+56], X25
	211 Move X0, [X29]
	212 Add X1, X31, 12
	213 Move [X31+12], S9
	214 Call 0x1C17E04
	215 Move X25, X0
	216 Compare X0, 0
	217 JumpIfEqual {224}
	218 Move X8, [X24]
	219 Move X0, X25
	220 Move X1, [X8+64]
	221 Call 0x1C17E00
	222 Compare X0, 0
	223 JumpIfEqual {287}
	224 Move W8, [X24+24]
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move [X24+64], X25
	227 Move X0, [X29]
	228 Add X1, X31, 8
	229 Move [X31+8], S8
	230 Call 0x1C17E04
	231 Move X25, X0
	232 Compare X0, 0
	233 JumpIfEqual {240}
	234 Move X8, [X24]
	235 Move X0, X25
	236 Move X1, [X8+64]
	237 Call 0x1C17E00
	238 Compare X0, 0
	239 JumpIfEqual {287}
	240 Move W8, [X24+24]
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move [X24+72], X25
	243 Move X1, [X27]
	244 Move X0, X20
	245 Move X2, X24
	246 Move X3, X31
	247 Call StringBuilder.AppendFormat, X0, X1, X2
	248 Move X0, X20
	249 Move X1, X31
	250 Call StringBuilder.AppendLine, X0
	251 Move X0, X22
	252 Add W23, W23, 1
	253 Call XRPass.get_viewCount, X0
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move X0, [X19+16]
	256 Add W21, W21, 1
	257 Compare X0, 0
	258 JumpIfNotEqual {115}
	259 Call 0x1C17F20
	260 Move X8, 0x76D000
	261 Move X8, [X8+2600]
	262 Move X0, [X8]
	263 Move W8, [X0+224]
	264 Compare W8, 0
	265 JumpIfNotEqual {267}
	266 Call 0x1C17DFC
	267 Move X0, X20
	268 Move X1, X31
	269 Call Debug.Log, X0
	270 Move X20, [X31+128]
	271 Move X19, [X31+136]
	272 Move X22, [X31+112]
	273 Move X21, [X31+120]
	274 Move X24, [X31+96]
	275 Move X23, [X31+104]
	276 Move X26, [X31+80]
	277 Move X25, [X31+88]
	278 Move X28, [X31+64]
	279 Move X27, [X31+72]
	280 Move X29, [X31+48]
	281 Move X30, [X31+56]
	282 Move D9, [X31+32]
	283 Move D8, [X31+40]
	284 Add X31, X31, 144
	285 Return 
	286 Call 0x1C17F28
	287 Call 0x1C17F44
	288 Move X1, X31
	289 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03987374 STR X30, [X31 - 0x20]!
	0x03987378 STP X20, X19, [X31 + 0x10]
	0x0398737C ADRP X20, 0xA5A000
	0x03987380 LDRB W8, [X20 + 0xA5C]
	0x03987384 MOV X19, X0
	0x03987388 TBNZ X8, 0x0, 0x39873A0
	0x0398738C ADRP X0, 0x76C000
	0x03987390 LDR X0, [X0 + 0x598]
	0x03987394 BL 0x1C16CF4
	0x03987398 MOVZ W8, 0x1
	0x0398739C STRB W8, [X20 + 0xA5C]
	0x039873A0 MOV X0, X19
	0x039873A4 BL 0x3987438
	0x039873A8 TBZ X0, 0x0, 0x39873DC
	0x039873AC LDR X0, [X19 + 0x10]
	0x039873B0 CBZ X0, 0x3987434
	0x039873B4 BL 0x398632C
	0x039873B8 CMP W0, 0x2
	0x039873BC B.LT 0x39873EC
	0x039873C0 ADRP X8, 0x76C000
	0x039873C4 LDR X8, [X8 + 0x598]
	0x039873C8 LDR X19, [X19 + 0x18]
	0x039873CC LDR X0, [X8]
	0x039873D0 LDR W8, [X0 + 0xE0]
	0x039873D4 CBNZ W8, 0x398741C
	0x039873D8 B 0x3987418
	0x039873DC LDP X20, X19, [X31 + 0x10]
	0x039873E0 MOV W0, W31
	0x039873E4 LDR X30, [X31], #0x20
	0x039873E8 RET
	0x039873EC LDR X0, [X19 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA5B000
	007 Move X22, 0x7CA000
	008 Move X20, 0x7CA000
	009 Move W8, [X21+2649]
	010 Move X22, [X22+1368]
	011 Move X20, [X20+1376]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x7CA000
	018 Move X0, [X0+1376]
	019 Call 0x1C17CF4
	020 Move X0, 0x7CA000
	021 Move X0, [X0+1368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2649], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call List`1<ValueTuple`2<Object, Object>>..ctor, X0
	030 Move [X19+16], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call Object..ctor, X0
	039 Return 

