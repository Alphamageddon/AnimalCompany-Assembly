Type: UnityEngine.Experimental.Rendering.XRPass

Method: System.Void .ctor()

Disassembly:
	0x03989098 LDR X8, [X0 + 0xB8]
	0x0398909C STR W19, [X8 + 0x4C]
	0x039890A0 LDP X20, X19, [X31 + 0x10]
	0x039890A4 LDP X30, X21, [X31], #0x20
	0x039890A8 RET
	0x039890AC STR X30, [X31 - 0x20]!
	0x039890B0 STP X20, X19, [X31 + 0x10]
	0x039890B4 ADRP X20, 0xA58000
	0x039890B8 ADRP X19, 0x7C7000
	0x039890BC LDRB W8, [X20 + 0xA7E]
	0x039890C0 LDR X19, [X19 + 0x500]
	0x039890C4 TBNZ X8, 0x0, 0x39890DC
	0x039890C8 ADRP X0, 0x7C7000
	0x039890CC LDR X0, [X0 + 0x500]
	0x039890D0 BL 0x1C16CF4
	0x039890D4 MOVZ W8, 0x1
	0x039890D8 STRB W8, [X20 + 0xA7E]
	0x039890DC LDR X0, [X19]
	0x039890E0 LDR W8, [X0 + 0xE0]
	0x039890E4 CBNZ W8, 0x39890F0
	0x039890E8 BL 0x1C16DFC
	0x039890EC LDR X0, [X19]
	0x039890F0 LDR X8, [X0 + 0xB8]
	0x039890F4 LDP X20, X19, [X31 + 0x10]
	0x039890F8 LDRB W0, [X8 + 0x50]
	0x039890FC LDR X30, [X31], #0x20
	0x03989100 RET
	0x03989104 STP X30, X21, [X31 - 0x20]!
	0x03989108 STP X20, X19, [X31 + 0x10]
	0x0398910C ADRP X21, 0xA58000
	0x03989110 ADRP X20, 0x7C7000
	0x03989114 LDRB W8, [X21 + 0xA7F]
	0x03989118 LDR X20, [X20 + 0x500]
	0x0398911C MOV W19, W0
	0x03989120 TBNZ X8, 0x0, 0x3989138
	0x03989124 ADRP X0, 0x7C7000
	0x03989128 LDR X0, [X0 + 0x500]
	0x0398912C BL 0x1C16CF4
	0x03989130 MOVZ W8, 0x1
	0x03989134 STRB W8, [X21 + 0xA7F]
	0x03989138 LDR X0, [X20]
	0x0398913C LDR W8, [X0 + 0xE0]
	0x03989140 CBNZ W8, 0x398914C
	0x03989144 BL 0x1C16DFC
	0x03989148 LDR X0, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xA59000
	008 Move X22, 0x7C8000
	009 Move X20, 0x7C8000
	010 Move X21, 0x7C8000
	011 Move W8, [X23+2659]
	012 Move X22, [X22+1592]
	013 Move X20, [X20+1600]
	014 Move X21, [X21+1528]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x7C8000
	021 Move X0, [X0+1600]
	022 Call 0x1C17CF4
	023 Move X0, 0x7C8000
	024 Move X0, [X0+1592]
	025 Call 0x1C17CF4
	026 Move X0, 0x7C8000
	027 Move X0, [X0+1528]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+2659], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Call Object..ctor, X0
	034 Move X0, [X22]
	035 Call 0x1C17F10
	036 Move X2, [X20]
	037 Move W1, 2
	038 Move X20, X0
	039 Call List`1<XRView>..ctor, X0, X1
	040 Move [X19+16], X20
	041 Move X0, [X21]
	042 Call 0x1C17F10
	043 Move X1, X31
	044 Move X20, X0
	045 Call Object..ctor, X0
	046 Move [X20+16], X19
	047 Move [X19+24], X20
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return 

Method: UnityEngine.Experimental.Rendering.XRPass CreateDefault(UnityEngine.Experimental.Rendering.XRPassCreateInfo createInfo)

Disassembly:
	0x0398914C LDR X8, [X0 + 0xB8]
	0x03989150 AND W9, W19, 0x1
	0x03989154 LDP X20, X19, [X31 + 0x10]
	0x03989158 STRB W9, [X8 + 0x50]
	0x0398915C LDP X30, X21, [X31], #0x20
	0x03989160 RET
	0x03989164 STP X30, X23, [X31 - 0x30]!
	0x03989168 STP X22, X21, [X31 + 0x10]
	0x0398916C STP X20, X19, [X31 + 0x20]
	0x03989170 ADRP X22, 0xA58000
	0x03989174 LDRB W8, [X22 + 0xA80]
	0x03989178 MOV X19, X2
	0x0398917C MOV X20, X1
	0x03989180 MOV X21, X0
	0x03989184 TBNZ X8, 0x0, 0x39891D8
	0x03989188 ADRP X0, 0x7C7000
	0x0398918C LDR X0, [X0 + 0x6A0]
	0x03989190 BL 0x1C16CF4
	0x03989194 ADRP X0, 0x792000
	0x03989198 LDR X0, [X0 + 0x8F8]
	0x0398919C BL 0x1C16CF4
	0x039891A0 ADRP X0, 0x76A000
	0x039891A4 LDR X0, [X0 + 0x598]
	0x039891A8 BL 0x1C16CF4
	0x039891AC ADRP X0, 0x7C7000
	0x039891B0 LDR X0, [X0 + 0x6A8]
	0x039891B4 BL 0x1C16CF4
	0x039891B8 ADRP X0, 0x7C7000
	0x039891BC LDR X0, [X0 + 0x578]
	0x039891C0 BL 0x1C16CF4
	0x039891C4 ADRP X0, 0x7C7000
	0x039891C8 LDR X0, [X0 + 0x500]
	0x039891CC BL 0x1C16CF4
	0x039891D0 MOVZ W8, 0x1
	0x039891D4 STRB W8, [X22 + 0xA80]
	0x039891D8 CBZ X21, 0x3989494
	0x039891DC ADRP X22, 0x7C7000
	0x039891E0 LDR X22, [X22 + 0x500]
	0x039891E4 LDR X0, [X22]
	0x039891E8 LDR W8, [X0 + 0xE0]
	0x039891EC CBNZ W8, 0x39891F8
	0x039891F0 BL 0x1C16DFC
	0x039891F4 LDR X0, [X22]
	0x039891F8 LDR X8, [X0 + 0xB8]
	0x039891FC STR X21, [X8 + 0x8]
	0x03989200 BL 0x39894DC
	0x03989204 MOV X0, X31
	0x03989208 BL 0x3C3BBBC
	0x0398920C ADRP X23, 0xA58000
	0x03989210 LDRB W8, [X23 + 0xB3C]
	0x03989214 MOV W21, W0
	0x03989218 CBNZ W8, 0x3989230
	0x0398921C ADRP X0, 0x7C7000
	0x03989220 LDR X0, [X0 + 0x500]

ISIL:
	001 Move [X31-48], X29
	002 Move [X31-40], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract X31, X31, 3888
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X21+40]
	010 Move X22, 0xA59000
	011 Move X20, 0x7C8000
	012 Move X19, X0
	013 Move [X31+3880], X8
	014 Move W8, [X22+2660]
	015 Move X20, [X20+1608]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x7C8000
	021 Move X0, [X0+1616]
	022 Call 0x1C17CF4
	023 Move X0, 0x7C8000
	024 Move X0, [X0+1608]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+2660], W8
	028 Move X0, [X20]
	029 Move X20, 0x7C8000
	030 Move W8, [X0+224]
	031 Move X20, [X20+1616]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Call 0x2D56510
	037 Move X20, X0
	038 Add X0, X31, 1944
	039 Move W2, 1936
	040 Move X1, X19
	041 Call 0x3EB2AC0
	042 Compare X20, 0
	043 JumpIfEqual {63}
	044 Add X0, X31, 8
	045 Add X1, X31, 1944
	046 Move W2, 1936
	047 Call 0x3EB2AC0
	048 Add X1, X31, 8
	049 Move X0, X20
	050 Call XRPass.InitBase, X0, X1
	051 Move X8, [X21+40]
	052 Move X9, [X31+3880]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, X20
	055 Add X31, X31, 3888
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X29, [X31+48]
	061 Move X30, [X31+56]
	062 Return X0
	063 Call 0x1C17F20
	064 Call 0x3EB2B20

Method: System.Void Release()

Disassembly:
	0x039893B0 LDR X8, [X22]
	0x039893B4 LDR X8, [X8 + 0xB8]
	0x039893B8 STR X19, [X8 + 0x30]
	0x039893BC LDR X0, [X21]
	0x039893C0 LDR W8, [X0 + 0xE0]
	0x039893C4 CBNZ W8, 0x39893CC
	0x039893C8 BL 0x1C16DFC
	0x039893CC ADRP X19, 0xA58000
	0x039893D0 LDRB W8, [X19 + 0xB3D]
	0x039893D4 CBNZ W8, 0x39893EC
	0x039893D8 ADRP X0, 0x7C7000
	0x039893DC LDR X0, [X0 + 0x578]
	0x039893E0 BL 0x1C16CF4
	0x039893E4 MOVZ W8, 0x1
	0x039893E8 STRB W8, [X19 + 0xB3D]
	0x039893EC LDR X0, [X21]
	0x039893F0 LDR W8, [X0 + 0xE0]
	0x039893F4 CBNZ W8, 0x3989400
	0x039893F8 BL 0x1C16DFC
	0x039893FC LDR X0, [X21]
	0x03989400 LDR X8, [X0 + 0xB8]
	0x03989404 LDRB W8, [X8]
	0x03989408 CBZ W8, 0x3989484
	0x0398940C ADRP X8, 0x7C7000
	0x03989410 LDR X8, [X8 + 0x6A0]
	0x03989414 ADRP X19, 0x7C7000
	0x03989418 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA59000
	006 Move X20, 0x7C8000
	007 Move W8, [X21+2661]
	008 Move X20, [X20+1608]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x7C8000
	015 Move X0, [X0+1632]
	016 Call 0x1C17CF4
	017 Move X0, 0x7C8000
	018 Move X0, [X0+1608]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2661], W8
	022 Move X0, [X20]
	023 Move X20, 0x7C8000
	024 Move W8, [X0+224]
	025 Move X20, [X20+1632]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X1, [X20]
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x2D56650, X0
	036 Return 

Method: System.Boolean get_enabled()

Disassembly:
	0x03985C98 LDR X8, [X23]
	0x03985C9C LDR X9, [X8 + 0xB8]
	0x03985CA0 LDR X8, [X9 + 0x38]
	0x03985CA4 CBZ X8, 0x3985CEC
	0x03985CA8 LDR X1, [X9]
	0x03985CAC LDR X9, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Call XRPass.get_viewCount, X0
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Boolean get_supportsFoveatedRendering()

Disassembly:
	0x0398941C LDR X19, [X19 + 0x6A8]
	0x03989420 BL 0x1C16F10
	0x03989424 LDR X2, [X19]
	0x03989428 MOV X1, X31
	0x0398942C MOV X3, X31
	0x03989430 MOV X19, X0
	0x03989434 BL 0x2A76D00
	0x03989438 LDR X0, [X22]
	0x0398943C LDR W8, [X0 + 0xE0]
	0x03989440 CBNZ W8, 0x3989448
	0x03989444 BL 0x1C16DFC
	0x03989448 ADRP X20, 0xA58000
	0x0398944C LDRB W8, [X20 + 0xB3E]
	0x03989450 CBNZ W8, 0x3989468
	0x03989454 ADRP X0, 0x7C7000
	0x03989458 LDR X0, [X0 + 0x500]
	0x0398945C BL 0x1C16CF4
	0x03989460 MOVZ W8, 0x1
	0x03989464 STRB W8, [X20 + 0xB3E]
	0x03989468 LDR X0, [X22]
	0x0398946C LDR W8, [X0 + 0xE0]
	0x03989470 CBNZ W8, 0x398947C
	0x03989474 BL 0x1C16DFC
	0x03989478 LDR X0, [X22]
	0x0398947C LDR X8, [X0 + 0xB8]
	0x03989480 STR X19, [X8 + 0x38]
	0x03989484 LDP X20, X19, [X31 + 0x20]
	0x03989488 LDP X22, X21, [X31 + 0x10]
	0x0398948C LDP X30, X23, [X31], #0x30
	0x03989490 RET
	0x03989494 ADRP X0, 0x76F000
	0x03989498 LDR X0, [X0 + 0x528]
	0x0398949C BL 0x1C16D08
	0x039894A0 BL 0x1C16F10
	0x039894A4 MOV X19, X0
	0x039894A8 ADRP X0, 0x7C7000
	0x039894AC LDR X0, [X0 + 0x6B0]
	0x039894B0 BL 0x1C16D08
	0x039894B4 MOV X1, X0
	0x039894B8 MOV X0, X19
	0x039894BC MOV X2, X31
	0x039894C0 BL 0x330E100
	0x039894C4 ADRP X0, 0x7C7000
	0x039894C8 LDR X0, [X0 + 0x6B8]
	0x039894CC BL 0x1C16D08
	0x039894D0 MOV X1, X0
	0x039894D4 MOV X0, X19
	0x039894D8 BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA59000
	005 Move W8, [X20+2662]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x7C8000
	012 Move X0, [X0+1280]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2662], W8
	016 Move X0, X19
	017 Call XRPass.get_viewCount, X0
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X0, [X19+1728]
	020 Move X1, X31
	021 Move X2, X31
	022 Call IntPtr.op_Inequality, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {53}
	027 Move X19, 0x7C8000
	028 Move X19, [X19+1280]
	029 Move X0, [X19]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X20, 0xA59000
	035 Move W8, [X20+2873]
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x7C8000
	039 Move X0, [X0+1280]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+2873], W8
	043 Move X0, [X19]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move X0, [X19]
	049 Move X8, [X0+184]
	050 Move W8, [X8+76]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CSET not yet implemented."
	053 Move W0, W31
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Return X0

Method: System.Boolean get_copyDepth()

Disassembly:
	0x039894DC STP X30, X21, [X31 - 0x20]!
	0x039894E0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_copyDepth(System.Boolean value)

Disassembly:
	0x039894E4 ADRP X19, 0xA58000
	0x039894E8 ADRP X20, 0x7C7000
	0x039894EC LDRB W8, [X19 + 0xA8B]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+32], W8
	003 Return 

Method: System.Int32 get_multipassId()

Disassembly:
	0x039894F0 LDR X20, [X20 + 0x500]
	0x039894F4 TBNZ X8, 0x0, 0x3989554

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_multipassId(System.Int32 value)

Disassembly:
	0x039894F8 ADRP X0, 0x7C7000
	0x039894FC LDR X0, [X0 + 0x6C0]

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: System.Int32 get_cullingPassId()

Disassembly:
	0x03989500 BL 0x1C16CF4
	0x03989504 ADRP X0, 0x7C7000

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_cullingPassId(System.Int32 value)

Disassembly:
	0x03989508 LDR X0, [X0 + 0x6C8]
	0x0398950C BL 0x1C16CF4

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: UnityEngine.Rendering.RenderTargetIdentifier get_renderTarget()

Disassembly:
	0x03989510 ADRP X0, 0x76A000
	0x03989514 LDR X0, [X0 + 0x5A8]
	0x03989518 BL 0x1C16CF4
	0x0398951C ADRP X0, 0x7C7000
	0x03989520 LDR X0, [X0 + 0x6D0]

ISIL:
	001 Move X9, [X0+80]
	002 Move V1, [X0+48]
	003 Move V0, [X0+64]
	004 Move [X8+32], X9
	005 Move [X8], V1
	006 Move [X8+8], V0
	007 Return X0

Method: System.Void set_renderTarget(UnityEngine.Rendering.RenderTargetIdentifier value)

Disassembly:
	0x03989524 BL 0x1C16CF4
	0x03989528 ADRP X0, 0x792000
	0x0398952C LDR X0, [X0 + 0xC0]
	0x03989530 BL 0x1C16CF4
	0x03989534 ADRP X0, 0x7C7000

ISIL:
	001 Move X8, [X1+32]
	002 Move V1, [X1]
	003 Move V0, [X1+16]
	004 Move [X0+80], X8
	005 Move [X0+48], V1
	006 Move [X0+56], V0
	007 Return 

Method: UnityEngine.RenderTextureDescriptor get_renderTargetDesc()

Disassembly:
	0x03989538 LDR X0, [X0 + 0x618]
	0x0398953C BL 0x1C16CF4
	0x03989540 ADRP X0, 0x7C7000
	0x03989544 LDR X0, [X0 + 0x500]
	0x03989548 BL 0x1C16CF4
	0x0398954C MOVZ W8, 0x1
	0x03989550 STRB W8, [X19 + 0xA8B]
	0x03989554 LDR X0, [X20]

ISIL:
	001 Move W9, [X0+136]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 NotImplemented "Instruction LDUR not yet implemented."
	005 Move [X8+48], W9
	006 Move [X8+16], V1
	007 Move [X8+24], V0
	008 Move [X8], V2
	009 Return X0

Method: System.Void set_renderTargetDesc(UnityEngine.RenderTextureDescriptor value)

Disassembly:
	0x03989558 ADRP X19, 0x792000
	0x0398955C LDR W8, [X0 + 0xE0]
	0x03989560 LDR X19, [X19 + 0xC0]
	0x03989564 CBNZ W8, 0x3989570
	0x03989568 BL 0x1C16DFC
	0x0398956C LDR X0, [X20]
	0x03989570 LDR X8, [X19]
	0x03989574 LDR X9, [X0 + 0xB8]

ISIL:
	001 Move W8, [X1+48]
	002 Move V1, [X1+16]
	003 Move V0, [X1+32]
	004 Move V2, [X1]
	005 Move [X0+136], W8
	006 Move [X0+120], V0
	007 Move [X0+104], V1
	008 Move [X0+88], V2
	009 Return 

Method: UnityEngine.Rendering.ScriptableCullingParameters get_cullingParams()

Disassembly:
	0x03989578 ADRP X21, 0x7C7000
	0x0398957C LDR W10, [X8 + 0xE0]
	0x03989580 LDR X19, [X9 + 0x10]
	0x03989584 LDR X21, [X21 + 0x6D0]

ISIL:
	001 Add X1, X0, 144
	002 Move W2, 1584
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_cullingParams(UnityEngine.Rendering.ScriptableCullingParameters value)

Disassembly:
	0x03989588 CBNZ W10, 0x3989594
	0x0398958C MOV X0, X8
	0x03989590 BL 0x1C16DFC
	0x03989594 LDR X1, [X21]
	0x03989598 MOV X0, X19
	0x0398959C BL 0x229839C

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 144
	003 Move W2, 1584
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: System.Int32 get_viewCount()

Disassembly:
	0x0398732C LDR X8, [X8 + 0xB8]
	0x03987330 LDP X26, X25, [X31 + 0x20]
	0x03987334 LDP X28, X27, [X31 + 0x10]
	0x03987338 STR W0, [X8 + 0x34]
	0x0398733C LDP X29, X30, [X31], #0x60
	0x03987340 RET
	0x03987344 STR X30, [X31 - 0x20]!
	0x03987348 STP X20, X19, [X31 + 0x10]
	0x0398734C MOV X19, X1
	0x03987350 MOV X1, X31
	0x03987354 MOV X20, X0
	0x03987358 BL 0x33BDD8C
	0x0398735C STR X19, [X20 + 0x10]
	0x03987360 LDP X20, X19, [X31 + 0x10]
	0x03987364 LDR X30, [X31], #0x20
	0x03987368 RET
	0x0398736C STR X1, [X0 + 0x20]
	0x03987370 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA5B000
	005 Move W8, [X20+2663]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x7CA000
	012 Move X0, [X0+1360]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2663], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {24}
	019 Move W0, [X8+24]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.Boolean get_singlePassEnabled()

Disassembly:
	0x03985DE0 BLR X9
	0x03985DE4 LDR X0, [X19 + 0x10]
	0x03985DE8 ADD W21, W21, 0x1
	0x03985DEC SUB W24, W24, 0x1
	0x03985DF0 CBNZ X0, 0x3985D8C
	0x03985DF4 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Call XRPass.get_viewCount, X0
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.IntPtr get_foveatedRenderingInfo()

Disassembly:
	0x039895A0 LDR X0, [X20]
	0x039895A4 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move X0, [X0+1728]
	002 Return X0

Method: System.Void set_foveatedRenderingInfo(System.IntPtr value)

Disassembly:
	0x039895A8 LDR X9, [X8 + 0x10]
	0x039895AC CBZ X9, 0x3989750

ISIL:
	001 Move [X0+1728], X1
	002 Return 

Method: System.Boolean get_isHDRDisplayOutputActive()

Disassembly:
	0x039895B0 LDR W10, [X0 + 0xE0]
	0x039895B4 LDR W19, [X9 + 0x18]
	0x039895B8 CBNZ W10, 0x39895C8
	0x039895BC BL 0x1C16DFC
	0x039895C0 LDR X0, [X20]
	0x039895C4 LDR X8, [X0 + 0xB8]
	0x039895C8 CMP W19, 0x1
	0x039895CC B.LT 0x3989740
	0x039895D0 LDR X8, [X8 + 0x10]
	0x039895D4 CBZ X8, 0x3989750
	0x039895D8 LDR W9, [X8 + 0x18]
	0x039895DC CMP W9, 0x2
	0x039895E0 B.GE 0x3989754
	0x039895E4 LDR W9, [X0 + 0xE0]
	0x039895E8 CBNZ W9, 0x3989600
	0x039895EC BL 0x1C16DFC
	0x039895F0 LDR X8, [X20]
	0x039895F4 LDR X8, [X8 + 0xB8]
	0x039895F8 LDR X8, [X8 + 0x10]
	0x039895FC CBZ X8, 0x3989750
	0x03989600 ADRP X9, 0x7C7000
	0x03989604 LDR X9, [X9 + 0x6C8]
	0x03989608 MOV X0, X8
	0x0398960C MOV W1, W31
	0x03989610 LDR X2, [X9]
	0x03989614 BL 0x301BCCC
	0x03989618 LDR X8, [X20]
	0x0398961C LDR X8, [X8 + 0xB8]
	0x03989620 STR X0, [X8 + 0x18]
	0x03989624 CBZ X0, 0x3989750
	0x03989628 MOVZ W1, 0x1
	0x0398962C MOV X2, X31
	0x03989630 BL 0x3E657C0
	0x03989634 LDR X8, [X20]
	0x03989638 MOV X0, X31
	0x0398963C LDR X8, [X8 + 0xB8]
	0x03989640 LDR X19, [X8 + 0x18]
	0x03989644 BL 0x3C113A8
	0x03989648 CBZ X19, 0x3989750
	0x0398964C CMP W0, 0x1
	0x03989650 CSET W1, EQ
	0x03989654 MOV X0, X19
	0x03989658 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA59000
	005 Move X19, 0x7C8000
	006 Move W8, [X20+2664]
	007 Move X19, [X19+1280]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x7C8000
	013 Move X0, [X0+1280]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2664], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, 0xA59000
	023 Move W8, [X20+2874]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x7C8000
	027 Move X0, [X0+1280]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2874], W8
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move X0, [X8+24]
	039 Compare X0, 0
	040 JumpIfEqual {55}
	041 Move X1, X31
	042 Call XRDisplaySubsystem.get_hdrOutputSettings, X0
	043 Compare X0, 0
	044 JumpIfEqual {51}
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, X31
	048 Move X30, [X31+32]
	049 Call HDROutputSettings.get_active, X0
	050 Return X0
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return X0
	055 Call 0x1C17F20

Method: UnityEngine.ColorGamut get_hdrDisplayOutputColorGamut()

Disassembly:
	0x0398965C BL 0x3E656F4
	0x03989660 LDR X8, [X20]
	0x03989664 LDR X8, [X8 + 0xB8]
	0x03989668 LDR X0, [X8 + 0x18]
	0x0398966C CBZ X0, 0x3989750
	0x03989670 ADRP X20, 0x7C7000
	0x03989674 LDR X20, [X20 + 0x618]
	0x03989678 MOVZ W1, 0x1
	0x0398967C MOV X2, X31
	0x03989680 BL 0x3E65738
	0x03989684 LDR X0, [X20]
	0x03989688 LDR W8, [X0 + 0xE0]
	0x0398968C CBNZ W8, 0x3989694
	0x03989690 BL 0x1C16DFC
	0x03989694 ADRP X19, 0xA58000
	0x03989698 LDRB W8, [X19 + 0xB3B]
	0x0398969C CBNZ W8, 0x39896B4
	0x039896A0 ADRP X0, 0x7C7000
	0x039896A4 LDR X0, [X0 + 0x618]
	0x039896A8 BL 0x1C16CF4
	0x039896AC MOVZ W8, 0x1
	0x039896B0 STRB W8, [X19 + 0xB3B]
	0x039896B4 LDR X0, [X20]
	0x039896B8 ADRP X19, 0x76A000
	0x039896BC LDR W8, [X0 + 0xE0]
	0x039896C0 LDR X19, [X19 + 0x5A8]
	0x039896C4 CBNZ W8, 0x39896D0
	0x039896C8 BL 0x1C16DFC
	0x039896CC LDR X0, [X20]
	0x039896D0 LDR X8, [X19]
	0x039896D4 LDR X9, [X0 + 0xB8]
	0x039896D8 LDR W10, [X8 + 0xE0]
	0x039896DC LDR W19, [X9]
	0x039896E0 CBNZ W10, 0x39896EC
	0x039896E4 MOV X0, X8
	0x039896E8 BL 0x1C16DFC
	0x039896EC MOVZ W1, 0x2
	0x039896F0 MOV W0, W19
	0x039896F4 MOV X2, X31
	0x039896F8 BL 0x337EDF0
	0x039896FC ADRP X21, 0xA58000
	0x03989700 LDRB W8, [X21 + 0xB40]
	0x03989704 MOV W19, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA59000
	005 Move X19, 0x7C8000
	006 Move W8, [X20+2665]
	007 Move X19, [X19+1280]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x7C8000
	013 Move X0, [X0+1280]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2665], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, 0xA59000
	023 Move W8, [X20+2874]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x7C8000
	027 Move X0, [X0+1280]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2874], W8
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move X0, [X8+24]
	039 Compare X0, 0
	040 JumpIfEqual {55}
	041 Move X1, X31
	042 Call XRDisplaySubsystem.get_hdrOutputSettings, X0
	043 Compare X0, 0
	044 JumpIfEqual {51}
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, X31
	048 Move X30, [X31+32]
	049 Call HDROutputSettings.get_displayColorGamut, X0
	050 Return X0
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return X0
	055 Call 0x1C17F20

Method: UnityEngine.Rendering.HDROutputUtils/HDRDisplayInformation get_hdrDisplayOutputInformation()

Disassembly:
	0x03989708 CBNZ W8, 0x3989720
	0x0398970C ADRP X0, 0x7C7000
	0x03989710 LDR X0, [X0 + 0x618]
	0x03989714 BL 0x1C16CF4
	0x03989718 MOVZ W8, 0x1
	0x0398971C STRB W8, [X21 + 0xB40]
	0x03989720 LDR X0, [X20]
	0x03989724 LDR W8, [X0 + 0xE0]
	0x03989728 CBNZ W8, 0x3989734
	0x0398972C BL 0x1C16DFC
	0x03989730 LDR X0, [X20]
	0x03989734 LDR X8, [X0 + 0xB8]
	0x03989738 STR W19, [X8]
	0x0398973C B 0x3989744
	0x03989740 STR X31, [X8 + 0x18]
	0x03989744 LDP X20, X19, [X31 + 0x10]
	0x03989748 LDP X30, X21, [X31], #0x20
	0x0398974C RET
	0x03989750 BL 0x1C16F20
	0x03989754 ADRP X0, 0x773000
	0x03989758 LDR X0, [X0 + 0x758]
	0x0398975C BL 0x1C16D08
	0x03989760 BL 0x1C16F10
	0x03989764 MOV X19, X0
	0x03989768 ADRP X0, 0x7C7000
	0x0398976C LDR X0, [X0 + 0x6D8]
	0x03989770 BL 0x1C16D08
	0x03989774 MOV X1, X0
	0x03989778 MOV X0, X19
	0x0398977C MOV X2, X31
	0x03989780 BL 0x33802E4
	0x03989784 ADRP X0, 0x7C7000
	0x03989788 LDR X0, [X0 + 0x6E0]
	0x0398978C BL 0x1C16D08
	0x03989790 MOV X1, X0
	0x03989794 MOV X0, X19
	0x03989798 BL 0x1C16DEC
	0x0398979C SUB X31, X31, 0x40
	0x039897A0 STP X30, X21, [X31 + 0x20]
	0x039897A4 STP X20, X19, [X31 + 0x30]
	0x039897A8 ADRP X21, 0xA58000
	0x039897AC ADRP X20, 0x7C7000
	0x039897B0 LDRB W8, [X21 + 0xA81]
	0x039897B4 LDR X20, [X20 + 0x500]
	0x039897B8 MOV W19, W0
	0x039897BC TBNZ X8, 0x0, 0x398981C
	0x039897C0 ADRP X0, 0x7C7000
	0x039897C4 LDR X0, [X0 + 0x6E8]
	0x039897C8 BL 0x1C16CF4
	0x039897CC ADRP X0, 0x7C7000
	0x039897D0 LDR X0, [X0 + 0x6F0]
	0x039897D4 BL 0x1C16CF4
	0x039897D8 ADRP X0, 0x7C7000
	0x039897DC LDR X0, [X0 + 0x6F8]
	0x039897E0 BL 0x1C16CF4
	0x039897E4 ADRP X0, 0x7C7000
	0x039897E8 LDR X0, [X0 + 0x700]
	0x039897EC BL 0x1C16CF4
	0x039897F0 ADRP X0, 0x7C7000
	0x039897F4 LDR X0, [X0 + 0x6D0]
	0x039897F8 BL 0x1C16CF4
	0x039897FC ADRP X0, 0x792000
	0x03989800 LDR X0, [X0 + 0xC0]
	0x03989804 BL 0x1C16CF4
	0x03989808 ADRP X0, 0x7C7000
	0x0398980C LDR X0, [X0 + 0x500]
	0x03989810 BL 0x1C16CF4
	0x03989814 MOVZ W8, 0x1
	0x03989818 STRB W8, [X21 + 0xA81]
	0x0398981C LDR X0, [X20]
	0x03989820 STP X31, X31, [X31 + 0x8]
	0x03989824 STR X31, [X31 + 0x18]
	0x03989828 LDR W8, [X0 + 0xE0]
	0x0398982C CBNZ W8, 0x3989838
	0x03989830 BL 0x1C16DFC
	0x03989834 LDR X0, [X20]
	0x03989838 LDR X8, [X0 + 0xB8]
	0x0398983C LDR W9, [X8 + 0x20]
	0x03989840 CMP W9, W19
	0x03989844 B.EQ 0x3989914
	0x03989848 LDR W9, [X0 + 0xE0]
	0x0398984C CBNZ W9, 0x398985C
	0x03989850 BL 0x1C16DFC
	0x03989854 LDR X8, [X20]
	0x03989858 LDR X8, [X8 + 0xB8]
	0x0398985C STR W19, [X8 + 0x20]
	0x03989860 ADRP X9, 0x792000
	0x03989864 LDR X9, [X9 + 0xC0]
	0x03989868 LDR X19, [X8 + 0x10]
	0x0398986C LDR X0, [X9]
	0x03989870 LDR W9, [X0 + 0xE0]
	0x03989874 CBNZ W9, 0x398987C
	0x03989878 BL 0x1C16DFC
	0x0398987C ADRP X8, 0x7C7000
	0x03989880 LDR X8, [X8 + 0x6D0]
	0x03989884 MOV X0, X19
	0x03989888 LDR X1, [X8]
	0x0398988C BL 0x229839C
	0x03989890 LDR X8, [X20]
	0x03989894 LDR X8, [X8 + 0xB8]
	0x03989898 LDR X0, [X8 + 0x10]
	0x0398989C CBZ X0, 0x3989928
	0x039898A0 ADRP X8, 0x7C7000
	0x039898A4 LDR X8, [X8 + 0x700]
	0x039898A8 LDR X1, [X8]
	0x039898AC ADD X8, X31, 0x8
	0x039898B0 BL 0x301CB58
	0x039898B4 ADRP X21, 0x7C7000
	0x039898B8 LDR X21, [X21 + 0x6F0]
	0x039898BC LDR X1, [X21]
	0x039898C0 ADD X0, X31, 0x8
	0x039898C4 BL 0x2BC4350
	0x039898C8 TBZ X0, 0x0, 0x3989900
	0x039898CC LDR X0, [X20]
	0x039898D0 LDR X19, [X31 + 0x18]
	0x039898D4 LDR W8, [X0 + 0xE0]
	0x039898D8 CBNZ W8, 0x39898E0
	0x039898DC BL 0x1C16DFC
	0x039898E0 CBZ X19, 0x3989924
	0x039898E4 LDR X8, [X20]
	0x039898E8 LDR X8, [X8 + 0xB8]
	0x039898EC LDR W1, [X8 + 0x20]
	0x039898F0 MOV X0, X19
	0x039898F4 MOV X2, X31
	0x039898F8 BL 0x3E6577C
	0x039898FC B 0x39898BC
	0x03989900 ADRP X8, 0x7C7000
	0x03989904 LDR X8, [X8 + 0x6E8]
	0x03989908 ADD X0, X31, 0x8
	0x0398990C LDR X1, [X8]
	0x03989910 BL 0x2BC434C
	0x03989914 LDP X20, X19, [X31 + 0x30]
	0x03989918 LDP X30, X21, [X31 + 0x20]
	0x0398991C ADD X31, X31, 0x40
	0x03989920 RET
	0x03989924 BL 0x1C16F20
	0x03989928 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xA59000
	009 Move X22, 0x7C8000
	010 Move W8, [X19+2666]
	011 Move X22, [X22+1280]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7C8000
	017 Move X0, [X0+1280]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2666], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X23, 0xA59000
	027 Move W8, [X23+2874]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0x7C8000
	031 Move X0, [X0+1280]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+2874], W8
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X0, [X8+24]
	043 Compare X0, 0
	044 JumpIfEqual {170}
	045 Move X1, X31
	046 Call XRDisplaySubsystem.get_hdrOutputSettings, X0
	047 Compare X0, 0
	048 JumpIfEqual {52}
	049 Move X1, X31
	050 Call HDROutputSettings.get_maxFullFrameToneMapLuminance, X0
	051 Move W19, W0
	052 Move TEMP, 0
	053 Not TEMP
	054 Move W19, TEMP
	055 Move X0, [X22]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move W8, [X23+2874]
	061 Compare W8, 0
	062 JumpIfNotEqual {68}
	063 Move X0, 0x7C8000
	064 Move X0, [X0+1280]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X23+2874], W8
	068 Move X0, [X22]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {74}
	072 Call 0x1C17DFC
	073 Move X0, [X22]
	074 Move X8, [X0+184]
	075 Move X0, [X8+24]
	076 Compare X0, 0
	077 JumpIfEqual {170}
	078 Move X1, X31
	079 Call XRDisplaySubsystem.get_hdrOutputSettings, X0
	080 Compare X0, 0
	081 JumpIfEqual {85}
	082 Move X1, X31
	083 Call HDROutputSettings.get_maxToneMapLuminance, X0
	084 Move W20, W0
	085 Move TEMP, 0
	086 Not TEMP
	087 Move W20, TEMP
	088 Move X0, [X22]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move W8, [X23+2874]
	094 Compare W8, 0
	095 JumpIfNotEqual {101}
	096 Move X0, 0x7C8000
	097 Move X0, [X0+1280]
	098 Call 0x1C17CF4
	099 Move W8, 1
	100 Move [X23+2874], W8
	101 Move X0, [X22]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {107}
	105 Call 0x1C17DFC
	106 Move X0, [X22]
	107 Move X8, [X0+184]
	108 Move X0, [X8+24]
	109 Compare X0, 0
	110 JumpIfEqual {170}
	111 Move X1, X31
	112 Call XRDisplaySubsystem.get_hdrOutputSettings, X0
	113 Compare X0, 0
	114 JumpIfEqual {118}
	115 Move X1, X31
	116 Call HDROutputSettings.get_minToneMapLuminance, X0
	117 Move W21, W0
	118 Move TEMP, 0
	119 Not TEMP
	120 Move W21, TEMP
	121 Move X0, [X22]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move W8, [X23+2874]
	127 Compare W8, 0
	128 JumpIfNotEqual {134}
	129 Move X0, 0x7C8000
	130 Move X0, [X0+1280]
	131 Call 0x1C17CF4
	132 Move W8, 1
	133 Move [X23+2874], W8
	134 Move X0, [X22]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {140}
	138 Call 0x1C17DFC
	139 Move X0, [X22]
	140 Move X8, [X0+184]
	141 Move X0, [X8+24]
	142 Compare X0, 0
	143 JumpIfEqual {170}
	144 Move X1, X31
	145 Call XRDisplaySubsystem.get_hdrOutputSettings, X0
	146 Compare X0, 0
	147 JumpIfEqual {150}
	148 Move X1, X31
	149 Call HDROutputSettings.get_paperWhiteNits, X0
	150 Move W8, 0x43200000
	151 Move S0, W8
	152 Add X0, X31, 0
	153 Move W1, W19
	154 Move W2, W20
	155 Move W3, W21
	156 Move X4, X31
	157 Move [X31], X31
	158 Move [X31+8], X31
	159 Call HDRDisplayInformation..ctor, X0, X1, X2, X3, V0
	160 Move X0, [X31]
	161 Move X1, [X31+8]
	162 Move X20, [X31+48]
	163 Move X19, [X31+56]
	164 Move X22, [X31+32]
	165 Move X21, [X31+40]
	166 Move X30, [X31+16]
	167 Move X23, [X31+24]
	168 Add X31, X31, 64
	169 Return X0
	170 Call 0x1C17F20

Method: UnityEngine.Matrix4x4 GetProjMatrix(System.Int32 viewIndex = 0)

Disassembly:
	0x03985D48 BL 0x1C16CF4
	0x03985D4C ADRP X0, 0x7CB000
	0x03985D50 LDR X0, [X0 + 0x538]
	0x03985D54 BL 0x1C16CF4
	0x03985D58 ADRP X0, 0x7CB000
	0x03985D5C LDR X0, [X0 + 0x500]
	0x03985D60 BL 0x1C16CF4
	0x03985D64 MOVZ W8, 0x1
	0x03985D68 STRB W8, [X20 + 0xA57]
	0x03985D6C LDR X0, [X19 + 0x10]
	0x03985D70 CBZ X0, 0x3985DF4
	0x03985D74 ADRP X22, 0x7CB000
	0x03985D78 ADRP X23, 0x7CB000
	0x03985D7C LDR X22, [X22 + 0x538]
	0x03985D80 LDR X23, [X23 + 0x500]
	0x03985D84 MOV W21, W31
	0x03985D88 MOVN W24, 0x0
	0x03985D8C LDR W2, [X0 + 0x18]
	0x03985D90 CMP W2, W21
	0x03985D94 B.LE 0x3985DF8
	0x03985D98 LDR X8, [X22]
	0x03985D9C ADD W1, W24, W2
	0x03985DA0 MOV X2, X8
	0x03985DA4 BL 0x2F49C7C
	0x03985DA8 LDR X0, [X23]
	0x03985DAC MOV X20, X1
	0x03985DB0 LDR W8, [X0 + 0xE0]
	0x03985DB4 CBNZ W8, 0x3985DC0
	0x03985DB8 BL 0x1C16DFC
	0x03985DBC LDR X0, [X23]
	0x03985DC0 LDR X8, [X0 + 0xB8]
	0x03985DC4 LDR X8, [X8 + 0x40]
	0x03985DC8 CMP X20, X8
	0x03985DCC B.EQ 0x3985DE4
	0x03985DD0 CBZ X20, 0x3985DF4
	0x03985DD4 LDR X8, [X20]
	0x03985DD8 MOV X0, X20
	0x03985DDC LDP X9, X1, [X8 + 0x178]

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+336], X29
	003 Move [X31+344], X30
	004 Move [X31+352], X22
	005 Move [X31+360], X21
	006 Move [X31+368], X20
	007 Move [X31+376], X19
	008 Move X22, 0xA5D000
	009 Move W9, [X22+2667]
	010 Move W20, W1
	011 Move X21, X0
	012 Move X19, X8
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x7CC000
	018 Move X0, [X0+1200]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+2667], W8
	022 Move X0, [X21+16]
	023 Compare X0, 0
	024 JumpIfEqual {52}
	025 Move X8, 0x7CC000
	026 Move X8, [X8+1200]
	027 Move W1, W20
	028 Add X21, X31, 168
	029 Move X2, [X8]
	030 Add X8, X31, 0
	031 Call List`1<XRView>.get_Item, X0, X1
	032 Add X0, X31, 168
	033 Add X1, X31, 0
	034 Move W2, 168
	035 Call 0x3EB2AC0
	036 Move V1, [X21+32]
	037 Move V0, [X21+48]
	038 Move V3, [X21]
	039 Move V2, [X21+16]
	040 Move X22, [X31+352]
	041 Move X21, [X31+360]
	042 Move X29, [X31+336]
	043 Move X30, [X31+344]
	044 Move [X19+32], V1
	045 Move [X19+40], V0
	046 Move [X19], V3
	047 Move [X19+8], V2
	048 Move X20, [X31+368]
	049 Move X19, [X31+376]
	050 Add X31, X31, 384
	051 Return X0
	052 Call 0x1C17F20

Method: UnityEngine.Matrix4x4 GetViewMatrix(System.Int32 viewIndex = 0)

Disassembly:
	0x03985CB0 LDR X0, [X8 + 0x40]
	0x03985CB4 LDR X3, [X8 + 0x28]
	0x03985CB8 MOV X2, X19
	0x03985CBC BLR X9
	0x03985CC0 LDR X8, [X22 + 0x28]
	0x03985CC4 LDR X9, [X31 + 0x1248]
	0x03985CC8 CMP X8, X9
	0x03985CCC B.NE 0x3985CF0
	0x03985CD0 ADD X31, X31, 0x1000
	0x03985CD4 ADD X31, X31, 0x250
	0x03985CD8 LDP X20, X19, [X31 + 0x30]
	0x03985CDC LDP X22, X21, [X31 + 0x20]
	0x03985CE0 LDP X30, X23, [X31 + 0x10]
	0x03985CE4 LDR X29, [X31], #0x40
	0x03985CE8 RET
	0x03985CEC BL 0x1C16F20
	0x03985CF0 BL 0x3EB1B20
	0x03985CF4 STR X30, [X31 - 0x10]!
	0x03985CF8 LDR X0, [X0 + 0x18]
	0x03985CFC CBZ X0, 0x3985D08
	0x03985D00 LDR X30, [X31], #0x10
	0x03985D04 B 0x3987B0C
	0x03985D08 BL 0x1C16F20
	0x03985D0C LDR X0, [X0 + 0x10]
	0x03985D10 RET
	0x03985D14 STR X30, [X31 - 0x40]!
	0x03985D18 STP X24, X23, [X31 + 0x10]
	0x03985D1C STP X22, X21, [X31 + 0x20]
	0x03985D20 STP X20, X19, [X31 + 0x30]
	0x03985D24 ADRP X20, 0xA5C000
	0x03985D28 LDRB W8, [X20 + 0xA57]
	0x03985D2C MOV X19, X0
	0x03985D30 TBNZ X8, 0x0, 0x3985D6C
	0x03985D34 ADRP X0, 0x7CB000
	0x03985D38 LDR X0, [X0 + 0x528]
	0x03985D3C BL 0x1C16CF4
	0x03985D40 ADRP X0, 0x7CB000
	0x03985D44 LDR X0, [X0 + 0x530]

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+336], X29
	003 Move [X31+344], X30
	004 Move [X31+352], X22
	005 Move [X31+360], X21
	006 Move [X31+368], X20
	007 Move [X31+376], X19
	008 Move X22, 0xA5D000
	009 Move W9, [X22+2668]
	010 Move W20, W1
	011 Move X21, X0
	012 Move X19, X8
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x7CC000
	018 Move X0, [X0+1200]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+2668], W8
	022 Move X0, [X21+16]
	023 Compare X0, 0
	024 JumpIfEqual {52}
	025 Move X8, 0x7CC000
	026 Move X8, [X8+1200]
	027 Move W1, W20
	028 Add X21, X31, 168
	029 Move X2, [X8]
	030 Add X8, X31, 0
	031 Call List`1<XRView>.get_Item, X0, X1
	032 Add X0, X31, 168
	033 Add X1, X31, 0
	034 Move W2, 168
	035 Call 0x3EB2AC0
	036 Move V1, [X21+96]
	037 Move V0, [X21+112]
	038 Move V3, [X21+64]
	039 Move V2, [X21+80]
	040 Move X22, [X31+352]
	041 Move X21, [X31+360]
	042 Move X29, [X31+336]
	043 Move X30, [X31+344]
	044 Move [X19+32], V1
	045 Move [X19+40], V0
	046 Move [X19], V3
	047 Move [X19+8], V2
	048 Move X20, [X31+368]
	049 Move X19, [X31+376]
	050 Add X31, X31, 384
	051 Return X0
	052 Call 0x1C17F20

Method: UnityEngine.Rect GetViewport(System.Int32 viewIndex = 0)

Disassembly:
	0x03987250 BL 0x3C124EC
	0x03987254 LDR X8, [X20]
	0x03987258 MOV X1, X31
	0x0398725C LDR X8, [X8 + 0xB8]
	0x03987260 STR W0, [X8 + 0x18]
	0x03987264 LDR X0, [X27]
	0x03987268 BL 0x3C124EC
	0x0398726C LDR X8, [X20]
	0x03987270 MOV X1, X31
	0x03987274 LDR X8, [X8 + 0xB8]
	0x03987278 STR W0, [X8 + 0x1C]
	0x0398727C LDR X0, [X26]
	0x03987280 BL 0x3C124EC
	0x03987284 LDR X8, [X20]
	0x03987288 MOV X1, X31
	0x0398728C LDR X8, [X8 + 0xB8]
	0x03987290 STR W0, [X8 + 0x20]
	0x03987294 LDR X0, [X25]
	0x03987298 BL 0x3C124EC
	0x0398729C LDR X8, [X20]
	0x039872A0 MOV X1, X31
	0x039872A4 LDR X8, [X8 + 0xB8]
	0x039872A8 STR W0, [X8 + 0x24]
	0x039872AC ADRP X8, 0x7C9000
	0x039872B0 LDR X8, [X8 + 0x5D8]
	0x039872B4 LDR X0, [X8]
	0x039872B8 BL 0x3C124EC
	0x039872BC LDR X8, [X20]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+176], X30
	003 Move [X31+184], X21
	004 Move [X31+192], X20
	005 Move [X31+200], X19
	006 Move X21, 0xA5B000
	007 Move W8, [X21+2669]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7CA000
	015 Move X0, [X0+1200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2669], W8
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {38}
	022 Move X8, 0x7CA000
	023 Move X8, [X8+1200]
	024 Move W1, W19
	025 Move X2, [X8]
	026 Add X8, X31, 8
	027 Call List`1<XRView>.get_Item, X0, X1
	028 Move S0, [X31+136]
	029 Move S1, [X31+140]
	030 Move S2, [X31+144]
	031 Move S3, [X31+148]
	032 Move X20, [X31+192]
	033 Move X19, [X31+200]
	034 Move X30, [X31+176]
	035 Move X21, [X31+184]
	036 Add X31, X31, 208
	037 Return X0
	038 Call 0x1C17F20

Method: UnityEngine.Mesh GetOcclusionMesh(System.Int32 viewIndex = 0)

Disassembly:
	0x039884C0 CMP W8, 0x0
	0x039884C4 CSET W0, NE
	0x039884C8 B 0x39884D0
	0x039884CC MOV W0, W31
	0x039884D0 LDP X20, X19, [X31 + 0x10]
	0x039884D4 LDR X30, [X31], #0x20
	0x039884D8 RET
	0x039884DC LDRB W0, [X0 + 0x20]
	0x039884E0 RET
	0x039884E4 AND W8, W1, 0x1
	0x039884E8 STRB W8, [X0 + 0x20]
	0x039884EC RET
	0x039884F0 LDR W0, [X0 + 0x24]
	0x039884F4 RET
	0x039884F8 STR W1, [X0 + 0x24]
	0x039884FC RET
	0x03988500 LDR W0, [X0 + 0x28]
	0x03988504 RET
	0x03988508 STR W1, [X0 + 0x28]
	0x0398850C RET
	0x03988510 LDR X9, [X0 + 0x50]
	0x03988514 LDP V1, V0, [X0 + 0x30]
	0x03988518 STR X9, [X8 + 0x20]
	0x0398851C STP V1, V0, [X8]
	0x03988520 RET
	0x03988524 LDR X8, [X1 + 0x20]
	0x03988528 LDP V1, V0, [X1]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+176], X30
	003 Move [X31+184], X21
	004 Move [X31+192], X20
	005 Move [X31+200], X19
	006 Move X21, 0xA5A000
	007 Move W8, [X21+2670]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7C9000
	015 Move X0, [X0+1200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2670], W8
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {35}
	022 Move X8, 0x7C9000
	023 Move X8, [X8+1200]
	024 Move W1, W19
	025 Move X2, [X8]
	026 Add X8, X31, 8
	027 Call List`1<XRView>.get_Item, X0, X1
	028 Move X0, [X31+152]
	029 Move X20, [X31+192]
	030 Move X19, [X31+200]
	031 Move X30, [X31+176]
	032 Move X21, [X31+184]
	033 Add X31, X31, 208
	034 Return X0
	035 Call 0x1C17F20

Method: System.Int32 GetTextureArraySlice(System.Int32 viewIndex = 0)

Disassembly:
	0x039872C0 MOV X1, X31
	0x039872C4 LDR X8, [X8 + 0xB8]
	0x039872C8 STR W0, [X8 + 0x28]
	0x039872CC ADRP X8, 0x7C9000
	0x039872D0 LDR X8, [X8 + 0x5E0]
	0x039872D4 LDR X0, [X8]
	0x039872D8 BL 0x3C124EC
	0x039872DC LDR X8, [X20]
	0x039872E0 MOV X1, X31
	0x039872E4 LDR X8, [X8 + 0xB8]
	0x039872E8 STR W0, [X8 + 0x2C]
	0x039872EC ADRP X8, 0x7C9000
	0x039872F0 LDR X8, [X8 + 0x5F0]
	0x039872F4 LDR X0, [X8]
	0x039872F8 BL 0x3C124EC
	0x039872FC LDR X8, [X20]
	0x03987300 MOV X1, X31
	0x03987304 LDR X8, [X8 + 0xB8]
	0x03987308 STR W0, [X8 + 0x30]
	0x0398730C ADRP X8, 0x7C9000
	0x03987310 LDR X8, [X8 + 0x5E8]
	0x03987314 LDR X0, [X8]
	0x03987318 BL 0x3C124EC
	0x0398731C LDR X8, [X20]
	0x03987320 LDP X20, X19, [X31 + 0x50]
	0x03987324 LDP X22, X21, [X31 + 0x40]
	0x03987328 LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+176], X30
	003 Move [X31+184], X21
	004 Move [X31+192], X20
	005 Move [X31+200], X19
	006 Move X21, 0xA5B000
	007 Move W8, [X21+2671]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7CA000
	015 Move X0, [X0+1200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2671], W8
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {35}
	022 Move X8, 0x7CA000
	023 Move X8, [X8+1200]
	024 Move W1, W19
	025 Move X2, [X8]
	026 Add X8, X31, 8
	027 Call List`1<XRView>.get_Item, X0, X1
	028 Move W0, [X31+160]
	029 Move X20, [X31+192]
	030 Move X19, [X31+200]
	031 Move X30, [X31+176]
	032 Move X21, [X31+184]
	033 Add X31, X31, 208
	034 Return X0
	035 Call 0x1C17F20

Method: System.Void StartSinglePass(UnityEngine.Rendering.CommandBuffer cmd)

Disassembly:
	0x03988918 LDP X22, X21, [X31 + 0x20]
	0x0398891C LDP X30, X23, [X31 + 0x10]
	0x03988920 ADD X31, X31, 0x40
	0x03988924 RET
	0x03988928 BL 0x1C16F20
	0x0398892C STR X30, [X31 - 0x10]!
	0x03988930 LDR X0, [X0 + 0x18]
	0x03988934 CBZ X0, 0x3988940
	0x03988938 LDR X30, [X31], #0x10
	0x0398893C B 0x3987374
	0x03988940 BL 0x1C16F20
	0x03988944 STR X30, [X31 - 0x10]!
	0x03988948 LDR X0, [X0 + 0x18]
	0x0398894C CBZ X0, 0x3988958
	0x03988950 LDR X30, [X31], #0x10
	0x03988954 B 0x398752C
	0x03988958 BL 0x1C16F20
	0x0398895C SUB X31, X31, 0x100
	0x03988960 STP D13, D12, [X31 + 0xB0]
	0x03988964 STP D11, D10, [X31 + 0xC0]
	0x03988968 STP D9, D8, [X31 + 0xD0]
	0x0398896C STR X30, [X31 + 0xE0]
	0x03988970 STP X20, X19, [X31 + 0xF0]
	0x03988974 ADRP X20, 0xA59000
	0x03988978 LDRB W8, [X20 + 0xA72]
	0x0398897C MOV V9.16B, V1.16B
	0x03988980 MOV V10.16B, V0.16B
	0x03988984 MOV X19, X0
	0x03988988 TBNZ X8, 0x0, 0x39889A0
	0x0398898C ADRP X0, 0x7C8000
	0x03988990 LDR X0, [X0 + 0x4B0]
	0x03988994 BL 0x1C16CF4
	0x03988998 MOVZ W8, 0x1
	0x0398899C STRB W8, [X20 + 0xA72]
	0x039889A0 ADRP X20, 0xA50000
	0x039889A4 LDRB W8, [X20 + 0xE5A]
	0x039889A8 CBNZ W8, 0x39889C0
	0x039889AC ADRP X0, 0x772000
	0x039889B0 LDR X0, [X0 + 0x9A0]
	0x039889B4 BL 0x1C16CF4
	0x039889B8 MOVZ W8, 0x1
	0x039889BC STRB W8, [X20 + 0xE5A]
	0x039889C0 LDR X0, [X19 + 0x10]
	0x039889C4 CBZ X0, 0x3988A9C
	0x039889C8 ADRP X8, 0x772000
	0x039889CC LDR X8, [X8 + 0x9A0]
	0x039889D0 ADRP X20, 0x7C8000
	0x039889D4 MOV W1, W31
	0x039889D8 LDR X8, [X8]
	0x039889DC LDR X8, [X8 + 0xB8]
	0x039889E0 LDR X20, [X20 + 0x4B0]
	0x039889E4 LDP S8, S11, [X8 + 0x8]
	0x039889E8 LDR X2, [X20]
	0x039889EC ADD X8, X31, 0x8
	0x039889F0 BL 0x30DFDE8
	0x039889F4 LDR X0, [X19 + 0x10]
	0x039889F8 CBZ X0, 0x3988A9C
	0x039889FC LDR X2, [X20]
	0x03988A00 LDR V12, [X31 + 0xA4]
	0x03988A04 FMOV S0, 0.5
	0x03988A08 ADD X8, X31, 0x8
	0x03988A0C MOV W1, W31
	0x03988A10 FSUB S10, S0, S10
	0x03988A14 FSUB S9, S0, S9
	0x03988A18 BL 0x30DFDE8
	0x03988A1C LDR V13, [X31 + 0xA8]
	0x03988A20 MOV X0, X19
	0x03988A24 BL 0x398632C
	0x03988A28 CMP W0, 0x2
	0x03988A2C B.LT 0x3988A70
	0x03988A30 LDR X0, [X19 + 0x10]
	0x03988A34 CBZ X0, 0x3988A9C
	0x03988A38 LDR X2, [X20]
	0x03988A3C ADD X8, X31, 0x8
	0x03988A40 MOVZ W1, 0x1
	0x03988A44 BL 0x30DFDE8
	0x03988A48 LDR X0, [X19 + 0x10]
	0x03988A4C CBZ X0, 0x3988A9C
	0x03988A50 LDR V0, [X31 + 0xA4]
	0x03988A54 LDR X2, [X20]
	0x03988A58 ADD X8, X31, 0x8
	0x03988A5C MOVZ W1, 0x1
	0x03988A60 FSUB S8, S0, S10
	0x03988A64 BL 0x30DFDE8
	0x03988A68 LDR V0, [X31 + 0xA8]
	0x03988A6C FSUB S11, S0, S9
	0x03988A70 FSUB S1, S13, S9
	0x03988A74 FSUB S0, S12, S10
	0x03988A78 MOV V2.16B, V8.16B
	0x03988A7C MOV V3.16B, V11.16B
	0x03988A80 LDP X20, X19, [X31 + 0xF0]
	0x03988A84 LDR X30, [X31 + 0xE0]
	0x03988A88 LDP D9, D8, [X31 + 0xD0]
	0x03988A8C LDP D11, D10, [X31 + 0xC0]
	0x03988A90 LDP D13, D12, [X31 + 0xB0]
	0x03988A94 ADD X31, X31, 0x100
	0x03988A98 RET
	0x03988A9C BL 0x1C16F20
	0x03988AA0 SUB X31, X31, 0x180
	0x03988AA4 STP X29, X30, [X31 + 0x150]
	0x03988AA8 STP X22, X21, [X31 + 0x160]
	0x03988AAC STP X20, X19, [X31 + 0x170]
	0x03988AB0 ADRP X22, 0xA59000
	0x03988AB4 LDRB W8, [X22 + 0xA73]
	0x03988AB8 MOV X20, X2
	0x03988ABC MOV W19, W1
	0x03988AC0 MOV X21, X0
	0x03988AC4 TBNZ X8, 0x0, 0x3988AE8
	0x03988AC8 ADRP X0, 0x7C8000
	0x03988ACC LDR X0, [X0 + 0x550]
	0x03988AD0 BL 0x1C16CF4
	0x03988AD4 ADRP X0, 0x7C8000
	0x03988AD8 LDR X0, [X0 + 0x668]
	0x03988ADC BL 0x1C16CF4
	0x03988AE0 MOVZ W8, 0x1
	0x03988AE4 STRB W8, [X22 + 0xA73]
	0x03988AE8 TBNZ X19, 0x1F, 0x3988B54
	0x03988AEC LDR X21, [X21 + 0x10]
	0x03988AF0 CBZ X21, 0x3988B9C
	0x03988AF4 LDR W8, [X21 + 0x18]
	0x03988AF8 CMP W8, W19
	0x03988AFC B.LE 0x3988B54
	0x03988B00 ADRP X22, 0x7C8000
	0x03988B04 LDR X22, [X22 + 0x668]
	0x03988B08 ADD X0, X31, 0x0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xA5A000
	009 Move W8, [X21+2672]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x7C9000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move X0, 0x7C9000
	020 Move X0, [X0+1544]
	021 Call 0x1C17CF4
	022 Move X0, 0x7C9000
	023 Move X0, [X0+1552]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2672], W8
	027 Move X0, X20
	028 Call XRPass.get_viewCount, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X20
	031 Call XRPass.get_viewCount, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Call XRPass.get_viewCount, X0
	035 Move X22, 0x7C9000
	036 Move X22, [X22+1560]
	037 Move W21, W0
	038 Move X8, [X22]
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X23, 0xA5A000
	045 Move W8, [X23+2875]
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x7C9000
	049 Move X0, [X0+1560]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X23+2875], W8
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {59}
	057 Call 0x1C17DFC
	058 Move X0, [X22]
	059 Move X8, [X0+184]
	060 Move W8, [X8]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X31
	063 Call SystemInfo.get_supportsMultiview
	064 Compare X19, 0
	065 JumpIfEqual {146}
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {92}
	070 Move X8, 0x7C9000
	071 Move X8, [X8+1544]
	072 Move X0, X19
	073 Move X20, [X31+48]
	074 Move X19, [X31+56]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X1, [X8]
	078 Move X30, [X31+16]
	079 Move X23, [X31+24]
	080 Move X2, X31
	081 Add X31, X31, 64
	082 Call CommandBuffer.EnableShaderKeyword, X0, X1
	083 Return 
	084 Move X20, [X31+48]
	085 Move X19, [X31+56]
	086 Move X22, [X31+32]
	087 Move X21, [X31+40]
	088 Move X30, [X31+16]
	089 Move X23, [X31+24]
	090 Add X31, X31, 64
	091 Return 
	092 Move X8, 0x7C9000
	093 Move X8, [X8+1552]
	094 Move X0, X19
	095 Move X2, X31
	096 Move X1, [X8]
	097 Call CommandBuffer.EnableShaderKeyword, X0, X1
	098 Move X0, X20
	099 Call XRPass.get_viewCount, X0
	100 Move W1, W0
	101 Move X0, X19
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Move X22, [X31+32]
	105 Move X21, [X31+40]
	106 Move X30, [X31+16]
	107 Move X23, [X31+24]
	108 Move X2, X31
	109 Add X31, X31, 64
	110 Call CommandBuffer.SetInstanceMultiplier, X0, X1
	111 Return 
	112 Move X0, 0x7C9000
	113 Move X0, [X0+1560]
	114 Call 0x1C17D08
	115 Call 0x19913D0
	116 Move X0, X31
	117 Call 0x399BB34
	118 Move [X31+12], W0
	119 Move X0, 0x76C000
	120 Move X0, [X0+1880]
	121 Call 0x1C17D08
	122 Add X1, X31, 12
	123 Call 0x1C17E04
	124 Move X19, X0
	125 Move X0, 0x7C9000
	126 Move X0, [X0+1568]
	127 Call 0x1C17D08
	128 Move X1, X19
	129 Move X2, X31
	130 Call String.Format, X0, X1
	131 Move X19, X0
	132 Move X0, 0x775000
	133 Move X0, [X0+1880]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X1, X19
	137 Move X2, X31
	138 Move X20, X0
	139 Call NotImplementedException..ctor, X0, X1
	140 Move X0, 0x7C9000
	141 Move X0, [X0+1576]
	142 Call 0x1C17D08
	143 Move X1, X0
	144 Move X0, X20
	145 Call 0x1C17DEC
	146 Call 0x1C17F20

Method: System.Void StopSinglePass(UnityEngine.Rendering.CommandBuffer cmd)

Disassembly:
	0x0398884C LDR W8, [X0 + 0xE0]
	0x03988850 CBNZ W8, 0x398885C
	0x03988854 BL 0x1C16DFC
	0x03988858 LDR X0, [X22]
	0x0398885C LDR X8, [X0 + 0xB8]
	0x03988860 LDR X0, [X8 + 0x18]
	0x03988864 CBZ X0, 0x3988928
	0x03988868 MOV X1, X31
	0x0398886C BL 0x3E65EEC
	0x03988870 CBZ X0, 0x3988884
	0x03988874 MOV X1, X31
	0x03988878 BL 0x3C10C74
	0x0398887C MOV W21, W0
	0x03988880 B 0x3988888
	0x03988884 MOVN W21, 0x0
	0x03988888 LDR X0, [X22]
	0x0398888C LDR W8, [X0 + 0xE0]
	0x03988890 CBNZ W8, 0x3988898
	0x03988894 BL 0x1C16DFC
	0x03988898 LDRB W8, [X23 + 0xB3A]
	0x0398889C CBNZ W8, 0x39888B4
	0x039888A0 ADRP X0, 0x7C8000
	0x039888A4 LDR X0, [X0 + 0x500]
	0x039888A8 BL 0x1C16CF4
	0x039888AC MOVZ W8, 0x1
	0x039888B0 STRB W8, [X23 + 0xB3A]
	0x039888B4 LDR X0, [X22]
	0x039888B8 LDR W8, [X0 + 0xE0]
	0x039888BC CBNZ W8, 0x39888C8
	0x039888C0 BL 0x1C16DFC
	0x039888C4 LDR X0, [X22]
	0x039888C8 LDR X8, [X0 + 0xB8]
	0x039888CC LDR X0, [X8 + 0x18]
	0x039888D0 CBZ X0, 0x3988928
	0x039888D4 MOV X1, X31
	0x039888D8 BL 0x3E65EEC
	0x039888DC CBZ X0, 0x39888EC
	0x039888E0 MOV X1, X31
	0x039888E4 BL 0x3C10A58
	0x039888E8 B 0x39888F4
	0x039888EC MOVZ W8, 0x43200000
	0x039888F0 FMOV S0, W8
	0x039888F4 ADD X0, X31, 0x0
	0x039888F8 MOV W1, W19
	0x039888FC MOV W2, W20
	0x03988900 MOV W3, W21
	0x03988904 MOV X4, X31
	0x03988908 STP X31, X31, [X31]
	0x0398890C BL 0x39EB9E4
	0x03988910 LDP X0, X1, [X31]
	0x03988914 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xA5A000
	006 Move W8, [X21+2673]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x7C9000
	014 Move X0, [X0+1544]
	015 Call 0x1C17CF4
	016 Move X0, 0x7C9000
	017 Move X0, [X0+1552]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2673], W8
	021 Move X0, X20
	022 Call XRPass.get_viewCount, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X20
	025 Call XRPass.get_viewCount, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X31
	028 Call SystemInfo.get_supportsMultiview
	029 Compare X19, 0
	030 JumpIfEqual {66}
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {51}
	035 Move X8, 0x7C9000
	036 Move X8, [X8+1544]
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X2, X31
	041 Move X1, [X8]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call CommandBuffer.DisableShaderKeyword, X0, X1
	045 Return 
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return 
	051 Move X8, 0x7C9000
	052 Move X8, [X8+1552]
	053 Move X0, X19
	054 Move X2, X31
	055 Move X1, [X8]
	056 Call CommandBuffer.DisableShaderKeyword, X0, X1
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move W1, 1
	061 Move X2, X31
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Call CommandBuffer.SetInstanceMultiplier, X0, X1
	065 Return 
	066 Call 0x1C17F20

Method: System.Boolean get_hasValidOcclusionMesh()

Disassembly:
	0x0398992C B 0x3989938
	0x03989930 B 0x3989938
	0x03989934 B 0x3989938
	0x03989938 MOV X19, X0
	0x0398993C CMP W1, 0x1
	0x03989940 B.NE 0x3989974

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call XROcclusionMesh.get_hasValidOcclusionMesh, X0
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void RenderOcclusionMesh(UnityEngine.Rendering.CommandBuffer cmd)

Disassembly:
	0x03989944 MOV X0, X19
	0x03989948 BL 0x3EB1AD0
	0x0398994C LDR X20, [X0]
	0x03989950 BL 0x3EB1AE0
	0x03989954 ADRP X8, 0x7C7000
	0x03989958 LDR X8, [X8 + 0x6E8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call XROcclusionMesh.RenderOcclusionMesh, X0, X1
	007 Return 
	008 Call 0x1C17F20

Method: UnityEngine.Vector4 ApplyXRViewCenterOffset(UnityEngine.Vector2 center)

Disassembly:
	0x0398995C ADD X0, X31, 0x8
	0x03989960 LDR X1, [X8]
	0x03989964 BL 0x2BC434C
	0x03989968 CBZ X20, 0x3989914
	0x0398996C MOV X0, X20
	0x03989970 BL 0x1C16F18
	0x03989974 MOV X20, X31
	0x03989978 B 0x3989980
	0x0398997C MOV X19, X0
	0x03989980 ADRP X8, 0x7C7000
	0x03989984 LDR X8, [X8 + 0x6E8]
	0x03989988 LDR X1, [X8]
	0x0398998C ADD X0, X31, 0x8
	0x03989990 BL 0x2BC434C
	0x03989994 CBNZ X20, 0x39899A0
	0x03989998 MOV X0, X19
	0x0398999C BL 0x1D2C690
	0x039899A0 MOV X0, X20
	0x039899A4 BL 0x1C16F18
	0x039899A8 BL 0x1990590
	0x039899AC STR X30, [X31 - 0x20]!
	0x039899B0 STP X20, X19, [X31 + 0x10]
	0x039899B4 ADRP X20, 0xA58000
	0x039899B8 ADRP X19, 0x7C7000
	0x039899BC LDRB W8, [X20 + 0xA82]
	0x039899C0 LDR X19, [X19 + 0x500]
	0x039899C4 TBNZ X8, 0x0, 0x39899DC
	0x039899C8 ADRP X0, 0x7C7000
	0x039899CC LDR X0, [X0 + 0x500]
	0x039899D0 BL 0x1C16CF4
	0x039899D4 MOVZ W8, 0x1
	0x039899D8 STRB W8, [X20 + 0xA82]
	0x039899DC LDR X0, [X19]
	0x039899E0 LDR W8, [X0 + 0xE0]
	0x039899E4 CBNZ W8, 0x39899F0
	0x039899E8 BL 0x1C16DFC
	0x039899EC LDR X0, [X19]
	0x039899F0 LDR X8, [X0 + 0xB8]
	0x039899F4 LDP X20, X19, [X31 + 0x10]
	0x039899F8 LDR W0, [X8 + 0x20]
	0x039899FC LDR X30, [X31], #0x20
	0x03989A00 RET
	0x03989A04 SUB X31, X31, 0x50
	0x03989A08 STR D8, [X31 + 0x20]
	0x03989A0C STP X30, X21, [X31 + 0x30]
	0x03989A10 STP X20, X19, [X31 + 0x40]
	0x03989A14 ADRP X19, 0xA58000
	0x03989A18 ADRP X20, 0x7C7000
	0x03989A1C LDRB W8, [X19 + 0xA83]
	0x03989A20 LDR X20, [X20 + 0x500]
	0x03989A24 MOV V8.16B, V0.16B
	0x03989A28 TBNZ X8, 0x0, 0x3989A88
	0x03989A2C ADRP X0, 0x7C7000
	0x03989A30 LDR X0, [X0 + 0x6E8]
	0x03989A34 BL 0x1C16CF4
	0x03989A38 ADRP X0, 0x7C7000
	0x03989A3C LDR X0, [X0 + 0x6F0]
	0x03989A40 BL 0x1C16CF4
	0x03989A44 ADRP X0, 0x7C7000
	0x03989A48 LDR X0, [X0 + 0x6F8]
	0x03989A4C BL 0x1C16CF4
	0x03989A50 ADRP X0, 0x7C7000
	0x03989A54 LDR X0, [X0 + 0x700]
	0x03989A58 BL 0x1C16CF4
	0x03989A5C ADRP X0, 0x7C7000
	0x03989A60 LDR X0, [X0 + 0x6D0]
	0x03989A64 BL 0x1C16CF4
	0x03989A68 ADRP X0, 0x792000
	0x03989A6C LDR X0, [X0 + 0xC0]
	0x03989A70 BL 0x1C16CF4
	0x03989A74 ADRP X0, 0x7C7000
	0x03989A78 LDR X0, [X0 + 0x500]
	0x03989A7C BL 0x1C16CF4
	0x03989A80 MOVZ W8, 0x1
	0x03989A84 STRB W8, [X19 + 0xA83]
	0x03989A88 LDR X0, [X20]
	0x03989A8C STP X31, X31, [X31 + 0x8]
	0x03989A90 STR X31, [X31 + 0x18]
	0x03989A94 ADRP X19, 0x792000
	0x03989A98 LDR W8, [X0 + 0xE0]
	0x03989A9C LDR X19, [X19 + 0xC0]

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+176], D13
	003 Move [X31+184], D12
	004 Move [X31+192], D11
	005 Move [X31+200], D10
	006 Move [X31+208], D9
	007 Move [X31+216], D8
	008 Move [X31+224], X30
	009 Move [X31+240], X20
	010 Move [X31+248], X19
	011 Move X20, 0xA59000
	012 Move W8, [X20+2674]
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x7C8000
	021 Move X0, [X0+1200]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2674], W8
	025 Move X20, 0xA50000
	026 Move W8, [X20+3674]
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x772000
	030 Move X0, [X0+2464]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3674], W8
	034 Move X0, [X19+16]
	035 Compare X0, 0
	036 JumpIfEqual {97}
	037 Move X8, 0x772000
	038 Move X8, [X8+2464]
	039 Move X20, 0x7C8000
	040 Move W1, W31
	041 Move X8, [X8]
	042 Move X8, [X8+184]
	043 Move X20, [X20+1200]
	044 Move S8, [X8+8]
	045 Move S11, [X8+12]
	046 Move X2, [X20]
	047 Add X8, X31, 8
	048 Call List`1<XRView>.get_Item, X0, X1
	049 Move X0, [X19+16]
	050 Compare X0, 0
	051 JumpIfEqual {97}
	052 Move X2, [X20]
	053 Move V12, [X31+164]
	054 Move S0, 0.5
	055 Add X8, X31, 8
	056 Move W1, W31
	057 Subtract S10, S0, S10
	058 Subtract S9, S0, S9
	059 Call List`1<XRView>.get_Item, X0, X1
	060 Move V13, [X31+168]
	061 Move X0, X19
	062 Call XRPass.get_viewCount, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, [X19+16]
	065 Compare X0, 0
	066 JumpIfEqual {97}
	067 Move X2, [X20]
	068 Add X8, X31, 8
	069 Move W1, 1
	070 Call List`1<XRView>.get_Item, X0, X1
	071 Move X0, [X19+16]
	072 Compare X0, 0
	073 JumpIfEqual {97}
	074 Move V0, [X31+164]
	075 Move X2, [X20]
	076 Add X8, X31, 8
	077 Move W1, 1
	078 Subtract S8, S0, S10
	079 Call List`1<XRView>.get_Item, X0, X1
	080 Move V0, [X31+168]
	081 Subtract S11, S0, S9
	082 Subtract S1, S13, S9
	083 Subtract S0, S12, S10
	084 Move V2, V8
	085 Move V3, V11
	086 Move X20, [X31+240]
	087 Move X19, [X31+248]
	088 Move X30, [X31+224]
	089 Move D9, [X31+208]
	090 Move D8, [X31+216]
	091 Move D11, [X31+192]
	092 Move D10, [X31+200]
	093 Move D13, [X31+176]
	094 Move D12, [X31+184]
	095 Add X31, X31, 256
	096 Return X0
	097 Call 0x1C17F20

Method: System.Void AssignView(System.Int32 viewId, UnityEngine.Experimental.Rendering.XRView xrView)

Disassembly:
	0x03989AA0 CBNZ W8, 0x3989AAC
	0x03989AA4 BL 0x1C16DFC
	0x03989AA8 LDR X0, [X20]
	0x03989AAC LDR X8, [X19]
	0x03989AB0 LDR X9, [X0 + 0xB8]
	0x03989AB4 ADRP X21, 0x7C7000
	0x03989AB8 LDR W10, [X8 + 0xE0]
	0x03989ABC LDR X19, [X9 + 0x10]
	0x03989AC0 LDR X21, [X21 + 0x6D0]
	0x03989AC4 CBNZ W10, 0x3989AD0
	0x03989AC8 MOV X0, X8
	0x03989ACC BL 0x1C16DFC
	0x03989AD0 LDR X1, [X21]
	0x03989AD4 MOV X0, X19
	0x03989AD8 BL 0x229839C
	0x03989ADC LDR X8, [X20]
	0x03989AE0 LDR X8, [X8 + 0xB8]
	0x03989AE4 LDR X0, [X8 + 0x10]
	0x03989AE8 CBZ X0, 0x3989B5C
	0x03989AEC ADRP X8, 0x7C7000
	0x03989AF0 LDR X8, [X8 + 0x700]
	0x03989AF4 ADRP X20, 0x7C7000
	0x03989AF8 ADRP X19, 0x7C7000
	0x03989AFC LDR X1, [X8]
	0x03989B00 LDR X20, [X20 + 0x6F0]
	0x03989B04 LDR X19, [X19 + 0x6E8]
	0x03989B08 ADD X8, X31, 0x8
	0x03989B0C BL 0x301CB58
	0x03989B10 LDR X1, [X20]
	0x03989B14 ADD X0, X31, 0x8
	0x03989B18 BL 0x2BC4350
	0x03989B1C TBZ X0, 0x0, 0x3989B38
	0x03989B20 LDR X0, [X31 + 0x18]
	0x03989B24 CBZ X0, 0x3989B58
	0x03989B28 MOV V0.16B, V8.16B
	0x03989B2C MOV X1, X31
	0x03989B30 BL 0x3E65610
	0x03989B34 B 0x3989B10
	0x03989B38 LDR X1, [X19]
	0x03989B3C ADD X0, X31, 0x8
	0x03989B40 BL 0x2BC434C
	0x03989B44 LDP X20, X19, [X31 + 0x40]
	0x03989B48 LDP X30, X21, [X31 + 0x30]
	0x03989B4C LDR V8, [X31 + 0x20]
	0x03989B50 ADD X31, X31, 0x50
	0x03989B54 RET
	0x03989B58 BL 0x1C16F20
	0x03989B5C BL 0x1C16F20
	0x03989B60 B 0x3989B68
	0x03989B64 B 0x3989B68
	0x03989B68 MOV X19, X0
	0x03989B6C CMP W1, 0x1
	0x03989B70 B.NE 0x3989BA4
	0x03989B74 MOV X0, X19
	0x03989B78 BL 0x3EB1AD0
	0x03989B7C LDR X20, [X0]
	0x03989B80 BL 0x3EB1AE0
	0x03989B84 ADRP X8, 0x7C7000
	0x03989B88 LDR X8, [X8 + 0x6E8]
	0x03989B8C ADD X0, X31, 0x8
	0x03989B90 LDR X1, [X8]
	0x03989B94 BL 0x2BC434C
	0x03989B98 CBZ X20, 0x3989B44
	0x03989B9C MOV X0, X20

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+336], X29
	003 Move [X31+344], X30
	004 Move [X31+352], X22
	005 Move [X31+360], X21
	006 Move [X31+368], X20
	007 Move [X31+376], X19
	008 Move X22, 0xA59000
	009 Move W8, [X22+2675]
	010 Move X20, X2
	011 Move W19, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x7C8000
	018 Move X0, [X0+1360]
	019 Call 0x1C17CF4
	020 Move X0, 0x7C8000
	021 Move X0, [X0+1640]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2675], W8
	025 Move TEMP, X19
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfEqual {58}
	029 Move X21, [X21+16]
	030 Compare X21, 0
	031 JumpIfEqual {76}
	032 Move W8, [X21+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X22, 0x7C8000
	035 Move X22, [X22+1640]
	036 Add X0, X31, 0
	037 Move W2, 168
	038 Move X1, X20
	039 Call 0x3EB2AC0
	040 Move X20, [X22]
	041 Add X0, X31, 168
	042 Add X1, X31, 0
	043 Move W2, 168
	044 Call 0x3EB2AC0
	045 Add X2, X31, 168
	046 Move X0, X21
	047 Move W1, W19
	048 Move X3, X20
	049 Call List`1<XRView>.set_Item, X0, X1, X2
	050 Move X20, [X31+368]
	051 Move X19, [X31+376]
	052 Move X22, [X31+352]
	053 Move X21, [X31+360]
	054 Move X29, [X31+336]
	055 Move X30, [X31+344]
	056 Add X31, X31, 384
	057 Return 
	058 Move X0, 0x773000
	059 Move X0, [X0+1888]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X19, X0
	063 Move X0, 0x7C8000
	064 Move X0, [X0+1648]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Move X2, X31
	069 Call ArgumentOutOfRangeException..ctor, X0, X1
	070 Move X0, 0x7C8000
	071 Move X0, [X0+1656]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Call 0x1C17DEC
	076 Call 0x1C17F20

Method: System.Void AssignCullingParams(System.Int32 cullingPassId, UnityEngine.Rendering.ScriptableCullingParameters cullingParams)

Disassembly:
	0x03989BA0 BL 0x1C16F18
	0x03989BA4 MOV X20, X31
	0x03989BA8 B 0x3989BB0
	0x03989BAC MOV X19, X0
	0x03989BB0 ADRP X8, 0x7C7000
	0x03989BB4 LDR X8, [X8 + 0x6E8]
	0x03989BB8 LDR X1, [X8]
	0x03989BBC ADD X0, X31, 0x8
	0x03989BC0 BL 0x2BC434C
	0x03989BC4 CBNZ X20, 0x3989BD0
	0x03989BC8 MOV X0, X19
	0x03989BCC BL 0x1D2C690
	0x03989BD0 MOV X0, X20
	0x03989BD4 BL 0x1C16F18
	0x03989BD8 BL 0x1990590
	0x03989BDC STR X30, [X31 - 0x20]!
	0x03989BE0 STP X20, X19, [X31 + 0x10]
	0x03989BE4 ADRP X20, 0xA58000
	0x03989BE8 ADRP X19, 0x7C7000
	0x03989BEC LDRB W8, [X20 + 0xA84]
	0x03989BF0 LDR X19, [X19 + 0x500]
	0x03989BF4 TBNZ X8, 0x0, 0x3989C30
	0x03989BF8 ADRP X0, 0x76A000
	0x03989BFC LDR X0, [X0 + 0xA28]
	0x03989C00 BL 0x1C16CF4
	0x03989C04 ADRP X0, 0x7C7000
	0x03989C08 LDR X0, [X0 + 0x530]
	0x03989C0C BL 0x1C16CF4
	0x03989C10 ADRP X0, 0x7C7000
	0x03989C14 LDR X0, [X0 + 0x500]
	0x03989C18 BL 0x1C16CF4
	0x03989C1C ADRP X0, 0x7C7000
	0x03989C20 LDR X0, [X0 + 0x708]
	0x03989C24 BL 0x1C16CF4
	0x03989C28 MOVZ W8, 0x1
	0x03989C2C STRB W8, [X20 + 0xA84]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xA59000
	008 Move X23, 0x7C8000
	009 Move W8, [X22+2676]
	010 Move X23, [X23+1664]
	011 Move X19, X2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x7C8000
	019 Move X0, [X0+1664]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2676], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X1, X31
	030 Call ScriptableCullingParameters.get_cullingOptions, X0
	031 And W1, W0, 0xFFFFFFEF
	032 Move X0, X19
	033 Move X2, X31
	034 Call ScriptableCullingParameters.set_cullingOptions, X0, X1
	035 Add X0, X20, 144
	036 Move W2, 1584
	037 Move X1, X19
	038 Move [X20+40], W21
	039 Call 0x3EB2B30
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Move X23, [X31+56]
	046 Return 

Method: System.Void UpdateCombinedOcclusionMesh()

Disassembly:
	0x03986CF4 ADRP X8, 0xA5B000
	0x03986CF8 LDRB W8, [X8 + 0xB39]
	0x03986CFC CBNZ W8, 0x3986D18
	0x03986D00 ADRP X0, 0x7CA000
	0x03986D04 LDR X0, [X0 + 0x500]
	0x03986D08 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call XROcclusionMesh.UpdateCombinedMesh, X0
	007 Return 
	008 Call 0x1C17F20

Method: System.Void InitBase(UnityEngine.Experimental.Rendering.XRPassCreateInfo createInfo)

Disassembly:
	0x03989224 BL 0x1C16CF4
	0x03989228 MOVZ W8, 0x1
	0x0398922C STRB W8, [X23 + 0xB3C]
	0x03989230 LDR X0, [X22]
	0x03989234 ADRP X23, 0x76A000
	0x03989238 LDR W8, [X0 + 0xE0]
	0x0398923C LDR X23, [X23 + 0x598]
	0x03989240 CBNZ W8, 0x398924C
	0x03989244 BL 0x1C16DFC
	0x03989248 LDR X0, [X22]
	0x0398924C LDR X8, [X0 + 0xB8]
	0x03989250 STR W21, [X8 + 0x4C]
	0x03989254 LDR X0, [X23]
	0x03989258 LDR W8, [X0 + 0xE0]
	0x0398925C CBNZ W8, 0x3989264
	0x03989260 BL 0x1C16DFC
	0x03989264 MOV X0, X20
	0x03989268 MOV X1, X31
	0x0398926C MOV X2, X31
	0x03989270 BL 0x3C354F8
	0x03989274 TBZ X0, 0x0, 0x3989304
	0x03989278 LDR X0, [X22]
	0x0398927C LDR W8, [X0 + 0xE0]
	0x03989280 CBNZ W8, 0x398928C
	0x03989284 BL 0x1C16DFC
	0x03989288 LDR X0, [X22]
	0x0398928C LDR X8, [X23]
	0x03989290 LDR X9, [X0 + 0xB8]
	0x03989294 LDR W10, [X8 + 0xE0]
	0x03989298 LDR X21, [X9 + 0x28]
	0x0398929C CBNZ W10, 0x39892A8
	0x039892A0 MOV X0, X8
	0x039892A4 BL 0x1C16DFC
	0x039892A8 MOV X0, X21
	0x039892AC MOV X1, X31
	0x039892B0 MOV X2, X31
	0x039892B4 BL 0x3C3883C
	0x039892B8 TBZ X0, 0x0, 0x3989304
	0x039892BC ADRP X8, 0x792000
	0x039892C0 LDR X8, [X8 + 0x8F8]
	0x039892C4 LDR X0, [X8]
	0x039892C8 LDR W8, [X0 + 0xE0]
	0x039892CC CBNZ W8, 0x39892D4
	0x039892D0 BL 0x1C16DFC
	0x039892D4 MOV X0, X20
	0x039892D8 MOV X1, X31
	0x039892DC BL 0x39E1920
	0x039892E0 LDR X8, [X22]
	0x039892E4 MOV X20, X0
	0x039892E8 LDR W9, [X8 + 0xE0]
	0x039892EC CBNZ W9, 0x39892FC
	0x039892F0 MOV X0, X8
	0x039892F4 BL 0x1C16DFC
	0x039892F8 LDR X8, [X22]
	0x039892FC LDR X8, [X8 + 0xB8]
	0x03989300 STR X20, [X8 + 0x28]
	0x03989304 LDR X0, [X23]
	0x03989308 LDR W8, [X0 + 0xE0]
	0x0398930C CBNZ W8, 0x3989314
	0x03989310 BL 0x1C16DFC
	0x03989314 ADRP X21, 0x7C7000
	0x03989318 LDR X21, [X21 + 0x578]
	0x0398931C MOV X0, X19
	0x03989320 MOV X1, X31
	0x03989324 MOV X2, X31
	0x03989328 BL 0x3C354F8
	0x0398932C TBZ X0, 0x0, 0x39893BC
	0x03989330 LDR X0, [X22]
	0x03989334 LDR W8, [X0 + 0xE0]
	0x03989338 CBNZ W8, 0x3989344
	0x0398933C BL 0x1C16DFC
	0x03989340 LDR X0, [X22]
	0x03989344 LDR X8, [X23]
	0x03989348 LDR X9, [X0 + 0xB8]
	0x0398934C LDR W10, [X8 + 0xE0]
	0x03989350 LDR X20, [X9 + 0x30]
	0x03989354 CBNZ W10, 0x3989360
	0x03989358 MOV X0, X8
	0x0398935C BL 0x1C16DFC
	0x03989360 MOV X0, X20
	0x03989364 MOV X1, X31
	0x03989368 MOV X2, X31
	0x0398936C BL 0x3C3883C
	0x03989370 TBZ X0, 0x0, 0x39893BC
	0x03989374 ADRP X8, 0x792000
	0x03989378 LDR X8, [X8 + 0x8F8]
	0x0398937C LDR X0, [X8]
	0x03989380 LDR W8, [X0 + 0xE0]
	0x03989384 CBNZ W8, 0x398938C
	0x03989388 BL 0x1C16DFC
	0x0398938C MOV X0, X19
	0x03989390 MOV X1, X31
	0x03989394 BL 0x39E1920
	0x03989398 LDR X8, [X22]
	0x0398939C MOV X19, X0
	0x039893A0 LDR W9, [X8 + 0xE0]
	0x039893A4 CBNZ W9, 0x39893B4
	0x039893A8 MOV X0, X8
	0x039893AC BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract X31, X31, 4096
	010 Subtract X31, X31, 1456
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X8, [X22+40]
	013 Move X21, 0xA59000
	014 Move X19, X1
	015 Move X20, X0
	016 Move [X31+5544], X8
	017 Move W8, [X21+2677]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x7C8000
	023 Move X0, [X0+1624]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2677], W8
	027 Move X8, [X20+16]
	028 Compare X8, 0
	029 JumpIfEqual {120}
	030 Move W2, [X8+24]
	031 Move W9, [X8+28]
	032 Add X23, X31, 88
	033 Add W9, W9, 1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X8+24], W31
	036 Move [X8+28], W9
	037 Move X0, [X8+16]
	038 Move W1, W31
	039 Move X3, X31
	040 Call Array.Clear, X0, X1, X2
	041 Move W8, [X19+1704]
	042 Add X0, X31, 3608
	043 Move W2, 1936
	044 Move X1, X19
	045 And W8, W8, 1
	046 Move [X20+32], W8
	047 Move W8, [X19+1696]
	048 Add X24, X31, 3608
	049 Move [X20+36], W8
	050 Move W21, [X19+1700]
	051 Call 0x3EB2AC0
	052 Add X1, X24, 96
	053 Add X0, X31, 2024
	054 Move W2, 1584
	055 Call 0x3EB2AC0
	056 Add X2, X31, 2024
	057 Move X0, X20
	058 Move W1, W21
	059 Call XRPass.AssignCullingParams, X0, X1, X2
	060 Move X8, [X19+32]
	061 Move V0, [X19]
	062 Move V1, [X19+16]
	063 NotImplemented "Instruction MOVI not yet implemented."
	064 Add X0, X31, 48
	065 Add X1, X31, 0
	066 Move TEMP, 0
	067 Not TEMP
	068 Move W3, TEMP
	069 Move TEMP, 0
	070 Not TEMP
	071 Move W4, TEMP
	072 Move W2, W31
	073 Move X5, X31
	074 Move [X31+80], X31
	075 Move [X31+32], X8
	076 Move [X31], V0
	077 Move [X31+8], V1
	078 Move [X31+48], V2
	079 Move [X31+56], V2
	080 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	081 Move X8, [X31+80]
	082 Move V1, [X31+48]
	083 Move V0, [X31+64]
	084 Add X0, X31, 88
	085 Move W2, 1936
	086 Move X1, X19
	087 Move [X20+80], X8
	088 Move [X20+48], V1
	089 Move [X20+56], V0
	090 Call 0x3EB2AC0
	091 NotImplemented "Instruction LDUR not yet implemented."
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 Move W9, [X31+176]
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 Move X8, [X20+24]
	096 Move [X20+88], V1
	097 Move [X20+136], W9
	098 Move [X20+120], V2
	099 Move [X20+104], V0
	100 Compare X8, 0
	101 JumpIfEqual {120}
	102 Move X9, [X19+1680]
	103 Move [X8+32], X9
	104 Move X8, [X19+1688]
	105 Move [X20+1728], X8
	106 Move X8, [X22+40]
	107 Move X9, [X31+5544]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Add X31, X31, 4096
	110 Add X31, X31, 1456
	111 Move X20, [X31+48]
	112 Move X19, [X31+56]
	113 Move X22, [X31+32]
	114 Move X21, [X31+40]
	115 Move X24, [X31+16]
	116 Move X23, [X31+24]
	117 Move X29, [X31+64]
	118 Move X30, [X31+72]
	119 Return 
	120 Call 0x1C17F20
	121 Call 0x3EB2B20

Method: System.Void AddView(UnityEngine.Experimental.Rendering.XRView xrView)

Disassembly:
	0x03989C30 LDR X0, [X19]
	0x03989C34 LDR W8, [X0 + 0xE0]
	0x03989C38 CBNZ W8, 0x3989C40
	0x03989C3C BL 0x1C16DFC
	0x03989C40 BL 0x39894DC
	0x03989C44 LDR X0, [X19]
	0x03989C48 LDR X8, [X0 + 0xB8]
	0x03989C4C LDR X8, [X8]
	0x03989C50 CBZ X8, 0x3989CD0
	0x03989C54 LDR X8, [X8 + 0x10]
	0x03989C58 CBZ X8, 0x3989CD0
	0x03989C5C LDR W8, [X8 + 0x18]
	0x03989C60 CMP W8, 0x1
	0x03989C64 B.LT 0x3989CAC
	0x03989C68 ADRP X8, 0x76A000
	0x03989C6C LDR X8, [X8 + 0xA28]
	0x03989C70 ADRP X20, 0x7C7000
	0x03989C74 LDR X0, [X8]
	0x03989C78 LDR W8, [X0 + 0xE0]
	0x03989C7C LDR X20, [X20 + 0x708]
	0x03989C80 CBNZ W8, 0x3989C88
	0x03989C84 BL 0x1C16DFC
	0x03989C88 LDR X0, [X20]
	0x03989C8C MOV X1, X31
	0x03989C90 BL 0x3C06A04
	0x03989C94 LDR X0, [X19]
	0x03989C98 LDR W8, [X0 + 0xE0]
	0x03989C9C CBNZ W8, 0x3989CA4
	0x03989CA0 BL 0x1C16DFC
	0x03989CA4 BL 0x3989CD4
	0x03989CA8 LDR X0, [X19]
	0x03989CAC LDR W8, [X0 + 0xE0]
	0x03989CB0 CBNZ W8, 0x3989CBC
	0x03989CB4 BL 0x1C16DFC
	0x03989CB8 LDR X0, [X19]
	0x03989CBC LDR X8, [X0 + 0xB8]
	0x03989CC0 LDP X20, X19, [X31 + 0x10]
	0x03989CC4 LDR X0, [X8]
	0x03989CC8 LDR X30, [X31], #0x20
	0x03989CCC RET
	0x03989CD0 BL 0x1C16F20
	0x03989CD4 STR X30, [X31 - 0x20]!
	0x03989CD8 STP X20, X19, [X31 + 0x10]
	0x03989CDC ADRP X20, 0xA58000
	0x03989CE0 ADRP X19, 0x7C7000
	0x03989CE4 LDRB W8, [X20 + 0xA85]
	0x03989CE8 LDR X19, [X19 + 0x500]
	0x03989CEC TBNZ X8, 0x0, 0x3989D04
	0x03989CF0 ADRP X0, 0x7C7000
	0x03989CF4 LDR X0, [X0 + 0x500]
	0x03989CF8 BL 0x1C16CF4
	0x03989CFC MOVZ W8, 0x1
	0x03989D00 STRB W8, [X20 + 0xA85]
	0x03989D04 LDR X0, [X19]
	0x03989D08 LDR W8, [X0 + 0xE0]
	0x03989D0C CBNZ W8, 0x3989D14
	0x03989D10 BL 0x1C16DFC
	0x03989D14 ADRP X20, 0xA58000
	0x03989D18 LDRB W8, [X20 + 0xB3F]
	0x03989D1C CBNZ W8, 0x3989D34
	0x03989D20 ADRP X0, 0x7C7000
	0x03989D24 LDR X0, [X0 + 0x500]
	0x03989D28 BL 0x1C16CF4
	0x03989D2C MOVZ W8, 0x1
	0x03989D30 STRB W8, [X20 + 0xB3F]
	0x03989D34 LDR X0, [X19]
	0x03989D38 LDR W8, [X0 + 0xE0]
	0x03989D3C CBNZ W8, 0x3989D48
	0x03989D40 BL 0x1C16DFC
	0x03989D44 LDR X0, [X19]
	0x03989D48 LDR X8, [X0 + 0xB8]
	0x03989D4C LDRB W8, [X8 + 0x50]
	0x03989D50 CBZ W8, 0x3989D78
	0x03989D54 LDR W8, [X0 + 0xE0]
	0x03989D58 CBNZ W8, 0x3989D64
	0x03989D5C BL 0x1C16DFC
	0x03989D60 LDR X0, [X19]
	0x03989D64 LDR X8, [X0 + 0xB8]
	0x03989D68 LDR X0, [X8]
	0x03989D6C CBZ X0, 0x3989DA0
	0x03989D70 BL 0x3985E40
	0x03989D74 LDR X0, [X19]
	0x03989D78 LDR W8, [X0 + 0xE0]
	0x03989D7C CBNZ W8, 0x3989D88
	0x03989D80 BL 0x1C16DFC
	0x03989D84 LDR X0, [X19]
	0x03989D88 LDR X8, [X0 + 0xB8]
	0x03989D8C LDR X0, [X8]
	0x03989D90 CBZ X0, 0x3989DA0
	0x03989D94 LDP X20, X19, [X31 + 0x10]
	0x03989D98 LDR X30, [X31], #0x20
	0x03989D9C B 0x3985D14
	0x03989DA0 BL 0x1C16F20
	0x03989DA4 STR X30, [X31 - 0x30]!
	0x03989DA8 STP X22, X21, [X31 + 0x10]
	0x03989DAC STP X20, X19, [X31 + 0x20]
	0x03989DB0 ADRP X22, 0xA58000
	0x03989DB4 ADRP X21, 0x7C7000
	0x03989DB8 LDRB W8, [X22 + 0xA86]
	0x03989DBC LDR X21, [X21 + 0x500]
	0x03989DC0 MOV X19, X1
	0x03989DC4 MOV X20, X0
	0x03989DC8 TBNZ X8, 0x0, 0x3989DEC
	0x03989DCC ADRP X0, 0x7C7000
	0x03989DD0 LDR X0, [X0 + 0x580]
	0x03989DD4 BL 0x1C16CF4
	0x03989DD8 ADRP X0, 0x7C7000
	0x03989DDC LDR X0, [X0 + 0x500]
	0x03989DE0 BL 0x1C16CF4
	0x03989DE4 MOVZ W8, 0x1
	0x03989DE8 STRB W8, [X22 + 0xA86]
	0x03989DEC LDR X0, [X21]
	0x03989DF0 ADRP X22, 0x7C7000
	0x03989DF4 LDR W8, [X0 + 0xE0]
	0x03989DF8 LDR X22, [X22 + 0x580]
	0x03989DFC CBNZ W8, 0x3989E08
	0x03989E00 BL 0x1C16DFC
	0x03989E04 LDR X0, [X21]
	0x03989E08 LDR X8, [X0 + 0xB8]
	0x03989E0C LDR X0, [X22]
	0x03989E10 LDR X21, [X8 + 0x30]
	0x03989E14 LDR W9, [X0 + 0xE0]
	0x03989E18 LDR X22, [X8 + 0x18]
	0x03989E1C CBNZ W9, 0x3989E24
	0x03989E20 BL 0x1C16DFC
	0x03989E24 MOV X0, X20
	0x03989E28 MOV X1, X19
	0x03989E2C MOV X2, X21
	0x03989E30 MOV X3, X22
	0x03989E34 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Subtract X31, X31, 512
	009 Move X21, 0xA59000
	010 Move W8, [X21+2678]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x7C8000
	018 Move X0, [X0+1672]
	019 Call 0x1C17CF4
	020 Move X0, 0x7C8000
	021 Move X0, [X0+1360]
	022 Call 0x1C17CF4
	023 Move X0, 0x7C8000
	024 Move X0, [X0+1560]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2678], W8
	028 Move X8, [X20+16]
	029 Compare X8, 0
	030 JumpIfEqual {108}
	031 Move X22, 0x7C8000
	032 Move X22, [X22+1560]
	033 Move W21, [X8+24]
	034 Move X0, [X22]
	035 Move W9, [X0+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X23, 0xA59000
	040 Move W8, [X23+2875]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x7C8000
	044 Move X0, [X0+1560]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X23+2875], W8
	048 Move X0, [X22]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X22]
	054 Move X8, [X0+184]
	055 Move W8, [X8]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X20, [X20+16]
	058 Add X0, X31, 8
	059 Move W2, 168
	060 Move X1, X19
	061 Call 0x3EB2AC0
	062 Compare X20, 0
	063 JumpIfEqual {108}
	064 Move X8, 0x7C8000
	065 Move X8, [X8+1672]
	066 Add X0, X31, 176
	067 Add X1, X31, 8
	068 Move W2, 168
	069 Move X19, [X8]
	070 Call 0x3EB2AC0
	071 Move W9, [X20+28]
	072 Move X8, [X20+16]
	073 Add W9, W9, 1
	074 Move [X20+28], W9
	075 Compare X8, 0
	076 JumpIfEqual {108}
	077 NotImplemented "Instruction LDRSW not yet implemented."
	078 Move W10, [X8+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W11, 168
	081 NotImplemented "Instruction MADD not yet implemented."
	082 Add W10, W9, 1
	083 Add X0, X8, 32
	084 Add X1, X31, 176
	085 Move W2, 168
	086 Move [X20+24], W10
	087 Call 0x3EB2AC0
	088 Move X8, [X19+32]
	089 Add X0, X31, 344
	090 Add X1, X31, 176
	091 Move W2, 168
	092 Move X8, [X8+192]
	093 Move X19, [X8+112]
	094 Call 0x3EB2AC0
	095 Add X1, X31, 344
	096 Move X0, X20
	097 Move X2, X19
	098 Call List`1<XRView>.AddWithResize, X0, X1
	099 Add X31, X31, 512
	100 Move X20, [X31+48]
	101 Move X19, [X31+56]
	102 Move X22, [X31+32]
	103 Move X21, [X31+40]
	104 Move X30, [X31+16]
	105 Move X23, [X31+24]
	106 Move X29, [X31+64]
	107 Return 
	108 Call 0x1C17F20
	109 Move X0, 0x7C8000
	110 Move X0, [X0+1560]
	111 Call 0x1C17D08
	112 Call 0x19913D0
	113 Move X0, X31
	114 Call 0x399BB34
	115 Move [X31+344], W0
	116 Move X0, 0x76B000
	117 Move X0, [X0+1880]
	118 Call 0x1C17D08
	119 Add X1, X31, 344
	120 Call 0x1C17E04
	121 Move X19, X0
	122 Move X0, 0x7C8000
	123 Move X0, [X0+1680]
	124 Call 0x1C17D08
	125 Move X1, X19
	126 Move X2, X31
	127 Call String.Format, X0, X1
	128 Move X19, X0
	129 Move X0, 0x774000
	130 Move X0, [X0+1880]
	131 Call 0x1C17D08
	132 Call 0x1C17F10
	133 Move X1, X19
	134 Move X2, X31
	135 Move X20, X0
	136 Call NotImplementedException..ctor, X0, X1
	137 Move X0, 0x7C8000
	138 Move X0, [X0+1688]
	139 Call 0x1C17D08
	140 Move X1, X0
	141 Move X0, X20
	142 Call 0x1C17DEC

