Type: UnityEngine.Experimental.Rendering.XROcclusionMesh

Method: System.Void .ctor(UnityEngine.Experimental.Rendering.XRPass xrPass)

Disassembly:
	0x03988344 LDUR V0, [X23 + 0x38]
	0x03988348 LDUR V1, [X23 + 0x28]
	0x0398834C LDR W9, [X31 + 0xB0]
	0x03988350 LDUR V2, [X23 + 0x48]
	0x03988354 LDR X8, [X20 + 0x18]
	0x03988358 STUR V1, [X20 + 0x58]
	0x0398835C STR W9, [X20 + 0x88]
	0x03988360 STUR V2, [X20 + 0x78]
	0x03988364 STUR V0, [X20 + 0x68]
	0x03988368 CBZ X8, 0x39883A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void SetMaterial(UnityEngine.Material mat)

Disassembly:
	0x0398836C LDR X9, [X19 + 0x690]
	0x03988370 STR X9, [X8 + 0x20]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Boolean get_hasValidOcclusionMesh()

Disassembly:
	0x03988374 LDR X8, [X19 + 0x698]
	0x03988378 STR X8, [X20 + 0x6C0]
	0x0398837C LDR X8, [X22 + 0x28]
	0x03988380 LDR X9, [X31 + 0x15A8]
	0x03988384 CMP X8, X9
	0x03988388 B.NE 0x39883AC
	0x0398838C ADD X31, X31, 0x1000
	0x03988390 ADD X31, X31, 0x5B0
	0x03988394 LDP X20, X19, [X31 + 0x30]
	0x03988398 LDP X22, X21, [X31 + 0x20]
	0x0398839C LDP X24, X23, [X31 + 0x10]
	0x039883A0 LDP X29, X30, [X31], #0x40
	0x039883A4 RET
	0x039883A8 BL 0x1C16F20
	0x039883AC BL 0x3EB1B20
	0x039883B0 STP X30, X21, [X31 - 0x20]!
	0x039883B4 STP X20, X19, [X31 + 0x10]
	0x039883B8 ADRP X21, 0xA59000
	0x039883BC ADRP X20, 0x7C8000
	0x039883C0 LDRB W8, [X21 + 0xA65]
	0x039883C4 LDR X20, [X20 + 0x648]
	0x039883C8 MOV X19, X0
	0x039883CC TBNZ X8, 0x0, 0x39883F0
	0x039883D0 ADRP X0, 0x7C8000
	0x039883D4 LDR X0, [X0 + 0x660]
	0x039883D8 BL 0x1C16CF4
	0x039883DC ADRP X0, 0x7C8000
	0x039883E0 LDR X0, [X0 + 0x648]
	0x039883E4 BL 0x1C16CF4
	0x039883E8 MOVZ W8, 0x1
	0x039883EC STRB W8, [X21 + 0xA65]
	0x039883F0 LDR X0, [X20]
	0x039883F4 ADRP X20, 0x7C8000
	0x039883F8 LDR W8, [X0 + 0xE0]
	0x039883FC LDR X20, [X20 + 0x660]
	0x03988400 CBNZ W8, 0x3988408
	0x03988404 BL 0x1C16DFC
	0x03988408 LDR X1, [X20]
	0x0398840C MOV X0, X19
	0x03988410 LDP X20, X19, [X31 + 0x10]
	0x03988414 LDP X30, X21, [X31], #0x20
	0x03988418 B 0x2D55650
	0x0398841C STR X30, [X31 - 0x20]!
	0x03988420 STP X20, X19, [X31 + 0x10]
	0x03988424 ADRP X20, 0xA59000
	0x03988428 LDRB W8, [X20 + 0xA66]
	0x0398842C MOV X19, X0
	0x03988430 TBNZ X8, 0x0, 0x3988448
	0x03988434 ADRP X0, 0x7C8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA5A000
	005 Move W8, [X20+2652]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x76C000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2652], W8
	016 Move X0, X19
	017 Call XROcclusionMesh.IsOcclusionMeshSupported, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {34}
	022 Move X0, [X19+16]
	023 Compare X0, 0
	024 JumpIfEqual {61}
	025 Call XRPass.get_viewCount, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0x76C000
	028 Move X8, [X8+1432]
	029 Move X19, [X19+24]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {53}
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W0, W31
	037 Move X30, [X31+32]
	038 Return X0
	039 Move X0, [X19+16]
	040 Compare X0, 0
	041 JumpIfEqual {61}
	042 Move W1, W31
	043 Call XRPass.GetOcclusionMesh, X0, X1
	044 Move X8, 0x76C000
	045 Move X8, [X8+1432]
	046 Move X19, X0
	047 Move X8, [X8]
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X1, X31
	057 Move X2, X31
	058 Move X30, [X31+32]
	059 Call Object.op_Inequality, X0, X1
	060 Return X0
	061 Call 0x1C17F20

Method: System.Void RenderOcclusionMesh(UnityEngine.Rendering.CommandBuffer cmd)

Disassembly:
	0x0398852C STR X8, [X0 + 0x50]
	0x03988530 STP V1, V0, [X0 + 0x30]
	0x03988534 RET
	0x03988538 LDR W9, [X0 + 0x88]
	0x0398853C LDUR V0, [X0 + 0x78]
	0x03988540 LDUR V1, [X0 + 0x68]
	0x03988544 LDUR V2, [X0 + 0x58]
	0x03988548 STR W9, [X8 + 0x30]
	0x0398854C STP V1, V0, [X8 + 0x10]
	0x03988550 STR V2, [X8]
	0x03988554 RET
	0x03988558 LDR W8, [X1 + 0x30]
	0x0398855C LDP V1, V0, [X1 + 0x10]
	0x03988560 LDR V2, [X1]
	0x03988564 STR W8, [X0 + 0x88]
	0x03988568 STUR V0, [X0 + 0x78]
	0x0398856C STUR V1, [X0 + 0x68]
	0x03988570 STUR V2, [X0 + 0x58]
	0x03988574 RET
	0x03988578 ADD X1, X0, 0x90
	0x0398857C MOVZ W2, 0x630
	0x03988580 MOV X0, X8
	0x03988584 B 0x3EB1AC0
	0x03988588 STR X30, [X31 - 0x10]!
	0x0398858C ADD X0, X0, 0x90
	0x03988590 MOVZ W2, 0x630
	0x03988594 BL 0x3EB1B30
	0x03988598 LDR X30, [X31], #0x10
	0x0398859C RET
	0x039885A0 LDR X0, [X0 + 0x6C0]
	0x039885A4 RET
	0x039885A8 STR X1, [X0 + 0x6C0]
	0x039885AC RET
	0x039885B0 STR X30, [X31 - 0x20]!
	0x039885B4 STP X20, X19, [X31 + 0x10]
	0x039885B8 ADRP X20, 0xA59000
	0x039885BC ADRP X19, 0x7C8000
	0x039885C0 LDRB W8, [X20 + 0xA68]
	0x039885C4 LDR X19, [X19 + 0x500]
	0x039885C8 TBNZ X8, 0x0, 0x39885E0
	0x039885CC ADRP X0, 0x7C8000
	0x039885D0 LDR X0, [X0 + 0x500]
	0x039885D4 BL 0x1C16CF4
	0x039885D8 MOVZ W8, 0x1
	0x039885DC STRB W8, [X20 + 0xA68]
	0x039885E0 LDR X0, [X19]
	0x039885E4 LDR W8, [X0 + 0xE0]
	0x039885E8 CBNZ W8, 0x39885F0
	0x039885EC BL 0x1C16DFC
	0x039885F0 ADRP X20, 0xA59000
	0x039885F4 LDRB W8, [X20 + 0xB3A]
	0x039885F8 CBNZ W8, 0x3988610
	0x039885FC ADRP X0, 0x7C8000
	0x03988600 LDR X0, [X0 + 0x500]
	0x03988604 BL 0x1C16CF4
	0x03988608 MOVZ W8, 0x1
	0x0398860C STRB W8, [X20 + 0xB3A]
	0x03988610 LDR X0, [X19]
	0x03988614 LDR W8, [X0 + 0xE0]
	0x03988618 CBNZ W8, 0x3988624
	0x0398861C BL 0x1C16DFC
	0x03988620 LDR X0, [X19]
	0x03988624 LDR X8, [X0 + 0xB8]
	0x03988628 LDR X0, [X8 + 0x18]
	0x0398862C CBZ X0, 0x3988658
	0x03988630 MOV X1, X31
	0x03988634 BL 0x3E65EEC
	0x03988638 CBZ X0, 0x398864C
	0x0398863C LDP X20, X19, [X31 + 0x10]
	0x03988640 MOV X1, X31
	0x03988644 LDR X30, [X31], #0x20
	0x03988648 B 0x3C10770
	0x0398864C LDP X20, X19, [X31 + 0x10]
	0x03988650 LDR X30, [X31], #0x20
	0x03988654 RET
	0x03988658 BL 0x1C16F20
	0x0398865C STR X30, [X31 - 0x20]!
	0x03988660 STP X20, X19, [X31 + 0x10]
	0x03988664 ADRP X20, 0xA59000
	0x03988668 ADRP X19, 0x7C8000
	0x0398866C LDRB W8, [X20 + 0xA69]
	0x03988670 LDR X19, [X19 + 0x500]
	0x03988674 TBNZ X8, 0x0, 0x398868C
	0x03988678 ADRP X0, 0x7C8000
	0x0398867C LDR X0, [X0 + 0x500]
	0x03988680 BL 0x1C16CF4
	0x03988684 MOVZ W8, 0x1
	0x03988688 STRB W8, [X20 + 0xA69]
	0x0398868C LDR X0, [X19]
	0x03988690 LDR W8, [X0 + 0xE0]
	0x03988694 CBNZ W8, 0x398869C
	0x03988698 BL 0x1C16DFC
	0x0398869C ADRP X20, 0xA59000
	0x039886A0 LDRB W8, [X20 + 0xB3A]
	0x039886A4 CBNZ W8, 0x39886BC
	0x039886A8 ADRP X0, 0x7C8000
	0x039886AC LDR X0, [X0 + 0x500]
	0x039886B0 BL 0x1C16CF4
	0x039886B4 MOVZ W8, 0x1
	0x039886B8 STRB W8, [X20 + 0xB3A]
	0x039886BC LDR X0, [X19]
	0x039886C0 LDR W8, [X0 + 0xE0]
	0x039886C4 CBNZ W8, 0x39886D0
	0x039886C8 BL 0x1C16DFC
	0x039886CC LDR X0, [X19]
	0x039886D0 LDR X8, [X0 + 0xB8]
	0x039886D4 LDR X0, [X8 + 0x18]
	0x039886D8 CBZ X0, 0x3988704
	0x039886DC MOV X1, X31
	0x039886E0 BL 0x3E65EEC
	0x039886E4 CBZ X0, 0x39886F8
	0x039886E8 LDP X20, X19, [X31 + 0x10]
	0x039886EC MOV X1, X31
	0x039886F0 LDR X30, [X31], #0x20
	0x039886F4 B 0x3C109A4
	0x039886F8 LDP X20, X19, [X31 + 0x10]
	0x039886FC LDR X30, [X31], #0x20
	0x03988700 RET
	0x03988704 BL 0x1C16F20
	0x03988708 SUB X31, X31, 0x40
	0x0398870C STP X30, X23, [X31 + 0x10]
	0x03988710 STP X22, X21, [X31 + 0x20]
	0x03988714 STP X20, X19, [X31 + 0x30]
	0x03988718 ADRP X19, 0xA59000
	0x0398871C ADRP X22, 0x7C8000
	0x03988720 LDRB W8, [X19 + 0xA6A]
	0x03988724 LDR X22, [X22 + 0x500]
	0x03988728 TBNZ X8, 0x0, 0x3988740
	0x0398872C ADRP X0, 0x7C8000
	0x03988730 LDR X0, [X0 + 0x500]
	0x03988734 BL 0x1C16CF4
	0x03988738 MOVZ W8, 0x1
	0x0398873C STRB W8, [X19 + 0xA6A]
	0x03988740 LDR X0, [X22]
	0x03988744 LDR W8, [X0 + 0xE0]
	0x03988748 CBNZ W8, 0x3988750
	0x0398874C BL 0x1C16DFC
	0x03988750 ADRP X23, 0xA59000
	0x03988754 LDRB W8, [X23 + 0xB3A]
	0x03988758 CBNZ W8, 0x3988770
	0x0398875C ADRP X0, 0x7C8000
	0x03988760 LDR X0, [X0 + 0x500]
	0x03988764 BL 0x1C16CF4
	0x03988768 MOVZ W8, 0x1
	0x0398876C STRB W8, [X23 + 0xB3A]
	0x03988770 LDR X0, [X22]
	0x03988774 LDR W8, [X0 + 0xE0]
	0x03988778 CBNZ W8, 0x3988784
	0x0398877C BL 0x1C16DFC
	0x03988780 LDR X0, [X22]
	0x03988784 LDR X8, [X0 + 0xB8]
	0x03988788 LDR X0, [X8 + 0x18]
	0x0398878C CBZ X0, 0x3988928
	0x03988790 MOV X1, X31
	0x03988794 BL 0x3E65EEC
	0x03988798 CBZ X0, 0x39887AC
	0x0398879C MOV X1, X31
	0x039887A0 BL 0x3C10B0C
	0x039887A4 MOV W19, W0
	0x039887A8 B 0x39887B0
	0x039887AC MOVN W19, 0x0
	0x039887B0 LDR X0, [X22]
	0x039887B4 LDR W8, [X0 + 0xE0]
	0x039887B8 CBNZ W8, 0x39887C0
	0x039887BC BL 0x1C16DFC
	0x039887C0 LDRB W8, [X23 + 0xB3A]
	0x039887C4 CBNZ W8, 0x39887DC
	0x039887C8 ADRP X0, 0x7C8000
	0x039887CC LDR X0, [X0 + 0x500]
	0x039887D0 BL 0x1C16CF4
	0x039887D4 MOVZ W8, 0x1
	0x039887D8 STRB W8, [X23 + 0xB3A]
	0x039887DC LDR X0, [X22]
	0x039887E0 LDR W8, [X0 + 0xE0]
	0x039887E4 CBNZ W8, 0x39887F0
	0x039887E8 BL 0x1C16DFC
	0x039887EC LDR X0, [X22]
	0x039887F0 LDR X8, [X0 + 0xB8]
	0x039887F4 LDR X0, [X8 + 0x18]
	0x039887F8 CBZ X0, 0x3988928
	0x039887FC MOV X1, X31
	0x03988800 BL 0x3E65EEC
	0x03988804 CBZ X0, 0x3988818
	0x03988808 MOV X1, X31
	0x0398880C BL 0x3C10BC0
	0x03988810 MOV W20, W0
	0x03988814 B 0x398881C
	0x03988818 MOVN W20, 0x0
	0x0398881C LDR X0, [X22]
	0x03988820 LDR W8, [X0 + 0xE0]
	0x03988824 CBNZ W8, 0x398882C
	0x03988828 BL 0x1C16DFC
	0x0398882C LDRB W8, [X23 + 0xB3A]
	0x03988830 CBNZ W8, 0x3988848
	0x03988834 ADRP X0, 0x7C8000
	0x03988838 LDR X0, [X0 + 0x500]
	0x0398883C BL 0x1C16CF4
	0x03988840 MOVZ W8, 0x1
	0x03988844 STRB W8, [X23 + 0xB3A]
	0x03988848 LDR X0, [X22]

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+192], X29
	003 Move [X31+208], X30
	004 Move [X31+216], X23
	005 Move [X31+224], X22
	006 Move [X31+232], X21
	007 Move [X31+240], X20
	008 Move [X31+248], X19
	009 Move X21, 0xA5A000
	010 Move W8, [X21+2653]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x76C000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x7C9000
	021 Move X0, [X0+1528]
	022 Call 0x1C17CF4
	023 Move X0, 0x7C9000
	024 Move X0, [X0+1536]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2653], W8
	028 Move X0, X20
	029 Move [X31+200], W31
	030 Call XROcclusionMesh.IsOcclusionMeshSupported, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {187}
	035 Move X21, 0x7C9000
	036 Move X21, [X21+1528]
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X21]
	043 Move X8, [X0+184]
	044 Add X0, X31, 200
	045 Move X1, X19
	046 Move X3, X31
	047 Move X2, [X8]
	048 Call ProfilingScope..ctor, X0, X1, X2
	049 Move X0, [X20+16]
	050 Compare X0, 0
	051 JumpIfEqual {196}
	052 Call XRPass.get_viewCount, X0
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X8, 0x76C000
	055 Move X8, [X8+1432]
	056 Move X21, [X20+24]
	057 Move X0, [X8]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X21
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {184}
	070 Move X0, X31
	071 Call SystemInfo.get_supportsRenderTargetArrayIndexFromVertexShader
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {184}
	076 Move X0, [X20+16]
	077 Compare X0, 0
	078 JumpIfEqual {199}
	079 Move X1, X19
	080 Call XRPass.StopSinglePass, X0, X1
	081 Compare X19, 0
	082 JumpIfEqual {200}
	083 Move X22, 0x7C9000
	084 Move X22, [X22+1536]
	085 Move X1, [X22]
	086 Move X0, X19
	087 Move X2, X31
	088 Call CommandBuffer.EnableShaderKeyword, X0, X1
	089 Move X23, 0xA51000
	090 Move W8, [X23+2752]
	091 Move X21, [X20+24]
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x770000
	095 Move X0, [X0+624]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X23+2752], W8
	099 Move X8, 0x770000
	100 Move X8, [X8+624]
	101 Move X8, [X8]
	102 Move X8, [X8+184]
	103 Move V1, [X8+96]
	104 Move V0, [X8+112]
	105 Move V2, [X8+64]
	106 Move V3, [X8+80]
	107 Move [X31+160], V1
	108 Move [X31+168], V0
	109 Move [X31+128], V2
	110 Move [X31+136], V3
	111 Move X3, [X20+32]
	112 Add X2, X31, 128
	113 Move X0, X19
	114 Move X1, X21
	115 Move X4, X31
	116 Call CommandBuffer.DrawMesh, X0, X1, X2, X3
	117 Move X1, [X22]
	118 Move X0, X19
	119 Move X2, X31
	120 Call CommandBuffer.DisableShaderKeyword, X0, X1
	121 Move X0, [X20+16]
	122 Compare X0, 0
	123 JumpIfEqual {201}
	124 Move X1, X19
	125 Call XRPass.StartSinglePass, X0, X1
	126 Move X0, [X20+16]
	127 Compare X0, 0
	128 JumpIfEqual {197}
	129 Move W1, W31
	130 Call XRPass.GetOcclusionMesh, X0, X1
	131 Move X8, 0x76C000
	132 Move X8, [X8+1432]
	133 Move X21, X0
	134 Move X0, [X8]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X21
	140 Move X1, X31
	141 Move X2, X31
	142 Call Object.op_Inequality, X0, X1
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {184}
	147 Move X22, 0xA51000
	148 Move W8, [X22+2752]
	149 Compare W8, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x770000
	152 Move X0, [X0+624]
	153 Call 0x1C17CF4
	154 Move W8, 1
	155 Move [X22+2752], W8
	156 Move X8, 0x770000
	157 Move X8, [X8+624]
	158 Move X8, [X8]
	159 Move X8, [X8+184]
	160 Move V1, [X8+96]
	161 Move V0, [X8+112]
	162 Move V2, [X8+64]
	163 Move V3, [X8+80]
	164 Move [X31+96], V1
	165 Move [X31+104], V0
	166 Move [X31+64], V2
	167 Move [X31+72], V3
	168 Compare X19, 0
	169 JumpIfEqual {198}
	170 Move V0, [X31+64]
	171 Move V1, [X31+80]
	172 Move V2, [X31+96]
	173 Move V3, [X31+112]
	174 Move X3, [X20+32]
	175 Move [X31], V0
	176 Move [X31+8], V1
	177 Move [X31+32], V2
	178 Move [X31+40], V3
	179 Add X2, X31, 0
	180 Move X0, X19
	181 Move X1, X21
	182 Move X4, X31
	183 Call CommandBuffer.DrawMesh, X0, X1, X2, X3
	184 Add X0, X31, 200
	185 Move X1, X31
	186 Call ProfilingScope.Dispose, X0
	187 Move X20, [X31+240]
	188 Move X19, [X31+248]
	189 Move X22, [X31+224]
	190 Move X21, [X31+232]
	191 Move X30, [X31+208]
	192 Move X23, [X31+216]
	193 Move X29, [X31+192]
	194 Add X31, X31, 256
	195 Return 
	196 Call 0x1C17F20
	197 Call 0x1C17F20
	198 Call 0x1C17F20
	199 Call 0x1C17F20
	200 Call 0x1C17F20
	201 Call 0x1C17F20
	202 Move X19, X0
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X0, X19
	205 Call 0x3EB2AD0
	206 Move X20, [X0]
	207 Call 0x3EB2AE0
	208 Add X0, X31, 200
	209 Move X1, X31
	210 Call ProfilingScope.Dispose, X0
	211 Compare X20, 0
	212 JumpIfEqual {187}
	213 Move X0, X20
	214 Call 0x1C17F18
	215 Move X20, X31
	216 Move X19, X0
	217 Add X0, X31, 200
	218 Move X1, X31
	219 Call ProfilingScope.Dispose, X0
	220 Compare X20, 0
	221 JumpIfNotEqual {224}
	222 Move X0, X19
	223 Call 0x1D2D690
	224 Move X0, X20
	225 Call 0x1C17F18
	226 Call 0x1991590

Method: System.Void UpdateCombinedMesh()

Disassembly:
	0x03988B0C MOVZ W2, 0xA8
	0x03988B10 MOV X1, X20
	0x03988B14 BL 0x3EB1AC0
	0x03988B18 LDR X20, [X22]
	0x03988B1C ADD X0, X31, 0xA8
	0x03988B20 ADD X1, X31, 0x0
	0x03988B24 MOVZ W2, 0xA8
	0x03988B28 BL 0x3EB1AC0
	0x03988B2C ADD X2, X31, 0xA8
	0x03988B30 MOV X0, X21
	0x03988B34 MOV W1, W19
	0x03988B38 MOV X3, X20
	0x03988B3C BL 0x30DFE4C
	0x03988B40 LDP X20, X19, [X31 + 0x170]
	0x03988B44 LDP X22, X21, [X31 + 0x160]
	0x03988B48 LDP X29, X30, [X31 + 0x150]
	0x03988B4C ADD X31, X31, 0x180
	0x03988B50 RET
	0x03988B54 ADRP X0, 0x773000
	0x03988B58 LDR X0, [X0 + 0x760]
	0x03988B5C BL 0x1C16D08
	0x03988B60 BL 0x1C16F10
	0x03988B64 MOV X19, X0
	0x03988B68 ADRP X0, 0x7C8000
	0x03988B6C LDR X0, [X0 + 0x670]
	0x03988B70 BL 0x1C16D08
	0x03988B74 MOV X1, X0
	0x03988B78 MOV X0, X19
	0x03988B7C MOV X2, X31
	0x03988B80 BL 0x3316014
	0x03988B84 ADRP X0, 0x7C8000
	0x03988B88 LDR X0, [X0 + 0x678]
	0x03988B8C BL 0x1C16D08
	0x03988B90 MOV X1, X0
	0x03988B94 MOV X0, X19
	0x03988B98 BL 0x1C16DEC
	0x03988B9C BL 0x1C16F20
	0x03988BA0 STP X30, X23, [X31 - 0x30]!
	0x03988BA4 STP X22, X21, [X31 + 0x10]
	0x03988BA8 STP X20, X19, [X31 + 0x20]
	0x03988BAC ADRP X22, 0xA59000
	0x03988BB0 ADRP X23, 0x7C8000
	0x03988BB4 LDRB W8, [X22 + 0xA74]
	0x03988BB8 LDR X23, [X23 + 0x680]
	0x03988BBC MOV X19, X2
	0x03988BC0 MOV W21, W1
	0x03988BC4 MOV X20, X0
	0x03988BC8 TBNZ X8, 0x0, 0x3988BE0
	0x03988BCC ADRP X0, 0x7C8000
	0x03988BD0 LDR X0, [X0 + 0x680]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA5A000
	005 Move W8, [X20+2654]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x76C000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2654], W8
	016 Move X0, X19
	017 Move [X31+12], W31
	018 Call XROcclusionMesh.IsOcclusionMeshSupported, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {56}
	023 Move X0, [X19+16]
	024 Compare X0, 0
	025 JumpIfEqual {63}
	026 Call XRPass.get_viewCount, X0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add X1, X31, 12
	029 Move X0, X19
	030 Call XROcclusionMesh.TryGetOcclusionMeshCombinedHashCode, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {56}
	035 Move X8, 0x76C000
	036 Move X8, [X8+1432]
	037 Move X20, [X19+24]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move W20, [X31+12]
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {54}
	052 Move W8, [X19+40]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, X19
	055 Call XROcclusionMesh.CreateOcclusionMeshCombined, X0
	056 Move W20, W31
	057 Move [X19+24], X31
	058 Move [X19+40], W20
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Return 
	063 Call 0x1C17F20

Method: System.Boolean IsOcclusionMeshSupported()

Disassembly:
	0x03988438 LDR X0, [X0 + 0x500]
	0x0398843C BL 0x1C16CF4
	0x03988440 MOVZ W8, 0x1
	0x03988444 STRB W8, [X20 + 0xA66]
	0x03988448 MOV X0, X19
	0x0398844C BL 0x398632C
	0x03988450 CMP W0, 0x1
	0x03988454 B.LT 0x39884CC
	0x03988458 LDR X0, [X19 + 0x6C0]
	0x0398845C MOV X1, X31
	0x03988460 MOV X2, X31
	0x03988464 BL 0x33C5D2C
	0x03988468 TBZ X0, 0x0, 0x39884CC
	0x0398846C ADRP X19, 0x7C8000
	0x03988470 LDR X19, [X19 + 0x500]
	0x03988474 LDR X0, [X19]
	0x03988478 LDR W8, [X0 + 0xE0]
	0x0398847C CBNZ W8, 0x3988484
	0x03988480 BL 0x1C16DFC
	0x03988484 ADRP X20, 0xA59000
	0x03988488 LDRB W8, [X20 + 0xB39]
	0x0398848C CBNZ W8, 0x39884A4
	0x03988490 ADRP X0, 0x7C8000
	0x03988494 LDR X0, [X0 + 0x500]
	0x03988498 BL 0x1C16CF4
	0x0398849C MOVZ W8, 0x1
	0x039884A0 STRB W8, [X20 + 0xB39]
	0x039884A4 LDR X0, [X19]
	0x039884A8 LDR W8, [X0 + 0xE0]
	0x039884AC CBNZ W8, 0x39884B8
	0x039884B0 BL 0x1C16DFC
	0x039884B4 LDR X0, [X19]
	0x039884B8 LDR X8, [X0 + 0xB8]
	0x039884BC LDR W8, [X8 + 0x4C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xA5A000
	005 Move W8, [X20+2655]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x76C000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2655], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {42}
	019 Call XRPass.get_viewCount, X0
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, 0x76C000
	022 Move X8, [X8+1432]
	023 Move X19, [X19+32]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X2, X31
	034 Move X30, [X31+32]
	035 Call Object.op_Inequality, X0, X1
	036 Return X0
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move W0, W31
	040 Move X30, [X31+32]
	041 Return X0
	042 Call 0x1C17F20

Method: System.Boolean TryGetOcclusionMeshCombinedHashCode(out System.Int32 hashCode)

Disassembly:
	0x03988BD4 BL 0x1C16CF4
	0x03988BD8 MOVZ W8, 0x1
	0x03988BDC STRB W8, [X22 + 0xA74]
	0x03988BE0 LDR X0, [X23]
	0x03988BE4 LDR W8, [X0 + 0xE0]
	0x03988BE8 CBNZ W8, 0x3988BF0
	0x03988BEC BL 0x1C16DFC
	0x03988BF0 MOV X0, X19
	0x03988BF4 MOV X1, X31
	0x03988BF8 BL 0x3C51EAC
	0x03988BFC AND W1, W0, 0xFFFFFFEF
	0x03988C00 MOV X0, X19
	0x03988C04 MOV X2, X31
	0x03988C08 BL 0x3C51EB4
	0x03988C0C ADD X0, X20, 0x90
	0x03988C10 MOVZ W2, 0x630
	0x03988C14 MOV X1, X19
	0x03988C18 STR W21, [X20 + 0x28]
	0x03988C1C BL 0x3EB1B30
	0x03988C20 LDP X20, X19, [X31 + 0x20]
	0x03988C24 LDP X22, X21, [X31 + 0x10]
	0x03988C28 LDP X30, X23, [X31], #0x30
	0x03988C2C RET
	0x03988C30 STR X29, [X31 - 0x40]!
	0x03988C34 STP X30, X23, [X31 + 0x10]
	0x03988C38 STP X22, X21, [X31 + 0x20]
	0x03988C3C STP X20, X19, [X31 + 0x30]
	0x03988C40 SUB X31, X31, 0x200
	0x03988C44 ADRP X21, 0xA59000
	0x03988C48 LDRB W8, [X21 + 0xA76]
	0x03988C4C MOV X19, X1
	0x03988C50 MOV X20, X0
	0x03988C54 TBNZ X8, 0x0, 0x3988C84
	0x03988C58 ADRP X0, 0x7C8000
	0x03988C5C LDR X0, [X0 + 0x688]
	0x03988C60 BL 0x1C16CF4
	0x03988C64 ADRP X0, 0x7C8000
	0x03988C68 LDR X0, [X0 + 0x550]
	0x03988C6C BL 0x1C16CF4
	0x03988C70 ADRP X0, 0x7C8000
	0x03988C74 LDR X0, [X0 + 0x618]
	0x03988C78 BL 0x1C16CF4
	0x03988C7C MOVZ W8, 0x1
	0x03988C80 STRB W8, [X21 + 0xA76]
	0x03988C84 LDR X8, [X20 + 0x10]
	0x03988C88 CBZ X8, 0x3988DAC
	0x03988C8C ADRP X22, 0x7C8000
	0x03988C90 LDR X22, [X22 + 0x618]
	0x03988C94 LDR W21, [X8 + 0x18]
	0x03988C98 LDR X0, [X22]
	0x03988C9C LDR W9, [X0 + 0xE0]
	0x03988CA0 CBNZ W9, 0x3988CA8
	0x03988CA4 BL 0x1C16DFC
	0x03988CA8 ADRP X23, 0xA59000
	0x03988CAC LDRB W8, [X23 + 0xB3B]
	0x03988CB0 CBNZ W8, 0x3988CC8
	0x03988CB4 ADRP X0, 0x7C8000
	0x03988CB8 LDR X0, [X0 + 0x618]
	0x03988CBC BL 0x1C16CF4
	0x03988CC0 MOVZ W8, 0x1
	0x03988CC4 STRB W8, [X23 + 0xB3B]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xA5A000
	010 Move W8, [X21+2656]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x76C000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2656], W8
	022 Move W8, 17
	023 Move [X19], W8
	024 Move X0, [X20+16]
	025 Compare X0, 0
	026 JumpIfEqual {68}
	027 Move X24, 0x76C000
	028 Move X24, [X24+1432]
	029 Move W21, W31
	030 Move W25, 23
	031 Call XRPass.get_viewCount, X0
	032 Move W22, W0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, [X20+16]
	035 Compare X0, 0
	036 JumpIfEqual {68}
	037 Move W1, W21
	038 Call XRPass.GetOcclusionMesh, X0, X1
	039 Move X8, [X24]
	040 Move X23, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X23
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Inequality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {69}
	054 Compare X23, 0
	055 JumpIfEqual {68}
	056 Move X8, [X23]
	057 Move W22, [X19]
	058 Move X0, X23
	059 Move X9, [X8+344]
	060 Move X1, [X8+352]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 NotImplemented "Instruction MADD not yet implemented."
	063 Move [X19], W8
	064 Move X0, [X20+16]
	065 Add W21, W21, 1
	066 Compare X0, 0
	067 JumpIfNotEqual {31}
	068 Call 0x1C17F20
	069 Move [X19], W31
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 NotImplemented "Instruction CSET not yet implemented."
	078 Move X30, [X31+64]
	079 Move X25, [X31+72]
	080 Return X0

Method: System.Void CreateOcclusionMeshCombined()

Disassembly:
	0x03988CC8 LDR X0, [X22]
	0x03988CCC LDR W8, [X0 + 0xE0]
	0x03988CD0 CBNZ W8, 0x3988CDC
	0x03988CD4 BL 0x1C16DFC
	0x03988CD8 LDR X0, [X22]
	0x03988CDC LDR X8, [X0 + 0xB8]
	0x03988CE0 LDR W8, [X8]
	0x03988CE4 CMP W21, W8
	0x03988CE8 B.GE 0x3988DB0
	0x03988CEC LDR X20, [X20 + 0x10]
	0x03988CF0 ADD X0, X31, 0x8
	0x03988CF4 MOVZ W2, 0xA8
	0x03988CF8 MOV X1, X19
	0x03988CFC BL 0x3EB1AC0
	0x03988D00 CBZ X20, 0x3988DAC
	0x03988D04 ADRP X8, 0x7C8000
	0x03988D08 LDR X8, [X8 + 0x688]
	0x03988D0C ADD X0, X31, 0xB0
	0x03988D10 ADD X1, X31, 0x8
	0x03988D14 MOVZ W2, 0xA8
	0x03988D18 LDR X19, [X8]
	0x03988D1C BL 0x3EB1AC0
	0x03988D20 LDR W9, [X20 + 0x1C]
	0x03988D24 LDR X8, [X20 + 0x10]
	0x03988D28 ADD W9, W9, 0x1
	0x03988D2C STR W9, [X20 + 0x1C]
	0x03988D30 CBZ X8, 0x3988DAC
	0x03988D34 LDRSW X9, [X20 + 0x18]
	0x03988D38 LDR W10, [X8 + 0x18]
	0x03988D3C CMP W9, W10
	0x03988D40 B.CS 0x3988D68
	0x03988D44 MOVZ W11, 0xA8
	0x03988D48 MADD X8, X9, X11, X8
	0x03988D4C ADD W10, W9, 0x1
	0x03988D50 ADD X0, X8, 0x20
	0x03988D54 ADD X1, X31, 0xB0
	0x03988D58 MOVZ W2, 0xA8
	0x03988D5C STR W10, [X20 + 0x18]
	0x03988D60 BL 0x3EB1AC0
	0x03988D64 B 0x3988D94
	0x03988D68 LDR X8, [X19 + 0x20]
	0x03988D6C ADD X0, X31, 0x158
	0x03988D70 ADD X1, X31, 0xB0
	0x03988D74 MOVZ W2, 0xA8
	0x03988D78 LDR X8, [X8 + 0xC0]
	0x03988D7C LDR X19, [X8 + 0x70]
	0x03988D80 BL 0x3EB1AC0
	0x03988D84 ADD X1, X31, 0x158
	0x03988D88 MOV X0, X20
	0x03988D8C MOV X2, X19
	0x03988D90 BL 0x30E01A8
	0x03988D94 ADD X31, X31, 0x200
	0x03988D98 LDP X20, X19, [X31 + 0x30]
	0x03988D9C LDP X22, X21, [X31 + 0x20]
	0x03988DA0 LDP X30, X23, [X31 + 0x10]
	0x03988DA4 LDR X29, [X31], #0x40
	0x03988DA8 RET
	0x03988DAC BL 0x1C16F20
	0x03988DB0 ADRP X0, 0x7C8000
	0x03988DB4 LDR X0, [X0 + 0x618]
	0x03988DB8 BL 0x1C16D08
	0x03988DBC BL 0x19903D0
	0x03988DC0 MOV X0, X31
	0x03988DC4 BL 0x399AB34
	0x03988DC8 STR W0, [X31 + 0x158]
	0x03988DCC ADRP X0, 0x76B000
	0x03988DD0 LDR X0, [X0 + 0x758]
	0x03988DD4 BL 0x1C16D08
	0x03988DD8 ADD X1, X31, 0x158
	0x03988DDC BL 0x1C16E04
	0x03988DE0 MOV X19, X0
	0x03988DE4 ADRP X0, 0x7C8000
	0x03988DE8 LDR X0, [X0 + 0x690]
	0x03988DEC BL 0x1C16D08
	0x03988DF0 MOV X1, X19
	0x03988DF4 MOV X2, X31
	0x03988DF8 BL 0x321EFD0
	0x03988DFC MOV X19, X0
	0x03988E00 ADRP X0, 0x774000
	0x03988E04 LDR X0, [X0 + 0x758]
	0x03988E08 BL 0x1C16D08
	0x03988E0C BL 0x1C16F10
	0x03988E10 MOV X1, X19
	0x03988E14 MOV X2, X31
	0x03988E18 MOV X20, X0
	0x03988E1C BL 0x33802E4
	0x03988E20 ADRP X0, 0x7C8000
	0x03988E24 LDR X0, [X0 + 0x698]
	0x03988E28 BL 0x1C16D08
	0x03988E2C MOV X1, X0
	0x03988E30 MOV X0, X20
	0x03988E34 BL 0x1C16DEC
	0x03988E38 STR X30, [X31 - 0x20]!
	0x03988E3C STP X20, X19, [X31 + 0x10]
	0x03988E40 ADRP X20, 0xA59000
	0x03988E44 ADRP X19, 0x7C8000
	0x03988E48 LDRB W8, [X20 + 0xA77]
	0x03988E4C LDR X19, [X19 + 0x500]
	0x03988E50 TBNZ X8, 0x0, 0x3988E68
	0x03988E54 ADRP X0, 0x7C8000
	0x03988E58 LDR X0, [X0 + 0x500]
	0x03988E5C BL 0x1C16CF4
	0x03988E60 MOVZ W8, 0x1
	0x03988E64 STRB W8, [X20 + 0xA77]
	0x03988E68 LDR X0, [X19]
	0x03988E6C LDR W8, [X0 + 0xE0]
	0x03988E70 CBNZ W8, 0x3988E7C
	0x03988E74 BL 0x1C16DFC
	0x03988E78 LDR X0, [X19]
	0x03988E7C LDR X8, [X0 + 0xB8]
	0x03988E80 LDP X20, X19, [X31 + 0x10]
	0x03988E84 LDR X0, [X8 + 0x18]
	0x03988E88 LDR X30, [X31], #0x20
	0x03988E8C RET
	0x03988E90 STR X30, [X31 - 0x20]!
	0x03988E94 STP X20, X19, [X31 + 0x10]
	0x03988E98 ADRP X20, 0xA59000
	0x03988E9C ADRP X19, 0x7C8000
	0x03988EA0 LDRB W8, [X20 + 0xA79]
	0x03988EA4 LDR X19, [X19 + 0x500]
	0x03988EA8 TBNZ X8, 0x0, 0x3988ED8
	0x03988EAC ADRP X0, 0x775000
	0x03988EB0 LDR X0, [X0 + 0x170]
	0x03988EB4 BL 0x1C16CF4
	0x03988EB8 ADRP X0, 0x76F000
	0x03988EBC LDR X0, [X0 + 0xFD8]
	0x03988EC0 BL 0x1C16CF4
	0x03988EC4 ADRP X0, 0x7C8000
	0x03988EC8 LDR X0, [X0 + 0x500]
	0x03988ECC BL 0x1C16CF4
	0x03988ED0 MOVZ W8, 0x1
	0x03988ED4 STRB W8, [X20 + 0xA79]
	0x03988ED8 LDR X0, [X19]
	0x03988EDC LDR W8, [X0 + 0xE0]
	0x03988EE0 CBNZ W8, 0x3988EEC
	0x03988EE4 BL 0x1C16DFC
	0x03988EE8 LDR X0, [X19]
	0x03988EEC LDR X8, [X0 + 0xB8]
	0x03988EF0 LDR X0, [X8 + 0x18]
	0x03988EF4 CBZ X0, 0x3988F34
	0x03988EF8 MOV X1, X31
	0x03988EFC BL 0x3E65EEC
	0x03988F00 CBZ X0, 0x3988F34
	0x03988F04 MOV X1, X31
	0x03988F08 BL 0x3C10770
	0x03988F0C ADRP X8, 0x76F000
	0x03988F10 LDR X8, [X8 + 0xFD8]
	0x03988F14 AND W1, W0, 0x1
	0x03988F18 ADD X0, X31, 0xC
	0x03988F1C STRH W31, [X31 + 0xC]
	0x03988F20 LDR X2, [X8]
	0x03988F24 BL 0x242D570
	0x03988F28 LDRH W8, [X31 + 0xC]
	0x03988F2C CMP W8, 0xFF
	0x03988F30 CSET W0, HI
	0x03988F34 LDP X20, X19, [X31 + 0x10]
	0x03988F38 LDR X30, [X31], #0x20
	0x03988F3C RET
	0x03988F40 STR X30, [X31 - 0x20]!
	0x03988F44 STP X20, X19, [X31 + 0x10]
	0x03988F48 ADRP X20, 0xA59000
	0x03988F4C ADRP X19, 0x7C8000
	0x03988F50 LDRB W8, [X20 + 0xA7A]
	0x03988F54 LDR X19, [X19 + 0x500]
	0x03988F58 TBNZ X8, 0x0, 0x3988F70
	0x03988F5C ADRP X0, 0x7C8000
	0x03988F60 LDR X0, [X0 + 0x500]
	0x03988F64 BL 0x1C16CF4
	0x03988F68 MOVZ W8, 0x1
	0x03988F6C STRB W8, [X20 + 0xA7A]
	0x03988F70 LDR X0, [X19]
	0x03988F74 LDR W8, [X0 + 0xE0]
	0x03988F78 CBNZ W8, 0x3988F84
	0x03988F7C BL 0x1C16DFC
	0x03988F80 LDR X0, [X19]
	0x03988F84 LDR X8, [X0 + 0xB8]
	0x03988F88 LDP X20, X19, [X31 + 0x10]
	0x03988F8C LDRB W0, [X8 + 0x48]
	0x03988F90 LDR X30, [X31], #0x20
	0x03988F94 RET
	0x03988F98 STP X30, X21, [X31 - 0x20]!
	0x03988F9C STP X20, X19, [X31 + 0x10]
	0x03988FA0 ADRP X21, 0xA59000
	0x03988FA4 ADRP X20, 0x7C8000
	0x03988FA8 LDRB W8, [X21 + 0xA7B]
	0x03988FAC LDR X20, [X20 + 0x500]
	0x03988FB0 MOV W19, W0
	0x03988FB4 TBNZ X8, 0x0, 0x3988FCC
	0x03988FB8 ADRP X0, 0x7C8000
	0x03988FBC LDR X0, [X0 + 0x500]
	0x03988FC0 BL 0x1C16CF4
	0x03988FC4 MOVZ W8, 0x1
	0x03988FC8 STRB W8, [X21 + 0xA7B]
	0x03988FCC LDR X0, [X20]
	0x03988FD0 LDR W8, [X0 + 0xE0]
	0x03988FD4 CBNZ W8, 0x3988FE0
	0x03988FD8 BL 0x1C16DFC
	0x03988FDC LDR X0, [X20]
	0x03988FE0 LDR X8, [X0 + 0xB8]
	0x03988FE4 AND W9, W19, 0x1
	0x03988FE8 LDP X20, X19, [X31 + 0x10]
	0x03988FEC STRB W9, [X8 + 0x48]
	0x03988FF0 LDP X30, X21, [X31], #0x20
	0x03988FF4 RET
	0x03988FF8 STR X30, [X31 - 0x20]!
	0x03988FFC STP X20, X19, [X31 + 0x10]
	0x03989000 ADRP X20, 0xA58000
	0x03989004 ADRP X19, 0x7C7000

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0xA5A000
	015 Move X19, 0x794000
	016 Move W8, [X20+2657]
	017 Move X19, [X19+2296]
	018 Move X26, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x794000
	024 Move X0, [X0+2296]
	025 Call 0x1C17CF4
	026 Move X0, 0x773000
	027 Move X0, [X0+1792]
	028 Call 0x1C17CF4
	029 Move X0, 0x79C000
	030 Move X0, [X0+2256]
	031 Call 0x1C17CF4
	032 Move X0, 0x76E000
	033 Move X0, [X0+2480]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2657], W8
	037 Move X0, [X19]
	038 Move X19, 0x773000
	039 Move X20, [X26+24]
	040 Move W8, [X0+224]
	041 Move X19, [X19+1792]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X31
	047 Call CoreUtils.Destroy, X0
	048 Move X0, [X19]
	049 Call 0x1C17F10
	050 Move X1, X31
	051 Move X20, X0
	052 Call Mesh..ctor, X0
	053 Move [X26+24], X20
	054 Compare X20, 0
	055 JumpIfEqual {240}
	056 Move X0, X20
	057 Move W1, W31
	058 Move X2, X31
	059 Call Mesh.set_indexFormat, X0, X1
	060 Move X0, [X26+16]
	061 Compare X0, 0
	062 JumpIfEqual {240}
	063 Move X25, 0x76E000
	064 Move X24, 0x79C000
	065 Move X25, [X25+2480]
	066 Move X24, [X24+2256]
	067 Move W21, W31
	068 Move W20, W31
	069 Move W22, W31
	070 Call XRPass.get_viewCount, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X0, [X26+16]
	073 Compare X0, 0
	074 JumpIfEqual {240}
	075 Move W1, W22
	076 Call XRPass.GetOcclusionMesh, X0, X1
	077 Compare X0, 0
	078 JumpIfEqual {240}
	079 Move X1, X31
	080 Move X23, X0
	081 Call Mesh.get_vertexCount, X0
	082 Add W21, W0, W21
	083 Move X0, X23
	084 Move W1, W31
	085 Move X2, X31
	086 Call Mesh.GetIndexCount, X0, X1
	087 Move W8, W0
	088 Move X0, [X26+16]
	089 Add W20, W8, W20
	090 Add W22, W22, 1
	091 Compare X0, 0
	092 JumpIfNotEqual {70}
	093 Move X0, [X25]
	094 Move W1, W21
	095 Call 0x1C17D6C
	096 Move X8, [X24]
	097 Move X21, X0
	098 Move W1, W20
	099 Move X0, X8
	100 Call 0x1C17D6C
	101 Move X8, [X26+16]
	102 Compare X8, 0
	103 JumpIfEqual {240}
	104 Move X20, X0
	105 Move W22, W31
	106 Move W19, W31
	107 Move W23, W31
	108 Move X27, 1
	109 Move W28, 12
	110 Move X0, X8
	111 Call XRPass.get_viewCount, X0
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, [X26+16]
	114 Compare X0, 0
	115 JumpIfEqual {240}
	116 Move W1, W23
	117 Move [X31+12], W23
	118 Call XRPass.GetOcclusionMesh, X0, X1
	119 Compare X0, 0
	120 JumpIfEqual {240}
	121 Move W1, W31
	122 Move X2, X31
	123 Move X24, X0
	124 Move [X31+8], W19
	125 Call Mesh.GetIndices, X0, X1
	126 Move X23, X0
	127 Move X0, X24
	128 Move X1, X31
	129 Call Mesh.get_vertices, X0
	130 Compare X0, 0
	131 JumpIfEqual {240}
	132 Move X1, X21
	133 Move W2, W22
	134 Move X3, X31
	135 Move X25, X26
	136 Call Array.CopyTo, X0, X1, X2
	137 Move X0, X24
	138 Move X1, X31
	139 Call Mesh.get_vertices, X0
	140 Compare X0, 0
	141 JumpIfEqual {240}
	142 Move W8, [X31+12]
	143 Move W9, W22
	144 Move X29, X31
	145 Subtract X19, X9, 1
	146 NotImplemented "Instruction SCVTF not yet implemented."
	147 Move X8, X9
	148 ShiftRight X8, 32
	149 And X8, X8, 0x7FFFFFFF
	150 NotImplemented "Instruction LDRSW not yet implemented."
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Compare X21, 0
	153 JumpIfEqual {240}
	154 Move W9, [X21+24]
	155 Add X29, X29, 1
	156 Add X10, X19, X29
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Add X26, X8, X27
	159 NotImplemented "Instruction SBFM not yet implemented."
	160 NotImplemented "Instruction MADD not yet implemented."
	161 Move X0, X24
	162 Move X1, X31
	163 Move [X8+40], S8
	164 Call Mesh.get_vertices, X0
	165 Move X8, X26
	166 Compare X0, 0
	167 JumpIfNotEqual {150}
	168 Compare X23, 0
	169 JumpIfEqual {240}
	170 Move W8, [X23+24]
	171 Move W19, [X31+8]
	172 Move X26, X25
	173 Move X9, X8
	174 ShiftRight X9, 32
	175 And X9, X9, 0x7FFFFFFF
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move W9, W19
	178 Move X10, W8
	179 Move X11, X9
	180 ShiftRight X11, 32
	181 And X11, X11, 0x7FFFFFFF
	182 Add X12, X23, 32
	183 Compare X8, 0
	184 JumpIfEqual {241}
	185 Compare X20, 0
	186 JumpIfEqual {240}
	187 Move W13, [X20+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move W13, [X12+4]
	190 Add X14, X20, X11
	191 Subtract X10, X10, 1
	192 Add X11, X11, X27
	193 Add X9, X9, 1
	194 Add W13, W13, W22
	195 Subtract X8, X8, 1
	196 NotImplemented "Instruction STRH not yet implemented."
	197 Compare X10, 0
	198 JumpIfNotEqual {183}
	199 Move X0, X24
	200 Move X1, X31
	201 Call Mesh.get_vertexCount, X0
	202 Move W9, [X23+24]
	203 Move W23, [X31+12]
	204 Move X8, [X26+16]
	205 Add W22, W0, W22
	206 Add W19, W19, W9
	207 Add W23, W23, 1
	208 Compare X8, 0
	209 JumpIfNotEqual {110}
	210 Move X0, [X26+24]
	211 Compare X0, 0
	212 JumpIfEqual {240}
	213 Move X1, X21
	214 Move X2, X31
	215 Call Mesh.set_vertices, X0, X1
	216 Move X0, [X26+24]
	217 Compare X0, 0
	218 JumpIfEqual {240}
	219 Move X1, X20
	220 Move X20, [X31+96]
	221 Move X19, [X31+104]
	222 Move X22, [X31+80]
	223 Move X21, [X31+88]
	224 Move X24, [X31+64]
	225 Move X23, [X31+72]
	226 Move X26, [X31+48]
	227 Move X25, [X31+56]
	228 Move X28, [X31+32]
	229 Move X27, [X31+40]
	230 Move X29, [X31+16]
	231 Move X30, [X31+24]
	232 Move W4, 1
	233 Move W2, W31
	234 Move W3, W31
	235 Move W5, W31
	236 Move X6, X31
	237 Move V8, [X31+112]
	238 Call Mesh.SetIndices, X0, X1, X2, X3, X4, X5
	239 Return 
	240 Call 0x1C17F20
	241 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x03989008 LDRB W8, [X20 + 0xA7C]
	0x0398900C B 0x3EB16F4
	0x03989010 TBNZ X8, 0x0, 0x3989028
	0x03989014 ADRP X0, 0x7C7000
	0x03989018 LDR X0, [X0 + 0x500]
	0x0398901C BL 0x1C16CF4
	0x03989020 MOVZ W8, 0x1
	0x03989024 STRB W8, [X20 + 0xA7C]
	0x03989028 LDR X0, [X19]
	0x0398902C LDR W8, [X0 + 0xE0]
	0x03989030 CBNZ W8, 0x398903C
	0x03989034 BL 0x1C16DFC
	0x03989038 LDR X0, [X19]
	0x0398903C LDR X8, [X0 + 0xB8]
	0x03989040 LDP X20, X19, [X31 + 0x10]
	0x03989044 LDR W0, [X8 + 0x4C]
	0x03989048 LDR X30, [X31], #0x20
	0x0398904C RET
	0x03989050 STP X30, X21, [X31 - 0x20]!
	0x03989054 STP X20, X19, [X31 + 0x10]
	0x03989058 ADRP X21, 0xA58000
	0x0398905C ADRP X20, 0x7C7000
	0x03989060 LDRB W8, [X21 + 0xA7D]
	0x03989064 LDR X20, [X20 + 0x500]
	0x03989068 MOV W19, W0
	0x0398906C TBNZ X8, 0x0, 0x3989084
	0x03989070 ADRP X0, 0x7C7000
	0x03989074 LDR X0, [X0 + 0x500]
	0x03989078 BL 0x1C16CF4
	0x0398907C MOVZ W8, 0x1
	0x03989080 STRB W8, [X21 + 0xA7D]
	0x03989084 LDR X0, [X20]
	0x03989088 LDR W8, [X0 + 0xE0]
	0x0398908C CBNZ W8, 0x3989098
	0x03989090 BL 0x1C16DFC
	0x03989094 LDR X0, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xA59000
	007 Move X22, 0x7C8000
	008 Move X19, 0x7C8000
	009 Move X20, 0x7C8000
	010 Move W8, [X21+2658]
	011 Move X22, [X22+1432]
	012 Move X19, [X19+1584]
	013 Move X20, [X20+1528]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x7C8000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x7C8000
	022 Move X0, [X0+1528]
	023 Call 0x1C17CF4
	024 Move X0, 0x7C8000
	025 Move X0, [X0+1584]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2658], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X2, X31
	033 Move X19, X0
	034 Call ProfilingSampler..ctor, X0, X1
	035 Move X8, [X20]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X8, [X8+184]
	039 Move [X8], X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+48]
	043 Return 

