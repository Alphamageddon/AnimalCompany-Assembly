Type: UnityEngine.LightAnchor

Method: System.Single get_yaw()

Disassembly:
	0x039839FC LDR V1, [X31 + 0x94]
	0x03983A00 MOV V9.16B, V4.16B

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_yaw(System.Single value)

Disassembly:
	0x03983A04 MOV V4.16B, V0.16B
	0x03983A08 MOV X19, X0
	0x03983A0C STP S1, S6, [X31 + 0x14]
	0x03983A10 LDR V1, [X31 + 0x90]
	0x03983A14 LDR V6, [X31 + 0x88]
	0x03983A18 MOV V8.16B, V5.16B
	0x03983A1C STP S4, S2, [X31 + 0x4]
	0x03983A20 STP S3, S1, [X31 + 0xC]
	0x03983A24 LDP S13, S1, [X31 + 0x80]
	0x03983A28 STP S1, S6, [X31 + 0x68]
	0x03983A2C LDR V1, [X0 + 0x3C]
	0x03983A30 MOV X0, X31
	0x03983A34 MOV V0.16B, V1.16B
	0x03983A38 MOV V1.16B, V4.16B

ISIL:
	001 Move W8, 0x43340000
	002 Move W9, 0x43B40000
	003 Move S1, W8
	004 Add S0, S0, S1
	005 Move S1, W9
	006 NotImplemented "Instruction FDIV not yet implemented."
	007 NotImplemented "Instruction FRINTM not yet implemented."
	008 Multiply S1, S2, S1
	009 Move W8, 0xC3340000
	010 Subtract S0, S0, S1
	011 Move S1, W8
	012 Add S0, S0, S1
	013 Move [X0+60], S0
	014 Return 

Method: System.Single get_pitch()

Disassembly:
	0x03983A70 FMUL S16, S15, S1
	0x03983A74 FMUL S17, S12, S3

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Void set_pitch(System.Single value)

Disassembly:
	0x03983A78 FMUL S18, S14, S0
	0x03983A7C FADD S4, S4, S5
	0x03983A80 FADD S5, S16, S17
	0x03983A84 FMUL S6, S12, S2
	0x03983A88 FMUL S19, S11, S2
	0x03983A8C FMUL S21, S11, S0
	0x03983A90 FMUL S22, S15, S2
	0x03983A94 FMUL S23, S15, S3
	0x03983A98 FMUL S3, S14, S3
	0x03983A9C FADD S5, S18, S5
	0x03983AA0 FMUL S7, S14, S1
	0x03983AA4 FMUL S20, S11, S1
	0x03983AA8 FMUL S1, S12, S1
	0x03983AAC FADD S3, S22, S3

ISIL:
	001 Move W8, 0x43340000
	002 Move W9, 0x43B40000
	003 Move S1, W8
	004 Add S0, S0, S1
	005 Move S1, W9
	006 NotImplemented "Instruction FDIV not yet implemented."
	007 NotImplemented "Instruction FRINTM not yet implemented."
	008 Multiply S1, S2, S1
	009 Move W8, 0xC3340000
	010 Subtract S0, S0, S1
	011 Move S1, W8
	012 Add S0, S0, S1
	013 Move [X0+64], S0
	014 Return 

Method: System.Single get_roll()

Disassembly:
	0x03983AB0 FSUB S16, S23, S21
	0x03983AB4 FADD S4, S6, S4

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Void set_roll(System.Single value)

Disassembly:
	0x03983AB8 FSUB S8, S5, S19
	0x03983ABC LDP S5, S6, [X31 + 0x68]
	0x03983AC0 FMUL S0, S12, S0
	0x03983AC4 FMUL S2, S14, S2
	0x03983AC8 FADD S3, S20, S3
	0x03983ACC FSUB S1, S16, S1
	0x03983AD0 FSUB S9, S4, S7
	0x03983AD4 FSUB S15, S3, S0
	0x03983AD8 FSUB S14, S1, S2
	0x03983ADC MOV V0.16B, V9.16B
	0x03983AE0 MOV V1.16B, V8.16B
	0x03983AE4 MOV V2.16B, V15.16B
	0x03983AE8 MOV V3.16B, V14.16B
	0x03983AEC MOV V4.16B, V13.16B

ISIL:
	001 Move W8, 0x43340000
	002 Move W9, 0x43B40000
	003 Move S1, W8
	004 Add S0, S0, S1
	005 Move S1, W9
	006 NotImplemented "Instruction FDIV not yet implemented."
	007 NotImplemented "Instruction FRINTM not yet implemented."
	008 Multiply S1, S2, S1
	009 Move W8, 0xC3340000
	010 Subtract S0, S0, S1
	011 Move S1, W8
	012 Add S0, S0, S1
	013 Move [X0+68], S0
	014 Return 

Method: System.Single get_distance()

Disassembly:
	0x03983AF0 MOV X0, X31
	0x03983AF4 STR S13, [X31 + 0x1C]

ISIL:
	001 Move V0, [X0+32]
	002 Return V0

Method: System.Void set_distance(System.Single value)

Disassembly:
	0x03983AF8 BL 0x3C2A9FC
	0x03983AFC LDR V13, [X19 + 0x20]
	0x03983B00 MOV X0, X19
	0x03983B04 MOV X1, X31
	0x03983B08 MOV V10.16B, V0.16B
	0x03983B0C MOV V11.16B, V1.16B
	0x03983B10 MOV V12.16B, V2.16B
	0x03983B14 BL 0x3C32E90

ISIL:
	001 Move X8, -48857088
	002 Move V1, [X8+396]
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FMIN not yet implemented."
	005 Move S1, W31
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Move [X0+32], S0
	008 Return 

Method: UnityEngine.LightAnchor/UpDirection get_frameSpace()

Disassembly:
	0x03983B18 CBZ X0, 0x3983CA8
	0x03983B1C LDR V2, [X31 + 0x18]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_frameSpace(UnityEngine.LightAnchor/UpDirection value)

Disassembly:
	0x03983B20 FMUL S0, S12, S13
	0x03983B24 FMUL S1, S11, S13

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: UnityEngine.Vector3 get_anchorPosition()

Disassembly:
	0x03983B28 FMUL S3, S10, S13
	0x03983B2C FADD S2, S2, S0
	0x03983B30 LDR V0, [X31 + 0x14]
	0x03983B34 MOV X1, X31
	0x03983B38 FADD S1, S0, S1
	0x03983B3C LDR V0, [X31 + 0x10]
	0x03983B40 FADD S0, S0, S3
	0x03983B44 BL 0x3C3F62C
	0x03983B48 LDR V4, [X31 + 0x1C]
	0x03983B4C LDP S5, S6, [X31 + 0x68]
	0x03983B50 MOV V0.16B, V9.16B
	0x03983B54 MOV V1.16B, V8.16B
	0x03983B58 MOV V2.16B, V15.16B
	0x03983B5C MOV V3.16B, V14.16B
	0x03983B60 MOV X0, X31
	0x03983B64 BL 0x3C2A9FC
	0x03983B68 ADRP X20, 0xA55000
	0x03983B6C LDRB W8, [X20 + 0x785]
	0x03983B70 MOV V11.16B, V0.16B
	0x03983B74 MOV V12.16B, V1.16B
	0x03983B78 MOV V13.16B, V2.16B
	0x03983B7C CBNZ W8, 0x3983B94
	0x03983B80 ADRP X0, 0x770000
	0x03983B84 LDR X0, [X0 + 0x5A8]
	0x03983B88 BL 0x1C16CF4
	0x03983B8C MOVZ W8, 0x1
	0x03983B90 STRB W8, [X20 + 0x785]
	0x03983B94 ADRP X8, 0x770000
	0x03983B98 LDR X8, [X8 + 0x5A8]
	0x03983B9C LDR X0, [X8]
	0x03983BA0 LDR W8, [X0 + 0xE0]
	0x03983BA4 CBNZ W8, 0x3983BAC
	0x03983BA8 BL 0x1C16DFC
	0x03983BAC FMUL S0, S11, S11
	0x03983BB0 FMUL S1, S12, S12
	0x03983BB4 ADRP X8, 0xFFFFFFFFFD167000
	0x03983BB8 FADD S0, S0, S1
	0x03983BBC LDR V1, [X8 + 0x17C]
	0x03983BC0 FMUL S2, S13, S13
	0x03983BC4 FADD S0, S2, S0
	0x03983BC8 FSQRT S2, S0
	0x03983BCC FCMP S2, S1
	0x03983BD0 B.LE 0x3983BE4
	0x03983BD4 FDIV S0, S11, S2
	0x03983BD8 FDIV S1, S12, S2
	0x03983BDC FDIV S2, S13, S2
	0x03983BE0 B 0x3983C1C
	0x03983BE4 ADRP X20, 0xA55000
	0x03983BE8 LDRB W8, [X20 + 0x783]
	0x03983BEC CBNZ W8, 0x3983C04
	0x03983BF0 ADRP X0, 0x770000
	0x03983BF4 LDR X0, [X0 + 0x5A0]
	0x03983BF8 BL 0x1C16CF4
	0x03983BFC MOVZ W8, 0x1
	0x03983C00 STRB W8, [X20 + 0x783]
	0x03983C04 ADRP X8, 0x770000
	0x03983C08 LDR X8, [X8 + 0x5A0]
	0x03983C0C LDR X8, [X8]
	0x03983C10 LDR X8, [X8 + 0xB8]
	0x03983C14 LDP S0, S1, [X8]
	0x03983C18 LDR V2, [X8 + 0x8]
	0x03983C1C LDP S4, S5, [X31 + 0x8]
	0x03983C20 LDR V3, [X31 + 0x4]
	0x03983C24 FNEG S0, S0
	0x03983C28 FNEG S1, S1
	0x03983C2C FNEG S2, S2
	0x03983C30 MOV X0, X31

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xA5F000
	009 Move X20, 0x771000
	010 Move W8, [X21+2637]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x771000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2637], W8
	022 Move X0, [X20]
	023 Move X20, [X19+40]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {52}
	036 Move X0, [X19+40]
	037 Compare X0, 0
	038 JumpIfEqual {84}
	039 Move X1, X31
	040 Call Transform.get_position, X0
	041 Move X0, [X19+40]
	042 Compare X0, 0
	043 JumpIfEqual {84}
	044 Move V8, V0
	045 Move V9, V1
	046 Move V10, V2
	047 Move S1, [X19+52]
	048 Move S2, [X19+56]
	049 Move V0, [X19+48]
	050 Move X1, X31
	051 Call Transform.TransformDirection, X0, X1
	052 Move X0, X19
	053 Move X1, X31
	054 Call Component.get_transform, X0
	055 Compare X0, 0
	056 JumpIfEqual {84}
	057 Move X1, X31
	058 Call Transform.get_position, X0
	059 Move X0, X19
	060 Move X1, X31
	061 Move V8, V0
	062 Move V9, V1
	063 Move V10, V2
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {84}
	067 Move X1, X31
	068 Call Transform.get_forward, X0
	069 Move V3, [X19+32]
	070 Multiply S0, S0, S3
	071 Multiply S1, S1, S3
	072 Multiply S2, S2, S3
	073 Add S0, S8, S0
	074 Add S1, S9, S1
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Move D9, [X31+16]
	080 Move D8, [X31+24]
	081 Add S2, S10, S2
	082 Move V10, [X31+64]
	083 Return X0
	084 Call 0x1C17F20

Method: UnityEngine.Transform get_anchorPositionOverride()

Disassembly:
	0x03983C34 BL 0x3C2A810
	0x03983C38 MOV X0, X31

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_anchorPositionOverride(UnityEngine.Transform value)

Disassembly:
	0x03983C3C BL 0x3C2A60C
	0x03983C40 ADRP X8, 0xFFFFFFFFFD167000

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: UnityEngine.Vector3 get_anchorPositionOffset()

Disassembly:
	0x03983C44 LDR V3, [X8 + 0x448]
	0x03983C48 MOV X0, X31
	0x03983C4C FMUL S0, S0, S3

ISIL:
	001 Move S0, [X0+48]
	002 Move S1, [X0+52]
	003 Move V2, [X0+56]
	004 Return X0

Method: System.Void set_anchorPositionOffset(UnityEngine.Vector3 value)

Disassembly:
	0x03983C50 FMUL S1, S1, S3
	0x03983C54 FMUL S2, S2, S3
	0x03983C58 BL 0x3C2AB94

ISIL:
	001 Move [X0+48], S0
	002 Move [X0+56], S1
	003 Move [X0+56], S2
	004 Return 

Method: System.Single NormalizeAngleDegree(System.Single angle)

Disassembly:
	0x03983A3C BL 0x3C2A758
	0x03983A40 MOV V11.16B, V0.16B
	0x03983A44 LDR V0, [X19 + 0x40]
	0x03983A48 MOV V12.16B, V1.16B
	0x03983A4C MOV V14.16B, V2.16B
	0x03983A50 MOV V15.16B, V3.16B
	0x03983A54 MOV V1.16B, V10.16B
	0x03983A58 MOV V2.16B, V9.16B
	0x03983A5C MOV V3.16B, V8.16B
	0x03983A60 MOV X0, X31
	0x03983A64 BL 0x3C2A758
	0x03983A68 FMUL S4, S15, S0
	0x03983A6C FMUL S5, S11, S3

ISIL:
	001 Move W8, 0x43340000
	002 Move W9, 0x43B40000
	003 Move S1, W8
	004 Add S0, S0, S1
	005 Move S1, W9
	006 NotImplemented "Instruction FDIV not yet implemented."
	007 NotImplemented "Instruction FRINTM not yet implemented."
	008 Multiply S1, S2, S1
	009 Move W8, 0xC3340000
	010 Subtract S0, S0, S1
	011 Move S1, W8
	012 Add S0, S0, S1
	013 Return V0

Method: System.Void SynchronizeOnTransform(UnityEngine.Camera camera)

Disassembly:
	0x03983C5C LDR V8, [X19 + 0x44]
	0x03983C60 MOV X0, X19
	0x03983C64 MOV X1, X31
	0x03983C68 MOV V9.16B, V0.16B
	0x03983C6C MOV V10.16B, V1.16B
	0x03983C70 BL 0x3C32E90
	0x03983C74 CBZ X0, 0x3983CA8
	0x03983C78 MOV V0.16B, V9.16B
	0x03983C7C MOV V1.16B, V10.16B
	0x03983C80 MOV V2.16B, V8.16B
	0x03983C84 LDP X20, X19, [X31 + 0x70]
	0x03983C88 LDR X30, [X31 + 0x60]
	0x03983C8C LDP D9, D8, [X31 + 0x50]
	0x03983C90 LDP D11, D10, [X31 + 0x40]
	0x03983C94 LDP D13, D12, [X31 + 0x30]
	0x03983C98 LDP D15, D14, [X31 + 0x20]
	0x03983C9C MOV X1, X31
	0x03983CA0 ADD X31, X31, 0x80
	0x03983CA4 B 0x3C3F77C
	0x03983CA8 BL 0x1C16F20
	0x03983CAC STP X30, X21, [X31 - 0x20]!
	0x03983CB0 STP X20, X19, [X31 + 0x10]
	0x03983CB4 ADRP X20, 0xA5E000
	0x03983CB8 ADRP X21, 0x770000
	0x03983CBC LDRB W8, [X20 + 0xA4E]
	0x03983CC0 LDR X21, [X21 + 0x598]
	0x03983CC4 MOV X19, X0
	0x03983CC8 TBNZ X8, 0x0, 0x3983CE0
	0x03983CCC ADRP X0, 0x770000
	0x03983CD0 LDR X0, [X0 + 0x598]
	0x03983CD4 BL 0x1C16CF4
	0x03983CD8 MOVZ W8, 0x1
	0x03983CDC STRB W8, [X20 + 0xA4E]
	0x03983CE0 LDR X0, [X21]
	0x03983CE4 LDR X20, [X19 + 0x28]
	0x03983CE8 LDR W8, [X0 + 0xE0]
	0x03983CEC CBNZ W8, 0x3983CF4
	0x03983CF0 BL 0x1C16DFC
	0x03983CF4 MOV X0, X20
	0x03983CF8 MOV X1, X31
	0x03983CFC MOV X2, X31
	0x03983D00 BL 0x3C3883C
	0x03983D04 TBNZ X0, 0x0, 0x3983D3C
	0x03983D08 MOV X0, X31
	0x03983D0C BL 0x3C047F8
	0x03983D10 LDR X8, [X21]
	0x03983D14 MOV X20, X0
	0x03983D18 LDR W9, [X8 + 0xE0]
	0x03983D1C CBNZ W9, 0x3983D28
	0x03983D20 MOV X0, X8
	0x03983D24 BL 0x1C16DFC
	0x03983D28 MOV X0, X20
	0x03983D2C MOV X1, X31
	0x03983D30 MOV X2, X31
	0x03983D34 BL 0x3C3883C
	0x03983D38 TBZ X0, 0x0, 0x3983D48
	0x03983D3C LDP X20, X19, [X31 + 0x10]
	0x03983D40 LDP X30, X21, [X31], #0x20
	0x03983D44 RET
	0x03983D48 LDR X0, [X19 + 0x28]
	0x03983D4C CBZ X0, 0x3983DA8
	0x03983D50 MOV X1, X31
	0x03983D54 BL 0x3C40F8C
	0x03983D58 TBNZ X0, 0x0, 0x3983D80
	0x03983D5C MOV X0, X31
	0x03983D60 BL 0x3C047F8
	0x03983D64 CBZ X0, 0x3983DA8
	0x03983D68 MOV X1, X31
	0x03983D6C BL 0x3C32E90
	0x03983D70 CBZ X0, 0x3983DA8
	0x03983D74 MOV X1, X31
	0x03983D78 BL 0x3C40F8C
	0x03983D7C TBZ X0, 0x0, 0x3983D3C
	0x03983D80 MOV X0, X31
	0x03983D84 BL 0x3C047F8
	0x03983D88 MOV X20, X0
	0x03983D8C MOV X0, X19
	0x03983D90 BL 0x3982B28
	0x03983D94 MOV X0, X19
	0x03983D98 MOV X1, X20
	0x03983D9C LDP X20, X19, [X31 + 0x10]
	0x03983DA0 LDP X30, X21, [X31], #0x20
	0x03983DA4 B 0x3983968
	0x03983DA8 BL 0x1C16F20
	0x03983DAC SUB X31, X31, 0x50
	0x03983DB0 STP X30, X21, [X31 + 0x30]
	0x03983DB4 STP X20, X19, [X31 + 0x40]
	0x03983DB8 ADRP X21, 0xA5E000
	0x03983DBC ADRP X20, 0x770000
	0x03983DC0 LDRB W8, [X21 + 0xA4F]
	0x03983DC4 LDR X20, [X20 + 0x598]
	0x03983DC8 MOV X19, X0
	0x03983DCC TBNZ X8, 0x0, 0x3983DE4
	0x03983DD0 ADRP X0, 0x770000
	0x03983DD4 LDR X0, [X0 + 0x598]
	0x03983DD8 BL 0x1C16CF4
	0x03983DDC MOVZ W8, 0x1
	0x03983DE0 STRB W8, [X21 + 0xA4F]
	0x03983DE4 MOV X0, X31
	0x03983DE8 BL 0x3C047F8
	0x03983DEC LDR X8, [X20]
	0x03983DF0 MOV X20, X0
	0x03983DF4 LDR W9, [X8 + 0xE0]
	0x03983DF8 CBNZ W9, 0x3983E04
	0x03983DFC MOV X0, X8
	0x03983E00 BL 0x1C16DFC
	0x03983E04 MOV X0, X20
	0x03983E08 MOV X1, X31
	0x03983E0C MOV X2, X31
	0x03983E10 BL 0x3C3883C
	0x03983E14 TBNZ X0, 0x0, 0x3983E68
	0x03983E18 MOV X0, X19
	0x03983E1C BL 0x3982B28
	0x03983E20 ADD X8, X31, 0x8
	0x03983E24 MOV X0, X19
	0x03983E28 MOV X1, X20
	0x03983E2C BL 0x3983134
	0x03983E30 MOV X0, X19
	0x03983E34 MOV X1, X31
	0x03983E38 BL 0x3C32E90
	0x03983E3C CBZ X0, 0x3983E78
	0x03983E40 MOV X1, X31
	0x03983E44 BL 0x3C3F58C
	0x03983E48 ADRP X19, 0xA55000
	0x03983E4C LDRB W8, [X19 + 0xE39]
	0x03983E50 CBNZ W8, 0x3983E68
	0x03983E54 ADRP X0, 0x777000
	0x03983E58 LDR X0, [X0 + 0x4B8]
	0x03983E5C BL 0x1C16CF4
	0x03983E60 MOVZ W8, 0x1
	0x03983E64 STRB W8, [X19 + 0xE39]
	0x03983E68 LDP X20, X19, [X31 + 0x40]
	0x03983E6C LDP X30, X21, [X31 + 0x30]
	0x03983E70 ADD X31, X31, 0x50
	0x03983E74 RET
	0x03983E78 BL 0x1C16F20
	0x03983E7C MOV X1, X31
	0x03983E80 B 0x3C36C30
	0x03983E84 STP X29, X30, [X31 - 0x40]!
	0x03983E88 STP X24, X23, [X31 + 0x10]
	0x03983E8C STP X22, X21, [X31 + 0x20]
	0x03983E90 STP X20, X19, [X31 + 0x30]
	0x03983E94 SUB X31, X31, 0x680
	0x03983E98 ADRP X24, 0xA5E000
	0x03983E9C ADRP X23, 0x7CD000
	0x03983EA0 LDRB W8, [X24 + 0xA50]
	0x03983EA4 LDR X23, [X23 + 0x4A8]
	0x03983EA8 MOV W19, W3
	0x03983EAC MOV W20, W2
	0x03983EB0 MOV X22, X1
	0x03983EB4 MOV X21, X0
	0x03983EB8 TBNZ X8, 0x0, 0x3983ED0
	0x03983EBC ADRP X0, 0x7CD000
	0x03983EC0 LDR X0, [X0 + 0x4A8]
	0x03983EC4 BL 0x1C16CF4
	0x03983EC8 MOVZ W8, 0x1
	0x03983ECC STRB W8, [X24 + 0xA50]
	0x03983ED0 LDR X0, [X23]
	0x03983ED4 LDR W8, [X0 + 0xE0]
	0x03983ED8 CBNZ W8, 0x3983EE4
	0x03983EDC BL 0x1C16DFC
	0x03983EE0 LDR X0, [X23]
	0x03983EE4 LDR X8, [X0 + 0xB8]
	0x03983EE8 LDP V0, V1, [X22 + 0x20]
	0x03983EEC LDP V2, V3, [X22]
	0x03983EF0 LDR X8, [X8 + 0x28]
	0x03983EF4 STR V1, [X31 + 0x67]
	0x03983EF8 STR V0, [X31 + 0x66]
	0x03983EFC STR V3, [X31 + 0x65]
	0x03983F00 STR V2, [X31 + 0x64]
	0x03983F04 CBZ X8, 0x398440C
	0x03983F08 LDR V0, [X31 + 0x64]
	0x03983F0C LDR V1, [X31 + 0x65]
	0x03983F10 LDR V2, [X31 + 0x66]
	0x03983F14 LDR V3, [X31 + 0x67]
	0x03983F18 STR V0, [X31 + 0x60]
	0x03983F1C STR V1, [X31 + 0x61]
	0x03983F20 STR V2, [X31 + 0x62]
	0x03983F24 STR V3, [X31 + 0x63]
	0x03983F28 LDR W9, [X8 + 0x18]
	0x03983F2C CMP W9, W19
	0x03983F30 B.LS 0x3984410
	0x03983F34 LDR V0, [X31 + 0x62]
	0x03983F38 LDR V1, [X31 + 0x63]
	0x03983F3C LDR V2, [X31 + 0x60]
	0x03983F40 LDR V3, [X31 + 0x61]
	0x03983F44 SXTW X22, W19
	0x03983F48 ADD X8, X8, X22, 0x6, LSL
	0x03983F4C STP V0, V1, [X8 + 0x40]
	0x03983F50 STP V2, V3, [X8 + 0x20]
	0x03983F54 LDR X8, [X23]
	0x03983F58 LDP V0, V1, [X21 + 0x20]
	0x03983F5C LDP V2, V3, [X21]
	0x03983F60 LDR X8, [X8 + 0xB8]
	0x03983F64 LDR X8, [X8 + 0x38]
	0x03983F68 STR V1, [X31 + 0x5F]
	0x03983F6C STR V0, [X31 + 0x5E]
	0x03983F70 STR V3, [X31 + 0x5D]
	0x03983F74 STR V2, [X31 + 0x5C]
	0x03983F78 CBZ X8, 0x398440C
	0x03983F7C LDR V0, [X31 + 0x5C]
	0x03983F80 LDR V1, [X31 + 0x5D]
	0x03983F84 LDR V2, [X31 + 0x5E]
	0x03983F88 LDR V3, [X31 + 0x5F]
	0x03983F8C STR V0, [X31 + 0x58]
	0x03983F90 STR V1, [X31 + 0x59]
	0x03983F94 STR V2, [X31 + 0x5A]
	0x03983F98 STR V3, [X31 + 0x5B]
	0x03983F9C LDR W9, [X8 + 0x18]
	0x03983FA0 CMP W9, W19
	0x03983FA4 B.LS 0x3984410
	0x03983FA8 LDR V0, [X31 + 0x5A]
	0x03983FAC LDR V1, [X31 + 0x5B]
	0x03983FB0 LDR V2, [X31 + 0x58]
	0x03983FB4 LDR V3, [X31 + 0x59]
	0x03983FB8 ADD X8, X8, X22, 0x6, LSL
	0x03983FBC STP V0, V1, [X8 + 0x40]
	0x03983FC0 STP V2, V3, [X8 + 0x20]
	0x03983FC4 LDR X8, [X23]
	0x03983FC8 LDR X8, [X8 + 0xB8]
	0x03983FCC LDR X9, [X8 + 0x28]
	0x03983FD0 CBZ X9, 0x398440C
	0x03983FD4 LDR W10, [X9 + 0x18]
	0x03983FD8 CMP W10, W19
	0x03983FDC B.LS 0x3984410
	0x03983FE0 ADD X9, X9, X22, 0x6, LSL
	0x03983FE4 LDP V0, V1, [X9 + 0x40]
	0x03983FE8 LDP V2, V3, [X9 + 0x20]
	0x03983FEC LDR X21, [X8 + 0x48]
	0x03983FF0 AND W1, W20, 0x1
	0x03983FF4 ADD X8, X31, 0x500
	0x03983FF8 ADD X0, X31, 0x4C0
	0x03983FFC MOV X2, X31
	0x03984000 STR V1, [X31 + 0x4F]
	0x03984004 STR V0, [X31 + 0x4E]
	0x03984008 STR V3, [X31 + 0x4D]
	0x0398400C STR V2, [X31 + 0x4C]
	0x03984010 BL 0x3C1015C
	0x03984014 LDR V0, [X31 + 0x50]
	0x03984018 LDR V1, [X31 + 0x51]
	0x0398401C LDR V2, [X31 + 0x52]
	0x03984020 LDR V3, [X31 + 0x53]
	0x03984024 STR V0, [X31 + 0x54]
	0x03984028 STR V1, [X31 + 0x55]
	0x0398402C STR V2, [X31 + 0x56]
	0x03984030 STR V3, [X31 + 0x57]
	0x03984034 CBZ X21, 0x398440C
	0x03984038 LDR V0, [X31 + 0x54]
	0x0398403C LDR V1, [X31 + 0x55]
	0x03984040 LDR V2, [X31 + 0x56]
	0x03984044 LDR V3, [X31 + 0x57]
	0x03984048 STR V0, [X31 + 0x48]
	0x0398404C STR V1, [X31 + 0x49]
	0x03984050 STR V2, [X31 + 0x4A]
	0x03984054 STR V3, [X31 + 0x4B]
	0x03984058 LDR W8, [X21 + 0x18]
	0x0398405C CMP W8, W19
	0x03984060 B.LS 0x3984410
	0x03984064 LDR V0, [X31 + 0x4A]
	0x03984068 LDR V1, [X31 + 0x4B]
	0x0398406C LDR V2, [X31 + 0x48]
	0x03984070 LDR V3, [X31 + 0x49]
	0x03984074 ADD X8, X21, X22, 0x6, LSL
	0x03984078 STP V0, V1, [X8 + 0x40]
	0x0398407C STP V2, V3, [X8 + 0x20]
	0x03984080 LDR X8, [X23]
	0x03984084 LDR X8, [X8 + 0xB8]
	0x03984088 LDR X9, [X8 + 0x48]
	0x0398408C CBZ X9, 0x398440C
	0x03984090 LDR W10, [X9 + 0x18]
	0x03984094 CMP W10, W19
	0x03984098 B.LS 0x3984410
	0x0398409C ADD X9, X9, X22, 0x6, LSL
	0x039840A0 LDP V0, V1, [X9 + 0x40]
	0x039840A4 LDP V2, V3, [X9 + 0x20]
	0x039840A8 LDR X20, [X8 + 0x58]
	0x039840AC STR V1, [X31 + 0x53]
	0x039840B0 STR V0, [X31 + 0x52]
	0x039840B4 STR V3, [X31 + 0x51]
	0x039840B8 STR V2, [X31 + 0x50]
	0x039840BC LDR X8, [X8 + 0x38]
	0x039840C0 CBZ X8, 0x398440C
	0x039840C4 LDR W9, [X8 + 0x18]
	0x039840C8 CMP W9, W19
	0x039840CC B.LS 0x3984410
	0x039840D0 ADD X8, X8, X22, 0x6, LSL
	0x039840D4 LDP V2, V3, [X8 + 0x20]
	0x039840D8 LDP V4, V5, [X8 + 0x40]
	0x039840DC LDR V0, [X31 + 0x50]
	0x039840E0 LDR V1, [X31 + 0x51]
	0x039840E4 STR V3, [X31 + 0x45]
	0x039840E8 STR V5, [X31 + 0x47]
	0x039840EC STR V4, [X31 + 0x46]
	0x039840F0 STR V2, [X31 + 0x44]
	0x039840F4 STP V0, V1, [X31 + 0x380]
	0x039840F8 LDR V0, [X31 + 0x52]
	0x039840FC LDR V1, [X31 + 0x53]
	0x03984100 LDR V2, [X31 + 0x46]
	0x03984104 LDR V3, [X31 + 0x47]
	0x03984108 LDR V4, [X31 + 0x44]
	0x0398410C LDR V5, [X31 + 0x45]
	0x03984110 ADD X8, X31, 0x3C0
	0x03984114 ADD X0, X31, 0x380
	0x03984118 ADD X1, X31, 0x340
	0x0398411C MOV X2, X31
	0x03984120 STP V0, V1, [X31 + 0x3A0]
	0x03984124 STP V2, V3, [X31 + 0x360]
	0x03984128 STP V4, V5, [X31 + 0x340]
	0x0398412C BL 0x3C27F74
	0x03984130 LDP V0, V1, [X31 + 0x3C0]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+128], D15
	003 Move [X31+136], D14
	004 Move [X31+144], D13
	005 Move [X31+152], D12
	006 Move [X31+160], D11
	007 Move [X31+168], D10
	008 Move [X31+176], D9
	009 Move [X31+184], D8
	010 Move [X31+192], X30
	011 Move [X31+200], X23
	012 Move [X31+208], X22
	013 Move [X31+216], X21
	014 Move [X31+224], X20
	015 Move [X31+232], X19
	016 Move X20, X1
	017 Move X19, X0
	018 Call LightAnchor.get_anchorPosition, X0
	019 Add X8, X31, 88
	020 Move X0, X19
	021 Move X1, X20
	022 Call LightAnchor.GetWorldSpaceAxes, X0, X1, X2
	023 Move V0, [X31+96]
	024 Move V3, [X31+100]
	025 Move S13, [X31+88]
	026 Move S14, [X31+92]
	027 Move X0, X19
	028 Move [X31+84], S0
	029 Move V0, [X31+104]
	030 Move X1, X31
	031 Move [X31+68], S0
	032 Move [X31+76], S3
	033 Move V0, [X31+108]
	034 Move V3, [X31+112]
	035 Move [X31+64], S0
	036 Move V0, [X31+116]
	037 Move [X31+28], S0
	038 Move [X31+36], S3
	039 Move V0, [X31+120]
	040 Move [X31+24], S0
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {342}
	044 Move X1, X31
	045 Call Transform.get_position, X0
	046 Move X0, X19
	047 Move V8, V0
	048 Move V9, V1
	049 Move V10, V2
	050 Call LightAnchor.get_anchorPosition, X0
	051 Move X21, 0xA56000
	052 Move W8, [X21+1924]
	053 Move V11, V0
	054 Move V15, V1
	055 Move V12, V2
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x771000
	059 Move X0, [X0+1448]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X21+1924], W8
	063 Move X20, 0x771000
	064 Move X20, [X20+1448]
	065 Subtract S11, S8, S11
	066 Subtract S15, S9, S15
	067 Subtract S8, S10, S12
	068 Move X0, [X20]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Multiply S0, S11, S11
	074 Multiply S1, S15, S15
	075 Add S0, S0, S1
	076 Multiply S1, S8, S8
	077 Add S0, S1, S0
	078 NotImplemented "Instruction FSQRT not yet implemented."
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 Move X0, X19
	081 Move X1, X31
	082 Call Component.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {342}
	085 Move X1, X31
	086 Call Transform.get_forward, X0
	087 NotImplemented "Instruction FNEG not yet implemented."
	088 NotImplemented "Instruction FNEG not yet implemented."
	089 NotImplemented "Instruction FNEG not yet implemented."
	090 Move X22, 0xA56000
	091 Move W8, [X22+3641]
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x778000
	095 Move X0, [X0+1208]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X22+3641], W8
	099 Move X23, 0x778000
	100 Move X23, [X23+1208]
	101 Multiply S0, S13, S13
	102 Multiply S1, S14, S14
	103 Add S0, S0, S1
	104 Move X8, [X23]
	105 Move V1, [X31+84]
	106 Move [X31+80], S11
	107 Move V9, V11
	108 Move X8, [X8+184]
	109 Multiply S1, S1, S1
	110 Add S0, S1, S0
	111 Move V10, V15
	112 Move V2, [X8]
	113 Move V11, V8
	114 NotImplemented "Instruction FCMP not yet implemented."
	115 Move S5, [X31+80]
	116 Move S4, [X31+84]
	117 Multiply S2, S14, S15
	118 Multiply S1, S13, S5
	119 Multiply S3, S4, S8
	120 Add S1, S1, S2
	121 Add S1, S3, S1
	122 Multiply S2, S13, S1
	123 Multiply S3, S14, S1
	124 Multiply S1, S4, S1
	125 NotImplemented "Instruction FDIV not yet implemented."
	126 NotImplemented "Instruction FDIV not yet implemented."
	127 NotImplemented "Instruction FDIV not yet implemented."
	128 Subtract S9, S5, S2
	129 Subtract S10, S15, S3
	130 Subtract S11, S8, S0
	131 Move W8, [X21+1924]
	132 Move [X31+76], S15
	133 Compare W8, 0
	134 JumpIfNotEqual {140}
	135 Move X0, 0x771000
	136 Move X0, [X0+1448]
	137 Call 0x1C17CF4
	138 Move W8, 1
	139 Move [X21+1924], W8
	140 Move X0, [X20]
	141 Move V15, V14
	142 Move [X31+60], S13
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {147}
	146 Call 0x1C17DFC
	147 Multiply S0, S9, S9
	148 Multiply S1, S10, S10
	149 Move X8, -48861184
	150 Add S1, S0, S1
	151 Move V0, [X8+3880]
	152 Multiply S2, S11, S11
	153 Add S1, S1, S2
	154 NotImplemented "Instruction FSQRT not yet implemented."
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move S2, [X31+68]
	157 Move S1, [X31+72]
	158 Move V3, [X31+64]
	159 Move W8, [X22+3641]
	160 Multiply S1, S1, S0
	161 Multiply S2, S2, S0
	162 Multiply S0, S3, S0
	163 Move V3, [X31+60]
	164 Add S13, S15, S2
	165 Add S14, S3, S1
	166 Move V1, [X31+84]
	167 Add S12, S1, S0
	168 Compare W8, 0
	169 JumpIfNotEqual {175}
	170 Move X0, 0x778000
	171 Move X0, [X0+1208]
	172 Call 0x1C17CF4
	173 Move W8, 1
	174 Move [X22+3641], W8
	175 Move X8, [X23]
	176 Multiply S0, S14, S14
	177 Multiply S1, S13, S13
	178 Move S10, [X31+76]
	179 Move S9, [X31+80]
	180 Move X8, [X8+184]
	181 Add S0, S0, S1
	182 Multiply S1, S12, S12
	183 Add S0, S1, S0
	184 Move V2, [X8]
	185 Move V11, V8
	186 NotImplemented "Instruction FCMP not yet implemented."
	187 Move S5, [X31+76]
	188 Move S4, [X31+80]
	189 Multiply S3, S12, S8
	190 Multiply S1, S14, S4
	191 Multiply S2, S13, S5
	192 Add S1, S1, S2
	193 Add S1, S3, S1
	194 Multiply S2, S14, S1
	195 Multiply S3, S13, S1
	196 Multiply S1, S12, S1
	197 NotImplemented "Instruction FDIV not yet implemented."
	198 NotImplemented "Instruction FDIV not yet implemented."
	199 NotImplemented "Instruction FDIV not yet implemented."
	200 Subtract S9, S4, S2
	201 Subtract S10, S5, S3
	202 Subtract S11, S8, S0
	203 Move X21, 0xA56000
	204 Move W8, [X21+1925]
	205 Compare W8, 0
	206 JumpIfNotEqual {212}
	207 Move X0, 0x771000
	208 Move X0, [X0+1448]
	209 Call 0x1C17CF4
	210 Move W8, 1
	211 Move [X21+1925], W8
	212 Move X0, [X20]
	213 Move V13, V15
	214 Move W8, [X0+224]
	215 Compare W8, 0
	216 JumpIfNotEqual {218}
	217 Call 0x1C17DFC
	218 Multiply S0, S9, S9
	219 Multiply S1, S10, S10
	220 Move X8, -48857088
	221 Add S0, S0, S1
	222 Move V1, [X8+380]
	223 Multiply S2, S11, S11
	224 Move V12, [X31+60]
	225 Move V15, [X31+76]
	226 Add S0, S2, S0
	227 NotImplemented "Instruction FSQRT not yet implemented."
	228 NotImplemented "Instruction FCMP not yet implemented."
	229 NotImplemented "Instruction FDIV not yet implemented."
	230 NotImplemented "Instruction FDIV not yet implemented."
	231 NotImplemented "Instruction FDIV not yet implemented."
	232 Move X20, 0xA56000
	233 Move W8, [X20+1923]
	234 Compare W8, 0
	235 JumpIfNotEqual {241}
	236 Move X0, 0x771000
	237 Move X0, [X0+1440]
	238 Call 0x1C17CF4
	239 Move W8, 1
	240 Move [X20+1923], W8
	241 Move X8, 0x771000
	242 Move X8, [X8+1440]
	243 Move X8, [X8]
	244 Move X8, [X8+184]
	245 Move S9, [X8]
	246 Move S10, [X8+4]
	247 Move V11, [X8+8]
	248 Move V14, [X31+84]
	249 Move S1, [X31+28]
	250 Move S0, [X31+32]
	251 Move V2, [X31+24]
	252 Move V3, V9
	253 Move V4, V10
	254 Move V5, V11
	255 Move X0, X31
	256 Move [X31], S12
	257 Move [X31+8], S13
	258 Move [X31+8], S14
	259 Call 0x1DD5D78
	260 Move V1, V12
	261 Move V2, V13
	262 Move V3, V14
	263 Move X0, X31
	264 Move [X31+2], V0
	265 Call Quaternion.AngleAxis, V0, X0
	266 Move S5, [X31+68]
	267 Move S4, [X31+72]
	268 Move V6, [X31+64]
	269 Move X0, X31
	270 Call Quaternion.op_Multiply, X0, X1
	271 Move V3, [X31+80]
	272 Move [X31+4], S1
	273 Move [X31+12], S2
	274 Move [X31], S0
	275 Move V0, V9
	276 Move V1, V10
	277 Move V2, V11
	278 Move V4, V15
	279 Move V5, V8
	280 Move X0, X31
	281 Call 0x1DD5D78
	282 Move V2, [X31+2]
	283 Move W8, 0x43340000
	284 Move W9, 0x43B40000
	285 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	286 Move V2.S[1], V0.S[0]
	287 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	288 Add V0, V2, V0
	289 NotImplemented "Instruction INVALID not yet implemented."
	290 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	291 Move W10, 0xC3340000
	292 NotImplemented "Instruction INVALID not yet implemented."
	293 Subtract V0, V0, V1
	294 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	295 Add V0, V0, V1
	296 Move X0, X19
	297 Move X1, X31
	298 Move [X19+60], D0
	299 Call Component.get_transform, X0
	300 Compare X0, 0
	301 JumpIfEqual {342}
	302 Move X1, X31
	303 Call Transform.get_rotation, X0
	304 Move X0, X31
	305 Call Quaternion.Internal_ToEulerRad, X0
	306 Move X8, -48861184
	307 Move V3, [X8+1096]
	308 Move X0, X31
	309 Multiply S0, S0, S3
	310 Multiply S1, S1, S3
	311 Multiply S2, S2, S3
	312 Call Quaternion.Internal_MakePositive, X0
	313 Move W8, 0x43340000
	314 Move W9, 0x43B40000
	315 Move S0, W8
	316 Add S0, S2, S0
	317 Move S1, W9
	318 NotImplemented "Instruction FDIV not yet implemented."
	319 NotImplemented "Instruction FRINTM not yet implemented."
	320 Multiply S1, S2, S1
	321 Move W8, 0xC3340000
	322 Subtract S0, S0, S1
	323 Move S1, W8
	324 Add S0, S0, S1
	325 Move [X19+68], S0
	326 Move X20, [X31+224]
	327 Move X19, [X31+232]
	328 Move X22, [X31+208]
	329 Move X21, [X31+216]
	330 Move X30, [X31+192]
	331 Move X23, [X31+200]
	332 Move D9, [X31+176]
	333 Move D8, [X31+184]
	334 Move D11, [X31+160]
	335 Move D10, [X31+168]
	336 Move D13, [X31+144]
	337 Move D12, [X31+152]
	338 Move D15, [X31+128]
	339 Move D14, [X31+136]
	340 Add X31, X31, 240
	341 Return 
	342 Call 0x1C17F20

Method: System.Void UpdateTransform(UnityEngine.Camera camera, UnityEngine.Vector3 anchor)

Disassembly:
	0x03984968 STP V2, V3, [X31 + 0x260]
	0x0398496C LDR W8, [X26 + 0x18]
	0x03984970 CMP X21, X8
	0x03984974 B.CS 0x3984C94
	0x03984978 LDP V0, V1, [X31 + 0x260]
	0x0398497C LDP V2, V3, [X31 + 0x240]
	0x03984980 ADD X8, X26, X25
	0x03984984 STP V0, V1, [X8 + 0x20]
	0x03984988 STP V2, V3, [X8]
	0x0398498C LDR X8, [X23]
	0x03984990 LDR X8, [X8 + 0xB8]
	0x03984994 LDR X9, [X8 + 0x38]
	0x03984998 CBZ X9, 0x3984C90
	0x0398499C LDR W10, [X9 + 0x18]
	0x039849A0 CMP X21, X10
	0x039849A4 B.CS 0x3984C94
	0x039849A8 ADD X9, X9, X25
	0x039849AC LDP V0, V1, [X9 + 0x20]
	0x039849B0 LDP V2, V3, [X9]
	0x039849B4 LDR X26, [X8 + 0x40]
	0x039849B8 ADD X8, X31, 0x200
	0x039849BC ADD X0, X31, 0x1C0
	0x039849C0 MOV X1, X31
	0x039849C4 STP V0, V1, [X31 + 0x1E0]
	0x039849C8 STP V2, V3, [X31 + 0x1C0]
	0x039849CC BL 0x3C2711C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], D10
	003 Move [X31+96], D9
	004 Move [X31+104], D8
	005 Move [X31+112], X30
	006 Move [X31+120], X19
	007 Add X8, X31, 40
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Move X19, X0
	012 Call LightAnchor.GetWorldSpaceAxes, X0, X1, X2
	013 Move S0, [X31+40]
	014 Move S1, [X31+44]
	015 Move S2, [X31+48]
	016 Move S3, [X31+52]
	017 Move S4, [X31+56]
	018 Move S5, [X31+60]
	019 Move X8, [X31+64]
	020 Move V6, [X31+72]
	021 Move X0, X19
	022 Move [X31+20], S9
	023 Move [X31+28], S8
	024 Move [X31+16], S10
	025 Move [X31+8], S6
	026 Move [X31], X8
	027 Call LightAnchor.UpdateTransform, X0, X1, X2, X3, X4
	028 Move X30, [X31+112]
	029 Move X19, [X31+120]
	030 Move D9, [X31+96]
	031 Move D8, [X31+104]
	032 Move V10, [X31+80]
	033 Add X31, X31, 128
	034 Return 

Method: UnityEngine.LightAnchor/Axes GetWorldSpaceAxes(UnityEngine.Camera camera, UnityEngine.Vector3 anchor)

Disassembly:
	0x03984134 LDP V2, V3, [X31 + 0x3E0]
	0x03984138 STR V0, [X31 + 0x40]
	0x0398413C STR V1, [X31 + 0x41]
	0x03984140 STR V2, [X31 + 0x42]
	0x03984144 STR V3, [X31 + 0x43]
	0x03984148 CBZ X20, 0x398440C
	0x0398414C LDR V0, [X31 + 0x40]
	0x03984150 LDR V1, [X31 + 0x41]
	0x03984154 LDR V2, [X31 + 0x42]
	0x03984158 LDR V3, [X31 + 0x43]
	0x0398415C STP V0, V1, [X31 + 0x300]
	0x03984160 STP V2, V3, [X31 + 0x320]
	0x03984164 LDR W8, [X20 + 0x18]
	0x03984168 CMP W8, W19
	0x0398416C B.LS 0x3984410
	0x03984170 LDP V0, V1, [X31 + 0x320]
	0x03984174 LDP V2, V3, [X31 + 0x300]
	0x03984178 ADD X8, X20, X22, 0x6, LSL
	0x0398417C STP V0, V1, [X8 + 0x40]
	0x03984180 STP V2, V3, [X8 + 0x20]
	0x03984184 LDR X8, [X23]
	0x03984188 LDR X8, [X8 + 0xB8]
	0x0398418C LDR X9, [X8 + 0x28]
	0x03984190 CBZ X9, 0x398440C
	0x03984194 LDR W10, [X9 + 0x18]
	0x03984198 CMP W10, W19
	0x0398419C B.LS 0x3984410
	0x039841A0 ADD X9, X9, X22, 0x6, LSL
	0x039841A4 LDP V0, V1, [X9 + 0x40]
	0x039841A8 LDP V2, V3, [X9 + 0x20]
	0x039841AC LDR X20, [X8 + 0x30]
	0x039841B0 ADD X8, X31, 0x2C0
	0x039841B4 ADD X0, X31, 0x280
	0x039841B8 MOV X1, X31
	0x039841BC STP V0, V1, [X31 + 0x2A0]
	0x039841C0 STP V2, V3, [X31 + 0x280]
	0x039841C4 BL 0x3C2711C
	0x039841C8 LDP V0, V1, [X31 + 0x2C0]
	0x039841CC LDP V2, V3, [X31 + 0x2E0]
	0x039841D0 STP V0, V1, [X31 + 0x3C0]
	0x039841D4 STP V2, V3, [X31 + 0x3E0]
	0x039841D8 CBZ X20, 0x398440C
	0x039841DC LDP V0, V1, [X31 + 0x3C0]
	0x039841E0 LDP V2, V3, [X31 + 0x3E0]
	0x039841E4 STP V0, V1, [X31 + 0x240]
	0x039841E8 STP V2, V3, [X31 + 0x260]
	0x039841EC LDR W8, [X20 + 0x18]
	0x039841F0 CMP W8, W19
	0x039841F4 B.LS 0x3984410
	0x039841F8 LDP V0, V1, [X31 + 0x260]
	0x039841FC LDP V2, V3, [X31 + 0x240]
	0x03984200 ADD X8, X20, X22, 0x6, LSL
	0x03984204 STP V0, V1, [X8 + 0x40]
	0x03984208 STP V2, V3, [X8 + 0x20]
	0x0398420C LDR X8, [X23]
	0x03984210 LDR X8, [X8 + 0xB8]
	0x03984214 LDR X9, [X8 + 0x38]
	0x03984218 CBZ X9, 0x398440C
	0x0398421C LDR W10, [X9 + 0x18]
	0x03984220 CMP W10, W19
	0x03984224 B.LS 0x3984410
	0x03984228 ADD X9, X9, X22, 0x6, LSL
	0x0398422C LDP V0, V1, [X9 + 0x40]
	0x03984230 LDP V2, V3, [X9 + 0x20]
	0x03984234 LDR X20, [X8 + 0x40]
	0x03984238 ADD X8, X31, 0x200
	0x0398423C ADD X0, X31, 0x1C0
	0x03984240 MOV X1, X31
	0x03984244 STP V0, V1, [X31 + 0x1E0]
	0x03984248 STP V2, V3, [X31 + 0x1C0]
	0x0398424C BL 0x3C2711C
	0x03984250 LDP V0, V1, [X31 + 0x200]
	0x03984254 LDP V2, V3, [X31 + 0x220]
	0x03984258 STP V0, V1, [X31 + 0x2C0]
	0x0398425C STP V2, V3, [X31 + 0x2E0]
	0x03984260 CBZ X20, 0x398440C
	0x03984264 LDP V0, V1, [X31 + 0x2C0]
	0x03984268 LDP V2, V3, [X31 + 0x2E0]
	0x0398426C STP V0, V1, [X31 + 0x180]
	0x03984270 STP V2, V3, [X31 + 0x1A0]
	0x03984274 LDR W8, [X20 + 0x18]
	0x03984278 CMP W8, W19
	0x0398427C B.LS 0x3984410
	0x03984280 LDP V0, V1, [X31 + 0x1A0]
	0x03984284 LDP V2, V3, [X31 + 0x180]
	0x03984288 ADD X8, X20, X22, 0x6, LSL
	0x0398428C STP V0, V1, [X8 + 0x40]
	0x03984290 STP V2, V3, [X8 + 0x20]
	0x03984294 LDR X8, [X23]
	0x03984298 LDR X8, [X8 + 0xB8]
	0x0398429C LDR X9, [X8 + 0x48]
	0x039842A0 CBZ X9, 0x398440C
	0x039842A4 LDR W10, [X9 + 0x18]
	0x039842A8 CMP W10, W19
	0x039842AC B.LS 0x3984410
	0x039842B0 ADD X9, X9, X22, 0x6, LSL
	0x039842B4 LDP V0, V1, [X9 + 0x40]
	0x039842B8 LDP V2, V3, [X9 + 0x20]
	0x039842BC LDR X20, [X8 + 0x50]
	0x039842C0 ADD X8, X31, 0x140
	0x039842C4 ADD X0, X31, 0x100
	0x039842C8 MOV X1, X31
	0x039842CC STP V0, V1, [X31 + 0x120]
	0x039842D0 STP V2, V3, [X31 + 0x100]
	0x039842D4 BL 0x3C2711C
	0x039842D8 LDP V0, V1, [X31 + 0x140]
	0x039842DC LDP V2, V3, [X31 + 0x160]
	0x039842E0 STP V0, V1, [X31 + 0x200]
	0x039842E4 STP V2, V3, [X31 + 0x220]
	0x039842E8 CBZ X20, 0x398440C
	0x039842EC LDP V0, V1, [X31 + 0x200]
	0x039842F0 LDP V2, V3, [X31 + 0x220]
	0x039842F4 STP V0, V1, [X31 + 0xC0]
	0x039842F8 STP V2, V3, [X31 + 0xE0]
	0x039842FC LDR W8, [X20 + 0x18]
	0x03984300 CMP W8, W19
	0x03984304 B.LS 0x3984410
	0x03984308 LDP V0, V1, [X31 + 0xE0]
	0x0398430C LDP V2, V3, [X31 + 0xC0]
	0x03984310 ADD X8, X20, X22, 0x6, LSL
	0x03984314 STP V0, V1, [X8 + 0x40]
	0x03984318 STP V2, V3, [X8 + 0x20]
	0x0398431C LDR X8, [X23]
	0x03984320 LDR X8, [X8 + 0xB8]
	0x03984324 LDR X9, [X8 + 0x58]
	0x03984328 CBZ X9, 0x398440C
	0x0398432C LDR W10, [X9 + 0x18]
	0x03984330 CMP W10, W19
	0x03984334 B.LS 0x3984410
	0x03984338 ADD X9, X9, X22, 0x6, LSL
	0x0398433C LDP V0, V1, [X9 + 0x40]
	0x03984340 LDP V2, V3, [X9 + 0x20]
	0x03984344 LDR X20, [X8 + 0x60]
	0x03984348 ADD X8, X31, 0x80
	0x0398434C ADD X0, X31, 0x40
	0x03984350 MOV X1, X31
	0x03984354 STP V0, V1, [X31 + 0x60]
	0x03984358 STP V2, V3, [X31 + 0x40]
	0x0398435C BL 0x3C2711C
	0x03984360 LDP V0, V1, [X31 + 0x80]
	0x03984364 LDP V2, V3, [X31 + 0xA0]
	0x03984368 STP V0, V1, [X31 + 0x140]
	0x0398436C STP V2, V3, [X31 + 0x160]
	0x03984370 CBZ X20, 0x398440C
	0x03984374 LDP V0, V1, [X31 + 0x140]
	0x03984378 LDP V2, V3, [X31 + 0x160]
	0x0398437C STP V0, V1, [X31]
	0x03984380 STP V2, V3, [X31 + 0x20]
	0x03984384 LDR W8, [X20 + 0x18]
	0x03984388 CMP W8, W19
	0x0398438C B.LS 0x3984410
	0x03984390 LDP V0, V1, [X31 + 0x20]
	0x03984394 LDP V2, V3, [X31]
	0x03984398 ADD X8, X20, X22, 0x6, LSL
	0x0398439C STP V0, V1, [X8 + 0x40]
	0x039843A0 STP V2, V3, [X8 + 0x20]
	0x039843A4 LDR X8, [X23]
	0x039843A8 LDR X9, [X8 + 0xB8]
	0x039843AC LDR X8, [X9 + 0x40]
	0x039843B0 CBZ X8, 0x398440C
	0x039843B4 LDR W10, [X8 + 0x18]
	0x039843B8 CMP W10, W19
	0x039843BC B.LS 0x3984410
	0x039843C0 LDR X20, [X9 + 0x68]
	0x039843C4 ADD X8, X8, X22, 0x6, LSL
	0x039843C8 ADD X0, X8, 0x20
	0x039843CC MOVZ W1, 0x3
	0x039843D0 MOV X2, X31
	0x039843D4 BL 0x3C27C24
	0x039843D8 CBZ X20, 0x398440C
	0x039843DC LDR W8, [X20 + 0x18]
	0x039843E0 CMP W8, W19
	0x039843E4 B.LS 0x3984410
	0x039843E8 ADD X8, X20, X22, 0x4, LSL
	0x039843EC STP S0, S1, [X8 + 0x20]
	0x039843F0 STP S2, S3, [X8 + 0x28]
	0x039843F4 ADD X31, X31, 0x680
	0x039843F8 LDP X20, X19, [X31 + 0x30]
	0x039843FC LDP X22, X21, [X31 + 0x20]
	0x03984400 LDP X24, X23, [X31 + 0x10]
	0x03984404 LDP X29, X30, [X31], #0x40
	0x03984408 RET
	0x0398440C BL 0x1C16F20
	0x03984410 BL 0x1C16F28
	0x03984414 STP X30, X21, [X31 - 0x20]!
	0x03984418 STP X20, X19, [X31 + 0x10]
	0x0398441C ADRP X21, 0xA5D000
	0x03984420 ADRP X20, 0x7CC000
	0x03984424 LDRB W8, [X21 + 0xA51]
	0x03984428 LDR X20, [X20 + 0x4A8]
	0x0398442C MOV X19, X0
	0x03984430 TBNZ X8, 0x0, 0x3984448
	0x03984434 ADRP X0, 0x7CC000
	0x03984438 LDR X0, [X0 + 0x4A8]
	0x0398443C BL 0x1C16CF4
	0x03984440 MOVZ W8, 0x1
	0x03984444 STRB W8, [X21 + 0xA51]
	0x03984448 LDR X0, [X20]
	0x0398444C LDR W8, [X0 + 0xE0]
	0x03984450 CBNZ W8, 0x398445C
	0x03984454 BL 0x1C16DFC
	0x03984458 LDR X0, [X20]
	0x0398445C CBZ X19, 0x3984560
	0x03984460 LDR X8, [X0 + 0xB8]
	0x03984464 MOV X0, X19
	0x03984468 MOV X3, X31
	0x0398446C LDR X2, [X8 + 0x28]
	0x03984470 LDR W1, [X8]
	0x03984474 BL 0x3C4D47C
	0x03984478 LDR X8, [X20]
	0x0398447C MOV X0, X19
	0x03984480 MOV X3, X31
	0x03984484 LDR X8, [X8 + 0xB8]
	0x03984488 LDR W1, [X8 + 0x4]
	0x0398448C LDR X2, [X8 + 0x30]
	0x03984490 BL 0x3C4D47C
	0x03984494 LDR X8, [X20]
	0x03984498 MOV X0, X19
	0x0398449C MOV X3, X31
	0x039844A0 LDR X8, [X8 + 0xB8]
	0x039844A4 LDR W1, [X8 + 0x8]
	0x039844A8 LDR X2, [X8 + 0x38]
	0x039844AC BL 0x3C4D47C
	0x039844B0 LDR X8, [X20]
	0x039844B4 MOV X0, X19
	0x039844B8 MOV X3, X31
	0x039844BC LDR X8, [X8 + 0xB8]
	0x039844C0 LDR W1, [X8 + 0xC]
	0x039844C4 LDR X2, [X8 + 0x40]
	0x039844C8 BL 0x3C4D47C
	0x039844CC LDR X8, [X20]
	0x039844D0 MOV X0, X19
	0x039844D4 MOV X3, X31
	0x039844D8 LDR X8, [X8 + 0xB8]
	0x039844DC LDR W1, [X8 + 0x10]
	0x039844E0 LDR X2, [X8 + 0x48]
	0x039844E4 BL 0x3C4D47C
	0x039844E8 LDR X8, [X20]
	0x039844EC MOV X0, X19
	0x039844F0 MOV X3, X31
	0x039844F4 LDR X8, [X8 + 0xB8]
	0x039844F8 LDR W1, [X8 + 0x14]
	0x039844FC LDR X2, [X8 + 0x50]
	0x03984500 BL 0x3C4D47C
	0x03984504 LDR X8, [X20]
	0x03984508 MOV X0, X19
	0x0398450C MOV X3, X31
	0x03984510 LDR X8, [X8 + 0xB8]
	0x03984514 LDR W1, [X8 + 0x18]
	0x03984518 LDR X2, [X8 + 0x58]
	0x0398451C BL 0x3C4D47C
	0x03984520 LDR X8, [X20]
	0x03984524 MOV X0, X19
	0x03984528 MOV X3, X31
	0x0398452C LDR X8, [X8 + 0xB8]
	0x03984530 LDR W1, [X8 + 0x1C]
	0x03984534 LDR X2, [X8 + 0x60]
	0x03984538 BL 0x3C4D47C
	0x0398453C LDR X8, [X20]
	0x03984540 MOV X0, X19
	0x03984544 LDP X20, X19, [X31 + 0x10]
	0x03984548 MOV X3, X31
	0x0398454C LDR X8, [X8 + 0xB8]
	0x03984550 LDR W1, [X8 + 0x20]
	0x03984554 LDR X2, [X8 + 0x68]
	0x03984558 LDP X30, X21, [X31], #0x20
	0x0398455C B 0x3C4D428
	0x03984560 BL 0x1C16F20
	0x03984564 STP X29, X30, [X31 - 0x50]!
	0x03984568 STP X26, X25, [X31 + 0x10]
	0x0398456C STP X24, X23, [X31 + 0x20]
	0x03984570 STP X22, X21, [X31 + 0x30]
	0x03984574 STP X20, X19, [X31 + 0x40]
	0x03984578 SUB X31, X31, 0x700
	0x0398457C ADRP X21, 0xA5D000
	0x03984580 LDRB W8, [X21 + 0xA52]
	0x03984584 MOV W22, W2
	0x03984588 MOV X19, X1
	0x0398458C MOV X20, X0
	0x03984590 TBNZ X8, 0x0, 0x39845A8
	0x03984594 ADRP X0, 0x7CC000
	0x03984598 LDR X0, [X0 + 0x4A8]
	0x0398459C BL 0x1C16CF4
	0x039845A0 MOVZ W8, 0x1
	0x039845A4 STRB W8, [X21 + 0xA52]
	0x039845A8 CBZ X20, 0x3984C90
	0x039845AC MOV X0, X20
	0x039845B0 BL 0x398632C
	0x039845B4 CMP W0, 0x1
	0x039845B8 B.LT 0x3984C74
	0x039845BC ADD X8, X31, 0x6C0
	0x039845C0 MOV X0, X20
	0x039845C4 MOV W1, W31
	0x039845C8 BL 0x3984CB0
	0x039845CC ADD X8, X31, 0x680
	0x039845D0 MOV X0, X20
	0x039845D4 MOV W1, W31
	0x039845D8 BL 0x3984D48
	0x039845DC CBZ X19, 0x3984C90
	0x039845E0 LDR V0, [X31 + 0x6C]
	0x039845E4 LDR V1, [X31 + 0x6D]
	0x039845E8 LDR V2, [X31 + 0x6E]
	0x039845EC LDR V3, [X31 + 0x6F]
	0x039845F0 STR V0, [X31 + 0x64]
	0x039845F4 STR V1, [X31 + 0x65]
	0x039845F8 LDR V0, [X31 + 0x68]
	0x039845FC LDR V1, [X31 + 0x69]
	0x03984600 STR V2, [X31 + 0x66]
	0x03984604 STR V3, [X31 + 0x67]
	0x03984608 LDR V2, [X31 + 0x6A]
	0x0398460C LDR V3, [X31 + 0x6B]
	0x03984610 ADD X1, X31, 0x640
	0x03984614 ADD X2, X31, 0x600
	0x03984618 MOV X0, X19
	0x0398461C MOV X3, X31
	0x03984620 STR V0, [X31 + 0x60]
	0x03984624 STR V1, [X31 + 0x61]
	0x03984628 STR V2, [X31 + 0x62]
	0x0398462C STR V3, [X31 + 0x63]
	0x03984630 BL 0x3C4D294
	0x03984634 MOV X0, X20
	0x03984638 BL 0x398632C
	0x0398463C CMP W0, 0x2
	0x03984640 B.LT 0x3984C74
	0x03984644 ADRP X23, 0x7CC000
	0x03984648 LDR X23, [X23 + 0x4A8]
	0x0398464C MOV X24, X31
	0x03984650 MOV X21, X31
	0x03984654 MOVZ W25, 0x20
	0x03984658 AND W22, W22, 0x1
	0x0398465C LDR X0, [X23]
	0x03984660 LDR W8, [X0 + 0xE0]
	0x03984664 CBNZ W8, 0x3984670
	0x03984668 BL 0x1C16DFC
	0x0398466C LDR X0, [X23]
	0x03984670 LDR X8, [X0 + 0xB8]
	0x03984674 CMP X25, 0xA0
	0x03984678 B.EQ 0x3984B80
	0x0398467C LDR X26, [X8 + 0x28]
	0x03984680 ADD X8, X31, 0x6C0
	0x03984684 MOV X0, X20
	0x03984688 MOV W1, W21
	0x0398468C BL 0x3984D48
	0x03984690 CBZ X26, 0x3984C90
	0x03984694 LDR V0, [X31 + 0x6C]
	0x03984698 LDR V1, [X31 + 0x6D]
	0x0398469C LDR V2, [X31 + 0x6E]
	0x039846A0 LDR V3, [X31 + 0x6F]
	0x039846A4 STR V0, [X31 + 0x5C]
	0x039846A8 STR V1, [X31 + 0x5D]
	0x039846AC STR V2, [X31 + 0x5E]
	0x039846B0 STR V3, [X31 + 0x5F]
	0x039846B4 LDR W8, [X26 + 0x18]
	0x039846B8 CMP X21, X8
	0x039846BC B.CS 0x3984C94
	0x039846C0 LDR V0, [X31 + 0x5E]
	0x039846C4 LDR V1, [X31 + 0x5F]
	0x039846C8 LDR V2, [X31 + 0x5C]
	0x039846CC LDR V3, [X31 + 0x5D]
	0x039846D0 ADD X8, X26, X25
	0x039846D4 STP V0, V1, [X8 + 0x20]
	0x039846D8 MOV X0, X20
	0x039846DC STP V2, V3, [X8]
	0x039846E0 LDR X8, [X23]
	0x039846E4 MOV W1, W21
	0x039846E8 LDR X8, [X8 + 0xB8]
	0x039846EC LDR X26, [X8 + 0x38]
	0x039846F0 ADD X8, X31, 0x680
	0x039846F4 BL 0x3984CB0
	0x039846F8 CBZ X26, 0x3984C90
	0x039846FC LDR V0, [X31 + 0x68]
	0x03984700 LDR V1, [X31 + 0x69]
	0x03984704 LDR V2, [X31 + 0x6A]
	0x03984708 LDR V3, [X31 + 0x6B]
	0x0398470C STR V0, [X31 + 0x58]
	0x03984710 STR V1, [X31 + 0x59]
	0x03984714 STR V2, [X31 + 0x5A]
	0x03984718 STR V3, [X31 + 0x5B]
	0x0398471C LDR W8, [X26 + 0x18]
	0x03984720 CMP X21, X8
	0x03984724 B.CS 0x3984C94
	0x03984728 LDR V0, [X31 + 0x5A]
	0x0398472C LDR V1, [X31 + 0x5B]
	0x03984730 LDR V2, [X31 + 0x58]
	0x03984734 LDR V3, [X31 + 0x59]
	0x03984738 ADD X8, X26, X25
	0x0398473C STP V0, V1, [X8 + 0x20]
	0x03984740 STP V2, V3, [X8]
	0x03984744 LDR X8, [X23]
	0x03984748 LDR X8, [X8 + 0xB8]
	0x0398474C LDR X9, [X8 + 0x28]
	0x03984750 CBZ X9, 0x3984C90
	0x03984754 LDR W10, [X9 + 0x18]
	0x03984758 CMP X21, X10
	0x0398475C B.CS 0x3984C94
	0x03984760 ADD X9, X9, X25
	0x03984764 LDP V0, V1, [X9 + 0x20]
	0x03984768 LDP V2, V3, [X9]
	0x0398476C LDR X26, [X8 + 0x48]
	0x03984770 ADD X8, X31, 0x500
	0x03984774 ADD X0, X31, 0x4C0
	0x03984778 MOV W1, W22
	0x0398477C MOV X2, X31
	0x03984780 STR V1, [X31 + 0x4F]
	0x03984784 STR V0, [X31 + 0x4E]
	0x03984788 STR V3, [X31 + 0x4D]
	0x0398478C STR V2, [X31 + 0x4C]
	0x03984790 BL 0x3C1015C
	0x03984794 LDR V0, [X31 + 0x50]
	0x03984798 LDR V1, [X31 + 0x51]
	0x0398479C LDR V2, [X31 + 0x52]
	0x039847A0 LDR V3, [X31 + 0x53]
	0x039847A4 STR V0, [X31 + 0x54]
	0x039847A8 STR V1, [X31 + 0x55]
	0x039847AC STR V2, [X31 + 0x56]
	0x039847B0 STR V3, [X31 + 0x57]
	0x039847B4 CBZ X26, 0x3984C90
	0x039847B8 LDR V0, [X31 + 0x54]
	0x039847BC LDR V1, [X31 + 0x55]
	0x039847C0 LDR V2, [X31 + 0x56]
	0x039847C4 LDR V3, [X31 + 0x57]
	0x039847C8 STR V0, [X31 + 0x48]
	0x039847CC STR V1, [X31 + 0x49]
	0x039847D0 STR V2, [X31 + 0x4A]
	0x039847D4 STR V3, [X31 + 0x4B]
	0x039847D8 LDR W8, [X26 + 0x18]
	0x039847DC CMP X21, X8
	0x039847E0 B.CS 0x3984C94
	0x039847E4 LDR V0, [X31 + 0x4A]
	0x039847E8 LDR V1, [X31 + 0x4B]
	0x039847EC LDR V2, [X31 + 0x48]
	0x039847F0 LDR V3, [X31 + 0x49]
	0x039847F4 ADD X8, X26, X25
	0x039847F8 STP V0, V1, [X8 + 0x20]
	0x039847FC STP V2, V3, [X8]
	0x03984800 LDR X8, [X23]
	0x03984804 LDR X8, [X8 + 0xB8]
	0x03984808 LDR X9, [X8 + 0x48]
	0x0398480C CBZ X9, 0x3984C90
	0x03984810 LDR W10, [X9 + 0x18]
	0x03984814 CMP X21, X10
	0x03984818 B.CS 0x3984C94
	0x0398481C ADD X9, X9, X25
	0x03984820 LDP V0, V1, [X9 + 0x20]
	0x03984824 LDP V2, V3, [X9]
	0x03984828 LDR X26, [X8 + 0x58]
	0x0398482C STR V1, [X31 + 0x53]
	0x03984830 STR V0, [X31 + 0x52]
	0x03984834 STR V3, [X31 + 0x51]
	0x03984838 STR V2, [X31 + 0x50]
	0x0398483C LDR X8, [X8 + 0x38]
	0x03984840 CBZ X8, 0x3984C90
	0x03984844 LDR W9, [X8 + 0x18]
	0x03984848 CMP X21, X9
	0x0398484C B.CS 0x3984C94
	0x03984850 ADD X8, X8, X25
	0x03984854 LDP V2, V3, [X8]
	0x03984858 LDP V4, V5, [X8 + 0x20]
	0x0398485C LDR V0, [X31 + 0x50]
	0x03984860 LDR V1, [X31 + 0x51]
	0x03984864 STR V3, [X31 + 0x45]
	0x03984868 STR V5, [X31 + 0x47]
	0x0398486C STR V4, [X31 + 0x46]
	0x03984870 STR V2, [X31 + 0x44]
	0x03984874 STP V0, V1, [X31 + 0x380]
	0x03984878 LDR V0, [X31 + 0x52]
	0x0398487C LDR V1, [X31 + 0x53]
	0x03984880 LDR V2, [X31 + 0x46]
	0x03984884 LDR V3, [X31 + 0x47]
	0x03984888 LDR V4, [X31 + 0x44]
	0x0398488C LDR V5, [X31 + 0x45]
	0x03984890 ADD X8, X31, 0x3C0
	0x03984894 ADD X0, X31, 0x380
	0x03984898 ADD X1, X31, 0x340
	0x0398489C MOV X2, X31
	0x039848A0 STP V0, V1, [X31 + 0x3A0]
	0x039848A4 STP V2, V3, [X31 + 0x360]
	0x039848A8 STP V4, V5, [X31 + 0x340]
	0x039848AC BL 0x3C27F74
	0x039848B0 LDP V0, V1, [X31 + 0x3C0]
	0x039848B4 LDP V2, V3, [X31 + 0x3E0]
	0x039848B8 STR V0, [X31 + 0x40]
	0x039848BC STR V1, [X31 + 0x41]
	0x039848C0 STR V2, [X31 + 0x42]
	0x039848C4 STR V3, [X31 + 0x43]
	0x039848C8 CBZ X26, 0x3984C90
	0x039848CC LDR V0, [X31 + 0x40]
	0x039848D0 LDR V1, [X31 + 0x41]
	0x039848D4 LDR V2, [X31 + 0x42]
	0x039848D8 LDR V3, [X31 + 0x43]
	0x039848DC STP V0, V1, [X31 + 0x300]
	0x039848E0 STP V2, V3, [X31 + 0x320]
	0x039848E4 LDR W8, [X26 + 0x18]
	0x039848E8 CMP X21, X8
	0x039848EC B.CS 0x3984C94
	0x039848F0 LDP V0, V1, [X31 + 0x320]
	0x039848F4 LDP V2, V3, [X31 + 0x300]
	0x039848F8 ADD X8, X26, X25
	0x039848FC STP V0, V1, [X8 + 0x20]
	0x03984900 STP V2, V3, [X8]
	0x03984904 LDR X8, [X23]
	0x03984908 LDR X8, [X8 + 0xB8]
	0x0398490C LDR X9, [X8 + 0x28]
	0x03984910 CBZ X9, 0x3984C90
	0x03984914 LDR W10, [X9 + 0x18]
	0x03984918 CMP X21, X10
	0x0398491C B.CS 0x3984C94
	0x03984920 ADD X9, X9, X25
	0x03984924 LDP V0, V1, [X9 + 0x20]
	0x03984928 LDP V2, V3, [X9]
	0x0398492C LDR X26, [X8 + 0x30]
	0x03984930 ADD X8, X31, 0x2C0
	0x03984934 ADD X0, X31, 0x280
	0x03984938 MOV X1, X31
	0x0398493C STP V0, V1, [X31 + 0x2A0]
	0x03984940 STP V2, V3, [X31 + 0x280]
	0x03984944 BL 0x3C2711C
	0x03984948 LDP V0, V1, [X31 + 0x2C0]
	0x0398494C LDP V2, V3, [X31 + 0x2E0]
	0x03984950 STP V0, V1, [X31 + 0x3C0]
	0x03984954 STP V2, V3, [X31 + 0x3E0]
	0x03984958 CBZ X26, 0x3984C90
	0x0398495C LDP V0, V1, [X31 + 0x3C0]
	0x03984960 LDP V2, V3, [X31 + 0x3E0]
	0x03984964 STP V0, V1, [X31 + 0x240]

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X24
	012 Move [X31+88], X23
	013 Move [X31+96], X22
	014 Move [X31+104], X21
	015 Move [X31+112], X20
	016 Move [X31+120], X19
	017 Subtract X31, X31, 800
	018 Move V10, V0
	019 Move X21, X1
	020 NotImplemented "Instruction MOVI not yet implemented."
	021 Move X1, X31
	022 Move V8, V2
	023 Move V9, V1
	024 Move X22, X0
	025 Move X19, X8
	026 Move [X31+768], V0
	027 Move [X31+776], V0
	028 Move [X31+736], V0
	029 Move [X31+744], V0
	030 Move [X31+704], V0
	031 Move [X31+712], V0
	032 Move [X31+672], V0
	033 Move [X31+680], V0
	034 Call Component.get_transform, X0
	035 Compare X21, 0
	036 JumpIfEqual {649}
	037 Move X20, X0
	038 Move X0, X21
	039 Move X1, X31
	040 Call Component.get_transform, X0
	041 Compare X20, 0
	042 JumpIfEqual {649}
	043 Move X1, X0
	044 Move X0, X20
	045 Move X2, X31
	046 Call Transform.IsChildOf, X0, X1
	047 Move X20, 0x770000
	048 Move X20, [X20+1440]
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {96}
	053 Move X21, 0xA55000
	054 Move W8, [X21+1926]
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, 0x770000
	058 Move X0, [X0+1440]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X21+1926], W8
	062 Move X8, [X20]
	063 Move X21, 0xA55000
	064 Move W9, [X21+2928]
	065 Move X8, [X8+184]
	066 Move V9, [X8+24]
	067 Move V8, [X8+32]
	068 Compare W9, 0
	069 JumpIfNotEqual {76}
	070 Move X0, X20
	071 Call 0x1C17CF4
	072 Move X8, [X20]
	073 Move W9, 1
	074 Move [X21+2928], W9
	075 Move X8, [X8+184]
	076 Move X21, 0xA55000
	077 NotImplemented "Instruction LDUR not yet implemented."
	078 Move W9, [X21+2591]
	079 Move V11, [X8+68]
	080 Compare W9, 0
	081 JumpIfNotEqual {88}
	082 Move X0, X20
	083 Call 0x1C17CF4
	084 Move X8, [X20]
	085 Move W9, 1
	086 Move [X21+2591], W9
	087 Move X8, [X8+184]
	088 Move V0, [X8+72]
	089 Move V1, [X8+80]
	090 Move [X19], D9
	091 Move [X19+8], S8
	092 Move [X19+12], D10
	093 Move [X19+20], S11
	094 Move [X19+24], D0
	095 Move [X19+32], S1
	096 Add X8, X31, 608
	097 Move X0, X21
	098 Move X1, X31
	099 Call Camera.get_cameraToWorldMatrix, X0
	100 Move V0, [X31+608]
	101 Move V1, [X31+624]
	102 Move V2, [X31+640]
	103 Move V3, [X31+656]
	104 Move X23, -48861184
	105 Move [X31+736], V0
	106 Move [X31+744], V1
	107 Move [X31+768], V2
	108 Move [X31+776], V3
	109 Move W8, [X22+36]
	110 Move X22, 0x770000
	111 Move X22, [X22+1448]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X31
	114 Call Camera.get_main
	115 Compare X0, 0
	116 JumpIfEqual {649}
	117 Move X1, X31
	118 Call Component.get_transform, X0
	119 Compare X0, 0
	120 JumpIfEqual {649}
	121 Move X1, X31
	122 Call Transform.get_up, X0
	123 Move V11, V0
	124 Move V12, V1
	125 Move V13, V2
	126 Add X8, X31, 544
	127 Move S0, 1
	128 Move S1, 1
	129 Move S2, -1
	130 Move X0, X31
	131 Call Matrix4x4.Scale, X0
	132 Move V0, [X31+544]
	133 Move V1, [X31+560]
	134 Move V2, [X31+576]
	135 Move V3, [X31+592]
	136 Move X0, X21
	137 Move X1, X31
	138 Move [X31+608], V0
	139 Move [X31+616], V1
	140 Move [X31+640], V2
	141 Move [X31+648], V3
	142 Call Component.get_transform, X0
	143 Compare X0, 0
	144 JumpIfEqual {649}
	145 Move X1, X31
	146 Call Transform.get_position, X0
	147 Add X8, X31, 544
	148 Move V3, V10
	149 Move V4, V9
	150 Move V5, V8
	151 Move X0, X31
	152 Move [X31+4], S12
	153 Move [X31+12], S13
	154 Move [X31], S11
	155 Call Matrix4x4.LookAt, X0, X1, X2
	156 Move V0, [X31+544]
	157 Move V1, [X31+560]
	158 Move V2, [X31+576]
	159 Move V3, [X31+592]
	160 Add X8, X31, 544
	161 Add X0, X31, 672
	162 Move X1, X31
	163 Move [X31+672], V0
	164 Move [X31+680], V1
	165 Move [X31+704], V2
	166 Move [X31+712], V3
	167 Call Matrix4x4.get_inverse, X0
	168 Move V0, [X31+544]
	169 Move V1, [X31+560]
	170 Move V2, [X31+576]
	171 Move V3, [X31+592]
	172 Add X8, X31, 544
	173 Add X0, X31, 480
	174 Move [X31+416], V0
	175 Move [X31+424], V1
	176 Move V0, [X31+608]
	177 Move V1, [X31+624]
	178 Move [X31+448], V2
	179 Move [X31+456], V3
	180 Move V2, [X31+640]
	181 Move V3, [X31+656]
	182 Add X1, X31, 416
	183 Move [X31+480], V0
	184 Move [X31+488], V1
	185 Move [X31+512], V2
	186 Move [X31+520], V3
	187 Move X0, X21
	188 Move X1, X31
	189 Call Camera.get_orthographic, X0
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfEqual {372}
	194 Move X0, X21
	195 Move X1, X31
	196 Call Component.get_transform, X0
	197 Compare X0, 0
	198 JumpIfEqual {649}
	199 Move X1, X31
	200 Call Transform.get_position, X0
	201 Move X8, -48865280
	202 Subtract S0, S0, S10
	203 Subtract S1, S1, S9
	204 Move V3, [X8+3872]
	205 Subtract S2, S2, S8
	206 Multiply S0, S0, S0
	207 Multiply S1, S1, S1
	208 Add S0, S0, S1
	209 Multiply S1, S2, S2
	210 Add S0, S1, S0
	211 NotImplemented "Instruction FCMP not yet implemented."
	212 Move X0, X21
	213 Move X1, X31
	214 Call Component.get_transform, X0
	215 Compare X0, 0
	216 JumpIfEqual {649}
	217 Move X1, X31
	218 Call Transform.get_position, X0
	219 Move X24, 0xA55000
	220 Move W8, [X24+1925]
	221 Move V11, V0
	222 Move V12, V1
	223 Move V13, V2
	224 Compare W8, 0
	225 JumpIfNotEqual {231}
	226 Move X0, 0x770000
	227 Move X0, [X0+1448]
	228 Call 0x1C17CF4
	229 Move W8, 1
	230 Move [X24+1925], W8
	231 Move X0, [X22]
	232 Subtract S10, S10, S11
	233 Subtract S9, S9, S12
	234 Subtract S8, S8, S13
	235 Move W8, [X0+224]
	236 Compare W8, 0
	237 JumpIfNotEqual {239}
	238 Call 0x1C17DFC
	239 Multiply S0, S10, S10
	240 Multiply S1, S9, S9
	241 Move V3, [X23+380]
	242 Add S0, S0, S1
	243 Multiply S1, S8, S8
	244 Add S0, S1, S0
	245 NotImplemented "Instruction FSQRT not yet implemented."
	246 NotImplemented "Instruction FCMP not yet implemented."
	247 NotImplemented "Instruction FDIV not yet implemented."
	248 NotImplemented "Instruction FDIV not yet implemented."
	249 NotImplemented "Instruction FDIV not yet implemented."
	250 Move X24, 0xA55000
	251 Move W8, [X24+1923]
	252 Compare W8, 0
	253 JumpIfNotEqual {259}
	254 Move X0, 0x770000
	255 Move X0, [X0+1440]
	256 Call 0x1C17CF4
	257 Move W8, 1
	258 Move [X24+1923], W8
	259 Move X8, [X20]
	260 Move X8, [X8+184]
	261 Move S0, [X8]
	262 Move S1, [X8+4]
	263 Move V2, [X8+8]
	264 Move X0, X31
	265 Call Quaternion.LookRotation, X0
	266 Move V8, V0
	267 Move V9, V1
	268 Move V10, V2
	269 Add X8, X31, 544
	270 Move S0, 1
	271 Move S1, 1
	272 Move S2, -1
	273 Move X0, X31
	274 Move V11, V3
	275 Call Matrix4x4.Scale, X0
	276 Move V0, [X31+544]
	277 Move V1, [X31+560]
	278 Move V2, [X31+576]
	279 Move V3, [X31+592]
	280 Move X0, X21
	281 Move X1, X31
	282 Move [X31+608], V0
	283 Move [X31+616], V1
	284 Move [X31+640], V2
	285 Move [X31+648], V3
	286 Call Component.get_transform, X0
	287 Compare X0, 0
	288 JumpIfEqual {649}
	289 Move X1, X31
	290 Call Transform.get_position, X0
	291 Move X21, 0xA55000
	292 Move W8, [X21+2139]
	293 Move V12, V0
	294 Move V13, V1
	295 Move V14, V2
	296 Compare W8, 0
	297 JumpIfNotEqual {303}
	298 Move X0, 0x770000
	299 Move X0, [X0+1440]
	300 Call 0x1C17CF4
	301 Move W8, 1
	302 Move [X21+2139], W8
	303 Move X8, [X20]
	304 Move V1, V13
	305 Move V2, V14
	306 Move V3, V8
	307 Move X8, [X8+184]
	308 Move V4, V9
	309 Move V5, V10
	310 Move V6, V11
	311 Move V0, [X8+20]
	312 NotImplemented "Instruction LDUR not yet implemented."
	313 Add X8, X31, 544
	314 Move X0, X31
	315 Move [X31+8], S0
	316 Move V0, V12
	317 Move [X31], X9
	318 Call Matrix4x4.TRS, X0, X1, X2
	319 Move V0, [X31+544]
	320 Move V1, [X31+560]
	321 Move V2, [X31+576]
	322 Move V3, [X31+592]
	323 Add X8, X31, 544
	324 Add X0, X31, 672
	325 Move X1, X31
	326 Move [X31+672], V0
	327 Move [X31+680], V1
	328 Move [X31+704], V2
	329 Move [X31+712], V3
	330 Call Matrix4x4.get_inverse, X0
	331 Move V0, [X31+544]
	332 Move V1, [X31+560]
	333 Move V2, [X31+576]
	334 Move V3, [X31+592]
	335 Add X8, X31, 544
	336 Add X0, X31, 352
	337 Move [X31+288], V0
	338 Move [X31+296], V1
	339 Move V0, [X31+608]
	340 Move V1, [X31+624]
	341 Move [X31+320], V2
	342 Move [X31+328], V3
	343 Move V2, [X31+640]
	344 Move V3, [X31+656]
	345 Add X1, X31, 288
	346 Move [X31+352], V0
	347 Move [X31+360], V1
	348 Move [X31+384], V2
	349 Move [X31+392], V3
	350 Move X2, X31
	351 Call Matrix4x4.op_Multiply, X0, X1
	352 Move V0, [X31+544]
	353 Move V1, [X31+560]
	354 Move V2, [X31+576]
	355 Move V3, [X31+592]
	356 Add X8, X31, 544
	357 Add X0, X31, 736
	358 Move X1, X31
	359 Move [X31+736], V0
	360 Move [X31+744], V1
	361 Move [X31+768], V2
	362 Move [X31+776], V3
	363 Call Matrix4x4.get_inverse, X0
	364 Move V0, [X31+544]
	365 Move V1, [X31+560]
	366 Move V2, [X31+576]
	367 Move V3, [X31+592]
	368 Move [X31+736], V0
	369 Move [X31+744], V1
	370 Move [X31+768], V2
	371 Move [X31+776], V3
	372 Move X21, 0xA55000
	373 Move V0, [X31+736]
	374 Move V1, [X31+752]
	375 Move V2, [X31+768]
	376 Move V3, [X31+784]
	377 Move W8, [X21+1926]
	378 Move [X31+608], V0
	379 Move [X31+616], V1
	380 Move [X31+640], V2
	381 Move [X31+648], V3
	382 Compare W8, 0
	383 JumpIfNotEqual {389}
	384 Move X0, 0x770000
	385 Move X0, [X0+1440]
	386 Call 0x1C17CF4
	387 Move W8, 1
	388 Move [X21+1926], W8
	389 Move X8, [X20]
	390 Move V3, [X31+608]
	391 Move V4, [X31+624]
	392 Move V5, [X31+640]
	393 Move V6, [X31+656]
	394 Add X0, X31, 224
	395 Move X8, [X8+184]
	396 Move X1, X31
	397 Move S0, [X8+24]
	398 Move S1, [X8+28]
	399 Move V2, [X8+32]
	400 Move [X31+224], V3
	401 Move [X31+232], V4
	402 Move S3, W31
	403 Move [X31+256], V5
	404 Move [X31+264], V6
	405 Call Matrix4x4.op_Multiply, X0, X1
	406 Move X21, 0xA55000
	407 Move W8, [X21+3673]
	408 Move V8, V0
	409 Move V9, V1
	410 Move V10, V2
	411 Move V11, V3
	412 Compare W8, 0
	413 JumpIfNotEqual {419}
	414 Move X0, 0x770000
	415 Move X0, [X0+1448]
	416 Call 0x1C17CF4
	417 Move W8, 1
	418 Move [X21+3673], W8
	419 Move X0, [X22]
	420 Move W8, [X0+224]
	421 Compare W8, 0
	422 JumpIfNotEqual {424}
	423 Call 0x1C17DFC
	424 Multiply S2, S8, S8
	425 Multiply S3, S9, S9
	426 Multiply S1, S10, S10
	427 Add S2, S2, S3
	428 Move V15, [X23+380]
	429 Multiply S0, S11, S11
	430 Add S1, S1, S2
	431 Add S0, S0, S1
	432 NotImplemented "Instruction FSQRT not yet implemented."
	433 NotImplemented "Instruction FCMP not yet implemented."
	434 NotImplemented "Instruction FDIV not yet implemented."
	435 NotImplemented "Instruction FDIV not yet implemented."
	436 Move [X31+24], S1
	437 Move [X31+32], S2
	438 NotImplemented "Instruction FDIV not yet implemented."
	439 Move X23, 0xA55000
	440 Move W8, [X23+3674]
	441 Compare W8, 0
	442 JumpIfNotEqual {448}
	443 Move X0, 0x777000
	444 Move X0, [X0+2464]
	445 Call 0x1C17CF4
	446 Move W8, 1
	447 Move [X23+3674], W8
	448 Move X8, 0x777000
	449 Move X8, [X8+2464]
	450 Move X8, [X8]
	451 Move X8, [X8+184]
	452 Move V1, [X8]
	453 Move V0, [X8+4]
	454 Move [X31+24], S0
	455 Move [X31+32], S1
	456 Move V0, [X8+8]
	457 Move X23, 0xA55000
	458 Move [X31+20], S0
	459 Move V0, [X31+736]
	460 Move V1, [X31+752]
	461 Move V2, [X31+768]
	462 Move V3, [X31+784]
	463 Move W8, [X23+2928]
	464 Move [X31+544], V0
	465 Move [X31+552], V1
	466 Move [X31+576], V2
	467 Move [X31+584], V3
	468 Compare W8, 0
	469 JumpIfNotEqual {475}
	470 Move X0, 0x770000
	471 Move X0, [X0+1440]
	472 Call 0x1C17CF4
	473 Move W8, 1
	474 Move [X23+2928], W8
	475 Move X8, [X20]
	476 Move V3, [X31+544]
	477 Move V4, [X31+560]
	478 Move V5, [X31+576]
	479 Move V6, [X31+592]
	480 Add X0, X31, 160
	481 Move X8, [X8+184]
	482 Move X1, X31
	483 Move S0, [X8+60]
	484 Move S1, [X8+64]
	485 Move V2, [X8+68]
	486 Move [X31+160], V3
	487 Move [X31+168], V4
	488 Move S3, W31
	489 Move [X31+192], V5
	490 Move [X31+200], V6
	491 Call Matrix4x4.op_Multiply, X0, X1
	492 Move W8, [X21+3673]
	493 Move V8, V0
	494 Move V9, V1
	495 Move V10, V2
	496 Move V11, V3
	497 Compare W8, 0
	498 JumpIfNotEqual {504}
	499 Move X0, 0x770000
	500 Move X0, [X0+1448]
	501 Call 0x1C17CF4
	502 Move W8, 1
	503 Move [X21+3673], W8
	504 Move X0, [X22]
	505 Move W8, [X0+224]
	506 Compare W8, 0
	507 JumpIfNotEqual {509}
	508 Call 0x1C17DFC
	509 Multiply S2, S8, S8
	510 Multiply S3, S9, S9
	511 Multiply S1, S10, S10
	512 Add S2, S2, S3
	513 Multiply S0, S11, S11
	514 Add S1, S1, S2
	515 Add S0, S0, S1
	516 NotImplemented "Instruction FSQRT not yet implemented."
	517 NotImplemented "Instruction FCMP not yet implemented."
	518 NotImplemented "Instruction FDIV not yet implemented."
	519 NotImplemented "Instruction FDIV not yet implemented."
	520 NotImplemented "Instruction FDIV not yet implemented."
	521 Move X23, 0xA55000
	522 Move W8, [X23+3674]
	523 Compare W8, 0
	524 JumpIfNotEqual {530}
	525 Move X0, 0x777000
	526 Move X0, [X0+2464]
	527 Call 0x1C17CF4
	528 Move W8, 1
	529 Move [X23+3674], W8
	530 Move X8, 0x777000
	531 Move X8, [X8+2464]
	532 Move X8, [X8]
	533 Move X8, [X8+184]
	534 Move S12, [X8]
	535 Move S13, [X8+4]
	536 Move V14, [X8+8]
	537 Move X23, 0xA55000
	538 Move V0, [X31+736]
	539 Move V1, [X31+752]
	540 Move V2, [X31+768]
	541 Move V3, [X31+784]
	542 Move W8, [X23+2591]
	543 Move [X31+96], V0
	544 Move [X31+104], V1
	545 Move [X31+128], V2
	546 Move [X31+136], V3
	547 Compare W8, 0
	548 JumpIfNotEqual {554}
	549 Move X0, 0x770000
	550 Move X0, [X0+1440]
	551 Call 0x1C17CF4
	552 Move W8, 1
	553 Move [X23+2591], W8
	554 Move X8, [X20]
	555 Move V3, [X31+96]
	556 Move V4, [X31+112]
	557 Move V5, [X31+128]
	558 Move V6, [X31+144]
	559 Add X0, X31, 32
	560 Move X8, [X8+184]
	561 Move X1, X31
	562 Move S0, [X8+72]
	563 Move S1, [X8+76]
	564 Move V2, [X8+80]
	565 Move [X31+32], V3
	566 Move [X31+40], V4
	567 Move S3, W31
	568 Move [X31+64], V5
	569 Move [X31+72], V6
	570 Call Matrix4x4.op_Multiply, X0, X1
	571 Move W8, [X21+3673]
	572 Move V8, V0
	573 Move V9, V1
	574 Move V10, V2
	575 Move V11, V3
	576 Compare W8, 0
	577 JumpIfNotEqual {583}
	578 Move X0, 0x770000
	579 Move X0, [X0+1448]
	580 Call 0x1C17CF4
	581 Move W8, 1
	582 Move [X21+3673], W8
	583 Move X0, [X22]
	584 Move W8, [X0+224]
	585 Compare W8, 0
	586 JumpIfNotEqual {588}
	587 Call 0x1C17DFC
	588 Multiply S2, S8, S8
	589 Multiply S3, S9, S9
	590 Multiply S1, S10, S10
	591 Add S2, S2, S3
	592 Multiply S0, S11, S11
	593 Add S1, S1, S2
	594 Add S0, S0, S1
	595 NotImplemented "Instruction FSQRT not yet implemented."
	596 NotImplemented "Instruction FCMP not yet implemented."
	597 NotImplemented "Instruction FDIV not yet implemented."
	598 Move S4, [X31+24]
	599 Move S3, [X31+28]
	600 Move V8, [X31+20]
	601 NotImplemented "Instruction FDIV not yet implemented."
	602 NotImplemented "Instruction FDIV not yet implemented."
	603 Move X20, 0xA55000
	604 Move W8, [X20+3674]
	605 Move V8, [X31+20]
	606 Compare W8, 0
	607 JumpIfNotEqual {613}
	608 Move X0, 0x777000
	609 Move X0, [X0+2464]
	610 Call 0x1C17CF4
	611 Move W8, 1
	612 Move [X20+3674], W8
	613 Move X8, 0x777000
	614 Move X8, [X8+2464]
	615 Move S4, [X31+24]
	616 Move S3, [X31+28]
	617 Move X8, [X8]
	618 Move X8, [X8+184]
	619 Move S0, [X8]
	620 Move S1, [X8+4]
	621 Move V2, [X8+8]
	622 Move [X19], S3
	623 Move [X19+8], S4
	624 Move [X19+8], S8
	625 Move [X19+16], S12
	626 Move [X19+16], S13
	627 Move [X19+24], S14
	628 Move [X19+24], S0
	629 Move [X19+32], S1
	630 Move [X19+32], S2
	631 Add X31, X31, 800
	632 Move X20, [X31+112]
	633 Move X19, [X31+120]
	634 Move X22, [X31+96]
	635 Move X21, [X31+104]
	636 Move X24, [X31+80]
	637 Move X23, [X31+88]
	638 Move X29, [X31+64]
	639 Move X30, [X31+72]
	640 Move D9, [X31+48]
	641 Move D8, [X31+56]
	642 Move D11, [X31+32]
	643 Move D10, [X31+40]
	644 Move D13, [X31+16]
	645 Move D12, [X31+24]
	646 Move D15, [X31+128]
	647 Move D14, [X31+136]
	648 Return X0
	649 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x03984CAC RET
	0x03984CB0 SUB X31, X31, 0x180
	0x03984CB4 STP X29, X30, [X31 + 0x150]
	0x03984CB8 STP X22, X21, [X31 + 0x160]
	0x03984CBC STP X20, X19, [X31 + 0x170]
	0x03984CC0 ADRP X22, 0xA5D000
	0x03984CC4 LDRB W9, [X22 + 0xA6C]
	0x03984CC8 MOV W20, W1
	0x03984CCC MOV X21, X0
	0x03984CD0 MOV X19, X8
	0x03984CD4 TBNZ X9, 0x0, 0x3984CEC
	0x03984CD8 ADRP X0, 0x7CC000
	0x03984CDC LDR X0, [X0 + 0x4B0]
	0x03984CE0 BL 0x1C16CF4
	0x03984CE4 MOVZ W8, 0x1
	0x03984CE8 STRB W8, [X22 + 0xA6C]
	0x03984CEC LDR X0, [X21 + 0x10]
	0x03984CF0 CBZ X0, 0x3984D44
	0x03984CF4 ADRP X8, 0x7CC000
	0x03984CF8 LDR X8, [X8 + 0x4B0]
	0x03984CFC MOV W1, W20
	0x03984D00 ADD X21, X31, 0xA8
	0x03984D04 LDR X2, [X8]
	0x03984D08 ADD X8, X31, 0x0
	0x03984D0C BL 0x30DFDE8
	0x03984D10 ADD X0, X31, 0xA8
	0x03984D14 ADD X1, X31, 0x0
	0x03984D18 MOVZ W2, 0xA8
	0x03984D1C BL 0x3EB1AC0
	0x03984D20 LDP V1, V0, [X21 + 0x60]
	0x03984D24 LDP V3, V2, [X21 + 0x40]
	0x03984D28 LDP X22, X21, [X31 + 0x160]
	0x03984D2C LDP X29, X30, [X31 + 0x150]
	0x03984D30 STP V1, V0, [X19 + 0x20]
	0x03984D34 STP V3, V2, [X19]
	0x03984D38 LDP X20, X19, [X31 + 0x170]
	0x03984D3C ADD X31, X31, 0x180
	0x03984D40 RET
	0x03984D44 BL 0x1C16F20
	0x03984D48 SUB X31, X31, 0x180
	0x03984D4C STP X29, X30, [X31 + 0x150]
	0x03984D50 STP X22, X21, [X31 + 0x160]
	0x03984D54 STP X20, X19, [X31 + 0x170]
	0x03984D58 ADRP X22, 0xA5D000
	0x03984D5C LDRB W9, [X22 + 0xA6B]
	0x03984D60 MOV W20, W1
	0x03984D64 MOV X21, X0
	0x03984D68 MOV X19, X8
	0x03984D6C TBNZ X9, 0x0, 0x3984D84
	0x03984D70 ADRP X0, 0x7CC000
	0x03984D74 LDR X0, [X0 + 0x4B0]
	0x03984D78 BL 0x1C16CF4
	0x03984D7C MOVZ W8, 0x1
	0x03984D80 STRB W8, [X22 + 0xA6B]
	0x03984D84 LDR X0, [X21 + 0x10]
	0x03984D88 CBZ X0, 0x3984DDC
	0x03984D8C ADRP X8, 0x7CC000
	0x03984D90 LDR X8, [X8 + 0x4B0]
	0x03984D94 MOV W1, W20
	0x03984D98 ADD X21, X31, 0xA8
	0x03984D9C LDR X2, [X8]
	0x03984DA0 ADD X8, X31, 0x0
	0x03984DA4 BL 0x30DFDE8
	0x03984DA8 ADD X0, X31, 0xA8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xA5E000
	006 Move X21, 0x770000
	007 Move W8, [X20+2638]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x770000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2638], W8
	019 Move X0, [X21]
	020 Move X20, [X19+40]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {50}
	033 Move X0, X31
	034 Call Camera.get_main
	035 Move X8, [X21]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Equality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {55}
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return 
	055 Move X0, [X19+40]
	056 Compare X0, 0
	057 JumpIfEqual {91}
	058 Move X1, X31
	059 Call Transform.get_hasChanged, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {78}
	064 Move X0, X31
	065 Call Camera.get_main
	066 Compare X0, 0
	067 JumpIfEqual {91}
	068 Move X1, X31
	069 Call Component.get_transform, X0
	070 Compare X0, 0
	071 JumpIfEqual {91}
	072 Move X1, X31
	073 Call Transform.get_hasChanged, X0
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {50}
	078 Move X0, X31
	079 Call Camera.get_main
	080 Move X20, X0
	081 Move X0, X19
	082 Call LightAnchor.get_anchorPosition, X0
	083 Move X0, X19
	084 Move X1, X20
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Call LightAnchor.UpdateTransform, X0, X1, X2
	090 Return 
	091 Call 0x1C17F20

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x03984DAC ADD X1, X31, 0x0
	0x03984DB0 MOVZ W2, 0xA8
	0x03984DB4 BL 0x3EB1AC0
	0x03984DB8 LDP V1, V0, [X21 + 0x20]
	0x03984DBC LDP V3, V2, [X21]
	0x03984DC0 LDP X22, X21, [X31 + 0x160]
	0x03984DC4 LDP X29, X30, [X31 + 0x150]
	0x03984DC8 STP V1, V0, [X19 + 0x20]
	0x03984DCC STP V3, V2, [X19]
	0x03984DD0 LDP X20, X19, [X31 + 0x170]
	0x03984DD4 ADD X31, X31, 0x180
	0x03984DD8 RET
	0x03984DDC BL 0x1C16F20
	0x03984DE0 STR X30, [X31 - 0x10]!
	0x03984DE4 BL 0x398632C
	0x03984DE8 CMP W0, 0x1
	0x03984DEC CSET W0, GT
	0x03984DF0 LDR X30, [X31], #0x10
	0x03984DF4 RET
	0x03984DF8 STP X29, X30, [X31 - 0x60]!
	0x03984DFC STP X28, X27, [X31 + 0x10]
	0x03984E00 STP X26, X25, [X31 + 0x20]
	0x03984E04 STP X24, X23, [X31 + 0x30]
	0x03984E08 STP X22, X21, [X31 + 0x40]
	0x03984E0C STP X20, X19, [X31 + 0x50]
	0x03984E10 ADRP X20, 0xA5D000
	0x03984E14 ADRP X22, 0x7CC000
	0x03984E18 ADRP X19, 0x7CC000
	0x03984E1C ADRP X29, 0x7CC000
	0x03984E20 ADRP X28, 0x7CC000
	0x03984E24 ADRP X27, 0x7CC000
	0x03984E28 ADRP X26, 0x7CC000
	0x03984E2C ADRP X25, 0x7CC000
	0x03984E30 ADRP X24, 0x7CC000
	0x03984E34 ADRP X23, 0x7CC000
	0x03984E38 ADRP X21, 0x773000
	0x03984E3C LDR X22, [X22 + 0x4B8]
	0x03984E40 LDR X19, [X19 + 0x4A8]
	0x03984E44 LDR X29, [X29 + 0x4C0]
	0x03984E48 LDR X28, [X28 + 0x4C8]
	0x03984E4C LDR X27, [X27 + 0x4D0]
	0x03984E50 LDR X26, [X26 + 0x4D8]
	0x03984E54 LDR X25, [X25 + 0x4E0]
	0x03984E58 LDRB W8, [X20 + 0xA53]
	0x03984E5C LDR X24, [X24 + 0x4E8]
	0x03984E60 LDR X23, [X23 + 0x4F0]
	0x03984E64 LDR X21, [X21 + 0x988]
	0x03984E68 TBNZ X8, 0x0, 0x3984F04
	0x03984E6C ADRP X0, 0x773000
	0x03984E70 LDR X0, [X0 + 0x988]
	0x03984E74 BL 0x1C16CF4
	0x03984E78 ADRP X0, 0x7CA000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X21, 0xA5E000
	007 Move X20, 0x770000
	008 Move W8, [X21+2639]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x770000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2639], W8
	020 Move X0, X31
	021 Call Camera.get_main
	022 Move X8, [X20]
	023 Move X20, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {59}
	037 Move X0, X19
	038 Call LightAnchor.get_anchorPosition, X0
	039 Add X8, X31, 8
	040 Move X0, X19
	041 Move X1, X20
	042 Call LightAnchor.GetWorldSpaceAxes, X0, X1, X2
	043 Move X0, X19
	044 Move X1, X31
	045 Call Component.get_transform, X0
	046 Compare X0, 0
	047 JumpIfEqual {65}
	048 Move X1, X31
	049 Call Transform.get_position, X0
	050 Move X19, 0xA55000
	051 Move W8, [X19+3641]
	052 Compare W8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, 0x777000
	055 Move X0, [X0+1208]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X19+3641], W8
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X30, [X31+48]
	062 Move X21, [X31+56]
	063 Add X31, X31, 80
	064 Return 
	065 Call 0x1C17F20

Method: System.Void UpdateTransform(UnityEngine.Vector3 up, UnityEngine.Vector3 right, UnityEngine.Vector3 forward, UnityEngine.Vector3 anchor)

Disassembly:
	0x039849D0 LDP V0, V1, [X31 + 0x200]
	0x039849D4 LDP V2, V3, [X31 + 0x220]
	0x039849D8 STP V0, V1, [X31 + 0x2C0]
	0x039849DC STP V2, V3, [X31 + 0x2E0]
	0x039849E0 CBZ X26, 0x3984C90
	0x039849E4 LDP V0, V1, [X31 + 0x2C0]
	0x039849E8 LDP V2, V3, [X31 + 0x2E0]
	0x039849EC STP V0, V1, [X31 + 0x180]
	0x039849F0 STP V2, V3, [X31 + 0x1A0]
	0x039849F4 LDR W8, [X26 + 0x18]
	0x039849F8 CMP X21, X8
	0x039849FC B.CS 0x3984C94
	0x03984A00 LDP V0, V1, [X31 + 0x1A0]
	0x03984A04 LDP V2, V3, [X31 + 0x180]
	0x03984A08 ADD X8, X26, X25
	0x03984A0C STP V0, V1, [X8 + 0x20]
	0x03984A10 STP V2, V3, [X8]
	0x03984A14 LDR X8, [X23]
	0x03984A18 LDR X8, [X8 + 0xB8]
	0x03984A1C LDR X9, [X8 + 0x48]
	0x03984A20 CBZ X9, 0x3984C90
	0x03984A24 LDR W10, [X9 + 0x18]
	0x03984A28 CMP X21, X10
	0x03984A2C B.CS 0x3984C94
	0x03984A30 ADD X9, X9, X25
	0x03984A34 LDP V0, V1, [X9 + 0x20]
	0x03984A38 LDP V2, V3, [X9]
	0x03984A3C LDR X26, [X8 + 0x50]
	0x03984A40 ADD X8, X31, 0x140
	0x03984A44 ADD X0, X31, 0x100
	0x03984A48 MOV X1, X31
	0x03984A4C STP V0, V1, [X31 + 0x120]
	0x03984A50 STP V2, V3, [X31 + 0x100]
	0x03984A54 BL 0x3C2711C
	0x03984A58 LDP V0, V1, [X31 + 0x140]
	0x03984A5C LDP V2, V3, [X31 + 0x160]
	0x03984A60 STP V0, V1, [X31 + 0x200]
	0x03984A64 STP V2, V3, [X31 + 0x220]
	0x03984A68 CBZ X26, 0x3984C90
	0x03984A6C LDP V0, V1, [X31 + 0x200]
	0x03984A70 LDP V2, V3, [X31 + 0x220]
	0x03984A74 STP V0, V1, [X31 + 0xC0]
	0x03984A78 STP V2, V3, [X31 + 0xE0]
	0x03984A7C LDR W8, [X26 + 0x18]
	0x03984A80 CMP X21, X8
	0x03984A84 B.CS 0x3984C94
	0x03984A88 LDP V0, V1, [X31 + 0xE0]
	0x03984A8C LDP V2, V3, [X31 + 0xC0]
	0x03984A90 ADD X8, X26, X25
	0x03984A94 STP V0, V1, [X8 + 0x20]
	0x03984A98 STP V2, V3, [X8]
	0x03984A9C LDR X8, [X23]
	0x03984AA0 LDR X8, [X8 + 0xB8]
	0x03984AA4 LDR X9, [X8 + 0x58]
	0x03984AA8 CBZ X9, 0x3984C90
	0x03984AAC LDR W10, [X9 + 0x18]
	0x03984AB0 CMP X21, X10
	0x03984AB4 B.CS 0x3984C94
	0x03984AB8 ADD X9, X9, X25
	0x03984ABC LDP V0, V1, [X9 + 0x20]
	0x03984AC0 LDP V2, V3, [X9]
	0x03984AC4 LDR X26, [X8 + 0x60]
	0x03984AC8 ADD X8, X31, 0x80
	0x03984ACC ADD X0, X31, 0x40
	0x03984AD0 MOV X1, X31
	0x03984AD4 STP V0, V1, [X31 + 0x60]
	0x03984AD8 STP V2, V3, [X31 + 0x40]
	0x03984ADC BL 0x3C2711C
	0x03984AE0 LDP V0, V1, [X31 + 0x80]
	0x03984AE4 LDP V2, V3, [X31 + 0xA0]
	0x03984AE8 STP V0, V1, [X31 + 0x140]
	0x03984AEC STP V2, V3, [X31 + 0x160]
	0x03984AF0 CBZ X26, 0x3984C90
	0x03984AF4 LDP V0, V1, [X31 + 0x140]
	0x03984AF8 LDP V2, V3, [X31 + 0x160]
	0x03984AFC STP V0, V1, [X31]
	0x03984B00 STP V2, V3, [X31 + 0x20]
	0x03984B04 LDR W8, [X26 + 0x18]
	0x03984B08 CMP X21, X8
	0x03984B0C B.CS 0x3984C94
	0x03984B10 LDP V0, V1, [X31 + 0x20]
	0x03984B14 LDP V2, V3, [X31]
	0x03984B18 ADD X8, X26, X25
	0x03984B1C STP V0, V1, [X8 + 0x20]
	0x03984B20 STP V2, V3, [X8]
	0x03984B24 LDR X8, [X23]
	0x03984B28 LDR X9, [X8 + 0xB8]
	0x03984B2C LDR X8, [X9 + 0x40]
	0x03984B30 CBZ X8, 0x3984C90
	0x03984B34 LDR W10, [X8 + 0x18]
	0x03984B38 CMP X21, X10
	0x03984B3C B.CS 0x3984C94
	0x03984B40 LDR X26, [X9 + 0x68]
	0x03984B44 ADD X0, X8, X25
	0x03984B48 MOVZ W1, 0x3
	0x03984B4C MOV X2, X31
	0x03984B50 BL 0x3C27C24
	0x03984B54 CBZ X26, 0x3984C90
	0x03984B58 LDR W8, [X26 + 0x18]
	0x03984B5C CMP X21, X8
	0x03984B60 B.CS 0x3984C94
	0x03984B64 ADD X8, X26, X24
	0x03984B68 ADD X21, X21, 0x1
	0x03984B6C ADD X25, X25, 0x40
	0x03984B70 ADD X24, X24, 0x10
	0x03984B74 STP S0, S1, [X8 + 0x20]
	0x03984B78 STP S2, S3, [X8 + 0x28]
	0x03984B7C B 0x398465C
	0x03984B80 LDR W1, [X8]
	0x03984B84 LDR X2, [X8 + 0x28]
	0x03984B88 MOV X0, X19
	0x03984B8C MOV X3, X31
	0x03984B90 BL 0x3C4D47C
	0x03984B94 LDR X8, [X23]
	0x03984B98 MOV X0, X19
	0x03984B9C MOV X3, X31
	0x03984BA0 LDR X8, [X8 + 0xB8]
	0x03984BA4 LDR W1, [X8 + 0x4]
	0x03984BA8 LDR X2, [X8 + 0x30]
	0x03984BAC BL 0x3C4D47C
	0x03984BB0 LDR X8, [X23]
	0x03984BB4 MOV X0, X19
	0x03984BB8 MOV X3, X31
	0x03984BBC LDR X8, [X8 + 0xB8]
	0x03984BC0 LDR W1, [X8 + 0x8]
	0x03984BC4 LDR X2, [X8 + 0x38]
	0x03984BC8 BL 0x3C4D47C
	0x03984BCC LDR X8, [X23]
	0x03984BD0 MOV X0, X19
	0x03984BD4 MOV X3, X31
	0x03984BD8 LDR X8, [X8 + 0xB8]
	0x03984BDC LDR W1, [X8 + 0xC]
	0x03984BE0 LDR X2, [X8 + 0x40]
	0x03984BE4 BL 0x3C4D47C
	0x03984BE8 LDR X8, [X23]
	0x03984BEC MOV X0, X19
	0x03984BF0 MOV X3, X31
	0x03984BF4 LDR X8, [X8 + 0xB8]
	0x03984BF8 LDR W1, [X8 + 0x10]
	0x03984BFC LDR X2, [X8 + 0x48]
	0x03984C00 BL 0x3C4D47C
	0x03984C04 LDR X8, [X23]
	0x03984C08 MOV X0, X19
	0x03984C0C MOV X3, X31
	0x03984C10 LDR X8, [X8 + 0xB8]
	0x03984C14 LDR W1, [X8 + 0x14]
	0x03984C18 LDR X2, [X8 + 0x50]
	0x03984C1C BL 0x3C4D47C
	0x03984C20 LDR X8, [X23]
	0x03984C24 MOV X0, X19
	0x03984C28 MOV X3, X31
	0x03984C2C LDR X8, [X8 + 0xB8]
	0x03984C30 LDR W1, [X8 + 0x18]
	0x03984C34 LDR X2, [X8 + 0x58]
	0x03984C38 BL 0x3C4D47C
	0x03984C3C LDR X8, [X23]
	0x03984C40 MOV X0, X19
	0x03984C44 MOV X3, X31
	0x03984C48 LDR X8, [X8 + 0xB8]
	0x03984C4C LDR W1, [X8 + 0x1C]
	0x03984C50 LDR X2, [X8 + 0x60]
	0x03984C54 BL 0x3C4D47C
	0x03984C58 LDR X8, [X23]
	0x03984C5C MOV X0, X19
	0x03984C60 MOV X3, X31
	0x03984C64 LDR X8, [X8 + 0xB8]
	0x03984C68 LDR W1, [X8 + 0x20]
	0x03984C6C LDR X2, [X8 + 0x68]
	0x03984C70 BL 0x3C4D428
	0x03984C74 ADD X31, X31, 0x700
	0x03984C78 LDP X20, X19, [X31 + 0x40]
	0x03984C7C LDP X22, X21, [X31 + 0x30]
	0x03984C80 LDP X24, X23, [X31 + 0x20]
	0x03984C84 LDP X26, X25, [X31 + 0x10]
	0x03984C88 LDP X29, X30, [X31], #0x50
	0x03984C8C RET
	0x03984C90 BL 0x1C16F20
	0x03984C94 BL 0x1C16F28
	0x03984C98 STR X30, [X31 - 0x10]!
	0x03984C9C BL 0x398632C
	0x03984CA0 CMP W0, 0x0
	0x03984CA4 CSET W0, GT
	0x03984CA8 LDR X30, [X31], #0x10

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+112], X20
	012 Move [X31+120], X19
	013 Move V10, V3
	014 Move V3, V2
	015 Move V2, V1
	016 Move V6, [X31+152]
	017 Move V1, [X31+148]
	018 Move V9, V4
	019 Move V4, V0
	020 Move X19, X0
	021 Move [X31+20], S1
	022 Move [X31+28], S6
	023 Move V1, [X31+144]
	024 Move V6, [X31+136]
	025 Move V8, V5
	026 Move [X31+4], S4
	027 Move [X31+12], S2
	028 Move [X31+12], S3
	029 Move [X31+20], S1
	030 Move S13, [X31+128]
	031 Move S1, [X31+132]
	032 Move [X31+104], S1
	033 Move [X31+112], S6
	034 Move V1, [X0+60]
	035 Move X0, X31
	036 Move V0, V1
	037 Move V1, V4
	038 Call Quaternion.AngleAxis, V0, X0
	039 Move V11, V0
	040 Move V0, [X19+64]
	041 Move V12, V1
	042 Move V14, V2
	043 Move V15, V3
	044 Move V1, V10
	045 Move V2, V9
	046 Move V3, V8
	047 Move X0, X31
	048 Call Quaternion.AngleAxis, V0, X0
	049 Multiply S4, S15, S0
	050 Multiply S5, S11, S3
	051 Multiply S16, S15, S1
	052 Multiply S17, S12, S3
	053 Multiply S18, S14, S0
	054 Add S4, S4, S5
	055 Add S5, S16, S17
	056 Multiply S6, S12, S2
	057 Multiply S19, S11, S2
	058 Multiply S21, S11, S0
	059 Multiply S22, S15, S2
	060 Multiply S23, S15, S3
	061 Multiply S3, S14, S3
	062 Add S5, S18, S5
	063 Multiply S7, S14, S1
	064 Multiply S20, S11, S1
	065 Multiply S1, S12, S1
	066 Add S3, S22, S3
	067 Subtract S16, S23, S21
	068 Add S4, S6, S4
	069 Subtract S8, S5, S19
	070 Move S5, [X31+104]
	071 Move S6, [X31+108]
	072 Multiply S0, S12, S0
	073 Multiply S2, S14, S2
	074 Add S3, S20, S3
	075 Subtract S1, S16, S1
	076 Subtract S9, S4, S7
	077 Subtract S15, S3, S0
	078 Subtract S14, S1, S2
	079 Move V0, V9
	080 Move V1, V8
	081 Move V2, V15
	082 Move V3, V14
	083 Move V4, V13
	084 Move X0, X31
	085 Move [X31+28], S13
	086 Call Quaternion.op_Multiply, X0, X1
	087 Move V13, [X19+32]
	088 Move X0, X19
	089 Move X1, X31
	090 Move V10, V0
	091 Move V11, V1
	092 Move V12, V2
	093 Call Component.get_transform, X0
	094 Compare X0, 0
	095 JumpIfEqual {206}
	096 Move V2, [X31+24]
	097 Multiply S0, S12, S13
	098 Multiply S1, S11, S13
	099 Multiply S3, S10, S13
	100 Add S2, S2, S0
	101 Move V0, [X31+20]
	102 Move X1, X31
	103 Add S1, S0, S1
	104 Move V0, [X31+16]
	105 Add S0, S0, S3
	106 Call Transform.set_position, X0, X1
	107 Move V4, [X31+28]
	108 Move S5, [X31+104]
	109 Move S6, [X31+108]
	110 Move V0, V9
	111 Move V1, V8
	112 Move V2, V15
	113 Move V3, V14
	114 Move X0, X31
	115 Call Quaternion.op_Multiply, X0, X1
	116 Move X20, 0xA55000
	117 Move W8, [X20+1925]
	118 Move V11, V0
	119 Move V12, V1
	120 Move V13, V2
	121 Compare W8, 0
	122 JumpIfNotEqual {128}
	123 Move X0, 0x770000
	124 Move X0, [X0+1448]
	125 Call 0x1C17CF4
	126 Move W8, 1
	127 Move [X20+1925], W8
	128 Move X8, 0x770000
	129 Move X8, [X8+1448]
	130 Move X0, [X8]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Multiply S0, S11, S11
	136 Multiply S1, S12, S12
	137 Move X8, -48861184
	138 Add S0, S0, S1
	139 Move V1, [X8+380]
	140 Multiply S2, S13, S13
	141 Add S0, S2, S0
	142 NotImplemented "Instruction FSQRT not yet implemented."
	143 NotImplemented "Instruction FCMP not yet implemented."
	144 NotImplemented "Instruction FDIV not yet implemented."
	145 NotImplemented "Instruction FDIV not yet implemented."
	146 NotImplemented "Instruction FDIV not yet implemented."
	147 Move X20, 0xA55000
	148 Move W8, [X20+1923]
	149 Compare W8, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x770000
	152 Move X0, [X0+1440]
	153 Call 0x1C17CF4
	154 Move W8, 1
	155 Move [X20+1923], W8
	156 Move X8, 0x770000
	157 Move X8, [X8+1440]
	158 Move X8, [X8]
	159 Move X8, [X8+184]
	160 Move S0, [X8]
	161 Move S1, [X8+4]
	162 Move V2, [X8+8]
	163 Move S4, [X31+8]
	164 Move S5, [X31+12]
	165 Move V3, [X31+4]
	166 NotImplemented "Instruction FNEG not yet implemented."
	167 NotImplemented "Instruction FNEG not yet implemented."
	168 NotImplemented "Instruction FNEG not yet implemented."
	169 Move X0, X31
	170 Call Quaternion.LookRotation, X0, X1
	171 Move X0, X31
	172 Call Quaternion.Internal_ToEulerRad, X0
	173 Move X8, -48861184
	174 Move V3, [X8+1096]
	175 Move X0, X31
	176 Multiply S0, S0, S3
	177 Multiply S1, S1, S3
	178 Multiply S2, S2, S3
	179 Call Quaternion.Internal_MakePositive, X0
	180 Move V8, [X19+68]
	181 Move X0, X19
	182 Move X1, X31
	183 Move V9, V0
	184 Move V10, V1
	185 Call Component.get_transform, X0
	186 Compare X0, 0
	187 JumpIfEqual {206}
	188 Move V0, V9
	189 Move V1, V10
	190 Move V2, V8
	191 Move X20, [X31+112]
	192 Move X19, [X31+120]
	193 Move X30, [X31+96]
	194 Move D9, [X31+80]
	195 Move D8, [X31+88]
	196 Move D11, [X31+64]
	197 Move D10, [X31+72]
	198 Move D13, [X31+48]
	199 Move D12, [X31+56]
	200 Move D15, [X31+32]
	201 Move D14, [X31+40]
	202 Move X1, X31
	203 Add X31, X31, 128
	204 Call Transform.set_eulerAngles, X0, X1
	205 Return 
	206 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03984E7C LDR X0, [X0 + 0x48]
	0x03984E80 BL 0x1C16CF4

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

