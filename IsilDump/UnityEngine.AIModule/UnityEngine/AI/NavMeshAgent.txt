Type: UnityEngine.AI.NavMeshAgent

Method: System.Boolean SetDestination(UnityEngine.Vector3 target)

Disassembly:
	0x03BE23F8 ADRP X0, 0xFFFFFFFFFCF12000
	0x03BE23FC ADD X0, X0, 0xC13
	0x03BE2400 BL 0x1C16CB8
	0x03BE2404 MOV X3, X0
	0x03BE2408 STR X0, [X22 + 0x118]
	0x03BE240C MOV X0, X21
	0x03BE2410 MOV X1, X20
	0x03BE2414 MOV X2, X19
	0x03BE2418 LDP X20, X19, [X31 + 0x20]
	0x03BE241C LDP X22, X21, [X31 + 0x10]
	0x03BE2420 LDR X30, [X31], #0x30
	0x03BE2424 BR X3
	0x03BE2428 SUB X31, X31, 0x40
	0x03BE242C STR X30, [X31 + 0x30]
	0x03BE2430 LDUR V7, [X0 + 0x1C]
	0x03BE2434 LDP V17, V16, [X0]
	0x03BE2438 ADD X0, X31, 0x0
	0x03BE243C STUR V7, [X31 + 0x1C]
	0x03BE2440 STP V17, V16, [X31]
	0x03BE2444 BL 0x3BE2458
	0x03BE2448 LDR X30, [X31 + 0x30]
	0x03BE244C MOV W0, W0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x802000
	006 Move X8, [X20+136]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51326976
	014 Add X0, X0, 2769
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+136], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 And W0, W0, 1
	025 Add X31, X31, 48
	026 Return X0

Method: UnityEngine.Vector3 get_destination()

Disassembly:
	0x03BE2494 STR X0, [X20 + 0x120]
	0x03BE2498 ADD X1, X31, 0x10
	0x03BE249C ADD X2, X31, 0x0
	0x03BE24A0 MOV X0, X19
	0x03BE24A4 BLR X8
	0x03BE24A8 LDP X20, X19, [X31 + 0x30]
	0x03BE24AC LDR X30, [X31 + 0x20]
	0x03BE24B0 ADD X31, X31, 0x40
	0x03BE24B4 RET
	0x03BE24B8 STR X30, [X31 - 0x30]!
	0x03BE24BC STP X22, X21, [X31 + 0x10]
	0x03BE24C0 STP X20, X19, [X31 + 0x20]
	0x03BE24C4 ADRP X22, 0x801000
	0x03BE24C8 LDR X3, [X22 + 0x120]
	0x03BE24CC MOV X19, X2
	0x03BE24D0 MOV X20, X1
	0x03BE24D4 MOV X21, X0
	0x03BE24D8 CBNZ X3, 0x3BE24F0
	0x03BE24DC ADRP X0, 0xFFFFFFFFFCF16000
	0x03BE24E0 ADD X0, X0, 0x9C2
	0x03BE24E4 BL 0x1C16CB8
	0x03BE24E8 MOV X3, X0
	0x03BE24EC STR X0, [X22 + 0x120]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x802000
	006 Move X8, [X20+144]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51130368
	013 Add X0, X0, 863
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+144], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_velocity(UnityEngine.Vector3 value)

Disassembly:
	0x03BE2534 CBNZ X8, 0x3BE254C
	0x03BE2538 ADRP X0, 0xFFFFFFFFFCF33000
	0x03BE253C ADD X0, X0, 0xF10
	0x03BE2540 BL 0x1C16CB8
	0x03BE2544 MOV X8, X0
	0x03BE2548 STR X0, [X21 + 0x128]
	0x03BE254C ADD X1, X31, 0x0
	0x03BE2550 MOV W0, W20
	0x03BE2554 BLR X8
	0x03BE2558 LDP V1, V0, [X31 + 0x20]
	0x03BE255C LDP V3, V2, [X31]
	0x03BE2560 LDP X30, X21, [X31 + 0x40]
	0x03BE2564 STP V1, V0, [X19 + 0x20]
	0x03BE2568 STP V3, V2, [X19]
	0x03BE256C LDP X20, X19, [X31 + 0x50]
	0x03BE2570 ADD X31, X31, 0x60
	0x03BE2574 RET
	0x03BE2578 STP X30, X21, [X31 - 0x20]!
	0x03BE257C STP X20, X19, [X31 + 0x10]
	0x03BE2580 ADRP X21, 0x801000
	0x03BE2584 LDR X2, [X21 + 0x128]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x802000
	006 Move X8, [X20+152]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51146752
	014 Add X0, X0, 853
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+152], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: System.Boolean get_isOnOffMeshLink()

Disassembly:
	0x03BE25CC MOV X19, X0
	0x03BE25D0 MOV X20, X1
	0x03BE25D4 STR X8, [X0 + 0x10]
	0x03BE25D8 LDRB W21, [X2 + 0x52]
	0x03BE25DC STR X0, [X0 + 0x40]
	0x03BE25E0 MOV X0, X2
	0x03BE25E4 BL 0x1C16D84
	0x03BE25E8 TBZ X0, 0x0, 0x3BE2600
	0x03BE25EC CBNZ W21, 0x3BE2604
	0x03BE25F0 ADRP X8, 0xFFFFFFFFFE01F000
	0x03BE25F4 ADD X8, X8, 0xD38
	0x03BE25F8 STR X8, [X19 + 0x18]
	0x03BE25FC B 0x3BE2614
	0x03BE2600 CBZ X20, 0x3BE262C
	0x03BE2604 LDR X8, [X19 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x802000
	005 Move X1, [X20+48]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51253248
	010 Add X0, X0, 1813
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+48], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_pathPending()

Disassembly:
	0x03BE2608 LDR X9, [X19 + 0x20]
	0x03BE260C STR X8, [X19 + 0x18]
	0x03BE2610 STR X9, [X19 + 0x40]
	0x03BE2614 ADRP X8, 0xFFFFFFFFFE01F000
	0x03BE2618 ADD X8, X8, 0xCF8
	0x03BE261C STR X8, [X19 + 0x38]
	0x03BE2620 LDP X20, X19, [X31 + 0x10]
	0x03BE2624 LDP X30, X21, [X31], #0x20
	0x03BE2628 RET
	0x03BE262C ADRP X1, 0xFFFFFFFFFCF39000
	0x03BE2630 ADD X1, X1, 0xEE3
	0x03BE2634 MOV X0, X31
	0x03BE2638 BL 0x1C16F3C
	0x03BE263C MOV X1, X31
	0x03BE2640 BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x802000
	005 Move X1, [X20+56]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51245056
	010 Add X0, X0, 2099
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+56], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean Warp(UnityEngine.Vector3 newPosition)

Disassembly:
	0x03BE2644 LDR X8, [X0 + 0x40]
	0x03BE2648 LDR X2, [X0 + 0x18]
	0x03BE264C LDR X1, [X0 + 0x28]
	0x03BE2650 MOV X0, X8
	0x03BE2654 BR X2
	0x03BE2658 STR X30, [X31 - 0x20]!
	0x03BE265C STP X20, X19, [X31 + 0x10]
	0x03BE2660 MOV X1, X31
	0x03BE2664 MOV X19, X0
	0x03BE2668 BL 0x33BDD8C
	0x03BE266C ADRP X20, 0x801000
	0x03BE2670 LDR X8, [X20 + 0x138]
	0x03BE2674 CBNZ X8, 0x3BE268C
	0x03BE2678 ADRP X0, 0xFFFFFFFFFCF2E000
	0x03BE267C ADD X0, X0, 0x938
	0x03BE2680 BL 0x1C16CB8
	0x03BE2684 MOV X8, X0
	0x03BE2688 STR X0, [X20 + 0x138]
	0x03BE268C BLR X8
	0x03BE2690 STR X0, [X19 + 0x10]
	0x03BE2694 LDP X20, X19, [X31 + 0x10]
	0x03BE2698 LDR X30, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x802000
	006 Move X8, [X20+160]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51089408
	014 Add X0, X0, 67
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+160], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 And W0, W0, 1
	025 Add X31, X31, 48
	026 Return X0

Method: System.Void Move(UnityEngine.Vector3 offset)

Disassembly:
	0x03BE26E0 CBNZ X8, 0x3BE26F8
	0x03BE26E4 ADRP X0, 0xFFFFFFFFFCF38000
	0x03BE26E8 ADD X0, X0, 0x3DF
	0x03BE26EC BL 0x1C16CB8
	0x03BE26F0 MOV X8, X0
	0x03BE26F4 STR X0, [X21 + 0x140]
	0x03BE26F8 MOV X0, X20
	0x03BE26FC BLR X8
	0x03BE2700 STR X31, [X19 + 0x10]
	0x03BE2704 MOV X0, X19
	0x03BE2708 LDP X20, X19, [X31 + 0x10]
	0x03BE270C MOV X1, X31
	0x03BE2710 LDP X30, X21, [X31], #0x20
	0x03BE2714 B 0x33CB4DC
	0x03BE2718 CMP W1, 0x1
	0x03BE271C MOV X21, X0
	0x03BE2720 B.NE 0x3BE2750
	0x03BE2724 MOV X0, X21
	0x03BE2728 BL 0x3EB1AD0
	0x03BE272C LDR X20, [X0]
	0x03BE2730 BL 0x3EB1AE0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x802000
	006 Move X8, [X20+168]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51146752
	014 Add X0, X0, 926
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+168], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: System.Boolean get_isStopped()

Disassembly:
	0x03BE2778 BL 0x1D2C690
	0x03BE277C MOV X0, X20
	0x03BE2780 BL 0x1C16F18
	0x03BE2784 BL 0x1990590
	0x03BE2788 STR X30, [X31 - 0x20]!
	0x03BE278C STP X20, X19, [X31 + 0x10]
	0x03BE2790 ADRP X20, 0x801000
	0x03BE2794 LDR X1, [X20 + 0x140]
	0x03BE2798 MOV X19, X0
	0x03BE279C CBNZ X1, 0x3BE27B4
	0x03BE27A0 ADRP X0, 0xFFFFFFFFFCF38000
	0x03BE27A4 ADD X0, X0, 0x3DF
	0x03BE27A8 BL 0x1C16CB8
	0x03BE27AC MOV X1, X0
	0x03BE27B0 STR X0, [X20 + 0x140]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x802000
	005 Move X1, [X20+64]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51204096
	010 Add X0, X0, 1490
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+64], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_isStopped(System.Boolean value)

Disassembly:
	0x03BE27B4 MOV X0, X19
	0x03BE27B8 LDP X20, X19, [X31 + 0x10]
	0x03BE27BC LDR X30, [X31], #0x20
	0x03BE27C0 BR X1
	0x03BE27C4 STR X30, [X31 - 0x20]!
	0x03BE27C8 STP X20, X19, [X31 + 0x10]
	0x03BE27CC ADRP X20, 0x801000
	0x03BE27D0 LDR X1, [X20 + 0x148]
	0x03BE27D4 MOV X19, X0
	0x03BE27D8 CBNZ X1, 0x3BE27F0
	0x03BE27DC ADRP X0, 0xFFFFFFFFFCF18000
	0x03BE27E0 ADD X0, X0, 0xBF7
	0x03BE27E4 BL 0x1C16CB8
	0x03BE27E8 MOV X1, X0
	0x03BE27EC STR X0, [X20 + 0x148]
	0x03BE27F0 MOV X0, X19
	0x03BE27F4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+72]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51277824
	012 Add X0, X0, 3004
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+72], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void ResetPath()

Disassembly:
	0x03BE27F8 LDR X30, [X31], #0x20
	0x03BE27FC BR X1
	0x03BE2800 STR X30, [X31 - 0x20]!
	0x03BE2804 STP X20, X19, [X31 + 0x10]
	0x03BE2808 ADRP X20, 0x801000
	0x03BE280C LDR X1, [X20 + 0x150]
	0x03BE2810 MOV X19, X0
	0x03BE2814 CBNZ X1, 0x3BE282C
	0x03BE2818 ADRP X0, 0xFFFFFFFFFCF20000
	0x03BE281C ADD X0, X0, 0x862
	0x03BE2820 BL 0x1C16CB8
	0x03BE2824 MOV X1, X0
	0x03BE2828 STR X0, [X20 + 0x150]
	0x03BE282C MOV X0, X19
	0x03BE2830 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x802000
	005 Move X1, [X20+80]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51081216
	010 Add X0, X0, 348
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+80], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean CalculatePath(UnityEngine.Vector3 targetPosition, UnityEngine.AI.NavMeshPath path)

Disassembly:
	0x03BE2834 LDR X30, [X31], #0x20
	0x03BE2838 BR X1
	0x03BE283C STR X30, [X31 - 0x20]!
	0x03BE2840 STP X20, X19, [X31 + 0x10]
	0x03BE2844 LDR X8, [X0 + 0x18]
	0x03BE2848 CBNZ X8, 0x3BE287C
	0x03BE284C ADRP X20, 0x801000
	0x03BE2850 LDR X8, [X20 + 0x148]
	0x03BE2854 MOV X19, X0
	0x03BE2858 CBNZ X8, 0x3BE2870
	0x03BE285C ADRP X0, 0xFFFFFFFFFCF18000
	0x03BE2860 ADD X0, X0, 0xBF7
	0x03BE2864 BL 0x1C16CB8
	0x03BE2868 MOV X8, X0
	0x03BE286C STR X0, [X20 + 0x148]
	0x03BE2870 MOV X0, X19
	0x03BE2874 BLR X8
	0x03BE2878 STR X0, [X19 + 0x18]
	0x03BE287C LDP X20, X19, [X31 + 0x10]
	0x03BE2880 LDR X30, [X31], #0x20
	0x03BE2884 RET
	0x03BE2888 STR X30, [X31 - 0x20]!
	0x03BE288C STP X20, X19, [X31 + 0x10]
	0x03BE2890 MOV X19, X0
	0x03BE2894 LDR X0, [X0 + 0x18]
	0x03BE2898 CBNZ X0, 0x3BE28C8
	0x03BE289C ADRP X20, 0x801000
	0x03BE28A0 LDR X8, [X20 + 0x148]
	0x03BE28A4 CBNZ X8, 0x3BE28BC
	0x03BE28A8 ADRP X0, 0xFFFFFFFFFCF18000
	0x03BE28AC ADD X0, X0, 0xBF7
	0x03BE28B0 BL 0x1C16CB8

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X1, 0
	009 JumpIfEqual {41}
	010 Move X21, 0x802000
	011 Move X8, [X21+336]
	012 Move X19, X1
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X20, X0
	017 Compare X8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51245056
	020 Add X0, X0, 2146
	021 Call 0x1C17CB8
	022 Move X8, X0
	023 Move [X21+336], X0
	024 Move X0, X19
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move [X19+24], X31
	027 Move X0, X20
	028 Move V1, V9
	029 Move V2, V8
	030 Move X1, X19
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Move D9, [X31+16]
	036 Move D8, [X31+24]
	037 Move V0, V10
	038 Move V10, [X31+64]
	039 Call NavMeshAgent.CalculatePathInternal, X0, X1, X2
	040 Return X0
	041 Call 0x1C17F20

Method: System.Boolean CalculatePathInternal(UnityEngine.Vector3 targetPosition, UnityEngine.AI.NavMeshPath path)

Disassembly:
	0x03BE28F8 RET
	0x03BE28FC LDP S0, S1, [X0 + 0x40]
	0x03BE2900 LDR V2, [X0 + 0x48]
	0x03BE2904 RET
	0x03BE2908 STP S0, S1, [X0 + 0x40]
	0x03BE290C STR S2, [X0 + 0x48]
	0x03BE2910 RET
	0x03BE2914 LDR W0, [X0 + 0x4C]
	0x03BE2918 RET
	0x03BE291C STR W1, [X0 + 0x4C]
	0x03BE2920 RET
	0x03BE2924 STR W1, [X0 + 0x50]
	0x03BE2928 RET
	0x03BE292C STR X30, [X31 - 0x20]!
	0x03BE2930 STP X20, X19, [X31 + 0x10]
	0x03BE2934 ADRP X20, 0x801000
	0x03BE2938 LDR X1, [X20 + 0x160]
	0x03BE293C LDR W19, [X0 + 0x54]
	0x03BE2940 CBNZ X1, 0x3BE2958
	0x03BE2944 ADRP X0, 0xFFFFFFFFFCF16000
	0x03BE2948 ADD X0, X0, 0xA41
	0x03BE294C BL 0x1C16CB8
	0x03BE2950 MOV X1, X0
	0x03BE2954 STR X0, [X20 + 0x160]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x802000
	007 Move X8, [X21+176]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31], S0
	011 Move [X31+8], S1
	012 Move [X31+8], S2
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51113984
	016 Add X0, X0, 2344
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X21+176], X0
	020 Add X1, X31, 0
	021 Move X0, X20
	022 Move X2, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Move X21, [X31+24]
	028 And W0, W0, 1
	029 Add X31, X31, 48
	030 Return X0

Method: System.Single get_speed()

Disassembly:
	0x03BE29AC ADRP X20, 0x801000
	0x03BE29B0 LDR X1, [X20 + 0x158]
	0x03BE29B4 LDR W19, [X0 + 0x58]
	0x03BE29B8 CBNZ X1, 0x3BE29D0
	0x03BE29BC ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BE29C0 ADD X0, X0, 0x647
	0x03BE29C4 BL 0x1C16CB8
	0x03BE29C8 MOV X1, X0
	0x03BE29CC STR X0, [X20 + 0x158]
	0x03BE29D0 MOV W0, W19
	0x03BE29D4 LDP X20, X19, [X31 + 0x10]
	0x03BE29D8 LDR X30, [X31], #0x20
	0x03BE29DC BR X1
	0x03BE29E0 STR X30, [X31 - 0x20]!
	0x03BE29E4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x802000
	005 Move X1, [X20+88]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51269632
	010 Add X0, X0, 2776
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+88], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_speed(System.Single value)

Disassembly:
	0x03BE29E8 ADRP X20, 0x801000
	0x03BE29EC LDR X1, [X20 + 0x158]
	0x03BE29F0 MOV W19, W0
	0x03BE29F4 CBNZ X1, 0x3BE2A0C
	0x03BE29F8 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BE29FC ADD X0, X0, 0x647
	0x03BE2A00 BL 0x1C16CB8
	0x03BE2A04 MOV X1, X0
	0x03BE2A08 STR X0, [X20 + 0x158]
	0x03BE2A0C MOV W0, W19
	0x03BE2A10 LDP X20, X19, [X31 + 0x10]
	0x03BE2A14 LDR X30, [X31], #0x20
	0x03BE2A18 BR X1
	0x03BE2A1C AND W8, W1, 0x1
	0x03BE2A20 STR W8, [X0]
	0x03BE2A24 RET
	0x03BE2A28 STR W1, [X0 + 0x4]
	0x03BE2A2C RET
	0x03BE2A30 AND W8, W1, 0x1

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x802000
	006 Move X1, [X20+96]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51302400
	012 Add X0, X0, 3037
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+96], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_angularSpeed(System.Single value)

Disassembly:
	0x03BE2A34 STR W8, [X0 + 0xC]
	0x03BE2A38 RET
	0x03BE2A3C AND W8, W1, 0x1
	0x03BE2A40 STR W8, [X0 + 0x10]
	0x03BE2A44 RET
	0x03BE2A48 AND W8, W1, 0x1
	0x03BE2A4C STR W8, [X0 + 0x14]
	0x03BE2A50 RET
	0x03BE2A54 ORN W8, W31, W1, 0x0
	0x03BE2A58 AND W8, W8, 0x1
	0x03BE2A5C STR W8, [X0 + 0x1C]
	0x03BE2A60 RET
	0x03BE2A64 STR X30, [X31 - 0x30]!
	0x03BE2A68 STP X22, X21, [X31 + 0x10]
	0x03BE2A6C STP X20, X19, [X31 + 0x20]
	0x03BE2A70 ADRP X21, 0x801000
	0x03BE2A74 ADRP X22, 0x511000
	0x03BE2A78 LDRB W8, [X21 + 0x168]
	0x03BE2A7C LDR X22, [X22 + 0x598]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x802000
	006 Move X1, [X20+104]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51253248
	012 Add X0, X0, 1864
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+104], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_updatePosition(System.Boolean value)

Disassembly:
	0x03BE2A80 MOV X20, X1
	0x03BE2A84 MOV X19, X0
	0x03BE2A88 TBNZ X8, 0x0, 0x3BE2AA0
	0x03BE2A8C ADRP X0, 0x511000
	0x03BE2A90 LDR X0, [X0 + 0x598]
	0x03BE2A94 BL 0x1C16CF4
	0x03BE2A98 MOVZ W8, 0x1
	0x03BE2A9C STRB W8, [X21 + 0x168]
	0x03BE2AA0 LDR X0, [X22]
	0x03BE2AA4 LDR W8, [X0 + 0xE0]
	0x03BE2AA8 CBNZ W8, 0x3BE2AB0
	0x03BE2AAC BL 0x1C16DFC
	0x03BE2AB0 MOV X0, X20
	0x03BE2AB4 MOV X1, X31
	0x03BE2AB8 MOV X2, X31
	0x03BE2ABC BL 0x3C354F8
	0x03BE2AC0 TBZ X0, 0x0, 0x3BE2AD8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+112]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51253248
	012 Add X0, X0, 1925
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+112], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_updateRotation(System.Boolean value)

Disassembly:
	0x03BE2AC4 CBZ X20, 0x3BE2AF0
	0x03BE2AC8 MOV X0, X20
	0x03BE2ACC MOV X1, X31
	0x03BE2AD0 BL 0x3C385F8
	0x03BE2AD4 B 0x3BE2ADC
	0x03BE2AD8 MOV W0, W31
	0x03BE2ADC STR W0, [X19 + 0x18]
	0x03BE2AE0 LDP X20, X19, [X31 + 0x20]
	0x03BE2AE4 LDP X22, X21, [X31 + 0x10]
	0x03BE2AE8 LDR X30, [X31], #0x30
	0x03BE2AEC RET
	0x03BE2AF0 BL 0x1C16F20
	0x03BE2AF4 STR W1, [X0]
	0x03BE2AF8 RET
	0x03BE2AFC LDR V0, [X0 + 0x4]
	0x03BE2B00 RET
	0x03BE2B04 STR S0, [X0 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+120]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51081216
	012 Add X0, X0, 389
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+120], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean get_isOnNavMesh()

Disassembly:
	0x03BE2B08 RET
	0x03BE2B0C AND W8, W1, 0x1
	0x03BE2B10 STR W8, [X0 + 0x20]
	0x03BE2B14 RET
	0x03BE2B18 STR S0, [X0 + 0x24]
	0x03BE2B1C RET
	0x03BE2B20 AND W8, W1, 0x1
	0x03BE2B24 STR W8, [X0 + 0x28]
	0x03BE2B28 RET
	0x03BE2B2C STR W1, [X0 + 0x2C]
	0x03BE2B30 RET
	0x03BE2B34 AND W8, W1, 0x1
	0x03BE2B38 STR W8, [X0 + 0x30]
	0x03BE2B3C RET
	0x03BE2B40 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x802000
	005 Move X1, [X20+128]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51113984
	010 Add X0, X0, 2297
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+128], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean SetDestination_Injected(ref UnityEngine.Vector3 target)

Disassembly:
	0x03BE2450 ADD X31, X31, 0x40
	0x03BE2454 RET
	0x03BE2458 SUB X31, X31, 0x40
	0x03BE245C STR X30, [X31 + 0x20]
	0x03BE2460 STP X20, X19, [X31 + 0x30]
	0x03BE2464 ADRP X20, 0x801000
	0x03BE2468 LDR X8, [X20 + 0x120]
	0x03BE246C MOV X19, X0
	0x03BE2470 STP S0, S1, [X31 + 0x10]
	0x03BE2474 STR S2, [X31 + 0x18]
	0x03BE2478 STP S3, S4, [X31]
	0x03BE247C STP S5, S6, [X31 + 0x8]
	0x03BE2480 CBNZ X8, 0x3BE2498
	0x03BE2484 ADRP X0, 0xFFFFFFFFFCF16000
	0x03BE2488 ADD X0, X0, 0x9C2
	0x03BE248C BL 0x1C16CB8
	0x03BE2490 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+136]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51326976
	012 Add X0, X0, 2769
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+136], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_destination_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03BE24F0 MOV X0, X21
	0x03BE24F4 MOV X1, X20
	0x03BE24F8 MOV X2, X19
	0x03BE24FC LDP X20, X19, [X31 + 0x20]
	0x03BE2500 LDP X22, X21, [X31 + 0x10]
	0x03BE2504 LDR X30, [X31], #0x30
	0x03BE2508 BR X3
	0x03BE250C SUB X31, X31, 0x60
	0x03BE2510 STP X30, X21, [X31 + 0x40]
	0x03BE2514 STP X20, X19, [X31 + 0x50]
	0x03BE2518 ADRP X21, 0x801000
	0x03BE251C MOV X19, X8
	0x03BE2520 LDR X8, [X21 + 0x128]
	0x03BE2524 MOV W20, W0
	0x03BE2528 MOVI V0.2D, 0x0
	0x03BE252C STP V0, V0, [X31 + 0x20]
	0x03BE2530 STP V0, V0, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+144]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51130368
	012 Add X0, X0, 863
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+144], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_velocity_Injected(ref UnityEngine.Vector3 value)

Disassembly:
	0x03BE2588 MOV X19, X1
	0x03BE258C MOV W20, W0
	0x03BE2590 CBNZ X2, 0x3BE25A8
	0x03BE2594 ADRP X0, 0xFFFFFFFFFCF33000
	0x03BE2598 ADD X0, X0, 0xF10
	0x03BE259C BL 0x1C16CB8
	0x03BE25A0 MOV X2, X0
	0x03BE25A4 STR X0, [X21 + 0x128]
	0x03BE25A8 MOV W0, W20
	0x03BE25AC MOV X1, X19
	0x03BE25B0 LDP X20, X19, [X31 + 0x10]
	0x03BE25B4 LDP X30, X21, [X31], #0x20
	0x03BE25B8 BR X2
	0x03BE25BC STP X30, X21, [X31 - 0x20]!
	0x03BE25C0 STP X20, X19, [X31 + 0x10]
	0x03BE25C4 LDR X8, [X2 + 0x8]
	0x03BE25C8 STP X1, X2, [X0 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+152]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51146752
	012 Add X0, X0, 853
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+152], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean Warp_Injected(ref UnityEngine.Vector3 newPosition)

Disassembly:
	0x03BE269C RET
	0x03BE26A0 STP X30, X19, [X31 - 0x10]!
	0x03BE26A4 ADRP X19, 0x801000
	0x03BE26A8 LDR X0, [X19 + 0x138]
	0x03BE26AC CBNZ X0, 0x3BE26C0
	0x03BE26B0 ADRP X0, 0xFFFFFFFFFCF2E000
	0x03BE26B4 ADD X0, X0, 0x938
	0x03BE26B8 BL 0x1C16CB8
	0x03BE26BC STR X0, [X19 + 0x138]
	0x03BE26C0 LDP X30, X19, [X31], #0x10
	0x03BE26C4 BR X0
	0x03BE26C8 STP X30, X21, [X31 - 0x20]!
	0x03BE26CC STP X20, X19, [X31 + 0x10]
	0x03BE26D0 ADRP X21, 0x801000
	0x03BE26D4 LDR X8, [X21 + 0x140]
	0x03BE26D8 LDR X20, [X0 + 0x10]
	0x03BE26DC MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+160]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51089408
	012 Add X0, X0, 67
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+160], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Move_Injected(ref UnityEngine.Vector3 offset)

Disassembly:
	0x03BE2734 MOV X0, X19
	0x03BE2738 MOV X1, X31
	0x03BE273C BL 0x33CB4DC
	0x03BE2740 CBNZ X20, 0x3BE2758
	0x03BE2744 LDP X20, X19, [X31 + 0x10]
	0x03BE2748 LDP X30, X21, [X31], #0x20
	0x03BE274C RET
	0x03BE2750 MOV X20, X31
	0x03BE2754 B 0x3BE2764
	0x03BE2758 MOV X0, X20
	0x03BE275C BL 0x1C16F18
	0x03BE2760 MOV X21, X0
	0x03BE2764 MOV X0, X19
	0x03BE2768 MOV X1, X31
	0x03BE276C BL 0x33CB4DC
	0x03BE2770 CBNZ X20, 0x3BE277C
	0x03BE2774 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x802000
	006 Move X2, [X21+168]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51146752
	012 Add X0, X0, 926
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+168], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean CalculatePathInternal_Injected(ref UnityEngine.Vector3 targetPosition, UnityEngine.AI.NavMeshPath path)

Disassembly:
	0x03BE2958 MOV W0, W19
	0x03BE295C LDP X20, X19, [X31 + 0x10]
	0x03BE2960 LDR X30, [X31], #0x20
	0x03BE2964 BR X1
	0x03BE2968 STR X30, [X31 - 0x20]!
	0x03BE296C STP X20, X19, [X31 + 0x10]
	0x03BE2970 ADRP X20, 0x801000
	0x03BE2974 LDR X1, [X20 + 0x160]
	0x03BE2978 MOV W19, W0
	0x03BE297C CBNZ X1, 0x3BE2994
	0x03BE2980 ADRP X0, 0xFFFFFFFFFCF16000
	0x03BE2984 ADD X0, X0, 0xA41
	0x03BE2988 BL 0x1C16CB8
	0x03BE298C MOV X1, X0
	0x03BE2990 STR X0, [X20 + 0x160]
	0x03BE2994 MOV W0, W19
	0x03BE2998 LDP X20, X19, [X31 + 0x10]
	0x03BE299C LDR X30, [X31], #0x20
	0x03BE29A0 BR X1
	0x03BE29A4 STR X30, [X31 - 0x20]!
	0x03BE29A8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x802000
	007 Move X3, [X22+176]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51113984
	014 Add X0, X0, 2344
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+176], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

