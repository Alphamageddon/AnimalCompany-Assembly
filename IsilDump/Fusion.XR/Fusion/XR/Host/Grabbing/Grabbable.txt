Type: Fusion.XR.Host.Grabbing.Grabbable

Method: UnityEngine.Vector3 get_Velocity()

Disassembly:
	

ISIL:
No ISIL was generated
Method: UnityEngine.Vector3 get_AngularVelocity()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean Grab(Fusion.XR.Host.Grabbing.Grabber newGrabber)

Disassembly:
	0x01FA3E50 STR X31, [X31 + 0xB8]
	0x01FA3E54 LDR X21, [X19 + 0xE0]
	0x01FA3E58 LDR W8, [X0 + 0xE0]
	0x01FA3E5C CBNZ W8, 0x1FA3E64
	0x01FA3E60 BL 0x1C16DFC
	0x01FA3E64 MOV X0, X21
	0x01FA3E68 MOV X1, X31
	0x01FA3E6C MOV X2, X31
	0x01FA3E70 BL 0x3C354F8
	0x01FA3E74 TBZ X0, 0x0, 0x1FA3EC0
	0x01FA3E78 LDR X21, [X19 + 0xE0]
	0x01FA3E7C ADD X0, X31, 0x0
	0x01FA3E80 MOVZ W2, 0x58
	0x01FA3E84 MOV X1, X20
	0x01FA3E88 BL 0x3EB1AC0
	0x01FA3E8C CBZ X21, 0x1FA3FD4
	0x01FA3E90 LDR X23, [X21]
	0x01FA3E94 ADD X0, X31, 0x58
	0x01FA3E98 ADD X1, X31, 0x0
	0x01FA3E9C MOVZ W2, 0x58
	0x01FA3EA0 LDR X24, [X23 + 0x278]
	0x01FA3EA4 BL 0x3EB1AC0
	0x01FA3EA8 LDR X3, [X23 + 0x280]
	0x01FA3EAC ADD X2, X31, 0x58
	0x01FA3EB0 MOV X0, X21
	0x01FA3EB4 MOV X1, X19
	0x01FA3EB8 BLR X24
	0x01FA3EBC STR X31, [X19 + 0xE0]
	0x01FA3EC0 LDR X23, [X20]
	0x01FA3EC4 MOV X0, X31
	0x01FA3EC8 BL 0x1E769D8
	0x01FA3ECC ADRP X24, 0x2435000
	0x01FA3ED0 LDRB W8, [X24 + 0xA20]
	0x01FA3ED4 MOV X21, X0
	0x01FA3ED8 CBNZ W8, 0x1FA3EF0
	0x01FA3EDC ADRP X0, 0x2153000
	0x01FA3EE0 LDR X0, [X0 + 0x398]
	0x01FA3EE4 BL 0x1C16CF4
	0x01FA3EE8 MOVZ W8, 0x1
	0x01FA3EEC STRB W8, [X24 + 0xA20]
	0x01FA3EF0 ADRP X8, 0x2153000
	0x01FA3EF4 LDR X8, [X8 + 0x398]
	0x01FA3EF8 LDR X0, [X8]
	0x01FA3EFC LDR W8, [X0 + 0xE0]
	0x01FA3F00 CBNZ W8, 0x1FA3F08
	0x01FA3F04 BL 0x1C16DFC
	0x01FA3F08 CMP W23, W21
	0x01FA3F0C B.NE 0x1FA3F20
	0x01FA3F10 UBFM X8, X21, 0x20, 0x3F
	0x01FA3F14 UBFM X9, X23, 0x20, 0x3F
	0x01FA3F18 CMP W9, W8
	0x01FA3F1C B.EQ 0x1FA3FBC
	0x01FA3F20 LDR X8, [X19 + 0x40]
	0x01FA3F24 CBZ X8, 0x1FA3FD4
	0x01FA3F28 LDR X0, [X8 + 0x30]
	0x01FA3F2C CBZ X0, 0x1FA3FD4
	0x01FA3F30 ADRP X8, 0x2178000
	0x01FA3F34 LDR X1, [X20]
	0x01FA3F38 LDR X8, [X8 + 0x430]
	0x01FA3F3C ADD X2, X31, 0xB8
	0x01FA3F40 LDR X3, [X8]
	0x01FA3F44 BL 0x222BD98
	0x01FA3F48 TBZ X0, 0x0, 0x1FA3FBC
	0x01FA3F4C LDR X21, [X31 + 0xB8]
	0x01FA3F50 STR X21, [X19 + 0xE0]
	0x01FA3F54 LDR X0, [X22]
	0x01FA3F58 LDR W8, [X0 + 0xE0]
	0x01FA3F5C CBNZ W8, 0x1FA3F64
	0x01FA3F60 BL 0x1C16DFC
	0x01FA3F64 MOV X0, X21
	0x01FA3F68 MOV X1, X31
	0x01FA3F6C MOV X2, X31
	0x01FA3F70 BL 0x3C354F8
	0x01FA3F74 TBZ X0, 0x0, 0x1FA3FBC
	0x01FA3F78 LDR X21, [X19 + 0xE0]
	0x01FA3F7C ADD X0, X31, 0x0
	0x01FA3F80 MOVZ W2, 0x58
	0x01FA3F84 MOV X1, X20
	0x01FA3F88 BL 0x3EB1AC0
	0x01FA3F8C CBZ X21, 0x1FA3FD4
	0x01FA3F90 LDR X20, [X21]
	0x01FA3F94 ADD X0, X31, 0x58
	0x01FA3F98 ADD X1, X31, 0x0
	0x01FA3F9C MOVZ W2, 0x58
	0x01FA3FA0 LDR X22, [X20 + 0x268]
	0x01FA3FA4 BL 0x3EB1AC0

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move W22, [X0+128]
	011 Compare W22, 0
	012 JumpIfNotEqual {91}
	013 Move X20, X1
	014 Compare X1, 0
	015 JumpIfEqual {103}
	016 Move X19, X0
	017 Move X0, X20
	018 Move X1, X31
	019 Call Component.get_transform, X0
	020 Move X21, X0
	021 Move X0, X19
	022 Move X1, X31
	023 Call Component.get_transform, X0
	024 Compare X0, 0
	025 JumpIfEqual {103}
	026 Move X1, X31
	027 Call Transform.get_position, X0
	028 Compare X21, 0
	029 JumpIfEqual {103}
	030 Move X0, X21
	031 Move X1, X31
	032 Call Transform.InverseTransformPoint, X0, X1
	033 Move X0, X20
	034 Move X1, X31
	035 Move [X19+48], S0
	036 Move [X19+56], S1
	037 Move [X19+56], S2
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {103}
	041 Move X1, X31
	042 Call Transform.get_rotation, X0
	043 Move X0, X31
	044 Call Quaternion.Inverse, X0
	045 Move X0, X19
	046 Move X1, X31
	047 Move V10, V0
	048 Move V9, V1
	049 Move V8, V2
	050 Move V11, V3
	051 Call Component.get_transform, X0
	052 Compare X0, 0
	053 JumpIfEqual {103}
	054 Move X1, X31
	055 Call Transform.get_rotation, X0
	056 Multiply S4, S11, S0
	057 Multiply S5, S10, S3
	058 Multiply S16, S11, S1
	059 Multiply S17, S9, S3
	060 Multiply S21, S10, S0
	061 Multiply S22, S11, S2
	062 Multiply S23, S11, S3
	063 Multiply S3, S8, S3
	064 Multiply S6, S9, S2
	065 Multiply S7, S8, S1
	066 Multiply S18, S8, S0
	067 Multiply S20, S10, S1
	068 Multiply S1, S9, S1
	069 Add S4, S4, S5
	070 Add S5, S16, S17
	071 Add S3, S22, S3
	072 Subtract S16, S23, S21
	073 Multiply S19, S10, S2
	074 Multiply S0, S9, S0
	075 Multiply S2, S8, S2
	076 Add S4, S6, S4
	077 Add S5, S18, S5
	078 Add S3, S20, S3
	079 Subtract S1, S16, S1
	080 Move W8, 1
	081 Subtract S4, S4, S7
	082 Subtract S5, S5, S19
	083 Subtract S0, S3, S0
	084 Subtract S1, S1, S2
	085 Move [X19+32], X20
	086 Move [X19+60], S4
	087 Move [X19+68], S5
	088 Move [X19+68], S0
	089 Move [X19+76], S1
	090 Move [X19+128], W8
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X20, [X31+64]
	093 Move X19, [X31+72]
	094 Move X22, [X31+48]
	095 Move X21, [X31+56]
	096 Move X30, [X31+32]
	097 Move D9, [X31+16]
	098 Move D8, [X31+24]
	099 NotImplemented "Instruction CSET not yet implemented."
	100 Move D11, [X31+80]
	101 Move D10, [X31+88]
	102 Return X0
	103 Call 0x1C17F20

Method: System.Void Ungrab()

Disassembly:
	0x01FA3FA8 LDR X3, [X20 + 0x270]
	0x01FA3FAC ADD X2, X31, 0x58
	0x01FA3FB0 MOV X0, X21
	0x01FA3FB4 MOV X1, X19
	0x01FA3FB8 BLR X22
	0x01FA3FBC LDP X20, X19, [X31 + 0xE0]
	0x01FA3FC0 LDP X22, X21, [X31 + 0xD0]
	0x01FA3FC4 LDP X24, X23, [X31 + 0xC0]
	0x01FA3FC8 LDR X30, [X31 + 0xB0]
	0x01FA3FCC ADD X31, X31, 0xF0
	0x01FA3FD0 RET
	0x01FA3FD4 BL 0x1C16F20
	0x01FA3FD8 SUB X31, X31, 0xA0
	0x01FA3FDC STP X30, X21, [X31 + 0x80]
	0x01FA3FE0 STP X20, X19, [X31 + 0x90]
	0x01FA3FE4 ADRP X20, 0x2436000
	0x01FA3FE8 LDRB W8, [X20 + 0x7ED]
	0x01FA3FEC MOV X19, X0
	0x01FA3FF0 TBNZ X8, 0x0, 0x1FA4008
	0x01FA3FF4 ADRP X0, 0x2178000
	0x01FA3FF8 LDR X0, [X0 + 0x438]
	0x01FA3FFC BL 0x1C16CF4
	0x01FA4000 MOVZ W8, 0x1
	0x01FA4004 STRB W8, [X20 + 0x7ED]
	0x01FA4008 MOV X0, X19
	0x01FA400C MOV X1, X31
	0x01FA4010 STP X31, X31, [X31 + 0x70]
	0x01FA4014 BL 0x1E73D04
	0x01FA4018 LDR X0, [X19 + 0x38]
	0x01FA401C CBZ X0, 0x1FA40CC
	0x01FA4020 MOV X1, X31
	0x01FA4024 BL 0x1E9E99C
	0x01FA4028 TBZ X0, 0x0, 0x1FA40BC
	0x01FA402C LDR X0, [X19 + 0xF8]
	0x01FA4030 CBZ X0, 0x1FA40CC
	0x01FA4034 MOVZ W2, 0x1
	0x01FA4038 MOV X1, X19
	0x01FA403C MOV X3, X31
	0x01FA4040 BL 0x1E73F5C
	0x01FA4044 STP X0, X1, [X31 + 0x60]
	0x01FA4048 ADD X0, X31, 0x60
	0x01FA404C MOV X1, X31
	0x01FA4050 BL 0x1E75FB4
	0x01FA4054 STP X0, X1, [X31 + 0x70]
	0x01FA4058 ADD X0, X31, 0x70
	0x01FA405C MOV X1, X31
	0x01FA4060 BL 0x1E76088
	0x01FA4064 TBZ X0, 0x0, 0x1FA40BC
	0x01FA4068 ADRP X21, 0x2177000
	0x01FA406C LDR X21, [X21 + 0x438]
	0x01FA4070 ADD X20, X19, 0x80
	0x01FA4074 ADD X0, X31, 0x70
	0x01FA4078 MOV X1, X31
	0x01FA407C BL 0x1E76048
	0x01FA4080 LDR X1, [X21]
	0x01FA4084 MOV X2, X31
	0x01FA4088 BL 0x321BA08
	0x01FA408C TBZ X0, 0x0, 0x1FA40AC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2437000
	006 Move X20, 0x2151000
	007 Move W8, [X21+2014]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2151000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2014], W8
	019 Move [X19+32], X31
	020 Move X0, [X20]
	021 Move X20, [X19+40]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Object.op_Implicit, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {74}
	033 Move X0, [X19+40]
	034 Compare X0, 0
	035 JumpIfEqual {80}
	036 Move X1, X31
	037 Call Component.get_transform, X0
	038 Compare X0, 0
	039 JumpIfEqual {80}
	040 Move X1, X31
	041 Call Transform.get_position, X0
	042 Move X0, [X19+40]
	043 Move [X19+76], S0
	044 Move [X19+84], S1
	045 Move [X19+84], S2
	046 Compare X0, 0
	047 JumpIfEqual {80}
	048 Move X1, X31
	049 Call Component.get_transform, X0
	050 Compare X0, 0
	051 JumpIfEqual {80}
	052 Move X1, X31
	053 Call Transform.get_rotation, X0
	054 Move X8, [X19]
	055 Move [X19+88], S0
	056 Move [X19+96], S1
	057 Move [X19+96], S2
	058 Move [X19+104], S3
	059 Move X0, X19
	060 Move X9, [X8+376]
	061 Move X1, [X8+384]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X8, [X19]
	064 Move [X19+104], S0
	065 Move [X19+112], S1
	066 Move [X19+112], S2
	067 Move X0, X19
	068 Move X9, [X8+392]
	069 Move X1, [X8+400]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move [X19+116], S0
	072 Move [X19+124], S1
	073 Move [X19+124], S2
	074 Move [X19+128], W31
	075 Move X20, [X31+16]
	076 Move X19, [X31+24]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Return 
	080 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01FA4090 ADD X0, X31, 0x8
	0x01FA4094 MOVZ W2, 0x58

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

