Type: Fusion.XR.Host.Grabbing.PhysicsGrabbable

Method: System.Void Awake()

Disassembly:
	0x01FA6CC4 CBNZ W9, 0x1FA6CD0
	0x01FA6CC8 MOV X0, X8
	0x01FA6CCC BL 0x1C16DFC
	0x01FA6CD0 MOV X0, X21
	0x01FA6CD4 MOV X1, X31
	0x01FA6CD8 MOV X2, X31
	0x01FA6CDC BL 0x3C3883C
	0x01FA6CE0 TBZ X0, 0x0, 0x1FA6E30
	0x01FA6CE4 MOV X0, X20
	0x01FA6CE8 MOV X1, X31
	0x01FA6CEC BL 0x3745120
	0x01FA6CF0 CBZ X0, 0x1FA6FA4
	0x01FA6CF4 MOV X1, X31
	0x01FA6CF8 BL 0x37345CC
	0x01FA6CFC UBFM X8, X1, 0x20, 0x3F
	0x01FA6D00 CBNZ X8, 0x1FA6E30
	0x01FA6D04 MOV X0, X20
	0x01FA6D08 MOV X1, X31
	0x01FA6D0C BL 0x3745120
	0x01FA6D10 ADRP X8, 0x2175000
	0x01FA6D14 LDR X8, [X8 + 0x510]
	0x01FA6D18 MOV X2, X31
	0x01FA6D1C MOV X3, X31
	0x01FA6D20 MOV X4, X31
	0x01FA6D24 LDR X1, [X8]
	0x01FA6D28 ADD X8, X31, 0x8
	0x01FA6D2C BL 0x37473F4
	0x01FA6D30 ADRP X9, 0x2175000
	0x01FA6D34 ADRP X10, 0x2175000
	0x01FA6D38 LDUR V0, [X31 + 0x8]
	0x01FA6D3C LDR X8, [X31 + 0x18]
	0x01FA6D40 LDR X9, [X9 + 0x500]
	0x01FA6D44 LDR X10, [X10 + 0x4B8]
	0x01FA6D48 ADD X0, X31, 0x20
	0x01FA6D4C STR X8, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2434000
	007 Move X22, 0x2176000
	008 Move X20, 0x2151000
	009 Move W8, [X21+2046]
	010 Move X22, [X22+1024]
	011 Move X20, [X20+2968]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2176000
	018 Move X0, [X0+1024]
	019 Call 0x1C17CF4
	020 Move X0, 0x2151000
	021 Move X0, [X0+2968]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2046], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call 0x21A4894, X0
	028 Move [X19+40], X0
	029 Move X1, [X20]
	030 Move X0, X19
	031 Call 0x21A4894, X0
	032 Move [X19+136], X0
	033 Compare X0, 0
	034 JumpIfEqual {44}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move W1, W31
	040 Move X2, X31
	041 Move X30, [X31+48]
	042 Call Rigidbody.set_isKinematic, X0, X1
	043 Return 
	044 Call 0x1C17F20

Method: UnityEngine.Vector3 get_Velocity()

Disassembly:
	0x01FA6D50 LDR X1, [X9]
	0x01FA6D54 LDR X2, [X10]
	0x01FA6D58 ADD X8, X31, 0x8
	0x01FA6D5C MOV X3, X31
	0x01FA6D60 MOV X4, X31
	0x01FA6D64 MOV X5, X31
	0x01FA6D68 STR V0, [X31 + 0x2]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+136]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody.get_velocity, X0
	008 Return X0
	009 Call 0x1C17F20

Method: UnityEngine.Vector3 get_AngularVelocity()

Disassembly:
	0x01FA6D6C BL 0x374A2F4
	0x01FA6D70 ADRP X9, 0x2175000
	0x01FA6D74 ADRP X10, 0x2175000
	0x01FA6D78 LDUR V0, [X31 + 0x8]
	0x01FA6D7C LDR X8, [X31 + 0x18]
	0x01FA6D80 LDR X9, [X9 + 0x4E0]
	0x01FA6D84 LDR X10, [X10 + 0x4D0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+136]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody.get_angularVelocity, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean get_IsGrabbed()

Disassembly:
	0x01FA6D88 ADD X0, X31, 0x20
	0x01FA6D8C STR X8, [X31 + 0x30]
	0x01FA6D90 LDR X1, [X9]
	0x01FA6D94 LDR X2, [X10]
	0x01FA6D98 ADD X8, X31, 0x8
	0x01FA6D9C MOV X3, X31
	0x01FA6DA0 MOV X4, X31
	0x01FA6DA4 MOV X5, X31
	0x01FA6DA8 STR V0, [X31 + 0x2]
	0x01FA6DAC BL 0x374A2F4
	0x01FA6DB0 ADRP X9, 0x2175000
	0x01FA6DB4 ADRP X10, 0x2175000
	0x01FA6DB8 LDUR V0, [X31 + 0x8]
	0x01FA6DBC LDR X8, [X31 + 0x18]
	0x01FA6DC0 LDR X9, [X9 + 0x508]
	0x01FA6DC4 LDR X10, [X10 + 0x4E8]
	0x01FA6DC8 ADD X0, X31, 0x20
	0x01FA6DCC STR X8, [X31 + 0x30]
	0x01FA6DD0 LDR X1, [X9]
	0x01FA6DD4 LDR X2, [X10]
	0x01FA6DD8 ADD X8, X31, 0x8
	0x01FA6DDC MOV X3, X31
	0x01FA6DE0 MOV X4, X31
	0x01FA6DE4 MOV X5, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2434000
	006 Move X20, 0x214E000
	007 Move W8, [X21+2047]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x214E000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2047], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Object.op_Inequality, X0, X1
	033 Return X0

Method: System.Void Follow(UnityEngine.Transform followedTransform, System.Single elapsedTime, System.Boolean isColliding)

Disassembly:
	0x01FA6DE8 STR V0, [X31 + 0x2]
	0x01FA6DEC BL 0x374A2F4
	0x01FA6DF0 ADRP X9, 0x2175000
	0x01FA6DF4 ADRP X10, 0x2175000
	0x01FA6DF8 LDUR V0, [X31 + 0x8]
	0x01FA6DFC LDR X8, [X31 + 0x18]
	0x01FA6E00 LDR X9, [X9 + 0x4C0]
	0x01FA6E04 LDR X10, [X10 + 0x4F8]
	0x01FA6E08 ADD X0, X31, 0x20
	0x01FA6E0C STR X8, [X31 + 0x30]
	0x01FA6E10 LDR X1, [X9]
	0x01FA6E14 LDR X2, [X10]

ISIL:
	001 Move W8, [X0+152]
	002 Compare W8, 0
	003 JumpIfEqual {10}
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, [X0]
	006 And W2, W2, 1
	007 Move X4, [X8+472]
	008 Move X3, [X8+480]
	009 CallNoReturn X4
	010 Move X8, [X0]
	011 Move X3, [X8+488]
	012 Move X2, [X8+496]
	013 CallNoReturn X3
	014 Return 

Method: System.Void PIDFollow(UnityEngine.Transform followedTransform, System.Single elapsedTime, System.Boolean isColliding)

Disassembly:
	0x01FA6E18 ADD X8, X31, 0x8
	0x01FA6E1C MOV X3, X31
	0x01FA6E20 MOV X4, X31
	0x01FA6E24 MOV X5, X31
	0x01FA6E28 STR V0, [X31 + 0x2]
	0x01FA6E2C BL 0x374A2F4
	0x01FA6E30 MOV X0, X20
	0x01FA6E34 MOV X1, X31
	0x01FA6E38 BL 0x3745120
	0x01FA6E3C CBZ X0, 0x1FA6FA4
	0x01FA6E40 MOV X1, X31
	0x01FA6E44 BL 0x37350C8
	0x01FA6E48 ADD X20, X19, 0x38
	0x01FA6E4C MOV X0, X20
	0x01FA6E50 MOV X1, X31
	0x01FA6E54 BL 0x3745120
	0x01FA6E58 CBZ X0, 0x1FA6F78
	0x01FA6E5C MOV X0, X20
	0x01FA6E60 MOV X1, X31
	0x01FA6E64 BL 0x3745260
	0x01FA6E68 LDR X8, [X22]
	0x01FA6E6C MOV X21, X0
	0x01FA6E70 LDR W9, [X8 + 0xE0]
	0x01FA6E74 CBNZ W9, 0x1FA6E80
	0x01FA6E78 MOV X0, X8
	0x01FA6E7C BL 0x1C16DFC
	0x01FA6E80 MOV X0, X21
	0x01FA6E84 MOV X1, X31
	0x01FA6E88 MOV X2, X31
	0x01FA6E8C BL 0x3C3883C
	0x01FA6E90 TBZ X0, 0x0, 0x1FA6F60
	0x01FA6E94 MOV X0, X20
	0x01FA6E98 MOV X1, X31
	0x01FA6E9C BL 0x3745120
	0x01FA6EA0 CBZ X0, 0x1FA6FA4
	0x01FA6EA4 MOV X1, X31
	0x01FA6EA8 BL 0x37345CC
	0x01FA6EAC UBFM X8, X1, 0x20, 0x3F
	0x01FA6EB0 CBNZ X8, 0x1FA6F60
	0x01FA6EB4 MOV X0, X20
	0x01FA6EB8 MOV X1, X31
	0x01FA6EBC BL 0x3745120
	0x01FA6EC0 ADRP X8, 0x2175000
	0x01FA6EC4 LDR X8, [X8 + 0x518]
	0x01FA6EC8 MOV X2, X31
	0x01FA6ECC MOV X3, X31
	0x01FA6ED0 MOV X4, X31
	0x01FA6ED4 LDR X1, [X8]
	0x01FA6ED8 ADD X8, X31, 0x8
	0x01FA6EDC BL 0x37473F4
	0x01FA6EE0 ADRP X9, 0x2175000
	0x01FA6EE4 ADRP X10, 0x2175000
	0x01FA6EE8 LDUR V0, [X31 + 0x8]
	0x01FA6EEC LDR X8, [X31 + 0x18]
	0x01FA6EF0 LDR X9, [X9 + 0x4C8]
	0x01FA6EF4 LDR X10, [X10 + 0x520]
	0x01FA6EF8 ADD X0, X31, 0x20
	0x01FA6EFC STR X8, [X31 + 0x30]
	0x01FA6F00 LDR X1, [X9]
	0x01FA6F04 LDR X2, [X10]
	0x01FA6F08 ADD X8, X31, 0x8
	0x01FA6F0C MOV X3, X31
	0x01FA6F10 MOV X4, X31
	0x01FA6F14 MOV X5, X31
	0x01FA6F18 STR V0, [X31 + 0x2]
	0x01FA6F1C BL 0x374A2F4
	0x01FA6F20 ADRP X9, 0x2175000
	0x01FA6F24 ADRP X10, 0x2175000
	0x01FA6F28 LDUR V0, [X31 + 0x8]
	0x01FA6F2C LDR X8, [X31 + 0x18]
	0x01FA6F30 LDR X9, [X9 + 0x4D8]
	0x01FA6F34 LDR X10, [X10 + 0x4F0]
	0x01FA6F38 ADD X0, X31, 0x20
	0x01FA6F3C STR X8, [X31 + 0x30]
	0x01FA6F40 LDR X1, [X9]
	0x01FA6F44 LDR X2, [X10]
	0x01FA6F48 ADD X8, X31, 0x8
	0x01FA6F4C MOV X3, X31
	0x01FA6F50 MOV X4, X31
	0x01FA6F54 MOV X5, X31
	0x01FA6F58 STR V0, [X31 + 0x2]
	0x01FA6F5C BL 0x374A2F4
	0x01FA6F60 MOV X0, X20
	0x01FA6F64 MOV X1, X31
	0x01FA6F68 BL 0x3745120
	0x01FA6F6C CBZ X0, 0x1FA6FA4
	0x01FA6F70 MOV X1, X31
	0x01FA6F74 BL 0x37350C8
	0x01FA6F78 ADRP X8, 0x2175000
	0x01FA6F7C LDR X8, [X8 + 0x350]
	0x01FA6F80 MOV X0, X19
	0x01FA6F84 LDR X1, [X8]
	0x01FA6F88 BL 0x21A3F50
	0x01FA6F8C STR X0, [X19 + 0x50]
	0x01FA6F90 LDP X20, X19, [X31 + 0x60]
	0x01FA6F94 LDP X22, X21, [X31 + 0x50]
	0x01FA6F98 LDR X30, [X31 + 0x40]
	0x01FA6F9C ADD X31, X31, 0x70
	0x01FA6FA0 RET
	0x01FA6FA4 BL 0x1C16F20
	0x01FA6FA8 SUB X31, X31, 0x70
	0x01FA6FAC STP D15, D14, [X31 + 0x10]
	0x01FA6FB0 STP D13, D12, [X31 + 0x20]
	0x01FA6FB4 STP D11, D10, [X31 + 0x30]
	0x01FA6FB8 STP D9, D8, [X31 + 0x40]
	0x01FA6FBC STP X30, X21, [X31 + 0x50]
	0x01FA6FC0 STP X20, X19, [X31 + 0x60]
	0x01FA6FC4 ADRP X20, 0x2433000
	0x01FA6FC8 LDRB W8, [X20 + 0x806]
	0x01FA6FCC MOV X19, X0
	0x01FA6FD0 TBNZ X8, 0x0, 0x1FA6FF4
	0x01FA6FD4 ADRP X0, 0x2153000
	0x01FA6FD8 LDR X0, [X0 + 0x8C0]
	0x01FA6FDC BL 0x1C16CF4
	0x01FA6FE0 ADRP X0, 0x2175000
	0x01FA6FE4 LDR X0, [X0 + 0x3C0]
	0x01FA6FE8 BL 0x1C16CF4
	0x01FA6FEC MOVZ W8, 0x1
	0x01FA6FF0 STRB W8, [X20 + 0x806]
	0x01FA6FF4 MOV X0, X19
	0x01FA6FF8 BL 0x1FA72E4
	0x01FA6FFC ADD X21, X19, 0x38
	0x01FA7000 MOV X0, X21
	0x01FA7004 MOV X1, X31
	0x01FA7008 MOV V11.16B, V1.16B
	0x01FA700C BL 0x3745120
	0x01FA7010 CBZ X0, 0x1FA7068
	0x01FA7014 LDR X20, [X19 + 0x50]
	0x01FA7018 MOV X0, X21
	0x01FA701C MOV X1, X31
	0x01FA7020 BL 0x3745120
	0x01FA7024 CBZ X0, 0x1FA72E0
	0x01FA7028 ADRP X8, 0x2152000
	0x01FA702C LDR X8, [X8 + 0x8C0]
	0x01FA7030 LDR X1, [X8]
	0x01FA7034 BL 0x21F5D8C
	0x01FA7038 MOV X0, X31
	0x01FA703C MOV V8.16B, V0.16B
	0x01FA7040 BL 0x3C3C714
	0x01FA7044 CBZ X20, 0x1FA72E0
	0x01FA7048 LDR X8, [X20]
	0x01FA704C LDR V1, [X19 + 0x68]
	0x01FA7050 FMUL S0, S8, S0
	0x01FA7054 MOV X0, X20
	0x01FA7058 LDR X9, [X8 + 0x2B8]
	0x01FA705C LDR X1, [X8 + 0x2C0]
	0x01FA7060 FMUL S0, S0, S1
	0x01FA7064 BLR X9
	0x01FA7068 ADD X20, X19, 0x20
	0x01FA706C MOV X0, X20
	0x01FA7070 MOV X1, X31
	0x01FA7074 BL 0x3745120
	0x01FA7078 CBZ X0, 0x1FA72C0
	0x01FA707C MOV X0, X20
	0x01FA7080 MOV X1, X31
	0x01FA7084 BL 0x3745120
	0x01FA7088 CBZ X0, 0x1FA72E0
	0x01FA708C ADRP X8, 0x2174000
	0x01FA7090 LDR X8, [X8 + 0x3C0]
	0x01FA7094 LDR X1, [X8]
	0x01FA7098 BL 0x21F5E68
	0x01FA709C ADRP X20, 0x2432000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Compare X1, 0
	015 JumpIfEqual {192}
	016 Move V9, V0
	017 Move S1, [X0+52]
	018 Move S2, [X0+56]
	019 Move V0, [X0+48]
	020 Move X21, X1
	021 Move X19, X0
	022 Move X0, X1
	023 Move X1, X31
	024 Move W20, W2
	025 Call Transform.TransformPoint, X0, X1
	026 Move X0, X21
	027 Move X1, X31
	028 Move V13, V0
	029 Move V14, V1
	030 Move V15, V2
	031 Call Transform.get_rotation, X0
	032 Move X0, [X19+136]
	033 Move [X31+20], S1
	034 Move [X31+28], S0
	035 Move [X31+28], S2
	036 Move [X31+16], S3
	037 Compare X0, 0
	038 JumpIfEqual {192}
	039 Move S10, [X19+60]
	040 Move S0, [X19+64]
	041 Move S12, [X19+68]
	042 Move S11, [X19+72]
	043 Move X1, X31
	044 Move [X31+8], S0
	045 Call Rigidbody.get_position, X0
	046 Move W8, [X19+220]
	047 Subtract S8, S13, S0
	048 Subtract S14, S14, S1
	049 Subtract S13, S15, S2
	050 And W8, W20, W8
	051 And W20, W8, 1
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {73}
	056 Move X21, 0x2433000
	057 Move W8, [X21+1923]
	058 Compare W8, 0
	059 JumpIfNotEqual {65}
	060 Move X0, 0x214E000
	061 Move X0, [X0+1440]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X21+1923], W8
	065 Move X8, 0x214E000
	066 Move X8, [X8+1440]
	067 Move X8, [X8]
	068 Move X8, [X8+184]
	069 Move V0, [X8]
	070 Move V1, [X8+8]
	071 Move [X19+172], D0
	072 Move [X19+180], S1
	073 Add X0, X19, 156
	074 Move V0, V8
	075 Move V1, V14
	076 Move V2, V13
	077 Move V3, V9
	078 Move W1, W20
	079 Move [X31+12], S9
	080 Call PIDState.UpdateCommand, X0, X1, V0, X2
	081 Move S3, [X19+212]
	082 Move S8, [X19+216]
	083 Move X20, 0x2434000
	084 Move W8, [X20+1891]
	085 Multiply S13, S0, S3
	086 Multiply S14, S1, S3
	087 Multiply S15, S2, S3
	088 Compare W8, 0
	089 JumpIfNotEqual {95}
	090 Move X0, 0x214E000
	091 Move X0, [X0+1448]
	092 Call 0x1C17CF4
	093 Move W8, 1
	094 Move [X20+1891], W8
	095 Multiply S0, S13, S13
	096 Multiply S1, S14, S14
	097 Multiply S2, S15, S15
	098 Add S0, S0, S1
	099 Add S9, S2, S0
	100 Multiply S0, S8, S8
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 Move X8, 0x214E000
	103 Move X8, [X8+1448]
	104 Move X0, [X8]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 NotImplemented "Instruction FSQRT not yet implemented."
	110 NotImplemented "Instruction FDIV not yet implemented."
	111 NotImplemented "Instruction FDIV not yet implemented."
	112 NotImplemented "Instruction FDIV not yet implemented."
	113 Multiply S13, S8, S1
	114 Multiply S14, S8, S2
	115 Multiply S15, S8, S0
	116 Move X0, [X19+136]
	117 Compare X0, 0
	118 JumpIfEqual {192}
	119 Move W1, 1
	120 Move V0, V13
	121 Move V1, V14
	122 Move V2, V15
	123 Move X2, X31
	124 Call Rigidbody.AddForce, X0, X1, X2
	125 Move X19, [X19+136]
	126 Compare X19, 0
	127 JumpIfEqual {192}
	128 Move X0, X19
	129 Move X1, X31
	130 Call Component.get_transform, X0
	131 Compare X0, 0
	132 JumpIfEqual {192}
	133 Move S22, [X31+16]
	134 Move S17, [X31+20]
	135 Move S19, [X31+24]
	136 Move S23, [X31+28]
	137 Move V24, [X31+8]
	138 Move X1, X31
	139 Multiply S0, S22, S11
	140 Multiply S1, S19, S10
	141 Multiply S4, S19, S24
	142 Multiply S5, S22, S12
	143 Multiply S6, S23, S11
	144 Multiply S16, S17, S11
	145 Multiply S18, S19, S12
	146 Multiply S19, S19, S11
	147 Multiply S21, S22, S10
	148 Multiply S22, S22, S24
	149 Multiply S2, S17, S24
	150 Multiply S7, S17, S10
	151 Multiply S17, S17, S12
	152 Multiply S20, S23, S10
	153 Subtract S0, S0, S1
	154 Add S1, S5, S6
	155 Add S5, S22, S16
	156 Add S6, S21, S19
	157 Multiply S3, S23, S12
	158 Multiply S23, S23, S24
	159 Subtract S0, S0, S2
	160 Add S1, S4, S1
	161 Add S2, S20, S5
	162 Add S4, S17, S6
	163 Subtract S8, S0, S3
	164 Subtract S9, S1, S7
	165 Subtract S10, S2, S18
	166 Subtract S11, S4, S23
	167 Call Transform.get_rotation, X0
	168 Move V4, [X31+12]
	169 Move V5, V10
	170 Move V6, V9
	171 Move V7, V8
	172 Move [X31], S4
	173 Move V4, V11
	174 Call VelocityExtension.AngularVelocityChange, X0, X1, V0
	175 Move X0, X19
	176 Move X20, [X31+112]
	177 Move X19, [X31+120]
	178 Move X30, [X31+96]
	179 Move X21, [X31+104]
	180 Move D9, [X31+80]
	181 Move D8, [X31+88]
	182 Move D11, [X31+64]
	183 Move D10, [X31+72]
	184 Move D13, [X31+48]
	185 Move D12, [X31+56]
	186 Move D15, [X31+32]
	187 Move D14, [X31+40]
	188 Move X1, X31
	189 Add X31, X31, 128
	190 Call Rigidbody.set_angularVelocity, X0, X1
	191 Return 
	192 Call 0x1C17F20

Method: System.Void VelocityFollow(UnityEngine.Transform followedTransform, System.Single elapsedTime)

Disassembly:
	0x01FA70A0 LDRB W8, [X20 + 0x817]
	0x01FA70A4 MOV V8.16B, V0.16B
	0x01FA70A8 MOV V10.16B, V1.16B
	0x01FA70AC CBNZ W8, 0x1FA70C4
	0x01FA70B0 ADRP X0, 0x2174000
	0x01FA70B4 LDR X0, [X0 + 0x528]
	0x01FA70B8 BL 0x1C16CF4
	0x01FA70BC MOVZ W8, 0x1
	0x01FA70C0 STRB W8, [X20 + 0x817]
	0x01FA70C4 ADRP X21, 0x2174000
	0x01FA70C8 LDR X21, [X21 + 0x528]
	0x01FA70CC LDR X8, [X21]
	0x01FA70D0 LDR X8, [X8 + 0xB8]
	0x01FA70D4 LDR X8, [X8]
	0x01FA70D8 CBZ X8, 0x1FA72E0
	0x01FA70DC LDR X0, [X8 + 0x1B8]
	0x01FA70E0 CBZ X0, 0x1FA72E0
	0x01FA70E4 MOV X1, X31
	0x01FA70E8 BL 0x3758A6C
	0x01FA70EC TBZ X0, 0x0, 0x1FA7138
	0x01FA70F0 LDRB W8, [X20 + 0x817]
	0x01FA70F4 CBNZ W8, 0x1FA710C
	0x01FA70F8 ADRP X0, 0x2174000
	0x01FA70FC LDR X0, [X0 + 0x528]
	0x01FA7100 BL 0x1C16CF4
	0x01FA7104 MOVZ W8, 0x1
	0x01FA7108 STRB W8, [X20 + 0x817]
	0x01FA710C LDR X8, [X21]
	0x01FA7110 LDR X8, [X8 + 0xB8]
	0x01FA7114 LDR X8, [X8]
	0x01FA7118 CBZ X8, 0x1FA72E0
	0x01FA711C LDR X0, [X8 + 0x1A8]
	0x01FA7120 CBZ X0, 0x1FA72E0
	0x01FA7124 MOV X1, X31
	0x01FA7128 BL 0x3758A6C
	0x01FA712C ANDS W31, W0, 0x1
	0x01FA7130 FMOV S0, 1
	0x01FA7134 FCSEL S10, S0, S10, NE
	0x01FA7138 ADRP X20, 0x2432000
	0x01FA713C LDRB W8, [X20 + 0x818]
	0x01FA7140 CBNZ W8, 0x1FA7158
	0x01FA7144 ADRP X0, 0x214C000
	0x01FA7148 LDR X0, [X0 + 0x5A8]
	0x01FA714C BL 0x1C16CF4
	0x01FA7150 MOVZ W8, 0x1
	0x01FA7154 STRB W8, [X20 + 0x818]
	0x01FA7158 ADRP X8, 0x214C000
	0x01FA715C LDR X8, [X8 + 0x5A8]
	0x01FA7160 LDR X0, [X8]
	0x01FA7164 LDR W8, [X0 + 0xE0]
	0x01FA7168 CBNZ W8, 0x1FA7170
	0x01FA716C BL 0x1C16DFC
	0x01FA7170 FMUL S0, S8, S8
	0x01FA7174 FMUL S1, S10, S10
	0x01FA7178 FADD S0, S0, S1
	0x01FA717C FSQRT S0, S0
	0x01FA7180 FCMP S0, 0x0
	0x01FA7184 B.EQ 0x1FA72C0
	0x01FA7188 LDR V9, [X19 + 0x64]
	0x01FA718C MOV X0, X31
	0x01FA7190 BL 0x3C3C714
	0x01FA7194 LDR X8, [X19 + 0x50]
	0x01FA7198 CBZ X8, 0x1FA72E0
	0x01FA719C LDR X0, [X8 + 0x30]
	0x01FA71A0 CBZ X0, 0x1FA72E0
	0x01FA71A4 MOV X1, X31
	0x01FA71A8 MOV V12.16B, V0.16B
	0x01FA71AC BL 0x3C32E90
	0x01FA71B0 CBZ X0, 0x1FA72E0
	0x01FA71B4 MOV X1, X31
	0x01FA71B8 BL 0x3C3FA04
	0x01FA71BC LDR V15, [X19 + 0x60]
	0x01FA71C0 MOV X0, X31
	0x01FA71C4 MOV V13.16B, V0.16B
	0x01FA71C8 MOV V14.16B, V2.16B

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, X0
	011 Move V7, V0
	012 Move X0, [X0+136]
	013 Move S0, [X20+48]
	014 Move S1, [X20+52]
	015 Move S2, [X20+56]
	016 Move S3, [X20+60]
	017 Move S4, [X20+64]
	018 Move S5, [X20+68]
	019 Move V6, [X20+72]
	020 Call VelocityExtension.VelocityFollow, X0, X1, X2, X3, V0
	021 Move X19, [X20+136]
	022 Compare X19, 0
	023 JumpIfEqual {90}
	024 Move X0, X19
	025 Move X1, X31
	026 Call Rigidbody.get_velocity, X0
	027 Move V3, [X20+144]
	028 Move X0, X19
	029 Move X1, X31
	030 Multiply S0, S0, S3
	031 Multiply S1, S1, S3
	032 Multiply S2, S2, S3
	033 Call Rigidbody.set_velocity, X0, X1
	034 Move X19, [X20+136]
	035 Compare X19, 0
	036 JumpIfEqual {90}
	037 Move X0, X19
	038 Move X1, X31
	039 Call Rigidbody.get_velocity, X0
	040 Move X21, 0x2433000
	041 Move W8, [X21+1891]
	042 Move V11, [X20+148]
	043 Move V8, V0
	044 Move V9, V1
	045 Move V10, V2
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x214D000
	049 Move X0, [X0+1448]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X21+1891], W8
	053 Multiply S0, S8, S8
	054 Multiply S1, S9, S9
	055 Multiply S2, S10, S10
	056 Add S0, S0, S1
	057 Add S12, S2, S0
	058 Multiply S0, S11, S11
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move X8, 0x214D000
	061 Move X8, [X8+1448]
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 NotImplemented "Instruction FSQRT not yet implemented."
	068 NotImplemented "Instruction FDIV not yet implemented."
	069 NotImplemented "Instruction FDIV not yet implemented."
	070 NotImplemented "Instruction FDIV not yet implemented."
	071 Multiply S8, S11, S1
	072 Multiply S9, S11, S2
	073 Multiply S10, S11, S0
	074 Move X0, X19
	075 Move V0, V8
	076 Move V1, V9
	077 Move V2, V10
	078 Move X20, [X31+64]
	079 Move X19, [X31+72]
	080 Move X30, [X31+48]
	081 Move X21, [X31+56]
	082 Move D9, [X31+32]
	083 Move D8, [X31+40]
	084 Move D11, [X31+16]
	085 Move D10, [X31+24]
	086 Move X1, X31
	087 Move V12, [X31+80]
	088 Call Rigidbody.set_velocity, X0, X1
	089 Return 
	090 Call 0x1C17F20

Method: System.Void FixedUpdate()

Disassembly:
	0x01FA71CC BL 0x3C3C714
	0x01FA71D0 LDR X8, [X19 + 0x50]
	0x01FA71D4 CBZ X8, 0x1FA72E0
	0x01FA71D8 LDR X0, [X8 + 0x30]
	0x01FA71DC STR S0, [X31 + 0xC]
	0x01FA71E0 CBZ X0, 0x1FA72E0
	0x01FA71E4 MOV X1, X31
	0x01FA71E8 STP S15, S14, [X31]
	0x01FA71EC STR S13, [X31 + 0x8]
	0x01FA71F0 BL 0x3C32E90
	0x01FA71F4 CBZ X0, 0x1FA72E0
	0x01FA71F8 MOV X1, X31
	0x01FA71FC MOV V14.16B, V12.16B
	0x01FA7200 MOV V13.16B, V8.16B
	0x01FA7204 BL 0x3C3F90C
	0x01FA7208 LDR X0, [X19 + 0x50]
	0x01FA720C CBZ X0, 0x1FA72E0
	0x01FA7210 MOV X1, X31
	0x01FA7214 MOV V15.16B, V0.16B
	0x01FA7218 MOV V8.16B, V2.16B
	0x01FA721C MOV V12.16B, V11.16B
	0x01FA7220 BL 0x3C32E90
	0x01FA7224 CBZ X0, 0x1FA72E0
	0x01FA7228 MOV X1, X31
	0x01FA722C BL 0x3C3F58C
	0x01FA7230 LDR X0, [X19 + 0x50]
	0x01FA7234 CBZ X0, 0x1FA72E0
	0x01FA7238 MOV X1, X31
	0x01FA723C MOV V11.16B, V1.16B
	0x01FA7240 BL 0x3C32E90
	0x01FA7244 CBZ X0, 0x1FA72E0
	0x01FA7248 LDP S1, S3, [X31]
	0x01FA724C LDR V2, [X31 + 0xC]
	0x01FA7250 FMUL S0, S10, S9
	0x01FA7254 FMUL S0, S0, S14
	0x01FA7258 FMUL S1, S13, S1
	0x01FA725C FMUL S1, S1, S2
	0x01FA7260 LDR V2, [X31 + 0x8]
	0x01FA7264 MOV X1, X31
	0x01FA7268 FSUB S10, S12, S11
	0x01FA726C FMUL S2, S0, S2
	0x01FA7270 FMUL S0, S0, S3
	0x01FA7274 FMUL S3, S1, S15
	0x01FA7278 FMUL S1, S1, S8
	0x01FA727C FADD S8, S2, S3
	0x01FA7280 FADD S9, S0, S1
	0x01FA7284 BL 0x3C3F58C
	0x01FA7288 LDR X8, [X19]
	0x01FA728C FADD S0, S8, S0
	0x01FA7290 FADD S1, S10, S1
	0x01FA7294 FADD S2, S9, S2
	0x01FA7298 LDP X2, X1, [X8 + 0x178]
	0x01FA729C MOV X0, X19
	0x01FA72A0 LDP X20, X19, [X31 + 0x60]
	0x01FA72A4 LDP X30, X21, [X31 + 0x50]
	0x01FA72A8 LDP D9, D8, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2433000
	006 Move X21, 0x214D000
	007 Move W8, [X20+2048]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x214D000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2048], W8
	019 Move X0, [X21]
	020 Move X20, [X19+40]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {50}
	033 Move X8, [X19+40]
	034 Compare X8, 0
	035 JumpIfEqual {77}
	036 Move X0, [X21]
	037 Move X20, [X8+64]
	038 Move W9, [X0+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Equality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {71}
	050 Move X0, X19
	051 Call PhysicsGrabbable.get_IsGrabbed, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {71}
	056 Move X0, [X19+32]
	057 Compare X0, 0
	058 JumpIfEqual {77}
	059 Move X1, X31
	060 Call Component.get_transform, X0
	061 Move X20, X0
	062 Move X0, X31
	063 Call Time.get_fixedDeltaTime
	064 Move X8, [X19]
	065 Move W2, [X19+221]
	066 Move X0, X19
	067 Move X1, X20
	068 Move X9, [X8+456]
	069 Move X3, [X8+464]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move [X19+221], W31
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Return 
	077 Call 0x1C17F20

Method: System.Void OnCollisionStay(UnityEngine.Collision collision)

Disassembly:
	0x01FA72AC LDP D11, D10, [X31 + 0x30]
	0x01FA72B0 LDP D13, D12, [X31 + 0x20]
	0x01FA72B4 LDP D15, D14, [X31 + 0x10]

ISIL:
	001 Move W8, 1
	002 Move [X0+221], W8
	003 Return 

Method: System.Void .ctor()

Disassembly:
	0x01FA72B8 ADD X31, X31, 0x70
	0x01FA72BC BR X2
	0x01FA72C0 LDP X20, X19, [X31 + 0x60]
	0x01FA72C4 LDP X30, X21, [X31 + 0x50]
	0x01FA72C8 LDP D9, D8, [X31 + 0x40]
	0x01FA72CC LDP D11, D10, [X31 + 0x30]
	0x01FA72D0 LDP D13, D12, [X31 + 0x20]
	0x01FA72D4 LDP D15, D14, [X31 + 0x10]
	0x01FA72D8 ADD X31, X31, 0x70
	0x01FA72DC RET
	0x01FA72E0 BL 0x1C16F20
	0x01FA72E4 SUB X31, X31, 0x90
	0x01FA72E8 STP D15, D14, [X31 + 0x30]
	0x01FA72EC STP D13, D12, [X31 + 0x40]
	0x01FA72F0 STP D11, D10, [X31 + 0x50]
	0x01FA72F4 STP D9, D8, [X31 + 0x60]
	0x01FA72F8 STR X30, [X31 + 0x70]

ISIL:
	001 Move X8, -21725184
	002 Move V0, [X8+720]
	003 Move X8, -21737472
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X0+172], V1
	006 Move [X0+188], V1
	007 Move V1, [X8+46]
	008 Move X8, -21729280
	009 Move [X0+144], D0
	010 Move V0, [X8+2568]
	011 Move W8, 1
	012 Move X1, X31
	013 Move [X0+156], V1
	014 Move [X0+204], X31
	015 Move [X0+212], D0
	016 Move [X0+220], W8
	017 Call MonoBehaviour..ctor, X0
	018 Return 

