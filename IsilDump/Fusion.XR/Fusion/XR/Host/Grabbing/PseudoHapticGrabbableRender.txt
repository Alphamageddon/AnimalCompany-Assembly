Type: Fusion.XR.Host.Grabbing.PseudoHapticGrabbableRender

Method: System.Void Awake()

Disassembly:
	0x01FA72FC STP X20, X19, [X31 + 0x80]
	0x01FA7300 ADRP X20, 0x2432000
	0x01FA7304 LDRB W8, [X20 + 0x807]
	0x01FA7308 MOV X19, X0
	0x01FA730C TBNZ X8, 0x0, 0x1FA7324
	0x01FA7310 ADRP X0, 0x214C000
	0x01FA7314 LDR X0, [X0 + 0x5F8]
	0x01FA7318 BL 0x1C16CF4
	0x01FA731C MOVZ W8, 0x1
	0x01FA7320 STRB W8, [X20 + 0x807]
	0x01FA7324 MOVI V0.2D, 0x0
	0x01FA7328 STUR V0, [X31 + 0x1C]
	0x01FA732C STP V0, V0, [X31]
	0x01FA7330 LDR X0, [X19 + 0x50]
	0x01FA7334 CBZ X0, 0x1FA7484
	0x01FA7338 MOV X1, X31
	0x01FA733C BL 0x3C32E90
	0x01FA7340 CBZ X0, 0x1FA7484
	0x01FA7344 MOV X1, X31
	0x01FA7348 BL 0x3C3F58C
	0x01FA734C LDR X8, [X19 + 0x50]
	0x01FA7350 CBZ X8, 0x1FA7484
	0x01FA7354 LDR X0, [X8 + 0x30]
	0x01FA7358 CBZ X0, 0x1FA7484
	0x01FA735C MOV X1, X31
	0x01FA7360 MOV V8.16B, V0.16B
	0x01FA7364 MOV V9.16B, V1.16B
	0x01FA7368 MOV V10.16B, V2.16B
	0x01FA736C BL 0x3C32E90
	0x01FA7370 CBZ X0, 0x1FA7484
	0x01FA7374 MOV X1, X31
	0x01FA7378 STR S10, [X31 + 0x7C]
	0x01FA737C MOV V10.16B, V9.16B
	0x01FA7380 MOV V9.16B, V8.16B
	0x01FA7384 BL 0x3C3F58C
	0x01FA7388 MOV X0, X19
	0x01FA738C MOV X1, X31
	0x01FA7390 MOV V11.16B, V0.16B
	0x01FA7394 MOV V12.16B, V1.16B
	0x01FA7398 MOV V13.16B, V2.16B
	0x01FA739C BL 0x3C32E90
	0x01FA73A0 CBZ X0, 0x1FA7484
	0x01FA73A4 ADRP X20, 0x214C000
	0x01FA73A8 LDR X20, [X20 + 0x5F8]
	0x01FA73AC MOV X1, X31
	0x01FA73B0 BL 0x3C3F988
	0x01FA73B4 LDR X0, [X20]
	0x01FA73B8 FNEG S14, S0
	0x01FA73BC FNEG S15, S1
	0x01FA73C0 FNEG S8, S2
	0x01FA73C4 LDR W8, [X0 + 0xE0]
	0x01FA73C8 CBNZ W8, 0x1FA73D0
	0x01FA73CC BL 0x1C16DFC
	0x01FA73D0 ADD X0, X31, 0x0
	0x01FA73D4 MOV V0.16B, V11.16B
	0x01FA73D8 MOV V1.16B, V12.16B
	0x01FA73DC MOV V2.16B, V13.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2433000
	007 Move X22, 0x2175000
	008 Move X20, 0x214D000
	009 Move W8, [X21+2049]
	010 Move X22, [X22+1184]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x2175000
	018 Move X0, [X0+1184]
	019 Call 0x1C17CF4
	020 Move X0, 0x214D000
	021 Move X0, [X0+2600]
	022 Call 0x1C17CF4
	023 Move X0, 0x214D000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move X0, 0x2175000
	027 Move X0, [X0+1192]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+2049], W8
	031 Move X1, [X22]
	032 Move X0, X19
	033 Call 0x21A4894, X0
	034 Move [X19+48], X0
	035 Move X0, [X20]
	036 Move X19, [X19+40]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X1, X31
	043 Move X2, X31
	044 Call Object.op_Equality, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {67}
	049 Move X8, 0x214D000
	050 Move X8, [X8+2600]
	051 Move X19, 0x2175000
	052 Move X0, [X8]
	053 Move W8, [X0+224]
	054 Move X19, [X19+1192]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, [X19]
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+48]
	065 Call Debug.LogError, X0
	066 Return 
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return 

Method: System.Void CreateGhost()

Disassembly:
	0x01FA73E0 MOV V3.16B, V14.16B
	0x01FA73E4 MOV V4.16B, V15.16B
	0x01FA73E8 MOV V5.16B, V8.16B
	0x01FA73EC MOV X1, X31
	0x01FA73F0 BL 0x3C8B330
	0x01FA73F4 TBZ X0, 0x0, 0x1FA744C
	0x01FA73F8 LDR X19, [X19 + 0x58]
	0x01FA73FC ADD X0, X31, 0x0
	0x01FA7400 MOV X1, X31
	0x01FA7404 BL 0x3C8E5C0
	0x01FA7408 MOV V8.16B, V9.16B
	0x01FA740C MOV V9.16B, V10.16B
	0x01FA7410 LDR V10, [X31 + 0x7C]
	0x01FA7414 CBZ X19, 0x1FA7484
	0x01FA7418 LDR X8, [X19]
	0x01FA741C MOV X1, X0
	0x01FA7420 MOV X0, X19
	0x01FA7424 LDP X9, X2, [X8 + 0x198]
	0x01FA7428 BLR X9
	0x01FA742C TBZ X0, 0x0, 0x1FA7458
	0x01FA7430 ADD X0, X31, 0x0
	0x01FA7434 MOV X1, X31
	0x01FA7438 BL 0x3C8E66C
	0x01FA743C MOV V8.16B, V0.16B
	0x01FA7440 MOV V9.16B, V1.16B
	0x01FA7444 MOV V10.16B, V2.16B
	0x01FA7448 B 0x1FA7458
	0x01FA744C MOV V8.16B, V9.16B
	0x01FA7450 MOV V9.16B, V10.16B
	0x01FA7454 LDR V10, [X31 + 0x7C]
	0x01FA7458 MOV V0.16B, V8.16B
	0x01FA745C MOV V1.16B, V9.16B
	0x01FA7460 MOV V2.16B, V10.16B
	0x01FA7464 LDP X20, X19, [X31 + 0x80]
	0x01FA7468 LDR X30, [X31 + 0x70]
	0x01FA746C LDP D9, D8, [X31 + 0x60]
	0x01FA7470 LDP D11, D10, [X31 + 0x50]
	0x01FA7474 LDP D13, D12, [X31 + 0x40]
	0x01FA7478 LDP D15, D14, [X31 + 0x30]
	0x01FA747C ADD X31, X31, 0x90
	0x01FA7480 RET
	0x01FA7484 BL 0x1C16F20
	0x01FA7488 STR X30, [X31 - 0x10]!
	0x01FA748C LDR X0, [X0 + 0x50]
	0x01FA7490 CBZ X0, 0x1FA74A8
	0x01FA7494 LDR X8, [X0]
	0x01FA7498 LDR X2, [X8 + 0x2C8]
	0x01FA749C LDR X1, [X8 + 0x2D0]
	0x01FA74A0 LDR X30, [X31], #0x10
	0x01FA74A4 BR X2
	0x01FA74A8 BL 0x1C16F20
	0x01FA74AC FMOV V0.2S, 0x0
	0x01FA74B0 MOVZ W8, 0x43340000
	0x01FA74B4 MOV X1, X31
	0x01FA74B8 STR D0, [X0 + 0x60]
	0x01FA74BC STR W8, [X0 + 0x68]
	0x01FA74C0 B 0x3C36C30
	0x01FA74C4 STP X30, X21, [X31 - 0x20]!
	0x01FA74C8 STP X20, X19, [X31 + 0x10]
	0x01FA74CC ADRP X21, 0x2432000
	0x01FA74D0 ADRP X20, 0x214C000
	0x01FA74D4 LDRB W8, [X21 + 0x808]
	0x01FA74D8 LDR X20, [X20 + 0x598]
	0x01FA74DC MOV X19, X0
	0x01FA74E0 TBNZ X8, 0x0, 0x1FA74F8
	0x01FA74E4 ADRP X0, 0x214C000
	0x01FA74E8 LDR X0, [X0 + 0x598]
	0x01FA74EC BL 0x1C16CF4
	0x01FA74F0 MOVZ W8, 0x1
	0x01FA74F4 STRB W8, [X21 + 0x808]
	0x01FA74F8 LDR X0, [X20]
	0x01FA74FC LDR X20, [X19 + 0x58]
	0x01FA7500 LDR W8, [X0 + 0xE0]
	0x01FA7504 CBNZ W8, 0x1FA750C
	0x01FA7508 BL 0x1C16DFC
	0x01FA750C MOV X0, X20
	0x01FA7510 MOV X1, X31
	0x01FA7514 MOV X2, X31
	0x01FA7518 BL 0x3C3883C
	0x01FA751C TBZ X0, 0x0, 0x1FA7530
	0x01FA7520 LDP X20, X19, [X31 + 0x10]
	0x01FA7524 MOV X0, X31
	0x01FA7528 LDP X30, X21, [X31], #0x20
	0x01FA752C RET
	0x01FA7530 LDR X8, [X19 + 0x58]
	0x01FA7534 CBZ X8, 0x1FA7550
	0x01FA7538 LDR X0, [X8 + 0x30]
	0x01FA753C CBZ X0, 0x1FA7550
	0x01FA7540 LDP X20, X19, [X31 + 0x10]
	0x01FA7544 MOV X1, X31
	0x01FA7548 LDP X30, X21, [X31], #0x20
	0x01FA754C B 0x3C32E90
	0x01FA7550 BL 0x1C16F20
	0x01FA7554 SUB X31, X31, 0x40
	0x01FA7558 STP X30, X21, [X31 + 0x20]
	0x01FA755C STP X20, X19, [X31 + 0x30]
	0x01FA7560 ADRP X20, 0x2432000
	0x01FA7564 LDRB W8, [X20 + 0x809]
	0x01FA7568 MOV X19, X0
	0x01FA756C TBNZ X8, 0x0, 0x1FA75B4
	0x01FA7570 ADRP X0, 0x2174000
	0x01FA7574 LDR X0, [X0 + 0x350]
	0x01FA7578 BL 0x1C16CF4
	0x01FA757C ADRP X0, 0x214C000
	0x01FA7580 LDR X0, [X0 + 0x598]
	0x01FA7584 BL 0x1C16CF4
	0x01FA7588 ADRP X0, 0x2173000
	0x01FA758C LDR X0, [X0 + 0xFE8]
	0x01FA7590 BL 0x1C16CF4
	0x01FA7594 ADRP X0, 0x2174000
	0x01FA7598 LDR X0, [X0 + 0x530]
	0x01FA759C BL 0x1C16CF4
	0x01FA75A0 ADRP X0, 0x2174000
	0x01FA75A4 LDR X0, [X0 + 0x538]
	0x01FA75A8 BL 0x1C16CF4
	0x01FA75AC MOVZ W8, 0x1
	0x01FA75B0 STRB W8, [X20 + 0x809]
	0x01FA75B4 ADD X20, X19, 0x20
	0x01FA75B8 MOV X0, X20
	0x01FA75BC MOV X1, X31
	0x01FA75C0 BL 0x3745120
	0x01FA75C4 CBZ X0, 0x1FA76E4
	0x01FA75C8 MOV X1, X31
	0x01FA75CC BL 0x37345CC
	0x01FA75D0 UBFM X8, X1, 0x20, 0x3F
	0x01FA75D4 CBNZ X8, 0x1FA7608
	0x01FA75D8 MOV X0, X20
	0x01FA75DC MOV X1, X31
	0x01FA75E0 BL 0x3745120
	0x01FA75E4 ADRP X8, 0x2174000
	0x01FA75E8 LDR X8, [X8 + 0x530]
	0x01FA75EC MOV X2, X31
	0x01FA75F0 MOV X3, X31
	0x01FA75F4 MOV X4, X31
	0x01FA75F8 LDR X1, [X8]
	0x01FA75FC ADD X8, X31, 0x8
	0x01FA7600 MOV X5, X31
	0x01FA7604 BL 0x3746870
	0x01FA7608 ADD X21, X19, 0x38
	0x01FA760C MOV X0, X21
	0x01FA7610 MOV X1, X31
	0x01FA7614 BL 0x3745120
	0x01FA7618 CBZ X0, 0x1FA76E4
	0x01FA761C MOV X1, X31
	0x01FA7620 BL 0x37345CC
	0x01FA7624 UBFM X8, X1, 0x20, 0x3F
	0x01FA7628 CBNZ X8, 0x1FA765C
	0x01FA762C MOV X0, X21
	0x01FA7630 MOV X1, X31
	0x01FA7634 BL 0x3745120
	0x01FA7638 ADRP X8, 0x2174000
	0x01FA763C LDR X8, [X8 + 0x538]
	0x01FA7640 MOV X2, X31
	0x01FA7644 MOV X3, X31
	0x01FA7648 MOV X4, X31
	0x01FA764C LDR X1, [X8]
	0x01FA7650 ADD X8, X31, 0x8
	0x01FA7654 MOV X5, X31
	0x01FA7658 BL 0x3746870
	0x01FA765C MOV X0, X20
	0x01FA7660 MOV X1, X31
	0x01FA7664 BL 0x3745120
	0x01FA7668 CBZ X0, 0x1FA76E4
	0x01FA766C MOV X1, X31
	0x01FA7670 BL 0x37350C8
	0x01FA7674 MOV X0, X21
	0x01FA7678 MOV X1, X31
	0x01FA767C BL 0x3745120
	0x01FA7680 CBZ X0, 0x1FA76E4
	0x01FA7684 ADRP X20, 0x214C000
	0x01FA7688 LDR X20, [X20 + 0x598]
	0x01FA768C MOV X1, X31
	0x01FA7690 BL 0x37350C8
	0x01FA7694 LDR X0, [X20]
	0x01FA7698 LDR X20, [X19 + 0x58]
	0x01FA769C LDR W8, [X0 + 0xE0]
	0x01FA76A0 CBNZ W8, 0x1FA76A8
	0x01FA76A4 BL 0x1C16DFC
	0x01FA76A8 MOV X0, X20
	0x01FA76AC MOV X1, X31
	0x01FA76B0 MOV X2, X31
	0x01FA76B4 BL 0x3C3883C
	0x01FA76B8 TBZ X0, 0x0, 0x1FA76D4
	0x01FA76BC ADRP X8, 0x2174000
	0x01FA76C0 LDR X8, [X8 + 0x350]
	0x01FA76C4 MOV X0, X19
	0x01FA76C8 LDR X1, [X8]
	0x01FA76CC BL 0x21A3F50
	0x01FA76D0 STR X0, [X19 + 0x58]
	0x01FA76D4 LDP X20, X19, [X31 + 0x30]
	0x01FA76D8 LDP X30, X21, [X31 + 0x20]
	0x01FA76DC ADD X31, X31, 0x40
	0x01FA76E0 RET
	0x01FA76E4 BL 0x1C16F20
	0x01FA76E8 SUB X31, X31, 0x70
	0x01FA76EC STP D15, D14, [X31 + 0x10]
	0x01FA76F0 STP D13, D12, [X31 + 0x20]
	0x01FA76F4 STP D11, D10, [X31 + 0x30]
	0x01FA76F8 STP D9, D8, [X31 + 0x40]
	0x01FA76FC STR X30, [X31 + 0x50]
	0x01FA7700 STP X20, X19, [X31 + 0x60]
	0x01FA7704 ADRP X20, 0x2432000
	0x01FA7708 LDRB W8, [X20 + 0x80A]
	0x01FA770C MOV X19, X0
	0x01FA7710 TBNZ X8, 0x0, 0x1FA7728
	0x01FA7714 ADRP X0, 0x2152000
	0x01FA7718 LDR X0, [X0 + 0x8C0]
	0x01FA771C BL 0x1C16CF4
	0x01FA7720 MOVZ W8, 0x1
	0x01FA7724 STRB W8, [X20 + 0x80A]
	0x01FA7728 LDRB W8, [X19 + 0x50]
	0x01FA772C CBNZ W8, 0x1FA777C
	0x01FA7730 ADRP X20, 0x2432000
	0x01FA7734 LDRB W8, [X20 + 0x817]
	0x01FA7738 CBNZ W8, 0x1FA7750
	0x01FA773C ADRP X0, 0x2174000
	0x01FA7740 LDR X0, [X0 + 0x528]
	0x01FA7744 BL 0x1C16CF4
	0x01FA7748 MOVZ W8, 0x1
	0x01FA774C STRB W8, [X20 + 0x817]
	0x01FA7750 ADRP X8, 0x2174000
	0x01FA7754 LDR X8, [X8 + 0x528]
	0x01FA7758 LDR X8, [X8]
	0x01FA775C LDR X8, [X8 + 0xB8]
	0x01FA7760 LDR X8, [X8]
	0x01FA7764 CBZ X8, 0x1FA79AC
	0x01FA7768 LDR X0, [X8 + 0x1B8]
	0x01FA776C CBZ X0, 0x1FA79AC
	0x01FA7770 MOV X1, X31
	0x01FA7774 BL 0x3758A6C
	0x01FA7778 TBZ X0, 0x0, 0x1FA798C
	0x01FA777C ADD X0, X19, 0x20
	0x01FA7780 MOV X1, X31
	0x01FA7784 BL 0x3745120
	0x01FA7788 CBZ X0, 0x1FA79AC
	0x01FA778C ADRP X20, 0x2152000
	0x01FA7790 LDR X20, [X20 + 0x8C0]
	0x01FA7794 LDR X1, [X20]
	0x01FA7798 BL 0x21F5D8C
	0x01FA779C MOV X0, X31
	0x01FA77A0 MOV V8.16B, V0.16B
	0x01FA77A4 BL 0x3C3C714
	0x01FA77A8 LDR V1, [X19 + 0x6C]
	0x01FA77AC FMUL S0, S8, S0
	0x01FA77B0 ADD X0, X19, 0x38
	0x01FA77B4 MOV X1, X31
	0x01FA77B8 FMUL S0, S0, S1
	0x01FA77BC STR S0, [X19 + 0x88]
	0x01FA77C0 BL 0x3745120
	0x01FA77C4 CBZ X0, 0x1FA79AC
	0x01FA77C8 LDR X1, [X20]
	0x01FA77CC BL 0x21F5D8C
	0x01FA77D0 MOV X0, X31
	0x01FA77D4 MOV V8.16B, V0.16B
	0x01FA77D8 BL 0x3C3C714
	0x01FA77DC LDR V1, [X19 + 0x70]
	0x01FA77E0 LDP S4, S2, [X19 + 0x60]
	0x01FA77E4 FMUL S0, S8, S0
	0x01FA77E8 LDR V3, [X19 + 0x88]
	0x01FA77EC FMUL S0, S0, S1
	0x01FA77F0 FNEG S1, S2
	0x01FA77F4 FCMP S0, S2
	0x01FA77F8 FCSEL S2, S2, S0, GT
	0x01FA77FC FCMP S0, S1
	0x01FA7800 FCSEL S0, S2, S1, PL
	0x01FA7804 FNEG S1, S4
	0x01FA7808 FCMP S3, S4
	0x01FA780C FCSEL S2, S4, S3, GT
	0x01FA7810 FCMP S3, S1
	0x01FA7814 FCSEL S1, S2, S1, PL
	0x01FA7818 MOV X0, X19
	0x01FA781C STP S1, S0, [X19 + 0x88]
	0x01FA7820 BL 0x1FA74C4
	0x01FA7824 CBZ X0, 0x1FA79AC
	0x01FA7828 MOV X1, X31
	0x01FA782C BL 0x3C3F74C
	0x01FA7830 LDR V1, [X19 + 0x8C]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2433000
	009 Move X21, 0x214D000
	010 Move W8, [X20+2050]
	011 Move X21, [X21+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x214F000
	018 Move X0, [X0+1936]
	019 Call 0x1C17CF4
	020 Move X0, 0x2175000
	021 Move X0, [X0+320]
	022 Call 0x1C17CF4
	023 Move X0, 0x214D000
	024 Move X0, [X0+3448]
	025 Call 0x1C17CF4
	026 Move X0, 0x214D000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2050], W8
	031 Move X0, [X21]
	032 Move X22, 0x214D000
	033 Move X20, [X19+40]
	034 Move W8, [X0+224]
	035 Move X22, [X22+3448]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X1, [X22]
	040 Move X0, X20
	041 Call 0x222E35C, X0
	042 Move [X19+64], X0
	043 Compare X0, 0
	044 JumpIfEqual {329}
	045 Move X1, X31
	046 Call GameObject.get_transform, X0
	047 Move X8, [X19+40]
	048 Compare X8, 0
	049 JumpIfEqual {329}
	050 Move X20, X0
	051 Move X0, X8
	052 Move X1, X31
	053 Call GameObject.get_transform, X0
	054 Compare X0, 0
	055 JumpIfEqual {329}
	056 Move X1, X31
	057 Call Transform.get_lossyScale, X0
	058 Compare X20, 0
	059 JumpIfEqual {329}
	060 Move X0, X20
	061 Move X1, X31
	062 Call Transform.set_localScale, X0, X1
	063 Move X0, [X19+64]
	064 Compare X0, 0
	065 JumpIfEqual {329}
	066 Move X1, X31
	067 Call GameObject.get_transform, X0
	068 Move X8, [X19+40]
	069 Compare X8, 0
	070 JumpIfEqual {329}
	071 Move X20, X0
	072 Move X0, X8
	073 Move X1, X31
	074 Call GameObject.get_transform, X0
	075 Compare X20, 0
	076 JumpIfEqual {329}
	077 Move X1, X0
	078 Move X0, X20
	079 Move X2, X31
	080 Call Transform.set_parent, X0, X1
	081 Move X0, [X19+64]
	082 Compare X0, 0
	083 JumpIfEqual {329}
	084 Move X8, 0x214F000
	085 Move X8, [X8+1936]
	086 Move X1, [X8]
	087 Call 0x21E6F08, X0
	088 Move X8, [X19+32]
	089 Move [X19+72], X0
	090 Move X1, X31
	091 Move X2, X31
	092 Move X0, X8
	093 Call Object.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {207}
	098 Move X0, [X19+48]
	099 Compare X0, 0
	100 JumpIfEqual {329}
	101 Move X8, [X0]
	102 Move X9, [X8+584]
	103 Move X1, [X8+592]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move X8, [X21]
	106 Move X20, X0
	107 Move W9, [X8+224]
	108 Compare W9, 0
	109 JumpIfNotEqual {112}
	110 Move X0, X8
	111 Call 0x1C17DFC
	112 Move X0, X20
	113 Move X1, X31
	114 Call Object.op_Implicit, X0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {207}
	119 Move X0, [X19+48]
	120 Compare X0, 0
	121 JumpIfEqual {329}
	122 Move X8, [X0]
	123 Move X9, [X8+584]
	124 Move X1, [X8+592]
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Compare X0, 0
	127 JumpIfEqual {329}
	128 Move X0, [X0+240]
	129 Compare X0, 0
	130 JumpIfEqual {329}
	131 Call NetworkHand.get_LocalHardwareHand, X0
	132 Move X8, [X21]
	133 Move X20, X0
	134 Move W9, [X8+224]
	135 Compare W9, 0
	136 JumpIfNotEqual {139}
	137 Move X0, X8
	138 Call 0x1C17DFC
	139 Move X0, X20
	140 Move X1, X31
	141 Call Object.op_Implicit, X0
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {207}
	146 Move X0, [X19+48]
	147 Compare X0, 0
	148 JumpIfEqual {329}
	149 Move X8, [X0]
	150 Move X9, [X8+584]
	151 Move X1, [X8+592]
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Compare X0, 0
	154 JumpIfEqual {329}
	155 Move X0, [X0+240]
	156 Compare X0, 0
	157 JumpIfEqual {329}
	158 Call NetworkHand.get_LocalHardwareHand, X0
	159 Compare X0, 0
	160 JumpIfEqual {329}
	161 Move X8, [X0+216]
	162 Compare X8, 0
	163 JumpIfEqual {207}
	164 Move X0, [X19+48]
	165 Compare X0, 0
	166 JumpIfEqual {329}
	167 Move X8, [X0]
	168 Move X9, [X8+584]
	169 Move X1, [X8+592]
	170 NotImplemented "Instruction BLR not yet implemented."
	171 Compare X0, 0
	172 JumpIfEqual {329}
	173 Move X0, [X0+240]
	174 Compare X0, 0
	175 JumpIfEqual {329}
	176 Call NetworkHand.get_LocalHardwareHand, X0
	177 Compare X0, 0
	178 JumpIfEqual {329}
	179 Move X20, [X0+216]
	180 Compare X20, 0
	181 JumpIfEqual {329}
	182 Move X10, 0x2175000
	183 Move X8, [X20]
	184 Move X10, [X10+320]
	185 NotImplemented "Instruction LDRH not yet implemented."
	186 Move X1, [X10]
	187 Compare X9, 0
	188 JumpIfEqual {195}
	189 Move X10, [X8+176]
	190 Add X10, X10, 8
	191 NotImplemented "Instruction LDUR not yet implemented."
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Subtract X9, X9, 1
	194 Add X10, X10, 16
	195 Move W2, 6
	196 Move X0, X20
	197 Call 0x1C5D788
	198 Move W9, [X10]
	199 Add W9, W9, 6
	200 Add X8, X8, W9
	201 Add X0, X8, 312
	202 Move X8, [X0]
	203 Move X1, [X0+8]
	204 Move X0, X20
	205 NotImplemented "Instruction BLR not yet implemented."
	206 Move [X19+32], X0
	207 Move X0, [X21]
	208 Move X20, [X19+32]
	209 Move W8, [X0+224]
	210 Compare W8, 0
	211 JumpIfNotEqual {213}
	212 Call 0x1C17DFC
	213 Move X0, X20
	214 Move X1, X31
	215 Call Object.op_Implicit, X0
	216 Move TEMP, X0
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfNotEqual {321}
	220 Move X0, [X19+48]
	221 Compare X0, 0
	222 JumpIfEqual {329}
	223 Move X8, [X0]
	224 Move X9, [X8+584]
	225 Move X1, [X8+592]
	226 NotImplemented "Instruction BLR not yet implemented."
	227 Compare X0, 0
	228 JumpIfEqual {329}
	229 Move X0, [X0+240]
	230 Compare X0, 0
	231 JumpIfEqual {329}
	232 Call NetworkHand.get_LocalHardwareHand, X0
	233 Compare X0, 0
	234 JumpIfEqual {329}
	235 Move X20, [X0+216]
	236 Compare X20, 0
	237 JumpIfEqual {329}
	238 Move X22, 0x2175000
	239 Move X8, [X20]
	240 Move X22, [X22+320]
	241 NotImplemented "Instruction LDRH not yet implemented."
	242 Move X1, [X22]
	243 Compare X9, 0
	244 JumpIfEqual {251}
	245 Move X10, [X8+176]
	246 Add X10, X10, 8
	247 NotImplemented "Instruction LDUR not yet implemented."
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Subtract X9, X9, 1
	250 Add X10, X10, 16
	251 Move W2, 6
	252 Move X0, X20
	253 Call 0x1C5D788
	254 Move W9, [X10]
	255 Add W9, W9, 6
	256 Add X8, X8, W9
	257 Add X0, X8, 312
	258 Move X8, [X0]
	259 Move X1, [X0+8]
	260 Move X0, X20
	261 NotImplemented "Instruction BLR not yet implemented."
	262 Move X23, [X19+72]
	263 Compare X23, 0
	264 JumpIfEqual {329}
	265 Move W8, [X23+24]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move W24, W31
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Move X0, [X19+48]
	270 Compare X0, 0
	271 JumpIfEqual {329}
	272 Move X8, [X0]
	273 Add X9, X23, W24
	274 Move X20, [X9+32]
	275 Move X9, [X8+584]
	276 Move X1, [X8+592]
	277 NotImplemented "Instruction BLR not yet implemented."
	278 Compare X0, 0
	279 JumpIfEqual {329}
	280 Move X0, [X0+240]
	281 Compare X0, 0
	282 JumpIfEqual {329}
	283 Call NetworkHand.get_LocalHardwareHand, X0
	284 Compare X0, 0
	285 JumpIfEqual {329}
	286 Move X21, [X0+216]
	287 Compare X21, 0
	288 JumpIfEqual {329}
	289 Move X8, [X21]
	290 Move X1, [X22]
	291 NotImplemented "Instruction LDRH not yet implemented."
	292 Compare X9, 0
	293 JumpIfEqual {300}
	294 Move X10, [X8+176]
	295 Add X10, X10, 8
	296 NotImplemented "Instruction LDUR not yet implemented."
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Subtract X9, X9, 1
	299 Add X10, X10, 16
	300 Move W2, 6
	301 Move X0, X21
	302 Call 0x1C5D788
	303 Move W9, [X10]
	304 Add W9, W9, 6
	305 Add X8, X8, W9
	306 Add X0, X8, 312
	307 Move X8, [X0]
	308 Move X1, [X0+8]
	309 Move X0, X21
	310 NotImplemented "Instruction BLR not yet implemented."
	311 Move [X19+32], X0
	312 Compare X20, 0
	313 JumpIfEqual {329}
	314 Move X1, X0
	315 Move X0, X20
	316 Move X2, X31
	317 Call Renderer.set_sharedMaterial, X0, X1
	318 Move W8, [X23+24]
	319 Add W24, W24, 1
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Move X20, [X31+48]
	322 Move X19, [X31+56]
	323 Move X22, [X31+32]
	324 Move X21, [X31+40]
	325 Move X24, [X31+16]
	326 Move X23, [X31+24]
	327 Move X30, [X31+64]
	328 Return 
	329 Call 0x1C17F20
	330 Call 0x1C17F28

Method: System.Void SetGhostVisibility(System.Boolean visible)

Disassembly:
	0x01FA7834 MOV X0, X19
	0x01FA7838 FSUB S0, S0, S1
	0x01FA783C STR S0, [X19 + 0x7C]
	0x01FA7840 BL 0x1FA74C4
	0x01FA7844 CBZ X0, 0x1FA79AC
	0x01FA7848 MOV X1, X31
	0x01FA784C BL 0x3C3F74C
	0x01FA7850 LDR V4, [X19 + 0x88]
	0x01FA7854 LDP S2, S3, [X19 + 0x78]
	0x01FA7858 LDR V0, [X19 + 0x74]
	0x01FA785C FADD S1, S1, S4
	0x01FA7860 STR S1, [X19 + 0x80]
	0x01FA7864 FCMP S3, S0
	0x01FA7868 B.LE 0x1FA7898
	0x01FA786C MOVZ W8, 0x43B40000
	0x01FA7870 FMOV S1, W8
	0x01FA7874 FSUB S1, S1, S2
	0x01FA7878 FCMP S3, S1
	0x01FA787C B.PL 0x1FA7898
	0x01FA7880 FABD S4, S0, S0
	0x01FA7884 FABD S1, S3, S3
	0x01FA7888 FCMP S4, S1
	0x01FA788C B.MI 0x1FA78A4
	0x01FA7890 FNEG S0, S2
	0x01FA7894 B 0x1FA78A4
	0x01FA7898 FNEG S0, S2
	0x01FA789C FCMP S3, S0
	0x01FA78A0 B.PL 0x1FA78A8
	0x01FA78A4 STR S0, [X19 + 0x7C]
	0x01FA78A8 MOV X0, X19
	0x01FA78AC BL 0x1FA74C4
	0x01FA78B0 CBZ X0, 0x1FA79AC
	0x01FA78B4 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, [X0+72]
	007 Compare X21, 0
	008 JumpIfEqual {38}
	009 Move W8, [X21+24]
	010 Move X20, X0
	011 Move W19, W1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W22, W31
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X8, X21, W22
	016 Move X0, [X8+32]
	017 Compare X0, 0
	018 JumpIfEqual {38}
	019 And W1, W19, 1
	020 Move X2, X31
	021 Call Renderer.set_enabled, X0, X1
	022 Move W8, [X21+24]
	023 Add W22, W22, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, [X20+64]
	026 Compare X0, 0
	027 JumpIfEqual {38}
	028 And W1, W19, 1
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X2, X31
	034 Move X30, [X31+48]
	035 Call GameObject.SetActive, X0, X1
	036 Return 
	037 Call 0x1C17F28
	038 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x01FA78B8 BL 0x3C3DEB4
	0x01FA78BC ADRP X8, 0xFFFFFFFFFEB43000
	0x01FA78C0 STR S0, [X31 + 0x5C]
	0x01FA78C4 MOV V9.16B, V1.16B
	0x01FA78C8 MOV V10.16B, V2.16B
	0x01FA78CC MOV V11.16B, V3.16B
	0x01FA78D0 LDR V2, [X8 + 0x104]
	0x01FA78D4 LDP S0, S1, [X19 + 0x7C]
	0x01FA78D8 LDR V3, [X19 + 0x84]
	0x01FA78DC MOV X0, X31
	0x01FA78E0 FMUL S0, S0, S2
	0x01FA78E4 FMUL S1, S1, S2
	0x01FA78E8 FMUL S2, S3, S2
	0x01FA78EC BL 0x3C2A574
	0x01FA78F0 LDR V8, [X19 + 0x68]
	0x01FA78F4 MOV X0, X31
	0x01FA78F8 MOV V12.16B, V0.16B
	0x01FA78FC MOV V13.16B, V1.16B
	0x01FA7900 MOV V14.16B, V2.16B
	0x01FA7904 MOV V15.16B, V3.16B
	0x01FA7908 BL 0x3C3C714
	0x01FA790C FMUL S0, S8, S0
	0x01FA7910 STR S0, [X31]
	0x01FA7914 LDR V0, [X31 + 0x5C]
	0x01FA7918 MOV V1.16B, V9.16B
	0x01FA791C MOV V2.16B, V10.16B
	0x01FA7920 MOV V3.16B, V11.16B
	0x01FA7924 MOV V4.16B, V12.16B
	0x01FA7928 MOV V5.16B, V13.16B
	0x01FA792C MOV V6.16B, V14.16B
	0x01FA7930 MOV V7.16B, V15.16B
	0x01FA7934 MOV X0, X31
	0x01FA7938 BL 0x3C2A4A0
	0x01FA793C MOV X0, X19
	0x01FA7940 MOV V8.16B, V0.16B
	0x01FA7944 MOV V9.16B, V1.16B
	0x01FA7948 MOV V10.16B, V2.16B
	0x01FA794C MOV V11.16B, V3.16B
	0x01FA7950 BL 0x1FA74C4
	0x01FA7954 CBZ X0, 0x1FA79AC
	0x01FA7958 MOV V0.16B, V8.16B
	0x01FA795C MOV V1.16B, V9.16B
	0x01FA7960 MOV V2.16B, V10.16B
	0x01FA7964 MOV V3.16B, V11.16B
	0x01FA7968 LDP X20, X19, [X31 + 0x60]
	0x01FA796C LDR X30, [X31 + 0x50]
	0x01FA7970 LDP D9, D8, [X31 + 0x40]
	0x01FA7974 LDP D11, D10, [X31 + 0x30]
	0x01FA7978 LDP D13, D12, [X31 + 0x20]
	0x01FA797C LDP D15, D14, [X31 + 0x10]
	0x01FA7980 MOV X1, X31
	0x01FA7984 ADD X31, X31, 0x70
	0x01FA7988 B 0x3C3F7AC
	0x01FA798C LDP X20, X19, [X31 + 0x60]
	0x01FA7990 LDR X30, [X31 + 0x50]
	0x01FA7994 LDP D9, D8, [X31 + 0x40]
	0x01FA7998 LDP D11, D10, [X31 + 0x30]
	0x01FA799C LDP D13, D12, [X31 + 0x20]
	0x01FA79A0 LDP D15, D14, [X31 + 0x10]
	0x01FA79A4 ADD X31, X31, 0x70
	0x01FA79A8 RET
	0x01FA79AC BL 0x1C16F20
	0x01FA79B0 STR X30, [X31 - 0x20]!
	0x01FA79B4 STP X20, X19, [X31 + 0x10]
	0x01FA79B8 FMOV V0.2S, 0x0
	0x01FA79BC MOVZ W9, 0x42820000
	0x01FA79C0 MOVZ W8, 0x41F00000
	0x01FA79C4 STR D0, [X0 + 0x60]
	0x01FA79C8 STUR D0, [X0 + 0x6C]
	0x01FA79CC UNIMPLEMENTED
	0x01FA79D0 STR W8, [X0 + 0x68]
	0x01FA79D4 STUR D0, [X0 + 0x74]
	0x01FA79D8 ADRP X20, 0x2431000
	0x01FA79DC LDRB W8, [X20 + 0x783]
	0x01FA79E0 MOV X19, X0
	0x01FA79E4 CBNZ W8, 0x1FA79FC
	0x01FA79E8 ADRP X0, 0x214C000
	0x01FA79EC LDR X0, [X0 + 0x5A0]
	0x01FA79F0 BL 0x1C16CF4
	0x01FA79F4 MOVZ W8, 0x1
	0x01FA79F8 STRB W8, [X20 + 0x783]
	0x01FA79FC ADRP X8, 0x214C000
	0x01FA7A00 LDR X8, [X8 + 0x5A0]
	0x01FA7A04 MOV X0, X19
	0x01FA7A08 MOV X1, X31
	0x01FA7A0C LDR X8, [X8]
	0x01FA7A10 LDR X8, [X8 + 0xB8]
	0x01FA7A14 LDR V0, [X8]
	0x01FA7A18 LDR V1, [X8 + 0x8]
	0x01FA7A1C STUR D0, [X19 + 0x7C]
	0x01FA7A20 STR S1, [X19 + 0x84]
	0x01FA7A24 LDP X20, X19, [X31 + 0x10]
	0x01FA7A28 LDR X30, [X31], #0x20
	0x01FA7A2C B 0x3C36C30
	0x01FA7A30 STP X30, X21, [X31 - 0x20]!
	0x01FA7A34 STP X20, X19, [X31 + 0x10]
	0x01FA7A38 ADRP X21, 0x2432000
	0x01FA7A3C ADRP X20, 0x214C000
	0x01FA7A40 LDRB W8, [X21 + 0x80B]
	0x01FA7A44 LDR X20, [X20 + 0x598]
	0x01FA7A48 MOV X19, X0
	0x01FA7A4C TBNZ X8, 0x0, 0x1FA7A64
	0x01FA7A50 ADRP X0, 0x214C000
	0x01FA7A54 LDR X0, [X0 + 0x598]
	0x01FA7A58 BL 0x1C16CF4
	0x01FA7A5C MOVZ W8, 0x1
	0x01FA7A60 STRB W8, [X21 + 0x80B]
	0x01FA7A64 LDR X0, [X20]
	0x01FA7A68 LDR X20, [X19 + 0x20]
	0x01FA7A6C LDR W8, [X0 + 0xE0]
	0x01FA7A70 CBNZ W8, 0x1FA7A78
	0x01FA7A74 BL 0x1C16DFC
	0x01FA7A78 MOV X0, X20
	0x01FA7A7C MOV X1, X31
	0x01FA7A80 MOV X2, X31
	0x01FA7A84 BL 0x3C3883C
	0x01FA7A88 TBZ X0, 0x0, 0x1FA7A9C
	0x01FA7A8C LDP X20, X19, [X31 + 0x10]
	0x01FA7A90 MOV X0, X31
	0x01FA7A94 LDP X30, X21, [X31], #0x20
	0x01FA7A98 RET
	0x01FA7A9C LDR X8, [X19 + 0x20]
	0x01FA7AA0 CBZ X8, 0x1FA7ABC
	0x01FA7AA4 LDR X0, [X8 + 0x30]
	0x01FA7AA8 CBZ X0, 0x1FA7ABC
	0x01FA7AAC LDP X20, X19, [X31 + 0x10]
	0x01FA7AB0 MOV X1, X31
	0x01FA7AB4 LDP X30, X21, [X31], #0x20
	0x01FA7AB8 B 0x3C32E90
	0x01FA7ABC BL 0x1C16F20
	0x01FA7AC0 STP D11, D10, [X31 - 0x50]!
	0x01FA7AC4 STP D9, D8, [X31 + 0x10]
	0x01FA7AC8 STR X30, [X31 + 0x20]
	0x01FA7ACC STP X22, X21, [X31 + 0x30]
	0x01FA7AD0 STP X20, X19, [X31 + 0x40]
	0x01FA7AD4 ADRP X20, 0x2432000
	0x01FA7AD8 ADRP X22, 0x2174000
	0x01FA7ADC ADRP X21, 0x214C000
	0x01FA7AE0 LDRB W8, [X20 + 0x80C]
	0x01FA7AE4 LDR X22, [X22 + 0x540]
	0x01FA7AE8 LDR X21, [X21 + 0x598]
	0x01FA7AEC MOV X19, X0
	0x01FA7AF0 TBNZ X8, 0x0, 0x1FA7B2C
	0x01FA7AF4 ADRP X0, 0x2174000
	0x01FA7AF8 LDR X0, [X0 + 0x48]
	0x01FA7AFC BL 0x1C16CF4
	0x01FA7B00 ADRP X0, 0x2174000
	0x01FA7B04 LDR X0, [X0 + 0x540]
	0x01FA7B08 BL 0x1C16CF4
	0x01FA7B0C ADRP X0, 0x2174000
	0x01FA7B10 LDR X0, [X0 + 0x350]
	0x01FA7B14 BL 0x1C16CF4
	0x01FA7B18 ADRP X0, 0x214C000
	0x01FA7B1C LDR X0, [X0 + 0x598]
	0x01FA7B20 BL 0x1C16CF4
	0x01FA7B24 MOVZ W8, 0x1
	0x01FA7B28 STRB W8, [X20 + 0x80C]
	0x01FA7B2C LDR X1, [X22]
	0x01FA7B30 MOV X0, X19
	0x01FA7B34 BL 0x21A3F50
	0x01FA7B38 STR X0, [X19 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2433000
	006 Move W8, [X20+2051]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x214D000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2051], W8
	017 Move X0, [X19+48]
	018 Compare X0, 0
	019 JumpIfEqual {206}
	020 Move W8, [X0+292]
	021 Compare W8, 0
	022 JumpIfEqual {194}
	023 Move X8, [X0]
	024 Move X21, 0x214D000
	025 Move X9, [X8+584]
	026 Move X1, [X8+592]
	027 Move X21, [X21+1432]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X8, [X21]
	030 Move X20, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Call Object.op_Implicit, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {194}
	043 Move X0, [X19+48]
	044 Compare X0, 0
	045 JumpIfEqual {206}
	046 Move X8, [X0]
	047 Move X9, [X8+584]
	048 Move X1, [X8+592]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Compare X0, 0
	051 JumpIfEqual {206}
	052 Move X0, [X0+240]
	053 Compare X0, 0
	054 JumpIfEqual {206}
	055 Call NetworkHand.get_LocalHardwareHand, X0
	056 Move X8, [X21]
	057 Move X20, X0
	058 Move W9, [X8+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X8
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move X1, X31
	065 Call Object.op_Implicit, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {194}
	070 Move W8, [X19+56]
	071 Compare W8, 0
	072 JumpIfNotEqual {93}
	073 Move X0, [X21]
	074 Move X20, [X19+64]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X0, X20
	080 Move X1, X31
	081 Call Object.op_Implicit, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {88}
	086 Move X0, X19
	087 Call PseudoHapticGrabbableRender.CreateGhost, X0
	088 Move W1, 1
	089 Move X0, X19
	090 Move W20, 1
	091 Call PseudoHapticGrabbableRender.SetGhostVisibility, X0, X1
	092 Move [X19+56], W20
	093 Move X0, [X19+48]
	094 Compare X0, 0
	095 JumpIfEqual {206}
	096 Move X8, [X0]
	097 Move X9, [X8+584]
	098 Move X1, [X8+592]
	099 NotImplemented "Instruction BLR not yet implemented."
	100 Compare X0, 0
	101 JumpIfEqual {206}
	102 Move X0, [X0+240]
	103 Compare X0, 0
	104 JumpIfEqual {206}
	105 Call NetworkHand.get_LocalHardwareHand, X0
	106 Compare X0, 0
	107 JumpIfEqual {206}
	108 Move X1, X31
	109 Call Component.get_transform, X0
	110 Move X8, [X19+64]
	111 Compare X8, 0
	112 JumpIfEqual {206}
	113 Move X20, X0
	114 Move X0, X8
	115 Move X1, X31
	116 Call GameObject.get_transform, X0
	117 Move X8, [X19+48]
	118 Compare X8, 0
	119 JumpIfEqual {206}
	120 Move X8, [X8+328]
	121 Compare X8, 0
	122 JumpIfEqual {206}
	123 Compare X20, 0
	124 JumpIfEqual {206}
	125 Move S1, [X8+52]
	126 Move S2, [X8+56]
	127 Move V0, [X8+48]
	128 Move X21, X0
	129 Move X0, X20
	130 Move X1, X31
	131 Call Transform.TransformPoint, X0, X1
	132 Compare X21, 0
	133 JumpIfEqual {206}
	134 Move X0, X21
	135 Move X1, X31
	136 Call Transform.set_position, X0, X1
	137 Move X0, [X19+64]
	138 Compare X0, 0
	139 JumpIfEqual {206}
	140 Move X1, X31
	141 Call GameObject.get_transform, X0
	142 Move X21, X0
	143 Move X0, X20
	144 Move X1, X31
	145 Call Transform.get_rotation, X0
	146 Move X8, [X19+48]
	147 Compare X8, 0
	148 JumpIfEqual {206}
	149 Move X8, [X8+328]
	150 Compare X8, 0
	151 JumpIfEqual {206}
	152 Compare X21, 0
	153 JumpIfEqual {206}
	154 Move S7, [X8+68]
	155 Move S4, [X8+72]
	156 Move S5, [X8+60]
	157 Move S6, [X8+64]
	158 Move X20, [X31+16]
	159 Move X19, [X31+24]
	160 Move X0, X21
	161 Multiply S16, S3, S4
	162 Multiply S17, S0, S5
	163 Multiply S18, S1, S6
	164 Multiply S19, S2, S7
	165 Multiply S20, S0, S6
	166 Multiply S21, S3, S7
	167 Multiply S22, S2, S4
	168 Multiply S23, S1, S5
	169 Multiply S24, S1, S4
	170 Multiply S1, S1, S7
	171 Multiply S7, S0, S7
	172 Multiply S0, S0, S4
	173 Multiply S4, S2, S5
	174 Multiply S5, S3, S5
	175 Multiply S3, S3, S6
	176 Multiply S6, S2, S6
	177 Subtract S2, S16, S17
	178 Add S16, S21, S22
	179 Add S3, S3, S24
	180 Add S0, S5, S0
	181 Subtract S2, S2, S18
	182 Add S5, S20, S16
	183 Add S4, S4, S3
	184 Add S0, S1, S0
	185 Subtract S3, S2, S19
	186 Subtract S2, S5, S23
	187 Subtract S1, S4, S7
	188 Subtract S0, S0, S6
	189 Move X1, X31
	190 Move X30, [X31+32]
	191 Move X21, [X31+40]
	192 Call Transform.set_rotation, X0, X1
	193 Return 
	194 Move W8, [X19+56]
	195 Compare W8, 0
	196 JumpIfEqual {201}
	197 Move X0, X19
	198 Move W1, W31
	199 Call PseudoHapticGrabbableRender.SetGhostVisibility, X0, X1
	200 Move [X19+56], W31
	201 Move X20, [X31+16]
	202 Move X19, [X31+24]
	203 Move X30, [X31+32]
	204 Move X21, [X31+40]
	205 Return 
	206 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01FA7B3C LDR X0, [X21]
	0x01FA7B40 LDR X20, [X19 + 0x28]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

