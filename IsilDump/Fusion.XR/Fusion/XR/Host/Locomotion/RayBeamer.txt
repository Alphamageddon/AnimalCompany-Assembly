Type: Fusion.XR.Host.Locomotion.RayBeamer

Method: System.Void Awake()

Disassembly:
	0x01FA2BEC MOV X1, X31
	0x01FA2BF0 BL 0x3C3F58C
	0x01FA2BF4 CBZ X21, 0x1FA2D2C
	0x01FA2BF8 MOV X0, X21
	0x01FA2BFC MOV X1, X31
	0x01FA2C00 BL 0x3C40B58
	0x01FA2C04 LDR X0, [X19 + 0x70]
	0x01FA2C08 CBZ X0, 0x1FA2D2C
	0x01FA2C0C MOV X1, X31
	0x01FA2C10 MOV V13.16B, V1.16B
	0x01FA2C14 BL 0x3C32E90
	0x01FA2C18 CBZ X0, 0x1FA2D2C
	0x01FA2C1C MOV X1, X31
	0x01FA2C20 BL 0x3C3F988
	0x01FA2C24 LDR X21, [X19 + 0x80]
	0x01FA2C28 CBZ X21, 0x1FA2D2C
	0x01FA2C2C ADRP X10, 0x2179000
	0x01FA2C30 LDR X8, [X21]
	0x01FA2C34 LDR X10, [X10 + 0x3D0]
	0x01FA2C38 FMUL S2, S13, S2
	0x01FA2C3C FMUL S1, S13, S1
	0x01FA2C40 LDRH W9, [X8 + 0x12E]
	0x01FA2C44 LDR X1, [X10]
	0x01FA2C48 FMUL S0, S13, S0
	0x01FA2C4C FADD S11, S8, S2
	0x01FA2C50 FADD S12, S9, S1
	0x01FA2C54 FADD S13, S10, S0
	0x01FA2C58 CBZ X9, 0x1FA2C7C
	0x01FA2C5C LDR X10, [X8 + 0xB0]
	0x01FA2C60 ADD X10, X10, 0x8
	0x01FA2C64 LDUR X11, [X10 - 0x8]
	0x01FA2C68 CMP X11, X1
	0x01FA2C6C B.EQ 0x1FA2C8C
	0x01FA2C70 SUBS X9, X9, 0x1
	0x01FA2C74 ADD X10, X10, 0x10
	0x01FA2C78 B.NE 0x1FA2C64
	0x01FA2C7C MOV X0, X21
	0x01FA2C80 MOV W2, W31
	0x01FA2C84 BL 0x1C5C788
	0x01FA2C88 B 0x1FA2C98
	0x01FA2C8C LDRSW X9, [X10]
	0x01FA2C90 ADD X8, X8, X9, 0x4, LSL
	0x01FA2C94 ADD X0, X8, 0x138
	0x01FA2C98 LDP X8, X1, [X0]
	0x01FA2C9C MOV X0, X21
	0x01FA2CA0 MOV V0.16B, V13.16B
	0x01FA2CA4 MOV V1.16B, V12.16B
	0x01FA2CA8 MOV V2.16B, V11.16B
	0x01FA2CAC BLR X8
	0x01FA2CB0 TBZ X0, 0x0, 0x1FA2D14
	0x01FA2CB4 LDR X8, [X19]
	0x01FA2CB8 MOV X0, X19
	0x01FA2CBC MOV X1, X20
	0x01FA2CC0 LDP X9, X2, [X8 + 0x198]
	0x01FA2CC4 BLR X9
	0x01FA2CC8 TBZ X0, 0x0, 0x1FA2D14
	0x01FA2CCC LDR X0, [X19 + 0x70]
	0x01FA2CD0 CBZ X0, 0x1FA2D2C
	0x01FA2CD4 LDR X8, [X0]
	0x01FA2CD8 MOV V0.16B, V10.16B
	0x01FA2CDC MOV V1.16B, V9.16B
	0x01FA2CE0 MOV V2.16B, V8.16B
	0x01FA2CE4 LDR X9, [X8 + 0x2D8]
	0x01FA2CE8 LDR X1, [X8 + 0x2E0]
	0x01FA2CEC BLR X9
	0x01FA2CF0 MOV X1, X0
	0x01FA2CF4 MOV X0, X19
	0x01FA2CF8 LDP X20, X19, [X31 + 0x40]
	0x01FA2CFC LDP X30, X21, [X31 + 0x30]
	0x01FA2D00 LDP D9, D8, [X31 + 0x20]
	0x01FA2D04 LDP D11, D10, [X31 + 0x10]
	0x01FA2D08 MOV X2, X31
	0x01FA2D0C LDP D13, D12, [X31], #0x50
	0x01FA2D10 B 0x3C366FC
	0x01FA2D14 LDP X20, X19, [X31 + 0x40]
	0x01FA2D18 LDP X30, X21, [X31 + 0x30]
	0x01FA2D1C LDP D9, D8, [X31 + 0x20]
	0x01FA2D20 LDP D11, D10, [X31 + 0x10]
	0x01FA2D24 LDP D13, D12, [X31], #0x50
	0x01FA2D28 RET
	0x01FA2D2C BL 0x1C16F20
	0x01FA2D30 STP X30, X19, [X31 - 0x10]!
	0x01FA2D34 ADRP X8, 0xFFFFFFFFFEB4B000
	0x01FA2D38 LDR V0, [X8 + 0xCA8]
	0x01FA2D3C MOVZ W8, 0x3F000000
	0x01FA2D40 MOV X19, X0
	0x01FA2D44 STR W8, [X0 + 0x58]
	0x01FA2D48 STR D0, [X0 + 0x50]
	0x01FA2D4C MOV W0, W31
	0x01FA2D50 MOV X1, X31
	0x01FA2D54 BL 0x3C35CBC
	0x01FA2D58 STR W0, [X19 + 0x78]
	0x01FA2D5C MOV X0, X19
	0x01FA2D60 MOV X1, X31
	0x01FA2D64 LDP X30, X19, [X31], #0x10
	0x01FA2D68 B 0x3C36C30
	0x01FA2D6C RET
	0x01FA2D70 STP X30, X21, [X31 - 0x20]!
	0x01FA2D74 STP X20, X19, [X31 + 0x10]
	0x01FA2D78 LDR W8, [X0 + 0x10]
	0x01FA2D7C LDR X21, [X0 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2438000
	006 Move X21, 0x2152000
	007 Move W8, [X20+2003]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x217A000
	015 Move X0, [X0+784]
	016 Call 0x1C17CF4
	017 Move X0, 0x217A000
	018 Move X0, [X0+792]
	019 Call 0x1C17CF4
	020 Move X0, 0x2152000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2003], W8
	025 Move X0, [X21]
	026 Move X20, [X19+88]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {60}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_gameObject, X0
	042 Compare X0, 0
	043 JumpIfEqual {127}
	044 Move X8, 0x217A000
	045 Move X8, [X8+792]
	046 Move X1, [X8]
	047 Call 0x21E61FC, X0
	048 Move [X19+88], X0
	049 Compare X0, 0
	050 JumpIfEqual {127}
	051 Move X1, [X19+104]
	052 Move X2, X31
	053 Call Renderer.set_material, X0, X1
	054 Move X0, [X19+88]
	055 Compare X0, 0
	056 JumpIfEqual {127}
	057 Move W1, 4
	058 Move X2, X31
	059 Call LineRenderer.set_numCapVertices, X0, X1
	060 Move X0, [X19+88]
	061 Compare X0, 0
	062 JumpIfEqual {127}
	063 Move V0, [X19+96]
	064 Move X1, X31
	065 Call LineRenderer.set_startWidth, X0, V0
	066 Move X0, [X19+88]
	067 Compare X0, 0
	068 JumpIfEqual {127}
	069 Move V0, [X19+96]
	070 Move X1, X31
	071 Call LineRenderer.set_endWidth, X0, V0
	072 Move X0, [X19+88]
	073 Compare X0, 0
	074 JumpIfEqual {127}
	075 Move W1, 1
	076 Move X2, X31
	077 Call LineRenderer.set_useWorldSpace, X0, X1
	078 Move X0, [X19+88]
	079 Compare X0, 0
	080 JumpIfEqual {127}
	081 Move W1, W31
	082 Move X2, X31
	083 Call Renderer.set_enabled, X0, X1
	084 Move X0, [X21]
	085 Move X20, [X19+72]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X20
	091 Move X1, X31
	092 Move X2, X31
	093 Call Object.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {102}
	098 Move X0, X19
	099 Move X1, X31
	100 Call Component.get_transform, X0
	101 Move [X19+72], X0
	102 Move X0, [X21]
	103 Move X20, [X19+32]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X20
	109 Move X1, X31
	110 Move X2, X31
	111 Call Object.op_Equality, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {122}
	116 Move X8, 0x217A000
	117 Move X8, [X8+784]
	118 Move X0, X19
	119 Move X1, [X8]
	120 Call 0x21A4F50, X0
	121 Move [X19+32], X0
	122 Move X20, [X31+16]
	123 Move X19, [X31+24]
	124 Move X30, [X31+32]
	125 Move X21, [X31+40]
	126 Return 
	127 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x01FA2D80 MOV X19, X0
	0x01FA2D84 CMP W8, 0x1
	0x01FA2D88 B.EQ 0x1FA2DD8
	0x01FA2D8C CBNZ W8, 0x1FA2DF0
	0x01FA2D90 MOVN W8, 0x0
	0x01FA2D94 MOV X0, X31
	0x01FA2D98 STR W8, [X19 + 0x10]
	0x01FA2D9C BL 0x3C3C6C4
	0x01FA2DA0 CBZ X21, 0x1FA2E04
	0x01FA2DA4 LDR X0, [X21 + 0x70]
	0x01FA2DA8 MOVZ W20, 0x1
	0x01FA2DAC STR S0, [X21 + 0x6C]
	0x01FA2DB0 STRB W20, [X21 + 0x68]
	0x01FA2DB4 CBZ X0, 0x1FA2E04
	0x01FA2DB8 LDR X8, [X0]
	0x01FA2DBC LDR V0, [X19 + 0x28]
	0x01FA2DC0 LDR X9, [X8 + 0x2E8]
	0x01FA2DC4 LDR X1, [X8 + 0x2F0]
	0x01FA2DC8 BLR X9
	0x01FA2DCC STR X0, [X19 + 0x18]
	0x01FA2DD0 STR W20, [X19 + 0x10]
	0x01FA2DD4 B 0x1FA2DF4
	0x01FA2DD8 MOVN W8, 0x0
	0x01FA2DDC STR W8, [X19 + 0x10]
	0x01FA2DE0 CBZ X21, 0x1FA2E04
	0x01FA2DE4 MOV W20, W31
	0x01FA2DE8 STRB W31, [X21 + 0x68]
	0x01FA2DEC B 0x1FA2DF4
	0x01FA2DF0 MOV W20, W31
	0x01FA2DF4 MOV W0, W20
	0x01FA2DF8 LDP X20, X19, [X31 + 0x10]
	0x01FA2DFC LDP X30, X21, [X31], #0x20
	0x01FA2E00 RET
	0x01FA2E04 BL 0x1C16F20
	0x01FA2E08 LDR X0, [X0 + 0x18]
	0x01FA2E0C RET
	0x01FA2E10 STP X30, X19, [X31 - 0x10]!
	0x01FA2E14 ADRP X0, 0x2151000
	0x01FA2E18 LDR X0, [X0 + 0xB40]
	0x01FA2E1C BL 0x1C16D08
	0x01FA2E20 BL 0x1C16F10
	0x01FA2E24 MOV X1, X31
	0x01FA2E28 MOV X19, X0
	0x01FA2E2C BL 0x3380310
	0x01FA2E30 ADRP X0, 0x2179000
	0x01FA2E34 LDR X0, [X0 + 0x3D8]
	0x01FA2E38 BL 0x1C16D08
	0x01FA2E3C MOV X1, X0
	0x01FA2E40 MOV X0, X19
	0x01FA2E44 BL 0x1C16DEC
	0x01FA2E48 LDR X0, [X0 + 0x18]
	0x01FA2E4C RET
	0x01FA2E50 STP D11, D10, [X31 - 0x50]!
	0x01FA2E54 STP D9, D8, [X31 + 0x10]
	0x01FA2E58 STR X30, [X31 + 0x20]
	0x01FA2E5C STP X22, X21, [X31 + 0x30]
	0x01FA2E60 STP X20, X19, [X31 + 0x40]
	0x01FA2E64 LDRB W22, [X0 + 0x80]
	0x01FA2E68 CBNZ W22, 0x1FA2F84
	0x01FA2E6C MOV X20, X1
	0x01FA2E70 CBZ X1, 0x1FA2FA4
	0x01FA2E74 MOV X19, X0
	0x01FA2E78 MOV X0, X20
	0x01FA2E7C MOV X1, X31
	0x01FA2E80 BL 0x3C32E90
	0x01FA2E84 MOV X21, X0
	0x01FA2E88 MOV X0, X19
	0x01FA2E8C MOV X1, X31
	0x01FA2E90 BL 0x3C32E90
	0x01FA2E94 CBZ X0, 0x1FA2FA4
	0x01FA2E98 MOV X1, X31
	0x01FA2E9C BL 0x3C3F58C
	0x01FA2EA0 CBZ X21, 0x1FA2FA4
	0x01FA2EA4 MOV X0, X21
	0x01FA2EA8 MOV X1, X31
	0x01FA2EAC BL 0x3C40B58
	0x01FA2EB0 MOV X0, X20
	0x01FA2EB4 MOV X1, X31
	0x01FA2EB8 STP S0, S1, [X19 + 0x30]
	0x01FA2EBC STR S2, [X19 + 0x38]
	0x01FA2EC0 BL 0x3C32E90
	0x01FA2EC4 CBZ X0, 0x1FA2FA4
	0x01FA2EC8 MOV X1, X31
	0x01FA2ECC BL 0x3C3DEB4
	0x01FA2ED0 MOV X0, X31
	0x01FA2ED4 BL 0x3C2A260
	0x01FA2ED8 MOV X0, X19
	0x01FA2EDC MOV X1, X31
	0x01FA2EE0 MOV V10.16B, V0.16B
	0x01FA2EE4 MOV V9.16B, V1.16B
	0x01FA2EE8 MOV V8.16B, V2.16B
	0x01FA2EEC MOV V11.16B, V3.16B
	0x01FA2EF0 BL 0x3C32E90
	0x01FA2EF4 CBZ X0, 0x1FA2FA4
	0x01FA2EF8 MOV X1, X31
	0x01FA2EFC BL 0x3C3DEB4
	0x01FA2F00 FMUL S4, S11, S0
	0x01FA2F04 FMUL S5, S10, S3
	0x01FA2F08 FMUL S16, S11, S1
	0x01FA2F0C FMUL S17, S9, S3
	0x01FA2F10 FMUL S21, S10, S0
	0x01FA2F14 FMUL S22, S11, S2
	0x01FA2F18 FMUL S23, S11, S3
	0x01FA2F1C FMUL S3, S8, S3
	0x01FA2F20 FMUL S6, S9, S2
	0x01FA2F24 FMUL S7, S8, S1
	0x01FA2F28 FMUL S18, S8, S0
	0x01FA2F2C FMUL S20, S10, S1
	0x01FA2F30 FMUL S1, S9, S1
	0x01FA2F34 FADD S4, S4, S5
	0x01FA2F38 FADD S5, S16, S17
	0x01FA2F3C FADD S3, S22, S3
	0x01FA2F40 FSUB S16, S23, S21
	0x01FA2F44 FMUL S19, S10, S2
	0x01FA2F48 FMUL S0, S9, S0
	0x01FA2F4C FMUL S2, S8, S2
	0x01FA2F50 FADD S4, S6, S4
	0x01FA2F54 FADD S5, S18, S5
	0x01FA2F58 FADD S3, S20, S3
	0x01FA2F5C FSUB S1, S16, S1
	0x01FA2F60 MOVZ W8, 0x1
	0x01FA2F64 FSUB S4, S4, S7
	0x01FA2F68 FSUB S5, S5, S19
	0x01FA2F6C FSUB S0, S3, S0
	0x01FA2F70 FSUB S1, S1, S2
	0x01FA2F74 STR X20, [X19 + 0x20]
	0x01FA2F78 STP S4, S5, [X19 + 0x3C]
	0x01FA2F7C STP S0, S1, [X19 + 0x44]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X20, 0x2438000
	008 Move W8, [X20+2004]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x2153000
	015 Move X0, [X0+440]
	016 Call 0x1C17CF4
	017 Move X0, 0x2153000
	018 Move X0, [X0+448]
	019 Call 0x1C17CF4
	020 Move X0, 0x2153000
	021 Move X0, [X0+464]
	022 Call 0x1C17CF4
	023 Move X0, 0x217A000
	024 Move X0, [X0+800]
	025 Call 0x1C17CF4
	026 Move X0, 0x217A000
	027 Move X0, [X0+808]
	028 Call 0x1C17CF4
	029 Move X0, 0x217A000
	030 Move X0, [X0+816]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+2004], W8
	034 Move X8, [X19+64]
	035 Move V0, [X19+3]
	036 Move [X31+48], X8
	037 Move [X31+2], V0
	038 Move X8, [X19+32]
	039 Compare X8, 0
	040 JumpIfEqual {136}
	041 Move X9, 0x2153000
	042 Move X9, [X9+464]
	043 Move X20, 0x2153000
	044 Move W19, [X8+32]
	045 Move X0, [X9]
	046 Move X20, [X20+448]
	047 Call 0x1C17F10
	048 Move X1, [X20]
	049 Move X20, X0
	050 Call List`1<Object>..ctor, X0
	051 Compare X20, 0
	052 JumpIfEqual {136}
	053 Move X8, 0x217A000
	054 Move X21, 0x2153000
	055 Move X8, [X8+816]
	056 Move X21, [X21+440]
	057 Move W11, [X20+28]
	058 Move X10, [X20+16]
	059 Move X1, [X8]
	060 Move X9, [X21]
	061 Add W8, W11, 1
	062 Move [X20+28], W8
	063 Compare X10, 0
	064 JumpIfEqual {136}
	065 NotImplemented "Instruction LDRSW not yet implemented."
	066 Move W12, [X10+24]
	067 Move X22, 0x217A000
	068 Move X22, [X22+808]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add W9, W11, 1
	071 Add X10, X10, X11
	072 Move [X20+24], W9
	073 Move [X10+32], X1
	074 Move X8, [X9+32]
	075 Move X0, X20
	076 Move X8, [X8+192]
	077 Move X2, [X8+112]
	078 Call List`1<Object>.AddWithResize, X0, X1
	079 Move W9, [X20+24]
	080 Move W8, [X20+28]
	081 Move X1, [X22]
	082 Move X11, [X20+16]
	083 Move X10, [X21]
	084 Add W8, W8, 1
	085 Move [X20+28], W8
	086 Compare X11, 0
	087 JumpIfEqual {136}
	088 Move W12, [X11+24]
	089 Move X22, 0x217A000
	090 Move X22, [X22+800]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add W10, W9, 1
	093 Add X9, X11, W9
	094 Move [X20+24], W10
	095 Move [X9+32], X1
	096 Move X8, [X10+32]
	097 Move X0, X20
	098 Move X8, [X8+192]
	099 Move X2, [X8+112]
	100 Call List`1<Object>.AddWithResize, X0, X1
	101 Move W10, [X20+24]
	102 Move W8, [X20+28]
	103 Move X1, [X22]
	104 Move X9, [X20+16]
	105 Move X11, [X21]
	106 Add W8, W8, 1
	107 Move [X20+28], W8
	108 Compare X9, 0
	109 JumpIfEqual {136}
	110 Move W8, [X9+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Add W8, W10, 1
	113 Add X9, X9, W10
	114 Move [X20+24], W8
	115 Move [X9+32], X1
	116 Move X8, [X11+32]
	117 Move X0, X20
	118 Move X8, [X8+192]
	119 Move X2, [X8+112]
	120 Call List`1<Object>.AddWithResize, X0, X1
	121 Move V0, [X31+2]
	122 Move X8, [X31+48]
	123 Add X0, X31, 0
	124 Move W1, W19
	125 Move X2, X20
	126 Move [X31], V0
	127 Move [X31+16], X8
	128 Call InputSystemExtensions.EnableWithDefaultXRBindings, X0, X1, X2
	129 Move X20, [X31+96]
	130 Move X19, [X31+104]
	131 Move X22, [X31+80]
	132 Move X21, [X31+88]
	133 Move X30, [X31+64]
	134 Add X31, X31, 112
	135 Return 
	136 Call 0x1C17F20

Method: System.Boolean BeamCast(out UnityEngine.RaycastHit hitInfo, UnityEngine.Vector3 origin, UnityEngine.Vector3 direction)

Disassembly:
	0x01FA2F80 STRB W8, [X19 + 0x80]
	0x01FA2F84 CMP W22, 0x0
	0x01FA2F88 LDP X20, X19, [X31 + 0x40]
	0x01FA2F8C LDP X22, X21, [X31 + 0x30]
	0x01FA2F90 LDR X30, [X31 + 0x20]
	0x01FA2F94 LDP D9, D8, [X31 + 0x10]
	0x01FA2F98 CSET W0, EQ
	0x01FA2F9C LDP D11, D10, [X31], #0x50
	0x01FA2FA0 RET
	0x01FA2FA4 BL 0x1C16F20
	0x01FA2FA8 STP X30, X21, [X31 - 0x20]!
	0x01FA2FAC STP X20, X19, [X31 + 0x10]
	0x01FA2FB0 ADRP X21, 0x2437000
	0x01FA2FB4 ADRP X20, 0x2151000
	0x01FA2FB8 LDRB W8, [X21 + 0x7DE]
	0x01FA2FBC LDR X20, [X20 + 0x598]
	0x01FA2FC0 MOV X19, X0
	0x01FA2FC4 TBNZ X8, 0x0, 0x1FA2FDC
	0x01FA2FC8 ADRP X0, 0x2151000
	0x01FA2FCC LDR X0, [X0 + 0x598]
	0x01FA2FD0 BL 0x1C16CF4
	0x01FA2FD4 MOVZ W8, 0x1
	0x01FA2FD8 STRB W8, [X21 + 0x7DE]
	0x01FA2FDC STR X31, [X19 + 0x20]
	0x01FA2FE0 LDR X0, [X20]
	0x01FA2FE4 LDR X20, [X19 + 0x28]
	0x01FA2FE8 LDR W8, [X0 + 0xE0]
	0x01FA2FEC CBNZ W8, 0x1FA2FF4
	0x01FA2FF0 BL 0x1C16DFC
	0x01FA2FF4 MOV X0, X20
	0x01FA2FF8 MOV X1, X31
	0x01FA2FFC BL 0x3C38948
	0x01FA3000 TBZ X0, 0x0, 0x1FA307C
	0x01FA3004 LDR X0, [X19 + 0x28]
	0x01FA3008 CBZ X0, 0x1FA308C
	0x01FA300C MOV X1, X31
	0x01FA3010 BL 0x3C32E90
	0x01FA3014 CBZ X0, 0x1FA308C
	0x01FA3018 MOV X1, X31
	0x01FA301C BL 0x3C3F58C
	0x01FA3020 LDR X0, [X19 + 0x28]
	0x01FA3024 STP S0, S1, [X19 + 0x4C]
	0x01FA3028 STR S2, [X19 + 0x54]
	0x01FA302C CBZ X0, 0x1FA308C
	0x01FA3030 MOV X1, X31
	0x01FA3034 BL 0x3C32E90
	0x01FA3038 CBZ X0, 0x1FA308C
	0x01FA303C MOV X1, X31
	0x01FA3040 BL 0x3C3DEB4
	0x01FA3044 LDR X8, [X19]
	0x01FA3048 STP S0, S1, [X19 + 0x58]
	0x01FA304C STP S2, S3, [X19 + 0x60]
	0x01FA3050 MOV X0, X19
	0x01FA3054 LDP X9, X1, [X8 + 0x178]
	0x01FA3058 BLR X9
	0x01FA305C LDR X8, [X19]
	0x01FA3060 STP S0, S1, [X19 + 0x68]
	0x01FA3064 STR S2, [X19 + 0x70]
	0x01FA3068 MOV X0, X19
	0x01FA306C LDP X9, X1, [X8 + 0x188]
	0x01FA3070 BLR X9
	0x01FA3074 STP S0, S1, [X19 + 0x74]
	0x01FA3078 STR S2, [X19 + 0x7C]
	0x01FA307C STRB W31, [X19 + 0x80]
	0x01FA3080 LDP X20, X19, [X31 + 0x10]
	0x01FA3084 LDP X30, X21, [X31], #0x20
	0x01FA3088 RET
	0x01FA308C BL 0x1C16F20
	0x01FA3090 MOV X1, X31
	0x01FA3094 B 0x3C36C30
	0x01FA3098 STR X30, [X31 - 0x30]!
	0x01FA309C STP X22, X21, [X31 + 0x10]
	0x01FA30A0 STP X20, X19, [X31 + 0x20]
	0x01FA30A4 ADRP X21, 0x2436000
	0x01FA30A8 ADRP X22, 0x2178000
	0x01FA30AC ADRP X20, 0x2178000
	0x01FA30B0 LDRB W8, [X21 + 0x7E0]
	0x01FA30B4 LDR X22, [X22 + 0x310]
	0x01FA30B8 LDR X20, [X20 + 0x350]
	0x01FA30BC MOV X19, X0
	0x01FA30C0 TBNZ X8, 0x0, 0x1FA30E4
	0x01FA30C4 ADRP X0, 0x2178000
	0x01FA30C8 LDR X0, [X0 + 0x310]
	0x01FA30CC BL 0x1C16CF4
	0x01FA30D0 ADRP X0, 0x2178000
	0x01FA30D4 LDR X0, [X0 + 0x350]
	0x01FA30D8 BL 0x1C16CF4
	0x01FA30DC MOVZ W8, 0x1
	0x01FA30E0 STRB W8, [X21 + 0x7E0]
	0x01FA30E4 LDR X1, [X22]
	0x01FA30E8 MOV X0, X19
	0x01FA30EC BL 0x21A3F50
	0x01FA30F0 STR X0, [X19 + 0x38]
	0x01FA30F4 LDR X1, [X20]
	0x01FA30F8 MOV X0, X19
	0x01FA30FC BL 0x21A3F50
	0x01FA3100 STR X0, [X19 + 0x40]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X21, 0x2438000
	015 Move W8, [X21+2005]
	016 Move V11, V5
	017 Move V12, V4
	018 Move V13, V3
	019 Move V8, V2
	020 Move V9, V1
	021 Move V10, V0
	022 Move X19, X1
	023 Move X20, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x2152000
	029 Move X0, [X0+1528]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2005], W8
	033 Move X21, 0x2437000
	034 Move W8, [X21+1925]
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x2152000
	038 Move X0, [X0+1448]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+1925], W8
	042 Move X8, 0x2151000
	043 Move X8, [X8+1448]
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Multiply S0, S13, S13
	050 Multiply S1, S12, S12
	051 Move X8, -21725184
	052 Add S0, S0, S1
	053 Move V1, [X8+380]
	054 Move X21, 0x2151000
	055 Multiply S2, S11, S11
	056 Move X21, [X21+1528]
	057 Add S0, S2, S0
	058 NotImplemented "Instruction FSQRT not yet implemented."
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 Move X22, 0x2436000
	064 Move W8, [X22+1923]
	065 Compare W8, 0
	066 JumpIfNotEqual {72}
	067 Move X0, 0x2151000
	068 Move X0, [X0+1440]
	069 Call 0x1C17CF4
	070 Move W8, 1
	071 Move [X22+1923], W8
	072 Move X8, 0x2151000
	073 Move X8, [X8+1440]
	074 Move X8, [X8]
	075 Move X8, [X8+184]
	076 Move S13, [X8]
	077 Move S12, [X8+4]
	078 Move V14, [X8+8]
	079 Move W0, [X20+80]
	080 Move V11, [X20+84]
	081 Move X1, X31
	082 Call LayerMask.op_Implicit, X0
	083 Move X8, [X21]
	084 Move W20, W0
	085 Move W9, [X8+224]
	086 Compare W9, 0
	087 JumpIfNotEqual {90}
	088 Move X0, X8
	089 Call 0x1C17DFC
	090 Add X0, X31, 8
	091 Move X1, X19
	092 Move V0, V11
	093 Move W2, W20
	094 Move X3, X31
	095 Move [X31+8], S10
	096 Move [X31+16], S9
	097 Move [X31+16], S8
	098 Move [X31+24], S13
	099 Move [X31+24], S12
	100 Move [X31+32], S14
	101 Call Physics.Raycast, X0, X1, V0, X2
	102 Move X20, [X31+112]
	103 Move X19, [X31+120]
	104 Move X22, [X31+96]
	105 Move X21, [X31+104]
	106 Move X30, [X31+88]
	107 Move D9, [X31+72]
	108 Move D8, [X31+80]
	109 Move D11, [X31+56]
	110 Move D10, [X31+64]
	111 Move D13, [X31+40]
	112 Move D12, [X31+48]
	113 Move V14, [X31+32]
	114 And W0, W0, 1
	115 Add X31, X31, 128
	116 Return X0

Method: System.Boolean BeamCast(out UnityEngine.RaycastHit hitInfo)

Disassembly:
	0x01FA3104 LDP X20, X19, [X31 + 0x20]
	0x01FA3108 LDP X22, X21, [X31 + 0x10]
	0x01FA310C LDR X30, [X31], #0x30
	0x01FA3110 RET
	0x01FA3114 STR X30, [X31 - 0x30]!
	0x01FA3118 STP X22, X21, [X31 + 0x10]
	0x01FA311C STP X20, X19, [X31 + 0x20]
	0x01FA3120 ADRP X21, 0x2436000
	0x01FA3124 ADRP X22, 0x2150000
	0x01FA3128 LDRB W8, [X21 + 0x7E1]
	0x01FA312C LDR X22, [X22 + 0x598]
	0x01FA3130 MOV X20, X1
	0x01FA3134 MOV X19, X0
	0x01FA3138 TBNZ X8, 0x0, 0x1FA315C
	0x01FA313C ADRP X0, 0x2178000
	0x01FA3140 LDR X0, [X0 + 0x3E0]
	0x01FA3144 BL 0x1C16CF4
	0x01FA3148 ADRP X0, 0x2150000
	0x01FA314C LDR X0, [X0 + 0x598]
	0x01FA3150 BL 0x1C16CF4
	0x01FA3154 MOVZ W8, 0x1
	0x01FA3158 STRB W8, [X21 + 0x7E1]
	0x01FA315C LDR X0, [X22]
	0x01FA3160 LDR X21, [X19 + 0x40]
	0x01FA3164 LDR W8, [X0 + 0xE0]
	0x01FA3168 CBNZ W8, 0x1FA3170

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+72]
	009 Compare X0, 0
	010 JumpIfEqual {33}
	011 Move S9, [X19+168]
	012 Move S8, [X19+172]
	013 Move V10, [X19+164]
	014 Move X20, X1
	015 Move X1, X31
	016 Call Transform.get_forward, X0
	017 Move V4, V1
	018 Move V5, V2
	019 Move X0, X19
	020 Move X1, X20
	021 Move V1, V9
	022 Move V2, V8
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+24]
	026 Move D9, [X31+8]
	027 Move D8, [X31+16]
	028 Move V3, V0
	029 Move V0, V10
	030 Move V10, [X31+48]
	031 Call RayBeamer.BeamCast, X0, X1, X2, X3
	032 Return X0
	033 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01FA316C BL 0x1C16DFC
	0x01FA3170 MOV X0, X21
	0x01FA3174 MOV X1, X31
	0x01FA3178 BL 0x3C38948
	0x01FA317C TBZ X0, 0x0, 0x1FA31C8
	0x01FA3180 LDR X8, [X19 + 0x40]
	0x01FA3184 CBZ X8, 0x1FA32C8
	0x01FA3188 LDR X0, [X22]
	0x01FA318C LDR X21, [X8 + 0x38]
	0x01FA3190 LDR W9, [X0 + 0xE0]
	0x01FA3194 CBNZ W9, 0x1FA319C
	0x01FA3198 BL 0x1C16DFC
	0x01FA319C MOV X0, X21
	0x01FA31A0 MOV X1, X31
	0x01FA31A4 BL 0x3C38948
	0x01FA31A8 TBZ X0, 0x0, 0x1FA31C8
	0x01FA31AC LDR X8, [X19 + 0x40]
	0x01FA31B0 CBZ X8, 0x1FA32C8
	0x01FA31B4 LDR X0, [X8 + 0x38]
	0x01FA31B8 CBZ X0, 0x1FA32C8
	0x01FA31BC MOV X1, X31
	0x01FA31C0 BL 0x1E9E9B0
	0x01FA31C4 TBNZ X0, 0x0, 0x1FA32B8
	0x01FA31C8 LDR X0, [X22]
	0x01FA31CC LDR X21, [X19 + 0x20]
	0x01FA31D0 LDR W8, [X0 + 0xE0]
	0x01FA31D4 CBNZ W8, 0x1FA31DC
	0x01FA31D8 BL 0x1C16DFC
	0x01FA31DC MOV X0, X21
	0x01FA31E0 MOV X1, X31
	0x01FA31E4 MOV X2, X31
	0x01FA31E8 BL 0x3C354F8
	0x01FA31EC TBNZ X0, 0x0, 0x1FA32B8
	0x01FA31F0 LDR X0, [X22]
	0x01FA31F4 LDR X21, [X19 + 0x28]
	0x01FA31F8 LDR W8, [X0 + 0xE0]
	0x01FA31FC CBNZ W8, 0x1FA3204
	0x01FA3200 BL 0x1C16DFC
	0x01FA3204 MOV X0, X21
	0x01FA3208 MOV X1, X20
	0x01FA320C MOV X2, X31
	0x01FA3210 BL 0x3C3883C
	0x01FA3214 TBZ X0, 0x0, 0x1FA3220
	0x01FA3218 LDR X21, [X19 + 0x30]
	0x01FA321C B 0x1FA323C
	0x01FA3220 CBZ X20, 0x1FA32C8
	0x01FA3224 ADRP X8, 0x2178000
	0x01FA3228 LDR X8, [X8 + 0x3E0]
	0x01FA322C MOV X0, X20
	0x01FA3230 LDR X1, [X8]
	0x01FA3234 BL 0x21A3F50
	0x01FA3238 MOV X21, X0
	0x01FA323C STP X20, X21, [X19 + 0x28]
	0x01FA3240 LDR X0, [X22]
	0x01FA3244 LDR W8, [X0 + 0xE0]
	0x01FA3248 CBNZ W8, 0x1FA3250
	0x01FA324C BL 0x1C16DFC
	0x01FA3250 MOV X0, X21
	0x01FA3254 MOV X1, X31
	0x01FA3258 MOV X2, X31
	0x01FA325C BL 0x3C354F8
	0x01FA3260 TBZ X0, 0x0, 0x1FA32B8
	0x01FA3264 CBZ X21, 0x1FA32C8
	0x01FA3268 LDR X0, [X22]
	0x01FA326C LDR X20, [X21 + 0x20]
	0x01FA3270 LDR W8, [X0 + 0xE0]
	0x01FA3274 CBNZ W8, 0x1FA327C
	0x01FA3278 BL 0x1C16DFC
	0x01FA327C MOV X0, X20
	0x01FA3280 MOV X1, X31
	0x01FA3284 MOV X2, X31
	0x01FA3288 BL 0x3C354F8
	0x01FA328C TBNZ X0, 0x0, 0x1FA32B8
	0x01FA3290 LDR X8, [X19 + 0x38]
	0x01FA3294 CBZ X8, 0x1FA32C8
	0x01FA3298 LDRB W8, [X8 + 0x3C]
	0x01FA329C CBZ W8, 0x1FA32B8
	0x01FA32A0 MOV X0, X19
	0x01FA32A4 MOV X1, X21
	0x01FA32A8 LDP X20, X19, [X31 + 0x20]
	0x01FA32AC LDP X22, X21, [X31 + 0x10]
	0x01FA32B0 LDR X30, [X31], #0x30
	0x01FA32B4 B 0x1FA32CC
	0x01FA32B8 LDP X20, X19, [X31 + 0x20]
	0x01FA32BC LDP X22, X21, [X31 + 0x10]
	0x01FA32C0 LDR X30, [X31], #0x30
	0x01FA32C4 RET
	0x01FA32C8 BL 0x1C16F20
	0x01FA32CC STR X30, [X31 - 0x40]!
	0x01FA32D0 STP X24, X23, [X31 + 0x10]
	0x01FA32D4 STP X22, X21, [X31 + 0x20]
	0x01FA32D8 STP X20, X19, [X31 + 0x30]
	0x01FA32DC ADRP X21, 0x2436000
	0x01FA32E0 LDRB W8, [X21 + 0x7E3]
	0x01FA32E4 MOV X19, X1
	0x01FA32E8 MOV X20, X0
	0x01FA32EC TBNZ X8, 0x0, 0x1FA331C
	0x01FA32F0 ADRP X0, 0x2150000
	0x01FA32F4 LDR X0, [X0 + 0xA28]
	0x01FA32F8 BL 0x1C16CF4
	0x01FA32FC ADRP X0, 0x2178000
	0x01FA3300 LDR X0, [X0 + 0x3E8]
	0x01FA3304 BL 0x1C16CF4
	0x01FA3308 ADRP X0, 0x2178000
	0x01FA330C LDR X0, [X0 + 0x3F0]
	0x01FA3310 BL 0x1C16CF4
	0x01FA3314 MOVZ W8, 0x1
	0x01FA3318 STRB W8, [X21 + 0x7E3]
	0x01FA331C CBZ X19, 0x1FA33DC
	0x01FA3320 MOV X0, X19
	0x01FA3324 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], D9
	003 Move [X31+56], D8
	004 Move [X31+64], X30
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X20, 0x2437000
	008 Move W8, [X20+2006]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2157000
	015 Move X0, [X0+2240]
	016 Call 0x1C17CF4
	017 Move X0, 0x2179000
	018 Move X0, [X0+824]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2006], W8
	022 NotImplemented "Instruction MOVI not yet implemented."
	023 Move [X31+28], V0
	024 Move [X31], V0
	025 Move [X31+8], V0
	026 Move W8, [X19+40]
	027 Compare W8, 0
	028 JumpIfEqual {48}
	029 Add X20, X19, 48
	030 Move X0, X20
	031 Move X1, X31
	032 Call InputActionProperty.get_action, X0
	033 Compare X0, 0
	034 JumpIfEqual {48}
	035 Move X0, X20
	036 Move X1, X31
	037 Call InputActionProperty.get_action, X0
	038 Compare X0, 0
	039 JumpIfEqual {130}
	040 Move X8, 0x2157000
	041 Move X8, [X8+2240]
	042 Move X1, [X8]
	043 Call InputAction.ReadValue, X0
	044 Move S1, 1
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move [X19+152], W8
	048 Move W8, [X19+152]
	049 Move [X19+160], W8
	050 Compare W8, 0
	051 JumpIfEqual {86}
	052 Move X0, [X19+72]
	053 Compare X0, 0
	054 JumpIfEqual {130}
	055 Move X1, X31
	056 Call Transform.get_position, X0
	057 Add X1, X31, 0
	058 Move X0, X19
	059 Move [X19+164], S0
	060 Move [X19+172], S1
	061 Move [X19+172], S2
	062 Call RayBeamer.BeamCast, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {101}
	067 Add X0, X31, 0
	068 Move X1, X31
	069 Call RaycastHit.get_collider, X0
	070 Move [X19+216], X0
	071 Add X0, X31, 0
	072 Move X1, X31
	073 Call RaycastHit.get_point, X0
	074 Move V3, [X19+7]
	075 Add X0, X31, 0
	076 Move X1, X31
	077 Move [X19+176], S0
	078 Move [X19+184], S1
	079 Move [X19+184], S2
	080 Move [X19+188], V3
	081 Call RaycastHit.get_point, X0
	082 Move W8, 2
	083 Move [X19+204], S0
	084 Move [X19+212], S1
	085 Move [X19+212], S2
	086 Move W8, [X19+156]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, [X19+144]
	089 Compare X0, 0
	090 JumpIfEqual {99}
	091 Move X8, 0x2179000
	092 Move X1, [X19+216]
	093 Move S0, [X19+204]
	094 Move S1, [X19+208]
	095 Move V2, [X19+212]
	096 Move X8, [X8+824]
	097 Move X2, [X8]
	098 Call UnityEvent`2<Object, Vector3>.Invoke, X0, X1, X2
	099 Move [X19+156], W31
	100 Move [X19+216], X31
	101 Move X0, [X19+72]
	102 Move [X19+216], X31
	103 Compare X0, 0
	104 JumpIfEqual {130}
	105 Move V8, [X19+172]
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 Move X1, X31
	108 Call Transform.get_forward, X0
	109 Move V3, [X19+84]
	110 Move V4, [X19+8]
	111 Move V0.S[1], V1.S[0]
	112 Move W8, 1
	113 NotImplemented "Instruction INVALID not yet implemented."
	114 Multiply S1, S2, S3
	115 Add V0, V9, V0
	116 Add S1, S8, S1
	117 Move [X19+188], V4
	118 Move [X19+176], D0
	119 Move [X19+184], S1
	120 Move [X19+156], W8
	121 Move X0, X19
	122 Call RayBeamer.UpdateRay, X0
	123 Move X20, [X31+80]
	124 Move X19, [X31+88]
	125 Move X30, [X31+64]
	126 Move D9, [X31+48]
	127 Move D8, [X31+56]
	128 Add X31, X31, 96
	129 Return 
	130 Call 0x1C17F20

Method: System.Void CancelHit()

Disassembly:
	0x01FA3430 BL 0x3C38948
	0x01FA3434 TBZ X0, 0x0, 0x1FA3480

ISIL:
	001 Move [X0+156], W31
	002 Return 

Method: System.Void UpdateRay()

Disassembly:
	0x01FA3328 BL 0x3C32ECC
	0x01FA332C CBZ X0, 0x1FA33DC
	0x01FA3330 MOV X1, X31
	0x01FA3334 BL 0x3C389D4
	0x01FA3338 MOV X21, X0
	0x01FA333C MOV X0, X20
	0x01FA3340 MOV X1, X31
	0x01FA3344 BL 0x3C32ECC
	0x01FA3348 CBZ X0, 0x1FA33DC
	0x01FA334C ADRP X22, 0x2178000
	0x01FA3350 ADRP X23, 0x2178000
	0x01FA3354 ADRP X24, 0x2150000
	0x01FA3358 LDR X22, [X22 + 0x3E8]
	0x01FA335C LDR X23, [X23 + 0x3F0]
	0x01FA3360 LDR X24, [X24 + 0xA28]
	0x01FA3364 MOV X1, X31
	0x01FA3368 BL 0x3C389D4
	0x01FA336C LDR X8, [X22]
	0x01FA3370 LDR X2, [X23]
	0x01FA3374 MOV X3, X0
	0x01FA3378 MOV X1, X21
	0x01FA337C MOV X0, X8
	0x01FA3380 MOV X4, X31
	0x01FA3384 BL 0x32277C4
	0x01FA3388 LDR X8, [X24]
	0x01FA338C MOV X21, X0
	0x01FA3390 LDR W9, [X8 + 0xE0]
	0x01FA3394 CBNZ W9, 0x1FA33A0
	0x01FA3398 MOV X0, X8
	0x01FA339C BL 0x1C16DFC
	0x01FA33A0 MOV X0, X21
	0x01FA33A4 MOV X1, X31
	0x01FA33A8 BL 0x3C06048
	0x01FA33AC LDR X8, [X19]
	0x01FA33B0 MOV X0, X19
	0x01FA33B4 MOV X1, X20
	0x01FA33B8 LDP X9, X2, [X8 + 0x198]
	0x01FA33BC BLR X9
	0x01FA33C0 TBZ X0, 0x0, 0x1FA33C8
	0x01FA33C4 STR X19, [X20 + 0x20]
	0x01FA33C8 LDP X20, X19, [X31 + 0x30]
	0x01FA33CC LDP X22, X21, [X31 + 0x20]
	0x01FA33D0 LDP X24, X23, [X31 + 0x10]
	0x01FA33D4 LDR X30, [X31], #0x40
	0x01FA33D8 RET
	0x01FA33DC BL 0x1C16F20
	0x01FA33E0 STP X30, X21, [X31 - 0x20]!
	0x01FA33E4 STP X20, X19, [X31 + 0x10]
	0x01FA33E8 ADRP X20, 0x2436000
	0x01FA33EC ADRP X21, 0x2150000
	0x01FA33F0 LDRB W8, [X20 + 0x7E2]
	0x01FA33F4 LDR X21, [X21 + 0x598]
	0x01FA33F8 MOV X19, X0
	0x01FA33FC TBNZ X8, 0x0, 0x1FA3414
	0x01FA3400 ADRP X0, 0x2150000
	0x01FA3404 LDR X0, [X0 + 0x598]
	0x01FA3408 BL 0x1C16CF4
	0x01FA340C MOVZ W8, 0x1
	0x01FA3410 STRB W8, [X20 + 0x7E2]
	0x01FA3414 LDR X0, [X21]
	0x01FA3418 LDR X20, [X19 + 0x40]
	0x01FA341C LDR W8, [X0 + 0xE0]
	0x01FA3420 CBNZ W8, 0x1FA3428
	0x01FA3424 BL 0x1C16DFC
	0x01FA3428 MOV X0, X20
	0x01FA342C MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2437000
	005 Move W8, [X20+2007]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2153000
	012 Move X0, [X0+2480]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2007], W8
	016 Move X0, [X19+88]
	017 Compare X0, 0
	018 JumpIfEqual {83}
	019 Move W1, [X19+160]
	020 Move X2, X31
	021 Call Renderer.set_enabled, X0, X1
	022 Move W8, [X19+160]
	023 Compare W8, 0
	024 JumpIfEqual {79}
	025 Move X8, 0x2153000
	026 Move X8, [X8+2480]
	027 Move X20, [X19+88]
	028 Move W1, 2
	029 Move X0, [X8]
	030 Call 0x1C17D6C
	031 Compare X0, 0
	032 JumpIfEqual {83}
	033 Move W8, [X0+24]
	034 Move X1, X0
	035 Compare W8, 0
	036 JumpIfEqual {84}
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 Move V1, [X19+172]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X1+32], D0
	041 Move [X1+40], S1
	042 Move V0, [X19+176]
	043 Move V1, [X19+184]
	044 Move [X1+44], D0
	045 Move [X1+52], S1
	046 Compare X20, 0
	047 JumpIfEqual {83}
	048 Move X0, X20
	049 Move X2, X31
	050 Call LineRenderer.SetPositions, X0, X1
	051 Move X0, [X19+88]
	052 Compare X0, 0
	053 JumpIfEqual {83}
	054 Move W1, 2
	055 Move X2, X31
	056 Call LineRenderer.set_positionCount, X0, X1
	057 Move X0, [X19+88]
	058 Compare X0, 0
	059 JumpIfEqual {83}
	060 Move S2, [X19+196]
	061 Move S3, [X19+200]
	062 Move S0, [X19+188]
	063 Move S1, [X19+192]
	064 Move X1, X31
	065 Call LineRenderer.set_startColor, X0, X1
	066 Move X0, [X19+88]
	067 Compare X0, 0
	068 JumpIfEqual {83}
	069 Move S2, [X19+196]
	070 Move S3, [X19+200]
	071 Move S0, [X19+188]
	072 Move S1, [X19+192]
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X1, X31
	076 Move X30, [X31+32]
	077 Call LineRenderer.set_endColor, X0, X1
	078 Return 
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X30, [X31+32]
	082 Return 
	083 Call 0x1C17F20
	084 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01FA3438 LDR X8, [X19 + 0x40]
	0x01FA343C CBZ X8, 0x1FA3534
	0x01FA3440 LDR X0, [X21]
	0x01FA3444 LDR X20, [X8 + 0x38]
	0x01FA3448 LDR W9, [X0 + 0xE0]
	0x01FA344C CBNZ W9, 0x1FA3454
	0x01FA3450 BL 0x1C16DFC
	0x01FA3454 MOV X0, X20
	0x01FA3458 MOV X1, X31
	0x01FA345C BL 0x3C38948
	0x01FA3460 TBZ X0, 0x0, 0x1FA3480
	0x01FA3464 LDR X8, [X19 + 0x40]
	0x01FA3468 CBZ X8, 0x1FA3534
	0x01FA346C LDR X0, [X8 + 0x38]
	0x01FA3470 CBZ X0, 0x1FA3534
	0x01FA3474 MOV X1, X31
	0x01FA3478 BL 0x1E9E9B0
	0x01FA347C TBNZ X0, 0x0, 0x1FA3514
	0x01FA3480 LDR X0, [X21]
	0x01FA3484 LDR X20, [X19 + 0x20]
	0x01FA3488 LDR W8, [X0 + 0xE0]
	0x01FA348C CBNZ W8, 0x1FA3494
	0x01FA3490 BL 0x1C16DFC
	0x01FA3494 MOV X0, X20
	0x01FA3498 MOV X1, X31
	0x01FA349C MOV X2, X31
	0x01FA34A0 BL 0x3C354F8
	0x01FA34A4 TBZ X0, 0x0, 0x1FA34DC
	0x01FA34A8 LDR X8, [X19 + 0x20]
	0x01FA34AC CBZ X8, 0x1FA3534
	0x01FA34B0 LDR X0, [X21]
	0x01FA34B4 LDR X20, [X8 + 0x20]
	0x01FA34B8 LDR W9, [X0 + 0xE0]
	0x01FA34BC CBNZ W9, 0x1FA34C4
	0x01FA34C0 BL 0x1C16DFC
	0x01FA34C4 MOV X0, X20
	0x01FA34C8 MOV X1, X19
	0x01FA34CC MOV X2, X31
	0x01FA34D0 BL 0x3C354F8
	0x01FA34D4 TBZ X0, 0x0, 0x1FA34DC
	0x01FA34D8 STR X31, [X19 + 0x20]
	0x01FA34DC LDR X0, [X21]
	0x01FA34E0 LDR X20, [X19 + 0x20]
	0x01FA34E4 LDR W8, [X0 + 0xE0]
	0x01FA34E8 CBNZ W8, 0x1FA34F0
	0x01FA34EC BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2437000
	007 Move X21, 0x2179000
	008 Move X20, 0x2179000
	009 Move W8, [X22+2008]
	010 Move X21, [X21+832]
	011 Move X20, [X20+840]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2179000
	018 Move X0, [X0+840]
	019 Call 0x1C17CF4
	020 Move X0, 0x2179000
	021 Move X0, [X0+832]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2008], W8
	025 Move W8, 1
	026 Move TEMP, 0
	027 Not TEMP
	028 Move W0, TEMP
	029 Move X1, X31
	030 Move [X19+40], W8
	031 Call LayerMask.op_Implicit, X0
	032 Move X10, -21716992
	033 Move X11, -21712896
	034 Move V0, [X10+243]
	035 Move V1, [X11+8]
	036 Move W9, 0xD70A
	037 Move W8, 0x42C80000
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 Move [X19+80], W0
	040 Move [X19+84], W8
	041 Move [X19+96], W9
	042 Move [X19+112], V0
	043 Move [X19+120], V1
	044 Move X0, [X21]
	045 Call 0x1C17F10
	046 Move X1, [X20]
	047 Move X20, X0
	048 Call UnityEvent`2<Object, Vector3>..ctor, X0
	049 Move [X19+144], X20
	050 Move X0, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X1, X31
	056 Move X30, [X31+48]
	057 Call MonoBehaviour..ctor, X0
	058 Return 

