Type: Fusion.XR.Host.Locomotion.RigLocomotion

Method: System.Void Awake()

Disassembly:
	0x01FA34F0 MOV X0, X20
	0x01FA34F4 MOV X1, X31
	0x01FA34F8 MOV X2, X31
	0x01FA34FC BL 0x3C354F8
	0x01FA3500 TBZ X0, 0x0, 0x1FA3514
	0x01FA3504 LDR X8, [X19 + 0x38]
	0x01FA3508 CBZ X8, 0x1FA3534
	0x01FA350C LDRB W8, [X8 + 0x3C]
	0x01FA3510 CBZ W8, 0x1FA3520
	0x01FA3514 LDP X20, X19, [X31 + 0x10]
	0x01FA3518 LDP X30, X21, [X31], #0x20
	0x01FA351C RET
	0x01FA3520 LDR X1, [X19 + 0x20]
	0x01FA3524 MOV X0, X19
	0x01FA3528 LDP X20, X19, [X31 + 0x10]
	0x01FA352C LDP X30, X21, [X31], #0x20
	0x01FA3530 B 0x1FA3538
	0x01FA3534 BL 0x1C16F20
	0x01FA3538 STP X30, X25, [X31 - 0x40]!
	0x01FA353C STP X24, X23, [X31 + 0x10]
	0x01FA3540 STP X22, X21, [X31 + 0x20]
	0x01FA3544 STP X20, X19, [X31 + 0x30]
	0x01FA3548 ADRP X21, 0x2436000
	0x01FA354C LDRB W8, [X21 + 0x7E4]
	0x01FA3550 MOV X20, X1
	0x01FA3554 MOV X19, X0
	0x01FA3558 TBNZ X8, 0x0, 0x1FA3594
	0x01FA355C ADRP X0, 0x2150000
	0x01FA3560 LDR X0, [X0 + 0xA28]
	0x01FA3564 BL 0x1C16CF4
	0x01FA3568 ADRP X0, 0x2150000
	0x01FA356C LDR X0, [X0 + 0x598]
	0x01FA3570 BL 0x1C16CF4
	0x01FA3574 ADRP X0, 0x2178000
	0x01FA3578 LDR X0, [X0 + 0x3F8]
	0x01FA357C BL 0x1C16CF4
	0x01FA3580 ADRP X0, 0x2178000
	0x01FA3584 LDR X0, [X0 + 0x3F0]
	0x01FA3588 BL 0x1C16CF4
	0x01FA358C MOVZ W8, 0x1
	0x01FA3590 STRB W8, [X21 + 0x7E4]
	0x01FA3594 CBZ X20, 0x1FA370C
	0x01FA3598 MOV X0, X20
	0x01FA359C MOV X1, X31
	0x01FA35A0 BL 0x3C32ECC
	0x01FA35A4 CBZ X0, 0x1FA370C
	0x01FA35A8 MOV X1, X31
	0x01FA35AC BL 0x3C389D4
	0x01FA35B0 MOV X21, X0
	0x01FA35B4 MOV X0, X19
	0x01FA35B8 MOV X1, X31
	0x01FA35BC BL 0x3C32ECC
	0x01FA35C0 CBZ X0, 0x1FA370C
	0x01FA35C4 ADRP X23, 0x2178000
	0x01FA35C8 ADRP X24, 0x2178000
	0x01FA35CC ADRP X25, 0x2150000
	0x01FA35D0 ADRP X22, 0x2150000
	0x01FA35D4 LDR X23, [X23 + 0x3F8]
	0x01FA35D8 LDR X24, [X24 + 0x3F0]
	0x01FA35DC LDR X25, [X25 + 0xA28]
	0x01FA35E0 LDR X22, [X22 + 0x598]
	0x01FA35E4 MOV X1, X31
	0x01FA35E8 BL 0x3C389D4
	0x01FA35EC LDR X8, [X23]
	0x01FA35F0 LDR X2, [X24]
	0x01FA35F4 MOV X3, X0
	0x01FA35F8 MOV X1, X21
	0x01FA35FC MOV X0, X8
	0x01FA3600 MOV X4, X31
	0x01FA3604 BL 0x32277C4
	0x01FA3608 LDR X8, [X25]
	0x01FA360C MOV X21, X0
	0x01FA3610 LDR W9, [X8 + 0xE0]
	0x01FA3614 CBNZ W9, 0x1FA3620
	0x01FA3618 MOV X0, X8
	0x01FA361C BL 0x1C16DFC
	0x01FA3620 MOV X0, X21
	0x01FA3624 MOV X1, X31
	0x01FA3628 BL 0x3C06048
	0x01FA362C LDR X0, [X22]
	0x01FA3630 LDR X20, [X20 + 0x28]
	0x01FA3634 LDR W8, [X0 + 0xE0]
	0x01FA3638 CBNZ W8, 0x1FA3640
	0x01FA363C BL 0x1C16DFC
	0x01FA3640 MOV X0, X20
	0x01FA3644 MOV X1, X31
	0x01FA3648 BL 0x3C38948
	0x01FA364C TBZ X0, 0x0, 0x1FA36E0
	0x01FA3650 LDR X8, [X19 + 0x20]
	0x01FA3654 CBZ X8, 0x1FA370C
	0x01FA3658 LDR X0, [X8 + 0x28]
	0x01FA365C CBZ X0, 0x1FA370C
	0x01FA3660 MOV X1, X31
	0x01FA3664 BL 0x3C32E90
	0x01FA3668 CBZ X0, 0x1FA370C
	0x01FA366C MOV X1, X31
	0x01FA3670 BL 0x3C3F58C
	0x01FA3674 LDR X8, [X19 + 0x20]
	0x01FA3678 STP S0, S1, [X19 + 0x48]
	0x01FA367C STR S2, [X19 + 0x50]
	0x01FA3680 CBZ X8, 0x1FA370C
	0x01FA3684 LDR X0, [X8 + 0x28]
	0x01FA3688 CBZ X0, 0x1FA370C
	0x01FA368C MOV X1, X31
	0x01FA3690 BL 0x3C32E90
	0x01FA3694 CBZ X0, 0x1FA370C
	0x01FA3698 MOV X1, X31
	0x01FA369C BL 0x3C3DEB4
	0x01FA36A0 LDR X0, [X19 + 0x20]
	0x01FA36A4 STP S0, S1, [X19 + 0x54]
	0x01FA36A8 STP S2, S3, [X19 + 0x5C]
	0x01FA36AC CBZ X0, 0x1FA370C
	0x01FA36B0 LDR X8, [X0]
	0x01FA36B4 LDP X9, X1, [X8 + 0x178]
	0x01FA36B8 BLR X9
	0x01FA36BC LDR X0, [X19 + 0x20]
	0x01FA36C0 STP S0, S1, [X19 + 0x64]
	0x01FA36C4 STR S2, [X19 + 0x6C]
	0x01FA36C8 CBZ X0, 0x1FA370C
	0x01FA36CC LDR X8, [X0]
	0x01FA36D0 LDP X9, X1, [X8 + 0x188]
	0x01FA36D4 BLR X9
	0x01FA36D8 STP S0, S1, [X19 + 0x70]
	0x01FA36DC STR S2, [X19 + 0x78]
	0x01FA36E0 LDR X0, [X19 + 0x20]
	0x01FA36E4 CBZ X0, 0x1FA370C
	0x01FA36E8 LDR X8, [X0]
	0x01FA36EC LDP X9, X1, [X8 + 0x1A8]
	0x01FA36F0 BLR X9
	0x01FA36F4 STR X31, [X19 + 0x20]
	0x01FA36F8 LDP X20, X19, [X31 + 0x30]
	0x01FA36FC LDP X22, X21, [X31 + 0x20]
	0x01FA3700 LDP X24, X23, [X31 + 0x10]
	0x01FA3704 LDP X30, X25, [X31], #0x40
	0x01FA3708 RET
	0x01FA370C BL 0x1C16F20
	0x01FA3710 MOV X1, X31
	0x01FA3714 B 0x3C36C30
	0x01FA3718 STP X30, X21, [X31 - 0x20]!
	0x01FA371C STP X20, X19, [X31 + 0x10]
	0x01FA3720 ADRP X21, 0x2436000
	0x01FA3724 ADRP X20, 0x2150000
	0x01FA3728 LDRB W8, [X21 + 0x7E5]
	0x01FA372C LDR X20, [X20 + 0x598]
	0x01FA3730 MOV X19, X0
	0x01FA3734 TBNZ X8, 0x0, 0x1FA374C
	0x01FA3738 ADRP X0, 0x2150000
	0x01FA373C LDR X0, [X0 + 0x598]
	0x01FA3740 BL 0x1C16CF4
	0x01FA3744 MOVZ W8, 0x1
	0x01FA3748 STRB W8, [X21 + 0x7E5]
	0x01FA374C LDR X0, [X20]
	0x01FA3750 LDR X19, [X19 + 0x20]
	0x01FA3754 LDR W8, [X0 + 0xE0]
	0x01FA3758 CBNZ W8, 0x1FA3760
	0x01FA375C BL 0x1C16DFC
	0x01FA3760 MOV X0, X19
	0x01FA3764 LDP X20, X19, [X31 + 0x10]
	0x01FA3768 MOV X1, X31
	0x01FA376C MOV X2, X31
	0x01FA3770 LDP X30, X21, [X31], #0x20
	0x01FA3774 B 0x3C354F8
	0x01FA3778 STP X30, X19, [X31 - 0x10]!
	0x01FA377C ADRP X19, 0x2435000
	0x01FA3780 LDRB W8, [X19 + 0x783]
	0x01FA3784 CBNZ W8, 0x1FA379C
	0x01FA3788 ADRP X0, 0x2150000
	0x01FA378C LDR X0, [X0 + 0x5A0]
	0x01FA3790 BL 0x1C16CF4
	0x01FA3794 MOVZ W8, 0x1
	0x01FA3798 STRB W8, [X19 + 0x783]
	0x01FA379C ADRP X8, 0x2150000
	0x01FA37A0 LDR X8, [X8 + 0x5A0]
	0x01FA37A4 LDR X8, [X8]
	0x01FA37A8 LDR X8, [X8 + 0xB8]
	0x01FA37AC LDP S0, S1, [X8]
	0x01FA37B0 LDR V2, [X8 + 0x8]
	0x01FA37B4 LDP X30, X19, [X31], #0x10
	0x01FA37B8 RET
	0x01FA37BC STP X30, X19, [X31 - 0x10]!
	0x01FA37C0 ADRP X19, 0x2435000
	0x01FA37C4 LDRB W8, [X19 + 0x783]
	0x01FA37C8 CBNZ W8, 0x1FA37E0
	0x01FA37CC ADRP X0, 0x2150000
	0x01FA37D0 LDR X0, [X0 + 0x5A0]
	0x01FA37D4 BL 0x1C16CF4
	0x01FA37D8 MOVZ W8, 0x1
	0x01FA37DC STRB W8, [X19 + 0x783]
	0x01FA37E0 ADRP X8, 0x2150000
	0x01FA37E4 LDR X8, [X8 + 0x5A0]
	0x01FA37E8 LDR X8, [X8]
	0x01FA37EC LDR X8, [X8 + 0xB8]
	0x01FA37F0 LDP S0, S1, [X8]
	0x01FA37F4 LDR V2, [X8 + 0x8]
	0x01FA37F8 LDP X30, X19, [X31], #0x10
	0x01FA37FC RET
	0x01FA3800 STP X30, X21, [X31 - 0x20]!
	0x01FA3804 STP X20, X19, [X31 + 0x10]
	0x01FA3808 ADRP X20, 0x2436000
	0x01FA380C ADRP X21, 0x2178000
	0x01FA3810 LDRB W8, [X20 + 0x7E6]
	0x01FA3814 LDR X21, [X21 + 0x400]
	0x01FA3818 MOV X19, X0
	0x01FA381C TBNZ X8, 0x0, 0x1FA3834
	0x01FA3820 ADRP X0, 0x2178000
	0x01FA3824 LDR X0, [X0 + 0x400]
	0x01FA3828 BL 0x1C16CF4
	0x01FA382C MOVZ W8, 0x1
	0x01FA3830 STRB W8, [X20 + 0x7E6]
	0x01FA3834 LDR X1, [X21]
	0x01FA3838 MOV X0, X19
	0x01FA383C BL 0x21A3894
	0x01FA3840 STR X0, [X19 + 0x28]
	0x01FA3844 LDP X20, X19, [X31 + 0x10]
	0x01FA3848 LDP X30, X21, [X31], #0x20
	0x01FA384C RET
	0x01FA3850 STP X30, X21, [X31 - 0x20]!
	0x01FA3854 STP X20, X19, [X31 + 0x10]
	0x01FA3858 ADRP X21, 0x2436000
	0x01FA385C ADRP X20, 0x2150000
	0x01FA3860 LDRB W8, [X21 + 0x7E7]
	0x01FA3864 LDR X20, [X20 + 0x598]
	0x01FA3868 MOV X19, X0
	0x01FA386C TBNZ X8, 0x0, 0x1FA3884
	0x01FA3870 ADRP X0, 0x2150000
	0x01FA3874 LDR X0, [X0 + 0x598]
	0x01FA3878 BL 0x1C16CF4
	0x01FA387C MOVZ W8, 0x1
	0x01FA3880 STRB W8, [X21 + 0x7E7]
	0x01FA3884 MOV X0, X19
	0x01FA3888 BL 0x1FA2FA8
	0x01FA388C LDR X0, [X20]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+112], X29
	003 Move [X31+120], X30
	004 Move [X31+128], X28
	005 Move [X31+136], X27
	006 Move [X31+144], X26
	007 Move [X31+152], X25
	008 Move [X31+160], X24
	009 Move [X31+168], X23
	010 Move [X31+176], X22
	011 Move [X31+184], X21
	012 Move [X31+192], X20
	013 Move [X31+200], X19
	014 Move X22, 0x2437000
	015 Move X21, 0x2179000
	016 Move X20, 0x2179000
	017 Move W8, [X22+2009]
	018 Move X21, [X21+848]
	019 Move X20, [X20+856]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {75}
	025 Move X0, 0x2179000
	026 Move X0, [X0+848]
	027 Call 0x1C17CF4
	028 Move X0, 0x2179000
	029 Move X0, [X0+856]
	030 Call 0x1C17CF4
	031 Move X0, 0x2179000
	032 Move X0, [X0+864]
	033 Call 0x1C17CF4
	034 Move X0, 0x2179000
	035 Move X0, [X0+872]
	036 Call 0x1C17CF4
	037 Move X0, 0x2179000
	038 Move X0, [X0+880]
	039 Call 0x1C17CF4
	040 Move X0, 0x2179000
	041 Move X0, [X0+888]
	042 Call 0x1C17CF4
	043 Move X0, 0x2152000
	044 Move X0, [X0+440]
	045 Call 0x1C17CF4
	046 Move X0, 0x2179000
	047 Move X0, [X0+896]
	048 Call 0x1C17CF4
	049 Move X0, 0x2179000
	050 Move X0, [X0+904]
	051 Call 0x1C17CF4
	052 Move X0, 0x2152000
	053 Move X0, [X0+448]
	054 Call 0x1C17CF4
	055 Move X0, 0x2179000
	056 Move X0, [X0+912]
	057 Call 0x1C17CF4
	058 Move X0, 0x2179000
	059 Move X0, [X0+920]
	060 Call 0x1C17CF4
	061 Move X0, 0x2152000
	062 Move X0, [X0+464]
	063 Call 0x1C17CF4
	064 Move X0, 0x2179000
	065 Move X0, [X0+928]
	066 Call 0x1C17CF4
	067 Move X0, 0x2179000
	068 Move X0, [X0+936]
	069 Call 0x1C17CF4
	070 Move X0, 0x2179000
	071 Move X0, [X0+944]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move [X22+2009], W8
	075 Move X1, [X21]
	076 Move X0, X19
	077 Move [X31+80], X31
	078 Move [X31+88], X31
	079 Move [X31+96], X31
	080 Call 0x21A4F50, X0
	081 Move [X19+112], X0
	082 Move X1, [X20]
	083 Move X0, X19
	084 Call 0x21A4F50, X0
	085 Move X20, [X19+96]
	086 Move [X19+128], X0
	087 Compare X20, 0
	088 JumpIfEqual {227}
	089 Move W8, [X20+24]
	090 Compare W8, 0
	091 JumpIfNotEqual {112}
	092 Move X8, 0x2179000
	093 Move X8, [X8+864]
	094 Move X0, X19
	095 Move X1, [X8]
	096 Call 0x21A553C, X0
	097 Move X8, 0x2179000
	098 Move X8, [X8+920]
	099 Move X21, X0
	100 Move X8, [X8]
	101 Move X0, X8
	102 Call 0x1C17F10
	103 Move X8, 0x2179000
	104 Move X8, [X8+904]
	105 Move X1, X21
	106 Move X20, X0
	107 Move X2, [X8]
	108 Call List`1<Object>..ctor, X0, X1
	109 Move [X19+96], X20
	110 Compare X20, 0
	111 JumpIfEqual {227}
	112 Move X8, 0x2179000
	113 Move X8, [X8+896]
	114 Move X27, 0x2179000
	115 Move X28, 0x2179000
	116 Move X29, 0x2179000
	117 Move X25, 0x2152000
	118 Move X24, 0x2152000
	119 Move X27, [X27+880]
	120 Move X28, [X28+928]
	121 Move X29, [X29+936]
	122 Move X25, [X25+464]
	123 Move X24, [X24+448]
	124 Move X1, [X8]
	125 Move X23, 0x2179000
	126 Move X22, 0x2152000
	127 Move X26, 0x2179000
	128 Move X23, [X23+944]
	129 Move X22, [X22+440]
	130 Move X26, [X26+872]
	131 Add X8, X31, 56
	132 Move X0, X20
	133 Call List`1<Object>.GetEnumerator, X0
	134 NotImplemented "Instruction LDUR not yet implemented."
	135 Move X8, [X31+72]
	136 Move [X31+5], V0
	137 Move [X31+96], X8
	138 Move X1, [X27]
	139 Add X0, X31, 80
	140 Call Enumerator<Object>.MoveNext, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {163}
	145 Move X8, [X31+96]
	146 Compare X8, 0
	147 JumpIfEqual {225}
	148 Move X20, [X8+144]
	149 Move X0, [X28]
	150 Call 0x1C17F10
	151 Move X8, [X19]
	152 Move X21, X0
	153 Move X2, [X8+432]
	154 Move X1, X19
	155 Move X3, X31
	156 Call UnityAction`2<Object, Vector3>..ctor, X0, X1, X2
	157 Compare X20, 0
	158 JumpIfEqual {226}
	159 Move X2, [X29]
	160 Move X0, X20
	161 Move X1, X21
	162 Call UnityEvent`2<Object, Vector3>.AddListener, X0, X1
	163 Move X1, [X26]
	164 Add X0, X31, 80
	165 Call Enumerator<Object>.Dispose, X0
	166 Move X0, [X25]
	167 Call 0x1C17F10
	168 Move X1, [X24]
	169 Move X20, X0
	170 Call List`1<Object>..ctor, X0
	171 Compare X20, 0
	172 JumpIfEqual {227}
	173 Move W10, [X20+28]
	174 Move X1, [X23]
	175 Move X8, [X20+16]
	176 Move X9, [X22]
	177 Add W10, W10, 1
	178 Move [X20+28], W10
	179 Compare X8, 0
	180 JumpIfEqual {227}
	181 NotImplemented "Instruction LDRSW not yet implemented."
	182 Move W11, [X8+24]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Add W9, W10, 1
	185 Add X8, X8, X10
	186 Move [X20+24], W9
	187 Move [X8+32], X1
	188 Move X8, [X9+32]
	189 Move X0, X20
	190 Move X8, [X8+192]
	191 Move X2, [X8+112]
	192 Call List`1<Object>.AddWithResize, X0, X1
	193 Move X8, [X19+48]
	194 Move V0, [X19+2]
	195 Add X0, X31, 32
	196 Move X1, X31
	197 Move X2, X20
	198 Move X3, X31
	199 Move [X31+48], X8
	200 Move [X31+2], V0
	201 Call InputSystemExtensions.EnableWithDefaultXRBindings, X0, X1, X2, X3
	202 Move X8, [X19+72]
	203 NotImplemented "Instruction LDUR not yet implemented."
	204 Add X0, X31, 0
	205 Move X1, X31
	206 Move X2, X31
	207 Move X3, X20
	208 Move [X31+16], X8
	209 Move [X31], V0
	210 Call InputSystemExtensions.EnableWithDefaultXRBindings, X0, X1, X2, X3
	211 Move X20, [X31+192]
	212 Move X19, [X31+200]
	213 Move X22, [X31+176]
	214 Move X21, [X31+184]
	215 Move X24, [X31+160]
	216 Move X23, [X31+168]
	217 Move X26, [X31+144]
	218 Move X25, [X31+152]
	219 Move X28, [X31+128]
	220 Move X27, [X31+136]
	221 Move X29, [X31+112]
	222 Move X30, [X31+120]
	223 Add X31, X31, 208
	224 Return 
	225 Call 0x1C17F20
	226 Call 0x1C17F20
	227 Call 0x1C17F20
	228 Move X20, X0
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move X0, X20
	231 Call 0x3EB2AD0
	232 Move X21, [X0]
	233 Call 0x3EB2AE0
	234 Move X1, [X26]
	235 Add X0, X31, 80
	236 Call Enumerator<Object>.Dispose, X0
	237 Compare X21, 0
	238 JumpIfEqual {166}
	239 Move X0, X21
	240 Call 0x1C17F18
	241 Move X21, X31
	242 Move X20, X0
	243 Move X1, [X26]
	244 Add X0, X31, 80
	245 Call Enumerator<Object>.Dispose, X0
	246 Compare X21, 0
	247 JumpIfNotEqual {250}
	248 Move X0, X20
	249 Call 0x1D2D690
	250 Move X0, X21
	251 Call 0x1C17F18
	252 Call 0x1991590

Method: System.Void Start()

Disassembly:
	0x01FA3890 LDR X20, [X19 + 0x28]
	0x01FA3894 LDR W8, [X0 + 0xE0]
	0x01FA3898 CBNZ W8, 0x1FA38A0
	0x01FA389C BL 0x1C16DFC
	0x01FA38A0 MOV X0, X20
	0x01FA38A4 MOV X1, X31
	0x01FA38A8 BL 0x3C38948
	0x01FA38AC TBZ X0, 0x0, 0x1FA38BC
	0x01FA38B0 MOV X0, X31
	0x01FA38B4 BL 0x3C3C6C4
	0x01FA38B8 STR S0, [X19 + 0x84]
	0x01FA38BC LDP X20, X19, [X31 + 0x10]
	0x01FA38C0 LDP X30, X21, [X31], #0x20
	0x01FA38C4 RET
	0x01FA38C8 RET
	0x01FA38CC STP X30, X19, [X31 - 0x10]!
	0x01FA38D0 MOV X19, X0
	0x01FA38D4 BL 0x1FA2E50
	0x01FA38D8 TBZ X0, 0x0, 0x1FA38E4
	0x01FA38DC MOVZ W8, 0xBF800000
	0x01FA38E0 STR W8, [X19 + 0x84]
	0x01FA38E4 AND W0, W0, 0x1
	0x01FA38E8 LDP X30, X19, [X31], #0x10
	0x01FA38EC RET
	0x01FA38F0 MOVZ W8, 0xBF800000
	0x01FA38F4 STR W8, [X0 + 0x84]
	0x01FA38F8 RET
	0x01FA38FC STP X30, X21, [X31 - 0x20]!
	0x01FA3900 STP X20, X19, [X31 + 0x10]
	0x01FA3904 CBZ X2, 0x1FA39D0
	0x01FA3908 LDP S1, S2, [X0 + 0x34]
	0x01FA390C LDR V0, [X0 + 0x30]
	0x01FA3910 MOV X19, X1
	0x01FA3914 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2437000
	005 Move W8, [X20+2010]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2151000
	012 Move X0, [X0+2600]
	013 Call 0x1C17CF4
	014 Move X0, 0x2179000
	015 Move X0, [X0+952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2010], W8
	019 Move W0, [X19+120]
	020 Move X1, X31
	021 Call LayerMask.op_Implicit, X0
	022 Compare W0, 0
	023 JumpIfEqual {28}
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return 
	028 Move X8, 0x2151000
	029 Move X8, [X8+2600]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X8, 0x2179000
	036 Move X8, [X8+952]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X1, X31
	040 Move X0, [X8]
	041 Move X30, [X31+32]
	042 Call Debug.LogError, X0
	043 Return 

Method: System.Void Update()

Disassembly:
	0x01FA3918 MOV X0, X2
	0x01FA391C MOV X1, X31
	0x01FA3920 MOV X21, X2

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+392]
	003 Move X1, [X8+400]
	004 CallNoReturn X2

Method: System.Void CheckSnapTurn()

Disassembly:
	0x01FA3924 BL 0x3C3DE4C
	0x01FA3928 CBZ X19, 0x1FA39D0
	0x01FA392C MOV X0, X19
	0x01FA3930 MOV X1, X31
	0x01FA3934 BL 0x3C3F62C
	0x01FA3938 MOV X0, X21
	0x01FA393C MOV X1, X31
	0x01FA3940 BL 0x3C3DEB4
	0x01FA3944 LDP S4, S7, [X20 + 0x3C]
	0x01FA3948 LDP S6, S5, [X20 + 0x44]
	0x01FA394C MOV X0, X19
	0x01FA3950 LDP X20, X19, [X31 + 0x10]
	0x01FA3954 FMUL S16, S3, S4
	0x01FA3958 FMUL S17, S0, S5
	0x01FA395C FMUL S18, S1, S6
	0x01FA3960 FMUL S19, S2, S7
	0x01FA3964 FMUL S20, S3, S7
	0x01FA3968 FMUL S21, S1, S5
	0x01FA396C FMUL S22, S2, S4
	0x01FA3970 FMUL S23, S0, S6
	0x01FA3974 FMUL S24, S0, S7
	0x01FA3978 FMUL S0, S0, S4
	0x01FA397C FMUL S4, S1, S4
	0x01FA3980 FMUL S1, S1, S7
	0x01FA3984 FMUL S7, S3, S6
	0x01FA3988 FMUL S3, S3, S5
	0x01FA398C FMUL S5, S2, S5
	0x01FA3990 FMUL S6, S2, S6
	0x01FA3994 FADD S2, S16, S17
	0x01FA3998 FADD S16, S20, S21
	0x01FA399C FADD S5, S7, S5
	0x01FA39A0 FSUB S0, S3, S0
	0x01FA39A4 FADD S2, S18, S2
	0x01FA39A8 FADD S3, S22, S16
	0x01FA39AC FADD S5, S24, S5
	0x01FA39B0 FSUB S7, S0, S1
	0x01FA39B4 FSUB S0, S2, S19
	0x01FA39B8 FSUB S1, S3, S23
	0x01FA39BC FSUB S2, S5, S4
	0x01FA39C0 FSUB S3, S7, S6
	0x01FA39C4 MOV X1, X31
	0x01FA39C8 LDP X30, X21, [X31], #0x20
	0x01FA39CC B 0x3C3F7AC
	0x01FA39D0 BL 0x1C16F20
	0x01FA39D4 STP X30, X21, [X31 - 0x20]!
	0x01FA39D8 STP X20, X19, [X31 + 0x10]
	0x01FA39DC ADRP X20, 0x2436000
	0x01FA39E0 ADRP X21, 0x2150000
	0x01FA39E4 LDRB W8, [X20 + 0x7E8]
	0x01FA39E8 LDR X21, [X21 + 0x598]
	0x01FA39EC MOV X19, X0
	0x01FA39F0 TBNZ X8, 0x0, 0x1FA3A08
	0x01FA39F4 ADRP X0, 0x2150000
	0x01FA39F8 LDR X0, [X0 + 0x598]
	0x01FA39FC BL 0x1C16CF4
	0x01FA3A00 MOVZ W8, 0x1
	0x01FA3A04 STRB W8, [X20 + 0x7E8]
	0x01FA3A08 LDR X0, [X21]
	0x01FA3A0C LDR X20, [X19 + 0x28]
	0x01FA3A10 LDR W8, [X0 + 0xE0]
	0x01FA3A14 CBNZ W8, 0x1FA3A1C
	0x01FA3A18 BL 0x1C16DFC
	0x01FA3A1C MOV X0, X20
	0x01FA3A20 MOV X1, X31
	0x01FA3A24 MOV X2, X31
	0x01FA3A28 BL 0x3C3883C
	0x01FA3A2C TBNZ X0, 0x0, 0x1FA3A60
	0x01FA3A30 LDR X8, [X19 + 0x28]
	0x01FA3A34 CBZ X8, 0x1FA3AB4
	0x01FA3A38 LDR X0, [X21]
	0x01FA3A3C LDR X20, [X8 + 0x40]
	0x01FA3A40 LDR W9, [X0 + 0xE0]
	0x01FA3A44 CBNZ W9, 0x1FA3A4C
	0x01FA3A48 BL 0x1C16DFC
	0x01FA3A4C MOV X0, X20

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2437000
	007 Move W8, [X20+2011]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2179000
	014 Move X0, [X0+960]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2011], W8
	018 Move W8, [X19+104]
	019 Compare W8, 0
	020 JumpIfEqual {27}
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Move D9, [X31+48]
	025 Move D8, [X31+56]
	026 Return 
	027 Move V8, [X19+108]
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 Move V9, [X19+80]
	030 Move X0, X31
	031 Call Time.get_time
	032 Add S1, S8, S9
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move [X19+108], W31
	035 Add X0, X19, 32
	036 Move X1, X31
	037 Call InputActionProperty.get_action, X0
	038 Compare X0, 0
	039 JumpIfEqual {82}
	040 Move X20, 0x2179000
	041 Move X20, [X20+960]
	042 Move X1, [X20]
	043 Call InputAction.ReadValue, X0
	044 Add X0, X19, 56
	045 Move X1, X31
	046 Move V8, V0
	047 Call InputActionProperty.get_action, X0
	048 Compare X0, 0
	049 JumpIfEqual {82}
	050 Move X1, [X20]
	051 Call InputAction.ReadValue, X0
	052 Move V1, [X19+88]
	053 NotImplemented "Instruction FABS not yet implemented."
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 Move X0, X31
	056 Call Time.get_time
	057 Move V1, [X19+84]
	058 Move [X19+108], S0
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move V9, V0
	061 NotImplemented "Instruction FABS not yet implemented."
	062 NotImplemented "Instruction FCMP not yet implemented."
	063 Move X0, X31
	064 Call Time.get_time
	065 Move V1, [X19+84]
	066 Move [X19+108], S0
	067 NotImplemented "Instruction FCMP not yet implemented."
	068 NotImplemented "Instruction FNEG not yet implemented."
	069 NotImplemented "Instruction FCSEL not yet implemented."
	070 Move X0, X19
	071 Call RigLocomotion.Rotate, X0, V0
	072 Move X1, X0
	073 Move X0, X19
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X30, [X31+16]
	077 Move X2, X31
	078 Move D9, [X31+48]
	079 Move D8, [X31+56]
	080 Call MonoBehaviour.StartCoroutine, X0, X1
	081 Return 
	082 Call 0x1C17F20

Method: System.Collections.IEnumerator Rotate(System.Single angle)

Disassembly:
	0x01FA3A50 MOV X1, X31
	0x01FA3A54 MOV X2, X31
	0x01FA3A58 BL 0x3C3883C
	0x01FA3A5C TBZ X0, 0x0, 0x1FA3AA8
	0x01FA3A60 MOV X0, X19
	0x01FA3A64 BL 0x1FA3718
	0x01FA3A68 TBZ X0, 0x0, 0x1FA3AA8
	0x01FA3A6C MOV X0, X19
	0x01FA3A70 MOV X1, X31
	0x01FA3A74 BL 0x3C32E90
	0x01FA3A78 LDR X8, [X19 + 0x20]
	0x01FA3A7C CBZ X8, 0x1FA3AB4
	0x01FA3A80 MOV X20, X0
	0x01FA3A84 MOV X0, X8
	0x01FA3A88 MOV X1, X31
	0x01FA3A8C BL 0x3C32E90
	0x01FA3A90 MOV X2, X0
	0x01FA3A94 MOV X0, X19
	0x01FA3A98 MOV X1, X20
	0x01FA3A9C LDP X20, X19, [X31 + 0x10]
	0x01FA3AA0 LDP X30, X21, [X31], #0x20
	0x01FA3AA4 B 0x1FA38FC
	0x01FA3AA8 LDP X20, X19, [X31 + 0x10]
	0x01FA3AAC LDP X30, X21, [X31], #0x20
	0x01FA3AB0 RET
	0x01FA3AB4 BL 0x1C16F20
	0x01FA3AB8 MOVZ W8, 0xBF800000
	0x01FA3ABC MOV X1, X31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2437000
	007 Move X21, 0x2179000
	008 Move W8, [X20+2012]
	009 Move X21, [X21+968]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2179000
	017 Move X0, [X0+968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2012], W8
	021 Move X0, [X21]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call Object..ctor, X0
	026 Move [X20+16], W31
	027 Move [X20+32], X19
	028 Move [X20+40], S8
	029 Move X0, X20
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Return X0

Method: System.Boolean ValidLocomotionSurface(UnityEngine.Collider surfaceCollider)

Disassembly:
	0x01FA3AE8 LDRB W8, [X21 + 0x7E9]
	0x01FA3AEC LDR X20, [X20 + 0x598]
	0x01FA3AF0 MOV X19, X0
	0x01FA3AF4 TBNZ X8, 0x0, 0x1FA3B0C
	0x01FA3AF8 ADRP X0, 0x2150000
	0x01FA3AFC LDR X0, [X0 + 0x598]
	0x01FA3B00 BL 0x1C16CF4
	0x01FA3B04 MOVZ W8, 0x1
	0x01FA3B08 STRB W8, [X21 + 0x7E9]
	0x01FA3B0C LDR X8, [X19]
	0x01FA3B10 MOV X0, X19
	0x01FA3B14 LDR X9, [X8 + 0x248]
	0x01FA3B18 LDR X1, [X8 + 0x250]
	0x01FA3B1C BLR X9
	0x01FA3B20 LDR X8, [X20]
	0x01FA3B24 MOV X19, X0
	0x01FA3B28 LDR W9, [X8 + 0xE0]
	0x01FA3B2C CBNZ W9, 0x1FA3B38
	0x01FA3B30 MOV X0, X8
	0x01FA3B34 BL 0x1C16DFC
	0x01FA3B38 MOV X0, X19
	0x01FA3B3C LDP X20, X19, [X31 + 0x10]
	0x01FA3B40 MOV X1, X31
	0x01FA3B44 MOV X2, X31
	0x01FA3B48 LDP X30, X21, [X31], #0x20
	0x01FA3B4C B 0x3C354F8
	0x01FA3B50 STP X30, X21, [X31 - 0x20]!
	0x01FA3B54 STP X20, X19, [X31 + 0x10]
	0x01FA3B58 ADRP X20, 0x2436000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move W0, [X0+120]
	007 Move X21, X1
	008 Move X1, X31
	009 Call LayerMask.op_Implicit, X0
	010 Move W8, [X19+120]
	011 Move W19, W0
	012 Move X1, X31
	013 Move X0, X8
	014 Call LayerMask.op_Implicit, X0
	015 Compare X21, 0
	016 JumpIfEqual {35}
	017 Move W20, W0
	018 Move X0, X21
	019 Move X1, X31
	020 Call Component.get_gameObject, X0
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X1, X31
	024 Call GameObject.get_layer, X0
	025 Move W8, 1
	026 NotImplemented "Instruction LSLV not yet implemented."
	027 Or W8, W8, W20
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0
	035 Call 0x1C17F20

Method: System.Void OnBeamRelease(UnityEngine.Collider lastHitCollider, UnityEngine.Vector3 position)

Disassembly:
	0x01FA3B5C LDRB W8, [X20 + 0x7EA]
	0x01FA3B60 MOV X19, X0
	0x01FA3B64 TBNZ X8, 0x0, 0x1FA3B7C
	0x01FA3B68 ADRP X0, 0x2178000
	0x01FA3B6C LDR X0, [X0 + 0x408]
	0x01FA3B70 BL 0x1C16CF4
	0x01FA3B74 MOVZ W8, 0x1
	0x01FA3B78 STRB W8, [X20 + 0x7EA]
	0x01FA3B7C LDR X20, [X19 + 0x90]
	0x01FA3B80 CBZ X20, 0x1FA3BB8
	0x01FA3B84 LDR X8, [X19]
	0x01FA3B88 ADRP X21, 0x2178000
	0x01FA3B8C MOV X0, X19
	0x01FA3B90 LDR X9, [X8 + 0x248]
	0x01FA3B94 LDR X1, [X8 + 0x250]
	0x01FA3B98 LDR X21, [X21 + 0x408]
	0x01FA3B9C BLR X9
	0x01FA3BA0 LDR X2, [X21]
	0x01FA3BA4 MOV X1, X0
	0x01FA3BA8 MOV X0, X20
	0x01FA3BAC LDP X20, X19, [X31 + 0x10]
	0x01FA3BB0 LDP X30, X21, [X31], #0x20
	0x01FA3BB4 B 0x2729DBC
	0x01FA3BB8 LDP X20, X19, [X31 + 0x10]
	0x01FA3BBC LDP X30, X21, [X31], #0x20
	0x01FA3BC0 RET
	0x01FA3BC4 STR X30, [X31 - 0x10]!
	0x01FA3BC8 LDR X8, [X0 + 0x90]
	0x01FA3BCC CBZ X8, 0x1FA3BE4
	0x01FA3BD0 LDR X0, [X0 + 0x88]
	0x01FA3BD4 CBZ X0, 0x1FA3BEC
	0x01FA3BD8 MOV X1, X31
	0x01FA3BDC LDR X30, [X31], #0x10
	0x01FA3BE0 B 0x3C45DE8
	0x01FA3BE4 LDR X30, [X31], #0x10
	0x01FA3BE8 RET
	0x01FA3BEC BL 0x1C16F20
	0x01FA3BF0 STP X30, X23, [X31 - 0x30]!
	0x01FA3BF4 STP X22, X21, [X31 + 0x10]
	0x01FA3BF8 STP X20, X19, [X31 + 0x20]
	0x01FA3BFC ADRP X20, 0x2436000
	0x01FA3C00 ADRP X23, 0x2178000
	0x01FA3C04 ADRP X22, 0x2178000
	0x01FA3C08 ADRP X21, 0x2178000
	0x01FA3C0C LDRB W8, [X20 + 0x7EB]
	0x01FA3C10 LDR X23, [X23 + 0x410]
	0x01FA3C14 LDR X22, [X22 + 0x418]
	0x01FA3C18 LDR X21, [X21 + 0x420]
	0x01FA3C1C MOV X19, X0
	0x01FA3C20 TBNZ X8, 0x0, 0x1FA3C50
	0x01FA3C24 ADRP X0, 0x2178000
	0x01FA3C28 LDR X0, [X0 + 0x420]
	0x01FA3C2C BL 0x1C16CF4
	0x01FA3C30 ADRP X0, 0x2178000
	0x01FA3C34 LDR X0, [X0 + 0x418]
	0x01FA3C38 BL 0x1C16CF4
	0x01FA3C3C ADRP X0, 0x2178000
	0x01FA3C40 LDR X0, [X0 + 0x410]
	0x01FA3C44 BL 0x1C16CF4
	0x01FA3C48 MOVZ W8, 0x1
	0x01FA3C4C STRB W8, [X20 + 0x7EB]
	0x01FA3C50 LDR X0, [X23]
	0x01FA3C54 BL 0x1C16F10
	0x01FA3C58 MOV X1, X31
	0x01FA3C5C MOV X20, X0
	0x01FA3C60 BL 0x3C45C84
	0x01FA3C64 STR X20, [X19 + 0x88]
	0x01FA3C68 LDR X0, [X22]
	0x01FA3C6C BL 0x1C16F10
	0x01FA3C70 LDR X1, [X21]
	0x01FA3C74 MOV X20, X0
	0x01FA3C78 BL 0x2729B5C
	0x01FA3C7C STR X20, [X19 + 0x90]
	0x01FA3C80 MOV X0, X19
	0x01FA3C84 LDP X20, X19, [X31 + 0x20]
	0x01FA3C88 LDP X22, X21, [X31 + 0x10]
	0x01FA3C8C MOV X1, X31
	0x01FA3C90 LDP X30, X23, [X31], #0x30
	0x01FA3C94 B 0x1E74F04
	0x01FA3C98 ADD X1, X0, 0x80
	0x01FA3C9C MOVZ W2, 0x58
	0x01FA3CA0 MOV X0, X8
	0x01FA3CA4 B 0x3EB1AC0
	0x01FA3CA8 STR X30, [X31 - 0x10]!
	0x01FA3CAC ADD X0, X0, 0x80
	0x01FA3CB0 MOVZ W2, 0x58
	0x01FA3CB4 BL 0x3EB1B30
	0x01FA3CB8 LDR X30, [X31], #0x10
	0x01FA3CBC RET
	0x01FA3CC0 STR X30, [X31 - 0x30]!
	0x01FA3CC4 STP X22, X21, [X31 + 0x10]
	0x01FA3CC8 STP X20, X19, [X31 + 0x20]
	0x01FA3CCC ADRP X21, 0x2436000
	0x01FA3CD0 ADRP X22, 0x2178000
	0x01FA3CD4 ADRP X20, 0x2178000
	0x01FA3CD8 LDRB W8, [X21 + 0x7EC]
	0x01FA3CDC LDR X22, [X22 + 0x108]
	0x01FA3CE0 LDR X20, [X20 + 0x428]
	0x01FA3CE4 MOV X19, X0
	0x01FA3CE8 TBNZ X8, 0x0, 0x1FA3D0C
	0x01FA3CEC ADRP X0, 0x2178000
	0x01FA3CF0 LDR X0, [X0 + 0x428]
	0x01FA3CF4 BL 0x1C16CF4
	0x01FA3CF8 ADRP X0, 0x2178000
	0x01FA3CFC LDR X0, [X0 + 0x108]
	0x01FA3D00 BL 0x1C16CF4
	0x01FA3D04 MOVZ W8, 0x1
	0x01FA3D08 STRB W8, [X21 + 0x7EC]
	0x01FA3D0C LDR X1, [X22]
	0x01FA3D10 MOV X0, X19
	0x01FA3D14 BL 0x21A3894
	0x01FA3D18 STR X0, [X19 + 0xE8]
	0x01FA3D1C LDR X1, [X20]
	0x01FA3D20 MOV X0, X19
	0x01FA3D24 BL 0x21A3F50
	0x01FA3D28 STR X0, [X19 + 0xF0]
	0x01FA3D2C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x2437000
	012 Move W8, [X21+2013]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x2179000
	023 Move X0, [X0+976]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2013], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Call Behaviour.get_enabled, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {144}
	034 Move X8, [X19+128]
	035 Compare X8, 0
	036 JumpIfEqual {109}
	037 Move X0, [X19+112]
	038 Compare X0, 0
	039 JumpIfEqual {155}
	040 Move X1, X31
	041 Call Component.get_transform, X0
	042 Move X8, [X19+112]
	043 Compare X8, 0
	044 JumpIfEqual {155}
	045 Move X21, X0
	046 Move X0, [X8+48]
	047 Compare X0, 0
	048 JumpIfEqual {155}
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {155}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Compare X21, 0
	056 JumpIfEqual {155}
	057 Move X0, X21
	058 Move X1, X31
	059 Call Transform.InverseTransformPoint, X0, X1
	060 Move X0, [X19+112]
	061 Compare X0, 0
	062 JumpIfEqual {155}
	063 Move X1, X31
	064 Move V13, V1
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {155}
	068 Move X1, X31
	069 Call Transform.get_up, X0
	070 Move X21, [X19+128]
	071 Compare X21, 0
	072 JumpIfEqual {155}
	073 Move X10, 0x2179000
	074 Move X8, [X21]
	075 Move X10, [X10+976]
	076 Multiply S2, S13, S2
	077 Multiply S1, S13, S1
	078 NotImplemented "Instruction LDRH not yet implemented."
	079 Move X1, [X10]
	080 Multiply S0, S13, S0
	081 Add S11, S8, S2
	082 Add S12, S9, S1
	083 Add S13, S10, S0
	084 Compare X9, 0
	085 JumpIfEqual {92}
	086 Move X10, [X8+176]
	087 Add X10, X10, 8
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Subtract X9, X9, 1
	091 Add X10, X10, 16
	092 Move X0, X21
	093 Move W2, W31
	094 Call 0x1C5D788
	095 NotImplemented "Instruction LDRSW not yet implemented."
	096 Add X8, X8, X9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X21
	101 Move V0, V13
	102 Move V1, V12
	103 Move V2, V11
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {144}
	109 Move X8, [X19]
	110 Move X0, X19
	111 Move X1, X20
	112 Move X9, [X8+408]
	113 Move X2, [X8+416]
	114 NotImplemented "Instruction BLR not yet implemented."
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {144}
	119 Move X0, [X19+112]
	120 Compare X0, 0
	121 JumpIfEqual {155}
	122 Move X8, [X0]
	123 Move V0, V10
	124 Move V1, V9
	125 Move V2, V8
	126 Move X9, [X8+728]
	127 Move X1, [X8+736]
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move X1, X0
	130 Move X0, X19
	131 Move X20, [X31+64]
	132 Move X19, [X31+72]
	133 Move X30, [X31+48]
	134 Move X21, [X31+56]
	135 Move D9, [X31+32]
	136 Move D8, [X31+40]
	137 Move D11, [X31+16]
	138 Move D10, [X31+24]
	139 Move X2, X31
	140 Move D13, [X31+80]
	141 Move D12, [X31+88]
	142 Call MonoBehaviour.StartCoroutine, X0, X1
	143 Return 
	144 Move X20, [X31+64]
	145 Move X19, [X31+72]
	146 Move X30, [X31+48]
	147 Move X21, [X31+56]
	148 Move D9, [X31+32]
	149 Move D8, [X31+40]
	150 Move D11, [X31+16]
	151 Move D10, [X31+24]
	152 Move D13, [X31+80]
	153 Move D12, [X31+88]
	154 Return 
	155 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01FA3D30 LDP X22, X21, [X31 + 0x10]
	0x01FA3D34 LDR X30, [X31], #0x30
	0x01FA3D38 RET
	0x01FA3D3C SUB X31, X31, 0x70
	0x01FA3D40 STP X30, X19, [X31 + 0x60]
	0x01FA3D44 MOV X1, X31
	0x01FA3D48 MOV X19, X0
	0x01FA3D4C BL 0x1E73F88
	0x01FA3D50 LDR X0, [X19 + 0xF0]
	0x01FA3D54 CBZ X0, 0x1FA3DF8
	0x01FA3D58 BL 0x1FA0698
	0x01FA3D5C TBZ X0, 0x0, 0x1FA3D7C
	0x01FA3D60 LDR X0, [X19 + 0xF0]
	0x01FA3D64 CBZ X0, 0x1FA3DF8
	0x01FA3D68 BL 0x1FA06D8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, -21712896
	004 Move V0, [X8+3240]
	005 Move W8, 0x3F000000
	006 Move X19, X0
	007 Move [X0+88], W8
	008 Move [X0+80], D0
	009 Move W0, W31
	010 Move X1, X31
	011 Call LayerMask.op_Implicit, X0
	012 Move [X19+120], W0
	013 Move X0, X19
	014 Move X1, X31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call MonoBehaviour..ctor, X0
	018 Return 

