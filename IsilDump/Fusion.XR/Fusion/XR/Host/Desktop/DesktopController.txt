Type: Fusion.XR.Host.Desktop.DesktopController

Method: System.Void Awake()

Disassembly:
	0x01FA7B44 LDR W8, [X0 + 0xE0]
	0x01FA7B48 CBNZ W8, 0x1FA7B50
	0x01FA7B4C BL 0x1C16DFC
	0x01FA7B50 MOV X0, X20
	0x01FA7B54 MOV X1, X31
	0x01FA7B58 MOV X2, X31
	0x01FA7B5C BL 0x3C3883C
	0x01FA7B60 TBZ X0, 0x0, 0x1FA7B7C
	0x01FA7B64 ADRP X8, 0x2174000
	0x01FA7B68 LDR X8, [X8 + 0x48]
	0x01FA7B6C MOV X0, X19
	0x01FA7B70 LDR X1, [X8]
	0x01FA7B74 BL 0x21A3AF8
	0x01FA7B78 STR X0, [X19 + 0x28]
	0x01FA7B7C LDR X0, [X21]
	0x01FA7B80 LDR X20, [X19 + 0x20]
	0x01FA7B84 LDR W8, [X0 + 0xE0]
	0x01FA7B88 CBNZ W8, 0x1FA7B90
	0x01FA7B8C BL 0x1C16DFC
	0x01FA7B90 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2433000
	006 Move X21, 0x2175000
	007 Move W8, [X20+2052]
	008 Move X21, [X21+1200]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2175000
	015 Move X0, [X0+1200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2052], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Call 0x21A4894, X0
	022 Move [X19+88], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return 

Method: System.Void Start()

Disassembly:
	0x01FA7B94 MOV X1, X31
	0x01FA7B98 MOV X2, X31
	0x01FA7B9C BL 0x3C3883C
	0x01FA7BA0 TBZ X0, 0x0, 0x1FA7BBC
	0x01FA7BA4 ADRP X8, 0x2174000
	0x01FA7BA8 LDR X8, [X8 + 0x350]
	0x01FA7BAC MOV X0, X19
	0x01FA7BB0 LDR X1, [X8]
	0x01FA7BB4 BL 0x21A3F50
	0x01FA7BB8 STR X0, [X19 + 0x20]
	0x01FA7BBC MOV X0, X19
	0x01FA7BC0 BL 0x1FA7A30
	0x01FA7BC4 LDR X8, [X19 + 0x20]
	0x01FA7BC8 CBZ X8, 0x1FA7DF4
	0x01FA7BCC MOV X20, X0
	0x01FA7BD0 LDR X0, [X8 + 0x20]
	0x01FA7BD4 CBZ X0, 0x1FA7DF4
	0x01FA7BD8 MOV X1, X31
	0x01FA7BDC BL 0x3C32E90
	0x01FA7BE0 CBZ X0, 0x1FA7DF4
	0x01FA7BE4 MOV X1, X31
	0x01FA7BE8 BL 0x3C3F58C
	0x01FA7BEC CBZ X20, 0x1FA7DF4
	0x01FA7BF0 MOV X0, X20
	0x01FA7BF4 MOV X1, X31
	0x01FA7BF8 BL 0x3C40B58
	0x01FA7BFC MOV X0, X19
	0x01FA7C00 STP S0, S1, [X19 + 0x30]
	0x01FA7C04 STR S2, [X19 + 0x38]
	0x01FA7C08 BL 0x1FA7A30
	0x01FA7C0C LDR X8, [X19 + 0x20]
	0x01FA7C10 CBZ X8, 0x1FA7DF4
	0x01FA7C14 MOV X20, X0
	0x01FA7C18 LDR X0, [X8 + 0x28]
	0x01FA7C1C CBZ X0, 0x1FA7DF4
	0x01FA7C20 MOV X1, X31
	0x01FA7C24 BL 0x3C32E90
	0x01FA7C28 CBZ X0, 0x1FA7DF4
	0x01FA7C2C MOV X1, X31
	0x01FA7C30 BL 0x3C3F58C
	0x01FA7C34 CBZ X20, 0x1FA7DF4
	0x01FA7C38 MOV X0, X20
	0x01FA7C3C MOV X1, X31
	0x01FA7C40 BL 0x3C40B58
	0x01FA7C44 MOV X0, X19
	0x01FA7C48 STP S0, S1, [X19 + 0x3C]
	0x01FA7C4C STR S2, [X19 + 0x44]
	0x01FA7C50 BL 0x1FA7A30
	0x01FA7C54 CBZ X0, 0x1FA7DF4
	0x01FA7C58 MOV X1, X31
	0x01FA7C5C BL 0x3C3DEB4
	0x01FA7C60 MOV X0, X31
	0x01FA7C64 BL 0x3C2A260
	0x01FA7C68 LDR X8, [X19 + 0x20]
	0x01FA7C6C CBZ X8, 0x1FA7DF4
	0x01FA7C70 LDR X0, [X8 + 0x20]
	0x01FA7C74 CBZ X0, 0x1FA7DF4
	0x01FA7C78 MOV X1, X31
	0x01FA7C7C MOV V10.16B, V0.16B
	0x01FA7C80 MOV V9.16B, V1.16B
	0x01FA7C84 MOV V8.16B, V2.16B
	0x01FA7C88 MOV V11.16B, V3.16B
	0x01FA7C8C BL 0x3C32E90
	0x01FA7C90 CBZ X0, 0x1FA7DF4
	0x01FA7C94 MOV X1, X31
	0x01FA7C98 BL 0x3C3DEB4
	0x01FA7C9C FMUL S4, S11, S0
	0x01FA7CA0 FMUL S5, S10, S3
	0x01FA7CA4 FMUL S16, S11, S1
	0x01FA7CA8 FMUL S17, S9, S3
	0x01FA7CAC FMUL S21, S10, S0
	0x01FA7CB0 FMUL S22, S11, S2
	0x01FA7CB4 FMUL S23, S11, S3
	0x01FA7CB8 FMUL S3, S8, S3
	0x01FA7CBC FMUL S6, S9, S2
	0x01FA7CC0 FMUL S7, S8, S1
	0x01FA7CC4 FMUL S18, S8, S0
	0x01FA7CC8 FMUL S20, S10, S1
	0x01FA7CCC FMUL S1, S9, S1
	0x01FA7CD0 FADD S4, S4, S5
	0x01FA7CD4 FADD S5, S16, S17
	0x01FA7CD8 FADD S3, S22, S3
	0x01FA7CDC FSUB S16, S23, S21
	0x01FA7CE0 FMUL S19, S10, S2
	0x01FA7CE4 FMUL S0, S9, S0
	0x01FA7CE8 FMUL S2, S8, S2
	0x01FA7CEC FADD S4, S6, S4
	0x01FA7CF0 FADD S5, S18, S5
	0x01FA7CF4 FADD S3, S20, S3
	0x01FA7CF8 FSUB S1, S16, S1
	0x01FA7CFC FSUB S4, S4, S7
	0x01FA7D00 FSUB S5, S5, S19
	0x01FA7D04 FSUB S0, S3, S0
	0x01FA7D08 FSUB S1, S1, S2
	0x01FA7D0C MOV X0, X19
	0x01FA7D10 STP S4, S5, [X19 + 0x48]
	0x01FA7D14 STP S0, S1, [X19 + 0x50]
	0x01FA7D18 BL 0x1FA7A30
	0x01FA7D1C CBZ X0, 0x1FA7DF4
	0x01FA7D20 MOV X1, X31
	0x01FA7D24 BL 0x3C3DEB4
	0x01FA7D28 MOV X0, X31
	0x01FA7D2C BL 0x3C2A260
	0x01FA7D30 LDR X8, [X19 + 0x20]
	0x01FA7D34 CBZ X8, 0x1FA7DF4
	0x01FA7D38 LDR X0, [X8 + 0x28]
	0x01FA7D3C CBZ X0, 0x1FA7DF4
	0x01FA7D40 MOV X1, X31
	0x01FA7D44 MOV V10.16B, V0.16B
	0x01FA7D48 MOV V9.16B, V1.16B
	0x01FA7D4C MOV V8.16B, V2.16B
	0x01FA7D50 MOV V11.16B, V3.16B
	0x01FA7D54 BL 0x3C32E90
	0x01FA7D58 CBZ X0, 0x1FA7DF4
	0x01FA7D5C MOV X1, X31
	0x01FA7D60 BL 0x3C3DEB4
	0x01FA7D64 FMUL S4, S11, S0
	0x01FA7D68 FMUL S5, S10, S3
	0x01FA7D6C FMUL S16, S11, S1
	0x01FA7D70 FMUL S17, S9, S3
	0x01FA7D74 FMUL S21, S10, S0
	0x01FA7D78 FMUL S22, S11, S2
	0x01FA7D7C FMUL S23, S11, S3
	0x01FA7D80 FMUL S3, S8, S3
	0x01FA7D84 FMUL S6, S9, S2
	0x01FA7D88 FMUL S7, S8, S1
	0x01FA7D8C FMUL S18, S8, S0
	0x01FA7D90 FMUL S20, S10, S1
	0x01FA7D94 FMUL S1, S9, S1
	0x01FA7D98 FADD S4, S4, S5
	0x01FA7D9C FADD S5, S16, S17
	0x01FA7DA0 FADD S3, S22, S3
	0x01FA7DA4 FSUB S16, S23, S21
	0x01FA7DA8 FMUL S19, S10, S2
	0x01FA7DAC FMUL S0, S9, S0
	0x01FA7DB0 FMUL S2, S8, S2
	0x01FA7DB4 FADD S4, S6, S4
	0x01FA7DB8 FADD S5, S18, S5
	0x01FA7DBC FADD S3, S20, S3
	0x01FA7DC0 FSUB S1, S16, S1
	0x01FA7DC4 FSUB S4, S4, S7
	0x01FA7DC8 FSUB S5, S5, S19
	0x01FA7DCC FSUB S0, S3, S0
	0x01FA7DD0 FSUB S1, S1, S2
	0x01FA7DD4 STP S4, S5, [X19 + 0x58]
	0x01FA7DD8 STP S0, S1, [X19 + 0x60]
	0x01FA7DDC LDP X20, X19, [X31 + 0x40]
	0x01FA7DE0 LDP X22, X21, [X31 + 0x30]
	0x01FA7DE4 LDR X30, [X31 + 0x20]
	0x01FA7DE8 LDP D9, D8, [X31 + 0x10]
	0x01FA7DEC LDP D11, D10, [X31], #0x50
	0x01FA7DF0 RET
	0x01FA7DF4 BL 0x1C16F20
	0x01FA7DF8 STR X30, [X31 - 0x20]!
	0x01FA7DFC STP X20, X19, [X31 + 0x10]
	0x01FA7E00 ADRP X20, 0x2432000
	0x01FA7E04 LDRB W8, [X20 + 0x80D]
	0x01FA7E08 MOV X19, X0
	0x01FA7E0C TBNZ X8, 0x0, 0x1FA7E24
	0x01FA7E10 ADRP X0, 0x2174000
	0x01FA7E14 LDR X0, [X0 + 0x548]
	0x01FA7E18 BL 0x1C16CF4
	0x01FA7E1C MOVZ W8, 0x1
	0x01FA7E20 STRB W8, [X20 + 0x80D]
	0x01FA7E24 LDRB W8, [X19 + 0x68]
	0x01FA7E28 CBZ W8, 0x1FA7E9C
	0x01FA7E2C LDR X0, [X19 + 0x28]
	0x01FA7E30 CBZ X0, 0x1FA7ED0
	0x01FA7E34 MOV X1, X31
	0x01FA7E38 BL 0x3C32E90
	0x01FA7E3C MOV X20, X0
	0x01FA7E40 MOV X0, X19
	0x01FA7E44 BL 0x1FA7A30
	0x01FA7E48 CBZ X0, 0x1FA7ED0
	0x01FA7E4C MOV X1, X31
	0x01FA7E50 BL 0x3C3F58C
	0x01FA7E54 CBZ X20, 0x1FA7ED0
	0x01FA7E58 MOV X0, X20
	0x01FA7E5C MOV X1, X31
	0x01FA7E60 BL 0x3C3F62C
	0x01FA7E64 LDR X0, [X19 + 0x28]
	0x01FA7E68 CBZ X0, 0x1FA7ED0
	0x01FA7E6C MOV X1, X31
	0x01FA7E70 BL 0x3C32E90
	0x01FA7E74 MOV X20, X0
	0x01FA7E78 MOV X0, X19
	0x01FA7E7C BL 0x1FA7A30
	0x01FA7E80 CBZ X0, 0x1FA7ED0
	0x01FA7E84 MOV X1, X31
	0x01FA7E88 BL 0x3C3DEB4
	0x01FA7E8C CBZ X20, 0x1FA7ED0
	0x01FA7E90 MOV X0, X20
	0x01FA7E94 MOV X1, X31
	0x01FA7E98 BL 0x3C3F7AC
	0x01FA7E9C LDR X8, [X19 + 0x20]
	0x01FA7EA0 CBZ X8, 0x1FA7ED0
	0x01FA7EA4 LDR X0, [X8 + 0x20]
	0x01FA7EA8 STP X0, X0, [X19 + 0x78]
	0x01FA7EAC CBZ X0, 0x1FA7ED0
	0x01FA7EB0 ADRP X8, 0x2174000
	0x01FA7EB4 LDR X8, [X8 + 0x548]
	0x01FA7EB8 LDR X1, [X8]
	0x01FA7EBC BL 0x21A3AF8
	0x01FA7EC0 STR X0, [X19 + 0x88]
	0x01FA7EC4 LDP X20, X19, [X31 + 0x10]
	0x01FA7EC8 LDR X30, [X31], #0x20
	0x01FA7ECC RET
	0x01FA7ED0 BL 0x1C16F20
	0x01FA7ED4 SUB X31, X31, 0xD0
	0x01FA7ED8 STP D13, D12, [X31 + 0x70]
	0x01FA7EDC STP D11, D10, [X31 + 0x80]
	0x01FA7EE0 STP D9, D8, [X31 + 0x90]
	0x01FA7EE4 STP X30, X23, [X31 + 0xA0]
	0x01FA7EE8 STP X22, X21, [X31 + 0xB0]
	0x01FA7EEC STP X20, X19, [X31 + 0xC0]
	0x01FA7EF0 ADRP X21, 0x2432000
	0x01FA7EF4 LDRB W8, [X21 + 0x80E]
	0x01FA7EF8 MOV X20, X1
	0x01FA7EFC MOV X19, X0
	0x01FA7F00 TBNZ X8, 0x0, 0x1FA7F30
	0x01FA7F04 ADRP X0, 0x2174000
	0x01FA7F08 LDR X0, [X0 + 0x3E0]
	0x01FA7F0C BL 0x1C16CF4
	0x01FA7F10 ADRP X0, 0x214C000
	0x01FA7F14 LDR X0, [X0 + 0x598]
	0x01FA7F18 BL 0x1C16CF4
	0x01FA7F1C ADRP X0, 0x214C000
	0x01FA7F20 LDR X0, [X0 + 0x5F8]
	0x01FA7F24 BL 0x1C16CF4
	0x01FA7F28 MOVZ W8, 0x1
	0x01FA7F2C STRB W8, [X21 + 0x80E]
	0x01FA7F30 ADRP X21, 0x2432000
	0x01FA7F34 LDRB W8, [X21 + 0x817]
	0x01FA7F38 MOVI V0.2D, 0x0
	0x01FA7F3C STUR V0, [X31 + 0x5C]
	0x01FA7F40 STP V0, V0, [X31 + 0x40]
	0x01FA7F44 CBNZ W8, 0x1FA7F5C
	0x01FA7F48 ADRP X0, 0x2174000
	0x01FA7F4C LDR X0, [X0 + 0x528]
	0x01FA7F50 BL 0x1C16CF4
	0x01FA7F54 MOVZ W8, 0x1
	0x01FA7F58 STRB W8, [X21 + 0x817]
	0x01FA7F5C ADRP X22, 0x2174000
	0x01FA7F60 LDR X22, [X22 + 0x528]
	0x01FA7F64 LDR X8, [X22]
	0x01FA7F68 LDR X8, [X8 + 0xB8]
	0x01FA7F6C LDR X8, [X8]
	0x01FA7F70 CBZ X8, 0x1FA81C8
	0x01FA7F74 LDR X0, [X8 + 0x1B8]
	0x01FA7F78 CBZ X0, 0x1FA81C8
	0x01FA7F7C MOV X1, X31
	0x01FA7F80 BL 0x3758A6C
	0x01FA7F84 TBNZ X0, 0x0, 0x1FA81A4
	0x01FA7F88 LDRB W8, [X21 + 0x817]
	0x01FA7F8C CBNZ W8, 0x1FA7FA4
	0x01FA7F90 ADRP X0, 0x2174000
	0x01FA7F94 LDR X0, [X0 + 0x528]
	0x01FA7F98 BL 0x1C16CF4
	0x01FA7F9C MOVZ W8, 0x1
	0x01FA7FA0 STRB W8, [X21 + 0x817]
	0x01FA7FA4 LDR X8, [X22]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X20, 0x2433000
	008 Move W8, [X20+2053]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {67}
	014 Move X0, 0x2175000
	015 Move X0, [X0+848]
	016 Call 0x1C17CF4
	017 Move X0, 0x214D000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x2174000
	021 Move X0, [X0+4072]
	022 Call 0x1C17CF4
	023 Move X0, 0x2175000
	024 Move X0, [X0+1208]
	025 Call 0x1C17CF4
	026 Move X0, 0x2175000
	027 Move X0, [X0+1216]
	028 Call 0x1C17CF4
	029 Move X0, 0x2175000
	030 Move X0, [X0+1224]
	031 Call 0x1C17CF4
	032 Move X0, 0x2175000
	033 Move X0, [X0+1232]
	034 Call 0x1C17CF4
	035 Move X0, 0x2175000
	036 Move X0, [X0+1240]
	037 Call 0x1C17CF4
	038 Move X0, 0x2175000
	039 Move X0, [X0+1248]
	040 Call 0x1C17CF4
	041 Move X0, 0x2175000
	042 Move X0, [X0+1256]
	043 Call 0x1C17CF4
	044 Move X0, 0x2175000
	045 Move X0, [X0+1264]
	046 Call 0x1C17CF4
	047 Move X0, 0x2175000
	048 Move X0, [X0+1272]
	049 Call 0x1C17CF4
	050 Move X0, 0x2175000
	051 Move X0, [X0+1280]
	052 Call 0x1C17CF4
	053 Move X0, 0x2175000
	054 Move X0, [X0+1288]
	055 Call 0x1C17CF4
	056 Move X0, 0x2175000
	057 Move X0, [X0+1296]
	058 Call 0x1C17CF4
	059 Move X0, 0x2175000
	060 Move X0, [X0+1304]
	061 Call 0x1C17CF4
	062 Move X0, 0x2175000
	063 Move X0, [X0+1312]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X20+2053], W8
	067 Move X22, 0x214D000
	068 Move X22, [X22+1432]
	069 Add X20, X19, 32
	070 Move X0, X20
	071 Move X1, X31
	072 Move [X31+32], X31
	073 Move [X31+40], X31
	074 Move [X31+48], X31
	075 Call InputActionProperty.get_action, X0
	076 Compare X0, 0
	077 JumpIfEqual {190}
	078 Move X0, X20
	079 Move X1, X31
	080 Call InputActionProperty.get_reference, X0
	081 Move X8, [X22]
	082 Move X21, X0
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {88}
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X0, X21
	089 Move X1, X31
	090 Move X2, X31
	091 Call Object.op_Equality, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {183}
	096 Move X0, X20
	097 Move X1, X31
	098 Call InputActionProperty.get_action, X0
	099 Compare X0, 0
	100 JumpIfEqual {289}
	101 Move X1, X31
	102 Call InputAction.get_bindings, X0
	103 Move X8, X1
	104 ShiftRight X8, 32
	105 And X8, X8, 0x7FFFFFFF
	106 Compare X8, 0
	107 JumpIfNotEqual {183}
	108 Move X0, X20
	109 Move X1, X31
	110 Call InputActionProperty.get_action, X0
	111 Move X8, 0x2175000
	112 Move X8, [X8+1296]
	113 Move X2, X31
	114 Move X3, X31
	115 Move X4, X31
	116 Move X1, [X8]
	117 Add X8, X31, 8
	118 Call InputActionSetupExtensions.AddCompositeBinding, X0, X1, X2, X3
	119 Move X9, 0x2175000
	120 Move X10, 0x2175000
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 Move X8, [X31+24]
	123 Move X9, [X9+1280]
	124 Move X10, [X10+1208]
	125 Add X0, X31, 32
	126 Move [X31+48], X8
	127 Move X1, [X9]
	128 Move X2, [X10]
	129 Add X8, X31, 8
	130 Move X3, X31
	131 Move X4, X31
	132 Move X5, X31
	133 Move [X31+2], V0
	134 Call CompositeSyntax.With, X0, X1, X2, X3, X4
	135 Move X9, 0x2175000
	136 Move X10, 0x2175000
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 Move X8, [X31+24]
	139 Move X9, [X9+1248]
	140 Move X10, [X10+1232]
	141 Add X0, X31, 32
	142 Move [X31+48], X8
	143 Move X1, [X9]
	144 Move X2, [X10]
	145 Add X8, X31, 8
	146 Move X3, X31
	147 Move X4, X31
	148 Move X5, X31
	149 Move [X31+2], V0
	150 Call CompositeSyntax.With, X0, X1, X2, X3, X4
	151 Move X9, 0x2175000
	152 Move X10, 0x2175000
	153 NotImplemented "Instruction LDUR not yet implemented."
	154 Move X8, [X31+24]
	155 Move X9, [X9+1288]
	156 Move X10, [X10+1256]
	157 Add X0, X31, 32
	158 Move [X31+48], X8
	159 Move X1, [X9]
	160 Move X2, [X10]
	161 Add X8, X31, 8
	162 Move X3, X31
	163 Move X4, X31
	164 Move X5, X31
	165 Move [X31+2], V0
	166 Call CompositeSyntax.With, X0, X1, X2, X3, X4
	167 Move X9, 0x2175000
	168 Move X10, 0x2175000
	169 NotImplemented "Instruction LDUR not yet implemented."
	170 Move X8, [X31+24]
	171 Move X9, [X9+1216]
	172 Move X10, [X10+1272]
	173 Add X0, X31, 32
	174 Move [X31+48], X8
	175 Move X1, [X9]
	176 Move X2, [X10]
	177 Add X8, X31, 8
	178 Move X3, X31
	179 Move X4, X31
	180 Move X5, X31
	181 Move [X31+2], V0
	182 Call CompositeSyntax.With, X0, X1, X2, X3, X4
	183 Move X0, X20
	184 Move X1, X31
	185 Call InputActionProperty.get_action, X0
	186 Compare X0, 0
	187 JumpIfEqual {289}
	188 Move X1, X31
	189 Call InputAction.Enable, X0
	190 Add X20, X19, 56
	191 Move X0, X20
	192 Move X1, X31
	193 Call InputActionProperty.get_action, X0
	194 Compare X0, 0
	195 JumpIfEqual {276}
	196 Move X0, X20
	197 Move X1, X31
	198 Call InputActionProperty.get_reference, X0
	199 Move X8, [X22]
	200 Move X21, X0
	201 Move W9, [X8+224]
	202 Compare W9, 0
	203 JumpIfNotEqual {206}
	204 Move X0, X8
	205 Call 0x1C17DFC
	206 Move X0, X21
	207 Move X1, X31
	208 Move X2, X31
	209 Call Object.op_Equality, X0, X1
	210 Move TEMP, X0
	211 And TEMP, TEMP, 1
	212 Compare TEMP, 1
	213 JumpIfNotEqual {269}
	214 Move X0, X20
	215 Move X1, X31
	216 Call InputActionProperty.get_action, X0
	217 Compare X0, 0
	218 JumpIfEqual {289}
	219 Move X1, X31
	220 Call InputAction.get_bindings, X0
	221 Move X8, X1
	222 ShiftRight X8, 32
	223 And X8, X8, 0x7FFFFFFF
	224 Compare X8, 0
	225 JumpIfNotEqual {269}
	226 Move X0, X20
	227 Move X1, X31
	228 Call InputActionProperty.get_action, X0
	229 Move X8, 0x2175000
	230 Move X8, [X8+1304]
	231 Move X2, X31
	232 Move X3, X31
	233 Move X4, X31
	234 Move X1, [X8]
	235 Add X8, X31, 8
	236 Call InputActionSetupExtensions.AddCompositeBinding, X0, X1, X2, X3
	237 Move X9, 0x2175000
	238 Move X10, 0x2175000
	239 NotImplemented "Instruction LDUR not yet implemented."
	240 Move X8, [X31+24]
	241 Move X9, [X9+1224]
	242 Move X10, [X10+1312]
	243 Add X0, X31, 32
	244 Move [X31+48], X8
	245 Move X1, [X9]
	246 Move X2, [X10]
	247 Add X8, X31, 8
	248 Move X3, X31
	249 Move X4, X31
	250 Move X5, X31
	251 Move [X31+2], V0
	252 Call CompositeSyntax.With, X0, X1, X2, X3, X4
	253 Move X9, 0x2175000
	254 Move X10, 0x2175000
	255 NotImplemented "Instruction LDUR not yet implemented."
	256 Move X8, [X31+24]
	257 Move X9, [X9+1240]
	258 Move X10, [X10+1264]
	259 Add X0, X31, 32
	260 Move [X31+48], X8
	261 Move X1, [X9]
	262 Move X2, [X10]
	263 Add X8, X31, 8
	264 Move X3, X31
	265 Move X4, X31
	266 Move X5, X31
	267 Move [X31+2], V0
	268 Call CompositeSyntax.With, X0, X1, X2, X3, X4
	269 Move X0, X20
	270 Move X1, X31
	271 Call InputActionProperty.get_action, X0
	272 Compare X0, 0
	273 JumpIfEqual {289}
	274 Move X1, X31
	275 Call InputAction.Enable, X0
	276 Move X8, 0x2175000
	277 Move X8, [X8+848]
	278 Move X0, X19
	279 Move X1, [X8]
	280 Call 0x21A4F50, X0
	281 Move [X19+80], X0
	282 Move X20, [X31+96]
	283 Move X19, [X31+104]
	284 Move X22, [X31+80]
	285 Move X21, [X31+88]
	286 Move X30, [X31+64]
	287 Add X31, X31, 112
	288 Return 
	289 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01FA7FA8 LDR X8, [X8 + 0xB8]
	0x01FA7FAC LDR X8, [X8]
	0x01FA7FB0 CBZ X8, 0x1FA81C8
	0x01FA7FB4 LDR X0, [X8 + 0x1A8]
	0x01FA7FB8 CBZ X0, 0x1FA81C8
	0x01FA7FBC MOV X1, X31
	0x01FA7FC0 BL 0x3758A6C
	0x01FA7FC4 TBZ X0, 0x0, 0x1FA81A4
	0x01FA7FC8 ADRP X9, 0x214C000
	0x01FA7FCC LDR V0, [X20]
	0x01FA7FD0 LDR X8, [X20 + 0x10]
	0x01FA7FD4 LDR X9, [X9 + 0x5F8]
	0x01FA7FD8 STR V0, [X31 + 0x2]
	0x01FA7FDC STR X8, [X31 + 0x30]
	0x01FA7FE0 LDR X0, [X9]
	0x01FA7FE4 LDR W8, [X0 + 0xE0]
	0x01FA7FE8 CBNZ W8, 0x1FA7FF0
	0x01FA7FEC BL 0x1C16DFC
	0x01FA7FF0 LDR X8, [X31 + 0x30]
	0x01FA7FF4 LDR V0, [X31 + 0x2]
	0x01FA7FF8 ADD X0, X31, 0x0
	0x01FA7FFC ADD X1, X31, 0x40
	0x01FA8000 STR X8, [X31 + 0x10]
	0x01FA8004 MOVZ W8, 0x42200000
	0x01FA8008 STR V0, [X31]
	0x01FA800C FMOV S0, W8
	0x01FA8010 MOV X2, X31
	0x01FA8014 BL 0x3C8B7A4
	0x01FA8018 TBZ X0, 0x0, 0x1FA81A4
	0x01FA801C ADRP X23, 0x214B000
	0x01FA8020 LDR X23, [X23 + 0x598]
	0x01FA8024 LDR X21, [X19 + 0x90]
	0x01FA8028 LDR X0, [X23]
	0x01FA802C LDR W8, [X0 + 0xE0]
	0x01FA8030 CBNZ W8, 0x1FA8038
	0x01FA8034 BL 0x1C16DFC
	0x01FA8038 MOV X0, X21
	0x01FA803C MOV X1, X31
	0x01FA8040 MOV X2, X31
	0x01FA8044 BL 0x3C3883C
	0x01FA8048 TBZ X0, 0x0, 0x1FA81A4
	0x01FA804C ADD X0, X31, 0x40
	0x01FA8050 MOV X1, X31
	0x01FA8054 BL 0x3C8E5C0
	0x01FA8058 CBZ X0, 0x1FA81C8
	0x01FA805C ADRP X8, 0x2173000
	0x01FA8060 LDR X8, [X8 + 0x3E0]
	0x01FA8064 LDR X1, [X8]
	0x01FA8068 BL 0x21A3F50
	0x01FA806C LDR X8, [X23]
	0x01FA8070 MOV X22, X0
	0x01FA8074 LDR W9, [X8 + 0xE0]
	0x01FA8078 CBNZ W9, 0x1FA8084
	0x01FA807C MOV X0, X8
	0x01FA8080 BL 0x1C16DFC
	0x01FA8084 MOV X0, X22
	0x01FA8088 MOV X1, X31
	0x01FA808C BL 0x3C38948
	0x01FA8090 MOV X21, X31
	0x01FA8094 TBZ X0, 0x0, 0x1FA80AC
	0x01FA8098 CBZ X22, 0x1FA81C8
	0x01FA809C MOV X0, X22
	0x01FA80A0 MOV X1, X31
	0x01FA80A4 BL 0x3C32ECC
	0x01FA80A8 MOV X21, X0
	0x01FA80AC LDR X0, [X23]
	0x01FA80B0 LDR W8, [X0 + 0xE0]
	0x01FA80B4 CBNZ W8, 0x1FA80BC
	0x01FA80B8 BL 0x1C16DFC
	0x01FA80BC MOV X0, X21
	0x01FA80C0 MOV X1, X31
	0x01FA80C4 MOV X2, X31
	0x01FA80C8 BL 0x3C354F8
	0x01FA80CC TBZ X0, 0x0, 0x1FA81A4
	0x01FA80D0 LDR X8, [X19 + 0x88]
	0x01FA80D4 STR X21, [X19 + 0x90]
	0x01FA80D8 CBZ X8, 0x1FA81C8
	0x01FA80DC STR W31, [X8 + 0x9C]
	0x01FA80E0 LDR X0, [X19 + 0x78]
	0x01FA80E4 CBZ X0, 0x1FA81C8
	0x01FA80E8 MOV X1, X31
	0x01FA80EC BL 0x3C32E90
	0x01FA80F0 MOV X21, X0
	0x01FA80F4 ADD X0, X31, 0x40
	0x01FA80F8 MOV X1, X31
	0x01FA80FC BL 0x3C8E66C
	0x01FA8100 CBZ X21, 0x1FA81C8
	0x01FA8104 MOV X0, X21
	0x01FA8108 MOV X1, X31
	0x01FA810C BL 0x3C3F62C
	0x01FA8110 LDR X8, [X19 + 0x78]
	0x01FA8114 CBZ X8, 0x1FA81C8
	0x01FA8118 MOVZ W21, 0x1
	0x01FA811C ADD X0, X31, 0x40
	0x01FA8120 MOV X1, X31
	0x01FA8124 STRB W21, [X8 + 0x3C]
	0x01FA8128 BL 0x3C8E66C
	0x01FA812C ADRP X22, 0x2430000
	0x01FA8130 LDP S11, S12, [X20]
	0x01FA8134 LDRB W8, [X22 + 0x784]
	0x01FA8138 LDR V13, [X20 + 0x8]
	0x01FA813C MOV V8.16B, V0.16B
	0x01FA8140 MOV V9.16B, V1.16B
	0x01FA8144 MOV V10.16B, V2.16B
	0x01FA8148 CBNZ W8, 0x1FA815C
	0x01FA814C ADRP X0, 0x214B000
	0x01FA8150 LDR X0, [X0 + 0x5A8]
	0x01FA8154 BL 0x1C16CF4
	0x01FA8158 STRB W21, [X22 + 0x784]
	0x01FA815C ADRP X8, 0x214B000
	0x01FA8160 LDR X8, [X8 + 0x5A8]
	0x01FA8164 FSUB S11, S8, S11
	0x01FA8168 FSUB S9, S9, S12
	0x01FA816C FSUB S8, S10, S13
	0x01FA8170 LDR X0, [X8]
	0x01FA8174 LDR W8, [X0 + 0xE0]
	0x01FA8178 CBNZ W8, 0x1FA8180
	0x01FA817C BL 0x1C16DFC
	0x01FA8180 FMUL S0, S11, S11
	0x01FA8184 FMUL S1, S9, S9
	0x01FA8188 FMUL S2, S8, S8
	0x01FA818C FADD S0, S0, S1
	0x01FA8190 FADD S0, S0, S2
	0x01FA8194 FSQRT S0, S0
	0x01FA8198 MOVZ W0, 0x1
	0x01FA819C STR S0, [X19 + 0xA0]
	0x01FA81A0 B 0x1FA81A8
	0x01FA81A4 MOV W0, W31
	0x01FA81A8 LDP X20, X19, [X31 + 0xC0]
	0x01FA81AC LDP X22, X21, [X31 + 0xB0]
	0x01FA81B0 LDP X30, X23, [X31 + 0xA0]
	0x01FA81B4 LDP D9, D8, [X31 + 0x90]
	0x01FA81B8 LDP D11, D10, [X31 + 0x80]
	0x01FA81BC LDP D13, D12, [X31 + 0x70]
	0x01FA81C0 ADD X31, X31, 0xD0
	0x01FA81C4 RET
	0x01FA81C8 BL 0x1C16F20
	0x01FA81CC STP X30, X21, [X31 - 0x20]!
	0x01FA81D0 STP X20, X19, [X31 + 0x10]
	0x01FA81D4 ADRP X20, 0x2431000
	0x01FA81D8 LDRB W8, [X20 + 0x80F]
	0x01FA81DC MOV X19, X0
	0x01FA81E0 TBNZ X8, 0x0, 0x1FA81F8
	0x01FA81E4 ADRP X0, 0x214B000
	0x01FA81E8 LDR X0, [X0 + 0x598]
	0x01FA81EC BL 0x1C16CF4
	0x01FA81F0 MOVZ W8, 0x1
	0x01FA81F4 STRB W8, [X20 + 0x80F]
	0x01FA81F8 ADRP X20, 0x2431000
	0x01FA81FC LDRB W8, [X20 + 0x817]
	0x01FA8200 CBNZ W8, 0x1FA8218
	0x01FA8204 ADRP X0, 0x2173000
	0x01FA8208 LDR X0, [X0 + 0x528]
	0x01FA820C BL 0x1C16CF4
	0x01FA8210 MOVZ W8, 0x1
	0x01FA8214 STRB W8, [X20 + 0x817]
	0x01FA8218 ADRP X21, 0x2173000
	0x01FA821C LDR X21, [X21 + 0x528]
	0x01FA8220 LDR X8, [X21]
	0x01FA8224 LDR X8, [X8 + 0xB8]
	0x01FA8228 LDR X8, [X8]
	0x01FA822C CBZ X8, 0x1FA82D0
	0x01FA8230 LDR X0, [X8 + 0x1A8]
	0x01FA8234 CBZ X0, 0x1FA82D0
	0x01FA8238 MOV X1, X31
	0x01FA823C BL 0x3758C34
	0x01FA8240 TBNZ X0, 0x0, 0x1FA82C4
	0x01FA8244 LDRB W8, [X20 + 0x817]
	0x01FA8248 CBNZ W8, 0x1FA8260
	0x01FA824C ADRP X0, 0x2173000
	0x01FA8250 LDR X0, [X0 + 0x528]
	0x01FA8254 BL 0x1C16CF4
	0x01FA8258 MOVZ W8, 0x1
	0x01FA825C STRB W8, [X20 + 0x817]
	0x01FA8260 LDR X8, [X21]
	0x01FA8264 LDR X8, [X8 + 0xB8]
	0x01FA8268 LDR X8, [X8]
	0x01FA826C CBZ X8, 0x1FA82D0
	0x01FA8270 LDR X0, [X8 + 0x1A8]
	0x01FA8274 CBZ X0, 0x1FA82D0
	0x01FA8278 MOV X1, X31
	0x01FA827C BL 0x3758A6C
	0x01FA8280 TBNZ X0, 0x0, 0x1FA82C4
	0x01FA8284 ADRP X8, 0x214B000
	0x01FA8288 LDR X8, [X8 + 0x598]
	0x01FA828C LDR X20, [X19 + 0x90]
	0x01FA8290 LDR X0, [X8]
	0x01FA8294 LDR W8, [X0 + 0xE0]
	0x01FA8298 CBNZ W8, 0x1FA82A0
	0x01FA829C BL 0x1C16DFC
	0x01FA82A0 MOV X0, X20
	0x01FA82A4 MOV X1, X31
	0x01FA82A8 MOV X2, X31
	0x01FA82AC BL 0x3C354F8
	0x01FA82B0 TBZ X0, 0x0, 0x1FA82C4
	0x01FA82B4 LDR X8, [X19 + 0x78]
	0x01FA82B8 STR X31, [X19 + 0x90]
	0x01FA82BC CBZ X8, 0x1FA82D0
	0x01FA82C0 STRB W31, [X8 + 0x3C]
	0x01FA82C4 LDP X20, X19, [X31 + 0x10]
	0x01FA82C8 LDP X30, X21, [X31], #0x20
	0x01FA82CC RET
	0x01FA82D0 BL 0x1C16F20
	0x01FA82D4 SUB X31, X31, 0xE0
	0x01FA82D8 STP D13, D12, [X31 + 0x90]
	0x01FA82DC STP D11, D10, [X31 + 0xA0]
	0x01FA82E0 STP D9, D8, [X31 + 0xB0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x2433000
	015 Move W8, [X20+2054]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x2153000
	022 Move X0, [X0+2240]
	023 Call 0x1C17CF4
	024 Move X0, 0x2175000
	025 Move X0, [X0+960]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2054], W8
	029 Move X0, X19
	030 Call DesktopController.ProjectHeadsetGroundPosition, X0
	031 Add X21, X19, 56
	032 Move X0, X21
	033 Move X1, X31
	034 Move V11, V1
	035 Call InputActionProperty.get_action, X0
	036 Compare X0, 0
	037 JumpIfEqual {61}
	038 Move X20, [X19+80]
	039 Move X0, X21
	040 Move X1, X31
	041 Call InputActionProperty.get_action, X0
	042 Compare X0, 0
	043 JumpIfEqual {256}
	044 Move X8, 0x2152000
	045 Move X8, [X8+2240]
	046 Move X1, [X8]
	047 Call InputAction.ReadValue, X0
	048 Move X0, X31
	049 Move V8, V0
	050 Call Time.get_deltaTime
	051 Compare X20, 0
	052 JumpIfEqual {256}
	053 Move X8, [X20]
	054 Move V1, [X19+104]
	055 Multiply S0, S8, S0
	056 Move X0, X20
	057 Move X9, [X8+696]
	058 Move X1, [X8+704]
	059 Multiply S0, S0, S1
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Add X20, X19, 32
	062 Move X0, X20
	063 Move X1, X31
	064 Call InputActionProperty.get_action, X0
	065 Compare X0, 0
	066 JumpIfEqual {242}
	067 Move X0, X20
	068 Move X1, X31
	069 Call InputActionProperty.get_action, X0
	070 Compare X0, 0
	071 JumpIfEqual {256}
	072 Move X8, 0x2174000
	073 Move X8, [X8+960]
	074 Move X1, [X8]
	075 Call InputAction.ReadValue, X0
	076 Move X20, 0x2432000
	077 Move W8, [X20+2071]
	078 Move V8, V0
	079 Move V10, V1
	080 Compare W8, 0
	081 JumpIfNotEqual {87}
	082 Move X0, 0x2174000
	083 Move X0, [X0+1320]
	084 Call 0x1C17CF4
	085 Move W8, 1
	086 Move [X20+2071], W8
	087 Move X21, 0x2174000
	088 Move X21, [X21+1320]
	089 Move X8, [X21]
	090 Move X8, [X8+184]
	091 Move X8, [X8]
	092 Compare X8, 0
	093 JumpIfEqual {256}
	094 Move X0, [X8+440]
	095 Compare X0, 0
	096 JumpIfEqual {256}
	097 Move X1, X31
	098 Call ButtonControl.get_isPressed, X0
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {124}
	103 Move W8, [X20+2071]
	104 Compare W8, 0
	105 JumpIfNotEqual {111}
	106 Move X0, 0x2174000
	107 Move X0, [X0+1320]
	108 Call 0x1C17CF4
	109 Move W8, 1
	110 Move [X20+2071], W8
	111 Move X8, [X21]
	112 Move X8, [X8+184]
	113 Move X8, [X8]
	114 Compare X8, 0
	115 JumpIfEqual {256}
	116 Move X0, [X8+424]
	117 Compare X0, 0
	118 JumpIfEqual {256}
	119 Move X1, X31
	120 Call ButtonControl.get_isPressed, X0
	121 And W31, W0, 1
	122 Move S0, 1
	123 NotImplemented "Instruction FCSEL not yet implemented."
	124 Move X20, 0x2432000
	125 Move W8, [X20+2072]
	126 Compare W8, 0
	127 JumpIfNotEqual {133}
	128 Move X0, 0x214C000
	129 Move X0, [X0+1448]
	130 Call 0x1C17CF4
	131 Move W8, 1
	132 Move [X20+2072], W8
	133 Move X8, 0x214C000
	134 Move X8, [X8+1448]
	135 Move X0, [X8]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Multiply S0, S8, S8
	141 Multiply S1, S10, S10
	142 Add S0, S0, S1
	143 NotImplemented "Instruction FSQRT not yet implemented."
	144 NotImplemented "Instruction FCMP not yet implemented."
	145 Move V9, [X19+100]
	146 Move X0, X31
	147 Call Time.get_deltaTime
	148 Move X8, [X19+80]
	149 Compare X8, 0
	150 JumpIfEqual {256}
	151 Move X0, [X8+48]
	152 Compare X0, 0
	153 JumpIfEqual {256}
	154 Move X1, X31
	155 Move V12, V0
	156 Call Component.get_transform, X0
	157 Compare X0, 0
	158 JumpIfEqual {256}
	159 Move X1, X31
	160 Call Transform.get_forward, X0
	161 Move V15, [X19+96]
	162 Move X0, X31
	163 Move V13, V0
	164 Move V14, V2
	165 Call Time.get_deltaTime
	166 Move X8, [X19+80]
	167 Compare X8, 0
	168 JumpIfEqual {256}
	169 Move X0, [X8+48]
	170 Move [X31+12], S0
	171 Compare X0, 0
	172 JumpIfEqual {256}
	173 Move X1, X31
	174 Move [X31], S15
	175 Move [X31+8], S14
	176 Move [X31+8], S13
	177 Call Component.get_transform, X0
	178 Compare X0, 0
	179 JumpIfEqual {256}
	180 Move X1, X31
	181 Move V14, V12
	182 Move V13, V8
	183 Call Transform.get_right, X0
	184 Move X0, [X19+80]
	185 Compare X0, 0
	186 JumpIfEqual {256}
	187 Move X1, X31
	188 Move V15, V0
	189 Move V8, V2
	190 Move V12, V11
	191 Call Component.get_transform, X0
	192 Compare X0, 0
	193 JumpIfEqual {256}
	194 Move X1, X31
	195 Call Transform.get_position, X0
	196 Move X0, [X19+80]
	197 Compare X0, 0
	198 JumpIfEqual {256}
	199 Move X1, X31
	200 Move V11, V1
	201 Call Component.get_transform, X0
	202 Compare X0, 0
	203 JumpIfEqual {256}
	204 Move S1, [X31]
	205 Move S3, [X31+4]
	206 Move V2, [X31+12]
	207 Multiply S0, S10, S9
	208 Multiply S0, S0, S14
	209 Multiply S1, S13, S1
	210 Multiply S1, S1, S2
	211 Move V2, [X31+8]
	212 Move X1, X31
	213 Subtract S10, S12, S11
	214 Multiply S2, S0, S2
	215 Multiply S0, S0, S3
	216 Multiply S3, S1, S15
	217 Multiply S1, S1, S8
	218 Add S8, S2, S3
	219 Add S9, S0, S1
	220 Call Transform.get_position, X0
	221 Move X8, [X19]
	222 Add S0, S8, S0
	223 Add S1, S10, S1
	224 Add S2, S9, S2
	225 Move X2, [X8+376]
	226 Move X1, [X8+384]
	227 Move X0, X19
	228 Move X20, [X31+96]
	229 Move X19, [X31+104]
	230 Move X30, [X31+80]
	231 Move X21, [X31+88]
	232 Move D9, [X31+64]
	233 Move D8, [X31+72]
	234 Move D11, [X31+48]
	235 Move D10, [X31+56]
	236 Move D13, [X31+32]
	237 Move D12, [X31+40]
	238 Move D15, [X31+16]
	239 Move D14, [X31+24]
	240 Add X31, X31, 112
	241 CallNoReturn X2
	242 Move X20, [X31+96]
	243 Move X19, [X31+104]
	244 Move X30, [X31+80]
	245 Move X21, [X31+88]
	246 Move D9, [X31+64]
	247 Move D8, [X31+72]
	248 Move D11, [X31+48]
	249 Move D10, [X31+56]
	250 Move D13, [X31+32]
	251 Move D12, [X31+40]
	252 Move D15, [X31+16]
	253 Move D14, [X31+24]
	254 Add X31, X31, 112
	255 Return 
	256 Call 0x1C17F20

Method: System.Void Move(UnityEngine.Vector3 newPosition)

Disassembly:
	0x01FA8488 BLR X8
	0x01FA848C MOV V0.16B, V8.16B
	0x01FA8490 MOV V1.16B, V9.16B
	0x01FA8494 MOV V2.16B, V10.16B
	0x01FA8498 LDP X20, X19, [X31 + 0xD0]
	0x01FA849C LDP X30, X21, [X31 + 0xC0]
	0x01FA84A0 LDP D9, D8, [X31 + 0xB0]
	0x01FA84A4 LDP D11, D10, [X31 + 0xA0]
	0x01FA84A8 LDP D13, D12, [X31 + 0x90]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+80]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+712]
	007 Move X1, [X8+720]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: UnityEngine.Vector3 ProjectHeadsetGroundPosition()

Disassembly:
	0x01FA82E4 STP X30, X21, [X31 + 0xC0]
	0x01FA82E8 STP X20, X19, [X31 + 0xD0]
	0x01FA82EC ADRP X21, 0x2431000
	0x01FA82F0 LDRB W8, [X21 + 0x810]
	0x01FA82F4 MOV X20, X1
	0x01FA82F8 MOV X19, X0
	0x01FA82FC TBNZ X8, 0x0, 0x1FA8314
	0x01FA8300 ADRP X0, 0x2173000
	0x01FA8304 LDR X0, [X0 + 0x550]
	0x01FA8308 BL 0x1C16CF4
	0x01FA830C MOVZ W8, 0x1
	0x01FA8310 STRB W8, [X21 + 0x810]
	0x01FA8314 MOVI V0.2D, 0x0
	0x01FA8318 STUR V0, [X31 + 0x4C]
	0x01FA831C STP V0, V0, [X31 + 0x30]
	0x01FA8320 LDR X0, [X19 + 0x88]
	0x01FA8324 CBZ X0, 0x1FA84B4
	0x01FA8328 LDP S8, S9, [X20]
	0x01FA832C LDP S10, S11, [X20 + 0x8]
	0x01FA8330 LDP S12, S13, [X20 + 0x10]
	0x01FA8334 ADD X1, X31, 0x30
	0x01FA8338 MOV V0.16B, V8.16B
	0x01FA833C MOV V1.16B, V9.16B
	0x01FA8340 MOV V2.16B, V10.16B
	0x01FA8344 MOV V3.16B, V11.16B
	0x01FA8348 MOV V4.16B, V12.16B
	0x01FA834C MOV V5.16B, V13.16B
	0x01FA8350 BL 0x1FA1F80
	0x01FA8354 TBZ X0, 0x0, 0x1FA83D0
	0x01FA8358 ADD X0, X31, 0x30
	0x01FA835C MOV X1, X31
	0x01FA8360 BL 0x3C8E66C
	0x01FA8364 LDR X19, [X19 + 0x98]
	0x01FA8368 MOV V8.16B, V0.16B
	0x01FA836C MOV V9.16B, V1.16B
	0x01FA8370 MOV V10.16B, V2.16B
	0x01FA8374 CBZ X19, 0x1FA848C
	0x01FA8378 LDP V0, V1, [X31 + 0x30]
	0x01FA837C LDUR V2, [X31 + 0x4C]
	0x01FA8380 ADRP X10, 0x2173000
	0x01FA8384 STP V0, V1, [X31]
	0x01FA8388 STUR V2, [X31 + 0x1C]
	0x01FA838C LDR X8, [X19]
	0x01FA8390 LDR X10, [X10 + 0x550]
	0x01FA8394 LDRH W9, [X8 + 0x12E]
	0x01FA8398 LDR X1, [X10]
	0x01FA839C CBZ X9, 0x1FA83C0
	0x01FA83A0 LDR X10, [X8 + 0xB0]
	0x01FA83A4 ADD X10, X10, 0x8
	0x01FA83A8 LDUR X11, [X10 - 0x8]
	0x01FA83AC CMP X11, X1
	0x01FA83B0 B.EQ 0x1FA843C
	0x01FA83B4 SUBS X9, X9, 0x1
	0x01FA83B8 ADD X10, X10, 0x10
	0x01FA83BC B.NE 0x1FA83A8
	0x01FA83C0 MOV X0, X19
	0x01FA83C4 MOV W2, W31
	0x01FA83C8 BL 0x1C5C788
	0x01FA83CC B 0x1FA8448
	0x01FA83D0 LDR X19, [X19 + 0x98]
	0x01FA83D4 FMOV S0, 20
	0x01FA83D8 FMUL S1, S11, S0
	0x01FA83DC FMUL S2, S12, S0
	0x01FA83E0 FMUL S0, S13, S0
	0x01FA83E4 FADD S8, S8, S1
	0x01FA83E8 FADD S9, S9, S2
	0x01FA83EC FADD S10, S10, S0
	0x01FA83F0 CBZ X19, 0x1FA848C
	0x01FA83F4 ADRP X10, 0x2173000
	0x01FA83F8 LDR X8, [X19]
	0x01FA83FC LDR X10, [X10 + 0x550]
	0x01FA8400 LDRH W9, [X8 + 0x12E]
	0x01FA8404 LDR X1, [X10]
	0x01FA8408 CBZ X9, 0x1FA842C
	0x01FA840C LDR X10, [X8 + 0xB0]
	0x01FA8410 ADD X10, X10, 0x8
	0x01FA8414 LDUR X11, [X10 - 0x8]
	0x01FA8418 CMP X11, X1
	0x01FA841C B.EQ 0x1FA8470
	0x01FA8420 SUBS X9, X9, 0x1
	0x01FA8424 ADD X10, X10, 0x10
	0x01FA8428 B.NE 0x1FA8414
	0x01FA842C MOVZ W2, 0x1
	0x01FA8430 MOV X0, X19
	0x01FA8434 BL 0x1C5C788
	0x01FA8438 B 0x1FA8480
	0x01FA843C LDRSW X9, [X10]
	0x01FA8440 ADD X8, X8, X9, 0x4, LSL
	0x01FA8444 ADD X0, X8, 0x138
	0x01FA8448 LDP V0, V1, [X31]
	0x01FA844C LDUR V2, [X31 + 0x1C]
	0x01FA8450 LDR X8, [X0]
	0x01FA8454 ADD X1, X31, 0x60
	0x01FA8458 STP V0, V1, [X31 + 0x60]
	0x01FA845C STUR V2, [X31 + 0x7C]
	0x01FA8460 LDR X2, [X0 + 0x8]
	0x01FA8464 MOV X0, X19
	0x01FA8468 BLR X8
	0x01FA846C B 0x1FA848C
	0x01FA8470 LDR W9, [X10]
	0x01FA8474 ADD W9, W9, 0x1
	0x01FA8478 ADD X8, X8, W9, 0x4, SXTW
	0x01FA847C ADD X0, X8, 0x138
	0x01FA8480 LDP X8, X1, [X0]
	0x01FA8484 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X20, 0x2432000
	014 Move W8, [X20+2055]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x214C000
	021 Move X0, [X0+1528]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2055], W8
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Move [X31+28], V0
	027 Move [X31], V0
	028 Move [X31+8], V0
	029 Move X0, [X19+80]
	030 Compare X0, 0
	031 JumpIfEqual {133}
	032 Move X1, X31
	033 Call Component.get_transform, X0
	034 Compare X0, 0
	035 JumpIfEqual {133}
	036 Move X1, X31
	037 Call Transform.get_position, X0
	038 Move X8, [X19+80]
	039 Compare X8, 0
	040 JumpIfEqual {133}
	041 Move X0, [X8+48]
	042 Compare X0, 0
	043 JumpIfEqual {133}
	044 Move X1, X31
	045 Move V8, V0
	046 Move V9, V1
	047 Move V10, V2
	048 Call Component.get_transform, X0
	049 Compare X0, 0
	050 JumpIfEqual {133}
	051 Move X1, X31
	052 Move [X31+124], S10
	053 Move V10, V9
	054 Move V9, V8
	055 Call Transform.get_position, X0
	056 Move X0, X19
	057 Move X1, X31
	058 Move V11, V0
	059 Move V12, V1
	060 Move V13, V2
	061 Call Component.get_transform, X0
	062 Compare X0, 0
	063 JumpIfEqual {133}
	064 Move X20, 0x214C000
	065 Move X20, [X20+1528]
	066 Move X1, X31
	067 Call Transform.get_up, X0
	068 Move X0, [X20]
	069 NotImplemented "Instruction FNEG not yet implemented."
	070 NotImplemented "Instruction FNEG not yet implemented."
	071 NotImplemented "Instruction FNEG not yet implemented."
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Add X0, X31, 0
	077 Move V0, V11
	078 Move V1, V12
	079 Move V2, V13
	080 Move V3, V14
	081 Move V4, V15
	082 Move V5, V8
	083 Move X1, X31
	084 Call Physics.Raycast, X0, X1, X2
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {114}
	089 Move X19, [X19+88]
	090 Add X0, X31, 0
	091 Move X1, X31
	092 Call RaycastHit.get_collider, X0
	093 Move V8, V9
	094 Move V9, V10
	095 Move V10, [X31+124]
	096 Compare X19, 0
	097 JumpIfEqual {133}
	098 Move X8, [X19]
	099 Move X1, X0
	100 Move X0, X19
	101 Move X9, [X8+408]
	102 Move X2, [X8+416]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {117}
	108 Add X0, X31, 0
	109 Move X1, X31
	110 Call RaycastHit.get_point, X0
	111 Move V8, V0
	112 Move V9, V1
	113 Move V10, V2
	114 Move V8, V9
	115 Move V9, V10
	116 Move V10, [X31+124]
	117 Move V0, V8
	118 Move V1, V9
	119 Move V2, V10
	120 Move X20, [X31+128]
	121 Move X19, [X31+136]
	122 Move X30, [X31+112]
	123 Move D9, [X31+96]
	124 Move D8, [X31+104]
	125 Move D11, [X31+80]
	126 Move D10, [X31+88]
	127 Move D13, [X31+64]
	128 Move D12, [X31+72]
	129 Move D15, [X31+48]
	130 Move D14, [X31+56]
	131 Add X31, X31, 144
	132 Return X0
	133 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01FA84AC ADD X31, X31, 0xE0
	0x01FA84B0 RET
	0x01FA84B4 BL 0x1C16F20
	0x01FA84B8 SUB X31, X31, 0x110
	0x01FA84BC STP D15, D14, [X31 + 0x90]
	0x01FA84C0 STP D13, D12, [X31 + 0xA0]

ISIL:
	001 Move V0, 0
	002 Move W8, 0x43340000
	003 Move X1, X31
	004 Move [X0+96], D0
	005 Move [X0+104], W8
	006 Call MonoBehaviour..ctor, X0
	007 Return 

