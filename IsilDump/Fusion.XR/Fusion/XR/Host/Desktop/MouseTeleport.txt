Type: Fusion.XR.Host.Desktop.MouseTeleport

Method: UnityEngine.Transform get_Head()

Disassembly:
	0x01FA8A30 FADD S16, S21, S22
	0x01FA8A34 FADD S3, S3, S24
	0x01FA8A38 FADD S0, S5, S0
	0x01FA8A3C FSUB S2, S2, S18
	0x01FA8A40 FADD S5, S20, S16
	0x01FA8A44 FADD S4, S4, S3
	0x01FA8A48 FADD S0, S1, S0
	0x01FA8A4C FSUB S3, S2, S19
	0x01FA8A50 FSUB S2, S5, S23
	0x01FA8A54 FSUB S1, S4, S7
	0x01FA8A58 FSUB S0, S0, S6
	0x01FA8A5C BL 0x3C3F7AC
	0x01FA8A60 LDR V0, [X19 + 0xA0]
	0x01FA8A64 FCMP S0, 0x0
	0x01FA8A68 B.NE 0x1FA8ACC
	0x01FA8A6C TBNZ X20, 0x0, 0x1FA8B18
	0x01FA8A70 LDR X8, [X19 + 0x20]
	0x01FA8A74 CBZ X8, 0x1FA8BB4
	0x01FA8A78 LDR X0, [X8 + 0x20]
	0x01FA8A7C CBZ X0, 0x1FA8BB4
	0x01FA8A80 MOV X1, X31
	0x01FA8A84 BL 0x3C32E90
	0x01FA8A88 MOV X20, X0
	0x01FA8A8C MOV X0, X19
	0x01FA8A90 BL 0x1FA7A30
	0x01FA8A94 CBZ X0, 0x1FA8BB4
	0x01FA8A98 LDP S1, S2, [X19 + 0x34]
	0x01FA8A9C LDR V0, [X19 + 0x30]
	0x01FA8AA0 MOV X1, X31
	0x01FA8AA4 BL 0x3C3DE4C
	0x01FA8AA8 CBZ X20, 0x1FA8BB4
	0x01FA8AAC ADRP X8, 0xFFFFFFFFFEB42000
	0x01FA8AB0 LDR V3, [X8 + 0x10C]
	0x01FA8AB4 FMUL S4, S10, S3
	0x01FA8AB8 FMUL S5, S14, S3
	0x01FA8ABC FADD S2, S4, S2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2432000
	006 Move X20, 0x214C000
	007 Move W8, [X21+2059]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x214C000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2059], W8
	019 Move X0, [X20]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X0, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0
	039 Move X8, [X19+32]
	040 Compare X8, 0
	041 JumpIfEqual {52}
	042 Move X0, [X8+48]
	043 Compare X0, 0
	044 JumpIfEqual {52}
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, X31
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call Component.get_transform, X0
	051 Return X0
	052 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01FA8AC0 FADD S1, S5, S1
	0x01FA8AC4 FMUL S3, S13, S3
	0x01FA8AC8 B 0x1FA8B08
	0x01FA8ACC LDR X8, [X19 + 0x20]
	0x01FA8AD0 CBZ X8, 0x1FA8BB4
	0x01FA8AD4 LDR X0, [X8 + 0x20]
	0x01FA8AD8 CBZ X0, 0x1FA8BB4
	0x01FA8ADC MOV X1, X31
	0x01FA8AE0 BL 0x3C32E90
	0x01FA8AE4 CBZ X0, 0x1FA8BB4
	0x01FA8AE8 LDR V0, [X19 + 0xA0]
	0x01FA8AEC MOV X20, X0
	0x01FA8AF0 FMUL S1, S10, S0
	0x01FA8AF4 FMUL S3, S14, S0
	0x01FA8AF8 FADD S2, S11, S1
	0x01FA8AFC FADD S1, S9, S3
	0x01FA8B00 FMUL S0, S13, S0
	0x01FA8B04 MOV V3.16B, V8.16B
	0x01FA8B08 FADD S0, S3, S0
	0x01FA8B0C MOV X0, X20
	0x01FA8B10 MOV X1, X31
	0x01FA8B14 BL 0x3C3F62C
	0x01FA8B18 CBZ W22, 0x1FA8B8C
	0x01FA8B1C LDR X8, [X19 + 0x20]
	0x01FA8B20 CBZ X8, 0x1FA8BB4
	0x01FA8B24 LDR X0, [X8 + 0x20]
	0x01FA8B28 CBZ X0, 0x1FA8BB4
	0x01FA8B2C MOV X1, X31
	0x01FA8B30 BL 0x3C32E90
	0x01FA8B34 CBZ X0, 0x1FA8BB4
	0x01FA8B38 FADD S0, S10, S10
	0x01FA8B3C FADD S1, S14, S14
	0x01FA8B40 FADD S3, S13, S13
	0x01FA8B44 FADD S2, S11, S0
	0x01FA8B48 FADD S1, S9, S1
	0x01FA8B4C FADD S0, S8, S3
	0x01FA8B50 MOV X1, X31
	0x01FA8B54 BL 0x3C407A8
	0x01FA8B58 LDR X8, [X19 + 0x20]
	0x01FA8B5C CBZ X8, 0x1FA8BB4
	0x01FA8B60 LDR X0, [X8 + 0x20]
	0x01FA8B64 CBZ X0, 0x1FA8BB4
	0x01FA8B68 MOV X1, X31
	0x01FA8B6C BL 0x3C32E90
	0x01FA8B70 CBZ X0, 0x1FA8BB4
	0x01FA8B74 MOVZ W8, 0xC2200000
	0x01FA8B78 FMOV S1, W31
	0x01FA8B7C FMOV S2, W31
	0x01FA8B80 FMOV S0, W8
	0x01FA8B84 MOV X1, X31
	0x01FA8B88 BL 0x3C404A0
	0x01FA8B8C LDP X20, X19, [X31 + 0x100]
	0x01FA8B90 LDP X22, X21, [X31 + 0xF0]
	0x01FA8B94 LDP X24, X23, [X31 + 0xE0]
	0x01FA8B98 LDP X29, X30, [X31 + 0xD0]
	0x01FA8B9C LDP D9, D8, [X31 + 0xC0]
	0x01FA8BA0 LDP D11, D10, [X31 + 0xB0]
	0x01FA8BA4 LDP D13, D12, [X31 + 0xA0]
	0x01FA8BA8 LDP D15, D14, [X31 + 0x90]
	0x01FA8BAC ADD X31, X31, 0x110
	0x01FA8BB0 RET
	0x01FA8BB4 BL 0x1C16F20
	0x01FA8BB8 MOV X1, X31
	0x01FA8BBC B 0x3C36C30
	0x01FA8BC0 STR X30, [X31 - 0x30]!
	0x01FA8BC4 STP X22, X21, [X31 + 0x10]
	0x01FA8BC8 STP X20, X19, [X31 + 0x20]
	0x01FA8BCC ADRP X21, 0x2431000
	0x01FA8BD0 ADRP X22, 0x2173000
	0x01FA8BD4 ADRP X20, 0x214B000
	0x01FA8BD8 LDRB W8, [X21 + 0x812]
	0x01FA8BDC LDR X22, [X22 + 0x48]
	0x01FA8BE0 LDR X20, [X20 + 0x598]
	0x01FA8BE4 MOV X19, X0
	0x01FA8BE8 TBNZ X8, 0x0, 0x1FA8C54
	0x01FA8BEC ADRP X0, 0x2173000
	0x01FA8BF0 LDR X0, [X0 + 0x48]
	0x01FA8BF4 BL 0x1C16CF4
	0x01FA8BF8 ADRP X0, 0x214B000
	0x01FA8BFC LDR X0, [X0 + 0xA28]
	0x01FA8C00 BL 0x1C16CF4
	0x01FA8C04 ADRP X0, 0x214B000
	0x01FA8C08 LDR X0, [X0 + 0x598]
	0x01FA8C0C BL 0x1C16CF4
	0x01FA8C10 ADRP X0, 0x2173000
	0x01FA8C14 LDR X0, [X0 + 0x560]
	0x01FA8C18 BL 0x1C16CF4
	0x01FA8C1C ADRP X0, 0x2173000
	0x01FA8C20 LDR X0, [X0 + 0x568]
	0x01FA8C24 BL 0x1C16CF4
	0x01FA8C28 ADRP X0, 0x2173000
	0x01FA8C2C LDR X0, [X0 + 0x570]
	0x01FA8C30 BL 0x1C16CF4
	0x01FA8C34 ADRP X0, 0x214B000
	0x01FA8C38 LDR X0, [X0 + 0x988]
	0x01FA8C3C BL 0x1C16CF4
	0x01FA8C40 ADRP X0, 0x2173000
	0x01FA8C44 LDR X0, [X0 + 0x578]
	0x01FA8C48 BL 0x1C16CF4
	0x01FA8C4C MOVZ W8, 0x1
	0x01FA8C50 STRB W8, [X21 + 0x812]
	0x01FA8C54 LDR X1, [X22]
	0x01FA8C58 MOV X0, X19
	0x01FA8C5C BL 0x21A3AF8
	0x01FA8C60 STR X0, [X19 + 0x40]
	0x01FA8C64 LDR X0, [X20]
	0x01FA8C68 LDR X20, [X19 + 0x28]
	0x01FA8C6C LDR W8, [X0 + 0xE0]
	0x01FA8C70 CBNZ W8, 0x1FA8C78
	0x01FA8C74 BL 0x1C16DFC
	0x01FA8C78 MOV X0, X20
	0x01FA8C7C MOV X1, X31
	0x01FA8C80 BL 0x3C38948
	0x01FA8C84 TBZ X0, 0x0, 0x1FA8CAC
	0x01FA8C88 LDR X0, [X19 + 0x28]
	0x01FA8C8C CBZ X0, 0x1FA8DF8
	0x01FA8C90 MOV X1, X31
	0x01FA8C94 BL 0x3C35CA4
	0x01FA8C98 CBZ X0, 0x1FA8DF8
	0x01FA8C9C MOV W1, W31
	0x01FA8CA0 MOV X2, X31
	0x01FA8CA4 BL 0x3C357B4
	0x01FA8CA8 B 0x1FA8CD8
	0x01FA8CAC ADRP X8, 0x214B000
	0x01FA8CB0 LDR X8, [X8 + 0xA28]
	0x01FA8CB4 ADRP X20, 0x2173000
	0x01FA8CB8 LDR X0, [X8]
	0x01FA8CBC LDR W8, [X0 + 0xE0]
	0x01FA8CC0 LDR X20, [X20 + 0x570]
	0x01FA8CC4 CBNZ W8, 0x1FA8CCC
	0x01FA8CC8 BL 0x1C16DFC
	0x01FA8CCC LDR X0, [X20]
	0x01FA8CD0 MOV X1, X31
	0x01FA8CD4 BL 0x3C0649C
	0x01FA8CD8 LDR X0, [X19 + 0x30]
	0x01FA8CDC CBZ X0, 0x1FA8DF8
	0x01FA8CE0 MOV X1, X31
	0x01FA8CE4 BL 0x3C32ECC
	0x01FA8CE8 CBZ X0, 0x1FA8DF8
	0x01FA8CEC MOV W1, W31
	0x01FA8CF0 MOV X2, X31
	0x01FA8CF4 BL 0x3C357B4
	0x01FA8CF8 LDR X0, [X19 + 0x38]
	0x01FA8CFC CBZ X0, 0x1FA8DF8
	0x01FA8D00 MOV X1, X31
	0x01FA8D04 BL 0x3C32ECC
	0x01FA8D08 CBZ X0, 0x1FA8DF8
	0x01FA8D0C MOV W1, W31
	0x01FA8D10 MOV X2, X31
	0x01FA8D14 BL 0x3C357B4
	0x01FA8D18 LDRB W8, [X19 + 0x48]
	0x01FA8D1C CBZ W8, 0x1FA8D34
	0x01FA8D20 MOV X0, X19
	0x01FA8D24 LDP X20, X19, [X31 + 0x20]
	0x01FA8D28 LDP X22, X21, [X31 + 0x10]
	0x01FA8D2C LDR X30, [X31], #0x30
	0x01FA8D30 B 0x1FA8DFC
	0x01FA8D34 LDR W8, [X19 + 0x4C]
	0x01FA8D38 CMP W8, 0x3
	0x01FA8D3C B.EQ 0x1FA8DD4
	0x01FA8D40 CMP W8, 0x2
	0x01FA8D44 B.EQ 0x1FA8D20
	0x01FA8D48 LDR X8, [X19]
	0x01FA8D4C MOV X0, X19
	0x01FA8D50 LDP X9, X1, [X8 + 0x178]
	0x01FA8D54 BLR X9
	0x01FA8D58 LDR W8, [X19 + 0x4C]
	0x01FA8D5C CMP W8, 0x1
	0x01FA8D60 B.NE 0x1FA8DE8
	0x01FA8D64 ADRP X8, 0x2173000
	0x01FA8D68 LDR X8, [X8 + 0x568]
	0x01FA8D6C MOV X1, X31
	0x01FA8D70 LDR X0, [X8]
	0x01FA8D74 BL 0x3C302C0
	0x01FA8D78 ADRP X8, 0x214B000
	0x01FA8D7C LDR X8, [X8 + 0x988]
	0x01FA8D80 MOV X2, X31
	0x01FA8D84 MOV X20, X0
	0x01FA8D88 LDR X1, [X8]
	0x01FA8D8C BL 0x3226EF8
	0x01FA8D90 TBZ X0, 0x0, 0x1FA8DE8
	0x01FA8D94 ADRP X8, 0x2173000
	0x01FA8D98 LDR X8, [X8 + 0x560]
	0x01FA8D9C MOV X0, X20
	0x01FA8DA0 MOV X2, X31
	0x01FA8DA4 LDR X1, [X8]
	0x01FA8DA8 BL 0x321BA08
	0x01FA8DAC TBZ X0, 0x0, 0x1FA8DB8
	0x01FA8DB0 MOV X0, X19
	0x01FA8DB4 BL 0x1FA8DFC
	0x01FA8DB8 ADRP X8, 0x2173000
	0x01FA8DBC LDR X8, [X8 + 0x578]
	0x01FA8DC0 MOV X0, X20
	0x01FA8DC4 MOV X2, X31
	0x01FA8DC8 LDR X1, [X8]
	0x01FA8DCC BL 0x321BA08
	0x01FA8DD0 TBZ X0, 0x0, 0x1FA8DE8
	0x01FA8DD4 MOV X0, X19
	0x01FA8DD8 LDP X20, X19, [X31 + 0x20]
	0x01FA8DDC LDP X22, X21, [X31 + 0x10]
	0x01FA8DE0 LDR X30, [X31], #0x30
	0x01FA8DE4 B 0x1FA8E50
	0x01FA8DE8 LDP X20, X19, [X31 + 0x20]
	0x01FA8DEC LDP X22, X21, [X31 + 0x10]
	0x01FA8DF0 LDR X30, [X31], #0x30
	0x01FA8DF4 RET

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x2432000
	011 Move X22, 0x2174000
	012 Move X21, 0x214C000
	013 Move W8, [X20+2060]
	014 Move X22, [X22+1344]
	015 Move X21, [X21+1432]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x2174000
	022 Move X0, [X0+72]
	023 Call 0x1C17CF4
	024 Move X0, 0x2174000
	025 Move X0, [X0+1344]
	026 Call 0x1C17CF4
	027 Move X0, 0x2174000
	028 Move X0, [X0+848]
	029 Call 0x1C17CF4
	030 Move X0, 0x214C000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+2060], W8
	035 Move X1, [X22]
	036 Move X0, X19
	037 Call 0x21A4F50, X0
	038 Move [X19+112], X0
	039 Move X0, [X21]
	040 Move X20, [X19+40]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Equality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {59}
	053 Move X8, 0x2174000
	054 Move X8, [X8+72]
	055 Move X0, X19
	056 Move X1, [X8]
	057 Call 0x21A4AF8, X0
	058 Move [X19+40], X0
	059 Move X0, [X21]
	060 Move X20, [X19+32]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X20
	066 Move X1, X31
	067 Move X2, X31
	068 Call Object.op_Equality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {79}
	073 Move X8, 0x2174000
	074 Move X8, [X8+848]
	075 Move X0, X19
	076 Move X1, [X8]
	077 Call 0x21A4F50, X0
	078 Move [X19+32], X0
	079 Move X0, X19
	080 Call MouseTeleport.get_Head, X0
	081 Move X8, [X19+32]
	082 Compare X8, 0
	083 JumpIfEqual {247}
	084 Move X20, X0
	085 Move X0, [X8+32]
	086 Compare X0, 0
	087 JumpIfEqual {247}
	088 Move X1, X31
	089 Call Component.get_transform, X0
	090 Compare X0, 0
	091 JumpIfEqual {247}
	092 Move X1, X31
	093 Call Transform.get_position, X0
	094 Compare X20, 0
	095 JumpIfEqual {247}
	096 Move X0, X20
	097 Move X1, X31
	098 Call Transform.InverseTransformPoint, X0, X1
	099 Move X0, X19
	100 Move [X19+48], S0
	101 Move [X19+56], S1
	102 Move [X19+56], S2
	103 Call MouseTeleport.get_Head, X0
	104 Move X8, [X19+32]
	105 Compare X8, 0
	106 JumpIfEqual {247}
	107 Move X20, X0
	108 Move X0, [X8+40]
	109 Compare X0, 0
	110 JumpIfEqual {247}
	111 Move X1, X31
	112 Call Component.get_transform, X0
	113 Compare X0, 0
	114 JumpIfEqual {247}
	115 Move X1, X31
	116 Call Transform.get_position, X0
	117 Compare X20, 0
	118 JumpIfEqual {247}
	119 Move X0, X20
	120 Move X1, X31
	121 Call Transform.InverseTransformPoint, X0, X1
	122 Move X0, X19
	123 Move [X19+60], S0
	124 Move [X19+68], S1
	125 Move [X19+68], S2
	126 Call MouseTeleport.get_Head, X0
	127 Compare X0, 0
	128 JumpIfEqual {247}
	129 Move X1, X31
	130 Call Transform.get_rotation, X0
	131 Move X0, X31
	132 Call Quaternion.Inverse, X0
	133 Move X8, [X19+32]
	134 Compare X8, 0
	135 JumpIfEqual {247}
	136 Move X0, [X8+32]
	137 Compare X0, 0
	138 JumpIfEqual {247}
	139 Move X1, X31
	140 Move V10, V0
	141 Move V9, V1
	142 Move V8, V2
	143 Move V11, V3
	144 Call Component.get_transform, X0
	145 Compare X0, 0
	146 JumpIfEqual {247}
	147 Move X1, X31
	148 Call Transform.get_rotation, X0
	149 Multiply S4, S11, S0
	150 Multiply S5, S10, S3
	151 Multiply S16, S11, S1
	152 Multiply S17, S9, S3
	153 Multiply S21, S10, S0
	154 Multiply S22, S11, S2
	155 Multiply S23, S11, S3
	156 Multiply S3, S8, S3
	157 Multiply S6, S9, S2
	158 Multiply S7, S8, S1
	159 Multiply S18, S8, S0
	160 Multiply S20, S10, S1
	161 Multiply S1, S9, S1
	162 Add S4, S4, S5
	163 Add S5, S16, S17
	164 Add S3, S22, S3
	165 Subtract S16, S23, S21
	166 Multiply S19, S10, S2
	167 Multiply S0, S9, S0
	168 Multiply S2, S8, S2
	169 Add S4, S6, S4
	170 Add S5, S18, S5
	171 Add S3, S20, S3
	172 Subtract S1, S16, S1
	173 Subtract S4, S4, S7
	174 Subtract S5, S5, S19
	175 Subtract S0, S3, S0
	176 Subtract S1, S1, S2
	177 Move X0, X19
	178 Move [X19+72], S4
	179 Move [X19+80], S5
	180 Move [X19+80], S0
	181 Move [X19+88], S1
	182 Call MouseTeleport.get_Head, X0
	183 Compare X0, 0
	184 JumpIfEqual {247}
	185 Move X1, X31
	186 Call Transform.get_rotation, X0
	187 Move X0, X31
	188 Call Quaternion.Inverse, X0
	189 Move X8, [X19+32]
	190 Compare X8, 0
	191 JumpIfEqual {247}
	192 Move X0, [X8+40]
	193 Compare X0, 0
	194 JumpIfEqual {247}
	195 Move X1, X31
	196 Move V10, V0
	197 Move V9, V1
	198 Move V8, V2
	199 Move V11, V3
	200 Call Component.get_transform, X0
	201 Compare X0, 0
	202 JumpIfEqual {247}
	203 Move X1, X31
	204 Call Transform.get_rotation, X0
	205 Multiply S4, S11, S0
	206 Multiply S5, S10, S3
	207 Multiply S16, S11, S1
	208 Multiply S17, S9, S3
	209 Multiply S21, S10, S0
	210 Multiply S22, S11, S2
	211 Multiply S23, S11, S3
	212 Multiply S3, S8, S3
	213 Multiply S6, S9, S2
	214 Multiply S7, S8, S1
	215 Multiply S18, S8, S0
	216 Multiply S20, S10, S1
	217 Multiply S1, S9, S1
	218 Add S4, S4, S5
	219 Add S5, S16, S17
	220 Add S3, S22, S3
	221 Subtract S16, S23, S21
	222 Multiply S19, S10, S2
	223 Multiply S0, S9, S0
	224 Multiply S2, S8, S2
	225 Add S4, S6, S4
	226 Add S5, S18, S5
	227 Add S3, S20, S3
	228 Subtract S1, S16, S1
	229 Subtract S4, S4, S7
	230 Subtract S5, S5, S19
	231 Subtract S0, S3, S0
	232 Subtract S1, S1, S2
	233 Move [X19+88], S4
	234 Move [X19+96], S5
	235 Move [X19+96], S0
	236 Move [X19+104], S1
	237 Move X20, [X31+64]
	238 Move X19, [X31+72]
	239 Move X22, [X31+48]
	240 Move X21, [X31+56]
	241 Move X30, [X31+32]
	242 Move D9, [X31+16]
	243 Move D8, [X31+24]
	244 Move D11, [X31+80]
	245 Move D10, [X31+88]
	246 Return 
	247 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x01FA8DF8 BL 0x1C16F20
	0x01FA8DFC STP X30, X19, [X31 - 0x10]!
	0x01FA8E00 MOV X1, X31
	0x01FA8E04 MOV X19, X0
	0x01FA8E08 BL 0x3C32ECC
	0x01FA8E0C CBZ X0, 0x1FA8E4C
	0x01FA8E10 MOV W1, W31
	0x01FA8E14 MOV X2, X31
	0x01FA8E18 BL 0x3C357B4
	0x01FA8E1C LDR X0, [X19 + 0x30]
	0x01FA8E20 CBZ X0, 0x1FA8E4C
	0x01FA8E24 MOV X1, X31
	0x01FA8E28 BL 0x3C32ECC
	0x01FA8E2C CBZ X0, 0x1FA8E4C
	0x01FA8E30 MOVZ W1, 0x1
	0x01FA8E34 MOV X2, X31
	0x01FA8E38 BL 0x3C357B4
	0x01FA8E3C BL 0x1FA90D8
	0x01FA8E40 MOV X0, X19
	0x01FA8E44 LDP X30, X19, [X31], #0x10
	0x01FA8E48 B 0x1FA913C
	0x01FA8E4C BL 0x1C16F20
	0x01FA8E50 STP X30, X19, [X31 - 0x10]!
	0x01FA8E54 MOV X1, X31
	0x01FA8E58 MOV X19, X0
	0x01FA8E5C BL 0x3C32ECC
	0x01FA8E60 CBZ X0, 0x1FA8EA0
	0x01FA8E64 MOV W1, W31
	0x01FA8E68 MOV X2, X31
	0x01FA8E6C BL 0x3C357B4
	0x01FA8E70 LDR X0, [X19 + 0x38]
	0x01FA8E74 CBZ X0, 0x1FA8EA0
	0x01FA8E78 MOV X1, X31
	0x01FA8E7C BL 0x3C32ECC
	0x01FA8E80 CBZ X0, 0x1FA8EA0
	0x01FA8E84 MOVZ W1, 0x1
	0x01FA8E88 MOV X2, X31
	0x01FA8E8C BL 0x3C357B4
	0x01FA8E90 BL 0x1FA9220
	0x01FA8E94 MOV X0, X19
	0x01FA8E98 LDP X30, X19, [X31], #0x10
	0x01FA8E9C B 0x1FA913C
	0x01FA8EA0 BL 0x1C16F20
	0x01FA8EA4 LDR W8, [X0 + 0x4C]
	0x01FA8EA8 CBZ W8, 0x1FA8EB0
	0x01FA8EAC RET
	0x01FA8EB0 MOVZ W8, 0x1
	0x01FA8EB4 STR W8, [X0 + 0x4C]
	0x01FA8EB8 RET
	0x01FA8EBC STR X30, [X31 - 0x30]!
	0x01FA8EC0 STP X22, X21, [X31 + 0x10]
	0x01FA8EC4 STP X20, X19, [X31 + 0x20]
	0x01FA8EC8 ADRP X20, 0x2431000
	0x01FA8ECC ADRP X21, 0x2172000
	0x01FA8ED0 LDRB W8, [X20 + 0x813]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2432000
	005 Move W8, [X20+2061]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2174000
	012 Move X0, [X0+1352]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2061], W8
	016 Move W8, [X19+104]
	017 Compare W8, 0
	018 JumpIfEqual {53}
	019 Move X0, [X19+40]
	020 Compare X0, 0
	021 JumpIfEqual {70}
	022 Move X1, X31
	023 Call Component.get_transform, X0
	024 Move X20, X0
	025 Move X0, X19
	026 Call MouseTeleport.get_Head, X0
	027 Compare X0, 0
	028 JumpIfEqual {70}
	029 Move X1, X31
	030 Call Transform.get_position, X0
	031 Compare X20, 0
	032 JumpIfEqual {70}
	033 Move X0, X20
	034 Move X1, X31
	035 Call Transform.set_position, X0, X1
	036 Move X0, [X19+40]
	037 Compare X0, 0
	038 JumpIfEqual {70}
	039 Move X1, X31
	040 Call Component.get_transform, X0
	041 Move X20, X0
	042 Move X0, X19
	043 Call MouseTeleport.get_Head, X0
	044 Compare X0, 0
	045 JumpIfEqual {70}
	046 Move X1, X31
	047 Call Transform.get_rotation, X0
	048 Compare X20, 0
	049 JumpIfEqual {70}
	050 Move X0, X20
	051 Move X1, X31
	052 Call Transform.set_rotation, X0, X1
	053 Move X8, [X19+32]
	054 Compare X8, 0
	055 JumpIfEqual {70}
	056 Move X0, [X8+32]
	057 Move [X19+120], X0
	058 Move [X19+128], X0
	059 Compare X0, 0
	060 JumpIfEqual {70}
	061 Move X8, 0x2174000
	062 Move X8, [X8+1352]
	063 Move X1, [X8]
	064 Call 0x21A4AF8, X0
	065 Move [X19+136], X0
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Return 
	070 Call 0x1C17F20

Method: System.Boolean CheckGrab(UnityEngine.Ray mouseRay)

Disassembly:
	0x01FA8ED4 LDR X21, [X21 + 0x4C0]
	0x01FA8ED8 MOV X19, X0
	0x01FA8EDC TBNZ X8, 0x0, 0x1FA8F18
	0x01FA8EE0 ADRP X0, 0x2172000
	0x01FA8EE4 LDR X0, [X0 + 0x878]
	0x01FA8EE8 BL 0x1C16CF4
	0x01FA8EEC ADRP X0, 0x2172000
	0x01FA8EF0 LDR X0, [X0 + 0x4C0]
	0x01FA8EF4 BL 0x1C16CF4
	0x01FA8EF8 ADRP X0, 0x2173000
	0x01FA8EFC LDR X0, [X0 + 0x560]
	0x01FA8F00 BL 0x1C16CF4
	0x01FA8F04 ADRP X0, 0x2173000
	0x01FA8F08 LDR X0, [X0 + 0x578]
	0x01FA8F0C BL 0x1C16CF4
	0x01FA8F10 MOVZ W8, 0x1
	0x01FA8F14 STRB W8, [X20 + 0x813]
	0x01FA8F18 MOV X0, X31
	0x01FA8F1C BL 0x3C0E0B0
	0x01FA8F20 MOV W20, W0
	0x01FA8F24 MOV X0, X31
	0x01FA8F28 BL 0x3C0E0D8
	0x01FA8F2C SUB W8, W20, 0xA
	0x01FA8F30 SUB W9, W0, 0xA
	0x01FA8F34 SCVTF S2, W8
	0x01FA8F38 SCVTF S3, W9
	0x01FA8F3C FMOV S0, 5
	0x01FA8F40 FMOV S1, 5
	0x01FA8F44 MOV X0, X31
	0x01FA8F48 BL 0x3C6E7CC
	0x01FA8F4C LDR X0, [X21]
	0x01FA8F50 LDR W8, [X0 + 0xE0]
	0x01FA8F54 CBNZ W8, 0x1FA8F5C
	0x01FA8F58 BL 0x1C16DFC
	0x01FA8F5C MOV X0, X31
	0x01FA8F60 BL 0x3C6748C
	0x01FA8F64 CBZ X0, 0x1FA90D4
	0x01FA8F68 ADRP X22, 0x2172000
	0x01FA8F6C LDR X22, [X22 + 0x878]
	0x01FA8F70 MOV X1, X31
	0x01FA8F74 BL 0x3C6F104
	0x01FA8F78 LDR X21, [X22]
	0x01FA8F7C MOV X20, X0
	0x01FA8F80 LDR X8, [X21 + 0x38]
	0x01FA8F84 CBNZ X8, 0x1FA8F94
	0x01FA8F88 MOV X0, X21
	0x01FA8F8C BL 0x1C5C6E0
	0x01FA8F90 LDR X8, [X21 + 0x38]
	0x01FA8F94 LDR X0, [X8 + 0x10]
	0x01FA8F98 LDRB W8, [X0 + 0x135]
	0x01FA8F9C TBNZ X8, 0x0, 0x1FA8FA4
	0x01FA8FA0 BL 0x1C5C684
	0x01FA8FA4 LDR W8, [X0 + 0xE0]
	0x01FA8FA8 CBNZ W8, 0x1FA8FB0
	0x01FA8FAC BL 0x1C16DFC
	0x01FA8FB0 LDR X8, [X21 + 0x38]
	0x01FA8FB4 LDR X0, [X8 + 0x10]
	0x01FA8FB8 LDRB W8, [X0 + 0x135]
	0x01FA8FBC TBNZ X8, 0x0, 0x1FA8FC4
	0x01FA8FC0 BL 0x1C5C684
	0x01FA8FC4 LDR X8, [X0 + 0xB8]
	0x01FA8FC8 MOV X0, X20
	0x01FA8FCC MOV X2, X31
	0x01FA8FD0 LDR X1, [X8]
	0x01FA8FD4 BL 0x3C6E55C
	0x01FA8FD8 LDR X20, [X22]
	0x01FA8FDC LDR X8, [X20 + 0x38]
	0x01FA8FE0 CBNZ X8, 0x1FA8FF0
	0x01FA8FE4 MOV X0, X20
	0x01FA8FE8 BL 0x1C5C6E0
	0x01FA8FEC LDR X8, [X20 + 0x38]
	0x01FA8FF0 LDR X0, [X8 + 0x10]
	0x01FA8FF4 LDRB W8, [X0 + 0x135]
	0x01FA8FF8 TBNZ X8, 0x0, 0x1FA9000
	0x01FA8FFC BL 0x1C5C684
	0x01FA9000 LDR W8, [X0 + 0xE0]
	0x01FA9004 CBNZ W8, 0x1FA900C
	0x01FA9008 BL 0x1C16DFC
	0x01FA900C LDR X8, [X20 + 0x38]
	0x01FA9010 ADRP X20, 0x2172000
	0x01FA9014 LDR X0, [X8 + 0x10]
	0x01FA9018 LDRB W8, [X0 + 0x135]
	0x01FA901C LDR X20, [X20 + 0x560]
	0x01FA9020 TBNZ X8, 0x0, 0x1FA9028
	0x01FA9024 BL 0x1C5C684
	0x01FA9028 LDR X8, [X0 + 0xB8]
	0x01FA902C LDR X0, [X20]
	0x01FA9030 MOV X2, X31
	0x01FA9034 LDR X1, [X8]
	0x01FA9038 BL 0x3C6D51C
	0x01FA903C TBZ X0, 0x0, 0x1FA9048
	0x01FA9040 MOV X0, X19
	0x01FA9044 BL 0x1FA8DFC
	0x01FA9048 LDR X20, [X22]
	0x01FA904C LDR X8, [X20 + 0x38]
	0x01FA9050 CBNZ X8, 0x1FA9060
	0x01FA9054 MOV X0, X20
	0x01FA9058 BL 0x1C5C6E0
	0x01FA905C LDR X8, [X20 + 0x38]
	0x01FA9060 LDR X0, [X8 + 0x10]
	0x01FA9064 LDRB W8, [X0 + 0x135]
	0x01FA9068 TBNZ X8, 0x0, 0x1FA9070
	0x01FA906C BL 0x1C5C684
	0x01FA9070 LDR W8, [X0 + 0xE0]
	0x01FA9074 CBNZ W8, 0x1FA907C
	0x01FA9078 BL 0x1C16DFC
	0x01FA907C LDR X8, [X20 + 0x38]
	0x01FA9080 ADRP X20, 0x2172000
	0x01FA9084 LDR X0, [X8 + 0x10]
	0x01FA9088 LDRB W8, [X0 + 0x135]
	0x01FA908C LDR X20, [X20 + 0x578]
	0x01FA9090 TBNZ X8, 0x0, 0x1FA9098
	0x01FA9094 BL 0x1C5C684
	0x01FA9098 LDR X8, [X0 + 0xB8]
	0x01FA909C LDR X0, [X20]
	0x01FA90A0 MOV X2, X31
	0x01FA90A4 LDR X1, [X8]
	0x01FA90A8 BL 0x3C6D51C
	0x01FA90AC TBZ X0, 0x0, 0x1FA90B8
	0x01FA90B0 MOV X0, X19
	0x01FA90B4 BL 0x1FA8E50
	0x01FA90B8 MOV X0, X31
	0x01FA90BC BL 0x3C6E780
	0x01FA90C0 LDP X20, X19, [X31 + 0x20]
	0x01FA90C4 LDP X22, X21, [X31 + 0x10]
	0x01FA90C8 MOV X0, X31
	0x01FA90CC LDR X30, [X31], #0x30
	0x01FA90D0 B 0x3C6ED80
	0x01FA90D4 BL 0x1C16F20
	0x01FA90D8 STP X30, X21, [X31 - 0x20]!
	0x01FA90DC STP X20, X19, [X31 + 0x10]
	0x01FA90E0 ADRP X19, 0x2430000
	0x01FA90E4 ADRP X20, 0x2172000
	0x01FA90E8 ADRP X21, 0x2172000
	0x01FA90EC LDRB W8, [X19 + 0x816]
	0x01FA90F0 LDR X20, [X20 + 0x568]
	0x01FA90F4 LDR X21, [X21 + 0x560]
	0x01FA90F8 TBNZ X8, 0x0, 0x1FA911C
	0x01FA90FC ADRP X0, 0x2172000
	0x01FA9100 LDR X0, [X0 + 0x560]
	0x01FA9104 BL 0x1C16CF4
	0x01FA9108 ADRP X0, 0x2172000
	0x01FA910C LDR X0, [X0 + 0x568]
	0x01FA9110 BL 0x1C16CF4
	0x01FA9114 MOVZ W8, 0x1
	0x01FA9118 STRB W8, [X19 + 0x816]
	0x01FA911C LDR X0, [X20]
	0x01FA9120 LDR X1, [X21]
	0x01FA9124 MOV X2, X31
	0x01FA9128 BL 0x3C301EC
	0x01FA912C LDP X20, X19, [X31 + 0x10]
	0x01FA9130 MOV X0, X31
	0x01FA9134 LDP X30, X21, [X31], #0x20
	0x01FA9138 B 0x3C303A4
	0x01FA913C STP X30, X21, [X31 - 0x20]!
	0x01FA9140 STP X20, X19, [X31 + 0x10]
	0x01FA9144 ADRP X20, 0x2430000
	0x01FA9148 ADRP X21, 0x214A000
	0x01FA914C LDRB W8, [X20 + 0x814]
	0x01FA9150 LDR X21, [X21 + 0x598]
	0x01FA9154 MOV X19, X0
	0x01FA9158 TBNZ X8, 0x0, 0x1FA9170
	0x01FA915C ADRP X0, 0x214A000
	0x01FA9160 LDR X0, [X0 + 0x598]
	0x01FA9164 BL 0x1C16CF4
	0x01FA9168 MOVZ W8, 0x1
	0x01FA916C STRB W8, [X20 + 0x814]
	0x01FA9170 LDR X0, [X21]
	0x01FA9174 LDR X20, [X19 + 0x28]
	0x01FA9178 LDR W8, [X0 + 0xE0]
	0x01FA917C CBNZ W8, 0x1FA9184
	0x01FA9180 BL 0x1C16DFC
	0x01FA9184 MOV X0, X20
	0x01FA9188 MOV X1, X31
	0x01FA918C BL 0x3C38948
	0x01FA9190 TBZ X0, 0x0, 0x1FA91B4
	0x01FA9194 LDR X0, [X19 + 0x28]
	0x01FA9198 CBZ X0, 0x1FA921C
	0x01FA919C MOV X1, X31
	0x01FA91A0 BL 0x3C35CA4
	0x01FA91A4 CBZ X0, 0x1FA921C
	0x01FA91A8 MOVZ W1, 0x1
	0x01FA91AC MOV X2, X31
	0x01FA91B0 BL 0x3C357B4
	0x01FA91B4 LDR X0, [X19 + 0x20]
	0x01FA91B8 CBZ X0, 0x1FA91C4
	0x01FA91BC MOV X1, X31
	0x01FA91C0 BL 0x3C45DE8
	0x01FA91C4 LDR X0, [X21]
	0x01FA91C8 LDR X20, [X19 + 0x40]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+112], D13
	003 Move [X31+120], D12
	004 Move [X31+128], D11
	005 Move [X31+136], D10
	006 Move [X31+144], D9
	007 Move [X31+152], D8
	008 Move [X31+160], X30
	009 Move [X31+168], X23
	010 Move [X31+176], X22
	011 Move [X31+184], X21
	012 Move [X31+192], X20
	013 Move [X31+200], X19
	014 Move X21, 0x2432000
	015 Move W8, [X21+2062]
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x2174000
	023 Move X0, [X0+992]
	024 Call 0x1C17CF4
	025 Move X0, 0x214C000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move X0, 0x214C000
	029 Move X0, [X0+1528]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2062], W8
	033 Move X21, 0x2432000
	034 Move W8, [X21+2071]
	035 NotImplemented "Instruction MOVI not yet implemented."
	036 Move [X31+92], V0
	037 Move [X31+64], V0
	038 Move [X31+72], V0
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x2174000
	042 Move X0, [X0+1320]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X21+2071], W8
	046 Move X22, 0x2174000
	047 Move X22, [X22+1320]
	048 Move X8, [X22]
	049 Move X8, [X8+184]
	050 Move X8, [X8]
	051 Compare X8, 0
	052 JumpIfEqual {242}
	053 Move X0, [X8+440]
	054 Compare X0, 0
	055 JumpIfEqual {242}
	056 Move X1, X31
	057 Call ButtonControl.get_isPressed, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {227}
	062 Move W8, [X21+2071]
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x2174000
	066 Move X0, [X0+1320]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X21+2071], W8
	070 Move X8, [X22]
	071 Move X8, [X8+184]
	072 Move X8, [X8]
	073 Compare X8, 0
	074 JumpIfEqual {242}
	075 Move X0, [X8+424]
	076 Compare X0, 0
	077 JumpIfEqual {242}
	078 Move X1, X31
	079 Call ButtonControl.get_isPressed, X0
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {227}
	084 Move X9, 0x214C000
	085 Move V0, [X20]
	086 Move X8, [X20+16]
	087 Move X9, [X9+1528]
	088 Move [X31+2], V0
	089 Move [X31+48], X8
	090 Move X0, [X9]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X8, [X31+48]
	096 Move V0, [X31+2]
	097 Add X0, X31, 0
	098 Add X1, X31, 64
	099 Move [X31+16], X8
	100 Move W8, 0x42200000
	101 Move [X31], V0
	102 Move S0, W8
	103 Move X2, X31
	104 Call Physics.Raycast, X0, X1, V0
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {227}
	109 Move X23, 0x214B000
	110 Move X23, [X23+1432]
	111 Move X21, [X19+144]
	112 Move X0, [X23]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X21
	118 Move X1, X31
	119 Move X2, X31
	120 Call Object.op_Equality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {227}
	125 Add X0, X31, 64
	126 Move X1, X31
	127 Call RaycastHit.get_collider, X0
	128 Compare X0, 0
	129 JumpIfEqual {242}
	130 Move X8, 0x2173000
	131 Move X8, [X8+992]
	132 Move X1, [X8]
	133 Call 0x21A4F50, X0
	134 Move X8, [X23]
	135 Move X22, X0
	136 Move W9, [X8+224]
	137 Compare W9, 0
	138 JumpIfNotEqual {141}
	139 Move X0, X8
	140 Call 0x1C17DFC
	141 Move X0, X22
	142 Move X1, X31
	143 Call Object.op_Implicit, X0
	144 Move X21, X31
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {155}
	149 Compare X22, 0
	150 JumpIfEqual {242}
	151 Move X0, X22
	152 Move X1, X31
	153 Call Component.get_gameObject, X0
	154 Move X21, X0
	155 Move X0, [X23]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move X0, X21
	161 Move X1, X31
	162 Move X2, X31
	163 Call Object.op_Inequality, X0, X1
	164 Move TEMP, X0
	165 And TEMP, TEMP, 1
	166 Compare TEMP, 1
	167 JumpIfNotEqual {227}
	168 Move X8, [X19+136]
	169 Move [X19+144], X21
	170 Compare X8, 0
	171 JumpIfEqual {242}
	172 Move [X8+156], W31
	173 Move X0, [X19+120]
	174 Compare X0, 0
	175 JumpIfEqual {242}
	176 Move X1, X31
	177 Call Component.get_transform, X0
	178 Move X21, X0
	179 Add X0, X31, 64
	180 Move X1, X31
	181 Call RaycastHit.get_point, X0
	182 Compare X21, 0
	183 JumpIfEqual {242}
	184 Move X0, X21
	185 Move X1, X31
	186 Call Transform.set_position, X0, X1
	187 Move X8, [X19+120]
	188 Compare X8, 0
	189 JumpIfEqual {242}
	190 Move W21, 1
	191 Add X0, X31, 64
	192 Move X1, X31
	193 Move [X8+60], W21
	194 Call RaycastHit.get_point, X0
	195 Move X22, 0x2430000
	196 Move S11, [X20]
	197 Move S12, [X20+4]
	198 Move W8, [X22+1924]
	199 Move V13, [X20+8]
	200 Move V8, V0
	201 Move V9, V1
	202 Move V10, V2
	203 Compare W8, 0
	204 JumpIfNotEqual {209}
	205 Move X0, 0x214B000
	206 Move X0, [X0+1448]
	207 Call 0x1C17CF4
	208 Move [X22+1924], W21
	209 Move X8, 0x214B000
	210 Move X8, [X8+1448]
	211 Subtract S11, S8, S11
	212 Subtract S9, S9, S12
	213 Subtract S8, S10, S13
	214 Move X0, [X8]
	215 Move W8, [X0+224]
	216 Compare W8, 0
	217 JumpIfNotEqual {219}
	218 Call 0x1C17DFC
	219 Multiply S0, S11, S11
	220 Multiply S1, S9, S9
	221 Multiply S2, S8, S8
	222 Add S0, S0, S1
	223 Add S0, S0, S2
	224 NotImplemented "Instruction FSQRT not yet implemented."
	225 Move W0, 1
	226 Move [X19+160], S0
	227 Move W0, W31
	228 Move X20, [X31+192]
	229 Move X19, [X31+200]
	230 Move X22, [X31+176]
	231 Move X21, [X31+184]
	232 Move X30, [X31+160]
	233 Move X23, [X31+168]
	234 Move D9, [X31+144]
	235 Move D8, [X31+152]
	236 Move D11, [X31+128]
	237 Move D10, [X31+136]
	238 Move D13, [X31+112]
	239 Move D12, [X31+120]
	240 Add X31, X31, 208
	241 Return X0
	242 Call 0x1C17F20

Method: System.Void CheckUngrab()

Disassembly:
	0x01FA91CC LDR W8, [X0 + 0xE0]
	0x01FA91D0 CBNZ W8, 0x1FA91D8
	0x01FA91D4 BL 0x1C16DFC
	0x01FA91D8 MOV X0, X20
	0x01FA91DC MOV X1, X31
	0x01FA91E0 BL 0x3C38948
	0x01FA91E4 TBZ X0, 0x0, 0x1FA9208
	0x01FA91E8 LDR X0, [X19 + 0x40]
	0x01FA91EC CBZ X0, 0x1FA921C
	0x01FA91F0 MOV X1, X31
	0x01FA91F4 BL 0x3C32ECC
	0x01FA91F8 CBZ X0, 0x1FA921C
	0x01FA91FC MOV W1, W31
	0x01FA9200 MOV X2, X31
	0x01FA9204 BL 0x3C357B4
	0x01FA9208 MOVZ W8, 0x1
	0x01FA920C STRB W8, [X19 + 0x49]
	0x01FA9210 LDP X20, X19, [X31 + 0x10]
	0x01FA9214 LDP X30, X21, [X31], #0x20
	0x01FA9218 RET
	0x01FA921C BL 0x1C16F20
	0x01FA9220 STP X30, X21, [X31 - 0x20]!
	0x01FA9224 STP X20, X19, [X31 + 0x10]
	0x01FA9228 ADRP X19, 0x2430000
	0x01FA922C ADRP X20, 0x2172000
	0x01FA9230 ADRP X21, 0x2172000
	0x01FA9234 LDRB W8, [X19 + 0x815]
	0x01FA9238 LDR X20, [X20 + 0x568]
	0x01FA923C LDR X21, [X21 + 0x578]
	0x01FA9240 TBNZ X8, 0x0, 0x1FA9264
	0x01FA9244 ADRP X0, 0x2172000
	0x01FA9248 LDR X0, [X0 + 0x568]
	0x01FA924C BL 0x1C16CF4
	0x01FA9250 ADRP X0, 0x2172000
	0x01FA9254 LDR X0, [X0 + 0x578]
	0x01FA9258 BL 0x1C16CF4
	0x01FA925C MOVZ W8, 0x1
	0x01FA9260 STRB W8, [X19 + 0x815]
	0x01FA9264 LDR X0, [X20]
	0x01FA9268 LDR X1, [X21]
	0x01FA926C MOV X2, X31
	0x01FA9270 BL 0x3C301EC
	0x01FA9274 LDP X20, X19, [X31 + 0x10]
	0x01FA9278 MOV X0, X31
	0x01FA927C LDP X30, X21, [X31], #0x20
	0x01FA9280 B 0x3C303A4
	0x01FA9284 MOVZ W8, 0x1
	0x01FA9288 MOV X1, X31
	0x01FA928C STRB W8, [X0 + 0x48]
	0x01FA9290 B 0x3C36C30
	0x01FA9294 SUB X31, X31, 0x90
	0x01FA9298 STR X30, [X31 + 0x50]
	0x01FA929C STP X24, X23, [X31 + 0x60]
	0x01FA92A0 STP X22, X21, [X31 + 0x70]
	0x01FA92A4 STP X20, X19, [X31 + 0x80]
	0x01FA92A8 LDR X8, [X3 + 0x38]
	0x01FA92AC MOV X20, X3
	0x01FA92B0 MOV X22, X2
	0x01FA92B4 MOV X19, X1
	0x01FA92B8 MOV X21, X0
	0x01FA92BC CBNZ X8, 0x1FA92C8
	0x01FA92C0 MOV X0, X20
	0x01FA92C4 BL 0x1C5C6E0
	0x01FA92C8 STR X31, [X31 + 0x58]
	0x01FA92CC MOV X0, X31
	0x01FA92D0 BL 0x33F6C70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2431000
	006 Move W8, [X20+2063]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x214B000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2063], W8
	017 Move X20, 0x2431000
	018 Move W8, [X20+2071]
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x2173000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2071], W8
	026 Move X21, 0x2173000
	027 Move X21, [X21+1320]
	028 Move X8, [X21]
	029 Move X8, [X8+184]
	030 Move X8, [X8]
	031 Compare X8, 0
	032 JumpIfEqual {90}
	033 Move X0, [X8+424]
	034 Compare X0, 0
	035 JumpIfEqual {90}
	036 Move X1, X31
	037 Call ButtonControl.get_wasReleasedThisFrame, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {85}
	042 Move W8, [X20+2071]
	043 Compare W8, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0x2173000
	046 Move X0, [X0+1320]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+2071], W8
	050 Move X8, [X21]
	051 Move X8, [X8+184]
	052 Move X8, [X8]
	053 Compare X8, 0
	054 JumpIfEqual {90}
	055 Move X0, [X8+424]
	056 Compare X0, 0
	057 JumpIfEqual {90}
	058 Move X1, X31
	059 Call ButtonControl.get_isPressed, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {85}
	064 Move X8, 0x214B000
	065 Move X8, [X8+1432]
	066 Move X20, [X19+144]
	067 Move X0, [X8]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Inequality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {85}
	080 Move X8, [X19+120]
	081 Move [X19+144], X31
	082 Compare X8, 0
	083 JumpIfEqual {90}
	084 Move [X8+60], W31
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Return 
	090 Call 0x1C17F20

Method: UnityEngine.Vector3 SearchTarget(UnityEngine.Ray mouseRay)

Disassembly:
	0x01FA92D4 TBZ X0, 0x0, 0x1FA9330
	0x01FA92D8 LDR X0, [X20 + 0x20]
	0x01FA92DC LDRB W8, [X0 + 0x135]
	0x01FA92E0 TBNZ X8, 0x0, 0x1FA92E8
	0x01FA92E4 BL 0x1C5C684
	0x01FA92E8 LDR X8, [X0 + 0xC0]
	0x01FA92EC LDR X0, [X8 + 0x10]
	0x01FA92F0 LDRB W8, [X0 + 0x135]
	0x01FA92F4 TBNZ X8, 0x0, 0x1FA92FC
	0x01FA92F8 BL 0x1C5C684
	0x01FA92FC LDR W8, [X0 + 0xE0]
	0x01FA9300 CBNZ W8, 0x1FA9308
	0x01FA9304 BL 0x1C16DFC
	0x01FA9308 LDR X0, [X20 + 0x20]
	0x01FA930C LDRB W8, [X0 + 0x135]
	0x01FA9310 TBNZ X8, 0x0, 0x1FA9318
	0x01FA9314 BL 0x1C5C684
	0x01FA9318 LDR X8, [X0 + 0xC0]
	0x01FA931C LDR X1, [X8 + 0x8]
	0x01FA9320 MOV X0, X21
	0x01FA9324 BL 0x24DA978
	0x01FA9328 MOV X1, X0
	0x01FA932C B 0x1FA9334
	0x01FA9330 MOV X1, X31
	0x01FA9334 ADD X2, X31, 0x58
	0x01FA9338 MOV X0, X21
	0x01FA933C MOV X3, X31
	0x01FA9340 BL 0x32C4B94
	0x01FA9344 LDR X8, [X21]
	0x01FA9348 MOV X23, X0
	0x01FA934C CBNZ X8, 0x1FA93DC
	0x01FA9350 LDR X0, [X20 + 0x20]
	0x01FA9354 LDRB W8, [X0 + 0x135]
	0x01FA9358 TBNZ X8, 0x0, 0x1FA9360
	0x01FA935C BL 0x1C5C684
	0x01FA9360 LDR X8, [X0 + 0xC0]
	0x01FA9364 LDR X0, [X8 + 0x10]
	0x01FA9368 LDRB W8, [X0 + 0x135]
	0x01FA936C TBNZ X8, 0x0, 0x1FA9374
	0x01FA9370 BL 0x1C5C684
	0x01FA9374 LDR W8, [X0 + 0xE0]
	0x01FA9378 CBNZ W8, 0x1FA9380
	0x01FA937C BL 0x1C16DFC
	0x01FA9380 LDR X0, [X20 + 0x20]
	0x01FA9384 LDRB W8, [X0 + 0x135]
	0x01FA9388 TBNZ X8, 0x0, 0x1FA9390
	0x01FA938C BL 0x1C5C684
	0x01FA9390 LDR X8, [X0 + 0xC0]
	0x01FA9394 LDR X1, [X8 + 0x8]
	0x01FA9398 MOV X0, X21
	0x01FA939C BL 0x24DA978
	0x01FA93A0 MOV X24, X0
	0x01FA93A4 ADD X0, X31, 0x0
	0x01FA93A8 MOVZ W2, 0x50
	0x01FA93AC MOV X1, X22
	0x01FA93B0 BL 0x3EB1AC0
	0x01FA93B4 LDR X8, [X20 + 0x38]
	0x01FA93B8 LDR X0, [X8 + 0x8]
	0x01FA93BC ADD X1, X31, 0x0
	0x01FA93C0 BL 0x1C16E04
	0x01FA93C4 MOV X1, X0
	0x01FA93C8 LDR X2, [X31 + 0x58]
	0x01FA93CC MOV X0, X21
	0x01FA93D0 MOV X3, X24
	0x01FA93D4 MOV X4, X31
	0x01FA93D8 BL 0x32C4EF8
	0x01FA93DC LDR X8, [X20 + 0x38]
	0x01FA93E0 LDR X2, [X8 + 0x20]
	0x01FA93E4 MOV X0, X19
	0x01FA93E8 MOV X1, X23
	0x01FA93EC BL 0x29989AC
	0x01FA93F0 LDP X20, X19, [X31 + 0x80]
	0x01FA93F4 LDP X22, X21, [X31 + 0x70]
	0x01FA93F8 LDP X24, X23, [X31 + 0x60]
	0x01FA93FC LDR X30, [X31 + 0x50]
	0x01FA9400 ADD X31, X31, 0x90
	0x01FA9404 RET
	0x01FA9408 B 0x1FA9424
	0x01FA940C B 0x1FA9424
	0x01FA9410 B 0x1FA9424
	0x01FA9414 B 0x1FA9424
	0x01FA9418 B 0x1FA9424
	0x01FA941C B 0x1FA9424
	0x01FA9420 B 0x1FA9424
	0x01FA9424 MOV X19, X0
	0x01FA9428 CMP W1, 0x1
	0x01FA942C B.NE 0x1FA949C
	0x01FA9430 MOV X0, X19
	0x01FA9434 BL 0x3EB1AD0
	0x01FA9438 MOV X19, X0
	0x01FA943C ADRP X0, 0x214A000
	0x01FA9440 LDR X0, [X0 + 0x7D0]
	0x01FA9444 BL 0x1C16D08
	0x01FA9448 LDR X8, [X19]
	0x01FA944C LDR X1, [X8]
	0x01FA9450 BL 0x1C17270
	0x01FA9454 TBZ X0, 0x0, 0x1FA9474
	0x01FA9458 LDR X19, [X19]
	0x01FA945C BL 0x3EB1AE0
	0x01FA9460 MOV X0, X19
	0x01FA9464 MOV X1, X31
	0x01FA9468 MOV X2, X31
	0x01FA946C BL 0x32C4498
	0x01FA9470 B 0x1FA93F0
	0x01FA9474 MOVZ W0, 0x8
	0x01FA9478 BL 0x3EB1AF0
	0x01FA947C LDR X8, [X19]
	0x01FA9480 STR X8, [X0]
	0x01FA9484 ADRP X1, 0x1F0B000
	0x01FA9488 ADD X1, X1, 0xE58
	0x01FA948C MOV X2, X31
	0x01FA9490 BL 0x3EB1B00
	0x01FA9494 MOV X19, X0
	0x01FA9498 BL 0x3EB1AE0
	0x01FA949C MOV X0, X19
	0x01FA94A0 BL 0x1D2C690
	0x01FA94A4 BL 0x1990590
	0x01FA94A8 SUB X31, X31, 0x40
	0x01FA94AC STR X30, [X31 + 0x20]
	0x01FA94B0 STP X20, X19, [X31 + 0x30]
	0x01FA94B4 LDR X8, [X2 + 0x38]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+144], D13
	003 Move [X31+152], D12
	004 Move [X31+160], D11
	005 Move [X31+168], D10
	006 Move [X31+176], D9
	007 Move [X31+184], D8
	008 Move [X31+192], X30
	009 Move [X31+200], X21
	010 Move [X31+208], X20
	011 Move [X31+216], X19
	012 Move X21, 0x2431000
	013 Move W8, [X21+2064]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2173000
	021 Move X0, [X0+1360]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2064], W8
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Move [X31+76], V0
	027 Move [X31+48], V0
	028 Move [X31+56], V0
	029 Move X0, [X19+136]
	030 Compare X0, 0
	031 JumpIfEqual {144}
	032 Move S8, [X20]
	033 Move S9, [X20+4]
	034 Move S10, [X20+8]
	035 Move S11, [X20+12]
	036 Move S12, [X20+16]
	037 Move S13, [X20+20]
	038 Add X1, X31, 48
	039 Move V0, V8
	040 Move V1, V9
	041 Move V2, V10
	042 Move V3, V11
	043 Move V4, V12
	044 Move V5, V13
	045 Call RayBeamer.BeamCast, X0, X1, X2, X3
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {81}
	050 Add X0, X31, 48
	051 Move X1, X31
	052 Call RaycastHit.get_point, X0
	053 Move X19, [X19+152]
	054 Move V8, V0
	055 Move V9, V1
	056 Move V10, V2
	057 Compare X19, 0
	058 JumpIfEqual {129}
	059 Move V0, [X31+48]
	060 Move V1, [X31+64]
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Move X10, 0x2173000
	063 Move [X31], V0
	064 Move [X31+8], V1
	065 Move [X31+28], V2
	066 Move X8, [X19]
	067 Move X10, [X10+1360]
	068 NotImplemented "Instruction LDRH not yet implemented."
	069 Move X1, [X10]
	070 Compare X9, 0
	071 JumpIfEqual {78}
	072 Move X10, [X8+176]
	073 Add X10, X10, 8
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Subtract X9, X9, 1
	077 Add X10, X10, 16
	078 Move X0, X19
	079 Move W2, W31
	080 Call 0x1C5D788
	081 Move X19, [X19+152]
	082 Move S0, 20
	083 Multiply S1, S11, S0
	084 Multiply S2, S12, S0
	085 Multiply S0, S13, S0
	086 Add S8, S8, S1
	087 Add S9, S9, S2
	088 Add S10, S10, S0
	089 Compare X19, 0
	090 JumpIfEqual {129}
	091 Move X10, 0x2173000
	092 Move X8, [X19]
	093 Move X10, [X10+1360]
	094 NotImplemented "Instruction LDRH not yet implemented."
	095 Move X1, [X10]
	096 Compare X9, 0
	097 JumpIfEqual {104}
	098 Move X10, [X8+176]
	099 Add X10, X10, 8
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Subtract X9, X9, 1
	103 Add X10, X10, 16
	104 Move W2, 1
	105 Move X0, X19
	106 Call 0x1C5D788
	107 NotImplemented "Instruction LDRSW not yet implemented."
	108 Add X8, X8, X9
	109 Add X0, X8, 312
	110 Move V0, [X31]
	111 Move V1, [X31+16]
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 Move X8, [X0]
	114 Add X1, X31, 96
	115 Move [X31+96], V0
	116 Move [X31+104], V1
	117 Move [X31+124], V2
	118 Move X2, [X0+8]
	119 Move X0, X19
	120 NotImplemented "Instruction BLR not yet implemented."
	121 Move W9, [X10]
	122 Add W9, W9, 1
	123 Add X8, X8, W9
	124 Add X0, X8, 312
	125 Move X8, [X0]
	126 Move X1, [X0+8]
	127 Move X0, X19
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move V0, V8
	130 Move V1, V9
	131 Move V2, V10
	132 Move X20, [X31+208]
	133 Move X19, [X31+216]
	134 Move X30, [X31+192]
	135 Move X21, [X31+200]
	136 Move D9, [X31+176]
	137 Move D8, [X31+184]
	138 Move D11, [X31+160]
	139 Move D10, [X31+168]
	140 Move D13, [X31+144]
	141 Move D12, [X31+152]
	142 Add X31, X31, 224
	143 Return X0
	144 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01FA94B8 MOV X20, X2
	0x01FA94BC MOV X19, X1
	0x01FA94C0 CBNZ X8, 0x1FA94E0
	0x01FA94C4 ADRP X0, 0x2172000
	0x01FA94C8 LDR X0, [X0 + 0x580]
	0x01FA94CC BL 0x1C16CF4
	0x01FA94D0 LDR X8, [X20 + 0x38]
	0x01FA94D4 CBNZ X8, 0x1FA94E0
	0x01FA94D8 MOV X0, X20
	0x01FA94DC BL 0x1C5C6E0
	0x01FA94E0 MOVI V0.2D, 0x0
	0x01FA94E4 MOV X0, X31
	0x01FA94E8 STP V0, V0, [X31]
	0x01FA94EC BL 0x32C5C58
	0x01FA94F0 ADRP X8, 0x2172000
	0x01FA94F4 LDR X8, [X8 + 0x580]
	0x01FA94F8 LDR X0, [X8]
	0x01FA94FC LDR W8, [X0 + 0xE0]
	0x01FA9500 CBNZ W8, 0x1FA9508
	0x01FA9504 BL 0x1C16DFC
	0x01FA9508 ADD X0, X31, 0x0
	0x01FA950C MOV X1, X31
	0x01FA9510 BL 0x33E4F00
	0x01FA9514 LDR X8, [X20 + 0x38]
	0x01FA9518 LDR X1, [X8 + 0x10]
	0x01FA951C MOV X0, X19
	0x01FA9520 BL 0x35E8D44
	0x01FA9524 ADD X0, X31, 0x0
	0x01FA9528 MOV X1, X31
	0x01FA952C BL 0x33E42EC
	0x01FA9530 LDP X20, X19, [X31 + 0x30]
	0x01FA9534 LDR X30, [X31 + 0x20]
	0x01FA9538 ADD X31, X31, 0x40
	0x01FA953C RET
	0x01FA9540 B 0x1FA9544
	0x01FA9544 MOV X20, X0
	0x01FA9548 CMP W1, 0x1
	0x01FA954C B.NE 0x1FA9578
	0x01FA9550 MOV X0, X20
	0x01FA9554 BL 0x3EB1AD0
	0x01FA9558 LDR X19, [X0]
	0x01FA955C BL 0x3EB1AE0
	0x01FA9560 ADD X0, X31, 0x0
	0x01FA9564 MOV X1, X31
	0x01FA9568 BL 0x33E42EC
	0x01FA956C CBZ X19, 0x1FA9530
	0x01FA9570 MOV X0, X19
	0x01FA9574 BL 0x1C16F18
	0x01FA9578 MOV X19, X31
	0x01FA957C B 0x1FA9584
	0x01FA9580 MOV X20, X0
	0x01FA9584 ADD X0, X31, 0x0
	0x01FA9588 MOV X1, X31
	0x01FA958C BL 0x33E42EC
	0x01FA9590 CBNZ X19, 0x1FA959C
	0x01FA9594 MOV X0, X20
	0x01FA9598 BL 0x1D2C690
	0x01FA959C MOV X0, X19
	0x01FA95A0 BL 0x1C16F18
	0x01FA95A4 BL 0x1990590
	0x01FA95A8 SUB X31, X31, 0x80
	0x01FA95AC STR X30, [X31 + 0x40]
	0x01FA95B0 STP X24, X23, [X31 + 0x50]
	0x01FA95B4 STP X22, X21, [X31 + 0x60]
	0x01FA95B8 STP X20, X19, [X31 + 0x70]
	0x01FA95BC LDR X8, [X3 + 0x38]
	0x01FA95C0 MOV X20, X3
	0x01FA95C4 MOV X22, X2
	0x01FA95C8 MOV X19, X1
	0x01FA95CC MOV X21, X0
	0x01FA95D0 CBNZ X8, 0x1FA95DC
	0x01FA95D4 MOV X0, X20
	0x01FA95D8 BL 0x1C5C6E0
	0x01FA95DC STR X31, [X31 + 0x48]
	0x01FA95E0 MOV X0, X31
	0x01FA95E4 BL 0x33F6C70
	0x01FA95E8 TBZ X0, 0x0, 0x1FA9644
	0x01FA95EC LDR X0, [X20 + 0x20]
	0x01FA95F0 LDRB W8, [X0 + 0x135]
	0x01FA95F4 TBNZ X8, 0x0, 0x1FA95FC
	0x01FA95F8 BL 0x1C5C684
	0x01FA95FC LDR X8, [X0 + 0xC0]
	0x01FA9600 LDR X0, [X8 + 0x10]
	0x01FA9604 LDRB W8, [X0 + 0x135]
	0x01FA9608 TBNZ X8, 0x0, 0x1FA9610
	0x01FA960C BL 0x1C5C684
	0x01FA9610 LDR W8, [X0 + 0xE0]
	0x01FA9614 CBNZ W8, 0x1FA961C
	0x01FA9618 BL 0x1C16DFC
	0x01FA961C LDR X0, [X20 + 0x20]
	0x01FA9620 LDRB W8, [X0 + 0x135]
	0x01FA9624 TBNZ X8, 0x0, 0x1FA962C
	0x01FA9628 BL 0x1C5C684
	0x01FA962C LDR X8, [X0 + 0xC0]
	0x01FA9630 LDR X1, [X8 + 0x8]
	0x01FA9634 MOV X0, X21
	0x01FA9638 BL 0x24DB0A0
	0x01FA963C MOV X1, X0
	0x01FA9640 B 0x1FA9648
	0x01FA9644 MOV X1, X31
	0x01FA9648 ADD X2, X31, 0x48
	0x01FA964C MOV X0, X21
	0x01FA9650 MOV X3, X31
	0x01FA9654 BL 0x32C4B94
	0x01FA9658 LDR X8, [X21]
	0x01FA965C MOV X23, X0
	0x01FA9660 CBNZ X8, 0x1FA96F8
	0x01FA9664 LDR X0, [X20 + 0x20]
	0x01FA9668 LDRB W8, [X0 + 0x135]
	0x01FA966C TBNZ X8, 0x0, 0x1FA9674
	0x01FA9670 BL 0x1C5C684
	0x01FA9674 LDR X8, [X0 + 0xC0]
	0x01FA9678 LDR X0, [X8 + 0x10]
	0x01FA967C LDRB W8, [X0 + 0x135]
	0x01FA9680 TBNZ X8, 0x0, 0x1FA9688
	0x01FA9684 BL 0x1C5C684
	0x01FA9688 LDR W8, [X0 + 0xE0]
	0x01FA968C CBNZ W8, 0x1FA9694
	0x01FA9690 BL 0x1C16DFC
	0x01FA9694 LDR X0, [X20 + 0x20]
	0x01FA9698 LDRB W8, [X0 + 0x135]
	0x01FA969C TBNZ X8, 0x0, 0x1FA96A4
	0x01FA96A0 BL 0x1C5C684
	0x01FA96A4 LDR X8, [X0 + 0xC0]
	0x01FA96A8 LDR X1, [X8 + 0x8]
	0x01FA96AC MOV X0, X21
	0x01FA96B0 BL 0x24DB0A0
	0x01FA96B4 LDR X8, [X22 + 0x30]
	0x01FA96B8 LDP V1, V0, [X22 + 0x10]
	0x01FA96BC LDR V2, [X22]
	0x01FA96C0 MOV X24, X0
	0x01FA96C4 STR X8, [X31 + 0x30]
	0x01FA96C8 STP V1, V0, [X31 + 0x10]
	0x01FA96CC STR V2, [X31]
	0x01FA96D0 LDR X8, [X20 + 0x38]
	0x01FA96D4 LDR X0, [X8 + 0x8]
	0x01FA96D8 ADD X1, X31, 0x0
	0x01FA96DC BL 0x1C16E04
	0x01FA96E0 MOV X1, X0
	0x01FA96E4 LDR X2, [X31 + 0x48]
	0x01FA96E8 MOV X0, X21
	0x01FA96EC MOV X3, X24
	0x01FA96F0 MOV X4, X31
	0x01FA96F4 BL 0x32C4EF8
	0x01FA96F8 LDR X8, [X20 + 0x38]
	0x01FA96FC LDR X2, [X8 + 0x20]
	0x01FA9700 MOV X0, X19
	0x01FA9704 MOV X1, X23
	0x01FA9708 BL 0x2998B98
	0x01FA970C LDP X20, X19, [X31 + 0x70]
	0x01FA9710 LDP X22, X21, [X31 + 0x60]
	0x01FA9714 LDP X24, X23, [X31 + 0x50]
	0x01FA9718 LDR X30, [X31 + 0x40]
	0x01FA971C ADD X31, X31, 0x80
	0x01FA9720 RET
	0x01FA9724 B 0x1FA9740
	0x01FA9728 B 0x1FA9740
	0x01FA972C B 0x1FA9740
	0x01FA9730 B 0x1FA9740
	0x01FA9734 B 0x1FA9740
	0x01FA9738 B 0x1FA9740
	0x01FA973C B 0x1FA9740
	0x01FA9740 MOV X19, X0
	0x01FA9744 CMP W1, 0x1
	0x01FA9748 B.NE 0x1FA97B8
	0x01FA974C MOV X0, X19
	0x01FA9750 BL 0x3EB1AD0
	0x01FA9754 MOV X19, X0
	0x01FA9758 ADRP X0, 0x214A000
	0x01FA975C LDR X0, [X0 + 0x7D0]
	0x01FA9760 BL 0x1C16D08
	0x01FA9764 LDR X8, [X19]
	0x01FA9768 LDR X1, [X8]
	0x01FA976C BL 0x1C17270
	0x01FA9770 TBZ X0, 0x0, 0x1FA9790
	0x01FA9774 LDR X19, [X19]
	0x01FA9778 BL 0x3EB1AE0
	0x01FA977C MOV X0, X19
	0x01FA9780 MOV X1, X31
	0x01FA9784 MOV X2, X31
	0x01FA9788 BL 0x32C4498
	0x01FA978C B 0x1FA970C
	0x01FA9790 MOVZ W0, 0x8
	0x01FA9794 BL 0x3EB1AF0
	0x01FA9798 LDR X8, [X19]
	0x01FA979C STR X8, [X0]
	0x01FA97A0 ADRP X1, 0x1F0B000
	0x01FA97A4 ADD X1, X1, 0xE58
	0x01FA97A8 MOV X2, X31
	0x01FA97AC BL 0x3EB1B00
	0x01FA97B0 MOV X19, X0
	0x01FA97B4 BL 0x3EB1AE0
	0x01FA97B8 MOV X0, X19
	0x01FA97BC BL 0x1D2C690
	0x01FA97C0 BL 0x1990590
	0x01FA97C4 SUB X31, X31, 0x40
	0x01FA97C8 STR X30, [X31 + 0x20]
	0x01FA97CC STP X20, X19, [X31 + 0x30]
	0x01FA97D0 LDR X8, [X2 + 0x38]
	0x01FA97D4 MOV X20, X2
	0x01FA97D8 MOV X19, X1
	0x01FA97DC CBNZ X8, 0x1FA97FC
	0x01FA97E0 ADRP X0, 0x2172000
	0x01FA97E4 LDR X0, [X0 + 0x580]
	0x01FA97E8 BL 0x1C16CF4
	0x01FA97EC LDR X8, [X20 + 0x38]
	0x01FA97F0 CBNZ X8, 0x1FA97FC
	0x01FA97F4 MOV X0, X20
	0x01FA97F8 BL 0x1C5C6E0
	0x01FA97FC MOVI V0.2D, 0x0
	0x01FA9800 MOV X0, X31
	0x01FA9804 STP V0, V0, [X31]
	0x01FA9808 BL 0x32C5C58
	0x01FA980C ADRP X8, 0x2172000
	0x01FA9810 LDR X8, [X8 + 0x580]
	0x01FA9814 LDR X0, [X8]
	0x01FA9818 LDR W8, [X0 + 0xE0]
	0x01FA981C CBNZ W8, 0x1FA9824
	0x01FA9820 BL 0x1C16DFC
	0x01FA9824 ADD X0, X31, 0x0
	0x01FA9828 MOV X1, X31
	0x01FA982C BL 0x33E4F00
	0x01FA9830 LDR X8, [X20 + 0x38]
	0x01FA9834 LDR X1, [X8 + 0x10]
	0x01FA9838 MOV X0, X19
	0x01FA983C BL 0x297BA94
	0x01FA9840 ADD X0, X31, 0x0
	0x01FA9844 MOV X1, X31
	0x01FA9848 BL 0x33E42EC
	0x01FA984C LDP X20, X19, [X31 + 0x30]
	0x01FA9850 LDR X30, [X31 + 0x20]
	0x01FA9854 ADD X31, X31, 0x40
	0x01FA9858 RET
	0x01FA985C B 0x1FA9860
	0x01FA9860 MOV X20, X0
	0x01FA9864 CMP W1, 0x1
	0x01FA9868 B.NE 0x1FA9894
	0x01FA986C MOV X0, X20
	0x01FA9870 BL 0x3EB1AD0
	0x01FA9874 LDR X19, [X0]
	0x01FA9878 BL 0x3EB1AE0
	0x01FA987C ADD X0, X31, 0x0
	0x01FA9880 MOV X1, X31
	0x01FA9884 BL 0x33E42EC
	0x01FA9888 CBZ X19, 0x1FA984C
	0x01FA988C MOV X0, X19
	0x01FA9890 BL 0x1C16F18
	0x01FA9894 MOV X19, X31
	0x01FA9898 B 0x1FA98A0
	0x01FA989C MOV X20, X0
	0x01FA98A0 ADD X0, X31, 0x0
	0x01FA98A4 MOV X1, X31
	0x01FA98A8 BL 0x33E42EC
	0x01FA98AC CBNZ X19, 0x1FA98B8
	0x01FA98B0 MOV X0, X20
	0x01FA98B4 BL 0x1D2C690
	0x01FA98B8 MOV X0, X19
	0x01FA98BC BL 0x1C16F18
	0x01FA98C0 BL 0x1990590
	0x01FA98C4 SUB X31, X31, 0xB0
	0x01FA98C8 STR X30, [X31 + 0x70]
	0x01FA98CC STP X24, X23, [X31 + 0x80]
	0x01FA98D0 STP X22, X21, [X31 + 0x90]
	0x01FA98D4 STP X20, X19, [X31 + 0xA0]
	0x01FA98D8 LDR X8, [X3 + 0x38]
	0x01FA98DC MOV X20, X3
	0x01FA98E0 MOV X22, X2
	0x01FA98E4 MOV X19, X1
	0x01FA98E8 MOV X21, X0
	0x01FA98EC CBNZ X8, 0x1FA98F8
	0x01FA98F0 MOV X0, X20
	0x01FA98F4 BL 0x1C5C6E0
	0x01FA98F8 STR X31, [X31 + 0x78]
	0x01FA98FC MOV X0, X31
	0x01FA9900 BL 0x33F6C70
	0x01FA9904 TBZ X0, 0x0, 0x1FA9960
	0x01FA9908 LDR X0, [X20 + 0x20]
	0x01FA990C LDRB W8, [X0 + 0x135]
	0x01FA9910 TBNZ X8, 0x0, 0x1FA9918
	0x01FA9914 BL 0x1C5C684
	0x01FA9918 LDR X8, [X0 + 0xC0]
	0x01FA991C LDR X0, [X8 + 0x10]
	0x01FA9920 LDRB W8, [X0 + 0x135]
	0x01FA9924 TBNZ X8, 0x0, 0x1FA992C
	0x01FA9928 BL 0x1C5C684
	0x01FA992C LDR W8, [X0 + 0xE0]
	0x01FA9930 CBNZ W8, 0x1FA9938
	0x01FA9934 BL 0x1C16DFC
	0x01FA9938 LDR X0, [X20 + 0x20]
	0x01FA993C LDRB W8, [X0 + 0x135]
	0x01FA9940 TBNZ X8, 0x0, 0x1FA9948
	0x01FA9944 BL 0x1C5C684
	0x01FA9948 LDR X8, [X0 + 0xC0]
	0x01FA994C LDR X1, [X8 + 0x8]
	0x01FA9950 MOV X0, X21
	0x01FA9954 BL 0x24DC1A4
	0x01FA9958 MOV X1, X0
	0x01FA995C B 0x1FA9964
	0x01FA9960 MOV X1, X31
	0x01FA9964 ADD X2, X31, 0x78
	0x01FA9968 MOV X0, X21
	0x01FA996C MOV X3, X31
	0x01FA9970 BL 0x32C4B94
	0x01FA9974 LDR X8, [X21]
	0x01FA9978 MOV X23, X0
	0x01FA997C CBNZ X8, 0x1FA9A0C
	0x01FA9980 LDR X0, [X20 + 0x20]
	0x01FA9984 LDRB W8, [X0 + 0x135]
	0x01FA9988 TBNZ X8, 0x0, 0x1FA9990
	0x01FA998C BL 0x1C5C684
	0x01FA9990 LDR X8, [X0 + 0xC0]
	0x01FA9994 LDR X0, [X8 + 0x10]
	0x01FA9998 LDRB W8, [X0 + 0x135]
	0x01FA999C TBNZ X8, 0x0, 0x1FA99A4
	0x01FA99A0 BL 0x1C5C684
	0x01FA99A4 LDR W8, [X0 + 0xE0]
	0x01FA99A8 CBNZ W8, 0x1FA99B0
	0x01FA99AC BL 0x1C16DFC
	0x01FA99B0 LDR X0, [X20 + 0x20]
	0x01FA99B4 LDRB W8, [X0 + 0x135]
	0x01FA99B8 TBNZ X8, 0x0, 0x1FA99C0
	0x01FA99BC BL 0x1C5C684
	0x01FA99C0 LDR X8, [X0 + 0xC0]
	0x01FA99C4 LDR X1, [X8 + 0x8]
	0x01FA99C8 MOV X0, X21
	0x01FA99CC BL 0x24DC1A4
	0x01FA99D0 MOV X24, X0
	0x01FA99D4 ADD X0, X31, 0x8
	0x01FA99D8 MOVZ W2, 0x68
	0x01FA99DC MOV X1, X22
	0x01FA99E0 BL 0x3EB1AC0
	0x01FA99E4 LDR X8, [X20 + 0x38]
	0x01FA99E8 LDR X0, [X8 + 0x8]
	0x01FA99EC ADD X1, X31, 0x8
	0x01FA99F0 BL 0x1C16E04
	0x01FA99F4 MOV X1, X0
	0x01FA99F8 LDR X2, [X31 + 0x78]
	0x01FA99FC MOV X0, X21
	0x01FA9A00 MOV X3, X24
	0x01FA9A04 MOV X4, X31
	0x01FA9A08 BL 0x32C4EF8
	0x01FA9A0C LDR X8, [X20 + 0x38]
	0x01FA9A10 LDR X2, [X8 + 0x20]
	0x01FA9A14 MOV X0, X19
	0x01FA9A18 MOV X1, X23
	0x01FA9A1C BL 0x29989AC
	0x01FA9A20 LDP X20, X19, [X31 + 0xA0]
	0x01FA9A24 LDP X22, X21, [X31 + 0x90]
	0x01FA9A28 LDP X24, X23, [X31 + 0x80]
	0x01FA9A2C LDR X30, [X31 + 0x70]
	0x01FA9A30 ADD X31, X31, 0xB0
	0x01FA9A34 RET
	0x01FA9A38 B 0x1FA9A54
	0x01FA9A3C B 0x1FA9A54
	0x01FA9A40 B 0x1FA9A54
	0x01FA9A44 B 0x1FA9A54
	0x01FA9A48 B 0x1FA9A54
	0x01FA9A4C B 0x1FA9A54
	0x01FA9A50 B 0x1FA9A54
	0x01FA9A54 MOV X19, X0
	0x01FA9A58 CMP W1, 0x1
	0x01FA9A5C B.NE 0x1FA9ACC
	0x01FA9A60 MOV X0, X19
	0x01FA9A64 BL 0x3EB1AD0
	0x01FA9A68 MOV X19, X0
	0x01FA9A6C ADRP X0, 0x214A000
	0x01FA9A70 LDR X0, [X0 + 0x7D0]
	0x01FA9A74 BL 0x1C16D08
	0x01FA9A78 LDR X8, [X19]
	0x01FA9A7C LDR X1, [X8]
	0x01FA9A80 BL 0x1C17270
	0x01FA9A84 TBZ X0, 0x0, 0x1FA9AA4
	0x01FA9A88 LDR X19, [X19]
	0x01FA9A8C BL 0x3EB1AE0
	0x01FA9A90 MOV X0, X19
	0x01FA9A94 MOV X1, X31
	0x01FA9A98 MOV X2, X31
	0x01FA9A9C BL 0x32C4498
	0x01FA9AA0 B 0x1FA9A20
	0x01FA9AA4 MOVZ W0, 0x8
	0x01FA9AA8 BL 0x3EB1AF0
	0x01FA9AAC LDR X8, [X19]
	0x01FA9AB0 STR X8, [X0]
	0x01FA9AB4 ADRP X1, 0x1F0B000
	0x01FA9AB8 ADD X1, X1, 0xE58
	0x01FA9ABC MOV X2, X31
	0x01FA9AC0 BL 0x3EB1B00
	0x01FA9AC4 MOV X19, X0
	0x01FA9AC8 BL 0x3EB1AE0
	0x01FA9ACC MOV X0, X19
	0x01FA9AD0 BL 0x1D2C690
	0x01FA9AD4 BL 0x1990590
	0x01FA9AD8 SUB X31, X31, 0x40
	0x01FA9ADC STR X30, [X31 + 0x20]
	0x01FA9AE0 STP X20, X19, [X31 + 0x30]
	0x01FA9AE4 LDR X8, [X2 + 0x38]
	0x01FA9AE8 MOV X20, X2
	0x01FA9AEC MOV X19, X1
	0x01FA9AF0 CBNZ X8, 0x1FA9B10
	0x01FA9AF4 ADRP X0, 0x2172000
	0x01FA9AF8 LDR X0, [X0 + 0x580]
	0x01FA9AFC BL 0x1C16CF4
	0x01FA9B00 LDR X8, [X20 + 0x38]
	0x01FA9B04 CBNZ X8, 0x1FA9B10
	0x01FA9B08 MOV X0, X20
	0x01FA9B0C BL 0x1C5C6E0
	0x01FA9B10 MOVI V0.2D, 0x0
	0x01FA9B14 MOV X0, X31
	0x01FA9B18 STP V0, V0, [X31]
	0x01FA9B1C BL 0x32C5C58
	0x01FA9B20 ADRP X8, 0x2172000
	0x01FA9B24 LDR X8, [X8 + 0x580]
	0x01FA9B28 LDR X0, [X8]
	0x01FA9B2C LDR W8, [X0 + 0xE0]
	0x01FA9B30 CBNZ W8, 0x1FA9B38
	0x01FA9B34 BL 0x1C16DFC
	0x01FA9B38 ADD X0, X31, 0x0
	0x01FA9B3C MOV X1, X31
	0x01FA9B40 BL 0x33E4F00
	0x01FA9B44 LDR X8, [X20 + 0x38]
	0x01FA9B48 LDR X1, [X8 + 0x10]
	0x01FA9B4C MOV X0, X19
	0x01FA9B50 BL 0x36AF484
	0x01FA9B54 ADD X0, X31, 0x0
	0x01FA9B58 MOV X1, X31
	0x01FA9B5C BL 0x33E42EC
	0x01FA9B60 LDP X20, X19, [X31 + 0x30]
	0x01FA9B64 LDR X30, [X31 + 0x20]
	0x01FA9B68 ADD X31, X31, 0x40
	0x01FA9B6C RET
	0x01FA9B70 B 0x1FA9B74
	0x01FA9B74 MOV X20, X0
	0x01FA9B78 CMP W1, 0x1
	0x01FA9B7C B.NE 0x1FA9BA8
	0x01FA9B80 MOV X0, X20
	0x01FA9B84 BL 0x3EB1AD0
	0x01FA9B88 LDR X19, [X0]
	0x01FA9B8C BL 0x3EB1AE0
	0x01FA9B90 ADD X0, X31, 0x0
	0x01FA9B94 MOV X1, X31
	0x01FA9B98 BL 0x33E42EC
	0x01FA9B9C CBZ X19, 0x1FA9B60
	0x01FA9BA0 MOV X0, X19
	0x01FA9BA4 BL 0x1C16F18
	0x01FA9BA8 MOV X19, X31
	0x01FA9BAC B 0x1FA9BB4
	0x01FA9BB0 MOV X20, X0
	0x01FA9BB4 ADD X0, X31, 0x0

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+144], D15
	003 Move [X31+152], D14
	004 Move [X31+160], D13
	005 Move [X31+168], D12
	006 Move [X31+176], D11
	007 Move [X31+184], D10
	008 Move [X31+192], D9
	009 Move [X31+200], D8
	010 Move [X31+208], X29
	011 Move [X31+216], X30
	012 Move [X31+224], X24
	013 Move [X31+232], X23
	014 Move [X31+240], X22
	015 Move [X31+248], X21
	016 Move [X31+256], X20
	017 Move [X31+264], X19
	018 Move X20, 0x2431000
	019 Move W8, [X20+2065]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0x2173000
	026 Move X0, [X0+1368]
	027 Call 0x1C17CF4
	028 Move X0, 0x214B000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2065], W8
	033 Move X8, [X19+136]
	034 Compare X8, 0
	035 JumpIfEqual {562}
	036 Move [X8+152], W31
	037 Move X22, 0x2431000
	038 Move W8, [X22+2071]
	039 Move X20, [X19+40]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x2173000
	043 Move X0, [X0+1320]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+2071], W8
	047 Move X23, 0x2173000
	048 Move X23, [X23+1320]
	049 Move X8, [X23]
	050 Move X8, [X8+184]
	051 Move X8, [X8]
	052 Compare X8, 0
	053 JumpIfEqual {562}
	054 Move X0, [X8+368]
	055 Compare X0, 0
	056 JumpIfEqual {562}
	057 Move X8, 0x2173000
	058 Move X8, [X8+1368]
	059 Move X1, [X8]
	060 Call InputControl`1<Vector2>.ReadValue, X0
	061 Compare X20, 0
	062 JumpIfEqual {562}
	063 Move X21, 0x214B000
	064 Move X21, [X21+1432]
	065 Add X8, X31, 120
	066 Move S2, W31
	067 Move X0, X20
	068 Move X1, X31
	069 Call Camera.ScreenPointToRay, X0, X1
	070 Move X0, [X21]
	071 Move S8, [X31+120]
	072 Move S9, [X31+124]
	073 Move S11, [X31+128]
	074 Move S13, [X31+132]
	075 Move S14, [X31+136]
	076 Move S10, [X31+140]
	077 Move W8, [X0+224]
	078 Move X20, [X19+144]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X20
	083 Move X1, X31
	084 Move X2, X31
	085 Call Object.op_Equality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {91}
	090 Move [X19+160], W31
	091 Add X1, X31, 96
	092 Move X0, X19
	093 Move [X31+96], S8
	094 Move [X31+104], S9
	095 Move [X31+104], S11
	096 Move [X31+112], S13
	097 Move [X31+112], S14
	098 Move [X31+120], S10
	099 Call MouseTeleport.CheckGrab, X0, X1
	100 Move W20, W0
	101 Move X0, X19
	102 Call MouseTeleport.CheckUngrab, X0
	103 Move X24, 0x2430000
	104 Move W8, [X24+1923]
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x214B000
	108 Move X0, [X0+1440]
	109 Call 0x1C17CF4
	110 Move W8, 1
	111 Move [X24+1923], W8
	112 Move X24, [X19+152]
	113 Compare X24, 0
	114 JumpIfEqual {131}
	115 Add X1, X31, 72
	116 Move X0, X19
	117 Move [X31+72], S8
	118 Move [X31+80], S9
	119 Move [X31+80], S11
	120 Move [X31+88], S13
	121 Move [X31+88], S14
	122 Move [X31+96], S10
	123 Call MouseTeleport.SearchTarget, X0, X1
	124 Move TEMP, X20
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {377}
	128 Move V12, V0
	129 Move V15, V2
	130 Move [X31+44], S1
	131 Move TEMP, X20
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfEqual {377}
	135 Move X8, 0x214B000
	136 Move X8, [X8+1440]
	137 Move X8, [X8]
	138 Move X8, [X8+184]
	139 Move S12, [X8]
	140 Move S0, [X8+4]
	141 Move V15, [X8+8]
	142 Move [X31+44], S0
	143 Move X0, [X21]
	144 Move X21, [X19+144]
	145 Move W8, [X0+224]
	146 Compare W8, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move X0, X21
	150 Move X1, X31
	151 Move X2, X31
	152 Call Object.op_Equality, X0, X1
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfNotEqual {377}
	157 Move W8, [X22+2071]
	158 Compare W8, 0
	159 JumpIfNotEqual {165}
	160 Move X0, 0x2173000
	161 Move X0, [X0+1320]
	162 Call 0x1C17CF4
	163 Move W8, 1
	164 Move [X22+2071], W8
	165 Move X8, [X23]
	166 Move X8, [X8+184]
	167 Move X8, [X8]
	168 Compare X8, 0
	169 JumpIfEqual {562}
	170 Move X0, [X8+440]
	171 Compare X0, 0
	172 JumpIfEqual {562}
	173 Move X1, X31
	174 Call ButtonControl.get_isPressed, X0
	175 Move TEMP, X0
	176 And TEMP, TEMP, 1
	177 Compare TEMP, 1
	178 JumpIfEqual {377}
	179 Move W8, [X22+2071]
	180 Compare W8, 0
	181 JumpIfNotEqual {187}
	182 Move X0, 0x2173000
	183 Move X0, [X0+1320]
	184 Call 0x1C17CF4
	185 Move W8, 1
	186 Move [X22+2071], W8
	187 Move X8, [X23]
	188 Move X8, [X8+184]
	189 Move X8, [X8]
	190 Compare X8, 0
	191 JumpIfEqual {562}
	192 Move X0, [X8+424]
	193 Compare X0, 0
	194 JumpIfEqual {562}
	195 Move X1, X31
	196 Call ButtonControl.get_isPressed, X0
	197 Move TEMP, X0
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfEqual {223}
	201 Move W8, [X22+2071]
	202 Compare W8, 0
	203 JumpIfNotEqual {209}
	204 Move X0, 0x2173000
	205 Move X0, [X0+1320]
	206 Call 0x1C17CF4
	207 Move W8, 1
	208 Move [X22+2071], W8
	209 Move X8, [X23]
	210 Move X8, [X8+184]
	211 Move X8, [X8]
	212 Compare X8, 0
	213 JumpIfEqual {562}
	214 Move X0, [X8+424]
	215 Compare X0, 0
	216 JumpIfEqual {562}
	217 Move X1, X31
	218 Call ButtonControl.get_wasReleasedThisFrame, X0
	219 Move TEMP, X0
	220 And TEMP, TEMP, 1
	221 Compare TEMP, 1
	222 JumpIfNotEqual {377}
	223 Move X8, [X19+136]
	224 Compare X8, 0
	225 JumpIfEqual {562}
	226 Move V1, [X31+44]
	227 Move W9, 1
	228 Move [X8+152], W9
	229 Compare X24, 0
	230 JumpIfNotEqual {242}
	231 Add X1, X31, 48
	232 Move X0, X19
	233 Move [X31+48], S8
	234 Move [X31+56], S9
	235 Move [X31+56], S11
	236 Move [X31+64], S13
	237 Move [X31+64], S14
	238 Move [X31+72], S10
	239 Call MouseTeleport.SearchTarget, X0, X1
	240 Move V12, V0
	241 Move V15, V2
	242 Move X0, [X19+128]
	243 Move [X31+44], S1
	244 Compare X0, 0
	245 JumpIfEqual {562}
	246 Move X1, X31
	247 Call Component.get_transform, X0
	248 Compare X0, 0
	249 JumpIfEqual {562}
	250 Move X1, X31
	251 Call Transform.get_rotation, X0
	252 Move X0, X31
	253 Call Quaternion.Inverse, X0
	254 Move X8, [X19+136]
	255 Compare X8, 0
	256 JumpIfEqual {562}
	257 Move X0, [X8+72]
	258 Move [X31+24], S3
	259 Move [X31+32], S0
	260 Move [X31+32], S1
	261 Move [X31+40], S2
	262 Move [X31+40], S12
	263 Move [X31+12], S11
	264 Move [X31+20], S9
	265 Move [X31+20], S8
	266 Compare X0, 0
	267 JumpIfEqual {562}
	268 Move X1, X31
	269 Call Transform.get_rotation, X0
	270 Move X8, [X19+136]
	271 Compare X8, 0
	272 JumpIfEqual {562}
	273 Move X0, [X8+72]
	274 Compare X0, 0
	275 JumpIfEqual {562}
	276 Move X1, X31
	277 Move V12, V0
	278 Move V8, V1
	279 Move V11, V2
	280 Move V9, V3
	281 Call Transform.get_position, X0
	282 Move V3, [X31+40]
	283 Subtract S2, S15, S2
	284 Move X0, X31
	285 Subtract S0, S3, S0
	286 Move V3, [X31+44]
	287 Subtract S1, S3, S1
	288 Call Quaternion.LookRotation, X0
	289 Move X0, [X19+128]
	290 Move [X31+40], S0
	291 Move [X31+48], S2
	292 Move [X31+8], S1
	293 Compare X0, 0
	294 JumpIfEqual {562}
	295 Move S21, [X31+24]
	296 Move S17, [X31+28]
	297 Move S19, [X31+32]
	298 Move S23, [X31+36]
	299 Move V15, V3
	300 Move X1, X31
	301 Multiply S0, S21, S12
	302 Multiply S1, S17, S9
	303 Multiply S4, S21, S8
	304 Multiply S5, S19, S9
	305 Multiply S7, S17, S11
	306 Multiply S16, S17, S8
	307 Multiply S17, S17, S12
	308 Multiply S20, S21, S11
	309 Multiply S21, S21, S9
	310 Multiply S22, S23, S9
	311 Multiply S2, S19, S11
	312 Multiply S6, S23, S12
	313 Multiply S18, S19, S12
	314 Multiply S19, S19, S8
	315 Add S0, S0, S1
	316 Add S1, S4, S5
	317 Add S4, S20, S22
	318 Subtract S5, S21, S17
	319 Multiply S3, S23, S8
	320 Multiply S23, S23, S11
	321 Add S0, S2, S0
	322 Add S1, S6, S1
	323 Add S2, S16, S4
	324 Subtract S4, S5, S19
	325 Subtract S8, S0, S3
	326 Subtract S9, S1, S7
	327 Subtract S11, S2, S18
	328 Subtract S12, S4, S23
	329 Call Component.get_transform, X0
	330 Move X21, X0
	331 Move V0, V8
	332 Move V1, V9
	333 Move V2, V11
	334 Move V3, V12
	335 Move X0, X31
	336 Call Quaternion.Inverse, X0
	337 Compare X21, 0
	338 JumpIfEqual {562}
	339 Move S23, [X31+40]
	340 Move S24, [X31+44]
	341 Move V21, [X31+8]
	342 Multiply S4, S15, S3
	343 Multiply S17, S15, S2
	344 Multiply S5, S23, S0
	345 Multiply S6, S21, S1
	346 Multiply S7, S24, S2
	347 Multiply S16, S23, S1
	348 Multiply S18, S24, S3
	349 Multiply S19, S21, S0
	350 Multiply S20, S21, S3
	351 Multiply S21, S21, S2
	352 Multiply S22, S23, S2
	353 Multiply S2, S23, S3
	354 Multiply S3, S24, S0
	355 Multiply S0, S15, S0
	356 Multiply S23, S15, S1
	357 Multiply S24, S24, S1
	358 Subtract S1, S4, S5
	359 Add S4, S17, S18
	360 Add S5, S23, S20
	361 Add S0, S0, S2
	362 Subtract S1, S1, S6
	363 Add S2, S16, S4
	364 Add S4, S3, S5
	365 Add S0, S21, S0
	366 Subtract S3, S1, S7
	367 Subtract S2, S2, S19
	368 Subtract S1, S4, S22
	369 Subtract S0, S0, S24
	370 Move X0, X21
	371 Move X1, X31
	372 Call Transform.set_rotation, X0, X1
	373 Move S9, [X31+16]
	374 Move S8, [X31+20]
	375 Move V11, [X31+12]
	376 Move W22, W31
	377 Move W22, 1
	378 Move X8, [X19+32]
	379 Compare X8, 0
	380 JumpIfEqual {562}
	381 Move X0, [X8+40]
	382 Compare X0, 0
	383 JumpIfEqual {562}
	384 Move X1, X31
	385 Call Component.get_transform, X0
	386 Move X21, X0
	387 Move X0, X19
	388 Call MouseTeleport.get_Head, X0
	389 Compare X0, 0
	390 JumpIfEqual {562}
	391 Move S1, [X19+64]
	392 Move S2, [X19+68]
	393 Move V0, [X19+60]
	394 Move X1, X31
	395 Call Transform.TransformPoint, X0, X1
	396 Compare X21, 0
	397 JumpIfEqual {562}
	398 Move X0, X21
	399 Move X1, X31
	400 Call Transform.set_position, X0, X1
	401 Move X8, [X19+32]
	402 Compare X8, 0
	403 JumpIfEqual {562}
	404 Move X0, [X8+40]
	405 Compare X0, 0
	406 JumpIfEqual {562}
	407 Move X1, X31
	408 Call Component.get_transform, X0
	409 Move X21, X0
	410 Move X0, X19
	411 Call MouseTeleport.get_Head, X0
	412 Compare X0, 0
	413 JumpIfEqual {562}
	414 Move X1, X31
	415 Call Transform.get_rotation, X0
	416 Compare X21, 0
	417 JumpIfEqual {562}
	418 Move S7, [X19+80]
	419 Move S4, [X19+84]
	420 Move S5, [X19+72]
	421 Move S6, [X19+76]
	422 Move X0, X21
	423 Move X1, X31
	424 Multiply S16, S3, S4
	425 Multiply S17, S0, S5
	426 Multiply S18, S1, S6
	427 Multiply S19, S2, S7
	428 Multiply S20, S0, S6
	429 Multiply S21, S3, S7
	430 Multiply S22, S2, S4
	431 Multiply S23, S1, S5
	432 Multiply S24, S1, S4
	433 Multiply S1, S1, S7
	434 Multiply S7, S0, S7
	435 Multiply S0, S0, S4
	436 Multiply S4, S2, S5
	437 Multiply S5, S3, S5
	438 Multiply S3, S3, S6
	439 Multiply S6, S2, S6
	440 Subtract S2, S16, S17
	441 Add S16, S21, S22
	442 Add S3, S3, S24
	443 Add S0, S5, S0
	444 Subtract S2, S2, S18
	445 Add S5, S20, S16
	446 Add S4, S4, S3
	447 Add S0, S1, S0
	448 Subtract S3, S2, S19
	449 Subtract S2, S5, S23
	450 Subtract S1, S4, S7
	451 Subtract S0, S0, S6
	452 Call Transform.set_rotation, X0, X1
	453 Move V0, [X19+160]
	454 NotImplemented "Instruction FCMP not yet implemented."
	455 Move TEMP, X20
	456 And TEMP, TEMP, 1
	457 Compare TEMP, 1
	458 JumpIfEqual {508}
	459 Move X8, [X19+32]
	460 Compare X8, 0
	461 JumpIfEqual {562}
	462 Move X0, [X8+32]
	463 Compare X0, 0
	464 JumpIfEqual {562}
	465 Move X1, X31
	466 Call Component.get_transform, X0
	467 Move X20, X0
	468 Move X0, X19
	469 Call MouseTeleport.get_Head, X0
	470 Compare X0, 0
	471 JumpIfEqual {562}
	472 Move S1, [X19+52]
	473 Move S2, [X19+56]
	474 Move V0, [X19+48]
	475 Move X1, X31
	476 Call Transform.TransformPoint, X0, X1
	477 Compare X20, 0
	478 JumpIfEqual {562}
	479 Move X8, -21749760
	480 Move V3, [X8+268]
	481 Multiply S4, S10, S3
	482 Multiply S5, S14, S3
	483 Add S2, S4, S2
	484 Add S1, S5, S1
	485 Multiply S3, S13, S3
	486 Move X8, [X19+32]
	487 Compare X8, 0
	488 JumpIfEqual {562}
	489 Move X0, [X8+32]
	490 Compare X0, 0
	491 JumpIfEqual {562}
	492 Move X1, X31
	493 Call Component.get_transform, X0
	494 Compare X0, 0
	495 JumpIfEqual {562}
	496 Move V0, [X19+160]
	497 Move X20, X0
	498 Multiply S1, S10, S0
	499 Multiply S3, S14, S0
	500 Add S2, S11, S1
	501 Add S1, S9, S3
	502 Multiply S0, S13, S0
	503 Move V3, V8
	504 Add S0, S3, S0
	505 Move X0, X20
	506 Move X1, X31
	507 Call Transform.set_position, X0, X1
	508 Compare W22, 0
	509 JumpIfEqual {544}
	510 Move X8, [X19+32]
	511 Compare X8, 0
	512 JumpIfEqual {562}
	513 Move X0, [X8+32]
	514 Compare X0, 0
	515 JumpIfEqual {562}
	516 Move X1, X31
	517 Call Component.get_transform, X0
	518 Compare X0, 0
	519 JumpIfEqual {562}
	520 Add S0, S10, S10
	521 Add S1, S14, S14
	522 Add S3, S13, S13
	523 Add S2, S11, S0
	524 Add S1, S9, S1
	525 Add S0, S8, S3
	526 Move X1, X31
	527 Call Transform.LookAt, X0, X1
	528 Move X8, [X19+32]
	529 Compare X8, 0
	530 JumpIfEqual {562}
	531 Move X0, [X8+32]
	532 Compare X0, 0
	533 JumpIfEqual {562}
	534 Move X1, X31
	535 Call Component.get_transform, X0
	536 Compare X0, 0
	537 JumpIfEqual {562}
	538 Move W8, 0xC2200000
	539 Move S1, W31
	540 Move S2, W31
	541 Move S0, W8
	542 Move X1, X31
	543 Call Transform.Rotate, X0, V0, V1, V2
	544 Move X20, [X31+256]
	545 Move X19, [X31+264]
	546 Move X22, [X31+240]
	547 Move X21, [X31+248]
	548 Move X24, [X31+224]
	549 Move X23, [X31+232]
	550 Move X29, [X31+208]
	551 Move X30, [X31+216]
	552 Move D9, [X31+192]
	553 Move D8, [X31+200]
	554 Move D11, [X31+176]
	555 Move D10, [X31+184]
	556 Move D13, [X31+160]
	557 Move D12, [X31+168]
	558 Move D15, [X31+144]
	559 Move D14, [X31+152]
	560 Add X31, X31, 272
	561 Return 
	562 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01FA9BB8 MOV X1, X31
	0x01FA9BBC BL 0x33E42EC

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

