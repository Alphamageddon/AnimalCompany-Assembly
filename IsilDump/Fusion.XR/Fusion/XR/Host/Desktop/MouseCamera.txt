Type: Fusion.XR.Host.Desktop.MouseCamera

Method: UnityEngine.Transform get_Head()

Disassembly:
	0x01FA84C4 STP D11, D10, [X31 + 0xB0]
	0x01FA84C8 STP D9, D8, [X31 + 0xC0]
	0x01FA84CC STP X29, X30, [X31 + 0xD0]
	0x01FA84D0 STP X24, X23, [X31 + 0xE0]
	0x01FA84D4 STP X22, X21, [X31 + 0xF0]
	0x01FA84D8 STP X20, X19, [X31 + 0x100]
	0x01FA84DC ADRP X20, 0x2431000
	0x01FA84E0 LDRB W8, [X20 + 0x811]
	0x01FA84E4 MOV X19, X0
	0x01FA84E8 TBNZ X8, 0x0, 0x1FA850C
	0x01FA84EC ADRP X0, 0x2173000
	0x01FA84F0 LDR X0, [X0 + 0x558]
	0x01FA84F4 BL 0x1C16CF4
	0x01FA84F8 ADRP X0, 0x214B000
	0x01FA84FC LDR X0, [X0 + 0x598]
	0x01FA8500 BL 0x1C16CF4
	0x01FA8504 MOVZ W8, 0x1
	0x01FA8508 STRB W8, [X20 + 0x811]
	0x01FA850C LDR X8, [X19 + 0x88]
	0x01FA8510 CBZ X8, 0x1FA8BB4
	0x01FA8514 STRB W31, [X8 + 0x98]
	0x01FA8518 ADRP X22, 0x2431000
	0x01FA851C LDRB W8, [X22 + 0x817]
	0x01FA8520 LDR X20, [X19 + 0x28]
	0x01FA8524 CBNZ W8, 0x1FA853C
	0x01FA8528 ADRP X0, 0x2173000
	0x01FA852C LDR X0, [X0 + 0x528]
	0x01FA8530 BL 0x1C16CF4
	0x01FA8534 MOVZ W8, 0x1
	0x01FA8538 STRB W8, [X22 + 0x817]
	0x01FA853C ADRP X23, 0x2173000
	0x01FA8540 LDR X23, [X23 + 0x528]
	0x01FA8544 LDR X8, [X23]
	0x01FA8548 LDR X8, [X8 + 0xB8]
	0x01FA854C LDR X8, [X8]
	0x01FA8550 CBZ X8, 0x1FA8BB4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2432000
	006 Move X20, 0x214C000
	007 Move W8, [X21+2056]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x214C000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2056], W8
	019 Move X0, [X20]
	020 Move X20, [X19+88]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X0, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0
	039 Move X8, [X19+88]
	040 Compare X8, 0
	041 JumpIfEqual {52}
	042 Move X0, [X8+48]
	043 Compare X0, 0
	044 JumpIfEqual {52}
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, X31
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call Component.get_transform, X0
	051 Return X0
	052 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01FA8554 LDR X0, [X8 + 0x170]
	0x01FA8558 CBZ X0, 0x1FA8BB4
	0x01FA855C ADRP X8, 0x2173000
	0x01FA8560 LDR X8, [X8 + 0x558]
	0x01FA8564 LDR X1, [X8]
	0x01FA8568 BL 0x2E095F8
	0x01FA856C CBZ X20, 0x1FA8BB4
	0x01FA8570 ADRP X21, 0x214B000
	0x01FA8574 LDR X21, [X21 + 0x598]
	0x01FA8578 ADD X8, X31, 0x78
	0x01FA857C FMOV S2, W31
	0x01FA8580 MOV X0, X20
	0x01FA8584 MOV X1, X31
	0x01FA8588 BL 0x3C047B4
	0x01FA858C LDR X0, [X21]
	0x01FA8590 LDP S8, S9, [X31 + 0x78]
	0x01FA8594 LDP S11, S13, [X31 + 0x80]
	0x01FA8598 LDP S14, S10, [X31 + 0x88]
	0x01FA859C LDR W8, [X0 + 0xE0]
	0x01FA85A0 LDR X20, [X19 + 0x90]
	0x01FA85A4 CBNZ W8, 0x1FA85AC
	0x01FA85A8 BL 0x1C16DFC
	0x01FA85AC MOV X0, X20
	0x01FA85B0 MOV X1, X31
	0x01FA85B4 MOV X2, X31
	0x01FA85B8 BL 0x3C3883C
	0x01FA85BC TBZ X0, 0x0, 0x1FA85C4
	0x01FA85C0 STR W31, [X19 + 0xA0]
	0x01FA85C4 ADD X1, X31, 0x60
	0x01FA85C8 MOV X0, X19
	0x01FA85CC STP S8, S9, [X31 + 0x60]
	0x01FA85D0 STP S11, S13, [X31 + 0x68]
	0x01FA85D4 STP S14, S10, [X31 + 0x70]
	0x01FA85D8 BL 0x1FA7ED4
	0x01FA85DC MOV W20, W0
	0x01FA85E0 MOV X0, X19
	0x01FA85E4 BL 0x1FA81CC
	0x01FA85E8 ADRP X24, 0x2430000
	0x01FA85EC LDRB W8, [X24 + 0x783]
	0x01FA85F0 CBNZ W8, 0x1FA8608
	0x01FA85F4 ADRP X0, 0x214B000
	0x01FA85F8 LDR X0, [X0 + 0x5A0]
	0x01FA85FC BL 0x1C16CF4
	0x01FA8600 MOVZ W8, 0x1
	0x01FA8604 STRB W8, [X24 + 0x783]
	0x01FA8608 LDR X24, [X19 + 0x98]
	0x01FA860C CBZ X24, 0x1FA863C
	0x01FA8610 ADD X1, X31, 0x48
	0x01FA8614 MOV X0, X19
	0x01FA8618 STP S8, S9, [X31 + 0x48]
	0x01FA861C STP S11, S13, [X31 + 0x50]
	0x01FA8620 STP S14, S10, [X31 + 0x58]
	0x01FA8624 BL 0x1FA82D4
	0x01FA8628 TBNZ X20, 0x0, 0x1FA895C
	0x01FA862C MOV V12.16B, V0.16B
	0x01FA8630 MOV V15.16B, V2.16B
	0x01FA8634 STR S1, [X31 + 0x2C]
	0x01FA8638 B 0x1FA865C
	0x01FA863C TBNZ X20, 0x0, 0x1FA895C
	0x01FA8640 ADRP X8, 0x214B000
	0x01FA8644 LDR X8, [X8 + 0x5A0]
	0x01FA8648 LDR X8, [X8]
	0x01FA864C LDR X8, [X8 + 0xB8]
	0x01FA8650 LDP S12, S0, [X8]
	0x01FA8654 LDR V15, [X8 + 0x8]
	0x01FA8658 STR S0, [X31 + 0x2C]
	0x01FA865C LDR X0, [X21]
	0x01FA8660 LDR X21, [X19 + 0x90]
	0x01FA8664 LDR W8, [X0 + 0xE0]
	0x01FA8668 CBNZ W8, 0x1FA8670
	0x01FA866C BL 0x1C16DFC
	0x01FA8670 MOV X0, X21
	0x01FA8674 MOV X1, X31
	0x01FA8678 MOV X2, X31
	0x01FA867C BL 0x3C3883C
	0x01FA8680 TBZ X0, 0x0, 0x1FA895C
	0x01FA8684 LDRB W8, [X22 + 0x817]
	0x01FA8688 CBNZ W8, 0x1FA86A0
	0x01FA868C ADRP X0, 0x2173000
	0x01FA8690 LDR X0, [X0 + 0x528]
	0x01FA8694 BL 0x1C16CF4
	0x01FA8698 MOVZ W8, 0x1
	0x01FA869C STRB W8, [X22 + 0x817]
	0x01FA86A0 LDR X8, [X23]
	0x01FA86A4 LDR X8, [X8 + 0xB8]
	0x01FA86A8 LDR X8, [X8]
	0x01FA86AC CBZ X8, 0x1FA8BB4
	0x01FA86B0 LDR X0, [X8 + 0x1B8]
	0x01FA86B4 CBZ X0, 0x1FA8BB4
	0x01FA86B8 MOV X1, X31
	0x01FA86BC BL 0x3758A6C
	0x01FA86C0 TBNZ X0, 0x0, 0x1FA895C
	0x01FA86C4 LDRB W8, [X22 + 0x817]
	0x01FA86C8 CBNZ W8, 0x1FA86E0
	0x01FA86CC ADRP X0, 0x2173000
	0x01FA86D0 LDR X0, [X0 + 0x528]
	0x01FA86D4 BL 0x1C16CF4
	0x01FA86D8 MOVZ W8, 0x1
	0x01FA86DC STRB W8, [X22 + 0x817]
	0x01FA86E0 LDR X8, [X23]
	0x01FA86E4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X20, 0x2432000
	007 Move W8, [X20+2057]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0x2174000
	014 Move X0, [X0+848]
	015 Call 0x1C17CF4
	016 Move X0, 0x214C000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x2173000
	020 Move X0, [X0+4072]
	021 Call 0x1C17CF4
	022 Move X0, 0x2174000
	023 Move X0, [X0+1328]
	024 Call 0x1C17CF4
	025 Move X0, 0x2174000
	026 Move X0, [X0+1336]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2057], W8
	030 Add X20, X19, 32
	031 Move X0, X20
	032 Move X1, X31
	033 Call InputActionProperty.get_action, X0
	034 Compare X0, 0
	035 JumpIfEqual {122}
	036 Move X1, X31
	037 Call InputAction.get_bindings, X0
	038 Move X8, X1
	039 ShiftRight X8, 32
	040 And X8, X8, 0x7FFFFFFF
	041 Compare X8, 0
	042 JumpIfNotEqual {55}
	043 Move X0, X20
	044 Move X1, X31
	045 Call InputActionProperty.get_action, X0
	046 Move X8, 0x2174000
	047 Move X8, [X8+1328]
	048 Move X2, X31
	049 Move X3, X31
	050 Move X4, X31
	051 Move X1, [X8]
	052 Add X8, X31, 8
	053 Move X5, X31
	054 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	055 Add X21, X19, 56
	056 Move X0, X21
	057 Move X1, X31
	058 Call InputActionProperty.get_action, X0
	059 Compare X0, 0
	060 JumpIfEqual {122}
	061 Move X1, X31
	062 Call InputAction.get_bindings, X0
	063 Move X8, X1
	064 ShiftRight X8, 32
	065 And X8, X8, 0x7FFFFFFF
	066 Compare X8, 0
	067 JumpIfNotEqual {80}
	068 Move X0, X21
	069 Move X1, X31
	070 Call InputActionProperty.get_action, X0
	071 Move X8, 0x2174000
	072 Move X8, [X8+1336]
	073 Move X2, X31
	074 Move X3, X31
	075 Move X4, X31
	076 Move X1, [X8]
	077 Add X8, X31, 8
	078 Move X5, X31
	079 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	080 Move X0, X20
	081 Move X1, X31
	082 Call InputActionProperty.get_action, X0
	083 Compare X0, 0
	084 JumpIfEqual {122}
	085 Move X1, X31
	086 Call InputAction.Enable, X0
	087 Move X0, X21
	088 Move X1, X31
	089 Call InputActionProperty.get_action, X0
	090 Compare X0, 0
	091 JumpIfEqual {122}
	092 Move X20, 0x214C000
	093 Move X20, [X20+1432]
	094 Move X1, X31
	095 Call InputAction.Enable, X0
	096 Move X0, [X20]
	097 Move X20, [X19+88]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X20
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Equality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {116}
	110 Move X8, 0x2174000
	111 Move X8, [X8+848]
	112 Move X0, X19
	113 Move X1, [X8]
	114 Call 0x21A4F50, X0
	115 Move [X19+88], X0
	116 Move X20, [X31+48]
	117 Move X19, [X31+56]
	118 Move X30, [X31+32]
	119 Move X21, [X31+40]
	120 Add X31, X31, 64
	121 Return 
	122 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01FA86E8 LDR X8, [X8]
	0x01FA86EC CBZ X8, 0x1FA8BB4
	0x01FA86F0 LDR X0, [X8 + 0x1A8]
	0x01FA86F4 CBZ X0, 0x1FA8BB4
	0x01FA86F8 MOV X1, X31
	0x01FA86FC BL 0x3758A6C
	0x01FA8700 TBNZ X0, 0x0, 0x1FA8744
	0x01FA8704 LDRB W8, [X22 + 0x817]
	0x01FA8708 CBNZ W8, 0x1FA8720
	0x01FA870C ADRP X0, 0x2173000
	0x01FA8710 LDR X0, [X0 + 0x528]
	0x01FA8714 BL 0x1C16CF4
	0x01FA8718 MOVZ W8, 0x1
	0x01FA871C STRB W8, [X22 + 0x817]
	0x01FA8720 LDR X8, [X23]
	0x01FA8724 LDR X8, [X8 + 0xB8]
	0x01FA8728 LDR X8, [X8]
	0x01FA872C CBZ X8, 0x1FA8BB4
	0x01FA8730 LDR X0, [X8 + 0x1A8]
	0x01FA8734 CBZ X0, 0x1FA8BB4
	0x01FA8738 MOV X1, X31
	0x01FA873C BL 0x3758C34
	0x01FA8740 TBZ X0, 0x0, 0x1FA895C
	0x01FA8744 LDR X8, [X19 + 0x88]
	0x01FA8748 CBZ X8, 0x1FA8BB4
	0x01FA874C LDR V1, [X31 + 0x2C]
	0x01FA8750 MOVZ W9, 0x1
	0x01FA8754 STRB W9, [X8 + 0x98]
	0x01FA8758 CBNZ X24, 0x1FA877C
	0x01FA875C ADD X1, X31, 0x30
	0x01FA8760 MOV X0, X19
	0x01FA8764 STP S8, S9, [X31 + 0x30]
	0x01FA8768 STP S11, S13, [X31 + 0x38]
	0x01FA876C STP S14, S10, [X31 + 0x40]
	0x01FA8770 BL 0x1FA82D4
	0x01FA8774 MOV V12.16B, V0.16B
	0x01FA8778 MOV V15.16B, V2.16B
	0x01FA877C LDR X0, [X19 + 0x80]
	0x01FA8780 STR S1, [X31 + 0x2C]
	0x01FA8784 CBZ X0, 0x1FA8BB4
	0x01FA8788 MOV X1, X31
	0x01FA878C BL 0x3C32E90
	0x01FA8790 CBZ X0, 0x1FA8BB4
	0x01FA8794 MOV X1, X31
	0x01FA8798 BL 0x3C3DEB4
	0x01FA879C MOV X0, X31
	0x01FA87A0 BL 0x3C2A260
	0x01FA87A4 LDR X8, [X19 + 0x88]
	0x01FA87A8 CBZ X8, 0x1FA8BB4
	0x01FA87AC LDR X0, [X8 + 0x48]
	0x01FA87B0 STP S3, S0, [X31 + 0x18]
	0x01FA87B4 STP S1, S2, [X31 + 0x20]
	0x01FA87B8 STR S12, [X31 + 0x28]
	0x01FA87BC STP S11, S9, [X31 + 0xC]
	0x01FA87C0 STR S8, [X31 + 0x14]
	0x01FA87C4 CBZ X0, 0x1FA8BB4
	0x01FA87C8 MOV X1, X31
	0x01FA87CC BL 0x3C3DEB4
	0x01FA87D0 LDR X8, [X19 + 0x88]
	0x01FA87D4 CBZ X8, 0x1FA8BB4
	0x01FA87D8 LDR X0, [X8 + 0x48]
	0x01FA87DC CBZ X0, 0x1FA8BB4
	0x01FA87E0 MOV X1, X31
	0x01FA87E4 MOV V12.16B, V0.16B
	0x01FA87E8 MOV V8.16B, V1.16B
	0x01FA87EC MOV V11.16B, V2.16B
	0x01FA87F0 MOV V9.16B, V3.16B
	0x01FA87F4 BL 0x3C3F58C
	0x01FA87F8 LDR V3, [X31 + 0x28]
	0x01FA87FC FSUB S2, S15, S2
	0x01FA8800 MOV X0, X31
	0x01FA8804 FSUB S0, S3, S0
	0x01FA8808 LDR V3, [X31 + 0x2C]
	0x01FA880C FSUB S1, S3, S1
	0x01FA8810 BL 0x3C2A8C4
	0x01FA8814 LDR X0, [X19 + 0x80]
	0x01FA8818 STP S0, S2, [X31 + 0x28]
	0x01FA881C STR S1, [X31 + 0x8]
	0x01FA8820 CBZ X0, 0x1FA8BB4
	0x01FA8824 LDP S21, S17, [X31 + 0x18]
	0x01FA8828 LDP S19, S23, [X31 + 0x20]
	0x01FA882C MOV V15.16B, V3.16B
	0x01FA8830 MOV X1, X31
	0x01FA8834 FMUL S0, S21, S12
	0x01FA8838 FMUL S1, S17, S9
	0x01FA883C FMUL S4, S21, S8
	0x01FA8840 FMUL S5, S19, S9
	0x01FA8844 FMUL S7, S17, S11
	0x01FA8848 FMUL S16, S17, S8
	0x01FA884C FMUL S17, S17, S12
	0x01FA8850 FMUL S20, S21, S11
	0x01FA8854 FMUL S21, S21, S9
	0x01FA8858 FMUL S22, S23, S9
	0x01FA885C FMUL S2, S19, S11
	0x01FA8860 FMUL S6, S23, S12
	0x01FA8864 FMUL S18, S19, S12
	0x01FA8868 FMUL S19, S19, S8
	0x01FA886C FADD S0, S0, S1
	0x01FA8870 FADD S1, S4, S5
	0x01FA8874 FADD S4, S20, S22
	0x01FA8878 FSUB S5, S21, S17
	0x01FA887C FMUL S3, S23, S8
	0x01FA8880 FMUL S23, S23, S11
	0x01FA8884 FADD S0, S2, S0
	0x01FA8888 FADD S1, S6, S1
	0x01FA888C FADD S2, S16, S4
	0x01FA8890 FSUB S4, S5, S19
	0x01FA8894 FSUB S8, S0, S3
	0x01FA8898 FSUB S9, S1, S7
	0x01FA889C FSUB S11, S2, S18
	0x01FA88A0 FSUB S12, S4, S23
	0x01FA88A4 BL 0x3C32E90
	0x01FA88A8 MOV X21, X0
	0x01FA88AC MOV V0.16B, V8.16B
	0x01FA88B0 MOV V1.16B, V9.16B
	0x01FA88B4 MOV V2.16B, V11.16B
	0x01FA88B8 MOV V3.16B, V12.16B
	0x01FA88BC MOV X0, X31
	0x01FA88C0 BL 0x3C2A260
	0x01FA88C4 CBZ X21, 0x1FA8BB4
	0x01FA88C8 LDP S23, S24, [X31 + 0x28]
	0x01FA88CC LDR V21, [X31 + 0x8]
	0x01FA88D0 FMUL S4, S15, S3
	0x01FA88D4 FMUL S17, S15, S2
	0x01FA88D8 FMUL S5, S23, S0
	0x01FA88DC FMUL S6, S21, S1
	0x01FA88E0 FMUL S7, S24, S2
	0x01FA88E4 FMUL S16, S23, S1
	0x01FA88E8 FMUL S18, S24, S3
	0x01FA88EC FMUL S19, S21, S0
	0x01FA88F0 FMUL S20, S21, S3
	0x01FA88F4 FMUL S21, S21, S2
	0x01FA88F8 FMUL S22, S23, S2
	0x01FA88FC FMUL S2, S23, S3
	0x01FA8900 FMUL S3, S24, S0
	0x01FA8904 FMUL S0, S15, S0
	0x01FA8908 FMUL S23, S15, S1
	0x01FA890C FMUL S24, S24, S1
	0x01FA8910 FSUB S1, S4, S5
	0x01FA8914 FADD S4, S17, S18
	0x01FA8918 FADD S5, S23, S20
	0x01FA891C FADD S0, S0, S2
	0x01FA8920 FSUB S1, S1, S6
	0x01FA8924 FADD S2, S16, S4
	0x01FA8928 FADD S4, S3, S5
	0x01FA892C FADD S0, S21, S0
	0x01FA8930 FSUB S3, S1, S7
	0x01FA8934 FSUB S2, S2, S19
	0x01FA8938 FSUB S1, S4, S22
	0x01FA893C FSUB S0, S0, S24
	0x01FA8940 MOV X0, X21
	0x01FA8944 MOV X1, X31
	0x01FA8948 BL 0x3C3F7AC
	0x01FA894C LDP S9, S8, [X31 + 0x10]
	0x01FA8950 LDR V11, [X31 + 0xC]
	0x01FA8954 MOV W22, W31
	0x01FA8958 B 0x1FA8960
	0x01FA895C MOVZ W22, 0x1
	0x01FA8960 LDR X8, [X19 + 0x20]
	0x01FA8964 CBZ X8, 0x1FA8BB4
	0x01FA8968 LDR X0, [X8 + 0x28]
	0x01FA896C CBZ X0, 0x1FA8BB4
	0x01FA8970 MOV X1, X31
	0x01FA8974 BL 0x3C32E90
	0x01FA8978 MOV X21, X0
	0x01FA897C MOV X0, X19
	0x01FA8980 BL 0x1FA7A30
	0x01FA8984 CBZ X0, 0x1FA8BB4
	0x01FA8988 LDP S1, S2, [X19 + 0x40]
	0x01FA898C LDR V0, [X19 + 0x3C]
	0x01FA8990 MOV X1, X31
	0x01FA8994 BL 0x3C3DE4C
	0x01FA8998 CBZ X21, 0x1FA8BB4
	0x01FA899C MOV X0, X21
	0x01FA89A0 MOV X1, X31
	0x01FA89A4 BL 0x3C3F62C
	0x01FA89A8 LDR X8, [X19 + 0x20]
	0x01FA89AC CBZ X8, 0x1FA8BB4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X20, 0x2432000
	014 Move W8, [X20+2058]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2152000
	021 Move X0, [X0+2240]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2058], W8
	025 Move W8, [X19+80]
	026 Compare W8, 0
	027 JumpIfNotEqual {53}
	028 Move X20, 0x2432000
	029 Move W8, [X20+2071]
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x2174000
	033 Move X0, [X0+1320]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2071], W8
	037 Move X8, 0x2174000
	038 Move X8, [X8+1320]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move X8, [X8]
	042 Compare X8, 0
	043 JumpIfEqual {209}
	044 Move X0, [X8+440]
	045 Compare X0, 0
	046 JumpIfEqual {209}
	047 Move X1, X31
	048 Call ButtonControl.get_isPressed, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {196}
	053 Add X0, X19, 32
	054 Move X1, X31
	055 Call InputActionProperty.get_action, X0
	056 Compare X0, 0
	057 JumpIfEqual {209}
	058 Move X20, 0x2152000
	059 Move X20, [X20+2240]
	060 Move X1, [X20]
	061 Call InputAction.ReadValue, X0
	062 Move X0, X31
	063 Move V8, V0
	064 Call Time.get_deltaTime
	065 Move V1, [X19+108]
	066 Multiply S0, S8, S0
	067 Add X0, X19, 56
	068 Move X1, X31
	069 Multiply S0, S0, S1
	070 Move [X19+136], S0
	071 Call InputActionProperty.get_action, X0
	072 Compare X0, 0
	073 JumpIfEqual {209}
	074 Move X1, [X20]
	075 Call InputAction.ReadValue, X0
	076 Move X0, X31
	077 Move V8, V0
	078 Call Time.get_deltaTime
	079 Move V1, [X19+112]
	080 Move S4, [X19+96]
	081 Move S2, [X19+100]
	082 Multiply S0, S8, S0
	083 Move V3, [X19+136]
	084 Multiply S0, S0, S1
	085 NotImplemented "Instruction FNEG not yet implemented."
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 NotImplemented "Instruction FCMP not yet implemented."
	089 NotImplemented "Instruction FCSEL not yet implemented."
	090 NotImplemented "Instruction FNEG not yet implemented."
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 NotImplemented "Instruction FCSEL not yet implemented."
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 NotImplemented "Instruction FCSEL not yet implemented."
	095 Move X0, X19
	096 Move [X19+136], S1
	097 Move [X19+144], S0
	098 Call MouseCamera.get_Head, X0
	099 Compare X0, 0
	100 JumpIfEqual {209}
	101 Move X1, X31
	102 Call Transform.get_eulerAngles, X0
	103 Move V1, [X19+140]
	104 Move X0, X19
	105 Subtract S0, S0, S1
	106 Move [X19+124], S0
	107 Call MouseCamera.get_Head, X0
	108 Compare X0, 0
	109 JumpIfEqual {209}
	110 Move X1, X31
	111 Call Transform.get_eulerAngles, X0
	112 Move V4, [X19+136]
	113 Move S2, [X19+120]
	114 Move S3, [X19+124]
	115 Move V0, [X19+116]
	116 Add S1, S1, S4
	117 Move [X19+128], S1
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 Move W8, 0x43B40000
	120 Move S1, W8
	121 Subtract S1, S1, S2
	122 NotImplemented "Instruction FCMP not yet implemented."
	123 NotImplemented "Instruction FABD not yet implemented."
	124 NotImplemented "Instruction FABD not yet implemented."
	125 NotImplemented "Instruction FCMP not yet implemented."
	126 NotImplemented "Instruction FNEG not yet implemented."
	127 NotImplemented "Instruction FNEG not yet implemented."
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 Move [X19+124], S0
	130 Move X0, X19
	131 Call MouseCamera.get_Head, X0
	132 Compare X0, 0
	133 JumpIfEqual {209}
	134 Move X1, X31
	135 Call Transform.get_rotation, X0
	136 Move X8, -21745664
	137 Move [X31+92], S0
	138 Move V9, V1
	139 Move V10, V2
	140 Move V11, V3
	141 Move V2, [X8+260]
	142 Move S0, [X19+124]
	143 Move S1, [X19+128]
	144 Move V3, [X19+132]
	145 Move X0, X31
	146 Multiply S0, S0, S2
	147 Multiply S1, S1, S2
	148 Multiply S2, S3, S2
	149 Call Quaternion.Internal_FromEulerRad, X0
	150 Move V8, [X19+104]
	151 Move X0, X31
	152 Move V12, V0
	153 Move V13, V1
	154 Move V14, V2
	155 Move V15, V3
	156 Call Time.get_deltaTime
	157 Multiply S0, S8, S0
	158 Move [X31], S0
	159 Move V0, [X31+92]
	160 Move V1, V9
	161 Move V2, V10
	162 Move V3, V11
	163 Move V4, V12
	164 Move V5, V13
	165 Move V6, V14
	166 Move V7, V15
	167 Move X0, X31
	168 Call Quaternion.Lerp, X0, X1, V0
	169 Move X0, X19
	170 Move V8, V0
	171 Move V9, V1
	172 Move V10, V2
	173 Move V11, V3
	174 Call MouseCamera.get_Head, X0
	175 Compare X0, 0
	176 JumpIfEqual {209}
	177 Move V0, V8
	178 Move V1, V9
	179 Move V2, V10
	180 Move V3, V11
	181 Move X20, [X31+96]
	182 Move X19, [X31+104]
	183 Move X30, [X31+80]
	184 Move D9, [X31+64]
	185 Move D8, [X31+72]
	186 Move D11, [X31+48]
	187 Move D10, [X31+56]
	188 Move D13, [X31+32]
	189 Move D12, [X31+40]
	190 Move D15, [X31+16]
	191 Move D14, [X31+24]
	192 Move X1, X31
	193 Add X31, X31, 112
	194 Call Transform.set_rotation, X0, X1
	195 Return 
	196 Move X20, [X31+96]
	197 Move X19, [X31+104]
	198 Move X30, [X31+80]
	199 Move D9, [X31+64]
	200 Move D8, [X31+72]
	201 Move D11, [X31+48]
	202 Move D10, [X31+56]
	203 Move D13, [X31+32]
	204 Move D12, [X31+40]
	205 Move D15, [X31+16]
	206 Move D14, [X31+24]
	207 Add X31, X31, 112
	208 Return 
	209 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01FA89B0 LDR X0, [X8 + 0x28]
	0x01FA89B4 CBZ X0, 0x1FA8BB4
	0x01FA89B8 MOV X1, X31
	0x01FA89BC BL 0x3C32E90
	0x01FA89C0 MOV X21, X0
	0x01FA89C4 MOV X0, X19
	0x01FA89C8 BL 0x1FA7A30
	0x01FA89CC CBZ X0, 0x1FA8BB4
	0x01FA89D0 MOV X1, X31
	0x01FA89D4 BL 0x3C3DEB4
	0x01FA89D8 CBZ X21, 0x1FA8BB4
	0x01FA89DC LDP S7, S4, [X19 + 0x50]
	0x01FA89E0 LDP S5, S6, [X19 + 0x48]
	0x01FA89E4 MOV X0, X21
	0x01FA89E8 MOV X1, X31
	0x01FA89EC FMUL S16, S3, S4
	0x01FA89F0 FMUL S17, S0, S5
	0x01FA89F4 FMUL S18, S1, S6
	0x01FA89F8 FMUL S19, S2, S7
	0x01FA89FC FMUL S20, S0, S6
	0x01FA8A00 FMUL S21, S3, S7
	0x01FA8A04 FMUL S22, S2, S4
	0x01FA8A08 FMUL S23, S1, S5
	0x01FA8A0C FMUL S24, S1, S4
	0x01FA8A10 FMUL S1, S1, S7
	0x01FA8A14 FMUL S7, S0, S7
	0x01FA8A18 FMUL S0, S0, S4
	0x01FA8A1C FMUL S4, S2, S5
	0x01FA8A20 FMUL S5, S3, S5
	0x01FA8A24 FMUL S3, S3, S6
	0x01FA8A28 FMUL S6, S2, S6
	0x01FA8A2C FSUB S2, S16, S17

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move V0, 0
	005 Move W9, 0x42820000
	006 Move W8, 0x41F00000
	007 Move [X0+96], D0
	008 Move [X0+108], D0
	009 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	010 Move [X0+104], W8
	011 Move [X0+116], D0
	012 Move X20, 0x2431000
	013 Move W8, [X20+1923]
	014 Move X19, X0
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0x214C000
	018 Move X0, [X0+1440]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1923], W8
	022 Move X8, 0x214C000
	023 Move X8, [X8+1440]
	024 Move X0, X19
	025 Move X1, X31
	026 Move X8, [X8]
	027 Move X8, [X8+184]
	028 Move V0, [X8]
	029 Move V1, [X8+8]
	030 Move [X19+124], D0
	031 Move [X19+132], S1
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call MonoBehaviour..ctor, X0
	036 Return 

