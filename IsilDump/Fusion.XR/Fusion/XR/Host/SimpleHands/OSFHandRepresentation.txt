Type: Fusion.XR.Host.SimpleHands.OSFHandRepresentation

Method: System.Void Awake()

Disassembly:
	0x01F9CAA4 LDR X0, [X0 + 0xC0]
	0x01F9CAA8 BL 0x1C16CF4
	0x01F9CAAC MOVZ W8, 0x1
	0x01F9CAB0 STRB W8, [X22 + 0x7A1]
	0x01F9CAB4 ADRP X22, 0x217F000
	0x01F9CAB8 LDR X22, [X22 + 0xE8]
	0x01F9CABC LDR X0, [X21]
	0x01F9CAC0 STP X31, X31, [X31 + 0x8]
	0x01F9CAC4 STR X31, [X31 + 0x18]
	0x01F9CAC8 BL 0x1C16F10
	0x01F9CACC LDR X1, [X19]
	0x01F9CAD0 MOV X19, X0
	0x01F9CAD4 BL 0x301B7C4
	0x01F9CAD8 LDR X0, [X20]
	0x01F9CADC LDR W8, [X0 + 0xE0]
	0x01F9CAE0 CBNZ W8, 0x1F9CAE8
	0x01F9CAE4 BL 0x1C16DFC
	0x01F9CAE8 LDR X1, [X22]
	0x01F9CAEC MOV X0, X19
	0x01F9CAF0 BL 0x229839C
	0x01F9CAF4 CBZ X19, 0x1F9CB80
	0x01F9CAF8 ADRP X8, 0x217F000
	0x01F9CAFC LDR X8, [X8 + 0xE0]
	0x01F9CB00 ADRP X21, 0x217F000
	0x01F9CB04 ADRP X20, 0x217F000
	0x01F9CB08 MOV X0, X19
	0x01F9CB0C LDR X1, [X8]
	0x01F9CB10 LDR X21, [X21 + 0xD0]
	0x01F9CB14 LDR X20, [X20 + 0xC8]
	0x01F9CB18 ADD X8, X31, 0x8
	0x01F9CB1C BL 0x301CB58
	0x01F9CB20 LDR X1, [X21]
	0x01F9CB24 ADD X0, X31, 0x8
	0x01F9CB28 BL 0x2BC4350
	0x01F9CB2C TBZ X0, 0x0, 0x1F9CB5C
	0x01F9CB30 LDR X19, [X31 + 0x18]
	0x01F9CB34 CBZ X19, 0x1F9CB7C
	0x01F9CB38 MOVZ W1, 0x1
	0x01F9CB3C MOV X0, X19
	0x01F9CB40 MOV X2, X31
	0x01F9CB44 BL 0x3E661F8
	0x01F9CB48 MOVZ W1, 0x2
	0x01F9CB4C MOV X0, X19
	0x01F9CB50 MOV X2, X31
	0x01F9CB54 BL 0x3E661F8
	0x01F9CB58 B 0x1F9CB20
	0x01F9CB5C LDR X1, [X20]
	0x01F9CB60 ADD X0, X31, 0x8
	0x01F9CB64 BL 0x2BC434C
	0x01F9CB68 LDP X20, X19, [X31 + 0x40]
	0x01F9CB6C LDP X22, X21, [X31 + 0x30]
	0x01F9CB70 LDR X30, [X31 + 0x20]
	0x01F9CB74 ADD X31, X31, 0x50
	0x01F9CB78 RET
	0x01F9CB7C BL 0x1C16F20
	0x01F9CB80 BL 0x1C16F20
	0x01F9CB84 B 0x1F9CB90
	0x01F9CB88 B 0x1F9CB90
	0x01F9CB8C B 0x1F9CB90
	0x01F9CB90 MOV X19, X0
	0x01F9CB94 CMP W1, 0x1
	0x01F9CB98 B.NE 0x1F9CBCC
	0x01F9CB9C MOV X0, X19
	0x01F9CBA0 BL 0x3EB1AD0
	0x01F9CBA4 LDR X20, [X0]
	0x01F9CBA8 BL 0x3EB1AE0
	0x01F9CBAC ADRP X8, 0x217F000
	0x01F9CBB0 LDR X8, [X8 + 0xC8]
	0x01F9CBB4 ADD X0, X31, 0x8
	0x01F9CBB8 LDR X1, [X8]
	0x01F9CBBC BL 0x2BC434C
	0x01F9CBC0 CBZ X20, 0x1F9CB68
	0x01F9CBC4 MOV X0, X20
	0x01F9CBC8 BL 0x1C16F18
	0x01F9CBCC MOV X20, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x243E000
	006 Move X21, 0x2158000
	007 Move W8, [X20+1940]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x2180000
	015 Move X0, [X0]
	016 Call 0x1C17CF4
	017 Move X0, 0x2180000
	018 Move X0, [X0+8]
	019 Call 0x1C17CF4
	020 Move X0, 0x2180000
	021 Move X0, [X0+16]
	022 Call 0x1C17CF4
	023 Move X0, 0x2158000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1940], W8
	028 Move X0, [X21]
	029 Move X20, [X19+56]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {48}
	042 Move X8, 0x2180000
	043 Move X8, [X8+8]
	044 Move X0, X19
	045 Move X1, [X8]
	046 Call 0x21A4AF8, X0
	047 Move [X19+56], X0
	048 Move X0, [X21]
	049 Move X20, [X19+64]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {69}
	062 Move X8, 0x2180000
	063 Move X8, [X8]
	064 Move X0, X19
	065 Move X1, [X8]
	066 Call 0x21A4AF8, X0
	067 Move X20, X0
	068 Move [X19+64], X0
	069 Move X20, [X19+64]
	070 Move X0, [X21]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X31
	077 Move X2, X31
	078 Call Object.op_Equality, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {89}
	083 Move X8, 0x2180000
	084 Move X8, [X8+16]
	085 Move X0, X19
	086 Move X1, [X8]
	087 Call 0x21A4F50, X0
	088 Move [X19+64], X0
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Return 

Method: System.Boolean get_IsMeshDisplayed()

Disassembly:
	0x01F9CBD0 B 0x1F9CBD8
	0x01F9CBD4 MOV X19, X0
	0x01F9CBD8 ADRP X8, 0x217F000
	0x01F9CBDC LDR X8, [X8 + 0xC8]
	0x01F9CBE0 LDR X1, [X8]
	0x01F9CBE4 ADD X0, X31, 0x8
	0x01F9CBE8 BL 0x2BC434C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+56]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Renderer.get_enabled, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void DisplayMesh(System.Boolean shouldDisplay)

Disassembly:
	0x01F9CBEC CBNZ X20, 0x1F9CBF8
	0x01F9CBF0 MOV X0, X19
	0x01F9CBF4 BL 0x1D2C690
	0x01F9CBF8 MOV X0, X20
	0x01F9CBFC BL 0x1C16F18
	0x01F9CC00 BL 0x1990590
	0x01F9CC04 STR X30, [X31 - 0x30]!
	0x01F9CC08 STP X22, X21, [X31 + 0x10]
	0x01F9CC0C STP X20, X19, [X31 + 0x20]
	0x01F9CC10 ADRP X22, 0x243D000
	0x01F9CC14 ADRP X21, 0x2158000
	0x01F9CC18 ADRP X20, 0x2158000
	0x01F9CC1C LDRB W8, [X22 + 0x7A2]
	0x01F9CC20 LDR X21, [X21 + 0x1D0]
	0x01F9CC24 LDR X20, [X20 + 0x1C0]
	0x01F9CC28 MOV X19, X0
	0x01F9CC2C TBNZ X8, 0x0, 0x1F9CC68
	0x01F9CC30 ADRP X0, 0x2158000
	0x01F9CC34 LDR X0, [X0 + 0x1B8]
	0x01F9CC38 BL 0x1C16CF4
	0x01F9CC3C ADRP X0, 0x2158000
	0x01F9CC40 LDR X0, [X0 + 0x1C0]
	0x01F9CC44 BL 0x1C16CF4
	0x01F9CC48 ADRP X0, 0x2158000
	0x01F9CC4C LDR X0, [X0 + 0x1D0]
	0x01F9CC50 BL 0x1C16CF4
	0x01F9CC54 ADRP X0, 0x217F000
	0x01F9CC58 LDR X0, [X0 + 0xF0]
	0x01F9CC5C BL 0x1C16CF4
	0x01F9CC60 MOVZ W8, 0x1
	0x01F9CC64 STRB W8, [X22 + 0x7A2]
	0x01F9CC68 MOVZ W8, 0x40400000
	0x01F9CC6C STR W8, [X19 + 0x20]
	0x01F9CC70 LDR X0, [X21]
	0x01F9CC74 BL 0x1C16F10
	0x01F9CC78 LDR X1, [X20]
	0x01F9CC7C MOV X20, X0
	0x01F9CC80 BL 0x301B7C4
	0x01F9CC84 CBZ X20, 0x1F9CD08
	0x01F9CC88 ADRP X8, 0x217F000
	0x01F9CC8C ADRP X9, 0x2158000
	0x01F9CC90 LDR X8, [X8 + 0xF0]
	0x01F9CC94 LDR X9, [X9 + 0x1B8]
	0x01F9CC98 LDR W10, [X20 + 0x1C]
	0x01F9CC9C LDR X1, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x243E000
	007 Move X21, 0x2158000
	008 Move W8, [X22+1941]
	009 Move X21, [X21+1432]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2158000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1941], W8
	021 Move X0, [X21]
	022 Move X21, [X20+56]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Call Object.op_Implicit, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {54}
	034 Move X0, [X20+56]
	035 Compare X0, 0
	036 JumpIfEqual {60}
	037 Move X1, X31
	038 Call Renderer.get_enabled, X0
	039 And W8, W0, 1
	040 And W9, W19, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, [X20+56]
	043 Compare X0, 0
	044 JumpIfEqual {60}
	045 And W1, W19, 1
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Call Renderer.set_enabled, X0, X1
	053 Return 
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return 
	060 Call 0x1C17F20

Method: UnityEngine.Material get_SharedHandMaterial()

Disassembly:
	0x01F9CCA0 LDR X8, [X20 + 0x10]
	0x01F9CCA4 LDR X9, [X9]
	0x01F9CCA8 ADD W10, W10, 0x1
	0x01F9CCAC STR W10, [X20 + 0x1C]
	0x01F9CCB0 CBZ X8, 0x1F9CD08
	0x01F9CCB4 LDRSW X10, [X20 + 0x18]
	0x01F9CCB8 LDR W11, [X8 + 0x18]
	0x01F9CCBC CMP W10, W11
	0x01F9CCC0 B.CS 0x1F9CCD8
	0x01F9CCC4 ADD W9, W10, 0x1
	0x01F9CCC8 ADD X8, X8, X10, 0x3, LSL
	0x01F9CCCC STR W9, [X20 + 0x18]
	0x01F9CCD0 STR X1, [X8 + 0x20]
	0x01F9CCD4 B 0x1F9CCEC
	0x01F9CCD8 LDR X8, [X9 + 0x20]
	0x01F9CCDC MOV X0, X20
	0x01F9CCE0 LDR X8, [X8 + 0xC0]
	0x01F9CCE4 LDR X2, [X8 + 0x70]
	0x01F9CCE8 BL 0x301BF90
	0x01F9CCEC STR X20, [X19 + 0x28]
	0x01F9CCF0 MOV X0, X19
	0x01F9CCF4 LDP X20, X19, [X31 + 0x20]
	0x01F9CCF8 LDP X22, X21, [X31 + 0x10]
	0x01F9CCFC MOV X1, X31
	0x01F9CD00 LDR X30, [X31], #0x30
	0x01F9CD04 B 0x3C36C30
	0x01F9CD08 BL 0x1C16F20
	0x01F9CD0C SUB X31, X31, 0x70
	0x01F9CD10 STP D15, D14, [X31 + 0x10]
	0x01F9CD14 STP D13, D12, [X31 + 0x20]
	0x01F9CD18 STP D11, D10, [X31 + 0x30]
	0x01F9CD1C STP D9, D8, [X31 + 0x40]
	0x01F9CD20 STR X30, [X31 + 0x50]
	0x01F9CD24 STP X20, X19, [X31 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x243E000
	006 Move X20, 0x2158000
	007 Move W8, [X21+1942]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2158000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1942], W8
	019 Move X0, [X20]
	020 Move X20, [X19+56]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {43}
	033 Move X0, [X19+56]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call Renderer.get_sharedMaterial, X0
	042 Return X0
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X0, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1C17F20

Method: System.Void SetHandColor(UnityEngine.Color color)

Disassembly:
	0x01F9CD28 ADRP X20, 0x243D000
	0x01F9CD2C ADRP X19, 0x215E000
	0x01F9CD30 LDRB W8, [X20 + 0x7A3]
	0x01F9CD34 LDR X19, [X19 + 0x4B8]
	0x01F9CD38 MOV V9.16B, V7.16B
	0x01F9CD3C MOV V8.16B, V6.16B
	0x01F9CD40 MOV V10.16B, V5.16B
	0x01F9CD44 MOV V11.16B, V4.16B
	0x01F9CD48 MOV V12.16B, V3.16B
	0x01F9CD4C MOV V13.16B, V2.16B
	0x01F9CD50 MOV V14.16B, V1.16B
	0x01F9CD54 MOV V15.16B, V0.16B
	0x01F9CD58 TBNZ X8, 0x0, 0x1F9CD70
	0x01F9CD5C ADRP X0, 0x215E000
	0x01F9CD60 LDR X0, [X0 + 0x4B8]
	0x01F9CD64 BL 0x1C16CF4
	0x01F9CD68 MOVZ W8, 0x1
	0x01F9CD6C STRB W8, [X20 + 0x7A3]
	0x01F9CD70 MOV V0.16B, V15.16B
	0x01F9CD74 MOV V1.16B, V14.16B
	0x01F9CD78 MOV V2.16B, V13.16B
	0x01F9CD7C MOV V3.16B, V12.16B

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move X0, [X0+56]
	007 Compare X0, 0
	008 JumpIfEqual {29}
	009 Move X1, X31
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Call Renderer.get_material, X0
	015 Compare X0, 0
	016 JumpIfEqual {29}
	017 Move V2, V9
	018 Move V3, V8
	019 Move X30, [X31+32]
	020 Move D9, [X31+16]
	021 Move D8, [X31+24]
	022 Move V0, V11
	023 Move V1, V10
	024 Move X1, X31
	025 Move D11, [X31+48]
	026 Move D10, [X31+56]
	027 Call Material.set_color, X0, X1
	028 Return 
	029 Call 0x1C17F20

Method: System.Void SetHandMaterial(UnityEngine.Material material)

Disassembly:
	0x01F9CD80 MOV X0, X31
	0x01F9CD84 STR W31, [X31 + 0x5C]
	0x01F9CD88 STR W31, [X31 + 0x8]
	0x01F9CD8C STR X31, [X31]
	0x01F9CD90 BL 0x3C2A260
	0x01F9CD94 FMUL S4, S9, S0
	0x01F9CD98 FMUL S5, S11, S3

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+56]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call Renderer.set_sharedMaterial, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void SetHandCommand(Fusion.XR.Host.Rig.HandCommand command)

Disassembly:
	0x01F9CD9C FMUL S7, S8, S1
	0x01F9CDA0 FMUL S16, S9, S1
	0x01F9CDA4 FMUL S17, S10, S3
	0x01F9CDA8 FMUL S18, S8, S0
	0x01F9CDAC FMUL S20, S11, S1
	0x01F9CDB0 FMUL S21, S11, S0
	0x01F9CDB4 FMUL S22, S10, S0
	0x01F9CDB8 FMUL S0, S10, S1
	0x01F9CDBC FMUL S1, S9, S2
	0x01F9CDC0 FMUL S23, S9, S3
	0x01F9CDC4 FMUL S3, S8, S3
	0x01F9CDC8 FMUL S6, S10, S2
	0x01F9CDCC FMUL S19, S11, S2
	0x01F9CDD0 FMUL S24, S8, S2
	0x01F9CDD4 FADD S2, S4, S5
	0x01F9CDD8 FADD S4, S16, S17
	0x01F9CDDC FADD S1, S1, S3
	0x01F9CDE0 FSUB S3, S23, S21
	0x01F9CDE4 FADD S2, S6, S2
	0x01F9CDE8 FADD S4, S18, S4
	0x01F9CDEC FADD S5, S20, S1
	0x01F9CDF0 FSUB S3, S3, S0
	0x01F9CDF4 FSUB S0, S2, S7
	0x01F9CDF8 FSUB S1, S4, S19

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+80], X30
	003 Move [X31+88], X19
	004 Move X8, [X1+16]
	005 Move V0, [X1]
	006 Add X1, X31, 48
	007 Move X19, X0
	008 Move [X31+16], X8
	009 Move [X31], V0
	010 Move X9, [X0]
	011 Move X10, [X9+520]
	012 Move [X31+3], V0
	013 Move [X31+64], X8
	014 Move X2, [X9+528]
	015 Add X8, X31, 24
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X31+40]
	018 NotImplemented "Instruction LDUR not yet implemented."
	019 Move [X31+64], X8
	020 Move [X31+3], V0
	021 Move [X19+48], X8
	022 Move [X19+2], V0
	023 Move X30, [X31+80]
	024 Move X19, [X31+88]
	025 Add X31, X31, 96
	026 Return 

Method: Fusion.XR.Host.Rig.HandCommand AnalyseCommand(Fusion.XR.Host.Rig.HandCommand command)

Disassembly:
	0x01F9CDFC FSUB S2, S5, S22
	0x01F9CE00 FSUB S3, S3, S24
	0x01F9CE04 ADD X0, X31, 0x0
	0x01F9CE08 ADD X1, X31, 0x5C
	0x01F9CE0C MOV X2, X31
	0x01F9CE10 BL 0x3C2A6A8
	0x01F9CE14 ADRP X8, 0xFFFFFFFFFEB4E000
	0x01F9CE18 LDR V0, [X31 + 0x5C]
	0x01F9CE1C LDR V1, [X8 + 0x448]
	0x01F9CE20 MOVZ W8, 0xC3B40000
	0x01F9CE24 FMOV S2, W8
	0x01F9CE28 MOVZ W8, 0x43340000
	0x01F9CE2C LDR X9, [X19]
	0x01F9CE30 FMUL S0, S0, S1
	0x01F9CE34 FMOV S1, W8
	0x01F9CE38 FADD S2, S0, S2
	0x01F9CE3C FCMP S0, S1
	0x01F9CE40 FCSEL S0, S2, S0, GT
	0x01F9CE44 STR S0, [X31 + 0x5C]
	0x01F9CE48 LDR X8, [X9 + 0xB8]
	0x01F9CE4C FABS S2, S0
	0x01F9CE50 LDR V1, [X8]
	0x01F9CE54 FCMP S2, S1
	0x01F9CE58 B.LE 0x1F9CE94
	0x01F9CE5C ADRP X8, 0xFFFFFFFFFEB4E000
	0x01F9CE60 LDR V2, [X8 + 0x104]
	0x01F9CE64 LDR V1, [X31 + 0x70]
	0x01F9CE68 LDR V3, [X31]

ISIL:
	001 Move V1, [X1+4]
	002 Move S0, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move V1, [X1+12]
	005 Move S2, 0.5
	006 Multiply S1, S1, S2
	007 Add S1, S1, S2
	008 Move [X1+12], S1
	009 Move V1, [X1]
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move V0, [X1+12]
	012 Move S1, 0.5
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Move V1, [X1+8]
	015 Move V2, [X0+112]
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move S1, 1
	018 Subtract S0, S1, S0
	019 Move [X1+20], S0
	020 Move X9, [X1+16]
	021 Move V0, [X1]
	022 Move [X8+16], X9
	023 Move [X8], V0
	024 Return X0

Method: System.Void ApplyCommand(Fusion.XR.Host.Rig.HandCommand command)

Disassembly:
	0x01F9CE6C MOVZ W9, 0x1
	0x01F9CE70 FMUL S2, S0, S2
	0x01F9CE74 UNIMPLEMENTED
	0x00000000 INVALID
	0x00000000 INVALID
	0x01F9CE80 FMOV W8, S0
	0x01F9CE84 AND W8, W8, 0x7FFFFFFF
	0x01F9CE88 MOVK W9, 0x7F800000
	0x01F9CE8C CMP W8, W9
	0x01F9CE90 B.CC 0x1F9CED0
	0x01F9CE94 ADRP X19, 0x243C000
	0x01F9CE98 LDRB W8, [X19 + 0x783]
	0x01F9CE9C CBNZ W8, 0x1F9CEB4
	0x01F9CEA0 ADRP X0, 0x2157000
	0x01F9CEA4 LDR X0, [X0 + 0x5A0]
	0x01F9CEA8 BL 0x1C16CF4
	0x01F9CEAC MOVZ W8, 0x1
	0x01F9CEB0 STRB W8, [X19 + 0x783]
	0x01F9CEB4 ADRP X8, 0x2157000
	0x01F9CEB8 LDR X8, [X8 + 0x5A0]
	0x01F9CEBC LDR X8, [X8]
	0x01F9CEC0 LDR X8, [X8 + 0xB8]
	0x01F9CEC4 LDR V0, [X8]
	0x01F9CEC8 LDR V2, [X8 + 0x8]
	0x01F9CECC B 0x1F9CEDC
	0x01F9CED0 LDR V3, [X31 + 0x8]
	0x01F9CED4 FMUL S2, S2, S3
	0x01F9CED8 FDIV S2, S2, S1
	0x01F9CEDC LDP X20, X19, [X31 + 0x60]
	0x01F9CEE0 LDR X30, [X31 + 0x50]
	0x01F9CEE4 LDP D9, D8, [X31 + 0x40]
	0x01F9CEE8 LDP D11, D10, [X31 + 0x30]
	0x01F9CEEC LDP D13, D12, [X31 + 0x20]
	0x01F9CEF0 LDP D15, D14, [X31 + 0x10]
	0x01F9CEF4 MOV S1, V0.S[1]
	0x01F9CEF8 ADD X31, X31, 0x70
	0x01F9CEFC RET
	0x01F9CF00 STR D12, [X31 - 0x50]!
	0x01F9CF04 STP D11, D10, [X31 + 0x10]
	0x01F9CF08 STP D9, D8, [X31 + 0x20]
	0x01F9CF0C STP X30, X21, [X31 + 0x30]
	0x01F9CF10 STP X20, X19, [X31 + 0x40]
	0x01F9CF14 ADRP X20, 0x243C000
	0x01F9CF18 LDRB W8, [X20 + 0x784]
	0x01F9CF1C MOV V8.16B, V3.16B
	0x01F9CF20 MOV V9.16B, V2.16B
	0x01F9CF24 MOV V10.16B, V1.16B
	0x01F9CF28 MOV V11.16B, V0.16B
	0x01F9CF2C MOV X19, X0
	0x01F9CF30 CBNZ W8, 0x1F9CF48
	0x01F9CF34 ADRP X0, 0x2157000
	0x01F9CF38 LDR X0, [X0 + 0x5A8]
	0x01F9CF3C BL 0x1C16CF4
	0x01F9CF40 MOVZ W8, 0x1
	0x01F9CF44 STRB W8, [X20 + 0x784]
	0x01F9CF48 ADRP X20, 0x2157000
	0x01F9CF4C LDR X20, [X20 + 0x5A8]
	0x01F9CF50 LDR X0, [X20]
	0x01F9CF54 LDR W8, [X0 + 0xE0]
	0x01F9CF58 CBNZ W8, 0x1F9CF60
	0x01F9CF5C BL 0x1C16DFC
	0x01F9CF60 ADRP X21, 0x243C000
	0x01F9CF64 LDRB W8, [X21 + 0x785]
	0x01F9CF68 FMUL S0, S11, S11
	0x01F9CF6C FMUL S1, S10, S10
	0x01F9CF70 FADD S0, S0, S1
	0x01F9CF74 FMUL S1, S9, S9
	0x01F9CF78 FADD S12, S1, S0
	0x01F9CF7C CBNZ W8, 0x1F9CF94
	0x01F9CF80 ADRP X0, 0x2157000
	0x01F9CF84 LDR X0, [X0 + 0x5A8]
	0x01F9CF88 BL 0x1C16CF4
	0x01F9CF8C MOVZ W8, 0x1
	0x01F9CF90 STRB W8, [X21 + 0x785]
	0x01F9CF94 LDR X0, [X20]
	0x01F9CF98 FSQRT S12, S12
	0x01F9CF9C LDR W8, [X0 + 0xE0]
	0x01F9CFA0 CBNZ W8, 0x1F9CFA8
	0x01F9CFA4 BL 0x1C16DFC
	0x01F9CFA8 ADRP X8, 0xFFFFFFFFFEB4E000
	0x01F9CFAC LDR V0, [X8 + 0x17C]
	0x01F9CFB0 FCMP S12, S0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], D8
	003 Move [X31+88], X30
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move X8, [X1+16]
	007 Move V0, [X1]
	008 Move X19, X1
	009 Add X1, X31, 48
	010 Move [X31+16], X8
	011 Move [X31], V0
	012 Move X9, [X0]
	013 Move X20, X0
	014 Move X10, [X9+520]
	015 Move [X31+3], V0
	016 Move [X31+64], X8
	017 Move X2, [X9+528]
	018 Add X8, X31, 24
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X8, [X31+40]
	021 NotImplemented "Instruction LDUR not yet implemented."
	022 Move [X31+64], X8
	023 Move [X31+3], V0
	024 Move [X19+16], X8
	025 Move [X19], V0
	026 Move W8, [X20+124]
	027 Compare W8, 0
	028 JumpIfNotEqual {46}
	029 Move X0, [X20+64]
	030 Move W8, 1
	031 Move [X20+124], W8
	032 Compare X0, 0
	033 JumpIfEqual {92}
	034 Move X1, [X20+96]
	035 Move X2, X31
	036 Call Animator.GetLayerIndex, X0, X1
	037 Move X8, [X20+64]
	038 Move [X20+116], W0
	039 Compare X8, 0
	040 JumpIfEqual {92}
	041 Move X1, [X20+104]
	042 Move X0, X8
	043 Move X2, X31
	044 Call Animator.GetLayerIndex, X0, X1
	045 Move [X20+120], W0
	046 Move X0, [X20+64]
	047 Compare X0, 0
	048 JumpIfEqual {92}
	049 Move V0, [X19+12]
	050 Move W1, [X20+116]
	051 Move S8, 1
	052 Move X2, X31
	053 Subtract S0, S8, S0
	054 Call Animator.SetLayerWeight, X0, X1, V0
	055 Move X0, [X20+64]
	056 Compare X0, 0
	057 JumpIfEqual {92}
	058 Move V0, [X19]
	059 Move W1, [X20+120]
	060 Move X2, X31
	061 Subtract S0, S8, S0
	062 Call Animator.SetLayerWeight, X0, X1, V0
	063 Move X0, [X20+64]
	064 Compare X0, 0
	065 JumpIfEqual {92}
	066 Move X1, [X20+80]
	067 Move V0, [X19+8]
	068 Move X2, X31
	069 Call Animator.SetFloat, X0, X1, V0
	070 Move X0, [X20+64]
	071 Compare X0, 0
	072 JumpIfEqual {92}
	073 Move V0, [X19+20]
	074 Move X1, [X20+72]
	075 Move S1, 1
	076 Move X2, X31
	077 Subtract S0, S1, S0
	078 Call Animator.SetFloat, X0, X1, V0
	079 Move X0, [X20+64]
	080 Compare X0, 0
	081 JumpIfEqual {92}
	082 Move X1, [X20+88]
	083 Move W2, [X19+16]
	084 Move X3, X31
	085 Call Animator.SetInteger, X0, X1, X2
	086 Move X20, [X31+96]
	087 Move X19, [X31+104]
	088 Move X30, [X31+88]
	089 Move V8, [X31+80]
	090 Add X31, X31, 112
	091 Return 
	092 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01F9CFB4 B.LE 0x1F9CFC8
	0x01F9CFB8 FDIV S0, S11, S12
	0x01F9CFBC FDIV S1, S10, S12
	0x01F9CFC0 FDIV S2, S9, S12
	0x01F9CFC4 B 0x1F9D000
	0x01F9CFC8 ADRP X20, 0x243C000
	0x01F9CFCC LDRB W8, [X20 + 0x783]
	0x01F9CFD0 CBNZ W8, 0x1F9CFE8
	0x01F9CFD4 ADRP X0, 0x2157000
	0x01F9CFD8 LDR X0, [X0 + 0x5A0]
	0x01F9CFDC BL 0x1C16CF4
	0x01F9CFE0 MOVZ W8, 0x1
	0x01F9CFE4 STRB W8, [X20 + 0x783]
	0x01F9CFE8 ADRP X8, 0x2157000
	0x01F9CFEC LDR X8, [X8 + 0x5A0]
	0x01F9CFF0 LDR X8, [X8]
	0x01F9CFF4 LDR X8, [X8 + 0xB8]
	0x01F9CFF8 LDP S0, S1, [X8]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move W8, [X0+125]
	004 Compare W8, 0
	005 JumpIfEqual {17}
	006 Move X8, [X0+48]
	007 Move V0, [X0+2]
	008 Add X1, X31, 32
	009 Move [X31+16], X8
	010 Move [X31], V0
	011 Move X9, [X0]
	012 Move X10, [X9+536]
	013 Move [X31+2], V0
	014 Move [X31+48], X8
	015 Move X2, [X9+544]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X30, [X31+64]
	018 Add X31, X31, 80
	019 Return 

Method: System.Boolean get_isVisible()

Disassembly:
	0x01F9CFFC LDR V2, [X8 + 0x8]
	0x01F9D000 CBZ X19, 0x1F9D054

ISIL:
	001 Move W0, [X0+125]
	002 Return X0

Method: System.Void set_isVisible(System.Boolean value)

Disassembly:
	0x01F9D004 MOV X0, X19
	0x01F9D008 MOV X1, X31
	0x01F9D00C BL 0x3C40A48

ISIL:
	001 And W8, W1, 1
	002 Move [X0+125], W8
	003 Return 

Method: System.Void OnBecameVisible()

Disassembly:
	0x01F9D010 ADRP X8, 0xFFFFFFFFFEB4D000
	0x01F9D014 MOV V3.16B, V0.16B
	0x01F9D018 LDR V0, [X8 + 0x448]

ISIL:
	001 Move W8, 1
	002 Move [X0+125], W8
	003 Return 

Method: System.Void OnBecameInvisible()

Disassembly:
	0x01F9D01C MOV V4.16B, V1.16B
	0x01F9D020 FMUL S1, S12, S8

ISIL:
	001 Move [X0+125], W31
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x01F9D024 LDP X20, X19, [X31 + 0x40]
	0x01F9D028 LDP X30, X21, [X31 + 0x30]
	0x01F9D02C LDP D9, D8, [X31 + 0x20]
	0x01F9D030 LDP D11, D10, [X31 + 0x10]
	0x01F9D034 MOV V5.16B, V2.16B
	0x01F9D038 FMUL S0, S1, S0
	0x01F9D03C MOV V1.16B, V3.16B
	0x01F9D040 MOV V2.16B, V4.16B
	0x01F9D044 MOV V3.16B, V5.16B
	0x01F9D048 MOV X0, X31
	0x01F9D04C LDR V12, [X31], #0x50
	0x01F9D050 B 0x3C2A758
	0x01F9D054 BL 0x1C16F20
	0x01F9D058 STP D15, D14, [X31 - 0x60]!
	0x01F9D05C STP D13, D12, [X31 + 0x10]
	0x01F9D060 STP D11, D10, [X31 + 0x20]
	0x01F9D064 STP D9, D8, [X31 + 0x30]
	0x01F9D068 STR X30, [X31 + 0x40]
	0x01F9D06C STP X20, X19, [X31 + 0x50]
	0x01F9D070 CBZ X1, 0x1F9D154
	0x01F9D074 MOV X20, X1
	0x01F9D078 MOV X19, X0
	0x01F9D07C MOV X0, X1
	0x01F9D080 MOV X1, X31
	0x01F9D084 MOV V8.16B, V7.16B
	0x01F9D088 MOV V10.16B, V6.16B
	0x01F9D08C MOV V9.16B, V5.16B
	0x01F9D090 MOV V11.16B, V4.16B
	0x01F9D094 MOV V12.16B, V3.16B
	0x01F9D098 BL 0x3C3DE4C
	0x01F9D09C MOV X0, X20
	0x01F9D0A0 MOV X1, X31
	0x01F9D0A4 MOV V13.16B, V0.16B
	0x01F9D0A8 MOV V14.16B, V1.16B
	0x01F9D0AC MOV V15.16B, V2.16B
	0x01F9D0B0 BL 0x3C3DEB4
	0x01F9D0B4 FMUL S4, S12, S3
	0x01F9D0B8 FMUL S5, S10, S0
	0x01F9D0BC FMUL S16, S11, S3
	0x01F9D0C0 FMUL S19, S9, S0
	0x01F9D0C4 FMUL S20, S11, S0
	0x01F9D0C8 FMUL S0, S12, S0
	0x01F9D0CC FMUL S22, S9, S3
	0x01F9D0D0 FMUL S3, S10, S3
	0x01F9D0D4 FMUL S6, S9, S1
	0x01F9D0D8 FMUL S17, S10, S1
	0x01F9D0DC FMUL S21, S12, S1
	0x01F9D0E0 FMUL S1, S11, S1
	0x01F9D0E4 FADD S4, S4, S5
	0x01F9D0E8 FSUB S0, S3, S0
	0x01F9D0EC FMUL S7, S11, S2
	0x01F9D0F0 FMUL S18, S12, S2
	0x01F9D0F4 FMUL S23, S10, S2
	0x01F9D0F8 FMUL S2, S9, S2
	0x01F9D0FC FADD S3, S6, S4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x243D000
	010 Move X25, 0x217F000
	011 Move X23, 0x217F000
	012 Move X22, 0x217F000
	013 Move X21, 0x217F000
	014 Move X20, 0x217F000
	015 Move W8, [X24+1943]
	016 Move X25, [X25+24]
	017 Move X23, [X23+32]
	018 Move X22, [X22+40]
	019 Move X21, [X21+48]
	020 Move X20, [X20+56]
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0x217F000
	027 Move X0, [X0+40]
	028 Call 0x1C17CF4
	029 Move X0, 0x217F000
	030 Move X0, [X0+32]
	031 Call 0x1C17CF4
	032 Move X0, 0x217F000
	033 Move X0, [X0+56]
	034 Call 0x1C17CF4
	035 Move X0, 0x217F000
	036 Move X0, [X0+24]
	037 Call 0x1C17CF4
	038 Move X0, 0x217F000
	039 Move X0, [X0+48]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X24+1943], W8
	043 Move X9, [X25]
	044 Move X8, [X23]
	045 NotImplemented "Instruction MOVI not yet implemented."
	046 Move X0, X19
	047 Move X24, [X31+16]
	048 Move X23, [X31+24]
	049 Move [X19+72], X9
	050 Move [X19+80], X8
	051 Move X9, [X22]
	052 Move X8, [X21]
	053 Move X22, [X31+32]
	054 Move X21, [X31+40]
	055 Move X1, X31
	056 Move [X19+88], X9
	057 Move [X19+96], X8
	058 Move X8, [X20]
	059 Move W9, 0xCCCD
	060 NotImplemented "Instruction MOVK not yet implemented."
	061 Move [X19+112], W9
	062 Move [X19+104], X8
	063 Move [X19+116], D0
	064 Move X20, [X31+48]
	065 Move X19, [X31+56]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Call MonoBehaviour..ctor, X0
	069 Return 

Method: UnityEngine.GameObject Fusion.XR.Host.Rig.IHandRepresentation.get_gameObject()

Disassembly:
	0x01F9D100 FSUB S0, S0, S1
	0x01F9D104 FSUB S3, S3, S7

ISIL:
	001 Move X1, X31
	002 Call Component.get_gameObject, X0
	003 Return X0

