Type: MagicLightProbes.EquivalentProbesOptimization/<ExecutePass>d__0

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x031D07AC MOV X0, X20
	0x031D07B0 LDR X8, [X8 + 0xC0]
	0x031D07B4 LDR X2, [X8 + 0x70]
	0x031D07B8 BL 0x301BF90
	0x031D07BC LDR W8, [X19 + 0x20]
	0x031D07C0 CMP W8, 0x2
	0x031D07C4 B.EQ 0x31D0800
	0x031D07C8 CMP W8, 0x1
	0x031D07CC B.EQ 0x31D082C
	0x031D07D0 CBNZ W8, 0x31D08C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x031D07DC LDR X8, [X19 + 0x60]

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x031D07E0 CBZ X8, 0x31D0988
	0x031D07E4 LDRSW X9, [X19 + 0x68]
	0x031D07E8 LDR W11, [X8 + 0x18]
	0x031D07EC CMP W9, W11
	0x031D07F0 B.CS 0x31D0984
	0x031D07F4 LDR X0, [X10 + 0xB8]
	0x031D07F8 CBNZ X0, 0x31D0854
	0x031D07FC B 0x31D0988
	0x031D0800 LDR X10, [X19 + 0x30]
	0x031D0804 CBZ X10, 0x31D0988
	0x031D0808 LDR X8, [X19 + 0x60]
	0x031D080C CBZ X8, 0x31D0988
	0x031D0810 LDRSW X9, [X19 + 0x68]
	0x031D0814 LDR W11, [X8 + 0x18]
	0x031D0818 CMP W9, W11
	0x031D081C B.CS 0x31D0984
	0x031D0820 LDR X0, [X10 + 0xA0]
	0x031D0824 CBNZ X0, 0x31D0854
	0x031D0828 B 0x31D0988
	0x031D082C LDR X10, [X19 + 0x30]
	0x031D0830 CBZ X10, 0x31D0988
	0x031D0834 LDR X8, [X19 + 0x60]
	0x031D0838 CBZ X8, 0x31D0988
	0x031D083C LDRSW X9, [X19 + 0x68]
	0x031D0840 LDR W11, [X8 + 0x18]
	0x031D0844 CMP W9, W11
	0x031D0848 B.CS 0x31D0984
	0x031D084C LDR X0, [X10 + 0x98]
	0x031D0850 CBZ X0, 0x31D0988
	0x031D0854 MOVZ W11, 0xC
	0x031D0858 LDR W12, [X0 + 0x1C]
	0x031D085C NOP
	0x031D0860 MADD X8, X9, X11, X8
	0x031D0864 LDR X10, [X0 + 0x10]
	0x031D0868 LDP S0, S1, [X8 + 0x20]
	0x031D086C LDR V2, [X8 + 0x28]
	0x031D0870 LDR X8, [X24]
	0x031D0874 ADD W9, W12, 0x1
	0x031D0878 STR W9, [X0 + 0x1C]
	0x031D087C CBZ X10, 0x31D0988
	0x031D0880 LDRSW X9, [X0 + 0x18]
	0x031D0884 LDR W11, [X10 + 0x18]
	0x031D0888 CMP W9, W11
	0x031D088C B.CS 0x31D08B0
	0x031D0890 ADD W8, W9, 0x1
	0x031D0894 MOVZ W11, 0xC
	0x031D0898 STR W8, [X0 + 0x18]
	0x031D089C NOP
	0x031D08A0 MADD X8, X9, X11, X10
	0x031D08A4 STP S0, S1, [X8 + 0x20]
	0x031D08A8 STR S2, [X8 + 0x28]
	0x031D08AC B 0x31D08C0
	0x031D08B0 LDR X8, [X8 + 0x20]
	0x031D08B4 LDR X8, [X8 + 0xC0]
	0x031D08B8 LDR X1, [X8 + 0x70]
	0x031D08BC BL 0x30CC1B4
	0x031D08C0 LDR X9, [X19 + 0x60]
	0x031D08C4 CBZ X9, 0x31D0988
	0x031D08C8 LDR X8, [X19 + 0x28]
	0x031D08CC CBZ X8, 0x31D0988
	0x031D08D0 LDR W10, [X8 + 0x370]
	0x031D08D4 LDR V0, [X9 + 0x18]
	0x031D08D8 LDR W11, [X8 + 0x374]
	0x031D08DC MOVZ W9, 0x42C80000
	0x031D08E0 SCVTF S1, W10
	0x031D08E4 SCVTF S0, S0
	0x031D08E8 FDIV S0, S1, S0
	0x031D08EC FMOV S1, W9
	0x031D08F0 ADD W9, W10, 0x1
	0x031D08F4 STR W9, [X8 + 0x370]
	0x031D08F8 ADD W9, W11, 0x1
	0x031D08FC CMP W9, 0x3E8
	0x031D0900 FMUL S0, S0, S1
	0x031D0904 CSINC W9, W31, W11, EQ
	0x031D0908 STR S0, [X8 + 0x37C]
	0x031D090C STR W9, [X8 + 0x374]
	0x031D0910 B.EQ 0x31D0974
	0x031D0914 LDR W8, [X19 + 0x68]
	0x031D0918 ADD W8, W8, 0x1
	0x031D091C STR W8, [X19 + 0x68]
	0x031D0920 LDR X9, [X19 + 0x60]
	0x031D0924 CBZ X9, 0x31D0988
	0x031D0928 LDR W10, [X9 + 0x18]
	0x031D092C CMP W8, W10
	0x031D0930 B.LT 0x31D066C
	0x031D0934 STR X31, [X19 + 0x60]
	0x031D0938 LDR W8, [X19 + 0x20]
	0x031D093C CBNZ W8, 0x31D0F40
	0x031D0940 LDRB W8, [X19 + 0x38]
	0x031D0944 CBNZ W8, 0x31D0F40
	0x031D0948 LDR X8, [X19 + 0x28]
	0x031D094C CBZ X8, 0x31D0988
	0x031D0950 ADRP X9, 0xF4F000
	0x031D0954 LDR X9, [X9 + 0xD80]
	0x031D0958 MOVI V0.2D, 0x0
	0x031D095C MOV W1, W31
	0x031D0960 LDR X9, [X9]
	0x031D0964 STR D0, [X8 + 0x370]
	0x031D0968 STR X9, [X8 + 0x368]
	0x031D096C STR W31, [X19 + 0x68]
	0x031D0970 B 0x31D0F2C
	0x031D0974 MOVZ W0, 0x1
	0x031D0978 STR X31, [X19 + 0x18]
	0x031D097C STR W0, [X19 + 0x10]
	0x031D0980 B 0x31D0F60
	0x031D0984 BL 0x1C16F28
	0x031D0988 BL 0x1C16F20
	0x031D098C LDR X20, [X19 + 0x48]
	0x031D0990 CBZ X20, 0x31D0988
	0x031D0994 LDR W1, [X20 + 0x18]
	0x031D0998 ADRP X26, 0xF4F000
	0x031D099C LDR X26, [X26 + 0xD60]
	0x031D09A0 MOV W0, W31
	0x031D09A4 MOV X2, X31
	0x031D09A8 BL 0x3C309A8
	0x031D09AC LDR X2, [X22]
	0x031D09B0 MOV W1, W0
	0x031D09B4 MOV X0, X20
	0x031D09B8 BL 0x30CBE84
	0x031D09BC LDR X1, [X26]
	0x031D09C0 MOV X0, X20
	0x031D09C4 BL 0x30CDB08
	0x031D09C8 LDR X8, [X19 + 0x50]
	0x031D09CC CBZ X8, 0x31D0988
	0x031D09D0 LDR V0, [X19 + 0x58]
	0x031D09D4 LDR V1, [X8 + 0x18]
	0x031D09D8 LDRB W8, [X21 + 0x5D7]
	0x031D09DC LDR X20, [X19 + 0x28]
	0x031D09E0 FMOV S2, 1
	0x031D09E4 SCVTF S8, S1
	0x031D09E8 FSUB S9, S2, S0
	0x031D09EC CBNZ W8, 0x31D0A04
	0x031D09F0 ADRP X0, 0xF23000
	0x031D09F4 LDR X0, [X0 + 0x5A8]
	0x031D09F8 BL 0x1C16CF4
	0x031D09FC MOVZ W8, 0x1
	0x031D0A00 STRB W8, [X21 + 0x5D7]
	0x031D0A04 LDR X0, [X25]
	0x031D0A08 FMUL S9, S9, S8
	0x031D0A0C LDR W8, [X0 + 0xE0]
	0x031D0A10 CBNZ W8, 0x31D0A18
	0x031D0A14 BL 0x1C16DFC
	0x031D0A18 FCVT S8, S9
	0x031D0A1C ADD X0, X31, 0x18
	0x031D0A20 MOV V0.16B, V8.16B
	0x031D0A24 BL 0x3EB1C00
	0x031D0A28 FCMP S9, 0x0
	0x031D0A2C B.GE 0x31D0A48
	0x031D0A30 FMOV D1, -0.5
	0x031D0A34 FCMP D0, D1
	0x031D0A38 B.NE 0x31D0A70
	0x031D0A3C LDR V0, [X31 + 0x18]
	0x031D0A40 FMOV D1, -1
	0x031D0A44 B 0x31D0A5C
	0x031D0A48 FMOV D1, 0.5
	0x031D0A4C FCMP D0, D1
	0x031D0A50 B.NE 0x31D0A7C
	0x031D0A54 LDR V0, [X31 + 0x18]
	0x031D0A58 FMOV D1, 1
	0x031D0A5C FCVTZS X8, D0
	0x031D0A60 FADD D1, D0, D1
	0x031D0A64 ANDS X31, X8, 0x1
	0x031D0A68 FCSEL D0, D0, D1, EQ
	0x031D0A6C B 0x31D0A84
	0x031D0A70 FADD D0, D8, D1
	0x031D0A74 FRINTP D0, D0
	0x031D0A78 B 0x31D0A84
	0x031D0A7C FADD D0, D8, D1
	0x031D0A80 FRINTM D0, D0
	0x031D0A84 CBZ X20, 0x31D0988
	0x031D0A88 FCVTZS W8, D0
	0x031D0A8C MOVZ X9, 0x7FF00000
	0x031D0A90 SCVTF S1, W8
	0x031D0A94 MOVZ W8, 0xCF000000
	0x031D0A98 FMOV D2, X9
	0x031D0A9C LDR W9, [X20 + 0x370]
	0x031D0AA0 FMOV S3, W8
	0x031D0AA4 MOVZ W8, 0x42C80000
	0x031D0AA8 FCMP D0, D2
	0x031D0AAC FMOV S0, W8
	0x031D0AB0 LDR W8, [X20 + 0x374]
	0x031D0AB4 SCVTF S2, W9
	0x031D0AB8 ADD W9, W9, 0x1
	0x031D0ABC FCSEL S1, S3, S1, EQ
	0x031D0AC0 STR W9, [X20 + 0x370]
	0x031D0AC4 ADD W9, W8, 0x1
	0x031D0AC8 FDIV S1, S2, S1
	0x031D0ACC CMP W9, 0x64
	0x031D0AD0 FMUL S0, S1, S0
	0x031D0AD4 CSINC W8, W31, W8, EQ
	0x031D0AD8 STR S0, [X20 + 0x37C]
	0x031D0ADC STR W8, [X20 + 0x374]
	0x031D0AE0 B.EQ 0x31D0D0C
	0x031D0AE4 LDR W8, [X19 + 0x68]
	0x031D0AE8 ADD W20, W8, 0x1
	0x031D0AEC STR W20, [X19 + 0x68]
	0x031D0AF0 LDR X8, [X19 + 0x50]
	0x031D0AF4 CBZ X8, 0x31D0988
	0x031D0AF8 LDR V1, [X8 + 0x18]
	0x031D0AFC LDR V0, [X19 + 0x58]
	0x031D0B00 ADRP X21, 0x1209000
	0x031D0B04 LDRB W8, [X21 + 0x5D7]
	0x031D0B08 SCVTF S8, S1
	0x031D0B0C FMOV S1, 1
	0x031D0B10 FSUB S9, S1, S0
	0x031D0B14 CBNZ W8, 0x31D0B2C
	0x031D0B18 ADRP X0, 0xF23000
	0x031D0B1C LDR X0, [X0 + 0x5A8]
	0x031D0B20 BL 0x1C16CF4
	0x031D0B24 MOVZ W8, 0x1
	0x031D0B28 STRB W8, [X21 + 0x5D7]
	0x031D0B2C ADRP X25, 0xF23000
	0x031D0B30 LDR X25, [X25 + 0x5A8]
	0x031D0B34 FMUL S9, S9, S8
	0x031D0B38 LDR X0, [X25]
	0x031D0B3C LDR W8, [X0 + 0xE0]
	0x031D0B40 CBNZ W8, 0x31D0B48
	0x031D0B44 BL 0x1C16DFC
	0x031D0B48 FCVT S8, S9
	0x031D0B4C ADD X0, X31, 0x18
	0x031D0B50 MOV V0.16B, V8.16B
	0x031D0B54 BL 0x3EB1C00
	0x031D0B58 FCMP S9, 0x0
	0x031D0B5C B.GE 0x31D0B78
	0x031D0B60 FMOV D1, -0.5
	0x031D0B64 FCMP D0, D1
	0x031D0B68 B.NE 0x31D0BA0
	0x031D0B6C LDR V0, [X31 + 0x18]
	0x031D0B70 FMOV D1, -1
	0x031D0B74 B 0x31D0B8C
	0x031D0B78 FMOV D1, 0.5
	0x031D0B7C FCMP D0, D1
	0x031D0B80 B.NE 0x31D0BAC
	0x031D0B84 LDR V0, [X31 + 0x18]
	0x031D0B88 FMOV D1, 1
	0x031D0B8C FCVTZS X8, D0
	0x031D0B90 FADD D1, D0, D1
	0x031D0B94 ANDS X31, X8, 0x1
	0x031D0B98 FCSEL D0, D0, D1, EQ
	0x031D0B9C B 0x31D0BB4
	0x031D0BA0 FADD D0, D8, D1
	0x031D0BA4 FRINTP D0, D0
	0x031D0BA8 B 0x31D0BB4
	0x031D0BAC FADD D0, D8, D1
	0x031D0BB0 FRINTM D0, D0
	0x031D0BB4 MOVZ X8, 0x7FF00000
	0x031D0BB8 ADRP X22, 0xF27000
	0x031D0BBC FMOV D1, X8
	0x031D0BC0 LDR X22, [X22 + 0x980]
	0x031D0BC4 FCVTZS W9, D0
	0x031D0BC8 FCMP D0, D1
	0x031D0BCC MOVZ W8, 0x80000000
	0x031D0BD0 CSEL W8, W8, W9, EQ
	0x031D0BD4 CMP W20, W8
	0x031D0BD8 B.LT 0x31D098C
	0x031D0BDC LDRB W8, [X19 + 0x38]
	0x031D0BE0 CBZ W8, 0x31D0D18
	0x031D0BE4 LDR X0, [X19 + 0x48]
	0x031D0BE8 CBZ X0, 0x31D0988
	0x031D0BEC MOV W20, W31
	0x031D0BF0 MOVZ W25, 0xC
	0x031D0BF4 LDR W8, [X0 + 0x18]
	0x031D0BF8 CMP W20, W8
	0x031D0BFC B.GE 0x31D0938
	0x031D0C00 LDR W8, [X19 + 0x20]
	0x031D0C04 CMP W8, 0x2
	0x031D0C08 B.EQ 0x31D0C28
	0x031D0C0C CMP W8, 0x1
	0x031D0C10 B.EQ 0x31D0C84
	0x031D0C14 CBNZ W8, 0x31D0CFC
	0x031D0C18 LDR X8, [X19 + 0x30]
	0x031D0C1C CBZ X8, 0x31D0988
	0x031D0C20 LDR X21, [X8 + 0xB8]
	0x031D0C24 B 0x31D0C90
	0x031D0C28 LDR X8, [X19 + 0x30]
	0x031D0C2C CBZ X8, 0x31D0988
	0x031D0C30 LDR X2, [X22]
	0x031D0C34 LDR X21, [X8 + 0xA0]
	0x031D0C38 MOV W1, W20
	0x031D0C3C BL 0x30CBE84
	0x031D0C40 CBZ X21, 0x31D0988
	0x031D0C44 LDR W10, [X21 + 0x1C]
	0x031D0C48 LDR X9, [X21 + 0x10]
	0x031D0C4C LDR X8, [X24]
	0x031D0C50 ADD W10, W10, 0x1
	0x031D0C54 STR W10, [X21 + 0x1C]
	0x031D0C58 CBZ X9, 0x31D0988
	0x031D0C5C LDRSW X10, [X21 + 0x18]
	0x031D0C60 LDR W11, [X9 + 0x18]
	0x031D0C64 CMP W10, W11
	0x031D0C68 B.CS 0x31D0CE8
	0x031D0C6C ADD W8, W10, 0x1
	0x031D0C70 MADD X9, X10, X25, X9
	0x031D0C74 STR W8, [X21 + 0x18]
	0x031D0C78 STP S0, S1, [X9 + 0x20]
	0x031D0C7C STR S2, [X9 + 0x28]
	0x031D0C80 B 0x31D0CFC
	0x031D0C84 LDR X8, [X19 + 0x30]
	0x031D0C88 CBZ X8, 0x31D0988
	0x031D0C8C LDR X21, [X8 + 0x98]
	0x031D0C90 LDR X2, [X22]
	0x031D0C94 MOV W1, W20
	0x031D0C98 BL 0x30CBE84
	0x031D0C9C CBZ X21, 0x31D0988
	0x031D0CA0 LDR W10, [X21 + 0x1C]
	0x031D0CA4 LDR X8, [X21 + 0x10]
	0x031D0CA8 LDR X9, [X24]
	0x031D0CAC ADD W10, W10, 0x1
	0x031D0CB0 STR W10, [X21 + 0x1C]
	0x031D0CB4 CBZ X8, 0x31D0988
	0x031D0CB8 LDRSW X10, [X21 + 0x18]
	0x031D0CBC LDR W11, [X8 + 0x18]
	0x031D0CC0 CMP W10, W11
	0x031D0CC4 B.CS 0x31D0CE0
	0x031D0CC8 ADD W9, W10, 0x1
	0x031D0CCC MADD X8, X10, X25, X8
	0x031D0CD0 STR W9, [X21 + 0x18]
	0x031D0CD4 STP S0, S1, [X8 + 0x20]
	0x031D0CD8 STR S2, [X8 + 0x28]
	0x031D0CDC B 0x31D0CFC
	0x031D0CE0 LDR X8, [X9 + 0x20]
	0x031D0CE4 B 0x31D0CEC
	0x031D0CE8 LDR X8, [X8 + 0x20]
	0x031D0CEC LDR X8, [X8 + 0xC0]
	0x031D0CF0 MOV X0, X21
	0x031D0CF4 LDR X1, [X8 + 0x70]
	0x031D0CF8 BL 0x30CC1B4
	0x031D0CFC LDR X0, [X19 + 0x48]
	0x031D0D00 ADD W20, W20, 0x1
	0x031D0D04 CBNZ X0, 0x31D0BF4
	0x031D0D08 B 0x31D0988
	0x031D0D0C MOVZ W8, 0x2
	0x031D0D10 STR X31, [X19 + 0x18]
	0x031D0D14 B 0x31D0E7C
	0x031D0D18 LDR X8, [X19 + 0x28]
	0x031D0D1C CBZ X8, 0x31D0988
	0x031D0D20 LDR X0, [X8 + 0x280]
	0x031D0D24 CBZ X0, 0x31D0988
	0x031D0D28 ADRP X8, 0xF4F000
	0x031D0D2C LDR X1, [X19 + 0x40]
	0x031D0D30 LDR X8, [X8 + 0xCD0]
	0x031D0D34 LDR X2, [X8]
	0x031D0D38 BL 0x301C194
	0x031D0D3C LDR X0, [X19 + 0x40]
	0x031D0D40 CBZ X0, 0x31D0988
	0x031D0D44 MOV W20, W31
	0x031D0D48 MOVZ W22, 0xC
	0x031D0D4C LDR W8, [X0 + 0x18]
	0x031D0D50 CMP W20, W8
	0x031D0D54 B.GE 0x31D0938
	0x031D0D58 LDR W8, [X19 + 0x20]
	0x031D0D5C CMP W8, 0x2
	0x031D0D60 B.EQ 0x31D0D80
	0x031D0D64 CMP W8, 0x1
	0x031D0D68 B.EQ 0x31D0DE8
	0x031D0D6C CBNZ W8, 0x31D0E6C
	0x031D0D70 LDR X8, [X19 + 0x30]
	0x031D0D74 CBZ X8, 0x31D0988
	0x031D0D78 LDR X21, [X8 + 0xB8]
	0x031D0D7C B 0x31D0DF4
	0x031D0D80 LDR X8, [X19 + 0x30]
	0x031D0D84 CBZ X8, 0x31D0988
	0x031D0D88 LDR X2, [X23]
	0x031D0D8C LDR X21, [X8 + 0xA0]
	0x031D0D90 MOV W1, W20
	0x031D0D94 BL 0x301BCCC
	0x031D0D98 CBZ X0, 0x31D0988
	0x031D0D9C CBZ X21, 0x31D0988
	0x031D0DA0 LDR W10, [X21 + 0x1C]
	0x031D0DA4 LDP S0, S1, [X0 + 0x18]
	0x031D0DA8 LDR V2, [X0 + 0x20]
	0x031D0DAC LDR X9, [X21 + 0x10]
	0x031D0DB0 LDR X8, [X24]
	0x031D0DB4 ADD W10, W10, 0x1
	0x031D0DB8 STR W10, [X21 + 0x1C]
	0x031D0DBC CBZ X9, 0x31D0988
	0x031D0DC0 LDRSW X10, [X21 + 0x18]
	0x031D0DC4 LDR W11, [X9 + 0x18]
	0x031D0DC8 CMP W10, W11
	0x031D0DCC B.CS 0x31D0E58
	0x031D0DD0 ADD W8, W10, 0x1
	0x031D0DD4 MADD X9, X10, X22, X9
	0x031D0DD8 STR W8, [X21 + 0x18]
	0x031D0DDC STP S0, S1, [X9 + 0x20]
	0x031D0DE0 STR S2, [X9 + 0x28]
	0x031D0DE4 B 0x31D0E6C
	0x031D0DE8 LDR X8, [X19 + 0x30]
	0x031D0DEC CBZ X8, 0x31D0988
	0x031D0DF0 LDR X21, [X8 + 0x98]
	0x031D0DF4 LDR X2, [X23]
	0x031D0DF8 MOV W1, W20
	0x031D0DFC BL 0x301BCCC
	0x031D0E00 CBZ X0, 0x31D0988
	0x031D0E04 CBZ X21, 0x31D0988
	0x031D0E08 LDR W10, [X21 + 0x1C]
	0x031D0E0C LDP S0, S1, [X0 + 0x18]
	0x031D0E10 LDR V2, [X0 + 0x20]
	0x031D0E14 LDR X8, [X21 + 0x10]
	0x031D0E18 LDR X9, [X24]
	0x031D0E1C ADD W10, W10, 0x1
	0x031D0E20 STR W10, [X21 + 0x1C]
	0x031D0E24 CBZ X8, 0x31D0988
	0x031D0E28 LDRSW X10, [X21 + 0x18]
	0x031D0E2C LDR W11, [X8 + 0x18]
	0x031D0E30 CMP W10, W11
	0x031D0E34 B.CS 0x31D0E50
	0x031D0E38 ADD W9, W10, 0x1
	0x031D0E3C MADD X8, X10, X22, X8
	0x031D0E40 STR W9, [X21 + 0x18]
	0x031D0E44 STP S0, S1, [X8 + 0x20]
	0x031D0E48 STR S2, [X8 + 0x28]
	0x031D0E4C B 0x31D0E6C
	0x031D0E50 LDR X8, [X9 + 0x20]
	0x031D0E54 B 0x31D0E5C
	0x031D0E58 LDR X8, [X8 + 0x20]
	0x031D0E5C LDR X8, [X8 + 0xC0]
	0x031D0E60 MOV X0, X21
	0x031D0E64 LDR X1, [X8 + 0x70]
	0x031D0E68 BL 0x30CC1B4
	0x031D0E6C LDR X0, [X19 + 0x40]
	0x031D0E70 ADD W20, W20, 0x1
	0x031D0E74 CBNZ X0, 0x31D0D4C
	0x031D0E78 B 0x31D0988
	0x031D0E7C STR W8, [X19 + 0x10]
	0x031D0E80 MOVZ W0, 0x1
	0x031D0E84 B 0x31D0F60
	0x031D0E88 LDR X2, [X23]
	0x031D0E8C BL 0x301BCCC
	0x031D0E90 CBZ X0, 0x31D0988
	0x031D0E94 LDRB W8, [X0 + 0x6D]
	0x031D0E98 CBNZ W8, 0x31D0EC4
	0x031D0E9C LDR X0, [X19 + 0x40]
	0x031D0EA0 CBZ X0, 0x31D0988
	0x031D0EA4 LDR W1, [X19 + 0x68]
	0x031D0EA8 LDR X2, [X23]
	0x031D0EAC LDR X20, [X19 + 0x28]
	0x031D0EB0 BL 0x301BCCC
	0x031D0EB4 CBZ X20, 0x31D0988
	0x031D0EB8 MOV X1, X0
	0x031D0EBC MOV X0, X20
	0x031D0EC0 BL 0x31CD7C0
	0x031D0EC4 LDR X8, [X19 + 0x28]
	0x031D0EC8 CBZ X8, 0x31D0988
	0x031D0ECC LDRB W9, [X8 + 0x33A]
	0x031D0ED0 CBNZ W9, 0x31D0F20
	0x031D0ED4 LDR X9, [X19 + 0x40]
	0x031D0ED8 CBZ X9, 0x31D0988
	0x031D0EDC LDR W10, [X8 + 0x370]
	0x031D0EE0 LDR V0, [X9 + 0x18]
	0x031D0EE4 LDR W11, [X8 + 0x374]
	0x031D0EE8 MOVZ W9, 0x42C80000
	0x031D0EEC SCVTF S1, W10
	0x031D0EF0 SCVTF S0, S0
	0x031D0EF4 FDIV S0, S1, S0
	0x031D0EF8 FMOV S1, W9
	0x031D0EFC ADD W9, W10, 0x1
	0x031D0F00 STR W9, [X8 + 0x370]
	0x031D0F04 ADD W9, W11, 0x1

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x120D000
	010 Move W8, [X20+24]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {72}
	016 Move X0, 0xF4D000
	017 Move X0, [X0+1264]
	018 Call 0x1C17CF4
	019 Move X0, 0xF50000
	020 Move X0, [X0+3280]
	021 Call 0x1C17CF4
	022 Move X0, 0xF50000
	023 Move X0, [X0+3112]
	024 Call 0x1C17CF4
	025 Move X0, 0xF28000
	026 Move X0, [X0+952]
	027 Call 0x1C17CF4
	028 Move X0, 0xF50000
	029 Move X0, [X0+3288]
	030 Call 0x1C17CF4
	031 Move X0, 0xF28000
	032 Move X0, [X0+896]
	033 Call 0x1C17CF4
	034 Move X0, 0xF50000
	035 Move X0, [X0+1456]
	036 Call 0x1C17CF4
	037 Move X0, 0xF50000
	038 Move X0, [X0+3080]
	039 Call 0x1C17CF4
	040 Move X0, 0xF28000
	041 Move X0, [X0+2424]
	042 Call 0x1C17CF4
	043 Move X0, 0xF50000
	044 Move X0, [X0+3296]
	045 Call 0x1C17CF4
	046 Move X0, 0xF50000
	047 Move X0, [X0+3304]
	048 Call 0x1C17CF4
	049 Move X0, 0xF50000
	050 Move X0, [X0+3072]
	051 Call 0x1C17CF4
	052 Move X0, 0xF26000
	053 Move X0, [X0+2480]
	054 Call 0x1C17CF4
	055 Move X0, 0xF50000
	056 Move X0, [X0+3360]
	057 Call 0x1C17CF4
	058 Move X0, 0xF50000
	059 Move X0, [X0+3368]
	060 Call 0x1C17CF4
	061 Move X0, 0xF50000
	062 Move X0, [X0+3376]
	063 Call 0x1C17CF4
	064 Move X0, 0xF50000
	065 Move X0, [X0+3384]
	066 Call 0x1C17CF4
	067 Move X0, 0xF50000
	068 Move X0, [X0+3392]
	069 Call 0x1C17CF4
	070 Move W8, 1
	071 Move [X20+24], W8
	072 Move W8, [X19+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Compare W8, 0
	075 JumpIfNotEqual {306}
	076 Move X8, [X19+32]
	077 Move TEMP, 0
	078 Not TEMP
	079 Move W9, TEMP
	080 Move [X19+16], W9
	081 Compare X8, 0
	082 JumpIfEqual {512}
	083 Move X9, 0xF50000
	084 Move X9, [X9+3376]
	085 Move W10, [X8+388]
	086 NotImplemented "Instruction MOVI not yet implemented."
	087 Move X9, [X9]
	088 Move [X8+880], D0
	089 Move [X8+872], X9
	090 Compare W10, 0
	091 JumpIfEqual {121}
	092 Move X9, [X8+640]
	093 Compare X9, 0
	094 JumpIfEqual {512}
	095 Move W2, [X9+24]
	096 Move W10, [X9+28]
	097 Add W10, W10, 1
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move [X9+24], W31
	100 Move [X9+28], W10
	101 Move X0, [X9+16]
	102 Move W1, W31
	103 Move X3, X31
	104 Call Array.Clear, X0, X1, X2
	105 Move X8, [X19+32]
	106 Compare X8, 0
	107 JumpIfEqual {512}
	108 Move X8, [X8+744]
	109 Compare X8, 0
	110 JumpIfEqual {512}
	111 Move W2, [X8+24]
	112 Move W9, [X8+28]
	113 Add W9, W9, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move [X8+24], W31
	116 Move [X8+28], W9
	117 Move X0, [X8+16]
	118 Move W1, W31
	119 Move X3, X31
	120 Call Array.Clear, X0, X1, X2
	121 Move X9, [X19+40]
	122 Compare X9, 0
	123 JumpIfEqual {512}
	124 Move X8, [X9+144]
	125 Compare X8, 0
	126 JumpIfEqual {512}
	127 Move W10, [X8+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X9, [X9+152]
	130 Compare X9, 0
	131 JumpIfEqual {512}
	132 Move W10, [X9+28]
	133 Move X23, 0xF4D000
	134 Move X23, [X23+1264]
	135 Add W10, W10, 1
	136 Move [X9+24], W31
	137 Move [X9+28], W10
	138 Move X0, [X23]
	139 Move W21, [X8+24]
	140 Call 0x1C17F10
	141 Move W2, 12
	142 Move W1, W21
	143 Move W3, W31
	144 Move X4, X31
	145 Move X20, X0
	146 Call ComputeBuffer..ctor, X0, X1, X2, X3
	147 Move X8, [X19+40]
	148 Compare X8, 0
	149 JumpIfEqual {512}
	150 Move X8, [X8+144]
	151 Compare X8, 0
	152 JumpIfEqual {512}
	153 Move X0, [X23]
	154 Move W22, [X8+24]
	155 Call 0x1C17F10
	156 Move W2, 12
	157 Move W1, W22
	158 Move W3, W31
	159 Move X4, X31
	160 Move X21, X0
	161 Call ComputeBuffer..ctor, X0, X1, X2, X3
	162 Move X8, [X19+40]
	163 Compare X8, 0
	164 JumpIfEqual {512}
	165 Move X0, [X8+144]
	166 Compare X0, 0
	167 JumpIfEqual {512}
	168 Move X22, 0xF50000
	169 Move X22, [X22+1456]
	170 Move X1, [X22]
	171 Call List`1<Vector3>.ToArray, X0
	172 Compare X20, 0
	173 JumpIfEqual {512}
	174 Move X1, X0
	175 Move X0, X20
	176 Move X2, X31
	177 Call ComputeBuffer.SetData, X0, X1
	178 Move X8, [X19+40]
	179 Compare X8, 0
	180 JumpIfEqual {512}
	181 Move X0, [X8+144]
	182 Compare X0, 0
	183 JumpIfEqual {512}
	184 Move X1, [X22]
	185 Call List`1<Vector3>.ToArray, X0
	186 Compare X21, 0
	187 JumpIfEqual {512}
	188 Move X1, X0
	189 Move X0, X21
	190 Move X2, X31
	191 Call ComputeBuffer.SetData, X0, X1
	192 Move X8, [X19+32]
	193 Compare X8, 0
	194 JumpIfEqual {512}
	195 Move X22, [X8+448]
	196 Compare X22, 0
	197 JumpIfEqual {512}
	198 Move X23, 0xF50000
	199 Move X23, [X23+3384]
	200 Move X0, X22
	201 Move X2, X31
	202 Move X1, [X23]
	203 Call ComputeShader.FindKernel, X0, X1
	204 Move X8, 0xF50000
	205 Move X8, [X8+3368]
	206 Move W1, W0
	207 Move X0, X22
	208 Move X3, X20
	209 Move X2, [X8]
	210 Move X4, X31
	211 Call ComputeShader.SetBuffer, X0, X1, X2, X3
	212 Move X8, [X19+32]
	213 Compare X8, 0
	214 JumpIfEqual {512}
	215 Move X22, [X8+448]
	216 Compare X22, 0
	217 JumpIfEqual {512}
	218 Move X1, [X23]
	219 Move X0, X22
	220 Move X2, X31
	221 Call ComputeShader.FindKernel, X0, X1
	222 Move X8, 0xF50000
	223 Move X8, [X8+3360]
	224 Move W1, W0
	225 Move X0, X22
	226 Move X3, X21
	227 Move X2, [X8]
	228 Move X4, X31
	229 Call ComputeShader.SetBuffer, X0, X1, X2, X3
	230 Move X8, [X19+32]
	231 Compare X8, 0
	232 JumpIfEqual {512}
	233 Move X0, [X8+448]
	234 Compare X0, 0
	235 JumpIfEqual {512}
	236 Move V0, [X8+260]
	237 Move X8, 0xF50000
	238 Move X8, [X8+3392]
	239 Move X2, X31
	240 Move X1, [X8]
	241 Call ComputeShader.SetFloat, X0, X1, V0
	242 Move X8, [X19+32]
	243 Compare X8, 0
	244 JumpIfEqual {512}
	245 Move X22, [X8+448]
	246 Compare X22, 0
	247 JumpIfEqual {512}
	248 Move X1, [X23]
	249 Move X0, X22
	250 Move X2, X31
	251 Call ComputeShader.FindKernel, X0, X1
	252 Move W1, W0
	253 Move W2, 256
	254 Move W3, 1
	255 Move W4, 1
	256 Move X0, X22
	257 Move X5, X31
	258 Call ComputeShader.Dispatch, X0, X1, X2, X3, X4
	259 Move X0, X20
	260 Move X1, X31
	261 Call ComputeBuffer.get_count, X0
	262 Move X8, 0xF26000
	263 Move X8, [X8+2480]
	264 Move W1, W0
	265 Move X8, [X8]
	266 Move X0, X8
	267 Call 0x1C17D6C
	268 Move X1, X0
	269 Move [X19+56], X0
	270 Move X0, X21
	271 Move X2, X31
	272 Call ComputeBuffer.GetData, X0, X1
	273 Move X0, X20
	274 Move X1, X31
	275 Call ComputeBuffer.Dispose, X0
	276 Move X0, X21
	277 Move X1, X31
	278 Call ComputeBuffer.Dispose, X0
	279 Move X8, 0xF50000
	280 Move X8, [X8+3072]
	281 Move X0, [X8]
	282 Call 0x1C17F10
	283 Move X8, 0xF50000
	284 Move X8, [X8+3080]
	285 Move X20, X0
	286 Move X1, [X8]
	287 Call List`1<Object>..ctor, X0
	288 Move X8, [X19+32]
	289 Move [X19+64], X20
	290 Compare X8, 0
	291 JumpIfEqual {512}
	292 Compare X20, 0
	293 JumpIfEqual {512}
	294 Move X1, [X8+728]
	295 Move X8, 0xF50000
	296 Move X8, [X8+3280]
	297 Move X0, X20
	298 Move X2, [X8]
	299 Call List`1<Object>.AddRange, X0, X1
	300 Move W8, W31
	301 Move [X19+72], W31
	302 Move TEMP, 0
	303 Not TEMP
	304 Move W8, TEMP
	305 Move [X19+16], W8
	306 Move W0, W31
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Move X8, W8
	309 Move W10, 12
	310 Move X20, 0x1209000
	311 NotImplemented "Instruction MADD not yet implemented."
	312 Move W9, [X20+1923]
	313 Move V9, [X8+32]
	314 NotImplemented "Instruction LDUR not yet implemented."
	315 Compare W9, 0
	316 JumpIfNotEqual {322}
	317 Move X0, 0xF24000
	318 Move X0, [X0+1440]
	319 Call 0x1C17CF4
	320 Move W8, 1
	321 Move [X20+1923], W8
	322 Move X8, 0xF24000
	323 Move X8, [X8+1440]
	324 Move X8, [X8]
	325 Move X8, [X8+184]
	326 Move V0, [X8]
	327 NotImplemented "Instruction LDUR not yet implemented."
	328 Move X8, -40787968
	329 Move V2, [X8+3872]
	330 Subtract S0, S9, S0
	331 Subtract V1, V8, V1
	332 Multiply S0, S0, S0
	333 NotImplemented "Instruction INVALID not yet implemented."
	334 Add S0, S0, S1
	335 Move S1, V1.S[1]
	336 Add S0, S1, S0
	337 NotImplemented "Instruction FCMP not yet implemented."
	338 Move W8, [X19+48]
	339 Compare W8, 0
	340 JumpIfNotEqual {397}
	341 Move X0, [X19+64]
	342 Compare X0, 0
	343 JumpIfEqual {512}
	344 Move X22, 0xF50000
	345 Move X22, [X22+3304]
	346 Move W1, [X19+72]
	347 Move X2, [X22]
	348 Call List`1<Object>.get_Item, X0, X1
	349 Move X8, [X19+56]
	350 Compare X8, 0
	351 JumpIfEqual {512}
	352 NotImplemented "Instruction LDRSW not yet implemented."
	353 Move W10, [X8+24]
	354 NotImplemented "Instruction CMP not yet implemented."
	355 Compare X0, 0
	356 JumpIfEqual {512}
	357 Move W10, 12
	358 NotImplemented "Instruction MADD not yet implemented."
	359 Move V0, [X8+32]
	360 Move V1, [X8+40]
	361 Move [X0+24], D0
	362 Move [X0+32], S1
	363 Move X8, [X19+32]
	364 Compare X8, 0
	365 JumpIfEqual {512}
	366 Move X0, [X19+64]
	367 Compare X0, 0
	368 JumpIfEqual {512}
	369 Move W1, [X19+72]
	370 Move X2, [X22]
	371 Move X20, [X8+640]
	372 Call List`1<Object>.get_Item, X0, X1
	373 Compare X20, 0
	374 JumpIfEqual {512}
	375 Move X9, 0xF50000
	376 Move X9, [X9+3112]
	377 Move W10, [X20+28]
	378 Move X8, [X20+16]
	379 Move X9, [X9]
	380 Add W10, W10, 1
	381 Move [X20+28], W10
	382 Compare X8, 0
	383 JumpIfEqual {512}
	384 NotImplemented "Instruction LDRSW not yet implemented."
	385 Move W11, [X8+24]
	386 Move X1, X0
	387 NotImplemented "Instruction CMP not yet implemented."
	388 Add W9, W10, 1
	389 Add X8, X8, X10
	390 Move [X20+24], W9
	391 Move [X8+32], X1
	392 Move X8, [X9+32]
	393 Move X0, X20
	394 Move X8, [X8+192]
	395 Move X2, [X8+112]
	396 Call List`1<Object>.AddWithResize, X0, X1
	397 Move X10, [X19+40]
	398 Compare X10, 0
	399 JumpIfEqual {512}
	400 Move X8, [X19+56]
	401 Compare X8, 0
	402 JumpIfEqual {512}
	403 NotImplemented "Instruction LDRSW not yet implemented."
	404 Move W11, [X8+24]
	405 NotImplemented "Instruction CMP not yet implemented."
	406 Move X0, [X10+152]
	407 Compare X0, 0
	408 JumpIfEqual {512}
	409 Move X11, 0xF28000
	410 Move X11, [X11+952]
	411 Move W12, 12
	412 Move W13, [X0+28]
	413 NotImplemented "Instruction NOP not yet implemented."
	414 NotImplemented "Instruction MADD not yet implemented."
	415 Move X10, [X0+16]
	416 Move S0, [X8+32]
	417 Move S1, [X8+36]
	418 Move V2, [X8+40]
	419 Move X8, [X11]
	420 Add W9, W13, 1
	421 Move [X0+28], W9
	422 Compare X10, 0
	423 JumpIfEqual {512}
	424 NotImplemented "Instruction LDRSW not yet implemented."
	425 Move W11, [X10+24]
	426 NotImplemented "Instruction CMP not yet implemented."
	427 Add W8, W9, 1
	428 Move W11, 12
	429 Move [X0+24], W8
	430 NotImplemented "Instruction NOP not yet implemented."
	431 NotImplemented "Instruction MADD not yet implemented."
	432 Move [X8+32], S0
	433 Move [X8+40], S1
	434 Move [X8+40], S2
	435 Move X8, [X8+32]
	436 Move X8, [X8+192]
	437 Move X1, [X8+112]
	438 Call List`1<Vector3>.AddWithResize, X0, X1
	439 Move X8, [X19+32]
	440 Compare X8, 0
	441 JumpIfEqual {512}
	442 Move W9, [X8+826]
	443 Compare W9, 0
	444 JumpIfNotEqual {464}
	445 Move X9, [X21]
	446 Compare X9, 0
	447 JumpIfEqual {512}
	448 Move W10, [X8+880]
	449 Move V0, [X9+24]
	450 Move W11, [X8+884]
	451 Move W9, 0x42C80000
	452 NotImplemented "Instruction SCVTF not yet implemented."
	453 NotImplemented "Instruction SCVTF not yet implemented."
	454 NotImplemented "Instruction FDIV not yet implemented."
	455 Move S1, W9
	456 Add W9, W10, 1
	457 Move [X8+880], W9
	458 Add W9, W11, 1
	459 NotImplemented "Instruction CMP not yet implemented."
	460 Multiply S0, S0, S1
	461 NotImplemented "Instruction CSINC not yet implemented."
	462 Move [X8+892], S0
	463 Move [X8+884], W9
	464 Move W8, [X19+72]
	465 Add W8, W8, 1
	466 Move [X19+72], W8
	467 Move X21, X19
	468 Add X21, X21, 56
	469 Move X9, [X21]
	470 Compare X9, 0
	471 JumpIfEqual {512}
	472 Move W10, [X9+24]
	473 NotImplemented "Instruction CMP not yet implemented."
	474 Move X8, [X19+32]
	475 Compare X8, 0
	476 JumpIfEqual {512}
	477 Move W9, [X8+388]
	478 Compare W9, 0
	479 JumpIfEqual {488}
	480 Move X0, [X8+744]
	481 Compare X0, 0
	482 JumpIfEqual {512}
	483 Move X1, [X8+640]
	484 Move X8, 0xF50000
	485 Move X8, [X8+3280]
	486 Move X2, [X8]
	487 Call List`1<Object>.AddRange, X0, X1
	488 Move [X21], X31
	489 Move [X21+8], X31
	490 Move X8, [X19+32]
	491 Compare X8, 0
	492 JumpIfEqual {512}
	493 Move X9, [X8+640]
	494 Compare X9, 0
	495 JumpIfEqual {512}
	496 Move W9, [X9+24]
	497 Move W0, W31
	498 Move [X8+869], W31
	499 Move [X8+860], W9
	500 Move X20, [X31+48]
	501 Move X19, [X31+56]
	502 Move X22, [X31+32]
	503 Move X21, [X31+40]
	504 Move X30, [X31+16]
	505 Move X23, [X31+24]
	506 Move D9, [X31+64]
	507 Move D8, [X31+72]
	508 Return X0
	509 Move W0, 1
	510 Move [X19+24], X31
	511 Move [X19+16], W0
	512 Call 0x1C17F20
	513 Call 0x1C17F28

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x031D0F08 CMP W9, 0x64
	0x031D0F0C FMUL S0, S0, S1

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x031D0F10 CSINC W9, W31, W11, EQ
	0x031D0F14 STR S0, [X8 + 0x37C]
	0x031D0F18 STR W9, [X8 + 0x374]
	0x031D0F1C B.EQ 0x31D0F7C
	0x031D0F20 LDR W8, [X19 + 0x68]
	0x031D0F24 ADD W1, W8, 0x1
	0x031D0F28 STR W1, [X19 + 0x68]
	0x031D0F2C LDR X0, [X19 + 0x40]
	0x031D0F30 CBZ X0, 0x31D0988
	0x031D0F34 LDR W8, [X0 + 0x18]
	0x031D0F38 CMP W1, W8
	0x031D0F3C B.LT 0x31D0E88
	0x031D0F40 LDR X8, [X19 + 0x28]
	0x031D0F44 CBZ X8, 0x31D0988

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xF24000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0xF50000
	011 Move X0, [X0+3400]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x031D0F48 LDR X9, [X8 + 0x280]
	0x031D0F4C CBZ X9, 0x31D0988

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

