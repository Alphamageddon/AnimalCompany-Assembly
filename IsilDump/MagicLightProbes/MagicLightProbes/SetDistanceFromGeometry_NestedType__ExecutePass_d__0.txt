Type: MagicLightProbes.SetDistanceFromGeometry/<ExecutePass>d__0

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x031D2468 ADRP X0, 0xF21000
	0x031D246C LDR X0, [X0 + 0xA58]
	0x031D2470 BL 0x1C16CF4
	0x031D2474 ADRP X0, 0xF21000
	0x031D2478 LDR X0, [X0 + 0x598]
	0x031D247C BL 0x1C16CF4
	0x031D2480 ADRP X0, 0xF4D000
	0x031D2484 LDR X0, [X0 + 0xEB8]
	0x031D2488 BL 0x1C16CF4
	0x031D248C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x031D2498 LDR X0, [X21]

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x031D249C LDR X8, [X8 + 0xB8]
	0x031D24A0 LDR W9, [X0 + 0xE0]
	0x031D24A4 LDR X19, [X8 + 0x20]
	0x031D24A8 CBNZ W9, 0x31D24B0
	0x031D24AC BL 0x1C16DFC
	0x031D24B0 MOV X0, X19
	0x031D24B4 MOV X1, X31
	0x031D24B8 MOV X2, X31
	0x031D24BC BL 0x3C3883C
	0x031D24C0 TBZ X0, 0x0, 0x31D252C
	0x031D24C4 ADRP X8, 0xF21000
	0x031D24C8 LDR X8, [X8 + 0xA58]
	0x031D24CC LDR X0, [X8]
	0x031D24D0 BL 0x1C16F10
	0x031D24D4 ADRP X8, 0xF4D000
	0x031D24D8 LDR X8, [X8 + 0xEB8]
	0x031D24DC MOV X2, X31
	0x031D24E0 MOV X19, X0
	0x031D24E4 LDR X1, [X8]
	0x031D24E8 BL 0x3C35934
	0x031D24EC CBZ X19, 0x31D2544
	0x031D24F0 ADRP X8, 0xF4D000
	0x031D24F4 LDR X8, [X8 + 0xEB0]
	0x031D24F8 MOV X0, X19
	0x031D24FC LDR X1, [X8]
	0x031D2500 BL 0x21E51FC
	0x031D2504 LDR X8, [X20]
	0x031D2508 LDR X8, [X8 + 0xB8]
	0x031D250C STR X0, [X8 + 0x20]
	0x031D2510 LDR X0, [X21]
	0x031D2514 LDR W8, [X0 + 0xE0]
	0x031D2518 CBNZ W8, 0x31D2520
	0x031D251C BL 0x1C16DFC
	0x031D2520 MOV X0, X19
	0x031D2524 MOV X1, X31
	0x031D2528 BL 0x3C39674
	0x031D252C LDR X8, [X20]
	0x031D2530 LDP X20, X19, [X31 + 0x10]
	0x031D2534 LDR X8, [X8 + 0xB8]
	0x031D2538 LDR X0, [X8 + 0x20]
	0x031D253C LDP X30, X21, [X31], #0x20
	0x031D2540 RET
	0x031D2544 BL 0x1C16F20
	0x031D2548 STP X30, X21, [X31 - 0x20]!
	0x031D254C STP X20, X19, [X31 + 0x10]
	0x031D2550 ADRP X20, 0x120A000
	0x031D2554 ADRP X21, 0xF4D000
	0x031D2558 ADRP X19, 0xF21000
	0x031D255C LDRB W8, [X20 + 0x24]
	0x031D2560 LDR X21, [X21 + 0xE00]
	0x031D2564 LDR X19, [X19 + 0x598]
	0x031D2568 TBNZ X8, 0x0, 0x31D258C
	0x031D256C ADRP X0, 0xF4D000
	0x031D2570 LDR X0, [X0 + 0xE00]
	0x031D2574 BL 0x1C16CF4
	0x031D2578 ADRP X0, 0xF21000
	0x031D257C LDR X0, [X0 + 0x598]
	0x031D2580 BL 0x1C16CF4
	0x031D2584 MOVZ W8, 0x1
	0x031D2588 STRB W8, [X20 + 0x24]
	0x031D258C LDR X8, [X21]
	0x031D2590 LDR X0, [X19]
	0x031D2594 LDR X8, [X8 + 0xB8]
	0x031D2598 LDR W9, [X0 + 0xE0]
	0x031D259C LDR X19, [X8 + 0x20]
	0x031D25A0 CBNZ W9, 0x31D25A8
	0x031D25A4 BL 0x1C16DFC
	0x031D25A8 MOV X0, X19
	0x031D25AC LDP X20, X19, [X31 + 0x10]
	0x031D25B0 MOV X1, X31
	0x031D25B4 MOV X2, X31
	0x031D25B8 LDP X30, X21, [X31], #0x20
	0x031D25BC B 0x3C354F8
	0x031D25C0 STP X30, X21, [X31 - 0x20]!
	0x031D25C4 STP X20, X19, [X31 + 0x10]
	0x031D25C8 ADRP X19, 0x120A000
	0x031D25CC ADRP X21, 0xF4D000
	0x031D25D0 ADRP X20, 0xF21000
	0x031D25D4 LDRB W8, [X19 + 0x25]
	0x031D25D8 LDR X21, [X21 + 0xE00]
	0x031D25DC LDR X20, [X20 + 0x598]
	0x031D25E0 TBNZ X8, 0x0, 0x31D2604
	0x031D25E4 ADRP X0, 0xF4D000
	0x031D25E8 LDR X0, [X0 + 0xE00]
	0x031D25EC BL 0x1C16CF4
	0x031D25F0 ADRP X0, 0xF21000
	0x031D25F4 LDR X0, [X0 + 0x598]
	0x031D25F8 BL 0x1C16CF4
	0x031D25FC MOVZ W8, 0x1
	0x031D2600 STRB W8, [X19 + 0x25]
	0x031D2604 LDR X8, [X21]
	0x031D2608 LDR X0, [X20]
	0x031D260C LDR X8, [X8 + 0xB8]
	0x031D2610 LDR W9, [X0 + 0xE0]
	0x031D2614 LDR X19, [X8 + 0x20]
	0x031D2618 CBNZ W9, 0x31D2620
	0x031D261C BL 0x1C16DFC
	0x031D2620 MOV X0, X19
	0x031D2624 MOV X1, X31
	0x031D2628 MOV X2, X31
	0x031D262C BL 0x3C354F8
	0x031D2630 TBZ X0, 0x0, 0x31D2664
	0x031D2634 LDR X8, [X21]
	0x031D2638 LDR X0, [X20]
	0x031D263C LDR X8, [X8 + 0xB8]
	0x031D2640 LDR W9, [X0 + 0xE0]
	0x031D2644 LDR X19, [X8 + 0x20]
	0x031D2648 CBNZ W9, 0x31D2650
	0x031D264C BL 0x1C16DFC
	0x031D2650 MOV X0, X19
	0x031D2654 LDP X20, X19, [X31 + 0x10]
	0x031D2658 MOV X1, X31
	0x031D265C LDP X30, X21, [X31], #0x20
	0x031D2660 B 0x3C394A8
	0x031D2664 LDP X20, X19, [X31 + 0x10]
	0x031D2668 LDP X30, X21, [X31], #0x20
	0x031D266C RET
	0x031D2670 STR X30, [X31 - 0x20]!
	0x031D2674 STP X20, X19, [X31 + 0x10]
	0x031D2678 ADRP X19, 0x120A000
	0x031D267C ADRP X20, 0xF4D000
	0x031D2680 LDRB W8, [X19 + 0x27]
	0x031D2684 LDR X20, [X20 + 0xEC0]
	0x031D2688 TBNZ X8, 0x0, 0x31D26A0
	0x031D268C ADRP X0, 0xF4D000
	0x031D2690 LDR X0, [X0 + 0xEC0]
	0x031D2694 BL 0x1C16CF4
	0x031D2698 MOVZ W8, 0x1
	0x031D269C STRB W8, [X19 + 0x27]
	0x031D26A0 LDR X0, [X20]
	0x031D26A4 LDP X20, X19, [X31 + 0x10]
	0x031D26A8 LDR X30, [X31], #0x20
	0x031D26AC B 0x31D26B0
	0x031D26B0 STP X30, X21, [X31 - 0x20]!
	0x031D26B4 STP X20, X19, [X31 + 0x10]
	0x031D26B8 ADRP X21, 0x120A000
	0x031D26BC ADRP X20, 0xF4D000
	0x031D26C0 LDRB W8, [X21 + 0x3E]
	0x031D26C4 LDR X20, [X20 + 0xDE8]
	0x031D26C8 MOV X19, X0
	0x031D26CC TBNZ X8, 0x0, 0x31D26FC
	0x031D26D0 ADRP X0, 0xF4D000
	0x031D26D4 LDR X0, [X0 + 0xDE8]
	0x031D26D8 BL 0x1C16CF4
	0x031D26DC ADRP X0, 0xF21000
	0x031D26E0 LDR X0, [X0 + 0xA28]
	0x031D26E4 BL 0x1C16CF4
	0x031D26E8 ADRP X0, 0xF4D000
	0x031D26EC LDR X0, [X0 + 0xEC8]
	0x031D26F0 BL 0x1C16CF4
	0x031D26F4 MOVZ W8, 0x1
	0x031D26F8 STRB W8, [X21 + 0x3E]
	0x031D26FC LDR X0, [X20]
	0x031D2700 LDR W8, [X0 + 0xE0]
	0x031D2704 CBNZ W8, 0x31D2710
	0x031D2708 BL 0x1C16DFC
	0x031D270C LDR X0, [X20]
	0x031D2710 LDR X8, [X0 + 0xB8]
	0x031D2714 LDRB W8, [X8 + 0x10]
	0x031D2718 CBZ W8, 0x31D2768
	0x031D271C ADRP X8, 0xF4D000
	0x031D2720 LDR X8, [X8 + 0xEC8]
	0x031D2724 ADRP X20, 0xF21000
	0x031D2728 MOV X1, X19
	0x031D272C MOV X2, X31
	0x031D2730 LDR X0, [X8]
	0x031D2734 LDR X20, [X20 + 0xA28]
	0x031D2738 BL 0x321B938
	0x031D273C LDR X8, [X20]
	0x031D2740 MOV X19, X0
	0x031D2744 LDR W9, [X8 + 0xE0]
	0x031D2748 CBNZ W9, 0x31D2754
	0x031D274C MOV X0, X8
	0x031D2750 BL 0x1C16DFC
	0x031D2754 MOV X0, X19
	0x031D2758 LDP X20, X19, [X31 + 0x10]
	0x031D275C MOV X1, X31
	0x031D2760 LDP X30, X21, [X31], #0x20
	0x031D2764 B 0x3C06048
	0x031D2768 LDP X20, X19, [X31 + 0x10]
	0x031D276C LDP X30, X21, [X31], #0x20
	0x031D2770 RET
	0x031D2774 STR X30, [X31 - 0x20]!
	0x031D2778 STP X20, X19, [X31 + 0x10]
	0x031D277C ADRP X20, 0x120A000
	0x031D2780 LDRB W8, [X20 + 0x28]
	0x031D2784 MOV W19, W1
	0x031D2788 TBZ X8, 0x0, 0x31D279C
	0x031D278C TBZ X19, 0x0, 0x31D27B4
	0x031D2790 LDP X20, X19, [X31 + 0x10]
	0x031D2794 LDR X30, [X31], #0x20
	0x031D2798 RET
	0x031D279C ADRP X0, 0xF4D000
	0x031D27A0 LDR X0, [X0 + 0xED0]
	0x031D27A4 BL 0x1C16CF4
	0x031D27A8 MOVZ W8, 0x1
	0x031D27AC STRB W8, [X20 + 0x28]
	0x031D27B0 TBNZ X19, 0x0, 0x31D2790
	0x031D27B4 ADRP X8, 0xF4D000
	0x031D27B8 LDR X8, [X8 + 0xED0]
	0x031D27BC LDR X0, [X8]
	0x031D27C0 LDR W8, [X0 + 0xE0]
	0x031D27C4 CBNZ W8, 0x31D27CC
	0x031D27C8 BL 0x1C16DFC
	0x031D27CC LDP X20, X19, [X31 + 0x10]
	0x031D27D0 LDR X30, [X31], #0x20
	0x031D27D4 B 0x31D27D8
	0x031D27D8 SUB X31, X31, 0x40
	0x031D27DC STR X30, [X31 + 0x10]
	0x031D27E0 STP X22, X21, [X31 + 0x20]
	0x031D27E4 STP X20, X19, [X31 + 0x30]
	0x031D27E8 ADRP X19, 0x120A000
	0x031D27EC ADRP X20, 0xF4D000
	0x031D27F0 LDRB W8, [X19 + 0x34]
	0x031D27F4 LDR X20, [X20 + 0xED0]
	0x031D27F8 TBNZ X8, 0x0, 0x31D2834
	0x031D27FC ADRP X0, 0xF2A000
	0x031D2800 LDR X0, [X0 + 0x9E8]
	0x031D2804 BL 0x1C16CF4
	0x031D2808 ADRP X0, 0xF22000
	0x031D280C LDR X0, [X0 + 0x9F0]
	0x031D2810 BL 0x1C16CF4
	0x031D2814 ADRP X0, 0xF4D000
	0x031D2818 LDR X0, [X0 + 0xED0]
	0x031D281C BL 0x1C16CF4
	0x031D2820 ADRP X0, 0xF23000
	0x031D2824 LDR X0, [X0 + 0x570]
	0x031D2828 BL 0x1C16CF4
	0x031D282C MOVZ W8, 0x1
	0x031D2830 STRB W8, [X19 + 0x34]
	0x031D2834 LDR X0, [X20]
	0x031D2838 STR X31, [X31 + 0x18]
	0x031D283C STR X31, [X31 + 0x8]
	0x031D2840 LDR W8, [X0 + 0xE0]
	0x031D2844 CBNZ W8, 0x31D2850
	0x031D2848 BL 0x1C16DFC
	0x031D284C LDR X0, [X20]
	0x031D2850 LDR X8, [X0 + 0xB8]
	0x031D2854 LDR X0, [X8 + 0x18]
	0x031D2858 STR X31, [X8]
	0x031D285C CBZ X0, 0x31D2964
	0x031D2860 LDR X8, [X0]
	0x031D2864 ADRP X19, 0xF2A000
	0x031D2868 ADRP X22, 0xF22000
	0x031D286C MOVN W2, 0x80000000
	0x031D2870 LDP X9, X3, [X8 + 0x198]
	0x031D2874 LDR X19, [X19 + 0x9E8]
	0x031D2878 LDR X22, [X22 + 0x9F0]
	0x031D287C MOV W1, W31
	0x031D2880 BLR X9
	0x031D2884 LDR X8, [X19]
	0x031D2888 MOV W19, W0
	0x031D288C LDR W9, [X8 + 0xE0]
	0x031D2890 CBNZ W9, 0x31D289C
	0x031D2894 MOV X0, X8
	0x031D2898 BL 0x1C16DFC
	0x031D289C ADRP X21, 0xF23000
	0x031D28A0 LDR X21, [X21 + 0x570]
	0x031D28A4 MOVZ W1, 0x10
	0x031D28A8 MOV W0, W19
	0x031D28AC MOV X2, X31
	0x031D28B0 BL 0x33224A0
	0x031D28B4 LDR X8, [X20]
	0x031D28B8 LDR X8, [X8 + 0xB8]
	0x031D28BC STR X0, [X8 + 0x10]
	0x031D28C0 LDR X0, [X22]
	0x031D28C4 LDR W8, [X0 + 0xE0]
	0x031D28C8 CBNZ W8, 0x31D28D0
	0x031D28CC BL 0x1C16DFC
	0x031D28D0 MOV X0, X31
	0x031D28D4 BL 0x33616A4
	0x031D28D8 STR X0, [X31 + 0x18]
	0x031D28DC ADD X0, X31, 0x0
	0x031D28E0 MOVZ W1, 0x7B2
	0x031D28E4 MOVZ W2, 0x1
	0x031D28E8 MOVZ W3, 0x1
	0x031D28EC MOV X4, X31
	0x031D28F0 STR X31, [X31]
	0x031D28F4 BL 0x335F0C4
	0x031D28F8 LDR X1, [X31]
	0x031D28FC ADD X0, X31, 0x18
	0x031D2900 MOV X2, X31
	0x031D2904 BL 0x3361F58
	0x031D2908 LDR X8, [X21]
	0x031D290C STR X0, [X31 + 0x8]
	0x031D2910 LDR W9, [X8 + 0xE0]
	0x031D2914 CBNZ W9, 0x31D2920
	0x031D2918 MOV X0, X8
	0x031D291C BL 0x1C16DFC
	0x031D2920 ADD X0, X31, 0x8
	0x031D2924 MOV X1, X31
	0x031D2928 BL 0x3394234
	0x031D292C LDR X8, [X20]
	0x031D2930 MOVZ X9, 0x7FF00000
	0x031D2934 FMOV D1, X9
	0x031D2938 LDP X20, X19, [X31 + 0x30]
	0x031D293C LDR X8, [X8 + 0xB8]
	0x031D2940 LDP X22, X21, [X31 + 0x20]
	0x031D2944 LDR X30, [X31 + 0x10]
	0x031D2948 FCVTZS W10, D0
	0x031D294C FCMP D0, D1
	0x031D2950 MOVZ W9, 0x80000000
	0x031D2954 CSEL W9, W9, W10, EQ
	0x031D2958 STR W9, [X8 + 0x8]
	0x031D295C ADD X31, X31, 0x40
	0x031D2960 RET
	0x031D2964 BL 0x1C16F20
	0x031D2968 STP X30, X21, [X31 - 0x20]!
	0x031D296C STP X20, X19, [X31 + 0x10]
	0x031D2970 ADRP X21, 0x120A000
	0x031D2974 ADRP X20, 0xF4D000
	0x031D2978 LDRB W8, [X21 + 0x29]
	0x031D297C LDR X20, [X20 + 0xED8]
	0x031D2980 MOV X19, X0
	0x031D2984 TBNZ X8, 0x0, 0x31D299C
	0x031D2988 ADRP X0, 0xF4D000
	0x031D298C LDR X0, [X0 + 0xED8]
	0x031D2990 BL 0x1C16CF4
	0x031D2994 MOVZ W8, 0x1
	0x031D2998 STRB W8, [X21 + 0x29]
	0x031D299C BL 0x31D29C8
	0x031D29A0 LDR X0, [X20]
	0x031D29A4 BL 0x31D26B0
	0x031D29A8 MOV X0, X19
	0x031D29AC BL 0x31D316C
	0x031D29B0 MOV X1, X0
	0x031D29B4 MOV X0, X19
	0x031D29B8 LDP X20, X19, [X31 + 0x10]
	0x031D29BC MOV X2, X31
	0x031D29C0 LDP X30, X21, [X31], #0x20
	0x031D29C4 B 0x3C366FC
	0x031D29C8 STR X30, [X31 - 0x50]!
	0x031D29CC STP X26, X25, [X31 + 0x10]
	0x031D29D0 STP X24, X23, [X31 + 0x20]
	0x031D29D4 STP X22, X21, [X31 + 0x30]
	0x031D29D8 STP X20, X19, [X31 + 0x40]
	0x031D29DC ADRP X19, 0x120A000
	0x031D29E0 ADRP X24, 0xF4D000
	0x031D29E4 LDRB W8, [X19 + 0x2E]
	0x031D29E8 LDR X24, [X24 + 0xEE0]
	0x031D29EC TBNZ X8, 0x0, 0x31D2A88
	0x031D29F0 ADRP X0, 0xF21000
	0x031D29F4 LDR X0, [X0 + 0x970]
	0x031D29F8 BL 0x1C16CF4
	0x031D29FC ADRP X0, 0xF21000
	0x031D2A00 LDR X0, [X0 + 0xE00]
	0x031D2A04 BL 0x1C16CF4
	0x031D2A08 ADRP X0, 0xF21000
	0x031D2A0C LDR X0, [X0 + 0xE18]
	0x031D2A10 BL 0x1C16CF4
	0x031D2A14 ADRP X0, 0xF4D000
	0x031D2A18 LDR X0, [X0 + 0xEE8]

ISIL:
	001 Move [X31-80], D9
	002 Move [X31-72], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x120B000
	011 Move W8, [X20+30]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {52}
	017 Move X0, 0xF4B000
	018 Move X0, [X0+1264]
	019 Call 0x1C17CF4
	020 Move X0, 0xF26000
	021 Move X0, [X0+952]
	022 Call 0x1C17CF4
	023 Move X0, 0xF26000
	024 Move X0, [X0+896]
	025 Call 0x1C17CF4
	026 Move X0, 0xF4E000
	027 Move X0, [X0+1456]
	028 Call 0x1C17CF4
	029 Move X0, 0xF26000
	030 Move X0, [X0+2424]
	031 Call 0x1C17CF4
	032 Move X0, 0xF24000
	033 Move X0, [X0+2480]
	034 Call 0x1C17CF4
	035 Move X0, 0xF4E000
	036 Move X0, [X0+3360]
	037 Call 0x1C17CF4
	038 Move X0, 0xF4E000
	039 Move X0, [X0+3512]
	040 Call 0x1C17CF4
	041 Move X0, 0xF4E000
	042 Move X0, [X0+3368]
	043 Call 0x1C17CF4
	044 Move X0, 0xF4E000
	045 Move X0, [X0+3384]
	046 Call 0x1C17CF4
	047 Move X0, 0xF4E000
	048 Move X0, [X0+3520]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+30], W8
	052 Move W8, [X19+16]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Compare W8, 0
	055 JumpIfNotEqual {382}
	056 Move X8, [X19+32]
	057 Move TEMP, 0
	058 Not TEMP
	059 Move W9, TEMP
	060 Move [X19+16], W9
	061 Compare X8, 0
	062 JumpIfEqual {396}
	063 Move X9, [X8+136]
	064 Compare X9, 0
	065 JumpIfEqual {396}
	066 Move W10, [X9+28]
	067 Add W10, W10, 1
	068 Move [X9+24], W31
	069 Move [X9+28], W10
	070 Move X8, [X8+128]
	071 Compare X8, 0
	072 JumpIfEqual {396}
	073 Move X24, 0xF4B000
	074 Move W21, [X8+24]
	075 Move X24, [X24+1264]
	076 Move X0, [X24]
	077 Call 0x1C17F10
	078 Move W2, 12
	079 Move W1, W21
	080 Move W3, W31
	081 Move X4, X31
	082 Move X20, X0
	083 Call ComputeBuffer..ctor, X0, X1, X2, X3
	084 Move X8, [X19+32]
	085 Compare X8, 0
	086 JumpIfEqual {396}
	087 Move X8, [X8+128]
	088 Compare X8, 0
	089 JumpIfEqual {396}
	090 Move X0, [X24]
	091 Move W22, [X8+24]
	092 Call 0x1C17F10
	093 Move W2, 12
	094 Move W1, W22
	095 Move W3, W31
	096 Move X4, X31
	097 Move X21, X0
	098 Call ComputeBuffer..ctor, X0, X1, X2, X3
	099 Move X8, [X19+32]
	100 Compare X8, 0
	101 JumpIfEqual {396}
	102 Move X8, [X8+128]
	103 Compare X8, 0
	104 JumpIfEqual {396}
	105 Move X0, [X24]
	106 Move W23, [X8+24]
	107 Call 0x1C17F10
	108 Move W2, 12
	109 Move W1, W23
	110 Move W3, W31
	111 Move X4, X31
	112 Move X22, X0
	113 Call ComputeBuffer..ctor, X0, X1, X2, X3
	114 Move X8, [X19+32]
	115 Compare X8, 0
	116 JumpIfEqual {396}
	117 Move X0, [X8+128]
	118 Compare X0, 0
	119 JumpIfEqual {396}
	120 Move X23, 0xF4E000
	121 Move X23, [X23+1456]
	122 Move X1, [X23]
	123 Call List`1<Vector3>.ToArray, X0
	124 Compare X20, 0
	125 JumpIfEqual {396}
	126 Move X1, X0
	127 Move X0, X20
	128 Move X2, X31
	129 Call ComputeBuffer.SetData, X0, X1
	130 Move X8, [X19+32]
	131 Compare X8, 0
	132 JumpIfEqual {396}
	133 Move X0, [X8+128]
	134 Compare X0, 0
	135 JumpIfEqual {396}
	136 Move X1, [X23]
	137 Call List`1<Vector3>.ToArray, X0
	138 Compare X21, 0
	139 JumpIfEqual {396}
	140 Move X1, X0
	141 Move X0, X21
	142 Move X2, X31
	143 Call ComputeBuffer.SetData, X0, X1
	144 Move X8, [X19+32]
	145 Compare X8, 0
	146 JumpIfEqual {396}
	147 Move X0, [X8+200]
	148 Compare X0, 0
	149 JumpIfEqual {396}
	150 Move X1, [X23]
	151 Call List`1<Vector3>.ToArray, X0
	152 Compare X22, 0
	153 JumpIfEqual {396}
	154 Move X1, X0
	155 Move X0, X22
	156 Move X2, X31
	157 Call ComputeBuffer.SetData, X0, X1
	158 Move X8, [X19+40]
	159 Compare X8, 0
	160 JumpIfEqual {396}
	161 Move X23, [X8+464]
	162 Compare X23, 0
	163 JumpIfEqual {396}
	164 Move X24, 0xF4E000
	165 Move X24, [X24+3384]
	166 Move X0, X23
	167 Move X2, X31
	168 Move X1, [X24]
	169 Call ComputeShader.FindKernel, X0, X1
	170 Move X8, 0xF4E000
	171 Move X8, [X8+3368]
	172 Move W1, W0
	173 Move X0, X23
	174 Move X3, X20
	175 Move X2, [X8]
	176 Move X4, X31
	177 Call ComputeShader.SetBuffer, X0, X1, X2, X3
	178 Move X8, [X19+40]
	179 Compare X8, 0
	180 JumpIfEqual {396}
	181 Move X23, [X8+464]
	182 Compare X23, 0
	183 JumpIfEqual {396}
	184 Move X1, [X24]
	185 Move X0, X23
	186 Move X2, X31
	187 Call ComputeShader.FindKernel, X0, X1
	188 Move X8, 0xF4E000
	189 Move X8, [X8+3360]
	190 Move W1, W0
	191 Move X0, X23
	192 Move X3, X21
	193 Move X2, [X8]
	194 Move X4, X31
	195 Call ComputeShader.SetBuffer, X0, X1, X2, X3
	196 Move X8, [X19+40]
	197 Compare X8, 0
	198 JumpIfEqual {396}
	199 Move X23, [X8+464]
	200 Compare X23, 0
	201 JumpIfEqual {396}
	202 Move X1, [X24]
	203 Move X0, X23
	204 Move X2, X31
	205 Call ComputeShader.FindKernel, X0, X1
	206 Move X8, 0xF4E000
	207 Move X8, [X8+3512]
	208 Move W1, W0
	209 Move X0, X23
	210 Move X3, X22
	211 Move X2, [X8]
	212 Move X4, X31
	213 Call ComputeShader.SetBuffer, X0, X1, X2, X3
	214 Move X8, [X19+40]
	215 Compare X8, 0
	216 JumpIfEqual {396}
	217 Move X0, [X8+464]
	218 Compare X0, 0
	219 JumpIfEqual {396}
	220 Move V0, [X8+268]
	221 Move X8, 0xF4E000
	222 Move X8, [X8+3520]
	223 Move X2, X31
	224 Move X1, [X8]
	225 Call ComputeShader.SetFloat, X0, X1, V0
	226 Move X8, [X19+40]
	227 Compare X8, 0
	228 JumpIfEqual {396}
	229 Move X22, [X8+464]
	230 Compare X22, 0
	231 JumpIfEqual {396}
	232 Move X1, [X24]
	233 Move X0, X22
	234 Move X2, X31
	235 Call ComputeShader.FindKernel, X0, X1
	236 Move W1, W0
	237 Move W2, 256
	238 Move W3, 1
	239 Move W4, 1
	240 Move X0, X22
	241 Move X5, X31
	242 Call ComputeShader.Dispatch, X0, X1, X2, X3, X4
	243 Move X0, X20
	244 Move X1, X31
	245 Call ComputeBuffer.get_count, X0
	246 Move X8, 0xF24000
	247 Move X8, [X8+2480]
	248 Move W1, W0
	249 Move X8, [X8]
	250 Move X0, X8
	251 Call 0x1C17D6C
	252 Move X1, X0
	253 Move [X19+48], X0
	254 Move X0, X21
	255 Move X2, X31
	256 Call ComputeBuffer.GetData, X0, X1
	257 Move X0, X20
	258 Move X1, X31
	259 Call ComputeBuffer.Dispose, X0
	260 Move X0, X21
	261 Move X1, X31
	262 Call ComputeBuffer.Dispose, X0
	263 Move X8, [X19+32]
	264 Compare X8, 0
	265 JumpIfEqual {396}
	266 Move X9, [X8+128]
	267 Compare X9, 0
	268 JumpIfEqual {396}
	269 Move W10, [X9+28]
	270 Move W8, W31
	271 Add W10, W10, 1
	272 Move [X9+24], W31
	273 Move [X9+28], W10
	274 Move [X19+56], W31
	275 Move TEMP, 0
	276 Not TEMP
	277 Move W8, TEMP
	278 Move [X19+16], W8
	279 NotImplemented "Instruction CMP not yet implemented."
	280 Move X8, W8
	281 Move W10, 12
	282 Move X20, 0x1207000
	283 NotImplemented "Instruction MADD not yet implemented."
	284 Move W9, [X20+1923]
	285 Move V9, [X8+32]
	286 NotImplemented "Instruction LDUR not yet implemented."
	287 Compare W9, 0
	288 JumpIfNotEqual {294}
	289 Move X0, 0xF22000
	290 Move X0, [X0+1440]
	291 Call 0x1C17CF4
	292 Move W8, 1
	293 Move [X20+1923], W8
	294 Move X8, 0xF22000
	295 Move X8, [X8+1440]
	296 Move X8, [X8]
	297 Move X8, [X8+184]
	298 Move V0, [X8]
	299 NotImplemented "Instruction LDUR not yet implemented."
	300 Move X8, -40796160
	301 Move V2, [X8+3872]
	302 Subtract S0, S9, S0
	303 Subtract V1, V8, V1
	304 Multiply S0, S0, S0
	305 NotImplemented "Instruction INVALID not yet implemented."
	306 Add S0, S0, S1
	307 Move S1, V1.S[1]
	308 Add S0, S1, S0
	309 NotImplemented "Instruction FCMP not yet implemented."
	310 Move X10, [X19+32]
	311 Compare X10, 0
	312 JumpIfEqual {396}
	313 Move X8, [X19+48]
	314 Compare X8, 0
	315 JumpIfEqual {396}
	316 NotImplemented "Instruction LDRSW not yet implemented."
	317 Move W11, [X8+24]
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Move X0, [X10+128]
	320 Compare X0, 0
	321 JumpIfEqual {396}
	322 Move X11, 0xF26000
	323 Move X11, [X11+952]
	324 Move W12, 12
	325 Move W13, [X0+28]
	326 NotImplemented "Instruction NOP not yet implemented."
	327 NotImplemented "Instruction MADD not yet implemented."
	328 Move X10, [X0+16]
	329 Move S0, [X8+32]
	330 Move S1, [X8+36]
	331 Move V2, [X8+40]
	332 Move X8, [X11]
	333 Add W9, W13, 1
	334 Move [X0+28], W9
	335 Compare X10, 0
	336 JumpIfEqual {396}
	337 NotImplemented "Instruction LDRSW not yet implemented."
	338 Move W11, [X10+24]
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Add W8, W9, 1
	341 Move W11, 12
	342 Move [X0+24], W8
	343 NotImplemented "Instruction NOP not yet implemented."
	344 NotImplemented "Instruction MADD not yet implemented."
	345 Move [X8+32], S0
	346 Move [X8+40], S1
	347 Move [X8+40], S2
	348 Move X8, [X8+32]
	349 Move X8, [X8+192]
	350 Move X1, [X8+112]
	351 Call List`1<Vector3>.AddWithResize, X0, X1
	352 Move X9, [X19+48]
	353 Compare X9, 0
	354 JumpIfEqual {396}
	355 Move X8, [X19+40]
	356 Compare X8, 0
	357 JumpIfEqual {396}
	358 Move W10, [X8+880]
	359 Move V0, [X9+24]
	360 Move W11, [X8+884]
	361 Move W9, 0x42C80000
	362 NotImplemented "Instruction SCVTF not yet implemented."
	363 NotImplemented "Instruction SCVTF not yet implemented."
	364 NotImplemented "Instruction FDIV not yet implemented."
	365 Move S1, W9
	366 Add W9, W10, 1
	367 Move [X8+880], W9
	368 Add W9, W11, 1
	369 NotImplemented "Instruction CMP not yet implemented."
	370 Multiply S0, S0, S1
	371 NotImplemented "Instruction CSINC not yet implemented."
	372 Move [X8+892], S0
	373 Move [X8+884], W9
	374 Move W8, [X19+56]
	375 Add W8, W8, 1
	376 Move [X19+56], W8
	377 Move X9, [X19+48]
	378 Compare X9, 0
	379 JumpIfEqual {396}
	380 Move W10, [X9+24]
	381 NotImplemented "Instruction CMP not yet implemented."
	382 Move W0, W31
	383 Move W0, 1
	384 Move [X19+24], X31
	385 Move [X19+16], W0
	386 Move X20, [X31+64]
	387 Move X19, [X31+72]
	388 Move X22, [X31+48]
	389 Move X21, [X31+56]
	390 Move X24, [X31+32]
	391 Move X23, [X31+40]
	392 Move X30, [X31+16]
	393 Move D9, [X31+80]
	394 Move D8, [X31+88]
	395 Return X0
	396 Call 0x1C17F20
	397 Call 0x1C17F28

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x031D2A1C BL 0x1C16CF4
	0x031D2A20 ADRP X0, 0xF4D000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x031D2A24 LDR X0, [X0 + 0xEF0]
	0x031D2A28 BL 0x1C16CF4
	0x031D2A2C ADRP X0, 0xF4D000
	0x031D2A30 LDR X0, [X0 + 0xEF8]
	0x031D2A34 BL 0x1C16CF4
	0x031D2A38 ADRP X0, 0xF4D000
	0x031D2A3C LDR X0, [X0 + 0xEE0]
	0x031D2A40 BL 0x1C16CF4
	0x031D2A44 ADRP X0, 0xF4D000
	0x031D2A48 LDR X0, [X0 + 0xF00]
	0x031D2A4C BL 0x1C16CF4
	0x031D2A50 ADRP X0, 0xF4D000
	0x031D2A54 LDR X0, [X0 + 0xF08]
	0x031D2A58 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xF22000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0xF4E000
	011 Move X0, [X0+3528]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x031D2A5C ADRP X0, 0xF4D000
	0x031D2A60 LDR X0, [X0 + 0xF10]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

