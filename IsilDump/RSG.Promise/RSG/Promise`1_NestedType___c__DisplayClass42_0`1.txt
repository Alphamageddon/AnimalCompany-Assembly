Type: RSG.Promise`1/<>c__DisplayClass42_0`1

Method: System.Void .ctor()

Disassembly:
	0x02378BD4 MOV X2, X22
	0x02378BD8 BLR X8

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <Then>b__0(PromisedT v)

Disassembly:
	0x02378BDC LDR X22, [X19 + 0x28]
	0x02378BE0 LDUR X21, [X29 - 0x10]
	0x02378BE4 CBNZ X22, 0x2378C18
	0x02378BE8 ADRP X8, 0x1D7D000
	0x02378BEC LDR X8, [X8 + 0x5B0]
	0x02378BF0 LDR X0, [X8]
	0x02378BF4 BL 0x1C16F10
	0x02378BF8 LDR X8, [X20 + 0x20]
	0x02378BFC MOV X1, X19
	0x02378C00 MOV X3, X31
	0x02378C04 MOV X22, X0
	0x02378C08 LDR X8, [X8 + 0xC0]
	0x02378C0C LDR X2, [X8 + 0x20]
	0x02378C10 BL 0x2A6DA40
	0x02378C14 STR X22, [X19 + 0x28]
	0x02378C18 CBZ X21, 0x2378DA0
	0x02378C1C ADRP X25, 0x1DA4000
	0x02378C20 LDR X8, [X21]
	0x02378C24 LDR X25, [X25 + 0x2C0]
	0x02378C28 LDRH W9, [X8 + 0x12E]
	0x02378C2C LDR X1, [X25]
	0x02378C30 CBZ X9, 0x2378C54
	0x02378C34 LDR X10, [X8 + 0xB0]
	0x02378C38 ADD X10, X10, 0x8
	0x02378C3C LDUR X11, [X10 - 0x8]
	0x02378C40 CMP X11, X1
	0x02378C44 B.EQ 0x2378C78
	0x02378C48 SUBS X9, X9, 0x1
	0x02378C4C ADD X10, X10, 0x10
	0x02378C50 B.NE 0x2378C3C
	0x02378C54 MOVZ W2, 0x17
	0x02378C58 MOV X0, X21
	0x02378C5C BL 0x1C5C788
	0x02378C60 B 0x2378C88
	0x02378C64 LDR X0, [X19 + 0x18]
	0x02378C68 CBZ X0, 0x2378DA0
	0x02378C6C MOV X1, X31
	0x02378C70 BL 0x358EC6C
	0x02378C74 B 0x2378D74
	0x02378C78 LDR W9, [X10]
	0x02378C7C ADD W9, W9, 0x17
	0x02378C80 ADD X8, X8, W9, 0x4, SXTW
	0x02378C84 ADD X0, X8, 0x138
	0x02378C88 LDP X8, X2, [X0]
	0x02378C8C MOV X0, X21
	0x02378C90 MOV X1, X22
	0x02378C94 BLR X8
	0x02378C98 LDR X22, [X19 + 0x30]
	0x02378C9C MOV X21, X0
	0x02378CA0 CBNZ X22, 0x2378CD4
	0x02378CA4 ADRP X8, 0x1D7C000
	0x02378CA8 LDR X8, [X8 + 0xE70]
	0x02378CAC LDR X0, [X8]
	0x02378CB0 BL 0x1C16F10
	0x02378CB4 LDR X8, [X20 + 0x20]
	0x02378CB8 MOV X1, X19
	0x02378CBC MOV X3, X31
	0x02378CC0 MOV X22, X0
	0x02378CC4 LDR X8, [X8 + 0xC0]
	0x02378CC8 LDR X2, [X8 + 0x28]
	0x02378CCC BL 0x3314368
	0x02378CD0 STR X22, [X19 + 0x30]
	0x02378CD4 LDR X23, [X19 + 0x38]
	0x02378CD8 CBNZ X23, 0x2378D0C
	0x02378CDC ADRP X8, 0x1D7E000
	0x02378CE0 LDR X8, [X8 + 0x2C8]
	0x02378CE4 LDR X0, [X8]
	0x02378CE8 BL 0x1C16F10
	0x02378CEC LDR X8, [X20 + 0x20]
	0x02378CF0 MOV X1, X19
	0x02378CF4 MOV X3, X31
	0x02378CF8 MOV X23, X0
	0x02378CFC LDR X8, [X8 + 0xC0]
	0x02378D00 LDR X2, [X8 + 0x30]
	0x02378D04 BL 0x2A6B948
	0x02378D08 STR X23, [X19 + 0x38]
	0x02378D0C CBZ X21, 0x2378DA0
	0x02378D10 LDR X8, [X21]
	0x02378D14 LDR X1, [X25]
	0x02378D18 LDRH W9, [X8 + 0x12E]
	0x02378D1C CBZ X9, 0x2378D40
	0x02378D20 LDR X10, [X8 + 0xB0]
	0x02378D24 ADD X10, X10, 0x8
	0x02378D28 LDUR X11, [X10 - 0x8]
	0x02378D2C CMP X11, X1
	0x02378D30 B.EQ 0x2378D50
	0x02378D34 SUBS X9, X9, 0x1
	0x02378D38 ADD X10, X10, 0x10
	0x02378D3C B.NE 0x2378D28
	0x02378D40 MOVZ W2, 0xB
	0x02378D44 MOV X0, X21
	0x02378D48 BL 0x1C5C788
	0x02378D4C B 0x2378D60
	0x02378D50 LDR W9, [X10]
	0x02378D54 ADD W9, W9, 0xB
	0x02378D58 ADD X8, X8, W9, 0x4, SXTW
	0x02378D5C ADD X0, X8, 0x138
	0x02378D60 LDP X8, X3, [X0]
	0x02378D64 MOV X0, X21
	0x02378D68 MOV X1, X22
	0x02378D6C MOV X2, X23
	0x02378D70 BLR X8
	0x02378D74 LDR X8, [X24 + 0x28]
	0x02378D78 LDUR X9, [X29 - 0x8]
	0x02378D7C CMP X8, X9
	0x02378D80 B.NE 0x2378DA4
	0x02378D84 ADD X31, X29, 0x0
	0x02378D88 LDP X20, X19, [X31 + 0x40]
	0x02378D8C LDP X22, X21, [X31 + 0x30]
	0x02378D90 LDP X24, X23, [X31 + 0x20]
	0x02378D94 LDR X25, [X31 + 0x10]
	0x02378D98 LDP X29, X30, [X31], #0x50
	0x02378D9C RET
	0x02378DA0 BL 0x1C16F20
	0x02378DA4 BL 0x3EB1B20
	0x02378DA8 STR X30, [X31 - 0x10]!
	0x02378DAC LDR X0, [X0 + 0x18]
	0x02378DB0 CBZ X0, 0x2378DC0
	0x02378DB4 MOV X1, X31
	0x02378DB8 LDR X30, [X31], #0x10
	0x02378DBC B 0x358EDE0
	0x02378DC0 BL 0x1C16F20
	0x02378DC4 STR X30, [X31 - 0x10]!
	0x02378DC8 LDR X0, [X0 + 0x18]
	0x02378DCC CBZ X0, 0x2378DDC
	0x02378DD0 MOV X1, X31
	0x02378DD4 LDR X30, [X31], #0x10
	0x02378DD8 B 0x358EC6C
	0x02378DDC BL 0x1C16F20
	0x02378DE0 STR X30, [X31 - 0x10]!
	0x02378DE4 LDR X0, [X0 + 0x18]
	0x02378DE8 CBZ X0, 0x2378DF8
	0x02378DEC MOV X2, X31
	0x02378DF0 LDR X30, [X31], #0x10
	0x02378DF4 B 0x358E1F0
	0x02378DF8 BL 0x1C16F20
	0x02378DFC STR X30, [X31 - 0x20]!
	0x02378E00 STP X20, X19, [X31 + 0x10]
	0x02378E04 LDR X8, [X0 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x2062000
	008 Move W8, [X22+2305]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x1D7E000
	017 Move X0, [X0+1456]
	018 Call 0x1C17CF4
	019 Move X0, 0x1D7F000
	020 Move X0, [X0+712]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2305], W8
	024 Move X8, [X20+16]
	025 Compare X8, 0
	026 JumpIfEqual {162}
	027 Move X9, [X8+24]
	028 Move X0, [X8+64]
	029 Move X2, [X8+40]
	030 Move X1, X21
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X22, [X20+40]
	033 Move X21, X0
	034 Compare X22, 0
	035 JumpIfNotEqual {48}
	036 Move X8, 0x1D7E000
	037 Move X8, [X8+1456]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X8, [X19+32]
	041 Move X1, X20
	042 Move X3, X31
	043 Move X22, X0
	044 Move X8, [X8+192]
	045 Move X2, [X8+40]
	046 Call Action`1<Single>..ctor, X0, X1, X2
	047 Move [X20+40], X22
	048 Compare X21, 0
	049 JumpIfEqual {162}
	050 Move X8, [X19+32]
	051 Move X8, [X8+192]
	052 Move X1, [X8+32]
	053 Move W8, [X1+309]
	054 Move TEMP, X8
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {61}
	058 Move X0, X1
	059 Call 0x1C5D684
	060 Move X1, X0
	061 Move X8, [X21]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Compare X9, 0
	064 JumpIfEqual {71}
	065 Move X10, [X8+176]
	066 Add X10, X10, 8
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Subtract X9, X9, 1
	070 Add X10, X10, 16
	071 Move W2, 24
	072 Move X0, X21
	073 Call 0x1C5D788
	074 Move W9, [X10]
	075 Add W9, W9, 24
	076 Add X8, X8, W9
	077 Add X0, X8, 312
	078 Move X8, [X0]
	079 Move X2, [X0+8]
	080 Move X0, X21
	081 Move X1, X22
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Move X22, [X20+48]
	084 Move X21, X0
	085 Compare X22, 0
	086 JumpIfNotEqual {105}
	087 Move X8, [X19+32]
	088 Move X8, [X8+192]
	089 Move X0, [X8+56]
	090 Move W8, [X0+309]
	091 Move TEMP, X8
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {96}
	095 Call 0x1C5D684
	096 Call 0x1C17F10
	097 Move X8, [X19+32]
	098 Move X1, X20
	099 Move X22, X0
	100 Move X8, [X8+192]
	101 Move X2, [X8+64]
	102 Move X3, [X8+72]
	103 Call Action`1<Object>..ctor, X0, X1, X2
	104 Move [X20+48], X22
	105 Move X23, [X20+56]
	106 Compare X23, 0
	107 JumpIfNotEqual {120}
	108 Move X8, 0x1D7F000
	109 Move X8, [X8+712]
	110 Move X0, [X8]
	111 Call 0x1C17F10
	112 Move X8, [X19+32]
	113 Move X1, X20
	114 Move X3, X31
	115 Move X23, X0
	116 Move X8, [X8+192]
	117 Move X2, [X8+80]
	118 Call Action`1<Object>..ctor, X0, X1, X2
	119 Move [X20+56], X23
	120 Compare X21, 0
	121 JumpIfEqual {162}
	122 Move X8, [X19+32]
	123 Move X8, [X8+192]
	124 Move X1, [X8+32]
	125 Move W8, [X1+309]
	126 Move TEMP, X8
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfEqual {133}
	130 Move X0, X1
	131 Call 0x1C5D684
	132 Move X1, X0
	133 Move X8, [X21]
	134 NotImplemented "Instruction LDRH not yet implemented."
	135 Compare X9, 0
	136 JumpIfEqual {143}
	137 Move X10, [X8+176]
	138 Add X10, X10, 8
	139 NotImplemented "Instruction LDUR not yet implemented."
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Subtract X9, X9, 1
	142 Add X10, X10, 16
	143 Move W2, 12
	144 Move X0, X21
	145 Call 0x1C5D788
	146 Move W9, [X10]
	147 Add W9, W9, 12
	148 Add X8, X8, W9
	149 Add X0, X8, 312
	150 Move X4, [X0]
	151 Move X3, [X0+8]
	152 Move X0, X21
	153 Move X1, X22
	154 Move X20, [X31+32]
	155 Move X19, [X31+40]
	156 Move X22, [X31+16]
	157 Move X21, [X31+24]
	158 Move X2, X23
	159 Move X30, [X31+48]
	160 Move X23, [X31+56]
	161 CallNoReturn X4
	162 Call 0x1C17F20

Method: System.Void <Then>b__2(System.Single progress)

Disassembly:
	0x02378E08 MOV X20, X0
	0x02378E0C MOV X19, X1
	0x02378E10 CBZ X8, 0x2378E28
	0x02378E14 LDR X9, [X8 + 0x18]
	0x02378E18 LDR X0, [X8 + 0x40]
	0x02378E1C LDR X2, [X8 + 0x28]
	0x02378E20 MOV X1, X19
	0x02378E24 BLR X9
	0x02378E28 LDR X0, [X20 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X1+32]
	006 Move X8, [X8+192]
	007 Move X1, [X8+104]
	008 Move X30, [X31+16]
	009 Call 0x24E1AD0, X0, V0
	010 Return 
	011 Call 0x1C17F20

Method: System.Void <Then>b__3(ConvertedT chainedValue)

Disassembly:
	0x02378E2C CBZ X0, 0x2378E44
	0x02378E30 MOV X1, X19
	0x02378E34 LDP X20, X19, [X31 + 0x10]
	0x02378E38 MOV X2, X31
	0x02378E3C LDR X30, [X31], #0x20
	0x02378E40 B 0x358E1F0
	0x02378E44 BL 0x1C16F20
	0x02378E48 MOV X1, X31
	0x02378E4C B 0x33BDD8C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+120]
	008 Move X30, [X31+16]
	009 Call 0x24E1940, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: System.Void <Then>b__4(System.Exception ex)

Disassembly:
	0x02378E50 STP X30, X19, [X31 - 0x10]!
	0x02378E54 LDR X8, [X0 + 0x10]
	0x02378E58 MOV X19, X0
	0x02378E5C CBZ X8, 0x2378E70
	0x02378E60 LDR X9, [X8 + 0x18]
	0x02378E64 LDR X0, [X8 + 0x40]
	0x02378E68 LDR X2, [X8 + 0x28]
	0x02378E6C BLR X9
	0x02378E70 LDR X0, [X19 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+128]
	008 Move X30, [X31+16]
	009 Call 0x24E17B0, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: System.Void <Then>b__1(System.Exception ex)

Disassembly:
	0x02378E74 CBZ X0, 0x2378E84
	0x02378E78 MOV X1, X31
	0x02378E7C LDP X30, X19, [X31], #0x10
	0x02378E80 B 0x358EC6C
	0x02378E84 BL 0x1C16F20
	0x02378E88 STR X30, [X31 - 0x20]!
	0x02378E8C STP X20, X19, [X31 + 0x10]
	0x02378E90 LDR X8, [X0 + 0x20]
	0x02378E94 MOV X20, X0
	0x02378E98 MOV X19, X1
	0x02378E9C CBZ X8, 0x2378EB4
	0x02378EA0 LDR X9, [X8 + 0x18]
	0x02378EA4 LDR X0, [X8 + 0x40]
	0x02378EA8 LDR X2, [X8 + 0x28]
	0x02378EAC MOV X1, X19
	0x02378EB0 BLR X9
	0x02378EB4 LDR X0, [X20 + 0x18]
	0x02378EB8 CBZ X0, 0x2378ED0
	0x02378EBC MOV X1, X19
	0x02378EC0 LDP X20, X19, [X31 + 0x10]
	0x02378EC4 MOV X2, X31
	0x02378EC8 LDR X30, [X31], #0x20
	0x02378ECC B 0x358E1F0
	0x02378ED0 BL 0x1C16F20
	0x02378ED4 MOV X1, X31
	0x02378ED8 B 0x33BDD8C
	0x02378EDC STP X29, X30, [X31 - 0x40]!
	0x02378EE0 STR X23, [X31 + 0x10]
	0x02378EE4 STP X22, X21, [X31 + 0x20]
	0x02378EE8 STP X20, X19, [X31 + 0x30]
	0x02378EEC ADD X29, X31, 0x0
	0x02378EF0 SUB X31, X31, 0x20
	0x02378EF4 MRS X22, 0xC000
	0x02378EF8 LDR X8, [X22 + 0x28]
	0x02378EFC ADD X9, X31, 0x0
	0x02378F00 MOV X19, X0
	0x02378F04 STUR X8, [X29 - 0x8]
	0x02378F08 STUR X1, [X29 - 0x18]
	0x02378F0C LDR X23, [X2 + 0x20]
	0x02378F10 LDR X8, [X23 + 0xC0]
	0x02378F14 LDR X8, [X8 + 0x10]
	0x02378F18 LDR W2, [X8 + 0xFC]
	0x02378F1C ADD X10, X2, 0xF
	0x02378F20 AND X10, X10, 0x1FFFFFFFF
	0x02378F24 SUB X20, X9, X10
	0x02378F28 ADD X31, X20, 0x0
	0x02378F2C LDR X21, [X0 + 0x10]
	0x02378F30 CBZ X21, 0x2378F7C
	0x02378F34 LDR W8, [X8 + 0x28]
	0x02378F38 MOV X0, X20
	0x02378F3C CMP W8, 0x0
	0x02378F40 SUB X8, X29, 0x18
	0x02378F44 CSEL X1, X1, X8, LT
	0x02378F48 BL 0x3EB1AC0
	0x02378F4C LDR X8, [X23 + 0xC0]
	0x02378F50 LDP X9, X1, [X8 + 0x10]
	0x02378F54 LDR W8, [X9 + 0x28]
	0x02378F58 LDR X0, [X1]
	0x02378F5C TBNZ X8, 0x1F, 0x2378F64
	0x02378F60 LDR X20, [X20]
	0x02378F64 STUR X20, [X29 - 0x10]
	0x02378F68 LDR X8, [X1 + 0x10]
	0x02378F6C SUB X3, X29, 0x10
	0x02378F70 MOV X2, X21
	0x02378F74 MOV X4, X20
	0x02378F78 BLR X8
	0x02378F7C LDR X0, [X19 + 0x18]
	0x02378F80 CBZ X0, 0x2378FB4
	0x02378F84 MOV X1, X31
	0x02378F88 BL 0x358EC6C
	0x02378F8C LDR X8, [X22 + 0x28]
	0x02378F90 LDUR X9, [X29 - 0x8]
	0x02378F94 CMP X8, X9
	0x02378F98 B.NE 0x2378FB8
	0x02378F9C ADD X31, X29, 0x0
	0x02378FA0 LDP X20, X19, [X31 + 0x30]
	0x02378FA4 LDP X22, X21, [X31 + 0x20]
	0x02378FA8 LDR X23, [X31 + 0x10]
	0x02378FAC LDP X29, X30, [X31], #0x40
	0x02378FB0 RET
	0x02378FB4 BL 0x1C16F20
	0x02378FB8 BL 0x3EB1B20
	0x02378FBC STR X30, [X31 - 0x20]!
	0x02378FC0 STP X20, X19, [X31 + 0x10]
	0x02378FC4 LDR X8, [X0 + 0x20]
	0x02378FC8 MOV X20, X0
	0x02378FCC MOV X19, X1
	0x02378FD0 CBZ X8, 0x2378FE8
	0x02378FD4 LDR X9, [X8 + 0x18]
	0x02378FD8 LDR X0, [X8 + 0x40]
	0x02378FDC LDR X2, [X8 + 0x28]
	0x02378FE0 MOV X1, X19
	0x02378FE4 BLR X9
	0x02378FE8 LDR X0, [X20 + 0x18]
	0x02378FEC CBZ X0, 0x2379004
	0x02378FF0 MOV X1, X19
	0x02378FF4 LDP X20, X19, [X31 + 0x10]
	0x02378FF8 MOV X2, X31
	0x02378FFC LDR X30, [X31], #0x20
	0x02379000 B 0x358E1F0
	0x02379004 BL 0x1C16F20
	0x02379008 MOV X1, X31
	0x0237900C B 0x33BDD8C
	0x02379010 STP X30, X19, [X31 - 0x10]!
	0x02379014 LDR X8, [X0 + 0x10]
	0x02379018 CBZ X8, 0x2379044
	0x0237901C MOV X19, X2
	0x02379020 LDR X9, [X8 + 0x18]
	0x02379024 LDR X0, [X8 + 0x40]
	0x02379028 LDR X2, [X8 + 0x28]
	0x0237902C BLR X9
	0x02379030 LDR X8, [X19 + 0x20]
	0x02379034 LDR X8, [X8 + 0xC0]
	0x02379038 LDR X1, [X8 + 0x28]
	0x0237903C LDP X30, X19, [X31], #0x10
	0x02379040 B 0x24E1D38
	0x02379044 BL 0x1C16F20
	0x02379048 MOV X1, X31
	0x0237904C B 0x33BDD8C
	0x02379050 STP X29, X30, [X31 - 0x40]!
	0x02379054 STP X24, X23, [X31 + 0x10]
	0x02379058 STP X22, X21, [X31 + 0x20]
	0x0237905C STP X20, X19, [X31 + 0x30]
	0x02379060 ADD X29, X31, 0x0
	0x02379064 SUB X31, X31, 0x30
	0x02379068 MRS X23, 0xC000
	0x0237906C LDR X8, [X23 + 0x28]
	0x02379070 MOV X19, X2
	0x02379074 ADD X10, X31, 0x0
	0x02379078 STUR X8, [X29 - 0x8]
	0x0237907C STUR X1, [X29 - 0x28]
	0x02379080 LDR X24, [X2 + 0x20]
	0x02379084 LDR X8, [X24 + 0xC0]
	0x02379088 LDR X9, [X8 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x2062000
	008 Move W8, [X22+2306]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1D7F000
	017 Move X0, [X0+712]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2306], W8
	021 Move X8, [X20+32]
	022 Compare X8, 0
	023 JumpIfEqual {127}
	024 Move X0, [X8+64]
	025 Move X9, [X8+24]
	026 Move X2, [X8+40]
	027 Move X1, X21
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X22, [X20+64]
	030 Move X21, X0
	031 Compare X22, 0
	032 JumpIfNotEqual {51}
	033 Move X8, [X19+32]
	034 Move X8, [X8+192]
	035 Move X0, [X8+56]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Call 0x1C17F10
	043 Move X8, [X19+32]
	044 Move X22, X0
	045 Move X8, [X8+192]
	046 Move X2, [X8+152]
	047 Move X3, [X8+72]
	048 Move X1, X20
	049 Call Action`1<Object>..ctor, X0, X1, X2
	050 Move [X20+64], X22
	051 Move X23, [X20+72]
	052 Compare X23, 0
	053 JumpIfNotEqual {66}
	054 Move X8, 0x1D7F000
	055 Move X8, [X8+712]
	056 Move X0, [X8]
	057 Call 0x1C17F10
	058 Move X8, [X19+32]
	059 Move X23, X0
	060 Move X8, [X8+192]
	061 Move X2, [X8+160]
	062 Move X1, X20
	063 Move X3, X31
	064 Call Action`1<Object>..ctor, X0, X1, X2
	065 Move [X20+72], X23
	066 Compare X21, 0
	067 JumpIfEqual {109}
	068 Move X8, [X19+32]
	069 Move X8, [X8+192]
	070 Move X1, [X8+32]
	071 Move W8, [X1+309]
	072 Move TEMP, X8
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {79}
	076 Move X0, X1
	077 Call 0x1C5D684
	078 Move X1, X0
	079 Move X8, [X21]
	080 NotImplemented "Instruction LDRH not yet implemented."
	081 Compare X9, 0
	082 JumpIfEqual {89}
	083 Move X10, [X8+176]
	084 Add X10, X10, 8
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Subtract X9, X9, 1
	088 Add X10, X10, 16
	089 Move W2, 12
	090 Move X0, X21
	091 Call 0x1C5D788
	092 Move W9, [X10]
	093 Add W9, W9, 12
	094 Add X8, X8, W9
	095 Add X0, X8, 312
	096 Move X8, [X0]
	097 Move X3, [X0+8]
	098 Move X0, X21
	099 Move X1, X22
	100 Move X2, X23
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X30, [X31+48]
	107 Move X23, [X31+56]
	108 Return 
	109 Call 0x1C17F20
	110 Move X21, X0
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X0, X21
	113 Call 0x3EB2AD0
	114 Move X21, X0
	115 Move X0, 0x1D7B000
	116 Move X0, [X0+2000]
	117 Call 0x1C17D08
	118 Move X8, [X21]
	119 Move X1, [X8]
	120 Call 0x1C18270
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {143}
	125 Move X21, [X21]
	126 Call 0x3EB2AE0
	127 Move X0, [X20+24]
	128 Compare X0, 0
	129 JumpIfEqual {142}
	130 Move X8, [X19+32]
	131 Move X1, X21
	132 Move X20, [X31+32]
	133 Move X19, [X31+40]
	134 Move X22, [X31+16]
	135 Move X21, [X31+24]
	136 Move X8, [X8+192]
	137 Move X2, [X8+128]
	138 Move X30, [X31+48]
	139 Move X23, [X31+56]
	140 Call 0x24E17B0, X0, X1
	141 Return 
	142 Call 0x1C17F20
	143 Move W0, 8
	144 Call 0x3EB2AF0
	145 Move X8, [X21]
	146 Move [X0], X8
	147 Move X1, 0x1B3C000
	148 Add X1, X1, 3672
	149 Move X2, X31
	150 Call 0x3EB2B00
	151 Move X21, X0
	152 Call 0x3EB2AE0
	153 Move X0, X21
	154 Call 0x1D2D690
	155 Call 0x1991590

Method: System.Void <Then>b__5(ConvertedT chainedValue)

Disassembly:
	0x0237908C LDR W2, [X9 + 0xFC]
	0x02379090 ADD X11, X2, 0xF
	0x02379094 AND X11, X11, 0x1FFFFFFFF
	0x02379098 SUB X21, X10, X11
	0x0237909C ADD X31, X21, 0x0
	0x023790A0 LDR X8, [X8 + 0x20]
	0x023790A4 ADD X10, X31, 0x0
	0x023790A8 LDR W8, [X8 + 0xFC]
	0x023790AC ADD X8, X8, 0xF

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+120]
	008 Move X30, [X31+16]
	009 Call 0x24E1940, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: System.Void <Then>b__6(System.Exception callbackEx)

Disassembly:
	0x023790B0 AND X8, X8, 0x1FFFFFFFF
	0x023790B4 SUB X20, X10, X8
	0x023790B8 ADD X31, X20, 0x0
	0x023790BC LDR W8, [X9 + 0x28]
	0x023790C0 LDR X22, [X0 + 0x10]
	0x023790C4 MOV X0, X21
	0x023790C8 CMP W8, 0x0
	0x023790CC SUB X8, X29, 0x28
	0x023790D0 CSEL X1, X1, X8, LT

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+128]
	008 Move X30, [X31+16]
	009 Call 0x24E17B0, X0, X1
	010 Return 
	011 Call 0x1C17F20

