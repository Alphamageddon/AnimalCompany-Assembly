Type: RSG.Promise`1/<>c__DisplayClass35_0

Method: System.Void .ctor()

Disassembly:
	0x02376DD8 ADRP X10, 0x1DA5000
	0x02376DDC LDR X8, [X19]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <Catch>b__0(PromisedT v)

Disassembly:
	0x02376DE0 LDR X10, [X10 + 0x718]
	0x02376DE4 LDRH W9, [X8 + 0x12E]
	0x02376DE8 LDR X1, [X10]
	0x02376DEC CBZ X9, 0x2376E10
	0x02376DF0 LDR X10, [X8 + 0xB0]
	0x02376DF4 ADD X10, X10, 0x8
	0x02376DF8 LDUR X11, [X10 - 0x8]
	0x02376DFC CMP X11, X1
	0x02376E00 B.EQ 0x2376E20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+24]
	008 Move X30, [X31+16]
	009 Call 0x24E1940, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: System.Void <Catch>b__1(System.Exception ex)

Disassembly:
	0x02376E04 SUBS X9, X9, 0x1
	0x02376E08 ADD X10, X10, 0x10
	0x02376E0C B.NE 0x2376DF8
	0x02376E10 MOVZ W2, 0x3
	0x02376E14 MOV X0, X19
	0x02376E18 BL 0x1C5C788
	0x02376E1C B 0x2376E30
	0x02376E20 LDR W9, [X10]
	0x02376E24 ADD W9, W9, 0x3
	0x02376E28 ADD X8, X8, W9, 0x4, SXTW
	0x02376E2C ADD X0, X8, 0x138
	0x02376E30 LDP X8, X1, [X0]
	0x02376E34 MOV X0, X19
	0x02376E38 BLR X8
	0x02376E3C TBZ X0, 0x0, 0x2376E50
	0x02376E40 LDP X20, X19, [X31 + 0x20]
	0x02376E44 LDP X22, X21, [X31 + 0x10]
	0x02376E48 LDR X30, [X31], #0x30
	0x02376E4C RET
	0x02376E50 LDR X8, [X20 + 0x20]
	0x02376E54 LDP X1, X2, [X21 + 0x10]
	0x02376E58 LDR X3, [X21 + 0x20]
	0x02376E5C MOV X0, X19
	0x02376E60 LDR X8, [X8 + 0xC0]
	0x02376E64 LDP X20, X19, [X31 + 0x20]
	0x02376E68 LDP X22, X21, [X31 + 0x10]
	0x02376E6C MOVZ W4, 0x1
	0x02376E70 LDR X5, [X8 + 0x18]
	0x02376E74 LDR X30, [X31], #0x30
	0x02376E78 B 0x268F3AC
	0x02376E7C BL 0x1C16F20
	0x02376E80 MOV X1, X31
	0x02376E84 B 0x33BDD8C
	0x02376E88 STR X30, [X31 - 0x30]!
	0x02376E8C STP X22, X21, [X31 + 0x10]
	0x02376E90 STP X20, X19, [X31 + 0x20]
	0x02376E94 ADRP X22, 0x2063000
	0x02376E98 LDRB W8, [X22 + 0x8F5]
	0x02376E9C MOV X20, X2
	0x02376EA0 MOV X19, X1
	0x02376EA4 MOV X21, X0
	0x02376EA8 TBNZ X8, 0x0, 0x2376EC0
	0x02376EAC ADRP X0, 0x1DA5000
	0x02376EB0 LDR X0, [X0 + 0x718]
	0x02376EB4 BL 0x1C16CF4
	0x02376EB8 MOVZ W8, 0x1
	0x02376EBC STRB W8, [X22 + 0x8F5]
	0x02376EC0 CBZ X19, 0x2376F68
	0x02376EC4 ADRP X10, 0x1DA5000
	0x02376EC8 LDR X8, [X19]
	0x02376ECC LDR X10, [X10 + 0x718]
	0x02376ED0 LDRH W9, [X8 + 0x12E]
	0x02376ED4 LDR X1, [X10]
	0x02376ED8 CBZ X9, 0x2376EFC
	0x02376EDC LDR X10, [X8 + 0xB0]
	0x02376EE0 ADD X10, X10, 0x8
	0x02376EE4 LDUR X11, [X10 - 0x8]
	0x02376EE8 CMP X11, X1
	0x02376EEC B.EQ 0x2376F0C
	0x02376EF0 SUBS X9, X9, 0x1
	0x02376EF4 ADD X10, X10, 0x10
	0x02376EF8 B.NE 0x2376EE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+24]
	006 Move X19, X2
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfEqual {28}
	010 Move X21, [X20+16]
	011 Move X0, [X8+64]
	012 Move X9, [X8+24]
	013 Move X2, [X8+40]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X1, X0
	016 Compare X21, 0
	017 JumpIfEqual {29}
	018 Move X8, [X19+32]
	019 Move X8, [X8+192]
	020 Move X2, [X8+24]
	021 Move X0, X21
	022 Call 0x24E1940, X0, X1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return 
	028 Call 0x1C17F20
	029 Call 0x1C17F20
	030 Move X21, X0
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X21
	033 Call 0x3EB2AD0
	034 Move X21, X0
	035 Move X0, 0x1D7E000
	036 Move X0, [X0+2000]
	037 Call 0x1C17D08
	038 Move X8, [X21]
	039 Move X1, [X8]
	040 Call 0x1C18270
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {60}
	045 Move X21, [X21]
	046 Call 0x3EB2AE0
	047 Move X0, [X20+16]
	048 Compare X0, 0
	049 JumpIfEqual {68}
	050 Move X8, [X19+32]
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X1, X21
	054 Move X8, [X8+192]
	055 Move X2, [X8+48]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call 0x24E17B0, X0, X1
	059 Return 
	060 Move W0, 8
	061 Call 0x3EB2AF0
	062 Move X8, [X21]
	063 Move [X0], X8
	064 Move X1, 0x1B3F000
	065 Add X1, X1, 3672
	066 Move X2, X31
	067 Call 0x3EB2B00
	068 Call 0x1C17F20
	069 Move X21, X0
	070 Call 0x3EB2AE0
	071 Move X0, X21
	072 Call 0x1D2D690
	073 Call 0x1991590

Method: System.Void <Catch>b__2(System.Single v)

Disassembly:
	0x02376EFC MOVZ W2, 0x3
	0x02376F00 MOV X0, X19
	0x02376F04 BL 0x1C5C788
	0x02376F08 B 0x2376F1C
	0x02376F0C LDR W9, [X10]
	0x02376F10 ADD W9, W9, 0x3
	0x02376F14 ADD X8, X8, W9, 0x4, SXTW
	0x02376F18 ADD X0, X8, 0x138
	0x02376F1C LDP X8, X1, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X1+32]
	006 Move X8, [X8+192]
	007 Move X1, [X8+56]
	008 Move X30, [X31+16]
	009 Call 0x24E1AD0, X0, V0
	010 Return 
	011 Call 0x1C17F20

