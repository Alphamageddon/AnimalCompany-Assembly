Type: RSG.Promise`1/<>c__DisplayClass52_0`1

Method: System.Void .ctor()

Disassembly:
	0x0237B70C LDR X8, [X8 + 0xC0]
	0x0237B710 LDR X1, [X8 + 0x20]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: RSG.IPromise`1<ConvertedT> <ThenRace>b__0(PromisedT value)

Disassembly:
	0x0237B714 LDR X2, [X1]
	0x0237B718 LDR V8, [X31], #0x20
	0x0237B71C BR X2
	0x0237B720 BL 0x1C16F20
	0x0237B724 BL 0x1C16F28
	0x0237B728 MOV X1, X31
	0x0237B72C B 0x33BDD8C
	0x0237B730 STR X30, [X31 - 0x10]!
	0x0237B734 LDR X8, [X0 + 0x10]
	0x0237B738 CBZ X8, 0x237B750
	0x0237B73C LDR X3, [X8 + 0x18]
	0x0237B740 LDR X0, [X8 + 0x40]
	0x0237B744 LDR X2, [X8 + 0x28]
	0x0237B748 LDR X30, [X31], #0x10
	0x0237B74C BR X3
	0x0237B750 BL 0x1C16F20
	0x0237B754 MOV X1, X31
	0x0237B758 B 0x33BDD8C
	0x0237B75C STP X29, X30, [X31 - 0x30]!
	0x0237B760 STP X22, X21, [X31 + 0x10]
	0x0237B764 STP X20, X19, [X31 + 0x20]
	0x0237B768 ADD X29, X31, 0x0
	0x0237B76C SUB X31, X31, 0x10
	0x0237B770 MRS X20, 0xC000
	0x0237B774 LDR X8, [X20 + 0x28]
	0x0237B778 ADD X9, X31, 0x0
	0x0237B77C STUR X8, [X29 - 0x8]
	0x0237B780 STUR X1, [X29 - 0x10]
	0x0237B784 LDR X22, [X2 + 0x20]
	0x0237B788 LDR X8, [X22 + 0xC0]
	0x0237B78C LDR X8, [X8 + 0x8]
	0x0237B790 LDR W2, [X8 + 0xFC]
	0x0237B794 ADD X10, X2, 0xF
	0x0237B798 AND X10, X10, 0x1FFFFFFFF
	0x0237B79C SUB X19, X9, X10
	0x0237B7A0 ADD X31, X19, 0x0
	0x0237B7A4 LDR W8, [X8 + 0x28]
	0x0237B7A8 LDR X21, [X0 + 0x10]
	0x0237B7AC MOV X0, X19
	0x0237B7B0 CMP W8, 0x0
	0x0237B7B4 SUB X8, X29, 0x10
	0x0237B7B8 CSEL X1, X1, X8, LT
	0x0237B7BC BL 0x3EB1AC0
	0x0237B7C0 LDR X8, [X22 + 0xC0]
	0x0237B7C4 MOV X1, X19
	0x0237B7C8 LDR X0, [X8 + 0x8]
	0x0237B7CC BL 0x1C16E04
	0x0237B7D0 CBZ X21, 0x237B810
	0x0237B7D4 MOV X1, X0
	0x0237B7D8 LDR X8, [X21 + 0x18]
	0x0237B7DC LDR X0, [X21 + 0x40]
	0x0237B7E0 LDR X2, [X21 + 0x28]
	0x0237B7E4 BLR X8
	0x0237B7E8 LDR X8, [X20 + 0x28]
	0x0237B7EC LDUR X9, [X29 - 0x8]
	0x0237B7F0 CMP X8, X9
	0x0237B7F4 B.NE 0x237B814
	0x0237B7F8 AND W0, W0, 0x1

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Add X29, X31, 0
	009 Subtract X31, X31, 32
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X8, [X22+40]
	012 Move X19, X2
	013 Add X9, X31, 0
	014 Move [X29-8], X8
	015 Move [X29-32], X1
	016 Move X23, [X2+32]
	017 Move X8, [X23+192]
	018 Move X8, [X8+16]
	019 Move W2, [X8+252]
	020 Add X10, X2, 15
	021 And X10, X10, 0x1FFFFFFFF
	022 Subtract X21, X9, X10
	023 Add X31, X21, 0
	024 Move W8, [X8+40]
	025 Move X20, [X0+16]
	026 Move X0, X21
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Subtract X8, X29, 32
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Call 0x3EB2AC0
	031 Compare X20, 0
	032 JumpIfEqual {67}
	033 Move X8, [X23+192]
	034 Move X9, [X8+16]
	035 Move X1, [X8+24]
	036 Move W8, [X9+40]
	037 Move X0, [X1]
	038 Move TEMP, X8
	039 And TEMP, TEMP, -2147483648
	040 Compare TEMP, -2147483648
	041 JumpIfEqual {43}
	042 Move X21, [X21]
	043 Move [X29-24], X21
	044 Move X8, [X1+16]
	045 Subtract X3, X29, 24
	046 Subtract X4, X29, 16
	047 Move X2, X20
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X8, [X19+32]
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move X8, [X8+192]
	052 Move X1, [X8+40]
	053 Move X8, [X1]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X8, [X22+40]
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X31, X29, 0
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X23, [X31+16]
	064 Move X29, [X31+64]
	065 Move X30, [X31+72]
	066 Return X0
	067 Call 0x1C17F20
	068 Call 0x3EB2B20

