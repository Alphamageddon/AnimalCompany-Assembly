Type: Unity.XR.CoreUtils.Datums.DatumProperty`2

Method: System.Void .ctor()

Disassembly:
	0x029AE7C0 MOV X19, X0
	0x029AE7C4 MOV X20, X1
	0x029AE7C8 LDR X8, [X8 + 0xC0]
	0x029AE7CC LDR X0, [X8 + 0x8]
	0x029AE7D0 LDRB W8, [X0 + 0x135]
	0x029AE7D4 TBNZ X8, 0x0, 0x29AE7DC
	0x029AE7D8 BL 0x1C5C684

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Move [X19+16], W31
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 

Method: System.Void .ctor(TValue value)

Disassembly:
	0x029AE7DC BL 0x1C16F10
	0x029AE7E0 LDR X8, [X20 + 0x20]
	0x029AE7E4 FMOV S0, W31
	0x029AE7E8 MOVZ W1, 0x1
	0x029AE7EC MOV X2, X31
	0x029AE7F0 LDR X8, [X8 + 0xC0]
	0x029AE7F4 MOV W3, W31
	0x029AE7F8 MOV X20, X0
	0x029AE7FC LDR X4, [X8 + 0x38]
	0x029AE800 BL 0x28CB1A0
	0x029AE804 STR X20, [X19 + 0x28]
	0x029AE808 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move W8, 1
	009 Move [X20+16], W8
	010 Move [X20+20], W19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 

Method: System.Void .ctor(TDatum datum)

Disassembly:
	0x029AE80C LDP X20, X19, [X31 + 0x10]
	0x029AE810 MOV X1, X31
	0x029AE814 LDR X30, [X31], #0x20
	0x029AE818 B 0x3C36D2C
	0x029AE81C STR X30, [X31 - 0x10]!
	0x029AE820 LDR X8, [X1 + 0x20]
	0x029AE824 LDR X8, [X8 + 0xC0]
	0x029AE828 LDR X8, [X8]
	0x029AE82C LDR X1, [X8 + 0x80]
	0x029AE830 BL 0x1C16D18
	0x029AE834 LDR X0, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W31
	009 Move [X20+24], X19
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Return 

Method: TValue get_Value()

Disassembly:
	0x029AE838 LDR X30, [X31], #0x10
	0x029AE83C RET
	0x029AE840 STP X30, X21, [X31 - 0x20]!
	0x029AE844 STP X20, X19, [X31 + 0x10]
	0x029AE848 LDR X8, [X2 + 0x20]
	0x029AE84C MOV X19, X1
	0x029AE850 MOV X21, X0
	0x029AE854 MOVZ W1, 0x8
	0x029AE858 LDR X8, [X8 + 0xC0]
	0x029AE85C LDR X8, [X8]
	0x029AE860 LDR X20, [X8 + 0x80]
	0x029AE864 MOV X0, X20
	0x029AE868 BL 0x1C16D14
	0x029AE86C MOV X0, X21
	0x029AE870 MOV X1, X20
	0x029AE874 BL 0x1C16D18
	0x029AE878 STR X19, [X0]
	0x029AE87C LDP X20, X19, [X31 + 0x10]
	0x029AE880 LDP X30, X21, [X31], #0x20
	0x029AE884 RET
	0x029AE888 STR X30, [X31 - 0x10]!
	0x029AE88C LDR X8, [X1 + 0x20]
	0x029AE890 LDR X8, [X8 + 0xC0]
	0x029AE894 LDR X8, [X8]
	0x029AE898 LDR X8, [X8 + 0x80]
	0x029AE89C ADD X1, X8, 0x20
	0x029AE8A0 BL 0x1C16D18
	0x029AE8A4 LDRB W0, [X0]
	0x029AE8A8 LDR X30, [X31], #0x10
	0x029AE8AC RET
	0x029AE8B0 STP X30, X21, [X31 - 0x20]!
	0x029AE8B4 STP X20, X19, [X31 + 0x10]
	0x029AE8B8 LDR X8, [X2 + 0x20]
	0x029AE8BC MOV X19, X0
	0x029AE8C0 AND W21, W1, 0x1
	0x029AE8C4 MOVZ W1, 0x1
	0x029AE8C8 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1A2D000
	005 Move W8, [X20+3999]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1746000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3999], W8
	016 Move W8, [X19+16]
	017 Compare W8, 0
	018 JumpIfEqual {20}
	019 Add X8, X19, 20
	020 Move X8, 0x1746000
	021 Move X8, [X8+1432]
	022 Move X20, [X19+24]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {45}
	036 Move X8, [X19+24]
	037 Compare X8, 0
	038 JumpIfEqual {46}
	039 Add X8, X8, 36
	040 Move W0, [X8]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return X0
	045 Move W0, W31
	046 Call 0x1C17F20

Method: System.Void set_Value(TValue value)

Disassembly:
	0x029AE8CC LDR X8, [X8]
	0x029AE8D0 LDR X8, [X8 + 0x80]
	0x029AE8D4 ADD X20, X8, 0x20
	0x029AE8D8 MOV X0, X20
	0x029AE8DC BL 0x1C16D14
	0x029AE8E0 MOV X0, X19
	0x029AE8E4 MOV X1, X20
	0x029AE8E8 BL 0x1C16D18
	0x029AE8EC LDP X20, X19, [X31 + 0x10]
	0x029AE8F0 STRB W21, [X0]
	0x029AE8F4 LDP X30, X21, [X31], #0x20
	0x029AE8F8 RET
	0x029AE8FC STR X30, [X31 - 0x10]!
	0x029AE900 LDR X8, [X1 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+16]
	003 Compare W8, 0
	004 JumpIfEqual {8}
	005 Move [X0+20], W1
	006 Move X30, [X31+16]
	007 Return 
	008 Move X0, [X0+24]
	009 Compare X0, 0
	010 JumpIfEqual {17}
	011 Move X8, [X2+32]
	012 Move X8, [X8+192]
	013 Move X2, [X8+48]
	014 Move X30, [X31+16]
	015 Call 0x29AF370, X0, X1
	016 Return 
	017 Call 0x1C17F20

Method: Unity.XR.CoreUtils.Datums.Datum`1<TValue> get_Datum()

Disassembly:
	0x029AE904 LDR X8, [X8 + 0xC0]
	0x029AE908 LDR X8, [X8]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: TValue get_ConstantValue()

Disassembly:
	0x029AE90C LDR X8, [X8 + 0x80]
	0x029AE910 ADD X1, X8, 0x60

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: TValue op_Implicit(Unity.XR.CoreUtils.Datums.DatumProperty`2<TValue, TDatum> datumProperty)

Disassembly:
	0x029AE914 BL 0x1C16D18
	0x029AE918 LDR X0, [X0]
	0x029AE91C LDR X30, [X31], #0x10
	0x029AE920 RET
	0x029AE924 STP X29, X30, [X31 - 0x30]!
	0x029AE928 STP X22, X21, [X31 + 0x10]
	0x029AE92C STP X20, X19, [X31 + 0x20]
	0x029AE930 ADD X29, X31, 0x0
	0x029AE934 SUB X31, X31, 0x10
	0x029AE938 MRS X22, 0xC000
	0x029AE93C LDR X8, [X22 + 0x28]
	0x029AE940 MOV X19, X1
	0x029AE944 STUR X8, [X29 - 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {20}
	005 Move X19, X0
	006 Move X0, [X1+32]
	007 Move W8, [X0+309]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {13}
	012 Call 0x1C5D684
	013 Move X8, [X0+192]
	014 Move X0, X19
	015 Move X1, [X8+56]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call 0x29AE838, X0
	019 Return X0
	020 Call 0x1C17F20

