Type: Unity.XR.CoreUtils.Datums.Datum`1

Method: System.String get_Comments()

Disassembly:
	0x029AF33C LDR X0, [X0 + 0x5C0]
	0x029AF340 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Comments(System.String value)

Disassembly:
	0x029AF344 ADRP X0, 0x176F000
	0x029AF348 LDR X0, [X0 + 0x5C8]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Boolean get_ReadOnly()

Disassembly:
	0x029AF34C BL 0x1C16CF4
	0x029AF350 ADRP X0, 0x176F000

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_ReadOnly(System.Boolean value)

Disassembly:
	0x029AF354 LDR X0, [X0 + 0x5D0]
	0x029AF358 BL 0x1C16CF4
	0x029AF35C ADRP X0, 0x176F000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+32], W8
	003 Return 

Method: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<T> get_BindableVariableReference()

Disassembly:
	0x029AF360 LDR X0, [X0 + 0x5D8]
	0x029AF364 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: T get_Value()

Disassembly:
	0x029AF368 MOVZ W8, 0x1
	0x029AF36C STRB W8, [X20 + 0xFA8]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_Value(T value)

Disassembly:
	0x029AF370 STP X31, X31, [X31 + 0x8]
	0x029AF374 STR X31, [X31 + 0x18]
	0x029AF378 LDR X0, [X19 + 0x10]
	0x029AF37C CBZ X0, 0x29AF458
	0x029AF380 ADRP X8, 0x176F000
	0x029AF384 LDR X8, [X8 + 0x5D0]
	0x029AF388 ADRP X22, 0x176F000
	0x029AF38C ADRP X23, 0x176F000
	0x029AF390 ADRP X20, 0x176F000
	0x029AF394 LDR X1, [X8]
	0x029AF398 LDR X22, [X22 + 0x5C0]
	0x029AF39C LDR X23, [X23 + 0x5D8]
	0x029AF3A0 LDR X20, [X20 + 0x5B8]
	0x029AF3A4 ADD X8, X31, 0x8
	0x029AF3A8 BL 0x2DBE924
	0x029AF3AC MOVZ W21, 0x1
	0x029AF3B0 LDR X1, [X22]
	0x029AF3B4 ADD X0, X31, 0x8
	0x029AF3B8 BL 0x2BC3C64
	0x029AF3BC TBZ X0, 0x0, 0x29AF42C
	0x029AF3C0 LDR X19, [X31 + 0x18]
	0x029AF3C4 CBZ X19, 0x29AF450
	0x029AF3C8 LDR X8, [X19]
	0x029AF3CC LDR X1, [X23]
	0x029AF3D0 LDRH W9, [X8 + 0x12E]
	0x029AF3D4 CBZ X9, 0x29AF3F8
	0x029AF3D8 LDR X10, [X8 + 0xB0]
	0x029AF3DC ADD X10, X10, 0x8
	0x029AF3E0 LDUR X11, [X10 - 0x8]
	0x029AF3E4 CMP X11, X1
	0x029AF3E8 B.EQ 0x29AF408
	0x029AF3EC SUBS X9, X9, 0x1
	0x029AF3F0 ADD X10, X10, 0x10
	0x029AF3F4 B.NE 0x29AF3E0
	0x029AF3F8 MOVZ W2, 0x1
	0x029AF3FC MOV X0, X19
	0x029AF400 BL 0x1C5C788
	0x029AF404 B 0x29AF418
	0x029AF408 LDR W9, [X10]
	0x029AF40C ADD W9, W9, 0x1
	0x029AF410 ADD X8, X8, W9, 0x4, SXTW
	0x029AF414 ADD X0, X8, 0x138
	0x029AF418 LDP X8, X1, [X0]
	0x029AF41C MOV X0, X19
	0x029AF420 BLR X8
	0x029AF424 AND W21, W21, W0, 0x0
	0x029AF428 B 0x29AF3B0
	0x029AF42C LDR X1, [X20]
	0x029AF430 ADD X0, X31, 0x8
	0x029AF434 BL 0x2BC3C60
	0x029AF438 AND W0, W21, 0x1
	0x029AF43C LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1A2C000
	007 Move W8, [X22+4003]
	008 Move X21, X2
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x1745000
	016 Move X0, [X0+2600]
	017 Call 0x1C17CF4
	018 Move X0, 0x1770000
	019 Move X0, [X0+1456]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+4003], W8
	023 Move W8, [X19+32]
	024 Compare W8, 0
	025 JumpIfEqual {51}
	026 Move X8, 0x1770000
	027 Move X8, [X8+1456]
	028 Move X20, 0x1745000
	029 Move X1, X19
	030 Move X2, X31
	031 Move X0, [X8]
	032 Move X20, [X20+2600]
	033 Call String.Format, X0, X1
	034 Move X8, [X20]
	035 Move X20, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X2, X31
	048 Move X30, [X31+48]
	049 Call Debug.LogWarning, X0, X1
	050 Return 
	051 Move X0, [X19+40]
	052 Move [X19+36], W20
	053 Compare X0, 0
	054 JumpIfEqual {66}
	055 Move X8, [X21+32]
	056 Move W1, W20
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X8, [X8+192]
	062 Move X2, [X8+40]
	063 Move X30, [X31+48]
	064 Call BindableVariableBase`1<Int32>.set_Value, X0, X1
	065 Return 
	066 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x029AF440 LDP X22, X21, [X31 + 0x30]
	0x029AF444 LDP X30, X23, [X31 + 0x20]
	0x029AF448 ADD X31, X31, 0x50
	0x029AF44C RET
	0x029AF450 MOV X22, X20
	0x029AF454 BL 0x1C16F20
	0x029AF458 BL 0x1C16F20
	0x029AF45C B 0x29AF468
	0x029AF460 B 0x29AF464
	0x029AF464 MOV X22, X20
	0x029AF468 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+40]
	004 Compare X0, 0
	005 JumpIfEqual {13}
	006 Move X9, [X1+32]
	007 Move W1, [X8+36]
	008 Move X9, [X9+192]
	009 Move X2, [X9+40]
	010 Move X30, [X31+16]
	011 Call BindableVariableBase`1<Int32>.set_Value, X0, X1
	012 Return 
	013 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x029AF46C CMP W1, 0x1
	0x029AF470 B.NE 0x29AF49C
	0x029AF474 MOV X0, X19
	0x029AF478 BL 0x3EB1AD0
	0x029AF47C LDR X20, [X0]
	0x029AF480 BL 0x3EB1AE0
	0x029AF484 LDR X1, [X22]
	0x029AF488 ADD X0, X31, 0x8
	0x029AF48C BL 0x2BC3C60
	0x029AF490 CBZ X20, 0x29AF438
	0x029AF494 MOV X0, X20
	0x029AF498 BL 0x1C16F18
	0x029AF49C MOV X20, X31
	0x029AF4A0 B 0x29AF4A8
	0x029AF4A4 MOV X19, X0
	0x029AF4A8 LDR X1, [X22]
	0x029AF4AC ADD X0, X31, 0x8
	0x029AF4B0 BL 0x2BC3C60
	0x029AF4B4 CBNZ X20, 0x29AF4C0
	0x029AF4B8 MOV X0, X19
	0x029AF4BC BL 0x1D2C690
	0x029AF4C0 MOV X0, X20
	0x029AF4C4 BL 0x1C16F18
	0x029AF4C8 BL 0x1990590
	0x029AF4CC SUB X31, X31, 0x50
	0x029AF4D0 STP X30, X23, [X31 + 0x20]
	0x029AF4D4 STP X22, X21, [X31 + 0x30]
	0x029AF4D8 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, 1
	005 Move [X0+32], W8
	006 Move X8, [X1+32]
	007 Move X19, X0
	008 Move X20, X1
	009 Move X8, [X8+192]
	010 Move X0, [X8+8]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Call 0x1C17F10
	018 Move X8, [X20+32]
	019 Move W2, 1
	020 Move W1, W31
	021 Move X3, X31
	022 Move X8, [X8+192]
	023 Move W4, W31
	024 Move X20, X0
	025 Move X5, [X8+56]
	026 Call 0x28CC108, X0, X1, X2, X3, X4
	027 Move [X19+40], X20
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X1, X31
	032 Move X30, [X31+32]
	033 Call ScriptableObject..ctor, X0
	034 Return 

