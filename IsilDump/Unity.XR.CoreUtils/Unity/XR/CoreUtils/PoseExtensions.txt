Type: Unity.XR.CoreUtils.PoseExtensions

Method: UnityEngine.Pose ApplyOffsetTo(UnityEngine.Pose pose, UnityEngine.Pose otherPose)

Disassembly:
	0x03B24FC8 ADRP X26, 0x5D9000
	0x03B24FCC LDR X25, [X25 + 0x6C0]
	0x03B24FD0 LDR X26, [X26 + 0x938]
	0x03B24FD4 MOV W24, W31
	0x03B24FD8 CMP W24, W8
	0x03B24FDC B.CS 0x3B250C8
	0x03B24FE0 ADD X8, X21, W24, 0x3, SXTW
	0x03B24FE4 LDR X22, [X8 + 0x20]
	0x03B24FE8 CBZ X22, 0x3B250C4
	0x03B24FEC LDR X8, [X22]
	0x03B24FF0 MOV X0, X22
	0x03B24FF4 LDR X9, [X8 + 0x3C8]
	0x03B24FF8 LDR X1, [X8 + 0x3D0]
	0x03B24FFC BLR X9
	0x03B25000 TBZ X0, 0x0, 0x3B2509C
	0x03B25004 LDR X8, [X22]
	0x03B25008 MOV X0, X22
	0x03B2500C LDR X9, [X8 + 0x448]
	0x03B25010 LDR X1, [X8 + 0x450]
	0x03B25014 BLR X9
	0x03B25018 LDR X8, [X25]
	0x03B2501C MOV X23, X0
	0x03B25020 LDR W9, [X8 + 0xE0]
	0x03B25024 CBNZ W9, 0x3B25030
	0x03B25028 MOV X0, X8
	0x03B2502C BL 0x1C16DFC
	0x03B25030 MOV X0, X23
	0x03B25034 MOV X1, X20
	0x03B25038 MOV X2, X31
	0x03B2503C BL 0x3395194
	0x03B25040 TBZ X0, 0x0, 0x3B2509C
	0x03B25044 CBZ X19, 0x3B250C4
	0x03B25048 LDR W10, [X19 + 0x1C]
	0x03B2504C LDR X8, [X19 + 0x10]
	0x03B25050 LDR X9, [X26]
	0x03B25054 ADD W10, W10, 0x1
	0x03B25058 STR W10, [X19 + 0x1C]
	0x03B2505C CBZ X8, 0x3B250C4
	0x03B25060 LDRSW X10, [X19 + 0x18]
	0x03B25064 LDR W11, [X8 + 0x18]
	0x03B25068 CMP W10, W11
	0x03B2506C B.CS 0x3B25084
	0x03B25070 ADD W9, W10, 0x1
	0x03B25074 ADD X8, X8, X10, 0x3, LSL
	0x03B25078 STR W9, [X19 + 0x18]
	0x03B2507C STR X22, [X8 + 0x20]
	0x03B25080 B 0x3B2509C
	0x03B25084 LDR X8, [X9 + 0x20]
	0x03B25088 MOV X0, X19
	0x03B2508C MOV X1, X22
	0x03B25090 LDR X8, [X8 + 0xC0]
	0x03B25094 LDR X2, [X8 + 0x70]
	0x03B25098 BL 0x301BF90
	0x03B2509C LDR W8, [X21 + 0x18]
	0x03B250A0 ADD W24, W24, 0x1
	0x03B250A4 CMP W24, W8
	0x03B250A8 B.LT 0x3B24FD8
	0x03B250AC LDP X20, X19, [X31 + 0x40]
	0x03B250B0 LDP X22, X21, [X31 + 0x30]
	0x03B250B4 LDP X24, X23, [X31 + 0x20]
	0x03B250B8 LDP X26, X25, [X31 + 0x10]
	0x03B250BC LDR X30, [X31], #0x50

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move S8, [X0+12]
	010 Move S9, [X0+16]
	011 Move S10, [X0+20]
	012 Move S11, [X0+24]
	013 Move S4, [X1]
	014 Move S5, [X1+4]
	015 Move V6, [X1+8]
	016 Move X20, X0
	017 Move V0, V8
	018 Move V1, V9
	019 Move V2, V10
	020 Move V3, V11
	021 Move X0, X31
	022 Move X19, X1
	023 Move X21, X8
	024 Call Quaternion.op_Multiply, X0, X1
	025 Move S3, [X20]
	026 Move S4, [X20+4]
	027 Move V5, [X20+8]
	028 Move S6, [X19+12]
	029 Move S7, [X19+16]
	030 Move S16, [X19+20]
	031 Move S17, [X19+24]
	032 Add S0, S0, S3
	033 Add S1, S1, S4
	034 Add S2, S2, S5
	035 Multiply S3, S11, S6
	036 Multiply S4, S8, S17
	037 Multiply S5, S9, S16
	038 Multiply S18, S10, S7
	039 Multiply S19, S11, S7
	040 Multiply S20, S9, S17
	041 Multiply S21, S10, S6
	042 Multiply S22, S8, S16
	043 Multiply S23, S8, S7
	044 Multiply S24, S8, S6
	045 Multiply S6, S9, S6
	046 Multiply S7, S9, S7
	047 Multiply S25, S11, S16
	048 Multiply S26, S11, S17
	049 Multiply S17, S10, S17
	050 Move [X21+8], X31
	051 Move [X21+16], X31
	052 Move [X21+24], W31
	053 Move [X21], X31
	054 Move X0, X21
	055 Move X20, [X31+48]
	056 Move X19, [X31+56]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Move D9, [X31+16]
	060 Move D8, [X31+24]
	061 Add S3, S3, S4
	062 Add S4, S19, S20
	063 Add S17, S25, S17
	064 Subtract S19, S26, S24
	065 Multiply S16, S10, S16
	066 Add S3, S5, S3
	067 Add S4, S21, S4
	068 Add S5, S23, S17
	069 Subtract S7, S19, S7
	070 Subtract S3, S3, S18
	071 Subtract S4, S4, S22
	072 Subtract S5, S5, S6
	073 Subtract S6, S7, S16
	074 Move X1, X31
	075 Move D11, [X31+64]
	076 Move D10, [X31+72]
	077 Call Pose..ctor, X0, X1, X2
	078 Return X0

Method: UnityEngine.Vector3 ApplyOffsetTo(UnityEngine.Pose pose, UnityEngine.Vector3 position)

Disassembly:
	0x03B250C0 RET
	0x03B250C4 BL 0x1C16F20
	0x03B250C8 BL 0x1C16F28
	0x03B250CC STP X30, X27, [X31 - 0x50]!
	0x03B250D0 STP X26, X25, [X31 + 0x10]
	0x03B250D4 STP X24, X23, [X31 + 0x20]
	0x03B250D8 STP X22, X21, [X31 + 0x30]
	0x03B250DC STP X20, X19, [X31 + 0x40]
	0x03B250E0 ADRP X21, 0x5CE000
	0x03B250E4 ADRP X22, 0x634000
	0x03B250E8 LDR X21, [X21 + 0x6C0]
	0x03B250EC LDR X22, [X22 + 0xC38]
	0x03B250F0 MOV W19, W2
	0x03B250F4 MOV X20, X1
	0x03B250F8 MOV X23, X0
	0x03B250FC ADRP X26, 0x8BD000
	0x03B25100 MOVZ W27, 0x1
	0x03B25104 LDRB W8, [X26 + 0x755]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V5, V1
	004 Move S4, [X0+12]
	005 Move S1, [X0+16]
	006 Move V6, V2
	007 Move S2, [X0+20]
	008 Move S3, [X0+24]
	009 Move V7, V0
	010 Move X19, X0
	011 Move V0, V4
	012 Move V4, V7
	013 Move X0, X31
	014 Call Quaternion.op_Multiply, X0, X1
	015 Move S3, [X19]
	016 Move S4, [X19+4]
	017 Move V5, [X19+8]
	018 Add S0, S0, S3
	019 Add S1, S1, S4
	020 Add S2, S2, S5
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return X0

Method: UnityEngine.Vector3 ApplyInverseOffsetTo(UnityEngine.Pose pose, UnityEngine.Vector3 position)

Disassembly:
	0x03B25108 TBNZ X8, 0x0, 0x3B25120
	0x03B2510C MOV X0, X22
	0x03B25110 BL 0x1C16CF4
	0x03B25114 MOV X0, X21
	0x03B25118 BL 0x1C16CF4
	0x03B2511C STRB W27, [X26 + 0x755]
	0x03B25120 CBZ X23, 0x3B251D8
	0x03B25124 MOV X0, X23
	0x03B25128 MOV X1, X20
	0x03B2512C MOV W2, W19
	0x03B25130 MOV X3, X31
	0x03B25134 BL 0x3397828
	0x03B25138 MOV X1, X31
	0x03B2513C MOV X2, X31
	0x03B25140 MOV X24, X0
	0x03B25144 BL 0x32CE2E0
	0x03B25148 TBNZ X0, 0x0, 0x3B251BC
	0x03B2514C LDR X8, [X23]
	0x03B25150 MOV X0, X23
	0x03B25154 LDR X9, [X8 + 0x818]
	0x03B25158 LDR X1, [X8 + 0x820]
	0x03B2515C BLR X9

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V9, V1
	007 Move S4, [X0+12]
	008 Move S1, [X0+16]
	009 Move V8, V2
	010 Move S2, [X0+20]
	011 Move S3, [X0+24]
	012 Move X19, X0
	013 Move V10, V0
	014 Move V0, V4
	015 Move X0, X31
	016 Call Quaternion.Inverse, X0
	017 Move S4, [X19]
	018 Move S5, [X19+4]
	019 Move V6, [X19+8]
	020 Move X30, [X31+32]
	021 Move X19, [X31+40]
	022 Move X0, X31
	023 Subtract S5, S9, S5
	024 Subtract S6, S8, S6
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Subtract S4, S10, S4
	028 Move V10, [X31+48]
	029 Call Quaternion.op_Multiply, X0, X1
	030 Return X0

