Type: Unity.XR.CoreUtils.XROrigin

Method: UnityEngine.Camera get_Camera()

Disassembly:
	0x03B30090 BL 0x3C356F8
	0x03B30094 CBZ X0, 0x3B300FC

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Camera(UnityEngine.Camera value)

Disassembly:
	0x03B30098 MOV X1, X31
	0x03B3009C BL 0x3C3FA04

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: UnityEngine.Transform get_TrackablesParent()

Disassembly:
	0x03B300A0 MOV V3.16B, V13.16B
	0x03B300A4 MOV V4.16B, V12.16B

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_TrackablesParent(UnityEngine.Transform value)

Disassembly:
	0x03B300A8 MOV V5.16B, V11.16B
	0x03B300AC MOV X0, X31

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Void add_TrackablesParentTransformChanged(System.Action`1<Unity.XR.CoreUtils.ARTrackablesParentTransformChangedEventArgs> value)

Disassembly:
	0x03B300B0 STP S9, S8, [X31 + 0x4]
	0x03B300B4 STR S10, [X31]
	0x03B300B8 BL 0x1DD4D78
	0x03B300BC MOV V3.16B, V0.16B
	0x03B300C0 MOV X0, X19
	0x03B300C4 MOV V0.16B, V10.16B
	0x03B300C8 MOV V1.16B, V9.16B
	0x03B300CC MOV V2.16B, V8.16B
	0x03B300D0 BL 0x3B2FAA8
	0x03B300D4 MOVZ W0, 0x1
	0x03B300D8 B 0x3B300E0
	0x03B300DC MOV W0, W31
	0x03B300E0 LDP X20, X19, [X31 + 0x50]
	0x03B300E4 LDP X30, X21, [X31 + 0x40]
	0x03B300E8 LDP D9, D8, [X31 + 0x30]
	0x03B300EC LDP D11, D10, [X31 + 0x20]
	0x03B300F0 LDP D13, D12, [X31 + 0x10]
	0x03B300F4 ADD X31, X31, 0x60
	0x03B300F8 RET
	0x03B300FC BL 0x1C16F20
	0x03B30100 SUB X31, X31, 0xD0
	0x03B30104 STP D13, D12, [X31 + 0x80]
	0x03B30108 STP D11, D10, [X31 + 0x90]
	0x03B3010C STP D9, D8, [X31 + 0xA0]
	0x03B30110 STP X30, X21, [X31 + 0xB0]
	0x03B30114 STP X20, X19, [X31 + 0xC0]
	0x03B30118 ADRP X21, 0x8B2000
	0x03B3011C ADRP X20, 0x5C3000
	0x03B30120 LDRB W8, [X21 + 0x7BF]
	0x03B30124 LDR X20, [X20 + 0x598]
	0x03B30128 MOV V10.16B, V2.16B
	0x03B3012C MOV V9.16B, V1.16B
	0x03B30130 MOV V8.16B, V0.16B
	0x03B30134 MOV X19, X0
	0x03B30138 TBNZ X8, 0x0, 0x3B30150
	0x03B3013C ADRP X0, 0x5C3000
	0x03B30140 LDR X0, [X0 + 0x598]
	0x03B30144 BL 0x1C16CF4
	0x03B30148 MOVZ W8, 0x1
	0x03B3014C STRB W8, [X21 + 0x7BF]
	0x03B30150 LDR X0, [X20]
	0x03B30154 MOVI V0.2D, 0x0
	0x03B30158 STP V0, V0, [X31 + 0x60]
	0x03B3015C STP V0, V0, [X31 + 0x40]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8B3000
	009 Move W8, [X21+1971]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x62A000
	017 Move X0, [X0+3680]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1971], W8
	021 Move X24, 0x62A000
	022 Add X20, X20, 48
	023 Move X21, [X20]
	024 Move X24, [X24+3680]
	025 Move X0, X21
	026 Move X1, X19
	027 Move X2, X31
	028 Call Delegate.Combine, X0, X1
	029 Compare X0, 0
	030 JumpIfEqual {38}
	031 Move X23, [X24]
	032 Move X22, X0
	033 Move X1, X23
	034 Call 0x1C17E00
	035 Move X1, X0
	036 Compare X0, 0
	037 JumpIfNotEqual {39}
	038 Move X1, X31
	039 Move X0, X20
	040 Move X2, X21
	041 Call 0x1C25138
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X21, X0
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 
	052 Move X0, X22
	053 Move X1, X23
	054 Call 0x1C181E0

Method: System.Void remove_TrackablesParentTransformChanged(System.Action`1<Unity.XR.CoreUtils.ARTrackablesParentTransformChangedEventArgs> value)

Disassembly:
	0x03B30160 LDR W8, [X0 + 0xE0]
	0x03B30164 LDR X20, [X19 + 0x20]
	0x03B30168 CBNZ W8, 0x3B30170
	0x03B3016C BL 0x1C16DFC
	0x03B30170 MOV X0, X20
	0x03B30174 MOV X1, X31
	0x03B30178 MOV X2, X31
	0x03B3017C BL 0x3C3883C
	0x03B30180 MOV W20, W0
	0x03B30184 TBNZ X0, 0x0, 0x3B30208
	0x03B30188 LDR X0, [X19 + 0x20]
	0x03B3018C CBZ X0, 0x3B3022C
	0x03B30190 MOV X1, X31
	0x03B30194 BL 0x3C32E90
	0x03B30198 CBZ X0, 0x3B3022C
	0x03B3019C MOV X1, X31
	0x03B301A0 BL 0x3C3DEB4
	0x03B301A4 ADD X8, X31, 0x0
	0x03B301A8 MOV X0, X31
	0x03B301AC BL 0x3C28378
	0x03B301B0 LDP V0, V1, [X31]
	0x03B301B4 LDP V2, V3, [X31 + 0x20]
	0x03B301B8 MOV X0, X19
	0x03B301BC STP V0, V1, [X31 + 0x40]
	0x03B301C0 STP V2, V3, [X31 + 0x60]
	0x03B301C4 BL 0x3B2F388
	0x03B301C8 ADD X0, X31, 0x40
	0x03B301CC MOV X1, X31
	0x03B301D0 BL 0x3C28278
	0x03B301D4 LDR X0, [X19 + 0x38]
	0x03B301D8 CBZ X0, 0x3B3022C
	0x03B301DC MOV X1, X31
	0x03B301E0 MOV V11.16B, V0.16B
	0x03B301E4 MOV V12.16B, V1.16B
	0x03B301E8 MOV V13.16B, V2.16B
	0x03B301EC BL 0x3C356F8
	0x03B301F0 CBZ X0, 0x3B3022C
	0x03B301F4 FADD S2, S10, S13
	0x03B301F8 FADD S1, S9, S12
	0x03B301FC FADD S0, S8, S11
	0x03B30200 MOV X1, X31
	0x03B30204 BL 0x3C3F62C
	0x03B30208 ORN W8, W31, W20, 0x0
	0x03B3020C LDP X20, X19, [X31 + 0xC0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8B3000
	009 Move W8, [X21+1972]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x62A000
	017 Move X0, [X0+3680]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1972], W8
	021 Move X24, 0x62A000
	022 Add X20, X20, 48
	023 Move X21, [X20]
	024 Move X24, [X24+3680]
	025 Move X0, X21
	026 Move X1, X19
	027 Move X2, X31
	028 Call Delegate.Remove, X0, X1
	029 Compare X0, 0
	030 JumpIfEqual {38}
	031 Move X23, [X24]
	032 Move X22, X0
	033 Move X1, X23
	034 Call 0x1C17E00
	035 Move X1, X0
	036 Compare X0, 0
	037 JumpIfNotEqual {39}
	038 Move X1, X31
	039 Move X0, X20
	040 Move X2, X21
	041 Call 0x1C25138
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X21, X0
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 
	052 Move X0, X22
	053 Move X1, X23
	054 Call 0x1C181E0

Method: UnityEngine.GameObject get_Origin()

Disassembly:
	0x03B30210 LDP X30, X21, [X31 + 0xB0]
	0x03B30214 LDP D9, D8, [X31 + 0xA0]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_Origin(UnityEngine.GameObject value)

Disassembly:
	0x03B30218 LDP D11, D10, [X31 + 0x90]
	0x03B3021C LDP D13, D12, [X31 + 0x80]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: UnityEngine.GameObject get_CameraFloorOffsetObject()

Disassembly:
	0x03B30220 AND W0, W8, 0x1
	0x03B30224 ADD X31, X31, 0xD0

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_CameraFloorOffsetObject(UnityEngine.GameObject value)

Disassembly:
	0x03B30228 RET
	0x03B3022C BL 0x1C16F20

ISIL:
	001 Move [X0+64], X1

Method: Unity.XR.CoreUtils.XROrigin/TrackingOriginMode get_RequestedTrackingOriginMode()

Disassembly:
	0x03B302BC ADRP X0, 0x629000
	0x03B302C0 LDR X0, [X0 + 0xEC8]

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_RequestedTrackingOriginMode(Unity.XR.CoreUtils.XROrigin/TrackingOriginMode value)

Disassembly:
	0x03B302C4 BL 0x1C16CF4
	0x03B302C8 ADRP X0, 0x629000

ISIL:
	001 Move [X0+72], W1

Method: System.Single get_CameraYOffset()

Disassembly:
	0x03B30368 ADRP X21, 0x629000
	0x03B3036C LDR X24, [X24 + 0xA58]

ISIL:
	001 Move V0, [X0+76]
	002 Return V0

Method: System.Void set_CameraYOffset(System.Single value)

Disassembly:
	0x03B30370 LDR X21, [X21 + 0xED0]
	0x03B30374 MOV X0, X20

ISIL:
	001 Move [X0+76], S0
	002 Call XROrigin.MoveOffsetHeight, X0
	003 Return 

Method: UnityEngine.XR.TrackingOriginModeFlags get_CurrentTrackingOriginMode()

Disassembly:
	0x03B30378 MOV X1, X31
	0x03B3037C MOV X2, X31

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_CurrentTrackingOriginMode(UnityEngine.XR.TrackingOriginModeFlags value)

Disassembly:
	0x03B30380 BL 0x3C3883C
	0x03B30384 TBZ X0, 0x0, 0x3B303EC

ISIL:
	001 Move [X0+80], W1
	002 Return 

Method: UnityEngine.Vector3 get_OriginInCameraSpacePos()

Disassembly:
	0x03B30388 MOV X0, X31
	0x03B3038C BL 0x3C047F8
	0x03B30390 LDR X8, [X22]
	0x03B30394 MOV X20, X0
	0x03B30398 LDR W9, [X8 + 0xE0]
	0x03B3039C CBNZ W9, 0x3B303A8
	0x03B303A0 MOV X0, X8
	0x03B303A4 BL 0x1C16DFC
	0x03B303A8 MOV X0, X20
	0x03B303AC MOV X1, X31
	0x03B303B0 MOV X2, X31
	0x03B303B4 BL 0x3C354F8
	0x03B303B8 TBZ X0, 0x0, 0x3B303C4
	0x03B303BC STR X20, [X19 + 0x20]
	0x03B303C0 B 0x3B303EC
	0x03B303C4 LDR X0, [X23]
	0x03B303C8 LDR W8, [X0 + 0xE0]
	0x03B303CC CBNZ W8, 0x3B303D4
	0x03B303D0 BL 0x1C16DFC
	0x03B303D4 ADRP X8, 0x629000
	0x03B303D8 LDR X8, [X8 + 0xEC8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfEqual {28}
	007 Move X1, X31
	008 Call Component.get_transform, X0
	009 Move X8, [X19+56]
	010 Compare X8, 0
	011 JumpIfEqual {28}
	012 Move X19, X0
	013 Move X0, X8
	014 Move X1, X31
	015 Call GameObject.get_transform, X0
	016 Compare X0, 0
	017 JumpIfEqual {28}
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Compare X19, 0
	021 JumpIfEqual {28}
	022 Move X0, X19
	023 Move X1, X31
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Call Transform.InverseTransformPoint, X0, X1
	027 Return X0
	028 Call 0x1C17F20

Method: UnityEngine.Vector3 get_CameraInOriginSpacePos()

Disassembly:
	0x03B303DC MOV X1, X19
	0x03B303E0 MOV X2, X31
	0x03B303E4 LDR X0, [X8]
	0x03B303E8 BL 0x3C06B0C
	0x03B303EC LDR X0, [X24]
	0x03B303F0 BL 0x1C16F10
	0x03B303F4 LDR X1, [X21]
	0x03B303F8 MOV X2, X31
	0x03B303FC MOV X20, X0
	0x03B30400 BL 0x3C35934
	0x03B30404 CBZ X20, 0x3B305F4
	0x03B30408 MOV X0, X20
	0x03B3040C MOV X1, X31
	0x03B30410 BL 0x3C356F8
	0x03B30414 MOV X20, X0
	0x03B30418 STR X0, [X19 + 0x28]
	0x03B3041C MOV X0, X19
	0x03B30420 MOV X1, X31
	0x03B30424 BL 0x3C32E90
	0x03B30428 CBZ X20, 0x3B305F4
	0x03B3042C ADRP X21, 0x5EB000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+56]
	005 Compare X0, 0
	006 JumpIfEqual {28}
	007 Move X1, X31
	008 Call GameObject.get_transform, X0
	009 Move X8, [X19+32]
	010 Compare X8, 0
	011 JumpIfEqual {28}
	012 Move X19, X0
	013 Move X0, X8
	014 Move X1, X31
	015 Call Component.get_transform, X0
	016 Compare X0, 0
	017 JumpIfEqual {28}
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Compare X19, 0
	021 JumpIfEqual {28}
	022 Move X0, X19
	023 Move X1, X31
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Call Transform.InverseTransformPoint, X0, X1
	027 Return X0
	028 Call 0x1C17F20

Method: System.Single get_CameraInOriginSpaceHeight()

Disassembly:
	0x03B30430 LDR X21, [X21 + 0x610]
	0x03B30434 MOV X1, X0
	0x03B30438 MOV X0, X20
	0x03B3043C MOV W2, W31
	0x03B30440 MOV X3, X31

ISIL:
	001 Move [X31-16], X30
	002 Call XROrigin.get_CameraInOriginSpacePos, X0
	003 Move V0, V1
	004 Move X30, [X31+16]
	005 Return V0

Method: System.Void MoveOffsetHeight()

Disassembly:
	0x03B30230 SUB X31, X31, 0x80
	0x03B30234 STR X30, [X31 + 0x40]
	0x03B30238 STP X24, X23, [X31 + 0x50]
	0x03B3023C STP X22, X21, [X31 + 0x60]
	0x03B30240 STP X20, X19, [X31 + 0x70]
	0x03B30244 ADRP X20, 0x8B2000
	0x03B30248 ADRP X22, 0x5C3000
	0x03B3024C LDRB W8, [X20 + 0x7C0]
	0x03B30250 LDR X22, [X22 + 0x598]
	0x03B30254 MOV X19, X0
	0x03B30258 TBNZ X8, 0x0, 0x3B302E8
	0x03B3025C ADRP X0, 0x629000
	0x03B30260 LDR X0, [X0 + 0xEA8]
	0x03B30264 BL 0x1C16CF4
	0x03B30268 ADRP X0, 0x629000
	0x03B3026C LDR X0, [X0 + 0xEB0]
	0x03B30270 BL 0x1C16CF4
	0x03B30274 ADRP X0, 0x5C3000
	0x03B30278 LDR X0, [X0 + 0xA28]
	0x03B3027C BL 0x1C16CF4
	0x03B30280 ADRP X0, 0x5C3000
	0x03B30284 LDR X0, [X0 + 0xA58]
	0x03B30288 BL 0x1C16CF4
	0x03B3028C ADRP X0, 0x5C3000
	0x03B30290 LDR X0, [X0 + 0x598]
	0x03B30294 BL 0x1C16CF4
	0x03B30298 ADRP X0, 0x5EB000
	0x03B3029C LDR X0, [X0 + 0x610]
	0x03B302A0 BL 0x1C16CF4
	0x03B302A4 ADRP X0, 0x629000
	0x03B302A8 LDR X0, [X0 + 0xEB8]
	0x03B302AC BL 0x1C16CF4
	0x03B302B0 ADRP X0, 0x629000
	0x03B302B4 LDR X0, [X0 + 0xEC0]
	0x03B302B8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8B3000
	006 Move X21, 0x5C4000
	007 Move W8, [X20+1973]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5C4000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1973], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_isPlaying
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {34}
	030 Move W8, [X19+80]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move S0, W31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Move V0, [X19+76]
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call XROrigin.MoveOffsetHeight, X0, V0
	046 Return 

Method: System.Void MoveOffsetHeight(System.Single y)

Disassembly:
	0x03B30444 BL 0x3C3FEB8
	0x03B30448 LDR X0, [X21]
	0x03B3044C LDR X20, [X19 + 0x28]
	0x03B30450 LDR W8, [X0 + 0xE0]
	0x03B30454 CBNZ W8, 0x3B3045C
	0x03B30458 BL 0x1C16DFC
	0x03B3045C ADD X8, X31, 0x20
	0x03B30460 MOV X0, X31
	0x03B30464 BL 0x3C3E05C
	0x03B30468 LDR V0, [X31 + 0x2]
	0x03B3046C LDUR V1, [X31 + 0x2C]
	0x03B30470 ADD X1, X31, 0x0
	0x03B30474 MOV X0, X20
	0x03B30478 STR V0, [X31]
	0x03B3047C STUR V1, [X31 + 0xC]
	0x03B30480 BL 0x3B24788
	0x03B30484 ADRP X21, 0x8A8000
	0x03B30488 LDRB W8, [X21 + 0x85B]
	0x03B3048C LDR X20, [X19 + 0x28]
	0x03B30490 CBNZ W8, 0x3B304A8
	0x03B30494 ADRP X0, 0x5C3000
	0x03B30498 LDR X0, [X0 + 0x5A0]
	0x03B3049C BL 0x1C16CF4
	0x03B304A0 MOVZ W8, 0x1
	0x03B304A4 STRB W8, [X21 + 0x85B]
	0x03B304A8 CBZ X20, 0x3B305F4
	0x03B304AC ADRP X8, 0x5C3000
	0x03B304B0 LDR X8, [X8 + 0x5A0]
	0x03B304B4 MOV X0, X20
	0x03B304B8 MOV X1, X31
	0x03B304BC LDR X8, [X8]
	0x03B304C0 LDR X8, [X8 + 0xB8]
	0x03B304C4 LDP S1, S2, [X8 + 0x10]
	0x03B304C8 LDR V0, [X8 + 0xC]
	0x03B304CC BL 0x3C3FC4C
	0x03B304D0 LDR X0, [X22]
	0x03B304D4 LDR X20, [X19 + 0x20]
	0x03B304D8 LDR W8, [X0 + 0xE0]
	0x03B304DC CBNZ W8, 0x3B304E4
	0x03B304E0 BL 0x1C16DFC
	0x03B304E4 MOV X0, X20
	0x03B304E8 MOV X1, X31
	0x03B304EC BL 0x3C38948
	0x03B304F0 TBZ X0, 0x0, 0x3B305DC
	0x03B304F4 LDR X0, [X19 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8B3000
	007 Move X20, 0x5C4000
	008 Move W8, [X21+1974]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5C4000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1974], W8
	021 Move X0, [X20]
	022 Move X20, [X19+64]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {55}
	035 Move X0, [X19+64]
	036 Compare X0, 0
	037 JumpIfEqual {61}
	038 Move X1, X31
	039 Call GameObject.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {61}
	042 Move X1, X31
	043 Move X19, X0
	044 Call Transform.get_localPosition, X0
	045 Move X0, X19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move X21, [X31+24]
	050 Move V1, V8
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call Transform.set_localPosition, X0, X1
	054 Return 
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Move V8, [X31+48]
	060 Return 
	061 Call 0x1C17F20

Method: System.Void TryInitializeCamera()

Disassembly:
	0x03B302CC LDR X0, [X0 + 0xED0]
	0x03B302D0 BL 0x1C16CF4
	0x03B302D4 ADRP X0, 0x629000
	0x03B302D8 LDR X0, [X0 + 0xED8]
	0x03B302DC BL 0x1C16CF4
	0x03B302E0 MOVZ W8, 0x1
	0x03B302E4 STRB W8, [X20 + 0x7C0]
	0x03B302E8 LDR X0, [X22]
	0x03B302EC LDR X20, [X19 + 0x40]
	0x03B302F0 LDR W8, [X0 + 0xE0]
	0x03B302F4 CBNZ W8, 0x3B302FC
	0x03B302F8 BL 0x1C16DFC
	0x03B302FC ADRP X23, 0x5C3000
	0x03B30300 LDR X23, [X23 + 0xA28]
	0x03B30304 MOV X0, X20
	0x03B30308 MOV X1, X31
	0x03B3030C MOV X2, X31
	0x03B30310 BL 0x3C3883C
	0x03B30314 TBZ X0, 0x0, 0x3B30350
	0x03B30318 LDR X0, [X23]
	0x03B3031C ADRP X20, 0x629000
	0x03B30320 LDR W8, [X0 + 0xE0]
	0x03B30324 LDR X20, [X20 + 0xEB8]
	0x03B30328 CBNZ W8, 0x3B30330
	0x03B3032C BL 0x1C16DFC
	0x03B30330 LDR X0, [X20]
	0x03B30334 MOV X1, X19
	0x03B30338 MOV X2, X31
	0x03B3033C BL 0x3C06B0C
	0x03B30340 MOV X0, X19
	0x03B30344 MOV X1, X31
	0x03B30348 BL 0x3C32ECC
	0x03B3034C STR X0, [X19 + 0x40]
	0x03B30350 LDR X0, [X22]
	0x03B30354 LDR X20, [X19 + 0x20]
	0x03B30358 LDR W8, [X0 + 0xE0]
	0x03B3035C CBNZ W8, 0x3B30364
	0x03B30360 BL 0x1C16DFC
	0x03B30364 ADRP X24, 0x5C3000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8B3000
	006 Move X21, 0x5C4000
	007 Move W8, [X20+1975]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5C4000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1975], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_isPlaying
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {52}
	030 Move X0, X19
	031 Call XROrigin.SetupCamera, X0
	032 Move W8, [X19+85]
	033 NotImplemented "Instruction ORN not yet implemented."
	034 And W9, W0, 1
	035 Move [X19+84], W9
	036 NotImplemented "Instruction BIC not yet implemented."
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {52}
	041 Move X0, X19
	042 Call XROrigin.RepeatInitializeCamera, X0
	043 Move X1, X0
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X2, X31
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call MonoBehaviour.StartCoroutine, X0, X1
	051 Return 
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 

Method: System.Boolean SetupCamera()

Disassembly:
	0x03B304F8 CBZ X0, 0x3B305F4
	0x03B304FC ADRP X8, 0x629000
	0x03B30500 LDR X8, [X8 + 0xEB0]
	0x03B30504 LDR X1, [X8]
	0x03B30508 BL 0x21A3894
	0x03B3050C LDR X8, [X19 + 0x20]
	0x03B30510 CBZ X8, 0x3B305F4
	0x03B30514 ADRP X9, 0x629000
	0x03B30518 LDR X9, [X9 + 0xEA8]
	0x03B3051C MOV X21, X0
	0x03B30520 MOV X0, X8
	0x03B30524 LDR X1, [X9]
	0x03B30528 BL 0x21A3894
	0x03B3052C LDR X8, [X22]
	0x03B30530 MOV X20, X0
	0x03B30534 LDR W9, [X8 + 0xE0]
	0x03B30538 CBNZ W9, 0x3B30544
	0x03B3053C MOV X0, X8
	0x03B30540 BL 0x1C16DFC
	0x03B30544 MOV X0, X21
	0x03B30548 MOV X1, X31
	0x03B3054C MOV X2, X31
	0x03B30550 BL 0x3C3883C
	0x03B30554 TBZ X0, 0x0, 0x3B305DC
	0x03B30558 LDR X0, [X22]
	0x03B3055C LDR W8, [X0 + 0xE0]
	0x03B30560 CBNZ W8, 0x3B30568
	0x03B30564 BL 0x1C16DFC
	0x03B30568 MOV X0, X20
	0x03B3056C MOV X1, X31
	0x03B30570 MOV X2, X31
	0x03B30574 BL 0x3C3883C
	0x03B30578 TBZ X0, 0x0, 0x3B305DC
	0x03B3057C LDR X0, [X19 + 0x20]
	0x03B30580 CBZ X0, 0x3B305F4
	0x03B30584 MOV X1, X31
	0x03B30588 BL 0x3C389D4
	0x03B3058C ADRP X8, 0x629000
	0x03B30590 LDR X8, [X8 + 0xEC0]
	0x03B30594 ADRP X9, 0x629000
	0x03B30598 LDR X9, [X9 + 0xED8]
	0x03B3059C MOV X1, X0
	0x03B305A0 LDR X8, [X8]
	0x03B305A4 MOV X3, X31
	0x03B305A8 LDR X2, [X9]
	0x03B305AC MOV X0, X8
	0x03B305B0 BL 0x32274B8
	0x03B305B4 LDR X8, [X23]
	0x03B305B8 MOV X20, X0
	0x03B305BC LDR W9, [X8 + 0xE0]
	0x03B305C0 CBNZ W9, 0x3B305CC
	0x03B305C4 MOV X0, X8
	0x03B305C8 BL 0x1C16DFC
	0x03B305CC MOV X0, X20
	0x03B305D0 MOV X1, X19
	0x03B305D4 MOV X2, X31
	0x03B305D8 BL 0x3C06B0C
	0x03B305DC LDP X20, X19, [X31 + 0x70]
	0x03B305E0 LDP X22, X21, [X31 + 0x60]
	0x03B305E4 LDP X24, X23, [X31 + 0x50]
	0x03B305E8 LDR X30, [X31 + 0x40]
	0x03B305EC ADD X31, X31, 0x80
	0x03B305F0 RET
	0x03B305F4 BL 0x1C16F20
	0x03B305F8 SUB X31, X31, 0x90
	0x03B305FC STR X30, [X31 + 0x60]
	0x03B30600 STP X22, X21, [X31 + 0x70]
	0x03B30604 STP X20, X19, [X31 + 0x80]
	0x03B30608 ADRP X21, 0x8B2000
	0x03B3060C ADRP X22, 0x5EB000
	0x03B30610 MOV X19, X8
	0x03B30614 LDRB W8, [X21 + 0x7C1]
	0x03B30618 LDR X22, [X22 + 0x610]
	0x03B3061C MOV X20, X0
	0x03B30620 TBNZ X8, 0x0, 0x3B30644
	0x03B30624 ADRP X0, 0x5C3000
	0x03B30628 LDR X0, [X0 + 0x598]
	0x03B3062C BL 0x1C16CF4
	0x03B30630 ADRP X0, 0x5EB000
	0x03B30634 LDR X0, [X0 + 0x610]
	0x03B30638 BL 0x1C16CF4
	0x03B3063C MOVZ W8, 0x1
	0x03B30640 STRB W8, [X21 + 0x7C1]
	0x03B30644 LDR X0, [X22]
	0x03B30648 LDR W8, [X0 + 0xE0]
	0x03B3064C CBNZ W8, 0x3B30654
	0x03B30650 BL 0x1C16DFC
	0x03B30654 ADD X8, X31, 0x20
	0x03B30658 MOV X0, X31
	0x03B3065C BL 0x3C3E05C
	0x03B30660 LDR V0, [X31 + 0x2]
	0x03B30664 LDUR V1, [X31 + 0x2C]
	0x03B30668 STR V0, [X31 + 0x4]
	0x03B3066C STUR V1, [X31 + 0x4C]
	0x03B30670 LDR X0, [X20 + 0x20]
	0x03B30674 CBZ X0, 0x3B3070C
	0x03B30678 MOV X1, X31
	0x03B3067C BL 0x3C32E90
	0x03B30680 CBZ X0, 0x3B3070C
	0x03B30684 ADRP X20, 0x5C3000
	0x03B30688 LDR X20, [X20 + 0x598]
	0x03B3068C MOV X1, X31
	0x03B30690 BL 0x3C3F49C
	0x03B30694 LDR X8, [X20]
	0x03B30698 MOV X20, X0
	0x03B3069C LDR W9, [X8 + 0xE0]
	0x03B306A0 CBNZ W9, 0x3B306AC
	0x03B306A4 MOV X0, X8
	0x03B306A8 BL 0x1C16DFC
	0x03B306AC MOV X0, X20
	0x03B306B0 MOV X1, X31
	0x03B306B4 BL 0x3C38948
	0x03B306B8 TBZ X0, 0x0, 0x3B306E8
	0x03B306BC LDR V0, [X31 + 0x4]
	0x03B306C0 LDUR V1, [X31 + 0x4C]
	0x03B306C4 ADD X8, X31, 0x20
	0x03B306C8 ADD X1, X31, 0x0
	0x03B306CC MOV X0, X20
	0x03B306D0 STR V0, [X31]
	0x03B306D4 STUR V1, [X31 + 0xC]
	0x03B306D8 BL 0x3B247D8
	0x03B306DC LDUR V0, [X31 + 0x2C]
	0x03B306E0 LDR V1, [X31 + 0x2]
	0x03B306E4 B 0x3B306F0
	0x03B306E8 LDUR V0, [X31 + 0x4C]
	0x03B306EC LDR V1, [X31 + 0x4]
	0x03B306F0 STUR V0, [X19 + 0xC]
	0x03B306F4 STR V1, [X19]
	0x03B306F8 LDP X20, X19, [X31 + 0x80]
	0x03B306FC LDP X22, X21, [X31 + 0x70]
	0x03B30700 LDR X30, [X31 + 0x60]
	0x03B30704 ADD X31, X31, 0x90
	0x03B30708 RET
	0x03B3070C BL 0x1C16F20
	0x03B30710 STP X30, X23, [X31 - 0x30]!
	0x03B30714 STP X22, X21, [X31 + 0x10]
	0x03B30718 STP X20, X19, [X31 + 0x20]
	0x03B3071C ADRP X22, 0x8B2000
	0x03B30720 ADRP X23, 0x5EA000
	0x03B30724 ADRP X20, 0x629000
	0x03B30728 ADRP X21, 0x5C3000
	0x03B3072C LDRB W8, [X22 + 0x7C2]
	0x03B30730 LDR X23, [X23 + 0xE30]
	0x03B30734 LDR X20, [X20 + 0xEE0]
	0x03B30738 LDR X21, [X21 + 0x970]
	0x03B3073C MOV X19, X0
	0x03B30740 TBNZ X8, 0x0, 0x3B30770
	0x03B30744 ADRP X0, 0x5C3000
	0x03B30748 LDR X0, [X0 + 0x970]
	0x03B3074C BL 0x1C16CF4
	0x03B30750 ADRP X0, 0x5EA000
	0x03B30754 LDR X0, [X0 + 0xE30]
	0x03B30758 BL 0x1C16CF4
	0x03B3075C ADRP X0, 0x629000
	0x03B30760 LDR X0, [X0 + 0xEE0]
	0x03B30764 BL 0x1C16CF4
	0x03B30768 MOVZ W8, 0x1
	0x03B3076C STRB W8, [X22 + 0x7C2]
	0x03B30770 LDR X0, [X23]
	0x03B30774 BL 0x1C16F10
	0x03B30778 LDR X2, [X20]
	0x03B3077C MOV X1, X19
	0x03B30780 MOV X3, X31
	0x03B30784 MOV X20, X0
	0x03B30788 BL 0x3C45BE8
	0x03B3078C LDR X0, [X21]
	0x03B30790 LDR W8, [X0 + 0xE0]
	0x03B30794 CBNZ W8, 0x3B3079C
	0x03B30798 BL 0x1C16DFC
	0x03B3079C MOV X0, X20
	0x03B307A0 LDP X20, X19, [X31 + 0x20]
	0x03B307A4 LDP X22, X21, [X31 + 0x10]
	0x03B307A8 MOV X1, X31
	0x03B307AC LDP X30, X23, [X31], #0x30
	0x03B307B0 B 0x3C01FF0
	0x03B307B4 STP X30, X23, [X31 - 0x30]!
	0x03B307B8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], X30
	003 Move [X31+80], X26
	004 Move [X31+88], X25
	005 Move [X31+96], X24
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X20, 0x8B3000
	012 Move X21, 0x62A000
	013 Move W8, [X20+1976]
	014 Move X21, [X21+3688]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {52}
	020 Move X0, 0x62A000
	021 Move X0, [X0+3696]
	022 Call 0x1C17CF4
	023 Move X0, 0x5EC000
	024 Move X0, [X0+200]
	025 Call 0x1C17CF4
	026 Move X0, 0x5EC000
	027 Move X0, [X0+208]
	028 Call 0x1C17CF4
	029 Move X0, 0x5EC000
	030 Move X0, [X0+216]
	031 Call 0x1C17CF4
	032 Move X0, 0x5EC000
	033 Move X0, [X0+224]
	034 Call 0x1C17CF4
	035 Move X0, 0x62A000
	036 Move X0, [X0+3704]
	037 Call 0x1C17CF4
	038 Move X0, 0x5EC000
	039 Move X0, [X0+232]
	040 Call 0x1C17CF4
	041 Move X0, 0x5EC000
	042 Move X0, [X0+192]
	043 Call 0x1C17CF4
	044 Move X0, 0x62A000
	045 Move X0, [X0+3712]
	046 Call 0x1C17CF4
	047 Move X0, 0x62A000
	048 Move X0, [X0+3688]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+1976], W8
	052 Move X0, [X21]
	053 Move [X31+32], X31
	054 Move [X31+40], X31
	055 Move [X31+48], X31
	056 Move X20, 0x5EC000
	057 Move W8, [X0+224]
	058 Move X20, [X20+192]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X21]
	063 Move X8, [X20]
	064 Move X9, [X0+184]
	065 Move X22, 0x5EC000
	066 Move W10, [X8+224]
	067 Move X20, [X9]
	068 Move X22, [X22+232]
	069 Compare W10, 0
	070 JumpIfNotEqual {73}
	071 Move X0, X8
	072 Call 0x1C17DFC
	073 Move X1, [X22]
	074 Move X0, X20
	075 Call 0x229939C, X0
	076 Move X8, [X21]
	077 Move X9, [X8+184]
	078 Move X0, [X9]
	079 Compare X0, 0
	080 JumpIfEqual {168}
	081 Move W9, [X0+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {93}
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X8, [X21]
	089 Move X8, [X8+184]
	090 Move X0, [X8]
	091 Compare X0, 0
	092 JumpIfEqual {168}
	093 Move X8, 0x5EC000
	094 Move X8, [X8+224]
	095 Move X24, 0x5EC000
	096 Move X24, [X24+208]
	097 Move X25, 0x62A000
	098 Move X1, [X8]
	099 Move X26, 0x62A000
	100 Move X22, 0x5EC000
	101 Move X25, [X25+3696]
	102 Move X26, [X26+3712]
	103 Move X22, [X22+200]
	104 Add X8, X31, 8
	105 Call List`1<Object>.GetEnumerator, X0
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 Move X8, [X31+24]
	108 Move W23, 1
	109 Move [X31+2], V0
	110 Move [X31+48], X8
	111 Move X1, [X24]
	112 Add X0, X31, 32
	113 Call Enumerator<Object>.MoveNext, X0
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {151}
	118 Move X20, [X31+48]
	119 Move X0, X19
	120 Move X1, X20
	121 Call XROrigin.SetupCamera, X0, X1
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {150}
	126 Move X0, [X25]
	127 Call 0x1C17F10
	128 Move X2, [X26]
	129 Move X21, X0
	130 Move X1, X19
	131 Move X3, X31
	132 Call Action`1<Object>..ctor, X0, X1, X2
	133 Compare X20, 0
	134 JumpIfEqual {167}
	135 Move X0, X20
	136 Move X1, X21
	137 Move X2, X31
	138 Call XRInputSubsystem.remove_trackingOriginUpdated, X0, X1
	139 Move X0, [X25]
	140 Call 0x1C17F10
	141 Move X2, [X26]
	142 Move X21, X0
	143 Move X1, X19
	144 Move X3, X31
	145 Call Action`1<Object>..ctor, X0, X1, X2
	146 Move X0, X20
	147 Move X1, X21
	148 Move X2, X31
	149 Call XRInputSubsystem.add_trackingOriginUpdated, X0, X1
	150 Move W23, W31
	151 Move X1, [X22]
	152 Add X0, X31, 32
	153 Call Enumerator<Object>.Dispose, X0
	154 Move W23, 1
	155 And W0, W23, 1
	156 Move X20, [X31+128]
	157 Move X19, [X31+136]
	158 Move X22, [X31+112]
	159 Move X21, [X31+120]
	160 Move X24, [X31+96]
	161 Move X23, [X31+104]
	162 Move X26, [X31+80]
	163 Move X25, [X31+88]
	164 Move X30, [X31+64]
	165 Add X31, X31, 144
	166 Return X0
	167 Call 0x1C17F20
	168 Call 0x1C17F20
	169 Move X19, X0
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move X0, X19
	172 Call 0x3EB2AD0
	173 Move X20, [X0]
	174 Call 0x3EB2AE0
	175 Move X1, [X22]
	176 Add X0, X31, 32
	177 Call Enumerator<Object>.Dispose, X0
	178 Compare X20, 0
	179 JumpIfEqual {155}
	180 Move X0, X20
	181 Call 0x1C17F18
	182 Move X20, X31
	183 Move X19, X0
	184 Move X1, [X22]
	185 Add X0, X31, 32
	186 Call Enumerator<Object>.Dispose, X0
	187 Compare X20, 0
	188 JumpIfNotEqual {191}
	189 Move X0, X19
	190 Call 0x1D2D690
	191 Move X0, X20
	192 Call 0x1C17F18
	193 Call 0x1991590

Method: System.Boolean SetupCamera(UnityEngine.XR.XRInputSubsystem inputSubsystem)

Disassembly:
	0x03B3081C LDR X2, [X20]
	0x03B30820 MOV X1, X19
	0x03B30824 MOV X3, X31
	0x03B30828 MOV X20, X0
	0x03B3082C BL 0x3C45BE8
	0x03B30830 LDR X0, [X21]
	0x03B30834 LDR W8, [X0 + 0xE0]
	0x03B30838 CBNZ W8, 0x3B30840
	0x03B3083C BL 0x1C16DFC
	0x03B30840 MOV X0, X20
	0x03B30844 LDP X20, X19, [X31 + 0x20]
	0x03B30848 LDP X22, X21, [X31 + 0x10]
	0x03B3084C MOV X1, X31
	0x03B30850 LDP X30, X23, [X31], #0x30
	0x03B30854 B 0x3C02390
	0x03B30858 SUB X31, X31, 0x60
	0x03B3085C STP D11, D10, [X31 + 0x20]
	0x03B30860 STP D9, D8, [X31 + 0x30]
	0x03B30864 STP X30, X21, [X31 + 0x40]
	0x03B30868 STP X20, X19, [X31 + 0x50]
	0x03B3086C ADRP X21, 0x8B2000
	0x03B30870 ADRP X20, 0x5C3000
	0x03B30874 LDRB W8, [X21 + 0x7C4]
	0x03B30878 LDR X20, [X20 + 0x598]
	0x03B3087C MOV X19, X0
	0x03B30880 TBNZ X8, 0x0, 0x3B30898
	0x03B30884 ADRP X0, 0x5C3000
	0x03B30888 LDR X0, [X0 + 0x598]
	0x03B3088C BL 0x1C16CF4
	0x03B30890 MOVZ W8, 0x1
	0x03B30894 STRB W8, [X21 + 0x7C4]
	0x03B30898 LDR X0, [X20]
	0x03B3089C LDR X20, [X19 + 0x20]
	0x03B308A0 LDR W8, [X0 + 0xE0]
	0x03B308A4 CBNZ W8, 0x3B308AC
	0x03B308A8 BL 0x1C16DFC
	0x03B308AC MOV X0, X20
	0x03B308B0 MOV X1, X31
	0x03B308B4 BL 0x3C38948
	0x03B308B8 TBZ X0, 0x0, 0x3B30908
	0x03B308BC ADD X8, X31, 0x0
	0x03B308C0 MOV X0, X19
	0x03B308C4 BL 0x3B305F8
	0x03B308C8 LDR X0, [X19 + 0x28]
	0x03B308CC CBZ X0, 0x3B3098C
	0x03B308D0 LDP S0, S1, [X31]
	0x03B308D4 LDP S2, S8, [X31 + 0x8]
	0x03B308D8 LDP S9, S10, [X31 + 0x10]
	0x03B308DC LDR V11, [X31 + 0x18]
	0x03B308E0 MOV X1, X31
	0x03B308E4 BL 0x3C3F62C
	0x03B308E8 LDR X0, [X19 + 0x28]
	0x03B308EC CBZ X0, 0x3B3098C
	0x03B308F0 MOV V0.16B, V8.16B
	0x03B308F4 MOV V1.16B, V9.16B
	0x03B308F8 MOV V2.16B, V10.16B
	0x03B308FC MOV V3.16B, V11.16B
	0x03B30900 MOV X1, X31
	0x03B30904 BL 0x3C3F7AC
	0x03B30908 LDR X0, [X19 + 0x28]
	0x03B3090C CBZ X0, 0x3B3098C
	0x03B30910 MOV X1, X31
	0x03B30914 BL 0x3C40F8C
	0x03B30918 TBZ X0, 0x0, 0x3B30974
	0x03B3091C LDR X20, [X19 + 0x30]
	0x03B30920 CBZ X20, 0x3B3094C
	0x03B30924 LDR X2, [X19 + 0x28]
	0x03B30928 ADD X0, X31, 0x0
	0x03B3092C MOV X1, X19
	0x03B30930 STP X31, X31, [X31]
	0x03B30934 BL 0x3B21B00
	0x03B30938 LDP X1, X2, [X31]
	0x03B3093C LDR X8, [X20 + 0x18]
	0x03B30940 LDR X0, [X20 + 0x40]
	0x03B30944 LDR X3, [X20 + 0x28]
	0x03B30948 BLR X8
	0x03B3094C LDR X0, [X19 + 0x28]
	0x03B30950 CBZ X0, 0x3B3098C
	0x03B30954 LDP X20, X19, [X31 + 0x50]
	0x03B30958 LDP X30, X21, [X31 + 0x40]
	0x03B3095C LDP D9, D8, [X31 + 0x30]
	0x03B30960 LDP D11, D10, [X31 + 0x20]
	0x03B30964 MOV W1, W31
	0x03B30968 MOV X2, X31
	0x03B3096C ADD X31, X31, 0x60
	0x03B30970 B 0x3C40FC8
	0x03B30974 LDP X20, X19, [X31 + 0x50]
	0x03B30978 LDP X30, X21, [X31 + 0x40]
	0x03B3097C LDP D9, D8, [X31 + 0x30]
	0x03B30980 LDP D11, D10, [X31 + 0x20]
	0x03B30984 ADD X31, X31, 0x60
	0x03B30988 RET
	0x03B3098C BL 0x1C16F20
	0x03B30990 STP X30, X21, [X31 - 0x20]!
	0x03B30994 STP X20, X19, [X31 + 0x10]
	0x03B30998 ADRP X21, 0x8B2000
	0x03B3099C ADRP X20, 0x5C3000
	0x03B309A0 LDRB W8, [X21 + 0x7C5]
	0x03B309A4 LDR X20, [X20 + 0x598]
	0x03B309A8 MOV X19, X0
	0x03B309AC TBNZ X8, 0x0, 0x3B309D0
	0x03B309B0 ADRP X0, 0x5C3000
	0x03B309B4 LDR X0, [X0 + 0x970]
	0x03B309B8 BL 0x1C16CF4
	0x03B309BC ADRP X0, 0x5C3000
	0x03B309C0 LDR X0, [X0 + 0x598]
	0x03B309C4 BL 0x1C16CF4
	0x03B309C8 MOVZ W8, 0x1
	0x03B309CC STRB W8, [X21 + 0x7C5]
	0x03B309D0 LDR X0, [X20]
	0x03B309D4 LDR X20, [X19 + 0x38]
	0x03B309D8 LDR W8, [X0 + 0xE0]
	0x03B309DC CBNZ W8, 0x3B309E4
	0x03B309E0 BL 0x1C16DFC
	0x03B309E4 ADRP X21, 0x5C3000
	0x03B309E8 LDR X21, [X21 + 0x970]
	0x03B309EC MOV X0, X20
	0x03B309F0 MOV X1, X31
	0x03B309F4 MOV X2, X31
	0x03B309F8 BL 0x3C3883C
	0x03B309FC TBZ X0, 0x0, 0x3B30A10
	0x03B30A00 MOV X0, X19
	0x03B30A04 MOV X1, X31
	0x03B30A08 BL 0x3C32ECC
	0x03B30A0C STR X0, [X19 + 0x38]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8B3000
	009 Move W8, [X21+1977]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x5C4000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x62A000
	020 Move X0, [X0+3728]
	021 Call 0x1C17CF4
	022 Move X0, 0x62A000
	023 Move X0, [X0+3736]
	024 Call 0x1C17CF4
	025 Move X0, 0x62A000
	026 Move X0, [X0+3744]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1977], W8
	030 Compare X19, 0
	031 JumpIfEqual {57}
	032 Move W8, [X20+72]
	033 Compare W8, 0
	034 JumpIfEqual {58}
	035 Subtract W8, W8, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X1, X31
	039 Call XRInputSubsystem.GetSupportedTrackingOriginModes, X0
	040 Compare W0, 0
	041 JumpIfEqual {72}
	042 Move W8, [X20+72]
	043 Move W21, W0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W8, 1
	046 NotImplemented "Instruction CINC not yet implemented."
	047 And W31, W22, W0
	048 Move X0, X19
	049 Move W1, W22
	050 Move X2, X31
	051 Call XRInputSubsystem.TrySetTrackingOriginMode, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {62}
	056 Move W0, W31
	057 Move W0, W31
	058 Move X0, X19
	059 Move X1, X31
	060 Call XRInputSubsystem.GetTrackingOriginMode, X0
	061 Move [X20+80], W0
	062 Move X0, X20
	063 Call XROrigin.MoveOffsetHeight, X0
	064 Move W0, 1
	065 Move W8, [X20+80]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W8, [X20+72]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, X19
	070 Move X1, X31
	071 Call XRInputSubsystem.TryRecenter, X0
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X22, [X31+32]
	075 Move X21, [X31+40]
	076 Move X30, [X31+16]
	077 Move X23, [X31+24]
	078 And W0, W0, 1
	079 Add X31, X31, 64
	080 Return X0
	081 Move X0, X19
	082 Move X1, X31
	083 Move [X20+72], W31
	084 Call XRInputSubsystem.GetTrackingOriginMode, X0
	085 Move [X20+80], W0
	086 Move X23, 0x62A000
	087 Move X23, [X23+3728]
	088 Add X1, X31, 12
	089 Move [X31+12], W22
	090 Move X0, [X23]
	091 Call 0x1C17E04
	092 Move X8, 0x62A000
	093 Move X8, [X8+3744]
	094 Move X1, X0
	095 Move X2, X31
	096 Move X8, [X8]
	097 Move X0, X8
	098 Call String.Format, X0, X1
	099 Move X22, X0
	100 Move X0, [X23]
	101 Add X1, X31, 8
	102 Move [X31+8], W21
	103 Call 0x1C17E04
	104 Move X21, X0
	105 Move W8, [X20+80]
	106 Move X0, [X23]
	107 Add X1, X31, 4
	108 Move [X31+4], W8
	109 Call 0x1C17E04
	110 Move X8, 0x62A000
	111 Move X8, [X8+3736]
	112 Move X2, X0
	113 Move X1, X21
	114 Move X3, X31
	115 Move X8, [X8]
	116 Move X0, X8
	117 Call String.Format, X0, X1, X2
	118 Move X1, X0
	119 Move X0, X22
	120 Move X2, X31
	121 Call String.Concat, X0, X1
	122 Move X8, 0x5C4000
	123 Move X8, [X8+2600]
	124 Move X21, X0
	125 Move X8, [X8]
	126 Move W9, [X8+224]
	127 Compare W9, 0
	128 JumpIfNotEqual {131}
	129 Move X0, X8
	130 Call 0x1C17DFC
	131 Move X0, X21
	132 Move X1, X20
	133 Move X2, X31
	134 Call Debug.LogWarning, X0, X1

Method: System.Void OnInputSubsystemTrackingOriginUpdated(UnityEngine.XR.XRInputSubsystem inputSubsystem)

Disassembly:
	0x03B30A10 LDR X0, [X21]
	0x03B30A14 LDR W8, [X0 + 0xE0]
	0x03B30A18 CBNZ W8, 0x3B30A20
	0x03B30A1C BL 0x1C16DFC
	0x03B30A20 MOV X0, X31
	0x03B30A24 BL 0x3C018E4
	0x03B30A28 TBZ X0, 0x0, 0x3B30A58
	0x03B30A2C MOV X0, X19
	0x03B30A30 MOV X1, X31
	0x03B30A34 BL 0x3C32454
	0x03B30A38 TBZ X0, 0x0, 0x3B30A58

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {15}
	005 Move X19, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call XRInputSubsystem.GetTrackingOriginMode, X0
	009 Move [X19+80], W0
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call XROrigin.MoveOffsetHeight, X0
	014 Return 
	015 Call 0x1C17F20

Method: System.Collections.IEnumerator RepeatInitializeCamera()

Disassembly:
	0x03B307BC STP X20, X19, [X31 + 0x20]
	0x03B307C0 ADRP X22, 0x8B2000
	0x03B307C4 ADRP X23, 0x5EA000
	0x03B307C8 ADRP X20, 0x629000
	0x03B307CC ADRP X21, 0x5C3000
	0x03B307D0 LDRB W8, [X22 + 0x7C3]
	0x03B307D4 LDR X23, [X23 + 0xE30]
	0x03B307D8 LDR X20, [X20 + 0xEE0]
	0x03B307DC LDR X21, [X21 + 0x970]
	0x03B307E0 MOV X19, X0
	0x03B307E4 TBNZ X8, 0x0, 0x3B30814
	0x03B307E8 ADRP X0, 0x5C3000
	0x03B307EC LDR X0, [X0 + 0x970]
	0x03B307F0 BL 0x1C16CF4
	0x03B307F4 ADRP X0, 0x5EA000
	0x03B307F8 LDR X0, [X0 + 0xE30]
	0x03B307FC BL 0x1C16CF4
	0x03B30800 ADRP X0, 0x629000
	0x03B30804 LDR X0, [X0 + 0xEE0]
	0x03B30808 BL 0x1C16CF4
	0x03B3080C MOVZ W8, 0x1
	0x03B30810 STRB W8, [X22 + 0x7C3]
	0x03B30814 LDR X0, [X23]
	0x03B30818 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8B3000
	006 Move X21, 0x62A000
	007 Move W8, [X20+1978]
	008 Move X21, [X21+3720]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x62A000
	015 Move X0, [X0+3720]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1978], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Boolean RotateAroundCameraUsingOriginUp(System.Single angleDegrees)

Disassembly:
	0x03B30A64 MOV X0, X19
	0x03B30A68 LDP X20, X19, [X31 + 0x10]
	0x03B30A6C LDP X30, X21, [X31], #0x20
	0x03B30A70 B 0x3B2F230
	0x03B30A74 SUB X31, X31, 0x50
	0x03B30A78 STR X30, [X31 + 0x20]
	0x03B30A7C STP X22, X21, [X31 + 0x30]
	0x03B30A80 STP X20, X19, [X31 + 0x40]
	0x03B30A84 ADRP X21, 0x8B2000
	0x03B30A88 ADRP X20, 0x629000
	0x03B30A8C LDRB W8, [X21 + 0x7C8]
	0x03B30A90 LDR X20, [X20 + 0xE68]
	0x03B30A94 MOV X19, X0
	0x03B30A98 TBNZ X8, 0x0, 0x3B30AEC
	0x03B30A9C ADRP X0, 0x5EB000
	0x03B30AA0 LDR X0, [X0 + 0xC8]
	0x03B30AA4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+56]
	006 Compare X0, 0
	007 JumpIfEqual {20}
	008 Move X1, X31
	009 Move V8, V0
	010 Call GameObject.get_transform, X0
	011 Compare X0, 0
	012 JumpIfEqual {20}
	013 Move X1, X31
	014 Call Transform.get_up, X0
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V3, V8
	019 Move V8, [X31+32]
	020 Call 0x1C17F20

Method: System.Boolean RotateAroundCameraPosition(UnityEngine.Vector3 vector, System.Single angleDegrees)

Disassembly:
	0x03B30AA8 ADRP X0, 0x5EB000
	0x03B30AAC LDR X0, [X0 + 0xD0]
	0x03B30AB0 BL 0x1C16CF4
	0x03B30AB4 ADRP X0, 0x5EB000
	0x03B30AB8 LDR X0, [X0 + 0xD8]
	0x03B30ABC BL 0x1C16CF4
	0x03B30AC0 ADRP X0, 0x5EB000
	0x03B30AC4 LDR X0, [X0 + 0xE0]
	0x03B30AC8 BL 0x1C16CF4
	0x03B30ACC ADRP X0, 0x629000
	0x03B30AD0 LDR X0, [X0 + 0xE78]
	0x03B30AD4 BL 0x1C16CF4
	0x03B30AD8 ADRP X0, 0x629000
	0x03B30ADC LDR X0, [X0 + 0xE68]
	0x03B30AE0 BL 0x1C16CF4
	0x03B30AE4 MOVZ W8, 0x1
	0x03B30AE8 STRB W8, [X21 + 0x7C8]
	0x03B30AEC LDR X0, [X20]
	0x03B30AF0 STP X31, X31, [X31 + 0x8]
	0x03B30AF4 STR X31, [X31 + 0x18]
	0x03B30AF8 LDR W8, [X0 + 0xE0]
	0x03B30AFC CBNZ W8, 0x3B30B08
	0x03B30B00 BL 0x1C16DFC
	0x03B30B04 LDR X0, [X20]
	0x03B30B08 LDR X8, [X0 + 0xB8]
	0x03B30B0C LDR X9, [X8]
	0x03B30B10 CBZ X9, 0x3B30BF0
	0x03B30B14 LDR W8, [X9 + 0x18]
	0x03B30B18 CMP W8, 0x1
	0x03B30B1C B.LT 0x3B30BA8
	0x03B30B20 LDR W8, [X0 + 0xE0]
	0x03B30B24 CBNZ W8, 0x3B30B3C
	0x03B30B28 BL 0x1C16DFC
	0x03B30B2C LDR X8, [X20]
	0x03B30B30 LDR X8, [X8 + 0xB8]
	0x03B30B34 LDR X9, [X8]
	0x03B30B38 CBZ X9, 0x3B30BF0
	0x03B30B3C ADRP X8, 0x5EB000
	0x03B30B40 LDR X8, [X8 + 0xE0]
	0x03B30B44 ADRP X20, 0x5EB000
	0x03B30B48 ADRP X21, 0x5EB000
	0x03B30B4C MOV X0, X9
	0x03B30B50 LDR X1, [X8]
	0x03B30B54 LDR X20, [X20 + 0xD0]
	0x03B30B58 LDR X21, [X21 + 0xC8]
	0x03B30B5C ADD X8, X31, 0x8
	0x03B30B60 BL 0x301CB58
	0x03B30B64 LDR X1, [X20]
	0x03B30B68 ADD X0, X31, 0x8
	0x03B30B6C BL 0x2BC4350
	0x03B30B70 TBZ X0, 0x0, 0x3B30BB0
	0x03B30B74 LDR W22, [X19 + 0x48]
	0x03B30B78 LDR X0, [X31 + 0x18]
	0x03B30B7C CMP W22, 0x2
	0x03B30B80 B.EQ 0x3B30B8C
	0x03B30B84 CMP W22, 0x1
	0x03B30B88 B.NE 0x3B30BBC
	0x03B30B8C CBZ X0, 0x3B30B64
	0x03B30B90 MOV X1, X31
	0x03B30B94 BL 0x3E6623C
	0x03B30B98 CMP W0, W22
	0x03B30B9C B.EQ 0x3B30B64
	0x03B30BA0 MOVZ W19, 0x1
	0x03B30BA4 B 0x3B30BC0
	0x03B30BA8 MOV W0, W31
	0x03B30BAC B 0x3B30BDC
	0x03B30BB0 MOV W19, W31
	0x03B30BB4 MOVZ W20, 0x2
	0x03B30BB8 B 0x3B30BC4

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x8B3000
	010 Move X21, 0x5C4000
	011 Move W8, [X20+1979]
	012 Move X21, [X21+1432]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x5C4000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+1979], W8
	027 Move X0, [X21]
	028 Move X20, [X19+32]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {55}
	041 Move X0, [X21]
	042 Move X20, [X19+56]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {56}
	055 Move W0, W31
	056 Move X0, [X19+56]
	057 Compare X0, 0
	058 JumpIfEqual {91}
	059 Move X1, X31
	060 Call GameObject.get_transform, X0
	061 Move X8, [X19+32]
	062 Compare X8, 0
	063 JumpIfEqual {91}
	064 Move X19, X0
	065 Move X0, X8
	066 Move X1, X31
	067 Call Component.get_transform, X0
	068 Compare X0, 0
	069 JumpIfEqual {91}
	070 Move X1, X31
	071 Call Transform.get_position, X0
	072 Compare X19, 0
	073 JumpIfEqual {91}
	074 Move X0, X19
	075 Move V3, V11
	076 Move V4, V10
	077 Move V5, V9
	078 Move V6, V8
	079 Move X1, X31
	080 Call Transform.RotateAround, X0, X1, X2, V0
	081 Move W0, 1
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Move D9, [X31+16]
	087 Move D8, [X31+24]
	088 Move D11, [X31+64]
	089 Move D10, [X31+72]
	090 Return X0
	091 Call 0x1C17F20

Method: System.Boolean MatchOriginUp(UnityEngine.Vector3 destinationUp)

Disassembly:
	0x03B30BBC MOV W19, W31
	0x03B30BC0 MOVZ W20, 0xA
	0x03B30BC4 LDR X1, [X21]
	0x03B30BC8 ADD X0, X31, 0x8
	0x03B30BCC BL 0x2BC434C
	0x03B30BD0 CMP W20, 0xA
	0x03B30BD4 CSET W8, EQ
	0x03B30BD8 AND W0, W19, W8, 0x0
	0x03B30BDC LDP X20, X19, [X31 + 0x40]
	0x03B30BE0 LDP X22, X21, [X31 + 0x30]
	0x03B30BE4 LDR X30, [X31 + 0x20]
	0x03B30BE8 ADD X31, X31, 0x50
	0x03B30BEC RET
	0x03B30BF0 BL 0x1C16F20
	0x03B30BF4 B 0x3B30BF8
	0x03B30BF8 MOV X20, X0
	0x03B30BFC CMP W1, 0x1
	0x03B30C00 B.NE 0x3B30C2C
	0x03B30C04 MOV X0, X20
	0x03B30C08 BL 0x3EB1AD0
	0x03B30C0C LDR X19, [X0]
	0x03B30C10 BL 0x3EB1AE0
	0x03B30C14 LDR X1, [X21]
	0x03B30C18 ADD X0, X31, 0x8
	0x03B30C1C BL 0x2BC434C
	0x03B30C20 CBNZ X19, 0x3B30C34
	0x03B30C24 MOV W20, W31
	0x03B30C28 B 0x3B30BD0
	0x03B30C2C MOV X19, X31
	0x03B30C30 B 0x3B30C40
	0x03B30C34 MOV X0, X19
	0x03B30C38 BL 0x1C16F18
	0x03B30C3C MOV X20, X0
	0x03B30C40 LDR X1, [X21]
	0x03B30C44 ADD X0, X31, 0x8
	0x03B30C48 BL 0x2BC434C
	0x03B30C4C CBNZ X19, 0x3B30C58
	0x03B30C50 MOV X0, X20
	0x03B30C54 BL 0x1D2C690
	0x03B30C58 MOV X0, X19
	0x03B30C5C BL 0x1C16F18
	0x03B30C60 BL 0x1990590
	0x03B30C64 B 0x3B2F2CC
	0x03B30C68 SUB X31, X31, 0x60
	0x03B30C6C STP X30, X25, [X31 + 0x20]
	0x03B30C70 STP X24, X23, [X31 + 0x30]
	0x03B30C74 STP X22, X21, [X31 + 0x40]
	0x03B30C78 STP X20, X19, [X31 + 0x50]
	0x03B30C7C ADRP X21, 0x8B2000
	0x03B30C80 ADRP X20, 0x629000
	0x03B30C84 LDRB W8, [X21 + 0x7C6]
	0x03B30C88 LDR X20, [X20 + 0xE68]
	0x03B30C8C MOV X19, X0
	0x03B30C90 TBNZ X8, 0x0, 0x3B30CF0
	0x03B30C94 ADRP X0, 0x629000
	0x03B30C98 LDR X0, [X0 + 0xE70]
	0x03B30C9C BL 0x1C16CF4
	0x03B30CA0 ADRP X0, 0x5EB000
	0x03B30CA4 LDR X0, [X0 + 0xC8]
	0x03B30CA8 BL 0x1C16CF4
	0x03B30CAC ADRP X0, 0x5EB000
	0x03B30CB0 LDR X0, [X0 + 0xD0]
	0x03B30CB4 BL 0x1C16CF4
	0x03B30CB8 ADRP X0, 0x5EB000
	0x03B30CBC LDR X0, [X0 + 0xD8]
	0x03B30CC0 BL 0x1C16CF4
	0x03B30CC4 ADRP X0, 0x5EB000
	0x03B30CC8 LDR X0, [X0 + 0xE0]
	0x03B30CCC BL 0x1C16CF4
	0x03B30CD0 ADRP X0, 0x629000
	0x03B30CD4 LDR X0, [X0 + 0xE80]
	0x03B30CD8 BL 0x1C16CF4
	0x03B30CDC ADRP X0, 0x629000
	0x03B30CE0 LDR X0, [X0 + 0xE68]
	0x03B30CE4 BL 0x1C16CF4
	0x03B30CE8 MOVZ W8, 0x1
	0x03B30CEC STRB W8, [X21 + 0x7C6]
	0x03B30CF0 LDR X0, [X20]
	0x03B30CF4 STP X31, X31, [X31 + 0x8]
	0x03B30CF8 STR X31, [X31 + 0x18]
	0x03B30CFC LDR W8, [X0 + 0xE0]
	0x03B30D00 CBNZ W8, 0x3B30D0C
	0x03B30D04 BL 0x1C16DFC
	0x03B30D08 LDR X0, [X20]
	0x03B30D0C LDR X8, [X0 + 0xB8]
	0x03B30D10 LDR X0, [X8]
	0x03B30D14 CBZ X0, 0x3B30DB8
	0x03B30D18 ADRP X8, 0x5EB000
	0x03B30D1C LDR X8, [X8 + 0xE0]
	0x03B30D20 ADRP X23, 0x5EB000
	0x03B30D24 LDR X23, [X23 + 0xD0]
	0x03B30D28 ADRP X24, 0x629000
	0x03B30D2C LDR X1, [X8]
	0x03B30D30 ADRP X25, 0x629000
	0x03B30D34 ADRP X22, 0x5EB000
	0x03B30D38 LDR X24, [X24 + 0xE70]
	0x03B30D3C LDR X25, [X25 + 0xE80]
	0x03B30D40 LDR X22, [X22 + 0xC8]
	0x03B30D44 ADD X8, X31, 0x8
	0x03B30D48 BL 0x301CB58
	0x03B30D4C LDR X1, [X23]
	0x03B30D50 ADD X0, X31, 0x8
	0x03B30D54 BL 0x2BC4350
	0x03B30D58 TBZ X0, 0x0, 0x3B30D94
	0x03B30D5C LDR X20, [X31 + 0x18]
	0x03B30D60 CBZ X20, 0x3B30D4C
	0x03B30D64 LDR X0, [X24]
	0x03B30D68 BL 0x1C16F10
	0x03B30D6C LDR X2, [X25]
	0x03B30D70 MOV X21, X0
	0x03B30D74 MOV X1, X19
	0x03B30D78 MOV X3, X31
	0x03B30D7C BL 0x2A6B948
	0x03B30D80 MOV X0, X20
	0x03B30D84 MOV X1, X21

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x8B3000
	010 Move X20, 0x5C4000
	011 Move W8, [X21+1980]
	012 Move X20, [X20+1432]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x5C4000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1980], W8
	026 Move X0, [X20]
	027 Move X20, [X19+56]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {41}
	040 Move W0, W31
	041 Move X0, [X19+56]
	042 Compare X0, 0
	043 JumpIfEqual {135}
	044 Move X1, X31
	045 Call GameObject.get_transform, X0
	046 Compare X0, 0
	047 JumpIfEqual {135}
	048 Move X1, X31
	049 Call Transform.get_up, X0
	050 Move X8, -50618368
	051 Subtract S0, S0, S10
	052 Subtract S1, S1, S9
	053 Move V3, [X8+3872]
	054 Subtract S2, S2, S8
	055 Multiply S0, S0, S0
	056 Multiply S1, S1, S1
	057 Add S0, S0, S1
	058 Multiply S1, S2, S2
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FCMP not yet implemented."
	061 Move X0, [X19+56]
	062 Compare X0, 0
	063 JumpIfEqual {135}
	064 Move X1, X31
	065 Call GameObject.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {135}
	068 Move X1, X31
	069 Call Transform.get_up, X0
	070 Move V3, V10
	071 Move V4, V9
	072 Move V5, V8
	073 Move X0, X31
	074 Call Quaternion.FromToRotation, X0, X1
	075 Move X0, [X19+56]
	076 Compare X0, 0
	077 JumpIfEqual {135}
	078 Move X1, X31
	079 Move V9, V0
	080 Move V10, V1
	081 Move V8, V2
	082 Move V11, V3
	083 Call GameObject.get_transform, X0
	084 Move X20, X0
	085 Move X0, X19
	086 Move X1, X31
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {135}
	090 Move X1, X31
	091 Call Transform.get_rotation, X0
	092 Compare X20, 0
	093 JumpIfEqual {135}
	094 Multiply S4, S11, S3
	095 Multiply S5, S9, S0
	096 Multiply S7, S8, S2
	097 Multiply S17, S11, S2
	098 Multiply S18, S8, S3
	099 Multiply S19, S10, S0
	100 Multiply S20, S10, S3
	101 Multiply S21, S10, S2
	102 Multiply S22, S9, S2
	103 Multiply S2, S9, S3
	104 Multiply S3, S8, S0
	105 Multiply S0, S11, S0
	106 Multiply S23, S11, S1
	107 Multiply S6, S10, S1
	108 Multiply S16, S9, S1
	109 Multiply S24, S8, S1
	110 Subtract S1, S4, S5
	111 Add S4, S17, S18
	112 Add S5, S23, S20
	113 Add S0, S0, S2
	114 Subtract S1, S1, S6
	115 Add S2, S16, S4
	116 Add S4, S3, S5
	117 Add S0, S21, S0
	118 Subtract S3, S1, S7
	119 Subtract S2, S2, S19
	120 Subtract S1, S4, S22
	121 Subtract S0, S0, S24
	122 Move X0, X20
	123 Move X1, X31
	124 Call Transform.set_rotation, X0, X1
	125 Move W0, 1
	126 Move X20, [X31+48]
	127 Move X19, [X31+56]
	128 Move X30, [X31+32]
	129 Move X21, [X31+40]
	130 Move D9, [X31+16]
	131 Move D8, [X31+24]
	132 Move D11, [X31+64]
	133 Move D10, [X31+72]
	134 Return X0
	135 Call 0x1C17F20

Method: System.Boolean MatchOriginUpCameraForward(UnityEngine.Vector3 destinationUp, UnityEngine.Vector3 destinationForward)

Disassembly:
	0x03B30D88 MOV X2, X31
	0x03B30D8C BL 0x3E66364
	0x03B30D90 B 0x3B30D4C
	0x03B30D94 LDR X1, [X22]
	0x03B30D98 ADD X0, X31, 0x8
	0x03B30D9C BL 0x2BC434C
	0x03B30DA0 LDP X20, X19, [X31 + 0x50]
	0x03B30DA4 LDP X22, X21, [X31 + 0x40]
	0x03B30DA8 LDP X24, X23, [X31 + 0x30]
	0x03B30DAC LDP X30, X25, [X31 + 0x20]
	0x03B30DB0 ADD X31, X31, 0x60
	0x03B30DB4 RET
	0x03B30DB8 BL 0x1C16F20
	0x03B30DBC B 0x3B30DC0
	0x03B30DC0 MOV X20, X0
	0x03B30DC4 CMP W1, 0x1
	0x03B30DC8 B.NE 0x3B30DF4
	0x03B30DCC MOV X0, X20
	0x03B30DD0 BL 0x3EB1AD0
	0x03B30DD4 LDR X19, [X0]
	0x03B30DD8 BL 0x3EB1AE0
	0x03B30DDC LDR X1, [X22]
	0x03B30DE0 ADD X0, X31, 0x8
	0x03B30DE4 BL 0x2BC434C
	0x03B30DE8 CBZ X19, 0x3B30DA0
	0x03B30DEC MOV X0, X19
	0x03B30DF0 BL 0x1C16F18
	0x03B30DF4 MOV X19, X31
	0x03B30DF8 B 0x3B30E00
	0x03B30DFC MOV X20, X0
	0x03B30E00 LDR X1, [X22]
	0x03B30E04 ADD X0, X31, 0x8
	0x03B30E08 BL 0x2BC434C
	0x03B30E0C CBNZ X19, 0x3B30E18
	0x03B30E10 MOV X0, X20
	0x03B30E14 BL 0x1D2C690
	0x03B30E18 MOV X0, X19
	0x03B30E1C BL 0x1C16F18
	0x03B30E20 BL 0x1990590
	0x03B30E24 MOVZ W8, 0xD84
	0x03B30E28 MOVK W8, 0x3F8F0000
	0x03B30E2C MOV X1, X31
	0x03B30E30 STR W8, [X0 + 0x4C]
	0x03B30E34 B 0x3C36C30
	0x03B30E38 STR X30, [X31 - 0x30]!
	0x03B30E3C STP X22, X21, [X31 + 0x10]
	0x03B30E40 STP X20, X19, [X31 + 0x20]
	0x03B30E44 ADRP X21, 0x8B2000
	0x03B30E48 ADRP X22, 0x5EB000
	0x03B30E4C ADRP X19, 0x5EB000
	0x03B30E50 ADRP X20, 0x629000
	0x03B30E54 LDRB W8, [X21 + 0x7C7]
	0x03B30E58 LDR X22, [X22 + 0xB0]
	0x03B30E5C LDR X19, [X19 + 0xB8]
	0x03B30E60 LDR X20, [X20 + 0xE68]
	0x03B30E64 TBNZ X8, 0x0, 0x3B30E94
	0x03B30E68 ADRP X0, 0x5EB000
	0x03B30E6C LDR X0, [X0 + 0xB8]
	0x03B30E70 BL 0x1C16CF4
	0x03B30E74 ADRP X0, 0x5EB000
	0x03B30E78 LDR X0, [X0 + 0xB0]
	0x03B30E7C BL 0x1C16CF4
	0x03B30E80 ADRP X0, 0x629000
	0x03B30E84 LDR X0, [X0 + 0xE68]
	0x03B30E88 BL 0x1C16CF4
	0x03B30E8C MOVZ W8, 0x1
	0x03B30E90 STRB W8, [X21 + 0x7C7]
	0x03B30E94 LDR X0, [X22]
	0x03B30E98 BL 0x1C16F10
	0x03B30E9C LDR X1, [X19]
	0x03B30EA0 MOV X19, X0
	0x03B30EA4 BL 0x301B7C4
	0x03B30EA8 LDR X8, [X20]
	0x03B30EAC LDP X22, X21, [X31 + 0x10]
	0x03B30EB0 LDR X8, [X8 + 0xB8]
	0x03B30EB4 STR X19, [X8]
	0x03B30EB8 LDP X20, X19, [X31 + 0x20]
	0x03B30EBC LDR X30, [X31], #0x30
	0x03B30EC0 RET
	0x03B30EC4 RET
	0x03B30EC8 STR X30, [X31 - 0x20]!
	0x03B30ECC STP X20, X19, [X31 + 0x10]
	0x03B30ED0 LDR W8, [X0 + 0x10]
	0x03B30ED4 LDR X20, [X0 + 0x20]
	0x03B30ED8 MOV X19, X0
	0x03B30EDC CMP W8, 0x1
	0x03B30EE0 B.EQ 0x3B30F00
	0x03B30EE4 CBNZ W8, 0x3B30F38
	0x03B30EE8 MOVN W8, 0x0
	0x03B30EEC STR W8, [X19 + 0x10]
	0x03B30EF0 CBZ X20, 0x3B30F58
	0x03B30EF4 MOVZ W8, 0x1
	0x03B30EF8 STRB W8, [X20 + 0x55]
	0x03B30EFC B 0x3B30F24
	0x03B30F00 MOVN W8, 0x0
	0x03B30F04 STR W8, [X19 + 0x10]
	0x03B30F08 CBZ X20, 0x3B30F58
	0x03B30F0C LDRB W8, [X20 + 0x54]
	0x03B30F10 CBNZ W8, 0x3B30F24
	0x03B30F14 MOV X0, X20
	0x03B30F18 BL 0x3B2F4F8
	0x03B30F1C AND W8, W0, 0x1
	0x03B30F20 STRB W8, [X20 + 0x54]
	0x03B30F24 LDRB W8, [X20 + 0x54]
	0x03B30F28 CBZ W8, 0x3B30F40
	0x03B30F2C MOV W0, W31
	0x03B30F30 STRB W31, [X20 + 0x55]
	0x03B30F34 B 0x3B30F4C
	0x03B30F38 MOV W0, W31
	0x03B30F3C B 0x3B30F4C
	0x03B30F40 MOVZ W0, 0x1
	0x03B30F44 STR X31, [X19 + 0x18]
	0x03B30F48 STR W0, [X19 + 0x10]
	0x03B30F4C LDP X20, X19, [X31 + 0x10]
	0x03B30F50 LDR X30, [X31], #0x20
	0x03B30F54 RET
	0x03B30F58 BL 0x1C16F20
	0x03B30F5C LDR X0, [X0 + 0x18]
	0x03B30F60 RET
	0x03B30F64 STP X30, X19, [X31 - 0x10]!
	0x03B30F68 ADRP X0, 0x5C3000
	0x03B30F6C LDR X0, [X0 + 0xB40]
	0x03B30F70 BL 0x1C16D08
	0x03B30F74 BL 0x1C16F10
	0x03B30F78 MOV X1, X31
	0x03B30F7C MOV X19, X0
	0x03B30F80 BL 0x3380310
	0x03B30F84 ADRP X0, 0x629000
	0x03B30F88 LDR X0, [X0 + 0xEE8]
	0x03B30F8C BL 0x1C16D08
	0x03B30F90 MOV X1, X0
	0x03B30F94 MOV X0, X19
	0x03B30F98 BL 0x1C16DEC
	0x03B30F9C LDR X0, [X0 + 0x18]
	0x03B30FA0 RET
	0x03B30FA4 STP X30, X21, [X31 - 0x20]!
	0x03B30FA8 STP X20, X19, [X31 + 0x10]
	0x03B30FAC ADRP X20, 0x8B2000
	0x03B30FB0 ADRP X21, 0x629000
	0x03B30FB4 LDRB W8, [X20 + 0x7C9]
	0x03B30FB8 LDR X21, [X21 + 0xEF0]
	0x03B30FBC MOV X19, X0
	0x03B30FC0 TBNZ X8, 0x0, 0x3B30FD8
	0x03B30FC4 ADRP X0, 0x629000
	0x03B30FC8 LDR X0, [X0 + 0xEF0]
	0x03B30FCC BL 0x1C16CF4
	0x03B30FD0 MOVZ W8, 0x1
	0x03B30FD4 STRB W8, [X20 + 0x7C9]
	0x03B30FD8 LDR X1, [X21]
	0x03B30FDC MOV X0, X19
	0x03B30FE0 LDP X20, X19, [X31 + 0x10]
	0x03B30FE4 LDP X30, X21, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x8B3000
	015 Move X20, 0x5C4000
	016 Move W8, [X21+1981]
	017 Move X20, [X20+1432]
	018 Move V11, V5
	019 Move V12, V4
	020 Move V13, V3
	021 Move V8, V2
	022 Move V9, V1
	023 Move V10, V0
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {34}
	029 Move X0, 0x5C4000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1981], W8
	034 Move X0, [X20]
	035 Move X20, [X19+32]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {132}
	048 Move X0, X19
	049 Move V0, V10
	050 Move V1, V9
	051 Move V2, V8
	052 Call XROrigin.MatchOriginUp, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {132}
	057 Move X0, [X19+32]
	058 Compare X0, 0
	059 JumpIfEqual {178}
	060 Move X1, X31
	061 Move [X31+12], S11
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {178}
	065 Move X1, X31
	066 Call Transform.get_forward, X0
	067 Move X20, 0x8A9000
	068 Move W8, [X20+3641]
	069 Move V14, V0
	070 Move V15, V1
	071 Move V11, V2
	072 Compare W8, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x5CB000
	075 Move X0, [X0+1208]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X20+3641], W8
	079 Move X8, 0x5CB000
	080 Move X8, [X8+1208]
	081 Multiply S0, S10, S10
	082 Multiply S1, S9, S9
	083 Add S0, S0, S1
	084 Move X8, [X8]
	085 Multiply S1, S8, S8
	086 Add S0, S1, S0
	087 Move X8, [X8+184]
	088 Move V2, [X8]
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 Multiply S1, S10, S14
	091 Multiply S2, S9, S15
	092 Multiply S3, S8, S11
	093 Add S1, S1, S2
	094 Add S1, S3, S1
	095 Multiply S2, S10, S1
	096 Multiply S3, S9, S1
	097 Multiply S1, S8, S1
	098 NotImplemented "Instruction FDIV not yet implemented."
	099 NotImplemented "Instruction FDIV not yet implemented."
	100 NotImplemented "Instruction FDIV not yet implemented."
	101 Subtract S14, S14, S2
	102 Subtract S15, S15, S3
	103 Subtract S11, S11, S0
	104 Move X20, 0x8A9000
	105 Move W8, [X20+1925]
	106 Compare W8, 0
	107 JumpIfNotEqual {113}
	108 Move X0, 0x5C4000
	109 Move X0, [X0+1448]
	110 Call 0x1C17CF4
	111 Move W8, 1
	112 Move [X20+1925], W8
	113 Move X8, 0x5C4000
	114 Move X8, [X8+1448]
	115 Move X0, [X8]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Multiply S0, S14, S14
	121 Multiply S1, S15, S15
	122 Move X8, -50614272
	123 Add S0, S0, S1
	124 Move V1, [X8+380]
	125 Multiply S2, S11, S11
	126 Add S0, S2, S0
	127 NotImplemented "Instruction FSQRT not yet implemented."
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 Move W0, W31
	133 Move X20, 0x8A9000
	134 Move W8, [X20+1923]
	135 Compare W8, 0
	136 JumpIfNotEqual {142}
	137 Move X0, 0x5C4000
	138 Move X0, [X0+1440]
	139 Call 0x1C17CF4
	140 Move W8, 1
	141 Move [X20+1923], W8
	142 Move X8, 0x5C4000
	143 Move X8, [X8+1440]
	144 Move X8, [X8]
	145 Move X8, [X8+184]
	146 Move S0, [X8]
	147 Move S1, [X8+4]
	148 Move V2, [X8+8]
	149 Move V5, [X31+12]
	150 Move V3, V13
	151 Move V4, V12
	152 Move X0, X31
	153 Move [X31], S10
	154 Move [X31+8], S9
	155 Move [X31+8], S8
	156 Call 0x1DD5D78
	157 Move V3, V0
	158 Move X0, X19
	159 Move V0, V10
	160 Move V1, V9
	161 Move V2, V8
	162 Call XROrigin.RotateAroundCameraPosition, X0, X1, V0
	163 Move W0, 1
	164 Move X20, [X31+96]
	165 Move X19, [X31+104]
	166 Move X30, [X31+80]
	167 Move X21, [X31+88]
	168 Move D9, [X31+64]
	169 Move D8, [X31+72]
	170 Move D11, [X31+48]
	171 Move D10, [X31+56]
	172 Move D13, [X31+32]
	173 Move D12, [X31+40]
	174 Move D15, [X31+16]
	175 Move D14, [X31+24]
	176 Add X31, X31, 112
	177 Return X0
	178 Call 0x1C17F20

Method: System.Boolean MatchOriginUpOriginForward(UnityEngine.Vector3 destinationUp, UnityEngine.Vector3 destinationForward)

Disassembly:
	0x03B30FE8 B 0x29AE60C
	0x03B30FEC STR X30, [X31 - 0x30]!
	0x03B30FF0 STP X22, X21, [X31 + 0x10]
	0x03B30FF4 STP X20, X19, [X31 + 0x20]
	0x03B30FF8 ADRP X21, 0x8B2000
	0x03B30FFC ADRP X22, 0x629000
	0x03B31000 LDRB W8, [X21 + 0x7CA]
	0x03B31004 B 0x3EB198C
	0x03B31008 MOV X19, X1
	0x03B3100C MOV X20, X0
	0x03B31010 TBNZ X8, 0x0, 0x3B31028
	0x03B31014 ADRP X0, 0x628000
	0x03B31018 LDR X0, [X0 + 0xEF8]
	0x03B3101C BL 0x1C16CF4
	0x03B31020 MOVZ W8, 0x1
	0x03B31024 STRB W8, [X21 + 0x7CA]
	0x03B31028 LDR X2, [X22]
	0x03B3102C MOV X0, X20
	0x03B31030 MOV X1, X19
	0x03B31034 LDP X20, X19, [X31 + 0x20]
	0x03B31038 LDP X22, X21, [X31 + 0x10]
	0x03B3103C LDR X30, [X31], #0x30
	0x03B31040 B 0x29AD964
	0x03B31044 STR X30, [X31 - 0x30]!
	0x03B31048 STP X22, X21, [X31 + 0x10]
	0x03B3104C STP X20, X19, [X31 + 0x20]
	0x03B31050 ADRP X21, 0x8B1000
	0x03B31054 ADRP X22, 0x628000
	0x03B31058 LDRB W8, [X21 + 0x7CB]
	0x03B3105C LDR X22, [X22 + 0xF00]
	0x03B31060 MOV X19, X1
	0x03B31064 MOV X20, X0
	0x03B31068 TBNZ X8, 0x0, 0x3B31080
	0x03B3106C ADRP X0, 0x628000
	0x03B31070 LDR X0, [X0 + 0xF00]
	0x03B31074 BL 0x1C16CF4
	0x03B31078 MOVZ W8, 0x1
	0x03B3107C STRB W8, [X21 + 0x7CB]
	0x03B31080 LDR X2, [X22]
	0x03B31084 MOV X0, X20
	0x03B31088 MOV X1, X19
	0x03B3108C LDP X20, X19, [X31 + 0x20]
	0x03B31090 LDP X22, X21, [X31 + 0x10]
	0x03B31094 LDR X30, [X31], #0x30
	0x03B31098 B 0x29AD994
	0x03B3109C STP X30, X21, [X31 - 0x20]!
	0x03B310A0 STP X20, X19, [X31 + 0x10]
	0x03B310A4 ADRP X20, 0x8B1000
	0x03B310A8 ADRP X21, 0x628000
	0x03B310AC LDRB W8, [X20 + 0x7CC]
	0x03B310B0 LDR X21, [X21 + 0xF08]
	0x03B310B4 MOV X19, X0
	0x03B310B8 TBNZ X8, 0x0, 0x3B310D0
	0x03B310BC ADRP X0, 0x628000
	0x03B310C0 LDR X0, [X0 + 0xF08]
	0x03B310C4 BL 0x1C16CF4
	0x03B310C8 MOVZ W8, 0x1
	0x03B310CC STRB W8, [X20 + 0x7CC]
	0x03B310D0 LDR X1, [X21]
	0x03B310D4 MOV X0, X19
	0x03B310D8 LDP X20, X19, [X31 + 0x10]
	0x03B310DC LDP X30, X21, [X31], #0x20
	0x03B310E0 B 0x29AE7AC
	0x03B310E4 STR D8, [X31 - 0x30]!
	0x03B310E8 STP X30, X21, [X31 + 0x10]
	0x03B310EC STP X20, X19, [X31 + 0x20]
	0x03B310F0 ADRP X20, 0x8B1000
	0x03B310F4 ADRP X21, 0x628000
	0x03B310F8 LDRB W8, [X20 + 0x7CD]
	0x03B310FC LDR X21, [X21 + 0xF10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x8B2000
	013 Move X20, 0x5C3000
	014 Move W8, [X21+1982]
	015 Call 0x3EB272C
	016 Return X0
	017 Move V11, V5
	018 Move V12, V4
	019 Move V13, V3
	020 Move V8, V2
	021 Move V9, V1
	022 Move V10, V0
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x5C3000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1982], W8
	033 Move X0, [X20]
	034 Move X20, [X19+56]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {80}
	047 Move X0, X19
	048 Move V0, V10
	049 Move V1, V9
	050 Move V2, V8
	051 Call XROrigin.MatchOriginUp, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {80}
	056 Move X0, [X19+56]
	057 Compare X0, 0
	058 JumpIfEqual {93}
	059 Move X1, X31
	060 Call GameObject.get_transform, X0
	061 Compare X0, 0
	062 JumpIfEqual {93}
	063 Move X1, X31
	064 Call Transform.get_forward, X0
	065 Move V3, V13
	066 Move V4, V12
	067 Move V5, V11
	068 Move X0, X31
	069 Move [X31+4], S9
	070 Move [X31+12], S8
	071 Move [X31], S10
	072 Call 0x1DD5D78
	073 Move V3, V0
	074 Move X0, X19
	075 Move V0, V10
	076 Move V1, V9
	077 Move V2, V8
	078 Call XROrigin.RotateAroundCameraPosition, X0, X1, V0
	079 Move W0, 1
	080 Move W0, W31
	081 Move X20, [X31+80]
	082 Move X19, [X31+88]
	083 Move X30, [X31+64]
	084 Move X21, [X31+72]
	085 Move D9, [X31+48]
	086 Move D8, [X31+56]
	087 Move D11, [X31+32]
	088 Move D10, [X31+40]
	089 Move D13, [X31+16]
	090 Move D12, [X31+24]
	091 Add X31, X31, 96
	092 Return X0
	093 Call 0x1C17F20

Method: System.Boolean MoveCameraToWorldLocation(UnityEngine.Vector3 desiredWorldLocation)

Disassembly:
	0x03B31100 MOV V8.16B, V0.16B
	0x03B31104 MOV X19, X0
	0x03B31108 TBNZ X8, 0x0, 0x3B31120
	0x03B3110C ADRP X0, 0x628000
	0x03B31110 LDR X0, [X0 + 0xF10]
	0x03B31114 BL 0x1C16CF4
	0x03B31118 MOVZ W8, 0x1
	0x03B3111C STRB W8, [X20 + 0x7CD]
	0x03B31120 LDR X1, [X21]
	0x03B31124 MOV X0, X19
	0x03B31128 LDP X20, X19, [X31 + 0x20]
	0x03B3112C LDP X30, X21, [X31 + 0x10]
	0x03B31130 MOV V0.16B, V8.16B
	0x03B31134 LDR V8, [X31], #0x30
	0x03B31138 B 0x29ADAEC
	0x03B3113C STR X30, [X31 - 0x30]!
	0x03B31140 STP X22, X21, [X31 + 0x10]
	0x03B31144 STP X20, X19, [X31 + 0x20]
	0x03B31148 ADRP X21, 0x8B1000
	0x03B3114C ADRP X22, 0x628000
	0x03B31150 LDRB W8, [X21 + 0x7CE]
	0x03B31154 LDR X22, [X22 + 0xF18]
	0x03B31158 MOV X19, X1
	0x03B3115C MOV X20, X0
	0x03B31160 TBNZ X8, 0x0, 0x3B31178
	0x03B31164 ADRP X0, 0x628000
	0x03B31168 LDR X0, [X0 + 0xF18]
	0x03B3116C BL 0x1C16CF4
	0x03B31170 MOVZ W8, 0x1
	0x03B31174 STRB W8, [X21 + 0x7CE]
	0x03B31178 LDR X2, [X22]
	0x03B3117C MOV X0, X20
	0x03B31180 MOV X1, X19
	0x03B31184 LDP X20, X19, [X31 + 0x20]
	0x03B31188 LDP X22, X21, [X31 + 0x10]
	0x03B3118C LDR X30, [X31], #0x30
	0x03B31190 B 0x29ADB1C
	0x03B31194 STP D9, D8, [X31 - 0x30]!
	0x03B31198 STR X30, [X31 + 0x10]
	0x03B3119C STP X20, X19, [X31 + 0x20]
	0x03B311A0 ADRP X20, 0x8B1000
	0x03B311A4 LDRB W8, [X20 + 0x7CF]
	0x03B311A8 MOV V8.16B, V0.16B
	0x03B311AC MOV X19, X0
	0x03B311B0 TBNZ X8, 0x0, 0x3B311C8
	0x03B311B4 ADRP X0, 0x628000
	0x03B311B8 LDR X0, [X0 + 0xF20]
	0x03B311BC BL 0x1C16CF4
	0x03B311C0 MOVZ W8, 0x1
	0x03B311C4 STRB W8, [X20 + 0x7CF]
	0x03B311C8 ADRP X20, 0x8A8000
	0x03B311CC LDRB W8, [X20 + 0x5D7]
	0x03B311D0 CBNZ W8, 0x3B311E8
	0x03B311D4 ADRP X0, 0x5C2000
	0x03B311D8 LDR X0, [X0 + 0x5A8]
	0x03B311DC BL 0x1C16CF4
	0x03B311E0 MOVZ W8, 0x1
	0x03B311E4 STRB W8, [X20 + 0x5D7]
	0x03B311E8 ADRP X8, 0x5C2000
	0x03B311EC LDR X8, [X8 + 0x5A8]
	0x03B311F0 LDR X0, [X8]
	0x03B311F4 LDR W8, [X0 + 0xE0]
	0x03B311F8 CBNZ W8, 0x3B31200
	0x03B311FC BL 0x1C16DFC
	0x03B31200 ADRP X20, 0x628000
	0x03B31204 LDR X20, [X20 + 0xF20]
	0x03B31208 FCVT S9, S8
	0x03B3120C ADD X0, X31, 0x18
	0x03B31210 MOV V0.16B, V9.16B
	0x03B31214 BL 0x3EB1C00
	0x03B31218 FCMP S8, 0x0
	0x03B3121C B.GE 0x3B31238
	0x03B31220 FMOV D1, -0.5
	0x03B31224 FCMP D0, D1
	0x03B31228 B.NE 0x3B31260
	0x03B3122C LDR V0, [X31 + 0x18]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+184], X21
	010 Move [X31+192], X20
	011 Move [X31+200], X19
	012 Move X21, 0x8B2000
	013 Move X20, 0x5C3000
	014 Move W8, [X21+1983]
	015 Move X20, [X20+1432]
	016 Move V10, V2
	017 Move V9, V1
	018 Move V8, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x5C3000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1983], W8
	029 Move X0, [X20]
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move [X31+96], V0
	032 Move [X31+104], V0
	033 Move [X31+64], V0
	034 Move [X31+72], V0
	035 Move W8, [X0+224]
	036 Move X20, [X19+32]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move W20, W0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {89}
	049 Move X0, [X19+32]
	050 Compare X0, 0
	051 JumpIfEqual {103}
	052 Move X1, X31
	053 Call Component.get_transform, X0
	054 Compare X0, 0
	055 JumpIfEqual {103}
	056 Move X1, X31
	057 Call Transform.get_rotation, X0
	058 Add X8, X31, 0
	059 Move X0, X31
	060 Call Matrix4x4.Rotate, X0
	061 Move V0, [X31]
	062 Move V1, [X31+16]
	063 Move V2, [X31+32]
	064 Move V3, [X31+48]
	065 Move X0, X19
	066 Move [X31+64], V0
	067 Move [X31+72], V1
	068 Move [X31+96], V2
	069 Move [X31+104], V3
	070 Call XROrigin.get_OriginInCameraSpacePos, X0
	071 Add X0, X31, 64
	072 Move X1, X31
	073 Call Matrix4x4.MultiplyPoint3x4, X0, X1
	074 Move X0, [X19+56]
	075 Compare X0, 0
	076 JumpIfEqual {103}
	077 Move X1, X31
	078 Move V11, V0
	079 Move V12, V1
	080 Move V13, V2
	081 Call GameObject.get_transform, X0
	082 Compare X0, 0
	083 JumpIfEqual {103}
	084 Add S2, S10, S13
	085 Add S1, S9, S12
	086 Add S0, S8, S11
	087 Move X1, X31
	088 Call Transform.set_position, X0, X1
	089 NotImplemented "Instruction ORN not yet implemented."
	090 Move X20, [X31+192]
	091 Move X19, [X31+200]
	092 Move X30, [X31+176]
	093 Move X21, [X31+184]
	094 Move D9, [X31+160]
	095 Move D8, [X31+168]
	096 Move D11, [X31+144]
	097 Move D10, [X31+152]
	098 Move D13, [X31+128]
	099 Move D12, [X31+136]
	100 And W0, W8, 1
	101 Add X31, X31, 208
	102 Return X0
	103 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x03B31230 FMOV D1, -1
	0x03B31234 B 0x3B3124C
	0x03B31238 FMOV D1, 0.5
	0x03B3123C FCMP D0, D1
	0x03B31240 B.NE 0x3B3126C
	0x03B31244 LDR V0, [X31 + 0x18]
	0x03B31248 FMOV D1, 1
	0x03B3124C FCVTZS X8, D0
	0x03B31250 FADD D1, D0, D1
	0x03B31254 ANDS X31, X8, 0x1
	0x03B31258 FCSEL D0, D0, D1, EQ
	0x03B3125C B 0x3B31274
	0x03B31260 FADD D0, D9, D1
	0x03B31264 FRINTP D0, D0
	0x03B31268 B 0x3B31274
	0x03B3126C FADD D0, D9, D1
	0x03B31270 FRINTM D0, D0
	0x03B31274 MOVZ X9, 0x7FF00000
	0x03B31278 LDR X2, [X20]
	0x03B3127C MOV X0, X19
	0x03B31280 LDP X20, X19, [X31 + 0x20]
	0x03B31284 LDR X30, [X31 + 0x10]
	0x03B31288 FMOV D1, X9
	0x03B3128C FCVTZS W8, D0
	0x03B31290 FCMP D0, D1
	0x03B31294 MOVZ W9, 0x80000000
	0x03B31298 CSEL W1, W9, W8, EQ
	0x03B3129C LDP D9, D8, [X31], #0x30
	0x03B312A0 B 0x29AE370
	0x03B312A4 STP X30, X21, [X31 - 0x20]!
	0x03B312A8 STP X20, X19, [X31 + 0x10]
	0x03B312AC ADRP X20, 0x8B1000
	0x03B312B0 ADRP X21, 0x628000
	0x03B312B4 LDRB W8, [X20 + 0x7D0]
	0x03B312B8 LDR X21, [X21 + 0xF28]
	0x03B312BC MOV X19, X0
	0x03B312C0 TBNZ X8, 0x0, 0x3B312D8
	0x03B312C4 ADRP X0, 0x628000
	0x03B312C8 LDR X0, [X0 + 0xF28]
	0x03B312CC BL 0x1C16CF4
	0x03B312D0 MOVZ W8, 0x1
	0x03B312D4 STRB W8, [X20 + 0x7D0]
	0x03B312D8 LDR X1, [X21]
	0x03B312DC MOV X0, X19
	0x03B312E0 LDP X20, X19, [X31 + 0x10]
	0x03B312E4 LDP X30, X21, [X31], #0x20
	0x03B312E8 B 0x29AE46C
	0x03B312EC STR X30, [X31 - 0x30]!
	0x03B312F0 STP X22, X21, [X31 + 0x10]
	0x03B312F4 STP X20, X19, [X31 + 0x20]
	0x03B312F8 ADRP X21, 0x8B1000
	0x03B312FC ADRP X22, 0x628000
	0x03B31300 LDRB W8, [X21 + 0x7D1]
	0x03B31304 LDR X22, [X22 + 0xF30]
	0x03B31308 MOV W19, W1
	0x03B3130C MOV X20, X0
	0x03B31310 TBNZ X8, 0x0, 0x3B31328
	0x03B31314 ADRP X0, 0x628000
	0x03B31318 LDR X0, [X0 + 0xF30]
	0x03B3131C BL 0x1C16CF4
	0x03B31320 MOVZ W8, 0x1
	0x03B31324 STRB W8, [X21 + 0x7D1]
	0x03B31328 LDR X2, [X22]
	0x03B3132C MOV X0, X20
	0x03B31330 MOV W1, W19
	0x03B31334 LDP X20, X19, [X31 + 0x20]
	0x03B31338 LDP X22, X21, [X31 + 0x10]
	0x03B3133C LDR X30, [X31], #0x30
	0x03B31340 B 0x29AD7DC
	0x03B31344 STR X30, [X31 - 0x30]!
	0x03B31348 STP X22, X21, [X31 + 0x10]
	0x03B3134C STP X20, X19, [X31 + 0x20]
	0x03B31350 ADRP X21, 0x8B1000
	0x03B31354 ADRP X22, 0x628000
	0x03B31358 LDRB W8, [X21 + 0x7D2]
	0x03B3135C LDR X22, [X22 + 0xF38]
	0x03B31360 MOV X19, X1
	0x03B31364 MOV X20, X0
	0x03B31368 TBNZ X8, 0x0, 0x3B31380
	0x03B3136C ADRP X0, 0x628000
	0x03B31370 LDR X0, [X0 + 0xF38]
	0x03B31374 BL 0x1C16CF4
	0x03B31378 MOVZ W8, 0x1
	0x03B3137C STRB W8, [X21 + 0x7D2]
	0x03B31380 LDR X2, [X22]
	0x03B31384 MOV X0, X20
	0x03B31388 MOV X1, X19
	0x03B3138C LDP X20, X19, [X31 + 0x20]
	0x03B31390 LDP X22, X21, [X31 + 0x10]
	0x03B31394 LDR X30, [X31], #0x30
	0x03B31398 B 0x29AD80C
	0x03B3139C STP X30, X21, [X31 - 0x20]!
	0x03B313A0 STP X20, X19, [X31 + 0x10]
	0x03B313A4 ADRP X20, 0x8B1000
	0x03B313A8 ADRP X21, 0x628000
	0x03B313AC LDRB W8, [X20 + 0x7D3]
	0x03B313B0 LDR X21, [X21 + 0xF40]
	0x03B313B4 MOV X19, X0
	0x03B313B8 TBNZ X8, 0x0, 0x3B313D0
	0x03B313BC ADRP X0, 0x628000
	0x03B313C0 LDR X0, [X0 + 0xF40]
	0x03B313C4 BL 0x1C16CF4
	0x03B313C8 MOVZ W8, 0x1
	0x03B313CC STRB W8, [X20 + 0x7D3]
	0x03B313D0 LDR X1, [X21]
	0x03B313D4 MOV X0, X19
	0x03B313D8 LDP X20, X19, [X31 + 0x10]
	0x03B313DC LDP X30, X21, [X31], #0x20
	0x03B313E0 B 0x29AE60C
	0x03B313E4 STR X30, [X31 - 0x30]!
	0x03B313E8 STP X22, X21, [X31 + 0x10]
	0x03B313EC STP X20, X19, [X31 + 0x20]
	0x03B313F0 ADRP X21, 0x8B1000
	0x03B313F4 ADRP X22, 0x628000
	0x03B313F8 LDRB W8, [X21 + 0x7D4]
	0x03B313FC LDR X22, [X22 + 0xF48]
	0x03B31400 MOV X19, X1
	0x03B31404 MOV X20, X0
	0x03B31408 TBNZ X8, 0x0, 0x3B31420
	0x03B3140C ADRP X0, 0x628000
	0x03B31410 LDR X0, [X0 + 0xF48]
	0x03B31414 BL 0x1C16CF4
	0x03B31418 MOVZ W8, 0x1
	0x03B3141C STRB W8, [X21 + 0x7D4]
	0x03B31420 LDR X2, [X22]
	0x03B31424 MOV X0, X20
	0x03B31428 MOV X1, X19
	0x03B3142C LDP X20, X19, [X31 + 0x20]
	0x03B31430 LDP X22, X21, [X31 + 0x10]
	0x03B31434 LDR X30, [X31], #0x30
	0x03B31438 B 0x29AD964
	0x03B3143C STR X30, [X31 - 0x30]!
	0x03B31440 STP X22, X21, [X31 + 0x10]
	0x03B31444 STP X20, X19, [X31 + 0x20]
	0x03B31448 ADRP X21, 0x8B1000
	0x03B3144C ADRP X22, 0x628000
	0x03B31450 LDRB W8, [X21 + 0x7D5]
	0x03B31454 LDR X22, [X22 + 0xF50]
	0x03B31458 MOV X19, X1
	0x03B3145C MOV X20, X0
	0x03B31460 TBNZ X8, 0x0, 0x3B31478
	0x03B31464 ADRP X0, 0x628000
	0x03B31468 LDR X0, [X0 + 0xF50]
	0x03B3146C BL 0x1C16CF4
	0x03B31470 MOVZ W8, 0x1
	0x03B31474 STRB W8, [X21 + 0x7D5]
	0x03B31478 LDR X2, [X22]
	0x03B3147C MOV X0, X20
	0x03B31480 MOV X1, X19
	0x03B31484 LDP X20, X19, [X31 + 0x20]
	0x03B31488 LDP X22, X21, [X31 + 0x10]
	0x03B3148C LDR X30, [X31], #0x30
	0x03B31490 B 0x29AD994
	0x03B31494 STR X30, [X31 - 0x40]!
	0x03B31498 STP X24, X23, [X31 + 0x10]
	0x03B3149C STP X22, X21, [X31 + 0x20]
	0x03B314A0 STP X20, X19, [X31 + 0x30]
	0x03B314A4 ADRP X20, 0x8B1000
	0x03B314A8 ADRP X23, 0x628000
	0x03B314AC LDRB W8, [X20 + 0x7D6]
	0x03B314B0 LDR X23, [X23 + 0xF58]
	0x03B314B4 MOV X19, X0
	0x03B314B8 TBNZ X8, 0x0, 0x3B314DC
	0x03B314BC ADRP X0, 0x628000
	0x03B314C0 LDR X0, [X0 + 0xF60]
	0x03B314C4 BL 0x1C16CF4
	0x03B314C8 ADRP X0, 0x628000
	0x03B314CC LDR X0, [X0 + 0xF58]
	0x03B314D0 BL 0x1C16CF4
	0x03B314D4 MOVZ W8, 0x1
	0x03B314D8 STRB W8, [X20 + 0x7D6]
	0x03B314DC LDR X8, [X23]
	0x03B314E0 ADRP X24, 0x628000
	0x03B314E4 LDR X8, [X8 + 0xB8]
	0x03B314E8 LDR X20, [X8]
	0x03B314EC LDR X24, [X24 + 0xF60]
	0x03B314F0 MOV X0, X20
	0x03B314F4 MOV X1, X19
	0x03B314F8 MOV X2, X31
	0x03B314FC BL 0x33C0DE4
	0x03B31500 CBZ X0, 0x3B31520
	0x03B31504 LDR X22, [X24]
	0x03B31508 MOV X21, X0
	0x03B3150C MOV X1, X22
	0x03B31510 BL 0x1C16E00
	0x03B31514 MOV X1, X0
	0x03B31518 CBNZ X0, 0x3B31524
	0x03B3151C B 0x3B31554
	0x03B31520 MOV X1, X31
	0x03B31524 LDR X8, [X23]
	0x03B31528 MOV X2, X20
	0x03B3152C LDR X0, [X8 + 0xB8]
	0x03B31530 BL 0x1C24138
	0x03B31534 CMP X20, X0
	0x03B31538 MOV X20, X0
	0x03B3153C B.NE 0x3B314F0
	0x03B31540 LDP X20, X19, [X31 + 0x30]
	0x03B31544 LDP X22, X21, [X31 + 0x20]
	0x03B31548 LDP X24, X23, [X31 + 0x10]
	0x03B3154C LDR X30, [X31], #0x40
	0x03B31550 RET
	0x03B31554 MOV X0, X21
	0x03B31558 MOV X1, X22
	0x03B3155C BL 0x1C171E0
	0x03B31560 STR X30, [X31 - 0x40]!
	0x03B31564 STP X24, X23, [X31 + 0x10]
	0x03B31568 STP X22, X21, [X31 + 0x20]
	0x03B3156C STP X20, X19, [X31 + 0x30]
	0x03B31570 ADRP X20, 0x8B1000
	0x03B31574 ADRP X23, 0x628000
	0x03B31578 LDRB W8, [X20 + 0x7D7]
	0x03B3157C LDR X23, [X23 + 0xF58]
	0x03B31580 MOV X19, X0
	0x03B31584 TBNZ X8, 0x0, 0x3B315A8
	0x03B31588 ADRP X0, 0x628000
	0x03B3158C LDR X0, [X0 + 0xF60]
	0x03B31590 BL 0x1C16CF4
	0x03B31594 ADRP X0, 0x628000
	0x03B31598 LDR X0, [X0 + 0xF58]
	0x03B3159C BL 0x1C16CF4
	0x03B315A0 MOVZ W8, 0x1
	0x03B315A4 STRB W8, [X20 + 0x7D7]
	0x03B315A8 LDR X8, [X23]
	0x03B315AC ADRP X24, 0x628000
	0x03B315B0 LDR X8, [X8 + 0xB8]
	0x03B315B4 LDR X20, [X8]
	0x03B315B8 LDR X24, [X24 + 0xF60]
	0x03B315BC MOV X0, X20
	0x03B315C0 MOV X1, X19
	0x03B315C4 MOV X2, X31
	0x03B315C8 BL 0x33C0FDC
	0x03B315CC CBZ X0, 0x3B315EC
	0x03B315D0 LDR X22, [X24]
	0x03B315D4 MOV X21, X0
	0x03B315D8 MOV X1, X22
	0x03B315DC BL 0x1C16E00
	0x03B315E0 MOV X1, X0
	0x03B315E4 CBNZ X0, 0x3B315F0
	0x03B315E8 B 0x3B31620
	0x03B315EC MOV X1, X31
	0x03B315F0 LDR X8, [X23]
	0x03B315F4 MOV X2, X20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X20, 0x8B2000
	010 Move X22, 0x5C3000
	011 Move W8, [X20+1984]
	012 Move X22, [X22+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {53}
	018 Move X0, 0x629000
	019 Move X0, [X0+3752]
	020 Call 0x1C17CF4
	021 Move X0, 0x629000
	022 Move X0, [X0+3760]
	023 Call 0x1C17CF4
	024 Move X0, 0x5C3000
	025 Move X0, [X0+2600]
	026 Call 0x1C17CF4
	027 Move X0, 0x5C3000
	028 Move X0, [X0+2648]
	029 Call 0x1C17CF4
	030 Move X0, 0x5C3000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0x5EB000
	034 Move X0, [X0+1552]
	035 Call 0x1C17CF4
	036 Move X0, 0x629000
	037 Move X0, [X0+3768]
	038 Call 0x1C17CF4
	039 Move X0, 0x629000
	040 Move X0, [X0+3776]
	041 Call 0x1C17CF4
	042 Move X0, 0x629000
	043 Move X0, [X0+3784]
	044 Call 0x1C17CF4
	045 Move X0, 0x629000
	046 Move X0, [X0+3792]
	047 Call 0x1C17CF4
	048 Move X0, 0x629000
	049 Move X0, [X0+3800]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+1984], W8
	053 Move X0, [X22]
	054 Move X20, [X19+64]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X23, 0x5C3000
	060 Move X23, [X23+2600]
	061 Move X0, X20
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Equality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {84}
	069 Move X0, [X23]
	070 Move X20, 0x629000
	071 Move W8, [X0+224]
	072 Move X20, [X20+3768]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, [X20]
	077 Move X1, X19
	078 Move X2, X31
	079 Call Debug.LogWarning, X0, X1
	080 Move X0, X19
	081 Move X1, X31
	082 Call Component.get_gameObject, X0
	083 Move [X19+64], X0
	084 Move X0, [X22]
	085 Move X20, [X19+32]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X24, 0x5C3000
	091 Move X21, 0x629000
	092 Move X24, [X24+2648]
	093 Move X21, [X21+3792]
	094 Move X0, X20
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Equality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {131}
	102 Move X0, X31
	103 Call Camera.get_main
	104 Move X8, [X22]
	105 Move X20, X0
	106 Move W9, [X8+224]
	107 Compare W9, 0
	108 JumpIfNotEqual {111}
	109 Move X0, X8
	110 Call 0x1C17DFC
	111 Move X0, X20
	112 Move X1, X31
	113 Move X2, X31
	114 Call Object.op_Inequality, X0, X1
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {120}
	119 Move [X19+32], X20
	120 Move X0, [X23]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move X8, 0x629000
	126 Move X8, [X8+3784]
	127 Move X1, X19
	128 Move X2, X31
	129 Move X0, [X8]
	130 Call Debug.LogWarning, X0, X1
	131 Move X0, [X24]
	132 Call 0x1C17F10
	133 Move X1, [X21]
	134 Move X2, X31
	135 Move X20, X0
	136 Call GameObject..ctor, X0, X1
	137 Compare X20, 0
	138 JumpIfEqual {286}
	139 Move X0, X20
	140 Move X1, X31
	141 Call GameObject.get_transform, X0
	142 Move X20, X0
	143 Move [X19+40], X0
	144 Move X0, X19
	145 Move X1, X31
	146 Call Component.get_transform, X0
	147 Compare X20, 0
	148 JumpIfEqual {286}
	149 Move X21, 0x5EB000
	150 Move X21, [X21+1552]
	151 Move X1, X0
	152 Move X0, X20
	153 Move W2, W31
	154 Move X3, X31
	155 Call Transform.SetParent, X0, X1, X2
	156 Move X0, [X21]
	157 Move X20, [X19+40]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Add X8, X31, 32
	163 Move X0, X31
	164 Call Pose.get_identity
	165 Move V0, [X31+2]
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 Add X1, X31, 0
	168 Move X0, X20
	169 Move [X31], V0
	170 Move [X31+12], V1
	171 Call TransformExtensions.SetLocalPose, X0, X1
	172 Move X21, 0x8A8000
	173 Move W8, [X21+2139]
	174 Move X20, [X19+40]
	175 Compare W8, 0
	176 JumpIfNotEqual {182}
	177 Move X0, 0x5C3000
	178 Move X0, [X0+1440]
	179 Call 0x1C17CF4
	180 Move W8, 1
	181 Move [X21+2139], W8
	182 Compare X20, 0
	183 JumpIfEqual {286}
	184 Move X8, 0x5C3000
	185 Move X8, [X8+1440]
	186 Move X0, X20
	187 Move X1, X31
	188 Move X8, [X8]
	189 Move X8, [X8+184]
	190 Move S1, [X8+16]
	191 Move S2, [X8+20]
	192 Move V0, [X8+12]
	193 Call Transform.set_localScale, X0, X1
	194 Move X0, [X22]
	195 Move X20, [X19+32]
	196 Move W8, [X0+224]
	197 Compare W8, 0
	198 JumpIfNotEqual {200}
	199 Call 0x1C17DFC
	200 Move X0, X20
	201 Move X1, X31
	202 Call Object.op_Implicit, X0
	203 Move TEMP, X0
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfNotEqual {277}
	207 Move X0, [X19+32]
	208 Compare X0, 0
	209 JumpIfEqual {286}
	210 Move X8, 0x629000
	211 Move X8, [X8+3760]
	212 Move X1, [X8]
	213 Call 0x21A4894, X0
	214 Move X8, [X19+32]
	215 Compare X8, 0
	216 JumpIfEqual {286}
	217 Move X9, 0x629000
	218 Move X9, [X9+3752]
	219 Move X21, X0
	220 Move X0, X8
	221 Move X1, [X9]
	222 Call 0x21A4894, X0
	223 Move X8, [X22]
	224 Move X20, X0
	225 Move W9, [X8+224]
	226 Compare W9, 0
	227 JumpIfNotEqual {230}
	228 Move X0, X8
	229 Call 0x1C17DFC
	230 Move X0, X21
	231 Move X1, X31
	232 Move X2, X31
	233 Call Object.op_Equality, X0, X1
	234 Move TEMP, X0
	235 And TEMP, TEMP, 1
	236 Compare TEMP, 1
	237 JumpIfNotEqual {277}
	238 Move X0, [X22]
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {243}
	242 Call 0x1C17DFC
	243 Move X0, X20
	244 Move X1, X31
	245 Move X2, X31
	246 Call Object.op_Equality, X0, X1
	247 Move TEMP, X0
	248 And TEMP, TEMP, 1
	249 Compare TEMP, 1
	250 JumpIfNotEqual {277}
	251 Move X0, [X19+32]
	252 Compare X0, 0
	253 JumpIfEqual {286}
	254 Move X1, X31
	255 Call Object.get_name, X0
	256 Move X8, 0x629000
	257 Move X8, [X8+3776]
	258 Move X9, 0x629000
	259 Move X9, [X9+3800]
	260 Move X1, X0
	261 Move X8, [X8]
	262 Move X3, X31
	263 Move X2, [X9]
	264 Move X0, X8
	265 Call String.Concat, X0, X1, X2
	266 Move X8, [X23]
	267 Move X20, X0
	268 Move W9, [X8+224]
	269 Compare W9, 0
	270 JumpIfNotEqual {273}
	271 Move X0, X8
	272 Call 0x1C17DFC
	273 Move X0, X20
	274 Move X1, X19
	275 Move X2, X31
	276 Call Debug.LogWarning, X0, X1
	277 Move X20, [X31+112]
	278 Move X19, [X31+120]
	279 Move X22, [X31+96]
	280 Move X21, [X31+104]
	281 Move X24, [X31+80]
	282 Move X23, [X31+88]
	283 Move X30, [X31+64]
	284 Add X31, X31, 128
	285 Return 
	286 Call 0x1C17F20

Method: UnityEngine.Pose GetCameraOriginPose()

Disassembly:
	0x03B315F8 LDR X0, [X8 + 0xB8]
	0x03B315FC BL 0x1C24138
	0x03B31600 CMP X20, X0
	0x03B31604 MOV X20, X0
	0x03B31608 B.NE 0x3B315BC
	0x03B3160C LDP X20, X19, [X31 + 0x30]
	0x03B31610 LDP X22, X21, [X31 + 0x20]
	0x03B31614 LDP X24, X23, [X31 + 0x10]
	0x03B31618 LDR X30, [X31], #0x40
	0x03B3161C RET
	0x03B31620 MOV X0, X21
	0x03B31624 MOV X1, X22
	0x03B31628 BL 0x1C171E0
	0x03B3162C STP X30, X21, [X31 - 0x20]!
	0x03B31630 STP X20, X19, [X31 + 0x10]
	0x03B31634 ADRP X20, 0x8B1000
	0x03B31638 ADRP X21, 0x628000
	0x03B3163C LDRB W8, [X20 + 0x7D8]
	0x03B31640 LDR X21, [X21 + 0xF58]
	0x03B31644 MOV X19, X0
	0x03B31648 TBNZ X8, 0x0, 0x3B31660
	0x03B3164C ADRP X0, 0x628000
	0x03B31650 LDR X0, [X0 + 0xF58]
	0x03B31654 BL 0x1C16CF4
	0x03B31658 MOVZ W8, 0x1
	0x03B3165C STRB W8, [X20 + 0x7D8]
	0x03B31660 LDR X8, [X21]
	0x03B31664 LDR X8, [X8 + 0xB8]
	0x03B31668 LDR X8, [X8]
	0x03B3166C CBZ X8, 0x3B3168C
	0x03B31670 LDR X3, [X8 + 0x18]
	0x03B31674 LDR X0, [X8 + 0x40]
	0x03B31678 LDR X2, [X8 + 0x28]
	0x03B3167C MOV X1, X19
	0x03B31680 LDP X20, X19, [X31 + 0x10]
	0x03B31684 LDP X30, X21, [X31], #0x20
	0x03B31688 BR X3
	0x03B3168C LDP X20, X19, [X31 + 0x10]
	0x03B31690 LDP X30, X21, [X31], #0x20
	0x03B31694 RET
	0x03B31698 MOV X1, X31
	0x03B3169C B 0x3C36D2C
	0x03B316A0 STP X30, X21, [X31 - 0x20]!
	0x03B316A4 STP X20, X19, [X31 + 0x10]
	0x03B316A8 ADRP X20, 0x8B1000
	0x03B316AC ADRP X21, 0x628000
	0x03B316B0 LDRB W8, [X20 + 0x7D9]
	0x03B316B4 LDR X21, [X21 + 0xF68]
	0x03B316B8 MOV X19, X0
	0x03B316BC TBNZ X8, 0x0, 0x3B316D4
	0x03B316C0 ADRP X0, 0x628000
	0x03B316C4 LDR X0, [X0 + 0xF68]
	0x03B316C8 BL 0x1C16CF4
	0x03B316CC MOVZ W8, 0x1
	0x03B316D0 STRB W8, [X20 + 0x7D9]
	0x03B316D4 LDR X1, [X21]
	0x03B316D8 MOV X0, X19
	0x03B316DC LDP X20, X19, [X31 + 0x10]
	0x03B316E0 LDP X30, X21, [X31], #0x20
	0x03B316E4 B 0x25DDE14
	0x03B316E8 RET
	0x03B316EC STP X30, X21, [X31 - 0x20]!
	0x03B316F0 STP X20, X19, [X31 + 0x10]
	0x03B316F4 ADRP X20, 0x8B1000
	0x03B316F8 ADRP X21, 0x628000
	0x03B316FC LDRB W8, [X20 + 0x7DA]
	0x03B31700 LDR X21, [X21 + 0xF70]
	0x03B31704 MOV X19, X0
	0x03B31708 TBNZ X8, 0x0, 0x3B31720
	0x03B3170C ADRP X0, 0x628000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X21, 0x8B2000
	008 Move X22, 0x5EB000
	009 Move X19, X8
	010 Move W8, [X21+1985]
	011 Move X22, [X22+1552]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5C3000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x5EB000
	021 Move X0, [X0+1552]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1985], W8
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Add X8, X31, 32
	031 Move X0, X31
	032 Call Pose.get_identity
	033 Move V0, [X31+2]
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 Move [X31+4], V0
	036 Move [X31+76], V1
	037 Move X0, [X20+32]
	038 Compare X0, 0
	039 JumpIfEqual {83}
	040 Move X1, X31
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {83}
	044 Move X20, 0x5C3000
	045 Move X20, [X20+1432]
	046 Move X1, X31
	047 Call Transform.get_parent, X0
	048 Move X8, [X20]
	049 Move X20, X0
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X31
	057 Call Object.op_Implicit, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {72}
	062 Move V0, [X31+4]
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 Add X8, X31, 32
	065 Add X1, X31, 0
	066 Move X0, X20
	067 Move [X31], V0
	068 Move [X31+12], V1
	069 Call TransformExtensions.TransformPose, X0, X1
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 Move V1, [X31+2]
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 Move V1, [X31+4]
	074 Move [X19+12], V0
	075 Move [X19], V1
	076 Move X20, [X31+128]
	077 Move X19, [X31+136]
	078 Move X22, [X31+112]
	079 Move X21, [X31+120]
	080 Move X30, [X31+96]
	081 Add X31, X31, 144
	082 Return X0
	083 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03B31710 LDR X0, [X0 + 0xF70]
	0x03B31714 BL 0x1C16CF4
	0x03B31718 MOVZ W8, 0x1
	0x03B3171C STRB W8, [X20 + 0x7DA]
	0x03B31720 LDR X1, [X21]
	0x03B31724 MOV X0, X19
	0x03B31728 LDP X20, X19, [X31 + 0x10]
	0x03B3172C LDP X30, X21, [X31], #0x20
	0x03B31730 B 0x25DDD2C
	0x03B31734 STR X30, [X31 - 0x20]!
	0x03B31738 STP X20, X19, [X31 + 0x10]
	0x03B3173C MOV W19, W1
	0x03B31740 MOV X1, X31
	0x03B31744 MOV X20, X0
	0x03B31748 BL 0x33A51F0
	0x03B3174C STR W19, [X20 + 0x10]
	0x03B31750 LDP X20, X19, [X31 + 0x10]
	0x03B31754 LDR X30, [X31], #0x20
	0x03B31758 RET
	0x03B3175C STP X30, X21, [X31 - 0x20]!
	0x03B31760 STP X20, X19, [X31 + 0x10]
	0x03B31764 ADRP X21, 0x8B1000
	0x03B31768 LDRB W8, [X21 + 0x7DB]
	0x03B3176C MOV X19, X1
	0x03B31770 MOV X20, X0
	0x03B31774 TBNZ X8, 0x0, 0x3B3178C
	0x03B31778 ADRP X0, 0x628000
	0x03B3177C LDR X0, [X0 + 0xF78]
	0x03B31780 BL 0x1C16CF4
	0x03B31784 MOVZ W8, 0x1
	0x03B31788 STRB W8, [X21 + 0x7DB]
	0x03B3178C LDR X0, [X20 + 0x10]
	0x03B31790 CBZ X0, 0x3B317FC
	0x03B31794 ADRP X9, 0x628000
	0x03B31798 LDR X9, [X9 + 0xF78]
	0x03B3179C LDR W10, [X0 + 0x1C]
	0x03B317A0 LDR X8, [X0 + 0x10]
	0x03B317A4 LDR X9, [X9]
	0x03B317A8 ADD W10, W10, 0x1
	0x03B317AC STR W10, [X0 + 0x1C]
	0x03B317B0 CBZ X8, 0x3B317FC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x8B2000
	008 Move X23, 0x5EA000
	009 Move X20, 0x629000
	010 Move X21, 0x5C3000
	011 Move W8, [X22+1986]
	012 Move X23, [X23+3632]
	013 Move X20, [X20+3808]
	014 Move X21, [X21+2416]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x5C3000
	021 Move X0, [X0+2416]
	022 Call 0x1C17CF4
	023 Move X0, 0x5EA000
	024 Move X0, [X0+3632]
	025 Call 0x1C17CF4
	026 Move X0, 0x629000
	027 Move X0, [X0+3808]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1986], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call UnityAction..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call Application.add_onBeforeRender, X0
	052 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03B317B4 LDRSW X10, [X0 + 0x18]
	0x03B317B8 LDR W11, [X8 + 0x18]
	0x03B317BC CMP W10, W11
	0x03B317C0 B.CS 0x3B317E0
	0x03B317C4 ADD W9, W10, 0x1
	0x03B317C8 ADD X8, X8, X10, 0x3, LSL
	0x03B317CC STR W9, [X0 + 0x18]
	0x03B317D0 STR X19, [X8 + 0x20]
	0x03B317D4 LDP X20, X19, [X31 + 0x10]
	0x03B317D8 LDP X30, X21, [X31], #0x20
	0x03B317DC RET
	0x03B317E0 LDR X8, [X9 + 0x20]
	0x03B317E4 MOV X1, X19
	0x03B317E8 LDP X20, X19, [X31 + 0x10]
	0x03B317EC LDR X8, [X8 + 0xC0]
	0x03B317F0 LDR X2, [X8 + 0x70]
	0x03B317F4 LDP X30, X21, [X31], #0x20
	0x03B317F8 B 0x301BF90
	0x03B317FC BL 0x1C16F20
	0x03B31800 STP X30, X21, [X31 - 0x20]!
	0x03B31804 STP X20, X19, [X31 + 0x10]
	0x03B31808 ADRP X21, 0x8B1000
	0x03B3180C LDRB W8, [X21 + 0x7DC]
	0x03B31810 MOV X19, X1
	0x03B31814 MOV X20, X0
	0x03B31818 TBNZ X8, 0x0, 0x3B3183C
	0x03B3181C ADRP X0, 0x628000
	0x03B31820 LDR X0, [X0 + 0xF80]
	0x03B31824 BL 0x1C16CF4
	0x03B31828 ADRP X0, 0x628000
	0x03B3182C LDR X0, [X0 + 0xF88]
	0x03B31830 BL 0x1C16CF4
	0x03B31834 MOVZ W8, 0x1
	0x03B31838 STRB W8, [X21 + 0x7DC]
	0x03B3183C LDR X0, [X20 + 0x10]
	0x03B31840 CBZ X0, 0x3B318D4
	0x03B31844 ADRP X8, 0x628000
	0x03B31848 LDR X8, [X8 + 0xF88]
	0x03B3184C MOV X1, X19
	0x03B31850 LDR X2, [X8]
	0x03B31854 BL 0x301D7A8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x8B2000
	008 Move X23, 0x5EA000
	009 Move X20, 0x629000
	010 Move X21, 0x5C3000
	011 Move W8, [X22+1987]
	012 Move X23, [X23+3632]
	013 Move X20, [X20+3808]
	014 Move X21, [X21+2416]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x5C3000
	021 Move X0, [X0+2416]
	022 Call 0x1C17CF4
	023 Move X0, 0x5EA000
	024 Move X0, [X0+3632]
	025 Call 0x1C17CF4
	026 Move X0, 0x629000
	027 Move X0, [X0+3808]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1987], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call UnityAction..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call Application.remove_onBeforeRender, X0
	052 Return 

Method: System.Void OnBeforeRender()

Disassembly:
	0x03B31858 CBZ X19, 0x3B318A4
	0x03B3185C ADRP X10, 0x628000
	0x03B31860 LDR X8, [X19]
	0x03B31864 LDR X10, [X10 + 0xF80]
	0x03B31868 LDRH W9, [X8 + 0x12E]
	0x03B3186C LDR X1, [X10]
	0x03B31870 CBZ X9, 0x3B31894
	0x03B31874 LDR X10, [X8 + 0xB0]
	0x03B31878 ADD X10, X10, 0x8
	0x03B3187C LDUR X11, [X10 - 0x8]
	0x03B31880 CMP X11, X1
	0x03B31884 B.EQ 0x3B318B0
	0x03B31888 SUBS X9, X9, 0x1
	0x03B3188C ADD X10, X10, 0x10
	0x03B31890 B.NE 0x3B3187C
	0x03B31894 MOVZ W2, 0x3
	0x03B31898 MOV X0, X19
	0x03B3189C BL 0x1C5C788
	0x03B318A0 B 0x3B318C0
	0x03B318A4 LDP X20, X19, [X31 + 0x10]
	0x03B318A8 LDP X30, X21, [X31], #0x20
	0x03B318AC RET
	0x03B318B0 LDR W9, [X10]
	0x03B318B4 ADD W9, W9, 0x3
	0x03B318B8 ADD X8, X8, W9, 0x4, SXTW
	0x03B318BC ADD X0, X8, 0x138
	0x03B318C0 LDP X2, X1, [X0]
	0x03B318C4 MOV X0, X19
	0x03B318C8 LDP X20, X19, [X31 + 0x10]
	0x03B318CC LDP X30, X21, [X31], #0x20
	0x03B318D0 BR X2
	0x03B318D4 BL 0x1C16F20
	0x03B318D8 STP X30, X23, [X31 - 0x30]!
	0x03B318DC STP X22, X21, [X31 + 0x10]
	0x03B318E0 STP X20, X19, [X31 + 0x20]
	0x03B318E4 ADRP X20, 0x8B1000
	0x03B318E8 LDRB W8, [X20 + 0x7DD]
	0x03B318EC MOV X19, X0
	0x03B318F0 TBNZ X8, 0x0, 0x3B31920
	0x03B318F4 ADRP X0, 0x628000
	0x03B318F8 LDR X0, [X0 + 0xF80]
	0x03B318FC BL 0x1C16CF4
	0x03B31900 ADRP X0, 0x628000
	0x03B31904 LDR X0, [X0 + 0xF90]
	0x03B31908 BL 0x1C16CF4
	0x03B3190C ADRP X0, 0x628000
	0x03B31910 LDR X0, [X0 + 0xF98]
	0x03B31914 BL 0x1C16CF4
	0x03B31918 MOVZ W8, 0x1
	0x03B3191C STRB W8, [X20 + 0x7DD]
	0x03B31920 LDR X0, [X19 + 0x10]
	0x03B31924 CBZ X0, 0x3B319D0
	0x03B31928 ADRP X22, 0x628000
	0x03B3192C ADRP X23, 0x628000
	0x03B31930 LDR X22, [X22 + 0xF98]
	0x03B31934 LDR X23, [X23 + 0xF80]
	0x03B31938 MOV W20, W31
	0x03B3193C MOV X21, X31
	0x03B31940 LDR W8, [X0 + 0x18]
	0x03B31944 CMP W20, W8
	0x03B31948 B.GE 0x3B319D4
	0x03B3194C LDR X2, [X22]
	0x03B31950 MOV W1, W20
	0x03B31954 BL 0x301BCCC
	0x03B31958 CMP X0, 0x0
	0x03B3195C CSEL X21, X21, X0, EQ
	0x03B31960 CBZ X0, 0x3B319C4
	0x03B31964 CBZ X21, 0x3B319D0
	0x03B31968 LDR X8, [X21]
	0x03B3196C LDR X1, [X23]
	0x03B31970 LDRH W9, [X8 + 0x12E]
	0x03B31974 CBZ X9, 0x3B31998
	0x03B31978 LDR X10, [X8 + 0xB0]
	0x03B3197C ADD X10, X10, 0x8
	0x03B31980 LDUR X11, [X10 - 0x8]
	0x03B31984 CMP X11, X1
	0x03B31988 B.EQ 0x3B319A8
	0x03B3198C SUBS X9, X9, 0x1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X21, 0x8B2000
	011 Move X20, 0x5C3000
	012 Move W8, [X21+1988]
	013 Move X20, [X20+1432]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x5C3000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1988], W8
	024 Move X0, [X20]
	025 Move X20, [X19+32]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object.op_Implicit, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {61}
	037 Add X8, X31, 0
	038 Move X0, X19
	039 Call XROrigin.GetCameraOriginPose, X0
	040 Move X0, [X19+40]
	041 Compare X0, 0
	042 JumpIfEqual {111}
	043 Move S0, [X31]
	044 Move S1, [X31+4]
	045 Move S2, [X31+8]
	046 Move S8, [X31+12]
	047 Move S9, [X31+16]
	048 Move S10, [X31+20]
	049 Move V11, [X31+24]
	050 Move X1, X31
	051 Call Transform.set_position, X0, X1
	052 Move X0, [X19+40]
	053 Compare X0, 0
	054 JumpIfEqual {111}
	055 Move V0, V8
	056 Move V1, V9
	057 Move V2, V10
	058 Move V3, V11
	059 Move X1, X31
	060 Call Transform.set_rotation, X0, X1
	061 Move X0, [X19+40]
	062 Compare X0, 0
	063 JumpIfEqual {111}
	064 Move X1, X31
	065 Call Transform.get_hasChanged, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {101}
	070 Move X20, [X19+48]
	071 Compare X20, 0
	072 JumpIfEqual {85}
	073 Move X2, [X19+40]
	074 Add X0, X31, 0
	075 Move X1, X19
	076 Move [X31], X31
	077 Move [X31+8], X31
	078 Call ARTrackablesParentTransformChangedEventArgs..ctor, X0, X1, X2
	079 Move X1, [X31]
	080 Move X2, [X31+8]
	081 Move X8, [X20+24]
	082 Move X0, [X20+64]
	083 Move X3, [X20+40]
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move X0, [X19+40]
	086 Compare X0, 0
	087 JumpIfEqual {111}
	088 Move X20, [X31+80]
	089 Move X19, [X31+88]
	090 Move X30, [X31+64]
	091 Move X21, [X31+72]
	092 Move D9, [X31+48]
	093 Move D8, [X31+56]
	094 Move D11, [X31+32]
	095 Move D10, [X31+40]
	096 Move W1, W31
	097 Move X2, X31
	098 Add X31, X31, 96
	099 Call Transform.set_hasChanged, X0, X1
	100 Return 
	101 Move X20, [X31+80]
	102 Move X19, [X31+88]
	103 Move X30, [X31+64]
	104 Move X21, [X31+72]
	105 Move D9, [X31+48]
	106 Move D8, [X31+56]
	107 Move D11, [X31+32]
	108 Move D10, [X31+40]
	109 Add X31, X31, 96
	110 Return 
	111 Call 0x1C17F20

Method: System.Void OnValidate()

Disassembly:
	0x03B31990 ADD X10, X10, 0x10
	0x03B31994 B.NE 0x3B31980
	0x03B31998 MOVZ W2, 0x1
	0x03B3199C MOV X0, X21
	0x03B319A0 BL 0x1C5C788
	0x03B319A4 B 0x3B319B8
	0x03B319A8 LDR W9, [X10]
	0x03B319AC ADD W9, W9, 0x1
	0x03B319B0 ADD X8, X8, W9, 0x4, SXTW
	0x03B319B4 ADD X0, X8, 0x138
	0x03B319B8 LDP X8, X1, [X0]
	0x03B319BC MOV X0, X21
	0x03B319C0 BLR X8
	0x03B319C4 LDR X0, [X19 + 0x10]
	0x03B319C8 ADD W20, W20, 0x1
	0x03B319CC CBNZ X0, 0x3B31940
	0x03B319D0 BL 0x1C16F20
	0x03B319D4 LDP X20, X19, [X31 + 0x20]
	0x03B319D8 LDP X22, X21, [X31 + 0x10]
	0x03B319DC LDP X30, X23, [X31], #0x30
	0x03B319E0 RET
	0x03B319E4 STP X30, X23, [X31 - 0x30]!
	0x03B319E8 STP X22, X21, [X31 + 0x10]
	0x03B319EC STP X20, X19, [X31 + 0x20]
	0x03B319F0 ADRP X20, 0x8B1000
	0x03B319F4 LDRB W8, [X20 + 0x7DE]
	0x03B319F8 MOV X19, X0
	0x03B319FC TBNZ X8, 0x0, 0x3B31A2C
	0x03B31A00 ADRP X0, 0x628000
	0x03B31A04 LDR X0, [X0 + 0xF80]
	0x03B31A08 BL 0x1C16CF4
	0x03B31A0C ADRP X0, 0x628000
	0x03B31A10 LDR X0, [X0 + 0xF90]
	0x03B31A14 BL 0x1C16CF4
	0x03B31A18 ADRP X0, 0x628000
	0x03B31A1C LDR X0, [X0 + 0xF98]
	0x03B31A20 BL 0x1C16CF4
	0x03B31A24 MOVZ W8, 0x1
	0x03B31A28 STRB W8, [X20 + 0x7DE]
	0x03B31A2C LDR X0, [X19 + 0x10]
	0x03B31A30 CBZ X0, 0x3B31ADC
	0x03B31A34 ADRP X22, 0x628000
	0x03B31A38 ADRP X23, 0x628000
	0x03B31A3C LDR X22, [X22 + 0xF98]
	0x03B31A40 LDR X23, [X23 + 0xF80]
	0x03B31A44 MOV W20, W31
	0x03B31A48 MOV X21, X31
	0x03B31A4C LDR W8, [X0 + 0x18]
	0x03B31A50 CMP W20, W8
	0x03B31A54 B.GE 0x3B31AE0
	0x03B31A58 LDR X2, [X22]
	0x03B31A5C MOV W1, W20
	0x03B31A60 BL 0x301BCCC
	0x03B31A64 CMP X0, 0x0
	0x03B31A68 CSEL X21, X21, X0, EQ
	0x03B31A6C CBZ X0, 0x3B31AD0
	0x03B31A70 CBZ X21, 0x3B31ADC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8B2000
	006 Move X20, 0x5C3000
	007 Move W8, [X21+1989]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5C3000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move X0, 0x5C3000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1989], W8
	022 Move X0, [X20]
	023 Move X20, [X19+56]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X21, 0x5C3000
	029 Move X21, [X21+2416]
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {42}
	038 Move X0, X19
	039 Move X1, X31
	040 Call Component.get_gameObject, X0
	041 Move [X19+56], X0
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X31
	048 Call Application.get_isPlaying
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {73}
	053 Move X0, X19
	054 Move X1, X31
	055 Call Behaviour.get_isActiveAndEnabled, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {73}
	060 Move X0, X19
	061 Call XROrigin.<OnValidate>g__IsModeStale|60_0, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {78}
	066 Move X0, X19
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Call XROrigin.TryInitializeCamera, X0
	072 Return 
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Return 
	078 Move X0, X19
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call XROrigin.MoveOffsetHeight, X0
	084 Return 

Method: System.Void Start()

Disassembly:
	0x03B31C64 ADRP X0, 0x628000

ISIL:
	001 Call XROrigin.TryInitializeCamera, X0
	002 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x03B31C68 LDR X0, [X0 + 0xFB0]
	0x03B31C6C BL 0x1C16CF4
	0x03B31C70 ADRP X0, 0x628000
	0x03B31C74 LDR X0, [X0 + 0xFA8]
	0x03B31C78 BL 0x1C16CF4
	0x03B31C7C MOVZ W8, 0x1
	0x03B31C80 STRB W8, [X21 + 0x7E0]
	0x03B31C84 LDR X0, [X22]
	0x03B31C88 BL 0x1C16F10
	0x03B31C8C LDR X1, [X20]
	0x03B31C90 MOV X20, X0
	0x03B31C94 BL 0x301B7C4
	0x03B31C98 STR X20, [X19 + 0x10]
	0x03B31C9C MOV X0, X19
	0x03B31CA0 LDP X20, X19, [X31 + 0x20]
	0x03B31CA4 LDP X22, X21, [X31 + 0x10]
	0x03B31CA8 MOV X1, X31
	0x03B31CAC LDR X30, [X31], #0x30
	0x03B31CB0 B 0x33BDD8C
	0x03B31CB4 LDR X0, [X0]
	0x03B31CB8 RET
	0x03B31CBC STR X1, [X0]
	0x03B31CC0 RET
	0x03B31CC4 LDR X0, [X0 + 0x8]
	0x03B31CC8 RET
	0x03B31CCC STR X1, [X0 + 0x8]
	0x03B31CD0 RET
	0x03B31CD4 LDRB W0, [X0 + 0x10]
	0x03B31CD8 RET
	0x03B31CDC STP X1, X2, [X0]
	0x03B31CE0 STRB W31, [X0 + 0x10]
	0x03B31CE4 RET
	0x03B31CE8 STP X30, X19, [X31 - 0x10]!
	0x03B31CEC LDRB W8, [X0 + 0x10]
	0x03B31CF0 MOV X19, X0
	0x03B31CF4 CBNZ W8, 0x3B31D10
	0x03B31CF8 LDR X8, [X19]
	0x03B31CFC CBZ X8, 0x3B31D10
	0x03B31D00 LDR X9, [X8 + 0x18]
	0x03B31D04 LDR X0, [X8 + 0x40]
	0x03B31D08 LDR X1, [X8 + 0x28]
	0x03B31D0C BLR X9
	0x03B31D10 MOVZ W8, 0x1
	0x03B31D14 STRB W8, [X19 + 0x10]
	0x03B31D18 LDP X30, X19, [X31], #0x10
	0x03B31D1C RET
	0x03B31D20 STP X30, X19, [X31 - 0x10]!
	0x03B31D24 LDRB W8, [X0 + 0x10]
	0x03B31D28 MOV X19, X0
	0x03B31D2C CBZ W8, 0x3B31D48
	0x03B31D30 LDR X8, [X19 + 0x8]
	0x03B31D34 CBZ X8, 0x3B31D48
	0x03B31D38 LDR X9, [X8 + 0x18]
	0x03B31D3C LDR X0, [X8 + 0x40]
	0x03B31D40 LDR X1, [X8 + 0x28]
	0x03B31D44 BLR X9
	0x03B31D48 STRB W31, [X19 + 0x10]
	0x03B31D4C LDP X30, X19, [X31], #0x10
	0x03B31D50 RET
	0x03B31D54 STP X30, X19, [X31 - 0x10]!
	0x03B31D58 LDRB W8, [X0 + 0x10]
	0x03B31D5C MOV X19, X0
	0x03B31D60 CBZ W8, 0x3B31D7C
	0x03B31D64 LDR X8, [X19 + 0x8]
	0x03B31D68 CBZ X8, 0x3B31D7C
	0x03B31D6C LDR X9, [X8 + 0x18]
	0x03B31D70 LDR X0, [X8 + 0x40]
	0x03B31D74 LDR X1, [X8 + 0x28]
	0x03B31D78 BLR X9
	0x03B31D7C STP X31, X31, [X19]
	0x03B31D80 STRB W31, [X19 + 0x10]
	0x03B31D84 LDP X30, X19, [X31], #0x10
	0x03B31D88 RET
	0x03B31D8C STP X30, X27, [X31 - 0x50]!
	0x03B31D90 STP X26, X25, [X31 + 0x10]
	0x03B31D94 STP X24, X23, [X31 + 0x20]
	0x03B31D98 STP X22, X21, [X31 + 0x30]
	0x03B31D9C STP X20, X19, [X31 + 0x40]
	0x03B31DA0 ADRP X21, 0x8B1000
	0x03B31DA4 LDRB W8, [X21 + 0x7E2]
	0x03B31DA8 MOV X19, X1
	0x03B31DAC MOV X20, X0
	0x03B31DB0 TBNZ X8, 0x0, 0x3B31E04
	0x03B31DB4 ADRP X0, 0x5CB000
	0x03B31DB8 LDR X0, [X0 + 0x9E8]
	0x03B31DBC BL 0x1C16CF4
	0x03B31DC0 ADRP X0, 0x5C2000
	0x03B31DC4 LDR X0, [X0 + 0xA28]
	0x03B31DC8 BL 0x1C16CF4
	0x03B31DCC ADRP X0, 0x5C2000
	0x03B31DD0 LDR X0, [X0 + 0xDF8]
	0x03B31DD4 BL 0x1C16CF4
	0x03B31DD8 ADRP X0, 0x5C3000
	0x03B31DDC LDR X0, [X0 + 0xE58]
	0x03B31DE0 BL 0x1C16CF4
	0x03B31DE4 ADRP X0, 0x5C2000
	0x03B31DE8 LDR X0, [X0 + 0xAC8]
	0x03B31DEC BL 0x1C16CF4
	0x03B31DF0 ADRP X0, 0x628000
	0x03B31DF4 LDR X0, [X0 + 0xFB8]
	0x03B31DF8 BL 0x1C16CF4
	0x03B31DFC MOVZ W8, 0x1
	0x03B31E00 STRB W8, [X21 + 0x7E2]
	0x03B31E04 MOV X0, X20
	0x03B31E08 MOV X1, X31
	0x03B31E0C BL 0x3C303D4
	0x03B31E10 CBZ X19, 0x3B31F6C
	0x03B31E14 ADRP X8, 0x5C2000
	0x03B31E18 LDR X8, [X8 + 0xAC8]
	0x03B31E1C LDR W1, [X19 + 0x18]
	0x03B31E20 ADRP X21, 0x5C3000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X21, 0x8B2000
	011 Move X20, 0x629000
	012 Move W8, [X21+1990]
	013 Move X20, [X20+3688]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0x629000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x5EB000
	023 Move X0, [X0+200]
	024 Call 0x1C17CF4
	025 Move X0, 0x5EB000
	026 Move X0, [X0+208]
	027 Call 0x1C17CF4
	028 Move X0, 0x5EB000
	029 Move X0, [X0+216]
	030 Call 0x1C17CF4
	031 Move X0, 0x5EB000
	032 Move X0, [X0+224]
	033 Call 0x1C17CF4
	034 Move X0, 0x629000
	035 Move X0, [X0+3712]
	036 Call 0x1C17CF4
	037 Move X0, 0x629000
	038 Move X0, [X0+3688]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+1990], W8
	042 Move X0, [X20]
	043 Move [X31+8], X31
	044 Move [X31+16], X31
	045 Move [X31+24], X31
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X20]
	051 Move X8, [X0+184]
	052 Move X0, [X8]
	053 Compare X0, 0
	054 JumpIfEqual {102}
	055 Move X8, 0x5EB000
	056 Move X8, [X8+224]
	057 Move X23, 0x5EB000
	058 Move X23, [X23+208]
	059 Move X24, 0x629000
	060 Move X1, [X8]
	061 Move X25, 0x629000
	062 Move X22, 0x5EB000
	063 Move X24, [X24+3696]
	064 Move X25, [X25+3712]
	065 Move X22, [X22+200]
	066 Add X8, X31, 8
	067 Call List`1<Object>.GetEnumerator, X0
	068 Move X1, [X23]
	069 Add X0, X31, 8
	070 Call Enumerator<Object>.MoveNext, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {89}
	075 Move X20, [X31+24]
	076 Compare X20, 0
	077 JumpIfEqual {68}
	078 Move X0, [X24]
	079 Call 0x1C17F10
	080 Move X2, [X25]
	081 Move X21, X0
	082 Move X1, X19
	083 Move X3, X31
	084 Call Action`1<Object>..ctor, X0, X1, X2
	085 Move X0, X20
	086 Move X1, X21
	087 Move X2, X31
	088 Call XRInputSubsystem.remove_trackingOriginUpdated, X0, X1
	089 Move X1, [X22]
	090 Add X0, X31, 8
	091 Call Enumerator<Object>.Dispose, X0
	092 Move X20, [X31+80]
	093 Move X19, [X31+88]
	094 Move X22, [X31+64]
	095 Move X21, [X31+72]
	096 Move X24, [X31+48]
	097 Move X23, [X31+56]
	098 Move X30, [X31+32]
	099 Move X25, [X31+40]
	100 Add X31, X31, 96
	101 Return 
	102 Call 0x1C17F20
	103 Move X20, X0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, X20
	106 Call 0x3EB2AD0
	107 Move X19, [X0]
	108 Call 0x3EB2AE0
	109 Move X1, [X22]
	110 Add X0, X31, 8
	111 Call Enumerator<Object>.Dispose, X0
	112 Compare X19, 0
	113 JumpIfEqual {92}
	114 Move X0, X19
	115 Call 0x1C17F18
	116 Move X19, X31
	117 Move X20, X0
	118 Move X1, [X22]
	119 Add X0, X31, 8
	120 Call Enumerator<Object>.Dispose, X0
	121 Compare X19, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X20
	124 Call 0x1D2D690
	125 Move X0, X19
	126 Call 0x1C17F18
	127 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x03B31E24 LDR X0, [X8]
	0x03B31E28 LDR X21, [X21 + 0xE58]
	0x03B31E2C BL 0x1C16D6C
	0x03B31E30 STR X0, [X20 + 0x18]
	0x03B31E34 LDR X0, [X21]

ISIL:
	001 Move W8, 3460
	002 NotImplemented "Instruction MOVK not yet implemented."
	003 Move X1, X31
	004 Move [X0+76], W8
	005 Call MonoBehaviour..ctor, X0
	006 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B31E38 LDR W1, [X19 + 0x18]
	0x03B31E3C BL 0x1C16D6C
	0x03B31E40 STR X0, [X20 + 0x20]
	0x03B31E44 CBZ X0, 0x3B31F6C
	0x03B31E48 ADRP X23, 0x5C2000
	0x03B31E4C ADRP X24, 0x628000
	0x03B31E50 ADRP X25, 0x5C2000
	0x03B31E54 ADRP X26, 0x5CB000
	0x03B31E58 LDR X23, [X23 + 0xDF8]
	0x03B31E5C LDR X24, [X24 + 0xFB8]
	0x03B31E60 LDR X25, [X25 + 0xA28]
	0x03B31E64 LDR X26, [X26 + 0x9E8]
	0x03B31E68 MOV X22, X31
	0x03B31E6C ADD X8, X19, X22, 0x3, LSL
	0x03B31E70 ADD X27, X8, 0x20
	0x03B31E74 LDRSW X8, [X0 + 0x18]
	0x03B31E78 CMP X22, X8
	0x03B31E7C B.GE 0x3B31F70
	0x03B31E80 LDR W8, [X19 + 0x18]
	0x03B31E84 CMP X22, X8
	0x03B31E88 B.CS 0x3B31F88
	0x03B31E8C LDR X21, [X27]
	0x03B31E90 CBZ X21, 0x3B31EC0
	0x03B31E94 LDR X8, [X21]
	0x03B31E98 LDR X9, [X23]
	0x03B31E9C LDRB W11, [X8 + 0x130]
	0x03B31EA0 LDRB W10, [X9 + 0x130]
	0x03B31EA4 CMP W11, W10
	0x03B31EA8 B.CC 0x3B31EC0
	0x03B31EAC LDR X11, [X8 + 0xC8]
	0x03B31EB0 ADD X10, X11, X10, 0x3, LSL
	0x03B31EB4 LDUR X10, [X10 - 0x8]
	0x03B31EB8 CMP X10, X9
	0x03B31EBC B.EQ 0x3B31F00
	0x03B31EC0 LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8B2000
	007 Move X22, 0x5EB000
	008 Move X19, 0x5EB000
	009 Move X20, 0x629000
	010 Move W8, [X21+1991]
	011 Move X22, [X22+176]
	012 Move X19, [X19+184]
	013 Move X20, [X20+3688]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x5EB000
	019 Move X0, [X0+184]
	020 Call 0x1C17CF4
	021 Move X0, 0x5EB000
	022 Move X0, [X0+176]
	023 Call 0x1C17CF4
	024 Move X0, 0x629000
	025 Move X0, [X0+3688]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1991], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call List`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Boolean <OnValidate>g__IsModeStale|60_0()

Disassembly:
	0x03B31A74 LDR X8, [X21]
	0x03B31A78 LDR X1, [X23]
	0x03B31A7C LDRH W9, [X8 + 0x12E]
	0x03B31A80 CBZ X9, 0x3B31AA4
	0x03B31A84 LDR X10, [X8 + 0xB0]
	0x03B31A88 ADD X10, X10, 0x8
	0x03B31A8C LDUR X11, [X10 - 0x8]
	0x03B31A90 CMP X11, X1
	0x03B31A94 B.EQ 0x3B31AB4
	0x03B31A98 SUBS X9, X9, 0x1
	0x03B31A9C ADD X10, X10, 0x10
	0x03B31AA0 B.NE 0x3B31A8C
	0x03B31AA4 MOVZ W2, 0x2
	0x03B31AA8 MOV X0, X21
	0x03B31AAC BL 0x1C5C788
	0x03B31AB0 B 0x3B31AC4
	0x03B31AB4 LDR W9, [X10]
	0x03B31AB8 ADD W9, W9, 0x2
	0x03B31ABC ADD X8, X8, W9, 0x4, SXTW
	0x03B31AC0 ADD X0, X8, 0x138
	0x03B31AC4 LDP X8, X1, [X0]
	0x03B31AC8 MOV X0, X21
	0x03B31ACC BLR X8
	0x03B31AD0 LDR X0, [X19 + 0x10]
	0x03B31AD4 ADD W20, W20, 0x1
	0x03B31AD8 CBNZ X0, 0x3B31A4C
	0x03B31ADC BL 0x1C16F20
	0x03B31AE0 LDP X20, X19, [X31 + 0x20]
	0x03B31AE4 LDP X22, X21, [X31 + 0x10]
	0x03B31AE8 LDP X30, X23, [X31], #0x30
	0x03B31AEC RET
	0x03B31AF0 STP X30, X23, [X31 - 0x30]!
	0x03B31AF4 STP X22, X21, [X31 + 0x10]
	0x03B31AF8 STP X20, X19, [X31 + 0x20]
	0x03B31AFC ADRP X20, 0x8B1000
	0x03B31B00 LDRB W8, [X20 + 0x7DF]
	0x03B31B04 MOV X19, X0
	0x03B31B08 TBNZ X8, 0x0, 0x3B31B44
	0x03B31B0C ADRP X0, 0x628000
	0x03B31B10 LDR X0, [X0 + 0xF80]
	0x03B31B14 BL 0x1C16CF4
	0x03B31B18 ADRP X0, 0x628000
	0x03B31B1C LDR X0, [X0 + 0xFA0]
	0x03B31B20 BL 0x1C16CF4
	0x03B31B24 ADRP X0, 0x628000
	0x03B31B28 LDR X0, [X0 + 0xF90]
	0x03B31B2C BL 0x1C16CF4
	0x03B31B30 ADRP X0, 0x628000
	0x03B31B34 LDR X0, [X0 + 0xF98]
	0x03B31B38 BL 0x1C16CF4
	0x03B31B3C MOVZ W8, 0x1
	0x03B31B40 STRB W8, [X20 + 0x7DF]
	0x03B31B44 LDR X0, [X19 + 0x10]
	0x03B31B48 CBZ X0, 0x3B31BF4
	0x03B31B4C ADRP X22, 0x628000
	0x03B31B50 ADRP X23, 0x628000
	0x03B31B54 LDR X22, [X22 + 0xF98]
	0x03B31B58 LDR X23, [X23 + 0xF80]
	0x03B31B5C MOV W20, W31
	0x03B31B60 MOV X21, X31
	0x03B31B64 LDR W2, [X0 + 0x18]
	0x03B31B68 CMP W20, W2
	0x03B31B6C B.GE 0x3B31BF8
	0x03B31B70 LDR X2, [X22]
	0x03B31B74 MOV W1, W20
	0x03B31B78 BL 0x301BCCC
	0x03B31B7C CMP X0, 0x0
	0x03B31B80 CSEL X21, X21, X0, EQ
	0x03B31B84 CBZ X0, 0x3B31BE8
	0x03B31B88 CBZ X21, 0x3B31BF4
	0x03B31B8C LDR X8, [X21]
	0x03B31B90 LDR X1, [X23]
	0x03B31B94 LDRH W9, [X8 + 0x12E]
	0x03B31B98 CBZ X9, 0x3B31BBC
	0x03B31B9C LDR X10, [X8 + 0xB0]
	0x03B31BA0 ADD X10, X10, 0x8
	0x03B31BA4 LDUR X11, [X10 - 0x8]
	0x03B31BA8 CMP X11, X1
	0x03B31BAC B.EQ 0x3B31BCC
	0x03B31BB0 SUBS X9, X9, 0x1
	0x03B31BB4 ADD X10, X10, 0x10
	0x03B31BB8 B.NE 0x3B31BA4
	0x03B31BBC MOVZ W2, 0x3
	0x03B31BC0 MOV X0, X21
	0x03B31BC4 BL 0x1C5C788
	0x03B31BC8 B 0x3B31BDC
	0x03B31BCC LDR W9, [X10]
	0x03B31BD0 ADD W9, W9, 0x3
	0x03B31BD4 ADD X8, X8, W9, 0x4, SXTW
	0x03B31BD8 ADD X0, X8, 0x138
	0x03B31BDC LDP X8, X1, [X0]
	0x03B31BE0 MOV X0, X21
	0x03B31BE4 BLR X8
	0x03B31BE8 LDR X0, [X19 + 0x10]
	0x03B31BEC ADD W20, W20, 0x1
	0x03B31BF0 CBNZ X0, 0x3B31B64
	0x03B31BF4 BL 0x1C16F20
	0x03B31BF8 LDR W8, [X0 + 0x1C]
	0x03B31BFC CMP W2, 0x1
	0x03B31C00 ADD W8, W8, 0x1
	0x03B31C04 STP W31, W8, [X0 + 0x18]
	0x03B31C08 B.LT 0x3B31C28
	0x03B31C0C LDR X0, [X0 + 0x10]
	0x03B31C10 LDP X20, X19, [X31 + 0x20]
	0x03B31C14 LDP X22, X21, [X31 + 0x10]
	0x03B31C18 MOV W1, W31
	0x03B31C1C MOV X3, X31
	0x03B31C20 LDP X30, X23, [X31], #0x30
	0x03B31C24 B 0x339FA34
	0x03B31C28 LDP X20, X19, [X31 + 0x20]
	0x03B31C2C LDP X22, X21, [X31 + 0x10]
	0x03B31C30 LDP X30, X23, [X31], #0x30
	0x03B31C34 RET
	0x03B31C38 STR X30, [X31 - 0x30]!
	0x03B31C3C STP X22, X21, [X31 + 0x10]
	0x03B31C40 STP X20, X19, [X31 + 0x20]
	0x03B31C44 ADRP X21, 0x8B1000
	0x03B31C48 ADRP X22, 0x628000
	0x03B31C4C ADRP X20, 0x628000
	0x03B31C50 LDRB W8, [X21 + 0x7E0]
	0x03B31C54 LDR X22, [X22 + 0xFA8]
	0x03B31C58 LDR X20, [X20 + 0xFB0]
	0x03B31C5C MOV X19, X0
	0x03B31C60 TBNZ X8, 0x0, 0x3B31C84

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0x8B2000
	008 Move X20, 0x629000
	009 Move W8, [X21+1992]
	010 Move X20, [X20+3688]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x5EB000
	017 Move X0, [X0+200]
	018 Call 0x1C17CF4
	019 Move X0, 0x5EB000
	020 Move X0, [X0+208]
	021 Call 0x1C17CF4
	022 Move X0, 0x5EB000
	023 Move X0, [X0+216]
	024 Call 0x1C17CF4
	025 Move X0, 0x5EB000
	026 Move X0, [X0+224]
	027 Call 0x1C17CF4
	028 Move X0, 0x629000
	029 Move X0, [X0+3704]
	030 Call 0x1C17CF4
	031 Move X0, 0x629000
	032 Move X0, [X0+3688]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+1992], W8
	036 Move X0, [X20]
	037 Move [X31+8], X31
	038 Move [X31+16], X31
	039 Move [X31+24], X31
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X20]
	045 Move X8, [X0+184]
	046 Move X9, [X8]
	047 Compare X9, 0
	048 JumpIfEqual {105}
	049 Move W8, [X9+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {60}
	054 Call 0x1C17DFC
	055 Move X8, [X20]
	056 Move X8, [X8+184]
	057 Move X9, [X8]
	058 Compare X9, 0
	059 JumpIfEqual {105}
	060 Move X8, 0x5EB000
	061 Move X8, [X8+224]
	062 Move X20, 0x5EB000
	063 Move X21, 0x5EB000
	064 Move X0, X9
	065 Move X1, [X8]
	066 Move X20, [X20+208]
	067 Move X21, [X21+200]
	068 Add X8, X31, 8
	069 Call List`1<Object>.GetEnumerator, X0
	070 Move X1, [X20]
	071 Add X0, X31, 8
	072 Call Enumerator<Object>.MoveNext, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {88}
	077 Move W22, [X19+72]
	078 Move X0, [X31+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Compare X0, 0
	082 JumpIfEqual {70}
	083 Move X1, X31
	084 Call XRInputSubsystem.GetTrackingOriginMode, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W19, 1
	087 Move W0, W31
	088 Move W19, W31
	089 Move W20, 2
	090 Move W19, W31
	091 Move W20, 10
	092 Move X1, [X21]
	093 Add X0, X31, 8
	094 Call Enumerator<Object>.Dispose, X0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSET not yet implemented."
	097 And W0, W19, W8
	098 Move X20, [X31+64]
	099 Move X19, [X31+72]
	100 Move X22, [X31+48]
	101 Move X21, [X31+56]
	102 Move X30, [X31+32]
	103 Add X31, X31, 80
	104 Return X0
	105 Call 0x1C17F20
	106 Move X20, X0
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X0, X20
	109 Call 0x3EB2AD0
	110 Move X19, [X0]
	111 Call 0x3EB2AE0
	112 Move X1, [X21]
	113 Add X0, X31, 8
	114 Call Enumerator<Object>.Dispose, X0
	115 Compare X19, 0
	116 JumpIfNotEqual {119}
	117 Move W20, W31
	118 Move X19, X31
	119 Move X0, X19
	120 Call 0x1C17F18
	121 Move X20, X0
	122 Move X1, [X21]
	123 Add X0, X31, 8
	124 Call Enumerator<Object>.Dispose, X0
	125 Compare X19, 0
	126 JumpIfNotEqual {129}
	127 Move X0, X20
	128 Call 0x1D2D690
	129 Move X0, X19
	130 Call 0x1C17F18
	131 Call 0x1991590

