Type: Unity.XR.CoreUtils.Collections.HashSetList`1

Method: System.Int32 get_Count()

Disassembly:
	0x02D58B54 LDR X3, [X2]
	0x02D58B58 LDR X30, [X31], #0x10
	0x02D58B5C BR X3
	0x02D58B60 BL 0x1C16F20
	0x02D58B64 STR X30, [X31 - 0x10]!
	0x02D58B68 LDR X0, [X0 + 0x18]
	0x02D58B6C CBZ X0, 0x2D58B88

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()

Disassembly:
	0x02D58B70 LDR X8, [X2 + 0x20]
	0x02D58B74 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: T get_Item(System.Int32 index)

Disassembly:
	0x02D58B78 LDR X2, [X8 + 0xC0]
	0x02D58B7C LDR X3, [X2]
	0x02D58B80 LDR X30, [X31], #0x10
	0x02D58B84 BR X3
	0x02D58B88 BL 0x1C16F20
	0x02D58B8C STR X30, [X31 - 0x10]!
	0x02D58B90 LDR X0, [X0 + 0x18]
	0x02D58B94 CBZ X0, 0x2D58BB0
	0x02D58B98 LDR X8, [X2 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+24]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.get_Item, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 capacity = 0)

Disassembly:
	0x02D58B9C LDR X8, [X8 + 0xC0]
	0x02D58BA0 LDR X2, [X8 + 0xC8]
	0x02D58BA4 LDR X3, [X2]
	0x02D58BA8 LDR X30, [X31], #0x10
	0x02D58BAC BR X3
	0x02D58BB0 BL 0x1C16F20
	0x02D58BB4 STR X30, [X31 - 0x20]!
	0x02D58BB8 STP X20, X19, [X31 + 0x10]
	0x02D58BBC MOV X19, X0
	0x02D58BC0 LDR X0, [X0 + 0x18]
	0x02D58BC4 CBZ X0, 0x2D58C00
	0x02D58BC8 LDR X8, [X2 + 0x20]
	0x02D58BCC MOV X20, X2
	0x02D58BD0 LDR X8, [X8 + 0xC0]
	0x02D58BD4 LDR X2, [X8 + 0xD0]
	0x02D58BD8 LDR X8, [X2]
	0x02D58BDC BLR X8
	0x02D58BE0 LDR X8, [X20 + 0x20]
	0x02D58BE4 MOV X0, X19
	0x02D58BE8 LDP X20, X19, [X31 + 0x10]
	0x02D58BEC LDR X8, [X8 + 0xC0]
	0x02D58BF0 LDR X1, [X8 + 0x90]
	0x02D58BF4 LDR X2, [X1]
	0x02D58BF8 LDR X30, [X31], #0x20
	0x02D58BFC BR X2
	0x02D58C00 BL 0x1C16F20
	0x02D58C04 STR X30, [X31 - 0x20]!
	0x02D58C08 STP X20, X19, [X31 + 0x10]
	0x02D58C0C MOV X19, X0
	0x02D58C10 LDR X0, [X0 + 0x18]
	0x02D58C14 CBZ X0, 0x2D58C50
	0x02D58C18 LDR X8, [X2 + 0x20]
	0x02D58C1C MOV X20, X2
	0x02D58C20 LDR X8, [X8 + 0xC0]
	0x02D58C24 LDR X2, [X8 + 0xD8]
	0x02D58C28 LDR X8, [X2]
	0x02D58C2C BLR X8
	0x02D58C30 LDR X8, [X20 + 0x20]
	0x02D58C34 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X20, X2
	009 Move X19, X0
	010 Call Object..ctor, X0
	011 Move X8, [X20+32]
	012 Move X8, [X8+192]
	013 Move X0, [X8+8]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Call 0x1C17F10
	021 Move X8, [X20+32]
	022 Move W1, W21
	023 Move X22, X0
	024 Move X8, [X8+192]
	025 Move X2, [X8+40]
	026 Call List`1<Object>..ctor, X0, X1
	027 Move [X19+16], X22
	028 Move X8, [X20+32]
	029 Move X8, [X8+192]
	030 Move X0, [X8+48]
	031 Move W8, [X0+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {37}
	036 Call 0x1C5D684
	037 Call 0x1C17F10
	038 Move X8, [X20+32]
	039 Move X20, X0
	040 Move X8, [X8+192]
	041 Move X1, [X8+56]
	042 Call HashSet`1<Object>..ctor, X0
	043 Move [X19+24], X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 

Method: System.Collections.Generic.List`1/Enumerator<T> GetEnumerator()

Disassembly:
	0x02D58C38 LDP X20, X19, [X31 + 0x10]
	0x02D58C3C LDR X8, [X8 + 0xC0]
	0x02D58C40 LDR X1, [X8 + 0x90]
	0x02D58C44 LDR X2, [X1]
	0x02D58C48 LDR X30, [X31], #0x20
	0x02D58C4C BR X2
	0x02D58C50 BL 0x1C16F20
	0x02D58C54 STR X30, [X31 - 0x20]!
	0x02D58C58 STP X20, X19, [X31 + 0x10]
	0x02D58C5C MOV X20, X0
	0x02D58C60 LDR X0, [X0 + 0x18]
	0x02D58C64 CBZ X0, 0x2D58CA4
	0x02D58C68 LDR X8, [X1 + 0x20]
	0x02D58C6C MOV X19, X1
	0x02D58C70 LDR X8, [X8 + 0xC0]
	0x02D58C74 LDR X1, [X8 + 0xE0]
	0x02D58C78 LDR X8, [X1]
	0x02D58C7C BLR X8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfEqual {21}
	007 Move X19, X8
	008 Move X8, [X1+32]
	009 Move X8, [X8+192]
	010 Move X1, [X8+64]
	011 Add X8, X31, 8
	012 Call List`1<Object>.GetEnumerator, X0
	013 Move X8, [X31+24]
	014 NotImplemented "Instruction LDUR not yet implemented."
	015 Move [X19+16], X8
	016 Move [X19], V0
	017 Move X30, [X31+32]
	018 Move X19, [X31+40]
	019 Add X31, X31, 48
	020 Return X0
	021 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()

Disassembly:
	0x02D58C80 LDR X0, [X20 + 0x10]
	0x02D58C84 CBZ X0, 0x2D58CA4
	0x02D58C88 LDR X8, [X19 + 0x20]
	0x02D58C8C LDP X20, X19, [X31 + 0x10]
	0x02D58C90 LDR X8, [X8 + 0xC0]
	0x02D58C94 LDR X1, [X8 + 0xE8]
	0x02D58C98 LDR X2, [X1]
	0x02D58C9C LDR X30, [X31], #0x20
	0x02D58CA0 BR X2
	0x02D58CA4 BL 0x1C16F20
	0x02D58CA8 STP X29, X30, [X31 - 0x30]!
	0x02D58CAC STP X22, X21, [X31 + 0x10]
	0x02D58CB0 STP X20, X19, [X31 + 0x20]
	0x02D58CB4 ADD X29, X31, 0x0
	0x02D58CB8 SUB X31, X31, 0x20
	0x02D58CBC MRS X21, 0xC000
	0x02D58CC0 LDR X8, [X21 + 0x28]
	0x02D58CC4 ADD X9, X31, 0x0
	0x02D58CC8 STUR X8, [X29 - 0x8]
	0x02D58CCC STUR X1, [X29 - 0x20]
	0x02D58CD0 LDR X22, [X2 + 0x20]
	0x02D58CD4 LDR X8, [X22 + 0xC0]
	0x02D58CD8 LDR X8, [X8 + 0x20]
	0x02D58CDC LDR W2, [X8 + 0xFC]
	0x02D58CE0 ADD X10, X2, 0xF

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfEqual {28}
	007 Move X8, [X1+32]
	008 Move X19, X1
	009 Move X8, [X8+192]
	010 Move X1, [X8+64]
	011 Add X8, X31, 0
	012 Call List`1<Object>.GetEnumerator, X0
	013 Move X8, [X31+16]
	014 Move V0, [X31]
	015 Add X1, X31, 0
	016 Move [X31+48], X8
	017 Move [X31+2], V0
	018 Move [X31], V0
	019 Move [X31+16], X8
	020 Move X8, [X19+32]
	021 Move X8, [X8+192]
	022 Move X0, [X8+72]
	023 Call 0x1C17E04
	024 Move X30, [X31+64]
	025 Move X19, [X31+72]
	026 Add X31, X31, 80
	027 Return X0
	028 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02D58CE4 AND X10, X10, 0x1FFFFFFFF
	0x02D58CE8 SUB X20, X9, X10
	0x02D58CEC ADD X31, X20, 0x0
	0x02D58CF0 LDR W8, [X8 + 0x28]
	0x02D58CF4 LDR X19, [X0 + 0x18]
	0x02D58CF8 MOV X0, X20
	0x02D58CFC CMP W8, 0x0
	0x02D58D00 SUB X8, X29, 0x20
	0x02D58D04 CSEL X1, X1, X8, LT
	0x02D58D08 BL 0x3EB1AC0
	0x02D58D0C CBZ X19, 0x2D58D74
	0x02D58D10 LDR X8, [X22 + 0xC0]
	0x02D58D14 LDR X9, [X8 + 0x20]
	0x02D58D18 LDR X1, [X8 + 0xF0]
	0x02D58D1C LDR W8, [X9 + 0x28]
	0x02D58D20 LDR X0, [X1]
	0x02D58D24 TBNZ X8, 0x1F, 0x2D58D2C
	0x02D58D28 LDR X20, [X20]
	0x02D58D2C STUR X20, [X29 - 0x18]
	0x02D58D30 LDR X8, [X1 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 Move X8, [X1+32]
	005 Move X19, X1
	006 Move X8, [X8+192]
	007 Move X1, [X8+88]
	008 Add X8, X31, 24
	009 Call 0x2D58C38, X0
	010 NotImplemented "Instruction LDUR not yet implemented."
	011 Move X8, [X31+40]
	012 Add X1, X31, 0
	013 Move [X31], V0
	014 Move [X31+16], X8
	015 Move X8, [X19+32]
	016 Move X8, [X8+192]
	017 Move X0, [X8+72]
	018 Call 0x1C17E04
	019 Move X30, [X31+48]
	020 Move X19, [X31+56]
	021 Add X31, X31, 64
	022 Return X0

Method: System.Void System.Collections.Generic.ICollection<T>.Add(T item)

Disassembly:
	0x02D58D34 SUB X3, X29, 0x18
	0x02D58D38 SUB X4, X29, 0xC
	0x02D58D3C MOV X2, X19
	0x02D58D40 BLR X8
	0x02D58D44 LDURB W8, [X29 - 0xC]
	0x02D58D48 LDR X9, [X21 + 0x28]
	0x02D58D4C LDUR X10, [X29 - 0x8]
	0x02D58D50 CMP W8, 0x0
	0x02D58D54 CSET W0, NE
	0x02D58D58 CMP X9, X10
	0x02D58D5C B.NE 0x2D58D78
	0x02D58D60 ADD X31, X29, 0x0
	0x02D58D64 LDP X20, X19, [X31 + 0x20]
	0x02D58D68 LDP X22, X21, [X31 + 0x10]
	0x02D58D6C LDP X29, X30, [X31], #0x30
	0x02D58D70 RET
	0x02D58D74 BL 0x1C16F20
	0x02D58D78 BL 0x3EB1B20
	0x02D58D7C STR X30, [X31 - 0x10]!
	0x02D58D80 LDR X0, [X0 + 0x10]
	0x02D58D84 CBZ X0, 0x2D58DA0
	0x02D58D88 LDR X8, [X3 + 0x20]
	0x02D58D8C LDR X8, [X8 + 0xC0]
	0x02D58D90 LDR X3, [X8 + 0x100]
	0x02D58D94 LDR X4, [X3]
	0x02D58D98 LDR X30, [X31], #0x10
	0x02D58D9C BR X4
	0x02D58DA0 BL 0x1C16F20
	0x02D58DA4 STR X30, [X31 - 0x20]!
	0x02D58DA8 STP X20, X19, [X31 + 0x10]
	0x02D58DAC MOV X19, X0
	0x02D58DB0 LDR X0, [X0 + 0x18]
	0x02D58DB4 CBZ X0, 0x2D58DEC
	0x02D58DB8 LDR X8, [X0]
	0x02D58DBC MOV X20, X4
	0x02D58DC0 LDR X9, [X8 + 0x238]
	0x02D58DC4 LDR X4, [X8 + 0x240]
	0x02D58DC8 BLR X9
	0x02D58DCC LDR X8, [X20 + 0x20]
	0x02D58DD0 MOV X0, X19
	0x02D58DD4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfEqual {53}
	009 Move X8, [X2+32]
	010 Move X20, X2
	011 Move X19, X1
	012 Move X8, [X8+192]
	013 Move X2, [X8+96]
	014 Call HashSet`1<Object>.Add, X0, X1
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {38}
	019 Move X0, [X21+16]
	020 Compare X0, 0
	021 JumpIfEqual {53}
	022 Move X8, [X20+32]
	023 Move W10, [X0+28]
	024 Move X9, [X8+192]
	025 Move X8, [X0+16]
	026 Add W10, W10, 1
	027 Move X9, [X9+104]
	028 Move [X0+28], W10
	029 Compare X8, 0
	030 JumpIfEqual {53}
	031 NotImplemented "Instruction LDRSW not yet implemented."
	032 Move W11, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add W9, W10, 1
	035 Add X8, X8, X10
	036 Move [X0+24], W9
	037 Move [X8+32], X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 
	043 Move X8, [X9+32]
	044 Move X1, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X8, [X8+192]
	048 Move X2, [X8+112]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call List`1<Object>.AddWithResize, X0, X1
	052 Return 
	053 Call 0x1C17F20

Method: System.Boolean Add(T item)

Disassembly:
	0x02D58DD8 LDR X8, [X8 + 0xC0]
	0x02D58DDC LDR X1, [X8 + 0x90]
	0x02D58DE0 LDR X2, [X1]
	0x02D58DE4 LDR X30, [X31], #0x20
	0x02D58DE8 BR X2
	0x02D58DEC BL 0x1C16F20
	0x02D58DF0 STR X30, [X31 - 0x20]!
	0x02D58DF4 STP X20, X19, [X31 + 0x10]
	0x02D58DF8 MOV X19, X0
	0x02D58DFC LDR X0, [X0 + 0x18]
	0x02D58E00 CBZ X0, 0x2D58E38
	0x02D58E04 LDR X8, [X0]
	0x02D58E08 MOV X20, X2
	0x02D58E0C LDR X9, [X8 + 0x248]
	0x02D58E10 LDR X2, [X8 + 0x250]
	0x02D58E14 BLR X9
	0x02D58E18 LDR X8, [X20 + 0x20]
	0x02D58E1C MOV X0, X19
	0x02D58E20 LDP X20, X19, [X31 + 0x10]
	0x02D58E24 LDR X8, [X8 + 0xC0]
	0x02D58E28 LDR X1, [X8 + 0x90]
	0x02D58E2C LDR X2, [X1]
	0x02D58E30 LDR X30, [X31], #0x20
	0x02D58E34 BR X2
	0x02D58E38 BL 0x1C16F20
	0x02D58E3C STR X30, [X31 - 0x20]!
	0x02D58E40 STP X20, X19, [X31 + 0x10]
	0x02D58E44 MOV X19, X0
	0x02D58E48 LDR X0, [X0 + 0x10]
	0x02D58E4C CBZ X0, 0x2D58E90
	0x02D58E50 LDR X8, [X1 + 0x20]
	0x02D58E54 MOV X20, X1
	0x02D58E58 LDR X8, [X8 + 0xC0]
	0x02D58E5C LDR X1, [X8 + 0xE8]
	0x02D58E60 LDR X8, [X1]
	0x02D58E64 BLR X8
	0x02D58E68 LDR X0, [X19 + 0x10]
	0x02D58E6C CBZ X0, 0x2D58E90
	0x02D58E70 LDR X8, [X20 + 0x20]
	0x02D58E74 LDR X1, [X19 + 0x18]
	0x02D58E78 LDP X20, X19, [X31 + 0x10]
	0x02D58E7C LDR X8, [X8 + 0xC0]
	0x02D58E80 LDR X2, [X8 + 0x118]
	0x02D58E84 LDR X3, [X2]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X0
	007 Move X0, [X0+24]
	008 Compare X0, 0
	009 JumpIfEqual {52}
	010 Move X8, [X2+32]
	011 Move X21, X2
	012 Move X19, X1
	013 Move X8, [X8+192]
	014 Move X2, [X8+96]
	015 Call HashSet`1<Object>.Add, X0, X1
	016 Move W20, W0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {45}
	021 Move X0, [X22+16]
	022 Compare X0, 0
	023 JumpIfEqual {52}
	024 Move X8, [X21+32]
	025 Move W10, [X0+28]
	026 Move X9, [X8+192]
	027 Move X8, [X0+16]
	028 Add W10, W10, 1
	029 Move X9, [X9+104]
	030 Move [X0+28], W10
	031 Compare X8, 0
	032 JumpIfEqual {52}
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Move W11, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add W9, W10, 1
	037 Add X8, X8, X10
	038 Move [X0+24], W9
	039 Move [X8+32], X19
	040 Move X8, [X9+32]
	041 Move X1, X19
	042 Move X8, [X8+192]
	043 Move X2, [X8+112]
	044 Call List`1<Object>.AddWithResize, X0, X1
	045 And W0, W20, 1
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return X0
	052 Call 0x1C17F20

Method: System.Boolean Remove(T item)

Disassembly:
	0x02D58E88 LDR X30, [X31], #0x20
	0x02D58E8C BR X3
	0x02D58E90 BL 0x1C16F20
	0x02D58E94 LDR X0, [X0 + 0x10]
	0x02D58E98 RET
	0x02D58E9C STR X30, [X31 - 0x20]!
	0x02D58EA0 STP X20, X19, [X31 + 0x10]
	0x02D58EA4 MOV X19, X0
	0x02D58EA8 LDR X0, [X0 + 0x20]
	0x02D58EAC LDRB W8, [X0 + 0x135]
	0x02D58EB0 TBNZ X8, 0x0, 0x2D58EB8
	0x02D58EB4 BL 0x1C5C684
	0x02D58EB8 LDR X8, [X0 + 0xC0]
	0x02D58EBC LDR X0, [X8 + 0x10]
	0x02D58EC0 LDRB W8, [X0 + 0x135]
	0x02D58EC4 TBNZ X8, 0x0, 0x2D58ECC
	0x02D58EC8 BL 0x1C5C684
	0x02D58ECC LDR W8, [X0 + 0xE0]
	0x02D58ED0 CBNZ W8, 0x2D58ED8
	0x02D58ED4 BL 0x1C16DFC
	0x02D58ED8 LDR X0, [X19 + 0x20]
	0x02D58EDC LDRB W8, [X0 + 0x135]
	0x02D58EE0 TBNZ X8, 0x0, 0x2D58EE8
	0x02D58EE4 BL 0x1C5C684
	0x02D58EE8 LDR X8, [X0 + 0xC0]
	0x02D58EEC LDR X0, [X8 + 0x10]
	0x02D58EF0 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X0
	007 Move X0, [X0+24]
	008 Compare X0, 0
	009 JumpIfEqual {36}
	010 Move X8, [X2+32]
	011 Move X20, X2
	012 Move X19, X1
	013 Move X8, [X8+192]
	014 Move X2, [X8+112]
	015 Call HashSet`1<Object>.Remove, X0, X1
	016 Move W22, W0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {29}
	021 Move X0, [X21+16]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, [X20+32]
	025 Move X1, X19
	026 Move X8, [X8+192]
	027 Move X2, [X8+120]
	028 Call List`1<Object>.Remove, X0, X1
	029 And W0, W22, 1
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0
	036 Call 0x1C17F20

Method: System.Void ExceptWith(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D58EF4 TBNZ X8, 0x0, 0x2D58EFC
	0x02D58EF8 BL 0x1C5C684
	0x02D58EFC LDR X8, [X0 + 0xB8]
	0x02D58F00 LDR X20, [X8]
	0x02D58F04 CBZ X20, 0x2D58F80
	0x02D58F08 LDR X8, [X19 + 0x20]
	0x02D58F0C ADD X9, X8, 0x135
	0x02D58F10 LDRH W9, [X9]
	0x02D58F14 TBNZ X9, 0x0, 0x2D58F30
	0x02D58F18 MOV X0, X8
	0x02D58F1C BL 0x1C5C684
	0x02D58F20 LDR X8, [X19 + 0x20]
	0x02D58F24 ADD X9, X8, 0x135
	0x02D58F28 LDRH W9, [X9]
	0x02D58F2C B 0x2D58F34
	0x02D58F30 MOV X0, X8
	0x02D58F34 LDR X10, [X0 + 0xC0]
	0x02D58F38 LDR X10, [X10 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {22}
	008 Move X8, [X2+32]
	009 Move X20, X2
	010 Move X8, [X8+192]
	011 Move X2, [X8+136]
	012 Call HashSet`1<Object>.ExceptWith, X0, X1
	013 Move X8, [X20+32]
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X8, [X8+192]
	018 Move X1, [X8+144]
	019 Move X30, [X31+32]
	020 Call 0x2D59220, X0
	021 Return 
	022 Call 0x1C17F20

Method: System.Void IntersectWith(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D58F3C LDR X19, [X10]
	0x02D58F40 TBNZ X9, 0x0, 0x2D58F50
	0x02D58F44 MOV X0, X8
	0x02D58F48 BL 0x1C5C684
	0x02D58F4C MOV X8, X0
	0x02D58F50 LDR X8, [X8 + 0xC0]
	0x02D58F54 ADD X4, X31, 0x8
	0x02D58F58 MOV X0, X19
	0x02D58F5C MOV X2, X20
	0x02D58F60 LDR X1, [X8 + 0x18]
	0x02D58F64 MOV X3, X31
	0x02D58F68 LDR X8, [X1 + 0x10]
	0x02D58F6C BLR X8
	0x02D58F70 LDR X0, [X31 + 0x8]
	0x02D58F74 LDP X20, X19, [X31 + 0x10]
	0x02D58F78 LDR X30, [X31], #0x20
	0x02D58F7C RET
	0x02D58F80 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {22}
	008 Move X8, [X2+32]
	009 Move X20, X2
	010 Move X8, [X8+192]
	011 Move X2, [X8+152]
	012 Call HashSet`1<Object>.IntersectWith, X0, X1
	013 Move X8, [X20+32]
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X8, [X8+192]
	018 Move X1, [X8+144]
	019 Move X30, [X31+32]
	020 Call 0x2D59220, X0
	021 Return 
	022 Call 0x1C17F20

Method: System.Boolean IsProperSubsetOf(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D58F84 SUB X31, X31, 0x40
	0x02D58F88 STP X30, X21, [X31 + 0x20]
	0x02D58F8C STP X20, X19, [X31 + 0x30]
	0x02D58F90 LDR X8, [X1 + 0x20]
	0x02D58F94 MOV X20, X1
	0x02D58F98 MOV X19, X0
	0x02D58F9C LDRB W9, [X8 + 0x135]
	0x02D58FA0 TBNZ X9, 0x0, 0x2D58FB0
	0x02D58FA4 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+160]
	008 Move X30, [X31+16]
	009 Call HashSet`1<Object>.IsProperSubsetOf, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean IsProperSupersetOf(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D58FA8 BL 0x1C5C684
	0x02D58FAC MOV X8, X0
	0x02D58FB0 LDR X8, [X8 + 0xC0]
	0x02D58FB4 LDR X0, [X8 + 0x10]
	0x02D58FB8 LDRB W8, [X0 + 0x135]
	0x02D58FBC TBNZ X8, 0x0, 0x2D58FC4
	0x02D58FC0 BL 0x1C5C684
	0x02D58FC4 LDR W8, [X0 + 0xE0]
	0x02D58FC8 CBNZ W8, 0x2D58FD0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+168]
	008 Move X30, [X31+16]
	009 Call HashSet`1<Object>.IsProperSupersetOf, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean IsSubsetOf(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D58FCC BL 0x1C16DFC
	0x02D58FD0 LDR X0, [X20 + 0x20]
	0x02D58FD4 LDRB W8, [X0 + 0x135]
	0x02D58FD8 TBNZ X8, 0x0, 0x2D58FE0
	0x02D58FDC BL 0x1C5C684
	0x02D58FE0 LDR X8, [X0 + 0xC0]
	0x02D58FE4 LDR X0, [X8 + 0x10]
	0x02D58FE8 LDRB W8, [X0 + 0x135]
	0x02D58FEC TBNZ X8, 0x0, 0x2D58FF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+176]
	008 Move X30, [X31+16]
	009 Call HashSet`1<Object>.IsSubsetOf, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean IsSupersetOf(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D58FF0 BL 0x1C5C684
	0x02D58FF4 LDR X8, [X0 + 0xB8]
	0x02D58FF8 LDR X21, [X8]
	0x02D58FFC CBZ X21, 0x2D59080
	0x02D59000 LDR X8, [X20 + 0x20]
	0x02D59004 ADD X9, X8, 0x135
	0x02D59008 LDRH W9, [X9]
	0x02D5900C TBNZ X9, 0x0, 0x2D59028
	0x02D59010 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+184]
	008 Move X30, [X31+16]
	009 Call HashSet`1<Object>.IsSupersetOf, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean Overlaps(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D59014 BL 0x1C5C684
	0x02D59018 LDR X8, [X20 + 0x20]
	0x02D5901C ADD X9, X8, 0x135
	0x02D59020 LDRH W9, [X9]
	0x02D59024 B 0x2D5902C
	0x02D59028 MOV X0, X8
	0x02D5902C LDR X10, [X0 + 0xC0]
	0x02D59030 LDR X10, [X10 + 0x30]
	0x02D59034 LDR X20, [X10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+192]
	008 Move X30, [X31+16]
	009 Call HashSet`1<Object>.Overlaps, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean SetEquals(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D59038 TBNZ X9, 0x0, 0x2D59048
	0x02D5903C MOV X0, X8
	0x02D59040 BL 0x1C5C684
	0x02D59044 MOV X8, X0
	0x02D59048 LDR X8, [X8 + 0xC0]
	0x02D5904C ADD X3, X31, 0x8
	0x02D59050 ADD X4, X31, 0x10
	0x02D59054 MOV X0, X20
	0x02D59058 LDR X1, [X8 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+200]
	008 Move X30, [X31+16]
	009 Call HashSet`1<Object>.SetEquals, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void SymmetricExceptWith(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D5905C STR X19, [X31 + 0x8]
	0x02D59060 MOV X2, X21
	0x02D59064 LDR X8, [X1 + 0x10]
	0x02D59068 BLR X8
	0x02D5906C LDP X0, X1, [X31 + 0x10]
	0x02D59070 LDP X20, X19, [X31 + 0x30]
	0x02D59074 LDP X30, X21, [X31 + 0x20]
	0x02D59078 ADD X31, X31, 0x40
	0x02D5907C RET
	0x02D59080 BL 0x1C16F20
	0x02D59084 SUB X31, X31, 0x30
	0x02D59088 STP X30, X21, [X31 + 0x10]
	0x02D5908C STP X20, X19, [X31 + 0x20]
	0x02D59090 LDR X8, [X1 + 0x20]
	0x02D59094 MOV X20, X1
	0x02D59098 MOV X19, X0
	0x02D5909C LDRB W9, [X8 + 0x135]
	0x02D590A0 TBNZ X9, 0x0, 0x2D590B0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {22}
	008 Move X8, [X2+32]
	009 Move X20, X2
	010 Move X8, [X8+192]
	011 Move X2, [X8+208]
	012 Call HashSet`1<Object>.SymmetricExceptWith, X0, X1
	013 Move X8, [X20+32]
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X8, [X8+192]
	018 Move X1, [X8+144]
	019 Move X30, [X31+32]
	020 Call 0x2D59220, X0
	021 Return 
	022 Call 0x1C17F20

Method: System.Void UnionWith(System.Collections.Generic.IEnumerable`1<T> other)

Disassembly:
	0x02D590A4 MOV X0, X8
	0x02D590A8 BL 0x1C5C684
	0x02D590AC MOV X8, X0
	0x02D590B0 LDR X8, [X8 + 0xC0]
	0x02D590B4 LDR X0, [X8 + 0x10]
	0x02D590B8 LDRB W8, [X0 + 0x135]
	0x02D590BC TBNZ X8, 0x0, 0x2D590C4
	0x02D590C0 BL 0x1C5C684
	0x02D590C4 LDR W8, [X0 + 0xE0]
	0x02D590C8 CBNZ W8, 0x2D590D0
	0x02D590CC BL 0x1C16DFC
	0x02D590D0 LDR X0, [X20 + 0x20]
	0x02D590D4 LDRB W8, [X0 + 0x135]
	0x02D590D8 TBNZ X8, 0x0, 0x2D590E0
	0x02D590DC BL 0x1C5C684
	0x02D590E0 LDR X8, [X0 + 0xC0]
	0x02D590E4 LDR X0, [X8 + 0x10]
	0x02D590E8 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {22}
	008 Move X8, [X2+32]
	009 Move X20, X2
	010 Move X8, [X8+192]
	011 Move X2, [X8+216]
	012 Call HashSet`1<Object>.UnionWith, X0, X1
	013 Move X8, [X20+32]
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X8, [X8+192]
	018 Move X1, [X8+144]
	019 Move X30, [X31+32]
	020 Call 0x2D59220, X0
	021 Return 
	022 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x02D590EC TBNZ X8, 0x0, 0x2D590F4
	0x02D590F0 BL 0x1C5C684
	0x02D590F4 LDR X8, [X0 + 0xB8]
	0x02D590F8 LDR X21, [X8]
	0x02D590FC CBZ X21, 0x2D5917C
	0x02D59100 LDR X8, [X20 + 0x20]
	0x02D59104 ADD X9, X8, 0x135
	0x02D59108 LDRH W9, [X9]
	0x02D5910C TBNZ X9, 0x0, 0x2D59128
	0x02D59110 MOV X0, X8
	0x02D59114 BL 0x1C5C684
	0x02D59118 LDR X8, [X20 + 0x20]
	0x02D5911C ADD X9, X8, 0x135
	0x02D59120 LDRH W9, [X9]
	0x02D59124 B 0x2D5912C
	0x02D59128 MOV X0, X8
	0x02D5912C LDR X10, [X0 + 0xC0]
	0x02D59130 LDR X10, [X10 + 0x40]
	0x02D59134 LDR X20, [X10]
	0x02D59138 TBNZ X9, 0x0, 0x2D59148
	0x02D5913C MOV X0, X8
	0x02D59140 BL 0x1C5C684
	0x02D59144 MOV X8, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+24]
	005 Compare X0, 0
	006 JumpIfEqual {30}
	007 Move X8, [X1+32]
	008 Move X8, [X8+192]
	009 Move X1, [X8+224]
	010 Call HashSet`1<Object>.Clear, X0
	011 Move X8, [X19+16]
	012 Compare X8, 0
	013 JumpIfEqual {30}
	014 Move W2, [X8+24]
	015 Move W9, [X8+28]
	016 Add W9, W9, 1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move [X8+24], W31
	019 Move [X8+28], W9
	020 Move X0, [X8+16]
	021 Move W1, W31
	022 Move X3, X31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call Array.Clear, X0, X1, X2
	026 Return 
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return 
	030 Call 0x1C17F20

Method: System.Boolean Contains(T item)

Disassembly:
	0x02D59148 LDR X8, [X8 + 0xC0]
	0x02D5914C ADD X3, X31, 0x8
	0x02D59150 MOV X0, X20
	0x02D59154 MOV X2, X21
	0x02D59158 LDR X1, [X8 + 0x40]
	0x02D5915C STR X19, [X31 + 0x8]
	0x02D59160 MOV X4, X19
	0x02D59164 LDR X8, [X1 + 0x10]
	0x02D59168 BLR X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+240]
	008 Move X30, [X31+16]
	009 Call HashSet`1<Object>.Contains, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void CopyTo(T[] array, System.Int32 arrayIndex)

Disassembly:
	0x02D5916C LDP X20, X19, [X31 + 0x20]
	0x02D59170 LDP X30, X21, [X31 + 0x10]
	0x02D59174 ADD X31, X31, 0x30
	0x02D59178 RET
	0x02D5917C BL 0x1C16F20
	0x02D59180 STP X30, X23, [X31 - 0x30]!
	0x02D59184 STP X22, X21, [X31 + 0x10]
	0x02D59188 STP X20, X19, [X31 + 0x20]
	0x02D5918C MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+256]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.CopyTo, X0, X1, X2
	010 Return 
	011 Call 0x1C17F20

Method: System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x02D59190 LDR X0, [X0 + 0x20]
	0x02D59194 LDRB W8, [X0 + 0x135]
	0x02D59198 TBNZ X8, 0x0, 0x2D591A0
	0x02D5919C BL 0x1C5C684
	0x02D591A0 LDR X8, [X0 + 0xC0]
	0x02D591A4 LDR X0, [X8 + 0x50]
	0x02D591A8 LDRB W8, [X0 + 0x135]
	0x02D591AC TBNZ X8, 0x0, 0x2D591B4
	0x02D591B0 BL 0x1C5C684
	0x02D591B4 LDR W8, [X0 + 0xE0]
	0x02D591B8 CBNZ W8, 0x2D591C0
	0x02D591BC BL 0x1C16DFC
	0x02D591C0 LDR X0, [X19 + 0x20]
	0x02D591C4 LDRB W8, [X0 + 0x135]
	0x02D591C8 TBNZ X8, 0x0, 0x2D591D0
	0x02D591CC BL 0x1C5C684
	0x02D591D0 LDR X8, [X0 + 0xC0]
	0x02D591D4 LDR X0, [X8 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {22}
	008 Move X8, [X0]
	009 Move X19, X4
	010 Move X9, [X8+568]
	011 Move X4, [X8+576]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X8, [X19+32]
	014 Move X0, X20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X8, [X8+192]
	018 Move X1, [X8+144]
	019 Move X30, [X31+32]
	020 Call 0x2D59220, X0
	021 Return 
	022 Call 0x1C17F20

Method: System.Void OnDeserialization(System.Object sender)

Disassembly:
	0x02D591D8 LDRB W8, [X0 + 0x135]
	0x02D591DC TBNZ X8, 0x0, 0x2D591E4
	0x02D591E0 BL 0x1C5C684
	0x02D591E4 LDR X8, [X19 + 0x20]
	0x02D591E8 LDR X9, [X0 + 0xB8]
	0x02D591EC LDRB W10, [X8 + 0x135]
	0x02D591F0 LDR X21, [X9]
	0x02D591F4 TBNZ X10, 0x0, 0x2D59204
	0x02D591F8 MOV X0, X8
	0x02D591FC BL 0x1C5C684
	0x02D59200 MOV X8, X0
	0x02D59204 LDR X8, [X8 + 0xC0]
	0x02D59208 LDR X0, [X8 + 0x60]
	0x02D5920C LDRB W8, [X0 + 0x135]
	0x02D59210 TBNZ X8, 0x0, 0x2D59218
	0x02D59214 BL 0x1C5C684
	0x02D59218 BL 0x1C16F10
	0x02D5921C LDR X8, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {20}
	008 Move X8, [X0]
	009 Move X20, X2
	010 Move X9, [X8+584]
	011 Move X2, [X8+592]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X8, [X20+32]
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X8, [X8+192]
	018 Move X1, [X8+144]
	019 Move X30, [X31+32]
	020 Call 0x1C17F20

Method: System.Void RefreshList()

Disassembly:
	0x02D59220 MOV X20, X0
	0x02D59224 ADD X9, X8, 0x135
	0x02D59228 LDRH W9, [X9]
	0x02D5922C TBNZ X9, 0x0, 0x2D59248
	0x02D59230 MOV X0, X8
	0x02D59234 BL 0x1C5C684
	0x02D59238 LDR X8, [X19 + 0x20]
	0x02D5923C ADD X9, X8, 0x135
	0x02D59240 LDRH W9, [X9]
	0x02D59244 B 0x2D5924C
	0x02D59248 MOV X0, X8
	0x02D5924C LDR X10, [X0 + 0xC0]
	0x02D59250 LDR X10, [X10 + 0x68]
	0x02D59254 LDR X23, [X10]
	0x02D59258 TBNZ X9, 0x0, 0x2D59274
	0x02D5925C MOV X0, X8
	0x02D59260 BL 0x1C5C684
	0x02D59264 LDR X8, [X19 + 0x20]
	0x02D59268 ADD X9, X8, 0x135
	0x02D5926C LDRH W9, [X9]
	0x02D59270 B 0x2D59278
	0x02D59274 MOV X0, X8
	0x02D59278 LDR X10, [X0 + 0xC0]
	0x02D5927C LDR X22, [X10 + 0x58]
	0x02D59280 TBNZ X9, 0x0, 0x2D59290

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Compare X0, 0
	007 JumpIfEqual {31}
	008 Move W2, [X0+24]
	009 Move W8, [X0+28]
	010 Move X20, X1
	011 Add W8, W8, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move [X0+24], W31
	014 Move [X0+28], W8
	015 Move X0, [X0+16]
	016 Move W1, W31
	017 Move X3, X31
	018 Call Array.Clear, X0, X1, X2
	019 Move X0, [X19+16]
	020 Compare X0, 0
	021 JumpIfEqual {31}
	022 Move X8, [X20+32]
	023 Move X1, [X19+24]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X8, [X8+192]
	027 Move X2, [X8+280]
	028 Move X30, [X31+32]
	029 Call List`1<Object>.AddRange, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Collections.Generic.IReadOnlyList`1<T> AsList()

Disassembly:
	0x02D59284 MOV X0, X8
	0x02D59288 BL 0x1C5C684

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

