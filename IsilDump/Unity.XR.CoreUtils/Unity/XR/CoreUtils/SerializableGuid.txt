Type: Unity.XR.CoreUtils.SerializableGuid

Method: Unity.XR.CoreUtils.SerializableGuid get_Empty()

Disassembly:
	0x03B2F78C MOV X20, X31
	0x03B2F790 B 0x3B2F798
	0x03B2F794 MOV X19, X0
	0x03B2F798 LDR X1, [X22]
	0x03B2F79C ADD X0, X31, 0x20
	0x03B2F7A0 BL 0x2BC434C
	0x03B2F7A4 CBNZ X20, 0x3B2F7B0
	0x03B2F7A8 MOV X0, X19
	0x03B2F7AC BL 0x1D2C690
	0x03B2F7B0 MOV X0, X20
	0x03B2F7B4 BL 0x1C16F18
	0x03B2F7B8 BL 0x1990590
	0x03B2F7BC STP X30, X21, [X31 - 0x20]!
	0x03B2F7C0 STP X20, X19, [X31 + 0x10]
	0x03B2F7C4 ADRP X20, 0x8B3000
	0x03B2F7C8 ADRP X21, 0x62A000
	0x03B2F7CC LDRB W8, [X20 + 0x7BA]
	0x03B2F7D0 LDR X21, [X21 + 0xE88]
	0x03B2F7D4 MOV X19, X0
	0x03B2F7D8 TBNZ X8, 0x0, 0x3B2F7F0
	0x03B2F7DC ADRP X0, 0x62A000
	0x03B2F7E0 LDR X0, [X0 + 0xE88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8B4000
	005 Move X19, 0x62B000
	006 Move W8, [X20+1957]
	007 Move X19, [X19+3664]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x62B000
	013 Move X0, [X0+3664]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1957], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X1, [X8+8]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Guid get_Guid()

Disassembly:
	0x03B2F7E4 BL 0x1C16CF4
	0x03B2F7E8 MOVZ W8, 0x1
	0x03B2F7EC STRB W8, [X20 + 0x7BA]

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+8]
	003 Move X0, X8
	004 Call GuidUtil.Compose, X0, X1
	005 Return X0

Method: System.Void .ctor(System.UInt64 guidLow, System.UInt64 guidHigh)

Disassembly:
	0x03B2F7F0 LDR X0, [X21]
	0x03B2F7F4 BL 0x1C16F10

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], X2
	003 Return 

Method: System.Int32 GetHashCode()

Disassembly:
	0x03B2F7F8 MOV X1, X31
	0x03B2F7FC MOV X20, X0
	0x03B2F800 BL 0x33BDD8C
	0x03B2F804 STR W31, [X20 + 0x10]
	0x03B2F808 STR X19, [X20 + 0x20]
	0x03B2F80C MOV X0, X20
	0x03B2F810 LDP X20, X19, [X31 + 0x10]
	0x03B2F814 LDP X30, X21, [X31], #0x20
	0x03B2F818 RET
	0x03B2F81C SUB X31, X31, 0x40
	0x03B2F820 STP X30, X23, [X31 + 0x10]
	0x03B2F824 STP X22, X21, [X31 + 0x20]
	0x03B2F828 STP X20, X19, [X31 + 0x30]
	0x03B2F82C ADRP X21, 0x8B3000
	0x03B2F830 LDRB W8, [X21 + 0x7B9]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call UInt64.GetHashCode, X0
	007 Move W20, W0
	008 Add X0, X19, 8
	009 Move X1, X31
	010 Call UInt64.GetHashCode, X0
	011 Move W8, 0xA2DB
	012 NotImplemented "Instruction MOVK not yet implemented."
	013 NotImplemented "Instruction MADD not yet implemented."
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03B2F834 MOV X19, X1
	0x03B2F838 MOV X20, X0
	0x03B2F83C TBNZ X8, 0x0, 0x3B2F878
	0x03B2F840 ADRP X0, 0x5C4000
	0x03B2F844 LDR X0, [X0 + 0xA28]
	0x03B2F848 BL 0x1C16CF4
	0x03B2F84C ADRP X0, 0x62A000
	0x03B2F850 LDR X0, [X0 + 0xE90]
	0x03B2F854 BL 0x1C16CF4
	0x03B2F858 ADRP X0, 0x62A000
	0x03B2F85C LDR X0, [X0 + 0xE98]
	0x03B2F860 BL 0x1C16CF4
	0x03B2F864 ADRP X0, 0x62A000
	0x03B2F868 LDR X0, [X0 + 0xEA0]
	0x03B2F86C BL 0x1C16CF4
	0x03B2F870 MOVZ W8, 0x1
	0x03B2F874 STRB W8, [X21 + 0x7B9]
	0x03B2F878 CBZ X19, 0x3B2F8D8
	0x03B2F87C LDR W8, [X20 + 0x48]
	0x03B2F880 CBZ W8, 0x3B2F8E0
	0x03B2F884 SUB W8, W8, 0x1
	0x03B2F888 CMP W8, 0x2
	0x03B2F88C B.CS 0x3B2F8D8
	0x03B2F890 MOV X0, X19
	0x03B2F894 MOV X1, X31
	0x03B2F898 BL 0x3E66278
	0x03B2F89C CBZ W0, 0x3B2F920
	0x03B2F8A0 LDR W8, [X20 + 0x48]
	0x03B2F8A4 MOV W21, W0
	0x03B2F8A8 CMP W8, 0x1
	0x03B2F8AC MOVZ W8, 0x1
	0x03B2F8B0 CINC W22, W8, NE
	0x03B2F8B4 ANDS W31, W22, W0, 0x0
	0x03B2F8B8 B.EQ 0x3B2F938
	0x03B2F8BC MOV X0, X19
	0x03B2F8C0 MOV W1, W22
	0x03B2F8C4 MOV X2, X31
	0x03B2F8C8 BL 0x3E661F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8B4000
	006 Move W8, [X21+1958]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x62B000
	014 Move X0, [X0+3664]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1958], W8
	018 Compare X20, 0
	019 JumpIfEqual {40}
	020 Move X21, 0x62B000
	021 Move X21, [X21+3664]
	022 Move X9, [X20]
	023 Move X8, [X21]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call 0x1C17E08
	027 Move X8, X0
	028 Move X0, [X21]
	029 Move X21, [X8]
	030 Move X20, [X8+8]
	031 Move W9, [X0+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X8, [X19]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X19+8]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSET not yet implemented."
	040 Move W0, W31
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0

Method: System.String ToString()

Disassembly:
	0x03B2F8F0 MOV X0, X20
	0x03B2F8F4 BL 0x3B2F230
	0x03B2F8F8 MOVZ W0, 0x1
	0x03B2F8FC LDR W8, [X20 + 0x50]
	0x03B2F900 CMP W8, 0x1
	0x03B2F904 B.EQ 0x3B2F914
	0x03B2F908 LDR W8, [X20 + 0x48]
	0x03B2F90C CMP W8, 0x1
	0x03B2F910 B.NE 0x3B2F920
	0x03B2F914 MOV X0, X19
	0x03B2F918 MOV X1, X31
	0x03B2F91C BL 0x3E661BC
	0x03B2F920 LDP X20, X19, [X31 + 0x30]
	0x03B2F924 LDP X22, X21, [X31 + 0x20]
	0x03B2F928 LDP X30, X23, [X31 + 0x10]
	0x03B2F92C AND W0, W0, 0x1
	0x03B2F930 ADD X31, X31, 0x40
	0x03B2F934 RET
	0x03B2F938 MOV X0, X19
	0x03B2F93C MOV X1, X31
	0x03B2F940 STR W31, [X20 + 0x48]
	0x03B2F944 BL 0x3E6623C
	0x03B2F948 STR W0, [X20 + 0x50]
	0x03B2F94C ADRP X23, 0x62A000
	0x03B2F950 LDR X23, [X23 + 0xE90]
	0x03B2F954 ADD X1, X31, 0xC
	0x03B2F958 STR W22, [X31 + 0xC]
	0x03B2F95C LDR X0, [X23]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8B4000
	007 Move X21, 0x62B000
	008 Move W8, [X20+1959]
	009 Move X21, [X21+3664]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x62B000
	016 Move X0, [X0+3664]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1959], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, [X19]
	026 Move X1, [X19+8]
	027 Call GuidUtil.Compose, X0, X1
	028 Move [X31], X0
	029 Move [X31+8], X1
	030 Add X0, X31, 0
	031 Move X1, X31
	032 Call Guid.ToString, X0
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Add X31, X31, 48
	038 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x03B2F960 BL 0x1C16E04
	0x03B2F964 ADRP X8, 0x62A000
	0x03B2F968 LDR X8, [X8 + 0xEA0]
	0x03B2F96C MOV X1, X0
	0x03B2F970 MOV X2, X31
	0x03B2F974 LDR X8, [X8]
	0x03B2F978 MOV X0, X8
	0x03B2F97C BL 0x321EFD0
	0x03B2F980 MOV X22, X0
	0x03B2F984 LDR X0, [X23]
	0x03B2F988 ADD X1, X31, 0x8
	0x03B2F98C STR W21, [X31 + 0x8]
	0x03B2F990 BL 0x1C16E04
	0x03B2F994 MOV X21, X0
	0x03B2F998 LDR W8, [X20 + 0x50]
	0x03B2F99C LDR X0, [X23]
	0x03B2F9A0 ADD X1, X31, 0x4
	0x03B2F9A4 STR W8, [X31 + 0x4]
	0x03B2F9A8 BL 0x1C16E04
	0x03B2F9AC ADRP X8, 0x62A000
	0x03B2F9B0 LDR X8, [X8 + 0xE98]
	0x03B2F9B4 MOV X2, X0
	0x03B2F9B8 MOV X1, X21
	0x03B2F9BC MOV X3, X31
	0x03B2F9C0 LDR X8, [X8]
	0x03B2F9C4 MOV X0, X8
	0x03B2F9C8 BL 0x3227BD4
	0x03B2F9CC MOV X1, X0
	0x03B2F9D0 MOV X0, X22
	0x03B2F9D4 MOV X2, X31
	0x03B2F9D8 BL 0x321B938
	0x03B2F9DC ADRP X8, 0x5C4000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x8B4000
	008 Move X22, 0x62B000
	009 Move W8, [X21+1960]
	010 Move X22, [X22+3664]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x62B000
	018 Move X0, [X0+3664]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1960], W8
	022 Move X0, [X22]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X1, [X20+8]
	029 Call GuidUtil.Compose, X0, X1
	030 Move [X31], X0
	031 Move [X31+8], X1
	032 Add X0, X31, 0
	033 Move X1, X19
	034 Move X2, X31
	035 Call Guid.ToString, X0, X1
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X30, [X31+16]
	041 Add X31, X31, 64
	042 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x03B2F9E0 LDR X8, [X8 + 0xA28]
	0x03B2F9E4 MOV X21, X0
	0x03B2F9E8 LDR X8, [X8]
	0x03B2F9EC LDR W9, [X8 + 0xE0]
	0x03B2F9F0 CBNZ W9, 0x3B2F9FC
	0x03B2F9F4 MOV X0, X8
	0x03B2F9F8 BL 0x1C16DFC
	0x03B2F9FC MOV X0, X21
	0x03B2FA00 MOV X1, X20
	0x03B2FA04 MOV X2, X31
	0x03B2FA08 BL 0x3C06B0C
	0x03B2FA0C B 0x3B2F8F0
	0x03B2FA10 STP X30, X19, [X31 - 0x10]!
	0x03B2FA14 CBZ X1, 0x3B2FA38
	0x03B2FA18 MOV X19, X0
	0x03B2FA1C MOV X0, X1
	0x03B2FA20 MOV X1, X31
	0x03B2FA24 BL 0x3E6623C
	0x03B2FA28 STR W0, [X19 + 0x50]
	0x03B2FA2C MOV X0, X19
	0x03B2FA30 LDP X30, X19, [X31], #0x10
	0x03B2FA34 B 0x3B2F230
	0x03B2FA38 BL 0x1C16F20
	0x03B2FA3C STR X30, [X31 - 0x20]!
	0x03B2FA40 STP X20, X19, [X31 + 0x10]
	0x03B2FA44 MOV W19, W1
	0x03B2FA48 MOV X1, X31
	0x03B2FA4C MOV X20, X0
	0x03B2FA50 BL 0x33BDD8C
	0x03B2FA54 STR W19, [X20 + 0x10]
	0x03B2FA58 LDP X20, X19, [X31 + 0x10]
	0x03B2FA5C LDR X30, [X31], #0x20
	0x03B2FA60 RET
	0x03B2FA64 STR D8, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x8B4000
	009 Move X23, 0x62B000
	010 Move W8, [X22+1961]
	011 Move X23, [X23+3664]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x62B000
	020 Move X0, [X0+3664]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1961], W8
	024 Move X0, [X23]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, [X21]
	030 Move X1, [X21+8]
	031 Call GuidUtil.Compose, X0, X1
	032 Move [X31], X0
	033 Move [X31+8], X1
	034 Add X0, X31, 0
	035 Move X1, X20
	036 Move X2, X19
	037 Move X3, X31
	038 Call Guid.ToString, X0, X1, X2
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X30, [X31+16]
	044 Move X23, [X31+24]
	045 Add X31, X31, 64
	046 Return X0

Method: System.Boolean Equals(Unity.XR.CoreUtils.SerializableGuid other)

Disassembly:
	0x03B2F8CC TBNZ X0, 0x0, 0x3B2F8F0
	0x03B2F8D0 MOV W0, W31
	0x03B2F8D4 B 0x3B2F8FC
	0x03B2F8D8 MOV W0, W31
	0x03B2F8DC B 0x3B2F920
	0x03B2F8E0 MOV X0, X19
	0x03B2F8E4 MOV X1, X31
	0x03B2F8E8 BL 0x3E6623C
	0x03B2F8EC STR W0, [X20 + 0x50]

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X8, [X0+8]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0
	007 Move W0, W31
	008 Return X0

Method: System.Boolean op_Equality(Unity.XR.CoreUtils.SerializableGuid lhs, Unity.XR.CoreUtils.SerializableGuid rhs)

Disassembly:
	0x03B2FA68 STP X30, X19, [X31 + 0x10]
	0x03B2FA6C MOV X19, X0
	0x03B2FA70 LDR X0, [X0 + 0x38]
	0x03B2FA74 CBZ X0, 0x3B2FAA4
	0x03B2FA78 MOV X1, X31
	0x03B2FA7C MOV V8.16B, V0.16B
	0x03B2FA80 BL 0x3C356F8
	0x03B2FA84 CBZ X0, 0x3B2FAA4
	0x03B2FA88 MOV X1, X31
	0x03B2FA8C BL 0x3C3F988
	0x03B2FA90 MOV X0, X19
	0x03B2FA94 LDP X30, X19, [X31 + 0x10]
	0x03B2FA98 MOV V3.16B, V8.16B
	0x03B2FA9C LDR V8, [X31], #0x20
	0x03B2FAA0 B 0x3B2FAA8
	0x03B2FAA4 BL 0x1C16F20
	0x03B2FAA8 STP D11, D10, [X31 - 0x40]!
	0x03B2FAAC STP D9, D8, [X31 + 0x10]
	0x03B2FAB0 STP X30, X21, [X31 + 0x20]
	0x03B2FAB4 STP X20, X19, [X31 + 0x30]
	0x03B2FAB8 ADRP X20, 0x8B3000
	0x03B2FABC ADRP X21, 0x5C4000
	0x03B2FAC0 LDRB W8, [X20 + 0x7BB]
	0x03B2FAC4 LDR X21, [X21 + 0x598]
	0x03B2FAC8 MOV V8.16B, V3.16B
	0x03B2FACC MOV V9.16B, V2.16B
	0x03B2FAD0 MOV V10.16B, V1.16B
	0x03B2FAD4 MOV V11.16B, V0.16B
	0x03B2FAD8 MOV X19, X0
	0x03B2FADC TBNZ X8, 0x0, 0x3B2FAF4
	0x03B2FAE0 ADRP X0, 0x5C4000
	0x03B2FAE4 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x8B4000
	009 Move X24, 0x62B000
	010 Move W8, [X23+1962]
	011 Move X24, [X24+3664]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x62B000
	021 Move X0, [X0+3664]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1962], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 NotImplemented "Instruction CSET not yet implemented."
	040 And W0, W8, W9
	041 Move X30, [X31+64]
	042 Return X0

Method: System.Boolean op_Inequality(Unity.XR.CoreUtils.SerializableGuid lhs, Unity.XR.CoreUtils.SerializableGuid rhs)

Disassembly:
	0x03B2FAE8 BL 0x1C16CF4
	0x03B2FAEC MOVZ W8, 0x1
	0x03B2FAF0 STRB W8, [X20 + 0x7BB]
	0x03B2FAF4 LDR X0, [X21]
	0x03B2FAF8 LDR X20, [X19 + 0x20]
	0x03B2FAFC LDR W8, [X0 + 0xE0]
	0x03B2FB00 CBNZ W8, 0x3B2FB08
	0x03B2FB04 BL 0x1C16DFC
	0x03B2FB08 MOV X0, X20
	0x03B2FB0C MOV X1, X31
	0x03B2FB10 MOV X2, X31
	0x03B2FB14 BL 0x3C3883C
	0x03B2FB18 TBNZ X0, 0x0, 0x3B2FB44
	0x03B2FB1C LDR X0, [X21]
	0x03B2FB20 LDR X20, [X19 + 0x38]
	0x03B2FB24 LDR W8, [X0 + 0xE0]
	0x03B2FB28 CBNZ W8, 0x3B2FB30
	0x03B2FB2C BL 0x1C16DFC
	0x03B2FB30 MOV X0, X20
	0x03B2FB34 MOV X1, X31
	0x03B2FB38 MOV X2, X31
	0x03B2FB3C BL 0x3C3883C
	0x03B2FB40 TBZ X0, 0x0, 0x3B2FB4C
	0x03B2FB44 MOV W0, W31
	0x03B2FB48 B 0x3B2FBA4
	0x03B2FB4C LDR X0, [X19 + 0x38]
	0x03B2FB50 CBZ X0, 0x3B2FBB8
	0x03B2FB54 MOV X1, X31
	0x03B2FB58 BL 0x3C356F8
	0x03B2FB5C LDR X8, [X19 + 0x20]
	0x03B2FB60 CBZ X8, 0x3B2FBB8
	0x03B2FB64 MOV X19, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x8B4000
	009 Move X24, 0x62B000
	010 Move W8, [X23+1963]
	011 Move X24, [X24+3664]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x62B000
	021 Move X0, [X0+3664]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1963], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 NotImplemented "Instruction CSET not yet implemented."
	040 Or W0, W8, W9
	041 Move X30, [X31+64]
	042 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03B2FB68 MOV X0, X8
	0x03B2FB6C MOV X1, X31
	0x03B2FB70 BL 0x3C32E90
	0x03B2FB74 CBZ X0, 0x3B2FBB8
	0x03B2FB78 MOV X1, X31
	0x03B2FB7C BL 0x3C3F58C
	0x03B2FB80 CBZ X19, 0x3B2FBB8
	0x03B2FB84 MOV X0, X19
	0x03B2FB88 MOV V3.16B, V11.16B
	0x03B2FB8C MOV V4.16B, V10.16B
	0x03B2FB90 MOV V5.16B, V9.16B
	0x03B2FB94 MOV V6.16B, V8.16B
	0x03B2FB98 MOV X1, X31
	0x03B2FB9C BL 0x3C40680
	0x03B2FBA0 MOVZ W0, 0x1
	0x03B2FBA4 LDP X20, X19, [X31 + 0x30]
	0x03B2FBA8 LDP X30, X21, [X31 + 0x20]
	0x03B2FBAC LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8B4000
	005 Move X20, 0x62B000
	006 Move W8, [X19+1964]
	007 Move X20, [X20+3664]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x62B000
	013 Move X0, [X0+3664]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1964], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move [X8+8], X31
	023 Move X30, [X31+32]
	024 Return 

