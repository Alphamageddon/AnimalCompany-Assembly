Type: System.Numerics.BigIntegerCalculator/BitsBuffer

Method: System.Void .ctor(System.Int32 size, System.UInt32 value)

Disassembly:
	0x03610168 CBZ X8, 0x361019C
	0x0361016C CMP W3, W5
	0x03610170 B.GE 0x361019C
	0x03610174 ADD X9, X4, W3, 0x2, UXTW
	0x03610178 ADD W10, W3, 0x1
	0x0361017C LDR W11, [X9]
	0x03610180 ADD X11, X8, X11
	0x03610184 SBFM X8, X11, 0x20, 0x3F
	0x03610188 STR W11, [X9], #0x4
	0x0361018C CBZ X8, 0x361019C
	0x03610190 CMP W10, W5
	0x03610194 ADD W10, W10, 0x1
	0x03610198 B.LT 0x361017C
	0x0361019C RET
	0x036101A0 STP X29, X30, [X31 - 0x60]!
	0x036101A4 STP X28, X27, [X31 + 0x10]
	0x036101A8 STP X26, X25, [X31 + 0x20]
	0x036101AC STP X24, X23, [X31 + 0x30]
	0x036101B0 STP X22, X21, [X31 + 0x40]
	0x036101B4 STP X20, X19, [X31 + 0x50]
	0x036101B8 ADD X29, X31, 0x0
	0x036101BC SUB X31, X31, 0x60
	0x036101C0 MRS X24, 0xC000
	0x036101C4 LDR X8, [X24 + 0x28]
	0x036101C8 ADRP X23, 0xDD0000
	0x036101CC ADRP X27, 0xB2A000
	0x036101D0 MOV W26, W5
	0x036101D4 STUR X8, [X29 - 0x8]
	0x036101D8 LDRB W8, [X23 + 0x429]
	0x036101DC LDR X27, [X27 + 0xE88]
	0x036101E0 MOV X19, X4
	0x036101E4 MOV W25, W3
	0x036101E8 MOV X20, X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDD1000
	008 Move X23, 0xB0D000
	009 Move W8, [X22+1068]
	010 Move X23, [X23+3336]
	011 Move W19, W2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB0D000
	019 Move X0, [X0+3336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1068], W8
	023 Move X0, [X23]
	024 Move W1, W21
	025 Call 0x1C17D6C
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Move [X20], X0
	029 Move [X20+8], W8
	030 Compare X0, 0
	031 JumpIfEqual {43}
	032 Move W8, [X0+24]
	033 Compare W8, 0
	034 JumpIfEqual {44}
	035 Move [X0+32], W19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]
	042 Return 
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Void .ctor(System.Int32 size, System.UInt32[] value)

Disassembly:
	0x03610314 MOV W3, W1
	0x03610318 MOV X4, X19
	0x0361031C MOV W5, W27
	0x03610320 STUR X8, [X29 - 0x30]
	0x03610324 STUR W27, [X29 - 0x28]
	0x03610328 BL 0x36101A0
	0x0361032C MOV X0, X22
	0x03610330 MOV W1, W23
	0x03610334 MOV X2, X24
	0x03610338 MOV W3, W28
	0x0361033C MOV X4, X25
	0x03610340 MOV W5, W26
	0x03610344 STUR X22, [X29 - 0x18]
	0x03610348 STUR X24, [X29 - 0x50]
	0x0361034C STUR X25, [X29 - 0x40]
	0x03610350 BL 0x36101A0
	0x03610354 ADRP X8, 0xB2A000
	0x03610358 LDR X8, [X8 + 0xE88]
	0x0361035C ADD W1, W23, 0x1
	0x03610360 ADD W9, W28, 0x1
	0x03610364 ADD W27, W9, W1
	0x03610368 LDR X25, [X8]
	0x0361036C MOV X24, X9
	0x03610370 STUR W26, [X29 - 0x34]
	0x03610374 STUR W28, [X29 - 0x44]
	0x03610378 LDR X8, [X25 + 0xB8]
	0x0361037C STUR W23, [X29 - 0x54]
	0x03610380 LDR W8, [X8 + 0x8]
	0x03610384 CMP W27, W8
	0x03610388 B.GE 0x36103B0
	0x0361038C SBFM X2, X1, 0x3E, 0x1F
	0x03610390 STUR X1, [X29 - 0x60]
	0x03610394 CBZ W1, 0x36103E0
	0x03610398 ADD X9, X2, 0xF
	0x0361039C ADD X8, X31, 0x0
	0x036103A0 AND X9, X9, 0xFFFFFFFF
	0x036103A4 SUB X28, X8, X9
	0x036103A8 ADD X31, X28, 0x0
	0x036103AC B 0x36103E4
	0x036103B0 ADRP X22, 0xB0C000
	0x036103B4 LDR X22, [X22 + 0xD08]
	0x036103B8 MOV X25, X1
	0x036103BC LDR X0, [X22]
	0x036103C0 BL 0x1C16D6C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xDD1000
	009 Move X24, 0xB0D000
	010 Move X22, 0xB2B000
	011 Move W8, [X23+1069]
	012 Move X24, [X24+3336]
	013 Move X22, [X22+3720]
	014 Move X19, X2
	015 Move W21, W1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xB2B000
	022 Move X0, [X0+3720]
	023 Call 0x1C17CF4
	024 Move X0, 0xB0D000
	025 Move X0, [X0+3336]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+1069], W8
	029 Move X0, [X24]
	030 Move W1, W21
	031 Call 0x1C17D6C
	032 Move [X20], X0
	033 Move X0, [X22]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Call BigIntegerCalculator.ActualLength, X0
	040 Move X2, [X20]
	041 Move W4, W0
	042 Move [X20+8], W0
	043 Move X0, X19
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move W1, W31
	051 Move W3, W31
	052 Move X5, X31
	053 Move X30, [X31+64]
	054 Call Array.Copy, X0, X1, X2, X3, X4
	055 Return 

Method: System.Void MultiplySelf(ref System.Numerics.BigIntegerCalculator/BitsBuffer value, ref System.Numerics.BigIntegerCalculator/BitsBuffer temp)

Disassembly:
	0x03610994 MOV X21, X31
	0x03610998 CBNZ X22, 0x3610980
	0x0361099C MOV X25, X31
	0x036109A0 ADRP X26, 0xB2A000
	0x036109A4 LDR X26, [X26 + 0xE88]
	0x036109A8 CBZ X20, 0x36109C0
	0x036109AC LDR W8, [X20 + 0x18]
	0x036109B0 ADD X9, X20, 0x20
	0x036109B4 CMP W8, 0x0
	0x036109B8 CSEL X22, X31, X9, EQ
	0x036109BC B 0x36109C4
	0x036109C0 MOV X22, X31
	0x036109C4 LDR X0, [X26]
	0x036109C8 LDR W8, [X0 + 0xE0]
	0x036109CC CBNZ W8, 0x36109D4
	0x036109D0 BL 0x1C16DFC
	0x036109D4 MOV X0, X21
	0x036109D8 MOV W1, W23
	0x036109DC MOV X2, X25
	0x036109E0 MOV W3, W24
	0x036109E4 BL 0x360E8B8
	0x036109E8 MOV X0, X19
	0x036109EC MOV W1, W23
	0x036109F0 BL 0x360FCDC
	0x036109F4 CBZ X20, 0x3610AAC
	0x036109F8 MOV W23, W0
	0x036109FC LDR X0, [X26]
	0x03610A00 LDR W8, [X0 + 0xE0]
	0x03610A04 CBNZ W8, 0x3610A0C
	0x03610A08 BL 0x1C16DFC
	0x03610A0C LDR W3, [X20 + 0x18]
	0x03610A10 CMP W23, W3
	0x03610A14 B.LT 0x3610A74
	0x03610A18 B.GT 0x3610A40
	0x03610A1C SUB W8, W23, 0x1
	0x03610A20 TBNZ X8, 0x1F, 0x3610A40
	0x03610A24 LDR W9, [X21, W8, UXTW]
	0x03610A28 LDR W10, [X22, W8, UXTW]
	0x03610A2C CMP W9, W10
	0x03610A30 B.CC 0x3610A74
	0x03610A34 CMP W9, W10
	0x03610A38 SUB W8, W8, 0x1
	0x03610A3C B.LS 0x3610A20
	0x03610A40 LDR X0, [X26]
	0x03610A44 LDR W8, [X0 + 0xE0]
	0x03610A48 CBNZ W8, 0x3610A54
	0x03610A4C BL 0x1C16DFC
	0x03610A50 LDR W3, [X20 + 0x18]
	0x03610A54 MOV X0, X21
	0x03610A58 MOV W1, W23
	0x03610A5C MOV X2, X22
	0x03610A60 BL 0x360E8B8
	0x03610A64 MOV X0, X19
	0x03610A68 MOV W1, W23
	0x03610A6C BL 0x360FCDC
	0x03610A70 B 0x36109F8
	0x03610A74 CBZ X19, 0x3610AAC
	0x03610A78 LDR W8, [X19 + 0x18]
	0x03610A7C MOV X0, X19
	0x03610A80 MOV W1, W23
	0x03610A84 MOV X3, X31
	0x03610A88 SUB W2, W8, W23
	0x03610A8C BL 0x339FA34
	0x03610A90 MOV W0, W23
	0x03610A94 LDP X20, X19, [X31 + 0x40]
	0x03610A98 LDP X22, X21, [X31 + 0x30]
	0x03610A9C LDP X24, X23, [X31 + 0x20]
	0x03610AA0 LDP X26, X25, [X31 + 0x10]
	0x03610AA4 LDR X30, [X31], #0x50
	0x03610AA8 RET
	0x03610AAC BL 0x1C16F20
	0x03610AB0 STR X30, [X31 - 0x30]!
	0x03610AB4 STP X22, X21, [X31 + 0x10]
	0x03610AB8 STP X20, X19, [X31 + 0x20]
	0x03610ABC ADRP X22, 0xDD0000
	0x03610AC0 LDRB W8, [X22 + 0x436]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0xDD1000
	011 Move W8, [X22+1070]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xB2B000
	020 Move X0, [X0+3720]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1070], W8
	024 Move X8, [X21]
	025 Compare X8, 0
	026 JumpIfEqual {31}
	027 Move W9, [X8+24]
	028 Add X8, X8, 32
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Move X22, X31
	032 Move X8, [X20]
	033 Compare X8, 0
	034 JumpIfEqual {39}
	035 Move W9, [X8+24]
	036 Add X8, X8, 32
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move X23, X31
	040 Move X8, 0xB2B000
	041 Move X9, [X19]
	042 Move X8, [X8+3720]
	043 Compare X9, 0
	044 JumpIfEqual {49}
	045 Move W10, [X9+24]
	046 Add X9, X9, 32
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Move X24, X31
	050 Move X0, [X8]
	051 Move W25, [X21+8]
	052 Move W26, [X20+8]
	053 Move W8, [X0+224]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Add W5, W26, W25
	059 Move X0, X23
	060 Move W1, W26
	061 Move X2, X22
	062 Move W3, W25
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Add W5, W26, W25
	067 Move X0, X22
	068 Move W1, W25
	069 Move X2, X23
	070 Move W3, W26
	071 Move X4, X24
	072 Call BigIntegerCalculator.Multiply, X0, X1, X2, X3, X4, X5
	073 Move W8, [X21+8]
	074 Move W9, [X20+8]
	075 Move X0, X21
	076 Move X1, X19
	077 Move X20, [X31+64]
	078 Move X19, [X31+72]
	079 Move X22, [X31+48]
	080 Move X21, [X31+56]
	081 Move X24, [X31+32]
	082 Move X23, [X31+40]
	083 Move X26, [X31+16]
	084 Move X25, [X31+24]
	085 Add W2, W9, W8
	086 Move X30, [X31+80]
	087 Call BitsBuffer.Apply, X0, X1, X2
	088 Return 

Method: System.Void SquareSelf(ref System.Numerics.BigIntegerCalculator/BitsBuffer temp)

Disassembly:
	0x03610B90 LDP X22, X21, [X31 + 0x10]
	0x03610B94 LDR X30, [X31], #0x30
	0x03610B98 RET
	0x03610B9C BL 0x1C16F28
	0x03610BA0 STP X29, X30, [X31 - 0x60]!
	0x03610BA4 STP X28, X27, [X31 + 0x10]
	0x03610BA8 STP X26, X25, [X31 + 0x20]
	0x03610BAC STP X24, X23, [X31 + 0x30]
	0x03610BB0 STP X22, X21, [X31 + 0x40]
	0x03610BB4 STP X20, X19, [X31 + 0x50]
	0x03610BB8 ADD X29, X31, 0x0
	0x03610BBC SUB X31, X31, 0x70
	0x03610BC0 STP X6, X7, [X29 - 0x68]
	0x03610BC4 STUR W3, [X29 - 0x44]
	0x03610BC8 STUR W0, [X29 - 0x54]
	0x03610BCC MRS X21, 0xC000
	0x03610BD0 LDR X8, [X21 + 0x28]
	0x03610BD4 ADRP X20, 0xDD0000
	0x03610BD8 ADRP X19, 0xB24000
	0x03610BDC MOV W22, W4
	0x03610BE0 STUR X8, [X29 - 0x8]
	0x03610BE4 STP X1, X2, [X29 - 0x18]
	0x03610BE8 LDRB W8, [X20 + 0x437]
	0x03610BEC LDR X19, [X19 + 0x940]
	0x03610BF0 TBNZ X8, 0x0, 0x3610C74
	0x03610BF4 ADRP X0, 0xB0E000
	0x03610BF8 LDR X0, [X0 + 0xD50]
	0x03610BFC BL 0x1C16CF4
	0x03610C00 ADRP X0, 0xB0E000
	0x03610C04 LDR X0, [X0 + 0xD68]
	0x03610C08 BL 0x1C16CF4
	0x03610C0C ADRP X0, 0xB24000
	0x03610C10 LDR X0, [X0 + 0x940]
	0x03610C14 BL 0x1C16CF4
	0x03610C18 ADRP X0, 0xB0E000
	0x03610C1C LDR X0, [X0 + 0x2F0]
	0x03610C20 BL 0x1C16CF4
	0x03610C24 ADRP X0, 0xB12000
	0x03610C28 LDR X0, [X0 + 0x4E8]
	0x03610C2C BL 0x1C16CF4
	0x03610C30 ADRP X0, 0xB11000
	0x03610C34 LDR X0, [X0 + 0x838]
	0x03610C38 BL 0x1C16CF4
	0x03610C3C ADRP X0, 0xB12000
	0x03610C40 LDR X0, [X0 + 0x928]
	0x03610C44 BL 0x1C16CF4
	0x03610C48 ADRP X0, 0xB12000
	0x03610C4C LDR X0, [X0 + 0x2F8]
	0x03610C50 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xDD1000
	008 Move W8, [X21+1071]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB2B000
	016 Move X0, [X0+3720]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1071], W8
	020 Move X8, [X20]
	021 Compare X8, 0
	022 JumpIfEqual {27}
	023 Move W9, [X8+24]
	024 Add X8, X8, 32
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 Move X21, X31
	028 Move X8, 0xB2B000
	029 Move X9, [X19]
	030 Move X8, [X8+3720]
	031 Compare X9, 0
	032 JumpIfEqual {37}
	033 Move W10, [X9+24]
	034 Add X9, X9, 32
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Move X22, X31
	038 Move X0, [X8]
	039 Move W23, [X20+8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move W3, W23
	045 ShiftRight W3, 31
	046 And W3, W3, 0x3FFFFFFF
	047 Move X0, X21
	048 Move W1, W23
	049 Move X2, X22
	050 Call BigIntegerCalculator.Square, X0, X1, X2, X3
	051 Move W8, [X20+8]
	052 Move X0, X20
	053 Move X1, X19
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move W2, W8
	059 ShiftRight W2, 31
	060 And W2, W2, 0x3FFFFFFF
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Call BitsBuffer.Apply, X0, X1, X2
	064 Return 

Method: System.Void Reduce(ref System.Numerics.BigIntegerCalculator/FastReducer reducer)

Disassembly:
	0x03610C54 ADRP X0, 0xB17000
	0x03610C58 LDR X0, [X0 + 0xFF0]
	0x03610C5C BL 0x1C16CF4
	0x03610C60 ADRP X0, 0xB2A000
	0x03610C64 LDR X0, [X0 + 0xEE0]
	0x03610C68 BL 0x1C16CF4
	0x03610C6C MOVZ W8, 0x1
	0x03610C70 STRB W8, [X20 + 0x437]
	0x03610C74 ADD X8, X31, 0x0
	0x03610C78 MOVI V0.2D, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move W2, [X0+8]
	005 Move X19, X0
	006 Move X0, X1
	007 Move X1, X8
	008 Call FastReducer.Reduce, X0, X1, X2
	009 Move [X19+8], W0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void Reduce(System.UInt32[] modulus)

Disassembly:
	0x03610AC4 MOV X19, X2
	0x03610AC8 MOV X21, X1
	0x03610ACC MOV X20, X0
	0x03610AD0 TBNZ X8, 0x0, 0x3610AE8
	0x03610AD4 ADRP X0, 0xB12000
	0x03610AD8 LDR X0, [X0 + 0x28]
	0x03610ADC BL 0x1C16CF4
	0x03610AE0 MOVZ W8, 0x1
	0x03610AE4 STRB W8, [X22 + 0x436]
	0x03610AE8 MOVN W8, 0x0
	0x03610AEC STR W8, [X19]
	0x03610AF0 CBZ W21, 0x3610B48
	0x03610AF4 LDRH W0, [X20]
	0x03610AF8 AND W8, W0, 0xFFFFFFDF
	0x03610AFC SUB W8, W8, 0x41
	0x03610B00 AND W8, W8, 0xFFFF
	0x03610B04 CMP W8, 0x19
	0x03610B08 B.HI 0x3610B40
	0x03610B0C CMP W21, 0x2
	0x03610B10 B.LT 0x3610B24
	0x03610B14 LDRH W8, [X20 + 0x2]
	0x03610B18 SUB W8, W8, 0x30
	0x03610B1C CMP W8, 0x9
	0x03610B20 B.LS 0x3610B50
	0x03610B24 MOVZ W9, 0x1
	0x03610B28 MOVN W8, 0x0
	0x03610B2C CMP W9, W21
	0x03610B30 B.GE 0x3610B88
	0x03610B34 B.CS 0x3610B9C
	0x03610B38 LDRH W9, [X20, W9, SXTW]
	0x03610B3C CBZ W9, 0x3610B88
	0x03610B40 MOV W0, W31
	0x03610B44 B 0x3610B8C
	0x03610B48 MOVZ W0, 0x52
	0x03610B4C B 0x3610B8C
	0x03610B50 MOVZ W9, 0x2
	0x03610B54 MOVZ W10, 0xA
	0x03610B58 CMP W21, W9
	0x03610B5C B.EQ 0x3610B88
	0x03610B60 LDRH W11, [X20, W9, SXTW]
	0x03610B64 SUB W12, W11, 0x30
	0x03610B68 CMP W12, 0xA
	0x03610B6C B.CS 0x3610B2C
	0x03610B70 MADD W8, W8, W10, W11
	0x03610B74 SUB W8, W8, 0x30
	0x03610B78 CMP W8, 0x9
	0x03610B7C ADD W9, W9, 0x1
	0x03610B80 B.LE 0x3610B58
	0x03610B84 B 0x3610B2C
	0x03610B88 STR W8, [X19]
	0x03610B8C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xDD1000
	008 Move W8, [X21+1072]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB2B000
	016 Move X0, [X0+3720]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1072], W8
	020 Compare X20, 0
	021 JumpIfEqual {61}
	022 Move W21, [X19+8]
	023 Move W3, [X20+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, [X19]
	026 Compare X8, 0
	027 JumpIfEqual {32}
	028 Move W9, [X8+24]
	029 Add X8, X8, 32
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move X22, X31
	033 Move X8, 0xB2B000
	034 Move X8, [X8+3720]
	035 Add X9, X20, 32
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move W3, [X20+24]
	044 Move X0, X22
	045 Move W1, W21
	046 Move X2, X23
	047 Move X4, X31
	048 Move W5, W31
	049 Call BigIntegerCalculator.Divide, X0, X1, X2, X3, X4, X5
	050 Move X0, [X19]
	051 Move W1, [X20+24]
	052 Call BigIntegerCalculator.ActualLength, X0, X1
	053 Move [X19+8], W0
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Return 
	061 Call 0x1C17F20

Method: System.UInt32[] GetBits()

Disassembly:
	0x036117B4 ANDS X31, X8, X9, 0x0
	0x036117B8 B.EQ 0x361186C

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Int32 GetSize()

Disassembly:
	0x036104EC LDUR W8, [X29 - 0x24]
	0x036104F0 SUB W1, W8, W21
	0x036104F4 BL 0x360E7CC
	0x036104F8 LDUR X24, [X29 - 0x20]
	0x036104FC LDR X8, [X24 + 0x28]
	0x03610500 B 0x3610604
	0x03610504 MOV X26, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void Apply(ref System.Numerics.BigIntegerCalculator/BitsBuffer temp, System.Int32 maxLength)

Disassembly:
	0x03611684 UBFM W8, W8, 0x1F, 0x1E
	0x03611688 LDR X0, [X10]
	0x0361168C SMADDL X8, X8, X9, X31
	0x03611690 UBFM X9, X8, 0x20, 0x3F
	0x03611694 UBFM X8, X8, 0x3F, 0x3F
	0x03611698 ADD W8, W8, W9, 0x1, ASR
	0x0361169C MOVZ W23, 0xCA00
	0x036116A0 ADD W1, W8, 0x2
	0x036116A4 MOVK W23, 0x3B9A0000
	0x036116A8 BL 0x1C16D6C
	0x036116AC MOVZ W9, 0x4B83
	0x036116B0 MOV X28, X0
	0x036116B4 MOV W11, W31
	0x036116B8 ADD X8, X0, 0x20
	0x036116BC MOVK W9, 0x40000
	0x036116C0 MOV W20, W11
	0x036116C4 SUBS W19, W19, 0x1
	0x036116C8 B.MI 0x3611778
	0x036116CC LDUR X10, [X29 - 0x10]
	0x036116D0 CBZ X10, 0x3611BBC
	0x036116D4 LDR W11, [X10 + 0x18]
	0x036116D8 CMP W19, W11
	0x036116DC B.CS 0x3611C68
	0x036116E0 ADD X10, X10, W19, 0x2, UXTW
	0x036116E4 LDR W10, [X10 + 0x20]
	0x036116E8 CMP W20, 0x1
	0x036116EC B.LT 0x3611728
	0x036116F0 CBZ X28, 0x3611BBC
	0x036116F4 LDR W11, [X28 + 0x18]
	0x036116F8 MOV X12, X31
	0x036116FC CMP X12, X11
	0x03611700 B.CS 0x3611C68
	0x03611704 LDR W13, [X8, X12, LSL #2]
	0x03611708 MOV W14, W10
	0x0361170C BFM X14, X13, 0x20, 0x1F
	0x03611710 UDIV X10, X14, X23
	0x03611714 MSUB W13, W10, W23, W14

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDD0000
	008 Move X23, 0xB2A000
	009 Move W8, [X22+1073]
	010 Move X23, [X23+3720]
	011 Move W20, W2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB2A000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1073], W8
	023 Move X0, [X19]
	024 Move W2, [X19+8]
	025 Move W1, W31
	026 Move X3, X31
	027 Call Array.Clear, X0, X1, X2
	028 Move X8, [X19]
	029 Move X22, [X21]
	030 Move [X21], X8
	031 Move [X19], X22
	032 Move X0, [X23]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X22
	038 Move W1, W20
	039 Call BigIntegerCalculator.ActualLength, X0, X1
	040 Move [X19+8], W0
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return 

