Type: System.Numerics.BigIntegerCalculator

Method: System.UInt32[] Add(System.UInt32[] left, System.UInt32 right)

Disassembly:
	0x0360E6DC CBNZ X8, 0x360E6EC
	0x0360E6E0 MOV X0, X19
	0x0360E6E4 BL 0x1C5C6E0
	0x0360E6E8 LDR X8, [X19 + 0x38]
	0x0360E6EC LDR X0, [X8 + 0x10]
	0x0360E6F0 LDRB W8, [X0 + 0x135]
	0x0360E6F4 TBNZ X8, 0x0, 0x360E6FC
	0x0360E6F8 BL 0x1C5C684
	0x0360E6FC LDR W8, [X0 + 0xE0]
	0x0360E700 CBNZ W8, 0x360E708
	0x0360E704 BL 0x1C16DFC
	0x0360E708 LDR X8, [X19 + 0x38]
	0x0360E70C LDR X0, [X8 + 0x10]
	0x0360E710 LDRB W8, [X0 + 0x135]
	0x0360E714 TBNZ X8, 0x0, 0x360E71C
	0x0360E718 BL 0x1C5C684
	0x0360E71C LDR X8, [X0 + 0xB8]
	0x0360E720 LDR X9, [X20]
	0x0360E724 LDP X20, X19, [X31 + 0x20]
	0x0360E728 LDP X30, X21, [X31 + 0x10]
	0x0360E72C LDR X8, [X8]
	0x0360E730 LDR X9, [X9 + 0xB8]
	0x0360E734 STR X8, [X9 + 0x40]
	0x0360E738 LDR V8, [X31], #0x30
	0x0360E73C RET
	0x0360E740 BL 0x1C16F20
	0x0360E744 BL 0x1C16F28
	0x0360E748 CMP W3, 0x1
	0x0360E74C B.LT 0x360E784
	0x0360E750 MOV X8, X31
	0x0360E754 MOV W9, W3
	0x0360E758 MOV X10, X4
	0x0360E75C MOV X11, X0
	0x0360E760 LDR W12, [X11], #0x4
	0x0360E764 LDR W13, [X2], #0x4
	0x0360E768 SUBS X9, X9, 0x1
	0x0360E76C ADD X8, X8, X12
	0x0360E770 ADD X8, X8, X13
	0x0360E774 STR W8, [X10], #0x4
	0x0360E778 SBFM X8, X8, 0x20, 0x3F
	0x0360E77C B.NE 0x360E760
	0x0360E780 B 0x360E78C
	0x0360E784 MOV X8, X31
	0x0360E788 MOV W3, W31
	0x0360E78C CMP W3, W1
	0x0360E790 B.GE 0x360E7C0
	0x0360E794 MOV W9, W1
	0x0360E798 ADD X10, X0, W3, 0x2, UXTW
	0x0360E79C ADD X11, X4, W3, 0x2, UXTW
	0x0360E7A0 SUB X12, X9, W3, UXTW
	0x0360E7A4 LDR W13, [X10], #0x4
	0x0360E7A8 SUBS X12, X12, 0x1
	0x0360E7AC ADD X8, X8, X13
	0x0360E7B0 STR W8, [X11], #0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD3000
	006 Move W8, [X21+1042]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB0F000
	014 Move X0, [X0+3336]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1042], W8
	018 Compare X19, 0
	019 JumpIfEqual {67}
	020 Move X8, 0xB0F000
	021 Move X8, [X8+3336]
	022 Move W9, [X19+24]
	023 Move X0, [X8]
	024 Add W1, W9, 1
	025 Call 0x1C17D6C
	026 Move X8, [X19+24]
	027 Compare W8, 0
	028 JumpIfEqual {66}
	029 Compare X0, 0
	030 JumpIfEqual {67}
	031 Move X9, [X0+24]
	032 Compare W9, 0
	033 JumpIfEqual {66}
	034 Move W11, [X19+32]
	035 And X10, X8, 0
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X11, X11, W20
	038 Move [X0+32], W11
	039 Move X11, X11
	040 ShiftRight X11, 32
	041 And X11, X11, 0x7FFFFFFF
	042 And X14, X9, 0
	043 Add X12, X19, 36
	044 Add X13, X0, 36
	045 Subtract X14, X14, 1
	046 Subtract X15, X10, 1
	047 Compare X14, 0
	048 JumpIfEqual {66}
	049 Move W16, [X12+4]
	050 Subtract X14, X14, 1
	051 Subtract X15, X15, 1
	052 Add X11, X11, X16
	053 Move [X13+4], W11
	054 NotImplemented "Instruction SBFM not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X8, X10
	059 ShiftRight X8, 32
	060 And X8, X8, 0x7FFFFFFF
	061 Add X8, X0, X8
	062 Move [X8+32], W11
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Return X0
	066 Call 0x1C17F28
	067 Call 0x1C17F20

Method: System.UInt32[] Add(System.UInt32[] left, System.UInt32[] right)

Disassembly:
	0x0360E7B4 SBFM X8, X8, 0x20, 0x3F
	0x0360E7B8 B.NE 0x360E7A4
	0x0360E7BC B 0x360E7C4
	0x0360E7C0 MOV W9, W3
	0x0360E7C4 STR W8, [X4, X9, LSL #2]
	0x0360E7C8 RET
	0x0360E7CC CMP W3, 0x1
	0x0360E7D0 B.LT 0x360E83C
	0x0360E7D4 MOV W9, W3
	0x0360E7D8 MOV X8, X31
	0x0360E7DC MOV X10, X9
	0x0360E7E0 MOV X11, X0
	0x0360E7E4 LDR W12, [X11]
	0x0360E7E8 LDR W13, [X2], #0x4
	0x0360E7EC SUBS X10, X10, 0x1
	0x0360E7F0 ADD X8, X8, X12
	0x0360E7F4 ADD X8, X8, X13
	0x0360E7F8 STR W8, [X11], #0x4
	0x0360E7FC SBFM X8, X8, 0x20, 0x3F
	0x0360E800 B.NE 0x360E7E4
	0x0360E804 CBZ X8, 0x360E83C
	0x0360E808 CMP W3, W1
	0x0360E80C B.GE 0x360E83C
	0x0360E810 SXTW X10, W1
	0x0360E814 ADD X11, X0, W3, 0x2, UXTW
	0x0360E818 ADD X9, X9, 0x1
	0x0360E81C LDR W12, [X11]
	0x0360E820 ADD X12, X8, X12
	0x0360E824 SBFM X8, X12, 0x20, 0x3F
	0x0360E828 STR W12, [X11], #0x4
	0x0360E82C CBZ X8, 0x360E83C
	0x0360E830 CMP X9, X10
	0x0360E834 ADD X9, X9, 0x1
	0x0360E838 B.LT 0x360E81C
	0x0360E83C RET
	0x0360E840 CMP W3, 0x1
	0x0360E844 B.LT 0x360E87C
	0x0360E848 MOV X8, X31
	0x0360E84C MOV W9, W3
	0x0360E850 MOV X10, X4
	0x0360E854 MOV X11, X0
	0x0360E858 LDR W12, [X11], #0x4
	0x0360E85C LDR W13, [X2], #0x4
	0x0360E860 SUBS X9, X9, 0x1
	0x0360E864 ADD X8, X8, X12
	0x0360E868 SUB X8, X8, X13
	0x0360E86C STR W8, [X10], #0x4
	0x0360E870 SBFM X8, X8, 0x20, 0x3F
	0x0360E874 B.NE 0x360E858
	0x0360E878 B 0x360E884
	0x0360E87C MOV X8, X31
	0x0360E880 MOV W3, W31
	0x0360E884 CMP W3, W1
	0x0360E888 B.GE 0x360E8B4
	0x0360E88C MOV W11, W1
	0x0360E890 ADD X9, X0, W3, 0x2, UXTW
	0x0360E894 ADD X10, X4, W3, 0x2, UXTW
	0x0360E898 SUB X11, X11, W3, UXTW
	0x0360E89C LDR W12, [X9], #0x4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xDD3000
	008 Move W8, [X21+1043]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xB2D000
	016 Move X0, [X0+3720]
	017 Call 0x1C17CF4
	018 Move X0, 0xB0F000
	019 Move X0, [X0+3336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1043], W8
	023 Compare X20, 0
	024 JumpIfEqual {73}
	025 Move X8, 0xB0F000
	026 Move X8, [X8+3336]
	027 Move W9, [X20+24]
	028 Move X0, [X8]
	029 Add W1, W9, 1
	030 Call 0x1C17D6C
	031 Move X21, X0
	032 Compare X19, 0
	033 JumpIfEqual {40}
	034 Move W8, [X19+24]
	035 Add X9, X19, 32
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Compare X21, 0
	039 JumpIfNotEqual {43}
	040 Move X22, X31
	041 Compare X21, 0
	042 JumpIfEqual {73}
	043 Move W8, [X21+24]
	044 Compare W8, 0
	045 JumpIfEqual {74}
	046 Compare X19, 0
	047 JumpIfEqual {73}
	048 Move X8, 0xB2D000
	049 Move X8, [X8+3720]
	050 Move X23, [X20+24]
	051 Move X0, [X8]
	052 Move X1, X23
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {58}
	056 Call 0x1C17DFC
	057 Move X1, [X20+24]
	058 Move W3, [X19+24]
	059 Add X8, X20, 32
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X4, X21, 32
	062 NotImplemented "Instruction CSEL not yet implemented."
	063 Move X2, X22
	064 Call BigIntegerCalculator.Add, X0, X1, X2, X3, X4, X5
	065 Move X0, X21
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return X0
	073 Call 0x1C17F20
	074 Call 0x1C17F28

Method: System.Void Add(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)

Disassembly:
	0x0360F748 STP X26, X25, [X31 + 0x10]
	0x0360F74C STP X24, X23, [X31 + 0x20]
	0x0360F750 STP X22, X21, [X31 + 0x30]
	0x0360F754 STP X20, X19, [X31 + 0x40]
	0x0360F758 ADRP X24, 0xDD1000
	0x0360F75C LDRB W8, [X24 + 0x426]
	0x0360F760 MOV X19, X4
	0x0360F764 MOV X20, X3
	0x0360F768 MOV X21, X2
	0x0360F76C MOV X22, X1
	0x0360F770 MOV X23, X0
	0x0360F774 TBNZ X8, 0x0, 0x360F78C
	0x0360F778 ADRP X0, 0xB2B000
	0x0360F77C LDR X0, [X0 + 0xE88]
	0x0360F780 BL 0x1C16CF4
	0x0360F784 MOVZ W8, 0x1
	0x0360F788 STRB W8, [X24 + 0x426]
	0x0360F78C CBZ X23, 0x360F888
	0x0360F790 LDR W8, [X23 + 0x18]
	0x0360F794 MOV X9, INVALID
	0x0360F798 ADD X9, X9, X8, 0x20, LSL
	0x0360F79C CMP X9, 0x1
	0x0360F7A0 B.LT 0x360F87C
	0x0360F7A4 MOV X24, X31
	0x0360F7A8 CMP X24, W8, UXTW
	0x0360F7AC B.CS 0x360F884
	0x0360F7B0 ADD X8, X23, X24, 0x2, LSL
	0x0360F7B4 LDR W25, [X8 + 0x20]
	0x0360F7B8 MOVZ W26, 0x20
	0x0360F7BC TBZ X25, 0x0, 0x360F7E4
	0x0360F7C0 MOV X0, X20
	0x0360F7C4 MOV X1, X21
	0x0360F7C8 MOV X2, X19

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X31
	003 Move W9, W3
	004 Move X10, X4
	005 Move X11, X0
	006 Move W12, [X11+4]
	007 Move W13, [X2+4]
	008 Subtract X9, X9, 1
	009 Add X8, X8, X12
	010 Add X8, X8, X13
	011 Move [X10+4], W8
	012 NotImplemented "Instruction SBFM not yet implemented."
	013 Move X8, X31
	014 Move W3, W31
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W9, W1
	017 Add X10, X0, W3
	018 Add X11, X4, W3
	019 Subtract X12, X9, W3
	020 Move W13, [X10+4]
	021 Subtract X12, X12, 1
	022 Add X8, X8, X13
	023 Move [X11+4], W8
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 Move W9, W3
	026 Move [X4], W8
	027 Return 

Method: System.Void AddSelf(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)

Disassembly:
	0x0360F7CC BL 0x360F994
	0x0360F7D0 LDR X1, [X20]
	0x0360F7D4 LDR W2, [X20 + 0x8]
	0x0360F7D8 MOV X0, X22
	0x0360F7DC BL 0x3610718
	0x0360F7E0 STR W0, [X20 + 0x8]
	0x0360F7E4 MOV X0, X21
	0x0360F7E8 MOV X1, X19
	0x0360F7EC BL 0x360FB90
	0x0360F7F0 LDR X1, [X21]
	0x0360F7F4 LDR W2, [X21 + 0x8]
	0x0360F7F8 MOV X0, X22
	0x0360F7FC BL 0x3610718
	0x0360F800 SUBS W26, W26, 0x1
	0x0360F804 UBFM W25, W25, 0x1, 0x1F
	0x0360F808 STR W0, [X21 + 0x8]
	0x0360F80C B.NE 0x360F7BC
	0x0360F810 LDR X8, [X23 + 0x18]
	0x0360F814 ADD X24, X24, 0x1
	0x0360F818 SUB W9, W8, 0x1
	0x0360F81C CMP X24, W9, SXTW
	0x0360F820 AND X8, X8, 0x0
	0x0360F824 B.LT 0x360F7A8
	0x0360F828 SXTW X9, W9
	0x0360F82C CBZ W8, 0x360F884
	0x0360F830 ADRP X8, 0xB2B000
	0x0360F834 LDR X8, [X8 + 0xE88]
	0x0360F838 LDR X0, [X8]
	0x0360F83C ADD X8, X23, X9, 0x2, LSL

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W9, W3
	003 Move X8, X31
	004 Move X10, X9
	005 Move X11, X0
	006 Move W12, [X11]
	007 Move W13, [X2+4]
	008 Subtract X10, X10, 1
	009 Add X8, X8, X12
	010 Add X8, X8, X13
	011 Move [X11+4], W8
	012 NotImplemented "Instruction SBFM not yet implemented."
	013 Compare X8, 0
	014 JumpIfEqual {27}
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X10, W1
	017 Add X11, X0, W3
	018 Add X9, X9, 1
	019 Move W12, [X11]
	020 Add X12, X8, X12
	021 NotImplemented "Instruction SBFM not yet implemented."
	022 Move [X11+4], W12
	023 Compare X8, 0
	024 JumpIfEqual {27}
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add X9, X9, 1
	027 Return 

Method: System.UInt32[] Subtract(System.UInt32[] left, System.UInt32 right)

Disassembly:
	0x0360EADC LDR X8, [X8 + 0xD08]
	0x0360EAE0 LDR W1, [X19 + 0x18]
	0x0360EAE4 LDR X0, [X8]
	0x0360EAE8 BL 0x1C16D6C
	0x0360EAEC CBZ X0, 0x360EB20
	0x0360EAF0 LDR W4, [X0 + 0x18]
	0x0360EAF4 MOV X20, X0
	0x0360EAF8 MOV X0, X19
	0x0360EAFC MOV W1, W31
	0x0360EB00 MOV X2, X20
	0x0360EB04 MOV W3, W31
	0x0360EB08 MOV X5, X31
	0x0360EB0C BL 0x339FCE8
	0x0360EB10 MOV X0, X20
	0x0360EB14 LDP X20, X19, [X31 + 0x10]
	0x0360EB18 LDR X30, [X31], #0x20
	0x0360EB1C RET
	0x0360EB20 BL 0x1C16F20
	0x0360EB24 SUB X31, X31, 0xB0
	0x0360EB28 STP X29, X30, [X31 + 0x50]
	0x0360EB2C STP X28, X27, [X31 + 0x60]
	0x0360EB30 STP X26, X25, [X31 + 0x70]
	0x0360EB34 STP X24, X23, [X31 + 0x80]
	0x0360EB38 STP X22, X21, [X31 + 0x90]
	0x0360EB3C STP X20, X19, [X31 + 0xA0]
	0x0360EB40 ADRP X19, 0xDD2000
	0x0360EB44 LDRB W8, [X19 + 0x418]
	0x0360EB48 MOV W24, W3
	0x0360EB4C MOV X20, X2
	0x0360EB50 MOV W21, W1
	0x0360EB54 MOV X25, X0
	0x0360EB58 STR W5, [X31 + 0x38]
	0x0360EB5C STR X4, [X31 + 0x20]
	0x0360EB60 TBNZ X8, 0x0, 0x360EB78
	0x0360EB64 ADRP X0, 0xB2C000
	0x0360EB68 LDR X0, [X0 + 0xE88]
	0x0360EB6C BL 0x1C16CF4
	0x0360EB70 MOVZ W8, 0x1
	0x0360EB74 STRB W8, [X19 + 0x418]
	0x0360EB78 SUB W8, W24, 0x1
	0x0360EB7C ADRP X27, 0xB2C000
	0x0360EB80 LDR W26, [X20, W8, SXTW]
	0x0360EB84 LDR X27, [X27 + 0xE88]
	0x0360EB88 SUBS W8, W24, 0x2
	0x0360EB8C B.LT 0x360EB98
	0x0360EB90 LDR W19, [X20, W8, SXTW]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD3000
	006 Move W8, [X21+1044]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB0F000
	014 Move X0, [X0+3336]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1044], W8
	018 Compare X19, 0
	019 JumpIfEqual {56}
	020 Move X8, 0xB0F000
	021 Move X8, [X8+3336]
	022 Move W1, [X19+24]
	023 Move X0, [X8]
	024 Call 0x1C17D6C
	025 Move X9, [X19+24]
	026 Compare W9, 0
	027 JumpIfEqual {55}
	028 Compare X0, 0
	029 JumpIfEqual {56}
	030 Move X10, [X0+24]
	031 Compare W10, 0
	032 JumpIfEqual {55}
	033 Move W8, [X19+32]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract X8, X8, W20
	036 Move [X0+32], W8
	037 And X12, X9, 0
	038 And X11, X10, 0
	039 Add X9, X19, 36
	040 Add X10, X0, 36
	041 Subtract X11, X11, 1
	042 Subtract X12, X12, 1
	043 Compare X11, 0
	044 JumpIfEqual {55}
	045 Move W13, [X9+4]
	046 Subtract X11, X11, 1
	047 Subtract X12, X12, 1
	048 Add X8, X13, X8
	049 Move [X10+4], W8
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return X0
	055 Call 0x1C17F28
	056 Call 0x1C17F20

Method: System.UInt32[] Subtract(System.UInt32[] left, System.UInt32[] right)

Disassembly:
	0x0360EC14 AND W10, W9, 0x3F
	0x0360EC18 STR X10, [X31 + 0x18]
	0x0360EC1C AND W10, W8, 0x1F
	0x0360EC20 AND W8, W9, 0x1F
	0x0360EC24 STP W8, W10, [X31 + 0x10]
	0x0360EC28 MOV W8, W24
	0x0360EC2C STR X8, [X31]
	0x0360EC30 STR W21, [X31 + 0x34]
	0x0360EC34 STR X25, [X31 + 0x28]
	0x0360EC38 CMP W23, W21
	0x0360EC3C B.GE 0x360EC48
	0x0360EC40 LDR W10, [X25, W23, SXTW]
	0x0360EC44 B 0x360EC4C
	0x0360EC48 MOV W10, W31
	0x0360EC4C CMP W23, 0x1
	0x0360EC50 SUB W22, W23, 0x1
	0x0360EC54 B.LE 0x360EC64
	0x0360EC58 SUB W8, W23, 0x2
	0x0360EC5C LDR W8, [X25, W8, SXTW]
	0x0360EC60 B 0x360EC68
	0x0360EC64 MOV W8, W31
	0x0360EC68 LDR W21, [X25, W22, SXTW]
	0x0360EC6C LDR W9, [X31 + 0x3C]
	0x0360EC70 STR X10, [X31 + 0x40]
	0x0360EC74 BFM X21, X10, 0x20, 0x1F
	0x0360EC78 CMP W9, 0x1
	0x0360EC7C B.LT 0x360ECB4
	0x0360EC80 SUBS W9, W23, 0x3
	0x0360EC84 B.LT 0x360EC90
	0x0360EC88 LDR W9, [X25, W9, SXTW]
	0x0360EC8C B 0x360EC94
	0x0360EC90 MOV W9, W31
	0x0360EC94 LDR X10, [X31 + 0x18]
	0x0360EC98 LDP W13, W12, [X31 + 0x10]
	0x0360EC9C LSLV X10, X21, X10
	0x0360ECA0 LSRV W11, W8, W12
	0x0360ECA4 LSLV W8, W8, W13
	0x0360ECA8 LSRV W9, W9, W12
	0x0360ECAC ORR X21, X10, X11, 0x0
	0x0360ECB0 ORR W8, W9, W8, 0x0
	0x0360ECB4 SUB W9, W23, W24
	0x0360ECB8 STR W9, [X31 + 0x4C]
	0x0360ECBC UDIV X9, X21, X26
	0x0360ECC0 MOVN W10, 0x0
	0x0360ECC4 CMP X9, X10
	0x0360ECC8 ADD X25, X25, W28, 0x2, SXTW
	0x0360ECCC MOV W20, W24
	0x0360ECD0 CSEL X19, X9, X10, CC
	0x0360ECD4 MOV W24, W8
	0x0360ECD8 LDR X0, [X27]
	0x0360ECDC LDR W8, [X0 + 0xE0]
	0x0360ECE0 CBNZ W8, 0x360ECE8
	0x0360ECE4 BL 0x1C16DFC
	0x0360ECE8 MUL X8, X19, X26
	0x0360ECEC MUL X9, X19, X29
	0x0360ECF0 ADD X8, X8, X9, 0x20, LSR
	0x0360ECF4 CMP X8, X21
	0x0360ECF8 B.CC 0x360ED14
	0x0360ECFC CMP X24, W9, UXTW
	0x0360ED00 B.CC 0x360ED0C
	0x0360ED04 CMP X8, X21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xDD3000
	009 Move W8, [X21+1045]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xB2D000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move X0, 0xB0F000
	020 Move X0, [X0+3336]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1045], W8
	024 Compare X20, 0
	025 JumpIfEqual {76}
	026 Move X8, 0xB0F000
	027 Move X8, [X8+3336]
	028 Move W1, [X20+24]
	029 Move X0, [X8]
	030 Call 0x1C17D6C
	031 Move X23, [X20+24]
	032 Move X21, X0
	033 Compare X19, 0
	034 JumpIfEqual {43}
	035 Move W8, [X19+24]
	036 Add X9, X19, 32
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Compare X21, 0
	040 JumpIfEqual {76}
	041 Compare X19, 0
	042 JumpIfNotEqual {48}
	043 Compare X21, 0
	044 JumpIfEqual {76}
	045 Move X22, X31
	046 Compare X19, 0
	047 JumpIfEqual {76}
	048 Move X8, 0xB2D000
	049 Move X8, [X8+3720]
	050 Move X24, [X21+24]
	051 Move X1, X23
	052 Move X0, [X8]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {58}
	056 Call 0x1C17DFC
	057 Move X1, [X20+24]
	058 Move W3, [X19+24]
	059 Add X8, X21, 32
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Add X8, X20, 32
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSEL not yet implemented."
	065 Move X2, X22
	066 Call BigIntegerCalculator.Subtract, X0, X1, X2, X3, X4, X5
	067 Move X0, X21
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X30, [X31+64]
	075 Return X0
	076 Call 0x1C17F20

Method: System.Void Subtract(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)

Disassembly:
	0x0360F840 LDR W23, [X8 + 0x20]
	0x0360F844 LDR W9, [X0 + 0xE0]
	0x0360F848 CBNZ W9, 0x360F850
	0x0360F84C BL 0x1C16DFC
	0x0360F850 MOV W0, W23
	0x0360F854 MOV X1, X22
	0x0360F858 MOV X2, X21
	0x0360F85C MOV X3, X20
	0x0360F860 MOV X4, X19
	0x0360F864 LDP X20, X19, [X31 + 0x40]
	0x0360F868 LDP X22, X21, [X31 + 0x30]
	0x0360F86C LDP X24, X23, [X31 + 0x20]
	0x0360F870 LDP X26, X25, [X31 + 0x10]
	0x0360F874 LDR X30, [X31], #0x50
	0x0360F878 B 0x360F908
	0x0360F87C SBFM X9, X9, 0x20, 0x3F
	0x0360F880 CBNZ W8, 0x360F830
	0x0360F884 BL 0x1C16F28
	0x0360F888 BL 0x1C16F20
	0x0360F88C STP X30, X23, [X31 - 0x30]!
	0x0360F890 STP X22, X21, [X31 + 0x10]
	0x0360F894 STP X20, X19, [X31 + 0x20]
	0x0360F898 CBZ W0, 0x360F8F8
	0x0360F89C MOV X19, X4
	0x0360F8A0 MOV X20, X3
	0x0360F8A4 MOV X21, X2
	0x0360F8A8 MOV X22, X1
	0x0360F8AC MOV W23, W0
	0x0360F8B0 TBZ X23, 0x0, 0x360F8D0
	0x0360F8B4 MOV X0, X20

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X31
	003 Move W9, W3
	004 Move X10, X4
	005 Move X11, X0
	006 Move W12, [X11+4]
	007 Move W13, [X2+4]
	008 Subtract X9, X9, 1
	009 Add X8, X8, X12
	010 Subtract X8, X8, X13
	011 Move [X10+4], W8
	012 NotImplemented "Instruction SBFM not yet implemented."
	013 Move X8, X31
	014 Move W3, W31
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W11, W1
	017 Add X9, X0, W3
	018 Add X10, X4, W3
	019 Subtract X11, X11, W3
	020 Move W12, [X9+4]
	021 Subtract X11, X11, 1
	022 Add X8, X8, X12
	023 Move [X10+4], W8
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 Return 

Method: System.Void SubtractSelf(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)

Disassembly:
	0x0360F8B8 MOV X1, X21
	0x0360F8BC MOV X2, X19
	0x0360F8C0 BL 0x360F994
	0x0360F8C4 MOV X0, X20
	0x0360F8C8 MOV X1, X22
	0x0360F8CC BL 0x360FAC4
	0x0360F8D0 CMP W23, 0x1
	0x0360F8D4 B.EQ 0x360F8F8
	0x0360F8D8 MOV X0, X21
	0x0360F8DC MOV X1, X19
	0x0360F8E0 BL 0x360FB90
	0x0360F8E4 MOV X0, X21
	0x0360F8E8 MOV X1, X22
	0x0360F8EC BL 0x360FAC4
	0x0360F8F0 UBFM W23, W23, 0x1, 0x1F
	0x0360F8F4 CBNZ W23, 0x360F8B0
	0x0360F8F8 LDP X20, X19, [X31 + 0x20]
	0x0360F8FC LDP X22, X21, [X31 + 0x10]
	0x0360F900 LDP X30, X23, [X31], #0x30
	0x0360F904 RET
	0x0360F908 STP X30, X23, [X31 - 0x30]!
	0x0360F90C STP X22, X21, [X31 + 0x10]
	0x0360F910 STP X20, X19, [X31 + 0x20]
	0x0360F914 CBZ W0, 0x360F984
	0x0360F918 MOV X19, X4
	0x0360F91C MOV X20, X3
	0x0360F920 MOV X21, X2
	0x0360F924 MOV X22, X1
	0x0360F928 MOV W23, W0

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W9, W3
	003 Move X8, X31
	004 Move X10, X9
	005 Move X11, X0
	006 Move W12, [X11]
	007 Move W13, [X2+4]
	008 Subtract X10, X10, 1
	009 Add X8, X8, X12
	010 Subtract X8, X8, X13
	011 Move [X11+4], W8
	012 NotImplemented "Instruction SBFM not yet implemented."
	013 Compare X8, 0
	014 JumpIfEqual {27}
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X10, W1
	017 Add X11, X0, W3
	018 Add X9, X9, 1
	019 Move W12, [X11]
	020 Add X12, X8, X12
	021 NotImplemented "Instruction SBFM not yet implemented."
	022 Move [X11+4], W12
	023 Compare X8, 0
	024 JumpIfEqual {27}
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add X9, X9, 1
	027 Return 

Method: System.Int32 Compare(System.UInt32[] left, System.UInt32[] right)

Disassembly:
	0x0360EB94 B 0x360EB9C
	0x0360EB98 MOV W19, W31
	0x0360EB9C LDR X0, [X27]
	0x0360EBA0 LDR W8, [X0 + 0xE0]
	0x0360EBA4 CBNZ W8, 0x360EBAC
	0x0360EBA8 BL 0x1C16DFC
	0x0360EBAC MOV W0, W26
	0x0360EBB0 BL 0x360EEBC
	0x0360EBB4 MOVZ W8, 0x20
	0x0360EBB8 CMP W0, 0x1
	0x0360EBBC SUB W8, W8, W0
	0x0360EBC0 STR W0, [X31 + 0x3C]
	0x0360EBC4 STR X20, [X31 + 0x8]
	0x0360EBC8 B.LT 0x360EBFC
	0x0360EBCC SUBS W9, W24, 0x3
	0x0360EBD0 B.LT 0x360EBDC
	0x0360EBD4 LDR W9, [X20, W9, SXTW]
	0x0360EBD8 B 0x360EBE0
	0x0360EBDC MOV W9, W31
	0x0360EBE0 LDR W12, [X31 + 0x3C]
	0x0360EBE4 LSRV W11, W19, W8
	0x0360EBE8 LSRV W9, W9, W8
	0x0360EBEC LSLV W10, W26, W12
	0x0360EBF0 LSLV W12, W19, W12
	0x0360EBF4 ORR W26, W11, W10, 0x0
	0x0360EBF8 ORR W19, W9, W12, 0x0
	0x0360EBFC SUBS W28, W21, W24
	0x0360EC00 B.LT 0x360EDFC
	0x0360EC04 LDR W9, [X31 + 0x3C]
	0x0360EC08 MOV W26, W26
	0x0360EC0C MOV W29, W19
	0x0360EC10 MOV W23, W21

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {27}
	004 Compare X1, 0
	005 JumpIfEqual {27}
	006 Move W8, [X0+24]
	007 Move W9, [X1+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move TEMP, 0
	010 Not TEMP
	011 Move W0, TEMP
	012 Move W10, W8
	013 Subtract W10, W10, 1
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W11, W10
	017 Add X12, X0, X11
	018 Add X11, X1, X11
	019 Move W12, [X12+32]
	020 Move W11, [X11+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W0, 1
	023 Move W0, W31
	024 Move X30, [X31+16]
	025 Return X0
	026 Call 0x1C17F28
	027 Call 0x1C17F20

Method: System.Int32 Compare(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)

Disassembly:
	0x0360F92C TBZ X23, 0x0, 0x360F954
	0x0360F930 MOV X0, X20
	0x0360F934 MOV X1, X21
	0x0360F938 MOV X2, X19
	0x0360F93C BL 0x360F994
	0x0360F940 LDR X1, [X20]
	0x0360F944 LDR W2, [X20 + 0x8]
	0x0360F948 MOV X0, X22
	0x0360F94C BL 0x3610718
	0x0360F950 STR W0, [X20 + 0x8]
	0x0360F954 CMP W23, 0x1
	0x0360F958 B.EQ 0x360F984
	0x0360F95C MOV X0, X21
	0x0360F960 MOV X1, X19
	0x0360F964 BL 0x360FB90
	0x0360F968 LDR X1, [X21]
	0x0360F96C LDR W2, [X21 + 0x8]
	0x0360F970 MOV X0, X22

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move TEMP, 0
	003 Not TEMP
	004 Move W0, TEMP
	005 Return X0
	006 Subtract W8, W1, 1
	007 Move TEMP, X8
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {18}
	011 Move W9, [X0]
	012 Move W10, [X2]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Subtract W8, W8, 1
	016 Move W0, 1
	017 Return X0
	018 Move W0, W31
	019 Return X0

Method: System.UInt32 Remainder(System.UInt32[] left, System.UInt32 right)

Disassembly:
	0x0360F974 BL 0x3610718
	0x0360F978 UBFM W23, W23, 0x1, 0x1F
	0x0360F97C STR W0, [X21 + 0x8]
	0x0360F980 CBNZ W23, 0x360F92C
	0x0360F984 LDP X20, X19, [X31 + 0x20]
	0x0360F988 LDP X22, X21, [X31 + 0x10]
	0x0360F98C LDP X30, X23, [X31], #0x30
	0x0360F990 RET
	0x0360F994 STR X30, [X31 - 0x50]!
	0x0360F998 STP X26, X25, [X31 + 0x10]
	0x0360F99C STP X24, X23, [X31 + 0x20]
	0x0360F9A0 STP X22, X21, [X31 + 0x30]
	0x0360F9A4 STP X20, X19, [X31 + 0x40]
	0x0360F9A8 ADRP X22, 0xDD1000
	0x0360F9AC LDRB W8, [X22 + 0x42E]
	0x0360F9B0 MOV X19, X2
	0x0360F9B4 MOV X20, X1
	0x0360F9B8 MOV X21, X0
	0x0360F9BC TBNZ X8, 0x0, 0x360F9D4
	0x0360F9C0 ADRP X0, 0xB2B000
	0x0360F9C4 LDR X0, [X0 + 0xE88]
	0x0360F9C8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {20}
	004 Move W9, [X0+24]
	005 Move X8, X0
	006 Subtract W11, W9, 1
	007 Add X8, X8, W11
	008 Move X0, X31
	009 Move W10, W1
	010 Add X8, X8, 32
	011 Move W11, [X8-4]
	012 Subtract W9, W9, 1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction BFM not yet implemented."
	015 NotImplemented "Instruction UDIV not yet implemented."
	016 NotImplemented "Instruction MSUB not yet implemented."
	017 Move W0, W31
	018 Move X30, [X31+16]
	019 Return X0
	020 Call 0x1C17F20

Method: System.UInt32[] Divide(System.UInt32[] left, System.UInt32[] right)

Disassembly:
	0x0360F9CC MOVZ W8, 0x1
	0x0360F9D0 STRB W8, [X22 + 0x42E]
	0x0360F9D4 LDR X8, [X21]
	0x0360F9D8 CBZ X8, 0x360F9F0
	0x0360F9DC LDR W9, [X8 + 0x18]
	0x0360F9E0 ADD X8, X8, 0x20
	0x0360F9E4 CMP W9, 0x0
	0x0360F9E8 CSEL X22, X31, X8, EQ
	0x0360F9EC B 0x360F9F4
	0x0360F9F0 MOV X22, X31
	0x0360F9F4 LDR X8, [X20]
	0x0360F9F8 CBZ X8, 0x360FA10
	0x0360F9FC LDR W9, [X8 + 0x18]
	0x0360FA00 ADD X8, X8, 0x20
	0x0360FA04 CMP W9, 0x0
	0x0360FA08 CSEL X23, X31, X8, EQ
	0x0360FA0C B 0x360FA14
	0x0360FA10 MOV X23, X31
	0x0360FA14 ADRP X8, 0xB2B000
	0x0360FA18 LDR X9, [X19]
	0x0360FA1C LDR X8, [X8 + 0xE88]
	0x0360FA20 CBZ X9, 0x360FA38
	0x0360FA24 LDR W10, [X9 + 0x18]
	0x0360FA28 ADD X9, X9, 0x20
	0x0360FA2C CMP W10, 0x0
	0x0360FA30 CSEL X24, X31, X9, EQ
	0x0360FA34 B 0x360FA3C
	0x0360FA38 MOV X24, X31
	0x0360FA3C LDR X0, [X8]
	0x0360FA40 LDR W25, [X21 + 0x8]
	0x0360FA44 LDR W26, [X20 + 0x8]
	0x0360FA48 LDR W8, [X0 + 0xE0]
	0x0360FA4C CMP W25, W26
	0x0360FA50 B.GE 0x360FA74
	0x0360FA54 CBNZ W8, 0x360FA5C
	0x0360FA58 BL 0x1C16DFC
	0x0360FA5C ADD W5, W26, W25
	0x0360FA60 MOV X0, X23
	0x0360FA64 MOV W1, W26
	0x0360FA68 MOV X2, X22
	0x0360FA6C MOV W3, W25
	0x0360FA70 B 0x360FA90
	0x0360FA74 CBNZ W8, 0x360FA7C
	0x0360FA78 BL 0x1C16DFC
	0x0360FA7C ADD W5, W26, W25
	0x0360FA80 MOV X0, X22
	0x0360FA84 MOV W1, W25
	0x0360FA88 MOV X2, X23
	0x0360FA8C MOV W3, W26
	0x0360FA90 MOV X4, X24
	0x0360FA94 BL 0x36101A0
	0x0360FA98 LDR W8, [X21 + 0x8]
	0x0360FA9C LDR W9, [X20 + 0x8]
	0x0360FAA0 MOV X0, X21
	0x0360FAA4 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDD2000
	007 Move X22, 0xB2C000
	008 Move W8, [X21+1046]
	009 Move X22, [X22+3720]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xB2C000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move X0, 0xB0E000
	020 Move X0, [X0+3336]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1046], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Call BigIntegerCalculator.CreateCopy, X0
	031 Compare X20, 0
	032 JumpIfEqual {69}
	033 Compare X19, 0
	034 JumpIfEqual {69}
	035 Move X10, 0xB0E000
	036 Move W8, [X20+24]
	037 Move W9, [X19+24]
	038 Move X10, [X10+3336]
	039 Move X21, X0
	040 Subtract W8, W8, W9
	041 Move X0, [X10]
	042 Add W1, W8, 1
	043 Call 0x1C17D6C
	044 Compare X21, 0
	045 JumpIfEqual {69}
	046 Move W1, [X21+24]
	047 Compare W1, 0
	048 JumpIfEqual {70}
	049 Move W3, [X19+24]
	050 Compare W3, 0
	051 JumpIfEqual {70}
	052 Move X20, X0
	053 Compare X0, 0
	054 JumpIfEqual {69}
	055 Move W5, [X20+24]
	056 Compare W5, 0
	057 JumpIfEqual {70}
	058 Add X2, X19, 32
	059 Add X0, X21, 32
	060 Add X4, X20, 32
	061 Call BigIntegerCalculator.Divide, X0, X1, X2, X3, X4, X5
	062 Move X0, X20
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Return X0
	069 Call 0x1C17F20
	070 Call 0x1C17F28

Method: System.UInt32[] Remainder(System.UInt32[] left, System.UInt32[] right)

Disassembly:
	0x0360FE1C ADD X15, X15, X11
	0x0360FE20 MUL X17, X1, X0
	0x0360FE24 ADD W0, W12, W17, 0x1, LSL
	0x0360FE28 ADD X12, X17, X12, 0x1, LSR
	0x0360FE2C UBFM X12, X12, 0x1F, 0x3F
	0x0360FE30 STR W0, [X16, X19, LSL]
	0x0360FE34 B.NE 0x360FE04
	0x0360FE38 LDR W13, [X20, X9, LSL #2]
	0x0360FE3C MOVZ W15, 0x1
	0x0360FE40 SBFM X14, X9, 0x3D, 0x1E
	0x0360FE44 BFM W15, W9, 0x1F, 0x1E
	0x0360FE48 ADD X9, X9, 0x1
	0x0360FE4C MADD X12, X13, X13, X12
	0x0360FE50 CMP X9, X10
	0x0360FE54 STR W12, [X14, X19, LSL]
	0x0360FE58 UBFM X12, X12, 0x20, 0x3F
	0x0360FE5C ADD X8, X8, X11
	0x0360FE60 STR W12, [X19, W15, SXTW]
	0x0360FE64 B.NE 0x360FDF0
	0x0360FE68 B 0x36100AC
	0x0360FE6C LDR W8, [X0 + 0xE0]
	0x0360FE70 STUR X23, [X29 - 0x10]
	0x0360FE74 SBFM W22, W21, 0x1, 0x1F
	0x0360FE78 AND W23, W21, 0xFFFFFFFE
	0x0360FE7C ADD X26, X20, W22, 0x2, SXTW
	0x0360FE80 SUB W27, W21, W21, 0x1, ASR
	0x0360FE84 ADD X25, X19, W23, 0x2, SXTW
	0x0360FE88 SUB W21, W24, W23
	0x0360FE8C STUR W24, [X29 - 0x14]
	0x0360FE90 CBNZ W8, 0x360FE98
	0x0360FE94 BL 0x1C16DFC
	0x0360FE98 SBFM X8, X22, 0x3E, 0x1F
	0x0360FE9C MOV X0, X20
	0x0360FEA0 MOV W1, W22
	0x0360FEA4 MOV X2, X19
	0x0360FEA8 MOV W3, W23
	0x0360FEAC STUR X8, [X29 - 0x20]
	0x0360FEB0 BL 0x360FD38
	0x0360FEB4 MOV X0, X26
	0x0360FEB8 MOV W1, W27

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDD2000
	007 Move X22, 0xB2C000
	008 Move W8, [X21+1047]
	009 Move X22, [X22+3720]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB2C000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1047], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Call BigIntegerCalculator.CreateCopy, X0
	028 Compare X0, 0
	029 JumpIfEqual {51}
	030 Move W1, [X0+24]
	031 Move X20, X0
	032 Compare W1, 0
	033 JumpIfEqual {52}
	034 Compare X19, 0
	035 JumpIfEqual {51}
	036 Move W3, [X19+24]
	037 Compare W3, 0
	038 JumpIfEqual {52}
	039 Add X0, X20, 32
	040 Add X2, X19, 32
	041 Move X4, X31
	042 Move W5, W31
	043 Call BigIntegerCalculator.Divide, X0, X1, X2, X3, X4, X5
	044 Move X0, X20
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return X0
	051 Call 0x1C17F20
	052 Call 0x1C17F28

Method: System.Void Divide(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)

Disassembly:
	0x0360FB24 B 0x360FB2C
	0x0360FB28 MOV X22, X31
	0x0360FB2C ADRP X8, 0xB2B000
	0x0360FB30 LDR X8, [X8 + 0xE88]
	0x0360FB34 ADD X9, X20, 0x20
	0x0360FB38 CMP W3, 0x0
	0x0360FB3C CSEL X23, X31, X9, EQ
	0x0360FB40 LDR X0, [X8]
	0x0360FB44 LDR W8, [X0 + 0xE0]
	0x0360FB48 CBNZ W8, 0x360FB54
	0x0360FB4C BL 0x1C16DFC
	0x0360FB50 LDR W3, [X20 + 0x18]
	0x0360FB54 MOV X0, X22
	0x0360FB58 MOV W1, W21
	0x0360FB5C MOV X2, X23
	0x0360FB60 MOV X4, X31
	0x0360FB64 MOV W5, W31
	0x0360FB68 BL 0x360EB24
	0x0360FB6C LDR X0, [X19]
	0x0360FB70 LDR W1, [X20 + 0x18]
	0x0360FB74 BL 0x360FCDC
	0x0360FB78 STR W0, [X19 + 0x8]
	0x0360FB7C LDP X20, X19, [X31 + 0x20]
	0x0360FB80 LDP X22, X21, [X31 + 0x10]
	0x0360FB84 LDP X30, X23, [X31], #0x30
	0x0360FB88 RET
	0x0360FB8C BL 0x1C16F20
	0x0360FB90 STP X30, X23, [X31 - 0x30]!
	0x0360FB94 STP X22, X21, [X31 + 0x10]
	0x0360FB98 STP X20, X19, [X31 + 0x20]
	0x0360FB9C ADRP X21, 0xDD1000
	0x0360FBA0 LDRB W8, [X21 + 0x42F]
	0x0360FBA4 MOV X19, X1
	0x0360FBA8 MOV X20, X0
	0x0360FBAC TBNZ X8, 0x0, 0x360FBC4
	0x0360FBB0 ADRP X0, 0xB2B000
	0x0360FBB4 LDR X0, [X0 + 0xE88]
	0x0360FBB8 BL 0x1C16CF4
	0x0360FBBC MOVZ W8, 0x1
	0x0360FBC0 STRB W8, [X21 + 0x42F]
	0x0360FBC4 LDR X8, [X20]
	0x0360FBC8 CBZ X8, 0x360FBE0
	0x0360FBCC LDR W9, [X8 + 0x18]
	0x0360FBD0 ADD X8, X8, 0x20
	0x0360FBD4 CMP W9, 0x0
	0x0360FBD8 CSEL X21, X31, X8, EQ
	0x0360FBDC B 0x360FBE4
	0x0360FBE0 MOV X21, X31
	0x0360FBE4 ADRP X8, 0xB2B000
	0x0360FBE8 LDR X9, [X19]
	0x0360FBEC LDR X8, [X8 + 0xE88]
	0x0360FBF0 CBZ X9, 0x360FC08
	0x0360FBF4 LDR W10, [X9 + 0x18]
	0x0360FBF8 ADD X9, X9, 0x20
	0x0360FBFC CMP W10, 0x0
	0x0360FC00 CSEL X22, X31, X9, EQ
	0x0360FC04 B 0x360FC0C
	0x0360FC08 MOV X22, X31
	0x0360FC0C LDR X0, [X8]
	0x0360FC10 LDR W23, [X20 + 0x8]
	0x0360FC14 LDR W8, [X0 + 0xE0]
	0x0360FC18 CBNZ W8, 0x360FC20
	0x0360FC1C BL 0x1C16DFC
	0x0360FC20 UBFM W3, W23, 0x1F, 0x1E
	0x0360FC24 MOV X0, X21
	0x0360FC28 MOV W1, W23
	0x0360FC2C MOV X2, X22
	0x0360FC30 BL 0x360FD38
	0x0360FC34 LDR W8, [X20 + 0x8]
	0x0360FC38 MOV X0, X20
	0x0360FC3C MOV X1, X19
	0x0360FC40 LDP X20, X19, [X31 + 0x20]
	0x0360FC44 LDP X22, X21, [X31 + 0x10]
	0x0360FC48 UBFM W2, W8, 0x1F, 0x1E
	0x0360FC4C LDP X30, X23, [X31], #0x30
	0x0360FC50 B 0x3610684
	0x0360FC54 STP X30, X19, [X31 - 0x10]!
	0x0360FC58 LDR X8, [X0]
	0x0360FC5C LDR W2, [X0 + 0x8]
	0x0360FC60 MOV X19, X0
	0x0360FC64 MOV X0, X1
	0x0360FC68 MOV X1, X8
	0x0360FC6C BL 0x3610718
	0x0360FC70 STR W0, [X19 + 0x8]
	0x0360FC74 LDP X30, X19, [X31], #0x10
	0x0360FC78 RET
	0x0360FC7C STR X30, [X31 - 0x20]!
	0x0360FC80 STP X20, X19, [X31 + 0x10]
	0x0360FC84 ADRP X20, 0xDD1000
	0x0360FC88 LDRB W8, [X20 + 0x427]
	0x0360FC8C MOV X19, X0
	0x0360FC90 TBNZ X8, 0x0, 0x360FCA8
	0x0360FC94 ADRP X0, 0xB2B000
	0x0360FC98 LDR X0, [X0 + 0xE88]
	0x0360FC9C BL 0x1C16CF4
	0x0360FCA0 MOVZ W8, 0x1
	0x0360FCA4 STRB W8, [X20 + 0x427]
	0x0360FCA8 CBZ X19, 0x360FCD8
	0x0360FCAC ADRP X8, 0xB2B000
	0x0360FCB0 LDR X8, [X8 + 0xE88]
	0x0360FCB4 LDR X0, [X8]
	0x0360FCB8 LDR W8, [X0 + 0xE0]
	0x0360FCBC CBNZ W8, 0x360FCC4
	0x0360FCC0 BL 0x1C16DFC
	0x0360FCC4 LDR W1, [X19 + 0x18]
	0x0360FCC8 MOV X0, X19
	0x0360FCCC LDP X20, X19, [X31 + 0x10]
	0x0360FCD0 LDR X30, [X31], #0x20
	0x0360FCD4 B 0x360FCDC
	0x0360FCD8 BL 0x1C16F20
	0x0360FCDC STR X30, [X31 - 0x10]!
	0x0360FCE0 SXTW X10, W1
	0x0360FCE4 AND W9, W1, W1, 0x1F
	0x0360FCE8 ADD W8, W1, 0x1
	0x0360FCEC ADD X11, X0, 0x1C
	0x0360FCF0 SUBS X12, X10, 0x1
	0x0360FCF4 B.LT 0x360FD20
	0x0360FCF8 CBZ X0, 0x360FD30
	0x0360FCFC LDR W13, [X0 + 0x18]
	0x0360FD00 SUB W14, W8, 0x2
	0x0360FD04 CMP W14, W13
	0x0360FD08 B.CS 0x360FD34
	0x0360FD0C LDR W13, [X11, X10, LSL #2]
	0x0360FD10 SUB W8, W8, 0x1
	0x0360FD14 MOV X10, X12
	0x0360FD18 CBZ W13, 0x360FCF0
	0x0360FD1C B 0x360FD24
	0x0360FD20 MOV W8, W9
	0x0360FD24 MOV W0, W8
	0x0360FD28 LDR X30, [X31], #0x10
	0x0360FD2C RET
	0x0360FD30 BL 0x1C16F20
	0x0360FD34 BL 0x1C16F28
	0x0360FD38 STP X29, X30, [X31 - 0x60]!
	0x0360FD3C STP X28, X27, [X31 + 0x10]
	0x0360FD40 STP X26, X25, [X31 + 0x20]
	0x0360FD44 STP X24, X23, [X31 + 0x30]
	0x0360FD48 STP X22, X21, [X31 + 0x40]
	0x0360FD4C STP X20, X19, [X31 + 0x50]
	0x0360FD50 ADD X29, X31, 0x0
	0x0360FD54 SUB X31, X31, 0x40
	0x0360FD58 MRS X23, 0xC000
	0x0360FD5C LDR X8, [X23 + 0x28]
	0x0360FD60 ADRP X22, 0xDD1000
	0x0360FD64 ADRP X28, 0xB2B000
	0x0360FD68 MOV W24, W3
	0x0360FD6C STUR X8, [X29 - 0x8]
	0x0360FD70 LDRB W8, [X22 + 0x428]
	0x0360FD74 LDR X28, [X28 + 0xE88]
	0x0360FD78 MOV X19, X2
	0x0360FD7C MOV W21, W1
	0x0360FD80 MOV X20, X0
	0x0360FD84 TBNZ X8, 0x0, 0x360FDB4
	0x0360FD88 ADRP X0, 0xB2B000
	0x0360FD8C LDR X0, [X0 + 0xED0]
	0x0360FD90 BL 0x1C16CF4
	0x0360FD94 ADRP X0, 0xB2B000
	0x0360FD98 LDR X0, [X0 + 0xE88]
	0x0360FD9C BL 0x1C16CF4
	0x0360FDA0 ADRP X0, 0xB0D000
	0x0360FDA4 LDR X0, [X0 + 0xD08]
	0x0360FDA8 BL 0x1C16CF4
	0x0360FDAC MOVZ W8, 0x1
	0x0360FDB0 STRB W8, [X22 + 0x428]
	0x0360FDB4 LDR X0, [X28]
	0x0360FDB8 LDR W8, [X0 + 0xE0]
	0x0360FDBC CBNZ W8, 0x360FDC8
	0x0360FDC0 BL 0x1C16DFC
	0x0360FDC4 LDR X0, [X28]
	0x0360FDC8 LDR X8, [X0 + 0xB8]
	0x0360FDCC LDR W8, [X8 + 0x4]
	0x0360FDD0 CMP W8, W21
	0x0360FDD4 B.LE 0x360FE6C
	0x0360FDD8 CMP W21, 0x1
	0x0360FDDC B.LT 0x36100AC
	0x0360FDE0 MOV X8, X31
	0x0360FDE4 MOV X9, X31
	0x0360FDE8 MOV W10, W21
	0x0360FDEC MOVZ X11, 0x1
	0x0360FDF0 MOV X12, X31
	0x0360FDF4 CBZ X9, 0x360FE38
	0x0360FDF8 MOV X13, X9
	0x0360FDFC MOV X14, X20
	0x0360FE00 MOV X15, X8
	0x0360FE04 SBFM X16, X15, 0x1E, 0x3F
	0x0360FE08 LDR W17, [X16, X19, LSL]
	0x0360FE0C LDR W0, [X14], #0x4
	0x0360FE10 LDR W1, [X20, X9, LSL #2]
	0x0360FE14 SUBS X13, X13, 0x1
	0x0360FE18 ADD X12, X12, X17

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X29
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move X19, 0xDD2000
	015 Move W8, [X19+1048]
	016 Move W24, W3
	017 Move X20, X2
	018 Move W21, W1
	019 Move X25, X0
	020 Move [X31+56], W5
	021 Move [X31+32], X4
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xB2C000
	027 Move X0, [X0+3720]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+1048], W8
	031 Subtract W8, W24, 1
	032 Move X27, 0xB2C000
	033 Move W26, [X20]
	034 Move X27, [X27+3720]
	035 Subtract W8, W24, 2
	036 Move W19, [X20]
	037 Move W19, W31
	038 Move X0, [X27]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, W26
	044 Call BigIntegerCalculator.LeadingZeros, X0
	045 Move W8, 32
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract W8, W8, W0
	048 Move [X31+60], W0
	049 Move [X31+8], X20
	050 Subtract W9, W24, 3
	051 Move W9, [X20]
	052 Move W9, W31
	053 Move W12, [X31+60]
	054 NotImplemented "Instruction LSRV not yet implemented."
	055 NotImplemented "Instruction LSRV not yet implemented."
	056 NotImplemented "Instruction LSLV not yet implemented."
	057 NotImplemented "Instruction LSLV not yet implemented."
	058 Or W26, W11, W10
	059 Or W19, W9, W12
	060 Subtract W28, W21, W24
	061 Move W9, [X31+60]
	062 Move W26, W26
	063 Move W29, W19
	064 Move W23, W21
	065 And W10, W9, 63
	066 Move [X31+24], X10
	067 And W10, W8, 31
	068 And W8, W9, 31
	069 Move [X31+16], W8
	070 Move [X31+20], W10
	071 Move W8, W24
	072 Move [X31], X8
	073 Move [X31+52], W21
	074 Move [X31+40], X25
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W10, [X25]
	077 Move W10, W31
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Subtract W22, W23, 1
	080 Subtract W8, W23, 2
	081 Move W8, [X25]
	082 Move W8, W31
	083 Move W21, [X25]
	084 Move W9, [X31+60]
	085 Move [X31+64], X10
	086 NotImplemented "Instruction BFM not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract W9, W23, 3
	089 Move W9, [X25]
	090 Move W9, W31
	091 Move X10, [X31+24]
	092 Move W13, [X31+16]
	093 Move W12, [X31+20]
	094 NotImplemented "Instruction LSLV not yet implemented."
	095 NotImplemented "Instruction LSRV not yet implemented."
	096 NotImplemented "Instruction LSLV not yet implemented."
	097 NotImplemented "Instruction LSRV not yet implemented."
	098 Or X21, X10, X11
	099 Or W8, W9, W8
	100 Subtract W9, W23, W24
	101 Move [X31+76], W9
	102 NotImplemented "Instruction UDIV not yet implemented."
	103 Move TEMP, 0
	104 Not TEMP
	105 Move W10, TEMP
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Add X25, X25, W28
	108 Move W20, W24
	109 NotImplemented "Instruction CSEL not yet implemented."
	110 Move W24, W8
	111 Move X0, [X27]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Multiply X8, X19, X26
	117 Multiply X9, X19, X29
	118 Add X8, X8, X9
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Subtract X19, X19, 1
	123 Compare X19, 0
	124 JumpIfEqual {147}
	125 Move X0, [X27]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Move W24, W20
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X11, [X31]
	133 Move X9, [X31+8]
	134 Move X8, X31
	135 Move X10, X25
	136 Move W12, [X9+4]
	137 Move W13, [X10]
	138 NotImplemented "Instruction NOP not yet implemented."
	139 NotImplemented "Instruction MADD not yet implemented."
	140 Move X12, X8
	141 ShiftRight X12, 32
	142 And X12, X12, 0x7FFFFFFF
	143 Subtract W13, W13, W8
	144 NotImplemented "Instruction CINC not yet implemented."
	145 Subtract X11, X11, 1
	146 Move [X10+4], W13
	147 Move W24, W20
	148 Move W8, W31
	149 Move X9, [X31+64]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X0, [X27]
	152 Move W8, [X0+224]
	153 Compare W8, 0
	154 JumpIfNotEqual {156}
	155 Call 0x1C17DFC
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X10, [X31]
	158 Move X9, [X31+8]
	159 Move X8, X31
	160 Move W11, [X25]
	161 Move W12, [X9+4]
	162 Subtract X10, X10, 1
	163 Add X8, X8, X11
	164 Add X8, X8, X12
	165 Move [X25+4], W8
	166 Move X8, X8
	167 ShiftRight X8, 32
	168 And X8, X8, 0x7FFFFFFF
	169 Subtract X19, X19, 1
	170 Move W21, [X31+52]
	171 Move W8, [X31+56]
	172 Move X25, [X31+40]
	173 Compare W8, 0
	174 JumpIfEqual {178}
	175 Move X8, [X31+32]
	176 Move W9, [X31+76]
	177 Move [X8], W19
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move [X25], W31
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Subtract W28, W28, 1
	182 Move W23, W22
	183 Move X20, [X31+160]
	184 Move X19, [X31+168]
	185 Move X22, [X31+144]
	186 Move X21, [X31+152]
	187 Move X24, [X31+128]
	188 Move X23, [X31+136]
	189 Move X26, [X31+112]
	190 Move X25, [X31+120]
	191 Move X28, [X31+96]
	192 Move X27, [X31+104]
	193 Move X29, [X31+80]
	194 Move X30, [X31+88]
	195 Add X31, X31, 176
	196 Return 

Method: System.UInt32 AddDivisor(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)

Disassembly:
	0x0360FFC8 BL 0x360FD38
	0x0360FFCC LDUR X0, [X29 - 0x30]
	0x0360FFD0 LDUR W1, [X29 - 0x24]
	0x0360FFD4 MOV X2, X19
	0x0360FFD8 MOV W3, W23
	0x0360FFDC MOV X4, X25
	0x0360FFE0 MOV W5, W26
	0x0360FFE4 BL 0x36100E0
	0x0360FFE8 LDUR X8, [X29 - 0x20]
	0x0360FFEC MOV X2, X25
	0x0360FFF0 MOV W3, W26
	0x0360FFF4 ADD X0, X8, X19
	0x0360FFF8 LDUR W8, [X29 - 0x14]
	0x0360FFFC SUB W1, W8, W22
	0x03610000 BL 0x360E7CC
	0x03610004 LDUR X8, [X29 - 0x10]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X0
	003 Move X0, X31
	004 Move W9, W3
	005 Move W10, [X8]
	006 Move W11, [X2+4]
	007 Subtract X9, X9, 1
	008 Add X10, X0, X10
	009 Add X10, X10, X11
	010 Move [X8+4], W10
	011 Move X0, X10
	012 ShiftRight X0, 32
	013 And X0, X0, 0x7FFFFFFF
	014 Return X0
	015 Move W0, W31
	016 Return X0

Method: System.UInt32 SubtractDivisor(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt64 q)

Disassembly:
	0x0360FF80 CBZ W8, 0x360FF8C
	0x0360FF84 ADD X25, X0, 0x20
	0x0360FF88 B 0x360FF90
	0x0360FF8C MOV X25, X31
	0x0360FF90 LDR X0, [X28]
	0x0360FF94 LDR W8, [X0 + 0xE0]
	0x0360FF98 CBNZ W8, 0x360FFA0
	0x0360FF9C BL 0x1C16DFC
	0x0360FFA0 LDUR X0, [X29 - 0x38]
	0x0360FFA4 MOV W1, W27
	0x0360FFA8 MOV X2, X20
	0x0360FFAC MOV W3, W22
	0x0360FFB0 MOV X4, X24
	0x0360FFB4 BL 0x360E748
	0x0360FFB8 MOV X0, X24
	0x0360FFBC MOV W1, W21
	0x0360FFC0 MOV X2, X25
	0x0360FFC4 MOV W3, W26

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X31
	003 Move W9, W3
	004 Move W10, [X2+4]
	005 Move W11, [X0]
	006 NotImplemented "Instruction NOP not yet implemented."
	007 NotImplemented "Instruction MADD not yet implemented."
	008 Move X10, X8
	009 ShiftRight X10, 32
	010 And X10, X10, 0x7FFFFFFF
	011 Subtract W11, W11, W8
	012 NotImplemented "Instruction CINC not yet implemented."
	013 Subtract X9, X9, 1
	014 Move [X0+4], W11
	015 Move W8, W31
	016 Move W0, W8
	017 Return X0

Method: System.Boolean DivideGuessTooBig(System.UInt64 q, System.UInt64 valHi, System.UInt32 valLo, System.UInt32 divHi, System.UInt32 divLo)

Disassembly:
	0x0360FF34 SUB X28, X8, X9
	0x0360FF38 ADD X31, X28, 0x0
	0x0360FF3C B 0x3610028
	0x0360FF40 ADRP X25, 0xB0D000
	0x0360FF44 LDR X25, [X25 + 0xD08]
	0x0360FF48 MOV W1, W21
	0x0360FF4C LDR X0, [X25]
	0x0360FF50 BL 0x1C16D6C
	0x0360FF54 CBZ X0, 0x360FF68
	0x0360FF58 LDR W8, [X0 + 0x18]
	0x0360FF5C CBZ W8, 0x360FF68
	0x0360FF60 ADD X24, X0, 0x20
	0x0360FF64 B 0x360FF6C
	0x0360FF68 MOV X24, X31
	0x0360FF6C LDR X0, [X25]
	0x0360FF70 MOV W1, W26
	0x0360FF74 BL 0x1C16D6C
	0x0360FF78 CBZ X0, 0x360FF8C
	0x0360FF7C LDR W8, [X0 + 0x18]

ISIL:
	001 Move W8, W3
	002 Move W9, W4
	003 Multiply X10, X8, X0
	004 Multiply X8, X9, X0
	005 Add X9, X10, X8
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W0, 1
	008 Return X0
	009 And X8, X8, 0
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W0, W31
	012 Return X0
	013 Move W9, W2
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Return X0

Method: System.UInt32[] CreateCopy(System.UInt32[] value)

Disassembly:
	0x0360FAA8 LDP X20, X19, [X31 + 0x40]
	0x0360FAAC LDP X22, X21, [X31 + 0x30]
	0x0360FAB0 LDP X24, X23, [X31 + 0x20]
	0x0360FAB4 LDP X26, X25, [X31 + 0x10]
	0x0360FAB8 ADD W2, W9, W8
	0x0360FABC LDR X30, [X31], #0x50
	0x0360FAC0 B 0x3610684
	0x0360FAC4 STP X30, X23, [X31 - 0x30]!
	0x0360FAC8 STP X22, X21, [X31 + 0x10]
	0x0360FACC STP X20, X19, [X31 + 0x20]
	0x0360FAD0 ADRP X21, 0xDD1000
	0x0360FAD4 LDRB W8, [X21 + 0x430]
	0x0360FAD8 MOV X20, X1
	0x0360FADC MOV X19, X0
	0x0360FAE0 TBNZ X8, 0x0, 0x360FAF8
	0x0360FAE4 ADRP X0, 0xB2B000
	0x0360FAE8 LDR X0, [X0 + 0xE88]
	0x0360FAEC BL 0x1C16CF4
	0x0360FAF0 MOVZ W8, 0x1
	0x0360FAF4 STRB W8, [X21 + 0x430]
	0x0360FAF8 CBZ X20, 0x360FB8C
	0x0360FAFC LDR W21, [X19 + 0x8]
	0x0360FB00 LDR W3, [X20 + 0x18]
	0x0360FB04 CMP W21, W3
	0x0360FB08 B.LT 0x360FB7C
	0x0360FB0C LDR X8, [X19]
	0x0360FB10 CBZ X8, 0x360FB28
	0x0360FB14 LDR W9, [X8 + 0x18]
	0x0360FB18 ADD X8, X8, 0x20
	0x0360FB1C CMP W9, 0x0
	0x0360FB20 CSEL X22, X31, X8, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDD2000
	005 Move W8, [X20+1049]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB0E000
	012 Move X0, [X0+3336]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1049], W8
	016 Compare X19, 0
	017 JumpIfEqual {38}
	018 Move X8, 0xB0E000
	019 Move X8, [X8+3336]
	020 Move W1, [X19+24]
	021 Move X0, [X8]
	022 Call 0x1C17D6C
	023 Compare X0, 0
	024 JumpIfEqual {38}
	025 Move W4, [X0+24]
	026 Move X20, X0
	027 Move X0, X19
	028 Move W1, W31
	029 Move X2, X20
	030 Move W3, W31
	031 Move X5, X31
	032 Call Array.Copy, X0, X1, X2, X3, X4
	033 Move X0, X20
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Int32 LeadingZeros(System.UInt32 value)

Disassembly:
	0x0360FEBC MOV X2, X25
	0x0360FEC0 MOV W3, W21
	0x0360FEC4 STUR X26, [X29 - 0x38]
	0x0360FEC8 STUR W21, [X29 - 0x24]
	0x0360FECC BL 0x360FD38
	0x0360FED0 LDR X24, [X28]
	0x0360FED4 ADD W21, W27, 0x1
	0x0360FED8 UBFM W26, W21, 0x1F, 0x1E
	0x0360FEDC STUR X25, [X29 - 0x30]
	0x0360FEE0 LDR X8, [X24 + 0xB8]
	0x0360FEE4 LDR W8, [X8 + 0x8]
	0x0360FEE8 CMP W26, W8
	0x0360FEEC B.GE 0x360FF40
	0x0360FEF0 SBFM X2, X21, 0x3E, 0x1F
	0x0360FEF4 CBZ W21, 0x3610010
	0x0360FEF8 SXTW X8, W21
	0x0360FEFC UBFM X8, X8, 0x3E, 0x3D
	0x0360FF00 ADD X8, X8, 0xF
	0x0360FF04 ADD X9, X31, 0x0
	0x0360FF08 AND X8, X8, 0xFFFFFFFF
	0x0360FF0C SUB X25, X9, X8
	0x0360FF10 ADD X31, X25, 0x0
	0x0360FF14 MOV X0, X25
	0x0360FF18 MOV W1, W31
	0x0360FF1C BL 0x3EB1B10
	0x0360FF20 SBFM X2, X26, 0x3E, 0x1F
	0x0360FF24 CBZ W26, 0x3610024
	0x0360FF28 ADD X9, X2, 0xF
	0x0360FF2C ADD X8, X31, 0x0
	0x0360FF30 AND X9, X9, 0xFFFFFFFF

ISIL:
	001 Compare W0, 0
	002 JumpIfEqual {46}
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, W0
	005 ShiftRight W8, 16
	006 And W8, W8, 0x7FFF
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move W9, 8
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move W12, W8
	011 ShiftRight W12, 24
	012 And W12, W12, 0x7FFFFFFF
	013 Move W11, W10
	014 ShiftRight W11, 28
	015 And W11, W11, 0x7FFFFFF
	016 NotImplemented "Instruction BFM not yet implemented."
	017 Move W10, W8
	018 ShiftRight W10, 24
	019 And W10, W10, 0x7FFFFF
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSEL not yet implemented."
	022 Move W12, W8
	023 ShiftRight W12, 28
	024 And W12, W12, 0x7FFFFFFF
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move W11, W8
	027 ShiftRight W11, 28
	028 And W11, W11, 0x7FFFFFF
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Or W10, W9, 4
	032 Move W12, W8
	033 ShiftRight W12, 30
	034 And W12, W12, 0x7FFFFFFF
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Move W11, W8
	037 ShiftRight W11, 30
	038 And W11, W11, 0x1FFFFFFF
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Or W10, W9, 2
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 NotImplemented "Instruction ORN not yet implemented."
	044 Add W0, W9, W8
	045 Return X0
	046 Move W0, 32
	047 Return X0

Method: System.UInt32 Pow(System.UInt32 value, System.UInt32 power, System.UInt32 modulus)

Disassembly:
	0x0360D4BC ADRP X23, 0xDCC000
	0x0360D4C0 LDRB W8, [X23 + 0x762]
	0x0360D4C4 MOV X19, X3
	0x0360D4C8 MOV X20, X2
	0x0360D4CC MOV X21, X1
	0x0360D4D0 MOV X22, X0
	0x0360D4D4 STR W31, [X31 + 0x2C]
	0x0360D4D8 STRB W31, [X31 + 0x28]
	0x0360D4DC CBZ W8, 0x360D4FC
	0x0360D4E0 CBZ X20, 0x360D514
	0x0360D4E4 MOV X0, X20
	0x0360D4E8 MOV X1, X31
	0x0360D4EC BL 0x3225708
	0x0360D4F0 LDR W5, [X20 + 0x10]
	0x0360D4F4 MOV X4, X0
	0x0360D4F8 B 0x360D51C
	0x0360D4FC ADRP X0, 0xB0D000
	0x0360D500 LDR X0, [X0 + 0x290]
	0x0360D504 BL 0x1C16CF4
	0x0360D508 MOVZ W8, 0x1
	0x0360D50C STRB W8, [X23 + 0x762]
	0x0360D510 CBNZ X20, 0x360D4E4
	0x0360D514 MOV X4, X31
	0x0360D518 MOV X5, X31
	0x0360D51C ADD X8, X31, 0x28
	0x0360D520 ADD X9, X31, 0x2C
	0x0360D524 MOV W0, W31
	0x0360D528 MOV X1, X22
	0x0360D52C MOV X2, X21
	0x0360D530 MOV X3, X20
	0x0360D534 MOV X6, X19
	0x0360D538 STP X31, X31, [X31]
	0x0360D53C STP X9, X8, [X31 + 0x10]
	0x0360D540 BL 0x36114D8
	0x0360D544 LDP X20, X19, [X31 + 0x50]
	0x0360D548 LDP X22, X21, [X31 + 0x40]
	0x0360D54C LDP X30, X23, [X31 + 0x30]
	0x0360D550 ADD X31, X31, 0x60
	0x0360D554 RET
	0x0360D558 STP X30, X21, [X31 - 0x20]!
	0x0360D55C STP X20, X19, [X31 + 0x10]
	0x0360D560 LDP X19, X20, [X0]
	0x0360D564 MOV X21, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDD4000
	008 Move X23, 0xB2E000
	009 Move W8, [X22+1050]
	010 Move X23, [X23+3720]
	011 Move W21, W2
	012 Move W19, W1
	013 Move W20, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB2E000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1050], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W8, W21
	029 Compare W19, 0
	030 JumpIfEqual {49}
	031 Move W10, W20
	032 Move W9, 1
	033 Move TEMP, X19
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {40}
	037 Multiply X9, X9, X10
	038 NotImplemented "Instruction UDIV not yet implemented."
	039 NotImplemented "Instruction MSUB not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Multiply X10, X10, X10
	042 NotImplemented "Instruction UDIV not yet implemented."
	043 Move W19, W19
	044 ShiftRight W19, 1
	045 And W19, W19, 0x7FFFFFFF
	046 NotImplemented "Instruction MSUB not yet implemented."
	047 Compare W19, 0
	048 JumpIfNotEqual {33}
	049 Move W9, 1
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 NotImplemented "Instruction UDIV not yet implemented."
	055 NotImplemented "Instruction MSUB not yet implemented."
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Return X0

Method: System.UInt32 Pow(System.UInt32[] value, System.UInt32 power, System.UInt32 modulus)

Disassembly:
	0x0360D394 MOVZ W1, 0x2
	0x0360D398 MOV X0, X23
	0x0360D39C MOV X2, X22
	0x0360D3A0 MOV X3, X20
	0x0360D3A4 MOV X6, X19
	0x0360D3A8 BL 0x360CE18
	0x0360D3AC CBNZ X0, 0x360D3B4
	0x0360D3B0 STR W31, [X19]
	0x0360D3B4 LDP X20, X19, [X31 + 0x40]
	0x0360D3B8 LDP X22, X21, [X31 + 0x30]
	0x0360D3BC LDP X24, X23, [X31 + 0x20]
	0x0360D3C0 LDP X26, X25, [X31 + 0x10]
	0x0360D3C4 CMP X0, 0x0
	0x0360D3C8 CSET W0, NE
	0x0360D3CC LDR X30, [X31], #0x50
	0x0360D3D0 RET
	0x0360D3D4 STR X30, [X31 - 0x50]!
	0x0360D3D8 STP X26, X25, [X31 + 0x10]
	0x0360D3DC STP X24, X23, [X31 + 0x20]
	0x0360D3E0 STP X22, X21, [X31 + 0x30]
	0x0360D3E4 STP X20, X19, [X31 + 0x40]
	0x0360D3E8 ADRP X26, 0xDD3000
	0x0360D3EC ADRP X25, 0xB27000
	0x0360D3F0 LDRB W8, [X26 + 0x405]
	0x0360D3F4 LDR X25, [X25 + 0x940]
	0x0360D3F8 MOV W21, W5
	0x0360D3FC MOV W24, W4
	0x0360D400 MOV X19, X3
	0x0360D404 MOV X20, X2
	0x0360D408 MOV X22, X1
	0x0360D40C MOV X23, X0
	0x0360D410 TBNZ X8, 0x0, 0x360D428
	0x0360D414 ADRP X0, 0xB27000
	0x0360D418 LDR X0, [X0 + 0x940]
	0x0360D41C BL 0x1C16CF4
	0x0360D420 MOVZ W8, 0x1
	0x0360D424 STRB W8, [X26 + 0x405]
	0x0360D428 STR W31, [X19]
	0x0360D42C LDR X0, [X25]
	0x0360D430 LDR W8, [X0 + 0xE0]
	0x0360D434 CBNZ W8, 0x360D43C
	0x0360D438 BL 0x1C16DFC
	0x0360D43C AND W4, W24, 0x1
	0x0360D440 AND W5, W21, 0x1
	0x0360D444 MOVZ W1, 0x2
	0x0360D448 MOV X0, X23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDD4000
	008 Move X23, 0xB2E000
	009 Move W8, [X22+1051]
	010 Move X23, [X23+3720]
	011 Move W20, W2
	012 Move W19, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB2E000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1051], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move W1, W20
	030 Call BigIntegerCalculator.Remainder, X0, X1
	031 Move W8, W20
	032 Compare W19, 0
	033 JumpIfEqual {52}
	034 Move W10, W0
	035 Move W9, 1
	036 Move TEMP, X19
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {43}
	040 Multiply X9, X9, X10
	041 NotImplemented "Instruction UDIV not yet implemented."
	042 NotImplemented "Instruction MSUB not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Multiply X10, X10, X10
	045 NotImplemented "Instruction UDIV not yet implemented."
	046 Move W19, W19
	047 ShiftRight W19, 1
	048 And W19, W19, 0x7FFFFFFF
	049 NotImplemented "Instruction MSUB not yet implemented."
	050 Compare W19, 0
	051 JumpIfNotEqual {36}
	052 Move W9, 1
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 NotImplemented "Instruction UDIV not yet implemented."
	058 NotImplemented "Instruction MSUB not yet implemented."
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0

Method: System.UInt32 Pow(System.UInt32 value, System.UInt32[] power, System.UInt32 modulus)

Disassembly:
	0x0360D44C MOV X2, X22
	0x0360D450 MOV X3, X20
	0x0360D454 MOV X6, X19
	0x0360D458 BL 0x360CE18
	0x0360D45C LDP X20, X19, [X31 + 0x40]
	0x0360D460 LDP X22, X21, [X31 + 0x30]
	0x0360D464 LDP X24, X23, [X31 + 0x20]
	0x0360D468 LDP X26, X25, [X31 + 0x10]
	0x0360D46C CMP X0, 0x0
	0x0360D470 CSET W0, NE
	0x0360D474 LDR X30, [X31], #0x50
	0x0360D478 RET
	0x0360D47C STR X30, [X31 - 0x20]!
	0x0360D480 STP X20, X19, [X31 + 0x10]
	0x0360D484 LDP X19, X20, [X0]
	0x0360D488 MOV X0, X31
	0x0360D48C BL 0x333AE98
	0x0360D490 MOV X3, X0
	0x0360D494 MOV X0, X19
	0x0360D498 MOV X1, X20
	0x0360D49C LDP X20, X19, [X31 + 0x10]
	0x0360D4A0 MOV X2, X31
	0x0360D4A4 LDR X30, [X31], #0x20
	0x0360D4A8 B 0x360D4AC
	0x0360D4AC SUB X31, X31, 0x60
	0x0360D4B0 STP X30, X23, [X31 + 0x30]
	0x0360D4B4 STP X22, X21, [X31 + 0x40]
	0x0360D4B8 STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDD4000
	008 Move X23, 0xB2E000
	009 Move W8, [X22+1052]
	010 Move X23, [X23+3720]
	011 Move W19, W2
	012 Move X20, X1
	013 Move W21, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB2E000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1052], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W2, W21
	029 Move X0, X20
	030 Move W1, W19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W3, 1
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3
	039 Return X0

Method: System.UInt32 Pow(System.UInt32[] value, System.UInt32[] power, System.UInt32 modulus)

Disassembly:
	0x0360D318 MOV X1, X0
	0x0360D31C MOV X0, X19
	0x0360D320 BL 0x1C16DEC
	0x0360D324 STR X30, [X31 - 0x50]!
	0x0360D328 STP X26, X25, [X31 + 0x10]
	0x0360D32C STP X24, X23, [X31 + 0x20]
	0x0360D330 STP X22, X21, [X31 + 0x30]
	0x0360D334 STP X20, X19, [X31 + 0x40]
	0x0360D338 ADRP X26, 0xDD3000
	0x0360D33C ADRP X25, 0xB27000
	0x0360D340 LDRB W8, [X26 + 0x404]
	0x0360D344 LDR X25, [X25 + 0x940]
	0x0360D348 MOV W21, W5
	0x0360D34C MOV W24, W4
	0x0360D350 MOV X19, X3
	0x0360D354 MOV X20, X2
	0x0360D358 MOV X22, X1
	0x0360D35C MOV X23, X0
	0x0360D360 TBNZ X8, 0x0, 0x360D378
	0x0360D364 ADRP X0, 0xB27000
	0x0360D368 LDR X0, [X0 + 0x940]
	0x0360D36C BL 0x1C16CF4
	0x0360D370 MOVZ W8, 0x1
	0x0360D374 STRB W8, [X26 + 0x404]
	0x0360D378 STR W31, [X19]
	0x0360D37C LDR X0, [X25]
	0x0360D380 LDR W8, [X0 + 0xE0]
	0x0360D384 CBNZ W8, 0x360D38C
	0x0360D388 BL 0x1C16DFC
	0x0360D38C AND W4, W24, 0x1
	0x0360D390 AND W5, W21, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDD4000
	008 Move X23, 0xB2E000
	009 Move W8, [X22+1053]
	010 Move X23, [X23+3720]
	011 Move W19, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB2E000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1053], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move W1, W19
	030 Call BigIntegerCalculator.Remainder, X0, X1
	031 Move W2, W0
	032 Move X0, X20
	033 Move W1, W19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move W3, 1
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3
	042 Return X0

Method: System.UInt32 PowCore(System.UInt32[] power, System.UInt32 modulus, System.UInt64 value, System.UInt64 result)

Disassembly:
	0x03610048 MOV W1, W27
	0x0361004C MOV X2, X20
	0x03610050 MOV W3, W22
	0x03610054 MOV X4, X25
	0x03610058 BL 0x360E748
	0x0361005C MOV X0, X25
	0x03610060 MOV W1, W21
	0x03610064 MOV X2, X28
	0x03610068 MOV W3, W26
	0x0361006C BL 0x360FD38
	0x03610070 LDUR X0, [X29 - 0x30]
	0x03610074 LDUR W1, [X29 - 0x24]
	0x03610078 MOV X2, X19
	0x0361007C MOV W3, W23
	0x03610080 MOV X4, X28
	0x03610084 MOV W5, W26
	0x03610088 BL 0x36100E0
	0x0361008C LDUR X8, [X29 - 0x20]
	0x03610090 MOV X2, X28
	0x03610094 MOV W3, W26
	0x03610098 ADD X0, X8, X19
	0x0361009C LDUR W8, [X29 - 0x14]
	0x036100A0 SUB W1, W8, W22
	0x036100A4 BL 0x360E7CC
	0x036100A8 LDUR X23, [X29 - 0x10]
	0x036100AC LDR X8, [X23 + 0x28]
	0x036100B0 LDUR X9, [X29 - 0x8]
	0x036100B4 CMP X8, X9
	0x036100B8 B.NE 0x36100DC
	0x036100BC ADD X31, X29, 0x0
	0x036100C0 LDP X20, X19, [X31 + 0x50]
	0x036100C4 LDP X22, X21, [X31 + 0x40]
	0x036100C8 LDP X24, X23, [X31 + 0x30]
	0x036100CC LDP X26, X25, [X31 + 0x20]
	0x036100D0 LDP X28, X27, [X31 + 0x10]
	0x036100D4 LDP X29, X30, [X31], #0x60
	0x036100D8 RET
	0x036100DC BL 0x3EB1B20
	0x036100E0 CMP W3, 0x1
	0x036100E4 B.LT 0x3610124
	0x036100E8 MOV X8, X31
	0x036100EC MOV W9, W3
	0x036100F0 MOV X10, X0
	0x036100F4 MOV X11, X4
	0x036100F8 LDR W12, [X11]
	0x036100FC LDR W13, [X10], #0x4
	0x03610100 LDR W14, [X2], #0x4
	0x03610104 SUBS X9, X9, 0x1
	0x03610108 ADD X8, X8, X12
	0x0361010C SUB X8, X8, X13
	0x03610110 SUB X8, X8, X14
	0x03610114 STR W8, [X11], #0x4
	0x03610118 SBFM X8, X8, 0x20, 0x3F
	0x0361011C B.NE 0x36100F8
	0x03610120 B 0x361012C
	0x03610124 MOV X8, X31
	0x03610128 MOV W3, W31
	0x0361012C CMP W3, W1
	0x03610130 B.GE 0x3610168
	0x03610134 MOV W11, W1
	0x03610138 ADD X9, X4, W3, 0x2, UXTW
	0x0361013C ADD X10, X0, W3, 0x2, UXTW
	0x03610140 SUB X11, X11, W3, UXTW
	0x03610144 LDR W12, [X9]
	0x03610148 LDR W13, [X10], #0x4
	0x0361014C SUBS X11, X11, 0x1
	0x03610150 ADD X8, X8, X12
	0x03610154 SUB X8, X8, X13
	0x03610158 STR W8, [X9], #0x4
	0x0361015C SBFM X8, X8, 0x20, 0x3F
	0x03610160 B.NE 0x3610144
	0x03610164 MOV W3, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDD1000
	008 Move W8, [X23+1054]
	009 Move X19, X3
	010 Move X20, X2
	011 Move W22, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xB2B000
	018 Move X0, [X0+3720]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1054], W8
	022 Compare X21, 0
	023 JumpIfEqual {91}
	024 Move X8, [X21+24]
	025 Move X9, INVALID
	026 Move W22, W22
	027 And X10, X8, 0
	028 Add X9, X9, X10
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction SBFM not yet implemented."
	031 Move X11, X31
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X12, X21, X11
	034 Move W12, [X12+32]
	035 Move W13, 32
	036 Move TEMP, X12
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {43}
	040 Multiply X14, X20, X19
	041 NotImplemented "Instruction UDIV not yet implemented."
	042 NotImplemented "Instruction MSUB not yet implemented."
	043 Multiply X14, X20, X20
	044 NotImplemented "Instruction UDIV not yet implemented."
	045 Subtract W13, W13, 1
	046 NotImplemented "Instruction MSUB not yet implemented."
	047 Move W12, W12
	048 ShiftRight W12, 1
	049 And W12, W12, 0x7FFFFFFF
	050 Add X11, X11, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Compare W8, 0
	053 JumpIfEqual {90}
	054 Move X8, 0xB2B000
	055 Move X8, [X8+3720]
	056 Move X0, [X8]
	057 Add X8, X21, X9
	058 Move W21, [X8+32]
	059 Move W9, [X0+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Compare W21, 0
	064 JumpIfEqual {81}
	065 Move TEMP, X21
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {72}
	069 Multiply X8, X19, X20
	070 NotImplemented "Instruction UDIV not yet implemented."
	071 NotImplemented "Instruction MSUB not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Multiply X8, X20, X20
	074 NotImplemented "Instruction UDIV not yet implemented."
	075 Move W21, W21
	076 ShiftRight W21, 1
	077 And W21, W21, 0x7FFFFFFF
	078 NotImplemented "Instruction MSUB not yet implemented."
	079 Compare W21, 0
	080 JumpIfNotEqual {65}
	081 NotImplemented "Instruction UDIV not yet implemented."
	082 NotImplemented "Instruction MSUB not yet implemented."
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Move X23, [X31+56]
	089 Return X0
	090 Call 0x1C17F28
	091 Call 0x1C17F20

Method: System.UInt32 PowCore(System.UInt32 power, System.UInt32 modulus, System.UInt64 value, System.UInt64 result)

Disassembly:
	0x03610008 LDR X8, [X8 + 0x28]
	0x0361000C B 0x36100B0
	0x03610010 MOV X0, X31
	0x03610014 MOV W1, W31
	0x03610018 BL 0x3EB1B10
	0x0361001C MOV X2, X31
	0x03610020 MOV X25, X31
	0x03610024 MOV X28, X31
	0x03610028 MOV X0, X28
	0x0361002C MOV W1, W31
	0x03610030 BL 0x3EB1B10
	0x03610034 LDR W8, [X24 + 0xE0]
	0x03610038 CBNZ W8, 0x3610044
	0x0361003C MOV X0, X24
	0x03610040 BL 0x1C16DFC
	0x03610044 LDUR X0, [X29 - 0x38]

ISIL:
	001 Move W8, W1
	002 Compare W0, 0
	003 JumpIfEqual {20}
	004 Move TEMP, X0
	005 And TEMP, TEMP, 1
	006 Compare TEMP, 1
	007 JumpIfNotEqual {11}
	008 Multiply X9, X2, X3
	009 NotImplemented "Instruction UDIV not yet implemented."
	010 NotImplemented "Instruction MSUB not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Multiply X9, X2, X2
	013 NotImplemented "Instruction UDIV not yet implemented."
	014 Move W0, W0
	015 ShiftRight W0, 1
	016 And W0, W0, 0x7FFFFFFF
	017 NotImplemented "Instruction MSUB not yet implemented."
	018 Compare W0, 0
	019 JumpIfNotEqual {4}
	020 NotImplemented "Instruction UDIV not yet implemented."
	021 NotImplemented "Instruction MSUB not yet implemented."
	022 Return X0

Method: System.UInt32[] Pow(System.UInt32 value, System.UInt32 power, System.UInt32[] modulus)

Disassembly:
	0x0360D7C0 ADRP X21, 0xDD3000
	0x0360D7C4 LDRB W8, [X21 + 0x413]
	0x0360D7C8 MOV X19, X1
	0x0360D7CC MOV X20, X0
	0x0360D7D0 TBNZ X8, 0x0, 0x360D7F4
	0x0360D7D4 ADRP X0, 0xB2D000
	0x0360D7D8 LDR X0, [X0 + 0xE88]
	0x0360D7DC BL 0x1C16CF4
	0x0360D7E0 ADRP X0, 0xB0F000
	0x0360D7E4 LDR X0, [X0 + 0xD08]
	0x0360D7E8 BL 0x1C16CF4
	0x0360D7EC MOVZ W8, 0x1
	0x0360D7F0 STRB W8, [X21 + 0x413]
	0x0360D7F4 CBZ X20, 0x360D898
	0x0360D7F8 ADRP X8, 0xB0F000
	0x0360D7FC LDR X8, [X8 + 0xD08]
	0x0360D800 LDR W9, [X20 + 0x18]
	0x0360D804 LDR X0, [X8]
	0x0360D808 ADD W1, W9, 0x1
	0x0360D80C BL 0x1C16D6C
	0x0360D810 MOV X21, X0
	0x0360D814 CBZ X19, 0x360D830
	0x0360D818 LDR W8, [X19 + 0x18]
	0x0360D81C ADD X9, X19, 0x20
	0x0360D820 CMP W8, 0x0
	0x0360D824 CSEL X22, X31, X9, EQ
	0x0360D828 CBNZ X21, 0x360D838
	0x0360D82C B 0x360D898
	0x0360D830 MOV X22, X31
	0x0360D834 CBZ X21, 0x360D898
	0x0360D838 LDR W8, [X21 + 0x18]
	0x0360D83C CBZ W8, 0x360D89C
	0x0360D840 CBZ X19, 0x360D898
	0x0360D844 ADRP X8, 0xB2D000
	0x0360D848 LDR X8, [X8 + 0xE88]
	0x0360D84C LDR X23, [X20 + 0x18]
	0x0360D850 LDR X0, [X8]
	0x0360D854 MOV X1, X23

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xDD4000
	008 Move W8, [X22+1055]
	009 Move X19, X2
	010 Move W20, W1
	011 Move W21, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB2E000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1055], W8
	021 Move [X31], X31
	022 Move [X31+8], X31
	023 Compare X19, 0
	024 JumpIfEqual {50}
	025 Move W8, [X19+24]
	026 Move X22, 0xB2E000
	027 Move X22, [X22+3720]
	028 Add X0, X31, 0
	029 Move W1, W8
	030 ShiftRight W1, 31
	031 And W1, W1, 0x3FFFFFFF
	032 Move W2, W21
	033 Call BitsBuffer..ctor, X0, X1, X2
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Add X2, X31, 0
	040 Move W0, W20
	041 Move X1, X19
	042 Call BigIntegerCalculator.PowCore, X0, X1, X2
	043 Move X20, [X31+48]
	044 Move X19, [X31+56]
	045 Move X22, [X31+32]
	046 Move X21, [X31+40]
	047 Move X30, [X31+16]
	048 Add X31, X31, 64
	049 Return X0
	050 Call 0x1C17F20

Method: System.UInt32[] Pow(System.UInt32[] value, System.UInt32 power, System.UInt32[] modulus)

Disassembly:
	0x0360D65C CMP W19, 0x0
	0x0360D660 CSNEG W21, W19, W19, PL
	0x0360D664 LDR W8, [X0 + 0xE0]
	0x0360D668 CBNZ W8, 0x360D670
	0x0360D66C BL 0x1C16DFC
	0x0360D670 MOV X0, X20
	0x0360D674 MOV W1, W21
	0x0360D678 B 0x360D69C
	0x0360D67C LDR X0, [X8]
	0x0360D680 CMP W22, 0x0
	0x0360D684 CSNEG W20, W22, W22, PL
	0x0360D688 LDR W8, [X0 + 0xE0]
	0x0360D68C CBNZ W8, 0x360D694
	0x0360D690 BL 0x1C16DFC
	0x0360D694 MOV X0, X21
	0x0360D698 MOV W1, W20
	0x0360D69C BL 0x360D6DC
	0x0360D6A0 B 0x360D6B0
	0x0360D6A4 MOV X0, X21
	0x0360D6A8 MOV X1, X20
	0x0360D6AC BL 0x360D7B4
	0x0360D6B0 MOV X1, X0
	0x0360D6B4 UBFM W2, W19, 0x1F, 0x1F
	0x0360D6B8 ADD X0, X31, 0x0
	0x0360D6BC STP X31, X31, [X31]
	0x0360D6C0 BL 0x360BD70
	0x0360D6C4 LDP X0, X1, [X31]
	0x0360D6C8 LDP X20, X19, [X31 + 0x40]
	0x0360D6CC LDP X22, X21, [X31 + 0x30]
	0x0360D6D0 LDP X30, X23, [X31 + 0x20]
	0x0360D6D4 ADD X31, X31, 0x50
	0x0360D6D8 RET
	0x0360D6DC STP X30, X21, [X31 - 0x20]!
	0x0360D6E0 STP X20, X19, [X31 + 0x10]
	0x0360D6E4 ADRP X21, 0xDD3000
	0x0360D6E8 LDRB W8, [X21 + 0x412]
	0x0360D6EC MOV W20, W1
	0x0360D6F0 MOV X19, X0
	0x0360D6F4 TBNZ X8, 0x0, 0x360D70C
	0x0360D6F8 ADRP X0, 0xB0F000
	0x0360D6FC LDR X0, [X0 + 0xD08]
	0x0360D700 BL 0x1C16CF4
	0x0360D704 MOVZ W8, 0x1
	0x0360D708 STRB W8, [X21 + 0x412]
	0x0360D70C CBZ X19, 0x360D7B0
	0x0360D710 ADRP X8, 0xB0F000
	0x0360D714 LDR X8, [X8 + 0xD08]
	0x0360D718 LDR W9, [X19 + 0x18]
	0x0360D71C LDR X0, [X8]
	0x0360D720 ADD W1, W9, 0x1
	0x0360D724 BL 0x1C16D6C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xDD4000
	008 Move W8, [X22+1056]
	009 Move X19, X2
	010 Move W20, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB2E000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1056], W8
	021 Move [X31], X31
	022 Move [X31+8], X31
	023 Compare X21, 0
	024 JumpIfEqual {64}
	025 Compare X19, 0
	026 JumpIfEqual {64}
	027 Move W9, [X21+24]
	028 Move W8, [X19+24]
	029 Move X22, 0xB2E000
	030 Move X22, [X22+3720]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X21
	038 Move X1, X19
	039 Call BigIntegerCalculator.Remainder, X0, X1
	040 Move W8, [X19+24]
	041 Move X21, X0
	042 Move W1, W8
	043 ShiftRight W1, 31
	044 And W1, W1, 0x3FFFFFFF
	045 Add X0, X31, 0
	046 Move X2, X21
	047 Call BitsBuffer..ctor, X0, X1, X2
	048 Move X0, [X22]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Add X2, X31, 0
	054 Move W0, W20
	055 Move X1, X19
	056 Call BigIntegerCalculator.PowCore, X0, X1, X2
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X30, [X31+16]
	062 Add X31, X31, 64
	063 Return X0
	064 Call 0x1C17F20

Method: System.UInt32[] Pow(System.UInt32 value, System.UInt32[] power, System.UInt32[] modulus)

Disassembly:
	0x0360D728 LDR X8, [X19 + 0x18]
	0x0360D72C CBZ W8, 0x360D7AC
	0x0360D730 CBZ X0, 0x360D7B0
	0x0360D734 LDR X9, [X0 + 0x18]
	0x0360D738 CBZ W9, 0x360D7AC
	0x0360D73C LDR W11, [X19 + 0x20]
	0x0360D740 AND X10, X8, 0x0
	0x0360D744 CMP W8, 0x2
	0x0360D748 ADD X11, X11, W20, UXTW
	0x0360D74C STR W11, [X0 + 0x20]
	0x0360D750 UBFM X11, X11, 0x20, 0x3F
	0x0360D754 B.LT 0x360D78C
	0x0360D758 AND X14, X9, 0x0
	0x0360D75C ADD X12, X19, 0x24
	0x0360D760 ADD X13, X0, 0x24
	0x0360D764 SUB X14, X14, 0x1
	0x0360D768 SUB X15, X10, 0x1
	0x0360D76C CBZ X14, 0x360D7AC
	0x0360D770 LDR W16, [X12], #0x4
	0x0360D774 SUB X14, X14, 0x1
	0x0360D778 SUBS X15, X15, 0x1
	0x0360D77C ADD X11, X11, X16
	0x0360D780 STR W11, [X13], #0x4
	0x0360D784 SBFM X11, X11, 0x20, 0x3F
	0x0360D788 B.NE 0x360D76C
	0x0360D78C CMP W8, W9
	0x0360D790 B.CS 0x360D7AC
	0x0360D794 LDP X20, X19, [X31 + 0x10]
	0x0360D798 UBFM X8, X10, 0x20, 0x1F
	0x0360D79C ADD X8, X0, X8, 0x1E, ASR
	0x0360D7A0 STR W11, [X8 + 0x20]
	0x0360D7A4 LDP X30, X21, [X31], #0x20
	0x0360D7A8 RET
	0x0360D7AC BL 0x1C16F28
	0x0360D7B0 BL 0x1C16F20
	0x0360D7B4 STP X30, X23, [X31 - 0x30]!
	0x0360D7B8 STP X22, X21, [X31 + 0x10]
	0x0360D7BC STP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xDD4000
	008 Move W8, [X22+1057]
	009 Move X19, X2
	010 Move X20, X1
	011 Move W21, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB2E000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1057], W8
	021 Move [X31], X31
	022 Move [X31+8], X31
	023 Compare X19, 0
	024 JumpIfEqual {50}
	025 Move W8, [X19+24]
	026 Move X22, 0xB2E000
	027 Move X22, [X22+3720]
	028 Add X0, X31, 0
	029 Move W1, W8
	030 ShiftRight W1, 31
	031 And W1, W1, 0x3FFFFFFF
	032 Move W2, W21
	033 Call BitsBuffer..ctor, X0, X1, X2
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Add X2, X31, 0
	040 Move X0, X20
	041 Move X1, X19
	042 Call BigIntegerCalculator.PowCore, X0, X1, X2
	043 Move X20, [X31+48]
	044 Move X19, [X31+56]
	045 Move X22, [X31+32]
	046 Move X21, [X31+40]
	047 Move X30, [X31+16]
	048 Add X31, X31, 64
	049 Return X0
	050 Call 0x1C17F20

Method: System.UInt32[] Pow(System.UInt32[] value, System.UInt32[] power, System.UInt32[] modulus)

Disassembly:
	0x0360D590 SUB X31, X31, 0x50
	0x0360D594 STP X30, X23, [X31 + 0x20]
	0x0360D598 STP X22, X21, [X31 + 0x30]
	0x0360D59C STP X20, X19, [X31 + 0x40]
	0x0360D5A0 ADRP X23, 0xDD3000
	0x0360D5A4 LDRB W8, [X23 + 0x407]
	0x0360D5A8 MOV W22, W3
	0x0360D5AC MOV X20, X2
	0x0360D5B0 MOV W19, W1
	0x0360D5B4 MOV X21, X0
	0x0360D5B8 TBNZ X8, 0x0, 0x360D5DC
	0x0360D5BC ADRP X0, 0xB2D000
	0x0360D5C0 LDR X0, [X0 + 0xE88]
	0x0360D5C4 BL 0x1C16CF4
	0x0360D5C8 ADRP X0, 0xB27000
	0x0360D5CC LDR X0, [X0 + 0x940]
	0x0360D5D0 BL 0x1C16CF4
	0x0360D5D4 MOVZ W8, 0x1
	0x0360D5D8 STRB W8, [X23 + 0x407]
	0x0360D5DC ORR X8, X21, X20, 0x0
	0x0360D5E0 CBNZ X8, 0x360D61C
	0x0360D5E4 ADRP X8, 0xB27000
	0x0360D5E8 LDR X8, [X8 + 0x940]
	0x0360D5EC LDR X0, [X8]
	0x0360D5F0 LDR W8, [X0 + 0xE0]
	0x0360D5F4 CBNZ W8, 0x360D5FC
	0x0360D5F8 BL 0x1C16DFC
	0x0360D5FC SXTW X8, W22
	0x0360D600 ADD X1, X8, W19, SXTW
	0x0360D604 ADD X0, X31, 0x10
	0x0360D608 STP X31, X31, [X31 + 0x10]
	0x0360D60C BL 0x360B59C
	0x0360D610 LDP X8, X9, [X31 + 0x10]
	0x0360D614 STP X8, X9, [X31]
	0x0360D618 B 0x360D6C4
	0x0360D61C ADRP X8, 0xB2D000
	0x0360D620 LDR X8, [X8 + 0xE88]
	0x0360D624 CBZ X21, 0x360D658
	0x0360D628 CBZ X20, 0x360D67C
	0x0360D62C LDR X0, [X8]
	0x0360D630 LDR W22, [X21 + 0x18]
	0x0360D634 LDR W23, [X20 + 0x18]
	0x0360D638 LDR W8, [X0 + 0xE0]
	0x0360D63C CBNZ W8, 0x360D644
	0x0360D640 BL 0x1C16DFC
	0x0360D644 CMP W22, W23
	0x0360D648 B.GE 0x360D6A4
	0x0360D64C MOV X0, X20
	0x0360D650 MOV X1, X21
	0x0360D654 B 0x360D6AC
	0x0360D658 LDR X0, [X8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xDD4000
	008 Move W8, [X22+1058]
	009 Move X19, X2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB2E000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1058], W8
	021 Move [X31], X31
	022 Move [X31+8], X31
	023 Compare X21, 0
	024 JumpIfEqual {64}
	025 Compare X19, 0
	026 JumpIfEqual {64}
	027 Move W9, [X21+24]
	028 Move W8, [X19+24]
	029 Move X22, 0xB2E000
	030 Move X22, [X22+3720]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X21
	038 Move X1, X19
	039 Call BigIntegerCalculator.Remainder, X0, X1
	040 Move W8, [X19+24]
	041 Move X21, X0
	042 Move W1, W8
	043 ShiftRight W1, 31
	044 And W1, W1, 0x3FFFFFFF
	045 Add X0, X31, 0
	046 Move X2, X21
	047 Call BitsBuffer..ctor, X0, X1, X2
	048 Move X0, [X22]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Add X2, X31, 0
	054 Move X0, X20
	055 Move X1, X19
	056 Call BigIntegerCalculator.PowCore, X0, X1, X2
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X30, [X31+16]
	062 Add X31, X31, 64
	063 Return X0
	064 Call 0x1C17F20

Method: System.UInt32[] PowCore(System.UInt32[] power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/BitsBuffer value)

Disassembly:
	0x036103C4 CBZ X0, 0x3610414
	0x036103C8 LDR W8, [X0 + 0x18]
	0x036103CC LDUR X28, [X29 - 0x50]
	0x036103D0 MOV X23, X24
	0x036103D4 CBZ W8, 0x3610504
	0x036103D8 ADD X26, X0, 0x20
	0x036103DC B 0x3610508
	0x036103E0 MOV X28, X31
	0x036103E4 MOV X0, X28
	0x036103E8 MOV W1, W31
	0x036103EC BL 0x3EB1B10
	0x036103F0 MOV X23, X24
	0x036103F4 SBFM X2, X24, 0x3E, 0x1F
	0x036103F8 CBZ W23, 0x3610424
	0x036103FC ADD X9, X2, 0xF
	0x03610400 ADD X8, X31, 0x0
	0x03610404 AND X9, X9, 0xFFFFFFFF
	0x03610408 SUB X24, X8, X9
	0x0361040C ADD X31, X24, 0x0
	0x03610410 B 0x3610428
	0x03610414 LDUR X28, [X29 - 0x50]
	0x03610418 MOV X26, X31
	0x0361041C MOV X23, X24
	0x03610420 B 0x3610508
	0x03610424 MOV X24, X31
	0x03610428 MOV X0, X24
	0x0361042C MOV W1, W31
	0x03610430 BL 0x3EB1B10
	0x03610434 SBFM X2, X27, 0x3E, 0x1F
	0x03610438 CBZ W27, 0x3610454
	0x0361043C ADD X9, X2, 0xF
	0x03610440 ADD X8, X31, 0x0
	0x03610444 AND X9, X9, 0xFFFFFFFF
	0x03610448 SUB X22, X8, X9
	0x0361044C ADD X31, X22, 0x0
	0x03610450 B 0x3610458
	0x03610454 MOV X22, X31
	0x03610458 MOV X0, X22
	0x0361045C MOV W1, W31
	0x03610460 BL 0x3EB1B10
	0x03610464 LDR W8, [X25 + 0xE0]
	0x03610468 CBNZ W8, 0x3610474
	0x0361046C MOV X0, X25
	0x03610470 BL 0x1C16DFC
	0x03610474 MOV X2, X21
	0x03610478 LDP X0, X21, [X29 - 0x18]
	0x0361047C LDUR W1, [X29 - 0x54]
	0x03610480 MOV X4, X28
	0x03610484 MOV W3, W21
	0x03610488 BL 0x360E748
	0x0361048C LDUR X0, [X29 - 0x50]
	0x03610490 LDUR W1, [X29 - 0x44]
	0x03610494 MOV X2, X20
	0x03610498 MOV W3, W21
	0x0361049C MOV X4, X24
	0x036104A0 BL 0x360E748
	0x036104A4 MOV X0, X28
	0x036104A8 LDUR X1, [X29 - 0x60]
	0x036104AC MOV X2, X24
	0x036104B0 MOV W3, W23
	0x036104B4 MOV X4, X22
	0x036104B8 MOV W5, W27
	0x036104BC BL 0x36101A0
	0x036104C0 LDUR X0, [X29 - 0x40]
	0x036104C4 LDUR W1, [X29 - 0x34]
	0x036104C8 LDUR W3, [X29 - 0x28]
	0x036104CC MOV X2, X19
	0x036104D0 MOV X4, X22
	0x036104D4 MOV W5, W27
	0x036104D8 BL 0x36100E0
	0x036104DC LDUR X8, [X29 - 0x30]
	0x036104E0 MOV X2, X22
	0x036104E4 MOV W3, W27
	0x036104E8 ADD X0, X8, X19

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+96], X22
	004 Move [X31+104], X21
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 Move X22, 0xDD1000
	008 Move W8, [X22+1059]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB2B000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1059], W8
	021 NotImplemented "Instruction MOVI not yet implemented."
	022 Move [X31+64], X31
	023 Move [X31+72], X31
	024 Move [X31+48], X31
	025 Move [X31+56], X31
	026 Move [X31+32], X31
	027 Move [X31], V0
	028 Move [X31+8], V0
	029 Move X8, [X19]
	030 Compare X8, 0
	031 JumpIfEqual {87}
	032 Move W22, [X8+24]
	033 Add X0, X31, 64
	034 Move W2, W31
	035 Move W1, W22
	036 Call BitsBuffer..ctor, X0, X1, X2
	037 Add X0, X31, 48
	038 Move W2, 1
	039 Move W1, W22
	040 Call BitsBuffer..ctor, X0, X1, X2
	041 Compare X21, 0
	042 JumpIfEqual {87}
	043 Move X22, 0xB2B000
	044 Move X22, [X22+3720]
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X22]
	051 Move X8, [X0+184]
	052 Move W9, [X21+24]
	053 Move W8, [X8]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Add X3, X31, 48
	060 Add X4, X31, 64
	061 Move X0, X20
	062 Move X1, X21
	063 Move X2, X19
	064 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3, X4
	065 Add X0, X31, 0
	066 Move X1, X21
	067 Call FastReducer..ctor, X0, X1
	068 Move X0, [X22]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Add X1, X31, 0
	074 Add X3, X31, 48
	075 Add X4, X31, 64
	076 Move X0, X20
	077 Move X2, X19
	078 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3, X4
	079 Move X0, [X31+48]
	080 Move X20, [X31+112]
	081 Move X19, [X31+120]
	082 Move X22, [X31+96]
	083 Move X21, [X31+104]
	084 Move X30, [X31+80]
	085 Add X31, X31, 128
	086 Return X0
	087 Call 0x1C17F20

Method: System.UInt32[] PowCore(System.UInt32 power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/BitsBuffer value)

Disassembly:
	0x036101EC MOV W22, W1
	0x036101F0 MOV X21, X0
	0x036101F4 TBNZ X8, 0x0, 0x3610224
	0x036101F8 ADRP X0, 0xB2A000
	0x036101FC LDR X0, [X0 + 0xED8]
	0x03610200 BL 0x1C16CF4
	0x03610204 ADRP X0, 0xB2A000
	0x03610208 LDR X0, [X0 + 0xE88]
	0x0361020C BL 0x1C16CF4
	0x03610210 ADRP X0, 0xB0C000
	0x03610214 LDR X0, [X0 + 0xD08]
	0x03610218 BL 0x1C16CF4
	0x0361021C MOVZ W8, 0x1
	0x03610220 STRB W8, [X23 + 0x429]
	0x03610224 LDR X0, [X27]
	0x03610228 LDR W8, [X0 + 0xE0]
	0x0361022C CBNZ W8, 0x3610238
	0x03610230 BL 0x1C16DFC
	0x03610234 LDR X0, [X27]
	0x03610238 LDR X8, [X0 + 0xB8]
	0x0361023C LDR W8, [X8 + 0xC]
	0x03610240 CMP W8, W25
	0x03610244 B.LE 0x36102CC
	0x03610248 CMP W25, 0x1
	0x0361024C B.LT 0x36104FC
	0x03610250 MOV X8, X31
	0x03610254 MOV X9, X31
	0x03610258 MOV W10, W25
	0x0361025C MOV W11, W22
	0x03610260 MOVZ X12, 0x1
	0x03610264 CMP W22, 0x1
	0x03610268 B.LT 0x36102AC
	0x0361026C MOV X13, X31
	0x03610270 MOV X14, X11
	0x03610274 MOV X15, X21
	0x03610278 MOV X16, X8
	0x0361027C SBFM X17, X16, 0x1E, 0x3F
	0x03610280 LDR W0, [X17, X19, LSL]
	0x03610284 LDR W1, [X15], #0x4
	0x03610288 LDR W2, [X20, X9, LSL #2]
	0x0361028C SUBS X14, X14, 0x1
	0x03610290 ADD X13, X13, X0
	0x03610294 ADD X16, X16, X12
	0x03610298 MADD X13, X2, X1, X13
	0x0361029C STR W13, [X17, X19, LSL]
	0x036102A0 UBFM X13, X13, 0x20, 0x3F
	0x036102A4 B.NE 0x361027C
	0x036102A8 B 0x36102B0
	0x036102AC MOV X13, X31
	0x036102B0 ADD W14, W9, W22
	0x036102B4 ADD X9, X9, 0x1
	0x036102B8 CMP X9, X10
	0x036102BC ADD X8, X8, X12
	0x036102C0 STR W13, [X19, W14, SXTW]
	0x036102C4 B.NE 0x3610264
	0x036102C8 B 0x36104FC
	0x036102CC LDR W8, [X0 + 0xE0]
	0x036102D0 SBFM W1, W25, 0x1, 0x1F
	0x036102D4 AND W27, W25, 0xFFFFFFFE
	0x036102D8 STUR X24, [X29 - 0x20]
	0x036102DC SUB W23, W22, W25, 0x1, ASR
	0x036102E0 ADD X22, X21, W1, 0x2, SXTW
	0x036102E4 ADD X24, X20, W1, 0x2, SXTW
	0x036102E8 SUB W28, W25, W25, 0x1, ASR
	0x036102EC ADD X25, X19, W27, 0x2, SXTW
	0x036102F0 STUR W26, [X29 - 0x24]
	0x036102F4 SUB W26, W26, W27
	0x036102F8 STUR X1, [X29 - 0x10]
	0x036102FC CBNZ W8, 0x3610308
	0x03610300 BL 0x1C16DFC
	0x03610304 LDUR X1, [X29 - 0x10]
	0x03610308 SBFM X8, X1, 0x3E, 0x1F
	0x0361030C MOV X0, X21
	0x03610310 MOV X2, X20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+96], X22
	004 Move [X31+104], X21
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 Move X22, 0xDD1000
	008 Move W8, [X22+1060]
	009 Move X19, X2
	010 Move X21, X1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB2B000
	017 Move X0, [X0+3720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1060], W8
	021 NotImplemented "Instruction MOVI not yet implemented."
	022 Move [X31+64], X31
	023 Move [X31+72], X31
	024 Move [X31+48], X31
	025 Move [X31+56], X31
	026 Move [X31+32], X31
	027 Move [X31], V0
	028 Move [X31+8], V0
	029 Move X8, [X19]
	030 Compare X8, 0
	031 JumpIfEqual {87}
	032 Move W22, [X8+24]
	033 Add X0, X31, 64
	034 Move W2, W31
	035 Move W1, W22
	036 Call BitsBuffer..ctor, X0, X1, X2
	037 Add X0, X31, 48
	038 Move W2, 1
	039 Move W1, W22
	040 Call BitsBuffer..ctor, X0, X1, X2
	041 Compare X21, 0
	042 JumpIfEqual {87}
	043 Move X22, 0xB2B000
	044 Move X22, [X22+3720]
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X22]
	051 Move X8, [X0+184]
	052 Move W9, [X21+24]
	053 Move W8, [X8]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Add X3, X31, 48
	060 Add X4, X31, 64
	061 Move W0, W20
	062 Move X1, X21
	063 Move X2, X19
	064 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3, X4
	065 Add X0, X31, 0
	066 Move X1, X21
	067 Call FastReducer..ctor, X0, X1
	068 Move X0, [X22]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Add X1, X31, 0
	074 Add X3, X31, 48
	075 Add X4, X31, 64
	076 Move W0, W20
	077 Move X2, X19
	078 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3, X4
	079 Move X0, [X31+48]
	080 Move X20, [X31+112]
	081 Move X19, [X31+120]
	082 Move X22, [X31+96]
	083 Move X21, [X31+104]
	084 Move X30, [X31+80]
	085 Add X31, X31, 128
	086 Return X0
	087 Call 0x1C17F20

Method: System.Void PowCore(System.UInt32[] power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/BitsBuffer value, ref System.Numerics.BigIntegerCalculator/BitsBuffer result, ref System.Numerics.BigIntegerCalculator/BitsBuffer temp)

Disassembly:
	0x03610508 LDR X0, [X22]
	0x0361050C MOV W1, W23
	0x03610510 BL 0x1C16D6C
	0x03610514 CBZ X0, 0x3610528
	0x03610518 LDR W8, [X0 + 0x18]
	0x0361051C CBZ W8, 0x3610528
	0x03610520 ADD X24, X0, 0x20
	0x03610524 B 0x361052C
	0x03610528 MOV X24, X31
	0x0361052C LDR X0, [X22]
	0x03610530 MOV W1, W27
	0x03610534 BL 0x1C16D6C
	0x03610538 CBZ X0, 0x3610550
	0x0361053C LDR W8, [X0 + 0x18]
	0x03610540 LDUR X9, [X29 - 0x18]
	0x03610544 CBZ W8, 0x3610554
	0x03610548 ADD X22, X0, 0x20
	0x0361054C B 0x3610558
	0x03610550 LDUR X9, [X29 - 0x18]
	0x03610554 MOV X22, X31
	0x03610558 ADRP X8, 0xB2A000
	0x0361055C LDR X8, [X8 + 0xE88]
	0x03610560 LDR X0, [X8]
	0x03610564 LDR W8, [X0 + 0xE0]
	0x03610568 CBNZ W8, 0x3610574
	0x0361056C BL 0x1C16DFC
	0x03610570 LDUR X9, [X29 - 0x18]
	0x03610574 MOV X2, X21
	0x03610578 LDUR X21, [X29 - 0x10]
	0x0361057C LDUR W1, [X29 - 0x54]
	0x03610580 MOV X0, X9
	0x03610584 MOV X4, X26
	0x03610588 MOV W3, W21
	0x0361058C BL 0x360E748
	0x03610590 LDUR W1, [X29 - 0x44]
	0x03610594 MOV X0, X28
	0x03610598 MOV X2, X20
	0x0361059C MOV W3, W21
	0x036105A0 MOV X4, X24
	0x036105A4 BL 0x360E748
	0x036105A8 MOV X0, X26
	0x036105AC MOV W1, W25
	0x036105B0 MOV X2, X24
	0x036105B4 MOV W3, W23
	0x036105B8 MOV X4, X22
	0x036105BC MOV W5, W27
	0x036105C0 BL 0x36101A0
	0x036105C4 LDUR X0, [X29 - 0x40]
	0x036105C8 LDUR W1, [X29 - 0x34]
	0x036105CC LDUR W3, [X29 - 0x28]
	0x036105D0 MOV X2, X19
	0x036105D4 MOV X4, X22
	0x036105D8 MOV W5, W27
	0x036105DC BL 0x36100E0
	0x036105E0 LDUR X8, [X29 - 0x30]
	0x036105E4 MOV X2, X22
	0x036105E8 MOV W3, W27
	0x036105EC ADD X0, X8, X19
	0x036105F0 LDUR W8, [X29 - 0x24]
	0x036105F4 SUB W1, W8, W21
	0x036105F8 BL 0x360E7CC
	0x036105FC LDUR X8, [X29 - 0x20]
	0x03610600 LDR X8, [X8 + 0x28]
	0x03610604 LDUR X9, [X29 - 0x8]
	0x03610608 CMP X8, X9
	0x0361060C B.NE 0x3610630
	0x03610610 ADD X31, X29, 0x0
	0x03610614 LDP X20, X19, [X31 + 0x50]
	0x03610618 LDP X22, X21, [X31 + 0x40]
	0x0361061C LDP X24, X23, [X31 + 0x30]
	0x03610620 LDP X26, X25, [X31 + 0x20]
	0x03610624 LDP X28, X27, [X31 + 0x10]
	0x03610628 LDP X29, X30, [X31], #0x60
	0x0361062C RET
	0x03610630 BL 0x3EB1B20
	0x03610634 STR X30, [X31 - 0x20]!
	0x03610638 STP X20, X19, [X31 + 0x10]
	0x0361063C ADRP X19, 0xDD0000

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0xDD1000
	011 Move W8, [X24+1061]
	012 Move X19, X4
	013 Move X20, X3
	014 Move X21, X2
	015 Move X22, X1
	016 Move X23, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xB2B000
	022 Move X0, [X0+3720]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+1061], W8
	026 Compare X23, 0
	027 JumpIfEqual {95}
	028 Move W8, [X23+24]
	029 Move X9, INVALID
	030 Add X9, X9, X8
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X24, X31
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X8, X23, X24
	035 Move W25, [X8+32]
	036 Move W26, 32
	037 Move TEMP, X25
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {48}
	041 Move X0, X20
	042 Move X1, X21
	043 Move X2, X19
	044 Call BitsBuffer.MultiplySelf, X0, X1, X2
	045 Move X0, X20
	046 Move X1, X22
	047 Call BitsBuffer.Reduce, X0, X1
	048 Move X0, X21
	049 Move X1, X19
	050 Call BitsBuffer.SquareSelf, X0, X1
	051 Move X0, X21
	052 Move X1, X22
	053 Call BitsBuffer.Reduce, X0, X1
	054 Subtract W26, W26, 1
	055 Move W25, W25
	056 ShiftRight W25, 1
	057 And W25, W25, 0x7FFFFFFF
	058 Move X8, [X23+24]
	059 Add X24, X24, 1
	060 Subtract W9, W8, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 And X8, X8, 0
	063 Move X9, W9
	064 Compare W8, 0
	065 JumpIfEqual {94}
	066 Move X8, 0xB2B000
	067 Move X8, [X8+3720]
	068 Move X0, [X8]
	069 Add X8, X23, X9
	070 Move W23, [X8+32]
	071 Move W9, [X0+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move W0, W23
	076 Move X1, X22
	077 Move X2, X21
	078 Move X3, X20
	079 Move X4, X19
	080 Move X20, [X31+64]
	081 Move X19, [X31+72]
	082 Move X22, [X31+48]
	083 Move X21, [X31+56]
	084 Move X24, [X31+32]
	085 Move X23, [X31+40]
	086 Move X26, [X31+16]
	087 Move X25, [X31+24]
	088 Move X30, [X31+80]
	089 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3, X4
	090 Return 
	091 NotImplemented "Instruction SBFM not yet implemented."
	092 Compare W8, 0
	093 JumpIfNotEqual {66}
	094 Call 0x1C17F28
	095 Call 0x1C17F20

Method: System.Void PowCore(System.UInt32 power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/BitsBuffer value, ref System.Numerics.BigIntegerCalculator/BitsBuffer result, ref System.Numerics.BigIntegerCalculator/BitsBuffer temp)

Disassembly:
	0x0361088C CSEL X24, X31, X10, EQ
	0x03610890 LDR W9, [X0 + 0xE0]
	0x03610894 CBNZ W9, 0x361089C
	0x03610898 BL 0x1C16DFC
	0x0361089C ADD X2, X25, W21, 0x2, SXTW
	0x036108A0 CMP W22, W20
	0x036108A4 ADD W21, W22, W20
	0x036108A8 B.GE 0x36108BC
	0x036108AC MOV X0, X23
	0x036108B0 MOV W1, W20
	0x036108B4 MOV W3, W22
	0x036108B8 B 0x36108CC
	0x036108BC MOV X0, X2
	0x036108C0 MOV W1, W22
	0x036108C4 MOV X2, X23
	0x036108C8 MOV W3, W20
	0x036108CC MOV X4, X24
	0x036108D0 MOV W5, W21
	0x036108D4 BL 0x36101A0
	0x036108D8 LDR X0, [X26]
	0x036108DC LDR W8, [X0 + 0xE0]
	0x036108E0 CBNZ W8, 0x36108E8
	0x036108E4 BL 0x1C16DFC
	0x036108E8 MOV X0, X19
	0x036108EC MOV W1, W21
	0x036108F0 LDP X20, X19, [X31 + 0x40]
	0x036108F4 LDP X22, X21, [X31 + 0x30]
	0x036108F8 LDP X24, X23, [X31 + 0x20]
	0x036108FC LDP X26, X25, [X31 + 0x10]
	0x03610900 LDR X30, [X31], #0x50
	0x03610904 B 0x360FCDC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare W0, 0
	008 JumpIfEqual {37}
	009 Move X19, X4
	010 Move X20, X3
	011 Move X21, X2
	012 Move X22, X1
	013 Move W23, W0
	014 Move TEMP, X23
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {25}
	018 Move X0, X20
	019 Move X1, X21
	020 Move X2, X19
	021 Call BitsBuffer.MultiplySelf, X0, X1, X2
	022 Move X0, X20
	023 Move X1, X22
	024 Call BitsBuffer.Reduce, X0, X1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, X21
	027 Move X1, X19
	028 Call BitsBuffer.SquareSelf, X0, X1
	029 Move X0, X21
	030 Move X1, X22
	031 Call BitsBuffer.Reduce, X0, X1
	032 Move W23, W23
	033 ShiftRight W23, 1
	034 And W23, W23, 0x7FFFFFFF
	035 Compare W23, 0
	036 JumpIfNotEqual {14}
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Return 

Method: System.Void PowCore(System.UInt32[] power, ref System.Numerics.BigIntegerCalculator/FastReducer reducer, ref System.Numerics.BigIntegerCalculator/BitsBuffer value, ref System.Numerics.BigIntegerCalculator/BitsBuffer result, ref System.Numerics.BigIntegerCalculator/BitsBuffer temp)

Disassembly:
	0x03610744 RET
	0x03610748 LDR W3, [X0 + 0x20]
	0x0361074C LDP X2, X4, [X0 + 0x8]
	0x03610750 MOV X20, X0
	0x03610754 MOV X21, X1
	0x03610758 SUB W5, W8, 0x1
	0x0361075C MOV X0, X1
	0x03610760 MOV W1, W19
	0x03610764 BL 0x36107BC
	0x03610768 LDR X2, [X20]
	0x0361076C CBZ X2, 0x36107B0
	0x03610770 LDR W3, [X2 + 0x18]
	0x03610774 MOV W1, W0
	0x03610778 LDP X0, X4, [X20 + 0x10]
	0x0361077C ADD W5, W3, 0x1
	0x03610780 BL 0x36107BC
	0x03610784 LDR X4, [X20]
	0x03610788 CBZ X4, 0x36107B0
	0x0361078C LDR W8, [X4 + 0x18]
	0x03610790 LDR X2, [X20 + 0x18]
	0x03610794 MOV W1, W19
	0x03610798 LDP X20, X19, [X31 + 0x10]
	0x0361079C MOV W3, W0
	0x036107A0 ADD W5, W8, 0x1
	0x036107A4 MOV X0, X21
	0x036107A8 LDP X30, X21, [X31], #0x20
	0x036107AC B 0x361090C
	0x036107B0 BL 0x1C16F20
	0x036107B4 LDR X0, [X0]
	0x036107B8 RET
	0x036107BC STR X30, [X31 - 0x50]!
	0x036107C0 STP X26, X25, [X31 + 0x10]
	0x036107C4 STP X24, X23, [X31 + 0x20]
	0x036107C8 STP X22, X21, [X31 + 0x30]
	0x036107CC STP X20, X19, [X31 + 0x40]
	0x036107D0 ADRP X25, 0xDD0000
	0x036107D4 LDRB W8, [X25 + 0x434]
	0x036107D8 MOV W21, W5
	0x036107DC MOV X19, X4
	0x036107E0 MOV W20, W3
	0x036107E4 MOV X23, X2
	0x036107E8 MOV W22, W1
	0x036107EC MOV X24, X0
	0x036107F0 TBNZ X8, 0x0, 0x3610808
	0x036107F4 ADRP X0, 0xB2A000
	0x036107F8 LDR X0, [X0 + 0xE88]
	0x036107FC BL 0x1C16CF4
	0x03610800 MOVZ W8, 0x1
	0x03610804 STRB W8, [X25 + 0x434]
	0x03610808 CBZ X19, 0x3610908
	0x0361080C LDR W2, [X19 + 0x18]
	0x03610810 MOV X0, X19
	0x03610814 MOV W1, W31
	0x03610818 MOV X3, X31
	0x0361081C BL 0x339FA34
	0x03610820 SUBS W22, W22, W21
	0x03610824 B.LE 0x3610840
	0x03610828 CBZ X24, 0x361085C
	0x0361082C LDR W8, [X24 + 0x18]
	0x03610830 CBZ W8, 0x361085C
	0x03610834 ADD X25, X24, 0x20
	0x03610838 CBNZ X23, 0x3610864
	0x0361083C B 0x3610874
	0x03610840 LDP X20, X19, [X31 + 0x40]
	0x03610844 LDP X22, X21, [X31 + 0x30]
	0x03610848 LDP X24, X23, [X31 + 0x20]
	0x0361084C LDP X26, X25, [X31 + 0x10]
	0x03610850 MOV W0, W31
	0x03610854 LDR X30, [X31], #0x50
	0x03610858 RET
	0x0361085C MOV X25, X31
	0x03610860 CBZ X23, 0x3610874
	0x03610864 LDR W8, [X23 + 0x18]
	0x03610868 ADD X9, X23, 0x20
	0x0361086C CMP W8, 0x0
	0x03610870 CSEL X23, X31, X9, EQ
	0x03610874 ADRP X26, 0xB2A000
	0x03610878 LDR X26, [X26 + 0xE88]
	0x0361087C LDR W8, [X19 + 0x18]
	0x03610880 ADD X10, X19, 0x20
	0x03610884 LDR X0, [X26]
	0x03610888 CMP W8, 0x0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0xDD1000
	011 Move W8, [X24+1062]
	012 Move X19, X4
	013 Move X20, X3
	014 Move X21, X2
	015 Move X22, X1
	016 Move X23, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xB2B000
	022 Move X0, [X0+3720]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+1062], W8
	026 Compare X23, 0
	027 JumpIfEqual {99}
	028 Move W8, [X23+24]
	029 Move X9, INVALID
	030 Add X9, X9, X8
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X24, X31
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X8, X23, X24
	035 Move W25, [X8+32]
	036 Move W26, 32
	037 Move TEMP, X25
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {50}
	041 Move X0, X20
	042 Move X1, X21
	043 Move X2, X19
	044 Call BitsBuffer.MultiplySelf, X0, X1, X2
	045 Move X1, [X20]
	046 Move W2, [X20+8]
	047 Move X0, X22
	048 Call FastReducer.Reduce, X0, X1, X2
	049 Move [X20+8], W0
	050 Move X0, X21
	051 Move X1, X19
	052 Call BitsBuffer.SquareSelf, X0, X1
	053 Move X1, [X21]
	054 Move W2, [X21+8]
	055 Move X0, X22
	056 Call FastReducer.Reduce, X0, X1, X2
	057 Subtract W26, W26, 1
	058 Move W25, W25
	059 ShiftRight W25, 1
	060 And W25, W25, 0x7FFFFFFF
	061 Move [X21+8], W0
	062 Move X8, [X23+24]
	063 Add X24, X24, 1
	064 Subtract W9, W8, 1
	065 NotImplemented "Instruction CMP not yet implemented."
	066 And X8, X8, 0
	067 Move X9, W9
	068 Compare W8, 0
	069 JumpIfEqual {98}
	070 Move X8, 0xB2B000
	071 Move X8, [X8+3720]
	072 Move X0, [X8]
	073 Add X8, X23, X9
	074 Move W23, [X8+32]
	075 Move W9, [X0+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move W0, W23
	080 Move X1, X22
	081 Move X2, X21
	082 Move X3, X20
	083 Move X4, X19
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X22, [X31+48]
	087 Move X21, [X31+56]
	088 Move X24, [X31+32]
	089 Move X23, [X31+40]
	090 Move X26, [X31+16]
	091 Move X25, [X31+24]
	092 Move X30, [X31+80]
	093 Call BigIntegerCalculator.PowCore, X0, X1, X2, X3, X4
	094 Return 
	095 NotImplemented "Instruction SBFM not yet implemented."
	096 Compare W8, 0
	097 JumpIfNotEqual {70}
	098 Call 0x1C17F28
	099 Call 0x1C17F20

Method: System.Void PowCore(System.UInt32 power, ref System.Numerics.BigIntegerCalculator/FastReducer reducer, ref System.Numerics.BigIntegerCalculator/BitsBuffer value, ref System.Numerics.BigIntegerCalculator/BitsBuffer result, ref System.Numerics.BigIntegerCalculator/BitsBuffer temp)

Disassembly:
	0x03610908 BL 0x1C16F20
	0x0361090C STR X30, [X31 - 0x50]!
	0x03610910 STP X26, X25, [X31 + 0x10]
	0x03610914 STP X24, X23, [X31 + 0x20]
	0x03610918 STP X22, X21, [X31 + 0x30]
	0x0361091C STP X20, X19, [X31 + 0x40]
	0x03610920 ADRP X25, 0xDD0000
	0x03610924 LDRB W8, [X25 + 0x435]
	0x03610928 MOV W21, W5
	0x0361092C MOV X20, X4
	0x03610930 MOV W24, W3
	0x03610934 MOV X22, X2
	0x03610938 MOV W23, W1
	0x0361093C MOV X19, X0
	0x03610940 TBNZ X8, 0x0, 0x3610958
	0x03610944 ADRP X0, 0xB2A000
	0x03610948 LDR X0, [X0 + 0xE88]
	0x0361094C BL 0x1C16CF4
	0x03610950 MOVZ W8, 0x1
	0x03610954 STRB W8, [X25 + 0x435]
	0x03610958 CMP W23, W21
	0x0361095C CSEL W23, W21, W23, GT
	0x03610960 CMP W24, W21
	0x03610964 CSEL W24, W21, W24, GT
	0x03610968 CBZ X19, 0x3610994
	0x0361096C LDR W8, [X19 + 0x18]
	0x03610970 ADD X9, X19, 0x20
	0x03610974 CMP W8, 0x0
	0x03610978 CSEL X21, X31, X9, EQ
	0x0361097C CBZ X22, 0x361099C
	0x03610980 LDR W8, [X22 + 0x18]
	0x03610984 ADD X9, X22, 0x20
	0x03610988 CMP W8, 0x0
	0x0361098C CSEL X25, X31, X9, EQ
	0x03610990 B 0x36109A0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare W0, 0
	008 JumpIfEqual {41}
	009 Move X19, X4
	010 Move X20, X3
	011 Move X21, X2
	012 Move X22, X1
	013 Move W23, W0
	014 Move TEMP, X23
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {27}
	018 Move X0, X20
	019 Move X1, X21
	020 Move X2, X19
	021 Call BitsBuffer.MultiplySelf, X0, X1, X2
	022 Move X1, [X20]
	023 Move W2, [X20+8]
	024 Move X0, X22
	025 Call FastReducer.Reduce, X0, X1, X2
	026 Move [X20+8], W0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X21
	029 Move X1, X19
	030 Call BitsBuffer.SquareSelf, X0, X1
	031 Move X1, [X21]
	032 Move W2, [X21+8]
	033 Move X0, X22
	034 Call FastReducer.Reduce, X0, X1, X2
	035 Move W23, W23
	036 ShiftRight W23, 1
	037 And W23, W23, 0x7FFFFFFF
	038 Move [X21+8], W0
	039 Compare W23, 0
	040 JumpIfNotEqual {14}
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return 

Method: System.Int32 ActualLength(System.UInt32[] value)

Disassembly:
	0x03610C7C SUB X25, X8, 0x40
	0x03610C80 STUR W31, [X29 - 0x1C]
	0x03610C84 STP V0, V0, [X29 - 0x40]
	0x03610C88 ADD X31, X25, 0x0
	0x03610C8C LDR X0, [X19]
	0x03610C90 STP V0, V0, [X8 - 0x20]
	0x03610C94 STP V0, V0, [X8 - 0x40]
	0x03610C98 LDR W8, [X0 + 0xE0]
	0x03610C9C CBNZ W8, 0x3610CA4
	0x03610CA0 BL 0x1C16DFC
	0x03610CA4 ADRP X23, 0xB0E000
	0x03610CA8 ADRP X20, 0xB0E000
	0x03610CAC LDR X23, [X23 + 0xD68]
	0x03610CB0 LDR X20, [X20 + 0xD50]
	0x03610CB4 SUB X0, X29, 0x18
	0x03610CB8 SUB X3, X29, 0x1C
	0x03610CBC MOVZ W2, 0x40
	0x03610CC0 MOV X1, X25
	0x03610CC4 MOV W4, W31
	0x03610CC8 MOV W5, W31
	0x03610CCC MOVZ W26, 0x40
	0x03610CD0 BL 0x360D3D4
	0x03610CD4 STUR X21, [X29 - 0x50]
	0x03610CD8 TBZ X0, 0x0, 0x3610CE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDD1000
	005 Move W8, [X20+1063]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB2B000
	012 Move X0, [X0+3720]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1063], W8
	016 Compare X19, 0
	017 JumpIfEqual {30}
	018 Move X8, 0xB2B000
	019 Move X8, [X8+3720]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W1, [X19+24]
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Call 0x1C17F20

Method: System.Int32 ActualLength(System.UInt32[] value, System.Int32 length)

Disassembly:
	0x03610CDC MOV X24, X31
	0x03610CE0 B 0x3610DB0
	0x03610CE4 LDR X0, [X23]
	0x03610CE8 LDR W8, [X0 + 0xE0]
	0x03610CEC CBNZ W8, 0x3610CF4
	0x03610CF0 BL 0x1C16DFC
	0x03610CF4 LDR X20, [X20]
	0x03610CF8 LDR X0, [X20 + 0x20]
	0x03610CFC LDRB W8, [X0 + 0x135]
	0x03610D00 TBNZ X8, 0x0, 0x3610D08
	0x03610D04 BL 0x1C5C684
	0x03610D08 LDR X8, [X0 + 0xC0]
	0x03610D0C LDR X0, [X8 + 0x8]
	0x03610D10 LDRB W8, [X0 + 0x135]
	0x03610D14 TBNZ X8, 0x0, 0x3610D1C
	0x03610D18 BL 0x1C5C684
	0x03610D1C LDR W8, [X0 + 0xE0]
	0x03610D20 CBNZ W8, 0x3610D28
	0x03610D24 BL 0x1C16DFC
	0x03610D28 LDR X0, [X20 + 0x20]
	0x03610D2C LDRB W8, [X0 + 0x135]
	0x03610D30 TBNZ X8, 0x0, 0x3610D38
	0x03610D34 BL 0x1C5C684

ISIL:
	001 Move [X31-16], X30
	002 Move X10, W1
	003 And W9, W1, W1
	004 Add W8, W1, 1
	005 Add X11, X0, 28
	006 Subtract X12, X10, 1
	007 Compare X0, 0
	008 JumpIfEqual {21}
	009 Move W13, [X0+24]
	010 Subtract W14, W8, 2
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W13, [X11]
	013 Subtract W8, W8, 1
	014 Move X10, X12
	015 Compare W13, 0
	016 JumpIfEqual {6}
	017 Move W8, W9
	018 Move W0, W8
	019 Move X30, [X31+16]
	020 Return X0
	021 Call 0x1C17F20
	022 Call 0x1C17F28

Method: System.Void Square(System.UInt32* value, System.Int32 valueLength, System.UInt32* bits, System.Int32 bitsLength)

Disassembly:
	0x03610D38 LDR X8, [X0 + 0xC0]
	0x03610D3C LDR X0, [X8 + 0x8]
	0x03610D40 LDRB W8, [X0 + 0x135]
	0x03610D44 TBNZ X8, 0x0, 0x3610D4C
	0x03610D48 BL 0x1C5C684
	0x03610D4C LDR X8, [X0 + 0xB8]
	0x03610D50 LDR X0, [X8]
	0x03610D54 CBZ X0, 0x3611148
	0x03610D58 LDR X8, [X0]
	0x03610D5C LDUR W1, [X29 - 0x1C]
	0x03610D60 LDP X9, X2, [X8 + 0x178]
	0x03610D64 BLR X9
	0x03610D68 ADRP X8, 0xB12000
	0x03610D6C LDR X8, [X8 + 0x2F8]
	0x03610D70 MOV X24, X0
	0x03610D74 LDR X1, [X8]
	0x03610D78 BL 0x25FB4C0
	0x03610D7C MOV X25, X0
	0x03610D80 LDR X0, [X19]
	0x03610D84 MOV X26, X1
	0x03610D88 LDR W8, [X0 + 0xE0]
	0x03610D8C CBNZ W8, 0x3610D94
	0x03610D90 BL 0x1C16DFC
	0x03610D94 SUB X0, X29, 0x18
	0x03610D98 SUB X3, X29, 0x1C
	0x03610D9C MOV X1, X25
	0x03610DA0 MOV X2, X26
	0x03610DA4 MOV W4, W31
	0x03610DA8 MOV W5, W31
	0x03610DAC BL 0x360D324
	0x03610DB0 STUR W22, [X29 - 0x48]
	0x03610DB4 ADRP X8, 0xB0E000
	0x03610DB8 LDUR W19, [X29 - 0x1C]
	0x03610DBC LDR X8, [X8 + 0x2F0]
	0x03610DC0 CMP W19, W26
	0x03610DC4 LDR X20, [X8]
	0x03610DC8 B.LS 0x3610DD4
	0x03610DCC MOV X0, X31
	0x03610DD0 BL 0x339D6EC
	0x03610DD4 LDR X0, [X20 + 0x20]
	0x03610DD8 LDRB W8, [X0 + 0x135]
	0x03610DDC TBNZ X8, 0x0, 0x3610DE4
	0x03610DE0 BL 0x1C5C684
	0x03610DE4 SUB X26, X31, 0x100
	0x03610DE8 ADD X31, X26, 0x0
	0x03610DEC MOVZ W2, 0x100
	0x03610DF0 MOV X0, X26
	0x03610DF4 MOV W1, W31
	0x03610DF8 BL 0x3EB1B10
	0x03610DFC MOVZ W8, 0x80
	0x03610E00 SUBS W20, W19, 0x1
	0x03610E04 STP X31, X26, [X29 - 0x40]
	0x03610E08 STUR X8, [X29 - 0x30]
	0x03610E0C STUR W31, [X29 - 0x28]
	0x03610E10 B.MI 0x3610FF0
	0x03610E14 LDRB W8, [X25, W20, UXTW]
	0x03610E18 ADD W9, W8, 0x10
	0x03610E1C CMP W8, 0xF8
	0x03610E20 CSEL W9, W8, W9, CC
	0x03610E24 CMP W8, 0xF7
	0x03610E28 AND W8, W9, 0xFF
	0x03610E2C B.HI 0x3610E38
	0x03610E30 CMP W8, 0x7
	0x03610E34 B.HI 0x3610EC8
	0x03610E38 CMP W8, 0xA
	0x03610E3C B.CS 0x3610E48
	0x03610E40 ADD W26, W8, 0x30
	0x03610E44 B 0x3610E68
	0x03610E48 LDUR W9, [X29 - 0x44]
	0x03610E4C AND W8, W8, 0xF
	0x03610E50 AND W9, W9, 0xFFFF
	0x03610E54 CMP W9, 0x58
	0x03610E58 B.NE 0x3610E64
	0x03610E5C ADD W26, W8, 0x37
	0x03610E60 B 0x3610E68
	0x03610E64 ADD W26, W8, 0x57
	0x03610E68 ADRP X20, 0xDD0000
	0x03610E6C LDRB W8, [X20 + 0x453]
	0x03610E70 CBNZ W8, 0x3610E88
	0x03610E74 ADRP X0, 0xB12000
	0x03610E78 LDR X0, [X0 + 0x588]
	0x03610E7C BL 0x1C16CF4
	0x03610E80 MOVZ W8, 0x1
	0x03610E84 STRB W8, [X20 + 0x453]
	0x03610E88 LDURSW X8, [X29 - 0x28]
	0x03610E8C LDUR W9, [X29 - 0x30]
	0x03610E90 CMP W8, W9
	0x03610E94 B.GE 0x3610EB4
	0x03610E98 CMP W8, W9
	0x03610E9C B.CS 0x3611144
	0x03610EA0 LDUR X9, [X29 - 0x38]
	0x03610EA4 ADD W10, W8, 0x1
	0x03610EA8 STRH W26, [X9, X8, LSL #1]
	0x03610EAC STUR W10, [X29 - 0x28]
	0x03610EB0 B 0x3610EC0
	0x03610EB4 SUB X0, X29, 0x40
	0x03610EB8 MOV W1, W26
	0x03610EBC BL 0x3615A24
	0x03610EC0 SUBS W20, W19, 0x2
	0x03610EC4 B.MI 0x3610FF0
	0x03610EC8 ADRP X21, 0xDD0000
	0x03610ECC LDRB W8, [X21 + 0x454]
	0x03610ED0 UBFM W9, W20, 0x1F, 0x1E
	0x03610ED4 ADD W26, W9, 0x2
	0x03610ED8 CBNZ W8, 0x3610EFC
	0x03610EDC ADRP X0, 0xB11000
	0x03610EE0 LDR X0, [X0 + 0x850]
	0x03610EE4 BL 0x1C16CF4
	0x03610EE8 ADRP X0, 0xB12000
	0x03610EEC LDR X0, [X0 + 0x588]
	0x03610EF0 BL 0x1C16CF4
	0x03610EF4 MOVZ W8, 0x1
	0x03610EF8 STRB W8, [X21 + 0x454]
	0x03610EFC LDUR W8, [X29 - 0x30]
	0x03610F00 LDURSW X21, [X29 - 0x28]
	0x03610F04 SUB W9, W8, W26
	0x03610F08 CMP W21, W9
	0x03610F0C B.LE 0x3610F20
	0x03610F10 SUB X0, X29, 0x40
	0x03610F14 MOV W1, W26
	0x03610F18 BL 0x3615764
	0x03610F1C LDUR W8, [X29 - 0x30]
	0x03610F20 ADRP X9, 0xB11000
	0x03610F24 LDR X9, [X9 + 0x850]
	0x03610F28 SUBS W8, W8, W21
	0x03610F2C LDR X23, [X9]
	0x03610F30 ADD W9, W21, W26
	0x03610F34 STUR W9, [X29 - 0x28]
	0x03610F38 B.CC 0x3610F44
	0x03610F3C CMP W8, W26
	0x03610F40 B.CS 0x3610F4C
	0x03610F44 MOV X0, X31
	0x03610F48 BL 0x339D6EC
	0x03610F4C LDR X0, [X23 + 0x20]
	0x03610F50 ADRP X27, 0xB2A000
	0x03610F54 ADRP X28, 0xB17000
	0x03610F58 LDUR X22, [X29 - 0x38]
	0x03610F5C LDRB W8, [X0 + 0x135]
	0x03610F60 LDR X27, [X27 + 0xEE0]
	0x03610F64 LDR X28, [X28 + 0xFF0]
	0x03610F68 TBNZ X8, 0x0, 0x3610F70
	0x03610F6C BL 0x1C5C684
	0x03610F70 LDUR W8, [X29 - 0x44]
	0x03610F74 MOV W23, W31
	0x03610F78 ADD X21, X22, X21, 0x1, LSL
	0x03610F7C MOV W20, W20
	0x03610F80 AND W8, W8, 0xFFFF
	0x03610F84 CMP W8, 0x78
	0x03610F88 CSEL X8, X27, X28, EQ
	0x03610F8C LDR X27, [X8]
	0x03610F90 CMP X20, X19
	0x03610F94 B.CS 0x3611144
	0x03610F98 CMP W23, W26
	0x03610F9C B.CS 0x3611144
	0x03610FA0 CBZ X27, 0x3611148
	0x03610FA4 LDRB W22, [X25, X20, LSL]
	0x03610FA8 MOV X0, X27
	0x03610FAC MOV X2, X31
	0x03610FB0 UBFM W1, W22, 0x4, 0x1F
	0x03610FB4 BL 0x3222A1C
	0x03610FB8 ADD W28, W23, 0x1
	0x03610FBC CMP W28, W26
	0x03610FC0 STRH W0, [X21, W23, SXTW]
	0x03610FC4 B.CS 0x3611144
	0x03610FC8 AND W1, W22, 0xF
	0x03610FCC MOV X0, X27
	0x03610FD0 MOV X2, X31
	0x03610FD4 ADD W23, W23, 0x1
	0x03610FD8 BL 0x3222A1C
	0x03610FDC STRH W0, [X21, W23, SXTW]
	0x03610FE0 CMP X20, 0x0
	0x03610FE4 SUB X20, X20, 0x1
	0x03610FE8 ADD W23, W28, 0x1
	0x03610FEC B.GT 0x3610F90
	0x03610FF0 LDUR W8, [X29 - 0x28]
	0x03610FF4 LDUR W14, [X29 - 0x48]
	0x03610FF8 CMP W8, W14
	0x03610FFC B.GE 0x3611038
	0x03611000 LDUR W10, [X29 - 0x44]
	0x03611004 LDUR W9, [X29 - 0x18]
	0x03611008 MOVZ W11, 0x46
	0x0361100C MOVZ W12, 0x66
	0x03611010 AND W10, W10, 0xFFFF
	0x03611014 CMP W10, 0x78
	0x03611018 MOVZ W13, 0x30
	0x0361101C CSEL W10, W12, W11, EQ
	0x03611020 CMP W9, 0x0
	0x03611024 CSEL W2, W13, W10, GE
	0x03611028 SUB W3, W14, W8
	0x0361102C SUB X0, X29, 0x40
	0x03611030 MOV W1, W31
	0x03611034 BL 0x3611160
	0x03611038 CBZ X24, 0x36110D4
	0x0361103C ADRP X8, 0xB0D000
	0x03611040 LDR X8, [X8 + 0xD68]
	0x03611044 LDR X0, [X8]
	0x03611048 LDR W8, [X0 + 0xE0]
	0x0361104C CBNZ W8, 0x3611054
	0x03611050 BL 0x1C16DFC
	0x03611054 ADRP X8, 0xB0D000
	0x03611058 LDR X8, [X8 + 0xD50]
	0x0361105C LDR X19, [X8]
	0x03611060 LDR X0, [X19 + 0x20]
	0x03611064 LDRB W8, [X0 + 0x135]
	0x03611068 TBNZ X8, 0x0, 0x3611070
	0x0361106C BL 0x1C5C684
	0x03611070 LDR X8, [X0 + 0xC0]
	0x03611074 LDR X0, [X8 + 0x8]
	0x03611078 LDRB W8, [X0 + 0x135]
	0x0361107C TBNZ X8, 0x0, 0x3611084
	0x03611080 BL 0x1C5C684
	0x03611084 LDR W8, [X0 + 0xE0]
	0x03611088 CBNZ W8, 0x3611090
	0x0361108C BL 0x1C16DFC
	0x03611090 LDR X0, [X19 + 0x20]
	0x03611094 LDRB W8, [X0 + 0x135]
	0x03611098 TBNZ X8, 0x0, 0x36110A0
	0x0361109C BL 0x1C5C684
	0x036110A0 LDR X8, [X0 + 0xC0]
	0x036110A4 LDR X0, [X8 + 0x8]
	0x036110A8 LDRB W8, [X0 + 0x135]
	0x036110AC TBNZ X8, 0x0, 0x36110B4
	0x036110B0 BL 0x1C5C684
	0x036110B4 LDR X8, [X0 + 0xB8]
	0x036110B8 LDR X0, [X8]
	0x036110BC CBZ X0, 0x3611148
	0x036110C0 LDR X8, [X0]
	0x036110C4 MOV X1, X24
	0x036110C8 MOV W2, W31
	0x036110CC LDP X9, X3, [X8 + 0x188]
	0x036110D0 BLR X9
	0x036110D4 LDP X3, X19, [X29 + 0x60]
	0x036110D8 LDUR W8, [X29 - 0x54]
	0x036110DC TBZ X8, 0x0, 0x3611100

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 64
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X23+40]
	017 Move X22, 0xDD1000
	018 Move X28, 0xB2B000
	019 Move W24, W3
	020 Move [X29-8], X8
	021 Move W8, [X22+1064]
	022 Move X28, [X28+3720]
	023 Move X19, X2
	024 Move W21, W1
	025 Move X20, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {41}
	030 Move X0, 0xB2B000
	031 Move X0, [X0+3792]
	032 Call 0x1C17CF4
	033 Move X0, 0xB2B000
	034 Move X0, [X0+3720]
	035 Call 0x1C17CF4
	036 Move X0, 0xB0D000
	037 Move X0, [X0+3336]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X22+1064], W8
	041 Move X0, [X28]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X28]
	047 Move X8, [X0+184]
	048 Move W8, [X8+4]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X8, X31
	052 Move X9, X31
	053 Move W10, W21
	054 Move X11, 1
	055 Move X12, X31
	056 Compare X9, 0
	057 JumpIfEqual {75}
	058 Move X13, X9
	059 Move X14, X20
	060 Move X15, X8
	061 NotImplemented "Instruction SBFM not yet implemented."
	062 Move W17, [X16]
	063 Move W0, [X14+4]
	064 Move W1, [X20]
	065 Subtract X13, X13, 1
	066 Add X12, X12, X17
	067 Add X15, X15, X11
	068 Multiply X17, X1, X0
	069 Add W0, W12, W17
	070 Add X12, X17, X12
	071 Move X12, X12
	072 ShiftRight X12, 31
	073 And X12, X12, 0x7FFFFFFF
	074 Move [X16], W0
	075 Move W13, [X20]
	076 Move W15, 1
	077 NotImplemented "Instruction SBFM not yet implemented."
	078 NotImplemented "Instruction BFM not yet implemented."
	079 Add X9, X9, 1
	080 NotImplemented "Instruction MADD not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move [X14], W12
	083 Move X12, X12
	084 ShiftRight X12, 32
	085 And X12, X12, 0x7FFFFFFF
	086 Add X8, X8, X11
	087 Move [X19], W12
	088 Move W8, [X0+224]
	089 Move [X29-16], X23
	090 NotImplemented "Instruction SBFM not yet implemented."
	091 And W23, W21, 0xFFFFFFFE
	092 Add X26, X20, W22
	093 Subtract W27, W21, W21
	094 Add X25, X19, W23
	095 Subtract W21, W24, W23
	096 Move [X29-20], W24
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 NotImplemented "Instruction SBFM not yet implemented."
	101 Move X0, X20
	102 Move W1, W22
	103 Move X2, X19
	104 Move W3, W23
	105 Move [X29-32], X8
	106 Call BigIntegerCalculator.Square, X0, X1, X2, X3
	107 Move X0, X26
	108 Move W1, W27
	109 Move X2, X25
	110 Move W3, W21
	111 Move [X29-56], X26
	112 Move [X29-36], W21
	113 Call BigIntegerCalculator.Square, X0, X1, X2, X3
	114 Move X24, [X28]
	115 Add W21, W27, 1
	116 Move W26, W21
	117 ShiftRight W26, 31
	118 And W26, W26, 0x3FFFFFFF
	119 Move [X29-48], X25
	120 Move X8, [X24+184]
	121 Move W8, [X8+8]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction SBFM not yet implemented."
	124 Compare W21, 0
	125 JumpIfEqual {200}
	126 Move X8, W21
	127 Move X8, X8
	128 ShiftRight X8, 62
	129 And X8, X8, 0x1FFFFFFF
	130 Add X8, X8, 15
	131 Add X9, X31, 0
	132 And X8, X8, 0xFFFFFFFF
	133 Subtract X25, X9, X8
	134 Add X31, X25, 0
	135 Move X0, X25
	136 Move W1, W31
	137 Call 0x3EB2B10
	138 NotImplemented "Instruction SBFM not yet implemented."
	139 Compare W26, 0
	140 JumpIfEqual {205}
	141 Add X9, X2, 15
	142 Add X8, X31, 0
	143 And X9, X9, 0xFFFFFFFF
	144 Subtract X28, X8, X9
	145 Add X31, X28, 0
	146 Move X25, 0xB0D000
	147 Move X25, [X25+3336]
	148 Move W1, W21
	149 Move X0, [X25]
	150 Call 0x1C17D6C
	151 Compare X0, 0
	152 JumpIfEqual {157}
	153 Move W8, [X0+24]
	154 Compare W8, 0
	155 JumpIfEqual {157}
	156 Add X24, X0, 32
	157 Move X24, X31
	158 Move X0, [X25]
	159 Move W1, W26
	160 Call 0x1C17D6C
	161 Compare X0, 0
	162 JumpIfEqual {167}
	163 Move W8, [X0+24]
	164 Compare W8, 0
	165 JumpIfEqual {167}
	166 Add X25, X0, 32
	167 Move X25, X31
	168 Move X0, [X28]
	169 Move W8, [X0+224]
	170 Compare W8, 0
	171 JumpIfNotEqual {173}
	172 Call 0x1C17DFC
	173 NotImplemented "Instruction LDUR not yet implemented."
	174 Move W1, W27
	175 Move X2, X20
	176 Move W3, W22
	177 Move X4, X24
	178 Call BigIntegerCalculator.Add, X0, X1, X2, X3, X4, X5
	179 Move X0, X24
	180 Move W1, W21
	181 Move X2, X25
	182 Move W3, W26
	183 Call BigIntegerCalculator.Square, X0, X1, X2, X3
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 Move X2, X19
	187 Move W3, W23
	188 Move X4, X25
	189 Move W5, W26
	190 Call BigIntegerCalculator.SubtractCore, X0, X1, X2, X3, X4, X5
	191 NotImplemented "Instruction LDUR not yet implemented."
	192 Move X2, X25
	193 Move W3, W26
	194 Add X0, X8, X19
	195 NotImplemented "Instruction LDUR not yet implemented."
	196 Subtract W1, W8, W22
	197 Call BigIntegerCalculator.AddSelf, X0, X1, X2, X3
	198 NotImplemented "Instruction LDUR not yet implemented."
	199 Move X8, [X8+40]
	200 Move X0, X31
	201 Move W1, W31
	202 Call 0x3EB2B10
	203 Move X2, X31
	204 Move X25, X31
	205 Move X28, X31
	206 Move X0, X28
	207 Move W1, W31
	208 Call 0x3EB2B10
	209 Move W8, [X24+224]
	210 Compare W8, 0
	211 JumpIfNotEqual {214}
	212 Move X0, X24
	213 Call 0x1C17DFC
	214 NotImplemented "Instruction LDUR not yet implemented."
	215 Move W1, W27
	216 Move X2, X20
	217 Move W3, W22
	218 Move X4, X25
	219 Call BigIntegerCalculator.Add, X0, X1, X2, X3, X4, X5
	220 Move X0, X25
	221 Move W1, W21
	222 Move X2, X28
	223 Move W3, W26
	224 Call BigIntegerCalculator.Square, X0, X1, X2, X3
	225 NotImplemented "Instruction LDUR not yet implemented."
	226 NotImplemented "Instruction LDUR not yet implemented."
	227 Move X2, X19
	228 Move W3, W23
	229 Move X4, X28
	230 Move W5, W26
	231 Call BigIntegerCalculator.SubtractCore, X0, X1, X2, X3, X4, X5
	232 NotImplemented "Instruction LDUR not yet implemented."
	233 Move X2, X28
	234 Move W3, W26
	235 Add X0, X8, X19
	236 NotImplemented "Instruction LDUR not yet implemented."
	237 Subtract W1, W8, W22
	238 Call BigIntegerCalculator.AddSelf, X0, X1, X2, X3
	239 NotImplemented "Instruction LDUR not yet implemented."
	240 Move X8, [X23+40]
	241 NotImplemented "Instruction LDUR not yet implemented."
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Add X31, X29, 0
	244 Move X20, [X31+80]
	245 Move X19, [X31+88]
	246 Move X22, [X31+64]
	247 Move X21, [X31+72]
	248 Move X24, [X31+48]
	249 Move X23, [X31+56]
	250 Move X26, [X31+32]
	251 Move X25, [X31+40]
	252 Move X28, [X31+16]
	253 Move X27, [X31+24]
	254 Move X29, [X31+96]
	255 Move X30, [X31+104]
	256 Return 
	257 Call 0x3EB2B20

Method: System.Void Multiply(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)

Disassembly:
	0x036111A0 ADRP X0, 0xB29000
	0x036111A4 LDR X0, [X0 + 0xEE8]
	0x036111A8 BL 0x1C16CF4
	0x036111AC ADRP X0, 0xB11000
	0x036111B0 LDR X0, [X0 + 0x1A8]
	0x036111B4 BL 0x1C16CF4
	0x036111B8 ADRP X0, 0xB10000
	0x036111BC LDR X0, [X0 + 0x850]
	0x036111C0 BL 0x1C16CF4
	0x036111C4 ADRP X0, 0xB11000
	0x036111C8 LDR X0, [X0 + 0x588]
	0x036111CC BL 0x1C16CF4
	0x036111D0 MOVZ W8, 0x1
	0x036111D4 STRB W8, [X23 + 0x449]
	0x036111D8 LDR W9, [X20 + 0x10]
	0x036111DC LDR W8, [X20 + 0x18]
	0x036111E0 ADRP X23, 0xB10000
	0x036111E4 LDR X23, [X23 + 0x850]
	0x036111E8 SUB W10, W9, W19
	0x036111EC CMP W8, W10
	0x036111F0 B.LE 0x3611208
	0x036111F4 MOV X0, X20
	0x036111F8 MOV W1, W19
	0x036111FC BL 0x3615764
	0x03611200 LDR W8, [X20 + 0x18]
	0x03611204 LDR W9, [X20 + 0x10]
	0x03611208 LDR X25, [X23]
	0x0361120C SUBS W9, W9, W22
	0x03611210 SUB W24, W8, W22
	0x03611214 B.CC 0x3611220
	0x03611218 CMP W9, W24
	0x0361121C B.CS 0x3611228
	0x03611220 MOV X0, X31
	0x03611224 BL 0x339D6EC
	0x03611228 LDR X0, [X25 + 0x20]
	0x0361122C ADRP X26, 0xB11000
	0x03611230 LDR X25, [X20 + 0x8]
	0x03611234 LDRB W8, [X0 + 0x135]
	0x03611238 LDR X26, [X26 + 0x1A8]
	0x0361123C TBNZ X8, 0x0, 0x3611244
	0x03611240 BL 0x1C5C684
	0x03611244 ADD X8, X25, W22, 0x1, SXTW
	0x03611248 MOV W9, W24
	0x0361124C STP X8, X9, [X31]
	0x03611250 LDR W25, [X20 + 0x10]
	0x03611254 LDR X26, [X26]
	0x03611258 ADD W24, W19, W22
	0x0361125C CMP W25, W24
	0x03611260 B.CS 0x3611270
	0x03611264 MOV X0, X31
	0x03611268 BL 0x339D6EC
	0x0361126C LDR W25, [X20 + 0x10]
	0x03611270 LDR X0, [X26 + 0x20]
	0x03611274 ADRP X27, 0xB11000
	0x03611278 LDR X26, [X20 + 0x8]
	0x0361127C LDRB W8, [X0 + 0x135]
	0x03611280 LDR X27, [X27 + 0x918]
	0x03611284 TBNZ X8, 0x0, 0x361128C
	0x03611288 BL 0x1C5C684
	0x0361128C LDR X3, [X27]
	0x03611290 SUB W2, W25, W24
	0x03611294 ADD X1, X26, W24, 0x1, SXTW
	0x03611298 ADD X0, X31, 0x0
	0x0361129C BL 0x25FB714
	0x036112A0 LDR W8, [X20 + 0x10]
	0x036112A4 LDR X23, [X23]
	0x036112A8 SUBS W8, W8, W22
	0x036112AC B.CC 0x36112B8
	0x036112B0 CMP W8, W19
	0x036112B4 B.CS 0x36112C0
	0x036112B8 MOV X0, X31
	0x036112BC BL 0x339D6EC
	0x036112C0 LDR X0, [X23 + 0x20]
	0x036112C4 ADRP X23, 0xB29000
	0x036112C8 LDR X24, [X20 + 0x8]
	0x036112CC SXTW X22, W22
	0x036112D0 LDRB W8, [X0 + 0x135]
	0x036112D4 LDR X23, [X23 + 0xEE8]
	0x036112D8 TBNZ X8, 0x0, 0x36112E0
	0x036112DC BL 0x1C5C684
	0x036112E0 LDR X2, [X23]
	0x036112E4 ADD X8, X24, X22, 0x1, LSL
	0x036112E8 MOV W9, W19
	0x036112EC ADD X0, X31, 0x0
	0x036112F0 MOV W1, W21
	0x036112F4 STP X8, X9, [X31]
	0x036112F8 BL 0x25FB634
	0x036112FC LDR W8, [X20 + 0x18]
	0x03611300 LDP X22, X21, [X31 + 0x40]
	0x03611304 LDP X24, X23, [X31 + 0x30]
	0x03611308 LDP X26, X25, [X31 + 0x20]
	0x0361130C ADD W8, W8, W19
	0x03611310 STR W8, [X20 + 0x18]
	0x03611314 LDP X20, X19, [X31 + 0x50]
	0x03611318 LDP X30, X27, [X31 + 0x10]
	0x0361131C ADD X31, X31, 0x60
	0x03611320 RET
	0x03611324 SUB X31, X31, 0x50
	0x03611328 STP X30, X25, [X31 + 0x10]
	0x0361132C STP X24, X23, [X31 + 0x20]
	0x03611330 STP X22, X21, [X31 + 0x30]
	0x03611334 STP X20, X19, [X31 + 0x40]
	0x03611338 ADRP X23, 0xDCF000
	0x0361133C ADRP X24, 0xB10000
	0x03611340 LDRB W8, [X23 + 0x448]
	0x03611344 LDR X24, [X24 + 0x850]
	0x03611348 MOV X20, X3
	0x0361134C MOV X21, X2
	0x03611350 MOV X22, X1
	0x03611354 MOV X19, X0
	0x03611358 TBNZ X8, 0x0, 0x361137C
	0x0361135C ADRP X0, 0xB10000
	0x03611360 LDR X0, [X0 + 0x850]
	0x03611364 BL 0x1C16CF4
	0x03611368 ADRP X0, 0xB11000
	0x0361136C LDR X0, [X0 + 0x910]
	0x03611370 BL 0x1C16CF4
	0x03611374 MOVZ W8, 0x1
	0x03611378 STRB W8, [X23 + 0x448]
	0x0361137C LDR W23, [X19 + 0x18]
	0x03611380 LDR W8, [X19 + 0x10]
	0x03611384 LDR X24, [X24]
	0x03611388 CMP W8, W23
	0x0361138C B.CS 0x3611398
	0x03611390 MOV X0, X31
	0x03611394 BL 0x339D6EC
	0x03611398 LDR X0, [X24 + 0x20]
	0x0361139C ADRP X25, 0xB11000
	0x036113A0 LDR X24, [X19 + 0x8]
	0x036113A4 LDRB W8, [X0 + 0x135]
	0x036113A8 LDR X25, [X25 + 0x910]
	0x036113AC TBNZ X8, 0x0, 0x36113B4
	0x036113B0 BL 0x1C5C684
	0x036113B4 LDR X3, [X25]
	0x036113B8 ADD X0, X31, 0x0
	0x036113BC MOV X1, X22
	0x036113C0 MOV X2, X21
	0x036113C4 STP X24, X23, [X31]
	0x036113C8 BL 0x25FB79C
	0x036113CC MOV W21, W0
	0x036113D0 TBZ X0, 0x0, 0x36113DC
	0x036113D4 LDR W8, [X19 + 0x18]
	0x036113D8 B 0x36113E0
	0x036113DC MOV W8, W31
	0x036113E0 MOV X0, X19
	0x036113E4 MOV X1, X31
	0x036113E8 STR W8, [X20]
	0x036113EC BL 0x3615E30
	0x036113F0 AND W0, W21, 0x1
	0x036113F4 LDP X20, X19, [X31 + 0x40]
	0x036113F8 LDP X22, X21, [X31 + 0x30]
	0x036113FC LDP X24, X23, [X31 + 0x20]
	0x03611400 LDP X30, X25, [X31 + 0x10]
	0x03611404 ADD X31, X31, 0x50
	0x03611408 RET
	0x0361140C STR X30, [X31 - 0x30]!
	0x03611410 STP X22, X21, [X31 + 0x10]
	0x03611414 STP X20, X19, [X31 + 0x20]
	0x03611418 ADRP X20, 0xDCF000
	0x0361141C ADRP X21, 0xB10000
	0x03611420 LDRB W8, [X20 + 0x447]
	0x03611424 LDR X21, [X21 + 0x850]
	0x03611428 MOV X19, X0
	0x0361142C TBNZ X8, 0x0, 0x3611450
	0x03611430 ADRP X0, 0xB10000
	0x03611434 LDR X0, [X0 + 0x850]
	0x03611438 BL 0x1C16CF4
	0x0361143C ADRP X0, 0xB10000
	0x03611440 LDR X0, [X0 + 0x858]
	0x03611444 BL 0x1C16CF4
	0x03611448 MOVZ W8, 0x1
	0x0361144C STRB W8, [X20 + 0x447]
	0x03611450 LDR W20, [X19 + 0x18]
	0x03611454 LDR W8, [X19 + 0x10]
	0x03611458 LDR X21, [X21]
	0x0361145C CMP W8, W20
	0x03611460 B.CS 0x361146C
	0x03611464 MOV X0, X31
	0x03611468 BL 0x339D6EC
	0x0361146C LDR X0, [X21 + 0x20]
	0x03611470 ADRP X22, 0xB10000
	0x03611474 LDR X21, [X19 + 0x8]
	0x03611478 LDRB W8, [X0 + 0x135]
	0x0361147C LDR X22, [X22 + 0x858]
	0x03611480 TBNZ X8, 0x0, 0x3611488
	0x03611484 BL 0x1C5C684
	0x03611488 LDR X2, [X22]
	0x0361148C MOV X0, X21
	0x03611490 MOV X1, X20
	0x03611494 BL 0x25FB81C
	0x03611498 MOV X2, X0
	0x0361149C MOV X3, X1
	0x036114A0 MOV X0, X31
	0x036114A4 MOV X1, X2
	0x036114A8 MOV X2, X3
	0x036114AC MOV X3, X31
	0x036114B0 BL 0x322EB14
	0x036114B4 MOV X20, X0
	0x036114B8 MOV X0, X19
	0x036114BC MOV X1, X31
	0x036114C0 BL 0x3615E30
	0x036114C4 MOV X0, X20
	0x036114C8 LDP X20, X19, [X31 + 0x20]
	0x036114CC LDP X22, X21, [X31 + 0x10]
	0x036114D0 LDR X30, [X31], #0x30
	0x036114D4 RET
	0x036114D8 STP X29, X30, [X31 - 0x60]!
	0x036114DC STP X28, X27, [X31 + 0x10]
	0x036114E0 STP X26, X25, [X31 + 0x20]
	0x036114E4 STP X24, X23, [X31 + 0x30]
	0x036114E8 STP X22, X21, [X31 + 0x40]
	0x036114EC STP X20, X19, [X31 + 0x50]
	0x036114F0 ADD X29, X31, 0x0
	0x036114F4 SUB X31, X31, 0x80
	0x036114F8 LDR X9, [X29 + 0x68]
	0x036114FC MRS X21, 0xC000
	0x03611500 LDR X8, [X21 + 0x28]
	0x03611504 ADRP X19, 0xDCF000
	0x03611508 STUR X9, [X29 - 0x68]
	0x0361150C LDR X9, [X29 + 0x60]
	0x03611510 MOV X24, X5
	0x03611514 MOV X25, X4
	0x03611518 MOV X27, X3
	0x0361151C STP X6, X9, [X29 - 0x78]
	0x03611520 STUR X8, [X29 - 0x8]
	0x03611524 LDRB W8, [X19 + 0x438]
	0x03611528 LDP X9, X23, [X29 + 0x70]
	0x0361152C MOV X28, X2
	0x03611530 MOV X20, X1
	0x03611534 MOV W22, W0
	0x03611538 STUR X9, [X29 - 0x60]
	0x0361153C STP X1, X2, [X29 - 0x18]
	0x03611540 TBNZ X8, 0x0, 0x36115B8
	0x03611544 ADRP X0, 0xB29000
	0x03611548 LDR X0, [X0 + 0xEF0]
	0x0361154C BL 0x1C16CF4
	0x03611550 ADRP X0, 0xAEB000
	0x03611554 LDR X0, [X0 + 0x8D8]
	0x03611558 BL 0x1C16CF4
	0x0361155C ADRP X0, 0xAE2000
	0x03611560 LDR X0, [X0 + 0x758]
	0x03611564 BL 0x1C16CF4
	0x03611568 ADRP X0, 0xB19000
	0x0361156C LDR X0, [X0 + 0xFC8]
	0x03611570 BL 0x1C16CF4
	0x03611574 ADRP X0, 0xB19000
	0x03611578 LDR X0, [X0 + 0xE08]
	0x0361157C BL 0x1C16CF4
	0x03611580 ADRP X0, 0xB11000
	0x03611584 LDR X0, [X0 + 0x4E8]
	0x03611588 BL 0x1C16CF4
	0x0361158C ADRP X0, 0xB0B000
	0x03611590 LDR X0, [X0 + 0xD08]
	0x03611594 BL 0x1C16CF4
	0x03611598 ADRP X0, 0xB0A000
	0x0361159C LDR X0, [X0 + 0xBE0]
	0x036115A0 BL 0x1C16CF4
	0x036115A4 ADRP X0, 0xB29000
	0x036115A8 LDR X0, [X0 + 0xEF8]
	0x036115AC BL 0x1C16CF4
	0x036115B0 MOVZ W8, 0x1
	0x036115B4 STRB W8, [X19 + 0x438]
	0x036115B8 MOVI V0.2D, 0x0
	0x036115BC SUB X2, X29, 0x1C
	0x036115C0 MOV X0, X25
	0x036115C4 MOV X1, X24
	0x036115C8 STP X31, X31, [X29 - 0x50]
	0x036115CC STP V0, V0, [X29 - 0x40]
	0x036115D0 STUR W31, [X29 - 0x1C]
	0x036115D4 BL 0x3610AB0
	0x036115D8 ORR W8, W0, 0x20
	0x036115DC AND W8, W8, 0xFFFF
	0x036115E0 MOV W26, W0
	0x036115E4 CMP W8, 0x78
	0x036115E8 B.NE 0x361164C
	0x036115EC LDUR W4, [X29 - 0x1C]
	0x036115F0 SUB X31, X31, 0x20
	0x036115F4 LDUR X8, [X29 - 0x60]
	0x036115F8 LDP X6, X7, [X29 - 0x70]
	0x036115FC AND W0, W22, 0x1
	0x03611600 MOV X1, X20
	0x03611604 MOV X2, X28
	0x03611608 MOV W3, W26
	0x0361160C STR X23, [X31 + 0x8]
	0x03611610 STR X8, [X31]
	0x03611614 BL 0x3610BA0
	0x03611618 ADD X31, X31, 0x20
	0x0361161C LDR X8, [X21 + 0x28]
	0x03611620 LDUR X9, [X29 - 0x8]
	0x03611624 CMP X8, X9
	0x03611628 B.NE 0x3611CC4
	0x0361162C ADD X31, X29, 0x0
	0x03611630 LDP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 96
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X24+40]
	017 Move X23, 0xDD0000
	018 Move X27, 0xB2A000
	019 Move W26, W5
	020 Move [X29-8], X8
	021 Move W8, [X23+1065]
	022 Move X27, [X27+3720]
	023 Move X19, X4
	024 Move W25, W3
	025 Move X20, X2
	026 Move W22, W1
	027 Move X21, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {43}
	032 Move X0, 0xB2A000
	033 Move X0, [X0+3800]
	034 Call 0x1C17CF4
	035 Move X0, 0xB2A000
	036 Move X0, [X0+3720]
	037 Call 0x1C17CF4
	038 Move X0, 0xB0C000
	039 Move X0, [X0+3336]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X23+1065], W8
	043 Move X0, [X27]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move X0, [X27]
	049 Move X8, [X0+184]
	050 Move W8, [X8+12]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, X31
	054 Move X9, X31
	055 Move W10, W25
	056 Move W11, W22
	057 Move X12, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X13, X31
	060 Move X14, X11
	061 Move X15, X21
	062 Move X16, X8
	063 NotImplemented "Instruction SBFM not yet implemented."
	064 Move W0, [X17]
	065 Move W1, [X15+4]
	066 Move W2, [X20]
	067 Subtract X14, X14, 1
	068 Add X13, X13, X0
	069 Add X16, X16, X12
	070 NotImplemented "Instruction MADD not yet implemented."
	071 Move [X17], W13
	072 Move X13, X13
	073 ShiftRight X13, 32
	074 And X13, X13, 0x7FFFFFFF
	075 Move X13, X31
	076 Add W14, W9, W22
	077 Add X9, X9, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Add X8, X8, X12
	080 Move [X19], W13
	081 Move W8, [X0+224]
	082 NotImplemented "Instruction SBFM not yet implemented."
	083 And W27, W25, 0xFFFFFFFE
	084 Move [X29-32], X24
	085 Subtract W23, W22, W25
	086 Add X22, X21, W1
	087 Add X24, X20, W1
	088 Subtract W28, W25, W25
	089 Add X25, X19, W27
	090 Move [X29-36], W26
	091 Subtract W26, W26, W27
	092 Move [X29-16], X1
	093 Compare W8, 0
	094 JumpIfNotEqual {97}
	095 Call 0x1C17DFC
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 NotImplemented "Instruction SBFM not yet implemented."
	098 Move X0, X21
	099 Move X2, X20
	100 Move W3, W1
	101 Move X4, X19
	102 Move W5, W27
	103 Move [X29-48], X8
	104 Move [X29-40], W27
	105 Call BigIntegerCalculator.Multiply, X0, X1, X2, X3, X4, X5
	106 Move X0, X22
	107 Move W1, W23
	108 Move X2, X24
	109 Move W3, W28
	110 Move X4, X25
	111 Move W5, W26
	112 Move [X29-24], X22
	113 Move [X29-80], X24
	114 Move [X29-64], X25
	115 Call BigIntegerCalculator.Multiply, X0, X1, X2, X3, X4, X5
	116 Move X8, 0xB2A000
	117 Move X8, [X8+3720]
	118 Add W1, W23, 1
	119 Add W9, W28, 1
	120 Add W27, W9, W1
	121 Move X25, [X8]
	122 Move X24, X9
	123 Move [X29-52], W26
	124 Move [X29-68], W28
	125 Move X8, [X25+184]
	126 Move [X29-84], W23
	127 Move W8, [X8+8]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 NotImplemented "Instruction SBFM not yet implemented."
	130 Move [X29-96], X1
	131 Compare W1, 0
	132 JumpIfEqual {151}
	133 Add X9, X2, 15
	134 Add X8, X31, 0
	135 And X9, X9, 0xFFFFFFFF
	136 Subtract X28, X8, X9
	137 Add X31, X28, 0
	138 Move X22, 0xB0C000
	139 Move X22, [X22+3336]
	140 Move X25, X1
	141 Move X0, [X22]
	142 Call 0x1C17D6C
	143 Compare X0, 0
	144 JumpIfEqual {164}
	145 Move W8, [X0+24]
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 Move X23, X24
	148 Compare W8, 0
	149 JumpIfEqual {224}
	150 Add X26, X0, 32
	151 Move X28, X31
	152 Move X0, X28
	153 Move W1, W31
	154 Call 0x3EB2B10
	155 Move X23, X24
	156 NotImplemented "Instruction SBFM not yet implemented."
	157 Compare W23, 0
	158 JumpIfEqual {167}
	159 Add X9, X2, 15
	160 Add X8, X31, 0
	161 And X9, X9, 0xFFFFFFFF
	162 Subtract X24, X8, X9
	163 Add X31, X24, 0
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 Move X26, X31
	166 Move X23, X24
	167 Move X24, X31
	168 Move X0, X24
	169 Move W1, W31
	170 Call 0x3EB2B10
	171 NotImplemented "Instruction SBFM not yet implemented."
	172 Compare W27, 0
	173 JumpIfEqual {179}
	174 Add X9, X2, 15
	175 Add X8, X31, 0
	176 And X9, X9, 0xFFFFFFFF
	177 Subtract X22, X8, X9
	178 Add X31, X22, 0
	179 Move X22, X31
	180 Move X0, X22
	181 Move W1, W31
	182 Call 0x3EB2B10
	183 Move W8, [X25+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {188}
	186 Move X0, X25
	187 Call 0x1C17DFC
	188 Move X2, X21
	189 Move X0, [X29-24]
	190 Move X21, [X29-16]
	191 NotImplemented "Instruction LDUR not yet implemented."
	192 Move X4, X28
	193 Move W3, W21
	194 Call BigIntegerCalculator.Add, X0, X1, X2, X3, X4, X5
	195 NotImplemented "Instruction LDUR not yet implemented."
	196 NotImplemented "Instruction LDUR not yet implemented."
	197 Move X2, X20
	198 Move W3, W21
	199 Move X4, X24
	200 Call BigIntegerCalculator.Add, X0, X1, X2, X3, X4, X5
	201 Move X0, X28
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 Move X2, X24
	204 Move W3, W23
	205 Move X4, X22
	206 Move W5, W27
	207 Call BigIntegerCalculator.Multiply, X0, X1, X2, X3, X4, X5
	208 NotImplemented "Instruction LDUR not yet implemented."
	209 NotImplemented "Instruction LDUR not yet implemented."
	210 NotImplemented "Instruction LDUR not yet implemented."
	211 Move X2, X19
	212 Move X4, X22
	213 Move W5, W27
	214 Call BigIntegerCalculator.SubtractCore, X0, X1, X2, X3, X4, X5
	215 NotImplemented "Instruction LDUR not yet implemented."
	216 Move X2, X22
	217 Move W3, W27
	218 Add X0, X8, X19
	219 NotImplemented "Instruction LDUR not yet implemented."
	220 Subtract W1, W8, W21
	221 Call BigIntegerCalculator.AddSelf, X0, X1, X2, X3
	222 NotImplemented "Instruction LDUR not yet implemented."
	223 Move X8, [X24+40]
	224 Move X26, X31
	225 Move X0, [X22]
	226 Move W1, W23
	227 Call 0x1C17D6C
	228 Compare X0, 0
	229 JumpIfEqual {234}
	230 Move W8, [X0+24]
	231 Compare W8, 0
	232 JumpIfEqual {234}
	233 Add X24, X0, 32
	234 Move X24, X31
	235 Move X0, [X22]
	236 Move W1, W27
	237 Call 0x1C17D6C
	238 Compare X0, 0
	239 JumpIfEqual {245}
	240 Move W8, [X0+24]
	241 NotImplemented "Instruction LDUR not yet implemented."
	242 Compare W8, 0
	243 JumpIfEqual {246}
	244 Add X22, X0, 32
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 Move X22, X31
	247 Move X8, 0xB2A000
	248 Move X8, [X8+3720]
	249 Move X0, [X8]
	250 Move W8, [X0+224]
	251 Compare W8, 0
	252 JumpIfNotEqual {255}
	253 Call 0x1C17DFC
	254 NotImplemented "Instruction LDUR not yet implemented."
	255 Move X2, X21
	256 NotImplemented "Instruction LDUR not yet implemented."
	257 NotImplemented "Instruction LDUR not yet implemented."
	258 Move X0, X9
	259 Move X4, X26
	260 Move W3, W21
	261 Call BigIntegerCalculator.Add, X0, X1, X2, X3, X4, X5
	262 NotImplemented "Instruction LDUR not yet implemented."
	263 Move X0, X28
	264 Move X2, X20
	265 Move W3, W21
	266 Move X4, X24
	267 Call BigIntegerCalculator.Add, X0, X1, X2, X3, X4, X5
	268 Move X0, X26
	269 Move W1, W25
	270 Move X2, X24
	271 Move W3, W23
	272 Move X4, X22
	273 Move W5, W27
	274 Call BigIntegerCalculator.Multiply, X0, X1, X2, X3, X4, X5
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 NotImplemented "Instruction LDUR not yet implemented."
	277 NotImplemented "Instruction LDUR not yet implemented."
	278 Move X2, X19
	279 Move X4, X22
	280 Move W5, W27
	281 Call BigIntegerCalculator.SubtractCore, X0, X1, X2, X3, X4, X5
	282 NotImplemented "Instruction LDUR not yet implemented."
	283 Move X2, X22
	284 Move W3, W27
	285 Add X0, X8, X19
	286 NotImplemented "Instruction LDUR not yet implemented."
	287 Subtract W1, W8, W21
	288 Call BigIntegerCalculator.AddSelf, X0, X1, X2, X3
	289 NotImplemented "Instruction LDUR not yet implemented."
	290 Move X8, [X8+40]
	291 NotImplemented "Instruction LDUR not yet implemented."
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Add X31, X29, 0
	294 Move X20, [X31+80]
	295 Move X19, [X31+88]
	296 Move X22, [X31+64]
	297 Move X21, [X31+72]
	298 Move X24, [X31+48]
	299 Move X23, [X31+56]
	300 Move X26, [X31+32]
	301 Move X25, [X31+40]
	302 Move X28, [X31+16]
	303 Move X27, [X31+24]
	304 Move X29, [X31+96]
	305 Move X30, [X31+104]
	306 Return 
	307 Call 0x3EB2B20

Method: System.Void SubtractCore(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* core, System.Int32 coreLength)

Disassembly:
	0x036110E0 LDP X1, X2, [X29 - 0x68]
	0x036110E4 SUB X0, X29, 0x40
	0x036110E8 BL 0x3611324
	0x036110EC MOV W8, W0
	0x036110F0 AND W8, W8, 0x1
	0x036110F4 MOV X0, X31
	0x036110F8 STRB W8, [X19]
	0x036110FC B 0x3611110
	0x03611100 SUB X0, X29, 0x40
	0x03611104 STR W31, [X3]
	0x03611108 STRB W31, [X19]
	0x0361110C BL 0x361140C
	0x03611110 LDUR X8, [X29 - 0x50]
	0x03611114 LDR X8, [X8 + 0x28]
	0x03611118 LDUR X9, [X29 - 0x8]
	0x0361111C CMP X8, X9
	0x03611120 B.NE 0x361114C
	0x03611124 ADD X31, X29, 0x0
	0x03611128 LDP X20, X19, [X31 + 0x50]
	0x0361112C LDP X22, X21, [X31 + 0x40]
	0x03611130 LDP X24, X23, [X31 + 0x30]
	0x03611134 LDP X26, X25, [X31 + 0x20]
	0x03611138 LDP X28, X27, [X31 + 0x10]
	0x0361113C LDP X29, X30, [X31], #0x60
	0x03611140 RET
	0x03611144 BL 0x1C16F28
	0x03611148 BL 0x1C16F20
	0x0361114C BL 0x3EB1B20
	0x03611150 STP X31, X1, [X0]
	0x03611154 STR X2, [X0 + 0x10]
	0x03611158 STR W31, [X0 + 0x18]
	0x0361115C RET
	0x03611160 SUB X31, X31, 0x60
	0x03611164 STP X30, X27, [X31 + 0x10]
	0x03611168 STP X26, X25, [X31 + 0x20]
	0x0361116C STP X24, X23, [X31 + 0x30]
	0x03611170 STP X22, X21, [X31 + 0x40]
	0x03611174 STP X20, X19, [X31 + 0x50]
	0x03611178 ADRP X23, 0xDCF000
	0x0361117C LDRB W8, [X23 + 0x449]
	0x03611180 MOV W19, W3
	0x03611184 MOV W21, W2
	0x03611188 MOV W22, W1
	0x0361118C MOV X20, X0
	0x03611190 TBNZ X8, 0x0, 0x36111D8
	0x03611194 ADRP X0, 0xB11000
	0x03611198 LDR X0, [X0 + 0x918]
	0x0361119C BL 0x1C16CF4

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X31
	003 Move W9, W3
	004 Move X10, X0
	005 Move X11, X4
	006 Move W12, [X11]
	007 Move W13, [X10+4]
	008 Move W14, [X2+4]
	009 Subtract X9, X9, 1
	010 Add X8, X8, X12
	011 Subtract X8, X8, X13
	012 Subtract X8, X8, X14
	013 Move [X11+4], W8
	014 NotImplemented "Instruction SBFM not yet implemented."
	015 Move X8, X31
	016 Move W3, W31
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W11, W1
	019 Add X9, X4, W3
	020 Add X10, X0, W3
	021 Subtract X11, X11, W3
	022 Move W12, [X9]
	023 Move W13, [X10+4]
	024 Subtract X11, X11, 1
	025 Add X8, X8, X12
	026 Subtract X8, X8, X13
	027 Move [X9+4], W8
	028 NotImplemented "Instruction SBFM not yet implemented."
	029 Move W3, W1
	030 Compare X8, 0
	031 JumpIfEqual {43}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X9, X4, W3
	034 Add W10, W3, 1
	035 Move W11, [X9]
	036 Add X11, X8, X11
	037 NotImplemented "Instruction SBFM not yet implemented."
	038 Move [X9+4], W11
	039 Compare X8, 0
	040 JumpIfEqual {43}
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Add W10, W10, 1
	043 Return 

Method: System.Void .cctor()

Disassembly:
	0x03611634 LDP X22, X21, [X31 + 0x40]
	0x03611638 LDP X24, X23, [X31 + 0x30]
	0x0361163C LDP X26, X25, [X31 + 0x20]
	0x03611640 LDP X28, X27, [X31 + 0x10]
	0x03611644 LDP X29, X30, [X31], #0x60
	0x03611648 RET
	0x0361164C CBZ X28, 0x36117D8
	0x03611650 LDR X19, [X28 + 0x18]
	0x03611654 STUR X23, [X29 - 0x80]
	0x03611658 SXTW X8, W19
	0x0361165C UBFM X8, X8, 0x3E, 0x3D
	0x03611660 ADD X8, X8, W19, SXTW
	0x03611664 UBFM X8, X8, 0x3F, 0x3E
	0x03611668 CMP X8, W8, SXTW
	0x0361166C B.NE 0x3611C6C
	0x03611670 ADRP X10, 0xB0B000
	0x03611674 LDR X10, [X10 + 0xD08]
	0x03611678 ADD W8, W19, W19, 0x2, LSL
	0x0361167C MOVZ W9, 0x8E39
	0x03611680 MOVK W9, 0x38E30000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xDD0000
	005 Move X20, 0xB2A000
	006 Move W8, [X19+1066]
	007 Move X20, [X20+3720]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB2A000
	013 Move X0, [X0+3720]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1066], W8
	017 Move X8, [X20]
	018 Move X9, -45240320
	019 Move V0, [X9+152]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], V0
	024 Move X30, [X31+32]
	025 Return 

