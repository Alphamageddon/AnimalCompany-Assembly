Type: System.Numerics.BigInteger

Method: System.Void .ctor(System.Int32 value)

Disassembly:
	0x0360C520 MUL X9, X9, X10
	0x0360C524 UDIV X11, X9, X8
	0x0360C528 MSUB X9, X11, X8, X9
	0x0360C52C CMP W19, 0x1
	0x0360C530 B.EQ 0x360C550
	0x0360C534 MUL X10, X10, X10
	0x0360C538 UDIV X11, X10, X8
	0x0360C53C UBFM W19, W19, 0x1, 0x1F
	0x0360C540 MSUB X10, X11, X8, X10
	0x0360C544 CBNZ W19, 0x360C51C
	0x0360C548 B 0x360C550
	0x0360C54C MOVZ W9, 0x1
	0x0360C550 LDP X20, X19, [X31 + 0x20]
	0x0360C554 LDP X22, X21, [X31 + 0x10]
	0x0360C558 UDIV X10, X9, X8
	0x0360C55C MSUB W0, W10, W8, W9
	0x0360C560 LDP X30, X23, [X31], #0x30
	0x0360C564 RET
	0x0360C568 SUB X31, X31, 0x20
	0x0360C56C STP X31, X30, [X31 + 0x8]
	0x0360C570 MOV X1, X0
	0x0360C574 ADD X0, X31, 0x0
	0x0360C578 STR X31, [X31]
	0x0360C57C BL 0x360B59C
	0x0360C580 LDP X0, X1, [X31]
	0x0360C584 LDR X30, [X31 + 0x10]
	0x0360C588 ADD X31, X31, 0x20
	0x0360C58C RET
	0x0360C590 SUB X31, X31, 0x40
	0x0360C594 STR X30, [X31 + 0x10]
	0x0360C598 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD5000
	006 Move W8, [X21+1015]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB29000
	014 Move X0, [X0+2368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1015], W8
	018 Move W8, 0x80000000
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X20, 0xB29000
	021 Move X20, [X20+2368]
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move V0, [X8]
	030 Move [X19], V0
	031 Move [X19], W20
	032 Move [X19+8], X31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 

Method: System.Void .ctor(System.Int64 value)

Disassembly:
	0x0360C59C STP X20, X19, [X31 + 0x30]
	0x0360C5A0 ADRP X22, 0xDD4000
	0x0360C5A4 LDRB W8, [X22 + 0x422]
	0x0360C5A8 MOV X19, X2
	0x0360C5AC MOV X20, X1
	0x0360C5B0 MOV X21, X0
	0x0360C5B4 TBNZ X8, 0x0, 0x360C5CC
	0x0360C5B8 ADRP X0, 0xB2E000
	0x0360C5BC LDR X0, [X0 + 0xE88]
	0x0360C5C0 BL 0x1C16CF4
	0x0360C5C4 MOVZ W8, 0x1
	0x0360C5C8 STRB W8, [X22 + 0x422]
	0x0360C5CC STP X31, X31, [X31]
	0x0360C5D0 CBZ X21, 0x360C658
	0x0360C5D4 CBZ X19, 0x360C658
	0x0360C5D8 LDR W9, [X21 + 0x18]
	0x0360C5DC LDR W8, [X19 + 0x18]
	0x0360C5E0 ADRP X22, 0xB2E000
	0x0360C5E4 LDR X22, [X22 + 0xE88]
	0x0360C5E8 CMP W9, W8
	0x0360C5EC B.LE 0x360C614
	0x0360C5F0 LDR X0, [X22]
	0x0360C5F4 LDR W8, [X0 + 0xE0]
	0x0360C5F8 CBNZ W8, 0x360C600
	0x0360C5FC BL 0x1C16DFC
	0x0360C600 MOV X0, X21
	0x0360C604 MOV X1, X19
	0x0360C608 BL 0x360EE1C
	0x0360C60C LDR W8, [X19 + 0x18]
	0x0360C610 MOV X21, X0
	0x0360C614 UBFM W1, W8, 0x1F, 0x1E
	0x0360C618 ADD X0, X31, 0x0
	0x0360C61C MOV X2, X21
	0x0360C620 BL 0x360F314
	0x0360C624 LDR X0, [X22]
	0x0360C628 LDR W8, [X0 + 0xE0]
	0x0360C62C CBNZ W8, 0x360C634
	0x0360C630 BL 0x1C16DFC
	0x0360C634 ADD X2, X31, 0x0
	0x0360C638 MOV X0, X20
	0x0360C63C MOV X1, X19
	0x0360C640 BL 0x360F3C4
	0x0360C644 LDP X20, X19, [X31 + 0x30]
	0x0360C648 LDP X22, X21, [X31 + 0x20]
	0x0360C64C LDR X30, [X31 + 0x10]
	0x0360C650 ADD X31, X31, 0x40
	0x0360C654 RET
	0x0360C658 BL 0x1C16F20
	0x0360C65C SUB X31, X31, 0x40
	0x0360C660 STR X30, [X31 + 0x10]
	0x0360C664 STP X22, X21, [X31 + 0x20]
	0x0360C668 STP X20, X19, [X31 + 0x30]
	0x0360C66C ADRP X22, 0xDD4000
	0x0360C670 LDRB W8, [X22 + 0x420]
	0x0360C674 MOV X19, X2
	0x0360C678 MOV W20, W1
	0x0360C67C MOV X21, X0
	0x0360C680 TBNZ X8, 0x0, 0x360C698
	0x0360C684 ADRP X0, 0xB2E000
	0x0360C688 LDR X0, [X0 + 0xE88]
	0x0360C68C BL 0x1C16CF4
	0x0360C690 MOVZ W8, 0x1
	0x0360C694 STRB W8, [X22 + 0x420]
	0x0360C698 STP X31, X31, [X31]
	0x0360C69C CBZ X21, 0x360C724
	0x0360C6A0 CBZ X19, 0x360C724
	0x0360C6A4 LDR W9, [X21 + 0x18]
	0x0360C6A8 LDR W8, [X19 + 0x18]
	0x0360C6AC ADRP X22, 0xB2E000
	0x0360C6B0 LDR X22, [X22 + 0xE88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD5000
	006 Move W8, [X21+1016]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xB29000
	014 Move X0, [X0+2368]
	015 Call 0x1C17CF4
	016 Move X0, 0xB11000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1016], W8
	021 Move TEMP, 0x80000000
	022 Not TEMP
	023 Move W8, TEMP
	024 Add X8, X20, X8
	025 Move TEMP, 1
	026 Not TEMP
	027 Move W9, TEMP
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Or X8, X31, 0xFFFFFFFF
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, 0xB29000
	032 Move X20, [X20+2368]
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X20]
	039 Move X8, [X0+184]
	040 Move V0, [X8]
	041 Move [X19], V0
	042 Move [X19], W20
	043 Move [X19+8], X31
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, 1
	051 NotImplemented "Instruction CSNEG not yet implemented."
	052 Move [X19], W8
	053 Move X8, 0xB11000
	054 Move X8, [X8+3336]
	055 NotImplemented "Instruction CSNEG not yet implemented."
	056 Move X21, X20
	057 ShiftRight X21, 32
	058 And X21, X21, 0x7FFFFFFF
	059 Move X0, [X8]
	060 Compare X21, 0
	061 JumpIfNotEqual {71}
	062 Move W1, 1
	063 Call 0x1C17D6C
	064 Move [X19+8], X0
	065 Compare X0, 0
	066 JumpIfEqual {83}
	067 Move W8, [X0+24]
	068 Compare W8, 0
	069 JumpIfEqual {82}
	070 Move [X0+32], W20
	071 Move W1, 2
	072 Call 0x1C17D6C
	073 Move [X19+8], X0
	074 Compare X0, 0
	075 JumpIfEqual {83}
	076 Move W8, [X0+24]
	077 Compare W8, 0
	078 JumpIfEqual {82}
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move [X0+32], W20
	081 Move [X0+36], W21
	082 Call 0x1C17F28
	083 Call 0x1C17F20

Method: System.Void .ctor(System.Byte[] value)

Disassembly:
	0x0360C6B4 CMP W9, W8
	0x0360C6B8 B.LE 0x360C6E0
	0x0360C6BC LDR X0, [X22]
	0x0360C6C0 LDR W8, [X0 + 0xE0]
	0x0360C6C4 CBNZ W8, 0x360C6CC
	0x0360C6C8 BL 0x1C16DFC
	0x0360C6CC MOV X0, X21
	0x0360C6D0 MOV X1, X19
	0x0360C6D4 BL 0x360EE1C
	0x0360C6D8 LDR W8, [X19 + 0x18]
	0x0360C6DC MOV X21, X0
	0x0360C6E0 UBFM W1, W8, 0x1F, 0x1E
	0x0360C6E4 ADD X0, X31, 0x0
	0x0360C6E8 MOV X2, X21
	0x0360C6EC BL 0x360F314
	0x0360C6F0 LDR X0, [X22]
	0x0360C6F4 LDR W8, [X0 + 0xE0]
	0x0360C6F8 CBNZ W8, 0x360C700
	0x0360C6FC BL 0x1C16DFC
	0x0360C700 ADD X2, X31, 0x0
	0x0360C704 MOV W0, W20
	0x0360C708 MOV X1, X19
	0x0360C70C BL 0x360F1EC
	0x0360C710 LDP X20, X19, [X31 + 0x30]
	0x0360C714 LDP X22, X21, [X31 + 0x20]
	0x0360C718 LDR X30, [X31 + 0x10]
	0x0360C71C ADD X31, X31, 0x40
	0x0360C720 RET
	0x0360C724 BL 0x1C16F20
	0x0360C728 SUB X31, X31, 0x40
	0x0360C72C STR X30, [X31 + 0x10]
	0x0360C730 STP X22, X21, [X31 + 0x20]
	0x0360C734 STP X20, X19, [X31 + 0x30]
	0x0360C738 ADRP X22, 0xDD4000
	0x0360C73C LDRB W8, [X22 + 0x421]
	0x0360C740 MOV X19, X2
	0x0360C744 MOV X20, X1
	0x0360C748 MOV W21, W0
	0x0360C74C TBNZ X8, 0x0, 0x360C764
	0x0360C750 ADRP X0, 0xB2E000
	0x0360C754 LDR X0, [X0 + 0xE88]
	0x0360C758 BL 0x1C16CF4
	0x0360C75C MOVZ W8, 0x1
	0x0360C760 STRB W8, [X22 + 0x421]
	0x0360C764 STP X31, X31, [X31]
	0x0360C768 CBZ X19, 0x360C7BC
	0x0360C76C LDR W8, [X19 + 0x18]
	0x0360C770 ADRP X22, 0xB2E000
	0x0360C774 LDR X22, [X22 + 0xE88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD5000
	006 Move W8, [X21+1017]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xB29000
	014 Move X0, [X0+2368]
	015 Call 0x1C17CF4
	016 Move X0, 0xB1D000
	017 Move X0, [X0+608]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1017], W8
	021 Compare X19, 0
	022 JumpIfEqual {40}
	023 Move X8, 0xB29000
	024 Move X8, [X8+2368]
	025 Move W21, [X19+24]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X1, X19, 32
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X2, X21
	036 Move W3, W31
	037 Move W4, W31
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Move X0, 0xAED000
	041 Move X0, [X0+1320]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0xAF2000
	046 Move X0, [X0+3784]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, X31
	051 Call ArgumentNullException..ctor, X0, X1
	052 Move X0, 0xB2F000
	053 Move X0, [X0+3696]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Void .ctor(System.ReadOnlySpan`1<System.Byte> value, System.Boolean isUnsigned = False, System.Boolean isBigEndian = False)

Disassembly:
	0x0360C778 ADD X0, X31, 0x0
	0x0360C77C UBFM W1, W8, 0x1F, 0x1E
	0x0360C780 MOV W2, W21
	0x0360C784 BL 0x360F168
	0x0360C788 LDR X0, [X22]
	0x0360C78C LDR W8, [X0 + 0xE0]
	0x0360C790 CBNZ W8, 0x360C798
	0x0360C794 BL 0x1C16DFC
	0x0360C798 ADD X2, X31, 0x0
	0x0360C79C MOV X0, X20
	0x0360C7A0 MOV X1, X19
	0x0360C7A4 BL 0x360F3C4
	0x0360C7A8 LDP X20, X19, [X31 + 0x30]
	0x0360C7AC LDP X22, X21, [X31 + 0x20]
	0x0360C7B0 LDR X30, [X31 + 0x10]
	0x0360C7B4 ADD X31, X31, 0x40
	0x0360C7B8 RET
	0x0360C7BC BL 0x1C16F20
	0x0360C7C0 SUB X31, X31, 0x40
	0x0360C7C4 STR X30, [X31 + 0x10]
	0x0360C7C8 STP X22, X21, [X31 + 0x20]
	0x0360C7CC STP X20, X19, [X31 + 0x30]
	0x0360C7D0 ADRP X22, 0xDD4000
	0x0360C7D4 LDRB W8, [X22 + 0x41F]
	0x0360C7D8 MOV X19, X2
	0x0360C7DC MOV W20, W1
	0x0360C7E0 MOV W21, W0
	0x0360C7E4 TBNZ X8, 0x0, 0x360C7FC
	0x0360C7E8 ADRP X0, 0xB2E000
	0x0360C7EC LDR X0, [X0 + 0xE88]
	0x0360C7F0 BL 0x1C16CF4
	0x0360C7F4 MOVZ W8, 0x1
	0x0360C7F8 STRB W8, [X22 + 0x41F]
	0x0360C7FC STP X31, X31, [X31]
	0x0360C800 CBZ X19, 0x360C854
	0x0360C804 LDR W8, [X19 + 0x18]
	0x0360C808 ADRP X22, 0xB2E000
	0x0360C80C LDR X22, [X22 + 0xE88]
	0x0360C810 ADD X0, X31, 0x0
	0x0360C814 UBFM W1, W8, 0x1F, 0x1E
	0x0360C818 MOV W2, W21
	0x0360C81C BL 0x360F168
	0x0360C820 LDR X0, [X22]
	0x0360C824 LDR W8, [X0 + 0xE0]
	0x0360C828 CBNZ W8, 0x360C830
	0x0360C82C BL 0x1C16DFC
	0x0360C830 ADD X2, X31, 0x0
	0x0360C834 MOV W0, W20
	0x0360C838 MOV X1, X19
	0x0360C83C BL 0x360F1EC
	0x0360C840 LDP X20, X19, [X31 + 0x30]
	0x0360C844 LDP X22, X21, [X31 + 0x20]
	0x0360C848 LDR X30, [X31 + 0x10]
	0x0360C84C ADD X31, X31, 0x40
	0x0360C850 RET
	0x0360C854 BL 0x1C16F20
	0x0360C858 LDR X9, [X0 + 0x8]
	0x0360C85C LDR W0, [X0]
	0x0360C860 CBZ X9, 0x360C88C
	0x0360C864 LDR W8, [X9 + 0x18]
	0x0360C868 SUBS W10, W8, 0x1
	0x0360C86C B.MI 0x360C88C
	0x0360C870 ADD X9, X9, W10, 0x2, UXTW
	0x0360C874 ADD X9, X9, 0x20
	0x0360C878 LDR W10, [X9], #0xFFFFFFFFFFFFFFFC
	0x0360C87C SUB W8, W8, 0x1
	0x0360C880 CMP W8, 0x0
	0x0360C884 EOR W0, W10, W0, 0x19
	0x0360C888 B.GT 0x360C878
	0x0360C88C RET
	0x0360C890 EOR W0, W1, W0, 0x19
	0x0360C894 RET
	0x0360C898 STP X30, X21, [X31 - 0x20]!
	0x0360C89C STP X20, X19, [X31 + 0x10]
	0x0360C8A0 ADRP X21, 0xDD4000
	0x0360C8A4 LDRB W8, [X21 + 0x3FE]
	0x0360C8A8 MOV X20, X1
	0x0360C8AC MOV X19, X0
	0x0360C8B0 TBNZ X8, 0x0, 0x360C8C8
	0x0360C8B4 ADRP X0, 0xB28000
	0x0360C8B8 LDR X0, [X0 + 0x940]
	0x0360C8BC BL 0x1C16CF4
	0x0360C8C0 MOVZ W8, 0x1
	0x0360C8C4 STRB W8, [X21 + 0x3FE]
	0x0360C8C8 CBZ X20, 0x360C8E4
	0x0360C8CC ADRP X21, 0xB28000
	0x0360C8D0 LDR X21, [X21 + 0x940]
	0x0360C8D4 LDR X8, [X20]
	0x0360C8D8 LDR X0, [X21]
	0x0360C8DC CMP X8, X0
	0x0360C8E0 B.EQ 0x360C8F4
	0x0360C8E4 LDP X20, X19, [X31 + 0x10]
	0x0360C8E8 MOV W0, W31
	0x0360C8EC LDP X30, X21, [X31], #0x20
	0x0360C8F0 RET
	0x0360C8F4 LDR W8, [X0 + 0xE0]
	0x0360C8F8 CBZ W8, 0x360C904
	0x0360C8FC MOV X1, X0
	0x0360C900 B 0x360C910
	0x0360C904 BL 0x1C16DFC
	0x0360C908 LDR X1, [X21]
	0x0360C90C LDR X0, [X20]
	0x0360C910 LDR X8, [X0 + 0x40]
	0x0360C914 LDR X9, [X1 + 0x40]
	0x0360C918 MOV X0, X20
	0x0360C91C CMP X8, X9
	0x0360C920 B.NE 0x360C93C
	0x0360C924 BL 0x1C16E08
	0x0360C928 LDP X1, X2, [X0]
	0x0360C92C MOV X0, X19
	0x0360C930 LDP X20, X19, [X31 + 0x10]
	0x0360C934 LDP X30, X21, [X31], #0x20
	0x0360C938 B 0x360C940
	0x0360C93C BL 0x1C171E0
	0x0360C940 STR X30, [X31 - 0x30]!
	0x0360C944 STP X22, X21, [X31 + 0x10]
	0x0360C948 STP X20, X19, [X31 + 0x20]
	0x0360C94C ADRP X22, 0xDD4000
	0x0360C950 LDRB W8, [X22 + 0x3FF]
	0x0360C954 MOV X19, X2
	0x0360C958 MOV X20, X1
	0x0360C95C MOV X21, X0
	0x0360C960 TBNZ X8, 0x0, 0x360C978
	0x0360C964 ADRP X0, 0xB28000
	0x0360C968 LDR X0, [X0 + 0x940]
	0x0360C96C BL 0x1C16CF4
	0x0360C970 MOVZ W8, 0x1
	0x0360C974 STRB W8, [X22 + 0x3FF]
	0x0360C978 LDR W8, [X21]
	0x0360C97C CMP W8, W20
	0x0360C980 B.NE 0x360C9E0
	0x0360C984 LDR X20, [X21 + 0x8]
	0x0360C988 CMP X20, X19
	0x0360C98C B.EQ 0x360C9E8
	0x0360C990 MOV W0, W31
	0x0360C994 CBZ X19, 0x360C9EC
	0x0360C998 CBZ X20, 0x360C9EC
	0x0360C99C LDR W21, [X20 + 0x18]
	0x0360C9A0 LDR W8, [X19 + 0x18]
	0x0360C9A4 CMP W21, W8
	0x0360C9A8 B.NE 0x360C9E0
	0x0360C9AC ADRP X8, 0xB28000
	0x0360C9B0 LDR X8, [X8 + 0x940]
	0x0360C9B4 LDR X0, [X8]
	0x0360C9B8 LDR W8, [X0 + 0xE0]
	0x0360C9BC CBNZ W8, 0x360C9C4
	0x0360C9C0 BL 0x1C16DFC
	0x0360C9C4 MOV X0, X20
	0x0360C9C8 MOV X1, X19
	0x0360C9CC MOV W2, W21
	0x0360C9D0 BL 0x360C9FC
	0x0360C9D4 CMP W0, 0x0
	0x0360C9D8 CSET W0, EQ
	0x0360C9DC B 0x360C9EC
	0x0360C9E0 MOV W0, W31
	0x0360C9E4 B 0x360C9EC
	0x0360C9E8 MOVZ W0, 0x1
	0x0360C9EC LDP X20, X19, [X31 + 0x20]
	0x0360C9F0 LDP X22, X21, [X31 + 0x10]
	0x0360C9F4 LDR X30, [X31], #0x30
	0x0360C9F8 RET
	0x0360C9FC STR X30, [X31 - 0x10]!
	0x0360CA00 SUB W8, W2, 0x1
	0x0360CA04 TBNZ X8, 0x1F, 0x360CA50
	0x0360CA08 CBZ X0, 0x360CA5C
	0x0360CA0C LDR W9, [X0 + 0x18]
	0x0360CA10 CMP W8, W9
	0x0360CA14 B.CS 0x360CA60
	0x0360CA18 CBZ X1, 0x360CA5C
	0x0360CA1C LDR W9, [X1 + 0x18]
	0x0360CA20 CMP W8, W9
	0x0360CA24 B.CS 0x360CA60
	0x0360CA28 MOV W9, W8
	0x0360CA2C ADD X10, X0, X9, 0x2, LSL
	0x0360CA30 ADD X9, X1, X9, 0x2, LSL
	0x0360CA34 LDR W10, [X10 + 0x20]
	0x0360CA38 LDR W9, [X9 + 0x20]
	0x0360CA3C SUB W8, W8, 0x1
	0x0360CA40 CMP W10, W9
	0x0360CA44 B.EQ 0x360CA04
	0x0360CA48 ADD W0, W8, 0x2
	0x0360CA4C B 0x360CA54
	0x0360CA50 MOV W0, W31
	0x0360CA54 LDR X30, [X31], #0x10
	0x0360CA58 RET
	0x0360CA5C BL 0x1C16F20
	0x0360CA60 BL 0x1C16F28
	0x0360CA64 SUB X31, X31, 0x20
	0x0360CA68 STP X30, X19, [X31 + 0x10]
	0x0360CA6C STP X31, X31, [X31]
	0x0360CA70 LDR W19, [X0]
	0x0360CA74 LDR X8, [X0 + 0x8]
	0x0360CA78 SXTW X9, W19
	0x0360CA7C CBZ X8, 0x360CAB0
	0x0360CA80 EOR X9, X9, X1, 0x0
	0x0360CA84 TBNZ X9, 0x0, 0x360CAE0
	0x0360CA88 LDR W9, [X8 + 0x18]
	0x0360CA8C CMP W9, 0x2
	0x0360CA90 B.GT 0x360CAE0
	0x0360CA94 CMP X1, 0x0
	0x0360CA98 CSNEG X1, X1, X1, PL
	0x0360CA9C CMP W9, 0x2
	0x0360CAA0 B.EQ 0x360CAC8
	0x0360CAA4 CBZ W9, 0x360CAF0
	0x0360CAA8 LDR W8, [X8 + 0x20]
	0x0360CAAC B 0x360CACC
	0x0360CAB0 ADD X0, X31, 0x0
	0x0360CAB4 MOV X2, X31
	0x0360CAB8 STR X9, [X31]
	0x0360CABC BL 0x337C8BC
	0x0360CAC0 MOV W19, W0
	0x0360CAC4 B 0x360CAE0
	0x0360CAC8 LDR X8, [X8 + 0x20]
	0x0360CACC ADD X0, X31, 0x8
	0x0360CAD0 MOV X2, X31
	0x0360CAD4 STR X8, [X31 + 0x8]
	0x0360CAD8 BL 0x339A8B8
	0x0360CADC MUL W19, W0, W19
	0x0360CAE0 MOV W0, W19
	0x0360CAE4 LDP X30, X19, [X31 + 0x10]
	0x0360CAE8 ADD X31, X31, 0x20
	0x0360CAEC RET
	0x0360CAF0 BL 0x1C16F28
	0x0360CAF4 MOV W8, W1
	0x0360CAF8 BFM X8, X0, 0x20, 0x1F
	0x0360CAFC MOV X0, X8
	0x0360CB00 RET
	0x0360CB04 STR X30, [X31 - 0x30]!
	0x0360CB08 STP X22, X21, [X31 + 0x10]
	0x0360CB0C STP X20, X19, [X31 + 0x20]
	0x0360CB10 ADRP X21, 0xDD4000
	0x0360CB14 LDRB W8, [X21 + 0x400]
	0x0360CB18 MOV X19, X2
	0x0360CB1C MOV X22, X1
	0x0360CB20 MOV X20, X0
	0x0360CB24 TBNZ X8, 0x0, 0x360CB3C
	0x0360CB28 ADRP X0, 0xB28000
	0x0360CB2C LDR X0, [X0 + 0x940]
	0x0360CB30 BL 0x1C16CF4
	0x0360CB34 MOVZ W8, 0x1
	0x0360CB38 STRB W8, [X21 + 0x400]
	0x0360CB3C LDR W0, [X20]
	0x0360CB40 EOR W8, W0, W22, 0x0
	0x0360CB44 TBNZ X8, 0x1F, 0x360CB70
	0x0360CB48 LDR X21, [X20 + 0x8]
	0x0360CB4C CBZ X21, 0x360CB80
	0x0360CB50 CBZ X19, 0x360CC14
	0x0360CB54 LDR W22, [X21 + 0x18]
	0x0360CB58 LDR W8, [X19 + 0x18]
	0x0360CB5C CMP W22, W8
	0x0360CB60 B.GT 0x360CC14
	0x0360CB64 B.GE 0x360CB9C
	0x0360CB68 SUB W0, W31, W0
	0x0360CB6C B 0x360CC14
	0x0360CB70 CMP W0, 0x0
	0x0360CB74 MOVZ W8, 0x1
	0x0360CB78 CSNEG W0, W8, W8, GE
	0x0360CB7C B 0x360CC14
	0x0360CB80 CBZ X19, 0x360CB8C
	0x0360CB84 SUB W0, W31, W22
	0x0360CB88 B 0x360CC14
	0x0360CB8C CMP W0, W22
	0x0360CB90 B.GE 0x360CC10
	0x0360CB94 MOVN W0, 0x0
	0x0360CB98 B 0x360CC14
	0x0360CB9C ADRP X8, 0xB28000
	0x0360CBA0 LDR X8, [X8 + 0x940]
	0x0360CBA4 LDR X0, [X8]
	0x0360CBA8 LDR W8, [X0 + 0xE0]
	0x0360CBAC CBNZ W8, 0x360CBB4
	0x0360CBB0 BL 0x1C16DFC
	0x0360CBB4 MOV X0, X21
	0x0360CBB8 MOV X1, X19
	0x0360CBBC MOV W2, W22
	0x0360CBC0 BL 0x360C9FC
	0x0360CBC4 CBZ W0, 0x360CC14
	0x0360CBC8 LDR X8, [X20 + 0x8]
	0x0360CBCC CBZ X8, 0x360CC28
	0x0360CBD0 LDR W10, [X8 + 0x18]
	0x0360CBD4 SUB W9, W0, 0x1
	0x0360CBD8 CMP W9, W10
	0x0360CBDC B.CS 0x360CC24
	0x0360CBE0 LDR W10, [X19 + 0x18]
	0x0360CBE4 SXTW X9, W9
	0x0360CBE8 CMP W9, W10
	0x0360CBEC B.CS 0x360CC24
	0x0360CBF0 ADD X8, X8, X9, 0x2, LSL
	0x0360CBF4 ADD X9, X19, X9, 0x2, LSL
	0x0360CBF8 LDR W8, [X8 + 0x20]
	0x0360CBFC LDR W9, [X9 + 0x20]
	0x0360CC00 LDR W10, [X20]
	0x0360CC04 CMP W8, W9
	0x0360CC08 CSNEG W0, W10, W10, CS
	0x0360CC0C B 0x360CC14
	0x0360CC10 CSET W0, GT
	0x0360CC14 LDP X20, X19, [X31 + 0x20]
	0x0360CC18 LDP X22, X21, [X31 + 0x10]
	0x0360CC1C LDR X30, [X31], #0x30
	0x0360CC20 RET
	0x0360CC24 BL 0x1C16F28
	0x0360CC28 BL 0x1C16F20
	0x0360CC2C STP X30, X21, [X31 - 0x20]!
	0x0360CC30 STP X20, X19, [X31 + 0x10]
	0x0360CC34 ADRP X21, 0xDD4000
	0x0360CC38 LDRB W8, [X21 + 0x401]
	0x0360CC3C MOV X20, X1
	0x0360CC40 MOV X19, X0
	0x0360CC44 TBNZ X8, 0x0, 0x360CC5C
	0x0360CC48 ADRP X0, 0xB28000
	0x0360CC4C LDR X0, [X0 + 0x940]
	0x0360CC50 BL 0x1C16CF4
	0x0360CC54 MOVZ W8, 0x1
	0x0360CC58 STRB W8, [X21 + 0x401]
	0x0360CC5C CBZ X20, 0x360CC88
	0x0360CC60 ADRP X21, 0xB28000
	0x0360CC64 LDR X21, [X21 + 0x940]
	0x0360CC68 LDR X8, [X20]
	0x0360CC6C LDR X0, [X21]
	0x0360CC70 CMP X8, X0
	0x0360CC74 B.NE 0x360CCD0
	0x0360CC78 LDR W8, [X0 + 0xE0]
	0x0360CC7C CBZ W8, 0x360CC98
	0x0360CC80 MOV X1, X0
	0x0360CC84 B 0x360CCA4
	0x0360CC88 LDP X20, X19, [X31 + 0x10]
	0x0360CC8C MOVZ W0, 0x1
	0x0360CC90 LDP X30, X21, [X31], #0x20
	0x0360CC94 RET
	0x0360CC98 BL 0x1C16DFC
	0x0360CC9C LDR X1, [X21]
	0x0360CCA0 LDR X0, [X20]
	0x0360CCA4 LDR X8, [X0 + 0x40]
	0x0360CCA8 LDR X9, [X1 + 0x40]
	0x0360CCAC MOV X0, X20

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X24, 0xDD5000
	014 Move W8, [X24+1018]
	015 Move W22, W4
	016 Move W23, W3
	017 Move X21, X2
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0xB29000
	025 Move X0, [X0+2368]
	026 Call 0x1C17CF4
	027 Move X0, 0xB2F000
	028 Move X0, [X0+3704]
	029 Call 0x1C17CF4
	030 Move X0, 0xB17000
	031 Move X0, [X0+2752]
	032 Call 0x1C17CF4
	033 Move X0, 0xB11000
	034 Move X0, [X0+3336]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X24+1018], W8
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract W8, W21, 1
	040 And W31, W22, 1
	041 Add X8, X20, X8
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move W8, [X8]
	044 Xor W10, W23, 1
	045 NotImplemented "Instruction SXTB not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSET not yet implemented."
	048 And W25, W9, W10
	049 Compare W8, 0
	050 JumpIfEqual {53}
	051 Move W27, W21
	052 Move W25, W31
	053 Move TEMP, X22
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {68}
	057 Move W23, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move W8, [X20]
	060 Compare W8, 0
	061 JumpIfNotEqual {79}
	062 Add W23, W23, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X8, 0xB2F000
	065 Move X8, [X8+3704]
	066 Move W23, W21
	067 Move X24, [X8]
	068 Subtract W8, W21, 2
	069 Add X9, X20, X8
	070 Move W10, [X9]
	071 Compare W10, 0
	072 JumpIfNotEqual {78}
	073 Subtract W8, W8, 1
	074 Subtract X9, X9, 1
	075 Move TEMP, 0
	076 Not TEMP
	077 Move W8, TEMP
	078 Add W8, W8, 1
	079 Move X8, 0xB2F000
	080 Move X8, [X8+3704]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X24, [X8]
	083 Move X0, X31
	084 Call ThrowHelper.ThrowArgumentOutOfRangeException
	085 Move X0, [X24+32]
	086 Move W8, [X0+309]
	087 Move TEMP, X8
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {92}
	091 Call 0x1C5D684
	092 Subtract W21, W21, W23
	093 Add X20, X20, W23
	094 Move W8, W21
	095 Move W27, W21
	096 Move W21, W8
	097 Compare W8, 0
	098 JumpIfEqual {154}
	099 Subtract W26, W21, 4
	100 Move X8, 0xB11000
	101 Move X8, [X8+3336]
	102 And W29, W21, 3
	103 Move W28, W21
	104 ShiftRight W28, 2
	105 And W28, W28, 0x7FFFFFFF
	106 NotImplemented "Instruction CINC not yet implemented."
	107 Move X0, [X8]
	108 Move W1, W24
	109 Call 0x1C17D6C
	110 Move X23, X0
	111 Move X8, X31
	112 Move W9, W28
	113 Move TEMP, X22
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {156}
	117 Add X11, X23, X8
	118 Subtract W12, W27, W26
	119 Move W10, W31
	120 Add X11, X11, 32
	121 NotImplemented "Instruction CSEL not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Compare X23, 0
	124 JumpIfEqual {349}
	125 Move W13, [X23+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W13, [X20]
	128 Move W14, [X11]
	129 Add W10, W10, 1
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add W26, W26, 1
	132 NotImplemented "Instruction BFM not yet implemented."
	133 Move [X11], W13
	134 Add X8, X8, 1
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Subtract W26, W26, 8
	137 NotImplemented "Instruction SBFM not yet implemented."
	138 Move [X19], W8
	139 Move TEMP, X22
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {208}
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move W10, W27
	145 Move W11, W21
	146 Compare X10, 0
	147 JumpIfEqual {348}
	148 Move W9, [X20+1]
	149 Subtract X11, X11, 1
	150 Subtract X10, X10, 1
	151 NotImplemented "Instruction BFM not yet implemented."
	152 Move W8, W9
	153 Move [X19], W9
	154 Move [X19], W31
	155 Move [X19+8], X31
	156 Move W10, 3
	157 Add X12, X23, X8
	158 Move W11, W31
	159 Add X12, X12, 32
	160 Add W13, W10, W11
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Compare X23, 0
	163 JumpIfEqual {349}
	164 Move W14, [X23+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W13, [X20]
	167 Move W14, [X12]
	168 Subtract W11, W11, 1
	169 Add W31, W11, 4
	170 NotImplemented "Instruction BFM not yet implemented."
	171 Move [X12], W13
	172 Add W10, W10, W11
	173 Add X8, X8, 1
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Add W10, W10, 8
	176 Compare W29, 0
	177 JumpIfEqual {267}
	178 Compare W25, 0
	179 JumpIfEqual {189}
	180 Move W9, [X23+24]
	181 Move W8, W24
	182 Subtract X8, X8, 1
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Add X8, X23, X8
	185 Move TEMP, 0
	186 Not TEMP
	187 Move W9, TEMP
	188 Move [X8+32], W9
	189 Move TEMP, X22
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {253}
	193 Add X9, X23, W28
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move W8, W27
	196 Add X9, X9, 32
	197 NotImplemented "Instruction CSINC not yet implemented."
	198 Compare X8, 0
	199 JumpIfEqual {348}
	200 Move W11, [X23+24]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move W11, [X20+1]
	203 Move W12, [X9]
	204 Subtract X10, X10, 1
	205 Subtract X8, X8, 1
	206 NotImplemented "Instruction BFM not yet implemented."
	207 Move [X9], W11
	208 Subtract W10, W21, 1
	209 Move W11, W10
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move W9, [X20]
	212 Subtract W11, W11, 1
	213 NotImplemented "Instruction BFM not yet implemented."
	214 Move W8, W9
	215 Move [X19], W9
	216 Move W9, W8
	217 NotImplemented "Instruction CMP not yet implemented."
	218 NotImplemented "Instruction CSET not yet implemented."
	219 Or W8, W25, W8
	220 Move [X19+8], X31
	221 Move TEMP, X8
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfNotEqual {238}
	225 Move W8, 0x80000000
	226 NotImplemented "Instruction CMP not yet implemented."
	227 Move X20, 0xB29000
	228 Move X20, [X20+2368]
	229 Move X0, [X20]
	230 Move W8, [X0+224]
	231 Compare W8, 0
	232 JumpIfNotEqual {235}
	233 Call 0x1C17DFC
	234 Move X0, [X20]
	235 Move X8, [X0+184]
	236 Move V0, [X8]
	237 Move [X19], V0
	238 Move X8, 0xB11000
	239 Move X8, [X8+3336]
	240 Move W1, 1
	241 Move X0, [X8]
	242 Call 0x1C17D6C
	243 Compare X0, 0
	244 JumpIfEqual {349}
	245 Move W8, [X0+24]
	246 Compare W8, 0
	247 JumpIfEqual {348}
	248 Move W8, [X19]
	249 Move W9, 1
	250 Move [X0+32], W8
	251 Move [X19+8], X0
	252 Move [X19], W9
	253 Subtract W8, W21, 1
	254 And W9, W21, 0xFFFFFFFC
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Add X10, X23, W28
	257 Add X10, X10, 32
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move W11, [X23+24]
	260 NotImplemented "Instruction CMP not yet implemented."
	261 Move W11, [X20]
	262 Move W12, [X10]
	263 Subtract W8, W8, 1
	264 NotImplemented "Instruction CMP not yet implemented."
	265 NotImplemented "Instruction BFM not yet implemented."
	266 Move [X10], W11
	267 Compare W25, 0
	268 JumpIfEqual {298}
	269 Move X0, X23
	270 Call NumericsHelpers.DangerousMakeTwosComplement, X0
	271 Move W8, [X23+24]
	272 Subtract W9, W8, 1
	273 Add W31, W9, 1
	274 NotImplemented "Instruction CSEL not yet implemented."
	275 Add W20, W8, 1
	276 Subtract W10, W20, 2
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Add X10, X23, W10
	279 Move W10, [X10+32]
	280 Subtract W20, W20, 1
	281 Compare W10, 0
	282 JumpIfEqual {276}
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move W9, [X23+32]
	285 Move W10, 0x80000000
	286 NotImplemented "Instruction CMP not yet implemented."
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Move X20, 0xB29000
	289 Move X20, [X20+2368]
	290 Move X0, [X20]
	291 Move W8, [X0+224]
	292 Compare W8, 0
	293 JumpIfNotEqual {296}
	294 Call 0x1C17DFC
	295 Move X0, [X20]
	296 Move X8, [X0+184]
	297 Move V0, [X8+3]
	298 Move W8, 1
	299 Move [X19], W8
	300 Move W20, W9
	301 Move TEMP, 0
	302 Not TEMP
	303 Move W9, TEMP
	304 NotImplemented "Instruction CMP not yet implemented."
	305 Move [X19], W9
	306 Move [X19+8], X23
	307 Move X20, [X31+80]
	308 Move X19, [X31+88]
	309 Move X22, [X31+64]
	310 Move X21, [X31+72]
	311 Move X24, [X31+48]
	312 Move X23, [X31+56]
	313 Move X26, [X31+32]
	314 Move X25, [X31+40]
	315 Move X28, [X31+16]
	316 Move X27, [X31+24]
	317 Move X29, [X31+96]
	318 Move X30, [X31+104]
	319 Return 
	320 Move X8, 0xB11000
	321 Move X8, [X8+3336]
	322 Move W1, W20
	323 Move X0, [X8]
	324 Call 0x1C17D6C
	325 Move X2, X0
	326 Move [X19+8], X0
	327 Move X0, X23
	328 Move W4, W20
	329 Move X20, [X31+80]
	330 Move X19, [X31+88]
	331 Move X22, [X31+64]
	332 Move X21, [X31+72]
	333 Move X24, [X31+48]
	334 Move X23, [X31+56]
	335 Move X26, [X31+32]
	336 Move X25, [X31+40]
	337 Move X28, [X31+16]
	338 Move X27, [X31+24]
	339 Move W1, W31
	340 Move W3, W31
	341 Move X5, X31
	342 Move X29, [X31+96]
	343 Move X30, [X31+104]
	344 Call Array.Copy, X0, X1, X2, X3, X4
	345 Return 
	346 Subtract W8, W31, W9
	347 Move [X19], W8
	348 Call 0x1C17F28
	349 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 n, System.UInt32[] rgu)

Disassembly:
	0x0360CD64 LDR X0, [X21]
	0x0360CD68 LDR W8, [X0 + 0xE0]
	0x0360CD6C CBNZ W8, 0x360CD74

ISIL:
	001 Move [X0], W1
	002 Move [X0+8], X2
	003 Return 

Method: System.Void .ctor(System.UInt32[] value, System.Boolean negative)

Disassembly:
	0x0360CD70 BL 0x1C16DFC
	0x0360CD74 MOV X0, X19
	0x0360CD78 LDP X20, X19, [X31 + 0x10]
	0x0360CD7C MOV W1, W31
	0x0360CD80 MOV W2, W31
	0x0360CD84 LDP X30, X21, [X31], #0x20
	0x0360CD88 B 0x360CD8C
	0x0360CD8C SUB X31, X31, 0x40
	0x0360CD90 STP X30, X23, [X31 + 0x10]
	0x0360CD94 STP X22, X21, [X31 + 0x20]
	0x0360CD98 STP X20, X19, [X31 + 0x30]
	0x0360CD9C ADRP X23, 0xDD4000
	0x0360CDA0 ADRP X22, 0xB28000
	0x0360CDA4 LDRB W8, [X23 + 0x403]
	0x0360CDA8 LDR X22, [X22 + 0x940]
	0x0360CDAC MOV W20, W2
	0x0360CDB0 MOV W21, W1
	0x0360CDB4 MOV X19, X0
	0x0360CDB8 TBNZ X8, 0x0, 0x360CDD0
	0x0360CDBC ADRP X0, 0xB28000
	0x0360CDC0 LDR X0, [X0 + 0x940]
	0x0360CDC4 BL 0x1C16CF4
	0x0360CDC8 MOVZ W8, 0x1
	0x0360CDCC STRB W8, [X23 + 0x403]
	0x0360CDD0 LDR X0, [X22]
	0x0360CDD4 STR W31, [X31 + 0xC]
	0x0360CDD8 LDR W8, [X0 + 0xE0]
	0x0360CDDC CBNZ W8, 0x360CDE4
	0x0360CDE0 BL 0x1C16DFC
	0x0360CDE4 AND W4, W21, 0x1
	0x0360CDE8 AND W5, W20, 0x1
	0x0360CDEC ADD X6, X31, 0xC
	0x0360CDF0 MOV X0, X19
	0x0360CDF4 MOV W1, W31
	0x0360CDF8 MOV X2, X31
	0x0360CDFC MOV X3, X31
	0x0360CE00 BL 0x360CE18
	0x0360CE04 LDP X20, X19, [X31 + 0x30]
	0x0360CE08 LDP X22, X21, [X31 + 0x20]
	0x0360CE0C LDP X30, X23, [X31 + 0x10]
	0x0360CE10 ADD X31, X31, 0x40
	0x0360CE14 RET
	0x0360CE18 SUB X31, X31, 0x70
	0x0360CE1C STP X29, X30, [X31 + 0x10]
	0x0360CE20 STP X28, X27, [X31 + 0x20]
	0x0360CE24 STP X26, X25, [X31 + 0x30]
	0x0360CE28 STP X24, X23, [X31 + 0x40]
	0x0360CE2C STP X22, X21, [X31 + 0x50]
	0x0360CE30 STP X20, X19, [X31 + 0x60]
	0x0360CE34 ADRP X21, 0xDD4000
	0x0360CE38 LDRB W8, [X21 + 0x406]
	0x0360CE3C MOV X22, X6
	0x0360CE40 MOV W28, W5
	0x0360CE44 MOV W24, W4
	0x0360CE48 MOV X20, X3
	0x0360CE4C MOV X19, X2
	0x0360CE50 MOV W23, W1
	0x0360CE54 MOV X25, X0
	0x0360CE58 TBNZ X8, 0x0, 0x360CEA0
	0x0360CE5C ADRP X0, 0xB2E000
	0x0360CE60 LDR X0, [X0 + 0xEB8]
	0x0360CE64 BL 0x1C16CF4
	0x0360CE68 ADRP X0, 0xB28000
	0x0360CE6C LDR X0, [X0 + 0x940]
	0x0360CE70 BL 0x1C16CF4
	0x0360CE74 ADRP X0, 0xAE7000
	0x0360CE78 LDR X0, [X0 + 0x618]
	0x0360CE7C BL 0x1C16CF4
	0x0360CE80 ADRP X0, 0xB16000
	0x0360CE84 LDR X0, [X0 + 0x928]
	0x0360CE88 BL 0x1C16CF4
	0x0360CE8C ADRP X0, 0xB16000
	0x0360CE90 LDR X0, [X0 + 0x2F8]
	0x0360CE94 BL 0x1C16CF4
	0x0360CE98 MOVZ W8, 0x1
	0x0360CE9C STRB W8, [X21 + 0x406]
	0x0360CEA0 LDR W26, [X25]
	0x0360CEA4 CBZ W26, 0x360CEE8
	0x0360CEA8 TBZ X26, 0x1F, 0x360CEB0
	0x0360CEAC TBNZ X24, 0x0, 0x360D2DC
	0x0360CEB0 LDR X27, [X25 + 0x8]
	0x0360CEB4 STR W28, [X31 + 0xC]
	0x0360CEB8 CBZ X27, 0x360CF24
	0x0360CEBC LDR X8, [X27 + 0x18]
	0x0360CEC0 ADDS W31, W26, 0x1
	0x0360CEC4 B.EQ 0x360CF34
	0x0360CEC8 CBZ W8, 0x360CF54
	0x0360CECC MOV X9, INVALID
	0x0360CED0 ADD X8, X9, X8, 0x20, LSL
	0x0360CED4 ADD X8, X27, X8, 0x1E, ASR
	0x0360CED8 LDR W21, [X8 + 0x20]
	0x0360CEDC MOV W25, W31
	0x0360CEE0 MOV W2, W31
	0x0360CEE4 B 0x360CF74
	0x0360CEE8 CMP W23, 0x1
	0x0360CEEC B.EQ 0x360CFE0
	0x0360CEF0 CBNZ W23, 0x360CFF0
	0x0360CEF4 ADRP X8, 0xAE7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDD5000
	007 Move W8, [X22+1019]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xB29000
	016 Move X0, [X0+2368]
	017 Call 0x1C17CF4
	018 Move X0, 0xB11000
	019 Move X0, [X0+3336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1019], W8
	023 Compare X20, 0
	024 JumpIfEqual {96}
	025 Move X8, [X20+24]
	026 Add X11, X20, 28
	027 Move X10, W8
	028 And W9, W8, W8
	029 Add W22, W8, 1
	030 Subtract X12, X10, 1
	031 Subtract W13, W22, 2
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W13, [X11]
	034 Subtract W22, W22, 1
	035 Move X10, X12
	036 Compare W13, 0
	037 JumpIfEqual {30}
	038 Move W22, W9
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare W22, 0
	041 JumpIfNotEqual {70}
	042 Move X20, 0xB29000
	043 Move X20, [X20+2368]
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move V0, [X8+2]
	052 Move [X19], V0
	053 Compare W8, 0
	054 JumpIfEqual {95}
	055 Move W8, [X20+32]
	056 Move TEMP, X8
	057 And TEMP, TEMP, -2147483648
	058 Compare TEMP, -2147483648
	059 JumpIfEqual {70}
	060 And W31, W21, 1
	061 NotImplemented "Instruction CSNEG not yet implemented."
	062 Move [X19], W8
	063 Move [X19+8], X31
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 
	070 And W31, W21, 1
	071 Move TEMP, 0
	072 Not TEMP
	073 Move W8, TEMP
	074 NotImplemented "Instruction CSNEG not yet implemented."
	075 Move [X19], W8
	076 Move X8, 0xB11000
	077 Move X8, [X8+3336]
	078 Move W1, W22
	079 Move X0, [X8]
	080 Call 0x1C17D6C
	081 Move X2, X0
	082 Move [X19+8], X0
	083 Move X0, X20
	084 Move W4, W22
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move W1, W31
	090 Move W3, W31
	091 Move X5, X31
	092 Move X30, [X31+48]
	093 Call Array.Copy, X0, X1, X2, X3, X4
	094 Return 
	095 Call 0x1C17F28
	096 Move X0, 0xAED000
	097 Move X0, [X0+1320]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0xAF2000
	102 Move X0, [X0+3784]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Move X2, X31
	107 Call ArgumentNullException..ctor, X0, X1
	108 Move X0, 0xB2F000
	109 Move X0, [X0+3712]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Call 0x1C17DEC

Method: System.Numerics.BigInteger get_MinusOne()

Disassembly:
	0x0360CEF8 LDR X8, [X8 + 0x618]
	0x0360CEFC LDP X20, X19, [X31 + 0x60]
	0x0360CF00 LDP X22, X21, [X31 + 0x50]
	0x0360CF04 LDP X24, X23, [X31 + 0x40]
	0x0360CF08 LDR X0, [X8]
	0x0360CF0C LDP X26, X25, [X31 + 0x30]
	0x0360CF10 LDP X28, X27, [X31 + 0x20]
	0x0360CF14 LDP X29, X30, [X31 + 0x10]
	0x0360CF18 MOVZ W1, 0x1
	0x0360CF1C ADD X31, X31, 0x70
	0x0360CF20 B 0x1C16D6C
	0x0360CF24 MOV W25, W31
	0x0360CF28 SBFM W2, W26, 0x1F, 0x1F
	0x0360CF2C MOV W21, W26
	0x0360CF30 B 0x360CF74
	0x0360CF34 CBZ W8, 0x360CF54
	0x0360CF38 MOV W25, W31
	0x0360CF3C ADD X9, X27, W25, 0x2, SXTW
	0x0360CF40 LDR W9, [X9 + 0x20]
	0x0360CF44 CBNZ W9, 0x360CF58
	0x0360CF48 ADD W25, W25, 0x1
	0x0360CF4C CMP W25, W8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDD5000
	005 Move X19, 0xB29000
	006 Move W8, [X20+1020]
	007 Move X19, [X19+2368]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB29000
	013 Move X0, [X0+2368]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1020], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+48]
	027 Move X1, [X8+56]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Boolean get_IsEven()

Disassembly:
	0x0360CF50 B.CC 0x360CF3C
	0x0360CF54 BL 0x1C16F28
	0x0360CF58 SUB W8, W8, 0x1
	0x0360CF5C ADD X9, X27, W8, 0x2, SXTW
	0x0360CF60 LDR W9, [X9 + 0x20]
	0x0360CF64 CMP W8, W25
	0x0360CF68 MOVZ W2, 0xFF
	0x0360CF6C SUB W8, W31, W9
	0x0360CF70 CSINV W21, W8, W9, EQ
	0x0360CF74 UBFM W28, W21, 0x18, 0x1F
	0x0360CF78 CMP W28, W2, UXTB
	0x0360CF7C AND W8, W2, 0xFF

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+8]
	003 Compare X8, 0
	004 JumpIfEqual {9}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {14}
	008 Add X0, X8, 32
	009 Move W8, [X0]
	010 And W31, W8, 1
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F28

Method: System.Int32 get_Sign()

Disassembly:
	0x0360CF80 B.NE 0x360CFB4
	0x0360CF84 UBFM W10, W21, 0x10, 0x1F
	0x0360CF88 CMP W28, W10, UXTB
	0x0360CF8C B.NE 0x360CFCC
	0x0360CF90 UBFM W10, W21, 0x8, 0x1F

ISIL:
	001 Move W8, [X0]
	002 Subtract W9, W31, W8
	003 Move W9, W9
	004 ShiftRight W9, 31
	005 And W9, W9, 0x7FFFFFFF
	006 Add W0, W9, W8
	007 Return X0

Method: System.Numerics.BigInteger ModPow(System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus)

Disassembly:
	0x0360CF94 CMP W28, W10, UXTB
	0x0360CF98 B.NE 0x360D028
	0x0360CF9C MOV W4, W31
	0x0360CFA0 MOV W3, W31
	0x0360CFA4 MOVZ W5, 0x1
	0x0360CFA8 MOVZ W9, 0x1
	0x0360CFAC MOV W10, W21
	0x0360CFB0 B 0x360D038
	0x0360CFB4 MOV W5, W31
	0x0360CFB8 MOV W4, W31
	0x0360CFBC MOV W3, W31
	0x0360CFC0 MOVZ W9, 0x4
	0x0360CFC4 MOV W10, W28
	0x0360CFC8 B 0x360D038
	0x0360CFCC MOV W5, W31
	0x0360CFD0 MOV W4, W31
	0x0360CFD4 MOVZ W9, 0x3
	0x0360CFD8 MOVZ W3, 0x1
	0x0360CFDC B 0x360D038
	0x0360CFE0 MOVZ W8, 0x1
	0x0360CFE4 MOV X23, X31
	0x0360CFE8 STR W8, [X22]
	0x0360CFEC B 0x360D2A4
	0x0360CFF0 MOVZ W8, 0x1
	0x0360CFF4 STR W8, [X22]
	0x0360CFF8 CBZ W20, 0x360D118
	0x0360CFFC STRB W31, [X19]
	0x0360D000 ADRP X19, 0xB27000
	0x0360D004 LDR X19, [X19 + 0x940]
	0x0360D008 LDR X0, [X19]
	0x0360D00C LDR W8, [X0 + 0xE0]
	0x0360D010 CBNZ W8, 0x360D01C
	0x0360D014 BL 0x1C16DFC
	0x0360D018 LDR X0, [X19]
	0x0360D01C LDR X8, [X0 + 0xB8]
	0x0360D020 LDR X23, [X8 + 0x40]
	0x0360D024 B 0x360D2A4
	0x0360D028 MOV W5, W31
	0x0360D02C MOV W3, W31
	0x0360D030 MOVZ W9, 0x2
	0x0360D034 MOVZ W4, 0x1
	0x0360D038 EOR W8, W10, W8, 0x0
	0x0360D03C ANDS W31, W8, 0x80
	0x0360D040 CSET W8, EQ
	0x0360D044 ORR W29, W8, W24, 0x0
	0x0360D048 ORN W8, W31, W29, 0x0
	0x0360D04C AND W8, W8, 0x1
	0x0360D050 ADD W24, W9, W8
	0x0360D054 CBZ X27, 0x360D098
	0x0360D058 LDR W8, [X27 + 0x18]
	0x0360D05C MOVZ W9, 0x80000000
	0x0360D060 CMP W8, W9
	0x0360D064 B.EQ 0x360D2C8
	0x0360D068 MOVN W9, 0xE0000000
	0x0360D06C ADD W9, W8, W9
	0x0360D070 UBFM W9, W9, 0x1E, 0x1F
	0x0360D074 CBNZ W9, 0x360D2C8
	0x0360D078 UBFM W8, W8, 0x1E, 0x1D
	0x0360D07C SUB W8, W8, 0x4
	0x0360D080 SXTW X9, W8
	0x0360D084 ADD X9, X9, W24, UXTW
	0x0360D088 MOVZ W10, 0x80000000
	0x0360D08C CMP X9, X10
	0x0360D090 B.GE 0x360D2C8
	0x0360D094 ADD W24, W8, W24
	0x0360D098 CMP W23, 0x1
	0x0360D09C B.EQ 0x360D100
	0x0360D0A0 CBNZ W23, 0x360D10C
	0x0360D0A4 ADRP X8, 0xAE6000
	0x0360D0A8 LDR X8, [X8 + 0x618]
	0x0360D0AC MOV W1, W24
	0x0360D0B0 STR W2, [X31 + 0x8]
	0x0360D0B4 MOV W20, W3
	0x0360D0B8 LDR X0, [X8]
	0x0360D0BC MOV W22, W4
	0x0360D0C0 MOV W19, W21
	0x0360D0C4 MOV W21, W5
	0x0360D0C8 BL 0x1C16D6C
	0x0360D0CC ADRP X8, 0xB15000
	0x0360D0D0 LDR X8, [X8 + 0x2F8]
	0x0360D0D4 MOV X23, X0
	0x0360D0D8 LDR X1, [X8]
	0x0360D0DC BL 0x25FB4C0
	0x0360D0E0 LDR W2, [X31 + 0x8]
	0x0360D0E4 MOV W5, W21
	0x0360D0E8 MOV W21, W19
	0x0360D0EC MOV W4, W22
	0x0360D0F0 MOV W3, W20
	0x0360D0F4 MOV X19, X0
	0x0360D0F8 MOV W20, W1
	0x0360D0FC B 0x360D164
	0x0360D100 MOV X23, X31
	0x0360D104 STR W24, [X22]
	0x0360D108 B 0x360D2A4
	0x0360D10C CMP W24, W20
	0x0360D110 STR W24, [X22]
	0x0360D114 B.LE 0x360D120
	0x0360D118 MOV X23, X31
	0x0360D11C B 0x360D2A4
	0x0360D120 ADRP X22, 0xB27000
	0x0360D124 LDR X22, [X22 + 0x940]
	0x0360D128 LDR X0, [X22]
	0x0360D12C LDR W8, [X0 + 0xE0]
	0x0360D130 CBNZ W8, 0x360D15C
	0x0360D134 STP W4, W2, [X31 + 0x4]
	0x0360D138 MOV W23, W3
	0x0360D13C STR W21, [X31]
	0x0360D140 MOV W21, W5
	0x0360D144 BL 0x1C16DFC
	0x0360D148 MOV W5, W21
	0x0360D14C LDP W21, W4, [X31]
	0x0360D150 LDR W2, [X31 + 0x8]
	0x0360D154 LDR X0, [X22]
	0x0360D158 MOV W3, W23
	0x0360D15C LDR X8, [X0 + 0xB8]
	0x0360D160 LDR X23, [X8 + 0x40]
	0x0360D164 LDR W9, [X31 + 0xC]
	0x0360D168 SUB W8, W24, 0x1
	0x0360D16C MOVN W10, 0x0
	0x0360D170 ANDS W31, W9, 0x1
	0x0360D174 CSEL W9, W8, W31, NE
	0x0360D178 CSNEG W8, W10, W10, NE
	0x0360D17C CBZ X27, 0x360D240
	0x0360D180 LDR X11, [X27 + 0x18]
	0x0360D184 SUB W10, W11, 0x1
	0x0360D188 CMP W10, 0x1
	0x0360D18C B.LT 0x360D240
	0x0360D190 MOV X10, X31
	0x0360D194 AND X16, X11, 0x0
	0x0360D198 SXTW X11, W25
	0x0360D19C ADD X12, X27, 0x20
	0x0360D1A0 ADD W13, W8, W8, 0x1, LSL
	0x0360D1A4 UBFM W14, W8, 0x1F, 0x1E
	0x0360D1A8 CMP X10, W16, UXTW
	0x0360D1AC B.CS 0x360CF54
	0x0360D1B0 LDR W15, [X12, X10, LSL #2]
	0x0360D1B4 CMP X10, X11
	0x0360D1B8 SUB W16, W31, W15
	0x0360D1BC CSINV W16, W16, W15, LE
	0x0360D1C0 ADDS W31, W26, 0x1
	0x0360D1C4 CSEL W16, W16, W15, EQ
	0x0360D1C8 CMP W9, W20
	0x0360D1CC B.CS 0x360CF54
	0x0360D1D0 ADD W15, W9, W8
	0x0360D1D4 CMP W15, W20
	0x0360D1D8 STRB W16, [X19, W9, SXTW]
	0x0360D1DC B.CS 0x360CF54
	0x0360D1E0 ADD W17, W8, W15
	0x0360D1E4 UBFM W0, W16, 0x8, 0x1F
	0x0360D1E8 CMP W17, W20
	0x0360D1EC STRB W0, [X19, W15, SXTW]
	0x0360D1F0 B.CS 0x360CF54
	0x0360D1F4 ADD W17, W8, W17
	0x0360D1F8 ADD W0, W14, W9
	0x0360D1FC UBFM W1, W16, 0x10, 0x1F
	0x0360D200 CMP W17, W20
	0x0360D204 STRB W1, [X19, W0, SXTW]
	0x0360D208 B.CS 0x360CF54
	0x0360D20C ADD W9, W13, W9
	0x0360D210 UBFM W16, W16, 0x18, 0x1F
	0x0360D214 STRB W16, [X19, W9, SXTW]
	0x0360D218 LDR X9, [X27 + 0x18]
	0x0360D21C ADD X10, X10, 0x1
	0x0360D220 AND X16, X9, 0x0
	0x0360D224 SUB W9, W9, 0x1
	0x0360D228 CMP X10, W9, SXTW
	0x0360D22C ADD W9, W8, W17
	0x0360D230 B.LT 0x360D1A8
	0x0360D234 ADD W9, W15, W8
	0x0360D238 ADD W9, W9, W8
	0x0360D23C ADD W9, W9, W8
	0x0360D240 CMP W9, W20
	0x0360D244 B.CS 0x360CF54
	0x0360D248 STRB W21, [X19, W9, SXTW]
	0x0360D24C TBNZ X5, 0x0, 0x360D290
	0x0360D250 ADD W9, W9, W8
	0x0360D254 CMP W9, W20
	0x0360D258 B.CS 0x360CF54
	0x0360D25C UBFM W10, W21, 0x8, 0x1F
	0x0360D260 STRB W10, [X19, W9, SXTW]
	0x0360D264 TBNZ X4, 0x0, 0x360D290
	0x0360D268 ADD W9, W9, W8
	0x0360D26C CMP W9, W20
	0x0360D270 B.CS 0x360CF54
	0x0360D274 UBFM W10, W21, 0x10, 0x1F
	0x0360D278 STRB W10, [X19, W9, SXTW]
	0x0360D27C TBNZ X3, 0x0, 0x360D290
	0x0360D280 ADD W9, W9, W8
	0x0360D284 CMP W9, W20
	0x0360D288 B.CS 0x360CF54
	0x0360D28C STRB W28, [X19, W9, SXTW]
	0x0360D290 TBNZ X29, 0x0, 0x360D2A4
	0x0360D294 ADD W8, W9, W8
	0x0360D298 CMP W8, W20
	0x0360D29C B.CS 0x360CF54
	0x0360D2A0 STRB W2, [X19, W8, SXTW]
	0x0360D2A4 MOV X0, X23
	0x0360D2A8 LDP X20, X19, [X31 + 0x60]
	0x0360D2AC LDP X22, X21, [X31 + 0x50]
	0x0360D2B0 LDP X24, X23, [X31 + 0x40]
	0x0360D2B4 LDP X26, X25, [X31 + 0x30]
	0x0360D2B8 LDP X28, X27, [X31 + 0x20]
	0x0360D2BC LDP X29, X30, [X31 + 0x10]
	0x0360D2C0 ADD X31, X31, 0x70
	0x0360D2C4 RET
	0x0360D2C8 BL 0x1C16F30
	0x0360D2CC ADRP X8, 0xB2D000
	0x0360D2D0 LDR X8, [X8 + 0xEB8]
	0x0360D2D4 LDR X1, [X8]
	0x0360D2D8 BL 0x1C16DEC
	0x0360D2DC ADRP X0, 0xAE6000
	0x0360D2E0 LDR X0, [X0 + 0x858]
	0x0360D2E4 BL 0x1C16D08
	0x0360D2E8 BL 0x1C16F10
	0x0360D2EC MOV X19, X0
	0x0360D2F0 ADRP X0, 0xB2D000
	0x0360D2F4 LDR X0, [X0 + 0xEC0]
	0x0360D2F8 BL 0x1C16D08
	0x0360D2FC MOV X1, X0
	0x0360D300 MOV X0, X19
	0x0360D304 MOV X2, X31
	0x0360D308 BL 0x338CB50

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X26, 0xDD5000
	012 Move X25, 0xB29000
	013 Move W8, [X26+1021]
	014 Move X25, [X25+2368]
	015 Move X22, X5
	016 Move X24, X4
	017 Move X19, X3
	018 Move X20, X2
	019 Move X23, X1
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0xB2F000
	026 Move X0, [X0+3720]
	027 Call 0x1C17CF4
	028 Move X0, 0xB29000
	029 Move X0, [X0+2368]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X26+1021], W8
	033 Move X0, [X25]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Subtract W8, W31, W20
	039 Move W8, W8
	040 ShiftRight W8, 31
	041 And W8, W8, 0x7FFFFFFF
	042 Add W31, W8, W20
	043 Or X8, X19, X23
	044 Compare X22, 0
	045 JumpIfEqual {63}
	046 Compare X8, 0
	047 JumpIfEqual {82}
	048 Move X8, 0xB2E000
	049 Move X8, [X8+3720]
	050 Compare X23, 0
	051 JumpIfEqual {97}
	052 Compare X19, 0
	053 JumpIfEqual {125}
	054 Move X0, [X8]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X23
	060 Move X1, X19
	061 Move X2, X22
	062 Call BigIntegerCalculator.Pow, X0, X1, X2
	063 Compare X8, 0
	064 JumpIfEqual {108}
	065 Move X8, 0xB2E000
	066 Move X8, [X8+3720]
	067 Compare X23, 0
	068 JumpIfEqual {148}
	069 Compare X19, 0
	070 JumpIfEqual {176}
	071 Move X0, [X8]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSNEG not yet implemented."
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X23
	079 Move X1, X19
	080 Move W2, W22
	081 Call BigIntegerCalculator.Pow, X0, X1, X2
	082 Move X8, 0xB2E000
	083 Move X8, [X8+3720]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CSNEG not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, [X8]
	088 NotImplemented "Instruction CSNEG not yet implemented."
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move W0, W23
	094 Move W1, W24
	095 Move X2, X22
	096 Call BigIntegerCalculator.Pow, X0, X1, X2
	097 Move X0, [X8]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction CSNEG not yet implemented."
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move W0, W23
	105 Move X1, X19
	106 Move X2, X22
	107 Call BigIntegerCalculator.Pow, X0, X1, X2
	108 Move X8, 0xB2E000
	109 Move X8, [X8+3720]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSNEG not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, [X8]
	114 NotImplemented "Instruction CSNEG not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction CSNEG not yet implemented."
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Move W0, W22
	122 Move W1, W23
	123 Move W2, W24
	124 Call BigIntegerCalculator.Pow, X0, X1, X2
	125 Move X0, [X8]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 NotImplemented "Instruction CSNEG not yet implemented."
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move X0, X23
	133 Move W1, W24
	134 Move X2, X22
	135 Call BigIntegerCalculator.Pow, X0, X1, X2
	136 Move X22, X0
	137 Move TEMP, X21
	138 And TEMP, TEMP, -2147483648
	139 Compare TEMP, -2147483648
	140 JumpIfEqual {142}
	141 Move W2, W31
	142 Move X0, [X25]
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfEqual {161}
	146 Compare X19, 0
	147 JumpIfNotEqual {164}
	148 Move X0, [X8]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 NotImplemented "Instruction CSNEG not yet implemented."
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move W8, [X0+224]
	153 NotImplemented "Instruction CSNEG not yet implemented."
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move W0, W23
	158 Move X1, X19
	159 Move W2, W22
	160 Call BigIntegerCalculator.Pow, X0, X1, X2
	161 Call 0x1C17DFC
	162 Compare X19, 0
	163 JumpIfEqual {168}
	164 Move W8, [X19+24]
	165 Compare W8, 0
	166 JumpIfEqual {266}
	167 Move W20, [X19+32]
	168 And W2, W20, 1
	169 Add X0, X31, 0
	170 Move X1, X22
	171 Move [X31], X31
	172 Move [X31+8], X31
	173 Call BigInteger..ctor, X0, X1, X2
	174 Move X0, [X31]
	175 Move X1, [X31+8]
	176 Move X0, [X8]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 NotImplemented "Instruction CSNEG not yet implemented."
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move W8, [X0+224]
	181 NotImplemented "Instruction CSNEG not yet implemented."
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1C17DFC
	185 Move X0, X23
	186 Move W1, W22
	187 Move W2, W24
	188 Call BigIntegerCalculator.Pow, X0, X1, X2
	189 Move W22, W0
	190 Move TEMP, X21
	191 And TEMP, TEMP, -2147483648
	192 Compare TEMP, -2147483648
	193 JumpIfNotEqual {204}
	194 Move X0, [X25]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfEqual {230}
	198 Compare X19, 0
	199 JumpIfNotEqual {233}
	200 Move TEMP, X20
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfEqual {241}
	204 Move W19, W22
	205 Move X0, [X25]
	206 Move W8, [X0+224]
	207 Compare W8, 0
	208 JumpIfNotEqual {210}
	209 Call 0x1C17DFC
	210 Add X0, X31, 16
	211 Move X1, X19
	212 Move [X31+16], X31
	213 Move [X31+24], X31
	214 Call BigInteger..ctor, X0, X1
	215 Move X0, [X31+16]
	216 Move X1, [X31+24]
	217 Move [X31], X0
	218 Move [X31+8], X1
	219 Move X20, [X31+96]
	220 Move X19, [X31+104]
	221 Move X22, [X31+80]
	222 Move X21, [X31+88]
	223 Move X24, [X31+64]
	224 Move X23, [X31+72]
	225 Move X26, [X31+48]
	226 Move X25, [X31+56]
	227 Move X30, [X31+32]
	228 Add X31, X31, 112
	229 Return X0
	230 Call 0x1C17DFC
	231 Compare X19, 0
	232 JumpIfEqual {200}
	233 Move W8, [X19+24]
	234 Compare W8, 0
	235 JumpIfEqual {266}
	236 Move W20, [X19+32]
	237 Move TEMP, X20
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfNotEqual {204}
	241 Move X8, X31
	242 Subtract X19, X8, W22
	243 Move X0, 0xAEF000
	244 Move X0, [X0+1888]
	245 Call 0x1C17D08
	246 Call 0x1C17F10
	247 Move X19, X0
	248 Move X0, 0xB2E000
	249 Move X0, [X0+3728]
	250 Call 0x1C17D08
	251 Move X20, X0
	252 Move X0, 0xB2E000
	253 Move X0, [X0+3736]
	254 Call 0x1C17D08
	255 Move X2, X0
	256 Move X0, X19
	257 Move X1, X20
	258 Move X3, X31
	259 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	260 Move X0, 0xB2E000
	261 Move X0, [X0+3744]
	262 Call 0x1C17D08
	263 Move X1, X0
	264 Move X0, X19
	265 Call 0x1C17DEC
	266 Call 0x1C17F28

Method: System.Int32 GetHashCode()

Disassembly:
	0x0360D858 LDR W8, [X0 + 0xE0]
	0x0360D85C CBNZ W8, 0x360D868
	0x0360D860 BL 0x1C16DFC
	0x0360D864 LDR X1, [X20 + 0x18]
	0x0360D868 LDR W3, [X19 + 0x18]
	0x0360D86C ADD X8, X20, 0x20
	0x0360D870 CMP W23, 0x0
	0x0360D874 ADD X4, X21, 0x20
	0x0360D878 CSEL X0, X31, X8, EQ
	0x0360D87C MOV X2, X22
	0x0360D880 BL 0x360E748
	0x0360D884 MOV X0, X21
	0x0360D888 LDP X20, X19, [X31 + 0x20]
	0x0360D88C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X9, [X0+8]
	002 Move W0, [X0]
	003 Compare X9, 0
	004 JumpIfEqual {13}
	005 Move W8, [X9+24]
	006 Subtract W10, W8, 1
	007 Add X9, X9, W10
	008 Add X9, X9, 32
	009 Move W10, [X9-4]
	010 Subtract W8, W8, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Xor W0, W10, W0
	013 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0360D898 BL 0x1C16F20
	0x0360D89C BL 0x1C16F28
	0x0360D8A0 STR X30, [X31 - 0x40]!
	0x0360D8A4 STP X24, X23, [X31 + 0x10]
	0x0360D8A8 STP X22, X21, [X31 + 0x20]
	0x0360D8AC STP X20, X19, [X31 + 0x30]
	0x0360D8B0 ADRP X24, 0xDD3000
	0x0360D8B4 ADRP X23, 0xB27000
	0x0360D8B8 LDRB W8, [X24 + 0x408]
	0x0360D8BC LDR X23, [X23 + 0x940]
	0x0360D8C0 MOV X19, X3
	0x0360D8C4 MOV X20, X2
	0x0360D8C8 MOV X22, X1
	0x0360D8CC MOV X21, X0
	0x0360D8D0 TBNZ X8, 0x0, 0x360D8E8
	0x0360D8D4 ADRP X0, 0xB27000
	0x0360D8D8 LDR X0, [X0 + 0x940]
	0x0360D8DC BL 0x1C16CF4
	0x0360D8E0 MOVZ W8, 0x1
	0x0360D8E4 STRB W8, [X24 + 0x408]
	0x0360D8E8 LDR X0, [X23]
	0x0360D8EC EOR W23, W20, W21, 0x0
	0x0360D8F0 LDR W8, [X0 + 0xE0]
	0x0360D8F4 CBZ W8, 0x360D920
	0x0360D8F8 TBNZ X23, 0x1F, 0x360D928
	0x0360D8FC MOV X0, X22
	0x0360D900 MOV W1, W21
	0x0360D904 MOV X2, X19
	0x0360D908 MOV W3, W20
	0x0360D90C LDP X20, X19, [X31 + 0x30]
	0x0360D910 LDP X22, X21, [X31 + 0x20]
	0x0360D914 LDP X24, X23, [X31 + 0x10]
	0x0360D918 LDR X30, [X31], #0x40
	0x0360D91C B 0x360D94C
	0x0360D920 BL 0x1C16DFC
	0x0360D924 TBZ X23, 0x1F, 0x360D8FC
	0x0360D928 SUB W3, W31, W20
	0x0360D92C MOV X0, X22
	0x0360D930 MOV W1, W21
	0x0360D934 MOV X2, X19
	0x0360D938 LDP X20, X19, [X31 + 0x30]
	0x0360D93C LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD4000
	006 Move W8, [X21+1022]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB28000
	014 Move X0, [X0+2368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1022], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X21, 0xB28000
	021 Move X21, [X21+2368]
	022 Move X8, [X20]
	023 Move X0, [X21]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfEqual {35}
	034 Move X1, X0
	035 Call 0x1C17DFC
	036 Move X1, [X21]
	037 Move X0, [X20]
	038 Move X8, [X0+64]
	039 Move X9, [X1+64]
	040 Move X0, X20
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Call 0x1C17E08
	043 Move X1, [X0]
	044 Move X2, [X0+8]
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call 0x1C181E0

Method: System.Boolean Equals(System.Numerics.BigInteger other)

Disassembly:
	0x0360D940 LDP X24, X23, [X31 + 0x10]
	0x0360D944 LDR X30, [X31], #0x40
	0x0360D948 B 0x360D590
	0x0360D94C SUB X31, X31, 0x50
	0x0360D950 STP X30, X23, [X31 + 0x20]
	0x0360D954 STP X22, X21, [X31 + 0x30]
	0x0360D958 STP X20, X19, [X31 + 0x40]
	0x0360D95C ADRP X23, 0xDD3000
	0x0360D960 LDRB W8, [X23 + 0x409]
	0x0360D964 MOV W22, W3
	0x0360D968 MOV X20, X2
	0x0360D96C MOV W19, W1
	0x0360D970 MOV X21, X0
	0x0360D974 TBNZ X8, 0x0, 0x360D998
	0x0360D978 ADRP X0, 0xB2D000
	0x0360D97C LDR X0, [X0 + 0xE88]
	0x0360D980 BL 0x1C16CF4
	0x0360D984 ADRP X0, 0xB27000
	0x0360D988 LDR X0, [X0 + 0x940]
	0x0360D98C BL 0x1C16CF4
	0x0360D990 MOVZ W8, 0x1
	0x0360D994 STRB W8, [X23 + 0x409]
	0x0360D998 ORR X8, X21, X20, 0x0
	0x0360D99C CBNZ X8, 0x360D9D8
	0x0360D9A0 ADRP X8, 0xB27000
	0x0360D9A4 LDR X8, [X8 + 0x940]
	0x0360D9A8 LDR X0, [X8]
	0x0360D9AC LDR W8, [X0 + 0xE0]
	0x0360D9B0 CBNZ W8, 0x360D9B8
	0x0360D9B4 BL 0x1C16DFC
	0x0360D9B8 SXTW X8, W19
	0x0360D9BC SUB X1, X8, W22, SXTW
	0x0360D9C0 ADD X0, X31, 0x10
	0x0360D9C4 STP X31, X31, [X31 + 0x10]
	0x0360D9C8 BL 0x360B59C
	0x0360D9CC LDP X8, X9, [X31 + 0x10]
	0x0360D9D0 STP X8, X9, [X31]
	0x0360D9D4 B 0x360DAC4
	0x0360D9D8 CBZ X21, 0x360DA28
	0x0360D9DC CBZ X20, 0x360DA58
	0x0360D9E0 ADRP X22, 0xB2D000
	0x0360D9E4 LDR X22, [X22 + 0xE88]
	0x0360D9E8 LDR X0, [X22]
	0x0360D9EC LDR W8, [X0 + 0xE0]
	0x0360D9F0 CBNZ W8, 0x360D9F8
	0x0360D9F4 BL 0x1C16DFC
	0x0360D9F8 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDD4000
	007 Move W8, [X22+1023]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB28000
	016 Move X0, [X0+2368]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1023], W8
	020 Move W8, [X21]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X20, [X21+8]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W0, W31
	025 Compare X19, 0
	026 JumpIfEqual {47}
	027 Compare X20, 0
	028 JumpIfEqual {47}
	029 Move W21, [X20+24]
	030 Move W8, [X19+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, 0xB28000
	033 Move X8, [X8+2368]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X19
	041 Move W2, W21
	042 Call BigInteger.GetDiffLength, X0, X1, X2
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Move W0, W31
	046 Move W0, 1
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return X0

Method: System.Int32 CompareTo(System.Int64 other)

Disassembly:
	0x0360DA64 CSNEG W20, W22, W22, PL
	0x0360DA68 LDR X0, [X8]
	0x0360DA6C LDR W8, [X0 + 0xE0]
	0x0360DA70 CBNZ W8, 0x360DA78
	0x0360DA74 BL 0x1C16DFC
	0x0360DA78 MOV X0, X21
	0x0360DA7C MOV W1, W20
	0x0360DA80 BL 0x360DADC
	0x0360DA84 MOV X1, X0
	0x0360DA88 UBFM W2, W19, 0x1F, 0x1F
	0x0360DA8C STP X31, X31, [X31]
	0x0360DA90 B 0x360DABC
	0x0360DA94 MOV X0, X8
	0x0360DA98 BL 0x1C16DFC
	0x0360DA9C TBZ X22, 0x1F, 0x360DA18
	0x0360DAA0 MOV X0, X20
	0x0360DAA4 MOV X1, X21
	0x0360DAA8 BL 0x360DC14
	0x0360DAAC ORN W8, W31, W19, 0x0
	0x0360DAB0 MOV X1, X0
	0x0360DAB4 STP X31, X31, [X31]
	0x0360DAB8 UBFM W2, W8, 0x1F, 0x1F
	0x0360DABC ADD X0, X31, 0x0
	0x0360DAC0 BL 0x360BD70
	0x0360DAC4 LDP X0, X1, [X31]
	0x0360DAC8 LDP X20, X19, [X31 + 0x40]
	0x0360DACC LDP X22, X21, [X31 + 0x30]
	0x0360DAD0 LDP X30, X23, [X31 + 0x20]
	0x0360DAD4 ADD X31, X31, 0x50
	0x0360DAD8 RET
	0x0360DADC STP X30, X21, [X31 - 0x20]!
	0x0360DAE0 STP X20, X19, [X31 + 0x10]
	0x0360DAE4 ADRP X21, 0xDD3000
	0x0360DAE8 LDRB W8, [X21 + 0x414]
	0x0360DAEC MOV W20, W1
	0x0360DAF0 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31], X31
	005 Move [X31+8], X31
	006 Move W19, [X0]
	007 Move X8, [X0+8]
	008 Move X9, W19
	009 Compare X8, 0
	010 JumpIfEqual {24}
	011 Xor X9, X9, X1
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {35}
	016 Move W9, [X8+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSNEG not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Compare W9, 0
	022 JumpIfEqual {40}
	023 Move W8, [X8+32]
	024 Add X0, X31, 0
	025 Move X2, X31
	026 Move [X31], X9
	027 Call Int64.CompareTo, X0, X1
	028 Move W19, W0
	029 Move X8, [X8+32]
	030 Add X0, X31, 8
	031 Move X2, X31
	032 Move [X31+8], X8
	033 Call UInt64.CompareTo, X0, X1
	034 Multiply W19, W0, W19
	035 Move W0, W19
	036 Move X30, [X31+16]
	037 Move X19, [X31+24]
	038 Add X31, X31, 32
	039 Return X0
	040 Call 0x1C17F28

Method: System.Int32 CompareTo(System.Numerics.BigInteger other)

Disassembly:
	0x0360DB04 MOVZ W8, 0x1
	0x0360DB08 STRB W8, [X21 + 0x414]
	0x0360DB0C CBZ X19, 0x360DB90
	0x0360DB10 ADRP X8, 0xB0F000
	0x0360DB14 LDR X8, [X8 + 0xD08]
	0x0360DB18 LDR W1, [X19 + 0x18]
	0x0360DB1C LDR X0, [X8]
	0x0360DB20 BL 0x1C16D6C
	0x0360DB24 LDR X9, [X19 + 0x18]
	0x0360DB28 CBZ W9, 0x360DB8C
	0x0360DB2C CBZ X0, 0x360DB90
	0x0360DB30 LDR X10, [X0 + 0x18]
	0x0360DB34 CBZ W10, 0x360DB8C
	0x0360DB38 LDR W8, [X19 + 0x20]
	0x0360DB3C CMP W9, 0x2
	0x0360DB40 SUB X8, X8, W20, UXTW
	0x0360DB44 STR W8, [X0 + 0x20]
	0x0360DB48 B.LT 0x360DB80
	0x0360DB4C AND X12, X9, 0x0
	0x0360DB50 AND X11, X10, 0x0
	0x0360DB54 ADD X9, X19, 0x24
	0x0360DB58 ADD X10, X0, 0x24
	0x0360DB5C SUB X11, X11, 0x1
	0x0360DB60 SUB X12, X12, 0x1
	0x0360DB64 CBZ X11, 0x360DB8C
	0x0360DB68 LDR W13, [X9], #0x4
	0x0360DB6C SUB X11, X11, 0x1
	0x0360DB70 SUBS X12, X12, 0x1
	0x0360DB74 ADD X8, X13, X8, 0x20, ASR
	0x0360DB78 STR W8, [X10], #0x4
	0x0360DB7C B.NE 0x360DB64
	0x0360DB80 LDP X20, X19, [X31 + 0x10]
	0x0360DB84 LDP X30, X21, [X31], #0x20
	0x0360DB88 RET
	0x0360DB8C BL 0x1C16F28
	0x0360DB90 BL 0x1C16F20
	0x0360DB94 STR X30, [X31 - 0x10]!
	0x0360DB98 CBZ X0, 0x360DC10
	0x0360DB9C CBZ X1, 0x360DC10
	0x0360DBA0 LDR W8, [X0 + 0x18]
	0x0360DBA4 LDR W9, [X1 + 0x18]
	0x0360DBA8 CMP W8, W9
	0x0360DBAC B.GE 0x360DBB8
	0x0360DBB0 MOVN W0, 0x0
	0x0360DBB4 B 0x360DC04
	0x0360DBB8 B.GT 0x360DBF8
	0x0360DBBC MOV W10, W8
	0x0360DBC0 SUBS W10, W10, 0x1
	0x0360DBC4 B.MI 0x360DC00
	0x0360DBC8 CMP W10, W8
	0x0360DBCC B.CS 0x360DC0C
	0x0360DBD0 CMP W10, W9
	0x0360DBD4 B.CS 0x360DC0C
	0x0360DBD8 MOV W11, W10
	0x0360DBDC ADD X12, X0, X11, 0x2, LSL
	0x0360DBE0 ADD X11, X1, X11, 0x2, LSL
	0x0360DBE4 LDR W12, [X12 + 0x20]
	0x0360DBE8 LDR W11, [X11 + 0x20]
	0x0360DBEC CMP W12, W11
	0x0360DBF0 B.CC 0x360DBB0
	0x0360DBF4 B.LS 0x360DBC0
	0x0360DBF8 MOVZ W0, 0x1
	0x0360DBFC B 0x360DC04
	0x0360DC00 MOV W0, W31
	0x0360DC04 LDR X30, [X31], #0x10
	0x0360DC08 RET
	0x0360DC0C BL 0x1C16F28
	0x0360DC10 BL 0x1C16F20
	0x0360DC14 STR X30, [X31 - 0x40]!
	0x0360DC18 STP X24, X23, [X31 + 0x10]
	0x0360DC1C STP X22, X21, [X31 + 0x20]
	0x0360DC20 STP X20, X19, [X31 + 0x30]
	0x0360DC24 ADRP X21, 0xDD3000
	0x0360DC28 LDRB W8, [X21 + 0x415]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDD4000
	007 Move W8, [X21+1024]
	008 Move X19, X2
	009 Move X22, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB28000
	016 Move X0, [X0+2368]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1024], W8
	020 Move W0, [X20]
	021 Xor W8, W0, W22
	022 Move TEMP, X8
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {35}
	026 Move X21, [X20+8]
	027 Compare X21, 0
	028 JumpIfEqual {38}
	029 Compare X19, 0
	030 JumpIfEqual {75}
	031 Move W22, [X21+24]
	032 Move W8, [X19+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Subtract W0, W31, W0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, 1
	037 NotImplemented "Instruction CSNEG not yet implemented."
	038 Compare X19, 0
	039 JumpIfEqual {41}
	040 Subtract W0, W31, W22
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move TEMP, 0
	043 Not TEMP
	044 Move W0, TEMP
	045 Move X8, 0xB28000
	046 Move X8, [X8+2368]
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X21
	053 Move X1, X19
	054 Move W2, W22
	055 Call BigInteger.GetDiffLength, X0, X1, X2
	056 Compare W0, 0
	057 JumpIfEqual {75}
	058 Move X8, [X20+8]
	059 Compare X8, 0
	060 JumpIfEqual {82}
	061 Move W10, [X8+24]
	062 Subtract W9, W0, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W10, [X19+24]
	065 Move X9, W9
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X8, X8, X9
	068 Add X9, X19, X9
	069 Move W8, [X8+32]
	070 Move W9, [X9+32]
	071 Move W10, [X20]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSNEG not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Return X0
	081 Call 0x1C17F28
	082 Call 0x1C17F20

Method: System.Int32 CompareTo(System.Object obj)

Disassembly:
	0x0360DC2C MOV X19, X1
	0x0360DC30 MOV X20, X0
	0x0360DC34 TBNZ X8, 0x0, 0x360DC58
	0x0360DC38 ADRP X0, 0xB2D000
	0x0360DC3C LDR X0, [X0 + 0xE88]
	0x0360DC40 BL 0x1C16CF4
	0x0360DC44 ADRP X0, 0xB0F000
	0x0360DC48 LDR X0, [X0 + 0xD08]
	0x0360DC4C BL 0x1C16CF4
	0x0360DC50 MOVZ W8, 0x1
	0x0360DC54 STRB W8, [X21 + 0x415]
	0x0360DC58 CBZ X20, 0x360DD04
	0x0360DC5C ADRP X8, 0xB0F000
	0x0360DC60 LDR X8, [X8 + 0xD08]
	0x0360DC64 LDR W1, [X20 + 0x18]
	0x0360DC68 LDR X0, [X8]
	0x0360DC6C BL 0x1C16D6C
	0x0360DC70 LDR X23, [X20 + 0x18]
	0x0360DC74 MOV X21, X0
	0x0360DC78 CBZ X19, 0x360DC98
	0x0360DC7C LDR W8, [X19 + 0x18]
	0x0360DC80 ADD X9, X19, 0x20
	0x0360DC84 CMP W8, 0x0
	0x0360DC88 CSEL X22, X31, X9, EQ
	0x0360DC8C CBZ X21, 0x360DD04
	0x0360DC90 CBNZ X19, 0x360DCA4
	0x0360DC94 B 0x360DD04
	0x0360DC98 CBZ X21, 0x360DD04
	0x0360DC9C MOV X22, X31
	0x0360DCA0 CBZ X19, 0x360DD04
	0x0360DCA4 ADRP X8, 0xB2D000
	0x0360DCA8 LDR X8, [X8 + 0xE88]
	0x0360DCAC LDR X24, [X21 + 0x18]
	0x0360DCB0 MOV X1, X23
	0x0360DCB4 LDR X0, [X8]
	0x0360DCB8 LDR W8, [X0 + 0xE0]
	0x0360DCBC CBNZ W8, 0x360DCC8
	0x0360DCC0 BL 0x1C16DFC
	0x0360DCC4 LDR X1, [X20 + 0x18]
	0x0360DCC8 LDR W3, [X19 + 0x18]
	0x0360DCCC ADD X8, X21, 0x20
	0x0360DCD0 CMP W24, 0x0
	0x0360DCD4 CSEL X4, X31, X8, EQ
	0x0360DCD8 ADD X8, X20, 0x20
	0x0360DCDC CMP W23, 0x0
	0x0360DCE0 CSEL X0, X31, X8, EQ
	0x0360DCE4 MOV X2, X22
	0x0360DCE8 BL 0x360E840
	0x0360DCEC MOV X0, X21
	0x0360DCF0 LDP X20, X19, [X31 + 0x30]
	0x0360DCF4 LDP X22, X21, [X31 + 0x20]
	0x0360DCF8 LDP X24, X23, [X31 + 0x10]
	0x0360DCFC LDR X30, [X31], #0x40
	0x0360DD00 RET
	0x0360DD04 BL 0x1C16F20
	0x0360DD08 SUB X31, X31, 0x20
	0x0360DD0C STP X31, X30, [X31 + 0x8]
	0x0360DD10 AND W1, W0, 0xFF
	0x0360DD14 ADD X0, X31, 0x0
	0x0360DD18 STR X31, [X31]
	0x0360DD1C BL 0x360B520
	0x0360DD20 LDP X0, X1, [X31]
	0x0360DD24 LDR X30, [X31 + 0x10]
	0x0360DD28 ADD X31, X31, 0x20
	0x0360DD2C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD4000
	006 Move W8, [X21+1025]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB28000
	014 Move X0, [X0+2368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1025], W8
	018 Compare X20, 0
	019 JumpIfEqual {29}
	020 Move X21, 0xB28000
	021 Move X21, [X21+2368]
	022 Move X8, [X20]
	023 Move X0, [X21]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfEqual {35}
	028 Move X1, X0
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move W0, 1
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0
	035 Call 0x1C17DFC
	036 Move X1, [X21]
	037 Move X0, [X20]
	038 Move X8, [X0+64]
	039 Move X9, [X1+64]
	040 Move X0, X20
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Call 0x1C17E08
	043 Move X1, [X0]
	044 Move X2, [X0+8]
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call BigInteger.CompareTo, X0, X1
	051 Return X0
	052 Move X0, 0xAEF000
	053 Move X0, [X0+1400]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X19, X0
	057 Move X0, 0xB2E000
	058 Move X0, [X0+3752]
	059 Call 0x1C17D08
	060 Move X20, X0
	061 Move X0, 0xAF2000
	062 Move X0, [X0+2216]
	063 Call 0x1C17D08
	064 Move X2, X0
	065 Move X0, X19
	066 Move X1, X20
	067 Move X3, X31
	068 Call ArgumentException..ctor, X0, X1, X2
	069 Move X0, 0xB2E000
	070 Move X0, [X0+3760]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Call 0x1C17DEC
	075 Call 0x1C181E0

Method: System.Byte[] ToByteArray()

Disassembly:
	0x0360DD30 SUB X31, X31, 0x20
	0x0360DD34 STP X31, X30, [X31 + 0x8]
	0x0360DD38 MOV W1, W0
	0x0360DD3C ADD X0, X31, 0x0
	0x0360DD40 STR X31, [X31]
	0x0360DD44 BL 0x360B520
	0x0360DD48 LDP X0, X1, [X31]
	0x0360DD4C LDR X30, [X31 + 0x10]
	0x0360DD50 ADD X31, X31, 0x20
	0x0360DD54 RET
	0x0360DD58 STP X30, X21, [X31 - 0x20]!
	0x0360DD5C STP X20, X19, [X31 + 0x10]
	0x0360DD60 ADRP X21, 0xDD3000
	0x0360DD64 LDRB W8, [X21 + 0x40A]
	0x0360DD68 MOV X20, X1
	0x0360DD6C MOV X19, X0
	0x0360DD70 TBNZ X8, 0x0, 0x360DD88
	0x0360DD74 ADRP X0, 0xB2D000
	0x0360DD78 LDR X0, [X0 + 0xEC8]
	0x0360DD7C BL 0x1C16CF4
	0x0360DD80 MOVZ W8, 0x1
	0x0360DD84 STRB W8, [X21 + 0x40A]
	0x0360DD88 CBZ X20, 0x360DDD4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xDD4000
	006 Move X21, 0xB28000
	007 Move W8, [X20+1026]
	008 Move X21, [X21+2368]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB28000
	015 Move X0, [X0+2368]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1026], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W1, W31
	028 Move W2, W31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]

Method: System.Byte[] ToByteArray(System.Boolean isUnsigned = False, System.Boolean isBigEndian = False)

Disassembly:
	0x0360DD8C LDR W8, [X20 + 0x18]
	0x0360DD90 CMP W8, 0x2
	0x0360DD94 B.GE 0x360DDE4
	0x0360DD98 CBZ W8, 0x360DE2C
	0x0360DD9C LDR W8, [X20 + 0x20]
	0x0360DDA0 CMP W19, 0x1
	0x0360DDA4 B.LT 0x360DDC4
	0x0360DDA8 MOV W19, W8
	0x0360DDAC TBZ X8, 0x1F, 0x360DDD4
	0x0360DDB0 BL 0x1C16F30
	0x0360DDB4 ADRP X8, 0xB2D000
	0x0360DDB8 LDR X8, [X8 + 0xEC8]
	0x0360DDBC LDR X1, [X8]
	0x0360DDC0 BL 0x1C16DEC
	0x0360DDC4 ORR W9, W31, 0x80000001
	0x0360DDC8 CMP W8, W9
	0x0360DDCC B.CS 0x360DDE4
	0x0360DDD0 SUB W19, W31, W8
	0x0360DDD4 MOV W0, W19
	0x0360DDD8 LDP X20, X19, [X31 + 0x10]
	0x0360DDDC LDP X30, X21, [X31], #0x20
	0x0360DDE0 RET
	0x0360DDE4 ADRP X0, 0xAE6000
	0x0360DDE8 LDR X0, [X0 + 0x858]
	0x0360DDEC BL 0x1C16D08
	0x0360DDF0 BL 0x1C16F10
	0x0360DDF4 MOV X19, X0
	0x0360DDF8 ADRP X0, 0xB1B000
	0x0360DDFC LDR X0, [X0 + 0x1D0]
	0x0360DE00 BL 0x1C16D08
	0x0360DE04 MOV X1, X0
	0x0360DE08 MOV X0, X19
	0x0360DE0C MOV X2, X31
	0x0360DE10 BL 0x338CB50
	0x0360DE14 ADRP X0, 0xB2D000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xDD4000
	009 Move X22, 0xB28000
	010 Move W8, [X23+1027]
	011 Move X22, [X22+2368]
	012 Move W20, W2
	013 Move W21, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xB28000
	020 Move X0, [X0+2368]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+1027], W8
	024 Move X0, [X22]
	025 Move [X31+12], W31
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 And W4, W21, 1
	031 And W5, W20, 1
	032 Add X6, X31, 12
	033 Move X0, X19
	034 Move W1, W31
	035 Move X2, X31
	036 Move X3, X31
	037 Call BigInteger.TryGetBytes, X0, X1, X2, X3, X4, X5
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X30, [X31+16]
	043 Move X23, [X31+24]
	044 Add X31, X31, 64
	045 Return X0

Method: System.Boolean TryWriteBytes(System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Boolean isUnsigned = False, System.Boolean isBigEndian = False)

Disassembly:
	0x0360E324 ADD X0, X31, 0x20
	0x0360E328 MOV X1, X20
	0x0360E32C STP X31, X31, [X31 + 0x20]
	0x0360E330 BL 0x360BD70
	0x0360E334 LDP X0, X1, [X31 + 0x20]
	0x0360E338 LDP X20, X19, [X31 + 0x60]
	0x0360E33C LDP X22, X21, [X31 + 0x50]
	0x0360E340 LDP X24, X23, [X31 + 0x40]
	0x0360E344 LDR X30, [X31 + 0x30]
	0x0360E348 ADD X31, X31, 0x70
	0x0360E34C RET
	0x0360E350 LDR X0, [X20]
	0x0360E354 LDR W8, [X0 + 0xE0]
	0x0360E358 CBNZ W8, 0x360E360
	0x0360E35C BL 0x1C16DFC
	0x0360E360 ADRP X19, 0xDD2000
	0x0360E364 LDRB W8, [X19 + 0x452]
	0x0360E368 CBNZ W8, 0x360E380
	0x0360E36C ADRP X0, 0xB26000
	0x0360E370 LDR X0, [X0 + 0x940]
	0x0360E374 BL 0x1C16CF4
	0x0360E378 MOVZ W8, 0x1
	0x0360E37C STRB W8, [X19 + 0x452]
	0x0360E380 LDR X0, [X20]
	0x0360E384 LDR W8, [X0 + 0xE0]
	0x0360E388 CBNZ W8, 0x360E394
	0x0360E38C BL 0x1C16DFC
	0x0360E390 LDR X0, [X20]
	0x0360E394 LDR X8, [X0 + 0xB8]
	0x0360E398 LDR V0, [X8 + 0x3]
	0x0360E39C B 0x360E0F0
	0x0360E3A0 BL 0x1C16F28
	0x0360E3A4 BL 0x1C16F20
	0x0360E3A8 STR X30, [X31 - 0x30]!
	0x0360E3AC STP X22, X21, [X31 + 0x10]
	0x0360E3B0 STP X20, X19, [X31 + 0x20]
	0x0360E3B4 ADRP X22, 0xDD2000
	0x0360E3B8 LDRB W8, [X22 + 0x410]
	0x0360E3BC MOV X19, X2
	0x0360E3C0 MOV X21, X1
	0x0360E3C4 MOV X20, X0
	0x0360E3C8 TBNZ X8, 0x0, 0x360E3E0
	0x0360E3CC ADRP X0, 0xB0E000
	0x0360E3D0 LDR X0, [X0 + 0xD08]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0xDD3000
	011 Move X25, 0xB27000
	012 Move W8, [X26+1028]
	013 Move X25, [X25+2368]
	014 Move W21, W5
	015 Move W24, W4
	016 Move X19, X3
	017 Move X20, X2
	018 Move X22, X1
	019 Move X23, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xB27000
	025 Move X0, [X0+2368]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X26+1028], W8
	029 Move [X19], W31
	030 Move X0, [X25]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 And W4, W24, 1
	036 And W5, W21, 1
	037 Move W1, 2
	038 Move X0, X23
	039 Move X2, X22
	040 Move X3, X20
	041 Move X6, X19
	042 Call BigInteger.TryGetBytes, X0, X1, X2, X3, X4, X5
	043 Compare X0, 0
	044 JumpIfNotEqual {46}
	045 Move [X19], W31
	046 Move X20, [X31+64]
	047 Move X19, [X31+72]
	048 Move X22, [X31+48]
	049 Move X21, [X31+56]
	050 Move X24, [X31+32]
	051 Move X23, [X31+40]
	052 Move X26, [X31+16]
	053 Move X25, [X31+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CSET not yet implemented."
	056 Move X30, [X31+80]
	057 Return X0

Method: System.Boolean TryWriteOrCountBytes(System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Boolean isUnsigned = False, System.Boolean isBigEndian = False)

Disassembly:
	0x0360E3D4 BL 0x1C16CF4
	0x0360E3D8 MOVZ W8, 0x1
	0x0360E3DC STRB W8, [X22 + 0x410]
	0x0360E3E0 LDR X0, [X20 + 0x8]
	0x0360E3E4 CBNZ X0, 0x360E424
	0x0360E3E8 ADRP X8, 0xB0E000
	0x0360E3EC LDR W22, [X20]
	0x0360E3F0 LDR X8, [X8 + 0xD08]
	0x0360E3F4 MOVZ W1, 0x1
	0x0360E3F8 LDR X0, [X8]
	0x0360E3FC BL 0x1C16D6C
	0x0360E400 CBZ X0, 0x360E458
	0x0360E404 LDR W8, [X20]
	0x0360E408 LDR W9, [X0 + 0x18]
	0x0360E40C TBNZ X22, 0x1F, 0x360E418
	0x0360E410 CBNZ W9, 0x360E420
	0x0360E414 B 0x360E45C
	0x0360E418 CBZ W9, 0x360E45C
	0x0360E41C SUB W8, W31, W8
	0x0360E420 STR W8, [X0 + 0x20]
	0x0360E424 STR X0, [X21]
	0x0360E428 LDR X8, [X20 + 0x8]
	0x0360E42C CBZ X8, 0x360E438
	0x0360E430 LDR W8, [X8 + 0x18]
	0x0360E434 B 0x360E43C
	0x0360E438 MOVZ W8, 0x1
	0x0360E43C STR W8, [X19]
	0x0360E440 LDR W8, [X20]
	0x0360E444 LDP X20, X19, [X31 + 0x20]
	0x0360E448 LDP X22, X21, [X31 + 0x10]
	0x0360E44C UBFM W0, W8, 0x1F, 0x1F
	0x0360E450 LDR X30, [X31], #0x30
	0x0360E454 RET
	0x0360E458 BL 0x1C16F20
	0x0360E45C BL 0x1C16F28
	0x0360E460 STR X30, [X31 - 0x40]!
	0x0360E464 STP X24, X23, [X31 + 0x10]
	0x0360E468 STP X22, X21, [X31 + 0x20]
	0x0360E46C STP X20, X19, [X31 + 0x30]
	0x0360E470 ADRP X24, 0xDD2000
	0x0360E474 ADRP X23, 0xB26000
	0x0360E478 LDRB W8, [X24 + 0x40D]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0xDD3000
	011 Move X25, 0xB27000
	012 Move W8, [X26+1029]
	013 Move X25, [X25+2368]
	014 Move W21, W5
	015 Move W24, W4
	016 Move X19, X3
	017 Move X20, X2
	018 Move X22, X1
	019 Move X23, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xB27000
	025 Move X0, [X0+2368]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X26+1029], W8
	029 Move [X19], W31
	030 Move X0, [X25]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 And W4, W24, 1
	036 And W5, W21, 1
	037 Move W1, 2
	038 Move X0, X23
	039 Move X2, X22
	040 Move X3, X20
	041 Move X6, X19
	042 Call BigInteger.TryGetBytes, X0, X1, X2, X3, X4, X5
	043 Move X20, [X31+64]
	044 Move X19, [X31+72]
	045 Move X22, [X31+48]
	046 Move X21, [X31+56]
	047 Move X24, [X31+32]
	048 Move X23, [X31+40]
	049 Move X26, [X31+16]
	050 Move X25, [X31+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CSET not yet implemented."
	053 Move X30, [X31+80]
	054 Return X0

Method: System.Byte[] TryGetBytes(System.Numerics.BigInteger/GetBytesMode mode, System.Span`1<System.Byte> destination, System.Boolean isUnsigned, System.Boolean isBigEndian, ref System.Int32 bytesWritten)

Disassembly:
	0x0360DE18 LDR X0, [X0 + 0xEC8]
	0x0360DE1C BL 0x1C16D08
	0x0360DE20 MOV X1, X0
	0x0360DE24 MOV X0, X19
	0x0360DE28 BL 0x1C16DEC
	0x0360DE2C BL 0x1C16F28
	0x0360DE30 SUB X31, X31, 0x60
	0x0360DE34 STP X30, X23, [X31 + 0x30]
	0x0360DE38 STP X22, X21, [X31 + 0x40]
	0x0360DE3C STP X20, X19, [X31 + 0x50]
	0x0360DE40 ADRP X22, 0xDD3000
	0x0360DE44 LDRB W8, [X22 + 0x40B]
	0x0360DE48 MOV W20, W2
	0x0360DE4C MOV X19, X1
	0x0360DE50 MOV X21, X0
	0x0360DE54 STP X0, X1, [X31 + 0x10]
	0x0360DE58 TBNZ X8, 0x0, 0x360DE7C
	0x0360DE5C ADRP X0, 0xB27000
	0x0360DE60 LDR X0, [X0 + 0x940]
	0x0360DE64 BL 0x1C16CF4
	0x0360DE68 ADRP X0, 0xB0F000
	0x0360DE6C LDR X0, [X0 + 0xD08]
	0x0360DE70 BL 0x1C16CF4
	0x0360DE74 MOVZ W8, 0x1
	0x0360DE78 STRB W8, [X22 + 0x40B]
	0x0360DE7C MOVZ W8, 0x80000000
	0x0360DE80 CMP W20, W8
	0x0360DE84 STR X31, [X31 + 0x8]
	0x0360DE88 STR W31, [X31 + 0x4]
	0x0360DE8C B.EQ 0x360DEA0
	0x0360DE90 CBNZ W20, 0x360DED0
	0x0360DE94 LDR V0, [X31 + 0x1]
	0x0360DE98 STR V0, [X31 + 0x2]
	0x0360DE9C B 0x360E064
	0x0360DEA0 ADRP X8, 0xB27000
	0x0360DEA4 LDR X8, [X8 + 0x940]
	0x0360DEA8 LDR X0, [X8]
	0x0360DEAC LDR W8, [X0 + 0xE0]
	0x0360DEB0 CBNZ W8, 0x360DEB8
	0x0360DEB4 BL 0x1C16DFC
	0x0360DEB8 MOVN W2, 0x80000000
	0x0360DEBC MOV X0, X21
	0x0360DEC0 MOV X1, X19
	0x0360DEC4 BL 0x360E084
	0x0360DEC8 MOVZ W2, 0x1
	0x0360DECC B 0x360DFC4
	0x0360DED0 ADRP X8, 0xB27000
	0x0360DED4 LDR X8, [X8 + 0x940]
	0x0360DED8 TBNZ X20, 0x1F, 0x360DFA8
	0x0360DEDC LDR X0, [X8]
	0x0360DEE0 UBFM W22, W20, 0x5, 0x1F
	0x0360DEE4 AND W23, W20, 0x1F
	0x0360DEE8 LDR W8, [X0 + 0xE0]
	0x0360DEEC CBNZ W8, 0x360DEF4
	0x0360DEF0 BL 0x1C16DFC
	0x0360DEF4 ADD X0, X31, 0x10
	0x0360DEF8 ADD X1, X31, 0x8
	0x0360DEFC ADD X2, X31, 0x4
	0x0360DF00 BL 0x360E3A8
	0x0360DF04 ADRP X8, 0xB0F000
	0x0360DF08 LDR W21, [X31 + 0x4]
	0x0360DF0C LDR X8, [X8 + 0xD08]
	0x0360DF10 MOV W19, W0
	0x0360DF14 LDR X0, [X8]
	0x0360DF18 ADD W8, W22, W21
	0x0360DF1C ADD W1, W8, 0x1
	0x0360DF20 BL 0x1C16D6C
	0x0360DF24 MOV X1, X0
	0x0360DF28 CMP W21, 0x1
	0x0360DF2C CBZ W23, 0x360DFD0
	0x0360DF30 B.LT 0x360E030
	0x0360DF34 LDR X13, [X31 + 0x8]
	0x0360DF38 CBZ X13, 0x360E080
	0x0360DF3C LDR W11, [X13 + 0x18]
	0x0360DF40 SUB W12, W31, W20
	0x0360DF44 MOV W10, W22
	0x0360DF48 MOV X9, X31
	0x0360DF4C MOV W8, W31
	0x0360DF50 AND W12, W12, 0x1F
	0x0360DF54 ADD X13, X13, 0x20
	0x0360DF58 UBFM X14, X10, 0x20, 0x1F
	0x0360DF5C MOVZ X15, 0x1
	0x0360DF60 CMP X9, X11
	0x0360DF64 B.CS 0x360E07C
	0x0360DF68 CBZ X1, 0x360E080
	0x0360DF6C LDR W16, [X1 + 0x18]
	0x0360DF70 ADD X17, X10, X9
	0x0360DF74 CMP X17, X16
	0x0360DF78 B.CS 0x360E07C
	0x0360DF7C LDR W16, [X13, X9, LSL #2]
	0x0360DF80 ADD X9, X9, 0x1
	0x0360DF84 ADD X17, X1, X14, 0x1E, ASR
	0x0360DF88 CMP X21, X9
	0x0360DF8C LSLV W0, W16, W23
	0x0360DF90 ORR W0, W0, W8, 0x0
	0x0360DF94 LSRV W8, W16, W12
	0x0360DF98 ADD X14, X14, X15
	0x0360DF9C STR W0, [X17 + 0x20]
	0x0360DFA0 B.NE 0x360DF60
	0x0360DFA4 B 0x360E03C
	0x0360DFA8 LDR X0, [X8]
	0x0360DFAC LDR W8, [X0 + 0xE0]
	0x0360DFB0 CBNZ W8, 0x360DFB8
	0x0360DFB4 BL 0x1C16DFC
	0x0360DFB8 SUB W2, W31, W20
	0x0360DFBC MOV X0, X21
	0x0360DFC0 MOV X1, X19
	0x0360DFC4 BL 0x360E084
	0x0360DFC8 STP X0, X1, [X31 + 0x20]
	0x0360DFCC B 0x360E064
	0x0360DFD0 B.LT 0x360E054
	0x0360DFD4 LDR X11, [X31 + 0x8]
	0x0360DFD8 CBZ X11, 0x360E080
	0x0360DFDC LDR W10, [X11 + 0x18]
	0x0360DFE0 MOV W9, W22
	0x0360DFE4 MOV X8, X31
	0x0360DFE8 ADD X11, X11, 0x20
	0x0360DFEC UBFM X12, X9, 0x20, 0x1F
	0x0360DFF0 MOVZ X13, 0x1
	0x0360DFF4 CMP X8, X10
	0x0360DFF8 B.CS 0x360E07C
	0x0360DFFC CBZ X1, 0x360E080
	0x0360E000 LDR W14, [X1 + 0x18]
	0x0360E004 ADD X15, X9, X8
	0x0360E008 CMP X15, X14
	0x0360E00C B.CS 0x360E07C
	0x0360E010 LDR W14, [X11, X8, LSL #2]
	0x0360E014 ADD X8, X8, 0x1
	0x0360E018 ADD X15, X1, X12, 0x1E, ASR
	0x0360E01C CMP X21, X8
	0x0360E020 ADD X12, X12, X13
	0x0360E024 STR W14, [X15 + 0x20]
	0x0360E028 B.NE 0x360DFF4
	0x0360E02C B 0x360E054
	0x0360E030 CBZ X1, 0x360E080
	0x0360E034 MOV W8, W31
	0x0360E038 MOV W21, W31
	0x0360E03C LDR W10, [X1 + 0x18]
	0x0360E040 ADD W9, W21, W22
	0x0360E044 CMP W9, W10
	0x0360E048 B.CS 0x360E07C
	0x0360E04C ADD X9, X1, W9, 0x2, SXTW
	0x0360E050 STR W8, [X9 + 0x20]
	0x0360E054 AND W2, W19, 0x1
	0x0360E058 ADD X0, X31, 0x20
	0x0360E05C STP X31, X31, [X31 + 0x20]
	0x0360E060 BL 0x360BD70
	0x0360E064 LDP X0, X1, [X31 + 0x20]
	0x0360E068 LDP X20, X19, [X31 + 0x50]
	0x0360E06C LDP X22, X21, [X31 + 0x40]
	0x0360E070 LDP X30, X23, [X31 + 0x30]
	0x0360E074 ADD X31, X31, 0x60
	0x0360E078 RET
	0x0360E07C BL 0x1C16F28
	0x0360E080 BL 0x1C16F20
	0x0360E084 SUB X31, X31, 0x70
	0x0360E088 STR X30, [X31 + 0x30]
	0x0360E08C STP X24, X23, [X31 + 0x40]
	0x0360E090 STP X22, X21, [X31 + 0x50]
	0x0360E094 STP X20, X19, [X31 + 0x60]
	0x0360E098 ADRP X22, 0xDD2000
	0x0360E09C LDRB W8, [X22 + 0x40C]
	0x0360E0A0 MOV W21, W2
	0x0360E0A4 MOV X19, X1
	0x0360E0A8 MOV X20, X0
	0x0360E0AC STP X0, X1, [X31 + 0x10]
	0x0360E0B0 TBNZ X8, 0x0, 0x360E0D4
	0x0360E0B4 ADRP X0, 0xB26000
	0x0360E0B8 LDR X0, [X0 + 0x940]
	0x0360E0BC BL 0x1C16CF4
	0x0360E0C0 ADRP X0, 0xB0E000
	0x0360E0C4 LDR X0, [X0 + 0xD08]
	0x0360E0C8 BL 0x1C16CF4
	0x0360E0CC MOVZ W8, 0x1
	0x0360E0D0 STRB W8, [X22 + 0x40C]
	0x0360E0D4 MOVZ W8, 0x80000000
	0x0360E0D8 CMP W21, W8
	0x0360E0DC STR X31, [X31 + 0x38]
	0x0360E0E0 STR W31, [X31 + 0xC]
	0x0360E0E4 B.EQ 0x360E0F8
	0x0360E0E8 CBNZ W21, 0x360E128
	0x0360E0EC LDR V0, [X31 + 0x1]
	0x0360E0F0 STR V0, [X31 + 0x2]
	0x0360E0F4 B 0x360E334
	0x0360E0F8 ADRP X8, 0xB26000
	0x0360E0FC LDR X8, [X8 + 0x940]
	0x0360E100 LDR X0, [X8]
	0x0360E104 LDR W8, [X0 + 0xE0]
	0x0360E108 CBNZ W8, 0x360E110
	0x0360E10C BL 0x1C16DFC
	0x0360E110 MOVN W2, 0x80000000
	0x0360E114 MOV X0, X20
	0x0360E118 MOV X1, X19
	0x0360E11C BL 0x360DE30
	0x0360E120 MOVZ W2, 0x1
	0x0360E124 B 0x360E2B4
	0x0360E128 TBNZ X21, 0x1F, 0x360E290
	0x0360E12C ADRP X20, 0xB26000
	0x0360E130 LDR X20, [X20 + 0x940]
	0x0360E134 LDR X0, [X20]
	0x0360E138 LDR W8, [X0 + 0xE0]
	0x0360E13C CBNZ W8, 0x360E144
	0x0360E140 BL 0x1C16DFC
	0x0360E144 ADD X0, X31, 0x10
	0x0360E148 ADD X1, X31, 0x38
	0x0360E14C ADD X2, X31, 0xC
	0x0360E150 BL 0x360E3A8
	0x0360E154 LDR W22, [X31 + 0xC]
	0x0360E158 MOV W19, W0
	0x0360E15C TBZ X0, 0x0, 0x360E1AC
	0x0360E160 CMP W21, W22, LSL
	0x0360E164 B.GE 0x360E350
	0x0360E168 ADRP X8, 0xB0E000
	0x0360E16C LDR X8, [X8 + 0xD08]
	0x0360E170 MOV W1, W22
	0x0360E174 LDR X0, [X8]
	0x0360E178 BL 0x1C16D6C
	0x0360E17C LDR X8, [X31 + 0x38]
	0x0360E180 MOV X20, X0
	0x0360E184 MOV W1, W31
	0x0360E188 MOV X2, X20
	0x0360E18C MOV X0, X8
	0x0360E190 MOV W3, W31
	0x0360E194 MOV W4, W22
	0x0360E198 MOV X5, X31
	0x0360E19C BL 0x339FCE8
	0x0360E1A0 MOV X0, X20
	0x0360E1A4 STR X20, [X31 + 0x38]
	0x0360E1A8 BL 0x360BCB0
	0x0360E1AC ADRP X8, 0xB0E000
	0x0360E1B0 LDR X8, [X8 + 0xD08]
	0x0360E1B4 UBFM W23, W21, 0x5, 0x1F
	0x0360E1B8 AND W24, W21, 0x1F
	0x0360E1BC LDR X0, [X8]
	0x0360E1C0 SUB W8, W22, W23
	0x0360E1C4 BIC W1, W8, W8, 0x1F
	0x0360E1C8 BL 0x1C16D6C
	0x0360E1CC MOV X20, X0
	0x0360E1D0 SUB W10, W22, 0x1
	0x0360E1D4 CBZ W24, 0x360E2C0
	0x0360E1D8 SUBS W8, W10, W23
	0x0360E1DC B.LT 0x360E314
	0x0360E1E0 LDR X15, [X31 + 0x38]
	0x0360E1E4 CBZ X15, 0x360E3A4
	0x0360E1E8 LDR W11, [X15 + 0x18]
	0x0360E1EC SUB W13, W31, W21
	0x0360E1F0 MOVN W14, 0x0
	0x0360E1F4 MOV W9, W10
	0x0360E1F8 ADD X16, X20, W8, 0x2, SXTW
	0x0360E1FC MOV W17, W31
	0x0360E200 SXTW X9, W9
	0x0360E204 MOV W10, W10
	0x0360E208 AND W12, W13, 0x1F
	0x0360E20C LSLV W13, W14, W13
	0x0360E210 ADD X14, X16, 0x20
	0x0360E214 ADD X15, X15, 0x20
	0x0360E218 SUB W16, W31, W23
	0x0360E21C CMP X9, X11
	0x0360E220 B.CS 0x360E3A0
	0x0360E224 LDR W0, [X15, X9, LSL #2]
	0x0360E228 CMP X10, X9
	0x0360E22C CSET W1, NE
	0x0360E230 ORN W1, W1, W19, 0x0
	0x0360E234 TBNZ X1, 0x0, 0x360E258
	0x0360E238 CBZ X20, 0x360E3A4
	0x0360E23C LDR W17, [X20 + 0x18]
	0x0360E240 CMP W8, W17
	0x0360E244 B.CS 0x360E3A0
	0x0360E248 LSRV W17, W0, W24
	0x0360E24C ORR W17, W17, W13, 0x0
	0x0360E250 STR W17, [X14]
	0x0360E254 B 0x360E27C
	0x0360E258 CBZ X20, 0x360E3A4
	0x0360E25C LDR W2, [X20 + 0x18]
	0x0360E260 ADD X1, X16, X9
	0x0360E264 CMP W1, W2
	0x0360E268 B.CS 0x360E3A0
	0x0360E26C LSRV W2, W0, W24
	0x0360E270 ORR W17, W2, W17, 0x0
	0x0360E274 ADD X1, X20, W1, 0x2, SXTW
	0x0360E278 STR W17, [X1 + 0x20]
	0x0360E27C SUB X9, X9, 0x1
	0x0360E280 CMP W9, W23
	0x0360E284 LSLV W17, W0, W12
	0x0360E288 B.GE 0x360E21C
	0x0360E28C B 0x360E314
	0x0360E290 ADRP X8, 0xB26000
	0x0360E294 LDR X8, [X8 + 0x940]
	0x0360E298 LDR X0, [X8]
	0x0360E29C LDR W8, [X0 + 0xE0]
	0x0360E2A0 CBNZ W8, 0x360E2A8
	0x0360E2A4 BL 0x1C16DFC
	0x0360E2A8 SUB W2, W31, W21
	0x0360E2AC MOV X0, X20
	0x0360E2B0 MOV X1, X19
	0x0360E2B4 BL 0x360DE30
	0x0360E2B8 STP X0, X1, [X31 + 0x20]
	0x0360E2BC B 0x360E334
	0x0360E2C0 CMP W10, W23
	0x0360E2C4 B.LT 0x360E314
	0x0360E2C8 LDR X11, [X31 + 0x38]
	0x0360E2CC CBZ X11, 0x360E3A4
	0x0360E2D0 LDR W8, [X11 + 0x18]
	0x0360E2D4 SXTW X9, W10
	0x0360E2D8 SUB W10, W31, W23
	0x0360E2DC ADD X11, X11, 0x20
	0x0360E2E0 CMP X9, X8
	0x0360E2E4 B.CS 0x360E3A0
	0x0360E2E8 CBZ X20, 0x360E3A4
	0x0360E2EC LDR W13, [X20 + 0x18]
	0x0360E2F0 ADD X12, X10, X9
	0x0360E2F4 CMP W12, W13
	0x0360E2F8 B.CS 0x360E3A0
	0x0360E2FC LDR W13, [X11, X9, LSL #2]
	0x0360E300 SUB X9, X9, 0x1
	0x0360E304 ADD X12, X20, W12, 0x2, SXTW
	0x0360E308 CMP W9, W23
	0x0360E30C STR W13, [X12 + 0x20]
	0x0360E310 B.GE 0x360E2E0
	0x0360E314 TBZ X19, 0x0, 0x360E320
	0x0360E318 MOV X0, X20
	0x0360E31C BL 0x360BCB0
	0x0360E320 AND W2, W19, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xDD4000
	015 Move W8, [X21+1030]
	016 Move X22, X6
	017 Move W28, W5
	018 Move W24, W4
	019 Move X20, X3
	020 Move X19, X2
	021 Move W23, W1
	022 Move X25, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {44}
	027 Move X0, 0xB2E000
	028 Move X0, [X0+3768]
	029 Call 0x1C17CF4
	030 Move X0, 0xB28000
	031 Move X0, [X0+2368]
	032 Call 0x1C17CF4
	033 Move X0, 0xAE7000
	034 Move X0, [X0+1560]
	035 Call 0x1C17CF4
	036 Move X0, 0xB16000
	037 Move X0, [X0+2344]
	038 Call 0x1C17CF4
	039 Move X0, 0xB16000
	040 Move X0, [X0+760]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+1030], W8
	044 Move W26, [X25]
	045 Compare W26, 0
	046 JumpIfEqual {69}
	047 Move TEMP, X26
	048 And TEMP, TEMP, -2147483648
	049 Compare TEMP, -2147483648
	050 JumpIfNotEqual {55}
	051 Move TEMP, X24
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {355}
	055 Move X27, [X25+8]
	056 Move [X31+12], W28
	057 Compare X27, 0
	058 JumpIfEqual {91}
	059 Move X8, [X27+24]
	060 Add W31, W26, 1
	061 Compare W8, 0
	062 JumpIfEqual {103}
	063 Move X9, INVALID
	064 Add X8, X9, X8
	065 Add X8, X27, X8
	066 Move W21, [X8+32]
	067 Move W25, W31
	068 Move W2, W31
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare W23, 0
	071 JumpIfNotEqual {141}
	072 Move X8, 0xAE7000
	073 Move X8, [X8+1560]
	074 Move X20, [X31+96]
	075 Move X19, [X31+104]
	076 Move X22, [X31+80]
	077 Move X21, [X31+88]
	078 Move X24, [X31+64]
	079 Move X23, [X31+72]
	080 Move X0, [X8]
	081 Move X26, [X31+48]
	082 Move X25, [X31+56]
	083 Move X28, [X31+32]
	084 Move X27, [X31+40]
	085 Move X29, [X31+16]
	086 Move X30, [X31+24]
	087 Move W1, 1
	088 Add X31, X31, 112
	089 Call 0x1C17D6C
	090 Return X0
	091 Move W25, W31
	092 NotImplemented "Instruction SBFM not yet implemented."
	093 Move W21, W26
	094 Compare W8, 0
	095 JumpIfEqual {103}
	096 Move W25, W31
	097 Add X9, X27, W25
	098 Move W9, [X9+32]
	099 Compare W9, 0
	100 JumpIfNotEqual {104}
	101 Add W25, W25, 1
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Call 0x1C17F28
	104 Subtract W8, W8, 1
	105 Add X9, X27, W8
	106 Move W9, [X9+32]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move W2, 255
	109 Subtract W8, W31, W9
	110 NotImplemented "Instruction CSINV not yet implemented."
	111 Move W28, W21
	112 ShiftRight W28, 24
	113 And W28, W28, 0x7FFFFFFF
	114 NotImplemented "Instruction CMP not yet implemented."
	115 And W8, W2, 255
	116 Move W10, W21
	117 ShiftRight W10, 16
	118 And W10, W10, 0x7FFFFFFF
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W10, W21
	121 ShiftRight W10, 8
	122 And W10, W10, 0x7FFFFFFF
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move W4, W31
	125 Move W3, W31
	126 Move W5, 1
	127 Move W9, 1
	128 Move W10, W21
	129 Move W5, W31
	130 Move W4, W31
	131 Move W3, W31
	132 Move W9, 4
	133 Move W10, W28
	134 Move W5, W31
	135 Move W4, W31
	136 Move W9, 3
	137 Move W3, 1
	138 Move W8, 1
	139 Move X23, X31
	140 Move [X22], W8
	141 Move W8, 1
	142 Move [X22], W8
	143 Compare W20, 0
	144 JumpIfEqual {219}
	145 Move [X19], W31
	146 Move X19, 0xB27000
	147 Move X19, [X19+2368]
	148 Move X0, [X19]
	149 Move W8, [X0+224]
	150 Compare W8, 0
	151 JumpIfNotEqual {154}
	152 Call 0x1C17DFC
	153 Move X0, [X19]
	154 Move X8, [X0+184]
	155 Move X23, [X8+64]
	156 Move W5, W31
	157 Move W3, W31
	158 Move W9, 2
	159 Move W4, 1
	160 Xor W8, W10, W8
	161 And W31, W8, 128
	162 NotImplemented "Instruction CSET not yet implemented."
	163 Or W29, W8, W24
	164 NotImplemented "Instruction ORN not yet implemented."
	165 And W8, W8, 1
	166 Add W24, W9, W8
	167 Compare X27, 0
	168 JumpIfEqual {190}
	169 Move W8, [X27+24]
	170 Move W9, 0x80000000
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move TEMP, 0xE0000000
	173 Not TEMP
	174 Move W9, TEMP
	175 Add W9, W8, W9
	176 Move W9, W9
	177 ShiftRight W9, 30
	178 And W9, W9, 0x7FFFFFFF
	179 Compare W9, 0
	180 JumpIfNotEqual {350}
	181 Move W8, W8
	182 ShiftRight W8, 30
	183 And W8, W8, 0x1FFFFFFF
	184 Subtract W8, W8, 4
	185 Move X9, W8
	186 Add X9, X9, W24
	187 Move W10, 0x80000000
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Add W24, W8, W24
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Compare W23, 0
	192 JumpIfNotEqual {217}
	193 Move X8, 0xAE6000
	194 Move X8, [X8+1560]
	195 Move W1, W24
	196 Move [X31+8], W2
	197 Move W20, W3
	198 Move X0, [X8]
	199 Move W22, W4
	200 Move W19, W21
	201 Move W21, W5
	202 Call 0x1C17D6C
	203 Move X8, 0xB15000
	204 Move X8, [X8+760]
	205 Move X23, X0
	206 Move X1, [X8]
	207 Call 0x25FC4C0, X0
	208 Move W2, [X31+8]
	209 Move W5, W21
	210 Move W21, W19
	211 Move W4, W22
	212 Move W3, W20
	213 Move X19, X0
	214 Move W20, W1
	215 Move X23, X31
	216 Move [X22], W24
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move [X22], W24
	219 Move X23, X31
	220 Move X22, 0xB27000
	221 Move X22, [X22+2368]
	222 Move X0, [X22]
	223 Move W8, [X0+224]
	224 Compare W8, 0
	225 JumpIfNotEqual {238}
	226 Move [X31+4], W4
	227 Move [X31+8], W2
	228 Move W23, W3
	229 Move [X31], W21
	230 Move W21, W5
	231 Call 0x1C17DFC
	232 Move W5, W21
	233 Move W21, [X31]
	234 Move W4, [X31+4]
	235 Move W2, [X31+8]
	236 Move X0, [X22]
	237 Move W3, W23
	238 Move X8, [X0+184]
	239 Move X23, [X8+64]
	240 Move W9, [X31+12]
	241 Subtract W8, W24, 1
	242 Move TEMP, 0
	243 Not TEMP
	244 Move W10, TEMP
	245 And W31, W9, 1
	246 NotImplemented "Instruction CSEL not yet implemented."
	247 NotImplemented "Instruction CSNEG not yet implemented."
	248 Compare X27, 0
	249 JumpIfEqual {299}
	250 Move X11, [X27+24]
	251 Subtract W10, W11, 1
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move X10, X31
	254 And X16, X11, 0
	255 Move X11, W25
	256 Add X12, X27, 32
	257 Add W13, W8, W8
	258 Move W14, W8
	259 ShiftRight W14, 31
	260 And W14, W14, 0x3FFFFFFF
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move W15, [X12]
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Subtract W16, W31, W15
	265 NotImplemented "Instruction CSINV not yet implemented."
	266 Add W31, W26, 1
	267 NotImplemented "Instruction CSEL not yet implemented."
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Add W15, W9, W8
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move [X19], W16
	272 Add W17, W8, W15
	273 Move W0, W16
	274 ShiftRight W0, 8
	275 And W0, W0, 0x7FFFFFFF
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move [X19], W0
	278 Add W17, W8, W17
	279 Add W0, W14, W9
	280 Move W1, W16
	281 ShiftRight W1, 16
	282 And W1, W1, 0x7FFFFFFF
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move [X19], W1
	285 Add W9, W13, W9
	286 Move W16, W16
	287 ShiftRight W16, 24
	288 And W16, W16, 0x7FFFFFFF
	289 Move [X19], W16
	290 Move X9, [X27+24]
	291 Add X10, X10, 1
	292 And X16, X9, 0
	293 Subtract W9, W9, 1
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Add W9, W8, W17
	296 Add W9, W15, W8
	297 Add W9, W9, W8
	298 Add W9, W9, W8
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move [X19], W21
	301 Move TEMP, X5
	302 And TEMP, TEMP, 1
	303 Compare TEMP, 1
	304 JumpIfEqual {328}
	305 Add W9, W9, W8
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Move W10, W21
	308 ShiftRight W10, 8
	309 And W10, W10, 0x7FFFFFFF
	310 Move [X19], W10
	311 Move TEMP, X4
	312 And TEMP, TEMP, 1
	313 Compare TEMP, 1
	314 JumpIfEqual {328}
	315 Add W9, W9, W8
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Move W10, W21
	318 ShiftRight W10, 16
	319 And W10, W10, 0x7FFFFFFF
	320 Move [X19], W10
	321 Move TEMP, X3
	322 And TEMP, TEMP, 1
	323 Compare TEMP, 1
	324 JumpIfEqual {328}
	325 Add W9, W9, W8
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move [X19], W28
	328 Move TEMP, X29
	329 And TEMP, TEMP, 1
	330 Compare TEMP, 1
	331 JumpIfEqual {335}
	332 Add W8, W9, W8
	333 NotImplemented "Instruction CMP not yet implemented."
	334 Move [X19], W2
	335 Move X0, X23
	336 Move X20, [X31+96]
	337 Move X19, [X31+104]
	338 Move X22, [X31+80]
	339 Move X21, [X31+88]
	340 Move X24, [X31+64]
	341 Move X23, [X31+72]
	342 Move X26, [X31+48]
	343 Move X25, [X31+56]
	344 Move X28, [X31+32]
	345 Move X27, [X31+40]
	346 Move X29, [X31+16]
	347 Move X30, [X31+24]
	348 Add X31, X31, 112
	349 Return X0
	350 Call 0x1C17F30
	351 Move X8, 0xB2D000
	352 Move X8, [X8+3768]
	353 Move X1, [X8]
	354 Call 0x1C17DEC
	355 Move X0, 0xAE6000
	356 Move X0, [X0+2136]
	357 Call 0x1C17D08
	358 Call 0x1C17F10
	359 Move X19, X0
	360 Move X0, 0xB2D000
	361 Move X0, [X0+3776]
	362 Call 0x1C17D08
	363 Move X1, X0
	364 Move X0, X19
	365 Move X2, X31
	366 Call OverflowException..ctor, X0, X1
	367 Move X0, 0xB2D000
	368 Move X0, [X0+3768]
	369 Call 0x1C17D08
	370 Move X1, X0
	371 Move X0, X19
	372 Call 0x1C17DEC

Method: System.String ToString()

Disassembly:
	0x0360E47C LDR X23, [X23 + 0x940]
	0x0360E480 MOV X19, X3
	0x0360E484 MOV X20, X2
	0x0360E488 MOV X22, X1
	0x0360E48C MOV X21, X0
	0x0360E490 TBNZ X8, 0x0, 0x360E4A8
	0x0360E494 ADRP X0, 0xB26000
	0x0360E498 LDR X0, [X0 + 0x940]
	0x0360E49C BL 0x1C16CF4
	0x0360E4A0 MOVZ W8, 0x1
	0x0360E4A4 STRB W8, [X24 + 0x40D]
	0x0360E4A8 LDR X0, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0]
	005 Move X20, [X0+8]
	006 Move X0, X31
	007 Call NumberFormatInfo.get_CurrentInfo
	008 Move X3, X0
	009 Move X0, X19
	010 Move X1, X20
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X2, X31
	014 Move X30, [X31+32]

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x0360E558 CBNZ W8, 0x360E560
	0x0360E55C BL 0x1C16DFC
	0x0360E560 ADD X0, X31, 0x0
	0x0360E564 MOV X1, X20
	0x0360E568 MOV X2, X19
	0x0360E56C BL 0x360CB04
	0x0360E570 LDP X20, X19, [X31 + 0x30]
	0x0360E574 LDP X22, X21, [X31 + 0x20]
	0x0360E578 LDR X30, [X31 + 0x10]
	0x0360E57C ORN W8, W31, W0, 0x0
	0x0360E580 UBFM W0, W8, 0x1F, 0x1F
	0x0360E584 ADD X31, X31, 0x40
	0x0360E588 RET
	0x0360E58C SUB X31, X31, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, [X0]
	006 Move X20, [X0+8]
	007 Move X21, X1
	008 Move X0, X2
	009 Move X1, X31
	010 Call NumberFormatInfo.GetInstance, X0
	011 Move X3, X0
	012 Move X0, X19
	013 Move X1, X20
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X2, X21
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Call BigNumber.FormatBigInteger, X0, X1, X2
	020 Return X0

Method: System.Numerics.BigInteger Add(System.UInt32[] leftBits, System.Int32 leftSign, System.UInt32[] rightBits, System.Int32 rightSign)

Disassembly:
	0x0360E590 STP X30, X21, [X31 + 0x10]
	0x0360E594 STP X20, X19, [X31 + 0x20]
	0x0360E598 ADRP X20, 0xDD2000
	0x0360E59C STP X0, X1, [X31]
	0x0360E5A0 ADRP X21, 0xB26000
	0x0360E5A4 LDRB W8, [X20 + 0x40F]
	0x0360E5A8 LDR X21, [X21 + 0x940]
	0x0360E5AC MOV X19, X2
	0x0360E5B0 TBNZ X8, 0x0, 0x360E5C8
	0x0360E5B4 ADRP X0, 0xB26000
	0x0360E5B8 LDR X0, [X0 + 0x940]
	0x0360E5BC BL 0x1C16CF4
	0x0360E5C0 MOVZ W8, 0x1
	0x0360E5C4 STRB W8, [X20 + 0x40F]
	0x0360E5C8 LDR X0, [X21]
	0x0360E5CC LDR W8, [X0 + 0xE0]
	0x0360E5D0 CBNZ W8, 0x360E5D8
	0x0360E5D4 BL 0x1C16DFC
	0x0360E5D8 ADD X0, X31, 0x0
	0x0360E5DC MOV X1, X19
	0x0360E5E0 BL 0x360CA64
	0x0360E5E4 LDP X20, X19, [X31 + 0x20]
	0x0360E5E8 LDP X30, X21, [X31 + 0x10]
	0x0360E5EC UBFM W0, W0, 0x1F, 0x1F
	0x0360E5F0 ADD X31, X31, 0x30
	0x0360E5F4 RET
	0x0360E5F8 STR D8, [X31 - 0x30]!
	0x0360E5FC STP X30, X21, [X31 + 0x10]
	0x0360E600 STP X20, X19, [X31 + 0x20]
	0x0360E604 ADRP X19, 0xDD2000
	0x0360E608 ADRP X20, 0xB0E000
	0x0360E60C LDRB W8, [X19 + 0x411]
	0x0360E610 LDR X20, [X20 + 0xD08]
	0x0360E614 TBNZ X8, 0x0, 0x360E644
	0x0360E618 ADRP X0, 0xAED000
	0x0360E61C LDR X0, [X0 + 0xCC8]
	0x0360E620 BL 0x1C16CF4
	0x0360E624 ADRP X0, 0xB26000
	0x0360E628 LDR X0, [X0 + 0x940]
	0x0360E62C BL 0x1C16CF4
	0x0360E630 ADRP X0, 0xB0E000
	0x0360E634 LDR X0, [X0 + 0xD08]
	0x0360E638 BL 0x1C16CF4
	0x0360E63C MOVZ W8, 0x1
	0x0360E640 STRB W8, [X19 + 0x411]
	0x0360E644 LDR X0, [X20]
	0x0360E648 MOVZ W1, 0x1
	0x0360E64C BL 0x1C16D6C
	0x0360E650 CBZ X0, 0x360E740
	0x0360E654 LDR W8, [X0 + 0x18]
	0x0360E658 CBZ W8, 0x360E744
	0x0360E65C ADRP X20, 0xB26000
	0x0360E660 LDR X20, [X20 + 0x940]
	0x0360E664 MOVZ W8, 0x80000000
	0x0360E668 STR W8, [X0 + 0x20]
	0x0360E66C MOVI D8, 0xFFFFFFFF
	0x0360E670 LDR X8, [X20]
	0x0360E674 ADRP X21, 0xDD2000
	0x0360E678 ADRP X19, 0xAED000
	0x0360E67C LDR X8, [X8 + 0xB8]
	0x0360E680 STR D8, [X8]
	0x0360E684 STR X0, [X8 + 0x8]
	0x0360E688 LDRB W8, [X21 + 0x3F7]
	0x0360E68C LDR X19, [X19 + 0xCC8]
	0x0360E690 TBNZ X8, 0x0, 0x360E6A8
	0x0360E694 ADRP X0, 0xB26000
	0x0360E698 LDR X0, [X0 + 0x940]
	0x0360E69C BL 0x1C16CF4
	0x0360E6A0 MOVZ W8, 0x1
	0x0360E6A4 STRB W8, [X21 + 0x3F7]
	0x0360E6A8 LDR X8, [X20]
	0x0360E6AC ADRP X9, 0xFFFFFFFFFD4DF000
	0x0360E6B0 LDR V0, [X9 + 0xEC0]
	0x0360E6B4 LDR X9, [X8 + 0xB8]
	0x0360E6B8 STR D0, [X9 + 0x10]
	0x0360E6BC STR X31, [X9 + 0x18]
	0x0360E6C0 LDR X9, [X8 + 0xB8]
	0x0360E6C4 STP X31, X31, [X9 + 0x20]
	0x0360E6C8 LDR X8, [X8 + 0xB8]
	0x0360E6CC LDR X19, [X19]
	0x0360E6D0 STR D8, [X8 + 0x30]
	0x0360E6D4 STR X31, [X8 + 0x38]
	0x0360E6D8 LDR X8, [X19 + 0x38]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0xDD3000
	009 Move W8, [X23+1031]
	010 Move W22, W3
	011 Move X20, X2
	012 Move W19, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xB2D000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move X0, 0xB27000
	022 Move X0, [X0+2368]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1031], W8
	026 Or X8, X21, X20
	027 Compare X8, 0
	028 JumpIfNotEqual {46}
	029 Move X8, 0xB27000
	030 Move X8, [X8+2368]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X8, W22
	037 Add X1, X8, W19
	038 Add X0, X31, 16
	039 Move [X31+16], X31
	040 Move [X31+24], X31
	041 Call BigInteger..ctor, X0, X1
	042 Move X8, [X31+16]
	043 Move X9, [X31+24]
	044 Move [X31], X8
	045 Move [X31+8], X9
	046 Move X8, 0xB2D000
	047 Move X8, [X8+3720]
	048 Compare X21, 0
	049 JumpIfEqual {62}
	050 Compare X20, 0
	051 JumpIfEqual {71}
	052 Move X0, [X8]
	053 Move W22, [X21+24]
	054 Move W23, [X20+24]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X20
	061 Move X1, X21
	062 Move X0, [X8]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSNEG not yet implemented."
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X20
	070 Move W1, W21
	071 Move X0, [X8]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSNEG not yet implemented."
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X21
	079 Move W1, W20
	080 Call BigIntegerCalculator.Add, X0, X1
	081 Move X0, X21
	082 Move X1, X20
	083 Call BigIntegerCalculator.Add, X0, X1
	084 Move X1, X0
	085 Move W2, W19
	086 ShiftRight W2, 31
	087 And W2, W2, 0x7FFFFFFF
	088 Add X0, X31, 0
	089 Move [X31], X31
	090 Move [X31+8], X31
	091 Call BigInteger..ctor, X0, X1, X2
	092 Move X0, [X31]
	093 Move X1, [X31+8]
	094 Move X20, [X31+64]
	095 Move X19, [X31+72]
	096 Move X22, [X31+48]
	097 Move X21, [X31+56]
	098 Move X30, [X31+32]
	099 Move X23, [X31+40]
	100 Add X31, X31, 80
	101 Return X0

Method: System.Numerics.BigInteger op_Subtraction(System.Numerics.BigInteger left, System.Numerics.BigInteger right)

Disassembly:
	0x0360E8A0 SUBS X11, X11, 0x1
	0x0360E8A4 ADD X8, X8, X12
	0x0360E8A8 STR W8, [X10], #0x4
	0x0360E8AC SBFM X8, X8, 0x20, 0x3F
	0x0360E8B0 B.NE 0x360E89C
	0x0360E8B4 RET
	0x0360E8B8 CMP W3, 0x1
	0x0360E8BC B.LT 0x360E928
	0x0360E8C0 MOV W9, W3
	0x0360E8C4 MOV X8, X31
	0x0360E8C8 MOV X10, X9
	0x0360E8CC MOV X11, X0
	0x0360E8D0 LDR W12, [X11]
	0x0360E8D4 LDR W13, [X2], #0x4
	0x0360E8D8 SUBS X10, X10, 0x1
	0x0360E8DC ADD X8, X8, X12
	0x0360E8E0 SUB X8, X8, X13
	0x0360E8E4 STR W8, [X11], #0x4
	0x0360E8E8 SBFM X8, X8, 0x20, 0x3F
	0x0360E8EC B.NE 0x360E8D0
	0x0360E8F0 CBZ X8, 0x360E928
	0x0360E8F4 CMP W3, W1
	0x0360E8F8 B.GE 0x360E928
	0x0360E8FC SXTW X10, W1
	0x0360E900 ADD X11, X0, W3, 0x2, UXTW
	0x0360E904 ADD X9, X9, 0x1
	0x0360E908 LDR W12, [X11]
	0x0360E90C ADD X12, X8, X12
	0x0360E910 SBFM X8, X12, 0x20, 0x3F
	0x0360E914 STR W12, [X11], #0x4
	0x0360E918 CBZ X8, 0x360E928
	0x0360E91C CMP X9, X10
	0x0360E920 ADD X9, X9, 0x1
	0x0360E924 B.LT 0x360E908
	0x0360E928 RET
	0x0360E92C CMP W1, W3
	0x0360E930 B.GE 0x360E93C
	0x0360E934 MOVN W0, 0x0
	0x0360E938 RET
	0x0360E93C B.GT 0x360E964
	0x0360E940 SUB W8, W1, 0x1
	0x0360E944 TBNZ X8, 0x1F, 0x360E96C
	0x0360E948 LDR W9, [X0, W8, UXTW]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDD3000
	009 Move X23, 0xB27000
	010 Move W8, [X24+1032]
	011 Move X23, [X23+2368]
	012 Move X19, X3
	013 Move X20, X2
	014 Move X22, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xB27000
	021 Move X0, [X0+2368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1032], W8
	025 Move X0, [X23]
	026 Xor W23, W20, W21
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfEqual {45}
	030 Move TEMP, X23
	031 And TEMP, TEMP, -2147483648
	032 Compare TEMP, -2147483648
	033 JumpIfEqual {50}
	034 Move X0, X22
	035 Move W1, W21
	036 Move X2, X19
	037 Move W3, W20
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X24, [X31+16]
	043 Move X23, [X31+24]
	044 Move X30, [X31+64]
	045 Call 0x1C17DFC
	046 Move TEMP, X23
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfNotEqual {34}
	050 Subtract W3, W31, W20
	051 Move X0, X22
	052 Move W1, W21
	053 Move X2, X19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X30, [X31+64]
	061 Call BigInteger.Add, X0, X1, X2, X3
	062 Return X0

Method: System.Numerics.BigInteger Subtract(System.UInt32[] leftBits, System.Int32 leftSign, System.UInt32[] rightBits, System.Int32 rightSign)

Disassembly:
	0x0360E94C LDR W10, [X2, W8, UXTW]
	0x0360E950 CMP W9, W10
	0x0360E954 B.CC 0x360E934
	0x0360E958 CMP W9, W10
	0x0360E95C SUB W8, W8, 0x1
	0x0360E960 B.LS 0x360E944
	0x0360E964 MOVZ W0, 0x1
	0x0360E968 RET
	0x0360E96C MOV W0, W31
	0x0360E970 RET
	0x0360E974 STR X30, [X31 - 0x10]!
	0x0360E978 CBZ X0, 0x360E9C8
	0x0360E97C LDR W9, [X0 + 0x18]
	0x0360E980 MOV X8, X0
	0x0360E984 SUBS W11, W9, 0x1
	0x0360E988 B.MI 0x360E9BC
	0x0360E98C ADD X8, X8, W11, 0x2, UXTW
	0x0360E990 MOV X0, X31
	0x0360E994 MOV W10, W1
	0x0360E998 ADD X8, X8, 0x20
	0x0360E99C LDR W11, [X8], #0xFFFFFFFFFFFFFFFC
	0x0360E9A0 SUB W9, W9, 0x1
	0x0360E9A4 CMP W9, 0x0
	0x0360E9A8 BFM X11, X0, 0x20, 0x1F
	0x0360E9AC UDIV X12, X11, X10
	0x0360E9B0 MSUB X0, X12, X10, X11
	0x0360E9B4 B.GT 0x360E99C
	0x0360E9B8 B 0x360E9C0
	0x0360E9BC MOV W0, W31
	0x0360E9C0 LDR X30, [X31], #0x10
	0x0360E9C4 RET
	0x0360E9C8 BL 0x1C16F20
	0x0360E9CC STR X30, [X31 - 0x30]!
	0x0360E9D0 STP X22, X21, [X31 + 0x10]
	0x0360E9D4 STP X20, X19, [X31 + 0x20]
	0x0360E9D8 ADRP X21, 0xDD2000
	0x0360E9DC ADRP X22, 0xB2C000
	0x0360E9E0 LDRB W8, [X21 + 0x416]
	0x0360E9E4 LDR X22, [X22 + 0xE88]
	0x0360E9E8 MOV X19, X1
	0x0360E9EC MOV X20, X0
	0x0360E9F0 TBNZ X8, 0x0, 0x360EA14
	0x0360E9F4 ADRP X0, 0xB2C000
	0x0360E9F8 LDR X0, [X0 + 0xE88]
	0x0360E9FC BL 0x1C16CF4
	0x0360EA00 ADRP X0, 0xB0E000
	0x0360EA04 LDR X0, [X0 + 0xD08]
	0x0360EA08 BL 0x1C16CF4
	0x0360EA0C MOVZ W8, 0x1
	0x0360EA10 STRB W8, [X21 + 0x416]
	0x0360EA14 LDR X0, [X22]
	0x0360EA18 LDR W8, [X0 + 0xE0]
	0x0360EA1C CBNZ W8, 0x360EA24
	0x0360EA20 BL 0x1C16DFC
	0x0360EA24 MOV X0, X20
	0x0360EA28 BL 0x360EAA8
	0x0360EA2C CBZ X20, 0x360EAA0
	0x0360EA30 CBZ X19, 0x360EAA0
	0x0360EA34 ADRP X10, 0xB0E000
	0x0360EA38 LDR W8, [X20 + 0x18]
	0x0360EA3C LDR W9, [X19 + 0x18]
	0x0360EA40 LDR X10, [X10 + 0xD08]
	0x0360EA44 MOV X21, X0
	0x0360EA48 SUB W8, W8, W9
	0x0360EA4C LDR X0, [X10]
	0x0360EA50 ADD W1, W8, 0x1
	0x0360EA54 BL 0x1C16D6C
	0x0360EA58 CBZ X21, 0x360EAA0
	0x0360EA5C LDR W1, [X21 + 0x18]
	0x0360EA60 CBZ W1, 0x360EAA4
	0x0360EA64 LDR W3, [X19 + 0x18]
	0x0360EA68 CBZ W3, 0x360EAA4
	0x0360EA6C MOV X20, X0
	0x0360EA70 CBZ X0, 0x360EAA0
	0x0360EA74 LDR W5, [X20 + 0x18]
	0x0360EA78 CBZ W5, 0x360EAA4
	0x0360EA7C ADD X2, X19, 0x20
	0x0360EA80 ADD X0, X21, 0x20
	0x0360EA84 ADD X4, X20, 0x20
	0x0360EA88 BL 0x360EB24
	0x0360EA8C MOV X0, X20
	0x0360EA90 LDP X20, X19, [X31 + 0x20]
	0x0360EA94 LDP X22, X21, [X31 + 0x10]
	0x0360EA98 LDR X30, [X31], #0x30
	0x0360EA9C RET
	0x0360EAA0 BL 0x1C16F20
	0x0360EAA4 BL 0x1C16F28
	0x0360EAA8 STR X30, [X31 - 0x20]!
	0x0360EAAC STP X20, X19, [X31 + 0x10]
	0x0360EAB0 ADRP X20, 0xDD2000
	0x0360EAB4 LDRB W8, [X20 + 0x419]
	0x0360EAB8 MOV X19, X0
	0x0360EABC TBNZ X8, 0x0, 0x360EAD4
	0x0360EAC0 ADRP X0, 0xB0E000
	0x0360EAC4 LDR X0, [X0 + 0xD08]
	0x0360EAC8 BL 0x1C16CF4
	0x0360EACC MOVZ W8, 0x1
	0x0360EAD0 STRB W8, [X20 + 0x419]
	0x0360EAD4 CBZ X19, 0x360EB20
	0x0360EAD8 ADRP X8, 0xB0E000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0xDD3000
	009 Move W8, [X23+1033]
	010 Move W22, W3
	011 Move X20, X2
	012 Move W19, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xB2D000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move X0, 0xB27000
	022 Move X0, [X0+2368]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1033], W8
	026 Or X8, X21, X20
	027 Compare X8, 0
	028 JumpIfNotEqual {46}
	029 Move X8, 0xB27000
	030 Move X8, [X8+2368]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X8, W19
	037 Subtract X1, X8, W22
	038 Add X0, X31, 16
	039 Move [X31+16], X31
	040 Move [X31+24], X31
	041 Call BigInteger..ctor, X0, X1
	042 Move X8, [X31+16]
	043 Move X9, [X31+24]
	044 Move [X31], X8
	045 Move [X31+8], X9
	046 Compare X21, 0
	047 JumpIfEqual {72}
	048 Compare X20, 0
	049 JumpIfEqual {84}
	050 Move X22, 0xB2D000
	051 Move X22, [X22+3720]
	052 Move X0, [X22]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X21
	058 Move X1, X20
	059 Call BigIntegerCalculator.Compare, X0, X1
	060 Move X8, [X22]
	061 Move W22, W0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfEqual {102}
	065 Move TEMP, X22
	066 And TEMP, TEMP, -2147483648
	067 Compare TEMP, -2147483648
	068 JumpIfEqual {108}
	069 Move X0, X21
	070 Move X1, X20
	071 Call BigIntegerCalculator.Subtract, X0, X1
	072 Move X8, 0xB2D000
	073 Move X8, [X8+3720]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSNEG not yet implemented."
	076 Move X0, [X8]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X20
	082 Move W1, W21
	083 Call BigIntegerCalculator.Subtract, X0, X1
	084 Move X8, 0xB2D000
	085 Move X8, [X8+3720]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSNEG not yet implemented."
	088 Move X0, [X8]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move X0, X21
	094 Move W1, W20
	095 Call BigIntegerCalculator.Subtract, X0, X1
	096 Move X1, X0
	097 Move W2, W19
	098 ShiftRight W2, 31
	099 And W2, W2, 0x7FFFFFFF
	100 Move [X31], X31
	101 Move [X31+8], X31
	102 Move X0, X8
	103 Call 0x1C17DFC
	104 Move TEMP, X22
	105 And TEMP, TEMP, -2147483648
	106 Compare TEMP, -2147483648
	107 JumpIfNotEqual {69}
	108 Move X0, X20
	109 Move X1, X21
	110 Call BigIntegerCalculator.Subtract, X0, X1
	111 NotImplemented "Instruction ORN not yet implemented."
	112 Move X1, X0
	113 Move [X31], X31
	114 Move [X31+8], X31
	115 Move W2, W8
	116 ShiftRight W2, 31
	117 And W2, W2, 0x7FFFFFFF
	118 Add X0, X31, 0
	119 Call BigInteger..ctor, X0, X1, X2
	120 Move X0, [X31]
	121 Move X1, [X31+8]
	122 Move X20, [X31+64]
	123 Move X19, [X31+72]
	124 Move X22, [X31+48]
	125 Move X21, [X31+56]
	126 Move X30, [X31+32]
	127 Move X23, [X31+40]
	128 Add X31, X31, 80
	129 Return X0

Method: System.Numerics.BigInteger op_Implicit(System.Byte value)

Disassembly:
	0x0360ED08 B.LS 0x360ED14
	0x0360ED0C SUB X19, X19, 0x1
	0x0360ED10 B 0x360ECD8
	0x0360ED14 CBZ X19, 0x360ED6C
	0x0360ED18 LDR X0, [X27]
	0x0360ED1C LDR W8, [X0 + 0xE0]
	0x0360ED20 CBNZ W8, 0x360ED28
	0x0360ED24 BL 0x1C16DFC
	0x0360ED28 MOV W24, W20
	0x0360ED2C CMP W20, 0x1

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 And W1, W0, 255
	005 Add X0, X31, 0
	006 Move [X31], X31
	007 Call BigInteger..ctor, X0, X1
	008 Move X0, [X31]
	009 Move X1, [X31+8]
	010 Move X30, [X31+16]
	011 Add X31, X31, 32
	012 Return X0

Method: System.Numerics.BigInteger op_Implicit(System.Int32 value)

Disassembly:
	0x0360ED30 B.LT 0x360ED74
	0x0360ED34 LDP X11, X9, [X31]
	0x0360ED38 MOV X8, X31
	0x0360ED3C MOV X10, X25
	0x0360ED40 LDR W12, [X9], #0x4
	0x0360ED44 LDR W13, [X10]
	0x0360ED48 NOP
	0x0360ED4C MADD X8, X19, X12, X8
	0x0360ED50 UBFM X12, X8, 0x20, 0x3F
	0x0360ED54 SUBS W13, W13, W8

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move W1, W0
	005 Add X0, X31, 0
	006 Move [X31], X31
	007 Call BigInteger..ctor, X0, X1
	008 Move X0, [X31]
	009 Move X1, [X31+8]
	010 Move X30, [X31+16]
	011 Add X31, X31, 32
	012 Return X0

Method: System.Numerics.BigInteger op_Implicit(System.Int64 value)

Disassembly:
	0x0360D568 MOV X0, X2
	0x0360D56C MOV X1, X31
	0x0360D570 BL 0x333ACEC
	0x0360D574 MOV X3, X0
	0x0360D578 MOV X0, X19
	0x0360D57C MOV X1, X20
	0x0360D580 LDP X20, X19, [X31 + 0x10]
	0x0360D584 MOV X2, X21
	0x0360D588 LDP X30, X21, [X31], #0x20
	0x0360D58C B 0x360D4AC

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move X1, X0
	005 Add X0, X31, 0
	006 Move [X31], X31
	007 Call BigInteger..ctor, X0, X1
	008 Move X0, [X31]
	009 Move X1, [X31+8]
	010 Move X30, [X31+16]
	011 Add X31, X31, 32
	012 Return X0

Method: System.Int32 op_Explicit(System.Numerics.BigInteger value)

Disassembly:
	0x0360ED58 CINC X8, X12, CC
	0x0360ED5C SUBS X11, X11, 0x1
	0x0360ED60 STR W13, [X10], #0x4
	0x0360ED64 B.NE 0x360ED40
	0x0360ED68 B 0x360ED78
	0x0360ED6C MOV W24, W20
	0x0360ED70 B 0x360EDC8
	0x0360ED74 MOV W8, W31
	0x0360ED78 LDR X9, [X31 + 0x40]
	0x0360ED7C CMP W8, W9
	0x0360ED80 B.EQ 0x360EDC8
	0x0360ED84 LDR X0, [X27]
	0x0360ED88 LDR W8, [X0 + 0xE0]
	0x0360ED8C CBNZ W8, 0x360ED94
	0x0360ED90 BL 0x1C16DFC
	0x0360ED94 CMP W24, 0x1
	0x0360ED98 B.LT 0x360EDC4
	0x0360ED9C LDP X10, X9, [X31]
	0x0360EDA0 MOV X8, X31
	0x0360EDA4 LDR W11, [X25]
	0x0360EDA8 LDR W12, [X9], #0x4
	0x0360EDAC SUBS X10, X10, 0x1
	0x0360EDB0 ADD X8, X8, X11
	0x0360EDB4 ADD X8, X8, X12
	0x0360EDB8 STR W8, [X25], #0x4
	0x0360EDBC UBFM X8, X8, 0x20, 0x3F
	0x0360EDC0 B.NE 0x360EDA4
	0x0360EDC4 SUB X19, X19, 0x1
	0x0360EDC8 LDP W21, W8, [X31 + 0x34]
	0x0360EDCC LDR X25, [X31 + 0x28]
	0x0360EDD0 CBZ W8, 0x360EDE0
	0x0360EDD4 LDR X8, [X31 + 0x20]
	0x0360EDD8 LDR W9, [X31 + 0x4C]
	0x0360EDDC STR W19, [X8, W9, SXTW]
	0x0360EDE0 CMP W23, W21
	0x0360EDE4 B.GE 0x360EDEC
	0x0360EDE8 STR W31, [X25, W23, SXTW]
	0x0360EDEC CMP W22, W24
	0x0360EDF0 SUB W28, W28, 0x1
	0x0360EDF4 MOV W23, W22
	0x0360EDF8 B.GE 0x360EC38
	0x0360EDFC LDP X20, X19, [X31 + 0xA0]
	0x0360EE00 LDP X22, X21, [X31 + 0x90]
	0x0360EE04 LDP X24, X23, [X31 + 0x80]
	0x0360EE08 LDP X26, X25, [X31 + 0x70]
	0x0360EE0C LDP X28, X27, [X31 + 0x60]
	0x0360EE10 LDP X29, X30, [X31 + 0x50]
	0x0360EE14 ADD X31, X31, 0xB0
	0x0360EE18 RET
	0x0360EE1C STR X30, [X31 - 0x30]!
	0x0360EE20 STP X22, X21, [X31 + 0x10]
	0x0360EE24 STP X20, X19, [X31 + 0x20]
	0x0360EE28 ADRP X21, 0xDD2000
	0x0360EE2C ADRP X22, 0xB2C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD3000
	006 Move W8, [X21+1034]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB2D000
	014 Move X0, [X0+3784]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1034], W8
	018 Compare X20, 0
	019 JumpIfEqual {39}
	020 Move W8, [X20+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Compare W8, 0
	023 JumpIfEqual {63}
	024 Move W8, [X20+32]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W19, W8
	027 Move TEMP, X8
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfNotEqual {39}
	031 Call 0x1C17F30
	032 Move X8, 0xB2D000
	033 Move X8, [X8+3784]
	034 Move X1, [X8]
	035 Call 0x1C17DEC
	036 Or W9, W31, 0x80000001
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Subtract W19, W31, W8
	039 Move W0, W19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Move X0, 0xAE6000
	046 Move X0, [X0+2136]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X19, X0
	050 Move X0, 0xB1B000
	051 Move X0, [X0+464]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Move X2, X31
	056 Call OverflowException..ctor, X0, X1
	057 Move X0, 0xB2D000
	058 Move X0, [X0+3784]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC
	063 Call 0x1C17F28

Method: System.Numerics.BigInteger op_LeftShift(System.Numerics.BigInteger value, System.Int32 shift)

Disassembly:
	0x0360EE30 LDRB W8, [X21 + 0x417]
	0x0360EE34 LDR X22, [X22 + 0xE88]
	0x0360EE38 MOV X19, X1
	0x0360EE3C MOV X20, X0
	0x0360EE40 TBNZ X8, 0x0, 0x360EE58
	0x0360EE44 ADRP X0, 0xB2C000
	0x0360EE48 LDR X0, [X0 + 0xE88]
	0x0360EE4C BL 0x1C16CF4
	0x0360EE50 MOVZ W8, 0x1
	0x0360EE54 STRB W8, [X21 + 0x417]
	0x0360EE58 LDR X0, [X22]
	0x0360EE5C LDR W8, [X0 + 0xE0]
	0x0360EE60 CBNZ W8, 0x360EE68
	0x0360EE64 BL 0x1C16DFC
	0x0360EE68 MOV X0, X20
	0x0360EE6C BL 0x360EAA8
	0x0360EE70 CBZ X0, 0x360EEB4
	0x0360EE74 LDR W1, [X0 + 0x18]
	0x0360EE78 MOV X20, X0
	0x0360EE7C CBZ W1, 0x360EEB8
	0x0360EE80 CBZ X19, 0x360EEB4
	0x0360EE84 LDR W3, [X19 + 0x18]
	0x0360EE88 CBZ W3, 0x360EEB8
	0x0360EE8C ADD X0, X20, 0x20
	0x0360EE90 ADD X2, X19, 0x20
	0x0360EE94 MOV X4, X31
	0x0360EE98 MOV W5, W31
	0x0360EE9C BL 0x360EB24
	0x0360EEA0 MOV X0, X20
	0x0360EEA4 LDP X20, X19, [X31 + 0x20]
	0x0360EEA8 LDP X22, X21, [X31 + 0x10]
	0x0360EEAC LDR X30, [X31], #0x30
	0x0360EEB0 RET
	0x0360EEB4 BL 0x1C16F20
	0x0360EEB8 BL 0x1C16F28
	0x0360EEBC CBZ W0, 0x360EF2C
	0x0360EEC0 CMP W0, 0x10000
	0x0360EEC4 UBFM W8, W0, 0x10, 0xF
	0x0360EEC8 CSEL W8, W8, W0, CC
	0x0360EECC MOVZ W9, 0x8
	0x0360EED0 CSET W10, CC
	0x0360EED4 UBFM W12, W8, 0x18, 0x1F
	0x0360EED8 UBFM W11, W10, 0x1C, 0x1B
	0x0360EEDC BFM W9, W10, 0x1C, 0x0
	0x0360EEE0 UBFM W10, W8, 0x18, 0x17
	0x0360EEE4 CMP W12, 0x0
	0x0360EEE8 CSEL W8, W10, W8, EQ
	0x0360EEEC UBFM W12, W8, 0x1C, 0x1F
	0x0360EEF0 CSEL W9, W9, W11, EQ
	0x0360EEF4 UBFM W11, W8, 0x1C, 0x1B
	0x0360EEF8 CMP W12, 0x0
	0x0360EEFC CSEL W8, W11, W8, EQ
	0x0360EF00 ORR W10, W9, 0x4
	0x0360EF04 UBFM W12, W8, 0x1E, 0x1F
	0x0360EF08 CSEL W9, W10, W9, EQ
	0x0360EF0C UBFM W11, W8, 0x1E, 0x1D
	0x0360EF10 CMP W12, 0x0
	0x0360EF14 ORR W10, W9, 0x2
	0x0360EF18 CSEL W8, W11, W8, EQ
	0x0360EF1C CSEL W9, W10, W9, EQ
	0x0360EF20 ORN W8, W31, W8, 0x0
	0x0360EF24 ADD W0, W9, W8, 0x1F, LSR
	0x0360EF28 RET
	0x0360EF2C MOVZ W0, 0x20
	0x0360EF30 RET
	0x0360EF34 MOV W8, W3
	0x0360EF38 MOV W9, W4
	0x0360EF3C MUL X10, X8, X0
	0x0360EF40 MUL X8, X9, X0
	0x0360EF44 ADD X9, X10, X8, 0x20, LSR
	0x0360EF48 CMP X9, X1
	0x0360EF4C B.CC 0x360EF68
	0x0360EF50 B.LS 0x360EF5C
	0x0360EF54 MOVZ W0, 0x1
	0x0360EF58 RET
	0x0360EF5C AND X8, X8, 0x0
	0x0360EF60 CMP X8, W2, UXTW
	0x0360EF64 B.CS 0x360EF70
	0x0360EF68 MOV W0, W31
	0x0360EF6C RET
	0x0360EF70 MOV W9, W2
	0x0360EF74 CMP X8, X9
	0x0360EF78 CSET W0, HI
	0x0360EF7C RET
	0x0360EF80 CMP W3, 0x1
	0x0360EF84 B.LT 0x360EFBC
	0x0360EF88 MOV X8, X31
	0x0360EF8C MOV W9, W3
	0x0360EF90 LDR W10, [X2], #0x4
	0x0360EF94 LDR W11, [X0]
	0x0360EF98 NOP
	0x0360EF9C MADD X8, X10, X4, X8
	0x0360EFA0 UBFM X10, X8, 0x20, 0x3F
	0x0360EFA4 SUBS W11, W11, W8
	0x0360EFA8 CINC X8, X10, CC
	0x0360EFAC SUBS X9, X9, 0x1
	0x0360EFB0 STR W11, [X0], #0x4
	0x0360EFB4 B.NE 0x360EF90
	0x0360EFB8 B 0x360EFC0
	0x0360EFBC MOV W8, W31
	0x0360EFC0 MOV W0, W8
	0x0360EFC4 RET
	0x0360EFC8 CMP W3, 0x1
	0x0360EFCC B.LT 0x360F000
	0x0360EFD0 MOV X8, X0
	0x0360EFD4 MOV X0, X31
	0x0360EFD8 MOV W9, W3
	0x0360EFDC LDR W10, [X8]
	0x0360EFE0 LDR W11, [X2], #0x4
	0x0360EFE4 SUBS X9, X9, 0x1
	0x0360EFE8 ADD X10, X0, X10
	0x0360EFEC ADD X10, X10, X11
	0x0360EFF0 STR W10, [X8], #0x4
	0x0360EFF4 UBFM X0, X10, 0x20, 0x3F
	0x0360EFF8 B.NE 0x360EFDC
	0x0360EFFC RET
	0x0360F000 MOV W0, W31
	0x0360F004 RET
	0x0360F008 MOV W8, W1
	0x0360F00C CBZ W0, 0x360F03C
	0x0360F010 TBZ X0, 0x0, 0x360F020
	0x0360F014 MUL X9, X2, X3
	0x0360F018 UDIV X10, X9, X8
	0x0360F01C MSUB X3, X10, X8, X9
	0x0360F020 CMP W0, 0x1
	0x0360F024 B.EQ 0x360F03C
	0x0360F028 MUL X9, X2, X2
	0x0360F02C UDIV X10, X9, X8
	0x0360F030 UBFM W0, W0, 0x1, 0x1F
	0x0360F034 MSUB X2, X10, X8, X9
	0x0360F038 CBNZ W0, 0x360F010
	0x0360F03C UDIV X9, X3, X8
	0x0360F040 MSUB W0, W9, W8, W3
	0x0360F044 RET
	0x0360F048 STP X30, X23, [X31 - 0x30]!
	0x0360F04C STP X22, X21, [X31 + 0x10]
	0x0360F050 STP X20, X19, [X31 + 0x20]
	0x0360F054 ADRP X23, 0xDD1000
	0x0360F058 LDRB W8, [X23 + 0x41E]
	0x0360F05C MOV X19, X3
	0x0360F060 MOV X20, X2
	0x0360F064 MOV W22, W1
	0x0360F068 MOV X21, X0
	0x0360F06C TBNZ X8, 0x0, 0x360F084
	0x0360F070 ADRP X0, 0xB2B000
	0x0360F074 LDR X0, [X0 + 0xE88]
	0x0360F078 BL 0x1C16CF4
	0x0360F07C MOVZ W8, 0x1
	0x0360F080 STRB W8, [X23 + 0x41E]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X22, 0xDD3000
	009 Move W8, [X22+1035]
	010 Move W20, W2
	011 Move X19, X1
	012 Move X21, X0
	013 Move [X31+16], X0
	014 Move [X31+24], X1
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xB27000
	020 Move X0, [X0+2368]
	021 Call 0x1C17CF4
	022 Move X0, 0xB0F000
	023 Move X0, [X0+3336]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1035], W8
	027 Move W8, 0x80000000
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X31+8], X31
	030 Move [X31+4], W31
	031 Compare W20, 0
	032 JumpIfNotEqual {49}
	033 Move V0, [X31+1]
	034 Move [X31+2], V0
	035 Move X8, 0xB27000
	036 Move X8, [X8+2368]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move TEMP, 0x80000000
	043 Not TEMP
	044 Move W2, TEMP
	045 Move X0, X21
	046 Move X1, X19
	047 Call BigInteger.op_RightShift, X0, X1
	048 Move W2, 1
	049 Move X8, 0xB27000
	050 Move X8, [X8+2368]
	051 Move TEMP, X20
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfEqual {109}
	055 Move X0, [X8]
	056 Move W22, W20
	057 ShiftRight W22, 5
	058 And W22, W22, 0x7FFFFFFF
	059 And W23, W20, 31
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Add X0, X31, 16
	065 Add X1, X31, 8
	066 Add X2, X31, 4
	067 Call BigInteger.GetPartsForBitManipulation, X0, X1, X2
	068 Move X8, 0xB0F000
	069 Move W21, [X31+4]
	070 Move X8, [X8+3336]
	071 Move W19, W0
	072 Move X0, [X8]
	073 Add W8, W22, W21
	074 Add W1, W8, 1
	075 Call 0x1C17D6C
	076 Move X1, X0
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Compare W23, 0
	079 Invalid "Jump target not found in method."
	080 Move X13, [X31+8]
	081 Compare X13, 0
	082 JumpIfEqual {168}
	083 Move W11, [X13+24]
	084 Subtract W12, W31, W20
	085 Move W10, W22
	086 Move X9, X31
	087 Move W8, W31
	088 And W12, W12, 31
	089 Add X13, X13, 32
	090 Move X14, X10
	091 ShiftRight X14, 32
	092 And X14, X14, 0x7FFFFFFF
	093 Move X15, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Compare X1, 0
	096 JumpIfEqual {168}
	097 Move W16, [X1+24]
	098 Add X17, X10, X9
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W16, [X13]
	101 Add X9, X9, 1
	102 Add X17, X1, X14
	103 NotImplemented "Instruction CMP not yet implemented."
	104 NotImplemented "Instruction LSLV not yet implemented."
	105 Or W0, W0, W8
	106 NotImplemented "Instruction LSRV not yet implemented."
	107 Add X14, X14, X15
	108 Move [X17+32], W0
	109 Move X0, [X8]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Subtract W2, W31, W20
	115 Move X0, X21
	116 Move X1, X19
	117 Call BigInteger.op_RightShift, X0, X1
	118 Move [X31+32], X0
	119 Move [X31+40], X1
	120 Move X11, [X31+8]
	121 Compare X11, 0
	122 JumpIfEqual {168}
	123 Move W10, [X11+24]
	124 Move W9, W22
	125 Move X8, X31
	126 Add X11, X11, 32
	127 Move X12, X9
	128 ShiftRight X12, 32
	129 And X12, X12, 0x7FFFFFFF
	130 Move X13, 1
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Compare X1, 0
	133 JumpIfEqual {168}
	134 Move W14, [X1+24]
	135 Add X15, X9, X8
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move W14, [X11]
	138 Add X8, X8, 1
	139 Add X15, X1, X12
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Add X12, X12, X13
	142 Move [X15+32], W14
	143 Compare X1, 0
	144 JumpIfEqual {168}
	145 Move W8, W31
	146 Move W21, W31
	147 Move W10, [X1+24]
	148 Add W9, W21, W22
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Add X9, X1, W9
	151 Move [X9+32], W8
	152 And W2, W19, 1
	153 Add X0, X31, 32
	154 Move [X31+32], X31
	155 Move [X31+40], X31
	156 Call BigInteger..ctor, X0, X1, X2
	157 Move X0, [X31+32]
	158 Move X1, [X31+40]
	159 Move X20, [X31+80]
	160 Move X19, [X31+88]
	161 Move X22, [X31+64]
	162 Move X21, [X31+72]
	163 Move X30, [X31+48]
	164 Move X23, [X31+56]
	165 Add X31, X31, 96
	166 Return X0
	167 Call 0x1C17F28
	168 Call 0x1C17F20

Method: System.Numerics.BigInteger op_RightShift(System.Numerics.BigInteger value, System.Int32 shift)

Disassembly:
	0x0360F084 CBZ X21, 0x360F164
	0x0360F088 LDR X8, [X21 + 0x18]
	0x0360F08C MOV X9, INVALID
	0x0360F090 MOV W22, W22
	0x0360F094 AND X10, X8, 0x0
	0x0360F098 ADD X9, X9, X10, 0x20, LSL
	0x0360F09C CMP X9, 0x1
	0x0360F0A0 SBFM X9, X9, 0x20, 0x3F
	0x0360F0A4 B.LT 0x360F0F4
	0x0360F0A8 MOV X11, X31
	0x0360F0AC CMP X11, X10
	0x0360F0B0 B.EQ 0x360F160
	0x0360F0B4 ADD X12, X21, X11, 0x2, LSL
	0x0360F0B8 LDR W12, [X12 + 0x20]
	0x0360F0BC MOVZ W13, 0x20
	0x0360F0C0 TBZ X12, 0x0, 0x360F0D0
	0x0360F0C4 MUL X14, X20, X19
	0x0360F0C8 UDIV X15, X14, X22
	0x0360F0CC MSUB X19, X15, X22, X14
	0x0360F0D0 MUL X14, X20, X20
	0x0360F0D4 UDIV X15, X14, X22
	0x0360F0D8 SUBS W13, W13, 0x1
	0x0360F0DC MSUB X20, X15, X22, X14
	0x0360F0E0 UBFM W12, W12, 0x1, 0x1F
	0x0360F0E4 B.NE 0x360F0C0
	0x0360F0E8 ADD X11, X11, 0x1
	0x0360F0EC CMP X11, X9
	0x0360F0F0 B.NE 0x360F0AC
	0x0360F0F4 CBZ W8, 0x360F160
	0x0360F0F8 ADRP X8, 0xB2B000
	0x0360F0FC LDR X8, [X8 + 0xE88]
	0x0360F100 LDR X0, [X8]
	0x0360F104 ADD X8, X21, X9, 0x2, LSL
	0x0360F108 LDR W21, [X8 + 0x20]
	0x0360F10C LDR W9, [X0 + 0xE0]
	0x0360F110 CBNZ W9, 0x360F118
	0x0360F114 BL 0x1C16DFC
	0x0360F118 CBZ W21, 0x360F148
	0x0360F11C TBZ X21, 0x0, 0x360F12C
	0x0360F120 MUL X8, X19, X20
	0x0360F124 UDIV X9, X8, X22
	0x0360F128 MSUB X19, X9, X22, X8
	0x0360F12C CMP W21, 0x1
	0x0360F130 B.EQ 0x360F148
	0x0360F134 MUL X8, X20, X20
	0x0360F138 UDIV X9, X8, X22
	0x0360F13C UBFM W21, W21, 0x1, 0x1F
	0x0360F140 MSUB X20, X9, X22, X8
	0x0360F144 CBNZ W21, 0x360F11C
	0x0360F148 UDIV X8, X19, X22
	0x0360F14C MSUB W0, W8, W22, W19
	0x0360F150 LDP X20, X19, [X31 + 0x20]
	0x0360F154 LDP X22, X21, [X31 + 0x10]
	0x0360F158 LDP X30, X23, [X31], #0x30
	0x0360F15C RET
	0x0360F160 BL 0x1C16F28
	0x0360F164 BL 0x1C16F20
	0x0360F168 STP X30, X23, [X31 - 0x30]!
	0x0360F16C STP X22, X21, [X31 + 0x10]
	0x0360F170 STP X20, X19, [X31 + 0x20]
	0x0360F174 ADRP X22, 0xDD1000
	0x0360F178 ADRP X23, 0xB0D000
	0x0360F17C LDRB W8, [X22 + 0x42C]
	0x0360F180 LDR X23, [X23 + 0xD08]
	0x0360F184 MOV W19, W2
	0x0360F188 MOV W21, W1
	0x0360F18C MOV X20, X0
	0x0360F190 TBNZ X8, 0x0, 0x360F1A8
	0x0360F194 ADRP X0, 0xB0D000
	0x0360F198 LDR X0, [X0 + 0xD08]
	0x0360F19C BL 0x1C16CF4
	0x0360F1A0 MOVZ W8, 0x1
	0x0360F1A4 STRB W8, [X22 + 0x42C]
	0x0360F1A8 LDR X0, [X23]
	0x0360F1AC MOV W1, W21
	0x0360F1B0 BL 0x1C16D6C
	0x0360F1B4 CMP W19, 0x0
	0x0360F1B8 CSET W8, NE
	0x0360F1BC STR X0, [X20]
	0x0360F1C0 STR W8, [X20 + 0x8]
	0x0360F1C4 CBZ X0, 0x360F1E4
	0x0360F1C8 LDR W8, [X0 + 0x18]
	0x0360F1CC CBZ W8, 0x360F1E8
	0x0360F1D0 STR W19, [X0 + 0x20]
	0x0360F1D4 LDP X20, X19, [X31 + 0x20]
	0x0360F1D8 LDP X22, X21, [X31 + 0x10]
	0x0360F1DC LDP X30, X23, [X31], #0x30
	0x0360F1E0 RET
	0x0360F1E4 BL 0x1C16F20
	0x0360F1E8 BL 0x1C16F28
	0x0360F1EC SUB X31, X31, 0x80
	0x0360F1F0 STR X30, [X31 + 0x50]
	0x0360F1F4 STP X22, X21, [X31 + 0x60]
	0x0360F1F8 STP X20, X19, [X31 + 0x70]
	0x0360F1FC ADRP X22, 0xDD1000
	0x0360F200 LDRB W8, [X22 + 0x424]
	0x0360F204 MOV X19, X2
	0x0360F208 MOV X21, X1
	0x0360F20C MOV W20, W0
	0x0360F210 TBNZ X8, 0x0, 0x360F228
	0x0360F214 ADRP X0, 0xB2B000
	0x0360F218 LDR X0, [X0 + 0xE88]
	0x0360F21C BL 0x1C16CF4
	0x0360F220 MOVZ W8, 0x1
	0x0360F224 STRB W8, [X22 + 0x424]
	0x0360F228 MOVI V0.2D, 0x0
	0x0360F22C STP X31, X31, [X31 + 0x40]
	0x0360F230 STP X31, X31, [X31 + 0x30]
	0x0360F234 STR X31, [X31 + 0x20]
	0x0360F238 STP V0, V0, [X31]
	0x0360F23C LDR X8, [X19]
	0x0360F240 CBZ X8, 0x360F310
	0x0360F244 LDR W22, [X8 + 0x18]
	0x0360F248 ADD X0, X31, 0x40
	0x0360F24C MOV W2, W31
	0x0360F250 MOV W1, W22
	0x0360F254 BL 0x360F168
	0x0360F258 ADD X0, X31, 0x30
	0x0360F25C MOVZ W2, 0x1
	0x0360F260 MOV W1, W22
	0x0360F264 BL 0x360F168
	0x0360F268 CBZ X21, 0x360F310
	0x0360F26C ADRP X22, 0xB2B000
	0x0360F270 LDR X22, [X22 + 0xE88]
	0x0360F274 LDR X0, [X22]
	0x0360F278 LDR W8, [X0 + 0xE0]
	0x0360F27C CBNZ W8, 0x360F288
	0x0360F280 BL 0x1C16DFC
	0x0360F284 LDR X0, [X22]
	0x0360F288 LDR X8, [X0 + 0xB8]
	0x0360F28C LDR W9, [X21 + 0x18]
	0x0360F290 LDR W8, [X8]
	0x0360F294 CMP W8, W9
	0x0360F298 B.LE 0x360F2C4
	0x0360F29C LDR W8, [X0 + 0xE0]
	0x0360F2A0 CBNZ W8, 0x360F2A8
	0x0360F2A4 BL 0x1C16DFC
	0x0360F2A8 ADD X3, X31, 0x30
	0x0360F2AC ADD X4, X31, 0x40
	0x0360F2B0 MOV W0, W20
	0x0360F2B4 MOV X1, X21
	0x0360F2B8 MOV X2, X19
	0x0360F2BC BL 0x360F88C
	0x0360F2C0 B 0x360F2F8
	0x0360F2C4 ADD X0, X31, 0x0
	0x0360F2C8 MOV X1, X21
	0x0360F2CC BL 0x360F640
	0x0360F2D0 LDR X0, [X22]
	0x0360F2D4 LDR W8, [X0 + 0xE0]
	0x0360F2D8 CBNZ W8, 0x360F2E0
	0x0360F2DC BL 0x1C16DFC
	0x0360F2E0 ADD X1, X31, 0x0
	0x0360F2E4 ADD X3, X31, 0x30
	0x0360F2E8 ADD X4, X31, 0x40
	0x0360F2EC MOV W0, W20
	0x0360F2F0 MOV X2, X19
	0x0360F2F4 BL 0x360F908
	0x0360F2F8 LDR X0, [X31 + 0x30]
	0x0360F2FC LDP X20, X19, [X31 + 0x70]
	0x0360F300 LDP X22, X21, [X31 + 0x60]
	0x0360F304 LDR X30, [X31 + 0x50]
	0x0360F308 ADD X31, X31, 0x80
	0x0360F30C RET
	0x0360F310 BL 0x1C16F20
	0x0360F314 STR X30, [X31 - 0x40]!
	0x0360F318 STP X24, X23, [X31 + 0x10]
	0x0360F31C STP X22, X21, [X31 + 0x20]
	0x0360F320 STP X20, X19, [X31 + 0x30]
	0x0360F324 ADRP X23, 0xDD1000
	0x0360F328 ADRP X24, 0xB0D000
	0x0360F32C ADRP X22, 0xB2B000
	0x0360F330 LDRB W8, [X23 + 0x42D]
	0x0360F334 LDR X24, [X24 + 0xD08]
	0x0360F338 LDR X22, [X22 + 0xE88]
	0x0360F33C MOV X19, X2
	0x0360F340 MOV W21, W1
	0x0360F344 MOV X20, X0
	0x0360F348 TBNZ X8, 0x0, 0x360F36C
	0x0360F34C ADRP X0, 0xB2B000
	0x0360F350 LDR X0, [X0 + 0xE88]
	0x0360F354 BL 0x1C16CF4
	0x0360F358 ADRP X0, 0xB0D000
	0x0360F35C LDR X0, [X0 + 0xD08]
	0x0360F360 BL 0x1C16CF4
	0x0360F364 MOVZ W8, 0x1
	0x0360F368 STRB W8, [X23 + 0x42D]
	0x0360F36C LDR X0, [X24]
	0x0360F370 MOV W1, W21
	0x0360F374 BL 0x1C16D6C
	0x0360F378 STR X0, [X20]
	0x0360F37C LDR X0, [X22]
	0x0360F380 LDR W8, [X0 + 0xE0]
	0x0360F384 CBNZ W8, 0x360F38C
	0x0360F388 BL 0x1C16DFC
	0x0360F38C MOV X0, X19
	0x0360F390 BL 0x360FC7C
	0x0360F394 LDR X2, [X20]
	0x0360F398 MOV W4, W0
	0x0360F39C STR W0, [X20 + 0x8]
	0x0360F3A0 MOV X0, X19
	0x0360F3A4 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X22, 0xDD2000
	010 Move W8, [X22+1036]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move [X31+16], X0
	015 Move [X31+24], X1
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xB26000
	021 Move X0, [X0+2368]
	022 Call 0x1C17CF4
	023 Move X0, 0xB0E000
	024 Move X0, [X0+3336]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1036], W8
	028 Move W8, 0x80000000
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move [X31+56], X31
	031 Move [X31+12], W31
	032 Compare W21, 0
	033 JumpIfNotEqual {50}
	034 Move V0, [X31+1]
	035 Move [X31+2], V0
	036 Move X8, 0xB26000
	037 Move X8, [X8+2368]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move TEMP, 0x80000000
	044 Not TEMP
	045 Move W2, TEMP
	046 Move X0, X20
	047 Move X1, X19
	048 Call BigInteger.op_LeftShift, X0, X1
	049 Move W2, 1
	050 Move TEMP, X21
	051 And TEMP, TEMP, -2147483648
	052 Compare TEMP, -2147483648
	053 JumpIfEqual {150}
	054 Move X20, 0xB26000
	055 Move X20, [X20+2368]
	056 Move X0, [X20]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Add X0, X31, 16
	062 Add X1, X31, 56
	063 Add X2, X31, 12
	064 Call BigInteger.GetPartsForBitManipulation, X0, X1, X2
	065 Move W22, [X31+12]
	066 Move W19, W0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {89}
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X8, 0xB0E000
	073 Move X8, [X8+3336]
	074 Move W1, W22
	075 Move X0, [X8]
	076 Call 0x1C17D6C
	077 Move X8, [X31+56]
	078 Move X20, X0
	079 Move W1, W31
	080 Move X2, X20
	081 Move X0, X8
	082 Move W3, W31
	083 Move W4, W22
	084 Move X5, X31
	085 Call Array.Copy, X0, X1, X2, X3, X4
	086 Move X0, X20
	087 Move [X31+56], X20
	088 Call NumericsHelpers.DangerousMakeTwosComplement, X0
	089 Move X8, 0xB0E000
	090 Move X8, [X8+3336]
	091 Move W23, W21
	092 ShiftRight W23, 5
	093 And W23, W23, 0x7FFFFFFF
	094 And W24, W21, 31
	095 Move X0, [X8]
	096 Subtract W8, W22, W23
	097 NotImplemented "Instruction BIC not yet implemented."
	098 Call 0x1C17D6C
	099 Move X20, X0
	100 Subtract W10, W22, 1
	101 Compare W24, 0
	102 JumpIfEqual {163}
	103 Subtract W8, W10, W23
	104 Move X15, [X31+56]
	105 Compare X15, 0
	106 JumpIfEqual {228}
	107 Move W11, [X15+24]
	108 Subtract W13, W31, W21
	109 Move TEMP, 0
	110 Not TEMP
	111 Move W14, TEMP
	112 Move W9, W10
	113 Add X16, X20, W8
	114 Move W17, W31
	115 Move X9, W9
	116 Move W10, W10
	117 And W12, W13, 31
	118 NotImplemented "Instruction LSLV not yet implemented."
	119 Add X14, X16, 32
	120 Add X15, X15, 32
	121 Subtract W16, W31, W23
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W0, [X15]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction CSET not yet implemented."
	126 NotImplemented "Instruction ORN not yet implemented."
	127 Move TEMP, X1
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {138}
	131 Compare X20, 0
	132 JumpIfEqual {228}
	133 Move W17, [X20+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 NotImplemented "Instruction LSRV not yet implemented."
	136 Or W17, W17, W13
	137 Move [X14], W17
	138 Compare X20, 0
	139 JumpIfEqual {228}
	140 Move W2, [X20+24]
	141 Add X1, X16, X9
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction LSRV not yet implemented."
	144 Or W17, W2, W17
	145 Add X1, X20, W1
	146 Move [X1+32], W17
	147 Subtract X9, X9, 1
	148 NotImplemented "Instruction CMP not yet implemented."
	149 NotImplemented "Instruction LSLV not yet implemented."
	150 Move X8, 0xB26000
	151 Move X8, [X8+2368]
	152 Move X0, [X8]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Subtract W2, W31, W21
	158 Move X0, X20
	159 Move X1, X19
	160 Call BigInteger.op_LeftShift, X0, X1
	161 Move [X31+32], X0
	162 Move [X31+40], X1
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X11, [X31+56]
	165 Compare X11, 0
	166 JumpIfEqual {228}
	167 Move W8, [X11+24]
	168 Move X9, W10
	169 Subtract W10, W31, W23
	170 Add X11, X11, 32
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Compare X20, 0
	173 JumpIfEqual {228}
	174 Move W13, [X20+24]
	175 Add X12, X10, X9
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move W13, [X11]
	178 Subtract X9, X9, 1
	179 Add X12, X20, W12
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move [X12+32], W13
	182 Move TEMP, X19
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfNotEqual {188}
	186 Move X0, X20
	187 Call NumericsHelpers.DangerousMakeTwosComplement, X0
	188 And W2, W19, 1
	189 Add X0, X31, 32
	190 Move X1, X20
	191 Move [X31+32], X31
	192 Move [X31+40], X31
	193 Call BigInteger..ctor, X0, X1, X2
	194 Move X0, [X31+32]
	195 Move X1, [X31+40]
	196 Move X20, [X31+96]
	197 Move X19, [X31+104]
	198 Move X22, [X31+80]
	199 Move X21, [X31+88]
	200 Move X24, [X31+64]
	201 Move X23, [X31+72]
	202 Move X30, [X31+48]
	203 Add X31, X31, 112
	204 Return X0
	205 Move X0, [X20]
	206 Move W8, [X0+224]
	207 Compare W8, 0
	208 JumpIfNotEqual {210}
	209 Call 0x1C17DFC
	210 Move X19, 0xDD2000
	211 Move W8, [X19+1106]
	212 Compare W8, 0
	213 JumpIfNotEqual {219}
	214 Move X0, 0xB26000
	215 Move X0, [X0+2368]
	216 Call 0x1C17CF4
	217 Move W8, 1
	218 Move [X19+1106], W8
	219 Move X0, [X20]
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {225}
	223 Call 0x1C17DFC
	224 Move X0, [X20]
	225 Move X8, [X0+184]
	226 Move V0, [X8+3]
	227 Call 0x1C17F28
	228 Call 0x1C17F20

Method: System.Numerics.BigInteger op_Addition(System.Numerics.BigInteger left, System.Numerics.BigInteger right)

Disassembly:
	0x0360F460 LDR X8, [X0 + 0xB8]
	0x0360F464 LDR W9, [X21 + 0x18]
	0x0360F468 LDR W8, [X8]
	0x0360F46C CMP W8, W9
	0x0360F470 B.LE 0x360F49C
	0x0360F474 LDR W8, [X0 + 0xE0]
	0x0360F478 CBNZ W8, 0x360F480
	0x0360F47C BL 0x1C16DFC
	0x0360F480 ADD X3, X31, 0x30
	0x0360F484 ADD X4, X31, 0x40
	0x0360F488 MOV X0, X20
	0x0360F48C MOV X1, X21
	0x0360F490 MOV X2, X19
	0x0360F494 BL 0x360F508
	0x0360F498 B 0x360F4D0
	0x0360F49C ADD X0, X31, 0x0
	0x0360F4A0 MOV X1, X21
	0x0360F4A4 BL 0x360F640
	0x0360F4A8 LDR X0, [X22]
	0x0360F4AC LDR W8, [X0 + 0xE0]
	0x0360F4B0 CBNZ W8, 0x360F4B8
	0x0360F4B4 BL 0x1C16DFC
	0x0360F4B8 ADD X1, X31, 0x0
	0x0360F4BC ADD X3, X31, 0x30
	0x0360F4C0 ADD X4, X31, 0x40
	0x0360F4C4 MOV X0, X20
	0x0360F4C8 MOV X2, X19
	0x0360F4CC BL 0x360F744
	0x0360F4D0 LDR X0, [X31 + 0x30]
	0x0360F4D4 LDP X20, X19, [X31 + 0x70]
	0x0360F4D8 LDP X22, X21, [X31 + 0x60]
	0x0360F4DC LDR X30, [X31 + 0x50]
	0x0360F4E0 ADD X31, X31, 0x80
	0x0360F4E4 RET
	0x0360F4E8 BL 0x1C16F20
	0x0360F4EC STR X30, [X31 - 0x10]!
	0x0360F4F0 LDR X8, [X0]
	0x0360F4F4 CBZ X8, 0x360F504
	0x0360F4F8 LDR W0, [X8 + 0x18]
	0x0360F4FC LDR X30, [X31], #0x10
	0x0360F500 RET
	0x0360F504 BL 0x1C16F20
	0x0360F508 STR X30, [X31 - 0x50]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDD2000
	009 Move X23, 0xB26000
	010 Move W8, [X24+1037]
	011 Move X23, [X23+2368]
	012 Move X19, X3
	013 Move X20, X2
	014 Move X22, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xB26000
	021 Move X0, [X0+2368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1037], W8
	025 Move X0, [X23]
	026 Xor W23, W20, W21
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfEqual {47}
	030 Move TEMP, X23
	031 And TEMP, TEMP, -2147483648
	032 Compare TEMP, -2147483648
	033 JumpIfEqual {52}
	034 Move X0, X22
	035 Move W1, W21
	036 Move X2, X19
	037 Move W3, W20
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X24, [X31+16]
	043 Move X23, [X31+24]
	044 Move X30, [X31+64]
	045 Call BigInteger.Add, X0, X1, X2, X3
	046 Return X0
	047 Call 0x1C17DFC
	048 Move TEMP, X23
	049 And TEMP, TEMP, -2147483648
	050 Compare TEMP, -2147483648
	051 JumpIfNotEqual {34}
	052 Subtract W3, W31, W20
	053 Move X0, X22
	054 Move W1, W21
	055 Move X2, X19
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move X30, [X31+64]
	063 Call BigInteger.Subtract, X0, X1, X2, X3
	064 Return X0

Method: System.Boolean op_GreaterThanOrEqual(System.Numerics.BigInteger left, System.Numerics.BigInteger right)

Disassembly:
	0x0360F50C STP X26, X25, [X31 + 0x10]
	0x0360F510 STP X24, X23, [X31 + 0x20]
	0x0360F514 STP X22, X21, [X31 + 0x30]
	0x0360F518 STP X20, X19, [X31 + 0x40]
	0x0360F51C ADRP X24, 0xDD1000
	0x0360F520 LDRB W8, [X24 + 0x425]
	0x0360F524 MOV X19, X4
	0x0360F528 MOV X20, X3
	0x0360F52C MOV X21, X2
	0x0360F530 MOV X22, X1
	0x0360F534 MOV X23, X0
	0x0360F538 TBNZ X8, 0x0, 0x360F550
	0x0360F53C ADRP X0, 0xB2B000
	0x0360F540 LDR X0, [X0 + 0xE88]
	0x0360F544 BL 0x1C16CF4
	0x0360F548 MOVZ W8, 0x1
	0x0360F54C STRB W8, [X24 + 0x425]
	0x0360F550 CBZ X23, 0x360F63C
	0x0360F554 LDR W8, [X23 + 0x18]
	0x0360F558 MOV X9, INVALID
	0x0360F55C ADD X9, X9, X8, 0x20, LSL
	0x0360F560 CMP X9, 0x1
	0x0360F564 B.LT 0x360F630
	0x0360F568 MOV X24, X31
	0x0360F56C CMP X24, W8, UXTW
	0x0360F570 B.CS 0x360F638
	0x0360F574 ADD X8, X23, X24, 0x2, LSL
	0x0360F578 LDR W25, [X8 + 0x20]
	0x0360F57C MOVZ W26, 0x20
	0x0360F580 TBZ X25, 0x0, 0x360F5A0
	0x0360F584 MOV X0, X20
	0x0360F588 MOV X1, X21

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X1
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xDD2000
	009 Move [X31], X0
	010 Move X21, 0xB26000
	011 Move W8, [X22+1038]
	012 Move X21, [X21+2368]
	013 Move X19, X3
	014 Move X20, X2
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xB26000
	020 Move X0, [X0+2368]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1038], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X0, X31, 0
	030 Move X1, X20
	031 Move X2, X19
	032 Call BigInteger.CompareTo, X0, X1
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X30, [X31+16]
	038 NotImplemented "Instruction ORN not yet implemented."
	039 Move W0, W8
	040 ShiftRight W0, 31
	041 And W0, W0, 0x7FFFFFFF
	042 Add X31, X31, 64
	043 Return X0

Method: System.Boolean op_LessThan(System.Numerics.BigInteger left, System.Int64 right)

Disassembly:
	0x0360F58C MOV X2, X19
	0x0360F590 BL 0x360F994
	0x0360F594 MOV X0, X20
	0x0360F598 MOV X1, X22
	0x0360F59C BL 0x360FAC4
	0x0360F5A0 MOV X0, X21
	0x0360F5A4 MOV X1, X19
	0x0360F5A8 BL 0x360FB90
	0x0360F5AC MOV X0, X21
	0x0360F5B0 MOV X1, X22
	0x0360F5B4 BL 0x360FAC4
	0x0360F5B8 SUBS W26, W26, 0x1
	0x0360F5BC UBFM W25, W25, 0x1, 0x1F
	0x0360F5C0 B.NE 0x360F580
	0x0360F5C4 LDR X8, [X23 + 0x18]
	0x0360F5C8 ADD X24, X24, 0x1
	0x0360F5CC SUB W9, W8, 0x1
	0x0360F5D0 CMP X24, W9, SXTW
	0x0360F5D4 AND X8, X8, 0x0
	0x0360F5D8 B.LT 0x360F56C
	0x0360F5DC SXTW X9, W9
	0x0360F5E0 CBZ W8, 0x360F638
	0x0360F5E4 ADRP X8, 0xB2B000
	0x0360F5E8 LDR X8, [X8 + 0xE88]
	0x0360F5EC LDR X0, [X8]
	0x0360F5F0 ADD X8, X23, X9, 0x2, LSL
	0x0360F5F4 LDR W23, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xDD2000
	007 Move [X31], X0
	008 Move [X31+8], X1
	009 Move X21, 0xB26000
	010 Move W8, [X20+1039]
	011 Move X21, [X21+2368]
	012 Move X19, X2
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xB26000
	018 Move X0, [X0+2368]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1039], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Add X0, X31, 0
	028 Move X1, X19
	029 Call BigInteger.CompareTo, X0, X1
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move W0, W0
	035 ShiftRight W0, 31
	036 And W0, W0, 0x7FFFFFFF
	037 Add X31, X31, 48
	038 Return X0

Method: System.Boolean GetPartsForBitManipulation(ref System.Numerics.BigInteger x, out System.UInt32[] xd, out System.Int32 xl)

Disassembly:
	0x0360F3A8 LDP X22, X21, [X31 + 0x20]
	0x0360F3AC LDP X24, X23, [X31 + 0x10]
	0x0360F3B0 MOV W1, W31
	0x0360F3B4 MOV W3, W31
	0x0360F3B8 MOV X5, X31
	0x0360F3BC LDR X30, [X31], #0x40
	0x0360F3C0 B 0x339FCE8
	0x0360F3C4 SUB X31, X31, 0x80
	0x0360F3C8 STR X30, [X31 + 0x50]
	0x0360F3CC STP X22, X21, [X31 + 0x60]
	0x0360F3D0 STP X20, X19, [X31 + 0x70]
	0x0360F3D4 ADRP X22, 0xDD1000
	0x0360F3D8 LDRB W8, [X22 + 0x423]
	0x0360F3DC MOV X19, X2
	0x0360F3E0 MOV X21, X1
	0x0360F3E4 MOV X20, X0
	0x0360F3E8 TBNZ X8, 0x0, 0x360F400
	0x0360F3EC ADRP X0, 0xB2B000
	0x0360F3F0 LDR X0, [X0 + 0xE88]
	0x0360F3F4 BL 0x1C16CF4
	0x0360F3F8 MOVZ W8, 0x1
	0x0360F3FC STRB W8, [X22 + 0x423]
	0x0360F400 MOVI V0.2D, 0x0
	0x0360F404 STP X31, X31, [X31 + 0x40]
	0x0360F408 STP X31, X31, [X31 + 0x30]
	0x0360F40C STR X31, [X31 + 0x20]
	0x0360F410 STP V0, V0, [X31]
	0x0360F414 LDR X8, [X19]
	0x0360F418 CBZ X8, 0x360F4E8
	0x0360F41C LDR W22, [X8 + 0x18]
	0x0360F420 ADD X0, X31, 0x40
	0x0360F424 MOV W2, W31
	0x0360F428 MOV W1, W22
	0x0360F42C BL 0x360F168
	0x0360F430 ADD X0, X31, 0x30
	0x0360F434 MOVZ W2, 0x1
	0x0360F438 MOV W1, W22
	0x0360F43C BL 0x360F168
	0x0360F440 CBZ X21, 0x360F4E8
	0x0360F444 ADRP X22, 0xB2B000
	0x0360F448 LDR X22, [X22 + 0xE88]
	0x0360F44C LDR X0, [X22]
	0x0360F450 LDR W8, [X0 + 0xE0]
	0x0360F454 CBNZ W8, 0x360F460
	0x0360F458 BL 0x1C16DFC
	0x0360F45C LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDD2000
	007 Move W8, [X22+1040]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB0E000
	016 Move X0, [X0+3336]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1040], W8
	020 Move X0, [X20+8]
	021 Compare X0, 0
	022 JumpIfNotEqual {43}
	023 Move X8, 0xB0E000
	024 Move W22, [X20]
	025 Move X8, [X8+3336]
	026 Move W1, 1
	027 Move X0, [X8]
	028 Call 0x1C17D6C
	029 Compare X0, 0
	030 JumpIfEqual {60}
	031 Move W8, [X20]
	032 Move W9, [X0+24]
	033 Move TEMP, X22
	034 And TEMP, TEMP, -2147483648
	035 Compare TEMP, -2147483648
	036 JumpIfEqual {39}
	037 Compare W9, 0
	038 JumpIfNotEqual {42}
	039 Compare W9, 0
	040 JumpIfEqual {61}
	041 Subtract W8, W31, W8
	042 Move [X0+32], W8
	043 Move [X21], X0
	044 Move X8, [X20+8]
	045 Compare X8, 0
	046 JumpIfEqual {48}
	047 Move W8, [X8+24]
	048 Move W8, 1
	049 Move [X19], W8
	050 Move W8, [X20]
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move W0, W8
	056 ShiftRight W0, 31
	057 And W0, W0, 0x7FFFFFFF
	058 Move X30, [X31+48]
	059 Return X0
	060 Call 0x1C17F20
	061 Call 0x1C17F28

Method: System.Int32 GetDiffLength(System.UInt32[] rgu1, System.UInt32[] rgu2, System.Int32 cu)

Disassembly:
	0x0360D9FC MOV X1, X20
	0x0360DA00 BL 0x360DB94
	0x0360DA04 LDR X8, [X22]
	0x0360DA08 MOV W22, W0
	0x0360DA0C LDR W9, [X8 + 0xE0]
	0x0360DA10 CBZ W9, 0x360DA94
	0x0360DA14 TBNZ X22, 0x1F, 0x360DAA0
	0x0360DA18 MOV X0, X21
	0x0360DA1C MOV X1, X20
	0x0360DA20 BL 0x360DC14
	0x0360DA24 B 0x360DA84
	0x0360DA28 ADRP X8, 0xB2D000
	0x0360DA2C LDR X8, [X8 + 0xE88]
	0x0360DA30 CMP W19, 0x0
	0x0360DA34 CSNEG W21, W19, W19, PL
	0x0360DA38 LDR X0, [X8]
	0x0360DA3C LDR W8, [X0 + 0xE0]
	0x0360DA40 CBNZ W8, 0x360DA48
	0x0360DA44 BL 0x1C16DFC
	0x0360DA48 MOV X0, X20
	0x0360DA4C MOV W1, W21
	0x0360DA50 BL 0x360DADC
	0x0360DA54 B 0x360DAAC
	0x0360DA58 ADRP X8, 0xB2D000
	0x0360DA5C LDR X8, [X8 + 0xE88]
	0x0360DA60 CMP W22, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Subtract W8, W2, 1
	003 Move TEMP, X8
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {23}
	007 Compare X0, 0
	008 JumpIfEqual {26}
	009 Move W9, [X0+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Compare X1, 0
	012 JumpIfEqual {26}
	013 Move W9, [X1+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W9, W8
	016 Add X10, X0, X9
	017 Add X9, X1, X9
	018 Move W10, [X10+32]
	019 Move W9, [X9+32]
	020 Subtract W8, W8, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Add W0, W8, 2
	023 Move W0, W31
	024 Move X30, [X31+16]
	025 Return X0
	026 Call 0x1C17F20
	027 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x0360F5F8 LDR W9, [X0 + 0xE0]
	0x0360F5FC CBNZ W9, 0x360F604
	0x0360F600 BL 0x1C16DFC
	0x0360F604 MOV W0, W23
	0x0360F608 MOV X1, X22
	0x0360F60C MOV X2, X21
	0x0360F610 MOV X3, X20
	0x0360F614 MOV X4, X19
	0x0360F618 LDP X20, X19, [X31 + 0x40]
	0x0360F61C LDP X22, X21, [X31 + 0x30]
	0x0360F620 LDP X24, X23, [X31 + 0x20]
	0x0360F624 LDP X26, X25, [X31 + 0x10]
	0x0360F628 LDR X30, [X31], #0x50
	0x0360F62C B 0x360F88C
	0x0360F630 SBFM X9, X9, 0x20, 0x3F
	0x0360F634 CBNZ W8, 0x360F5E4
	0x0360F638 BL 0x1C16F28
	0x0360F63C BL 0x1C16F20
	0x0360F640 STP X30, X23, [X31 - 0x30]!
	0x0360F644 STP X22, X21, [X31 + 0x10]
	0x0360F648 STP X20, X19, [X31 + 0x20]
	0x0360F64C ADRP X21, 0xDD1000
	0x0360F650 LDRB W8, [X21 + 0x433]
	0x0360F654 MOV X20, X1
	0x0360F658 MOV X19, X0
	0x0360F65C TBNZ X8, 0x0, 0x360F680
	0x0360F660 ADRP X0, 0xB2B000
	0x0360F664 LDR X0, [X0 + 0xE88]
	0x0360F668 BL 0x1C16CF4
	0x0360F66C ADRP X0, 0xB0D000
	0x0360F670 LDR X0, [X0 + 0xD08]
	0x0360F674 BL 0x1C16CF4
	0x0360F678 MOVZ W8, 0x1
	0x0360F67C STRB W8, [X21 + 0x433]
	0x0360F680 CBZ X20, 0x360F73C
	0x0360F684 ADRP X23, 0xB0D000
	0x0360F688 LDR X23, [X23 + 0xD08]
	0x0360F68C LDR W8, [X20 + 0x18]
	0x0360F690 MOVZ W1, 0x1
	0x0360F694 LDR X0, [X23]
	0x0360F698 BFM W1, W8, 0x1F, 0x1E
	0x0360F69C BL 0x1C16D6C
	0x0360F6A0 CBZ X0, 0x360F73C
	0x0360F6A4 LDR X8, [X0 + 0x18]
	0x0360F6A8 MOV X22, X0
	0x0360F6AC CBZ W8, 0x360F740
	0x0360F6B0 ADRP X9, 0xB2B000
	0x0360F6B4 LDR X9, [X9 + 0xE88]
	0x0360F6B8 MOV X10, INVALID
	0x0360F6BC ADD X8, X10, X8, 0x20, LSL
	0x0360F6C0 ADD X8, X22, X8, 0x1E, ASR
	0x0360F6C4 MOVZ W21, 0x1
	0x0360F6C8 STR W21, [X8 + 0x20]
	0x0360F6CC LDR X0, [X9]
	0x0360F6D0 LDR W8, [X0 + 0xE0]
	0x0360F6D4 CBNZ W8, 0x360F6DC
	0x0360F6D8 BL 0x1C16DFC
	0x0360F6DC MOV X0, X22
	0x0360F6E0 MOV X1, X20
	0x0360F6E4 BL 0x360E9CC
	0x0360F6E8 STP X20, X0, [X19]
	0x0360F6EC LDR W8, [X20 + 0x18]
	0x0360F6F0 LDR X0, [X23]
	0x0360F6F4 UBFM W8, W8, 0x1F, 0x1E
	0x0360F6F8 ADD W1, W8, 0x2
	0x0360F6FC BL 0x1C16D6C
	0x0360F700 STR X0, [X19 + 0x10]
	0x0360F704 LDR W8, [X20 + 0x18]
	0x0360F708 LDR X0, [X23]
	0x0360F70C BFM W21, W8, 0x1F, 0x1E
	0x0360F710 MOV W1, W21
	0x0360F714 BL 0x1C16D6C
	0x0360F718 LDR X8, [X19 + 0x8]
	0x0360F71C STR X0, [X19 + 0x18]
	0x0360F720 MOV X0, X8
	0x0360F724 BL 0x360FC7C
	0x0360F728 STR W0, [X19 + 0x20]
	0x0360F72C LDP X20, X19, [X31 + 0x20]
	0x0360F730 LDP X22, X21, [X31 + 0x10]
	0x0360F734 LDP X30, X23, [X31], #0x30
	0x0360F738 RET
	0x0360F73C BL 0x1C16F20
	0x0360F740 BL 0x1C16F28
	0x0360F744 STR X30, [X31 - 0x50]!

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xDD2000
	007 Move X20, 0xB0E000
	008 Move W8, [X19+1041]
	009 Move X20, [X20+3336]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xAED000
	015 Move X0, [X0+3272]
	016 Call 0x1C17CF4
	017 Move X0, 0xB26000
	018 Move X0, [X0+2368]
	019 Call 0x1C17CF4
	020 Move X0, 0xB0E000
	021 Move X0, [X0+3336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+1041], W8
	025 Move X0, [X20]
	026 Move W1, 1
	027 Call 0x1C17D6C
	028 Compare X0, 0
	029 JumpIfEqual {104}
	030 Move W8, [X0+24]
	031 Compare W8, 0
	032 JumpIfEqual {105}
	033 Move X20, 0xB26000
	034 Move X20, [X20+2368]
	035 Move W8, 0x80000000
	036 Move [X0+32], W8
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Move X8, [X20]
	039 Move X21, 0xDD2000
	040 Move X19, 0xAED000
	041 Move X8, [X8+184]
	042 Move [X8], D8
	043 Move [X8+8], X0
	044 Move W8, [X21+1015]
	045 Move X19, [X19+3272]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {55}
	050 Move X0, 0xB26000
	051 Move X0, [X0+2368]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+1015], W8
	055 Move X8, [X20]
	056 Move X9, -45223936
	057 Move V0, [X9+3776]
	058 Move X9, [X8+184]
	059 Move [X9+16], D0
	060 Move [X9+24], X31
	061 Move X9, [X8+184]
	062 Move [X9+32], X31
	063 Move [X9+40], X31
	064 Move X8, [X8+184]
	065 Move X19, [X19]
	066 Move [X8+48], D8
	067 Move [X8+56], X31
	068 Move X8, [X19+56]
	069 Compare X8, 0
	070 JumpIfNotEqual {74}
	071 Move X0, X19
	072 Call 0x1C5D6E0
	073 Move X8, [X19+56]
	074 Move X0, [X8+16]
	075 Move W8, [X0+309]
	076 Move TEMP, X8
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {81}
	080 Call 0x1C5D684
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move X8, [X19+56]
	086 Move X0, [X8+16]
	087 Move W8, [X0+309]
	088 Move TEMP, X8
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfEqual {93}
	092 Call 0x1C5D684
	093 Move X8, [X0+184]
	094 Move X9, [X20]
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X30, [X31+16]
	098 Move X21, [X31+24]
	099 Move X8, [X8]
	100 Move X9, [X9+184]
	101 Move [X9+64], X8
	102 Move V8, [X31+48]
	103 Return 
	104 Call 0x1C17F20
	105 Call 0x1C17F28

