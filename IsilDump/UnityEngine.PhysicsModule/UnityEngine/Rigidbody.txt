Type: UnityEngine.Rigidbody

Method: UnityEngine.Vector3 get_velocity()

Disassembly:
	0x03C8F868 LDR X30, [X31 + 0x20]
	0x03C8F86C ADD X31, X31, 0x40
	0x03C8F870 RET
	0x03C8F874 STR X30, [X31 - 0x30]!
	0x03C8F878 STP X22, X21, [X31 + 0x10]
	0x03C8F87C STP X20, X19, [X31 + 0x20]
	0x03C8F880 ADRP X22, 0x757000
	0x03C8F884 LDR X3, [X22 + 0xF68]
	0x03C8F888 MOV X19, X2
	0x03C8F88C MOV X20, X1
	0x03C8F890 MOV X21, X0
	0x03C8F894 CBNZ X3, 0x3C8F8AC
	0x03C8F898 ADRP X0, 0xFFFFFFFFFCE6E000
	0x03C8F89C ADD X0, X0, 0xA42
	0x03C8F8A0 BL 0x1C16CB8
	0x03C8F8A4 MOV X3, X0
	0x03C8F8A8 STR X0, [X22 + 0xF68]
	0x03C8F8AC MOV X0, X21
	0x03C8F8B0 MOV X1, X20
	0x03C8F8B4 MOV X2, X19
	0x03C8F8B8 LDP X20, X19, [X31 + 0x20]
	0x03C8F8BC LDP X22, X21, [X31 + 0x10]
	0x03C8F8C0 LDR X30, [X31], #0x30

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x758000
	006 Move X8, [X20+3776]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51826688
	013 Add X0, X0, 1077
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+3776], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_velocity(UnityEngine.Vector3 value)

Disassembly:
	0x03C8F908 MOV X0, X20
	0x03C8F90C BLR X8
	0x03C8F910 LDR X8, [X31 + 0x18]
	0x03C8F914 LDUR V0, [X31 + 0x8]
	0x03C8F918 LDP X30, X21, [X31 + 0x20]
	0x03C8F91C STR X8, [X19 + 0x10]
	0x03C8F920 STR V0, [X19]
	0x03C8F924 LDP X20, X19, [X31 + 0x30]
	0x03C8F928 ADD X31, X31, 0x40
	0x03C8F92C RET
	0x03C8F930 STP X30, X21, [X31 - 0x20]!
	0x03C8F934 STP X20, X19, [X31 + 0x10]
	0x03C8F938 ADRP X21, 0x757000
	0x03C8F93C LDR X2, [X21 + 0xF70]
	0x03C8F940 MOV X19, X1
	0x03C8F944 MOV X20, X0
	0x03C8F948 CBNZ X2, 0x3C8F960
	0x03C8F94C ADRP X0, 0xFFFFFFFFFCE96000
	0x03C8F950 ADD X0, X0, 0x6FA
	0x03C8F954 BL 0x1C16CB8
	0x03C8F958 MOV X2, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x758000
	006 Move X8, [X20+3784]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -52023296
	014 Add X0, X0, 2002
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+3784], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: UnityEngine.Vector3 get_angularVelocity()

Disassembly:
	0x03C8F9A0 STR X0, [X20 + 0xF78]
	0x03C8F9A4 ADD X1, X31, 0x8
	0x03C8F9A8 MOV X0, X19
	0x03C8F9AC BLR X8
	0x03C8F9B0 LDP X20, X19, [X31 + 0x10]
	0x03C8F9B4 LDR X30, [X31], #0x20
	0x03C8F9B8 RET
	0x03C8F9BC STP X30, X21, [X31 - 0x20]!
	0x03C8F9C0 STP X20, X19, [X31 + 0x10]
	0x03C8F9C4 ADRP X21, 0x757000
	0x03C8F9C8 LDR X2, [X21 + 0xF78]
	0x03C8F9CC MOV X19, X1
	0x03C8F9D0 MOV X20, X0
	0x03C8F9D4 CBNZ X2, 0x3C8F9EC
	0x03C8F9D8 ADRP X0, 0xFFFFFFFFFCE6C000
	0x03C8F9DC ADD X0, X0, 0xA23
	0x03C8F9E0 BL 0x1C16CB8
	0x03C8F9E4 MOV X2, X0
	0x03C8F9E8 STR X0, [X21 + 0xF78]
	0x03C8F9EC MOV X0, X20
	0x03C8F9F0 MOV X1, X19
	0x03C8F9F4 LDP X20, X19, [X31 + 0x10]
	0x03C8F9F8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x758000
	006 Move X8, [X20+3792]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -52023296
	013 Add X0, X0, 2069
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+3792], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_angularVelocity(UnityEngine.Vector3 value)

Disassembly:
	0x03C8FA40 ADD X1, X31, 0x0
	0x03C8FA44 MOV X0, X19
	0x03C8FA48 BLR X8
	0x03C8FA4C LDP X20, X19, [X31 + 0x20]
	0x03C8FA50 LDR X30, [X31 + 0x10]
	0x03C8FA54 ADD X31, X31, 0x30
	0x03C8FA58 RET
	0x03C8FA5C STP X30, X21, [X31 - 0x20]!
	0x03C8FA60 STP X20, X19, [X31 + 0x10]
	0x03C8FA64 ADRP X21, 0x757000
	0x03C8FA68 LDR X2, [X21 + 0xF98]
	0x03C8FA6C MOV X19, X1
	0x03C8FA70 MOV X20, X0
	0x03C8FA74 CBNZ X2, 0x3C8FA8C
	0x03C8FA78 ADRP X0, 0xFFFFFFFFFCE7A000
	0x03C8FA7C ADD X0, X0, 0xD16
	0x03C8FA80 BL 0x1C16CB8
	0x03C8FA84 MOV X2, X0
	0x03C8FA88 STR X0, [X21 + 0xF98]
	0x03C8FA8C MOV X0, X20
	0x03C8FA90 MOV X1, X19

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x758000
	006 Move X8, [X20+3800]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -52023296
	014 Add X0, X0, 2143
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+3800], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: System.Single get_drag()

Disassembly:
	0x03C8FAD8 BR X1
	0x03C8FADC STR D8, [X31 - 0x20]!
	0x03C8FAE0 STR X30, [X31 + 0x8]
	0x03C8FAE4 STP X20, X19, [X31 + 0x10]
	0x03C8FAE8 ADRP X20, 0x757000
	0x03C8FAEC LDR X1, [X20 + 0xF88]
	0x03C8FAF0 MOV V8.16B, V0.16B
	0x03C8FAF4 MOV X19, X0
	0x03C8FAF8 CBNZ X1, 0x3C8FB10
	0x03C8FAFC ADRP X0, 0xFFFFFFFFFCE62000
	0x03C8FB00 ADD X0, X0, 0x8A9
	0x03C8FB04 BL 0x1C16CB8
	0x03C8FB08 MOV X1, X0
	0x03C8FB0C STR X0, [X20 + 0xF88]
	0x03C8FB10 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x758000
	005 Move X1, [X20+3648]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51875840
	010 Add X0, X0, 310
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3648], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_drag(System.Single value)

Disassembly:
	0x03C8FB14 LDP X20, X19, [X31 + 0x10]
	0x03C8FB18 LDR X30, [X31 + 0x8]
	0x03C8FB1C MOV V0.16B, V8.16B
	0x03C8FB20 LDR V8, [X31], #0x20
	0x03C8FB24 BR X1
	0x03C8FB28 SUB X31, X31, 0x30
	0x03C8FB2C STR X30, [X31 + 0x10]
	0x03C8FB30 STP X20, X19, [X31 + 0x20]
	0x03C8FB34 ADRP X20, 0x757000
	0x03C8FB38 LDR X8, [X20 + 0xFA0]
	0x03C8FB3C MOV X19, X0
	0x03C8FB40 STP S0, S1, [X31]
	0x03C8FB44 STR S2, [X31 + 0x8]
	0x03C8FB48 CBNZ X8, 0x3C8FB60
	0x03C8FB4C ADRP X0, 0xFFFFFFFFFCE66000
	0x03C8FB50 ADD X0, X0, 0xA5E
	0x03C8FB54 BL 0x1C16CB8
	0x03C8FB58 MOV X8, X0
	0x03C8FB5C STR X0, [X20 + 0xFA0]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x758000
	006 Move X1, [X20+3656]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51834880
	012 Add X0, X0, 1533
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3656], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Single get_angularDrag()

Disassembly:
	0x03C8FB60 ADD X1, X31, 0x0
	0x03C8FB64 MOV X0, X19
	0x03C8FB68 BLR X8
	0x03C8FB6C LDP X20, X19, [X31 + 0x20]
	0x03C8FB70 LDR X30, [X31 + 0x10]
	0x03C8FB74 ADD X31, X31, 0x30
	0x03C8FB78 RET
	0x03C8FB7C STP X30, X21, [X31 - 0x20]!
	0x03C8FB80 STP X20, X19, [X31 + 0x10]
	0x03C8FB84 ADRP X21, 0x757000
	0x03C8FB88 LDR X2, [X21 + 0xFA0]
	0x03C8FB8C MOV X19, X1
	0x03C8FB90 MOV X20, X0
	0x03C8FB94 CBNZ X2, 0x3C8FBAC
	0x03C8FB98 ADRP X0, 0xFFFFFFFFFCE66000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x758000
	005 Move X1, [X20+3664]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52023296
	010 Add X0, X0, 1961
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3664], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_angularDrag(System.Single value)

Disassembly:
	0x03C8FB9C ADD X0, X0, 0xA5E
	0x03C8FBA0 BL 0x1C16CB8
	0x03C8FBA4 MOV X2, X0
	0x03C8FBA8 STR X0, [X21 + 0xFA0]
	0x03C8FBAC MOV X0, X20
	0x03C8FBB0 MOV X1, X19
	0x03C8FBB4 LDP X20, X19, [X31 + 0x10]
	0x03C8FBB8 LDP X30, X21, [X31], #0x20
	0x03C8FBBC BR X2
	0x03C8FBC0 STR X30, [X31 - 0x20]!
	0x03C8FBC4 STP X20, X19, [X31 + 0x10]
	0x03C8FBC8 ADRP X20, 0x757000
	0x03C8FBCC LDR X1, [X20 + 0xF90]
	0x03C8FBD0 MOV X19, X0
	0x03C8FBD4 CBNZ X1, 0x3C8FBEC
	0x03C8FBD8 ADRP X0, 0xFFFFFFFFFCE6C000
	0x03C8FBDC ADD X0, X0, 0xA6C
	0x03C8FBE0 BL 0x1C16CB8
	0x03C8FBE4 MOV X1, X0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x758000
	006 Move X1, [X20+3672]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51892224
	012 Add X0, X0, 1743
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3672], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Single get_mass()

Disassembly:
	0x03C8FBE8 STR X0, [X20 + 0xF90]
	0x03C8FBEC MOV X0, X19
	0x03C8FBF0 LDP X20, X19, [X31 + 0x10]
	0x03C8FBF4 LDR X30, [X31], #0x20
	0x03C8FBF8 BR X1
	0x03C8FBFC STP X30, X21, [X31 - 0x20]!
	0x03C8FC00 STP X20, X19, [X31 + 0x10]
	0x03C8FC04 ADRP X21, 0x757000
	0x03C8FC08 LDR X2, [X21 + 0xFA8]
	0x03C8FC0C MOV X19, X1
	0x03C8FC10 MOV X20, X0
	0x03C8FC14 CBNZ X2, 0x3C8FC2C
	0x03C8FC18 ADRP X0, 0xFFFFFFFFFCE94000
	0x03C8FC1C ADD X0, X0, 0x996
	0x03C8FC20 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x758000
	005 Move X1, [X20+3680]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51908608
	010 Add X0, X0, 2389
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3680], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_mass(System.Single value)

Disassembly:
	0x03C8FC24 MOV X2, X0
	0x03C8FC28 STR X0, [X21 + 0xFA8]
	0x03C8FC2C MOV X0, X20
	0x03C8FC30 MOV X1, X19
	0x03C8FC34 LDP X20, X19, [X31 + 0x10]
	0x03C8FC38 LDP X30, X21, [X31], #0x20
	0x03C8FC3C BR X2
	0x03C8FC40 STR X30, [X31 - 0x20]!
	0x03C8FC44 STP X20, X19, [X31 + 0x10]
	0x03C8FC48 ADRP X20, 0x757000
	0x03C8FC4C LDR X1, [X20 + 0xFB0]
	0x03C8FC50 MOV X19, X0
	0x03C8FC54 CBNZ X1, 0x3C8FC6C
	0x03C8FC58 ADRP X0, 0xFFFFFFFFFCE78000
	0x03C8FC5C ADD X0, X0, 0xA9D
	0x03C8FC60 BL 0x1C16CB8
	0x03C8FC64 MOV X1, X0
	0x03C8FC68 STR X0, [X20 + 0xFB0]
	0x03C8FC6C MOV X0, X19

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x758000
	006 Move X1, [X20+3688]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51924992
	012 Add X0, X0, 3230
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3688], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Boolean get_useGravity()

Disassembly:
	0x03C8FC70 LDP X20, X19, [X31 + 0x10]
	0x03C8FC74 LDR X30, [X31], #0x20
	0x03C8FC78 BR X1
	0x03C8FC7C STP X30, X21, [X31 - 0x20]!
	0x03C8FC80 STP X20, X19, [X31 + 0x10]
	0x03C8FC84 ADRP X21, 0x757000
	0x03C8FC88 LDR X2, [X21 + 0xFB8]
	0x03C8FC8C MOV W19, W1
	0x03C8FC90 MOV X20, X0
	0x03C8FC94 CBNZ X2, 0x3C8FCAC
	0x03C8FC98 ADRP X0, 0xFFFFFFFFFCE90000
	0x03C8FC9C ADD X0, X0, 0x668
	0x03C8FCA0 BL 0x1C16CB8
	0x03C8FCA4 MOV X2, X0
	0x03C8FCA8 STR X0, [X21 + 0xFB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x758000
	005 Move X1, [X20+3696]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51965952
	010 Add X0, X0, 2294
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3696], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_useGravity(System.Boolean value)

Disassembly:
	0x03C8FCAC AND W1, W19, 0x1
	0x03C8FCB0 MOV X0, X20
	0x03C8FCB4 LDP X20, X19, [X31 + 0x10]
	0x03C8FCB8 LDP X30, X21, [X31], #0x20
	0x03C8FCBC BR X2
	0x03C8FCC0 SUB X31, X31, 0x30
	0x03C8FCC4 STR X30, [X31 + 0x10]
	0x03C8FCC8 STP X20, X19, [X31 + 0x20]
	0x03C8FCCC ADRP X20, 0x757000
	0x03C8FCD0 LDR X8, [X20 + 0xFD8]
	0x03C8FCD4 MOV X19, X0
	0x03C8FCD8 STR W31, [X31 + 0x8]
	0x03C8FCDC STR X31, [X31]
	0x03C8FCE0 CBNZ X8, 0x3C8FCF8
	0x03C8FCE4 ADRP X0, 0xFFFFFFFFFCE9D000
	0x03C8FCE8 ADD X0, X0, 0xE21
	0x03C8FCEC BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3704]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51933184
	012 Add X0, X0, 2663
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3704], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean get_isKinematic()

Disassembly:
	0x03C8FCF0 MOV X8, X0
	0x03C8FCF4 STR X0, [X20 + 0xFD8]
	0x03C8FCF8 ADD X1, X31, 0x0
	0x03C8FCFC MOV X0, X19
	0x03C8FD00 BLR X8
	0x03C8FD04 LDP S0, S1, [X31]
	0x03C8FD08 LDR V2, [X31 + 0x8]
	0x03C8FD0C LDP X20, X19, [X31 + 0x20]
	0x03C8FD10 LDR X30, [X31 + 0x10]
	0x03C8FD14 ADD X31, X31, 0x30
	0x03C8FD18 RET
	0x03C8FD1C STP X30, X21, [X31 - 0x20]!
	0x03C8FD20 STP X20, X19, [X31 + 0x10]
	0x03C8FD24 ADRP X21, 0x757000
	0x03C8FD28 LDR X2, [X21 + 0xFD8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x758000
	005 Move X1, [X20+3712]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51859456
	010 Add X0, X0, 779
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3712], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_isKinematic(System.Boolean value)

Disassembly:
	0x03C8FD2C MOV X19, X1
	0x03C8FD30 MOV X20, X0
	0x03C8FD34 CBNZ X2, 0x3C8FD4C
	0x03C8FD38 ADRP X0, 0xFFFFFFFFFCE9D000
	0x03C8FD3C ADD X0, X0, 0xE21
	0x03C8FD40 BL 0x1C16CB8
	0x03C8FD44 MOV X2, X0
	0x03C8FD48 STR X0, [X21 + 0xFD8]
	0x03C8FD4C MOV X0, X20
	0x03C8FD50 MOV X1, X19
	0x03C8FD54 LDP X20, X19, [X31 + 0x10]
	0x03C8FD58 LDP X30, X21, [X31], #0x20
	0x03C8FD5C BR X2
	0x03C8FD60 STR X30, [X31 - 0x20]!
	0x03C8FD64 STP X20, X19, [X31 + 0x10]
	0x03C8FD68 ADRP X20, 0x757000
	0x03C8FD6C LDR X1, [X20 + 0xFC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3720]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51974144
	012 Add X0, X0, 2571
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3720], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.RigidbodyConstraints get_constraints()

Disassembly:
	0x03C8FD70 MOV X19, X0
	0x03C8FD74 CBNZ X1, 0x3C8FD8C
	0x03C8FD78 ADRP X0, 0xFFFFFFFFFCE9D000
	0x03C8FD7C ADD X0, X0, 0xDF7
	0x03C8FD80 BL 0x1C16CB8
	0x03C8FD84 MOV X1, X0
	0x03C8FD88 STR X0, [X20 + 0xFC0]
	0x03C8FD8C MOV X0, X19
	0x03C8FD90 LDP X20, X19, [X31 + 0x10]
	0x03C8FD94 LDR X30, [X31], #0x20
	0x03C8FD98 BR X1
	0x03C8FD9C STR X30, [X31 - 0x20]!
	0x03C8FDA0 STP X20, X19, [X31 + 0x10]
	0x03C8FDA4 ADRP X20, 0x757000
	0x03C8FDA8 LDR X1, [X20 + 0xFC8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x758000
	005 Move X1, [X20+3728]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51924992
	010 Add X0, X0, 3277
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3728], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_constraints(UnityEngine.RigidbodyConstraints value)

Disassembly:
	0x03C8FDAC MOV X19, X0
	0x03C8FDB0 CBNZ X1, 0x3C8FDC8
	0x03C8FDB4 ADRP X0, 0xFFFFFFFFFCE96000
	0x03C8FDB8 ADD X0, X0, 0x739
	0x03C8FDBC BL 0x1C16CB8
	0x03C8FDC0 MOV X1, X0
	0x03C8FDC4 STR X0, [X20 + 0xFC8]
	0x03C8FDC8 MOV X0, X19
	0x03C8FDCC LDP X20, X19, [X31 + 0x10]
	0x03C8FDD0 LDR X30, [X31], #0x20
	0x03C8FDD4 BR X1
	0x03C8FDD8 STR X30, [X31 - 0x20]!
	0x03C8FDDC STP X20, X19, [X31 + 0x10]
	0x03C8FDE0 ADRP X20, 0x757000
	0x03C8FDE4 LDR X1, [X20 + 0xFD0]
	0x03C8FDE8 MOV X19, X0
	0x03C8FDEC CBNZ X1, 0x3C8FE04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3736]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51908608
	012 Add X0, X0, 2423
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3736], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Vector3 get_worldCenterOfMass()

Disassembly:
	0x03C8FDF0 ADRP X0, 0xFFFFFFFFFCE90000
	0x03C8FDF4 ADD X0, X0, 0x69D
	0x03C8FDF8 BL 0x1C16CB8
	0x03C8FDFC MOV X1, X0
	0x03C8FE00 STR X0, [X20 + 0xFD0]
	0x03C8FE04 MOV X0, X19
	0x03C8FE08 LDP X20, X19, [X31 + 0x10]
	0x03C8FE0C LDR X30, [X31], #0x20
	0x03C8FE10 BR X1
	0x03C8FE14 SUB X31, X31, 0x30
	0x03C8FE18 STR X30, [X31 + 0x10]
	0x03C8FE1C STP X20, X19, [X31 + 0x20]
	0x03C8FE20 ADRP X20, 0x757000
	0x03C8FE24 LDR X8, [X20 + 0xFE0]
	0x03C8FE28 MOV X19, X0
	0x03C8FE2C STR W31, [X31 + 0x8]
	0x03C8FE30 STR X31, [X31]
	0x03C8FE34 CBNZ X8, 0x3C8FE4C
	0x03C8FE38 ADRP X0, 0xFFFFFFFFFCE82000
	0x03C8FE3C ADD X0, X0, 0x705
	0x03C8FE40 BL 0x1C16CB8
	0x03C8FE44 MOV X8, X0
	0x03C8FE48 STR X0, [X20 + 0xFE0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x758000
	006 Move X8, [X20+3808]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51949568
	013 Add X0, X0, 2726
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+3808], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: UnityEngine.Vector3 get_inertiaTensor()

Disassembly:
	0x03C8FE90 ADD X0, X0, 0x705
	0x03C8FE94 BL 0x1C16CB8
	0x03C8FE98 MOV X2, X0
	0x03C8FE9C STR X0, [X21 + 0xFE0]
	0x03C8FEA0 MOV X0, X20
	0x03C8FEA4 MOV X1, X19
	0x03C8FEA8 LDP X20, X19, [X31 + 0x10]
	0x03C8FEAC LDP X30, X21, [X31], #0x20
	0x03C8FEB0 BR X2
	0x03C8FEB4 SUB X31, X31, 0x30
	0x03C8FEB8 STR X30, [X31 + 0x10]
	0x03C8FEBC STP X20, X19, [X31 + 0x20]
	0x03C8FEC0 ADRP X20, 0x757000
	0x03C8FEC4 LDR X8, [X20 + 0xFE8]
	0x03C8FEC8 MOV X19, X0
	0x03C8FECC STP S0, S1, [X31]
	0x03C8FED0 STR S2, [X31 + 0x8]
	0x03C8FED4 CBNZ X8, 0x3C8FEEC
	0x03C8FED8 ADRP X0, 0xFFFFFFFFFCE80000
	0x03C8FEDC ADD X0, X0, 0xB65
	0x03C8FEE0 BL 0x1C16CB8
	0x03C8FEE4 MOV X8, X0
	0x03C8FEE8 STR X0, [X20 + 0xFE8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x758000
	006 Move X8, [X20+3816]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51949568
	013 Add X0, X0, 2802
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+3816], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_detectCollisions(System.Boolean value)

Disassembly:
	0x03C8FF30 MOV X2, X0
	0x03C8FF34 STR X0, [X21 + 0xFE8]
	0x03C8FF38 MOV X0, X20
	0x03C8FF3C MOV X1, X19
	0x03C8FF40 LDP X20, X19, [X31 + 0x10]
	0x03C8FF44 LDP X30, X21, [X31], #0x20
	0x03C8FF48 BR X2
	0x03C8FF4C SUB X31, X31, 0x30
	0x03C8FF50 STR X30, [X31 + 0x10]
	0x03C8FF54 STP X20, X19, [X31 + 0x20]
	0x03C8FF58 ADRP X20, 0x757000
	0x03C8FF5C LDR X8, [X20 + 0xFF0]
	0x03C8FF60 MOV X19, X0
	0x03C8FF64 STR W31, [X31 + 0x8]
	0x03C8FF68 STR X31, [X31]
	0x03C8FF6C CBNZ X8, 0x3C8FF84
	0x03C8FF70 ADRP X0, 0xFFFFFFFFFCE86000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3744]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51834880
	012 Add X0, X0, 1580
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3744], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Vector3 get_position()

Disassembly:
	0x03C8FF74 ADD X0, X0, 0x158
	0x03C8FF78 BL 0x1C16CB8
	0x03C8FF7C MOV X8, X0
	0x03C8FF80 STR X0, [X20 + 0xFF0]
	0x03C8FF84 ADD X1, X31, 0x0
	0x03C8FF88 MOV X0, X19
	0x03C8FF8C BLR X8
	0x03C8FF90 LDP S0, S1, [X31]
	0x03C8FF94 LDR V2, [X31 + 0x8]
	0x03C8FF98 LDP X20, X19, [X31 + 0x20]
	0x03C8FF9C LDR X30, [X31 + 0x10]
	0x03C8FFA0 ADD X31, X31, 0x30
	0x03C8FFA4 RET
	0x03C8FFA8 STP X30, X21, [X31 - 0x20]!
	0x03C8FFAC STP X20, X19, [X31 + 0x10]
	0x03C8FFB0 ADRP X21, 0x757000
	0x03C8FFB4 LDR X2, [X21 + 0xFF0]
	0x03C8FFB8 MOV X19, X1
	0x03C8FFBC MOV X20, X0
	0x03C8FFC0 CBNZ X2, 0x3C8FFD8
	0x03C8FFC4 ADRP X0, 0xFFFFFFFFFCE86000
	0x03C8FFC8 ADD X0, X0, 0x158
	0x03C8FFCC BL 0x1C16CB8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x758000
	006 Move X8, [X20+3824]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51859456
	013 Add X0, X0, 820
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+3824], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_position(UnityEngine.Vector3 value)

Disassembly:
	0x03C90014 ADD X0, X0, 0x6EE
	0x03C90018 BL 0x1C16CB8
	0x03C9001C MOV X8, X0
	0x03C90020 STR X0, [X20 + 0xFF8]
	0x03C90024 ADD X1, X31, 0x0
	0x03C90028 MOV X0, X19
	0x03C9002C BLR X8
	0x03C90030 LDP X20, X19, [X31 + 0x20]
	0x03C90034 LDR X30, [X31 + 0x10]
	0x03C90038 ADD X31, X31, 0x30
	0x03C9003C RET
	0x03C90040 STP X30, X21, [X31 - 0x20]!
	0x03C90044 STP X20, X19, [X31 + 0x10]
	0x03C90048 ADRP X21, 0x756000
	0x03C9004C LDR X2, [X21 + 0xFF8]
	0x03C90050 MOV X19, X1
	0x03C90054 MOV X20, X0
	0x03C90058 CBNZ X2, 0x3C90070
	0x03C9005C ADRP X0, 0xFFFFFFFFFCE71000
	0x03C90060 ADD X0, X0, 0x6EE
	0x03C90064 BL 0x1C16CB8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x757000
	006 Move X8, [X20+3832]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51830784
	014 Add X0, X0, 1144
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+3832], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: UnityEngine.Quaternion get_rotation()

Disassembly:
	0x03C900AC ADD X0, X0, 0x809
	0x03C900B0 BL 0x1C16CB8
	0x03C900B4 MOV X8, X0
	0x03C900B8 STR X0, [X20 + 0x10]
	0x03C900BC ADD X1, X31, 0x0
	0x03C900C0 MOV X0, X19
	0x03C900C4 BLR X8
	0x03C900C8 LDP S0, S1, [X31]
	0x03C900CC LDR V2, [X31 + 0x8]
	0x03C900D0 LDP X20, X19, [X31 + 0x20]
	0x03C900D4 LDR X30, [X31 + 0x10]
	0x03C900D8 ADD X31, X31, 0x30
	0x03C900DC RET
	0x03C900E0 STP X30, X21, [X31 - 0x20]!
	0x03C900E4 STP X20, X19, [X31 + 0x10]
	0x03C900E8 ADRP X21, 0x757000
	0x03C900EC LDR X2, [X21 + 0x10]
	0x03C900F0 MOV X19, X1
	0x03C900F4 MOV X20, X0
	0x03C900F8 CBNZ X2, 0x3C90110
	0x03C900FC ADRP X0, 0xFFFFFFFFFCE5F000
	0x03C90100 ADD X0, X0, 0x809

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x757000
	007 Move X8, [X20+3840]
	008 Move X19, X0
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51945472
	013 Add X0, X0, 2032
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+3840], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move S2, [X31+8]
	023 Move S3, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 48
	028 Return X0

Method: System.Void set_rotation(UnityEngine.Quaternion value)

Disassembly:
	0x03C90148 MOV X1, X0
	0x03C9014C STR X0, [X20]
	0x03C90150 MOV X0, X19
	0x03C90154 LDP X20, X19, [X31 + 0x10]
	0x03C90158 LDR X30, [X31], #0x20
	0x03C9015C BR X1
	0x03C90160 STR D8, [X31 - 0x20]!
	0x03C90164 STR X30, [X31 + 0x8]
	0x03C90168 STP X20, X19, [X31 + 0x10]
	0x03C9016C ADRP X20, 0x757000
	0x03C90170 LDR X1, [X20 + 0x8]
	0x03C90174 MOV V8.16B, V0.16B
	0x03C90178 MOV X19, X0
	0x03C9017C CBNZ X1, 0x3C90194
	0x03C90180 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C90184 ADD X0, X0, 0xE68
	0x03C90188 BL 0x1C16CB8
	0x03C9018C MOV X1, X0
	0x03C90190 STR X0, [X20 + 0x8]
	0x03C90194 MOV X0, X19
	0x03C90198 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x757000
	006 Move X8, [X20+3848]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Move [X31+16], S3
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51871744
	015 Add X0, X0, 641
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+3848], X0
	019 Add X1, X31, 0
	020 Move X0, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+16]
	025 Add X31, X31, 48
	026 Return 

Method: System.Void MovePosition(UnityEngine.Vector3 position)

Disassembly:
	0x03C901E0 LDR X22, [X22 + 0x9D0]
	0x03C901E4 LDR X21, [X21 + 0x758]
	0x03C901E8 MOV X20, X0
	0x03C901EC TBNZ X8, 0x0, 0x3C9021C
	0x03C901F0 ADRP X0, 0x463000
	0x03C901F4 LDR X0, [X0 + 0x758]
	0x03C901F8 BL 0x1C16CF4
	0x03C901FC ADRP X0, 0x463000
	0x03C90200 LDR X0, [X0 + 0x9D0]
	0x03C90204 BL 0x1C16CF4
	0x03C90208 ADRP X0, 0x4AD000
	0x03C9020C LDR X0, [X0 + 0x6F8]
	0x03C90210 BL 0x1C16CF4
	0x03C90214 MOVZ W8, 0x1
	0x03C90218 STRB W8, [X19 + 0x18]
	0x03C9021C LDR X0, [X22]
	0x03C90220 MOVZ W1, 0x1
	0x03C90224 BL 0x1C16D6C
	0x03C90228 MOV X19, X0
	0x03C9022C LDR W8, [X20]
	0x03C90230 LDR X0, [X21]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x757000
	006 Move X8, [X20+3856]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51798016
	014 Add X0, X0, 330
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+3856], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: System.Void MoveRotation(UnityEngine.Quaternion rot)

Disassembly:
	0x03C90278 MOV X2, X31
	0x03C9027C LDR X0, [X8]
	0x03C90280 BL 0x3C96574
	0x03C90284 LDP X20, X19, [X31 + 0x20]
	0x03C90288 LDP X22, X21, [X31 + 0x10]
	0x03C9028C LDR X30, [X31], #0x30
	0x03C90290 RET
	0x03C90294 BL 0x1C16F20
	0x03C90298 BL 0x1C16F28
	0x03C9029C BL 0x1C16F44
	0x03C902A0 MOV X1, X31
	0x03C902A4 BL 0x1C16DEC
	0x03C902A8 CMP W0, W1
	0x03C902AC CSET W0, EQ
	0x03C902B0 RET
	0x03C902B4 CMP W0, W1
	0x03C902B8 CSET W0, NE
	0x03C902BC RET
	0x03C902C0 LDR W0, [X0]
	0x03C902C4 RET
	0x03C902C8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x757000
	006 Move X8, [X20+3864]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Move [X31+16], S3
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51855360
	015 Add X0, X0, 1392
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+3864], X0
	019 Add X1, X31, 0
	020 Move X0, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+16]
	025 Add X31, X31, 48
	026 Return 

Method: System.Void Sleep()

Disassembly:
	0x03C90310 B.EQ 0x3C9031C
	0x03C90314 MOV W0, W31
	0x03C90318 B 0x3C90334
	0x03C9031C MOV X0, X20
	0x03C90320 BL 0x1C16E08
	0x03C90324 LDR W8, [X0]
	0x03C90328 LDR W9, [X19]
	0x03C9032C CMP W9, W8
	0x03C90330 CSET W0, EQ
	0x03C90334 LDP X20, X19, [X31 + 0x10]
	0x03C90338 LDP X30, X21, [X31], #0x20
	0x03C9033C RET
	0x03C90340 LDR W8, [X0]
	0x03C90344 CMP W8, W1
	0x03C90348 CSET W0, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x757000
	005 Move X1, [X20+3752]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51855360
	010 Add X0, X0, 1361
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3752], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean IsSleeping()

Disassembly:
	0x03C9034C RET
	0x03C90350 SUB X31, X31, 0x20
	0x03C90354 STP X30, X19, [X31 + 0x10]
	0x03C90358 ADRP X19, 0x757000
	0x03C9035C LDR W9, [X0]
	0x03C90360 LDR X8, [X19 + 0x20]
	0x03C90364 STR W9, [X31 + 0x8]
	0x03C90368 CBNZ X8, 0x3C90380
	0x03C9036C ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C90370 ADD X0, X0, 0xE9E
	0x03C90374 BL 0x1C16CB8
	0x03C90378 MOV X8, X0
	0x03C9037C STR X0, [X19 + 0x20]
	0x03C90380 ADD X0, X31, 0x8
	0x03C90384 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x757000
	005 Move X1, [X20+3760]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51953664
	010 Add X0, X0, 2690
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3760], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void WakeUp()

Disassembly:
	0x03C90388 LDP X30, X19, [X31 + 0x10]
	0x03C9038C AND W0, W0, 0x1
	0x03C90390 ADD X31, X31, 0x20
	0x03C90394 RET
	0x03C90398 SUB X31, X31, 0x20
	0x03C9039C STP X30, X19, [X31 + 0x10]
	0x03C903A0 ADRP X19, 0x757000
	0x03C903A4 LDR X8, [X19 + 0x20]
	0x03C903A8 STR W0, [X31 + 0x8]
	0x03C903AC CBNZ X8, 0x3C903C4
	0x03C903B0 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C903B4 ADD X0, X0, 0xE9E
	0x03C903B8 BL 0x1C16CB8
	0x03C903BC MOV X8, X0
	0x03C903C0 STR X0, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x757000
	005 Move X1, [X20+3768]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51929088
	010 Add X0, X0, 3318
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3768], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void AddForce(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)

Disassembly:
	0x03C903C4 ADD X0, X31, 0x8
	0x03C903C8 BLR X8
	0x03C903CC LDP X30, X19, [X31 + 0x10]
	0x03C903D0 AND W0, W0, 0x1
	0x03C903D4 ADD X31, X31, 0x20
	0x03C903D8 RET
	0x03C903DC STR X30, [X31 - 0x20]!
	0x03C903E0 STP X20, X19, [X31 + 0x10]
	0x03C903E4 ADRP X20, 0x757000
	0x03C903E8 LDR X1, [X20 + 0x20]
	0x03C903EC MOV X19, X0
	0x03C903F0 CBNZ X1, 0x3C90408
	0x03C903F4 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C903F8 ADD X0, X0, 0xE9E
	0x03C903FC BL 0x1C16CB8
	0x03C90400 MOV X1, X0
	0x03C90404 STR X0, [X20 + 0x20]
	0x03C90408 MOV X0, X19
	0x03C9040C LDP X20, X19, [X31 + 0x10]
	0x03C90410 LDR X30, [X31], #0x20
	0x03C90414 BR X1
	0x03C90418 STR D8, [X31 - 0x30]!
	0x03C9041C STP X30, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x757000
	007 Move X8, [X21+3872]
	008 Move W19, W1
	009 Move X20, X0
	010 Move [X31], S0
	011 Move [X31+8], S1
	012 Move [X31+8], S2
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51855360
	016 Add X0, X0, 1462
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X21+3872], X0
	020 Add X1, X31, 0
	021 Move X0, X20
	022 Move W2, W19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Move X21, [X31+24]
	028 Add X31, X31, 48
	029 Return 

Method: System.Void AddTorque(UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)

Disassembly:
	0x03C90474 CBNZ X8, 0x3C9048C
	0x03C90478 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C9047C ADD X0, X0, 0xE9E
	0x03C90480 BL 0x1C16CB8
	0x03C90484 MOV X8, X0
	0x03C90488 STR X0, [X20 + 0x20]
	0x03C9048C ADD X0, X31, 0x8
	0x03C90490 BLR X8
	0x03C90494 TBZ X0, 0x0, 0x3C9055C
	0x03C90498 ADRP X20, 0x463000
	0x03C9049C LDR X20, [X20 + 0x5F8]
	0x03C904A0 LDR W21, [X19]
	0x03C904A4 LDR X0, [X20]
	0x03C904A8 LDR W8, [X0 + 0xE0]
	0x03C904AC CBNZ W8, 0x3C904B4
	0x03C904B0 BL 0x1C16DFC
	0x03C904B4 BL 0x3C8A804
	0x03C904B8 CMP W21, W0
	0x03C904BC B.NE 0x3C904FC
	0x03C904C0 LDR X0, [X20]
	0x03C904C4 LDR W8, [X0 + 0xE0]
	0x03C904C8 CBNZ W8, 0x3C904D0
	0x03C904CC BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x757000
	007 Move X8, [X21+3880]
	008 Move W19, W1
	009 Move X20, X0
	010 Move [X31], S0
	011 Move [X31+8], S1
	012 Move [X31+8], S2
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51814400
	016 Add X0, X0, 1700
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X21+3880], X0
	020 Add X1, X31, 0
	021 Move X0, X20
	022 Move W2, W19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Move X21, [X31+24]
	028 Add X31, X31, 48
	029 Return 

Method: System.Void AddForceAtPosition(UnityEngine.Vector3 force, UnityEngine.Vector3 position, UnityEngine.ForceMode mode)

Disassembly:
	0x03C90524 LDR X8, [X8 + 0xA28]
	0x03C90528 LDR X0, [X8]
	0x03C9052C LDR W8, [X0 + 0xE0]
	0x03C90530 CBNZ W8, 0x3C90538
	0x03C90534 BL 0x1C16DFC
	0x03C90538 ADRP X8, 0x4D0000
	0x03C9053C LDR X8, [X8 + 0x930]
	0x03C90540 MOV X1, X31
	0x03C90544 LDR X0, [X8]
	0x03C90548 BL 0x3C06A04
	0x03C9054C LDP X20, X19, [X31 + 0x20]
	0x03C90550 LDP X30, X21, [X31 + 0x10]
	0x03C90554 LDR V8, [X31], #0x30
	0x03C90558 RET
	0x03C9055C ADRP X0, 0x463000
	0x03C90560 LDR X0, [X0 + 0x5B0]
	0x03C90564 BL 0x1C16D08
	0x03C90568 BL 0x1C16F10
	0x03C9056C MOV X19, X0
	0x03C90570 ADRP X0, 0x4D0000
	0x03C90574 LDR X0, [X0 + 0x890]
	0x03C90578 BL 0x1C16D08
	0x03C9057C MOV X1, X0
	0x03C90580 MOV X0, X19
	0x03C90584 MOV X2, X31
	0x03C90588 BL 0x337DF1C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x757000
	007 Move X8, [X21+3888]
	008 Move W19, W1
	009 Move X20, X0
	010 Move [X31+16], S0
	011 Move [X31+24], S1
	012 Move [X31+24], S2
	013 Move [X31], S3
	014 Move [X31+8], S4
	015 Move [X31+8], S5
	016 Compare X8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, -51863552
	019 Add X0, X0, 887
	020 Call 0x1C17CB8
	021 Move X8, X0
	022 Move [X21+3888], X0
	023 Add X1, X31, 16
	024 Add X2, X31, 0
	025 Move X0, X20
	026 Move W3, W19
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X20, [X31+48]
	029 Move X19, [X31+56]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Add X31, X31, 64
	033 Return 

Method: System.Void AddForceAtPosition(UnityEngine.Vector3 force, UnityEngine.Vector3 position)

Disassembly:
	0x03C905E8 STR X0, [X22 + 0x28]
	0x03C905EC ADD X0, X31, 0x8

ISIL:
	001 Move W1, W31
	002 Call Rigidbody.AddForceAtPosition, X0, X1, X2, X3
	003 Return 

Method: System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier, UnityEngine.ForceMode mode)

Disassembly:
	0x03C905F0 MOV X1, X21
	0x03C905F4 MOV V0.16B, V8.16B
	0x03C905F8 MOV W2, W20
	0x03C905FC MOV W3, W19
	0x03C90600 BLR X8
	0x03C90604 LDP X20, X19, [X31 + 0x30]
	0x03C90608 LDP X22, X21, [X31 + 0x20]
	0x03C9060C LDR X30, [X31 + 0x18]
	0x03C90610 LDR V8, [X31 + 0x10]
	0x03C90614 AND W0, W0, 0x1
	0x03C90618 ADD X31, X31, 0x40
	0x03C9061C RET
	0x03C90620 STR D8, [X31 - 0x40]!
	0x03C90624 STP X30, X23, [X31 + 0x10]
	0x03C90628 STP X22, X21, [X31 + 0x20]
	0x03C9062C STP X20, X19, [X31 + 0x30]
	0x03C90630 ADRP X23, 0x757000
	0x03C90634 LDR X4, [X23 + 0x28]
	0x03C90638 MOV W19, W3
	0x03C9063C MOV W20, W2
	0x03C90640 MOV V8.16B, V0.16B
	0x03C90644 MOV X21, X1
	0x03C90648 MOV X22, X0
	0x03C9064C CBNZ X4, 0x3C90664
	0x03C90650 ADRP X0, 0xFFFFFFFFFCE89000
	0x03C90654 ADD X0, X0, 0x3EB
	0x03C90658 BL 0x1C16CB8
	0x03C9065C MOV X4, X0
	0x03C90660 STR X0, [X23 + 0x28]
	0x03C90664 MOV X0, X22
	0x03C90668 MOV X1, X21
	0x03C9066C MOV W2, W20
	0x03C90670 MOV W3, W19

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X30
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0x757000
	010 Move X8, [X21+3896]
	011 Move W19, W1
	012 Move V8, V5
	013 Move V9, V4
	014 Move V10, V0
	015 Move X20, X0
	016 Move [X31], S1
	017 Move [X31+8], S2
	018 Move [X31+8], S3
	019 Compare X8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, -51855360
	022 Add X0, X0, 1547
	023 Call 0x1C17CB8
	024 Move X8, X0
	025 Move [X21+3896], X0
	026 Add X1, X31, 0
	027 Move X0, X20
	028 Move V0, V10
	029 Move V1, V9
	030 Move V2, V8
	031 Move W2, W19
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X20, [X31+64]
	034 Move X19, [X31+72]
	035 Move X30, [X31+48]
	036 Move X21, [X31+56]
	037 Move D9, [X31+32]
	038 Move D8, [X31+40]
	039 Move V10, [X31+16]
	040 Add X31, X31, 80
	041 Return 

Method: System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier)

Disassembly:
	0x03C906F0 LDP X20, X19, [X31 + 0x30]
	0x03C906F4 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move W1, W31
	002 Call Rigidbody.AddExplosionForce, X0, V0, X1, V1, V2, X2
	003 Return 

Method: System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius)

Disassembly:
	0x03C906F8 LDP X30, X23, [X31 + 0x10]
	0x03C906FC AND W0, W0, 0x1
	0x03C90700 LDR V8, [X31], #0x40

ISIL:
	001 Move S5, W31
	002 Move W1, W31
	003 Call Rigidbody.AddExplosionForce, X0, V0, X1, V1, V2, X2
	004 Return 

Method: System.Void .ctor()

Disassembly:
	0x03C90704 RET
	0x03C90708 STR D8, [X31 - 0x40]!

ISIL:
	001 Move X1, X31
	002 Call Component..ctor, X0
	003 Return 

Method: System.Void get_velocity_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C8F8C4 BR X3
	0x03C8F8C8 SUB X31, X31, 0x40
	0x03C8F8CC STP X30, X21, [X31 + 0x20]
	0x03C8F8D0 STP X20, X19, [X31 + 0x30]
	0x03C8F8D4 ADRP X21, 0x757000
	0x03C8F8D8 MOV X19, X8
	0x03C8F8DC LDR X8, [X21 + 0xF70]
	0x03C8F8E0 MOV X20, X0
	0x03C8F8E4 STP X31, X31, [X31 + 0x8]
	0x03C8F8E8 STR X31, [X31 + 0x18]
	0x03C8F8EC CBNZ X8, 0x3C8F904
	0x03C8F8F0 ADRP X0, 0xFFFFFFFFFCE96000
	0x03C8F8F4 ADD X0, X0, 0x6FA
	0x03C8F8F8 BL 0x1C16CB8
	0x03C8F8FC MOV X8, X0
	0x03C8F900 STR X0, [X21 + 0xF70]
	0x03C8F904 ADD X1, X31, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3776]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51826688
	012 Add X0, X0, 1077
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3776], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_velocity_Injected(ref UnityEngine.Vector3 value)

Disassembly:
	0x03C8F95C STR X0, [X21 + 0xF70]
	0x03C8F960 MOV X0, X20
	0x03C8F964 MOV X1, X19
	0x03C8F968 LDP X20, X19, [X31 + 0x10]
	0x03C8F96C LDP X30, X21, [X31], #0x20
	0x03C8F970 BR X2
	0x03C8F974 STR X30, [X31 - 0x20]!
	0x03C8F978 STP X20, X19, [X31 + 0x10]
	0x03C8F97C ADRP X20, 0x757000
	0x03C8F980 LDR X8, [X20 + 0xF78]
	0x03C8F984 MOV X19, X0
	0x03C8F988 STR W1, [X31 + 0x8]
	0x03C8F98C CBNZ X8, 0x3C8F9A4
	0x03C8F990 ADRP X0, 0xFFFFFFFFFCE6C000
	0x03C8F994 ADD X0, X0, 0xA23
	0x03C8F998 BL 0x1C16CB8
	0x03C8F99C MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3784]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52023296
	012 Add X0, X0, 2002
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3784], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_angularVelocity_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C8F9FC BR X2
	0x03C8FA00 MOV X1, X31
	0x03C8FA04 B 0x3C32494
	0x03C8FA08 SUB X31, X31, 0x30
	0x03C8FA0C STR X30, [X31 + 0x10]
	0x03C8FA10 STP X20, X19, [X31 + 0x20]
	0x03C8FA14 ADRP X20, 0x757000
	0x03C8FA18 LDR X8, [X20 + 0xF98]
	0x03C8FA1C MOV X19, X0
	0x03C8FA20 STP S0, S1, [X31]
	0x03C8FA24 STR S2, [X31 + 0x8]
	0x03C8FA28 CBNZ X8, 0x3C8FA40
	0x03C8FA2C ADRP X0, 0xFFFFFFFFFCE7A000
	0x03C8FA30 ADD X0, X0, 0xD16
	0x03C8FA34 BL 0x1C16CB8
	0x03C8FA38 MOV X8, X0
	0x03C8FA3C STR X0, [X20 + 0xF98]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3792]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52023296
	012 Add X0, X0, 2069
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3792], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_angularVelocity_Injected(ref UnityEngine.Vector3 value)

Disassembly:
	0x03C8FA94 LDP X20, X19, [X31 + 0x10]
	0x03C8FA98 LDP X30, X21, [X31], #0x20
	0x03C8FA9C BR X2
	0x03C8FAA0 STR X30, [X31 - 0x20]!
	0x03C8FAA4 STP X20, X19, [X31 + 0x10]
	0x03C8FAA8 ADRP X20, 0x757000
	0x03C8FAAC LDR X1, [X20 + 0xF80]
	0x03C8FAB0 MOV X19, X0
	0x03C8FAB4 CBNZ X1, 0x3C8FACC
	0x03C8FAB8 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C8FABC ADD X0, X0, 0x208
	0x03C8FAC0 BL 0x1C16CB8
	0x03C8FAC4 MOV X1, X0
	0x03C8FAC8 STR X0, [X20 + 0xF80]
	0x03C8FACC MOV X0, X19
	0x03C8FAD0 LDP X20, X19, [X31 + 0x10]
	0x03C8FAD4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3800]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52023296
	012 Add X0, X0, 2143
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3800], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_worldCenterOfMass_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C8FE4C ADD X1, X31, 0x0
	0x03C8FE50 MOV X0, X19
	0x03C8FE54 BLR X8
	0x03C8FE58 LDP S0, S1, [X31]
	0x03C8FE5C LDR V2, [X31 + 0x8]
	0x03C8FE60 LDP X20, X19, [X31 + 0x20]
	0x03C8FE64 LDR X30, [X31 + 0x10]
	0x03C8FE68 ADD X31, X31, 0x30
	0x03C8FE6C RET
	0x03C8FE70 STP X30, X21, [X31 - 0x20]!
	0x03C8FE74 STP X20, X19, [X31 + 0x10]
	0x03C8FE78 ADRP X21, 0x757000
	0x03C8FE7C LDR X2, [X21 + 0xFE0]
	0x03C8FE80 MOV X19, X1
	0x03C8FE84 MOV X20, X0
	0x03C8FE88 CBNZ X2, 0x3C8FEA0
	0x03C8FE8C ADRP X0, 0xFFFFFFFFFCE82000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3808]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51949568
	012 Add X0, X0, 2726
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3808], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_inertiaTensor_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C8FEEC ADD X1, X31, 0x0
	0x03C8FEF0 MOV X0, X19
	0x03C8FEF4 BLR X8
	0x03C8FEF8 LDP X20, X19, [X31 + 0x20]
	0x03C8FEFC LDR X30, [X31 + 0x10]
	0x03C8FF00 ADD X31, X31, 0x30
	0x03C8FF04 RET
	0x03C8FF08 STP X30, X21, [X31 - 0x20]!
	0x03C8FF0C STP X20, X19, [X31 + 0x10]
	0x03C8FF10 ADRP X21, 0x757000
	0x03C8FF14 LDR X2, [X21 + 0xFE8]
	0x03C8FF18 MOV X19, X1
	0x03C8FF1C MOV X20, X0
	0x03C8FF20 CBNZ X2, 0x3C8FF38
	0x03C8FF24 ADRP X0, 0xFFFFFFFFFCE80000
	0x03C8FF28 ADD X0, X0, 0xB65
	0x03C8FF2C BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3816]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51949568
	012 Add X0, X0, 2802
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3816], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_position_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C8FFD0 MOV X2, X0
	0x03C8FFD4 STR X0, [X21 + 0xFF0]
	0x03C8FFD8 MOV X0, X20
	0x03C8FFDC MOV X1, X19
	0x03C8FFE0 LDP X20, X19, [X31 + 0x10]
	0x03C8FFE4 LDP X30, X21, [X31], #0x20
	0x03C8FFE8 BR X2
	0x03C8FFEC SUB X31, X31, 0x30
	0x03C8FFF0 STR X30, [X31 + 0x10]
	0x03C8FFF4 STP X20, X19, [X31 + 0x20]
	0x03C8FFF8 ADRP X20, 0x757000
	0x03C8FFFC LDR X8, [X20 + 0xFF8]
	0x03C90000 MOV X19, X0
	0x03C90004 STP S0, S1, [X31]
	0x03C90008 STR S2, [X31 + 0x8]
	0x03C9000C CBNZ X8, 0x3C90024
	0x03C90010 ADRP X0, 0xFFFFFFFFFCE71000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X2, [X21+3824]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51859456
	012 Add X0, X0, 820
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3824], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_position_Injected(ref UnityEngine.Vector3 value)

Disassembly:
	0x03C90068 MOV X2, X0
	0x03C9006C STR X0, [X21 + 0xFF8]
	0x03C90070 MOV X0, X20
	0x03C90074 MOV X1, X19
	0x03C90078 LDP X20, X19, [X31 + 0x10]
	0x03C9007C LDP X30, X21, [X31], #0x20
	0x03C90080 BR X2
	0x03C90084 SUB X31, X31, 0x30
	0x03C90088 STR X30, [X31 + 0x10]
	0x03C9008C STP X20, X19, [X31 + 0x20]
	0x03C90090 ADRP X20, 0x757000
	0x03C90094 LDR X8, [X20 + 0x10]
	0x03C90098 MOV X19, X0
	0x03C9009C STR W31, [X31 + 0x8]
	0x03C900A0 STR X31, [X31]
	0x03C900A4 CBNZ X8, 0x3C900BC
	0x03C900A8 ADRP X0, 0xFFFFFFFFFCE5F000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x757000
	006 Move X2, [X21+3832]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51830784
	012 Add X0, X0, 1144
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3832], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_rotation_Injected(out UnityEngine.Quaternion ret)

Disassembly:
	0x03C90104 BL 0x1C16CB8
	0x03C90108 MOV X2, X0
	0x03C9010C STR X0, [X21 + 0x10]
	0x03C90110 MOV X0, X20
	0x03C90114 MOV X1, X19
	0x03C90118 LDP X20, X19, [X31 + 0x10]
	0x03C9011C LDP X30, X21, [X31], #0x20
	0x03C90120 BR X2
	0x03C90124 STR X30, [X31 - 0x20]!
	0x03C90128 STP X20, X19, [X31 + 0x10]
	0x03C9012C ADRP X20, 0x757000
	0x03C90130 LDR X1, [X20]
	0x03C90134 MOV X19, X0
	0x03C90138 CBNZ X1, 0x3C90150
	0x03C9013C ADRP X0, 0xFFFFFFFFFCE71000
	0x03C90140 ADD X0, X0, 0x72F
	0x03C90144 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x757000
	006 Move X2, [X21+3840]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51945472
	012 Add X0, X0, 2032
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3840], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)

Disassembly:
	0x03C9019C LDR X30, [X31 + 0x8]
	0x03C901A0 MOV V0.16B, V8.16B
	0x03C901A4 LDR V8, [X31], #0x20
	0x03C901A8 BR X1
	0x03C901AC LDP S0, S1, [X0]
	0x03C901B0 LDR V2, [X0 + 0x8]
	0x03C901B4 RET
	0x03C901B8 LDP S0, S1, [X0 + 0xC]
	0x03C901BC LDR V2, [X0 + 0x14]
	0x03C901C0 RET
	0x03C901C4 STR X30, [X31 - 0x30]!
	0x03C901C8 STP X22, X21, [X31 + 0x10]
	0x03C901CC STP X20, X19, [X31 + 0x20]
	0x03C901D0 ADRP X19, 0x757000
	0x03C901D4 ADRP X22, 0x463000
	0x03C901D8 ADRP X21, 0x463000
	0x03C901DC LDRB W8, [X19 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x757000
	006 Move X2, [X21+3848]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51871744
	012 Add X0, X0, 641
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3848], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void MovePosition_Injected(ref UnityEngine.Vector3 position)

Disassembly:
	0x03C90234 ADD X1, X31, 0xC
	0x03C90238 STR W8, [X31 + 0xC]
	0x03C9023C BL 0x1C16E04
	0x03C90240 CBZ X19, 0x3C90294
	0x03C90244 MOV X20, X0
	0x03C90248 CBZ X0, 0x3C90260
	0x03C9024C LDR X8, [X19]
	0x03C90250 MOV X0, X20
	0x03C90254 LDR X1, [X8 + 0x40]
	0x03C90258 BL 0x1C16E00
	0x03C9025C CBZ X0, 0x3C9029C
	0x03C90260 LDR W8, [X19 + 0x18]
	0x03C90264 CBZ W8, 0x3C90298
	0x03C90268 ADRP X8, 0x4AD000
	0x03C9026C LDR X8, [X8 + 0x6F8]
	0x03C90270 STR X20, [X19 + 0x20]
	0x03C90274 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x757000
	006 Move X2, [X21+3856]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51798016
	012 Add X0, X0, 330
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3856], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void MoveRotation_Injected(ref UnityEngine.Quaternion rot)

Disassembly:
	0x03C902CC STP X20, X19, [X31 + 0x10]
	0x03C902D0 ADRP X21, 0x757000
	0x03C902D4 LDRB W8, [X21 + 0x19]
	0x03C902D8 MOV X20, X1
	0x03C902DC MOV X19, X0
	0x03C902E0 TBNZ X8, 0x0, 0x3C902F8
	0x03C902E4 ADRP X0, 0x4D0000
	0x03C902E8 LDR X0, [X0 + 0x928]
	0x03C902EC BL 0x1C16CF4
	0x03C902F0 MOVZ W8, 0x1
	0x03C902F4 STRB W8, [X21 + 0x19]
	0x03C902F8 CBZ X20, 0x3C90314
	0x03C902FC ADRP X8, 0x4D0000
	0x03C90300 LDR X8, [X8 + 0x928]
	0x03C90304 LDR X9, [X20]
	0x03C90308 LDR X8, [X8]
	0x03C9030C CMP X9, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x757000
	006 Move X2, [X21+3864]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51855360
	012 Add X0, X0, 1392
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3864], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void AddForce_Injected(ref UnityEngine.Vector3 force, UnityEngine.ForceMode mode)

Disassembly:
	0x03C90420 STP X20, X19, [X31 + 0x20]
	0x03C90424 ADRP X20, 0x757000
	0x03C90428 LDRB W8, [X20 + 0x1A]
	0x03C9042C MOV V8.16B, V0.16B
	0x03C90430 MOV X19, X0
	0x03C90434 TBNZ X8, 0x0, 0x3C90464
	0x03C90438 ADRP X0, 0x463000
	0x03C9043C LDR X0, [X0 + 0xA28]
	0x03C90440 BL 0x1C16CF4
	0x03C90444 ADRP X0, 0x463000
	0x03C90448 LDR X0, [X0 + 0x5F8]
	0x03C9044C BL 0x1C16CF4
	0x03C90450 ADRP X0, 0x4D0000
	0x03C90454 LDR X0, [X0 + 0x930]
	0x03C90458 BL 0x1C16CF4
	0x03C9045C MOVZ W8, 0x1
	0x03C90460 STRB W8, [X20 + 0x1A]
	0x03C90464 ADRP X20, 0x757000
	0x03C90468 LDR W9, [X19]
	0x03C9046C LDR X8, [X20 + 0x20]
	0x03C90470 STR W9, [X31 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x757000
	007 Move X3, [X22+3872]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51855360
	014 Add X0, X0, 1462
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3872], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void AddTorque_Injected(ref UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)

Disassembly:
	0x03C904D0 ADRP X21, 0x756000
	0x03C904D4 LDR X8, [X21 + 0xD40]
	0x03C904D8 CBNZ X8, 0x3C904F0
	0x03C904DC ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C904E0 ADD X0, X0, 0x5D3
	0x03C904E4 BL 0x1C16CB8
	0x03C904E8 MOV X8, X0
	0x03C904EC STR X0, [X21 + 0xD40]
	0x03C904F0 BLR X8
	0x03C904F4 CMP W0, 0x2
	0x03C904F8 B.NE 0x3C90520
	0x03C904FC LDR X0, [X20]
	0x03C90500 LDR W19, [X19]
	0x03C90504 LDR W8, [X0 + 0xE0]
	0x03C90508 CBNZ W8, 0x3C90510
	0x03C9050C BL 0x1C16DFC
	0x03C90510 MOV X0, X19
	0x03C90514 MOV V0.16B, V8.16B
	0x03C90518 BL 0x3C8D19C
	0x03C9051C B 0x3C9054C
	0x03C90520 ADRP X8, 0x463000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x757000
	007 Move X3, [X22+3880]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51814400
	014 Add X0, X0, 1700
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3880], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void AddForceAtPosition_Injected(ref UnityEngine.Vector3 force, ref UnityEngine.Vector3 position, UnityEngine.ForceMode mode)

Disassembly:
	0x03C9058C ADRP X0, 0x4D0000
	0x03C90590 LDR X0, [X0 + 0x938]
	0x03C90594 BL 0x1C16D08
	0x03C90598 MOV X1, X0
	0x03C9059C MOV X0, X19
	0x03C905A0 BL 0x1C16DEC
	0x03C905A4 SUB X31, X31, 0x40
	0x03C905A8 STR D8, [X31 + 0x10]
	0x03C905AC STR X30, [X31 + 0x18]
	0x03C905B0 STP X22, X21, [X31 + 0x20]
	0x03C905B4 STP X20, X19, [X31 + 0x30]
	0x03C905B8 ADRP X22, 0x757000
	0x03C905BC LDR X8, [X22 + 0x28]
	0x03C905C0 MOV W19, W3
	0x03C905C4 MOV W20, W2
	0x03C905C8 MOV V8.16B, V0.16B
	0x03C905CC MOV X21, X1
	0x03C905D0 STR W0, [X31 + 0x8]
	0x03C905D4 CBNZ X8, 0x3C905EC
	0x03C905D8 ADRP X0, 0xFFFFFFFFFCE89000
	0x03C905DC ADD X0, X0, 0x3EB
	0x03C905E0 BL 0x1C16CB8
	0x03C905E4 MOV X8, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x757000
	008 Move X4, [X23+3888]
	009 Move W19, W3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51863552
	016 Add X0, X0, 887
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+3888], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move X2, X20
	023 Move W3, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Void AddExplosionForce_Injected(System.Single explosionForce, ref UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier, UnityEngine.ForceMode mode)

Disassembly:
	0x03C90674 LDP X20, X19, [X31 + 0x30]
	0x03C90678 LDP X22, X21, [X31 + 0x20]
	0x03C9067C LDP X30, X23, [X31 + 0x10]
	0x03C90680 MOV V0.16B, V8.16B
	0x03C90684 LDR V8, [X31], #0x40
	0x03C90688 BR X4
	0x03C9068C STR D8, [X31 - 0x40]!
	0x03C90690 STP X30, X23, [X31 + 0x10]
	0x03C90694 STP X22, X21, [X31 + 0x20]
	0x03C90698 STP X20, X19, [X31 + 0x30]
	0x03C9069C ADRP X23, 0x757000
	0x03C906A0 LDR X8, [X23 + 0x30]
	0x03C906A4 MOV W19, W4
	0x03C906A8 MOV W20, W3
	0x03C906AC MOV X21, X2
	0x03C906B0 MOV V8.16B, V0.16B
	0x03C906B4 MOV X22, X1
	0x03C906B8 STR W0, [X31 + 0x8]
	0x03C906BC CBNZ X8, 0x3C906D4
	0x03C906C0 ADRP X0, 0xFFFFFFFFFCE67000
	0x03C906C4 ADD X0, X0, 0xA5D
	0x03C906C8 BL 0x1C16CB8
	0x03C906CC MOV X8, X0
	0x03C906D0 STR X0, [X23 + 0x30]
	0x03C906D4 ADD X0, X31, 0x8
	0x03C906D8 MOV X1, X22
	0x03C906DC MOV V0.16B, V8.16B
	0x03C906E0 MOV X2, X21
	0x03C906E4 MOV W3, W20
	0x03C906E8 MOV W4, W19
	0x03C906EC BLR X8

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x757000
	010 Move X3, [X22+3896]
	011 Move W19, W2
	012 Move V8, V2
	013 Move V9, V1
	014 Move X20, X1
	015 Move V10, V0
	016 Move X21, X0
	017 Compare X3, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51855360
	020 Add X0, X0, 1547
	021 Call 0x1C17CB8
	022 Move X3, X0
	023 Move [X22+3896], X0
	024 Move X0, X21
	025 Move X1, X20
	026 Move V1, V9
	027 Move V2, V8
	028 Move W2, W19
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Move X22, [X31+32]
	032 Move X21, [X31+40]
	033 Move X30, [X31+24]
	034 Move D9, [X31+8]
	035 Move D8, [X31+16]
	036 Move V0, V10
	037 Move V10, [X31+64]
	038 CallNoReturn X3

