Type: UnityEngine.RaycastHit

Method: UnityEngine.Collider get_collider()

Disassembly:
	0x03C8F5C0 MOV X4, X0
	0x03C8F5C4 STR X0, [X23 + 0xF30]
	0x03C8F5C8 MOV X0, X22
	0x03C8F5CC MOV X1, X21
	0x03C8F5D0 MOV X2, X20
	0x03C8F5D4 MOV W3, W19
	0x03C8F5D8 LDP X20, X19, [X31 + 0x20]
	0x03C8F5DC LDP X22, X21, [X31 + 0x10]
	0x03C8F5E0 LDP X30, X23, [X31], #0x30
	0x03C8F5E4 BR X4
	0x03C8F5E8 MOV W1, W31
	0x03C8F5EC B 0x3C8F524
	0x03C8F5F0 SUB X31, X31, 0x50
	0x03C8F5F4 STR D10, [X31 + 0x10]
	0x03C8F5F8 STP D9, D8, [X31 + 0x20]
	0x03C8F5FC STP X30, X21, [X31 + 0x30]
	0x03C8F600 STP X20, X19, [X31 + 0x40]
	0x03C8F604 ADRP X21, 0x757000
	0x03C8F608 LDR X8, [X21 + 0xF38]
	0x03C8F60C MOV W19, W1
	0x03C8F610 MOV V8.16B, V5.16B
	0x03C8F614 MOV V9.16B, V4.16B
	0x03C8F618 MOV V10.16B, V0.16B
	0x03C8F61C MOV X20, X0
	0x03C8F620 STP S1, S2, [X31]
	0x03C8F624 STR S3, [X31 + 0x8]
	0x03C8F628 CBNZ X8, 0x3C8F640
	0x03C8F62C ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C8F630 ADD X0, X0, 0x60B
	0x03C8F634 BL 0x1C16CB8
	0x03C8F638 MOV X8, X0
	0x03C8F63C STR X0, [X21 + 0xF38]
	0x03C8F640 ADD X1, X31, 0x0
	0x03C8F644 MOV X0, X20
	0x03C8F648 MOV V0.16B, V10.16B
	0x03C8F64C MOV V1.16B, V9.16B
	0x03C8F650 MOV V2.16B, V8.16B
	0x03C8F654 MOV W2, W19
	0x03C8F658 BLR X8
	0x03C8F65C LDP X20, X19, [X31 + 0x40]
	0x03C8F660 LDP X30, X21, [X31 + 0x30]
	0x03C8F664 LDP D9, D8, [X31 + 0x20]
	0x03C8F668 LDR V10, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X20, 0x465000
	007 Move W8, [X21+3640]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x4D2000
	015 Move X0, [X0+2336]
	016 Call 0x1C17CF4
	017 Move X0, 0x465000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3640], W8
	022 Move X0, [X20]
	023 Move W19, [X19+40]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W0, W19
	029 Move X1, X31
	030 Call Object.FindObjectFromInstanceID, X0
	031 Compare X0, 0
	032 JumpIfEqual {46}
	033 Move X8, 0x4D2000
	034 Move X8, [X8+2336]
	035 Move X9, [X0]
	036 Move X8, [X8]
	037 Move W11, [X9+304]
	038 Move W10, [X8+304]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X31
	041 Move X9, [X9+200]
	042 Add X9, X9, X10
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return X0

Method: UnityEngine.Vector3 get_point()

Disassembly:
	0x03C8F66C ADD X31, X31, 0x50
	0x03C8F670 RET
	0x03C8F674 STR D10, [X31 - 0x40]!

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Move V2, [X0+8]
	004 Return X0

Method: UnityEngine.Vector3 get_normal()

Disassembly:
	0x03C8F678 STP D9, D8, [X31 + 0x8]
	0x03C8F67C STR X30, [X31 + 0x18]
	0x03C8F680 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move S0, [X0+12]
	002 Move S1, [X0+16]
	003 Move V2, [X0+20]
	004 Return X0

Method: System.Single get_distance()

Disassembly:
	0x03C8F684 STP X20, X19, [X31 + 0x30]
	0x03C8F688 ADRP X22, 0x757000

ISIL:
	001 Move V0, [X0+28]
	002 Return V0

Method: System.Void set_distance(System.Single value)

Disassembly:
	0x03C8F68C LDR X3, [X22 + 0xF38]
	0x03C8F690 MOV W19, W2

ISIL:
	001 Move [X0+28], S0
	002 Return 

Method: UnityEngine.Transform get_transform()

Disassembly:
	0x03C8F694 MOV V8.16B, V2.16B
	0x03C8F698 MOV V9.16B, V1.16B
	0x03C8F69C MOV X20, X1
	0x03C8F6A0 MOV V10.16B, V0.16B
	0x03C8F6A4 MOV X21, X0
	0x03C8F6A8 CBNZ X3, 0x3C8F6C0
	0x03C8F6AC ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C8F6B0 ADD X0, X0, 0x60B
	0x03C8F6B4 BL 0x1C16CB8
	0x03C8F6B8 MOV X3, X0
	0x03C8F6BC STR X0, [X22 + 0xF38]
	0x03C8F6C0 MOV X0, X21
	0x03C8F6C4 MOV X1, X20
	0x03C8F6C8 MOV V1.16B, V9.16B
	0x03C8F6CC MOV V2.16B, V8.16B
	0x03C8F6D0 MOV W2, W19
	0x03C8F6D4 LDP X20, X19, [X31 + 0x30]
	0x03C8F6D8 LDP X22, X21, [X31 + 0x20]
	0x03C8F6DC LDR X30, [X31 + 0x18]
	0x03C8F6E0 LDP D9, D8, [X31 + 0x8]
	0x03C8F6E4 MOV V0.16B, V10.16B
	0x03C8F6E8 LDR V10, [X31], #0x40
	0x03C8F6EC BR X3
	0x03C8F6F0 MOV W1, W31
	0x03C8F6F4 B 0x3C8F5F0
	0x03C8F6F8 FMOV S5, W31
	0x03C8F6FC MOV W1, W31
	0x03C8F700 B 0x3C8F5F0
	0x03C8F704 MOV X1, X31
	0x03C8F708 B 0x3C32494
	0x03C8F70C STR X30, [X31 - 0x20]!
	0x03C8F710 STP X20, X19, [X31 + 0x10]
	0x03C8F714 ADRP X20, 0x757000
	0x03C8F718 LDR X1, [X20 + 0xF40]
	0x03C8F71C MOV X19, X0
	0x03C8F720 CBNZ X1, 0x3C8F738
	0x03C8F724 ADRP X0, 0xFFFFFFFFFCE80000
	0x03C8F728 ADD X0, X0, 0xB41
	0x03C8F72C BL 0x1C16CB8
	0x03C8F730 MOV X1, X0
	0x03C8F734 STR X0, [X20 + 0xF40]
	0x03C8F738 MOV X0, X19
	0x03C8F73C LDP X20, X19, [X31 + 0x10]
	0x03C8F740 LDR X30, [X31], #0x20
	0x03C8F744 BR X1
	0x03C8F748 STP X30, X21, [X31 - 0x20]!
	0x03C8F74C STP X20, X19, [X31 + 0x10]
	0x03C8F750 ADRP X21, 0x757000
	0x03C8F754 LDR X2, [X21 + 0xF48]
	0x03C8F758 MOV W19, W1
	0x03C8F75C MOV X20, X0
	0x03C8F760 CBNZ X2, 0x3C8F778
	0x03C8F764 ADRP X0, 0xFFFFFFFFFCE76000
	0x03C8F768 ADD X0, X0, 0x836
	0x03C8F76C BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x758000
	006 Move X21, 0x465000
	007 Move W8, [X20+3641]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x465000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3641], W8
	019 Move X0, X19
	020 Call RaycastHit.get_rigidbody, X0
	021 Move X8, [X21]
	022 Move X20, X0
	023 Move W9, [X8+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X8
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {38}
	036 Compare X20, 0
	037 JumpIfNotEqual {60}
	038 Move X0, X19
	039 Call RaycastHit.get_collider, X0
	040 Move X8, [X21]
	041 Move X20, X0
	042 Move W9, [X8+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {47}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {68}
	055 Move X0, X19
	056 Call RaycastHit.get_collider, X0
	057 Compare X0, 0
	058 JumpIfEqual {74}
	059 Move X20, X0
	060 Move X0, X20
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Call Component.get_transform, X0
	067 Return X0
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X0, X31
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return X0
	074 Call 0x1C17F20

Method: UnityEngine.Rigidbody get_rigidbody()

Disassembly:
	0x03C8F770 MOV X2, X0
	0x03C8F774 STR X0, [X21 + 0xF48]
	0x03C8F778 AND W1, W19, 0x1
	0x03C8F77C MOV X0, X20
	0x03C8F780 LDP X20, X19, [X31 + 0x10]
	0x03C8F784 LDP X30, X21, [X31], #0x20
	0x03C8F788 BR X2
	0x03C8F78C STR X30, [X31 - 0x20]!
	0x03C8F790 STP X20, X19, [X31 + 0x10]
	0x03C8F794 ADRP X20, 0x757000
	0x03C8F798 LDR X1, [X20 + 0xF58]
	0x03C8F79C MOV X19, X0
	0x03C8F7A0 CBNZ X1, 0x3C8F7B8
	0x03C8F7A4 ADRP X0, 0xFFFFFFFFFCE6A000
	0x03C8F7A8 ADD X0, X0, 0xB52
	0x03C8F7AC BL 0x1C16CB8
	0x03C8F7B0 MOV X1, X0
	0x03C8F7B4 STR X0, [X20 + 0xF58]
	0x03C8F7B8 MOV X0, X19
	0x03C8F7BC LDP X20, X19, [X31 + 0x10]
	0x03C8F7C0 LDR X30, [X31], #0x20
	0x03C8F7C4 BR X1
	0x03C8F7C8 STP X30, X21, [X31 - 0x20]!
	0x03C8F7CC STP X20, X19, [X31 + 0x10]
	0x03C8F7D0 ADRP X21, 0x757000
	0x03C8F7D4 LDR X2, [X21 + 0xF60]
	0x03C8F7D8 MOV W19, W1
	0x03C8F7DC MOV X20, X0
	0x03C8F7E0 CBNZ X2, 0x3C8F7F8
	0x03C8F7E4 ADRP X0, 0xFFFFFFFFFCE8E000
	0x03C8F7E8 ADD X0, X0, 0x6D9
	0x03C8F7EC BL 0x1C16CB8
	0x03C8F7F0 MOV X2, X0
	0x03C8F7F4 STR X0, [X21 + 0xF60]
	0x03C8F7F8 AND W1, W19, 0x1
	0x03C8F7FC MOV X0, X20
	0x03C8F800 LDP X20, X19, [X31 + 0x10]
	0x03C8F804 LDP X30, X21, [X31], #0x20
	0x03C8F808 BR X2
	0x03C8F80C SUB X31, X31, 0x40
	0x03C8F810 STR X30, [X31 + 0x20]
	0x03C8F814 STP X20, X19, [X31 + 0x30]
	0x03C8F818 ADRP X20, 0x757000
	0x03C8F81C LDR X8, [X20 + 0xF68]
	0x03C8F820 MOV X19, X0
	0x03C8F824 STP S0, S1, [X31 + 0x10]
	0x03C8F828 STR S2, [X31 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x758000
	006 Move X20, 0x465000
	007 Move W8, [X21+3642]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x465000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3642], W8
	019 Move X0, X19
	020 Call RaycastHit.get_collider, X0
	021 Move X8, [X20]
	022 Move X20, X0
	023 Move W9, [X8+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X8
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {56}
	036 Move X0, X19
	037 Call RaycastHit.get_collider, X0
	038 Compare X0, 0
	039 JumpIfEqual {62}
	040 Move X20, 0x758000
	041 Move X1, [X20+3920]
	042 Move X19, X0
	043 Compare X1, 0
	044 JumpIfNotEqual {50}
	045 Move X0, -51781632
	046 Add X0, X0, 3529
	047 Call 0x1C17CB8
	048 Move X1, X0
	049 Move [X20+3920], X0
	050 Move X0, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 CallNoReturn X1
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X0, X31
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

