Type: Photon.Voice.Unity.VoiceComponentImpl/LoggerImpl

Method: System.Void SetVoiceLogger(Photon.Voice.Unity.VoiceLogger voiceLogger, UnityEngine.Object obj, System.String tag)

Disassembly:
	0x03580AAC LDR X9, [X20]
	0x03580AB0 LDR X8, [X8]
	0x03580AB4 LDRB W11, [X9 + 0x130]

ISIL:
	001 Move [X0+16], X1
	002 Move [X0+24], X2
	003 Move [X0+40], X3
	004 Return 

Method: System.Void SetObjName(System.String n)

Disassembly:
	0x03580B08 LDRB W8, [X0 + 0x135]
	0x03580B0C TBNZ X8, 0x0, 0x3580B14

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: Photon.Voice.LogLevel get_Level()

Disassembly:
	0x03580B10 BL 0x1C5C684
	0x03580B14 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_Level(Photon.Voice.LogLevel value)

Disassembly:
	0x03580B18 CBNZ W8, 0x3580B20
	0x03580B1C BL 0x1C16DFC

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Void Log(Photon.Voice.LogLevel level, System.String fmt, System.Object[] args)

Disassembly:
	0x0358095C BL 0x1C16E00
	0x03580960 CBZ X0, 0x3580A10
	0x03580964 LDR W8, [X20 + 0x18]
	0x03580968 CMP W8, 0x1
	0x0358096C B.LS 0x3580A0C
	0x03580970 STR X21, [X20 + 0x28]
	0x03580974 CBZ X19, 0x3580A08
	0x03580978 ADRP X9, 0xB78000
	0x0358097C LDR X8, [X19]
	0x03580980 LDR X9, [X9 + 0x348]
	0x03580984 ADRP X10, 0xBB6000
	0x03580988 LDR X1, [X9]
	0x0358098C LDR X10, [X10 + 0x658]
	0x03580990 LDRH W9, [X8 + 0x12E]
	0x03580994 LDR X21, [X10]
	0x03580998 CBZ X9, 0x35809BC
	0x0358099C LDR X10, [X8 + 0xB0]
	0x035809A0 ADD X10, X10, 0x8
	0x035809A4 LDUR X11, [X10 - 0x8]
	0x035809A8 CMP X11, X1
	0x035809AC B.EQ 0x35809CC
	0x035809B0 SUBS X9, X9, 0x1
	0x035809B4 ADD X10, X10, 0x10
	0x035809B8 B.NE 0x35809A4
	0x035809BC MOVZ W2, 0x1
	0x035809C0 MOV X0, X19
	0x035809C4 BL 0x1C5C788
	0x035809C8 B 0x35809DC
	0x035809CC LDR W9, [X10]
	0x035809D0 ADD W9, W9, 0x1
	0x035809D4 ADD X8, X8, W9, 0x4, SXTW
	0x035809D8 ADD X0, X8, 0x138
	0x035809DC LDP X8, X4, [X0]
	0x035809E0 MOVZ W1, 0x2
	0x035809E4 MOV X0, X19
	0x035809E8 MOV X2, X21
	0x035809EC MOV X3, X20
	0x035809F0 BLR X8
	0x035809F4 LDP X20, X19, [X31 + 0x30]
	0x035809F8 LDP X22, X21, [X31 + 0x20]
	0x035809FC LDP X30, X23, [X31 + 0x10]
	0x03580A00 ADD X31, X31, 0x40
	0x03580A04 RET
	0x03580A08 BL 0x1C16F20
	0x03580A0C BL 0x1C16F28
	0x03580A10 BL 0x1C16F44
	0x03580A14 MOV X1, X31
	0x03580A18 BL 0x1C16DEC
	0x03580A1C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xE60000
	009 Move X23, 0xB74000
	010 Move W8, [X24+3785]
	011 Move X23, [X23+1432]
	012 Move X19, X3
	013 Move X20, X2
	014 Move W21, W1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xB74000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+3785], W8
	025 Move X0, [X23]
	026 Move X23, [X22+16]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X23
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {52}
	039 Move X8, [X22+16]
	040 Compare X8, 0
	041 JumpIfEqual {67}
	042 Move W8, [X8+32]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 
	052 Move X3, [X22+32]
	053 Move X2, [X22+40]
	054 Move X1, [X22+24]
	055 Move W0, W21
	056 Move X4, X20
	057 Move X5, X19
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X30, [X31+64]
	065 Call UnityLogger.Log, X0, X1, X2, X3, X4, X5
	066 Return 
	067 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03580AB8 LDRB W10, [X8 + 0x130]
	0x03580ABC CMP W11, W10
	0x03580AC0 B.CC 0x3580AD8
	0x03580AC4 LDR X9, [X9 + 0xC8]
	0x03580AC8 ADD X9, X9, X10, 0x3, LSL
	0x03580ACC LDUR X9, [X9 - 0x8]
	0x03580AD0 CMP X9, X8
	0x03580AD4 B.EQ 0x3580C74
	0x03580AD8 LDR X9, [X19 + 0x20]
	0x03580ADC CBZ X9, 0x3580C90
	0x03580AE0 ADRP X8, 0xB73000
	0x03580AE4 LDR X8, [X8 + 0x9C8]
	0x03580AE8 LDR X19, [X9 + 0x18]
	0x03580AEC LDR X20, [X8]
	0x03580AF0 LDR X8, [X20 + 0x38]
	0x03580AF4 CBNZ X8, 0x3580B04
	0x03580AF8 MOV X0, X20
	0x03580AFC BL 0x1C5C6E0
	0x03580B00 LDR X8, [X20 + 0x38]
	0x03580B04 LDR X0, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE60000
	006 Move X21, 0xBB7000
	007 Move W8, [X20+3786]
	008 Move X21, [X21+1544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBB7000
	015 Move X0, [X0+1544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3786], W8
	019 Move X8, [X21]
	020 Move X0, X19
	021 Move X1, X31
	022 Move [X19+40], X8
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call Object..ctor, X0
	028 Return 

