Type: Photon.Voice.Unity.VoiceComponentImpl

Method: Photon.Voice.ILogger get_Logger()

Disassembly:
	0x03580624 ADRP X23, 0xBB6000
	0x03580628 LDR X23, [X23 + 0x640]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: Photon.Voice.Unity.VoiceLogger get_VoiceLogger()

Disassembly:
	0x0358062C LDR W21, [X19 + 0x3C]
	0x03580630 LDR X0, [X23]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Name(System.String value)

Disassembly:
	0x03580608 MOV X3, X21
	0x0358060C BLR X8
	0x03580610 MOV X0, X31
	0x03580614 BL 0x3BFB488
	0x03580618 STR W0, [X19 + 0x50]
	0x0358061C MOV X0, X19
	0x03580620 BL 0x358015C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+32], X1
	006 Move X30, [X31+16]
	007 Return 
	008 Call 0x1C17F20

Method: System.Void Awake(UnityEngine.MonoBehaviour mb)

Disassembly:
	0x0357F5F4 CBZ X8, 0x357F604
	0x0357F5F8 LDR X0, [X8 + 0x10]
	0x0357F5FC LDR X30, [X31], #0x10
	0x0357F600 RET
	0x0357F604 BL 0x1C16F20
	0x0357F608 STR X30, [X31 - 0x10]!
	0x0357F60C LDR X8, [X0 + 0x18]
	0x0357F610 CBZ X8, 0x357F620
	0x0357F614 STR X1, [X8 + 0x20]
	0x0357F618 LDR X30, [X31], #0x10
	0x0357F61C RET
	0x0357F620 BL 0x1C16F20
	0x0357F624 LDR X0, [X0 + 0x18]
	0x0357F628 RET
	0x0357F62C LDR X0, [X0 + 0x10]
	0x0357F630 RET
	0x0357F634 STR X30, [X31 - 0x60]!
	0x0357F638 STP X28, X27, [X31 + 0x10]
	0x0357F63C STP X26, X25, [X31 + 0x20]
	0x0357F640 STP X24, X23, [X31 + 0x30]
	0x0357F644 STP X22, X21, [X31 + 0x40]
	0x0357F648 STP X20, X19, [X31 + 0x50]
	0x0357F64C ADRP X20, 0xE60000
	0x0357F650 ADRP X24, 0xB74000
	0x0357F654 ADRP X21, 0xBB7000
	0x0357F658 ADRP X22, 0xBB7000
	0x0357F65C LDRB W8, [X20 + 0xECB]
	0x0357F660 LDR X24, [X24 + 0x598]
	0x0357F664 LDR X21, [X21 + 0x5D8]
	0x0357F668 LDR X22, [X22 + 0x5E0]
	0x0357F66C MOV X19, X0
	0x0357F670 TBNZ X8, 0x0, 0x357F788
	0x0357F674 ADRP X0, 0xB74000
	0x0357F678 LDR X0, [X0 + 0x9C8]
	0x0357F67C BL 0x1C16CF4
	0x0357F680 ADRP X0, 0xBB7000
	0x0357F684 LDR X0, [X0 + 0x5E0]
	0x0357F688 BL 0x1C16CF4
	0x0357F68C ADRP X0, 0xBB7000
	0x0357F690 LDR X0, [X0 + 0x5D8]
	0x0357F694 BL 0x1C16CF4
	0x0357F698 ADRP X0, 0xB74000
	0x0357F69C LDR X0, [X0 + 0x598]
	0x0357F6A0 BL 0x1C16CF4
	0x0357F6A4 ADRP X0, 0xBB7000
	0x0357F6A8 LDR X0, [X0 + 0x5E8]
	0x0357F6AC BL 0x1C16CF4
	0x0357F6B0 ADRP X0, 0xBB7000
	0x0357F6B4 LDR X0, [X0 + 0x5F0]
	0x0357F6B8 BL 0x1C16CF4
	0x0357F6BC MOVZ W8, 0x1
	0x0357F6C0 STRB W8, [X20 + 0xECB]
	0x0357F6C4 B 0x357F788
	0x0357F6C8 CBZ X20, 0x357F954
	0x0357F6CC LDR X1, [X22]
	0x0357F6D0 MOV X0, X20
	0x0357F6D4 BL 0x21E52E4
	0x0357F6D8 LDR X8, [X24]
	0x0357F6DC MOV X19, X0
	0x0357F6E0 LDR W9, [X8 + 0xE0]
	0x0357F6E4 CBNZ W9, 0x357F6F0
	0x0357F6E8 MOV X0, X8
	0x0357F6EC BL 0x1C16DFC
	0x0357F6F0 MOV X0, X19
	0x0357F6F4 MOV X1, X31
	0x0357F6F8 MOV X2, X31
	0x0357F6FC BL 0x3C354F8
	0x0357F700 TBZ X0, 0x0, 0x357F718
	0x0357F704 CBZ X19, 0x357F954
	0x0357F708 MOV X0, X19
	0x0357F70C MOV X1, X31
	0x0357F710 BL 0x3C323D4
	0x0357F714 TBNZ X0, 0x0, 0x357F934
	0x0357F718 MOV X0, X20
	0x0357F71C MOV X1, X31
	0x0357F720 BL 0x3C356F8
	0x0357F724 CBZ X0, 0x357F954
	0x0357F728 MOV X1, X31
	0x0357F72C BL 0x3C3F49C
	0x0357F730 LDR X8, [X24]
	0x0357F734 MOV X19, X0
	0x0357F738 LDR W9, [X8 + 0xE0]
	0x0357F73C CBNZ W9, 0x357F748
	0x0357F740 MOV X0, X8
	0x0357F744 BL 0x1C16DFC
	0x0357F748 MOV X0, X19
	0x0357F74C MOV X1, X31
	0x0357F750 MOV X2, X31
	0x0357F754 BL 0x3C3883C
	0x0357F758 MOV X19, X31
	0x0357F75C TBNZ X0, 0x0, 0x357F788
	0x0357F760 MOV X0, X20
	0x0357F764 MOV X1, X31
	0x0357F768 BL 0x3C356F8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE61000
	007 Move W8, [X21+3783]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xB75000
	015 Move X0, [X0+2504]
	016 Call 0x1C17CF4
	017 Move X0, 0xB75000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0xBB8000
	021 Move X0, [X0+1368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3783], W8
	025 Compare X19, 0
	026 JumpIfEqual {119}
	027 Move X22, 0xB75000
	028 Move X22, [X22+1432]
	029 Move X0, X19
	030 Move X1, X31
	031 Call Component.get_gameObject, X0
	032 Call VoiceLogger.FindLogger, X0
	033 Move [X20+16], X0
	034 Move X21, X0
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {90}
	048 Move X8, 0xB75000
	049 Move X8, [X8+2504]
	050 Move X21, [X20+24]
	051 Move X22, [X8]
	052 Move X8, [X22+56]
	053 Compare X8, 0
	054 JumpIfNotEqual {58}
	055 Move X0, X22
	056 Call 0x1C5D6E0
	057 Move X8, [X22+56]
	058 Move X0, [X8+16]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {65}
	064 Call 0x1C5D684
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X8, [X22+56]
	070 Move X0, [X8+16]
	071 Move W8, [X0+309]
	072 Move TEMP, X8
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {77}
	076 Call 0x1C5D684
	077 Compare X21, 0
	078 JumpIfEqual {119}
	079 Move X9, 0xBB8000
	080 Move X8, [X0+184]
	081 Move X9, [X9+1368]
	082 Move W1, 2
	083 Move X0, X21
	084 Move X3, [X8]
	085 Move X2, [X9]
	086 Call LoggerImpl.Log, X0, X1, X2, X3
	087 Call VoiceLogger.CreateRootLogger
	088 Move X21, X0
	089 Move [X20+16], X0
	090 Move X21, [X20+16]
	091 Move X22, [X20+24]
	092 Move X0, X19
	093 Move X1, X31
	094 Call "il2cpp_vm_object_is_inst", X0
	095 Compare X0, 0
	096 JumpIfEqual {119}
	097 Move X8, [X0]
	098 Move X9, [X8+424]
	099 Move X1, [X8+432]
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Compare X22, 0
	102 JumpIfEqual {119}
	103 Move [X22+16], X21
	104 Move [X22+24], X19
	105 Move [X22+40], X0
	106 Move X20, [X20+24]
	107 Move X0, X19
	108 Move X1, X31
	109 Call Object.get_name, X0
	110 Compare X20, 0
	111 JumpIfEqual {119}
	112 Move [X20+32], X0
	113 Move X20, [X31+32]
	114 Move X19, [X31+40]
	115 Move X22, [X31+16]
	116 Move X21, [X31+24]
	117 Move X30, [X31+48]
	118 Return 
	119 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0358023C CMP X11, X1
	0x03580240 B.EQ 0x3580260
	0x03580244 SUBS X9, X9, 0x1
	0x03580248 ADD X10, X10, 0x10
	0x0358024C B.NE 0x3580238
	0x03580250 MOVZ W2, 0x1
	0x03580254 MOV X0, X20
	0x03580258 BL 0x1C5C788
	0x0358025C B 0x3580270
	0x03580260 LDR W9, [X10]
	0x03580264 ADD W9, W9, 0x1
	0x03580268 ADD X8, X8, W9, 0x4, SXTW
	0x0358026C ADD X0, X8, 0x138
	0x03580270 LDP X8, X4, [X0]
	0x03580274 MOVZ W1, 0x3
	0x03580278 MOV X0, X20
	0x0358027C MOV X2, X22
	0x03580280 MOV X3, X21
	0x03580284 BLR X8
	0x03580288 LDR X1, [X19 + 0x48]
	0x0358028C MOV X0, X19
	0x03580290 BL 0x3580FD0
	0x03580294 LDR X1, [X19 + 0x48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE60000
	006 Move X21, 0xBB7000
	007 Move W8, [X20+3784]
	008 Move X21, [X21+1456]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBB7000
	015 Move X0, [X0+1456]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3784], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X20, X0
	022 Call LoggerImpl..ctor, X0
	023 Move [X19+24], X20
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Object..ctor, X0
	031 Return 

