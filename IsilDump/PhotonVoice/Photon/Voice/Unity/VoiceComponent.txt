Type: Photon.Voice.Unity.VoiceComponent

Method: System.Void Awake()

Disassembly:
	0x035748F8 MOV X0, X20
	0x035748FC BL 0x1C5C788
	0x03574900 B 0x3574914
	0x03574904 LDR W9, [X10]
	0x03574908 ADD W9, W9, 0x1
	0x0357490C ADD X8, X8, W9, 0x4, SXTW
	0x03574910 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X0
	003 Move X0, [X0+32]
	004 Compare X0, 0
	005 JumpIfEqual {9}
	006 Move X30, [X31+16]
	007 Call VoiceComponentImpl.Awake, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: Photon.Voice.ILogger get_Logger()

Disassembly:
	0x03574914 LDP X8, X4, [X0]
	0x03574918 MOVZ W1, 0x3
	0x0357491C MOV X0, X20
	0x03574920 MOV X2, X22
	0x03574924 MOV X3, X21
	0x03574928 BLR X8
	0x0357492C LDRB W8, [X19 + 0x89]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: Photon.Voice.Unity.VoiceLogger get_VoiceLogger()

Disassembly:
	0x035805EC ADD W9, W9, 0x1
	0x035805F0 ADD X8, X8, W9, 0x4, SXTW
	0x035805F4 ADD X0, X8, 0x138
	0x035805F8 LDP X8, X4, [X0]
	0x035805FC MOVZ W1, 0x3
	0x03580600 MOV X0, X20
	0x03580604 MOV X2, X22

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+16]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_Name(System.String value)

Disassembly:
	0x0357FFEC LDP X20, X19, [X31 + 0x10]
	0x0357FFF0 LDR X30, [X31], #0x20
	0x0357FFF4 RET
	0x0357FFF8 MOV W0, W31
	0x0357FFFC CBZ X20, 0x35800D8
	0x03580000 AND W1, W0, 0x1
	0x03580004 MOV X0, X20
	0x03580008 MOV X2, X31
	0x0358000C BL 0x3568774
	0x03580010 LDRB W1, [X19 + 0x28]
	0x03580014 MOV X0, X19
	0x03580018 BL 0x3581250
	0x0358001C LDR X0, [X19 + 0x40]
	0x03580020 CBZ X0, 0x35800D8
	0x03580024 LDR W1, [X19 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X2, X31
	005 Move X19, X1
	006 Move X20, X0
	007 Call Object.set_name, X0, X1
	008 Move X8, [X20+32]
	009 Compare X8, 0
	010 JumpIfEqual {19}
	011 Move X8, [X8+24]
	012 Compare X8, 0
	013 JumpIfEqual {19}
	014 Move [X8+32], X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 
	019 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0357513C MOVZ W8, 0x1
	0x03575140 STRB W8, [X22 + 0xE7D]
	0x03575144 LDR X0, [X21]
	0x03575148 LDR X21, [X19 + 0x80]
	0x0357514C LDR W8, [X0 + 0xE0]
	0x03575150 CBNZ W8, 0x3575158
	0x03575154 BL 0x1C16DFC
	0x03575158 MOV X0, X21
	0x0357515C MOV X1, X20
	0x03575160 MOV X2, X31
	0x03575164 BL 0x3C354F8
	0x03575168 TBZ X0, 0x0, 0x3575270
	0x0357516C LDR X9, [X19 + 0x20]
	0x03575170 STR X20, [X19 + 0x80]
	0x03575174 CBZ X9, 0x3575280
	0x03575178 ADRP X8, 0xB7E000
	0x0357517C LDR X8, [X8 + 0x9C8]
	0x03575180 LDR X20, [X9 + 0x18]
	0x03575184 LDR X21, [X8]
	0x03575188 LDR X8, [X21 + 0x38]
	0x0357518C CBNZ X8, 0x357519C
	0x03575190 MOV X0, X21
	0x03575194 BL 0x1C5C6E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE6B000
	006 Move X21, 0xBC2000
	007 Move W8, [X20+3782]
	008 Move X21, [X21+224]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBC2000
	015 Move X0, [X0+224]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3782], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X20, X0
	022 Call VoiceComponentImpl..ctor, X0
	023 Move [X19+32], X20
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MonoBehaviour..ctor, X0
	031 Return 

