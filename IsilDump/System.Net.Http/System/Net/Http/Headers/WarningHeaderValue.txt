Type: System.Net.Http.Headers.WarningHeaderValue

Method: System.Void .ctor()

Disassembly:
	0x0360BCFC B.EQ 0x360BD60
	0x0360BD00 LDR W15, [X11, X13, LSL #2]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.String get_Agent()

Disassembly:
	0x0360BD04 ADD X16, X13, 0x2
	0x0360BD08 ADD X14, X13, 0x1

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Agent(System.String value)

Disassembly:
	0x0360BD0C CMP X16, X10
	0x0360BD10 SUB W15, W31, W15

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Int32 get_Code()

Disassembly:
	0x0360BD14 STR W15, [X11, X13, LSL #2]
	0x0360BD18 B.GE 0x360BD2C

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_Code(System.Int32 value)

Disassembly:
	0x0360BD1C ADD X13, X0, W14, 0x2, SXTW
	0x0360BD20 LDR W15, [X13 + 0x20]

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.Nullable`1<System.DateTimeOffset> get_Date()

Disassembly:
	0x0360BD24 MOV X13, X14
	0x0360BD28 CBZ W15, 0x360BCF8
	0x0360BD2C ADD X10, X14, 0x1
	0x0360BD30 CMP W10, W8
	0x0360BD34 B.GE 0x360BD58

ISIL:
	001 Move X9, [X0+48]
	002 Move V0, [X0+2]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_Date(System.Nullable`1<System.DateTimeOffset> value)

Disassembly:
	0x0360BD38 ADD X8, X0, X10, 0x2, LSL
	0x0360BD3C ADD X8, X8, 0x20
	0x0360BD40 SUB X9, X9, X10
	0x0360BD44 LDR W10, [X8]
	0x0360BD48 SUBS X9, X9, 0x1

ISIL:
	001 Move X8, [X1+16]
	002 Move V0, [X1]
	003 Move [X0+48], X8
	004 Move [X0+2], V0
	005 Return 

Method: System.String get_Text()

Disassembly:
	0x0360BD4C ORN W10, W31, W10, 0x0
	0x0360BD50 STR W10, [X8], #0x4

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_Text(System.String value)

Disassembly:
	0x0360BD54 B.NE 0x360BD44
	0x0360BD58 LDR X30, [X31], #0x10

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Boolean IsCodeValid(System.Int32 code)

Disassembly:
	0x0360BD5C RET
	0x0360BD60 BL 0x1C16F28
	0x0360BD64 STR W1, [X0]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x0360BD68 STR X2, [X0 + 0x8]
	0x0360BD6C RET

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0360BD70 STR X30, [X31 - 0x30]!
	0x0360BD74 STP X22, X21, [X31 + 0x10]
	0x0360BD78 STP X20, X19, [X31 + 0x20]
	0x0360BD7C ADRP X22, 0xDD5000
	0x0360BD80 LDRB W8, [X22 + 0x3FB]
	0x0360BD84 MOV W21, W2
	0x0360BD88 MOV X20, X1
	0x0360BD8C MOV X19, X0
	0x0360BD90 TBNZ X8, 0x0, 0x360BDB4
	0x0360BD94 ADRP X0, 0xB29000
	0x0360BD98 LDR X0, [X0 + 0x940]
	0x0360BD9C BL 0x1C16CF4
	0x0360BDA0 ADRP X0, 0xB11000
	0x0360BDA4 LDR X0, [X0 + 0xD08]
	0x0360BDA8 BL 0x1C16CF4
	0x0360BDAC MOVZ W8, 0x1
	0x0360BDB0 STRB W8, [X22 + 0x3FB]
	0x0360BDB4 CBZ X20, 0x360BEB0
	0x0360BDB8 LDR X8, [X20 + 0x18]
	0x0360BDBC ADD X11, X20, 0x1C
	0x0360BDC0 SXTW X10, W8
	0x0360BDC4 AND W9, W8, W8, 0x1F
	0x0360BDC8 ADD W22, W8, 0x1
	0x0360BDCC SUBS X12, X10, 0x1
	0x0360BDD0 B.LT 0x360BDF4
	0x0360BDD4 SUB W13, W22, 0x2
	0x0360BDD8 CMP W13, W8
	0x0360BDDC B.CS 0x360BEAC
	0x0360BDE0 LDR W13, [X11, X10, LSL #2]
	0x0360BDE4 SUB W22, W22, 0x1
	0x0360BDE8 MOV X10, X12
	0x0360BDEC CBZ W13, 0x360BDCC
	0x0360BDF0 B 0x360BDF8
	0x0360BDF4 MOV W22, W9
	0x0360BDF8 CMP W22, 0x1
	0x0360BDFC B.EQ 0x360BE30
	0x0360BE00 CBNZ W22, 0x360BE5C
	0x0360BE04 ADRP X20, 0xB29000
	0x0360BE08 LDR X20, [X20 + 0x940]
	0x0360BE0C LDR X0, [X20]
	0x0360BE10 LDR W8, [X0 + 0xE0]
	0x0360BE14 CBNZ W8, 0x360BE20
	0x0360BE18 BL 0x1C16DFC
	0x0360BE1C LDR X0, [X20]
	0x0360BE20 LDR X8, [X0 + 0xB8]
	0x0360BE24 LDR V0, [X8 + 0x2]
	0x0360BE28 STR V0, [X19]
	0x0360BE2C B 0x360BE4C
	0x0360BE30 CBZ W8, 0x360BEAC
	0x0360BE34 LDR W8, [X20 + 0x20]
	0x0360BE38 TBNZ X8, 0x1F, 0x360BE5C
	0x0360BE3C ANDS W31, W21, 0x1
	0x0360BE40 CSNEG W8, W8, W8, EQ
	0x0360BE44 STR W8, [X19]
	0x0360BE48 STR X31, [X19 + 0x8]
	0x0360BE4C LDP X20, X19, [X31 + 0x20]
	0x0360BE50 LDP X22, X21, [X31 + 0x10]
	0x0360BE54 LDR X30, [X31], #0x30
	0x0360BE58 RET
	0x0360BE5C ANDS W31, W21, 0x1
	0x0360BE60 MOVN W8, 0x0
	0x0360BE64 CSNEG W8, W8, W8, NE
	0x0360BE68 STR W8, [X19]
	0x0360BE6C ADRP X8, 0xB11000
	0x0360BE70 LDR X8, [X8 + 0xD08]
	0x0360BE74 MOV W1, W22
	0x0360BE78 LDR X0, [X8]
	0x0360BE7C BL 0x1C16D6C
	0x0360BE80 MOV X2, X0
	0x0360BE84 STR X0, [X19 + 0x8]
	0x0360BE88 MOV X0, X20
	0x0360BE8C MOV W4, W22
	0x0360BE90 LDP X20, X19, [X31 + 0x20]
	0x0360BE94 LDP X22, X21, [X31 + 0x10]
	0x0360BE98 MOV W1, W31
	0x0360BE9C MOV W3, W31
	0x0360BEA0 MOV X5, X31
	0x0360BEA4 LDR X30, [X31], #0x30
	0x0360BEA8 B 0x339FCE8
	0x0360BEAC BL 0x1C16F28
	0x0360BEB0 ADRP X0, 0xAED000
	0x0360BEB4 LDR X0, [X0 + 0x528]
	0x0360BEB8 BL 0x1C16D08
	0x0360BEBC BL 0x1C16F10
	0x0360BEC0 MOV X19, X0
	0x0360BEC4 ADRP X0, 0xAF2000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDD6000
	007 Move W8, [X21+1007]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xAEB000
	015 Move X0, [X0+2648]
	016 Call 0x1C17CF4
	017 Move X0, 0xB30000
	018 Move X0, [X0+3336]
	019 Call 0x1C17CF4
	020 Move X0, 0xB30000
	021 Move X0, [X0+3344]
	022 Call 0x1C17CF4
	023 Move X0, 0xB30000
	024 Move X0, [X0+3656]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1007], W8
	028 Compare X20, 0
	029 JumpIfEqual {101}
	030 Move X8, 0xB30000
	031 Move X8, [X8+3656]
	032 Move X9, [X20]
	033 Move X8, [X8]
	034 Move W11, [X9+304]
	035 Move W10, [X8+304]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X9, [X9+200]
	038 Add X9, X9, X10
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 Compare X21, 0
	043 JumpIfEqual {108}
	044 Move W8, [X19+24]
	045 Move W9, [X21+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X21+16]
	048 Move X1, [X19+16]
	049 Move W2, 5
	050 Move X3, X31
	051 Call String.Equals, X0, X1, X2
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {101}
	056 Move X0, [X19+56]
	057 Move X1, [X21+56]
	058 Move X2, X31
	059 Call String.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {101}
	064 Move W8, [X19+32]
	065 Move W9, [X21+32]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSET not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Xor W9, W9, W10
	071 Xor W0, W9, 1
	072 Move TEMP, X9
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {102}
	076 Compare W8, 0
	077 JumpIfEqual {102}
	078 Move X8, 0xAEB000
	079 Move X8, [X8+2648]
	080 Move X21, [X21+40]
	081 Move X20, [X21+48]
	082 Move X19, [X19+40]
	083 Move X22, [X19+48]
	084 Move X0, [X8]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X19
	090 Move X1, X22
	091 Move X2, X21
	092 Move X3, X20
	093 Move X20, [X31+32]
	094 Move X19, [X31+40]
	095 Move X22, [X31+16]
	096 Move X21, [X31+24]
	097 Move X4, X31
	098 Move X30, [X31+48]
	099 Call DateTimeOffset.op_Equality, X0, X1
	100 Return X0
	101 Move W0, W31
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X30, [X31+48]
	107 Return X0
	108 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0360BEC8 LDR X0, [X0 + 0xEC8]
	0x0360BECC BL 0x1C16D08
	0x0360BED0 MOV X1, X0
	0x0360BED4 MOV X0, X19
	0x0360BED8 MOV X2, X31
	0x0360BEDC BL 0x330E100
	0x0360BEE0 ADRP X0, 0xB2F000
	0x0360BEE4 LDR X0, [X0 + 0xE80]
	0x0360BEE8 BL 0x1C16D08
	0x0360BEEC MOV X1, X0
	0x0360BEF0 MOV X0, X19
	0x0360BEF4 BL 0x1C16DEC
	0x0360BEF8 STR X30, [X31 - 0x20]!
	0x0360BEFC STP X20, X19, [X31 + 0x10]
	0x0360BF00 ADRP X20, 0xDD5000
	0x0360BF04 ADRP X19, 0xB29000
	0x0360BF08 LDRB W8, [X20 + 0x3FC]
	0x0360BF0C LDR X19, [X19 + 0x940]
	0x0360BF10 TBNZ X8, 0x0, 0x360BF28
	0x0360BF14 ADRP X0, 0xB29000
	0x0360BF18 LDR X0, [X0 + 0x940]
	0x0360BF1C BL 0x1C16CF4
	0x0360BF20 MOVZ W8, 0x1
	0x0360BF24 STRB W8, [X20 + 0x3FC]
	0x0360BF28 LDR X0, [X19]
	0x0360BF2C LDR W8, [X0 + 0xE0]
	0x0360BF30 CBNZ W8, 0x360BF3C
	0x0360BF34 BL 0x1C16DFC
	0x0360BF38 LDR X0, [X19]
	0x0360BF3C LDR X8, [X0 + 0xB8]
	0x0360BF40 LDP X20, X19, [X31 + 0x10]
	0x0360BF44 LDP X0, X1, [X8 + 0x30]
	0x0360BF48 LDR X30, [X31], #0x20
	0x0360BF4C RET
	0x0360BF50 STR X30, [X31 - 0x10]!
	0x0360BF54 LDR X8, [X0 + 0x8]
	0x0360BF58 CBZ X8, 0x360BF68
	0x0360BF5C LDR W9, [X8 + 0x18]
	0x0360BF60 CBZ W9, 0x360BF7C
	0x0360BF64 ADD X0, X8, 0x20
	0x0360BF68 LDRB W8, [X0]
	0x0360BF6C ANDS W31, W8, 0x1
	0x0360BF70 CSET W0, EQ
	0x0360BF74 LDR X30, [X31], #0x10
	0x0360BF78 RET
	0x0360BF7C BL 0x1C16F28
	0x0360BF80 LDR W8, [X0]
	0x0360BF84 SUB W9, W31, W8
	0x0360BF88 UBFM W9, W9, 0x1F, 0x1F
	0x0360BF8C ADD W0, W9, W8, 0x1F, ASR
	0x0360BF90 RET
	0x0360BF94 SUB X31, X31, 0x70
	0x0360BF98 STR X30, [X31 + 0x20]
	0x0360BF9C STP X26, X25, [X31 + 0x30]
	0x0360BFA0 STP X24, X23, [X31 + 0x40]
	0x0360BFA4 STP X22, X21, [X31 + 0x50]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0xDD6000
	009 Move W8, [X20+1008]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB30000
	016 Move X0, [X0+3360]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1008], W8
	020 Move [X31], X31
	021 Move [X31+8], X31
	022 Move [X31+16], X31
	023 Move W8, [X19+24]
	024 Add X0, X31, 28
	025 Move X1, X31
	026 Move [X31+28], W8
	027 Call Int32.GetHashCode, X0
	028 Move X8, [X19+16]
	029 Compare X8, 0
	030 JumpIfEqual {71}
	031 Move W20, W0
	032 Move X0, X8
	033 Move X1, X31
	034 Call String.ToLowerInvariant, X0
	035 Compare X0, 0
	036 JumpIfEqual {71}
	037 Move X8, [X0]
	038 Move X9, [X8+344]
	039 Move X1, [X8+352]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X8, [X19+56]
	042 Compare X8, 0
	043 JumpIfEqual {71}
	044 Move X9, [X8]
	045 Move X23, 0xB30000
	046 Move W21, W0
	047 Move X0, X8
	048 Move X10, [X9+344]
	049 Move X1, [X9+352]
	050 Move X23, [X23+3360]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move V0, [X19+2]
	053 Move X8, [X19+48]
	054 Move X1, [X23]
	055 Move W22, W0
	056 Add X0, X31, 0
	057 Move [X31], V0
	058 Move [X31+16], X8
	059 Call Nullable`1<DateTimeOffset>.GetHashCode, X0
	060 Xor W8, W21, W20
	061 Xor W8, W8, W22
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X22, [X31+48]
	065 Move X21, [X31+56]
	066 Move X30, [X31+32]
	067 Move X23, [X31+40]
	068 Xor W0, W8, W0
	069 Add X31, X31, 80
	070 Return X0
	071 Call 0x1C17F20

Method: System.Boolean TryParse(System.String input, System.Int32 minimalCount, out System.Collections.Generic.List`1<System.Net.Http.Headers.WarningHeaderValue> result)

Disassembly:
	0x0360BFA8 STP X20, X19, [X31 + 0x60]
	0x0360BFAC ADRP X26, 0xDD5000
	0x0360BFB0 ADRP X25, 0xB29000
	0x0360BFB4 LDRB W8, [X26 + 0x3FD]
	0x0360BFB8 LDR X25, [X25 + 0x940]
	0x0360BFBC MOV X22, X5
	0x0360BFC0 MOV X24, X4
	0x0360BFC4 MOV X19, X3
	0x0360BFC8 MOV X20, X2
	0x0360BFCC MOV X23, X1
	0x0360BFD0 MOV X21, X0
	0x0360BFD4 TBNZ X8, 0x0, 0x360BFF8
	0x0360BFD8 ADRP X0, 0xB2F000
	0x0360BFDC LDR X0, [X0 + 0xE88]
	0x0360BFE0 BL 0x1C16CF4
	0x0360BFE4 ADRP X0, 0xB29000
	0x0360BFE8 LDR X0, [X0 + 0x940]
	0x0360BFEC BL 0x1C16CF4
	0x0360BFF0 MOVZ W8, 0x1
	0x0360BFF4 STRB W8, [X26 + 0x3FD]
	0x0360BFF8 LDR X0, [X25]
	0x0360BFFC LDR W8, [X0 + 0xE0]
	0x0360C000 CBNZ W8, 0x360C008
	0x0360C004 BL 0x1C16DFC
	0x0360C008 SUB W8, W31, W20
	0x0360C00C UBFM W8, W8, 0x1F, 0x1F
	0x0360C010 ADDS W31, W8, W20, 0x1F, ASR
	0x0360C014 B.MI 0x360C2AC
	0x0360C018 ORR X8, X19, X23, 0x0
	0x0360C01C CBZ X22, 0x360C058
	0x0360C020 CBZ X8, 0x360C098
	0x0360C024 ADRP X8, 0xB2E000
	0x0360C028 LDR X8, [X8 + 0xE88]
	0x0360C02C CBZ X23, 0x360C0D4
	0x0360C030 CBZ X19, 0x360C144
	0x0360C034 LDR X0, [X8]
	0x0360C038 LDR W8, [X0 + 0xE0]
	0x0360C03C CBNZ W8, 0x360C044
	0x0360C040 BL 0x1C16DFC
	0x0360C044 MOV X0, X23
	0x0360C048 MOV X1, X19
	0x0360C04C MOV X2, X22
	0x0360C050 BL 0x360C590
	0x0360C054 B 0x360C16C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xDD6000
	010 Move X25, 0xB30000
	011 Move X22, 0xB30000
	012 Move X23, 0xB30000
	013 Move W8, [X24+1009]
	014 Move X25, [X25+3664]
	015 Move X22, [X22+3672]
	016 Move X23, [X23+3680]
	017 Move X19, X2
	018 Move W20, W1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xB30000
	025 Move X0, [X0+3680]
	026 Call 0x1C17CF4
	027 Move X0, 0xB30000
	028 Move X0, [X0+3664]
	029 Call 0x1C17CF4
	030 Move X0, 0xB2F000
	031 Move X0, [X0+3672]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X24+1009], W8
	035 Move X0, [X25]
	036 Call 0x1C17F10
	037 Move X2, [X22]
	038 Move X1, X31
	039 Move X3, X31
	040 Move X22, X0
	041 Call 0x2B48CB4, X0, X1, X2
	042 Move X4, [X23]
	043 Move X0, X21
	044 Move W1, W20
	045 Move X2, X22
	046 Move X3, X19
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X30, [X31+64]
	054 Move X25, [X31+72]
	055 Call 0x21A3910, X0, X1, X2, X3
	056 Return X0

Method: System.Boolean TryParseElement(System.Net.Http.Headers.Lexer lexer, out System.Net.Http.Headers.WarningHeaderValue parsedValue, out System.Net.Http.Headers.Token t)

Disassembly:
	0x0360C058 CBZ X8, 0x360C100
	0x0360C05C ADRP X8, 0xB2E000
	0x0360C060 LDR X8, [X8 + 0xE88]
	0x0360C064 CBZ X23, 0x360C190
	0x0360C068 CBZ X19, 0x360C1F4
	0x0360C06C LDR X0, [X8]
	0x0360C070 CMP W24, 0x0
	0x0360C074 CSNEG W22, W24, W24, PL
	0x0360C078 LDR W8, [X0 + 0xE0]
	0x0360C07C CBNZ W8, 0x360C084
	0x0360C080 BL 0x1C16DFC
	0x0360C084 MOV X0, X23
	0x0360C088 MOV X1, X19
	0x0360C08C MOV W2, W22
	0x0360C090 BL 0x360C318
	0x0360C094 B 0x360C224
	0x0360C098 ADRP X8, 0xB2E000
	0x0360C09C LDR X8, [X8 + 0xE88]
	0x0360C0A0 CMP W21, 0x0
	0x0360C0A4 CSNEG W23, W21, W21, PL
	0x0360C0A8 CMP W20, 0x0
	0x0360C0AC LDR X0, [X8]
	0x0360C0B0 CSNEG W24, W20, W20, PL
	0x0360C0B4 LDR W8, [X0 + 0xE0]
	0x0360C0B8 CBNZ W8, 0x360C0C0
	0x0360C0BC BL 0x1C16DFC
	0x0360C0C0 MOV W0, W23
	0x0360C0C4 MOV W1, W24
	0x0360C0C8 MOV X2, X22
	0x0360C0CC BL 0x360C7C0
	0x0360C0D0 B 0x360C16C
	0x0360C0D4 LDR X0, [X8]
	0x0360C0D8 CMP W21, 0x0
	0x0360C0DC CSNEG W23, W21, W21, PL
	0x0360C0E0 LDR W8, [X0 + 0xE0]
	0x0360C0E4 CBNZ W8, 0x360C0EC
	0x0360C0E8 BL 0x1C16DFC
	0x0360C0EC MOV W0, W23
	0x0360C0F0 MOV X1, X19
	0x0360C0F4 MOV X2, X22
	0x0360C0F8 BL 0x360C728
	0x0360C0FC B 0x360C16C
	0x0360C100 ADRP X8, 0xB2E000
	0x0360C104 LDR X8, [X8 + 0xE88]
	0x0360C108 CMP W21, 0x0
	0x0360C10C CSNEG W22, W21, W21, PL
	0x0360C110 CMP W20, 0x0
	0x0360C114 LDR X0, [X8]
	0x0360C118 CSNEG W23, W20, W20, PL
	0x0360C11C CMP W24, 0x0
	0x0360C120 CSNEG W24, W24, W24, PL
	0x0360C124 LDR W8, [X0 + 0xE0]
	0x0360C128 CBNZ W8, 0x360C130
	0x0360C12C BL 0x1C16DFC
	0x0360C130 MOV W0, W22
	0x0360C134 MOV W1, W23
	0x0360C138 MOV W2, W24
	0x0360C13C BL 0x360C4BC
	0x0360C140 B 0x360C224
	0x0360C144 LDR X0, [X8]
	0x0360C148 CMP W20, 0x0
	0x0360C14C CSNEG W24, W20, W20, PL
	0x0360C150 LDR W8, [X0 + 0xE0]
	0x0360C154 CBNZ W8, 0x360C15C
	0x0360C158 BL 0x1C16DFC
	0x0360C15C MOV X0, X23
	0x0360C160 MOV W1, W24
	0x0360C164 MOV X2, X22
	0x0360C168 BL 0x360C65C
	0x0360C16C MOV X22, X0
	0x0360C170 TBNZ X21, 0x1F, 0x360C17C
	0x0360C174 MOV W2, W31
	0x0360C178 B 0x360C1DC
	0x0360C17C LDR X0, [X25]
	0x0360C180 LDR W8, [X0 + 0xE0]
	0x0360C184 CBZ W8, 0x360C1C4
	0x0360C188 CBNZ X19, 0x360C1CC
	0x0360C18C B 0x360C1D8
	0x0360C190 LDR X0, [X8]
	0x0360C194 CMP W21, 0x0
	0x0360C198 CSNEG W23, W21, W21, PL
	0x0360C19C CMP W24, 0x0
	0x0360C1A0 LDR W8, [X0 + 0xE0]
	0x0360C1A4 CSNEG W22, W24, W24, PL
	0x0360C1A8 CBNZ W8, 0x360C1B0
	0x0360C1AC BL 0x1C16DFC
	0x0360C1B0 MOV W0, W23
	0x0360C1B4 MOV X1, X19
	0x0360C1B8 MOV W2, W22
	0x0360C1BC BL 0x360C44C
	0x0360C1C0 B 0x360C224
	0x0360C1C4 BL 0x1C16DFC
	0x0360C1C8 CBZ X19, 0x360C1D8
	0x0360C1CC LDR W8, [X19 + 0x18]
	0x0360C1D0 CBZ W8, 0x360C308
	0x0360C1D4 LDR W20, [X19 + 0x20]
	0x0360C1D8 AND W2, W20, 0x1
	0x0360C1DC ADD X0, X31, 0x0
	0x0360C1E0 MOV X1, X22
	0x0360C1E4 STP X31, X31, [X31]
	0x0360C1E8 BL 0x360BD70
	0x0360C1EC LDP X0, X1, [X31]
	0x0360C1F0 B 0x360C26C
	0x0360C1F4 LDR X0, [X8]
	0x0360C1F8 CMP W20, 0x0
	0x0360C1FC CSNEG W22, W20, W20, PL
	0x0360C200 CMP W24, 0x0
	0x0360C204 LDR W8, [X0 + 0xE0]
	0x0360C208 CSNEG W24, W24, W24, PL
	0x0360C20C CBNZ W8, 0x360C214
	0x0360C210 BL 0x1C16DFC
	0x0360C214 MOV X0, X23
	0x0360C218 MOV W1, W22
	0x0360C21C MOV W2, W24
	0x0360C220 BL 0x360C394
	0x0360C224 MOV W22, W0
	0x0360C228 TBZ X21, 0x1F, 0x360C240
	0x0360C22C LDR X0, [X25]
	0x0360C230 LDR W8, [X0 + 0xE0]
	0x0360C234 CBZ W8, 0x360C288
	0x0360C238 CBNZ X19, 0x360C290
	0x0360C23C TBNZ X20, 0x0, 0x360C2A0
	0x0360C240 MOV W19, W22
	0x0360C244 LDR X0, [X25]
	0x0360C248 LDR W8, [X0 + 0xE0]
	0x0360C24C CBNZ W8, 0x360C254
	0x0360C250 BL 0x1C16DFC
	0x0360C254 ADD X0, X31, 0x10
	0x0360C258 MOV X1, X19
	0x0360C25C STP X31, X31, [X31 + 0x10]
	0x0360C260 BL 0x360B59C
	0x0360C264 LDP X0, X1, [X31 + 0x10]
	0x0360C268 STP X0, X1, [X31]
	0x0360C26C LDP X20, X19, [X31 + 0x60]
	0x0360C270 LDP X22, X21, [X31 + 0x50]
	0x0360C274 LDP X24, X23, [X31 + 0x40]
	0x0360C278 LDP X26, X25, [X31 + 0x30]
	0x0360C27C LDR X30, [X31 + 0x20]
	0x0360C280 ADD X31, X31, 0x70
	0x0360C284 RET
	0x0360C288 BL 0x1C16DFC
	0x0360C28C CBZ X19, 0x360C23C
	0x0360C290 LDR W8, [X19 + 0x18]
	0x0360C294 CBZ W8, 0x360C308
	0x0360C298 LDR W20, [X19 + 0x20]
	0x0360C29C TBZ X20, 0x0, 0x360C240
	0x0360C2A0 MOV X8, X31
	0x0360C2A4 SUB X19, X8, W22, UXTW
	0x0360C2A8 B 0x360C244
	0x0360C2AC ADRP X0, 0xAEF000
	0x0360C2B0 LDR X0, [X0 + 0x760]
	0x0360C2B4 BL 0x1C16D08
	0x0360C2B8 BL 0x1C16F10
	0x0360C2BC MOV X19, X0
	0x0360C2C0 ADRP X0, 0xB2E000
	0x0360C2C4 LDR X0, [X0 + 0xE90]
	0x0360C2C8 BL 0x1C16D08
	0x0360C2CC MOV X20, X0
	0x0360C2D0 ADRP X0, 0xB2E000
	0x0360C2D4 LDR X0, [X0 + 0xE98]
	0x0360C2D8 BL 0x1C16D08
	0x0360C2DC MOV X2, X0
	0x0360C2E0 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X22, 0xDD5000
	011 Move W8, [X22+1010]
	012 Move X20, X2
	013 Move X19, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xB2F000
	020 Move X0, [X0+3312]
	021 Call 0x1C17CF4
	022 Move X0, 0xB10000
	023 Move X0, [X0+2256]
	024 Call 0x1C17CF4
	025 Move X0, 0xB2F000
	026 Move X0, [X0+3656]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+1010], W8
	030 Move [X31+44], W31
	031 Move [X31+24], X31
	032 Move [X31+32], X31
	033 Move [X19], X31
	034 Compare X21, 0
	035 JumpIfEqual {182}
	036 Move X25, 0xB10000
	037 Move X25, [X25+2256]
	038 Move X0, X21
	039 Move W1, W31
	040 Call Lexer.Scan, X0, X1
	041 Move [X20], X0
	042 Move [X20+8], W1
	043 Move X22, X0
	044 Move X0, [X25]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X1, [X20]
	051 Move W2, [X20+8]
	052 Add X3, X31, 44
	053 Move X0, X21
	054 Call Lexer.TryGetNumericValue, X0, X1, X2
	055 Move W8, W0
	056 Move W0, W31
	057 Move TEMP, X8
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {172}
	061 Move W8, [X31+44]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X21
	064 Move W1, W31
	065 Call Lexer.Scan, X0, X1
	066 Move [X20], X0
	067 Move [X20+8], W1
	068 Move X22, X0
	069 Move X0, [X25]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X23, [X20]
	076 Move W24, [X20+8]
	077 Move X0, X21
	078 Call Lexer.PeekChar, X0
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W8, [X21+24]
	081 Move X0, X21
	082 Move W1, W31
	083 Add W8, W8, 1
	084 Move [X21+24], W8
	085 Call Lexer.Scan, X0, X1
	086 Move X23, X0
	087 Move X0, [X25]
	088 Move X24, X1
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X8, 0xB2F000
	095 Move X8, [X8+3656]
	096 Move X0, [X8]
	097 Call 0x1C17F10
	098 Move X1, X31
	099 Move X22, X0
	100 Call Object..ctor, X0
	101 Compare X22, 0
	102 JumpIfEqual {182}
	103 Move W8, [X31+44]
	104 Move W4, W24
	105 Move X0, X21
	106 Move X3, X23
	107 Move [X22+24], W8
	108 Move X1, [X20]
	109 Move W2, [X20+8]
	110 Call Lexer.GetStringValue, X0, X1, X2
	111 Move [X22+16], X0
	112 Move X0, X21
	113 Move W1, W31
	114 Call Lexer.Scan, X0, X1
	115 Move [X20], X0
	116 Move [X20+8], W1
	117 Move X23, X0
	118 Move X0, [X25]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X1, [X20]
	125 Move W2, [X20+8]
	126 Move X0, X21
	127 Call Lexer.GetStringValue, X0, X1
	128 Move [X22+56], X0
	129 Move X0, X21
	130 Move W1, W31
	131 Call Lexer.Scan, X0, X1
	132 Move [X20], X0
	133 Move [X20+8], W1
	134 Move X23, X0
	135 Move X0, [X25]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X1, [X20]
	142 Move W2, [X20+8]
	143 Add X3, X31, 24
	144 Move X0, X21
	145 Call Lexer.TryGetDateValue, X0, X1, X2
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {171}
	150 Move X8, 0xB2F000
	151 Move X1, [X31+24]
	152 Move X2, [X31+32]
	153 Move X8, [X8+3312]
	154 Add X0, X31, 0
	155 Move [X31], X31
	156 Move [X31+8], X31
	157 Move [X31+16], X31
	158 Move X3, [X8]
	159 Call Nullable`1<DateTimeOffset>..ctor, X0, X1
	160 Move X8, [X31+16]
	161 Move V0, [X31]
	162 Move X0, X21
	163 Move W1, W31
	164 Move [X22+48], X8
	165 Move [X22+2], V0
	166 Call Lexer.Scan, X0, X1
	167 Move [X20], X0
	168 Move [X20+8], W1
	169 Move W0, 1
	170 Move [X19], X22
	171 Move W0, W31
	172 Move X20, [X31+96]
	173 Move X19, [X31+104]
	174 Move X22, [X31+80]
	175 Move X21, [X31+88]
	176 Move X24, [X31+64]
	177 Move X23, [X31+72]
	178 Move X30, [X31+48]
	179 Move X25, [X31+56]
	180 Add X31, X31, 112
	181 Return X0
	182 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x0360C2E4 MOV X1, X20
	0x0360C2E8 MOV X3, X31
	0x0360C2EC BL 0x3311888
	0x0360C2F0 ADRP X0, 0xB2E000
	0x0360C2F4 LDR X0, [X0 + 0xEA0]
	0x0360C2F8 BL 0x1C16D08
	0x0360C2FC MOV X1, X0
	0x0360C300 MOV X0, X19
	0x0360C304 BL 0x1C16DEC
	0x0360C308 BL 0x1C16F28
	0x0360C30C CMP W0, 0x0
	0x0360C310 CSNEG W0, W0, W0, PL
	0x0360C314 RET
	0x0360C318 STP X30, X23, [X31 - 0x30]!
	0x0360C31C STP X22, X21, [X31 + 0x10]
	0x0360C320 STP X20, X19, [X31 + 0x20]
	0x0360C324 ADRP X22, 0xDD4000
	0x0360C328 ADRP X23, 0xB2E000
	0x0360C32C LDRB W8, [X22 + 0x41D]
	0x0360C330 LDR X23, [X23 + 0xE88]
	0x0360C334 MOV W19, W2
	0x0360C338 MOV X20, X1
	0x0360C33C MOV X21, X0
	0x0360C340 TBNZ X8, 0x0, 0x360C358
	0x0360C344 ADRP X0, 0xB2E000
	0x0360C348 LDR X0, [X0 + 0xE88]
	0x0360C34C BL 0x1C16CF4
	0x0360C350 MOVZ W8, 0x1
	0x0360C354 STRB W8, [X22 + 0x41D]
	0x0360C358 LDR X0, [X23]
	0x0360C35C LDR W8, [X0 + 0xE0]
	0x0360C360 CBNZ W8, 0x360C368
	0x0360C364 BL 0x1C16DFC
	0x0360C368 MOV X0, X21
	0x0360C36C MOV W1, W19
	0x0360C370 BL 0x360E974
	0x0360C374 MOV W2, W0
	0x0360C378 MOV X0, X20
	0x0360C37C MOV W1, W19
	0x0360C380 LDP X20, X19, [X31 + 0x20]
	0x0360C384 LDP X22, X21, [X31 + 0x10]
	0x0360C388 MOVZ W3, 0x1
	0x0360C38C LDP X30, X23, [X31], #0x30
	0x0360C390 B 0x360F048
	0x0360C394 STP X30, X23, [X31 - 0x30]!
	0x0360C398 STP X22, X21, [X31 + 0x10]
	0x0360C39C STP X20, X19, [X31 + 0x20]
	0x0360C3A0 ADRP X22, 0xDD4000
	0x0360C3A4 ADRP X23, 0xB2E000
	0x0360C3A8 LDRB W8, [X22 + 0x41B]
	0x0360C3AC LDR X23, [X23 + 0xE88]
	0x0360C3B0 MOV W20, W2
	0x0360C3B4 MOV W19, W1
	0x0360C3B8 MOV X21, X0
	0x0360C3BC TBNZ X8, 0x0, 0x360C3D4
	0x0360C3C0 ADRP X0, 0xB2E000
	0x0360C3C4 LDR X0, [X0 + 0xE88]
	0x0360C3C8 BL 0x1C16CF4
	0x0360C3CC MOVZ W8, 0x1
	0x0360C3D0 STRB W8, [X22 + 0x41B]
	0x0360C3D4 LDR X0, [X23]
	0x0360C3D8 LDR W8, [X0 + 0xE0]
	0x0360C3DC CBNZ W8, 0x360C3E4
	0x0360C3E0 BL 0x1C16DFC
	0x0360C3E4 MOV X0, X21
	0x0360C3E8 MOV W1, W20
	0x0360C3EC BL 0x360E974
	0x0360C3F0 MOV W8, W20
	0x0360C3F4 CBZ W19, 0x360C430
	0x0360C3F8 MOV W10, W0
	0x0360C3FC MOVZ W9, 0x1
	0x0360C400 TBZ X19, 0x0, 0x360C410
	0x0360C404 MUL X9, X9, X10
	0x0360C408 UDIV X11, X9, X8
	0x0360C40C MSUB X9, X11, X8, X9
	0x0360C410 CMP W19, 0x1
	0x0360C414 B.EQ 0x360C434
	0x0360C418 MUL X10, X10, X10
	0x0360C41C UDIV X11, X10, X8
	0x0360C420 UBFM W19, W19, 0x1, 0x1F
	0x0360C424 MSUB X10, X11, X8, X10
	0x0360C428 CBNZ W19, 0x360C400
	0x0360C42C B 0x360C434
	0x0360C430 MOVZ W9, 0x1
	0x0360C434 LDP X20, X19, [X31 + 0x20]
	0x0360C438 LDP X22, X21, [X31 + 0x10]
	0x0360C43C UDIV X10, X9, X8
	0x0360C440 MSUB W0, W10, W8, W9
	0x0360C444 LDP X30, X23, [X31], #0x30
	0x0360C448 RET
	0x0360C44C STP X30, X23, [X31 - 0x30]!
	0x0360C450 STP X22, X21, [X31 + 0x10]
	0x0360C454 STP X20, X19, [X31 + 0x20]
	0x0360C458 ADRP X22, 0xDD4000
	0x0360C45C ADRP X23, 0xB2E000
	0x0360C460 LDRB W8, [X22 + 0x41C]
	0x0360C464 LDR X23, [X23 + 0xE88]
	0x0360C468 MOV W19, W2
	0x0360C46C MOV X20, X1
	0x0360C470 MOV W21, W0
	0x0360C474 TBNZ X8, 0x0, 0x360C48C
	0x0360C478 ADRP X0, 0xB2E000
	0x0360C47C LDR X0, [X0 + 0xE88]
	0x0360C480 BL 0x1C16CF4
	0x0360C484 MOVZ W8, 0x1
	0x0360C488 STRB W8, [X22 + 0x41C]
	0x0360C48C LDR X0, [X23]
	0x0360C490 LDR W8, [X0 + 0xE0]
	0x0360C494 CBNZ W8, 0x360C49C
	0x0360C498 BL 0x1C16DFC
	0x0360C49C MOV W2, W21
	0x0360C4A0 MOV X0, X20
	0x0360C4A4 MOV W1, W19
	0x0360C4A8 LDP X20, X19, [X31 + 0x20]
	0x0360C4AC LDP X22, X21, [X31 + 0x10]
	0x0360C4B0 MOVZ W3, 0x1
	0x0360C4B4 LDP X30, X23, [X31], #0x30
	0x0360C4B8 B 0x360F048
	0x0360C4BC STP X30, X23, [X31 - 0x30]!
	0x0360C4C0 STP X22, X21, [X31 + 0x10]
	0x0360C4C4 STP X20, X19, [X31 + 0x20]
	0x0360C4C8 ADRP X22, 0xDD4000
	0x0360C4CC ADRP X23, 0xB2E000
	0x0360C4D0 LDRB W8, [X22 + 0x41A]
	0x0360C4D4 LDR X23, [X23 + 0xE88]
	0x0360C4D8 MOV W21, W2
	0x0360C4DC MOV W19, W1
	0x0360C4E0 MOV W20, W0
	0x0360C4E4 TBNZ X8, 0x0, 0x360C4FC
	0x0360C4E8 ADRP X0, 0xB2E000
	0x0360C4EC LDR X0, [X0 + 0xE88]
	0x0360C4F0 BL 0x1C16CF4
	0x0360C4F4 MOVZ W8, 0x1
	0x0360C4F8 STRB W8, [X22 + 0x41A]
	0x0360C4FC LDR X0, [X23]
	0x0360C500 LDR W8, [X0 + 0xE0]
	0x0360C504 CBNZ W8, 0x360C50C
	0x0360C508 BL 0x1C16DFC
	0x0360C50C MOV W8, W21
	0x0360C510 CBZ W19, 0x360C54C
	0x0360C514 MOV W10, W20
	0x0360C518 MOVZ W9, 0x1
	0x0360C51C TBZ X19, 0x0, 0x360C52C

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X22, 0xDD5000
	009 Move X20, 0xAE8000
	010 Move X21, 0xB1F000
	011 Move W8, [X22+1011]
	012 Move X20, [X20+2760]
	013 Move X21, [X21+3064]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {51}
	019 Move X0, 0xAEA000
	020 Move X0, [X0+3144]
	021 Call 0x1C17CF4
	022 Move X0, 0xAEA000
	023 Move X0, [X0+2648]
	024 Call 0x1C17CF4
	025 Move X0, 0xB2F000
	026 Move X0, [X0+3344]
	027 Call 0x1C17CF4
	028 Move X0, 0xB2F000
	029 Move X0, [X0+3368]
	030 Call 0x1C17CF4
	031 Move X0, 0xAE8000
	032 Move X0, [X0+2760]
	033 Call 0x1C17CF4
	034 Move X0, 0xAE8000
	035 Move X0, [X0+3544]
	036 Call 0x1C17CF4
	037 Move X0, 0xB15000
	038 Move X0, [X0+936]
	039 Call 0x1C17CF4
	040 Move X0, 0xAF3000
	041 Move X0, [X0+3288]
	042 Call 0x1C17CF4
	043 Move X0, 0xB1F000
	044 Move X0, [X0+3064]
	045 Call 0x1C17CF4
	046 Move X0, 0xB2F000
	047 Move X0, [X0+3688]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X22+1011], W8
	051 Move X0, [X20]
	052 Move W1, 5
	053 Move [X31+16], X31
	054 Move [X31+24], X31
	055 Move [X31+32], X31
	056 Move [X31], X31
	057 Move [X31+8], X31
	058 Call 0x1C17D6C
	059 Move W8, [X19+24]
	060 Move X1, [X21]
	061 Move X20, X0
	062 Add X0, X31, 44
	063 Move X2, X31
	064 Move [X31+44], W8
	065 Call Int32.ToString, X0, X1
	066 Compare X20, 0
	067 JumpIfEqual {156}
	068 Move W8, [X20+24]
	069 Compare W8, 0
	070 JumpIfEqual {155}
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move [X20+32], X0
	073 Move X9, 0xAE8000
	074 Move X9, [X9+3544]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X10, [X9]
	077 Move [X20+40], X10
	078 Move X10, [X19+16]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move [X20+48], X10
	081 Move X9, [X9]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move [X20+56], X9
	084 Move X8, [X19+56]
	085 Move X0, X20
	086 Move X1, X31
	087 Move [X20+64], X8
	088 Call String.Concat, X0
	089 Move V0, [X19+2]
	090 Move X8, [X19+48]
	091 Move X20, X0
	092 Move [X31+1], V0
	093 Move W9, [X31+16]
	094 Move [X31+32], X8
	095 Compare W9, 0
	096 JumpIfEqual {146}
	097 Move X8, 0xB2F000
	098 Move X8, [X8+3368]
	099 Move X21, 0xAEA000
	100 Add X9, X19, 32
	101 Move X21, [X21+3144]
	102 Move X10, [X9+16]
	103 Move V0, [X9]
	104 Move X1, [X8]
	105 Move X19, 0xAEA000
	106 Move X19, [X19+2648]
	107 Add X0, X31, 16
	108 Move [X31+32], X10
	109 Move [X31+1], V0
	110 Call Nullable`1<DateTimeOffset>.get_Value, X0
	111 Move X8, X0
	112 Move X0, [X21]
	113 Move [X31], X8
	114 Move [X31+8], X1
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X23, 0xB15000
	120 Move X21, 0xB2F000
	121 Move X22, 0xAF3000
	122 Move X23, [X23+936]
	123 Move X21, [X21+3688]
	124 Move X22, [X22+3288]
	125 Move X0, X31
	126 Call CultureInfo.get_InvariantCulture
	127 Move X8, [X19]
	128 Move X19, X0
	129 Move W9, [X8+224]
	130 Compare W9, 0
	131 JumpIfNotEqual {134}
	132 Move X0, X8
	133 Call 0x1C17DFC
	134 Move X1, [X23]
	135 Add X0, X31, 0
	136 Move X2, X19
	137 Move X3, X31
	138 Call DateTimeOffset.ToString, X0, X1, X2
	139 Move X1, [X21]
	140 Move X3, [X22]
	141 Move X2, X0
	142 Move X0, X20
	143 Move X4, X31
	144 Call String.Concat, X0, X1, X2, X3
	145 Move X20, X0
	146 Move X0, X20
	147 Move X20, [X31+80]
	148 Move X19, [X31+88]
	149 Move X22, [X31+64]
	150 Move X21, [X31+72]
	151 Move X30, [X31+48]
	152 Move X23, [X31+56]
	153 Add X31, X31, 96
	154 Return X0
	155 Call 0x1C17F28
	156 Call 0x1C17F20

