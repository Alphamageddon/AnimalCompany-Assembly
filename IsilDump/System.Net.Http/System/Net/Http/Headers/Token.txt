Type: System.Net.Http.Headers.Token

Method: System.Void .ctor(System.Net.Http.Headers.Token/Type type, System.Int32 startPosition, System.Int32 endPosition)

Disassembly:
	0x035FE330 MOV X1, X31
	0x035FE334 MOV X21, X0
	0x035FE338 BL 0x33BDD8C
	0x035FE33C LDR X0, [X19]
	0x035FE340 BL 0x1C16F10
	0x035FE344 MOV X1, X31
	0x035FE348 MOV X22, X0
	0x035FE34C BL 0x33BDD8C
	0x035FE350 STR X23, [X22 + 0x10]
	0x035FE354 MOV X0, X22
	0x035FE358 MOV W1, W31
	0x035FE35C BL 0x35FCF70
	0x035FE360 MOV X27, X0
	0x035FE364 LDR X0, [X20]
	0x035FE368 MOV X25, X1
	0x035FE36C LDR W8, [X0 + 0xE0]
	0x035FE370 CBNZ W8, 0x35FE378
	0x035FE374 BL 0x1C16DFC
	0x035FE378 CMP W27, 0x2
	0x035FE37C B.NE 0x35FEAF0
	0x035FE380 BFM X28, X25, 0x0, 0x1F
	0x035FE384 MOV X0, X22
	0x035FE388 MOV X1, X27
	0x035FE38C MOV X2, X28
	0x035FE390 BL 0x35FD280
	0x035FE394 MOV X29, X0
	0x035FE398 BL 0x35FEB24
	0x035FE39C MOVZ W8, 0xF51F
	0x035FE3A0 MOVK W8, 0x72970000
	0x035FE3A4 CMP W0, W8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDE3000
	009 Move X23, 0xB1E000
	010 Move W8, [X24+895]
	011 Move X23, [X23+2256]
	012 Move W19, W3
	013 Move W20, W2
	014 Move W22, W1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xB1E000
	021 Move X0, [X0+2256]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+895], W8
	025 Move [X21+4], X31
	026 Move [X21], W22
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move [X21+4], W20
	033 Move [X21+8], W19
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X22, [X31+32]
	037 Move X21, [X31+40]
	038 Move X24, [X31+16]
	039 Move X23, [X31+24]
	040 Move X30, [X31+64]
	041 Return 

Method: System.Int32 get_StartPosition()

Disassembly:
	0x03605868 B 0x21A1DF4
	0x0360586C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Void set_StartPosition(System.Int32 value)

Disassembly:
	0x03605870 MOV W0, W31
	0x03605874 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X0+4], W1
	002 Return 

Method: System.Int32 get_EndPosition()

Disassembly:
	0x03605878 RET
	0x0360587C BL 0x1C16F20

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Void set_EndPosition(System.Int32 value)

Disassembly:
	0x03605880 STR X30, [X31 - 0x20]!
	0x03605884 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+8], W1
	002 Return 

Method: System.Net.Http.Headers.Token/Type get_Kind()

Disassembly:
	0x03605888 ADRP X20, 0xDDB000
	0x0360588C LDRB W8, [X20 + 0x397]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Net.Http.Headers.Token/Type op_Implicit(System.Net.Http.Headers.Token token)

Disassembly:
	0x03605890 MOV X19, X0

ISIL:
	001 Return X0

Method: System.String ToString()

Disassembly:
	0x03605894 TBNZ X8, 0x0, 0x36058AC
	0x03605898 ADRP X0, 0xB35000
	0x0360589C LDR X0, [X0 + 0x5A8]
	0x036058A0 BL 0x1C16CF4
	0x036058A4 MOVZ W8, 0x1
	0x036058A8 STRB W8, [X20 + 0x397]
	0x036058AC LDR X0, [X19 + 0x18]
	0x036058B0 CBZ X0, 0x36058F8
	0x036058B4 MOV X1, X31
	0x036058B8 BL 0x322B6E4
	0x036058BC CBZ X0, 0x36058F8
	0x036058C0 LDR X8, [X0]
	0x036058C4 ADRP X20, 0xB35000
	0x036058C8 LDP X9, X1, [X8 + 0x158]
	0x036058CC LDR X20, [X20 + 0x5A8]
	0x036058D0 BLR X9
	0x036058D4 LDR X8, [X19 + 0x10]
	0x036058D8 LDR X1, [X20]
	0x036058DC MOV W19, W0
	0x036058E0 MOV X0, X8
	0x036058E4 BL 0x21EACDC
	0x036058E8 EOR W0, W0, W19, 0x0
	0x036058EC LDP X20, X19, [X31 + 0x10]
	0x036058F0 LDR X30, [X31], #0x20
	0x036058F4 RET
	0x036058F8 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X20, 0xDDC000
	007 Move X21, 0xB36000
	008 Move W8, [X20+896]
	009 Move X21, [X21+2968]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB36000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+896], W8
	020 Move X8, [X21]
	021 Move TEMP, 0
	022 Not TEMP
	023 Move X9, TEMP
	024 Add X0, X31, 8
	025 Move X1, X31
	026 Move [X31+8], X8
	027 Move [X31+16], X9
	028 Move W8, [X19]
	029 Move [X31+24], W8
	030 Call Enum.ToString, X0
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Add X31, X31, 64
	036 Return X0

Method: System.Void .cctor()

Disassembly:
	0x036058FC STR X30, [X31 - 0x20]!
	0x03605900 STP X20, X19, [X31 + 0x10]
	0x03605904 ADRP X20, 0xDDB000
	0x03605908 LDRB W8, [X20 + 0x398]
	0x0360590C MOV X19, X0
	0x03605910 TBNZ X8, 0x0, 0x3605928
	0x03605914 ADRP X0, 0xB35000
	0x03605918 LDR X0, [X0 + 0x680]
	0x0360591C BL 0x1C16CF4
	0x03605920 MOVZ W8, 0x1
	0x03605924 STRB W8, [X20 + 0x398]
	0x03605928 LDP X0, X19, [X19 + 0x10]
	0x0360592C CBZ X0, 0x3605958
	0x03605930 ADRP X8, 0xB35000
	0x03605934 LDR X8, [X8 + 0x680]
	0x03605938 LDR X1, [X8]
	0x0360593C BL 0x21A1EFC
	0x03605940 MOV X1, X0
	0x03605944 MOV X0, X19
	0x03605948 LDP X20, X19, [X31 + 0x10]
	0x0360594C MOV X2, X31
	0x03605950 LDR X30, [X31], #0x20
	0x03605954 B 0x321B938
	0x03605958 MOV X0, X19
	0x0360595C LDP X20, X19, [X31 + 0x10]
	0x03605960 LDR X30, [X31], #0x20
	0x03605964 RET
	0x03605968 SUB X31, X31, 0x60
	0x0360596C STR X30, [X31 + 0x30]
	0x03605970 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xDDC000
	006 Move X19, 0xB17000
	007 Move W8, [X20+897]
	008 Move X19, [X19+2256]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB17000
	014 Move X0, [X0+2256]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+897], W8
	018 Add X0, X31, 0
	019 Move W1, 2
	020 Move W2, W31
	021 Move W3, W31
	022 Move [X31+8], W31
	023 Move [X31], X31
	024 Call Token..ctor, X0, X1, X2, X3
	025 Move X8, [X19]
	026 Move W9, [X31+8]
	027 Move X10, [X31]
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X8, [X8+184]
	031 Move X30, [X31+16]
	032 Move [X8+8], W9
	033 Move [X8], X10
	034 Add X31, X31, 48
	035 Return 

