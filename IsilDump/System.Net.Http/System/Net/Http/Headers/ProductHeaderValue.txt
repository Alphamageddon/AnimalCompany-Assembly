Type: System.Net.Http.Headers.ProductHeaderValue

Method: System.Void .ctor()

Disassembly:
	0x03608244 LDR X0, [X0 + 0xD48]
	0x03608248 BL 0x1C16CF4

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.String get_Name()

Disassembly:
	0x0360824C ADRP X0, 0xB32000
	0x03608250 LDR X0, [X0 + 0xD50]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Name(System.String value)

Disassembly:
	0x03608254 BL 0x1C16CF4
	0x03608258 MOVZ W8, 0x1

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_Version()

Disassembly:
	0x0360825C STRB W8, [X21 + 0x3CB]
	0x03608260 MOV X0, X19

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Version(System.String value)

Disassembly:
	0x03608264 STP X31, X31, [X31 + 0x8]
	0x03608268 STR X31, [X31 + 0x18]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x0360826C BL 0x36081A0
	0x03608270 CBZ X20, 0x3608358

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03608274 LDR X0, [X20 + 0x10]
	0x03608278 CBZ X0, 0x360833C
	0x0360827C ADRP X8, 0xB32000
	0x03608280 LDR X8, [X8 + 0xD50]
	0x03608284 ADRP X23, 0xB32000
	0x03608288 ADRP X24, 0xB32000
	0x0360828C ADRP X22, 0xB32000
	0x03608290 LDR X1, [X8]
	0x03608294 LDR X23, [X23 + 0xD38]
	0x03608298 LDR X24, [X24 + 0xD48]
	0x0360829C LDR X22, [X22 + 0xD30]
	0x036082A0 ADD X8, X31, 0x8
	0x036082A4 BL 0x301CB58
	0x036082A8 LDR X1, [X23]
	0x036082AC ADD X0, X31, 0x8
	0x036082B0 BL 0x2BC4350
	0x036082B4 TBZ X0, 0x0, 0x3608330
	0x036082B8 LDR X20, [X31 + 0x18]
	0x036082BC MOV X0, X19
	0x036082C0 BL 0x36083CC
	0x036082C4 MOV X21, X0
	0x036082C8 CBZ X0, 0x3608354
	0x036082CC LDR X8, [X21]
	0x036082D0 LDR X1, [X24]
	0x036082D4 LDRH W9, [X8 + 0x12E]
	0x036082D8 CBZ X9, 0x36082FC
	0x036082DC LDR X10, [X8 + 0xB0]
	0x036082E0 ADD X10, X10, 0x8
	0x036082E4 LDUR X11, [X10 - 0x8]
	0x036082E8 CMP X11, X1
	0x036082EC B.EQ 0x360830C
	0x036082F0 SUBS X9, X9, 0x1
	0x036082F4 ADD X10, X10, 0x10
	0x036082F8 B.NE 0x36082E4
	0x036082FC MOVZ W2, 0x2
	0x03608300 MOV X0, X21
	0x03608304 BL 0x1C5C788
	0x03608308 B 0x360831C
	0x0360830C LDR W9, [X10]
	0x03608310 ADD W9, W9, 0x2
	0x03608314 ADD X8, X8, W9, 0x4, SXTW
	0x03608318 ADD X0, X8, 0x138
	0x0360831C LDP X8, X2, [X0]
	0x03608320 MOV X0, X21
	0x03608324 MOV X1, X20
	0x03608328 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD9000
	006 Move W8, [X21+958]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB33000
	014 Move X0, [X0+3232]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+958], W8
	018 Compare X20, 0
	019 JumpIfEqual {53}
	020 Move X8, 0xB33000
	021 Move X8, [X8+3232]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Compare X20, 0
	033 JumpIfEqual {59}
	034 Move X0, [X20+16]
	035 Move X1, [X19+16]
	036 Move W2, 5
	037 Move X3, X31
	038 Call String.Equals, X0, X1, X2
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {53}
	043 Move X0, [X20+24]
	044 Move X1, [X19+24]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move W2, 5
	048 Move X3, X31
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call String.Equals, X0, X1, X2
	052 Return X0
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move W0, W31
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return X0
	059 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0360832C B 0x36082A8
	0x03608330 LDR X1, [X22]
	0x03608334 ADD X0, X31, 0x8
	0x03608338 BL 0x2BC434C
	0x0360833C LDP X20, X19, [X31 + 0x50]
	0x03608340 LDP X22, X21, [X31 + 0x40]
	0x03608344 LDP X24, X23, [X31 + 0x30]
	0x03608348 LDR X30, [X31 + 0x20]
	0x0360834C ADD X31, X31, 0x60
	0x03608350 RET
	0x03608354 BL 0x1C16F20
	0x03608358 BL 0x1C16F20
	0x0360835C B 0x3608368
	0x03608360 B 0x3608368
	0x03608364 B 0x3608368
	0x03608368 MOV X19, X0
	0x0360836C CMP W1, 0x1
	0x03608370 B.NE 0x360839C
	0x03608374 MOV X0, X19
	0x03608378 BL 0x3EB1AD0
	0x0360837C LDR X20, [X0]
	0x03608380 BL 0x3EB1AE0
	0x03608384 LDR X1, [X22]
	0x03608388 ADD X0, X31, 0x8
	0x0360838C BL 0x2BC434C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfEqual {33}
	007 Move X1, X31
	008 Call String.ToLowerInvariant, X0
	009 Compare X0, 0
	010 JumpIfEqual {33}
	011 Move X8, [X0]
	012 Move X9, [X8+344]
	013 Move X1, [X8+352]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19+24]
	016 Move W19, W0
	017 Compare X8, 0
	018 JumpIfEqual {29}
	019 Move X0, X8
	020 Move X1, X31
	021 Call String.ToLowerInvariant, X0
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, [X0]
	025 Move X9, [X8+344]
	026 Move X1, [X8+352]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Xor W19, W0, W19
	029 Move W0, W19
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return X0
	033 Call 0x1C17F20

Method: System.Boolean TryParse(System.String input, System.Int32 minimalCount, out System.Collections.Generic.List`1<System.Net.Http.Headers.ProductHeaderValue> result)

Disassembly:
	0x03608390 CBZ X20, 0x360833C
	0x03608394 MOV X0, X20
	0x03608398 BL 0x1C16F18
	0x0360839C MOV X20, X31
	0x036083A0 B 0x36083A8
	0x036083A4 MOV X19, X0
	0x036083A8 LDR X1, [X22]
	0x036083AC ADD X0, X31, 0x8
	0x036083B0 BL 0x2BC434C
	0x036083B4 CBNZ X20, 0x36083C0
	0x036083B8 MOV X0, X19
	0x036083BC BL 0x1D2C690
	0x036083C0 MOV X0, X20
	0x036083C4 BL 0x1C16F18
	0x036083C8 BL 0x1990590
	0x036083CC STR X30, [X31 - 0x20]!
	0x036083D0 STP X20, X19, [X31 + 0x10]
	0x036083D4 ADRP X20, 0xDD8000
	0x036083D8 LDRB W8, [X20 + 0x3CC]
	0x036083DC MOV X19, X0
	0x036083E0 TBNZ X8, 0x0, 0x3608404
	0x036083E4 ADRP X0, 0xB32000
	0x036083E8 LDR X0, [X0 + 0xD58]
	0x036083EC BL 0x1C16CF4
	0x036083F0 ADRP X0, 0xB32000
	0x036083F4 LDR X0, [X0 + 0xD60]
	0x036083F8 BL 0x1C16CF4
	0x036083FC MOVZ W8, 0x1
	0x03608400 STRB W8, [X20 + 0x3CC]
	0x03608404 LDR X20, [X19 + 0x10]
	0x03608408 CBNZ X20, 0x3608434
	0x0360840C ADRP X8, 0xB32000
	0x03608410 LDR X8, [X8 + 0xD60]
	0x03608414 LDR X0, [X8]
	0x03608418 BL 0x1C16F10
	0x0360841C ADRP X8, 0xB32000
	0x03608420 LDR X8, [X8 + 0xD58]
	0x03608424 MOV X20, X0
	0x03608428 LDR X1, [X8]
	0x0360842C BL 0x301B7C4
	0x03608430 STR X20, [X19 + 0x10]
	0x03608434 MOV X0, X20
	0x03608438 LDP X20, X19, [X31 + 0x10]
	0x0360843C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xDD9000
	010 Move X25, 0xB33000
	011 Move X22, 0xB33000
	012 Move X23, 0xB33000
	013 Move W8, [X24+959]
	014 Move X25, [X25+3240]
	015 Move X22, [X22+3248]
	016 Move X23, [X23+3256]
	017 Move X19, X2
	018 Move W20, W1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xB33000
	025 Move X0, [X0+3256]
	026 Call 0x1C17CF4
	027 Move X0, 0xB33000
	028 Move X0, [X0+3240]
	029 Call 0x1C17CF4
	030 Move X0, 0xB33000
	031 Move X0, [X0+3248]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X24+959], W8
	035 Move X0, [X25]
	036 Call 0x1C17F10
	037 Move X2, [X22]
	038 Move X1, X31
	039 Move X3, X31
	040 Move X22, X0
	041 Call 0x2B48CB4, X0, X1, X2
	042 Move X4, [X23]
	043 Move X0, X21
	044 Move W1, W20
	045 Move X2, X22
	046 Move X3, X19
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X30, [X31+64]
	054 Move X25, [X31+72]
	055 Call 0x21A3910, X0, X1, X2, X3
	056 Return X0

Method: System.Boolean TryParseElement(System.Net.Http.Headers.Lexer lexer, out System.Net.Http.Headers.ProductHeaderValue parsedValue, out System.Net.Http.Headers.Token t)

Disassembly:
	0x03608440 RET
	0x03608444 LDR X0, [X0 + 0x18]
	0x03608448 RET
	0x0360844C STP X30, X21, [X31 - 0x20]!
	0x03608450 STP X20, X19, [X31 + 0x10]
	0x03608454 ADRP X20, 0xDD8000
	0x03608458 ADRP X21, 0xB32000
	0x0360845C LDRB W8, [X20 + 0x3CD]
	0x03608460 LDR X21, [X21 + 0xD68]
	0x03608464 MOV X19, X0
	0x03608468 TBNZ X8, 0x0, 0x3608480
	0x0360846C ADRP X0, 0xB32000
	0x03608470 LDR X0, [X0 + 0xD68]
	0x03608474 BL 0x1C16CF4
	0x03608478 MOVZ W8, 0x1
	0x0360847C STRB W8, [X20 + 0x3CD]
	0x03608480 LDR X0, [X21]
	0x03608484 BL 0x1C16F10
	0x03608488 MOV X1, X19
	0x0360848C MOV X20, X0
	0x03608490 BL 0x36081F4
	0x03608494 MOV X0, X20
	0x03608498 LDP X20, X19, [X31 + 0x10]
	0x0360849C LDP X30, X21, [X31], #0x20
	0x036084A0 RET
	0x036084A4 STP X30, X21, [X31 - 0x20]!
	0x036084A8 STP X20, X19, [X31 + 0x10]
	0x036084AC ADRP X21, 0xDD8000
	0x036084B0 LDRB W8, [X21 + 0x3CE]
	0x036084B4 MOV X20, X1
	0x036084B8 MOV X19, X0
	0x036084BC TBNZ X8, 0x0, 0x36084E0
	0x036084C0 ADRP X0, 0xB32000
	0x036084C4 LDR X0, [X0 + 0xD70]
	0x036084C8 BL 0x1C16CF4
	0x036084CC ADRP X0, 0xB32000
	0x036084D0 LDR X0, [X0 + 0xD68]
	0x036084D4 BL 0x1C16CF4
	0x036084D8 MOVZ W8, 0x1
	0x036084DC STRB W8, [X21 + 0x3CE]
	0x036084E0 CBZ X20, 0x3608558
	0x036084E4 ADRP X8, 0xB32000
	0x036084E8 LDR X8, [X8 + 0xD68]
	0x036084EC LDR X9, [X20]
	0x036084F0 LDR X8, [X8]
	0x036084F4 LDRB W11, [X9 + 0x130]
	0x036084F8 LDRB W10, [X8 + 0x130]
	0x036084FC CMP W11, W10
	0x03608500 B.CC 0x3608558
	0x03608504 LDR X9, [X9 + 0xC8]
	0x03608508 ADD X9, X9, X10, 0x3, LSL
	0x0360850C LDUR X9, [X9 - 0x8]
	0x03608510 CMP X9, X8
	0x03608514 CSEL X20, X20, X31, EQ
	0x03608518 B.NE 0x3608558
	0x0360851C CBZ X20, 0x3608568
	0x03608520 LDR X0, [X20 + 0x18]
	0x03608524 LDR X1, [X19 + 0x18]
	0x03608528 MOVZ W2, 0x5
	0x0360852C MOV X3, X31
	0x03608530 BL 0x3226C60
	0x03608534 TBZ X0, 0x0, 0x3608558
	0x03608538 ADRP X8, 0xB32000
	0x0360853C LDR X0, [X20 + 0x10]
	0x03608540 LDR X1, [X19 + 0x10]
	0x03608544 LDR X8, [X8 + 0xD70]
	0x03608548 LDP X20, X19, [X31 + 0x10]
	0x0360854C LDR X2, [X8]
	0x03608550 LDP X30, X21, [X31], #0x20
	0x03608554 B 0x21A1DF4
	0x03608558 LDP X20, X19, [X31 + 0x10]
	0x0360855C MOV W0, W31
	0x03608560 LDP X30, X21, [X31], #0x20
	0x03608564 RET
	0x03608568 BL 0x1C16F20
	0x0360856C STR X30, [X31 - 0x20]!
	0x03608570 STP X20, X19, [X31 + 0x10]
	0x03608574 ADRP X20, 0xDD8000
	0x03608578 LDRB W8, [X20 + 0x3CF]
	0x0360857C MOV X19, X0
	0x03608580 TBNZ X8, 0x0, 0x3608598
	0x03608584 ADRP X0, 0xB32000
	0x03608588 LDR X0, [X0 + 0xD78]
	0x0360858C BL 0x1C16CF4
	0x03608590 MOVZ W8, 0x1
	0x03608594 STRB W8, [X20 + 0x3CF]
	0x03608598 LDR X0, [X19 + 0x18]
	0x0360859C CBZ X0, 0x36085E4
	0x036085A0 MOV X1, X31
	0x036085A4 BL 0x322B6E4
	0x036085A8 CBZ X0, 0x36085E4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDD9000
	008 Move W8, [X22+960]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xB33000
	017 Move X0, [X0+3232]
	018 Call 0x1C17CF4
	019 Move X0, 0xB14000
	020 Move X0, [X0+2256]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+960], W8
	024 Move [X21], X31
	025 Compare X20, 0
	026 JumpIfEqual {102}
	027 Move X23, 0xB14000
	028 Move X23, [X23+2256]
	029 Move X0, X20
	030 Move W1, W31
	031 Call Lexer.Scan, X0, X1
	032 Move [X19], X0
	033 Move [X19+8], W1
	034 Move X22, X0
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, 0xB33000
	042 Move X8, [X8+3232]
	043 Move X0, [X8]
	044 Call 0x1C17F10
	045 Move X1, X31
	046 Move X22, X0
	047 Call Object..ctor, X0
	048 Move [X21], X22
	049 Move X1, [X19]
	050 Move W2, [X19+8]
	051 Move X0, X20
	052 Call Lexer.GetStringValue, X0, X1
	053 Compare X22, 0
	054 JumpIfEqual {102}
	055 Move [X22+16], X0
	056 Move X0, X20
	057 Move W1, W31
	058 Call Lexer.Scan, X0, X1
	059 Move [X19], X0
	060 Move [X19+8], W1
	061 Move X22, X0
	062 Move X0, [X23]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, X20
	069 Move W1, W31
	070 Call Lexer.Scan, X0, X1
	071 Move [X19], X0
	072 Move [X19+8], W1
	073 Move X22, X0
	074 Move X0, [X23]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X1, [X19]
	081 Move W2, [X19+8]
	082 Move X21, [X21]
	083 Move X0, X20
	084 Call Lexer.GetStringValue, X0, X1
	085 Compare X21, 0
	086 JumpIfEqual {102}
	087 Move [X21+24], X0
	088 Move X0, X20
	089 Move W1, W31
	090 Call Lexer.Scan, X0, X1
	091 Move [X19], X0
	092 Move [X19+8], W1
	093 Move W0, 1
	094 Move W0, W31
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X22, [X31+16]
	098 Move X21, [X31+24]
	099 Move X30, [X31+48]
	100 Move X23, [X31+56]
	101 Return X0
	102 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x036085AC LDR X8, [X0]
	0x036085B0 ADRP X20, 0xB32000
	0x036085B4 LDP X9, X1, [X8 + 0x158]
	0x036085B8 LDR X20, [X20 + 0xD78]
	0x036085BC BLR X9
	0x036085C0 LDR X8, [X19 + 0x10]
	0x036085C4 LDR X1, [X20]
	0x036085C8 MOV W19, W0
	0x036085CC MOV X0, X8
	0x036085D0 BL 0x21EACDC
	0x036085D4 EOR W0, W0, W19, 0x0
	0x036085D8 LDP X20, X19, [X31 + 0x10]
	0x036085DC LDR X30, [X31], #0x20
	0x036085E0 RET
	0x036085E4 BL 0x1C16F20
	0x036085E8 SUB X31, X31, 0xA0
	0x036085EC STP X29, X30, [X31 + 0x40]
	0x036085F0 STP X28, X27, [X31 + 0x50]
	0x036085F4 STP X26, X25, [X31 + 0x60]
	0x036085F8 STP X24, X23, [X31 + 0x70]
	0x036085FC STP X22, X21, [X31 + 0x80]
	0x03608600 STP X20, X19, [X31 + 0x90]
	0x03608604 ADRP X20, 0xDD8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDD9000
	005 Move W8, [X20+961]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAED000
	012 Move X0, [X0+3784]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+961], W8
	016 Move X0, [X19+16]
	017 Move X2, [X19+24]
	018 Compare X2, 0
	019 JumpIfEqual {29}
	020 Move X8, 0xAED000
	021 Move X8, [X8+3784]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X3, X31
	025 Move X1, [X8]
	026 Move X30, [X31+32]
	027 Call String.Concat, X0, X1, X2
	028 Return X0
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

