Type: System.Net.Http.Headers.HttpHeaderValueCollection`1

Method: System.Void .ctor(System.Net.Http.Headers.HttpHeaders headers, System.Net.Http.Headers.HeaderInfo headerInfo)

Disassembly:
	0x02DE15B4 ADD X31, X29, 0x0
	0x02DE15B8 LDP X20, X19, [X31 + 0x50]
	0x02DE15BC LDP X22, X21, [X31 + 0x40]
	0x02DE15C0 LDP X24, X23, [X31 + 0x30]
	0x02DE15C4 LDP X26, X25, [X31 + 0x20]
	0x02DE15C8 LDR X27, [X31 + 0x10]
	0x02DE15CC LDP X29, X30, [X31], #0x60
	0x02DE15D0 RET
	0x02DE15D4 BL 0x1C16F28
	0x02DE15D8 BL 0x1C16F20
	0x02DE15DC BL 0x3EB1B20
	0x02DE15E0 STP X29, X30, [X31 - 0x60]!
	0x02DE15E4 STP X28, X27, [X31 + 0x10]
	0x02DE15E8 STP X26, X25, [X31 + 0x20]
	0x02DE15EC STP X24, X23, [X31 + 0x30]
	0x02DE15F0 STP X22, X21, [X31 + 0x40]
	0x02DE15F4 STP X20, X19, [X31 + 0x50]
	0x02DE15F8 ADD X29, X31, 0x0
	0x02DE15FC SUB X31, X31, 0x40
	0x02DE1600 STUR X2, [X29 - 0x28]
	0x02DE1604 MRS X24, 0xC000
	0x02DE1608 LDR X8, [X24 + 0x28]
	0x02DE160C MOV X19, X3
	0x02DE1610 MOV X21, X1
	0x02DE1614 STUR X8, [X29 - 0x8]
	0x02DE1618 LDR X8, [X3 + 0x20]
	0x02DE161C STUR X0, [X29 - 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X1
	007 Move X1, X31
	008 Move X22, X3
	009 Move X19, X2
	010 Move X20, X0
	011 Call Object..ctor, X0
	012 Move X8, [X22+32]
	013 Move X8, [X8+192]
	014 Move X0, [X8]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Call 0x1C17F10
	022 Move X8, [X22+32]
	023 Move X22, X0
	024 Move X8, [X8+192]
	025 Move X1, [X8+8]
	026 Call List`1<Object>..ctor, X0
	027 Move [X20+16], X22
	028 Move [X20+24], X21
	029 Move [X20+32], X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x02DE1620 LDRB W9, [X8 + 0x135]
	0x02DE1624 TBNZ X9, 0x0, 0x2DE1634
	0x02DE1628 MOV X0, X8
	0x02DE162C BL 0x1C5C684
	0x02DE1630 MOV X8, X0
	0x02DE1634 LDR X8, [X8 + 0xC0]
	0x02DE1638 LDR X8, [X8 + 0x48]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.String> get_InvalidValues()

Disassembly:
	0x02DE163C LDR W23, [X8 + 0xFC]
	0x02DE1640 ADD X8, X31, 0x0

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x02DE1644 ADD X9, X23, 0xF
	0x02DE1648 AND X9, X9, 0x1FFFFFFFF

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void Add(T item)

Disassembly:
	0x02DE164C SUB X22, X8, X9
	0x02DE1650 ADD X31, X22, 0x0
	0x02DE1654 ADD X8, X31, 0x0
	0x02DE1658 SUB X20, X8, X9
	0x02DE165C ADD X31, X20, 0x0
	0x02DE1660 CBZ X21, 0x2DE1A40
	0x02DE1664 LDR X0, [X19 + 0x20]
	0x02DE1668 LDRB W8, [X0 + 0x135]
	0x02DE166C TBNZ X8, 0x0, 0x2DE1674
	0x02DE1670 BL 0x1C5C684
	0x02DE1674 LDR X8, [X0 + 0xC0]
	0x02DE1678 STUR X24, [X29 - 0x38]
	0x02DE167C LDR X0, [X8 + 0x10]
	0x02DE1680 LDRB W8, [X0 + 0x135]
	0x02DE1684 TBNZ X8, 0x0, 0x2DE168C
	0x02DE1688 BL 0x1C5C684
	0x02DE168C LDR W1, [X21 + 0x18]
	0x02DE1690 BL 0x1C16D6C
	0x02DE1694 LDR X8, [X21 + 0x18]
	0x02DE1698 MOV X26, X0
	0x02DE169C CMP W8, 0x1
	0x02DE16A0 B.LT 0x2DE1A44
	0x02DE16A4 MOV X28, X31
	0x02DE16A8 AND X24, X8, 0x0
	0x02DE16AC LDUR X8, [X29 - 0x30]
	0x02DE16B0 LDR X8, [X8]
	0x02DE16B4 CBZ X8, 0x2DE1A40

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {29}
	005 Move X8, [X2+32]
	006 Move W10, [X0+28]
	007 Move X9, [X8+192]
	008 Move X8, [X0+16]
	009 Add W10, W10, 1
	010 Move X9, [X9+40]
	011 Move [X0+28], W10
	012 Compare X8, 0
	013 JumpIfEqual {29}
	014 NotImplemented "Instruction LDRSW not yet implemented."
	015 Move W11, [X8+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add W9, W10, 1
	018 Add X8, X8, X10
	019 Move [X0+24], W9
	020 Move [X8+32], X1
	021 Move X30, [X31+16]
	022 Return 
	023 Move X8, [X9+32]
	024 Move X8, [X8+192]
	025 Move X2, [X8+112]
	026 Move X30, [X31+16]
	027 Call List`1<Object>.AddWithResize, X0, X1
	028 Return 
	029 Call 0x1C17F20

Method: System.Void AddRange(System.Collections.Generic.List`1<T> values)

Disassembly:
	0x02DE16B8 LDR W9, [X8 + 0x18]
	0x02DE16BC CMP X28, X9
	0x02DE16C0 B.CS 0x2DE1A7C
	0x02DE16C4 LDR X9, [X8]
	0x02DE16C8 MOV X0, X22
	0x02DE16CC MOV X2, X23
	0x02DE16D0 LDR W9, [X9 + 0x104]
	0x02DE16D4 NOP
	0x02DE16D8 MADD X8, X28, X9, X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+48]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.AddRange, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: System.Void AddInvalidValue(System.String invalidValue)

Disassembly:
	0x02DE16DC ADD X1, X8, 0x20
	0x02DE16E0 BL 0x3EB1AC0
	0x02DE16E4 CMP X28, W24, UXTW
	0x02DE16E8 B.CS 0x2DE1A7C
	0x02DE16EC LDR X8, [X21]
	0x02DE16F0 MOV X0, X20
	0x02DE16F4 MOV X2, X23
	0x02DE16F8 LDR W8, [X8 + 0x104]
	0x02DE16FC NOP
	0x02DE1700 MADD X8, X28, X8, X21
	0x02DE1704 ADD X1, X8, 0x20
	0x02DE1708 BL 0x3EB1AC0
	0x02DE170C LDUR X8, [X29 - 0x28]
	0x02DE1710 CBZ X8, 0x2DE1A40
	0x02DE1714 LDR X0, [X19 + 0x20]
	0x02DE1718 LDRB W8, [X0 + 0x135]
	0x02DE171C TBNZ X8, 0x0, 0x2DE1724
	0x02DE1720 BL 0x1C5C684
	0x02DE1724 LDR X8, [X0 + 0xC0]
	0x02DE1728 LDR X27, [X8 + 0x38]
	0x02DE172C LDRB W8, [X27 + 0x135]
	0x02DE1730 TBNZ X8, 0x0, 0x2DE1740
	0x02DE1734 MOV X0, X27
	0x02DE1738 BL 0x1C5C684
	0x02DE173C MOV X27, X0
	0x02DE1740 LDR X0, [X19 + 0x20]
	0x02DE1744 LDRB W8, [X0 + 0x135]
	0x02DE1748 TBNZ X8, 0x0, 0x2DE1750
	0x02DE174C BL 0x1C5C684
	0x02DE1750 LDR X8, [X0 + 0xC0]
	0x02DE1754 MOV X24, X22
	0x02DE1758 LDR X8, [X8 + 0x48]
	0x02DE175C LDR W8, [X8 + 0x28]
	0x02DE1760 TBNZ X8, 0x1F, 0x2DE1768
	0x02DE1764 LDR X24, [X22]
	0x02DE1768 LDR X0, [X19 + 0x20]
	0x02DE176C LDRB W8, [X0 + 0x135]
	0x02DE1770 TBNZ X8, 0x0, 0x2DE1778
	0x02DE1774 BL 0x1C5C684
	0x02DE1778 LDR X8, [X0 + 0xC0]
	0x02DE177C LDUR X12, [X29 - 0x28]
	0x02DE1780 MOV X25, X20
	0x02DE1784 LDR X8, [X8 + 0x48]
	0x02DE1788 LDR W8, [X8 + 0x28]
	0x02DE178C TBNZ X8, 0x1F, 0x2DE1794
	0x02DE1790 LDR X25, [X20]
	0x02DE1794 LDR X8, [X12]
	0x02DE1798 LDRH W9, [X8 + 0x12E]
	0x02DE179C CBZ X9, 0x2DE17C0
	0x02DE17A0 LDR X10, [X8 + 0xB0]
	0x02DE17A4 ADD X10, X10, 0x8
	0x02DE17A8 LDUR X11, [X10 - 0x8]
	0x02DE17AC CMP X11, X27
	0x02DE17B0 B.EQ 0x2DE17D8
	0x02DE17B4 SUBS X9, X9, 0x1
	0x02DE17B8 ADD X10, X10, 0x10
	0x02DE17BC B.NE 0x2DE17A8
	0x02DE17C0 MOV X0, X12
	0x02DE17C4 MOV X1, X27

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x15FB000
	006 Move W8, [X20+2486]
	007 Move X19, X1
	008 Move X21, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x1314000
	014 Move X0, [X0+440]
	015 Call 0x1C17CF4
	016 Move X0, 0x1314000
	017 Move X0, [X0+448]
	018 Call 0x1C17CF4
	019 Move X0, 0x1314000
	020 Move X0, [X0+464]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2486], W8
	024 Move X20, [X21+40]
	025 Compare X20, 0
	026 JumpIfNotEqual {39}
	027 Move X8, 0x1314000
	028 Move X8, [X8+464]
	029 Move X0, [X8]
	030 Call 0x1C17F10
	031 Move X8, 0x1314000
	032 Move X8, [X8+448]
	033 Move X20, X0
	034 Move X1, [X8]
	035 Call List`1<Object>..ctor, X0
	036 Move [X21+40], X20
	037 Compare X20, 0
	038 JumpIfEqual {71}
	039 Move X9, 0x1314000
	040 Move X9, [X9+440]
	041 Move W10, [X20+28]
	042 Move X8, [X20+16]
	043 Move X9, [X9]
	044 Add W10, W10, 1
	045 Move [X20+28], W10
	046 Compare X8, 0
	047 JumpIfEqual {71}
	048 NotImplemented "Instruction LDRSW not yet implemented."
	049 Move W11, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add W9, W10, 1
	052 Add X8, X8, X10
	053 Move [X20+24], W9
	054 Move [X8+32], X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return 
	060 Move X8, [X9+32]
	061 Move X0, X20
	062 Move X1, X19
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X8, [X8+192]
	066 Move X2, [X8+112]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Call List`1<Object>.AddWithResize, X0, X1
	070 Return 
	071 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x02DE17C8 MOV W2, W31
	0x02DE17CC BL 0x1C5C788
	0x02DE17D0 LDUR X12, [X29 - 0x28]
	0x02DE17D4 B 0x2DE17E4
	0x02DE17D8 LDRSW X9, [X10]
	0x02DE17DC ADD X8, X8, X9, 0x4, LSL
	0x02DE17E0 ADD X0, X8, 0x138
	0x02DE17E4 STP X24, X25, [X29 - 0x20]
	0x02DE17E8 LDR X1, [X0 + 0x8]
	0x02DE17EC SUB X3, X29, 0x20
	0x02DE17F0 SUB X4, X29, 0xC
	0x02DE17F4 MOV X2, X12
	0x02DE17F8 LDP X0, X8, [X1 + 0x8]
	0x02DE17FC BLR X8
	0x02DE1800 LDUR W8, [X29 - 0xC]
	0x02DE1804 CMP W8, 0x1
	0x02DE1808 B.LT 0x2DE1838

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+16]
	004 Compare X8, 0
	005 JumpIfEqual {21}
	006 Move W2, [X8+24]
	007 Move W9, [X8+28]
	008 Move X19, X0
	009 Add W9, W9, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X8+24], W31
	012 Move [X8+28], W9
	013 Move X0, [X8+16]
	014 Move W1, W31
	015 Move X3, X31
	016 Call Array.Clear, X0, X1, X2
	017 Move [X19+40], X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 
	021 Call 0x1C17F20

Method: System.Boolean Contains(T item)

Disassembly:
	0x02DE180C LDUR X8, [X29 - 0x30]
	0x02DE1810 LDR X8, [X8]
	0x02DE1814 CBZ X8, 0x2DE1A40
	0x02DE1818 LDR W9, [X8 + 0x18]
	0x02DE181C CMP X28, X9
	0x02DE1820 B.CS 0x2DE1A7C
	0x02DE1824 LDR X9, [X8]
	0x02DE1828 LDR W9, [X9 + 0x104]
	0x02DE182C NOP

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+72]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.Contains, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void CopyTo(T[] array, System.Int32 arrayIndex)

Disassembly:
	0x02DE1830 MADD X8, X28, X9, X8
	0x02DE1834 B 0x2DE19B0
	0x02DE1838 LDUR X8, [X29 - 0x30]
	0x02DE183C LDR X8, [X8 + 0x8]
	0x02DE1840 CBZ X8, 0x2DE1A40
	0x02DE1844 LDR W9, [X8 + 0x18]
	0x02DE1848 CMP X28, X9
	0x02DE184C B.CS 0x2DE1A7C
	0x02DE1850 LDR X9, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+88]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.CopyTo, X0, X1, X2
	010 Return 
	011 Call 0x1C17F20

Method: System.Boolean Remove(T item)

Disassembly:
	0x02DE1854 MOV X0, X22
	0x02DE1858 MOV X2, X23
	0x02DE185C MOV X25, X20
	0x02DE1860 LDR W9, [X9 + 0x104]
	0x02DE1864 NOP
	0x02DE1868 MADD X8, X28, X9, X8
	0x02DE186C ADD X1, X8, 0x20
	0x02DE1870 BL 0x3EB1AC0
	0x02DE1874 LDR W8, [X21 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+96]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.Remove, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x02DE1878 CMP X28, X8
	0x02DE187C B.CS 0x2DE1A7C
	0x02DE1880 LDR X8, [X21]
	0x02DE1884 MOV X0, X25
	0x02DE1888 MOV X2, X23
	0x02DE188C LDR W8, [X8 + 0x104]
	0x02DE1890 NOP
	0x02DE1894 MADD X8, X28, X8, X21
	0x02DE1898 ADD X1, X8, 0x20
	0x02DE189C BL 0x3EB1AC0
	0x02DE18A0 LDR X0, [X19 + 0x20]
	0x02DE18A4 LDRB W8, [X0 + 0x135]
	0x02DE18A8 TBNZ X8, 0x0, 0x2DE18B0
	0x02DE18AC BL 0x1C5C684
	0x02DE18B0 LDR X8, [X0 + 0xC0]
	0x02DE18B4 LDR X27, [X8 + 0x38]
	0x02DE18B8 LDRB W8, [X27 + 0x135]
	0x02DE18BC TBNZ X8, 0x0, 0x2DE18CC
	0x02DE18C0 MOV X0, X27
	0x02DE18C4 BL 0x1C5C684
	0x02DE18C8 MOV X27, X0
	0x02DE18CC LDR X0, [X19 + 0x20]
	0x02DE18D0 LDRB W8, [X0 + 0x135]
	0x02DE18D4 TBNZ X8, 0x0, 0x2DE18DC
	0x02DE18D8 BL 0x1C5C684
	0x02DE18DC LDR X8, [X0 + 0xC0]
	0x02DE18E0 MOV X24, X22
	0x02DE18E4 LDR X8, [X8 + 0x48]
	0x02DE18E8 LDR W8, [X8 + 0x28]
	0x02DE18EC TBNZ X8, 0x1F, 0x2DE18F4
	0x02DE18F0 LDR X24, [X22]
	0x02DE18F4 LDR X0, [X19 + 0x20]
	0x02DE18F8 LDRB W8, [X0 + 0x135]
	0x02DE18FC TBNZ X8, 0x0, 0x2DE1904
	0x02DE1900 BL 0x1C5C684
	0x02DE1904 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+32]
	006 Compare X0, 0
	007 JumpIfEqual {45}
	008 Move X8, [X0]
	009 Move X20, X1
	010 Move X9, [X8+376]
	011 Move X1, [X8+384]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X8, [X20+32]
	014 Move X1, [X19+16]
	015 Move X8, [X8+192]
	016 Move X2, [X8+104]
	017 Call String.Join, X0, X1
	018 Move X8, [X19+40]
	019 Move X20, X0
	020 Compare X8, 0
	021 JumpIfEqual {40}
	022 Move X0, [X19+32]
	023 Compare X0, 0
	024 JumpIfEqual {45}
	025 Move X8, [X0]
	026 Move X9, [X8+376]
	027 Move X1, [X8+384]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X1, [X19+40]
	030 Move X2, X31
	031 Call String.Join, X0, X1
	032 Move X1, X0
	033 Move X0, X20
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X2, X31
	037 Move X30, [X31+32]
	038 Call String.Concat, X0, X1
	039 Return X0
	040 Move X0, X20
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return X0
	045 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<T> GetEnumerator()

Disassembly:
	0x02DE1908 LDUR X12, [X29 - 0x28]
	0x02DE190C LDR X8, [X8 + 0x48]
	0x02DE1910 LDR W8, [X8 + 0x28]
	0x02DE1914 TBNZ X8, 0x1F, 0x2DE1920
	0x02DE1918 MOV X9, X25
	0x02DE191C LDR X25, [X25]
	0x02DE1920 LDR X8, [X12]
	0x02DE1924 LDRH W9, [X8 + 0x12E]
	0x02DE1928 CBZ X9, 0x2DE194C
	0x02DE192C LDR X10, [X8 + 0xB0]
	0x02DE1930 ADD X10, X10, 0x8
	0x02DE1934 LDUR X11, [X10 - 0x8]
	0x02DE1938 CMP X11, X27
	0x02DE193C B.EQ 0x2DE1964
	0x02DE1940 SUBS X9, X9, 0x1
	0x02DE1944 ADD X10, X10, 0x10
	0x02DE1948 B.NE 0x2DE1934
	0x02DE194C MOV X0, X12
	0x02DE1950 MOV X1, X27
	0x02DE1954 MOV W2, W31
	0x02DE1958 BL 0x1C5C788
	0x02DE195C LDUR X12, [X29 - 0x28]
	0x02DE1960 B 0x2DE1970
	0x02DE1964 LDRSW X9, [X10]
	0x02DE1968 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfEqual {28}
	007 Move X8, [X1+32]
	008 Move X19, X1
	009 Move X8, [X8+192]
	010 Move X1, [X8+112]
	011 Add X8, X31, 0
	012 Call List`1<Object>.GetEnumerator, X0
	013 Move X8, [X31+16]
	014 Move V0, [X31]
	015 Add X1, X31, 0
	016 Move [X31+48], X8
	017 Move [X31+2], V0
	018 Move [X31], V0
	019 Move [X31+16], X8
	020 Move X8, [X19+32]
	021 Move X8, [X8+192]
	022 Move X0, [X8+120]
	023 Call 0x1C17E04
	024 Move X30, [X31+64]
	025 Move X19, [X31+72]
	026 Add X31, X31, 80
	027 Return X0
	028 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02DE196C ADD X0, X8, 0x138
	0x02DE1970 STP X24, X25, [X29 - 0x20]
	0x02DE1974 LDR X1, [X0 + 0x8]
	0x02DE1978 SUB X3, X29, 0x20

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+136]
	004 Call 0x2DE1908, X0
	005 Return X0

Method: T Find(System.Predicate`1<T> predicate)

Disassembly:
	0x02DE197C SUB X4, X29, 0xC
	0x02DE1980 MOV X2, X12
	0x02DE1984 LDP X0, X8, [X1 + 0x8]
	0x02DE1988 BLR X8
	0x02DE198C LDUR W8, [X29 - 0xC]
	0x02DE1990 TBNZ X8, 0x1F, 0x2DE1A34
	0x02DE1994 LDR W8, [X21 + 0x18]
	0x02DE1998 CMP X28, X8
	0x02DE199C B.CS 0x2DE1A7C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+152]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.Find, X0, X1
	010 Return X0
	011 Call 0x1C17F20

