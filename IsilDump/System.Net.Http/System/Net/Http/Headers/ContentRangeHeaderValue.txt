Type: System.Net.Http.Headers.ContentRangeHeaderValue

Method: System.Void .ctor()

Disassembly:
	0x03600F88 STR X30, [X31 - 0x20]!
	0x03600F8C STP X20, X19, [X31 + 0x10]
	0x03600F90 ADRP X19, 0xDE0000
	0x03600F94 ADRP X20, 0xB3A000
	0x03600F98 LDRB W8, [X19 + 0x35C]
	0x03600F9C LDR X20, [X20 + 0x698]
	0x03600FA0 TBNZ X8, 0x0, 0x3600FC4
	0x03600FA4 ADRP X0, 0xB3A000
	0x03600FA8 LDR X0, [X0 + 0x698]
	0x03600FAC BL 0x1C16CF4
	0x03600FB0 ADRP X0, 0xB25000
	0x03600FB4 LDR X0, [X0 + 0xEF0]
	0x03600FB8 BL 0x1C16CF4
	0x03600FBC MOVZ W8, 0x1
	0x03600FC0 STRB W8, [X19 + 0x35C]
	0x03600FC4 LDR X0, [X20]
	0x03600FC8 BL 0x1C16F10
	0x03600FCC MOV X1, X31
	0x03600FD0 MOV X19, X0
	0x03600FD4 BL 0x33BDD8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xDE1000
	006 Move X21, 0xB23000
	007 Move W8, [X20+849]
	008 Move X21, [X21+776]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB23000
	015 Move X0, [X0+776]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+849], W8
	019 Move X8, [X21]
	020 Move X0, X19
	021 Move X1, X31
	022 Move [X19+16], X8
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call Object..ctor, X0
	028 Return 

Method: System.Nullable`1<System.Int64> get_From()

Disassembly:
	0x03600FD8 CBZ X19, 0x3601004
	0x03600FDC ADRP X8, 0xB25000
	0x03600FE0 LDR X8, [X8 + 0xEF0]

ISIL:
	001 Move X8, [X0+24]
	002 Move X1, [X0+32]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_From(System.Nullable`1<System.Int64> value)

Disassembly:
	0x03600FE4 LDR X8, [X8]
	0x03600FE8 STR X8, [X19 + 0x18]

ISIL:
	001 Move [X0+24], X1
	002 Move [X0+32], X2
	003 Return 

Method: System.Nullable`1<System.Int64> get_Length()

Disassembly:
	0x03600FEC LDR X8, [X20]
	0x03600FF0 LDR X8, [X8 + 0xB8]
	0x03600FF4 STR X19, [X8]

ISIL:
	001 Move X8, [X0+40]
	002 Move X1, [X0+48]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_Length(System.Nullable`1<System.Int64> value)

Disassembly:
	0x03600FF8 LDP X20, X19, [X31 + 0x10]
	0x03600FFC LDR X30, [X31], #0x20

ISIL:
	001 Move [X0+40], X1
	002 Move [X0+48], X2
	003 Return 

Method: System.Nullable`1<System.Int64> get_To()

Disassembly:
	0x03601000 RET
	0x03601004 BL 0x1C16F20
	0x03601008 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X8, [X0+56]
	002 Move X1, [X0+64]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_To(System.Nullable`1<System.Int64> value)

Disassembly:
	0x0360100C STP X20, X19, [X31 + 0x10]
	0x03601010 MOV X20, X1

ISIL:
	001 Move [X0+56], X1
	002 Move [X0+64], X2
	003 Return 

Method: System.String get_Unit()

Disassembly:
	0x03601014 MOV X1, X31
	0x03601018 MOV W19, W2

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x0360101C MOV X21, X0
	0x03601020 BL 0x33BDD8C

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03601024 STR X20, [X21 + 0x18]
	0x03601028 STR W19, [X21 + 0x14]
	0x0360102C LDP X20, X19, [X31 + 0x10]
	0x03601030 LDP X30, X21, [X31], #0x20
	0x03601034 RET
	0x03601038 LDR X8, [X0]
	0x0360103C MOV X2, X0
	0x03601040 LDP X4, X3, [X8 + 0x198]
	0x03601044 BR X4
	0x03601048 LDR X0, [X0 + 0x20]
	0x0360104C RET
	0x03601050 STR X1, [X0 + 0x20]
	0x03601054 RET
	0x03601058 STP X30, X19, [X31 - 0x10]!
	0x0360105C ADRP X0, 0xAF2000
	0x03601060 LDR X0, [X0 + 0xB40]
	0x03601064 BL 0x1C16D08
	0x03601068 BL 0x1C16F10
	0x0360106C MOV X1, X31
	0x03601070 MOV X19, X0
	0x03601074 BL 0x3380310
	0x03601078 ADRP X0, 0xB39000
	0x0360107C LDR X0, [X0 + 0x6C8]
	0x03601080 BL 0x1C16D08
	0x03601084 MOV X1, X0
	0x03601088 MOV X0, X19
	0x0360108C BL 0x1C16DEC
	0x03601090 STR X30, [X31 - 0x20]!
	0x03601094 STP X20, X19, [X31 + 0x10]
	0x03601098 MOV W19, W1
	0x0360109C MOV X20, X0
	0x036010A0 BL 0x36030EC
	0x036010A4 STR W19, [X20 + 0x18]
	0x036010A8 LDP X20, X19, [X31 + 0x10]
	0x036010AC LDR X30, [X31], #0x20
	0x036010B0 RET
	0x036010B4 STR X30, [X31 - 0x30]!
	0x036010B8 STP X22, X21, [X31 + 0x10]
	0x036010BC STP X20, X19, [X31 + 0x20]
	0x036010C0 ADRP X20, 0xDDF000
	0x036010C4 ADRP X21, 0xB39000
	0x036010C8 ADRP X22, 0xB39000
	0x036010CC LDRB W8, [X20 + 0x35E]
	0x036010D0 LDR X21, [X21 + 0x6D0]
	0x036010D4 LDR X22, [X22 + 0x160]
	0x036010D8 MOV X19, X0
	0x036010DC TBNZ X8, 0x0, 0x3601100
	0x036010E0 ADRP X0, 0xB39000
	0x036010E4 LDR X0, [X0 + 0x160]
	0x036010E8 BL 0x1C16CF4
	0x036010EC ADRP X0, 0xB39000
	0x036010F0 LDR X0, [X0 + 0x6D0]
	0x036010F4 BL 0x1C16CF4
	0x036010F8 MOVZ W8, 0x1
	0x036010FC STRB W8, [X20 + 0x35E]
	0x03601100 LDR X1, [X21]
	0x03601104 LDR X2, [X22]
	0x03601108 MOV X0, X19
	0x0360110C LDP X20, X19, [X31 + 0x20]
	0x03601110 LDP X22, X21, [X31 + 0x10]
	0x03601114 LDR X30, [X31], #0x30
	0x03601118 B 0x21ECDE4
	0x0360111C STP X29, X30, [X31 - 0x60]!
	0x03601120 STP X28, X27, [X31 + 0x10]
	0x03601124 STP X26, X25, [X31 + 0x20]
	0x03601128 STP X24, X23, [X31 + 0x30]
	0x0360112C STP X22, X21, [X31 + 0x40]
	0x03601130 STP X20, X19, [X31 + 0x50]
	0x03601134 ADRP X24, 0xDDF000
	0x03601138 ADRP X25, 0xB39000
	0x0360113C ADRP X19, 0xB39000
	0x03601140 ADRP X20, 0xB39000
	0x03601144 ADRP X22, 0xB39000
	0x03601148 ADRP X21, 0xAF2000
	0x0360114C ADRP X23, 0xB39000
	0x03601150 LDR X25, [X25 + 0x6D8]
	0x03601154 LDRB W8, [X24 + 0x361]
	0x03601158 LDR X19, [X19 + 0x6E0]
	0x0360115C LDR X20, [X20 + 0x6E8]
	0x03601160 LDR X22, [X22 + 0x6F0]
	0x03601164 LDR X21, [X21 + 0x838]
	0x03601168 LDR X23, [X23 + 0x6F8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDE0000
	006 Move W8, [X21+850]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xB3A000
	014 Move X0, [X0+1672]
	015 Call 0x1C17CF4
	016 Move X0, 0xB2F000
	017 Move X0, [X0+2552]
	018 Call 0x1C17CF4
	019 Move X0, 0xB1B000
	020 Move X0, [X0+3752]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+850], W8
	024 Compare X20, 0
	025 JumpIfEqual {38}
	026 Move X8, 0xB3A000
	027 Move X8, [X8+1672]
	028 Move X9, [X20]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move W0, W31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Compare X8, 0
	045 JumpIfEqual {92}
	046 Move W9, [X8+40]
	047 Move W10, [X19+40]
	048 Move X11, [X8+48]
	049 Move X12, [X19+48]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Xor W9, W9, W10
	056 Compare W9, 0
	057 JumpIfEqual {38}
	058 Move W9, [X8+24]
	059 Move W10, [X19+24]
	060 Move X11, [X8+32]
	061 Move X12, [X19+32]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSET not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CSET not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Xor W9, W9, W10
	068 Compare W9, 0
	069 JumpIfEqual {38}
	070 Move W9, [X8+56]
	071 Move W10, [X19+56]
	072 Move X11, [X8+64]
	073 Move X12, [X19+64]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSET not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CSET not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Xor W9, W9, W10
	080 Compare W9, 0
	081 JumpIfEqual {38}
	082 Move X0, [X8+16]
	083 Move X1, [X19+16]
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move W2, 5
	087 Move X3, X31
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Call String.Equals, X0, X1, X2
	091 Return X0
	092 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0360116C TBNZ X8, 0x0, 0x3601844
	0x03601170 ADRP X0, 0xB39000
	0x03601174 LDR X0, [X0 + 0x700]
	0x03601178 BL 0x1C16CF4
	0x0360117C ADRP X0, 0xB39000
	0x03601180 LDR X0, [X0 + 0x708]
	0x03601184 BL 0x1C16CF4
	0x03601188 ADRP X0, 0xB39000
	0x0360118C LDR X0, [X0 + 0x710]
	0x03601190 BL 0x1C16CF4
	0x03601194 ADRP X0, 0xB39000
	0x03601198 LDR X0, [X0 + 0x718]
	0x0360119C BL 0x1C16CF4
	0x036011A0 ADRP X0, 0xB39000
	0x036011A4 LDR X0, [X0 + 0x720]
	0x036011A8 BL 0x1C16CF4
	0x036011AC ADRP X0, 0xB39000
	0x036011B0 LDR X0, [X0 + 0x728]
	0x036011B4 BL 0x1C16CF4
	0x036011B8 ADRP X0, 0xB39000
	0x036011BC LDR X0, [X0 + 0x730]
	0x036011C0 BL 0x1C16CF4
	0x036011C4 ADRP X0, 0xB39000
	0x036011C8 LDR X0, [X0 + 0x738]
	0x036011CC BL 0x1C16CF4
	0x036011D0 ADRP X0, 0xB39000
	0x036011D4 LDR X0, [X0 + 0x740]
	0x036011D8 BL 0x1C16CF4
	0x036011DC ADRP X0, 0xB39000
	0x036011E0 LDR X0, [X0 + 0x748]
	0x036011E4 BL 0x1C16CF4
	0x036011E8 ADRP X0, 0xB39000
	0x036011EC LDR X0, [X0 + 0x750]
	0x036011F0 BL 0x1C16CF4
	0x036011F4 ADRP X0, 0xB39000
	0x036011F8 LDR X0, [X0 + 0x758]
	0x036011FC BL 0x1C16CF4
	0x03601200 ADRP X0, 0xB39000
	0x03601204 LDR X0, [X0 + 0x760]
	0x03601208 BL 0x1C16CF4
	0x0360120C ADRP X0, 0xB39000
	0x03601210 LDR X0, [X0 + 0x768]
	0x03601214 BL 0x1C16CF4
	0x03601218 ADRP X0, 0xB39000
	0x0360121C LDR X0, [X0 + 0x6D8]
	0x03601220 BL 0x1C16CF4
	0x03601224 ADRP X0, 0xB39000
	0x03601228 LDR X0, [X0 + 0x770]
	0x0360122C BL 0x1C16CF4
	0x03601230 ADRP X0, 0xB39000
	0x03601234 LDR X0, [X0 + 0x778]
	0x03601238 BL 0x1C16CF4
	0x0360123C ADRP X0, 0xB39000
	0x03601240 LDR X0, [X0 + 0x6F8]
	0x03601244 BL 0x1C16CF4
	0x03601248 ADRP X0, 0xB39000
	0x0360124C LDR X0, [X0 + 0x780]
	0x03601250 BL 0x1C16CF4
	0x03601254 ADRP X0, 0xB39000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xDE0000
	009 Move W8, [X20+851]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB3A000
	016 Move X0, [X0+1680]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+851], W8
	020 Move [X31], X31
	021 Move [X31+8], X31
	022 Move X0, [X19+16]
	023 Compare X0, 0
	024 JumpIfEqual {74}
	025 Move X8, [X0]
	026 Move X23, 0xB3A000
	027 Move X9, [X8+344]
	028 Move X1, [X8+352]
	029 Move X23, [X23+1680]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 Move X1, [X23]
	033 Move W20, W0
	034 Add X0, X31, 0
	035 Move [X31], V0
	036 Call Nullable`1<Int64>.GetHashCode, X0
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 Move X1, [X23]
	039 Move W21, W0
	040 Add X0, X31, 0
	041 Move [X31], V0
	042 Call Nullable`1<Int64>.GetHashCode, X0
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 Move X1, [X23]
	045 Move W22, W0
	046 Add X0, X31, 0
	047 Move [X31], V0
	048 Call Nullable`1<Int64>.GetHashCode, X0
	049 Move X8, [X19+16]
	050 Compare X8, 0
	051 JumpIfEqual {74}
	052 Move W19, W0
	053 Move X0, X8
	054 Move X1, X31
	055 Call String.ToLowerInvariant, X0
	056 Compare X0, 0
	057 JumpIfEqual {74}
	058 Move X8, [X0]
	059 Move X9, [X8+344]
	060 Move X1, [X8+352]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Xor W8, W21, W20
	063 Xor W8, W8, W22
	064 Xor W8, W8, W19
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X22, [X31+32]
	068 Move X21, [X31+40]
	069 Move X30, [X31+16]
	070 Move X23, [X31+24]
	071 Xor W0, W8, W0
	072 Add X31, X31, 64
	073 Return X0
	074 Call 0x1C17F20

Method: System.Boolean TryParse(System.String input, out System.Net.Http.Headers.ContentRangeHeaderValue parsedValue)

Disassembly:
	0x03601258 LDR X0, [X0 + 0x788]
	0x0360125C BL 0x1C16CF4
	0x03601260 ADRP X0, 0xB39000
	0x03601264 LDR X0, [X0 + 0x790]
	0x03601268 BL 0x1C16CF4
	0x0360126C ADRP X0, 0xB39000
	0x03601270 LDR X0, [X0 + 0x798]
	0x03601274 BL 0x1C16CF4
	0x03601278 ADRP X0, 0xB39000
	0x0360127C LDR X0, [X0 + 0x7A0]
	0x03601280 BL 0x1C16CF4
	0x03601284 ADRP X0, 0xB39000
	0x03601288 LDR X0, [X0 + 0x7A8]
	0x0360128C BL 0x1C16CF4
	0x03601290 ADRP X0, 0xB39000
	0x03601294 LDR X0, [X0 + 0x7B0]
	0x03601298 BL 0x1C16CF4
	0x0360129C ADRP X0, 0xB39000
	0x036012A0 LDR X0, [X0 + 0x7B8]
	0x036012A4 BL 0x1C16CF4
	0x036012A8 ADRP X0, 0xB39000
	0x036012AC LDR X0, [X0 + 0x7C0]
	0x036012B0 BL 0x1C16CF4
	0x036012B4 ADRP X0, 0xB39000
	0x036012B8 LDR X0, [X0 + 0x7C8]
	0x036012BC BL 0x1C16CF4
	0x036012C0 ADRP X0, 0xB39000
	0x036012C4 LDR X0, [X0 + 0x7D0]
	0x036012C8 BL 0x1C16CF4
	0x036012CC ADRP X0, 0xB39000
	0x036012D0 LDR X0, [X0 + 0x7D8]
	0x036012D4 BL 0x1C16CF4
	0x036012D8 ADRP X0, 0xB39000
	0x036012DC LDR X0, [X0 + 0x7E0]
	0x036012E0 BL 0x1C16CF4
	0x036012E4 ADRP X0, 0xB39000
	0x036012E8 LDR X0, [X0 + 0x7E8]
	0x036012EC BL 0x1C16CF4
	0x036012F0 ADRP X0, 0xB39000
	0x036012F4 LDR X0, [X0 + 0x7F0]
	0x036012F8 BL 0x1C16CF4
	0x036012FC ADRP X0, 0xB39000
	0x03601300 LDR X0, [X0 + 0x7F8]
	0x03601304 BL 0x1C16CF4
	0x03601308 ADRP X0, 0xB39000
	0x0360130C LDR X0, [X0 + 0x800]
	0x03601310 BL 0x1C16CF4
	0x03601314 ADRP X0, 0xB39000
	0x03601318 LDR X0, [X0 + 0x808]
	0x0360131C BL 0x1C16CF4
	0x03601320 ADRP X0, 0xB39000
	0x03601324 LDR X0, [X0 + 0x810]
	0x03601328 BL 0x1C16CF4
	0x0360132C ADRP X0, 0xB39000
	0x03601330 LDR X0, [X0 + 0x818]
	0x03601334 BL 0x1C16CF4
	0x03601338 ADRP X0, 0xB39000
	0x0360133C LDR X0, [X0 + 0x820]
	0x03601340 BL 0x1C16CF4
	0x03601344 ADRP X0, 0xB39000
	0x03601348 LDR X0, [X0 + 0x828]
	0x0360134C BL 0x1C16CF4
	0x03601350 ADRP X0, 0xB39000
	0x03601354 LDR X0, [X0 + 0x830]
	0x03601358 BL 0x1C16CF4
	0x0360135C ADRP X0, 0xB39000
	0x03601360 LDR X0, [X0 + 0x838]
	0x03601364 BL 0x1C16CF4
	0x03601368 ADRP X0, 0xB39000
	0x0360136C LDR X0, [X0 + 0x840]
	0x03601370 BL 0x1C16CF4
	0x03601374 ADRP X0, 0xB39000
	0x03601378 LDR X0, [X0 + 0x848]
	0x0360137C BL 0x1C16CF4
	0x03601380 ADRP X0, 0xB39000
	0x03601384 LDR X0, [X0 + 0x850]
	0x03601388 BL 0x1C16CF4
	0x0360138C ADRP X0, 0xB1A000
	0x03601390 LDR X0, [X0 + 0xB50]
	0x03601394 BL 0x1C16CF4
	0x03601398 ADRP X0, 0xB39000
	0x0360139C LDR X0, [X0 + 0x858]
	0x036013A0 BL 0x1C16CF4
	0x036013A4 ADRP X0, 0xB39000
	0x036013A8 LDR X0, [X0 + 0x860]
	0x036013AC BL 0x1C16CF4
	0x036013B0 ADRP X0, 0xB39000
	0x036013B4 LDR X0, [X0 + 0x868]
	0x036013B8 BL 0x1C16CF4
	0x036013BC ADRP X0, 0xB39000
	0x036013C0 LDR X0, [X0 + 0x870]
	0x036013C4 BL 0x1C16CF4
	0x036013C8 ADRP X0, 0xB39000
	0x036013CC LDR X0, [X0 + 0x6E8]
	0x036013D0 BL 0x1C16CF4
	0x036013D4 ADRP X0, 0xB39000
	0x036013D8 LDR X0, [X0 + 0x878]
	0x036013DC BL 0x1C16CF4
	0x036013E0 ADRP X0, 0xB39000
	0x036013E4 LDR X0, [X0 + 0x880]
	0x036013E8 BL 0x1C16CF4
	0x036013EC ADRP X0, 0xB39000
	0x036013F0 LDR X0, [X0 + 0x888]
	0x036013F4 BL 0x1C16CF4
	0x036013F8 ADRP X0, 0xB39000
	0x036013FC LDR X0, [X0 + 0x890]
	0x03601400 BL 0x1C16CF4
	0x03601404 ADRP X0, 0xB39000
	0x03601408 LDR X0, [X0 + 0x898]
	0x0360140C BL 0x1C16CF4
	0x03601410 ADRP X0, 0xB39000
	0x03601414 LDR X0, [X0 + 0x8A0]
	0x03601418 BL 0x1C16CF4
	0x0360141C ADRP X0, 0xB39000
	0x03601420 LDR X0, [X0 + 0x8A8]
	0x03601424 BL 0x1C16CF4
	0x03601428 ADRP X0, 0xAFF000
	0x0360142C LDR X0, [X0 + 0x2F0]
	0x03601430 BL 0x1C16CF4
	0x03601434 ADRP X0, 0xB39000
	0x03601438 LDR X0, [X0 + 0x8B0]
	0x0360143C BL 0x1C16CF4
	0x03601440 ADRP X0, 0xB39000
	0x03601444 LDR X0, [X0 + 0x8B8]
	0x03601448 BL 0x1C16CF4
	0x0360144C ADRP X0, 0xB39000
	0x03601450 LDR X0, [X0 + 0x8C0]
	0x03601454 BL 0x1C16CF4
	0x03601458 ADRP X0, 0xB39000
	0x0360145C LDR X0, [X0 + 0x8C8]
	0x03601460 BL 0x1C16CF4
	0x03601464 ADRP X0, 0xB39000
	0x03601468 LDR X0, [X0 + 0x8D0]
	0x0360146C BL 0x1C16CF4
	0x03601470 ADRP X0, 0xB39000
	0x03601474 LDR X0, [X0 + 0x8D8]
	0x03601478 BL 0x1C16CF4
	0x0360147C ADRP X0, 0xB39000
	0x03601480 LDR X0, [X0 + 0x8E0]
	0x03601484 BL 0x1C16CF4
	0x03601488 ADRP X0, 0xB39000
	0x0360148C LDR X0, [X0 + 0x8E8]
	0x03601490 BL 0x1C16CF4
	0x03601494 ADRP X0, 0xB39000
	0x03601498 LDR X0, [X0 + 0x8F0]
	0x0360149C BL 0x1C16CF4
	0x036014A0 ADRP X0, 0xB39000
	0x036014A4 LDR X0, [X0 + 0x8F8]
	0x036014A8 BL 0x1C16CF4
	0x036014AC ADRP X0, 0xB39000
	0x036014B0 LDR X0, [X0 + 0x900]
	0x036014B4 BL 0x1C16CF4
	0x036014B8 ADRP X0, 0xB39000
	0x036014BC LDR X0, [X0 + 0x908]
	0x036014C0 BL 0x1C16CF4
	0x036014C4 ADRP X0, 0xB39000
	0x036014C8 LDR X0, [X0 + 0x910]
	0x036014CC BL 0x1C16CF4
	0x036014D0 ADRP X0, 0xB39000
	0x036014D4 LDR X0, [X0 + 0x918]
	0x036014D8 BL 0x1C16CF4
	0x036014DC ADRP X0, 0xB39000
	0x036014E0 LDR X0, [X0 + 0x920]
	0x036014E4 BL 0x1C16CF4
	0x036014E8 ADRP X0, 0xB39000
	0x036014EC LDR X0, [X0 + 0x928]
	0x036014F0 BL 0x1C16CF4
	0x036014F4 ADRP X0, 0xB39000
	0x036014F8 LDR X0, [X0 + 0x930]
	0x036014FC BL 0x1C16CF4
	0x03601500 ADRP X0, 0xB39000
	0x03601504 LDR X0, [X0 + 0x938]
	0x03601508 BL 0x1C16CF4
	0x0360150C ADRP X0, 0xB39000
	0x03601510 LDR X0, [X0 + 0x940]
	0x03601514 BL 0x1C16CF4
	0x03601518 ADRP X0, 0xB39000
	0x0360151C LDR X0, [X0 + 0x948]
	0x03601520 BL 0x1C16CF4
	0x03601524 ADRP X0, 0xB39000
	0x03601528 LDR X0, [X0 + 0x950]
	0x0360152C BL 0x1C16CF4
	0x03601530 ADRP X0, 0xB39000
	0x03601534 LDR X0, [X0 + 0x958]
	0x03601538 BL 0x1C16CF4
	0x0360153C ADRP X0, 0xB39000
	0x03601540 LDR X0, [X0 + 0x960]
	0x03601544 BL 0x1C16CF4
	0x03601548 ADRP X0, 0xB39000
	0x0360154C LDR X0, [X0 + 0x968]
	0x03601550 BL 0x1C16CF4
	0x03601554 ADRP X0, 0xB39000
	0x03601558 LDR X0, [X0 + 0x970]
	0x0360155C BL 0x1C16CF4
	0x03601560 ADRP X0, 0xB39000
	0x03601564 LDR X0, [X0 + 0x978]
	0x03601568 BL 0x1C16CF4
	0x0360156C ADRP X0, 0xB39000
	0x03601570 LDR X0, [X0 + 0x980]
	0x03601574 BL 0x1C16CF4
	0x03601578 ADRP X0, 0xB39000
	0x0360157C LDR X0, [X0 + 0x988]
	0x03601580 BL 0x1C16CF4
	0x03601584 ADRP X0, 0xB39000
	0x03601588 LDR X0, [X0 + 0x990]
	0x0360158C BL 0x1C16CF4
	0x03601590 ADRP X0, 0xB39000
	0x03601594 LDR X0, [X0 + 0x6E0]
	0x03601598 BL 0x1C16CF4
	0x0360159C ADRP X0, 0xB39000
	0x036015A0 LDR X0, [X0 + 0x998]
	0x036015A4 BL 0x1C16CF4
	0x036015A8 ADRP X0, 0xB39000
	0x036015AC LDR X0, [X0 + 0x9A0]
	0x036015B0 BL 0x1C16CF4
	0x036015B4 ADRP X0, 0xB39000
	0x036015B8 LDR X0, [X0 + 0x9A8]
	0x036015BC BL 0x1C16CF4
	0x036015C0 ADRP X0, 0xB39000
	0x036015C4 LDR X0, [X0 + 0x9B0]
	0x036015C8 BL 0x1C16CF4
	0x036015CC ADRP X0, 0xB39000
	0x036015D0 LDR X0, [X0 + 0x9B8]
	0x036015D4 BL 0x1C16CF4
	0x036015D8 ADRP X0, 0xB39000
	0x036015DC LDR X0, [X0 + 0x9C0]
	0x036015E0 BL 0x1C16CF4
	0x036015E4 ADRP X0, 0xB39000
	0x036015E8 LDR X0, [X0 + 0x9C8]
	0x036015EC BL 0x1C16CF4
	0x036015F0 ADRP X0, 0xB39000
	0x036015F4 LDR X0, [X0 + 0x188]
	0x036015F8 BL 0x1C16CF4
	0x036015FC ADRP X0, 0xB39000
	0x03601600 LDR X0, [X0 + 0x9D0]
	0x03601604 BL 0x1C16CF4
	0x03601608 ADRP X0, 0xB39000
	0x0360160C LDR X0, [X0 + 0x9D8]
	0x03601610 BL 0x1C16CF4
	0x03601614 ADRP X0, 0xB39000
	0x03601618 LDR X0, [X0 + 0x9E0]
	0x0360161C BL 0x1C16CF4
	0x03601620 ADRP X0, 0xB39000
	0x03601624 LDR X0, [X0 + 0x9E8]
	0x03601628 BL 0x1C16CF4
	0x0360162C ADRP X0, 0xB39000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X22, 0xDE0000
	011 Move X20, 0xB1B000
	012 Move X24, 0xB1B000
	013 Move W8, [X22+852]
	014 Move X20, [X20+2248]
	015 Move X24, [X24+2256]
	016 Move X19, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0xB3A000
	023 Move X0, [X0+1672]
	024 Call 0x1C17CF4
	025 Move X0, 0xAF5000
	026 Move X0, [X0+3144]
	027 Call 0x1C17CF4
	028 Move X0, 0xB1B000
	029 Move X0, [X0+2248]
	030 Call 0x1C17CF4
	031 Move X0, 0xB37000
	032 Move X0, [X0+1848]
	033 Call 0x1C17CF4
	034 Move X0, 0xB1B000
	035 Move X0, [X0+2256]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+852], W8
	039 Move [X31+16], X31
	040 Move [X31+24], X31
	041 Move [X19], X31
	042 Move X0, [X20]
	043 Call 0x1C17F10
	044 Move X1, X31
	045 Move X20, X0
	046 Call Object..ctor, X0
	047 Move X0, X20
	048 Move W1, W31
	049 Move [X20+16], X21
	050 Call Lexer.Scan, X0, X1
	051 Move X22, X0
	052 Move X0, [X24]
	053 Move X21, X1
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X8, 0xB3A000
	060 Move X8, [X8+1672]
	061 And X23, X21, 0
	062 Move X0, [X8]
	063 Call 0x1C17F10
	064 Move X21, X0
	065 Call ContentRangeHeaderValue..ctor, X0
	066 Move X0, X20
	067 Move X1, X22
	068 Move X2, X23
	069 Call Lexer.GetStringValue, X0, X1
	070 Compare X21, 0
	071 JumpIfEqual {278}
	072 Move [X21+16], X0
	073 Move X0, X20
	074 Move W1, W31
	075 Call Lexer.Scan, X0, X1
	076 Move X22, X0
	077 Move X0, [X24]
	078 Move X23, X1
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 NotImplemented "Instruction CMP not yet implemented."
	084 And X23, X23, 0
	085 Move X0, X20
	086 Move X1, X22
	087 Move X2, X23
	088 Call Lexer.IsStarStringValue, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {149}
	093 Move X0, X20
	094 Move W1, W31
	095 Call Lexer.Scan, X0, X1
	096 Move X8, [X24]
	097 Move X22, X0
	098 Move W9, [X8+224]
	099 Compare W9, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X8
	102 Call 0x1C17DFC
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X0, X20
	105 Move W1, W31
	106 Call Lexer.Scan, X0, X1
	107 Move X22, X0
	108 And X23, X1, 0
	109 Move X0, X20
	110 Move X1, X22
	111 Move X2, X23
	112 Call Lexer.IsStarStringValue, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfEqual {136}
	117 Add X3, X31, 16
	118 Move X0, X20
	119 Move X1, X22
	120 Move X2, X23
	121 Call Lexer.TryGetNumericValue, X0, X1, X2
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {267}
	126 Move X8, 0xB37000
	127 Move X1, [X31+16]
	128 Move X8, [X8+1848]
	129 Add X0, X31, 0
	130 Move [X31], X31
	131 Move [X31+8], X31
	132 Move X2, [X8]
	133 Call Nullable`1<Int64>..ctor, X0, X1
	134 Move V0, [X31]
	135 Move [X21+40], V0
	136 Move X0, X20
	137 Move W1, W31
	138 Call Lexer.Scan, X0, X1
	139 Move X8, [X24]
	140 Move X20, X0
	141 Move W9, [X8+224]
	142 Compare W9, 0
	143 JumpIfNotEqual {146}
	144 Move X0, X8
	145 Call 0x1C17DFC
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move W0, 1
	148 Move [X19], X21
	149 Add X3, X31, 24
	150 Move X0, X20
	151 Move X1, X22
	152 Move X2, X23
	153 Call Lexer.TryGetNumericValue, X0, X1, X2
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {202}
	158 Move X23, 0xB37000
	159 Move X1, [X31+24]
	160 Move X23, [X23+1848]
	161 Add X0, X31, 0
	162 Move [X31], X31
	163 Move [X31+8], X31
	164 Move X2, [X23]
	165 Call Nullable`1<Int64>..ctor, X0, X1
	166 Move V0, [X31]
	167 Move W1, 1
	168 Move X0, X20
	169 Move [X21+24], V0
	170 Call Lexer.Scan, X0, X1
	171 Move X8, [X24]
	172 Move X22, X0
	173 Move W9, [X8+224]
	174 Compare W9, 0
	175 JumpIfNotEqual {178}
	176 Move X0, X8
	177 Call 0x1C17DFC
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move X0, X20
	180 Move W1, W31
	181 Call Lexer.Scan, X0, X1
	182 Move X4, X0
	183 And X2, X1, 0
	184 Add X3, X31, 24
	185 Move X0, X20
	186 Move X1, X4
	187 Call Lexer.TryGetNumericValue, X0, X1, X2
	188 Move W8, W0
	189 Move W0, W31
	190 Move TEMP, X8
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {268}
	194 Move X1, [X31+24]
	195 Move X2, [X23]
	196 Add X0, X31, 0
	197 Move [X31], X31
	198 Move [X31+8], X31
	199 Call Nullable`1<Int64>..ctor, X0, X1
	200 Move V0, [X31]
	201 Move [X21+56], V0
	202 Move X0, X20
	203 Move X1, X22
	204 Move X2, X23
	205 Call Lexer.GetStringValue, X0, X1
	206 Compare X0, 0
	207 JumpIfEqual {278}
	208 Move W8, [X0+16]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move W1, 45
	211 Move W2, W31
	212 Move X3, X31
	213 Call String.Split, X0, X1, X2
	214 Compare X0, 0
	215 JumpIfEqual {278}
	216 Move W8, [X0+24]
	217 Move X22, X0
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X25, 0xAF5000
	220 Move X25, [X25+3144]
	221 Move X23, [X22+32]
	222 Move X0, [X25]
	223 Move W8, [X0+224]
	224 Compare W8, 0
	225 JumpIfNotEqual {227}
	226 Call 0x1C17DFC
	227 Move X0, X31
	228 Call CultureInfo.get_InvariantCulture
	229 Move X2, X0
	230 Add X3, X31, 24
	231 Move X0, X23
	232 Move W1, W31
	233 Move X4, X31
	234 Call Int64.TryParse, X0, X1, X2, X3
	235 Move W8, W0
	236 Move W0, W31
	237 Move TEMP, X8
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfNotEqual {268}
	241 Move X23, 0xB37000
	242 Move X1, [X31+24]
	243 Move X23, [X23+1848]
	244 Add X0, X31, 0
	245 Move [X31], X31
	246 Move [X31+8], X31
	247 Move X2, [X23]
	248 Call Nullable`1<Int64>..ctor, X0, X1
	249 Move V0, [X31]
	250 Move [X21+24], V0
	251 Move W8, [X22+24]
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move X0, [X25]
	254 Move X22, [X22+40]
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {259}
	258 Call 0x1C17DFC
	259 Move X0, X31
	260 Call CultureInfo.get_InvariantCulture
	261 Move X2, X0
	262 Add X3, X31, 24
	263 Move X0, X22
	264 Move W1, W31
	265 Move X4, X31
	266 Call Int64.TryParse, X0, X1, X2, X3
	267 Move W0, W31
	268 Move X20, [X31+80]
	269 Move X19, [X31+88]
	270 Move X22, [X31+64]
	271 Move X21, [X31+72]
	272 Move X24, [X31+48]
	273 Move X23, [X31+56]
	274 Move X30, [X31+32]
	275 Move X25, [X31+40]
	276 Add X31, X31, 96
	277 Return X0
	278 Call 0x1C17F20
	279 Call 0x1C17F28

Method: System.String ToString()

Disassembly:
	0x0360177C ADRP X0, 0xB39000
	0x03601780 LDR X0, [X0 + 0xA90]
	0x03601784 BL 0x1C16CF4
	0x03601788 ADRP X0, 0xB2D000
	0x0360178C LDR X0, [X0 + 0x7D0]
	0x03601790 BL 0x1C16CF4
	0x03601794 ADRP X0, 0xB39000
	0x03601798 LDR X0, [X0 + 0xA98]
	0x0360179C BL 0x1C16CF4
	0x036017A0 ADRP X0, 0xB39000
	0x036017A4 LDR X0, [X0 + 0xAA0]
	0x036017A8 BL 0x1C16CF4
	0x036017AC ADRP X0, 0xB39000
	0x036017B0 LDR X0, [X0 + 0xAA8]
	0x036017B4 BL 0x1C16CF4
	0x036017B8 ADRP X0, 0xB39000
	0x036017BC LDR X0, [X0 + 0xAB0]
	0x036017C0 BL 0x1C16CF4
	0x036017C4 ADRP X0, 0xB39000
	0x036017C8 LDR X0, [X0 + 0x158]
	0x036017CC BL 0x1C16CF4
	0x036017D0 ADRP X0, 0xB39000
	0x036017D4 LDR X0, [X0 + 0xAB8]
	0x036017D8 BL 0x1C16CF4
	0x036017DC ADRP X0, 0xB39000
	0x036017E0 LDR X0, [X0 + 0xAC0]
	0x036017E4 BL 0x1C16CF4
	0x036017E8 ADRP X0, 0xB39000
	0x036017EC LDR X0, [X0 + 0xAC8]
	0x036017F0 BL 0x1C16CF4
	0x036017F4 ADRP X0, 0xB39000
	0x036017F8 LDR X0, [X0 + 0xAD0]
	0x036017FC BL 0x1C16CF4
	0x03601800 ADRP X0, 0xB39000
	0x03601804 LDR X0, [X0 + 0xAD8]
	0x03601808 BL 0x1C16CF4
	0x0360180C ADRP X0, 0xB39000
	0x03601810 LDR X0, [X0 + 0xAE0]
	0x03601814 BL 0x1C16CF4
	0x03601818 ADRP X0, 0xB39000
	0x0360181C LDR X0, [X0 + 0xAE8]
	0x03601820 BL 0x1C16CF4
	0x03601824 ADRP X0, 0xB39000
	0x03601828 LDR X0, [X0 + 0xAF0]
	0x0360182C BL 0x1C16CF4
	0x03601830 ADRP X0, 0xB39000
	0x03601834 LDR X0, [X0 + 0xAF8]
	0x03601838 BL 0x1C16CF4
	0x0360183C MOVZ W8, 0x1
	0x03601840 STRB W8, [X24 + 0x361]
	0x03601844 LDR X0, [X25]
	0x03601848 MOVZ W1, 0x30
	0x0360184C BL 0x1C16D6C
	0x03601850 LDR X8, [X19]
	0x03601854 MOV X19, X0
	0x03601858 MOV X0, X8
	0x0360185C BL 0x1C16F10
	0x03601860 LDR X2, [X20]
	0x03601864 MOV X1, X31
	0x03601868 MOV X3, X31
	0x0360186C MOV X20, X0
	0x03601870 BL 0x27027B8
	0x03601874 LDR X0, [X22]
	0x03601878 LDR X4, [X21]
	0x0360187C LDR X5, [X23]
	0x03601880 MOVZ W2, 0x1
	0x03601884 MOVZ W3, 0x1
	0x03601888 MOV X1, X20
	0x0360188C BL 0x21EBD64
	0x03601890 CBZ X19, 0x36030DC
	0x03601894 MOV X20, X0
	0x03601898 CBZ X0, 0x36018B0
	0x0360189C LDR X8, [X19]
	0x036018A0 MOV X0, X20
	0x036018A4 LDR X1, [X8 + 0x40]
	0x036018A8 BL 0x1C16E00
	0x036018AC CBZ X0, 0x36030E0
	0x036018B0 MOV X22, X19
	0x036018B4 LDR W8, [X22 + 0x18]!
	0x036018B8 CBZ W8, 0x36030D8
	0x036018BC ADRP X25, 0xB39000
	0x036018C0 LDR X25, [X25 + 0x998]
	0x036018C4 STR X20, [X19 + 0x20]
	0x036018C8 ADRP X24, 0xB39000
	0x036018CC ADRP X26, 0xB39000
	0x036018D0 LDR X0, [X25]
	0x036018D4 ADRP X23, 0xB39000
	0x036018D8 LDR X24, [X24 + 0x8B0]
	0x036018DC LDR X26, [X26 + 0xA00]
	0x036018E0 LDR X23, [X23 + 0x7A0]
	0x036018E4 BL 0x1C16F10
	0x036018E8 LDR X2, [X24]
	0x036018EC MOV X1, X31
	0x036018F0 MOV X3, X31
	0x036018F4 MOV X20, X0
	0x036018F8 BL 0x27027B8
	0x036018FC LDR X0, [X26]
	0x03601900 LDR X4, [X21]
	0x03601904 LDR X5, [X23]
	0x03601908 MOVZ W2, 0x1
	0x0360190C MOVZ W3, 0x1
	0x03601910 MOV X1, X20
	0x03601914 BL 0x21EBD64
	0x03601918 MOV X20, X0
	0x0360191C CBZ X0, 0x3601934
	0x03601920 LDR X8, [X19]
	0x03601924 MOV X0, X20
	0x03601928 LDR X1, [X8 + 0x40]
	0x0360192C BL 0x1C16E00
	0x03601930 CBZ X0, 0x36030E0
	0x03601934 LDR W8, [X22]
	0x03601938 CMP W8, 0x1
	0x0360193C B.LS 0x36030D8
	0x03601940 STR X20, [X19 + 0x28]
	0x03601944 LDR X0, [X25]
	0x03601948 ADRP X26, 0xB39000
	0x0360194C LDR X26, [X26 + 0x9E8]
	0x03601950 BL 0x1C16F10
	0x03601954 LDR X2, [X24]
	0x03601958 MOV X1, X31
	0x0360195C MOV X3, X31
	0x03601960 MOV X20, X0
	0x03601964 BL 0x27027B8
	0x03601968 LDR X0, [X26]
	0x0360196C LDR X4, [X21]
	0x03601970 LDR X5, [X23]
	0x03601974 MOVZ W2, 0x1
	0x03601978 MOVZ W3, 0x1
	0x0360197C MOV X1, X20
	0x03601980 BL 0x21EBD64
	0x03601984 MOV X20, X0
	0x03601988 CBZ X0, 0x36019A0
	0x0360198C LDR X8, [X19]
	0x03601990 MOV X0, X20
	0x03601994 LDR X1, [X8 + 0x40]
	0x03601998 BL 0x1C16E00
	0x0360199C CBZ X0, 0x36030E0
	0x036019A0 LDR W8, [X22]
	0x036019A4 CMP W8, 0x2
	0x036019A8 B.LS 0x36030D8
	0x036019AC STR X20, [X19 + 0x30]
	0x036019B0 LDR X0, [X25]
	0x036019B4 ADRP X25, 0xB39000
	0x036019B8 LDR X25, [X25 + 0x9C8]
	0x036019BC BL 0x1C16F10
	0x036019C0 LDR X2, [X24]
	0x036019C4 MOV X1, X31
	0x036019C8 MOV X3, X31
	0x036019CC MOV X20, X0
	0x036019D0 BL 0x27027B8
	0x036019D4 LDR X0, [X25]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0xDE0000
	010 Move X19, 0xAF3000
	011 Move W8, [X21+853]
	012 Move X19, [X19+2288]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {44}
	018 Move X0, 0xAF5000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0xB1B000
	022 Move X0, [X0+3752]
	023 Call 0x1C17CF4
	024 Move X0, 0xB1B000
	025 Move X0, [X0+3760]
	026 Call 0x1C17CF4
	027 Move X0, 0xAF3000
	028 Move X0, [X0+2288]
	029 Call 0x1C17CF4
	030 Move X0, 0xAF3000
	031 Move X0, [X0+3544]
	032 Call 0x1C17CF4
	033 Move X0, 0xAF4000
	034 Move X0, [X0+680]
	035 Call 0x1C17CF4
	036 Move X0, 0xAF4000
	037 Move X0, [X0+3784]
	038 Call 0x1C17CF4
	039 Move X0, 0xB25000
	040 Move X0, [X0+3824]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+853], W8
	044 Move [X31+24], X31
	045 Move X0, [X19]
	046 Move X21, [X20+16]
	047 Call 0x1C17F10
	048 Move X1, X21
	049 Move X2, X31
	050 Move X19, X0
	051 Call StringBuilder..ctor, X0, X1
	052 Compare X19, 0
	053 JumpIfEqual {166}
	054 Move X8, 0xAF3000
	055 Move X8, [X8+3544]
	056 Move X22, 0xB1B000
	057 Move X21, 0xAF5000
	058 Move X23, 0xAF4000
	059 Move X1, [X8]
	060 Move X22, [X22+3760]
	061 Move X21, [X21+3144]
	062 Move X23, [X23+3784]
	063 Move X0, X19
	064 Move X2, X31
	065 Call StringBuilder.Append, X0, X1
	066 Move X8, [X20+24]
	067 Move X9, [X20+32]
	068 And W31, W8, 255
	069 Move [X31], X8
	070 Move [X31+8], X9
	071 Move X1, [X22]
	072 Move X24, 0xAF4000
	073 Move X24, [X24+680]
	074 Add X0, X31, 0
	075 Move [X31], X8
	076 Move [X31+8], X9
	077 Call Nullable`1<Int64>.get_Value, X0
	078 Move X8, [X21]
	079 Move [X31+24], X0
	080 Move W9, [X8+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {85}
	083 Move X0, X8
	084 Call 0x1C17DFC
	085 Move X0, X31
	086 Call CultureInfo.get_InvariantCulture
	087 Move X1, X0
	088 Add X0, X31, 24
	089 Move X2, X31
	090 Call Int64.ToString, X0, X1
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call StringBuilder.Append, X0, X1
	095 Move X1, [X24]
	096 Move X0, X19
	097 Move X2, X31
	098 Call StringBuilder.Append, X0, X1
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 Move X1, [X22]
	101 Add X0, X31, 0
	102 Move [X31], V0
	103 Call Nullable`1<Int64>.get_Value, X0
	104 Move [X31+24], X0
	105 Move X0, X31
	106 Call CultureInfo.get_InvariantCulture
	107 Move X1, X0
	108 Add X0, X31, 24
	109 Move X2, X31
	110 Call Int64.ToString, X0, X1
	111 Move X1, X0
	112 Move X8, 0xB25000
	113 Move X8, [X8+3824]
	114 Move X1, [X8]
	115 Move X0, X19
	116 Move X2, X31
	117 Call StringBuilder.Append, X0, X1
	118 Move X1, [X23]
	119 Move X0, X19
	120 Move X2, X31
	121 Call StringBuilder.Append, X0, X1
	122 Move X8, [X20+40]
	123 Move X9, [X20+48]
	124 And W31, W8, 255
	125 Move [X31], X8
	126 Move [X31+8], X9
	127 Move X1, [X22]
	128 Add X0, X31, 0
	129 Move [X31], X8
	130 Move [X31+8], X9
	131 Call Nullable`1<Int64>.get_Value, X0
	132 Move X8, [X21]
	133 Move [X31+24], X0
	134 Move W9, [X8+224]
	135 Compare W9, 0
	136 JumpIfNotEqual {139}
	137 Move X0, X8
	138 Call 0x1C17DFC
	139 Move X0, X31
	140 Call CultureInfo.get_InvariantCulture
	141 Move X1, X0
	142 Add X0, X31, 24
	143 Move X2, X31
	144 Call Int64.ToString, X0, X1
	145 Move X1, X0
	146 Move X8, 0xB25000
	147 Move X8, [X8+3824]
	148 Move X1, [X8]
	149 Move X0, X19
	150 Move X2, X31
	151 Call StringBuilder.Append, X0, X1
	152 Move X8, [X19]
	153 Move X0, X19
	154 Move X9, [X8+360]
	155 Move X1, [X8+368]
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Move X20, [X31+64]
	158 Move X19, [X31+72]
	159 Move X22, [X31+48]
	160 Move X21, [X31+56]
	161 Move X24, [X31+32]
	162 Move X23, [X31+40]
	163 Move X30, [X31+16]
	164 Add X31, X31, 80
	165 Return X0
	166 Call 0x1C17F20

