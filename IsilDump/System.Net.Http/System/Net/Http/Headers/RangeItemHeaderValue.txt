Type: System.Net.Http.Headers.RangeItemHeaderValue

Method: System.Void .ctor(System.Nullable`1<System.Int64> from, System.Nullable`1<System.Int64> to)

Disassembly:
	0x03609B30 LDR X0, [X0 + 0xF98]
	0x03609B34 BL 0x1C16CF4
	0x03609B38 MOVZ W8, 0x1
	0x03609B3C STRB W8, [X22 + 0x3DF]
	0x03609B40 STR X31, [X31 + 0x18]
	0x03609B44 STR X31, [X19]
	0x03609B48 CBZ X21, 0x3609D34
	0x03609B4C ADRP X24, 0xB12000
	0x03609B50 LDR X24, [X24 + 0x8D0]
	0x03609B54 MOV X0, X21
	0x03609B58 MOV W1, W31
	0x03609B5C BL 0x35FCF70
	0x03609B60 STR X0, [X20]
	0x03609B64 STR W1, [X20 + 0x8]
	0x03609B68 MOV X22, X0
	0x03609B6C LDR X0, [X24]
	0x03609B70 LDR W8, [X0 + 0xE0]
	0x03609B74 CBNZ W8, 0x3609B7C
	0x03609B78 BL 0x1C16DFC
	0x03609B7C CMP W22, 0x2
	0x03609B80 B.NE 0x3609D18
	0x03609B84 ADRP X8, 0xB31000
	0x03609B88 LDR X8, [X8 + 0xDA8]
	0x03609B8C LDR X0, [X8]
	0x03609B90 BL 0x1C16F10
	0x03609B94 MOV X1, X31
	0x03609B98 MOV X22, X0
	0x03609B9C BL 0x33BDD8C
	0x03609BA0 LDR X1, [X20]
	0x03609BA4 LDR W2, [X20 + 0x8]
	0x03609BA8 MOV X0, X21
	0x03609BAC BL 0x35FD280
	0x03609BB0 CBZ X22, 0x3609D34
	0x03609BB4 STR X0, [X22 + 0x20]
	0x03609BB8 MOV X0, X21
	0x03609BBC MOV W1, W31
	0x03609BC0 BL 0x35FCF70
	0x03609BC4 STR X0, [X20]
	0x03609BC8 STR W1, [X20 + 0x8]
	0x03609BCC MOV X23, X0
	0x03609BD0 LDR X0, [X24]
	0x03609BD4 LDR W8, [X0 + 0xE0]
	0x03609BD8 CBNZ W8, 0x3609BE0
	0x03609BDC BL 0x1C16DFC
	0x03609BE0 CMP W23, 0x5
	0x03609BE4 B.NE 0x3609D0C
	0x03609BE8 MOV X0, X21
	0x03609BEC MOV W1, W31
	0x03609BF0 BL 0x35FCF70
	0x03609BF4 STR X0, [X20]
	0x03609BF8 STR W1, [X20 + 0x8]
	0x03609BFC MOV X23, X0
	0x03609C00 LDR X0, [X24]
	0x03609C04 LDR W8, [X0 + 0xE0]
	0x03609C08 CBNZ W8, 0x3609C10
	0x03609C0C BL 0x1C16DFC
	0x03609C10 CMP W23, 0x2
	0x03609C14 B.NE 0x3609D18
	0x03609C18 LDR X1, [X20]
	0x03609C1C LDR W2, [X20 + 0x8]
	0x03609C20 MOV X0, X21
	0x03609C24 BL 0x35FD280
	0x03609C28 ADRP X8, 0xB31000
	0x03609C2C LDR X8, [X8 + 0xDD0]
	0x03609C30 MOV X2, X31
	0x03609C34 MOV X23, X0
	0x03609C38 LDR X1, [X8]
	0x03609C3C BL 0x3226EF8
	0x03609C40 TBZ X0, 0x0, 0x3609C60
	0x03609C44 ADRP X8, 0xB19000
	0x03609C48 LDR X8, [X8 + 0xF98]
	0x03609C4C MOV X0, X23
	0x03609C50 MOV X2, X31
	0x03609C54 LDR X1, [X8]
	0x03609C58 BL 0x3226EF8
	0x03609C5C TBNZ X0, 0x0, 0x3609D18
	0x03609C60 MOV X0, X21
	0x03609C64 MOV W1, W31
	0x03609C68 BL 0x35FCF70
	0x03609C6C STR X0, [X20]
	0x03609C70 STR W1, [X20 + 0x8]
	0x03609C74 MOV X23, X0
	0x03609C78 LDR X0, [X24]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDD8000
	009 Move W8, [X24+978]
	010 Move X19, X4
	011 Move X20, X3
	012 Move X21, X2
	013 Move X22, X1
	014 Move X23, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xB27000
	020 Move X0, [X0+2552]
	021 Call 0x1C17CF4
	022 Move X0, 0xB13000
	023 Move X0, [X0+3752]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+978], W8
	027 Move X0, X23
	028 Move X1, X31
	029 Call Object..ctor, X0
	030 And W31, W22, 255
	031 NotImplemented "Instruction CMP not yet implemented."
	032 And W31, W20, 255
	033 And W31, W20, 255
	034 And W31, W22, 255
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Move X9, X21
	037 ShiftRight X9, 63
	038 And X9, X9, 0x7FFFFFFF
	039 And W31, W8, W9
	040 And W31, W20, 255
	041 NotImplemented "Instruction CSET not yet implemented."
	042 Move X9, X19
	043 ShiftRight X9, 63
	044 And X9, X9, 0x7FFFFFFF
	045 And W31, W8, W9
	046 Move [X23+16], X22
	047 Move [X23+24], X21
	048 Move [X23+32], X20
	049 Move [X23+40], X19
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X24, [X31+16]
	055 Move X23, [X31+24]
	056 Move X30, [X31+64]
	057 Return 
	058 Move X0, 0xAF3000
	059 Move X0, [X0+1888]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X19, X0
	063 Move X0, 0xB14000
	064 Move X0, [X0+1888]
	065 Move X0, 0xAF3000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0xB14000
	071 Move X0, [X0+1896]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Move X2, X31
	076 Call ArgumentOutOfRangeException..ctor, X0, X1
	077 Move X0, 0xB32000
	078 Move X0, [X0+3464]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Call 0x1C17DEC
	083 Move X0, 0xAF3000
	084 Move X0, [X0+1400]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X1, X31
	088 Move X19, X0
	089 Call ArgumentException..ctor, X0

Method: System.Nullable`1<System.Int64> get_From()

Disassembly:
	0x03609E1C MOV X0, X19
	0x03609E20 MOV X3, X31
	0x03609E24 BL 0x32274B8

ISIL:
	001 Move X8, [X0+16]
	002 Move X1, [X0+24]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_From(System.Nullable`1<System.Int64> value)

Disassembly:
	0x03609E28 MOV X19, X0
	0x03609E2C MOV X0, X19

ISIL:
	001 Move [X0+16], X1
	002 Move [X0+24], X2
	003 Return 

Method: System.Nullable`1<System.Int64> get_To()

Disassembly:
	0x03609E30 LDP X20, X19, [X31 + 0x30]
	0x03609E34 LDP X22, X21, [X31 + 0x20]
	0x03609E38 LDR X30, [X31 + 0x10]

ISIL:
	001 Move X8, [X0+32]
	002 Move X1, [X0+40]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_To(System.Nullable`1<System.Int64> value)

Disassembly:
	0x03609E3C ADD X31, X31, 0x40
	0x03609E40 RET

ISIL:
	001 Move [X0+32], X1
	002 Move [X0+40], X2
	003 Return 

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x03609E44 SUB X31, X31, 0x90
	0x03609E48 STR X30, [X31 + 0x40]

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03609E4C STP X26, X25, [X31 + 0x50]
	0x03609E50 STP X24, X23, [X31 + 0x60]
	0x03609E54 STP X22, X21, [X31 + 0x70]
	0x03609E58 STP X20, X19, [X31 + 0x80]
	0x03609E5C ADRP X21, 0xDD7000
	0x03609E60 LDRB W8, [X21 + 0x3E1]
	0x03609E64 MOV X20, X1
	0x03609E68 MOV X19, X0
	0x03609E6C TBNZ X8, 0x0, 0x3609EC0
	0x03609E70 ADRP X0, 0xB31000
	0x03609E74 LDR X0, [X0 + 0x568]
	0x03609E78 BL 0x1C16CF4
	0x03609E7C ADRP X0, 0xB31000
	0x03609E80 LDR X0, [X0 + 0x570]
	0x03609E84 BL 0x1C16CF4
	0x03609E88 ADRP X0, 0xB31000
	0x03609E8C LDR X0, [X0 + 0x578]
	0x03609E90 BL 0x1C16CF4
	0x03609E94 ADRP X0, 0xB31000
	0x03609E98 LDR X0, [X0 + 0x5C0]
	0x03609E9C BL 0x1C16CF4
	0x03609EA0 ADRP X0, 0xB31000
	0x03609EA4 LDR X0, [X0 + 0x588]
	0x03609EA8 BL 0x1C16CF4
	0x03609EAC ADRP X0, 0xB31000
	0x03609EB0 LDR X0, [X0 + 0x628]
	0x03609EB4 BL 0x1C16CF4
	0x03609EB8 MOVZ W8, 0x1
	0x03609EBC STRB W8, [X21 + 0x3E1]
	0x03609EC0 MOV X0, X19
	0x03609EC4 MOV X1, X31
	0x03609EC8 STP X31, X31, [X31 + 0x20]
	0x03609ECC STR X31, [X31 + 0x30]
	0x03609ED0 BL 0x33BDD8C
	0x03609ED4 CBZ X20, 0x3609FF4
	0x03609ED8 LDR X8, [X20 + 0x10]
	0x03609EDC STR X8, [X19 + 0x10]
	0x03609EE0 LDR X0, [X20 + 0x18]
	0x03609EE4 CBZ X0, 0x3609FD4
	0x03609EE8 ADRP X8, 0xB31000
	0x03609EEC LDR X8, [X8 + 0x588]
	0x03609EF0 ADRP X24, 0xB31000
	0x03609EF4 LDR X24, [X24 + 0x570]
	0x03609EF8 ADRP X25, 0xB31000
	0x03609EFC LDR X1, [X8]
	0x03609F00 ADRP X26, 0xB31000
	0x03609F04 ADRP X23, 0xB31000
	0x03609F08 LDR X25, [X25 + 0x628]
	0x03609F0C LDR X26, [X26 + 0x5C0]
	0x03609F10 LDR X23, [X23 + 0x568]
	0x03609F14 ADD X8, X31, 0x8
	0x03609F18 BL 0x301CB58
	0x03609F1C LDUR V0, [X31 + 0x8]
	0x03609F20 LDR X8, [X31 + 0x18]
	0x03609F24 STR V0, [X31 + 0x2]
	0x03609F28 STR X8, [X31 + 0x30]
	0x03609F2C LDR X1, [X24]
	0x03609F30 ADD X0, X31, 0x20
	0x03609F34 BL 0x2BC4350
	0x03609F38 TBZ X0, 0x0, 0x3609FC8
	0x03609F3C LDR X22, [X31 + 0x30]
	0x03609F40 MOV X0, X19
	0x03609F44 BL 0x360A068
	0x03609F48 MOV X20, X0
	0x03609F4C LDR X0, [X25]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD8000
	006 Move W8, [X21+979]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xB27000
	014 Move X0, [X0+2552]
	015 Call 0x1C17CF4
	016 Move X0, 0xB13000
	017 Move X0, [X0+3752]
	018 Call 0x1C17CF4
	019 Move X0, 0xB32000
	020 Move X0, [X0+3456]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+979], W8
	024 Compare X20, 0
	025 JumpIfEqual {38}
	026 Move X8, 0xB32000
	027 Move X8, [X8+3456]
	028 Move X9, [X20]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Move W0, W31
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Compare X8, 0
	045 JumpIfEqual {71}
	046 Move W9, [X8+16]
	047 Move W10, [X19+16]
	048 Move X11, [X8+24]
	049 Move X12, [X19+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W0, W31
	056 Xor W9, W9, W10
	057 Compare W9, 0
	058 JumpIfEqual {39}
	059 Move W9, [X8+32]
	060 Move W10, [X19+32]
	061 Move X8, [X8+40]
	062 Move X11, [X19+40]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSET not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSET not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CSET not yet implemented."
	069 Xor W9, W9, W10
	070 And W0, W8, W9
	071 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03609F50 BL 0x1C16F10
	0x03609F54 MOV X21, X0
	0x03609F58 MOV X1, X22
	0x03609F5C BL 0x35FF92C
	0x03609F60 CBZ X20, 0x3609FF0
	0x03609F64 LDR X8, [X20]
	0x03609F68 LDR X1, [X26]
	0x03609F6C LDRH W9, [X8 + 0x12E]
	0x03609F70 CBZ X9, 0x3609F94
	0x03609F74 LDR X10, [X8 + 0xB0]
	0x03609F78 ADD X10, X10, 0x8
	0x03609F7C LDUR X11, [X10 - 0x8]
	0x03609F80 CMP X11, X1
	0x03609F84 B.EQ 0x3609FA4
	0x03609F88 SUBS X9, X9, 0x1
	0x03609F8C ADD X10, X10, 0x10
	0x03609F90 B.NE 0x3609F7C
	0x03609F94 MOVZ W2, 0x2
	0x03609F98 MOV X0, X20
	0x03609F9C BL 0x1C5C788
	0x03609FA0 B 0x3609FB4
	0x03609FA4 LDR W9, [X10]
	0x03609FA8 ADD W9, W9, 0x2
	0x03609FAC ADD X8, X8, W9, 0x4, SXTW
	0x03609FB0 ADD X0, X8, 0x138
	0x03609FB4 LDP X8, X2, [X0]
	0x03609FB8 MOV X0, X20
	0x03609FBC MOV X1, X21
	0x03609FC0 BLR X8
	0x03609FC4 B 0x3609F2C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xDD8000
	007 Move X21, 0xB32000
	008 Move W8, [X20+980]
	009 Move X21, [X21+1680]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB32000
	016 Move X0, [X0+1680]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+980], W8
	020 Move V0, [X19+1]
	021 Move X1, [X21]
	022 Add X0, X31, 0
	023 Move [X31], V0
	024 Call Nullable`1<Int64>.GetHashCode, X0
	025 Move V0, [X19+2]
	026 Move X1, [X21]
	027 Move W20, W0
	028 Add X0, X31, 0
	029 Move [X31], V0
	030 Call Nullable`1<Int64>.GetHashCode, X0
	031 Xor W0, W0, W20
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Move X21, [X31+24]
	036 Add X31, X31, 48
	037 Return X0

Method: System.String ToString()

Disassembly:
	0x03609FC8 LDR X1, [X23]
	0x03609FCC ADD X0, X31, 0x20
	0x03609FD0 BL 0x2BC434C
	0x03609FD4 LDP X20, X19, [X31 + 0x80]
	0x03609FD8 LDP X22, X21, [X31 + 0x70]
	0x03609FDC LDP X24, X23, [X31 + 0x60]
	0x03609FE0 LDP X26, X25, [X31 + 0x50]
	0x03609FE4 LDR X30, [X31 + 0x40]
	0x03609FE8 ADD X31, X31, 0x90
	0x03609FEC RET
	0x03609FF0 BL 0x1C16F20
	0x03609FF4 BL 0x1C16F20
	0x03609FF8 B 0x360A004
	0x03609FFC B 0x360A004
	0x0360A000 B 0x360A004
	0x0360A004 MOV X19, X0
	0x0360A008 CMP W1, 0x1
	0x0360A00C B.NE 0x360A038
	0x0360A010 MOV X0, X19
	0x0360A014 BL 0x3EB1AD0
	0x0360A018 LDR X20, [X0]
	0x0360A01C BL 0x3EB1AE0
	0x0360A020 LDR X1, [X23]
	0x0360A024 ADD X0, X31, 0x20
	0x0360A028 BL 0x2BC434C
	0x0360A02C CBZ X20, 0x3609FD4
	0x0360A030 MOV X0, X20
	0x0360A034 BL 0x1C16F18
	0x0360A038 MOV X20, X31
	0x0360A03C B 0x360A044
	0x0360A040 MOV X19, X0
	0x0360A044 LDR X1, [X23]
	0x0360A048 ADD X0, X31, 0x20
	0x0360A04C BL 0x2BC434C
	0x0360A050 CBNZ X20, 0x360A05C
	0x0360A054 MOV X0, X19
	0x0360A058 BL 0x1D2C690
	0x0360A05C MOV X0, X20
	0x0360A060 BL 0x1C16F18
	0x0360A064 BL 0x1990590
	0x0360A068 STR X30, [X31 - 0x20]!
	0x0360A06C STP X20, X19, [X31 + 0x10]
	0x0360A070 ADRP X20, 0xDD6000
	0x0360A074 LDRB W8, [X20 + 0x3E2]
	0x0360A078 MOV X19, X0
	0x0360A07C TBNZ X8, 0x0, 0x360A0A0
	0x0360A080 ADRP X0, 0xB30000
	0x0360A084 LDR X0, [X0 + 0x550]
	0x0360A088 BL 0x1C16CF4
	0x0360A08C ADRP X0, 0xB30000
	0x0360A090 LDR X0, [X0 + 0x558]
	0x0360A094 BL 0x1C16CF4
	0x0360A098 MOVZ W8, 0x1
	0x0360A09C STRB W8, [X20 + 0x3E2]
	0x0360A0A0 LDR X20, [X19 + 0x18]
	0x0360A0A4 CBNZ X20, 0x360A0D0
	0x0360A0A8 ADRP X8, 0xB30000
	0x0360A0AC LDR X8, [X8 + 0x558]
	0x0360A0B0 LDR X0, [X8]
	0x0360A0B4 BL 0x1C16F10
	0x0360A0B8 ADRP X8, 0xB30000
	0x0360A0BC LDR X8, [X8 + 0x550]
	0x0360A0C0 MOV X20, X0
	0x0360A0C4 LDR X1, [X8]
	0x0360A0C8 BL 0x301B7C4
	0x0360A0CC STR X20, [X19 + 0x18]
	0x0360A0D0 MOV X0, X20
	0x0360A0D4 LDP X20, X19, [X31 + 0x10]
	0x0360A0D8 LDR X30, [X31], #0x20
	0x0360A0DC RET
	0x0360A0E0 MOV X1, X31
	0x0360A0E4 B 0x33BDD8C
	0x0360A0E8 LDR X0, [X0 + 0x10]
	0x0360A0EC RET
	0x0360A0F0 STP X30, X21, [X31 - 0x20]!
	0x0360A0F4 STP X20, X19, [X31 + 0x10]
	0x0360A0F8 ADRP X20, 0xDD6000
	0x0360A0FC ADRP X21, 0xB30000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xDD8000
	008 Move W8, [X20+981]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xB13000
	015 Move X0, [X0+3752]
	016 Call 0x1C17CF4
	017 Move X0, 0xB13000
	018 Move X0, [X0+3760]
	019 Call 0x1C17CF4
	020 Move X0, 0xAEB000
	021 Move X0, [X0+680]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+981], W8
	025 Move [X31+24], X31
	026 Move V0, [X19+16]
	027 Move V1, [X19+32]
	028 Move X21, 0xB12000
	029 Move X21, [X21+3760]
	030 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	031 Move [X31], V1
	032 Compare W8, 0
	033 JumpIfEqual {62}
	034 Move X1, [X21]
	035 Add X0, X31, 0
	036 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	037 Move [X31], V0
	038 Call Nullable`1<Int64>.get_Value, X0
	039 Move [X31+24], X0
	040 Add X0, X31, 24
	041 Move X1, X31
	042 Call Int64.ToString, X0
	043 Move X20, X0
	044 Compare W22, 0
	045 JumpIfEqual {74}
	046 Move V0, [X19+2]
	047 Move X1, [X21]
	048 Add X0, X31, 0
	049 Move [X31], V0
	050 Call Nullable`1<Int64>.get_Value, X0
	051 Move [X31+24], X0
	052 Add X0, X31, 24
	053 Move X1, X31
	054 Call Int64.ToString, X0
	055 Move X8, 0xAEB000
	056 Move X8, [X8+680]
	057 Move X2, X0
	058 Move X0, X20
	059 Move X3, X31
	060 Move X1, [X8]
	061 Call String.Concat, X0, X1, X2
	062 Move X1, [X21]
	063 Add X0, X31, 0
	064 Call Nullable`1<Int64>.get_Value, X0
	065 Move [X31+24], X0
	066 Add X0, X31, 24
	067 Move X1, X31
	068 Call Int64.ToString, X0
	069 Move X8, 0xAEB000
	070 Move X8, [X8+680]
	071 Move X1, X0
	072 Move X8, [X8]
	073 Move X0, X8
	074 Move X8, 0xAEB000
	075 Move X8, [X8+680]
	076 Move X0, X20
	077 Move X1, [X8]
	078 Move X2, X31
	079 Call String.Concat, X0, X1
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X30, [X31+16]
	085 Add X31, X31, 64
	086 Return X0

