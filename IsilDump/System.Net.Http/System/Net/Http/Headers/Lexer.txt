Type: System.Net.Http.Headers.Lexer

Method: System.Void .ctor(System.String stream)

Disassembly:
	0x035FDD28 BL 0x1C16DFC
	0x035FDD2C MOV X0, X20
	0x035FDD30 MOV X1, X21
	0x035FDD34 MOV X2, X31
	0x035FDD38 BL 0x3394CE4
	0x035FDD3C TBNZ X0, 0x0, 0x35FDF44
	0x035FDD40 LDRB W8, [X19 + 0x50]
	0x035FDD44 LDRB W9, [X22 + 0x50]
	0x035FDD48 CMP W8, 0x0
	0x035FDD4C CSET W10, NE

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Int32 get_Position()

Disassembly:
	0x03605974 STP X20, X19, [X31 + 0x50]
	0x03605978 ADRP X22, 0xDDB000

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_Position(System.Int32 value)

Disassembly:
	0x0360597C ADRP X20, 0xB16000
	0x03605980 LDRB W8, [X22 + 0x399]

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.String GetStringValue(System.Net.Http.Headers.Token token)

Disassembly:
	0x035FE280 ADRP X0, 0xB3C000
	0x035FE284 LDR X0, [X0 + 0x5D8]
	0x035FE288 BL 0x1C16CF4
	0x035FE28C ADRP X0, 0xB3C000
	0x035FE290 LDR X0, [X0 + 0x5E0]
	0x035FE294 BL 0x1C16CF4
	0x035FE298 ADRP X0, 0xB3C000
	0x035FE29C LDR X0, [X0 + 0x5E8]
	0x035FE2A0 BL 0x1C16CF4
	0x035FE2A4 ADRP X0, 0xB3C000
	0x035FE2A8 LDR X0, [X0 + 0x5F0]
	0x035FE2AC BL 0x1C16CF4
	0x035FE2B0 ADRP X0, 0xB3C000
	0x035FE2B4 LDR X0, [X0 + 0x5F8]
	0x035FE2B8 BL 0x1C16CF4
	0x035FE2BC ADRP X0, 0xB3C000
	0x035FE2C0 LDR X0, [X0 + 0x600]
	0x035FE2C4 BL 0x1C16CF4
	0x035FE2C8 ADRP X0, 0xB3C000
	0x035FE2CC LDR X0, [X0 + 0x608]
	0x035FE2D0 BL 0x1C16CF4
	0x035FE2D4 ADRP X0, 0xB3C000
	0x035FE2D8 LDR X0, [X0 + 0x610]
	0x035FE2DC BL 0x1C16CF4
	0x035FE2E0 ADRP X0, 0xB3C000
	0x035FE2E4 LDR X0, [X0 + 0x618]
	0x035FE2E8 BL 0x1C16CF4
	0x035FE2EC ADRP X0, 0xB3C000
	0x035FE2F0 LDR X0, [X0 + 0x620]
	0x035FE2F4 BL 0x1C16CF4
	0x035FE2F8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDE3000
	008 Move X22, 0xB1E000
	009 Move W8, [X23+898]
	010 Move X22, [X22+2256]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB1E000
	019 Move X0, [X0+2256]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+898], W8
	023 Move X0, [X22]
	024 Move X21, [X21+16]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Compare X21, 0
	030 JumpIfEqual {45}
	031 Move X1, X20
	032 ShiftRight X1, 32
	033 And X1, X1, 0x7FFFFFFF
	034 Subtract W2, W19, W1
	035 Move X0, X21
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X3, X31
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call String.Substring, X0, X1, X2
	044 Return X0
	045 Call 0x1C17F20

Method: System.String GetStringValue(System.Net.Http.Headers.Token start, System.Net.Http.Headers.Token end)

Disassembly:
	0x03605984 LDR X20, [X20 + 0x8C8]
	0x03605988 MOV X19, X1
	0x0360598C MOV X21, X0
	0x03605990 TBNZ X8, 0x0, 0x36059D8
	0x03605994 ADRP X0, 0xB16000
	0x03605998 LDR X0, [X0 + 0x8C8]
	0x0360599C BL 0x1C16CF4
	0x036059A0 ADRP X0, 0xB35000
	0x036059A4 LDR X0, [X0 + 0xBF8]
	0x036059A8 BL 0x1C16CF4
	0x036059AC ADRP X0, 0xB35000
	0x036059B0 LDR X0, [X0 + 0xBC8]
	0x036059B4 BL 0x1C16CF4
	0x036059B8 ADRP X0, 0xB35000
	0x036059BC LDR X0, [X0 + 0xBD0]
	0x036059C0 BL 0x1C16CF4
	0x036059C4 ADRP X0, 0xB16000
	0x036059C8 LDR X0, [X0 + 0x8D0]
	0x036059CC BL 0x1C16CF4
	0x036059D0 MOVZ W8, 0x1
	0x036059D4 STRB W8, [X22 + 0x399]
	0x036059D8 STR X31, [X31 + 0x38]
	0x036059DC STP X31, X31, [X31 + 0x18]
	0x036059E0 STR W31, [X31 + 0x10]
	0x036059E4 STR X31, [X31 + 0x8]
	0x036059E8 STR X31, [X19]
	0x036059EC LDR X0, [X20]
	0x036059F0 BL 0x1C16F10
	0x036059F4 MOV X1, X31
	0x036059F8 MOV X20, X0
	0x036059FC BL 0x33BDD8C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDDC000
	008 Move X22, 0xB17000
	009 Move W8, [X23+899]
	010 Move X22, [X22+2256]
	011 Move X19, X4
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB17000
	019 Move X0, [X0+2256]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+899], W8
	023 Move X0, [X22]
	024 Move X21, [X21+16]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Compare X21, 0
	030 JumpIfEqual {45}
	031 Move X1, X20
	032 ShiftRight X1, 32
	033 And X1, X1, 0x7FFFFFFF
	034 Subtract W2, W19, W1
	035 Move X0, X21
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X3, X31
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call String.Substring, X0, X1, X2
	044 Return X0
	045 Call 0x1C17F20

Method: System.String GetQuotedStringValue(System.Net.Http.Headers.Token start)

Disassembly:
	0x035FFC68 LDR W8, [X0 + 0xE0]
	0x035FFC6C CBNZ W8, 0x35FFC74
	0x035FFC70 BL 0x1C16DFC
	0x035FFC74 CMP W20, 0x1
	0x035FFC78 B.NE 0x35FFCB0
	0x035FFC7C ADRP X8, 0xB3B000
	0x035FFC80 LDR X8, [X8 + 0x678]
	0x035FFC84 LDR X0, [X8]
	0x035FFC88 BL 0x1C16F10
	0x035FFC8C MOV X1, X31
	0x035FFC90 MOV X20, X0
	0x035FFC94 BL 0x33BDD8C
	0x035FFC98 CBZ X20, 0x35FFCC8
	0x035FFC9C LDR X8, [X31 + 0x8]
	0x035FFCA0 MOVZ W0, 0x1
	0x035FFCA4 STP X21, X8, [X20 + 0x10]
	0x035FFCA8 STR X20, [X19]
	0x035FFCAC B 0x35FFCB4
	0x035FFCB0 MOV W0, W31
	0x035FFCB4 LDP X20, X19, [X31 + 0x40]
	0x035FFCB8 LDP X22, X21, [X31 + 0x30]
	0x035FFCBC LDP X30, X23, [X31 + 0x20]
	0x035FFCC0 ADD X31, X31, 0x50
	0x035FFCC4 RET
	0x035FFCC8 BL 0x1C16F20
	0x035FFCCC SUB X31, X31, 0x70
	0x035FFCD0 STP X29, X30, [X31 + 0x10]
	0x035FFCD4 STP X28, X27, [X31 + 0x20]
	0x035FFCD8 STP X26, X25, [X31 + 0x30]
	0x035FFCDC STP X24, X23, [X31 + 0x40]
	0x035FFCE0 STP X22, X21, [X31 + 0x50]
	0x035FFCE4 STP X20, X19, [X31 + 0x60]
	0x035FFCE8 ADRP X22, 0xDE1000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDE2000
	008 Move X22, 0xB1D000
	009 Move W8, [X23+900]
	010 Move X22, [X22+2256]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB1D000
	019 Move X0, [X0+2256]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+900], W8
	023 Move X0, [X22]
	024 Move X21, [X21+16]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Compare X21, 0
	030 JumpIfEqual {47}
	031 Move X8, X20
	032 ShiftRight X8, 32
	033 And X8, X8, 0x7FFFFFFF
	034 Add W1, W8, 1
	035 Subtract W8, W19, W8
	036 Move X0, X21
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Subtract W2, W8, 2
	042 Move X3, X31
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Call String.Substring, X0, X1, X2
	046 Return X0
	047 Call 0x1C17F20

Method: System.String GetRemainingStringValue(System.Int32 position)

Disassembly:
	0x035FE2FC STRB W8, [X19 + 0x346]
	0x035FE300 MOVZ W0, 0x1
	0x035FE304 STR X31, [X20]
	0x035FE308 CBZ X23, 0x35FEAF4
	0x035FE30C STR X20, [X31 + 0x10]
	0x035FE310 ADRP X8, 0xB3C000
	0x035FE314 LDR X8, [X8 + 0x560]
	0x035FE318 ADRP X19, 0xB1D000
	0x035FE31C ADRP X20, 0xB1D000
	0x035FE320 LDR X19, [X19 + 0x8C8]
	0x035FE324 LDR X20, [X20 + 0x8D0]
	0x035FE328 LDR X0, [X8]
	0x035FE32C BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {14}
	005 Move W8, [X0+16]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, X31
	008 Move X30, [X31+16]
	009 Return X0
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Call String.Substring, X0, X1
	013 Return X0
	014 Call 0x1C17F20

Method: System.Boolean IsStarStringValue(System.Net.Http.Headers.Token token)

Disassembly:
	0x03601630 LDR X0, [X0 + 0x9F0]
	0x03601634 BL 0x1C16CF4
	0x03601638 ADRP X0, 0xB39000
	0x0360163C LDR X0, [X0 + 0x6F0]
	0x03601640 BL 0x1C16CF4
	0x03601644 ADRP X0, 0xB39000
	0x03601648 LDR X0, [X0 + 0x9F8]
	0x0360164C BL 0x1C16CF4
	0x03601650 ADRP X0, 0xB39000
	0x03601654 LDR X0, [X0 + 0xA00]
	0x03601658 BL 0x1C16CF4
	0x0360165C ADRP X0, 0xAF2000
	0x03601660 LDR X0, [X0 + 0xDD8]
	0x03601664 BL 0x1C16CF4
	0x03601668 ADRP X0, 0xB39000
	0x0360166C LDR X0, [X0 + 0xA08]
	0x03601670 BL 0x1C16CF4
	0x03601674 ADRP X0, 0xB39000
	0x03601678 LDR X0, [X0 + 0xA10]
	0x0360167C BL 0x1C16CF4
	0x03601680 ADRP X0, 0xB39000
	0x03601684 LDR X0, [X0 + 0xA18]
	0x03601688 BL 0x1C16CF4
	0x0360168C ADRP X0, 0xB39000
	0x03601690 LDR X0, [X0 + 0xA20]
	0x03601694 BL 0x1C16CF4
	0x03601698 ADRP X0, 0xAFB000
	0x0360169C LDR X0, [X0 + 0xD70]
	0x036016A0 BL 0x1C16CF4
	0x036016A4 ADRP X0, 0xB39000
	0x036016A8 LDR X0, [X0 + 0x6D0]
	0x036016AC BL 0x1C16CF4
	0x036016B0 ADRP X0, 0xB39000
	0x036016B4 LDR X0, [X0 + 0xA28]
	0x036016B8 BL 0x1C16CF4
	0x036016BC ADRP X0, 0xB39000
	0x036016C0 LDR X0, [X0 + 0xA30]
	0x036016C4 BL 0x1C16CF4
	0x036016C8 ADRP X0, 0xB39000
	0x036016CC LDR X0, [X0 + 0xA38]
	0x036016D0 BL 0x1C16CF4
	0x036016D4 ADRP X0, 0xB39000
	0x036016D8 LDR X0, [X0 + 0xA40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDE0000
	008 Move X22, 0xB1B000
	009 Move W8, [X23+901]
	010 Move X22, [X22+2256]
	011 Move X21, X2
	012 Move X20, X0
	013 Move X19, X1
	014 ShiftRight X19, 32
	015 And X19, X19, 0x7FFFFFFF
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xB1B000
	021 Move X0, [X0+2256]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+901], W8
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Subtract W8, W21, W19
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, [X22]
	033 Move X20, [X20+16]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Compare X20, 0
	039 JumpIfEqual {55}
	040 Move X0, X20
	041 Move W1, W19
	042 Move X2, X31
	043 Call String.get_Chars, X0, X1
	044 And W8, W0, 0xFFFF
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move W0, W31
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0
	055 Call 0x1C17F20

Method: System.Boolean TryGetNumericValue(System.Net.Http.Headers.Token token, out System.Int32 value)

Disassembly:
	0x03605A00 ADD X1, X31, 0x38
	0x03605A04 MOV X0, X20
	0x03605A08 STR X21, [X20 + 0x10]
	0x03605A0C STR X31, [X31 + 0x28]
	0x03605A10 BL 0x36055D8
	0x03605A14 ANDS W31, W0, 0xFF
	0x03605A18 STP X0, X1, [X31 + 0x18]
	0x03605A1C B.EQ 0x3605ACC
	0x03605A20 ADRP X8, 0xB35000
	0x03605A24 LDR X8, [X8 + 0xBD0]
	0x03605A28 ADRP X22, 0xB16000
	0x03605A2C ADD X0, X31, 0x18
	0x03605A30 LDR X1, [X8]
	0x03605A34 LDR X22, [X22 + 0x8D0]
	0x03605A38 BL 0x243B7DC
	0x03605A3C LDR X8, [X22]
	0x03605A40 MOV X21, X0
	0x03605A44 LDR W9, [X8 + 0xE0]
	0x03605A48 CBNZ W9, 0x3605A54
	0x03605A4C MOV X0, X8
	0x03605A50 BL 0x1C16DFC
	0x03605A54 CMP W21, 0x1
	0x03605A58 B.EQ 0x3605A94
	0x03605A5C CMP W21, 0x5
	0x03605A60 B.NE 0x3605ACC
	0x03605A64 ADD X1, X31, 0x28
	0x03605A68 ADD X2, X31, 0x8
	0x03605A6C MOV X0, X20
	0x03605A70 BL 0x35FFCCC
	0x03605A74 TBZ X0, 0x0, 0x3605ACC
	0x03605A78 LDR X0, [X22]
	0x03605A7C LDR X20, [X31 + 0x8]
	0x03605A80 LDR W8, [X0 + 0xE0]
	0x03605A84 CBNZ W8, 0x3605A8C
	0x03605A88 BL 0x1C16DFC
	0x03605A8C CMP W20, 0x1
	0x03605A90 B.NE 0x3605ACC
	0x03605A94 ADRP X8, 0xB35000
	0x03605A98 LDR X8, [X8 + 0xBF8]
	0x03605A9C LDR X0, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDDC000
	009 Move X23, 0xAF1000
	010 Move W8, [X24+902]
	011 Move X23, [X23+3144]
	012 Move X19, X3
	013 Move X22, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAF1000
	021 Move X0, [X0+3144]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+902], W8
	025 And X2, X22, 0
	026 Move X0, X21
	027 Move X1, X20
	028 Call Lexer.GetStringValue, X0, X1
	029 Move X8, [X23]
	030 Move X20, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Move X2, X0
	039 Move X0, X20
	040 Move X3, X19
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move W1, W31
	048 Move X4, X31
	049 Move X30, [X31+64]
	050 Call Int32.TryParse, X0, X1, X2, X3
	051 Return X0

Method: System.Boolean TryGetNumericValue(System.Net.Http.Headers.Token token, out System.Int64 value)

Disassembly:
	0x036016DC BL 0x1C16CF4
	0x036016E0 ADRP X0, 0xB39000
	0x036016E4 LDR X0, [X0 + 0xA48]
	0x036016E8 BL 0x1C16CF4
	0x036016EC ADRP X0, 0xB2D000
	0x036016F0 LDR X0, [X0 + 0x988]
	0x036016F4 BL 0x1C16CF4
	0x036016F8 ADRP X0, 0xB39000
	0x036016FC LDR X0, [X0 + 0xA50]
	0x03601700 BL 0x1C16CF4
	0x03601704 ADRP X0, 0xB39000
	0x03601708 LDR X0, [X0 + 0xA58]
	0x0360170C BL 0x1C16CF4
	0x03601710 ADRP X0, 0xB39000
	0x03601714 LDR X0, [X0 + 0x190]
	0x03601718 BL 0x1C16CF4
	0x0360171C ADRP X0, 0xB39000
	0x03601720 LDR X0, [X0 + 0xA60]
	0x03601724 BL 0x1C16CF4
	0x03601728 ADRP X0, 0xB39000
	0x0360172C LDR X0, [X0 + 0xA68]
	0x03601730 BL 0x1C16CF4
	0x03601734 ADRP X0, 0xAF2000
	0x03601738 LDR X0, [X0 + 0x838]
	0x0360173C BL 0x1C16CF4
	0x03601740 ADRP X0, 0xB39000
	0x03601744 LDR X0, [X0 + 0xA70]
	0x03601748 BL 0x1C16CF4
	0x0360174C ADRP X0, 0xB39000
	0x03601750 LDR X0, [X0 + 0xA78]
	0x03601754 BL 0x1C16CF4
	0x03601758 ADRP X0, 0xB39000
	0x0360175C LDR X0, [X0 + 0xA80]
	0x03601760 BL 0x1C16CF4
	0x03601764 ADRP X0, 0xB1A000
	0x03601768 LDR X0, [X0 + 0xB28]
	0x0360176C BL 0x1C16CF4
	0x03601770 ADRP X0, 0xB39000
	0x03601774 LDR X0, [X0 + 0xA88]
	0x03601778 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDE0000
	009 Move X23, 0xAF5000
	010 Move W8, [X24+903]
	011 Move X23, [X23+3144]
	012 Move X19, X3
	013 Move X22, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAF5000
	021 Move X0, [X0+3144]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+903], W8
	025 And X2, X22, 0
	026 Move X0, X21
	027 Move X1, X20
	028 Call Lexer.GetStringValue, X0, X1
	029 Move X8, [X23]
	030 Move X20, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Move X2, X0
	039 Move X0, X20
	040 Move X3, X19
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move W1, W31
	048 Move X4, X31
	049 Move X30, [X31+64]
	050 Call Int64.TryParse, X0, X1, X2, X3
	051 Return X0

Method: System.Nullable`1<System.TimeSpan> TryGetTimeSpanValue(System.Net.Http.Headers.Token token)

Disassembly:
	0x035FFBA0 ADRP X0, 0xB1C000
	0x035FFBA4 LDR X0, [X0 + 0x8D0]
	0x035FFBA8 BL 0x1C16CF4
	0x035FFBAC MOVZ W8, 0x1
	0x035FFBB0 STRB W8, [X22 + 0x350]
	0x035FFBB4 STR X31, [X19]
	0x035FFBB8 LDR X0, [X20]
	0x035FFBBC BL 0x1C16F10
	0x035FFBC0 MOV X1, X31
	0x035FFBC4 MOV X20, X0
	0x035FFBC8 BL 0x33BDD8C
	0x035FFBCC MOV X0, X20
	0x035FFBD0 MOV W1, W31
	0x035FFBD4 STR X21, [X20 + 0x10]
	0x035FFBD8 BL 0x35FCF70
	0x035FFBDC MOV X21, X0
	0x035FFBE0 LDR X0, [X23]
	0x035FFBE4 MOV X22, X1
	0x035FFBE8 LDR W8, [X0 + 0xE0]
	0x035FFBEC CBNZ W8, 0x35FFBF4
	0x035FFBF0 BL 0x1C16DFC
	0x035FFBF4 CMP W21, 0x2
	0x035FFBF8 B.NE 0x35FFCB0
	0x035FFBFC AND X2, X22, 0x0
	0x035FFC00 MOV X0, X20
	0x035FFC04 MOV X1, X21
	0x035FFC08 STR X31, [X31 + 0x8]
	0x035FFC0C BL 0x35FD280
	0x035FFC10 MOV X21, X0
	0x035FFC14 MOV X0, X20
	0x035FFC18 MOV W1, W31
	0x035FFC1C BL 0x35FCF70
	0x035FFC20 MOV X22, X0
	0x035FFC24 LDR X0, [X23]
	0x035FFC28 STR X22, [X31 + 0x10]
	0x035FFC2C STR W1, [X31 + 0x18]
	0x035FFC30 LDR W8, [X0 + 0xE0]
	0x035FFC34 CBNZ W8, 0x35FFC3C
	0x035FFC38 BL 0x1C16DFC
	0x035FFC3C CMP W22, 0x1
	0x035FFC40 B.EQ 0x35FFC7C
	0x035FFC44 CMP W22, 0x5
	0x035FFC48 B.NE 0x35FFCB0
	0x035FFC4C ADD X1, X31, 0x8
	0x035FFC50 ADD X2, X31, 0x10
	0x035FFC54 MOV X0, X20
	0x035FFC58 BL 0x35FFCCC
	0x035FFC5C TBZ X0, 0x0, 0x35FFCB0
	0x035FFC60 LDR X0, [X23]
	0x035FFC64 LDR X20, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xDE2000
	008 Move W8, [X22+904]
	009 Move X21, X2
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xB29000
	017 Move X0, [X0+2968]
	018 Call 0x1C17CF4
	019 Move X0, 0xAF7000
	020 Move X0, [X0+1392]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+904], W8
	024 And X2, X21, 0
	025 Add X3, X31, 28
	026 Move X0, X20
	027 Move X1, X19
	028 Move [X31+28], W31
	029 Call Lexer.TryGetNumericValue, X0, X1, X2
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {53}
	034 Move X8, 0xAF7000
	035 Move X8, [X8+1392]
	036 Move X19, 0xB29000
	037 Move W20, [X31+28]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Move X19, [X19+2968]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 NotImplemented "Instruction SCVTF not yet implemented."
	045 Move X0, X31
	046 Call TimeSpan.FromSeconds, V0
	047 Move X2, [X19]
	048 Move X1, X0
	049 Add X0, X31, 0
	050 Move [X31], X31
	051 Move [X31+8], X31
	052 Call Nullable`1<TimeSpan>..ctor, X0, X1
	053 Move [X31], X31
	054 Move [X31+8], X31
	055 Move X0, [X31]
	056 Move X1, [X31+8]
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X30, [X31+16]
	062 Add X31, X31, 64
	063 Return X0

Method: System.Boolean TryGetDateValue(System.Net.Http.Headers.Token token, out System.DateTimeOffset value)

Disassembly:
	0x03605AA0 BL 0x1C16F10
	0x03605AA4 MOV X1, X31
	0x03605AA8 MOV X20, X0
	0x03605AAC BL 0x33BDD8C
	0x03605AB0 CBZ X20, 0x3605AE4
	0x03605AB4 LDR X9, [X31 + 0x38]
	0x03605AB8 LDR X8, [X31 + 0x28]
	0x03605ABC MOVZ W0, 0x1
	0x03605AC0 STP X8, X9, [X20 + 0x10]
	0x03605AC4 STR X20, [X19]
	0x03605AC8 B 0x3605AD0
	0x03605ACC MOV W0, W31
	0x03605AD0 LDP X20, X19, [X31 + 0x50]
	0x03605AD4 LDP X22, X21, [X31 + 0x40]
	0x03605AD8 LDR X30, [X31 + 0x30]
	0x03605ADC ADD X31, X31, 0x60
	0x03605AE0 RET
	0x03605AE4 BL 0x1C16F20
	0x03605AE8 STR X30, [X31 - 0x20]!
	0x03605AEC STP X20, X19, [X31 + 0x10]
	0x03605AF0 ADRP X19, 0xDDB000
	0x03605AF4 ADRP X20, 0xB35000
	0x03605AF8 LDRB W8, [X19 + 0x39B]
	0x03605AFC LDR X20, [X20 + 0x4B0]
	0x03605B00 TBNZ X8, 0x0, 0x3605B18
	0x03605B04 ADRP X0, 0xB35000
	0x03605B08 LDR X0, [X0 + 0x4B0]
	0x03605B0C BL 0x1C16CF4
	0x03605B10 MOVZ W8, 0x1
	0x03605B14 STRB W8, [X19 + 0x39B]
	0x03605B18 LDR X0, [X20]
	0x03605B1C BL 0x1C16F10
	0x03605B20 MOV X1, X31
	0x03605B24 MOV X19, X0
	0x03605B28 BL 0x33BDD8C
	0x03605B2C LDR X8, [X20]
	0x03605B30 LDR X8, [X8 + 0xB8]
	0x03605B34 STR X19, [X8]
	0x03605B38 LDP X20, X19, [X31 + 0x10]
	0x03605B3C LDR X30, [X31], #0x20
	0x03605B40 RET
	0x03605B44 MOV X1, X31
	0x03605B48 B 0x33BDD8C
	0x03605B4C STR X30, [X31 - 0x20]!
	0x03605B50 STP X20, X19, [X31 + 0x10]
	0x03605B54 ADRP X20, 0xDDB000
	0x03605B58 LDRB W8, [X20 + 0x39C]
	0x03605B5C MOV X19, X1
	0x03605B60 TBNZ X8, 0x0, 0x3605B78
	0x03605B64 ADRP X0, 0xB35000
	0x03605B68 LDR X0, [X0 + 0xC00]
	0x03605B6C BL 0x1C16CF4
	0x03605B70 MOVZ W8, 0x1
	0x03605B74 STRB W8, [X20 + 0x39C]
	0x03605B78 CBZ X19, 0x3605BA0
	0x03605B7C ADRP X8, 0xB35000
	0x03605B80 LDR X8, [X8 + 0xC00]
	0x03605B84 LDR X0, [X19 + 0x18]
	0x03605B88 LDP X20, X19, [X31 + 0x10]
	0x03605B8C MOVZ W2, 0x5

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDDC000
	009 Move X23, 0xB17000
	010 Move W8, [X24+905]
	011 Move X23, [X23+2256]
	012 Move X19, X3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xB17000
	021 Move X0, [X0+2248]
	022 Call 0x1C17CF4
	023 Move X0, 0xB17000
	024 Move X0, [X0+2256]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+905], W8
	028 Move X0, [X23]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, [X23]
	035 Move X22, [X22+16]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Compare X22, 0
	041 JumpIfEqual {72}
	042 Move X8, X21
	043 ShiftRight X8, 32
	044 And X8, X8, 0x7FFFFFFF
	045 Add W1, W8, 1
	046 Subtract W8, W20, W8
	047 Subtract W2, W8, 2
	048 Move X0, X22
	049 Move X3, X31
	050 Call String.Substring, X0, X1, X2
	051 And X2, X20, 0
	052 Move X0, X22
	053 Move X1, X21
	054 Call Lexer.GetStringValue, X0, X1
	055 Move X8, 0xB17000
	056 Move X8, [X8+2248]
	057 Move X20, X0
	058 Move X0, [X8]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X22, [X31+32]
	068 Move X21, [X31+40]
	069 Move X24, [X31+16]
	070 Move X23, [X31+24]
	071 Move X30, [X31+64]
	072 Call 0x1C17F20

Method: System.Boolean TryGetDateValue(System.String text, out System.DateTimeOffset value)

Disassembly:
	0x03605B90 LDR X1, [X8]
	0x03605B94 MOV X3, X31
	0x03605B98 LDR X30, [X31], #0x20
	0x03605B9C B 0x3226C60
	0x03605BA0 BL 0x1C16F20
	0x03605BA4 STR X30, [X31 - 0x20]!
	0x03605BA8 STP X20, X19, [X31 + 0x10]
	0x03605BAC MOV X19, X1
	0x03605BB0 MOV X1, X31
	0x03605BB4 MOV X20, X0
	0x03605BB8 BL 0x33BDD8C
	0x03605BBC MOV X0, X20
	0x03605BC0 MOV X1, X19
	0x03605BC4 LDP X20, X19, [X31 + 0x10]
	0x03605BC8 LDR X30, [X31], #0x20
	0x03605BCC B 0x3605198
	0x03605BD0 MOV X1, X31
	0x03605BD4 B 0x33BDD8C
	0x03605BD8 SUB X31, X31, 0x50
	0x03605BDC STP X30, X23, [X31 + 0x20]
	0x03605BE0 STP X22, X21, [X31 + 0x30]
	0x03605BE4 STP X20, X19, [X31 + 0x40]
	0x03605BE8 ADRP X22, 0xDDB000
	0x03605BEC LDRB W8, [X22 + 0x39D]
	0x03605BF0 MOV X20, X2
	0x03605BF4 MOV X19, X1
	0x03605BF8 MOV X21, X0
	0x03605BFC TBNZ X8, 0x0, 0x3605C38
	0x03605C00 ADRP X0, 0xAF1000
	0x03605C04 LDR X0, [X0 + 0x1C0]
	0x03605C08 BL 0x1C16CF4
	0x03605C0C ADRP X0, 0xB35000
	0x03605C10 LDR X0, [X0 + 0xBC8]
	0x03605C14 BL 0x1C16CF4
	0x03605C18 ADRP X0, 0xB35000
	0x03605C1C LDR X0, [X0 + 0xBD0]
	0x03605C20 BL 0x1C16CF4
	0x03605C24 ADRP X0, 0xB16000
	0x03605C28 LDR X0, [X0 + 0x8D0]
	0x03605C2C BL 0x1C16CF4
	0x03605C30 MOVZ W8, 0x1
	0x03605C34 STRB W8, [X22 + 0x39D]
	0x03605C38 ADRP X23, 0xB16000
	0x03605C3C LDR X23, [X23 + 0x8D0]
	0x03605C40 ADD X1, X31, 0x18
	0x03605C44 MOV X0, X21
	0x03605C48 STP X31, X31, [X31 + 0x10]
	0x03605C4C STP X31, X31, [X31]
	0x03605C50 STR X31, [X19]
	0x03605C54 BL 0x36055D8
	0x03605C58 ANDS W31, W0, 0xFF
	0x03605C5C STP X0, X1, [X31]
	0x03605C60 B.EQ 0x3605CF4
	0x03605C64 ADRP X8, 0xB35000
	0x03605C68 LDR X8, [X8 + 0xBD0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDDC000
	007 Move X21, 0xB17000
	008 Move W8, [X22+906]
	009 Move X21, [X21+2248]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xB24000
	017 Move X0, [X0+808]
	018 Call 0x1C17CF4
	019 Move X0, 0xAF1000
	020 Move X0, [X0+2648]
	021 Call 0x1C17CF4
	022 Move X0, 0xB17000
	023 Move X0, [X0+2248]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+906], W8
	027 Move X0, [X21]
	028 Move X22, 0xB24000
	029 Move W8, [X0+224]
	030 Move X22, [X22+808]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move X8, [X22]
	036 Move X9, [X0+184]
	037 Move X22, 0xAF1000
	038 Move W10, [X8+224]
	039 Move X21, [X9+16]
	040 Move X22, [X22+2648]
	041 Compare W10, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call DateTimeFormatInfo.get_InvariantInfo
	047 Move X8, [X22]
	048 Move X22, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X21
	056 Move X2, X22
	057 Move X4, X19
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move W3, 71
	063 Move X5, X31
	064 Move X30, [X31+48]
	065 Call DateTimeOffset.TryParseExact, X0, X1, X2, X3, X4
	066 Return X0

Method: System.Boolean TryGetDoubleValue(System.Net.Http.Headers.Token token, out System.Double value)

Disassembly:
	0x03605C6C ADD X0, X31, 0x0
	0x03605C70 LDR X1, [X8]
	0x03605C74 BL 0x243B7DC
	0x03605C78 STR X0, [X20]
	0x03605C7C STR W1, [X20 + 0x8]
	0x03605C80 MOV X22, X0
	0x03605C84 LDR X0, [X23]
	0x03605C88 LDR W8, [X0 + 0xE0]
	0x03605C8C CBNZ W8, 0x3605C94
	0x03605C90 BL 0x1C16DFC
	0x03605C94 CMP W22, 0x5
	0x03605C98 B.NE 0x3605CB0
	0x03605C9C ADD X1, X31, 0x10
	0x03605CA0 MOV X0, X21
	0x03605CA4 MOV X2, X20
	0x03605CA8 BL 0x35FFCCC
	0x03605CAC TBZ X0, 0x0, 0x3605D28
	0x03605CB0 ADRP X8, 0xAF1000
	0x03605CB4 LDR X8, [X8 + 0x1C0]
	0x03605CB8 LDR X0, [X8]
	0x03605CBC BL 0x1C16F10
	0x03605CC0 MOV X1, X31
	0x03605CC4 MOV X20, X0
	0x03605CC8 BL 0x33BDD8C
	0x03605CCC STR X20, [X19]
	0x03605CD0 CBZ X20, 0x3605D40
	0x03605CD4 LDR X8, [X31 + 0x18]
	0x03605CD8 STR X8, [X20 + 0x18]
	0x03605CDC LDR X8, [X19]
	0x03605CE0 CBZ X8, 0x3605D40
	0x03605CE4 LDR X9, [X31 + 0x10]
	0x03605CE8 MOVZ W0, 0x1
	0x03605CEC STR X9, [X8 + 0x10]
	0x03605CF0 B 0x3605D2C
	0x03605CF4 LDR X8, [X23]
	0x03605CF8 LDR W9, [X8 + 0xE0]
	0x03605CFC CBNZ W9, 0x3605D0C
	0x03605D00 MOV X0, X8
	0x03605D04 BL 0x1C16DFC
	0x03605D08 LDR X8, [X23]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDDC000
	009 Move X23, 0xAF1000
	010 Move W8, [X24+907]
	011 Move X23, [X23+3144]
	012 Move X19, X3
	013 Move X22, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAF1000
	021 Move X0, [X0+3144]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+907], W8
	025 And X2, X22, 0
	026 Move X0, X21
	027 Move X1, X20
	028 Call Lexer.GetStringValue, X0, X1
	029 Move X8, [X23]
	030 Move X20, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Move X2, X0
	039 Move X0, X20
	040 Move X3, X19
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move W1, 32
	048 Move X4, X31
	049 Move X30, [X31+64]
	050 Call Double.TryParse, X0, X1, X2, X3
	051 Return X0

Method: System.Boolean IsValidToken(System.String input)

Disassembly:
	0x03605D0C LDR X8, [X8 + 0xB8]
	0x03605D10 MOV W0, W31
	0x03605D14 LDR W9, [X8 + 0x8]
	0x03605D18 LDR X8, [X8]
	0x03605D1C STR W9, [X20 + 0x8]
	0x03605D20 STR X8, [X20]
	0x03605D24 B 0x3605D2C
	0x03605D28 MOV W0, W31
	0x03605D2C LDP X20, X19, [X31 + 0x40]
	0x03605D30 LDP X22, X21, [X31 + 0x30]
	0x03605D34 LDP X30, X23, [X31 + 0x20]
	0x03605D38 ADD X31, X31, 0x50
	0x03605D3C RET
	0x03605D40 BL 0x1C16F20
	0x03605D44 STP X30, X25, [X31 - 0x40]!
	0x03605D48 STP X24, X23, [X31 + 0x10]
	0x03605D4C STP X22, X21, [X31 + 0x20]
	0x03605D50 STP X20, X19, [X31 + 0x30]
	0x03605D54 ADRP X24, 0xDDB000
	0x03605D58 ADRP X25, 0xB35000
	0x03605D5C ADRP X22, 0xB35000
	0x03605D60 ADRP X23, 0xB35000
	0x03605D64 LDRB W8, [X24 + 0x39E]
	0x03605D68 LDR X25, [X25 + 0xC08]
	0x03605D6C LDR X22, [X22 + 0xC10]
	0x03605D70 LDR X23, [X23 + 0xC18]
	0x03605D74 MOV X19, X2
	0x03605D78 MOV W20, W1
	0x03605D7C MOV X21, X0
	0x03605D80 TBNZ X8, 0x0, 0x3605DB0
	0x03605D84 ADRP X0, 0xB35000
	0x03605D88 LDR X0, [X0 + 0xC18]
	0x03605D8C BL 0x1C16CF4
	0x03605D90 ADRP X0, 0xB35000
	0x03605D94 LDR X0, [X0 + 0xC08]
	0x03605D98 BL 0x1C16CF4
	0x03605D9C ADRP X0, 0xB35000
	0x03605DA0 LDR X0, [X0 + 0xC10]
	0x03605DA4 BL 0x1C16CF4
	0x03605DA8 MOVZ W8, 0x1
	0x03605DAC STRB W8, [X24 + 0x39E]
	0x03605DB0 LDR X0, [X25]
	0x03605DB4 BL 0x1C16F10
	0x03605DB8 LDR X2, [X22]
	0x03605DBC MOV X1, X31
	0x03605DC0 MOV X3, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xDDC000
	008 Move W8, [X20+908]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB17000
	015 Move X0, [X0+2248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+908], W8
	019 Compare X19, 0
	020 JumpIfEqual {57}
	021 Move W8, [X19+16]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X23, 0xB17000
	026 Move X23, [X23+2248]
	027 Move W21, W31
	028 Move X0, X19
	029 Move W1, W21
	030 Move X2, X31
	031 Call String.get_Chars, X0, X1
	032 Move X8, [X23]
	033 Move W22, W0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Move W0, W22
	040 Call Lexer.IsValidCharacter, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {48}
	045 Move W8, [X19+16]
	046 Add W21, W21, 1
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W20, W31
	049 Move W0, W20
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Return X0
	057 Call 0x1C17F20

Method: System.Boolean IsValidCharacter(System.Char input)

Disassembly:
	0x03605DC4 MOV X22, X0
	0x03605DC8 BL 0x2B47CB4
	0x03605DCC LDR X4, [X23]
	0x03605DD0 MOV X0, X21
	0x03605DD4 MOV W1, W20
	0x03605DD8 MOV X2, X22
	0x03605DDC MOV X3, X19
	0x03605DE0 LDP X20, X19, [X31 + 0x30]
	0x03605DE4 LDP X22, X21, [X31 + 0x20]
	0x03605DE8 LDP X24, X23, [X31 + 0x10]
	0x03605DEC LDP X30, X25, [X31], #0x40
	0x03605DF0 B 0x21A2910
	0x03605DF4 MOV X1, X31
	0x03605DF8 B 0x33BDD8C
	0x03605DFC LDR X0, [X0 + 0x18]
	0x03605E00 RET
	0x03605E04 STR X1, [X0 + 0x18]
	0x03605E08 RET
	0x03605E0C LDR X0, [X0 + 0x10]
	0x03605E10 RET
	0x03605E14 STP X30, X21, [X31 - 0x20]!
	0x03605E18 STP X20, X19, [X31 + 0x10]
	0x03605E1C ADRP X20, 0xDDB000
	0x03605E20 ADRP X21, 0xB35000
	0x03605E24 LDRB W8, [X20 + 0x3A0]
	0x03605E28 LDR X21, [X21 + 0x628]
	0x03605E2C MOV X19, X0
	0x03605E30 TBNZ X8, 0x0, 0x3605E48
	0x03605E34 ADRP X0, 0xB35000
	0x03605E38 LDR X0, [X0 + 0x628]
	0x03605E3C BL 0x1C16CF4
	0x03605E40 MOVZ W8, 0x1
	0x03605E44 STRB W8, [X20 + 0x3A0]
	0x03605E48 LDR X0, [X21]
	0x03605E4C BL 0x1C16F10
	0x03605E50 MOV X1, X19
	0x03605E54 MOV X20, X0
	0x03605E58 BL 0x35FF92C
	0x03605E5C MOV X0, X20
	0x03605E60 LDP X20, X19, [X31 + 0x10]
	0x03605E64 LDP X30, X21, [X31], #0x20
	0x03605E68 RET
	0x03605E6C STR X30, [X31 - 0x20]!
	0x03605E70 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDDC000
	006 Move X20, 0xB17000
	007 Move W8, [X21+909]
	008 Move X20, [X20+2248]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB17000
	015 Move X0, [X0+2248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+909], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W8, [X8+8]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X8, [X0+184]
	034 Move X8, [X8]
	035 Compare X8, 0
	036 JumpIfEqual {50}
	037 Move W9, [X8+24]
	038 And W10, W19, 0xFFFF
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X8, X8, W19
	041 Move W8, [X8+32]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSET not yet implemented."
	044 Move W0, W31
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0
	050 Call 0x1C17F20
	051 Call 0x1C17F28

Method: System.Void EatChar()

Disassembly:
	0x03601E64 ADRP X24, 0xB39000
	0x03601E68 LDR X20, [X20 + 0x860]
	0x03601E6C LDR X23, [X23 + 0xB28]
	0x03601E70 LDR X24, [X24 + 0x810]

ISIL:
	001 Move W8, [X0+24]
	002 Add W8, W8, 1
	003 Move [X0+24], W8
	004 Return 

Method: System.Int32 PeekChar()

Disassembly:
	0x03601E24 MOV X20, X0
	0x03601E28 CBZ X0, 0x3601E40
	0x03601E2C LDR X8, [X19]
	0x03601E30 MOV X0, X20
	0x03601E34 LDR X1, [X8 + 0x40]
	0x03601E38 BL 0x1C16E00
	0x03601E3C CBZ X0, 0x36030E0
	0x03601E40 LDR W8, [X22]
	0x03601E44 CMP W8, 0xC
	0x03601E48 B.LS 0x36030D8
	0x03601E4C ADRP X8, 0xB39000
	0x03601E50 LDR X8, [X8 + 0x8F0]
	0x03601E54 STR X20, [X19 + 0x80]
	0x03601E58 ADRP X20, 0xB39000
	0x03601E5C ADRP X23, 0xB1A000
	0x03601E60 LDR X0, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+16]
	004 Compare X0, 0
	005 JumpIfEqual {17}
	006 Move W1, [X8+24]
	007 Move W8, [X0+16]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X2, X31
	010 Call String.get_Chars, X0, X1
	011 And W0, W0, 0xFFFF
	012 Move TEMP, 0
	013 Not TEMP
	014 Move W0, TEMP
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20

Method: System.Boolean ScanCommentOptional(out System.String value, out System.Net.Http.Headers.Token readToken)

Disassembly:
	0x03605E74 MOV X20, X0
	0x03605E78 LDR X0, [X0 + 0x18]
	0x03605E7C CBZ X0, 0x3605EE4
	0x03605E80 MOV X1, X31
	0x03605E84 BL 0x322B6E4
	0x03605E88 CBZ X0, 0x3605EE4
	0x03605E8C LDR X8, [X0]
	0x03605E90 LDP X9, X1, [X8 + 0x158]
	0x03605E94 BLR X9
	0x03605E98 LDR X8, [X20 + 0x10]
	0x03605E9C MOV W19, W0
	0x03605EA0 MOV X1, X31
	0x03605EA4 MOV X0, X8
	0x03605EA8 BL 0x32277A8
	0x03605EAC TBNZ X0, 0x0, 0x3605ED4
	0x03605EB0 LDR X0, [X20 + 0x10]
	0x03605EB4 CBZ X0, 0x3605EE4
	0x03605EB8 MOV X1, X31
	0x03605EBC BL 0x322B6E4
	0x03605EC0 CBZ X0, 0x3605EE4
	0x03605EC4 LDR X8, [X0]
	0x03605EC8 LDP X9, X1, [X8 + 0x158]
	0x03605ECC BLR X9
	0x03605ED0 EOR W19, W0, W19, 0x0
	0x03605ED4 MOV W0, W19
	0x03605ED8 LDP X20, X19, [X31 + 0x10]
	0x03605EDC LDR X30, [X31], #0x20
	0x03605EE0 RET
	0x03605EE4 BL 0x1C16F20
	0x03605EE8 STP X30, X21, [X31 - 0x20]!
	0x03605EEC STP X20, X19, [X31 + 0x10]
	0x03605EF0 ADRP X21, 0xDDB000
	0x03605EF4 LDRB W8, [X21 + 0x3A1]
	0x03605EF8 MOV X20, X1
	0x03605EFC MOV X19, X0
	0x03605F00 TBNZ X8, 0x0, 0x3605F18
	0x03605F04 ADRP X0, 0xB35000
	0x03605F08 LDR X0, [X0 + 0x628]
	0x03605F0C BL 0x1C16CF4
	0x03605F10 MOVZ W8, 0x1
	0x03605F14 STRB W8, [X21 + 0x3A1]
	0x03605F18 CBZ X20, 0x3605F98
	0x03605F1C ADRP X8, 0xB35000
	0x03605F20 LDR X8, [X8 + 0x628]
	0x03605F24 LDR X9, [X20]
	0x03605F28 LDR X8, [X8]
	0x03605F2C LDRB W11, [X9 + 0x130]
	0x03605F30 LDRB W10, [X8 + 0x130]
	0x03605F34 CMP W11, W10
	0x03605F38 B.CC 0x3605F98
	0x03605F3C LDR X9, [X9 + 0xC8]
	0x03605F40 ADD X9, X9, X10, 0x3, LSL
	0x03605F44 LDUR X9, [X9 - 0x8]
	0x03605F48 CMP X9, X8
	0x03605F4C CSEL X20, X20, X31, EQ
	0x03605F50 B.NE 0x3605F98
	0x03605F54 CBZ X20, 0x3605FC4
	0x03605F58 LDR X0, [X20 + 0x18]
	0x03605F5C LDR X1, [X19 + 0x18]
	0x03605F60 MOVZ W2, 0x5
	0x03605F64 MOV X3, X31
	0x03605F68 BL 0x3226C60
	0x03605F6C TBZ X0, 0x0, 0x3605F98
	0x03605F70 LDR X0, [X19 + 0x10]
	0x03605F74 MOV X1, X31
	0x03605F78 BL 0x32277A8
	0x03605F7C LDR X8, [X20 + 0x10]
	0x03605F80 TBZ X0, 0x0, 0x3605FA8
	0x03605F84 LDP X20, X19, [X31 + 0x10]
	0x03605F88 MOV X0, X8
	0x03605F8C MOV X1, X31
	0x03605F90 LDP X30, X21, [X31], #0x20
	0x03605F94 B 0x32277A8
	0x03605F98 LDP X20, X19, [X31 + 0x10]
	0x03605F9C MOV W0, W31
	0x03605FA0 LDP X30, X21, [X31], #0x20
	0x03605FA4 RET
	0x03605FA8 LDR X1, [X19 + 0x10]
	0x03605FAC LDP X20, X19, [X31 + 0x10]
	0x03605FB0 MOVZ W2, 0x5
	0x03605FB4 MOV X0, X8
	0x03605FB8 MOV X3, X31
	0x03605FBC LDP X30, X21, [X31], #0x20
	0x03605FC0 B 0x3226C60
	0x03605FC4 BL 0x1C16F20
	0x03605FC8 STP X30, X25, [X31 - 0x40]!
	0x03605FCC STP X24, X23, [X31 + 0x10]
	0x03605FD0 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDDC000
	008 Move X23, 0xB17000
	009 Move W8, [X22+910]
	010 Move X23, [X23+2256]
	011 Move X21, X2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xB17000
	019 Move X0, [X0+2256]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+910], W8
	023 Move X0, X20
	024 Move W1, W31
	025 Call Lexer.Scan, X0, X1
	026 Move [X21], X0
	027 Move [X21+8], W1
	028 Move X22, X0
	029 Move X0, [X23]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, [X20+16]
	036 Compare X0, 0
	037 JumpIfEqual {93}
	038 Move W1, [X20+24]
	039 Move W22, 1
	040 Move W8, [X0+16]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X2, X31
	043 Call String.get_Chars, X0, X1
	044 And W8, W0, 0xFFFF
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract W8, W0, 32
	048 And W8, W8, 0xFFFF
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, [X20+24]
	051 Move X0, [X20+16]
	052 Add W1, W8, 1
	053 Move [X20+24], W1
	054 Compare X0, 0
	055 JumpIfNotEqual {40}
	056 Move W8, [X20+24]
	057 Subtract W22, W22, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add W1, W8, 1
	060 Move [X20+24], W1
	061 Move W8, [X20+24]
	062 Add W22, W22, 1
	063 Add W1, W8, 1
	064 Move [X20+24], W1
	065 Move X0, [X20+16]
	066 Compare X0, 0
	067 JumpIfNotEqual {40}
	068 Move X0, X31
	069 Move W8, W31
	070 Move [X19], X0
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move W0, W8
	076 Move X30, [X31+48]
	077 Move X23, [X31+56]
	078 Return X0
	079 Move X0, [X23]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, [X20+16]
	085 Compare X0, 0
	086 JumpIfEqual {93}
	087 Move W1, [X21+4]
	088 Move W8, [X20+24]
	089 Move X3, X31
	090 Subtract W2, W8, W1
	091 Call String.Substring, X0, X1, X2
	092 Move W8, 1
	093 Call 0x1C17F20

Method: System.Net.Http.Headers.Token Scan(System.Boolean recognizeDash = False)

Disassembly:
	0x035FDF70 STP X22, X21, [X31 + 0x70]
	0x035FDF74 STP X20, X19, [X31 + 0x80]
	0x035FDF78 ADRP X22, 0xDE3000
	0x035FDF7C ADRP X21, 0xB3D000
	0x035FDF80 ADRP X25, 0xB3D000
	0x035FDF84 ADRP X20, 0xAF6000
	0x035FDF88 LDRB W8, [X22 + 0x345]
	0x035FDF8C LDR X21, [X21 + 0x5A8]
	0x035FDF90 LDR X25, [X25 + 0x5B0]
	0x035FDF94 LDR X20, [X20 + 0xB58]
	0x035FDF98 MOV X19, X0
	0x035FDF9C TBNZ X8, 0x0, 0x35FDFD8
	0x035FDFA0 ADRP X0, 0xAF6000
	0x035FDFA4 LDR X0, [X0 + 0xB58]
	0x035FDFA8 BL 0x1C16CF4
	0x035FDFAC ADRP X0, 0xB3D000
	0x035FDFB0 LDR X0, [X0 + 0x5A8]
	0x035FDFB4 BL 0x1C16CF4
	0x035FDFB8 ADRP X0, 0xB3D000
	0x035FDFBC LDR X0, [X0 + 0x5B8]
	0x035FDFC0 BL 0x1C16CF4
	0x035FDFC4 ADRP X0, 0xB3D000
	0x035FDFC8 LDR X0, [X0 + 0x5B0]
	0x035FDFCC BL 0x1C16CF4
	0x035FDFD0 MOVZ W8, 0x1
	0x035FDFD4 STRB W8, [X22 + 0x345]
	0x035FDFD8 STRB W31, [X31 + 0x1C]
	0x035FDFDC LDR X0, [X19 + 0x10]
	0x035FDFE0 LDR X1, [X21]
	0x035FDFE4 ADRP X21, 0xB3D000
	0x035FDFE8 LDR X21, [X21 + 0x5B8]
	0x035FDFEC BL 0x21EACDC
	0x035FDFF0 LDUR V0, [X19 + 0x28]
	0x035FDFF4 LDR X1, [X25]
	0x035FDFF8 STR W0, [X31 + 0x18]
	0x035FDFFC ADD X0, X31, 0x20
	0x035FE000 STR V0, [X31 + 0x2]
	0x035FE004 BL 0x243B474
	0x035FE008 LDRB W9, [X19 + 0x38]
	0x035FE00C LDR X8, [X20]
	0x035FE010 STR W0, [X31 + 0x14]
	0x035FE014 STRB W9, [X31 + 0x1C]
	0x035FE018 LDR W9, [X8 + 0xE0]
	0x035FE01C CBNZ W9, 0x35FE028
	0x035FE020 MOV X0, X8
	0x035FE024 BL 0x1C16DFC
	0x035FE028 ADD X0, X31, 0x1C
	0x035FE02C MOV X1, X31
	0x035FE030 BL 0x33176B4
	0x035FE034 LDR V0, [X19 + 0x4]
	0x035FE038 LDR X1, [X25]
	0x035FE03C STR W0, [X31 + 0x10]
	0x035FE040 ADD X0, X31, 0x20
	0x035FE044 STR V0, [X31 + 0x2]
	0x035FE048 BL 0x243B474
	0x035FE04C LDR V0, [X19 + 0x5]
	0x035FE050 LDR X1, [X25]
	0x035FE054 STR W0, [X31 + 0xC]
	0x035FE058 ADD X0, X31, 0x20
	0x035FE05C STR V0, [X31 + 0x2]
	0x035FE060 BL 0x243B474
	0x035FE064 LDRB W8, [X19 + 0x60]
	0x035FE068 STR W0, [X31 + 0x8]
	0x035FE06C ADD X0, X31, 0x1C
	0x035FE070 MOV X1, X31
	0x035FE074 STRB W8, [X31 + 0x1C]
	0x035FE078 BL 0x33176B4
	0x035FE07C LDR X8, [X19 + 0x18]
	0x035FE080 LDR X1, [X21]
	0x035FE084 STR W0, [X31 + 0x4]
	0x035FE088 MOV X0, X8
	0x035FE08C BL 0x21EACDC
	0x035FE090 LDRB W8, [X19 + 0x61]
	0x035FE094 MOV W26, W0
	0x035FE098 ADD X0, X31, 0x1C
	0x035FE09C MOV X1, X31
	0x035FE0A0 STRB W8, [X31 + 0x1C]
	0x035FE0A4 BL 0x33176B4
	0x035FE0A8 LDRB W8, [X19 + 0x62]
	0x035FE0AC MOV W27, W0
	0x035FE0B0 ADD X0, X31, 0x1C
	0x035FE0B4 MOV X1, X31
	0x035FE0B8 STRB W8, [X31 + 0x1C]
	0x035FE0BC BL 0x33176B4
	0x035FE0C0 LDRB W8, [X19 + 0x63]
	0x035FE0C4 MOV W28, W0
	0x035FE0C8 ADD X0, X31, 0x1C
	0x035FE0CC MOV X1, X31
	0x035FE0D0 STRB W8, [X31 + 0x1C]
	0x035FE0D4 BL 0x33176B4
	0x035FE0D8 LDRB W8, [X19 + 0x64]
	0x035FE0DC MOV W29, W0
	0x035FE0E0 ADD X0, X31, 0x1C
	0x035FE0E4 MOV X1, X31
	0x035FE0E8 STRB W8, [X31 + 0x1C]
	0x035FE0EC BL 0x33176B4
	0x035FE0F0 LDRB W8, [X19 + 0x65]
	0x035FE0F4 MOV W20, W0
	0x035FE0F8 ADD X0, X31, 0x1C
	0x035FE0FC MOV X1, X31
	0x035FE100 STRB W8, [X31 + 0x1C]
	0x035FE104 BL 0x33176B4
	0x035FE108 LDR X8, [X19 + 0x20]
	0x035FE10C LDR X1, [X21]
	0x035FE110 MOV W21, W0
	0x035FE114 MOV X0, X8
	0x035FE118 BL 0x21EACDC
	0x035FE11C LDRB W8, [X19 + 0x66]
	0x035FE120 MOV W22, W0
	0x035FE124 ADD X0, X31, 0x1C
	0x035FE128 MOV X1, X31
	0x035FE12C STRB W8, [X31 + 0x1C]
	0x035FE130 BL 0x33176B4
	0x035FE134 LDRB W8, [X19 + 0x67]
	0x035FE138 MOV W23, W0
	0x035FE13C ADD X0, X31, 0x1C
	0x035FE140 MOV X1, X31
	0x035FE144 STRB W8, [X31 + 0x1C]
	0x035FE148 BL 0x33176B4
	0x035FE14C LDUR V0, [X19 + 0x68]
	0x035FE150 LDR X1, [X25]
	0x035FE154 MOV W24, W0
	0x035FE158 ADD X0, X31, 0x20
	0x035FE15C STR V0, [X31 + 0x2]
	0x035FE160 BL 0x243B474
	0x035FE164 LDP W10, W9, [X31 + 0x14]
	0x035FE168 MOVZ W8, 0x1D
	0x035FE16C MADD W9, W9, W8, W10
	0x035FE170 LDR W10, [X31 + 0x10]
	0x035FE174 MADD W9, W9, W8, W10
	0x035FE178 LDR W10, [X31 + 0xC]
	0x035FE17C MADD W9, W9, W8, W10
	0x035FE180 LDR W10, [X31 + 0x8]
	0x035FE184 MADD W9, W9, W8, W10
	0x035FE188 LDR W10, [X31 + 0x4]
	0x035FE18C MADD W9, W9, W8, W10
	0x035FE190 MADD W9, W9, W8, W26
	0x035FE194 MADD W9, W9, W8, W27
	0x035FE198 MADD W9, W9, W8, W28
	0x035FE19C MADD W9, W9, W8, W29
	0x035FE1A0 MADD W9, W9, W8, W20
	0x035FE1A4 MADD W9, W9, W8, W21
	0x035FE1A8 MADD W9, W9, W8, W22
	0x035FE1AC MADD W9, W9, W8, W23
	0x035FE1B0 MADD W9, W9, W8, W24
	0x035FE1B4 LDP X20, X19, [X31 + 0x80]
	0x035FE1B8 LDP X22, X21, [X31 + 0x70]
	0x035FE1BC LDP X24, X23, [X31 + 0x60]
	0x035FE1C0 LDP X26, X25, [X31 + 0x50]
	0x035FE1C4 LDP X28, X27, [X31 + 0x40]
	0x035FE1C8 LDP X29, X30, [X31 + 0x30]
	0x035FE1CC MADD W8, W9, W8, W0
	0x035FE1D0 MOVZ W9, 0x845D
	0x035FE1D4 MOVK W9, 0x23670000
	0x035FE1D8 ADD W0, W8, W9
	0x035FE1DC ADD X31, X31, 0x90
	0x035FE1E0 RET
	0x035FE1E4 SUB X31, X31, 0x80
	0x035FE1E8 STP X29, X30, [X31 + 0x20]
	0x035FE1EC STP X28, X27, [X31 + 0x30]
	0x035FE1F0 STP X26, X25, [X31 + 0x40]
	0x035FE1F4 STP X24, X23, [X31 + 0x50]
	0x035FE1F8 STP X22, X21, [X31 + 0x60]
	0x035FE1FC STP X20, X19, [X31 + 0x70]
	0x035FE200 ADRP X19, 0xDE2000
	0x035FE204 LDRB W8, [X19 + 0x346]
	0x035FE208 MOV X20, X1
	0x035FE20C MOV X23, X0
	0x035FE210 TBNZ X8, 0x0, 0x35FE300
	0x035FE214 ADRP X0, 0xB3C000
	0x035FE218 LDR X0, [X0 + 0x560]
	0x035FE21C BL 0x1C16CF4
	0x035FE220 ADRP X0, 0xAFE000
	0x035FE224 LDR X0, [X0 + 0x8D8]
	0x035FE228 BL 0x1C16CF4
	0x035FE22C ADRP X0, 0xAF8000
	0x035FE230 LDR X0, [X0 + 0x258]
	0x035FE234 BL 0x1C16CF4
	0x035FE238 ADRP X0, 0xB3C000
	0x035FE23C LDR X0, [X0 + 0x5C0]
	0x035FE240 BL 0x1C16CF4
	0x035FE244 ADRP X0, 0xB1D000
	0x035FE248 LDR X0, [X0 + 0x8C8]
	0x035FE24C BL 0x1C16CF4
	0x035FE250 ADRP X0, 0xB29000
	0x035FE254 LDR X0, [X0 + 0xB88]
	0x035FE258 BL 0x1C16CF4
	0x035FE25C ADRP X0, 0xB1D000
	0x035FE260 LDR X0, [X0 + 0x8D0]
	0x035FE264 BL 0x1C16CF4
	0x035FE268 ADRP X0, 0xB3C000
	0x035FE26C LDR X0, [X0 + 0x5C8]
	0x035FE270 BL 0x1C16CF4
	0x035FE274 ADRP X0, 0xB3C000
	0x035FE278 LDR X0, [X0 + 0x5D0]
	0x035FE27C BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xDE4000
	009 Move W8, [X20+911]
	010 Move W22, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB1F000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+911], W8
	021 Move X0, [X19+16]
	022 Compare X0, 0
	023 JumpIfEqual {49}
	024 Move W20, [X19+24]
	025 Move W8, [X0+16]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W1, W20
	028 Add W8, W1, 1
	029 Move X2, X31
	030 Move [X19+24], W8
	031 Call String.get_Chars, X0, X1
	032 And W8, W0, 0xFFFF
	033 Move W21, W0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, [X19+16]
	038 Compare X0, 0
	039 JumpIfEqual {190}
	040 Move W1, [X19+24]
	041 Move W8, [X0+16]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W1, 1
	044 Move W3, [X19+24]
	045 Add X0, X31, 0
	046 Move W2, W20
	047 Move [X31+8], W31
	048 Move [X31], X31
	049 Move [X31+8], W31
	050 Move [X31], X31
	051 Add X0, X31, 0
	052 Move W1, W31
	053 Move W2, W31
	054 Move W3, W31
	055 Call Token..ctor, X0, X1, X2, X3
	056 Move X0, [X31]
	057 Move W1, [X31+8]
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X30, [X31+16]
	063 Move X23, [X31+24]
	064 Add X31, X31, 64
	065 Return X0
	066 NotImplemented "Instruction CMP not yet implemented."
	067 And W8, W21, 0xFFFF
	068 Subtract W8, W8, 40
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X9, -44457984
	071 Add X9, X9, 704
	072 NotImplemented "Instruction ADR not yet implemented."
	073 Move W11, [X9]
	074 Add X10, X10, X11
	075 Move W1, 8
	076 CallNoReturn X10
	077 Move W8, [X19+24]
	078 Move W1, 9
	079 Subtract W20, W8, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X0, [X19+16]
	082 Compare X0, 0
	083 JumpIfEqual {190}
	084 Move W1, [X19+24]
	085 Subtract W20, W1, 1
	086 Move W8, [X0+16]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add W8, W1, 1
	089 Move X2, X31
	090 Move [X19+24], W8
	091 Call String.get_Chars, X0, X1
	092 And W8, W0, 0xFFFF
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W1, [X19+24]
	096 Move X0, [X19+16]
	097 Compare X0, 0
	098 JumpIfNotEqual {86}
	099 Move X0, [X19+16]
	100 Compare X0, 0
	101 JumpIfEqual {190}
	102 Move W8, [X19+24]
	103 Move W9, [X0+16]
	104 Add W1, W8, 1
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move [X19+24], W1
	107 Compare X0, 0
	108 JumpIfNotEqual {86}
	109 And W8, W21, 0xFFFF
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W1, 4
	113 Move W1, 5
	114 Move W1, 3
	115 Move TEMP, X22
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {120}
	119 Move W1, 7
	120 Move X22, 0xB1E000
	121 Move X22, [X22+2248]
	122 And W23, W21, 0xFFFF
	123 Move X0, [X22]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {129}
	127 Call 0x1C17DFC
	128 Move X0, [X22]
	129 Move X8, [X0+184]
	130 Move W8, [X8+8]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {137}
	135 Call 0x1C17DFC
	136 Move X0, [X22]
	137 Move X8, [X0+184]
	138 Move X8, [X8]
	139 Compare X8, 0
	140 JumpIfEqual {190}
	141 Move W9, [X8+24]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Add X8, X8, W21
	144 Move W8, [X8+32]
	145 Compare W8, 0
	146 JumpIfEqual {191}
	147 Move X0, [X19+16]
	148 Compare X0, 0
	149 JumpIfEqual {190}
	150 Move W1, [X19+24]
	151 Subtract W20, W1, 1
	152 Move W8, [X0+16]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X2, X31
	155 Call String.get_Chars, X0, X1
	156 Move X8, [X22]
	157 Move W21, W0
	158 Move W9, [X8+224]
	159 Compare W9, 0
	160 JumpIfNotEqual {164}
	161 Move X0, X8
	162 Call 0x1C17DFC
	163 Move X8, [X22]
	164 Move X9, [X8+184]
	165 Move W9, [X9+8]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move W9, [X8+224]
	168 Compare W9, 0
	169 JumpIfNotEqual {173}
	170 Move X0, X8
	171 Call 0x1C17DFC
	172 Move X8, [X22]
	173 Move X8, [X8+184]
	174 Move X8, [X8]
	175 Compare X8, 0
	176 JumpIfEqual {190}
	177 Move W9, [X8+24]
	178 And W10, W21, 0xFFFF
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Add X8, X8, W21
	181 Move W8, [X8+32]
	182 Compare W8, 0
	183 JumpIfEqual {192}
	184 Move W8, [X19+24]
	185 Move X0, [X19+16]
	186 Add W1, W8, 1
	187 Move [X19+24], W1
	188 Compare X0, 0
	189 JumpIfNotEqual {152}
	190 Call 0x1C17F20
	191 Move W1, W31
	192 Move W1, 2
	193 Move W1, 6
	194 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x03605FD4 STP X20, X19, [X31 + 0x30]
	0x03605FD8 ADRP X24, 0xDDB000
	0x03605FDC ADRP X25, 0xB35000
	0x03605FE0 ADRP X22, 0xB35000
	0x03605FE4 ADRP X23, 0xB35000
	0x03605FE8 LDRB W8, [X24 + 0x3A2]
	0x03605FEC LDR X25, [X25 + 0xC20]
	0x03605FF0 LDR X22, [X22 + 0xC28]
	0x03605FF4 LDR X23, [X23 + 0xC30]
	0x03605FF8 MOV X19, X2
	0x03605FFC MOV W20, W1
	0x03606000 MOV X21, X0
	0x03606004 TBNZ X8, 0x0, 0x3606034
	0x03606008 ADRP X0, 0xB34000
	0x0360600C LDR X0, [X0 + 0xC30]
	0x03606010 BL 0x1C16CF4
	0x03606014 ADRP X0, 0xB34000
	0x03606018 LDR X0, [X0 + 0xC20]
	0x0360601C BL 0x1C16CF4
	0x03606020 ADRP X0, 0xB34000
	0x03606024 LDR X0, [X0 + 0xC28]
	0x03606028 BL 0x1C16CF4
	0x0360602C MOVZ W8, 0x1
	0x03606030 STRB W8, [X24 + 0x3A2]
	0x03606034 LDR X0, [X25]
	0x03606038 BL 0x1C16F10
	0x0360603C LDR X2, [X22]
	0x03606040 MOV X1, X31
	0x03606044 MOV X3, X31
	0x03606048 MOV X22, X0
	0x0360604C BL 0x2B47CB4
	0x03606050 LDR X4, [X23]
	0x03606054 MOV X0, X21
	0x03606058 MOV W1, W20
	0x0360605C MOV X2, X22
	0x03606060 MOV X3, X19
	0x03606064 LDP X20, X19, [X31 + 0x30]
	0x03606068 LDP X22, X21, [X31 + 0x20]
	0x0360606C LDP X24, X23, [X31 + 0x10]
	0x03606070 LDP X30, X25, [X31], #0x40
	0x03606074 B 0x21A2910
	0x03606078 STR X30, [X31 - 0x20]!
	0x0360607C STP X20, X19, [X31 + 0x10]
	0x03606080 ADRP X20, 0xDDA000
	0x03606084 LDRB W8, [X20 + 0x3A4]
	0x03606088 MOV X19, X0
	0x0360608C TBNZ X8, 0x0, 0x36060A4
	0x03606090 ADRP X0, 0xB1A000
	0x03606094 LDR X0, [X0 + 0xFB8]
	0x03606098 BL 0x1C16CF4
	0x0360609C MOVZ W8, 0x1
	0x036060A0 STRB W8, [X20 + 0x3A4]
	0x036060A4 LDR X0, [X19 + 0x10]
	0x036060A8 MOV X1, X31
	0x036060AC BL 0x32277A8
	0x036060B0 LDR X8, [X19 + 0x18]
	0x036060B4 TBZ X0, 0x0, 0x36060C8
	0x036060B8 LDP X20, X19, [X31 + 0x10]
	0x036060BC MOV X0, X8
	0x036060C0 LDR X30, [X31], #0x20
	0x036060C4 RET
	0x036060C8 ADRP X9, 0xB1A000
	0x036060CC LDR X9, [X9 + 0xFB8]
	0x036060D0 LDR X2, [X19 + 0x10]
	0x036060D4 LDP X20, X19, [X31 + 0x10]
	0x036060D8 MOV X0, X8
	0x036060DC LDR X1, [X9]
	0x036060E0 MOV X3, X31
	0x036060E4 LDR X30, [X31], #0x20
	0x036060E8 B 0x32274B8
	0x036060EC STP X30, X23, [X31 - 0x30]!
	0x036060F0 STP X22, X21, [X31 + 0x10]
	0x036060F4 STP X20, X19, [X31 + 0x20]
	0x036060F8 ADRP X22, 0xDDA000
	0x036060FC LDRB W8, [X22 + 0x3A5]
	0x03606100 MOV X19, X2
	0x03606104 MOV X21, X1
	0x03606108 MOV X20, X0
	0x0360610C TBNZ X8, 0x0, 0x3606130
	0x03606110 ADRP X0, 0xB34000
	0x03606114 LDR X0, [X0 + 0x628]
	0x03606118 BL 0x1C16CF4
	0x0360611C ADRP X0, 0xB15000
	0x03606120 LDR X0, [X0 + 0x8D0]
	0x03606124 BL 0x1C16CF4
	0x03606128 MOVZ W8, 0x1
	0x0360612C STRB W8, [X22 + 0x3A5]
	0x03606130 STR X31, [X21]
	0x03606134 CBZ X20, 0x3606270
	0x03606138 ADRP X23, 0xB15000
	0x0360613C LDR X23, [X23 + 0x8D0]
	0x03606140 MOV X0, X20
	0x03606144 MOV W1, W31
	0x03606148 BL 0x35FCF70
	0x0360614C STR X0, [X19]
	0x03606150 STR W1, [X19 + 0x8]
	0x03606154 MOV X22, X0
	0x03606158 LDR X0, [X23]
	0x0360615C LDR W8, [X0 + 0xE0]
	0x03606160 CBNZ W8, 0x3606168
	0x03606164 BL 0x1C16DFC
	0x03606168 CMP W22, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDDC000
	007 Move X22, 0xAF1000
	008 Move X19, 0xB36000
	009 Move X20, 0xB17000
	010 Move W8, [X21+912]
	011 Move X22, [X22+2488]
	012 Move X19, [X19+2976]
	013 Move X20, [X20+2248]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {47}
	018 Move X0, 0xAF0000
	019 Move X0, [X0+2488]
	020 Call 0x1C17CF4
	021 Move X0, 0xB16000
	022 Move X0, [X0+2248]
	023 Call 0x1C17CF4
	024 Move X0, 0xAEE000
	025 Move X0, [X0+2760]
	026 Call 0x1C17CF4
	027 Move X0, 0xB35000
	028 Move X0, [X0+2976]
	029 Call 0x1C17CF4
	030 Move X0, 0xB35000
	031 Move X0, [X0+2984]
	032 Call 0x1C17CF4
	033 Move X0, 0xB35000
	034 Move X0, [X0+2992]
	035 Call 0x1C17CF4
	036 Move X0, 0xB35000
	037 Move X0, [X0+3000]
	038 Call 0x1C17CF4
	039 Move X0, 0xB1B000
	040 Move X0, [X0+936]
	041 Call 0x1C17CF4
	042 Move X0, 0xB35000
	043 Move X0, [X0+3008]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+912], W8
	047 Move X0, [X22]
	048 Move W1, 127
	049 Call 0x1C17D6C
	050 Move X1, [X19]
	051 Move X2, X31
	052 Move X19, X0
	053 Call RuntimeHelpers.InitializeArray, X0, X1
	054 Move X8, [X20]
	055 Move X8, [X8+184]
	056 Move [X8], X19
	057 Move X8, [X20]
	058 Move X8, [X8+184]
	059 Move X9, [X8]
	060 Compare X9, 0
	061 JumpIfEqual {108}
	062 Move X9, [X9+24]
	063 Move X10, 0xAEE000
	064 Move X10, [X10+2760]
	065 Move W1, 5
	066 Move [X8+8], W9
	067 Move X0, [X10]
	068 Call 0x1C17D6C
	069 Compare X0, 0
	070 JumpIfEqual {108}
	071 Move W8, [X0+24]
	072 Compare W8, 0
	073 JumpIfEqual {107}
	074 Move X9, 0xB1B000
	075 Move X9, [X9+936]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X9, [X9]
	078 Move [X0+32], X9
	079 Move X9, 0xB35000
	080 Move X9, [X9+3000]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X9, [X9]
	083 Move [X0+40], X9
	084 Move X9, 0xB35000
	085 Move X9, [X9+2992]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X9, [X9]
	088 Move [X0+48], X9
	089 Move X9, 0xB35000
	090 Move X9, [X9+3008]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X9, [X9]
	093 Move [X0+56], X9
	094 Move X8, 0xB35000
	095 Move X8, [X8+2984]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X8, [X8]
	099 Move [X0+64], X8
	100 Move X8, [X20]
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X8, [X8+184]
	104 Move [X8+16], X0
	105 Move X30, [X31+48]
	106 Return 
	107 Call 0x1C17F28
	108 Call 0x1C17F20

