Type: System.Net.Http.Headers.StringWithQualityHeaderValue

Method: System.Void .ctor()

Disassembly:
	0x0360A878 BL 0x32277A8
	0x0360A87C TBNZ X0, 0x0, 0x360A8A4

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Nullable`1<System.Double> get_Quality()

Disassembly:
	0x0360A880 LDR X0, [X19 + 0x18]
	0x0360A884 CBZ X0, 0x360A8DC
	0x0360A888 MOV X1, X31

ISIL:
	001 Move X8, [X0+16]
	002 Move X1, [X0+24]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_Quality(System.Nullable`1<System.Double> value)

Disassembly:
	0x0360A88C BL 0x322B6E4
	0x0360A890 CBZ X0, 0x360A8DC

ISIL:
	001 Move [X0+16], X1
	002 Move [X0+24], X2
	003 Return 

Method: System.String get_Value()

Disassembly:
	0x0360A894 LDR X8, [X0]
	0x0360A898 LDP X9, X1, [X8 + 0x158]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x0360A89C BLR X9
	0x0360A8A0 EOR W20, W0, W20, 0x0

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x0360A8A4 LDR X0, [X19 + 0x10]
	0x0360A8A8 MOV X1, X31

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0360A8AC BL 0x32277A8
	0x0360A8B0 TBNZ X0, 0x0, 0x360A8CC
	0x0360A8B4 LDR X0, [X19 + 0x10]
	0x0360A8B8 CBZ X0, 0x360A8DC
	0x0360A8BC LDR X8, [X0]
	0x0360A8C0 LDP X9, X1, [X8 + 0x158]
	0x0360A8C4 BLR X9
	0x0360A8C8 EOR W20, W0, W20, 0x0
	0x0360A8CC MOV W0, W20
	0x0360A8D0 LDP X20, X19, [X31 + 0x10]
	0x0360A8D4 LDR X30, [X31], #0x20
	0x0360A8D8 RET
	0x0360A8DC BL 0x1C16F20
	0x0360A8E0 STP X30, X25, [X31 - 0x40]!
	0x0360A8E4 STP X24, X23, [X31 + 0x10]
	0x0360A8E8 STP X22, X21, [X31 + 0x20]
	0x0360A8EC STP X20, X19, [X31 + 0x30]
	0x0360A8F0 ADRP X24, 0xDD6000
	0x0360A8F4 ADRP X25, 0xB30000
	0x0360A8F8 ADRP X22, 0xB30000
	0x0360A8FC ADRP X23, 0xB30000
	0x0360A900 LDRB W8, [X24 + 0x3EC]
	0x0360A904 LDR X25, [X25 + 0xE30]
	0x0360A908 LDR X22, [X22 + 0xE38]
	0x0360A90C LDR X23, [X23 + 0xE40]
	0x0360A910 MOV X19, X2
	0x0360A914 MOV W20, W1
	0x0360A918 MOV X21, X0
	0x0360A91C TBNZ X8, 0x0, 0x360A94C
	0x0360A920 ADRP X0, 0xB30000
	0x0360A924 LDR X0, [X0 + 0xE40]
	0x0360A928 BL 0x1C16CF4
	0x0360A92C ADRP X0, 0xB30000
	0x0360A930 LDR X0, [X0 + 0xE30]
	0x0360A934 BL 0x1C16CF4
	0x0360A938 ADRP X0, 0xB30000
	0x0360A93C LDR X0, [X0 + 0xE38]
	0x0360A940 BL 0x1C16CF4
	0x0360A944 MOVZ W8, 0x1
	0x0360A948 STRB W8, [X24 + 0x3EC]
	0x0360A94C LDR X0, [X25]
	0x0360A950 BL 0x1C16F10
	0x0360A954 LDR X2, [X22]
	0x0360A958 MOV X1, X31
	0x0360A95C MOV X3, X31
	0x0360A960 MOV X22, X0
	0x0360A964 BL 0x2B47CB4
	0x0360A968 LDR X4, [X23]
	0x0360A96C MOV X0, X21
	0x0360A970 MOV W1, W20
	0x0360A974 MOV X2, X22
	0x0360A978 MOV X3, X19
	0x0360A97C LDP X20, X19, [X31 + 0x30]
	0x0360A980 LDP X22, X21, [X31 + 0x20]
	0x0360A984 LDP X24, X23, [X31 + 0x10]
	0x0360A988 LDP X30, X25, [X31], #0x40
	0x0360A98C B 0x21A2910
	0x0360A990 STR X30, [X31 - 0x50]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD7000
	006 Move W8, [X21+988]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xAF5000
	014 Move X0, [X0+1992]
	015 Call 0x1C17CF4
	016 Move X0, 0xAF5000
	017 Move X0, [X0+2008]
	018 Call 0x1C17CF4
	019 Move X0, 0xB31000
	020 Move X0, [X0+3496]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+988], W8
	024 Compare X20, 0
	025 JumpIfEqual {61}
	026 Move X8, 0xB31000
	027 Move X8, [X8+3496]
	028 Move X9, [X20]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Compare X20, 0
	039 JumpIfEqual {67}
	040 Move X0, [X20+32]
	041 Move X1, [X19+32]
	042 Move W2, 5
	043 Move X3, X31
	044 Call String.Equals, X0, X1, X2
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {61}
	049 Move W8, [X20+16]
	050 Move W9, [X19+16]
	051 Move V0, [X20+24]
	052 Move V1, [X19+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CSET not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSET not yet implemented."
	057 NotImplemented "Instruction FCMP not yet implemented."
	058 NotImplemented "Instruction CSET not yet implemented."
	059 Xor W8, W8, W9
	060 And W0, W10, W8
	061 Move W0, W31
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0360A994 STP X26, X25, [X31 + 0x10]
	0x0360A998 STP X24, X23, [X31 + 0x20]
	0x0360A99C STP X22, X21, [X31 + 0x30]
	0x0360A9A0 STP X20, X19, [X31 + 0x40]
	0x0360A9A4 ADRP X22, 0xDD6000
	0x0360A9A8 LDRB W8, [X22 + 0x3ED]
	0x0360A9AC MOV X20, X2
	0x0360A9B0 MOV X19, X1
	0x0360A9B4 MOV X21, X0
	0x0360A9B8 TBNZ X8, 0x0, 0x360A9DC
	0x0360A9BC ADRP X0, 0xB11000
	0x0360A9C0 LDR X0, [X0 + 0x8D0]
	0x0360A9C4 BL 0x1C16CF4
	0x0360A9C8 ADRP X0, 0xB30000
	0x0360A9CC LDR X0, [X0 + 0xE28]
	0x0360A9D0 BL 0x1C16CF4
	0x0360A9D4 MOVZ W8, 0x1
	0x0360A9D8 STRB W8, [X22 + 0x3ED]
	0x0360A9DC STR X31, [X31 + 0x8]
	0x0360A9E0 STR X31, [X19]
	0x0360A9E4 CBZ X21, 0x360ABE8
	0x0360A9E8 ADRP X26, 0xB11000
	0x0360A9EC LDR X26, [X26 + 0x8D0]
	0x0360A9F0 MOV X0, X21
	0x0360A9F4 MOV W1, W31
	0x0360A9F8 BL 0x35FCF70
	0x0360A9FC STR X0, [X20]
	0x0360AA00 STR W1, [X20 + 0x8]
	0x0360AA04 MOV X22, X0
	0x0360AA08 LDR X0, [X26]
	0x0360AA0C LDR W8, [X0 + 0xE0]
	0x0360AA10 CBNZ W8, 0x360AA18
	0x0360AA14 BL 0x1C16DFC
	0x0360AA18 CMP W22, 0x2
	0x0360AA1C B.NE 0x360AB68

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xDD7000
	007 Move W8, [X20+989]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB31000
	014 Move X0, [X0+3504]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+989], W8
	018 Move [X31], X31
	019 Move [X31+8], X31
	020 Move X0, [X19+32]
	021 Compare X0, 0
	022 JumpIfEqual {46}
	023 Move X1, X31
	024 Call String.ToLowerInvariant, X0
	025 Compare X0, 0
	026 JumpIfEqual {46}
	027 Move X8, [X0]
	028 Move X21, 0xB31000
	029 Move X9, [X8+344]
	030 Move X1, [X8+352]
	031 Move X21, [X21+3504]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move V0, [X19+1]
	034 Move X1, [X21]
	035 Move W20, W0
	036 Add X0, X31, 0
	037 Move [X31], V0
	038 Call Nullable`1<Double>.GetHashCode, X0
	039 Xor W0, W0, W20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Move X21, [X31+24]
	044 Add X31, X31, 48
	045 Return X0
	046 Call 0x1C17F20

Method: System.Boolean TryParse(System.String input, System.Int32 minimalCount, out System.Collections.Generic.List`1<System.Net.Http.Headers.StringWithQualityHeaderValue> result)

Disassembly:
	0x0360AA20 MOV X0, X21
	0x0360AA24 MOV W1, W31
	0x0360AA28 BL 0x35FCF70
	0x0360AA2C ADRP X8, 0xB30000
	0x0360AA30 LDR X8, [X8 + 0xE28]
	0x0360AA34 MOV X23, X0
	0x0360AA38 MOV X24, X1
	0x0360AA3C LDR X0, [X8]
	0x0360AA40 BL 0x1C16F10
	0x0360AA44 MOV X1, X31
	0x0360AA48 MOV X22, X0
	0x0360AA4C BL 0x33BDD8C
	0x0360AA50 LDR X0, [X26]
	0x0360AA54 LDR W8, [X0 + 0xE0]
	0x0360AA58 CBNZ W8, 0x360AA60
	0x0360AA5C BL 0x1C16DFC
	0x0360AA60 CMP W23, 0x6
	0x0360AA64 B.NE 0x360AADC
	0x0360AA68 MOV X0, X21
	0x0360AA6C MOV W1, W31
	0x0360AA70 BL 0x35FCF70
	0x0360AA74 MOV X23, X0
	0x0360AA78 LDR X0, [X26]
	0x0360AA7C MOV X24, X1
	0x0360AA80 LDR W8, [X0 + 0xE0]
	0x0360AA84 CBNZ W8, 0x360AA8C
	0x0360AA88 BL 0x1C16DFC
	0x0360AA8C CMP W23, 0x2
	0x0360AA90 B.NE 0x360AB68
	0x0360AA94 LDR X1, [X20]
	0x0360AA98 LDR W2, [X20 + 0x8]
	0x0360AA9C MOV X0, X21
	0x0360AAA0 BL 0x35FD280
	0x0360AAA4 CBZ X22, 0x360ABE8
	0x0360AAA8 AND X2, X24, 0x0
	0x0360AAAC STR X0, [X22 + 0x18]
	0x0360AAB0 MOV X0, X21
	0x0360AAB4 MOV X1, X23
	0x0360AAB8 BL 0x35FD280
	0x0360AABC STR X0, [X22 + 0x20]
	0x0360AAC0 MOV X0, X21
	0x0360AAC4 MOV W1, W31
	0x0360AAC8 BL 0x35FCF70
	0x0360AACC MOV X25, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xDD7000
	010 Move X25, 0xB31000
	011 Move X22, 0xB31000
	012 Move X23, 0xB31000
	013 Move W8, [X24+990]
	014 Move X25, [X25+3512]
	015 Move X22, [X22+3520]
	016 Move X23, [X23+3528]
	017 Move X19, X2
	018 Move W20, W1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xB31000
	025 Move X0, [X0+3528]
	026 Call 0x1C17CF4
	027 Move X0, 0xB31000
	028 Move X0, [X0+3512]
	029 Call 0x1C17CF4
	030 Move X0, 0xB31000
	031 Move X0, [X0+3520]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X24+990], W8
	035 Move X0, [X25]
	036 Call 0x1C17F10
	037 Move X2, [X22]
	038 Move X1, X31
	039 Move X3, X31
	040 Move X22, X0
	041 Call 0x2B48CB4, X0, X1, X2
	042 Move X4, [X23]
	043 Move X0, X21
	044 Move W1, W20
	045 Move X2, X22
	046 Move X3, X19
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X30, [X31+64]
	054 Move X25, [X31+72]
	055 Call 0x21A3910, X0, X1, X2, X3
	056 Return X0

Method: System.Boolean TryParseElement(System.Net.Http.Headers.Lexer lexer, out System.Net.Http.Headers.StringWithQualityHeaderValue parsedValue, out System.Net.Http.Headers.Token t)

Disassembly:
	0x0360AAD0 MOV X24, X1
	0x0360AAD4 MOV X23, X0
	0x0360AAD8 B 0x360AAF8
	0x0360AADC LDR X1, [X20]
	0x0360AAE0 LDR W2, [X20 + 0x8]
	0x0360AAE4 MOV X0, X21
	0x0360AAE8 BL 0x35FD280
	0x0360AAEC CBZ X22, 0x360ABE8
	0x0360AAF0 MOV X25, X23
	0x0360AAF4 STR X0, [X22 + 0x20]
	0x0360AAF8 LDR X0, [X26]
	0x0360AAFC LDR W8, [X0 + 0xE0]
	0x0360AB00 CBNZ W8, 0x360AB08
	0x0360AB04 BL 0x1C16DFC
	0x0360AB08 CMP W25, 0x2
	0x0360AB0C B.NE 0x360AB68
	0x0360AB10 MOV X0, X21
	0x0360AB14 BL 0x3600E24
	0x0360AB18 CMP W0, 0x3A
	0x0360AB1C B.NE 0x360AB84
	0x0360AB20 LDR W8, [X21 + 0x18]
	0x0360AB24 MOV X0, X21
	0x0360AB28 MOV W1, W31
	0x0360AB2C ADD W8, W8, 0x1
	0x0360AB30 STR W8, [X21 + 0x18]
	0x0360AB34 BL 0x35FCF70
	0x0360AB38 STR X0, [X20]
	0x0360AB3C STR W1, [X20 + 0x8]
	0x0360AB40 MOV X25, X0
	0x0360AB44 LDR X0, [X26]
	0x0360AB48 LDR W8, [X0 + 0xE0]
	0x0360AB4C CBNZ W8, 0x360AB54
	0x0360AB50 BL 0x1C16DFC
	0x0360AB54 CMP W25, 0x2
	0x0360AB58 B.NE 0x360AB68
	0x0360AB5C LDR X25, [X20]
	0x0360AB60 LDR W8, [X20 + 0x8]
	0x0360AB64 B 0x360AB90
	0x0360AB68 MOV W0, W31
	0x0360AB6C LDP X20, X19, [X31 + 0x40]
	0x0360AB70 LDP X22, X21, [X31 + 0x30]
	0x0360AB74 LDP X24, X23, [X31 + 0x20]
	0x0360AB78 LDP X26, X25, [X31 + 0x10]
	0x0360AB7C LDR X30, [X31], #0x50
	0x0360AB80 RET
	0x0360AB84 MOV W8, W24
	0x0360AB88 STR X25, [X20]
	0x0360AB8C STR W24, [X20 + 0x8]
	0x0360AB90 AND X2, X24, 0x0
	0x0360AB94 MOV W4, W8
	0x0360AB98 MOV X0, X21
	0x0360AB9C MOV X1, X23
	0x0360ABA0 MOV X3, X25
	0x0360ABA4 BL 0x3604984
	0x0360ABA8 STR X0, [X22 + 0x28]
	0x0360ABAC ADD X1, X31, 0x8
	0x0360ABB0 MOV X0, X21
	0x0360ABB4 MOV X2, X20
	0x0360ABB8 BL 0x3604E74
	0x0360ABBC TBZ X0, 0x0, 0x360ABD4
	0x0360ABC0 MOV X0, X21
	0x0360ABC4 MOV W1, W31
	0x0360ABC8 BL 0x35FCF70
	0x0360ABCC STR X0, [X20]
	0x0360ABD0 STR W1, [X20 + 0x8]
	0x0360ABD4 LDR X8, [X31 + 0x8]
	0x0360ABD8 MOVZ W0, 0x1
	0x0360ABDC STR X8, [X22 + 0x10]
	0x0360ABE0 STR X22, [X19]
	0x0360ABE4 B 0x360AB6C
	0x0360ABE8 BL 0x1C16F20
	0x0360ABEC STR X30, [X31 - 0x20]!
	0x0360ABF0 STP X20, X19, [X31 + 0x10]
	0x0360ABF4 ADRP X20, 0xDD6000
	0x0360ABF8 LDRB W8, [X20 + 0x3EE]
	0x0360ABFC MOV X19, X0
	0x0360AC00 TBNZ X8, 0x0, 0x360AC30
	0x0360AC04 ADRP X0, 0xAE9000
	0x0360AC08 LDR X0, [X0 + 0xAC8]
	0x0360AC0C BL 0x1C16CF4
	0x0360AC10 ADRP X0, 0xAE9000
	0x0360AC14 LDR X0, [X0 + 0xDD8]
	0x0360AC18 BL 0x1C16CF4
	0x0360AC1C ADRP X0, 0xAEA000
	0x0360AC20 LDR X0, [X0 + 0xEC8]
	0x0360AC24 BL 0x1C16CF4
	0x0360AC28 MOVZ W8, 0x1
	0x0360AC2C STRB W8, [X20 + 0x3EE]
	0x0360AC30 ADRP X20, 0xAE9000
	0x0360AC34 LDR X8, [X19 + 0x18]
	0x0360AC38 LDR X20, [X20 + 0xDD8]
	0x0360AC3C CBZ X8, 0x360ACBC
	0x0360AC40 ADRP X8, 0xAE9000
	0x0360AC44 LDR X8, [X8 + 0xAC8]
	0x0360AC48 MOVZ W1, 0x5
	0x0360AC4C LDR X0, [X8]
	0x0360AC50 BL 0x1C16D6C
	0x0360AC54 CBZ X0, 0x360ACF8
	0x0360AC58 LDR W8, [X0 + 0x18]
	0x0360AC5C CBZ W8, 0x360ACF4
	0x0360AC60 LDR X9, [X19 + 0x18]
	0x0360AC64 CMP W8, 0x1
	0x0360AC68 STR X9, [X0 + 0x20]
	0x0360AC6C B.EQ 0x360ACF4
	0x0360AC70 ADRP X9, 0xAEA000
	0x0360AC74 LDR X9, [X9 + 0xEC8]
	0x0360AC78 CMP W8, 0x2
	0x0360AC7C LDR X9, [X9]
	0x0360AC80 STR X9, [X0 + 0x28]
	0x0360AC84 B.LS 0x360ACF4
	0x0360AC88 LDR X9, [X19 + 0x20]
	0x0360AC8C CMP W8, 0x3
	0x0360AC90 STR X9, [X0 + 0x30]
	0x0360AC94 B.EQ 0x360ACF4
	0x0360AC98 LDR X9, [X20]
	0x0360AC9C CMP W8, 0x4
	0x0360ACA0 STR X9, [X0 + 0x38]
	0x0360ACA4 B.LS 0x360ACF4
	0x0360ACA8 LDR X8, [X19 + 0x28]
	0x0360ACAC MOV X1, X31
	0x0360ACB0 STR X8, [X0 + 0x40]
	0x0360ACB4 BL 0x32278CC
	0x0360ACB8 B 0x360ACCC
	0x0360ACBC LDP X0, X2, [X19 + 0x20]
	0x0360ACC0 LDR X1, [X20]
	0x0360ACC4 MOV X3, X31
	0x0360ACC8 BL 0x32274B8
	0x0360ACCC LDR X2, [X19 + 0x10]
	0x0360ACD0 CBZ X2, 0x360ACE8
	0x0360ACD4 LDR X1, [X20]
	0x0360ACD8 LDP X20, X19, [X31 + 0x10]
	0x0360ACDC MOV X3, X31
	0x0360ACE0 LDR X30, [X31], #0x20
	0x0360ACE4 B 0x32274B8
	0x0360ACE8 LDP X20, X19, [X31 + 0x10]
	0x0360ACEC LDR X30, [X31], #0x20
	0x0360ACF0 RET
	0x0360ACF4 BL 0x1C16F28
	0x0360ACF8 BL 0x1C16F20
	0x0360ACFC MOV X1, X31
	0x0360AD00 B 0x33BDD8C
	0x0360AD04 LDR X0, [X0 + 0x10]
	0x0360AD08 RET
	0x0360AD0C STR X1, [X0 + 0x10]
	0x0360AD10 RET
	0x0360AD14 LDR W0, [X0 + 0x18]
	0x0360AD18 RET
	0x0360AD1C STR W1, [X0 + 0x18]
	0x0360AD20 RET
	0x0360AD24 LDR X9, [X0 + 0x30]
	0x0360AD28 LDR V0, [X0 + 0x2]
	0x0360AD2C STR X9, [X8 + 0x10]
	0x0360AD30 STR V0, [X8]
	0x0360AD34 RET

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X22, 0xDD7000
	010 Move W8, [X22+991]
	011 Move X20, X2
	012 Move X19, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xAF5000
	019 Move X0, [X0+2000]
	020 Call 0x1C17CF4
	021 Move X0, 0xB31000
	022 Move X0, [X0+3496]
	023 Call 0x1C17CF4
	024 Move X0, 0xB12000
	025 Move X0, [X0+2256]
	026 Call 0x1C17CF4
	027 Move X0, 0xB31000
	028 Move X0, [X0+3536]
	029 Call 0x1C17CF4
	030 Move X0, 0xB19000
	031 Move X0, [X0+3992]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+991], W8
	035 Move [X31+24], X31
	036 Move [X19], X31
	037 Compare X21, 0
	038 JumpIfEqual {173}
	039 Move X24, 0xB12000
	040 Move X24, [X24+2256]
	041 Move X0, X21
	042 Move W1, W31
	043 Call Lexer.Scan, X0, X1
	044 Move [X20], X0
	045 Move [X20+8], W1
	046 Move X22, X0
	047 Move X0, [X24]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, 0xB31000
	054 Move X8, [X8+3496]
	055 Move X0, [X8]
	056 Call 0x1C17F10
	057 Move X1, X31
	058 Move X22, X0
	059 Call Object..ctor, X0
	060 Move X1, [X20]
	061 Move W2, [X20+8]
	062 Move X0, X21
	063 Call Lexer.GetStringValue, X0, X1
	064 Compare X22, 0
	065 JumpIfEqual {173}
	066 Move [X22+32], X0
	067 Move X0, X21
	068 Move W1, W31
	069 Call Lexer.Scan, X0, X1
	070 Move [X20], X0
	071 Move [X20+8], W1
	072 Move X23, X0
	073 Move X0, [X24]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, X21
	080 Move W1, W31
	081 Call Lexer.Scan, X0, X1
	082 Move [X20], X0
	083 Move [X20+8], W1
	084 Move X23, X0
	085 Move X0, [X24]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X1, [X20]
	092 Move W2, [X20+8]
	093 Move X0, X21
	094 Call Lexer.GetStringValue, X0, X1
	095 Move X8, 0xB31000
	096 Move X8, [X8+3536]
	097 Move X2, X31
	098 Move X23, X0
	099 Move X1, [X8]
	100 Call String.op_Inequality, X0, X1
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {115}
	105 Move X8, 0xB19000
	106 Move X8, [X8+3992]
	107 Move X0, X23
	108 Move X2, X31
	109 Move X1, [X8]
	110 Call String.op_Inequality, X0, X1
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfEqual {163}
	115 Move X0, X21
	116 Move W1, W31
	117 Call Lexer.Scan, X0, X1
	118 Move [X20], X0
	119 Move [X20+8], W1
	120 Move X23, X0
	121 Move X0, [X24]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X0, X21
	128 Move W1, W31
	129 Call Lexer.Scan, X0, X1
	130 Move X8, X0
	131 Move [X20], X0
	132 Move [X20+8], W1
	133 And X2, X1, 0
	134 Add X3, X31, 24
	135 Move X0, X21
	136 Move X1, X8
	137 Call Lexer.TryGetDoubleValue, X0, X1, X2
	138 Move W8, W0
	139 Move W0, W31
	140 Move TEMP, X8
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {164}
	144 Move V0, [X31+24]
	145 Move D1, 1
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Move X8, 0xAF5000
	148 Move X8, [X8+2000]
	149 Add X0, X31, 0
	150 Move [X31], X31
	151 Move [X31+8], X31
	152 Move X1, [X8]
	153 Call Nullable`1<Double>..ctor, X0, V0
	154 Move V0, [X31]
	155 Move X0, X21
	156 Move W1, W31
	157 Move [X22+1], V0
	158 Call Lexer.Scan, X0, X1
	159 Move [X20], X0
	160 Move [X20+8], W1
	161 Move W0, 1
	162 Move [X19], X22
	163 Move W0, W31
	164 Move X20, [X31+64]
	165 Move X19, [X31+72]
	166 Move X22, [X31+48]
	167 Move X21, [X31+56]
	168 Move X24, [X31+32]
	169 Move X23, [X31+40]
	170 Move X30, [X31+16]
	171 Add X31, X31, 80
	172 Return X0
	173 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x0360AD38 LDR X8, [X1 + 0x10]
	0x0360AD3C LDR V0, [X1]
	0x0360AD40 STR X8, [X0 + 0x30]
	0x0360AD44 STR V0, [X0 + 0x2]
	0x0360AD48 RET
	0x0360AD4C LDR X0, [X0 + 0x38]
	0x0360AD50 RET
	0x0360AD54 STR X1, [X0 + 0x38]
	0x0360AD58 RET
	0x0360AD5C CMP W0, 0x3E8
	0x0360AD60 CSET W0, CC
	0x0360AD64 RET
	0x0360AD68 MOV X1, X31
	0x0360AD6C B 0x33C5A24
	0x0360AD70 STR X30, [X31 - 0x30]!
	0x0360AD74 STP X22, X21, [X31 + 0x10]
	0x0360AD78 STP X20, X19, [X31 + 0x20]
	0x0360AD7C ADRP X21, 0xDD6000
	0x0360AD80 LDRB W8, [X21 + 0x3EF]
	0x0360AD84 MOV X20, X1
	0x0360AD88 MOV X19, X0
	0x0360AD8C TBNZ X8, 0x0, 0x360ADC8
	0x0360AD90 ADRP X0, 0xAEB000
	0x0360AD94 LDR X0, [X0 + 0xA58]
	0x0360AD98 BL 0x1C16CF4
	0x0360AD9C ADRP X0, 0xB30000
	0x0360ADA0 LDR X0, [X0 + 0xD08]
	0x0360ADA4 BL 0x1C16CF4
	0x0360ADA8 ADRP X0, 0xB30000
	0x0360ADAC LDR X0, [X0 + 0xD10]
	0x0360ADB0 BL 0x1C16CF4
	0x0360ADB4 ADRP X0, 0xB30000
	0x0360ADB8 LDR X0, [X0 + 0xE48]
	0x0360ADBC BL 0x1C16CF4
	0x0360ADC0 MOVZ W8, 0x1
	0x0360ADC4 STRB W8, [X21 + 0x3EF]
	0x0360ADC8 CBZ X20, 0x360AEB0
	0x0360ADCC ADRP X8, 0xB30000
	0x0360ADD0 LDR X8, [X8 + 0xE48]
	0x0360ADD4 LDR X9, [X20]
	0x0360ADD8 LDR X8, [X8]
	0x0360ADDC LDRB W11, [X9 + 0x130]
	0x0360ADE0 LDRB W10, [X8 + 0x130]
	0x0360ADE4 CMP W11, W10
	0x0360ADE8 B.CC 0x360AEB0
	0x0360ADEC LDR X9, [X9 + 0xC8]
	0x0360ADF0 ADD X9, X9, X10, 0x3, LSL
	0x0360ADF4 LDUR X9, [X9 - 0x8]
	0x0360ADF8 CMP X9, X8
	0x0360ADFC CSEL X21, X20, X31, EQ
	0x0360AE00 B.NE 0x360AEB0
	0x0360AE04 CBZ X21, 0x360AEC4
	0x0360AE08 LDR W8, [X19 + 0x18]
	0x0360AE0C LDR W9, [X21 + 0x18]
	0x0360AE10 CMP W8, W9
	0x0360AE14 B.NE 0x360AEB0
	0x0360AE18 LDR X0, [X21 + 0x10]
	0x0360AE1C LDR X1, [X19 + 0x10]
	0x0360AE20 MOVZ W2, 0x5
	0x0360AE24 MOV X3, X31
	0x0360AE28 BL 0x3226C60
	0x0360AE2C TBZ X0, 0x0, 0x360AEB0
	0x0360AE30 LDR X0, [X19 + 0x38]
	0x0360AE34 LDR X1, [X21 + 0x38]
	0x0360AE38 MOV X2, X31
	0x0360AE3C BL 0x321BA08
	0x0360AE40 TBZ X0, 0x0, 0x360AEB0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X19, 0xDD7000
	008 Move W8, [X19+992]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0xAEC000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move X0, 0xAF5000
	018 Move X0, [X0+2008]
	019 Call 0x1C17CF4
	020 Move X0, 0xAF6000
	021 Move X0, [X0+3672]
	022 Call 0x1C17CF4
	023 Move X0, 0xB31000
	024 Move X0, [X0+3544]
	025 Call 0x1C17CF4
	026 Move X0, 0xB31000
	027 Move X0, [X0+3552]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+992], W8
	031 Move [X31+24], X31
	032 Move X8, [X20+16]
	033 Move X19, [X20+32]
	034 And W31, W8, 255
	035 Move X9, 0xAF6000
	036 Move X9, [X9+3672]
	037 Move X22, 0xAEC000
	038 Move X21, 0xB31000
	039 Move X22, [X22+3144]
	040 Move X21, [X21+3552]
	041 Move X10, [X20+24]
	042 Move X1, [X9]
	043 Move X20, 0xB31000
	044 Move X20, [X20+3544]
	045 Add X0, X31, 0
	046 Move [X31], X8
	047 Move [X31+8], X10
	048 Call Nullable`1<Double>.get_Value, X0
	049 Move X0, [X22]
	050 Move [X31+24], D0
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X31
	056 Call CultureInfo.get_InvariantCulture
	057 Move X1, [X21]
	058 Move X2, X0
	059 Add X0, X31, 24
	060 Move X3, X31
	061 Call Double.ToString, X0, X1, X2
	062 Move X1, [X20]
	063 Move X2, X0
	064 Move X0, X19
	065 Move X3, X31
	066 Call String.Concat, X0, X1, X2
	067 Move X19, X0
	068 Move X0, X19
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X30, [X31+16]
	074 Add X31, X31, 64
	075 Return X0

