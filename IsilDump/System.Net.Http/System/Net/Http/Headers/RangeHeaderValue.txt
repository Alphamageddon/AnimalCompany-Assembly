Type: System.Net.Http.Headers.RangeHeaderValue

Method: System.Void .ctor()

Disassembly:
	0x036091A0 STR X1, [X31 + 0x18]
	0x036091A4 ADRP X20, 0xAEC000
	0x036091A8 LDRB W8, [X21 + 0x3D7]
	0x036091AC LDR X20, [X20 + 0x570]
	0x036091B0 MOV X19, X0
	0x036091B4 TBNZ X8, 0x0, 0x36091D8
	0x036091B8 ADRP X0, 0xB1E000
	0x036091BC LDR X0, [X0 + 0xB98]
	0x036091C0 BL 0x1C16CF4
	0x036091C4 ADRP X0, 0xAEC000
	0x036091C8 LDR X0, [X0 + 0x570]
	0x036091CC BL 0x1C16CF4
	0x036091D0 MOVZ W8, 0x1
	0x036091D4 STRB W8, [X21 + 0x3D7]
	0x036091D8 MOV X0, X19
	0x036091DC MOV X1, X31
	0x036091E0 BL 0x33BDD8C
	0x036091E4 LDR X0, [X20]
	0x036091E8 LDR W8, [X0 + 0xE0]
	0x036091EC CBNZ W8, 0x36091F4
	0x036091F0 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD8000
	006 Move X20, 0xB1A000
	007 Move W8, [X21+970]
	008 Move X20, [X20+776]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB1A000
	015 Move X0, [X0+776]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+970], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move [X19+24], X8
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return 

Method: System.Void .ctor(System.Net.Http.Headers.RangeHeaderValue source)

Disassembly:
	0x036091F4 ADD X0, X31, 0x18
	0x036091F8 MOV X1, X31
	0x036091FC BL 0x3394234
	0x03609200 ADRP X8, 0xFFFFFFFFFD4E4000
	0x03609204 LDR V1, [X8 + 0x718]
	0x03609208 FCMP D0, D1
	0x0360920C B.GT 0x3609244
	0x03609210 ADRP X8, 0xB1E000
	0x03609214 LDR X8, [X8 + 0xB98]
	0x03609218 LDR X1, [X31 + 0x18]
	0x0360921C ADD X0, X31, 0x0
	0x03609220 STP X31, X31, [X31]
	0x03609224 LDR X2, [X8]
	0x03609228 BL 0x243B364
	0x0360922C LDR V0, [X31]
	0x03609230 LDP X30, X21, [X31 + 0x20]
	0x03609234 STUR V0, [X19 + 0x28]
	0x03609238 LDP X20, X19, [X31 + 0x30]
	0x0360923C ADD X31, X31, 0x40
	0x03609240 RET
	0x03609244 ADRP X0, 0xAF2000
	0x03609248 LDR X0, [X0 + 0x760]
	0x0360924C BL 0x1C16D08
	0x03609250 BL 0x1C16F10
	0x03609254 MOV X19, X0
	0x03609258 ADRP X0, 0xB12000
	0x0360925C LDR X0, [X0 + 0xF68]
	0x03609260 BL 0x1C16D08
	0x03609264 MOV X1, X0
	0x03609268 MOV X0, X19
	0x0360926C MOV X2, X31
	0x03609270 BL 0x3316014
	0x03609274 ADRP X0, 0xB31000
	0x03609278 LDR X0, [X0 + 0xD98]
	0x0360927C BL 0x1C16D08
	0x03609280 MOV X1, X0
	0x03609284 MOV X0, X19
	0x03609288 BL 0x1C16DEC
	0x0360928C LDR X9, [X0 + 0x20]
	0x03609290 LDR V0, [X0 + 0x1]
	0x03609294 STR X9, [X8 + 0x10]
	0x03609298 STR V0, [X8]
	0x0360929C RET
	0x036092A0 LDR X8, [X1 + 0x10]
	0x036092A4 LDR V0, [X1]
	0x036092A8 STR X8, [X0 + 0x20]
	0x036092AC STR V0, [X0 + 0x1]
	0x036092B0 RET
	0x036092B4 LDP X8, X1, [X0 + 0x28]
	0x036092B8 MOV X0, X8
	0x036092BC RET
	0x036092C0 STP X1, X2, [X0 + 0x28]
	0x036092C4 RET
	0x036092C8 MOV X1, X31
	0x036092CC B 0x33C5A24
	0x036092D0 STR X30, [X31 - 0x40]!
	0x036092D4 STP X24, X23, [X31 + 0x10]
	0x036092D8 STP X22, X21, [X31 + 0x20]
	0x036092DC STP X20, X19, [X31 + 0x30]
	0x036092E0 ADRP X21, 0xDD7000
	0x036092E4 LDRB W8, [X21 + 0x3D8]
	0x036092E8 MOV X20, X1
	0x036092EC MOV X19, X0
	0x036092F0 TBNZ X8, 0x0, 0x3609350
	0x036092F4 ADRP X0, 0xAEC000
	0x036092F8 LDR X0, [X0 + 0xA58]
	0x036092FC BL 0x1C16CF4
	0x03609300 ADRP X0, 0xB31000
	0x03609304 LDR X0, [X0 + 0xD08]
	0x03609308 BL 0x1C16CF4
	0x0360930C ADRP X0, 0xB31000
	0x03609310 LDR X0, [X0 + 0x5A0]
	0x03609314 BL 0x1C16CF4
	0x03609318 ADRP X0, 0xB31000
	0x0360931C LDR X0, [X0 + 0xD10]
	0x03609320 BL 0x1C16CF4
	0x03609324 ADRP X0, 0xB1E000
	0x03609328 LDR X0, [X0 + 0xB88]
	0x0360932C BL 0x1C16CF4
	0x03609330 ADRP X0, 0xB31000
	0x03609334 LDR X0, [X0 + 0xDA0]
	0x03609338 BL 0x1C16CF4
	0x0360933C ADRP X0, 0xAEC000
	0x03609340 LDR X0, [X0 + 0x570]
	0x03609344 BL 0x1C16CF4
	0x03609348 MOVZ W8, 0x1
	0x0360934C STRB W8, [X21 + 0x3D8]
	0x03609350 CBZ X20, 0x3609458
	0x03609354 ADRP X8, 0xB31000
	0x03609358 LDR X8, [X8 + 0xDA0]
	0x0360935C LDR X9, [X20]
	0x03609360 LDR X8, [X8]
	0x03609364 LDRB W11, [X9 + 0x130]
	0x03609368 LDRB W10, [X8 + 0x130]
	0x0360936C CMP W11, W10
	0x03609370 B.CC 0x3609458
	0x03609374 LDR X9, [X9 + 0xC8]
	0x03609378 ADD X9, X9, X10, 0x3, LSL
	0x0360937C LDUR X9, [X9 - 0x8]
	0x03609380 CMP X9, X8
	0x03609384 CSEL X24, X20, X31, EQ
	0x03609388 B.NE 0x3609458
	0x0360938C CBZ X24, 0x3609470
	0x03609390 LDRB W8, [X24 + 0x10]
	0x03609394 LDRB W9, [X19 + 0x10]
	0x03609398 CMP W8, 0x0
	0x0360939C CSET W10, NE
	0x036093A0 CMP W9, 0x0
	0x036093A4 CSET W9, EQ
	0x036093A8 CMP W10, W9
	0x036093AC B.EQ 0x3609458
	0x036093B0 CBZ W8, 0x36093F0
	0x036093B4 ADRP X8, 0xAEC000
	0x036093B8 LDR X8, [X8 + 0xA58]
	0x036093BC LDP X23, X22, [X24 + 0x18]
	0x036093C0 LDP X21, X20, [X19 + 0x18]
	0x036093C4 LDR X0, [X8]
	0x036093C8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X21, 0xDD8000
	010 Move W8, [X21+971]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xB32000
	018 Move X0, [X0+3376]
	019 Call 0x1C17CF4
	020 Move X0, 0xB32000
	021 Move X0, [X0+3384]
	022 Call 0x1C17CF4
	023 Move X0, 0xB32000
	024 Move X0, [X0+3392]
	025 Call 0x1C17CF4
	026 Move X0, 0xB32000
	027 Move X0, [X0+3400]
	028 Call 0x1C17CF4
	029 Move X0, 0xB32000
	030 Move X0, [X0+3408]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+971], W8
	034 Move X0, X19
	035 Move [X31+8], X31
	036 Move [X31+16], X31
	037 Move [X31+24], X31
	038 Call RangeHeaderValue..ctor, X0
	039 Compare X20, 0
	040 JumpIfEqual {104}
	041 Move X0, [X20+16]
	042 Compare X0, 0
	043 JumpIfEqual {94}
	044 Move X8, 0xB32000
	045 Move X8, [X8+3408]
	046 Move X23, 0xB32000
	047 Move X24, 0xB32000
	048 Move X22, 0xB32000
	049 Move X1, [X8]
	050 Move X23, [X23+3384]
	051 Move X24, [X24+3400]
	052 Move X22, [X22+3376]
	053 Add X8, X31, 8
	054 Call List`1<Object>.GetEnumerator, X0
	055 Move X1, [X23]
	056 Add X0, X31, 8
	057 Call Enumerator<Object>.MoveNext, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {91}
	062 Move X20, [X31+24]
	063 Move X0, X19
	064 Call RangeHeaderValue.get_Ranges, X0
	065 Move X21, X0
	066 Compare X0, 0
	067 JumpIfEqual {103}
	068 Move X8, [X21]
	069 Move X1, [X24]
	070 NotImplemented "Instruction LDRH not yet implemented."
	071 Compare X9, 0
	072 JumpIfEqual {79}
	073 Move X10, [X8+176]
	074 Add X10, X10, 8
	075 NotImplemented "Instruction LDUR not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Subtract X9, X9, 1
	078 Add X10, X10, 16
	079 Move W2, 2
	080 Move X0, X21
	081 Call 0x1C5D788
	082 Move W9, [X10]
	083 Add W9, W9, 2
	084 Add X8, X8, W9
	085 Add X0, X8, 312
	086 Move X8, [X0]
	087 Move X2, [X0+8]
	088 Move X0, X21
	089 Move X1, X20
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X1, [X22]
	092 Add X0, X31, 8
	093 Call Enumerator<Object>.Dispose, X0
	094 Move X20, [X31+80]
	095 Move X19, [X31+88]
	096 Move X22, [X31+64]
	097 Move X21, [X31+72]
	098 Move X24, [X31+48]
	099 Move X23, [X31+56]
	100 Move X30, [X31+32]
	101 Add X31, X31, 96
	102 Return 
	103 Call 0x1C17F20
	104 Call 0x1C17F20
	105 Move X19, X0
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X0, X19
	108 Call 0x3EB2AD0
	109 Move X20, [X0]
	110 Call 0x3EB2AE0
	111 Move X1, [X22]
	112 Add X0, X31, 8
	113 Call Enumerator<Object>.Dispose, X0
	114 Compare X20, 0
	115 JumpIfEqual {94}
	116 Move X0, X20
	117 Call 0x1C17F18
	118 Move X20, X31
	119 Move X19, X0
	120 Move X1, [X22]
	121 Add X0, X31, 8
	122 Call Enumerator<Object>.Dispose, X0
	123 Compare X20, 0
	124 JumpIfNotEqual {127}
	125 Move X0, X19
	126 Call 0x1D2D690
	127 Move X0, X20
	128 Call 0x1C17F18
	129 Call 0x1991590

Method: System.Collections.Generic.ICollection`1<System.Net.Http.Headers.RangeItemHeaderValue> get_Ranges()

Disassembly:
	0x036093CC CBNZ W8, 0x36093D4
	0x036093D0 BL 0x1C16DFC
	0x036093D4 MOV X0, X23
	0x036093D8 MOV X1, X22
	0x036093DC MOV X2, X21
	0x036093E0 MOV X3, X20
	0x036093E4 MOV X4, X31
	0x036093E8 BL 0x3365C58
	0x036093EC TBZ X0, 0x0, 0x3609458
	0x036093F0 LDRB W8, [X24 + 0x28]
	0x036093F4 LDRB W9, [X19 + 0x28]
	0x036093F8 CMP W8, 0x0
	0x036093FC CSET W10, NE
	0x03609400 CMP W9, 0x0
	0x03609404 CSET W9, NE
	0x03609408 EOR W9, W9, W10, 0x0
	0x0360940C EOR W0, W9, 0x1
	0x03609410 TBNZ X9, 0x0, 0x360945C
	0x03609414 CBZ W8, 0x360945C
	0x03609418 ADRP X8, 0xAEC000
	0x0360941C LDR X8, [X8 + 0x570]
	0x03609420 LDR X20, [X24 + 0x30]
	0x03609424 LDR X19, [X19 + 0x30]
	0x03609428 LDR X0, [X8]
	0x0360942C LDR W8, [X0 + 0xE0]
	0x03609430 CBNZ W8, 0x3609438
	0x03609434 BL 0x1C16DFC
	0x03609438 MOV X0, X20
	0x0360943C MOV X1, X19
	0x03609440 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDD8000
	005 Move W8, [X20+972]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xB32000
	012 Move X0, [X0+3416]
	013 Call 0x1C17CF4
	014 Move X0, 0xB32000
	015 Move X0, [X0+3424]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+972], W8
	019 Move X20, [X19+16]
	020 Compare X20, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xB32000
	023 Move X8, [X8+3424]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xB32000
	027 Move X8, [X8+3416]
	028 Move X20, X0
	029 Move X1, [X8]
	030 Call List`1<Object>..ctor, X0
	031 Move [X19+16], X20
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.String get_Unit()

Disassembly:
	0x03609444 LDP X22, X21, [X31 + 0x20]
	0x03609448 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x0360944C MOV X2, X31
	0x03609450 LDR X30, [X31], #0x40
	0x03609454 B 0x3394CD8
	0x03609458 MOV W0, W31
	0x0360945C LDP X20, X19, [X31 + 0x30]
	0x03609460 LDP X22, X21, [X31 + 0x20]
	0x03609464 LDP X24, X23, [X31 + 0x10]
	0x03609468 LDR X30, [X31], #0x40
	0x0360946C RET
	0x03609470 BL 0x1C16F20
	0x03609474 SUB X31, X31, 0x60
	0x03609478 STR X30, [X31 + 0x30]
	0x0360947C STP X22, X21, [X31 + 0x40]
	0x03609480 STP X20, X19, [X31 + 0x50]
	0x03609484 ADRP X22, 0xDD7000
	0x03609488 ADRP X20, 0xB31000
	0x0360948C ADRP X21, 0xB31000
	0x03609490 LDRB W8, [X22 + 0x3D9]
	0x03609494 LDR X20, [X20 + 0xD20]
	0x03609498 LDR X21, [X21 + 0x5B0]
	0x0360949C MOV X19, X0
	0x036094A0 TBNZ X8, 0x0, 0x36094C4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xDD8000
	006 Move X21, 0xB32000
	007 Move W8, [X20+973]
	008 Move X21, [X21+3432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB32000
	015 Move X0, [X0+3432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+973], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call RangeHeaderValue..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x036094A4 ADRP X0, 0xB31000
	0x036094A8 LDR X0, [X0 + 0x5B0]
	0x036094AC BL 0x1C16CF4
	0x036094B0 ADRP X0, 0xB31000
	0x036094B4 LDR X0, [X0 + 0xD20]
	0x036094B8 BL 0x1C16CF4
	0x036094BC MOVZ W8, 0x1
	0x036094C0 STRB W8, [X22 + 0x3D9]
	0x036094C4 STP X31, X31, [X31]
	0x036094C8 LDR X8, [X19 + 0x20]
	0x036094CC LDR V0, [X19 + 0x1]
	0x036094D0 LDR X1, [X20]
	0x036094D4 ADD X0, X31, 0x10
	0x036094D8 STR X8, [X31 + 0x20]
	0x036094DC STR V0, [X31 + 0x1]
	0x036094E0 BL 0x2430F60
	0x036094E4 LDUR V0, [X19 + 0x28]
	0x036094E8 LDR X1, [X21]
	0x036094EC MOV W20, W0
	0x036094F0 ADD X0, X31, 0x0
	0x036094F4 STR V0, [X31]
	0x036094F8 BL 0x243B474
	0x036094FC EOR W0, W0, W20, 0x0
	0x03609500 LDP X20, X19, [X31 + 0x50]
	0x03609504 LDP X22, X21, [X31 + 0x40]
	0x03609508 LDR X30, [X31 + 0x30]
	0x0360950C ADD X31, X31, 0x60
	0x03609510 RET
	0x03609514 SUB X31, X31, 0x60
	0x03609518 STP X30, X25, [X31 + 0x20]
	0x0360951C STP X24, X23, [X31 + 0x30]
	0x03609520 STP X22, X21, [X31 + 0x40]
	0x03609524 STP X20, X19, [X31 + 0x50]
	0x03609528 ADRP X21, 0xDD7000
	0x0360952C ADRP X25, 0xB12000
	0x03609530 ADRP X24, 0xB12000
	0x03609534 LDRB W8, [X21 + 0x3DA]
	0x03609538 LDR X25, [X25 + 0x8C8]
	0x0360953C LDR X24, [X24 + 0x8D0]
	0x03609540 MOV X19, X1
	0x03609544 MOV X20, X0
	0x03609548 TBNZ X8, 0x0, 0x3609590
	0x0360954C ADRP X0, 0xB12000
	0x03609550 LDR X0, [X0 + 0x8C8]
	0x03609554 BL 0x1C16CF4
	0x03609558 ADRP X0, 0xB1E000
	0x0360955C LDR X0, [X0 + 0xB88]
	0x03609560 BL 0x1C16CF4
	0x03609564 ADRP X0, 0xB1E000
	0x03609568 LDR X0, [X0 + 0xB90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDD8000
	006 Move W8, [X21+974]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xB32000
	014 Move X0, [X0+3440]
	015 Call 0x1C17CF4
	016 Move X0, 0xB32000
	017 Move X0, [X0+3432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+974], W8
	021 Compare X20, 0
	022 JumpIfEqual {57}
	023 Move X8, 0xB32000
	024 Move X8, [X8+3432]
	025 Move X9, [X20]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 Compare X20, 0
	036 JumpIfEqual {63}
	037 Move X0, [X20+24]
	038 Move X1, [X19+24]
	039 Move W2, 5
	040 Move X3, X31
	041 Call String.Equals, X0, X1, X2
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {57}
	046 Move X8, 0xB32000
	047 Move X0, [X20+16]
	048 Move X1, [X19+16]
	049 Move X8, [X8+3440]
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X2, [X8]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call 0x21A2DF4, X0, X1
	056 Return X0
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move W0, W31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0360956C BL 0x1C16CF4
	0x03609570 ADRP X0, 0xB31000
	0x03609574 LDR X0, [X0 + 0xDA0]
	0x03609578 BL 0x1C16CF4
	0x0360957C ADRP X0, 0xB12000
	0x03609580 LDR X0, [X0 + 0x8D0]
	0x03609584 BL 0x1C16CF4
	0x03609588 MOVZ W8, 0x1
	0x0360958C STRB W8, [X21 + 0x3DA]
	0x03609590 STP X31, X31, [X31]
	0x03609594 STR X31, [X19]
	0x03609598 LDR X0, [X25]
	0x0360959C BL 0x1C16F10
	0x036095A0 MOV X1, X31
	0x036095A4 MOV X21, X0
	0x036095A8 BL 0x33BDD8C
	0x036095AC MOV X0, X21
	0x036095B0 MOV W1, W31
	0x036095B4 STR X20, [X21 + 0x10]
	0x036095B8 BL 0x35FCF70
	0x036095BC MOV X22, X0
	0x036095C0 LDR X0, [X24]
	0x036095C4 MOV X23, X1
	0x036095C8 LDR W8, [X0 + 0xE0]
	0x036095CC CBNZ W8, 0x36095D4
	0x036095D0 BL 0x1C16DFC
	0x036095D4 CMP W22, 0x2
	0x036095D8 B.NE 0x36096B4
	0x036095DC AND X2, X23, 0x0
	0x036095E0 MOV X0, X21
	0x036095E4 MOV X1, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDD8000
	005 Move W8, [X20+975]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB32000
	012 Move X0, [X0+3448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+975], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfEqual {39}
	019 Move X1, X31
	020 Call String.ToLowerInvariant, X0
	021 Compare X0, 0
	022 JumpIfEqual {39}
	023 Move X8, [X0]
	024 Move X20, 0xB32000
	025 Move X9, [X8+344]
	026 Move X1, [X8+352]
	027 Move X20, [X20+3448]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X8, [X19+16]
	030 Move X1, [X20]
	031 Move W19, W0
	032 Move X0, X8
	033 Call 0x21EBCDC, X0
	034 Xor W0, W0, W19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Call 0x1C17F20

Method: System.Boolean TryParse(System.String input, out System.Net.Http.Headers.RangeHeaderValue parsedValue)

Disassembly:
	0x036095E8 BL 0x35FEBA0
	0x036095EC ANDS W31, W0, 0xFF
	0x036095F0 STP X0, X1, [X31 + 0x10]
	0x036095F4 B.EQ 0x3609664
	0x036095F8 MOV X0, X21
	0x036095FC MOV W1, W31
	0x03609600 BL 0x35FCF70
	0x03609604 LDR X8, [X24]
	0x03609608 MOV X20, X0
	0x0360960C LDR W9, [X8 + 0xE0]
	0x03609610 CBNZ W9, 0x360961C
	0x03609614 MOV X0, X8
	0x03609618 BL 0x1C16DFC
	0x0360961C CMP W20, 0x1
	0x03609620 B.NE 0x36096B4
	0x03609624 ADRP X8, 0xB1E000
	0x03609628 LDR X8, [X8 + 0xB90]
	0x0360962C ADD X0, X31, 0x10
	0x03609630 LDR X1, [X8]
	0x03609634 BL 0x243B37C
	0x03609638 ADRP X8, 0xB31000
	0x0360963C LDR X8, [X8 + 0xDA0]
	0x03609640 MOV X20, X0
	0x03609644 LDR X8, [X8]
	0x03609648 MOV X0, X8
	0x0360964C BL 0x1C16F10
	0x03609650 MOV X1, X20
	0x03609654 MOV X21, X0
	0x03609658 BL 0x3609190
	0x0360965C STR X21, [X19]
	0x03609660 B 0x36096AC
	0x03609664 LDR X0, [X25]
	0x03609668 LDR W8, [X0 + 0xE0]
	0x0360966C CBNZ W8, 0x3609674
	0x03609670 BL 0x1C16DFC
	0x03609674 ADD X1, X31, 0x0
	0x03609678 MOV X0, X20
	0x0360967C BL 0x3604B90
	0x03609680 TBZ X0, 0x0, 0x36096B4
	0x03609684 ADRP X8, 0xB31000
	0x03609688 LDP X20, X21, [X31]
	0x0360968C LDR X8, [X8 + 0xDA0]
	0x03609690 LDR X0, [X8]
	0x03609694 BL 0x1C16F10
	0x03609698 MOV X1, X20
	0x0360969C MOV X2, X21
	0x036096A0 MOV X22, X0
	0x036096A4 BL 0x3609100
	0x036096A8 STR X22, [X19]
	0x036096AC MOVZ W0, 0x1
	0x036096B0 B 0x36096B8
	0x036096B4 MOV W0, W31
	0x036096B8 LDP X20, X19, [X31 + 0x50]
	0x036096BC LDP X22, X21, [X31 + 0x40]
	0x036096C0 LDP X24, X23, [X31 + 0x30]
	0x036096C4 LDP X30, X25, [X31 + 0x20]
	0x036096C8 ADD X31, X31, 0x60
	0x036096CC RET
	0x036096D0 SUB X31, X31, 0x70
	0x036096D4 STR X30, [X31 + 0x50]
	0x036096D8 STP X20, X19, [X31 + 0x60]
	0x036096DC ADRP X20, 0xDD7000
	0x036096E0 LDRB W8, [X20 + 0x3DB]
	0x036096E4 MOV X19, X0
	0x036096E8 TBNZ X8, 0x0, 0x3609748
	0x036096EC ADRP X0, 0xAEC000
	0x036096F0 LDR X0, [X0 + 0xC48]
	0x036096F4 BL 0x1C16CF4
	0x036096F8 ADRP X0, 0xAEC000
	0x036096FC LDR X0, [X0 + 0xA58]
	0x03609700 BL 0x1C16CF4
	0x03609704 ADRP X0, 0xB1E000
	0x03609708 LDR X0, [X0 + 0xB88]
	0x0360970C BL 0x1C16CF4
	0x03609710 ADRP X0, 0xB31000
	0x03609714 LDR X0, [X0 + 0xD28]
	0x03609718 BL 0x1C16CF4
	0x0360971C ADRP X0, 0xB1E000
	0x03609720 LDR X0, [X0 + 0xB90]
	0x03609724 BL 0x1C16CF4
	0x03609728 ADRP X0, 0xAEC000
	0x0360972C LDR X0, [X0 + 0x570]
	0x03609730 BL 0x1C16CF4
	0x03609734 ADRP X0, 0xB17000
	0x03609738 LDR X0, [X0 + 0x3A8]
	0x0360973C BL 0x1C16CF4
	0x03609740 MOVZ W8, 0x1
	0x03609744 STRB W8, [X20 + 0x3DB]
	0x03609748 STP X31, X31, [X31 + 0x20]
	0x0360974C STR X31, [X31 + 0x30]
	0x03609750 STP X31, X31, [X31 + 0x10]
	0x03609754 STR X31, [X31 + 0x58]
	0x03609758 STR X31, [X31 + 0x8]
	0x0360975C LDP X8, X9, [X19 + 0x28]
	0x03609760 ADRP X20, 0xAEC000
	0x03609764 LDR X20, [X20 + 0xC48]
	0x03609768 ANDS W31, W8, 0xFF
	0x0360976C STP X8, X9, [X31 + 0x40]
	0x03609770 B.EQ 0x36097E8
	0x03609774 ADRP X10, 0xB1E000
	0x03609778 LDR X10, [X10 + 0xB90]
	0x0360977C ADRP X19, 0xAEC000
	0x03609780 ADD X0, X31, 0x40
	0x03609784 LDR X1, [X10]
	0x03609788 LDR X19, [X19 + 0x570]
	0x0360978C STP X8, X9, [X31 + 0x40]
	0x03609790 BL 0x243B37C
	0x03609794 LDR X8, [X19]
	0x03609798 STR X0, [X31 + 0x58]
	0x0360979C LDR W9, [X8 + 0xE0]
	0x036097A0 CBNZ W9, 0x36097AC
	0x036097A4 MOV X0, X8
	0x036097A8 BL 0x1C16DFC
	0x036097AC ADD X0, X31, 0x58
	0x036097B0 MOV X1, X31
	0x036097B4 BL 0x3394234
	0x036097B8 LDR X0, [X20]
	0x036097BC STR D0, [X31 + 0x8]
	0x036097C0 LDR W8, [X0 + 0xE0]
	0x036097C4 CBNZ W8, 0x36097CC
	0x036097C8 BL 0x1C16DFC
	0x036097CC MOV X0, X31
	0x036097D0 BL 0x3338524
	0x036097D4 MOV X1, X0
	0x036097D8 ADD X0, X31, 0x8
	0x036097DC MOV X2, X31
	0x036097E0 BL 0x33662E0
	0x036097E4 B 0x3609868
	0x036097E8 ADRP X9, 0xB31000
	0x036097EC LDR V0, [X19 + 0x1]
	0x036097F0 LDR X8, [X19 + 0x20]
	0x036097F4 LDR X9, [X9 + 0xD28]
	0x036097F8 ADD X0, X31, 0x20
	0x036097FC STR V0, [X31 + 0x2]
	0x03609800 STR X8, [X31 + 0x30]
	0x03609804 LDR X1, [X9]
	0x03609808 BL 0x2430E58
	0x0360980C MOV X8, X0
	0x03609810 LDR X0, [X20]
	0x03609814 STP X8, X1, [X31 + 0x10]
	0x03609818 LDR W8, [X0 + 0xE0]
	0x0360981C CBNZ W8, 0x3609824
	0x03609820 BL 0x1C16DFC
	0x03609824 MOV X0, X31
	0x03609828 BL 0x3338524
	0x0360982C ADRP X8, 0xAEC000
	0x03609830 LDR X8, [X8 + 0xA58]
	0x03609834 MOV X19, X0
	0x03609838 LDR X8, [X8]
	0x0360983C LDR W9, [X8 + 0xE0]
	0x03609840 CBNZ W9, 0x360984C
	0x03609844 MOV X0, X8
	0x03609848 BL 0x1C16DFC
	0x0360984C ADRP X8, 0xB17000
	0x03609850 LDR X8, [X8 + 0x3A8]
	0x03609854 ADD X0, X31, 0x10
	0x03609858 MOV X2, X19
	0x0360985C MOV X3, X31
	0x03609860 LDR X1, [X8]
	0x03609864 BL 0x336545C
	0x03609868 LDP X20, X19, [X31 + 0x60]
	0x0360986C LDR X30, [X31 + 0x50]
	0x03609870 ADD X31, X31, 0x70
	0x03609874 RET
	0x03609878 MOV X1, X31
	0x0360987C B 0x33BDD8C
	0x03609880 LDP X8, X1, [X0 + 0x10]
	0x03609884 MOV X0, X8
	0x03609888 RET
	0x0360988C STP X1, X2, [X0 + 0x10]
	0x03609890 RET
	0x03609894 LDR X0, [X0 + 0x20]
	0x03609898 RET
	0x0360989C STR X1, [X0 + 0x20]
	0x036098A0 RET
	0x036098A4 MOV X1, X31
	0x036098A8 B 0x33C5A24
	0x036098AC STP X30, X21, [X31 - 0x20]!
	0x036098B0 STP X20, X19, [X31 + 0x10]
	0x036098B4 ADRP X21, 0xDD7000
	0x036098B8 LDRB W8, [X21 + 0x3DC]
	0x036098BC MOV X20, X1
	0x036098C0 MOV X19, X0
	0x036098C4 TBNZ X8, 0x0, 0x36098F4
	0x036098C8 ADRP X0, 0xAF5000
	0x036098CC LDR X0, [X0 + 0x7C8]
	0x036098D0 BL 0x1C16CF4
	0x036098D4 ADRP X0, 0xAF5000
	0x036098D8 LDR X0, [X0 + 0x7D8]
	0x036098DC BL 0x1C16CF4
	0x036098E0 ADRP X0, 0xB31000
	0x036098E4 LDR X0, [X0 + 0xDA8]
	0x036098E8 BL 0x1C16CF4
	0x036098EC MOVZ W8, 0x1
	0x036098F0 STRB W8, [X21 + 0x3DC]
	0x036098F4 CBZ X20, 0x3609980
	0x036098F8 ADRP X8, 0xB31000
	0x036098FC LDR X8, [X8 + 0xDA8]
	0x03609900 LDR X9, [X20]
	0x03609904 LDR X8, [X8]
	0x03609908 LDRB W11, [X9 + 0x130]
	0x0360990C LDRB W10, [X8 + 0x130]
	0x03609910 CMP W11, W10
	0x03609914 B.CC 0x3609980
	0x03609918 LDR X9, [X9 + 0xC8]
	0x0360991C ADD X9, X9, X10, 0x3, LSL
	0x03609920 LDUR X9, [X9 - 0x8]
	0x03609924 CMP X9, X8
	0x03609928 CSEL X20, X20, X31, EQ
	0x0360992C B.NE 0x3609980
	0x03609930 CBZ X20, 0x3609990
	0x03609934 LDR X0, [X20 + 0x20]
	0x03609938 LDR X1, [X19 + 0x20]
	0x0360993C MOVZ W2, 0x5
	0x03609940 MOV X3, X31
	0x03609944 BL 0x3226C60
	0x03609948 TBZ X0, 0x0, 0x3609980
	0x0360994C LDRB W8, [X20 + 0x10]
	0x03609950 LDRB W9, [X19 + 0x10]
	0x03609954 LDR V0, [X20 + 0x18]
	0x03609958 LDR V1, [X19 + 0x18]
	0x0360995C CMP W8, 0x0
	0x03609960 CSET W8, EQ
	0x03609964 CMP W9, 0x0
	0x03609968 CSET W9, NE
	0x0360996C FCMP D0, D1
	0x03609970 CSET W10, EQ
	0x03609974 EOR W8, W8, W9, 0x0
	0x03609978 AND W0, W10, W8, 0x0
	0x0360997C B 0x3609984
	0x03609980 MOV W0, W31
	0x03609984 LDP X20, X19, [X31 + 0x10]
	0x03609988 LDP X30, X21, [X31], #0x20
	0x0360998C RET
	0x03609990 BL 0x1C16F20
	0x03609994 SUB X31, X31, 0x30
	0x03609998 STP X30, X21, [X31 + 0x10]
	0x0360999C STP X20, X19, [X31 + 0x20]
	0x036099A0 ADRP X20, 0xDD7000
	0x036099A4 LDRB W8, [X20 + 0x3DD]
	0x036099A8 MOV X19, X0
	0x036099AC TBNZ X8, 0x0, 0x36099C4
	0x036099B0 ADRP X0, 0xB31000
	0x036099B4 LDR X0, [X0 + 0xDB0]
	0x036099B8 BL 0x1C16CF4
	0x036099BC MOVZ W8, 0x1
	0x036099C0 STRB W8, [X20 + 0x3DD]
	0x036099C4 STP X31, X31, [X31]
	0x036099C8 LDR X0, [X19 + 0x20]
	0x036099CC CBZ X0, 0x3609A1C
	0x036099D0 MOV X1, X31
	0x036099D4 BL 0x322B6E4
	0x036099D8 CBZ X0, 0x3609A1C
	0x036099DC LDR X8, [X0]
	0x036099E0 ADRP X21, 0xB31000
	0x036099E4 LDP X9, X1, [X8 + 0x158]
	0x036099E8 LDR X21, [X21 + 0xDB0]
	0x036099EC BLR X9
	0x036099F0 LDR V0, [X19 + 0x1]
	0x036099F4 LDR X1, [X21]
	0x036099F8 MOV W20, W0
	0x036099FC ADD X0, X31, 0x0
	0x03609A00 STR V0, [X31]
	0x03609A04 BL 0x24318C4
	0x03609A08 EOR W0, W0, W20, 0x0
	0x03609A0C LDP X20, X19, [X31 + 0x20]
	0x03609A10 LDP X30, X21, [X31 + 0x10]
	0x03609A14 ADD X31, X31, 0x30
	0x03609A18 RET
	0x03609A1C BL 0x1C16F20
	0x03609A20 STP X30, X25, [X31 - 0x40]!
	0x03609A24 STP X24, X23, [X31 + 0x10]
	0x03609A28 STP X22, X21, [X31 + 0x20]
	0x03609A2C STP X20, X19, [X31 + 0x30]
	0x03609A30 ADRP X24, 0xDD7000
	0x03609A34 ADRP X25, 0xB31000
	0x03609A38 ADRP X22, 0xB31000
	0x03609A3C ADRP X23, 0xB31000
	0x03609A40 LDRB W8, [X24 + 0x3DE]
	0x03609A44 LDR X25, [X25 + 0xDB8]
	0x03609A48 LDR X22, [X22 + 0xDC0]
	0x03609A4C LDR X23, [X23 + 0xDC8]
	0x03609A50 MOV X19, X2
	0x03609A54 MOV W20, W1
	0x03609A58 MOV X21, X0
	0x03609A5C TBNZ X8, 0x0, 0x3609A8C
	0x03609A60 ADRP X0, 0xB31000
	0x03609A64 LDR X0, [X0 + 0xDC8]
	0x03609A68 BL 0x1C16CF4
	0x03609A6C ADRP X0, 0xB31000
	0x03609A70 LDR X0, [X0 + 0xDB8]
	0x03609A74 BL 0x1C16CF4
	0x03609A78 ADRP X0, 0xB31000
	0x03609A7C LDR X0, [X0 + 0xDC0]
	0x03609A80 BL 0x1C16CF4
	0x03609A84 MOVZ W8, 0x1
	0x03609A88 STRB W8, [X24 + 0x3DE]
	0x03609A8C LDR X0, [X25]
	0x03609A90 BL 0x1C16F10
	0x03609A94 LDR X2, [X22]
	0x03609A98 MOV X1, X31
	0x03609A9C MOV X3, X31
	0x03609AA0 MOV X22, X0
	0x03609AA4 BL 0x2B47CB4
	0x03609AA8 LDR X4, [X23]
	0x03609AAC MOV X0, X21
	0x03609AB0 MOV W1, W20
	0x03609AB4 MOV X2, X22
	0x03609AB8 MOV X3, X19
	0x03609ABC LDP X20, X19, [X31 + 0x30]
	0x03609AC0 LDP X22, X21, [X31 + 0x20]
	0x03609AC4 LDP X24, X23, [X31 + 0x10]
	0x03609AC8 LDP X30, X25, [X31], #0x40
	0x03609ACC B 0x21A2910
	0x03609AD0 SUB X31, X31, 0x50
	0x03609AD4 STR X30, [X31 + 0x10]
	0x03609AD8 STP X24, X23, [X31 + 0x20]
	0x03609ADC STP X22, X21, [X31 + 0x30]
	0x03609AE0 STP X20, X19, [X31 + 0x40]
	0x03609AE4 ADRP X22, 0xDD7000
	0x03609AE8 LDRB W8, [X22 + 0x3DF]
	0x03609AEC MOV X20, X2
	0x03609AF0 MOV X19, X1
	0x03609AF4 MOV X21, X0
	0x03609AF8 TBNZ X8, 0x0, 0x3609B40
	0x03609AFC ADRP X0, 0xAF5000
	0x03609B00 LDR X0, [X0 + 0x7D0]
	0x03609B04 BL 0x1C16CF4
	0x03609B08 ADRP X0, 0xB31000
	0x03609B0C LDR X0, [X0 + 0xDA8]
	0x03609B10 BL 0x1C16CF4
	0x03609B14 ADRP X0, 0xB12000
	0x03609B18 LDR X0, [X0 + 0x8D0]
	0x03609B1C BL 0x1C16CF4
	0x03609B20 ADRP X0, 0xB31000
	0x03609B24 LDR X0, [X0 + 0xDD0]
	0x03609B28 BL 0x1C16CF4
	0x03609B2C ADRP X0, 0xB19000

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0xDD8000
	015 Move X19, 0xB13000
	016 Move X27, 0xB13000
	017 Move W8, [X20+976]
	018 Move X19, [X19+2248]
	019 Move X27, [X27+2256]
	020 Move X24, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {55}
	026 Move X0, 0xAF4000
	027 Move X0, [X0+2264]
	028 Call 0x1C17CF4
	029 Move X0, 0xB32000
	030 Move X0, [X0+3400]
	031 Call 0x1C17CF4
	032 Move X0, 0xB13000
	033 Move X0, [X0+2248]
	034 Call 0x1C17CF4
	035 Move X0, 0xB27000
	036 Move X0, [X0+2552]
	037 Call 0x1C17CF4
	038 Move X0, 0xB2F000
	039 Move X0, [X0+1848]
	040 Call 0x1C17CF4
	041 Move X0, 0xB13000
	042 Move X0, [X0+3752]
	043 Call 0x1C17CF4
	044 Move X0, 0xB32000
	045 Move X0, [X0+3432]
	046 Call 0x1C17CF4
	047 Move X0, 0xB32000
	048 Move X0, [X0+3456]
	049 Call 0x1C17CF4
	050 Move X0, 0xB13000
	051 Move X0, [X0+2256]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X20+976], W8
	055 Move [X31+48], X31
	056 Move [X31+56], X31
	057 Move [X31+32], X31
	058 Move [X31+40], X31
	059 Move [X31+24], X31
	060 Move [X24], X31
	061 Move X0, [X19]
	062 Call 0x1C17F10
	063 Move X1, X31
	064 Move X20, X0
	065 Call Object..ctor, X0
	066 Move X0, X20
	067 Move W1, W31
	068 Move [X20+16], X21
	069 Call Lexer.Scan, X0, X1
	070 Move X22, X0
	071 Move X0, [X27]
	072 Move X23, X1
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X8, 0xB32000
	079 Move X8, [X8+3432]
	080 Move X0, [X8]
	081 Call 0x1C17F10
	082 Move X21, X0
	083 Call RangeHeaderValue..ctor, X0
	084 And X2, X23, 0
	085 Move X0, X20
	086 Move X1, X22
	087 Call Lexer.GetStringValue, X0, X1
	088 Compare X21, 0
	089 JumpIfEqual {366}
	090 Move [X21+24], X0
	091 Move X0, X20
	092 Move W1, W31
	093 Call Lexer.Scan, X0, X1
	094 Move X8, [X27]
	095 Move X22, X0
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move [X31+8], X24
	103 Move W1, 1
	104 Move X0, X20
	105 Move [X31+48], X31
	106 Move [X31+56], X31
	107 Move [X31+32], X31
	108 Move [X31+40], X31
	109 Call Lexer.Scan, X0, X1
	110 Move X25, X0
	111 Move X0, [X27]
	112 Move X26, X1
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 NotImplemented "Instruction CMP not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X0, X20
	120 Move W1, W31
	121 Call Lexer.Scan, X0, X1
	122 Move X25, X0
	123 NotImplemented "Instruction BFM not yet implemented."
	124 Add X3, X31, 24
	125 Move X0, X20
	126 Move X1, X25
	127 Move X2, X24
	128 Call Lexer.TryGetNumericValue, X0, X1, X2
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {350}
	133 Move X8, 0xB2F000
	134 Move X1, [X31+24]
	135 Move X8, [X8+1848]
	136 Add X0, X31, 32
	137 Move X2, [X8]
	138 Call Nullable`1<Int64>..ctor, X0, X1
	139 Move W26, W31
	140 Move X19, [X31+16]
	141 Move X0, X20
	142 Move X1, X25
	143 NotImplemented "Instruction BFM not yet implemented."
	144 Move X2, X19
	145 Call Lexer.GetStringValue, X0, X1
	146 Move X8, 0xAF4000
	147 Move X8, [X8+2264]
	148 Move X25, X0
	149 Move W1, 1
	150 Move X8, [X8]
	151 Move X0, X8
	152 Call 0x1C17D6C
	153 Compare X0, 0
	154 JumpIfEqual {366}
	155 Move W8, [X0+24]
	156 Move X1, X0
	157 Compare W8, 0
	158 JumpIfEqual {367}
	159 Move W8, 45
	160 Move [X31+16], X19
	161 NotImplemented "Instruction STRH not yet implemented."
	162 Compare X25, 0
	163 JumpIfEqual {366}
	164 Move W2, 1
	165 Move X0, X25
	166 Move X3, X31
	167 Call String.Split, X0, X1, X2
	168 Compare X0, 0
	169 JumpIfEqual {366}
	170 Move W8, [X0+24]
	171 Move X26, X0
	172 Compare W8, 0
	173 JumpIfEqual {367}
	174 Move X0, [X26+32]
	175 Add X1, X31, 24
	176 Call Long.TryParse, X0, X1
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {350}
	181 Move W8, [X26+24]
	182 NotImplemented "Instruction CMP not yet implemented."
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move W1, 1
	185 Move X0, X20
	186 Call Lexer.Scan, X0, X1
	187 Move X8, 0xB2F000
	188 Move X1, [X31+24]
	189 Move X8, [X8+1848]
	190 Move X26, X0
	191 Add X0, X31, 48
	192 Move X2, [X8]
	193 Call Nullable`1<Int64>..ctor, X0, X1
	194 Move X0, [X27]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1C17DFC
	199 NotImplemented "Instruction CMP not yet implemented."
	200 NotImplemented "Instruction CMP not yet implemented."
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X0, X20
	203 Move W1, W31
	204 Call Lexer.Scan, X0, X1
	205 Move X25, X0
	206 Move X0, [X27]
	207 Move X26, X1
	208 Move W8, [X0+224]
	209 Compare W8, 0
	210 JumpIfNotEqual {212}
	211 Call 0x1C17DFC
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X19, [X31]
	214 Add X3, X31, 24
	215 Move X0, X20
	216 Move X1, X25
	217 NotImplemented "Instruction BFM not yet implemented."
	218 Move X2, X19
	219 Call Lexer.TryGetNumericValue, X0, X1, X2
	220 Move TEMP, X0
	221 And TEMP, TEMP, 1
	222 Compare TEMP, 1
	223 JumpIfNotEqual {350}
	224 Move X8, 0xB2F000
	225 Move X1, [X31+24]
	226 Move X8, [X8+1848]
	227 Add X0, X31, 32
	228 Move X2, [X8]
	229 Call Nullable`1<Int64>..ctor, X0, X1
	230 Move X8, [X31+40]
	231 Move X9, [X31+56]
	232 Move W26, W31
	233 Move [X31], X19
	234 Move X8, 0xB2F000
	235 Move X1, [X31+24]
	236 Move X8, [X8+1848]
	237 Add X0, X31, 48
	238 Move X2, [X8]
	239 Call Nullable`1<Int64>..ctor, X0, X1
	240 Move W8, [X26+24]
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move X0, [X26+40]
	243 Add X1, X31, 24
	244 Call Long.TryParse, X0, X1
	245 Move TEMP, X0
	246 And TEMP, TEMP, 1
	247 Compare TEMP, 1
	248 JumpIfNotEqual {350}
	249 Move X8, 0xB2F000
	250 Move X1, [X31+24]
	251 Move X8, [X8+1848]
	252 Add X0, X31, 32
	253 Move X2, [X8]
	254 Call Nullable`1<Int64>..ctor, X0, X1
	255 Move X8, [X31+40]
	256 Move X9, [X31+56]
	257 Move W26, W31
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move W8, [X31+32]
	260 Compare W8, 0
	261 JumpIfEqual {266}
	262 Move W8, [X31+48]
	263 Move W25, 2
	264 Compare W8, 0
	265 JumpIfEqual {278}
	266 Move W25, 2
	267 Move W8, [X25+16]
	268 Subtract W1, W8, 1
	269 Move X0, X25
	270 Move X2, X31
	271 Call String.get_Chars, X0, X1
	272 And W8, W0, 0xFFFF
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Move W25, 1
	275 Move W26, 1
	276 Move W26, 1
	277 Move W25, 8
	278 Move X0, X21
	279 Move X19, X21
	280 Call RangeHeaderValue.get_Ranges, X0
	281 Move X8, 0xB32000
	282 Move X29, [X31+48]
	283 Move X22, [X31+56]
	284 Move X23, [X31+32]
	285 Move X21, [X31+40]
	286 Move X8, [X8+3456]
	287 Move X27, X0
	288 Move X8, [X8]
	289 Move X0, X8
	290 Call 0x1C17F10
	291 Move X1, X29
	292 Move X2, X22
	293 Move X3, X23
	294 Move X4, X21
	295 Move X28, X0
	296 Call RangeItemHeaderValue..ctor, X0, X1, X2
	297 Compare X27, 0
	298 JumpIfEqual {366}
	299 Move X8, [X27]
	300 Move X10, 0xB32000
	301 Move X21, X19
	302 NotImplemented "Instruction LDRH not yet implemented."
	303 Move X10, [X10+3400]
	304 Move X1, [X10]
	305 Compare X9, 0
	306 JumpIfEqual {313}
	307 Move X10, [X8+176]
	308 Add X10, X10, 8
	309 NotImplemented "Instruction LDUR not yet implemented."
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Subtract X9, X9, 1
	312 Add X10, X10, 16
	313 Move W2, 2
	314 Move X0, X27
	315 Call 0x1C5D788
	316 Move W9, [X10]
	317 Add W9, W9, 2
	318 Add X8, X8, W9
	319 Add X0, X8, 312
	320 Move X8, [X0]
	321 Move X2, [X0+8]
	322 Move X0, X27
	323 Move X1, X28
	324 NotImplemented "Instruction BLR not yet implemented."
	325 Move TEMP, X26
	326 And TEMP, TEMP, 1
	327 Compare TEMP, 1
	328 JumpIfEqual {333}
	329 Move X0, X20
	330 Move W1, W31
	331 Call Lexer.Scan, X0, X1
	332 Move X25, X0
	333 Move X27, 0xB13000
	334 Move X27, [X27+2256]
	335 Move X0, [X27]
	336 Move W8, [X0+224]
	337 Compare W8, 0
	338 JumpIfNotEqual {340}
	339 Call 0x1C17DFC
	340 NotImplemented "Instruction CMP not yet implemented."
	341 Move X0, [X27]
	342 Move W8, [X0+224]
	343 Compare W8, 0
	344 JumpIfNotEqual {346}
	345 Call 0x1C17DFC
	346 NotImplemented "Instruction CMP not yet implemented."
	347 Move X8, [X31+8]
	348 Move W26, 1
	349 Move [X8], X21
	350 Move W26, W31
	351 Move W0, W26
	352 Move X20, [X31+144]
	353 Move X19, [X31+152]
	354 Move X22, [X31+128]
	355 Move X21, [X31+136]
	356 Move X24, [X31+112]
	357 Move X23, [X31+120]
	358 Move X26, [X31+96]
	359 Move X25, [X31+104]
	360 Move X28, [X31+80]
	361 Move X27, [X31+88]
	362 Move X29, [X31+64]
	363 Move X30, [X31+72]
	364 Add X31, X31, 160
	365 Return X0
	366 Call 0x1C17F20
	367 Call 0x1C17F28

Method: System.String ToString()

Disassembly:
	0x03609C7C LDR W8, [X0 + 0xE0]
	0x03609C80 CBNZ W8, 0x3609C88
	0x03609C84 BL 0x1C16DFC
	0x03609C88 CMP W23, 0x4
	0x03609C8C B.NE 0x3609D18
	0x03609C90 MOV X0, X21
	0x03609C94 MOV W1, W31
	0x03609C98 BL 0x35FCF70
	0x03609C9C MOV X8, X0
	0x03609CA0 STR X0, [X20]
	0x03609CA4 STR W1, [X20 + 0x8]
	0x03609CA8 AND X2, X1, 0x0
	0x03609CAC ADD X3, X31, 0x18
	0x03609CB0 MOV X0, X21
	0x03609CB4 MOV X1, X8
	0x03609CB8 BL 0x3604C6C
	0x03609CBC MOV W8, W0
	0x03609CC0 MOV W0, W31
	0x03609CC4 TBZ X8, 0x0, 0x3609D1C
	0x03609CC8 LDR V0, [X31 + 0x18]
	0x03609CCC FMOV D1, 1
	0x03609CD0 FCMP D0, D1
	0x03609CD4 B.GT 0x3609D18
	0x03609CD8 ADRP X8, 0xAF5000
	0x03609CDC LDR X8, [X8 + 0x7D0]
	0x03609CE0 ADD X0, X31, 0x0
	0x03609CE4 STP X31, X31, [X31]
	0x03609CE8 LDR X1, [X8]
	0x03609CEC BL 0x2431800
	0x03609CF0 LDR V0, [X31]
	0x03609CF4 MOV X0, X21
	0x03609CF8 MOV W1, W31
	0x03609CFC STR V0, [X22 + 0x1]
	0x03609D00 BL 0x35FCF70
	0x03609D04 STR X0, [X20]
	0x03609D08 STR W1, [X20 + 0x8]
	0x03609D0C MOVZ W0, 0x1
	0x03609D10 STR X22, [X19]
	0x03609D14 B 0x3609D1C
	0x03609D18 MOV W0, W31
	0x03609D1C LDP X20, X19, [X31 + 0x40]
	0x03609D20 LDP X22, X21, [X31 + 0x30]
	0x03609D24 LDP X24, X23, [X31 + 0x20]
	0x03609D28 LDR X30, [X31 + 0x10]
	0x03609D2C ADD X31, X31, 0x50
	0x03609D30 RET
	0x03609D34 BL 0x1C16F20
	0x03609D38 SUB X31, X31, 0x40
	0x03609D3C STR X30, [X31 + 0x10]
	0x03609D40 STP X22, X21, [X31 + 0x20]
	0x03609D44 STP X20, X19, [X31 + 0x30]
	0x03609D48 ADRP X19, 0xDD7000
	0x03609D4C LDRB W8, [X19 + 0x3E0]
	0x03609D50 MOV X20, X0
	0x03609D54 TBNZ X8, 0x0, 0x3609D9C
	0x03609D58 ADRP X0, 0xAEC000
	0x03609D5C LDR X0, [X0 + 0xC48]
	0x03609D60 BL 0x1C16CF4
	0x03609D64 ADRP X0, 0xAF5000
	0x03609D68 LDR X0, [X0 + 0x7D8]
	0x03609D6C BL 0x1C16CF4
	0x03609D70 ADRP X0, 0xAF6000
	0x03609D74 LDR X0, [X0 + 0xE58]
	0x03609D78 BL 0x1C16CF4
	0x03609D7C ADRP X0, 0xB31000
	0x03609D80 LDR X0, [X0 + 0xDD8]
	0x03609D84 BL 0x1C16CF4
	0x03609D88 ADRP X0, 0xB31000
	0x03609D8C LDR X0, [X0 + 0xDE0]
	0x03609D90 BL 0x1C16CF4
	0x03609D94 MOVZ W8, 0x1
	0x03609D98 STRB W8, [X19 + 0x3E0]
	0x03609D9C STR X31, [X31 + 0x18]
	0x03609DA0 LDR X8, [X20 + 0x10]
	0x03609DA4 LDR X19, [X20 + 0x20]
	0x03609DA8 ANDS W31, W8, 0xFF
	0x03609DAC B.EQ 0x3609E2C
	0x03609DB0 ADRP X9, 0xAF6000
	0x03609DB4 LDR X9, [X9 + 0xE58]
	0x03609DB8 ADRP X22, 0xAEC000
	0x03609DBC ADRP X21, 0xB31000
	0x03609DC0 LDR X22, [X22 + 0xC48]
	0x03609DC4 LDR X21, [X21 + 0xDE0]
	0x03609DC8 LDR X10, [X20 + 0x18]
	0x03609DCC LDR X1, [X9]
	0x03609DD0 ADRP X20, 0xB31000
	0x03609DD4 LDR X20, [X20 + 0xDD8]
	0x03609DD8 ADD X0, X31, 0x0
	0x03609DDC STP X8, X10, [X31]
	0x03609DE0 BL 0x2431818
	0x03609DE4 LDR X0, [X22]
	0x03609DE8 STR D0, [X31 + 0x18]
	0x03609DEC LDR W8, [X0 + 0xE0]
	0x03609DF0 CBNZ W8, 0x3609DF8
	0x03609DF4 BL 0x1C16DFC
	0x03609DF8 MOV X0, X31
	0x03609DFC BL 0x3338524
	0x03609E00 LDR X1, [X21]
	0x03609E04 MOV X2, X0
	0x03609E08 ADD X0, X31, 0x18
	0x03609E0C MOV X3, X31
	0x03609E10 BL 0x336636C
	0x03609E14 LDR X1, [X20]
	0x03609E18 MOV X2, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xDD8000
	010 Move X20, 0xAEB000
	011 Move W8, [X21+977]
	012 Move X20, [X20+2288]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xB32000
	019 Move X0, [X0+3400]
	020 Call 0x1C17CF4
	021 Move X0, 0xB32000
	022 Move X0, [X0+3472]
	023 Call 0x1C17CF4
	024 Move X0, 0xAEB000
	025 Move X0, [X0+2288]
	026 Call 0x1C17CF4
	027 Move X0, 0xB18000
	028 Move X0, [X0+4024]
	029 Call 0x1C17CF4
	030 Move X0, 0xAEB000
	031 Move X0, [X0+2104]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+977], W8
	035 Move X0, [X20]
	036 Move X21, [X19+24]
	037 Call 0x1C17F10
	038 Move X1, X21
	039 Move X2, X31
	040 Move X20, X0
	041 Call StringBuilder..ctor, X0, X1
	042 Compare X20, 0
	043 JumpIfEqual {106}
	044 Move X8, 0xB18000
	045 Move X8, [X8+4024]
	046 Move X0, X20
	047 Move X2, X31
	048 Move X1, [X8]
	049 Call StringBuilder.Append, X0, X1
	050 Move X0, X19
	051 Call RangeHeaderValue.get_Ranges, X0
	052 Compare X0, 0
	053 JumpIfEqual {106}
	054 Move X23, 0xB32000
	055 Move X24, 0xB32000
	056 Move X25, 0xAEB000
	057 Move X23, [X23+3400]
	058 Move X24, [X24+3472]
	059 Move X25, [X25+2104]
	060 Move X22, X0
	061 Move W21, W31
	062 Move X8, [X22]
	063 Move X1, [X23]
	064 NotImplemented "Instruction LDRH not yet implemented."
	065 Compare X9, 0
	066 JumpIfEqual {73}
	067 Move X10, [X8+176]
	068 Add X10, X10, 8
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Subtract X9, X9, 1
	072 Add X10, X10, 16
	073 Move X0, X22
	074 Move W2, W31
	075 Call 0x1C5D788
	076 NotImplemented "Instruction LDRSW not yet implemented."
	077 Add X8, X8, X9
	078 Add X0, X8, 312
	079 Move X8, [X0]
	080 Move X1, [X0+8]
	081 Move X0, X22
	082 NotImplemented "Instruction BLR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Compare W21, 0
	085 JumpIfEqual {90}
	086 Move X1, [X25]
	087 Move X0, X20
	088 Move X2, X31
	089 Call StringBuilder.Append, X0, X1
	090 Move X0, [X19+16]
	091 Compare X0, 0
	092 JumpIfEqual {106}
	093 Move X2, [X24]
	094 Move W1, W21
	095 Call List`1<Object>.get_Item, X0, X1
	096 Move X1, X0
	097 Move X0, X20
	098 Move X2, X31
	099 Call StringBuilder.Append, X0, X1
	100 Move X0, X19
	101 Add W21, W21, 1
	102 Call RangeHeaderValue.get_Ranges, X0
	103 Move X22, X0
	104 Compare X0, 0
	105 JumpIfNotEqual {62}
	106 Call 0x1C17F20
	107 Move X8, [X20]
	108 Move X0, X20
	109 Move X20, [X31+48]
	110 Move X19, [X31+56]
	111 Move X22, [X31+32]
	112 Move X21, [X31+40]
	113 Move X2, [X8+360]
	114 Move X1, [X8+368]
	115 Move X24, [X31+16]
	116 Move X23, [X31+24]
	117 Move X30, [X31+64]
	118 Move X25, [X31+72]
	119 CallNoReturn X2

