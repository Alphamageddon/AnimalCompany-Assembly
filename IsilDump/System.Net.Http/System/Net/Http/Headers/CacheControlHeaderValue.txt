Type: System.Net.Http.Headers.CacheControlHeaderValue

Method: System.Collections.Generic.ICollection`1<System.Net.Http.Headers.NameValueHeaderValue> get_Extensions()

Disassembly:
	0x035FE404 TBZ X0, 0x0, 0x35FE950
	0x035FE408 CBZ X21, 0x35FEB14
	0x035FE40C MOVZ W8, 0x1
	0x035FE410 STRB W8, [X21 + 0x62]
	0x035FE414 B 0x35FEA84
	0x035FE418 MOVZ W8, 0x8CAB
	0x035FE41C MOVK W8, 0xA7040000
	0x035FE420 CMP W0, W8
	0x035FE424 B.HI 0x35FE4C0
	0x035FE428 MOVZ W8, 0xFE28
	0x035FE42C MOVK W8, 0x806A0000
	0x035FE430 CMP W0, W8
	0x035FE434 B.EQ 0x35FE5C8
	0x035FE438 MOVZ W8, 0x8CAB
	0x035FE43C MOVK W8, 0xA7040000
	0x035FE440 CMP W0, W8
	0x035FE444 B.EQ 0x35FE5F4
	0x035FE448 MOVZ W8, 0xA231
	0x035FE44C MOVK W8, 0x79350000
	0x035FE450 CMP W0, W8
	0x035FE454 B.NE 0x35FE950
	0x035FE458 ADRP X8, 0xB3C000
	0x035FE45C LDR X8, [X8 + 0x600]
	0x035FE460 MOV X0, X29
	0x035FE464 MOV X2, X31
	0x035FE468 LDR X1, [X8]
	0x035FE46C BL 0x321BA08
	0x035FE470 TBZ X0, 0x0, 0x35FE950
	0x035FE474 CBZ X21, 0x35FEB14
	0x035FE478 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDE3000
	005 Move W8, [X20+832]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xB3D000
	012 Move X0, [X0+1360]
	013 Call 0x1C17CF4
	014 Move X0, 0xB3D000
	015 Move X0, [X0+1368]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+832], W8
	019 Move X20, [X19+16]
	020 Compare X20, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xB3D000
	023 Move X8, [X8+1368]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xB3D000
	027 Move X8, [X8+1360]
	028 Move X20, X0
	029 Move X1, [X8]
	030 Call List`1<Object>..ctor, X0
	031 Move [X19+16], X20
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Nullable`1<System.TimeSpan> get_MaxAge()

Disassembly:
	0x035FE47C STRB W8, [X21 + 0x66]
	0x035FE480 B 0x35FEA84
	0x035FE484 MOVZ W8, 0xD349

ISIL:
	001 Move X8, [X0+40]
	002 Move X1, [X0+48]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_MaxAge(System.Nullable`1<System.TimeSpan> value)

Disassembly:
	0x035FE488 MOVK W8, 0x39590000
	0x035FE48C CMP W0, W8

ISIL:
	001 Move [X0+40], X1
	002 Move [X0+48], X2
	003 Return 

Method: System.Boolean get_MaxStale()

Disassembly:
	0x035FE490 B.EQ 0x35FE620
	0x035FE494 MOVZ W8, 0xD0C

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_MaxStale(System.Boolean value)

Disassembly:
	0x035FE498 MOVK W8, 0x62CB0000
	0x035FE49C CMP W0, W8
	0x035FE4A0 B.EQ 0x35FE6D0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+56], W8
	003 Return 

Method: System.Nullable`1<System.TimeSpan> get_MaxStaleLimit()

Disassembly:
	0x035FE4A4 MOVZ W8, 0xF51F
	0x035FE4A8 MOVK W8, 0x72970000
	0x035FE4AC CMP W0, W8

ISIL:
	001 Move X8, [X0+64]
	002 Move X1, [X0+72]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_MaxStaleLimit(System.Nullable`1<System.TimeSpan> value)

Disassembly:
	0x035FE4B0 B.NE 0x35FE950
	0x035FE4B4 ADRP X8, 0xB3C000

ISIL:
	001 Move [X0+64], X1
	002 Move [X0+72], X2
	003 Return 

Method: System.Nullable`1<System.TimeSpan> get_MinFresh()

Disassembly:
	0x035FE4B8 LDR X8, [X8 + 0x608]
	0x035FE4BC B 0x35FE510
	0x035FE4C0 MOVZ W8, 0x7A16

ISIL:
	001 Move X8, [X0+80]
	002 Move X1, [X0+88]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_MinFresh(System.Nullable`1<System.TimeSpan> value)

Disassembly:
	0x035FE4C4 MOVK W8, 0xAADF0000
	0x035FE4C8 CMP W0, W8

ISIL:
	001 Move [X0+80], X1
	002 Move [X0+88], X2
	003 Return 

Method: System.Boolean get_MustRevalidate()

Disassembly:
	0x035FE4CC B.EQ 0x35FE8F8
	0x035FE4D0 MOVZ W8, 0x9380

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: System.Void set_MustRevalidate(System.Boolean value)

Disassembly:
	0x035FE4D4 MOVK W8, 0xCC900000
	0x035FE4D8 CMP W0, W8
	0x035FE4DC B.EQ 0x35FE924

ISIL:
	001 And W8, W1, 1
	002 Move [X0+96], W8
	003 Return 

Method: System.Boolean get_NoCache()

Disassembly:
	0x035FE4E0 MOVZ W8, 0xE635
	0x035FE4E4 MOVK W8, 0xCD3F0000

ISIL:
	001 Move W0, [X0+97]
	002 Return X0

Method: System.Void set_NoCache(System.Boolean value)

Disassembly:
	0x035FE4E8 CMP W0, W8
	0x035FE4EC B.NE 0x35FE950
	0x035FE4F0 ADRP X8, 0xB3C000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+97], W8
	003 Return 

Method: System.Collections.Generic.ICollection`1<System.String> get_NoCacheHeaders()

Disassembly:
	0x035FE4F4 LDR X8, [X8 + 0x5D8]
	0x035FE4F8 B 0x35FE6D8
	0x035FE4FC ADRP X8, 0xB3C000
	0x035FE500 LDR X8, [X8 + 0x610]
	0x035FE504 B 0x35FE510
	0x035FE508 ADRP X8, 0xB3C000
	0x035FE50C LDR X8, [X8 + 0x620]
	0x035FE510 LDR X1, [X8]
	0x035FE514 MOV X0, X29
	0x035FE518 MOV X2, X31
	0x035FE51C BL 0x321BA08
	0x035FE520 TBZ X0, 0x0, 0x35FE950
	0x035FE524 MOV X0, X22
	0x035FE528 MOV W1, W31
	0x035FE52C BL 0x35FCF70
	0x035FE530 LDR X8, [X20]
	0x035FE534 MOV X19, X0
	0x035FE538 LDR W9, [X8 + 0xE0]
	0x035FE53C CBNZ W9, 0x35FE548
	0x035FE540 MOV X0, X8
	0x035FE544 BL 0x1C16DFC
	0x035FE548 CMP W19, 0x4
	0x035FE54C B.NE 0x35FEAF0
	0x035FE550 MOV X0, X22
	0x035FE554 MOV W1, W31
	0x035FE558 BL 0x35FCF70
	0x035FE55C MOV X19, X0
	0x035FE560 LDR X0, [X20]
	0x035FE564 MOV X25, X1
	0x035FE568 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDE3000
	005 Move W8, [X20+833]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xAF7000
	012 Move X0, [X0+448]
	013 Call 0x1C17CF4
	014 Move X0, 0xAF7000
	015 Move X0, [X0+464]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+833], W8
	019 Move X20, [X19+24]
	020 Compare X20, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xAF7000
	023 Move X8, [X8+464]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xAF7000
	027 Move X8, [X8+448]
	028 Move X20, X0
	029 Move X1, [X8]
	030 Call List`1<Object>..ctor, X0
	031 Move [X19+24], X20
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Boolean get_NoStore()

Disassembly:
	0x035FE56C CBNZ W8, 0x35FE574
	0x035FE570 BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+98]
	002 Return X0

Method: System.Void set_NoStore(System.Boolean value)

Disassembly:
	0x035FE574 CMP W19, 0x2
	0x035FE578 B.NE 0x35FEAF0
	0x035FE57C LDR X8, [X31 + 0x18]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+98], W8
	003 Return 

Method: System.Boolean get_NoTransform()

Disassembly:
	0x035FE580 MOV X0, X22
	0x035FE584 MOV X1, X19

ISIL:
	001 Move W0, [X0+99]
	002 Return X0

Method: System.Void set_NoTransform(System.Boolean value)

Disassembly:
	0x035FE588 BFM X8, X25, 0x0, 0x1F
	0x035FE58C MOV X2, X8
	0x035FE590 MOV X25, X8

ISIL:
	001 And W8, W1, 1
	002 Move [X0+99], W8
	003 Return 

Method: System.Boolean get_OnlyIfCached()

Disassembly:
	0x035FE594 BL 0x35FEBA0
	0x035FE598 ANDS W31, W0, 0xFF

ISIL:
	001 Move W0, [X0+100]
	002 Return X0

Method: System.Void set_OnlyIfCached(System.Boolean value)

Disassembly:
	0x035FE59C B.EQ 0x35FEAF0
	0x035FE5A0 CBZ X29, 0x35FEB14
	0x035FE5A4 LDR W8, [X29 + 0x10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+100], W8
	003 Return 

Method: System.Boolean get_Private()

Disassembly:
	0x035FE5A8 STR X25, [X31 + 0x18]
	0x035FE5AC CMP W8, 0x8

ISIL:
	001 Move W0, [X0+101]
	002 Return X0

Method: System.Void set_Private(System.Boolean value)

Disassembly:
	0x035FE5B0 B.EQ 0x35FEAB0
	0x035FE5B4 CMP W8, 0x7
	0x035FE5B8 B.NE 0x35FEABC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+101], W8
	003 Return 

Method: System.Collections.Generic.ICollection`1<System.String> get_PrivateHeaders()

Disassembly:
	0x035FE5BC CBZ X21, 0x35FEB14
	0x035FE5C0 STP X0, X1, [X21 + 0x28]
	0x035FE5C4 B 0x35FEA84
	0x035FE5C8 ADRP X8, 0xB3C000
	0x035FE5CC LDR X8, [X8 + 0x5C8]
	0x035FE5D0 MOV X0, X29
	0x035FE5D4 MOV X2, X31
	0x035FE5D8 LDR X1, [X8]
	0x035FE5DC BL 0x321BA08
	0x035FE5E0 TBZ X0, 0x0, 0x35FE950
	0x035FE5E4 CBZ X21, 0x35FEB14
	0x035FE5E8 MOVZ W8, 0x1
	0x035FE5EC STRB W8, [X21 + 0x60]
	0x035FE5F0 B 0x35FEA84
	0x035FE5F4 ADRP X8, 0xB3C000
	0x035FE5F8 LDR X8, [X8 + 0x5F8]
	0x035FE5FC MOV X0, X29
	0x035FE600 MOV X2, X31
	0x035FE604 LDR X1, [X8]
	0x035FE608 BL 0x321BA08
	0x035FE60C TBZ X0, 0x0, 0x35FE950
	0x035FE610 CBZ X21, 0x35FEB14
	0x035FE614 MOVZ W8, 0x1
	0x035FE618 STRB W8, [X21 + 0x63]
	0x035FE61C B 0x35FEA84
	0x035FE620 ADRP X8, 0xB3C000
	0x035FE624 LDR X8, [X8 + 0x5E0]
	0x035FE628 MOV X0, X29
	0x035FE62C MOV X2, X31
	0x035FE630 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDE3000
	005 Move W8, [X20+834]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xAF7000
	012 Move X0, [X0+448]
	013 Call 0x1C17CF4
	014 Move X0, 0xAF7000
	015 Move X0, [X0+464]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+834], W8
	019 Move X20, [X19+32]
	020 Compare X20, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xAF7000
	023 Move X8, [X8+464]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xAF7000
	027 Move X8, [X8+448]
	028 Move X20, X0
	029 Move X1, [X8]
	030 Call List`1<Object>..ctor, X0
	031 Move [X19+32], X20
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Boolean get_ProxyRevalidate()

Disassembly:
	0x035FE634 BL 0x321BA08
	0x035FE638 TBZ X0, 0x0, 0x35FE950

ISIL:
	001 Move W0, [X0+102]
	002 Return X0

Method: System.Void set_ProxyRevalidate(System.Boolean value)

Disassembly:
	0x035FE63C CBZ X21, 0x35FEB14
	0x035FE640 MOVZ W8, 0x1
	0x035FE644 MOV X0, X22

ISIL:
	001 And W8, W1, 1
	002 Move [X0+102], W8
	003 Return 

Method: System.Boolean get_Public()

Disassembly:
	0x035FE648 MOV W1, W31
	0x035FE64C STRB W8, [X21 + 0x38]

ISIL:
	001 Move W0, [X0+103]
	002 Return X0

Method: System.Void set_Public(System.Boolean value)

Disassembly:
	0x035FE650 BL 0x35FCF70
	0x035FE654 LDR X8, [X20]
	0x035FE658 MOV X25, X0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+103], W8
	003 Return 

Method: System.Nullable`1<System.TimeSpan> get_SharedMaxAge()

Disassembly:
	0x035FE65C LDR W9, [X8 + 0xE0]
	0x035FE660 CBNZ W9, 0x35FE66C
	0x035FE664 MOV X0, X8

ISIL:
	001 Move X8, [X0+104]
	002 Move X1, [X0+112]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_SharedMaxAge(System.Nullable`1<System.TimeSpan> value)

Disassembly:
	0x035FE668 BL 0x1C16DFC
	0x035FE66C CMP W25, 0x4

ISIL:
	001 Move [X0+104], X1
	002 Move [X0+112], X2
	003 Return 

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x035FE670 B.NE 0x35FEA94
	0x035FE674 MOV X0, X22
	0x035FE678 MOV W1, W31
	0x035FE67C BL 0x35FCF70
	0x035FE680 MOV X19, X0
	0x035FE684 LDR X0, [X20]
	0x035FE688 MOV X25, X1
	0x035FE68C LDR W8, [X0 + 0xE0]
	0x035FE690 CBNZ W8, 0x35FE698
	0x035FE694 BL 0x1C16DFC
	0x035FE698 CMP W19, 0x2
	0x035FE69C B.NE 0x35FEAF0
	0x035FE6A0 LDR X8, [X31]
	0x035FE6A4 MOV X0, X22
	0x035FE6A8 MOV X1, X19
	0x035FE6AC BFM X8, X25, 0x0, 0x1F
	0x035FE6B0 MOV X2, X8
	0x035FE6B4 MOV X25, X8
	0x035FE6B8 BL 0x35FEBA0
	0x035FE6BC ANDS W31, W0, 0xFF
	0x035FE6C0 B.EQ 0x35FEAF0
	0x035FE6C4 STR X25, [X31]
	0x035FE6C8 STP X0, X1, [X21 + 0x40]
	0x035FE6CC B 0x35FEA84
	0x035FE6D0 ADRP X8, 0xB3C000
	0x035FE6D4 LDR X8, [X8 + 0x5E8]
	0x035FE6D8 LDR X1, [X8]
	0x035FE6DC MOV X0, X29
	0x035FE6E0 MOV X2, X31
	0x035FE6E4 BL 0x321BA08
	0x035FE6E8 TBZ X0, 0x0, 0x35FE950
	0x035FE6EC CBZ X29, 0x35FEB14
	0x035FE6F0 CBZ X21, 0x35FEB14
	0x035FE6F4 LDR W8, [X29 + 0x10]
	0x035FE6F8 MOVZ W9, 0x65
	0x035FE6FC MOV X0, X22
	0x035FE700 MOV W1, W31
	0x035FE704 CMP W8, 0x7
	0x035FE708 MOVZ W8, 0x61
	0x035FE70C CSEL X8, X9, X8, EQ
	0x035FE710 MOVZ W9, 0x1
	0x035FE714 STRB W9, [X21, X8, LSL]
	0x035FE718 BL 0x35FCF70
	0x035FE71C LDR X8, [X20]
	0x035FE720 MOV X25, X0
	0x035FE724 LDR W9, [X8 + 0xE0]
	0x035FE728 CBNZ W9, 0x35FE734
	0x035FE72C MOV X0, X8
	0x035FE730 BL 0x1C16DFC
	0x035FE734 CMP W25, 0x4
	0x035FE738 B.NE 0x35FEA94
	0x035FE73C MOV X0, X22
	0x035FE740 MOV W1, W31
	0x035FE744 BL 0x35FCF70
	0x035FE748 MOV X19, X0
	0x035FE74C LDR X0, [X20]
	0x035FE750 MOV X25, X1
	0x035FE754 LDR W8, [X0 + 0xE0]
	0x035FE758 CBNZ W8, 0x35FE760
	0x035FE75C BL 0x1C16DFC
	0x035FE760 CMP W19, 0x3
	0x035FE764 B.NE 0x35FEAF0
	0x035FE768 LDR X2, [X31 + 0x8]
	0x035FE76C MOV X0, X22
	0x035FE770 MOV X1, X19
	0x035FE774 BFM X2, X25, 0x0, 0x1F
	0x035FE778 STR X2, [X31 + 0x8]
	0x035FE77C BL 0x35FEC68
	0x035FE780 CBZ X0, 0x35FEB14
	0x035FE784 MOVZ W1, 0x2C
	0x035FE788 MOV W2, W31
	0x035FE78C MOV X3, X31
	0x035FE790 BL 0x3229AE8
	0x035FE794 CBZ X0, 0x35FEB14
	0x035FE798 LDR W8, [X0 + 0x18]
	0x035FE79C MOV X25, X0
	0x035FE7A0 CMP W8, 0x1
	0x035FE7A4 B.LT 0x35FEA84
	0x035FE7A8 MOV W26, W31
	0x035FE7AC CMP W26, W8
	0x035FE7B0 B.CS 0x35FEB18
	0x035FE7B4 ADD X8, X25, W26, 0x3, SXTW
	0x035FE7B8 LDR X19, [X8 + 0x20]
	0x035FE7BC ADRP X8, 0xAFE000
	0x035FE7C0 LDR X8, [X8 + 0x8D8]
	0x035FE7C4 MOVZ W1, 0x2
	0x035FE7C8 LDR X0, [X8]
	0x035FE7CC BL 0x1C16D6C
	0x035FE7D0 CBZ X0, 0x35FEB14
	0x035FE7D4 LDR W8, [X0 + 0x18]
	0x035FE7D8 MOV X1, X0
	0x035FE7DC CBZ W8, 0x35FEB18
	0x035FE7E0 CMP W8, 0x1
	0x035FE7E4 MOVZ W8, 0x9
	0x035FE7E8 STRH W8, [X1 + 0x20]
	0x035FE7EC B.EQ 0x35FEB18
	0x035FE7F0 MOVZ W8, 0x20
	0x035FE7F4 STRH W8, [X1 + 0x22]
	0x035FE7F8 CBZ X19, 0x35FEB14
	0x035FE7FC MOV X0, X19
	0x035FE800 MOV X2, X31
	0x035FE804 BL 0x322BBA0
	0x035FE808 LDR W8, [X29 + 0x10]
	0x035FE80C MOV X27, X0
	0x035FE810 CMP W8, 0x7
	0x035FE814 B.NE 0x35FE864
	0x035FE818 MOV X0, X21
	0x035FE81C BL 0x35FD5BC
	0x035FE820 CBZ X0, 0x35FEB14
	0x035FE824 LDR X8, [X0]
	0x035FE828 ADRP X10, 0xAF8000
	0x035FE82C MOV X19, X0
	0x035FE830 LDRH W9, [X8 + 0x12E]
	0x035FE834 LDR X10, [X10 + 0x258]
	0x035FE838 LDR X1, [X10]
	0x035FE83C CBZ X9, 0x35FE8B4
	0x035FE840 LDR X10, [X8 + 0xB0]
	0x035FE844 ADD X10, X10, 0x8
	0x035FE848 LDUR X11, [X10 - 0x8]
	0x035FE84C CMP X11, X1
	0x035FE850 B.EQ 0x35FE8C4
	0x035FE854 SUBS X9, X9, 0x1
	0x035FE858 ADD X10, X10, 0x10
	0x035FE85C B.NE 0x35FE848
	0x035FE860 B 0x35FE8B4
	0x035FE864 MOVZ W8, 0x1
	0x035FE868 MOV X0, X21
	0x035FE86C STRB W8, [X21 + 0x61]
	0x035FE870 BL 0x35FD4F4
	0x035FE874 CBZ X0, 0x35FEB14
	0x035FE878 LDR X8, [X0]
	0x035FE87C ADRP X10, 0xAF8000
	0x035FE880 MOV X19, X0
	0x035FE884 LDRH W9, [X8 + 0x12E]
	0x035FE888 LDR X10, [X10 + 0x258]
	0x035FE88C LDR X1, [X10]
	0x035FE890 CBZ X9, 0x35FE8B4
	0x035FE894 LDR X10, [X8 + 0xB0]
	0x035FE898 ADD X10, X10, 0x8
	0x035FE89C LDUR X11, [X10 - 0x8]
	0x035FE8A0 CMP X11, X1
	0x035FE8A4 B.EQ 0x35FE8C4
	0x035FE8A8 SUBS X9, X9, 0x1
	0x035FE8AC ADD X10, X10, 0x10
	0x035FE8B0 B.NE 0x35FE89C
	0x035FE8B4 MOVZ W2, 0x2
	0x035FE8B8 MOV X0, X19
	0x035FE8BC BL 0x1C5C788
	0x035FE8C0 B 0x35FE8D4
	0x035FE8C4 LDR W9, [X10]
	0x035FE8C8 ADD W9, W9, 0x2
	0x035FE8CC ADD X8, X8, W9, 0x4, SXTW
	0x035FE8D0 ADD X0, X8, 0x138
	0x035FE8D4 LDP X8, X2, [X0]
	0x035FE8D8 MOV X0, X19
	0x035FE8DC MOV X1, X27
	0x035FE8E0 BLR X8
	0x035FE8E4 LDR W8, [X25 + 0x18]
	0x035FE8E8 ADD W26, W26, 0x1
	0x035FE8EC CMP W26, W8
	0x035FE8F0 B.LT 0x35FE7AC
	0x035FE8F4 B 0x35FEA84
	0x035FE8F8 ADRP X8, 0xB3C000
	0x035FE8FC LDR X8, [X8 + 0x618]
	0x035FE900 MOV X0, X29
	0x035FE904 MOV X2, X31
	0x035FE908 LDR X1, [X8]
	0x035FE90C BL 0x321BA08
	0x035FE910 TBZ X0, 0x0, 0x35FE950
	0x035FE914 CBZ X21, 0x35FEB14
	0x035FE918 MOVZ W8, 0x1
	0x035FE91C STRB W8, [X21 + 0x64]
	0x035FE920 B 0x35FEA84
	0x035FE924 ADRP X8, 0xB3C000
	0x035FE928 LDR X8, [X8 + 0x5F0]
	0x035FE92C MOV X0, X29
	0x035FE930 MOV X2, X31
	0x035FE934 LDR X1, [X8]
	0x035FE938 BL 0x321BA08
	0x035FE93C TBZ X0, 0x0, 0x35FE950
	0x035FE940 CBZ X21, 0x35FEB14
	0x035FE944 MOVZ W8, 0x1
	0x035FE948 STRB W8, [X21 + 0x67]
	0x035FE94C B 0x35FEA84
	0x035FE950 AND X8, X25, 0x0
	0x035FE954 AND X9, X24, 0x0
	0x035FE958 ORR X24, X8, X9, 0x0
	0x035FE95C MOV X0, X22
	0x035FE960 MOV X1, X27
	0x035FE964 MOV X2, X24
	0x035FE968 BL 0x35FD280
	0x035FE96C MOV X29, X0
	0x035FE970 MOV X0, X22
	0x035FE974 MOV W1, W31
	0x035FE978 BL 0x35FCF70
	0x035FE97C LDR X8, [X20]
	0x035FE980 MOV X27, X0
	0x035FE984 LDR W9, [X8 + 0xE0]
	0x035FE988 CBNZ W9, 0x35FE994
	0x035FE98C MOV X0, X8
	0x035FE990 BL 0x1C16DFC
	0x035FE994 CMP W27, 0x4
	0x035FE998 B.NE 0x35FE9E8
	0x035FE99C MOV X0, X22
	0x035FE9A0 MOV W1, W31
	0x035FE9A4 BL 0x35FCF70
	0x035FE9A8 MOV X25, X0
	0x035FE9AC LDR X0, [X20]
	0x035FE9B0 MOV X19, X1
	0x035FE9B4 LDR W8, [X0 + 0xE0]
	0x035FE9B8 CBNZ W8, 0x35FE9C0
	0x035FE9BC BL 0x1C16DFC
	0x035FE9C0 AND X8, X25, 0xFFFFFFFF
	0x035FE9C4 CMP X8, 0x2
	0x035FE9C8 B.NE 0x35FEAF0
	0x035FE9CC BFM X23, X19, 0x0, 0x1F
	0x035FE9D0 MOV X0, X22
	0x035FE9D4 MOV X1, X25
	0x035FE9D8 MOV X2, X23
	0x035FE9DC BL 0x35FD280
	0x035FE9E0 MOV X26, X0
	0x035FE9E4 B 0x35FE9F0
	0x035FE9E8 MOV X26, X31
	0x035FE9EC MOV X25, X27
	0x035FE9F0 CBZ X21, 0x35FEB14
	0x035FE9F4 MOV X0, X21
	0x035FE9F8 BL 0x35FD404
	0x035FE9FC MOV X19, X0
	0x035FEA00 MOV X0, X29
	0x035FEA04 MOV X1, X26
	0x035FEA08 BL 0x35FECEC
	0x035FEA0C CBZ X19, 0x35FEB14
	0x035FEA10 LDR X8, [X19]
	0x035FEA14 ADRP X10, 0xB3C000
	0x035FEA18 MOV X29, X0
	0x035FEA1C LDRH W9, [X8 + 0x12E]
	0x035FEA20 LDR X10, [X10 + 0x5C0]
	0x035FEA24 LDR X1, [X10]
	0x035FEA28 CBZ X9, 0x35FEA4C
	0x035FEA2C LDR X10, [X8 + 0xB0]
	0x035FEA30 ADD X10, X10, 0x8
	0x035FEA34 LDUR X11, [X10 - 0x8]
	0x035FEA38 CMP X11, X1
	0x035FEA3C B.EQ 0x35FEA5C
	0x035FEA40 SUBS X9, X9, 0x1
	0x035FEA44 ADD X10, X10, 0x10
	0x035FEA48 B.NE 0x35FEA34
	0x035FEA4C MOVZ W2, 0x2
	0x035FEA50 MOV X0, X19
	0x035FEA54 BL 0x1C5C788
	0x035FEA58 B 0x35FEA6C
	0x035FEA5C LDR W9, [X10]
	0x035FEA60 ADD W9, W9, 0x2
	0x035FEA64 ADD X8, X8, W9, 0x4, SXTW
	0x035FEA68 ADD X0, X8, 0x138
	0x035FEA6C LDP X8, X2, [X0]
	0x035FEA70 MOV X0, X19
	0x035FEA74 MOV X1, X29
	0x035FEA78 BLR X8
	0x035FEA7C CMP W27, 0x4
	0x035FEA80 B.NE 0x35FEA94
	0x035FEA84 MOV X0, X22
	0x035FEA88 MOV W1, W31
	0x035FEA8C BL 0x35FCF70
	0x035FEA90 MOV X25, X0
	0x035FEA94 LDR X0, [X20]
	0x035FEA98 LDR W8, [X0 + 0xE0]
	0x035FEA9C CBNZ W8, 0x35FEAA4
	0x035FEAA0 BL 0x1C16DFC
	0x035FEAA4 CMP W25, 0x8
	0x035FEAA8 B.EQ 0x35FE354
	0x035FEAAC B 0x35FEAC8
	0x035FEAB0 CBZ X21, 0x35FEB14
	0x035FEAB4 STP X0, X1, [X21 + 0x68]
	0x035FEAB8 B 0x35FEA84
	0x035FEABC CBZ X21, 0x35FEB14
	0x035FEAC0 STP X0, X1, [X21 + 0x50]
	0x035FEAC4 B 0x35FEA84
	0x035FEAC8 LDR X0, [X20]
	0x035FEACC LDR W8, [X0 + 0xE0]
	0x035FEAD0 CBNZ W8, 0x35FEAD8
	0x035FEAD4 BL 0x1C16DFC
	0x035FEAD8 CMP W25, 0x1
	0x035FEADC B.NE 0x35FEAF0
	0x035FEAE0 LDR X8, [X31 + 0x10]
	0x035FEAE4 MOVZ W0, 0x1
	0x035FEAE8 STR X21, [X8]
	0x035FEAEC B 0x35FEAF4
	0x035FEAF0 MOV W0, W31
	0x035FEAF4 LDP X20, X19, [X31 + 0x70]
	0x035FEAF8 LDP X22, X21, [X31 + 0x60]
	0x035FEAFC LDP X24, X23, [X31 + 0x50]
	0x035FEB00 LDP X26, X25, [X31 + 0x40]
	0x035FEB04 LDP X28, X27, [X31 + 0x30]
	0x035FEB08 LDP X29, X30, [X31 + 0x20]
	0x035FEB0C ADD X31, X31, 0x80
	0x035FEB10 RET
	0x035FEB14 BL 0x1C16F20
	0x035FEB18 BL 0x1C16F28
	0x035FEB1C MOV X1, X31
	0x035FEB20 B 0x33BDD8C
	0x035FEB24 STR X30, [X31 - 0x30]!
	0x035FEB28 STP X22, X21, [X31 + 0x10]
	0x035FEB2C STP X20, X19, [X31 + 0x20]
	0x035FEB30 CBZ X0, 0x35FEB88
	0x035FEB34 LDR W8, [X0 + 0x10]
	0x035FEB38 MOVZ W20, 0x9DC5
	0x035FEB3C MOV X19, X0
	0x035FEB40 MOVK W20, 0x811C0000
	0x035FEB44 CMP W8, 0x1
	0x035FEB48 B.LT 0x35FEB8C
	0x035FEB4C MOVZ W22, 0x193
	0x035FEB50 MOV W21, W31
	0x035FEB54 MOVK W22, 0x1000000
	0x035FEB58 MOV X0, X19
	0x035FEB5C MOV W1, W21
	0x035FEB60 MOV X2, X31
	0x035FEB64 BL 0x3222A1C
	0x035FEB68 LDR W8, [X19 + 0x10]
	0x035FEB6C AND W9, W0, 0xFFFF
	0x035FEB70 EOR W9, W20, W9, 0x0
	0x035FEB74 ADD W21, W21, 0x1
	0x035FEB78 CMP W21, W8
	0x035FEB7C MUL W20, W9, W22
	0x035FEB80 B.LT 0x35FEB58
	0x035FEB84 B 0x35FEB8C
	0x035FEB88 MOV W20, W31
	0x035FEB8C MOV W0, W20
	0x035FEB90 LDP X20, X19, [X31 + 0x20]
	0x035FEB94 LDP X22, X21, [X31 + 0x10]
	0x035FEB98 LDR X30, [X31], #0x30
	0x035FEB9C RET
	0x035FEBA0 SUB X31, X31, 0x40
	0x035FEBA4 STR X30, [X31 + 0x10]
	0x035FEBA8 STP X22, X21, [X31 + 0x20]
	0x035FEBAC STP X20, X19, [X31 + 0x30]
	0x035FEBB0 ADRP X22, 0xDE2000
	0x035FEBB4 LDRB W8, [X22 + 0x388]
	0x035FEBB8 MOV X21, X2
	0x035FEBBC MOV X19, X1

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X30
	003 Move [X31+112], X28
	004 Move [X31+120], X27
	005 Move [X31+128], X26
	006 Move [X31+136], X25
	007 Move [X31+144], X24
	008 Move [X31+152], X23
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X19, 0xDE3000
	014 Move W8, [X19+835]
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {67}
	020 Move X0, 0xB3D000
	021 Move X0, [X0+1376]
	022 Call 0x1C17CF4
	023 Move X0, 0xB1D000
	024 Move X0, [X0+4040]
	025 Call 0x1C17CF4
	026 Move X0, 0xB3D000
	027 Move X0, [X0+1384]
	028 Call 0x1C17CF4
	029 Move X0, 0xB3D000
	030 Move X0, [X0+1392]
	031 Call 0x1C17CF4
	032 Move X0, 0xB1D000
	033 Move X0, [X0+4048]
	034 Call 0x1C17CF4
	035 Move X0, 0xB1D000
	036 Move X0, [X0+4056]
	037 Call 0x1C17CF4
	038 Move X0, 0xB3D000
	039 Move X0, [X0+1400]
	040 Call 0x1C17CF4
	041 Move X0, 0xB3D000
	042 Move X0, [X0+1408]
	043 Call 0x1C17CF4
	044 Move X0, 0xAF7000
	045 Move X0, [X0+440]
	046 Call 0x1C17CF4
	047 Move X0, 0xB3D000
	048 Move X0, [X0+1416]
	049 Call 0x1C17CF4
	050 Move X0, 0xB1D000
	051 Move X0, [X0+4064]
	052 Call 0x1C17CF4
	053 Move X0, 0xB3D000
	054 Move X0, [X0+1360]
	055 Call 0x1C17CF4
	056 Move X0, 0xAF7000
	057 Move X0, [X0+448]
	058 Call 0x1C17CF4
	059 Move X0, 0xB3D000
	060 Move X0, [X0+1368]
	061 Call 0x1C17CF4
	062 Move X0, 0xAF7000
	063 Move X0, [X0+464]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X19+835], W8
	067 Move X0, X20
	068 Move X1, X31
	069 Move [X31+64], X31
	070 Move [X31+72], X31
	071 Move [X31+80], X31
	072 Move [X31+32], X31
	073 Move [X31+40], X31
	074 Move [X31+48], X31
	075 Call Object.MemberwiseClone, X0
	076 Move X19, X0
	077 Compare X0, 0
	078 JumpIfEqual {90}
	079 Move X9, 0xB3D000
	080 Move X9, [X9+1376]
	081 Move X8, [X19]
	082 Move X1, [X9]
	083 Move W10, [X8+304]
	084 Move W9, [X1+304]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X8, [X8+200]
	087 Add X8, X8, X9
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X8, [X20+16]
	091 Compare X8, 0
	092 JumpIfEqual {155}
	093 Move X8, 0xB3D000
	094 Move X8, [X8+1368]
	095 Move X21, 0xB3D000
	096 Move X0, [X8]
	097 Move X21, [X21+1360]
	098 Call 0x1C17F10
	099 Move X1, [X21]
	100 Move X21, X0
	101 Call List`1<Object>..ctor, X0
	102 Compare X19, 0
	103 JumpIfEqual {293}
	104 Move [X19+16], X21
	105 Move X0, [X20+16]
	106 Compare X0, 0
	107 JumpIfEqual {293}
	108 Move X8, 0xB3D000
	109 Move X8, [X8+1416]
	110 Move X21, 0xB3D000
	111 Move X22, 0xB3D000
	112 Move X23, 0xB3D000
	113 Move X1, [X8]
	114 Move X21, [X21+1392]
	115 Move X22, [X22+1408]
	116 Move X23, [X23+1384]
	117 Add X8, X31, 8
	118 Call List`1<Object>.GetEnumerator, X0
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 Move X8, [X31+24]
	121 Move [X31+4], V0
	122 Move [X31+80], X8
	123 Move X1, [X21]
	124 Add X0, X31, 64
	125 Call Enumerator<Object>.MoveNext, X0
	126 Move TEMP, X0
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfNotEqual {152}
	130 Move X0, [X19+16]
	131 Compare X0, 0
	132 JumpIfEqual {287}
	133 Move W10, [X0+28]
	134 Move X1, [X31+80]
	135 Move X8, [X0+16]
	136 Move X9, [X22]
	137 Add W10, W10, 1
	138 Move [X0+28], W10
	139 Compare X8, 0
	140 JumpIfEqual {288}
	141 NotImplemented "Instruction LDRSW not yet implemented."
	142 Move W11, [X8+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Add W9, W10, 1
	145 Add X8, X8, X10
	146 Move [X0+24], W9
	147 Move [X8+32], X1
	148 Move X8, [X9+32]
	149 Move X8, [X8+192]
	150 Move X2, [X8+112]
	151 Call List`1<Object>.AddWithResize, X0, X1
	152 Move X1, [X23]
	153 Add X0, X31, 64
	154 Call Enumerator<Object>.Dispose, X0
	155 Move X28, 0xAF7000
	156 Move X27, 0xAF7000
	157 Move X26, 0xB1D000
	158 Move X24, 0xB1D000
	159 Move X25, 0xAF7000
	160 Move X23, 0xB1D000
	161 Move X28, [X28+464]
	162 Move X27, [X27+448]
	163 Move X8, [X20+24]
	164 Move X26, [X26+4064]
	165 Move X24, [X24+4048]
	166 Move X25, [X25+440]
	167 Move X23, [X23+4040]
	168 Compare X8, 0
	169 JumpIfEqual {220}
	170 Move X0, [X28]
	171 Call 0x1C17F10
	172 Move X1, [X27]
	173 Move X21, X0
	174 Call List`1<Object>..ctor, X0
	175 Compare X19, 0
	176 JumpIfEqual {293}
	177 Move [X19+24], X21
	178 Move X0, [X20+24]
	179 Compare X0, 0
	180 JumpIfEqual {293}
	181 Move X1, [X26]
	182 Add X8, X31, 8
	183 Call List`1<Object>.GetEnumerator, X0
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 Move X8, [X31+24]
	186 Move [X31+2], V0
	187 Move [X31+48], X8
	188 Move X1, [X24]
	189 Add X0, X31, 32
	190 Call Enumerator<Object>.MoveNext, X0
	191 Move TEMP, X0
	192 And TEMP, TEMP, 1
	193 Compare TEMP, 1
	194 JumpIfNotEqual {217}
	195 Move X0, [X19+24]
	196 Compare X0, 0
	197 JumpIfEqual {289}
	198 Move W10, [X0+28]
	199 Move X1, [X31+48]
	200 Move X8, [X0+16]
	201 Move X9, [X25]
	202 Add W10, W10, 1
	203 Move [X0+28], W10
	204 Compare X8, 0
	205 JumpIfEqual {290}
	206 NotImplemented "Instruction LDRSW not yet implemented."
	207 Move W11, [X8+24]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Add W9, W10, 1
	210 Add X8, X8, X10
	211 Move [X0+24], W9
	212 Move [X8+32], X1
	213 Move X8, [X9+32]
	214 Move X8, [X8+192]
	215 Move X2, [X8+112]
	216 Call List`1<Object>.AddWithResize, X0, X1
	217 Move X1, [X23]
	218 Add X0, X31, 32
	219 Call Enumerator<Object>.Dispose, X0
	220 Move X8, [X20+32]
	221 Compare X8, 0
	222 JumpIfEqual {273}
	223 Move X0, [X28]
	224 Call 0x1C17F10
	225 Move X1, [X27]
	226 Move X21, X0
	227 Call List`1<Object>..ctor, X0
	228 Compare X19, 0
	229 JumpIfEqual {293}
	230 Move [X19+32], X21
	231 Move X0, [X20+32]
	232 Compare X0, 0
	233 JumpIfEqual {293}
	234 Move X1, [X26]
	235 Add X8, X31, 8
	236 Call List`1<Object>.GetEnumerator, X0
	237 NotImplemented "Instruction LDUR not yet implemented."
	238 Move X8, [X31+24]
	239 Move [X31+2], V0
	240 Move [X31+48], X8
	241 Move X1, [X24]
	242 Add X0, X31, 32
	243 Call Enumerator<Object>.MoveNext, X0
	244 Move TEMP, X0
	245 And TEMP, TEMP, 1
	246 Compare TEMP, 1
	247 JumpIfNotEqual {270}
	248 Move X0, [X19+32]
	249 Compare X0, 0
	250 JumpIfEqual {291}
	251 Move W10, [X0+28]
	252 Move X1, [X31+48]
	253 Move X8, [X0+16]
	254 Move X9, [X25]
	255 Add W10, W10, 1
	256 Move [X0+28], W10
	257 Compare X8, 0
	258 JumpIfEqual {292}
	259 NotImplemented "Instruction LDRSW not yet implemented."
	260 Move W11, [X8+24]
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Add W9, W10, 1
	263 Add X8, X8, X10
	264 Move [X0+24], W9
	265 Move [X8+32], X1
	266 Move X8, [X9+32]
	267 Move X8, [X8+192]
	268 Move X2, [X8+112]
	269 Call List`1<Object>.AddWithResize, X0, X1
	270 Move X1, [X23]
	271 Add X0, X31, 32
	272 Call Enumerator<Object>.Dispose, X0
	273 Move X0, X19
	274 Move X20, [X31+176]
	275 Move X19, [X31+184]
	276 Move X22, [X31+160]
	277 Move X21, [X31+168]
	278 Move X24, [X31+144]
	279 Move X23, [X31+152]
	280 Move X26, [X31+128]
	281 Move X25, [X31+136]
	282 Move X28, [X31+112]
	283 Move X27, [X31+120]
	284 Move X30, [X31+96]
	285 Add X31, X31, 192
	286 Return X0
	287 Call 0x1C17F20
	288 Call 0x1C17F20
	289 Call 0x1C17F20
	290 Call 0x1C17F20
	291 Call 0x1C17F20
	292 Call 0x1C17F20
	293 Call 0x1C17F20
	294 Move X0, X19
	295 Call 0x1C181E0
	296 Move X21, X0
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Move X0, X21
	299 Call 0x3EB2AD0
	300 Move X20, [X0]
	301 Call 0x3EB2AE0
	302 Move X1, [X23]
	303 Add X0, X31, 32
	304 Call Enumerator<Object>.Dispose, X0
	305 Compare X20, 0
	306 JumpIfEqual {273}
	307 Move X0, X20
	308 Call 0x1C17F18
	309 Move X20, X31
	310 Move X21, X0
	311 Move X1, [X23]
	312 Add X0, X31, 32
	313 Call Enumerator<Object>.Dispose, X0
	314 Compare X20, 0
	315 JumpIfEqual {358}
	316 Move X0, X20
	317 Call 0x1C17F18
	318 Move X21, X0
	319 NotImplemented "Instruction CMP not yet implemented."
	320 Move X0, X21
	321 Call 0x3EB2AD0
	322 Move X22, [X0]
	323 Call 0x3EB2AE0
	324 Move X1, [X23]
	325 Add X0, X31, 32
	326 Call Enumerator<Object>.Dispose, X0
	327 Compare X22, 0
	328 JumpIfEqual {220}
	329 Move X22, X31
	330 Move X21, X0
	331 Move X1, [X23]
	332 Add X0, X31, 32
	333 Call Enumerator<Object>.Dispose, X0
	334 Compare X22, 0
	335 JumpIfEqual {358}
	336 Move X0, X22
	337 Call 0x1C17F18
	338 Move X21, X0
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move X0, X21
	341 Call 0x3EB2AD0
	342 Move X22, [X0]
	343 Call 0x3EB2AE0
	344 Move X1, [X23]
	345 Add X0, X31, 64
	346 Call Enumerator<Object>.Dispose, X0
	347 Compare X22, 0
	348 JumpIfEqual {155}
	349 Move X0, X22
	350 Call 0x1C17F18
	351 Move X22, X31
	352 Move X21, X0
	353 Move X1, [X23]
	354 Add X0, X31, 64
	355 Call Enumerator<Object>.Dispose, X0
	356 Compare X22, 0
	357 JumpIfNotEqual {360}
	358 Move X0, X21
	359 Call 0x1D2D690
	360 Move X0, X22
	361 Call 0x1C17F18
	362 Call 0x1991590

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x035FEBC0 MOV X20, X0
	0x035FEBC4 TBNZ X8, 0x0, 0x35FEBE8
	0x035FEBC8 ADRP X0, 0xB29000
	0x035FEBCC LDR X0, [X0 + 0xB98]
	0x035FEBD0 BL 0x1C16CF4
	0x035FEBD4 ADRP X0, 0xAF7000
	0x035FEBD8 LDR X0, [X0 + 0x570]
	0x035FEBDC BL 0x1C16CF4
	0x035FEBE0 MOVZ W8, 0x1
	0x035FEBE4 STRB W8, [X22 + 0x388]
	0x035FEBE8 AND X2, X21, 0x0
	0x035FEBEC ADD X3, X31, 0x1C
	0x035FEBF0 MOV X0, X20
	0x035FEBF4 MOV X1, X19
	0x035FEBF8 STR W31, [X31 + 0x1C]
	0x035FEBFC BL 0x3604A00
	0x035FEC00 TBZ X0, 0x0, 0x35FEC4C
	0x035FEC04 ADRP X8, 0xAF7000
	0x035FEC08 LDR X8, [X8 + 0x570]
	0x035FEC0C ADRP X19, 0xB29000
	0x035FEC10 LDR W20, [X31 + 0x1C]
	0x035FEC14 LDR X0, [X8]
	0x035FEC18 LDR W8, [X0 + 0xE0]
	0x035FEC1C LDR X19, [X19 + 0xB98]
	0x035FEC20 CBNZ W8, 0x35FEC28
	0x035FEC24 BL 0x1C16DFC
	0x035FEC28 SCVTF D0, W20
	0x035FEC2C MOV X0, X31
	0x035FEC30 BL 0x3394754
	0x035FEC34 LDR X2, [X19]
	0x035FEC38 MOV X1, X0
	0x035FEC3C ADD X0, X31, 0x0
	0x035FEC40 STP X31, X31, [X31]
	0x035FEC44 BL 0x243B364
	0x035FEC48 B 0x35FEC50
	0x035FEC4C STP X31, X31, [X31]
	0x035FEC50 LDP X0, X1, [X31]
	0x035FEC54 LDP X20, X19, [X31 + 0x30]
	0x035FEC58 LDP X22, X21, [X31 + 0x20]
	0x035FEC5C LDR X30, [X31 + 0x10]
	0x035FEC60 ADD X31, X31, 0x40
	0x035FEC64 RET
	0x035FEC68 STP X30, X23, [X31 - 0x30]!
	0x035FEC6C STP X22, X21, [X31 + 0x10]
	0x035FEC70 STP X20, X19, [X31 + 0x20]
	0x035FEC74 ADRP X23, 0xDE2000
	0x035FEC78 ADRP X22, 0xB1D000
	0x035FEC7C LDRB W8, [X23 + 0x384]
	0x035FEC80 LDR X22, [X22 + 0x8D0]
	0x035FEC84 MOV X19, X2
	0x035FEC88 MOV X20, X1
	0x035FEC8C MOV X21, X0
	0x035FEC90 TBNZ X8, 0x0, 0x35FECA8
	0x035FEC94 ADRP X0, 0xB1D000
	0x035FEC98 LDR X0, [X0 + 0x8D0]
	0x035FEC9C BL 0x1C16CF4
	0x035FECA0 MOVZ W8, 0x1
	0x035FECA4 STRB W8, [X23 + 0x384]
	0x035FECA8 LDR X0, [X22]
	0x035FECAC LDR X21, [X21 + 0x10]
	0x035FECB0 LDR W8, [X0 + 0xE0]
	0x035FECB4 CBNZ W8, 0x35FECBC
	0x035FECB8 BL 0x1C16DFC
	0x035FECBC CBZ X21, 0x35FECE8
	0x035FECC0 UBFM X8, X20, 0x20, 0x3F
	0x035FECC4 ADD W1, W8, 0x1
	0x035FECC8 SUB W8, W19, W8
	0x035FECCC MOV X0, X21
	0x035FECD0 LDP X20, X19, [X31 + 0x20]
	0x035FECD4 LDP X22, X21, [X31 + 0x10]
	0x035FECD8 SUB W2, W8, 0x2
	0x035FECDC MOV X3, X31
	0x035FECE0 LDP X30, X23, [X31], #0x30
	0x035FECE4 B 0x3228DE4
	0x035FECE8 BL 0x1C16F20
	0x035FECEC STR X30, [X31 - 0x30]!
	0x035FECF0 STP X22, X21, [X31 + 0x10]
	0x035FECF4 STP X20, X19, [X31 + 0x20]
	0x035FECF8 ADRP X21, 0xDE2000
	0x035FECFC ADRP X22, 0xB3C000
	0x035FED00 LDRB W8, [X21 + 0x39F]
	0x035FED04 LDR X22, [X22 + 0x628]
	0x035FED08 MOV X19, X1
	0x035FED0C MOV X20, X0
	0x035FED10 TBNZ X8, 0x0, 0x35FED28
	0x035FED14 ADRP X0, 0xB3C000
	0x035FED18 LDR X0, [X0 + 0x628]
	0x035FED1C BL 0x1C16CF4
	0x035FED20 MOVZ W8, 0x1
	0x035FED24 STRB W8, [X21 + 0x39F]
	0x035FED28 LDR X0, [X22]
	0x035FED2C BL 0x1C16F10
	0x035FED30 MOV X1, X31
	0x035FED34 MOV X21, X0
	0x035FED38 BL 0x33BDD8C
	0x035FED3C CBZ X21, 0x35FED58
	0x035FED40 STP X19, X20, [X21 + 0x10]
	0x035FED44 MOV X0, X21
	0x035FED48 LDP X20, X19, [X31 + 0x20]
	0x035FED4C LDP X22, X21, [X31 + 0x10]
	0x035FED50 LDR X30, [X31], #0x30
	0x035FED54 RET
	0x035FED58 BL 0x1C16F20
	0x035FED5C SUB X31, X31, 0x60
	0x035FED60 STR X30, [X31 + 0x20]
	0x035FED64 STP X24, X23, [X31 + 0x30]
	0x035FED68 STP X22, X21, [X31 + 0x40]
	0x035FED6C STP X20, X19, [X31 + 0x50]
	0x035FED70 ADRP X21, 0xDE2000
	0x035FED74 ADRP X20, 0xAF5000
	0x035FED78 LDRB W8, [X21 + 0x347]
	0x035FED7C LDR X20, [X20 + 0x8F0]
	0x035FED80 MOV X19, X0
	0x035FED84 TBNZ X8, 0x0, 0x35FEEA4
	0x035FED88 ADRP X0, 0xB3C000
	0x035FED8C LDR X0, [X0 + 0x630]
	0x035FED90 BL 0x1C16CF4
	0x035FED94 ADRP X0, 0xB3C000
	0x035FED98 LDR X0, [X0 + 0x638]
	0x035FED9C BL 0x1C16CF4
	0x035FEDA0 ADRP X0, 0xAF7000
	0x035FEDA4 LDR X0, [X0 + 0xC48]
	0x035FEDA8 BL 0x1C16CF4
	0x035FEDAC ADRP X0, 0xB29000
	0x035FEDB0 LDR X0, [X0 + 0xB88]
	0x035FEDB4 BL 0x1C16CF4
	0x035FEDB8 ADRP X0, 0xB29000
	0x035FEDBC LDR X0, [X0 + 0xB90]
	0x035FEDC0 BL 0x1C16CF4
	0x035FEDC4 ADRP X0, 0xAF5000
	0x035FEDC8 LDR X0, [X0 + 0x8F0]
	0x035FEDCC BL 0x1C16CF4
	0x035FEDD0 ADRP X0, 0xAF7000
	0x035FEDD4 LDR X0, [X0 + 0x570]
	0x035FEDD8 BL 0x1C16CF4
	0x035FEDDC ADRP X0, 0xB22000
	0x035FEDE0 LDR X0, [X0 + 0xFB8]
	0x035FEDE4 BL 0x1C16CF4
	0x035FEDE8 ADRP X0, 0xB3C000
	0x035FEDEC LDR X0, [X0 + 0x5C8]
	0x035FEDF0 BL 0x1C16CF4
	0x035FEDF4 ADRP X0, 0xB24000
	0x035FEDF8 LDR X0, [X0 + 0xC38]
	0x035FEDFC BL 0x1C16CF4
	0x035FEE00 ADRP X0, 0xB3C000
	0x035FEE04 LDR X0, [X0 + 0x5D0]
	0x035FEE08 BL 0x1C16CF4
	0x035FEE0C ADRP X0, 0xB3C000
	0x035FEE10 LDR X0, [X0 + 0x5D8]
	0x035FEE14 BL 0x1C16CF4
	0x035FEE18 ADRP X0, 0xB3C000
	0x035FEE1C LDR X0, [X0 + 0x5E0]
	0x035FEE20 BL 0x1C16CF4
	0x035FEE24 ADRP X0, 0xB3C000
	0x035FEE28 LDR X0, [X0 + 0x640]
	0x035FEE2C BL 0x1C16CF4
	0x035FEE30 ADRP X0, 0xB3C000
	0x035FEE34 LDR X0, [X0 + 0x5E8]
	0x035FEE38 BL 0x1C16CF4
	0x035FEE3C ADRP X0, 0xAF5000
	0x035FEE40 LDR X0, [X0 + 0x838]
	0x035FEE44 BL 0x1C16CF4
	0x035FEE48 ADRP X0, 0xB3C000
	0x035FEE4C LDR X0, [X0 + 0x5F0]
	0x035FEE50 BL 0x1C16CF4
	0x035FEE54 ADRP X0, 0xB3C000
	0x035FEE58 LDR X0, [X0 + 0x5F8]
	0x035FEE5C BL 0x1C16CF4
	0x035FEE60 ADRP X0, 0xB3C000
	0x035FEE64 LDR X0, [X0 + 0x600]
	0x035FEE68 BL 0x1C16CF4
	0x035FEE6C ADRP X0, 0xB3C000
	0x035FEE70 LDR X0, [X0 + 0x648]
	0x035FEE74 BL 0x1C16CF4
	0x035FEE78 ADRP X0, 0xB00000
	0x035FEE7C LDR X0, [X0 + 0xCD8]
	0x035FEE80 BL 0x1C16CF4
	0x035FEE84 ADRP X0, 0xB3C000
	0x035FEE88 LDR X0, [X0 + 0x650]
	0x035FEE8C BL 0x1C16CF4
	0x035FEE90 ADRP X0, 0xB3C000
	0x035FEE94 LDR X0, [X0 + 0x618]
	0x035FEE98 BL 0x1C16CF4
	0x035FEE9C MOVZ W8, 0x1
	0x035FEEA0 STRB W8, [X21 + 0x347]
	0x035FEEA4 ADRP X21, 0xAF5000
	0x035FEEA8 LDR X21, [X21 + 0x838]
	0x035FEEAC LDR X0, [X20]
	0x035FEEB0 STP X31, X31, [X31 + 0x10]
	0x035FEEB4 STR X31, [X31 + 0x28]
	0x035FEEB8 STR X31, [X31 + 0x8]
	0x035FEEBC BL 0x1C16F10
	0x035FEEC0 MOV X1, X31
	0x035FEEC4 MOV X20, X0
	0x035FEEC8 BL 0x3231AC4
	0x035FEECC LDRB W8, [X19 + 0x62]
	0x035FEED0 CBZ W8, 0x35FEF00
	0x035FEED4 CBZ X20, 0x35FF4C4
	0x035FEED8 ADRP X8, 0xB3C000
	0x035FEEDC LDR X8, [X8 + 0x5D0]
	0x035FEEE0 MOV X0, X20
	0x035FEEE4 MOV X2, X31
	0x035FEEE8 LDR X1, [X8]
	0x035FEEEC BL 0x32333E0
	0x035FEEF0 LDR X1, [X21]
	0x035FEEF4 MOV X0, X20
	0x035FEEF8 MOV X2, X31
	0x035FEEFC BL 0x32333E0
	0x035FEF00 LDRB W8, [X19 + 0x63]
	0x035FEF04 CBZ W8, 0x35FEF34
	0x035FEF08 CBZ X20, 0x35FF4C4
	0x035FEF0C ADRP X8, 0xB3C000
	0x035FEF10 LDR X8, [X8 + 0x5F8]
	0x035FEF14 MOV X0, X20
	0x035FEF18 MOV X2, X31
	0x035FEF1C LDR X1, [X8]
	0x035FEF20 BL 0x32333E0
	0x035FEF24 LDR X1, [X21]
	0x035FEF28 MOV X0, X20
	0x035FEF2C MOV X2, X31
	0x035FEF30 BL 0x32333E0
	0x035FEF34 LDRB W8, [X19 + 0x64]
	0x035FEF38 CBZ W8, 0x35FEF68
	0x035FEF3C CBZ X20, 0x35FF4C4
	0x035FEF40 ADRP X8, 0xB3C000
	0x035FEF44 LDR X8, [X8 + 0x618]
	0x035FEF48 MOV X0, X20
	0x035FEF4C MOV X2, X31
	0x035FEF50 LDR X1, [X8]
	0x035FEF54 BL 0x32333E0
	0x035FEF58 LDR X1, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDE3000
	007 Move W8, [X21+836]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0xB3D000
	015 Move X0, [X0+1376]
	016 Call 0x1C17CF4
	017 Move X0, 0xB3D000
	018 Move X0, [X0+1424]
	019 Call 0x1C17CF4
	020 Move X0, 0xB3D000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0xB3D000
	024 Move X0, [X0+1440]
	025 Call 0x1C17CF4
	026 Move X0, 0xB2A000
	027 Move X0, [X0+2952]
	028 Call 0x1C17CF4
	029 Move X0, 0xAF8000
	030 Move X0, [X0+1392]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+836], W8
	034 Compare X20, 0
	035 JumpIfEqual {263}
	036 Move X8, 0xB3D000
	037 Move X8, [X8+1376]
	038 Move X9, [X20]
	039 Move X8, [X8]
	040 Move W11, [X9+304]
	041 Move W10, [X8+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X9, [X9+200]
	044 Add X9, X9, X10
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Compare X22, 0
	049 JumpIfEqual {270}
	050 Move W8, [X19+40]
	051 Move W9, [X22+40]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CSET not yet implemented."
	056 Xor W9, W10, W9
	057 Move TEMP, X9
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {263}
	061 Compare W8, 0
	062 JumpIfEqual {80}
	063 Move X8, 0xAF8000
	064 Move X8, [X8+1392]
	065 Move X20, [X19+48]
	066 Move X21, [X22+48]
	067 Move X0, [X8]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X21
	074 Move X2, X31
	075 Call TimeSpan.op_Inequality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {263}
	080 Move W8, [X19+56]
	081 Move W9, [X22+56]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CSET not yet implemented."
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CSET not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W8, [X19+64]
	088 Move W9, [X22+64]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSET not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CSET not yet implemented."
	093 Xor W9, W10, W9
	094 Move TEMP, X9
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfEqual {263}
	098 Compare W8, 0
	099 JumpIfEqual {117}
	100 Move X8, 0xAF8000
	101 Move X8, [X8+1392]
	102 Move X20, [X19+72]
	103 Move X21, [X22+72]
	104 Move X0, [X8]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X20
	110 Move X1, X21
	111 Move X2, X31
	112 Call TimeSpan.op_Inequality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfEqual {263}
	117 Move W8, [X19+80]
	118 Move W9, [X22+80]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction CSET not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction CSET not yet implemented."
	123 Xor W9, W10, W9
	124 Move TEMP, X9
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {263}
	128 Compare W8, 0
	129 JumpIfEqual {147}
	130 Move X8, 0xAF8000
	131 Move X8, [X8+1392]
	132 Move X20, [X19+88]
	133 Move X21, [X22+88]
	134 Move X0, [X8]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X20
	140 Move X1, X21
	141 Move X2, X31
	142 Call TimeSpan.op_Inequality, X0, X1
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfEqual {263}
	147 Move W8, [X19+96]
	148 Move W9, [X22+96]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 NotImplemented "Instruction CSET not yet implemented."
	151 NotImplemented "Instruction CMP not yet implemented."
	152 NotImplemented "Instruction CSET not yet implemented."
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move W8, [X19+97]
	155 Move W9, [X22+97]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 NotImplemented "Instruction CSET not yet implemented."
	158 NotImplemented "Instruction CMP not yet implemented."
	159 NotImplemented "Instruction CSET not yet implemented."
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move W8, [X19+98]
	162 Move W9, [X22+98]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 NotImplemented "Instruction CSET not yet implemented."
	165 NotImplemented "Instruction CMP not yet implemented."
	166 NotImplemented "Instruction CSET not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W8, [X19+99]
	169 Move W9, [X22+99]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 NotImplemented "Instruction CSET not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 NotImplemented "Instruction CSET not yet implemented."
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move W8, [X19+100]
	176 Move W9, [X22+100]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 NotImplemented "Instruction CSET not yet implemented."
	179 NotImplemented "Instruction CMP not yet implemented."
	180 NotImplemented "Instruction CSET not yet implemented."
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W8, [X19+101]
	183 Move W9, [X22+101]
	184 NotImplemented "Instruction CMP not yet implemented."
	185 NotImplemented "Instruction CSET not yet implemented."
	186 NotImplemented "Instruction CMP not yet implemented."
	187 NotImplemented "Instruction CSET not yet implemented."
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move W8, [X19+102]
	190 Move W9, [X22+102]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 NotImplemented "Instruction CSET not yet implemented."
	193 NotImplemented "Instruction CMP not yet implemented."
	194 NotImplemented "Instruction CSET not yet implemented."
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move W8, [X19+103]
	197 Move W9, [X22+103]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CSET not yet implemented."
	200 NotImplemented "Instruction CMP not yet implemented."
	201 NotImplemented "Instruction CSET not yet implemented."
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move W8, [X19+104]
	204 Move W9, [X22+104]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 NotImplemented "Instruction CSET not yet implemented."
	207 NotImplemented "Instruction CMP not yet implemented."
	208 NotImplemented "Instruction CSET not yet implemented."
	209 Xor W9, W10, W9
	210 Move TEMP, X9
	211 And TEMP, TEMP, 1
	212 Compare TEMP, 1
	213 JumpIfEqual {263}
	214 Compare W8, 0
	215 JumpIfEqual {233}
	216 Move X8, 0xAF8000
	217 Move X8, [X8+1392]
	218 Move X20, [X19+112]
	219 Move X21, [X22+112]
	220 Move X0, [X8]
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {225}
	224 Call 0x1C17DFC
	225 Move X0, X20
	226 Move X1, X21
	227 Move X2, X31
	228 Call TimeSpan.op_Inequality, X0, X1
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfEqual {263}
	233 Move X8, 0xB3D000
	234 Move X0, [X19+16]
	235 Move X1, [X22+16]
	236 Move X8, [X8+1424]
	237 Move X2, [X8]
	238 Call 0x21A2DF4, X0, X1
	239 Move TEMP, X0
	240 And TEMP, TEMP, 1
	241 Compare TEMP, 1
	242 JumpIfNotEqual {263}
	243 Move X20, 0xB3D000
	244 Move X0, [X19+24]
	245 Move X1, [X22+24]
	246 Move X20, [X20+1432]
	247 Move X2, [X20]
	248 Call 0x21A2DF4, X0, X1
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {263}
	253 Move X0, [X19+32]
	254 Move X1, [X22+32]
	255 Move X2, [X20]
	256 Move X20, [X31+32]
	257 Move X19, [X31+40]
	258 Move X22, [X31+16]
	259 Move X21, [X31+24]
	260 Move X30, [X31+48]
	261 Call 0x21A2DF4, X0, X1
	262 Return X0
	263 Move X20, [X31+32]
	264 Move X19, [X31+40]
	265 Move X22, [X31+16]
	266 Move X21, [X31+24]
	267 Move W0, W31
	268 Move X30, [X31+48]
	269 Return X0
	270 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x035FEF5C MOV X0, X20
	0x035FEF60 MOV X2, X31
	0x035FEF64 BL 0x32333E0
	0x035FEF68 LDRB W8, [X19 + 0x67]
	0x035FEF6C CBZ W8, 0x35FEF9C
	0x035FEF70 CBZ X20, 0x35FF4C4
	0x035FEF74 ADRP X8, 0xB3C000
	0x035FEF78 LDR X8, [X8 + 0x5F0]
	0x035FEF7C MOV X0, X20
	0x035FEF80 MOV X2, X31
	0x035FEF84 LDR X1, [X8]
	0x035FEF88 BL 0x32333E0
	0x035FEF8C LDR X1, [X21]
	0x035FEF90 MOV X0, X20
	0x035FEF94 MOV X2, X31
	0x035FEF98 BL 0x32333E0
	0x035FEF9C LDRB W8, [X19 + 0x60]
	0x035FEFA0 CBZ W8, 0x35FEFD0
	0x035FEFA4 CBZ X20, 0x35FF4C4
	0x035FEFA8 ADRP X8, 0xB3C000
	0x035FEFAC LDR X8, [X8 + 0x5C8]
	0x035FEFB0 MOV X0, X20
	0x035FEFB4 MOV X2, X31
	0x035FEFB8 LDR X1, [X8]
	0x035FEFBC BL 0x32333E0
	0x035FEFC0 LDR X1, [X21]
	0x035FEFC4 MOV X0, X20
	0x035FEFC8 MOV X2, X31
	0x035FEFCC BL 0x32333E0
	0x035FEFD0 LDRB W8, [X19 + 0x66]
	0x035FEFD4 CBZ W8, 0x35FF004
	0x035FEFD8 CBZ X20, 0x35FF4C4
	0x035FEFDC ADRP X8, 0xB3C000
	0x035FEFE0 LDR X8, [X8 + 0x600]
	0x035FEFE4 MOV X0, X20
	0x035FEFE8 MOV X2, X31
	0x035FEFEC LDR X1, [X8]
	0x035FEFF0 BL 0x32333E0
	0x035FEFF4 LDR X1, [X21]
	0x035FEFF8 MOV X0, X20
	0x035FEFFC MOV X2, X31
	0x035FF000 BL 0x32333E0
	0x035FF004 LDRB W8, [X19 + 0x61]
	0x035FF008 CBZ W8, 0x35FF088
	0x035FF00C CBZ X20, 0x35FF4C4
	0x035FF010 ADRP X8, 0xB3B000
	0x035FF014 LDR X8, [X8 + 0x5D8]
	0x035FF018 MOV X0, X20
	0x035FF01C MOV X2, X31
	0x035FF020 LDR X1, [X8]
	0x035FF024 BL 0x32333E0
	0x035FF028 LDR X8, [X19 + 0x18]
	0x035FF02C CBZ X8, 0x35FF078
	0x035FF030 ADRP X8, 0xB23000
	0x035FF034 LDR X8, [X8 + 0xC38]
	0x035FF038 MOV X0, X20
	0x035FF03C MOV X2, X31
	0x035FF040 LDR X1, [X8]
	0x035FF044 BL 0x32333E0
	0x035FF048 ADRP X8, 0xB3B000
	0x035FF04C LDR X0, [X19 + 0x18]
	0x035FF050 LDR X8, [X8 + 0x638]
	0x035FF054 MOV X1, X20
	0x035FF058 LDR X2, [X8]
	0x035FF05C BL 0x21A21A8
	0x035FF060 ADRP X8, 0xAFF000
	0x035FF064 LDR X8, [X8 + 0xCD8]
	0x035FF068 MOV X0, X20
	0x035FF06C MOV X2, X31
	0x035FF070 LDR X1, [X8]
	0x035FF074 BL 0x32333E0
	0x035FF078 LDR X1, [X21]
	0x035FF07C MOV X0, X20
	0x035FF080 MOV X2, X31
	0x035FF084 BL 0x32333E0
	0x035FF088 ADRP X24, 0xB28000
	0x035FF08C ADRP X23, 0xAF6000
	0x035FF090 ADRP X22, 0xAF6000
	0x035FF094 LDRB W8, [X19 + 0x28]
	0x035FF098 LDR X24, [X24 + 0xB90]
	0x035FF09C LDR X23, [X23 + 0x570]
	0x035FF0A0 LDR X22, [X22 + 0xC48]
	0x035FF0A4 CBZ W8, 0x35FF148
	0x035FF0A8 CBZ X20, 0x35FF4C4
	0x035FF0AC ADRP X8, 0xB3B000
	0x035FF0B0 LDR X8, [X8 + 0x650]
	0x035FF0B4 MOV X0, X20
	0x035FF0B8 MOV X2, X31
	0x035FF0BC LDR X1, [X8]
	0x035FF0C0 BL 0x32333E0
	0x035FF0C4 LDUR V0, [X19 + 0x28]
	0x035FF0C8 LDR X1, [X24]
	0x035FF0CC ADD X0, X31, 0x10
	0x035FF0D0 STR V0, [X31 + 0x1]
	0x035FF0D4 BL 0x243B37C
	0x035FF0D8 LDR X8, [X23]
	0x035FF0DC STR X0, [X31 + 0x28]
	0x035FF0E0 LDR W9, [X8 + 0xE0]
	0x035FF0E4 CBNZ W9, 0x35FF0F0
	0x035FF0E8 MOV X0, X8
	0x035FF0EC BL 0x1C16DFC
	0x035FF0F0 ADD X0, X31, 0x28
	0x035FF0F4 MOV X1, X31
	0x035FF0F8 BL 0x3394234
	0x035FF0FC LDR X0, [X22]
	0x035FF100 STR D0, [X31 + 0x8]
	0x035FF104 LDR W8, [X0 + 0xE0]
	0x035FF108 CBNZ W8, 0x35FF110
	0x035FF10C BL 0x1C16DFC
	0x035FF110 MOV X0, X31
	0x035FF114 BL 0x3338524
	0x035FF118 MOV X1, X0
	0x035FF11C ADD X0, X31, 0x8
	0x035FF120 MOV X2, X31
	0x035FF124 BL 0x33662E0
	0x035FF128 MOV X1, X0
	0x035FF12C MOV X0, X20
	0x035FF130 MOV X2, X31
	0x035FF134 BL 0x32333E0
	0x035FF138 LDR X1, [X21]
	0x035FF13C MOV X0, X20
	0x035FF140 MOV X2, X31
	0x035FF144 BL 0x32333E0
	0x035FF148 LDUR V0, [X19 + 0x68]
	0x035FF14C UNIMPLEMENTED
	0x035FF150 STR V0, [X31 + 0x1]
	0x035FF154 CBZ W8, 0x35FF1F8
	0x035FF158 CBZ X20, 0x35FF4C4
	0x035FF15C ADRP X8, 0xB3B000
	0x035FF160 LDR X8, [X8 + 0x640]
	0x035FF164 MOV X0, X20
	0x035FF168 MOV X2, X31
	0x035FF16C LDR X1, [X8]
	0x035FF170 BL 0x32333E0
	0x035FF174 LDUR V0, [X19 + 0x68]
	0x035FF178 LDR X1, [X24]
	0x035FF17C ADD X0, X31, 0x10
	0x035FF180 STR V0, [X31 + 0x1]
	0x035FF184 BL 0x243B37C
	0x035FF188 LDR X8, [X23]
	0x035FF18C STR X0, [X31 + 0x28]
	0x035FF190 LDR W9, [X8 + 0xE0]
	0x035FF194 CBNZ W9, 0x35FF1A0
	0x035FF198 MOV X0, X8
	0x035FF19C BL 0x1C16DFC
	0x035FF1A0 ADD X0, X31, 0x28
	0x035FF1A4 MOV X1, X31
	0x035FF1A8 BL 0x3394234
	0x035FF1AC LDR X0, [X22]
	0x035FF1B0 STR D0, [X31 + 0x8]
	0x035FF1B4 LDR W8, [X0 + 0xE0]
	0x035FF1B8 CBNZ W8, 0x35FF1C0
	0x035FF1BC BL 0x1C16DFC
	0x035FF1C0 MOV X0, X31
	0x035FF1C4 BL 0x3338524
	0x035FF1C8 MOV X1, X0
	0x035FF1CC ADD X0, X31, 0x8
	0x035FF1D0 MOV X2, X31
	0x035FF1D4 BL 0x33662E0
	0x035FF1D8 MOV X1, X0
	0x035FF1DC MOV X0, X20
	0x035FF1E0 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], X29
	003 Move [X31+56], X30
	004 Move [X31+64], X28
	005 Move [X31+72], X27
	006 Move [X31+80], X26
	007 Move [X31+88], X25
	008 Move [X31+96], X24
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X22, 0xDE3000
	015 Move X21, 0xB3D000
	016 Move X25, 0xB3D000
	017 Move X20, 0xAF6000
	018 Move W8, [X22+837]
	019 Move X21, [X21+1448]
	020 Move X25, [X25+1456]
	021 Move X20, [X20+2904]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0xAF6000
	028 Move X0, [X0+2904]
	029 Call 0x1C17CF4
	030 Move X0, 0xB3D000
	031 Move X0, [X0+1448]
	032 Call 0x1C17CF4
	033 Move X0, 0xB3D000
	034 Move X0, [X0+1464]
	035 Call 0x1C17CF4
	036 Move X0, 0xB3D000
	037 Move X0, [X0+1456]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X22+837], W8
	041 Move [X31+28], W31
	042 Move X0, [X19+16]
	043 Move X1, [X21]
	044 Move X21, 0xB3D000
	045 Move X21, [X21+1464]
	046 Call 0x21EBCDC, X0
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 Move X1, [X25]
	049 Move [X31+24], W0
	050 Add X0, X31, 32
	051 Move [X31+2], V0
	052 Call Nullable`1<TimeSpan>.GetHashCode, X0
	053 Move W9, [X19+56]
	054 Move X8, [X20]
	055 Move [X31+20], W0
	056 Move [X31+28], W9
	057 Move W9, [X8+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X8
	061 Call 0x1C17DFC
	062 Add X0, X31, 28
	063 Move X1, X31
	064 Call Boolean.GetHashCode, X0
	065 Move V0, [X19+4]
	066 Move X1, [X25]
	067 Move [X31+16], W0
	068 Add X0, X31, 32
	069 Move [X31+2], V0
	070 Call Nullable`1<TimeSpan>.GetHashCode, X0
	071 Move V0, [X19+5]
	072 Move X1, [X25]
	073 Move [X31+12], W0
	074 Add X0, X31, 32
	075 Move [X31+2], V0
	076 Call Nullable`1<TimeSpan>.GetHashCode, X0
	077 Move W8, [X19+96]
	078 Move [X31+8], W0
	079 Add X0, X31, 28
	080 Move X1, X31
	081 Move [X31+28], W8
	082 Call Boolean.GetHashCode, X0
	083 Move X8, [X19+24]
	084 Move X1, [X21]
	085 Move [X31+4], W0
	086 Move X0, X8
	087 Call 0x21EBCDC, X0
	088 Move W8, [X19+97]
	089 Move W26, W0
	090 Add X0, X31, 28
	091 Move X1, X31
	092 Move [X31+28], W8
	093 Call Boolean.GetHashCode, X0
	094 Move W8, [X19+98]
	095 Move W27, W0
	096 Add X0, X31, 28
	097 Move X1, X31
	098 Move [X31+28], W8
	099 Call Boolean.GetHashCode, X0
	100 Move W8, [X19+99]
	101 Move W28, W0
	102 Add X0, X31, 28
	103 Move X1, X31
	104 Move [X31+28], W8
	105 Call Boolean.GetHashCode, X0
	106 Move W8, [X19+100]
	107 Move W29, W0
	108 Add X0, X31, 28
	109 Move X1, X31
	110 Move [X31+28], W8
	111 Call Boolean.GetHashCode, X0
	112 Move W8, [X19+101]
	113 Move W20, W0
	114 Add X0, X31, 28
	115 Move X1, X31
	116 Move [X31+28], W8
	117 Call Boolean.GetHashCode, X0
	118 Move X8, [X19+32]
	119 Move X1, [X21]
	120 Move W21, W0
	121 Move X0, X8
	122 Call 0x21EBCDC, X0
	123 Move W8, [X19+102]
	124 Move W22, W0
	125 Add X0, X31, 28
	126 Move X1, X31
	127 Move [X31+28], W8
	128 Call Boolean.GetHashCode, X0
	129 Move W8, [X19+103]
	130 Move W23, W0
	131 Add X0, X31, 28
	132 Move X1, X31
	133 Move [X31+28], W8
	134 Call Boolean.GetHashCode, X0
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 Move X1, [X25]
	137 Move W24, W0
	138 Add X0, X31, 32
	139 Move [X31+2], V0
	140 Call Nullable`1<TimeSpan>.GetHashCode, X0
	141 Move W10, [X31+20]
	142 Move W9, [X31+24]
	143 Move W8, 29
	144 NotImplemented "Instruction MADD not yet implemented."
	145 Move W10, [X31+16]
	146 NotImplemented "Instruction MADD not yet implemented."
	147 Move W10, [X31+12]
	148 NotImplemented "Instruction MADD not yet implemented."
	149 Move W10, [X31+8]
	150 NotImplemented "Instruction MADD not yet implemented."
	151 Move W10, [X31+4]
	152 NotImplemented "Instruction MADD not yet implemented."
	153 NotImplemented "Instruction MADD not yet implemented."
	154 NotImplemented "Instruction MADD not yet implemented."
	155 NotImplemented "Instruction MADD not yet implemented."
	156 NotImplemented "Instruction MADD not yet implemented."
	157 NotImplemented "Instruction MADD not yet implemented."
	158 NotImplemented "Instruction MADD not yet implemented."
	159 NotImplemented "Instruction MADD not yet implemented."
	160 NotImplemented "Instruction MADD not yet implemented."
	161 NotImplemented "Instruction MADD not yet implemented."
	162 Move X20, [X31+128]
	163 Move X19, [X31+136]
	164 Move X22, [X31+112]
	165 Move X21, [X31+120]
	166 Move X24, [X31+96]
	167 Move X23, [X31+104]
	168 Move X26, [X31+80]
	169 Move X25, [X31+88]
	170 Move X28, [X31+64]
	171 Move X27, [X31+72]
	172 Move X29, [X31+48]
	173 Move X30, [X31+56]
	174 NotImplemented "Instruction MADD not yet implemented."
	175 Move W9, 0x845D
	176 NotImplemented "Instruction MOVK not yet implemented."
	177 Add W0, W8, W9
	178 Add X31, X31, 144
	179 Return X0

Method: System.Boolean TryParse(System.String input, out System.Net.Http.Headers.CacheControlHeaderValue parsedValue)

Disassembly:
	0x035FF1E4 BL 0x32333E0
	0x035FF1E8 LDR X1, [X21]
	0x035FF1EC MOV X0, X20
	0x035FF1F0 MOV X2, X31
	0x035FF1F4 BL 0x32333E0
	0x035FF1F8 LDRB W8, [X19 + 0x38]
	0x035FF1FC CBZ W8, 0x35FF2C8
	0x035FF200 CBZ X20, 0x35FF4C4
	0x035FF204 ADRP X8, 0xB3B000
	0x035FF208 LDR X8, [X8 + 0x5E0]
	0x035FF20C MOV X0, X20
	0x035FF210 MOV X2, X31
	0x035FF214 LDR X1, [X8]
	0x035FF218 BL 0x32333E0
	0x035FF21C LDR V0, [X19 + 0x4]
	0x035FF220 UNIMPLEMENTED
	0x035FF224 STR V0, [X31 + 0x1]
	0x035FF228 CBZ W8, 0x35FF2B8
	0x035FF22C ADRP X8, 0xB21000
	0x035FF230 LDR X8, [X8 + 0xFB8]
	0x035FF234 MOV X0, X20
	0x035FF238 MOV X2, X31
	0x035FF23C LDR X1, [X8]
	0x035FF240 BL 0x32333E0
	0x035FF244 LDR V0, [X19 + 0x4]
	0x035FF248 LDR X1, [X24]
	0x035FF24C ADD X0, X31, 0x10
	0x035FF250 STR V0, [X31 + 0x1]
	0x035FF254 BL 0x243B37C
	0x035FF258 LDR X8, [X23]
	0x035FF25C STR X0, [X31 + 0x28]
	0x035FF260 LDR W9, [X8 + 0xE0]
	0x035FF264 CBNZ W9, 0x35FF270
	0x035FF268 MOV X0, X8
	0x035FF26C BL 0x1C16DFC
	0x035FF270 ADD X0, X31, 0x28
	0x035FF274 MOV X1, X31
	0x035FF278 BL 0x3394234
	0x035FF27C LDR X0, [X22]
	0x035FF280 STR D0, [X31 + 0x8]
	0x035FF284 LDR W8, [X0 + 0xE0]
	0x035FF288 CBNZ W8, 0x35FF290
	0x035FF28C BL 0x1C16DFC
	0x035FF290 MOV X0, X31
	0x035FF294 BL 0x3338524
	0x035FF298 MOV X1, X0
	0x035FF29C ADD X0, X31, 0x8
	0x035FF2A0 MOV X2, X31
	0x035FF2A4 BL 0x33662E0
	0x035FF2A8 MOV X1, X0
	0x035FF2AC MOV X0, X20
	0x035FF2B0 MOV X2, X31
	0x035FF2B4 BL 0x32333E0
	0x035FF2B8 LDR X1, [X21]
	0x035FF2BC MOV X0, X20
	0x035FF2C0 MOV X2, X31
	0x035FF2C4 BL 0x32333E0
	0x035FF2C8 LDR V0, [X19 + 0x5]
	0x035FF2CC UNIMPLEMENTED
	0x035FF2D0 STR V0, [X31 + 0x1]
	0x035FF2D4 CBZ W8, 0x35FF378
	0x035FF2D8 CBZ X20, 0x35FF4C4
	0x035FF2DC ADRP X8, 0xB3B000
	0x035FF2E0 LDR X8, [X8 + 0x648]
	0x035FF2E4 MOV X0, X20
	0x035FF2E8 MOV X2, X31
	0x035FF2EC LDR X1, [X8]
	0x035FF2F0 BL 0x32333E0
	0x035FF2F4 LDR V0, [X19 + 0x5]
	0x035FF2F8 LDR X1, [X24]
	0x035FF2FC ADD X0, X31, 0x10
	0x035FF300 STR V0, [X31 + 0x1]
	0x035FF304 BL 0x243B37C
	0x035FF308 LDR X8, [X23]
	0x035FF30C STR X0, [X31 + 0x28]
	0x035FF310 LDR W9, [X8 + 0xE0]
	0x035FF314 CBNZ W9, 0x35FF320
	0x035FF318 MOV X0, X8
	0x035FF31C BL 0x1C16DFC
	0x035FF320 ADD X0, X31, 0x28
	0x035FF324 MOV X1, X31
	0x035FF328 BL 0x3394234
	0x035FF32C LDR X0, [X22]
	0x035FF330 STR D0, [X31 + 0x8]
	0x035FF334 LDR W8, [X0 + 0xE0]
	0x035FF338 CBNZ W8, 0x35FF340
	0x035FF33C BL 0x1C16DFC
	0x035FF340 MOV X0, X31
	0x035FF344 BL 0x3338524
	0x035FF348 MOV X1, X0
	0x035FF34C ADD X0, X31, 0x8
	0x035FF350 MOV X2, X31
	0x035FF354 BL 0x33662E0
	0x035FF358 MOV X1, X0
	0x035FF35C MOV X0, X20
	0x035FF360 MOV X2, X31
	0x035FF364 BL 0x32333E0
	0x035FF368 LDR X1, [X21]
	0x035FF36C MOV X0, X20
	0x035FF370 MOV X2, X31
	0x035FF374 BL 0x32333E0
	0x035FF378 LDRB W8, [X19 + 0x65]
	0x035FF37C CBZ W8, 0x35FF3FC
	0x035FF380 CBZ X20, 0x35FF4C4
	0x035FF384 ADRP X8, 0xB3B000
	0x035FF388 LDR X8, [X8 + 0x5E8]
	0x035FF38C MOV X0, X20
	0x035FF390 MOV X2, X31
	0x035FF394 LDR X1, [X8]
	0x035FF398 BL 0x32333E0
	0x035FF39C LDR X8, [X19 + 0x20]
	0x035FF3A0 CBZ X8, 0x35FF3EC
	0x035FF3A4 ADRP X8, 0xB23000
	0x035FF3A8 LDR X8, [X8 + 0xC38]
	0x035FF3AC MOV X0, X20
	0x035FF3B0 MOV X2, X31
	0x035FF3B4 LDR X1, [X8]
	0x035FF3B8 BL 0x32333E0
	0x035FF3BC ADRP X8, 0xB3B000
	0x035FF3C0 LDR X0, [X19 + 0x20]
	0x035FF3C4 LDR X8, [X8 + 0x638]
	0x035FF3C8 MOV X1, X20
	0x035FF3CC LDR X2, [X8]
	0x035FF3D0 BL 0x21A21A8
	0x035FF3D4 ADRP X8, 0xAFF000
	0x035FF3D8 LDR X8, [X8 + 0xCD8]
	0x035FF3DC MOV X0, X20
	0x035FF3E0 MOV X2, X31
	0x035FF3E4 LDR X1, [X8]
	0x035FF3E8 BL 0x32333E0
	0x035FF3EC LDR X1, [X21]
	0x035FF3F0 MOV X0, X20
	0x035FF3F4 MOV X2, X31
	0x035FF3F8 BL 0x32333E0
	0x035FF3FC ADRP X8, 0xB3B000
	0x035FF400 LDR X8, [X8 + 0x630]
	0x035FF404 LDR X0, [X19 + 0x10]
	0x035FF408 MOV X1, X20
	0x035FF40C LDR X2, [X8]
	0x035FF410 BL 0x21A21A8
	0x035FF414 CBZ X20, 0x35FF4C4
	0x035FF418 MOV X0, X20
	0x035FF41C MOV X1, X31
	0x035FF420 BL 0x323260C
	0x035FF424 CMP W0, 0x3
	0x035FF428 B.LT 0x35FF49C
	0x035FF42C MOV X0, X20
	0x035FF430 MOV X1, X31
	0x035FF434 BL 0x323260C
	0x035FF438 SUB W1, W0, 0x2
	0x035FF43C MOV X0, X20
	0x035FF440 MOV X2, X31
	0x035FF444 BL 0x3232E88
	0x035FF448 AND W8, W0, 0xFFFF
	0x035FF44C CMP W8, 0x2C
	0x035FF450 B.NE 0x35FF49C
	0x035FF454 MOV X0, X20
	0x035FF458 MOV X1, X31
	0x035FF45C BL 0x323260C
	0x035FF460 SUB W1, W0, 0x1
	0x035FF464 MOV X0, X20
	0x035FF468 MOV X2, X31
	0x035FF46C BL 0x3232E88
	0x035FF470 AND W8, W0, 0xFFFF
	0x035FF474 CMP W8, 0x20
	0x035FF478 B.NE 0x35FF49C
	0x035FF47C MOV X0, X20
	0x035FF480 MOV X1, X31
	0x035FF484 BL 0x323260C
	0x035FF488 SUB W1, W0, 0x2
	0x035FF48C MOVZ W2, 0x2
	0x035FF490 MOV X0, X20
	0x035FF494 MOV X3, X31
	0x035FF498 BL 0x3233A34
	0x035FF49C LDR X8, [X20]
	0x035FF4A0 MOV X0, X20
	0x035FF4A4 LDP X9, X1, [X8 + 0x168]
	0x035FF4A8 BLR X9
	0x035FF4AC LDP X20, X19, [X31 + 0x50]
	0x035FF4B0 LDP X22, X21, [X31 + 0x40]
	0x035FF4B4 LDP X24, X23, [X31 + 0x30]
	0x035FF4B8 LDR X30, [X31 + 0x20]
	0x035FF4BC ADD X31, X31, 0x60
	0x035FF4C0 RET
	0x035FF4C4 BL 0x1C16F20
	0x035FF4C8 STP X30, X25, [X31 - 0x40]!
	0x035FF4CC STP X24, X23, [X31 + 0x10]
	0x035FF4D0 STP X22, X21, [X31 + 0x20]
	0x035FF4D4 STP X20, X19, [X31 + 0x30]
	0x035FF4D8 ADRP X24, 0xDE1000
	0x035FF4DC ADRP X25, 0xB3B000
	0x035FF4E0 ADRP X22, 0xB3B000
	0x035FF4E4 ADRP X23, 0xB3B000
	0x035FF4E8 LDRB W8, [X24 + 0x348]
	0x035FF4EC LDR X25, [X25 + 0x658]
	0x035FF4F0 LDR X22, [X22 + 0x660]
	0x035FF4F4 LDR X23, [X23 + 0x668]
	0x035FF4F8 MOV X19, X2
	0x035FF4FC MOV W20, W1
	0x035FF500 MOV X21, X0
	0x035FF504 TBNZ X8, 0x0, 0x35FF534
	0x035FF508 ADRP X0, 0xB3B000
	0x035FF50C LDR X0, [X0 + 0x660]
	0x035FF510 BL 0x1C16CF4
	0x035FF514 ADRP X0, 0xB3B000
	0x035FF518 LDR X0, [X0 + 0x668]
	0x035FF51C BL 0x1C16CF4
	0x035FF520 ADRP X0, 0xB3B000
	0x035FF524 LDR X0, [X0 + 0x658]
	0x035FF528 BL 0x1C16CF4
	0x035FF52C MOVZ W8, 0x1
	0x035FF530 STRB W8, [X24 + 0x348]
	0x035FF534 LDR X0, [X25]
	0x035FF538 BL 0x1C16F10
	0x035FF53C LDR X2, [X22]
	0x035FF540 MOV X1, X31
	0x035FF544 MOV X3, X31
	0x035FF548 MOV X22, X0
	0x035FF54C BL 0x2B47CB4
	0x035FF550 LDR X4, [X23]
	0x035FF554 MOV X0, X21
	0x035FF558 MOV W1, W20
	0x035FF55C MOV X2, X22
	0x035FF560 MOV X3, X19
	0x035FF564 LDP X20, X19, [X31 + 0x30]
	0x035FF568 LDP X22, X21, [X31 + 0x20]
	0x035FF56C LDP X24, X23, [X31 + 0x10]
	0x035FF570 LDP X30, X25, [X31], #0x40
	0x035FF574 B 0x21A2910
	0x035FF578 STP X30, X23, [X31 - 0x30]!
	0x035FF57C STP X22, X21, [X31 + 0x10]
	0x035FF580 STP X20, X19, [X31 + 0x20]
	0x035FF584 ADRP X22, 0xDE1000
	0x035FF588 LDRB W8, [X22 + 0x349]
	0x035FF58C MOV X19, X2
	0x035FF590 MOV X20, X1
	0x035FF594 MOV X21, X0
	0x035FF598 TBNZ X8, 0x0, 0x35FF5B0
	0x035FF59C ADRP X0, 0xB1C000
	0x035FF5A0 LDR X0, [X0 + 0x8D0]
	0x035FF5A4 BL 0x1C16CF4
	0x035FF5A8 MOVZ W8, 0x1
	0x035FF5AC STRB W8, [X22 + 0x349]
	0x035FF5B0 CBZ X21, 0x35FF640
	0x035FF5B4 ADRP X23, 0xB1C000
	0x035FF5B8 LDR X23, [X23 + 0x8D0]
	0x035FF5BC MOV X0, X21
	0x035FF5C0 MOV W1, W31
	0x035FF5C4 BL 0x35FCF70
	0x035FF5C8 STR X0, [X19]
	0x035FF5CC STR W1, [X19 + 0x8]
	0x035FF5D0 MOV X22, X0
	0x035FF5D4 LDR X0, [X23]
	0x035FF5D8 LDR W8, [X0 + 0xE0]
	0x035FF5DC CBNZ W8, 0x35FF5E4
	0x035FF5E0 BL 0x1C16DFC
	0x035FF5E4 CMP W22, 0x2
	0x035FF5E8 B.NE 0x35FF628
	0x035FF5EC LDR X1, [X19]
	0x035FF5F0 LDR W2, [X19 + 0x8]
	0x035FF5F4 MOV X0, X21
	0x035FF5F8 BL 0x35FD280
	0x035FF5FC STR X0, [X20]
	0x035FF600 CBZ X0, 0x35FF640
	0x035FF604 LDR W8, [X0 + 0x10]
	0x035FF608 CBNZ W8, 0x35FF610
	0x035FF60C STR X31, [X20]
	0x035FF610 MOV X0, X21
	0x035FF614 MOV W1, W31
	0x035FF618 BL 0x35FCF70
	0x035FF61C STR X0, [X19]
	0x035FF620 STR W1, [X19 + 0x8]
	0x035FF624 B 0x35FF62C
	0x035FF628 STR X31, [X20]
	0x035FF62C LDP X20, X19, [X31 + 0x20]
	0x035FF630 LDP X22, X21, [X31 + 0x10]
	0x035FF634 MOVZ W0, 0x1
	0x035FF638 LDP X30, X23, [X31], #0x30
	0x035FF63C RET
	0x035FF640 BL 0x1C16F20
	0x035FF644 MOV X1, X31
	0x035FF648 B 0x33BDD8C
	0x035FF64C SUB X31, X31, 0x90
	0x035FF650 STR X30, [X31 + 0x40]
	0x035FF654 STP X26, X25, [X31 + 0x50]
	0x035FF658 STP X24, X23, [X31 + 0x60]
	0x035FF65C STP X22, X21, [X31 + 0x70]
	0x035FF660 STP X20, X19, [X31 + 0x80]
	0x035FF664 ADRP X21, 0xDE1000
	0x035FF668 LDRB W8, [X21 + 0x34A]
	0x035FF66C MOV X20, X1
	0x035FF670 MOV X19, X0
	0x035FF674 TBNZ X8, 0x0, 0x35FF6C8
	0x035FF678 ADRP X0, 0xB3B000
	0x035FF67C LDR X0, [X0 + 0x568]
	0x035FF680 BL 0x1C16CF4
	0x035FF684 ADRP X0, 0xB3B000
	0x035FF688 LDR X0, [X0 + 0x570]
	0x035FF68C BL 0x1C16CF4
	0x035FF690 ADRP X0, 0xB3B000
	0x035FF694 LDR X0, [X0 + 0x578]
	0x035FF698 BL 0x1C16CF4
	0x035FF69C ADRP X0, 0xB3B000
	0x035FF6A0 LDR X0, [X0 + 0x5C0]
	0x035FF6A4 BL 0x1C16CF4
	0x035FF6A8 ADRP X0, 0xB3B000
	0x035FF6AC LDR X0, [X0 + 0x588]
	0x035FF6B0 BL 0x1C16CF4
	0x035FF6B4 ADRP X0, 0xB3B000
	0x035FF6B8 LDR X0, [X0 + 0x628]
	0x035FF6BC BL 0x1C16CF4
	0x035FF6C0 MOVZ W8, 0x1
	0x035FF6C4 STRB W8, [X21 + 0x34A]
	0x035FF6C8 MOV X0, X19
	0x035FF6CC MOV X1, X31
	0x035FF6D0 STP X31, X31, [X31 + 0x20]
	0x035FF6D4 STR X31, [X31 + 0x30]
	0x035FF6D8 BL 0x33BDD8C
	0x035FF6DC CBZ X20, 0x35FF7FC
	0x035FF6E0 LDR X8, [X20 + 0x10]
	0x035FF6E4 STR X8, [X19 + 0x10]
	0x035FF6E8 LDR X0, [X20 + 0x18]
	0x035FF6EC CBZ X0, 0x35FF7DC
	0x035FF6F0 ADRP X8, 0xB3B000
	0x035FF6F4 LDR X8, [X8 + 0x588]
	0x035FF6F8 ADRP X24, 0xB3B000
	0x035FF6FC LDR X24, [X24 + 0x570]
	0x035FF700 ADRP X25, 0xB3B000
	0x035FF704 LDR X1, [X8]
	0x035FF708 ADRP X26, 0xB3B000
	0x035FF70C ADRP X23, 0xB3B000
	0x035FF710 LDR X25, [X25 + 0x628]
	0x035FF714 LDR X26, [X26 + 0x5C0]
	0x035FF718 LDR X23, [X23 + 0x568]
	0x035FF71C ADD X8, X31, 0x8
	0x035FF720 BL 0x301CB58
	0x035FF724 LDUR V0, [X31 + 0x8]
	0x035FF728 LDR X8, [X31 + 0x18]
	0x035FF72C STR V0, [X31 + 0x2]
	0x035FF730 STR X8, [X31 + 0x30]
	0x035FF734 LDR X1, [X24]
	0x035FF738 ADD X0, X31, 0x20
	0x035FF73C BL 0x2BC4350
	0x035FF740 TBZ X0, 0x0, 0x35FF7D0
	0x035FF744 LDR X22, [X31 + 0x30]
	0x035FF748 MOV X0, X19
	0x035FF74C BL 0x35FF8B4
	0x035FF750 MOV X20, X0
	0x035FF754 LDR X0, [X25]
	0x035FF758 BL 0x1C16F10
	0x035FF75C MOV X21, X0
	0x035FF760 MOV X1, X22
	0x035FF764 BL 0x35FF92C
	0x035FF768 CBZ X20, 0x35FF7F8
	0x035FF76C LDR X8, [X20]
	0x035FF770 LDR X1, [X26]
	0x035FF774 LDRH W9, [X8 + 0x12E]
	0x035FF778 CBZ X9, 0x35FF79C
	0x035FF77C LDR X10, [X8 + 0xB0]
	0x035FF780 ADD X10, X10, 0x8
	0x035FF784 LDUR X11, [X10 - 0x8]
	0x035FF788 CMP X11, X1
	0x035FF78C B.EQ 0x35FF7AC
	0x035FF790 SUBS X9, X9, 0x1
	0x035FF794 ADD X10, X10, 0x10
	0x035FF798 B.NE 0x35FF784
	0x035FF79C MOVZ W2, 0x2
	0x035FF7A0 MOV X0, X20
	0x035FF7A4 BL 0x1C5C788
	0x035FF7A8 B 0x35FF7BC
	0x035FF7AC LDR W9, [X10]
	0x035FF7B0 ADD W9, W9, 0x2
	0x035FF7B4 ADD X8, X8, W9, 0x4, SXTW
	0x035FF7B8 ADD X0, X8, 0x138
	0x035FF7BC LDP X8, X2, [X0]
	0x035FF7C0 MOV X0, X20
	0x035FF7C4 MOV X1, X21
	0x035FF7C8 BLR X8
	0x035FF7CC B 0x35FF734
	0x035FF7D0 LDR X1, [X23]
	0x035FF7D4 ADD X0, X31, 0x20
	0x035FF7D8 BL 0x2BC434C
	0x035FF7DC LDP X20, X19, [X31 + 0x80]
	0x035FF7E0 LDP X22, X21, [X31 + 0x70]
	0x035FF7E4 LDP X24, X23, [X31 + 0x60]
	0x035FF7E8 LDP X26, X25, [X31 + 0x50]
	0x035FF7EC LDR X30, [X31 + 0x40]
	0x035FF7F0 ADD X31, X31, 0x90
	0x035FF7F4 RET
	0x035FF7F8 BL 0x1C16F20
	0x035FF7FC ADRP X0, 0xAF9000
	0x035FF800 LDR X0, [X0 + 0x528]
	0x035FF804 BL 0x1C16D08
	0x035FF808 BL 0x1C16F10
	0x035FF80C MOV X19, X0
	0x035FF810 ADRP X0, 0xAFF000
	0x035FF814 LDR X0, [X0 + 0x580]
	0x035FF818 BL 0x1C16D08
	0x035FF81C MOV X1, X0
	0x035FF820 MOV X0, X19
	0x035FF824 MOV X2, X31
	0x035FF828 BL 0x330E100
	0x035FF82C ADRP X0, 0xB3B000
	0x035FF830 LDR X0, [X0 + 0x670]
	0x035FF834 BL 0x1C16D08
	0x035FF838 MOV X1, X0
	0x035FF83C MOV X0, X19
	0x035FF840 BL 0x1C16DEC
	0x035FF844 B 0x35FF850
	0x035FF848 B 0x35FF850
	0x035FF84C B 0x35FF850
	0x035FF850 MOV X19, X0
	0x035FF854 CMP W1, 0x1
	0x035FF858 B.NE 0x35FF884
	0x035FF85C MOV X0, X19
	0x035FF860 BL 0x3EB1AD0
	0x035FF864 LDR X20, [X0]
	0x035FF868 BL 0x3EB1AE0
	0x035FF86C LDR X1, [X23]
	0x035FF870 ADD X0, X31, 0x20
	0x035FF874 BL 0x2BC434C
	0x035FF878 CBZ X20, 0x35FF7DC
	0x035FF87C MOV X0, X20
	0x035FF880 BL 0x1C16F18
	0x035FF884 MOV X20, X31
	0x035FF888 B 0x35FF890
	0x035FF88C MOV X19, X0
	0x035FF890 LDR X1, [X23]
	0x035FF894 ADD X0, X31, 0x20
	0x035FF898 BL 0x2BC434C
	0x035FF89C CBNZ X20, 0x35FF8A8
	0x035FF8A0 MOV X0, X19
	0x035FF8A4 BL 0x1D2C690
	0x035FF8A8 MOV X0, X20
	0x035FF8AC BL 0x1C16F18
	0x035FF8B0 BL 0x1990590
	0x035FF8B4 STR X30, [X31 - 0x20]!
	0x035FF8B8 STP X20, X19, [X31 + 0x10]
	0x035FF8BC ADRP X20, 0xDE1000
	0x035FF8C0 LDRB W8, [X20 + 0x34B]
	0x035FF8C4 MOV X19, X0
	0x035FF8C8 TBNZ X8, 0x0, 0x35FF8EC
	0x035FF8CC ADRP X0, 0xB3B000
	0x035FF8D0 LDR X0, [X0 + 0x550]
	0x035FF8D4 BL 0x1C16CF4
	0x035FF8D8 ADRP X0, 0xB3B000
	0x035FF8DC LDR X0, [X0 + 0x558]
	0x035FF8E0 BL 0x1C16CF4
	0x035FF8E4 MOVZ W8, 0x1
	0x035FF8E8 STRB W8, [X20 + 0x34B]
	0x035FF8EC LDR X20, [X19 + 0x18]
	0x035FF8F0 CBNZ X20, 0x35FF91C
	0x035FF8F4 ADRP X8, 0xB3B000
	0x035FF8F8 LDR X8, [X8 + 0x558]
	0x035FF8FC LDR X0, [X8]
	0x035FF900 BL 0x1C16F10
	0x035FF904 ADRP X8, 0xB3B000
	0x035FF908 LDR X8, [X8 + 0x550]
	0x035FF90C MOV X20, X0
	0x035FF910 LDR X1, [X8]
	0x035FF914 BL 0x301B7C4
	0x035FF918 STR X20, [X19 + 0x18]
	0x035FF91C MOV X0, X20
	0x035FF920 LDP X20, X19, [X31 + 0x10]
	0x035FF924 LDR X30, [X31], #0x20
	0x035FF928 RET
	0x035FF92C STR X30, [X31 - 0x20]!
	0x035FF930 STP X20, X19, [X31 + 0x10]
	0x035FF934 MOV X20, X1
	0x035FF938 MOV X1, X31
	0x035FF93C MOV X19, X0
	0x035FF940 BL 0x33BDD8C
	0x035FF944 CBZ X20, 0x35FF95C
	0x035FF948 LDR V0, [X20 + 0x1]
	0x035FF94C STR V0, [X19 + 0x1]
	0x035FF950 LDP X20, X19, [X31 + 0x10]
	0x035FF954 LDR X30, [X31], #0x20
	0x035FF958 RET
	0x035FF95C BL 0x1C16F20
	0x035FF960 STP X30, X21, [X31 - 0x20]!
	0x035FF964 STP X20, X19, [X31 + 0x10]
	0x035FF968 ADRP X20, 0xDE1000
	0x035FF96C ADRP X21, 0xB3B000
	0x035FF970 LDRB W8, [X20 + 0x34C]
	0x035FF974 LDR X21, [X21 + 0x678]
	0x035FF978 MOV X19, X0
	0x035FF97C TBNZ X8, 0x0, 0x35FF994
	0x035FF980 ADRP X0, 0xB3B000
	0x035FF984 LDR X0, [X0 + 0x678]
	0x035FF988 BL 0x1C16CF4
	0x035FF98C MOVZ W8, 0x1
	0x035FF990 STRB W8, [X20 + 0x34C]
	0x035FF994 LDR X0, [X21]
	0x035FF998 BL 0x1C16F10
	0x035FF99C MOV X1, X19
	0x035FF9A0 MOV X20, X0
	0x035FF9A4 BL 0x35FF64C
	0x035FF9A8 MOV X0, X20
	0x035FF9AC LDP X20, X19, [X31 + 0x10]
	0x035FF9B0 LDP X30, X21, [X31], #0x20
	0x035FF9B4 RET
	0x035FF9B8 STP X30, X21, [X31 - 0x20]!
	0x035FF9BC STP X20, X19, [X31 + 0x10]
	0x035FF9C0 ADRP X21, 0xDE1000
	0x035FF9C4 LDRB W8, [X21 + 0x34D]
	0x035FF9C8 MOV X20, X1
	0x035FF9CC MOV X19, X0
	0x035FF9D0 TBNZ X8, 0x0, 0x35FF9F4
	0x035FF9D4 ADRP X0, 0xB3B000
	0x035FF9D8 LDR X0, [X0 + 0x590]
	0x035FF9DC BL 0x1C16CF4
	0x035FF9E0 ADRP X0, 0xB3B000
	0x035FF9E4 LDR X0, [X0 + 0x678]
	0x035FF9E8 BL 0x1C16CF4
	0x035FF9EC MOVZ W8, 0x1
	0x035FF9F0 STRB W8, [X21 + 0x34D]
	0x035FF9F4 CBZ X20, 0x35FFA6C
	0x035FF9F8 ADRP X8, 0xB3B000
	0x035FF9FC LDR X8, [X8 + 0x678]
	0x035FFA00 LDR X9, [X20]
	0x035FFA04 LDR X8, [X8]
	0x035FFA08 LDRB W11, [X9 + 0x130]
	0x035FFA0C LDRB W10, [X8 + 0x130]
	0x035FFA10 CMP W11, W10
	0x035FFA14 B.CC 0x35FFA6C
	0x035FFA18 LDR X9, [X9 + 0xC8]
	0x035FFA1C ADD X9, X9, X10, 0x3, LSL
	0x035FFA20 LDUR X9, [X9 - 0x8]
	0x035FFA24 CMP X9, X8
	0x035FFA28 CSEL X20, X20, X31, EQ
	0x035FFA2C B.NE 0x35FFA6C
	0x035FFA30 CBZ X20, 0x35FFA7C
	0x035FFA34 LDR X0, [X20 + 0x10]
	0x035FFA38 LDR X1, [X19 + 0x10]
	0x035FFA3C MOVZ W2, 0x5
	0x035FFA40 MOV X3, X31
	0x035FFA44 BL 0x3226C60
	0x035FFA48 TBZ X0, 0x0, 0x35FFA6C
	0x035FFA4C ADRP X8, 0xB3B000
	0x035FFA50 LDR X0, [X20 + 0x18]
	0x035FFA54 LDR X1, [X19 + 0x18]
	0x035FFA58 LDR X8, [X8 + 0x590]
	0x035FFA5C LDP X20, X19, [X31 + 0x10]
	0x035FFA60 LDR X2, [X8]
	0x035FFA64 LDP X30, X21, [X31], #0x20
	0x035FFA68 B 0x21A1DF4
	0x035FFA6C LDP X20, X19, [X31 + 0x10]
	0x035FFA70 MOV W0, W31
	0x035FFA74 LDP X30, X21, [X31], #0x20
	0x035FFA78 RET
	0x035FFA7C BL 0x1C16F20
	0x035FFA80 STR X30, [X31 - 0x20]!
	0x035FFA84 STP X20, X19, [X31 + 0x10]
	0x035FFA88 ADRP X20, 0xDE1000
	0x035FFA8C LDRB W8, [X20 + 0x34E]
	0x035FFA90 MOV X19, X0
	0x035FFA94 TBNZ X8, 0x0, 0x35FFAAC
	0x035FFA98 ADRP X0, 0xB3B000
	0x035FFA9C LDR X0, [X0 + 0x5A8]
	0x035FFAA0 BL 0x1C16CF4
	0x035FFAA4 MOVZ W8, 0x1
	0x035FFAA8 STRB W8, [X20 + 0x34E]
	0x035FFAAC LDR X0, [X19 + 0x10]
	0x035FFAB0 CBZ X0, 0x35FFAF8
	0x035FFAB4 MOV X1, X31
	0x035FFAB8 BL 0x322B6E4
	0x035FFABC CBZ X0, 0x35FFAF8
	0x035FFAC0 LDR X8, [X0]
	0x035FFAC4 ADRP X20, 0xB3B000
	0x035FFAC8 LDP X9, X1, [X8 + 0x158]
	0x035FFACC LDR X20, [X20 + 0x5A8]
	0x035FFAD0 BLR X9
	0x035FFAD4 LDR X8, [X19 + 0x18]
	0x035FFAD8 LDR X1, [X20]
	0x035FFADC MOV W19, W0
	0x035FFAE0 MOV X0, X8
	0x035FFAE4 BL 0x21EACDC
	0x035FFAE8 EOR W0, W0, W19, 0x0
	0x035FFAEC LDP X20, X19, [X31 + 0x10]
	0x035FFAF0 LDR X30, [X31], #0x20
	0x035FFAF4 RET
	0x035FFAF8 BL 0x1C16F20
	0x035FFAFC STP X30, X21, [X31 - 0x20]!
	0x035FFB00 STP X20, X19, [X31 + 0x10]
	0x035FFB04 ADRP X20, 0xDE1000
	0x035FFB08 ADRP X21, 0xB3B000
	0x035FFB0C LDRB W8, [X20 + 0x34F]
	0x035FFB10 LDR X21, [X21 + 0x680]
	0x035FFB14 MOV X19, X0
	0x035FFB18 TBNZ X8, 0x0, 0x35FFB30

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0xDE2000
	015 Move W8, [X19+838]
	016 Move X20, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {81}
	022 Move X0, 0xB3C000
	023 Move X0, [X0+1376]
	024 Call 0x1C17CF4
	025 Move X0, 0xAFE000
	026 Move X0, [X0+2264]
	027 Call 0x1C17CF4
	028 Move X0, 0xAF8000
	029 Move X0, [X0+600]
	030 Call 0x1C17CF4
	031 Move X0, 0xB3C000
	032 Move X0, [X0+1472]
	033 Call 0x1C17CF4
	034 Move X0, 0xB1D000
	035 Move X0, [X0+2248]
	036 Call 0x1C17CF4
	037 Move X0, 0xB29000
	038 Move X0, [X0+2952]
	039 Call 0x1C17CF4
	040 Move X0, 0xB1D000
	041 Move X0, [X0+2256]
	042 Call 0x1C17CF4
	043 Move X0, 0xB3C000
	044 Move X0, [X0+1480]
	045 Call 0x1C17CF4
	046 Move X0, 0xB3C000
	047 Move X0, [X0+1488]
	048 Call 0x1C17CF4
	049 Move X0, 0xB3C000
	050 Move X0, [X0+1496]
	051 Call 0x1C17CF4
	052 Move X0, 0xB3C000
	053 Move X0, [X0+1504]
	054 Call 0x1C17CF4
	055 Move X0, 0xB3C000
	056 Move X0, [X0+1512]
	057 Call 0x1C17CF4
	058 Move X0, 0xB3C000
	059 Move X0, [X0+1520]
	060 Call 0x1C17CF4
	061 Move X0, 0xB3C000
	062 Move X0, [X0+1528]
	063 Call 0x1C17CF4
	064 Move X0, 0xB3C000
	065 Move X0, [X0+1536]
	066 Call 0x1C17CF4
	067 Move X0, 0xB3C000
	068 Move X0, [X0+1544]
	069 Call 0x1C17CF4
	070 Move X0, 0xB3C000
	071 Move X0, [X0+1552]
	072 Call 0x1C17CF4
	073 Move X0, 0xB3C000
	074 Move X0, [X0+1560]
	075 Call 0x1C17CF4
	076 Move X0, 0xB3C000
	077 Move X0, [X0+1568]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X19+838], W8
	081 Move W0, 1
	082 Move [X20], X31
	083 Compare X23, 0
	084 JumpIfEqual {598}
	085 Move [X31+16], X20
	086 Move X8, 0xB3C000
	087 Move X8, [X8+1376]
	088 Move X19, 0xB1D000
	089 Move X20, 0xB1D000
	090 Move X19, [X19+2248]
	091 Move X20, [X20+2256]
	092 Move X0, [X8]
	093 Call 0x1C17F10
	094 Move X1, X31
	095 Move X21, X0
	096 Call Object..ctor, X0
	097 Move X0, [X19]
	098 Call 0x1C17F10
	099 Move X1, X31
	100 Move X22, X0
	101 Call Object..ctor, X0
	102 Move [X22+16], X23
	103 Move X0, X22
	104 Move W1, W31
	105 Call Lexer.Scan, X0, X1
	106 Move X27, X0
	107 Move X0, [X20]
	108 Move X25, X1
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction BFM not yet implemented."
	115 Move X0, X22
	116 Move X1, X27
	117 Move X2, X28
	118 Call Lexer.GetStringValue, X0, X1
	119 Move X29, X0
	120 Call <PrivateImplementationDetails>.ComputeStringHash, X0
	121 Move W8, 0xF51F
	122 NotImplemented "Instruction MOVK not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move W8, 0xBD1E
	125 NotImplemented "Instruction MOVK not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W8, 0x1B3A
	128 NotImplemented "Instruction MOVK not yet implemented."
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move W8, 0x9480
	131 NotImplemented "Instruction MOVK not yet implemented."
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move W8, 0xBD1E
	134 NotImplemented "Instruction MOVK not yet implemented."
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X8, 0xB3C000
	137 Move X8, [X8+1488]
	138 Move X0, X29
	139 Move X2, X31
	140 Move X1, [X8]
	141 Call String.op_Equality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {494}
	146 Compare X21, 0
	147 JumpIfEqual {612}
	148 Move W8, 1
	149 Move [X21+98], W8
	150 Move W8, 0x8CAB
	151 NotImplemented "Instruction MOVK not yet implemented."
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move W8, 0xFE28
	154 NotImplemented "Instruction MOVK not yet implemented."
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move W8, 0x8CAB
	157 NotImplemented "Instruction MOVK not yet implemented."
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move W8, 0xA231
	160 NotImplemented "Instruction MOVK not yet implemented."
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X8, 0xB3C000
	163 Move X8, [X8+1536]
	164 Move X0, X29
	165 Move X2, X31
	166 Move X1, [X8]
	167 Call String.op_Equality, X0, X1
	168 Move TEMP, X0
	169 And TEMP, TEMP, 1
	170 Compare TEMP, 1
	171 JumpIfNotEqual {494}
	172 Compare X21, 0
	173 JumpIfEqual {612}
	174 Move W8, 1
	175 Move [X21+102], W8
	176 Move W8, 0xD349
	177 NotImplemented "Instruction MOVK not yet implemented."
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move W8, 3340
	180 NotImplemented "Instruction MOVK not yet implemented."
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W8, 0xF51F
	183 NotImplemented "Instruction MOVK not yet implemented."
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X8, 0xB3C000
	186 Move X8, [X8+1544]
	187 Move W8, 0x7A16
	188 NotImplemented "Instruction MOVK not yet implemented."
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move W8, 0x9380
	191 NotImplemented "Instruction MOVK not yet implemented."
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move W8, 0xE635
	194 NotImplemented "Instruction MOVK not yet implemented."
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move X8, 0xB3C000
	197 Move X8, [X8+1496]
	198 Move X8, 0xB3C000
	199 Move X8, [X8+1552]
	200 Move X8, 0xB3C000
	201 Move X8, [X8+1568]
	202 Move X1, [X8]
	203 Move X0, X29
	204 Move X2, X31
	205 Call String.op_Equality, X0, X1
	206 Move TEMP, X0
	207 And TEMP, TEMP, 1
	208 Compare TEMP, 1
	209 JumpIfNotEqual {494}
	210 Move X0, X22
	211 Move W1, W31
	212 Call Lexer.Scan, X0, X1
	213 Move X8, [X20]
	214 Move X19, X0
	215 Move W9, [X8+224]
	216 Compare W9, 0
	217 JumpIfNotEqual {220}
	218 Move X0, X8
	219 Call 0x1C17DFC
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X0, X22
	222 Move W1, W31
	223 Call Lexer.Scan, X0, X1
	224 Move X19, X0
	225 Move X0, [X20]
	226 Move X25, X1
	227 Move W8, [X0+224]
	228 Compare W8, 0
	229 JumpIfNotEqual {231}
	230 Call 0x1C17DFC
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move X8, [X31+24]
	233 Move X0, X22
	234 Move X1, X19
	235 NotImplemented "Instruction BFM not yet implemented."
	236 Move X2, X8
	237 Move X25, X8
	238 Call Lexer.TryGetTimeSpanValue, X0, X1
	239 And W31, W0, 255
	240 Compare X29, 0
	241 JumpIfEqual {612}
	242 Move W8, [X29+16]
	243 Move [X31+24], X25
	244 NotImplemented "Instruction CMP not yet implemented."
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Compare X21, 0
	247 JumpIfEqual {612}
	248 Move [X21+40], X0
	249 Move [X21+48], X1
	250 Move X8, 0xB3C000
	251 Move X8, [X8+1480]
	252 Move X0, X29
	253 Move X2, X31
	254 Move X1, [X8]
	255 Call String.op_Equality, X0, X1
	256 Move TEMP, X0
	257 And TEMP, TEMP, 1
	258 Compare TEMP, 1
	259 JumpIfNotEqual {494}
	260 Compare X21, 0
	261 JumpIfEqual {612}
	262 Move W8, 1
	263 Move [X21+96], W8
	264 Move X8, 0xB3C000
	265 Move X8, [X8+1528]
	266 Move X0, X29
	267 Move X2, X31
	268 Move X1, [X8]
	269 Call String.op_Equality, X0, X1
	270 Move TEMP, X0
	271 And TEMP, TEMP, 1
	272 Compare TEMP, 1
	273 JumpIfNotEqual {494}
	274 Compare X21, 0
	275 JumpIfEqual {612}
	276 Move W8, 1
	277 Move [X21+99], W8
	278 Move X8, 0xB3C000
	279 Move X8, [X8+1504]
	280 Move X0, X29
	281 Move X2, X31
	282 Move X1, [X8]
	283 Call String.op_Equality, X0, X1
	284 Move TEMP, X0
	285 And TEMP, TEMP, 1
	286 Compare TEMP, 1
	287 JumpIfNotEqual {494}
	288 Compare X21, 0
	289 JumpIfEqual {612}
	290 Move W8, 1
	291 Move X0, X22
	292 Move W1, W31
	293 Move [X21+56], W8
	294 Call Lexer.Scan, X0, X1
	295 Move X8, [X20]
	296 Move X25, X0
	297 Move W9, [X8+224]
	298 Compare W9, 0
	299 JumpIfNotEqual {302}
	300 Move X0, X8
	301 Call 0x1C17DFC
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move X0, X22
	304 Move W1, W31
	305 Call Lexer.Scan, X0, X1
	306 Move X19, X0
	307 Move X0, [X20]
	308 Move X25, X1
	309 Move W8, [X0+224]
	310 Compare W8, 0
	311 JumpIfNotEqual {313}
	312 Call 0x1C17DFC
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Move X8, [X31]
	315 Move X0, X22
	316 Move X1, X19
	317 NotImplemented "Instruction BFM not yet implemented."
	318 Move X2, X8
	319 Move X25, X8
	320 Call Lexer.TryGetTimeSpanValue, X0, X1
	321 And W31, W0, 255
	322 Move [X31], X25
	323 Move [X21+64], X0
	324 Move [X21+72], X1
	325 Move X8, 0xB3C000
	326 Move X8, [X8+1512]
	327 Move X1, [X8]
	328 Move X0, X29
	329 Move X2, X31
	330 Call String.op_Equality, X0, X1
	331 Move TEMP, X0
	332 And TEMP, TEMP, 1
	333 Compare TEMP, 1
	334 JumpIfNotEqual {494}
	335 Compare X29, 0
	336 JumpIfEqual {612}
	337 Compare X21, 0
	338 JumpIfEqual {612}
	339 Move W8, [X29+16]
	340 Move W9, 101
	341 Move X0, X22
	342 Move W1, W31
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Move W8, 97
	345 NotImplemented "Instruction CSEL not yet implemented."
	346 Move W9, 1
	347 Move [X21], W9
	348 Call Lexer.Scan, X0, X1
	349 Move X8, [X20]
	350 Move X25, X0
	351 Move W9, [X8+224]
	352 Compare W9, 0
	353 JumpIfNotEqual {356}
	354 Move X0, X8
	355 Call 0x1C17DFC
	356 NotImplemented "Instruction CMP not yet implemented."
	357 Move X0, X22
	358 Move W1, W31
	359 Call Lexer.Scan, X0, X1
	360 Move X19, X0
	361 Move X0, [X20]
	362 Move X25, X1
	363 Move W8, [X0+224]
	364 Compare W8, 0
	365 JumpIfNotEqual {367}
	366 Call 0x1C17DFC
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move X2, [X31+8]
	369 Move X0, X22
	370 Move X1, X19
	371 NotImplemented "Instruction BFM not yet implemented."
	372 Move [X31+8], X2
	373 Call Lexer.GetQuotedStringValue, X0, X1
	374 Compare X0, 0
	375 JumpIfEqual {612}
	376 Move W1, 44
	377 Move W2, W31
	378 Move X3, X31
	379 Call String.Split, X0, X1, X2
	380 Compare X0, 0
	381 JumpIfEqual {612}
	382 Move W8, [X0+24]
	383 Move X25, X0
	384 NotImplemented "Instruction CMP not yet implemented."
	385 Move W26, W31
	386 NotImplemented "Instruction CMP not yet implemented."
	387 Add X8, X25, W26
	388 Move X19, [X8+32]
	389 Move X8, 0xAFE000
	390 Move X8, [X8+2264]
	391 Move W1, 2
	392 Move X0, [X8]
	393 Call 0x1C17D6C
	394 Compare X0, 0
	395 JumpIfEqual {612}
	396 Move W8, [X0+24]
	397 Move X1, X0
	398 Compare W8, 0
	399 JumpIfEqual {613}
	400 NotImplemented "Instruction CMP not yet implemented."
	401 Move W8, 9
	402 NotImplemented "Instruction STRH not yet implemented."
	403 Move W8, 32
	404 NotImplemented "Instruction STRH not yet implemented."
	405 Compare X19, 0
	406 JumpIfEqual {612}
	407 Move X0, X19
	408 Move X2, X31
	409 Call String.Trim, X0, X1
	410 Move W8, [X29+16]
	411 Move X27, X0
	412 NotImplemented "Instruction CMP not yet implemented."
	413 Move X0, X21
	414 Call CacheControlHeaderValue.get_PrivateHeaders, X0
	415 Compare X0, 0
	416 JumpIfEqual {612}
	417 Move X8, [X0]
	418 Move X10, 0xAF8000
	419 Move X19, X0
	420 NotImplemented "Instruction LDRH not yet implemented."
	421 Move X10, [X10+600]
	422 Move X1, [X10]
	423 Compare X9, 0
	424 JumpIfEqual {451}
	425 Move X10, [X8+176]
	426 Add X10, X10, 8
	427 NotImplemented "Instruction LDUR not yet implemented."
	428 NotImplemented "Instruction CMP not yet implemented."
	429 Subtract X9, X9, 1
	430 Add X10, X10, 16
	431 Move W8, 1
	432 Move X0, X21
	433 Move [X21+97], W8
	434 Call CacheControlHeaderValue.get_NoCacheHeaders, X0
	435 Compare X0, 0
	436 JumpIfEqual {612}
	437 Move X8, [X0]
	438 Move X10, 0xAF8000
	439 Move X19, X0
	440 NotImplemented "Instruction LDRH not yet implemented."
	441 Move X10, [X10+600]
	442 Move X1, [X10]
	443 Compare X9, 0
	444 JumpIfEqual {451}
	445 Move X10, [X8+176]
	446 Add X10, X10, 8
	447 NotImplemented "Instruction LDUR not yet implemented."
	448 NotImplemented "Instruction CMP not yet implemented."
	449 Subtract X9, X9, 1
	450 Add X10, X10, 16
	451 Move W2, 2
	452 Move X0, X19
	453 Call 0x1C5D788
	454 Move W9, [X10]
	455 Add W9, W9, 2
	456 Add X8, X8, W9
	457 Add X0, X8, 312
	458 Move X8, [X0]
	459 Move X2, [X0+8]
	460 Move X0, X19
	461 Move X1, X27
	462 NotImplemented "Instruction BLR not yet implemented."
	463 Move W8, [X25+24]
	464 Add W26, W26, 1
	465 NotImplemented "Instruction CMP not yet implemented."
	466 Move X8, 0xB3C000
	467 Move X8, [X8+1560]
	468 Move X0, X29
	469 Move X2, X31
	470 Move X1, [X8]
	471 Call String.op_Equality, X0, X1
	472 Move TEMP, X0
	473 And TEMP, TEMP, 1
	474 Compare TEMP, 1
	475 JumpIfNotEqual {494}
	476 Compare X21, 0
	477 JumpIfEqual {612}
	478 Move W8, 1
	479 Move [X21+100], W8
	480 Move X8, 0xB3C000
	481 Move X8, [X8+1520]
	482 Move X0, X29
	483 Move X2, X31
	484 Move X1, [X8]
	485 Call String.op_Equality, X0, X1
	486 Move TEMP, X0
	487 And TEMP, TEMP, 1
	488 Compare TEMP, 1
	489 JumpIfNotEqual {494}
	490 Compare X21, 0
	491 JumpIfEqual {612}
	492 Move W8, 1
	493 Move [X21+103], W8
	494 And X8, X25, 0
	495 And X9, X24, 0
	496 Or X24, X8, X9
	497 Move X0, X22
	498 Move X1, X27
	499 Move X2, X24
	500 Call Lexer.GetStringValue, X0, X1
	501 Move X29, X0
	502 Move X0, X22
	503 Move W1, W31
	504 Call Lexer.Scan, X0, X1
	505 Move X8, [X20]
	506 Move X27, X0
	507 Move W9, [X8+224]
	508 Compare W9, 0
	509 JumpIfNotEqual {512}
	510 Move X0, X8
	511 Call 0x1C17DFC
	512 NotImplemented "Instruction CMP not yet implemented."
	513 Move X0, X22
	514 Move W1, W31
	515 Call Lexer.Scan, X0, X1
	516 Move X25, X0
	517 Move X0, [X20]
	518 Move X19, X1
	519 Move W8, [X0+224]
	520 Compare W8, 0
	521 JumpIfNotEqual {523}
	522 Call 0x1C17DFC
	523 And X8, X25, 0xFFFFFFFF
	524 NotImplemented "Instruction CMP not yet implemented."
	525 NotImplemented "Instruction BFM not yet implemented."
	526 Move X0, X22
	527 Move X1, X25
	528 Move X2, X23
	529 Call Lexer.GetStringValue, X0, X1
	530 Move X26, X0
	531 Move X26, X31
	532 Move X25, X27
	533 Compare X21, 0
	534 JumpIfEqual {612}
	535 Move X0, X21
	536 Call CacheControlHeaderValue.get_Extensions, X0
	537 Move X19, X0
	538 Move X0, X29
	539 Move X1, X26
	540 Call NameValueHeaderValue.Create, X0, X1
	541 Compare X19, 0
	542 JumpIfEqual {612}
	543 Move X8, [X19]
	544 Move X10, 0xB3C000
	545 Move X29, X0
	546 NotImplemented "Instruction LDRH not yet implemented."
	547 Move X10, [X10+1472]
	548 Move X1, [X10]
	549 Compare X9, 0
	550 JumpIfEqual {557}
	551 Move X10, [X8+176]
	552 Add X10, X10, 8
	553 NotImplemented "Instruction LDUR not yet implemented."
	554 NotImplemented "Instruction CMP not yet implemented."
	555 Subtract X9, X9, 1
	556 Add X10, X10, 16
	557 Move W2, 2
	558 Move X0, X19
	559 Call 0x1C5D788
	560 Move W9, [X10]
	561 Add W9, W9, 2
	562 Add X8, X8, W9
	563 Add X0, X8, 312
	564 Move X8, [X0]
	565 Move X2, [X0+8]
	566 Move X0, X19
	567 Move X1, X29
	568 NotImplemented "Instruction BLR not yet implemented."
	569 NotImplemented "Instruction CMP not yet implemented."
	570 Move X0, X22
	571 Move W1, W31
	572 Call Lexer.Scan, X0, X1
	573 Move X25, X0
	574 Move X0, [X20]
	575 Move W8, [X0+224]
	576 Compare W8, 0
	577 JumpIfNotEqual {579}
	578 Call 0x1C17DFC
	579 NotImplemented "Instruction CMP not yet implemented."
	580 Compare X21, 0
	581 JumpIfEqual {612}
	582 Move [X21+104], X0
	583 Move [X21+112], X1
	584 Compare X21, 0
	585 JumpIfEqual {612}
	586 Move [X21+80], X0
	587 Move [X21+88], X1
	588 Move X0, [X20]
	589 Move W8, [X0+224]
	590 Compare W8, 0
	591 JumpIfNotEqual {593}
	592 Call 0x1C17DFC
	593 NotImplemented "Instruction CMP not yet implemented."
	594 Move X8, [X31+16]
	595 Move W0, 1
	596 Move [X8], X21
	597 Move W0, W31
	598 Move X20, [X31+112]
	599 Move X19, [X31+120]
	600 Move X22, [X31+96]
	601 Move X21, [X31+104]
	602 Move X24, [X31+80]
	603 Move X23, [X31+88]
	604 Move X26, [X31+64]
	605 Move X25, [X31+72]
	606 Move X28, [X31+48]
	607 Move X27, [X31+56]
	608 Move X29, [X31+32]
	609 Move X30, [X31+40]
	610 Add X31, X31, 128
	611 Return X0
	612 Call 0x1C17F20
	613 Call 0x1C17F28

Method: System.String ToString()

Disassembly:
	0x035FFD5C LDR X1, [X20]
	0x035FFD60 MOV X22, X0
	0x035FFD64 BL 0x301B7C4
	0x035FFD68 STR X24, [X31 + 0x8]
	0x035FFD6C STR X31, [X24]
	0x035FFD70 CBZ X21, 0x35FFF84
	0x035FFD74 ADRP X28, 0xB1C000
	0x035FFD78 ADRP X20, 0xB3B000
	0x035FFD7C LDR X28, [X28 + 0x8D0]
	0x035FFD80 LDR X20, [X20 + 0x580]
	0x035FFD84 MOV X0, X21
	0x035FFD88 MOV W1, W31
	0x035FFD8C BL 0x35FCF70
	0x035FFD90 MOV X25, X0
	0x035FFD94 LDR X0, [X28]
	0x035FFD98 MOV X26, X1
	0x035FFD9C LDR W8, [X0 + 0xE0]
	0x035FFDA0 CBNZ W8, 0x35FFDA8
	0x035FFDA4 BL 0x1C16DFC
	0x035FFDA8 CMP W25, 0x2
	0x035FFDAC B.NE 0x35FFF2C
	0x035FFDB0 MOV X0, X21
	0x035FFDB4 MOV W1, W31
	0x035FFDB8 BL 0x35FCF70
	0x035FFDBC STR X0, [X19]
	0x035FFDC0 STR W1, [X19 + 0x8]
	0x035FFDC4 MOV X27, X0
	0x035FFDC8 LDR X0, [X28]
	0x035FFDCC LDR W8, [X0 + 0xE0]
	0x035FFDD0 CBNZ W8, 0x35FFDD8
	0x035FFDD4 BL 0x1C16DFC
	0x035FFDD8 CMP W27, 0x4
	0x035FFDDC B.NE 0x35FFE64
	0x035FFDE0 MOV X0, X21
	0x035FFDE4 MOV W1, W31
	0x035FFDE8 BL 0x35FCF70
	0x035FFDEC STR X0, [X19]
	0x035FFDF0 STR W1, [X19 + 0x8]
	0x035FFDF4 MOV X27, X0
	0x035FFDF8 LDR X0, [X28]
	0x035FFDFC LDR W8, [X0 + 0xE0]
	0x035FFE00 CBNZ W8, 0x35FFE08
	0x035FFE04 BL 0x1C16DFC
	0x035FFE08 CMP W27, 0x2
	0x035FFE0C B.EQ 0x35FFE2C
	0x035FFE10 LDR X0, [X28]
	0x035FFE14 LDR X27, [X19]
	0x035FFE18 LDR W8, [X0 + 0xE0]
	0x035FFE1C CBNZ W8, 0x35FFE24
	0x035FFE20 BL 0x1C16DFC
	0x035FFE24 CMP W27, 0x3
	0x035FFE28 B.NE 0x35FFF7C
	0x035FFE2C LDR W8, [X19 + 0x8]
	0x035FFE30 LDR X1, [X19]
	0x035FFE34 AND X9, X24, 0x0
	0x035FFE38 MOV X0, X21
	0x035FFE3C ORR X24, X9, X8, 0x0
	0x035FFE40 MOV X2, X24
	0x035FFE44 BL 0x35FD280
	0x035FFE48 MOV X27, X0
	0x035FFE4C MOV X0, X21
	0x035FFE50 MOV W1, W31
	0x035FFE54 BL 0x35FCF70
	0x035FFE58 STR X0, [X19]
	0x035FFE5C STR W1, [X19 + 0x8]
	0x035FFE60 B 0x35FFE68
	0x035FFE64 MOV X27, X31
	0x035FFE68 ADRP X8, 0xB3B000
	0x035FFE6C LDR X8, [X8 + 0x628]
	0x035FFE70 AND X29, X26, 0x0
	0x035FFE74 LDR X0, [X8]
	0x035FFE78 BL 0x1C16F10
	0x035FFE7C MOV X1, X31
	0x035FFE80 MOV X26, X0
	0x035FFE84 BL 0x33BDD8C
	0x035FFE88 AND X8, X23, 0x0
	0x035FFE8C ORR X23, X29, X8, 0x0
	0x035FFE90 MOV X0, X21
	0x035FFE94 MOV X1, X25
	0x035FFE98 MOV X2, X23
	0x035FFE9C BL 0x35FD280
	0x035FFEA0 CBZ X26, 0x35FFF84
	0x035FFEA4 STP X27, X0, [X26 + 0x10]
	0x035FFEA8 CBZ X22, 0x35FFF84
	0x035FFEAC LDR W10, [X22 + 0x1C]
	0x035FFEB0 LDR X8, [X22 + 0x10]
	0x035FFEB4 LDR X9, [X20]
	0x035FFEB8 ADD W10, W10, 0x1
	0x035FFEBC STR W10, [X22 + 0x1C]
	0x035FFEC0 CBZ X8, 0x35FFF84
	0x035FFEC4 LDRSW X10, [X22 + 0x18]
	0x035FFEC8 LDR W11, [X8 + 0x18]
	0x035FFECC CMP W10, W11
	0x035FFED0 B.CS 0x35FFEE8
	0x035FFED4 ADD W9, W10, 0x1
	0x035FFED8 ADD X8, X8, X10, 0x3, LSL
	0x035FFEDC STR W9, [X22 + 0x18]
	0x035FFEE0 STR X26, [X8 + 0x20]
	0x035FFEE4 B 0x35FFF00
	0x035FFEE8 LDR X8, [X9 + 0x20]
	0x035FFEEC MOV X0, X22
	0x035FFEF0 MOV X1, X26
	0x035FFEF4 LDR X8, [X8 + 0xC0]
	0x035FFEF8 LDR X2, [X8 + 0x70]
	0x035FFEFC BL 0x301BF90
	0x035FFF00 LDR X0, [X28]
	0x035FFF04 LDR X25, [X19]
	0x035FFF08 LDR W8, [X0 + 0xE0]
	0x035FFF0C CBNZ W8, 0x35FFF14
	0x035FFF10 BL 0x1C16DFC
	0x035FFF14 CMP W25, 0x5
	0x035FFF18 B.EQ 0x35FFD84
	0x035FFF1C LDR X8, [X31 + 0x8]
	0x035FFF20 MOVZ W0, 0x1
	0x035FFF24 STR X22, [X8]
	0x035FFF28 B 0x35FFF5C
	0x035FFF2C LDR X8, [X28]
	0x035FFF30 LDR W9, [X8 + 0xE0]
	0x035FFF34 CBNZ W9, 0x35FFF44
	0x035FFF38 MOV X0, X8
	0x035FFF3C BL 0x1C16DFC
	0x035FFF40 LDR X8, [X28]
	0x035FFF44 LDR X8, [X8 + 0xB8]
	0x035FFF48 MOV W0, W31
	0x035FFF4C LDR W9, [X8 + 0x8]
	0x035FFF50 LDR X8, [X8]
	0x035FFF54 STR W9, [X19 + 0x8]
	0x035FFF58 STR X8, [X19]
	0x035FFF5C LDP X20, X19, [X31 + 0x60]
	0x035FFF60 LDP X22, X21, [X31 + 0x50]
	0x035FFF64 LDP X24, X23, [X31 + 0x40]
	0x035FFF68 LDP X26, X25, [X31 + 0x30]
	0x035FFF6C LDP X28, X27, [X31 + 0x20]
	0x035FFF70 LDP X29, X30, [X31 + 0x10]
	0x035FFF74 ADD X31, X31, 0x70
	0x035FFF78 RET
	0x035FFF7C MOV W0, W31
	0x035FFF80 B 0x35FFF5C
	0x035FFF84 BL 0x1C16F20
	0x035FFF88 STP X30, X21, [X31 - 0x20]!
	0x035FFF8C STP X20, X19, [X31 + 0x10]
	0x035FFF90 ADRP X20, 0xDE1000
	0x035FFF94 ADRP X21, 0xB23000
	0x035FFF98 LDRB W8, [X20 + 0x351]
	0x035FFF9C LDR X21, [X21 + 0x308]
	0x035FFFA0 MOV X19, X0
	0x035FFFA4 TBNZ X8, 0x0, 0x35FFFBC
	0x035FFFA8 ADRP X0, 0xB23000
	0x035FFFAC LDR X0, [X0 + 0x308]
	0x035FFFB0 BL 0x1C16CF4
	0x035FFFB4 MOVZ W8, 0x1
	0x035FFFB8 STRB W8, [X20 + 0x351]
	0x035FFFBC LDR X8, [X21]
	0x035FFFC0 MOV X0, X19
	0x035FFFC4 MOV X1, X31
	0x035FFFC8 STR X8, [X19 + 0x10]
	0x035FFFCC LDP X20, X19, [X31 + 0x10]
	0x035FFFD0 LDP X30, X21, [X31], #0x20
	0x035FFFD4 B 0x33BDD8C
	0x035FFFD8 LDP X8, X1, [X0 + 0x18]
	0x035FFFDC MOV X0, X8
	0x035FFFE0 RET
	0x035FFFE4 STP X1, X2, [X0 + 0x18]
	0x035FFFE8 RET
	0x035FFFEC LDP X8, X1, [X0 + 0x28]
	0x035FFFF0 MOV X0, X8
	0x035FFFF4 RET
	0x035FFFF8 STP X1, X2, [X0 + 0x28]
	0x035FFFFC RET
	0x03600000 LDP X8, X1, [X0 + 0x38]
	0x03600004 MOV X0, X8
	0x03600008 RET
	0x0360000C STP X1, X2, [X0 + 0x38]
	0x03600010 RET
	0x03600014 LDR X0, [X0 + 0x10]
	0x03600018 RET
	0x0360001C MOV X1, X31
	0x03600020 B 0x33C5A24
	0x03600024 STP X30, X21, [X31 - 0x20]!
	0x03600028 STP X20, X19, [X31 + 0x10]
	0x0360002C ADRP X21, 0xDE0000
	0x03600030 LDRB W8, [X21 + 0x352]
	0x03600034 MOV X20, X1
	0x03600038 MOV X19, X0
	0x0360003C TBNZ X8, 0x0, 0x360006C
	0x03600040 ADRP X0, 0xB3A000
	0x03600044 LDR X0, [X0 + 0x688]
	0x03600048 BL 0x1C16CF4
	0x0360004C ADRP X0, 0xB2F000
	0x03600050 LDR X0, [X0 + 0x9F8]
	0x03600054 BL 0x1C16CF4
	0x03600058 ADRP X0, 0xB1B000
	0x0360005C LDR X0, [X0 + 0xEA8]
	0x03600060 BL 0x1C16CF4
	0x03600064 MOVZ W8, 0x1
	0x03600068 STRB W8, [X21 + 0x352]
	0x0360006C CBZ X20, 0x36000A8
	0x03600070 ADRP X8, 0xB3A000
	0x03600074 LDR X8, [X8 + 0x688]
	0x03600078 LDR X9, [X20]
	0x0360007C LDR X8, [X8]
	0x03600080 LDRB W11, [X9 + 0x130]
	0x03600084 LDRB W10, [X8 + 0x130]
	0x03600088 CMP W11, W10
	0x0360008C B.CC 0x36000A8
	0x03600090 LDR X9, [X9 + 0xC8]
	0x03600094 ADD X9, X9, X10, 0x3, LSL
	0x03600098 LDUR X9, [X9 - 0x8]
	0x0360009C CMP X9, X8
	0x036000A0 CSEL X8, X20, X31, EQ
	0x036000A4 B.EQ 0x36000B8
	0x036000A8 LDP X20, X19, [X31 + 0x10]
	0x036000AC MOV W0, W31
	0x036000B0 LDP X30, X21, [X31], #0x20
	0x036000B4 RET
	0x036000B8 CBZ X8, 0x3600168
	0x036000BC LDRB W9, [X8 + 0x28]
	0x036000C0 LDRB W10, [X19 + 0x28]
	0x036000C4 LDR X11, [X8 + 0x30]
	0x036000C8 LDR X12, [X19 + 0x30]
	0x036000CC CMP W9, 0x0
	0x036000D0 CSET W9, EQ
	0x036000D4 CMP W10, 0x0
	0x036000D8 CSET W10, NE
	0x036000DC CMP X11, X12
	0x036000E0 B.NE 0x36000A8
	0x036000E4 EOR W9, W9, W10, 0x0
	0x036000E8 CBZ W9, 0x36000A8
	0x036000EC LDRB W9, [X8 + 0x18]
	0x036000F0 LDRB W10, [X19 + 0x18]
	0x036000F4 LDR X11, [X8 + 0x20]
	0x036000F8 LDR X12, [X19 + 0x20]
	0x036000FC CMP W9, 0x0
	0x03600100 CSET W9, EQ
	0x03600104 CMP W10, 0x0
	0x03600108 CSET W10, NE
	0x0360010C CMP X11, X12
	0x03600110 B.NE 0x36000A8
	0x03600114 EOR W9, W9, W10, 0x0
	0x03600118 CBZ W9, 0x36000A8
	0x0360011C LDRB W9, [X8 + 0x38]
	0x03600120 LDRB W10, [X19 + 0x38]
	0x03600124 LDR X11, [X8 + 0x40]
	0x03600128 LDR X12, [X19 + 0x40]
	0x0360012C CMP W9, 0x0
	0x03600130 CSET W9, EQ
	0x03600134 CMP W10, 0x0
	0x03600138 CSET W10, NE
	0x0360013C CMP X11, X12
	0x03600140 B.NE 0x36000A8
	0x03600144 EOR W9, W9, W10, 0x0
	0x03600148 CBZ W9, 0x36000A8
	0x0360014C LDR X0, [X8 + 0x10]
	0x03600150 LDR X1, [X19 + 0x10]
	0x03600154 LDP X20, X19, [X31 + 0x10]
	0x03600158 MOVZ W2, 0x5
	0x0360015C MOV X3, X31
	0x03600160 LDP X30, X21, [X31], #0x20
	0x03600164 B 0x3226C60
	0x03600168 BL 0x1C16F20
	0x0360016C SUB X31, X31, 0x40
	0x03600170 STP X30, X23, [X31 + 0x10]
	0x03600174 STP X22, X21, [X31 + 0x20]
	0x03600178 STP X20, X19, [X31 + 0x30]
	0x0360017C ADRP X20, 0xDE0000
	0x03600180 LDRB W8, [X20 + 0x353]
	0x03600184 MOV X19, X0
	0x03600188 TBNZ X8, 0x0, 0x36001A0
	0x0360018C ADRP X0, 0xB3A000
	0x03600190 LDR X0, [X0 + 0x690]
	0x03600194 BL 0x1C16CF4
	0x03600198 MOVZ W8, 0x1
	0x0360019C STRB W8, [X20 + 0x353]
	0x036001A0 STP X31, X31, [X31]
	0x036001A4 LDR X0, [X19 + 0x10]
	0x036001A8 CBZ X0, 0x3600254
	0x036001AC LDR X8, [X0]
	0x036001B0 ADRP X23, 0xB3A000
	0x036001B4 LDP X9, X1, [X8 + 0x158]
	0x036001B8 LDR X23, [X23 + 0x690]
	0x036001BC BLR X9
	0x036001C0 LDUR V0, [X19 + 0x28]
	0x036001C4 LDR X1, [X23]
	0x036001C8 MOV W20, W0
	0x036001CC ADD X0, X31, 0x0
	0x036001D0 STR V0, [X31]
	0x036001D4 BL 0x2434A54
	0x036001D8 LDUR V0, [X19 + 0x18]
	0x036001DC LDR X1, [X23]
	0x036001E0 MOV W21, W0
	0x036001E4 ADD X0, X31, 0x0
	0x036001E8 STR V0, [X31]
	0x036001EC BL 0x2434A54
	0x036001F0 LDUR V0, [X19 + 0x38]
	0x036001F4 LDR X1, [X23]
	0x036001F8 MOV W22, W0
	0x036001FC ADD X0, X31, 0x0
	0x03600200 STR V0, [X31]
	0x03600204 BL 0x2434A54
	0x03600208 LDR X8, [X19 + 0x10]
	0x0360020C CBZ X8, 0x3600254
	0x03600210 MOV W19, W0
	0x03600214 MOV X0, X8
	0x03600218 MOV X1, X31
	0x0360021C BL 0x322B6E4
	0x03600220 CBZ X0, 0x3600254
	0x03600224 LDR X8, [X0]
	0x03600228 LDP X9, X1, [X8 + 0x158]
	0x0360022C BLR X9
	0x03600230 EOR W8, W21, W20, 0x0
	0x03600234 EOR W8, W8, W22, 0x0
	0x03600238 EOR W8, W8, W19, 0x0
	0x0360023C LDP X20, X19, [X31 + 0x30]
	0x03600240 LDP X22, X21, [X31 + 0x20]
	0x03600244 LDP X30, X23, [X31 + 0x10]
	0x03600248 EOR W0, W8, W0, 0x0
	0x0360024C ADD X31, X31, 0x40
	0x03600250 RET
	0x03600254 BL 0x1C16F20
	0x03600258 SUB X31, X31, 0x60
	0x0360025C STP X30, X25, [X31 + 0x20]
	0x03600260 STP X24, X23, [X31 + 0x30]
	0x03600264 STP X22, X21, [X31 + 0x40]
	0x03600268 STP X20, X19, [X31 + 0x50]
	0x0360026C ADRP X22, 0xDE0000
	0x03600270 ADRP X20, 0xB1B000
	0x03600274 ADRP X24, 0xB1B000
	0x03600278 LDRB W8, [X22 + 0x354]
	0x0360027C LDR X20, [X20 + 0x8C8]
	0x03600280 LDR X24, [X24 + 0x8D0]
	0x03600284 MOV X19, X1
	0x03600288 MOV X21, X0
	0x0360028C TBNZ X8, 0x0, 0x36002D4
	0x03600290 ADRP X0, 0xB3A000
	0x03600294 LDR X0, [X0 + 0x688]
	0x03600298 BL 0x1C16CF4
	0x0360029C ADRP X0, 0xAF5000
	0x036002A0 LDR X0, [X0 + 0xC48]
	0x036002A4 BL 0x1C16CF4
	0x036002A8 ADRP X0, 0xB1B000
	0x036002AC LDR X0, [X0 + 0x8C8]
	0x036002B0 BL 0x1C16CF4
	0x036002B4 ADRP X0, 0xB37000
	0x036002B8 LDR X0, [X0 + 0x738]
	0x036002BC BL 0x1C16CF4
	0x036002C0 ADRP X0, 0xB1B000
	0x036002C4 LDR X0, [X0 + 0x8D0]
	0x036002C8 BL 0x1C16CF4
	0x036002CC MOVZ W8, 0x1
	0x036002D0 STRB W8, [X22 + 0x354]
	0x036002D4 STP X31, X31, [X31 + 0x10]
	0x036002D8 STR X31, [X19]
	0x036002DC LDR X0, [X20]
	0x036002E0 BL 0x1C16F10
	0x036002E4 MOV X1, X31
	0x036002E8 MOV X20, X0
	0x036002EC BL 0x33BDD8C
	0x036002F0 MOV X0, X20
	0x036002F4 MOV W1, W31
	0x036002F8 STR X21, [X20 + 0x10]
	0x036002FC BL 0x35FCF70
	0x03600300 MOV X22, X0
	0x03600304 LDR X0, [X24]
	0x03600308 MOV X21, X1
	0x0360030C LDR W8, [X0 + 0xE0]
	0x03600310 CBNZ W8, 0x3600318
	0x03600314 BL 0x1C16DFC
	0x03600318 CMP W22, 0x2
	0x0360031C B.NE 0x360060C
	0x03600320 ADRP X8, 0xB3A000
	0x03600324 LDR X8, [X8 + 0x688]
	0x03600328 AND X23, X21, 0x0
	0x0360032C LDR X0, [X8]
	0x03600330 BL 0x1C16F10
	0x03600334 MOV X21, X0
	0x03600338 BL 0x35FFF88
	0x0360033C MOV X0, X20
	0x03600340 MOV X1, X22
	0x03600344 MOV X2, X23
	0x03600348 BL 0x35FD280
	0x0360034C CBZ X21, 0x3600628
	0x03600350 STR X0, [X21 + 0x10]
	0x03600354 MOV X0, X20
	0x03600358 MOV W1, W31
	0x0360035C BL 0x35FCF70
	0x03600360 MOV X22, X0
	0x03600364 LDR X0, [X24]
	0x03600368 MOV X23, X1
	0x0360036C LDR W8, [X0 + 0xE0]
	0x03600370 CBNZ W8, 0x3600378
	0x03600374 BL 0x1C16DFC
	0x03600378 CMP W22, 0x2
	0x0360037C B.NE 0x360060C
	0x03600380 AND X23, X23, 0x0
	0x03600384 MOV X0, X20
	0x03600388 MOV X1, X22
	0x0360038C MOV X2, X23
	0x03600390 BL 0x3600630
	0x03600394 TBZ X0, 0x0, 0x3600460
	0x03600398 MOV X0, X20
	0x0360039C MOV W1, W31
	0x036003A0 BL 0x35FCF70
	0x036003A4 LDR X8, [X24]
	0x036003A8 MOV X22, X0
	0x036003AC LDR W9, [X8 + 0xE0]
	0x036003B0 CBNZ W9, 0x36003BC
	0x036003B4 MOV X0, X8
	0x036003B8 BL 0x1C16DFC
	0x036003BC CMP W22, 0x6
	0x036003C0 B.NE 0x360060C
	0x036003C4 MOV X0, X20
	0x036003C8 MOV W1, W31
	0x036003CC BL 0x35FCF70
	0x036003D0 MOV X22, X0
	0x036003D4 AND X23, X1, 0x0
	0x036003D8 MOV X0, X20
	0x036003DC MOV X1, X22
	0x036003E0 MOV X2, X23
	0x036003E4 BL 0x3600630
	0x036003E8 TBNZ X0, 0x0, 0x3600428
	0x036003EC ADD X3, X31, 0x10
	0x036003F0 MOV X0, X20
	0x036003F4 MOV X1, X22
	0x036003F8 MOV X2, X23
	0x036003FC BL 0x36006DC
	0x03600400 TBZ X0, 0x0, 0x360060C
	0x03600404 ADRP X8, 0xB37000
	0x03600408 LDR X1, [X31 + 0x10]
	0x0360040C LDR X8, [X8 + 0x738]
	0x03600410 ADD X0, X31, 0x0
	0x03600414 STP X31, X31, [X31]
	0x03600418 LDR X2, [X8]
	0x0360041C BL 0x2434988
	0x03600420 LDR V0, [X31]
	0x03600424 STUR V0, [X21 + 0x28]
	0x03600428 MOV X0, X20
	0x0360042C MOV W1, W31
	0x03600430 BL 0x35FCF70
	0x03600434 LDR X8, [X24]
	0x03600438 MOV X20, X0
	0x0360043C LDR W9, [X8 + 0xE0]
	0x03600440 CBNZ W9, 0x360044C
	0x03600444 MOV X0, X8
	0x03600448 BL 0x1C16DFC
	0x0360044C CMP W20, 0x1
	0x03600450 B.NE 0x360060C
	0x03600454 MOVZ W0, 0x1
	0x03600458 STR X21, [X19]
	0x0360045C B 0x3600610
	0x03600460 ADD X3, X31, 0x18
	0x03600464 MOV X0, X20
	0x03600468 MOV X1, X22
	0x0360046C MOV X2, X23
	0x03600470 BL 0x36006DC
	0x03600474 TBZ X0, 0x0, 0x3600518
	0x03600478 ADRP X23, 0xB37000
	0x0360047C LDR X1, [X31 + 0x18]
	0x03600480 LDR X23, [X23 + 0x738]
	0x03600484 ADD X0, X31, 0x0
	0x03600488 STP X31, X31, [X31]
	0x0360048C LDR X2, [X23]
	0x03600490 BL 0x2434988
	0x03600494 LDR V0, [X31]
	0x03600498 MOVZ W1, 0x1
	0x0360049C MOV X0, X20
	0x036004A0 STUR V0, [X21 + 0x18]
	0x036004A4 BL 0x35FCF70
	0x036004A8 LDR X8, [X24]
	0x036004AC MOV X22, X0
	0x036004B0 LDR W9, [X8 + 0xE0]
	0x036004B4 CBNZ W9, 0x36004C0
	0x036004B8 MOV X0, X8
	0x036004BC BL 0x1C16DFC
	0x036004C0 CMP W22, 0x7
	0x036004C4 B.NE 0x360060C

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X21, 0xDE2000
	010 Move X20, 0xAF5000
	011 Move W8, [X21+839]
	012 Move X20, [X20+2288]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {89}
	018 Move X0, 0xB3C000
	019 Move X0, [X0+1584]
	020 Call 0x1C17CF4
	021 Move X0, 0xB3C000
	022 Move X0, [X0+1592]
	023 Call 0x1C17CF4
	024 Move X0, 0xAF7000
	025 Move X0, [X0+3144]
	026 Call 0x1C17CF4
	027 Move X0, 0xB29000
	028 Move X0, [X0+2952]
	029 Call 0x1C17CF4
	030 Move X0, 0xB29000
	031 Move X0, [X0+2960]
	032 Call 0x1C17CF4
	033 Move X0, 0xAF5000
	034 Move X0, [X0+2288]
	035 Call 0x1C17CF4
	036 Move X0, 0xAF7000
	037 Move X0, [X0+1392]
	038 Call 0x1C17CF4
	039 Move X0, 0xB22000
	040 Move X0, [X0+4024]
	041 Call 0x1C17CF4
	042 Move X0, 0xB3C000
	043 Move X0, [X0+1480]
	044 Call 0x1C17CF4
	045 Move X0, 0xB24000
	046 Move X0, [X0+3128]
	047 Call 0x1C17CF4
	048 Move X0, 0xB3C000
	049 Move X0, [X0+1488]
	050 Call 0x1C17CF4
	051 Move X0, 0xB3C000
	052 Move X0, [X0+1496]
	053 Call 0x1C17CF4
	054 Move X0, 0xB3C000
	055 Move X0, [X0+1504]
	056 Call 0x1C17CF4
	057 Move X0, 0xB3C000
	058 Move X0, [X0+1600]
	059 Call 0x1C17CF4
	060 Move X0, 0xB3C000
	061 Move X0, [X0+1512]
	062 Call 0x1C17CF4
	063 Move X0, 0xAF5000
	064 Move X0, [X0+2104]
	065 Call 0x1C17CF4
	066 Move X0, 0xB3C000
	067 Move X0, [X0+1520]
	068 Call 0x1C17CF4
	069 Move X0, 0xB3C000
	070 Move X0, [X0+1528]
	071 Call 0x1C17CF4
	072 Move X0, 0xB3C000
	073 Move X0, [X0+1536]
	074 Call 0x1C17CF4
	075 Move X0, 0xB3C000
	076 Move X0, [X0+1608]
	077 Call 0x1C17CF4
	078 Move X0, 0xB00000
	079 Move X0, [X0+3288]
	080 Call 0x1C17CF4
	081 Move X0, 0xB3C000
	082 Move X0, [X0+1616]
	083 Call 0x1C17CF4
	084 Move X0, 0xB3C000
	085 Move X0, [X0+1560]
	086 Call 0x1C17CF4
	087 Move W8, 1
	088 Move [X21+839], W8
	089 Move X21, 0xAF5000
	090 Move X21, [X21+2104]
	091 Move X0, [X20]
	092 Move [X31+16], X31
	093 Move [X31+24], X31
	094 Move [X31+40], X31
	095 Move [X31+8], X31
	096 Call 0x1C17F10
	097 Move X1, X31
	098 Move X20, X0
	099 Call StringBuilder..ctor, X0
	100 Move W8, [X19+98]
	101 Compare W8, 0
	102 JumpIfEqual {115}
	103 Compare X20, 0
	104 JumpIfEqual {519}
	105 Move X8, 0xB3C000
	106 Move X8, [X8+1488]
	107 Move X0, X20
	108 Move X2, X31
	109 Move X1, [X8]
	110 Call StringBuilder.Append, X0, X1
	111 Move X1, [X21]
	112 Move X0, X20
	113 Move X2, X31
	114 Call StringBuilder.Append, X0, X1
	115 Move W8, [X19+99]
	116 Compare W8, 0
	117 JumpIfEqual {130}
	118 Compare X20, 0
	119 JumpIfEqual {519}
	120 Move X8, 0xB3C000
	121 Move X8, [X8+1528]
	122 Move X0, X20
	123 Move X2, X31
	124 Move X1, [X8]
	125 Call StringBuilder.Append, X0, X1
	126 Move X1, [X21]
	127 Move X0, X20
	128 Move X2, X31
	129 Call StringBuilder.Append, X0, X1
	130 Move W8, [X19+100]
	131 Compare W8, 0
	132 JumpIfEqual {145}
	133 Compare X20, 0
	134 JumpIfEqual {519}
	135 Move X8, 0xB3C000
	136 Move X8, [X8+1560]
	137 Move X0, X20
	138 Move X2, X31
	139 Move X1, [X8]
	140 Call StringBuilder.Append, X0, X1
	141 Move X1, [X21]
	142 Move X0, X20
	143 Move X2, X31
	144 Call StringBuilder.Append, X0, X1
	145 Move W8, [X19+103]
	146 Compare W8, 0
	147 JumpIfEqual {160}
	148 Compare X20, 0
	149 JumpIfEqual {519}
	150 Move X8, 0xB3C000
	151 Move X8, [X8+1520]
	152 Move X0, X20
	153 Move X2, X31
	154 Move X1, [X8]
	155 Call StringBuilder.Append, X0, X1
	156 Move X1, [X21]
	157 Move X0, X20
	158 Move X2, X31
	159 Call StringBuilder.Append, X0, X1
	160 Move W8, [X19+96]
	161 Compare W8, 0
	162 JumpIfEqual {175}
	163 Compare X20, 0
	164 JumpIfEqual {519}
	165 Move X8, 0xB3C000
	166 Move X8, [X8+1480]
	167 Move X0, X20
	168 Move X2, X31
	169 Move X1, [X8]
	170 Call StringBuilder.Append, X0, X1
	171 Move X1, [X21]
	172 Move X0, X20
	173 Move X2, X31
	174 Call StringBuilder.Append, X0, X1
	175 Move W8, [X19+102]
	176 Compare W8, 0
	177 JumpIfEqual {190}
	178 Compare X20, 0
	179 JumpIfEqual {519}
	180 Move X8, 0xB3C000
	181 Move X8, [X8+1536]
	182 Move X0, X20
	183 Move X2, X31
	184 Move X1, [X8]
	185 Call StringBuilder.Append, X0, X1
	186 Move X1, [X21]
	187 Move X0, X20
	188 Move X2, X31
	189 Call StringBuilder.Append, X0, X1
	190 Move W8, [X19+97]
	191 Compare W8, 0
	192 JumpIfEqual {226}
	193 Compare X20, 0
	194 JumpIfEqual {519}
	195 Move X8, 0xB3B000
	196 Move X8, [X8+1496]
	197 Move X0, X20
	198 Move X2, X31
	199 Move X1, [X8]
	200 Call StringBuilder.Append, X0, X1
	201 Move X8, [X19+24]
	202 Compare X8, 0
	203 JumpIfEqual {222}
	204 Move X8, 0xB23000
	205 Move X8, [X8+3128]
	206 Move X0, X20
	207 Move X2, X31
	208 Move X1, [X8]
	209 Call StringBuilder.Append, X0, X1
	210 Move X8, 0xB3B000
	211 Move X0, [X19+24]
	212 Move X8, [X8+1592]
	213 Move X1, X20
	214 Move X2, [X8]
	215 Call 0x21A31A8, X0, X1
	216 Move X8, 0xAFF000
	217 Move X8, [X8+3288]
	218 Move X0, X20
	219 Move X2, X31
	220 Move X1, [X8]
	221 Call StringBuilder.Append, X0, X1
	222 Move X1, [X21]
	223 Move X0, X20
	224 Move X2, X31
	225 Call StringBuilder.Append, X0, X1
	226 Move X24, 0xB28000
	227 Move X23, 0xAF6000
	228 Move X22, 0xAF6000
	229 Move W8, [X19+40]
	230 Move X24, [X24+2960]
	231 Move X23, [X23+1392]
	232 Move X22, [X22+3144]
	233 Compare W8, 0
	234 JumpIfEqual {278}
	235 Compare X20, 0
	236 JumpIfEqual {519}
	237 Move X8, 0xB3B000
	238 Move X8, [X8+1616]
	239 Move X0, X20
	240 Move X2, X31
	241 Move X1, [X8]
	242 Call StringBuilder.Append, X0, X1
	243 NotImplemented "Instruction LDUR not yet implemented."
	244 Move X1, [X24]
	245 Add X0, X31, 16
	246 Move [X31+1], V0
	247 Call Nullable`1<TimeSpan>.get_Value, X0
	248 Move X8, [X23]
	249 Move [X31+40], X0
	250 Move W9, [X8+224]
	251 Compare W9, 0
	252 JumpIfNotEqual {255}
	253 Move X0, X8
	254 Call 0x1C17DFC
	255 Add X0, X31, 40
	256 Move X1, X31
	257 Call TimeSpan.get_TotalSeconds, X0
	258 Move X0, [X22]
	259 Move [X31+8], D0
	260 Move W8, [X0+224]
	261 Compare W8, 0
	262 JumpIfNotEqual {264}
	263 Call 0x1C17DFC
	264 Move X0, X31
	265 Call CultureInfo.get_InvariantCulture
	266 Move X1, X0
	267 Add X0, X31, 8
	268 Move X2, X31
	269 Call Double.ToString, X0, X1
	270 Move X1, X0
	271 Move X0, X20
	272 Move X2, X31
	273 Call StringBuilder.Append, X0, X1
	274 Move X1, [X21]
	275 Move X0, X20
	276 Move X2, X31
	277 Call StringBuilder.Append, X0, X1
	278 NotImplemented "Instruction LDUR not yet implemented."
	279 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	280 Move [X31+1], V0
	281 Compare W8, 0
	282 JumpIfEqual {326}
	283 Compare X20, 0
	284 JumpIfEqual {519}
	285 Move X8, 0xB3B000
	286 Move X8, [X8+1600]
	287 Move X0, X20
	288 Move X2, X31
	289 Move X1, [X8]
	290 Call StringBuilder.Append, X0, X1
	291 NotImplemented "Instruction LDUR not yet implemented."
	292 Move X1, [X24]
	293 Add X0, X31, 16
	294 Move [X31+1], V0
	295 Call Nullable`1<TimeSpan>.get_Value, X0
	296 Move X8, [X23]
	297 Move [X31+40], X0
	298 Move W9, [X8+224]
	299 Compare W9, 0
	300 JumpIfNotEqual {303}
	301 Move X0, X8
	302 Call 0x1C17DFC
	303 Add X0, X31, 40
	304 Move X1, X31
	305 Call TimeSpan.get_TotalSeconds, X0
	306 Move X0, [X22]
	307 Move [X31+8], D0
	308 Move W8, [X0+224]
	309 Compare W8, 0
	310 JumpIfNotEqual {312}
	311 Call 0x1C17DFC
	312 Move X0, X31
	313 Call CultureInfo.get_InvariantCulture
	314 Move X1, X0
	315 Add X0, X31, 8
	316 Move X2, X31
	317 Call Double.ToString, X0, X1
	318 Move X1, X0
	319 Move X0, X20
	320 Move X2, X31
	321 Call StringBuilder.Append, X0, X1
	322 Move X1, [X21]
	323 Move X0, X20
	324 Move X2, X31
	325 Call StringBuilder.Append, X0, X1
	326 Move W8, [X19+56]
	327 Compare W8, 0
	328 JumpIfEqual {383}
	329 Compare X20, 0
	330 JumpIfEqual {519}
	331 Move X8, 0xB3B000
	332 Move X8, [X8+1504]
	333 Move X0, X20
	334 Move X2, X31
	335 Move X1, [X8]
	336 Call StringBuilder.Append, X0, X1
	337 Move V0, [X19+4]
	338 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	339 Move [X31+1], V0
	340 Compare W8, 0
	341 JumpIfEqual {379}
	342 Move X8, 0xB21000
	343 Move X8, [X8+4024]
	344 Move X0, X20
	345 Move X2, X31
	346 Move X1, [X8]
	347 Call StringBuilder.Append, X0, X1
	348 Move V0, [X19+4]
	349 Move X1, [X24]
	350 Add X0, X31, 16
	351 Move [X31+1], V0
	352 Call Nullable`1<TimeSpan>.get_Value, X0
	353 Move X8, [X23]
	354 Move [X31+40], X0
	355 Move W9, [X8+224]
	356 Compare W9, 0
	357 JumpIfNotEqual {360}
	358 Move X0, X8
	359 Call 0x1C17DFC
	360 Add X0, X31, 40
	361 Move X1, X31
	362 Call TimeSpan.get_TotalSeconds, X0
	363 Move X0, [X22]
	364 Move [X31+8], D0
	365 Move W8, [X0+224]
	366 Compare W8, 0
	367 JumpIfNotEqual {369}
	368 Call 0x1C17DFC
	369 Move X0, X31
	370 Call CultureInfo.get_InvariantCulture
	371 Move X1, X0
	372 Add X0, X31, 8
	373 Move X2, X31
	374 Call Double.ToString, X0, X1
	375 Move X1, X0
	376 Move X0, X20
	377 Move X2, X31
	378 Call StringBuilder.Append, X0, X1
	379 Move X1, [X21]
	380 Move X0, X20
	381 Move X2, X31
	382 Call StringBuilder.Append, X0, X1
	383 Move V0, [X19+5]
	384 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	385 Move [X31+1], V0
	386 Compare W8, 0
	387 JumpIfEqual {431}
	388 Compare X20, 0
	389 JumpIfEqual {519}
	390 Move X8, 0xB3B000
	391 Move X8, [X8+1608]
	392 Move X0, X20
	393 Move X2, X31
	394 Move X1, [X8]
	395 Call StringBuilder.Append, X0, X1
	396 Move V0, [X19+5]
	397 Move X1, [X24]
	398 Add X0, X31, 16
	399 Move [X31+1], V0
	400 Call Nullable`1<TimeSpan>.get_Value, X0
	401 Move X8, [X23]
	402 Move [X31+40], X0
	403 Move W9, [X8+224]
	404 Compare W9, 0
	405 JumpIfNotEqual {408}
	406 Move X0, X8
	407 Call 0x1C17DFC
	408 Add X0, X31, 40
	409 Move X1, X31
	410 Call TimeSpan.get_TotalSeconds, X0
	411 Move X0, [X22]
	412 Move [X31+8], D0
	413 Move W8, [X0+224]
	414 Compare W8, 0
	415 JumpIfNotEqual {417}
	416 Call 0x1C17DFC
	417 Move X0, X31
	418 Call CultureInfo.get_InvariantCulture
	419 Move X1, X0
	420 Add X0, X31, 8
	421 Move X2, X31
	422 Call Double.ToString, X0, X1
	423 Move X1, X0
	424 Move X0, X20
	425 Move X2, X31
	426 Call StringBuilder.Append, X0, X1
	427 Move X1, [X21]
	428 Move X0, X20
	429 Move X2, X31
	430 Call StringBuilder.Append, X0, X1
	431 Move W8, [X19+101]
	432 Compare W8, 0
	433 JumpIfEqual {467}
	434 Compare X20, 0
	435 JumpIfEqual {519}
	436 Move X8, 0xB3B000
	437 Move X8, [X8+1512]
	438 Move X0, X20
	439 Move X2, X31
	440 Move X1, [X8]
	441 Call StringBuilder.Append, X0, X1
	442 Move X8, [X19+32]
	443 Compare X8, 0
	444 JumpIfEqual {463}
	445 Move X8, 0xB23000
	446 Move X8, [X8+3128]
	447 Move X0, X20
	448 Move X2, X31
	449 Move X1, [X8]
	450 Call StringBuilder.Append, X0, X1
	451 Move X8, 0xB3B000
	452 Move X0, [X19+32]
	453 Move X8, [X8+1592]
	454 Move X1, X20
	455 Move X2, [X8]
	456 Call 0x21A31A8, X0, X1
	457 Move X8, 0xAFF000
	458 Move X8, [X8+3288]
	459 Move X0, X20
	460 Move X2, X31
	461 Move X1, [X8]
	462 Call StringBuilder.Append, X0, X1
	463 Move X1, [X21]
	464 Move X0, X20
	465 Move X2, X31
	466 Call StringBuilder.Append, X0, X1
	467 Move X8, 0xB3B000
	468 Move X8, [X8+1584]
	469 Move X0, [X19+16]
	470 Move X1, X20
	471 Move X2, [X8]
	472 Call 0x21A31A8, X0, X1
	473 Compare X20, 0
	474 JumpIfEqual {519}
	475 Move X0, X20
	476 Move X1, X31
	477 Call StringBuilder.get_Length, X0
	478 NotImplemented "Instruction CMP not yet implemented."
	479 Move X0, X20
	480 Move X1, X31
	481 Call StringBuilder.get_Length, X0
	482 Subtract W1, W0, 2
	483 Move X0, X20
	484 Move X2, X31
	485 Call StringBuilder.get_Chars, X0, X1
	486 And W8, W0, 0xFFFF
	487 NotImplemented "Instruction CMP not yet implemented."
	488 Move X0, X20
	489 Move X1, X31
	490 Call StringBuilder.get_Length, X0
	491 Subtract W1, W0, 1
	492 Move X0, X20
	493 Move X2, X31
	494 Call StringBuilder.get_Chars, X0, X1
	495 And W8, W0, 0xFFFF
	496 NotImplemented "Instruction CMP not yet implemented."
	497 Move X0, X20
	498 Move X1, X31
	499 Call StringBuilder.get_Length, X0
	500 Subtract W1, W0, 2
	501 Move W2, 2
	502 Move X0, X20
	503 Move X3, X31
	504 Call StringBuilder.Remove, X0, X1, X2
	505 Move X8, [X20]
	506 Move X0, X20
	507 Move X9, [X8+360]
	508 Move X1, [X8+368]
	509 NotImplemented "Instruction BLR not yet implemented."
	510 Move X20, [X31+80]
	511 Move X19, [X31+88]
	512 Move X22, [X31+64]
	513 Move X21, [X31+72]
	514 Move X24, [X31+48]
	515 Move X23, [X31+56]
	516 Move X30, [X31+32]
	517 Add X31, X31, 96
	518 Return X0
	519 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x035FFB1C ADRP X0, 0xB3B000
	0x035FFB20 LDR X0, [X0 + 0x680]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

