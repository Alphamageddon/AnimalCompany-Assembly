Type: UnityEngine.UIElements.KeyboardEventBase`1

Method: UnityEngine.EventModifiers get_modifiers()

Disassembly:
	0x02EE7BE8 LDR X8, [X8 + 0x50]
	0x02EE7BEC LDR X25, [X8]

ISIL:
	001 Move W0, [X0+132]
	002 Return X0

Method: System.Void set_modifiers(UnityEngine.EventModifiers value)

Disassembly:
	0x02EE7BF0 TBNZ X9, 0x0, 0x2EE7C0C
	0x02EE7BF4 BL 0x1C5C684

ISIL:
	001 Move [X0+132], W1
	002 Return 

Method: System.Char get_character()

Disassembly:
	0x02EE7BF8 MOV X8, X0
	0x02EE7BFC LDR X0, [X20 + 0x20]

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Return X0

Method: System.Void set_character(System.Char value)

Disassembly:
	0x02EE7C00 ADD X9, X0, 0x135
	0x02EE7C04 LDRH W9, [X9]

ISIL:
	001 NotImplemented "Instruction STRH not yet implemented."
	002 Return 

Method: UnityEngine.KeyCode get_keyCode()

Disassembly:
	0x02EE7C08 B 0x2EE7C10
	0x02EE7C0C MOV X8, X0

ISIL:
	001 Move W0, [X0+140]
	002 Return X0

Method: System.Void set_keyCode(UnityEngine.KeyCode value)

Disassembly:
	0x02EE7C10 LDR X8, [X8 + 0xC0]
	0x02EE7C14 LDR X26, [X8 + 0x50]

ISIL:
	001 Move [X0+140], W1
	002 Return 

Method: System.Boolean get_shiftKey()

Disassembly:
	0x02EE7C18 TBNZ X9, 0x0, 0x2EE7C20
	0x02EE7C1C BL 0x1C5C684
	0x02EE7C20 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move W8, [X0+132]
	002 And W0, W8, 1
	003 Return X0

Method: System.Boolean get_ctrlKey()

Disassembly:
	0x02EE7C24 LDR X8, [X8 + 0x48]
	0x02EE7C28 LDR W9, [X8 + 0x28]
	0x02EE7C2C MOV X8, X23

ISIL:
	001 Move W8, [X0+132]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

Method: System.Boolean get_commandKey()

Disassembly:
	0x02EE7C30 TBNZ X9, 0x1F, 0x2EE7C38
	0x02EE7C34 LDR X8, [X23]
	0x02EE7C38 STUR X8, [X29 - 0x20]

ISIL:
	001 Move W8, [X0+132]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: System.Boolean get_altKey()

Disassembly:
	0x02EE7C3C SUB X8, X29, 0x28
	0x02EE7C40 STUR X8, [X29 - 0x18]
	0x02EE7C44 SUB X8, X29, 0x2C

ISIL:
	001 Move W8, [X0+132]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Boolean get_functionKey()

Disassembly:
	0x02EE7C48 STUR X8, [X29 - 0x10]
	0x02EE7C4C LDR X8, [X26 + 0x10]
	0x02EE7C50 SUB X3, X29, 0x20

ISIL:
	001 Move W8, [X0+132]
	002 Move W0, W8
	003 ShiftRight W0, 6
	004 And W0, W0, 63
	005 Return X0

Method: System.Boolean get_actionKey()

Disassembly:
	0x02EE7C54 SUB X4, X29, 0x2C
	0x02EE7C58 MOV X0, X25
	0x02EE7C5C MOV X1, X26
	0x02EE7C60 MOV X2, X21
	0x02EE7C64 BLR X8
	0x02EE7C68 LDUR W8, [X29 - 0x2C]
	0x02EE7C6C ADD W8, W8, 0x1
	0x02EE7C70 STUR W8, [X29 - 0x2C]
	0x02EE7C74 B 0x2EE7A34
	0x02EE7C78 LDUR W8, [X29 - 0x2C]
	0x02EE7C7C LDP W10, W9, [X21 + 0x28]
	0x02EE7C80 MOV X20, X31
	0x02EE7C84 ADD W9, W8, W9
	0x02EE7C88 SUB W9, W9, W10
	0x02EE7C8C STP W8, W9, [X21 + 0x28]
	0x02EE7C90 CBZ X19, 0x2EE7CF4
	0x02EE7C94 LDR X8, [X19]
	0x02EE7C98 ADRP X10, 0x120C000
	0x02EE7C9C LDRH W9, [X8 + 0x12E]
	0x02EE7CA0 LDR X10, [X10 + 0xE00]
	0x02EE7CA4 LDR X1, [X10]
	0x02EE7CA8 CBZ X9, 0x2EE7CCC
	0x02EE7CAC LDR X10, [X8 + 0xB0]
	0x02EE7CB0 ADD X10, X10, 0x8
	0x02EE7CB4 LDUR X11, [X10 - 0x8]
	0x02EE7CB8 CMP X11, X1
	0x02EE7CBC B.EQ 0x2EE7CDC
	0x02EE7CC0 SUBS X9, X9, 0x1
	0x02EE7CC4 ADD X10, X10, 0x10
	0x02EE7CC8 B.NE 0x2EE7CB4
	0x02EE7CCC MOV X0, X19
	0x02EE7CD0 MOV W2, W31
	0x02EE7CD4 BL 0x1C5C788
	0x02EE7CD8 B 0x2EE7CE8
	0x02EE7CDC LDRSW X9, [X10]
	0x02EE7CE0 ADD X8, X8, X9, 0x4, LSL
	0x02EE7CE4 ADD X0, X8, 0x138
	0x02EE7CE8 LDP X8, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x14F5000
	006 Move X20, 0x120D000
	007 Move W8, [X21+2906]
	008 Move X20, [X20+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x120D000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2906], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_platform
	026 Compare W0, 0
	027 JumpIfEqual {39}
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call Application.get_platform
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, 2
	037 Move W9, 8
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move W8, 8
	040 Move W9, [X19+132]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 And W31, W9, W8
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Void Init()

Disassembly:
	0x02EE7CEC MOV X0, X19
	0x02EE7CF0 BLR X8
	0x02EE7CF4 CBNZ X20, 0x2EE7D40
	0x02EE7CF8 LDUR X8, [X29 - 0x38]
	0x02EE7CFC LDR X8, [X8 + 0x28]
	0x02EE7D00 LDUR X9, [X29 - 0x8]
	0x02EE7D04 CMP X8, X9
	0x02EE7D08 B.NE 0x2EE7D48
	0x02EE7D0C ADD X31, X29, 0x0
	0x02EE7D10 LDP X20, X19, [X31 + 0x50]
	0x02EE7D14 LDP X22, X21, [X31 + 0x40]
	0x02EE7D18 LDP X24, X23, [X31 + 0x30]
	0x02EE7D1C LDP X26, X25, [X31 + 0x20]
	0x02EE7D20 LDP X28, X27, [X31 + 0x10]
	0x02EE7D24 LDP X29, X30, [X31], #0x60

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {18}
	005 Move X8, [X1+32]
	006 Move X19, X0
	007 Move X8, [X8+192]
	008 Move X1, [X8+32]
	009 Call 0x2D0E634, X0
	010 Move W8, 15
	011 Move [X19+132], W31
	012 NotImplemented "Instruction STRH not yet implemented."
	013 Move [X19+48], W8
	014 Move [X19+140], W31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 
	018 Call 0x1C17F20

Method: System.Void LocalInit()

Disassembly:
	0x02EE7D28 RET
	0x02EE7D2C BL 0x1C16F20
	0x02EE7D30 BL 0x1C16F28
	0x02EE7D34 BL 0x1C16F28
	0x02EE7D38 BL 0x1C16F20
	0x02EE7D3C BL 0x1C16F20
	0x02EE7D40 MOV X0, X20
	0x02EE7D44 BL 0x1C16F18
	0x02EE7D48 BL 0x3EB1B20
	0x02EE7D4C B 0x2EE7D64

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 Move W8, 15
	005 Move [X0+132], W31
	006 NotImplemented "Instruction STRH not yet implemented."
	007 Move [X0+48], W8
	008 Move [X0+140], W31
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: T GetPooled(UnityEngine.Event systemEvent)

Disassembly:
	0x02EE7D50 B 0x2EE7D64
	0x02EE7D54 B 0x2EE7D64
	0x02EE7D58 B 0x2EE7D64
	0x02EE7D5C B 0x2EE7D64
	0x02EE7D60 B 0x2EE7D64
	0x02EE7D64 MOV X21, X0
	0x02EE7D68 CMP W1, 0x1
	0x02EE7D6C B.NE 0x2EE7D84
	0x02EE7D70 MOV X0, X21
	0x02EE7D74 BL 0x3EB1AD0
	0x02EE7D78 LDR X20, [X0]
	0x02EE7D7C BL 0x3EB1AE0
	0x02EE7D80 B 0x2EE7C90
	0x02EE7D84 MOV X20, X31
	0x02EE7D88 B 0x2EE7D90
	0x02EE7D8C MOV X21, X0
	0x02EE7D90 CBZ X19, 0x2EE7DF4
	0x02EE7D94 LDR X8, [X19]
	0x02EE7D98 ADRP X10, 0x120C000
	0x02EE7D9C LDRH W9, [X8 + 0x12E]
	0x02EE7DA0 LDR X10, [X10 + 0xE00]
	0x02EE7DA4 LDR X1, [X10]
	0x02EE7DA8 CBZ X9, 0x2EE7DCC
	0x02EE7DAC LDR X10, [X8 + 0xB0]
	0x02EE7DB0 ADD X10, X10, 0x8
	0x02EE7DB4 LDUR X11, [X10 - 0x8]
	0x02EE7DB8 CMP X11, X1
	0x02EE7DBC B.EQ 0x2EE7DDC
	0x02EE7DC0 SUBS X9, X9, 0x1
	0x02EE7DC4 ADD X10, X10, 0x10
	0x02EE7DC8 B.NE 0x2EE7DB4
	0x02EE7DCC MOV X0, X19
	0x02EE7DD0 MOV W2, W31
	0x02EE7DD4 BL 0x1C5C788
	0x02EE7DD8 B 0x2EE7DE8
	0x02EE7DDC LDRSW X9, [X10]
	0x02EE7DE0 ADD X8, X8, X9, 0x4, LSL
	0x02EE7DE4 ADD X0, X8, 0x138
	0x02EE7DE8 LDP X8, X1, [X0]
	0x02EE7DEC MOV X0, X19
	0x02EE7DF0 BLR X8
	0x02EE7DF4 CBNZ X20, 0x2EE7E00
	0x02EE7DF8 MOV X0, X21
	0x02EE7DFC BL 0x1D2C690
	0x02EE7E00 MOV X0, X20
	0x02EE7E04 BL 0x1C16F18
	0x02EE7E08 BL 0x1990590
	0x02EE7E0C STP X29, X30, [X31 - 0x60]!
	0x02EE7E10 STR X27, [X31 + 0x10]
	0x02EE7E14 STP X26, X25, [X31 + 0x20]
	0x02EE7E18 STP X24, X23, [X31 + 0x30]
	0x02EE7E1C STP X22, X21, [X31 + 0x40]
	0x02EE7E20 STP X20, X19, [X31 + 0x50]
	0x02EE7E24 ADD X29, X31, 0x0
	0x02EE7E28 SUB X31, X31, 0x10
	0x02EE7E2C MRS X26, 0xC000
	0x02EE7E30 LDR X8, [X26 + 0x28]
	0x02EE7E34 MOV X19, X4
	0x02EE7E38 MOV X23, X3
	0x02EE7E3C MOV X24, X2
	0x02EE7E40 STUR X8, [X29 - 0x8]
	0x02EE7E44 STUR X1, [X29 - 0x10]
	0x02EE7E48 LDR X8, [X4 + 0x20]
	0x02EE7E4C MOV X20, X1
	0x02EE7E50 MOV X25, X0
	0x02EE7E54 LDRB W9, [X8 + 0x135]
	0x02EE7E58 TBNZ X9, 0x0, 0x2EE7E6C
	0x02EE7E5C MOV X0, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X1+32]
	007 Move X19, X1
	008 Move X20, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8+80]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, [X19+32]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+192]
	037 Move X0, [X8+72]
	038 Call 0x2D0E6C4
	039 Compare X0, 0
	040 JumpIfEqual {93}
	041 Move X1, X20
	042 Move X2, X31
	043 Move X21, X0
	044 Call EventBase.set_imguiEvent, X0, X1
	045 Compare X20, 0
	046 JumpIfEqual {86}
	047 Move X0, X20
	048 Move X1, X31
	049 Call Event.get_modifiers, X0
	050 Move X8, [X19+32]
	051 Move W22, W0
	052 Move W9, [X8+309]
	053 Move TEMP, X9
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {59}
	057 Move X0, X8
	058 Call 0x1C5D684
	059 Move X0, X20
	060 Move X1, X31
	061 Move [X21+132], W22
	062 Call Event.get_character, X0
	063 Move X8, [X19+32]
	064 Move W22, W0
	065 Move W9, [X8+309]
	066 Move TEMP, X9
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {72}
	070 Move X0, X8
	071 Call 0x1C5D684
	072 Move X0, X20
	073 Move X1, X31
	074 NotImplemented "Instruction STRH not yet implemented."
	075 Call Event.get_keyCode, X0
	076 Move X8, [X19+32]
	077 Move W19, W0
	078 Move W9, [X8+309]
	079 Move TEMP, X9
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {85}
	083 Move X0, X8
	084 Call 0x1C5D684
	085 Move [X21+140], W19
	086 Move X0, X21
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 Return X0
	093 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x02EE7E60 BL 0x1C5C684
	0x02EE7E64 LDR X8, [X19 + 0x20]
	0x02EE7E68 B 0x2EE7E70
	0x02EE7E6C MOV X0, X8
	0x02EE7E70 LDR X9, [X0 + 0xC0]
	0x02EE7E74 LDR X9, [X9 + 0x48]
	0x02EE7E78 LDR W21, [X9 + 0xFC]
	0x02EE7E7C ADD X9, X31, 0x0
	0x02EE7E80 ADD X10, X21, 0xF
	0x02EE7E84 AND X10, X10, 0x1FFFFFFFF
	0x02EE7E88 SUB X22, X9, X10
	0x02EE7E8C ADD X31, X22, 0x0
	0x02EE7E90 LDR W9, [X23]
	0x02EE7E94 LDP W11, W10, [X25 + 0x28]
	0x02EE7E98 ADD W9, W9, W10
	0x02EE7E9C SUB W9, W9, W11
	0x02EE7EA0 STR W9, [X25 + 0x2C]
	0x02EE7EA4 LDR W9, [X23]
	0x02EE7EA8 STR W9, [X25 + 0x28]
	0x02EE7EAC ADD X9, X8, 0x135
	0x02EE7EB0 LDRH W9, [X9]
	0x02EE7EB4 TBNZ X9, 0x0, 0x2EE7ED0
	0x02EE7EB8 MOV X0, X8
	0x02EE7EBC BL 0x1C5C684
	0x02EE7EC0 LDR X8, [X19 + 0x20]
	0x02EE7EC4 ADD X9, X8, 0x135
	0x02EE7EC8 LDRH W9, [X9]
	0x02EE7ECC B 0x2EE7ED4
	0x02EE7ED0 MOV X0, X8
	0x02EE7ED4 LDR X10, [X0 + 0xC0]
	0x02EE7ED8 LDR X10, [X10 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move X8, [X8+192]
	008 Move X8, [X8+80]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move W9, [X8+224]
	018 Compare W9, 0
	019 JumpIfNotEqual {22}
	020 Move X0, X8
	021 Call 0x1C17DFC
	022 Move X8, [X20+32]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X1, [X8+96]
	026 Call 0x2D0E54C, X0
	027 Compare X19, 0
	028 JumpIfEqual {38}
	029 Move W8, 15
	030 Move [X19+132], W31
	031 NotImplemented "Instruction STRH not yet implemented."
	032 Move [X19+48], W8
	033 Move [X19+140], W31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 
	038 Call 0x1C17F20

