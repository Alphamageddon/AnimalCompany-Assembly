Type: UnityEngine.UIElements.DoubleField

Method: UnityEngine.UIElements.DoubleField/DoubleInput get_doubleInput()

Disassembly:
	0x03D0C434 BL 0x3C066BC
	0x03D0C438 B 0x3D0C1F8
	0x03D0C43C BL 0x1C16F20
	0x03D0C440 BL 0x1C171E0
	0x03D0C444 BL 0x1C16F28
	0x03D0C448 BL 0x1C16F44
	0x03D0C44C MOV X1, X31
	0x03D0C450 BL 0x1C16DEC
	0x03D0C454 STP X30, X21, [X31 - 0x20]!
	0x03D0C458 STP X20, X19, [X31 + 0x10]
	0x03D0C45C ADRP X20, 0x6DB000
	0x03D0C460 ADRP X21, 0x457000
	0x03D0C464 ADRP X19, 0x457000
	0x03D0C468 LDRB W8, [X20 + 0x886]
	0x03D0C46C LDR X21, [X21 + 0x958]
	0x03D0C470 LDR X19, [X19 + 0x960]
	0x03D0C474 TBNZ X8, 0x0, 0x3D0C4EC
	0x03D0C478 ADRP X0, 0x457000
	0x03D0C47C LDR X0, [X0 + 0x948]
	0x03D0C480 BL 0x1C16CF4
	0x03D0C484 ADRP X0, 0x411000
	0x03D0C488 LDR X0, [X0 + 0xB28]
	0x03D0C48C BL 0x1C16CF4
	0x03D0C490 ADRP X0, 0x411000
	0x03D0C494 LDR X0, [X0 + 0x758]
	0x03D0C498 BL 0x1C16CF4
	0x03D0C49C ADRP X0, 0x411000
	0x03D0C4A0 LDR X0, [X0 + 0xB20]
	0x03D0C4A4 BL 0x1C16CF4
	0x03D0C4A8 ADRP X0, 0x457000
	0x03D0C4AC LDR X0, [X0 + 0x960]
	0x03D0C4B0 BL 0x1C16CF4
	0x03D0C4B4 ADRP X0, 0x457000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6DC000
	005 Move W8, [X20+2164]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x458000
	012 Move X0, [X0+2152]
	013 Call 0x1C17CF4
	014 Move X0, 0x458000
	015 Move X0, [X0+2160]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2164], W8
	019 Move X0, [X19+1096]
	020 Compare X0, 0
	021 JumpIfEqual {33}
	022 Move X9, 0x458000
	023 Move X9, [X9+2152]
	024 Move X8, [X0]
	025 Move X1, [X9]
	026 Move W10, [X8+304]
	027 Move W9, [X1+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X8+200]
	030 Add X8, X8, X9
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C181E0

Method: System.String ValueToString(System.Double v)

Disassembly:
	0x03D0C4B8 LDR X0, [X0 + 0x958]
	0x03D0C4BC BL 0x1C16CF4
	0x03D0C4C0 ADRP X0, 0x457000
	0x03D0C4C4 LDR X0, [X0 + 0x968]
	0x03D0C4C8 BL 0x1C16CF4
	0x03D0C4CC ADRP X0, 0x3F1000
	0x03D0C4D0 LDR X0, [X0 + 0xEC8]
	0x03D0C4D4 BL 0x1C16CF4
	0x03D0C4D8 ADRP X0, 0x3EF000
	0x03D0C4DC LDR X0, [X0 + 0x5E8]
	0x03D0C4E0 BL 0x1C16CF4
	0x03D0C4E4 MOVZ W8, 0x1
	0x03D0C4E8 STRB W8, [X20 + 0x886]
	0x03D0C4EC LDR X0, [X21]
	0x03D0C4F0 BL 0x1C16F10
	0x03D0C4F4 LDR X1, [X19]
	0x03D0C4F8 MOV X19, X0
	0x03D0C4FC BL 0x273D808
	0x03D0C500 CBZ X19, 0x3D0C5B0
	0x03D0C504 ADRP X8, 0x3EF000
	0x03D0C508 LDR X8, [X8 + 0x5E8]
	0x03D0C50C ADRP X20, 0x457000
	0x03D0C510 ADRP X9, 0x411000
	0x03D0C514 LDR X8, [X8]
	0x03D0C518 LDR X20, [X20 + 0x948]
	0x03D0C51C STR X8, [X19 + 0x10]
	0x03D0C520 LDR X8, [X20]
	0x03D0C524 LDR X8, [X8 + 0xB8]
	0x03D0C528 LDR X9, [X9 + 0xB20]
	0x03D0C52C STR X19, [X8]
	0x03D0C530 LDR X0, [X9]
	0x03D0C534 BL 0x1C16F10
	0x03D0C538 MOV X1, X31
	0x03D0C53C MOV X19, X0
	0x03D0C540 BL 0x3E0A2F4
	0x03D0C544 CBZ X19, 0x3D0C5B0
	0x03D0C548 ADRP X8, 0x3F1000
	0x03D0C54C LDR X8, [X8 + 0xEC8]
	0x03D0C550 ADRP X9, 0x411000
	0x03D0C554 LDR X8, [X8]
	0x03D0C558 STR X8, [X19 + 0x10]
	0x03D0C55C LDR X8, [X20]
	0x03D0C560 LDR X8, [X8 + 0xB8]
	0x03D0C564 LDR X9, [X9 + 0x758]
	0x03D0C568 STR X19, [X8 + 0x8]
	0x03D0C56C LDR X0, [X9]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x6DC000
	007 Move [X31+8], D0
	008 Move X22, 0x458000
	009 Move X20, 0x3EA000
	010 Move W8, [X21+2165]
	011 Move X22, [X22+2168]
	012 Move X20, [X20+3144]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x3EA000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x458000
	022 Move X0, [X0+2168]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2165], W8
	026 Move X1, [X22]
	027 Move X0, X19
	028 Call 0x26E805C, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Compare X0, 0
	039 JumpIfEqual {55}
	040 Move X8, [X0]
	041 Move X9, [X8+536]
	042 Move X1, [X8+544]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X2, X0
	045 Add X0, X31, 8
	046 Move X1, X19
	047 Move X3, X31
	048 Call Double.ToString, X0, X1, X2
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0
	055 Call 0x1C17F20

Method: System.Double StringToValue(System.String str)

Disassembly:
	0x03D0C570 BL 0x1C16F10
	0x03D0C574 MOV X1, X31
	0x03D0C578 MOV X19, X0
	0x03D0C57C BL 0x3E13BD4
	0x03D0C580 CBZ X19, 0x3D0C5B0
	0x03D0C584 ADRP X8, 0x457000
	0x03D0C588 LDR X8, [X8 + 0x968]
	0x03D0C58C LDR X8, [X8]
	0x03D0C590 STRB W31, [X19 + 0x40]
	0x03D0C594 STR X8, [X19 + 0x10]
	0x03D0C598 LDR X8, [X20]
	0x03D0C59C LDR X8, [X8 + 0xB8]
	0x03D0C5A0 STR X19, [X8 + 0x10]
	0x03D0C5A4 LDP X20, X19, [X31 + 0x10]
	0x03D0C5A8 LDP X30, X21, [X31], #0x20
	0x03D0C5AC RET
	0x03D0C5B0 BL 0x1C16F20
	0x03D0C5B4 LDRB W0, [X0 + 0x448]
	0x03D0C5B8 RET
	0x03D0C5BC STP X30, X23, [X31 - 0x30]!
	0x03D0C5C0 STP X22, X21, [X31 + 0x10]
	0x03D0C5C4 STP X20, X19, [X31 + 0x20]
	0x03D0C5C8 ADRP X21, 0x6DB000
	0x03D0C5CC ADRP X23, 0x410000
	0x03D0C5D0 ADRP X22, 0x457000
	0x03D0C5D4 LDRB W8, [X21 + 0x887]
	0x03D0C5D8 LDR X23, [X23 + 0xEC8]
	0x03D0C5DC LDR X22, [X22 + 0x970]
	0x03D0C5E0 MOV X19, X1
	0x03D0C5E4 MOV X20, X0
	0x03D0C5E8 TBNZ X8, 0x0, 0x3D0C624
	0x03D0C5EC ADRP X0, 0x457000
	0x03D0C5F0 LDR X0, [X0 + 0x978]
	0x03D0C5F4 BL 0x1C16CF4
	0x03D0C5F8 ADRP X0, 0x457000
	0x03D0C5FC LDR X0, [X0 + 0x970]
	0x03D0C600 BL 0x1C16CF4
	0x03D0C604 ADRP X0, 0x410000
	0x03D0C608 LDR X0, [X0 + 0xEC8]
	0x03D0C60C BL 0x1C16CF4
	0x03D0C610 ADRP X0, 0x40F000
	0x03D0C614 LDR X0, [X0 + 0x898]
	0x03D0C618 BL 0x1C16CF4
	0x03D0C61C MOVZ W8, 0x1
	0x03D0C620 STRB W8, [X21 + 0x887]
	0x03D0C624 LDR X0, [X23]
	0x03D0C628 BL 0x1C16F10
	0x03D0C62C MOV X1, X31
	0x03D0C630 MOV X21, X0
	0x03D0C634 BL 0x3E0F684
	0x03D0C638 STR X21, [X20 + 0x450]
	0x03D0C63C LDR X0, [X22]
	0x03D0C640 LDR W8, [X0 + 0xE0]
	0x03D0C644 CBNZ W8, 0x3D0C64C
	0x03D0C648 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x6DC000
	007 Move W8, [X21+2166]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x458000
	015 Move X0, [X0+2176]
	016 Call 0x1C17CF4
	017 Move X0, 0x458000
	018 Move X0, [X0+2160]
	019 Call 0x1C17CF4
	020 Move X0, 0x458000
	021 Move X0, [X0+2184]
	022 Call 0x1C17CF4
	023 Move X0, 0x454000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2166], W8
	028 Move [X31+8], X31
	029 Move X0, [X19+1096]
	030 Compare X0, 0
	031 JumpIfEqual {66}
	032 Move X8, 0x458000
	033 Move X8, [X8+2184]
	034 Move X21, 0x454000
	035 Move X1, [X8]
	036 Move X21, [X21+1960]
	037 Call 0x26B280C, X0
	038 Move X8, [X21]
	039 Move X21, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Add X2, X31, 8
	046 Move X0, X20
	047 Move X1, X21
	048 Move X3, X31
	049 Call UINumericFieldsUtils.TryConvertStringToDouble, X0, X1, X2
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Move V0, [X31+8]
	055 Move X8, 0x458000
	056 Move X8, [X8+2176]
	057 Move X0, X19
	058 Move X1, [X8]
	059 Call BaseField`1<Double>.get_rawValue, X0
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return V0
	066 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03D0C64C CBZ X21, 0x3D0C73C
	0x03D0C650 LDR X8, [X22]
	0x03D0C654 MOV X0, X21

ISIL:
	001 Move W2, 1000
	002 Move X1, X31

Method: System.Void .ctor(System.String label, System.Int32 maxLength = 1000)

Disassembly:
	0x03D0C658 MOV X2, X31
	0x03D0C65C LDR X8, [X8 + 0xB8]
	0x03D0C660 LDR X1, [X8 + 0x8]
	0x03D0C664 BL 0x3DF1C70
	0x03D0C668 LDR X0, [X20 + 0x450]
	0x03D0C66C CBZ X0, 0x3D0C73C
	0x03D0C670 ADRP X23, 0x457000
	0x03D0C674 LDR X23, [X23 + 0x978]
	0x03D0C678 MOVZ W1, 0x1
	0x03D0C67C MOV X2, X31
	0x03D0C680 BL 0x3DEF238
	0x03D0C684 LDR X1, [X23]
	0x03D0C688 MOV X0, X20
	0x03D0C68C BL 0x2899CE0
	0x03D0C690 CBZ X0, 0x3D0C73C
	0x03D0C694 LDR X1, [X20 + 0x450]
	0x03D0C698 ADRP X21, 0x40F000
	0x03D0C69C LDR X21, [X21 + 0x898]
	0x03D0C6A0 MOV X2, X31
	0x03D0C6A4 BL 0x3DF60E8
	0x03D0C6A8 LDR X0, [X21]
	0x03D0C6AC BL 0x1C16F10
	0x03D0C6B0 MOV X1, X31
	0x03D0C6B4 MOV X21, X0
	0x03D0C6B8 BL 0x3DEF578
	0x03D0C6BC STR X21, [X20 + 0x458]
	0x03D0C6C0 CBZ X21, 0x3D0C73C
	0x03D0C6C4 LDR X8, [X22]
	0x03D0C6C8 MOV X0, X21
	0x03D0C6CC MOV X2, X31
	0x03D0C6D0 LDR X8, [X8 + 0xB8]
	0x03D0C6D4 LDR X1, [X8 + 0x10]
	0x03D0C6D8 BL 0x3DF1C70
	0x03D0C6DC LDR X0, [X20 + 0x458]
	0x03D0C6E0 CBZ X0, 0x3D0C73C
	0x03D0C6E4 MOVZ W1, 0x1
	0x03D0C6E8 MOV X2, X31
	0x03D0C6EC BL 0x3DEF238
	0x03D0C6F0 LDR X1, [X23]
	0x03D0C6F4 MOV X0, X20
	0x03D0C6F8 BL 0x2899CE0
	0x03D0C6FC CBZ X0, 0x3D0C73C
	0x03D0C700 LDR X1, [X20 + 0x458]
	0x03D0C704 MOV X2, X31
	0x03D0C708 BL 0x3DF60E8
	0x03D0C70C CBZ X19, 0x3D0C72C
	0x03D0C710 MOV X0, X20
	0x03D0C714 MOV X1, X19
	0x03D0C718 LDP X20, X19, [X31 + 0x20]
	0x03D0C71C LDP X22, X21, [X31 + 0x10]
	0x03D0C720 MOV W2, W31
	0x03D0C724 LDP X30, X23, [X31], #0x30
	0x03D0C728 B 0x3D0CA9C
	0x03D0C72C LDP X20, X19, [X31 + 0x20]
	0x03D0C730 LDP X22, X21, [X31 + 0x10]
	0x03D0C734 LDP X30, X23, [X31], #0x30
	0x03D0C738 RET
	0x03D0C73C BL 0x1C16F20
	0x03D0C740 MOV W2, W31
	0x03D0C744 B 0x3D0CA9C
	0x03D0C748 MOV X1, X31
	0x03D0C74C MOV X2, X31
	0x03D0C750 B 0x3D0C754
	0x03D0C754 STP X30, X27, [X31 - 0x50]!
	0x03D0C758 STP X26, X25, [X31 + 0x10]
	0x03D0C75C STP X24, X23, [X31 + 0x20]
	0x03D0C760 STP X22, X21, [X31 + 0x30]
	0x03D0C764 STP X20, X19, [X31 + 0x40]
	0x03D0C768 ADRP X23, 0x6DB000
	0x03D0C76C ADRP X22, 0x457000
	0x03D0C770 LDRB W8, [X23 + 0x888]
	0x03D0C774 LDR X22, [X22 + 0x980]
	0x03D0C778 MOV X20, X2
	0x03D0C77C MOV X21, X1
	0x03D0C780 MOV X19, X0
	0x03D0C784 TBNZ X8, 0x0, 0x3D0C868
	0x03D0C788 ADRP X0, 0x457000
	0x03D0C78C LDR X0, [X0 + 0x988]
	0x03D0C790 BL 0x1C16CF4
	0x03D0C794 ADRP X0, 0x457000
	0x03D0C798 LDR X0, [X0 + 0x990]
	0x03D0C79C BL 0x1C16CF4
	0x03D0C7A0 ADRP X0, 0x457000
	0x03D0C7A4 LDR X0, [X0 + 0x978]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x6DC000
	010 Move X25, 0x458000
	011 Move X24, 0x458000
	012 Move X23, 0x458000
	013 Move W8, [X22+2167]
	014 Move X25, [X25+2152]
	015 Move X24, [X24+2192]
	016 Move X23, [X23+2200]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x458000
	025 Move X0, [X0+2208]
	026 Call 0x1C17CF4
	027 Move X0, 0x458000
	028 Move X0, [X0+2216]
	029 Call 0x1C17CF4
	030 Move X0, 0x458000
	031 Move X0, [X0+2200]
	032 Call 0x1C17CF4
	033 Move X0, 0x458000
	034 Move X0, [X0+2152]
	035 Call 0x1C17CF4
	036 Move X0, 0x458000
	037 Move X0, [X0+2224]
	038 Call 0x1C17CF4
	039 Move X0, 0x458000
	040 Move X0, [X0+2192]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+2167], W8
	044 Move X0, [X25]
	045 Call 0x1C17F10
	046 Move X22, X0
	047 Call DoubleInput..ctor, X0
	048 Move X4, [X24]
	049 Move X0, X19
	050 Move X1, X21
	051 Move W2, W20
	052 Move X3, X22
	053 Call 0x26E8084, X0, X1, X2, X3
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X0+184]
	061 Move X0, X19
	062 Move X2, X31
	063 Move X1, [X8]
	064 Call VisualElement.AddToClassList, X0, X1
	065 Move X0, [X19+1024]
	066 Compare X0, 0
	067 JumpIfEqual {99}
	068 Move X8, [X23]
	069 Move X20, 0x458000
	070 Move X2, X31
	071 Move X8, [X8+184]
	072 Move X1, [X8+8]
	073 Move X20, [X20+2216]
	074 Call VisualElement.AddToClassList, X0, X1
	075 Move X1, [X20]
	076 Move X0, X19
	077 Call BaseField`1<Double>.get_visualInput, X0
	078 Compare X0, 0
	079 JumpIfEqual {99}
	080 Move X8, [X23]
	081 Move X20, 0x458000
	082 Move X2, X31
	083 Move X8, [X8+184]
	084 Move X1, [X8+16]
	085 Move X20, [X20+2224]
	086 Call VisualElement.AddToClassList, X0, X1
	087 Move X1, [X20]
	088 Move X0, X19
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Move X25, [X31+72]
	097 Call 0x213D7D0, X0
	098 Return 
	099 Call 0x1C17F20

Method: System.Boolean CanTryParse(System.String textString)

Disassembly:
	0x03D0C83C ADRP X0, 0x412000
	0x03D0C840 LDR X0, [X0 + 0xB0]
	0x03D0C844 BL 0x1C16CF4
	0x03D0C848 ADRP X0, 0x457000
	0x03D0C84C LDR X0, [X0 + 0x9B0]
	0x03D0C850 BL 0x1C16CF4
	0x03D0C854 ADRP X0, 0x457000
	0x03D0C858 LDR X0, [X0 + 0x9B8]
	0x03D0C85C BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X1
	003 Add X1, X31, 8
	004 Move X2, X31
	005 Move [X31+8], X31
	006 Call Double.TryParse, X0, X1
	007 And W0, W0, 1
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.Double startValue)

Disassembly:
	0x03D0C860 MOVZ W8, 0x1
	0x03D0C864 STRB W8, [X23 + 0x888]
	0x03D0C868 LDR X0, [X22]
	0x03D0C86C ADRP X23, 0x457000
	0x03D0C870 ADRP X22, 0x457000
	0x03D0C874 LDR W8, [X0 + 0xE0]
	0x03D0C878 LDR X23, [X23 + 0x988]
	0x03D0C87C LDR X22, [X22 + 0x970]
	0x03D0C880 CBNZ W8, 0x3D0C888
	0x03D0C884 BL 0x1C16DFC
	0x03D0C888 LDR X3, [X23]
	0x03D0C88C MOV X0, X19
	0x03D0C890 MOV X1, X21
	0x03D0C894 MOV X2, X31
	0x03D0C898 BL 0x289A77C
	0x03D0C89C LDR X0, [X22]
	0x03D0C8A0 LDR W8, [X0 + 0xE0]
	0x03D0C8A4 CBNZ W8, 0x3D0C8B0
	0x03D0C8A8 BL 0x1C16DFC
	0x03D0C8AC LDR X0, [X22]
	0x03D0C8B0 LDR X8, [X0 + 0xB8]
	0x03D0C8B4 MOV X0, X19
	0x03D0C8B8 MOV X2, X31

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move V8, V3
	008 Move W19, W1
	009 Move V9, V2
	010 Move V10, V1
	011 Move V11, V0
	012 Call DoubleField.get_doubleInput, X0
	013 Compare X0, 0
	014 JumpIfEqual {30}
	015 Move X8, [X0]
	016 Move V2, V9
	017 Move W1, W19
	018 Move V3, V8
	019 Move X3, [X8+1992]
	020 Move X2, [X8+2000]
	021 Move X30, [X31+32]
	022 Move X19, [X31+40]
	023 Move D9, [X31+16]
	024 Move D8, [X31+24]
	025 Move V0, V11
	026 Move V1, V10
	027 Move D11, [X31+48]
	028 Move D10, [X31+56]
	029 CallNoReturn X3
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03D0C8BC LDR X1, [X8]
	0x03D0C8C0 BL 0x3DF1C70
	0x03D0C8C4 LDR X0, [X19 + 0x400]
	0x03D0C8C8 CBZ X0, 0x3D0CA98
	0x03D0C8CC LDR X8, [X22]
	0x03D0C8D0 ADRP X21, 0x457000
	0x03D0C8D4 MOV X2, X31
	0x03D0C8D8 LDR X8, [X8 + 0xB8]
	0x03D0C8DC LDR X1, [X8 + 0x18]
	0x03D0C8E0 LDR X21, [X21 + 0x978]
	0x03D0C8E4 BL 0x3DF1C70
	0x03D0C8E8 LDR X1, [X21]
	0x03D0C8EC MOV X0, X19
	0x03D0C8F0 BL 0x2899CE0
	0x03D0C8F4 CBZ X0, 0x3D0CA98
	0x03D0C8F8 LDR X8, [X22]
	0x03D0C8FC ADRP X21, 0x411000
	0x03D0C900 LDR X21, [X21 + 0x780]
	0x03D0C904 ADRP X23, 0x457000
	0x03D0C908 LDR X8, [X8 + 0xB8]
	0x03D0C90C ADRP X24, 0x411000
	0x03D0C910 ADRP X25, 0x412000
	0x03D0C914 LDR X23, [X23 + 0x9A0]
	0x03D0C918 LDR X24, [X24 + 0x770]
	0x03D0C91C LDR X25, [X25 + 0xA0]
	0x03D0C920 LDR X1, [X8 + 0x20]
	0x03D0C924 ADRP X26, 0x457000
	0x03D0C928 ADRP X27, 0x412000
	0x03D0C92C ADRP X22, 0x457000
	0x03D0C930 LDR X26, [X26 + 0x9A8]
	0x03D0C934 LDR X27, [X27 + 0x98]
	0x03D0C938 LDR X22, [X22 + 0x9B8]
	0x03D0C93C MOV X2, X31
	0x03D0C940 BL 0x3DF1C70
	0x03D0C944 MOV X0, X19
	0x03D0C948 MOV X1, X20
	0x03D0C94C BL 0x3D0C5BC
	0x03D0C950 LDR X0, [X21]
	0x03D0C954 BL 0x1C16F10
	0x03D0C958 LDR X2, [X23]
	0x03D0C95C MOV X1, X19
	0x03D0C960 MOV X3, X31
	0x03D0C964 MOV X20, X0
	0x03D0C968 BL 0x2D0E824
	0x03D0C96C LDR X3, [X24]
	0x03D0C970 MOV X0, X19
	0x03D0C974 MOV X1, X20
	0x03D0C978 MOV W2, W31
	0x03D0C97C BL 0x21A1534
	0x03D0C980 LDR X0, [X25]
	0x03D0C984 BL 0x1C16F10
	0x03D0C988 LDR X2, [X26]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x6DC000
	008 Move X22, 0x458000
	009 Move X19, 0x458000
	010 Move X21, 0x411000
	011 Move X20, 0x411000
	012 Move W8, [X23+2168]
	013 Move X22, [X22+2248]
	014 Move X19, [X19+2200]
	015 Move X21, [X21+3768]
	016 Move X20, [X20+3776]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x458000
	022 Move X0, [X0+2200]
	023 Call 0x1C17CF4
	024 Move X0, 0x458000
	025 Move X0, [X0+2248]
	026 Call 0x1C17CF4
	027 Move X0, 0x411000
	028 Move X0, [X0+3768]
	029 Call 0x1C17CF4
	030 Move X0, 0x411000
	031 Move X0, [X0+3776]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+2168], W8
	035 Move X8, [X19]
	036 Move X9, [X22]
	037 Move X2, X31
	038 Move X8, [X8+184]
	039 Move [X8], X9
	040 Move X8, [X19]
	041 Move X1, [X21]
	042 Move X8, [X8+184]
	043 Move X0, [X8]
	044 Call String.Concat, X0, X1
	045 Move X8, [X19]
	046 Move X2, X31
	047 Move X8, [X8+184]
	048 Move [X8+8], X0
	049 Move X0, [X8]
	050 Move X1, [X20]
	051 Call String.Concat, X0, X1
	052 Move X8, [X19]
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X8, [X8+184]
	058 Move [X8+16], X0
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

