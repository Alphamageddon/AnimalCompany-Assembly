Type: UnityEngine.UIElements.UnsignedIntegerField/UnsignedIntegerInput

Method: UnityEngine.UIElements.UnsignedIntegerField get_parentUnsignedIntegerField()

Disassembly:
	0x03D8CC80 TBNZ X8, 0x0, 0x3D8CC98
	0x03D8CC84 ADRP X0, 0x3C2000
	0x03D8CC88 LDR X0, [X0 + 0xAC8]
	0x03D8CC8C BL 0x1C16CF4
	0x03D8CC90 MOVZ W8, 0x1
	0x03D8CC94 STRB W8, [X21 + 0xE35]
	0x03D8CC98 LDR X0, [X20 + 0x4010]
	0x03D8CC9C CBZ X0, 0x3D8CCF8
	0x03D8CCA0 ADRP X8, 0x3C2000
	0x03D8CCA4 LDR X8, [X8 + 0xAC8]
	0x03D8CCA8 MOV W1, W19
	0x03D8CCAC LDR X2, [X8]
	0x03D8CCB0 BL 0x2600D14
	0x03D8CCB4 MOV W9, W19
	0x03D8CCB8 ADD X8, X20, 0x10
	0x03D8CCBC AND X9, X9, 0x3FFF
	0x03D8CCC0 LDRB W10, [X9, X8, LSL]
	0x03D8CCC4 CMP W10, 0xFF
	0x03D8CCC8 B.EQ 0x3D8CCD4
	0x03D8CCCC ADD W10, W10, 0x1
	0x03D8CCD0 STRB W10, [X8, X9, LSL]
	0x03D8CCD4 UBFM X9, X19, 0xE, 0x1B
	0x03D8CCD8 LDRB W10, [X9, X8, LSL]
	0x03D8CCDC CMP W10, 0xFF
	0x03D8CCE0 B.EQ 0x3D8CCEC
	0x03D8CCE4 ADD W10, W10, 0x1
	0x03D8CCE8 STRB W10, [X8, X9, LSL]
	0x03D8CCEC LDP X20, X19, [X31 + 0x10]
	0x03D8CCF0 LDP X30, X21, [X31], #0x20
	0x03D8CCF4 RET
	0x03D8CCF8 BL 0x1C16F20
	0x03D8CCFC STR X30, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x65C000
	005 Move W8, [X20+3616]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x3DC000
	012 Move X0, [X0+2088]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3616], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call VisualElement.get_parent, X0
	019 Compare X0, 0
	020 JumpIfEqual {32}
	021 Move X9, 0x3DC000
	022 Move X9, [X9+2088]
	023 Move X8, [X0]
	024 Move X1, [X9]
	025 Move W10, [X8+304]
	026 Move W9, [X1+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X8+200]
	029 Add X8, X8, X9
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C181E0

Method: System.Void .ctor()

Disassembly:
	0x03D8CA04 CSEL X0, X31, X8, CC
	0x03D8CA08 LDP X20, X19, [X31 + 0x20]
	0x03D8CA0C LDP X22, X21, [X31 + 0x10]
	0x03D8CA10 LDR X30, [X31], #0x30
	0x03D8CA14 RET
	0x03D8CA18 STR X30, [X31 - 0x20]!
	0x03D8CA1C STP X20, X19, [X31 + 0x10]
	0x03D8CA20 ADRP X20, 0x65B000
	0x03D8CA24 LDRB W8, [X20 + 0xE32]
	0x03D8CA28 MOV X19, X0
	0x03D8CA2C STR X1, [X31 + 0x8]
	0x03D8CA30 TBNZ X8, 0x0, 0x3D8CA48
	0x03D8CA34 ADRP X0, 0x3DB000
	0x03D8CA38 LDR X0, [X0 + 0x920]
	0x03D8CA3C BL 0x1C16CF4
	0x03D8CA40 MOVZ W8, 0x1
	0x03D8CA44 STRB W8, [X20 + 0xE32]
	0x03D8CA48 LDR X1, [X19 + 0x400]
	0x03D8CA4C ADD X0, X31, 0x8
	0x03D8CA50 MOV X2, X31
	0x03D8CA54 BL 0x339AA9C
	0x03D8CA58 LDP X20, X19, [X31 + 0x10]
	0x03D8CA5C LDR X30, [X31], #0x20
	0x03D8CA60 RET
	0x03D8CA64 SUB X31, X31, 0x40
	0x03D8CA68 STP X30, X23, [X31 + 0x10]
	0x03D8CA6C STP X22, X21, [X31 + 0x20]
	0x03D8CA70 STP X20, X19, [X31 + 0x30]
	0x03D8CA74 ADRP X23, 0x65B000
	0x03D8CA78 ADRP X22, 0x3DB000
	0x03D8CA7C ADRP X21, 0x3D3000
	0x03D8CA80 LDRB W8, [X23 + 0xE33]
	0x03D8CA84 LDR X22, [X22 + 0x8B0]
	0x03D8CA88 LDR X21, [X21 + 0x7A8]
	0x03D8CA8C MOV X19, X1
	0x03D8CA90 MOV X20, X0
	0x03D8CA94 TBNZ X8, 0x0, 0x3D8CAB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x65C000
	007 Move X22, 0x3DC000
	008 Move X20, 0x3D4000
	009 Move W8, [X21+3617]
	010 Move X22, [X22+2120]
	011 Move X20, [X20+1960]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x3DC000
	018 Move X0, [X0+2120]
	019 Call 0x1C17CF4
	020 Move X0, 0x3DC000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move X0, 0x3D4000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3617], W8
	028 Move X1, [X22]
	029 Move X0, X19
	030 Call TextValueInput<UInt32>..ctor, X0
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move X8, [X0+184]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X8, [X8+32]
	041 Move [X19+1024], X8
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+48]
	045 Return 

Method: System.String get_allowedCharacters()

Disassembly:
	0x03D8CD00 CBZ X1, 0x3D8CD50
	0x03D8CD04 MOV X8, X31
	0x03D8CD08 ADD X9, X1, 0x10
	0x03D8CD0C ADD X10, X0, 0x10
	0x03D8CD10 LDR W11, [X9, X8, LSL]
	0x03D8CD14 CBZ W11, 0x3D8CD3C
	0x03D8CD18 AND X12, X11, 0x3FFF
	0x03D8CD1C LDRB W12, [X12, X10, LSL]
	0x03D8CD20 CBZ W12, 0x3D8CD44
	0x03D8CD24 UBFM X11, X11, 0xE, 0x1B
	0x03D8CD28 LDRB W11, [X11, X10, LSL]
	0x03D8CD2C CBZ W11, 0x3D8CD44
	0x03D8CD30 ADD X8, X8, 0x4
	0x03D8CD34 CMP X8, 0x10
	0x03D8CD38 B.NE 0x3D8CD10
	0x03D8CD3C MOVZ W0, 0x1
	0x03D8CD40 B 0x3D8CD48
	0x03D8CD44 MOV W0, W31
	0x03D8CD48 LDR X30, [X31], #0x10
	0x03D8CD4C RET
	0x03D8CD50 BL 0x1C16F20
	0x03D8CD54 SUB X31, X31, 0x60

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x65C000
	005 Move X19, 0x3D4000
	006 Move W8, [X20+3618]
	007 Move X19, [X19+1960]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3D4000
	013 Move X0, [X0+1960]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3618], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.UInt32 startValue)

Disassembly:
	0x03D8CD58 STR X30, [X31 + 0x20]
	0x03D8CD5C STP X24, X23, [X31 + 0x30]
	0x03D8CD60 STP X22, X21, [X31 + 0x40]
	0x03D8CD64 STP X20, X19, [X31 + 0x50]
	0x03D8CD68 ADRP X21, 0x65B000
	0x03D8CD6C LDRB W8, [X21 + 0xE36]
	0x03D8CD70 MOV X20, X1
	0x03D8CD74 MOV X19, X0
	0x03D8CD78 TBNZ X8, 0x0, 0x3D8CDCC
	0x03D8CD7C ADRP X0, 0x38E000
	0x03D8CD80 LDR X0, [X0 + 0xFC8]
	0x03D8CD84 BL 0x1C16CF4
	0x03D8CD88 ADRP X0, 0x38E000
	0x03D8CD8C LDR X0, [X0 + 0xFD0]
	0x03D8CD90 BL 0x1C16CF4
	0x03D8CD94 ADRP X0, 0x38E000
	0x03D8CD98 LDR X0, [X0 + 0xFD8]
	0x03D8CD9C BL 0x1C16CF4
	0x03D8CDA0 ADRP X0, 0x38E000
	0x03D8CDA4 LDR X0, [X0 + 0xFE0]
	0x03D8CDA8 BL 0x1C16CF4
	0x03D8CDAC ADRP X0, 0x3C2000
	0x03D8CDB0 LDR X0, [X0 + 0xAC8]
	0x03D8CDB4 BL 0x1C16CF4
	0x03D8CDB8 ADRP X0, 0x3C4000
	0x03D8CDBC LDR X0, [X0 + 0xC28]
	0x03D8CDC0 BL 0x1C16CF4
	0x03D8CDC4 MOVZ W8, 0x1
	0x03D8CDC8 STRB W8, [X21 + 0xE36]
	0x03D8CDCC STP X31, X31, [X31 + 0x8]
	0x03D8CDD0 STR X31, [X31 + 0x18]
	0x03D8CDD4 LDR X8, [X19 + 0x4010]
	0x03D8CDD8 CBZ X8, 0x3D8CF04
	0x03D8CDDC CBZ X20, 0x3D8CF04
	0x03D8CDE0 LDR W22, [X8 + 0x18]
	0x03D8CDE4 MOV X0, X20
	0x03D8CDE8 MOV X1, X31
	0x03D8CDEC BL 0x3DEF4CC
	0x03D8CDF0 CBZ X0, 0x3D8CF04
	0x03D8CDF4 LDR X8, [X0]
	0x03D8CDF8 LDP X9, X1, [X8 + 0x158]
	0x03D8CDFC BLR X9
	0x03D8CE00 MOVZ W8, 0xD
	0x03D8CE04 MUL W1, W0, W8
	0x03D8CE08 MOV X0, X19
	0x03D8CE0C BL 0x3D8CC68
	0x03D8CE10 MOV X0, X20
	0x03D8CE14 MOV X1, X31
	0x03D8CE18 BL 0x3DEF270
	0x03D8CE1C MOV X1, X31
	0x03D8CE20 BL 0x32277A8
	0x03D8CE24 TBNZ X0, 0x0, 0x3D8CE50
	0x03D8CE28 MOV X0, X20
	0x03D8CE2C MOV X1, X31
	0x03D8CE30 BL 0x3DEF270
	0x03D8CE34 CBZ X0, 0x3D8CF04
	0x03D8CE38 LDR X8, [X0]
	0x03D8CE3C LDP X9, X1, [X8 + 0x158]
	0x03D8CE40 BLR X9
	0x03D8CE44 ADD W1, W0, W0, 0x4, LSL
	0x03D8CE48 MOV X0, X19
	0x03D8CE4C BL 0x3D8CC68
	0x03D8CE50 MOV X0, X20
	0x03D8CE54 MOV X1, X31
	0x03D8CE58 BL 0x3DEF2D0
	0x03D8CE5C CBZ X0, 0x3D8CF04
	0x03D8CE60 ADRP X8, 0x38E000
	0x03D8CE64 LDR X8, [X8 + 0xFE0]
	0x03D8CE68 ADRP X21, 0x38E000
	0x03D8CE6C ADRP X23, 0x3C2000
	0x03D8CE70 ADRP X20, 0x38E000
	0x03D8CE74 LDR X1, [X8]
	0x03D8CE78 LDR X21, [X21 + 0xFD0]
	0x03D8CE7C LDR X23, [X23 + 0xAC8]
	0x03D8CE80 LDR X20, [X20 + 0xFC8]
	0x03D8CE84 ADD X8, X31, 0x8
	0x03D8CE88 BL 0x301CB58
	0x03D8CE8C MOVZ W24, 0x13
	0x03D8CE90 LDR X1, [X21]
	0x03D8CE94 ADD X0, X31, 0x8
	0x03D8CE98 BL 0x2BC4350
	0x03D8CE9C TBZ X0, 0x0, 0x3D8CEC4
	0x03D8CEA0 LDR X0, [X31 + 0x18]
	0x03D8CEA4 CBZ X0, 0x3D8CF00
	0x03D8CEA8 LDR X8, [X0]
	0x03D8CEAC LDP X9, X1, [X8 + 0x158]
	0x03D8CEB0 BLR X9
	0x03D8CEB4 MUL W1, W0, W24
	0x03D8CEB8 MOV X0, X19
	0x03D8CEBC BL 0x3D8CC68
	0x03D8CEC0 B 0x3D8CE90
	0x03D8CEC4 LDR X1, [X20]
	0x03D8CEC8 ADD X0, X31, 0x8
	0x03D8CECC BL 0x2BC434C
	0x03D8CED0 LDR X0, [X19 + 0x4010]
	0x03D8CED4 CBZ X0, 0x3D8CF04
	0x03D8CED8 LDR W8, [X0 + 0x18]
	0x03D8CEDC LDR X2, [X23]
	0x03D8CEE0 SUB W1, W8, W22
	0x03D8CEE4 BL 0x2600D14
	0x03D8CEE8 LDP X20, X19, [X31 + 0x50]
	0x03D8CEEC LDP X22, X21, [X31 + 0x40]
	0x03D8CEF0 LDP X24, X23, [X31 + 0x30]
	0x03D8CEF4 LDR X30, [X31 + 0x20]
	0x03D8CEF8 ADD X31, X31, 0x60
	0x03D8CEFC RET
	0x03D8CF00 BL 0x1C16F20
	0x03D8CF04 BL 0x1C16F20
	0x03D8CF08 B 0x3D8CF10
	0x03D8CF0C B 0x3D8CF10
	0x03D8CF10 MOV X20, X0
	0x03D8CF14 CMP W1, 0x1
	0x03D8CF18 B.NE 0x3D8CF4C
	0x03D8CF1C MOV X0, X20
	0x03D8CF20 BL 0x3EB1AD0
	0x03D8CF24 LDR X21, [X0]
	0x03D8CF28 BL 0x3EB1AE0
	0x03D8CF2C ADRP X8, 0x38E000
	0x03D8CF30 LDR X8, [X8 + 0xFC8]
	0x03D8CF34 ADD X0, X31, 0x8
	0x03D8CF38 LDR X1, [X8]
	0x03D8CF3C BL 0x2BC434C
	0x03D8CF40 CBZ X21, 0x3D8CED0
	0x03D8CF44 MOV X0, X21
	0x03D8CF48 BL 0x1C16F18
	0x03D8CF4C MOV X21, X31
	0x03D8CF50 B 0x3D8CF58
	0x03D8CF54 MOV X20, X0
	0x03D8CF58 ADRP X8, 0x38E000
	0x03D8CF5C LDR X8, [X8 + 0xFC8]
	0x03D8CF60 LDR X1, [X8]
	0x03D8CF64 ADD X0, X31, 0x8
	0x03D8CF68 BL 0x2BC434C
	0x03D8CF6C CBNZ X21, 0x3D8CF78
	0x03D8CF70 MOV X0, X20
	0x03D8CF74 BL 0x1D2C690
	0x03D8CF78 MOV X0, X21
	0x03D8CF7C BL 0x1C16F18
	0x03D8CF80 BL 0x1990590
	0x03D8CF84 STP X30, X23, [X31 - 0x30]!
	0x03D8CF88 STP X22, X21, [X31 + 0x10]
	0x03D8CF8C STP X20, X19, [X31 + 0x20]
	0x03D8CF90 ADRP X20, 0x65B000
	0x03D8CF94 LDRB W8, [X20 + 0xE37]
	0x03D8CF98 MOV X19, X0
	0x03D8CF9C TBNZ X8, 0x0, 0x3D8CFC0
	0x03D8CFA0 ADRP X0, 0x3DB000
	0x03D8CFA4 LDR X0, [X0 + 0x930]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x65C000
	013 Move X23, 0x3DC000
	014 Move X22, 0x368000
	015 Move W8, [X24+3619]
	016 Move X23, [X23+2160]
	017 Move X22, [X22+1448]
	018 Move W21, W2
	019 Move W20, W1
	020 Move V8, V1
	021 Move V9, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0x368000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move X0, 0x3DC000
	031 Move X0, [X0+2168]
	032 Call 0x1C17CF4
	033 Move X0, 0x3DC000
	034 Move X0, [X0+2160]
	035 Call 0x1C17CF4
	036 Move X0, 0x3DC000
	037 Move X0, [X0+2176]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+3619], W8
	041 Move W0, W21
	042 Move X1, X31
	043 Call NumericFieldDraggerUtility.CalculateIntDragSensitivity, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction SCVTF not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Move X2, X31
	050 Call NumericFieldDraggerUtility.Acceleration, X0, X1
	051 Move X1, [X23]
	052 Move X0, X19
	053 Move V10, V0
	054 Call TextInputBase<UInt32>.get_text, X0
	055 Move X8, [X19]
	056 Move X1, X0
	057 Move X0, X19
	058 Move X9, [X8+1912]
	059 Move X2, [X8+1920]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move W20, W0
	062 Move V0, V9
	063 Move V1, V8
	064 Move V2, V10
	065 Move X0, X31
	066 Call NumericFieldDraggerUtility.NiceDelta, X0, V0
	067 Move X0, [X22]
	068 Move V8, V0
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 NotImplemented "Instruction FCVT not yet implemented."
	074 Multiply D8, D11, D0
	075 Add X0, X31, 40
	076 Move V0, V8
	077 Call 0x3EB2C00
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move D1, -0.5
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Move V0, [X31+40]
	082 Move D1, -1
	083 Move D1, 0.5
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move V0, [X31+40]
	086 Move D1, 1
	087 NotImplemented "Instruction FCVTZS not yet implemented."
	088 Add D1, D0, D1
	089 And X31, X8, 1
	090 NotImplemented "Instruction FCSEL not yet implemented."
	091 Add D0, D8, D1
	092 NotImplemented "Instruction FRINTP not yet implemented."
	093 Add D0, D8, D1
	094 NotImplemented "Instruction FRINTM not yet implemented."
	095 Move X8, 0x7FF00000
	096 Move D1, X8
	097 NotImplemented "Instruction FCVTZS not yet implemented."
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Move X8, 0x80000000
	100 Move X0, X19
	101 NotImplemented "Instruction CSEL not yet implemented."
	102 Call UnsignedIntegerInput.get_parentUnsignedIntegerField, X0
	103 Compare X0, 0
	104 JumpIfEqual {167}
	105 Move X8, 0x3DC000
	106 Move X8, [X8+2168]
	107 Move X1, [X8]
	108 Move W8, W20
	109 Add X20, X21, X8
	110 Call TextInputBaseField`1<UInt32>.get_isDelayed, X0
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {142}
	115 Move X0, X20
	116 Move X1, X31
	117 Call Mathf.ClampToUInt, X0
	118 Move X8, [X19]
	119 Move W1, W0
	120 Move X0, X19
	121 Move X9, [X8+2008]
	122 Move X2, [X8+2016]
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X8, 0x3DC000
	125 Move X8, [X8+2176]
	126 Move X1, X0
	127 Move X0, X19
	128 Move X20, [X31+80]
	129 Move X19, [X31+88]
	130 Move X2, [X8]
	131 Move X22, [X31+64]
	132 Move X21, [X31+72]
	133 Move X24, [X31+48]
	134 Move X23, [X31+56]
	135 Move X30, [X31+32]
	136 Move D9, [X31+16]
	137 Move D8, [X31+24]
	138 Move D11, [X31+96]
	139 Move D10, [X31+104]
	140 Call TextInputBase<UInt32>.set_text, X0, X1
	141 Return 
	142 Move X0, X19
	143 Call UnsignedIntegerInput.get_parentUnsignedIntegerField, X0
	144 Move X19, X0
	145 Move X0, X20
	146 Move X1, X31
	147 Call Mathf.ClampToUInt, X0
	148 Compare X19, 0
	149 JumpIfEqual {167}
	150 Move X8, [X19]
	151 Move W1, W0
	152 Move X0, X19
	153 Move X20, [X31+80]
	154 Move X19, [X31+88]
	155 Move X3, [X8+2040]
	156 Move X2, [X8+2048]
	157 Move X22, [X31+64]
	158 Move X21, [X31+72]
	159 Move X24, [X31+48]
	160 Move X23, [X31+56]
	161 Move X30, [X31+32]
	162 Move D9, [X31+16]
	163 Move D8, [X31+24]
	164 Move D11, [X31+96]
	165 Move D10, [X31+104]
	166 CallNoReturn X3
	167 Call 0x1C17F20

Method: System.String ValueToString(System.UInt32 v)

Disassembly:
	0x03D8CFA8 BL 0x1C16CF4
	0x03D8CFAC ADRP X0, 0x3C4000
	0x03D8CFB0 LDR X0, [X0 + 0xC20]
	0x03D8CFB4 BL 0x1C16CF4
	0x03D8CFB8 MOVZ W8, 0x1
	0x03D8CFBC STRB W8, [X20 + 0xE37]
	0x03D8CFC0 LDR X0, [X19 + 0x4010]
	0x03D8CFC4 CBZ X0, 0x3D8D070
	0x03D8CFC8 ADRP X21, 0x3DB000
	0x03D8CFCC LDR X21, [X21 + 0x930]
	0x03D8CFD0 LDR X1, [X21]
	0x03D8CFD4 BL 0x2600C80
	0x03D8CFD8 LDR X8, [X19 + 0x4010]
	0x03D8CFDC CBZ X8, 0x3D8D070
	0x03D8CFE0 ADRP X22, 0x3C4000
	0x03D8CFE4 LDR X22, [X22 + 0xC20]
	0x03D8CFE8 MOV W20, W0
	0x03D8CFEC MOV X0, X8
	0x03D8CFF0 LDR X1, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x65C000
	005 Move W8, [X20+3620]
	006 Move X19, X0
	007 Move [X31+12], W1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3DC000
	013 Move X0, [X0+2184]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3620], W8
	017 Move X1, [X19+1024]
	018 Add X0, X31, 12
	019 Move X2, X31
	020 Call UInt32.ToString, X0, X1
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0

Method: System.UInt32 StringToValue(System.String str)

Disassembly:
	0x03D8CFF4 BL 0x2600CC4
	0x03D8CFF8 CMP W20, 0x1
	0x03D8CFFC B.LT 0x3D8D060
	0x03D8D000 ADD X23, X19, 0x10
	0x03D8D004 ADD W20, W20, 0x1
	0x03D8D008 LDR X0, [X19 + 0x4010]
	0x03D8D00C CBZ X0, 0x3D8D070
	0x03D8D010 LDR X1, [X21]
	0x03D8D014 BL 0x2600C80
	0x03D8D018 MOV W8, W0
	0x03D8D01C AND X8, X8, 0x3FFF
	0x03D8D020 LDRB W9, [X8, X23, LSL]
	0x03D8D024 CBZ W9, 0x3D8D030
	0x03D8D028 SUB W9, W9, 0x1
	0x03D8D02C STRB W9, [X23, X8, LSL]
	0x03D8D030 UBFM X8, X0, 0xE, 0x1B
	0x03D8D034 LDRB W9, [X8, X23, LSL]
	0x03D8D038 CBZ W9, 0x3D8D044
	0x03D8D03C SUB W9, W9, 0x1
	0x03D8D040 STRB W9, [X23, X8, LSL]
	0x03D8D044 LDR X0, [X19 + 0x4010]
	0x03D8D048 CBZ X0, 0x3D8D070
	0x03D8D04C LDR X1, [X22]
	0x03D8D050 BL 0x2600CC4
	0x03D8D054 SUB W20, W20, 0x1
	0x03D8D058 CMP W20, 0x1
	0x03D8D05C B.GT 0x3D8D008
	0x03D8D060 LDP X20, X19, [X31 + 0x20]
	0x03D8D064 LDP X22, X21, [X31 + 0x10]
	0x03D8D068 LDP X30, X23, [X31], #0x30
	0x03D8D06C RET
	0x03D8D070 BL 0x1C16F20
	0x03D8D074 LDR X0, [X0]
	0x03D8D078 RET
	0x03D8D07C STR X1, [X0]
	0x03D8D080 RET
	0x03D8D084 LDP S0, S1, [X0 + 0x8]
	0x03D8D088 RET
	0x03D8D08C STP S0, S1, [X0 + 0x8]
	0x03D8D090 RET
	0x03D8D094 LDR W0, [X0 + 0x10]
	0x03D8D098 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x65B000
	009 Move X22, 0x3DB000
	010 Move X21, 0x3D3000
	011 Move W8, [X23+3621]
	012 Move X22, [X22+2072]
	013 Move X21, [X21+1960]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x3DB000
	021 Move X0, [X0+2072]
	022 Call 0x1C17CF4
	023 Move X0, 0x3D3000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+3621], W8
	028 Move X1, [X22]
	029 Move X0, X20
	030 Move [X31+12], W31
	031 Call TextInputBase<UInt32>.get_originalText, X0
	032 Move X8, [X21]
	033 Move X20, X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Add X2, X31, 12
	040 Move X0, X19
	041 Move X1, X20
	042 Move X3, X31
	043 Call UINumericFieldsUtils.TryConvertStringToUInt, X0, X1, X2
	044 Move W0, [X31+12]
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X30, [X31+16]
	050 Move X23, [X31+24]
	051 Add X31, X31, 64
	052 Return X0

