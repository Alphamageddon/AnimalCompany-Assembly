Type: UnityEngine.UIElements.Internal.ColumnResizer

Method: UnityEngine.UIElements.ColumnLayout get_columnLayout()

Disassembly:
	0x03D5EDE8 B 0x3D5EDF8
	0x03D5EDEC LDRSW X9, [X10]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_columnLayout(UnityEngine.UIElements.ColumnLayout value)

Disassembly:
	0x03D5EDF0 ADD X8, X8, X9, 0x4, LSL
	0x03D5EDF4 ADD X0, X8, 0x138

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: System.Boolean get_preview()

Disassembly:
	0x03D5EDF8 LDP X8, X1, [X0]
	0x03D5EDFC MOV X0, X20

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: System.Void set_preview(System.Boolean value)

Disassembly:
	0x03D5EE00 BLR X8
	0x03D5EE04 CBNZ X21, 0x3D5EFDC
	0x03D5EE08 CMP W22, 0xD

ISIL:
	001 And W8, W1, 1
	002 Move [X0+96], W8
	003 Return 

Method: System.Void .ctor(UnityEngine.UIElements.Column column)

Disassembly:
	0x03D5EE0C B.EQ 0x3D5EE14
	0x03D5EE10 CBNZ W22, 0x3D5EF70
	0x03D5EE14 ADRP X8, 0x408000
	0x03D5EE18 LDR X0, [X19 + 0x3E0]
	0x03D5EE1C LDR X1, [X31 + 0x58]
	0x03D5EE20 LDR X8, [X8 + 0x5C0]
	0x03D5EE24 LDR X2, [X8]
	0x03D5EE28 BL 0x21D1660
	0x03D5EE2C TBZ X0, 0x0, 0x3D5EE48
	0x03D5EE30 ADRP X8, 0x408000
	0x03D5EE34 LDR X8, [X8 + 0x608]
	0x03D5EE38 ADD X0, X31, 0x40
	0x03D5EE3C LDR X1, [X8]
	0x03D5EE40 BL 0x24A6D20
	0x03D5EE44 B 0x3D5EFA0
	0x03D5EE48 LDR X8, [X19 + 0x3D0]
	0x03D5EE4C CBZ X8, 0x3D5EFE4
	0x03D5EE50 LDP W2, W9, [X8 + 0x18]
	0x03D5EE54 ADD W9, W9, 0x1
	0x03D5EE58 CMP W2, 0x1
	0x03D5EE5C STP W31, W9, [X8 + 0x18]
	0x03D5EE60 B.LT 0x3D5EE74
	0x03D5EE64 LDR X0, [X8 + 0x10]
	0x03D5EE68 MOV W1, W31
	0x03D5EE6C MOV X3, X31
	0x03D5EE70 BL 0x339FA34
	0x03D5EE74 LDR X0, [X31 + 0x58]
	0x03D5EE78 CBZ X0, 0x3D5EFE8
	0x03D5EE7C ADRP X8, 0x408000
	0x03D5EE80 LDR X8, [X8 + 0x600]
	0x03D5EE84 LDR X1, [X8]
	0x03D5EE88 ADD X8, X31, 0x0
	0x03D5EE8C BL 0x311207C
	0x03D5EE90 LDP V0, V1, [X31]
	0x03D5EE94 ADRP X20, 0x408000
	0x03D5EE98 LDR X20, [X20 + 0x5D0]
	0x03D5EE9C ADRP X21, 0x408000
	0x03D5EEA0 STP V0, V1, [X31 + 0x20]
	0x03D5EEA4 LDR X21, [X21 + 0x5E8]
	0x03D5EEA8 LDR X1, [X20]
	0x03D5EEAC ADD X0, X31, 0x20
	0x03D5EEB0 BL 0x2BDF64C
	0x03D5EEB4 TBZ X0, 0x0, 0x3D5EF14
	0x03D5EEB8 LDR X0, [X19 + 0x3D0]
	0x03D5EEBC CBZ X0, 0x3D5EFBC
	0x03D5EEC0 LDR W10, [X0 + 0x1C]
	0x03D5EEC4 LDR X1, [X31 + 0x30]
	0x03D5EEC8 LDR X8, [X0 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x68A000
	006 Move W8, [X21+3206]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x405000
	014 Move X0, [X0+2384]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3206], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Call PointerManipulator..ctor, X0
	021 Move X0, [X19+24]
	022 Move [X19+72], X20
	023 Compare X0, 0
	024 JumpIfEqual {55}
	025 Move X9, 0x405000
	026 Move X9, [X9+2384]
	027 Move W10, [X0+28]
	028 Move X8, [X0+16]
	029 Move X9, [X9]
	030 Add W10, W10, 1
	031 Move [X0+28], W10
	032 Compare X8, 0
	033 JumpIfEqual {55}
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Move W11, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W11, 12
	038 Add W9, W10, 1
	039 NotImplemented "Instruction MADD not yet implemented."
	040 Move [X0+24], W9
	041 Move [X8+32], X31
	042 Move [X8+40], W31
	043 Move X8, [X9+32]
	044 Move X1, X31
	045 Move X2, X31
	046 Move X8, [X8+192]
	047 Move X3, [X8+112]
	048 Call List`1<ManipulatorActivationFilter>.AddWithResize, X0, X1
	049 Move [X19+56], W31
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return 
	055 Call 0x1C17F20

Method: System.Void RegisterCallbacksOnTarget()

Disassembly:
	0x03D5EECC LDR X9, [X21]
	0x03D5EED0 ADD W10, W10, 0x1
	0x03D5EED4 STR W10, [X0 + 0x1C]
	0x03D5EED8 CBZ X8, 0x3D5EFC0
	0x03D5EEDC LDRSW X10, [X0 + 0x18]
	0x03D5EEE0 LDR W11, [X8 + 0x18]
	0x03D5EEE4 CMP W10, W11
	0x03D5EEE8 B.CS 0x3D5EF00
	0x03D5EEEC ADD W9, W10, 0x1
	0x03D5EEF0 ADD X8, X8, X10, 0x3, LSL
	0x03D5EEF4 STR W9, [X0 + 0x18]
	0x03D5EEF8 STR X1, [X8 + 0x20]
	0x03D5EEFC B 0x3D5EEA8
	0x03D5EF00 LDR X8, [X9 + 0x20]
	0x03D5EF04 LDR X8, [X8 + 0xC0]
	0x03D5EF08 LDR X2, [X8 + 0x70]
	0x03D5EF0C BL 0x301BF90
	0x03D5EF10 B 0x3D5EEA8
	0x03D5EF14 MOV X20, X31
	0x03D5EF18 MOVZ W22, 0x11
	0x03D5EF1C ADRP X8, 0x408000
	0x03D5EF20 LDR X8, [X8 + 0x5C8]
	0x03D5EF24 LDR X1, [X8]
	0x03D5EF28 ADD X0, X31, 0x20
	0x03D5EF2C BL 0x2BDF648
	0x03D5EF30 CBNZ X20, 0x3D5EFEC
	0x03D5EF34 CMP W22, 0x11
	0x03D5EF38 B.EQ 0x3D5EF40
	0x03D5EF3C CBNZ W22, 0x3D5EF70
	0x03D5EF40 ADRP X8, 0x408000
	0x03D5EF44 LDR X0, [X19 + 0x3E0]
	0x03D5EF48 LDR X1, [X31 + 0x58]
	0x03D5EF4C LDR X8, [X8 + 0x610]
	0x03D5EF50 LDR X2, [X8]
	0x03D5EF54 BL 0x2295014
	0x03D5EF58 ADRP X8, 0x408000
	0x03D5EF5C LDR X8, [X8 + 0x608]
	0x03D5EF60 ADD X0, X31, 0x40
	0x03D5EF64 LDR X1, [X8]
	0x03D5EF68 BL 0x24A6D20
	0x03D5EF6C B 0x3D5EF90
	0x03D5EF70 ADRP X8, 0x408000
	0x03D5EF74 LDR X8, [X8 + 0x608]
	0x03D5EF78 ADD X0, X31, 0x40
	0x03D5EF7C LDR X1, [X8]
	0x03D5EF80 BL 0x24A6D20
	0x03D5EF84 CMP W22, 0x12
	0x03D5EF88 B.EQ 0x3D5EF90
	0x03D5EF8C CBNZ W22, 0x3D5EFA0
	0x03D5EF90 MOV X0, X19
	0x03D5EF94 BL 0x3D609F0
	0x03D5EF98 MOV X0, X19
	0x03D5EF9C BL 0x3D60A28
	0x03D5EFA0 LDP X20, X19, [X31 + 0x80]
	0x03D5EFA4 LDP X22, X21, [X31 + 0x70]
	0x03D5EFA8 LDP X24, X23, [X31 + 0x60]
	0x03D5EFAC LDR X30, [X31 + 0x50]
	0x03D5EFB0 ADD X31, X31, 0x90
	0x03D5EFB4 RET
	0x03D5EFB8 BL 0x1C16F20
	0x03D5EFBC BL 0x1C16F20
	0x03D5EFC0 BL 0x1C16F20
	0x03D5EFC4 BL 0x1C16F20
	0x03D5EFC8 BL 0x1C16F20
	0x03D5EFCC BL 0x1C16F20
	0x03D5EFD0 BL 0x1C16F20
	0x03D5EFD4 BL 0x1C16F20
	0x03D5EFD8 BL 0x1C16F20
	0x03D5EFDC MOV X0, X21
	0x03D5EFE0 BL 0x1C16F18
	0x03D5EFE4 BL 0x1C16F20
	0x03D5EFE8 BL 0x1C16F20
	0x03D5EFEC MOV X0, X20
	0x03D5EFF0 BL 0x1C16F18
	0x03D5EFF4 B 0x3D5F018
	0x03D5EFF8 B 0x3D5F018
	0x03D5EFFC B 0x3D5F018
	0x03D5F000 B 0x3D5F0A8
	0x03D5F004 B 0x3D5F018
	0x03D5F008 B 0x3D5F018
	0x03D5F00C B 0x3D5F018
	0x03D5F010 B 0x3D5F018
	0x03D5F014 B 0x3D5F018
	0x03D5F018 MOV X22, X1
	0x03D5F01C MOV X23, X0
	0x03D5F020 B 0x3D5F140
	0x03D5F024 B 0x3D5F0A8
	0x03D5F028 B 0x3D5F0A8
	0x03D5F02C B 0x3D5F0A8
	0x03D5F030 B 0x3D5F04C
	0x03D5F034 B 0x3D5F0A8
	0x03D5F038 B 0x3D5F0A8
	0x03D5F03C B 0x3D5F0A8
	0x03D5F040 B 0x3D5F0A8
	0x03D5F044 B 0x3D5F04C
	0x03D5F048 B 0x3D5F0A8
	0x03D5F04C MOV X22, X1
	0x03D5F050 MOV X23, X0
	0x03D5F054 CMP W22, 0x1
	0x03D5F058 B.NE 0x3D5F074
	0x03D5F05C MOV X0, X23
	0x03D5F060 BL 0x3EB1AD0
	0x03D5F064 LDR X20, [X0]
	0x03D5F068 BL 0x3EB1AE0
	0x03D5F06C MOV W22, W31
	0x03D5F070 B 0x3D5EF1C
	0x03D5F074 MOV X20, X31
	0x03D5F078 ADRP X8, 0x407000
	0x03D5F07C LDR X8, [X8 + 0x5C8]
	0x03D5F080 LDR X1, [X8]
	0x03D5F084 ADD X0, X31, 0x20
	0x03D5F088 BL 0x2BDF648
	0x03D5F08C CBZ X20, 0x3D5F140
	0x03D5F090 MOV X0, X20
	0x03D5F094 BL 0x1C16F18
	0x03D5F098 MOV X22, X1
	0x03D5F09C MOV X23, X0
	0x03D5F0A0 B 0x3D5F078
	0x03D5F0A4 B 0x3D5F0A8
	0x03D5F0A8 MOV X22, X1
	0x03D5F0AC MOV X23, X0
	0x03D5F0B0 CMP W22, 0x1
	0x03D5F0B4 B.NE 0x3D5F0D4
	0x03D5F0B8 MOV X0, X23
	0x03D5F0BC BL 0x3EB1AD0
	0x03D5F0C0 LDR X21, [X0]
	0x03D5F0C4 BL 0x3EB1AE0
	0x03D5F0C8 MOV W22, W31
	0x03D5F0CC CBNZ X20, 0x3D5EDA4
	0x03D5F0D0 B 0x3D5EE04
	0x03D5F0D4 MOV X21, X31
	0x03D5F0D8 CBZ X20, 0x3D5F13C
	0x03D5F0DC ADRP X10, 0x394000
	0x03D5F0E0 LDR X8, [X20]
	0x03D5F0E4 LDR X10, [X10 + 0xE00]
	0x03D5F0E8 LDRH W9, [X8 + 0x12E]
	0x03D5F0EC LDR X1, [X10]
	0x03D5F0F0 CBZ X9, 0x3D5F114
	0x03D5F0F4 LDR X10, [X8 + 0xB0]
	0x03D5F0F8 ADD X10, X10, 0x8
	0x03D5F0FC LDUR X11, [X10 - 0x8]
	0x03D5F100 CMP X11, X1
	0x03D5F104 B.EQ 0x3D5F124
	0x03D5F108 SUBS X9, X9, 0x1
	0x03D5F10C ADD X10, X10, 0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x68A000
	008 Move X20, 0x3C0000
	009 Move X21, 0x409000
	010 Move W8, [X22+3207]
	011 Move X20, [X20+1920]
	012 Move X21, [X21+1416]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {56}
	018 Move X0, 0x3C1000
	019 Move X0, [X0+240]
	020 Call 0x1C17CF4
	021 Move X0, 0x3C0000
	022 Move X0, [X0+1904]
	023 Call 0x1C17CF4
	024 Move X0, 0x3C1000
	025 Move X0, [X0+152]
	026 Call 0x1C17CF4
	027 Move X0, 0x3C0000
	028 Move X0, [X0+1912]
	029 Call 0x1C17CF4
	030 Move X0, 0x409000
	031 Move X0, [X0+1424]
	032 Call 0x1C17CF4
	033 Move X0, 0x409000
	034 Move X0, [X0+1416]
	035 Call 0x1C17CF4
	036 Move X0, 0x409000
	037 Move X0, [X0+1432]
	038 Call 0x1C17CF4
	039 Move X0, 0x409000
	040 Move X0, [X0+1440]
	041 Call 0x1C17CF4
	042 Move X0, 0x3C1000
	043 Move X0, [X0+160]
	044 Call 0x1C17CF4
	045 Move X0, 0x3C0000
	046 Move X0, [X0+1920]
	047 Call 0x1C17CF4
	048 Move X0, 0x3C0000
	049 Move X0, [X0+1928]
	050 Call 0x1C17CF4
	051 Move X0, 0x3C1000
	052 Move X0, [X0+256]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X22+3207], W8
	056 Move X0, X19
	057 Move X1, X31
	058 Call Manipulator.get_target, X0
	059 Move X8, [X20]
	060 Move X20, X0
	061 Move X0, X8
	062 Call 0x1C17F10
	063 Move X2, [X21]
	064 Move X1, X19
	065 Move X3, X31
	066 Move X21, X0
	067 Call 0x2D0F824, X0, X1, X2
	068 Compare X20, 0
	069 JumpIfEqual {159}
	070 Move X8, 0x3C0000
	071 Move X8, [X8+1904]
	072 Move X22, 0x3C1000
	073 Move X23, 0x409000
	074 Move X0, X20
	075 Move X3, [X8]
	076 Move X22, [X22+160]
	077 Move X23, [X23+1432]
	078 Move X1, X21
	079 Move W2, W31
	080 Call 0x21A2534, X0, X1, X2
	081 Move X0, X19
	082 Move X1, X31
	083 Call Manipulator.get_target, X0
	084 Move X8, [X22]
	085 Move X20, X0
	086 Move X0, X8
	087 Call 0x1C17F10
	088 Move X2, [X23]
	089 Move X1, X19
	090 Move X3, X31
	091 Move X21, X0
	092 Call 0x2D0F824, X0, X1, X2
	093 Compare X20, 0
	094 JumpIfEqual {159}
	095 Move X8, 0x3C0000
	096 Move X8, [X8+152]
	097 Move X22, 0x3BF000
	098 Move X23, 0x408000
	099 Move X0, X20
	100 Move X3, [X8]
	101 Move X22, [X22+1928]
	102 Move X23, [X23+1440]
	103 Move X1, X21
	104 Move W2, W31
	105 Call 0x21A2534, X0, X1, X2
	106 Move X0, X19
	107 Move X1, X31
	108 Call Manipulator.get_target, X0
	109 Move X8, [X22]
	110 Move X20, X0
	111 Move X0, X8
	112 Call 0x1C17F10
	113 Move X2, [X23]
	114 Move X1, X19
	115 Move X3, X31
	116 Move X21, X0
	117 Call 0x2D0F824, X0, X1, X2
	118 Compare X20, 0
	119 JumpIfEqual {159}
	120 Move X8, 0x3BF000
	121 Move X8, [X8+1912]
	122 Move X22, 0x3C0000
	123 Move X23, 0x408000
	124 Move X0, X20
	125 Move X3, [X8]
	126 Move X22, [X22+256]
	127 Move X23, [X23+1424]
	128 Move X1, X21
	129 Move W2, W31
	130 Call 0x21A2534, X0, X1, X2
	131 Move X0, X19
	132 Move X1, X31
	133 Call Manipulator.get_target, X0
	134 Move X8, [X22]
	135 Move X20, X0
	136 Move X0, X8
	137 Call 0x1C17F10
	138 Move X2, [X23]
	139 Move X1, X19
	140 Move X3, X31
	141 Move X21, X0
	142 Call 0x2D0F824, X0, X1, X2
	143 Compare X20, 0
	144 JumpIfEqual {159}
	145 Move X8, 0x3C0000
	146 Move X8, [X8+240]
	147 Move X0, X20
	148 Move X1, X21
	149 Move X20, [X31+32]
	150 Move X19, [X31+40]
	151 Move X3, [X8]
	152 Move X22, [X31+16]
	153 Move X21, [X31+24]
	154 Move W2, W31
	155 Move X30, [X31+48]
	156 Move X23, [X31+56]
	157 Call 0x21A2534, X0, X1, X2
	158 Return 
	159 Call 0x1C17F20

Method: System.Void UnregisterCallbacksFromTarget()

Disassembly:
	0x03D5F110 B.NE 0x3D5F0FC
	0x03D5F114 MOV X0, X20
	0x03D5F118 MOV W2, W31
	0x03D5F11C BL 0x1C5C788
	0x03D5F120 B 0x3D5F130
	0x03D5F124 LDRSW X9, [X10]
	0x03D5F128 ADD X8, X8, X9, 0x4, LSL
	0x03D5F12C ADD X0, X8, 0x138
	0x03D5F130 LDP X8, X1, [X0]
	0x03D5F134 MOV X0, X20
	0x03D5F138 BLR X8
	0x03D5F13C CBNZ X21, 0x3D5F180
	0x03D5F140 CMP W22, 0x1
	0x03D5F144 B.NE 0x3D5F178
	0x03D5F148 MOV X0, X23
	0x03D5F14C BL 0x3EB1AD0
	0x03D5F150 LDR X20, [X0]
	0x03D5F154 BL 0x3EB1AE0
	0x03D5F158 ADRP X8, 0x407000
	0x03D5F15C LDR X8, [X8 + 0x608]
	0x03D5F160 ADD X0, X31, 0x40
	0x03D5F164 LDR X1, [X8]
	0x03D5F168 BL 0x24A6D20
	0x03D5F16C CBZ X20, 0x3D5EF90
	0x03D5F170 MOV X0, X20
	0x03D5F174 BL 0x1C16F18
	0x03D5F178 MOV X20, X31
	0x03D5F17C B 0x3D5F19C
	0x03D5F180 MOV X0, X21
	0x03D5F184 BL 0x1C16F18
	0x03D5F188 MOV X22, X1
	0x03D5F18C MOV X23, X0
	0x03D5F190 CBNZ X20, 0x3D5F0DC
	0x03D5F194 B 0x3D5F13C
	0x03D5F198 MOV X23, X0
	0x03D5F19C ADRP X8, 0x407000
	0x03D5F1A0 LDR X8, [X8 + 0x608]
	0x03D5F1A4 LDR X1, [X8]
	0x03D5F1A8 ADD X0, X31, 0x40
	0x03D5F1AC BL 0x24A6D20
	0x03D5F1B0 CBNZ X20, 0x3D5F1BC
	0x03D5F1B4 MOV X0, X23
	0x03D5F1B8 BL 0x1D2C690
	0x03D5F1BC MOV X0, X20
	0x03D5F1C0 BL 0x1C16F18
	0x03D5F1C4 BL 0x1990590
	0x03D5F1C8 LDR X0, [X0 + 0x420]
	0x03D5F1CC RET
	0x03D5F1D0 LDRB W0, [X0 + 0x3C8]
	0x03D5F1D4 RET
	0x03D5F1D8 STP X30, X19, [X31 - 0x10]!
	0x03D5F1DC LDRB W9, [X0 + 0x3C8]
	0x03D5F1E0 AND W8, W1, 0x1
	0x03D5F1E4 CMP W9, W8
	0x03D5F1E8 B.NE 0x3D5F1F4
	0x03D5F1EC LDP X30, X19, [X31], #0x10
	0x03D5F1F0 RET
	0x03D5F1F4 MOV X19, X0
	0x03D5F1F8 STRB W8, [X0 + 0x3C8]
	0x03D5F1FC BL 0x3D5F20C
	0x03D5F200 MOV X0, X19
	0x03D5F204 LDP X30, X19, [X31], #0x10
	0x03D5F208 B 0x3D5EABC
	0x03D5F20C SUB X31, X31, 0x60
	0x03D5F210 STP X30, X27, [X31 + 0x10]
	0x03D5F214 STP X26, X25, [X31 + 0x20]
	0x03D5F218 STP X24, X23, [X31 + 0x30]
	0x03D5F21C STP X22, X21, [X31 + 0x40]
	0x03D5F220 STP X20, X19, [X31 + 0x50]
	0x03D5F224 ADRP X20, 0x688000
	0x03D5F228 LDRB W8, [X20 + 0xCA6]
	0x03D5F22C MOV X19, X0
	0x03D5F230 TBNZ X8, 0x0, 0x3D5F284
	0x03D5F234 ADRP X0, 0x3BD000
	0x03D5F238 LDR X0, [X0 + 0x108]
	0x03D5F23C BL 0x1C16CF4
	0x03D5F240 ADRP X0, 0x394000
	0x03D5F244 LDR X0, [X0 + 0xE00]
	0x03D5F248 BL 0x1C16CF4
	0x03D5F24C ADRP X0, 0x3BD000
	0x03D5F250 LDR X0, [X0 + 0x110]
	0x03D5F254 BL 0x1C16CF4
	0x03D5F258 ADRP X0, 0x3BD000
	0x03D5F25C LDR X0, [X0 + 0x118]
	0x03D5F260 BL 0x1C16CF4
	0x03D5F264 ADRP X0, 0x394000
	0x03D5F268 LDR X0, [X0 + 0xE18]
	0x03D5F26C BL 0x1C16CF4
	0x03D5F270 ADRP X0, 0x407000
	0x03D5F274 LDR X0, [X0 + 0x4D0]
	0x03D5F278 BL 0x1C16CF4
	0x03D5F27C MOVZ W8, 0x1
	0x03D5F280 STRB W8, [X20 + 0xCA6]
	0x03D5F284 STP X31, X31, [X31]
	0x03D5F288 LDR X0, [X19 + 0x420]
	0x03D5F28C CBZ X0, 0x3D5F6E8
	0x03D5F290 MOV X1, X31
	0x03D5F294 BL 0x3D6F8DC
	0x03D5F298 CBZ X0, 0x3D5F6E8
	0x03D5F29C ADRP X27, 0x3BD000
	0x03D5F2A0 LDR X8, [X0]
	0x03D5F2A4 LDR X27, [X27 + 0x110]
	0x03D5F2A8 MOV X20, X0
	0x03D5F2AC LDRH W9, [X8 + 0x12E]
	0x03D5F2B0 LDR X1, [X27]
	0x03D5F2B4 CBZ X9, 0x3D5F2D8
	0x03D5F2B8 LDR X10, [X8 + 0xB0]
	0x03D5F2BC ADD X10, X10, 0x8
	0x03D5F2C0 LDUR X11, [X10 - 0x8]
	0x03D5F2C4 CMP X11, X1
	0x03D5F2C8 B.EQ 0x3D5F2E8
	0x03D5F2CC SUBS X9, X9, 0x1
	0x03D5F2D0 ADD X10, X10, 0x10
	0x03D5F2D4 B.NE 0x3D5F2C0
	0x03D5F2D8 MOV X0, X20
	0x03D5F2DC MOV W2, W31
	0x03D5F2E0 BL 0x1C5C788
	0x03D5F2E4 B 0x3D5F2F4
	0x03D5F2E8 LDRSW X9, [X10]
	0x03D5F2EC ADD X8, X8, X9, 0x4, LSL
	0x03D5F2F0 ADD X0, X8, 0x138
	0x03D5F2F4 ADRP X23, 0x394000
	0x03D5F2F8 LDR X23, [X23 + 0xE18]
	0x03D5F2FC LDP X8, X1, [X0]
	0x03D5F300 ADRP X24, 0x3BD000
	0x03D5F304 ADRP X25, 0x3BD000
	0x03D5F308 ADRP X22, 0x394000
	0x03D5F30C LDR X24, [X24 + 0x118]
	0x03D5F310 LDR X25, [X25 + 0x108]
	0x03D5F314 LDR X22, [X22 + 0xE00]
	0x03D5F318 MOV X0, X20
	0x03D5F31C BLR X8
	0x03D5F320 MOV X20, X0
	0x03D5F324 MOV W26, W31
	0x03D5F328 CBZ X20, 0x3D5F6C8
	0x03D5F32C LDR X8, [X20]
	0x03D5F330 LDR X1, [X23]
	0x03D5F334 LDRH W9, [X8 + 0x12E]
	0x03D5F338 CBZ X9, 0x3D5F35C
	0x03D5F33C LDR X10, [X8 + 0xB0]
	0x03D5F340 ADD X10, X10, 0x8
	0x03D5F344 LDUR X11, [X10 - 0x8]
	0x03D5F348 CMP X11, X1
	0x03D5F34C B.EQ 0x3D5F36C
	0x03D5F350 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x689000
	008 Move X20, 0x3C0000
	009 Move X21, 0x408000
	010 Move W8, [X22+3208]
	011 Move X20, [X20+256]
	012 Move X21, [X21+1424]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {56}
	018 Move X0, 0x3C0000
	019 Move X0, [X0+3296]
	020 Call 0x1C17CF4
	021 Move X0, 0x3BF000
	022 Move X0, [X0+1936]
	023 Call 0x1C17CF4
	024 Move X0, 0x3C0000
	025 Move X0, [X0+3368]
	026 Call 0x1C17CF4
	027 Move X0, 0x3BF000
	028 Move X0, [X0+1944]
	029 Call 0x1C17CF4
	030 Move X0, 0x408000
	031 Move X0, [X0+1424]
	032 Call 0x1C17CF4
	033 Move X0, 0x408000
	034 Move X0, [X0+1416]
	035 Call 0x1C17CF4
	036 Move X0, 0x408000
	037 Move X0, [X0+1432]
	038 Call 0x1C17CF4
	039 Move X0, 0x408000
	040 Move X0, [X0+1440]
	041 Call 0x1C17CF4
	042 Move X0, 0x3C0000
	043 Move X0, [X0+160]
	044 Call 0x1C17CF4
	045 Move X0, 0x3BF000
	046 Move X0, [X0+1920]
	047 Call 0x1C17CF4
	048 Move X0, 0x3BF000
	049 Move X0, [X0+1928]
	050 Call 0x1C17CF4
	051 Move X0, 0x3C0000
	052 Move X0, [X0+256]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X22+3208], W8
	056 Move X0, X19
	057 Move X1, X31
	058 Call Manipulator.get_target, X0
	059 Move X8, [X20]
	060 Move X20, X0
	061 Move X0, X8
	062 Call 0x1C17F10
	063 Move X2, [X21]
	064 Move X1, X19
	065 Move X3, X31
	066 Move X21, X0
	067 Call 0x2D0F824, X0, X1, X2
	068 Compare X20, 0
	069 JumpIfEqual {159}
	070 Move X8, 0x3C0000
	071 Move X8, [X8+3296]
	072 Move X22, 0x3BF000
	073 Move X23, 0x408000
	074 Move X0, X20
	075 Move X3, [X8]
	076 Move X22, [X22+1920]
	077 Move X23, [X23+1416]
	078 Move X1, X21
	079 Move W2, W31
	080 Call 0x21A28B4, X0, X1, X2
	081 Move X0, X19
	082 Move X1, X31
	083 Call Manipulator.get_target, X0
	084 Move X8, [X22]
	085 Move X20, X0
	086 Move X0, X8
	087 Call 0x1C17F10
	088 Move X2, [X23]
	089 Move X1, X19
	090 Move X3, X31
	091 Move X21, X0
	092 Call 0x2D0F824, X0, X1, X2
	093 Compare X20, 0
	094 JumpIfEqual {159}
	095 Move X8, 0x3BF000
	096 Move X8, [X8+1936]
	097 Move X22, 0x3C0000
	098 Move X23, 0x408000
	099 Move X0, X20
	100 Move X3, [X8]
	101 Move X22, [X22+160]
	102 Move X23, [X23+1432]
	103 Move X1, X21
	104 Move W2, W31
	105 Call 0x21A28B4, X0, X1, X2
	106 Move X0, X19
	107 Move X1, X31
	108 Call Manipulator.get_target, X0
	109 Move X8, [X22]
	110 Move X20, X0
	111 Move X0, X8
	112 Call 0x1C17F10
	113 Move X2, [X23]
	114 Move X1, X19
	115 Move X3, X31
	116 Move X21, X0
	117 Call 0x2D0F824, X0, X1, X2
	118 Compare X20, 0
	119 JumpIfEqual {159}
	120 Move X8, 0x3C0000
	121 Move X8, [X8+3368]
	122 Move X22, 0x3BF000
	123 Move X23, 0x408000
	124 Move X0, X20
	125 Move X3, [X8]
	126 Move X22, [X22+1928]
	127 Move X23, [X23+1440]
	128 Move X1, X21
	129 Move W2, W31
	130 Call 0x21A28B4, X0, X1, X2
	131 Move X0, X19
	132 Move X1, X31
	133 Call Manipulator.get_target, X0
	134 Move X8, [X22]
	135 Move X20, X0
	136 Move X0, X8
	137 Call 0x1C17F10
	138 Move X2, [X23]
	139 Move X1, X19
	140 Move X3, X31
	141 Move X21, X0
	142 Call 0x2D0F824, X0, X1, X2
	143 Compare X20, 0
	144 JumpIfEqual {159}
	145 Move X8, 0x3BF000
	146 Move X8, [X8+1944]
	147 Move X0, X20
	148 Move X1, X21
	149 Move X20, [X31+32]
	150 Move X19, [X31+40]
	151 Move X3, [X8]
	152 Move X22, [X31+16]
	153 Move X21, [X31+24]
	154 Move W2, W31
	155 Move X30, [X31+48]
	156 Move X23, [X31+56]
	157 Call 0x21A28B4, X0, X1, X2
	158 Return 
	159 Call 0x1C17F20

Method: System.Void OnKeyDown(UnityEngine.UIElements.KeyDownEvent e)

Disassembly:
	0x03D5F354 ADD X10, X10, 0x10
	0x03D5F358 B.NE 0x3D5F344
	0x03D5F35C MOV X0, X20
	0x03D5F360 MOV W2, W31
	0x03D5F364 BL 0x1C5C788
	0x03D5F368 B 0x3D5F378
	0x03D5F36C LDRSW X9, [X10]
	0x03D5F370 ADD X8, X8, X9, 0x4, LSL
	0x03D5F374 ADD X0, X8, 0x138
	0x03D5F378 LDP X8, X1, [X0]
	0x03D5F37C MOV X0, X20
	0x03D5F380 BLR X8
	0x03D5F384 TBZ X0, 0x0, 0x3D5F41C
	0x03D5F388 LDR X8, [X20]
	0x03D5F38C LDR X1, [X24]
	0x03D5F390 LDRH W9, [X8 + 0x12E]
	0x03D5F394 CBZ X9, 0x3D5F3B8
	0x03D5F398 LDR X10, [X8 + 0xB0]
	0x03D5F39C ADD X10, X10, 0x8
	0x03D5F3A0 LDUR X11, [X10 - 0x8]
	0x03D5F3A4 CMP X11, X1
	0x03D5F3A8 B.EQ 0x3D5F3C8
	0x03D5F3AC SUBS X9, X9, 0x1
	0x03D5F3B0 ADD X10, X10, 0x10
	0x03D5F3B4 B.NE 0x3D5F3A0
	0x03D5F3B8 MOV X0, X20
	0x03D5F3BC MOV W2, W31
	0x03D5F3C0 BL 0x1C5C788
	0x03D5F3C4 B 0x3D5F3D4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x689000
	006 Move W8, [X21+3209]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x3C0000
	014 Move X0, [X0+304]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3209], W8
	018 Compare X20, 0
	019 JumpIfEqual {39}
	020 Move W8, [X20+140]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W8, [X19+57]
	023 Compare W8, 0
	024 JumpIfEqual {34}
	025 Move W8, [X19+96]
	026 Compare W8, 0
	027 JumpIfEqual {34}
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move W1, 1
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void OnPointerDown(UnityEngine.UIElements.PointerDownEvent e)

Disassembly:
	0x03D5F424 LDR X8, [X20]
	0x03D5F428 LDR X1, [X22]
	0x03D5F42C LDRH W9, [X8 + 0x12E]
	0x03D5F430 CBZ X9, 0x3D5F454
	0x03D5F434 LDR X10, [X8 + 0xB0]
	0x03D5F438 ADD X10, X10, 0x8
	0x03D5F43C LDUR X11, [X10 - 0x8]
	0x03D5F440 CMP X11, X1
	0x03D5F444 B.EQ 0x3D5F464
	0x03D5F448 SUBS X9, X9, 0x1
	0x03D5F44C ADD X10, X10, 0x10
	0x03D5F450 B.NE 0x3D5F43C
	0x03D5F454 MOV X0, X20
	0x03D5F458 MOV W2, W31
	0x03D5F45C BL 0x1C5C788
	0x03D5F460 B 0x3D5F470
	0x03D5F464 LDRSW X9, [X10]
	0x03D5F468 ADD X8, X8, X9, 0x4, LSL
	0x03D5F46C ADD X0, X8, 0x138
	0x03D5F470 LDP X8, X1, [X0]
	0x03D5F474 MOV X0, X20
	0x03D5F478 BLR X8
	0x03D5F47C CBNZ X21, 0x3D5F6EC
	0x03D5F480 LDR X0, [X19 + 0x420]
	0x03D5F484 CBZ X0, 0x3D5F6E8
	0x03D5F488 MOV X1, X31
	0x03D5F48C BL 0x3D6F8DC
	0x03D5F490 CBZ X0, 0x3D5F6E8
	0x03D5F494 LDR X8, [X0]
	0x03D5F498 LDR X1, [X27]
	0x03D5F49C MOV X20, X0
	0x03D5F4A0 LDRH W9, [X8 + 0x12E]
	0x03D5F4A4 CBZ X9, 0x3D5F4C8
	0x03D5F4A8 LDR X10, [X8 + 0xB0]
	0x03D5F4AC ADD X10, X10, 0x8
	0x03D5F4B0 LDUR X11, [X10 - 0x8]
	0x03D5F4B4 CMP X11, X1
	0x03D5F4B8 B.EQ 0x3D5F4D8
	0x03D5F4BC SUBS X9, X9, 0x1
	0x03D5F4C0 ADD X10, X10, 0x10
	0x03D5F4C4 B.NE 0x3D5F4B0
	0x03D5F4C8 MOV X0, X20
	0x03D5F4CC MOV W2, W31
	0x03D5F4D0 BL 0x1C5C788
	0x03D5F4D4 B 0x3D5F4E4
	0x03D5F4D8 LDRSW X9, [X10]
	0x03D5F4DC ADD X8, X8, X9, 0x4, LSL
	0x03D5F4E0 ADD X0, X8, 0x138
	0x03D5F4E4 LDP X8, X1, [X0]
	0x03D5F4E8 MOV X0, X20
	0x03D5F4EC BLR X8
	0x03D5F4F0 MOV X20, X0
	0x03D5F4F4 CBZ X0, 0x3D5F6F4
	0x03D5F4F8 ADRP X27, 0x407000
	0x03D5F4FC LDR X27, [X27 + 0x4D0]
	0x03D5F500 LDR X8, [X20]
	0x03D5F504 LDR X1, [X23]
	0x03D5F508 LDRH W9, [X8 + 0x12E]
	0x03D5F50C CBZ X9, 0x3D5F530
	0x03D5F510 LDR X10, [X8 + 0xB0]
	0x03D5F514 ADD X10, X10, 0x8
	0x03D5F518 LDUR X11, [X10 - 0x8]
	0x03D5F51C CMP X11, X1
	0x03D5F520 B.EQ 0x3D5F540
	0x03D5F524 SUBS X9, X9, 0x1
	0x03D5F528 ADD X10, X10, 0x10
	0x03D5F52C B.NE 0x3D5F518
	0x03D5F530 MOV X0, X20
	0x03D5F534 MOV W2, W31
	0x03D5F538 BL 0x1C5C788
	0x03D5F53C B 0x3D5F54C
	0x03D5F540 LDRSW X9, [X10]
	0x03D5F544 ADD X8, X8, X9, 0x4, LSL
	0x03D5F548 ADD X0, X8, 0x138
	0x03D5F54C LDP X8, X1, [X0]
	0x03D5F550 MOV X0, X20
	0x03D5F554 BLR X8
	0x03D5F558 TBZ X0, 0x0, 0x3D5F648
	0x03D5F55C LDR X8, [X20]
	0x03D5F560 LDR X1, [X24]
	0x03D5F564 LDRH W9, [X8 + 0x12E]
	0x03D5F568 CBZ X9, 0x3D5F58C
	0x03D5F56C LDR X10, [X8 + 0xB0]
	0x03D5F570 ADD X10, X10, 0x8
	0x03D5F574 LDUR X11, [X10 - 0x8]
	0x03D5F578 CMP X11, X1
	0x03D5F57C B.EQ 0x3D5F59C
	0x03D5F580 SUBS X9, X9, 0x1
	0x03D5F584 ADD X10, X10, 0x10
	0x03D5F588 B.NE 0x3D5F574
	0x03D5F58C MOV X0, X20
	0x03D5F590 MOV W2, W31
	0x03D5F594 BL 0x1C5C788
	0x03D5F598 B 0x3D5F5A8
	0x03D5F59C LDRSW X9, [X10]
	0x03D5F5A0 ADD X8, X8, X9, 0x4, LSL
	0x03D5F5A4 ADD X0, X8, 0x138
	0x03D5F5A8 LDP X8, X1, [X0]
	0x03D5F5AC MOV X0, X20
	0x03D5F5B0 BLR X8
	0x03D5F5B4 MOV X1, X0
	0x03D5F5B8 LDR X0, [X19 + 0x400]
	0x03D5F5BC CBZ X0, 0x3D5F6D0
	0x03D5F5C0 LDR X3, [X25]
	0x03D5F5C4 ADD X2, X31, 0x0
	0x03D5F5C8 BL 0x2AA6B2C
	0x03D5F5CC TBZ X0, 0x0, 0x3D5F500
	0x03D5F5D0 LDR X8, [X31]
	0x03D5F5D4 TBZ X26, 0x0, 0x3D5F610
	0x03D5F5D8 CBZ X8, 0x3D5F6D8
	0x03D5F5DC LDR X0, [X27]
	0x03D5F5E0 LDR X21, [X8 + 0x10]
	0x03D5F5E4 LDR W9, [X0 + 0xE0]
	0x03D5F5E8 CBNZ W9, 0x3D5F5F0
	0x03D5F5EC BL 0x1C16DFC
	0x03D5F5F0 CBZ X21, 0x3D5F6E0
	0x03D5F5F4 LDR X8, [X27]
	0x03D5F5F8 LDR X8, [X8 + 0xB8]
	0x03D5F5FC LDR X1, [X8 + 0x8]
	0x03D5F600 MOV X0, X21
	0x03D5F604 MOV X2, X31
	0x03D5F608 BL 0x3DF1C70
	0x03D5F60C B 0x3D5F500
	0x03D5F610 CBZ X8, 0x3D5F6DC
	0x03D5F614 LDR X0, [X27]
	0x03D5F618 LDR X21, [X8 + 0x10]
	0x03D5F61C LDR W9, [X0 + 0xE0]
	0x03D5F620 CBNZ W9, 0x3D5F628
	0x03D5F624 BL 0x1C16DFC
	0x03D5F628 CBZ X21, 0x3D5F6E4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x689000
	007 Move W8, [X21+3210]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x408000
	015 Move X0, [X0+1400]
	016 Call 0x1C17CF4
	017 Move X0, 0x3C0000
	018 Move X0, [X0+3312]
	019 Call 0x1C17CF4
	020 Move X0, 0x408000
	021 Move X0, [X0+1384]
	022 Call 0x1C17CF4
	023 Move X0, 0x408000
	024 Move X0, [X0+1392]
	025 Call 0x1C17CF4
	026 Move X0, 0x3BD000
	027 Move X0, [X0+2200]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3210], W8
	031 Move [X31+8], X31
	032 Move W8, [X20+56]
	033 Compare W8, 0
	034 JumpIfEqual {40}
	035 Compare X19, 0
	036 JumpIfEqual {154}
	037 Move X0, X19
	038 Move X1, X31
	039 Call EventBase.StopImmediatePropagation, X0
	040 Move X0, X20
	041 Move X1, X19
	042 Move X2, X31
	043 Call PointerManipulator.CanStartManipulation, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {148}
	048 Compare X19, 0
	049 JumpIfEqual {154}
	050 Move X8, [X19]
	051 Move X0, X19
	052 Move X9, [X8+472]
	053 Move X1, [X8+480]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Compare X0, 0
	056 JumpIfEqual {154}
	057 Move X8, 0x3BD000
	058 Move X8, [X8+2200]
	059 Move X9, [X0]
	060 Move X21, X0
	061 Move X8, [X8]
	062 Move W11, [X9+304]
	063 Move W10, [X8+304]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X9, [X9+200]
	066 Add X9, X9, X10
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X8, 0x408000
	070 Move X8, [X8+1384]
	071 Move X0, X21
	072 Move X1, [X8]
	073 Call 0x22AACF4, X0
	074 Move X9, [X20+72]
	075 Move [X20+64], X0
	076 Compare X9, 0
	077 JumpIfEqual {154}
	078 Move X9, [X9+168]
	079 Compare X9, 0
	080 JumpIfEqual {154}
	081 Move W9, [X9+50]
	082 Move X8, X0
	083 Move [X20+96], W9
	084 Compare W9, 0
	085 JumpIfEqual {124}
	086 Move X9, [X20+80]
	087 Compare X9, 0
	088 JumpIfNotEqual {97}
	089 Move X8, 0x408000
	090 Move X8, [X8+1400]
	091 Move X0, [X8]
	092 Call 0x1C17F10
	093 Move X22, X0
	094 Call MultiColumnHeaderColumnResizePreview..ctor, X0
	095 Move X8, [X20+64]
	096 Move [X20+80], X22
	097 Compare X8, 0
	098 JumpIfEqual {154}
	099 Move X9, 0x408000
	100 Move X9, [X9+1392]
	101 Move X0, X8
	102 Move X1, [X9]
	103 Call 0x22AACF4, X0
	104 Compare X0, 0
	105 JumpIfEqual {110}
	106 Move X1, X31
	107 Call VisualElement.get_parent, X0
	108 Compare X0, 0
	109 JumpIfNotEqual {117}
	110 Move X0, [X20+64]
	111 Compare X0, 0
	112 JumpIfEqual {154}
	113 Move X1, X31
	114 Call VisualElement.get_parent, X0
	115 Compare X0, 0
	116 JumpIfEqual {154}
	117 Move X8, [X0+888]
	118 Add X0, X31, 8
	119 Move X2, X31
	120 Move [X31+8], X8
	121 Move X1, [X20+80]
	122 Call Hierarchy.Add, X0, X1
	123 Move X8, [X20+64]
	124 Compare X8, 0
	125 JumpIfEqual {154}
	126 Move X9, [X8+1032]
	127 Move X0, X21
	128 Move X1, X8
	129 Move X2, X31
	130 Move [X20+88], X9
	131 Move S0, [X19+192]
	132 Move S1, [X19+196]
	133 Call VisualElementExtensions.ChangeCoordinatesTo, X0, X1, X2
	134 Move X0, X20
	135 Move [X20+48], S0
	136 Move [X20+56], S1
	137 Call ColumnResizer.BeginDragResize, X0, V0
	138 Move W8, 1
	139 Move X0, X20
	140 Move X1, X31
	141 Move [X20+56], W8
	142 Call Manipulator.get_target, X0
	143 Move X1, X31
	144 Call MouseCaptureController.CaptureMouse, X0
	145 Move X0, X19
	146 Move X1, X31
	147 Call EventBase.StopPropagation, X0
	148 Move X20, [X31+32]
	149 Move X19, [X31+40]
	150 Move X22, [X31+16]
	151 Move X21, [X31+24]
	152 Move X30, [X31+48]
	153 Return 
	154 Call 0x1C17F20

Method: System.Void OnPointerMove(UnityEngine.UIElements.PointerMoveEvent e)

Disassembly:
	0x03D5F674 SUBS X9, X9, 0x1
	0x03D5F678 ADD X10, X10, 0x10
	0x03D5F67C B.NE 0x3D5F668
	0x03D5F680 MOV X0, X20
	0x03D5F684 MOV W2, W31
	0x03D5F688 BL 0x1C5C788
	0x03D5F68C B 0x3D5F69C
	0x03D5F690 LDRSW X9, [X10]
	0x03D5F694 ADD X8, X8, X9, 0x4, LSL
	0x03D5F698 ADD X0, X8, 0x138
	0x03D5F69C LDP X8, X1, [X0]
	0x03D5F6A0 MOV X0, X20
	0x03D5F6A4 BLR X8
	0x03D5F6A8 CBNZ X21, 0x3D5F6EC
	0x03D5F6AC LDP X20, X19, [X31 + 0x50]
	0x03D5F6B0 LDP X22, X21, [X31 + 0x40]
	0x03D5F6B4 LDP X24, X23, [X31 + 0x30]
	0x03D5F6B8 LDP X26, X25, [X31 + 0x20]
	0x03D5F6BC LDP X30, X27, [X31 + 0x10]
	0x03D5F6C0 ADD X31, X31, 0x60
	0x03D5F6C4 RET
	0x03D5F6C8 BL 0x1C16F20
	0x03D5F6CC BL 0x1C16F20
	0x03D5F6D0 BL 0x1C16F20
	0x03D5F6D4 BL 0x1C16F20
	0x03D5F6D8 BL 0x1C16F20
	0x03D5F6DC BL 0x1C16F20
	0x03D5F6E0 BL 0x1C16F20
	0x03D5F6E4 BL 0x1C16F20
	0x03D5F6E8 BL 0x1C16F20
	0x03D5F6EC MOV X0, X21
	0x03D5F6F0 BL 0x1C16F18
	0x03D5F6F4 BL 0x1C16F20
	0x03D5F6F8 B 0x3D5F740
	0x03D5F6FC B 0x3D5F740
	0x03D5F700 B 0x3D5F740
	0x03D5F704 B 0x3D5F740
	0x03D5F708 B 0x3D5F740
	0x03D5F70C B 0x3D5F740
	0x03D5F710 B 0x3D5F740
	0x03D5F714 B 0x3D5F740
	0x03D5F718 B 0x3D5F740
	0x03D5F71C B 0x3D5F7D0
	0x03D5F720 B 0x3D5F740
	0x03D5F724 B 0x3D5F740
	0x03D5F728 B 0x3D5F7D0
	0x03D5F72C B 0x3D5F7D0
	0x03D5F730 MOV W26, W31
	0x03D5F734 B 0x3D5F7D0
	0x03D5F738 B 0x3D5F740
	0x03D5F73C B 0x3D5F7D0
	0x03D5F740 CMP W1, 0x1
	0x03D5F744 B.NE 0x3D5F758
	0x03D5F748 BL 0x3EB1AD0
	0x03D5F74C LDR X21, [X0]
	0x03D5F750 BL 0x3EB1AE0
	0x03D5F754 B 0x3D5F64C
	0x03D5F758 MOV X19, X0
	0x03D5F75C MOV X21, X31
	0x03D5F760 B 0x3D5F768
	0x03D5F764 MOV X19, X0
	0x03D5F768 CBZ X20, 0x3D5F7C4
	0x03D5F76C LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x689000
	006 Move W8, [X21+3211]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x404000
	014 Move X0, [X0+2648]
	015 Call 0x1C17CF4
	016 Move X0, 0x3C0000
	017 Move X0, [X0+528]
	018 Call 0x1C17CF4
	019 Move X0, 0x3BD000
	020 Move X0, [X0+2200]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3211], W8
	024 Move W8, [X20+56]
	025 Compare W8, 0
	026 JumpIfEqual {54}
	027 Move X0, X20
	028 Move X1, X31
	029 Call Manipulator.get_target, X0
	030 Compare X19, 0
	031 JumpIfEqual {79}
	032 Move W1, [X19+156]
	033 Move X2, X31
	034 Call PointerCaptureHelper.HasPointerCapture, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {54}
	039 Move X8, [X19]
	040 Move X0, X19
	041 Move X9, [X8+472]
	042 Move X1, [X8+480]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfEqual {64}
	046 Move X8, 0x3BD000
	047 Move X8, [X8+2200]
	048 Move X9, [X0]
	049 Move X8, [X8]
	050 Move W11, [X9+304]
	051 Move W10, [X8+304]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, X31
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return 
	059 Move X9, [X9+200]
	060 Add X9, X9, X10
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move X1, [X20+64]
	065 Move S0, [X19+192]
	066 Move S1, [X19+196]
	067 Move X2, X31
	068 Call VisualElementExtensions.ChangeCoordinatesTo, X0, X1, X2
	069 Move X0, X20
	070 Call ColumnResizer.DragResize, X0, V0
	071 Move X0, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X1, X31
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Call EventBase.StopPropagation, X0
	078 Return 
	079 Call 0x1C17F20

Method: System.Void OnPointerUp(UnityEngine.UIElements.PointerUpEvent e)

Disassembly:
	0x03D5F7B0 ADD X8, X8, X9, 0x4, LSL
	0x03D5F7B4 ADD X0, X8, 0x138
	0x03D5F7B8 LDP X8, X1, [X0]
	0x03D5F7BC MOV X0, X20
	0x03D5F7C0 BLR X8
	0x03D5F7C4 CBZ X21, 0x3D5F858
	0x03D5F7C8 MOV X0, X21
	0x03D5F7CC BL 0x1C16F18
	0x03D5F7D0 CMP W1, 0x1
	0x03D5F7D4 B.NE 0x3D5F7E8
	0x03D5F7D8 BL 0x3EB1AD0
	0x03D5F7DC LDR X21, [X0]
	0x03D5F7E0 BL 0x3EB1AE0
	0x03D5F7E4 B 0x3D5F420
	0x03D5F7E8 MOV X19, X0
	0x03D5F7EC MOV X21, X31
	0x03D5F7F0 B 0x3D5F7F8
	0x03D5F7F4 MOV X19, X0
	0x03D5F7F8 CBZ X20, 0x3D5F854
	0x03D5F7FC LDR X8, [X20]
	0x03D5F800 LDR X1, [X22]
	0x03D5F804 LDRH W9, [X8 + 0x12E]
	0x03D5F808 CBZ X9, 0x3D5F82C
	0x03D5F80C LDR X10, [X8 + 0xB0]
	0x03D5F810 ADD X10, X10, 0x8
	0x03D5F814 LDUR X11, [X10 - 0x8]
	0x03D5F818 CMP X11, X1
	0x03D5F81C B.EQ 0x3D5F83C
	0x03D5F820 SUBS X9, X9, 0x1
	0x03D5F824 ADD X10, X10, 0x10
	0x03D5F828 B.NE 0x3D5F814
	0x03D5F82C MOV X0, X20
	0x03D5F830 MOV W2, W31
	0x03D5F834 BL 0x1C5C788
	0x03D5F838 B 0x3D5F848
	0x03D5F83C LDRSW X9, [X10]
	0x03D5F840 ADD X8, X8, X9, 0x4, LSL
	0x03D5F844 ADD X0, X8, 0x138
	0x03D5F848 LDP X8, X1, [X0]
	0x03D5F84C MOV X0, X20
	0x03D5F850 BLR X8
	0x03D5F854 CBNZ X21, 0x3D5F860
	0x03D5F858 MOV X0, X19
	0x03D5F85C BL 0x1D2C690
	0x03D5F860 MOV X0, X21
	0x03D5F864 BL 0x1C16F18
	0x03D5F868 BL 0x1990590
	0x03D5F86C STR X30, [X31 - 0x40]!
	0x03D5F870 STP X24, X23, [X31 + 0x10]
	0x03D5F874 STP X22, X21, [X31 + 0x20]
	0x03D5F878 STP X20, X19, [X31 + 0x30]
	0x03D5F87C ADRP X21, 0x688000
	0x03D5F880 LDRB W8, [X21 + 0xC8F]
	0x03D5F884 MOV X19, X1
	0x03D5F888 MOV X20, X0
	0x03D5F88C TBNZ X8, 0x0, 0x3D5F8A4
	0x03D5F890 ADRP X0, 0x407000
	0x03D5F894 LDR X0, [X0 + 0x618]
	0x03D5F898 BL 0x1C16CF4
	0x03D5F89C MOVZ W8, 0x1
	0x03D5F8A0 STRB W8, [X21 + 0xC8F]
	0x03D5F8A4 ADRP X24, 0x407000
	0x03D5F8A8 LDR X21, [X20 + 0x428]
	0x03D5F8AC LDR X24, [X24 + 0x618]
	0x03D5F8B0 ADD X20, X20, 0x428
	0x03D5F8B4 MOV X0, X21
	0x03D5F8B8 MOV X1, X19
	0x03D5F8BC MOV X2, X31
	0x03D5F8C0 BL 0x33C0DE4
	0x03D5F8C4 CBZ X0, 0x3D5F8E4
	0x03D5F8C8 LDR X23, [X24]
	0x03D5F8CC MOV X22, X0
	0x03D5F8D0 MOV X1, X23
	0x03D5F8D4 BL 0x1C16E00
	0x03D5F8D8 MOV X1, X0
	0x03D5F8DC CBNZ X0, 0x3D5F8E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x689000
	006 Move W8, [X21+3212]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x404000
	014 Move X0, [X0+2656]
	015 Call 0x1C17CF4
	016 Move X0, 0x3C0000
	017 Move X0, [X0+3360]
	018 Call 0x1C17CF4
	019 Move X0, 0x3BD000
	020 Move X0, [X0+2200]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3212], W8
	024 Move W8, [X20+56]
	025 Compare W8, 0
	026 JumpIfEqual {62}
	027 Move X0, X20
	028 Move X1, X31
	029 Call Manipulator.get_target, X0
	030 Compare X19, 0
	031 JumpIfEqual {95}
	032 Move W1, [X19+156]
	033 Move X2, X31
	034 Call PointerCaptureHelper.HasPointerCapture, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {62}
	039 Move X0, X20
	040 Move X1, X19
	041 Move X2, X31
	042 Call PointerManipulator.CanStopManipulation, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {62}
	047 Move X8, [X19]
	048 Move X0, X19
	049 Move X9, [X8+472]
	050 Move X1, [X8+480]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Compare X0, 0
	053 JumpIfEqual {72}
	054 Move X8, 0x3BD000
	055 Move X8, [X8+2200]
	056 Move X9, [X0]
	057 Move X8, [X8]
	058 Move W11, [X9+304]
	059 Move W10, [X8+304]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X31
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return 
	067 Move X9, [X9+200]
	068 Add X9, X9, X10
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CSEL not yet implemented."
	072 Move X1, [X20+64]
	073 Move S0, [X19+192]
	074 Move S1, [X19+196]
	075 Move X2, X31
	076 Call VisualElementExtensions.ChangeCoordinatesTo, X0, X1, X2
	077 Move X0, X20
	078 Move W1, W31
	079 Call ColumnResizer.EndDragResize, X0, V0, X1
	080 Move X0, X20
	081 Move X1, X31
	082 Move [X20+56], W31
	083 Call Manipulator.get_target, X0
	084 Move W1, [X19+156]
	085 Move X2, X31
	086 Call PointerCaptureHelper.ReleasePointer, X0, X1
	087 Move X0, X19
	088 Move X20, [X31+16]
	089 Move X19, [X31+24]
	090 Move X1, X31
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Call EventBase.StopPropagation, X0
	094 Return 
	095 Call 0x1C17F20

Method: System.Void BeginDragResize(System.Single pos)

Disassembly:
	0x03D5F62C LDR X8, [X27]
	0x03D5F630 LDR X8, [X8 + 0xB8]
	0x03D5F634 LDR X1, [X8 + 0x8]
	0x03D5F638 MOV X0, X21
	0x03D5F63C MOV X2, X31
	0x03D5F640 BL 0x3DF1B54
	0x03D5F644 B 0x3D5F500
	0x03D5F648 MOV X21, X31
	0x03D5F64C CBZ X20, 0x3D5F6A8
	0x03D5F650 LDR X8, [X20]
	0x03D5F654 LDR X1, [X22]
	0x03D5F658 LDRH W9, [X8 + 0x12E]
	0x03D5F65C CBZ X9, 0x3D5F680
	0x03D5F660 LDR X10, [X8 + 0xB0]
	0x03D5F664 ADD X10, X10, 0x8
	0x03D5F668 LDUR X11, [X10 - 0x8]
	0x03D5F66C CMP X11, X1
	0x03D5F670 B.EQ 0x3D5F690

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Move W8, 1
	006 Move [X19+57], W8
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move X1, [X19+72]
	010 Move V0, [X19+48]
	011 Move W2, [X19+96]
	012 Move X3, X31
	013 Call ColumnLayout.BeginDragResize, X0, X1, V0, X2
	014 Move W8, [X19+96]
	015 Compare W8, 0
	016 JumpIfEqual {22}
	017 Move X0, X19
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call ColumnResizer.UpdatePreviewPosition, X0
	021 Return 
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 

Method: System.Void DragResize(System.Single pos)

Disassembly:
	0x03D5F770 LDR X1, [X22]
	0x03D5F774 LDRH W9, [X8 + 0x12E]
	0x03D5F778 CBZ X9, 0x3D5F79C
	0x03D5F77C LDR X10, [X8 + 0xB0]
	0x03D5F780 ADD X10, X10, 0x8
	0x03D5F784 LDUR X11, [X10 - 0x8]
	0x03D5F788 CMP X11, X1
	0x03D5F78C B.EQ 0x3D5F7AC
	0x03D5F790 SUBS X9, X9, 0x1
	0x03D5F794 ADD X10, X10, 0x10
	0x03D5F798 B.NE 0x3D5F784
	0x03D5F79C MOV X0, X20
	0x03D5F7A0 MOV W2, W31
	0x03D5F7A4 BL 0x1C5C788
	0x03D5F7A8 B 0x3D5F7B8
	0x03D5F7AC LDRSW X9, [X10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+57]
	004 Compare W8, 0
	005 JumpIfEqual {21}
	006 Move X19, X0
	007 Move X0, [X0+88]
	008 Compare X0, 0
	009 JumpIfEqual {13}
	010 Move X1, [X19+72]
	011 Move X2, X31
	012 Call ColumnLayout.DragResize, X0, X1, V0
	013 Move W8, [X19+96]
	014 Compare W8, 0
	015 JumpIfEqual {21}
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call ColumnResizer.UpdatePreviewPosition, X0
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 

Method: System.Void UpdatePreviewPosition()

Disassembly:
	0x03D5F8E0 B 0x3D5F914
	0x03D5F8E4 MOV X1, X31
	0x03D5F8E8 MOV X0, X20
	0x03D5F8EC MOV X2, X21
	0x03D5F8F0 BL 0x1C24138
	0x03D5F8F4 CMP X21, X0
	0x03D5F8F8 MOV X21, X0
	0x03D5F8FC B.NE 0x3D5F8B4
	0x03D5F900 LDP X20, X19, [X31 + 0x30]
	0x03D5F904 LDP X22, X21, [X31 + 0x20]
	0x03D5F908 LDP X24, X23, [X31 + 0x10]
	0x03D5F90C LDR X30, [X31], #0x40
	0x03D5F910 RET
	0x03D5F914 MOV X0, X22
	0x03D5F918 MOV X1, X23
	0x03D5F91C BL 0x1C171E0
	0x03D5F920 STR X30, [X31 - 0x40]!
	0x03D5F924 STP X24, X23, [X31 + 0x10]
	0x03D5F928 STP X22, X21, [X31 + 0x20]
	0x03D5F92C STP X20, X19, [X31 + 0x30]
	0x03D5F930 ADRP X21, 0x688000
	0x03D5F934 LDRB W8, [X21 + 0xC90]
	0x03D5F938 MOV X19, X1
	0x03D5F93C MOV X20, X0
	0x03D5F940 TBNZ X8, 0x0, 0x3D5F958
	0x03D5F944 ADRP X0, 0x407000
	0x03D5F948 LDR X0, [X0 + 0x618]
	0x03D5F94C BL 0x1C16CF4
	0x03D5F950 MOVZ W8, 0x1
	0x03D5F954 STRB W8, [X21 + 0xC90]
	0x03D5F958 ADRP X24, 0x407000
	0x03D5F95C LDR X21, [X20 + 0x428]
	0x03D5F960 LDR X24, [X24 + 0x618]
	0x03D5F964 ADD X20, X20, 0x428
	0x03D5F968 MOV X0, X21
	0x03D5F96C MOV X1, X19
	0x03D5F970 MOV X2, X31
	0x03D5F974 BL 0x33C0FDC
	0x03D5F978 CBZ X0, 0x3D5F998
	0x03D5F97C LDR X23, [X24]
	0x03D5F980 MOV X22, X0
	0x03D5F984 MOV X1, X23
	0x03D5F988 BL 0x1C16E00
	0x03D5F98C MOV X1, X0
	0x03D5F990 CBNZ X0, 0x3D5F99C
	0x03D5F994 B 0x3D5F9C8
	0x03D5F998 MOV X1, X31
	0x03D5F99C MOV X0, X20
	0x03D5F9A0 MOV X2, X21
	0x03D5F9A4 BL 0x1C24138
	0x03D5F9A8 CMP X21, X0
	0x03D5F9AC MOV X21, X0
	0x03D5F9B0 B.NE 0x3D5F968
	0x03D5F9B4 LDP X20, X19, [X31 + 0x30]
	0x03D5F9B8 LDP X22, X21, [X31 + 0x20]
	0x03D5F9BC LDP X24, X23, [X31 + 0x10]
	0x03D5F9C0 LDR X30, [X31], #0x40
	0x03D5F9C4 RET
	0x03D5F9C8 MOV X0, X22
	0x03D5F9CC MOV X1, X23
	0x03D5F9D0 BL 0x1C171E0
	0x03D5F9D4 STR X30, [X31 - 0x30]!
	0x03D5F9D8 STP X22, X21, [X31 + 0x10]
	0x03D5F9DC STP X20, X19, [X31 + 0x20]
	0x03D5F9E0 ADRP X21, 0x688000
	0x03D5F9E4 LDRB W8, [X21 + 0xC91]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x689000
	007 Move W8, [X19+3213]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x3BE000
	014 Move X0, [X0+296]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3213], W8
	018 Move X0, [X20+80]
	019 Compare X0, 0
	020 JumpIfEqual {76}
	021 Move X1, X31
	022 Call VisualElement.get_style, X0
	023 Move X8, [X20+88]
	024 Compare X8, 0
	025 JumpIfEqual {76}
	026 Move X1, [X20+72]
	027 Move X19, X0
	028 Move X0, X8
	029 Move X2, X31
	030 Call ColumnLayout.GetDesiredPosition, X0, X1
	031 Move X0, [X20+88]
	032 Compare X0, 0
	033 JumpIfEqual {76}
	034 Move X1, [X20+72]
	035 Move X2, X31
	036 Move V8, V0
	037 Call ColumnLayout.GetDesiredWidth, X0, X1
	038 Add S0, S8, S0
	039 Move X0, X31
	040 Call StyleLength.op_Implicit, V0
	041 Compare X19, 0
	042 JumpIfEqual {76}
	043 Move X10, 0x3BE000
	044 Move X8, [X19]
	045 Move X10, [X10+296]
	046 Move X21, X1
	047 Move X20, X0
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move X1, [X10]
	050 Compare X9, 0
	051 JumpIfEqual {58}
	052 Move X10, [X8+176]
	053 Add X10, X10, 8
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Subtract X9, X9, 1
	057 Add X10, X10, 16
	058 Move W2, 25
	059 Move X0, X19
	060 Call 0x1C5D788
	061 Move W9, [X10]
	062 Add W9, W9, 25
	063 Add X8, X8, W9
	064 Add X0, X8, 312
	065 Move X4, [X0]
	066 Move X3, [X0+8]
	067 And X2, X21, 0
	068 Move X0, X19
	069 Move X1, X20
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X30, [X31+16]
	073 Move X21, [X31+24]
	074 Move V8, [X31+48]
	075 CallNoReturn X4
	076 Call 0x1C17F20

Method: System.Void EndDragResize(System.Single pos, System.Boolean cancelled)

Disassembly:
	0x03D5F3C8 LDRSW X9, [X10]
	0x03D5F3CC ADD X8, X8, X9, 0x4, LSL
	0x03D5F3D0 ADD X0, X8, 0x138
	0x03D5F3D4 LDP X8, X1, [X0]
	0x03D5F3D8 MOV X0, X20
	0x03D5F3DC BLR X8
	0x03D5F3E0 MOV X21, X0
	0x03D5F3E4 LDR X0, [X19 + 0x400]
	0x03D5F3E8 CBZ X0, 0x3D5F6CC
	0x03D5F3EC LDR X3, [X25]
	0x03D5F3F0 ADD X2, X31, 0x8
	0x03D5F3F4 MOV X1, X21
	0x03D5F3F8 BL 0x2AA6B2C
	0x03D5F3FC TBZ X0, 0x0, 0x3D5F328
	0x03D5F400 LDRB W8, [X19 + 0x3C8]
	0x03D5F404 CBZ W8, 0x3D5F328
	0x03D5F408 CBZ X21, 0x3D5F6D4
	0x03D5F40C LDRB W8, [X21 + 0x61]
	0x03D5F410 CBZ W8, 0x3D5F328
	0x03D5F414 MOVZ W26, 0x1
	0x03D5F418 B 0x3D5F328
	0x03D5F41C MOV X21, X31
	0x03D5F420 CBZ X20, 0x3D5F47C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+57]
	005 Compare W8, 0
	006 JumpIfEqual {26}
	007 Move W8, [X0+96]
	008 Move X19, X0
	009 Move W20, W1
	010 Compare W8, 0
	011 JumpIfEqual {18}
	012 Move X0, [X19+80]
	013 Compare X0, 0
	014 JumpIfEqual {17}
	015 Move X1, X31
	016 Call VisualElement.RemoveFromHierarchy, X0
	017 Move [X19+80], X31
	018 Move X0, [X19+88]
	019 Compare X0, 0
	020 JumpIfEqual {25}
	021 Move X1, [X19+72]
	022 And W2, W20, 1
	023 Move X3, X31
	024 Call ColumnLayout.EndDragResize, X0, X1, X2
	025 Move [X19+57], W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return 

