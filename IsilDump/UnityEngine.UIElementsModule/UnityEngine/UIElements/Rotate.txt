Type: UnityEngine.UIElements.Rotate

Method: System.Void .ctor(UnityEngine.UIElements.Angle angle)

Disassembly:
	0x03DFE7D8 STR X1, [X0]
	0x03DFE7DC RET
	0x03DFE7E0 STR W2, [X0 + 0x8]
	0x03DFE7E4 STR X1, [X0]
	0x03DFE7E8 RET
	0x03DFE7EC STP X30, X23, [X31 - 0x30]!
	0x03DFE7F0 STP X22, X21, [X31 + 0x10]
	0x03DFE7F4 STP X20, X19, [X31 + 0x20]
	0x03DFE7F8 ADRP X23, 0x5EA000
	0x03DFE7FC LDRB W8, [X23 + 0x2C6]
	0x03DFE800 MOV X21, X3
	0x03DFE804 MOV X19, X2
	0x03DFE808 MOV X22, X1
	0x03DFE80C MOV X20, X0
	0x03DFE810 TBNZ X8, 0x0, 0x3DFE828
	0x03DFE814 ADRP X0, 0x2F5000
	0x03DFE818 LDR X0, [X0 + 0x598]
	0x03DFE81C BL 0x1C16CF4
	0x03DFE820 MOVZ W8, 0x1
	0x03DFE824 STRB W8, [X23 + 0x2C6]
	0x03DFE828 CMP W22, W21
	0x03DFE82C B.NE 0x3DFE864
	0x03DFE830 ADRP X8, 0x2F5000
	0x03DFE834 LDR X8, [X8 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X0], X1
	005 Move X20, 0x5DB000
	006 Move W8, [X20+2591]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, 0x2F6000
	011 Move X0, [X0+1440]
	012 Call 0x1C17CF4
	013 Move W8, 1
	014 Move [X20+2591], W8
	015 Move X8, 0x2F6000
	016 Move X8, [X8+1440]
	017 Move X8, [X8]
	018 Move X8, [X8+184]
	019 Move V0, [X8+72]
	020 Move V1, [X8+80]
	021 Move [X19+20], W31
	022 Move [X19+8], D0
	023 Move [X19+16], S1
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return 

Method: UnityEngine.UIElements.Rotate Initial()

Disassembly:
	0x03DFE838 LDR X0, [X8]
	0x03DFE83C LDR W8, [X0 + 0xE0]
	0x03DFE840 CBNZ W8, 0x3DFE848
	0x03DFE844 BL 0x1C16DFC
	0x03DFE848 MOV X0, X20
	0x03DFE84C MOV X1, X19
	0x03DFE850 LDP X20, X19, [X31 + 0x20]
	0x03DFE854 LDP X22, X21, [X31 + 0x10]
	0x03DFE858 MOV X2, X31
	0x03DFE85C LDP X30, X23, [X31], #0x30
	0x03DFE860 B 0x3C3883C
	0x03DFE864 LDP X20, X19, [X31 + 0x20]
	0x03DFE868 LDP X22, X21, [X31 + 0x10]
	0x03DFE86C MOV W0, W31
	0x03DFE870 LDP X30, X23, [X31], #0x30
	0x03DFE874 RET
	0x03DFE878 MOV X1, X31
	0x03DFE87C RET
	0x03DFE880 MOV X8, X2
	0x03DFE884 LDP X2, X3, [X0]
	0x03DFE888 MOV X0, X1
	0x03DFE88C MOV X1, X8
	0x03DFE890 B 0x3DFE7EC
	0x03DFE894 STP X30, X21, [X31 - 0x20]!
	0x03DFE898 STP X20, X19, [X31 + 0x10]
	0x03DFE89C ADRP X21, 0x5EA000
	0x03DFE8A0 LDRB W8, [X21 + 0x2C7]
	0x03DFE8A4 MOV X20, X1
	0x03DFE8A8 MOV X19, X0
	0x03DFE8AC TBNZ X8, 0x0, 0x3DFE8C4
	0x03DFE8B0 ADRP X0, 0x36B000
	0x03DFE8B4 LDR X0, [X0 + 0xD58]
	0x03DFE8B8 BL 0x1C16CF4
	0x03DFE8BC MOVZ W8, 0x1
	0x03DFE8C0 STRB W8, [X21 + 0x2C7]
	0x03DFE8C4 CBZ X20, 0x3DFE8E0
	0x03DFE8C8 ADRP X8, 0x36B000
	0x03DFE8CC LDR X8, [X8 + 0xD58]
	0x03DFE8D0 LDR X9, [X20]
	0x03DFE8D4 LDR X8, [X8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move S0, W31
	007 Move X0, X31
	008 Move X19, X8
	009 Call Angle.op_Implicit, V0
	010 Move X21, 0x5DB000
	011 Move W8, [X21+2591]
	012 Move X20, X0
	013 Move [X31+10], W31
	014 NotImplemented "Instruction STRH not yet implemented."
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0x2F6000
	018 Move X0, [X0+1440]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2591], W8
	022 Move X8, 0x2F6000
	023 Move X8, [X8+1440]
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move W10, [X31+10]
	026 Move X30, [X31+16]
	027 Move X21, [X31+24]
	028 Move X8, [X8]
	029 Move X8, [X8+184]
	030 Move V0, [X8+72]
	031 Move V1, [X8+80]
	032 NotImplemented "Instruction STRH not yet implemented."
	033 And W8, W10, 255
	034 And W9, W9, 0xFFFF
	035 Move [X19], X20
	036 Move [X19+20], W31
	037 Move [X19+8], D0
	038 Move [X19+16], S1
	039 Move [X19+23], W8
	040 NotImplemented "Instruction STURH not yet implemented."
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move [X31+14], W10
	044 Add X31, X31, 48
	045 Return X0

Method: UnityEngine.UIElements.Rotate None()

Disassembly:
	0x03DFE8D8 CMP X9, X8
	0x03DFE8DC B.EQ 0x3DFE8F0
	0x03DFE8E0 LDP X20, X19, [X31 + 0x10]
	0x03DFE8E4 MOV W0, W31
	0x03DFE8E8 LDP X30, X21, [X31], #0x20
	0x03DFE8EC RET
	0x03DFE8F0 MOV X0, X20
	0x03DFE8F4 BL 0x1C16E08
	0x03DFE8F8 LDP X8, X1, [X0]
	0x03DFE8FC LDP X2, X3, [X19]
	0x03DFE900 LDP X20, X19, [X31 + 0x10]
	0x03DFE904 MOV X0, X8
	0x03DFE908 LDP X30, X21, [X31], #0x20
	0x03DFE90C B 0x3DFE7EC
	0x03DFE910 STP X30, X21, [X31 - 0x20]!
	0x03DFE914 STP X20, X19, [X31 + 0x10]
	0x03DFE918 ADRP X21, 0x5EA000
	0x03DFE91C ADRP X20, 0x2F5000
	0x03DFE920 LDRB W8, [X21 + 0x2C8]
	0x03DFE924 LDR X20, [X20 + 0x598]
	0x03DFE928 MOV X19, X0
	0x03DFE92C TBNZ X8, 0x0, 0x3DFE944
	0x03DFE930 ADRP X0, 0x2F5000
	0x03DFE934 LDR X0, [X0 + 0x598]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X19, X8
	005 Add X8, X31, 0
	006 Call Rotate.Initial
	007 Move W10, 1
	008 Move W8, [X31+16]
	009 NotImplemented "Instruction LDURH not yet implemented."
	010 Move [X19+20], W10
	011 Move W10, [X31+23]
	012 Move V0, [X31]
	013 NotImplemented "Instruction STRH not yet implemented."
	014 Move [X31+48], W8
	015 Move [X19+16], W8
	016 And W8, W10, 255
	017 And W9, W9, 0xFFFF
	018 Move [X19], V0
	019 Move [X19+23], W8
	020 NotImplemented "Instruction STURH not yet implemented."
	021 Move X30, [X31+64]
	022 Move X19, [X31+72]
	023 Move [X31+30], W10
	024 Move [X31+2], V0
	025 Add X31, X31, 80
	026 Return X0

Method: UnityEngine.UIElements.Angle get_angle()

Disassembly:
	0x03DFE938 BL 0x1C16CF4
	0x03DFE93C MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_angle(UnityEngine.UIElements.Angle value)

Disassembly:
	0x03DFE940 STRB W8, [X21 + 0x2C8]
	0x03DFE944 LDR X0, [X20]

ISIL:
	001 Move [X0], X1
	002 Return 

Method: UnityEngine.Vector3 get_axis()

Disassembly:
	0x03DFE948 LDR X20, [X19]
	0x03DFE94C LDR W8, [X0 + 0xE0]
	0x03DFE950 CBNZ W8, 0x3DFE958

ISIL:
	001 Move S0, [X0+8]
	002 Move S1, [X0+12]
	003 Move V2, [X0+16]
	004 Return X0

Method: System.Boolean op_Equality(UnityEngine.UIElements.Rotate lhs, UnityEngine.UIElements.Rotate rhs)

Disassembly:
	0x03DFCDD0 BL 0x338FE0C
	0x03DFCDD4 MUL W8, W24, W26
	0x03DFCDD8 EOR W8, W23, W8, 0x0
	0x03DFCDDC EOR W8, W8, W22, 0x2
	0x03DFCDE0 EOR W8, W8, W21, 0x2
	0x03DFCDE4 EOR W20, W8, W0, 0x1
	0x03DFCDE8 ADD X0, X19, 0xB4
	0x03DFCDEC MOV X1, X31
	0x03DFCDF0 BL 0x338FE0C
	0x03DFCDF4 LDR W8, [X19 + 0xB8]
	0x03DFCDF8 MUL W9, W0, W26
	0x03DFCDFC MUL W10, W20, W26
	0x03DFCE00 ADD X0, X19, 0xBC
	0x03DFCE04 EOR W8, W9, W8, 0x0
	0x03DFCE08 MOV X1, X31
	0x03DFCE0C EOR W20, W8, W10, 0x0
	0x03DFCE10 BL 0x338FE0C
	0x03DFCE14 LDR W8, [X19 + 0xC0]
	0x03DFCE18 MUL W9, W0, W26
	0x03DFCE1C MUL W10, W20, W26
	0x03DFCE20 ADD X0, X19, 0xC4
	0x03DFCE24 EOR W8, W9, W8, 0x0
	0x03DFCE28 MOV X1, X31
	0x03DFCE2C EOR W20, W8, W10, 0x0
	0x03DFCE30 BL 0x338FE0C
	0x03DFCE34 MUL W9, W20, W26
	0x03DFCE38 LDR W8, [X19 + 0xC8]
	0x03DFCE3C EOR W9, W9, W0, 0x0
	0x03DFCE40 MUL W9, W9, W26
	0x03DFCE44 LDP X20, X19, [X31 + 0x50]
	0x03DFCE48 LDP X22, X21, [X31 + 0x40]
	0x03DFCE4C LDP X24, X23, [X31 + 0x30]
	0x03DFCE50 LDP X26, X25, [X31 + 0x20]
	0x03DFCE54 LDP X30, X27, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Move X0, [X0]
	007 Move X1, [X1]
	008 Move X2, X31
	009 Call Angle.op_Equality, X0, X1
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {33}
	014 Move V0, [X20+8]
	015 NotImplemented "Instruction LDUR not yet implemented."
	016 Move V2, [X19+8]
	017 NotImplemented "Instruction LDUR not yet implemented."
	018 Move X8, -53551104
	019 Move V4, [X8+3872]
	020 Subtract S0, S0, S2
	021 Subtract V1, V1, V3
	022 Multiply S0, S0, S0
	023 NotImplemented "Instruction INVALID not yet implemented."
	024 Add S0, S0, S1
	025 Move S1, V1.S[1]
	026 Add S0, S1, S0
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 Move W8, [X20+20]
	029 Move W9, [X19+20]
	030 Xor W8, W9, W8
	031 And W31, W8, 1
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move W0, W31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0

Method: System.Boolean op_Inequality(UnityEngine.UIElements.Rotate lhs, UnityEngine.UIElements.Rotate rhs)

Disassembly:
	0x03DFE954 BL 0x1C16DFC
	0x03DFE958 MOV X0, X20
	0x03DFE95C MOV X1, X31
	0x03DFE960 MOV X2, X31
	0x03DFE964 BL 0x3C354F8
	0x03DFE968 TBZ X0, 0x0, 0x3DFE98C
	0x03DFE96C LDR X0, [X19]
	0x03DFE970 CBZ X0, 0x3DFE9A4
	0x03DFE974 LDR X8, [X0]
	0x03DFE978 LDP X9, X1, [X8 + 0x158]
	0x03DFE97C BLR X9
	0x03DFE980 MOVZ W8, 0x18D
	0x03DFE984 MUL W8, W0, W8
	0x03DFE988 B 0x3DFE990
	0x03DFE98C MOV W8, W31
	0x03DFE990 LDR W9, [X19 + 0x8]
	0x03DFE994 LDP X20, X19, [X31 + 0x10]
	0x03DFE998 EOR W0, W9, W8, 0x0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move X8, [X0+16]
	004 Move V0, [X0]
	005 Add X0, X31, 32
	006 Move [X31+48], X8
	007 Move [X31+2], V0
	008 Move X8, [X1+16]
	009 Move V0, [X1]
	010 Add X1, X31, 0
	011 Move [X31+16], X8
	012 Move [X31], V0
	013 Call Rotate.op_Equality, X0, X1
	014 Move X30, [X31+64]
	015 NotImplemented "Instruction ORN not yet implemented."
	016 And W0, W8, 1
	017 Add X31, X31, 80
	018 Return X0

Method: System.Boolean Equals(UnityEngine.UIElements.Rotate other)

Disassembly:
	0x03DFE99C LDP X30, X21, [X31], #0x20
	0x03DFE9A0 RET
	0x03DFE9A4 BL 0x1C16F20
	0x03DFE9A8 SUB X31, X31, 0x40
	0x03DFE9AC STR X30, [X31 + 0x10]
	0x03DFE9B0 STP X22, X21, [X31 + 0x20]
	0x03DFE9B4 STP X20, X19, [X31 + 0x30]
	0x03DFE9B8 ADRP X22, 0x5EA000
	0x03DFE9BC ADRP X21, 0x36B000
	0x03DFE9C0 ADRP X20, 0x36B000
	0x03DFE9C4 LDRB W8, [X22 + 0x2C9]
	0x03DFE9C8 LDR X21, [X21 + 0xD58]
	0x03DFE9CC LDR X20, [X20 + 0xD60]
	0x03DFE9D0 MOV X19, X0
	0x03DFE9D4 TBNZ X8, 0x0, 0x3DFE9F8
	0x03DFE9D8 ADRP X0, 0x36B000
	0x03DFE9DC LDR X0, [X0 + 0xD58]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X31, 0
	006 Move [X31+48], X8
	007 Move [X31+2], V0
	008 Move X8, [X0+16]
	009 Move V0, [X0]
	010 Add X0, X31, 32
	011 Move [X31+16], X8
	012 Move [X31], V0
	013 Call Rotate.op_Equality, X0, X1
	014 Move X30, [X31+64]
	015 And W0, W0, 1
	016 Add X31, X31, 80
	017 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03DFE9E0 BL 0x1C16CF4
	0x03DFE9E4 ADRP X0, 0x36B000
	0x03DFE9E8 LDR X0, [X0 + 0xD60]
	0x03DFE9EC BL 0x1C16CF4
	0x03DFE9F0 MOVZ W8, 0x1
	0x03DFE9F4 STRB W8, [X22 + 0x2C9]
	0x03DFE9F8 LDR V0, [X19]
	0x03DFE9FC LDR X0, [X21]
	0x03DFEA00 ADD X1, X31, 0x0
	0x03DFEA04 STR V0, [X31]
	0x03DFEA08 BL 0x1C16E04
	0x03DFEA0C LDR X1, [X20]
	0x03DFEA10 BL 0x2295C4C
	0x03DFEA14 LDP X20, X19, [X31 + 0x30]
	0x03DFEA18 LDP X22, X21, [X31 + 0x20]
	0x03DFEA1C LDR X30, [X31 + 0x10]
	0x03DFEA20 ADD X31, X31, 0x40
	0x03DFEA24 RET
	0x03DFEA28 STP X31, X31, [X31 - 0x10]!
	0x03DFEA2C LDR W8, [X0]
	0x03DFEA30 CBZ W8, 0x3DFEA44
	0x03DFEA34 ADD X8, X31, 0x8
	0x03DFEA38 STP X31, X31, [X31]
	0x03DFEA3C ADD X9, X31, 0x0
	0x03DFEA40 B 0x3DFEA4C
	0x03DFEA44 ADD X8, X0, 0x8
	0x03DFEA48 ADD X9, X0, 0x10
	0x03DFEA4C LDR X0, [X8]
	0x03DFEA50 LDR X1, [X9]
	0x03DFEA54 ADD X31, X31, 0x10
	0x03DFEA58 RET
	0x03DFEA5C LDR W0, [X0]
	0x03DFEA60 RET
	0x03DFEA64 STR W31, [X0]
	0x03DFEA68 STP X1, X2, [X0 + 0x8]
	0x03DFEA6C RET
	0x03DFEA70 STR W3, [X0]
	0x03DFEA74 STP X1, X2, [X0 + 0x8]
	0x03DFEA78 RET
	0x03DFEA7C STP X31, X0, [X8]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x5EB000
	007 Move W8, [X21+697]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x321000
	015 Move X0, [X0+3608]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+697], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x321000
	022 Move X8, [X8+3608]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X8, [X0+16]
	030 Move V0, [X0]
	031 Add X0, X31, 32
	032 Add X1, X31, 0
	033 Move [X31+48], X8
	034 Move [X31+2], V0
	035 Move X8, [X19+16]
	036 Move V0, [X19]
	037 Move [X31+16], X8
	038 Move [X31], V0
	039 Call Rotate.op_Equality, X0, X1
	040 Move X20, [X31+80]
	041 Move X19, [X31+88]
	042 Move X30, [X31+64]
	043 Move X21, [X31+72]
	044 And W0, W0, 1
	045 Add X31, X31, 96
	046 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03DFD0C0 STP X30, X19, [X31 + 0x20]
	0x03DFD0C4 MRS X19, 0xC000
	0x03DFD0C8 LDR X8, [X19 + 0x28]
	0x03DFD0CC ADD X2, X31, 0x0
	0x03DFD0D0 STR X8, [X31 + 0x18]
	0x03DFD0D4 STP X31, X31, [X31]
	0x03DFD0D8 STR X31, [X31 + 0x10]
	0x03DFD0DC BL 0x3DFCED8
	0x03DFD0E0 LDP W9, W8, [X31 + 0x4]
	0x03DFD0E4 LDR X10, [X19 + 0x28]
	0x03DFD0E8 LDR X11, [X31 + 0x18]
	0x03DFD0EC ANDS W31, W0, 0x1
	0x03DFD0F0 MOVZ X12, 0x1
	0x03DFD0F4 BFM X8, X9, 0x20, 0x1F
	0x03DFD0F8 CSEL X0, X8, X12, NE
	0x03DFD0FC CMP X10, X11
	0x03DFD100 B.NE 0x3DFD110
	0x03DFD104 LDP X30, X19, [X31 + 0x20]
	0x03DFD108 ADD X31, X31, 0x30
	0x03DFD10C RET
	0x03DFD110 BL 0x3EB1B20
	0x03DFD114 STR W1, [X0 + 0x4]
	0x03DFD118 STR S0, [X0]
	0x03DFD11C RET
	0x03DFD120 UBFM X0, X0, 0x20, 0x1F
	0x03DFD124 RET
	0x03DFD128 SUB X31, X31, 0x30
	0x03DFD12C STP X30, X19, [X31 + 0x20]
	0x03DFD130 MRS X19, 0xC000
	0x03DFD134 LDR X8, [X19 + 0x28]
	0x03DFD138 ADD X2, X31, 0x0
	0x03DFD13C STR X8, [X31 + 0x18]
	0x03DFD140 STP X31, X31, [X31]
	0x03DFD144 STR X31, [X31 + 0x10]
	0x03DFD148 BL 0x3DFCED8
	0x03DFD14C TBZ X0, 0x0, 0x3DFD178
	0x03DFD150 LDR V0, [X31 + 0x8]
	0x03DFD154 MOVZ W8, 0x7F800000
	0x03DFD158 LDR W9, [X31 + 0x4]
	0x03DFD15C FMOV S1, W8
	0x03DFD160 FCVTZS W8, S0
	0x03DFD164 FCMP S0, S1
	0x03DFD168 MOVZ W10, 0x80000000
	0x03DFD16C CSEL X0, X10, X8, EQ
	0x03DFD170 BFM X0, X9, 0x20, 0x1F
	0x03DFD174 B 0x3DFD17C
	0x03DFD178 MOVZ X0, 0x1
	0x03DFD17C LDR X8, [X19 + 0x28]
	0x03DFD180 LDR X9, [X31 + 0x18]
	0x03DFD184 CMP X8, X9
	0x03DFD188 B.NE 0x3DFD198
	0x03DFD18C LDP X30, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x5EC000
	008 Move X23, 0x2F7000
	009 Move W8, [X20+698]
	010 Move X23, [X23+2904]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2F7000
	017 Move X0, [X0+2904]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+698], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Angle.GetHashCode, X0
	024 Move W20, W0
	025 Add X0, X19, 8
	026 Move X1, X31
	027 Call Single.GetHashCode, X0
	028 Move W21, W0
	029 Add X0, X19, 12
	030 Move X1, X31
	031 Call Single.GetHashCode, X0
	032 Move W22, W0
	033 Add X0, X19, 16
	034 Move X1, X31
	035 Call Single.GetHashCode, X0
	036 Move X8, [X23]
	037 Move W23, W0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Add X0, X19, 20
	044 Xor W8, W21, W22
	045 Move X1, X31
	046 Xor W19, W8, W23
	047 Call Boolean.GetHashCode, X0
	048 Move W8, 793
	049 Move W9, 791
	050 Multiply W8, W20, W8
	051 Multiply W9, W19, W9
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move W10, 197
	057 Multiply W10, W0, W10
	058 Xor W8, W9, W8
	059 Xor W0, W8, W10
	060 Move X30, [X31+48]
	061 Move X23, [X31+56]
	062 Return X0

Method: System.String ToString()

Disassembly:
	0x03DFEA80 STR X1, [X8 + 0x10]
	0x03DFEA84 RET
	0x03DFEA88 LDR W8, [X0]
	0x03DFEA8C LDR W9, [X1]
	0x03DFEA90 CMP W8, W9
	0x03DFEA94 B.NE 0x3DFEAAC
	0x03DFEA98 LDP X8, X2, [X1 + 0x8]
	0x03DFEA9C ADD X0, X0, 0x8
	0x03DFEAA0 MOV X3, X31
	0x03DFEAA4 MOV X1, X8
	0x03DFEAA8 B 0x3DE4C60
	0x03DFEAAC MOV W0, W31
	0x03DFEAB0 RET
	0x03DFEAB4 STP X30, X21, [X31 - 0x20]!
	0x03DFEAB8 STP X20, X19, [X31 + 0x10]
	0x03DFEABC ADRP X21, 0x5EA000
	0x03DFEAC0 LDRB W8, [X21 + 0x2CA]
	0x03DFEAC4 MOV X20, X1
	0x03DFEAC8 MOV X19, X0
	0x03DFEACC TBNZ X8, 0x0, 0x3DFEAE4
	0x03DFEAD0 ADRP X0, 0x36B000
	0x03DFEAD4 LDR X0, [X0 + 0xD68]
	0x03DFEAD8 BL 0x1C16CF4
	0x03DFEADC MOVZ W8, 0x1
	0x03DFEAE0 STRB W8, [X21 + 0x2CA]
	0x03DFEAE4 CBZ X20, 0x3DFEB30
	0x03DFEAE8 ADRP X8, 0x36B000
	0x03DFEAEC LDR X8, [X8 + 0xD68]
	0x03DFEAF0 LDR X9, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5EB000
	006 Move X21, 0x2F6000
	007 Move W8, [X20+699]
	008 Move X21, [X21+3544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2F6000
	015 Move X0, [X0+3544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+699], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Angle.ToString, X0
	022 Move X20, X0
	023 Add X0, X19, 8
	024 Move X1, X31
	025 Move X2, X31
	026 Move X3, X31
	027 Call 0x2431694
	028 Move X1, [X21]
	029 Move X2, X0
	030 Move X0, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X3, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call String.Concat, X0, X1, X2
	037 Return X0

Method: UnityEngine.Quaternion ToQuaternion()

Disassembly:
	0x03DFEAF4 LDR X8, [X8]
	0x03DFEAF8 CMP X9, X8
	0x03DFEAFC B.NE 0x3DFEB30
	0x03DFEB00 MOV X0, X20
	0x03DFEB04 BL 0x1C16E08
	0x03DFEB08 LDR W8, [X0]
	0x03DFEB0C LDR W9, [X19]
	0x03DFEB10 CMP W9, W8
	0x03DFEB14 B.NE 0x3DFEB30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Angle.ToDegrees, X0
	006 Move S1, [X19+8]
	007 Move S2, [X19+12]
	008 Move V3, [X19+16]
	009 Move X0, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call Quaternion.AngleAxis, V0, X0
	013 Return X0

