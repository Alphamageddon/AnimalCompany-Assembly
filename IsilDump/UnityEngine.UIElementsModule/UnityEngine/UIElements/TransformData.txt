Type: UnityEngine.UIElements.TransformData

Method: UnityEngine.UIElements.TransformData Copy()

Disassembly:
	0x03DFCC1C EOR W23, W8, W0, 0x0
	0x03DFCC20 ADD X0, X19, 0x48
	0x03DFCC24 MOV X1, X31
	0x03DFCC28 BL 0x3CE9B10
	0x03DFCC2C MUL W8, W23, W26
	0x03DFCC30 EOR W23, W8, W0, 0x0
	0x03DFCC34 ADD X0, X19, 0x50

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X0
	003 Move X0, X8
	004 Move W2, 84
	005 Call 0x3EB2AC0
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Void CopyFrom(ref UnityEngine.UIElements.TransformData other)

Disassembly:
	0x03DFCC38 MOV X1, X31
	0x03DFCC3C BL 0x3CE9DD8
	0x03DFCC40 LDUR V0, [X19 + 0x64]
	0x03DFCC44 MUL W8, W23, W26
	0x03DFCC48 EOR W27, W8, W0, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move W2, 84
	003 Call 0x3EB2B30
	004 Move X30, [X31+16]
	005 Return 

Method: System.Boolean op_Equality(UnityEngine.UIElements.TransformData lhs, UnityEngine.UIElements.TransformData rhs)

Disassembly:
	0x03DFCC4C ADD X0, X31, 0x0
	0x03DFCC50 MOV X1, X31
	0x03DFCC54 STR V0, [X31]
	0x03DFCC58 BL 0x338FE0C
	0x03DFCC5C MOV W23, W0
	0x03DFCC60 MOV X0, X22
	0x03DFCC64 MOV X1, X31
	0x03DFCC68 BL 0x338FE0C
	0x03DFCC6C MOV W24, W0
	0x03DFCC70 MOV X0, X21
	0x03DFCC74 MOV X1, X31
	0x03DFCC78 BL 0x338FE0C
	0x03DFCC7C MOV W25, W0
	0x03DFCC80 MOV X0, X20
	0x03DFCC84 MOV X1, X31
	0x03DFCC88 BL 0x338FE0C
	0x03DFCC8C MUL W8, W27, W26
	0x03DFCC90 EOR W8, W23, W8, 0x0
	0x03DFCC94 EOR W8, W8, W24, 0x2
	0x03DFCC98 EOR W8, W8, W25, 0x2
	0x03DFCC9C EOR W23, W8, W0, 0x1
	0x03DFCCA0 ADD X0, X19, 0x74
	0x03DFCCA4 MOV X1, X31
	0x03DFCCA8 BL 0x338FE0C
	0x03DFCCAC LDR W8, [X19 + 0x78]
	0x03DFCCB0 MUL W9, W0, W26
	0x03DFCCB4 MUL W10, W23, W26
	0x03DFCCB8 ADD X0, X19, 0x7C
	0x03DFCCBC EOR W8, W9, W8, 0x0
	0x03DFCCC0 MOV X1, X31
	0x03DFCCC4 EOR W23, W8, W10, 0x0
	0x03DFCCC8 BL 0x338FE0C
	0x03DFCCCC LDR W8, [X19 + 0x80]
	0x03DFCCD0 LDUR V0, [X19 + 0x84]
	0x03DFCCD4 MUL W9, W0, W26
	0x03DFCCD8 MUL W10, W23, W26
	0x03DFCCDC EOR W8, W9, W8, 0x0
	0x03DFCCE0 ADD X0, X31, 0x0
	0x03DFCCE4 MOV X1, X31
	0x03DFCCE8 EOR W27, W8, W10, 0x0
	0x03DFCCEC STR V0, [X31]
	0x03DFCCF0 BL 0x338FE0C
	0x03DFCCF4 MOV W23, W0
	0x03DFCCF8 MOV X0, X22
	0x03DFCCFC MOV X1, X31
	0x03DFCD00 BL 0x338FE0C
	0x03DFCD04 MOV W24, W0
	0x03DFCD08 MOV X0, X21
	0x03DFCD0C MOV X1, X31
	0x03DFCD10 BL 0x338FE0C
	0x03DFCD14 MOV W25, W0
	0x03DFCD18 MOV X0, X20
	0x03DFCD1C MOV X1, X31
	0x03DFCD20 BL 0x338FE0C
	0x03DFCD24 MUL W8, W27, W26
	0x03DFCD28 LDUR V0, [X19 + 0x94]
	0x03DFCD2C EOR W8, W23, W8, 0x0
	0x03DFCD30 EOR W8, W8, W24, 0x2
	0x03DFCD34 EOR W8, W8, W25, 0x2
	0x03DFCD38 EOR W27, W8, W0, 0x1
	0x03DFCD3C ADD X0, X31, 0x0
	0x03DFCD40 MOV X1, X31
	0x03DFCD44 STR V0, [X31]
	0x03DFCD48 BL 0x338FE0C
	0x03DFCD4C MOV W23, W0
	0x03DFCD50 MOV X0, X22
	0x03DFCD54 MOV X1, X31
	0x03DFCD58 BL 0x338FE0C
	0x03DFCD5C MOV W24, W0
	0x03DFCD60 MOV X0, X21
	0x03DFCD64 MOV X1, X31
	0x03DFCD68 BL 0x338FE0C
	0x03DFCD6C MOV W25, W0
	0x03DFCD70 MOV X0, X20
	0x03DFCD74 MOV X1, X31
	0x03DFCD78 BL 0x338FE0C
	0x03DFCD7C MUL W8, W27, W26
	0x03DFCD80 LDUR V0, [X19 + 0xA4]
	0x03DFCD84 EOR W8, W23, W8, 0x0
	0x03DFCD88 EOR W8, W8, W24, 0x2
	0x03DFCD8C EOR W8, W8, W25, 0x2
	0x03DFCD90 EOR W24, W8, W0, 0x1
	0x03DFCD94 ADD X0, X31, 0x0
	0x03DFCD98 MOV X1, X31
	0x03DFCD9C STR V0, [X31]
	0x03DFCDA0 BL 0x338FE0C
	0x03DFCDA4 MOV W23, W0
	0x03DFCDA8 MOV X0, X22
	0x03DFCDAC MOV X1, X31
	0x03DFCDB0 BL 0x338FE0C
	0x03DFCDB4 MOV W22, W0
	0x03DFCDB8 MOV X0, X21
	0x03DFCDBC MOV X1, X31
	0x03DFCDC0 BL 0x338FE0C
	0x03DFCDC4 MOV W21, W0
	0x03DFCDC8 MOV X0, X20
	0x03DFCDCC MOV X1, X31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X8, [X0+16]
	006 Move V0, [X0]
	007 Move X19, X1
	008 Move X20, X0
	009 Move [X31+48], X8
	010 Move [X31+2], V0
	011 Move X8, [X1+16]
	012 Move V0, [X1]
	013 Add X0, X31, 32
	014 Add X1, X31, 0
	015 Move [X31+16], X8
	016 Move [X31], V0
	017 Call Rotate.op_Equality, X0, X1
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {97}
	022 NotImplemented "Instruction LDUR not yet implemented."
	023 NotImplemented "Instruction LDUR not yet implemented."
	024 Move X8, D0
	025 Move X9, D1
	026 Move X8, X8
	027 ShiftRight X8, 32
	028 And X8, X8, 0x7FFFFFFF
	029 Move X9, X9
	030 ShiftRight X9, 32
	031 And X9, X9, 0x7FFFFFFF
	032 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	033 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	034 Move S1, W8
	035 Move S3, W9
	036 Move X8, -53551104
	037 Subtract S1, S1, S3
	038 Move V3, [X8+3872]
	039 Subtract V0, V2, V0
	040 Multiply S1, S1, S1
	041 NotImplemented "Instruction INVALID not yet implemented."
	042 Add S1, S0, S1
	043 Move S0, V0.S[1]
	044 Add S0, S0, S1
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move V0, [X20+40]
	047 Move V1, [X19+40]
	048 Move W0, W31
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move W8, [X20+44]
	051 Move W9, [X19+44]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, [X20+48]
	054 Move X9, [X19+48]
	055 Move W0, W31
	056 Move S0, W8
	057 Move S1, W9
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 Move X8, X8
	060 ShiftRight X8, 32
	061 And X8, X8, 0x7FFFFFFF
	062 Move X9, X9
	063 ShiftRight X9, 32
	064 And X9, X9, 0x7FFFFFFF
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move V0, [X19+56]
	067 Move V1, [X20+56]
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Move V0, [X20+60]
	070 Move V1, [X19+60]
	071 Move W0, W31
	072 NotImplemented "Instruction FCMP not yet implemented."
	073 Move W8, [X20+64]
	074 Move W9, [X19+64]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction LDUR not yet implemented."
	077 NotImplemented "Instruction LDUR not yet implemented."
	078 Move W0, W31
	079 Move S0, W8
	080 Move S1, W9
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Move X8, X8
	083 ShiftRight X8, 32
	084 And X8, X8, 0x7FFFFFFF
	085 Move X9, X9
	086 ShiftRight X9, 32
	087 And X9, X9, 0x7FFFFFFF
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move V0, [X19+76]
	090 Move V1, [X20+76]
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 Move W8, [X20+80]
	093 Move W9, [X19+80]
	094 Xor W8, W9, W8
	095 And W31, W8, 1
	096 NotImplemented "Instruction CSET not yet implemented."
	097 Move W0, W31
	098 Move X20, [X31+80]
	099 Move X19, [X31+88]
	100 Move X30, [X31+64]
	101 Add X31, X31, 96
	102 Return X0

Method: System.Boolean Equals(UnityEngine.UIElements.TransformData other)

Disassembly:
	0x03DFCF88 LDUR V1, [X31 + 0x18]
	0x03DFCF8C LDR X8, [X31 + 0x28]
	0x03DFCF90 ADD X9, X31, 0x50
	0x03DFCF94 ADD X25, X9, 0x14
	0x03DFCF98 STP V0, V1, [X31 + 0x50]
	0x03DFCF9C STR X8, [X31 + 0x70]
	0x03DFCFA0 LDR X1, [X24]
	0x03DFCFA4 ADD X0, X31, 0x50
	0x03DFCFA8 BL 0x2BCB40C
	0x03DFCFAC MOV W21, W0
	0x03DFCFB0 TBZ X0, 0x0, 0x3DFCFE4
	0x03DFCFB4 LDR W8, [X31 + 0x60]
	0x03DFCFB8 LDR V0, [X25]
	0x03DFCFBC LDR W9, [X25 + 0x10]
	0x03DFCFC0 CMP W8, W20
	0x03DFCFC4 STR V0, [X31 + 0x3]
	0x03DFCFC8 STR W9, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+176], X30
	003 Move [X31+184], X19
	004 Move X19, X0
	005 Add X0, X31, 88
	006 Move W2, 84
	007 Call 0x3EB2AC0
	008 Add X0, X31, 0
	009 Move W2, 84
	010 Move X1, X19
	011 Call 0x3EB2AC0
	012 Add X0, X31, 88
	013 Add X1, X31, 0
	014 Call TransformData.op_Equality, X0, X1
	015 Move X30, [X31+176]
	016 Move X19, [X31+184]
	017 And W0, W0, 1
	018 Add X31, X31, 192
	019 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03DFCFCC B.NE 0x3DFCFA0
	0x03DFCFD0 STR W20, [X19]
	0x03DFCFD4 LDR W8, [X31 + 0x40]
	0x03DFCFD8 LDR V0, [X31 + 0x3]
	0x03DFCFDC STR W8, [X19 + 0x14]
	0x03DFCFE0 STUR V0, [X19 + 0x4]
	0x03DFCFE4 LDR X1, [X23]
	0x03DFCFE8 ADD X0, X31, 0x50
	0x03DFCFEC BL 0x2BCB408
	0x03DFCFF0 LDR X8, [X22 + 0x28]
	0x03DFCFF4 LDR X9, [X31 + 0x78]
	0x03DFCFF8 CMP X8, X9
	0x03DFCFFC B.NE 0x3DFD020
	0x03DFD000 AND W0, W21, 0x1
	0x03DFD004 LDP X20, X19, [X31 + 0xB0]
	0x03DFD008 LDP X22, X21, [X31 + 0xA0]
	0x03DFD00C LDP X24, X23, [X31 + 0x90]
	0x03DFD010 LDP X30, X25, [X31 + 0x80]
	0x03DFD014 ADD X31, X31, 0xC0
	0x03DFD018 RET
	0x03DFD01C BL 0x1C16F20
	0x03DFD020 BL 0x3EB1B20
	0x03DFD024 CMP W1, 0x1
	0x03DFD028 MOV X20, X0
	0x03DFD02C B.NE 0x3DFD058
	0x03DFD030 MOV X0, X20
	0x03DFD034 BL 0x3EB1AD0
	0x03DFD038 LDR X19, [X0]
	0x03DFD03C BL 0x3EB1AE0
	0x03DFD040 LDR X1, [X23]
	0x03DFD044 ADD X0, X31, 0x50
	0x03DFD048 BL 0x2BCB408
	0x03DFD04C CBNZ X19, 0x3DFD060
	0x03DFD050 MOV W21, W31
	0x03DFD054 B 0x3DFCFF0
	0x03DFD058 MOV X19, X31
	0x03DFD05C B 0x3DFD06C
	0x03DFD060 MOV X0, X19
	0x03DFD064 BL 0x1C16F18
	0x03DFD068 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+176], X30
	003 Move [X31+184], X21
	004 Move [X31+192], X20
	005 Move [X31+200], X19
	006 Move X21, 0x5ED000
	007 Move W8, [X21+687]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x36E000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+687], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x36D000
	022 Move X8, [X8+3216]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X1, X0
	030 Add X0, X31, 88
	031 Move W2, 84
	032 Call 0x3EB2AC0
	033 Add X0, X31, 0
	034 Move W2, 84
	035 Move X1, X19
	036 Call 0x3EB2AC0
	037 Add X0, X31, 88
	038 Add X1, X31, 0
	039 Call TransformData.op_Equality, X0, X1
	040 Move X20, [X31+192]
	041 Move X19, [X31+200]
	042 Move X30, [X31+176]
	043 Move X21, [X31+184]
	044 And W0, W0, 1
	045 Add X31, X31, 208
	046 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03DFD06C LDR X1, [X23]
	0x03DFD070 ADD X0, X31, 0x50
	0x03DFD074 BL 0x2BCB408
	0x03DFD078 CBNZ X19, 0x3DFD084
	0x03DFD07C MOV X0, X20
	0x03DFD080 BL 0x1D2C690
	0x03DFD084 MOV X0, X19
	0x03DFD088 BL 0x1C16F18
	0x03DFD08C BL 0x1990590
	0x03DFD090 UBFM X8, X1, 0x20, 0x3F
	0x03DFD094 AND W9, W8, 0xFFFFFFFE
	0x03DFD098 CMP W9, 0x2
	0x03DFD09C STR W2, [X0 + 0x8]
	0x03DFD0A0 STR X1, [X0]
	0x03DFD0A4 B.NE 0x3DFD0AC
	0x03DFD0A8 STR W8, [X0 + 0x8]
	0x03DFD0AC RET
	0x03DFD0B0 MOV W1, W0
	0x03DFD0B4 MOV X0, X31
	0x03DFD0B8 RET
	0x03DFD0BC SUB X31, X31, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call Rotate.GetHashCode, X0
	007 Move W20, W0
	008 Add X0, X19, 24
	009 Call Scale.GetHashCode, X0
	010 Move W21, 397
	011 Multiply W8, W20, W21
	012 Xor W20, W8, W0
	013 Add X0, X19, 40
	014 Call TransformOrigin.GetHashCode, X0
	015 Multiply W8, W20, W21
	016 Xor W20, W8, W0
	017 Add X0, X19, 60
	018 Call Translate.GetHashCode, X0
	019 Multiply W8, W20, W21
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Xor W0, W8, W0
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Return X0

