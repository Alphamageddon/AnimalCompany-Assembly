Type: UnityEngine.UIElements.UnsignedLongField

Method: UnityEngine.UIElements.UnsignedLongField/UnsignedLongInput get_unsignedLongInput()

Disassembly:
	0x03D8D09C STR W1, [X0 + 0x10]
	0x03D8D0A0 RET
	0x03D8D0A4 SUB X31, X31, 0x40
	0x03D8D0A8 STP X30, X21, [X31 + 0x20]
	0x03D8D0AC STP X20, X19, [X31 + 0x30]
	0x03D8D0B0 ADRP X21, 0x65A000
	0x03D8D0B4 LDRB W8, [X21 + 0xE38]
	0x03D8D0B8 MOV X20, X1
	0x03D8D0BC MOV X19, X0
	0x03D8D0C0 TBNZ X8, 0x0, 0x3D8D0D8
	0x03D8D0C4 ADRP X0, 0x3DA000
	0x03D8D0C8 LDR X0, [X0 + 0x938]
	0x03D8D0CC BL 0x1C16CF4
	0x03D8D0D0 MOVZ W8, 0x1
	0x03D8D0D4 STRB W8, [X21 + 0xE38]
	0x03D8D0D8 CBZ X20, 0x3D8D0F4
	0x03D8D0DC ADRP X8, 0x3DA000
	0x03D8D0E0 LDR X8, [X8 + 0x938]
	0x03D8D0E4 LDR X9, [X20]
	0x03D8D0E8 LDR X8, [X8]
	0x03D8D0EC CMP X9, X8
	0x03D8D0F0 B.EQ 0x3D8D0FC
	0x03D8D0F4 MOV W0, W31
	0x03D8D0F8 B 0x3D8D120
	0x03D8D0FC MOV X0, X20
	0x03D8D100 BL 0x1C16E08
	0x03D8D104 LDR V0, [X0]
	0x03D8D108 LDR X8, [X0 + 0x10]
	0x03D8D10C ADD X1, X31, 0x0
	0x03D8D110 MOV X0, X19
	0x03D8D114 STR V0, [X31]
	0x03D8D118 STR X8, [X31 + 0x10]
	0x03D8D11C BL 0x3D8D134

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x65B000
	005 Move W8, [X20+3622]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x3DB000
	012 Move X0, [X0+2192]
	013 Call 0x1C17CF4
	014 Move X0, 0x3DB000
	015 Move X0, [X0+2200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3622], W8
	019 Move X0, [X19+1096]
	020 Compare X0, 0
	021 JumpIfEqual {33}
	022 Move X9, 0x3DB000
	023 Move X9, [X9+2200]
	024 Move X8, [X0]
	025 Move X1, [X9]
	026 Move W10, [X8+304]
	027 Move W9, [X1+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X8+200]
	030 Add X8, X8, X9
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C181E0

Method: System.String ValueToString(System.UInt64 v)

Disassembly:
	0x03D8D120 LDP X20, X19, [X31 + 0x30]
	0x03D8D124 LDP X30, X21, [X31 + 0x20]
	0x03D8D128 AND W0, W0, 0x1
	0x03D8D12C ADD X31, X31, 0x40
	0x03D8D130 RET
	0x03D8D134 STR X30, [X31 - 0x30]!
	0x03D8D138 STP X22, X21, [X31 + 0x10]
	0x03D8D13C STP X20, X19, [X31 + 0x20]
	0x03D8D140 ADRP X21, 0x65A000
	0x03D8D144 ADRP X22, 0x3DA000
	0x03D8D148 LDRB W8, [X21 + 0xE39]
	0x03D8D14C LDR X22, [X22 + 0x940]
	0x03D8D150 MOV X19, X1
	0x03D8D154 MOV X20, X0
	0x03D8D158 TBNZ X8, 0x0, 0x3D8D170
	0x03D8D15C ADRP X0, 0x3DA000
	0x03D8D160 LDR X0, [X0 + 0x940]
	0x03D8D164 BL 0x1C16CF4
	0x03D8D168 MOVZ W8, 0x1
	0x03D8D16C STRB W8, [X21 + 0xE39]
	0x03D8D170 LDR X0, [X22]
	0x03D8D174 BL 0x211B0E8
	0x03D8D178 CBZ X0, 0x3D8D1E0
	0x03D8D17C LDR X8, [X0]
	0x03D8D180 LDR X2, [X19]
	0x03D8D184 LDR X1, [X20]
	0x03D8D188 LDP X9, X3, [X8 + 0x1B8]
	0x03D8D18C BLR X9
	0x03D8D190 TBZ X0, 0x0, 0x3D8D1CC
	0x03D8D194 LDR V0, [X20 + 0x8]
	0x03D8D198 LDR V1, [X19 + 0x8]
	0x03D8D19C MOV W0, W31
	0x03D8D1A0 FCMP S0, S1
	0x03D8D1A4 B.NE 0x3D8D1D0
	0x03D8D1A8 LDR V0, [X20 + 0xC]
	0x03D8D1AC LDR V1, [X19 + 0xC]
	0x03D8D1B0 FCMP S0, S1
	0x03D8D1B4 B.NE 0x3D8D1D0
	0x03D8D1B8 LDR W8, [X20 + 0x10]
	0x03D8D1BC LDR W9, [X19 + 0x10]
	0x03D8D1C0 CMP W8, W9
	0x03D8D1C4 CSET W0, EQ
	0x03D8D1C8 B 0x3D8D1D0
	0x03D8D1CC MOV W0, W31
	0x03D8D1D0 LDP X20, X19, [X31 + 0x20]
	0x03D8D1D4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x65B000
	007 Move [X31+8], X1
	008 Move X22, 0x3DB000
	009 Move X20, 0x369000
	010 Move W8, [X21+3623]
	011 Move X22, [X22+2208]
	012 Move X20, [X20+3144]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x369000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x3DB000
	022 Move X0, [X0+2208]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3623], W8
	026 Move X1, [X22]
	027 Move X0, X19
	028 Call TextValueField`1<UInt64>.get_formatString, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Compare X0, 0
	039 JumpIfEqual {55}
	040 Move X8, [X0]
	041 Move X9, [X8+536]
	042 Move X1, [X8+544]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X2, X0
	045 Add X0, X31, 8
	046 Move X1, X19
	047 Move X3, X31
	048 Call UInt64.ToString, X0, X1, X2
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0
	055 Call 0x1C17F20

Method: System.UInt64 StringToValue(System.String str)

Disassembly:
	0x03D8D1D8 LDR X30, [X31], #0x30
	0x03D8D1DC RET
	0x03D8D1E0 BL 0x1C16F20
	0x03D8D1E4 SUB X31, X31, 0x30
	0x03D8D1E8 STP X30, X21, [X31 + 0x10]
	0x03D8D1EC STP X20, X19, [X31 + 0x20]
	0x03D8D1F0 ADRP X20, 0x65A000
	0x03D8D1F4 ADRP X21, 0x3DA000
	0x03D8D1F8 LDRB W8, [X20 + 0xE3A]
	0x03D8D1FC LDR X21, [X21 + 0x940]
	0x03D8D200 MOV X19, X0
	0x03D8D204 TBNZ X8, 0x0, 0x3D8D228
	0x03D8D208 ADRP X0, 0x3DA000
	0x03D8D20C LDR X0, [X0 + 0x940]
	0x03D8D210 BL 0x1C16CF4
	0x03D8D214 ADRP X0, 0x3DA000
	0x03D8D218 LDR X0, [X0 + 0x948]
	0x03D8D21C BL 0x1C16CF4
	0x03D8D220 MOVZ W8, 0x1
	0x03D8D224 STRB W8, [X20 + 0xE3A]
	0x03D8D228 LDR X0, [X21]
	0x03D8D22C BL 0x211B0E8
	0x03D8D230 CBZ X0, 0x3D8D2B4
	0x03D8D234 LDR X8, [X0]
	0x03D8D238 LDR X1, [X19]
	0x03D8D23C ADRP X20, 0x3DA000
	0x03D8D240 LDP X9, X2, [X8 + 0x1C8]
	0x03D8D244 LDR X20, [X20 + 0x948]
	0x03D8D248 BLR X9
	0x03D8D24C LDR X8, [X20]
	0x03D8D250 MOV W20, W0
	0x03D8D254 MOV X0, X8
	0x03D8D258 BL 0x211D5A8
	0x03D8D25C CBZ X0, 0x3D8D2B4
	0x03D8D260 LDR X8, [X0]
	0x03D8D264 LDP S0, S1, [X19 + 0x8]
	0x03D8D268 LDP X9, X1, [X8 + 0x1C8]
	0x03D8D26C BLR X9
	0x03D8D270 LDR W8, [X19 + 0x10]
	0x03D8D274 MOVZ W19, 0x5529
	0x03D8D278 MOVK W19, 0xA5550000
	0x03D8D27C MADD W20, W20, W19, W0
	0x03D8D280 ADD X0, X31, 0xC
	0x03D8D284 MOV X1, X31
	0x03D8D288 STR W8, [X31 + 0xC]
	0x03D8D28C BL 0x337B6D8
	0x03D8D290 MOVZ W8, 0xA091
	0x03D8D294 MOVK W8, 0x84340000
	0x03D8D298 MUL W8, W8, W19
	0x03D8D29C MADD W8, W20, W19, W8
	0x03D8D2A0 LDP X20, X19, [X31 + 0x20]
	0x03D8D2A4 LDP X30, X21, [X31 + 0x10]
	0x03D8D2A8 ADD W0, W0, W8
	0x03D8D2AC ADD X31, X31, 0x30
	0x03D8D2B0 RET

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x65B000
	007 Move W8, [X21+3624]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x3DB000
	015 Move X0, [X0+2216]
	016 Call 0x1C17CF4
	017 Move X0, 0x3DB000
	018 Move X0, [X0+2192]
	019 Call 0x1C17CF4
	020 Move X0, 0x3DB000
	021 Move X0, [X0+2224]
	022 Call 0x1C17CF4
	023 Move X0, 0x3D3000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3624], W8
	028 Move [X31+8], X31
	029 Move X0, [X19+1096]
	030 Compare X0, 0
	031 JumpIfEqual {66}
	032 Move X8, 0x3DB000
	033 Move X8, [X8+2224]
	034 Move X21, 0x3D3000
	035 Move X1, [X8]
	036 Move X21, [X21+1960]
	037 Call TextInputBase<UInt64>.get_originalText, X0
	038 Move X8, [X21]
	039 Move X21, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Add X2, X31, 8
	046 Move X0, X20
	047 Move X1, X21
	048 Move X3, X31
	049 Call UINumericFieldsUtils.TryConvertStringToULong, X0, X1, X2
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Move X0, [X31+8]
	055 Move X8, 0x3DB000
	056 Move X8, [X8+2216]
	057 Move X0, X19
	058 Move X1, [X8]
	059 Call BaseField`1<UInt64>.get_rawValue, X0
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return X0
	066 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03D8D2B4 BL 0x1C16F20
	0x03D8D2B8 SUB X31, X31, 0x30
	0x03D8D2BC STR X30, [X31 + 0x20]

ISIL:
	001 Move W2, 1000
	002 Move X1, X31

Method: System.Void .ctor(System.String label, System.Int32 maxLength = 1000)

Disassembly:
	0x03D8D2C0 LDR X8, [X1 + 0x10]
	0x03D8D2C4 LDR V0, [X1]
	0x03D8D2C8 ADD X1, X31, 0x0
	0x03D8D2CC STR X8, [X31 + 0x10]
	0x03D8D2D0 STR V0, [X31]
	0x03D8D2D4 BL 0x3D8D134
	0x03D8D2D8 LDR X30, [X31 + 0x20]
	0x03D8D2DC AND W0, W0, 0x1
	0x03D8D2E0 ADD X31, X31, 0x30
	0x03D8D2E4 RET
	0x03D8D2E8 STR X30, [X31 - 0x30]!
	0x03D8D2EC STP X22, X21, [X31 + 0x10]
	0x03D8D2F0 STP X20, X19, [X31 + 0x20]
	0x03D8D2F4 ADRP X20, 0x65A000
	0x03D8D2F8 ADRP X22, 0x36E000
	0x03D8D2FC ADRP X21, 0x3DA000
	0x03D8D300 LDRB W8, [X20 + 0xE3B]
	0x03D8D304 LDR X22, [X22 + 0xF08]
	0x03D8D308 LDR X21, [X21 + 0x950]
	0x03D8D30C MOV X19, X0
	0x03D8D310 TBNZ X8, 0x0, 0x3D8D334
	0x03D8D314 ADRP X0, 0x36E000
	0x03D8D318 LDR X0, [X0 + 0xF08]
	0x03D8D31C BL 0x1C16CF4
	0x03D8D320 ADRP X0, 0x3DA000
	0x03D8D324 LDR X0, [X0 + 0x950]
	0x03D8D328 BL 0x1C16CF4
	0x03D8D32C MOVZ W8, 0x1
	0x03D8D330 STRB W8, [X20 + 0xE3B]
	0x03D8D334 LDR V0, [X19 + 0x8]
	0x03D8D338 LDR X0, [X22]
	0x03D8D33C LDR X20, [X19]
	0x03D8D340 ADD X1, X31, 0x8
	0x03D8D344 STR D0, [X31 + 0x8]
	0x03D8D348 BL 0x1C16E04
	0x03D8D34C LDR X8, [X21]
	0x03D8D350 MOV X2, X0
	0x03D8D354 MOV X1, X20
	0x03D8D358 MOV X3, X31
	0x03D8D35C MOV X0, X8
	0x03D8D360 BL 0x3227BD4
	0x03D8D364 LDP X20, X19, [X31 + 0x20]
	0x03D8D368 LDP X22, X21, [X31 + 0x10]
	0x03D8D36C LDR X30, [X31], #0x30
	0x03D8D370 RET
	0x03D8D374 LDRB W0, [X0 + 0x10]
	0x03D8D378 RET
	0x03D8D37C AND W8, W1, 0x1
	0x03D8D380 STRB W8, [X0 + 0x10]
	0x03D8D384 RET
	0x03D8D388 STR X30, [X31 - 0x30]!
	0x03D8D38C STP X22, X21, [X31 + 0x10]
	0x03D8D390 STP X20, X19, [X31 + 0x20]
	0x03D8D394 ADRP X22, 0x65A000
	0x03D8D398 ADRP X21, 0x366000
	0x03D8D39C LDRB W8, [X22 + 0xE3C]
	0x03D8D3A0 LDR X21, [X21 + 0x598]
	0x03D8D3A4 MOV X20, X1
	0x03D8D3A8 MOV X19, X0
	0x03D8D3AC TBNZ X8, 0x0, 0x3D8D3DC
	0x03D8D3B0 ADRP X0, 0x366000
	0x03D8D3B4 LDR X0, [X0 + 0xA28]
	0x03D8D3B8 BL 0x1C16CF4
	0x03D8D3BC ADRP X0, 0x366000
	0x03D8D3C0 LDR X0, [X0 + 0x598]
	0x03D8D3C4 BL 0x1C16CF4
	0x03D8D3C8 ADRP X0, 0x3DA000
	0x03D8D3CC LDR X0, [X0 + 0x958]
	0x03D8D3D0 BL 0x1C16CF4
	0x03D8D3D4 MOVZ W8, 0x1
	0x03D8D3D8 STRB W8, [X22 + 0xE3C]
	0x03D8D3DC LDR X0, [X21]
	0x03D8D3E0 LDR X21, [X20]
	0x03D8D3E4 LDR W8, [X0 + 0xE0]
	0x03D8D3E8 CBNZ W8, 0x3D8D3F0
	0x03D8D3EC BL 0x1C16DFC
	0x03D8D3F0 MOV X0, X21
	0x03D8D3F4 MOV X1, X31
	0x03D8D3F8 MOV X2, X31
	0x03D8D3FC BL 0x3C354F8
	0x03D8D400 TBZ X0, 0x0, 0x3D8D430
	0x03D8D404 LDR X0, [X20]
	0x03D8D408 LDP S0, S1, [X20 + 0x8]
	0x03D8D40C MOV W1, W31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x65B000
	010 Move X25, 0x3DB000
	011 Move X24, 0x3DB000
	012 Move X23, 0x3DB000
	013 Move W8, [X22+3625]
	014 Move X25, [X25+2200]
	015 Move X24, [X24+2232]
	016 Move X23, [X23+2240]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x3DB000
	025 Move X0, [X0+2248]
	026 Call 0x1C17CF4
	027 Move X0, 0x3DB000
	028 Move X0, [X0+2256]
	029 Call 0x1C17CF4
	030 Move X0, 0x3DB000
	031 Move X0, [X0+2264]
	032 Call 0x1C17CF4
	033 Move X0, 0x3DB000
	034 Move X0, [X0+2232]
	035 Call 0x1C17CF4
	036 Move X0, 0x3DB000
	037 Move X0, [X0+2240]
	038 Call 0x1C17CF4
	039 Move X0, 0x3DB000
	040 Move X0, [X0+2200]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+3625], W8
	044 Move X0, [X25]
	045 Call 0x1C17F10
	046 Move X22, X0
	047 Call UnsignedLongInput..ctor, X0
	048 Move X4, [X24]
	049 Move X0, X19
	050 Move X1, X21
	051 Move W2, W20
	052 Move X3, X22
	053 Call TextValueField`1<UInt64>..ctor, X0, X1, X2, X3
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X0+184]
	061 Move X0, X19
	062 Move X2, X31
	063 Move X1, [X8]
	064 Call VisualElement.AddToClassList, X0, X1
	065 Move X0, [X19+1024]
	066 Compare X0, 0
	067 JumpIfEqual {99}
	068 Move X8, [X23]
	069 Move X20, 0x3DB000
	070 Move X2, X31
	071 Move X8, [X8+184]
	072 Move X1, [X8+8]
	073 Move X20, [X20+2256]
	074 Call VisualElement.AddToClassList, X0, X1
	075 Move X1, [X20]
	076 Move X0, X19
	077 Call BaseField`1<UInt64>.get_visualInput, X0
	078 Compare X0, 0
	079 JumpIfEqual {99}
	080 Move X8, [X23]
	081 Move X20, 0x3DB000
	082 Move X2, X31
	083 Move X8, [X8+184]
	084 Move X1, [X8+16]
	085 Move X20, [X20+2264]
	086 Call VisualElement.AddToClassList, X0, X1
	087 Move X1, [X20]
	088 Move X0, X19
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Move X25, [X31+72]
	097 Call TextValueField`1<UInt64>.AddLabelDragger, X0
	098 Return 
	099 Call 0x1C17F20

Method: System.Boolean CanTryParse(System.String textString)

Disassembly:
	0x03D8D4A4 MOVZ W8, 0x1
	0x03D8D4A8 STRB W8, [X20 + 0x78F]
	0x03D8D4AC ADRP X8, 0x36E000
	0x03D8D4B0 LDR X8, [X8 + 0xF08]
	0x03D8D4B4 MOV X0, X31
	0x03D8D4B8 MOV W1, W31
	0x03D8D4BC MOV X2, X31
	0x03D8D4C0 LDR X8, [X8]
	0x03D8D4C4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X1
	003 Add X1, X31, 8
	004 Move X2, X31
	005 Move [X31+8], X31
	006 Call UInt64.TryParse, X0, X1
	007 And W0, W0, 1
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.UInt64 startValue)

Disassembly:
	0x03D8D4C8 LDP S0, S1, [X8]
	0x03D8D4CC BL 0x3C245EC
	0x03D8D4D0 STRB W31, [X19 + 0x10]
	0x03D8D4D4 LDP X20, X19, [X31 + 0x10]
	0x03D8D4D8 LDR X30, [X31], #0x20
	0x03D8D4DC RET
	0x03D8D4E0 MOV X1, X31
	0x03D8D4E4 B 0x33BDD8C
	0x03D8D4E8 STR X30, [X31 - 0x20]!
	0x03D8D4EC STP X20, X19, [X31 + 0x10]
	0x03D8D4F0 ADRP X19, 0x65A000
	0x03D8D4F4 ADRP X20, 0x366000
	0x03D8D4F8 LDRB W8, [X19 + 0xE3D]
	0x03D8D4FC LDR X20, [X20 + 0x970]
	0x03D8D500 TBNZ X8, 0x0, 0x3D8D518
	0x03D8D504 ADRP X0, 0x366000
	0x03D8D508 LDR X0, [X0 + 0x970]
	0x03D8D50C BL 0x1C16CF4
	0x03D8D510 MOVZ W8, 0x1
	0x03D8D514 STRB W8, [X19 + 0xE3D]
	0x03D8D518 LDR X0, [X20]
	0x03D8D51C LDR W8, [X0 + 0xE0]
	0x03D8D520 CBNZ W8, 0x3D8D528
	0x03D8D524 BL 0x1C16DFC
	0x03D8D528 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X2
	008 Move W20, W1
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Call UnsignedLongField.get_unsignedLongInput, X0
	013 Compare X0, 0
	014 JumpIfEqual {30}
	015 Move X8, [X0]
	016 Move V1, V9
	017 Move V2, V8
	018 Move W1, W20
	019 Move X4, [X8+1992]
	020 Move X3, [X8+2000]
	021 Move X2, X19
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+24]
	025 Move D9, [X31+8]
	026 Move D8, [X31+16]
	027 Move V0, V10
	028 Move V10, [X31+48]
	029 CallNoReturn X4
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03D8D52C MOV X0, X31
	0x03D8D530 LDR X30, [X31], #0x20
	0x03D8D534 B 0x3C0190C
	0x03D8D538 STP X30, X19, [X31 - 0x10]!
	0x03D8D53C MOV X19, X0
	0x03D8D540 LDR X0, [X0 + 0x10]
	0x03D8D544 CBNZ X0, 0x3D8D554
	0x03D8D548 MOV X0, X19
	0x03D8D54C BL 0x3D8D55C
	0x03D8D550 STR X0, [X19 + 0x10]
	0x03D8D554 LDP X30, X19, [X31], #0x10
	0x03D8D558 RET
	0x03D8D55C STP X30, X21, [X31 - 0x20]!
	0x03D8D560 STP X20, X19, [X31 + 0x10]
	0x03D8D564 ADRP X19, 0x65A000
	0x03D8D568 ADRP X21, 0x3DA000
	0x03D8D56C LDRB W8, [X19 + 0xE3E]
	0x03D8D570 LDR X21, [X21 + 0x960]
	0x03D8D574 MOV X20, X0
	0x03D8D578 TBNZ X8, 0x0, 0x3D8D59C
	0x03D8D57C ADRP X0, 0x3DA000
	0x03D8D580 LDR X0, [X0 + 0x968]
	0x03D8D584 BL 0x1C16CF4
	0x03D8D588 ADRP X0, 0x3DA000
	0x03D8D58C LDR X0, [X0 + 0x960]
	0x03D8D590 BL 0x1C16CF4
	0x03D8D594 MOVZ W8, 0x1
	0x03D8D598 STRB W8, [X19 + 0xE3E]
	0x03D8D59C LDR X0, [X21]
	0x03D8D5A0 BL 0x1C16F10
	0x03D8D5A4 MOV X1, X31
	0x03D8D5A8 MOV X19, X0
	0x03D8D5AC BL 0x33BDD8C
	0x03D8D5B0 CBZ X19, 0x3D8D630
	0x03D8D5B4 ADRP X10, 0x3DA000
	0x03D8D5B8 LDR X8, [X19]
	0x03D8D5BC LDR X10, [X10 + 0x968]
	0x03D8D5C0 LDR X20, [X20 + 0x18]
	0x03D8D5C4 LDRH W9, [X8 + 0x12E]
	0x03D8D5C8 LDR X1, [X10]
	0x03D8D5CC CBZ X9, 0x3D8D5F0
	0x03D8D5D0 LDR X10, [X8 + 0xB0]
	0x03D8D5D4 ADD X10, X10, 0x8
	0x03D8D5D8 LDUR X11, [X10 - 0x8]
	0x03D8D5DC CMP X11, X1
	0x03D8D5E0 B.EQ 0x3D8D600
	0x03D8D5E4 SUBS X9, X9, 0x1
	0x03D8D5E8 ADD X10, X10, 0x10
	0x03D8D5EC B.NE 0x3D8D5D8
	0x03D8D5F0 MOVZ W2, 0x1
	0x03D8D5F4 MOV X0, X19
	0x03D8D5F8 BL 0x1C5C788

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x65B000
	008 Move X22, 0x3DB000
	009 Move X19, 0x3DB000
	010 Move X21, 0x390000
	011 Move X20, 0x390000
	012 Move W8, [X23+3626]
	013 Move X22, [X22+2288]
	014 Move X19, [X19+2240]
	015 Move X21, [X21+3768]
	016 Move X20, [X20+3776]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x3DB000
	022 Move X0, [X0+2240]
	023 Call 0x1C17CF4
	024 Move X0, 0x3DB000
	025 Move X0, [X0+2288]
	026 Call 0x1C17CF4
	027 Move X0, 0x390000
	028 Move X0, [X0+3768]
	029 Call 0x1C17CF4
	030 Move X0, 0x390000
	031 Move X0, [X0+3776]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+3626], W8
	035 Move X8, [X19]
	036 Move X9, [X22]
	037 Move X2, X31
	038 Move X8, [X8+184]
	039 Move [X8], X9
	040 Move X8, [X19]
	041 Move X1, [X21]
	042 Move X8, [X8+184]
	043 Move X0, [X8]
	044 Call String.Concat, X0, X1
	045 Move X8, [X19]
	046 Move X2, X31
	047 Move X8, [X8+184]
	048 Move [X8+8], X0
	049 Move X0, [X8]
	050 Move X1, [X20]
	051 Call String.Concat, X0, X1
	052 Move X8, [X19]
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X8, [X8+184]
	058 Move [X8+16], X0
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

