Type: UnityEngine.UIElements.CursorManager

Method: System.Boolean get_isCursorOverriden()

Disassembly:
	0x03D8E374 BL 0x3D8D55C
	0x03D8E378 MOV X20, X0

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_isCursorOverriden(System.Boolean value)

Disassembly:
	0x03D8E37C STR X0, [X19 + 0x10]
	0x03D8E380 CBZ X0, 0x3D8E8E0
	0x03D8E384 LDR X8, [X20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Void SetCursor(UnityEngine.UIElements.Cursor cursor)

Disassembly:
	0x03D8E388 LDR X1, [X27]
	0x03D8E38C LDRH W9, [X8 + 0x12E]
	0x03D8E390 CBZ X9, 0x3D8E3B4
	0x03D8E394 LDR X10, [X8 + 0xB0]
	0x03D8E398 ADD X10, X10, 0x8
	0x03D8E39C LDUR X11, [X10 - 0x8]
	0x03D8E3A0 CMP X11, X1
	0x03D8E3A4 B.EQ 0x3D8E3C4
	0x03D8E3A8 SUBS X9, X9, 0x1
	0x03D8E3AC ADD X10, X10, 0x10
	0x03D8E3B0 B.NE 0x3D8E39C
	0x03D8E3B4 MOVZ W2, 0xA
	0x03D8E3B8 MOV X0, X20
	0x03D8E3BC BL 0x1C5C788
	0x03D8E3C0 B 0x3D8E3D4
	0x03D8E3C4 LDR W9, [X10]
	0x03D8E3C8 ADD W9, W9, 0xA
	0x03D8E3CC ADD X8, X8, W9, 0x4, SXTW
	0x03D8E3D0 ADD X0, X8, 0x138
	0x03D8E3D4 LDP X8, X1, [X0]
	0x03D8E3D8 MOV X0, X20
	0x03D8E3DC BLR X8
	0x03D8E3E0 CMP W0, 0x1
	0x03D8E3E4 B.LT 0x3D8E8B4
	0x03D8E3E8 ADRP X28, 0x38E000
	0x03D8E3EC ADRP X29, 0x3D9000
	0x03D8E3F0 ADRP X26, 0x3D9000
	0x03D8E3F4 LDR X28, [X28 + 0xE50]
	0x03D8E3F8 LDR X29, [X29 + 0x998]
	0x03D8E3FC LDR X26, [X26 + 0x9F0]
	0x03D8E400 MOV W20, W0
	0x03D8E404 MOV W21, W31
	0x03D8E408 LDR X22, [X19 + 0x10]
	0x03D8E40C CBNZ X22, 0x3D8E424
	0x03D8E410 MOV X0, X19
	0x03D8E414 BL 0x3D8D55C
	0x03D8E418 MOV X22, X0
	0x03D8E41C STR X0, [X19 + 0x10]
	0x03D8E420 CBZ X0, 0x3D8E8E0
	0x03D8E424 LDR X8, [X22]
	0x03D8E428 LDR X1, [X27]
	0x03D8E42C LDRH W9, [X8 + 0x12E]
	0x03D8E430 CBZ X9, 0x3D8E454
	0x03D8E434 LDR X10, [X8 + 0xB0]
	0x03D8E438 ADD X10, X10, 0x8
	0x03D8E43C LDUR X11, [X10 - 0x8]
	0x03D8E440 CMP X11, X1
	0x03D8E444 B.EQ 0x3D8E464
	0x03D8E448 SUBS X9, X9, 0x1
	0x03D8E44C ADD X10, X10, 0x10
	0x03D8E450 B.NE 0x3D8E43C
	0x03D8E454 MOVZ W2, 0x7
	0x03D8E458 MOV X0, X22
	0x03D8E45C BL 0x1C5C788
	0x03D8E460 B 0x3D8E474
	0x03D8E464 LDR W9, [X10]
	0x03D8E468 ADD W9, W9, 0x7
	0x03D8E46C ADD X8, X8, W9, 0x4, SXTW
	0x03D8E470 ADD X0, X8, 0x138
	0x03D8E474 LDP X8, X2, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x65A000
	007 Move X21, 0x366000
	008 Move W8, [X22+3644]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x366000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x366000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x3DA000
	023 Move X0, [X0+2392]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+3644], W8
	027 Move X0, [X21]
	028 Move X21, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {55}
	041 Move X0, [X20]
	042 Move S0, [X20+8]
	043 Move S1, [X20+12]
	044 Move W1, W31
	045 Move X2, X31
	046 Call Cursor.SetCursor, X0, X1, X2
	047 Move W8, 1
	048 Move [X19+16], W8
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return 
	055 Move W8, [X20+16]
	056 Compare W8, 0
	057 JumpIfEqual {70}
	058 Move X8, 0x366000
	059 Move X8, [X8+2600]
	060 Move X0, [X8]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X8, 0x3DA000
	066 Move X8, [X8+2392]
	067 Move X1, X31
	068 Move X0, [X8]
	069 Call Debug.LogWarning, X0
	070 Move X0, X19
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]

Method: System.Void ResetCursor()

Disassembly:
	0x03D8E478 MOV X0, X22
	0x03D8E47C MOV W1, W21
	0x03D8E480 BLR X8
	0x03D8E484 TBZ X0, 0x0, 0x3D8E728
	0x03D8E488 LDR W8, [X19 + 0x6C]
	0x03D8E48C CMP W8, W21
	0x03D8E490 B.NE 0x3D8E520
	0x03D8E494 LDR X22, [X19 + 0x10]
	0x03D8E498 CBNZ X22, 0x3D8E4B0
	0x03D8E49C MOV X0, X19
	0x03D8E4A0 BL 0x3D8D55C
	0x03D8E4A4 MOV X22, X0
	0x03D8E4A8 STR X0, [X19 + 0x10]
	0x03D8E4AC CBZ X0, 0x3D8E8E0
	0x03D8E4B0 LDR X8, [X22]
	0x03D8E4B4 LDR X1, [X27]
	0x03D8E4B8 LDRH W9, [X8 + 0x12E]
	0x03D8E4BC CBZ X9, 0x3D8E4E0
	0x03D8E4C0 LDR X10, [X8 + 0xB0]
	0x03D8E4C4 ADD X10, X10, 0x8
	0x03D8E4C8 LDUR X11, [X10 - 0x8]
	0x03D8E4CC CMP X11, X1
	0x03D8E4D0 B.EQ 0x3D8E4F0
	0x03D8E4D4 SUBS X9, X9, 0x1
	0x03D8E4D8 ADD X10, X10, 0x10
	0x03D8E4DC B.NE 0x3D8E4C8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+16]
	005 Move X19, X0
	006 Compare W8, 0
	007 JumpIfEqual {27}
	008 Move X20, 0x64C000
	009 Move W8, [X20+1935]
	010 Compare W8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, 0x36E000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1935], W8
	017 Move X8, 0x36E000
	018 Move X8, [X8+3848]
	019 Move X0, X31
	020 Move W1, W31
	021 Move X2, X31
	022 Move X8, [X8]
	023 Move X8, [X8+184]
	024 Move S0, [X8]
	025 Move S1, [X8+4]
	026 Call Cursor.SetCursor, X0, X1, X2
	027 Move [X19+16], W31
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

Method: System.Void .ctor()

Disassembly:
	0x03D8E4E0 MOVZ W2, 0xC
	0x03D8E4E4 MOV X0, X22

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

