Type: UnityEngine.UIElements.UIRUtility

Method: System.Boolean ShapeWindingIsClockwise(System.Int32 maskDepth, System.Int32 stencilRef)

Disassembly:
	0x03DE1C48 LDR X8, [X21 + 0x30]
	0x03DE1C4C CMP X8, 0x1
	0x03DE1C50 B.LT 0x3DE1C84
	0x03DE1C54 CMP X19, X8
	0x03DE1C58 B.LE 0x3DE1C84
	0x03DE1C5C LDR X8, [X31 + 0x78]
	0x03DE1C60 LDR X0, [X8 + 0x28]
	0x03DE1C64 CBZ X0, 0x3DE1CC0
	0x03DE1C68 LDR X2, [X27]
	0x03DE1C6C MOV X1, X21
	0x03DE1C70 BL 0x2DBE4B0
	0x03DE1C74 TBNZ X0, 0x0, 0x3DE1C84
	0x03DE1C78 LDR X0, [X31 + 0x78]
	0x03DE1C7C MOV X1, X21
	0x03DE1C80 BL 0x3DE1818
	0x03DE1C84 LDR X8, [X31 + 0x78]
	0x03DE1C88 CMP W23, W28
	0x03DE1C8C STR W20, [X8 + 0x34]
	0x03DE1C90 B.EQ 0x3DE1D1C
	0x03DE1C94 LDR X8, [X8 + 0x10]
	0x03DE1C98 ADD W9, W24, W28
	0x03DE1C9C ADD W25, W25, 0x1
	0x03DE1CA0 CMP W9, W23
	0x03DE1CA4 ADD W10, W25, W24
	0x03DE1CA8 CSEL W9, W31, W23, LT
	0x03DE1CAC SUB W20, W10, W9
	0x03DE1CB0 ADD W28, W28, 0x1
	0x03DE1CB4 CBNZ X8, 0x3DE1BD0
	0x03DE1CB8 BL 0x1C16F20
	0x03DE1CBC BL 0x1C16F20
	0x03DE1CC0 BL 0x1C16F20
	0x03DE1CC4 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x608000
	007 Move X22, 0x313000
	008 Move W8, [X21+474]
	009 Move X22, [X22+2600]
	010 Move W20, W1
	011 Move W19, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x313000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+474], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add W8, W20, 1
	028 NotImplemented "Instruction CSET not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Or W0, W20, W8
	032 Move X1, X31
	033 Call Debug.Assert, X0
	034 Move W0, W20
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: System.Boolean IsRoundRect(UnityEngine.UIElements.VisualElement ve)

Disassembly:
	0x03DE1CC8 BL 0x1C16F20
	0x03DE1CCC B 0x3DE1CFC
	0x03DE1CD0 B 0x3DE1CFC
	0x03DE1CD4 B 0x3DE1CFC
	0x03DE1CD8 B 0x3DE1CFC
	0x03DE1CDC B 0x3DE1CFC
	0x03DE1CE0 B 0x3DE1CFC
	0x03DE1CE4 B 0x3DE1CFC
	0x03DE1CE8 B 0x3DE1CFC
	0x03DE1CEC B 0x3DE1CFC
	0x03DE1CF0 B 0x3DE1CFC
	0x03DE1CF4 B 0x3DE1CFC
	0x03DE1CF8 B 0x3DE1CFC
	0x03DE1CFC MOV X19, X0
	0x03DE1D00 CMP W1, 0x1
	0x03DE1D04 B.NE 0x3DE1D48
	0x03DE1D08 MOV X0, X19
	0x03DE1D0C BL 0x3EB1AD0
	0x03DE1D10 LDR X8, [X0]
	0x03DE1D14 STR X8, [X31]
	0x03DE1D18 BL 0x3EB1AE0
	0x03DE1D1C ADD X0, X31, 0x0
	0x03DE1D20 BL 0x1C12BEC
	0x03DE1D24 LDP X20, X19, [X31 + 0xC0]
	0x03DE1D28 LDP X22, X21, [X31 + 0xB0]
	0x03DE1D2C LDP X24, X23, [X31 + 0xA0]
	0x03DE1D30 LDP X26, X25, [X31 + 0x90]
	0x03DE1D34 LDP X28, X27, [X31 + 0x80]
	0x03DE1D38 LDR X30, [X31 + 0x70]
	0x03DE1D3C ADD X31, X31, 0xD0
	0x03DE1D40 RET
	0x03DE1D44 MOV X19, X0
	0x03DE1D48 ADD X0, X31, 0x0
	0x03DE1D4C BL 0x1C12BEC
	0x03DE1D50 MOV X0, X19
	0x03DE1D54 BL 0x1D2C690
	0x03DE1D58 BL 0x1990590
	0x03DE1D5C STR X30, [X31 - 0x40]!
	0x03DE1D60 STP X24, X23, [X31 + 0x10]
	0x03DE1D64 STP X22, X21, [X31 + 0x20]
	0x03DE1D68 STP X20, X19, [X31 + 0x30]
	0x03DE1D6C ADRP X20, 0x607000
	0x03DE1D70 ADRP X24, 0x388000
	0x03DE1D74 ADRP X23, 0x388000
	0x03DE1D78 ADRP X22, 0x388000
	0x03DE1D7C ADRP X21, 0x388000
	0x03DE1D80 LDRB W8, [X20 + 0x1EA]
	0x03DE1D84 LDR X24, [X24 + 0x6A8]
	0x03DE1D88 LDR X23, [X23 + 0x6B0]
	0x03DE1D8C LDR X22, [X22 + 0x6B8]
	0x03DE1D90 LDR X21, [X21 + 0x6C0]
	0x03DE1D94 MOV X19, X0
	0x03DE1D98 TBNZ X8, 0x0, 0x3DE1DD4
	0x03DE1D9C ADRP X0, 0x388000
	0x03DE1DA0 LDR X0, [X0 + 0x6C0]
	0x03DE1DA4 BL 0x1C16CF4
	0x03DE1DA8 ADRP X0, 0x388000
	0x03DE1DAC LDR X0, [X0 + 0x6B8]
	0x03DE1DB0 BL 0x1C16CF4
	0x03DE1DB4 ADRP X0, 0x388000
	0x03DE1DB8 LDR X0, [X0 + 0x6B0]
	0x03DE1DBC BL 0x1C16CF4
	0x03DE1DC0 ADRP X0, 0x388000
	0x03DE1DC4 LDR X0, [X0 + 0x6A8]
	0x03DE1DC8 BL 0x1C16CF4
	0x03DE1DCC MOVZ W8, 0x1
	0x03DE1DD0 STRB W8, [X20 + 0x1EA]
	0x03DE1DD4 LDR X0, [X24]
	0x03DE1DD8 BL 0x1C16F10
	0x03DE1DDC LDR X1, [X23]
	0x03DE1DE0 MOV X20, X0
	0x03DE1DE4 BL 0x301B7C4
	0x03DE1DE8 STR X20, [X19 + 0x10]
	0x03DE1DEC LDR X0, [X24]
	0x03DE1DF0 BL 0x1C16F10
	0x03DE1DF4 LDR X1, [X23]
	0x03DE1DF8 MOV X20, X0
	0x03DE1DFC BL 0x301B7C4
	0x03DE1E00 STR X20, [X19 + 0x20]
	0x03DE1E04 LDR X0, [X22]
	0x03DE1E08 BL 0x1C16F10
	0x03DE1E0C LDR X1, [X21]
	0x03DE1E10 MOV X20, X0
	0x03DE1E14 BL 0x2DBDE08
	0x03DE1E18 MOVN W8, 0x0
	0x03DE1E1C STR X20, [X19 + 0x28]
	0x03DE1E20 STRB W31, [X19 + 0x30]
	0x03DE1E24 STR W8, [X19 + 0x34]
	0x03DE1E28 MOV X0, X19
	0x03DE1E2C LDP X20, X19, [X31 + 0x30]
	0x03DE1E30 LDP X22, X21, [X31 + 0x20]
	0x03DE1E34 LDP X24, X23, [X31 + 0x10]
	0x03DE1E38 MOV X1, X31
	0x03DE1E3C LDR X30, [X31], #0x40
	0x03DE1E40 B 0x33BDD8C
	0x03DE1E44 LDR V0, [X0]
	0x03DE1E48 LDR V1, [X0 + 0x8]
	0x03DE1E4C FADD S0, S0, S1
	0x03DE1E50 RET
	0x03DE1E54 LDR V0, [X0 + 0x4]
	0x03DE1E58 LDR V1, [X0 + 0xC]
	0x03DE1E5C FADD S0, S0, S1
	0x03DE1E60 RET
	0x03DE1E64 STP S0, S1, [X0]
	0x03DE1E68 STP S2, S3, [X0 + 0x8]
	0x03DE1E6C RET
	0x03DE1E70 FADD S0, S0, S4
	0x03DE1E74 FADD S1, S1, S5
	0x03DE1E78 FADD S4, S4, S6
	0x03DE1E7C FADD S5, S5, S7
	0x03DE1E80 FMOV S6, W31
	0x03DE1E84 FSUB S2, S2, S4
	0x03DE1E88 FSUB S3, S3, S5
	0x03DE1E8C FMAX S2, S2, S6
	0x03DE1E90 FMAX S3, S3, S6
	0x03DE1E94 RET
	0x03DE1E98 MOVZ X0, 0x4
	0x03DE1E9C RET
	0x03DE1EA0 STR S0, [X0]
	0x03DE1EA4 STR W1, [X0 + 0x4]
	0x03DE1EA8 RET
	0x03DE1EAC LDR V0, [X0]
	0x03DE1EB0 RET
	0x03DE1EB4 STR S0, [X0]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x608000
	006 Move W8, [X20+475]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x33C000
	013 Move X0, [X0+288]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+475], W8
	017 Compare X19, 0
	018 JumpIfEqual {122}
	019 Move X20, 0x33C000
	020 Move X8, [X19]
	021 Move X20, [X20+288]
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X1, [X20]
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move W2, 10
	033 Move X0, X19
	034 Call 0x1C5D788
	035 Move W9, [X10]
	036 Add W9, W9, 10
	037 Add X8, X8, W9
	038 Add X0, X8, 312
	039 Move X8, [X0]
	040 Move X1, [X0+8]
	041 Move X0, X19
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X8, -53440512
	044 Move V8, [X8+3996]
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move X8, [X19]
	047 Move X1, [X20]
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Compare X9, 0
	050 JumpIfEqual {57}
	051 Move X10, [X8+176]
	052 Add X10, X10, 8
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Subtract X9, X9, 1
	056 Add X10, X10, 16
	057 Move W2, 11
	058 Move X0, X19
	059 Call 0x1C5D788
	060 Move W9, [X10]
	061 Add W9, W9, 11
	062 Add X8, X8, W9
	063 Add X0, X8, 312
	064 Move X8, [X0]
	065 Move X1, [X0+8]
	066 Move X0, X19
	067 NotImplemented "Instruction BLR not yet implemented."
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Move X8, [X19]
	070 Move X1, [X20]
	071 NotImplemented "Instruction LDRH not yet implemented."
	072 Compare X9, 0
	073 JumpIfEqual {80}
	074 Move X10, [X8+176]
	075 Add X10, X10, 8
	076 NotImplemented "Instruction LDUR not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Subtract X9, X9, 1
	079 Add X10, X10, 16
	080 Move W2, 2
	081 Move X0, X19
	082 Call 0x1C5D788
	083 Move W9, [X10]
	084 Add W9, W9, 2
	085 Add X8, X8, W9
	086 Add X0, X8, 312
	087 Move X8, [X0]
	088 Move X1, [X0+8]
	089 Move X0, X19
	090 NotImplemented "Instruction BLR not yet implemented."
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 Move X8, [X19]
	093 Move X1, [X20]
	094 NotImplemented "Instruction LDRH not yet implemented."
	095 Compare X9, 0
	096 JumpIfEqual {103}
	097 Move X10, [X8+176]
	098 Add X10, X10, 8
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Subtract X9, X9, 1
	102 Add X10, X10, 16
	103 Move W2, 3
	104 Move X0, X19
	105 Call 0x1C5D788
	106 Move W0, 1
	107 Move X20, [X31+16]
	108 Move X19, [X31+24]
	109 Move X30, [X31+8]
	110 Move V8, [X31+32]
	111 Return X0
	112 Move W9, [X10]
	113 Add W9, W9, 3
	114 Add X8, X8, W9
	115 Add X0, X8, 312
	116 Move X8, [X0]
	117 Move X1, [X0+8]
	118 Move X0, X19
	119 NotImplemented "Instruction BLR not yet implemented."
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 NotImplemented "Instruction CSET not yet implemented."
	122 Call 0x1C17F20

Method: System.Boolean IsVectorImageBackground(UnityEngine.UIElements.VisualElement ve)

Disassembly:
	0x03DE1EBC RET
	0x03DE1EC0 LDR W8, [X0 + 0x4]
	0x03DE1EC4 CMP W8, 0x3
	0x03DE1EC8 B.HI 0x3DE1EEC
	0x03DE1ECC ADRP X9, 0xFFFFFFFFFCDB7000
	0x03DE1ED0 ADD X9, X9, 0x4C4
	0x03DE1ED4 ADR X10, 0x10
	0x03DE1ED8 LDRB W11, [X9, X8, LSL]
	0x03DE1EDC ADD X10, X10, X11, 0x2, LSL
	0x03DE1EE0 BR X10
	0x03DE1EE4 LDR V0, [X0]
	0x03DE1EE8 RET
	0x03DE1EEC FMOV S0, W31
	0x03DE1EF0 RET
	0x03DE1EF4 LDR V0, [X0]
	0x03DE1EF8 MOVZ W8, 0x43B40000
	0x03DE1EFC FMOV S1, W8
	0x03DE1F00 MOVZ W8, 0x43C80000
	0x03DE1F04 FMUL S0, S0, S1
	0x03DE1F08 FMOV S1, W8
	0x03DE1F0C B 0x3DE1F28
	0x03DE1F10 LDR V0, [X0]
	0x03DE1F14 ADRP X8, 0xFFFFFFFFFCD08000
	0x03DE1F18 LDR V1, [X8 + 0xF4C]
	0x03DE1F1C MOVZ W8, 0x43340000
	0x03DE1F20 FMOV S2, W8
	0x03DE1F24 FMUL S0, S0, S2
	0x03DE1F28 FDIV S0, S0, S1
	0x03DE1F2C RET
	0x03DE1F30 LDR V0, [X0]
	0x03DE1F34 MOVZ W8, 0x43B40000
	0x03DE1F38 FMOV S1, W8
	0x03DE1F3C FMUL S0, S0, S1
	0x03DE1F40 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x608000
	006 Move W8, [X20+476]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x313000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+476], W8
	017 Compare X19, 0
	018 JumpIfEqual {41}
	019 Move X20, 0x313000
	020 Move X20, [X20+1432]
	021 Add X0, X19, 704
	022 Add X8, X31, 0
	023 Move X1, X31
	024 Call ComputedStyle.get_backgroundImage, X0
	025 Move X0, [X20]
	026 Move X19, [X31+24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 And W0, W0, 1
	039 Add X31, X31, 64
	040 Return X0
	041 Call 0x1C17F20

Method: System.Boolean IsElementSelfHidden(UnityEngine.UIElements.VisualElement ve)

Disassembly:
	0x03DE1F54 UBFM X8, X0, 0x20, 0x3F
	0x03DE1F58 UBFM X9, X1, 0x20, 0x3F
	0x03DE1F5C FCMP S0, S1
	0x03DE1F60 CSET W10, EQ
	0x03DE1F64 CMP W8, W9
	0x03DE1F68 CSET W8, EQ
	0x03DE1F6C AND W0, W10, W8, 0x0
	0x03DE1F70 RET
	0x03DE1F74 LDR V0, [X0]
	0x03DE1F78 LDR W8, [X0 + 0x4]
	0x03DE1F7C FMOV S1, W1
	0x03DE1F80 UBFM X9, X1, 0x20, 0x3F
	0x03DE1F84 FCMP S1, S0
	0x03DE1F88 CSET W10, EQ
	0x03DE1F8C CMP W9, W8
	0x03DE1F90 CSET W8, EQ
	0x03DE1F94 AND W0, W10, W8, 0x0
	0x03DE1F98 RET
	0x03DE1F9C STP X30, X21, [X31 - 0x20]!
	0x03DE1FA0 STP X20, X19, [X31 + 0x10]
	0x03DE1FA4 ADRP X21, 0x607000
	0x03DE1FA8 LDRB W8, [X21 + 0x1EB]
	0x03DE1FAC MOV X20, X1
	0x03DE1FB0 MOV X19, X0
	0x03DE1FB4 TBNZ X8, 0x0, 0x3DE1FCC
	0x03DE1FB8 ADRP X0, 0x388000
	0x03DE1FBC LDR X0, [X0 + 0x6C8]
	0x03DE1FC0 BL 0x1C16CF4
	0x03DE1FC4 MOVZ W8, 0x1
	0x03DE1FC8 STRB W8, [X21 + 0x1EB]
	0x03DE1FCC CBZ X20, 0x3DE1FE8
	0x03DE1FD0 ADRP X8, 0x388000
	0x03DE1FD4 LDR X8, [X8 + 0x6C8]
	0x03DE1FD8 LDR X9, [X20]
	0x03DE1FDC LDR X8, [X8]
	0x03DE1FE0 CMP X9, X8
	0x03DE1FE4 B.EQ 0x3DE1FF0
	0x03DE1FE8 MOV W0, W31
	0x03DE1FEC B 0x3DE201C
	0x03DE1FF0 MOV X0, X20
	0x03DE1FF4 BL 0x1C16E08
	0x03DE1FF8 LDR V0, [X0]
	0x03DE1FFC LDR V1, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x608000
	005 Move W8, [X20+477]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x33C000
	012 Move X0, [X0+288]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+477], W8
	016 Compare X19, 0
	017 JumpIfEqual {48}
	018 Move X10, 0x33C000
	019 Move X8, [X19]
	020 Move X10, [X10+288]
	021 NotImplemented "Instruction LDRH not yet implemented."
	022 Move X1, [X10]
	023 Compare X9, 0
	024 JumpIfEqual {31}
	025 Move X10, [X8+176]
	026 Add X10, X10, 8
	027 NotImplemented "Instruction LDUR not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Subtract X9, X9, 1
	030 Add X10, X10, 16
	031 Move W2, 43
	032 Move X0, X19
	033 Call 0x1C5D788
	034 Move W9, [X10]
	035 Add W9, W9, 43
	036 Add X8, X8, W9
	037 Add X0, X8, 312
	038 Move X8, [X0]
	039 Move X1, [X0+8]
	040 Move X0, X19
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Move X30, [X31+32]
	047 Return X0
	048 Call 0x1C17F20

Method: System.Void Destroy(UnityEngine.Object obj)

Disassembly:
	0x03DE2000 LDR W8, [X0 + 0x4]
	0x03DE2004 LDR W9, [X19 + 0x4]
	0x03DE2008 FCMP S0, S1
	0x03DE200C CSET W10, EQ
	0x03DE2010 CMP W8, W9
	0x03DE2014 CSET W8, EQ
	0x03DE2018 AND W0, W10, W8, 0x0
	0x03DE201C LDP X20, X19, [X31 + 0x10]
	0x03DE2020 LDP X30, X21, [X31], #0x20
	0x03DE2024 RET
	0x03DE2028 STP X30, X19, [X31 - 0x10]!
	0x03DE202C MOV X1, X31
	0x03DE2030 MOV X19, X0
	0x03DE2034 BL 0x338FE0C
	0x03DE2038 LDR W8, [X19 + 0x4]
	0x03DE203C MOVZ W9, 0x18D
	0x03DE2040 MUL W9, W0, W9
	0x03DE2044 EOR W0, W9, W8, 0x0
	0x03DE2048 LDP X30, X19, [X31], #0x10
	0x03DE204C RET
	0x03DE2050 SUB X31, X31, 0x40
	0x03DE2054 STR D8, [X31 + 0x10]
	0x03DE2058 STR X30, [X31 + 0x18]
	0x03DE205C STP X22, X21, [X31 + 0x20]
	0x03DE2060 STP X20, X19, [X31 + 0x30]
	0x03DE2064 ADRP X21, 0x606000
	0x03DE2068 ADRP X20, 0x313000
	0x03DE206C LDRB W8, [X21 + 0x1EC]
	0x03DE2070 LDR X20, [X20 + 0xC48]
	0x03DE2074 MOV X19, X0
	0x03DE2078 TBNZ X8, 0x0, 0x3DE20D8
	0x03DE207C ADRP X0, 0x313000
	0x03DE2080 LDR X0, [X0 + 0xC48]
	0x03DE2084 BL 0x1C16CF4
	0x03DE2088 ADRP X0, 0x313000
	0x03DE208C LDR X0, [X0 + 0x278]
	0x03DE2090 BL 0x1C16CF4
	0x03DE2094 ADRP X0, 0x383000
	0x03DE2098 LDR X0, [X0 + 0xAA8]
	0x03DE209C BL 0x1C16CF4
	0x03DE20A0 ADRP X0, 0x383000
	0x03DE20A4 LDR X0, [X0 + 0xAB0]
	0x03DE20A8 BL 0x1C16CF4
	0x03DE20AC ADRP X0, 0x383000
	0x03DE20B0 LDR X0, [X0 + 0xAB8]
	0x03DE20B4 BL 0x1C16CF4
	0x03DE20B8 ADRP X0, 0x311000
	0x03DE20BC LDR X0, [X0 + 0x988]
	0x03DE20C0 BL 0x1C16CF4
	0x03DE20C4 ADRP X0, 0x383000
	0x03DE20C8 LDR X0, [X0 + 0xAC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x607000
	006 Move X20, 0x312000
	007 Move W8, [X21+478]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x312000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move X0, 0x312000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+478], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {40}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 
	040 Move X8, 0x312000
	041 Move X8, [X8+2416]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X31
	048 Call Application.get_isPlaying
	049 Move X8, [X20]
	050 Move W20, W0
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move X0, X19
	057 Move X1, X31
	058 Move TEMP, X20
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {68}
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Call Object.Destroy, X0
	067 Return 
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Call Object.DestroyImmediate, X0
	073 Return 

Method: System.Int32 GetPrevPow2(System.Int32 n)

Disassembly:
	0x03DE20CC BL 0x1C16CF4
	0x03DE20D0 MOVZ W8, 0x1
	0x03DE20D4 STRB W8, [X21 + 0x1EC]
	0x03DE20D8 LDR V0, [X19]
	0x03DE20DC LDR X0, [X20]
	0x03DE20E0 STR S0, [X31 + 0xC]
	0x03DE20E4 LDR W8, [X0 + 0xE0]
	0x03DE20E8 CBNZ W8, 0x3DE20F0
	0x03DE20EC BL 0x1C16DFC
	0x03DE20F0 MOV X0, X31
	0x03DE20F4 BL 0x3338524
	0x03DE20F8 CBZ X0, 0x3DE2224
	0x03DE20FC LDR X8, [X0]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, W31
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W0, W0
	005 ShiftRight W0, 1
	006 And W0, W0, 0x7FFFFFFF
	007 Add W8, W8, 1
	008 And W8, W8, 31
	009 Move W8, W31
	010 Move W9, 1
	011 NotImplemented "Instruction LSLV not yet implemented."
	012 Return X0

Method: System.Int32 GetNextPow2(System.Int32 n)

Disassembly:
	0x03DE2100 ADRP X20, 0x313000
	0x03DE2104 LDR X9, [X8 + 0x218]
	0x03DE2108 LDR X1, [X8 + 0x220]
	0x03DE210C LDR X20, [X20 + 0x278]
	0x03DE2110 BLR X9
	0x03DE2114 MOV X1, X0
	0x03DE2118 ADD X0, X31, 0xC

ISIL:
	001 Move W9, 1
	002 Move W8, W9
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, W9
	005 ShiftRight W9, 31
	006 And W9, W9, 0x3FFFFFFF
	007 Move W0, W8
	008 Return X0

Method: System.Int32 GetNextPow2Exp(System.Int32 n)

Disassembly:
	0x03DE211C MOV X2, X31
	0x03DE2120 BL 0x338FEA0
	0x03DE2124 LDR X8, [X20]
	0x03DE2128 MOV X20, X0
	0x03DE212C LDR X9, [X8 + 0xB8]
	0x03DE2130 LDR W8, [X19 + 0x4]
	0x03DE2134 LDR X21, [X9]
	0x03DE2138 CMP W8, 0x4
	0x03DE213C B.HI 0x3DE21FC
	0x03DE2140 ADRP X9, 0xFFFFFFFFFCDB6000
	0x03DE2144 ADD X9, X9, 0x4C8
	0x03DE2148 ADR X10, 0x10

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, W0
	003 Move W0, W31
	004 Move W9, 1
	005 Move W9, W9
	006 ShiftRight W9, 31
	007 And W9, W9, 0x3FFFFFFF
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add W0, W0, 1
	010 Return X0
	011 Move W0, W31
	012 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03DE214C LDRB W11, [X9, X8, LSL]
	0x03DE2150 ADD X10, X10, X11, 0x2, LSL
	0x03DE2154 BR X10
	0x03DE2158 ADRP X22, 0x5F7000
	0x03DE215C LDRB W8, [X22 + 0x5AA]
	0x03DE2160 LDR V8, [X19]
	0x03DE2164 CBNZ W8, 0x3DE217C
	0x03DE2168 ADRP X0, 0x318000
	0x03DE216C LDR X0, [X0 + 0x4B8]
	0x03DE2170 BL 0x1C16CF4
	0x03DE2174 MOVZ W8, 0x1
	0x03DE2178 STRB W8, [X22 + 0x5AA]
	0x03DE217C ADRP X8, 0x318000
	0x03DE2180 LDR X8, [X8 + 0x4B8]
	0x03DE2184 ADRP X9, 0xFFFFFFFFFCD08000
	0x03DE2188 LDR V0, [X9 + 0x240]
	0x03DE218C FABS S1, S8
	0x03DE2190 LDR X8, [X8]
	0x03DE2194 FMOV S3, 8
	0x03DE2198 FMUL S0, S1, S0
	0x03DE219C LDR X8, [X8 + 0xB8]
	0x03DE21A0 LDR V2, [X8]
	0x03DE21A4 ADRP X8, 0x383000
	0x03DE21A8 LDR X8, [X8 + 0xAA8]
	0x03DE21AC FMUL S2, S2, S3
	0x03DE21B0 FCMP S0, S2
	0x03DE21B4 LDR X8, [X8]
	0x03DE21B8 FCSEL S0, S0, S2, GT
	0x03DE21BC FCMP S1, S0
	0x03DE21C0 CSEL X21, X21, X8, MI
	0x03DE21C4 B 0x3DE21FC
	0x03DE21C8 ADRP X8, 0x383000
	0x03DE21CC LDR X8, [X8 + 0xAB0]
	0x03DE21D0 B 0x3DE21F8
	0x03DE21D4 ADRP X8, 0x311000
	0x03DE21D8 LDR X8, [X8 + 0x988]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x607000
	005 Move X19, 0x383000
	006 Move W8, [X20+479]
	007 Move X19, [X19+2624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x383000
	013 Move X0, [X0+2624]
	014 Call 0x1C17CF4
	015 Move X0, 0x33C000
	016 Move X0, [X0+576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+479], W8
	020 Move X0, [X19]
	021 Move X20, 0x33C000
	022 Move W8, [X0+224]
	023 Move X20, [X20+576]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X19]
	028 Move X8, [X0+184]
	029 Move X9, [X20]
	030 Move X8, [X8+16]
	031 Move X9, [X9+184]
	032 Move [X9], X8
	033 Move X8, [X19]
	034 Move X9, [X20]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X8, [X8+184]
	038 Move X9, [X9+184]
	039 Move X8, [X8+24]
	040 Move [X9+8], X8
	041 Move X30, [X31+32]
	042 Return 

