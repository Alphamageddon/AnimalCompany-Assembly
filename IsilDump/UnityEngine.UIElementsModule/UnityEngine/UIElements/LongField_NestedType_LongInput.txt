Type: UnityEngine.UIElements.LongField/LongInput

Method: UnityEngine.UIElements.LongField get_parentLongField()

Disassembly:
	0x03D6CF28 AND X22, X8, 0x0
	0x03D6CF2C CBZ X10, 0x3D6CF50
	0x03D6CF30 LDR X8, [X9 + 0xB0]
	0x03D6CF34 ADD X8, X8, 0x8
	0x03D6CF38 LDUR X11, [X8 - 0x8]
	0x03D6CF3C CMP X11, X1
	0x03D6CF40 B.EQ 0x3D6CF60
	0x03D6CF44 SUBS X10, X10, 0x1
	0x03D6CF48 ADD X8, X8, 0x10
	0x03D6CF4C B.NE 0x3D6CF38
	0x03D6CF50 MOVZ W2, 0x19
	0x03D6CF54 MOV X0, X20
	0x03D6CF58 BL 0x1C5C788
	0x03D6CF5C B 0x3D6CF70
	0x03D6CF60 LDR W8, [X8]
	0x03D6CF64 ADD W8, W8, 0x19
	0x03D6CF68 ADD X8, X9, W8, 0x4, SXTW
	0x03D6CF6C ADD X0, X8, 0x138
	0x03D6CF70 LDP X8, X3, [X0]
	0x03D6CF74 MOV X0, X20
	0x03D6CF78 MOV X1, X21
	0x03D6CF7C MOV X2, X22
	0x03D6CF80 BLR X8
	0x03D6CF84 MOV X0, X19
	0x03D6CF88 BL 0x3D6DE14
	0x03D6CF8C LDR X0, [X19 + 0x450]
	0x03D6CF90 CBZ X0, 0x3D6D540
	0x03D6CF94 MOV X1, X31
	0x03D6CF98 BL 0x3DE7EEC
	0x03D6CF9C LDR X8, [X19 + 0x440]
	0x03D6CFA0 CBZ X8, 0x3D6D540
	0x03D6CFA4 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67C000
	005 Move W8, [X20+3328]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x3FB000
	012 Move X0, [X0+3040]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3328], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call VisualElement.get_parent, X0
	019 Compare X0, 0
	020 JumpIfEqual {32}
	021 Move X9, 0x3FB000
	022 Move X9, [X9+3040]
	023 Move X8, [X0]
	024 Move X1, [X9]
	025 Move W10, [X8+304]
	026 Move W9, [X1+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X8+200]
	029 Add X8, X8, X9
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C181E0

Method: System.Void .ctor()

Disassembly:
	0x03D6CCAC LDR X1, [X25]
	0x03D6CCB0 MOV X23, X0
	0x03D6CCB4 LDRH W9, [X8 + 0x12E]
	0x03D6CCB8 CBZ X9, 0x3D6CCDC
	0x03D6CCBC LDR X10, [X8 + 0xB0]
	0x03D6CCC0 ADD X10, X10, 0x8
	0x03D6CCC4 LDUR X11, [X10 - 0x8]
	0x03D6CCC8 CMP X11, X1
	0x03D6CCCC B.EQ 0x3D6CCEC
	0x03D6CCD0 SUBS X9, X9, 0x1
	0x03D6CCD4 ADD X10, X10, 0x10
	0x03D6CCD8 B.NE 0x3D6CCC4
	0x03D6CCDC MOVZ W2, 0x27
	0x03D6CCE0 MOV X0, X23
	0x03D6CCE4 BL 0x1C5C788
	0x03D6CCE8 B 0x3D6CCFC
	0x03D6CCEC LDR W9, [X10]
	0x03D6CCF0 ADD W9, W9, 0x27
	0x03D6CCF4 ADD X8, X8, W9, 0x4, SXTW
	0x03D6CCF8 ADD X0, X8, 0x138
	0x03D6CCFC LDP X8, X1, [X0]
	0x03D6CD00 MOV X0, X23
	0x03D6CD04 BLR X8
	0x03D6CD08 LDR X8, [X19]
	0x03D6CD0C MOV W24, W0
	0x03D6CD10 MOV X0, X19
	0x03D6CD14 LDR X9, [X8 + 0x7E8]
	0x03D6CD18 LDR X1, [X8 + 0x7F0]
	0x03D6CD1C BLR X9
	0x03D6CD20 LDR X0, [X19 + 0x440]
	0x03D6CD24 CBZ X0, 0x3D6D540
	0x03D6CD28 LDR V12, [X19 + 0x494]
	0x03D6CD2C LDR V13, [X19 + 0x498]
	0x03D6CD30 MOV X1, X31
	0x03D6CD34 MOV V10.16B, V1.16B
	0x03D6CD38 BL 0x3DE0EB8
	0x03D6CD3C CBZ X0, 0x3D6D540

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67C000
	007 Move X22, 0x3FB000
	008 Move X20, 0x3F4000
	009 Move W8, [X21+3329]
	010 Move X22, [X22+3072]
	011 Move X20, [X20+1960]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x3FB000
	018 Move X0, [X0+3072]
	019 Call 0x1C17CF4
	020 Move X0, 0x3FB000
	021 Move X0, [X0+3080]
	022 Call 0x1C17CF4
	023 Move X0, 0x3F4000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3329], W8
	028 Move X1, [X22]
	029 Move X0, X19
	030 Call TextValueInput<Int64>..ctor, X0
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move X8, [X0+184]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X8, [X8+32]
	041 Move [X19+1024], X8
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+48]
	045 Return 

Method: System.String get_allowedCharacters()

Disassembly:
	0x03D6CFA8 MOV X0, X8
	0x03D6CFAC MOV X1, X31
	0x03D6CFB0 BL 0x3DE0EB8
	0x03D6CFB4 CBZ X0, 0x3D6D540
	0x03D6CFB8 LDR X8, [X0]
	0x03D6CFBC LDR X1, [X25]
	0x03D6CFC0 MOV X21, X0
	0x03D6CFC4 LDRH W9, [X8 + 0x12E]
	0x03D6CFC8 CBZ X9, 0x3D6CFEC
	0x03D6CFCC LDR X10, [X8 + 0xB0]
	0x03D6CFD0 ADD X10, X10, 0x8
	0x03D6CFD4 LDUR X11, [X10 - 0x8]
	0x03D6CFD8 CMP X11, X1
	0x03D6CFDC B.EQ 0x3D6CFFC
	0x03D6CFE0 SUBS X9, X9, 0x1
	0x03D6CFE4 ADD X10, X10, 0x10
	0x03D6CFE8 B.NE 0x3D6CFD4
	0x03D6CFEC MOVZ W2, 0x2C
	0x03D6CFF0 MOV X0, X21
	0x03D6CFF4 BL 0x1C5C788
	0x03D6CFF8 B 0x3D6D00C
	0x03D6CFFC LDR W9, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67C000
	005 Move X19, 0x3F4000
	006 Move W8, [X20+3330]
	007 Move X19, [X19+1960]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3F4000
	013 Move X0, [X0+1960]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3330], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.Int64 startValue)

Disassembly:
	0x03D6D000 ADD W9, W9, 0x2C
	0x03D6D004 ADD X8, X8, W9, 0x4, SXTW
	0x03D6D008 ADD X0, X8, 0x138
	0x03D6D00C LDP X8, X1, [X0]
	0x03D6D010 MOV X0, X21
	0x03D6D014 BLR X8
	0x03D6D018 LDR X0, [X19 + 0x440]
	0x03D6D01C CBZ X0, 0x3D6D540
	0x03D6D020 MOV X1, X31
	0x03D6D024 MOV V8.16B, V0.16B
	0x03D6D028 BL 0x3DE0EB8
	0x03D6D02C CBZ X0, 0x3D6D540
	0x03D6D030 LDR X8, [X0]
	0x03D6D034 LDR X1, [X25]
	0x03D6D038 MOV X21, X0
	0x03D6D03C LDRH W9, [X8 + 0x12E]
	0x03D6D040 CBZ X9, 0x3D6D064
	0x03D6D044 LDR X10, [X8 + 0xB0]
	0x03D6D048 ADD X10, X10, 0x8
	0x03D6D04C LDUR X11, [X10 - 0x8]
	0x03D6D050 CMP X11, X1
	0x03D6D054 B.EQ 0x3D6D074
	0x03D6D058 SUBS X9, X9, 0x1
	0x03D6D05C ADD X10, X10, 0x10
	0x03D6D060 B.NE 0x3D6D04C
	0x03D6D064 MOVZ W2, 0x27
	0x03D6D068 MOV X0, X21
	0x03D6D06C BL 0x1C5C788
	0x03D6D070 B 0x3D6D084
	0x03D6D074 LDR W9, [X10]
	0x03D6D078 ADD W9, W9, 0x27
	0x03D6D07C ADD X8, X8, W9, 0x4, SXTW
	0x03D6D080 ADD X0, X8, 0x138
	0x03D6D084 LDP X8, X1, [X0]
	0x03D6D088 MOV X0, X21
	0x03D6D08C BLR X8
	0x03D6D090 SCVTF S0, W0
	0x03D6D094 FSUB S0, S8, S0
	0x03D6D098 MOV X0, X31
	0x03D6D09C BL 0x3DFED98
	0x03D6D0A0 CBZ X20, 0x3D6D540
	0x03D6D0A4 LDR X9, [X20]
	0x03D6D0A8 MOV X8, X1
	0x03D6D0AC LDR X1, [X23]
	0x03D6D0B0 MOV X21, X0
	0x03D6D0B4 LDRH W10, [X9 + 0x12E]
	0x03D6D0B8 AND X22, X8, 0x0
	0x03D6D0BC CBZ X10, 0x3D6D0E0
	0x03D6D0C0 LDR X8, [X9 + 0xB0]
	0x03D6D0C4 ADD X8, X8, 0x8
	0x03D6D0C8 LDUR X11, [X8 - 0x8]
	0x03D6D0CC CMP X11, X1
	0x03D6D0D0 B.EQ 0x3D6D0F0
	0x03D6D0D4 SUBS X10, X10, 0x1
	0x03D6D0D8 ADD X8, X8, 0x10
	0x03D6D0DC B.NE 0x3D6D0C8
	0x03D6D0E0 MOVZ W2, 0x19
	0x03D6D0E4 MOV X0, X20
	0x03D6D0E8 BL 0x1C5C788
	0x03D6D0EC B 0x3D6D100
	0x03D6D0F0 LDR W8, [X8]
	0x03D6D0F4 ADD W8, W8, 0x19
	0x03D6D0F8 ADD X8, X9, W8, 0x4, SXTW
	0x03D6D0FC ADD X0, X8, 0x138
	0x03D6D100 LDP X8, X3, [X0]
	0x03D6D104 MOV X0, X20
	0x03D6D108 MOV X1, X21
	0x03D6D10C MOV X2, X22
	0x03D6D110 BLR X8
	0x03D6D114 LDR X0, [X19 + 0x450]
	0x03D6D118 CBZ X0, 0x3D6D540
	0x03D6D11C MOV X1, X31
	0x03D6D120 BL 0x3DE7EEC
	0x03D6D124 MOV X20, X0
	0x03D6D128 FMOV S0, W31
	0x03D6D12C MOV X0, X31
	0x03D6D130 BL 0x3DFED98
	0x03D6D134 CBZ X20, 0x3D6D540
	0x03D6D138 LDR X9, [X20]
	0x03D6D13C MOV X8, X1
	0x03D6D140 LDR X1, [X23]
	0x03D6D144 MOV X21, X0
	0x03D6D148 LDRH W10, [X9 + 0x12E]
	0x03D6D14C AND X22, X8, 0x0
	0x03D6D150 CBZ X10, 0x3D6D174
	0x03D6D154 LDR X8, [X9 + 0xB0]
	0x03D6D158 ADD X8, X8, 0x8
	0x03D6D15C LDUR X11, [X8 - 0x8]
	0x03D6D160 CMP X11, X1
	0x03D6D164 B.EQ 0x3D6D184
	0x03D6D168 SUBS X10, X10, 0x1
	0x03D6D16C ADD X8, X8, 0x10
	0x03D6D170 B.NE 0x3D6D15C
	0x03D6D174 MOVZ W2, 0x2D
	0x03D6D178 MOV X0, X20
	0x03D6D17C BL 0x1C5C788
	0x03D6D180 B 0x3D6D194
	0x03D6D184 LDR W8, [X8]
	0x03D6D188 ADD W8, W8, 0x2D
	0x03D6D18C ADD X8, X9, W8, 0x4, SXTW
	0x03D6D190 ADD X0, X8, 0x138
	0x03D6D194 LDP X8, X3, [X0]
	0x03D6D198 MOV X0, X20
	0x03D6D19C MOV X1, X21
	0x03D6D1A0 MOV X2, X22
	0x03D6D1A4 BLR X8
	0x03D6D1A8 LDR X0, [X19 + 0x448]
	0x03D6D1AC CBZ X0, 0x3D6D540
	0x03D6D1B0 MOV X1, X31
	0x03D6D1B4 BL 0x3DE7EEC
	0x03D6D1B8 LDR V0, [X19 + 0x478]
	0x03D6D1BC MOV X20, X0
	0x03D6D1C0 MOV X0, X31
	0x03D6D1C4 BL 0x3DFED98
	0x03D6D1C8 CBZ X20, 0x3D6D540
	0x03D6D1CC LDR X9, [X20]
	0x03D6D1D0 MOV X8, X1
	0x03D6D1D4 LDR X1, [X23]
	0x03D6D1D8 MOV X21, X0
	0x03D6D1DC LDRH W10, [X9 + 0x12E]
	0x03D6D1E0 AND X22, X8, 0x0
	0x03D6D1E4 CBZ X10, 0x3D6D208
	0x03D6D1E8 LDR X8, [X9 + 0xB0]
	0x03D6D1EC ADD X8, X8, 0x8
	0x03D6D1F0 LDUR X11, [X8 - 0x8]
	0x03D6D1F4 CMP X11, X1
	0x03D6D1F8 B.EQ 0x3D6D218
	0x03D6D1FC SUBS X10, X10, 0x1
	0x03D6D200 ADD X8, X8, 0x10
	0x03D6D204 B.NE 0x3D6D1F0
	0x03D6D208 MOVZ W2, 0x36
	0x03D6D20C MOV X0, X20
	0x03D6D210 BL 0x1C5C788
	0x03D6D214 B 0x3D6D228
	0x03D6D218 LDR W8, [X8]
	0x03D6D21C ADD W8, W8, 0x36
	0x03D6D220 ADD X8, X9, W8, 0x4, SXTW
	0x03D6D224 ADD X0, X8, 0x138
	0x03D6D228 LDP X8, X3, [X0]
	0x03D6D22C MOV X0, X20
	0x03D6D230 MOV X1, X21

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x67B000
	013 Move X23, 0x3FA000
	014 Move X22, 0x387000
	015 Move W8, [X24+3331]
	016 Move X23, [X23+3112]
	017 Move X22, [X22+1448]
	018 Move X21, X2
	019 Move W20, W1
	020 Move V8, V1
	021 Move V9, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0x387000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move X0, 0x3FA000
	031 Move X0, [X0+3120]
	032 Call 0x1C17CF4
	033 Move X0, 0x3FA000
	034 Move X0, [X0+3112]
	035 Call 0x1C17CF4
	036 Move X0, 0x3FA000
	037 Move X0, [X0+3128]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+3331], W8
	041 Move X0, X21
	042 Move X1, X31
	043 Call NumericFieldDraggerUtility.CalculateIntDragSensitivity, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction SCVTF not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Move X2, X31
	050 Call NumericFieldDraggerUtility.Acceleration, X0, X1
	051 Move X1, [X23]
	052 Move X0, X19
	053 Move V10, V0
	054 Call TextInputBase<Int64>.get_text, X0
	055 Move X8, [X19]
	056 Move X1, X0
	057 Move X0, X19
	058 Move X9, [X8+1912]
	059 Move X2, [X8+1920]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X20, X0
	062 Move V0, V9
	063 Move V1, V8
	064 Move V2, V10
	065 Move X0, X31
	066 Call NumericFieldDraggerUtility.NiceDelta, X0, V0
	067 Move X0, [X22]
	068 Move V8, V0
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 NotImplemented "Instruction FCVT not yet implemented."
	074 Multiply D8, D11, D0
	075 Add X0, X31, 40
	076 Move V0, V8
	077 Call 0x3EB2C00
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move D1, -0.5
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Move V0, [X31+40]
	082 Move D1, -1
	083 Move D1, 0.5
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move V0, [X31+40]
	086 Move D1, 1
	087 NotImplemented "Instruction FCVTZS not yet implemented."
	088 Add D1, D0, D1
	089 And X31, X8, 1
	090 NotImplemented "Instruction FCSEL not yet implemented."
	091 Add D0, D8, D1
	092 NotImplemented "Instruction FRINTP not yet implemented."
	093 Add D0, D8, D1
	094 NotImplemented "Instruction FRINTM not yet implemented."
	095 Move X8, 0x7FF00000
	096 Move D1, X8
	097 NotImplemented "Instruction FCVTZS not yet implemented."
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Move X8, 0x80000000
	100 NotImplemented "Instruction CSEL not yet implemented."
	101 Move X2, X20
	102 Call LongInput.ClampMinMaxLongValue, X0, X1, X2
	103 Move X20, X0
	104 Move X0, X19
	105 Call LongInput.get_parentLongField, X0
	106 Compare X0, 0
	107 JumpIfEqual {160}
	108 Move X8, 0x3FA000
	109 Move X8, [X8+3120]
	110 Move X1, [X8]
	111 Call TextInputBaseField`1<Int64>.get_isDelayed, X0
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {140}
	116 Move X8, [X19]
	117 Move X0, X19
	118 Move X1, X20
	119 Move X9, [X8+2008]
	120 Move X2, [X8+2016]
	121 NotImplemented "Instruction BLR not yet implemented."
	122 Move X8, 0x3FA000
	123 Move X8, [X8+3128]
	124 Move X1, X0
	125 Move X0, X19
	126 Move X20, [X31+80]
	127 Move X19, [X31+88]
	128 Move X2, [X8]
	129 Move X22, [X31+64]
	130 Move X21, [X31+72]
	131 Move X24, [X31+48]
	132 Move X23, [X31+56]
	133 Move X30, [X31+32]
	134 Move D9, [X31+16]
	135 Move D8, [X31+24]
	136 Move D11, [X31+96]
	137 Move D10, [X31+104]
	138 Call TextInputBase<Int64>.set_text, X0, X1
	139 Return 
	140 Move X0, X19
	141 Call LongInput.get_parentLongField, X0
	142 Compare X0, 0
	143 JumpIfEqual {160}
	144 Move X8, [X0]
	145 Move X1, X20
	146 Move X20, [X31+80]
	147 Move X19, [X31+88]
	148 Move X22, [X31+64]
	149 Move X21, [X31+72]
	150 Move X3, [X8+2040]
	151 Move X2, [X8+2048]
	152 Move X24, [X31+48]
	153 Move X23, [X31+56]
	154 Move X30, [X31+32]
	155 Move D9, [X31+16]
	156 Move D8, [X31+24]
	157 Move D11, [X31+96]
	158 Move D10, [X31+104]
	159 CallNoReturn X3
	160 Call 0x1C17F20

Method: System.Int64 ClampMinMaxLongValue(System.Int64 niceDelta, System.Int64 value)

Disassembly:
	0x03D6D234 MOV X2, X22
	0x03D6D238 BLR X8
	0x03D6D23C LDR X0, [X19 + 0x448]
	0x03D6D240 CBZ X0, 0x3D6D540
	0x03D6D244 MOV X1, X31
	0x03D6D248 BL 0x3DE7EEC
	0x03D6D24C LDR V0, [X19 + 0x47C]
	0x03D6D250 MOV X20, X0
	0x03D6D254 MOV X0, X31
	0x03D6D258 BL 0x3DFED98
	0x03D6D25C CBZ X20, 0x3D6D540
	0x03D6D260 LDR X9, [X20]
	0x03D6D264 MOV X8, X1
	0x03D6D268 LDR X1, [X23]
	0x03D6D26C MOV X21, X0
	0x03D6D270 LDRH W10, [X9 + 0x12E]
	0x03D6D274 AND X22, X8, 0x0
	0x03D6D278 CBZ X10, 0x3D6D29C
	0x03D6D27C LDR X8, [X9 + 0xB0]
	0x03D6D280 ADD X8, X8, 0x8
	0x03D6D284 LDUR X11, [X8 - 0x8]
	0x03D6D288 CMP X11, X1
	0x03D6D28C B.EQ 0x3D6D2AC
	0x03D6D290 SUBS X10, X10, 0x1
	0x03D6D294 ADD X8, X8, 0x10
	0x03D6D298 B.NE 0x3D6D284
	0x03D6D29C MOVZ W2, 0x18
	0x03D6D2A0 MOV X0, X20
	0x03D6D2A4 BL 0x1C5C788
	0x03D6D2A8 B 0x3D6D2BC
	0x03D6D2AC LDR W8, [X8]
	0x03D6D2B0 ADD W8, W8, 0x18
	0x03D6D2B4 ADD X8, X9, W8, 0x4, SXTW
	0x03D6D2B8 ADD X0, X8, 0x138
	0x03D6D2BC LDP X8, X3, [X0]
	0x03D6D2C0 MOV X0, X20
	0x03D6D2C4 MOV X1, X21
	0x03D6D2C8 MOV X2, X22
	0x03D6D2CC BLR X8
	0x03D6D2D0 LDR X0, [X19 + 0x448]
	0x03D6D2D4 CBZ X0, 0x3D6D540

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67B000
	007 Move X22, 0x387000
	008 Move W8, [X21+3332]
	009 Move X22, [X22+1448]
	010 Move X19, X2
	011 Move X20, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x387000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3332], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSNEG not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move TEMP, 0x80000000
	030 Not TEMP
	031 Move X9, TEMP
	032 Subtract X10, X9, X19
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CCMP not yet implemented."
	035 Add X8, X19, X20
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Or X9, X8, -1
	038 Move TEMP, 0
	039 Not TEMP
	040 Move X10, TEMP
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X8, X19, X8
	043 NotImplemented "Instruction CCMP not yet implemented."
	044 Move X9, 0x80000000
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return X0

Method: System.String ValueToString(System.Int64 v)

Disassembly:
	0x03D6D2D8 MOV X1, X31
	0x03D6D2DC BL 0x3DE7EEC
	0x03D6D2E0 MOV X20, X0
	0x03D6D2E4 FMOV S0, W31
	0x03D6D2E8 MOV X0, X31
	0x03D6D2EC BL 0x3DFED98
	0x03D6D2F0 CBZ X20, 0x3D6D540
	0x03D6D2F4 LDR X9, [X20]
	0x03D6D2F8 MOV X8, X1
	0x03D6D2FC LDR X1, [X23]
	0x03D6D300 MOV X21, X0
	0x03D6D304 LDRH W10, [X9 + 0x12E]
	0x03D6D308 AND X22, X8, 0x0
	0x03D6D30C CBZ X10, 0x3D6D330
	0x03D6D310 LDR X8, [X9 + 0xB0]
	0x03D6D314 ADD X8, X8, 0x8
	0x03D6D318 LDUR X11, [X8 - 0x8]
	0x03D6D31C CMP X11, X1
	0x03D6D320 B.EQ 0x3D6D340

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67B000
	005 Move W8, [X20+3333]
	006 Move X19, X0
	007 Move [X31+8], X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3FA000
	013 Move X0, [X0+3136]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3333], W8
	017 Move X1, [X19+1024]
	018 Add X0, X31, 8
	019 Move X2, X31
	020 Call Int64.ToString, X0, X1
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Int64 StringToValue(System.String str)

Disassembly:
	0x03D6D324 SUBS X10, X10, 0x1
	0x03D6D328 ADD X8, X8, 0x10
	0x03D6D32C B.NE 0x3D6D318
	0x03D6D330 MOVZ W2, 0x19
	0x03D6D334 MOV X0, X20
	0x03D6D338 BL 0x1C5C788
	0x03D6D33C B 0x3D6D350
	0x03D6D340 LDR W8, [X8]
	0x03D6D344 ADD W8, W8, 0x19
	0x03D6D348 ADD X8, X9, W8, 0x4, SXTW
	0x03D6D34C ADD X0, X8, 0x138
	0x03D6D350 LDP X8, X3, [X0]
	0x03D6D354 MOV X0, X20
	0x03D6D358 MOV X1, X21
	0x03D6D35C MOV X2, X22
	0x03D6D360 BLR X8
	0x03D6D364 LDR X0, [X19 + 0x448]
	0x03D6D368 CBZ X0, 0x3D6D540
	0x03D6D36C MOV X1, X31
	0x03D6D370 BL 0x3DE7EEC
	0x03D6D374 MOV X20, X0
	0x03D6D378 FMOV S0, W31
	0x03D6D37C MOV X0, X31
	0x03D6D380 BL 0x3DFED98
	0x03D6D384 CBZ X20, 0x3D6D540
	0x03D6D388 LDR X9, [X20]
	0x03D6D38C MOV X8, X1
	0x03D6D390 LDR X1, [X23]
	0x03D6D394 MOV X21, X0
	0x03D6D398 LDRH W10, [X9 + 0x12E]
	0x03D6D39C AND X22, X8, 0x0
	0x03D6D3A0 CBZ X10, 0x3D6D3C4
	0x03D6D3A4 LDR X8, [X9 + 0xB0]
	0x03D6D3A8 ADD X8, X8, 0x8
	0x03D6D3AC LDUR X11, [X8 - 0x8]
	0x03D6D3B0 CMP X11, X1
	0x03D6D3B4 B.EQ 0x3D6D3D4
	0x03D6D3B8 SUBS X10, X10, 0x1
	0x03D6D3BC ADD X8, X8, 0x10
	0x03D6D3C0 B.NE 0x3D6D3AC
	0x03D6D3C4 MOVZ W2, 0x2D
	0x03D6D3C8 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x67B000
	009 Move X22, 0x3FA000
	010 Move X21, 0x3F3000
	011 Move W8, [X23+3334]
	012 Move X22, [X22+3024]
	013 Move X21, [X21+1960]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x3FA000
	021 Move X0, [X0+3024]
	022 Call 0x1C17CF4
	023 Move X0, 0x3F3000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+3334], W8
	028 Move X1, [X22]
	029 Move X0, X20
	030 Move [X31+8], X31
	031 Call TextInputBase<Int64>.get_originalText, X0
	032 Move X8, [X21]
	033 Move X20, X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Add X2, X31, 8
	040 Move X0, X19
	041 Move X1, X20
	042 Move X3, X31
	043 Call UINumericFieldsUtils.TryConvertStringToLong, X0, X1, X2
	044 Move X0, [X31+8]
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X30, [X31+16]
	050 Move X23, [X31+24]
	051 Add X31, X31, 64
	052 Return X0

