Type: UnityEngine.UIElements.UIRAtlasAllocator/AreaNode

Method: UnityEngine.UIElements.UIRAtlasAllocator/AreaNode Acquire(UnityEngine.RectInt rect)

Disassembly:
	0x03DC1F9C MOVZ W8, 0x1
	0x03DC1FA0 STRB W8, [X22 + 0x7E5]
	0x03DC1FA4 LDR X0, [X21]
	0x03DC1FA8 LDR W8, [X0 + 0xE0]
	0x03DC1FAC CBNZ W8, 0x3DC1FB8
	0x03DC1FB0 BL 0x1C16DFC
	0x03DC1FB4 LDR X0, [X21]
	0x03DC1FB8 LDR X8, [X0 + 0xB8]
	0x03DC1FBC LDR X0, [X8]
	0x03DC1FC0 CBZ X0, 0x3DC2008
	0x03DC1FC4 LDR W1, [X19 + 0x10]
	0x03DC1FC8 MOV X2, X31
	0x03DC1FCC BL 0x3DE085C
	0x03DC1FD0 LDR X0, [X20]
	0x03DC1FD4 LDR W8, [X0 + 0xE0]
	0x03DC1FD8 CBNZ W8, 0x3DC1FE4
	0x03DC1FDC BL 0x1C16DFC
	0x03DC1FE0 LDR X0, [X20]
	0x03DC1FE4 LDR X8, [X0 + 0xB8]
	0x03DC1FE8 LDR W8, [X8]
	0x03DC1FEC STR W8, [X19 + 0x10]
	0x03DC1FF0 MOVZ W8, 0x1
	0x03DC1FF4 STRB W8, [X19 + 0x58]
	0x03DC1FF8 LDP X20, X19, [X31 + 0x20]
	0x03DC1FFC LDP X22, X21, [X31 + 0x10]
	0x03DC2000 LDP X30, X23, [X31], #0x30
	0x03DC2004 RET
	0x03DC2008 BL 0x1C16F20
	0x03DC200C STR X30, [X31 - 0x50]!
	0x03DC2010 STP X26, X25, [X31 + 0x10]
	0x03DC2014 STP X24, X23, [X31 + 0x20]
	0x03DC2018 STP X22, X21, [X31 + 0x30]
	0x03DC201C STP X20, X19, [X31 + 0x40]
	0x03DC2020 ADRP X23, 0x626000
	0x03DC2024 LDRB W8, [X23 + 0x129]
	0x03DC2028 MOV X19, X3
	0x03DC202C MOV X22, X2
	0x03DC2030 MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x628000
	007 Move X21, 0x3A9000
	008 Move W8, [X22+288]
	009 Move X21, [X21+200]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3A9000
	017 Move X0, [X0+200]
	018 Call 0x1C17CF4
	019 Move X0, 0x3A9000
	020 Move X0, [X0+224]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+288], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X21]
	030 Move X8, [X0+184]
	031 Move X0, [X8]
	032 Compare X0, 0
	033 JumpIfEqual {50}
	034 Move X8, 0x3A8000
	035 Move X8, [X8+224]
	036 Move X1, [X8]
	037 Call 0x249568C, X0
	038 Compare X0, 0
	039 JumpIfEqual {50}
	040 Move [X0+16], X20
	041 Move [X0+24], X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move [X0+32], X31
	047 Move [X0+40], X31
	048 Move X30, [X31+48]
	049 Return X0
	050 Call 0x1C17F20

Method: System.Void Release()

Disassembly:
	0x03DC1C48 RET
	0x03DC1C4C STR X1, [X0 + 0x18]
	0x03DC1C50 RET
	0x03DC1C54 LDR W0, [X0 + 0x20]
	0x03DC1C58 RET
	0x03DC1C5C LDR W0, [X0 + 0x24]
	0x03DC1C60 RET
	0x03DC1C64 STP X30, X25, [X31 - 0x40]!
	0x03DC1C68 STP X24, X23, [X31 + 0x10]
	0x03DC1C6C STP X22, X21, [X31 + 0x20]
	0x03DC1C70 STP X20, X19, [X31 + 0x30]
	0x03DC1C74 ADRP X25, 0x627000
	0x03DC1C78 ADRP X24, 0x3A1000
	0x03DC1C7C LDRB W8, [X25 + 0x126]
	0x03DC1C80 LDR X24, [X24 + 0x6B0]
	0x03DC1C84 MOV X20, X4
	0x03DC1C88 MOV X21, X3
	0x03DC1C8C MOV W22, W2
	0x03DC1C90 MOV W23, W1
	0x03DC1C94 MOV X19, X0
	0x03DC1C98 TBNZ X8, 0x0, 0x3DC1CC8
	0x03DC1C9C ADRP X0, 0x3A8000
	0x03DC1CA0 LDR X0, [X0 + 0x150]
	0x03DC1CA4 BL 0x1C16CF4
	0x03DC1CA8 ADRP X0, 0x3A3000
	0x03DC1CAC LDR X0, [X0 + 0xAB8]
	0x03DC1CB0 BL 0x1C16CF4
	0x03DC1CB4 ADRP X0, 0x3A1000
	0x03DC1CB8 LDR X0, [X0 + 0x6B0]
	0x03DC1CBC BL 0x1C16CF4
	0x03DC1CC0 MOVZ W8, 0x1
	0x03DC1CC4 STRB W8, [X25 + 0x126]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x628000
	006 Move X20, 0x3A9000
	007 Move W8, [X21+289]
	008 Move X20, [X20+200]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x3A9000
	015 Move X0, [X0+200]
	016 Call 0x1C17CF4
	017 Move X0, 0x3A9000
	018 Move X0, [X0+208]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+289], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, [X8]
	030 Compare X0, 0
	031 JumpIfEqual {42}
	032 Move X8, 0x3A9000
	033 Move X8, [X8+208]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X2, [X8]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call 0x24956D8, X0, X1
	041 Return 
	042 Call 0x1C17F20

Method: System.Void RemoveFromChain()

Disassembly:
	0x03DC2714 LDR W8, [X21 + 0x18]
	0x03DC2718 CMP W8, 0x1
	0x03DC271C B.LS 0x3DC2890
	0x03DC2720 STR X22, [X21 + 0x28]
	0x03DC2724 LDR W8, [X19 + 0x50]
	0x03DC2728 LDR X0, [X23]
	0x03DC272C ADD X1, X31, 0x4
	0x03DC2730 STR W8, [X31 + 0x4]
	0x03DC2734 BL 0x1C16E04
	0x03DC2738 MOV X22, X0

ISIL:
	001 Move X8, X0
	002 Add X8, X8, 32
	003 Move X9, [X8]
	004 Compare X9, 0
	005 JumpIfEqual {8}
	006 Move X10, [X0+40]
	007 Move [X9+40], X10
	008 Move X10, [X0+40]
	009 Compare X10, 0
	010 JumpIfEqual {12}
	011 Move [X10+32], X9
	012 Move [X8], X31
	013 Move [X8+8], X31
	014 Return 

Method: System.Void AddAfter(UnityEngine.UIElements.UIRAtlasAllocator/AreaNode previous)

Disassembly:
	0x03DC273C CBZ X0, 0x3DC2754
	0x03DC2740 LDR X8, [X21]
	0x03DC2744 MOV X0, X22
	0x03DC2748 LDR X1, [X8 + 0x40]
	0x03DC274C BL 0x1C16E00
	0x03DC2750 CBZ X0, 0x3DC2894
	0x03DC2754 LDR W8, [X21 + 0x18]
	0x03DC2758 CMP W8, 0x2
	0x03DC275C B.LS 0x3DC2890
	0x03DC2760 STR X22, [X21 + 0x30]
	0x03DC2764 LDR W8, [X19 + 0x54]
	0x03DC2768 LDR X0, [X23]
	0x03DC276C ADD X1, X31, 0x0
	0x03DC2770 STR W8, [X31]
	0x03DC2774 BL 0x1C16E04
	0x03DC2778 MOV X22, X0
	0x03DC277C CBZ X0, 0x3DC2794
	0x03DC2780 LDR X8, [X21]
	0x03DC2784 MOV X0, X22
	0x03DC2788 LDR X1, [X8 + 0x40]
	0x03DC278C BL 0x1C16E00
	0x03DC2790 CBZ X0, 0x3DC2894
	0x03DC2794 LDR W8, [X21 + 0x18]
	0x03DC2798 CMP W8, 0x3
	0x03DC279C B.LS 0x3DC2890
	0x03DC27A0 STR X22, [X21 + 0x38]
	0x03DC27A4 ADRP X8, 0x331000
	0x03DC27A8 LDR X8, [X8 + 0xA28]
	0x03DC27AC LDR X0, [X8]
	0x03DC27B0 LDR W8, [X0 + 0xE0]
	0x03DC27B4 CBNZ W8, 0x3DC27BC
	0x03DC27B8 BL 0x1C16DFC
	0x03DC27BC ADRP X8, 0x3A7000
	0x03DC27C0 LDR X8, [X8 + 0x158]
	0x03DC27C4 MOV X1, X21
	0x03DC27C8 MOV X2, X31
	0x03DC27CC LDR X0, [X8]
	0x03DC27D0 BL 0x3C066BC
	0x03DC27D4 B 0x3DC284C
	0x03DC27D8 LDR X21, [X19 + 0x18]
	0x03DC27DC CBZ X21, 0x3DC288C
	0x03DC27E0 LDR X8, [X21]
	0x03DC27E4 LDR X22, [X19 + 0x48]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x627000
	007 Move X21, 0x35A000
	008 Move W8, [X22+290]
	009 Move X21, [X21+2032]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3A8000
	017 Move X0, [X0+240]
	018 Call 0x1C17CF4
	019 Move X0, 0x35A000
	020 Move X0, [X0+2032]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+290], W8
	024 Move X0, [X21]
	025 Move X22, 0x3A8000
	026 Move X21, [X19+32]
	027 Move W8, [X0+224]
	028 Move X22, [X22+240]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X1, [X22]
	033 Move X0, X21
	034 Call 0x2185678, X0
	035 Move X0, [X19+40]
	036 Move X1, [X22]
	037 Call 0x2185678, X0
	038 Move [X19+32], X20
	039 Compare X20, 0
	040 JumpIfEqual {44}
	041 Move X8, [X20+40]
	042 Move [X19+40], X8
	043 Move [X20+40], X19
	044 Move X8, [X19+40]
	045 Compare X8, 0
	046 JumpIfEqual {48}
	047 Move [X8+32], X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return 

Method: System.Void .ctor()

Disassembly:
	0x03DC2A64 LDP X30, X19, [X31], #0x10
	0x03DC2A68 RET

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x03DC2A6C BL 0x1C16F20
	0x03DC2A70 STR X30, [X31 - 0x30]!
	0x03DC2A74 STP X22, X21, [X31 + 0x10]
	0x03DC2A78 STP X20, X19, [X31 + 0x20]
	0x03DC2A7C ADRP X20, 0x626000
	0x03DC2A80 LDRB W8, [X20 + 0x12F]
	0x03DC2A84 MOV X19, X0
	0x03DC2A88 TBNZ X8, 0x0, 0x3DC2AB8
	0x03DC2A8C ADRP X0, 0x331000
	0x03DC2A90 LDR X0, [X0 + 0xA28]
	0x03DC2A94 BL 0x1C16CF4
	0x03DC2A98 ADRP X0, 0x3A7000
	0x03DC2A9C LDR X0, [X0 + 0x170]
	0x03DC2AA0 BL 0x1C16CF4
	0x03DC2AA4 ADRP X0, 0x3A7000
	0x03DC2AA8 LDR X0, [X0 + 0x178]
	0x03DC2AAC BL 0x1C16CF4
	0x03DC2AB0 MOVZ W8, 0x1
	0x03DC2AB4 STRB W8, [X20 + 0x12F]
	0x03DC2AB8 MOV W20, W31
	0x03DC2ABC MOVZ W21, 0x1
	0x03DC2AC0 MOVZ W22, 0x7FC00000
	0x03DC2AC4 MOV X0, X19
	0x03DC2AC8 MOV X1, X31
	0x03DC2ACC BL 0x3D1BE30
	0x03DC2AD0 CBZ X0, 0x3DC2C64
	0x03DC2AD4 LDR X0, [X0 + 0x2B8]
	0x03DC2AD8 CBZ X0, 0x3DC2C64
	0x03DC2ADC MOV X1, X31
	0x03DC2AE0 BL 0x3CE6F20
	0x03DC2AE4 TBZ X0, 0x0, 0x3DC2C2C
	0x03DC2AE8 LDR X8, [X19 + 0x20]
	0x03DC2AEC CBZ X8, 0x3DC2C64
	0x03DC2AF0 LDP W2, W9, [X8 + 0x18]
	0x03DC2AF4 ADD W9, W9, 0x1
	0x03DC2AF8 CMP W2, 0x1
	0x03DC2AFC STP W31, W9, [X8 + 0x18]
	0x03DC2B00 B.LT 0x3DC2B14
	0x03DC2B04 LDR X0, [X8 + 0x10]
	0x03DC2B08 MOV W1, W31
	0x03DC2B0C MOV X3, X31
	0x03DC2B10 BL 0x339FA34
	0x03DC2B14 CBZ W20, 0x3DC2B38
	0x03DC2B18 MOV X0, X19
	0x03DC2B1C MOV X1, X31
	0x03DC2B20 BL 0x3D1A824
	0x03DC2B24 CBZ X0, 0x3DC2C64
	0x03DC2B28 LDR X8, [X0]
	0x03DC2B2C LDR X9, [X8 + 0x308]
	0x03DC2B30 LDR X1, [X8 + 0x310]
	0x03DC2B34 BLR X9
	0x03DC2B38 MOV X0, X19
	0x03DC2B3C MOV X1, X31
	0x03DC2B40 BL 0x3D1A824
	0x03DC2B44 CBZ X0, 0x3DC2C64
	0x03DC2B48 STRB W21, [X0 + 0x4C]
	0x03DC2B4C MOV X0, X19
	0x03DC2B50 MOV X1, X31
	0x03DC2B54 BL 0x3D1BE30
	0x03DC2B58 CBZ X0, 0x3DC2C64
	0x03DC2B5C LDR X0, [X0 + 0x2B8]
	0x03DC2B60 CBZ X0, 0x3DC2C64
	0x03DC2B64 FMOV S0, W22
	0x03DC2B68 MOV V1.16B, V0.16B
	0x03DC2B6C MOV X1, X31
	0x03DC2B70 BL 0x3CE7CC4
	0x03DC2B74 MOV X0, X19
	0x03DC2B78 MOV X1, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x627000
	009 Move X19, 0x3A8000
	010 Move W8, [X20+291]
	011 Move X19, [X19+296]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x3A8000
	017 Move X0, [X0+200]
	018 Call 0x1C17CF4
	019 Move X0, 0x3A8000
	020 Move X0, [X0+304]
	021 Call 0x1C17CF4
	022 Move X0, 0x3A8000
	023 Move X0, [X0+312]
	024 Call 0x1C17CF4
	025 Move X0, 0x3A8000
	026 Move X0, [X0+320]
	027 Call 0x1C17CF4
	028 Move X0, 0x3A8000
	029 Move X0, [X0+328]
	030 Call 0x1C17CF4
	031 Move X0, 0x3A8000
	032 Move X0, [X0+296]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+291], W8
	036 Move X0, [X19]
	037 Move X24, 0x3A8000
	038 Move X20, 0x3A8000
	039 Move X23, 0x3A8000
	040 Move X22, 0x3A8000
	041 Move X21, 0x3A8000
	042 Move X24, [X24+304]
	043 Move W8, [X0+224]
	044 Move X20, [X20+328]
	045 Move X23, [X23+320]
	046 Move X22, [X22+312]
	047 Move X21, [X21+200]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X19]
	052 Move X8, [X0+184]
	053 Move X0, [X24]
	054 Move X19, [X8]
	055 Call 0x1C17F10
	056 Move X2, [X20]
	057 Move X1, X19
	058 Move X3, X31
	059 Move X20, X0
	060 Call Func`1<Object>..ctor, X0, X1, X2
	061 Move X0, [X23]
	062 Call 0x1C17F10
	063 Move X3, [X22]
	064 Move W2, 100
	065 Move X1, X20
	066 Move X19, X0
	067 Call 0x24954D4, X0, X1, X2
	068 Move X8, [X21]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move X8, [X8+184]
	074 Move [X8], X19
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X30, [X31+64]
	078 Return 

