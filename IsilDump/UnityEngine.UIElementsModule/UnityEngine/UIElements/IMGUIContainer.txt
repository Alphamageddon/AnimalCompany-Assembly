Type: UnityEngine.UIElements.IMGUIContainer

Method: System.Action get_onGUIHandler()

Disassembly:
	0x03DB75D8 STRB W8, [X29 + 0xAB2]
	0x03DB75DC LDR X0, [X25]

ISIL:
	001 Move X0, [X0+968]
	002 Return X0

Method: System.Void set_onGUIHandler(System.Action value)

Disassembly:
	0x03DB75E0 LDR W8, [X0 + 0xE0]
	0x03DB75E4 CBNZ W8, 0x3DB75F0
	0x03DB75E8 BL 0x1C16DFC
	0x03DB75EC LDR X0, [X25]
	0x03DB75F0 LDR X8, [X0 + 0xB8]
	0x03DB75F4 LDR X8, [X8 + 0x8]
	0x03DB75F8 CMP X28, X8
	0x03DB75FC B.NE 0x3DB7678
	0x03DB7600 ADRP X8, 0x368000
	0x03DB7604 LDR X8, [X8 + 0x5C8]
	0x03DB7608 LDR X0, [X8]
	0x03DB760C B 0x3DB7640
	0x03DB7610 ADRP X25, 0x368000
	0x03DB7614 LDR X25, [X25 + 0x5C8]
	0x03DB7618 LDR X0, [X25]
	0x03DB761C LDR W8, [X0 + 0xE0]
	0x03DB7620 CBNZ W8, 0x3DB7628
	0x03DB7624 BL 0x1C16DFC
	0x03DB7628 MOV X0, X31
	0x03DB762C BL 0x3C6AA80
	0x03DB7630 CBNZ W0, 0x3DB7678
	0x03DB7634 LDRB W8, [X24 + 0x3ED]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+968]
	006 Move X2, X31
	007 Move X20, X1
	008 Call Delegate.op_Inequality, X0, X1
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {26}
	013 Move W1, 8
	014 Move X0, X19
	015 Move X2, X31
	016 Move [X19+968], X20
	017 Call VisualElement.IncrementVersion, X0, X1
	018 Move X0, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move W1, 2048
	022 Move X2, X31
	023 Move X30, [X31+32]
	024 Call VisualElement.IncrementVersion, X0, X1
	025 Return 
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return 

Method: UnityEngine.ObjectGUIState get_guiState()

Disassembly:
	0x03DB7638 CBZ W8, 0x3DB7678
	0x03DB763C LDR X0, [X25]
	0x03DB7640 LDR W8, [X0 + 0xE0]
	0x03DB7644 CBNZ W8, 0x3DB764C
	0x03DB7648 BL 0x1C16DFC
	0x03DB764C MOV X0, X31
	0x03DB7650 BL 0x3C755D0
	0x03DB7654 B 0x3DB7678
	0x03DB7658 ADRP X8, 0x368000
	0x03DB765C LDR X8, [X8 + 0x5C8]
	0x03DB7660 LDR X0, [X8]
	0x03DB7664 LDR W8, [X0 + 0xE0]
	0x03DB7668 CBNZ W8, 0x3DB7670
	0x03DB766C BL 0x1C16DFC
	0x03DB7670 MOV X0, X31
	0x03DB7674 BL 0x3C755F8
	0x03DB7678 LDR X8, [X24]
	0x03DB767C MOV X0, X24
	0x03DB7680 LDR X9, [X8 + 0x228]
	0x03DB7684 LDR X1, [X8 + 0x230]
	0x03DB7688 BLR X9
	0x03DB768C CBZ X0, 0x3DB778C
	0x03DB7690 LDR X8, [X24]
	0x03DB7694 MOV X0, X24
	0x03DB7698 LDR X9, [X8 + 0x228]
	0x03DB769C LDR X1, [X8 + 0x230]
	0x03DB76A0 BLR X9
	0x03DB76A4 CBZ X0, 0x3DB7CD4
	0x03DB76A8 ADRP X25, 0x368000
	0x03DB76AC LDR X25, [X25 + 0x5C8]
	0x03DB76B0 LDR W28, [X0 + 0x3C]
	0x03DB76B4 LDR X8, [X25]
	0x03DB76B8 LDR W9, [X8 + 0xE0]
	0x03DB76BC CBNZ W9, 0x3DB76C8
	0x03DB76C0 MOV X0, X8
	0x03DB76C4 BL 0x1C16DFC
	0x03DB76C8 MOV X0, X31
	0x03DB76CC BL 0x3C6AA80
	0x03DB76D0 CMP W28, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x632000
	006 Move X20, 0x33D000
	007 Move W8, [X21+79]
	008 Move X20, [X20+2600]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x33D000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x3B2000
	018 Move X0, [X0+3696]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+79], W8
	022 Move X0, [X20]
	023 Move W20, [X19+984]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move X1, X31
	031 Call Debug.Assert, X0
	032 Move X20, [X19+976]
	033 Compare X20, 0
	034 JumpIfNotEqual {43}
	035 Move X8, 0x3B2000
	036 Move X8, [X8+3696]
	037 Move X0, [X8]
	038 Call 0x1C17F10
	039 Move X1, X31
	040 Move X20, X0
	041 Call ObjectGUIState..ctor, X0
	042 Move [X19+976], X20
	043 Move X0, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0

Method: UnityEngine.Rect get_lastWorldClip()

Disassembly:
	0x03DB76D4 B.EQ 0x3DB7750
	0x03DB76D8 ADRP X29, 0x367000
	0x03DB76DC LDR X29, [X29 + 0xDB0]
	0x03DB76E0 LDR X28, [X24 + 0x450]
	0x03DB76E4 LDR X0, [X29]

ISIL:
	001 Move V0, [X0+988]
	002 Move V1, [X0+992]
	003 Move V2, [X0+996]
	004 Move V3, [X0+1000]
	005 Return X0

Method: System.Void set_lastWorldClip(UnityEngine.Rect value)

Disassembly:
	0x03DB76E8 LDR W8, [X0 + 0xE0]
	0x03DB76EC CBNZ W8, 0x3DB76F4
	0x03DB76F0 BL 0x1C16DFC
	0x03DB76F4 LDRB W8, [X27 + 0x7F7]
	0x03DB76F8 CBNZ W8, 0x3DB7710

ISIL:
	001 Move [X0+988], S0
	002 Move [X0+992], S1
	003 Move [X0+996], S2
	004 Move [X0+1000], S3
	005 Return 

Method: System.Boolean get_cullingEnabled()

Disassembly:
	0x03DB76FC ADRP X0, 0x367000
	0x03DB7700 LDR X0, [X0 + 0xDB0]

ISIL:
	001 Move W0, [X0+1004]
	002 Return X0

Method: UnityEngine.GUILayoutUtility/LayoutCache get_cache()

Disassembly:
	0x03DB7704 BL 0x1C16CF4
	0x03DB7708 MOVZ W8, 0x1
	0x03DB770C STRB W8, [X27 + 0x7F7]
	0x03DB7710 LDR X0, [X29]
	0x03DB7714 LDR W8, [X0 + 0xE0]
	0x03DB7718 CBNZ W8, 0x3DB7724
	0x03DB771C BL 0x1C16DFC
	0x03DB7720 LDR X0, [X29]
	0x03DB7724 LDR X8, [X0 + 0xB8]
	0x03DB7728 LDR X8, [X8]
	0x03DB772C CMP X28, X8
	0x03DB7730 B.EQ 0x3DB7750
	0x03DB7734 LDR X0, [X25]
	0x03DB7738 LDR W8, [X0 + 0xE0]
	0x03DB773C CBNZ W8, 0x3DB7744
	0x03DB7740 BL 0x1C16DFC
	0x03DB7744 MOV X0, X31
	0x03DB7748 BL 0x3C6AA80
	0x03DB774C STR W0, [X24 + 0x45C]
	0x03DB7750 LDR X8, [X24]
	0x03DB7754 MOV X0, X24
	0x03DB7758 LDR X9, [X8 + 0x228]
	0x03DB775C LDR X1, [X8 + 0x230]
	0x03DB7760 BLR X9
	0x03DB7764 LDR X8, [X25]
	0x03DB7768 MOV X25, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x632000
	005 Move W8, [X20+80]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x3AA000
	012 Move X0, [X0+704]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+80], W8
	016 Move X20, [X19+1008]
	017 Compare X20, 0
	018 JumpIfNotEqual {30}
	019 Move X8, 0x3AA000
	020 Move X8, [X8+704]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move TEMP, 0
	024 Not TEMP
	025 Move W1, TEMP
	026 Move X2, X31
	027 Move X20, X0
	028 Call LayoutCache..ctor, X0, X1
	029 Move [X19+1008], X20
	030 Move X0, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0

Method: System.Single get_layoutMeasuredWidth()

Disassembly:
	0x03DB776C LDR W9, [X8 + 0xE0]
	0x03DB7770 CBNZ W9, 0x3DB777C
	0x03DB7774 MOV X0, X8
	0x03DB7778 BL 0x1C16DFC
	0x03DB777C MOV X0, X31
	0x03DB7780 BL 0x3C6AA80
	0x03DB7784 CBZ X25, 0x3DB7CD4
	0x03DB7788 STR W0, [X25 + 0x3C]
	0x03DB778C STRB W31, [X24 + 0x44D]
	0x03DB7790 ADRP X25, 0x367000

ISIL:
	001 Move [X31-16], X30
	002 Call IMGUIContainer.get_cache, X0
	003 Compare X0, 0
	004 JumpIfEqual {12}
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move V0, [X8+20]
	009 NotImplemented "Instruction FRINTP not yet implemented."
	010 Move X30, [X31+16]
	011 Return V0
	012 Call 0x1C17F20

Method: System.Single get_layoutMeasuredHeight()

Disassembly:
	0x03DB7794 LDR X25, [X25 + 0xDB0]
	0x03DB7798 LDR X0, [X25]
	0x03DB779C LDR W8, [X0 + 0xE0]
	0x03DB77A0 CBNZ W8, 0x3DB77A8
	0x03DB77A4 BL 0x1C16DFC
	0x03DB77A8 LDRB W8, [X27 + 0x7F7]
	0x03DB77AC CBNZ W8, 0x3DB77C4
	0x03DB77B0 ADRP X0, 0x367000
	0x03DB77B4 LDR X0, [X0 + 0xDB0]
	0x03DB77B8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call IMGUIContainer.get_cache, X0
	003 Compare X0, 0
	004 JumpIfEqual {12}
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move V0, [X8+28]
	009 NotImplemented "Instruction FRINTP not yet implemented."
	010 Move X30, [X31+16]
	011 Return V0
	012 Call 0x1C17F20

Method: UnityEngine.UIElements.ContextType get_contextType()

Disassembly:
	0x03DB77BC MOVZ W8, 0x1
	0x03DB77C0 STRB W8, [X27 + 0x7F7]

ISIL:
	001 Move W0, [X0+1096]
	002 Return X0

Method: System.Void set_contextType(UnityEngine.UIElements.ContextType value)

Disassembly:
	0x03DB77C4 LDR X0, [X25]
	0x03DB77C8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X0+1096], W1
	002 Return 

Method: System.Boolean get_focusOnlyIfHasFocusableControls()

Disassembly:
	0x03DB77CC CBNZ W8, 0x3DB77D8
	0x03DB77D0 BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+1120]
	002 Return X0

Method: System.Boolean get_canGrabFocus()

Disassembly:
	0x03DB77D4 LDR X0, [X25]
	0x03DB77D8 LDR X8, [X0 + 0xB8]
	0x03DB77DC LDR X8, [X8]
	0x03DB77E0 STR X8, [X24 + 0x450]
	0x03DB77E4 MOV X0, X31
	0x03DB77E8 BL 0x3C63934
	0x03DB77EC CBZ X0, 0x3DB7CD4
	0x03DB77F0 MOV X1, X31

ISIL:
	001 Move W8, [X0+1120]
	002 Compare W8, 0
	003 JumpIfEqual {7}
	004 Move W8, [X0+1112]
	005 Compare W8, 0
	006 JumpIfEqual {10}
	007 Move X1, X31
	008 Call VisualElement.get_canGrabFocus, X0
	009 Return X0
	010 Move W0, W31
	011 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03DB77F4 BL 0x3C63270
	0x03DB77F8 ADD X8, X31, 0x204
	0x03DB77FC ADD X9, X31, 0x1F4
	0x03DB7800 ADD X10, X31, 0x1F0
	0x03DB7804 ADD X11, X31, 0x1EC
	0x03DB7808 ADD X12, X31, 0x1E8
	0x03DB780C STP X31, X8, [X31 + 0x80]
	0x03DB7810 ADD X8, X31, 0x1CC
	0x03DB7814 STP X9, X10, [X31 + 0x90]
	0x03DB7818 ADD X9, X31, 0x1C8
	0x03DB781C ADD X13, X31, 0x208
	0x03DB7820 ADD X14, X31, 0x1E4
	0x03DB7824 ADD X15, X31, 0x1A4
	0x03DB7828 ADD X16, X31, 0x1E0
	0x03DB782C STP X11, X12, [X31 + 0xA0]
	0x03DB7830 ADD X10, X31, 0x1C4
	0x03DB7834 ADD X11, X31, 0x1C0
	0x03DB7838 STP X8, X9, [X31 + 0x100]
	0x03DB783C ADD X8, X31, 0x178
	0x03DB7840 ADD X9, X31, 0x1B4
	0x03DB7844 STR W0, [X31 + 0x200]
	0x03DB7848 ADD X17, X31, 0x1D8
	0x03DB784C ADD X0, X31, 0x198
	0x03DB7850 ADD X1, X31, 0x190
	0x03DB7854 ADD X2, X31, 0x188
	0x03DB7858 ADD X3, X31, 0x180
	0x03DB785C ADD X4, X31, 0x1D0
	0x03DB7860 STP X13, X14, [X31 + 0xB0]
	0x03DB7864 STP X15, X16, [X31 + 0xC0]
	0x03DB7868 ADD X12, X31, 0x17C
	0x03DB786C ADD X13, X31, 0x1BC
	0x03DB7870 ADD X14, X31, 0x1B8
	0x03DB7874 ADD X15, X31, 0x200
	0x03DB7878 STP X10, X11, [X31 + 0x110]
	0x03DB787C ADD X10, X31, 0x174
	0x03DB7880 ADD X11, X31, 0x1B0
	0x03DB7884 STP X8, X9, [X31 + 0x140]
	0x03DB7888 ADD X8, X31, 0x1AC
	0x03DB788C ADD X9, X31, 0x1A8
	0x03DB7890 STP X17, X0, [X31 + 0xD0]
	0x03DB7894 STP X1, X2, [X31 + 0xE0]
	0x03DB7898 STP X3, X4, [X31 + 0xF0]
	0x03DB789C STP X12, X13, [X31 + 0x120]
	0x03DB78A0 STP X14, X15, [X31 + 0x130]
	0x03DB78A4 STP X10, X11, [X31 + 0x150]
	0x03DB78A8 STP X8, X9, [X31 + 0x160]
	0x03DB78AC LDP V1, V0, [X23 + 0x20]
	0x03DB78B0 LDP V3, V2, [X23]
	0x03DB78B4 STRB W31, [X31 + 0x78]
	0x03DB78B8 STP V1, V0, [X31 + 0x50]
	0x03DB78BC STP V3, V2, [X31 + 0x30]
	0x03DB78C0 ADD X0, X31, 0x78
	0x03DB78C4 ADD X1, X31, 0x30
	0x03DB78C8 MOV V0.16B, V11.16B
	0x03DB78CC MOV V1.16B, V9.16B
	0x03DB78D0 MOV V2.16B, V8.16B
	0x03DB78D4 MOV V3.16B, V10.16B
	0x03DB78D8 MOV X2, X31
	0x03DB78DC BL 0x3C6CD5C
	0x03DB78E0 ADRP X23, 0x3AD000
	0x03DB78E4 LDRB W8, [X31 + 0x78]
	0x03DB78E8 LDR X23, [X23 + 0xC0]
	0x03DB78EC STRB W8, [X31 + 0x1F8]
	0x03DB78F0 LDR X0, [X23]
	0x03DB78F4 LDR W8, [X0 + 0xE0]
	0x03DB78F8 CBNZ W8, 0x3DB7904
	0x03DB78FC BL 0x1C16DFC
	0x03DB7900 LDR X0, [X23]
	0x03DB7904 LDR X8, [X0 + 0xB8]
	0x03DB7908 LDR X23, [X8 + 0x18]
	0x03DB790C MOV X0, X23
	0x03DB7910 MOV X1, X31
	0x03DB7914 MOV X2, X31
	0x03DB7918 BL 0x33C5D2C
	0x03DB791C TBZ X0, 0x0, 0x3DB792C
	0x03DB7920 MOV X0, X23
	0x03DB7924 MOV X1, X31
	0x03DB7928 BL 0x3BFE970
	0x03DB792C LDR X0, [X22 + 0x40]
	0x03DB7930 LDR X1, [X22 + 0x28]
	0x03DB7934 LDR X8, [X22 + 0x18]
	0x03DB7938 BLR X8
	0x03DB793C MOV X22, X31
	0x03DB7940 MOVZ W24, 0x1D
	0x03DB7944 MOV X0, X23
	0x03DB7948 MOV X1, X31
	0x03DB794C MOV X2, X31
	0x03DB7950 BL 0x33C5D2C
	0x03DB7954 TBZ X0, 0x0, 0x3DB7964
	0x03DB7958 MOV X0, X23
	0x03DB795C MOV X1, X31
	0x03DB7960 BL 0x3BFEA0C
	0x03DB7964 CBNZ X22, 0x3DB7CE0
	0x03DB7968 CMP W24, 0x1D
	0x03DB796C B.EQ 0x3DB7974
	0x03DB7970 CBNZ W24, 0x3DB7980
	0x03DB7974 MOV X23, X31
	0x03DB7978 MOVZ W24, 0x1E
	0x03DB797C B 0x3DB7984
	0x03DB7980 MOV X23, X31
	0x03DB7984 ADD X0, X31, 0x1F8
	0x03DB7988 MOV X1, X31
	0x03DB798C BL 0x3C6CDB0
	0x03DB7990 CBNZ X23, 0x3DB7CD8
	0x03DB7994 CBZ W24, 0x3DB79A0
	0x03DB7998 CMP W24, 0x1E
	0x03DB799C B.NE 0x3DB7B90
	0x03DB79A0 ADD X0, X31, 0x80
	0x03DB79A4 BL 0x1C115C4
	0x03DB79A8 LDR X0, [X26]
	0x03DB79AC LDR W8, [X0 + 0xE0]
	0x03DB79B0 CBNZ W8, 0x3DB79B8
	0x03DB79B4 BL 0x1C16DFC
	0x03DB79B8 MOV X0, X19
	0x03DB79BC MOV V0.16B, V15.16B
	0x03DB79C0 MOV V1.16B, V14.16B
	0x03DB79C4 MOV V2.16B, V13.16B
	0x03DB79C8 MOV V3.16B, V12.16B
	0x03DB79CC MOV X1, X31
	0x03DB79D0 BL 0x3E1922C
	0x03DB79D4 LDR X0, [X31 + 0x208]
	0x03DB79D8 BL 0x3DB7048
	0x03DB79DC CBZ X19, 0x3DB7CD4
	0x03DB79E0 MOV X0, X19
	0x03DB79E4 MOV X1, X31
	0x03DB79E8 BL 0x3C63270
	0x03DB79EC CMP W0, 0x8
	0x03DB79F0 B.NE 0x3DB7BAC
	0x03DB79F4 LDR X0, [X31 + 0x208]
	0x03DB79F8 BL 0x3DB676C
	0x03DB79FC ADRP X22, 0x622000
	0x03DB7A00 LDRB W8, [X22 + 0x5AA]
	0x03DB7A04 MOV V12.16B, V0.16B
	0x03DB7A08 CBNZ W8, 0x3DB7A20
	0x03DB7A0C ADRP X0, 0x343000
	0x03DB7A10 LDR X0, [X0 + 0x4B8]
	0x03DB7A14 BL 0x1C16CF4
	0x03DB7A18 MOVZ W8, 0x1
	0x03DB7A1C STRB W8, [X22 + 0x5AA]
	0x03DB7A20 ADRP X24, 0x343000
	0x03DB7A24 LDR X24, [X24 + 0x4B8]
	0x03DB7A28 LDR V3, [X31 + 0x1C]
	0x03DB7A2C ADRP X9, 0xFFFFFFFFFCD33000
	0x03DB7A30 LDR V13, [X9 + 0x240]
	0x03DB7A34 LDR X8, [X24]
	0x03DB7A38 FABS S0, S3
	0x03DB7A3C FABS S1, S12
	0x03DB7A40 FCMP S0, S1
	0x03DB7A44 LDR X8, [X8 + 0xB8]
	0x03DB7A48 FCSEL S0, S0, S1, GT
	0x03DB7A4C FMOV S1, 8
	0x03DB7A50 FMUL S0, S0, S13
	0x03DB7A54 LDR V2, [X8]
	0x03DB7A58 FMUL S1, S2, S1
	0x03DB7A5C FCMP S0, S1
	0x03DB7A60 FCSEL S0, S0, S1, GT
	0x03DB7A64 FABD S1, S12, S12
	0x03DB7A68 FCMP S1, S0
	0x03DB7A6C B.PL 0x3DB7AD8
	0x03DB7A70 LDR X0, [X31 + 0x208]
	0x03DB7A74 BL 0x3DB6794
	0x03DB7A78 LDRB W8, [X22 + 0x5AA]
	0x03DB7A7C MOV V12.16B, V0.16B
	0x03DB7A80 CBNZ W8, 0x3DB7A98
	0x03DB7A84 ADRP X0, 0x343000
	0x03DB7A88 LDR X0, [X0 + 0x4B8]
	0x03DB7A8C BL 0x1C16CF4
	0x03DB7A90 MOVZ W8, 0x1
	0x03DB7A94 STRB W8, [X22 + 0x5AA]
	0x03DB7A98 LDR X8, [X24]
	0x03DB7A9C LDR V4, [X31 + 0x18]
	0x03DB7AA0 FABS S1, S12
	0x03DB7AA4 FMOV S2, 8
	0x03DB7AA8 LDR X8, [X8 + 0xB8]
	0x03DB7AAC FABS S0, S4
	0x03DB7AB0 FCMP S0, S1
	0x03DB7AB4 FCSEL S0, S0, S1, GT
	0x03DB7AB8 LDR V3, [X8]
	0x03DB7ABC FMUL S0, S0, S13
	0x03DB7AC0 FMUL S1, S3, S2
	0x03DB7AC4 FCMP S0, S1
	0x03DB7AC8 FCSEL S0, S0, S1, GT
	0x03DB7ACC FABD S1, S12, S12
	0x03DB7AD0 FCMP S1, S0
	0x03DB7AD4 B.MI 0x3DB7BAC
	0x03DB7AD8 TBZ X21, 0x0, 0x3DB7B9C
	0x03DB7ADC MOV X0, X31
	0x03DB7AE0 BL 0x3C0B398
	0x03DB7AE4 FCMP S11, S0
	0x03DB7AE8 B.NE 0x3DB7B9C
	0x03DB7AEC LDR X0, [X31 + 0x208]
	0x03DB7AF0 FCMP S10, S3
	0x03DB7AF4 B.NE 0x3DB7BA0
	0x03DB7AF8 FCMP S9, S1
	0x03DB7AFC B.NE 0x3DB7BA0
	0x03DB7B00 FCMP S8, S2
	0x03DB7B04 B.NE 0x3DB7BA0
	0x03DB7B08 MOV X1, X31
	0x03DB7B0C BL 0x3DF7724
	0x03DB7B10 ADRP X8, 0x33D000
	0x03DB7B14 LDR X8, [X8 + 0xE70]
	0x03DB7B18 MOV X21, X0
	0x03DB7B1C LDR X8, [X8]
	0x03DB7B20 MOV X0, X8
	0x03DB7B24 BL 0x1C16F10
	0x03DB7B28 ADRP X8, 0x3B1000
	0x03DB7B2C LDR X1, [X31 + 0x208]
	0x03DB7B30 LDR X8, [X8 + 0xEA8]
	0x03DB7B34 MOV X3, X31
	0x03DB7B38 MOV X22, X0
	0x03DB7B3C LDR X2, [X8]
	0x03DB7B40 BL 0x3314368
	0x03DB7B44 CBZ X21, 0x3DB7CD4
	0x03DB7B48 ADRP X10, 0x364000
	0x03DB7B4C LDR X8, [X21]
	0x03DB7B50 LDR X10, [X10 + 0x680]
	0x03DB7B54 LDRH W9, [X8 + 0x12E]
	0x03DB7B58 LDR X1, [X10]
	0x03DB7B5C CBZ X9, 0x3DB7B80
	0x03DB7B60 LDR X10, [X8 + 0xB0]
	0x03DB7B64 ADD X10, X10, 0x8
	0x03DB7B68 LDUR X11, [X10 - 0x8]
	0x03DB7B6C CMP X11, X1
	0x03DB7B70 B.EQ 0x3DB7C40
	0x03DB7B74 SUBS X9, X9, 0x1
	0x03DB7B78 ADD X10, X10, 0x10
	0x03DB7B7C B.NE 0x3DB7B68
	0x03DB7B80 MOVZ W2, 0x1
	0x03DB7B84 MOV X0, X21
	0x03DB7B88 BL 0x1C5C788
	0x03DB7B8C B 0x3DB7C50
	0x03DB7B90 ADD X0, X31, 0x80
	0x03DB7B94 BL 0x1C115C4
	0x03DB7B98 B 0x3DB7CA4
	0x03DB7B9C LDR X0, [X31 + 0x208]
	0x03DB7BA0 MOVZ W1, 0x8
	0x03DB7BA4 MOV X2, X31
	0x03DB7BA8 BL 0x3DE5048
	0x03DB7BAC TBNZ X23, 0x0, 0x3DB7C70
	0x03DB7BB0 MOV X0, X19

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x632000
	011 Move X19, 0x3B2000
	012 Move X21, 0x3AE000
	013 Move X22, 0x3AC000
	014 Move W8, [X20+81]
	015 Move X19, [X19+3704]
	016 Move X21, [X21+192]
	017 Move X22, [X22+3208]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {60}
	022 Move X0, 0x3A3000
	023 Move X0, [X0+32]
	024 Call 0x1C17CF4
	025 Move X0, 0x3AC000
	026 Move X0, [X0+3208]
	027 Call 0x1C17CF4
	028 Move X0, 0x3AE000
	029 Move X0, [X0+192]
	030 Call 0x1C17CF4
	031 Move X0, 0x33E000
	032 Move X0, [X0+440]
	033 Call 0x1C17CF4
	034 Move X0, 0x346000
	035 Move X0, [X0+280]
	036 Call 0x1C17CF4
	037 Move X0, 0x33E000
	038 Move X0, [X0+464]
	039 Call 0x1C17CF4
	040 Move X0, 0x3B2000
	041 Move X0, [X0+3712]
	042 Call 0x1C17CF4
	043 Move X0, 0x3AD000
	044 Move X0, [X0+2896]
	045 Call 0x1C17CF4
	046 Move X0, 0x366000
	047 Move X0, [X0+2256]
	048 Call 0x1C17CF4
	049 Move X0, 0x3AD000
	050 Move X0, [X0+2848]
	051 Call 0x1C17CF4
	052 Move X0, 0x3B2000
	053 Move X0, [X0+3720]
	054 Call 0x1C17CF4
	055 Move X0, 0x3B2000
	056 Move X0, [X0+3704]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X20+81], W8
	060 Move X8, [X21]
	061 Move [X31+12], W31
	062 Move X9, [X19]
	063 Move X24, 0x366000
	064 Move X8, [X8+184]
	065 Move X25, 0x3AD000
	066 Move X23, 0x3B2000
	067 Move X19, 0x3B2000
	068 Move [X8], X9
	069 Move X0, [X22]
	070 Move X20, 0x3A3000
	071 Move X24, [X24+2256]
	072 Move W8, [X0+224]
	073 Move X25, [X25+2896]
	074 Move X23, [X23+3720]
	075 Move X19, [X19+3712]
	076 Move X20, [X20+32]
	077 Compare W8, 0
	078 JumpIfNotEqual {81}
	079 Call 0x1C17DFC
	080 Move X0, [X22]
	081 Move X8, [X21]
	082 Move X9, [X0+184]
	083 Move X1, [X24]
	084 Move X3, [X25]
	085 Move X8, [X8+184]
	086 Move X0, [X9]
	087 Move X4, X31
	088 Move X2, [X8]
	089 Call String.Concat, X0, X1, X2, X3
	090 Move X8, [X21]
	091 Move W1, 1
	092 Move W2, W31
	093 Move W3, W31
	094 Move X8, [X8+184]
	095 Move X4, X31
	096 Move [X8+8], X0
	097 Move X0, [X23]
	098 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	099 Move X8, [X21]
	100 Move W1, 1
	101 Move W2, W31
	102 Move W3, W31
	103 Move X8, [X8+184]
	104 Move X4, X31
	105 Move [X8+24], X0
	106 Move X0, [X19]
	107 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	108 Move X8, [X21]
	109 Move X8, [X8+184]
	110 Move [X8+32], X0
	111 Move X0, [X20]
	112 Call 0x1C17F10
	113 Move X1, X31
	114 Move X19, X0
	115 Call Event..ctor, X0
	116 Compare X19, 0
	117 JumpIfEqual {255}
	118 Move W1, 8
	119 Move X0, X19
	120 Move X2, X31
	121 Call Event.set_type, X0, X1
	122 Move X8, [X21]
	123 Move X8, [X8+184]
	124 Move [X8+40], X19
	125 Move X0, [X20]
	126 Call 0x1C17F10
	127 Move X1, X31
	128 Move X19, X0
	129 Call Event..ctor, X0
	130 Compare X19, 0
	131 JumpIfEqual {255}
	132 Move W1, 8
	133 Move X0, X19
	134 Move X2, X31
	135 Call Event.set_type, X0, X1
	136 Move X8, [X21]
	137 Move X8, [X8+184]
	138 Move [X8+48], X19
	139 Move X0, [X20]
	140 Call 0x1C17F10
	141 Move X1, X31
	142 Move X19, X0
	143 Call Event..ctor, X0
	144 Compare X19, 0
	145 JumpIfEqual {255}
	146 Move X20, 0x33E000
	147 Move X25, 0x346000
	148 Move X23, 0x33E000
	149 Move X24, 0x3AD000
	150 Move X20, [X20+464]
	151 Move X25, [X25+280]
	152 Move X23, [X23+440]
	153 Move X24, [X24+2848]
	154 Move W1, 8
	155 Move X0, X19
	156 Move X2, X31
	157 Call Event.set_type, X0, X1
	158 Move X8, [X21]
	159 Move X8, [X8+184]
	160 Move [X8+56], X19
	161 Move X8, [X22]
	162 Move X0, [X20]
	163 Move X8, [X8+184]
	164 Move W26, [X8+64]
	165 Call 0x1C17F10
	166 Move X2, [X25]
	167 Add W1, W26, 1
	168 Move X19, X0
	169 Call List`1<Object>..ctor, X0, X1
	170 Move X8, [X21]
	171 Move W25, W31
	172 Move X8, [X8+184]
	173 Move [X8+16], X19
	174 Move X0, [X22]
	175 Move [X31+12], W25
	176 Move W8, [X0+224]
	177 Compare W8, 0
	178 JumpIfNotEqual {181}
	179 Call 0x1C17DFC
	180 Move X0, [X22]
	181 Move X8, [X21]
	182 Move X9, [X0+184]
	183 Move X8, [X8+184]
	184 Move W9, [X9+64]
	185 Move X20, [X8+8]
	186 Move X19, [X8+16]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Add X0, X31, 12
	189 Move X1, X31
	190 Call Int32.ToString, X0
	191 Move X1, X0
	192 Move X0, X20
	193 Move X2, X31
	194 Call String.Concat, X0, X1
	195 Compare X19, 0
	196 JumpIfEqual {255}
	197 Move W10, [X19+28]
	198 Move X8, [X19+16]
	199 Move X9, [X23]
	200 Add W10, W10, 1
	201 Move [X19+28], W10
	202 Compare X8, 0
	203 JumpIfEqual {255}
	204 NotImplemented "Instruction LDRSW not yet implemented."
	205 Move W11, [X8+24]
	206 Move X1, X0
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Add W9, W10, 1
	209 Add X8, X8, X10
	210 Move [X19+24], W9
	211 Move [X8+32], X1
	212 Move X8, [X9+32]
	213 Move X0, X19
	214 Move X8, [X8+192]
	215 Move X2, [X8+112]
	216 Call List`1<Object>.AddWithResize, X0, X1
	217 Move W8, [X31+12]
	218 Add W25, W8, 1
	219 Move X1, [X24]
	220 Move X0, X20
	221 Move X2, X31
	222 Call String.Concat, X0, X1
	223 Compare X19, 0
	224 JumpIfEqual {255}
	225 Move W10, [X19+28]
	226 Move X8, [X19+16]
	227 Move X9, [X23]
	228 Add W10, W10, 1
	229 Move [X19+28], W10
	230 Compare X8, 0
	231 JumpIfEqual {255}
	232 NotImplemented "Instruction LDRSW not yet implemented."
	233 Move W11, [X8+24]
	234 Move X1, X0
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Add W9, W10, 1
	237 Add X8, X8, X10
	238 Move [X19+24], W9
	239 Move [X8+32], X1
	240 Move X8, [X9+32]
	241 Move X0, X19
	242 Move X8, [X8+192]
	243 Move X2, [X8+112]
	244 Call List`1<Object>.AddWithResize, X0, X1
	245 Move X20, [X31+64]
	246 Move X19, [X31+72]
	247 Move X22, [X31+48]
	248 Move X21, [X31+56]
	249 Move X24, [X31+32]
	250 Move X23, [X31+40]
	251 Move X26, [X31+16]
	252 Move X25, [X31+24]
	253 Move X30, [X31+80]
	254 Return 
	255 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03DB7BB4 MOV X1, X31
	0x03DB7BB8 BL 0x3C63270

ISIL:
	001 Move X1, X31

Method: System.Void .ctor(System.Action onGUIHandler)

Disassembly:
	0x03DB7BBC CMP W0, 0xB
	0x03DB7BC0 B.EQ 0x3DB7C70
	0x03DB7BC4 MOV X0, X19
	0x03DB7BC8 MOV X1, X31
	0x03DB7BCC BL 0x3C63270
	0x03DB7BD0 CMP W0, 0xC
	0x03DB7BD4 B.EQ 0x3DB7C70
	0x03DB7BD8 MOV X0, X31
	0x03DB7BDC BL 0x3C6CA7C
	0x03DB7BE0 CMP W0, W20
	0x03DB7BE4 B.LE 0x3DB7C0C
	0x03DB7BE8 ADRP X8, 0x33C000
	0x03DB7BEC LDR X8, [X8 + 0xA28]
	0x03DB7BF0 LDR X0, [X8]
	0x03DB7BF4 LDR W8, [X0 + 0xE0]
	0x03DB7BF8 CBNZ W8, 0x3DB7C00
	0x03DB7BFC BL 0x1C16DFC
	0x03DB7C00 ADRP X8, 0x3B1000
	0x03DB7C04 LDR X8, [X8 + 0xEB0]
	0x03DB7C08 B 0x3DB7C30
	0x03DB7C0C B.GE 0x3DB7C70
	0x03DB7C10 ADRP X8, 0x33C000
	0x03DB7C14 LDR X8, [X8 + 0xA28]
	0x03DB7C18 LDR X0, [X8]
	0x03DB7C1C LDR W8, [X0 + 0xE0]
	0x03DB7C20 CBNZ W8, 0x3DB7C28
	0x03DB7C24 BL 0x1C16DFC
	0x03DB7C28 ADRP X8, 0x3B1000
	0x03DB7C2C LDR X8, [X8 + 0xEB8]
	0x03DB7C30 LDR X0, [X8]
	0x03DB7C34 MOV X1, X31
	0x03DB7C38 BL 0x3C0649C
	0x03DB7C3C B 0x3DB7C70
	0x03DB7C40 LDR W9, [X10]
	0x03DB7C44 ADD W9, W9, 0x1
	0x03DB7C48 ADD X8, X8, W9, 0x4, SXTW
	0x03DB7C4C ADD X0, X8, 0x138
	0x03DB7C50 LDP X8, X2, [X0]
	0x03DB7C54 MOV X0, X21
	0x03DB7C58 MOV X1, X22
	0x03DB7C5C BLR X8
	0x03DB7C60 TBNZ X23, 0x0, 0x3DB7C70
	0x03DB7C64 B 0x3DB7BB0
	0x03DB7C68 MOV X0, X31
	0x03DB7C6C BL 0x3C6BC50
	0x03DB7C70 MOV X0, X31
	0x03DB7C74 BL 0x3C6CA7C
	0x03DB7C78 CMP W0, W20
	0x03DB7C7C B.GT 0x3DB7C68
	0x03DB7C80 MOV X0, X19
	0x03DB7C84 MOV X1, X31
	0x03DB7C88 BL 0x3C63270
	0x03DB7C8C CMP W0, 0xC
	0x03DB7C90 B.NE 0x3DB7CA4
	0x03DB7C94 LDR X0, [X31 + 0x208]
	0x03DB7C98 MOVZ W1, 0x800
	0x03DB7C9C MOV X2, X31
	0x03DB7CA0 BL 0x3DE5048
	0x03DB7CA4 ADD X31, X31, 0x210
	0x03DB7CA8 LDP X20, X19, [X31 + 0x90]
	0x03DB7CAC LDP X22, X21, [X31 + 0x80]
	0x03DB7CB0 LDP X24, X23, [X31 + 0x70]
	0x03DB7CB4 LDP X26, X25, [X31 + 0x60]
	0x03DB7CB8 LDP X28, X27, [X31 + 0x50]
	0x03DB7CBC LDP X29, X30, [X31 + 0x40]
	0x03DB7CC0 LDP D9, D8, [X31 + 0x30]
	0x03DB7CC4 LDP D11, D10, [X31 + 0x20]
	0x03DB7CC8 LDP D13, D12, [X31 + 0x10]
	0x03DB7CCC LDP D15, D14, [X31], #0xA0
	0x03DB7CD0 RET
	0x03DB7CD4 BL 0x1C16F20
	0x03DB7CD8 MOV X0, X23
	0x03DB7CDC BL 0x1C16F18
	0x03DB7CE0 MOV X0, X22
	0x03DB7CE4 BL 0x1C16F18
	0x03DB7CE8 B 0x3DB7D68
	0x03DB7CEC CMP W1, 0x1
	0x03DB7CF0 MOV X22, X0
	0x03DB7CF4 B.NE 0x3DB7D20
	0x03DB7CF8 MOV X0, X22
	0x03DB7CFC BL 0x3EB1AD0
	0x03DB7D00 LDR X8, [X0]
	0x03DB7D04 STR X8, [X31 + 0x10]
	0x03DB7D08 BL 0x3EB1AE0
	0x03DB7D0C LDR X22, [X31 + 0x10]
	0x03DB7D10 LDP S13, S12, [X31 + 0x28]
	0x03DB7D14 LDP S15, S14, [X31 + 0x20]
	0x03DB7D18 MOV W24, W31
	0x03DB7D1C B 0x3DB7944
	0x03DB7D20 MOV W24, W1
	0x03DB7D24 STR X31, [X31 + 0x10]
	0x03DB7D28 MOV X0, X23
	0x03DB7D2C MOV X1, X31
	0x03DB7D30 MOV X2, X31
	0x03DB7D34 BL 0x33C5D2C
	0x03DB7D38 TBZ X0, 0x0, 0x3DB7D48
	0x03DB7D3C MOV X0, X23
	0x03DB7D40 MOV X1, X31
	0x03DB7D44 BL 0x3BFEA0C
	0x03DB7D48 LDR X8, [X31 + 0x10]
	0x03DB7D4C CBZ X8, 0x3DB7D88
	0x03DB7D50 LDR X0, [X31 + 0x10]
	0x03DB7D54 BL 0x1C16F18
	0x03DB7D58 MOV X22, X0
	0x03DB7D5C MOV W24, W1
	0x03DB7D60 B 0x3DB7D28
	0x03DB7D64 B 0x3DB7D74
	0x03DB7D68 MOV X22, X0
	0x03DB7D6C MOV W24, W1
	0x03DB7D70 B 0x3DB7D88
	0x03DB7D74 MOV X22, X0
	0x03DB7D78 MOV W24, W1
	0x03DB7D7C B 0x3DB7DC4
	0x03DB7D80 MOV X24, X1
	0x03DB7D84 MOV X22, X0
	0x03DB7D88 CMP W24, 0x1
	0x03DB7D8C B.NE 0x3DB7DB0
	0x03DB7D90 MOV X0, X22
	0x03DB7D94 BL 0x3EB1AD0
	0x03DB7D98 LDR X23, [X0]
	0x03DB7D9C BL 0x3EB1AE0
	0x03DB7DA0 LDP S13, S12, [X31 + 0x28]
	0x03DB7DA4 LDP S15, S14, [X31 + 0x20]
	0x03DB7DA8 MOV W24, W31
	0x03DB7DAC B 0x3DB7984
	0x03DB7DB0 MOV X23, X31
	0x03DB7DB4 ADD X0, X31, 0x1F8
	0x03DB7DB8 MOV X1, X31
	0x03DB7DBC BL 0x3C6CDB0
	0x03DB7DC0 CBNZ X23, 0x3DB7E88
	0x03DB7DC4 CMP W24, 0x1
	0x03DB7DC8 B.NE 0x3DB7EC4
	0x03DB7DCC MOV X0, X22
	0x03DB7DD0 BL 0x3EB1AD0
	0x03DB7DD4 MOV X22, X0
	0x03DB7DD8 ADRP X0, 0x33C000
	0x03DB7DDC LDR X0, [X0 + 0x7D0]
	0x03DB7DE0 BL 0x1C16D08
	0x03DB7DE4 LDR X8, [X22]
	0x03DB7DE8 LDR X1, [X8]
	0x03DB7DEC BL 0x1C17270
	0x03DB7DF0 TBZ X0, 0x0, 0x3DB7E60
	0x03DB7DF4 LDR X22, [X22]
	0x03DB7DF8 BL 0x3EB1AE0
	0x03DB7DFC LDR W8, [X31 + 0x200]
	0x03DB7E00 CMP W8, 0x8
	0x03DB7E04 B.NE 0x3DB7E80
	0x03DB7E08 ADRP X0, 0x368000
	0x03DB7E0C LDR X0, [X0 + 0x5C8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x632000
	009 Move W8, [X21+82]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x3AD000
	017 Move X0, [X0+3400]
	018 Call 0x1C17CF4
	019 Move X0, 0x368000
	020 Move X0, [X0+3504]
	021 Call 0x1C17CF4
	022 Move X0, 0x3B2000
	023 Move X0, [X0+3728]
	024 Call 0x1C17CF4
	025 Move X0, 0x3AE000
	026 Move X0, [X0+192]
	027 Call 0x1C17CF4
	028 Move X0, 0x365000
	029 Move X0, [X0+2200]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+82], W8
	033 Move X21, 0x368000
	034 Move X21, [X21+3504]
	035 Move W22, 1
	036 Move X0, X31
	037 NotImplemented "Instruction STRH not yet implemented."
	038 Move [X19+1006], W22
	039 Move [X19+1008], X31
	040 Call Rect.get_zero
	041 Move [X19+1016], S0
	042 Move [X19+1020], S1
	043 Move [X19+1024], S2
	044 Move [X19+1028], S3
	045 Move X23, 0x622000
	046 Move W8, [X23+2752]
	047 Compare W8, 0
	048 JumpIfNotEqual {53}
	049 Move X0, 0x341000
	050 Move X0, [X0+624]
	051 Call 0x1C17CF4
	052 Move [X23+2752], W22
	053 Move X8, 0x341000
	054 Move X8, [X8+624]
	055 Move X8, [X8]
	056 Move X8, [X8+184]
	057 Move V0, [X8+96]
	058 Move V1, [X8+112]
	059 Move V2, [X8+64]
	060 Move V3, [X8+80]
	061 Add X8, X19, 1032
	062 Move [X8+32], V0
	063 Move [X8+40], V1
	064 Move [X8], V2
	065 Move [X8+8], V3
	066 NotImplemented "Instruction STRH not yet implemented."
	067 Move X0, [X21]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X22, 0x625000
	073 Move W8, [X22+2039]
	074 Compare W8, 0
	075 JumpIfNotEqual {81}
	076 Move X0, 0x368000
	077 Move X0, [X0+3504]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X22+2039], W8
	081 Move X0, [X21]
	082 Move X22, 0x365000
	083 Move W8, [X0+224]
	084 Move X22, [X22+2200]
	085 Compare W8, 0
	086 JumpIfNotEqual {89}
	087 Call 0x1C17DFC
	088 Move X0, [X21]
	089 Move X8, [X0+184]
	090 Move W24, 1
	091 Move X23, 0x3AE000
	092 Move X8, [X8]
	093 Move [X19+1112], W31
	094 Move [X19+1116], W31
	095 Move [X19+1120], W24
	096 Move [X19+1104], X8
	097 Move X0, [X22]
	098 Move W8, [X0+224]
	099 Move X23, [X23+192]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X22, 0x3AD000
	104 Move X21, 0x3B2000
	105 Move X22, [X22+3400]
	106 Move X21, [X21+3728]
	107 Move X0, X19
	108 Move X1, X31
	109 Call VisualElement..ctor, X0
	110 Move W8, [X19+872]
	111 Move W9, 0x6036
	112 NotImplemented "Instruction MOVK not yet implemented."
	113 Move X0, X19
	114 Or W1, W8, W9
	115 Move X2, X31
	116 Move [X19+16], W24
	117 Call VisualElement.set_eventCallbackCategories, X0, X1
	118 Move X0, [X23]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {124}
	122 Call 0x1C17DFC
	123 Move X0, [X23]
	124 Move X8, [X0+184]
	125 Move X0, X19
	126 Move X2, X31
	127 Move X1, [X8]
	128 Call VisualElement.AddToClassList, X0, X1
	129 Move X0, X19
	130 Move X1, X20
	131 Call IMGUIContainer.set_onGUIHandler, X0, X1
	132 Move W8, 1
	133 Move W1, 1
	134 Move X0, X19
	135 Move X2, X31
	136 Move [X19+1096], W8
	137 Move [X19+32], W8
	138 Call VisualElement.set_requireMeasureFunction, X0, X1
	139 Move X0, [X22]
	140 Move X20, [X19+824]
	141 Call 0x1C17F10
	142 Move X2, [X21]
	143 Move X1, X19
	144 Move X3, X31
	145 Move X21, X0
	146 Call Action`1<Object>..ctor, X0, X1, X2
	147 Move X0, X20
	148 Move X1, X21
	149 Move X2, X31
	150 Call Delegate.Combine, X0, X1
	151 Compare X0, 0
	152 JumpIfEqual {159}
	153 Move X21, [X22]
	154 Move X20, X0
	155 Move X1, X21
	156 Call 0x1C17E00
	157 Compare X0, 0
	158 JumpIfEqual {168}
	159 Move [X19+824], X0
	160 Move X20, [X31+48]
	161 Move X19, [X31+56]
	162 Move X22, [X31+32]
	163 Move X21, [X31+40]
	164 Move X24, [X31+16]
	165 Move X23, [X31+24]
	166 Move X30, [X31+64]
	167 Return 
	168 Move X0, X20
	169 Move X1, X21
	170 Call 0x1C181E0

Method: System.Void OnGenerateVisualContent(UnityEngine.UIElements.MeshGenerationContext mgc)

Disassembly:
	0x03DB7E10 BL 0x1C16D08
	0x03DB7E14 LDR W8, [X0 + 0xE0]
	0x03DB7E18 CBNZ W8, 0x3DB7E20
	0x03DB7E1C BL 0x1C16DFC
	0x03DB7E20 MOV X0, X22
	0x03DB7E24 MOV X1, X31
	0x03DB7E28 BL 0x3C76464
	0x03DB7E2C TBZ X0, 0x0, 0x3DB7E38
	0x03DB7E30 MOVZ W23, 0x1
	0x03DB7E34 B 0x3DB7EE8
	0x03DB7E38 ADRP X0, 0x33C000
	0x03DB7E3C LDR X0, [X0 + 0xA28]
	0x03DB7E40 BL 0x1C16D08
	0x03DB7E44 LDR W8, [X0 + 0xE0]
	0x03DB7E48 CBNZ W8, 0x3DB7E50
	0x03DB7E4C BL 0x1C16DFC
	0x03DB7E50 MOV X0, X22
	0x03DB7E54 MOV X1, X31
	0x03DB7E58 BL 0x3C02C84
	0x03DB7E5C B 0x3DB7EE4
	0x03DB7E60 MOVZ W0, 0x8
	0x03DB7E64 BL 0x3EB1AF0
	0x03DB7E68 LDR X8, [X22]
	0x03DB7E6C STR X8, [X0]
	0x03DB7E70 ADRP X1, 0xFD000
	0x03DB7E74 ADD X1, X1, 0xE58
	0x03DB7E78 MOV X2, X31
	0x03DB7E7C BL 0x3EB1B00
	0x03DB7E80 MOV X0, X22
	0x03DB7E84 BL 0x1C16F18
	0x03DB7E88 MOV X0, X23
	0x03DB7E8C BL 0x1C16F18
	0x03DB7E90 MOV X22, X0
	0x03DB7E94 MOV W24, W1
	0x03DB7E98 B 0x3DB7DB4
	0x03DB7E9C B 0x3DB7EAC
	0x03DB7EA0 B 0x3DB7EAC
	0x03DB7EA4 B 0x3DB7EAC
	0x03DB7EA8 B 0x3DB7EAC
	0x03DB7EAC MOV X22, X0
	0x03DB7EB0 MOV W24, W1
	0x03DB7EB4 B 0x3DB7EC4
	0x03DB7EB8 MOV X24, X1
	0x03DB7EBC MOV X22, X0
	0x03DB7EC0 BL 0x3EB1AE0
	0x03DB7EC4 MOVZ W8, 0x1
	0x03DB7EC8 CMP W24, W8
	0x03DB7ECC B.NE 0x3DB7EF8
	0x03DB7ED0 MOV X0, X22
	0x03DB7ED4 BL 0x3EB1AD0
	0x03DB7ED8 LDR X8, [X0]
	0x03DB7EDC STR X8, [X31 + 0x80]
	0x03DB7EE0 BL 0x3EB1AE0
	0x03DB7EE4 MOV W23, W31
	0x03DB7EE8 LDP S13, S12, [X31 + 0x28]
	0x03DB7EEC LDP S15, S14, [X31 + 0x20]
	0x03DB7EF0 B 0x3DB79A0
	0x03DB7EF4 MOV X22, X0
	0x03DB7EF8 ADD X0, X31, 0x80
	0x03DB7EFC BL 0x1C115C4
	0x03DB7F00 MOV X0, X22
	0x03DB7F04 BL 0x1D2C690
	0x03DB7F08 BL 0x1990590
	0x03DB7F0C MOVZ W8, 0x1
	0x03DB7F10 MOVZ W1, 0x8
	0x03DB7F14 MOV X2, X31
	0x03DB7F18 STRB W8, [X0 + 0x3EE]
	0x03DB7F1C B 0x3DE5048
	0x03DB7F20 STP X30, X21, [X31 - 0x20]!
	0x03DB7F24 STP X20, X19, [X31 + 0x10]
	0x03DB7F28 ADRP X21, 0x631000
	0x03DB7F2C LDRB W8, [X21 + 0x57]
	0x03DB7F30 MOV X19, X1
	0x03DB7F34 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x632000
	006 Move W8, [X20+83]
	007 Move X19, X1
	008 Move X21, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x33E000
	014 Move X0, [X0+3696]
	015 Call 0x1C17CF4
	016 Move X0, 0x3B2000
	017 Move X0, [X0+3736]
	018 Call 0x1C17CF4
	019 Move X0, 0x3B2000
	020 Move X0, [X0+3744]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+83], W8
	024 Move X0, [X21+928]
	025 Compare X0, 0
	026 JumpIfEqual {84}
	027 Move X8, [X0]
	028 Move X9, [X8+840]
	029 Move X1, [X8+848]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Compare X0, 0
	032 JumpIfEqual {84}
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 Add X8, X21, 988
	035 Move [X8], V0
	036 Compare X19, 0
	037 JumpIfEqual {84}
	038 Move X8, 0x33E000
	039 Move X8, [X8+3696]
	040 Move X20, 0x3B2000
	041 Move X19, [X19+24]
	042 Move X0, [X8]
	043 Move X20, [X20+3736]
	044 Call 0x1C17F10
	045 Move X2, [X20]
	046 Move X1, X21
	047 Move X3, X31
	048 Move X20, X0
	049 Call Action..ctor, X0, X1, X2
	050 Compare X19, 0
	051 JumpIfEqual {84}
	052 Move X10, 0x3B2000
	053 Move X8, [X19]
	054 Move X10, [X10+3744]
	055 Move W21, [X21+1004]
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Move X1, [X10]
	058 Compare X9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move W2, 2
	067 Move X0, X19
	068 Call 0x1C5D788
	069 Move W9, [X10]
	070 Add W9, W9, 2
	071 Add X8, X8, W9
	072 Add X0, X8, 312
	073 Move X4, [X0]
	074 Move X3, [X0+8]
	075 Move X0, X19
	076 Move X1, X20
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CSET not yet implemented."
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 CallNoReturn X4
	084 Call 0x1C17F20

Method: System.Void SaveGlobals()

Disassembly:
	0x03DB7F38 TBNZ X8, 0x0, 0x3DB7F8C
	0x03DB7F3C ADRP X0, 0x3B1000
	0x03DB7F40 LDR X0, [X0 + 0xEC0]
	0x03DB7F44 BL 0x1C16CF4
	0x03DB7F48 ADRP X0, 0x3AD000
	0x03DB7F4C LDR X0, [X0 + 0xA8]
	0x03DB7F50 BL 0x1C16CF4
	0x03DB7F54 ADRP X0, 0x366000
	0x03DB7F58 LDR X0, [X0 + 0x6D8]
	0x03DB7F5C BL 0x1C16CF4
	0x03DB7F60 ADRP X0, 0x3B1000
	0x03DB7F64 LDR X0, [X0 + 0x6E0]
	0x03DB7F68 BL 0x1C16CF4
	0x03DB7F6C ADRP X0, 0x3AD000
	0x03DB7F70 LDR X0, [X0 + 0xB0]
	0x03DB7F74 BL 0x1C16CF4
	0x03DB7F78 ADRP X0, 0x366000
	0x03DB7F7C LDR X0, [X0 + 0x708]
	0x03DB7F80 BL 0x1C16CF4
	0x03DB7F84 MOVZ W8, 0x1
	0x03DB7F88 STRB W8, [X21 + 0x57]
	0x03DB7F8C CBZ X19, 0x3DB80BC
	0x03DB7F90 MOV X0, X19
	0x03DB7F94 MOV X1, X31
	0x03DB7F98 BL 0x3D9B814
	0x03DB7F9C CBZ X0, 0x3DB7FB8
	0x03DB7FA0 MOVZ W2, 0x1
	0x03DB7FA4 MOVZ W3, 0x1
	0x03DB7FA8 MOV X0, X20
	0x03DB7FAC MOV X1, X19
	0x03DB7FB0 BL 0x3DB80C0
	0x03DB7FB4 TBNZ X0, 0x0, 0x3DB8090
	0x03DB7FB8 LDR X8, [X19]
	0x03DB7FBC ADRP X20, 0x3AD000
	0x03DB7FC0 ADRP X21, 0x3AD000
	0x03DB7FC4 MOV X0, X19
	0x03DB7FC8 LDP X9, X1, [X8 + 0x188]
	0x03DB7FCC LDR X20, [X20 + 0xB0]
	0x03DB7FD0 LDR X21, [X21 + 0xA8]
	0x03DB7FD4 BLR X9
	0x03DB7FD8 LDR X8, [X20]
	0x03DB7FDC MOV X20, X0
	0x03DB7FE0 LDR W9, [X8 + 0xE0]
	0x03DB7FE4 CBNZ W9, 0x3DB7FF0
	0x03DB7FE8 MOV X0, X8
	0x03DB7FEC BL 0x1C16DFC
	0x03DB7FF0 LDR X0, [X21]
	0x03DB7FF4 BL 0x2D0D5C8
	0x03DB7FF8 CMP X20, X0
	0x03DB7FFC B.EQ 0x3DB8090
	0x03DB8000 LDR X8, [X19]
	0x03DB8004 MOV X0, X19
	0x03DB8008 LDP X9, X1, [X8 + 0x188]
	0x03DB800C BLR X9
	0x03DB8010 ADRP X8, 0x365000
	0x03DB8014 LDR X8, [X8 + 0x708]
	0x03DB8018 MOV X20, X0
	0x03DB801C LDR X8, [X8]
	0x03DB8020 LDR W9, [X8 + 0xE0]
	0x03DB8024 CBNZ W9, 0x3DB8030
	0x03DB8028 MOV X0, X8
	0x03DB802C BL 0x1C16DFC
	0x03DB8030 ADRP X8, 0x365000
	0x03DB8034 LDR X8, [X8 + 0x6D8]
	0x03DB8038 LDR X0, [X8]
	0x03DB803C BL 0x2D0D5C8
	0x03DB8040 CMP X20, X0
	0x03DB8044 B.EQ 0x3DB8090

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+136], X21
	004 Move [X31+144], X20
	005 Move [X31+152], X19
	006 Move X21, 0x632000
	007 Move X20, 0x364000
	008 Move W8, [X21+84]
	009 Move X20, [X20+1216]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x364000
	016 Move X0, [X0+1216]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+84], W8
	020 Move X0, [X20]
	021 Add X20, X19, 1124
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X8, X31, 0
	027 Move X0, X31
	028 Call GUI.get_matrix
	029 Move V1, [X31+32]
	030 Move V0, [X31+48]
	031 Move V3, [X31]
	032 Move V2, [X31+16]
	033 Move X0, X31
	034 Move [X31+96], V1
	035 Move [X31+104], V0
	036 Move [X31+64], V3
	037 Move [X31+72], V2
	038 Move [X20+32], V1
	039 Move [X20+40], V0
	040 Move [X20], V3
	041 Move [X20+8], V2
	042 Call GUI.get_color
	043 Move X0, X31
	044 Move [X19+1188], S0
	045 Move [X19+1192], S1
	046 Move [X19+1196], S2
	047 Move [X19+1200], S3
	048 Call GUI.get_contentColor
	049 Move X0, X31
	050 Move [X19+1204], S0
	051 Move [X19+1208], S1
	052 Move [X19+1212], S2
	053 Move [X19+1216], S3
	054 Call GUI.get_backgroundColor
	055 Move X0, X31
	056 Move [X19+1220], S0
	057 Move [X19+1224], S1
	058 Move [X19+1228], S2
	059 Move [X19+1232], S3
	060 Call GUI.get_enabled
	061 And W8, W0, 1
	062 Move X0, X31
	063 Move [X19+1236], W8
	064 Call GUI.get_changed
	065 And W8, W0, 1
	066 Move X0, X31
	067 Move [X19+1237], W8
	068 Call Event.get_current
	069 Compare X0, 0
	070 JumpIfEqual {78}
	071 Move X0, X31
	072 Call Event.get_current
	073 Compare X0, 0
	074 JumpIfEqual {84}
	075 Move X1, X31
	076 Call Event.get_displayIndex, X0
	077 Move [X19+1240], W0
	078 Move X20, [X31+144]
	079 Move X19, [X31+152]
	080 Move X30, [X31+128]
	081 Move X21, [X31+136]
	082 Add X31, X31, 160
	083 Return 
	084 Call 0x1C17F20

Method: System.Void RestoreGlobals()

Disassembly:
	0x03DB8048 LDR X8, [X19]
	0x03DB804C MOV X0, X19
	0x03DB8050 LDP X9, X1, [X8 + 0x188]
	0x03DB8054 BLR X9
	0x03DB8058 ADRP X8, 0x3B0000
	0x03DB805C LDR X8, [X8 + 0x6E0]
	0x03DB8060 MOV X20, X0
	0x03DB8064 LDR X8, [X8]
	0x03DB8068 LDR W9, [X8 + 0xE0]
	0x03DB806C CBNZ W9, 0x3DB8078
	0x03DB8070 MOV X0, X8
	0x03DB8074 BL 0x1C16DFC
	0x03DB8078 ADRP X8, 0x3B0000
	0x03DB807C LDR X8, [X8 + 0xEC0]
	0x03DB8080 LDR X0, [X8]
	0x03DB8084 BL 0x2D0D5C8
	0x03DB8088 CMP X20, X0
	0x03DB808C B.NE 0x3DB80B0
	0x03DB8090 MOV X0, X19
	0x03DB8094 MOV X1, X31
	0x03DB8098 BL 0x3D9D950
	0x03DB809C MOV X0, X19
	0x03DB80A0 LDP X20, X19, [X31 + 0x10]
	0x03DB80A4 MOV X1, X31
	0x03DB80A8 LDP X30, X21, [X31], #0x20
	0x03DB80AC B 0x3D9D960
	0x03DB80B0 LDP X20, X19, [X31 + 0x10]
	0x03DB80B4 LDP X30, X21, [X31], #0x20
	0x03DB80B8 RET
	0x03DB80BC BL 0x1C16F20
	0x03DB80C0 STR X30, [X31 - 0x40]!
	0x03DB80C4 STP X24, X23, [X31 + 0x10]
	0x03DB80C8 STP X22, X21, [X31 + 0x20]
	0x03DB80CC STP X20, X19, [X31 + 0x30]
	0x03DB80D0 ADRP X23, 0x630000
	0x03DB80D4 ADRP X24, 0x364000
	0x03DB80D8 LDRB W8, [X23 + 0x59]
	0x03DB80DC LDR X24, [X24 + 0xE78]
	0x03DB80E0 MOV W20, W3
	0x03DB80E4 MOV W22, W2
	0x03DB80E8 MOV X19, X1
	0x03DB80EC MOV X21, X0
	0x03DB80F0 TBNZ X8, 0x0, 0x3DB8150
	0x03DB80F4 ADRP X0, 0x364000
	0x03DB80F8 LDR X0, [X0 + 0xE78]
	0x03DB80FC BL 0x1C16CF4
	0x03DB8100 ADRP X0, 0x3AE000
	0x03DB8104 LDR X0, [X0 + 0xAF0]
	0x03DB8108 BL 0x1C16CF4
	0x03DB810C ADRP X0, 0x3B0000
	0x03DB8110 LDR X0, [X0 + 0x978]
	0x03DB8114 BL 0x1C16CF4
	0x03DB8118 ADRP X0, 0x3B0000
	0x03DB811C LDR X0, [X0 + 0x9B8]
	0x03DB8120 BL 0x1C16CF4
	0x03DB8124 ADRP X0, 0x366000
	0x03DB8128 LDR X0, [X0 + 0x218]
	0x03DB812C BL 0x1C16CF4
	0x03DB8130 ADRP X0, 0x3B0000
	0x03DB8134 LDR X0, [X0 + 0x878]
	0x03DB8138 BL 0x1C16CF4
	0x03DB813C ADRP X0, 0x363000
	0x03DB8140 LDR X0, [X0 + 0x968]
	0x03DB8144 BL 0x1C16CF4
	0x03DB8148 MOVZ W8, 0x1
	0x03DB814C STRB W8, [X23 + 0x59]
	0x03DB8150 LDR X1, [X24]
	0x03DB8154 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+136], X21
	004 Move [X31+144], X20
	005 Move [X31+152], X19
	006 Move X21, 0x631000
	007 Move X20, 0x363000
	008 Move W8, [X21+85]
	009 Move X20, [X20+1216]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x363000
	016 Move X0, [X0+1216]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+85], W8
	020 Add X8, X19, 1124
	021 Move V0, [X8+32]
	022 Move V1, [X8+48]
	023 Move V2, [X8]
	024 Move V3, [X8+16]
	025 Move X0, [X20]
	026 Move [X31+96], V0
	027 Move [X31+104], V1
	028 Move [X31+64], V2
	029 Move [X31+72], V3
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move V0, [X31+64]
	035 Move V1, [X31+80]
	036 Move V2, [X31+96]
	037 Move V3, [X31+112]
	038 Add X0, X31, 0
	039 Move X1, X31
	040 Move [X31], V0
	041 Move [X31+8], V1
	042 Move [X31+32], V2
	043 Move [X31+40], V3
	044 Call GUI.set_matrix, X0
	045 Move V0, [X19+1188]
	046 Move V1, [X19+1192]
	047 Move V2, [X19+1196]
	048 Move V3, [X19+1200]
	049 Move X0, X31
	050 Call GUI.set_color, X0
	051 Move V0, [X19+1204]
	052 Move V1, [X19+1208]
	053 Move V2, [X19+1212]
	054 Move V3, [X19+1216]
	055 Move X0, X31
	056 Call GUI.set_contentColor, X0
	057 Move V0, [X19+1220]
	058 Move V1, [X19+1224]
	059 Move V2, [X19+1228]
	060 Move V3, [X19+1232]
	061 Move X0, X31
	062 Call GUI.set_backgroundColor, X0
	063 Move W0, [X19+1236]
	064 Move X1, X31
	065 Call GUI.set_enabled, X0
	066 Move W0, [X19+1237]
	067 Move X1, X31
	068 Call GUI.set_changed, X0
	069 Move X0, X31
	070 Call Event.get_current
	071 Compare X0, 0
	072 JumpIfEqual {80}
	073 Move X0, X31
	074 Call Event.get_current
	075 Compare X0, 0
	076 JumpIfEqual {86}
	077 Move W1, [X19+1240]
	078 Move X2, X31
	079 Call Event.set_displayIndex, X0, X1
	080 Move X20, [X31+144]
	081 Move X19, [X31+152]
	082 Move X30, [X31+128]
	083 Move X21, [X31+136]
	084 Add X31, X31, 160
	085 Return 
	086 Call 0x1C17F20

Method: System.Void DoOnGUI(UnityEngine.Event evt, UnityEngine.Matrix4x4 parentTransform, UnityEngine.Rect clippingRect, System.Boolean isComputingLayout, UnityEngine.Rect layoutSize, System.Action onGUIHandler, System.Boolean canAffectFocus = True)

Disassembly:
	0x03DB8158 BL 0x1C16E00
	0x03DB815C CBZ X0, 0x3DB8224
	0x03DB8160 CBZ X19, 0x3DB8358
	0x03DB8164 MOV X0, X19
	0x03DB8168 MOV X1, X31
	0x03DB816C BL 0x3D9B814
	0x03DB8170 CBZ X0, 0x3DB82B8
	0x03DB8174 MOV X0, X19
	0x03DB8178 MOV X1, X31
	0x03DB817C BL 0x3D9B814
	0x03DB8180 CBZ X0, 0x3DB8358
	0x03DB8184 MOV X1, X31
	0x03DB8188 BL 0x3C63AC0
	0x03DB818C TBZ X0, 0x0, 0x3DB82B8
	0x03DB8190 MOV X0, X19
	0x03DB8194 MOV X1, X31
	0x03DB8198 BL 0x3D9B814
	0x03DB819C CBZ X0, 0x3DB8358
	0x03DB81A0 MOV X1, X31
	0x03DB81A4 BL 0x3C62C04
	0x03DB81A8 ADRP X8, 0x3AE000
	0x03DB81AC LDR X8, [X8 + 0xAF0]
	0x03DB81B0 MOV W23, W0
	0x03DB81B4 LDR X9, [X8]
	0x03DB81B8 LDR X8, [X19]
	0x03DB81BC CMP X8, X9
	0x03DB81C0 B.EQ 0x3DB8248
	0x03DB81C4 ADRP X9, 0x363000
	0x03DB81C8 LDR X9, [X9 + 0x968]
	0x03DB81CC LDR X9, [X9]
	0x03DB81D0 CMP X8, X9
	0x03DB81D4 B.EQ 0x3DB8260
	0x03DB81D8 ADRP X9, 0x366000
	0x03DB81DC LDR X9, [X9 + 0x218]
	0x03DB81E0 LDR X9, [X9]
	0x03DB81E4 CMP X8, X9
	0x03DB81E8 B.NE 0x3DB827C
	0x03DB81EC MOV X0, X19
	0x03DB81F0 MOV X1, X31
	0x03DB81F4 BL 0x3D9B814
	0x03DB81F8 CBZ X0, 0x3DB8358
	0x03DB81FC MOV X1, X31
	0x03DB8200 BL 0x3C62C04
	0x03DB8204 CMP W0, 0x3
	0x03DB8208 B.NE 0x3DB8278
	0x03DB820C MOV X0, X19
	0x03DB8210 MOV X1, X31
	0x03DB8214 BL 0x3D9B814
	0x03DB8218 CBZ X0, 0x3DB8358
	0x03DB821C MOVZ W1, 0x20
	0x03DB8220 B 0x3DB8304
	0x03DB8224 AND W2, W22, 0x1
	0x03DB8228 AND W3, W20, 0x1
	0x03DB822C MOV X0, X21
	0x03DB8230 MOV X1, X19
	0x03DB8234 LDP X20, X19, [X31 + 0x30]
	0x03DB8238 LDP X22, X21, [X31 + 0x20]
	0x03DB823C LDP X24, X23, [X31 + 0x10]
	0x03DB8240 LDR X30, [X31], #0x40
	0x03DB8244 B 0x3DB8968
	0x03DB8248 MOV X0, X19
	0x03DB824C MOV X1, X31
	0x03DB8250 BL 0x3D9B814
	0x03DB8254 CBZ X0, 0x3DB8358
	0x03DB8258 MOVZ W1, 0x1E
	0x03DB825C B 0x3DB8304
	0x03DB8260 MOV X0, X19
	0x03DB8264 MOV X1, X31
	0x03DB8268 BL 0x3D9B814
	0x03DB826C CBZ X0, 0x3DB8358
	0x03DB8270 MOVZ W1, 0x1F
	0x03DB8274 B 0x3DB8304
	0x03DB8278 LDR X8, [X19]
	0x03DB827C ADRP X9, 0x3B0000
	0x03DB8280 LDR X9, [X9 + 0x9B8]
	0x03DB8284 LDR X9, [X9]
	0x03DB8288 CMP X8, X9
	0x03DB828C B.EQ 0x3DB82C0
	0x03DB8290 ADRP X9, 0x3B0000
	0x03DB8294 LDR X9, [X9 + 0x978]
	0x03DB8298 LDR X9, [X9]
	0x03DB829C CMP X8, X9
	0x03DB82A0 B.EQ 0x3DB82D8
	0x03DB82A4 ADRP X9, 0x3B0000
	0x03DB82A8 LDR X9, [X9 + 0x878]
	0x03DB82AC LDR X9, [X9]
	0x03DB82B0 CMP X8, X9
	0x03DB82B4 B.EQ 0x3DB82F0
	0x03DB82B8 MOV W20, W31
	0x03DB82BC B 0x3DB8340
	0x03DB82C0 MOV X0, X19
	0x03DB82C4 MOV X1, X31
	0x03DB82C8 BL 0x3D9B814
	0x03DB82CC CBZ X0, 0x3DB8358
	0x03DB82D0 MOVZ W1, 0x22
	0x03DB82D4 B 0x3DB8304
	0x03DB82D8 MOV X0, X19
	0x03DB82DC MOV X1, X31
	0x03DB82E0 BL 0x3D9B814
	0x03DB82E4 CBZ X0, 0x3DB8358
	0x03DB82E8 MOVZ W1, 0x21
	0x03DB82EC B 0x3DB8304
	0x03DB82F0 MOV X0, X19
	0x03DB82F4 MOV X1, X31
	0x03DB82F8 BL 0x3D9B814
	0x03DB82FC CBZ X0, 0x3DB8358
	0x03DB8300 MOVZ W1, 0x23
	0x03DB8304 MOV X2, X31
	0x03DB8308 BL 0x3C632AC
	0x03DB830C AND W2, W22, 0x1
	0x03DB8310 AND W3, W20, 0x1
	0x03DB8314 MOV X0, X21
	0x03DB8318 MOV X1, X19
	0x03DB831C BL 0x3DB8968
	0x03DB8320 MOV W20, W0
	0x03DB8324 MOV X0, X19
	0x03DB8328 MOV X1, X31
	0x03DB832C BL 0x3D9B814
	0x03DB8330 CBZ X0, 0x3DB8358
	0x03DB8334 MOV W1, W23
	0x03DB8338 MOV X2, X31
	0x03DB833C BL 0x3C632AC
	0x03DB8340 AND W0, W20, 0x1
	0x03DB8344 LDP X20, X19, [X31 + 0x30]
	0x03DB8348 LDP X22, X21, [X31 + 0x20]
	0x03DB834C LDP X24, X23, [X31 + 0x10]
	0x03DB8350 LDR X30, [X31], #0x40
	0x03DB8354 RET
	0x03DB8358 BL 0x1C16F20
	0x03DB835C STP D11, D10, [X31 - 0x50]!
	0x03DB8360 STP D9, D8, [X31 + 0x10]
	0x03DB8364 STR X29, [X31 + 0x20]
	0x03DB8368 STP X30, X21, [X31 + 0x30]
	0x03DB836C STP X20, X19, [X31 + 0x40]
	0x03DB8370 SUB X31, X31, 0x240
	0x03DB8374 ADRP X21, 0x630000
	0x03DB8378 ADRP X19, 0x3AC000
	0x03DB837C LDRB W8, [X21 + 0x58]
	0x03DB8380 LDR X19, [X19 + 0xC0]
	0x03DB8384 MOV X20, X0
	0x03DB8388 TBNZ X8, 0x0, 0x3DB83AC
	0x03DB838C ADRP X0, 0x3AC000
	0x03DB8390 LDR X0, [X0 + 0xC0]
	0x03DB8394 BL 0x1C16CF4
	0x03DB8398 ADRP X0, 0x363000
	0x03DB839C LDR X0, [X0 + 0x898]
	0x03DB83A0 BL 0x1C16CF4
	0x03DB83A4 MOVZ W8, 0x1
	0x03DB83A8 STRB W8, [X21 + 0x58]
	0x03DB83AC LDR X0, [X19]
	0x03DB83B0 LDR W8, [X0 + 0xE0]
	0x03DB83B4 CBNZ W8, 0x3DB83C0
	0x03DB83B8 BL 0x1C16DFC
	0x03DB83BC LDR X0, [X19]
	0x03DB83C0 LDR X8, [X0 + 0xB8]
	0x03DB83C4 MOV X1, X31
	0x03DB83C8 MOV X2, X31
	0x03DB83CC LDR X19, [X8 + 0x20]
	0x03DB83D0 MOV X0, X19
	0x03DB83D4 BL 0x33C5D2C
	0x03DB83D8 TBZ X0, 0x0, 0x3DB83E8
	0x03DB83DC MOV X0, X19
	0x03DB83E0 MOV X1, X31
	0x03DB83E4 BL 0x3BFE970
	0x03DB83E8 LDR X0, [X20 + 0x3A0]
	0x03DB83EC CBZ X0, 0x3DB859C
	0x03DB83F0 LDR X8, [X0]
	0x03DB83F4 LDR X1, [X8 + 0x350]
	0x03DB83F8 LDR X9, [X8 + 0x348]
	0x03DB83FC BLR X9
	0x03DB8400 CBZ X0, 0x3DB85A8
	0x03DB8404 LDP V1, V0, [X0 + 0x30]
	0x03DB8408 LDP V3, V2, [X0 + 0x10]
	0x03DB840C STP V1, V0, [X31 + 0x220]
	0x03DB8410 STP V3, V2, [X31 + 0x200]
	0x03DB8414 MOV X0, X20
	0x03DB8418 MOV X1, X31
	0x03DB841C BL 0x3DEE4D8
	0x03DB8420 ADRP X8, 0x363000
	0x03DB8424 LDR X8, [X8 + 0x898]
	0x03DB8428 MOV V8.16B, V0.16B
	0x03DB842C MOV V9.16B, V1.16B
	0x03DB8430 MOV V10.16B, V2.16B
	0x03DB8434 MOV V11.16B, V3.16B
	0x03DB8438 LDP V0, V1, [X31 + 0x200]
	0x03DB843C LDP V2, V3, [X31 + 0x220]
	0x03DB8440 LDR X0, [X8]
	0x03DB8444 STP V0, V1, [X31 + 0x1C0]
	0x03DB8448 STP V2, V3, [X31 + 0x1E0]
	0x03DB844C LDR W8, [X0 + 0xE0]
	0x03DB8450 CBNZ W8, 0x3DB8458
	0x03DB8454 BL 0x1C16DFC
	0x03DB8458 LDP V0, V1, [X31 + 0x1C0]
	0x03DB845C LDP V2, V3, [X31 + 0x1E0]
	0x03DB8460 STP V0, V1, [X31 + 0x180]
	0x03DB8464 STP V2, V3, [X31 + 0x1A0]
	0x03DB8468 ADD X0, X31, 0x180
	0x03DB846C MOV V0.16B, V8.16B
	0x03DB8470 MOV V1.16B, V9.16B
	0x03DB8474 MOV V2.16B, V10.16B
	0x03DB8478 MOV V3.16B, V11.16B
	0x03DB847C MOV X1, X31
	0x03DB8480 BL 0x3DEEE74
	0x03DB8484 STR S0, [X20 + 0x3F8]
	0x03DB8488 STR S1, [X20 + 0x3FC]
	0x03DB848C STR S2, [X20 + 0x400]
	0x03DB8490 STR S3, [X20 + 0x404]
	0x03DB8494 LDP V0, V1, [X31 + 0x200]
	0x03DB8498 LDP V2, V3, [X31 + 0x220]
	0x03DB849C STP V0, V1, [X31 + 0x140]
	0x03DB84A0 STP V2, V3, [X31 + 0x160]
	0x03DB84A4 ADD X8, X31, 0x100
	0x03DB84A8 MOV X0, X20
	0x03DB84AC MOV X1, X31
	0x03DB84B0 BL 0x3DEDD74
	0x03DB84B4 LDP V0, V1, [X31 + 0x100]
	0x03DB84B8 LDP V2, V3, [X31 + 0x120]
	0x03DB84BC STP V0, V1, [X31 + 0x40]
	0x03DB84C0 LDP V0, V1, [X31 + 0x140]
	0x03DB84C4 STP V2, V3, [X31 + 0x60]
	0x03DB84C8 LDP V2, V3, [X31 + 0x160]
	0x03DB84CC STP V0, V1, [X31 + 0x80]
	0x03DB84D0 STP V2, V3, [X31 + 0xA0]
	0x03DB84D4 ADD X8, X31, 0xC0
	0x03DB84D8 ADD X0, X31, 0x80
	0x03DB84DC ADD X1, X31, 0x40
	0x03DB84E0 MOV X2, X31
	0x03DB84E4 BL 0x3C27F74
	0x03DB84E8 LDP V0, V1, [X31 + 0xC0]
	0x03DB84EC LDP V2, V3, [X31 + 0xE0]
	0x03DB84F0 ADD X21, X20, 0x408
	0x03DB84F4 STP V0, V1, [X31 + 0x100]
	0x03DB84F8 STP V2, V3, [X31 + 0x120]
	0x03DB84FC STP V2, V3, [X21 + 0x20]
	0x03DB8500 STP V0, V1, [X21]
	0x03DB8504 LDR X0, [X20 + 0x3A0]
	0x03DB8508 CBZ X0, 0x3DB85AC
	0x03DB850C LDR X8, [X0]
	0x03DB8510 LDR X1, [X8 + 0x350]
	0x03DB8514 LDR X9, [X8 + 0x348]
	0x03DB8518 BLR X9
	0x03DB851C CBZ X0, 0x3DB85B0
	0x03DB8520 LDP V0, V1, [X21 + 0x20]
	0x03DB8524 LDP V2, V3, [X21]
	0x03DB8528 LDR X1, [X0 + 0x68]
	0x03DB852C STP V0, V1, [X31 + 0x20]
	0x03DB8530 STP V2, V3, [X31]
	0x03DB8534 LDR V0, [X20 + 0x3F8]
	0x03DB8538 LDR V1, [X20 + 0x3FC]
	0x03DB853C LDR V2, [X20 + 0x400]
	0x03DB8540 LDR V3, [X20 + 0x404]
	0x03DB8544 LDR X3, [X20 + 0x3C8]
	0x03DB8548 ADD X2, X31, 0x0
	0x03DB854C MOVZ W4, 0x1
	0x03DB8550 MOV X0, X20
	0x03DB8554 BL 0x3DB863C
	0x03DB8558 MOV X20, X31
	0x03DB855C MOV X0, X19
	0x03DB8560 MOV X1, X31
	0x03DB8564 MOV X2, X31
	0x03DB8568 BL 0x33C5D2C
	0x03DB856C TBZ X0, 0x0, 0x3DB857C
	0x03DB8570 MOV X0, X19
	0x03DB8574 MOV X1, X31
	0x03DB8578 BL 0x3BFEA0C
	0x03DB857C CBNZ X20, 0x3DB85A0
	0x03DB8580 ADD X31, X31, 0x240
	0x03DB8584 LDP X20, X19, [X31 + 0x40]
	0x03DB8588 LDP X30, X21, [X31 + 0x30]
	0x03DB858C LDR X29, [X31 + 0x20]
	0x03DB8590 LDP D9, D8, [X31 + 0x10]
	0x03DB8594 LDP D11, D10, [X31], #0x50
	0x03DB8598 RET
	0x03DB859C BL 0x1C16F20
	0x03DB85A0 MOV X0, X20
	0x03DB85A4 BL 0x1C16F18
	0x03DB85A8 BL 0x1C16F20
	0x03DB85AC BL 0x1C16F20
	0x03DB85B0 BL 0x1C16F20
	0x03DB85B4 B 0x3DB85D8
	0x03DB85B8 B 0x3DB85D8
	0x03DB85BC B 0x3DB85D8
	0x03DB85C0 B 0x3DB85D8
	0x03DB85C4 B 0x3DB85D8
	0x03DB85C8 B 0x3DB85D8
	0x03DB85CC B 0x3DB85D8
	0x03DB85D0 B 0x3DB85D8
	0x03DB85D4 B 0x3DB85D8
	0x03DB85D8 MOV X21, X0
	0x03DB85DC CMP W1, 0x1
	0x03DB85E0 B.NE 0x3DB85F8
	0x03DB85E4 MOV X0, X21
	0x03DB85E8 BL 0x3EB1AD0
	0x03DB85EC LDR X20, [X0]
	0x03DB85F0 BL 0x3EB1AE0
	0x03DB85F4 B 0x3DB855C
	0x03DB85F8 MOV X20, X31
	0x03DB85FC B 0x3DB8604
	0x03DB8600 MOV X21, X0
	0x03DB8604 MOV X0, X19
	0x03DB8608 MOV X1, X31
	0x03DB860C MOV X2, X31
	0x03DB8610 BL 0x33C5D2C
	0x03DB8614 TBZ X0, 0x0, 0x3DB8624
	0x03DB8618 MOV X0, X19
	0x03DB861C MOV X1, X31
	0x03DB8620 BL 0x3BFEA0C
	0x03DB8624 CBNZ X20, 0x3DB8630
	0x03DB8628 MOV X0, X21
	0x03DB862C BL 0x1D2C690
	0x03DB8630 MOV X0, X20
	0x03DB8634 BL 0x1C16F18
	0x03DB8638 BL 0x1990590
	0x03DB863C SUB X31, X31, 0xE0
	0x03DB8640 STP D11, D10, [X31 + 0x80]
	0x03DB8644 STP D9, D8, [X31 + 0x90]
	0x03DB8648 STR X30, [X31 + 0xA0]
	0x03DB864C STP X24, X23, [X31 + 0xB0]
	0x03DB8650 STP X22, X21, [X31 + 0xC0]
	0x03DB8654 STP X20, X19, [X31 + 0xD0]
	0x03DB8658 ADRP X24, 0x630000
	0x03DB865C LDRB W8, [X24 + 0x60]
	0x03DB8660 MOV W22, W4
	0x03DB8664 MOV X21, X3
	0x03DB8668 MOV V8.16B, V3.16B
	0x03DB866C MOV V9.16B, V2.16B
	0x03DB8670 MOV V10.16B, V1.16B
	0x03DB8674 MOV V11.16B, V0.16B
	0x03DB8678 MOV X23, X2
	0x03DB867C MOV X20, X1
	0x03DB8680 MOV X19, X0
	0x03DB8684 TBNZ X8, 0x0, 0x3DB86B4
	0x03DB8688 ADRP X0, 0x3A1000
	0x03DB868C LDR X0, [X0 + 0x20]
	0x03DB8690 BL 0x1C16CF4
	0x03DB8694 ADRP X0, 0x367000
	0x03DB8698 LDR X0, [X0 + 0x5C8]
	0x03DB869C BL 0x1C16CF4
	0x03DB86A0 ADRP X0, 0x3B0000
	0x03DB86A4 LDR X0, [X0 + 0xEC8]
	0x03DB86A8 BL 0x1C16CF4
	0x03DB86AC MOVZ W8, 0x1
	0x03DB86B0 STRB W8, [X24 + 0x60]
	0x03DB86B4 MOV W0, W31
	0x03DB86B8 CBZ X20, 0x3DB892C
	0x03DB86BC CBZ X21, 0x3DB892C
	0x03DB86C0 LDR X0, [X19 + 0x3A0]
	0x03DB86C4 CBZ X0, 0x3DB892C
	0x03DB86C8 LDR X8, [X0]
	0x03DB86CC LDP X9, X1, [X8 + 0x1F8]
	0x03DB86D0 BLR X9
	0x03DB86D4 STRH W0, [X31 + 0xA8]
	0x03DB86D8 UBFM X8, X0, 0x10, 0x1F
	0x03DB86DC MOV X0, X20
	0x03DB86E0 MOV X1, X31
	0x03DB86E4 STRB W8, [X31 + 0xAA]
	0x03DB86E8 BL 0x3C62C04
	0x03DB86EC MOV W1, W0
	0x03DB86F0 ADD X0, X31, 0xA8
	0x03DB86F4 MOV X2, X31
	0x03DB86F8 BL 0x3C66434
	0x03DB86FC TBZ X0, 0x0, 0x3DB8928
	0x03DB8700 MOV X0, X20
	0x03DB8704 MOV X1, X31
	0x03DB8708 BL 0x3C62C04
	0x03DB870C CMP W0, 0x8
	0x03DB8710 B.EQ 0x3DB87DC
	0x03DB8714 LDRB W8, [X19 + 0x3EE]
	0x03DB8718 MOV W24, W0
	0x03DB871C CBNZ W8, 0x3DB8760
	0x03DB8720 LDR X0, [X19 + 0x3A0]
	0x03DB8724 CBZ X0, 0x3DB8964
	0x03DB8728 LDR X8, [X0]
	0x03DB872C LDP X9, X1, [X8 + 0x1F8]
	0x03DB8730 BLR X9
	0x03DB8734 STRH W0, [X31 + 0xA8]
	0x03DB8738 UBFM X8, X0, 0x10, 0x1F
	0x03DB873C MOV X0, X20
	0x03DB8740 MOV X1, X31
	0x03DB8744 STRB W8, [X31 + 0xAA]
	0x03DB8748 BL 0x3C62C04
	0x03DB874C MOV W1, W0
	0x03DB8750 ADD X0, X31, 0xA8
	0x03DB8754 MOV X2, X31
	0x03DB8758 BL 0x3C66464
	0x03DB875C TBZ X0, 0x0, 0x3DB894C
	0x03DB8760 MOVZ W1, 0x8
	0x03DB8764 MOV X0, X20
	0x03DB8768 MOV X2, X31
	0x03DB876C BL 0x3C632AC
	0x03DB8770 LDP V1, V0, [X23 + 0x20]
	0x03DB8774 LDP V3, V2, [X23]
	0x03DB8778 MOV X0, X19
	0x03DB877C MOV X1, X31
	0x03DB8780 STP V1, V0, [X31 + 0x60]
	0x03DB8784 STP V3, V2, [X31 + 0x40]
	0x03DB8788 BL 0x3DEC528
	0x03DB878C MOV V4.16B, V0.16B
	0x03DB8790 MOV V5.16B, V1.16B
	0x03DB8794 MOV V6.16B, V2.16B
	0x03DB8798 MOV V7.16B, V3.16B
	0x03DB879C AND W5, W22, 0x1
	0x03DB87A0 ADD X2, X31, 0x40
	0x03DB87A4 MOV X0, X19
	0x03DB87A8 MOV X1, X20
	0x03DB87AC MOV V0.16B, V11.16B
	0x03DB87B0 MOV V1.16B, V10.16B
	0x03DB87B4 MOV V2.16B, V9.16B
	0x03DB87B8 MOV V3.16B, V8.16B
	0x03DB87BC MOV W3, W31
	0x03DB87C0 MOV X4, X21
	0x03DB87C4 BL 0x3DB7158
	0x03DB87C8 MOV X0, X20
	0x03DB87CC MOV W1, W24
	0x03DB87D0 MOV X2, X31
	0x03DB87D4 STRB W31, [X19 + 0x3EE]
	0x03DB87D8 BL 0x3C632AC
	0x03DB87DC LDP V1, V0, [X23 + 0x20]
	0x03DB87E0 LDP V3, V2, [X23]
	0x03DB87E4 MOV X0, X19
	0x03DB87E8 MOV X1, X31
	0x03DB87EC STP V1, V0, [X31 + 0x20]
	0x03DB87F0 STP V3, V2, [X31]
	0x03DB87F4 BL 0x3DEC528
	0x03DB87F8 MOV V4.16B, V0.16B
	0x03DB87FC MOV V5.16B, V1.16B
	0x03DB8800 MOV V6.16B, V2.16B
	0x03DB8804 MOV V7.16B, V3.16B
	0x03DB8808 AND W5, W22, 0x1
	0x03DB880C ADD X2, X31, 0x0
	0x03DB8810 MOV X0, X19
	0x03DB8814 MOV X1, X20
	0x03DB8818 MOV V0.16B, V11.16B
	0x03DB881C MOV V1.16B, V10.16B
	0x03DB8820 MOV V2.16B, V9.16B
	0x03DB8824 MOV V3.16B, V8.16B
	0x03DB8828 MOV W3, W31
	0x03DB882C MOV X4, X21
	0x03DB8830 BL 0x3DB7158
	0x03DB8834 LDR W8, [X19 + 0x45C]
	0x03DB8838 CMP W8, 0x1
	0x03DB883C B.LT 0x3DB88A0
	0x03DB8840 STR W31, [X19 + 0x45C]
	0x03DB8844 ADRP X8, 0x3A1000
	0x03DB8848 LDR X8, [X8 + 0x20]
	0x03DB884C LDR X0, [X8]
	0x03DB8850 BL 0x1C16F10
	0x03DB8854 MOV X1, X31
	0x03DB8858 MOV X21, X0
	0x03DB885C BL 0x3C63690
	0x03DB8860 CBZ X21, 0x3DB8964
	0x03DB8864 MOVZ W1, 0xE
	0x03DB8868 MOV X0, X21
	0x03DB886C MOV X2, X31
	0x03DB8870 BL 0x3C632AC
	0x03DB8874 ADRP X8, 0x3B0000
	0x03DB8878 LDR X8, [X8 + 0xEC8]
	0x03DB887C MOV X0, X21
	0x03DB8880 MOV X2, X31
	0x03DB8884 LDR X1, [X8]
	0x03DB8888 BL 0x3C6332C
	0x03DB888C LDR X2, [X19 + 0x3C8]
	0x03DB8890 MOVZ W3, 0x1
	0x03DB8894 MOV X0, X19
	0x03DB8898 MOV X1, X21
	0x03DB889C BL 0x3DB915C
	0x03DB88A0 MOV X0, X20
	0x03DB88A4 MOV X1, X31
	0x03DB88A8 BL 0x3C62C04
	0x03DB88AC CMP W0, 0xC
	0x03DB88B0 B.NE 0x3DB88BC
	0x03DB88B4 MOVZ W0, 0x1
	0x03DB88B8 B 0x3DB892C
	0x03DB88BC MOV X0, X20
	0x03DB88C0 MOV X1, X31
	0x03DB88C4 BL 0x3C62C04
	0x03DB88C8 CMP W0, 0x1
	0x03DB88CC B.NE 0x3DB8900
	0x03DB88D0 MOV X0, X19
	0x03DB88D4 BL 0x3DB9334
	0x03DB88D8 TBZ X0, 0x0, 0x3DB8900
	0x03DB88DC ADRP X8, 0x367000
	0x03DB88E0 LDR X8, [X8 + 0x5C8]
	0x03DB88E4 LDR X0, [X8]
	0x03DB88E8 LDR W8, [X0 + 0xE0]
	0x03DB88EC CBNZ W8, 0x3DB88F4
	0x03DB88F0 BL 0x1C16DFC
	0x03DB88F4 MOV W0, W31
	0x03DB88F8 MOV X1, X31
	0x03DB88FC BL 0x3C6AA0C
	0x03DB8900 LDR X8, [X19 + 0x3A0]
	0x03DB8904 CBNZ X8, 0x3DB8928
	0x03DB8908 ADRP X8, 0x367000
	0x03DB890C LDR X8, [X8 + 0x5C8]
	0x03DB8910 LDR X0, [X8]
	0x03DB8914 LDR W8, [X0 + 0xE0]
	0x03DB8918 CBNZ W8, 0x3DB8920
	0x03DB891C BL 0x1C16DFC
	0x03DB8920 MOV X0, X31
	0x03DB8924 BL 0x3C75B64
	0x03DB8928 MOV W0, W31
	0x03DB892C LDP X20, X19, [X31 + 0xD0]
	0x03DB8930 LDP X22, X21, [X31 + 0xC0]
	0x03DB8934 LDP X24, X23, [X31 + 0xB0]
	0x03DB8938 LDR X30, [X31 + 0xA0]
	0x03DB893C LDP D9, D8, [X31 + 0x90]
	0x03DB8940 LDP D11, D10, [X31 + 0x80]
	0x03DB8944 ADD X31, X31, 0xE0
	0x03DB8948 RET
	0x03DB894C MOV X0, X19
	0x03DB8950 BL 0x3DB6704
	0x03DB8954 CBZ X0, 0x3DB8964
	0x03DB8958 MOV X1, X31
	0x03DB895C BL 0x3C71120
	0x03DB8960 B 0x3DB87DC
	0x03DB8964 BL 0x1C16F20
	0x03DB8968 SUB X31, X31, 0x30
	0x03DB896C STP X30, X21, [X31 + 0x10]
	0x03DB8970 STP X20, X19, [X31 + 0x20]
	0x03DB8974 MOV W19, W2
	0x03DB8978 MOV X21, X1
	0x03DB897C MOV X20, X0
	0x03DB8980 STRB W31, [X31 + 0x8]
	0x03DB8984 TBZ X3, 0x0, 0x3DB8998
	0x03DB8988 MOV X0, X20
	0x03DB898C MOV X1, X21
	0x03DB8990 BL 0x3DB8A68
	0x03DB8994 TBZ X0, 0x0, 0x3DB8A18
	0x03DB8998 ADD X0, X31, 0x8
	0x03DB899C MOV X1, X21
	0x03DB89A0 MOV X2, X31
	0x03DB89A4 BL 0x3DA15F8
	0x03DB89A8 CBZ X21, 0x3DB89E0
	0x03DB89AC MOV X0, X21
	0x03DB89B0 MOV X1, X31
	0x03DB89B4 BL 0x3D9B814
	0x03DB89B8 MOV X1, X0
	0x03DB89BC LDR X2, [X20 + 0x3C8]
	0x03DB89C0 AND W3, W19, 0x1
	0x03DB89C4 MOV X0, X20
	0x03DB89C8 BL 0x3DB915C
	0x03DB89CC MOV W19, W0
	0x03DB89D0 ADD X0, X31, 0x8
	0x03DB89D4 MOV X1, X31
	0x03DB89D8 BL 0x3DA15FC
	0x03DB89DC B 0x3DB8A1C
	0x03DB89E0 BL 0x1C16F20
	0x03DB89E4 B 0x3DB89EC
	0x03DB89E8 B 0x3DB89EC
	0x03DB89EC MOV X19, X0
	0x03DB89F0 CMP W1, 0x1
	0x03DB89F4 B.NE 0x3DB8A30
	0x03DB89F8 MOV X0, X19
	0x03DB89FC BL 0x3EB1AD0
	0x03DB8A00 LDR X20, [X0]
	0x03DB8A04 BL 0x3EB1AE0
	0x03DB8A08 ADD X0, X31, 0x8
	0x03DB8A0C MOV X1, X31
	0x03DB8A10 BL 0x3DA15FC
	0x03DB8A14 CBNZ X20, 0x3DB8A38
	0x03DB8A18 MOV W19, W31
	0x03DB8A1C AND W0, W19, 0x1
	0x03DB8A20 LDP X20, X19, [X31 + 0x20]
	0x03DB8A24 LDP X30, X21, [X31 + 0x10]
	0x03DB8A28 ADD X31, X31, 0x30
	0x03DB8A2C RET
	0x03DB8A30 MOV X20, X31
	0x03DB8A34 B 0x3DB8A44
	0x03DB8A38 MOV X0, X20
	0x03DB8A3C BL 0x1C16F18
	0x03DB8A40 MOV X19, X0
	0x03DB8A44 ADD X0, X31, 0x8
	0x03DB8A48 MOV X1, X31
	0x03DB8A4C BL 0x3DA15FC
	0x03DB8A50 CBNZ X20, 0x3DB8A5C
	0x03DB8A54 MOV X0, X19
	0x03DB8A58 BL 0x1D2C690
	0x03DB8A5C MOV X0, X20
	0x03DB8A60 BL 0x1C16F18
	0x03DB8A64 BL 0x1990590
	0x03DB8A68 STP X30, X21, [X31 - 0x20]!
	0x03DB8A6C STP X20, X19, [X31 + 0x10]
	0x03DB8A70 ADRP X21, 0x630000
	0x03DB8A74 LDRB W8, [X21 + 0x5A]
	0x03DB8A78 MOV X19, X1
	0x03DB8A7C MOV X20, X0
	0x03DB8A80 TBNZ X8, 0x0, 0x3DB8A98
	0x03DB8A84 ADRP X0, 0x3AC000
	0x03DB8A88 LDR X0, [X0 + 0xC0]
	0x03DB8A8C BL 0x1C16CF4
	0x03DB8A90 MOVZ W8, 0x1
	0x03DB8A94 STRB W8, [X21 + 0x5A]
	0x03DB8A98 MOV X0, X20
	0x03DB8A9C BL 0x3DB8B08
	0x03DB8AA0 TBNZ X0, 0x0, 0x3DB8AC0
	0x03DB8AA4 MOV X1, X19
	0x03DB8AA8 BL 0x3DB8C18
	0x03DB8AAC TBZ X0, 0x0, 0x3DB8AC0
	0x03DB8AB0 MOV X0, X20
	0x03DB8AB4 MOV X1, X19
	0x03DB8AB8 BL 0x3DB8E1C
	0x03DB8ABC TBZ X0, 0x0, 0x3DB8AD0
	0x03DB8AC0 LDP X20, X19, [X31 + 0x10]
	0x03DB8AC4 MOVZ W0, 0x1
	0x03DB8AC8 LDP X30, X21, [X31], #0x20
	0x03DB8ACC RET
	0x03DB8AD0 ADRP X8, 0x3AC000
	0x03DB8AD4 LDR X8, [X8 + 0xC0]
	0x03DB8AD8 LDR X0, [X8]
	0x03DB8ADC LDR W8, [X0 + 0xE0]
	0x03DB8AE0 CBNZ W8, 0x3DB8AE8
	0x03DB8AE4 BL 0x1C16DFC
	0x03DB8AE8 MOV X0, X19
	0x03DB8AEC LDP X20, X19, [X31 + 0x10]
	0x03DB8AF0 LDP X30, X21, [X31], #0x20
	0x03DB8AF4 B 0x3DB8FD0
	0x03DB8AF8 LDR X8, [X0 + 0x3C8]
	0x03DB8AFC AND W3, W2, 0x1
	0x03DB8B00 MOV X2, X8
	0x03DB8B04 B 0x3DB915C
	0x03DB8B08 STP X30, X21, [X31 - 0x20]!
	0x03DB8B0C STP X20, X19, [X31 + 0x10]
	0x03DB8B10 ADRP X19, 0x630000
	0x03DB8B14 LDRB W8, [X19 + 0x5B]
	0x03DB8B18 MOV X20, X0
	0x03DB8B1C TBNZ X8, 0x0, 0x3DB8B40
	0x03DB8B20 ADRP X0, 0x364000
	0x03DB8B24 LDR X0, [X0 + 0xE80]
	0x03DB8B28 BL 0x1C16CF4
	0x03DB8B2C ADRP X0, 0x364000
	0x03DB8B30 LDR X0, [X0 + 0xE50]
	0x03DB8B34 BL 0x1C16CF4
	0x03DB8B38 MOVZ W8, 0x1
	0x03DB8B3C STRB W8, [X19 + 0x5B]
	0x03DB8B40 MOV X0, X20
	0x03DB8B44 MOV X1, X31
	0x03DB8B48 BL 0x3DEC0CC
	0x03DB8B4C CMP X0, 0x0
	0x03DB8B50 CSEL X21, X31, X20, EQ
	0x03DB8B54 CBZ X0, 0x3DB8C00
	0x03DB8B58 ADRP X10, 0x364000
	0x03DB8B5C LDR X8, [X0]
	0x03DB8B60 LDR X10, [X10 + 0xE80]
	0x03DB8B64 MOV X19, X0
	0x03DB8B68 LDRH W9, [X8 + 0x12E]
	0x03DB8B6C LDR X1, [X10]
	0x03DB8B70 CBZ X9, 0x3DB8B94
	0x03DB8B74 LDR X10, [X8 + 0xB0]
	0x03DB8B78 ADD X10, X10, 0x8
	0x03DB8B7C LDUR X11, [X10 - 0x8]
	0x03DB8B80 CMP X11, X1
	0x03DB8B84 B.EQ 0x3DB8BA4
	0x03DB8B88 SUBS X9, X9, 0x1
	0x03DB8B8C ADD X10, X10, 0x10
	0x03DB8B90 B.NE 0x3DB8B7C
	0x03DB8B94 MOVZ W2, 0x1
	0x03DB8B98 MOV X0, X19
	0x03DB8B9C BL 0x1C5C788
	0x03DB8BA0 B 0x3DB8BB4
	0x03DB8BA4 LDR W9, [X10]
	0x03DB8BA8 ADD W9, W9, 0x1
	0x03DB8BAC ADD X8, X8, W9, 0x4, SXTW
	0x03DB8BB0 ADD X0, X8, 0x138
	0x03DB8BB4 LDP X8, X1, [X0]
	0x03DB8BB8 MOV X0, X19
	0x03DB8BBC BLR X8
	0x03DB8BC0 CBZ X0, 0x3DB8BFC
	0x03DB8BC4 ADRP X20, 0x364000
	0x03DB8BC8 LDR X20, [X20 + 0xE50]
	0x03DB8BCC LDR X19, [X0 + 0x28]
	0x03DB8BD0 LDR X8, [X20]
	0x03DB8BD4 LDR W9, [X8 + 0xE0]
	0x03DB8BD8 CBNZ W9, 0x3DB8BE4
	0x03DB8BDC MOV X0, X8
	0x03DB8BE0 BL 0x1C16DFC
	0x03DB8BE4 CBZ X19, 0x3DB8C14
	0x03DB8BE8 LDR X8, [X20]
	0x03DB8BEC MOV X0, X19
	0x03DB8BF0 LDR X8, [X8 + 0xB8]
	0x03DB8BF4 LDR W1, [X8 + 0x8]
	0x03DB8BF8 BL 0x3DB90F4
	0x03DB8BFC MOV X20, X21
	0x03DB8C00 CMP X20, X0
	0x03DB8C04 LDP X20, X19, [X31 + 0x10]
	0x03DB8C08 CSET W0, EQ
	0x03DB8C0C LDP X30, X21, [X31], #0x20
	0x03DB8C10 RET
	0x03DB8C14 BL 0x1C16F20
	0x03DB8C18 STP X30, X21, [X31 - 0x20]!
	0x03DB8C1C STP X20, X19, [X31 + 0x10]
	0x03DB8C20 ADRP X20, 0x630000
	0x03DB8C24 LDRB W8, [X20 + 0x5C]
	0x03DB8C28 MOV X19, X1
	0x03DB8C2C TBNZ X8, 0x0, 0x3DB8CC8
	0x03DB8C30 ADRP X0, 0x363000
	0x03DB8C34 LDR X0, [X0 + 0x938]
	0x03DB8C38 BL 0x1C16CF4
	0x03DB8C3C ADRP X0, 0x3B0000
	0x03DB8C40 LDR X0, [X0 + 0x50]
	0x03DB8C44 BL 0x1C16CF4
	0x03DB8C48 ADRP X0, 0x366000
	0x03DB8C4C LDR X0, [X0 + 0x200]
	0x03DB8C50 BL 0x1C16CF4
	0x03DB8C54 ADRP X0, 0x3AA000
	0x03DB8C58 LDR X0, [X0 + 0xD88]
	0x03DB8C5C BL 0x1C16CF4
	0x03DB8C60 ADRP X0, 0x3B0000
	0x03DB8C64 LDR X0, [X0 + 0x58]
	0x03DB8C68 BL 0x1C16CF4
	0x03DB8C6C ADRP X0, 0x363000
	0x03DB8C70 LDR X0, [X0 + 0x940]
	0x03DB8C74 BL 0x1C16CF4
	0x03DB8C78 ADRP X0, 0x363000
	0x03DB8C7C LDR X0, [X0 + 0x948]
	0x03DB8C80 BL 0x1C16CF4
	0x03DB8C84 ADRP X0, 0x3B0000
	0x03DB8C88 LDR X0, [X0 + 0x68]
	0x03DB8C8C BL 0x1C16CF4
	0x03DB8C90 ADRP X0, 0x366000
	0x03DB8C94 LDR X0, [X0 + 0x208]
	0x03DB8C98 BL 0x1C16CF4
	0x03DB8C9C ADRP X0, 0x363000
	0x03DB8CA0 LDR X0, [X0 + 0x950]
	0x03DB8CA4 BL 0x1C16CF4
	0x03DB8CA8 ADRP X0, 0x3AA000
	0x03DB8CAC LDR X0, [X0 + 0xDA0]
	0x03DB8CB0 BL 0x1C16CF4
	0x03DB8CB4 ADRP X0, 0x3B0000
	0x03DB8CB8 LDR X0, [X0 + 0x78]
	0x03DB8CBC BL 0x1C16CF4
	0x03DB8CC0 MOVZ W8, 0x1
	0x03DB8CC4 STRB W8, [X20 + 0x5C]
	0x03DB8CC8 CBZ X19, 0x3DB8E18
	0x03DB8CCC LDR X8, [X19]
	0x03DB8CD0 ADRP X21, 0x3B0000
	0x03DB8CD4 ADRP X20, 0x3B0000
	0x03DB8CD8 MOV X0, X19
	0x03DB8CDC LDP X9, X1, [X8 + 0x188]
	0x03DB8CE0 LDR X21, [X21 + 0x68]
	0x03DB8CE4 LDR X20, [X20 + 0x50]
	0x03DB8CE8 BLR X9
	0x03DB8CEC LDR X8, [X21]
	0x03DB8CF0 MOV X19, X0
	0x03DB8CF4 LDR W9, [X8 + 0xE0]
	0x03DB8CF8 CBNZ W9, 0x3DB8D04
	0x03DB8CFC MOV X0, X8
	0x03DB8D00 BL 0x1C16DFC
	0x03DB8D04 LDR X0, [X20]
	0x03DB8D08 BL 0x2D0D5C8
	0x03DB8D0C CMP X19, X0
	0x03DB8D10 B.EQ 0x3DB8DD4
	0x03DB8D14 ADRP X8, 0x3AA000
	0x03DB8D18 LDR X8, [X8 + 0xDA0]
	0x03DB8D1C LDR X0, [X8]
	0x03DB8D20 LDR W8, [X0 + 0xE0]
	0x03DB8D24 CBNZ W8, 0x3DB8D2C
	0x03DB8D28 BL 0x1C16DFC
	0x03DB8D2C ADRP X8, 0x3AA000
	0x03DB8D30 LDR X8, [X8 + 0xD88]
	0x03DB8D34 LDR X0, [X8]
	0x03DB8D38 BL 0x2D0D5C8
	0x03DB8D3C CMP X19, X0
	0x03DB8D40 B.EQ 0x3DB8DD4
	0x03DB8D44 ADRP X8, 0x3B0000
	0x03DB8D48 LDR X8, [X8 + 0x78]
	0x03DB8D4C LDR X0, [X8]
	0x03DB8D50 LDR W8, [X0 + 0xE0]
	0x03DB8D54 CBNZ W8, 0x3DB8D5C
	0x03DB8D58 BL 0x1C16DFC
	0x03DB8D5C ADRP X8, 0x3B0000
	0x03DB8D60 LDR X8, [X8 + 0x58]
	0x03DB8D64 LDR X0, [X8]
	0x03DB8D68 BL 0x2D0D5C8
	0x03DB8D6C CMP X19, X0
	0x03DB8D70 B.EQ 0x3DB8DD4
	0x03DB8D74 ADRP X8, 0x363000
	0x03DB8D78 LDR X8, [X8 + 0x950]
	0x03DB8D7C LDR X0, [X8]
	0x03DB8D80 LDR W8, [X0 + 0xE0]
	0x03DB8D84 CBNZ W8, 0x3DB8D8C
	0x03DB8D88 BL 0x1C16DFC
	0x03DB8D8C ADRP X8, 0x363000
	0x03DB8D90 LDR X8, [X8 + 0x938]
	0x03DB8D94 LDR X0, [X8]
	0x03DB8D98 BL 0x2D0D5C8
	0x03DB8D9C CMP X19, X0
	0x03DB8DA0 B.EQ 0x3DB8DD4
	0x03DB8DA4 ADRP X8, 0x363000
	0x03DB8DA8 LDR X8, [X8 + 0x948]
	0x03DB8DAC LDR X0, [X8]
	0x03DB8DB0 LDR W8, [X0 + 0xE0]
	0x03DB8DB4 CBNZ W8, 0x3DB8DBC
	0x03DB8DB8 BL 0x1C16DFC
	0x03DB8DBC ADRP X8, 0x363000
	0x03DB8DC0 LDR X8, [X8 + 0x940]
	0x03DB8DC4 LDR X0, [X8]
	0x03DB8DC8 BL 0x2D0D5C8
	0x03DB8DCC CMP X19, X0
	0x03DB8DD0 B.NE 0x3DB8DE4
	0x03DB8DD4 MOVZ W0, 0x1
	0x03DB8DD8 LDP X20, X19, [X31 + 0x10]
	0x03DB8DDC LDP X30, X21, [X31], #0x20
	0x03DB8DE0 RET
	0x03DB8DE4 ADRP X8, 0x366000
	0x03DB8DE8 LDR X8, [X8 + 0x208]
	0x03DB8DEC LDR X0, [X8]
	0x03DB8DF0 LDR W8, [X0 + 0xE0]
	0x03DB8DF4 CBNZ W8, 0x3DB8DFC
	0x03DB8DF8 BL 0x1C16DFC
	0x03DB8DFC ADRP X8, 0x366000
	0x03DB8E00 LDR X8, [X8 + 0x200]
	0x03DB8E04 LDR X0, [X8]
	0x03DB8E08 BL 0x2D0D5C8
	0x03DB8E0C CMP X19, X0
	0x03DB8E10 CSET W0, EQ
	0x03DB8E14 B 0x3DB8DD8
	0x03DB8E18 BL 0x1C16F20
	0x03DB8E1C STP D13, D12, [X31 - 0x60]!
	0x03DB8E20 STP D11, D10, [X31 + 0x10]
	0x03DB8E24 STP D9, D8, [X31 + 0x20]
	0x03DB8E28 STR X30, [X31 + 0x30]
	0x03DB8E2C STP X22, X21, [X31 + 0x40]
	0x03DB8E30 STP X20, X19, [X31 + 0x50]
	0x03DB8E34 ADRP X21, 0x630000
	0x03DB8E38 ADRP X22, 0x364000
	0x03DB8E3C LDRB W8, [X21 + 0x5D]
	0x03DB8E40 LDR X22, [X22 + 0xE78]
	0x03DB8E44 MOV X19, X1
	0x03DB8E48 MOV X20, X0
	0x03DB8E4C TBNZ X8, 0x0, 0x3DB8E7C
	0x03DB8E50 ADRP X0, 0x367000
	0x03DB8E54 LDR X0, [X0 + 0x5C8]
	0x03DB8E58 BL 0x1C16CF4
	0x03DB8E5C ADRP X0, 0x364000
	0x03DB8E60 LDR X0, [X0 + 0xE78]
	0x03DB8E64 BL 0x1C16CF4
	0x03DB8E68 ADRP X0, 0x364000
	0x03DB8E6C LDR X0, [X0 + 0xE58]
	0x03DB8E70 BL 0x1C16CF4
	0x03DB8E74 MOVZ W8, 0x1
	0x03DB8E78 STRB W8, [X21 + 0x5D]
	0x03DB8E7C ADRP X21, 0x364000
	0x03DB8E80 LDR X21, [X21 + 0xE58]
	0x03DB8E84 MOV X0, X20
	0x03DB8E88 BL 0x3DB9124
	0x03DB8E8C LDR X1, [X22]
	0x03DB8E90 MOV X0, X19
	0x03DB8E94 MOV V8.16B, V0.16B
	0x03DB8E98 MOV V9.16B, V1.16B
	0x03DB8E9C MOV V10.16B, V2.16B
	0x03DB8EA0 MOV V11.16B, V3.16B
	0x03DB8EA4 BL 0x1C16E00
	0x03DB8EA8 MOV X20, X0
	0x03DB8EAC CBZ X0, 0x3DB8F10
	0x03DB8EB0 LDR X8, [X20]
	0x03DB8EB4 LDR X1, [X22]
	0x03DB8EB8 LDRH W9, [X8 + 0x12E]
	0x03DB8EBC CBZ X9, 0x3DB8EE0
	0x03DB8EC0 LDR X10, [X8 + 0xB0]
	0x03DB8EC4 ADD X10, X10, 0x8
	0x03DB8EC8 LDUR X11, [X10 - 0x8]
	0x03DB8ECC CMP X11, X1
	0x03DB8ED0 B.EQ 0x3DB8EF0
	0x03DB8ED4 SUBS X9, X9, 0x1
	0x03DB8ED8 ADD X10, X10, 0x10
	0x03DB8EDC B.NE 0x3DB8EC8
	0x03DB8EE0 MOVZ W2, 0x1
	0x03DB8EE4 MOV X0, X20
	0x03DB8EE8 BL 0x1C5C788
	0x03DB8EEC B 0x3DB8F00
	0x03DB8EF0 LDR W9, [X10]
	0x03DB8EF4 ADD W9, W9, 0x1
	0x03DB8EF8 ADD X8, X8, W9, 0x4, SXTW
	0x03DB8EFC ADD X0, X8, 0x138
	0x03DB8F00 LDP X8, X1, [X0]
	0x03DB8F04 MOV X0, X20
	0x03DB8F08 BLR X8

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 528
	022 Move X20, 0x631000
	023 Move W8, [X20+86]
	024 Move X22, X4
	025 Move V12, V7
	026 Move V13, V6
	027 Move V14, V5
	028 Move V15, V4
	029 Move W21, W3
	030 Move V10, V3
	031 Move V8, V2
	032 Move V9, V1
	033 Move V11, V0
	034 Move X23, X2
	035 Move X19, X1
	036 Move X24, X0
	037 And W9, W5, 1
	038 Move [X31+516], W9
	039 Move [X31+520], X0
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {82}
	044 Move X0, 0x33D000
	045 Move X0, [X0+3696]
	046 Call 0x1C17CF4
	047 Move X0, 0x33C000
	048 Move X0, [X0+2600]
	049 Call 0x1C17CF4
	050 Move X0, 0x367000
	051 Move X0, [X0+3504]
	052 Call 0x1C17CF4
	053 Move X0, 0x368000
	054 Move X0, [X0+1480]
	055 Call 0x1C17CF4
	056 Move X0, 0x363000
	057 Move X0, [X0+1216]
	058 Call 0x1C17CF4
	059 Move X0, 0x3B1000
	060 Move X0, [X0+3752]
	061 Call 0x1C17CF4
	062 Move X0, 0x3AD000
	063 Move X0, [X0+192]
	064 Call 0x1C17CF4
	065 Move X0, 0x364000
	066 Move X0, [X0+1664]
	067 Call 0x1C17CF4
	068 Move X0, 0x365000
	069 Move X0, [X0+3736]
	070 Call 0x1C17CF4
	071 Move X0, 0x3AC000
	072 Move X0, [X0+4080]
	073 Call 0x1C17CF4
	074 Move X0, 0x3B1000
	075 Move X0, [X0+3760]
	076 Call 0x1C17CF4
	077 Move X0, 0x3B1000
	078 Move X0, [X0+3768]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X20+86], W8
	082 Move [X31+512], W31
	083 Move [X31+504], W31
	084 Move [X31+500], W31
	085 Move [X31+496], W31
	086 Move [X31+488], X31
	087 Move [X31+484], W31
	088 Move [X31+480], W31
	089 Move [X31+464], X31
	090 Move [X31+472], X31
	091 Move [X31+460], W31
	092 Move [X31+456], W31
	093 Move [X31+452], W31
	094 Move [X31+448], W31
	095 Move [X31+444], W31
	096 Move [X31+440], W31
	097 Move [X31+436], W31
	098 Move [X31+432], W31
	099 Move [X31+428], W31
	100 Move [X31+424], W31
	101 Move [X31+420], W31
	102 Move [X31+400], X31
	103 Move [X31+408], X31
	104 Move [X31+384], X31
	105 Move [X31+392], X31
	106 Move [X31+376], X31
	107 Move [X31+372], W31
	108 Compare X22, 0
	109 JumpIfEqual {808}
	110 Move X0, X24
	111 Move X1, X31
	112 Call VisualElement.get_panel, X0
	113 Compare X0, 0
	114 JumpIfEqual {808}
	115 Move X0, X31
	116 Move [X31+32], S15
	117 Move [X31+40], S14
	118 Move [X31+40], S13
	119 Move [X31+48], S12
	120 Call GUIClip.Internal_GetCount
	121 Move W20, W0
	122 Move X0, X24
	123 Call IMGUIContainer.SaveGlobals, X0
	124 Move X0, X24
	125 Call IMGUIContainer.get_layoutMeasuredWidth, X0
	126 Move X0, X24
	127 Move [X31+28], S0
	128 Call IMGUIContainer.get_layoutMeasuredHeight, X0
	129 Move X0, X24
	130 Move [X31+24], S0
	131 Call IMGUIContainer.get_cache, X0
	132 Move X26, 0x365000
	133 Move X26, [X26+3736]
	134 Move X25, X0
	135 Move X8, [X26]
	136 Move W9, [X8+224]
	137 Compare W9, 0
	138 JumpIfNotEqual {141}
	139 Move X0, X8
	140 Call 0x1C17DFC
	141 Move X0, X25
	142 Move X1, X19
	143 Move X2, X24
	144 Move X3, X31
	145 Call UIElementsUtility.BeginContainerGUI, X0, X1, X2
	146 Move X9, 0x363000
	147 Move X8, [X26]
	148 Move X9, [X9+1216]
	149 Move X8, [X8+184]
	150 Move X0, [X9]
	151 Move S15, [X8+24]
	152 Move S14, [X8+28]
	153 Move W9, [X0+224]
	154 Move S13, [X8+32]
	155 Move S12, [X8+36]
	156 Compare W9, 0
	157 JumpIfNotEqual {159}
	158 Call 0x1C17DFC
	159 Move V0, V15
	160 Move V1, V14
	161 Move V2, V13
	162 Move V3, V12
	163 Move X0, X31
	164 Call GUI.set_color, X0
	165 Move X0, X31
	166 Call Event.get_current
	167 Compare X0, 0
	168 JumpIfEqual {830}
	169 Move X1, X31
	170 Call Event.get_type, X0
	171 Move S13, [X31+40]
	172 Move S12, [X31+44]
	173 Move S15, [X31+32]
	174 Move S14, [X31+36]
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move W8, [X24+1100]
	177 Compare W8, 0
	178 JumpIfEqual {218}
	179 Move X8, [X24]
	180 Move X0, X24
	181 Move X9, [X8+552]
	182 Move X1, [X8+560]
	183 NotImplemented "Instruction BLR not yet implemented."
	184 Compare X0, 0
	185 JumpIfEqual {217}
	186 Move X25, 0x368000
	187 Move X25, [X25+1480]
	188 Move X0, [X25]
	189 Move W8, [X0+224]
	190 Compare W8, 0
	191 JumpIfNotEqual {193}
	192 Call 0x1C17DFC
	193 Move X0, X31
	194 Call GUIUtility.get_keyboardControl
	195 Move X1, X31
	196 Call GUIUtility.OwnsId, X0
	197 Move TEMP, X0
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfNotEqual {217}
	201 Move X0, [X25]
	202 Move W8, [X0+224]
	203 Compare W8, 0
	204 JumpIfNotEqual {206}
	205 Call 0x1C17DFC
	206 Move W0, W31
	207 Move X1, X31
	208 Call GUIUtility.set_keyboardControl, X0
	209 Move X8, [X24]
	210 Move X0, X24
	211 Move X9, [X8+552]
	212 Move X1, [X8+560]
	213 NotImplemented "Instruction BLR not yet implemented."
	214 Compare X0, 0
	215 JumpIfEqual {830}
	216 Move [X0+60], W31
	217 Move [X24+1100], W31
	218 Move W8, [X24+1101]
	219 Compare W8, 0
	220 JumpIfEqual {478}
	221 Move W8, [X24+1112]
	222 Move X27, 0x624000
	223 Compare W8, 0
	224 JumpIfEqual {377}
	225 Move X25, 0x367000
	226 Move X25, [X25+3504]
	227 Move X28, [X24+1104]
	228 Move X0, [X25]
	229 Move W8, [X0+224]
	230 Compare W8, 0
	231 JumpIfNotEqual {233}
	232 Call 0x1C17DFC
	233 Move W8, [X27+2039]
	234 Compare W8, 0
	235 JumpIfNotEqual {241}
	236 Move X0, 0x367000
	237 Move X0, [X0+3504]
	238 Call 0x1C17CF4
	239 Move W8, 1
	240 Move [X27+2039], W8
	241 Move X0, [X25]
	242 Move W8, [X0+224]
	243 Compare W8, 0
	244 JumpIfNotEqual {247}
	245 Call 0x1C17DFC
	246 Move X0, [X25]
	247 Move X8, [X0+184]
	248 Move X8, [X8]
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move W8, [X0+224]
	251 Move X28, [X24+1104]
	252 Compare W8, 0
	253 JumpIfNotEqual {255}
	254 Call 0x1C17DFC
	255 Move X29, 0x630000
	256 Move W8, [X29+2736]
	257 Compare W8, 0
	258 JumpIfNotEqual {264}
	259 Move X0, 0x367000
	260 Move X0, [X0+3504]
	261 Call 0x1C17CF4
	262 Move W8, 1
	263 Move [X29+2736], W8
	264 Move X0, [X25]
	265 Move W8, [X0+224]
	266 Compare W8, 0
	267 JumpIfNotEqual {270}
	268 Call 0x1C17DFC
	269 Move X0, [X25]
	270 Move X8, [X0+184]
	271 Move X8, [X8+8]
	272 NotImplemented "Instruction CMP not yet implemented."
	273 Move X0, X31
	274 Call Event.get_current
	275 Compare X0, 0
	276 JumpIfEqual {830}
	277 Move X1, X31
	278 Call Event.get_type, X0
	279 NotImplemented "Instruction CMP not yet implemented."
	280 Move X0, X31
	281 Call Event.get_current
	282 Compare X0, 0
	283 JumpIfEqual {830}
	284 Move X1, X31
	285 Call Event.get_character, X0
	286 Move W8, 0xFFEF
	287 And W8, W0, W8
	288 NotImplemented "Instruction CMP not yet implemented."
	289 Move X0, X31
	290 Call Event.get_current
	291 Compare X0, 0
	292 JumpIfEqual {830}
	293 Move X1, X31
	294 Call Event.Use, X0
	295 Move X25, 0x3AC000
	296 Move X25, [X25+4080]
	297 Move X28, [X24+1104]
	298 Move X0, [X25]
	299 Move W8, [X0+224]
	300 Compare W8, 0
	301 JumpIfNotEqual {303}
	302 Call 0x1C17DFC
	303 Move X29, 0x630000
	304 Move W8, [X29+2737]
	305 Compare W8, 0
	306 JumpIfNotEqual {312}
	307 Move X0, 0x3AC000
	308 Move X0, [X0+4080]
	309 Call 0x1C17CF4
	310 Move W8, 1
	311 Move [X29+2737], W8
	312 Move X0, [X25]
	313 Move W8, [X0+224]
	314 Compare W8, 0
	315 JumpIfNotEqual {318}
	316 Call 0x1C17DFC
	317 Move X0, [X25]
	318 Move X8, [X0+184]
	319 Move X8, [X8]
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Move W8, [X0+224]
	322 Move X28, [X24+1104]
	323 Compare W8, 0
	324 JumpIfNotEqual {326}
	325 Call 0x1C17DFC
	326 Move X29, 0x630000
	327 Move W8, [X29+2738]
	328 Compare W8, 0
	329 JumpIfNotEqual {335}
	330 Move X0, 0x3AC000
	331 Move X0, [X0+4080]
	332 Call 0x1C17CF4
	333 Move W8, 1
	334 Move [X29+2738], W8
	335 Move X0, [X25]
	336 Move W8, [X0+224]
	337 Compare W8, 0
	338 JumpIfNotEqual {341}
	339 Call 0x1C17DFC
	340 Move X0, [X25]
	341 Move X8, [X0+184]
	342 Move X8, [X8+8]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Move X8, 0x368000
	345 Move X8, [X8+1480]
	346 Move X0, [X8]
	347 Move X25, 0x368000
	348 Move X25, [X25+1480]
	349 Move X0, [X25]
	350 Move W8, [X0+224]
	351 Compare W8, 0
	352 JumpIfNotEqual {354}
	353 Call 0x1C17DFC
	354 Move X0, X31
	355 Call GUIUtility.get_keyboardControl
	356 Compare W0, 0
	357 JumpIfNotEqual {377}
	358 Move W8, [X24+1005]
	359 Compare W8, 0
	360 JumpIfEqual {377}
	361 Move X0, [X25]
	362 Move W8, [X0+224]
	363 Compare W8, 0
	364 JumpIfNotEqual {366}
	365 Call 0x1C17DFC
	366 Move X0, X31
	367 Call GUIUtility.SetKeyboardControlToFirstControlId
	368 Move X8, 0x368000
	369 Move X8, [X8+1480]
	370 Move X0, [X8]
	371 Move W8, [X0+224]
	372 Compare W8, 0
	373 JumpIfNotEqual {375}
	374 Call 0x1C17DFC
	375 Move X0, X31
	376 Call GUIUtility.SetKeyboardControlToLastControlId
	377 Move X8, [X24]
	378 Move X0, X24
	379 Move X9, [X8+552]
	380 Move X1, [X8+560]
	381 NotImplemented "Instruction BLR not yet implemented."
	382 Compare X0, 0
	383 JumpIfEqual {453}
	384 Move X8, [X24]
	385 Move X0, X24
	386 Move X9, [X8+552]
	387 Move X1, [X8+560]
	388 NotImplemented "Instruction BLR not yet implemented."
	389 Compare X0, 0
	390 JumpIfEqual {830}
	391 Move X25, 0x368000
	392 Move X25, [X25+1480]
	393 Move W28, [X0+60]
	394 Move X8, [X25]
	395 Move W9, [X8+224]
	396 Compare W9, 0
	397 JumpIfNotEqual {400}
	398 Move X0, X8
	399 Call 0x1C17DFC
	400 Move X0, X31
	401 Call GUIUtility.get_keyboardControl
	402 NotImplemented "Instruction CMP not yet implemented."
	403 Move X29, 0x367000
	404 Move X29, [X29+3504]
	405 Move X28, [X24+1104]
	406 Move X0, [X29]
	407 Move W8, [X0+224]
	408 Compare W8, 0
	409 JumpIfNotEqual {411}
	410 Call 0x1C17DFC
	411 Move W8, [X27+2039]
	412 Compare W8, 0
	413 JumpIfNotEqual {419}
	414 Move X0, 0x367000
	415 Move X0, [X0+3504]
	416 Call 0x1C17CF4
	417 Move W8, 1
	418 Move [X27+2039], W8
	419 Move X0, [X29]
	420 Move W8, [X0+224]
	421 Compare W8, 0
	422 JumpIfNotEqual {425}
	423 Call 0x1C17DFC
	424 Move X0, [X29]
	425 Move X8, [X0+184]
	426 Move X8, [X8]
	427 NotImplemented "Instruction CMP not yet implemented."
	428 Move X0, [X25]
	429 Move W8, [X0+224]
	430 Compare W8, 0
	431 JumpIfNotEqual {433}
	432 Call 0x1C17DFC
	433 Move X0, X31
	434 Call GUIUtility.get_keyboardControl
	435 Move [X24+1116], W0
	436 Move X8, [X24]
	437 Move X0, X24
	438 Move X9, [X8+552]
	439 Move X1, [X8+560]
	440 NotImplemented "Instruction BLR not yet implemented."
	441 Move X8, [X25]
	442 Move X25, X0
	443 Move W9, [X8+224]
	444 Compare W9, 0
	445 JumpIfNotEqual {448}
	446 Move X0, X8
	447 Call 0x1C17DFC
	448 Move X0, X31
	449 Call GUIUtility.get_keyboardControl
	450 Compare X25, 0
	451 JumpIfEqual {830}
	452 Move [X25+60], W0
	453 Move [X24+1101], W31
	454 Move X25, 0x367000
	455 Move X25, [X25+3504]
	456 Move X0, [X25]
	457 Move W8, [X0+224]
	458 Compare W8, 0
	459 JumpIfNotEqual {461}
	460 Call 0x1C17DFC
	461 Move W8, [X27+2039]
	462 Compare W8, 0
	463 JumpIfNotEqual {469}
	464 Move X0, 0x367000
	465 Move X0, [X0+3504]
	466 Call 0x1C17CF4
	467 Move W8, 1
	468 Move [X27+2039], W8
	469 Move X0, [X25]
	470 Move W8, [X0+224]
	471 Compare W8, 0
	472 JumpIfNotEqual {475}
	473 Call 0x1C17DFC
	474 Move X0, [X25]
	475 Move X8, [X0+184]
	476 Move X8, [X8]
	477 Move [X24+1104], X8
	478 Move X0, X31
	479 Call Event.get_current
	480 Compare X0, 0
	481 JumpIfEqual {830}
	482 Move X1, X31
	483 Call Event.get_type, X0
	484 Add X8, X31, 516
	485 Add X9, X31, 500
	486 Add X10, X31, 496
	487 Add X11, X31, 492
	488 Add X12, X31, 488
	489 Move [X31+128], X31
	490 Move [X31+136], X8
	491 Add X8, X31, 460
	492 Move [X31+144], X9
	493 Move [X31+152], X10
	494 Add X9, X31, 456
	495 Add X13, X31, 520
	496 Add X14, X31, 484
	497 Add X15, X31, 420
	498 Add X16, X31, 480
	499 Move [X31+160], X11
	500 Move [X31+168], X12
	501 Add X10, X31, 452
	502 Add X11, X31, 448
	503 Move [X31+256], X8
	504 Move [X31+264], X9
	505 Add X8, X31, 376
	506 Add X9, X31, 436
	507 Move [X31+512], W0
	508 Add X17, X31, 472
	509 Add X0, X31, 408
	510 Add X1, X31, 400
	511 Add X2, X31, 392
	512 Add X3, X31, 384
	513 Add X4, X31, 464
	514 Move [X31+176], X13
	515 Move [X31+184], X14
	516 Move [X31+192], X15
	517 Move [X31+200], X16
	518 Add X12, X31, 380
	519 Add X13, X31, 444
	520 Add X14, X31, 440
	521 Add X15, X31, 512
	522 Move [X31+272], X10
	523 Move [X31+280], X11
	524 Add X10, X31, 372
	525 Add X11, X31, 432
	526 Move [X31+320], X8
	527 Move [X31+328], X9
	528 Add X8, X31, 428
	529 Add X9, X31, 424
	530 Move [X31+208], X17
	531 Move [X31+216], X0
	532 Move [X31+224], X1
	533 Move [X31+232], X2
	534 Move [X31+240], X3
	535 Move [X31+248], X4
	536 Move [X31+288], X12
	537 Move [X31+296], X13
	538 Move [X31+304], X14
	539 Move [X31+312], X15
	540 Move [X31+336], X10
	541 Move [X31+344], X11
	542 Move [X31+352], X8
	543 Move [X31+360], X9
	544 Move V1, [X23+32]
	545 Move V0, [X23+48]
	546 Move V3, [X23]
	547 Move V2, [X23+16]
	548 Move [X31+120], W31
	549 Move [X31+80], V1
	550 Move [X31+88], V0
	551 Move [X31+48], V3
	552 Move [X31+56], V2
	553 Add X0, X31, 120
	554 Add X1, X31, 48
	555 Move V0, V11
	556 Move V1, V9
	557 Move V2, V8
	558 Move V3, V10
	559 Move X2, X31
	560 Call ParentClipScope..ctor, X0, X1, X2
	561 Move X23, 0x3AD000
	562 Move W8, [X31+120]
	563 Move X23, [X23+192]
	564 Move [X31+504], W8
	565 Move X0, [X23]
	566 Move W8, [X0+224]
	567 Compare W8, 0
	568 JumpIfNotEqual {571}
	569 Call 0x1C17DFC
	570 Move X0, [X23]
	571 Move X8, [X0+184]
	572 Move X23, [X8+24]
	573 Move X0, X23
	574 Move X1, X31
	575 Move X2, X31
	576 Call IntPtr.op_Inequality, X0, X1
	577 Move TEMP, X0
	578 And TEMP, TEMP, 1
	579 Compare TEMP, 1
	580 JumpIfNotEqual {584}
	581 Move X0, X23
	582 Move X1, X31
	583 Call ProfilerUnsafeUtility.BeginSample, X0
	584 Move X0, [X22+64]
	585 Move X1, [X22+40]
	586 Move X8, [X22+24]
	587 NotImplemented "Instruction BLR not yet implemented."
	588 Move X22, X31
	589 Move W24, 29
	590 Move X0, X23
	591 Move X1, X31
	592 Move X2, X31
	593 Call IntPtr.op_Inequality, X0, X1
	594 Move TEMP, X0
	595 And TEMP, TEMP, 1
	596 Compare TEMP, 1
	597 JumpIfNotEqual {601}
	598 Move X0, X23
	599 Move X1, X31
	600 Call ProfilerUnsafeUtility.EndSample, X0
	601 Compare X22, 0
	602 JumpIfNotEqual {833}
	603 NotImplemented "Instruction CMP not yet implemented."
	604 Compare W24, 0
	605 JumpIfNotEqual {608}
	606 Move X23, X31
	607 Move W24, 30
	608 Move X23, X31
	609 Add X0, X31, 504
	610 Move X1, X31
	611 Call ParentClipScope.Dispose, X0
	612 Compare X23, 0
	613 JumpIfNotEqual {831}
	614 Compare W24, 0
	615 JumpIfEqual {617}
	616 NotImplemented "Instruction CMP not yet implemented."
	617 Add X0, X31, 128
	618 Call 0x1C125C4
	619 Move X0, [X26]
	620 Move W8, [X0+224]
	621 Compare W8, 0
	622 JumpIfNotEqual {624}
	623 Call 0x1C17DFC
	624 Move X0, X19
	625 Move V0, V15
	626 Move V1, V14
	627 Move V2, V13
	628 Move V3, V12
	629 Move X1, X31
	630 Call UIElementsUtility.EndContainerGUI, X0, X1
	631 Move X0, [X31+520]
	632 Call IMGUIContainer.RestoreGlobals, X0
	633 Compare X19, 0
	634 JumpIfEqual {830}
	635 Move X0, X19
	636 Move X1, X31
	637 Call Event.get_type, X0
	638 NotImplemented "Instruction CMP not yet implemented."
	639 Move X0, [X31+520]
	640 Call IMGUIContainer.get_layoutMeasuredWidth, X0
	641 Move X22, 0x622000
	642 Move W8, [X22+1450]
	643 Move V12, V0
	644 Compare W8, 0
	645 JumpIfNotEqual {651}
	646 Move X0, 0x343000
	647 Move X0, [X0+1208]
	648 Call 0x1C17CF4
	649 Move W8, 1
	650 Move [X22+1450], W8
	651 Move X24, 0x343000
	652 Move X24, [X24+1208]
	653 Move V3, [X31+28]
	654 Move X9, -53268480
	655 Move V13, [X9+576]
	656 Move X8, [X24]
	657 NotImplemented "Instruction FABS not yet implemented."
	658 NotImplemented "Instruction FABS not yet implemented."
	659 NotImplemented "Instruction FCMP not yet implemented."
	660 Move X8, [X8+184]
	661 NotImplemented "Instruction FCSEL not yet implemented."
	662 Move S1, 8
	663 Multiply S0, S0, S13
	664 Move V2, [X8]
	665 Multiply S1, S2, S1
	666 NotImplemented "Instruction FCMP not yet implemented."
	667 NotImplemented "Instruction FCSEL not yet implemented."
	668 NotImplemented "Instruction FABD not yet implemented."
	669 NotImplemented "Instruction FCMP not yet implemented."
	670 Move X0, [X31+520]
	671 Call IMGUIContainer.get_layoutMeasuredHeight, X0
	672 Move W8, [X22+1450]
	673 Move V12, V0
	674 Compare W8, 0
	675 JumpIfNotEqual {681}
	676 Move X0, 0x343000
	677 Move X0, [X0+1208]
	678 Call 0x1C17CF4
	679 Move W8, 1
	680 Move [X22+1450], W8
	681 Move X8, [X24]
	682 Move V4, [X31+24]
	683 NotImplemented "Instruction FABS not yet implemented."
	684 Move S2, 8
	685 Move X8, [X8+184]
	686 NotImplemented "Instruction FABS not yet implemented."
	687 NotImplemented "Instruction FCMP not yet implemented."
	688 NotImplemented "Instruction FCSEL not yet implemented."
	689 Move V3, [X8]
	690 Multiply S0, S0, S13
	691 Multiply S1, S3, S2
	692 NotImplemented "Instruction FCMP not yet implemented."
	693 NotImplemented "Instruction FCSEL not yet implemented."
	694 NotImplemented "Instruction FABD not yet implemented."
	695 NotImplemented "Instruction FCMP not yet implemented."
	696 Move TEMP, X21
	697 And TEMP, TEMP, 1
	698 Compare TEMP, 1
	699 JumpIfNotEqual {742}
	700 Move X0, X31
	701 Call Rect.get_zero
	702 NotImplemented "Instruction FCMP not yet implemented."
	703 Move X0, [X31+520]
	704 NotImplemented "Instruction FCMP not yet implemented."
	705 NotImplemented "Instruction FCMP not yet implemented."
	706 NotImplemented "Instruction FCMP not yet implemented."
	707 Move X1, X31
	708 Call VisualElement.get_schedule, X0
	709 Move X8, 0x33D000
	710 Move X8, [X8+3696]
	711 Move X21, X0
	712 Move X8, [X8]
	713 Move X0, X8
	714 Call 0x1C17F10
	715 Move X8, 0x3B1000
	716 Move X1, [X31+520]
	717 Move X8, [X8+3752]
	718 Move X3, X31
	719 Move X22, X0
	720 Move X2, [X8]
	721 Call Action..ctor, X0, X1, X2
	722 Compare X21, 0
	723 JumpIfEqual {830}
	724 Move X10, 0x364000
	725 Move X8, [X21]
	726 Move X10, [X10+1664]
	727 NotImplemented "Instruction LDRH not yet implemented."
	728 Move X1, [X10]
	729 Compare X9, 0
	730 JumpIfEqual {737}
	731 Move X10, [X8+176]
	732 Add X10, X10, 8
	733 NotImplemented "Instruction LDUR not yet implemented."
	734 NotImplemented "Instruction CMP not yet implemented."
	735 Subtract X9, X9, 1
	736 Add X10, X10, 16
	737 Move W2, 1
	738 Move X0, X21
	739 Call 0x1C5D788
	740 Add X0, X31, 128
	741 Call 0x1C125C4
	742 Move X0, [X31+520]
	743 Move W1, 8
	744 Move X2, X31
	745 Call VisualElement.IncrementVersion, X0, X1
	746 Move TEMP, X23
	747 And TEMP, TEMP, 1
	748 Compare TEMP, 1
	749 JumpIfEqual {797}
	750 Move X0, X19
	751 Move X1, X31
	752 Call Event.get_type, X0
	753 NotImplemented "Instruction CMP not yet implemented."
	754 Move X0, X19
	755 Move X1, X31
	756 Call Event.get_type, X0
	757 NotImplemented "Instruction CMP not yet implemented."
	758 Move X0, X31
	759 Call GUIClip.Internal_GetCount
	760 NotImplemented "Instruction CMP not yet implemented."
	761 Move X8, 0x33C000
	762 Move X8, [X8+2600]
	763 Move X0, [X8]
	764 Move W8, [X0+224]
	765 Compare W8, 0
	766 JumpIfNotEqual {768}
	767 Call 0x1C17DFC
	768 Move X8, 0x3B1000
	769 Move X8, [X8+3760]
	770 Move X8, 0x33C000
	771 Move X8, [X8+2600]
	772 Move X0, [X8]
	773 Move W8, [X0+224]
	774 Compare W8, 0
	775 JumpIfNotEqual {777}
	776 Call 0x1C17DFC
	777 Move X8, 0x3B1000
	778 Move X8, [X8+3768]
	779 Move X0, [X8]
	780 Move X1, X31
	781 Call Debug.LogError, X0
	782 Move W9, [X10]
	783 Add W9, W9, 1
	784 Add X8, X8, W9
	785 Add X0, X8, 312
	786 Move X8, [X0]
	787 Move X2, [X0+8]
	788 Move X0, X21
	789 Move X1, X22
	790 NotImplemented "Instruction BLR not yet implemented."
	791 Move TEMP, X23
	792 And TEMP, TEMP, 1
	793 Compare TEMP, 1
	794 JumpIfEqual {797}
	795 Move X0, X31
	796 Call GUIClip.Internal_Pop
	797 Move X0, X31
	798 Call GUIClip.Internal_GetCount
	799 NotImplemented "Instruction CMP not yet implemented."
	800 Move X0, X19
	801 Move X1, X31
	802 Call Event.get_type, X0
	803 NotImplemented "Instruction CMP not yet implemented."
	804 Move X0, [X31+520]
	805 Move W1, 2048
	806 Move X2, X31
	807 Call VisualElement.IncrementVersion, X0, X1
	808 Add X31, X31, 528
	809 Move X20, [X31+144]
	810 Move X19, [X31+152]
	811 Move X22, [X31+128]
	812 Move X21, [X31+136]
	813 Move X24, [X31+112]
	814 Move X23, [X31+120]
	815 Move X26, [X31+96]
	816 Move X25, [X31+104]
	817 Move X28, [X31+80]
	818 Move X27, [X31+88]
	819 Move X29, [X31+64]
	820 Move X30, [X31+72]
	821 Move D9, [X31+48]
	822 Move D8, [X31+56]
	823 Move D11, [X31+32]
	824 Move D10, [X31+40]
	825 Move D13, [X31+16]
	826 Move D12, [X31+24]
	827 Move D15, [X31+160]
	828 Move D14, [X31+168]
	829 Return 
	830 Call 0x1C17F20
	831 Move X0, X23
	832 Call 0x1C17F18
	833 Move X0, X22
	834 Call 0x1C17F18
	835 NotImplemented "Instruction CMP not yet implemented."
	836 Move X22, X0
	837 Move X0, X22
	838 Call 0x3EB2AD0
	839 Move X8, [X0]
	840 Move [X31+16], X8
	841 Call 0x3EB2AE0
	842 Move X22, [X31+16]
	843 Move S13, [X31+40]
	844 Move S12, [X31+44]
	845 Move S15, [X31+32]
	846 Move S14, [X31+36]
	847 Move W24, W31
	848 Move W24, W1
	849 Move [X31+16], X31
	850 Move X0, X23
	851 Move X1, X31
	852 Move X2, X31
	853 Call IntPtr.op_Inequality, X0, X1
	854 Move TEMP, X0
	855 And TEMP, TEMP, 1
	856 Compare TEMP, 1
	857 JumpIfNotEqual {861}
	858 Move X0, X23
	859 Move X1, X31
	860 Call ProfilerUnsafeUtility.EndSample, X0
	861 Move X8, [X31+16]
	862 Compare X8, 0
	863 JumpIfEqual {874}
	864 Move X0, [X31+16]
	865 Call 0x1C17F18
	866 Move X22, X0
	867 Move W24, W1
	868 Move X22, X0
	869 Move W24, W1
	870 Move X22, X0
	871 Move W24, W1
	872 Move X24, X1
	873 Move X22, X0
	874 NotImplemented "Instruction CMP not yet implemented."
	875 Move X0, X22
	876 Call 0x3EB2AD0
	877 Move X23, [X0]
	878 Call 0x3EB2AE0
	879 Move S13, [X31+40]
	880 Move S12, [X31+44]
	881 Move S15, [X31+32]
	882 Move S14, [X31+36]
	883 Move W24, W31
	884 Move X23, X31
	885 Add X0, X31, 504
	886 Move X1, X31
	887 Call ParentClipScope.Dispose, X0
	888 Compare X23, 0
	889 JumpIfNotEqual {943}
	890 NotImplemented "Instruction CMP not yet implemented."
	891 Move X0, X22
	892 Call 0x3EB2AD0
	893 Move X22, X0
	894 Move X0, 0x33C000
	895 Move X0, [X0+2000]
	896 Call 0x1C17D08
	897 Move X8, [X22]
	898 Move X1, [X8]
	899 Call 0x1C18270
	900 Move TEMP, X0
	901 And TEMP, TEMP, 1
	902 Compare TEMP, 1
	903 JumpIfNotEqual {933}
	904 Move X22, [X22]
	905 Call 0x3EB2AE0
	906 Move W8, [X31+512]
	907 NotImplemented "Instruction CMP not yet implemented."
	908 Move X0, 0x368000
	909 Move X0, [X0+1480]
	910 Call 0x1C17D08
	911 Move W8, [X0+224]
	912 Compare W8, 0
	913 JumpIfNotEqual {915}
	914 Call 0x1C17DFC
	915 Move X0, X22
	916 Move X1, X31
	917 Call GUIUtility.IsExitGUIException, X0
	918 Move TEMP, X0
	919 And TEMP, TEMP, 1
	920 Compare TEMP, 1
	921 JumpIfNotEqual {923}
	922 Move W23, 1
	923 Move X0, 0x33C000
	924 Move X0, [X0+2600]
	925 Call 0x1C17D08
	926 Move W8, [X0+224]
	927 Compare W8, 0
	928 JumpIfNotEqual {930}
	929 Call 0x1C17DFC
	930 Move X0, X22
	931 Move X1, X31
	932 Call Debug.LogException, X0
	933 Move W0, 8
	934 Call 0x3EB2AF0
	935 Move X8, [X22]
	936 Move [X0], X8
	937 Move X1, 0xFD000
	938 Add X1, X1, 3672
	939 Move X2, X31
	940 Call 0x3EB2B00
	941 Move X0, X22
	942 Call 0x1C17F18
	943 Move X0, X23
	944 Call 0x1C17F18
	945 Move X22, X0
	946 Move W24, W1
	947 Move X22, X0
	948 Move W24, W1
	949 Move X24, X1
	950 Move X22, X0
	951 Call 0x3EB2AE0
	952 Move W8, 1
	953 NotImplemented "Instruction CMP not yet implemented."
	954 Move X0, X22
	955 Call 0x3EB2AD0
	956 Move X8, [X0]
	957 Move [X31+128], X8
	958 Call 0x3EB2AE0
	959 Move W23, W31
	960 Move S13, [X31+40]
	961 Move S12, [X31+44]
	962 Move S15, [X31+32]
	963 Move S14, [X31+36]
	964 Move X22, X0
	965 Add X0, X31, 128
	966 Call 0x1C125C4
	967 Move X0, X22
	968 Call 0x1D2D690
	969 Call 0x1991590

Method: System.Void MarkDirtyLayout()

Disassembly:
	0x03DB8F0C MOV X20, X0
	0x03DB8F10 LDR X0, [X21]
	0x03DB8F14 LDR W8, [X0 + 0xE0]
	0x03DB8F18 CBNZ W8, 0x3DB8F24
	0x03DB8F1C BL 0x1C16DFC

ISIL:
	001 Move W8, 1
	002 Move W1, 8
	003 Move X2, X31
	004 Move [X0+1006], W8
	005 Call VisualElement.IncrementVersion, X0, X1
	006 Return 

Method: System.Void ProcessEvent(UnityEngine.UIElements.EventBase evt)

Disassembly:
	0x03DB8F20 LDR X0, [X21]
	0x03DB8F24 LDR X8, [X0 + 0xB8]
	0x03DB8F28 MOV X0, X20
	0x03DB8F2C MOV X2, X31
	0x03DB8F30 LDR X1, [X8 + 0x8]
	0x03DB8F34 BL 0x321BA08
	0x03DB8F38 TBZ X0, 0x0, 0x3DB8F44
	0x03DB8F3C MOVZ W20, 0x1
	0x03DB8F40 B 0x3DB8F70
	0x03DB8F44 LDR X0, [X21]
	0x03DB8F48 LDR W8, [X0 + 0xE0]
	0x03DB8F4C CBNZ W8, 0x3DB8F58
	0x03DB8F50 BL 0x1C16DFC
	0x03DB8F54 LDR X0, [X21]
	0x03DB8F58 LDR X8, [X0 + 0xB8]
	0x03DB8F5C MOV X0, X20
	0x03DB8F60 MOV X2, X31
	0x03DB8F64 LDR X1, [X8 + 0x10]
	0x03DB8F68 BL 0x321BA08
	0x03DB8F6C MOV W20, W0
	0x03DB8F70 CBZ X19, 0x3DB8FCC
	0x03DB8F74 ADRP X8, 0x367000
	0x03DB8F78 LDR X8, [X8 + 0x5C8]
	0x03DB8F7C LDP S13, S12, [X19 + 0x78]
	0x03DB8F80 LDR X0, [X8]
	0x03DB8F84 LDR W8, [X0 + 0xE0]
	0x03DB8F88 CBNZ W8, 0x3DB8F90
	0x03DB8F8C BL 0x1C16DFC
	0x03DB8F90 AND W0, W20, 0x1
	0x03DB8F94 MOV V0.16B, V8.16B
	0x03DB8F98 MOV V1.16B, V9.16B
	0x03DB8F9C MOV V2.16B, V10.16B
	0x03DB8FA0 MOV V3.16B, V11.16B
	0x03DB8FA4 LDP X20, X19, [X31 + 0x50]
	0x03DB8FA8 LDP X22, X21, [X31 + 0x40]
	0x03DB8FAC LDR X30, [X31 + 0x30]
	0x03DB8FB0 LDP D9, D8, [X31 + 0x20]
	0x03DB8FB4 LDP D11, D10, [X31 + 0x10]
	0x03DB8FB8 MOV V4.16B, V13.16B
	0x03DB8FBC MOV V5.16B, V12.16B
	0x03DB8FC0 MOV X1, X31
	0x03DB8FC4 LDP D13, D12, [X31], #0x60
	0x03DB8FC8 B 0x3C76974
	0x03DB8FCC BL 0x1C16F20
	0x03DB8FD0 STP X30, X21, [X31 - 0x20]!
	0x03DB8FD4 STP X20, X19, [X31 + 0x10]
	0x03DB8FD8 ADRP X20, 0x630000
	0x03DB8FDC LDRB W8, [X20 + 0x5E]
	0x03DB8FE0 MOV X19, X0
	0x03DB8FE4 TBNZ X8, 0x0, 0x3DB9014
	0x03DB8FE8 ADRP X0, 0x3AA000
	0x03DB8FEC LDR X0, [X0 + 0xD88]
	0x03DB8FF0 BL 0x1C16CF4
	0x03DB8FF4 ADRP X0, 0x3AA000
	0x03DB8FF8 LDR X0, [X0 + 0xDA0]
	0x03DB8FFC BL 0x1C16CF4
	0x03DB9000 ADRP X0, 0x362000
	0x03DB9004 LDR X0, [X0 + 0x898]
	0x03DB9008 BL 0x1C16CF4
	0x03DB900C MOVZ W8, 0x1
	0x03DB9010 STRB W8, [X20 + 0x5E]
	0x03DB9014 CBZ X19, 0x3DB90F0
	0x03DB9018 LDR X8, [X19]
	0x03DB901C ADRP X20, 0x3A9000
	0x03DB9020 ADRP X21, 0x3A9000
	0x03DB9024 MOV X0, X19
	0x03DB9028 LDP X9, X1, [X8 + 0x188]
	0x03DB902C LDR X20, [X20 + 0xDA0]
	0x03DB9030 LDR X21, [X21 + 0xD88]
	0x03DB9034 BLR X9
	0x03DB9038 LDR X8, [X20]
	0x03DB903C MOV X20, X0
	0x03DB9040 LDR W9, [X8 + 0xE0]
	0x03DB9044 CBNZ W9, 0x3DB9050
	0x03DB9048 MOV X0, X8
	0x03DB904C BL 0x1C16DFC
	0x03DB9050 LDR X0, [X21]
	0x03DB9054 BL 0x2D0D5C8
	0x03DB9058 CMP X20, X0
	0x03DB905C B.NE 0x3DB90C4
	0x03DB9060 MOV X0, X19
	0x03DB9064 MOV X1, X31
	0x03DB9068 BL 0x3D9C848
	0x03DB906C MOV X20, X0
	0x03DB9070 MOV X0, X19
	0x03DB9074 MOV X1, X31
	0x03DB9078 BL 0x3D9C848
	0x03DB907C CBZ X0, 0x3DB90B8
	0x03DB9080 ADRP X8, 0x362000
	0x03DB9084 LDR X8, [X8 + 0x898]
	0x03DB9088 LDR X9, [X0]
	0x03DB908C LDR X8, [X8]
	0x03DB9090 LDRB W11, [X9 + 0x130]
	0x03DB9094 LDRB W10, [X8 + 0x130]
	0x03DB9098 CMP W11, W10
	0x03DB909C B.CC 0x3DB90B4
	0x03DB90A0 LDR X9, [X9 + 0xC8]
	0x03DB90A4 ADD X9, X9, X10, 0x3, LSL
	0x03DB90A8 LDUR X9, [X9 - 0x8]
	0x03DB90AC CMP X9, X8
	0x03DB90B0 B.EQ 0x3DB90D4
	0x03DB90B4 MOV X0, X31
	0x03DB90B8 CMP X20, X0
	0x03DB90BC CSET W0, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x631000
	006 Move W8, [X21+87]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0x3B1000
	014 Move X0, [X0+3776]
	015 Call 0x1C17CF4
	016 Move X0, 0x3AD000
	017 Move X0, [X0+168]
	018 Call 0x1C17CF4
	019 Move X0, 0x366000
	020 Move X0, [X0+1752]
	021 Call 0x1C17CF4
	022 Move X0, 0x3B1000
	023 Move X0, [X0+1760]
	024 Call 0x1C17CF4
	025 Move X0, 0x3AD000
	026 Move X0, [X0+176]
	027 Call 0x1C17CF4
	028 Move X0, 0x366000
	029 Move X0, [X0+1800]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+87], W8
	033 Compare X19, 0
	034 JumpIfEqual {122}
	035 Move X0, X19
	036 Move X1, X31
	037 Call EventBase.get_imguiEvent, X0
	038 Compare X0, 0
	039 JumpIfEqual {49}
	040 Move W2, 1
	041 Move W3, 1
	042 Move X0, X20
	043 Move X1, X19
	044 Call IMGUIContainer.SendEventToIMGUI, X0, X1, X2, X3
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {106}
	049 Move X8, [X19]
	050 Move X20, 0x3AD000
	051 Move X21, 0x3AD000
	052 Move X0, X19
	053 Move X9, [X8+392]
	054 Move X1, [X8+400]
	055 Move X20, [X20+176]
	056 Move X21, [X21+168]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X8, [X20]
	059 Move X20, X0
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X0, [X21]
	066 Call 0x2D0E5C8
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X8, [X19]
	069 Move X0, X19
	070 Move X9, [X8+392]
	071 Move X1, [X8+400]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move X8, 0x365000
	074 Move X8, [X8+1800]
	075 Move X20, X0
	076 Move X8, [X8]
	077 Move W9, [X8+224]
	078 Compare W9, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X8
	081 Call 0x1C17DFC
	082 Move X8, 0x365000
	083 Move X8, [X8+1752]
	084 Move X0, [X8]
	085 Call 0x2D0E5C8
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X8, [X19]
	088 Move X0, X19
	089 Move X9, [X8+392]
	090 Move X1, [X8+400]
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move X8, 0x3B0000
	093 Move X8, [X8+1760]
	094 Move X20, X0
	095 Move X8, [X8]
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X8, 0x3B0000
	102 Move X8, [X8+3776]
	103 Move X0, [X8]
	104 Call 0x2D0E5C8
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X0, X19
	107 Move X1, X31
	108 Call EventBase.StopPropagation, X0
	109 Move X0, X19
	110 Move X20, [X31+16]
	111 Move X19, [X31+24]
	112 Move X1, X31
	113 Move X30, [X31+32]
	114 Move X21, [X31+40]
	115 Call EventBase.PreventDefault, X0
	116 Return 
	117 Move X20, [X31+16]
	118 Move X19, [X31+24]
	119 Move X30, [X31+32]
	120 Move X21, [X31+40]
	121 Return 
	122 Call 0x1C17F20

Method: System.Void DoIMGUIRepaint()

Disassembly:
	0x03DB935C LDR X0, [X0 + 0x898]
	0x03DB9360 BL 0x1C16CF4
	0x03DB9364 MOVZ W8, 0x1
	0x03DB9368 STRB W8, [X20 + 0x70]
	0x03DB936C ADRP X20, 0x363000
	0x03DB9370 LDR X20, [X20 + 0xE50]
	0x03DB9374 CBZ X19, 0x3DB93B4
	0x03DB9378 ADRP X8, 0x362000
	0x03DB937C LDR X8, [X8 + 0x898]
	0x03DB9380 LDR X9, [X19]
	0x03DB9384 LDR X8, [X8]
	0x03DB9388 LDRB W11, [X9 + 0x130]
	0x03DB938C LDRB W10, [X8 + 0x130]
	0x03DB9390 CMP W11, W10
	0x03DB9394 B.CS 0x3DB93A0
	0x03DB9398 MOV X19, X31
	0x03DB939C B 0x3DB93B4
	0x03DB93A0 LDR X9, [X9 + 0xC8]
	0x03DB93A4 ADD X9, X9, X10, 0x3, LSL
	0x03DB93A8 LDUR X9, [X9 - 0x8]
	0x03DB93AC CMP X9, X8
	0x03DB93B0 CSEL X19, X19, X31, EQ
	0x03DB93B4 LDR X0, [X20]
	0x03DB93B8 LDR W8, [X0 + 0xE0]
	0x03DB93BC CBNZ W8, 0x3DB93C8
	0x03DB93C0 BL 0x1C16DFC
	0x03DB93C4 LDR X0, [X20]
	0x03DB93C8 LDR X8, [X0 + 0xB8]
	0x03DB93CC MOV X0, X19
	0x03DB93D0 LDP X20, X19, [X31 + 0x10]
	0x03DB93D4 LDR W1, [X8 + 0x8]
	0x03DB93D8 LDR X30, [X31], #0x20
	0x03DB93DC B 0x3DBAB50
	0x03DB93E0 STR X30, [X31 - 0x30]!
	0x03DB93E4 STP X22, X21, [X31 + 0x10]
	0x03DB93E8 STP X20, X19, [X31 + 0x20]
	0x03DB93EC ADRP X21, 0x62F000
	0x03DB93F0 LDRB W8, [X21 + 0x61]
	0x03DB93F4 MOV X20, X1
	0x03DB93F8 MOV X19, X0
	0x03DB93FC TBNZ X8, 0x0, 0x3DB948C
	0x03DB9400 ADRP X0, 0x3AF000
	0x03DB9404 LDR X0, [X0 + 0xED0]
	0x03DB9408 BL 0x1C16CF4
	0x03DB940C ADRP X0, 0x364000
	0x03DB9410 LDR X0, [X0 + 0x6D0]
	0x03DB9414 BL 0x1C16CF4
	0x03DB9418 ADRP X0, 0x3AF000
	0x03DB941C LDR X0, [X0 + 0xED8]
	0x03DB9420 BL 0x1C16CF4
	0x03DB9424 ADRP X0, 0x364000
	0x03DB9428 LDR X0, [X0 + 0x6E8]
	0x03DB942C BL 0x1C16CF4
	0x03DB9430 ADRP X0, 0x3AF000
	0x03DB9434 LDR X0, [X0 + 0x738]
	0x03DB9438 BL 0x1C16CF4
	0x03DB943C ADRP X0, 0x364000
	0x03DB9440 LDR X0, [X0 + 0x6F8]
	0x03DB9444 BL 0x1C16CF4
	0x03DB9448 ADRP X0, 0x364000
	0x03DB944C LDR X0, [X0 + 0x700]
	0x03DB9450 BL 0x1C16CF4
	0x03DB9454 ADRP X0, 0x3AF000
	0x03DB9458 LDR X0, [X0 + 0x770]
	0x03DB945C BL 0x1C16CF4
	0x03DB9460 ADRP X0, 0x3AF000
	0x03DB9464 LDR X0, [X0 + 0xEE0]
	0x03DB9468 BL 0x1C16CF4
	0x03DB946C ADRP X0, 0x3AF000
	0x03DB9470 LDR X0, [X0 + 0xEE8]
	0x03DB9474 BL 0x1C16CF4
	0x03DB9478 ADRP X0, 0x3AD000
	0x03DB947C LDR X0, [X0 + 0x968]
	0x03DB9480 BL 0x1C16CF4
	0x03DB9484 MOVZ W8, 0x1
	0x03DB9488 STRB W8, [X21 + 0x61]
	0x03DB948C CBZ X20, 0x3DB96AC
	0x03DB9490 LDR X8, [X20]
	0x03DB9494 ADRP X21, 0x364000
	0x03DB9498 ADRP X22, 0x364000
	0x03DB949C MOV X0, X20
	0x03DB94A0 LDP X9, X1, [X8 + 0x188]
	0x03DB94A4 LDR X21, [X21 + 0x6F8]
	0x03DB94A8 LDR X22, [X22 + 0x6E8]
	0x03DB94AC BLR X9
	0x03DB94B0 LDR X8, [X21]
	0x03DB94B4 MOV X21, X0
	0x03DB94B8 LDR W9, [X8 + 0xE0]
	0x03DB94BC CBNZ W9, 0x3DB94C8
	0x03DB94C0 MOV X0, X8
	0x03DB94C4 BL 0x1C16DFC
	0x03DB94C8 LDR X0, [X22]
	0x03DB94CC BL 0x2D0D5C8
	0x03DB94D0 CMP X21, X0
	0x03DB94D4 B.NE 0x3DB94FC
	0x03DB94D8 MOVZ W8, 0x1
	0x03DB94DC STRB W8, [X19 + 0x44C]
	0x03DB94E0 MOV X0, X19
	0x03DB94E4 LDP X20, X19, [X31 + 0x20]
	0x03DB94E8 LDP X22, X21, [X31 + 0x10]
	0x03DB94EC MOVZ W1, 0x800
	0x03DB94F0 MOV X2, X31
	0x03DB94F4 LDR X30, [X31], #0x30
	0x03DB94F8 B 0x3DE5048
	0x03DB94FC LDR X8, [X20]
	0x03DB9500 MOV X0, X20
	0x03DB9504 LDP X9, X1, [X8 + 0x188]
	0x03DB9508 BLR X9
	0x03DB950C ADRP X8, 0x364000
	0x03DB9510 LDR X8, [X8 + 0x700]
	0x03DB9514 MOV X21, X0
	0x03DB9518 LDR X8, [X8]
	0x03DB951C LDR W9, [X8 + 0xE0]
	0x03DB9520 CBNZ W9, 0x3DB952C
	0x03DB9524 MOV X0, X8
	0x03DB9528 BL 0x1C16DFC
	0x03DB952C ADRP X8, 0x364000
	0x03DB9530 LDR X8, [X8 + 0x6D0]
	0x03DB9534 LDR X0, [X8]
	0x03DB9538 BL 0x2D0D5C8
	0x03DB953C CMP X21, X0
	0x03DB9540 B.NE 0x3DB9594
	0x03DB9544 ADRP X8, 0x3AD000
	0x03DB9548 LDR X8, [X8 + 0x968]
	0x03DB954C LDR X9, [X20]
	0x03DB9550 LDR X8, [X8]
	0x03DB9554 LDRB W11, [X9 + 0x130]
	0x03DB9558 LDRB W10, [X8 + 0x130]
	0x03DB955C CMP W11, W10
	0x03DB9560 B.CC 0x3DB96BC
	0x03DB9564 LDR X9, [X9 + 0xC8]
	0x03DB9568 ADD X9, X9, X10, 0x3, LSL
	0x03DB956C LDUR X9, [X9 - 0x8]
	0x03DB9570 CMP X9, X8
	0x03DB9574 B.NE 0x3DB96BC
	0x03DB9578 MOVZ W8, 0x1
	0x03DB957C STRB W8, [X19 + 0x44D]
	0x03DB9580 LDR X8, [X20 + 0x90]
	0x03DB9584 STR X8, [X19 + 0x450]
	0x03DB9588 LDRB W8, [X20 + 0xA0]
	0x03DB958C STRB W8, [X19 + 0x3ED]
	0x03DB9590 B 0x3DB96AC
	0x03DB9594 LDR X8, [X20]
	0x03DB9598 MOV X0, X20
	0x03DB959C LDP X9, X1, [X8 + 0x188]
	0x03DB95A0 BLR X9
	0x03DB95A4 ADRP X8, 0x3AF000
	0x03DB95A8 LDR X8, [X8 + 0x770]
	0x03DB95AC MOV X21, X0
	0x03DB95B0 LDR X8, [X8]
	0x03DB95B4 LDR W9, [X8 + 0xE0]
	0x03DB95B8 CBNZ W9, 0x3DB95C4
	0x03DB95BC MOV X0, X8
	0x03DB95C0 BL 0x1C16DFC
	0x03DB95C4 ADRP X8, 0x3AF000
	0x03DB95C8 LDR X8, [X8 + 0xED8]
	0x03DB95CC LDR X0, [X8]
	0x03DB95D0 BL 0x2D0D5C8
	0x03DB95D4 CMP X21, X0
	0x03DB95D8 B.NE 0x3DB961C
	0x03DB95DC LDR X19, [X19 + 0x3A0]
	0x03DB95E0 CBZ X19, 0x3DB96AC
	0x03DB95E4 LDR X8, [X19]
	0x03DB95E8 MOV X0, X19
	0x03DB95EC LDR X9, [X8 + 0x258]
	0x03DB95F0 LDR X1, [X8 + 0x260]
	0x03DB95F4 BLR X9
	0x03DB95F8 LDR X8, [X19]
	0x03DB95FC SUB W1, W0, 0x1
	0x03DB9600 MOV X0, X19
	0x03DB9604 LDP X20, X19, [X31 + 0x20]
	0x03DB9608 LDR X3, [X8 + 0x268]
	0x03DB960C LDR X2, [X8 + 0x270]
	0x03DB9610 LDP X22, X21, [X31 + 0x10]
	0x03DB9614 LDR X30, [X31], #0x30
	0x03DB9618 BR X3
	0x03DB961C LDR X8, [X20]
	0x03DB9620 MOV X0, X20
	0x03DB9624 LDP X9, X1, [X8 + 0x188]
	0x03DB9628 BLR X9
	0x03DB962C ADRP X8, 0x3AF000
	0x03DB9630 LDR X8, [X8 + 0x738]
	0x03DB9634 MOV X20, X0
	0x03DB9638 LDR X8, [X8]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X29
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Subtract X31, X31, 576
	011 Move X21, 0x630000
	012 Move X19, 0x3AC000
	013 Move W8, [X21+88]
	014 Move X19, [X19+192]
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x3AC000
	021 Move X0, [X0+192]
	022 Call 0x1C17CF4
	023 Move X0, 0x363000
	024 Move X0, [X0+2200]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+88], W8
	028 Move X0, [X19]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X19]
	034 Move X8, [X0+184]
	035 Move X1, X31
	036 Move X2, X31
	037 Move X19, [X8+32]
	038 Move X0, X19
	039 Call IntPtr.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {47}
	044 Move X0, X19
	045 Move X1, X31
	046 Call ProfilerUnsafeUtility.BeginSample, X0
	047 Move X0, [X20+928]
	048 Compare X0, 0
	049 JumpIfEqual {203}
	050 Move X8, [X0]
	051 Move X1, [X8+848]
	052 Move X9, [X8+840]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Compare X0, 0
	055 JumpIfEqual {206}
	056 Move V1, [X0+48]
	057 Move V0, [X0+64]
	058 Move V3, [X0+16]
	059 Move V2, [X0+32]
	060 Move [X31+544], V1
	061 Move [X31+552], V0
	062 Move [X31+512], V3
	063 Move [X31+520], V2
	064 Move X0, X20
	065 Move X1, X31
	066 Call VisualElement.get_worldClip, X0
	067 Move X8, 0x363000
	068 Move X8, [X8+2200]
	069 Move V8, V0
	070 Move V9, V1
	071 Move V10, V2
	072 Move V11, V3
	073 Move V0, [X31+512]
	074 Move V1, [X31+528]
	075 Move V2, [X31+544]
	076 Move V3, [X31+560]
	077 Move X0, [X8]
	078 Move [X31+448], V0
	079 Move [X31+456], V1
	080 Move [X31+480], V2
	081 Move [X31+488], V3
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move V0, [X31+448]
	087 Move V1, [X31+464]
	088 Move V2, [X31+480]
	089 Move V3, [X31+496]
	090 Move [X31+384], V0
	091 Move [X31+392], V1
	092 Move [X31+416], V2
	093 Move [X31+424], V3
	094 Add X0, X31, 384
	095 Move V0, V8
	096 Move V1, V9
	097 Move V2, V10
	098 Move V3, V11
	099 Move X1, X31
	100 Call VisualElement.ComputeAAAlignedBound, X0, X1
	101 Move [X20+1016], S0
	102 Move [X20+1020], S1
	103 Move [X20+1024], S2
	104 Move [X20+1028], S3
	105 Move V0, [X31+512]
	106 Move V1, [X31+528]
	107 Move V2, [X31+544]
	108 Move V3, [X31+560]
	109 Move [X31+320], V0
	110 Move [X31+328], V1
	111 Move [X31+352], V2
	112 Move [X31+360], V3
	113 Add X8, X31, 256
	114 Move X0, X20
	115 Move X1, X31
	116 Call VisualElement.get_worldTransform, X0
	117 Move V0, [X31+256]
	118 Move V1, [X31+272]
	119 Move V2, [X31+288]
	120 Move V3, [X31+304]
	121 Move [X31+64], V0
	122 Move [X31+72], V1
	123 Move V0, [X31+320]
	124 Move V1, [X31+336]
	125 Move [X31+96], V2
	126 Move [X31+104], V3
	127 Move V2, [X31+352]
	128 Move V3, [X31+368]
	129 Move [X31+128], V0
	130 Move [X31+136], V1
	131 Move [X31+160], V2
	132 Move [X31+168], V3
	133 Add X8, X31, 192
	134 Add X0, X31, 128
	135 Add X1, X31, 64
	136 Move X2, X31
	137 Call Matrix4x4.op_Multiply, X0, X1
	138 Move V0, [X31+192]
	139 Move V1, [X31+208]
	140 Move V2, [X31+224]
	141 Move V3, [X31+240]
	142 Add X21, X20, 1032
	143 Move [X31+256], V0
	144 Move [X31+264], V1
	145 Move [X31+288], V2
	146 Move [X31+296], V3
	147 Move [X21+32], V2
	148 Move [X21+40], V3
	149 Move [X21], V0
	150 Move [X21+8], V1
	151 Move X0, [X20+928]
	152 Compare X0, 0
	153 JumpIfEqual {207}
	154 Move X8, [X0]
	155 Move X1, [X8+848]
	156 Move X9, [X8+840]
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Compare X0, 0
	159 JumpIfEqual {208}
	160 Move V0, [X21+32]
	161 Move V1, [X21+48]
	162 Move V2, [X21]
	163 Move V3, [X21+16]
	164 Move X1, [X0+104]
	165 Move [X31+32], V0
	166 Move [X31+40], V1
	167 Move [X31], V2
	168 Move [X31+8], V3
	169 Move V0, [X20+1016]
	170 Move V1, [X20+1020]
	171 Move V2, [X20+1024]
	172 Move V3, [X20+1028]
	173 Move X3, [X20+968]
	174 Add X2, X31, 0
	175 Move W4, 1
	176 Move X0, X20
	177 Call IMGUIContainer.HandleIMGUIEvent, X0, X1, X2, X3, X4, X5
	178 Move X20, X31
	179 Move X0, X19
	180 Move X1, X31
	181 Move X2, X31
	182 Call IntPtr.op_Inequality, X0, X1
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {190}
	187 Move X0, X19
	188 Move X1, X31
	189 Call ProfilerUnsafeUtility.EndSample, X0
	190 Compare X20, 0
	191 JumpIfNotEqual {204}
	192 Add X31, X31, 576
	193 Move X20, [X31+64]
	194 Move X19, [X31+72]
	195 Move X30, [X31+48]
	196 Move X21, [X31+56]
	197 Move X29, [X31+32]
	198 Move D9, [X31+16]
	199 Move D8, [X31+24]
	200 Move D11, [X31+80]
	201 Move D10, [X31+88]
	202 Return 
	203 Call 0x1C17F20
	204 Move X0, X20
	205 Call 0x1C17F18
	206 Call 0x1C17F20
	207 Call 0x1C17F20
	208 Call 0x1C17F20
	209 Move X21, X0
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, X21
	212 Call 0x3EB2AD0
	213 Move X20, [X0]
	214 Call 0x3EB2AE0
	215 Move X20, X31
	216 Move X21, X0
	217 Move X0, X19
	218 Move X1, X31
	219 Move X2, X31
	220 Call IntPtr.op_Inequality, X0, X1
	221 Move TEMP, X0
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfNotEqual {228}
	225 Move X0, X19
	226 Move X1, X31
	227 Call ProfilerUnsafeUtility.EndSample, X0
	228 Compare X20, 0
	229 JumpIfNotEqual {232}
	230 Move X0, X21
	231 Call 0x1D2D690
	232 Move X0, X20
	233 Call 0x1C17F18
	234 Call 0x1991590

Method: System.Boolean SendEventToIMGUI(UnityEngine.UIElements.EventBase evt, System.Boolean canAffectFocus = True, System.Boolean verifyBounds = True)

Disassembly:
	0x03DB90C0 B 0x3DB90C8
	0x03DB90C4 MOV W0, W31
	0x03DB90C8 LDP X20, X19, [X31 + 0x10]
	0x03DB90CC LDP X30, X21, [X31], #0x20
	0x03DB90D0 RET
	0x03DB90D4 LDR X0, [X0 + 0x3A0]
	0x03DB90D8 CBZ X0, 0x3DB90F0
	0x03DB90DC LDR X8, [X0]
	0x03DB90E0 LDR X9, [X8 + 0x298]
	0x03DB90E4 LDR X1, [X8 + 0x2A0]
	0x03DB90E8 BLR X9
	0x03DB90EC B 0x3DB90B8
	0x03DB90F0 BL 0x1C16F20
	0x03DB90F4 STR X30, [X31 - 0x10]!
	0x03DB90F8 LDR X8, [X0 + 0x10]
	0x03DB90FC CBZ X8, 0x3DB911C
	0x03DB9100 LDR W9, [X8 + 0x18]
	0x03DB9104 CMP W9, W1
	0x03DB9108 B.LS 0x3DB9120
	0x03DB910C ADD X8, X8, W1, 0x3, SXTW
	0x03DB9110 LDR X0, [X8 + 0x20]
	0x03DB9114 LDR X30, [X31], #0x10
	0x03DB9118 RET
	0x03DB911C BL 0x1C16F20
	0x03DB9120 BL 0x1C16F28
	0x03DB9124 STR X30, [X31 - 0x10]!
	0x03DB9128 LDR V2, [X0 + 0x3E4]
	0x03DB912C FCMP S2, 0x0
	0x03DB9130 B.EQ 0x3DB914C
	0x03DB9134 LDR V3, [X0 + 0x3E8]
	0x03DB9138 FCMP S3, 0x0
	0x03DB913C B.EQ 0x3DB914C
	0x03DB9140 LDR V0, [X0 + 0x3DC]
	0x03DB9144 LDR V1, [X0 + 0x3E0]
	0x03DB9148 B 0x3DB9154
	0x03DB914C MOV X1, X31
	0x03DB9150 BL 0x3DEDC10
	0x03DB9154 LDR X30, [X31], #0x10
	0x03DB9158 RET
	0x03DB915C SUB X31, X31, 0x80
	0x03DB9160 STR X30, [X31 + 0x40]
	0x03DB9164 STP X24, X23, [X31 + 0x50]
	0x03DB9168 STP X22, X21, [X31 + 0x60]
	0x03DB916C STP X20, X19, [X31 + 0x70]
	0x03DB9170 ADRP X24, 0x62F000
	0x03DB9174 ADRP X23, 0x3AB000
	0x03DB9178 LDRB W8, [X24 + 0x5F]
	0x03DB917C LDR X23, [X23 + 0xC0]
	0x03DB9180 MOV W22, W3
	0x03DB9184 MOV X19, X2
	0x03DB9188 MOV X20, X1
	0x03DB918C MOV X21, X0
	0x03DB9190 TBNZ X8, 0x0, 0x3DB91A8
	0x03DB9194 ADRP X0, 0x3AB000
	0x03DB9198 LDR X0, [X0 + 0xC0]
	0x03DB919C BL 0x1C16CF4
	0x03DB91A0 MOVZ W8, 0x1
	0x03DB91A4 STRB W8, [X24 + 0x5F]
	0x03DB91A8 LDR X0, [X23]
	0x03DB91AC ADD X23, X21, 0x408
	0x03DB91B0 LDR W8, [X0 + 0xE0]
	0x03DB91B4 CBNZ W8, 0x3DB91BC
	0x03DB91B8 BL 0x1C16DFC
	0x03DB91BC ADD X3, X21, 0x3F8
	0x03DB91C0 MOV X0, X21
	0x03DB91C4 MOV X1, X20
	0x03DB91C8 MOV X2, X23
	0x03DB91CC BL 0x3DB9224
	0x03DB91D0 LDP V1, V0, [X23 + 0x20]
	0x03DB91D4 LDP V3, V2, [X23]
	0x03DB91D8 AND W4, W22, 0x1
	0x03DB91DC ADD X2, X31, 0x0
	0x03DB91E0 STP V1, V0, [X31 + 0x20]
	0x03DB91E4 STP V3, V2, [X31]
	0x03DB91E8 LDR V0, [X21 + 0x3F8]
	0x03DB91EC LDR V1, [X21 + 0x3FC]
	0x03DB91F0 LDR V2, [X21 + 0x400]
	0x03DB91F4 LDR V3, [X21 + 0x404]
	0x03DB91F8 MOV X0, X21
	0x03DB91FC MOV X1, X20
	0x03DB9200 MOV X3, X19
	0x03DB9204 BL 0x3DB863C
	0x03DB9208 LDP X20, X19, [X31 + 0x70]
	0x03DB920C LDP X22, X21, [X31 + 0x60]
	0x03DB9210 LDP X24, X23, [X31 + 0x50]
	0x03DB9214 LDR X30, [X31 + 0x40]
	0x03DB9218 AND W0, W0, 0x1
	0x03DB921C ADD X31, X31, 0x80
	0x03DB9220 RET
	0x03DB9224 SUB X31, X31, 0x170
	0x03DB9228 STP X29, X30, [X31 + 0x140]
	0x03DB922C STP X22, X21, [X31 + 0x150]
	0x03DB9230 STP X20, X19, [X31 + 0x160]
	0x03DB9234 CBZ X0, 0x3DB9330
	0x03DB9238 MOV X22, X3
	0x03DB923C MOV X19, X2
	0x03DB9240 MOV X21, X1
	0x03DB9244 MOV X20, X0
	0x03DB9248 BL 0x3DB9124
	0x03DB924C ADD X8, X31, 0xC0
	0x03DB9250 MOV X0, X20
	0x03DB9254 MOV X1, X31
	0x03DB9258 STP S0, S1, [X22]
	0x03DB925C STP S2, S3, [X22 + 0x8]
	0x03DB9260 BL 0x3DEDD74
	0x03DB9264 LDP V1, V0, [X31 + 0xE0]
	0x03DB9268 LDP V3, V2, [X31 + 0xC0]
	0x03DB926C STP V1, V0, [X31 + 0x120]
	0x03DB9270 STP V3, V2, [X31 + 0x100]
	0x03DB9274 STP V1, V0, [X19 + 0x20]
	0x03DB9278 STP V3, V2, [X19]
	0x03DB927C CBZ X21, 0x3DB931C
	0x03DB9280 MOV X0, X21
	0x03DB9284 MOV X1, X31
	0x03DB9288 BL 0x3C62C04
	0x03DB928C CMP W0, 0x7
	0x03DB9290 B.NE 0x3DB931C
	0x03DB9294 LDR X0, [X20 + 0x3A0]
	0x03DB9298 CBZ X0, 0x3DB931C
	0x03DB929C LDR X8, [X0]
	0x03DB92A0 LDR X9, [X8 + 0x348]
	0x03DB92A4 LDR X1, [X8 + 0x350]
	0x03DB92A8 BLR X9
	0x03DB92AC CBZ X0, 0x3DB9330
	0x03DB92B0 LDP V1, V0, [X0 + 0x30]
	0x03DB92B4 LDP V3, V2, [X0 + 0x10]
	0x03DB92B8 ADD X8, X31, 0xC0
	0x03DB92BC MOV X0, X20
	0x03DB92C0 MOV X1, X31
	0x03DB92C4 STP V1, V0, [X31 + 0x120]
	0x03DB92C8 STP V3, V2, [X31 + 0x100]
	0x03DB92CC BL 0x3DEDD74
	0x03DB92D0 LDP V0, V1, [X31 + 0xC0]
	0x03DB92D4 LDP V2, V3, [X31 + 0xE0]
	0x03DB92D8 ADD X8, X31, 0x80
	0x03DB92DC ADD X0, X31, 0x40
	0x03DB92E0 STP V0, V1, [X31]
	0x03DB92E4 LDP V0, V1, [X31 + 0x100]
	0x03DB92E8 STP V2, V3, [X31 + 0x20]
	0x03DB92EC LDP V2, V3, [X31 + 0x120]
	0x03DB92F0 ADD X1, X31, 0x0
	0x03DB92F4 MOV X2, X31
	0x03DB92F8 STP V0, V1, [X31 + 0x40]
	0x03DB92FC STP V2, V3, [X31 + 0x60]
	0x03DB9300 BL 0x3C27F74
	0x03DB9304 LDP V1, V0, [X31 + 0xA0]
	0x03DB9308 LDP V3, V2, [X31 + 0x80]
	0x03DB930C STP V1, V0, [X31 + 0xE0]
	0x03DB9310 STP V3, V2, [X31 + 0xC0]
	0x03DB9314 STP V1, V0, [X19 + 0x20]
	0x03DB9318 STP V3, V2, [X19]
	0x03DB931C LDP X20, X19, [X31 + 0x160]
	0x03DB9320 LDP X22, X21, [X31 + 0x150]
	0x03DB9324 LDP X29, X30, [X31 + 0x140]
	0x03DB9328 ADD X31, X31, 0x170
	0x03DB932C RET
	0x03DB9330 BL 0x1C16F20
	0x03DB9334 STR X30, [X31 - 0x20]!
	0x03DB9338 STP X20, X19, [X31 + 0x10]
	0x03DB933C ADRP X20, 0x62F000
	0x03DB9340 LDRB W8, [X20 + 0x70]
	0x03DB9344 MOV X19, X0
	0x03DB9348 TBNZ X8, 0x0, 0x3DB936C
	0x03DB934C ADRP X0, 0x363000
	0x03DB9350 LDR X0, [X0 + 0xE50]
	0x03DB9354 BL 0x1C16CF4
	0x03DB9358 ADRP X0, 0x362000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x630000
	009 Move X24, 0x364000
	010 Move W8, [X23+89]
	011 Move X24, [X24+3704]
	012 Move W20, W3
	013 Move W22, W2
	014 Move X19, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x364000
	021 Move X0, [X0+3704]
	022 Call 0x1C17CF4
	023 Move X0, 0x3AE000
	024 Move X0, [X0+2800]
	025 Call 0x1C17CF4
	026 Move X0, 0x3B0000
	027 Move X0, [X0+2424]
	028 Call 0x1C17CF4
	029 Move X0, 0x3B0000
	030 Move X0, [X0+2488]
	031 Call 0x1C17CF4
	032 Move X0, 0x366000
	033 Move X0, [X0+536]
	034 Call 0x1C17CF4
	035 Move X0, 0x3B0000
	036 Move X0, [X0+2168]
	037 Call 0x1C17CF4
	038 Move X0, 0x363000
	039 Move X0, [X0+2408]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X23+89], W8
	043 Move X1, [X24]
	044 Move X0, X19
	045 Call 0x1C17E00
	046 Compare X0, 0
	047 JumpIfEqual {101}
	048 Compare X19, 0
	049 JumpIfEqual {183}
	050 Move X0, X19
	051 Move X1, X31
	052 Call EventBase.get_imguiEvent, X0
	053 Compare X0, 0
	054 JumpIfEqual {139}
	055 Move X0, X19
	056 Move X1, X31
	057 Call EventBase.get_imguiEvent, X0
	058 Compare X0, 0
	059 JumpIfEqual {183}
	060 Move X1, X31
	061 Call Event.get_isDirectManipulationDevice, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {139}
	066 Move X0, X19
	067 Move X1, X31
	068 Call EventBase.get_imguiEvent, X0
	069 Compare X0, 0
	070 JumpIfEqual {183}
	071 Move X1, X31
	072 Call Event.get_rawType, X0
	073 Move X8, 0x3AE000
	074 Move X8, [X8+2800]
	075 Move W23, W0
	076 Move X9, [X8]
	077 Move X8, [X19]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X9, 0x363000
	080 Move X9, [X9+2408]
	081 Move X9, [X9]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X9, 0x366000
	084 Move X9, [X9+536]
	085 Move X9, [X9]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, X19
	088 Move X1, X31
	089 Call EventBase.get_imguiEvent, X0
	090 Compare X0, 0
	091 JumpIfEqual {183}
	092 Move X1, X31
	093 Call Event.get_rawType, X0
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X0, X19
	096 Move X1, X31
	097 Call EventBase.get_imguiEvent, X0
	098 Compare X0, 0
	099 JumpIfEqual {183}
	100 Move W1, 32
	101 And W2, W22, 1
	102 And W3, W20, 1
	103 Move X0, X21
	104 Move X1, X19
	105 Move X20, [X31+48]
	106 Move X19, [X31+56]
	107 Move X22, [X31+32]
	108 Move X21, [X31+40]
	109 Move X24, [X31+16]
	110 Move X23, [X31+24]
	111 Move X30, [X31+64]
	112 Call IMGUIContainer.SendEventToIMGUIRaw, X0, X1, X2, X3
	113 Return X0
	114 Move X0, X19
	115 Move X1, X31
	116 Call EventBase.get_imguiEvent, X0
	117 Compare X0, 0
	118 JumpIfEqual {183}
	119 Move W1, 30
	120 Move X0, X19
	121 Move X1, X31
	122 Call EventBase.get_imguiEvent, X0
	123 Compare X0, 0
	124 JumpIfEqual {183}
	125 Move W1, 31
	126 Move X8, [X19]
	127 Move X9, 0x3B0000
	128 Move X9, [X9+2488]
	129 Move X9, [X9]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X9, 0x3B0000
	132 Move X9, [X9+2424]
	133 Move X9, [X9]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X9, 0x3B0000
	136 Move X9, [X9+2168]
	137 Move X9, [X9]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W20, W31
	140 Move X0, X19
	141 Move X1, X31
	142 Call EventBase.get_imguiEvent, X0
	143 Compare X0, 0
	144 JumpIfEqual {183}
	145 Move W1, 34
	146 Move X0, X19
	147 Move X1, X31
	148 Call EventBase.get_imguiEvent, X0
	149 Compare X0, 0
	150 JumpIfEqual {183}
	151 Move W1, 33
	152 Move X0, X19
	153 Move X1, X31
	154 Call EventBase.get_imguiEvent, X0
	155 Compare X0, 0
	156 JumpIfEqual {183}
	157 Move W1, 35
	158 Move X2, X31
	159 Call Event.set_type, X0, X1
	160 And W2, W22, 1
	161 And W3, W20, 1
	162 Move X0, X21
	163 Move X1, X19
	164 Call IMGUIContainer.SendEventToIMGUIRaw, X0, X1, X2, X3
	165 Move W20, W0
	166 Move X0, X19
	167 Move X1, X31
	168 Call EventBase.get_imguiEvent, X0
	169 Compare X0, 0
	170 JumpIfEqual {183}
	171 Move W1, W23
	172 Move X2, X31
	173 Call Event.set_type, X0, X1
	174 And W0, W20, 1
	175 Move X20, [X31+48]
	176 Move X19, [X31+56]
	177 Move X22, [X31+32]
	178 Move X21, [X31+40]
	179 Move X24, [X31+16]
	180 Move X23, [X31+24]
	181 Move X30, [X31+64]
	182 Return X0
	183 Call 0x1C17F20

Method: System.Boolean SendEventToIMGUIRaw(UnityEngine.UIElements.EventBase evt, System.Boolean canAffectFocus, System.Boolean verifyBounds)

Disassembly:
	0x03DB9968 ADD X2, X31, 0x0
	0x03DB996C LDR X1, [X8 + 0x30]
	0x03DB9970 STP V0, V1, [X31 + 0x20]
	0x03DB9974 STP V2, V3, [X31]
	0x03DB9978 LDR V0, [X21 + 0x3F8]
	0x03DB997C LDR V1, [X21 + 0x3FC]
	0x03DB9980 LDR V2, [X21 + 0x400]
	0x03DB9984 LDR V3, [X21 + 0x404]
	0x03DB9988 LDR X4, [X21 + 0x3C8]
	0x03DB998C MOVZ W3, 0x1
	0x03DB9990 MOVZ W5, 0x1
	0x03DB9994 MOV X0, X21
	0x03DB9998 MOV V4.16B, V10.16B
	0x03DB999C MOV V5.16B, V11.16B
	0x03DB99A0 MOV V6.16B, V12.16B
	0x03DB99A4 MOV V7.16B, V13.16B
	0x03DB99A8 BL 0x3DB7158
	0x03DB99AC MOV X0, X21
	0x03DB99B0 BL 0x3DB676C
	0x03DB99B4 MOV X0, X21
	0x03DB99B8 MOV V10.16B, V0.16B
	0x03DB99BC BL 0x3DB6794
	0x03DB99C0 MOV V11.16B, V0.16B
	0x03DB99C4 CBZ X22, 0x3DB9A04
	0x03DB99C8 MOV X0, X31
	0x03DB99CC BL 0x3C63934
	0x03DB99D0 LDR X8, [X23]
	0x03DB99D4 MOV X21, X0
	0x03DB99D8 LDR W9, [X8 + 0xE0]
	0x03DB99DC CBNZ W9, 0x3DB99E8
	0x03DB99E0 MOV X0, X8
	0x03DB99E4 BL 0x1C16DFC
	0x03DB99E8 CBZ X21, 0x3DB9A6C
	0x03DB99EC LDR X8, [X23]
	0x03DB99F0 MOV X0, X21
	0x03DB99F4 MOV X2, X31
	0x03DB99F8 LDR X8, [X8 + 0xB8]
	0x03DB99FC LDR X1, [X8 + 0x38]
	0x03DB9A00 BL 0x3C637B4
	0x03DB9A04 CMP W20, 0x1
	0x03DB9A08 B.NE 0x3DB9A14
	0x03DB9A0C MOV V10.16B, V9.16B
	0x03DB9A10 B 0x3DB9A24
	0x03DB9A14 CMP W20, 0x2
	0x03DB9A18 B.NE 0x3DB9A24
	0x03DB9A1C FCMP S10, S9
	0x03DB9A20 FCSEL S10, S10, S9, MI
	0x03DB9A24 CMP W19, 0x1
	0x03DB9A28 B.EQ 0x3DB9A44
	0x03DB9A2C CMP W19, 0x2
	0x03DB9A30 B.NE 0x3DB9A40
	0x03DB9A34 FCMP S11, S8
	0x03DB9A38 FCSEL S8, S11, S8, MI
	0x03DB9A3C B 0x3DB9A44
	0x03DB9A40 MOV V8.16B, V11.16B
	0x03DB9A44 MOV V0.16B, V10.16B
	0x03DB9A48 MOV V1.16B, V8.16B
	0x03DB9A4C LDP X20, X19, [X31 + 0x90]
	0x03DB9A50 LDP X22, X21, [X31 + 0x80]
	0x03DB9A54 LDP X30, X23, [X31 + 0x70]
	0x03DB9A58 LDP D9, D8, [X31 + 0x60]
	0x03DB9A5C LDP D11, D10, [X31 + 0x50]
	0x03DB9A60 LDP D13, D12, [X31 + 0x40]
	0x03DB9A64 ADD X31, X31, 0xA0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W2
	007 Move X21, X1
	008 Move X20, X0
	009 Move [X31+8], W31
	010 Move TEMP, X3
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {21}
	014 Move X0, X20
	015 Move X1, X21
	016 Call IMGUIContainer.VerifyBounds, X0, X1
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {51}
	021 Add X0, X31, 8
	022 Move X1, X21
	023 Move X2, X31
	024 Call EventDebuggerLogIMGUICall..ctor, X0, X1
	025 Compare X21, 0
	026 JumpIfEqual {39}
	027 Move X0, X21
	028 Move X1, X31
	029 Call EventBase.get_imguiEvent, X0
	030 Move X1, X0
	031 Move X2, [X20+968]
	032 And W3, W19, 1
	033 Move X0, X20
	034 Call IMGUIContainer.HandleIMGUIEvent, X0, X1, X2, X3
	035 Move W19, W0
	036 Add X0, X31, 8
	037 Move X1, X31
	038 Call EventDebuggerLogIMGUICall.Dispose, X0
	039 Call 0x1C17F20
	040 Move X19, X0
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, X19
	043 Call 0x3EB2AD0
	044 Move X20, [X0]
	045 Call 0x3EB2AE0
	046 Add X0, X31, 8
	047 Move X1, X31
	048 Call EventDebuggerLogIMGUICall.Dispose, X0
	049 Compare X20, 0
	050 JumpIfNotEqual {60}
	051 Move W19, W31
	052 And W0, W19, 1
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+16]
	056 Move X21, [X31+24]
	057 Add X31, X31, 48
	058 Return X0
	059 Move X20, X31
	060 Move X0, X20
	061 Call 0x1C17F18
	062 Move X19, X0
	063 Add X0, X31, 8
	064 Move X1, X31
	065 Call EventDebuggerLogIMGUICall.Dispose, X0
	066 Compare X20, 0
	067 JumpIfNotEqual {70}
	068 Move X0, X19
	069 Call 0x1D2D690
	070 Move X0, X20
	071 Call 0x1C17F18
	072 Call 0x1991590

Method: System.Boolean VerifyBounds(UnityEngine.UIElements.EventBase evt)

Disassembly:
	0x03DB9A68 RET
	0x03DB9A6C BL 0x1C16F20
	0x03DB9A70 STP X30, X21, [X31 - 0x20]!
	0x03DB9A74 STP X20, X19, [X31 + 0x10]
	0x03DB9A78 ADRP X21, 0x62F000
	0x03DB9A7C ADRP X20, 0x341000
	0x03DB9A80 LDRB W8, [X21 + 0x64]
	0x03DB9A84 LDR X20, [X20 + 0xC10]
	0x03DB9A88 MOV X19, X0
	0x03DB9A8C TBNZ X8, 0x0, 0x3DB9AA4
	0x03DB9A90 ADRP X0, 0x341000
	0x03DB9A94 LDR X0, [X0 + 0xC10]
	0x03DB9A98 BL 0x1C16CF4
	0x03DB9A9C MOVZ W8, 0x1
	0x03DB9AA0 STRB W8, [X21 + 0x64]
	0x03DB9AA4 LDR X8, [X19]
	0x03DB9AA8 MOVZ W1, 0x1
	0x03DB9AAC MOV X0, X19
	0x03DB9AB0 LDR X9, [X8 + 0x788]
	0x03DB9AB4 LDR X2, [X8 + 0x790]
	0x03DB9AB8 BLR X9
	0x03DB9ABC LDR X0, [X20]
	0x03DB9AC0 LDR W8, [X0 + 0xE0]
	0x03DB9AC4 CBNZ W8, 0x3DB9ACC
	0x03DB9AC8 BL 0x1C16DFC
	0x03DB9ACC MOV X0, X19
	0x03DB9AD0 LDP X20, X19, [X31 + 0x10]
	0x03DB9AD4 MOV X1, X31
	0x03DB9AD8 LDP X30, X21, [X31], #0x20
	0x03DB9ADC B 0x33B3E9C
	0x03DB9AE0 TBZ X1, 0x0, 0x3DB9AF4
	0x03DB9AE4 LDR X0, [X0 + 0x3D0]
	0x03DB9AE8 CBZ X0, 0x3DB9AF4
	0x03DB9AEC MOV X1, X31
	0x03DB9AF0 B 0x3C79E30
	0x03DB9AF4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x630000
	006 Move W8, [X21+90]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x3AC000
	014 Move X0, [X0+192]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+90], W8
	018 Move X0, X20
	019 Call IMGUIContainer.IsContainerCapturingTheMouse, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {37}
	024 Move X1, X19
	025 Call IMGUIContainer.IsLocalEvent, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {37}
	030 Move X0, X20
	031 Move X1, X19
	032 Call IMGUIContainer.IsEventInsideLocalWindow, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {43}
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move W0, 1
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0
	043 Move X8, 0x3AC000
	044 Move X8, [X8+192]
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call IMGUIContainer.IsDockAreaMouseUp, X0
	056 Return X0

Method: System.Boolean IsContainerCapturingTheMouse()

Disassembly:
	0x03DB9B08 STP X20, X19, [X31 + 0x10]
	0x03DB9B0C ADRP X20, 0x62F000
	0x03DB9B10 ADRP X21, 0x3AF000
	0x03DB9B14 LDRB W8, [X20 + 0x65]
	0x03DB9B18 LDR X21, [X21 + 0xEF0]
	0x03DB9B1C MOV X19, X0
	0x03DB9B20 TBNZ X8, 0x0, 0x3DB9B38
	0x03DB9B24 ADRP X0, 0x3AF000
	0x03DB9B28 LDR X0, [X0 + 0xEF0]
	0x03DB9B2C BL 0x1C16CF4
	0x03DB9B30 MOVZ W8, 0x1
	0x03DB9B34 STRB W8, [X20 + 0x65]
	0x03DB9B38 LDR X1, [X21]
	0x03DB9B3C MOV X0, X19
	0x03DB9B40 LDP X20, X19, [X31 + 0x10]
	0x03DB9B44 LDP X30, X21, [X31], #0x20
	0x03DB9B48 B 0x2736468
	0x03DB9B4C STR X30, [X31 - 0x20]!
	0x03DB9B50 STP X20, X19, [X31 + 0x10]
	0x03DB9B54 ADRP X20, 0x62F000
	0x03DB9B58 LDRB W8, [X20 + 0x66]
	0x03DB9B5C MOV X19, X0
	0x03DB9B60 TBNZ X8, 0x0, 0x3DB9B84
	0x03DB9B64 ADRP X0, 0x364000
	0x03DB9B68 LDR X0, [X0 + 0xB28]
	0x03DB9B6C BL 0x1C16CF4
	0x03DB9B70 ADRP X0, 0x364000
	0x03DB9B74 LDR X0, [X0 + 0xBF0]
	0x03DB9B78 BL 0x1C16CF4
	0x03DB9B7C MOVZ W8, 0x1
	0x03DB9B80 STRB W8, [X20 + 0x66]
	0x03DB9B84 MOV X0, X19
	0x03DB9B88 MOV X1, X31
	0x03DB9B8C BL 0x3DF8490
	0x03DB9B90 LDR X8, [X19 + 0x40]
	0x03DB9B94 CBZ X8, 0x3DB9BB8
	0x03DB9B98 STR W31, [X8 + 0x40]
	0x03DB9B9C LDR X8, [X19 + 0x50]
	0x03DB9BA0 CBZ X8, 0x3DB9BB8
	0x03DB9BA4 LDP X20, X19, [X31 + 0x10]
	0x03DB9BA8 MOVZ W9, 0x1
	0x03DB9BAC STRB W9, [X8 + 0x40]
	0x03DB9BB0 LDR X30, [X31], #0x20
	0x03DB9BB4 RET
	0x03DB9BB8 BL 0x1C16F20
	0x03DB9BBC STR X30, [X31 - 0x30]!
	0x03DB9BC0 STP X22, X21, [X31 + 0x10]
	0x03DB9BC4 STP X20, X19, [X31 + 0x20]
	0x03DB9BC8 ADRP X22, 0x62F000
	0x03DB9BCC ADRP X21, 0x33A000
	0x03DB9BD0 LDRB W8, [X22 + 0x67]
	0x03DB9BD4 LDR X21, [X21 + 0x7D0]
	0x03DB9BD8 MOV X19, X1
	0x03DB9BDC MOV X20, X0
	0x03DB9BE0 TBNZ X8, 0x0, 0x3DB9C04
	0x03DB9BE4 ADRP X0, 0x33A000
	0x03DB9BE8 LDR X0, [X0 + 0x7D0]
	0x03DB9BEC BL 0x1C16CF4
	0x03DB9BF0 ADRP X0, 0x33A000
	0x03DB9BF4 LDR X0, [X0 + 0x988]
	0x03DB9BF8 BL 0x1C16CF4
	0x03DB9BFC MOVZ W8, 0x1
	0x03DB9C00 STRB W8, [X22 + 0x67]
	0x03DB9C04 LDR X0, [X21]
	0x03DB9C08 ADRP X21, 0x33A000
	0x03DB9C0C LDR W8, [X0 + 0xE0]
	0x03DB9C10 LDR X21, [X21 + 0x988]
	0x03DB9C14 CBNZ W8, 0x3DB9C1C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x630000
	006 Move W8, [X19+91]
	007 Move X20, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x364000
	013 Move X0, [X0+3712]
	014 Call 0x1C17CF4
	015 Move X0, 0x364000
	016 Move X0, [X0+3664]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+91], W8
	020 Move X0, X20
	021 Move X1, X31
	022 Call VisualElement.get_panel, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Compare X0, 0
	026 JumpIfEqual {71}
	027 Move X10, 0x364000
	028 Move X8, [X0]
	029 Move X10, [X10+3712]
	030 Move X19, X0
	031 NotImplemented "Instruction LDRH not yet implemented."
	032 Move X1, [X10]
	033 Compare X9, 0
	034 JumpIfEqual {41}
	035 Move X10, [X8+176]
	036 Add X10, X10, 8
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract X9, X9, 1
	040 Add X10, X10, 16
	041 Move W2, 1
	042 Move X0, X19
	043 Call 0x1C5D788
	044 Move W9, [X10]
	045 Add W9, W9, 1
	046 Add X8, X8, W9
	047 Add X0, X8, 312
	048 Move X8, [X0]
	049 Move X1, [X0+8]
	050 Move X0, X19
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Compare X0, 0
	053 JumpIfEqual {70}
	054 Move X20, 0x364000
	055 Move X20, [X20+3664]
	056 Move X19, [X0+40]
	057 Move X8, [X20]
	058 Move W9, [X8+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X8
	062 Call 0x1C17DFC
	063 Compare X19, 0
	064 JumpIfEqual {78}
	065 Move X8, [X20]
	066 Move X0, X19
	067 Move X8, [X8+184]
	068 Move W1, [X8+8]
	069 Call PointerDispatchState.GetCapturingElement, X0, X1
	070 Move X20, X21
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 NotImplemented "Instruction CSET not yet implemented."
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Return X0
	078 Call 0x1C17F20

Method: System.Boolean IsLocalEvent(UnityEngine.UIElements.EventBase evt)

Disassembly:
	0x03DB9C18 BL 0x1C16DFC
	0x03DB9C1C LDR X1, [X21]
	0x03DB9C20 MOV X0, X20
	0x03DB9C24 MOV X2, X19
	0x03DB9C28 LDP X20, X19, [X31 + 0x20]
	0x03DB9C2C LDP X22, X21, [X31 + 0x10]
	0x03DB9C30 MOV X3, X31
	0x03DB9C34 LDR X30, [X31], #0x30
	0x03DB9C38 B 0x33B2CA0
	0x03DB9C3C STR X30, [X31 - 0x20]!
	0x03DB9C40 STP X20, X19, [X31 + 0x10]
	0x03DB9C44 MOV X19, X1
	0x03DB9C48 MOV X1, X31
	0x03DB9C4C MOV X20, X0
	0x03DB9C50 BL 0x33BDD8C
	0x03DB9C54 STR X19, [X20 + 0x18]
	0x03DB9C58 LDP X20, X19, [X31 + 0x10]
	0x03DB9C5C LDR X30, [X31], #0x20
	0x03DB9C60 RET
	0x03DB9C64 MOV X1, X31
	0x03DB9C68 B 0x33BDD8C
	0x03DB9C6C STP X30, X23, [X31 - 0x30]!
	0x03DB9C70 STP X22, X21, [X31 + 0x10]
	0x03DB9C74 STP X20, X19, [X31 + 0x20]
	0x03DB9C78 ADRP X20, 0x62F000
	0x03DB9C7C ADRP X22, 0x365000
	0x03DB9C80 ADRP X21, 0x3AF000
	0x03DB9C84 LDRB W8, [X20 + 0x68]
	0x03DB9C88 LDR X22, [X22 + 0x108]
	0x03DB9C8C LDR X21, [X21 + 0xEF8]
	0x03DB9C90 MOV X19, X0
	0x03DB9C94 TBNZ X8, 0x0, 0x3DB9D30
	0x03DB9C98 ADRP X0, 0x365000
	0x03DB9C9C LDR X0, [X0 + 0xF0]
	0x03DB9CA0 BL 0x1C16CF4
	0x03DB9CA4 ADRP X0, 0x3AF000
	0x03DB9CA8 LDR X0, [X0 + 0xF00]
	0x03DB9CAC BL 0x1C16CF4
	0x03DB9CB0 ADRP X0, 0x365000
	0x03DB9CB4 LDR X0, [X0 + 0xF8]
	0x03DB9CB8 BL 0x1C16CF4
	0x03DB9CBC ADRP X0, 0x365000
	0x03DB9CC0 LDR X0, [X0 + 0x90]
	0x03DB9CC4 BL 0x1C16CF4
	0x03DB9CC8 ADRP X0, 0x3AF000
	0x03DB9CCC LDR X0, [X0 + 0xF08]
	0x03DB9CD0 BL 0x1C16CF4
	0x03DB9CD4 ADRP X0, 0x365000
	0x03DB9CD8 LDR X0, [X0 + 0xA8]
	0x03DB9CDC BL 0x1C16CF4
	0x03DB9CE0 ADRP X0, 0x365000
	0x03DB9CE4 LDR X0, [X0 + 0x100]
	0x03DB9CE8 BL 0x1C16CF4
	0x03DB9CEC ADRP X0, 0x365000
	0x03DB9CF0 LDR X0, [X0 + 0x108]
	0x03DB9CF4 BL 0x1C16CF4
	0x03DB9CF8 ADRP X0, 0x3AF000
	0x03DB9CFC LDR X0, [X0 + 0xF10]
	0x03DB9D00 BL 0x1C16CF4
	0x03DB9D04 ADRP X0, 0x3AF000
	0x03DB9D08 LDR X0, [X0 + 0xF18]
	0x03DB9D0C BL 0x1C16CF4
	0x03DB9D10 ADRP X0, 0x3AF000
	0x03DB9D14 LDR X0, [X0 + 0xEF8]
	0x03DB9D18 BL 0x1C16CF4
	0x03DB9D1C ADRP X0, 0x3AF000
	0x03DB9D20 LDR X0, [X0 + 0xF20]
	0x03DB9D24 BL 0x1C16CF4
	0x03DB9D28 MOVZ W8, 0x1
	0x03DB9D2C STRB W8, [X20 + 0x68]
	0x03DB9D30 LDR X0, [X22]
	0x03DB9D34 LDR X20, [X19 + 0x10]
	0x03DB9D38 BL 0x1C16F10
	0x03DB9D3C LDR X2, [X21]
	0x03DB9D40 MOV X1, X19
	0x03DB9D44 MOV X3, X31
	0x03DB9D48 MOV X21, X0
	0x03DB9D4C BL 0x2D0E824
	0x03DB9D50 CBZ X20, 0x3DB9E6C
	0x03DB9D54 ADRP X8, 0x365000
	0x03DB9D58 LDR X8, [X8 + 0xF8]
	0x03DB9D5C ADRP X22, 0x365000
	0x03DB9D60 ADRP X23, 0x3AF000
	0x03DB9D64 MOV X0, X20
	0x03DB9D68 LDR X3, [X8]
	0x03DB9D6C LDR X22, [X22 + 0xA8]
	0x03DB9D70 LDR X23, [X23 + 0xF20]
	0x03DB9D74 MOV X1, X21
	0x03DB9D78 MOV W2, W31
	0x03DB9D7C BL 0x21A1534
	0x03DB9D80 LDR X0, [X22]
	0x03DB9D84 LDR X20, [X19 + 0x10]
	0x03DB9D88 BL 0x1C16F10
	0x03DB9D8C LDR X2, [X23]
	0x03DB9D90 MOV X1, X19
	0x03DB9D94 MOV X3, X31
	0x03DB9D98 MOV X21, X0
	0x03DB9D9C BL 0x2D0E824
	0x03DB9DA0 CBZ X20, 0x3DB9E6C
	0x03DB9DA4 ADRP X8, 0x365000
	0x03DB9DA8 LDR X8, [X8 + 0x90]
	0x03DB9DAC ADRP X22, 0x3AF000
	0x03DB9DB0 ADRP X23, 0x3AF000
	0x03DB9DB4 MOV X0, X20
	0x03DB9DB8 LDR X3, [X8]
	0x03DB9DBC LDR X22, [X22 + 0xF08]
	0x03DB9DC0 LDR X23, [X23 + 0xF18]
	0x03DB9DC4 MOV X1, X21
	0x03DB9DC8 MOV W2, W31
	0x03DB9DCC BL 0x21A1534
	0x03DB9DD0 LDR X0, [X22]
	0x03DB9DD4 LDR X20, [X19 + 0x10]
	0x03DB9DD8 BL 0x1C16F10
	0x03DB9DDC LDR X2, [X23]
	0x03DB9DE0 MOV X1, X19
	0x03DB9DE4 MOV X3, X31
	0x03DB9DE8 MOV X21, X0
	0x03DB9DEC BL 0x2D0E824
	0x03DB9DF0 CBZ X20, 0x3DB9E6C
	0x03DB9DF4 ADRP X8, 0x3AF000
	0x03DB9DF8 LDR X8, [X8 + 0xF00]
	0x03DB9DFC ADRP X22, 0x365000
	0x03DB9E00 ADRP X23, 0x3AF000
	0x03DB9E04 MOV X0, X20
	0x03DB9E08 LDR X3, [X8]
	0x03DB9E0C LDR X22, [X22 + 0x100]
	0x03DB9E10 LDR X23, [X23 + 0xF10]
	0x03DB9E14 MOV X1, X21
	0x03DB9E18 MOV W2, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x630000
	006 Move W8, [X20+92]
	007 Move X19, X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {50}
	012 Move X0, 0x363000
	013 Move X0, [X0+2360]
	014 Call 0x1C17CF4
	015 Move X0, 0x3B0000
	016 Move X0, [X0+80]
	017 Call 0x1C17CF4
	018 Move X0, 0x366000
	019 Move X0, [X0+512]
	020 Call 0x1C17CF4
	021 Move X0, 0x3AA000
	022 Move X0, [X0+3464]
	023 Call 0x1C17CF4
	024 Move X0, 0x3B0000
	025 Move X0, [X0+88]
	026 Call 0x1C17CF4
	027 Move X0, 0x363000
	028 Move X0, [X0+2368]
	029 Call 0x1C17CF4
	030 Move X0, 0x363000
	031 Move X0, [X0+2376]
	032 Call 0x1C17CF4
	033 Move X0, 0x3B0000
	034 Move X0, [X0+104]
	035 Call 0x1C17CF4
	036 Move X0, 0x366000
	037 Move X0, [X0+520]
	038 Call 0x1C17CF4
	039 Move X0, 0x363000
	040 Move X0, [X0+2384]
	041 Call 0x1C17CF4
	042 Move X0, 0x3AA000
	043 Move X0, [X0+3488]
	044 Call 0x1C17CF4
	045 Move X0, 0x3B0000
	046 Move X0, [X0+120]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+92], W8
	050 Compare X19, 0
	051 JumpIfEqual {138}
	052 Move X8, [X19]
	053 Move X21, 0x3B0000
	054 Move X20, 0x3B0000
	055 Move X0, X19
	056 Move X9, [X8+392]
	057 Move X1, [X8+400]
	058 Move X21, [X21+104]
	059 Move X20, [X20+80]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X8, [X21]
	062 Move X19, X0
	063 Move W9, [X8+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Move X0, [X20]
	069 Call 0x2D0E5C8
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X8, 0x3AA000
	072 Move X8, [X8+3488]
	073 Move X0, [X8]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X8, 0x3AA000
	079 Move X8, [X8+3464]
	080 Move X0, [X8]
	081 Call 0x2D0E5C8
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X8, 0x3B0000
	084 Move X8, [X8+120]
	085 Move X0, [X8]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X8, 0x3B0000
	091 Move X8, [X8+88]
	092 Move X0, [X8]
	093 Call 0x2D0E5C8
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X8, 0x363000
	096 Move X8, [X8+2384]
	097 Move X0, [X8]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X8, 0x363000
	103 Move X8, [X8+2360]
	104 Move X0, [X8]
	105 Call 0x2D0E5C8
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X8, 0x363000
	108 Move X8, [X8+2376]
	109 Move X0, [X8]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Move X8, 0x363000
	115 Move X8, [X8+2368]
	116 Move X0, [X8]
	117 Call 0x2D0E5C8
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W0, 1
	120 Move X20, [X31+16]
	121 Move X19, [X31+24]
	122 Move X30, [X31+32]
	123 Move X21, [X31+40]
	124 Return X0
	125 Move X8, 0x366000
	126 Move X8, [X8+520]
	127 Move X0, [X8]
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move X8, 0x366000
	133 Move X8, [X8+512]
	134 Move X0, [X8]
	135 Call 0x2D0E5C8
	136 NotImplemented "Instruction CMP not yet implemented."
	137 NotImplemented "Instruction CSET not yet implemented."
	138 Call 0x1C17F20

Method: System.Boolean IsEventInsideLocalWindow(UnityEngine.UIElements.EventBase evt)

Disassembly:
	0x03DB9E1C BL 0x21A1534
	0x03DB9E20 LDR X0, [X22]
	0x03DB9E24 LDR X20, [X19 + 0x10]
	0x03DB9E28 BL 0x1C16F10
	0x03DB9E2C LDR X2, [X23]
	0x03DB9E30 MOV X1, X19
	0x03DB9E34 MOV X3, X31
	0x03DB9E38 MOV X21, X0
	0x03DB9E3C BL 0x2D0E824
	0x03DB9E40 CBZ X20, 0x3DB9E6C
	0x03DB9E44 ADRP X8, 0x365000
	0x03DB9E48 LDR X8, [X8 + 0xF0]
	0x03DB9E4C MOV X0, X20
	0x03DB9E50 MOV X1, X21
	0x03DB9E54 LDP X20, X19, [X31 + 0x20]
	0x03DB9E58 LDR X3, [X8]
	0x03DB9E5C LDP X22, X21, [X31 + 0x10]
	0x03DB9E60 MOV W2, W31
	0x03DB9E64 LDP X30, X23, [X31], #0x30
	0x03DB9E68 B 0x21A1534
	0x03DB9E6C BL 0x1C16F20
	0x03DB9E70 LDR X0, [X0 + 0x10]
	0x03DB9E74 RET
	0x03DB9E78 STP X30, X23, [X31 - 0x30]!
	0x03DB9E7C STP X22, X21, [X31 + 0x10]
	0x03DB9E80 STP X20, X19, [X31 + 0x20]
	0x03DB9E84 ADRP X20, 0x62F000
	0x03DB9E88 ADRP X22, 0x365000
	0x03DB9E8C ADRP X21, 0x3AF000
	0x03DB9E90 LDRB W8, [X20 + 0x69]
	0x03DB9E94 LDR X22, [X22 + 0x108]
	0x03DB9E98 LDR X21, [X21 + 0xEF8]
	0x03DB9E9C MOV X19, X0
	0x03DB9EA0 TBNZ X8, 0x0, 0x3DB9F3C
	0x03DB9EA4 ADRP X0, 0x365000
	0x03DB9EA8 LDR X0, [X0 + 0xCE0]
	0x03DB9EAC BL 0x1C16CF4
	0x03DB9EB0 ADRP X0, 0x3AF000
	0x03DB9EB4 LDR X0, [X0 + 0xF28]
	0x03DB9EB8 BL 0x1C16CF4
	0x03DB9EBC ADRP X0, 0x365000
	0x03DB9EC0 LDR X0, [X0 + 0x168]
	0x03DB9EC4 BL 0x1C16CF4
	0x03DB9EC8 ADRP X0, 0x3AF000
	0x03DB9ECC LDR X0, [X0 + 0xF30]
	0x03DB9ED0 BL 0x1C16CF4
	0x03DB9ED4 ADRP X0, 0x3AF000
	0x03DB9ED8 LDR X0, [X0 + 0xF08]
	0x03DB9EDC BL 0x1C16CF4
	0x03DB9EE0 ADRP X0, 0x365000
	0x03DB9EE4 LDR X0, [X0 + 0xA8]
	0x03DB9EE8 BL 0x1C16CF4
	0x03DB9EEC ADRP X0, 0x365000
	0x03DB9EF0 LDR X0, [X0 + 0x100]
	0x03DB9EF4 BL 0x1C16CF4
	0x03DB9EF8 ADRP X0, 0x365000
	0x03DB9EFC LDR X0, [X0 + 0x108]
	0x03DB9F00 BL 0x1C16CF4
	0x03DB9F04 ADRP X0, 0x3AF000
	0x03DB9F08 LDR X0, [X0 + 0xF10]
	0x03DB9F0C BL 0x1C16CF4
	0x03DB9F10 ADRP X0, 0x3AF000
	0x03DB9F14 LDR X0, [X0 + 0xF18]
	0x03DB9F18 BL 0x1C16CF4
	0x03DB9F1C ADRP X0, 0x3AF000
	0x03DB9F20 LDR X0, [X0 + 0xEF8]
	0x03DB9F24 BL 0x1C16CF4
	0x03DB9F28 ADRP X0, 0x3AF000
	0x03DB9F2C LDR X0, [X0 + 0xF20]
	0x03DB9F30 BL 0x1C16CF4
	0x03DB9F34 MOVZ W8, 0x1
	0x03DB9F38 STRB W8, [X20 + 0x69]
	0x03DB9F3C LDR X0, [X22]
	0x03DB9F40 LDR X20, [X19 + 0x10]
	0x03DB9F44 BL 0x1C16F10
	0x03DB9F48 LDR X2, [X21]
	0x03DB9F4C MOV X1, X19
	0x03DB9F50 MOV X3, X31
	0x03DB9F54 MOV X21, X0
	0x03DB9F58 BL 0x2D0E824
	0x03DB9F5C CBZ X20, 0x3DBA078
	0x03DB9F60 ADRP X8, 0x365000
	0x03DB9F64 LDR X8, [X8 + 0x168]
	0x03DB9F68 ADRP X22, 0x365000
	0x03DB9F6C ADRP X23, 0x3AF000
	0x03DB9F70 MOV X0, X20
	0x03DB9F74 LDR X3, [X8]
	0x03DB9F78 LDR X22, [X22 + 0xA8]
	0x03DB9F7C LDR X23, [X23 + 0xF20]
	0x03DB9F80 MOV X1, X21
	0x03DB9F84 MOV W2, W31
	0x03DB9F88 BL 0x21A18B4
	0x03DB9F8C LDR X0, [X22]
	0x03DB9F90 LDR X20, [X19 + 0x10]
	0x03DB9F94 BL 0x1C16F10
	0x03DB9F98 LDR X2, [X23]
	0x03DB9F9C MOV X1, X19
	0x03DB9FA0 MOV X3, X31
	0x03DB9FA4 MOV X21, X0
	0x03DB9FA8 BL 0x2D0E824
	0x03DB9FAC CBZ X20, 0x3DBA078
	0x03DB9FB0 ADRP X8, 0x3AF000
	0x03DB9FB4 LDR X8, [X8 + 0xF30]
	0x03DB9FB8 ADRP X22, 0x3AF000
	0x03DB9FBC ADRP X23, 0x3AF000
	0x03DB9FC0 MOV X0, X20
	0x03DB9FC4 LDR X3, [X8]
	0x03DB9FC8 LDR X22, [X22 + 0xF08]
	0x03DB9FCC LDR X23, [X23 + 0xF18]

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x630000
	013 Move X22, 0x364000
	014 Move W8, [X21+93]
	015 Move X22, [X22+3704]
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x367000
	023 Move X0, [X0+1480]
	024 Call 0x1C17CF4
	025 Move X0, 0x364000
	026 Move X0, [X0+3704]
	027 Call 0x1C17CF4
	028 Move X0, 0x364000
	029 Move X0, [X0+3672]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+93], W8
	033 Move X21, 0x364000
	034 Move X21, [X21+3672]
	035 Move X0, X20
	036 Call IMGUIContainer.GetCurrentClipRect, X0
	037 Move X1, [X22]
	038 Move X0, X19
	039 Move V8, V0
	040 Move V9, V1
	041 Move V10, V2
	042 Move V11, V3
	043 Call 0x1C17E00
	044 Move X20, X0
	045 Compare X0, 0
	046 JumpIfEqual {70}
	047 Move X8, [X20]
	048 Move X1, [X22]
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Compare X9, 0
	051 JumpIfEqual {58}
	052 Move X10, [X8+176]
	053 Add X10, X10, 8
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Subtract X9, X9, 1
	057 Add X10, X10, 16
	058 Move W2, 1
	059 Move X0, X20
	060 Call 0x1C5D788
	061 Move W9, [X10]
	062 Add W9, W9, 1
	063 Add X8, X8, W9
	064 Add X0, X8, 312
	065 Move X8, [X0]
	066 Move X1, [X0+8]
	067 Move X0, X20
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move X20, X0
	070 Move X0, [X21]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {76}
	074 Call 0x1C17DFC
	075 Move X0, [X21]
	076 Move X8, [X0+184]
	077 Move X0, X20
	078 Move X2, X31
	079 Move X1, [X8+8]
	080 Call String.op_Equality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {86}
	085 Move W20, 1
	086 Move X0, [X21]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {92}
	090 Call 0x1C17DFC
	091 Move X0, [X21]
	092 Move X8, [X0+184]
	093 Move X0, X20
	094 Move X2, X31
	095 Move X1, [X8+16]
	096 Call String.op_Equality, X0, X1
	097 Move W20, W0
	098 Compare X19, 0
	099 JumpIfEqual {130}
	100 Move X8, 0x367000
	101 Move X8, [X8+1480]
	102 Move S13, [X19+120]
	103 Move S12, [X19+124]
	104 Move X0, [X8]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 And W0, W20, 1
	110 Move V0, V8
	111 Move V1, V9
	112 Move V2, V10
	113 Move V3, V11
	114 Move X20, [X31+80]
	115 Move X19, [X31+88]
	116 Move X22, [X31+64]
	117 Move X21, [X31+72]
	118 Move X30, [X31+48]
	119 Move D9, [X31+32]
	120 Move D8, [X31+40]
	121 Move D11, [X31+16]
	122 Move D10, [X31+24]
	123 Move V4, V13
	124 Move V5, V12
	125 Move X1, X31
	126 Move D13, [X31+96]
	127 Move D12, [X31+104]
	128 Call GUIUtility.HitTest, X0, X1, X2
	129 Return X0
	130 Call 0x1C17F20

Method: System.Boolean IsDockAreaMouseUp(UnityEngine.UIElements.EventBase evt)

Disassembly:
	0x03DB9FD0 MOV X1, X21
	0x03DB9FD4 MOV W2, W31
	0x03DB9FD8 BL 0x21A18B4
	0x03DB9FDC LDR X0, [X22]
	0x03DB9FE0 LDR X20, [X19 + 0x10]
	0x03DB9FE4 BL 0x1C16F10
	0x03DB9FE8 LDR X2, [X23]
	0x03DB9FEC MOV X1, X19
	0x03DB9FF0 MOV X3, X31
	0x03DB9FF4 MOV X21, X0
	0x03DB9FF8 BL 0x2D0E824
	0x03DB9FFC CBZ X20, 0x3DBA078
	0x03DBA000 ADRP X8, 0x3AE000
	0x03DBA004 LDR X8, [X8 + 0xF28]
	0x03DBA008 ADRP X22, 0x364000
	0x03DBA00C ADRP X23, 0x3AE000
	0x03DBA010 MOV X0, X20
	0x03DBA014 LDR X3, [X8]
	0x03DBA018 LDR X22, [X22 + 0x100]
	0x03DBA01C LDR X23, [X23 + 0xF10]
	0x03DBA020 MOV X1, X21
	0x03DBA024 MOV W2, W31
	0x03DBA028 BL 0x21A18B4
	0x03DBA02C LDR X0, [X22]
	0x03DBA030 LDR X20, [X19 + 0x10]
	0x03DBA034 BL 0x1C16F10
	0x03DBA038 LDR X2, [X23]
	0x03DBA03C MOV X1, X19
	0x03DBA040 MOV X3, X31
	0x03DBA044 MOV X21, X0
	0x03DBA048 BL 0x2D0E824
	0x03DBA04C CBZ X20, 0x3DBA078
	0x03DBA050 ADRP X8, 0x364000
	0x03DBA054 LDR X8, [X8 + 0xCE0]
	0x03DBA058 MOV X0, X20
	0x03DBA05C MOV X1, X21
	0x03DBA060 LDP X20, X19, [X31 + 0x20]
	0x03DBA064 LDR X3, [X8]
	0x03DBA068 LDP X22, X21, [X31 + 0x10]
	0x03DBA06C MOV W2, W31
	0x03DBA070 LDP X30, X23, [X31], #0x30
	0x03DBA074 B 0x21A18B4
	0x03DBA078 BL 0x1C16F20
	0x03DBA07C STR X30, [X31 - 0x20]!
	0x03DBA080 STP X20, X19, [X31 + 0x10]
	0x03DBA084 MOV X20, X0
	0x03DBA088 ADD X0, X31, 0x8
	0x03DBA08C MOV X19, X1
	0x03DBA090 STR X1, [X31 + 0x8]
	0x03DBA094 BL 0x3DBA0C8
	0x03DBA098 CBZ W0, 0x3DBA0BC
	0x03DBA09C LDR X8, [X20 + 0x18]
	0x03DBA0A0 CBZ X8, 0x3DBA0BC
	0x03DBA0A4 MOV W1, W0
	0x03DBA0A8 LDR X9, [X8 + 0x18]
	0x03DBA0AC LDR X0, [X8 + 0x40]
	0x03DBA0B0 LDR X3, [X8 + 0x28]
	0x03DBA0B4 MOV X2, X19
	0x03DBA0B8 BLR X9
	0x03DBA0BC LDP X20, X19, [X31 + 0x10]
	0x03DBA0C0 LDR X30, [X31], #0x20
	0x03DBA0C4 RET
	0x03DBA0C8 STR X30, [X31 - 0x20]!
	0x03DBA0CC STP X20, X19, [X31 + 0x10]
	0x03DBA0D0 ADRP X20, 0x62E000
	0x03DBA0D4 LDRB W8, [X20 + 0x6A]
	0x03DBA0D8 MOV X19, X0
	0x03DBA0DC TBNZ X8, 0x0, 0x3DBA100
	0x03DBA0E0 ADRP X0, 0x3AC000
	0x03DBA0E4 LDR X0, [X0 + 0x9A0]
	0x03DBA0E8 BL 0x1C16CF4
	0x03DBA0EC ADRP X0, 0x364000
	0x03DBA0F0 LDR X0, [X0 + 0x130]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x630000
	006 Move W8, [X20+94]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x3AA000
	013 Move X0, [X0+3464]
	014 Call 0x1C17CF4
	015 Move X0, 0x3AA000
	016 Move X0, [X0+3488]
	017 Call 0x1C17CF4
	018 Move X0, 0x362000
	019 Move X0, [X0+2200]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+94], W8
	023 Compare X19, 0
	024 JumpIfEqual {80}
	025 Move X8, [X19]
	026 Move X20, 0x3A9000
	027 Move X21, 0x3A9000
	028 Move X0, X19
	029 Move X9, [X8+392]
	030 Move X1, [X8+400]
	031 Move X20, [X20+3488]
	032 Move X21, [X21+3464]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X8, [X20]
	035 Move X20, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, [X21]
	042 Call 0x2D0E5C8
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Move X1, X31
	046 Call EventBase.get_target, X0
	047 Move X20, X0
	048 Move X0, X19
	049 Move X1, X31
	050 Call EventBase.get_target, X0
	051 Compare X0, 0
	052 JumpIfEqual {65}
	053 Move X8, 0x362000
	054 Move X8, [X8+2200]
	055 Move X9, [X0]
	056 Move X8, [X8]
	057 Move W11, [X9+304]
	058 Move W10, [X8+304]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X9, [X9+200]
	061 Add X9, X9, X10
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, X31
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSET not yet implemented."
	067 Move W0, W31
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0
	073 Move X0, [X0+928]
	074 Compare X0, 0
	075 JumpIfEqual {80}
	076 Move X8, [X0]
	077 Move X9, [X8+664]
	078 Move X1, [X8+672]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Call 0x1C17F20

Method: System.Boolean HandleIMGUIEvent(UnityEngine.Event e, System.Boolean canAffectFocus)

Disassembly:
	0x03DB9AF8 MOVZ W1, 0x8
	0x03DB9AFC MOV X2, X31
	0x03DB9B00 B 0x3DE5048
	0x03DB9B04 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X8, [X0+968]
	002 And W3, W2, 1
	003 Move X2, X8
	004 Call IMGUIContainer.HandleIMGUIEvent, X0, X1, X2, X3
	005 Return X0

Method: System.Boolean HandleIMGUIEvent(UnityEngine.Event e, System.Action onGUIHandler, System.Boolean canAffectFocus)

Disassembly:
	0x03DBA15C LDR X8, [X8 + 0x9A0]
	0x03DBA160 LDR X1, [X8]
	0x03DBA164 BL 0x2EE6C54
	0x03DBA168 TBZ X0, 0x0, 0x3DBA13C
	0x03DBA16C MOVZ W8, 0x1
	0x03DBA170 B 0x3DBA140
	0x03DBA174 MOVZ W8, 0xA
	0x03DBA178 B 0x3DBA140
	0x03DBA17C MOVZ W8, 0x8
	0x03DBA180 B 0x3DBA140
	0x03DBA184 MOVZ W8, 0x9
	0x03DBA188 B 0x3DBA140
	0x03DBA18C BL 0x1C16F20
	0x03DBA190 LDR X8, [X0 + 0x18]
	0x03DBA194 CBZ X8, 0x3DBA1A8
	0x03DBA198 LDR X4, [X8 + 0x18]
	0x03DBA19C LDR X0, [X8 + 0x40]
	0x03DBA1A0 LDR X3, [X8 + 0x28]
	0x03DBA1A4 BR X4
	0x03DBA1A8 RET
	0x03DBA1AC LDR X8, [X0 + 0x18]
	0x03DBA1B0 CBZ X8, 0x3DBA1CC
	0x03DBA1B4 LDR X4, [X8 + 0x18]
	0x03DBA1B8 LDR X0, [X8 + 0x40]
	0x03DBA1BC LDR X3, [X8 + 0x28]
	0x03DBA1C0 MOV X2, X1
	0x03DBA1C4 MOVZ W1, 0x2
	0x03DBA1C8 BR X4
	0x03DBA1CC RET
	0x03DBA1D0 LDR X8, [X0 + 0x18]
	0x03DBA1D4 CBZ X8, 0x3DBA1F0
	0x03DBA1D8 LDR X4, [X8 + 0x18]
	0x03DBA1DC LDR X0, [X8 + 0x40]
	0x03DBA1E0 LDR X3, [X8 + 0x28]
	0x03DBA1E4 MOV X2, X1
	0x03DBA1E8 MOVZ W1, 0x3
	0x03DBA1EC BR X4
	0x03DBA1F0 RET
	0x03DBA1F4 STR X30, [X31 - 0x10]!
	0x03DBA1F8 CBZ X1, 0x3DBA2A4
	0x03DBA1FC LDR W8, [X1 + 0x8C]
	0x03DBA200 MOV X2, X1
	0x03DBA204 SUB W8, W8, 0x1
	0x03DBA208 CMP W8, 0x3
	0x03DBA20C B.HI 0x3DBA29C
	0x03DBA210 ADRP X9, 0xFFFFFFFFFCDDE000
	0x03DBA214 ADD X9, X9, 0x65
	0x03DBA218 ADR X10, 0x10
	0x03DBA21C LDRB W11, [X9, X8, LSL]
	0x03DBA220 ADD X10, X10, X11, 0x2, LSL

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X24, 0x62F000
	010 Move X23, 0x3AB000
	011 Move W8, [X24+95]
	012 Move X23, [X23+192]
	013 Move W22, W3
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x3AB000
	022 Move X0, [X0+192]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+95], W8
	026 Move X0, [X23]
	027 Add X23, X21, 1032
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Add X3, X21, 1016
	033 Move X0, X21
	034 Move X1, X20
	035 Move X2, X23
	036 Call IMGUIContainer.GetCurrentTransformAndClip, X0, X1, X2, X3
	037 Move V1, [X23+32]
	038 Move V0, [X23+48]
	039 Move V3, [X23]
	040 Move V2, [X23+16]
	041 And W4, W22, 1
	042 Add X2, X31, 0
	043 Move [X31+32], V1
	044 Move [X31+40], V0
	045 Move [X31], V3
	046 Move [X31+8], V2
	047 Move V0, [X21+1016]
	048 Move V1, [X21+1020]
	049 Move V2, [X21+1024]
	050 Move V3, [X21+1028]
	051 Move X0, X21
	052 Move X1, X20
	053 Move X3, X19
	054 Call IMGUIContainer.HandleIMGUIEvent, X0, X1, X2, X3, X4, X5
	055 Move X20, [X31+112]
	056 Move X19, [X31+120]
	057 Move X22, [X31+96]
	058 Move X21, [X31+104]
	059 Move X24, [X31+80]
	060 Move X23, [X31+88]
	061 Move X30, [X31+64]
	062 And W0, W0, 1
	063 Add X31, X31, 128
	064 Return X0

Method: System.Boolean HandleIMGUIEvent(UnityEngine.Event e, UnityEngine.Matrix4x4 worldTransform, UnityEngine.Rect clippingRect, System.Action onGUIHandler, System.Boolean canAffectFocus)

Disassembly:
	0x03DB963C LDR W9, [X8 + 0xE0]
	0x03DB9640 CBNZ W9, 0x3DB964C
	0x03DB9644 MOV X0, X8
	0x03DB9648 BL 0x1C16DFC
	0x03DB964C ADRP X8, 0x3AF000
	0x03DB9650 LDR X8, [X8 + 0xED0]
	0x03DB9654 LDR X0, [X8]
	0x03DB9658 BL 0x2D0D5C8
	0x03DB965C CMP X20, X0
	0x03DB9660 B.NE 0x3DB96AC
	0x03DB9664 LDR X20, [X19 + 0x3A0]
	0x03DB9668 CBZ X20, 0x3DB96AC
	0x03DB966C LDR X8, [X20]
	0x03DB9670 MOV X0, X20
	0x03DB9674 LDR X9, [X8 + 0x258]
	0x03DB9678 LDR X1, [X8 + 0x260]
	0x03DB967C BLR X9
	0x03DB9680 LDR X8, [X20]
	0x03DB9684 ADD W1, W0, 0x1
	0x03DB9688 MOV X0, X20
	0x03DB968C LDR X9, [X8 + 0x268]
	0x03DB9690 LDR X2, [X8 + 0x270]
	0x03DB9694 BLR X9
	0x03DB9698 MOV X0, X19
	0x03DB969C LDP X20, X19, [X31 + 0x20]
	0x03DB96A0 LDP X22, X21, [X31 + 0x10]
	0x03DB96A4 LDR X30, [X31], #0x30
	0x03DB96A8 B 0x3DB96C8
	0x03DB96AC LDP X20, X19, [X31 + 0x20]
	0x03DB96B0 LDP X22, X21, [X31 + 0x10]
	0x03DB96B4 LDR X30, [X31], #0x30
	0x03DB96B8 RET
	0x03DB96BC MOVZ W8, 0x1
	0x03DB96C0 STRB W8, [X19 + 0x44D]
	0x03DB96C4 BL 0x1C16F20
	0x03DB96C8 STP X30, X23, [X31 - 0x30]!
	0x03DB96CC STP X22, X21, [X31 + 0x10]
	0x03DB96D0 STP X20, X19, [X31 + 0x20]
	0x03DB96D4 ADRP X20, 0x62F000
	0x03DB96D8 LDRB W8, [X20 + 0x62]
	0x03DB96DC MOV X19, X0
	0x03DB96E0 TBNZ X8, 0x0, 0x3DB971C
	0x03DB96E4 ADRP X0, 0x3AB000
	0x03DB96E8 LDR X0, [X0 + 0xC0]
	0x03DB96EC BL 0x1C16CF4
	0x03DB96F0 ADRP X0, 0x33B000
	0x03DB96F4 LDR X0, [X0 + 0x1C8]
	0x03DB96F8 BL 0x1C16CF4
	0x03DB96FC ADRP X0, 0x362000
	0x03DB9700 LDR X0, [X0 + 0xB58]
	0x03DB9704 BL 0x1C16CF4
	0x03DB9708 ADRP X0, 0x3AA000
	0x03DB970C LDR X0, [X0 + 0xB18]
	0x03DB9710 BL 0x1C16CF4
	0x03DB9714 MOVZ W8, 0x1
	0x03DB9718 STRB W8, [X20 + 0x62]
	0x03DB971C ADRP X22, 0x3AB000
	0x03DB9720 ADRP X21, 0x362000
	0x03DB9724 ADRP X23, 0x3AA000
	0x03DB9728 LDR X22, [X22 + 0xC0]
	0x03DB972C LDR X21, [X21 + 0xB58]
	0x03DB9730 LDR X23, [X23 + 0xB18]
	0x03DB9734 MOV W20, W31
	0x03DB9738 LDR X0, [X22]
	0x03DB973C LDR W8, [X0 + 0xE0]
	0x03DB9740 CBNZ W8, 0x3DB974C
	0x03DB9744 BL 0x1C16DFC
	0x03DB9748 LDR X0, [X22]
	0x03DB974C LDR X8, [X0 + 0xB8]
	0x03DB9750 LDR X8, [X8 + 0x10]
	0x03DB9754 CBZ X8, 0x3DB9830
	0x03DB9758 LDR W9, [X8 + 0x18]
	0x03DB975C CMP W20, W9
	0x03DB9760 B.GE 0x3DB97A8
	0x03DB9764 LDR W9, [X0 + 0xE0]
	0x03DB9768 CBNZ W9, 0x3DB9780
	0x03DB976C BL 0x1C16DFC
	0x03DB9770 LDR X8, [X22]
	0x03DB9774 LDR X8, [X8 + 0xB8]
	0x03DB9778 LDR X8, [X8 + 0x10]
	0x03DB977C CBZ X8, 0x3DB9830
	0x03DB9780 LDR X2, [X21]
	0x03DB9784 MOV X0, X8
	0x03DB9788 MOV W1, W20
	0x03DB978C BL 0x301BCCC
	0x03DB9790 MOV X1, X0
	0x03DB9794 MOV X0, X19
	0x03DB9798 MOV X2, X31
	0x03DB979C BL 0x3DF1B54
	0x03DB97A0 ADD W20, W20, 0x1
	0x03DB97A4 B 0x3DB9738
	0x03DB97A8 LDR X0, [X23]
	0x03DB97AC LDR W8, [X0 + 0xE0]
	0x03DB97B0 CBNZ W8, 0x3DB97B8
	0x03DB97B4 BL 0x1C16DFC
	0x03DB97B8 MOV X0, X19
	0x03DB97BC MOV X1, X31
	0x03DB97C0 BL 0x3D19C20
	0x03DB97C4 CBZ W0, 0x3DB9820
	0x03DB97C8 MOV W20, W0
	0x03DB97CC LDR X0, [X22]
	0x03DB97D0 LDR W8, [X0 + 0xE0]
	0x03DB97D4 CBNZ W8, 0x3DB97E0
	0x03DB97D8 BL 0x1C16DFC
	0x03DB97DC LDR X0, [X22]
	0x03DB97E0 LDR X8, [X0 + 0xB8]
	0x03DB97E4 LDR X0, [X8 + 0x10]
	0x03DB97E8 CBZ X0, 0x3DB9830
	0x03DB97EC LDR W8, [X0 + 0x18]
	0x03DB97F0 LDR X2, [X21]
	0x03DB97F4 SUB W8, W8, 0x1
	0x03DB97F8 CMP W20, W8
	0x03DB97FC CSEL W1, W20, W8, LT
	0x03DB9800 BL 0x301BCCC
	0x03DB9804 MOV X1, X0
	0x03DB9808 MOV X0, X19
	0x03DB980C LDP X20, X19, [X31 + 0x20]
	0x03DB9810 LDP X22, X21, [X31 + 0x10]
	0x03DB9814 MOV X2, X31
	0x03DB9818 LDP X30, X23, [X31], #0x30
	0x03DB981C B 0x3DF1C70
	0x03DB9820 LDP X20, X19, [X31 + 0x20]
	0x03DB9824 LDP X22, X21, [X31 + 0x10]
	0x03DB9828 LDP X30, X23, [X31], #0x30
	0x03DB982C RET
	0x03DB9830 BL 0x1C16F20
	0x03DB9834 SUB X31, X31, 0xA0
	0x03DB9838 STP D13, D12, [X31 + 0x40]
	0x03DB983C STP D11, D10, [X31 + 0x50]
	0x03DB9840 STP D9, D8, [X31 + 0x60]
	0x03DB9844 STP X30, X23, [X31 + 0x70]
	0x03DB9848 STP X22, X21, [X31 + 0x80]
	0x03DB984C STP X20, X19, [X31 + 0x90]
	0x03DB9850 ADRP X22, 0x62F000
	0x03DB9854 LDRB W8, [X22 + 0x63]
	0x03DB9858 MOV W19, W2
	0x03DB985C MOV V8.16B, V1.16B
	0x03DB9860 MOV W20, W1
	0x03DB9864 MOV V9.16B, V0.16B
	0x03DB9868 MOV X21, X0
	0x03DB986C TBNZ X8, 0x0, 0x3DB9884
	0x03DB9870 ADRP X0, 0x3AB000
	0x03DB9874 LDR X0, [X0 + 0xC0]
	0x03DB9878 BL 0x1C16CF4
	0x03DB987C MOVZ W8, 0x1
	0x03DB9880 STRB W8, [X22 + 0x63]
	0x03DB9884 CMP W20, 0x1
	0x03DB9888 B.NE 0x3DB989C
	0x03DB988C CMP W19, 0x1
	0x03DB9890 B.NE 0x3DB989C
	0x03DB9894 MOV V10.16B, V9.16B
	0x03DB9898 B 0x3DB9A44
	0x03DB989C MOV X0, X31
	0x03DB98A0 BL 0x3C63934
	0x03DB98A4 MOV X22, X0
	0x03DB98A8 CBZ X0, 0x3DB98EC
	0x03DB98AC ADRP X23, 0x3AB000
	0x03DB98B0 LDR X23, [X23 + 0xC0]
	0x03DB98B4 LDR X0, [X23]
	0x03DB98B8 LDR W8, [X0 + 0xE0]
	0x03DB98BC CBNZ W8, 0x3DB98C8
	0x03DB98C0 BL 0x1C16DFC
	0x03DB98C4 LDR X0, [X23]
	0x03DB98C8 LDR X8, [X0 + 0xB8]
	0x03DB98CC MOV X0, X31
	0x03DB98D0 LDR X23, [X8 + 0x38]
	0x03DB98D4 BL 0x3C63934
	0x03DB98D8 CBZ X23, 0x3DB9A6C
	0x03DB98DC MOV X1, X0
	0x03DB98E0 MOV X0, X23
	0x03DB98E4 MOV X2, X31
	0x03DB98E8 BL 0x3C637B4
	0x03DB98EC ADRP X23, 0x3AB000
	0x03DB98F0 LDR X23, [X23 + 0xC0]
	0x03DB98F4 LDR X0, [X23]
	0x03DB98F8 LDR W8, [X0 + 0xE0]
	0x03DB98FC CBNZ W8, 0x3DB9908
	0x03DB9900 BL 0x1C16DFC
	0x03DB9904 LDR X0, [X23]
	0x03DB9908 LDR X8, [X0 + 0xB8]
	0x03DB990C LDR X0, [X8 + 0x30]
	0x03DB9910 CBZ X0, 0x3DB9A6C
	0x03DB9914 LDR X1, [X8 + 0x28]
	0x03DB9918 MOV X2, X31
	0x03DB991C BL 0x3C637B4
	0x03DB9920 MOV X0, X21
	0x03DB9924 MOV X1, X31
	0x03DB9928 BL 0x3DEC528
	0x03DB992C LDR X0, [X23]
	0x03DB9930 CMP W20, 0x1
	0x03DB9934 FCSEL S12, S9, S2, EQ
	0x03DB9938 CMP W19, 0x1
	0x03DB993C LDR W8, [X0 + 0xE0]
	0x03DB9940 MOV V10.16B, V0.16B
	0x03DB9944 MOV V11.16B, V1.16B
	0x03DB9948 FCSEL S13, S8, S3, EQ
	0x03DB994C CBNZ W8, 0x3DB9958
	0x03DB9950 BL 0x1C16DFC
	0x03DB9954 LDR X0, [X23]
	0x03DB9958 ADD X9, X21, 0x408
	0x03DB995C LDR X8, [X0 + 0xB8]
	0x03DB9960 LDP V0, V1, [X9 + 0x20]
	0x03DB9964 LDP V2, V3, [X9]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], D11
	003 Move [X31+136], D10
	004 Move [X31+144], D9
	005 Move [X31+152], D8
	006 Move [X31+160], X30
	007 Move [X31+176], X24
	008 Move [X31+184], X23
	009 Move [X31+192], X22
	010 Move [X31+200], X21
	011 Move [X31+208], X20
	012 Move [X31+216], X19
	013 Move X24, 0x630000
	014 Move W8, [X24+96]
	015 Move W22, W4
	016 Move X21, X3
	017 Move V8, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V11, V0
	021 Move X23, X2
	022 Move X20, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {39}
	028 Move X0, 0x3A1000
	029 Move X0, [X0+32]
	030 Call 0x1C17CF4
	031 Move X0, 0x367000
	032 Move X0, [X0+1480]
	033 Call 0x1C17CF4
	034 Move X0, 0x3B0000
	035 Move X0, [X0+3784]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X24+96], W8
	039 Move W0, W31
	040 Compare X20, 0
	041 JumpIfEqual {224}
	042 Compare X21, 0
	043 JumpIfEqual {224}
	044 Move X0, [X19+928]
	045 Compare X0, 0
	046 JumpIfEqual {224}
	047 Move X8, [X0]
	048 Move X9, [X8+504]
	049 Move X1, [X8+512]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 NotImplemented "Instruction STRH not yet implemented."
	052 Move X8, X0
	053 ShiftRight X8, 16
	054 And X8, X8, 0x7FFFFFFF
	055 Move X0, X20
	056 Move X1, X31
	057 Move [X31+170], W8
	058 Call Event.get_rawType, X0
	059 Move W1, W0
	060 Add X0, X31, 168
	061 Move X2, X31
	062 Call EventInterests.WantsEvent, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {223}
	067 Move X0, X20
	068 Move X1, X31
	069 Call Event.get_rawType, X0
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W8, [X19+1006]
	072 Move W24, W0
	073 Compare W8, 0
	074 JumpIfNotEqual {98}
	075 Move X0, [X19+928]
	076 Compare X0, 0
	077 JumpIfEqual {243}
	078 Move X8, [X0]
	079 Move X9, [X8+504]
	080 Move X1, [X8+512]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 NotImplemented "Instruction STRH not yet implemented."
	083 Move X8, X0
	084 ShiftRight X8, 16
	085 And X8, X8, 0x7FFFFFFF
	086 Move X0, X20
	087 Move X1, X31
	088 Move [X31+170], W8
	089 Call Event.get_rawType, X0
	090 Move W1, W0
	091 Add X0, X31, 168
	092 Move X2, X31
	093 Call EventInterests.WantsLayoutPass, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {237}
	098 Move W1, 8
	099 Move X0, X20
	100 Move X2, X31
	101 Call Event.set_type, X0, X1
	102 Move V1, [X23+32]
	103 Move V0, [X23+48]
	104 Move V3, [X23]
	105 Move V2, [X23+16]
	106 Move X0, X19
	107 Move X1, X31
	108 Move [X31+96], V1
	109 Move [X31+104], V0
	110 Move [X31+64], V3
	111 Move [X31+72], V2
	112 Call VisualElement.get_layout, X0
	113 Move V4, V0
	114 Move V5, V1
	115 Move V6, V2
	116 Move V7, V3
	117 And W5, W22, 1
	118 Add X2, X31, 64
	119 Move X0, X19
	120 Move X1, X20
	121 Move V0, V11
	122 Move V1, V10
	123 Move V2, V9
	124 Move V3, V8
	125 Move W3, W31
	126 Move X4, X21
	127 Call IMGUIContainer.DoOnGUI, X0, X1, X2, X3, X4, X5, X6, X7
	128 Move X0, X20
	129 Move W1, W24
	130 Move X2, X31
	131 Move [X19+1006], W31
	132 Call Event.set_type, X0, X1
	133 Move V1, [X23+32]
	134 Move V0, [X23+48]
	135 Move V3, [X23]
	136 Move V2, [X23+16]
	137 Move X0, X19
	138 Move X1, X31
	139 Move [X31+32], V1
	140 Move [X31+40], V0
	141 Move [X31], V3
	142 Move [X31+8], V2
	143 Call VisualElement.get_layout, X0
	144 Move V4, V0
	145 Move V5, V1
	146 Move V6, V2
	147 Move V7, V3
	148 And W5, W22, 1
	149 Add X2, X31, 0
	150 Move X0, X19
	151 Move X1, X20
	152 Move V0, V11
	153 Move V1, V10
	154 Move V2, V9
	155 Move V3, V8
	156 Move W3, W31
	157 Move X4, X21
	158 Call IMGUIContainer.DoOnGUI, X0, X1, X2, X3, X4, X5, X6, X7
	159 Move W8, [X19+1116]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move [X19+1116], W31
	162 Move X8, 0x3A1000
	163 Move X8, [X8+32]
	164 Move X0, [X8]
	165 Call 0x1C17F10
	166 Move X1, X31
	167 Move X21, X0
	168 Call Event..ctor, X0
	169 Compare X21, 0
	170 JumpIfEqual {243}
	171 Move W1, 14
	172 Move X0, X21
	173 Move X2, X31
	174 Call Event.set_type, X0, X1
	175 Move X8, 0x3B0000
	176 Move X8, [X8+3784]
	177 Move X0, X21
	178 Move X2, X31
	179 Move X1, [X8]
	180 Call Event.set_commandName, X0, X1
	181 Move X2, [X19+968]
	182 Move W3, 1
	183 Move X0, X19
	184 Move X1, X21
	185 Call IMGUIContainer.HandleIMGUIEvent, X0, X1, X2, X3
	186 Move X0, X20
	187 Move X1, X31
	188 Call Event.get_rawType, X0
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move W0, 1
	191 Move X0, X20
	192 Move X1, X31
	193 Call Event.get_rawType, X0
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move X0, X19
	196 Call MouseCaptureController.HasMouseCapture, X0
	197 Move TEMP, X0
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfNotEqual {211}
	201 Move X8, 0x367000
	202 Move X8, [X8+1480]
	203 Move X0, [X8]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {208}
	207 Call 0x1C17DFC
	208 Move W0, W31
	209 Move X1, X31
	210 Call GUIUtility.set_hotControl, X0
	211 Move X8, [X19+928]
	212 Compare X8, 0
	213 JumpIfNotEqual {223}
	214 Move X8, 0x367000
	215 Move X8, [X8+1480]
	216 Move X0, [X8]
	217 Move W8, [X0+224]
	218 Compare W8, 0
	219 JumpIfNotEqual {221}
	220 Call 0x1C17DFC
	221 Move X0, X31
	222 Call GUIUtility.ExitGUI
	223 Move W0, W31
	224 Move X20, [X31+208]
	225 Move X19, [X31+216]
	226 Move X22, [X31+192]
	227 Move X21, [X31+200]
	228 Move X24, [X31+176]
	229 Move X23, [X31+184]
	230 Move X30, [X31+160]
	231 Move D9, [X31+144]
	232 Move D8, [X31+152]
	233 Move D11, [X31+128]
	234 Move D10, [X31+136]
	235 Add X31, X31, 224
	236 Return X0
	237 Move X0, X19
	238 Call IMGUIContainer.get_cache, X0
	239 Compare X0, 0
	240 JumpIfEqual {243}
	241 Move X1, X31
	242 Call LayoutCache.ResetCursor, X0
	243 Call 0x1C17F20

Method: System.Void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)

Disassembly:
	0x03DBA3E0 MOVZ W19, 0x5529
	0x03DBA3E4 MOVK W19, 0xA5550000
	0x03DBA3E8 MADD W20, W20, W19, W0
	0x03DBA3EC ADD X0, X31, 0xC
	0x03DBA3F0 MOV X1, X31
	0x03DBA3F4 STR W8, [X31 + 0xC]
	0x03DBA3F8 BL 0x337B6D8
	0x03DBA3FC MOVZ W8, 0x27B8
	0x03DBA400 MOVK W8, 0xCC080000
	0x03DBA404 MUL W8, W8, W19
	0x03DBA408 MADD W8, W20, W19, W8
	0x03DBA40C LDP X20, X19, [X31 + 0x20]
	0x03DBA410 LDR X30, [X31 + 0x10]
	0x03DBA414 ADD W0, W0, W8
	0x03DBA418 ADD X31, X31, 0x30
	0x03DBA41C RET
	0x03DBA420 STP X30, X23, [X31 - 0x30]!
	0x03DBA424 STP X22, X21, [X31 + 0x10]
	0x03DBA428 STP X20, X19, [X31 + 0x20]
	0x03DBA42C ADRP X21, 0x62E000
	0x03DBA430 LDRB W8, [X21 + 0x6C]
	0x03DBA434 MOV X19, X1
	0x03DBA438 MOV X20, X0
	0x03DBA43C TBNZ X8, 0x0, 0x3DBA454
	0x03DBA440 ADRP X0, 0x364000
	0x03DBA444 LDR X0, [X0 + 0xD30]
	0x03DBA448 BL 0x1C16CF4
	0x03DBA44C MOVZ W8, 0x1
	0x03DBA450 STRB W8, [X21 + 0x6C]
	0x03DBA454 CBZ X19, 0x3DBA4A8
	0x03DBA458 ADRP X22, 0x364000
	0x03DBA45C LDR W8, [X20 + 0x8]
	0x03DBA460 LDR X22, [X22 + 0xD30]
	0x03DBA464 CBZ W8, 0x3DBA4B0
	0x03DBA468 LDR X8, [X19]
	0x03DBA46C LDR X1, [X22]
	0x03DBA470 LDRH W9, [X8 + 0x12E]
	0x03DBA474 CBZ X9, 0x3DBA498
	0x03DBA478 LDR X10, [X8 + 0xB0]
	0x03DBA47C ADD X10, X10, 0x8
	0x03DBA480 LDUR X11, [X10 - 0x8]
	0x03DBA484 CMP X11, X1
	0x03DBA488 B.EQ 0x3DBA4B8
	0x03DBA48C SUBS X9, X9, 0x1
	0x03DBA490 ADD X10, X10, 0x10
	0x03DBA494 B.NE 0x3DBA480
	0x03DBA498 MOVZ W2, 0x4
	0x03DBA49C MOV X0, X19
	0x03DBA4A0 BL 0x1C5C788
	0x03DBA4A4 B 0x3DBA4C8
	0x03DBA4A8 MOV W0, W31
	0x03DBA4AC B 0x3DBA560
	0x03DBA4B0 MOVZ W21, 0x1
	0x03DBA4B4 B 0x3DBA4E0
	0x03DBA4B8 LDR W9, [X10]
	0x03DBA4BC ADD W9, W9, 0x4
	0x03DBA4C0 ADD X8, X8, W9, 0x4, SXTW
	0x03DBA4C4 ADD X0, X8, 0x138
	0x03DBA4C8 LDP X8, X1, [X0]
	0x03DBA4CC MOV X0, X19
	0x03DBA4D0 BLR X8
	0x03DBA4D4 LDR W8, [X20 + 0x8]
	0x03DBA4D8 CMP W0, W8
	0x03DBA4DC CSET W21, GE
	0x03DBA4E0 LDR X8, [X19]
	0x03DBA4E4 LDR W23, [X20]
	0x03DBA4E8 LDR X1, [X22]
	0x03DBA4EC LDRH W9, [X8 + 0x12E]
	0x03DBA4F0 CBZ X9, 0x3DBA514
	0x03DBA4F4 LDR X10, [X8 + 0xB0]
	0x03DBA4F8 ADD X10, X10, 0x8
	0x03DBA4FC LDUR X11, [X10 - 0x8]
	0x03DBA500 CMP X11, X1
	0x03DBA504 B.EQ 0x3DBA524
	0x03DBA508 SUBS X9, X9, 0x1
	0x03DBA50C ADD X10, X10, 0x10
	0x03DBA510 B.NE 0x3DBA4FC
	0x03DBA514 MOVZ W2, 0x5
	0x03DBA518 MOV X0, X19
	0x03DBA51C BL 0x1C5C788
	0x03DBA520 B 0x3DBA534
	0x03DBA524 LDR W9, [X10]
	0x03DBA528 ADD W9, W9, 0x5
	0x03DBA52C ADD X8, X8, W9, 0x4, SXTW
	0x03DBA530 ADD X0, X8, 0x138
	0x03DBA534 LDP X8, X1, [X0]
	0x03DBA538 MOV X0, X19
	0x03DBA53C BLR X8
	0x03DBA540 CMP W23, W0
	0x03DBA544 B.NE 0x3DBA558
	0x03DBA548 MOV X0, X20
	0x03DBA54C MOV X1, X19
	0x03DBA550 BL 0x3DBA570
	0x03DBA554 B 0x3DBA55C
	0x03DBA558 MOV W0, W31
	0x03DBA55C AND W0, W21, W0, 0x0
	0x03DBA560 LDP X20, X19, [X31 + 0x20]
	0x03DBA564 LDP X22, X21, [X31 + 0x10]
	0x03DBA568 LDP X30, X23, [X31], #0x30
	0x03DBA56C RET
	0x03DBA570 STP X30, X23, [X31 - 0x30]!
	0x03DBA574 STP X22, X21, [X31 + 0x10]
	0x03DBA578 STP X20, X19, [X31 + 0x20]
	0x03DBA57C ADRP X21, 0x62E000
	0x03DBA580 LDRB W8, [X21 + 0x6D]
	0x03DBA584 MOV X20, X1
	0x03DBA588 MOV X19, X0
	0x03DBA58C TBNZ X8, 0x0, 0x3DBA5A4
	0x03DBA590 ADRP X0, 0x364000
	0x03DBA594 LDR X0, [X0 + 0xD30]
	0x03DBA598 BL 0x1C16CF4
	0x03DBA59C MOVZ W8, 0x1
	0x03DBA5A0 STRB W8, [X21 + 0x6D]
	0x03DBA5A4 CBZ X20, 0x3DBA5F0
	0x03DBA5A8 ADRP X23, 0x364000
	0x03DBA5AC LDR X8, [X20]
	0x03DBA5B0 LDR X23, [X23 + 0xD30]
	0x03DBA5B4 LDRH W9, [X8 + 0x12E]
	0x03DBA5B8 LDR X1, [X23]
	0x03DBA5BC CBZ X9, 0x3DBA5E0
	0x03DBA5C0 LDR X10, [X8 + 0xB0]
	0x03DBA5C4 ADD X10, X10, 0x8
	0x03DBA5C8 LDUR X11, [X10 - 0x8]
	0x03DBA5CC CMP X11, X1
	0x03DBA5D0 B.EQ 0x3DBA604
	0x03DBA5D4 SUBS X9, X9, 0x1
	0x03DBA5D8 ADD X10, X10, 0x10
	0x03DBA5DC B.NE 0x3DBA5C8
	0x03DBA5E0 MOVZ W2, 0xA
	0x03DBA5E4 MOV X0, X20
	0x03DBA5E8 BL 0x1C5C788
	0x03DBA5EC B 0x3DBA614
	0x03DBA5F0 LDP X20, X19, [X31 + 0x20]
	0x03DBA5F4 LDP X22, X21, [X31 + 0x10]
	0x03DBA5F8 MOV W0, W31
	0x03DBA5FC LDP X30, X23, [X31], #0x30
	0x03DBA600 RET
	0x03DBA604 LDR W9, [X10]
	0x03DBA608 ADD W9, W9, 0xA
	0x03DBA60C ADD X8, X8, W9, 0x4, SXTW
	0x03DBA610 ADD X0, X8, 0x138
	0x03DBA614 LDP X8, X1, [X0]
	0x03DBA618 MOV X0, X20
	0x03DBA61C BLR X8
	0x03DBA620 LDR X8, [X20]
	0x03DBA624 LDR X1, [X23]
	0x03DBA628 MOV W21, W0
	0x03DBA62C LDRH W9, [X8 + 0x12E]
	0x03DBA630 CBZ X9, 0x3DBA654
	0x03DBA634 LDR X10, [X8 + 0xB0]
	0x03DBA638 ADD X10, X10, 0x8
	0x03DBA63C LDUR X11, [X10 - 0x8]
	0x03DBA640 CMP X11, X1
	0x03DBA644 B.EQ 0x3DBA664
	0x03DBA648 SUBS X9, X9, 0x1
	0x03DBA64C ADD X10, X10, 0x10
	0x03DBA650 B.NE 0x3DBA63C
	0x03DBA654 MOVZ W2, 0x8
	0x03DBA658 MOV X0, X20
	0x03DBA65C BL 0x1C5C788
	0x03DBA660 B 0x3DBA674
	0x03DBA664 LDR W9, [X10]
	0x03DBA668 ADD W9, W9, 0x8
	0x03DBA66C ADD X8, X8, W9, 0x4, SXTW
	0x03DBA670 ADD X0, X8, 0x138
	0x03DBA674 LDP X8, X1, [X0]
	0x03DBA678 MOV X0, X20
	0x03DBA67C BLR X8
	0x03DBA680 LDR X8, [X20]
	0x03DBA684 LDR X1, [X23]
	0x03DBA688 MOV W22, W0
	0x03DBA68C LDRH W9, [X8 + 0x12E]
	0x03DBA690 CBZ X9, 0x3DBA6B4
	0x03DBA694 LDR X10, [X8 + 0xB0]
	0x03DBA698 ADD X10, X10, 0x8
	0x03DBA69C LDUR X11, [X10 - 0x8]
	0x03DBA6A0 CMP X11, X1
	0x03DBA6A4 B.EQ 0x3DBA6C4
	0x03DBA6A8 SUBS X9, X9, 0x1
	0x03DBA6AC ADD X10, X10, 0x10
	0x03DBA6B0 B.NE 0x3DBA69C
	0x03DBA6B4 MOVZ W2, 0x7
	0x03DBA6B8 MOV X0, X20
	0x03DBA6BC BL 0x1C5C788
	0x03DBA6C0 B 0x3DBA6D4
	0x03DBA6C4 LDR W9, [X10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x62F000
	007 Move W8, [X21+97]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {49}
	014 Move X0, 0x3AF000
	015 Move X0, [X0+3792]
	016 Call 0x1C17CF4
	017 Move X0, 0x364000
	018 Move X0, [X0+1744]
	019 Call 0x1C17CF4
	020 Move X0, 0x3AF000
	021 Move X0, [X0+3800]
	022 Call 0x1C17CF4
	023 Move X0, 0x364000
	024 Move X0, [X0+1768]
	025 Call 0x1C17CF4
	026 Move X0, 0x3AF000
	027 Move X0, [X0+1848]
	028 Call 0x1C17CF4
	029 Move X0, 0x364000
	030 Move X0, [X0+1784]
	031 Call 0x1C17CF4
	032 Move X0, 0x364000
	033 Move X0, [X0+1792]
	034 Call 0x1C17CF4
	035 Move X0, 0x3AF000
	036 Move X0, [X0+1904]
	037 Call 0x1C17CF4
	038 Move X0, 0x3AF000
	039 Move X0, [X0+3808]
	040 Call 0x1C17CF4
	041 Move X0, 0x3AF000
	042 Move X0, [X0+3816]
	043 Call 0x1C17CF4
	044 Move X0, 0x3AD000
	045 Move X0, [X0+2408]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X21+97], W8
	049 Compare X20, 0
	050 JumpIfEqual {195}
	051 Move X8, [X20]
	052 Move X21, 0x364000
	053 Move X22, 0x364000
	054 Move X0, X20
	055 Move X9, [X8+392]
	056 Move X1, [X8+400]
	057 Move X21, [X21+1784]
	058 Move X22, [X22+1768]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X8, [X21]
	061 Move X21, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, [X22]
	068 Call 0x2D0E5C8
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W8, 1
	071 Move [X19+1100], W8
	072 Move X0, X19
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move W1, 2048
	078 Move X2, X31
	079 Move X30, [X31+48]
	080 Call VisualElement.IncrementVersion, X0, X1
	081 Return 
	082 Move X8, [X20]
	083 Move X0, X20
	084 Move X9, [X8+392]
	085 Move X1, [X8+400]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X8, 0x364000
	088 Move X8, [X8+1792]
	089 Move X21, X0
	090 Move X8, [X8]
	091 Move W9, [X8+224]
	092 Compare W9, 0
	093 JumpIfNotEqual {96}
	094 Move X0, X8
	095 Call 0x1C17DFC
	096 Move X8, 0x364000
	097 Move X8, [X8+1744]
	098 Move X0, [X8]
	099 Call 0x2D0E5C8
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X8, 0x3AD000
	102 Move X8, [X8+2408]
	103 Move X9, [X20]
	104 Move X8, [X8]
	105 Move W11, [X9+304]
	106 Move W10, [X8+304]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X9, [X9+200]
	109 Add X9, X9, X10
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W8, 1
	113 Move [X19+1101], W8
	114 Move X8, [X20+144]
	115 Move [X19+1104], X8
	116 Move W8, [X20+160]
	117 Move [X19+1005], W8
	118 Move X8, [X20]
	119 Move X0, X20
	120 Move X9, [X8+392]
	121 Move X1, [X8+400]
	122 NotImplemented "Instruction BLR not yet implemented."
	123 Move X8, 0x3AF000
	124 Move X8, [X8+1904]
	125 Move X21, X0
	126 Move X8, [X8]
	127 Move W9, [X8+224]
	128 Compare W9, 0
	129 JumpIfNotEqual {132}
	130 Move X0, X8
	131 Call 0x1C17DFC
	132 Move X8, 0x3AF000
	133 Move X8, [X8+3800]
	134 Move X0, [X8]
	135 Call 0x2D0E5C8
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X19, [X19+928]
	138 Compare X19, 0
	139 JumpIfEqual {195}
	140 Move X8, [X19]
	141 Move X0, X19
	142 Move X9, [X8+600]
	143 Move X1, [X8+608]
	144 NotImplemented "Instruction BLR not yet implemented."
	145 Move X8, [X19]
	146 Subtract W1, W0, 1
	147 Move X0, X19
	148 Move X20, [X31+32]
	149 Move X19, [X31+40]
	150 Move X3, [X8+616]
	151 Move X2, [X8+624]
	152 Move X22, [X31+16]
	153 Move X21, [X31+24]
	154 Move X30, [X31+48]
	155 CallNoReturn X3
	156 Move X8, [X20]
	157 Move X0, X20
	158 Move X9, [X8+392]
	159 Move X1, [X8+400]
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move X8, 0x3AF000
	162 Move X8, [X8+1848]
	163 Move X20, X0
	164 Move X8, [X8]
	165 Move W9, [X8+224]
	166 Compare W9, 0
	167 JumpIfNotEqual {170}
	168 Move X0, X8
	169 Call 0x1C17DFC
	170 Move X8, 0x3AF000
	171 Move X8, [X8+3792]
	172 Move X0, [X8]
	173 Call 0x2D0E5C8
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move X20, [X19+928]
	176 Compare X20, 0
	177 JumpIfEqual {195}
	178 Move X8, [X20]
	179 Move X0, X20
	180 Move X9, [X8+600]
	181 Move X1, [X8+608]
	182 NotImplemented "Instruction BLR not yet implemented."
	183 Move X8, [X20]
	184 Add W1, W0, 1
	185 Move X0, X20
	186 Move X9, [X8+616]
	187 Move X2, [X8+624]
	188 NotImplemented "Instruction BLR not yet implemented."
	189 Move X0, X19
	190 Move X20, [X31+32]
	191 Move X19, [X31+40]
	192 Move X22, [X31+16]
	193 Move X21, [X31+24]
	194 Move X30, [X31+48]
	195 Move X20, [X31+32]
	196 Move X19, [X31+40]
	197 Move X22, [X31+16]
	198 Move X21, [X31+24]
	199 Move X30, [X31+48]
	200 Return 
	201 Move W8, 1
	202 Move [X19+1101], W8
	203 Call 0x1C17F20

Method: System.Void SetFoldoutDepthClass()

Disassembly:
	0x03DBA6C8 ADD W9, W9, 0x7
	0x03DBA6CC ADD X8, X8, W9, 0x4, SXTW
	0x03DBA6D0 ADD X0, X8, 0x138
	0x03DBA6D4 LDP X8, X1, [X0]
	0x03DBA6D8 MOV X0, X20
	0x03DBA6DC BLR X8
	0x03DBA6E0 LDR X8, [X20]
	0x03DBA6E4 LDR X1, [X23]
	0x03DBA6E8 MOV W23, W0
	0x03DBA6EC LDRH W9, [X8 + 0x12E]
	0x03DBA6F0 CBZ X9, 0x3DBA714
	0x03DBA6F4 LDR X10, [X8 + 0xB0]
	0x03DBA6F8 ADD X10, X10, 0x8
	0x03DBA6FC LDUR X11, [X10 - 0x8]
	0x03DBA700 CMP X11, X1
	0x03DBA704 B.EQ 0x3DBA724
	0x03DBA708 SUBS X9, X9, 0x1
	0x03DBA70C ADD X10, X10, 0x10
	0x03DBA710 B.NE 0x3DBA6FC
	0x03DBA714 MOVZ W2, 0x9
	0x03DBA718 MOV X0, X20
	0x03DBA71C BL 0x1C5C788
	0x03DBA720 B 0x3DBA734
	0x03DBA724 LDR W9, [X10]
	0x03DBA728 ADD W9, W9, 0x9
	0x03DBA72C ADD X8, X8, W9, 0x4, SXTW
	0x03DBA730 ADD X0, X8, 0x138
	0x03DBA734 LDP X8, X1, [X0]
	0x03DBA738 MOV X0, X20
	0x03DBA73C BLR X8
	0x03DBA740 AND W4, W0, 0x1
	0x03DBA744 AND W1, W21, 0x1
	0x03DBA748 AND W2, W22, 0x1
	0x03DBA74C MOV X0, X19
	0x03DBA750 LDP X20, X19, [X31 + 0x20]
	0x03DBA754 LDP X22, X21, [X31 + 0x10]
	0x03DBA758 AND W3, W23, 0x1
	0x03DBA75C LDP X30, X23, [X31], #0x30
	0x03DBA760 B 0x3DBA764
	0x03DBA764 LDR W8, [X0 + 0x4]
	0x03DBA768 TBZ X8, 0x2, 0x3DBA770
	0x03DBA76C TBZ X1, 0x0, 0x3DBA798
	0x03DBA770 BIC W9, W1, W8, 0x2
	0x03DBA774 TBNZ X9, 0x0, 0x3DBA798
	0x03DBA778 TBZ X8, 0x1, 0x3DBA780
	0x03DBA77C TBZ X2, 0x0, 0x3DBA798
	0x03DBA780 BIC W9, W2, W8, 0x1
	0x03DBA784 TBNZ X9, 0x0, 0x3DBA798
	0x03DBA788 TBZ X8, 0x0, 0x3DBA790
	0x03DBA78C TBZ X3, 0x0, 0x3DBA798
	0x03DBA790 BIC W9, W3, W8, 0x0
	0x03DBA794 TBZ X9, 0x0, 0x3DBA7A0
	0x03DBA798 MOV W0, W31
	0x03DBA79C RET
	0x03DBA7A0 ORN W9, W4, W8, 0x3
	0x03DBA7A4 TBZ X9, 0x0, 0x3DBA798
	0x03DBA7A8 ORN W9, W31, W4, 0x0
	0x03DBA7AC ORR W8, W9, W8, 0x3
	0x03DBA7B0 AND W0, W8, 0x1
	0x03DBA7B4 RET
	0x03DBA7B8 STP X30, X23, [X31 - 0x30]!
	0x03DBA7BC STP X22, X21, [X31 + 0x10]
	0x03DBA7C0 STP X20, X19, [X31 + 0x20]
	0x03DBA7C4 ADRP X21, 0x62E000
	0x03DBA7C8 LDRB W8, [X21 + 0x6E]
	0x03DBA7CC MOV X19, X1
	0x03DBA7D0 MOV X20, X0
	0x03DBA7D4 TBNZ X8, 0x0, 0x3DBA7EC
	0x03DBA7D8 ADRP X0, 0x362000
	0x03DBA7DC LDR X0, [X0 + 0xE78]
	0x03DBA7E0 BL 0x1C16CF4
	0x03DBA7E4 MOVZ W8, 0x1
	0x03DBA7E8 STRB W8, [X21 + 0x6E]
	0x03DBA7EC CBZ X19, 0x3DBA840
	0x03DBA7F0 ADRP X22, 0x362000
	0x03DBA7F4 LDR W8, [X20 + 0x8]
	0x03DBA7F8 LDR X22, [X22 + 0xE78]
	0x03DBA7FC CBZ W8, 0x3DBA848
	0x03DBA800 LDR X8, [X19]
	0x03DBA804 LDR X1, [X22]
	0x03DBA808 LDRH W9, [X8 + 0x12E]
	0x03DBA80C CBZ X9, 0x3DBA830
	0x03DBA810 LDR X10, [X8 + 0xB0]
	0x03DBA814 ADD X10, X10, 0x8
	0x03DBA818 LDUR X11, [X10 - 0x8]
	0x03DBA81C CMP X11, X1
	0x03DBA820 B.EQ 0x3DBA850
	0x03DBA824 SUBS X9, X9, 0x1
	0x03DBA828 ADD X10, X10, 0x10
	0x03DBA82C B.NE 0x3DBA818
	0x03DBA830 MOVZ W2, 0x9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x62F000
	008 Move W8, [X20+98]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x3AB000
	015 Move X0, [X0+192]
	016 Call 0x1C17CF4
	017 Move X0, 0x33B000
	018 Move X0, [X0+456]
	019 Call 0x1C17CF4
	020 Move X0, 0x362000
	021 Move X0, [X0+2904]
	022 Call 0x1C17CF4
	023 Move X0, 0x3AA000
	024 Move X0, [X0+2840]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+98], W8
	028 Move X22, 0x3AB000
	029 Move X21, 0x362000
	030 Move X23, 0x3AA000
	031 Move X22, [X22+192]
	032 Move X21, [X21+2904]
	033 Move X23, [X23+2840]
	034 Move W20, W31
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X8, [X8+16]
	043 Compare X8, 0
	044 JumpIfEqual {110}
	045 Move W9, [X8+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W9, [X0+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {56}
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X8, [X8+184]
	053 Move X8, [X8+16]
	054 Compare X8, 0
	055 JumpIfEqual {110}
	056 Move X2, [X21]
	057 Move X0, X8
	058 Move W1, W20
	059 Call List`1<Object>.get_Item, X0, X1
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call VisualElement.RemoveFromClassList, X0, X1
	064 Add W20, W20, 1
	065 Move X0, [X23]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X19
	071 Move X1, X31
	072 Call VisualElementUtils.GetFoldoutDepth, X0
	073 Compare W0, 0
	074 JumpIfEqual {103}
	075 Move W20, W0
	076 Move X0, [X22]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {82}
	080 Call 0x1C17DFC
	081 Move X0, [X22]
	082 Move X8, [X0+184]
	083 Move X0, [X8+16]
	084 Compare X0, 0
	085 JumpIfEqual {110}
	086 Move W8, [X0+24]
	087 Move X2, [X21]
	088 Subtract W8, W8, 1
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSEL not yet implemented."
	091 Call List`1<Object>.get_Item, X0, X1
	092 Move X1, X0
	093 Move X0, X19
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X2, X31
	099 Move X30, [X31+48]
	100 Move X23, [X31+56]
	101 Call VisualElement.AddToClassList, X0, X1
	102 Return 
	103 Move X20, [X31+32]
	104 Move X19, [X31+40]
	105 Move X22, [X31+16]
	106 Move X21, [X31+24]
	107 Move X30, [X31+48]
	108 Move X23, [X31+56]
	109 Return 
	110 Call 0x1C17F20

Method: UnityEngine.Vector2 DoMeasure(System.Single desiredWidth, UnityEngine.UIElements.VisualElement/MeasureMode widthMode, System.Single desiredHeight, UnityEngine.UIElements.VisualElement/MeasureMode heightMode)

Disassembly:
	0x03DBA834 MOV X0, X19
	0x03DBA838 BL 0x1C5C788
	0x03DBA83C B 0x3DBA860
	0x03DBA840 MOV W0, W31
	0x03DBA844 B 0x3DBA8F8
	0x03DBA848 MOVZ W21, 0x1
	0x03DBA84C B 0x3DBA878
	0x03DBA850 LDR W9, [X10]
	0x03DBA854 ADD W9, W9, 0x9
	0x03DBA858 ADD X8, X8, W9, 0x4, SXTW
	0x03DBA85C ADD X0, X8, 0x138
	0x03DBA860 LDP X8, X1, [X0]
	0x03DBA864 MOV X0, X19
	0x03DBA868 BLR X8
	0x03DBA86C LDR W8, [X20 + 0x8]
	0x03DBA870 CMP W0, W8
	0x03DBA874 CSET W21, GE
	0x03DBA878 LDR X8, [X19]
	0x03DBA87C LDR W23, [X20]
	0x03DBA880 LDR X1, [X22]
	0x03DBA884 LDRH W9, [X8 + 0x12E]
	0x03DBA888 CBZ X9, 0x3DBA8AC
	0x03DBA88C LDR X10, [X8 + 0xB0]
	0x03DBA890 ADD X10, X10, 0x8
	0x03DBA894 LDUR X11, [X10 - 0x8]
	0x03DBA898 CMP X11, X1
	0x03DBA89C B.EQ 0x3DBA8BC
	0x03DBA8A0 SUBS X9, X9, 0x1
	0x03DBA8A4 ADD X10, X10, 0x10
	0x03DBA8A8 B.NE 0x3DBA894
	0x03DBA8AC MOVZ W2, 0x3
	0x03DBA8B0 MOV X0, X19
	0x03DBA8B4 BL 0x1C5C788
	0x03DBA8B8 B 0x3DBA8CC
	0x03DBA8BC LDR W9, [X10]
	0x03DBA8C0 ADD W9, W9, 0x3
	0x03DBA8C4 ADD X8, X8, W9, 0x4, SXTW
	0x03DBA8C8 ADD X0, X8, 0x138
	0x03DBA8CC LDP X8, X1, [X0]
	0x03DBA8D0 MOV X0, X19
	0x03DBA8D4 BLR X8
	0x03DBA8D8 CMP W23, W0
	0x03DBA8DC B.NE 0x3DBA8F0
	0x03DBA8E0 MOV X0, X20
	0x03DBA8E4 MOV X1, X19
	0x03DBA8E8 BL 0x3DBA908
	0x03DBA8EC B 0x3DBA8F4
	0x03DBA8F0 MOV W0, W31
	0x03DBA8F4 AND W0, W21, W0, 0x0
	0x03DBA8F8 LDP X20, X19, [X31 + 0x20]
	0x03DBA8FC LDP X22, X21, [X31 + 0x10]
	0x03DBA900 LDP X30, X23, [X31], #0x30
	0x03DBA904 RET
	0x03DBA908 STP X30, X23, [X31 - 0x30]!
	0x03DBA90C STP X22, X21, [X31 + 0x10]
	0x03DBA910 STP X20, X19, [X31 + 0x20]
	0x03DBA914 ADRP X21, 0x62E000
	0x03DBA918 LDRB W8, [X21 + 0x6F]
	0x03DBA91C MOV X20, X1
	0x03DBA920 MOV X19, X0
	0x03DBA924 TBNZ X8, 0x0, 0x3DBA93C
	0x03DBA928 ADRP X0, 0x362000
	0x03DBA92C LDR X0, [X0 + 0xE78]
	0x03DBA930 BL 0x1C16CF4
	0x03DBA934 MOVZ W8, 0x1
	0x03DBA938 STRB W8, [X21 + 0x6F]
	0x03DBA93C CBZ X20, 0x3DBA988
	0x03DBA940 ADRP X23, 0x362000
	0x03DBA944 LDR X8, [X20]
	0x03DBA948 LDR X23, [X23 + 0xE78]
	0x03DBA94C LDRH W9, [X8 + 0x12E]
	0x03DBA950 LDR X1, [X23]
	0x03DBA954 CBZ X9, 0x3DBA978
	0x03DBA958 LDR X10, [X8 + 0xB0]
	0x03DBA95C ADD X10, X10, 0x8
	0x03DBA960 LDUR X11, [X10 - 0x8]
	0x03DBA964 CMP X11, X1
	0x03DBA968 B.EQ 0x3DBA99C
	0x03DBA96C SUBS X9, X9, 0x1
	0x03DBA970 ADD X10, X10, 0x10
	0x03DBA974 B.NE 0x3DBA960
	0x03DBA978 MOVZ W2, 0x17
	0x03DBA97C MOV X0, X20
	0x03DBA980 BL 0x1C5C788
	0x03DBA984 B 0x3DBA9AC
	0x03DBA988 LDP X20, X19, [X31 + 0x20]
	0x03DBA98C LDP X22, X21, [X31 + 0x10]
	0x03DBA990 MOV W0, W31
	0x03DBA994 LDP X30, X23, [X31], #0x30
	0x03DBA998 RET
	0x03DBA99C LDR W9, [X10]
	0x03DBA9A0 ADD W9, W9, 0x17
	0x03DBA9A4 ADD X8, X8, W9, 0x4, SXTW
	0x03DBA9A8 ADD X0, X8, 0x138
	0x03DBA9AC LDP X8, X1, [X0]
	0x03DBA9B0 MOV X0, X20
	0x03DBA9B4 BLR X8
	0x03DBA9B8 LDR X8, [X20]
	0x03DBA9BC LDR X1, [X23]
	0x03DBA9C0 MOV W21, W0
	0x03DBA9C4 LDRH W9, [X8 + 0x12E]
	0x03DBA9C8 CBZ X9, 0x3DBA9EC
	0x03DBA9CC LDR X10, [X8 + 0xB0]
	0x03DBA9D0 ADD X10, X10, 0x8
	0x03DBA9D4 LDUR X11, [X10 - 0x8]
	0x03DBA9D8 CMP X11, X1
	0x03DBA9DC B.EQ 0x3DBA9FC
	0x03DBA9E0 SUBS X9, X9, 0x1
	0x03DBA9E4 ADD X10, X10, 0x10
	0x03DBA9E8 B.NE 0x3DBA9D4
	0x03DBA9EC MOVZ W2, 0x15
	0x03DBA9F0 MOV X0, X20
	0x03DBA9F4 BL 0x1C5C788
	0x03DBA9F8 B 0x3DBAA0C
	0x03DBA9FC LDR W9, [X10]
	0x03DBAA00 ADD W9, W9, 0x15
	0x03DBAA04 ADD X8, X8, W9, 0x4, SXTW
	0x03DBAA08 ADD X0, X8, 0x138
	0x03DBAA0C LDP X8, X1, [X0]
	0x03DBAA10 MOV X0, X20
	0x03DBAA14 BLR X8
	0x03DBAA18 LDR X8, [X20]
	0x03DBAA1C LDR X1, [X23]
	0x03DBAA20 MOV W22, W0
	0x03DBAA24 LDRH W9, [X8 + 0x12E]
	0x03DBAA28 CBZ X9, 0x3DBAA4C
	0x03DBAA2C LDR X10, [X8 + 0xB0]
	0x03DBAA30 ADD X10, X10, 0x8
	0x03DBAA34 LDUR X11, [X10 - 0x8]
	0x03DBAA38 CMP X11, X1
	0x03DBAA3C B.EQ 0x3DBAA5C
	0x03DBAA40 SUBS X9, X9, 0x1
	0x03DBAA44 ADD X10, X10, 0x10
	0x03DBAA48 B.NE 0x3DBAA34
	0x03DBAA4C MOVZ W2, 0x14
	0x03DBAA50 MOV X0, X20
	0x03DBAA54 BL 0x1C5C788
	0x03DBAA58 B 0x3DBAA6C
	0x03DBAA5C LDR W9, [X10]
	0x03DBAA60 ADD W9, W9, 0x14
	0x03DBAA64 ADD X8, X8, W9, 0x4, SXTW
	0x03DBAA68 ADD X0, X8, 0x138
	0x03DBAA6C LDP X8, X1, [X0]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D13
	003 Move [X31+72], D12
	004 Move [X31+80], D11
	005 Move [X31+88], D10
	006 Move [X31+96], D9
	007 Move [X31+104], D8
	008 Move [X31+112], X30
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X22, 0x62F000
	015 Move W8, [X22+99]
	016 Move W19, W2
	017 Move V8, V1
	018 Move W20, W1
	019 Move V9, V0
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x3AB000
	026 Move X0, [X0+192]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+99], W8
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move V10, V9
	033 Move X0, X31
	034 Call Event.get_current
	035 Move X22, X0
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move X23, 0x3AB000
	039 Move X23, [X23+192]
	040 Move X0, [X23]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {46}
	044 Call 0x1C17DFC
	045 Move X0, [X23]
	046 Move X8, [X0+184]
	047 Move X0, X31
	048 Move X23, [X8+56]
	049 Call Event.get_current
	050 Compare X23, 0
	051 JumpIfEqual {162}
	052 Move X1, X0
	053 Move X0, X23
	054 Move X2, X31
	055 Call Event.CopyFrom, X0, X1
	056 Move X23, 0x3AB000
	057 Move X23, [X23+192]
	058 Move X0, [X23]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X23]
	064 Move X8, [X0+184]
	065 Move X0, [X8+48]
	066 Compare X0, 0
	067 JumpIfEqual {162}
	068 Move X1, [X8+40]
	069 Move X2, X31
	070 Call Event.CopyFrom, X0, X1
	071 Move X0, X21
	072 Move X1, X31
	073 Call VisualElement.get_layout, X0
	074 Move X0, [X23]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction FCSEL not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W8, [X0+224]
	079 Move V10, V0
	080 Move V11, V1
	081 NotImplemented "Instruction FCSEL not yet implemented."
	082 Compare W8, 0
	083 JumpIfNotEqual {86}
	084 Call 0x1C17DFC
	085 Move X0, [X23]
	086 Add X9, X21, 1032
	087 Move X8, [X0+184]
	088 Move V0, [X9+32]
	089 Move V1, [X9+48]
	090 Move V2, [X9]
	091 Move V3, [X9+16]
	092 Add X2, X31, 0
	093 Move X1, [X8+48]
	094 Move [X31+32], V0
	095 Move [X31+40], V1
	096 Move [X31], V2
	097 Move [X31+8], V3
	098 Move V0, [X21+1016]
	099 Move V1, [X21+1020]
	100 Move V2, [X21+1024]
	101 Move V3, [X21+1028]
	102 Move X4, [X21+968]
	103 Move W3, 1
	104 Move W5, 1
	105 Move X0, X21
	106 Move V4, V10
	107 Move V5, V11
	108 Move V6, V12
	109 Move V7, V13
	110 Call IMGUIContainer.DoOnGUI, X0, X1, X2, X3, X4, X5, X6, X7
	111 Move X0, X21
	112 Call IMGUIContainer.get_layoutMeasuredWidth, X0
	113 Move X0, X21
	114 Move V10, V0
	115 Call IMGUIContainer.get_layoutMeasuredHeight, X0
	116 Move V11, V0
	117 Compare X22, 0
	118 JumpIfEqual {136}
	119 Move X0, X31
	120 Call Event.get_current
	121 Move X8, [X23]
	122 Move X21, X0
	123 Move W9, [X8+224]
	124 Compare W9, 0
	125 JumpIfNotEqual {128}
	126 Move X0, X8
	127 Call 0x1C17DFC
	128 Compare X21, 0
	129 JumpIfEqual {162}
	130 Move X8, [X23]
	131 Move X0, X21
	132 Move X2, X31
	133 Move X8, [X8+184]
	134 Move X1, [X8+56]
	135 Call Event.CopyFrom, X0, X1
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move V10, V9
	138 NotImplemented "Instruction CMP not yet implemented."
	139 NotImplemented "Instruction FCMP not yet implemented."
	140 NotImplemented "Instruction FCSEL not yet implemented."
	141 NotImplemented "Instruction CMP not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction FCMP not yet implemented."
	144 NotImplemented "Instruction FCSEL not yet implemented."
	145 Move V8, V11
	146 Move V0, V10
	147 Move V1, V8
	148 Move X20, [X31+144]
	149 Move X19, [X31+152]
	150 Move X22, [X31+128]
	151 Move X21, [X31+136]
	152 Move X30, [X31+112]
	153 Move X23, [X31+120]
	154 Move D9, [X31+96]
	155 Move D8, [X31+104]
	156 Move D11, [X31+80]
	157 Move D10, [X31+88]
	158 Move D13, [X31+64]
	159 Move D12, [X31+72]
	160 Add X31, X31, 160
	161 Return X0
	162 Call 0x1C17F20

Method: UnityEngine.Rect GetCurrentClipRect()

Disassembly:
	0x03DBA124 LDRB W11, [X9, X8, LSL]
	0x03DBA128 ADD X10, X10, X11, 0x2, LSL
	0x03DBA12C MOVZ W8, 0xB
	0x03DBA130 BR X10
	0x03DBA134 MOV X1, X31
	0x03DBA138 BL 0x3D9D950
	0x03DBA13C MOV W8, W31
	0x03DBA140 LDP X20, X19, [X31 + 0x10]
	0x03DBA144 MOV W0, W8
	0x03DBA148 LDR X30, [X31], #0x20
	0x03DBA14C RET
	0x03DBA150 CMP W9, 0x61
	0x03DBA154 B.NE 0x3DBA13C
	0x03DBA158 ADRP X8, 0x3AC000

ISIL:
	001 Move [X31-16], X30
	002 Move V2, [X0+996]
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move V3, [X0+1000]
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move V0, [X0+988]
	007 Move V1, [X0+992]
	008 Move X1, X31
	009 Call VisualElement.get_worldBound, X0
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Void GetCurrentTransformAndClip(UnityEngine.UIElements.IMGUIContainer container, UnityEngine.Event evt, out UnityEngine.Matrix4x4 transform, out UnityEngine.Rect clipRect)

Disassembly:
	0x03DBA224 BR X10
	0x03DBA228 LDR X8, [X0 + 0x18]
	0x03DBA22C CBZ X8, 0x3DBA29C
	0x03DBA230 LDR X4, [X8 + 0x18]
	0x03DBA234 LDR X0, [X8 + 0x40]
	0x03DBA238 LDR X3, [X8 + 0x28]
	0x03DBA23C MOVZ W1, 0x7
	0x03DBA240 B 0x3DBA294
	0x03DBA244 LDR X8, [X0 + 0x18]
	0x03DBA248 CBZ X8, 0x3DBA29C
	0x03DBA24C LDR X4, [X8 + 0x18]
	0x03DBA250 LDR X0, [X8 + 0x40]
	0x03DBA254 LDR X3, [X8 + 0x28]
	0x03DBA258 MOVZ W1, 0x4
	0x03DBA25C B 0x3DBA294
	0x03DBA260 LDR X8, [X0 + 0x18]
	0x03DBA264 CBZ X8, 0x3DBA29C
	0x03DBA268 LDR X4, [X8 + 0x18]
	0x03DBA26C LDR X0, [X8 + 0x40]
	0x03DBA270 LDR X3, [X8 + 0x28]
	0x03DBA274 MOVZ W1, 0x6
	0x03DBA278 B 0x3DBA294
	0x03DBA27C LDR X8, [X0 + 0x18]
	0x03DBA280 CBZ X8, 0x3DBA29C
	0x03DBA284 LDR X4, [X8 + 0x18]
	0x03DBA288 LDR X0, [X8 + 0x40]
	0x03DBA28C LDR X3, [X8 + 0x28]
	0x03DBA290 MOVZ W1, 0x5
	0x03DBA294 LDR X30, [X31], #0x10
	0x03DBA298 BR X4
	0x03DBA29C LDR X30, [X31], #0x10
	0x03DBA2A0 RET
	0x03DBA2A4 BL 0x1C16F20
	0x03DBA2A8 LDR W0, [X0]
	0x03DBA2AC RET
	0x03DBA2B0 STR W1, [X0]
	0x03DBA2B4 RET
	0x03DBA2B8 LDR W0, [X0 + 0x4]
	0x03DBA2BC RET
	0x03DBA2C0 STR W1, [X0 + 0x4]
	0x03DBA2C4 RET
	0x03DBA2C8 LDR W0, [X0 + 0x8]
	0x03DBA2CC RET
	0x03DBA2D0 STP X30, X21, [X31 - 0x20]!
	0x03DBA2D4 STP X20, X19, [X31 + 0x10]
	0x03DBA2D8 ADRP X21, 0x62E000
	0x03DBA2DC LDRB W8, [X21 + 0x6B]
	0x03DBA2E0 MOV X20, X1
	0x03DBA2E4 MOV X19, X0
	0x03DBA2E8 TBNZ X8, 0x0, 0x3DBA300
	0x03DBA2EC ADRP X0, 0x364000
	0x03DBA2F0 LDR X0, [X0 + 0x668]
	0x03DBA2F4 BL 0x1C16CF4
	0x03DBA2F8 MOVZ W8, 0x1
	0x03DBA2FC STRB W8, [X21 + 0x6B]
	0x03DBA300 CBZ X20, 0x3DBA358
	0x03DBA304 ADRP X8, 0x364000
	0x03DBA308 LDR X8, [X8 + 0x668]
	0x03DBA30C LDR X9, [X20]
	0x03DBA310 LDR X8, [X8]
	0x03DBA314 CMP X9, X8
	0x03DBA318 B.NE 0x3DBA358
	0x03DBA31C MOV X0, X20
	0x03DBA320 BL 0x1C16E08
	0x03DBA324 LDR X8, [X0]
	0x03DBA328 LDR W9, [X19]
	0x03DBA32C CMP W9, W8
	0x03DBA330 B.NE 0x3DBA358

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+320], X29
	003 Move [X31+328], X30
	004 Move [X31+336], X22
	005 Move [X31+344], X21
	006 Move [X31+352], X20
	007 Move [X31+360], X19
	008 Compare X0, 0
	009 JumpIfEqual {103}
	010 Move X22, X3
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Call IMGUIContainer.GetCurrentClipRect, X0
	015 Add X8, X31, 192
	016 Move X0, X20
	017 Move X1, X31
	018 Move [X22], S0
	019 Move [X22+8], S1
	020 Move [X22+8], S2
	021 Move [X22+16], S3
	022 Call VisualElement.get_worldTransform, X0
	023 Move V1, [X31+224]
	024 Move V0, [X31+240]
	025 Move V3, [X31+192]
	026 Move V2, [X31+208]
	027 Move [X31+288], V1
	028 Move [X31+296], V0
	029 Move [X31+256], V3
	030 Move [X31+264], V2
	031 Move [X19+32], V1
	032 Move [X19+40], V0
	033 Move [X19], V3
	034 Move [X19+8], V2
	035 Compare X21, 0
	036 JumpIfEqual {95}
	037 Move X0, X21
	038 Move X1, X31
	039 Call Event.get_rawType, X0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, [X20+928]
	042 Compare X0, 0
	043 JumpIfEqual {95}
	044 Move X8, [X0]
	045 Move X9, [X8+840]
	046 Move X1, [X8+848]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Compare X0, 0
	049 JumpIfEqual {103}
	050 Move V1, [X0+48]
	051 Move V0, [X0+64]
	052 Move V3, [X0+16]
	053 Move V2, [X0+32]
	054 Add X8, X31, 192
	055 Move X0, X20
	056 Move X1, X31
	057 Move [X31+288], V1
	058 Move [X31+296], V0
	059 Move [X31+256], V3
	060 Move [X31+264], V2
	061 Call VisualElement.get_worldTransform, X0
	062 Move V0, [X31+192]
	063 Move V1, [X31+208]
	064 Move V2, [X31+224]
	065 Move V3, [X31+240]
	066 Add X8, X31, 128
	067 Add X0, X31, 64
	068 Move [X31], V0
	069 Move [X31+8], V1
	070 Move V0, [X31+256]
	071 Move V1, [X31+272]
	072 Move [X31+32], V2
	073 Move [X31+40], V3
	074 Move V2, [X31+288]
	075 Move V3, [X31+304]
	076 Add X1, X31, 0
	077 Move X2, X31
	078 Move [X31+64], V0
	079 Move [X31+72], V1
	080 Move [X31+96], V2
	081 Move [X31+104], V3
	082 Call Matrix4x4.op_Multiply, X0, X1
	083 Move V1, [X31+160]
	084 Move V0, [X31+176]
	085 Move V3, [X31+128]
	086 Move V2, [X31+144]
	087 Move [X31+224], V1
	088 Move [X31+232], V0
	089 Move [X31+192], V3
	090 Move [X31+200], V2
	091 Move [X19+32], V1
	092 Move [X19+40], V0
	093 Move [X19], V3
	094 Move [X19+8], V2
	095 Move X20, [X31+352]
	096 Move X19, [X31+360]
	097 Move X22, [X31+336]
	098 Move X21, [X31+344]
	099 Move X29, [X31+320]
	100 Move X30, [X31+328]
	101 Add X31, X31, 368
	102 Return 
	103 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x03DBAA70 MOV X0, X20
	0x03DBAA74 BLR X8
	0x03DBAA78 LDR X8, [X20]
	0x03DBAA7C LDR X1, [X23]
	0x03DBAA80 MOV W23, W0
	0x03DBAA84 LDRH W9, [X8 + 0x12E]
	0x03DBAA88 CBZ X9, 0x3DBAAAC
	0x03DBAA8C LDR X10, [X8 + 0xB0]
	0x03DBAA90 ADD X10, X10, 0x8
	0x03DBAA94 LDUR X11, [X10 - 0x8]
	0x03DBAA98 CMP X11, X1
	0x03DBAA9C B.EQ 0x3DBAABC
	0x03DBAAA0 SUBS X9, X9, 0x1
	0x03DBAAA4 ADD X10, X10, 0x10
	0x03DBAAA8 B.NE 0x3DBAA94
	0x03DBAAAC MOVZ W2, 0x16
	0x03DBAAB0 MOV X0, X20
	0x03DBAAB4 BL 0x1C5C788
	0x03DBAAB8 B 0x3DBAACC
	0x03DBAABC LDR W9, [X10]
	0x03DBAAC0 ADD W9, W9, 0x16
	0x03DBAAC4 ADD X8, X8, W9, 0x4, SXTW
	0x03DBAAC8 ADD X0, X8, 0x138
	0x03DBAACC LDP X8, X1, [X0]
	0x03DBAAD0 MOV X0, X20
	0x03DBAAD4 BLR X8
	0x03DBAAD8 AND W4, W0, 0x1
	0x03DBAADC AND W1, W21, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x62F000
	006 Move X20, 0x341000
	007 Move W8, [X21+100]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x341000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+100], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+1928]
	023 Move X2, [X8+1936]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposeManaged)

Disassembly:
	0x03DBAAE0 AND W2, W22, 0x1
	0x03DBAAE4 MOV X0, X19
	0x03DBAAE8 LDP X20, X19, [X31 + 0x20]
	0x03DBAAEC LDP X22, X21, [X31 + 0x10]
	0x03DBAAF0 AND W3, W23, 0x1
	0x03DBAAF4 LDP X30, X23, [X31], #0x30

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {11}
	005 Move X0, [X0+976]
	006 Compare X0, 0
	007 JumpIfEqual {11}
	008 Move X1, X31
	009 Call ObjectGUIState.Dispose, X0
	010 Return 
	011 Return 

Method: System.Void <DoOnGUI>b__56_0()

Disassembly:
	0x03DBAAF8 B 0x3DBA764
	0x03DBAAFC STR X30, [X31 - 0x20]!
	0x03DBAB00 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W1, 8
	002 Move X2, X31
	003 Call VisualElement.IncrementVersion, X0, X1
	004 Return 

