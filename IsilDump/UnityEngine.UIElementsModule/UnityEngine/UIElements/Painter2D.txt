Type: UnityEngine.UIElements.Painter2D

Method: System.Void .ctor(UnityEngine.UIElements.MeshGenerationContext ctx)

Disassembly:
	0x03DC6CD8 LDR X1, [X20]
	0x03DC6CDC ADD X0, X19, 0x8
	0x03DC6CE0 BL 0x266C920
	0x03DC6CE4 LDR W0, [X0 + 0xB4]
	0x03DC6CE8 LDP X20, X19, [X31 + 0x10]
	0x03DC6CEC LDP X30, X21, [X31], #0x20
	0x03DC6CF0 RET
	0x03DC6CF4 STP X30, X21, [X31 - 0x20]!
	0x03DC6CF8 STP X20, X19, [X31 + 0x10]
	0x03DC6CFC ADRP X21, 0x622000
	0x03DC6D00 ADRP X20, 0x39F000
	0x03DC6D04 LDRB W8, [X21 + 0x17B]
	0x03DC6D08 LDR X20, [X20 + 0x360]
	0x03DC6D0C MOV X19, X0
	0x03DC6D10 TBNZ X8, 0x0, 0x3DC6D28
	0x03DC6D14 ADRP X0, 0x39F000
	0x03DC6D18 LDR X0, [X0 + 0x360]
	0x03DC6D1C BL 0x1C16CF4
	0x03DC6D20 MOVZ W8, 0x1
	0x03DC6D24 STRB W8, [X21 + 0x17B]
	0x03DC6D28 LDR X1, [X20]
	0x03DC6D2C ADD X0, X19, 0x28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X0
	008 Call Object..ctor, X0
	009 Move X21, 0x623000
	010 Move X8, [X21+120]
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -53075968
	014 Add X0, X0, 1591
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X21+120], X0
	018 Move W0, W31
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move [X19+32], X0
	021 Move [X19+16], X20
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call Painter2D.Reset, X0
	028 Return 

Method: System.Void Reset()

Disassembly:
	0x03DC6E1C ADD X0, X19, 0x8
	0x03DC6E20 BL 0x266C920
	0x03DC6E24 LDUR X0, [X0 + 0x74]
	0x03DC6E28 LDP X20, X19, [X31 + 0x10]
	0x03DC6E2C LDP X30, X21, [X31], #0x20
	0x03DC6E30 RET
	0x03DC6E34 STP X30, X21, [X31 - 0x20]!
	0x03DC6E38 STP X20, X19, [X31 + 0x10]
	0x03DC6E3C ADRP X21, 0x622000
	0x03DC6E40 ADRP X20, 0x39F000
	0x03DC6E44 LDRB W8, [X21 + 0x179]
	0x03DC6E48 LDR X20, [X20 + 0x358]
	0x03DC6E4C MOV X19, X0
	0x03DC6E50 TBNZ X8, 0x0, 0x3DC6E68
	0x03DC6E54 ADRP X0, 0x39F000
	0x03DC6E58 LDR X0, [X0 + 0x358]
	0x03DC6E5C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0+32]
	005 Move X0, X19
	006 Call SafeHandleAccess.op_Implicit, X0
	007 Move X20, 0x623000
	008 Move X1, [X20+136]
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -53182464
	012 Add X0, X0, 3626
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+136], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 CallNoReturn X1

Method: System.Void Dispose()

Disassembly:
	0x03DC6E60 MOVZ W8, 0x1
	0x03DC6E64 STRB W8, [X21 + 0x179]
	0x03DC6E68 LDR X1, [X20]
	0x03DC6E6C ADD X0, X19, 0x8
	0x03DC6E70 BL 0x266C920
	0x03DC6E74 LDUR X0, [X0 + 0x8C]
	0x03DC6E78 LDP X20, X19, [X31 + 0x10]
	0x03DC6E7C LDP X30, X21, [X31], #0x20
	0x03DC6E80 RET
	0x03DC6E84 STP X30, X21, [X31 - 0x20]!
	0x03DC6E88 STP X20, X19, [X31 + 0x10]
	0x03DC6E8C ADRP X21, 0x622000
	0x03DC6E90 ADRP X20, 0x39F000
	0x03DC6E94 LDRB W8, [X21 + 0x178]
	0x03DC6E98 LDR X20, [X20 + 0x358]
	0x03DC6E9C MOV X19, X0
	0x03DC6EA0 TBNZ X8, 0x0, 0x3DC6EB8
	0x03DC6EA4 ADRP X0, 0x39F000
	0x03DC6EA8 LDR X0, [X0 + 0x358]
	0x03DC6EAC BL 0x1C16CF4
	0x03DC6EB0 MOVZ W8, 0x1
	0x03DC6EB4 STRB W8, [X21 + 0x178]
	0x03DC6EB8 LDR X1, [X20]
	0x03DC6EBC ADD X0, X19, 0x8
	0x03DC6EC0 BL 0x266C920

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x623000
	006 Move X20, 0x335000
	007 Move W8, [X21+324]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x335000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+324], W8
	019 Move W1, 1
	020 Move X0, X19
	021 Call Painter2D.Dispose, X0, X1
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call GC.SuppressFinalize, X0
	034 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03DC6EC4 LDUR X0, [X0 + 0x84]
	0x03DC6EC8 LDP X20, X19, [X31 + 0x10]
	0x03DC6ECC LDP X30, X21, [X31], #0x20
	0x03DC6ED0 RET
	0x03DC6ED4 STP X30, X21, [X31 - 0x20]!
	0x03DC6ED8 STP X20, X19, [X31 + 0x10]
	0x03DC6EDC ADRP X21, 0x622000
	0x03DC6EE0 ADRP X20, 0x39F000
	0x03DC6EE4 LDRB W8, [X21 + 0x169]
	0x03DC6EE8 LDR X20, [X20 + 0x358]
	0x03DC6EEC MOV X19, X0
	0x03DC6EF0 TBNZ X8, 0x0, 0x3DC6F08
	0x03DC6EF4 ADRP X0, 0x39F000
	0x03DC6EF8 LDR X0, [X0 + 0x358]
	0x03DC6EFC BL 0x1C16CF4
	0x03DC6F00 MOVZ W8, 0x1
	0x03DC6F04 STRB W8, [X21 + 0x169]
	0x03DC6F08 LDR X1, [X20]
	0x03DC6F0C ADD X0, X19, 0x8
	0x03DC6F10 BL 0x266C920
	0x03DC6F14 LDR W0, [X0 + 0x30]
	0x03DC6F18 LDP X20, X19, [X31 + 0x10]
	0x03DC6F1C LDP X30, X21, [X31], #0x20
	0x03DC6F20 RET
	0x03DC6F24 STP X30, X21, [X31 - 0x20]!
	0x03DC6F28 STP X20, X19, [X31 + 0x10]
	0x03DC6F2C ADRP X21, 0x622000
	0x03DC6F30 ADRP X20, 0x39F000
	0x03DC6F34 LDRB W8, [X21 + 0x14F]
	0x03DC6F38 LDR X20, [X20 + 0x358]
	0x03DC6F3C MOV X19, X0
	0x03DC6F40 TBNZ X8, 0x0, 0x3DC6F58
	0x03DC6F44 ADRP X0, 0x39F000
	0x03DC6F48 LDR X0, [X0 + 0x358]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+40]
	006 Compare W8, 0
	007 JumpIfNotEqual {43}
	008 Move X19, X0
	009 Move TEMP, X1
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {41}
	013 Move X0, [X19+32]
	014 Move X1, X31
	015 Move X2, X31
	016 Call IntPtr.op_Equality, X0, X1
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {36}
	021 Move X20, [X19+32]
	022 Move X0, X20
	023 Call SafeHandleAccess.op_Implicit, X0
	024 Move X21, 0x623000
	025 Move X8, [X21+128]
	026 Compare X8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -53174272
	029 Add X0, X0, 3635
	030 Call 0x1C17CB8
	031 Move X8, X0
	032 Move [X21+128], X0
	033 Move X0, X20
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move [X19+32], X31
	036 Move X0, [X19+24]
	037 Compare X0, 0
	038 JumpIfEqual {41}
	039 Move X1, X31
	040 Call DetachedAllocator.Dispose, X0
	041 Move W8, 1
	042 Move [X19+40], W8
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return 

Method: System.Void set_isPainterActive(System.Boolean value)

Disassembly:
	0x03DC6F4C BL 0x1C16CF4
	0x03DC6F50 MOVZ W8, 0x1
	0x03DC6F54 STRB W8, [X21 + 0x14F]
	0x03DC6F58 LDR X1, [X20]
	0x03DC6F5C ADD X0, X19, 0x8
	0x03DC6F60 BL 0x266C920
	0x03DC6F64 LDR W0, [X0]
	0x03DC6F68 LDP X20, X19, [X31 + 0x10]
	0x03DC6F6C LDP X30, X21, [X31], #0x20
	0x03DC6F70 RET
	0x03DC6F74 STP X30, X21, [X31 - 0x20]!
	0x03DC6F78 STP X20, X19, [X31 + 0x10]
	0x03DC6F7C ADRP X21, 0x622000
	0x03DC6F80 ADRP X20, 0x39F000
	0x03DC6F84 LDRB W8, [X21 + 0x150]
	0x03DC6F88 LDR X20, [X20 + 0x358]
	0x03DC6F8C MOV X19, X0
	0x03DC6F90 TBNZ X8, 0x0, 0x3DC6FA8
	0x03DC6F94 ADRP X0, 0x39F000
	0x03DC6F98 LDR X0, [X0 + 0x358]
	0x03DC6F9C BL 0x1C16CF4
	0x03DC6FA0 MOVZ W8, 0x1
	0x03DC6FA4 STRB W8, [X21 + 0x150]
	0x03DC6FA8 LDR X1, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x623000
	006 Move X20, 0x3A0000
	007 Move W8, [X21+325]
	008 Move X20, [X20+352]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3A0000
	015 Move X0, [X0+352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+325], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 And W9, W19, 1
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move [X8], W9
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: System.Void .cctor()

Disassembly:
	0x03DC6FAC ADD X0, X19, 0x8
	0x03DC6FB0 BL 0x266C920
	0x03DC6FB4 LDR W0, [X0 + 0x4]
	0x03DC6FB8 LDP X20, X19, [X31 + 0x10]
	0x03DC6FBC LDP X30, X21, [X31], #0x20
	0x03DC6FC0 RET
	0x03DC6FC4 STP X30, X21, [X31 - 0x20]!
	0x03DC6FC8 STP X20, X19, [X31 + 0x10]
	0x03DC6FCC ADRP X21, 0x622000
	0x03DC6FD0 ADRP X20, 0x39F000
	0x03DC6FD4 LDRB W8, [X21 + 0x16F]
	0x03DC6FD8 LDR X20, [X20 + 0x358]
	0x03DC6FDC MOV X19, X0
	0x03DC6FE0 TBNZ X8, 0x0, 0x3DC6FF8
	0x03DC6FE4 ADRP X0, 0x39F000
	0x03DC6FE8 LDR X0, [X0 + 0x358]
	0x03DC6FEC BL 0x1C16CF4
	0x03DC6FF0 MOVZ W8, 0x1
	0x03DC6FF4 STRB W8, [X21 + 0x16F]
	0x03DC6FF8 LDR X1, [X20]
	0x03DC6FFC ADD X0, X19, 0x8
	0x03DC7000 BL 0x266C920
	0x03DC7004 LDR W0, [X0 + 0x48]
	0x03DC7008 LDP X20, X19, [X31 + 0x10]
	0x03DC700C LDP X30, X21, [X31], #0x20
	0x03DC7010 RET
	0x03DC7014 STP X30, X21, [X31 - 0x20]!
	0x03DC7018 STP X20, X19, [X31 + 0x10]
	0x03DC701C ADRP X21, 0x621000
	0x03DC7020 ADRP X20, 0x39E000
	0x03DC7024 LDRB W8, [X21 + 0x16C]
	0x03DC7028 LDR X20, [X20 + 0x358]
	0x03DC702C MOV X19, X0
	0x03DC7030 TBNZ X8, 0x0, 0x3DC7048
	0x03DC7034 ADRP X0, 0x39E000
	0x03DC7038 LDR X0, [X0 + 0x358]
	0x03DC703C BL 0x1C16CF4
	0x03DC7040 MOVZ W8, 0x1
	0x03DC7044 STRB W8, [X21 + 0x16C]
	0x03DC7048 LDR X1, [X20]
	0x03DC704C ADD X0, X19, 0x8
	0x03DC7050 BL 0x266C920
	0x03DC7054 LDR W0, [X0 + 0x3C]
	0x03DC7058 LDP X20, X19, [X31 + 0x10]
	0x03DC705C LDP X30, X21, [X31], #0x20
	0x03DC7060 RET
	0x03DC7064 STP X30, X21, [X31 - 0x20]!
	0x03DC7068 STP X20, X19, [X31 + 0x10]
	0x03DC706C ADRP X21, 0x621000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x623000
	007 Move X19, 0x3A0000
	008 Move X21, 0x3A4000
	009 Move X20, 0x3A4000
	010 Move W8, [X22+326]
	011 Move X19, [X19+352]
	012 Move X21, [X21+576]
	013 Move X20, [X20+584]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x3A0000
	019 Move X0, [X0+352]
	020 Call 0x1C17CF4
	021 Move X0, 0x3A4000
	022 Move X0, [X0+576]
	023 Call 0x1C17CF4
	024 Move X0, 0x3A4000
	025 Move X0, [X0+584]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+326], W8
	029 Move X8, [X19]
	030 Move W9, 0xBF800000
	031 Move W1, 1
	032 Move W2, W31
	033 Move X8, [X8+184]
	034 Move W3, W31
	035 Move X4, X31
	036 Move [X8+4], W9
	037 Move X0, [X21]
	038 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	039 Move X8, [X19]
	040 Move W1, 1
	041 Move W2, W31
	042 Move W3, W31
	043 Move X8, [X8+184]
	044 Move X4, X31
	045 Move [X8+8], X0
	046 Move X0, [X20]
	047 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	048 Move X8, [X19]
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X8, [X8+184]
	054 Move [X8+16], X0
	055 Move X30, [X31+48]
	056 Return 

