Type: UnityEngine.UIElements.NavigationEventBase`1

Method: UnityEngine.EventModifiers get_modifiers()

Disassembly:
	0x0240A980 LDR X8, [X0 + 0xC0]
	0x0240A984 LDR X1, [X8 + 0x8]

ISIL:
	001 Move W0, [X0+132]
	002 Return X0

Method: System.Void set_modifiers(UnityEngine.EventModifiers value)

Disassembly:
	0x0240A988 LDRB W8, [X1 + 0x135]
	0x0240A98C TBNZ X8, 0x0, 0x240A99C

ISIL:
	001 Move [X0+132], W1
	002 Return 

Method: System.Boolean get_shiftKey()

Disassembly:
	0x0240A990 MOV X0, X1
	0x0240A994 BL 0x1C5C684
	0x0240A998 MOV X1, X0

ISIL:
	001 Move W8, [X0+132]
	002 And W0, W8, 1
	003 Return X0

Method: System.Boolean get_altKey()

Disassembly:
	0x0240A99C LDR X8, [X20]
	0x0240A9A0 LDRH W9, [X8 + 0x12E]
	0x0240A9A4 CBZ X9, 0x240A9C8

ISIL:
	001 Move W8, [X0+132]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: UnityEngine.UIElements.NavigationDeviceType get_deviceType()

Disassembly:
	0x0240A9A8 LDR X10, [X8 + 0xB0]
	0x0240A9AC ADD X10, X10, 0x8

ISIL:
	001 Move W0, [X0+136]
	002 Return X0

Method: System.Void set_deviceType(UnityEngine.UIElements.NavigationDeviceType value)

Disassembly:
	0x0240A9B0 LDUR X11, [X10 - 0x8]
	0x0240A9B4 CMP X11, X1

ISIL:
	001 Move [X0+136], W1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x0240A9B8 B.EQ 0x240A9D8
	0x0240A9BC SUBS X9, X9, 0x1
	0x0240A9C0 ADD X10, X10, 0x10
	0x0240A9C4 B.NE 0x240A9B0
	0x0240A9C8 MOV X0, X20
	0x0240A9CC MOV W2, W31
	0x0240A9D0 BL 0x1C5C788
	0x0240A9D4 B 0x240A9E4
	0x0240A9D8 LDRSW X9, [X10]
	0x0240A9DC ADD X8, X8, X9, 0x4, LSL
	0x0240A9E0 ADD X0, X8, 0x138
	0x0240A9E4 LDP X8, X3, [X0]
	0x0240A9E8 MOV X0, X20
	0x0240A9EC MOV X1, X21
	0x0240A9F0 MOV W2, W19
	0x0240A9F4 BLR X8
	0x0240A9F8 LDP X20, X19, [X31 + 0x10]
	0x0240A9FC AND X0, X0, 0x0
	0x0240AA00 LDP X30, X21, [X31], #0x20
	0x0240AA04 RET
	0x0240AA08 ADRP X0, 0x1CF3000
	0x0240AA0C LDR X0, [X0 + 0xF78]
	0x0240AA10 BL 0x1C16D08
	0x0240AA14 BL 0x1C16F10
	0x0240AA18 MOV X1, X31
	0x0240AA1C MOV X19, X0
	0x0240AA20 BL 0x3379B10
	0x0240AA24 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X19, X1
	006 Move X20, X0
	007 Move X8, [X8+192]
	008 Move X8, [X8+24]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move W9, [X8+224]
	018 Compare W9, 0
	019 JumpIfNotEqual {22}
	020 Move X0, X8
	021 Call 0x1C17DFC
	022 Move X8, [X19+32]
	023 Move X0, X20
	024 Move X8, [X8+192]
	025 Move X1, [X8+16]
	026 Call 0x2D0E54C, X0
	027 Move X8, [X19+32]
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X8, [X8+192]
	032 Move X1, [X8+32]
	033 Move X30, [X31+32]
	034 Call 0x240AA6C, X0
	035 Return 

Method: System.Void Init()

Disassembly:
	0x0240AA28 MOV X1, X21
	0x0240AA2C BL 0x1C16DEC
	0x0240AA30 BL 0x1C16F20
	0x0240AA34 STR X1, [X0]
	0x0240AA38 STR W2, [X0 + 0x8]
	0x0240AA3C STR X3, [X0 + 0x10]
	0x0240AA40 RET
	0x0240AA44 LDR W0, [X0 + 0x8]
	0x0240AA48 RET
	0x0240AA4C STP X30, X21, [X31 - 0x20]!
	0x0240AA50 STP X20, X19, [X31 + 0x10]
	0x0240AA54 LDR W9, [X0 + 0x8]
	0x0240AA58 MOV X21, X2
	0x0240AA5C CMP W9, W1
	0x0240AA60 B.LS 0x240AB08
	0x0240AA64 LDR X20, [X0 + 0x10]
	0x0240AA68 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {19}
	006 Move X8, [X1+32]
	007 Move X20, X1
	008 Move X19, X0
	009 Move X8, [X8+192]
	010 Move X1, [X8+40]
	011 Call 0x2D0E634, X0
	012 Move X8, [X20+32]
	013 Move X0, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X8, [X8+192]
	017 Move X1, [X8+32]
	018 Move X30, [X31+32]
	019 Call 0x1C17F20

Method: System.Void LocalInit()

Disassembly:
	0x0240AA6C CBZ X20, 0x240AB30
	0x0240AA70 LDR X0, [X21 + 0x20]
	0x0240AA74 LDR X21, [X8]
	0x0240AA78 MOV W19, W1
	0x0240AA7C LDRB W9, [X0 + 0x135]
	0x0240AA80 TBNZ X9, 0x0, 0x240AA88
	0x0240AA84 BL 0x1C5C684
	0x0240AA88 LDR X8, [X0 + 0xC0]
	0x0240AA8C LDR X1, [X8 + 0x8]
	0x0240AA90 LDRB W8, [X1 + 0x135]
	0x0240AA94 TBNZ X8, 0x0, 0x240AAA4
	0x0240AA98 MOV X0, X1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {16}
	005 Move W8, 15
	006 Move W1, W31
	007 Move X2, X31
	008 Move X19, X0
	009 Move [X0+48], W8
	010 Call EventBase.set_propagateToIMGUI, X0, X1
	011 Move [X19+132], W31
	012 Move [X19+136], W31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Call 0x1C17F20

Method: T GetPooled(UnityEngine.EventModifiers modifiers = 0)

Disassembly:
	0x0240AA9C BL 0x1C5C684
	0x0240AAA0 MOV X1, X0
	0x0240AAA4 LDR X8, [X20]
	0x0240AAA8 LDRH W9, [X8 + 0x12E]
	0x0240AAAC CBZ X9, 0x240AAD0
	0x0240AAB0 LDR X10, [X8 + 0xB0]
	0x0240AAB4 ADD X10, X10, 0x8
	0x0240AAB8 LDUR X11, [X10 - 0x8]
	0x0240AABC CMP X11, X1
	0x0240AAC0 B.EQ 0x240AAE0
	0x0240AAC4 SUBS X9, X9, 0x1
	0x0240AAC8 ADD X10, X10, 0x10
	0x0240AACC B.NE 0x240AAB8
	0x0240AAD0 MOV X0, X20
	0x0240AAD4 MOV W2, W31
	0x0240AAD8 BL 0x1C5C788
	0x0240AADC B 0x240AAEC
	0x0240AAE0 LDRSW X9, [X10]
	0x0240AAE4 ADD X8, X8, X9, 0x4, LSL
	0x0240AAE8 ADD X0, X8, 0x138
	0x0240AAEC LDP X4, X3, [X0]
	0x0240AAF0 MOV X0, X20
	0x0240AAF4 MOV W2, W19
	0x0240AAF8 LDP X20, X19, [X31 + 0x10]
	0x0240AAFC MOV X1, X21
	0x0240AB00 LDP X30, X21, [X31], #0x20
	0x0240AB04 BR X4
	0x0240AB08 ADRP X0, 0x1CF3000
	0x0240AB0C LDR X0, [X0 + 0xF78]
	0x0240AB10 BL 0x1C16D08
	0x0240AB14 BL 0x1C16F10
	0x0240AB18 MOV X1, X31
	0x0240AB1C MOV X19, X0
	0x0240AB20 BL 0x3379B10
	0x0240AB24 MOV X0, X19
	0x0240AB28 MOV X1, X21
	0x0240AB2C BL 0x1C16DEC
	0x0240AB30 BL 0x1C16F20
	0x0240AB34 STR X1, [X0]
	0x0240AB38 STR W2, [X0 + 0x8]
	0x0240AB3C STR X3, [X0 + 0x10]
	0x0240AB40 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move W19, W0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, [X8+24]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, [X20+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X8, [X0+192]
	036 Move X0, [X8+64]
	037 Call 0x2D0E6C4
	038 Compare X0, 0
	039 JumpIfEqual {63}
	040 Move X21, X0
	041 Move X0, [X20+32]
	042 Move W8, [X0+309]
	043 Move TEMP, X8
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {49}
	047 Call 0x1C5D684
	048 Move X0, [X20+32]
	049 Move [X21+132], W19
	050 Move W8, [X0+309]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {56}
	055 Call 0x1C5D684
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move [X21+136], W31
	059 Move X0, X21
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0
	063 Call 0x1C17F20

Method: T GetPooled(UnityEngine.UIElements.NavigationDeviceType deviceType, UnityEngine.EventModifiers modifiers = 0)

Disassembly:
	0x0240AB44 LDR W0, [X0 + 0x8]
	0x0240AB48 RET
	0x0240AB4C STP X29, X30, [X31 - 0x50]!
	0x0240AB50 STP X26, X25, [X31 + 0x10]
	0x0240AB54 STP X24, X23, [X31 + 0x20]
	0x0240AB58 STP X22, X21, [X31 + 0x30]
	0x0240AB5C STP X20, X19, [X31 + 0x40]
	0x0240AB60 ADD X29, X31, 0x0
	0x0240AB64 SUB X31, X31, 0x30
	0x0240AB68 MRS X26, 0xC000
	0x0240AB6C LDR X8, [X26 + 0x28]
	0x0240AB70 MOV X24, X3
	0x0240AB74 MOV X19, X2
	0x0240AB78 MOV W23, W1
	0x0240AB7C STUR X8, [X29 - 0x8]
	0x0240AB80 LDR X8, [X3 + 0x20]
	0x0240AB84 MOV X25, X0
	0x0240AB88 LDRB W9, [X8 + 0x135]
	0x0240AB8C TBNZ X9, 0x0, 0x240AB9C
	0x0240AB90 MOV X0, X8
	0x0240AB94 BL 0x1C5C684
	0x0240AB98 MOV X8, X0
	0x0240AB9C LDR X8, [X8 + 0xC0]
	0x0240ABA0 LDR X8, [X8 + 0x18]
	0x0240ABA4 LDR W20, [X8 + 0xFC]
	0x0240ABA8 ADD X8, X31, 0x0
	0x0240ABAC ADD X9, X20, 0xF
	0x0240ABB0 AND X9, X9, 0x1FFFFFFFF
	0x0240ABB4 SUB X21, X8, X9
	0x0240ABB8 ADD X31, X21, 0x0
	0x0240ABBC LDR W8, [X25 + 0x8]
	0x0240ABC0 CMP W8, W23
	0x0240ABC4 B.LS 0x240ACAC
	0x0240ABC8 LDR X22, [X25 + 0x10]
	0x0240ABCC CBZ X22, 0x240ACD4
	0x0240ABD0 LDR X0, [X24 + 0x20]
	0x0240ABD4 LDR X24, [X25]
	0x0240ABD8 LDRB W8, [X0 + 0x135]
	0x0240ABDC TBNZ X8, 0x0, 0x240ABE4
	0x0240ABE0 BL 0x1C5C684
	0x0240ABE4 LDR X8, [X0 + 0xC0]
	0x0240ABE8 LDR X1, [X8 + 0x8]
	0x0240ABEC LDRB W8, [X1 + 0x135]
	0x0240ABF0 TBNZ X8, 0x0, 0x240AC00
	0x0240ABF4 MOV X0, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X21, X2
	008 Move W20, W1
	009 Move W19, W0
	010 Move W9, [X8+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {18}
	015 Move X0, X8
	016 Call 0x1C5D684
	017 Move X8, X0
	018 Move X8, [X8+192]
	019 Move X0, [X8+24]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, [X21+32]
	031 Move W8, [X0+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {37}
	036 Call 0x1C5D684
	037 Move X8, [X0+192]
	038 Move X0, [X8+64]
	039 Call 0x2D0E6C4
	040 Compare X0, 0
	041 JumpIfEqual {66}
	042 Move X22, X0
	043 Move X0, [X21+32]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {51}
	049 Call 0x1C5D684
	050 Move X0, [X21+32]
	051 Move [X22+132], W20
	052 Move W8, [X0+309]
	053 Move TEMP, X8
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {58}
	057 Call 0x1C5D684
	058 Move [X22+136], W19
	059 Move X0, X22
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Return X0
	066 Call 0x1C17F20

