Type: UnityEngine.UIElements.IntegerField/IntegerInput

Method: UnityEngine.UIElements.IntegerField get_parentIntegerField()

Disassembly:
	0x03D6C1F0 LDP D11, D10, [X31], #0x60
	0x03D6C1F4 B 0x26BCC50
	0x03D6C1F8 MOV X0, X19
	0x03D6C1FC BL 0x3D6BF28
	0x03D6C200 CBZ X0, 0x3D6C230
	0x03D6C204 LDR X8, [X0]
	0x03D6C208 MOV X1, X20
	0x03D6C20C LDP X20, X19, [X31 + 0x50]
	0x03D6C210 LDP X22, X21, [X31 + 0x40]
	0x03D6C214 LDR X3, [X8 + 0x7F8]
	0x03D6C218 LDR X2, [X8 + 0x800]
	0x03D6C21C LDP X24, X23, [X31 + 0x30]
	0x03D6C220 LDR X30, [X31 + 0x20]
	0x03D6C224 LDP D9, D8, [X31 + 0x10]
	0x03D6C228 LDP D11, D10, [X31], #0x60
	0x03D6C22C BR X3
	0x03D6C230 BL 0x1C16F20
	0x03D6C234 STR X30, [X31 - 0x30]!
	0x03D6C238 STP X22, X21, [X31 + 0x10]
	0x03D6C23C STP X20, X19, [X31 + 0x20]
	0x03D6C240 ADRP X21, 0x67B000
	0x03D6C244 ADRP X22, 0x387000
	0x03D6C248 LDRB W8, [X21 + 0xD04]
	0x03D6C24C LDR X22, [X22 + 0x5A8]
	0x03D6C250 MOV X19, X2
	0x03D6C254 MOV X20, X1
	0x03D6C258 TBNZ X8, 0x0, 0x3D6C270
	0x03D6C25C ADRP X0, 0x387000
	0x03D6C260 LDR X0, [X0 + 0x5A8]
	0x03D6C264 BL 0x1C16CF4
	0x03D6C268 MOVZ W8, 0x1
	0x03D6C26C STRB W8, [X21 + 0xD04]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67C000
	005 Move W8, [X20+3308]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x3FB000
	012 Move X0, [X0+2856]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3308], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call VisualElement.get_parent, X0
	019 Compare X0, 0
	020 JumpIfEqual {32}
	021 Move X9, 0x3FB000
	022 Move X9, [X9+2856]
	023 Move X8, [X0]
	024 Move X1, [X9]
	025 Move W10, [X8+304]
	026 Move W9, [X1+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X8+200]
	029 Add X8, X8, X9
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C181E0

Method: System.Void .ctor()

Disassembly:
	0x03D6BF74 LDRB W10, [X8 + 0x130]
	0x03D6BF78 LDRB W9, [X1 + 0x130]
	0x03D6BF7C CMP W10, W9
	0x03D6BF80 B.CC 0x3D6BFA4
	0x03D6BF84 LDR X8, [X8 + 0xC8]
	0x03D6BF88 ADD X8, X8, X9, 0x3, LSL
	0x03D6BF8C LDUR X8, [X8 - 0x8]
	0x03D6BF90 CMP X8, X1
	0x03D6BF94 B.NE 0x3D6BFA4
	0x03D6BF98 LDP X20, X19, [X31 + 0x10]
	0x03D6BF9C LDR X30, [X31], #0x20
	0x03D6BFA0 RET
	0x03D6BFA4 BL 0x1C171E0
	0x03D6BFA8 STR X30, [X31 - 0x20]!
	0x03D6BFAC STP X20, X19, [X31 + 0x10]
	0x03D6BFB0 ADRP X20, 0x67C000
	0x03D6BFB4 ADRP X19, 0x3F4000
	0x03D6BFB8 LDRB W8, [X20 + 0xD02]
	0x03D6BFBC LDR X19, [X19 + 0x7A8]
	0x03D6BFC0 TBNZ X8, 0x0, 0x3D6BFD8
	0x03D6BFC4 ADRP X0, 0x3F4000
	0x03D6BFC8 LDR X0, [X0 + 0x7A8]
	0x03D6BFCC BL 0x1C16CF4
	0x03D6BFD0 MOVZ W8, 0x1
	0x03D6BFD4 STRB W8, [X20 + 0xD02]
	0x03D6BFD8 LDR X0, [X19]
	0x03D6BFDC LDR W8, [X0 + 0xE0]
	0x03D6BFE0 CBNZ W8, 0x3D6BFEC
	0x03D6BFE4 BL 0x1C16DFC
	0x03D6BFE8 LDR X0, [X19]
	0x03D6BFEC LDR X8, [X0 + 0xB8]
	0x03D6BFF0 LDP X20, X19, [X31 + 0x10]
	0x03D6BFF4 LDR X0, [X8 + 0x8]
	0x03D6BFF8 LDR X30, [X31], #0x20
	0x03D6BFFC RET
	0x03D6C000 STP D11, D10, [X31 - 0x60]!
	0x03D6C004 STP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67D000
	007 Move X22, 0x3FC000
	008 Move X20, 0x3F5000
	009 Move W8, [X21+3309]
	010 Move X22, [X22+2888]
	011 Move X20, [X20+1960]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x3FC000
	018 Move X0, [X0+2888]
	019 Call 0x1C17CF4
	020 Move X0, 0x3FC000
	021 Move X0, [X0+2896]
	022 Call 0x1C17CF4
	023 Move X0, 0x3F5000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3309], W8
	028 Move X1, [X22]
	029 Move X0, X19
	030 Call TextValueInput<Int32>..ctor, X0
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move X8, [X0+184]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X8, [X8+32]
	041 Move [X19+1024], X8
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+48]
	045 Return 

Method: System.String get_allowedCharacters()

Disassembly:
	0x03D6C270 LDR X0, [X22]
	0x03D6C274 LDR W8, [X0 + 0xE0]
	0x03D6C278 CBNZ W8, 0x3D6C280
	0x03D6C27C BL 0x1C16DFC
	0x03D6C280 CMP X20, 0x0
	0x03D6C284 CSNEG X8, X20, X20, PL
	0x03D6C288 CMP X20, 0x1
	0x03D6C28C B.LT 0x3D6C2AC
	0x03D6C290 MOVN X9, 0x80000000
	0x03D6C294 SUB X10, X9, X19
	0x03D6C298 CMP X8, X10
	0x03D6C29C CCMP X19, 0x1, 0x8, GT
	0x03D6C2A0 ADD X8, X19, X20
	0x03D6C2A4 CSEL X0, X8, X9, LT
	0x03D6C2A8 B 0x3D6C2C8
	0x03D6C2AC ORR X9, X8, 0xFFFFFFFFFFFFFFFF
	0x03D6C2B0 MOVN X10, 0x0
	0x03D6C2B4 CMP X9, X19
	0x03D6C2B8 SUB X8, X19, X8
	0x03D6C2BC CCMP X19, X10, 0x0, GT
	0x03D6C2C0 MOVZ X9, 0x80000000
	0x03D6C2C4 CSEL X0, X8, X9, GT

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67C000
	005 Move X19, 0x3F4000
	006 Move W8, [X20+3310]
	007 Move X19, [X19+1960]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3F4000
	013 Move X0, [X0+1960]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3310], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.Int32 startValue)

Disassembly:
	0x03D6C2C8 LDP X20, X19, [X31 + 0x20]
	0x03D6C2CC LDP X22, X21, [X31 + 0x10]
	0x03D6C2D0 LDR X30, [X31], #0x30
	0x03D6C2D4 RET
	0x03D6C2D8 STR X30, [X31 - 0x20]!
	0x03D6C2DC STP X20, X19, [X31 + 0x10]
	0x03D6C2E0 ADRP X20, 0x67B000
	0x03D6C2E4 LDRB W8, [X20 + 0xD05]
	0x03D6C2E8 MOV X19, X0
	0x03D6C2EC STR X1, [X31 + 0x8]
	0x03D6C2F0 TBNZ X8, 0x0, 0x3D6C308
	0x03D6C2F4 ADRP X0, 0x3FA000
	0x03D6C2F8 LDR X0, [X0 + 0xC40]
	0x03D6C2FC BL 0x1C16CF4
	0x03D6C300 MOVZ W8, 0x1
	0x03D6C304 STRB W8, [X20 + 0xD05]
	0x03D6C308 LDR X1, [X19 + 0x400]
	0x03D6C30C ADD X0, X31, 0x8
	0x03D6C310 MOV X2, X31
	0x03D6C314 BL 0x337CD30
	0x03D6C318 LDP X20, X19, [X31 + 0x10]
	0x03D6C31C LDR X30, [X31], #0x20
	0x03D6C320 RET
	0x03D6C324 SUB X31, X31, 0x40
	0x03D6C328 STP X30, X23, [X31 + 0x10]
	0x03D6C32C STP X22, X21, [X31 + 0x20]
	0x03D6C330 STP X20, X19, [X31 + 0x30]
	0x03D6C334 ADRP X23, 0x67B000
	0x03D6C338 ADRP X22, 0x3FA000
	0x03D6C33C ADRP X21, 0x3F3000
	0x03D6C340 LDRB W8, [X23 + 0xD06]
	0x03D6C344 LDR X22, [X22 + 0xBD0]
	0x03D6C348 LDR X21, [X21 + 0x7A8]
	0x03D6C34C MOV X19, X1
	0x03D6C350 MOV X20, X0
	0x03D6C354 TBNZ X8, 0x0, 0x3D6C378
	0x03D6C358 ADRP X0, 0x3FA000
	0x03D6C35C LDR X0, [X0 + 0xBD0]
	0x03D6C360 BL 0x1C16CF4
	0x03D6C364 ADRP X0, 0x3F3000
	0x03D6C368 LDR X0, [X0 + 0x7A8]
	0x03D6C36C BL 0x1C16CF4
	0x03D6C370 MOVZ W8, 0x1
	0x03D6C374 STRB W8, [X23 + 0xD06]
	0x03D6C378 LDR X1, [X22]
	0x03D6C37C MOV X0, X20
	0x03D6C380 STR X31, [X31 + 0x8]
	0x03D6C384 BL 0x26BC6A8
	0x03D6C388 LDR X8, [X21]
	0x03D6C38C MOV X20, X0
	0x03D6C390 LDR W9, [X8 + 0xE0]
	0x03D6C394 CBNZ W9, 0x3D6C3A0
	0x03D6C398 MOV X0, X8
	0x03D6C39C BL 0x1C16DFC
	0x03D6C3A0 ADD X2, X31, 0x8
	0x03D6C3A4 MOV X0, X19
	0x03D6C3A8 MOV X1, X20
	0x03D6C3AC MOV X3, X31
	0x03D6C3B0 BL 0x3C3D6C8
	0x03D6C3B4 LDR X0, [X31 + 0x8]
	0x03D6C3B8 LDP X20, X19, [X31 + 0x30]
	0x03D6C3BC LDP X22, X21, [X31 + 0x20]
	0x03D6C3C0 LDP X30, X23, [X31 + 0x10]
	0x03D6C3C4 ADD X31, X31, 0x40
	0x03D6C3C8 RET
	0x03D6C3CC LDR X0, [X0 + 0x440]
	0x03D6C3D0 RET
	0x03D6C3D4 STR X1, [X0 + 0x440]
	0x03D6C3D8 RET
	0x03D6C3DC LDR X0, [X0 + 0x448]
	0x03D6C3E0 RET
	0x03D6C3E4 STR X1, [X0 + 0x448]
	0x03D6C3E8 RET
	0x03D6C3EC LDR X0, [X0 + 0x450]
	0x03D6C3F0 RET
	0x03D6C3F4 STR X1, [X0 + 0x450]
	0x03D6C3F8 RET
	0x03D6C3FC LDR X0, [X0 + 0x458]
	0x03D6C400 RET
	0x03D6C404 STR X1, [X0 + 0x458]
	0x03D6C408 RET
	0x03D6C40C LDR X8, [X0]
	0x03D6C410 LDR X2, [X8 + 0x7E8]
	0x03D6C414 LDR X1, [X8 + 0x7F0]
	0x03D6C418 BR X2
	0x03D6C41C STR D8, [X31 - 0x30]!
	0x03D6C420 STP X30, X21, [X31 + 0x10]
	0x03D6C424 STP X20, X19, [X31 + 0x20]
	0x03D6C428 ADRP X21, 0x67B000
	0x03D6C42C ADRP X20, 0x3FA000
	0x03D6C430 LDRB W8, [X21 + 0xD07]
	0x03D6C434 LDR X20, [X20 + 0xC48]
	0x03D6C438 MOV V8.16B, V0.16B
	0x03D6C43C MOV X19, X0
	0x03D6C440 TBNZ X8, 0x0, 0x3D6C464
	0x03D6C444 ADRP X0, 0x3FA000
	0x03D6C448 LDR X0, [X0 + 0xC48]
	0x03D6C44C BL 0x1C16CF4
	0x03D6C450 ADRP X0, 0x3FA000
	0x03D6C454 LDR X0, [X0 + 0xC50]
	0x03D6C458 BL 0x1C16CF4
	0x03D6C45C MOVZ W8, 0x1
	0x03D6C460 STRB W8, [X21 + 0xD07]
	0x03D6C464 LDR X1, [X20]
	0x03D6C468 ADRP X20, 0x3FA000
	0x03D6C46C LDR X20, [X20 + 0xC50]
	0x03D6C470 MOV X0, X19
	0x03D6C474 BL 0x28A8168
	0x03D6C478 LDR V0, [X19 + 0x494]
	0x03D6C47C LDR V2, [X19 + 0x498]
	0x03D6C480 FCMP S0, S2
	0x03D6C484 B.LE 0x3D6C490
	0x03D6C488 MOV V0.16B, V2.16B
	0x03D6C48C STR S2, [X19 + 0x494]
	0x03D6C490 FCMP S1, S2
	0x03D6C494 LDR X1, [X20]
	0x03D6C498 FCSEL S1, S2, S1, GT
	0x03D6C49C MOV X0, X19
	0x03D6C4A0 LDP X20, X19, [X31 + 0x20]
	0x03D6C4A4 LDP X30, X21, [X31 + 0x10]
	0x03D6C4A8 FCMP S1, S8
	0x03D6C4AC FCSEL S2, S1, S8, MI
	0x03D6C4B0 FCSEL S1, S8, S1, MI
	0x03D6C4B4 FCMP S0, S8
	0x03D6C4B8 FCSEL S0, S2, S0, LE
	0x03D6C4BC LDR V8, [X31], #0x30
	0x03D6C4C0 B 0x28A82E4
	0x03D6C4C4 LDR V2, [X0 + 0x494]
	0x03D6C4C8 LDR V3, [X0 + 0x498]
	0x03D6C4CC FCMP S2, S3
	0x03D6C4D0 B.LE 0x3D6C4DC
	0x03D6C4D4 MOV V2.16B, V3.16B
	0x03D6C4D8 STR S3, [X0 + 0x494]
	0x03D6C4DC FCMP S1, S3
	0x03D6C4E0 FCSEL S1, S3, S1, GT
	0x03D6C4E4 FCMP S0, S1
	0x03D6C4E8 FCSEL S3, S1, S0, GT
	0x03D6C4EC FCSEL S1, S0, S1, GT
	0x03D6C4F0 FCMP S0, S2
	0x03D6C4F4 FCSEL S0, S3, S2, PL
	0x03D6C4F8 RET
	0x03D6C4FC STR X30, [X31 - 0x10]!
	0x03D6C500 LDR X8, [X0]
	0x03D6C504 LDR X9, [X8 + 0x7E8]
	0x03D6C508 LDR X1, [X8 + 0x7F0]
	0x03D6C50C BLR X9
	0x03D6C510 MOV V0.16B, V1.16B
	0x03D6C514 LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x67C000
	013 Move X23, 0x3FB000
	014 Move X22, 0x388000
	015 Move W8, [X24+3311]
	016 Move X23, [X23+2928]
	017 Move X22, [X22+1448]
	018 Move W21, W2
	019 Move W20, W1
	020 Move V8, V1
	021 Move V9, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0x388000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move X0, 0x3FB000
	031 Move X0, [X0+2936]
	032 Call 0x1C17CF4
	033 Move X0, 0x3FB000
	034 Move X0, [X0+2928]
	035 Call 0x1C17CF4
	036 Move X0, 0x3FB000
	037 Move X0, [X0+2944]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+3311], W8
	041 Move X0, W21
	042 Move X1, X31
	043 Call NumericFieldDraggerUtility.CalculateIntDragSensitivity, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction SCVTF not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Move X2, X31
	050 Call NumericFieldDraggerUtility.Acceleration, X0, X1
	051 Move X1, [X23]
	052 Move X0, X19
	053 Move V10, V0
	054 Call TextInputBase<Int32>.get_text, X0
	055 Move X8, [X19]
	056 Move X1, X0
	057 Move X0, X19
	058 Move X9, [X8+1912]
	059 Move X2, [X8+1920]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move W20, W0
	062 Move V0, V9
	063 Move V1, V8
	064 Move V2, V10
	065 Move X0, X31
	066 Call NumericFieldDraggerUtility.NiceDelta, X0, V0
	067 Move X0, [X22]
	068 Move V8, V0
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 NotImplemented "Instruction FCVT not yet implemented."
	074 Multiply D8, D11, D0
	075 Add X0, X31, 40
	076 Move V0, V8
	077 Call 0x3EB2C00
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move D1, -0.5
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Move V0, [X31+40]
	082 Move D1, -1
	083 Move D1, 0.5
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move V0, [X31+40]
	086 Move D1, 1
	087 NotImplemented "Instruction FCVTZS not yet implemented."
	088 Add D1, D0, D1
	089 And X31, X8, 1
	090 NotImplemented "Instruction FCSEL not yet implemented."
	091 Add D0, D8, D1
	092 NotImplemented "Instruction FRINTP not yet implemented."
	093 Add D0, D8, D1
	094 NotImplemented "Instruction FRINTM not yet implemented."
	095 Move X8, 0x7FF00000
	096 Move D1, X8
	097 NotImplemented "Instruction FCVTZS not yet implemented."
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Move X8, 0x80000000
	100 Move X0, X19
	101 NotImplemented "Instruction CSEL not yet implemented."
	102 Call IntegerInput.get_parentIntegerField, X0
	103 Compare X0, 0
	104 JumpIfEqual {167}
	105 Move X8, 0x3FB000
	106 Move X8, [X8+2936]
	107 Move X1, [X8]
	108 Move X8, W20
	109 Add X20, X21, X8
	110 Call TextInputBaseField`1<Int32>.get_isDelayed, X0
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {142}
	115 Move X0, X20
	116 Move X1, X31
	117 Call Mathf.ClampToInt, X0
	118 Move X8, [X19]
	119 Move W1, W0
	120 Move X0, X19
	121 Move X9, [X8+2008]
	122 Move X2, [X8+2016]
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X8, 0x3FB000
	125 Move X8, [X8+2944]
	126 Move X1, X0
	127 Move X0, X19
	128 Move X20, [X31+80]
	129 Move X19, [X31+88]
	130 Move X2, [X8]
	131 Move X22, [X31+64]
	132 Move X21, [X31+72]
	133 Move X24, [X31+48]
	134 Move X23, [X31+56]
	135 Move X30, [X31+32]
	136 Move D9, [X31+16]
	137 Move D8, [X31+24]
	138 Move D11, [X31+96]
	139 Move D10, [X31+104]
	140 Call TextInputBase<Int32>.set_text, X0, X1
	141 Return 
	142 Move X0, X19
	143 Call IntegerInput.get_parentIntegerField, X0
	144 Move X19, X0
	145 Move X0, X20
	146 Move X1, X31
	147 Call Mathf.ClampToInt, X0
	148 Compare X19, 0
	149 JumpIfEqual {167}
	150 Move X8, [X19]
	151 Move W1, W0
	152 Move X0, X19
	153 Move X20, [X31+80]
	154 Move X19, [X31+88]
	155 Move X3, [X8+2040]
	156 Move X2, [X8+2048]
	157 Move X22, [X31+64]
	158 Move X21, [X31+72]
	159 Move X24, [X31+48]
	160 Move X23, [X31+56]
	161 Move X30, [X31+32]
	162 Move D9, [X31+16]
	163 Move D8, [X31+24]
	164 Move D11, [X31+96]
	165 Move D10, [X31+104]
	166 CallNoReturn X3
	167 Call 0x1C17F20

Method: System.String ValueToString(System.Int32 v)

Disassembly:
	0x03D6C518 RET
	0x03D6C51C STR D8, [X31 - 0x30]!
	0x03D6C520 STP X30, X21, [X31 + 0x10]
	0x03D6C524 STP X20, X19, [X31 + 0x20]
	0x03D6C528 ADRP X21, 0x67B000
	0x03D6C52C ADRP X20, 0x3FA000
	0x03D6C530 LDRB W8, [X21 + 0xD08]
	0x03D6C534 LDR X20, [X20 + 0xC48]
	0x03D6C538 MOV V8.16B, V0.16B
	0x03D6C53C MOV X19, X0
	0x03D6C540 TBNZ X8, 0x0, 0x3D6C564
	0x03D6C544 ADRP X0, 0x3FA000
	0x03D6C548 LDR X0, [X0 + 0xC48]
	0x03D6C54C BL 0x1C16CF4
	0x03D6C550 ADRP X0, 0x3FA000
	0x03D6C554 LDR X0, [X0 + 0xC50]
	0x03D6C558 BL 0x1C16CF4
	0x03D6C55C MOVZ W8, 0x1
	0x03D6C560 STRB W8, [X21 + 0xD08]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67C000
	005 Move W8, [X20+3312]
	006 Move X19, X0
	007 Move [X31+12], W1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3FB000
	013 Move X0, [X0+2952]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3312], W8
	017 Move X1, [X19+1024]
	018 Add X0, X31, 12
	019 Move X2, X31
	020 Call Int32.ToString, X0, X1
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Int32 StringToValue(System.String str)

Disassembly:
	0x03D6C564 LDR X1, [X20]
	0x03D6C568 ADRP X20, 0x3FA000
	0x03D6C56C LDR X20, [X20 + 0xC50]
	0x03D6C570 MOV X0, X19
	0x03D6C574 BL 0x28A8168
	0x03D6C578 LDR V2, [X19 + 0x494]
	0x03D6C57C LDR V1, [X19 + 0x498]
	0x03D6C580 FCMP S2, S1
	0x03D6C584 B.LE 0x3D6C590
	0x03D6C588 MOV V2.16B, V1.16B
	0x03D6C58C STR S1, [X19 + 0x494]
	0x03D6C590 FCMP S1, S8
	0x03D6C594 LDR X1, [X20]
	0x03D6C598 FCSEL S1, S1, S8, MI
	0x03D6C59C MOV X0, X19
	0x03D6C5A0 LDP X20, X19, [X31 + 0x20]
	0x03D6C5A4 LDP X30, X21, [X31 + 0x10]
	0x03D6C5A8 FCMP S0, S1
	0x03D6C5AC FCSEL S3, S1, S0, GT
	0x03D6C5B0 FCSEL S1, S0, S1, GT
	0x03D6C5B4 FCMP S0, S2
	0x03D6C5B8 FCSEL S0, S3, S2, PL
	0x03D6C5BC LDR V8, [X31], #0x30
	0x03D6C5C0 B 0x28A82E4
	0x03D6C5C4 STP X30, X21, [X31 - 0x20]!
	0x03D6C5C8 STP X20, X19, [X31 + 0x10]
	0x03D6C5CC ADRP X20, 0x67B000
	0x03D6C5D0 ADRP X21, 0x3FA000
	0x03D6C5D4 LDRB W8, [X20 + 0xD09]
	0x03D6C5D8 LDR X21, [X21 + 0xC58]
	0x03D6C5DC MOV X19, X0
	0x03D6C5E0 TBNZ X8, 0x0, 0x3D6C5F8
	0x03D6C5E4 ADRP X0, 0x3FA000
	0x03D6C5E8 LDR X0, [X0 + 0xC58]
	0x03D6C5EC BL 0x1C16CF4
	0x03D6C5F0 MOVZ W8, 0x1
	0x03D6C5F4 STRB W8, [X20 + 0xD09]
	0x03D6C5F8 LDR X1, [X21]
	0x03D6C5FC MOV X0, X19
	0x03D6C600 LDP X20, X19, [X31 + 0x10]
	0x03D6C604 LDP X30, X21, [X31], #0x20
	0x03D6C608 B 0x28A82D8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x67C000
	009 Move X22, 0x3FB000
	010 Move X21, 0x3F4000
	011 Move W8, [X23+3313]
	012 Move X22, [X22+2840]
	013 Move X21, [X21+1960]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x3FB000
	021 Move X0, [X0+2840]
	022 Call 0x1C17CF4
	023 Move X0, 0x3F4000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+3313], W8
	028 Move X1, [X22]
	029 Move X0, X20
	030 Move [X31+12], W31
	031 Call TextInputBase<Int32>.get_originalText, X0
	032 Move X8, [X21]
	033 Move X20, X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Add X2, X31, 12
	040 Move X0, X19
	041 Move X1, X20
	042 Move X3, X31
	043 Call UINumericFieldsUtils.TryConvertStringToInt, X0, X1, X2
	044 Move W0, [X31+12]
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X30, [X31+16]
	050 Move X23, [X31+24]
	051 Add X31, X31, 64
	052 Return X0

