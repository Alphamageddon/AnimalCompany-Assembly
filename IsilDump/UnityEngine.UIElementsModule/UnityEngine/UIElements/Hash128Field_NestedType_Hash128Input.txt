Type: UnityEngine.UIElements.Hash128Field/Hash128Input

Method: System.Void .ctor()

Disassembly:
	0x03D133A8 STP X20, X19, [X31 + 0x10]
	0x03D133AC ADRP X20, 0x6D4000
	0x03D133B0 ADRP X21, 0x40A000
	0x03D133B4 LDRB W8, [X20 + 0x8DA]
	0x03D133B8 LDR X21, [X21 + 0xB20]
	0x03D133BC MOV X19, X0
	0x03D133C0 TBNZ X8, 0x0, 0x3D13414
	0x03D133C4 ADRP X0, 0x450000
	0x03D133C8 LDR X0, [X0 + 0xD10]
	0x03D133CC BL 0x1C16CF4
	0x03D133D0 ADRP X0, 0x450000
	0x03D133D4 LDR X0, [X0 + 0xD18]
	0x03D133D8 BL 0x1C16CF4
	0x03D133DC ADRP X0, 0x450000
	0x03D133E0 LDR X0, [X0 + 0xD20]
	0x03D133E4 BL 0x1C16CF4
	0x03D133E8 ADRP X0, 0x40A000
	0x03D133EC LDR X0, [X0 + 0xB20]
	0x03D133F0 BL 0x1C16CF4
	0x03D133F4 ADRP X0, 0x450000
	0x03D133F8 LDR X0, [X0 + 0xD28]
	0x03D133FC BL 0x1C16CF4
	0x03D13400 ADRP X0, 0x433000
	0x03D13404 LDR X0, [X0 + 0x3E0]
	0x03D13408 BL 0x1C16CF4
	0x03D1340C MOVZ W8, 0x1
	0x03D13410 STRB W8, [X20 + 0x8DA]
	0x03D13414 LDR X0, [X21]
	0x03D13418 BL 0x1C16F10
	0x03D1341C MOV X1, X31
	0x03D13420 MOV X20, X0
	0x03D13424 BL 0x3E0A2F4
	0x03D13428 CBZ X20, 0x3D13494
	0x03D1342C ADRP X8, 0x433000
	0x03D13430 LDR X8, [X8 + 0x3E0]
	0x03D13434 ADRP X9, 0x450000
	0x03D13438 LDR X8, [X8]
	0x03D1343C LDR X9, [X9 + 0xD20]
	0x03D13440 STR X8, [X20 + 0x10]
	0x03D13444 STR X20, [X19 + 0x70]
	0x03D13448 LDR X0, [X9]
	0x03D1344C ADRP X20, 0x450000
	0x03D13450 LDR X20, [X20 + 0xD18]
	0x03D13454 BL 0x1C16F10
	0x03D13458 LDR X1, [X20]
	0x03D1345C MOV X20, X0
	0x03D13460 BL 0x2734B10
	0x03D13464 CBZ X20, 0x3D13494
	0x03D13468 ADRP X8, 0x450000
	0x03D1346C LDR X8, [X8 + 0xD28]
	0x03D13470 MOV X0, X19
	0x03D13474 MOV X1, X31
	0x03D13478 LDR X8, [X8]
	0x03D1347C STR W31, [X20 + 0x40]
	0x03D13480 STR X8, [X20 + 0x10]
	0x03D13484 STR X20, [X19 + 0x78]
	0x03D13488 LDP X20, X19, [X31 + 0x10]
	0x03D1348C LDP X30, X21, [X31], #0x20
	0x03D13490 B 0x3DF8490
	0x03D13494 BL 0x1C16F20
	0x03D13498 LDR X0, [X0 + 0x3D0]
	0x03D1349C RET
	0x03D134A0 STR X30, [X31 - 0x30]!
	0x03D134A4 STP X22, X21, [X31 + 0x10]
	0x03D134A8 STP X20, X19, [X31 + 0x20]
	0x03D134AC ADRP X21, 0x6D4000
	0x03D134B0 ADRP X22, 0x3E0000
	0x03D134B4 LDRB W8, [X21 + 0x8DB]
	0x03D134B8 LDR X22, [X22 + 0x598]
	0x03D134BC MOV X19, X1
	0x03D134C0 MOV X20, X0
	0x03D134C4 TBNZ X8, 0x0, 0x3D134E8
	0x03D134C8 ADRP X0, 0x450000
	0x03D134CC LDR X0, [X0 + 0xD30]
	0x03D134D0 BL 0x1C16CF4
	0x03D134D4 ADRP X0, 0x3E0000
	0x03D134D8 LDR X0, [X0 + 0x598]
	0x03D134DC BL 0x1C16CF4
	0x03D134E0 MOVZ W8, 0x1
	0x03D134E4 STRB W8, [X21 + 0x8DB]
	0x03D134E8 LDR X0, [X22]
	0x03D134EC LDR X21, [X20 + 0x3D0]
	0x03D134F0 LDR W8, [X0 + 0xE0]
	0x03D134F4 CBNZ W8, 0x3D134FC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x6D5000
	007 Move X19, 0x451000
	008 Move W8, [X21+2257]
	009 Move X19, [X19+3144]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x40B000
	016 Move X0, [X0+1608]
	017 Call 0x1C17CF4
	018 Move X0, 0x40B000
	019 Move X0, [X0+1584]
	020 Call 0x1C17CF4
	021 Move X0, 0x451000
	022 Move X0, [X0+3152]
	023 Call 0x1C17CF4
	024 Move X0, 0x451000
	025 Move X0, [X0+3160]
	026 Call 0x1C17CF4
	027 Move X0, 0x451000
	028 Move X0, [X0+3144]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+2257], W8
	032 Move X0, [X19]
	033 Move X22, 0x451000
	034 Move X21, 0x451000
	035 Move X19, 0x40B000
	036 Move W8, [X0+224]
	037 Move X22, [X22+3152]
	038 Move X21, [X21+3160]
	039 Move X19, [X19+1608]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X1, [X22]
	044 Move X0, X20
	045 Call TextInputBase<Hash128>..ctor, X0
	046 Move X1, [X21]
	047 Move X0, X20
	048 Call TextInputBase<Hash128>.get_textEdition, X0
	049 Move X8, [X19]
	050 Move X19, X0
	051 Move X0, X8
	052 Call 0x1C17F10
	053 Compare X20, 0
	054 JumpIfEqual {93}
	055 Move X8, [X20]
	056 Move X1, X20
	057 Move X3, X31
	058 Move X21, X0
	059 Move X2, [X8+1968]
	060 Call Func`2<Char, Boolean>..ctor, X0, X1, X2
	061 Compare X19, 0
	062 JumpIfEqual {93}
	063 Move X10, 0x40B000
	064 Move X8, [X19]
	065 Move X10, [X10+1584]
	066 NotImplemented "Instruction LDRH not yet implemented."
	067 Move X1, [X10]
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move W2, 11
	077 Move X0, X19
	078 Call 0x1C5D788
	079 Move W9, [X10]
	080 Add W9, W9, 11
	081 Add X8, X8, W9
	082 Add X0, X8, 312
	083 Move X3, [X0]
	084 Move X2, [X0+8]
	085 Move X0, X19
	086 Move X1, X21
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 CallNoReturn X3
	093 Call 0x1C17F20

Method: System.String get_allowedCharacters()

Disassembly:
	0x03D13C40 TBNZ X8, 0x0, 0x3D13C64
	0x03D13C44 ADRP X0, 0x3E0000
	0x03D13C48 LDR X0, [X0 + 0x598]
	0x03D13C4C BL 0x1C16CF4
	0x03D13C50 ADRP X0, 0x409000
	0x03D13C54 LDR X0, [X0 + 0xE98]
	0x03D13C58 BL 0x1C16CF4
	0x03D13C5C MOVZ W8, 0x1
	0x03D13C60 STRB W8, [X21 + 0x8E0]
	0x03D13C64 ADRP X22, 0x6C6000
	0x03D13C68 ADRP X21, 0x3E0000
	0x03D13C6C LDRB W8, [X22 + 0x78F]
	0x03D13C70 LDR X21, [X21 + 0x598]
	0x03D13C74 CBNZ W8, 0x3D13C8C
	0x03D13C78 ADRP X0, 0x3E8000
	0x03D13C7C LDR X0, [X0 + 0xF08]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x6D5000
	005 Move X20, 0x451000
	006 Move W8, [X19+2258]
	007 Move X20, [X20+3272]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x451000
	013 Move X0, [X0+3272]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2258], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.Boolean AcceptCharacter(System.Char c)

Disassembly:
	0x03D13C80 BL 0x1C16CF4
	0x03D13C84 MOVZ W8, 0x1
	0x03D13C88 STRB W8, [X22 + 0x78F]
	0x03D13C8C ADRP X8, 0x3E8000
	0x03D13C90 LDR X8, [X8 + 0xF08]
	0x03D13C94 LDR X0, [X21]
	0x03D13C98 LDR X8, [X8]
	0x03D13C9C LDR W9, [X0 + 0xE0]
	0x03D13CA0 LDR X8, [X8 + 0xB8]
	0x03D13CA4 LDR V0, [X8]
	0x03D13CA8 STR V0, [X31]
	0x03D13CAC CBNZ W9, 0x3D13CB4
	0x03D13CB0 BL 0x1C16DFC
	0x03D13CB4 MOV X0, X19
	0x03D13CB8 MOV X1, X31
	0x03D13CBC MOV X2, X31
	0x03D13CC0 BL 0x3C354F8
	0x03D13CC4 LDR V0, [X31]
	0x03D13CC8 TBZ X0, 0x0, 0x3D13D2C
	0x03D13CCC ADRP X8, 0x409000
	0x03D13CD0 LDR X8, [X8 + 0xE98]
	0x03D13CD4 LDR X0, [X8]
	0x03D13CD8 LDR W8, [X0 + 0xE0]
	0x03D13CDC CBNZ W8, 0x3D13CE4
	0x03D13CE0 BL 0x1C16DFC
	0x03D13CE4 MOV X0, X20
	0x03D13CE8 MOV X1, X19
	0x03D13CEC MOV X2, X31
	0x03D13CF0 BL 0x3E19578
	0x03D13CF4 STR D0, [X31]
	0x03D13CF8 CBZ X19, 0x3D13D48
	0x03D13CFC ADD X8, X31, 0x18
	0x03D13D00 MOV X0, X19
	0x03D13D04 MOV X1, X31
	0x03D13D08 BL 0x3C417AC
	0x03D13D0C LDUR V0, [X31 + 0x24]
	0x03D13D10 MOV X0, X19
	0x03D13D14 MOV X1, X31
	0x03D13D18 FADD V8.2S, V0.2S, V0.2S
	0x03D13D1C BL 0x3C419CC
	0x03D13D20 LDR V1, [X31]
	0x00000000 INVALID
	0x00000000 INVALID
	0x03D13D2C LDP X20, X19, [X31 + 0x50]
	0x03D13D30 LDP X22, X21, [X31 + 0x40]
	0x03D13D34 LDR X30, [X31 + 0x38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x6D5000
	007 Move X22, 0x451000
	008 Move W8, [X21+2259]
	009 Move X22, [X22+3280]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x451000
	017 Move X0, [X0+3280]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2259], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Call TextInputBase<Hash128>.AcceptCharacter, X0, X1
	025 Move W8, W0
	026 And W31, W19, 0xFFFF
	027 Move W0, W31
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {53}
	032 Move X20, 0x6D5000
	033 Move X21, 0x451000
	034 Move W8, [X20+2258]
	035 Move X21, [X21+3272]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {45}
	040 Move X0, 0x451000
	041 Move X0, [X0+3272]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X20+2258], W8
	045 Move X0, [X21]
	046 Compare X0, 0
	047 JumpIfEqual {59}
	048 Move W1, W19
	049 Move X2, X31
	050 Call String.IndexOf, X0, X1
	051 Add W31, W0, 1
	052 NotImplemented "Instruction CSET not yet implemented."
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return X0
	059 Call 0x1C17F20

Method: UnityEngine.Hash128 StringToValue(System.String str)

Disassembly:
	0x03D13D38 LDR V8, [X31 + 0x30]
	0x03D13D3C MOV S1, V0.S[1]

ISIL:
	001 Move X0, X1
	002 Call Hash128Input.Parse, X0
	003 Return X0

Method: UnityEngine.Hash128 Parse(System.String str)

Disassembly:
	0x03D13880 ADRP X8, 0xFFFFFFFFFCDD6000
	0x03D13884 LDR V2, [X8 + 0xF20]
	0x03D13888 FSUB S0, S13, S0
	0x03D1388C FSUB S1, S12, S1
	0x03D13890 FMUL S0, S0, S0
	0x03D13894 FMUL S1, S1, S1
	0x03D13898 FADD S0, S0, S1
	0x03D1389C FCMP S0, S2
	0x03D138A0 B.MI 0x3D138D0
	0x03D138A4 LDR V0, [X19 + 0x3E8]
	0x03D138A8 LDR V1, [X19 + 0x3EC]
	0x03D138AC LDR V3, [X19 + 0x3F4]
	0x03D138B0 LDR V2, [X19 + 0x3F0]
	0x03D138B4 FMOV S4, 1
	0x03D138B8 FMUL S8, S13, S0
	0x03D138BC FSUB S0, S4, S1
	0x03D138C0 FSUB S0, S0, S3
	0x03D138C4 FMUL S9, S13, S2
	0x03D138C8 FMUL S10, S12, S0
	0x03D138CC FMUL S11, S12, S3
	0x03D138D0 MOV V0.16B, V8.16B
	0x03D138D4 MOV V1.16B, V10.16B
	0x03D138D8 MOV V2.16B, V9.16B
	0x03D138DC MOV V3.16B, V11.16B
	0x03D138E0 LDP X20, X19, [X31 + 0x50]
	0x03D138E4 LDP X22, X21, [X31 + 0x40]
	0x03D138E8 LDP X30, X23, [X31 + 0x30]
	0x03D138EC LDP D9, D8, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move [X31+24], X31
	005 Compare X0, 0
	006 JumpIfEqual {34}
	007 Move W8, [X0+16]
	008 Move X19, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X1, X31, 24
	011 Move X0, X19
	012 Move X2, X31
	013 Call UInt64.TryParse, X0, X1
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {27}
	018 Move X1, [X31+24]
	019 Add X0, X31, 8
	020 Move X2, X31
	021 Move X3, X31
	022 Move [X31+8], X31
	023 Move [X31+16], X31
	024 Call Hash128..ctor, X0, X1, X2
	025 Move X0, [X31+8]
	026 Move X1, [X31+16]
	027 Move X0, X19
	028 Move X1, X31
	029 Call Hash128.Parse, X0
	030 Move X30, [X31+32]
	031 Move X19, [X31+40]
	032 Add X31, X31, 48
	033 Return X0
	034 Call 0x1C17F20

