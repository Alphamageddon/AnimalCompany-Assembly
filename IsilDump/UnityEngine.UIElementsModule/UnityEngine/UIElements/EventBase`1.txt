Type: UnityEngine.UIElements.EventBase`1

Method: System.Void SetCreateFunction(System.Func`1<T> createMethod)

Disassembly:
	0x02D0E4C0 BL 0x3EB1B20
	0x02D0E4C4 STP X29, X30, [X31 - 0x50]!
	0x02D0E4C8 STP X26, X25, [X31 + 0x10]
	0x02D0E4CC STP X24, X23, [X31 + 0x20]
	0x02D0E4D0 STP X22, X21, [X31 + 0x30]
	0x02D0E4D4 STP X20, X19, [X31 + 0x40]
	0x02D0E4D8 ADD X29, X31, 0x0
	0x02D0E4DC SUB X31, X31, 0x20
	0x02D0E4E0 MRS X26, 0xC000
	0x02D0E4E4 LDR X8, [X26 + 0x28]
	0x02D0E4E8 ADD X9, X31, 0x0
	0x02D0E4EC MOV X19, X3
	0x02D0E4F0 STUR X8, [X29 - 0x8]
	0x02D0E4F4 LDR X8, [X3 + 0x20]
	0x02D0E4F8 LDR X8, [X8 + 0xC0]
	0x02D0E4FC LDR X8, [X8 + 0x8]
	0x02D0E500 LDR W8, [X8 + 0xFC]
	0x02D0E504 ADD X8, X8, 0xF
	0x02D0E508 AND X8, X8, 0x1FFFFFFFF
	0x02D0E50C SUB X20, X9, X8
	0x02D0E510 ADD X31, X20, 0x0
	0x02D0E514 STURB W31, [X29 - 0x20]
	0x02D0E518 CBZ X1, 0x2D0E6D8
	0x02D0E51C LDR X8, [X1]
	0x02D0E520 MOV X21, X1
	0x02D0E524 MOV X23, X0
	0x02D0E528 MOV X0, X21
	0x02D0E52C LDP X9, X1, [X8 + 0x188]
	0x02D0E530 MOV W22, W2
	0x02D0E534 BLR X9
	0x02D0E538 LDR X8, [X19 + 0x20]
	0x02D0E53C MOV X24, X0
	0x02D0E540 MOV X0, X23
	0x02D0E544 LDR X8, [X8 + 0xC0]
	0x02D0E548 LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, [X8+16]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, [X20+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Move X0, [X8+16]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Move X8, [X0+184]
	043 Move X8, [X8+8]
	044 Compare X8, 0
	045 JumpIfEqual {51}
	046 Move [X8+32], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return 
	051 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x02D0E54C LDR X8, [X8 + 0x80]
	0x02D0E550 ADD X1, X8, 0x20
	0x02D0E554 BL 0x1C16D18
	0x02D0E558 LDR X8, [X0]
	0x02D0E55C CMP X24, X8
	0x02D0E560 B.NE 0x2D0E6AC
	0x02D0E564 CBZ X23, 0x2D0E714
	0x02D0E568 MOV X0, X23
	0x02D0E56C MOV W1, W22
	0x02D0E570 MOV X2, X31
	0x02D0E574 BL 0x3DA08F4
	0x02D0E578 TBZ X0, 0x0, 0x2D0E6AC
	0x02D0E57C LDR X8, [X19 + 0x20]
	0x02D0E580 MOV X0, X23
	0x02D0E584 LDR X8, [X8 + 0xC0]
	0x02D0E588 LDR X8, [X8]
	0x02D0E58C LDR X1, [X8 + 0x80]
	0x02D0E590 BL 0x1C16D18
	0x02D0E594 LDR X1, [X0]
	0x02D0E598 SUB X0, X29, 0x20
	0x02D0E59C MOV X2, X21
	0x02D0E5A0 MOV X3, X31
	0x02D0E5A4 BL 0x3DA15F0
	0x02D0E5A8 LDR X8, [X19 + 0x20]
	0x02D0E5AC LDR X8, [X8 + 0xC0]
	0x02D0E5B0 LDR X8, [X8]
	0x02D0E5B4 LDR X1, [X8 + 0x80]
	0x02D0E5B8 MOV X0, X23
	0x02D0E5BC BL 0x1C16D18
	0x02D0E5C0 LDR X8, [X19 + 0x20]
	0x02D0E5C4 LDR X22, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move X8, [X8+192]
	008 Move X8, [X8+16]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move W9, [X8+224]
	018 Compare W9, 0
	019 JumpIfNotEqual {22}
	020 Move X0, X8
	021 Call 0x1C17DFC
	022 Move X8, [X20+32]
	023 Move X8, [X8+192]
	024 Move X0, [X8+16]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Move X8, [X0+184]
	032 Move X0, X19
	033 Move X2, X31
	034 Move W1, [X8+16]
	035 Call EventBase..ctor, X0, X1
	036 Move [X19+128], W31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 

Method: System.Int64 TypeId()

Disassembly:
	0x02D0E5C8 LDR X8, [X8 + 0xC0]
	0x02D0E5CC LDR X1, [X8 + 0x38]
	0x02D0E5D0 LDR X0, [X1]
	0x02D0E5D4 STUR X20, [X29 - 0x18]
	0x02D0E5D8 LDR X8, [X1 + 0x10]
	0x02D0E5DC SUB X3, X29, 0x18
	0x02D0E5E0 MOV X2, X23
	0x02D0E5E4 MOV X4, X20
	0x02D0E5E8 BLR X8
	0x02D0E5EC CBZ X22, 0x2D0E718
	0x02D0E5F0 LDR X8, [X19 + 0x20]
	0x02D0E5F4 LDR X8, [X8 + 0xC0]
	0x02D0E5F8 LDR X1, [X8 + 0x30]
	0x02D0E5FC LDR X23, [X8 + 0x40]
	0x02D0E600 LDRB W8, [X1 + 0x135]
	0x02D0E604 LDR X24, [X23]
	0x02D0E608 TBNZ X8, 0x0, 0x2D0E618
	0x02D0E60C MOV X0, X1
	0x02D0E610 BL 0x1C5C684
	0x02D0E614 MOV X1, X0
	0x02D0E618 MOV X0, X21
	0x02D0E61C BL 0x1C16E00
	0x02D0E620 LDR X8, [X19 + 0x20]
	0x02D0E624 MOV X21, X0
	0x02D0E628 LDR X8, [X8 + 0xC0]
	0x02D0E62C LDR X25, [X8 + 0x30]
	0x02D0E630 LDRB W8, [X25 + 0x135]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Move W8, [X0+309]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {11}
	010 Call 0x1C5D684
	011 Move X8, [X0+192]
	012 Move X0, [X8+16]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Move X0, [X19+32]
	024 Move W8, [X0+309]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {30}
	029 Call 0x1C5D684
	030 Move X8, [X0+192]
	031 Move X0, [X8+16]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X8, [X0+184]
	039 Move X0, [X8]
	040 Move X30, [X31+16]
	041 Move X19, [X31+24]
	042 Return X0

Method: System.Void Init()

Disassembly:
	0x02D0E634 TBNZ X8, 0x0, 0x2D0E644
	0x02D0E638 MOV X0, X25
	0x02D0E63C BL 0x1C5C684
	0x02D0E640 MOV X25, X0
	0x02D0E644 CBZ X21, 0x2D0E664
	0x02D0E648 MOV X0, X21
	0x02D0E64C MOV X1, X25
	0x02D0E650 BL 0x1C16E00
	0x02D0E654 CBNZ X0, 0x2D0E668
	0x02D0E658 MOV X0, X21
	0x02D0E65C MOV X1, X25
	0x02D0E660 BL 0x1C171E0
	0x02D0E664 MOV X0, X31
	0x02D0E668 LDR X8, [X19 + 0x20]
	0x02D0E66C LDR X8, [X8 + 0xC0]
	0x02D0E670 LDR X8, [X8 + 0x8]
	0x02D0E674 LDR W8, [X8 + 0x28]
	0x02D0E678 TBNZ X8, 0x1F, 0x2D0E680
	0x02D0E67C LDR X20, [X20]
	0x02D0E680 STP X0, X20, [X29 - 0x18]
	0x02D0E684 LDR X8, [X23 + 0x10]
	0x02D0E688 SUB X3, X29, 0x18
	0x02D0E68C MOV X0, X24
	0x02D0E690 MOV X1, X23
	0x02D0E694 MOV X2, X22
	0x02D0E698 MOV X4, X20
	0x02D0E69C BLR X8
	0x02D0E6A0 SUB X0, X29, 0x20
	0x02D0E6A4 MOV X1, X31
	0x02D0E6A8 BL 0x3DA15F4
	0x02D0E6AC LDR X8, [X26 + 0x28]
	0x02D0E6B0 LDUR X9, [X29 - 0x8]
	0x02D0E6B4 CMP X8, X9
	0x02D0E6B8 B.NE 0x2D0E71C
	0x02D0E6BC ADD X31, X29, 0x0
	0x02D0E6C0 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x16CE000
	005 Move W8, [X20+1938]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x13E6000
	012 Move X0, [X0+2600]
	013 Call 0x1C17CF4
	014 Move X0, 0x1411000
	015 Move X0, [X0+3256]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1938], W8
	019 Compare X19, 0
	020 JumpIfEqual {44}
	021 Move X0, X19
	022 Move X1, X31
	023 Call EventBase.Init, X0
	024 Move W8, [X19+128]
	025 Compare W8, 0
	026 JumpIfEqual {40}
	027 Move X8, 0x13E6000
	028 Move X8, [X8+2600]
	029 Move X20, 0x1411000
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Move X20, [X20+3256]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move X1, X31
	038 Call Debug.Log, X0
	039 Move [X19+128], W31
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return 
	044 Call 0x1C17F20

Method: T GetPooled()

Disassembly:
	0x02D0E6C4 LDP X22, X21, [X31 + 0x30]
	0x02D0E6C8 LDP X24, X23, [X31 + 0x20]
	0x02D0E6CC LDP X26, X25, [X31 + 0x10]
	0x02D0E6D0 LDP X29, X30, [X31], #0x50
	0x02D0E6D4 RET
	0x02D0E6D8 ADRP X0, 0x13EA000
	0x02D0E6DC LDR X0, [X0 + 0x528]
	0x02D0E6E0 BL 0x1C16D08
	0x02D0E6E4 BL 0x1C16F10
	0x02D0E6E8 MOV X20, X0
	0x02D0E6EC ADRP X0, 0x1410000
	0x02D0E6F0 LDR X0, [X0 + 0xCC8]
	0x02D0E6F4 BL 0x1C16D08
	0x02D0E6F8 MOV X1, X0
	0x02D0E6FC MOV X0, X20
	0x02D0E700 MOV X2, X31
	0x02D0E704 BL 0x330E100
	0x02D0E708 MOV X0, X20
	0x02D0E70C MOV X1, X19
	0x02D0E710 BL 0x1C16DEC
	0x02D0E714 BL 0x1C16F20
	0x02D0E718 BL 0x1C16F20
	0x02D0E71C BL 0x3EB1B20
	0x02D0E720 B 0x2D0E724
	0x02D0E724 MOV X20, X0
	0x02D0E728 CMP W1, 0x1
	0x02D0E72C B.NE 0x2D0E758
	0x02D0E730 MOV X0, X20
	0x02D0E734 BL 0x3EB1AD0
	0x02D0E738 LDR X19, [X0]
	0x02D0E73C BL 0x3EB1AE0
	0x02D0E740 SUB X0, X29, 0x20
	0x02D0E744 MOV X1, X31
	0x02D0E748 BL 0x3DA15F4
	0x02D0E74C CBZ X19, 0x2D0E6AC
	0x02D0E750 MOV X0, X19
	0x02D0E754 BL 0x1C16F18
	0x02D0E758 MOV X19, X31
	0x02D0E75C B 0x2D0E764
	0x02D0E760 MOV X20, X0
	0x02D0E764 SUB X0, X29, 0x20
	0x02D0E768 MOV X1, X31
	0x02D0E76C BL 0x3DA15F4
	0x02D0E770 CBNZ X19, 0x2D0E77C
	0x02D0E774 MOV X0, X20
	0x02D0E778 BL 0x1D2C690
	0x02D0E77C MOV X0, X19
	0x02D0E780 BL 0x1C16F18
	0x02D0E784 BL 0x1990590
	0x02D0E788 STP X30, X23, [X31 - 0x30]!
	0x02D0E78C STP X22, X21, [X31 + 0x10]
	0x02D0E790 STP X20, X19, [X31 + 0x20]
	0x02D0E794 LDR X8, [X4 + 0x20]
	0x02D0E798 MOV X23, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+32]
	006 Move W8, [X0+309]
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {12}
	011 Call 0x1C5D684
	012 Move X8, [X0+192]
	013 Move X0, [X8+16]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, [X19+32]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Move X8, [X0+192]
	032 Move X0, [X8+16]
	033 Move W8, [X0+309]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {39}
	038 Call 0x1C5D684
	039 Move X8, [X0+184]
	040 Move X20, [X8+8]
	041 Compare X20, 0
	042 JumpIfEqual {75}
	043 Move X0, [X19+32]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move X8, [X0+192]
	051 Move X0, X20
	052 Move X1, [X8+32]
	053 Call 0x249568C, X0
	054 Compare X0, 0
	055 JumpIfEqual {75}
	056 Move X8, [X0]
	057 Move X19, X0
	058 Move X9, [X8+504]
	059 Move X1, [X8+512]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move W1, 1
	062 Move X0, X19
	063 Move X2, X31
	064 Call EventBase.set_pooled, X0, X1
	065 Move X8, [X19]
	066 Move X0, X19
	067 Move X9, [X8+520]
	068 Move X1, [X8+528]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X0, X19
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Return X0
	075 Call 0x1C17F20

Method: T GetPooled(UnityEngine.UIElements.EventBase e)

Disassembly:
	0x02D0E79C MOV X22, X4
	0x02D0E7A0 MOV W19, W3
	0x02D0E7A4 LDR X8, [X8 + 0xC0]
	0x02D0E7A8 MOV X21, X2
	0x02D0E7AC MOV X20, X0
	0x02D0E7B0 LDR X8, [X8]
	0x02D0E7B4 LDR X8, [X8 + 0x80]
	0x02D0E7B8 ADD X1, X8, 0x20
	0x02D0E7BC BL 0x1C16D18
	0x02D0E7C0 LDR X8, [X0]
	0x02D0E7C4 CMP X8, X23
	0x02D0E7C8 B.NE 0x2D0E80C
	0x02D0E7CC LDR X8, [X22 + 0x20]
	0x02D0E7D0 MOV X0, X20
	0x02D0E7D4 LDR X8, [X8 + 0xC0]
	0x02D0E7D8 LDR X8, [X8]
	0x02D0E7DC LDR X1, [X8 + 0x80]
	0x02D0E7E0 BL 0x1C16D18
	0x02D0E7E4 LDR X0, [X0]
	0x02D0E7E8 MOV X1, X21
	0x02D0E7EC MOV X2, X31
	0x02D0E7F0 BL 0x33C60F0
	0x02D0E7F4 TBZ X0, 0x0, 0x2D0E80C
	0x02D0E7F8 CBZ X20, 0x2D0E820
	0x02D0E7FC LDR W8, [X20 + 0x10]
	0x02D0E800 CMP W8, W19
	0x02D0E804 CSET W0, EQ
	0x02D0E808 B 0x2D0E810
	0x02D0E80C MOV W0, W31
	0x02D0E810 LDP X20, X19, [X31 + 0x20]
	0x02D0E814 LDP X22, X21, [X31 + 0x10]
	0x02D0E818 LDP X30, X23, [X31], #0x30
	0x02D0E81C RET
	0x02D0E820 BL 0x1C16F20
	0x02D0E824 STR X30, [X31 - 0x30]!
	0x02D0E828 STP X22, X21, [X31 + 0x10]
	0x02D0E82C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, [X8+16]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, [X20+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Move X0, [X8+48]
	036 Call 0x2D0E6C4
	037 Move X20, X0
	038 Compare X19, 0
	039 JumpIfEqual {46}
	040 Compare X20, 0
	041 JumpIfEqual {51}
	042 Move X1, [X19+32]
	043 Move X0, X20
	044 Move X2, X31
	045 Call EventBase.SetTriggerEventId, X0, X1
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return X0
	051 Call 0x1C17F20

Method: System.Void ReleasePooled(T evt)

Disassembly:
	0x02D0E830 LDR X8, [X2 + 0x8]
	0x02D0E834 STP X1, X2, [X0 + 0x20]
	0x02D0E838 MOV X19, X0
	0x02D0E83C MOV X20, X2
	0x02D0E840 STR X8, [X0 + 0x10]
	0x02D0E844 LDRB W22, [X2 + 0x52]
	0x02D0E848 STR X0, [X0 + 0x40]
	0x02D0E84C MOV X0, X2
	0x02D0E850 MOV X21, X1
	0x02D0E854 BL 0x1C16D84
	0x02D0E858 TBZ X0, 0x0, 0x2D0E870
	0x02D0E85C CMP W22, 0x1
	0x02D0E860 B.NE 0x2D0E878
	0x02D0E864 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E868 ADD X8, X8, 0x664
	0x02D0E86C B 0x2D0E8EC
	0x02D0E870 CBZ W22, 0x2D0E88C
	0x02D0E874 CBZ X21, 0x2D0E90C
	0x02D0E878 LDR X8, [X19 + 0x10]
	0x02D0E87C LDR X9, [X19 + 0x20]
	0x02D0E880 STR X8, [X19 + 0x18]
	0x02D0E884 STR X9, [X19 + 0x40]
	0x02D0E888 B 0x2D0E8F0
	0x02D0E88C LDRB W8, [X19 + 0x70]
	0x02D0E890 CBZ W8, 0x2D0E8BC
	0x02D0E894 MOV X0, X20
	0x02D0E898 BL 0x1C16D7C
	0x02D0E89C MOV W21, W0
	0x02D0E8A0 MOV X0, X20
	0x02D0E8A4 BL 0x1C17238
	0x02D0E8A8 TBZ X21, 0x0, 0x2D0E8C8
	0x02D0E8AC TBZ X0, 0x0, 0x2D0E8D8
	0x02D0E8B0 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E8B4 ADD X8, X8, 0x760
	0x02D0E8B8 B 0x2D0E8EC
	0x02D0E8BC ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E8C0 ADD X8, X8, 0x644
	0x02D0E8C4 B 0x2D0E8EC
	0x02D0E8C8 TBZ X0, 0x0, 0x2D0E8E4
	0x02D0E8CC ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E8D0 ADD X8, X8, 0x6A0
	0x02D0E8D4 B 0x2D0E8EC
	0x02D0E8D8 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E8DC ADD X8, X8, 0x724
	0x02D0E8E0 B 0x2D0E8EC
	0x02D0E8E4 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E8E8 ADD X8, X8, 0x674
	0x02D0E8EC STR X8, [X19 + 0x18]
	0x02D0E8F0 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E8F4 ADD X8, X8, 0x5FC
	0x02D0E8F8 STR X8, [X19 + 0x38]
	0x02D0E8FC LDP X20, X19, [X31 + 0x20]
	0x02D0E900 LDP X22, X21, [X31 + 0x10]
	0x02D0E904 LDR X30, [X31], #0x30
	0x02D0E908 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {84}
	007 Move X20, X1
	008 Move X1, X31
	009 Move X19, X0
	010 Call EventBase.get_pooled, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {79}
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X9, [X8+504]
	018 Move X1, [X8+512]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X0, [X20+32]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move X8, [X0+192]
	028 Move X0, [X8+16]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, [X20+32]
	040 Move W8, [X0+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {46}
	045 Call 0x1C5D684
	046 Move X8, [X0+192]
	047 Move X0, [X8+16]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move X8, [X0+184]
	055 Move X21, [X8+8]
	056 Compare X21, 0
	057 JumpIfEqual {84}
	058 Move X0, [X20+32]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {65}
	064 Call 0x1C5D684
	065 Move X8, [X0+192]
	066 Move X0, X21
	067 Move X1, X19
	068 Move X2, [X8+56]
	069 Call 0x24956D8, X0, X1
	070 Move X0, X19
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move W1, W31
	074 Move X2, X31
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Call EventBase.set_pooled, X0, X1
	078 Return 
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Return 
	084 Call 0x1C17F20

Method: System.Void Acquire()

Disassembly:
	0x02D0E90C ADRP X1, 0xFFFFFFFFFDE0D000
	0x02D0E910 ADD X1, X1, 0xEE3
	0x02D0E914 MOV X0, X31
	0x02D0E918 BL 0x1C16F3C

ISIL:
	001 Move W8, [X0+128]
	002 Add W8, W8, 1
	003 Move [X0+128], W8
	004 Return 

Method: System.Void Dispose()

Disassembly:
	0x02D0E91C MOV X1, X31
	0x02D0E920 BL 0x1C16DEC
	0x02D0E924 LDR X8, [X0 + 0x40]
	0x02D0E928 LDR X3, [X0 + 0x18]
	0x02D0E92C LDR X2, [X0 + 0x28]
	0x02D0E930 MOV X0, X8
	0x02D0E934 BR X3
	0x02D0E938 STR X30, [X31 - 0x30]!
	0x02D0E93C STP X22, X21, [X31 + 0x10]
	0x02D0E940 STP X20, X19, [X31 + 0x20]
	0x02D0E944 LDR X8, [X2 + 0x8]
	0x02D0E948 STP X1, X2, [X0 + 0x20]
	0x02D0E94C MOV X19, X0
	0x02D0E950 MOV X20, X2
	0x02D0E954 STR X8, [X0 + 0x10]
	0x02D0E958 LDRB W22, [X2 + 0x52]
	0x02D0E95C STR X0, [X0 + 0x40]
	0x02D0E960 MOV X0, X2
	0x02D0E964 MOV X21, X1
	0x02D0E968 BL 0x1C16D84
	0x02D0E96C TBZ X0, 0x0, 0x2D0E98C
	0x02D0E970 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E974 ADRP X9, 0xFFFFFFFFFECED000
	0x02D0E978 ADD X8, X8, 0x860
	0x02D0E97C ADD X9, X9, 0x834
	0x02D0E980 CMP W22, 0x1
	0x02D0E984 CSEL X8, X9, X8, EQ
	0x02D0E988 B 0x2D0E99C
	0x02D0E98C CBZ W22, 0x2D0E9BC
	0x02D0E990 CBZ X21, 0x2D0EA20
	0x02D0E994 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E998 ADD X8, X8, 0x898
	0x02D0E99C STR X8, [X19 + 0x18]
	0x02D0E9A0 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E9A4 ADD X8, X8, 0x7EC
	0x02D0E9A8 STR X8, [X19 + 0x38]
	0x02D0E9AC LDP X20, X19, [X31 + 0x20]
	0x02D0E9B0 LDP X22, X21, [X31 + 0x10]
	0x02D0E9B4 LDR X30, [X31], #0x30
	0x02D0E9B8 RET
	0x02D0E9BC LDRB W8, [X19 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+128]
	006 Subtract W8, W8, 1
	007 Move [X0+128], W8
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Move X21, [X31+40]
	012 Return 
	013 Move X8, [X1+32]
	014 Move X20, X0
	015 Move X19, X1
	016 Move X8, [X8+192]
	017 Move X0, [X8+16]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X8, [X19+32]
	029 Move X8, [X8+192]
	030 Move X21, [X8+40]
	031 Move W8, [X21+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {39}
	036 Move X0, X21
	037 Call 0x1C5D684
	038 Move X21, X0
	039 Move X0, X20
	040 Move X1, X21
	041 Call 0x1C17E00
	042 Compare X0, 0
	043 JumpIfEqual {53}
	044 Move X8, [X19+32]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X8, [X8+192]
	048 Move X1, [X8+64]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call 0x2D0E830, X0
	052 Return 
	053 Move X0, X20
	054 Move X1, X21
	055 Call 0x1C181E0

Method: System.Int64 get_eventTypeId()

Disassembly:
	0x02D0E9C0 CBZ W8, 0x2D0E9EC
	0x02D0E9C4 MOV X0, X20
	0x02D0E9C8 BL 0x1C16D7C
	0x02D0E9CC MOV W21, W0
	0x02D0E9D0 MOV X0, X20
	0x02D0E9D4 BL 0x1C17238
	0x02D0E9D8 TBZ X21, 0x0, 0x2D0E9F8
	0x02D0E9DC TBZ X0, 0x0, 0x2D0EA08
	0x02D0E9E0 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E9E4 ADD X8, X8, 0xA08
	0x02D0E9E8 B 0x2D0E99C
	0x02D0E9EC ADRP X8, 0xFFFFFFFFFECED000
	0x02D0E9F0 ADD X8, X8, 0x8CC
	0x02D0E9F4 B 0x2D0E99C
	0x02D0E9F8 TBZ X0, 0x0, 0x2D0EA14
	0x02D0E9FC ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EA00 ADD X8, X8, 0x934
	0x02D0EA04 B 0x2D0E99C
	0x02D0EA08 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EA0C ADD X8, X8, 0x9C4
	0x02D0EA10 B 0x2D0E99C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+32]
	004 Move X19, X1
	005 Move X8, [X8+192]
	006 Move X0, [X8+16]
	007 Move W8, [X0+309]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {13}
	012 Call 0x1C5D684
	013 Move W8, [X0+224]
	014 Compare W8, 0
	015 JumpIfNotEqual {17}
	016 Call 0x1C17DFC
	017 Move X8, [X19+32]
	018 Move X8, [X8+192]
	019 Move X0, [X8+16]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move X8, [X0+184]
	027 Move X0, [X8]
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return X0

Method: System.Void .cctor()

Disassembly:
	0x02D0EA14 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EA18 ADD X8, X8, 0x8FC
	0x02D0EA1C B 0x2D0E99C
	0x02D0EA20 ADRP X1, 0xFFFFFFFFFDE0D000
	0x02D0EA24 ADD X1, X1, 0xEE3
	0x02D0EA28 MOV X0, X31
	0x02D0EA2C BL 0x1C16F3C
	0x02D0EA30 MOV X1, X31
	0x02D0EA34 BL 0x1C16DEC
	0x02D0EA38 LDR X8, [X0 + 0x40]
	0x02D0EA3C LDR X3, [X0 + 0x18]
	0x02D0EA40 LDR X2, [X0 + 0x28]
	0x02D0EA44 MOV X0, X8
	0x02D0EA48 BR X3
	0x02D0EA4C STR X30, [X31 - 0x30]!
	0x02D0EA50 STP X22, X21, [X31 + 0x10]
	0x02D0EA54 STP X20, X19, [X31 + 0x20]
	0x02D0EA58 LDR X8, [X2 + 0x8]
	0x02D0EA5C STP X1, X2, [X0 + 0x20]
	0x02D0EA60 MOV X19, X0
	0x02D0EA64 MOV X20, X2
	0x02D0EA68 STR X8, [X0 + 0x10]
	0x02D0EA6C LDRB W22, [X2 + 0x52]
	0x02D0EA70 STR X0, [X0 + 0x40]
	0x02D0EA74 MOV X0, X2
	0x02D0EA78 MOV X21, X1
	0x02D0EA7C BL 0x1C16D84
	0x02D0EA80 TBZ X0, 0x0, 0x2D0EA98
	0x02D0EA84 CMP W22, 0x2
	0x02D0EA88 B.NE 0x2D0EAD4
	0x02D0EA8C ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EA90 ADD X8, X8, 0xB18
	0x02D0EA94 B 0x2D0EB18
	0x02D0EA98 CMP W22, 0x1
	0x02D0EA9C B.NE 0x2D0EAD0
	0x02D0EAA0 LDRB W8, [X19 + 0x70]
	0x02D0EAA4 CBZ W8, 0x2D0EAE8
	0x02D0EAA8 MOV X0, X20
	0x02D0EAAC BL 0x1C16D7C
	0x02D0EAB0 MOV W21, W0
	0x02D0EAB4 MOV X0, X20
	0x02D0EAB8 BL 0x1C17238
	0x02D0EABC TBZ X21, 0x0, 0x2D0EAF4
	0x02D0EAC0 TBZ X0, 0x0, 0x2D0EB04
	0x02D0EAC4 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EAC8 ADD X8, X8, 0xC34
	0x02D0EACC B 0x2D0EB18
	0x02D0EAD0 CBZ X21, 0x2D0EB38
	0x02D0EAD4 LDR X8, [X19 + 0x10]
	0x02D0EAD8 LDR X9, [X19 + 0x20]
	0x02D0EADC STR X8, [X19 + 0x18]
	0x02D0EAE0 STR X9, [X19 + 0x40]
	0x02D0EAE4 B 0x2D0EB1C
	0x02D0EAE8 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EAEC ADD X8, X8, 0xAF4
	0x02D0EAF0 B 0x2D0EB18
	0x02D0EAF4 TBZ X0, 0x0, 0x2D0EB10
	0x02D0EAF8 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EAFC ADD X8, X8, 0xB5C
	0x02D0EB00 B 0x2D0EB18
	0x02D0EB04 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EB08 ADD X8, X8, 0xBE8
	0x02D0EB0C B 0x2D0EB18
	0x02D0EB10 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EB14 ADD X8, X8, 0xB2C
	0x02D0EB18 STR X8, [X19 + 0x18]
	0x02D0EB1C ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EB20 ADD X8, X8, 0xA9C
	0x02D0EB24 STR X8, [X19 + 0x38]
	0x02D0EB28 LDP X20, X19, [X31 + 0x20]
	0x02D0EB2C LDP X22, X21, [X31 + 0x10]
	0x02D0EB30 LDR X30, [X31], #0x30
	0x02D0EB34 RET
	0x02D0EB38 ADRP X1, 0xFFFFFFFFFDE0D000
	0x02D0EB3C ADD X1, X1, 0xEE3
	0x02D0EB40 MOV X0, X31
	0x02D0EB44 BL 0x1C16F3C
	0x02D0EB48 MOV X1, X31
	0x02D0EB4C BL 0x1C16DEC
	0x02D0EB50 LDR X8, [X0 + 0x40]
	0x02D0EB54 LDR X4, [X0 + 0x18]
	0x02D0EB58 LDR X3, [X0 + 0x28]
	0x02D0EB5C MOV X0, X8
	0x02D0EB60 BR X4
	0x02D0EB64 STR X30, [X31 - 0x30]!
	0x02D0EB68 STP X22, X21, [X31 + 0x10]
	0x02D0EB6C STP X20, X19, [X31 + 0x20]
	0x02D0EB70 LDR X8, [X2 + 0x8]
	0x02D0EB74 STP X1, X2, [X0 + 0x20]
	0x02D0EB78 MOV X19, X0
	0x02D0EB7C MOV X20, X2
	0x02D0EB80 STR X8, [X0 + 0x10]
	0x02D0EB84 LDRB W22, [X2 + 0x52]
	0x02D0EB88 STR X0, [X0 + 0x40]
	0x02D0EB8C MOV X0, X2
	0x02D0EB90 MOV X21, X1
	0x02D0EB94 BL 0x1C16D84
	0x02D0EB98 TBZ X0, 0x0, 0x2D0EBB8
	0x02D0EB9C ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EBA0 ADRP X9, 0xFFFFFFFFFECED000
	0x02D0EBA4 ADD X8, X8, 0xD58
	0x02D0EBA8 ADD X9, X9, 0xD20
	0x02D0EBAC CMP W22, 0x2
	0x02D0EBB0 CSEL X8, X9, X8, EQ
	0x02D0EBB4 B 0x2D0EC30
	0x02D0EBB8 CMP W22, 0x1
	0x02D0EBBC B.NE 0x2D0EBF0
	0x02D0EBC0 LDRB W8, [X19 + 0x70]
	0x02D0EBC4 CBZ W8, 0x2D0EC00
	0x02D0EBC8 MOV X0, X20
	0x02D0EBCC BL 0x1C16D7C
	0x02D0EBD0 MOV W21, W0
	0x02D0EBD4 MOV X0, X20
	0x02D0EBD8 BL 0x1C17238
	0x02D0EBDC TBZ X21, 0x0, 0x2D0EC0C
	0x02D0EBE0 TBZ X0, 0x0, 0x2D0EC1C
	0x02D0EBE4 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EBE8 ADD X8, X8, 0xF3C
	0x02D0EBEC B 0x2D0EC30
	0x02D0EBF0 CBZ X21, 0x2D0EC50
	0x02D0EBF4 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EBF8 ADD X8, X8, 0xD94
	0x02D0EBFC B 0x2D0EC30
	0x02D0EC00 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EC04 ADD X8, X8, 0xDCC
	0x02D0EC08 B 0x2D0EC30
	0x02D0EC0C TBZ X0, 0x0, 0x2D0EC28
	0x02D0EC10 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EC14 ADD X8, X8, 0xE40
	0x02D0EC18 B 0x2D0EC30
	0x02D0EC1C ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EC20 ADD X8, X8, 0xEE4
	0x02D0EC24 B 0x2D0EC30
	0x02D0EC28 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EC2C ADD X8, X8, 0xE04
	0x02D0EC30 STR X8, [X19 + 0x18]
	0x02D0EC34 ADRP X8, 0xFFFFFFFFFECED000
	0x02D0EC38 ADD X8, X8, 0xCC8
	0x02D0EC3C STR X8, [X19 + 0x38]
	0x02D0EC40 LDP X20, X19, [X31 + 0x20]
	0x02D0EC44 LDP X22, X21, [X31 + 0x10]
	0x02D0EC48 LDR X30, [X31], #0x30
	0x02D0EC4C RET
	0x02D0EC50 ADRP X1, 0xFFFFFFFFFDE0D000
	0x02D0EC54 ADD X1, X1, 0xEE3
	0x02D0EC58 MOV X0, X31
	0x02D0EC5C BL 0x1C16F3C
	0x02D0EC60 MOV X1, X31
	0x02D0EC64 BL 0x1C16DEC
	0x02D0EC68 LDR X8, [X0 + 0x40]
	0x02D0EC6C LDR X4, [X0 + 0x18]
	0x02D0EC70 LDR X3, [X0 + 0x28]
	0x02D0EC74 MOV X0, X8
	0x02D0EC78 BR X4
	0x02D0EC7C STR X30, [X31 - 0x30]!
	0x02D0EC80 STP X22, X21, [X31 + 0x10]
	0x02D0EC84 STP X20, X19, [X31 + 0x20]
	0x02D0EC88 LDR X8, [X2 + 0x8]
	0x02D0EC8C STP X1, X2, [X0 + 0x20]
	0x02D0EC90 MOV X19, X0
	0x02D0EC94 MOV X20, X2
	0x02D0EC98 STR X8, [X0 + 0x10]
	0x02D0EC9C LDRB W22, [X2 + 0x52]
	0x02D0ECA0 STR X0, [X0 + 0x40]
	0x02D0ECA4 MOV X0, X2
	0x02D0ECA8 MOV X21, X1
	0x02D0ECAC BL 0x1C16D84
	0x02D0ECB0 TBZ X0, 0x0, 0x2D0ECC8
	0x02D0ECB4 CMP W22, 0x2
	0x02D0ECB8 B.NE 0x2D0ED04
	0x02D0ECBC ADRP X8, 0xFFFFFFFFFECEE000
	0x02D0ECC0 ADD X8, X8, 0x60
	0x02D0ECC4 B 0x2D0ED48
	0x02D0ECC8 CMP W22, 0x1
	0x02D0ECCC B.NE 0x2D0ED00
	0x02D0ECD0 LDRB W8, [X19 + 0x70]
	0x02D0ECD4 CBZ W8, 0x2D0ED18
	0x02D0ECD8 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x16CE000
	007 Move W8, [X20+1939]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x1411000
	014 Move X0, [X0+3264]
	015 Call 0x1C17CF4
	016 Move X0, 0x13E6000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1939], W8
	021 Move X0, X31
	022 Call EventBase.RegisterEventType
	023 Move X8, [X19+32]
	024 Move X20, X0
	025 Move W9, [X8+309]
	026 Move TEMP, X9
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {33}
	030 Move X0, X8
	031 Call 0x1C5D684
	032 Move X8, X0
	033 Move X8, [X8+192]
	034 Move X0, [X8+16]
	035 Move W8, [X0+309]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {41}
	040 Call 0x1C5D684
	041 Move X8, [X0+184]
	042 Move [X8], X20
	043 Move X0, [X19+32]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move X8, [X0+192]
	051 Move X0, [X8+80]
	052 Move W8, [X0+309]
	053 Move TEMP, X8
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {58}
	057 Call 0x1C5D684
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, [X19+32]
	063 Move W8, [X0+309]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {69}
	068 Call 0x1C5D684
	069 Move X8, [X0+192]
	070 Move X0, [X8+80]
	071 Move W8, [X0+309]
	072 Move TEMP, X8
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {77}
	076 Call 0x1C5D684
	077 Move X8, [X19+32]
	078 Move X9, [X0+184]
	079 Move W10, [X8+309]
	080 Move X21, [X9]
	081 Move TEMP, X10
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {88}
	085 Move X0, X8
	086 Call 0x1C5D684
	087 Move X8, X0
	088 Move X8, [X8+192]
	089 Move X0, [X8+24]
	090 Move W8, [X0+309]
	091 Move TEMP, X8
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {96}
	095 Call 0x1C5D684
	096 Call 0x1C17F10
	097 Move X8, [X19+32]
	098 Move X20, X0
	099 Add X9, X8, 309
	100 NotImplemented "Instruction LDRH not yet implemented."
	101 Move TEMP, X9
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {110}
	105 Move X0, X8
	106 Call 0x1C5D684
	107 Move X8, [X19+32]
	108 Add X9, X8, 309
	109 NotImplemented "Instruction LDRH not yet implemented."
	110 Move X0, X8
	111 Move X10, [X0+192]
	112 Move X22, [X10+88]
	113 Move TEMP, X9
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfEqual {120}
	117 Move X0, X8
	118 Call 0x1C5D684
	119 Move X8, X0
	120 Move X8, [X8+192]
	121 Move X0, X20
	122 Move X1, X21
	123 Move X2, X22
	124 Move X3, [X8+96]
	125 Call Func`1<Object>..ctor, X0, X1, X2
	126 Move X0, [X19+32]
	127 Move W8, [X0+309]
	128 Move TEMP, X8
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfEqual {133}
	132 Call 0x1C5D684
	133 Move X8, [X0+192]
	134 Move X0, [X8+8]
	135 Move W8, [X0+309]
	136 Move TEMP, X8
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfEqual {141}
	140 Call 0x1C5D684
	141 Call 0x1C17F10
	142 Move X8, [X19+32]
	143 Move X21, X0
	144 Move W9, [X8+309]
	145 Move TEMP, X9
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfEqual {152}
	149 Move X0, X8
	150 Call 0x1C5D684
	151 Move X8, X0
	152 Move X8, [X8+192]
	153 Move W2, 100
	154 Move X0, X21
	155 Move X1, X20
	156 Move X3, [X8+104]
	157 Call 0x24954D4, X0, X1, X2
	158 Move X0, [X19+32]
	159 Move W8, [X0+309]
	160 Move TEMP, X8
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfEqual {165}
	164 Call 0x1C5D684
	165 Move X8, [X0+192]
	166 Move X0, [X8+16]
	167 Move W8, [X0+309]
	168 Move TEMP, X8
	169 And TEMP, TEMP, 1
	170 Compare TEMP, 1
	171 JumpIfEqual {173}
	172 Call 0x1C5D684
	173 Move X8, [X0+184]
	174 Move [X8+8], X21
	175 Move X0, [X19+32]
	176 Move W8, [X0+309]
	177 Move TEMP, X8
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfEqual {182}
	181 Call 0x1C5D684
	182 Move X8, [X0+192]
	183 Move X0, [X8+16]
	184 Move W8, [X0+309]
	185 Move TEMP, X8
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfEqual {190}
	189 Call 0x1C5D684
	190 Move X0, [X19+32]
	191 Move X20, 0x13E6000
	192 Move W8, [X0+309]
	193 Move X20, [X20+1728]
	194 Move TEMP, X8
	195 And TEMP, TEMP, 1
	196 Compare TEMP, 1
	197 JumpIfEqual {199}
	198 Call 0x1C5D684
	199 Move X8, [X20]
	200 Move X9, [X0+192]
	201 Move X21, 0x1411000
	202 Move W10, [X8+224]
	203 Move X20, [X9+112]
	204 Move X21, [X21+3264]
	205 Compare W10, 0
	206 JumpIfNotEqual {209}
	207 Move X0, X8
	208 Call 0x1C17DFC
	209 Move X0, X20
	210 Move X1, X31
	211 Call Type.GetTypeFromHandle, X0
	212 Move X8, [X21]
	213 Move X20, X0
	214 Move W9, [X8+224]
	215 Compare W9, 0
	216 JumpIfNotEqual {219}
	217 Move X0, X8
	218 Call 0x1C17DFC
	219 Move X0, X20
	220 Move X1, X31
	221 Call EventInterestReflectionUtils.GetEventCategory, X0
	222 Move X8, [X19+32]
	223 Move W19, W0
	224 Move W9, [X8+309]
	225 Move TEMP, X9
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfEqual {232}
	229 Move X0, X8
	230 Call 0x1C5D684
	231 Move X8, X0
	232 Move X8, [X8+192]
	233 Move X0, [X8+16]
	234 Move W8, [X0+309]
	235 Move TEMP, X8
	236 And TEMP, TEMP, 1
	237 Compare TEMP, 1
	238 JumpIfEqual {240}
	239 Call 0x1C5D684
	240 Move X8, [X0+184]
	241 Move X22, [X31+16]
	242 Move X21, [X31+24]
	243 Move [X8+16], W19
	244 Move X20, [X31+32]
	245 Move X19, [X31+40]
	246 Move X30, [X31+48]
	247 Return 

