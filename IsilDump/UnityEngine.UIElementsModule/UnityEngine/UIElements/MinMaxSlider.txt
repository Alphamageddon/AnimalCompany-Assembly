Type: UnityEngine.UIElements.MinMaxSlider

Method: UnityEngine.UIElements.VisualElement get_dragElement()

Disassembly:
	0x03D6D3CC BL 0x1C5C788
	0x03D6D3D0 B 0x3D6D3E4

ISIL:
	001 Move X0, [X0+1088]
	002 Return X0

Method: System.Void set_dragElement(UnityEngine.UIElements.VisualElement value)

Disassembly:
	0x03D6D3D4 LDR W8, [X8]
	0x03D6D3D8 ADD W8, W8, 0x2D

ISIL:
	001 Move [X0+1088], X1
	002 Return 

Method: UnityEngine.UIElements.VisualElement get_dragMinThumb()

Disassembly:
	0x03D6D3DC ADD X8, X9, W8, 0x4, SXTW
	0x03D6D3E0 ADD X0, X8, 0x138

ISIL:
	001 Move X0, [X0+1096]
	002 Return X0

Method: System.Void set_dragMinThumb(UnityEngine.UIElements.VisualElement value)

Disassembly:
	0x03D6D3E4 LDP X8, X3, [X0]
	0x03D6D3E8 MOV X0, X20

ISIL:
	001 Move [X0+1096], X1
	002 Return 

Method: UnityEngine.UIElements.VisualElement get_dragMaxThumb()

Disassembly:
	0x03D6D3EC MOV X1, X21
	0x03D6D3F0 MOV X2, X22

ISIL:
	001 Move X0, [X0+1104]
	002 Return X0

Method: System.Void set_dragMaxThumb(UnityEngine.UIElements.VisualElement value)

Disassembly:
	0x03D6D3F4 BLR X8
	0x03D6D3F8 LDR X0, [X19 + 0x450]

ISIL:
	001 Move [X0+1104], X1
	002 Return 

Method: UnityEngine.UIElements.ClampedDragger`1<System.Single> get_clampedDragger()

Disassembly:
	0x03D6D3FC CBZ X0, 0x3D6D540
	0x03D6D400 MOV X1, X31

ISIL:
	001 Move X0, [X0+1112]
	002 Return X0

Method: System.Void set_clampedDragger(UnityEngine.UIElements.ClampedDragger`1<System.Single> value)

Disassembly:
	0x03D6D404 BL 0x3DE7EEC
	0x03D6D408 LDR V0, [X19 + 0x488]

ISIL:
	001 Move [X0+1112], X1
	002 Return 

Method: System.Single get_minValue()

Disassembly:
	0x03D6D40C MOV X20, X0
	0x03D6D410 MOV X0, X31
	0x03D6D414 BL 0x3DFED98
	0x03D6D418 CBZ X20, 0x3D6D540

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+2024]
	003 Move X1, [X8+2032]
	004 CallNoReturn X2

Method: System.Void set_minValue(System.Single value)

Disassembly:
	0x03D6D41C LDR X9, [X20]
	0x03D6D420 MOV X8, X1
	0x03D6D424 LDR X1, [X23]
	0x03D6D428 MOV X21, X0
	0x03D6D42C LDRH W10, [X9 + 0x12E]
	0x03D6D430 AND X22, X8, 0x0
	0x03D6D434 CBZ X10, 0x3D6D458
	0x03D6D438 LDR X8, [X9 + 0xB0]
	0x03D6D43C ADD X8, X8, 0x8
	0x03D6D440 LDUR X11, [X8 - 0x8]
	0x03D6D444 CMP X11, X1
	0x03D6D448 B.EQ 0x3D6D468
	0x03D6D44C SUBS X10, X10, 0x1
	0x03D6D450 ADD X8, X8, 0x10
	0x03D6D454 B.NE 0x3D6D440
	0x03D6D458 MOVZ W2, 0x36
	0x03D6D45C MOV X0, X20
	0x03D6D460 BL 0x1C5C788
	0x03D6D464 B 0x3D6D478
	0x03D6D468 LDR W8, [X8]
	0x03D6D46C ADD W8, W8, 0x36
	0x03D6D470 ADD X8, X9, W8, 0x4, SXTW
	0x03D6D474 ADD X0, X8, 0x138
	0x03D6D478 LDP X8, X3, [X0]
	0x03D6D47C MOV X0, X20
	0x03D6D480 MOV X1, X21
	0x03D6D484 MOV X2, X22
	0x03D6D488 BLR X8
	0x03D6D48C LDR X0, [X19 + 0x450]
	0x03D6D490 CBZ X0, 0x3D6D540
	0x03D6D494 MOV X1, X31
	0x03D6D498 BL 0x3DE7EEC
	0x03D6D49C LDR V0, [X19 + 0x48C]
	0x03D6D4A0 MOV X19, X0
	0x03D6D4A4 MOV X0, X31
	0x03D6D4A8 BL 0x3DFED98
	0x03D6D4AC CBZ X19, 0x3D6D540
	0x03D6D4B0 LDR X9, [X19]
	0x03D6D4B4 MOV X8, X1
	0x03D6D4B8 LDR X1, [X23]
	0x03D6D4BC MOV X20, X0
	0x03D6D4C0 LDRH W10, [X9 + 0x12E]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67B000
	007 Move X20, 0x3FA000
	008 Move W8, [X21+3335]
	009 Move X20, [X20+3144]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3FA000
	017 Move X0, [X0+3144]
	018 Call 0x1C17CF4
	019 Move X0, 0x3FA000
	020 Move X0, [X0+3152]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3335], W8
	024 Move X1, [X20]
	025 Move X20, 0x3FA000
	026 Move X20, [X20+3152]
	027 Move X0, X19
	028 Call BaseField`1<Vector2>.get_rawValue, X0
	029 Move V0, [X19+1172]
	030 Move V2, [X19+1176]
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move V0, V2
	033 Move [X19+1172], S2
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move X1, [X20]
	036 NotImplemented "Instruction FCSEL not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move X21, [X31+24]
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 NotImplemented "Instruction FCSEL not yet implemented."
	044 NotImplemented "Instruction FCSEL not yet implemented."
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 NotImplemented "Instruction FCSEL not yet implemented."
	047 Move V8, [X31+48]
	048 Call BaseField`1<Vector2>.set_value, X0, X1
	049 Return 

Method: System.Single get_maxValue()

Disassembly:
	0x03D6D4FC LDR W8, [X8]
	0x03D6D500 ADD W8, W8, 0x18
	0x03D6D504 ADD X8, X9, W8, 0x4, SXTW
	0x03D6D508 ADD X0, X8, 0x138
	0x03D6D50C LDP X4, X3, [X0]
	0x03D6D510 MOV X0, X19
	0x03D6D514 MOV X1, X20
	0x03D6D518 MOV X2, X21

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+2024]
	004 Move X1, [X8+2032]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Move V0, V1
	007 Move X30, [X31+16]
	008 Return V0

Method: System.Void set_maxValue(System.Single value)

Disassembly:
	0x03D6D51C LDP X20, X19, [X31 + 0x70]
	0x03D6D520 LDP X22, X21, [X31 + 0x60]
	0x03D6D524 LDP X24, X23, [X31 + 0x50]
	0x03D6D528 LDP X26, X25, [X31 + 0x40]
	0x03D6D52C LDR X30, [X31 + 0x30]
	0x03D6D530 LDP D9, D8, [X31 + 0x20]
	0x03D6D534 LDP D11, D10, [X31 + 0x10]
	0x03D6D538 LDP D13, D12, [X31], #0x80
	0x03D6D53C BR X4
	0x03D6D540 BL 0x1C16F20
	0x03D6D544 LDR V0, [X0 + 0x494]
	0x03D6D548 RET
	0x03D6D54C STP D9, D8, [X31 - 0x30]!
	0x03D6D550 STR X30, [X31 + 0x10]
	0x03D6D554 STP X20, X19, [X31 + 0x20]
	0x03D6D558 ADRP X20, 0x67A000
	0x03D6D55C LDRB W8, [X20 + 0xD0C]
	0x03D6D560 MOV V8.16B, V0.16B
	0x03D6D564 MOV X19, X0
	0x03D6D568 TBNZ X8, 0x0, 0x3D6D580
	0x03D6D56C ADRP X0, 0x3F9000
	0x03D6D570 LDR X0, [X0 + 0xC48]
	0x03D6D574 BL 0x1C16CF4
	0x03D6D578 MOVZ W8, 0x1
	0x03D6D57C STRB W8, [X20 + 0xD0C]
	0x03D6D580 ADRP X20, 0x66C000
	0x03D6D584 LDRB W8, [X20 + 0x5AA]
	0x03D6D588 LDR V9, [X19 + 0x494]
	0x03D6D58C CBNZ W8, 0x3D6D5A4
	0x03D6D590 ADRP X0, 0x38D000
	0x03D6D594 LDR X0, [X0 + 0x4B8]
	0x03D6D598 BL 0x1C16CF4
	0x03D6D59C MOVZ W8, 0x1
	0x03D6D5A0 STRB W8, [X20 + 0x5AA]
	0x03D6D5A4 ADRP X8, 0x38D000
	0x03D6D5A8 LDR X8, [X8 + 0x4B8]
	0x03D6D5AC ADRP X9, 0xFFFFFFFFFCD7D000
	0x03D6D5B0 LDR V0, [X9 + 0x240]
	0x03D6D5B4 FABS S1, S9
	0x03D6D5B8 LDR X8, [X8]
	0x03D6D5BC FABS S2, S8
	0x03D6D5C0 FCMP S1, S2

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67B000
	007 Move X20, 0x3FA000
	008 Move W8, [X21+3336]
	009 Move X20, [X20+3144]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3FA000
	017 Move X0, [X0+3144]
	018 Call 0x1C17CF4
	019 Move X0, 0x3FA000
	020 Move X0, [X0+3152]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3336], W8
	024 Move X1, [X20]
	025 Move X20, 0x3FA000
	026 Move X20, [X20+3152]
	027 Move X0, X19
	028 Call BaseField`1<Vector2>.get_rawValue, X0
	029 Move V2, [X19+1172]
	030 Move V1, [X19+1176]
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move V2, V1
	033 Move [X19+1172], S1
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move X1, [X20]
	036 NotImplemented "Instruction FCSEL not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move X21, [X31+24]
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 NotImplemented "Instruction FCSEL not yet implemented."
	044 NotImplemented "Instruction FCSEL not yet implemented."
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 NotImplemented "Instruction FCSEL not yet implemented."
	047 Move V8, [X31+48]
	048 Call BaseField`1<Vector2>.set_value, X0, X1
	049 Return 

Method: UnityEngine.Vector2 get_value()

Disassembly:
	0x03D6D5C4 FCSEL S1, S1, S2, GT
	0x03D6D5C8 LDR X8, [X8 + 0xB8]
	0x03D6D5CC FMUL S0, S1, S0
	0x03D6D5D0 FMOV S1, 8
	0x03D6D5D4 LDR V3, [X8]
	0x03D6D5D8 FMUL S1, S3, S1
	0x03D6D5DC FCMP S0, S1
	0x03D6D5E0 FCSEL S0, S0, S1, GT
	0x03D6D5E4 FABD S1, S8, S8
	0x03D6D5E8 FCMP S1, S0
	0x03D6D5EC B.MI 0x3D6D640
	0x03D6D5F0 LDR V0, [X19 + 0x498]
	0x03D6D5F4 FCMP S0, S8
	0x03D6D5F8 B.MI 0x3D6D668
	0x03D6D5FC STR S8, [X19 + 0x494]
	0x03D6D600 ADRP X8, 0x3F9000
	0x03D6D604 LDR X8, [X8 + 0xC48]
	0x03D6D608 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x67B000
	006 Move X21, 0x3FA000
	007 Move W8, [X20+3337]
	008 Move X21, [X21+3160]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3FA000
	015 Move X0, [X0+3160]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3337], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call BaseField`1<Vector2>.get_value, X0
	026 Return X0

Method: System.Void set_value(UnityEngine.Vector2 value)

Disassembly:
	0x03D6D60C LDR X1, [X8]
	0x03D6D610 BL 0x28A8168
	0x03D6D614 LDR X8, [X19]
	0x03D6D618 MOV X0, X19
	0x03D6D61C LDR X9, [X8 + 0x7F8]
	0x03D6D620 LDR X1, [X8 + 0x800]
	0x03D6D624 BLR X9
	0x03D6D628 MOV X0, X19
	0x03D6D62C BL 0x3D6C72C
	0x03D6D630 LDR X0, [X19 + 0x58]
	0x03D6D634 MOV X1, X31
	0x03D6D638 BL 0x32277A8
	0x03D6D63C TBZ X0, 0x0, 0x3D6D650
	0x03D6D640 LDP X20, X19, [X31 + 0x20]
	0x03D6D644 LDR X30, [X31 + 0x10]
	0x03D6D648 LDP D9, D8, [X31], #0x30
	0x03D6D64C RET
	0x03D6D650 MOV X0, X19
	0x03D6D654 LDP X20, X19, [X31 + 0x20]
	0x03D6D658 LDR X30, [X31 + 0x10]
	0x03D6D65C MOV X1, X31
	0x03D6D660 LDP D9, D8, [X31], #0x30
	0x03D6D664 B 0x3DF276C
	0x03D6D668 ADRP X0, 0x38E000
	0x03D6D66C LDR X0, [X0 + 0x578]
	0x03D6D670 BL 0x1C16D08
	0x03D6D674 BL 0x1C16F10
	0x03D6D678 MOV X19, X0
	0x03D6D67C ADRP X0, 0x3F9000
	0x03D6D680 LDR X0, [X0 + 0xC68]
	0x03D6D684 BL 0x1C16D08
	0x03D6D688 MOV X1, X0
	0x03D6D68C MOV X0, X19
	0x03D6D690 MOV X2, X31
	0x03D6D694 BL 0x3314A68

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x67B000
	007 Move W8, [X20+3338]
	008 Move V9, V1
	009 Move V8, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x3FA000
	016 Move X0, [X0+3152]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3338], W8
	020 Move V0, [X19+1172]
	021 Move V1, [X19+1176]
	022 Move X8, 0x3FA000
	023 Move X8, [X8+3152]
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move V0, V1
	026 Move [X19+1172], S1
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 Move X1, [X8]
	029 NotImplemented "Instruction FCSEL not yet implemented."
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+16]
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 NotImplemented "Instruction FCSEL not yet implemented."
	036 NotImplemented "Instruction FCSEL not yet implemented."
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCSEL not yet implemented."
	039 Move D9, [X31+48]
	040 Move D8, [X31+56]
	041 Call BaseField`1<Vector2>.set_value, X0, X1
	042 Return 

Method: System.Void SetValueWithoutNotify(UnityEngine.Vector2 newValue)

Disassembly:
	0x03D6D698 ADRP X0, 0x3F9000
	0x03D6D69C LDR X0, [X0 + 0xC70]
	0x03D6D6A0 BL 0x1C16D08
	0x03D6D6A4 MOV X1, X0
	0x03D6D6A8 MOV X0, X19
	0x03D6D6AC BL 0x1C16DEC
	0x03D6D6B0 LDR V0, [X0 + 0x498]
	0x03D6D6B4 RET
	0x03D6D6B8 STP D9, D8, [X31 - 0x30]!
	0x03D6D6BC STR X30, [X31 + 0x10]
	0x03D6D6C0 STP X20, X19, [X31 + 0x20]
	0x03D6D6C4 ADRP X20, 0x67A000
	0x03D6D6C8 LDRB W8, [X20 + 0xD0D]
	0x03D6D6CC MOV V8.16B, V0.16B
	0x03D6D6D0 MOV X19, X0
	0x03D6D6D4 TBNZ X8, 0x0, 0x3D6D6EC
	0x03D6D6D8 ADRP X0, 0x3F9000
	0x03D6D6DC LDR X0, [X0 + 0xC48]
	0x03D6D6E0 BL 0x1C16CF4
	0x03D6D6E4 MOVZ W8, 0x1
	0x03D6D6E8 STRB W8, [X20 + 0xD0D]
	0x03D6D6EC ADRP X20, 0x66C000
	0x03D6D6F0 LDRB W8, [X20 + 0x5AA]
	0x03D6D6F4 LDR V9, [X19 + 0x498]
	0x03D6D6F8 CBNZ W8, 0x3D6D710
	0x03D6D6FC ADRP X0, 0x38D000
	0x03D6D700 LDR X0, [X0 + 0x4B8]
	0x03D6D704 BL 0x1C16CF4
	0x03D6D708 MOVZ W8, 0x1
	0x03D6D70C STRB W8, [X20 + 0x5AA]
	0x03D6D710 ADRP X8, 0x38D000
	0x03D6D714 LDR X8, [X8 + 0x4B8]
	0x03D6D718 ADRP X9, 0xFFFFFFFFFCD7D000
	0x03D6D71C LDR V0, [X9 + 0x240]
	0x03D6D720 FABS S1, S9
	0x03D6D724 LDR X8, [X8]
	0x03D6D728 FABS S2, S8

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x67B000
	007 Move W8, [X20+3339]
	008 Move V9, V1
	009 Move V8, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x3FA000
	016 Move X0, [X0+3168]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3339], W8
	020 Move V0, [X19+1172]
	021 Move V1, [X19+1176]
	022 Move X8, 0x3FA000
	023 Move X8, [X8+3168]
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move V0, V1
	026 Move [X19+1172], S1
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 Move X1, [X8]
	029 NotImplemented "Instruction FCSEL not yet implemented."
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 NotImplemented "Instruction FCSEL not yet implemented."
	032 NotImplemented "Instruction FCSEL not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Move X0, X19
	036 Call BaseField`1<Vector2>.SetValueWithoutNotify, X0, X1
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]

Method: System.Single get_lowLimit()

Disassembly:
	0x03D6E544 B 0x3D6E558
	0x03D6E548 LDR W9, [X10]

ISIL:
	001 Move V0, [X0+1172]
	002 Return V0

Method: System.Void set_lowLimit(System.Single value)

Disassembly:
	0x03D6E54C ADD W9, W9, 0x26
	0x03D6E550 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E554 ADD X0, X8, 0x138
	0x03D6E558 LDP X8, X1, [X0]
	0x03D6E55C MOV X0, X20
	0x03D6E560 BLR X8
	0x03D6E564 LDR X1, [X21]
	0x03D6E568 MOV W20, W0
	0x03D6E56C MOV X0, X19
	0x03D6E570 BL 0x28A804C
	0x03D6E574 CBZ X0, 0x3D6E638
	0x03D6E578 MOV X1, X31
	0x03D6E57C BL 0x3DEC528
	0x03D6E580 LDR X0, [X19 + 0x440]
	0x03D6E584 CBZ X0, 0x3D6E638
	0x03D6E588 MOV X1, X31
	0x03D6E58C MOV V9.16B, V2.16B
	0x03D6E590 BL 0x3DE0EB8
	0x03D6E594 CBZ X0, 0x3D6E638
	0x03D6E598 LDR X8, [X0]
	0x03D6E59C LDR X1, [X22]
	0x03D6E5A0 MOV X21, X0
	0x03D6E5A4 LDRH W9, [X8 + 0x12E]
	0x03D6E5A8 CBZ X9, 0x3D6E5CC
	0x03D6E5AC LDR X10, [X8 + 0xB0]
	0x03D6E5B0 ADD X10, X10, 0x8
	0x03D6E5B4 LDUR X11, [X10 - 0x8]
	0x03D6E5B8 CMP X11, X1
	0x03D6E5BC B.EQ 0x3D6E5DC
	0x03D6E5C0 SUBS X9, X9, 0x1
	0x03D6E5C4 ADD X10, X10, 0x10
	0x03D6E5C8 B.NE 0x3D6E5B4
	0x03D6E5CC MOVZ W2, 0x27
	0x03D6E5D0 MOV X0, X21
	0x03D6E5D4 BL 0x1C5C788
	0x03D6E5D8 B 0x3D6E5EC
	0x03D6E5DC LDR W9, [X10]
	0x03D6E5E0 ADD W9, W9, 0x27
	0x03D6E5E4 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E5E8 ADD X0, X8, 0x138
	0x03D6E5EC LDP X8, X1, [X0]
	0x03D6E5F0 MOV X0, X21
	0x03D6E5F4 BLR X8
	0x03D6E5F8 LDR V2, [X19 + 0x494]
	0x03D6E5FC LDR V3, [X19 + 0x498]
	0x03D6E600 SCVTF S1, W0
	0x03D6E604 SCVTF S0, W20
	0x03D6E608 FSUB S1, S9, S1
	0x03D6E60C FSUB S4, S8, S0
	0x03D6E610 FSUB S0, S1, S0
	0x03D6E614 LDP X20, X19, [X31 + 0x30]
	0x03D6E618 LDP X22, X21, [X31 + 0x20]
	0x03D6E61C LDR X30, [X31 + 0x10]
	0x03D6E620 FDIV S0, S4, S0
	0x03D6E624 FSUB S1, S3, S2
	0x03D6E628 FMUL S0, S1, S0
	0x03D6E62C FADD S0, S2, S0
	0x03D6E630 LDP D9, D8, [X31], #0x40
	0x03D6E634 RET
	0x03D6E638 BL 0x1C16F20
	0x03D6E63C STR X30, [X31 - 0x30]!
	0x03D6E640 STP X22, X21, [X31 + 0x10]
	0x03D6E644 STP X20, X19, [X31 + 0x20]
	0x03D6E648 ADRP X21, 0x679000
	0x03D6E64C LDRB W8, [X21 + 0xD12]
	0x03D6E650 MOV X19, X1
	0x03D6E654 MOV X20, X0
	0x03D6E658 TBNZ X8, 0x0, 0x3D6E688
	0x03D6E65C ADRP X0, 0x3B0000
	0x03D6E660 LDR X0, [X0 + 0x150]
	0x03D6E664 BL 0x1C16CF4
	0x03D6E668 ADRP X0, 0x3B0000
	0x03D6E66C LDR X0, [X0 + 0x158]
	0x03D6E670 BL 0x1C16CF4
	0x03D6E674 ADRP X0, 0x3B0000
	0x03D6E678 LDR X0, [X0 + 0x160]
	0x03D6E67C BL 0x1C16CF4
	0x03D6E680 MOVZ W8, 0x1
	0x03D6E684 STRB W8, [X21 + 0xD12]
	0x03D6E688 MOV X0, X20
	0x03D6E68C MOV X1, X19
	0x03D6E690 MOV X2, X31
	0x03D6E694 BL 0x3DEF858
	0x03D6E698 CBZ X19, 0x3D6E730
	0x03D6E69C LDR X8, [X19]
	0x03D6E6A0 ADRP X21, 0x3B0000
	0x03D6E6A4 ADRP X22, 0x3B0000
	0x03D6E6A8 MOV X0, X19
	0x03D6E6AC LDP X9, X1, [X8 + 0x188]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x67A000
	007 Move W8, [X20+3340]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3F9000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3340], W8
	019 Move X20, 0x66C000
	020 Move W8, [X20+1450]
	021 Move V9, [X19+1172]
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0x38D000
	025 Move X0, [X0+1208]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1450], W8
	029 Move X8, 0x38D000
	030 Move X8, [X8+1208]
	031 Move X9, -52965376
	032 Move V0, [X9+576]
	033 NotImplemented "Instruction FABS not yet implemented."
	034 Move X8, [X8]
	035 NotImplemented "Instruction FABS not yet implemented."
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 NotImplemented "Instruction FCSEL not yet implemented."
	038 Move X8, [X8+184]
	039 Multiply S0, S1, S0
	040 Move S1, 8
	041 Move V3, [X8]
	042 Multiply S1, S3, S1
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 NotImplemented "Instruction FCSEL not yet implemented."
	045 NotImplemented "Instruction FABD not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Move V0, [X19+1176]
	048 NotImplemented "Instruction FCMP not yet implemented."
	049 Move [X19+1172], S8
	050 Move X8, 0x3F9000
	051 Move X8, [X8+3144]
	052 Move X0, X19
	053 Move X1, [X8]
	054 Call BaseField`1<Vector2>.get_rawValue, X0
	055 Move X8, [X19]
	056 Move X0, X19
	057 Move X9, [X8+2040]
	058 Move X1, [X8+2048]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X0, X19
	061 Call MinMaxSlider.UpdateDragElementPosition, X0
	062 Move X0, [X19+88]
	063 Move X1, X31
	064 Call String.IsNullOrEmpty, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {75}
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move D9, [X31+48]
	073 Move D8, [X31+56]
	074 Return 
	075 Move X0, X19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+16]
	079 Move X1, X31
	080 Move D9, [X31+48]
	081 Move D8, [X31+56]
	082 Call VisualElement.SaveViewData, X0
	083 Return 
	084 Move X0, 0x38E000
	085 Move X0, [X0+1400]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X19, X0
	089 Move X0, 0x3F9000
	090 Move X0, [X0+3176]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X31
	095 Call ArgumentException..ctor, X0, X1
	096 Move X0, 0x3F9000
	097 Move X0, [X0+3184]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Call 0x1C17DEC

Method: System.Single get_highLimit()

Disassembly:
	0x03D6E6B0 LDR X21, [X21 + 0x158]
	0x03D6E6B4 LDR X22, [X22 + 0x150]

ISIL:
	001 Move V0, [X0+1176]
	002 Return V0

Method: System.Void set_highLimit(System.Single value)

Disassembly:
	0x03D6E6B8 BLR X9
	0x03D6E6BC LDR X8, [X21]
	0x03D6E6C0 MOV X21, X0
	0x03D6E6C4 LDR W9, [X8 + 0xE0]
	0x03D6E6C8 CBNZ W9, 0x3D6E6D4
	0x03D6E6CC MOV X0, X8
	0x03D6E6D0 BL 0x1C16DFC
	0x03D6E6D4 LDR X0, [X22]
	0x03D6E6D8 BL 0x2D0D5C8
	0x03D6E6DC CMP X21, X0
	0x03D6E6E0 B.NE 0x3D6E730
	0x03D6E6E4 ADRP X9, 0x3B0000
	0x03D6E6E8 LDR X9, [X9 + 0x160]
	0x03D6E6EC LDR X8, [X19]
	0x03D6E6F0 LDR X1, [X9]
	0x03D6E6F4 LDRB W10, [X8 + 0x130]
	0x03D6E6F8 LDRB W9, [X1 + 0x130]
	0x03D6E6FC CMP W10, W9
	0x03D6E700 B.CC 0x3D6E740
	0x03D6E704 LDR X8, [X8 + 0xC8]
	0x03D6E708 ADD X8, X8, X9, 0x3, LSL
	0x03D6E70C LDUR X8, [X8 - 0x8]
	0x03D6E710 CMP X8, X1
	0x03D6E714 B.NE 0x3D6E740
	0x03D6E718 MOV X0, X20
	0x03D6E71C MOV X1, X19
	0x03D6E720 LDP X20, X19, [X31 + 0x20]
	0x03D6E724 LDP X22, X21, [X31 + 0x10]
	0x03D6E728 LDR X30, [X31], #0x30
	0x03D6E72C B 0x3D6DDB4
	0x03D6E730 LDP X20, X19, [X31 + 0x20]
	0x03D6E734 LDP X22, X21, [X31 + 0x10]
	0x03D6E738 LDR X30, [X31], #0x30
	0x03D6E73C RET
	0x03D6E740 MOV X0, X19
	0x03D6E744 BL 0x1C171E0
	0x03D6E748 STR D8, [X31 - 0x20]!
	0x03D6E74C STR X30, [X31 + 0x8]
	0x03D6E750 STP X20, X19, [X31 + 0x10]
	0x03D6E754 ADRP X20, 0x679000
	0x03D6E758 LDRB W8, [X20 + 0xD13]
	0x03D6E75C MOV X19, X0
	0x03D6E760 TBNZ X8, 0x0, 0x3D6E784
	0x03D6E764 ADRP X0, 0x3F8000
	0x03D6E768 LDR X0, [X0 + 0xCE0]
	0x03D6E76C BL 0x1C16CF4
	0x03D6E770 ADRP X0, 0x3F8000
	0x03D6E774 LDR X0, [X0 + 0xCE8]
	0x03D6E778 BL 0x1C16CF4
	0x03D6E77C MOVZ W8, 0x1
	0x03D6E780 STRB W8, [X20 + 0xD13]
	0x03D6E784 LDR X0, [X19 + 0x458]
	0x03D6E788 CBZ X0, 0x3D6E7D8
	0x03D6E78C LDR W8, [X0 + 0x80]
	0x03D6E790 CMP W8, 0x4
	0x03D6E794 B.NE 0x3D6E7C8
	0x03D6E798 ADRP X8, 0x3F8000
	0x03D6E79C LDR V8, [X19 + 0x460]
	0x03D6E7A0 LDR X8, [X8 + 0xCE0]
	0x03D6E7A4 LDR X1, [X8]
	0x03D6E7A8 BL 0x28F77D4
	0x03D6E7AC MOV X0, X19
	0x03D6E7B0 LDP X20, X19, [X31 + 0x10]
	0x03D6E7B4 LDR X30, [X31 + 0x8]
	0x03D6E7B8 FADD S1, S8, S0
	0x03D6E7BC MOV V0.16B, V8.16B
	0x03D6E7C0 LDR V8, [X31], #0x20
	0x03D6E7C4 B 0x3D6E7DC
	0x03D6E7C8 LDP X20, X19, [X31 + 0x10]
	0x03D6E7CC LDR X30, [X31 + 0x8]
	0x03D6E7D0 LDR V8, [X31], #0x20
	0x03D6E7D4 RET
	0x03D6E7D8 BL 0x1C16F20
	0x03D6E7DC STP D9, D8, [X31 - 0x20]!
	0x03D6E7E0 STP X30, X19, [X31 + 0x10]
	0x03D6E7E4 MOV V8.16B, V1.16B
	0x03D6E7E8 MOV X19, X0
	0x03D6E7EC BL 0x3D6E49C
	0x03D6E7F0 MOV V9.16B, V0.16B
	0x03D6E7F4 MOV X0, X19
	0x03D6E7F8 MOV V0.16B, V8.16B
	0x03D6E7FC BL 0x3D6E49C
	0x03D6E800 LDR W8, [X19 + 0x490]
	0x03D6E804 FSUB S8, S0, S9
	0x03D6E808 CMP W8, 0x1
	0x03D6E80C B.EQ 0x3D6E85C
	0x03D6E810 CMP W8, 0x3
	0x03D6E814 B.EQ 0x3D6E89C
	0x03D6E818 CMP W8, 0x2

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x67A000
	007 Move W8, [X20+3341]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3F9000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3341], W8
	019 Move X20, 0x66C000
	020 Move W8, [X20+1450]
	021 Move V9, [X19+1176]
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0x38D000
	025 Move X0, [X0+1208]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1450], W8
	029 Move X8, 0x38D000
	030 Move X8, [X8+1208]
	031 Move X9, -52965376
	032 Move V0, [X9+576]
	033 NotImplemented "Instruction FABS not yet implemented."
	034 Move X8, [X8]
	035 NotImplemented "Instruction FABS not yet implemented."
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 NotImplemented "Instruction FCSEL not yet implemented."
	038 Move X8, [X8+184]
	039 Multiply S0, S1, S0
	040 Move S1, 8
	041 Move V3, [X8]
	042 Multiply S1, S3, S1
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 NotImplemented "Instruction FCSEL not yet implemented."
	045 NotImplemented "Instruction FABD not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Move V0, [X19+1172]
	048 NotImplemented "Instruction FCMP not yet implemented."
	049 Move [X19+1176], S8
	050 Move X8, 0x3F9000
	051 Move X8, [X8+3144]
	052 Move X0, X19
	053 Move X1, [X8]
	054 Call BaseField`1<Vector2>.get_rawValue, X0
	055 Move X8, [X19]
	056 Move X0, X19
	057 Move X9, [X8+2040]
	058 Move X1, [X8+2048]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X0, X19
	061 Call MinMaxSlider.UpdateDragElementPosition, X0
	062 Move X0, [X19+88]
	063 Move X1, X31
	064 Call String.IsNullOrEmpty, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {75}
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move D9, [X31+48]
	073 Move D8, [X31+56]
	074 Return 
	075 Move X0, X19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+16]
	079 Move X1, X31
	080 Move D9, [X31+48]
	081 Move D8, [X31+56]
	082 Call VisualElement.SaveViewData, X0
	083 Return 
	084 Move X0, 0x38E000
	085 Move X0, [X0+1400]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X19, X0
	089 Move X0, 0x3F9000
	090 Move X0, [X0+3192]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X31
	095 Call ArgumentException..ctor, X0, X1
	096 Move X0, 0x3F9000
	097 Move X0, [X0+3200]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03D6E81C B.NE 0x3D6E8D8
	0x03D6E820 LDR X8, [X19]
	0x03D6E824 MOV X0, X19
	0x03D6E828 LDR X9, [X8 + 0x7E8]
	0x03D6E82C LDR X1, [X8 + 0x7F0]
	0x03D6E830 BLR X9
	0x03D6E834 LDR V2, [X19 + 0x468]
	0x03D6E838 LDR V3, [X19 + 0x494]

ISIL:
	001 Move TEMP, 0x800000
	002 Not TEMP
	003 Move W8, TEMP
	004 Move TEMP, 0x80800000
	005 Not TEMP
	006 Move W9, TEMP
	007 Move S0, W31
	008 Move S1, 10
	009 Move S2, W8
	010 Move S3, W9
	011 Move X1, X31

Method: System.Void .ctor(System.String label, System.Single minValue = 0, System.Single maxValue = 10, System.Single minLimit = -3.4028235E+38, System.Single maxLimit = 3.4028235E+38)

Disassembly:
	0x03D6E83C LDR V1, [X19 + 0x46C]
	0x03D6E840 FADD S0, S8, S2
	0x03D6E844 FCMP S0, S3
	0x03D6E848 FSUB S2, S1, S2
	0x03D6E84C B.PL 0x3D6E94C
	0x03D6E850 FADD S1, S3, S2
	0x03D6E854 MOV V0.16B, V3.16B
	0x03D6E858 B 0x3D6E964
	0x03D6E85C LDR X8, [X19]
	0x03D6E860 LDR V0, [X19 + 0x468]
	0x03D6E864 MOV X0, X19
	0x03D6E868 LDR X9, [X8 + 0x7E8]
	0x03D6E86C LDR X1, [X8 + 0x7F0]
	0x03D6E870 FADD S8, S8, S0
	0x03D6E874 BLR X9
	0x03D6E878 FCMP S8, S1
	0x03D6E87C B.LE 0x3D6E8E4
	0x03D6E880 LDR X8, [X19]
	0x03D6E884 MOV X0, X19
	0x03D6E888 LDR X9, [X8 + 0x7E8]
	0x03D6E88C LDR X1, [X8 + 0x7F0]
	0x03D6E890 BLR X9
	0x03D6E894 MOV V8.16B, V1.16B
	0x03D6E898 B 0x3D6E8F4
	0x03D6E89C LDR X8, [X19]
	0x03D6E8A0 LDR V0, [X19 + 0x46C]
	0x03D6E8A4 MOV X0, X19
	0x03D6E8A8 LDR X9, [X8 + 0x7E8]
	0x03D6E8AC LDR X1, [X8 + 0x7F0]
	0x03D6E8B0 FADD S8, S8, S0
	0x03D6E8B4 BLR X9
	0x03D6E8B8 FCMP S8, S0
	0x03D6E8BC B.PL 0x3D6E918
	0x03D6E8C0 LDR X8, [X19]
	0x03D6E8C4 MOV X0, X19
	0x03D6E8C8 LDR X9, [X8 + 0x7E8]
	0x03D6E8CC LDR X1, [X8 + 0x7F0]
	0x03D6E8D0 BLR X9
	0x03D6E8D4 B 0x3D6E924
	0x03D6E8D8 LDP X30, X19, [X31 + 0x10]
	0x03D6E8DC LDP D9, D8, [X31], #0x20
	0x03D6E8E0 RET
	0x03D6E8E4 LDR V0, [X19 + 0x494]
	0x03D6E8E8 FCMP S8, S0
	0x03D6E8EC B.PL 0x3D6E8F4
	0x03D6E8F0 MOV V8.16B, V0.16B
	0x03D6E8F4 LDR X8, [X19]
	0x03D6E8F8 MOV X0, X19
	0x03D6E8FC LDR X9, [X8 + 0x7E8]
	0x03D6E900 LDR X1, [X8 + 0x7F0]
	0x03D6E904 BLR X9
	0x03D6E908 LDR X8, [X19]
	0x03D6E90C MOV X0, X19
	0x03D6E910 MOV V0.16B, V8.16B
	0x03D6E914 B 0x3D6E96C
	0x03D6E918 LDR V0, [X19 + 0x498]
	0x03D6E91C FCMP S8, S0
	0x03D6E920 B.LE 0x3D6E928
	0x03D6E924 MOV V8.16B, V0.16B
	0x03D6E928 LDR X8, [X19]
	0x03D6E92C MOV X0, X19
	0x03D6E930 LDR X9, [X8 + 0x7E8]
	0x03D6E934 LDR X1, [X8 + 0x7F0]
	0x03D6E938 BLR X9
	0x03D6E93C LDR X8, [X19]
	0x03D6E940 MOV X0, X19
	0x03D6E944 MOV V1.16B, V8.16B
	0x03D6E948 B 0x3D6E96C
	0x03D6E94C LDR V3, [X19 + 0x498]
	0x03D6E950 FADD S1, S8, S1
	0x03D6E954 FCMP S1, S3
	0x03D6E958 B.LE 0x3D6E964
	0x03D6E95C FSUB S0, S3, S2
	0x03D6E960 MOV V1.16B, V3.16B
	0x03D6E964 LDR X8, [X19]
	0x03D6E968 MOV X0, X19
	0x03D6E96C LDR X2, [X8 + 0x7F8]
	0x03D6E970 LDR X1, [X8 + 0x800]
	0x03D6E974 LDP X30, X19, [X31 + 0x10]
	0x03D6E978 LDP D9, D8, [X31], #0x20
	0x03D6E97C BR X2
	0x03D6E980 STR D8, [X31 - 0x30]!
	0x03D6E984 STR X30, [X31 + 0x8]
	0x03D6E988 STP X22, X21, [X31 + 0x10]
	0x03D6E98C STP X20, X19, [X31 + 0x20]
	0x03D6E990 ADRP X20, 0x679000
	0x03D6E994 LDRB W8, [X20 + 0xD14]
	0x03D6E998 MOV X19, X0
	0x03D6E99C TBNZ X8, 0x0, 0x3D6E9E4
	0x03D6E9A0 ADRP X0, 0x3F5000
	0x03D6E9A4 LDR X0, [X0 + 0x5F8]
	0x03D6E9A8 BL 0x1C16CF4
	0x03D6E9AC ADRP X0, 0x3F8000
	0x03D6E9B0 LDR X0, [X0 + 0xCE8]
	0x03D6E9B4 BL 0x1C16CF4
	0x03D6E9B8 ADRP X0, 0x3F8000
	0x03D6E9BC LDR X0, [X0 + 0xCF0]
	0x03D6E9C0 BL 0x1C16CF4
	0x03D6E9C4 ADRP X0, 0x3F8000
	0x03D6E9C8 LDR X0, [X0 + 0xCF8]
	0x03D6E9CC BL 0x1C16CF4
	0x03D6E9D0 ADRP X0, 0x3AE000
	0x03D6E9D4 LDR X0, [X0 + 0x120]
	0x03D6E9D8 BL 0x1C16CF4
	0x03D6E9DC MOVZ W8, 0x1
	0x03D6E9E0 STRB W8, [X20 + 0xD14]
	0x03D6E9E4 LDR X8, [X19 + 0x458]
	0x03D6E9E8 CBZ X8, 0x3D6ED10
	0x03D6E9EC LDR W8, [X8 + 0x80]
	0x03D6E9F0 CMP W8, 0x4
	0x03D6E9F4 B.EQ 0x3D6ECFC
	0x03D6E9F8 MOV X0, X19
	0x03D6E9FC BL 0x3D6DE14
	0x03D6EA00 LDR X8, [X19 + 0x458]
	0x03D6EA04 CBZ X8, 0x3D6ED10
	0x03D6EA08 LDR V2, [X19 + 0x470]
	0x03D6EA0C LDP S1, S0, [X8 + 0x90]
	0x03D6EA10 FCMP S1, S2
	0x03D6EA14 B.LT 0x3D6EA4C
	0x03D6EA18 LDR V3, [X19 + 0x478]
	0x03D6EA1C FADD S2, S2, S3
	0x03D6EA20 FCMP S1, S2
	0x03D6EA24 B.PL 0x3D6EA4C
	0x03D6EA28 LDR V2, [X19 + 0x474]
	0x03D6EA2C FCMP S0, S2
	0x03D6EA30 B.LT 0x3D6EA4C
	0x03D6EA34 LDR V3, [X19 + 0x47C]
	0x03D6EA38 FADD S2, S2, S3
	0x03D6EA3C FCMP S0, S2
	0x03D6EA40 B.PL 0x3D6EA4C
	0x03D6EA44 MOVZ W8, 0x1
	0x03D6EA48 B 0x3D6EAD8
	0x03D6EA4C LDR V2, [X19 + 0x480]
	0x03D6EA50 FCMP S1, S2
	0x03D6EA54 B.LT 0x3D6EA8C
	0x03D6EA58 LDR V3, [X19 + 0x488]
	0x03D6EA5C FADD S2, S2, S3
	0x03D6EA60 FCMP S1, S2
	0x03D6EA64 B.PL 0x3D6EA8C
	0x03D6EA68 LDR V1, [X19 + 0x484]
	0x03D6EA6C FCMP S0, S1
	0x03D6EA70 B.LT 0x3D6EA8C
	0x03D6EA74 LDR V2, [X19 + 0x48C]
	0x03D6EA78 FADD S1, S1, S2
	0x03D6EA7C FCMP S0, S1
	0x03D6EA80 B.PL 0x3D6EA8C
	0x03D6EA84 MOVZ W8, 0x3
	0x03D6EA88 B 0x3D6EAD8
	0x03D6EA8C LDR X0, [X19 + 0x440]
	0x03D6EA90 CBZ X0, 0x3D6ED10
	0x03D6EA94 MOV X1, X31
	0x03D6EA98 BL 0x3DEC528
	0x03D6EA9C LDR X8, [X19 + 0x458]
	0x03D6EAA0 CBZ X8, 0x3D6ED10
	0x03D6EAA4 LDR V4, [X8 + 0x90]
	0x03D6EAA8 FCMP S4, S0
	0x03D6EAAC B.LT 0x3D6EB14
	0x03D6EAB0 FADD S0, S0, S2
	0x03D6EAB4 FCMP S4, S0
	0x03D6EAB8 B.PL 0x3D6EB14
	0x03D6EABC LDR V0, [X8 + 0x94]
	0x03D6EAC0 FCMP S0, S1
	0x03D6EAC4 B.LT 0x3D6EB14
	0x03D6EAC8 FADD S1, S1, S3
	0x03D6EACC FCMP S0, S1
	0x03D6EAD0 B.PL 0x3D6EB14
	0x03D6EAD4 MOVZ W8, 0x2
	0x03D6EAD8 STR W8, [X19 + 0x490]
	0x03D6EADC LDR X8, [X19]
	0x03D6EAE0 MOV X0, X19
	0x03D6EAE4 LDR X9, [X8 + 0x7E8]
	0x03D6EAE8 LDR X1, [X8 + 0x7F0]
	0x03D6EAEC BLR X9
	0x03D6EAF0 LDR X8, [X19 + 0x458]
	0x03D6EAF4 STR S0, [X19 + 0x468]
	0x03D6EAF8 STR S1, [X19 + 0x46C]
	0x03D6EAFC CBZ X8, 0x3D6ED10
	0x03D6EB00 LDR V0, [X8 + 0x90]
	0x03D6EB04 MOVZ W9, 0x4
	0x03D6EB08 STR W9, [X8 + 0x80]
	0x03D6EB0C STR D0, [X19 + 0x460]
	0x03D6EB10 B 0x3D6ECFC
	0x03D6EB14 LDR X0, [X19 + 0x440]
	0x03D6EB18 STR W31, [X19 + 0x490]
	0x03D6EB1C CBZ X0, 0x3D6ED10
	0x03D6EB20 LDR W21, [X8 + 0x90]
	0x03D6EB24 MOV X1, X31
	0x03D6EB28 BL 0x3DE0EB8
	0x03D6EB2C CBZ X0, 0x3D6ED10
	0x03D6EB30 ADRP X22, 0x3AE000
	0x03D6EB34 LDR X8, [X0]
	0x03D6EB38 LDR X22, [X22 + 0x120]
	0x03D6EB3C MOV X20, X0
	0x03D6EB40 LDRH W9, [X8 + 0x12E]
	0x03D6EB44 LDR X1, [X22]
	0x03D6EB48 CBZ X9, 0x3D6EB6C
	0x03D6EB4C LDR X10, [X8 + 0xB0]
	0x03D6EB50 ADD X10, X10, 0x8
	0x03D6EB54 LDUR X11, [X10 - 0x8]
	0x03D6EB58 CMP X11, X1
	0x03D6EB5C B.EQ 0x3D6EB7C
	0x03D6EB60 SUBS X9, X9, 0x1
	0x03D6EB64 ADD X10, X10, 0x10
	0x03D6EB68 B.NE 0x3D6EB54
	0x03D6EB6C MOVZ W2, 0x22
	0x03D6EB70 MOV X0, X20
	0x03D6EB74 BL 0x1C5C788
	0x03D6EB78 B 0x3D6EB8C
	0x03D6EB7C LDR W9, [X10]
	0x03D6EB80 ADD W9, W9, 0x22
	0x03D6EB84 ADD X8, X8, W9, 0x4, SXTW
	0x03D6EB88 ADD X0, X8, 0x138
	0x03D6EB8C LDP X8, X1, [X0]
	0x03D6EB90 MOV X0, X20
	0x03D6EB94 BLR X8
	0x03D6EB98 LDR X8, [X19 + 0x458]
	0x03D6EB9C STR W21, [X19 + 0x460]
	0x03D6EBA0 STR S0, [X19 + 0x464]
	0x03D6EBA4 CBZ X8, 0x3D6ED10
	0x03D6EBA8 MOVZ W9, 0x4
	0x03D6EBAC STR W9, [X8 + 0x80]
	0x03D6EBB0 LDR X0, [X19 + 0x440]
	0x03D6EBB4 CBZ X0, 0x3D6ED10
	0x03D6EBB8 MOV X1, X31
	0x03D6EBBC BL 0x3DE0EB8
	0x03D6EBC0 CBZ X0, 0x3D6ED10
	0x03D6EBC4 LDR X8, [X0]
	0x03D6EBC8 LDR X1, [X22]
	0x03D6EBCC MOV X20, X0
	0x03D6EBD0 LDRH W9, [X8 + 0x12E]
	0x03D6EBD4 CBZ X9, 0x3D6EBF8
	0x03D6EBD8 LDR X10, [X8 + 0xB0]
	0x03D6EBDC ADD X10, X10, 0x8
	0x03D6EBE0 LDUR X11, [X10 - 0x8]
	0x03D6EBE4 CMP X11, X1
	0x03D6EBE8 B.EQ 0x3D6EC08
	0x03D6EBEC SUBS X9, X9, 0x1
	0x03D6EBF0 ADD X10, X10, 0x10
	0x03D6EBF4 B.NE 0x3D6EBE0
	0x03D6EBF8 MOVZ W2, 0x26
	0x03D6EBFC MOV X0, X20
	0x03D6EC00 BL 0x1C5C788
	0x03D6EC04 B 0x3D6EC18
	0x03D6EC08 LDR W9, [X10]
	0x03D6EC0C ADD W9, W9, 0x26
	0x03D6EC10 ADD X8, X8, W9, 0x4, SXTW
	0x03D6EC14 ADD X0, X8, 0x138
	0x03D6EC18 LDP X8, X1, [X0]
	0x03D6EC1C MOV X0, X20
	0x03D6EC20 BLR X8
	0x03D6EC24 ADRP X8, 0x3F5000
	0x03D6EC28 LDR X8, [X8 + 0x5F8]
	0x03D6EC2C MOV W20, W0
	0x03D6EC30 MOV X0, X19
	0x03D6EC34 LDR X1, [X8]
	0x03D6EC38 BL 0x28A804C
	0x03D6EC3C CBZ X0, 0x3D6ED10
	0x03D6EC40 MOV X1, X31
	0x03D6EC44 BL 0x3DEC528
	0x03D6EC48 LDR X0, [X19 + 0x440]
	0x03D6EC4C CBZ X0, 0x3D6ED10
	0x03D6EC50 MOV X1, X31
	0x03D6EC54 MOV V8.16B, V2.16B
	0x03D6EC58 BL 0x3DE0EB8
	0x03D6EC5C CBZ X0, 0x3D6ED10
	0x03D6EC60 LDR X8, [X0]
	0x03D6EC64 LDR X1, [X22]
	0x03D6EC68 MOV X21, X0
	0x03D6EC6C LDRH W9, [X8 + 0x12E]
	0x03D6EC70 CBZ X9, 0x3D6EC94
	0x03D6EC74 LDR X10, [X8 + 0xB0]
	0x03D6EC78 ADD X10, X10, 0x8
	0x03D6EC7C LDUR X11, [X10 - 0x8]
	0x03D6EC80 CMP X11, X1
	0x03D6EC84 B.EQ 0x3D6ECA4
	0x03D6EC88 SUBS X9, X9, 0x1
	0x03D6EC8C ADD X10, X10, 0x10
	0x03D6EC90 B.NE 0x3D6EC7C
	0x03D6EC94 MOVZ W2, 0x27
	0x03D6EC98 MOV X0, X21
	0x03D6EC9C BL 0x1C5C788
	0x03D6ECA0 B 0x3D6ECB4
	0x03D6ECA4 LDR W9, [X10]
	0x03D6ECA8 ADD W9, W9, 0x27
	0x03D6ECAC ADD X8, X8, W9, 0x4, SXTW
	0x03D6ECB0 ADD X0, X8, 0x138
	0x03D6ECB4 LDP X8, X1, [X0]
	0x03D6ECB8 MOV X0, X21
	0x03D6ECBC BLR X8
	0x03D6ECC0 LDR V2, [X19 + 0x460]
	0x03D6ECC4 SCVTF S1, W0
	0x03D6ECC8 SCVTF S0, W20
	0x03D6ECCC FSUB S1, S8, S1
	0x03D6ECD0 MOV X0, X19
	0x03D6ECD4 BL 0x3D6ED14
	0x03D6ECD8 LDR X8, [X19]
	0x03D6ECDC MOVZ W9, 0x2
	0x03D6ECE0 STR W9, [X19 + 0x490]
	0x03D6ECE4 MOV X0, X19
	0x03D6ECE8 LDR X9, [X8 + 0x7E8]
	0x03D6ECEC LDR X1, [X8 + 0x7F0]
	0x03D6ECF0 BLR X9
	0x03D6ECF4 STR S0, [X19 + 0x468]
	0x03D6ECF8 STR S1, [X19 + 0x46C]
	0x03D6ECFC LDP X20, X19, [X31 + 0x20]
	0x03D6ED00 LDP X22, X21, [X31 + 0x10]
	0x03D6ED04 LDR X30, [X31 + 0x8]
	0x03D6ED08 LDR V8, [X31], #0x30
	0x03D6ED0C RET
	0x03D6ED10 BL 0x1C16F20
	0x03D6ED14 STP D9, D8, [X31 - 0x20]!
	0x03D6ED18 STP X30, X19, [X31 + 0x10]
	0x03D6ED1C FCMP S2, S0
	0x03D6ED20 MOV X19, X0
	0x03D6ED24 B.PL 0x3D6ED30
	0x03D6ED28 LDR V8, [X19 + 0x494]
	0x03D6ED2C B 0x3D6ED50
	0x03D6ED30 FCMP S2, S1
	0x03D6ED34 B.LE 0x3D6ED40
	0x03D6ED38 LDR V8, [X19 + 0x498]
	0x03D6ED3C B 0x3D6ED50
	0x03D6ED40 MOV X0, X19
	0x03D6ED44 MOV V0.16B, V2.16B
	0x03D6ED48 BL 0x3D6E49C
	0x03D6ED4C MOV V8.16B, V0.16B
	0x03D6ED50 LDR X8, [X19]
	0x03D6ED54 MOV X0, X19
	0x03D6ED58 LDR X9, [X8 + 0x7E8]
	0x03D6ED5C LDR X1, [X8 + 0x7F0]
	0x03D6ED60 BLR X9
	0x03D6ED64 LDR X8, [X19]
	0x03D6ED68 MOV X0, X19
	0x03D6ED6C MOV V9.16B, V1.16B
	0x03D6ED70 LDR X9, [X8 + 0x7E8]
	0x03D6ED74 LDR X1, [X8 + 0x7F0]
	0x03D6ED78 BLR X9
	0x03D6ED7C LDR X8, [X19]
	0x03D6ED80 LDR V2, [X19 + 0x494]
	0x03D6ED84 FSUB S0, S9, S0
	0x03D6ED88 MOV X0, X19
	0x03D6ED8C LDR X2, [X8 + 0x7F8]
	0x03D6ED90 LDR X1, [X8 + 0x800]
	0x03D6ED94 LDP X30, X19, [X31 + 0x10]
	0x03D6ED98 FSUB S3, S8, S0
	0x03D6ED9C FADD S0, S2, S0
	0x03D6EDA0 FCMP S3, S2
	0x03D6EDA4 FCSEL S1, S0, S8, MI
	0x03D6EDA8 FCSEL S0, S2, S3, MI
	0x03D6EDAC LDP D9, D8, [X31], #0x20
	0x03D6EDB0 BR X2

ISIL:
	001 Move [X31-128], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X27
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X22, 0x67A000
	017 Move X21, 0x3F9000
	018 Move W8, [X22+3342]
	019 Move X21, [X21+3208]
	020 Move V8, V3
	021 Move V9, V2
	022 Move V11, V1
	023 Move V10, V0
	024 Move X20, X1
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {89}
	030 Move X0, 0x387000
	031 Move X0, [X0+3696]
	032 Call 0x1C17CF4
	033 Move X0, 0x3F9000
	034 Move X0, [X0+3216]
	035 Call 0x1C17CF4
	036 Move X0, 0x3F6000
	037 Move X0, [X0+1520]
	038 Call 0x1C17CF4
	039 Move X0, 0x3F6000
	040 Move X0, [X0+1528]
	041 Call 0x1C17CF4
	042 Move X0, 0x3F9000
	043 Move X0, [X0+3224]
	044 Call 0x1C17CF4
	045 Move X0, 0x3F9000
	046 Move X0, [X0+3208]
	047 Call 0x1C17CF4
	048 Move X0, 0x3B0000
	049 Move X0, [X0+1624]
	050 Call 0x1C17CF4
	051 Move X0, 0x3F9000
	052 Move X0, [X0+3232]
	053 Call 0x1C17CF4
	054 Move X0, 0x3F9000
	055 Move X0, [X0+3240]
	056 Call 0x1C17CF4
	057 Move X0, 0x3B0000
	058 Move X0, [X0+1632]
	059 Call 0x1C17CF4
	060 Move X0, 0x3F9000
	061 Move X0, [X0+3248]
	062 Call 0x1C17CF4
	063 Move X0, 0x3F9000
	064 Move X0, [X0+3256]
	065 Call 0x1C17CF4
	066 Move X0, 0x3F9000
	067 Move X0, [X0+3264]
	068 Call 0x1C17CF4
	069 Move X0, 0x3F9000
	070 Move X0, [X0+3272]
	071 Call 0x1C17CF4
	072 Move X0, 0x3AE000
	073 Move X0, [X0+2200]
	074 Call 0x1C17CF4
	075 Move X0, 0x3B1000
	076 Move X0, [X0+280]
	077 Call 0x1C17CF4
	078 Move X0, 0x3F9000
	079 Move X0, [X0+3280]
	080 Call 0x1C17CF4
	081 Move X0, 0x3F9000
	082 Move X0, [X0+3288]
	083 Call 0x1C17CF4
	084 Move X0, 0x3B1000
	085 Move X0, [X0+296]
	086 Call 0x1C17CF4
	087 Move W8, 1
	088 Move [X22+3342], W8
	089 Move X0, [X21]
	090 Move X21, 0x3F9000
	091 Move W8, [X0+224]
	092 Move X21, [X21+3216]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X3, [X21]
	097 Move X22, 0x3F9000
	098 Move X22, [X22+3272]
	099 Move X0, X19
	100 Move X1, X20
	101 Move X2, X31
	102 Call BaseField`1<Vector2>..ctor, X0, X1, X2
	103 Move X8, -52953088
	104 Move V0, [X8+1896]
	105 Add X23, X19, 1172
	106 Move X0, X19
	107 Move [X23], D0
	108 Move V0, V9
	109 Call MinMaxSlider.set_lowLimit, X0, V0
	110 Move X0, X19
	111 Move V0, V8
	112 Call MinMaxSlider.set_highLimit, X0, V0
	113 Move V0, [X19+1172]
	114 Move V1, [X19+1176]
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 Move V0, V1
	117 Move [X23], S1
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 NotImplemented "Instruction FCSEL not yet implemented."
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 NotImplemented "Instruction FCSEL not yet implemented."
	122 NotImplemented "Instruction FCSEL not yet implemented."
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 NotImplemented "Instruction FCSEL not yet implemented."
	125 Move X0, X19
	126 Call MinMaxSlider.set_minValue, X0, V0
	127 Move X0, X19
	128 Move V0, V12
	129 Call MinMaxSlider.set_maxValue, X0, V0
	130 Move X0, [X22]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {136}
	134 Call 0x1C17DFC
	135 Move X0, [X22]
	136 Move X8, [X0+184]
	137 Move X0, X19
	138 Move X2, X31
	139 Move X1, [X8]
	140 Call VisualElement.AddToClassList, X0, X1
	141 Move X0, [X19+1024]
	142 Compare X0, 0
	143 JumpIfEqual {382}
	144 Move X8, [X22]
	145 Move X24, 0x3F6000
	146 Move X2, X31
	147 Move X8, [X8+184]
	148 Move X1, [X8+8]
	149 Move X24, [X24+1528]
	150 Call VisualElement.AddToClassList, X0, X1
	151 Move X1, [X24]
	152 Move X0, X19
	153 Call BaseField`1<Vector2>.get_visualInput, X0
	154 Compare X0, 0
	155 JumpIfEqual {382}
	156 Move X8, [X22]
	157 Move X2, X31
	158 Move X8, [X8+184]
	159 Move X1, [X8+16]
	160 Call VisualElement.AddToClassList, X0, X1
	161 Move W1, 1
	162 Move X0, X19
	163 Move X2, X31
	164 Call VisualElement.set_pickingMode, X0, X1
	165 Move [X19+1168], W31
	166 Move X1, [X24]
	167 Move X0, X19
	168 Call BaseField`1<Vector2>.get_visualInput, X0
	169 Compare X0, 0
	170 JumpIfEqual {382}
	171 Move X25, 0x3AE000
	172 Move X25, [X25+2200]
	173 Move W1, W31
	174 Move X2, X31
	175 Call VisualElement.set_pickingMode, X0, X1
	176 Move X0, [X25]
	177 Call 0x1C17F10
	178 Move X1, X31
	179 Move X20, X0
	180 Call VisualElement..ctor, X0
	181 Compare X20, 0
	182 JumpIfEqual {382}
	183 Move X8, 0x3B1000
	184 Move X8, [X8+296]
	185 Move X0, X20
	186 Move X2, X31
	187 Move X1, [X8]
	188 Call VisualElement.set_name, X0, X1
	189 Move X8, [X22]
	190 Move X0, X20
	191 Move X2, X31
	192 Move X8, [X8+184]
	193 Move X1, [X8+24]
	194 Call VisualElement.AddToClassList, X0, X1
	195 Move X1, [X24]
	196 Move X0, X19
	197 Call BaseField`1<Vector2>.get_visualInput, X0
	198 Compare X0, 0
	199 JumpIfEqual {382}
	200 Move X1, X20
	201 Move X2, X31
	202 Call VisualElement.Add, X0, X1
	203 Move X0, [X25]
	204 Call 0x1C17F10
	205 Move X1, X31
	206 Move X20, X0
	207 Call VisualElement..ctor, X0
	208 Compare X20, 0
	209 JumpIfEqual {382}
	210 Move X8, 0x3B1000
	211 Move X8, [X8+280]
	212 Move X21, 0x3B0000
	213 Move X26, 0x3F9000
	214 Move X0, X20
	215 Move X1, [X8]
	216 Move X21, [X21+1632]
	217 Move X26, [X26+3264]
	218 Move X2, X31
	219 Call VisualElement.set_name, X0, X1
	220 Move [X19+1088], X20
	221 Move X8, [X22]
	222 Move X0, X20
	223 Move X2, X31
	224 Move X8, [X8+184]
	225 Move X1, [X8+32]
	226 Call VisualElement.AddToClassList, X0, X1
	227 Move X0, [X21]
	228 Move X20, [X19+1088]
	229 Call 0x1C17F10
	230 Move X2, [X26]
	231 Move X1, X19
	232 Move X3, X31
	233 Move X21, X0
	234 Call 0x2D0F824, X0, X1, X2
	235 Compare X20, 0
	236 JumpIfEqual {382}
	237 Move X8, 0x3B0000
	238 Move X8, [X8+1624]
	239 Move X0, X20
	240 Move X1, X21
	241 Move W2, W31
	242 Move X3, [X8]
	243 Call 0x21A2534, X0, X1, X2
	244 Move X1, [X24]
	245 Move X0, X19
	246 Call BaseField`1<Vector2>.get_visualInput, X0
	247 Compare X0, 0
	248 JumpIfEqual {382}
	249 Move X1, [X19+1088]
	250 Move X2, X31
	251 Call VisualElement.Add, X0, X1
	252 Move X0, [X25]
	253 Call 0x1C17F10
	254 Move X1, X31
	255 Move X20, X0
	256 Call VisualElement..ctor, X0
	257 Compare X20, 0
	258 JumpIfEqual {382}
	259 Move X8, 0x3F9000
	260 Move X8, [X8+3280]
	261 Move X0, X20
	262 Move X2, X31
	263 Move X1, [X8]
	264 Call VisualElement.set_name, X0, X1
	265 Move [X19+1096], X20
	266 Move X0, [X25]
	267 Call 0x1C17F10
	268 Move X1, X31
	269 Move X20, X0
	270 Call VisualElement..ctor, X0
	271 Compare X20, 0
	272 JumpIfEqual {382}
	273 Move X8, 0x3F9000
	274 Move X8, [X8+3288]
	275 Move X0, X20
	276 Move X2, X31
	277 Move X1, [X8]
	278 Call VisualElement.set_name, X0, X1
	279 Move X0, [X19+1096]
	280 Move [X19+1104], X20
	281 Compare X0, 0
	282 JumpIfEqual {382}
	283 Move X8, [X22]
	284 Move X2, X31
	285 Move X8, [X8+184]
	286 Move X1, [X8+40]
	287 Call VisualElement.AddToClassList, X0, X1
	288 Move X0, [X19+1104]
	289 Compare X0, 0
	290 JumpIfEqual {382}
	291 Move X8, [X22]
	292 Move X2, X31
	293 Move X8, [X8+184]
	294 Move X1, [X8+48]
	295 Call VisualElement.AddToClassList, X0, X1
	296 Move X0, [X19+1088]
	297 Compare X0, 0
	298 JumpIfEqual {382}
	299 Move X1, [X19+1096]
	300 Move X2, X31
	301 Call VisualElement.Add, X0, X1
	302 Move X0, [X19+1088]
	303 Compare X0, 0
	304 JumpIfEqual {382}
	305 Move X21, 0x387000
	306 Move X20, 0x3F9000
	307 Move X22, 0x3F9000
	308 Move X21, [X21+3696]
	309 Move X20, [X20+3248]
	310 Move X22, [X22+3256]
	311 Move X1, [X19+1104]
	312 Move X26, 0x3F9000
	313 Move X27, 0x3F9000
	314 Move X25, 0x3F9000
	315 Move X26, [X26+3240]
	316 Move X27, [X27+3232]
	317 Move X25, [X25+3224]
	318 Move X2, X31
	319 Call VisualElement.Add, X0, X1
	320 Move X0, [X21]
	321 Call 0x1C17F10
	322 Move X2, [X20]
	323 Move X1, X19
	324 Move X3, X31
	325 Move X20, X0
	326 Call Action..ctor, X0, X1, X2
	327 Move X0, [X21]
	328 Call 0x1C17F10
	329 Move X2, [X22]
	330 Move X1, X19
	331 Move X3, X31
	332 Move X21, X0
	333 Call Action..ctor, X0, X1, X2
	334 Move X0, [X26]
	335 Call 0x1C17F10
	336 Move X4, [X27]
	337 Move X1, X31
	338 Move X2, X20
	339 Move X3, X21
	340 Move X22, X0
	341 Call ClampedDragger`1<Single>..ctor, X0, X1, X2, X3
	342 Move [X19+1112], X22
	343 Move X1, [X24]
	344 Move X0, X19
	345 Call BaseField`1<Vector2>.get_visualInput, X0
	346 Move X1, [X19+1112]
	347 Move X2, X31
	348 Call VisualElementExtensions.AddManipulator, X0, X1
	349 NotImplemented "Instruction FCMP not yet implemented."
	350 Move [X19+1172], S9
	351 Move [X19+1176], S8
	352 Move V9, V8
	353 Move [X23], S8
	354 NotImplemented "Instruction FCMP not yet implemented."
	355 Move X1, [X25]
	356 NotImplemented "Instruction FCSEL not yet implemented."
	357 NotImplemented "Instruction FCMP not yet implemented."
	358 NotImplemented "Instruction FCSEL not yet implemented."
	359 NotImplemented "Instruction FCSEL not yet implemented."
	360 NotImplemented "Instruction FCMP not yet implemented."
	361 NotImplemented "Instruction FCSEL not yet implemented."
	362 Move X0, X19
	363 Call BaseField`1<Vector2>.set_rawValue, X0, X1
	364 Move X0, X19
	365 Move X20, [X31+112]
	366 Move X19, [X31+120]
	367 Move X22, [X31+96]
	368 Move X21, [X31+104]
	369 Move X24, [X31+80]
	370 Move X23, [X31+88]
	371 Move X26, [X31+64]
	372 Move X25, [X31+72]
	373 Move X30, [X31+48]
	374 Move X27, [X31+56]
	375 Move D9, [X31+32]
	376 Move D8, [X31+40]
	377 Move D11, [X31+16]
	378 Move D10, [X31+24]
	379 Move V12, [X31+128]
	380 Call MinMaxSlider.UpdateDragElementPosition, X0
	381 Return 
	382 Call 0x1C17F20

Method: UnityEngine.Vector2 ClampValues(UnityEngine.Vector2 valueToClamp)

Disassembly:
	0x03D6D4C4 AND X21, X8, 0x0
	0x03D6D4C8 CBZ X10, 0x3D6D4EC
	0x03D6D4CC LDR X8, [X9 + 0xB0]
	0x03D6D4D0 ADD X8, X8, 0x8
	0x03D6D4D4 LDUR X11, [X8 - 0x8]
	0x03D6D4D8 CMP X11, X1
	0x03D6D4DC B.EQ 0x3D6D4FC
	0x03D6D4E0 SUBS X10, X10, 0x1
	0x03D6D4E4 ADD X8, X8, 0x10
	0x03D6D4E8 B.NE 0x3D6D4D4
	0x03D6D4EC MOVZ W2, 0x18
	0x03D6D4F0 MOV X0, X19
	0x03D6D4F4 BL 0x1C5C788
	0x03D6D4F8 B 0x3D6D50C

ISIL:
	001 Move V2, [X0+1172]
	002 Move V3, [X0+1176]
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move V2, V3
	005 Move [X0+1172], S3
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction FCSEL not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction FCSEL not yet implemented."
	010 NotImplemented "Instruction FCSEL not yet implemented."
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction FCSEL not yet implemented."
	013 Return X0

Method: System.Void UpdateDragElementPosition(UnityEngine.UIElements.GeometryChangedEvent evt)

Disassembly:
	0x03D6EDB4 RET
	0x03D6EDB8 STR X30, [X31 - 0x40]!
	0x03D6EDBC STP X24, X23, [X31 + 0x10]
	0x03D6EDC0 STP X22, X21, [X31 + 0x20]
	0x03D6EDC4 STP X20, X19, [X31 + 0x30]
	0x03D6EDC8 ADRP X23, 0x679000
	0x03D6EDCC ADRP X22, 0x3F5000
	0x03D6EDD0 ADRP X20, 0x3AF000
	0x03D6EDD4 ADRP X21, 0x3F8000
	0x03D6EDD8 LDRB W8, [X23 + 0xD15]
	0x03D6EDDC LDR X22, [X22 + 0x5F8]
	0x03D6EDE0 LDR X20, [X20 + 0x780]
	0x03D6EDE4 LDR X21, [X21 + 0xD00]
	0x03D6EDE8 MOV X19, X0
	0x03D6EDEC TBNZ X8, 0x0, 0x3D6EE4C
	0x03D6EDF0 ADRP X0, 0x3F8000

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {17}
	004 NotImplemented "Instruction LDUR not yet implemented."
	005 NotImplemented "Instruction LDUR not yet implemented."
	006 Move X8, -52969472
	007 Move V2, [X8+3872]
	008 Subtract V0, V0, V1
	009 NotImplemented "Instruction INVALID not yet implemented."
	010 NotImplemented "Instruction FADDP not yet implemented."
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move X30, [X31+16]
	013 Call MinMaxSlider.UpdateDragElementPosition, X0
	014 Return 
	015 Move X30, [X31+16]
	016 Return 
	017 Call 0x1C17F20

Method: System.Void UpdateDragElementPosition()

Disassembly:
	0x03D6D72C FCMP S1, S2
	0x03D6D730 FCSEL S1, S1, S2, GT
	0x03D6D734 LDR X8, [X8 + 0xB8]
	0x03D6D738 FMUL S0, S1, S0
	0x03D6D73C FMOV S1, 8
	0x03D6D740 LDR V3, [X8]
	0x03D6D744 FMUL S1, S3, S1
	0x03D6D748 FCMP S0, S1
	0x03D6D74C FCSEL S0, S0, S1, GT
	0x03D6D750 FABD S1, S8, S8
	0x03D6D754 FCMP S1, S0
	0x03D6D758 B.MI 0x3D6D7AC
	0x03D6D75C LDR V0, [X19 + 0x494]
	0x03D6D760 FCMP S0, S8
	0x03D6D764 B.GT 0x3D6D7D4
	0x03D6D768 STR S8, [X19 + 0x498]
	0x03D6D76C ADRP X8, 0x3F9000
	0x03D6D770 LDR X8, [X8 + 0xC48]
	0x03D6D774 MOV X0, X19
	0x03D6D778 LDR X1, [X8]
	0x03D6D77C BL 0x28A8168
	0x03D6D780 LDR X8, [X19]
	0x03D6D784 MOV X0, X19
	0x03D6D788 LDR X9, [X8 + 0x7F8]
	0x03D6D78C LDR X1, [X8 + 0x800]
	0x03D6D790 BLR X9
	0x03D6D794 MOV X0, X19
	0x03D6D798 BL 0x3D6C72C
	0x03D6D79C LDR X0, [X19 + 0x58]
	0x03D6D7A0 MOV X1, X31
	0x03D6D7A4 BL 0x32277A8
	0x03D6D7A8 TBZ X0, 0x0, 0x3D6D7BC
	0x03D6D7AC LDP X20, X19, [X31 + 0x20]
	0x03D6D7B0 LDR X30, [X31 + 0x10]
	0x03D6D7B4 LDP D9, D8, [X31], #0x30
	0x03D6D7B8 RET
	0x03D6D7BC MOV X0, X19
	0x03D6D7C0 LDP X20, X19, [X31 + 0x20]
	0x03D6D7C4 LDR X30, [X31 + 0x10]
	0x03D6D7C8 MOV X1, X31
	0x03D6D7CC LDP D9, D8, [X31], #0x30
	0x03D6D7D0 B 0x3DF276C
	0x03D6D7D4 ADRP X0, 0x38E000
	0x03D6D7D8 LDR X0, [X0 + 0x578]
	0x03D6D7DC BL 0x1C16D08
	0x03D6D7E0 BL 0x1C16F10
	0x03D6D7E4 MOV X19, X0
	0x03D6D7E8 ADRP X0, 0x3F9000
	0x03D6D7EC LDR X0, [X0 + 0xC78]
	0x03D6D7F0 BL 0x1C16D08
	0x03D6D7F4 MOV X1, X0
	0x03D6D7F8 MOV X0, X19
	0x03D6D7FC MOV X2, X31
	0x03D6D800 BL 0x3314A68
	0x03D6D804 ADRP X0, 0x3F9000
	0x03D6D808 LDR X0, [X0 + 0xC80]
	0x03D6D80C BL 0x1C16D08
	0x03D6D810 MOV X1, X0
	0x03D6D814 MOV X0, X19
	0x03D6D818 BL 0x1C16DEC
	0x03D6D81C MOVN W8, 0x800000
	0x03D6D820 MOVN W9, 0x80800000
	0x03D6D824 FMOV S0, W31
	0x03D6D828 FMOV S1, 10
	0x03D6D82C FMOV S2, W8
	0x03D6D830 FMOV S3, W9
	0x03D6D834 MOV X1, X31
	0x03D6D838 B 0x3D6D83C
	0x03D6D83C STR D12, [X31 - 0x80]!
	0x03D6D840 STP D11, D10, [X31 + 0x10]
	0x03D6D844 STP D9, D8, [X31 + 0x20]
	0x03D6D848 STP X30, X27, [X31 + 0x30]
	0x03D6D84C STP X26, X25, [X31 + 0x40]
	0x03D6D850 STP X24, X23, [X31 + 0x50]
	0x03D6D854 STP X22, X21, [X31 + 0x60]
	0x03D6D858 STP X20, X19, [X31 + 0x70]
	0x03D6D85C ADRP X22, 0x67A000
	0x03D6D860 ADRP X21, 0x3F9000
	0x03D6D864 LDRB W8, [X22 + 0xD0E]
	0x03D6D868 LDR X21, [X21 + 0xC88]
	0x03D6D86C MOV V8.16B, V3.16B
	0x03D6D870 MOV V9.16B, V2.16B
	0x03D6D874 MOV V11.16B, V1.16B
	0x03D6D878 MOV V10.16B, V0.16B
	0x03D6D87C MOV X20, X1
	0x03D6D880 MOV X19, X0
	0x03D6D884 TBNZ X8, 0x0, 0x3D6D974
	0x03D6D888 ADRP X0, 0x387000
	0x03D6D88C LDR X0, [X0 + 0xE70]
	0x03D6D890 BL 0x1C16CF4
	0x03D6D894 ADRP X0, 0x3F9000
	0x03D6D898 LDR X0, [X0 + 0xC90]
	0x03D6D89C BL 0x1C16CF4
	0x03D6D8A0 ADRP X0, 0x3F6000
	0x03D6D8A4 LDR X0, [X0 + 0x5F0]
	0x03D6D8A8 BL 0x1C16CF4
	0x03D6D8AC ADRP X0, 0x3F6000
	0x03D6D8B0 LDR X0, [X0 + 0x5F8]
	0x03D6D8B4 BL 0x1C16CF4
	0x03D6D8B8 ADRP X0, 0x3F9000
	0x03D6D8BC LDR X0, [X0 + 0xC98]
	0x03D6D8C0 BL 0x1C16CF4
	0x03D6D8C4 ADRP X0, 0x3F9000
	0x03D6D8C8 LDR X0, [X0 + 0xC88]
	0x03D6D8CC BL 0x1C16CF4
	0x03D6D8D0 ADRP X0, 0x3B0000
	0x03D6D8D4 LDR X0, [X0 + 0x658]
	0x03D6D8D8 BL 0x1C16CF4
	0x03D6D8DC ADRP X0, 0x3F9000
	0x03D6D8E0 LDR X0, [X0 + 0xCA0]
	0x03D6D8E4 BL 0x1C16CF4
	0x03D6D8E8 ADRP X0, 0x3F9000
	0x03D6D8EC LDR X0, [X0 + 0xCA8]
	0x03D6D8F0 BL 0x1C16CF4
	0x03D6D8F4 ADRP X0, 0x3B0000
	0x03D6D8F8 LDR X0, [X0 + 0x660]
	0x03D6D8FC BL 0x1C16CF4
	0x03D6D900 ADRP X0, 0x3F9000
	0x03D6D904 LDR X0, [X0 + 0xCB0]
	0x03D6D908 BL 0x1C16CF4
	0x03D6D90C ADRP X0, 0x3F9000
	0x03D6D910 LDR X0, [X0 + 0xCB8]
	0x03D6D914 BL 0x1C16CF4
	0x03D6D918 ADRP X0, 0x3F9000
	0x03D6D91C LDR X0, [X0 + 0xCC0]
	0x03D6D920 BL 0x1C16CF4
	0x03D6D924 ADRP X0, 0x3F9000
	0x03D6D928 LDR X0, [X0 + 0xCC8]
	0x03D6D92C BL 0x1C16CF4
	0x03D6D930 ADRP X0, 0x3AE000
	0x03D6D934 LDR X0, [X0 + 0x898]
	0x03D6D938 BL 0x1C16CF4
	0x03D6D93C ADRP X0, 0x3B1000
	0x03D6D940 LDR X0, [X0 + 0x118]
	0x03D6D944 BL 0x1C16CF4
	0x03D6D948 ADRP X0, 0x3F9000
	0x03D6D94C LDR X0, [X0 + 0xCD0]
	0x03D6D950 BL 0x1C16CF4
	0x03D6D954 ADRP X0, 0x3F9000
	0x03D6D958 LDR X0, [X0 + 0xCD8]
	0x03D6D95C BL 0x1C16CF4
	0x03D6D960 ADRP X0, 0x3B1000
	0x03D6D964 LDR X0, [X0 + 0x128]
	0x03D6D968 BL 0x1C16CF4
	0x03D6D96C MOVZ W8, 0x1
	0x03D6D970 STRB W8, [X22 + 0xD0E]
	0x03D6D974 LDR X0, [X21]
	0x03D6D978 ADRP X21, 0x3F9000
	0x03D6D97C LDR W8, [X0 + 0xE0]
	0x03D6D980 LDR X21, [X21 + 0xC90]
	0x03D6D984 CBNZ W8, 0x3D6D98C
	0x03D6D988 BL 0x1C16DFC
	0x03D6D98C LDR X3, [X21]
	0x03D6D990 ADRP X22, 0x3F9000
	0x03D6D994 LDR X22, [X22 + 0xCC8]
	0x03D6D998 MOV X0, X19
	0x03D6D99C MOV X1, X20
	0x03D6D9A0 MOV X2, X31
	0x03D6D9A4 BL 0x28A8B2C
	0x03D6D9A8 ADRP X8, 0xFFFFFFFFFCD80000
	0x03D6D9AC LDR V0, [X8 + 0x768]
	0x03D6D9B0 ADD X23, X19, 0x494
	0x03D6D9B4 MOV X0, X19
	0x03D6D9B8 STR D0, [X23]
	0x03D6D9BC MOV V0.16B, V9.16B
	0x03D6D9C0 BL 0x3D6D54C
	0x03D6D9C4 MOV X0, X19
	0x03D6D9C8 MOV V0.16B, V8.16B
	0x03D6D9CC BL 0x3D6D6B8
	0x03D6D9D0 LDR V0, [X19 + 0x494]
	0x03D6D9D4 LDR V1, [X19 + 0x498]
	0x03D6D9D8 FCMP S0, S1
	0x03D6D9DC B.LE 0x3D6D9E8
	0x03D6D9E0 MOV V0.16B, V1.16B
	0x03D6D9E4 STR S1, [X23]
	0x03D6D9E8 FCMP S1, S11
	0x03D6D9EC FCSEL S1, S1, S11, MI
	0x03D6D9F0 FCMP S1, S10
	0x03D6D9F4 FCSEL S2, S1, S10, MI
	0x03D6D9F8 FCSEL S12, S10, S1, MI
	0x03D6D9FC FCMP S0, S10
	0x03D6DA00 FCSEL S0, S2, S0, LE
	0x03D6DA04 MOV X0, X19
	0x03D6DA08 BL 0x3D6C41C
	0x03D6DA0C MOV X0, X19
	0x03D6DA10 MOV V0.16B, V12.16B
	0x03D6DA14 BL 0x3D6C51C
	0x03D6DA18 LDR X0, [X22]
	0x03D6DA1C LDR W8, [X0 + 0xE0]
	0x03D6DA20 CBNZ W8, 0x3D6DA2C
	0x03D6DA24 BL 0x1C16DFC
	0x03D6DA28 LDR X0, [X22]
	0x03D6DA2C LDR X8, [X0 + 0xB8]
	0x03D6DA30 MOV X0, X19
	0x03D6DA34 MOV X2, X31
	0x03D6DA38 LDR X1, [X8]
	0x03D6DA3C BL 0x3DF1C70
	0x03D6DA40 LDR X0, [X19 + 0x400]
	0x03D6DA44 CBZ X0, 0x3D6DDB0
	0x03D6DA48 LDR X8, [X22]
	0x03D6DA4C ADRP X24, 0x3F6000
	0x03D6DA50 MOV X2, X31
	0x03D6DA54 LDR X8, [X8 + 0xB8]
	0x03D6DA58 LDR X1, [X8 + 0x8]
	0x03D6DA5C LDR X24, [X24 + 0x5F8]
	0x03D6DA60 BL 0x3DF1C70
	0x03D6DA64 LDR X1, [X24]
	0x03D6DA68 MOV X0, X19
	0x03D6DA6C BL 0x28A804C
	0x03D6DA70 CBZ X0, 0x3D6DDB0
	0x03D6DA74 LDR X8, [X22]
	0x03D6DA78 MOV X2, X31
	0x03D6DA7C LDR X8, [X8 + 0xB8]
	0x03D6DA80 LDR X1, [X8 + 0x10]
	0x03D6DA84 BL 0x3DF1C70
	0x03D6DA88 MOVZ W1, 0x1
	0x03D6DA8C MOV X0, X19
	0x03D6DA90 MOV X2, X31
	0x03D6DA94 BL 0x3DEF238
	0x03D6DA98 STR W31, [X19 + 0x490]
	0x03D6DA9C LDR X1, [X24]
	0x03D6DAA0 MOV X0, X19
	0x03D6DAA4 BL 0x28A804C
	0x03D6DAA8 CBZ X0, 0x3D6DDB0
	0x03D6DAAC ADRP X25, 0x3AE000
	0x03D6DAB0 LDR X25, [X25 + 0x898]
	0x03D6DAB4 MOV W1, W31
	0x03D6DAB8 MOV X2, X31
	0x03D6DABC BL 0x3DEF238
	0x03D6DAC0 LDR X0, [X25]
	0x03D6DAC4 BL 0x1C16F10
	0x03D6DAC8 MOV X1, X31
	0x03D6DACC MOV X20, X0
	0x03D6DAD0 BL 0x3DEF578
	0x03D6DAD4 CBZ X20, 0x3D6DDB0
	0x03D6DAD8 ADRP X8, 0x3B1000
	0x03D6DADC LDR X8, [X8 + 0x128]
	0x03D6DAE0 MOV X0, X20
	0x03D6DAE4 MOV X2, X31
	0x03D6DAE8 LDR X1, [X8]
	0x03D6DAEC BL 0x3DEF278
	0x03D6DAF0 LDR X8, [X22]
	0x03D6DAF4 MOV X0, X20
	0x03D6DAF8 MOV X2, X31
	0x03D6DAFC LDR X8, [X8 + 0xB8]
	0x03D6DB00 LDR X1, [X8 + 0x18]
	0x03D6DB04 BL 0x3DF1C70
	0x03D6DB08 LDR X1, [X24]
	0x03D6DB0C MOV X0, X19
	0x03D6DB10 BL 0x28A804C
	0x03D6DB14 CBZ X0, 0x3D6DDB0
	0x03D6DB18 MOV X1, X20
	0x03D6DB1C MOV X2, X31
	0x03D6DB20 BL 0x3DF60E8
	0x03D6DB24 LDR X0, [X25]
	0x03D6DB28 BL 0x1C16F10
	0x03D6DB2C MOV X1, X31
	0x03D6DB30 MOV X20, X0
	0x03D6DB34 BL 0x3DEF578
	0x03D6DB38 CBZ X20, 0x3D6DDB0
	0x03D6DB3C ADRP X8, 0x3B1000
	0x03D6DB40 LDR X8, [X8 + 0x118]
	0x03D6DB44 ADRP X21, 0x3B0000
	0x03D6DB48 ADRP X26, 0x3F9000
	0x03D6DB4C MOV X0, X20
	0x03D6DB50 LDR X1, [X8]
	0x03D6DB54 LDR X21, [X21 + 0x660]
	0x03D6DB58 LDR X26, [X26 + 0xCC0]
	0x03D6DB5C MOV X2, X31
	0x03D6DB60 BL 0x3DEF278
	0x03D6DB64 STR X20, [X19 + 0x440]
	0x03D6DB68 LDR X8, [X22]
	0x03D6DB6C MOV X0, X20
	0x03D6DB70 MOV X2, X31
	0x03D6DB74 LDR X8, [X8 + 0xB8]
	0x03D6DB78 LDR X1, [X8 + 0x20]
	0x03D6DB7C BL 0x3DF1C70
	0x03D6DB80 LDR X0, [X21]
	0x03D6DB84 LDR X20, [X19 + 0x440]
	0x03D6DB88 BL 0x1C16F10
	0x03D6DB8C LDR X2, [X26]
	0x03D6DB90 MOV X1, X19
	0x03D6DB94 MOV X3, X31
	0x03D6DB98 MOV X21, X0
	0x03D6DB9C BL 0x2D0E824
	0x03D6DBA0 CBZ X20, 0x3D6DDB0
	0x03D6DBA4 ADRP X8, 0x3B0000
	0x03D6DBA8 LDR X8, [X8 + 0x658]
	0x03D6DBAC MOV X0, X20
	0x03D6DBB0 MOV X1, X21
	0x03D6DBB4 MOV W2, W31
	0x03D6DBB8 LDR X3, [X8]
	0x03D6DBBC BL 0x21A1534
	0x03D6DBC0 LDR X1, [X24]
	0x03D6DBC4 MOV X0, X19
	0x03D6DBC8 BL 0x28A804C
	0x03D6DBCC CBZ X0, 0x3D6DDB0
	0x03D6DBD0 LDR X1, [X19 + 0x440]
	0x03D6DBD4 MOV X2, X31
	0x03D6DBD8 BL 0x3DF60E8
	0x03D6DBDC LDR X0, [X25]
	0x03D6DBE0 BL 0x1C16F10
	0x03D6DBE4 MOV X1, X31
	0x03D6DBE8 MOV X20, X0
	0x03D6DBEC BL 0x3DEF578
	0x03D6DBF0 CBZ X20, 0x3D6DDB0
	0x03D6DBF4 ADRP X8, 0x3F9000
	0x03D6DBF8 LDR X8, [X8 + 0xCD0]
	0x03D6DBFC MOV X0, X20
	0x03D6DC00 MOV X2, X31
	0x03D6DC04 LDR X1, [X8]
	0x03D6DC08 BL 0x3DEF278
	0x03D6DC0C STR X20, [X19 + 0x448]
	0x03D6DC10 LDR X0, [X25]
	0x03D6DC14 BL 0x1C16F10
	0x03D6DC18 MOV X1, X31
	0x03D6DC1C MOV X20, X0
	0x03D6DC20 BL 0x3DEF578
	0x03D6DC24 CBZ X20, 0x3D6DDB0
	0x03D6DC28 ADRP X8, 0x3F9000
	0x03D6DC2C LDR X8, [X8 + 0xCD8]
	0x03D6DC30 MOV X0, X20
	0x03D6DC34 MOV X2, X31
	0x03D6DC38 LDR X1, [X8]
	0x03D6DC3C BL 0x3DEF278
	0x03D6DC40 LDR X0, [X19 + 0x448]
	0x03D6DC44 STR X20, [X19 + 0x450]
	0x03D6DC48 CBZ X0, 0x3D6DDB0
	0x03D6DC4C LDR X8, [X22]
	0x03D6DC50 MOV X2, X31
	0x03D6DC54 LDR X8, [X8 + 0xB8]
	0x03D6DC58 LDR X1, [X8 + 0x28]
	0x03D6DC5C BL 0x3DF1C70
	0x03D6DC60 LDR X0, [X19 + 0x450]
	0x03D6DC64 CBZ X0, 0x3D6DDB0
	0x03D6DC68 LDR X8, [X22]
	0x03D6DC6C MOV X2, X31
	0x03D6DC70 LDR X8, [X8 + 0xB8]
	0x03D6DC74 LDR X1, [X8 + 0x30]
	0x03D6DC78 BL 0x3DF1C70
	0x03D6DC7C LDR X0, [X19 + 0x440]
	0x03D6DC80 CBZ X0, 0x3D6DDB0
	0x03D6DC84 LDR X1, [X19 + 0x448]
	0x03D6DC88 MOV X2, X31
	0x03D6DC8C BL 0x3DF60E8
	0x03D6DC90 LDR X0, [X19 + 0x440]
	0x03D6DC94 CBZ X0, 0x3D6DDB0
	0x03D6DC98 ADRP X21, 0x387000
	0x03D6DC9C ADRP X20, 0x3F9000
	0x03D6DCA0 ADRP X22, 0x3F9000
	0x03D6DCA4 LDR X21, [X21 + 0xE70]
	0x03D6DCA8 LDR X20, [X20 + 0xCB0]
	0x03D6DCAC LDR X22, [X22 + 0xCB8]
	0x03D6DCB0 LDR X1, [X19 + 0x450]
	0x03D6DCB4 ADRP X26, 0x3F9000
	0x03D6DCB8 ADRP X27, 0x3F9000
	0x03D6DCBC ADRP X25, 0x3F9000
	0x03D6DCC0 LDR X26, [X26 + 0xCA8]
	0x03D6DCC4 LDR X27, [X27 + 0xCA0]
	0x03D6DCC8 LDR X25, [X25 + 0xC98]
	0x03D6DCCC MOV X2, X31
	0x03D6DCD0 BL 0x3DF60E8
	0x03D6DCD4 LDR X0, [X21]
	0x03D6DCD8 BL 0x1C16F10
	0x03D6DCDC LDR X2, [X20]
	0x03D6DCE0 MOV X1, X19
	0x03D6DCE4 MOV X3, X31
	0x03D6DCE8 MOV X20, X0
	0x03D6DCEC BL 0x3314368
	0x03D6DCF0 LDR X0, [X21]
	0x03D6DCF4 BL 0x1C16F10
	0x03D6DCF8 LDR X2, [X22]
	0x03D6DCFC MOV X1, X19
	0x03D6DD00 MOV X3, X31
	0x03D6DD04 MOV X21, X0
	0x03D6DD08 BL 0x3314368
	0x03D6DD0C LDR X0, [X26]
	0x03D6DD10 BL 0x1C16F10
	0x03D6DD14 LDR X4, [X27]
	0x03D6DD18 MOV X1, X31
	0x03D6DD1C MOV X2, X20
	0x03D6DD20 MOV X3, X21
	0x03D6DD24 MOV X22, X0
	0x03D6DD28 BL 0x28F77F8
	0x03D6DD2C STR X22, [X19 + 0x458]
	0x03D6DD30 LDR X1, [X24]
	0x03D6DD34 MOV X0, X19
	0x03D6DD38 BL 0x28A804C
	0x03D6DD3C LDR X1, [X19 + 0x458]
	0x03D6DD40 MOV X2, X31
	0x03D6DD44 BL 0x3D16A80
	0x03D6DD48 FCMP S9, S8
	0x03D6DD4C STR S9, [X19 + 0x494]
	0x03D6DD50 STR S8, [X19 + 0x498]
	0x03D6DD54 B.LE 0x3D6DD60
	0x03D6DD58 MOV V9.16B, V8.16B
	0x03D6DD5C STR S8, [X23]
	0x03D6DD60 FCMP S11, S8
	0x03D6DD64 LDR X1, [X25]
	0x03D6DD68 FCSEL S0, S8, S11, GT
	0x03D6DD6C FCMP S0, S10
	0x03D6DD70 FCSEL S2, S0, S10, MI
	0x03D6DD74 FCSEL S1, S10, S0, MI
	0x03D6DD78 FCMP S9, S10
	0x03D6DD7C FCSEL S0, S2, S9, LE
	0x03D6DD80 MOV X0, X19
	0x03D6DD84 BL 0x28A8174
	0x03D6DD88 MOV X0, X19
	0x03D6DD8C LDP X20, X19, [X31 + 0x70]
	0x03D6DD90 LDP X22, X21, [X31 + 0x60]
	0x03D6DD94 LDP X24, X23, [X31 + 0x50]
	0x03D6DD98 LDP X26, X25, [X31 + 0x40]
	0x03D6DD9C LDP X30, X27, [X31 + 0x30]
	0x03D6DDA0 LDP D9, D8, [X31 + 0x20]
	0x03D6DDA4 LDP D11, D10, [X31 + 0x10]
	0x03D6DDA8 LDR V12, [X31], #0x80
	0x03D6DDAC B 0x3D6C72C
	0x03D6DDB0 BL 0x1C16F20
	0x03D6DDB4 STR X30, [X31 - 0x10]!
	0x03D6DDB8 CBZ X1, 0x3D6DDF0
	0x03D6DDBC LDUR V0, [X1 + 0x8C]
	0x03D6DDC0 LDUR V1, [X1 + 0x9C]
	0x03D6DDC4 ADRP X8, 0xFFFFFFFFFCD7C000
	0x03D6DDC8 LDR V2, [X8 + 0xF20]
	0x03D6DDCC FSUB V0.2S, V0.2S, V1.2S
	0x00000000 INVALID
	0x03D6DDD4 FADDP S0, V0.2S
	0x03D6DDD8 FCMP S0, S2
	0x03D6DDDC B.MI 0x3D6DDE8
	0x03D6DDE0 LDR X30, [X31], #0x10
	0x03D6DDE4 B 0x3D6C72C
	0x03D6DDE8 LDR X30, [X31], #0x10
	0x03D6DDEC RET
	0x03D6DDF0 BL 0x1C16F20
	0x03D6DDF4 FSUB S0, S0, S1
	0x03D6DDF8 FSUB S1, S2, S1
	0x03D6DDFC FDIV S0, S0, S1
	0x03D6DE00 RET
	0x03D6DE04 FSUB S1, S1, S0
	0x03D6DE08 FMUL S1, S1, S2
	0x03D6DE0C FADD S0, S1, S0
	0x03D6DE10 RET
	0x03D6DE14 STP D15, D14, [X31 - 0x70]!
	0x03D6DE18 STP D13, D12, [X31 + 0x10]
	0x03D6DE1C STP D11, D10, [X31 + 0x20]
	0x03D6DE20 STP D9, D8, [X31 + 0x30]
	0x03D6DE24 STR X30, [X31 + 0x40]
	0x03D6DE28 STP X22, X21, [X31 + 0x50]
	0x03D6DE2C STP X20, X19, [X31 + 0x60]
	0x03D6DE30 ADRP X20, 0x67A000
	0x03D6DE34 LDRB W8, [X20 + 0xD10]
	0x03D6DE38 MOV X19, X0
	0x03D6DE3C TBNZ X8, 0x0, 0x3D6DE54
	0x03D6DE40 ADRP X0, 0x3AF000
	0x03D6DE44 LDR X0, [X0 + 0x120]
	0x03D6DE48 BL 0x1C16CF4
	0x03D6DE4C MOVZ W8, 0x1
	0x03D6DE50 STRB W8, [X20 + 0xD10]
	0x03D6DE54 LDR X0, [X19 + 0x440]
	0x03D6DE58 CBZ X0, 0x3D6E498
	0x03D6DE5C MOV X1, X31
	0x03D6DE60 BL 0x3DE0EB8
	0x03D6DE64 CBZ X0, 0x3D6E498
	0x03D6DE68 ADRP X22, 0x3AF000
	0x03D6DE6C LDR X8, [X0]
	0x03D6DE70 LDR X22, [X22 + 0x120]
	0x03D6DE74 MOV X20, X0
	0x03D6DE78 LDRH W9, [X8 + 0x12E]
	0x03D6DE7C LDR X1, [X22]
	0x03D6DE80 CBZ X9, 0x3D6DEA4
	0x03D6DE84 LDR X10, [X8 + 0xB0]
	0x03D6DE88 ADD X10, X10, 0x8
	0x03D6DE8C LDUR X11, [X10 - 0x8]
	0x03D6DE90 CMP X11, X1
	0x03D6DE94 B.EQ 0x3D6DEB4
	0x03D6DE98 SUBS X9, X9, 0x1
	0x03D6DE9C ADD X10, X10, 0x10
	0x03D6DEA0 B.NE 0x3D6DE8C
	0x03D6DEA4 MOVZ W2, 0x14
	0x03D6DEA8 MOV X0, X20
	0x03D6DEAC BL 0x1C5C788
	0x03D6DEB0 B 0x3D6DEC4
	0x03D6DEB4 LDR W9, [X10]
	0x03D6DEB8 ADD W9, W9, 0x14
	0x03D6DEBC ADD X8, X8, W9, 0x4, SXTW
	0x03D6DEC0 ADD X0, X8, 0x138
	0x03D6DEC4 LDP X8, X1, [X0]
	0x03D6DEC8 MOV X0, X20
	0x03D6DECC BLR X8
	0x03D6DED0 LDR X0, [X19 + 0x440]
	0x03D6DED4 CBZ X0, 0x3D6E498
	0x03D6DED8 MOV X1, X31
	0x03D6DEDC MOV V10.16B, V0.16B
	0x03D6DEE0 BL 0x3DE0EB8
	0x03D6DEE4 CBZ X0, 0x3D6E498
	0x03D6DEE8 LDR X8, [X0]
	0x03D6DEEC LDR X1, [X22]
	0x03D6DEF0 MOV X20, X0
	0x03D6DEF4 LDRH W9, [X8 + 0x12E]
	0x03D6DEF8 CBZ X9, 0x3D6DF1C
	0x03D6DEFC LDR X10, [X8 + 0xB0]
	0x03D6DF00 ADD X10, X10, 0x8
	0x03D6DF04 LDUR X11, [X10 - 0x8]
	0x03D6DF08 CMP X11, X1
	0x03D6DF0C B.EQ 0x3D6DF2C
	0x03D6DF10 SUBS X9, X9, 0x1
	0x03D6DF14 ADD X10, X10, 0x10
	0x03D6DF18 B.NE 0x3D6DF04
	0x03D6DF1C MOVZ W2, 0x14
	0x03D6DF20 MOV X0, X20
	0x03D6DF24 BL 0x1C5C788
	0x03D6DF28 B 0x3D6DF3C
	0x03D6DF2C LDR W9, [X10]
	0x03D6DF30 ADD W9, W9, 0x14
	0x03D6DF34 ADD X8, X8, W9, 0x4, SXTW
	0x03D6DF38 ADD X0, X8, 0x138
	0x03D6DF3C LDP X8, X1, [X0]
	0x03D6DF40 MOV X0, X20
	0x03D6DF44 BLR X8
	0x03D6DF48 LDR X0, [X19 + 0x440]
	0x03D6DF4C CBZ X0, 0x3D6E498
	0x03D6DF50 MOV X1, X31
	0x03D6DF54 MOV V15.16B, V0.16B
	0x03D6DF58 BL 0x3DE0EB8
	0x03D6DF5C CBZ X0, 0x3D6E498
	0x03D6DF60 LDR X8, [X0]
	0x03D6DF64 LDR X1, [X22]
	0x03D6DF68 MOV X20, X0
	0x03D6DF6C LDRH W9, [X8 + 0x12E]
	0x03D6DF70 CBZ X9, 0x3D6DF94
	0x03D6DF74 LDR X10, [X8 + 0xB0]
	0x03D6DF78 ADD X10, X10, 0x8
	0x03D6DF7C LDUR X11, [X10 - 0x8]
	0x03D6DF80 CMP X11, X1
	0x03D6DF84 B.EQ 0x3D6DFA4
	0x03D6DF88 SUBS X9, X9, 0x1
	0x03D6DF8C ADD X10, X10, 0x10
	0x03D6DF90 B.NE 0x3D6DF7C
	0x03D6DF94 MOVZ W2, 0x2C
	0x03D6DF98 MOV X0, X20
	0x03D6DF9C BL 0x1C5C788
	0x03D6DFA0 B 0x3D6DFB4
	0x03D6DFA4 LDR W9, [X10]
	0x03D6DFA8 ADD W9, W9, 0x2C
	0x03D6DFAC ADD X8, X8, W9, 0x4, SXTW
	0x03D6DFB0 ADD X0, X8, 0x138
	0x03D6DFB4 LDP X8, X1, [X0]
	0x03D6DFB8 MOV X0, X20
	0x03D6DFBC BLR X8
	0x03D6DFC0 LDR X0, [X19 + 0x440]
	0x03D6DFC4 CBZ X0, 0x3D6E498
	0x03D6DFC8 MOV X1, X31
	0x03D6DFCC MOV V11.16B, V0.16B
	0x03D6DFD0 BL 0x3DE0EB8
	0x03D6DFD4 CBZ X0, 0x3D6E498
	0x03D6DFD8 LDR X8, [X0]
	0x03D6DFDC LDR X1, [X22]
	0x03D6DFE0 MOV X20, X0
	0x03D6DFE4 LDRH W9, [X8 + 0x12E]
	0x03D6DFE8 CBZ X9, 0x3D6E00C
	0x03D6DFEC LDR X10, [X8 + 0xB0]
	0x03D6DFF0 ADD X10, X10, 0x8
	0x03D6DFF4 LDUR X11, [X10 - 0x8]
	0x03D6DFF8 CMP X11, X1
	0x03D6DFFC B.EQ 0x3D6E01C
	0x03D6E000 SUBS X9, X9, 0x1
	0x03D6E004 ADD X10, X10, 0x10
	0x03D6E008 B.NE 0x3D6DFF4
	0x03D6E00C MOVZ W2, 0x27
	0x03D6E010 MOV X0, X20
	0x03D6E014 BL 0x1C5C788
	0x03D6E018 B 0x3D6E02C
	0x03D6E01C LDR W9, [X10]
	0x03D6E020 ADD W9, W9, 0x27
	0x03D6E024 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E028 ADD X0, X8, 0x138
	0x03D6E02C LDP X8, X1, [X0]
	0x03D6E030 MOV X0, X20
	0x03D6E034 BLR X8
	0x03D6E038 LDR X8, [X19 + 0x440]
	0x03D6E03C CBZ X8, 0x3D6E498
	0x03D6E040 MOV W20, W0
	0x03D6E044 MOV X0, X8
	0x03D6E048 MOV X1, X31
	0x03D6E04C BL 0x3DEC528
	0x03D6E050 LDR X0, [X19 + 0x448]
	0x03D6E054 CBZ X0, 0x3D6E498
	0x03D6E058 MOV X1, X31
	0x03D6E05C MOV V14.16B, V1.16B
	0x03D6E060 BL 0x3DE0EB8
	0x03D6E064 CBZ X0, 0x3D6E498
	0x03D6E068 LDR X8, [X0]
	0x03D6E06C LDR X1, [X22]
	0x03D6E070 MOV X21, X0
	0x03D6E074 LDRH W9, [X8 + 0x12E]
	0x03D6E078 CBZ X9, 0x3D6E09C
	0x03D6E07C LDR X10, [X8 + 0xB0]
	0x03D6E080 ADD X10, X10, 0x8
	0x03D6E084 LDUR X11, [X10 - 0x8]
	0x03D6E088 CMP X11, X1
	0x03D6E08C B.EQ 0x3D6E0AC
	0x03D6E090 SUBS X9, X9, 0x1
	0x03D6E094 ADD X10, X10, 0x10
	0x03D6E098 B.NE 0x3D6E084
	0x03D6E09C MOVZ W2, 0x18
	0x03D6E0A0 MOV X0, X21
	0x03D6E0A4 BL 0x1C5C788
	0x03D6E0A8 B 0x3D6E0BC
	0x03D6E0AC LDR W9, [X10]
	0x03D6E0B0 ADD W9, W9, 0x18
	0x03D6E0B4 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E0B8 ADD X0, X8, 0x138
	0x03D6E0BC LDP X8, X1, [X0]
	0x03D6E0C0 MOV X0, X21
	0x03D6E0C4 BLR X8
	0x03D6E0C8 LDR X0, [X19 + 0x440]
	0x03D6E0CC CBZ X0, 0x3D6E498
	0x03D6E0D0 MOV X1, X31
	0x03D6E0D4 MOV V12.16B, V0.16B
	0x03D6E0D8 BL 0x3DEC528
	0x03D6E0DC LDR X0, [X19 + 0x450]
	0x03D6E0E0 CBZ X0, 0x3D6E498
	0x03D6E0E4 MOV X1, X31
	0x03D6E0E8 MOV V13.16B, V1.16B
	0x03D6E0EC BL 0x3DE0EB8
	0x03D6E0F0 CBZ X0, 0x3D6E498
	0x03D6E0F4 LDR X8, [X0]
	0x03D6E0F8 LDR X1, [X22]
	0x03D6E0FC MOV X21, X0
	0x03D6E100 LDRH W9, [X8 + 0x12E]
	0x03D6E104 CBZ X9, 0x3D6E128
	0x03D6E108 LDR X10, [X8 + 0xB0]
	0x03D6E10C ADD X10, X10, 0x8
	0x03D6E110 LDUR X11, [X10 - 0x8]
	0x03D6E114 CMP X11, X1
	0x03D6E118 B.EQ 0x3D6E138
	0x03D6E11C SUBS X9, X9, 0x1
	0x03D6E120 ADD X10, X10, 0x10
	0x03D6E124 B.NE 0x3D6E110
	0x03D6E128 MOVZ W2, 0x18
	0x03D6E12C MOV X0, X21
	0x03D6E130 BL 0x1C5C788
	0x03D6E134 B 0x3D6E148
	0x03D6E138 LDR W9, [X10]
	0x03D6E13C ADD W9, W9, 0x18
	0x03D6E140 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E144 ADD X0, X8, 0x138
	0x03D6E148 LDP X8, X1, [X0]
	0x03D6E14C MOV X0, X21
	0x03D6E150 BLR X8
	0x03D6E154 LDR X0, [X19 + 0x440]
	0x03D6E158 CBZ X0, 0x3D6E498
	0x03D6E15C MOV X1, X31
	0x03D6E160 MOV V9.16B, V0.16B
	0x03D6E164 BL 0x3DE0EB8
	0x03D6E168 CBZ X0, 0x3D6E498
	0x03D6E16C LDR X8, [X0]
	0x03D6E170 LDR X1, [X22]
	0x03D6E174 MOV X21, X0
	0x03D6E178 LDRH W9, [X8 + 0x12E]
	0x03D6E17C CBZ X9, 0x3D6E1A0
	0x03D6E180 LDR X10, [X8 + 0xB0]
	0x03D6E184 ADD X10, X10, 0x8
	0x03D6E188 LDUR X11, [X10 - 0x8]
	0x03D6E18C CMP X11, X1
	0x03D6E190 B.EQ 0x3D6E1B0
	0x03D6E194 SUBS X9, X9, 0x1
	0x03D6E198 ADD X10, X10, 0x10
	0x03D6E19C B.NE 0x3D6E188
	0x03D6E1A0 MOVZ W2, 0x13
	0x03D6E1A4 MOV X0, X21
	0x03D6E1A8 BL 0x1C5C788
	0x03D6E1AC B 0x3D6E1C0
	0x03D6E1B0 LDR W9, [X10]
	0x03D6E1B4 ADD W9, W9, 0x13
	0x03D6E1B8 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E1BC ADD X0, X8, 0x138
	0x03D6E1C0 LDP X8, X1, [X0]
	0x03D6E1C4 MOV X0, X21
	0x03D6E1C8 BLR X8
	0x03D6E1CC LDR X0, [X19 + 0x448]
	0x03D6E1D0 CBZ X0, 0x3D6E498
	0x03D6E1D4 MOV X1, X31
	0x03D6E1D8 MOV V8.16B, V0.16B
	0x03D6E1DC BL 0x3DE0EB8
	0x03D6E1E0 CBZ X0, 0x3D6E498
	0x03D6E1E4 LDR X8, [X0]
	0x03D6E1E8 LDR X1, [X22]
	0x03D6E1EC MOV X21, X0
	0x03D6E1F0 STR S9, [X31 + 0x4C]
	0x03D6E1F4 LDRH W9, [X8 + 0x12E]
	0x03D6E1F8 CBZ X9, 0x3D6E21C
	0x03D6E1FC LDR X10, [X8 + 0xB0]
	0x03D6E200 ADD X10, X10, 0x8
	0x03D6E204 LDUR X11, [X10 - 0x8]
	0x03D6E208 CMP X11, X1
	0x03D6E20C B.EQ 0x3D6E22C
	0x03D6E210 SUBS X9, X9, 0x1
	0x03D6E214 ADD X10, X10, 0x10
	0x03D6E218 B.NE 0x3D6E204
	0x03D6E21C MOVZ W2, 0x13
	0x03D6E220 MOV X0, X21
	0x03D6E224 BL 0x1C5C788
	0x03D6E228 B 0x3D6E23C
	0x03D6E22C LDR W9, [X10]
	0x03D6E230 ADD W9, W9, 0x13
	0x03D6E234 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E238 ADD X0, X8, 0x138
	0x03D6E23C LDP X8, X1, [X0]
	0x03D6E240 MOV X0, X21
	0x03D6E244 BLR X8
	0x03D6E248 LDR X0, [X19 + 0x440]
	0x03D6E24C FCMP S8, S0
	0x03D6E250 FCSEL S9, S8, S0, GT
	0x03D6E254 CBZ X0, 0x3D6E498
	0x03D6E258 MOV X1, X31
	0x03D6E25C BL 0x3DE0EB8
	0x03D6E260 CBZ X0, 0x3D6E498
	0x03D6E264 LDR X8, [X0]
	0x03D6E268 LDR X1, [X22]
	0x03D6E26C MOV X21, X0
	0x03D6E270 STR S15, [X31 + 0x48]
	0x03D6E274 LDRH W9, [X8 + 0x12E]
	0x03D6E278 CBZ X9, 0x3D6E29C
	0x03D6E27C LDR X10, [X8 + 0xB0]
	0x03D6E280 ADD X10, X10, 0x8
	0x03D6E284 LDUR X11, [X10 - 0x8]
	0x03D6E288 CMP X11, X1
	0x03D6E28C B.EQ 0x3D6E2AC
	0x03D6E290 SUBS X9, X9, 0x1
	0x03D6E294 ADD X10, X10, 0x10
	0x03D6E298 B.NE 0x3D6E284
	0x03D6E29C MOVZ W2, 0x13
	0x03D6E2A0 MOV X0, X21
	0x03D6E2A4 BL 0x1C5C788
	0x03D6E2A8 B 0x3D6E2BC
	0x03D6E2AC LDR W9, [X10]
	0x03D6E2B0 ADD W9, W9, 0x13
	0x03D6E2B4 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E2B8 ADD X0, X8, 0x138
	0x03D6E2BC LDP X8, X1, [X0]
	0x03D6E2C0 MOV X0, X21
	0x03D6E2C4 BLR X8
	0x03D6E2C8 LDR X0, [X19 + 0x450]
	0x03D6E2CC CBZ X0, 0x3D6E498
	0x03D6E2D0 MOV X1, X31
	0x03D6E2D4 MOV V15.16B, V0.16B
	0x03D6E2D8 BL 0x3DE0EB8
	0x03D6E2DC CBZ X0, 0x3D6E498
	0x03D6E2E0 LDR X8, [X0]
	0x03D6E2E4 LDR X1, [X22]
	0x03D6E2E8 MOV X21, X0
	0x03D6E2EC LDRH W9, [X8 + 0x12E]
	0x03D6E2F0 CBZ X9, 0x3D6E314
	0x03D6E2F4 LDR X10, [X8 + 0xB0]
	0x03D6E2F8 ADD X10, X10, 0x8
	0x03D6E2FC LDUR X11, [X10 - 0x8]
	0x03D6E300 CMP X11, X1
	0x03D6E304 B.EQ 0x3D6E324
	0x03D6E308 SUBS X9, X9, 0x1
	0x03D6E30C ADD X10, X10, 0x10
	0x03D6E310 B.NE 0x3D6E2FC
	0x03D6E314 MOVZ W2, 0x13
	0x03D6E318 MOV X0, X21
	0x03D6E31C BL 0x1C5C788
	0x03D6E320 B 0x3D6E334
	0x03D6E324 LDR W9, [X10]
	0x03D6E328 ADD W9, W9, 0x13
	0x03D6E32C ADD X8, X8, W9, 0x4, SXTW
	0x03D6E330 ADD X0, X8, 0x138
	0x03D6E334 LDP X8, X1, [X0]
	0x03D6E338 MOV X0, X21
	0x03D6E33C BLR X8
	0x03D6E340 LDR X0, [X19 + 0x440]
	0x03D6E344 CBZ X0, 0x3D6E498
	0x03D6E348 MOV X1, X31
	0x03D6E34C MOV V8.16B, V0.16B
	0x03D6E350 BL 0x3DE0EB8
	0x03D6E354 CBZ X0, 0x3D6E498
	0x03D6E358 LDR X8, [X0]
	0x03D6E35C LDR X1, [X22]
	0x03D6E360 MOV X21, X0
	0x03D6E364 FADD S12, S14, S12
	0x03D6E368 LDRH W9, [X8 + 0x12E]
	0x03D6E36C CBZ X9, 0x3D6E390
	0x03D6E370 LDR X10, [X8 + 0xB0]
	0x03D6E374 ADD X10, X10, 0x8
	0x03D6E378 LDUR X11, [X10 - 0x8]
	0x03D6E37C CMP X11, X1
	0x03D6E380 B.EQ 0x3D6E3A0
	0x03D6E384 SUBS X9, X9, 0x1
	0x03D6E388 ADD X10, X10, 0x10
	0x03D6E38C B.NE 0x3D6E378
	0x03D6E390 MOVZ W2, 0x26
	0x03D6E394 MOV X0, X21
	0x03D6E398 BL 0x1C5C788
	0x03D6E39C B 0x3D6E3B0
	0x03D6E3A0 LDR W9, [X10]
	0x03D6E3A4 ADD W9, W9, 0x26
	0x03D6E3A8 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E3AC ADD X0, X8, 0x138
	0x03D6E3B0 LDP X8, X1, [X0]
	0x03D6E3B4 MOV X0, X21
	0x03D6E3B8 BLR X8
	0x03D6E3BC SCVTF S0, W0
	0x03D6E3C0 LDR X0, [X19 + 0x440]
	0x03D6E3C4 STR S10, [X19 + 0x470]
	0x03D6E3C8 STR S12, [X19 + 0x474]
	0x03D6E3CC STR S0, [X19 + 0x478]
	0x03D6E3D0 STR S9, [X19 + 0x47C]
	0x03D6E3D4 CBZ X0, 0x3D6E498
	0x03D6E3D8 MOV X1, X31
	0x03D6E3DC BL 0x3DE0EB8
	0x03D6E3E0 LDR V9, [X31 + 0x4C]
	0x03D6E3E4 CBZ X0, 0x3D6E498
	0x03D6E3E8 LDR X8, [X0]
	0x03D6E3EC LDR X1, [X22]
	0x03D6E3F0 MOV X21, X0
	0x03D6E3F4 LDRH W9, [X8 + 0x12E]
	0x03D6E3F8 CBZ X9, 0x3D6E41C
	0x03D6E3FC LDR X10, [X8 + 0xB0]
	0x03D6E400 ADD X10, X10, 0x8
	0x03D6E404 LDUR X11, [X10 - 0x8]
	0x03D6E408 CMP X11, X1
	0x03D6E40C B.EQ 0x3D6E42C
	0x03D6E410 SUBS X9, X9, 0x1
	0x03D6E414 ADD X10, X10, 0x10
	0x03D6E418 B.NE 0x3D6E404
	0x03D6E41C MOVZ W2, 0x27
	0x03D6E420 MOV X0, X21
	0x03D6E424 BL 0x1C5C788
	0x03D6E428 B 0x3D6E43C
	0x03D6E42C LDR W9, [X10]
	0x03D6E430 ADD W9, W9, 0x27
	0x03D6E434 ADD X8, X8, W9, 0x4, SXTW
	0x03D6E438 ADD X0, X8, 0x138
	0x03D6E43C LDP X8, X1, [X0]
	0x03D6E440 LDR V1, [X31 + 0x48]
	0x03D6E444 SCVTF S0, W20
	0x03D6E448 FCMP S15, S8
	0x03D6E44C FSUB S0, S11, S0
	0x03D6E450 MOV X0, X21
	0x03D6E454 FADD S9, S13, S9
	0x03D6E458 FCSEL S8, S15, S8, GT
	0x03D6E45C FADD S10, S1, S0
	0x03D6E460 BLR X8
	0x03D6E464 SCVTF S0, W0
	0x03D6E468 STR S10, [X19 + 0x480]
	0x03D6E46C STR S9, [X19 + 0x484]
	0x03D6E470 STR S0, [X19 + 0x488]
	0x03D6E474 STR S8, [X19 + 0x48C]
	0x03D6E478 LDP X20, X19, [X31 + 0x60]
	0x03D6E47C LDP X22, X21, [X31 + 0x50]
	0x03D6E480 LDR X30, [X31 + 0x40]
	0x03D6E484 LDP D9, D8, [X31 + 0x30]
	0x03D6E488 LDP D11, D10, [X31 + 0x20]
	0x03D6E48C LDP D13, D12, [X31 + 0x10]
	0x03D6E490 LDP D15, D14, [X31], #0x70
	0x03D6E494 RET
	0x03D6E498 BL 0x1C16F20
	0x03D6E49C STP D9, D8, [X31 - 0x40]!
	0x03D6E4A0 STR X30, [X31 + 0x10]
	0x03D6E4A4 STP X22, X21, [X31 + 0x20]
	0x03D6E4A8 STP X20, X19, [X31 + 0x30]
	0x03D6E4AC ADRP X20, 0x679000
	0x03D6E4B0 LDRB W8, [X20 + 0xD11]
	0x03D6E4B4 MOV V8.16B, V0.16B
	0x03D6E4B8 MOV X19, X0
	0x03D6E4BC TBNZ X8, 0x0, 0x3D6E4E0
	0x03D6E4C0 ADRP X0, 0x3F5000
	0x03D6E4C4 LDR X0, [X0 + 0x5F8]
	0x03D6E4C8 BL 0x1C16CF4
	0x03D6E4CC ADRP X0, 0x3AE000
	0x03D6E4D0 LDR X0, [X0 + 0x120]
	0x03D6E4D4 BL 0x1C16CF4
	0x03D6E4D8 MOVZ W8, 0x1
	0x03D6E4DC STRB W8, [X20 + 0xD11]
	0x03D6E4E0 LDR X0, [X19 + 0x440]
	0x03D6E4E4 CBZ X0, 0x3D6E638
	0x03D6E4E8 MOV X1, X31
	0x03D6E4EC BL 0x3DE0EB8
	0x03D6E4F0 CBZ X0, 0x3D6E638
	0x03D6E4F4 ADRP X22, 0x3AE000
	0x03D6E4F8 LDR X8, [X0]
	0x03D6E4FC LDR X22, [X22 + 0x120]
	0x03D6E500 ADRP X21, 0x3F5000
	0x03D6E504 MOV X20, X0
	0x03D6E508 LDRH W9, [X8 + 0x12E]
	0x03D6E50C LDR X1, [X22]
	0x03D6E510 LDR X21, [X21 + 0x5F8]
	0x03D6E514 CBZ X9, 0x3D6E538
	0x03D6E518 LDR X10, [X8 + 0xB0]
	0x03D6E51C ADD X10, X10, 0x8
	0x03D6E520 LDUR X11, [X10 - 0x8]
	0x03D6E524 CMP X11, X1
	0x03D6E528 B.EQ 0x3D6E548
	0x03D6E52C SUBS X9, X9, 0x1
	0x03D6E530 ADD X10, X10, 0x10
	0x03D6E534 B.NE 0x3D6E520
	0x03D6E538 MOVZ W2, 0x26
	0x03D6E53C MOV X0, X20
	0x03D6E540 BL 0x1C5C788

ISIL:
	001 Move [X31-128], D13
	002 Move [X31-120], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X20, 0x67B000
	017 Move W8, [X20+3343]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0x3F7000
	024 Move X0, [X0+1528]
	025 Call 0x1C17CF4
	026 Move X0, 0x3B0000
	027 Move X0, [X0+288]
	028 Call 0x1C17CF4
	029 Move X0, 0x3B0000
	030 Move X0, [X0+296]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3343], W8
	034 Move X0, X19
	035 Move X1, X31
	036 Call VisualElement.get_panel, X0
	037 Compare X0, 0
	038 JumpIfEqual {63}
	039 Move X0, [X19+1088]
	040 Compare X0, 0
	041 JumpIfEqual {939}
	042 Move X1, X31
	043 Call VisualElement.get_resolvedStyle, X0
	044 Compare X0, 0
	045 JumpIfEqual {939}
	046 Move X25, 0x3B0000
	047 Move X8, [X0]
	048 Move X25, [X25+288]
	049 Move X20, X0
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 Move X1, [X25]
	052 Compare X9, 0
	053 JumpIfEqual {60}
	054 Move X10, [X8+176]
	055 Add X10, X10, 8
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Subtract X9, X9, 1
	059 Add X10, X10, 16
	060 Move W2, 22
	061 Move X0, X20
	062 Call 0x1C5D788
	063 Move X20, [X31+112]
	064 Move X19, [X31+120]
	065 Move X22, [X31+96]
	066 Move X21, [X31+104]
	067 Move X24, [X31+80]
	068 Move X23, [X31+88]
	069 Move X26, [X31+64]
	070 Move X25, [X31+72]
	071 Move X30, [X31+48]
	072 Move D9, [X31+32]
	073 Move D8, [X31+40]
	074 Move D11, [X31+16]
	075 Move D10, [X31+24]
	076 Move D13, [X31+128]
	077 Move D12, [X31+136]
	078 Return 
	079 Move W9, [X10]
	080 Add W9, W9, 22
	081 Add X8, X8, W9
	082 Add X0, X8, 312
	083 Move X8, [X0]
	084 Move X1, [X0+8]
	085 Move X0, X20
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X0, [X19+1088]
	088 Compare X0, 0
	089 JumpIfEqual {939}
	090 Move X1, X31
	091 Move V8, V0
	092 Call VisualElement.get_resolvedStyle, X0
	093 Compare X0, 0
	094 JumpIfEqual {939}
	095 Move X8, [X0]
	096 Move X1, [X25]
	097 Move X20, X0
	098 NotImplemented "Instruction LDRH not yet implemented."
	099 Compare X9, 0
	100 JumpIfEqual {107}
	101 Move X10, [X8+176]
	102 Add X10, X10, 8
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Subtract X9, X9, 1
	106 Add X10, X10, 16
	107 Move W2, 23
	108 Move X0, X20
	109 Call 0x1C5D788
	110 Move W9, [X10]
	111 Add W9, W9, 23
	112 Add X8, X8, W9
	113 Add X0, X8, 312
	114 Move X8, [X0]
	115 Move X1, [X0+8]
	116 Move X0, X20
	117 NotImplemented "Instruction BLR not yet implemented."
	118 Move X0, [X19+1088]
	119 Compare X0, 0
	120 JumpIfEqual {939}
	121 Move X1, X31
	122 Move V9, V0
	123 Call VisualElement.get_resolvedStyle, X0
	124 Compare X0, 0
	125 JumpIfEqual {939}
	126 Move X8, [X0]
	127 Move X1, [X25]
	128 Move X20, X0
	129 NotImplemented "Instruction LDRH not yet implemented."
	130 Compare X9, 0
	131 JumpIfEqual {138}
	132 Move X10, [X8+176]
	133 Add X10, X10, 8
	134 NotImplemented "Instruction LDUR not yet implemented."
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Subtract X9, X9, 1
	137 Add X10, X10, 16
	138 Move W2, 38
	139 Move X0, X20
	140 Call 0x1C5D788
	141 Move W9, [X10]
	142 Add W9, W9, 38
	143 Add X8, X8, W9
	144 Add X0, X8, 312
	145 Move X8, [X0]
	146 Move X1, [X0+8]
	147 Move X0, X20
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move X8, [X19+1088]
	150 Compare X8, 0
	151 JumpIfEqual {939}
	152 Move W20, W0
	153 Move X0, X8
	154 Move X1, X31
	155 Call VisualElement.get_resolvedStyle, X0
	156 Compare X0, 0
	157 JumpIfEqual {939}
	158 Move X8, [X0]
	159 Move X1, [X25]
	160 Move X21, X0
	161 NotImplemented "Instruction LDRH not yet implemented."
	162 Compare X9, 0
	163 JumpIfEqual {170}
	164 Move X10, [X8+176]
	165 Add X10, X10, 8
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Subtract X9, X9, 1
	169 Add X10, X10, 16
	170 Move W2, 39
	171 Move X0, X21
	172 Call 0x1C5D788
	173 Move W9, [X10]
	174 Add W9, W9, 39
	175 Add X8, X8, W9
	176 Add X0, X8, 312
	177 Move X8, [X0]
	178 Move X1, [X0+8]
	179 Move X0, X21
	180 NotImplemented "Instruction BLR not yet implemented."
	181 Move X8, [X19+1088]
	182 Compare X8, 0
	183 JumpIfEqual {939}
	184 Move W21, W0
	185 Move X0, X8
	186 Move X1, X31
	187 Call VisualElement.get_resolvedStyle, X0
	188 Compare X0, 0
	189 JumpIfEqual {939}
	190 Move X8, [X0]
	191 Move X26, 0x3F7000
	192 Move X1, [X25]
	193 Move X22, X0
	194 NotImplemented "Instruction LDRH not yet implemented."
	195 Move X26, [X26+1528]
	196 Compare X9, 0
	197 JumpIfEqual {204}
	198 Move X10, [X8+176]
	199 Add X10, X10, 8
	200 NotImplemented "Instruction LDUR not yet implemented."
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Subtract X9, X9, 1
	203 Add X10, X10, 16
	204 Move W2, 38
	205 Move X0, X22
	206 Call 0x1C5D788
	207 Move W9, [X10]
	208 Add W9, W9, 38
	209 Add X8, X8, W9
	210 Add X0, X8, 312
	211 Move X8, [X0]
	212 Move X1, [X0+8]
	213 Move X0, X22
	214 NotImplemented "Instruction BLR not yet implemented."
	215 Move X1, [X26]
	216 Move W22, W0
	217 Move X0, X19
	218 Call BaseField`1<Vector2>.get_visualInput, X0
	219 Compare X0, 0
	220 JumpIfEqual {939}
	221 Move X1, X31
	222 Call VisualElement.get_layout, X0
	223 Move X0, [X19+1088]
	224 Compare X0, 0
	225 JumpIfEqual {939}
	226 Move X1, X31
	227 Move V10, V2
	228 Call VisualElement.get_resolvedStyle, X0
	229 Compare X0, 0
	230 JumpIfEqual {939}
	231 Move X8, [X0]
	232 Move X1, [X25]
	233 Move X23, X0
	234 NotImplemented "Instruction LDRH not yet implemented."
	235 Compare X9, 0
	236 JumpIfEqual {243}
	237 Move X10, [X8+176]
	238 Add X10, X10, 8
	239 NotImplemented "Instruction LDUR not yet implemented."
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Subtract X9, X9, 1
	242 Add X10, X10, 16
	243 Move W2, 39
	244 Move X0, X23
	245 Call 0x1C5D788
	246 Move W9, [X10]
	247 Add W9, W9, 39
	248 Add X8, X8, W9
	249 Add X0, X8, 312
	250 Move X8, [X0]
	251 Move X1, [X0+8]
	252 Move X0, X23
	253 NotImplemented "Instruction BLR not yet implemented."
	254 Move X8, [X19]
	255 Move W24, W0
	256 Move X0, X19
	257 Move X9, [X8+2024]
	258 Move X1, [X8+2032]
	259 NotImplemented "Instruction BLR not yet implemented."
	260 Move X0, [X19+1088]
	261 Compare X0, 0
	262 JumpIfEqual {939}
	263 Move V12, [X19+1172]
	264 Move V13, [X19+1176]
	265 Move X1, X31
	266 Move V11, V0
	267 Call VisualElement.get_resolvedStyle, X0
	268 Compare X0, 0
	269 JumpIfEqual {939}
	270 Move X8, [X0]
	271 NotImplemented "Instruction FNEG not yet implemented."
	272 Subtract S1, S11, S12
	273 Subtract S2, S13, S12
	274 Subtract S11, S0, S9
	275 NotImplemented "Instruction FDIV not yet implemented."
	276 Add S1, S11, S10
	277 NotImplemented "Instruction SCVTF not yet implemented."
	278 NotImplemented "Instruction SCVTF not yet implemented."
	279 Subtract S1, S1, S2
	280 NotImplemented "Instruction LDRH not yet implemented."
	281 Move X1, [X25]
	282 Subtract S1, S1, S3
	283 Multiply S0, S1, S0
	284 Move X23, X0
	285 Add S8, S0, S3
	286 Compare X9, 0
	287 JumpIfEqual {294}
	288 Move X10, [X8+176]
	289 Add X10, X10, 8
	290 NotImplemented "Instruction LDUR not yet implemented."
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Subtract X9, X9, 1
	293 Add X10, X10, 16
	294 Move W2, 38
	295 Move X0, X23
	296 Call 0x1C5D788
	297 Move W9, [X10]
	298 Add W9, W9, 38
	299 Add X8, X8, W9
	300 Add X0, X8, 312
	301 Move X8, [X0]
	302 Move X1, [X0+8]
	303 Move X0, X23
	304 NotImplemented "Instruction BLR not yet implemented."
	305 NotImplemented "Instruction SCVTF not yet implemented."
	306 Subtract S8, S8, S0
	307 NotImplemented "Instruction FCVT not yet implemented."
	308 Add X0, X31, 56
	309 Call 0x3EB2C00
	310 NotImplemented "Instruction FCMP not yet implemented."
	311 Move D1, -0.5
	312 NotImplemented "Instruction FCMP not yet implemented."
	313 Move V0, [X31+56]
	314 Move S1, -1
	315 Move D1, 0.5
	316 NotImplemented "Instruction FCMP not yet implemented."
	317 Move V0, [X31+56]
	318 Move S1, 1
	319 NotImplemented "Instruction FCVTZS not yet implemented."
	320 NotImplemented "Instruction INVALID not yet implemented."
	321 Add S1, S0, S1
	322 And X31, X8, 1
	323 NotImplemented "Instruction FCSEL not yet implemented."
	324 Move S0, -0.5
	325 Add S0, S8, S0
	326 NotImplemented "Instruction FRINTP not yet implemented."
	327 Move S0, 0.5
	328 Add S0, S8, S0
	329 NotImplemented "Instruction FRINTM not yet implemented."
	330 Move X0, [X19+1088]
	331 Compare X0, 0
	332 JumpIfEqual {939}
	333 Move X1, X31
	334 Call VisualElement.get_resolvedStyle, X0
	335 Compare X0, 0
	336 JumpIfEqual {939}
	337 Move X8, [X0]
	338 Move X1, [X25]
	339 Move X22, X0
	340 NotImplemented "Instruction LDRH not yet implemented."
	341 Compare X9, 0
	342 JumpIfEqual {349}
	343 Move X10, [X8+176]
	344 Add X10, X10, 8
	345 NotImplemented "Instruction LDUR not yet implemented."
	346 NotImplemented "Instruction CMP not yet implemented."
	347 Subtract X9, X9, 1
	348 Add X10, X10, 16
	349 Move W2, 38
	350 Move X0, X22
	351 Call 0x1C5D788
	352 Move W9, [X10]
	353 Add W9, W9, 38
	354 Add X8, X8, W9
	355 Add X0, X8, 312
	356 Move X8, [X0]
	357 Move X1, [X0+8]
	358 Move X0, X22
	359 NotImplemented "Instruction BLR not yet implemented."
	360 Move X1, [X26]
	361 Move W22, W0
	362 Move X0, X19
	363 Call BaseField`1<Vector2>.get_visualInput, X0
	364 Compare X0, 0
	365 JumpIfEqual {939}
	366 Move X1, X31
	367 Call VisualElement.get_layout, X0
	368 Move X0, [X19+1088]
	369 Compare X0, 0
	370 JumpIfEqual {939}
	371 Move X1, X31
	372 Move V9, V2
	373 Call VisualElement.get_resolvedStyle, X0
	374 Compare X0, 0
	375 JumpIfEqual {939}
	376 Move X8, [X0]
	377 Move X1, [X25]
	378 Move X23, X0
	379 NotImplemented "Instruction LDRH not yet implemented."
	380 Compare X9, 0
	381 JumpIfEqual {388}
	382 Move X10, [X8+176]
	383 Add X10, X10, 8
	384 NotImplemented "Instruction LDUR not yet implemented."
	385 NotImplemented "Instruction CMP not yet implemented."
	386 Subtract X9, X9, 1
	387 Add X10, X10, 16
	388 Move W2, 39
	389 Move X0, X23
	390 Call 0x1C5D788
	391 Move W9, [X10]
	392 Add W9, W9, 39
	393 Add X8, X8, W9
	394 Add X0, X8, 312
	395 Move X8, [X0]
	396 Move X1, [X0+8]
	397 Move X0, X23
	398 NotImplemented "Instruction BLR not yet implemented."
	399 Move X8, [X19]
	400 Move W24, W0
	401 Move X0, X19
	402 Move X9, [X8+2024]
	403 Move X1, [X8+2032]
	404 NotImplemented "Instruction BLR not yet implemented."
	405 Move X0, [X19+1088]
	406 Compare X0, 0
	407 JumpIfEqual {939}
	408 Move V12, [X19+1172]
	409 Move V13, [X19+1176]
	410 Move X1, X31
	411 Move V10, V1
	412 Call VisualElement.get_resolvedStyle, X0
	413 Compare X0, 0
	414 JumpIfEqual {939}
	415 Move X8, [X0]
	416 Subtract S0, S10, S12
	417 Subtract S1, S13, S12
	418 NotImplemented "Instruction FDIV not yet implemented."
	419 Add S1, S11, S9
	420 NotImplemented "Instruction SCVTF not yet implemented."
	421 NotImplemented "Instruction SCVTF not yet implemented."
	422 Subtract S1, S1, S3
	423 NotImplemented "Instruction LDRH not yet implemented."
	424 Move X1, [X25]
	425 Subtract S1, S1, S2
	426 Multiply S0, S1, S0
	427 Move X23, X0
	428 Add S9, S0, S2
	429 Compare X9, 0
	430 JumpIfEqual {437}
	431 Move X10, [X8+176]
	432 Add X10, X10, 8
	433 NotImplemented "Instruction LDUR not yet implemented."
	434 NotImplemented "Instruction CMP not yet implemented."
	435 Subtract X9, X9, 1
	436 Add X10, X10, 16
	437 Move W2, 39
	438 Move X0, X23
	439 Call 0x1C5D788
	440 Move W9, [X10]
	441 Add W9, W9, 39
	442 Add X8, X8, W9
	443 Add X0, X8, 312
	444 Move X8, [X0]
	445 Move X1, [X0+8]
	446 Move X0, X23
	447 NotImplemented "Instruction BLR not yet implemented."
	448 NotImplemented "Instruction SCVTF not yet implemented."
	449 Add S9, S9, S0
	450 NotImplemented "Instruction FCVT not yet implemented."
	451 Add X0, X31, 56
	452 Call 0x3EB2C00
	453 NotImplemented "Instruction FCMP not yet implemented."
	454 Move D1, -0.5
	455 NotImplemented "Instruction FCMP not yet implemented."
	456 Move V0, [X31+56]
	457 Move S1, -1
	458 Move D1, 0.5
	459 NotImplemented "Instruction FCMP not yet implemented."
	460 Move V0, [X31+56]
	461 Move S1, 1
	462 NotImplemented "Instruction FCVTZS not yet implemented."
	463 NotImplemented "Instruction INVALID not yet implemented."
	464 Add S1, S0, S1
	465 And X31, X8, 1
	466 NotImplemented "Instruction FCSEL not yet implemented."
	467 Move S0, -0.5
	468 Add S0, S9, S0
	469 NotImplemented "Instruction FRINTP not yet implemented."
	470 Move S0, 0.5
	471 Add S0, S9, S0
	472 NotImplemented "Instruction FRINTM not yet implemented."
	473 Move X0, [X19+1088]
	474 Compare X0, 0
	475 JumpIfEqual {939}
	476 Move X1, X31
	477 Add W21, W21, W20
	478 Call VisualElement.get_style, X0
	479 NotImplemented "Instruction SCVTF not yet implemented."
	480 Subtract S1, S9, S8
	481 NotImplemented "Instruction FCMP not yet implemented."
	482 Move X20, X0
	483 NotImplemented "Instruction FCSEL not yet implemented."
	484 Move X0, X31
	485 Call StyleLength.op_Implicit, V0
	486 Compare X20, 0
	487 JumpIfEqual {939}
	488 Move X23, 0x3B0000
	489 Move X9, [X20]
	490 Move X23, [X23+296]
	491 Move X8, X1
	492 Move X21, X0
	493 NotImplemented "Instruction LDRH not yet implemented."
	494 Move X1, [X23]
	495 And X22, X8, 0
	496 Compare X10, 0
	497 JumpIfEqual {504}
	498 Move X8, [X9+176]
	499 Add X8, X8, 8
	500 NotImplemented "Instruction LDUR not yet implemented."
	501 NotImplemented "Instruction CMP not yet implemented."
	502 Subtract X10, X10, 1
	503 Add X8, X8, 16
	504 Move W2, 54
	505 Move X0, X20
	506 Call 0x1C5D788
	507 Move W8, [X8]
	508 Add W8, W8, 54
	509 Add X8, X9, W8
	510 Add X0, X8, 312
	511 Move X8, [X0]
	512 Move X3, [X0+8]
	513 Move X0, X20
	514 Move X1, X21
	515 Move X2, X22
	516 NotImplemented "Instruction BLR not yet implemented."
	517 Move X0, [X19+1088]
	518 Compare X0, 0
	519 JumpIfEqual {939}
	520 Move X1, X31
	521 Call VisualElement.get_style, X0
	522 Move X20, X0
	523 Move V0, V8
	524 Move X0, X31
	525 Call StyleLength.op_Implicit, V0
	526 Compare X20, 0
	527 JumpIfEqual {939}
	528 Move X9, [X20]
	529 Move X8, X1
	530 Move X1, [X23]
	531 Move X21, X0
	532 NotImplemented "Instruction LDRH not yet implemented."
	533 And X22, X8, 0
	534 Compare X10, 0
	535 JumpIfEqual {542}
	536 Move X8, [X9+176]
	537 Add X8, X8, 8
	538 NotImplemented "Instruction LDUR not yet implemented."
	539 NotImplemented "Instruction CMP not yet implemented."
	540 Subtract X10, X10, 1
	541 Add X8, X8, 16
	542 Move W2, 25
	543 Move X0, X20
	544 Call 0x1C5D788
	545 Move W8, [X8]
	546 Add W8, W8, 25
	547 Add X8, X9, W8
	548 Add X0, X8, 312
	549 Move X8, [X0]
	550 Move X3, [X0+8]
	551 Move X0, X20
	552 Move X1, X21
	553 Move X2, X22
	554 NotImplemented "Instruction BLR not yet implemented."
	555 Move X0, X19
	556 Call MinMaxSlider.UpdateDragThumbsRect, X0
	557 Move X0, [X19+1104]
	558 Compare X0, 0
	559 JumpIfEqual {939}
	560 Move X1, X31
	561 Call VisualElement.get_style, X0
	562 Move X8, [X19+1088]
	563 Compare X8, 0
	564 JumpIfEqual {939}
	565 Move X20, X0
	566 Move X0, X8
	567 Move X1, X31
	568 Call VisualElement.get_resolvedStyle, X0
	569 Compare X0, 0
	570 JumpIfEqual {939}
	571 Move X8, [X0]
	572 Move X1, [X25]
	573 Move X21, X0
	574 NotImplemented "Instruction LDRH not yet implemented."
	575 Compare X9, 0
	576 JumpIfEqual {583}
	577 Move X10, [X8+176]
	578 Add X10, X10, 8
	579 NotImplemented "Instruction LDUR not yet implemented."
	580 NotImplemented "Instruction CMP not yet implemented."
	581 Subtract X9, X9, 1
	582 Add X10, X10, 16
	583 Move W2, 44
	584 Move X0, X21
	585 Call 0x1C5D788
	586 Move W9, [X10]
	587 Add W9, W9, 44
	588 Add X8, X8, W9
	589 Add X0, X8, 312
	590 Move X8, [X0]
	591 Move X1, [X0+8]
	592 Move X0, X21
	593 NotImplemented "Instruction BLR not yet implemented."
	594 Move X0, [X19+1088]
	595 Compare X0, 0
	596 JumpIfEqual {939}
	597 Move X1, X31
	598 Move V8, V0
	599 Call VisualElement.get_resolvedStyle, X0
	600 Compare X0, 0
	601 JumpIfEqual {939}
	602 Move X8, [X0]
	603 Move X1, [X25]
	604 Move X21, X0
	605 NotImplemented "Instruction LDRH not yet implemented."
	606 Compare X9, 0
	607 JumpIfEqual {614}
	608 Move X10, [X8+176]
	609 Add X10, X10, 8
	610 NotImplemented "Instruction LDUR not yet implemented."
	611 NotImplemented "Instruction CMP not yet implemented."
	612 Subtract X9, X9, 1
	613 Add X10, X10, 16
	614 Move W2, 39
	615 Move X0, X21
	616 Call 0x1C5D788
	617 Move W9, [X10]
	618 Add W9, W9, 39
	619 Add X8, X8, W9
	620 Add X0, X8, 312
	621 Move X8, [X0]
	622 Move X1, [X0+8]
	623 Move X0, X21
	624 NotImplemented "Instruction BLR not yet implemented."
	625 NotImplemented "Instruction SCVTF not yet implemented."
	626 Subtract S0, S8, S0
	627 Move X0, X31
	628 Call StyleLength.op_Implicit, V0
	629 Compare X20, 0
	630 JumpIfEqual {939}
	631 Move X9, [X20]
	632 Move X8, X1
	633 Move X1, [X23]
	634 Move X21, X0
	635 NotImplemented "Instruction LDRH not yet implemented."
	636 And X22, X8, 0
	637 Compare X10, 0
	638 JumpIfEqual {645}
	639 Move X8, [X9+176]
	640 Add X8, X8, 8
	641 NotImplemented "Instruction LDUR not yet implemented."
	642 NotImplemented "Instruction CMP not yet implemented."
	643 Subtract X10, X10, 1
	644 Add X8, X8, 16
	645 Move W2, 25
	646 Move X0, X20
	647 Call 0x1C5D788
	648 Move W8, [X8]
	649 Add W8, W8, 25
	650 Add X8, X9, W8
	651 Add X0, X8, 312
	652 Move X8, [X0]
	653 Move X3, [X0+8]
	654 Move X0, X20
	655 Move X1, X21
	656 Move X2, X22
	657 NotImplemented "Instruction BLR not yet implemented."
	658 Move X0, [X19+1104]
	659 Compare X0, 0
	660 JumpIfEqual {939}
	661 Move X1, X31
	662 Call VisualElement.get_style, X0
	663 Move X20, X0
	664 Move S0, W31
	665 Move X0, X31
	666 Call StyleLength.op_Implicit, V0
	667 Compare X20, 0
	668 JumpIfEqual {939}
	669 Move X9, [X20]
	670 Move X8, X1
	671 Move X1, [X23]
	672 Move X21, X0
	673 NotImplemented "Instruction LDRH not yet implemented."
	674 And X22, X8, 0
	675 Compare X10, 0
	676 JumpIfEqual {683}
	677 Move X8, [X9+176]
	678 Add X8, X8, 8
	679 NotImplemented "Instruction LDUR not yet implemented."
	680 NotImplemented "Instruction CMP not yet implemented."
	681 Subtract X10, X10, 1
	682 Add X8, X8, 16
	683 Move W2, 45
	684 Move X0, X20
	685 Call 0x1C5D788
	686 Move W8, [X8]
	687 Add W8, W8, 45
	688 Add X8, X9, W8
	689 Add X0, X8, 312
	690 Move X8, [X0]
	691 Move X3, [X0+8]
	692 Move X0, X20
	693 Move X1, X21
	694 Move X2, X22
	695 NotImplemented "Instruction BLR not yet implemented."
	696 Move X0, [X19+1096]
	697 Compare X0, 0
	698 JumpIfEqual {939}
	699 Move X1, X31
	700 Call VisualElement.get_style, X0
	701 Move V0, [X19+1144]
	702 Move X20, X0
	703 Move X0, X31
	704 Call StyleLength.op_Implicit, V0
	705 Compare X20, 0
	706 JumpIfEqual {939}
	707 Move X9, [X20]
	708 Move X8, X1
	709 Move X1, [X23]
	710 Move X21, X0
	711 NotImplemented "Instruction LDRH not yet implemented."
	712 And X22, X8, 0
	713 Compare X10, 0
	714 JumpIfEqual {721}
	715 Move X8, [X9+176]
	716 Add X8, X8, 8
	717 NotImplemented "Instruction LDUR not yet implemented."
	718 NotImplemented "Instruction CMP not yet implemented."
	719 Subtract X10, X10, 1
	720 Add X8, X8, 16
	721 Move W2, 54
	722 Move X0, X20
	723 Call 0x1C5D788
	724 Move W8, [X8]
	725 Add W8, W8, 54
	726 Add X8, X9, W8
	727 Add X0, X8, 312
	728 Move X8, [X0]
	729 Move X3, [X0+8]
	730 Move X0, X20
	731 Move X1, X21
	732 Move X2, X22
	733 NotImplemented "Instruction BLR not yet implemented."
	734 Move X0, [X19+1096]
	735 Compare X0, 0
	736 JumpIfEqual {939}
	737 Move X1, X31
	738 Call VisualElement.get_style, X0
	739 Move V0, [X19+1148]
	740 Move X20, X0
	741 Move X0, X31
	742 Call StyleLength.op_Implicit, V0
	743 Compare X20, 0
	744 JumpIfEqual {939}
	745 Move X9, [X20]
	746 Move X8, X1
	747 Move X1, [X23]
	748 Move X21, X0
	749 NotImplemented "Instruction LDRH not yet implemented."
	750 And X22, X8, 0
	751 Compare X10, 0
	752 JumpIfEqual {759}
	753 Move X8, [X9+176]
	754 Add X8, X8, 8
	755 NotImplemented "Instruction LDUR not yet implemented."
	756 NotImplemented "Instruction CMP not yet implemented."
	757 Subtract X10, X10, 1
	758 Add X8, X8, 16
	759 Move W2, 24
	760 Move X0, X20
	761 Call 0x1C5D788
	762 Move W8, [X8]
	763 Add W8, W8, 24
	764 Add X8, X9, W8
	765 Add X0, X8, 312
	766 Move X8, [X0]
	767 Move X3, [X0+8]
	768 Move X0, X20
	769 Move X1, X21
	770 Move X2, X22
	771 NotImplemented "Instruction BLR not yet implemented."
	772 Move X0, [X19+1096]
	773 Compare X0, 0
	774 JumpIfEqual {939}
	775 Move X1, X31
	776 Call VisualElement.get_style, X0
	777 Move X20, X0
	778 Move S0, W31
	779 Move X0, X31
	780 Call StyleLength.op_Implicit, V0
	781 Compare X20, 0
	782 JumpIfEqual {939}
	783 Move X9, [X20]
	784 Move X8, X1
	785 Move X1, [X23]
	786 Move X21, X0
	787 NotImplemented "Instruction LDRH not yet implemented."
	788 And X22, X8, 0
	789 Compare X10, 0
	790 JumpIfEqual {797}
	791 Move X8, [X9+176]
	792 Add X8, X8, 8
	793 NotImplemented "Instruction LDUR not yet implemented."
	794 NotImplemented "Instruction CMP not yet implemented."
	795 Subtract X10, X10, 1
	796 Add X8, X8, 16
	797 Move W2, 25
	798 Move X0, X20
	799 Call 0x1C5D788
	800 Move W8, [X8]
	801 Add W8, W8, 25
	802 Add X8, X9, W8
	803 Add X0, X8, 312
	804 Move X8, [X0]
	805 Move X3, [X0+8]
	806 Move X0, X20
	807 Move X1, X21
	808 Move X2, X22
	809 NotImplemented "Instruction BLR not yet implemented."
	810 Move X0, [X19+1096]
	811 Compare X0, 0
	812 JumpIfEqual {939}
	813 Move X1, X31
	814 Call VisualElement.get_style, X0
	815 Move X20, X0
	816 Move S0, W31
	817 Move X0, X31
	818 Call StyleLength.op_Implicit, V0
	819 Compare X20, 0
	820 JumpIfEqual {939}
	821 Move X9, [X20]
	822 Move X8, X1
	823 Move X1, [X23]
	824 Move X21, X0
	825 NotImplemented "Instruction LDRH not yet implemented."
	826 And X22, X8, 0
	827 Compare X10, 0
	828 JumpIfEqual {835}
	829 Move X8, [X9+176]
	830 Add X8, X8, 8
	831 NotImplemented "Instruction LDUR not yet implemented."
	832 NotImplemented "Instruction CMP not yet implemented."
	833 Subtract X10, X10, 1
	834 Add X8, X8, 16
	835 Move W2, 45
	836 Move X0, X20
	837 Call 0x1C5D788
	838 Move W8, [X8]
	839 Add W8, W8, 45
	840 Add X8, X9, W8
	841 Add X0, X8, 312
	842 Move X8, [X0]
	843 Move X3, [X0+8]
	844 Move X0, X20
	845 Move X1, X21
	846 Move X2, X22
	847 NotImplemented "Instruction BLR not yet implemented."
	848 Move X0, [X19+1104]
	849 Compare X0, 0
	850 JumpIfEqual {939}
	851 Move X1, X31
	852 Call VisualElement.get_style, X0
	853 Move V0, [X19+1160]
	854 Move X20, X0
	855 Move X0, X31
	856 Call StyleLength.op_Implicit, V0
	857 Compare X20, 0
	858 JumpIfEqual {939}
	859 Move X9, [X20]
	860 Move X8, X1
	861 Move X1, [X23]
	862 Move X21, X0
	863 NotImplemented "Instruction LDRH not yet implemented."
	864 And X22, X8, 0
	865 Compare X10, 0
	866 JumpIfEqual {873}
	867 Move X8, [X9+176]
	868 Add X8, X8, 8
	869 NotImplemented "Instruction LDUR not yet implemented."
	870 NotImplemented "Instruction CMP not yet implemented."
	871 Subtract X10, X10, 1
	872 Add X8, X8, 16
	873 Move W2, 54
	874 Move X0, X20
	875 Call 0x1C5D788
	876 Move W8, [X8]
	877 Add W8, W8, 54
	878 Add X8, X9, W8
	879 Add X0, X8, 312
	880 Move X8, [X0]
	881 Move X3, [X0+8]
	882 Move X0, X20
	883 Move X1, X21
	884 Move X2, X22
	885 NotImplemented "Instruction BLR not yet implemented."
	886 Move X0, [X19+1104]
	887 Compare X0, 0
	888 JumpIfEqual {939}
	889 Move X1, X31
	890 Call VisualElement.get_style, X0
	891 Move V0, [X19+1164]
	892 Move X19, X0
	893 Move X0, X31
	894 Call StyleLength.op_Implicit, V0
	895 Compare X19, 0
	896 JumpIfEqual {939}
	897 Move X9, [X19]
	898 Move X8, X1
	899 Move X1, [X23]
	900 Move X20, X0
	901 NotImplemented "Instruction LDRH not yet implemented."
	902 And X21, X8, 0
	903 Compare X10, 0
	904 JumpIfEqual {911}
	905 Move X8, [X9+176]
	906 Add X8, X8, 8
	907 NotImplemented "Instruction LDUR not yet implemented."
	908 NotImplemented "Instruction CMP not yet implemented."
	909 Subtract X10, X10, 1
	910 Add X8, X8, 16
	911 Move W2, 24
	912 Move X0, X19
	913 Call 0x1C5D788
	914 Move W8, [X8]
	915 Add W8, W8, 24
	916 Add X8, X9, W8
	917 Add X0, X8, 312
	918 Move X4, [X0]
	919 Move X3, [X0+8]
	920 Move X0, X19
	921 Move X1, X20
	922 Move X2, X21
	923 Move X20, [X31+112]
	924 Move X19, [X31+120]
	925 Move X22, [X31+96]
	926 Move X21, [X31+104]
	927 Move X24, [X31+80]
	928 Move X23, [X31+88]
	929 Move X26, [X31+64]
	930 Move X25, [X31+72]
	931 Move X30, [X31+48]
	932 Move D9, [X31+32]
	933 Move D8, [X31+40]
	934 Move D11, [X31+16]
	935 Move D10, [X31+24]
	936 Move D13, [X31+128]
	937 Move D12, [X31+136]
	938 CallNoReturn X4
	939 Call 0x1C17F20

Method: System.Void UpdateDragThumbsRect()

Disassembly:
	0x03D6EE14 ADRP X0, 0x3AF000
	0x03D6EE18 LDR X0, [X0 + 0x770]
	0x03D6EE1C BL 0x1C16CF4
	0x03D6EE20 ADRP X0, 0x3AF000
	0x03D6EE24 LDR X0, [X0 + 0x778]
	0x03D6EE28 BL 0x1C16CF4
	0x03D6EE2C ADRP X0, 0x3AF000
	0x03D6EE30 LDR X0, [X0 + 0x780]
	0x03D6EE34 BL 0x1C16CF4
	0x03D6EE38 ADRP X0, 0x3AF000
	0x03D6EE3C LDR X0, [X0 + 0x788]
	0x03D6EE40 BL 0x1C16CF4
	0x03D6EE44 MOVZ W8, 0x1
	0x03D6EE48 STRB W8, [X23 + 0xD15]
	0x03D6EE4C LDR X1, [X22]
	0x03D6EE50 MOV X0, X19
	0x03D6EE54 BL 0x28A804C
	0x03D6EE58 LDR X8, [X20]
	0x03D6EE5C MOV X20, X0
	0x03D6EE60 MOV X0, X8
	0x03D6EE64 BL 0x1C16F10
	0x03D6EE68 LDR X2, [X21]
	0x03D6EE6C MOV X1, X19
	0x03D6EE70 MOV X3, X31
	0x03D6EE74 MOV X21, X0
	0x03D6EE78 BL 0x2D0E824
	0x03D6EE7C CBZ X20, 0x3D6EF0C
	0x03D6EE80 ADRP X8, 0x3AF000
	0x03D6EE84 LDR X8, [X8 + 0x770]
	0x03D6EE88 ADRP X23, 0x3AF000
	0x03D6EE8C ADRP X24, 0x3F8000
	0x03D6EE90 MOVZ W2, 0x1
	0x03D6EE94 LDR X3, [X8]
	0x03D6EE98 LDR X23, [X23 + 0x788]
	0x03D6EE9C LDR X24, [X24 + 0xD08]
	0x03D6EEA0 MOV X0, X20
	0x03D6EEA4 MOV X1, X21
	0x03D6EEA8 BL 0x21A1534
	0x03D6EEAC LDR X1, [X22]
	0x03D6EEB0 MOV X0, X19
	0x03D6EEB4 BL 0x28A804C
	0x03D6EEB8 LDR X8, [X23]
	0x03D6EEBC MOV X20, X0
	0x03D6EEC0 MOV X0, X8
	0x03D6EEC4 BL 0x1C16F10
	0x03D6EEC8 LDR X2, [X24]
	0x03D6EECC MOV X1, X19
	0x03D6EED0 MOV X3, X31
	0x03D6EED4 MOV X21, X0
	0x03D6EED8 BL 0x2D0E824
	0x03D6EEDC CBZ X20, 0x3D6EF0C
	0x03D6EEE0 ADRP X8, 0x3AF000
	0x03D6EEE4 LDR X8, [X8 + 0x778]
	0x03D6EEE8 MOV X0, X20
	0x03D6EEEC MOV X1, X21
	0x03D6EEF0 LDP X20, X19, [X31 + 0x30]
	0x03D6EEF4 LDR X3, [X8]
	0x03D6EEF8 LDP X22, X21, [X31 + 0x20]
	0x03D6EEFC LDP X24, X23, [X31 + 0x10]
	0x03D6EF00 MOV W2, W31
	0x03D6EF04 LDR X30, [X31], #0x40
	0x03D6EF08 B 0x21A1534
	0x03D6EF0C BL 0x1C16F20
	0x03D6EF10 STR X30, [X31 - 0x40]!
	0x03D6EF14 STP X24, X23, [X31 + 0x10]
	0x03D6EF18 STP X22, X21, [X31 + 0x20]
	0x03D6EF1C STP X20, X19, [X31 + 0x30]
	0x03D6EF20 ADRP X23, 0x679000
	0x03D6EF24 ADRP X22, 0x3F5000
	0x03D6EF28 ADRP X20, 0x3AF000
	0x03D6EF2C ADRP X21, 0x3F8000
	0x03D6EF30 LDRB W8, [X23 + 0xD16]
	0x03D6EF34 LDR X22, [X22 + 0x5F8]
	0x03D6EF38 LDR X20, [X20 + 0x780]
	0x03D6EF3C LDR X21, [X21 + 0xD00]
	0x03D6EF40 MOV X19, X0
	0x03D6EF44 TBNZ X8, 0x0, 0x3D6EFA4
	0x03D6EF48 ADRP X0, 0x3F8000
	0x03D6EF4C LDR X0, [X0 + 0xD08]
	0x03D6EF50 BL 0x1C16CF4
	0x03D6EF54 ADRP X0, 0x3F8000
	0x03D6EF58 LDR X0, [X0 + 0xD00]
	0x03D6EF5C BL 0x1C16CF4
	0x03D6EF60 ADRP X0, 0x3F5000
	0x03D6EF64 LDR X0, [X0 + 0x5F8]
	0x03D6EF68 BL 0x1C16CF4
	0x03D6EF6C ADRP X0, 0x3AF000
	0x03D6EF70 LDR X0, [X0 + 0x790]
	0x03D6EF74 BL 0x1C16CF4
	0x03D6EF78 ADRP X0, 0x3AF000
	0x03D6EF7C LDR X0, [X0 + 0x798]
	0x03D6EF80 BL 0x1C16CF4
	0x03D6EF84 ADRP X0, 0x3AF000
	0x03D6EF88 LDR X0, [X0 + 0x780]
	0x03D6EF8C BL 0x1C16CF4
	0x03D6EF90 ADRP X0, 0x3AF000
	0x03D6EF94 LDR X0, [X0 + 0x788]
	0x03D6EF98 BL 0x1C16CF4
	0x03D6EF9C MOVZ W8, 0x1
	0x03D6EFA0 STRB W8, [X23 + 0xD16]
	0x03D6EFA4 LDR X1, [X22]
	0x03D6EFA8 MOV X0, X19
	0x03D6EFAC BL 0x28A804C
	0x03D6EFB0 LDR X8, [X20]
	0x03D6EFB4 MOV X20, X0
	0x03D6EFB8 MOV X0, X8
	0x03D6EFBC BL 0x1C16F10
	0x03D6EFC0 LDR X2, [X21]
	0x03D6EFC4 MOV X1, X19
	0x03D6EFC8 MOV X3, X31
	0x03D6EFCC MOV X21, X0
	0x03D6EFD0 BL 0x2D0E824
	0x03D6EFD4 CBZ X20, 0x3D6F064
	0x03D6EFD8 ADRP X8, 0x3AF000
	0x03D6EFDC LDR X8, [X8 + 0x790]
	0x03D6EFE0 ADRP X23, 0x3AF000
	0x03D6EFE4 ADRP X24, 0x3F8000
	0x03D6EFE8 MOVZ W2, 0x1
	0x03D6EFEC LDR X3, [X8]
	0x03D6EFF0 LDR X23, [X23 + 0x788]
	0x03D6EFF4 LDR X24, [X24 + 0xD08]
	0x03D6EFF8 MOV X0, X20
	0x03D6EFFC MOV X1, X21
	0x03D6F000 BL 0x21A18B4
	0x03D6F004 LDR X1, [X22]
	0x03D6F008 MOV X0, X19
	0x03D6F00C BL 0x28A804C
	0x03D6F010 LDR X8, [X23]
	0x03D6F014 MOV X20, X0
	0x03D6F018 MOV X0, X8
	0x03D6F01C BL 0x1C16F10
	0x03D6F020 LDR X2, [X24]
	0x03D6F024 MOV X1, X19
	0x03D6F028 MOV X3, X31
	0x03D6F02C MOV X21, X0
	0x03D6F030 BL 0x2D0E824
	0x03D6F034 CBZ X20, 0x3D6F064
	0x03D6F038 ADRP X8, 0x3AE000
	0x03D6F03C LDR X8, [X8 + 0x798]
	0x03D6F040 MOV X0, X20
	0x03D6F044 MOV X1, X21
	0x03D6F048 LDP X20, X19, [X31 + 0x30]
	0x03D6F04C LDR X3, [X8]
	0x03D6F050 LDP X22, X21, [X31 + 0x20]
	0x03D6F054 LDP X24, X23, [X31 + 0x10]
	0x03D6F058 MOV W2, W31
	0x03D6F05C LDR X30, [X31], #0x40
	0x03D6F060 B 0x21A18B4
	0x03D6F064 BL 0x1C16F20
	0x03D6F068 STP X30, X27, [X31 - 0x50]!
	0x03D6F06C STP X26, X25, [X31 + 0x10]
	0x03D6F070 STP X24, X23, [X31 + 0x20]
	0x03D6F074 STP X22, X21, [X31 + 0x30]
	0x03D6F078 STP X20, X19, [X31 + 0x40]
	0x03D6F07C ADRP X27, 0x678000
	0x03D6F080 ADRP X26, 0x3F7000
	0x03D6F084 ADRP X19, 0x3F7000
	0x03D6F088 ADRP X25, 0x3AD000
	0x03D6F08C ADRP X24, 0x3AD000
	0x03D6F090 ADRP X23, 0x3AF000
	0x03D6F094 ADRP X22, 0x3AF000
	0x03D6F098 ADRP X21, 0x3F7000
	0x03D6F09C ADRP X20, 0x3F7000
	0x03D6F0A0 LDR X26, [X26 + 0xD10]
	0x03D6F0A4 LDR X19, [X19 + 0xCC8]
	0x03D6F0A8 LDR X25, [X25 + 0xEB8]
	0x03D6F0AC LDRB W8, [X27 + 0xD17]
	0x03D6F0B0 LDR X24, [X24 + 0xEC0]
	0x03D6F0B4 LDR X23, [X23 + 0x1C8]
	0x03D6F0B8 LDR X22, [X22 + 0x1B8]
	0x03D6F0BC LDR X21, [X21 + 0xD18]
	0x03D6F0C0 LDR X20, [X20 + 0xD20]
	0x03D6F0C4 TBNZ X8, 0x0, 0x3D6F130
	0x03D6F0C8 ADRP X0, 0x3F7000
	0x03D6F0CC LDR X0, [X0 + 0xCC8]
	0x03D6F0D0 BL 0x1C16CF4
	0x03D6F0D4 ADRP X0, 0x3AF000
	0x03D6F0D8 LDR X0, [X0 + 0x1B8]
	0x03D6F0DC BL 0x1C16CF4
	0x03D6F0E0 ADRP X0, 0x3AF000
	0x03D6F0E4 LDR X0, [X0 + 0x1C8]
	0x03D6F0E8 BL 0x1C16CF4
	0x03D6F0EC ADRP X0, 0x3F7000
	0x03D6F0F0 LDR X0, [X0 + 0xD10]
	0x03D6F0F4 BL 0x1C16CF4
	0x03D6F0F8 ADRP X0, 0x3F7000
	0x03D6F0FC LDR X0, [X0 + 0xD18]
	0x03D6F100 BL 0x1C16CF4
	0x03D6F104 ADRP X0, 0x3AD000
	0x03D6F108 LDR X0, [X0 + 0xEB8]
	0x03D6F10C BL 0x1C16CF4
	0x03D6F110 ADRP X0, 0x3F7000
	0x03D6F114 LDR X0, [X0 + 0xD20]
	0x03D6F118 BL 0x1C16CF4
	0x03D6F11C ADRP X0, 0x3AD000
	0x03D6F120 LDR X0, [X0 + 0xEC0]
	0x03D6F124 BL 0x1C16CF4
	0x03D6F128 MOVZ W8, 0x1
	0x03D6F12C STRB W8, [X27 + 0xD17]
	0x03D6F130 LDR X8, [X19]
	0x03D6F134 LDR X9, [X26]
	0x03D6F138 MOV X2, X31
	0x03D6F13C LDR X8, [X8 + 0xB8]
	0x03D6F140 STR X9, [X8]
	0x03D6F144 LDR X8, [X19]
	0x03D6F148 LDR X1, [X25]
	0x03D6F14C LDR X8, [X8 + 0xB8]
	0x03D6F150 LDR X0, [X8]
	0x03D6F154 BL 0x321B938
	0x03D6F158 LDR X8, [X19]
	0x03D6F15C MOV X2, X31
	0x03D6F160 LDR X8, [X8 + 0xB8]
	0x03D6F164 STR X0, [X8 + 0x8]
	0x03D6F168 LDR X0, [X8]
	0x03D6F16C LDR X1, [X24]
	0x03D6F170 BL 0x321B938
	0x03D6F174 LDR X8, [X19]
	0x03D6F178 MOV X2, X31
	0x03D6F17C LDR X8, [X8 + 0xB8]
	0x03D6F180 STR X0, [X8 + 0x10]
	0x03D6F184 LDR X0, [X8]
	0x03D6F188 LDR X1, [X23]
	0x03D6F18C BL 0x321B938
	0x03D6F190 LDR X8, [X19]
	0x03D6F194 MOV X2, X31
	0x03D6F198 LDR X8, [X8 + 0xB8]
	0x03D6F19C STR X0, [X8 + 0x18]
	0x03D6F1A0 LDR X0, [X8]
	0x03D6F1A4 LDR X1, [X22]
	0x03D6F1A8 BL 0x321B938
	0x03D6F1AC LDR X8, [X19]
	0x03D6F1B0 MOV X2, X31
	0x03D6F1B4 LDR X8, [X8 + 0xB8]
	0x03D6F1B8 STR X0, [X8 + 0x20]
	0x03D6F1BC LDR X0, [X8]
	0x03D6F1C0 LDR X1, [X21]
	0x03D6F1C4 BL 0x321B938
	0x03D6F1C8 LDR X8, [X19]
	0x03D6F1CC MOV X2, X31
	0x03D6F1D0 LDR X8, [X8 + 0xB8]
	0x03D6F1D4 STR X0, [X8 + 0x28]
	0x03D6F1D8 LDR X0, [X8]
	0x03D6F1DC LDR X1, [X20]
	0x03D6F1E0 BL 0x321B938
	0x03D6F1E4 LDR X8, [X19]
	0x03D6F1E8 LDP X20, X19, [X31 + 0x40]
	0x03D6F1EC LDP X22, X21, [X31 + 0x30]
	0x03D6F1F0 LDP X24, X23, [X31 + 0x20]
	0x03D6F1F4 LDR X8, [X8 + 0xB8]
	0x03D6F1F8 LDP X26, X25, [X31 + 0x10]
	0x03D6F1FC STR X0, [X8 + 0x30]
	0x03D6F200 LDP X30, X27, [X31], #0x50
	0x03D6F204 RET
	0x03D6F208 STP X30, X21, [X31 - 0x20]!
	0x03D6F20C STP X20, X19, [X31 + 0x10]
	0x03D6F210 ADRP X20, 0x678000
	0x03D6F214 ADRP X21, 0x3F7000
	0x03D6F218 LDRB W8, [X20 + 0xD18]
	0x03D6F21C LDR X21, [X21 + 0xD28]
	0x03D6F220 MOV X19, X0
	0x03D6F224 TBNZ X8, 0x0, 0x3D6F23C
	0x03D6F228 ADRP X0, 0x3F7000
	0x03D6F22C LDR X0, [X0 + 0xD28]
	0x03D6F230 BL 0x1C16CF4
	0x03D6F234 MOVZ W8, 0x1
	0x03D6F238 STRB W8, [X20 + 0xD18]
	0x03D6F23C LDR X1, [X21]
	0x03D6F240 MOV X0, X19
	0x03D6F244 LDP X20, X19, [X31 + 0x10]
	0x03D6F248 LDP X30, X21, [X31], #0x20
	0x03D6F24C B 0x2736468
	0x03D6F250 STP X30, X21, [X31 - 0x20]!
	0x03D6F254 STP X20, X19, [X31 + 0x10]
	0x03D6F258 ADRP X20, 0x678000
	0x03D6F25C ADRP X21, 0x3F4000
	0x03D6F260 LDRB W8, [X20 + 0xD19]
	0x03D6F264 LDR X21, [X21 + 0x270]
	0x03D6F268 MOV X19, X0
	0x03D6F26C TBNZ X8, 0x0, 0x3D6F2D8
	0x03D6F270 ADRP X0, 0x3F7000
	0x03D6F274 LDR X0, [X0 + 0xD30]
	0x03D6F278 BL 0x1C16CF4
	0x03D6F27C ADRP X0, 0x3AE000
	0x03D6F280 LDR X0, [X0 + 0xC60]
	0x03D6F284 BL 0x1C16CF4
	0x03D6F288 ADRP X0, 0x3F4000
	0x03D6F28C LDR X0, [X0 + 0x270]
	0x03D6F290 BL 0x1C16CF4
	0x03D6F294 ADRP X0, 0x3F4000
	0x03D6F298 LDR X0, [X0 + 0x620]
	0x03D6F29C BL 0x1C16CF4
	0x03D6F2A0 ADRP X0, 0x3F7000
	0x03D6F2A4 LDR X0, [X0 + 0xD38]
	0x03D6F2A8 BL 0x1C16CF4
	0x03D6F2AC ADRP X0, 0x3F7000
	0x03D6F2B0 LDR X0, [X0 + 0xD40]
	0x03D6F2B4 BL 0x1C16CF4
	0x03D6F2B8 ADRP X0, 0x3F7000
	0x03D6F2BC LDR X0, [X0 + 0xD48]
	0x03D6F2C0 BL 0x1C16CF4
	0x03D6F2C4 ADRP X0, 0x3F7000
	0x03D6F2C8 LDR X0, [X0 + 0xD50]
	0x03D6F2CC BL 0x1C16CF4
	0x03D6F2D0 MOVZ W8, 0x1
	0x03D6F2D4 STRB W8, [X20 + 0xD19]
	0x03D6F2D8 LDR X0, [X21]
	0x03D6F2DC BL 0x1C16F10
	0x03D6F2E0 MOV X1, X31
	0x03D6F2E4 MOV X20, X0
	0x03D6F2E8 BL 0x3E1B6CC
	0x03D6F2EC CBZ X20, 0x3D6F3D4
	0x03D6F2F0 ADRP X8, 0x3F7000
	0x03D6F2F4 LDR X8, [X8 + 0xD48]
	0x03D6F2F8 LDR X8, [X8]
	0x03D6F2FC STR W31, [X20 + 0x40]
	0x03D6F300 STR X8, [X20 + 0x10]
	0x03D6F304 STR X20, [X19 + 0x80]
	0x03D6F308 LDR X0, [X21]
	0x03D6F30C BL 0x1C16F10
	0x03D6F310 MOV X1, X31
	0x03D6F314 MOV X20, X0
	0x03D6F318 BL 0x3E1B6CC
	0x03D6F31C CBZ X20, 0x3D6F3D4
	0x03D6F320 ADRP X8, 0x3F7000
	0x03D6F324 LDR X8, [X8 + 0xD50]
	0x03D6F328 MOVZ W9, 0x41200000
	0x03D6F32C LDR X8, [X8]
	0x03D6F330 STR W9, [X20 + 0x40]
	0x03D6F334 STR X8, [X20 + 0x10]
	0x03D6F338 STR X20, [X19 + 0x88]
	0x03D6F33C LDR X0, [X21]
	0x03D6F340 BL 0x1C16F10
	0x03D6F344 MOV X1, X31
	0x03D6F348 MOV X20, X0
	0x03D6F34C BL 0x3E1B6CC
	0x03D6F350 CBZ X20, 0x3D6F3D4
	0x03D6F354 ADRP X8, 0x3F7000
	0x03D6F358 LDR X8, [X8 + 0xD40]
	0x03D6F35C MOVN W9, 0x800000
	0x03D6F360 LDR X8, [X8]
	0x03D6F364 STR W9, [X20 + 0x40]
	0x03D6F368 STR X8, [X20 + 0x10]
	0x03D6F36C STR X20, [X19 + 0x90]
	0x03D6F370 LDR X0, [X21]
	0x03D6F374 BL 0x1C16F10
	0x03D6F378 MOV X1, X31
	0x03D6F37C MOV X20, X0
	0x03D6F380 BL 0x3E1B6CC
	0x03D6F384 CBZ X20, 0x3D6F3D4
	0x03D6F388 ADRP X8, 0x3F7000
	0x03D6F38C LDR X8, [X8 + 0xD38]
	0x03D6F390 ADRP X9, 0x3F4000
	0x03D6F394 MOVN W10, 0x80800000
	0x03D6F398 MOV X0, X19
	0x03D6F39C LDR X8, [X8]
	0x03D6F3A0 LDR X9, [X9 + 0x620]
	0x03D6F3A4 STR W10, [X20 + 0x40]
	0x03D6F3A8 STR X8, [X20 + 0x10]
	0x03D6F3AC STR X20, [X19 + 0x98]
	0x03D6F3B0 LDR X1, [X9]
	0x03D6F3B4 BL 0x273BC04
	0x03D6F3B8 LDR X8, [X19 + 0x28]
	0x03D6F3BC CBZ X8, 0x3D6F3D4
	0x03D6F3C0 LDP X20, X19, [X31 + 0x10]
	0x03D6F3C4 MOVZ W9, 0x1
	0x03D6F3C8 STR W9, [X8 + 0x40]
	0x03D6F3CC LDP X30, X21, [X31], #0x20
	0x03D6F3D0 RET
	0x03D6F3D4 BL 0x1C16F20
	0x03D6F3D8 SUB X31, X31, 0x110
	0x03D6F3DC STR D8, [X31 + 0xC0]
	0x03D6F3E0 STP X29, X30, [X31 + 0xD0]
	0x03D6F3E4 STP X24, X23, [X31 + 0xE0]
	0x03D6F3E8 STP X22, X21, [X31 + 0xF0]
	0x03D6F3EC STP X20, X19, [X31 + 0x100]
	0x03D6F3F0 ADRP X24, 0x678000
	0x03D6F3F4 ADRP X23, 0x3F4000
	0x03D6F3F8 LDRB W8, [X24 + 0xD1A]
	0x03D6F3FC LDR X23, [X23 + 0x618]
	0x03D6F400 MOV X21, X3
	0x03D6F404 MOV X20, X2
	0x03D6F408 MOV X19, X1
	0x03D6F40C MOV X22, X0
	0x03D6F410 TBNZ X8, 0x0, 0x3D6F434
	0x03D6F414 ADRP X0, 0x3F7000
	0x03D6F418 LDR X0, [X0 + 0xCC8]
	0x03D6F41C BL 0x1C16CF4
	0x03D6F420 ADRP X0, 0x3F4000
	0x03D6F424 LDR X0, [X0 + 0x618]
	0x03D6F428 BL 0x1C16CF4
	0x03D6F42C MOVZ W8, 0x1
	0x03D6F430 STRB W8, [X24 + 0xD1A]
	0x03D6F434 LDP V1, V0, [X21]
	0x03D6F438 LDR X4, [X23]
	0x03D6F43C ADD X3, X31, 0xA0
	0x03D6F440 MOV X0, X22
	0x03D6F444 MOV X1, X19
	0x03D6F448 MOV X2, X20
	0x03D6F44C STP V1, V0, [X31 + 0x80]
	0x03D6F450 STP V1, V0, [X31 + 0xA0]
	0x03D6F454 BL 0x273BCC0
	0x03D6F458 CBZ X19, 0x3D6F490
	0x03D6F45C ADRP X9, 0x3F7000
	0x03D6F460 LDR X9, [X9 + 0xCC8]
	0x03D6F464 LDR X8, [X19]
	0x03D6F468 LDR X1, [X9]
	0x03D6F46C LDRB W10, [X8 + 0x130]
	0x03D6F470 LDRB W9, [X1 + 0x130]
	0x03D6F474 CMP W10, W9
	0x03D6F478 B.CC 0x3D6F5A4
	0x03D6F47C LDR X8, [X8 + 0xC8]
	0x03D6F480 ADD X8, X8, X9, 0x3, LSL
	0x03D6F484 LDUR X8, [X8 - 0x8]
	0x03D6F488 CMP X8, X1
	0x03D6F48C B.NE 0x3D6F5A4
	0x03D6F490 LDP V0, V1, [X21]
	0x03D6F494 LDR X0, [X22 + 0x90]
	0x03D6F498 STP V0, V1, [X31 + 0x60]

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x67A000
	015 Move W8, [X20+3344]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x3AF000
	022 Move X0, [X0+288]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3344], W8
	026 Move X0, [X19+1088]
	027 Compare X0, 0
	028 JumpIfEqual {447}
	029 Move X1, X31
	030 Call VisualElement.get_resolvedStyle, X0
	031 Compare X0, 0
	032 JumpIfEqual {447}
	033 Move X22, 0x3AF000
	034 Move X8, [X0]
	035 Move X22, [X22+288]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Move X1, [X22]
	039 Compare X9, 0
	040 JumpIfEqual {47}
	041 Move X10, [X8+176]
	042 Add X10, X10, 8
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Subtract X9, X9, 1
	046 Add X10, X10, 16
	047 Move W2, 20
	048 Move X0, X20
	049 Call 0x1C5D788
	050 Move W9, [X10]
	051 Add W9, W9, 20
	052 Add X8, X8, W9
	053 Add X0, X8, 312
	054 Move X8, [X0]
	055 Move X1, [X0+8]
	056 Move X0, X20
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X0, [X19+1088]
	059 Compare X0, 0
	060 JumpIfEqual {447}
	061 Move X1, X31
	062 Move V10, V0
	063 Call VisualElement.get_resolvedStyle, X0
	064 Compare X0, 0
	065 JumpIfEqual {447}
	066 Move X8, [X0]
	067 Move X1, [X22]
	068 Move X20, X0
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 Compare X9, 0
	071 JumpIfEqual {78}
	072 Move X10, [X8+176]
	073 Add X10, X10, 8
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Subtract X9, X9, 1
	077 Add X10, X10, 16
	078 Move W2, 20
	079 Move X0, X20
	080 Call 0x1C5D788
	081 Move W9, [X10]
	082 Add W9, W9, 20
	083 Add X8, X8, W9
	084 Add X0, X8, 312
	085 Move X8, [X0]
	086 Move X1, [X0+8]
	087 Move X0, X20
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move X0, [X19+1088]
	090 Compare X0, 0
	091 JumpIfEqual {447}
	092 Move X1, X31
	093 Move V15, V0
	094 Call VisualElement.get_resolvedStyle, X0
	095 Compare X0, 0
	096 JumpIfEqual {447}
	097 Move X8, [X0]
	098 Move X1, [X22]
	099 Move X20, X0
	100 NotImplemented "Instruction LDRH not yet implemented."
	101 Compare X9, 0
	102 JumpIfEqual {109}
	103 Move X10, [X8+176]
	104 Add X10, X10, 8
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Subtract X9, X9, 1
	108 Add X10, X10, 16
	109 Move W2, 44
	110 Move X0, X20
	111 Call 0x1C5D788
	112 Move W9, [X10]
	113 Add W9, W9, 44
	114 Add X8, X8, W9
	115 Add X0, X8, 312
	116 Move X8, [X0]
	117 Move X1, [X0+8]
	118 Move X0, X20
	119 NotImplemented "Instruction BLR not yet implemented."
	120 Move X0, [X19+1088]
	121 Compare X0, 0
	122 JumpIfEqual {447}
	123 Move X1, X31
	124 Move V11, V0
	125 Call VisualElement.get_resolvedStyle, X0
	126 Compare X0, 0
	127 JumpIfEqual {447}
	128 Move X8, [X0]
	129 Move X1, [X22]
	130 Move X20, X0
	131 NotImplemented "Instruction LDRH not yet implemented."
	132 Compare X9, 0
	133 JumpIfEqual {140}
	134 Move X10, [X8+176]
	135 Add X10, X10, 8
	136 NotImplemented "Instruction LDUR not yet implemented."
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Subtract X9, X9, 1
	139 Add X10, X10, 16
	140 Move W2, 39
	141 Move X0, X20
	142 Call 0x1C5D788
	143 Move W9, [X10]
	144 Add W9, W9, 39
	145 Add X8, X8, W9
	146 Add X0, X8, 312
	147 Move X8, [X0]
	148 Move X1, [X0+8]
	149 Move X0, X20
	150 NotImplemented "Instruction BLR not yet implemented."
	151 Move X8, [X19+1088]
	152 Compare X8, 0
	153 JumpIfEqual {447}
	154 Move W20, W0
	155 Move X0, X8
	156 Move X1, X31
	157 Call VisualElement.get_layout, X0
	158 Move X0, [X19+1096]
	159 Compare X0, 0
	160 JumpIfEqual {447}
	161 Move X1, X31
	162 Move V14, V1
	163 Call VisualElement.get_resolvedStyle, X0
	164 Compare X0, 0
	165 JumpIfEqual {447}
	166 Move X8, [X0]
	167 Move X1, [X22]
	168 Move X21, X0
	169 NotImplemented "Instruction LDRH not yet implemented."
	170 Compare X9, 0
	171 JumpIfEqual {178}
	172 Move X10, [X8+176]
	173 Add X10, X10, 8
	174 NotImplemented "Instruction LDUR not yet implemented."
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Subtract X9, X9, 1
	177 Add X10, X10, 16
	178 Move W2, 24
	179 Move X0, X21
	180 Call 0x1C5D788
	181 Move W9, [X10]
	182 Add W9, W9, 24
	183 Add X8, X8, W9
	184 Add X0, X8, 312
	185 Move X8, [X0]
	186 Move X1, [X0+8]
	187 Move X0, X21
	188 NotImplemented "Instruction BLR not yet implemented."
	189 Move X0, [X19+1088]
	190 Compare X0, 0
	191 JumpIfEqual {447}
	192 Move X1, X31
	193 Move V12, V0
	194 Call VisualElement.get_layout, X0
	195 Move X0, [X19+1104]
	196 Compare X0, 0
	197 JumpIfEqual {447}
	198 Move X1, X31
	199 Move V13, V1
	200 Call VisualElement.get_resolvedStyle, X0
	201 Compare X0, 0
	202 JumpIfEqual {447}
	203 Move X8, [X0]
	204 Move X1, [X22]
	205 Move X21, X0
	206 NotImplemented "Instruction LDRH not yet implemented."
	207 Compare X9, 0
	208 JumpIfEqual {215}
	209 Move X10, [X8+176]
	210 Add X10, X10, 8
	211 NotImplemented "Instruction LDUR not yet implemented."
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Subtract X9, X9, 1
	214 Add X10, X10, 16
	215 Move W2, 24
	216 Move X0, X21
	217 Call 0x1C5D788
	218 Move W9, [X10]
	219 Add W9, W9, 24
	220 Add X8, X8, W9
	221 Add X0, X8, 312
	222 Move X8, [X0]
	223 Move X1, [X0+8]
	224 Move X0, X21
	225 NotImplemented "Instruction BLR not yet implemented."
	226 Move X0, [X19+1088]
	227 Compare X0, 0
	228 JumpIfEqual {447}
	229 Move X1, X31
	230 Move V9, V0
	231 Call VisualElement.get_resolvedStyle, X0
	232 Compare X0, 0
	233 JumpIfEqual {447}
	234 Move X8, [X0]
	235 Move X1, [X22]
	236 Move X21, X0
	237 NotImplemented "Instruction LDRH not yet implemented."
	238 Compare X9, 0
	239 JumpIfEqual {246}
	240 Move X10, [X8+176]
	241 Add X10, X10, 8
	242 NotImplemented "Instruction LDUR not yet implemented."
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Subtract X9, X9, 1
	245 Add X10, X10, 16
	246 Move W2, 19
	247 Move X0, X21
	248 Call 0x1C5D788
	249 Move W9, [X10]
	250 Add W9, W9, 19
	251 Add X8, X8, W9
	252 Add X0, X8, 312
	253 Move X8, [X0]
	254 Move X1, [X0+8]
	255 Move X0, X21
	256 NotImplemented "Instruction BLR not yet implemented."
	257 Move X0, [X19+1096]
	258 Compare X0, 0
	259 JumpIfEqual {447}
	260 Move X1, X31
	261 Move V8, V0
	262 Call VisualElement.get_resolvedStyle, X0
	263 Compare X0, 0
	264 JumpIfEqual {447}
	265 Move X8, [X0]
	266 Move X1, [X22]
	267 Move X21, X0
	268 Move [X31+76], S9
	269 NotImplemented "Instruction LDRH not yet implemented."
	270 Compare X9, 0
	271 JumpIfEqual {278}
	272 Move X10, [X8+176]
	273 Add X10, X10, 8
	274 NotImplemented "Instruction LDUR not yet implemented."
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Subtract X9, X9, 1
	277 Add X10, X10, 16
	278 Move W2, 19
	279 Move X0, X21
	280 Call 0x1C5D788
	281 Move W9, [X10]
	282 Add W9, W9, 19
	283 Add X8, X8, W9
	284 Add X0, X8, 312
	285 Move X8, [X0]
	286 Move X1, [X0+8]
	287 Move X0, X21
	288 NotImplemented "Instruction BLR not yet implemented."
	289 Move X0, [X19+1088]
	290 NotImplemented "Instruction FCMP not yet implemented."
	291 NotImplemented "Instruction FCSEL not yet implemented."
	292 Compare X0, 0
	293 JumpIfEqual {447}
	294 Move X1, X31
	295 Call VisualElement.get_resolvedStyle, X0
	296 Compare X0, 0
	297 JumpIfEqual {447}
	298 Move X8, [X0]
	299 Move X1, [X22]
	300 Move X21, X0
	301 Move [X31+72], S15
	302 NotImplemented "Instruction LDRH not yet implemented."
	303 Compare X9, 0
	304 JumpIfEqual {311}
	305 Move X10, [X8+176]
	306 Add X10, X10, 8
	307 NotImplemented "Instruction LDUR not yet implemented."
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Subtract X9, X9, 1
	310 Add X10, X10, 16
	311 Move W2, 19
	312 Move X0, X21
	313 Call 0x1C5D788
	314 Move W9, [X10]
	315 Add W9, W9, 19
	316 Add X8, X8, W9
	317 Add X0, X8, 312
	318 Move X8, [X0]
	319 Move X1, [X0+8]
	320 Move X0, X21
	321 NotImplemented "Instruction BLR not yet implemented."
	322 Move X0, [X19+1104]
	323 Compare X0, 0
	324 JumpIfEqual {447}
	325 Move X1, X31
	326 Move V15, V0
	327 Call VisualElement.get_resolvedStyle, X0
	328 Compare X0, 0
	329 JumpIfEqual {447}
	330 Move X8, [X0]
	331 Move X1, [X22]
	332 Move X21, X0
	333 NotImplemented "Instruction LDRH not yet implemented."
	334 Compare X9, 0
	335 JumpIfEqual {342}
	336 Move X10, [X8+176]
	337 Add X10, X10, 8
	338 NotImplemented "Instruction LDUR not yet implemented."
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Subtract X9, X9, 1
	341 Add X10, X10, 16
	342 Move W2, 19
	343 Move X0, X21
	344 Call 0x1C5D788
	345 Move W9, [X10]
	346 Add W9, W9, 19
	347 Add X8, X8, W9
	348 Add X0, X8, 312
	349 Move X8, [X0]
	350 Move X1, [X0+8]
	351 Move X0, X21
	352 NotImplemented "Instruction BLR not yet implemented."
	353 Move X0, [X19+1088]
	354 Compare X0, 0
	355 JumpIfEqual {447}
	356 Move X1, X31
	357 Move V8, V0
	358 Call VisualElement.get_resolvedStyle, X0
	359 Compare X0, 0
	360 JumpIfEqual {447}
	361 Move X8, [X0]
	362 Move X1, [X22]
	363 Move X21, X0
	364 Add S12, S14, S12
	365 NotImplemented "Instruction LDRH not yet implemented."
	366 Compare X9, 0
	367 JumpIfEqual {374}
	368 Move X10, [X8+176]
	369 Add X10, X10, 8
	370 NotImplemented "Instruction LDUR not yet implemented."
	371 NotImplemented "Instruction CMP not yet implemented."
	372 Subtract X9, X9, 1
	373 Add X10, X10, 16
	374 Move W2, 38
	375 Move X0, X21
	376 Call 0x1C5D788
	377 Move W9, [X10]
	378 Add W9, W9, 38
	379 Add X8, X8, W9
	380 Add X0, X8, 312
	381 Move X8, [X0]
	382 Move X1, [X0+8]
	383 Move X0, X21
	384 NotImplemented "Instruction BLR not yet implemented."
	385 NotImplemented "Instruction SCVTF not yet implemented."
	386 Move X0, [X19+1088]
	387 Move [X19+1136], S10
	388 Move [X19+1140], S12
	389 Move [X19+1144], S0
	390 Move [X19+1148], S9
	391 Compare X0, 0
	392 JumpIfEqual {447}
	393 Move X1, X31
	394 Call VisualElement.get_resolvedStyle, X0
	395 Move V9, [X31+76]
	396 Compare X0, 0
	397 JumpIfEqual {447}
	398 Move X8, [X0]
	399 Move X1, [X22]
	400 Move X21, X0
	401 NotImplemented "Instruction LDRH not yet implemented."
	402 Compare X9, 0
	403 JumpIfEqual {410}
	404 Move X10, [X8+176]
	405 Add X10, X10, 8
	406 NotImplemented "Instruction LDUR not yet implemented."
	407 NotImplemented "Instruction CMP not yet implemented."
	408 Subtract X9, X9, 1
	409 Add X10, X10, 16
	410 Move W2, 39
	411 Move X0, X21
	412 Call 0x1C5D788
	413 Move W9, [X10]
	414 Add W9, W9, 39
	415 Add X8, X8, W9
	416 Add X0, X8, 312
	417 Move X8, [X0]
	418 Move X1, [X0+8]
	419 Move V1, [X31+72]
	420 NotImplemented "Instruction SCVTF not yet implemented."
	421 NotImplemented "Instruction FCMP not yet implemented."
	422 Subtract S0, S11, S0
	423 Move X0, X21
	424 Add S9, S13, S9
	425 NotImplemented "Instruction FCSEL not yet implemented."
	426 Add S10, S1, S0
	427 NotImplemented "Instruction BLR not yet implemented."
	428 NotImplemented "Instruction SCVTF not yet implemented."
	429 Move [X19+1152], S10
	430 Move [X19+1156], S9
	431 Move [X19+1160], S0
	432 Move [X19+1164], S8
	433 Move X20, [X31+96]
	434 Move X19, [X31+104]
	435 Move X22, [X31+80]
	436 Move X21, [X31+88]
	437 Move X30, [X31+64]
	438 Move D9, [X31+48]
	439 Move D8, [X31+56]
	440 Move D11, [X31+32]
	441 Move D10, [X31+40]
	442 Move D13, [X31+16]
	443 Move D12, [X31+24]
	444 Move D15, [X31+112]
	445 Move D14, [X31+120]
	446 Return 
	447 Call 0x1C17F20

Method: System.Single SliderLerpUnclamped(System.Single a, System.Single b, System.Single interpolant)

Disassembly:
	0x03D6EE04 BL 0x1C16CF4
	0x03D6EE08 ADRP X0, 0x3F5000
	0x03D6EE0C LDR X0, [X0 + 0x5F8]
	0x03D6EE10 BL 0x1C16CF4

ISIL:
	001 Subtract S1, S1, S0
	002 Multiply S1, S1, S2
	003 Add S0, S1, S0
	004 Return V0

Method: System.Single SliderNormalizeValue(System.Single currentValue, System.Single lowerValue, System.Single higherValue)

Disassembly:
	0x03D6EDF4 LDR X0, [X0 + 0xD08]
	0x03D6EDF8 BL 0x1C16CF4
	0x03D6EDFC ADRP X0, 0x3F8000
	0x03D6EE00 LDR X0, [X0 + 0xD00]

ISIL:
	001 Subtract S0, S0, S1
	002 Subtract S1, S2, S1
	003 NotImplemented "Instruction FDIV not yet implemented."
	004 Return V0

Method: System.Single ComputeValueFromPosition(System.Single positionToConvert)

Disassembly:
	0x03D6F49C CBZ X0, 0x3D6F5A0
	0x03D6F4A0 LDR X8, [X0]
	0x03D6F4A4 LDP V0, V1, [X31 + 0x60]
	0x03D6F4A8 ADD X2, X31, 0xA0
	0x03D6F4AC MOV X1, X20
	0x03D6F4B0 LDR X9, [X8 + 0x178]
	0x03D6F4B4 STP V0, V1, [X31 + 0xA0]
	0x03D6F4B8 LDR X3, [X8 + 0x180]
	0x03D6F4BC BLR X9
	0x03D6F4C0 CBZ X19, 0x3D6F5A0
	0x03D6F4C4 MOV X0, X19
	0x03D6F4C8 BL 0x3D6D54C
	0x03D6F4CC LDP V0, V1, [X21]
	0x03D6F4D0 LDR X0, [X22 + 0x98]
	0x03D6F4D4 STP V0, V1, [X31 + 0x40]
	0x03D6F4D8 CBZ X0, 0x3D6F5A0
	0x03D6F4DC LDR X8, [X0]
	0x03D6F4E0 LDP V0, V1, [X31 + 0x40]
	0x03D6F4E4 ADD X2, X31, 0xA0
	0x03D6F4E8 MOV X1, X20
	0x03D6F4EC LDR X9, [X8 + 0x178]
	0x03D6F4F0 STP V0, V1, [X31 + 0xA0]
	0x03D6F4F4 LDR X3, [X8 + 0x180]
	0x03D6F4F8 BLR X9
	0x03D6F4FC MOV X0, X19
	0x03D6F500 BL 0x3D6D6B8
	0x03D6F504 LDP V0, V1, [X21]
	0x03D6F508 LDR X0, [X22 + 0x80]
	0x03D6F50C STP V0, V1, [X31 + 0x20]
	0x03D6F510 CBZ X0, 0x3D6F5A0
	0x03D6F514 LDR X8, [X0]
	0x03D6F518 LDP V0, V1, [X31 + 0x20]
	0x03D6F51C ADD X2, X31, 0xA0
	0x03D6F520 MOV X1, X20
	0x03D6F524 LDR X9, [X8 + 0x178]
	0x03D6F528 STP V0, V1, [X31 + 0xA0]
	0x03D6F52C LDR X3, [X8 + 0x180]
	0x03D6F530 BLR X9
	0x03D6F534 MOV V8.16B, V0.16B
	0x03D6F538 LDP V0, V1, [X21]
	0x03D6F53C LDR X0, [X22 + 0x88]
	0x03D6F540 STP V0, V1, [X31]
	0x03D6F544 CBZ X0, 0x3D6F5A0
	0x03D6F548 LDR X8, [X0]
	0x03D6F54C LDP V0, V1, [X31]
	0x03D6F550 ADD X2, X31, 0xA0
	0x03D6F554 MOV X1, X20
	0x03D6F558 LDR X9, [X8 + 0x178]
	0x03D6F55C STP V0, V1, [X31 + 0xA0]
	0x03D6F560 LDR X3, [X8 + 0x180]
	0x03D6F564 BLR X9
	0x03D6F568 LDR X8, [X19]
	0x03D6F56C MOV V1.16B, V0.16B
	0x03D6F570 MOV X0, X19
	0x03D6F574 MOV V0.16B, V8.16B
	0x03D6F578 LDR X9, [X8 + 0x7F8]
	0x03D6F57C LDR X1, [X8 + 0x800]
	0x03D6F580 BLR X9
	0x03D6F584 LDP X20, X19, [X31 + 0x100]
	0x03D6F588 LDP X22, X21, [X31 + 0xF0]
	0x03D6F58C LDP X24, X23, [X31 + 0xE0]
	0x03D6F590 LDP X29, X30, [X31 + 0xD0]
	0x03D6F594 LDR V8, [X31 + 0xC0]
	0x03D6F598 ADD X31, X31, 0x110
	0x03D6F59C RET
	0x03D6F5A0 BL 0x1C16F20
	0x03D6F5A4 MOV X0, X19
	0x03D6F5A8 BL 0x1C171E0
	0x03D6F5AC LDR X0, [X0 + 0x10]
	0x03D6F5B0 RET
	0x03D6F5B4 STR X30, [X31 - 0x20]!
	0x03D6F5B8 STP X20, X19, [X31 + 0x10]
	0x03D6F5BC MOV X19, X0
	0x03D6F5C0 LDR X0, [X0 + 0x10]
	0x03D6F5C4 MOV X2, X31
	0x03D6F5C8 MOV X20, X1
	0x03D6F5CC BL 0x321BA08
	0x03D6F5D0 TBNZ X0, 0x0, 0x3D6F600
	0x03D6F5D4 LDR X8, [X19 + 0xB0]
	0x03D6F5D8 STR X20, [X19 + 0x10]
	0x03D6F5DC CBZ X8, 0x3D6F600
	0x03D6F5E0 LDR X4, [X8 + 0x18]
	0x03D6F5E4 LDR X0, [X8 + 0x40]
	0x03D6F5E8 LDR X3, [X8 + 0x28]
	0x03D6F5EC MOV X1, X19
	0x03D6F5F0 LDP X20, X19, [X31 + 0x10]
	0x03D6F5F4 MOV W2, W31
	0x03D6F5F8 LDR X30, [X31], #0x20
	0x03D6F5FC BR X4
	0x03D6F600 LDP X20, X19, [X31 + 0x10]
	0x03D6F604 LDR X30, [X31], #0x20
	0x03D6F608 RET
	0x03D6F60C LDR X9, [X0 + 0xB0]
	0x03D6F610 CBZ X9, 0x3D6F630
	0x03D6F614 MOV X8, X0
	0x03D6F618 LDR X4, [X9 + 0x18]
	0x03D6F61C LDR X0, [X9 + 0x40]
	0x03D6F620 LDR X3, [X9 + 0x28]
	0x03D6F624 MOV W2, W1
	0x03D6F628 MOV X1, X8
	0x03D6F62C BR X4
	0x03D6F630 RET
	0x03D6F634 LDR X0, [X0 + 0x18]
	0x03D6F638 RET

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x679000
	009 Move W8, [X20+3345]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3F5000
	017 Move X0, [X0+1528]
	018 Call 0x1C17CF4
	019 Move X0, 0x3AE000
	020 Move X0, [X0+288]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3345], W8
	024 Move X0, [X19+1088]
	025 Compare X0, 0
	026 JumpIfEqual {116}
	027 Move X1, X31
	028 Call VisualElement.get_resolvedStyle, X0
	029 Compare X0, 0
	030 JumpIfEqual {116}
	031 Move X22, 0x3AE000
	032 Move X8, [X0]
	033 Move X22, [X22+288]
	034 Move X21, 0x3F5000
	035 Move X20, X0
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move X1, [X22]
	038 Move X21, [X21+1528]
	039 Compare X9, 0
	040 JumpIfEqual {47}
	041 Move X10, [X8+176]
	042 Add X10, X10, 8
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Subtract X9, X9, 1
	046 Add X10, X10, 16
	047 Move W2, 38
	048 Move X0, X20
	049 Call 0x1C5D788
	050 Move W9, [X10]
	051 Add W9, W9, 38
	052 Add X8, X8, W9
	053 Add X0, X8, 312
	054 Move X8, [X0]
	055 Move X1, [X0+8]
	056 Move X0, X20
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X1, [X21]
	059 Move W20, W0
	060 Move X0, X19
	061 Call BaseField`1<Vector2>.get_visualInput, X0
	062 Compare X0, 0
	063 JumpIfEqual {116}
	064 Move X1, X31
	065 Call VisualElement.get_layout, X0
	066 Move X0, [X19+1088]
	067 Compare X0, 0
	068 JumpIfEqual {116}
	069 Move X1, X31
	070 Move V9, V2
	071 Call VisualElement.get_resolvedStyle, X0
	072 Compare X0, 0
	073 JumpIfEqual {116}
	074 Move X8, [X0]
	075 Move X1, [X22]
	076 Move X21, X0
	077 NotImplemented "Instruction LDRH not yet implemented."
	078 Compare X9, 0
	079 JumpIfEqual {86}
	080 Move X10, [X8+176]
	081 Add X10, X10, 8
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Subtract X9, X9, 1
	085 Add X10, X10, 16
	086 Move W2, 39
	087 Move X0, X21
	088 Call 0x1C5D788
	089 Move W9, [X10]
	090 Add W9, W9, 39
	091 Add X8, X8, W9
	092 Add X0, X8, 312
	093 Move X8, [X0]
	094 Move X1, [X0+8]
	095 Move X0, X21
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Move V2, [X19+1172]
	098 Move V3, [X19+1176]
	099 NotImplemented "Instruction SCVTF not yet implemented."
	100 NotImplemented "Instruction SCVTF not yet implemented."
	101 Subtract S1, S9, S1
	102 Subtract S4, S8, S0
	103 Subtract S0, S1, S0
	104 Move X20, [X31+48]
	105 Move X19, [X31+56]
	106 Move X22, [X31+32]
	107 Move X21, [X31+40]
	108 Move X30, [X31+16]
	109 NotImplemented "Instruction FDIV not yet implemented."
	110 Subtract S1, S3, S2
	111 Multiply S0, S1, S0
	112 Add S0, S2, S0
	113 Move D9, [X31+64]
	114 Move D8, [X31+72]
	115 Return V0
	116 Call 0x1C17F20

Method: System.Void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)

Disassembly:
	0x03D6F63C STR X30, [X31 - 0x20]!
	0x03D6F640 STP X20, X19, [X31 + 0x10]
	0x03D6F644 MOV X19, X0
	0x03D6F648 LDR X0, [X0 + 0x18]
	0x03D6F64C MOV X2, X31
	0x03D6F650 MOV X20, X1
	0x03D6F654 BL 0x321BA08
	0x03D6F658 TBNZ X0, 0x0, 0x3D6F688
	0x03D6F65C LDR X8, [X19 + 0xB0]
	0x03D6F660 STR X20, [X19 + 0x18]
	0x03D6F664 CBZ X8, 0x3D6F688
	0x03D6F668 LDR X4, [X8 + 0x18]
	0x03D6F66C LDR X0, [X8 + 0x40]
	0x03D6F670 LDR X3, [X8 + 0x28]
	0x03D6F674 MOV X1, X19
	0x03D6F678 LDP X20, X19, [X31 + 0x10]
	0x03D6F67C MOVZ W2, 0x1
	0x03D6F680 LDR X30, [X31], #0x20
	0x03D6F684 BR X4
	0x03D6F688 LDP X20, X19, [X31 + 0x10]
	0x03D6F68C LDR X30, [X31], #0x20
	0x03D6F690 RET
	0x03D6F694 LDP V1, V0, [X0 + 0x20]
	0x03D6F698 STP V1, V0, [X8]
	0x03D6F69C RET
	0x03D6F6A0 MOV X1, X0
	0x03D6F6A4 LDR X0, [X0 + 0xA8]
	0x03D6F6A8 CBZ X0, 0x3D6F6B0
	0x03D6F6AC B 0x3D6F6B8
	0x03D6F6B0 MOVN W0, 0x0
	0x03D6F6B4 RET
	0x03D6F6B8 STP X30, X21, [X31 - 0x20]!
	0x03D6F6BC STP X20, X19, [X31 + 0x10]
	0x03D6F6C0 ADRP X21, 0x678000
	0x03D6F6C4 LDRB W8, [X21 + 0xD53]
	0x03D6F6C8 MOV X19, X1
	0x03D6F6CC MOV X20, X0
	0x03D6F6D0 TBNZ X8, 0x0, 0x3D6F6E8
	0x03D6F6D4 ADRP X0, 0x3F7000
	0x03D6F6D8 LDR X0, [X0 + 0xD58]
	0x03D6F6DC BL 0x1C16CF4
	0x03D6F6E0 MOVZ W8, 0x1
	0x03D6F6E4 STRB W8, [X21 + 0xD53]
	0x03D6F6E8 LDR X20, [X20 + 0x10]
	0x03D6F6EC CBZ X20, 0x3D6F760
	0x03D6F6F0 ADRP X10, 0x3F7000
	0x03D6F6F4 LDR X8, [X20]
	0x03D6F6F8 LDR X10, [X10 + 0xD58]
	0x03D6F6FC LDRH W9, [X8 + 0x12E]
	0x03D6F700 LDR X1, [X10]
	0x03D6F704 CBZ X9, 0x3D6F728
	0x03D6F708 LDR X10, [X8 + 0xB0]
	0x03D6F70C ADD X10, X10, 0x8
	0x03D6F710 LDUR X11, [X10 - 0x8]
	0x03D6F714 CMP X11, X1
	0x03D6F718 B.EQ 0x3D6F738
	0x03D6F71C SUBS X9, X9, 0x1
	0x03D6F720 ADD X10, X10, 0x10
	0x03D6F724 B.NE 0x3D6F710
	0x03D6F728 MOVZ W2, 0x2
	0x03D6F72C MOV X0, X20
	0x03D6F730 BL 0x1C5C788
	0x03D6F734 B 0x3D6F748
	0x03D6F738 LDR W9, [X10]
	0x03D6F73C ADD W9, W9, 0x2
	0x03D6F740 ADD X8, X8, W9, 0x4, SXTW
	0x03D6F744 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x679000
	007 Move W8, [X21+3346]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x3B0000
	015 Move X0, [X0+336]
	016 Call 0x1C17CF4
	017 Move X0, 0x3B0000
	018 Move X0, [X0+344]
	019 Call 0x1C17CF4
	020 Move X0, 0x3B0000
	021 Move X0, [X0+352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3346], W8
	025 Move X0, X20
	026 Move X1, X19
	027 Move X2, X31
	028 Call VisualElement.ExecuteDefaultAction, X0, X1
	029 Compare X19, 0
	030 JumpIfEqual {70}
	031 Move X8, [X19]
	032 Move X21, 0x3B0000
	033 Move X22, 0x3B0000
	034 Move X0, X19
	035 Move X9, [X8+392]
	036 Move X1, [X8+400]
	037 Move X21, [X21+344]
	038 Move X22, [X22+336]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X8, [X21]
	041 Move X21, X0
	042 Move W9, [X8+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {47}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X0, [X22]
	048 Call 0x2D0E5C8
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, 0x3B0000
	051 Move X9, [X9+352]
	052 Move X8, [X19]
	053 Move X1, [X9]
	054 Move W10, [X8+304]
	055 Move W9, [X1+304]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, [X8+200]
	058 Add X8, X8, X9
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X20
	062 Move X1, X19
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Call MinMaxSlider.UpdateDragElementPosition, X0, X1
	069 Return 
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return 
	076 Move X0, X19
	077 Call 0x1C181E0

Method: System.Void SetSliderValueFromDrag()

Disassembly:
	0x03D6F748 LDP X3, X2, [X0]
	0x03D6F74C MOV X0, X20
	0x03D6F750 MOV X1, X19
	0x03D6F754 LDP X20, X19, [X31 + 0x10]
	0x03D6F758 LDP X30, X21, [X31], #0x20
	0x03D6F75C BR X3
	0x03D6F760 BL 0x1C16F20
	0x03D6F764 STR X30, [X31 - 0x20]!
	0x03D6F768 STP X20, X19, [X31 + 0x10]
	0x03D6F76C ADRP X20, 0x678000
	0x03D6F770 LDRB W8, [X20 + 0xD1B]
	0x03D6F774 MOV X19, X0
	0x03D6F778 TBNZ X8, 0x0, 0x3D6F79C
	0x03D6F77C ADRP X0, 0x3F7000
	0x03D6F780 LDR X0, [X0 + 0xD60]
	0x03D6F784 BL 0x1C16CF4
	0x03D6F788 ADRP X0, 0x3F7000
	0x03D6F78C LDR X0, [X0 + 0xD68]
	0x03D6F790 BL 0x1C16CF4
	0x03D6F794 MOVZ W8, 0x1
	0x03D6F798 STRB W8, [X20 + 0xD1B]
	0x03D6F79C LDR X20, [X19 + 0xA8]
	0x03D6F7A0 CBZ X20, 0x3D6F7E8
	0x03D6F7A4 MOV X0, X20
	0x03D6F7A8 BL 0x3D7466C
	0x03D6F7AC LDR X0, [X20 + 0x18]
	0x03D6F7B0 CBZ X0, 0x3D6F7E8
	0x03D6F7B4 ADRP X8, 0x3F7000
	0x03D6F7B8 LDR X8, [X8 + 0xD68]
	0x03D6F7BC LDR X9, [X0]
	0x03D6F7C0 LDR X8, [X8]
	0x03D6F7C4 LDRB W11, [X9 + 0x130]
	0x03D6F7C8 LDRB W10, [X8 + 0x130]
	0x03D6F7CC CMP W11, W10
	0x03D6F7D0 B.CC 0x3D6F7E8
	0x03D6F7D4 LDR X9, [X9 + 0xC8]
	0x03D6F7D8 ADD X9, X9, X10, 0x3, LSL

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x679000
	006 Move W8, [X20+3347]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x3F8000
	013 Move X0, [X0+3296]
	014 Call 0x1C17CF4
	015 Move X0, 0x3F8000
	016 Move X0, [X0+3304]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3347], W8
	020 Move X0, [X19+1112]
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move W8, [X0+128]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, 0x3F8000
	026 Move V8, [X19+1120]
	027 Move X8, [X8+3296]
	028 Move X1, [X8]
	029 Call ClampedDragger`1<Single>.get_delta, X0
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+8]
	034 Add S1, S8, S0
	035 Move V0, V8
	036 Move V8, [X31+32]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+8]
	040 Move V8, [X31+32]
	041 Return 
	042 Call 0x1C17F20

Method: System.Void SetSliderValueFromClick()

Disassembly:
	0x03D6F980 MOV X1, X19
	0x03D6F984 BLR X9
	0x03D6F988 LDR X8, [X19 + 0xB0]
	0x03D6F98C CBZ X8, 0x3D6F9B0
	0x03D6F990 LDR X4, [X8 + 0x18]
	0x03D6F994 LDR X0, [X8 + 0x40]
	0x03D6F998 LDR X3, [X8 + 0x28]
	0x03D6F99C MOV X1, X19
	0x03D6F9A0 LDP X20, X19, [X31 + 0x10]
	0x03D6F9A4 MOVZ W2, 0x4
	0x03D6F9A8 LDR X30, [X31], #0x20
	0x03D6F9AC BR X4
	0x03D6F9B0 LDP X20, X19, [X31 + 0x10]
	0x03D6F9B4 LDR X30, [X31], #0x20
	0x03D6F9B8 RET
	0x03D6F9BC LDR V1, [X0 + 0x5C]
	0x03D6F9C0 FCMP S1, S0
	0x03D6F9C4 B.EQ 0x3D6F9E8
	0x03D6F9C8 LDR X8, [X0 + 0xB8]
	0x03D6F9CC MOV X1, X0
	0x03D6F9D0 STR S0, [X0 + 0x5C]
	0x03D6F9D4 CBZ X8, 0x3D6F9E8
	0x03D6F9D8 LDR X3, [X8 + 0x18]
	0x03D6F9DC LDR X0, [X8 + 0x40]
	0x03D6F9E0 LDR X2, [X8 + 0x28]
	0x03D6F9E4 BR X3
	0x03D6F9E8 RET
	0x03D6F9EC LDUR X0, [X0 + 0x4C]
	0x03D6F9F0 RET
	0x03D6F9F4 STR X30, [X31 - 0x20]!
	0x03D6F9F8 STP X20, X19, [X31 + 0x10]
	0x03D6F9FC MOV X19, X0
	0x03D6FA00 LDUR X0, [X0 + 0x4C]
	0x03D6FA04 MOV X2, X31
	0x03D6FA08 MOV X20, X1
	0x03D6FA0C BL 0x3DFAD2C
	0x03D6FA10 TBNZ X0, 0x0, 0x3D6FA40
	0x03D6FA14 LDR X8, [X19 + 0xB0]
	0x03D6FA18 STUR X20, [X19 + 0x4C]
	0x03D6FA1C CBZ X8, 0x3D6FA40
	0x03D6FA20 LDR X4, [X8 + 0x18]
	0x03D6FA24 LDR X0, [X8 + 0x40]
	0x03D6FA28 LDR X3, [X8 + 0x28]
	0x03D6FA2C MOV X1, X19
	0x03D6FA30 LDP X20, X19, [X31 + 0x10]
	0x03D6FA34 MOVZ W2, 0x6
	0x03D6FA38 LDR X30, [X31], #0x20
	0x03D6FA3C BR X4
	0x03D6FA40 LDP X20, X19, [X31 + 0x10]
	0x03D6FA44 LDR X30, [X31], #0x20
	0x03D6FA48 RET
	0x03D6FA4C LDUR X0, [X0 + 0x54]
	0x03D6FA50 RET
	0x03D6FA54 STR X30, [X31 - 0x20]!
	0x03D6FA58 STP X20, X19, [X31 + 0x10]
	0x03D6FA5C MOV X19, X0
	0x03D6FA60 LDUR X0, [X0 + 0x54]
	0x03D6FA64 MOV X2, X31
	0x03D6FA68 MOV X20, X1
	0x03D6FA6C BL 0x3DFAD2C
	0x03D6FA70 TBNZ X0, 0x0, 0x3D6FAA0
	0x03D6FA74 LDR X8, [X19 + 0xB0]
	0x03D6FA78 STUR X20, [X19 + 0x54]
	0x03D6FA7C CBZ X8, 0x3D6FAA0
	0x03D6FA80 LDR X4, [X8 + 0x18]
	0x03D6FA84 LDR X0, [X8 + 0x40]
	0x03D6FA88 LDR X3, [X8 + 0x28]
	0x03D6FA8C MOV X1, X19
	0x03D6FA90 LDP X20, X19, [X31 + 0x10]
	0x03D6FA94 MOVZ W2, 0x5
	0x03D6FA98 LDR X30, [X31], #0x20
	0x03D6FA9C BR X4
	0x03D6FAA0 LDP X20, X19, [X31 + 0x10]
	0x03D6FAA4 LDR X30, [X31], #0x20
	0x03D6FAA8 RET
	0x03D6FAAC LDR V0, [X0 + 0x5C]
	0x03D6FAB0 RET
	0x03D6FAB4 LDRB W0, [X0 + 0x61]
	0x03D6FAB8 RET
	0x03D6FABC LDRB W10, [X0 + 0x61]
	0x03D6FAC0 AND W9, W1, 0x1
	0x03D6FAC4 CMP W10, W9
	0x03D6FAC8 B.EQ 0x3D6FAF4
	0x03D6FACC LDR X10, [X0 + 0xB0]
	0x03D6FAD0 MOV X8, X0
	0x03D6FAD4 STRB W9, [X0 + 0x61]
	0x03D6FAD8 CBZ X10, 0x3D6FAF4
	0x03D6FADC LDR X4, [X10 + 0x18]
	0x03D6FAE0 LDR X0, [X10 + 0x40]
	0x03D6FAE4 LDR X3, [X10 + 0x28]
	0x03D6FAE8 MOVZ W2, 0x8
	0x03D6FAEC MOV X1, X8
	0x03D6FAF0 BR X4
	0x03D6FAF4 RET
	0x03D6FAF8 LDRB W0, [X0 + 0x60]
	0x03D6FAFC RET
	0x03D6FB00 LDRB W10, [X0 + 0x60]
	0x03D6FB04 AND W9, W1, 0x1
	0x03D6FB08 CMP W10, W9
	0x03D6FB0C B.EQ 0x3D6FB38
	0x03D6FB10 LDR X10, [X0 + 0xB0]
	0x03D6FB14 MOV X8, X0
	0x03D6FB18 STRB W9, [X0 + 0x60]
	0x03D6FB1C CBZ X10, 0x3D6FB38
	0x03D6FB20 LDR X4, [X10 + 0x18]
	0x03D6FB24 LDR X0, [X10 + 0x40]
	0x03D6FB28 LDR X3, [X10 + 0x28]
	0x03D6FB2C MOVZ W2, 0x7
	0x03D6FB30 MOV X1, X8
	0x03D6FB34 BR X4
	0x03D6FB38 RET
	0x03D6FB3C LDRB W0, [X0 + 0x62]
	0x03D6FB40 RET
	0x03D6FB44 LDRB W10, [X0 + 0x62]
	0x03D6FB48 AND W9, W1, 0x1
	0x03D6FB4C CMP W10, W9
	0x03D6FB50 B.EQ 0x3D6FB7C
	0x03D6FB54 LDR X10, [X0 + 0xB0]
	0x03D6FB58 MOV X8, X0
	0x03D6FB5C STRB W9, [X0 + 0x62]
	0x03D6FB60 CBZ X10, 0x3D6FB7C
	0x03D6FB64 LDR X4, [X10 + 0x18]
	0x03D6FB68 LDR X0, [X10 + 0x40]
	0x03D6FB6C LDR X3, [X10 + 0x28]
	0x03D6FB70 MOVZ W2, 0x9
	0x03D6FB74 MOV X1, X8
	0x03D6FB78 BR X4
	0x03D6FB7C RET
	0x03D6FB80 LDRB W0, [X0 + 0x63]
	0x03D6FB84 RET
	0x03D6FB88 LDRB W10, [X0 + 0x63]
	0x03D6FB8C AND W9, W1, 0x1
	0x03D6FB90 CMP W10, W9
	0x03D6FB94 B.EQ 0x3D6FBC0
	0x03D6FB98 LDR X10, [X0 + 0xB0]
	0x03D6FB9C MOV X8, X0
	0x03D6FBA0 STRB W9, [X0 + 0x63]
	0x03D6FBA4 CBZ X10, 0x3D6FBC0
	0x03D6FBA8 LDR X4, [X10 + 0x18]
	0x03D6FBAC LDR X0, [X10 + 0x40]
	0x03D6FBB0 LDR X3, [X10 + 0x28]
	0x03D6FBB4 MOVZ W2, 0xA
	0x03D6FBB8 MOV X1, X8
	0x03D6FBBC BR X4
	0x03D6FBC0 RET
	0x03D6FBC4 LDR X0, [X0 + 0x68]
	0x03D6FBC8 RET
	0x03D6FBCC STR X30, [X31 - 0x20]!
	0x03D6FBD0 STP X20, X19, [X31 + 0x10]
	0x03D6FBD4 MOV X19, X0
	0x03D6FBD8 LDR X0, [X0 + 0x68]
	0x03D6FBDC MOV X2, X31
	0x03D6FBE0 MOV X20, X1
	0x03D6FBE4 BL 0x33C60F0
	0x03D6FBE8 TBNZ X0, 0x0, 0x3D6FC18
	0x03D6FBEC LDR X8, [X19 + 0xB0]
	0x03D6FBF0 STR X20, [X19 + 0x68]
	0x03D6FBF4 CBZ X8, 0x3D6FC18
	0x03D6FBF8 LDR X4, [X8 + 0x18]
	0x03D6FBFC LDR X0, [X8 + 0x40]
	0x03D6FC00 LDR X3, [X8 + 0x28]
	0x03D6FC04 MOV X1, X19
	0x03D6FC08 LDP X20, X19, [X31 + 0x10]
	0x03D6FC0C MOVZ W2, 0xB
	0x03D6FC10 LDR X30, [X31], #0x20
	0x03D6FC14 BR X4
	0x03D6FC18 LDP X20, X19, [X31 + 0x10]
	0x03D6FC1C LDR X30, [X31], #0x20
	0x03D6FC20 RET
	0x03D6FC24 LDR X0, [X0 + 0x70]
	0x03D6FC28 RET
	0x03D6FC2C LDR X0, [X0 + 0x78]
	0x03D6FC30 RET
	0x03D6FC34 LDR X0, [X0 + 0x80]
	0x03D6FC38 RET
	0x03D6FC3C LDR X0, [X0 + 0x88]
	0x03D6FC40 RET
	0x03D6FC44 STR X30, [X31 - 0x20]!
	0x03D6FC48 STP X20, X19, [X31 + 0x10]
	0x03D6FC4C MOV X19, X0
	0x03D6FC50 LDR X0, [X0 + 0x88]
	0x03D6FC54 MOV X2, X31
	0x03D6FC58 MOV X20, X1
	0x03D6FC5C BL 0x33C60F0
	0x03D6FC60 TBNZ X0, 0x0, 0x3D6FC90
	0x03D6FC64 LDR X8, [X19 + 0xB0]
	0x03D6FC68 STR X20, [X19 + 0x88]
	0x03D6FC6C CBZ X8, 0x3D6FC90
	0x03D6FC70 LDR X4, [X8 + 0x18]
	0x03D6FC74 LDR X0, [X8 + 0x40]
	0x03D6FC78 LDR X3, [X8 + 0x28]
	0x03D6FC7C MOV X1, X19
	0x03D6FC80 LDP X20, X19, [X31 + 0x10]
	0x03D6FC84 MOVZ W2, 0xC
	0x03D6FC88 LDR X30, [X31], #0x20
	0x03D6FC8C BR X4
	0x03D6FC90 LDP X20, X19, [X31 + 0x10]
	0x03D6FC94 LDR X30, [X31], #0x20
	0x03D6FC98 RET
	0x03D6FC9C LDR X0, [X0 + 0x90]
	0x03D6FCA0 RET
	0x03D6FCA4 LDR X0, [X0 + 0x98]
	0x03D6FCA8 RET
	0x03D6FCAC LDR X0, [X0 + 0xA0]
	0x03D6FCB0 RET
	0x03D6FCB4 LDR X0, [X0 + 0xA8]
	0x03D6FCB8 RET
	0x03D6FCBC STR X1, [X0 + 0xA8]
	0x03D6FCC0 RET
	0x03D6FCC4 STR X30, [X31 - 0x40]!
	0x03D6FCC8 STP X24, X23, [X31 + 0x10]
	0x03D6FCCC STP X22, X21, [X31 + 0x20]
	0x03D6FCD0 STP X20, X19, [X31 + 0x30]
	0x03D6FCD4 ADRP X21, 0x678000
	0x03D6FCD8 LDRB W8, [X21 + 0xD1D]
	0x03D6FCDC MOV X19, X1
	0x03D6FCE0 MOV X20, X0
	0x03D6FCE4 TBNZ X8, 0x0, 0x3D6FCFC
	0x03D6FCE8 ADRP X0, 0x3F7000
	0x03D6FCEC LDR X0, [X0 + 0x658]
	0x03D6FCF0 BL 0x1C16CF4
	0x03D6FCF4 MOVZ W8, 0x1
	0x03D6FCF8 STRB W8, [X21 + 0xD1D]
	0x03D6FCFC ADRP X24, 0x3F7000
	0x03D6FD00 LDR X21, [X20 + 0xB0]!
	0x03D6FD04 LDR X24, [X24 + 0x658]
	0x03D6FD08 MOV X0, X21
	0x03D6FD0C MOV X1, X19
	0x03D6FD10 MOV X2, X31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x679000
	008 Move W8, [X20+3348]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x3F5000
	015 Move X0, [X0+1528]
	016 Call 0x1C17CF4
	017 Move X0, 0x3F8000
	018 Move X0, [X0+3304]
	019 Call 0x1C17CF4
	020 Move X0, 0x3F8000
	021 Move X0, [X0+3312]
	022 Call 0x1C17CF4
	023 Move X0, 0x3F8000
	024 Move X0, [X0+3320]
	025 Call 0x1C17CF4
	026 Move X0, 0x3AE000
	027 Move X0, [X0+288]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3348], W8
	031 Move X8, [X19+1112]
	032 Compare X8, 0
	033 JumpIfEqual {231}
	034 Move W8, [X8+128]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X19
	037 Call MinMaxSlider.UpdateDragThumbsRect, X0
	038 Move X8, [X19+1112]
	039 Compare X8, 0
	040 JumpIfEqual {231}
	041 Move V2, [X19+1136]
	042 Move S1, [X8+144]
	043 Move S0, [X8+148]
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 Move V3, [X19+1144]
	046 Add S2, S2, S3
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move V2, [X19+1140]
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move V3, [X19+1148]
	051 Add S2, S2, S3
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move W8, 1
	054 Move V2, [X19+1152]
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move V3, [X19+1160]
	057 Add S2, S2, S3
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 Move V1, [X19+1156]
	060 NotImplemented "Instruction FCMP not yet implemented."
	061 Move V2, [X19+1164]
	062 Add S1, S1, S2
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 Move W8, 3
	065 Move X0, [X19+1088]
	066 Compare X0, 0
	067 JumpIfEqual {231}
	068 Move X1, X31
	069 Call VisualElement.get_layout, X0
	070 Move X8, [X19+1112]
	071 Compare X8, 0
	072 JumpIfEqual {231}
	073 Move V4, [X8+144]
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 Add S0, S0, S2
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 Move V0, [X8+148]
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Add S1, S1, S3
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Move W8, 2
	082 Move [X19+1168], W8
	083 Move X8, [X19]
	084 Move X0, X19
	085 Move X9, [X8+2024]
	086 Move X1, [X8+2032]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Move X8, [X19+1112]
	089 Move [X19+1128], S0
	090 Move [X19+1132], S1
	091 Compare X8, 0
	092 JumpIfEqual {231}
	093 Move V0, [X8+144]
	094 Move W9, 4
	095 Move [X8+128], W9
	096 Move [X19+1120], D0
	097 Move X0, [X19+1088]
	098 Move [X19+1168], W31
	099 Compare X0, 0
	100 JumpIfEqual {231}
	101 Move W21, [X8+144]
	102 Move X1, X31
	103 Call VisualElement.get_resolvedStyle, X0
	104 Compare X0, 0
	105 JumpIfEqual {231}
	106 Move X22, 0x3AE000
	107 Move X8, [X0]
	108 Move X22, [X22+288]
	109 Move X20, X0
	110 NotImplemented "Instruction LDRH not yet implemented."
	111 Move X1, [X22]
	112 Compare X9, 0
	113 JumpIfEqual {120}
	114 Move X10, [X8+176]
	115 Add X10, X10, 8
	116 NotImplemented "Instruction LDUR not yet implemented."
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Subtract X9, X9, 1
	119 Add X10, X10, 16
	120 Move W2, 34
	121 Move X0, X20
	122 Call 0x1C5D788
	123 Move W9, [X10]
	124 Add W9, W9, 34
	125 Add X8, X8, W9
	126 Add X0, X8, 312
	127 Move X8, [X0]
	128 Move X1, [X0+8]
	129 Move X0, X20
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Move X8, [X19+1112]
	132 Move [X19+1120], W21
	133 Move [X19+1124], S0
	134 Compare X8, 0
	135 JumpIfEqual {231}
	136 Move W9, 4
	137 Move [X8+128], W9
	138 Move X0, [X19+1088]
	139 Compare X0, 0
	140 JumpIfEqual {231}
	141 Move X1, X31
	142 Call VisualElement.get_resolvedStyle, X0
	143 Compare X0, 0
	144 JumpIfEqual {231}
	145 Move X8, [X0]
	146 Move X1, [X22]
	147 Move X20, X0
	148 NotImplemented "Instruction LDRH not yet implemented."
	149 Compare X9, 0
	150 JumpIfEqual {157}
	151 Move X10, [X8+176]
	152 Add X10, X10, 8
	153 NotImplemented "Instruction LDUR not yet implemented."
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Subtract X9, X9, 1
	156 Add X10, X10, 16
	157 Move W2, 38
	158 Move X0, X20
	159 Call 0x1C5D788
	160 Move W9, [X10]
	161 Add W9, W9, 38
	162 Add X8, X8, W9
	163 Add X0, X8, 312
	164 Move X8, [X0]
	165 Move X1, [X0+8]
	166 Move X0, X20
	167 NotImplemented "Instruction BLR not yet implemented."
	168 Move X8, 0x3F5000
	169 Move X8, [X8+1528]
	170 Move W20, W0
	171 Move X0, X19
	172 Move X1, [X8]
	173 Call BaseField`1<Vector2>.get_visualInput, X0
	174 Compare X0, 0
	175 JumpIfEqual {231}
	176 Move X1, X31
	177 Call VisualElement.get_layout, X0
	178 Move X0, [X19+1088]
	179 Compare X0, 0
	180 JumpIfEqual {231}
	181 Move X1, X31
	182 Move V8, V2
	183 Call VisualElement.get_resolvedStyle, X0
	184 Compare X0, 0
	185 JumpIfEqual {231}
	186 Move X8, [X0]
	187 Move X1, [X22]
	188 Move X21, X0
	189 NotImplemented "Instruction LDRH not yet implemented."
	190 Compare X9, 0
	191 JumpIfEqual {198}
	192 Move X10, [X8+176]
	193 Add X10, X10, 8
	194 NotImplemented "Instruction LDUR not yet implemented."
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Subtract X9, X9, 1
	197 Add X10, X10, 16
	198 Move W2, 39
	199 Move X0, X21
	200 Call 0x1C5D788
	201 Move W9, [X10]
	202 Add W9, W9, 39
	203 Add X8, X8, W9
	204 Add X0, X8, 312
	205 Move X8, [X0]
	206 Move X1, [X0+8]
	207 Move X0, X21
	208 NotImplemented "Instruction BLR not yet implemented."
	209 Move V2, [X19+1120]
	210 NotImplemented "Instruction SCVTF not yet implemented."
	211 NotImplemented "Instruction SCVTF not yet implemented."
	212 Subtract S1, S8, S1
	213 Move X0, X19
	214 Call MinMaxSlider.ComputeValueDragStateNoThumb, X0, V0, V1, V2
	215 Move X8, [X19]
	216 Move W9, 2
	217 Move [X19+1168], W9
	218 Move X0, X19
	219 Move X9, [X8+2024]
	220 Move X1, [X8+2032]
	221 NotImplemented "Instruction BLR not yet implemented."
	222 Move [X19+1128], S0
	223 Move [X19+1132], S1
	224 Move X20, [X31+32]
	225 Move X19, [X31+40]
	226 Move X22, [X31+16]
	227 Move X21, [X31+24]
	228 Move X30, [X31+8]
	229 Move V8, [X31+48]
	230 Return 
	231 Call 0x1C17F20

Method: System.Void ComputeValueDragStateNoThumb(System.Single lowLimitPosition, System.Single highLimitPosition, System.Single dragElementPos)

Disassembly:
	0x03D6FD14 BL 0x33C0DE4
	0x03D6FD18 CBZ X0, 0x3D6FD38
	0x03D6FD1C LDR X23, [X24]
	0x03D6FD20 MOV X22, X0
	0x03D6FD24 MOV X1, X23
	0x03D6FD28 BL 0x1C16E00
	0x03D6FD2C MOV X1, X0
	0x03D6FD30 CBNZ X0, 0x3D6FD3C
	0x03D6FD34 B 0x3D6FD68
	0x03D6FD38 MOV X1, X31
	0x03D6FD3C MOV X0, X20
	0x03D6FD40 MOV X2, X21
	0x03D6FD44 BL 0x1C24138
	0x03D6FD48 CMP X21, X0
	0x03D6FD4C MOV X21, X0
	0x03D6FD50 B.NE 0x3D6FD08
	0x03D6FD54 LDP X20, X19, [X31 + 0x30]
	0x03D6FD58 LDP X22, X21, [X31 + 0x20]
	0x03D6FD5C LDP X24, X23, [X31 + 0x10]
	0x03D6FD60 LDR X30, [X31], #0x40
	0x03D6FD64 RET
	0x03D6FD68 MOV X0, X22
	0x03D6FD6C MOV X1, X23
	0x03D6FD70 BL 0x1C171E0
	0x03D6FD74 STR X30, [X31 - 0x40]!
	0x03D6FD78 STP X24, X23, [X31 + 0x10]
	0x03D6FD7C STP X22, X21, [X31 + 0x20]
	0x03D6FD80 STP X20, X19, [X31 + 0x30]
	0x03D6FD84 ADRP X21, 0x678000
	0x03D6FD88 LDRB W8, [X21 + 0xD1E]
	0x03D6FD8C MOV X19, X1
	0x03D6FD90 MOV X20, X0
	0x03D6FD94 TBNZ X8, 0x0, 0x3D6FDAC
	0x03D6FD98 ADRP X0, 0x3F7000
	0x03D6FD9C LDR X0, [X0 + 0x658]
	0x03D6FDA0 BL 0x1C16CF4
	0x03D6FDA4 MOVZ W8, 0x1
	0x03D6FDA8 STRB W8, [X21 + 0xD1E]
	0x03D6FDAC ADRP X24, 0x3F7000
	0x03D6FDB0 LDR X21, [X20 + 0xB0]!

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move X19, X0
	007 Move V8, [X19+1172]
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move V8, [X19+1176]
	010 Move X0, X19
	011 Move V0, V2
	012 Call MinMaxSlider.ComputeValueFromPosition, X0, V0
	013 Move V8, V0
	014 Move X8, [X19]
	015 Move X0, X19
	016 Move X9, [X8+2024]
	017 Move X1, [X8+2032]
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move V9, V1
	022 Move X9, [X8+2024]
	023 Move X1, [X8+2032]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X19]
	026 Move V2, [X19+1172]
	027 Subtract S0, S9, S0
	028 Move X0, X19
	029 Move X2, [X8+2040]
	030 Move X1, [X8+2048]
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Subtract S3, S8, S0
	034 Add S0, S2, S0
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 NotImplemented "Instruction FCSEL not yet implemented."
	037 NotImplemented "Instruction FCSEL not yet implemented."
	038 Move D9, [X31+32]
	039 Move D8, [X31+40]
	040 CallNoReturn X2

Method: System.Void ComputeValueFromDraggingThumb(System.Single dragElementStartPos, System.Single dragElementEndPos)

Disassembly:
	0x03D6F7DC LDUR X9, [X9 - 0x8]
	0x03D6F7E0 CMP X9, X8
	0x03D6F7E4 B.EQ 0x3D6F7F8
	0x03D6F7E8 LDP X20, X19, [X31 + 0x10]
	0x03D6F7EC MOVN W0, 0x0
	0x03D6F7F0 LDR X30, [X31], #0x20
	0x03D6F7F4 RET
	0x03D6F7F8 ADRP X8, 0x3F7000
	0x03D6F7FC LDR X8, [X8 + 0xD60]
	0x03D6F800 MOV X1, X19
	0x03D6F804 LDP X20, X19, [X31 + 0x10]
	0x03D6F808 LDR X2, [X8]
	0x03D6F80C LDR X30, [X31], #0x20
	0x03D6F810 B 0x301CD00
	0x03D6F814 STP X30, X19, [X31 - 0x10]!
	0x03D6F818 MOV X19, X0
	0x03D6F81C BL 0x3D7466C
	0x03D6F820 LDR X0, [X19 + 0x18]
	0x03D6F824 LDP X30, X19, [X31], #0x10
	0x03D6F828 RET
	0x03D6F82C STR X30, [X31 - 0x20]!
	0x03D6F830 STP X20, X19, [X31 + 0x10]
	0x03D6F834 ADRP X20, 0x678000
	0x03D6F838 LDRB W8, [X20 + 0xD1C]
	0x03D6F83C MOV X19, X0
	0x03D6F840 TBNZ X8, 0x0, 0x3D6F864
	0x03D6F844 ADRP X0, 0x3F7000
	0x03D6F848 LDR X0, [X0 + 0xD60]
	0x03D6F84C BL 0x1C16CF4
	0x03D6F850 ADRP X0, 0x3F7000
	0x03D6F854 LDR X0, [X0 + 0xD68]
	0x03D6F858 BL 0x1C16CF4
	0x03D6F85C MOVZ W8, 0x1
	0x03D6F860 STRB W8, [X20 + 0xD1C]
	0x03D6F864 LDR X20, [X19 + 0xA8]
	0x03D6F868 CBZ X20, 0x3D6F8B0
	0x03D6F86C MOV X0, X20
	0x03D6F870 BL 0x3D746E4
	0x03D6F874 LDR X0, [X20 + 0x20]
	0x03D6F878 CBZ X0, 0x3D6F8B0
	0x03D6F87C ADRP X8, 0x3F7000
	0x03D6F880 LDR X8, [X8 + 0xD68]
	0x03D6F884 LDR X9, [X0]
	0x03D6F888 LDR X8, [X8]
	0x03D6F88C LDRB W11, [X9 + 0x130]
	0x03D6F890 LDRB W10, [X8 + 0x130]
	0x03D6F894 CMP W11, W10
	0x03D6F898 B.CC 0x3D6F8B0
	0x03D6F89C LDR X9, [X9 + 0xC8]
	0x03D6F8A0 ADD X9, X9, X10, 0x3, LSL
	0x03D6F8A4 LDUR X9, [X9 - 0x8]
	0x03D6F8A8 CMP X9, X8
	0x03D6F8AC B.EQ 0x3D6F8C0
	0x03D6F8B0 LDP X20, X19, [X31 + 0x10]
	0x03D6F8B4 MOVN W0, 0x0
	0x03D6F8B8 LDR X30, [X31], #0x20
	0x03D6F8BC RET
	0x03D6F8C0 ADRP X8, 0x3F7000
	0x03D6F8C4 LDR X8, [X8 + 0xD60]
	0x03D6F8C8 MOV X1, X19
	0x03D6F8CC LDP X20, X19, [X31 + 0x10]
	0x03D6F8D0 LDR X2, [X8]
	0x03D6F8D4 LDR X30, [X31], #0x20
	0x03D6F8D8 B 0x301CD00
	0x03D6F8DC STP X30, X19, [X31 - 0x10]!
	0x03D6F8E0 MOV X19, X0
	0x03D6F8E4 BL 0x3D746E4
	0x03D6F8E8 LDR X0, [X19 + 0x20]
	0x03D6F8EC LDP X30, X19, [X31], #0x10
	0x03D6F8F0 RET
	0x03D6F8F4 LDRB W0, [X0 + 0x40]
	0x03D6F8F8 RET
	0x03D6F8FC LDRB W10, [X0 + 0x40]
	0x03D6F900 AND W9, W1, 0x1
	0x03D6F904 CMP W10, W9
	0x03D6F908 B.EQ 0x3D6F934
	0x03D6F90C LDR X10, [X0 + 0xB0]
	0x03D6F910 MOV X8, X0
	0x03D6F914 STRB W9, [X0 + 0x40]
	0x03D6F918 CBZ X10, 0x3D6F934
	0x03D6F91C LDR X4, [X10 + 0x18]
	0x03D6F920 LDR X0, [X10 + 0x40]
	0x03D6F924 LDR X3, [X10 + 0x28]
	0x03D6F928 MOVZ W2, 0x3
	0x03D6F92C MOV X1, X8
	0x03D6F930 BR X4
	0x03D6F934 RET
	0x03D6F938 LDUR X0, [X0 + 0x44]
	0x03D6F93C RET
	0x03D6F940 STR X30, [X31 - 0x20]!
	0x03D6F944 STP X20, X19, [X31 + 0x10]
	0x03D6F948 MOV X19, X0
	0x03D6F94C LDUR X0, [X0 + 0x44]
	0x03D6F950 MOV X2, X31
	0x03D6F954 MOV X20, X1
	0x03D6F958 BL 0x3DFAD2C
	0x03D6F95C TBNZ X0, 0x0, 0x3D6F9B0
	0x03D6F960 LDR X8, [X19 + 0xB8]
	0x03D6F964 MOVZ W9, 0x7FC00000
	0x03D6F968 STUR X20, [X19 + 0x44]
	0x03D6F96C STR W9, [X19 + 0x5C]
	0x03D6F970 CBZ X8, 0x3D6F988
	0x03D6F974 LDR X9, [X8 + 0x18]
	0x03D6F978 LDR X0, [X8 + 0x40]
	0x03D6F97C LDR X2, [X8 + 0x28]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move V8, V1
	006 Move X19, X0
	007 Call MinMaxSlider.ComputeValueFromPosition, X0, V0
	008 Move V9, V0
	009 Move X0, X19
	010 Move V0, V8
	011 Call MinMaxSlider.ComputeValueFromPosition, X0, V0
	012 Move W8, [X19+1168]
	013 Subtract S8, S0, S9
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X9, [X8+2024]
	020 Move X1, [X8+2032]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move V2, [X19+1128]
	023 Move V3, [X19+1172]
	024 Move V1, [X19+1132]
	025 Add S0, S8, S2
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Subtract S2, S1, S2
	028 Add S1, S3, S2
	029 Move V0, V3
	030 Move X8, [X19]
	031 Move V0, [X19+1128]
	032 Move X0, X19
	033 Move X9, [X8+2024]
	034 Move X1, [X8+2032]
	035 Add S8, S8, S0
	036 NotImplemented "Instruction BLR not yet implemented."
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move X8, [X19]
	039 Move X0, X19
	040 Move X9, [X8+2024]
	041 Move X1, [X8+2032]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move V8, V1
	044 Move X8, [X19]
	045 Move V0, [X19+1132]
	046 Move X0, X19
	047 Move X9, [X8+2024]
	048 Move X1, [X8+2032]
	049 Add S8, S8, S0
	050 NotImplemented "Instruction BLR not yet implemented."
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 Move X8, [X19]
	053 Move X0, X19
	054 Move X9, [X8+2024]
	055 Move X1, [X8+2032]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X30, [X31+16]
	058 Move X19, [X31+24]
	059 Move D9, [X31+32]
	060 Move D8, [X31+40]
	061 Return 
	062 Move V0, [X19+1172]
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 Move V8, V0
	065 Move X8, [X19]
	066 Move X0, X19
	067 Move X9, [X8+2024]
	068 Move X1, [X8+2032]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X8, [X19]
	071 Move X0, X19
	072 Move V0, V8
	073 Move V0, [X19+1176]
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 Move V8, V0
	076 Move X8, [X19]
	077 Move X0, X19
	078 Move X9, [X8+2024]
	079 Move X1, [X8+2032]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X8, [X19]
	082 Move X0, X19
	083 Move V1, V8
	084 Move V3, [X19+1176]
	085 Add S1, S8, S1
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 Subtract S0, S3, S2
	088 Move V1, V3
	089 Move X8, [X19]
	090 Move X0, X19
	091 Move X2, [X8+2040]
	092 Move X1, [X8+2048]
	093 Move X30, [X31+16]
	094 Move X19, [X31+24]
	095 Move D9, [X31+32]
	096 Move D8, [X31+40]
	097 CallNoReturn X2

Method: System.Void UpdateMixedValueContent()

Disassembly:
	0x03D6FDB4 LDR X24, [X24 + 0x658]

ISIL:
	001 Return 

Method: System.Void RegisterEditingCallbacks()

Disassembly:
	0x03D6FDB8 MOV X0, X21
	0x03D6FDBC MOV X1, X19
	0x03D6FDC0 MOV X2, X31
	0x03D6FDC4 BL 0x33C0FDC
	0x03D6FDC8 CBZ X0, 0x3D6FDE8
	0x03D6FDCC LDR X23, [X24]
	0x03D6FDD0 MOV X22, X0
	0x03D6FDD4 MOV X1, X23
	0x03D6FDD8 BL 0x1C16E00
	0x03D6FDDC MOV X1, X0
	0x03D6FDE0 CBNZ X0, 0x3D6FDEC
	0x03D6FDE4 B 0x3D6FE18
	0x03D6FDE8 MOV X1, X31
	0x03D6FDEC MOV X0, X20
	0x03D6FDF0 MOV X2, X21
	0x03D6FDF4 BL 0x1C24138
	0x03D6FDF8 CMP X21, X0
	0x03D6FDFC MOV X21, X0
	0x03D6FE00 B.NE 0x3D6FDB8
	0x03D6FE04 LDP X20, X19, [X31 + 0x30]
	0x03D6FE08 LDP X22, X21, [X31 + 0x20]
	0x03D6FE0C LDP X24, X23, [X31 + 0x10]
	0x03D6FE10 LDR X30, [X31], #0x40
	0x03D6FE14 RET
	0x03D6FE18 MOV X0, X22
	0x03D6FE1C MOV X1, X23
	0x03D6FE20 BL 0x1C171E0
	0x03D6FE24 STR X30, [X31 - 0x40]!
	0x03D6FE28 STP X24, X23, [X31 + 0x10]
	0x03D6FE2C STP X22, X21, [X31 + 0x20]
	0x03D6FE30 STP X20, X19, [X31 + 0x30]
	0x03D6FE34 ADRP X21, 0x678000
	0x03D6FE38 LDRB W8, [X21 + 0xD1F]
	0x03D6FE3C MOV X19, X1
	0x03D6FE40 MOV X20, X0
	0x03D6FE44 TBNZ X8, 0x0, 0x3D6FE5C
	0x03D6FE48 ADRP X0, 0x3F7000
	0x03D6FE4C LDR X0, [X0 + 0x650]
	0x03D6FE50 BL 0x1C16CF4
	0x03D6FE54 MOVZ W8, 0x1
	0x03D6FE58 STRB W8, [X21 + 0xD1F]
	0x03D6FE5C ADRP X24, 0x3F7000
	0x03D6FE60 LDR X21, [X20 + 0xB8]!
	0x03D6FE64 LDR X24, [X24 + 0x650]
	0x03D6FE68 MOV X0, X21
	0x03D6FE6C MOV X1, X19
	0x03D6FE70 MOV X2, X31
	0x03D6FE74 BL 0x33C0DE4
	0x03D6FE78 CBZ X0, 0x3D6FE98
	0x03D6FE7C LDR X23, [X24]
	0x03D6FE80 MOV X22, X0
	0x03D6FE84 MOV X1, X23
	0x03D6FE88 BL 0x1C16E00
	0x03D6FE8C MOV X1, X0
	0x03D6FE90 CBNZ X0, 0x3D6FE9C
	0x03D6FE94 B 0x3D6FEC8
	0x03D6FE98 MOV X1, X31
	0x03D6FE9C MOV X0, X20
	0x03D6FEA0 MOV X2, X21
	0x03D6FEA4 BL 0x1C24138
	0x03D6FEA8 CMP X21, X0
	0x03D6FEAC MOV X21, X0
	0x03D6FEB0 B.NE 0x3D6FE68
	0x03D6FEB4 LDP X20, X19, [X31 + 0x30]
	0x03D6FEB8 LDP X22, X21, [X31 + 0x20]
	0x03D6FEBC LDP X24, X23, [X31 + 0x10]
	0x03D6FEC0 LDR X30, [X31], #0x40
	0x03D6FEC4 RET
	0x03D6FEC8 MOV X0, X22
	0x03D6FECC MOV X1, X23
	0x03D6FED0 BL 0x1C171E0
	0x03D6FED4 STR X30, [X31 - 0x40]!
	0x03D6FED8 STP X24, X23, [X31 + 0x10]
	0x03D6FEDC STP X22, X21, [X31 + 0x20]
	0x03D6FEE0 STP X20, X19, [X31 + 0x30]
	0x03D6FEE4 ADRP X21, 0x678000
	0x03D6FEE8 LDRB W8, [X21 + 0xD20]
	0x03D6FEEC MOV X19, X1
	0x03D6FEF0 MOV X20, X0
	0x03D6FEF4 TBNZ X8, 0x0, 0x3D6FF0C
	0x03D6FEF8 ADRP X0, 0x3F7000
	0x03D6FEFC LDR X0, [X0 + 0x650]
	0x03D6FF00 BL 0x1C16CF4
	0x03D6FF04 MOVZ W8, 0x1
	0x03D6FF08 STRB W8, [X21 + 0xD20]
	0x03D6FF0C ADRP X24, 0x3F7000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x679000
	009 Move X22, 0x3F5000
	010 Move X20, 0x3AF000
	011 Move X21, 0x3F8000
	012 Move W8, [X23+3349]
	013 Move X22, [X22+1528]
	014 Move X20, [X20+1920]
	015 Move X21, [X21+3328]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0x3F8000
	022 Move X0, [X0+3336]
	023 Call 0x1C17CF4
	024 Move X0, 0x3F8000
	025 Move X0, [X0+3328]
	026 Call 0x1C17CF4
	027 Move X0, 0x3F5000
	028 Move X0, [X0+1528]
	029 Call 0x1C17CF4
	030 Move X0, 0x3AF000
	031 Move X0, [X0+1904]
	032 Call 0x1C17CF4
	033 Move X0, 0x3AF000
	034 Move X0, [X0+1912]
	035 Call 0x1C17CF4
	036 Move X0, 0x3AF000
	037 Move X0, [X0+1920]
	038 Call 0x1C17CF4
	039 Move X0, 0x3AF000
	040 Move X0, [X0+1928]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X23+3349], W8
	044 Move X1, [X22]
	045 Move X0, X19
	046 Call BaseField`1<Vector2>.get_visualInput, X0
	047 Move X8, [X20]
	048 Move X20, X0
	049 Move X0, X8
	050 Call 0x1C17F10
	051 Move X2, [X21]
	052 Move X1, X19
	053 Move X3, X31
	054 Move X21, X0
	055 Call 0x2D0F824, X0, X1, X2
	056 Compare X20, 0
	057 JumpIfEqual {98}
	058 Move X8, 0x3AF000
	059 Move X8, [X8+1904]
	060 Move X23, 0x3AF000
	061 Move X24, 0x3F8000
	062 Move W2, 1
	063 Move X3, [X8]
	064 Move X23, [X23+1928]
	065 Move X24, [X24+3336]
	066 Move X0, X20
	067 Move X1, X21
	068 Call 0x21A2534, X0, X1, X2
	069 Move X1, [X22]
	070 Move X0, X19
	071 Call BaseField`1<Vector2>.get_visualInput, X0
	072 Move X8, [X23]
	073 Move X20, X0
	074 Move X0, X8
	075 Call 0x1C17F10
	076 Move X2, [X24]
	077 Move X1, X19
	078 Move X3, X31
	079 Move X21, X0
	080 Call 0x2D0F824, X0, X1, X2
	081 Compare X20, 0
	082 JumpIfEqual {98}
	083 Move X8, 0x3AF000
	084 Move X8, [X8+1912]
	085 Move X0, X20
	086 Move X1, X21
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X3, [X8]
	090 Move X22, [X31+32]
	091 Move X21, [X31+40]
	092 Move X24, [X31+16]
	093 Move X23, [X31+24]
	094 Move W2, W31
	095 Move X30, [X31+64]
	096 Call 0x21A2534, X0, X1, X2
	097 Return 
	098 Call 0x1C17F20

Method: System.Void UnregisterEditingCallbacks()

Disassembly:
	0x03D6FF10 LDR X21, [X20 + 0xB8]!
	0x03D6FF14 LDR X24, [X24 + 0x650]
	0x03D6FF18 MOV X0, X21
	0x03D6FF1C MOV X1, X19
	0x03D6FF20 MOV X2, X31
	0x03D6FF24 BL 0x33C0FDC
	0x03D6FF28 CBZ X0, 0x3D6FF48
	0x03D6FF2C LDR X23, [X24]
	0x03D6FF30 MOV X22, X0
	0x03D6FF34 MOV X1, X23
	0x03D6FF38 BL 0x1C16E00
	0x03D6FF3C MOV X1, X0
	0x03D6FF40 CBNZ X0, 0x3D6FF4C
	0x03D6FF44 B 0x3D6FF78
	0x03D6FF48 MOV X1, X31
	0x03D6FF4C MOV X0, X20
	0x03D6FF50 MOV X2, X21
	0x03D6FF54 BL 0x1C24138
	0x03D6FF58 CMP X21, X0
	0x03D6FF5C MOV X21, X0
	0x03D6FF60 B.NE 0x3D6FF18
	0x03D6FF64 LDP X20, X19, [X31 + 0x30]
	0x03D6FF68 LDP X22, X21, [X31 + 0x20]
	0x03D6FF6C LDP X24, X23, [X31 + 0x10]
	0x03D6FF70 LDR X30, [X31], #0x40
	0x03D6FF74 RET
	0x03D6FF78 MOV X0, X22
	0x03D6FF7C MOV X1, X23
	0x03D6FF80 BL 0x1C171E0
	0x03D6FF84 LDR W8, [X0 + 0x48]
	0x03D6FF88 LDR V1, [X0 + 0x44]
	0x03D6FF8C CBZ W8, 0x3D6FFA0
	0x03D6FF90 MOVZ W8, 0x42C80000
	0x03D6FF94 FMUL S0, S1, S0
	0x03D6FF98 FMOV S1, W8
	0x03D6FF9C FDIV S1, S0, S1
	0x03D6FFA0 MOV V0.16B, V1.16B
	0x03D6FFA4 RET
	0x03D6FFA8 LDR W8, [X0 + 0x58]
	0x03D6FFAC LDR V1, [X0 + 0x54]
	0x03D6FFB0 CBZ W8, 0x3D6FFC4
	0x03D6FFB4 MOVZ W8, 0x42C80000
	0x03D6FFB8 FMUL S0, S1, S0
	0x03D6FFBC FMOV S1, W8
	0x03D6FFC0 FDIV S1, S0, S1
	0x03D6FFC4 MOV V0.16B, V1.16B
	0x03D6FFC8 RET
	0x03D6FFCC LDR W8, [X0 + 0x50]
	0x03D6FFD0 LDR V1, [X0 + 0x4C]
	0x03D6FFD4 CBZ W8, 0x3D6FFE8
	0x03D6FFD8 MOVZ W8, 0x42C80000
	0x03D6FFDC FMUL S0, S1, S0
	0x03D6FFE0 FMOV S1, W8
	0x03D6FFE4 FDIV S1, S0, S1
	0x03D6FFE8 MOV V0.16B, V1.16B
	0x03D6FFEC RET
	0x03D6FFF0 STR X30, [X31 - 0x20]!
	0x03D6FFF4 STP X20, X19, [X31 + 0x10]
	0x03D6FFF8 MOVZ W20, 0x1
	0x03D6FFFC MOV X19, X0
	0x03D70000 STRB W20, [X0 + 0x40]
	0x03D70004 FMOV S0, W31
	0x03D70008 MOV X0, X31
	0x03D7000C BL 0x3DFD518
	0x03D70010 MOVZ W8, 0x420C0000
	0x03D70014 STUR X0, [X19 + 0x44]
	0x03D70018 FMOV S0, W8
	0x03D7001C MOV X0, X31
	0x03D70020 BL 0x3DFD518
	0x03D70024 MOVZ W8, 0x4B000000
	0x03D70028 STUR X0, [X19 + 0x4C]
	0x03D7002C FMOV S0, W8
	0x03D70030 MOV X0, X31
	0x03D70034 BL 0x3DFD518
	0x03D70038 MOVZ W8, 0x7FC00000
	0x03D7003C MOVZ W9, 0x101
	0x03D70040 STUR X0, [X19 + 0x54]
	0x03D70044 STR W8, [X19 + 0x5C]
	0x03D70048 STURH W9, [X19 + 0x61]
	0x03D7004C STRB W20, [X19 + 0x63]
	0x03D70050 MOV X0, X19
	0x03D70054 LDP X20, X19, [X31 + 0x10]
	0x03D70058 MOV X1, X31
	0x03D7005C LDR X30, [X31], #0x20
	0x03D70060 B 0x33BDD8C
	0x03D70064 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x679000
	009 Move X22, 0x3F5000
	010 Move X20, 0x3AF000
	011 Move X21, 0x3F8000
	012 Move W8, [X23+3350]
	013 Move X22, [X22+1528]
	014 Move X20, [X20+1920]
	015 Move X21, [X21+3328]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0x3F8000
	022 Move X0, [X0+3336]
	023 Call 0x1C17CF4
	024 Move X0, 0x3F8000
	025 Move X0, [X0+3328]
	026 Call 0x1C17CF4
	027 Move X0, 0x3F5000
	028 Move X0, [X0+1528]
	029 Call 0x1C17CF4
	030 Move X0, 0x3AF000
	031 Move X0, [X0+1936]
	032 Call 0x1C17CF4
	033 Move X0, 0x3AF000
	034 Move X0, [X0+1944]
	035 Call 0x1C17CF4
	036 Move X0, 0x3AF000
	037 Move X0, [X0+1920]
	038 Call 0x1C17CF4
	039 Move X0, 0x3AF000
	040 Move X0, [X0+1928]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X23+3350], W8
	044 Move X1, [X22]
	045 Move X0, X19
	046 Call BaseField`1<Vector2>.get_visualInput, X0
	047 Move X8, [X20]
	048 Move X20, X0
	049 Move X0, X8
	050 Call 0x1C17F10
	051 Move X2, [X21]
	052 Move X1, X19
	053 Move X3, X31
	054 Move X21, X0
	055 Call 0x2D0F824, X0, X1, X2
	056 Compare X20, 0
	057 JumpIfEqual {98}
	058 Move X8, 0x3AF000
	059 Move X8, [X8+1936]
	060 Move X23, 0x3AF000
	061 Move X24, 0x3F8000
	062 Move W2, 1
	063 Move X3, [X8]
	064 Move X23, [X23+1928]
	065 Move X24, [X24+3336]
	066 Move X0, X20
	067 Move X1, X21
	068 Call 0x21A28B4, X0, X1, X2
	069 Move X1, [X22]
	070 Move X0, X19
	071 Call BaseField`1<Vector2>.get_visualInput, X0
	072 Move X8, [X23]
	073 Move X20, X0
	074 Move X0, X8
	075 Call 0x1C17F10
	076 Move X2, [X24]
	077 Move X1, X19
	078 Move X3, X31
	079 Move X21, X0
	080 Call 0x2D0F824, X0, X1, X2
	081 Compare X20, 0
	082 JumpIfEqual {98}
	083 Move X8, 0x3AE000
	084 Move X8, [X8+1944]
	085 Move X0, X20
	086 Move X1, X21
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X3, [X8]
	090 Move X22, [X31+32]
	091 Move X21, [X31+40]
	092 Move X24, [X31+16]
	093 Move X23, [X31+24]
	094 Move W2, W31
	095 Move X30, [X31+64]
	096 Call 0x21A28B4, X0, X1, X2
	097 Return 
	098 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03D70068 STP X20, X19, [X31 + 0x10]
	0x03D7006C ADRP X20, 0x677000
	0x03D70070 ADRP X19, 0x3CD000
	0x03D70074 ADRP X21, 0x3AC000
	0x03D70078 LDRB W8, [X20 + 0xD21]
	0x03D7007C LDR X19, [X19 + 0x5A8]
	0x03D70080 LDR X21, [X21 + 0xB68]
	0x03D70084 TBNZ X8, 0x0, 0x3D700A8
	0x03D70088 ADRP X0, 0x3AC000
	0x03D7008C LDR X0, [X0 + 0xB68]
	0x03D70090 BL 0x1C16CF4
	0x03D70094 ADRP X0, 0x3CD000
	0x03D70098 LDR X0, [X0 + 0x5A8]
	0x03D7009C BL 0x1C16CF4
	0x03D700A0 MOVZ W8, 0x1
	0x03D700A4 STRB W8, [X20 + 0xD21]
	0x03D700A8 LDR X8, [X21]
	0x03D700AC LDR X9, [X19]
	0x03D700B0 LDP X20, X19, [X31 + 0x10]
	0x03D700B4 LDR X8, [X8 + 0xB8]
	0x03D700B8 STR X9, [X8]
	0x03D700BC LDP X30, X21, [X31], #0x20
	0x03D700C0 RET
	0x03D700C4 LDR X0, [X0 + 0x30]
	0x03D700C8 RET
	0x03D700CC STR X30, [X31 - 0x30]!
	0x03D700D0 STP X22, X21, [X31 + 0x10]
	0x03D700D4 STP X20, X19, [X31 + 0x20]
	0x03D700D8 ADRP X20, 0x677000
	0x03D700DC LDRB W8, [X20 + 0xD22]
	0x03D700E0 MOV X19, X0
	0x03D700E4 TBNZ X8, 0x0, 0x3D70120
	0x03D700E8 ADRP X0, 0x383000
	0x03D700EC LDR X0, [X0 + 0xE00]
	0x03D700F0 BL 0x1C16CF4
	0x03D700F4 ADRP X0, 0x3AC000
	0x03D700F8 LDR X0, [X0 + 0x110]
	0x03D700FC BL 0x1C16CF4
	0x03D70100 ADRP X0, 0x3AC000
	0x03D70104 LDR X0, [X0 + 0x118]
	0x03D70108 BL 0x1C16CF4
	0x03D7010C ADRP X0, 0x383000
	0x03D70110 LDR X0, [X0 + 0xE18]
	0x03D70114 BL 0x1C16CF4
	0x03D70118 MOVZ W8, 0x1
	0x03D7011C STRB W8, [X20 + 0xD22]
	0x03D70120 LDRB W8, [X19 + 0x3C]
	0x03D70124 CBZ W8, 0x3D70308
	0x03D70128 LDR X20, [X19 + 0x30]
	0x03D7012C STR W31, [X19 + 0x38]
	0x03D70130 CBZ X20, 0x3D70320
	0x03D70134 MOV X0, X20
	0x03D70138 BL 0x3D746E4
	0x03D7013C LDR X20, [X20 + 0x20]
	0x03D70140 CBZ X20, 0x3D70320
	0x03D70144 ADRP X10, 0x3AC000
	0x03D70148 LDR X8, [X20]
	0x03D7014C LDR X10, [X10 + 0x110]
	0x03D70150 LDRH W9, [X8 + 0x12E]
	0x03D70154 LDR X1, [X10]
	0x03D70158 CBZ X9, 0x3D7017C
	0x03D7015C LDR X10, [X8 + 0xB0]
	0x03D70160 ADD X10, X10, 0x8
	0x03D70164 LDUR X11, [X10 - 0x8]
	0x03D70168 CMP X11, X1
	0x03D7016C B.EQ 0x3D7018C
	0x03D70170 SUBS X9, X9, 0x1
	0x03D70174 ADD X10, X10, 0x10
	0x03D70178 B.NE 0x3D70164
	0x03D7017C MOV X0, X20
	0x03D70180 MOV W2, W31
	0x03D70184 BL 0x1C5C788
	0x03D70188 B 0x3D70198
	0x03D7018C LDRSW X9, [X10]
	0x03D70190 ADD X8, X8, X9, 0x4, LSL
	0x03D70194 ADD X0, X8, 0x138
	0x03D70198 LDP X8, X1, [X0]
	0x03D7019C MOV X0, X20
	0x03D701A0 BLR X8
	0x03D701A4 MOV X20, X0
	0x03D701A8 CBZ X0, 0x3D70324
	0x03D701AC ADRP X21, 0x383000
	0x03D701B0 ADRP X22, 0x3AC000
	0x03D701B4 LDR X21, [X21 + 0xE18]
	0x03D701B8 LDR X22, [X22 + 0x118]
	0x03D701BC LDR X8, [X20]
	0x03D701C0 LDR X1, [X21]
	0x03D701C4 LDRH W9, [X8 + 0x12E]
	0x03D701C8 CBZ X9, 0x3D701EC
	0x03D701CC LDR X10, [X8 + 0xB0]
	0x03D701D0 ADD X10, X10, 0x8
	0x03D701D4 LDUR X11, [X10 - 0x8]
	0x03D701D8 CMP X11, X1
	0x03D701DC B.EQ 0x3D701FC
	0x03D701E0 SUBS X9, X9, 0x1
	0x03D701E4 ADD X10, X10, 0x10
	0x03D701E8 B.NE 0x3D701D4
	0x03D701EC MOV X0, X20
	0x03D701F0 MOV W2, W31
	0x03D701F4 BL 0x1C5C788
	0x03D701F8 B 0x3D70208
	0x03D701FC LDRSW X9, [X10]
	0x03D70200 ADD X8, X8, X9, 0x4, LSL
	0x03D70204 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x678000
	012 Move X26, 0x3F7000
	013 Move X19, 0x3F7000
	014 Move X25, 0x3AD000
	015 Move X24, 0x3AD000
	016 Move X23, 0x3AF000
	017 Move X22, 0x3AF000
	018 Move X21, 0x3F7000
	019 Move X20, 0x3F7000
	020 Move X26, [X26+3344]
	021 Move X19, [X19+3272]
	022 Move X25, [X25+3768]
	023 Move W8, [X27+3351]
	024 Move X24, [X24+3776]
	025 Move X23, [X23+456]
	026 Move X22, [X22+440]
	027 Move X21, [X21+3352]
	028 Move X20, [X20+3360]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {59}
	033 Move X0, 0x3F7000
	034 Move X0, [X0+3272]
	035 Call 0x1C17CF4
	036 Move X0, 0x3AF000
	037 Move X0, [X0+440]
	038 Call 0x1C17CF4
	039 Move X0, 0x3AF000
	040 Move X0, [X0+456]
	041 Call 0x1C17CF4
	042 Move X0, 0x3F7000
	043 Move X0, [X0+3344]
	044 Call 0x1C17CF4
	045 Move X0, 0x3F7000
	046 Move X0, [X0+3352]
	047 Call 0x1C17CF4
	048 Move X0, 0x3AD000
	049 Move X0, [X0+3768]
	050 Call 0x1C17CF4
	051 Move X0, 0x3F7000
	052 Move X0, [X0+3360]
	053 Call 0x1C17CF4
	054 Move X0, 0x3AD000
	055 Move X0, [X0+3776]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X27+3351], W8
	059 Move X8, [X19]
	060 Move X9, [X26]
	061 Move X2, X31
	062 Move X8, [X8+184]
	063 Move [X8], X9
	064 Move X8, [X19]
	065 Move X1, [X25]
	066 Move X8, [X8+184]
	067 Move X0, [X8]
	068 Call String.Concat, X0, X1
	069 Move X8, [X19]
	070 Move X2, X31
	071 Move X8, [X8+184]
	072 Move [X8+8], X0
	073 Move X0, [X8]
	074 Move X1, [X24]
	075 Call String.Concat, X0, X1
	076 Move X8, [X19]
	077 Move X2, X31
	078 Move X8, [X8+184]
	079 Move [X8+16], X0
	080 Move X0, [X8]
	081 Move X1, [X23]
	082 Call String.Concat, X0, X1
	083 Move X8, [X19]
	084 Move X2, X31
	085 Move X8, [X8+184]
	086 Move [X8+24], X0
	087 Move X0, [X8]
	088 Move X1, [X22]
	089 Call String.Concat, X0, X1
	090 Move X8, [X19]
	091 Move X2, X31
	092 Move X8, [X8+184]
	093 Move [X8+32], X0
	094 Move X0, [X8]
	095 Move X1, [X21]
	096 Call String.Concat, X0, X1
	097 Move X8, [X19]
	098 Move X2, X31
	099 Move X8, [X8+184]
	100 Move [X8+40], X0
	101 Move X0, [X8]
	102 Move X1, [X20]
	103 Call String.Concat, X0, X1
	104 Move X8, [X19]
	105 Move X20, [X31+64]
	106 Move X19, [X31+72]
	107 Move X22, [X31+48]
	108 Move X21, [X31+56]
	109 Move X24, [X31+32]
	110 Move X23, [X31+40]
	111 Move X8, [X8+184]
	112 Move X26, [X31+16]
	113 Move X25, [X31+24]
	114 Move [X8+48], X0
	115 Move X30, [X31+80]
	116 Move X27, [X31+88]
	117 Return 

