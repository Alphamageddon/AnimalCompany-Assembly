Type: UnityEngine.UIElements.UQueryState`1/Enumerator

Method: System.Void .ctor(UnityEngine.UIElements.UQueryState`1<T> queryState)

Disassembly:
	0x02BC6564 MOV X19, X0
	0x02BC6568 MOV X20, X1
	0x02BC656C CBZ W8, 0x2BC6588
	0x02BC6570 LDR X9, [X19]
	0x02BC6574 CBZ X9, 0x2BC65E0
	0x02BC6578 LDR W9, [X9 + 0x18]
	0x02BC657C ADD W9, W9, 0x1
	0x02BC6580 CMP W8, W9
	0x02BC6584 B.NE 0x2BC6590
	0x02BC6588 MOV X0, X31
	0x02BC658C BL 0x339E0E8
	0x02BC6590 LDR X0, [X20 + 0x20]
	0x02BC6594 ADD X8, X0, 0x135
	0x02BC6598 LDRH W8, [X8]
	0x02BC659C TBNZ X8, 0x0, 0x2BC65B0
	0x02BC65A0 BL 0x1C5C684
	0x02BC65A4 LDR X0, [X20 + 0x20]
	0x02BC65A8 ADD X8, X0, 0x135
	0x02BC65AC LDRH W8, [X8]
	0x02BC65B0 LDP X9, X10, [X19 + 0x10]
	0x02BC65B4 STP X9, X10, [X31]
	0x02BC65B8 TBNZ X8, 0x0, 0x2BC65C0
	0x02BC65BC BL 0x1C5C684
	0x02BC65C0 LDR X8, [X0 + 0xC0]
	0x02BC65C4 ADD X1, X31, 0x0
	0x02BC65C8 LDR X0, [X8 + 0x10]
	0x02BC65CC BL 0x1C16E04
	0x02BC65D0 LDP X20, X19, [X31 + 0x20]
	0x02BC65D4 LDR X30, [X31 + 0x10]
	0x02BC65D8 ADD X31, X31, 0x30
	0x02BC65DC RET
	0x02BC65E0 BL 0x1C16F20
	0x02BC65E4 STP X30, X19, [X31 - 0x10]!
	0x02BC65E8 LDR X8, [X0]
	0x02BC65EC CBZ X8, 0x2BC661C
	0x02BC65F0 LDR W9, [X0 + 0xC]
	0x02BC65F4 LDR W8, [X8 + 0x1C]
	0x02BC65F8 MOV X19, X0
	0x02BC65FC CMP W9, W8
	0x02BC6600 B.EQ 0x2BC660C
	0x02BC6604 MOV X0, X31
	0x02BC6608 BL 0x339E09C
	0x02BC660C STR W31, [X19 + 0x8]
	0x02BC6610 STP X31, X31, [X19 + 0x10]
	0x02BC6614 LDP X30, X19, [X31], #0x10
	0x02BC6618 RET
	0x02BC661C BL 0x1C16F20
	0x02BC6620 STR X30, [X31 - 0x10]!
	0x02BC6624 STR X1, [X0]
	0x02BC6628 STR W31, [X0 + 0x8]
	0x02BC662C CBZ X1, 0x2BC6644
	0x02BC6630 LDR W8, [X1 + 0x1C]
	0x02BC6634 STP X31, X31, [X0 + 0x10]
	0x02BC6638 STR W8, [X0 + 0xC]
	0x02BC663C LDR X30, [X31], #0x10
	0x02BC6640 RET
	0x02BC6644 BL 0x1C16F20
	0x02BC6648 RET
	0x02BC664C STP X30, X19, [X31 - 0x10]!
	0x02BC6650 LDR X9, [X0]
	0x02BC6654 CBZ X9, 0x2BC66D0
	0x02BC6658 LDR W8, [X0 + 0xC]
	0x02BC665C LDR W10, [X9 + 0x1C]
	0x02BC6660 MOV X19, X0
	0x02BC6664 CMP W8, W10
	0x02BC6668 B.NE 0x2BC66AC
	0x02BC666C LDRSW X8, [X19 + 0x8]
	0x02BC6670 LDR W10, [X9 + 0x18]
	0x02BC6674 CMP W8, W10
	0x02BC6678 B.CS 0x2BC66AC
	0x02BC667C LDR X9, [X9 + 0x10]
	0x02BC6680 CBZ X9, 0x2BC66D0
	0x02BC6684 LDR W10, [X9 + 0x18]
	0x02BC6688 CMP W8, W10
	0x02BC668C B.CS 0x2BC66D4
	0x02BC6690 ADD X9, X9, X8, 0x4, LSL
	0x02BC6694 LDR V0, [X9 + 0x2]
	0x02BC6698 ADD W8, W8, 0x1
	0x02BC669C STR W8, [X19 + 0x8]
	0x02BC66A0 MOVZ W0, 0x1
	0x02BC66A4 STR V0, [X19 + 0x1]
	0x02BC66A8 B 0x2BC66C8
	0x02BC66AC LDR X0, [X1 + 0x20]
	0x02BC66B0 LDRB W8, [X0 + 0x135]
	0x02BC66B4 TBNZ X8, 0x0, 0x2BC66BC
	0x02BC66B8 BL 0x1C5C684
	0x02BC66BC MOV X0, X19
	0x02BC66C0 BL 0x2BC66D8
	0x02BC66C4 MOV W0, W31
	0x02BC66C8 LDP X30, X19, [X31], #0x10
	0x02BC66CC RET
	0x02BC66D0 BL 0x1C16F20
	0x02BC66D4 BL 0x1C16F28
	0x02BC66D8 STP X30, X19, [X31 - 0x10]!
	0x02BC66DC LDR X8, [X0]
	0x02BC66E0 CBZ X8, 0x2BC6724
	0x02BC66E4 LDR W9, [X0 + 0xC]
	0x02BC66E8 LDR W10, [X8 + 0x1C]
	0x02BC66EC MOV X19, X0
	0x02BC66F0 CMP W9, W10
	0x02BC66F4 B.EQ 0x2BC6708

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1816000
	009 Move X24, 0x1557000
	010 Move W8, [X23+1526]
	011 Move X24, [X24+248]
	012 Move X20, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x1557000
	021 Move X0, [X0+248]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1526], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W0, W31
	031 Move X1, X31
	032 Call VisualElementListPool.Get, X0
	033 Move [X19], X0
	034 Move X0, [X20+32]
	035 Move W8, [X0+309]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {41}
	040 Call 0x1C5D684
	041 Move X8, [X0+192]
	042 Move X0, [X8+24]
	043 Move W8, [X0+309]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {49}
	048 Call 0x1C5D684
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, [X20+32]
	054 Move W8, [X0+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move X8, [X0+192]
	061 Move X0, [X8+24]
	062 Move W8, [X0+309]
	063 Move TEMP, X8
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {68}
	067 Call 0x1C5D684
	068 Move X8, [X0+184]
	069 Move X23, [X8+16]
	070 Compare X23, 0
	071 JumpIfEqual {148}
	072 Move X0, [X20+32]
	073 Move X24, [X19]
	074 Move W8, [X0+309]
	075 Move TEMP, X8
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {81}
	079 Call 0x1C5D684
	080 Move X0, [X20+32]
	081 Move [X23+24], X24
	082 Move W8, [X0+309]
	083 Move TEMP, X8
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {88}
	087 Call 0x1C5D684
	088 Move X8, [X0+192]
	089 Move X0, [X8+24]
	090 Move W8, [X0+309]
	091 Move TEMP, X8
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {96}
	095 Call 0x1C5D684
	096 Move X8, [X0+184]
	097 Move X0, [X8+16]
	098 Compare X0, 0
	099 JumpIfEqual {148}
	100 Move X8, [X0]
	101 Move X1, X22
	102 Move X2, X21
	103 Move X9, [X8+424]
	104 Move X3, [X8+432]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Move X0, [X20+32]
	107 Move W8, [X0+309]
	108 Move TEMP, X8
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfEqual {113}
	112 Call 0x1C5D684
	113 Move X8, [X0+192]
	114 Move X0, [X8+24]
	115 Move W8, [X0+309]
	116 Move TEMP, X8
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {121}
	120 Call 0x1C5D684
	121 Move X8, [X0+184]
	122 Move X21, [X8+16]
	123 Compare X21, 0
	124 JumpIfEqual {148}
	125 Move X0, [X20+32]
	126 Move W8, [X0+309]
	127 Move TEMP, X8
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {132}
	131 Call 0x1C5D684
	132 Move X8, [X0+192]
	133 Move X0, X21
	134 Move X1, [X8+40]
	135 Call 0x2EF40E0, X0
	136 Move TEMP, 0
	137 Not TEMP
	138 Move W8, TEMP
	139 Move [X19+8], W8
	140 Move X20, [X31+48]
	141 Move X19, [X31+56]
	142 Move X22, [X31+32]
	143 Move X21, [X31+40]
	144 Move X24, [X31+16]
	145 Move X23, [X31+24]
	146 Move X30, [X31+64]
	147 Return 
	148 Call 0x1C17F20

Method: T get_Current()

Disassembly:
	0x02BC66F8 MOV X0, X31
	0x02BC66FC BL 0x339E09C
	0x02BC6700 LDR X8, [X19]
	0x02BC6704 CBZ X8, 0x2BC6724
	0x02BC6708 LDR W8, [X8 + 0x18]
	0x02BC670C STP X31, X31, [X19 + 0x10]
	0x02BC6710 MOV W0, W31
	0x02BC6714 ADD W8, W8, 0x1
	0x02BC6718 STR W8, [X19 + 0x8]
	0x02BC671C LDP X30, X19, [X31], #0x10
	0x02BC6720 RET
	0x02BC6724 BL 0x1C16F20
	0x02BC6728 LDP X8, X1, [X0 + 0x10]
	0x02BC672C MOV X0, X8
	0x02BC6730 RET
	0x02BC6734 SUB X31, X31, 0x30
	0x02BC6738 STR X30, [X31 + 0x10]
	0x02BC673C STP X20, X19, [X31 + 0x20]
	0x02BC6740 LDR W8, [X0 + 0x8]
	0x02BC6744 MOV X19, X0
	0x02BC6748 MOV X20, X1
	0x02BC674C CBZ W8, 0x2BC6768
	0x02BC6750 LDR X9, [X19]
	0x02BC6754 CBZ X9, 0x2BC67C0
	0x02BC6758 LDR W9, [X9 + 0x18]
	0x02BC675C ADD W9, W9, 0x1
	0x02BC6760 CMP W8, W9
	0x02BC6764 B.NE 0x2BC6770
	0x02BC6768 MOV X0, X31
	0x02BC676C BL 0x339E0E8
	0x02BC6770 LDR X0, [X20 + 0x20]
	0x02BC6774 ADD X8, X0, 0x135
	0x02BC6778 LDRH W8, [X8]
	0x02BC677C TBNZ X8, 0x0, 0x2BC6790
	0x02BC6780 BL 0x1C5C684
	0x02BC6784 LDR X0, [X20 + 0x20]
	0x02BC6788 ADD X8, X0, 0x135
	0x02BC678C LDRH W8, [X8]
	0x02BC6790 LDP X9, X10, [X19 + 0x10]
	0x02BC6794 STP X9, X10, [X31]
	0x02BC6798 TBNZ X8, 0x0, 0x2BC67A0
	0x02BC679C BL 0x1C5C684
	0x02BC67A0 LDR X8, [X0 + 0xC0]
	0x02BC67A4 ADD X1, X31, 0x0
	0x02BC67A8 LDR X0, [X8 + 0x10]
	0x02BC67AC BL 0x1C16E04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1816000
	006 Move W8, [X21+1527]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1557000
	014 Move X0, [X0+240]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1527], W8
	018 Move X0, [X20]
	019 Compare X0, 0
	020 JumpIfEqual {62}
	021 Move X8, 0x1557000
	022 Move X8, [X8+240]
	023 Move W1, [X20+8]
	024 Move X2, [X8]
	025 Call List`1<Object>.get_Item, X0, X1
	026 Move X8, [X19+32]
	027 Move X19, X0
	028 Move W9, [X8+309]
	029 Move TEMP, X9
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {36}
	033 Move X0, X8
	034 Call 0x1C5D684
	035 Move X8, X0
	036 Move X8, [X8+192]
	037 Move X20, [X8+48]
	038 Move W8, [X20+309]
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {46}
	043 Move X0, X20
	044 Call 0x1C5D684
	045 Move X20, X0
	046 Compare X19, 0
	047 JumpIfEqual {56}
	048 Move X0, X19
	049 Move X1, X20
	050 Call 0x1C17E00
	051 Compare X0, 0
	052 JumpIfNotEqual {57}
	053 Move X0, X19
	054 Move X1, X20
	055 Call 0x1C181E0
	056 Move X0, X31
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x02BC67B0 LDP X20, X19, [X31 + 0x20]
	0x02BC67B4 LDR X30, [X31 + 0x10]
	0x02BC67B8 ADD X31, X31, 0x30
	0x02BC67BC RET
	0x02BC67C0 BL 0x1C16F20
	0x02BC67C4 STP X30, X19, [X31 - 0x10]!
	0x02BC67C8 LDR X8, [X0]
	0x02BC67CC CBZ X8, 0x2BC67FC
	0x02BC67D0 LDR W9, [X0 + 0xC]
	0x02BC67D4 LDR W8, [X8 + 0x1C]
	0x02BC67D8 MOV X19, X0
	0x02BC67DC CMP W9, W8
	0x02BC67E0 B.EQ 0x2BC67EC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+32]
	004 Move X19, X0
	005 Move W9, [X8+309]
	006 Move TEMP, X9
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {13}
	010 Move X0, X8
	011 Call 0x1C5D684
	012 Move X8, X0
	013 Move X8, [X8+192]
	014 Move X0, X19
	015 Move X1, [X8+56]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call 0x2BC66F8, X0
	019 Return X0

Method: System.Boolean MoveNext()

Disassembly:
	0x02BC67E4 MOV X0, X31
	0x02BC67E8 BL 0x339E09C
	0x02BC67EC STR W31, [X19 + 0x8]
	0x02BC67F0 STP X31, X31, [X19 + 0x10]
	0x02BC67F4 LDP X30, X19, [X31], #0x10
	0x02BC67F8 RET
	0x02BC67FC BL 0x1C16F20
	0x02BC6800 LDR V0, [X1]
	0x02BC6804 MOVN W8, 0x0
	0x02BC6808 STR W8, [X0 + 0x10]
	0x02BC680C STUR X31, [X0 + 0x14]
	0x02BC6810 STR V0, [X0]
	0x02BC6814 RET
	0x02BC6818 RET
	0x02BC681C STR X30, [X31 - 0x30]!
	0x02BC6820 STP X22, X21, [X31 + 0x10]
	0x02BC6824 STP X20, X19, [X31 + 0x20]
	0x02BC6828 LDR W8, [X0 + 0x10]
	0x02BC682C LDR W20, [X0 + 0x8]
	0x02BC6830 MOV X19, X0
	0x02BC6834 ADD W21, W8, 0x1
	0x02BC6838 CMP W21, W20
	0x02BC683C STR W21, [X0 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1816000
	005 Move W8, [X20+1528]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1557000
	012 Move X0, [X0+232]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1528], W8
	016 Move W8, [X19+8]
	017 Move X9, [X19]
	018 Add W8, W8, 1
	019 Move [X19+8], W8
	020 Compare X9, 0
	021 JumpIfEqual {29}
	022 Move W9, [X9+24]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move X30, [X31+32]
	028 Return X0
	029 Call 0x1C17F20

Method: System.Void Reset()

Disassembly:
	0x02BC6840 B.GE 0x2BC6864
	0x02BC6844 LDR X0, [X1 + 0x20]
	0x02BC6848 LDR X22, [X19]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move [X0+8], W8
	005 Return 

Method: System.Void Dispose()

Disassembly:
	0x02BC684C LDRB W8, [X0 + 0x135]
	0x02BC6850 TBNZ X8, 0x0, 0x2BC6858
	0x02BC6854 BL 0x1C5C684
	0x02BC6858 LDR X8, [X22, W21, SXTW]
	0x02BC685C STUR X8, [X19 + 0x14]
	0x02BC6860 B 0x2BC6868
	0x02BC6864 STUR X31, [X19 + 0x14]
	0x02BC6868 CMP W21, W20
	0x02BC686C LDP X20, X19, [X31 + 0x20]
	0x02BC6870 LDP X22, X21, [X31 + 0x10]
	0x02BC6874 CSET W0, LT
	0x02BC6878 LDR X30, [X31], #0x30
	0x02BC687C RET
	0x02BC6880 MOVN W8, 0x0
	0x02BC6884 STR W8, [X0 + 0x10]
	0x02BC6888 RET
	0x02BC688C LDUR X0, [X0 + 0x14]
	0x02BC6890 RET
	0x02BC6894 STR X30, [X31 - 0x20]!
	0x02BC6898 STP X20, X19, [X31 + 0x10]
	0x02BC689C LDR X8, [X1 + 0x20]
	0x02BC68A0 MOV X19, X0
	0x02BC68A4 ADD X9, X8, 0x135
	0x02BC68A8 LDRH W9, [X9]
	0x02BC68AC TBNZ X9, 0x0, 0x2BC68C8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1816000
	006 Move X20, 0x1557000
	007 Move W8, [X21+1529]
	008 Move X20, [X20+248]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x1557000
	015 Move X0, [X0+248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1529], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Call VisualElementListPool.Release, X0
	028 Move [X19], X31
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

