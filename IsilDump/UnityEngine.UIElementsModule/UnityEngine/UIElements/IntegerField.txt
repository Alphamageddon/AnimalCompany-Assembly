Type: UnityEngine.UIElements.IntegerField

Method: UnityEngine.UIElements.IntegerField/IntegerInput get_integerInput()

Disassembly:
	0x03D6BC00 MOV X0, X19
	0x03D6BC04 MOV X1, X21
	0x03D6BC08 MOV W2, W20
	0x03D6BC0C MOV X3, X22
	0x03D6BC10 BL 0x26E8610
	0x03D6BC14 LDR X0, [X23]
	0x03D6BC18 LDR W8, [X0 + 0xE0]
	0x03D6BC1C CBNZ W8, 0x3D6BC28
	0x03D6BC20 BL 0x1C16DFC
	0x03D6BC24 LDR X0, [X23]
	0x03D6BC28 LDR X8, [X0 + 0xB8]
	0x03D6BC2C MOV X0, X19
	0x03D6BC30 MOV X2, X31
	0x03D6BC34 LDR X1, [X8]
	0x03D6BC38 BL 0x3DF1C70
	0x03D6BC3C LDR X0, [X19 + 0x400]
	0x03D6BC40 CBZ X0, 0x3D6BCA8
	0x03D6BC44 LDR X8, [X23]
	0x03D6BC48 ADRP X20, 0x3FB000
	0x03D6BC4C MOV X2, X31
	0x03D6BC50 LDR X8, [X8 + 0xB8]
	0x03D6BC54 LDR X1, [X8 + 0x8]
	0x03D6BC58 LDR X20, [X20 + 0xBF0]
	0x03D6BC5C BL 0x3DF1C70
	0x03D6BC60 LDR X1, [X20]
	0x03D6BC64 MOV X0, X19
	0x03D6BC68 BL 0x27814B8
	0x03D6BC6C CBZ X0, 0x3D6BCA8
	0x03D6BC70 LDR X8, [X23]
	0x03D6BC74 ADRP X20, 0x3FB000
	0x03D6BC78 MOV X2, X31
	0x03D6BC7C LDR X8, [X8 + 0xB8]
	0x03D6BC80 LDR X1, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67D000
	005 Move W8, [X20+3301]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x3FC000
	012 Move X0, [X0+2808]
	013 Call 0x1C17CF4
	014 Move X0, 0x3FC000
	015 Move X0, [X0+2816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3301], W8
	019 Move X0, [X19+1096]
	020 Compare X0, 0
	021 JumpIfEqual {33}
	022 Move X9, 0x3FC000
	023 Move X9, [X9+2808]
	024 Move X8, [X0]
	025 Move X1, [X9]
	026 Move W10, [X8+304]
	027 Move W9, [X1+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X8+200]
	030 Add X8, X8, X9
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C181E0

Method: System.String ValueToString(System.Int32 v)

Disassembly:
	0x03D6BC84 LDR X20, [X20 + 0xBF8]
	0x03D6BC88 BL 0x3DF1C70
	0x03D6BC8C LDR X1, [X20]
	0x03D6BC90 MOV X0, X19
	0x03D6BC94 LDP X20, X19, [X31 + 0x30]
	0x03D6BC98 LDP X22, X21, [X31 + 0x20]
	0x03D6BC9C LDP X24, X23, [X31 + 0x10]
	0x03D6BCA0 LDP X30, X25, [X31], #0x40
	0x03D6BCA4 B 0x213C978
	0x03D6BCA8 BL 0x1C16F20
	0x03D6BCAC STR X30, [X31 - 0x30]!
	0x03D6BCB0 STP X22, X21, [X31 + 0x10]
	0x03D6BCB4 STP X20, X19, [X31 + 0x20]
	0x03D6BCB8 ADRP X21, 0x67C000
	0x03D6BCBC ADRP X22, 0x3FB000
	0x03D6BCC0 ADRP X20, 0x3F4000
	0x03D6BCC4 LDRB W8, [X21 + 0xD01]
	0x03D6BCC8 LDR X22, [X22 + 0xC00]
	0x03D6BCCC LDR X20, [X20 + 0x7A8]
	0x03D6BCD0 MOV X19, X0
	0x03D6BCD4 TBNZ X8, 0x0, 0x3D6BD04
	0x03D6BCD8 ADRP X0, 0x3FB000
	0x03D6BCDC LDR X0, [X0 + 0xC00]
	0x03D6BCE0 BL 0x1C16CF4
	0x03D6BCE4 ADRP X0, 0x3FB000
	0x03D6BCE8 LDR X0, [X0 + 0xC08]
	0x03D6BCEC BL 0x1C16CF4
	0x03D6BCF0 ADRP X0, 0x3F4000
	0x03D6BCF4 LDR X0, [X0 + 0x7A8]
	0x03D6BCF8 BL 0x1C16CF4
	0x03D6BCFC MOVZ W8, 0x1
	0x03D6BD00 STRB W8, [X21 + 0xD01]
	0x03D6BD04 LDR X1, [X22]
	0x03D6BD08 MOV X0, X19
	0x03D6BD0C BL 0x26ECA38
	0x03D6BD10 LDR X0, [X20]
	0x03D6BD14 LDR W8, [X0 + 0xE0]
	0x03D6BD18 CBNZ W8, 0x3D6BD24
	0x03D6BD1C BL 0x1C16DFC
	0x03D6BD20 LDR X0, [X20]
	0x03D6BD24 LDR X8, [X0 + 0xB8]
	0x03D6BD28 LDP X22, X21, [X31 + 0x10]
	0x03D6BD2C LDR X8, [X8 + 0x20]
	0x03D6BD30 STR X8, [X19 + 0x400]
	0x03D6BD34 LDP X20, X19, [X31 + 0x20]
	0x03D6BD38 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67D000
	007 Move [X31+12], W1
	008 Move X22, 0x3FC000
	009 Move X20, 0x38B000
	010 Move W8, [X21+3302]
	011 Move X22, [X22+2824]
	012 Move X20, [X20+3144]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x38B000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FC000
	022 Move X0, [X0+2824]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3302], W8
	026 Move X1, [X22]
	027 Move X0, X19
	028 Call TextValueField`1<Int32>.get_formatString, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Compare X0, 0
	039 JumpIfEqual {55}
	040 Move X8, [X0]
	041 Move X9, [X8+536]
	042 Move X1, [X8+544]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X2, X0
	045 Add X0, X31, 12
	046 Move X1, X19
	047 Move X3, X31
	048 Call Int32.ToString, X0, X1, X2
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0
	055 Call 0x1C17F20

Method: System.Int32 StringToValue(System.String str)

Disassembly:
	0x03D6BD3C RET
	0x03D6BD40 STR X30, [X31 - 0x10]!
	0x03D6BD44 MOV X0, X1
	0x03D6BD48 ADD X1, X31, 0x8
	0x03D6BD4C MOV X2, X31
	0x03D6BD50 STR X31, [X31 + 0x8]
	0x03D6BD54 BL 0x337D588
	0x03D6BD58 AND W0, W0, 0x1
	0x03D6BD5C LDR X30, [X31], #0x10
	0x03D6BD60 RET
	0x03D6BD64 STR D10, [X31 - 0x30]!
	0x03D6BD68 STP D9, D8, [X31 + 0x8]
	0x03D6BD6C STR X30, [X31 + 0x18]
	0x03D6BD70 STP X20, X19, [X31 + 0x20]
	0x03D6BD74 MOV X19, X2
	0x03D6BD78 MOV W20, W1
	0x03D6BD7C MOV V8.16B, V2.16B
	0x03D6BD80 MOV V9.16B, V1.16B
	0x03D6BD84 MOV V10.16B, V0.16B
	0x03D6BD88 BL 0x3D6B938
	0x03D6BD8C CBZ X0, 0x3D6BDC4
	0x03D6BD90 LDR X8, [X0]
	0x03D6BD94 MOV V1.16B, V9.16B
	0x03D6BD98 MOV V2.16B, V8.16B
	0x03D6BD9C MOV W1, W20
	0x03D6BDA0 LDR X4, [X8 + 0x7C8]
	0x03D6BDA4 LDR X3, [X8 + 0x7D0]
	0x03D6BDA8 MOV X2, X19
	0x03D6BDAC LDP X20, X19, [X31 + 0x20]
	0x03D6BDB0 LDR X30, [X31 + 0x18]
	0x03D6BDB4 LDP D9, D8, [X31 + 0x8]
	0x03D6BDB8 MOV V0.16B, V10.16B
	0x03D6BDBC LDR V10, [X31], #0x30
	0x03D6BDC0 BR X4
	0x03D6BDC4 BL 0x1C16F20
	0x03D6BDC8 STP X30, X23, [X31 - 0x30]!
	0x03D6BDCC STP X22, X21, [X31 + 0x10]
	0x03D6BDD0 STP X20, X19, [X31 + 0x20]
	0x03D6BDD4 ADRP X23, 0x67C000
	0x03D6BDD8 ADRP X22, 0x3FB000
	0x03D6BDDC ADRP X19, 0x3FB000
	0x03D6BDE0 ADRP X21, 0x3B1000
	0x03D6BDE4 ADRP X20, 0x3B1000
	0x03D6BDE8 LDRB W8, [X23 + 0xCFD]
	0x03D6BDEC LDR X22, [X22 + 0xC10]
	0x03D6BDF0 LDR X19, [X19 + 0xBE0]
	0x03D6BDF4 LDR X21, [X21 + 0xEB8]
	0x03D6BDF8 LDR X20, [X20 + 0xEC0]
	0x03D6BDFC TBNZ X8, 0x0, 0x3D6BE38
	0x03D6BE00 ADRP X0, 0x3FB000
	0x03D6BE04 LDR X0, [X0 + 0xBE0]
	0x03D6BE08 BL 0x1C16CF4
	0x03D6BE0C ADRP X0, 0x3FB000
	0x03D6BE10 LDR X0, [X0 + 0xC10]
	0x03D6BE14 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67D000
	007 Move W8, [X21+3303]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x3FC000
	015 Move X0, [X0+2832]
	016 Call 0x1C17CF4
	017 Move X0, 0x3FC000
	018 Move X0, [X0+2816]
	019 Call 0x1C17CF4
	020 Move X0, 0x3FC000
	021 Move X0, [X0+2840]
	022 Call 0x1C17CF4
	023 Move X0, 0x3F5000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3303], W8
	028 Move [X31+12], W31
	029 Move X0, [X19+1096]
	030 Compare X0, 0
	031 JumpIfEqual {66}
	032 Move X8, 0x3FC000
	033 Move X8, [X8+2840]
	034 Move X21, 0x3F5000
	035 Move X1, [X8]
	036 Move X21, [X21+1960]
	037 Call TextInputBase<Int32>.get_originalText, X0
	038 Move X8, [X21]
	039 Move X21, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Add X2, X31, 12
	046 Move X0, X20
	047 Move X1, X21
	048 Move X3, X31
	049 Call UINumericFieldsUtils.TryConvertStringToInt, X0, X1, X2
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Move W0, [X31+12]
	055 Move X8, 0x3FC000
	056 Move X8, [X8+2832]
	057 Move X0, X19
	058 Move X1, [X8]
	059 Call BaseField`1<Int32>.get_rawValue, X0
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return X0
	066 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03D6BE18 ADRP X0, 0x3B1000
	0x03D6BE1C LDR X0, [X0 + 0xEB8]
	0x03D6BE20 BL 0x1C16CF4

ISIL:
	001 Move W2, 1000
	002 Move X1, X31

Method: System.Void .ctor(System.String label, System.Int32 maxLength = 1000)

Disassembly:
	0x03D6BE24 ADRP X0, 0x3B1000
	0x03D6BE28 LDR X0, [X0 + 0xEC0]
	0x03D6BE2C BL 0x1C16CF4
	0x03D6BE30 MOVZ W8, 0x1
	0x03D6BE34 STRB W8, [X23 + 0xCFD]
	0x03D6BE38 LDR X8, [X19]
	0x03D6BE3C LDR X9, [X22]
	0x03D6BE40 MOV X2, X31
	0x03D6BE44 LDR X8, [X8 + 0xB8]
	0x03D6BE48 STR X9, [X8]
	0x03D6BE4C LDR X8, [X19]
	0x03D6BE50 LDR X1, [X21]
	0x03D6BE54 LDR X8, [X8 + 0xB8]
	0x03D6BE58 LDR X0, [X8]
	0x03D6BE5C BL 0x321B938
	0x03D6BE60 LDR X8, [X19]
	0x03D6BE64 MOV X2, X31
	0x03D6BE68 LDR X8, [X8 + 0xB8]
	0x03D6BE6C STR X0, [X8 + 0x8]
	0x03D6BE70 LDR X0, [X8]
	0x03D6BE74 LDR X1, [X20]
	0x03D6BE78 BL 0x321B938
	0x03D6BE7C LDR X8, [X19]
	0x03D6BE80 LDP X20, X19, [X31 + 0x20]
	0x03D6BE84 LDP X22, X21, [X31 + 0x10]
	0x03D6BE88 LDR X8, [X8 + 0xB8]
	0x03D6BE8C STR X0, [X8 + 0x10]
	0x03D6BE90 LDP X30, X23, [X31], #0x30
	0x03D6BE94 RET
	0x03D6BE98 STP X30, X21, [X31 - 0x20]!
	0x03D6BE9C STP X20, X19, [X31 + 0x10]
	0x03D6BEA0 ADRP X20, 0x67C000
	0x03D6BEA4 ADRP X21, 0x3FB000
	0x03D6BEA8 LDRB W8, [X20 + 0xCFE]
	0x03D6BEAC LDR X21, [X21 + 0xC18]
	0x03D6BEB0 MOV X19, X0
	0x03D6BEB4 TBNZ X8, 0x0, 0x3D6BECC
	0x03D6BEB8 ADRP X0, 0x3FB000
	0x03D6BEBC LDR X0, [X0 + 0xC18]
	0x03D6BEC0 BL 0x1C16CF4
	0x03D6BEC4 MOVZ W8, 0x1
	0x03D6BEC8 STRB W8, [X20 + 0xCFE]
	0x03D6BECC LDR X1, [X21]
	0x03D6BED0 MOV X0, X19
	0x03D6BED4 LDP X20, X19, [X31 + 0x10]
	0x03D6BED8 LDP X30, X21, [X31], #0x20
	0x03D6BEDC B 0x2736468
	0x03D6BEE0 STP X30, X21, [X31 - 0x20]!
	0x03D6BEE4 STP X20, X19, [X31 + 0x10]
	0x03D6BEE8 ADRP X20, 0x67C000
	0x03D6BEEC ADRP X21, 0x3FB000
	0x03D6BEF0 LDRB W8, [X20 + 0xCFF]
	0x03D6BEF4 LDR X21, [X21 + 0xC20]
	0x03D6BEF8 MOV X19, X0
	0x03D6BEFC TBNZ X8, 0x0, 0x3D6BF14
	0x03D6BF00 ADRP X0, 0x3FB000
	0x03D6BF04 LDR X0, [X0 + 0xC20]
	0x03D6BF08 BL 0x1C16CF4
	0x03D6BF0C MOVZ W8, 0x1
	0x03D6BF10 STRB W8, [X20 + 0xCFF]
	0x03D6BF14 LDR X1, [X21]
	0x03D6BF18 MOV X0, X19
	0x03D6BF1C LDP X20, X19, [X31 + 0x10]
	0x03D6BF20 LDP X30, X21, [X31], #0x20
	0x03D6BF24 B 0x26E66A8
	0x03D6BF28 STR X30, [X31 - 0x20]!
	0x03D6BF2C STP X20, X19, [X31 + 0x10]
	0x03D6BF30 ADRP X20, 0x67C000
	0x03D6BF34 LDRB W8, [X20 + 0xD00]
	0x03D6BF38 MOV X19, X0
	0x03D6BF3C TBNZ X8, 0x0, 0x3D6BF54
	0x03D6BF40 ADRP X0, 0x3FB000
	0x03D6BF44 LDR X0, [X0 + 0xBE0]
	0x03D6BF48 BL 0x1C16CF4
	0x03D6BF4C MOVZ W8, 0x1
	0x03D6BF50 STRB W8, [X20 + 0xD00]
	0x03D6BF54 MOV X0, X19
	0x03D6BF58 MOV X1, X31
	0x03D6BF5C BL 0x3DEBF58
	0x03D6BF60 CBZ X0, 0x3D6BF98
	0x03D6BF64 ADRP X9, 0x3FB000
	0x03D6BF68 LDR X9, [X9 + 0xBE0]
	0x03D6BF6C LDR X8, [X0]
	0x03D6BF70 LDR X1, [X9]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x67D000
	010 Move X25, 0x3FC000
	011 Move X24, 0x3FC000
	012 Move X23, 0x3FC000
	013 Move W8, [X22+3304]
	014 Move X25, [X25+2808]
	015 Move X24, [X24+2848]
	016 Move X23, [X23+2856]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x3FC000
	025 Move X0, [X0+2864]
	026 Call 0x1C17CF4
	027 Move X0, 0x3FC000
	028 Move X0, [X0+2872]
	029 Call 0x1C17CF4
	030 Move X0, 0x3FC000
	031 Move X0, [X0+2856]
	032 Call 0x1C17CF4
	033 Move X0, 0x3FC000
	034 Move X0, [X0+2808]
	035 Call 0x1C17CF4
	036 Move X0, 0x3FC000
	037 Move X0, [X0+2880]
	038 Call 0x1C17CF4
	039 Move X0, 0x3FC000
	040 Move X0, [X0+2848]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+3304], W8
	044 Move X0, [X25]
	045 Call 0x1C17F10
	046 Move X22, X0
	047 Call IntegerInput..ctor, X0
	048 Move X4, [X24]
	049 Move X0, X19
	050 Move X1, X21
	051 Move W2, W20
	052 Move X3, X22
	053 Call TextValueField`1<Int32>..ctor, X0, X1, X2, X3
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X0+184]
	061 Move X0, X19
	062 Move X2, X31
	063 Move X1, [X8]
	064 Call VisualElement.AddToClassList, X0, X1
	065 Move X0, [X19+1024]
	066 Compare X0, 0
	067 JumpIfEqual {99}
	068 Move X8, [X23]
	069 Move X20, 0x3FC000
	070 Move X2, X31
	071 Move X8, [X8+184]
	072 Move X1, [X8+8]
	073 Move X20, [X20+2872]
	074 Call VisualElement.AddToClassList, X0, X1
	075 Move X1, [X20]
	076 Move X0, X19
	077 Call BaseField`1<Int32>.get_visualInput, X0
	078 Compare X0, 0
	079 JumpIfEqual {99}
	080 Move X8, [X23]
	081 Move X20, 0x3FC000
	082 Move X2, X31
	083 Move X8, [X8+184]
	084 Move X1, [X8+16]
	085 Move X20, [X20+2880]
	086 Call VisualElement.AddToClassList, X0, X1
	087 Move X1, [X20]
	088 Move X0, X19
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Move X25, [X31+72]
	097 Call TextValueField`1<Int32>.AddLabelDragger, X0
	098 Return 
	099 Call 0x1C17F20

Method: System.Boolean CanTryParse(System.String textString)

Disassembly:
	0x03D6C008 STR X30, [X31 + 0x20]
	0x03D6C00C STP X24, X23, [X31 + 0x30]
	0x03D6C010 STP X22, X21, [X31 + 0x40]
	0x03D6C014 STP X20, X19, [X31 + 0x50]
	0x03D6C018 ADRP X24, 0x67B000
	0x03D6C01C ADRP X23, 0x3FA000
	0x03D6C020 ADRP X22, 0x387000
	0x03D6C024 LDRB W8, [X24 + 0xD03]
	0x03D6C028 LDR X23, [X23 + 0xC28]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X1
	003 Add X1, X31, 12
	004 Move X2, X31
	005 Move [X31+12], W31
	006 Call Int32.TryParse, X0, X1
	007 And W0, W0, 1
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.Int32 startValue)

Disassembly:
	0x03D6C02C LDR X22, [X22 + 0x5A8]
	0x03D6C030 MOV X21, X2
	0x03D6C034 MOV W20, W1
	0x03D6C038 MOV V8.16B, V1.16B
	0x03D6C03C MOV V9.16B, V0.16B
	0x03D6C040 MOV X19, X0
	0x03D6C044 TBNZ X8, 0x0, 0x3D6C080
	0x03D6C048 ADRP X0, 0x387000
	0x03D6C04C LDR X0, [X0 + 0x5A8]
	0x03D6C050 BL 0x1C16CF4
	0x03D6C054 ADRP X0, 0x3FA000
	0x03D6C058 LDR X0, [X0 + 0xC30]
	0x03D6C05C BL 0x1C16CF4
	0x03D6C060 ADRP X0, 0x3FA000
	0x03D6C064 LDR X0, [X0 + 0xC28]
	0x03D6C068 BL 0x1C16CF4
	0x03D6C06C ADRP X0, 0x3FA000
	0x03D6C070 LDR X0, [X0 + 0xC38]
	0x03D6C074 BL 0x1C16CF4
	0x03D6C078 MOVZ W8, 0x1
	0x03D6C07C STRB W8, [X24 + 0xD03]
	0x03D6C080 MOV X0, X21
	0x03D6C084 MOV X1, X31
	0x03D6C088 BL 0x3C2F82C
	0x03D6C08C CMP W20, 0x0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W19, W2
	008 Move W20, W1
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Call IntegerField.get_integerInput, X0
	013 Compare X0, 0
	014 JumpIfEqual {30}
	015 Move X8, [X0]
	016 Move V1, V9
	017 Move V2, V8
	018 Move W1, W20
	019 Move X4, [X8+1992]
	020 Move X3, [X8+2000]
	021 Move W2, W19
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+24]
	025 Move D9, [X31+8]
	026 Move D8, [X31+16]
	027 Move V0, V10
	028 Move V10, [X31+48]
	029 CallNoReturn X4
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03D6C090 SCVTF D11, X0
	0x03D6C094 CSET W0, EQ
	0x03D6C098 CMP W20, 0x2
	0x03D6C09C CSET W1, EQ
	0x03D6C0A0 MOV X2, X31
	0x03D6C0A4 BL 0x3C2F590
	0x03D6C0A8 LDR X1, [X23]
	0x03D6C0AC MOV X0, X19
	0x03D6C0B0 MOV V10.16B, V0.16B
	0x03D6C0B4 BL 0x26BCC2C
	0x03D6C0B8 LDR X8, [X19]
	0x03D6C0BC MOV X1, X0
	0x03D6C0C0 MOV X0, X19
	0x03D6C0C4 LDR X9, [X8 + 0x778]
	0x03D6C0C8 LDR X2, [X8 + 0x780]
	0x03D6C0CC BLR X9
	0x03D6C0D0 MOV X20, X0
	0x03D6C0D4 MOV V0.16B, V9.16B
	0x03D6C0D8 MOV V1.16B, V8.16B
	0x03D6C0DC MOV V2.16B, V10.16B
	0x03D6C0E0 MOV X0, X31
	0x03D6C0E4 BL 0x3C2F5B4
	0x03D6C0E8 LDR X0, [X22]
	0x03D6C0EC MOV V8.16B, V0.16B
	0x03D6C0F0 LDR W8, [X0 + 0xE0]
	0x03D6C0F4 CBNZ W8, 0x3D6C0FC
	0x03D6C0F8 BL 0x1C16DFC
	0x03D6C0FC FCVT S0, S8
	0x03D6C100 FMUL D8, D11, D0
	0x03D6C104 ADD X0, X31, 0x28
	0x03D6C108 MOV V0.16B, V8.16B
	0x03D6C10C BL 0x3EB1C00
	0x03D6C110 FCMP D8, 0x0
	0x03D6C114 B.GE 0x3D6C130
	0x03D6C118 FMOV D1, -0.5
	0x03D6C11C FCMP D0, D1
	0x03D6C120 B.NE 0x3D6C158
	0x03D6C124 LDR V0, [X31 + 0x28]
	0x03D6C128 FMOV D1, -1
	0x03D6C12C B 0x3D6C144
	0x03D6C130 FMOV D1, 0.5
	0x03D6C134 FCMP D0, D1
	0x03D6C138 B.NE 0x3D6C164
	0x03D6C13C LDR V0, [X31 + 0x28]
	0x03D6C140 FMOV D1, 1
	0x03D6C144 FCVTZS X8, D0
	0x03D6C148 FADD D1, D0, D1
	0x03D6C14C ANDS X31, X8, 0x1
	0x03D6C150 FCSEL D0, D0, D1, EQ
	0x03D6C154 B 0x3D6C16C
	0x03D6C158 FADD D0, D8, D1
	0x03D6C15C FRINTP D0, D0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x67C000
	008 Move X22, 0x3FB000
	009 Move X19, 0x3FB000
	010 Move X21, 0x3B1000
	011 Move X20, 0x3B1000
	012 Move W8, [X23+3305]
	013 Move X22, [X22+2904]
	014 Move X19, [X19+2856]
	015 Move X21, [X21+3768]
	016 Move X20, [X20+3776]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x3FB000
	022 Move X0, [X0+2856]
	023 Call 0x1C17CF4
	024 Move X0, 0x3B1000
	025 Move X0, [X0+3768]
	026 Call 0x1C17CF4
	027 Move X0, 0x3FB000
	028 Move X0, [X0+2904]
	029 Call 0x1C17CF4
	030 Move X0, 0x3B1000
	031 Move X0, [X0+3776]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+3305], W8
	035 Move X8, [X19]
	036 Move X9, [X22]
	037 Move X2, X31
	038 Move X8, [X8+184]
	039 Move [X8], X9
	040 Move X8, [X19]
	041 Move X1, [X21]
	042 Move X8, [X8+184]
	043 Move X0, [X8]
	044 Call String.Concat, X0, X1
	045 Move X8, [X19]
	046 Move X2, X31
	047 Move X8, [X8+184]
	048 Move [X8+8], X0
	049 Move X0, [X8]
	050 Move X1, [X20]
	051 Call String.Concat, X0, X1
	052 Move X8, [X19]
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X8, [X8+184]
	058 Move [X8+16], X0
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

