Type: UnityEngine.UIElements.UIR.Page/DataSet`1

Method: System.Void .ctor(UnityEngine.UIElements.UIR.Utility/GPUBufferType bufferType, System.UInt32 totalCount, System.UInt32 maxQueuedFrameCount, System.UInt32 updateRangePoolSize, System.Boolean mockBuffer)

Disassembly:
	0x029AD0C8 LDR X8, [X8 + 0xC0]
	0x029AD0CC LDR X1, [X8 + 0x28]
	0x029AD0D0 LDR X8, [X1]
	0x029AD0D4 BLR X8
	0x029AD0D8 STR W0, [X19 + 0x4C]
	0x029AD0DC ADRP X8, 0x1771000
	0x029AD0E0 LDR X8, [X8 + 0x598]
	0x029AD0E4 STR W20, [X19 + 0x48]
	0x029AD0E8 MUL W1, W20, W21
	0x029AD0EC ADD X0, X31, 0x0
	0x029AD0F0 LDR X4, [X8]
	0x029AD0F4 MOVZ W2, 0x4
	0x029AD0F8 MOV W3, W31
	0x029AD0FC STP X31, X31, [X31]
	0x029AD100 BL 0x23D2DA4
	0x029AD104 ADRP X8, 0xFFFFFFFFFE13D000
	0x029AD108 LDR V0, [X31]
	0x029AD10C LDR V1, [X8 + 0xFD]
	0x029AD110 LDP X22, X21, [X31 + 0x40]
	0x029AD114 LDP X24, X23, [X31 + 0x30]
	0x029AD118 STR V0, [X19 + 0x3]
	0x029AD11C STR V1, [X19 + 0x5]
	0x029AD120 LDP X20, X19, [X31 + 0x50]
	0x029AD124 LDP X26, X25, [X31 + 0x20]
	0x029AD128 LDP X30, X27, [X31 + 0x10]
	0x029AD12C ADD X31, X31, 0x60
	0x029AD130 RET
	0x029AD134 BL 0x1C16F20
	0x029AD138 LDRB W0, [X0 + 0x10]
	0x029AD13C RET
	0x029AD140 AND W8, W1, 0x1
	0x029AD144 STRB W8, [X0 + 0x10]
	0x029AD148 RET
	0x029AD14C STR X30, [X31 - 0x30]!
	0x029AD150 STP X22, X21, [X31 + 0x10]
	0x029AD154 STP X20, X19, [X31 + 0x20]
	0x029AD158 ADRP X22, 0x1A2D000
	0x029AD15C ADRP X21, 0x174D000
	0x029AD160 LDRB W8, [X22 + 0xF99]
	0x029AD164 LDR X21, [X21 + 0xC10]
	0x029AD168 MOV X20, X1
	0x029AD16C MOV X19, X0
	0x029AD170 TBNZ X8, 0x0, 0x29AD188
	0x029AD174 ADRP X0, 0x174D000
	0x029AD178 LDR X0, [X0 + 0xC10]
	0x029AD17C BL 0x1C16CF4
	0x029AD180 MOVZ W8, 0x1
	0x029AD184 STRB W8, [X22 + 0xF99]
	0x029AD188 LDR X8, [X20 + 0x20]
	0x029AD18C MOVZ W1, 0x1
	0x029AD190 MOV X0, X19
	0x029AD194 LDR X8, [X8 + 0xC0]
	0x029AD198 LDR X2, [X8 + 0x30]
	0x029AD19C LDR X8, [X2]
	0x029AD1A0 BLR X8
	0x029AD1A4 LDR X0, [X21]
	0x029AD1A8 LDR W8, [X0 + 0xE0]
	0x029AD1AC CBNZ W8, 0x29AD1B4
	0x029AD1B0 BL 0x1C16DFC
	0x029AD1B4 MOV X0, X19
	0x029AD1B8 LDP X20, X19, [X31 + 0x20]
	0x029AD1BC LDP X22, X21, [X31 + 0x10]
	0x029AD1C0 MOV X1, X31
	0x029AD1C4 LDR X30, [X31], #0x30
	0x029AD1C8 B 0x33B3E9C
	0x029AD1CC STR X30, [X31 - 0x30]!
	0x029AD1D0 STP X22, X21, [X31 + 0x10]
	0x029AD1D4 STP X20, X19, [X31 + 0x20]
	0x029AD1D8 ADRP X22, 0x1A2D000
	0x029AD1DC LDRB W8, [X22 + 0xF9A]
	0x029AD1E0 MOV X20, X2
	0x029AD1E4 MOV W21, W1
	0x029AD1E8 MOV X19, X0
	0x029AD1EC TBNZ X8, 0x0, 0x29AD204
	0x029AD1F0 ADRP X0, 0x1771000
	0x029AD1F4 LDR X0, [X0 + 0x5A0]
	0x029AD1F8 BL 0x1C16CF4
	0x029AD1FC MOVZ W8, 0x1
	0x029AD200 STRB W8, [X22 + 0xF9A]
	0x029AD204 LDR X8, [X20 + 0x20]
	0x029AD208 MOV X0, X19
	0x029AD20C LDR X8, [X8 + 0xC0]
	0x029AD210 LDR X1, [X8 + 0x38]
	0x029AD214 LDR X8, [X1]
	0x029AD218 BLR X8
	0x029AD21C TBZ X0, 0x0, 0x29AD230
	0x029AD220 LDP X20, X19, [X31 + 0x20]
	0x029AD224 LDP X22, X21, [X31 + 0x10]
	0x029AD228 LDR X30, [X31], #0x30
	0x029AD22C RET
	0x029AD230 TBZ X21, 0x0, 0x29AD27C
	0x029AD234 LDR X0, [X19 + 0x18]
	0x029AD238 CBZ X0, 0x29AD250
	0x029AD23C LDR X8, [X20 + 0x20]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X26, 0x1A2E000
	013 Move W8, [X26+3978]
	014 Move X22, X6
	015 Move W23, W5
	016 Move W20, W4
	017 Move W21, W3
	018 Move W24, W2
	019 Move W25, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0x1772000
	026 Move X0, [X0+1424]
	027 Call 0x1C17CF4
	028 Move X0, 0x1772000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X26+3978], W8
	033 Move X27, 0x1772000
	034 Move X27, [X27+1424]
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object..ctor, X0
	038 Move TEMP, X23
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {60}
	042 Move X8, [X22+32]
	043 Move X8, [X8+192]
	044 Move X0, [X8]
	045 Move W8, [X0+309]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {51}
	050 Call 0x1C5D684
	051 Call 0x1C17F10
	052 Move X8, [X22+32]
	053 Move W1, W24
	054 Move W2, W25
	055 Move X26, X0
	056 Move X8, [X8+192]
	057 Move X3, [X8+8]
	058 Call 0x2D43B4C, X0, X1, X2
	059 Move [X19+24], X26
	060 Move [X31], X31
	061 Move [X31+8], X31
	062 Move X8, [X22+32]
	063 Add X0, X31, 0
	064 Move W2, 4
	065 Move W1, W24
	066 Move X8, [X8+192]
	067 Move W3, W31
	068 Move X4, [X8+32]
	069 Call NativeArray`1<UInt16>..ctor, X0, X1, X2, X3
	070 Move V0, [X31]
	071 Move [X19+2], V0
	072 Move X0, [X27]
	073 Call 0x1C17F10
	074 Move W1, W24
	075 Move X2, X31
	076 Move X25, X0
	077 Call GPUBufferAllocator..ctor, X0, X1
	078 Move [X19+64], X25
	079 Move TEMP, X23
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {91}
	083 Move X0, [X19+24]
	084 Compare X0, 0
	085 JumpIfEqual {119}
	086 Move X8, [X22+32]
	087 Move X8, [X8+192]
	088 Move X1, [X8+40]
	089 Call 0x2D43D2C, X0
	090 Move [X19+76], W0
	091 Move X8, 0x1772000
	092 Move X8, [X8+1432]
	093 Move [X19+72], W20
	094 Multiply W1, W20, W21
	095 Add X0, X31, 0
	096 Move X4, [X8]
	097 Move W2, 4
	098 Move W3, W31
	099 Move [X31], X31
	100 Move [X31+8], X31
	101 Call NativeArray`1<GfxUpdateBufferRange>..ctor, X0, X1, X2, X3
	102 Move X8, -32251904
	103 Move V0, [X31]
	104 Move V1, [X8+253]
	105 Move X22, [X31+64]
	106 Move X21, [X31+72]
	107 Move X24, [X31+48]
	108 Move X23, [X31+56]
	109 Move [X19+3], V0
	110 Move [X19+5], V1
	111 Move X20, [X31+80]
	112 Move X19, [X31+88]
	113 Move X26, [X31+32]
	114 Move X25, [X31+40]
	115 Move X30, [X31+16]
	116 Move X27, [X31+24]
	117 Add X31, X31, 96
	118 Return 
	119 Call 0x1C17F20

Method: System.Boolean get_disposed()

Disassembly:
	0x029AD240 LDR X8, [X8 + 0xC0]
	0x029AD244 LDR X1, [X8 + 0x40]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_disposed(System.Boolean value)

Disassembly:
	0x029AD248 LDR X8, [X1]
	0x029AD24C BLR X8
	0x029AD250 LDR X8, [X20 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Void Dispose()

Disassembly:
	0x029AD254 ADD X0, X19, 0x20
	0x029AD258 LDR X8, [X8 + 0xC0]
	0x029AD25C LDR X1, [X8 + 0x48]
	0x029AD260 LDR X8, [X1]
	0x029AD264 BLR X8
	0x029AD268 ADRP X8, 0x1771000
	0x029AD26C LDR X8, [X8 + 0x5A0]
	0x029AD270 ADD X0, X19, 0x30
	0x029AD274 LDR X1, [X8]
	0x029AD278 BL 0x23D2FE0
	0x029AD27C LDR X8, [X20 + 0x20]
	0x029AD280 MOV X0, X19
	0x029AD284 LDP X20, X19, [X31 + 0x20]
	0x029AD288 LDP X22, X21, [X31 + 0x10]
	0x029AD28C LDR X8, [X8 + 0xC0]
	0x029AD290 MOVZ W1, 0x1
	0x029AD294 LDR X2, [X8 + 0x58]
	0x029AD298 LDR X3, [X2]
	0x029AD29C LDR X30, [X31], #0x30
	0x029AD2A0 BR X3
	0x029AD2A4 STR X30, [X31 - 0x50]!
	0x029AD2A8 STP X26, X25, [X31 + 0x10]
	0x029AD2AC STP X24, X23, [X31 + 0x20]
	0x029AD2B0 STP X22, X21, [X31 + 0x30]
	0x029AD2B4 STP X20, X19, [X31 + 0x40]
	0x029AD2B8 ADRP X24, 0x1A2D000
	0x029AD2BC ADRP X23, 0x1746000
	0x029AD2C0 LDRB W8, [X24 + 0xF9B]
	0x029AD2C4 LDR X23, [X23 + 0xA28]
	0x029AD2C8 MOV X22, X3
	0x029AD2CC MOV W20, W2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1A2E000
	007 Move X21, 0x174E000
	008 Move W8, [X22+3979]
	009 Move X21, [X21+3088]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x174E000
	017 Move X0, [X0+3088]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3979], W8
	021 Move X8, [X20+32]
	022 Move W1, 1
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+48]
	026 Call 0x29AD2D0, X0, X1
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+48]
	039 Call GC.SuppressFinalize, X0
	040 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x029AD2D0 MOV W21, W1
	0x029AD2D4 MOV X19, X0
	0x029AD2D8 TBNZ X8, 0x0, 0x29AD2FC
	0x029AD2DC ADRP X0, 0x1746000
	0x029AD2E0 LDR X0, [X0 + 0xA28]
	0x029AD2E4 BL 0x1C16CF4
	0x029AD2E8 ADRP X0, 0x1746000
	0x029AD2EC LDR X0, [X0 + 0x5A8]
	0x029AD2F0 BL 0x1C16CF4
	0x029AD2F4 MOVZ W8, 0x1
	0x029AD2F8 STRB W8, [X24 + 0xF9B]
	0x029AD2FC LDR X8, [X22 + 0x20]
	0x029AD300 ADD X0, X19, 0x20
	0x029AD304 LDR X8, [X8 + 0xC0]
	0x029AD308 LDR X1, [X8 + 0x60]
	0x029AD30C LDR X8, [X1]
	0x029AD310 BLR X8
	0x029AD314 LDR X8, [X23]
	0x029AD318 MOV W24, W0
	0x029AD31C LDR W9, [X8 + 0xE0]
	0x029AD320 CBNZ W9, 0x29AD32C
	0x029AD324 MOV X0, X8
	0x029AD328 BL 0x1C16DFC
	0x029AD32C ADRP X26, 0x1746000
	0x029AD330 LDR X26, [X26 + 0x5A8]
	0x029AD334 ADD W23, W20, W21
	0x029AD338 CMP X23, W24, SXTW
	0x029AD33C CSET W0, LE
	0x029AD340 MOV X1, X31
	0x029AD344 BL 0x3C06E58
	0x029AD348 LDP W9, W8, [X19 + 0x58]
	0x029AD34C ADD W25, W9, W8
	0x029AD350 CBZ W9, 0x29AD3B4
	0x029AD354 LDR X9, [X19 + 0x30]
	0x029AD358 SUB W8, W25, 0x1
	0x029AD35C SBFM X10, X8, 0x3C, 0x1F
	0x029AD360 ADD X8, X9, W8, 0x4, SXTW
	0x029AD364 LDR W11, [X9, X10, LSL]
	0x029AD368 LDR W9, [X8 + 0x4]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1A2E000
	007 Move W8, [X22+3980]
	008 Move X20, X2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x1772000
	016 Move X0, [X0+1440]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3980], W8
	020 Move W8, [X19+16]
	021 Compare W8, 0
	022 JumpIfNotEqual {46}
	023 Move TEMP, X21
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {44}
	027 Move X8, [X20+32]
	028 Move X0, [X19+24]
	029 Move X8, [X8+192]
	030 Compare X0, 0
	031 JumpIfEqual {36}
	032 Move X1, [X8+64]
	033 Call 0x2D43BDC, X0
	034 Move X8, [X20+32]
	035 Move X8, [X8+192]
	036 Move X1, [X8+72]
	037 Add X0, X19, 32
	038 Call NativeArray`1<UInt16>.Dispose, X0
	039 Move X8, 0x1772000
	040 Move X8, [X8+1440]
	041 Add X0, X19, 48
	042 Move X1, [X8]
	043 Call NativeArray`1<GfxUpdateBufferRange>.Dispose, X0
	044 Move W8, 1
	045 Move [X19+16], W8
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return 

Method: System.Void RegisterUpdate(System.UInt32 start, System.UInt32 size)

Disassembly:
	0x029AD36C LDR W10, [X19 + 0x4C]
	0x029AD370 ADD W11, W9, W11
	0x029AD374 MUL W12, W10, W21
	0x029AD378 CMP W11, W12
	0x029AD37C B.NE 0x29AD3B4
	0x029AD380 MADD W9, W10, W20, W9
	0x029AD384 STR W9, [X8]
	0x029AD388 LDR X0, [X26]
	0x029AD38C LDR W20, [X19 + 0x54]
	0x029AD390 LDR W8, [X0 + 0xE0]
	0x029AD394 CBNZ W8, 0x29AD39C
	0x029AD398 BL 0x1C16DFC
	0x029AD39C MOV W0, W20
	0x029AD3A0 MOV W1, W23
	0x029AD3A4 MOV X2, X31
	0x029AD3A8 BL 0x337EE48
	0x029AD3AC STR W0, [X19 + 0x54]
	0x029AD3B0 B 0x29AD46C
	0x029AD3B4 LDR X0, [X26]
	0x029AD3B8 LDR W24, [X19 + 0x50]
	0x029AD3BC LDR W8, [X0 + 0xE0]
	0x029AD3C0 CBNZ W8, 0x29AD3C8
	0x029AD3C4 BL 0x1C16DFC
	0x029AD3C8 MOV W0, W24
	0x029AD3CC MOV W1, W21
	0x029AD3D0 MOV X2, X31
	0x029AD3D4 BL 0x337EEEC
	0x029AD3D8 LDR W8, [X19 + 0x54]
	0x029AD3DC STR W0, [X19 + 0x50]
	0x029AD3E0 MOV W1, W23
	0x029AD3E4 MOV X2, X31
	0x029AD3E8 MOV W0, W8
	0x029AD3EC BL 0x337EE48
	0x029AD3F0 LDR W8, [X19 + 0x58]
	0x029AD3F4 LDR W9, [X19 + 0x48]
	0x029AD3F8 STR W0, [X19 + 0x54]
	0x029AD3FC CMP W8, W9
	0x029AD400 B.NE 0x29AD410
	0x029AD404 MOVZ W8, 0x1
	0x029AD408 STRB W8, [X19 + 0x60]
	0x029AD40C B 0x29AD46C
	0x029AD410 LDR X8, [X22 + 0x20]
	0x029AD414 LDP X0, X1, [X19 + 0x20]
	0x029AD418 MOV W2, W21
	0x029AD41C MOV W3, W20
	0x029AD420 LDR X8, [X8 + 0xC0]
	0x029AD424 LDR X4, [X8 + 0x68]
	0x029AD428 LDR X8, [X4]
	0x029AD42C BLR X8
	0x029AD430 LDR X8, [X22 + 0x20]
	0x029AD434 LDR X8, [X8 + 0xC0]
	0x029AD438 LDR X2, [X8 + 0x78]
	0x029AD43C LDR X8, [X2]
	0x029AD440 BLR X8
	0x029AD444 LDR W8, [X19 + 0x4C]
	0x029AD448 LDR X9, [X19 + 0x30]
	0x029AD44C MUL W10, W8, W21
	0x029AD450 MUL W8, W8, W20
	0x029AD454 ADD X9, X9, W25, 0x4, SXTW
	0x029AD458 STP W10, W8, [X9]
	0x029AD45C STR X0, [X9 + 0x8]
	0x029AD460 LDR W8, [X19 + 0x58]
	0x029AD464 ADD W8, W8, 0x1
	0x029AD468 STR W8, [X19 + 0x58]
	0x029AD46C LDP X20, X19, [X31 + 0x40]
	0x029AD470 LDP X22, X21, [X31 + 0x30]
	0x029AD474 LDP X24, X23, [X31 + 0x20]
	0x029AD478 LDP X26, X25, [X31 + 0x10]
	0x029AD47C LDR X30, [X31], #0x50
	0x029AD480 RET
	0x029AD484 STR X30, [X31 - 0x20]!
	0x029AD488 STP X20, X19, [X31 + 0x10]
	0x029AD48C ADRP X19, 0x1A2D000
	0x029AD490 ADRP X20, 0x176F000
	0x029AD494 LDRB W8, [X19 + 0xF9C]
	0x029AD498 LDR X20, [X20 + 0x820]
	0x029AD49C TBNZ X8, 0x0, 0x29AD4B4
	0x029AD4A0 ADRP X0, 0x176F000
	0x029AD4A4 LDR X0, [X0 + 0x820]
	0x029AD4A8 BL 0x1C16CF4
	0x029AD4AC MOVZ W8, 0x1
	0x029AD4B0 STRB W8, [X19 + 0xF9C]
	0x029AD4B4 LDR X0, [X20]
	0x029AD4B8 LDR W8, [X0 + 0xE0]
	0x029AD4BC CBNZ W8, 0x29AD4C4
	0x029AD4C0 BL 0x1C16DFC
	0x029AD4C4 LDP X20, X19, [X31 + 0x10]
	0x029AD4C8 MOV X0, X31
	0x029AD4CC LDR X30, [X31], #0x20
	0x029AD4D0 B 0x3D1F9F8
	0x029AD4D4 STR X30, [X31 - 0x20]!
	0x029AD4D8 STP X20, X19, [X31 + 0x10]
	0x029AD4DC LDR X8, [X1 + 0x20]
	0x029AD4E0 MOV X20, X1
	0x029AD4E4 MOV X19, X0
	0x029AD4E8 LDR X8, [X8 + 0xC0]
	0x029AD4EC LDR X1, [X8 + 0x80]
	0x029AD4F0 LDR X8, [X1]
	0x029AD4F4 BLR X8
	0x029AD4F8 LDR X8, [X20 + 0x20]
	0x029AD4FC LDR X8, [X8 + 0xC0]
	0x029AD500 TBZ X0, 0x0, 0x29AD50C
	0x029AD504 LDR X1, [X8 + 0x88]
	0x029AD508 B 0x29AD510
	0x029AD50C LDR X1, [X8 + 0x90]
	0x029AD510 LDR X2, [X1]
	0x029AD514 MOV X0, X19
	0x029AD518 LDP X20, X19, [X31 + 0x10]
	0x029AD51C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x1A2E000
	010 Move X23, 0x1747000
	011 Move W8, [X24+3981]
	012 Move X23, [X23+2600]
	013 Move X22, X3
	014 Move W20, W2
	015 Move W21, W1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x1747000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move X0, 0x1747000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3981], W8
	029 Move X0, [X23]
	030 NotImplemented "Instruction LDRSW not yet implemented."
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X24, 0x1747000
	036 Move X24, [X24+1448]
	037 Add W23, W20, W21
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSET not yet implemented."
	040 Move X1, X31
	041 Call Debug.Assert, X0
	042 Move W9, [X19+88]
	043 Move W8, [X19+92]
	044 Add W25, W9, W8
	045 Compare W9, 0
	046 JumpIfEqual {71}
	047 Move X9, [X19+48]
	048 Subtract W8, W25, 1
	049 NotImplemented "Instruction SBFM not yet implemented."
	050 Add X8, X9, W8
	051 Move W11, [X9]
	052 Add X8, X8, 4
	053 Move W9, [X8]
	054 Move W10, [X19+76]
	055 Add W11, W9, W11
	056 Multiply W12, W10, W21
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction MADD not yet implemented."
	059 Move [X8], W9
	060 Move X0, [X24]
	061 Move W20, [X19+84]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move W0, W20
	067 Move W1, W23
	068 Move X2, X31
	069 Call Math.Max, X0, X1
	070 Move [X19+84], W0
	071 Move X0, [X24]
	072 Move W24, [X19+80]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move W0, W24
	078 Move W1, W21
	079 Move X2, X31
	080 Call Math.Min, X0, X1
	081 Move W8, [X19+84]
	082 Move [X19+80], W0
	083 Move W1, W23
	084 Move X2, X31
	085 Move W0, W8
	086 Call Math.Max, X0, X1
	087 Move W8, [X19+88]
	088 Move W9, [X19+72]
	089 Move [X19+84], W0
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W8, 1
	092 Move [X19+96], W8
	093 Move X8, [X22+32]
	094 Move X0, [X19+32]
	095 Move X1, [X19+40]
	096 Move W2, W21
	097 Move W3, W20
	098 Move X8, [X8+192]
	099 Move X4, [X8+104]
	100 Call NativeSliceExtensions.Slice, X0, X1, X2
	101 Move X8, [X22+32]
	102 Move X8, [X8+192]
	103 Move X2, [X8+120]
	104 Call NativeSliceUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	105 Move W8, [X19+76]
	106 Move X9, [X19+48]
	107 Multiply W10, W8, W21
	108 Multiply W8, W8, W20
	109 Add X9, X9, W25
	110 Move [X9], W10
	111 Move [X9+4], W8
	112 Move [X9+8], X0
	113 Move W8, [X19+88]
	114 Add W8, W8, 1
	115 Move [X19+88], W8
	116 Move X20, [X31+48]
	117 Move X19, [X31+56]
	118 Move X22, [X31+32]
	119 Move X21, [X31+40]
	120 Move X24, [X31+16]
	121 Move X23, [X31+24]
	122 Move X30, [X31+64]
	123 Move X25, [X31+72]
	124 Return 

Method: System.Boolean HasMappedBufferRange()

Disassembly:
	0x029AD520 BR X2
	0x029AD524 STR X30, [X31 - 0x30]!
	0x029AD528 STP X22, X21, [X31 + 0x10]
	0x029AD52C STP X20, X19, [X31 + 0x20]
	0x029AD530 ADRP X21, 0x1A2D000
	0x029AD534 LDRB W8, [X21 + 0xF9D]
	0x029AD538 MOV X20, X1
	0x029AD53C MOV X19, X0
	0x029AD540 TBNZ X8, 0x0, 0x29AD558
	0x029AD544 ADRP X0, 0x1771000
	0x029AD548 LDR X0, [X0 + 0x5A8]
	0x029AD54C BL 0x1C16CF4
	0x029AD550 MOVZ W8, 0x1
	0x029AD554 STRB W8, [X21 + 0xF9D]
	0x029AD558 LDR X8, [X20 + 0x20]
	0x029AD55C ADD X0, X19, 0x20
	0x029AD560 LDR X8, [X8 + 0xC0]
	0x029AD564 LDR X1, [X8 + 0x60]
	0x029AD568 LDR X8, [X1]
	0x029AD56C BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x1A2E000
	005 Move X20, 0x1770000
	006 Move W8, [X19+3982]
	007 Move X20, [X20+2080]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x1770000
	013 Move X0, [X0+2080]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3982], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call Utility.HasMappedBufferRange
	027 Return X0

Method: System.Void SendUpdates()

Disassembly:
	0x029AD570 LDR X8, [X20 + 0x20]
	0x029AD574 LDR W9, [X19 + 0x4C]
	0x029AD578 LDRSW X22, [X19 + 0x5C]
	0x029AD57C LDR X8, [X8 + 0xC0]
	0x029AD580 MUL W21, W9, W0
	0x029AD584 LDR X2, [X8 + 0x98]
	0x029AD588 LDP X8, X1, [X19 + 0x20]
	0x029AD58C LDR X10, [X2]
	0x029AD590 MOV X0, X8
	0x029AD594 BLR X10
	0x029AD598 LDR X8, [X19 + 0x30]
	0x029AD59C ADD X8, X8, X22, 0x4, LSL
	0x029AD5A0 STP W31, W21, [X8]
	0x029AD5A4 STR X0, [X8 + 0x8]
	0x029AD5A8 LDR X22, [X19 + 0x18]
	0x029AD5AC CBZ X22, 0x29AD5FC
	0x029AD5B0 ADRP X8, 0x1771000
	0x029AD5B4 LDR X8, [X8 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call 0x29AD520, X0
	007 Move X8, [X20+32]
	008 Move X8, [X8+192]
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {20}
	013 Move X1, [X8+136]
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Call 0x29AD6A8, X0
	019 Return 
	020 Move X1, [X8+144]
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]

Method: System.Void SendFullRange()

Disassembly:
	0x029AD5B8 LDP X0, X1, [X19 + 0x30]
	0x029AD5BC LDR W2, [X19 + 0x5C]
	0x029AD5C0 MOVZ W3, 0x1
	0x029AD5C4 LDR X4, [X8]
	0x029AD5C8 BL 0x2222890
	0x029AD5CC LDR X8, [X20 + 0x20]
	0x029AD5D0 MOV X2, X0
	0x029AD5D4 MOV X3, X1
	0x029AD5D8 MOV X0, X22
	0x029AD5DC LDR X8, [X8 + 0xC0]
	0x029AD5E0 MOV X1, X2
	0x029AD5E4 MOV X2, X3
	0x029AD5E8 MOV W3, W31
	0x029AD5EC LDR X5, [X8 + 0xA0]
	0x029AD5F0 MOV W4, W21
	0x029AD5F4 LDR X8, [X5]
	0x029AD5F8 BLR X8
	0x029AD5FC LDR X8, [X20 + 0x20]
	0x029AD600 MOV X0, X19
	0x029AD604 LDP X20, X19, [X31 + 0x20]
	0x029AD608 LDP X22, X21, [X31 + 0x10]
	0x029AD60C LDR X8, [X8 + 0xC0]
	0x029AD610 LDR X1, [X8 + 0xA8]
	0x029AD614 LDR X2, [X1]
	0x029AD618 LDR X30, [X31], #0x30
	0x029AD61C BR X2
	0x029AD620 STP X30, X23, [X31 - 0x30]!
	0x029AD624 STP X22, X21, [X31 + 0x10]
	0x029AD628 STP X20, X19, [X31 + 0x20]
	0x029AD62C ADRP X21, 0x1A2D000
	0x029AD630 LDRB W8, [X21 + 0xF9E]
	0x029AD634 MOV X20, X1
	0x029AD638 MOV X19, X0
	0x029AD63C TBNZ X8, 0x0, 0x29AD654
	0x029AD640 ADRP X0, 0x1771000
	0x029AD644 LDR X0, [X0 + 0x5A8]
	0x029AD648 BL 0x1C16CF4
	0x029AD64C MOVZ W8, 0x1
	0x029AD650 STRB W8, [X21 + 0xF9E]
	0x029AD654 LDR W8, [X19 + 0x58]
	0x029AD658 CBZ W8, 0x29AD784
	0x029AD65C LDRB W8, [X19 + 0x60]
	0x029AD660 CBZ W8, 0x29AD6C4
	0x029AD664 MOVZ W8, 0x1
	0x029AD668 STR W8, [X19 + 0x58]
	0x029AD66C LDR X8, [X20 + 0x20]
	0x029AD670 LDP W2, W9, [X19 + 0x50]
	0x029AD674 LDP X0, X1, [X19 + 0x20]
	0x029AD678 LDRSW X22, [X19 + 0x5C]
	0x029AD67C LDR X8, [X8 + 0xC0]
	0x029AD680 SUB W21, W9, W2
	0x029AD684 MOV W3, W21
	0x029AD688 LDR X4, [X8 + 0x68]
	0x029AD68C LDR X8, [X4]
	0x029AD690 BLR X8
	0x029AD694 LDR X8, [X20 + 0x20]
	0x029AD698 LDR X8, [X8 + 0xC0]
	0x029AD69C LDR X2, [X8 + 0x78]
	0x029AD6A0 LDR X8, [X2]
	0x029AD6A4 BLR X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1A2E000
	007 Move W8, [X21+3983]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x1772000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3983], W8
	019 Move X8, [X20+32]
	020 Move W9, [X19+40]
	021 Move W10, [X19+76]
	022 Move X0, [X19+32]
	023 Move X1, [X19+40]
	024 Move X8, [X8+192]
	025 NotImplemented "Instruction LDRSW not yet implemented."
	026 Multiply W21, W10, W9
	027 Move X2, [X8+152]
	028 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	029 Move X8, [X19+48]
	030 Add X8, X8, X22
	031 Move [X8], W31
	032 Move [X8+4], W21
	033 Move [X8+8], X0
	034 Move X22, [X19+24]
	035 Compare X22, 0
	036 JumpIfEqual {56}
	037 Move X8, 0x1772000
	038 Move X8, [X8+1448]
	039 Move X0, [X19+48]
	040 Move X1, [X19+56]
	041 Move W2, [X19+92]
	042 Move W3, 1
	043 Move X4, [X8]
	044 Call NativeSliceExtensions.Slice, X0, X1, X2
	045 Move X8, [X20+32]
	046 Move X2, X0
	047 Move X3, X1
	048 Move X0, X22
	049 Move X8, [X8+192]
	050 Move X1, X2
	051 Move X2, X3
	052 Move W3, W31
	053 Move X5, [X8+160]
	054 Move W4, W21
	055 Call 0x2D43C38, X0, X1, X2, X3
	056 Move W8, [X19+92]
	057 Move W9, [X19+72]
	058 NotImplemented "Instruction LDRSW not yet implemented."
	059 NotImplemented "Instruction MOVI not yet implemented."
	060 Move [X19+80], D0
	061 Add W8, W9, W8
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move [X19+88], W31
	065 Move [X19+92], W8
	066 Move [X19+96], W31
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return 

Method: System.Void SendPartialRanges()

Disassembly:
	0x029AD6A8 LDP W9, W8, [X19 + 0x4C]
	0x029AD6AC LDR X10, [X19 + 0x30]
	0x029AD6B0 MUL W8, W9, W8
	0x029AD6B4 MUL W9, W9, W21
	0x029AD6B8 ADD X10, X10, X22, 0x4, LSL
	0x029AD6BC STP W8, W9, [X10]
	0x029AD6C0 STR X0, [X10 + 0x8]
	0x029AD6C4 LDP W8, W10, [X19 + 0x4C]
	0x029AD6C8 LDR W9, [X19 + 0x54]
	0x029AD6CC MUL W21, W8, W10
	0x029AD6D0 CBZ W21, 0x29AD70C
	0x029AD6D4 LDR W10, [X19 + 0x58]
	0x029AD6D8 CBZ W10, 0x29AD70C
	0x029AD6DC MOV W10, W31
	0x029AD6E0 LDR W11, [X19 + 0x5C]
	0x029AD6E4 LDR X12, [X19 + 0x30]
	0x029AD6E8 ADD W11, W10, W11
	0x029AD6EC SBFM X11, X11, 0x3C, 0x1F
	0x029AD6F0 LDR W13, [X12, X11, LSL]
	0x029AD6F4 ADD W10, W10, 0x1
	0x029AD6F8 SUB W13, W13, W21
	0x029AD6FC STR W13, [X12, X11, LSL]
	0x029AD700 LDR W11, [X19 + 0x58]
	0x029AD704 CMP W10, W11
	0x029AD708 B.CC 0x29AD6E0
	0x029AD70C LDR X22, [X19 + 0x18]
	0x029AD710 CBZ X22, 0x29AD760
	0x029AD714 ADRP X10, 0x1771000
	0x029AD718 LDP X0, X1, [X19 + 0x30]
	0x029AD71C LDP W3, W2, [X19 + 0x58]
	0x029AD720 LDR X10, [X10 + 0x5A8]
	0x029AD724 MUL W23, W9, W8
	0x029AD728 LDR X4, [X10]
	0x029AD72C BL 0x2222890
	0x029AD730 LDR X8, [X20 + 0x20]
	0x029AD734 MOV X2, X0
	0x029AD738 MOV X3, X1
	0x029AD73C MOV X0, X22
	0x029AD740 LDR X8, [X8 + 0xC0]
	0x029AD744 MOV X1, X2
	0x029AD748 MOV X2, X3
	0x029AD74C MOV W3, W21
	0x029AD750 LDR X5, [X8 + 0xA0]
	0x029AD754 MOV W4, W23
	0x029AD758 LDR X8, [X5]
	0x029AD75C BLR X8
	0x029AD760 LDR X8, [X20 + 0x20]
	0x029AD764 MOV X0, X19
	0x029AD768 LDP X20, X19, [X31 + 0x20]
	0x029AD76C LDP X22, X21, [X31 + 0x10]
	0x029AD770 LDR X8, [X8 + 0xC0]
	0x029AD774 LDR X1, [X8 + 0xA8]
	0x029AD778 LDR X2, [X1]
	0x029AD77C LDP X30, X23, [X31], #0x30
	0x029AD780 BR X2
	0x029AD784 LDP X20, X19, [X31 + 0x20]
	0x029AD788 LDP X22, X21, [X31 + 0x10]
	0x029AD78C LDP X30, X23, [X31], #0x30
	0x029AD790 RET
	0x029AD794 LDR W8, [X0 + 0x5C]
	0x029AD798 LDR W9, [X0 + 0x48]
	0x029AD79C LDRSW X10, [X0 + 0x38]
	0x029AD7A0 MOVI D0, 0xFFFFFFFF
	0x029AD7A4 STR D0, [X0 + 0x50]
	0x029AD7A8 ADD W8, W9, W8
	0x029AD7AC CMP X8, X10
	0x029AD7B0 CSEL W8, W8, W31, LT
	0x029AD7B4 STP W31, W8, [X0 + 0x58]
	0x029AD7B8 STRB W31, [X0 + 0x60]
	0x029AD7BC RET
	0x029AD7C0 STP X30, X19, [X31 - 0x10]!
	0x029AD7C4 MOV X1, X31
	0x029AD7C8 MOV X19, X0
	0x029AD7CC BL 0x33BDD8C
	0x029AD7D0 STRB W31, [X19 + 0x10]
	0x029AD7D4 LDP X30, X19, [X31], #0x10
	0x029AD7D8 RET
	0x029AD7DC STR X30, [X31 - 0x20]!
	0x029AD7E0 STP X20, X19, [X31 + 0x10]
	0x029AD7E4 MOV W19, W1
	0x029AD7E8 MOV X1, X31
	0x029AD7EC MOV X20, X0
	0x029AD7F0 BL 0x33BDD8C
	0x029AD7F4 MOVZ W8, 0x1
	0x029AD7F8 STRB W8, [X20 + 0x10]
	0x029AD7FC STR W19, [X20 + 0x14]
	0x029AD800 LDP X20, X19, [X31 + 0x10]
	0x029AD804 LDR X30, [X31], #0x20
	0x029AD808 RET
	0x029AD80C STR X30, [X31 - 0x20]!
	0x029AD810 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x1A2E000
	008 Move W8, [X21+3984]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x1772000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3984], W8
	020 Move W8, [X19+88]
	021 Compare W8, 0
	022 JumpIfEqual {106}
	023 Move W8, [X19+96]
	024 Compare W8, 0
	025 JumpIfEqual {52}
	026 Move W8, 1
	027 Move [X19+88], W8
	028 Move X8, [X20+32]
	029 Move W2, [X19+80]
	030 Move W9, [X19+84]
	031 Move X0, [X19+32]
	032 Move X1, [X19+40]
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Move X8, [X8+192]
	035 Subtract W21, W9, W2
	036 Move W3, W21
	037 Move X4, [X8+104]
	038 Call NativeSliceExtensions.Slice, X0, X1, X2
	039 Move X8, [X20+32]
	040 Move X8, [X8+192]
	041 Move X2, [X8+120]
	042 Call NativeSliceUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	043 Move W9, [X19+76]
	044 Move W8, [X19+80]
	045 Move X10, [X19+48]
	046 Multiply W8, W9, W8
	047 Multiply W9, W9, W21
	048 Add X10, X10, X22
	049 Move [X10], W8
	050 Move [X10+4], W9
	051 Move [X10+8], X0
	052 Move W8, [X19+76]
	053 Move W10, [X19+80]
	054 Move W9, [X19+84]
	055 Multiply W21, W8, W10
	056 Compare W21, 0
	057 JumpIfEqual {72}
	058 Move W10, [X19+88]
	059 Compare W10, 0
	060 JumpIfEqual {72}
	061 Move W10, W31
	062 Move W11, [X19+92]
	063 Move X12, [X19+48]
	064 Add W11, W10, W11
	065 NotImplemented "Instruction SBFM not yet implemented."
	066 Move W13, [X12]
	067 Add W10, W10, 1
	068 Subtract W13, W13, W21
	069 Move [X12], W13
	070 Move W11, [X19+88]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X22, [X19+24]
	073 Compare X22, 0
	074 JumpIfEqual {95}
	075 Move X10, 0x1772000
	076 Move X0, [X19+48]
	077 Move X1, [X19+56]
	078 Move W3, [X19+88]
	079 Move W2, [X19+92]
	080 Move X10, [X10+1448]
	081 Multiply W23, W9, W8
	082 Move X4, [X10]
	083 Call NativeSliceExtensions.Slice, X0, X1, X2
	084 Move X8, [X20+32]
	085 Move X2, X0
	086 Move X3, X1
	087 Move X0, X22
	088 Move X8, [X8+192]
	089 Move X1, X2
	090 Move X2, X3
	091 Move W3, W21
	092 Move X5, [X8+160]
	093 Move W4, W23
	094 Call 0x2D43C38, X0, X1, X2, X3
	095 Move W8, [X19+92]
	096 Move W9, [X19+72]
	097 NotImplemented "Instruction LDRSW not yet implemented."
	098 NotImplemented "Instruction MOVI not yet implemented."
	099 Move [X19+80], D0
	100 Add W8, W9, W8
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CSEL not yet implemented."
	103 Move [X19+88], W31
	104 Move [X19+92], W8
	105 Move [X19+96], W31
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X30, [X31+48]
	111 Move X23, [X31+56]
	112 Return 

Method: System.Void ResetUpdateState()

Disassembly:
	0x029AD814 MOV X19, X1
	0x029AD818 MOV X1, X31
	0x029AD81C MOV X20, X0
	0x029AD820 BL 0x33BDD8C
	0x029AD824 STRB W31, [X20 + 0x10]
	0x029AD828 STR X19, [X20 + 0x18]
	0x029AD82C LDP X20, X19, [X31 + 0x10]
	0x029AD830 LDR X30, [X31], #0x20
	0x029AD834 RET
	0x029AD838 STR X30, [X31 - 0x20]!
	0x029AD83C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+92]
	002 Move W9, [X0+72]
	003 NotImplemented "Instruction LDRSW not yet implemented."
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X0+80], D0
	006 Add W8, W9, W8
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move [X0+88], W31
	010 Move [X0+92], W8
	011 Move [X0+96], W31
	012 Return 

