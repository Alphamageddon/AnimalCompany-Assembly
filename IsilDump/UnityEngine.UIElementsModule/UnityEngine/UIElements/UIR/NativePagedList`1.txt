Type: UnityEngine.UIElements.UIR.NativePagedList`1

Method: System.Void .ctor(System.Int32 poolCapacity)

Disassembly:
	0x024035C4 B.LT 0x2403688
	0x024035C8 LDR X8, [X1 + 0x20]
	0x024035CC MOV X20, X1
	0x024035D0 MOV W1, W31
	0x024035D4 LDR X8, [X8 + 0xC0]
	0x024035D8 LDR X2, [X8 + 0x78]
	0x024035DC BL 0x2F178C8
	0x024035E0 MOV X8, X0
	0x024035E4 LDR X0, [X19 + 0x18]
	0x024035E8 STP X8, X1, [X19 + 0x20]
	0x024035EC CBZ X0, 0x2403638
	0x024035F0 MOVZ W21, 0x1
	0x024035F4 LDR X8, [X20 + 0x20]
	0x024035F8 LDR W9, [X0 + 0x18]
	0x024035FC LDR X8, [X8 + 0xC0]
	0x02403600 CMP W21, W9
	0x02403604 B.GE 0x240363C
	0x02403608 LDR X2, [X8 + 0x78]
	0x0240360C MOV W1, W21
	0x02403610 BL 0x2F178C8
	0x02403614 STP X0, X1, [X31]
	0x02403618 LDR X8, [X20 + 0x20]
	0x0240361C ADD X0, X31, 0x0
	0x02403620 LDR X8, [X8 + 0xC0]
	0x02403624 LDR X1, [X8 + 0xA8]
	0x02403628 BL 0x23DC2B4
	0x0240362C LDR X0, [X19 + 0x18]
	0x02403630 ADD W21, W21, 0x1
	0x02403634 CBNZ X0, 0x24035F4
	0x02403638 BL 0x1C16F20
	0x0240363C LDR W10, [X0 + 0x1C]
	0x02403640 LDR X9, [X0 + 0x10]
	0x02403644 ADD W11, W10, 0x1
	0x02403648 STP W31, W11, [X0 + 0x18]
	0x0240364C LDP X1, X2, [X19 + 0x20]
	0x02403650 LDR X8, [X8 + 0x68]
	0x02403654 ADD W10, W10, 0x2
	0x02403658 STR W10, [X0 + 0x1C]
	0x0240365C CBZ X9, 0x2403638
	0x02403660 LDR W10, [X9 + 0x18]
	0x02403664 CBZ W10, 0x2403678
	0x02403668 MOVZ W8, 0x1
	0x0240366C STR W8, [X0 + 0x18]
	0x02403670 STP X1, X2, [X9 + 0x20]
	0x02403674 B 0x2403688
	0x02403678 LDR X8, [X8 + 0x20]
	0x0240367C LDR X8, [X8 + 0xC0]
	0x02403680 LDR X3, [X8 + 0x70]
	0x02403684 BL 0x2F17BCC
	0x02403688 STR W31, [X19 + 0x30]
	0x0240368C LDP X20, X19, [X31 + 0x20]
	0x02403690 LDP X30, X21, [X31 + 0x10]
	0x02403694 ADD X31, X31, 0x30
	0x02403698 RET
	0x0240369C LDRB W0, [X0 + 0x40]
	0x024036A0 RET
	0x024036A4 AND W8, W1, 0x1
	0x024036A8 STRB W8, [X0 + 0x40]
	0x024036AC RET
	0x024036B0 STR X30, [X31 - 0x30]!
	0x024036B4 STP X22, X21, [X31 + 0x10]
	0x024036B8 STP X20, X19, [X31 + 0x20]
	0x024036BC ADRP X22, 0x1FD6000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1FD7000
	008 Move W8, [X22+2471]
	009 Move X21, X2
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1CF1000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2471], W8
	021 Move X8, [X21+32]
	022 Move X8, [X8+192]
	023 Move X0, [X8]
	024 Move W8, [X0+309]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {30}
	029 Call 0x1C5D684
	030 Move X23, 0x1CF1000
	031 Move X23, [X23+2600]
	032 Call 0x1C17F10
	033 Move X8, [X21+32]
	034 Move W1, 8
	035 Move X22, X0
	036 Move X8, [X8+192]
	037 Move X2, [X8+8]
	038 Call List`1<NativeArray`1<ConvertMeshJobData>>..ctor, X0, X1
	039 Move [X19+24], X22
	040 Move X8, [X21+32]
	041 Move X8, [X8+192]
	042 Move X0, [X8+24]
	043 Move W8, [X0+309]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {49}
	048 Call 0x1C5D684
	049 Call 0x1C17F10
	050 Move X8, [X21+32]
	051 Move W1, 8
	052 Move X21, X0
	053 Move X8, [X8+192]
	054 Move X2, [X8+32]
	055 Call List`1<NativeSlice`1<ConvertMeshJobData>>..ctor, X0, X1
	056 Move X0, X19
	057 Move X1, X31
	058 Move [X19+56], X21
	059 Call Object..ctor, X0
	060 Move X0, [X23]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSET not yet implemented."
	067 Move X1, X31
	068 Call Debug.Assert, X0
	069 Move W0, W20
	070 Move X1, X31
	071 Call Mathf.NextPowerOfTwo, X0
	072 Move [X19+16], W0
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Move X23, [X31+56]
	079 Return 

Method: System.Void Add(ref T data)

Disassembly:
	0x024036C0 ADRP X21, 0x1CF7000
	0x024036C4 LDRB W8, [X22 + 0x9AC]
	0x024036C8 LDR X21, [X21 + 0xC10]
	0x024036CC MOV X20, X1
	0x024036D0 MOV X19, X0
	0x024036D4 TBNZ X8, 0x0, 0x24036EC
	0x024036D8 ADRP X0, 0x1CF7000
	0x024036DC LDR X0, [X0 + 0xC10]
	0x024036E0 BL 0x1C16CF4
	0x024036E4 MOVZ W8, 0x1
	0x024036E8 STRB W8, [X22 + 0x9AC]
	0x024036EC LDR X8, [X20 + 0x20]
	0x024036F0 MOVZ W1, 0x1
	0x024036F4 MOV X0, X19
	0x024036F8 LDR X8, [X8 + 0xC0]
	0x024036FC LDR X2, [X8 + 0xB8]
	0x02403700 BL 0x240372C
	0x02403704 LDR X0, [X21]
	0x02403708 LDR W8, [X0 + 0xE0]
	0x0240370C CBNZ W8, 0x2403714
	0x02403710 BL 0x1C16DFC
	0x02403714 MOV X0, X19
	0x02403718 LDP X20, X19, [X31 + 0x20]
	0x0240371C LDP X22, X21, [X31 + 0x10]
	0x02403720 MOV X1, X31
	0x02403724 LDR X30, [X31], #0x30
	0x02403728 B 0x33B3E9C
	0x0240372C SUB X31, X31, 0x30
	0x02403730 STP X30, X21, [X31 + 0x10]
	0x02403734 STP X20, X19, [X31 + 0x20]
	0x02403738 STP X31, X31, [X31]
	0x0240373C LDRB W8, [X0 + 0x40]
	0x02403740 CBNZ W8, 0x24037BC
	0x02403744 MOV X19, X0
	0x02403748 TBZ X1, 0x0, 0x24037B4
	0x0240374C LDR X0, [X19 + 0x18]
	0x02403750 CBZ X0, 0x24037A0
	0x02403754 MOV X20, X2
	0x02403758 MOV W21, W31
	0x0240375C LDR W8, [X0 + 0x18]
	0x02403760 CMP W21, W8
	0x02403764 B.GE 0x24037A4
	0x02403768 LDR X8, [X20 + 0x20]
	0x0240376C MOV W1, W21
	0x02403770 LDR X8, [X8 + 0xC0]
	0x02403774 LDR X2, [X8 + 0x78]
	0x02403778 BL 0x2F178C8
	0x0240377C STP X0, X1, [X31]
	0x02403780 LDR X8, [X20 + 0x20]
	0x02403784 ADD X0, X31, 0x0
	0x02403788 LDR X8, [X8 + 0xC0]
	0x0240378C LDR X1, [X8 + 0xA8]
	0x02403790 BL 0x23DC2B4
	0x02403794 LDR X0, [X19 + 0x18]
	0x02403798 ADD W21, W21, 0x1
	0x0240379C CBNZ X0, 0x240375C
	0x024037A0 BL 0x1C16F20
	0x024037A4 LDR W8, [X0 + 0x1C]
	0x024037A8 ADD W8, W8, 0x1
	0x024037AC STP W31, W8, [X0 + 0x18]
	0x024037B0 STR W31, [X19 + 0x30]
	0x024037B4 MOVZ W8, 0x1
	0x024037B8 STRB W8, [X19 + 0x40]
	0x024037BC LDP X20, X19, [X31 + 0x20]
	0x024037C0 LDP X30, X21, [X31 + 0x10]
	0x024037C4 ADD X31, X31, 0x30
	0x024037C8 RET
	0x024037CC STP X30, X23, [X31 - 0x30]!
	0x024037D0 STP X22, X21, [X31 + 0x10]
	0x024037D4 STP X20, X19, [X31 + 0x20]
	0x024037D8 ADRP X22, 0x1FD6000
	0x024037DC LDRB W8, [X22 + 0x9AD]
	0x024037E0 MOV X21, X2
	0x024037E4 MOV W20, W1
	0x024037E8 MOV X19, X0
	0x024037EC TBNZ X8, 0x0, 0x2403804
	0x024037F0 ADRP X0, 0x1CF0000
	0x024037F4 LDR X0, [X0 + 0xA28]
	0x024037F8 BL 0x1C16CF4
	0x024037FC MOVZ W8, 0x1
	0x02403800 STRB W8, [X22 + 0x9AD]
	0x02403804 LDR X8, [X21 + 0x20]
	0x02403808 LDR X8, [X8 + 0xC0]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+176], X30
	003 Move [X31+192], X22
	004 Move [X31+200], X21
	005 Move [X31+208], X20
	006 Move [X31+216], X19
	007 NotImplemented "Instruction LDRSW not yet implemented."
	008 Move W8, [X0+40]
	009 Move X19, X0
	010 Move X20, X1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add W8, W22, 1
	013 Add X0, X31, 24
	014 Move W2, 152
	015 Move X1, X20
	016 Move [X19+48], W8
	017 Move W21, 152
	018 Call 0x3EB2AC0
	019 Move X8, [X19+32]
	020 Add X1, X31, 24
	021 Move W2, 152
	022 NotImplemented "Instruction MADD not yet implemented."
	023 Call 0x3EB2AC0
	024 Move X9, [X19+24]
	025 Compare X9, 0
	026 JumpIfEqual {89}
	027 Move X10, [X2+32]
	028 Move W11, [X9+24]
	029 Move X21, X2
	030 Add X22, X19, 32
	031 Move X9, [X10+192]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W1, W8
	034 ShiftRight W1, 31
	035 And W1, W1, 0x3FFFFFFF
	036 Move W1, [X19+16]
	037 Move [X31+8], X31
	038 Move [X31+16], X31
	039 Move X4, [X9+96]
	040 Add X0, X31, 8
	041 Move W2, 4
	042 Move W3, W31
	043 Call NativeArray`1<ConvertMeshJobData>..ctor, X0, X1, X2, X3
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 Move [X22], V0
	046 Move X0, [X19+24]
	047 Compare X0, 0
	048 JumpIfEqual {89}
	049 Move X8, [X21+32]
	050 Move W10, [X0+28]
	051 Move X1, [X19+32]
	052 Move X2, [X19+40]
	053 Move X9, [X8+192]
	054 Move X8, [X0+16]
	055 Add W10, W10, 1
	056 Move X9, [X9+104]
	057 Move [X0+28], W10
	058 Compare X8, 0
	059 JumpIfEqual {89}
	060 NotImplemented "Instruction LDRSW not yet implemented."
	061 Move W11, [X8+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add W9, W10, 1
	064 Add X8, X8, X10
	065 Move [X0+24], W9
	066 Move [X8+32], X1
	067 Move [X8+40], X2
	068 Move X8, [X9+32]
	069 Move X8, [X8+192]
	070 Move X3, [X8+112]
	071 Call List`1<NativeArray`1<ConvertMeshJobData>>.AddWithResize, X0, X1
	072 Add X0, X31, 24
	073 Move W2, 152
	074 Move X1, X20
	075 Call 0x3EB2AC0
	076 Move X0, [X19+32]
	077 Add X1, X31, 24
	078 Move W2, 152
	079 Call 0x3EB2AC0
	080 Move W8, 1
	081 Move [X19+48], W8
	082 Move X20, [X31+208]
	083 Move X19, [X31+216]
	084 Move X22, [X31+192]
	085 Move X21, [X31+200]
	086 Move X30, [X31+176]
	087 Add X31, X31, 224
	088 Return 
	089 Call 0x1C17F20

Method: System.Collections.Generic.List`1<Unity.Collections.NativeSlice`1<T>> GetPages()

Disassembly:
	0x0240380C LDR X0, [X8]
	0x02403810 LDRB W8, [X0 + 0x135]
	0x02403814 TBNZ X8, 0x0, 0x240381C
	0x02403818 BL 0x1C5C684
	0x0240381C ADRP X23, 0x1CF0000
	0x02403820 LDR X23, [X23 + 0xA28]
	0x02403824 BL 0x1C16F10
	0x02403828 LDR X8, [X21 + 0x20]
	0x0240382C MOVZ W1, 0x8
	0x02403830 MOV X22, X0
	0x02403834 LDR X8, [X8 + 0xC0]
	0x02403838 LDR X2, [X8 + 0x8]
	0x0240383C LDR X8, [X2]
	0x02403840 BLR X8
	0x02403844 STR X22, [X19 + 0x18]
	0x02403848 LDR X8, [X21 + 0x20]
	0x0240384C LDR X8, [X8 + 0xC0]
	0x02403850 LDR X0, [X8 + 0x18]
	0x02403854 LDRB W8, [X0 + 0x135]
	0x02403858 TBNZ X8, 0x0, 0x2403860
	0x0240385C BL 0x1C5C684
	0x02403860 BL 0x1C16F10
	0x02403864 LDR X8, [X21 + 0x20]
	0x02403868 MOVZ W1, 0x8
	0x0240386C MOV X21, X0
	0x02403870 LDR X8, [X8 + 0xC0]
	0x02403874 LDR X2, [X8 + 0x20]
	0x02403878 LDR X8, [X2]
	0x0240387C BLR X8
	0x02403880 MOV X0, X19
	0x02403884 MOV X1, X31
	0x02403888 STR X21, [X19 + 0x38]
	0x0240388C BL 0x33BDD8C
	0x02403890 LDR X0, [X23]
	0x02403894 LDR W8, [X0 + 0xE0]
	0x02403898 CBNZ W8, 0x24038A0
	0x0240389C BL 0x1C16DFC
	0x024038A0 CMP W20, 0x0
	0x024038A4 CSET W0, GT
	0x024038A8 MOV X1, X31
	0x024038AC BL 0x3C06E58
	0x024038B0 MOV W0, W20
	0x024038B4 MOV X1, X31
	0x024038B8 BL 0x3C2B340
	0x024038BC STR W0, [X19 + 0x10]
	0x024038C0 LDP X20, X19, [X31 + 0x20]
	0x024038C4 LDP X22, X21, [X31 + 0x10]
	0x024038C8 LDP X30, X23, [X31], #0x30
	0x024038CC RET
	0x024038D0 STP X29, X30, [X31 - 0x50]!
	0x024038D4 STP X26, X25, [X31 + 0x10]
	0x024038D8 STP X24, X23, [X31 + 0x20]
	0x024038DC STP X22, X21, [X31 + 0x30]
	0x024038E0 STP X20, X19, [X31 + 0x40]
	0x024038E4 ADD X29, X31, 0x0
	0x024038E8 SUB X31, X31, 0x30
	0x024038EC MRS X25, 0xC000
	0x024038F0 LDR X8, [X25 + 0x28]
	0x024038F4 MOV X22, X2
	0x024038F8 MOV X23, X1
	0x024038FC MOV X21, X0
	0x02403900 STUR X8, [X29 - 0x8]
	0x02403904 LDR X8, [X2 + 0x20]
	0x02403908 LDR X8, [X8 + 0xC0]
	0x0240390C LDR X9, [X8 + 0x48]
	0x02403910 LDR W24, [X9 + 0xFC]
	0x02403914 ADD X9, X31, 0x0
	0x02403918 ADD X10, X24, 0xF
	0x0240391C AND X10, X10, 0x1FFFFFFFF
	0x02403920 SUB X19, X9, X10
	0x02403924 ADD X31, X19, 0x0
	0x02403928 LDR X1, [X8 + 0x30]
	0x0240392C LDR W26, [X0 + 0x30]
	0x02403930 ADD X20, X0, 0x20
	0x02403934 MOV X0, X20
	0x02403938 LDR X8, [X1]
	0x0240393C BLR X8
	0x02403940 CMP W26, W0
	0x02403944 B.GE 0x2403998
	0x02403948 LDR W26, [X21 + 0x30]
	0x0240394C MOV X0, X19
	0x02403950 MOV X1, X23
	0x02403954 MOV X2, X24
	0x02403958 ADD W8, W26, 0x1
	0x0240395C STR W8, [X21 + 0x30]
	0x02403960 BL 0x3EB1AC0
	0x02403964 LDR X8, [X22 + 0x20]
	0x02403968 SUB X3, X29, 0x18
	0x0240396C MOV X2, X20
	0x02403970 MOV X4, X19
	0x02403974 LDR X8, [X8 + 0xC0]
	0x02403978 LDR X1, [X8 + 0x50]
	0x0240397C SUB X8, X29, 0x30
	0x02403980 LDR X0, [X1]
	0x02403984 STUR W26, [X29 - 0x30]
	0x02403988 STP X8, X19, [X29 - 0x18]
	0x0240398C LDR X8, [X1 + 0x10]
	0x02403990 BLR X8
	0x02403994 B 0x2403A88
	0x02403998 LDR X0, [X21 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, [X0+56]
	008 Compare X21, 0
	009 JumpIfEqual {95}
	010 Move W8, [X21+28]
	011 Move X19, X0
	012 Add W8, W8, 1
	013 Move [X21+24], W31
	014 Move [X21+28], W8
	015 Move X0, [X0+24]
	016 Compare X0, 0
	017 JumpIfEqual {95}
	018 Move W8, [X0+24]
	019 Subtract W23, W8, 1
	020 Move X20, X1
	021 Move W3, [X19+48]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, [X20+32]
	024 Move X0, [X19+32]
	025 Move X1, [X19+40]
	026 Move X21, [X19+56]
	027 Move W2, W31
	028 Move X8, [X8+192]
	029 Move X4, [X8+160]
	030 Call 0x22237B0, X0, X1, X2
	031 Compare X21, 0
	032 JumpIfEqual {95}
	033 Move X9, [X20+32]
	034 Move W11, [X21+28]
	035 Move X10, [X9+192]
	036 Move X9, [X21+16]
	037 Add W11, W11, 1
	038 Move X10, [X10+152]
	039 Move [X21+28], W11
	040 Compare X9, 0
	041 JumpIfEqual {95}
	042 NotImplemented "Instruction LDRSW not yet implemented."
	043 Move W12, [X9+24]
	044 Move X8, X0
	045 Move X2, X1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add W10, W11, 1
	048 Add X9, X9, X11
	049 Move [X21+24], W10
	050 Move [X9+32], X8
	051 Move [X9+40], X2
	052 Move W22, W31
	053 Move X8, [X20+32]
	054 Move W1, W22
	055 Move X8, [X8+192]
	056 Move X2, [X8+120]
	057 Call List`1<NativeArray`1<ConvertMeshJobData>>.get_Item, X0, X1
	058 Move X8, [X20+32]
	059 Move X8, [X8+192]
	060 Move X2, [X8+128]
	061 Call 0x2404FF8, X0
	062 Compare X21, 0
	063 JumpIfEqual {95}
	064 Move X9, [X20+32]
	065 Move W11, [X21+28]
	066 Move X10, [X9+192]
	067 Move X9, [X21+16]
	068 Add W11, W11, 1
	069 Move X10, [X10+152]
	070 Move [X21+28], W11
	071 Compare X9, 0
	072 JumpIfEqual {95}
	073 NotImplemented "Instruction LDRSW not yet implemented."
	074 Move W12, [X9+24]
	075 Move X8, X0
	076 Move X2, X1
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Add W10, W11, 1
	079 Add X9, X9, X11
	080 Move [X21+24], W10
	081 Move [X9+32], X8
	082 Move [X9+40], X2
	083 Move X9, [X10+32]
	084 Move X0, X21
	085 Move X1, X8
	086 Move X9, [X9+192]
	087 Move X3, [X9+112]
	088 Call List`1<NativeSlice`1<ConvertMeshJobData>>.AddWithResize, X0, X1
	089 Add W22, W22, 1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X0, [X19+24]
	092 Move X21, [X19+56]
	093 Compare X0, 0
	094 JumpIfNotEqual {53}
	095 Call 0x1C17F20
	096 Move X9, [X10+32]
	097 Move X0, X21
	098 Move X1, X8
	099 Move X9, [X9+192]
	100 Move X3, [X9+112]
	101 Call List`1<NativeSlice`1<ConvertMeshJobData>>.AddWithResize, X0, X1
	102 Move X0, [X19+56]
	103 Move X20, [X31+32]
	104 Move X19, [X31+40]
	105 Move X22, [X31+16]
	106 Move X21, [X31+24]
	107 Move X30, [X31+48]
	108 Move X23, [X31+56]
	109 Return X0

Method: System.Void Reset()

Disassembly:
	0x0240399C CBZ X0, 0x2403AB4
	0x024039A0 LDR X8, [X22 + 0x20]
	0x024039A4 LDR X8, [X8 + 0xC0]
	0x024039A8 LDR X1, [X8 + 0x58]
	0x024039AC LDR X8, [X1]
	0x024039B0 BLR X8
	0x024039B4 CMP W0, 0x0
	0x024039B8 B.LE 0x24039DC
	0x024039BC LDR X8, [X22 + 0x20]
	0x024039C0 MOV X0, X20
	0x024039C4 LDR X8, [X8 + 0xC0]
	0x024039C8 LDR X1, [X8 + 0x30]
	0x024039CC LDR X8, [X1]
	0x024039D0 BLR X8
	0x024039D4 UBFM W1, W0, 0x1F, 0x1E
	0x024039D8 B 0x24039E0
	0x024039DC LDR W1, [X21 + 0x10]
	0x024039E0 STP X31, X31, [X29 - 0x30]
	0x024039E4 LDR X8, [X22 + 0x20]
	0x024039E8 SUB X0, X29, 0x30
	0x024039EC MOVZ W2, 0x4
	0x024039F0 MOV W3, W31
	0x024039F4 LDR X8, [X8 + 0xC0]
	0x024039F8 LDR X4, [X8 + 0x60]
	0x024039FC BL 0x23F5A04
	0x02403A00 LDUR V0, [X29 - 0x30]
	0x02403A04 STR V0, [X20]
	0x02403A08 LDR X2, [X21 + 0x18]
	0x02403A0C CBZ X2, 0x2403AB4
	0x02403A10 LDR X8, [X22 + 0x20]
	0x02403A14 SUB X10, X29, 0x18
	0x02403A18 SUB X3, X29, 0x20
	0x02403A1C SUB X4, X29, 0x18
	0x02403A20 LDR X8, [X8 + 0xC0]
	0x02403A24 SUB X26, X29, 0x20
	0x02403A28 LDR X1, [X8 + 0x68]
	0x02403A2C LDP X8, X9, [X21 + 0x20]
	0x02403A30 LDR X0, [X1]
	0x02403A34 STP X8, X9, [X29 - 0x18]
	0x02403A38 STUR X10, [X29 - 0x20]
	0x02403A3C LDR X8, [X1 + 0x10]
	0x02403A40 BLR X8
	0x02403A44 MOV X0, X19
	0x02403A48 MOV X1, X23
	0x02403A4C MOV X2, X24
	0x02403A50 BL 0x3EB1AC0
	0x02403A54 LDR X8, [X22 + 0x20]
	0x02403A58 SUB X3, X29, 0x18
	0x02403A5C MOV X2, X20
	0x02403A60 MOV X4, X19
	0x02403A64 LDR X8, [X8 + 0xC0]
	0x02403A68 LDR X1, [X8 + 0x50]
	0x02403A6C LDR X0, [X1]
	0x02403A70 STUR W31, [X29 - 0x20]
	0x02403A74 STP X26, X19, [X29 - 0x18]
	0x02403A78 LDR X8, [X1 + 0x10]
	0x02403A7C BLR X8
	0x02403A80 MOVZ W8, 0x1
	0x02403A84 STR W8, [X21 + 0x30]
	0x02403A88 LDR X8, [X25 + 0x28]
	0x02403A8C LDUR X9, [X29 - 0x8]
	0x02403A90 CMP X8, X9
	0x02403A94 B.NE 0x2403AB8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31], X31
	007 Move [X31+8], X31
	008 Move X19, X0
	009 Move X0, [X0+24]
	010 Compare X0, 0
	011 JumpIfEqual {45}
	012 Move W8, [X0+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X1+32]
	015 Move X20, X1
	016 Move W1, W31
	017 Move X8, [X8+192]
	018 Move X2, [X8+120]
	019 Call List`1<NativeArray`1<ConvertMeshJobData>>.get_Item, X0, X1
	020 Move X8, X0
	021 Move X0, [X19+24]
	022 Move [X19+32], X8
	023 Move [X19+40], X1
	024 Compare X0, 0
	025 JumpIfEqual {45}
	026 Move W21, 1
	027 Move X8, [X20+32]
	028 Move W9, [X0+24]
	029 Move X8, [X8+192]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X2, [X8+120]
	032 Move W1, W21
	033 Call List`1<NativeArray`1<ConvertMeshJobData>>.get_Item, X0, X1
	034 Move [X31], X0
	035 Move [X31+8], X1
	036 Move X8, [X20+32]
	037 Add X0, X31, 0
	038 Move X8, [X8+192]
	039 Move X1, [X8+168]
	040 Call NativeArray`1<ConvertMeshJobData>.Dispose, X0
	041 Move X0, [X19+24]
	042 Add W21, W21, 1
	043 Compare X0, 0
	044 JumpIfNotEqual {27}
	045 Call 0x1C17F20
	046 Move W10, [X0+28]
	047 Move X9, [X0+16]
	048 Add W11, W10, 1
	049 Move [X0+24], W31
	050 Move [X0+28], W11
	051 Move X1, [X19+32]
	052 Move X2, [X19+40]
	053 Move X8, [X8+104]
	054 Add W10, W10, 2
	055 Move [X0+28], W10
	056 Compare X9, 0
	057 JumpIfEqual {45}
	058 Move W10, [X9+24]
	059 Compare W10, 0
	060 JumpIfEqual {65}
	061 Move W8, 1
	062 Move [X0+24], W8
	063 Move [X9+32], X1
	064 Move [X9+40], X2
	065 Move X8, [X8+32]
	066 Move X8, [X8+192]
	067 Move X3, [X8+112]
	068 Call List`1<NativeArray`1<ConvertMeshJobData>>.AddWithResize, X0, X1
	069 Move [X19+48], W31
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X30, [X31+16]
	073 Move X21, [X31+24]
	074 Add X31, X31, 48
	075 Return 

Method: System.Boolean get_disposed()

Disassembly:
	0x02403A98 ADD X31, X29, 0x0
	0x02403A9C LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_disposed(System.Boolean value)

Disassembly:
	0x02403AA0 LDP X22, X21, [X31 + 0x30]
	0x02403AA4 LDP X24, X23, [X31 + 0x20]
	0x02403AA8 LDP X26, X25, [X31 + 0x10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+64], W8
	003 Return 

Method: System.Void Dispose()

Disassembly:
	0x02403AAC LDP X29, X30, [X31], #0x50
	0x02403AB0 RET
	0x02403AB4 BL 0x1C16F20
	0x02403AB8 BL 0x3EB1B20
	0x02403ABC SUB X31, X31, 0x60
	0x02403AC0 STP X30, X25, [X31 + 0x20]
	0x02403AC4 STP X24, X23, [X31 + 0x30]
	0x02403AC8 STP X22, X21, [X31 + 0x40]
	0x02403ACC STP X20, X19, [X31 + 0x50]
	0x02403AD0 MOV X19, X0
	0x02403AD4 LDR X0, [X0 + 0x38]
	0x02403AD8 CBZ X0, 0x2403C60
	0x02403ADC LDR X8, [X1 + 0x20]
	0x02403AE0 MOV X20, X1
	0x02403AE4 LDR X8, [X8 + 0xC0]
	0x02403AE8 LDR X1, [X8 + 0x70]
	0x02403AEC LDR X8, [X1]
	0x02403AF0 BLR X8
	0x02403AF4 LDR X0, [X19 + 0x18]
	0x02403AF8 CBZ X0, 0x2403C60
	0x02403AFC LDR X8, [X20 + 0x20]
	0x02403B00 LDR X8, [X8 + 0xC0]
	0x02403B04 LDR X1, [X8 + 0x58]
	0x02403B08 LDR X8, [X1]
	0x02403B0C BLR X8
	0x02403B10 CMP W0, 0x1
	0x02403B14 B.LT 0x2403C44
	0x02403B18 LDR X0, [X19 + 0x18]
	0x02403B1C CBZ X0, 0x2403C60
	0x02403B20 LDR X8, [X20 + 0x20]
	0x02403B24 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1FD7000
	007 Move X21, 0x1CF8000
	008 Move W8, [X22+2472]
	009 Move X21, [X21+3088]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1CF8000
	017 Move X0, [X0+3088]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2472], W8
	021 Move X8, [X20+32]
	022 Move W1, 1
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+184]
	026 Call 0x2403B28, X0, X1
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+48]
	039 Call GC.SuppressFinalize, X0
	040 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x02403B28 LDR X1, [X8 + 0x58]
	0x02403B2C LDR X8, [X1]
	0x02403B30 BLR X8
	0x02403B34 SUB W22, W0, 0x1
	0x02403B38 CMP W22, 0x1
	0x02403B3C B.LT 0x2403BDC
	0x02403B40 MOV W23, W31
	0x02403B44 ADD X24, X31, 0xC
	0x02403B48 ADD X25, X31, 0x10
	0x02403B4C LDR X2, [X19 + 0x18]
	0x02403B50 CBZ X2, 0x2403C60
	0x02403B54 LDR X8, [X20 + 0x20]
	0x02403B58 LDR X21, [X19 + 0x38]
	0x02403B5C ADD X3, X31, 0x0
	0x02403B60 ADD X4, X31, 0x10
	0x02403B64 LDR X8, [X8 + 0xC0]
	0x02403B68 LDR X1, [X8 + 0x78]
	0x02403B6C LDR X0, [X1]
	0x02403B70 STR W23, [X31 + 0xC]
	0x02403B74 STR X24, [X31]
	0x02403B78 LDR X8, [X1 + 0x10]
	0x02403B7C BLR X8
	0x02403B80 LDR X8, [X20 + 0x20]
	0x02403B84 LDP X0, X1, [X31 + 0x10]
	0x02403B88 LDR X8, [X8 + 0xC0]
	0x02403B8C LDR X2, [X8 + 0x80]
	0x02403B90 LDR X8, [X2]
	0x02403B94 BLR X8
	0x02403B98 CBZ X21, 0x2403C60
	0x02403B9C LDR X8, [X20 + 0x20]
	0x02403BA0 ADD X3, X31, 0x0
	0x02403BA4 ADD X4, X31, 0x10
	0x02403BA8 MOV X2, X21
	0x02403BAC LDR X8, [X8 + 0xC0]
	0x02403BB0 LDR X8, [X8 + 0x98]
	0x02403BB4 LDR X9, [X8]
	0x02403BB8 STP X0, X1, [X31 + 0x10]
	0x02403BBC STR X25, [X31]
	0x02403BC0 LDR X10, [X8 + 0x10]
	0x02403BC4 MOV X0, X9

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31], X31
	007 Move [X31+8], X31
	008 Move W8, [X0+64]
	009 Compare W8, 0
	010 JumpIfNotEqual {47}
	011 Move X19, X0
	012 Move TEMP, X1
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {45}
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfEqual {39}
	019 Move X20, X2
	020 Move W21, W31
	021 Move W8, [X0+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, [X20+32]
	024 Move W1, W21
	025 Move X8, [X8+192]
	026 Move X2, [X8+120]
	027 Call List`1<NativeArray`1<ConvertMeshJobData>>.get_Item, X0, X1
	028 Move [X31], X0
	029 Move [X31+8], X1
	030 Move X8, [X20+32]
	031 Add X0, X31, 0
	032 Move X8, [X8+192]
	033 Move X1, [X8+168]
	034 Call NativeArray`1<ConvertMeshJobData>.Dispose, X0
	035 Move X0, [X19+24]
	036 Add W21, W21, 1
	037 Compare X0, 0
	038 JumpIfNotEqual {21}
	039 Call 0x1C17F20
	040 Move W8, [X0+28]
	041 Add W8, W8, 1
	042 Move [X0+24], W31
	043 Move [X0+28], W8
	044 Move [X19+48], W31
	045 Move W8, 1
	046 Move [X19+64], W8
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Add X31, X31, 48
	052 Return 

