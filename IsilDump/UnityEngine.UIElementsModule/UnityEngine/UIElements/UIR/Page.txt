Type: UnityEngine.UIElements.UIR.Page

Method: System.Void .ctor(System.UInt32 vertexMaxCount, System.UInt32 indexMaxCount, System.UInt32 maxQueuedFrameCount, System.Boolean mockPage)

Disassembly:
	0x03D31A64 ADD X25, X31, 0x1C8
	0x03D31A68 LDR X9, [X19 + 0x10]
	0x03D31A6C LDR V0, [X19]
	0x03D31A70 LDR X8, [X29 + 0x50]
	0x03D31A74 STR W31, [X31 + 0x1C8]
	0x03D31A78 STR X9, [X31 + 0x1E0]
	0x03D31A7C STR V0, [X31 + 0x1D]
	0x03D31A80 STUR W31, [X25 + 0x3]
	0x03D31A84 ADRP X11, 0x433000
	0x03D31A88 LDR W10, [X21 + 0x1C]
	0x03D31A8C LDR X9, [X21 + 0x10]
	0x03D31A90 LDR X11, [X11 + 0xEE8]
	0x03D31A94 ADD W10, W10, 0x1
	0x03D31A98 LDR X11, [X11]
	0x03D31A9C STR W10, [X21 + 0x1C]
	0x03D31AA0 CBZ X9, 0x3D31CCC
	0x03D31AA4 LDRSW X10, [X21 + 0x18]
	0x03D31AA8 LDR W12, [X9 + 0x18]
	0x03D31AAC CMP W10, W12
	0x03D31AB0 B.CS 0x3D31AF0
	0x03D31AB4 ADD W11, W10, 0x1
	0x03D31AB8 STR W11, [X21 + 0x18]
	0x03D31ABC LDR V0, [X31 + 0x1D]
	0x03D31AC0 LDR X11, [X31 + 0x1E0]
	0x03D31AC4 MOVZ W12, 0x28
	0x03D31AC8 MADD X9, X10, X12, X9
	0x03D31ACC MOVZ W10, 0x1
	0x03D31AD0 STRB W10, [X9 + 0x40]
	0x03D31AD4 STR V0, [X9 + 0x2]
	0x03D31AD8 STP X11, X8, [X9 + 0x30]
	0x03D31ADC LDUR W8, [X25 + 0x3]
	0x03D31AE0 LDR W10, [X31 + 0x1C8]
	0x03D31AE4 STR W8, [X9 + 0x44]
	0x03D31AE8 STUR W10, [X9 + 0x41]
	0x03D31AEC B 0x3D31B34
	0x03D31AF0 LDR X9, [X11 + 0x20]
	0x03D31AF4 LDR X10, [X31 + 0x1E0]
	0x03D31AF8 LDR V0, [X31 + 0x1D]
	0x03D31AFC LDR W11, [X31 + 0x1C8]
	0x03D31B00 LDR X9, [X9 + 0xC0]
	0x03D31B04 LDUR W12, [X25 + 0x3]
	0x03D31B08 LDR X2, [X9 + 0x70]
	0x03D31B0C STP X10, X8, [X31 + 0x40]
	0x03D31B10 MOVZ W8, 0x1
	0x03D31B14 STRB W8, [X31 + 0x50]
	0x03D31B18 LDR X8, [X31 + 0x28]
	0x03D31B1C STR V0, [X31 + 0x3]
	0x03D31B20 STUR W12, [X8 + 0x3]
	0x03D31B24 STR W11, [X8]
	0x03D31B28 ADD X1, X31, 0x30
	0x03D31B2C MOV X0, X21
	0x03D31B30 BL 0x31614A8
	0x03D31B34 LDR X9, [X29 + 0x40]
	0x03D31B38 LDR V0, [X29 + 0x3]
	0x03D31B3C LDR X8, [X29 + 0x50]
	0x03D31B40 STR W31, [X31 + 0x1C8]
	0x03D31B44 STR X9, [X31 + 0x1E0]
	0x03D31B48 STR V0, [X31 + 0x1D]
	0x03D31B4C STUR W31, [X25 + 0x3]
	0x03D31B50 ADRP X11, 0x433000
	0x03D31B54 LDR W10, [X21 + 0x1C]
	0x03D31B58 LDR X9, [X21 + 0x10]
	0x03D31B5C LDR X11, [X11 + 0xEE8]
	0x03D31B60 ADD W10, W10, 0x1
	0x03D31B64 LDR X11, [X11]
	0x03D31B68 STR W10, [X21 + 0x1C]
	0x03D31B6C CBZ X9, 0x3D31CDC
	0x03D31B70 LDRSW X10, [X21 + 0x18]
	0x03D31B74 LDR W12, [X9 + 0x18]
	0x03D31B78 CMP W10, W12
	0x03D31B7C B.CS 0x3D31BB8
	0x03D31B80 ADD W11, W10, 0x1
	0x03D31B84 STR W11, [X21 + 0x18]
	0x03D31B88 LDR V0, [X31 + 0x1D]
	0x03D31B8C LDR X11, [X31 + 0x1E0]
	0x03D31B90 MOVZ W12, 0x28
	0x03D31B94 MADD X9, X10, X12, X9
	0x03D31B98 STRB W31, [X9 + 0x40]
	0x03D31B9C STR V0, [X9 + 0x2]
	0x03D31BA0 STP X11, X8, [X9 + 0x30]
	0x03D31BA4 LDUR W8, [X25 + 0x3]
	0x03D31BA8 LDR W10, [X31 + 0x1C8]
	0x03D31BAC STR W8, [X9 + 0x44]
	0x03D31BB0 STUR W10, [X9 + 0x41]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X25, 0x6B7000
	013 Move X24, 0x3C3000
	014 Move W8, [X25+2873]
	015 Move X24, [X24+1448]
	016 Move W22, W4
	017 Move W20, W3
	018 Move W21, W2
	019 Move W23, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {42}
	025 Move X0, 0x434000
	026 Move X0, [X0+3880]
	027 Call 0x1C17CF4
	028 Move X0, 0x434000
	029 Move X0, [X0+3888]
	030 Call 0x1C17CF4
	031 Move X0, 0x434000
	032 Move X0, [X0+3896]
	033 Call 0x1C17CF4
	034 Move X0, 0x434000
	035 Move X0, [X0+3904]
	036 Call 0x1C17CF4
	037 Move X0, 0x3C3000
	038 Move X0, [X0+1448]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X25+2873], W8
	042 Move X28, 0x434000
	043 Move X27, 0x434000
	044 Move X26, 0x434000
	045 Move X25, 0x434000
	046 Move X28, [X28+3904]
	047 Move X27, [X27+3888]
	048 Move X26, [X26+3896]
	049 Move X25, [X25+3880]
	050 Move X0, X19
	051 Move X1, X31
	052 Call Object..ctor, X0
	053 Move X0, [X24]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W1, 0x10000
	059 Move W0, W23
	060 Move X2, X31
	061 Call Math.Min, X0, X1
	062 Move X8, [X28]
	063 Move W23, W0
	064 Move X0, X8
	065 Call 0x1C17F10
	066 Move X6, [X27]
	067 And W22, W22, 1
	068 Move W4, 32
	069 Move W1, W31
	070 Move W2, W23
	071 Move W3, W20
	072 Move W5, W22
	073 Move X24, X0
	074 Call DataSet`1<Vertex>..ctor, X0, X1, X2, X3, X4, X5
	075 Move [X19+24], X24
	076 Move X0, [X26]
	077 Call 0x1C17F10
	078 Move X6, [X25]
	079 Move W1, 1
	080 Move W4, 32
	081 Move W2, W21
	082 Move W3, W20
	083 Move W5, W22
	084 Move X23, X0
	085 Call 0x29AD0C8, X0, X1, X2, X3, X4, X5
	086 Move [X19+32], X23
	087 Move X20, [X31+80]
	088 Move X19, [X31+88]
	089 Move X22, [X31+64]
	090 Move X21, [X31+72]
	091 Move X24, [X31+48]
	092 Move X23, [X31+56]
	093 Move X26, [X31+32]
	094 Move X25, [X31+40]
	095 Move X28, [X31+16]
	096 Move X27, [X31+24]
	097 Move X30, [X31+96]
	098 Return 

Method: System.Boolean get_disposed()

Disassembly:
	0x03D35AB8 LDR X0, [X8]
	0x03D35ABC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_disposed(System.Boolean value)

Disassembly:
	0x03D35AC0 CBNZ W8, 0x3D35AC8
	0x03D35AC4 BL 0x1C16DFC
	0x03D35AC8 LDR X0, [X31 + 0xD0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Void Dispose()

Disassembly:
	0x03D34D04 FADD S0, S9, S11
	0x03D34D08 SCVTF S13, W19
	0x03D34D0C FMUL S11, S0, S8
	0x03D34D10 CBNZ W8, 0x3D34D28
	0x03D34D14 ADRP X0, 0x3BF000
	0x03D34D18 LDR X0, [X0 + 0x5A8]
	0x03D34D1C BL 0x1C16CF4
	0x03D34D20 MOVZ W8, 0x1
	0x03D34D24 STRB W8, [X20 + 0x5D7]
	0x03D34D28 LDR X0, [X21]
	0x03D34D2C FSUB S13, S13, S11
	0x03D34D30 LDR W8, [X0 + 0xE0]
	0x03D34D34 CBNZ W8, 0x3D34D3C
	0x03D34D38 BL 0x1C16DFC
	0x03D34D3C FCVT S11, S13
	0x03D34D40 ADD X0, X31, 0x8
	0x03D34D44 MOV V0.16B, V11.16B
	0x03D34D48 BL 0x3EB1C00
	0x03D34D4C FCMP S13, 0x0
	0x03D34D50 B.GE 0x3D34D6C
	0x03D34D54 FMOV D1, -0.5
	0x03D34D58 FCMP D0, D1
	0x03D34D5C B.NE 0x3D34D94
	0x03D34D60 LDR V0, [X31 + 0x8]
	0x03D34D64 FMOV D1, -1
	0x03D34D68 B 0x3D34D80
	0x03D34D6C FMOV D1, 0.5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6B4000
	006 Move X20, 0x3C7000
	007 Move W8, [X21+2874]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3C7000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2874], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+392]
	023 Move X2, [X8+400]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03D35ACC MOV X1, X22
	0x03D35AD0 BL 0x3D36C4C
	0x03D35AD4 B 0x3D35AF4
	0x03D35AD8 CMP W21, 0x4
	0x03D35ADC B.EQ 0x3D35AE8
	0x03D35AE0 CMP W21, 0x2
	0x03D35AE4 B.NE 0x3D35AF4
	0x03D35AE8 LDR X0, [X31 + 0xA8]
	0x03D35AEC MOV X1, X31
	0x03D35AF0 BL 0x3D42538
	0x03D35AF4 LDR X8, [X31 + 0xD0]
	0x03D35AF8 LDR X10, [X31 + 0xA0]
	0x03D35AFC LDR X22, [X8 + 0x100]
	0x03D35B00 STR X22, [X31 + 0x458]
	0x03D35B04 CBZ X10, 0x3D36898
	0x03D35B08 LDR X8, [X31 + 0xA8]
	0x03D35B0C LDRSW X9, [X8 + 0x118]
	0x03D35B10 LDR W8, [X10 + 0xA8]
	0x03D35B14 CMP X9, X8
	0x03D35B18 B.LE 0x3D35BD4
	0x03D35B1C ADRP X9, 0x3C6000
	0x03D35B20 LDR X9, [X9 + 0x720]
	0x03D35B24 ADD X1, X31, 0xD8
	0x03D35B28 STR W8, [X31 + 0xD8]
	0x03D35B2C LDR X0, [X9]
	0x03D35B30 BL 0x1C16E04
	0x03D35B34 ADRP X8, 0x430000
	0x03D35B38 LDR X8, [X8 + 0x150]
	0x03D35B3C ADRP X9, 0x430000
	0x03D35B40 LDR X9, [X9 + 0x158]
	0x03D35B44 MOV X2, X0
	0x03D35B48 LDR X8, [X8]
	0x03D35B4C MOV X3, X31
	0x03D35B50 LDR X1, [X9]
	0x03D35B54 MOV X0, X8
	0x03D35B58 BL 0x3227BD4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6B3000
	006 Move W8, [X21+2875]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x431000
	014 Move X0, [X0+224]
	015 Call 0x1C17CF4
	016 Move X0, 0x431000
	017 Move X0, [X0+232]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2875], W8
	021 Move W8, [X19+16]
	022 Compare W8, 0
	023 JumpIfNotEqual {44}
	024 Move TEMP, X20
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {42}
	028 Move X0, [X19+32]
	029 Compare X0, 0
	030 JumpIfEqual {49}
	031 Move X8, 0x431000
	032 Move X8, [X8+232]
	033 Move X1, [X8]
	034 Call 0x29AD254, X0
	035 Move X0, [X19+24]
	036 Compare X0, 0
	037 JumpIfEqual {49}
	038 Move X8, 0x431000
	039 Move X8, [X8+224]
	040 Move X1, [X8]
	041 Call DataSet`1<Vertex>.Dispose, X0
	042 Move W8, 1
	043 Move [X19+16], W8
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 
	049 Call 0x1C17F20

Method: System.Boolean get_isEmpty()

Disassembly:
	0x03D31BB4 B 0x3D31BF8
	0x03D31BB8 LDR X9, [X11 + 0x20]
	0x03D31BBC LDR X10, [X31 + 0x1E0]
	0x03D31BC0 LDR V0, [X31 + 0x1D]
	0x03D31BC4 LDR W11, [X31 + 0x1C8]
	0x03D31BC8 LDR X9, [X9 + 0xC0]
	0x03D31BCC LDUR W12, [X25 + 0x3]
	0x03D31BD0 LDR X2, [X9 + 0x70]
	0x03D31BD4 STP X10, X8, [X31 + 0x40]
	0x03D31BD8 LDR X8, [X31 + 0x28]
	0x03D31BDC STR V0, [X31 + 0x3]
	0x03D31BE0 STRB W31, [X31 + 0x50]
	0x03D31BE4 STUR W12, [X8 + 0x3]
	0x03D31BE8 STR W11, [X8]
	0x03D31BEC ADD X1, X31, 0x30
	0x03D31BF0 MOV X0, X21
	0x03D31BF4 BL 0x31614A8
	0x03D31BF8 STR W23, [X29 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+24]
	004 Compare X8, 0
	005 JumpIfEqual {29}
	006 Move X19, X0
	007 Move X0, [X8+64]
	008 Compare X0, 0
	009 JumpIfEqual {29}
	010 Call GPUBufferAllocator.get_isEmpty, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {25}
	015 Move X8, [X19+32]
	016 Compare X8, 0
	017 JumpIfEqual {29}
	018 Move X0, [X8+64]
	019 Compare X0, 0
	020 JumpIfEqual {29}
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call GPUBufferAllocator.get_isEmpty, X0
	024 Return X0
	025 Move W0, W31
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return X0
	029 Call 0x1C17F20

