Type: UnityEngine.UIElements.UIR.RenderChainCommand

Method: System.Void Reset()

Disassembly:
	0x03D35BC0 MOV X1, X21
	0x03D35BC4 MOV X2, X31
	0x03D35BC8 BL 0x3D3CE8C
	0x03D35BCC MOV X22, X31
	0x03D35BD0 B 0x3D35BD8
	0x03D35BD4 LDR X23, [X31 + 0xA8]
	0x03D35BD8 MOV X0, X23
	0x03D35BDC MOV X1, X31
	0x03D35BE0 BL 0x3D3CE48

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X0+24], X31
	003 Move [X0+32], X31
	004 Move [X0+48], W31
	005 Move [X0+40], X31
	006 Move [X0+52], V0
	007 Move [X0+68], V0
	008 Move [X0+84], V0
	009 Move [X0+100], W31
	010 Return 

Method: System.Void ExecuteNonDrawMesh(UnityEngine.UIElements.UIR.DrawParams drawParams, System.Single pixelsPerPoint, ref System.Exception immediateException)

Disassembly:
	0x03D34018 LDR X0, [X20]
	0x03D3401C LDR W8, [X0 + 0xE0]
	0x03D34020 CBNZ W8, 0x3D34028
	0x03D34024 BL 0x1C16DFC
	0x03D34028 LDP X20, X19, [X31 + 0x10]
	0x03D3402C LDR X30, [X31], #0x20
	0x03D34030 B 0x3D2F16C
	0x03D34034 STR X30, [X31 - 0x20]!
	0x03D34038 STP X20, X19, [X31 + 0x10]
	0x03D3403C ADRP X20, 0x6B3000
	0x03D34040 ADRP X19, 0x430000
	0x03D34044 LDRB W8, [X20 + 0xB2C]
	0x03D34048 LDR X19, [X19 + 0x6F8]
	0x03D3404C TBNZ X8, 0x0, 0x3D34064
	0x03D34050 ADRP X0, 0x430000
	0x03D34054 LDR X0, [X0 + 0x6F8]
	0x03D34058 BL 0x1C16CF4
	0x03D3405C MOVZ W8, 0x1
	0x03D34060 STRB W8, [X20 + 0xB2C]
	0x03D34064 LDR X0, [X19]
	0x03D34068 LDR W8, [X0 + 0xE0]
	0x03D3406C CBNZ W8, 0x3D34078
	0x03D34070 BL 0x1C16DFC
	0x03D34074 LDR X0, [X19]
	0x03D34078 LDR X8, [X0 + 0xB8]
	0x03D3407C LDP X20, X19, [X31 + 0x10]
	0x03D34080 MOVZ W9, 0x1
	0x03D34084 STRB W9, [X8 + 0xD]
	0x03D34088 LDR X30, [X31], #0x20
	0x03D3408C B 0x3D2F16C
	0x03D34090 STR X30, [X31 - 0x20]!
	0x03D34094 STP X20, X19, [X31 + 0x10]
	0x03D34098 ADRP X19, 0x6B3000
	0x03D3409C ADRP X20, 0x430000
	0x03D340A0 LDRB W8, [X19 + 0xB2D]
	0x03D340A4 LDR X20, [X20 + 0xD98]
	0x03D340A8 TBNZ X8, 0x0, 0x3D340C0
	0x03D340AC ADRP X0, 0x430000
	0x03D340B0 LDR X0, [X0 + 0xD98]
	0x03D340B4 BL 0x1C16CF4
	0x03D340B8 MOVZ W8, 0x1
	0x03D340BC STRB W8, [X19 + 0xB2D]
	0x03D340C0 LDR X0, [X20]
	0x03D340C4 BL 0x1C16F10
	0x03D340C8 MOV X1, X31
	0x03D340CC MOV X19, X0
	0x03D340D0 BL 0x33BDD8C
	0x03D340D4 LDR X8, [X20]
	0x03D340D8 LDR X8, [X8 + 0xB8]
	0x03D340DC STR X19, [X8]
	0x03D340E0 LDP X20, X19, [X31 + 0x10]
	0x03D340E4 LDR X30, [X31], #0x20
	0x03D340E8 RET
	0x03D340EC MOV X1, X31
	0x03D340F0 B 0x33BDD8C
	0x03D340F4 STR X30, [X31 - 0x20]!
	0x03D340F8 STP X20, X19, [X31 + 0x10]
	0x03D340FC ADRP X19, 0x6B3000
	0x03D34100 ADRP X20, 0x431000
	0x03D34104 LDRB W8, [X19 + 0xB2E]
	0x03D34108 LDR X20, [X20 + 0x80]
	0x03D3410C TBNZ X8, 0x0, 0x3D34124
	0x03D34110 ADRP X0, 0x431000
	0x03D34114 LDR X0, [X0 + 0x80]
	0x03D34118 BL 0x1C16CF4
	0x03D3411C MOVZ W8, 0x1
	0x03D34120 STRB W8, [X19 + 0xB2E]
	0x03D34124 LDR X0, [X20]
	0x03D34128 BL 0x1C16F10
	0x03D3412C MOV X19, X0
	0x03D34130 BL 0x3D2E0B4
	0x03D34134 MOV X0, X19
	0x03D34138 LDP X20, X19, [X31 + 0x10]
	0x03D3413C LDR X30, [X31], #0x20
	0x03D34140 RET
	0x03D34144 RET
	0x03D34148 STR X30, [X31 - 0x30]!
	0x03D3414C STP X22, X21, [X31 + 0x10]
	0x03D34150 STP X20, X19, [X31 + 0x20]
	0x03D34154 ADRP X21, 0x6B3000
	0x03D34158 ADRP X22, 0x431000
	0x03D3415C LDRB W8, [X21 + 0xB30]
	0x03D34160 LDR X22, [X22 + 0x88]
	0x03D34164 MOV W19, W1
	0x03D34168 MOV X20, X0
	0x03D3416C TBNZ X8, 0x0, 0x3D34190
	0x03D34170 ADRP X0, 0x431000
	0x03D34174 LDR X0, [X0 + 0x88]
	0x03D34178 BL 0x1C16CF4
	0x03D3417C ADRP X0, 0x431000
	0x03D34180 LDR X0, [X0 + 0x90]
	0x03D34184 BL 0x1C16CF4
	0x03D34188 MOVZ W8, 0x1
	0x03D3418C STRB W8, [X21 + 0xB30]
	0x03D34190 LDR X0, [X22]
	0x03D34194 BL 0x1C16F10
	0x03D34198 MOV X21, X0
	0x03D3419C BL 0x3D341EC
	0x03D341A0 MOV X0, X20
	0x03D341A4 MOV X1, X31
	0x03D341A8 STR X21, [X20 + 0x28]
	0x03D341AC BL 0x33BDD8C
	0x03D341B0 LDR X0, [X20 + 0x28]
	0x03D341B4 STR W19, [X20 + 0x10]
	0x03D341B8 CBZ X0, 0x3D341E8
	0x03D341BC ADRP X8, 0x431000
	0x03D341C0 LDR X8, [X8 + 0x90]
	0x03D341C4 LDR X1, [X8]
	0x03D341C8 BL 0x2EF0E28
	0x03D341CC STP X0, X0, [X20 + 0x18]
	0x03D341D0 CBZ X0, 0x3D341E8
	0x03D341D4 STR W19, [X0 + 0x1C]
	0x03D341D8 LDP X20, X19, [X31 + 0x20]
	0x03D341DC LDP X22, X21, [X31 + 0x10]
	0x03D341E0 LDR X30, [X31], #0x30
	0x03D341E4 RET
	0x03D341E8 BL 0x1C16F20
	0x03D341EC STP X30, X25, [X31 - 0x40]!
	0x03D341F0 STP X24, X23, [X31 + 0x10]
	0x03D341F4 STP X22, X21, [X31 + 0x20]
	0x03D341F8 STP X20, X19, [X31 + 0x30]
	0x03D341FC ADRP X24, 0x6B3000
	0x03D34200 ADRP X25, 0x431000
	0x03D34204 ADRP X20, 0x431000
	0x03D34208 ADRP X23, 0x431000
	0x03D3420C ADRP X21, 0x431000
	0x03D34210 ADRP X22, 0x431000
	0x03D34214 LDRB W8, [X24 + 0xB36]
	0x03D34218 LDR X25, [X25 + 0x98]
	0x03D3421C LDR X20, [X20 + 0xA0]
	0x03D34220 LDR X23, [X23 + 0xA8]
	0x03D34224 LDR X21, [X21 + 0xB0]
	0x03D34228 LDR X22, [X22 + 0xB8]
	0x03D3422C MOV X19, X0
	0x03D34230 TBNZ X8, 0x0, 0x3D34278
	0x03D34234 ADRP X0, 0x431000
	0x03D34238 LDR X0, [X0 + 0xA8]
	0x03D3423C BL 0x1C16CF4
	0x03D34240 ADRP X0, 0x431000
	0x03D34244 LDR X0, [X0 + 0xA0]
	0x03D34248 BL 0x1C16CF4
	0x03D3424C ADRP X0, 0x431000
	0x03D34250 LDR X0, [X0 + 0xB0]
	0x03D34254 BL 0x1C16CF4
	0x03D34258 ADRP X0, 0x431000
	0x03D3425C LDR X0, [X0 + 0x98]
	0x03D34260 BL 0x1C16CF4
	0x03D34264 ADRP X0, 0x431000
	0x03D34268 LDR X0, [X0 + 0xB8]
	0x03D3426C BL 0x1C16CF4
	0x03D34270 MOVZ W8, 0x1
	0x03D34274 STRB W8, [X24 + 0xB36]
	0x03D34278 LDR X0, [X25]
	0x03D3427C BL 0x1C16F10
	0x03D34280 LDR X2, [X20]
	0x03D34284 MOV X1, X31
	0x03D34288 MOV X3, X31
	0x03D3428C MOV X20, X0
	0x03D34290 BL 0x2D27AA8
	0x03D34294 LDR X0, [X23]
	0x03D34298 BL 0x1C16F10
	0x03D3429C LDR X2, [X21]
	0x03D342A0 MOV X1, X31
	0x03D342A4 MOV X3, X31
	0x03D342A8 MOV X21, X0
	0x03D342AC BL 0x2A6B948
	0x03D342B0 LDR X4, [X22]
	0x03D342B4 MOV X0, X19
	0x03D342B8 MOV X1, X20
	0x03D342BC MOV X2, X21
	0x03D342C0 LDP X20, X19, [X31 + 0x30]
	0x03D342C4 LDP X22, X21, [X31 + 0x20]
	0x03D342C8 LDP X24, X23, [X31 + 0x10]
	0x03D342CC MOVZ W3, 0x2710
	0x03D342D0 LDP X30, X25, [X31], #0x40
	0x03D342D4 B 0x2EF0D58
	0x03D342D8 LDR W0, [X0 + 0x10]
	0x03D342DC RET
	0x03D342E0 LDR W0, [X0 + 0x30]
	0x03D342E4 RET
	0x03D342E8 STR X30, [X31 - 0x40]!
	0x03D342EC STP X24, X23, [X31 + 0x10]
	0x03D342F0 STP X22, X21, [X31 + 0x20]
	0x03D342F4 STP X20, X19, [X31 + 0x30]
	0x03D342F8 ADRP X20, 0x6B3000
	0x03D342FC LDRB W9, [X20 + 0xB31]
	0x03D34300 MOV W22, W1
	0x03D34304 MOV X21, X0
	0x03D34308 MOV X19, X8
	0x03D3430C TBNZ X9, 0x0, 0x3D34324
	0x03D34310 ADRP X0, 0x3BF000
	0x03D34314 LDR X0, [X0 + 0xA28]
	0x03D34318 BL 0x1C16CF4
	0x03D3431C MOVZ W8, 0x1
	0x03D34320 STRB W8, [X20 + 0xB31]
	0x03D34324 LDR X8, [X21 + 0x20]
	0x03D34328 CBZ X8, 0x3D34450
	0x03D3432C MOV X20, X31
	0x03D34330 MOVN W9, 0x0
	0x03D34334 LDP W11, W10, [X8 + 0x18]
	0x03D34338 SUB W10, W10, W11
	0x03D3433C CMP W9, W10
	0x03D34340 CSEL X11, X8, X20, HI
	0x03D34344 LDR X8, [X8 + 0x38]
	0x03D34348 CSEL W12, W10, W9, HI
	0x03D3434C CMP W10, W22
	0x03D34350 CSEL W9, W9, W12, CC
	0x03D34354 CSEL X20, X20, X11, CC
	0x03D34358 CBNZ X8, 0x3D34334
	0x03D3435C CBZ X20, 0x3D34458
	0x03D34360 ADRP X23, 0x3BF000
	0x03D34364 LDR X23, [X23 + 0xA28]
	0x03D34368 LDP W9, W8, [X20 + 0x18]
	0x03D3436C LDR X0, [X23]
	0x03D34370 SUB W24, W8, W9
	0x03D34374 LDR W10, [X0 + 0xE0]
	0x03D34378 CBNZ W10, 0x3D34380
	0x03D3437C BL 0x1C16DFC
	0x03D34380 CMP W24, W22
	0x03D34384 CSET W0, CS
	0x03D34388 MOV X1, X31
	0x03D3438C BL 0x3C06E58
	0x03D34390 LDRB W8, [X20 + 0x40]
	0x03D34394 MOV X1, X31
	0x03D34398 CMP W8, 0x0
	0x03D3439C CSET W0, EQ
	0x03D343A0 BL 0x3C06E58
	0x03D343A4 LDP W9, W8, [X20 + 0x18]
	0x03D343A8 SUB W24, W8, W9
	0x03D343AC CMP W24, W22
	0x03D343B0 B.EQ 0x3D343CC
	0x03D343B4 MOV X0, X21
	0x03D343B8 MOV X1, X20
	0x03D343BC MOV W2, W22
	0x03D343C0 BL 0x3D344D0
	0x03D343C4 LDP W9, W8, [X20 + 0x18]
	0x03D343C8 SUB W24, W8, W9
	0x03D343CC LDR X0, [X23]
	0x03D343D0 LDR W8, [X0 + 0xE0]
	0x03D343D4 CBNZ W8, 0x3D343DC
	0x03D343D8 BL 0x1C16DFC
	0x03D343DC CMP W24, W22
	0x03D343E0 CSET W0, EQ
	0x03D343E4 MOV X1, X31
	0x03D343E8 BL 0x3C06E58
	0x03D343EC LDR W8, [X20 + 0x1C]
	0x03D343F0 LDR W9, [X21 + 0x30]
	0x03D343F4 CMP W8, W9
	0x03D343F8 B.LS 0x3D34400
	0x03D343FC STR W8, [X21 + 0x30]
	0x03D34400 LDR X9, [X21 + 0x20]
	0x03D34404 CMP X20, X9
	0x03D34408 B.NE 0x3D34418
	0x03D3440C CBZ X9, 0x3D3447C
	0x03D34410 LDR X9, [X9 + 0x38]
	0x03D34414 STR X9, [X21 + 0x20]
	0x03D34418 MOV X9, X20
	0x03D3441C LDR X10, [X9 + 0x30]!
	0x03D34420 CBZ X10, 0x3D3442C
	0x03D34424 LDR X11, [X20 + 0x38]
	0x03D34428 STR X11, [X10 + 0x38]
	0x03D3442C LDR X11, [X20 + 0x38]
	0x03D34430 CBZ X11, 0x3D34438
	0x03D34434 STR X10, [X11 + 0x30]
	0x03D34438 MOVZ W10, 0x1
	0x03D3443C STRB W10, [X20 + 0x40]
	0x03D34440 STP X31, X31, [X9]
	0x03D34444 LDR W9, [X20 + 0x18]
	0x03D34448 SUB W8, W8, W9
	0x03D3444C B 0x3D34460
	0x03D34450 MOV X20, X31
	0x03D34454 B 0x3D3445C
	0x03D34458 MOV W8, W31
	0x03D3445C MOV W9, W31
	0x03D34460 STP W9, W8, [X19]
	0x03D34464 STP X20, X31, [X19 + 0x8]
	0x03D34468 LDP X20, X19, [X31 + 0x30]
	0x03D3446C LDP X22, X21, [X31 + 0x20]
	0x03D34470 LDP X24, X23, [X31 + 0x10]
	0x03D34474 LDR X30, [X31], #0x40
	0x03D34478 RET
	0x03D3447C BL 0x1C16F20
	0x03D34480 LDR X8, [X0 + 0x20]
	0x03D34484 CBZ X8, 0x3D344BC
	0x03D34488 MOV X0, X31
	0x03D3448C MOVN W9, 0x0
	0x03D34490 LDP W11, W10, [X8 + 0x18]
	0x03D34494 SUB W10, W10, W11
	0x03D34498 CMP W9, W10
	0x03D3449C CSEL X11, X8, X0, HI
	0x03D344A0 LDR X8, [X8 + 0x38]
	0x03D344A4 CSEL W12, W10, W9, HI
	0x03D344A8 CMP W10, W1
	0x03D344AC CSEL W9, W9, W12, CC
	0x03D344B0 CSEL X0, X0, X11, CC
	0x03D344B4 CBNZ X8, 0x3D34490
	0x03D344B8 RET
	0x03D344BC MOV X0, X31
	0x03D344C0 RET
	0x03D344C4 LDP W9, W8, [X0 + 0x18]
	0x03D344C8 SUB W0, W8, W9
	0x03D344CC RET
	0x03D344D0 STR X30, [X31 - 0x30]!
	0x03D344D4 STP X22, X21, [X31 + 0x10]
	0x03D344D8 STP X20, X19, [X31 + 0x20]
	0x03D344DC ADRP X22, 0x6B3000
	0x03D344E0 LDRB W8, [X22 + 0xB34]
	0x03D344E4 MOV W20, W2
	0x03D344E8 MOV X19, X1
	0x03D344EC MOV X21, X0
	0x03D344F0 TBNZ X8, 0x0, 0x3D34514
	0x03D344F4 ADRP X0, 0x3BF000
	0x03D344F8 LDR X0, [X0 + 0xA28]
	0x03D344FC BL 0x1C16CF4
	0x03D34500 ADRP X0, 0x431000
	0x03D34504 LDR X0, [X0 + 0x90]
	0x03D34508 BL 0x1C16CF4
	0x03D3450C MOVZ W8, 0x1
	0x03D34510 STRB W8, [X22 + 0xB34]
	0x03D34514 CBZ X19, 0x3D345B8
	0x03D34518 ADRP X8, 0x3BF000
	0x03D3451C LDR X8, [X8 + 0xA28]
	0x03D34520 LDR X0, [X8]
	0x03D34524 LDP W9, W8, [X19 + 0x18]
	0x03D34528 LDR W10, [X0 + 0xE0]
	0x03D3452C SUB W22, W8, W9
	0x03D34530 CBNZ W10, 0x3D34538
	0x03D34534 BL 0x1C16DFC
	0x03D34538 CMP W22, W20
	0x03D3453C CSET W0, HI
	0x03D34540 MOV X1, X31
	0x03D34544 BL 0x3C06E58
	0x03D34548 LDR X0, [X21 + 0x28]
	0x03D3454C CBZ X0, 0x3D345B8
	0x03D34550 ADRP X8, 0x431000
	0x03D34554 LDR X8, [X8 + 0x90]
	0x03D34558 LDR X1, [X8]
	0x03D3455C BL 0x2EF0E28
	0x03D34560 CBZ X0, 0x3D345B8
	0x03D34564 LDR X10, [X19 + 0x28]
	0x03D34568 STR X10, [X0 + 0x28]
	0x03D3456C LDR X8, [X19 + 0x38]
	0x03D34570 STR X19, [X0 + 0x20]
	0x03D34574 STP X19, X8, [X0 + 0x30]
	0x03D34578 LDR W9, [X19 + 0x18]
	0x03D3457C ADD W9, W9, W20
	0x03D34580 STR W9, [X0 + 0x18]
	0x03D34584 LDR W11, [X19 + 0x1C]
	0x03D34588 STR W11, [X0 + 0x1C]
	0x03D3458C CBZ X10, 0x3D34594
	0x03D34590 STR X0, [X10 + 0x20]
	0x03D34594 CBZ X8, 0x3D3459C
	0x03D34598 STR X0, [X8 + 0x30]
	0x03D3459C STR X0, [X19 + 0x28]
	0x03D345A0 STR X0, [X19 + 0x38]
	0x03D345A4 STR W9, [X19 + 0x1C]
	0x03D345A8 LDP X20, X19, [X31 + 0x20]
	0x03D345AC LDP X22, X21, [X31 + 0x10]
	0x03D345B0 LDR X30, [X31], #0x30
	0x03D345B4 RET
	0x03D345B8 BL 0x1C16F20
	0x03D345BC STR X30, [X31 - 0x30]!
	0x03D345C0 STP X22, X21, [X31 + 0x10]
	0x03D345C4 STP X20, X19, [X31 + 0x20]
	0x03D345C8 ADRP X20, 0x6B3000
	0x03D345CC LDRB W8, [X20 + 0xB32]
	0x03D345D0 MOV X21, X1
	0x03D345D4 MOV X19, X0
	0x03D345D8 TBNZ X8, 0x0, 0x3D34608
	0x03D345DC ADRP X0, 0x431000
	0x03D345E0 LDR X0, [X0 + 0xC0]
	0x03D345E4 BL 0x1C16CF4
	0x03D345E8 ADRP X0, 0x3BF000
	0x03D345EC LDR X0, [X0 + 0xA28]
	0x03D345F0 BL 0x1C16CF4
	0x03D345F4 ADRP X0, 0x431000
	0x03D345F8 LDR X0, [X0 + 0xC8]
	0x03D345FC BL 0x1C16CF4
	0x03D34600 MOVZ W8, 0x1
	0x03D34604 STRB W8, [X20 + 0xB32]
	0x03D34608 LDR X20, [X21 + 0x8]
	0x03D3460C CBZ X20, 0x3D34814
	0x03D34610 ADRP X9, 0x431000
	0x03D34614 LDR X9, [X9 + 0xC0]
	0x03D34618 LDR X8, [X20]
	0x03D3461C LDR X1, [X9]
	0x03D34620 LDRB W10, [X8 + 0x130]
	0x03D34624 LDRB W9, [X1 + 0x130]
	0x03D34628 CMP W10, W9
	0x03D3462C B.CC 0x3D3480C
	0x03D34630 LDR X8, [X8 + 0xC8]
	0x03D34634 ADD X8, X8, X9, 0x3, LSL
	0x03D34638 LDUR X8, [X8 - 0x8]
	0x03D3463C CMP X8, X1
	0x03D34640 B.NE 0x3D3480C
	0x03D34644 ADRP X22, 0x3BF000
	0x03D34648 LDR X22, [X22 + 0xA28]
	0x03D3464C LDRB W9, [X20 + 0x40]
	0x03D34650 LDR X0, [X22]
	0x03D34654 LDR W8, [X0 + 0xE0]
	0x03D34658 CBZ W9, 0x3D34710
	0x03D3465C CBNZ W8, 0x3D34664
	0x03D34660 BL 0x1C16DFC
	0x03D34664 MOVZ W0, 0x1
	0x03D34668 MOV X1, X31
	0x03D3466C BL 0x3C06E58
	0x03D34670 LDR W8, [X20 + 0x18]
	0x03D34674 LDR W9, [X21]
	0x03D34678 MOV X1, X31
	0x03D3467C CMP W8, W9
	0x03D34680 CSET W0, EQ
	0x03D34684 BL 0x3C06E58
	0x03D34688 LDP W9, W8, [X20 + 0x18]
	0x03D3468C LDR W10, [X21 + 0x4]
	0x03D34690 MOV X1, X31
	0x03D34694 SUB W8, W8, W9
	0x03D34698 CMP W8, W10
	0x03D3469C CSET W0, EQ
	0x03D346A0 BL 0x3C06E58
	0x03D346A4 LDR W8, [X20 + 0x1C]
	0x03D346A8 LDR W9, [X19 + 0x30]
	0x03D346AC CMP W8, W9
	0x03D346B0 B.NE 0x3D346D8
	0x03D346B4 LDR X8, [X20 + 0x20]
	0x03D346B8 CBZ X8, 0x3D346D4
	0x03D346BC LDRB W9, [X8 + 0x40]
	0x03D346C0 MOVZ W10, 0x1C
	0x03D346C4 CMP W9, 0x0
	0x03D346C8 MOVZ W9, 0x18
	0x03D346CC CSEL X9, X9, X10, EQ
	0x03D346D0 LDR W8, [X8, X9, LSL]
	0x03D346D4 STR W8, [X19 + 0x30]
	0x03D346D8 STRB W31, [X20 + 0x40]
	0x03D346DC LDR X9, [X19 + 0x20]
	0x03D346E0 CBZ X9, 0x3D3473C
	0x03D346E4 LDR W10, [X20 + 0x18]
	0x03D346E8 LDR W8, [X9 + 0x18]
	0x03D346EC CMP W8, W10
	0x03D346F0 B.CS 0x3D34744
	0x03D346F4 MOV X8, X9
	0x03D346F8 LDR X9, [X9 + 0x38]
	0x03D346FC CBZ X9, 0x3D34788
	0x03D34700 LDR W11, [X9 + 0x18]
	0x03D34704 CMP W11, W10
	0x03D34708 B.CC 0x3D346F4
	0x03D3470C B 0x3D34748
	0x03D34710 CBNZ W8, 0x3D34718
	0x03D34714 BL 0x1C16DFC
	0x03D34718 ADRP X8, 0x431000
	0x03D3471C LDR X8, [X8 + 0xC8]
	0x03D34720 LDP X20, X19, [X31 + 0x20]
	0x03D34724 LDP X22, X21, [X31 + 0x10]
	0x03D34728 MOV W0, W31
	0x03D3472C LDR X1, [X8]
	0x03D34730 MOV X2, X31
	0x03D34734 LDR X30, [X31], #0x30
	0x03D34738 B 0x3C06F88
	0x03D3473C ADD X21, X20, 0x30
	0x03D34740 B 0x3D34750
	0x03D34744 MOV X8, X31
	0x03D34748 ADD X21, X20, 0x30
	0x03D3474C CBNZ X8, 0x3D3478C
	0x03D34750 LDR X0, [X22]
	0x03D34754 LDR X22, [X21]
	0x03D34758 LDR W8, [X0 + 0xE0]
	0x03D3475C CBNZ W8, 0x3D34764
	0x03D34760 BL 0x1C16DFC
	0x03D34764 CMP X22, 0x0
	0x03D34768 CSET W0, EQ
	0x03D3476C MOV X1, X31
	0x03D34770 BL 0x3C06E58
	0x03D34774 LDR X8, [X19 + 0x20]
	0x03D34778 STR X8, [X20 + 0x38]
	0x03D3477C STR X20, [X19 + 0x20]
	0x03D34780 CBNZ X8, 0x3D347A4
	0x03D34784 B 0x3D347AC
	0x03D34788 ADD X21, X20, 0x30
	0x03D3478C STR X8, [X21]
	0x03D34790 LDR X9, [X8 + 0x38]
	0x03D34794 STR X9, [X20 + 0x38]
	0x03D34798 STR X20, [X8 + 0x38]
	0x03D3479C LDR X8, [X20 + 0x38]
	0x03D347A0 CBZ X8, 0x3D347AC
	0x03D347A4 CBZ X8, 0x3D34814
	0x03D347A8 STR X20, [X8 + 0x30]
	0x03D347AC LDR X9, [X21]
	0x03D347B0 LDR X8, [X20 + 0x20]
	0x03D347B4 CMP X9, X8
	0x03D347B8 B.NE 0x3D347D4
	0x03D347BC CBZ X8, 0x3D347D4
	0x03D347C0 MOV X0, X19
	0x03D347C4 MOV X1, X20
	0x03D347C8 BL 0x3D34818
	0x03D347CC MOV X20, X0
	0x03D347D0 CBZ X0, 0x3D34814
	0x03D347D4 LDR X8, [X20 + 0x38]
	0x03D347D8 LDR X1, [X20 + 0x28]
	0x03D347DC CMP X8, X1
	0x03D347E0 B.NE 0x3D347FC
	0x03D347E4 CBZ X1, 0x3D347FC
	0x03D347E8 MOV X0, X19
	0x03D347EC LDP X20, X19, [X31 + 0x20]
	0x03D347F0 LDP X22, X21, [X31 + 0x10]
	0x03D347F4 LDR X30, [X31], #0x30
	0x03D347F8 B 0x3D34818
	0x03D347FC LDP X20, X19, [X31 + 0x20]
	0x03D34800 LDP X22, X21, [X31 + 0x10]
	0x03D34804 LDR X30, [X31], #0x30
	0x03D34808 RET
	0x03D3480C MOV X0, X20
	0x03D34810 BL 0x1C171E0
	0x03D34814 BL 0x1C16F20
	0x03D34818 STR X30, [X31 - 0x30]!
	0x03D3481C STP X22, X21, [X31 + 0x10]
	0x03D34820 STP X20, X19, [X31 + 0x20]
	0x03D34824 ADRP X21, 0x6B3000
	0x03D34828 LDRB W8, [X21 + 0xB33]
	0x03D3482C MOV X19, X1
	0x03D34830 MOV X20, X0
	0x03D34834 TBNZ X8, 0x0, 0x3D34858
	0x03D34838 ADRP X0, 0x3BF000
	0x03D3483C LDR X0, [X0 + 0xA28]
	0x03D34840 BL 0x1C16CF4
	0x03D34844 ADRP X0, 0x431000
	0x03D34848 LDR X0, [X0 + 0xD0]
	0x03D3484C BL 0x1C16CF4
	0x03D34850 MOVZ W8, 0x1
	0x03D34854 STRB W8, [X21 + 0xB33]
	0x03D34858 CBZ X19, 0x3D3491C
	0x03D3485C LDR X8, [X19 + 0x30]
	0x03D34860 CBZ X8, 0x3D3491C
	0x03D34864 ADRP X9, 0x3BF000
	0x03D34868 LDR X9, [X9 + 0xA28]
	0x03D3486C LDR W21, [X8 + 0x1C]
	0x03D34870 LDR W22, [X19 + 0x18]
	0x03D34874 LDR X0, [X9]
	0x03D34878 LDR W8, [X0 + 0xE0]
	0x03D3487C CBNZ W8, 0x3D34884
	0x03D34880 BL 0x1C16DFC
	0x03D34884 CMP W21, W22
	0x03D34888 CSET W0, EQ
	0x03D3488C MOV X1, X31
	0x03D34890 BL 0x3C06E58
	0x03D34894 LDR X8, [X19 + 0x20]
	0x03D34898 CBZ X8, 0x3D3491C
	0x03D3489C LDR X8, [X8 + 0x38]
	0x03D348A0 MOV X1, X31
	0x03D348A4 CMP X8, X19
	0x03D348A8 CSET W0, EQ
	0x03D348AC BL 0x3C06E58
	0x03D348B0 LDR X21, [X19 + 0x20]
	0x03D348B4 CBZ X21, 0x3D3491C
	0x03D348B8 LDR X8, [X19 + 0x28]
	0x03D348BC STR X8, [X21 + 0x28]
	0x03D348C0 LDR X8, [X19 + 0x28]
	0x03D348C4 CBZ X8, 0x3D348CC
	0x03D348C8 STR X21, [X8 + 0x20]
	0x03D348CC LDR X8, [X19 + 0x38]
	0x03D348D0 STR X8, [X21 + 0x38]
	0x03D348D4 LDR X8, [X19 + 0x38]
	0x03D348D8 CBZ X8, 0x3D348E4
	0x03D348DC LDR X9, [X19 + 0x30]
	0x03D348E0 STR X9, [X8 + 0x30]
	0x03D348E4 LDR W8, [X19 + 0x1C]
	0x03D348E8 STR W8, [X21 + 0x1C]
	0x03D348EC LDR X0, [X20 + 0x28]
	0x03D348F0 CBZ X0, 0x3D3491C
	0x03D348F4 ADRP X8, 0x431000
	0x03D348F8 LDR X8, [X8 + 0xD0]
	0x03D348FC MOV X1, X19
	0x03D34900 LDR X2, [X8]
	0x03D34904 BL 0x2EF0E90
	0x03D34908 MOV X0, X21
	0x03D3490C LDP X20, X19, [X31 + 0x20]
	0x03D34910 LDP X22, X21, [X31 + 0x10]
	0x03D34914 LDR X30, [X31], #0x30
	0x03D34918 RET
	0x03D3491C BL 0x1C16F20
	0x03D34920 STR X30, [X31 - 0x20]!
	0x03D34924 STP X20, X19, [X31 + 0x10]
	0x03D34928 ADRP X19, 0x6B3000
	0x03D3492C ADRP X20, 0x431000
	0x03D34930 LDRB W8, [X19 + 0xB35]
	0x03D34934 LDR X20, [X20 + 0xC0]
	0x03D34938 TBNZ X8, 0x0, 0x3D34950
	0x03D3493C ADRP X0, 0x431000
	0x03D34940 LDR X0, [X0 + 0xC0]
	0x03D34944 BL 0x1C16CF4
	0x03D34948 MOVZ W8, 0x1
	0x03D3494C STRB W8, [X19 + 0xB35]
	0x03D34950 LDR X0, [X20]
	0x03D34954 BL 0x1C16F10
	0x03D34958 MOV X19, X0
	0x03D3495C BL 0x3D34970
	0x03D34960 MOV X0, X19
	0x03D34964 LDP X20, X19, [X31 + 0x10]
	0x03D34968 LDR X30, [X31], #0x20
	0x03D3496C RET
	0x03D34970 STP X30, X21, [X31 - 0x20]!
	0x03D34974 STP X20, X19, [X31 + 0x10]
	0x03D34978 ADRP X20, 0x6B3000
	0x03D3497C ADRP X21, 0x431000
	0x03D34980 LDRB W8, [X20 + 0xB37]
	0x03D34984 LDR X21, [X21 + 0xD8]
	0x03D34988 MOV X19, X0
	0x03D3498C TBNZ X8, 0x0, 0x3D349A4
	0x03D34990 ADRP X0, 0x431000
	0x03D34994 LDR X0, [X0 + 0xD8]
	0x03D34998 BL 0x1C16CF4
	0x03D3499C MOVZ W8, 0x1
	0x03D349A0 STRB W8, [X20 + 0xB37]
	0x03D349A4 LDR X1, [X21]
	0x03D349A8 MOV X0, X19
	0x03D349AC LDP X20, X19, [X31 + 0x10]
	0x03D349B0 LDP X30, X21, [X31], #0x20
	0x03D349B4 B 0x2EF0D48
	0x03D349B8 RET
	0x03D349BC STR X30, [X31 - 0x30]!
	0x03D349C0 STP X22, X21, [X31 + 0x10]
	0x03D349C4 STP X20, X19, [X31 + 0x20]
	0x03D349C8 ADRP X21, 0x6B3000
	0x03D349CC ADRP X22, 0x430000
	0x03D349D0 LDRB W8, [X21 + 0xB38]
	0x03D349D4 LDR X22, [X22 + 0x438]
	0x03D349D8 MOV W20, W1
	0x03D349DC MOV X19, X0
	0x03D349E0 TBNZ X8, 0x0, 0x3D349F8
	0x03D349E4 ADRP X0, 0x430000
	0x03D349E8 LDR X0, [X0 + 0x438]
	0x03D349EC BL 0x1C16CF4
	0x03D349F0 MOVZ W8, 0x1
	0x03D349F4 STRB W8, [X21 + 0xB38]
	0x03D349F8 MOV X0, X19
	0x03D349FC MOV X1, X31
	0x03D34A00 BL 0x33BDD8C
	0x03D34A04 LDR X0, [X22]
	0x03D34A08 BL 0x1C16F10
	0x03D34A0C MOV W1, W20
	0x03D34A10 MOV X21, X0
	0x03D34A14 BL 0x3D34148
	0x03D34A18 STR X21, [X19 + 0x10]
	0x03D34A1C LDR X0, [X22]
	0x03D34A20 BL 0x1C16F10
	0x03D34A24 MOV W1, W20
	0x03D34A28 MOV X21, X0
	0x03D34A2C BL 0x3D34148
	0x03D34A30 STR X21, [X19 + 0x18]
	0x03D34A34 LDP X20, X19, [X31 + 0x20]
	0x03D34A38 LDP X22, X21, [X31 + 0x10]
	0x03D34A3C LDR X30, [X31], #0x30
	0x03D34A40 RET
	0x03D34A44 STR X30, [X31 - 0x10]!
	0x03D34A48 LDR X8, [X0 + 0x10]
	0x03D34A4C CBZ X8, 0x3D34A78
	0x03D34A50 LDR X9, [X0 + 0x18]
	0x03D34A54 CBZ X9, 0x3D34A78
	0x03D34A58 LDR W10, [X8 + 0x30]
	0x03D34A5C LDR W9, [X9 + 0x30]
	0x03D34A60 LDR W8, [X8 + 0x10]
	0x03D34A64 ADD W9, W9, W10
	0x03D34A68 CMP W9, W8
	0x03D34A6C CSET W0, HI
	0x03D34A70 LDR X30, [X31], #0x10
	0x03D34A74 RET
	0x03D34A78 BL 0x1C16F20
	0x03D34A7C STR X30, [X31 - 0x10]!
	0x03D34A80 LDR X8, [X0 + 0x10]
	0x03D34A84 CBZ X8, 0x3D34AB4
	0x03D34A88 LDR W8, [X8 + 0x30]
	0x03D34A8C CBZ W8, 0x3D34A98
	0x03D34A90 MOV W0, W31
	0x03D34A94 B 0x3D34AAC
	0x03D34A98 LDR X8, [X0 + 0x18]
	0x03D34A9C CBZ X8, 0x3D34AB4
	0x03D34AA0 LDR W8, [X8 + 0x30]
	0x03D34AA4 CMP W8, 0x0
	0x03D34AA8 CSET W0, EQ
	0x03D34AAC LDR X30, [X31], #0x10
	0x03D34AB0 RET
	0x03D34AB4 BL 0x1C16F20
	0x03D34AB8 LDRB W0, [X0 + 0x10]
	0x03D34ABC RET
	0x03D34AC0 AND W8, W1, 0x1
	0x03D34AC4 STRB W8, [X0 + 0x10]
	0x03D34AC8 RET
	0x03D34ACC STP X30, X21, [X31 - 0x20]!
	0x03D34AD0 STP X20, X19, [X31 + 0x10]
	0x03D34AD4 ADRP X21, 0x6B3000

ISIL:
	001 Move [X31-144], D15
	002 Move [X31-136], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+80], X30
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Subtract X31, X31, 544
	019 Move X22, 0x6B4000
	020 Move W8, [X22+2879]
	021 Move X21, X2
	022 Move V13, V0
	023 Move X19, X1
	024 Move X20, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {85}
	029 Move X0, 0x3C0000
	030 Move X0, [X0+2600]
	031 Call 0x1C17CF4
	032 Move X0, 0x431000
	033 Move X0, [X0+3496]
	034 Call 0x1C17CF4
	035 Move X0, 0x431000
	036 Move X0, [X0+4040]
	037 Call 0x1C17CF4
	038 Move X0, 0x432000
	039 Move X0, [X0+48]
	040 Call 0x1C17CF4
	041 Move X0, 0x432000
	042 Move X0, [X0+56]
	043 Call 0x1C17CF4
	044 Move X0, 0x432000
	045 Move X0, [X0+64]
	046 Call 0x1C17CF4
	047 Move X0, 0x3C0000
	048 Move X0, [X0+1432]
	049 Call 0x1C17CF4
	050 Move X0, 0x431000
	051 Move X0, [X0+2488]
	052 Call 0x1C17CF4
	053 Move X0, 0x432000
	054 Move X0, [X0+72]
	055 Call 0x1C17CF4
	056 Move X0, 0x432000
	057 Move X0, [X0+80]
	058 Call 0x1C17CF4
	059 Move X0, 0x432000
	060 Move X0, [X0+88]
	061 Call 0x1C17CF4
	062 Move X0, 0x432000
	063 Move X0, [X0+96]
	064 Call 0x1C17CF4
	065 Move X0, 0x432000
	066 Move X0, [X0+16]
	067 Call 0x1C17CF4
	068 Move X0, 0x432000
	069 Move X0, [X0+24]
	070 Call 0x1C17CF4
	071 Move X0, 0x432000
	072 Move X0, [X0+104]
	073 Call 0x1C17CF4
	074 Move X0, 0x3E9000
	075 Move X0, [X0+2080]
	076 Call 0x1C17CF4
	077 Move X0, 0x432000
	078 Move X0, [X0+112]
	079 Call 0x1C17CF4
	080 Move X0, 0x432000
	081 Move X0, [X0+120]
	082 Call 0x1C17CF4
	083 Move W8, 1
	084 Move [X22+2879], W8
	085 NotImplemented "Instruction MOVI not yet implemented."
	086 Move [X31+464], X31
	087 Move [X31+472], X31
	088 Move [X31+616], W31
	089 Move [X31+432], V0
	090 Move [X31+440], V0
	091 Move [X31+400], V0
	092 Move [X31+408], V0
	093 Move [X31+392], X31
	094 Move W8, [X20+52]
	095 Subtract W8, W8, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X9, -52019200
	098 Add X9, X9, 3982
	099 NotImplemented "Instruction ADR not yet implemented."
	100 NotImplemented "Instruction LDRH not yet implemented."
	101 Add X10, X10, X11
	102 CallNoReturn X10
	103 Move X0, [X20+24]
	104 Compare X0, 0
	105 JumpIfEqual {739}
	106 Move X1, X31
	107 Call VisualElement.get_worldBound, X0
	108 Move X8, 0x431000
	109 Move X8, [X8+2488]
	110 Move V9, V0
	111 Move V10, V1
	112 Move V11, V2
	113 Move X0, [X8]
	114 Move V8, V3
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move V0, V9
	120 Move V1, V10
	121 Move V2, V11
	122 Move V3, V8
	123 Move V4, V13
	124 Call RenderChainCommand.RectPointsToPixelsAndFlipYAxis, X0, V0
	125 Move X9, 0x3E9000
	126 Move X9, [X9+2080]
	127 Move X8, X0
	128 Move [X31+464], X8
	129 Move [X31+472], X1
	130 Move X0, [X9]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move X0, X31
	136 Call Utility.GetActiveViewport
	137 Move X2, X0
	138 Move X3, X1
	139 Add X0, X31, 464
	140 Move X1, X2
	141 Move X2, X3
	142 Move X3, X31
	143 Call 0x3C1F354
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {720}
	148 Move X8, [X21]
	149 Compare X8, 0
	150 JumpIfNotEqual {720}
	151 Move X24, 0x3E9000
	152 Move X24, [X24+2080]
	153 Move X0, [X24]
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1C17DFC
	158 Add X8, X31, 480
	159 Move X0, X31
	160 Call Utility.GetUnityProjectionMatrix
	161 Move V0, [X31+480]
	162 Move V1, [X31+496]
	163 Move V2, [X31+512]
	164 Move V3, [X31+528]
	165 Move X0, X31
	166 Move [X31+400], V0
	167 Move [X31+408], V1
	168 Move [X31+432], V2
	169 Move [X31+440], V3
	170 Call Camera.get_current
	171 Move X22, X0
	172 Move X0, X31
	173 Call RenderTexture.get_active
	174 Compare X19, 0
	175 JumpIfEqual {739}
	176 Move X8, [X19+24]
	177 Compare X8, 0
	178 JumpIfEqual {739}
	179 Move W25, [X8+24]
	180 Move X23, X0
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move X0, [X24]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X31
	188 Call Utility.DisableScissor
	189 Move X0, [X20+24]
	190 Compare X0, 0
	191 JumpIfEqual {739}
	192 Add X8, X31, 320
	193 Move X1, X31
	194 Call VisualElement.get_worldTransform, X0
	195 Move V0, [X31+320]
	196 Move V1, [X31+336]
	197 Move V2, [X31+352]
	198 Move V3, [X31+368]
	199 Move [X31+480], V0
	200 Move [X31+488], V1
	201 Move [X31+512], V2
	202 Move [X31+520], V3
	203 Move X0, [X20+24]
	204 Compare X0, 0
	205 JumpIfEqual {739}
	206 Move X1, X31
	207 Call VisualElement.get_worldClip, X0
	208 Move V4, [X31+480]
	209 Move V5, [X31+496]
	210 Move V6, [X31+512]
	211 Move V7, [X31+528]
	212 Add X0, X31, 616
	213 Add X1, X31, 256
	214 Move X2, X31
	215 Move [X31+256], V4
	216 Move [X31+264], V5
	217 Move [X31+288], V6
	218 Move [X31+296], V7
	219 Call ParentClipScope..ctor, X0, X1, X2
	220 Move X8, [X20+96]
	221 Compare X8, 0
	222 JumpIfEqual {740}
	223 Move X0, [X8+64]
	224 Move X1, [X8+40]
	225 Move X9, [X8+24]
	226 NotImplemented "Instruction BLR not yet implemented."
	227 Add X0, X31, 616
	228 Move X1, X31
	229 Call ParentClipScope.Dispose, X0
	230 Move X0, X22
	231 Move X1, X31
	232 Call Camera.SetupCurrent, X0
	233 Move X0, X23
	234 Move X1, X31
	235 Call RenderTexture.set_active, X0
	236 Move X0, [X19+16]
	237 Compare X0, 0
	238 JumpIfEqual {739}
	239 Move X8, 0x432000
	240 Move X8, [X8+72]
	241 Move X1, [X8]
	242 Add X8, X31, 480
	243 Call Stack`1<Matrix4x4>.Peek, X0
	244 Move V0, [X31+480]
	245 Move V1, [X31+496]
	246 Move V2, [X31+512]
	247 Move V3, [X31+528]
	248 Add X0, X31, 192
	249 Move X1, X31
	250 Move [X31+192], V0
	251 Move [X31+200], V1
	252 Move [X31+224], V2
	253 Move [X31+232], V3
	254 Call GL.set_modelview, X0
	255 Move V0, [X31+400]
	256 Move V1, [X31+416]
	257 Move V2, [X31+432]
	258 Move V3, [X31+448]
	259 Add X0, X31, 128
	260 Move X1, X31
	261 Move [X31+128], V0
	262 Move [X31+136], V1
	263 Move [X31+160], V2
	264 Move [X31+168], V3
	265 Call GL.LoadProjectionMatrix, X0
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move X0, [X19+24]
	268 Compare X0, 0
	269 JumpIfEqual {739}
	270 Move X8, 0x432000
	271 Move X8, [X8+80]
	272 Move X1, [X8]
	273 Call Stack`1<Rect>.Peek, X0
	274 Move X8, 0x431000
	275 Move X8, [X8+2488]
	276 Move V9, V0
	277 Move V10, V1
	278 Move V11, V2
	279 Move X0, [X8]
	280 Move V8, V3
	281 Move W8, [X0+224]
	282 Compare W8, 0
	283 JumpIfNotEqual {285}
	284 Call 0x1C17DFC
	285 Move V0, V9
	286 Move V1, V10
	287 Move V2, V11
	288 Move V3, V8
	289 Move V4, V13
	290 Call RenderChainCommand.RectPointsToPixelsAndFlipYAxis, X0, V0
	291 Move X19, X0
	292 Move X0, [X24]
	293 Move X0, [X20+24]
	294 Compare X0, 0
	295 JumpIfEqual {739}
	296 Move X1, X31
	297 Call VisualElement.get_worldClip, X0
	298 Compare X19, 0
	299 JumpIfEqual {739}
	300 Move X0, [X19+24]
	301 Move [X31+620], S13
	302 Compare X0, 0
	303 JumpIfEqual {739}
	304 Move X8, 0x432000
	305 Move X8, [X8+80]
	306 Move V9, V0
	307 Move V10, V1
	308 Move V11, V2
	309 Move X1, [X8]
	310 Move V12, V3
	311 Call Stack`1<Rect>.Peek, X0
	312 Move X8, 0x431000
	313 Move X8, [X8+2488]
	314 Move V13, V0
	315 Move V14, V1
	316 Move V15, V2
	317 Move X0, [X8]
	318 Move V8, V3
	319 Move W8, [X0+224]
	320 Compare W8, 0
	321 JumpIfNotEqual {323}
	322 Call 0x1C17DFC
	323 Move V0, V9
	324 Move V1, V10
	325 Move V2, V11
	326 Move V3, V12
	327 Move V4, V13
	328 Move V5, V14
	329 Move V6, V15
	330 Move V7, V8
	331 Call RenderChainCommand.CombineScissorRects, X0, X1
	332 Move X0, [X19+24]
	333 Compare X0, 0
	334 JumpIfEqual {739}
	335 Move X8, 0x432000
	336 Move X8, [X8+24]
	337 Move V9, V0
	338 Move V10, V1
	339 Move V11, V2
	340 Move X1, [X8]
	341 Move V12, V3
	342 Call Stack`1<Rect>.Push, X0, X1
	343 Move V4, [X31+620]
	344 Move V0, V9
	345 Move V1, V10
	346 Move V2, V11
	347 Move V3, V12
	348 Compare X19, 0
	349 JumpIfEqual {739}
	350 Move X0, [X20+24]
	351 Compare X0, 0
	352 JumpIfEqual {739}
	353 Move X21, [X19+16]
	354 Add X8, X31, 480
	355 Move X1, X31
	356 Call VisualElement.get_worldTransform, X0
	357 Move V0, [X31+480]
	358 Move V1, [X31+496]
	359 Move V2, [X31+512]
	360 Move V3, [X31+528]
	361 Move [X31+320], V0
	362 Move [X31+328], V1
	363 Move [X31+352], V2
	364 Move [X31+360], V3
	365 Compare X21, 0
	366 JumpIfEqual {739}
	367 Move X8, 0x432000
	368 Move X8, [X8+16]
	369 Move V0, [X31+320]
	370 Move V1, [X31+336]
	371 Move V2, [X31+352]
	372 Move V3, [X31+368]
	373 Add X1, X31, 480
	374 Move X2, [X8]
	375 Move X0, X21
	376 Move [X31+480], V0
	377 Move [X31+488], V1
	378 Move [X31+512], V2
	379 Move [X31+520], V3
	380 Call Stack`1<Matrix4x4>.Push, X0, X1
	381 Move X0, [X20+24]
	382 Compare X0, 0
	383 JumpIfEqual {739}
	384 Add X8, X31, 480
	385 Move X1, X31
	386 Call VisualElement.get_worldTransform, X0
	387 Move V0, [X31+480]
	388 Move V1, [X31+496]
	389 Move V2, [X31+512]
	390 Move V3, [X31+528]
	391 Add X0, X31, 64
	392 Move X1, X31
	393 Move [X31+64], V0
	394 Move [X31+72], V1
	395 Move [X31+96], V2
	396 Move [X31+104], V3
	397 Call GL.set_modelview, X0
	398 Move X8, [X20+24]
	399 Compare X8, 0
	400 JumpIfEqual {739}
	401 Move X8, [X8+888]
	402 Add X0, X31, 392
	403 Move X1, X31
	404 Move [X31+392], X8
	405 Call Hierarchy.get_parent, X0
	406 Compare X0, 0
	407 JumpIfEqual {670}
	408 Move X1, X31
	409 Call VisualElement.get_worldClip, X0
	410 Move V9, V0
	411 Move V10, V1
	412 Move V11, V2
	413 Move V12, V3
	414 Compare X19, 0
	415 JumpIfEqual {739}
	416 Move X0, [X19+16]
	417 Compare X0, 0
	418 JumpIfEqual {739}
	419 Move X8, 0x432000
	420 Move X8, [X8+88]
	421 Move X1, [X8]
	422 Add X8, X31, 480
	423 Call Stack`1<Matrix4x4>.Pop, X0
	424 Move X0, [X19+16]
	425 Compare X0, 0
	426 JumpIfEqual {739}
	427 Move X8, 0x432000
	428 Move X8, [X8+72]
	429 Move X1, [X8]
	430 Add X8, X31, 480
	431 Call Stack`1<Matrix4x4>.Peek, X0
	432 Move V0, [X31+480]
	433 Move V1, [X31+496]
	434 Move V2, [X31+512]
	435 Move V3, [X31+528]
	436 Add X0, X31, 0
	437 Move X1, X31
	438 Move [X31], V0
	439 Move [X31+8], V1
	440 Move [X31+32], V2
	441 Move [X31+40], V3
	442 Call GL.set_modelview, X0
	443 Compare X19, 0
	444 JumpIfEqual {739}
	445 Move X8, [X19+32]
	446 Compare X8, 0
	447 JumpIfEqual {739}
	448 Move X9, 0x3C0000
	449 Move X9, [X9+2600]
	450 Move W21, [X8+24]
	451 Move X0, [X9]
	452 Subtract W20, W21, 1
	453 Move W8, [X0+224]
	454 Compare W8, 0
	455 JumpIfNotEqual {457}
	456 Call 0x1C17DFC
	457 NotImplemented "Instruction CMP not yet implemented."
	458 NotImplemented "Instruction CSET not yet implemented."
	459 Move X1, X31
	460 Call Debug.Assert, X0
	461 Move X0, [X19+32]
	462 Compare X0, 0
	463 JumpIfEqual {739}
	464 Move X23, 0x432000
	465 Move X23, [X23+64]
	466 Subtract W1, W21, 2
	467 Move X2, [X23]
	468 Call List`1<Object>.get_Item, X0, X1
	469 Move X21, X0
	470 Move X0, X31
	471 Call RenderTexture.get_active
	472 Move X8, 0x3C0000
	473 Move X8, [X8+1432]
	474 Move X22, X0
	475 Move X8, [X8]
	476 Move W9, [X8+224]
	477 Compare W9, 0
	478 JumpIfNotEqual {481}
	479 Move X0, X8
	480 Call 0x1C17DFC
	481 Move X0, X21
	482 Move X1, X22
	483 Move X2, X31
	484 Call Object.op_Equality, X0, X1
	485 Move X8, 0x432000
	486 Move X8, [X8+112]
	487 And W0, W0, 1
	488 Move X2, X31
	489 Move X1, [X8]
	490 Call Debug.Assert, X0, X1
	491 Move X0, [X19+32]
	492 Compare X0, 0
	493 JumpIfEqual {739}
	494 Move X2, [X23]
	495 Move W1, W20
	496 Call List`1<Object>.get_Item, X0, X1
	497 Move X1, X31
	498 Move X2, X31
	499 Move X21, X0
	500 Call Object.op_Inequality, X0, X1
	501 Move TEMP, X0
	502 And TEMP, TEMP, 1
	503 Compare TEMP, 1
	504 JumpIfNotEqual {508}
	505 Move X0, X21
	506 Move X1, X31
	507 Call RenderTexture.ReleaseTemporary, X0
	508 Move X0, [X19+32]
	509 Compare X0, 0
	510 JumpIfEqual {739}
	511 Move X8, 0x432000
	512 Move X8, [X8+48]
	513 Move W1, W20
	514 Move X2, [X8]
	515 Call List`1<Object>.RemoveAt, X0, X1
	516 Compare X19, 0
	517 JumpIfEqual {739}
	518 Move X0, [X19+24]
	519 Compare X0, 0
	520 JumpIfEqual {739}
	521 Move X8, 0x432000
	522 Move X8, [X8+96]
	523 Move X1, [X8]
	524 Call Stack`1<Rect>.Pop, X0
	525 Move X0, [X19+24]
	526 Compare X0, 0
	527 JumpIfEqual {739}
	528 Move X8, 0x432000
	529 Move X8, [X8+80]
	530 Move X1, [X8]
	531 Call Stack`1<Rect>.Peek, X0
	532 Move X19, 0x431000
	533 Move X19, [X19+3496]
	534 Move V9, V0
	535 Move V10, V1
	536 Move V11, V2
	537 Move X0, [X19]
	538 Move V12, V3
	539 Move W8, [X0+224]
	540 Compare W8, 0
	541 JumpIfNotEqual {544}
	542 Call 0x1C17DFC
	543 Move X0, [X19]
	544 Move X8, [X0+184]
	545 Move V0, [X8]
	546 NotImplemented "Instruction FCMP not yet implemented."
	547 Move X8, 0x3E9000
	548 Move X8, [X8+2080]
	549 Move X0, [X8]
	550 Move W8, [X0+224]
	551 Compare W8, 0
	552 JumpIfNotEqual {554}
	553 Call 0x1C17DFC
	554 Move X0, X31
	555 Call Utility.DisableScissor
	556 Move X8, 0x3E9000
	557 Move X8, [X8+2080]
	558 Move X0, [X8]
	559 Move W8, [X0+224]
	560 Compare W8, 0
	561 JumpIfNotEqual {563}
	562 Call 0x1C17DFC
	563 Move X0, X31
	564 Call Utility.GetActiveViewport
	565 Move X0, X1
	566 Move X1, X1
	567 ShiftRight X1, 32
	568 And X1, X1, 0x7FFFFFFF
	569 Move W2, 24
	570 Move W3, 2
	571 Move X4, X31
	572 Call RenderTexture.GetTemporary, X0, X1, X2, X3
	573 Move X1, X31
	574 Call RenderTexture.set_active, X0
	575 Move X8, -52727808
	576 Move V4, [X8+104]
	577 Move S0, W31
	578 Move S1, W31
	579 Move S2, W31
	580 Move S3, W31
	581 Move W0, 1
	582 Move W1, 1
	583 Move X2, X31
	584 Call GL.Clear, X0, X1, X2, V0
	585 Compare X19, 0
	586 JumpIfEqual {739}
	587 Move X19, [X19+32]
	588 Move X0, X31
	589 Call RenderTexture.get_active
	590 Compare X19, 0
	591 JumpIfEqual {739}
	592 Move X9, 0x431000
	593 Move X9, [X9+4040]
	594 Move W10, [X19+28]
	595 Move X8, [X19+16]
	596 Move X9, [X9]
	597 Add W10, W10, 1
	598 Move [X19+28], W10
	599 Compare X8, 0
	600 JumpIfEqual {739}
	601 NotImplemented "Instruction LDRSW not yet implemented."
	602 Move W11, [X8+24]
	603 Move X1, X0
	604 NotImplemented "Instruction CMP not yet implemented."
	605 Add W9, W10, 1
	606 Add X8, X8, X10
	607 Move [X19+24], W9
	608 Move [X8+32], X1
	609 Compare X19, 0
	610 JumpIfEqual {739}
	611 Move X0, [X19+32]
	612 Compare X0, 0
	613 JumpIfEqual {739}
	614 Move X21, 0x432000
	615 Move W8, [X0+24]
	616 Move X21, [X21+64]
	617 Subtract W1, W8, 1
	618 Move X2, [X21]
	619 Call List`1<Object>.get_Item, X0, X1
	620 Move X8, [X19+32]
	621 Compare X8, 0
	622 JumpIfEqual {739}
	623 Move W9, [X8+24]
	624 Move X2, [X21]
	625 Move X19, X0
	626 Move X0, X8
	627 Subtract W1, W9, 2
	628 Call List`1<Object>.get_Item, X0, X1
	629 Move X21, X0
	630 Move X0, X31
	631 Call RenderTexture.get_active
	632 Move X8, 0x3C0000
	633 Move X8, [X8+1432]
	634 Move X22, X0
	635 Move X8, [X8]
	636 Move W9, [X8+224]
	637 Compare W9, 0
	638 JumpIfNotEqual {641}
	639 Move X0, X8
	640 Call 0x1C17DFC
	641 Move X0, X19
	642 Move X1, X22
	643 Move X2, X31
	644 Call Object.op_Equality, X0, X1
	645 Move X8, 0x3C0000
	646 Move X8, [X8+2600]
	647 Move W22, W0
	648 Move X8, [X8]
	649 Move W9, [X8+224]
	650 Compare W9, 0
	651 JumpIfNotEqual {654}
	652 Move X0, X8
	653 Call 0x1C17DFC
	654 Move X8, 0x432000
	655 Move X8, [X8+120]
	656 And W0, W22, 1
	657 Move X2, X31
	658 Move X1, [X8]
	659 Call Debug.Assert, X0, X1
	660 Move S0, W31
	661 Move X0, X20
	662 Move X1, X19
	663 Move X2, X21
	664 Call RenderChainCommand.Blit, X0, X1, X2, V0
	665 Move X8, [X9+32]
	666 Move X0, X19
	667 Move X8, [X8+192]
	668 Move X2, [X8+112]
	669 Call List`1<Object>.AddWithResize, X0, X1
	670 Move X20, 0x431000
	671 Move X20, [X20+3496]
	672 Move X0, [X20]
	673 Move W8, [X0+224]
	674 Compare W8, 0
	675 JumpIfNotEqual {678}
	676 Call 0x1C17DFC
	677 Move X0, [X20]
	678 Move X8, [X0+184]
	679 Move S9, [X8+16]
	680 Move S10, [X8+20]
	681 Move S11, [X8+24]
	682 Move S12, [X8+28]
	683 Move X0, [X19+24]
	684 Compare X0, 0
	685 JumpIfEqual {739}
	686 Move X8, 0x432000
	687 Move X8, [X8+24]
	688 Move V0, V9
	689 Move V1, V10
	690 Move V2, V11
	691 Move X1, [X8]
	692 Move V3, V12
	693 Call Stack`1<Rect>.Push, X0, X1
	694 Move X8, 0x431000
	695 Move X8, [X8+2488]
	696 Move X0, [X8]
	697 Move W8, [X0+224]
	698 Compare W8, 0
	699 JumpIfNotEqual {701}
	700 Call 0x1C17DFC
	701 Move V0, V9
	702 Move V1, V10
	703 Move V2, V11
	704 Move V3, V12
	705 Move V4, V13
	706 Call RenderChainCommand.RectPointsToPixelsAndFlipYAxis, X0, V0
	707 Move X8, 0x3E9000
	708 Move X8, [X8+2080]
	709 Move X19, X0
	710 Move X0, [X8]
	711 Move W8, [X0+224]
	712 Move X20, X1
	713 Compare W8, 0
	714 JumpIfNotEqual {716}
	715 Call 0x1C17DFC
	716 Move X0, X19
	717 Move X1, X20
	718 Move X2, X31
	719 Call Utility.SetScissorRect, X0
	720 Add X31, X31, 544
	721 Move X20, [X31+128]
	722 Move X19, [X31+136]
	723 Move X22, [X31+112]
	724 Move X21, [X31+120]
	725 Move X24, [X31+96]
	726 Move X23, [X31+104]
	727 Move X30, [X31+80]
	728 Move X25, [X31+88]
	729 Move X29, [X31+64]
	730 Move D9, [X31+48]
	731 Move D8, [X31+56]
	732 Move D11, [X31+32]
	733 Move D10, [X31+40]
	734 Move D13, [X31+16]
	735 Move D12, [X31+24]
	736 Move D15, [X31+144]
	737 Move D14, [X31+152]
	738 Return 
	739 Call 0x1C17F20
	740 Call 0x1C17F20
	741 NotImplemented "Instruction CMP not yet implemented."
	742 Move X20, X0
	743 Move X0, X20
	744 Call 0x3EB2AD0
	745 Move X20, X0
	746 Move X0, 0x3C0000
	747 Move X0, [X0+2000]
	748 Call 0x1C17D08
	749 Move X8, [X20]
	750 Move X1, [X8]
	751 Call 0x1C18270
	752 Move TEMP, X0
	753 And TEMP, TEMP, 1
	754 Compare TEMP, 1
	755 JumpIfNotEqual {759}
	756 Move X20, [X20]
	757 Call 0x3EB2AE0
	758 Move [X21], X20
	759 Move W0, 8
	760 Call 0x3EB2AF0
	761 Move X8, [X20]
	762 Move [X0], X8
	763 Move X1, 0x181000
	764 Add X1, X1, 3672
	765 Move X2, X31
	766 Call 0x3EB2B00
	767 Move X20, X0
	768 Move X21, X1
	769 Move X20, X0
	770 Call 0x3EB2AE0
	771 Move W1, W21
	772 Move W8, 1
	773 NotImplemented "Instruction CMP not yet implemented."
	774 Move X0, X20
	775 Call 0x3EB2AD0
	776 Move X21, [X0]
	777 Call 0x3EB2AE0
	778 Add X0, X31, 616
	779 Move X1, X31
	780 Call ParentClipScope.Dispose, X0
	781 Compare X21, 0
	782 JumpIfEqual {230}
	783 Move X0, X21
	784 Call 0x1C17F18
	785 Move X21, X31
	786 Move X20, X0
	787 Add X0, X31, 616
	788 Move X1, X31
	789 Call ParentClipScope.Dispose, X0
	790 Compare X21, 0
	791 JumpIfNotEqual {794}
	792 Move X0, X20
	793 Call 0x1D2D690
	794 Move X0, X21
	795 Call 0x1C17F18
	796 Call 0x1991590

Method: System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture destination, System.Single depth)

Disassembly:
	0x03D36054 BL 0x2407134
	0x03D36058 ADRP X8, 0x42F000
	0x03D3605C MOV W24, W0
	0x03D36060 LDRH W22, [X31 + 0x37C]
	0x03D36064 LDR X0, [X31 + 0x380]
	0x03D36068 LDR X1, [X31 + 0x388]
	0x03D3606C LDR X8, [X8 + 0x128]
	0x03D36070 LDR X4, [X8]
	0x03D36074 LDR W2, [X31 + 0x7C]
	0x03D36078 MOV W3, W24
	0x03D3607C BL 0x2222A50
	0x03D36080 ADRP X8, 0x3E7000
	0x03D36084 LDR X8, [X8 + 0x240]
	0x03D36088 STR X0, [X31 + 0x280]
	0x03D3608C STR X1, [X31 + 0x288]
	0x03D36090 LDR X8, [X8]
	0x03D36094 LDR W9, [X8 + 0xE0]
	0x03D36098 CBNZ W9, 0x3D360A4
	0x03D3609C MOV X0, X8
	0x03D360A0 BL 0x1C16DFC
	0x03D360A4 ADRP X8, 0x6B1000
	0x03D360A8 LDRB W8, [X8 + 0xB5A]
	0x03D360AC CBNZ W8, 0x3D360C8
	0x03D360B0 ADRP X0, 0x3BD000
	0x03D360B4 LDR X0, [X0 + 0xA28]
	0x03D360B8 BL 0x1C16CF4
	0x03D360BC ADRP X8, 0x6B1000
	0x03D360C0 MOVZ W9, 0x1
	0x03D360C4 STRB W9, [X8 + 0xB5A]
	0x03D360C8 ADRP X8, 0x3BD000
	0x03D360CC LDR X8, [X8 + 0xA28]
	0x03D360D0 LDR X0, [X8]
	0x03D360D4 LDR W8, [X0 + 0xE0]
	0x03D360D8 CBNZ W8, 0x3D360E0
	0x03D360DC BL 0x1C16DFC
	0x03D360E0 CMP W26, W20
	0x03D360E4 ADD W8, W20, 0x1
	0x03D360E8 CSET W9, EQ
	0x03D360EC CMP W8, W26
	0x03D360F0 CSET W8, EQ
	0x03D360F4 ORR W0, W9, W8, 0x0
	0x03D360F8 MOV X1, X31
	0x03D360FC BL 0x3C06E58
	0x03D36100 LDR X8, [X31 + 0xD0]
	0x03D36104 STR W24, [X31 + 0x24]
	0x03D36108 ADD X0, X31, 0x148
	0x03D3610C MOVZ W2, 0x98
	0x03D36110 LDRB W24, [X8 + 0xEC]
	0x03D36114 MOV W1, W31
	0x03D36118 BL 0x3EB1B10
	0x03D3611C ADRP X8, 0x42F000
	0x03D36120 LDR X8, [X8 + 0x140]
	0x03D36124 LDR X2, [X8]
	0x03D36128 MOV X0, X28
	0x03D3612C MOV X1, X29
	0x03D36130 BL 0x22232C4
	0x03D36134 MOV X1, X31
	0x03D36138 BL 0x33C693C
	0x03D3613C ADRP X9, 0x42F000
	0x03D36140 LDR X8, [X31 + 0x290]
	0x03D36144 LDR X1, [X31 + 0x298]
	0x03D36148 LDR X9, [X9 + 0x140]
	0x03D3614C STR X0, [X31 + 0x148]
	0x03D36150 LDR X2, [X9]
	0x03D36154 MOV X0, X8
	0x03D36158 BL 0x22232C4
	0x03D3615C MOV X1, X31
	0x03D36160 BL 0x33C693C
	0x03D36164 ADRP X8, 0x42F000
	0x03D36168 LDR X8, [X8 + 0x148]
	0x03D3616C STR X0, [X31 + 0x150]
	0x03D36170 LDR X1, [X8]
	0x03D36174 ADD X0, X31, 0x290
	0x03D36178 BL 0x2408B10
	0x03D3617C LDR X15, [X31 + 0x50]
	0x03D36180 LDP X12, X13, [X31 + 0x28]
	0x03D36184 STR W0, [X31 + 0x158]
	0x03D36188 ADD X9, X31, 0x2C0
	0x03D3618C UBFM X8, X15, 0x10, 0x3F
	0x03D36190 AND W11, W13, 0xFF0000
	0x03D36194 UBFM W10, W12, 0x8, 0x1F
	0x03D36198 BFM W15, W12, 0x10, 0x7
	0x03D3619C BFM W11, W8, 0x0, 0x7
	0x03D361A0 LDP W8, W14, [X31 + 0x64]
	0x03D361A4 BFM W15, W10, 0x8, 0x7
	0x03D361A8 LDR W10, [X31 + 0x60]
	0x03D361AC UBFM X12, X12, 0x8, 0x1F
	0x03D361B0 AND W12, W12, 0xFF00
	0x03D361B4 BFM W11, W14, 0x8, 0x7
	0x03D361B8 AND W10, W10, 0xFF
	0x03D361BC AND W8, W8, 0xFF

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x6B2000
	009 Move X22, 0x42F000
	010 Move W8, [X23+2880]
	011 Move X22, [X22+2488]
	012 Move V8, V0
	013 Move X21, X2
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x42F000
	021 Move X0, [X0+2488]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2880], W8
	025 Move X0, X31
	026 Call GL.PushMatrix
	027 Move X0, X31
	028 Call GL.LoadOrtho
	029 Move X0, X21
	030 Move X1, X31
	031 Call RenderTexture.set_active, X0
	032 Move X0, [X22]
	033 Move X21, [X19+56]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Compare X21, 0
	039 JumpIfEqual {104}
	040 Move X8, [X22]
	041 Move X0, X21
	042 Move X2, X20
	043 Move X3, X31
	044 Move X8, [X8+184]
	045 Move W1, [X8]
	046 Call Material.SetTexture, X0, X1, X2
	047 Move X0, [X19+56]
	048 Compare X0, 0
	049 JumpIfEqual {104}
	050 Move W1, W31
	051 Move X2, X31
	052 Call Material.SetPass, X0, X1
	053 Move W0, 7
	054 Move X1, X31
	055 Call GL.Begin, X0
	056 Move S0, W31
	057 Move S1, W31
	058 Move X0, X31
	059 Call GL.TexCoord2, V0, V1
	060 Move S0, W31
	061 Move S1, W31
	062 Move V2, V8
	063 Move X0, X31
	064 Call GL.Vertex3, V0, V1, V2
	065 Move S0, W31
	066 Move S1, 1
	067 Move X0, X31
	068 Call GL.TexCoord2, V0, V1
	069 Move S0, W31
	070 Move S1, 1
	071 Move V2, V8
	072 Move X0, X31
	073 Call GL.Vertex3, V0, V1, V2
	074 Move S0, 1
	075 Move S1, 1
	076 Move X0, X31
	077 Call GL.TexCoord2, V0, V1
	078 Move S0, 1
	079 Move S1, 1
	080 Move V2, V8
	081 Move X0, X31
	082 Call GL.Vertex3, V0, V1, V2
	083 Move S0, 1
	084 Move S1, W31
	085 Move X0, X31
	086 Call GL.TexCoord2, V0, V1
	087 Move S0, 1
	088 Move S1, W31
	089 Move V2, V8
	090 Move X0, X31
	091 Call GL.Vertex3, V0, V1, V2
	092 Move X0, X31
	093 Call GL.End
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X30, [X31+16]
	099 Move X23, [X31+24]
	100 Move X0, X31
	101 Move V8, [X31+64]
	102 Call GL.PopMatrix
	103 Return 
	104 Call 0x1C17F20

Method: UnityEngine.Rect CombineScissorRects(UnityEngine.Rect r0, UnityEngine.Rect r1)

Disassembly:
	0x03D35F4C LDR W8, [X0 + 0xE0]
	0x03D35F50 CBNZ W8, 0x3D35F58
	0x03D35F54 BL 0x1C16DFC
	0x03D35F58 ADD X0, X31, 0x1E0
	0x03D35F5C MOV X1, X31
	0x03D35F60 STR X22, [X31 + 0x28]
	0x03D35F64 BL 0x3DDFE28
	0x03D35F68 ADRP X8, 0x430000
	0x03D35F6C LDR X24, [X31 + 0x390]
	0x03D35F70 LDR X22, [X31 + 0x398]
	0x03D35F74 LDR X8, [X8 + 0x148]
	0x03D35F78 MOV V8.16B, V0.16B
	0x03D35F7C STR X28, [X31 + 0x2B0]
	0x03D35F80 STR X29, [X31 + 0x2B8]
	0x03D35F84 LDR X1, [X8]
	0x03D35F88 ADD X0, X31, 0x2B0
	0x03D35F8C BL 0x2408B10
	0x03D35F90 ADRP X8, 0x430000
	0x03D35F94 LDR X8, [X8 + 0x130]
	0x03D35F98 MOV W3, W0
	0x03D35F9C LDR X4, [X8]
	0x03D35FA0 LDR W2, [X31 + 0x8C]
	0x03D35FA4 MOV X0, X24
	0x03D35FA8 MOV X1, X22
	0x03D35FAC BL 0x2222B30
	0x03D35FB0 STR X0, [X31 + 0x290]
	0x03D35FB4 STR X1, [X31 + 0x298]
	0x03D35FB8 TBZ X21, 0x0, 0x3D3603C
	0x03D35FBC LDR W8, [X31 + 0x6C]
	0x03D35FC0 TBNZ X8, 0x1F, 0x3D36000
	0x03D35FC4 LDR W8, [X31 + 0x4C]
	0x03D35FC8 LDR W9, [X31 + 0x8C]
	0x03D35FCC CMP W8, W9
	0x03D35FD0 B.NE 0x3D36030
	0x03D35FD4 ADRP X8, 0x430000
	0x03D35FD8 LDR X8, [X8 + 0x148]
	0x03D35FDC STR X28, [X31 + 0x2B0]
	0x03D35FE0 STR X29, [X31 + 0x2B8]
	0x03D35FE4 LDR X1, [X8]
	0x03D35FE8 ADD X0, X31, 0x2B0
	0x03D35FEC BL 0x2408B10
	0x03D35FF0 LDR W8, [X31 + 0x4C]
	0x03D35FF4 ADD W8, W0, W8
	0x03D35FF8 STR W8, [X31 + 0x4C]
	0x03D35FFC B 0x3D3603C
	0x03D36000 ADRP X8, 0x42F000
	0x03D36004 LDR X8, [X8 + 0x148]
	0x03D36008 STR X28, [X31 + 0x2B0]
	0x03D3600C STR X29, [X31 + 0x2B8]
	0x03D36010 LDR X1, [X8]
	0x03D36014 ADD X0, X31, 0x2B0
	0x03D36018 BL 0x2408B10
	0x03D3601C LDR W9, [X31 + 0x8C]
	0x03D36020 ADD W8, W0, W9
	0x03D36024 STR W8, [X31 + 0x4C]
	0x03D36028 STR W9, [X31 + 0x6C]
	0x03D3602C B 0x3D3603C
	0x03D36030 LDR X8, [X31 + 0xD0]
	0x03D36034 MOVZ W9, 0x1
	0x03D36038 STRB W9, [X8 + 0xFC]
	0x03D3603C ADRP X8, 0x42E000
	0x03D36040 LDR X8, [X8 + 0xFB8]
	0x03D36044 STR X27, [X31 + 0x2A0]
	0x03D36048 STR X25, [X31 + 0x2A8]
	0x03D3604C LDR X1, [X8]
	0x03D36050 ADD X0, X31, 0x2A0

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move [X31+72], S3
	013 Move [X31+80], S7
	014 Move X20, 0x6B3000
	015 Move X19, 0x3BF000
	016 Move W8, [X20+2881]
	017 Move X19, [X19+1448]
	018 Move V12, V6
	019 Move V9, V5
	020 Move V13, V4
	021 Move V14, V2
	022 Move V11, V1
	023 Move V15, V0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x3BF000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2881], W8
	033 Move X0, [X19]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move V0, V15
	039 Move V1, V13
	040 Move X0, X31
	041 Call Math.Max, V0, V1
	042 Move V8, V0
	043 Move V0, V11
	044 Move V1, V9
	045 Move X0, X31
	046 Call Math.Max, V0, V1
	047 Move V10, V0
	048 Add S0, S14, S15
	049 Add S1, S12, S13
	050 Move X0, X31
	051 Call Math.Min, V0, V1
	052 Move V1, V0
	053 Move V0, V8
	054 Move X0, X31
	055 Call Math.Max, V0, V1
	056 Subtract S12, S0, S8
	057 Move S0, [X31+72]
	058 Move S1, [X31+76]
	059 Move X0, X31
	060 Add S0, S0, S11
	061 Add S1, S1, S9
	062 Call Math.Min, V0, V1
	063 Move V1, V0
	064 Move V0, V10
	065 Move X0, X31
	066 Call Math.Max, V0, V1
	067 Subtract S3, S0, S10
	068 Move V0, V8
	069 Move V1, V10
	070 Move V2, V12
	071 Move X20, [X31+80]
	072 Move X19, [X31+88]
	073 Move X30, [X31+64]
	074 Move D9, [X31+48]
	075 Move D8, [X31+56]
	076 Move D11, [X31+32]
	077 Move D10, [X31+40]
	078 Move D13, [X31+16]
	079 Move D12, [X31+24]
	080 Move D15, [X31+96]
	081 Move D14, [X31+104]
	082 Return X0

Method: UnityEngine.RectInt RectPointsToPixelsAndFlipYAxis(UnityEngine.Rect rect, System.Single pixelsPerPoint)

Disassembly:
	0x03D35BE4 CBZ X0, 0x3D36898
	0x03D35BE8 LDR W8, [X0 + 0x18]
	0x03D35BEC CMP W8, 0x1
	0x03D35BF0 B.LT 0x3D363B4
	0x03D35BF4 LDR X8, [X31 + 0xA8]
	0x03D35BF8 STR X31, [X31 + 0x398]
	0x03D35BFC STR X31, [X31 + 0x390]
	0x03D35C00 STR X31, [X31 + 0x388]
	0x03D35C04 STR X31, [X31 + 0x380]
	0x03D35C08 STRH W31, [X31 + 0x37C]
	0x03D35C0C LDR W22, [X8 + 0x118]
	0x03D35C10 CMP W22, 0x1
	0x03D35C14 B.LT 0x3D35C5C
	0x03D35C18 ADRP X8, 0x430000
	0x03D35C1C LDR X8, [X8 + 0xF8]
	0x03D35C20 LDR X9, [X31 + 0xA8]
	0x03D35C24 LDR X0, [X8]
	0x03D35C28 LDR W24, [X9 + 0x11C]
	0x03D35C2C LDR W8, [X0 + 0xE0]
	0x03D35C30 CBNZ W8, 0x3D35C38
	0x03D35C34 BL 0x1C16DFC
	0x03D35C38 LDR X3, [X31 + 0xA0]
	0x03D35C3C ADD X0, X31, 0x458
	0x03D35C40 ADD X4, X31, 0x390
	0x03D35C44 ADD X5, X31, 0x380
	0x03D35C48 ADD X6, X31, 0x37C
	0x03D35C4C MOV W1, W22
	0x03D35C50 MOV W2, W24
	0x03D35C54 MOV X7, X25
	0x03D35C58 BL 0x3D36D38
	0x03D35C5C ORR X8, X19, X20, 0x0
	0x03D35C60 STR X19, [X31 + 0x370]
	0x03D35C64 STR X20, [X31 + 0x368]
	0x03D35C68 CBNZ X8, 0x3D35C94
	0x03D35C6C ADRP X8, 0x430000
	0x03D35C70 LDR X8, [X8 + 0xF8]
	0x03D35C74 LDR X0, [X8]
	0x03D35C78 LDR W8, [X0 + 0xE0]
	0x03D35C7C CBNZ W8, 0x3D35C84
	0x03D35C80 BL 0x1C16DFC
	0x03D35C84 LDR X0, [X31 + 0xD0]
	0x03D35C88 ADD X1, X31, 0x370
	0x03D35C8C ADD X2, X31, 0x368
	0x03D35C90 BL 0x3D36E20
	0x03D35C94 ADRP X19, 0x6A3000
	0x03D35C98 LDRB W8, [X19 + 0xAC0]
	0x03D35C9C CBNZ W8, 0x3D35CB4
	0x03D35CA0 ADRP X0, 0x3C2000
	0x03D35CA4 LDR X0, [X0 + 0x270]
	0x03D35CA8 BL 0x1C16CF4
	0x03D35CAC MOVZ W8, 0x1
	0x03D35CB0 STRB W8, [X19 + 0xAC0]
	0x03D35CB4 ADRP X8, 0x3C2000
	0x03D35CB8 LDR X8, [X8 + 0x270]
	0x03D35CBC LDR X0, [X31 + 0xA8]
	0x03D35CC0 MOV X1, X31
	0x03D35CC4 LDR X8, [X8]
	0x03D35CC8 LDR X8, [X8 + 0xB8]
	0x03D35CCC LDP V1, V0, [X8 + 0x60]
	0x03D35CD0 LDP V2, V3, [X8 + 0x40]
	0x03D35CD4 ADD X8, X31, 0x2C0
	0x03D35CD8 STP V1, V0, [X8 + 0x80]
	0x03D35CDC STP V2, V3, [X8 + 0x60]
	0x03D35CE0 BL 0x3D3CE48
	0x03D35CE4 CBZ X0, 0x3D36898
	0x03D35CE8 ADRP X8, 0x430000
	0x03D35CEC LDR X8, [X8 + 0x118]
	0x03D35CF0 LDR X1, [X8]
	0x03D35CF4 ADD X8, X31, 0xD8
	0x03D35CF8 BL 0x315C2D8
	0x03D35CFC ADD X0, X31, 0x2C0
	0x03D35D00 ADD X1, X31, 0xD8
	0x03D35D04 MOVZ W2, 0x60
	0x03D35D08 BL 0x3EB1AC0
	0x03D35D0C LDR X8, [X31 + 0xD0]
	0x03D35D10 MOVN W9, 0x0
	0x03D35D14 STR W31, [X31 + 0x8C]
	0x03D35D18 STR W31, [X31 + 0x7C]
	0x03D35D1C ADD X10, X8, 0x110
	0x03D35D20 LDR X8, [X31 + 0xC8]
	0x03D35D24 STR X31, [X31 + 0x60]
	0x03D35D28 STP W31, W9, [X31 + 0x68]
	0x03D35D2C ADD X8, X8, 0x140
	0x03D35D30 STR X8, [X31 + 0x80]
	0x03D35D34 ADD X8, X31, 0x148
	0x03D35D38 ADD X8, X8, 0x14
	0x03D35D3C STP X10, X8, [X31 + 0x38]
	0x03D35D40 MOVN W8, 0x0
	0x03D35D44 STP W8, W31, [X31 + 0x4C]
	0x03D35D48 ADRP X8, 0x430000
	0x03D35D4C LDR X8, [X8 + 0x108]
	0x03D35D50 LDR X1, [X8]
	0x03D35D54 ADD X0, X31, 0x2C0
	0x03D35D58 BL 0x2BE3780
	0x03D35D5C TBZ X0, 0x0, 0x3D36374
	0x03D35D60 LDR X9, [X31 + 0x2F0]
	0x03D35D64 LDR W8, [X31 + 0x2FC]
	0x03D35D68 LDR X28, [X31 + 0x2D0]
	0x03D35D6C LDR X29, [X31 + 0x2D8]
	0x03D35D70 LDR X27, [X31 + 0x2E0]
	0x03D35D74 STP X9, X8, [X31 + 0xB0]
	0x03D35D78 LDRB W8, [X31 + 0x315]
	0x03D35D7C LDR X25, [X31 + 0x2E8]
	0x03D35D80 LDR V9, [X31 + 0x2F8]
	0x03D35D84 LDR X22, [X31 + 0x300]
	0x03D35D88 STR W8, [X31 + 0xC4]
	0x03D35D8C ADRP X8, 0x430000
	0x03D35D90 LDR X24, [X31 + 0x308]
	0x03D35D94 LDRB W19, [X31 + 0x310]
	0x03D35D98 LDRB W21, [X31 + 0x314]
	0x03D35D9C LDRB W23, [X31 + 0x316]
	0x03D35DA0 LDR W20, [X31 + 0x318]
	0x03D35DA4 LDR W26, [X31 + 0x31C]
	0x03D35DA8 LDR X8, [X8 + 0x148]
	0x03D35DAC STR X28, [X31 + 0x2B0]
	0x03D35DB0 STR X29, [X31 + 0x2B8]
	0x03D35DB4 LDR X1, [X8]
	0x03D35DB8 ADD X0, X31, 0x2B0
	0x03D35DBC BL 0x2408B10
	0x03D35DC0 CMP W0, 0x1
	0x03D35DC4 B.LT 0x3D35DEC
	0x03D35DC8 ADRP X8, 0x42F000
	0x03D35DCC LDR X8, [X8 + 0xFB8]
	0x03D35DD0 STR X27, [X31 + 0x2A0]
	0x03D35DD4 STR X25, [X31 + 0x2A8]
	0x03D35DD8 LDR X1, [X8]
	0x03D35DDC ADD X0, X31, 0x2A0
	0x03D35DE0 BL 0x2407134
	0x03D35DE4 CMP W0, 0x1
	0x03D35DE8 B.GE 0x3D35E48
	0x03D35DEC CBZ X22, 0x3D35E20
	0x03D35DF0 ADRP X8, 0x430000
	0x03D35DF4 LDR X8, [X8 + 0xF8]
	0x03D35DF8 LDR X0, [X8]
	0x03D35DFC LDR W8, [X0 + 0xE0]
	0x03D35E00 CBNZ W8, 0x3D35E08
	0x03D35E04 BL 0x1C16DFC
	0x03D35E08 LDR X0, [X31 + 0xC8]
	0x03D35E0C ADD X2, X31, 0x370
	0x03D35E10 ADD X3, X31, 0x368
	0x03D35E14 MOV X1, X22
	0x03D35E18 BL 0x3D370A8
	0x03D35E1C B 0x3D35D48
	0x03D35E20 ADRP X8, 0x3BE000
	0x03D35E24 LDR X8, [X8 + 0xA28]
	0x03D35E28 LDR X0, [X8]
	0x03D35E2C LDR W8, [X0 + 0xE0]
	0x03D35E30 CBNZ W8, 0x3D35E38
	0x03D35E34 BL 0x1C16DFC
	0x03D35E38 MOV W0, W31
	0x03D35E3C MOV X1, X31
	0x03D35E40 BL 0x3C06E58
	0x03D35E44 B 0x3D35D48
	0x03D35E48 LDR W8, [X31 + 0x50]
	0x03D35E4C TBNZ X8, 0x0, 0x3D35E8C
	0x03D35E50 ADRP X8, 0x430000
	0x03D35E54 LDR X8, [X8 + 0xF8]
	0x03D35E58 LDR X0, [X8]
	0x03D35E5C LDR W8, [X0 + 0xE0]
	0x03D35E60 CBNZ W8, 0x3D35E68
	0x03D35E64 BL 0x1C16DFC
	0x03D35E68 LDR X0, [X31 + 0xD0]
	0x03D35E6C ADD X1, X31, 0x320
	0x03D35E70 BL 0x3D35268
	0x03D35E74 ADD X8, X31, 0x2C0
	0x03D35E78 LDP V1, V0, [X8 + 0x80]
	0x03D35E7C LDP V3, V2, [X8 + 0x60]
	0x03D35E80 LDR X8, [X31 + 0x38]
	0x03D35E84 STP V1, V0, [X8 + 0x20]
	0x03D35E88 STP V3, V2, [X8]
	0x03D35E8C ADRP X8, 0x42F000
	0x03D35E90 LDR X8, [X8 + 0x760]
	0x03D35E94 LDR X9, [X31 + 0xD0]
	0x03D35E98 LDR X0, [X8]
	0x03D35E9C LDR X22, [X9 + 0x158]
	0x03D35EA0 LDR W8, [X0 + 0xE0]
	0x03D35EA4 CBNZ W8, 0x3D35EAC
	0x03D35EA8 BL 0x1C16DFC
	0x03D35EAC LDR X0, [X31 + 0x80]
	0x03D35EB0 MOV X1, X22
	0x03D35EB4 BL 0x3D2CAD4
	0x03D35EB8 STR X0, [X31 + 0x50]
	0x03D35EBC LDR X22, [X31 + 0xD0]
	0x03D35EC0 LDR X1, [X22 + 0x168]
	0x03D35EC4 LDR X0, [X31 + 0x80]
	0x03D35EC8 BL 0x3D2CCF4
	0x03D35ECC STR X0, [X31 + 0x30]
	0x03D35ED0 LDR X1, [X22 + 0x170]
	0x03D35ED4 LDR X0, [X31 + 0x80]
	0x03D35ED8 BL 0x3D2CEEC
	0x03D35EDC ADRP X8, 0x42F000
	0x03D35EE0 LDR X8, [X8 + 0x760]
	0x03D35EE4 LDR W12, [X31 + 0xC4]
	0x03D35EE8 UBFM X9, X0, 0x8, 0x3F
	0x03D35EEC UBFM X10, X0, 0x10, 0x3F
	0x03D35EF0 LDR X8, [X8]
	0x03D35EF4 ANDS W31, W12, 0x1
	0x03D35EF8 LDR W12, [X31 + 0x60]
	0x03D35EFC LDR W11, [X8 + 0xE0]
	0x03D35F00 CSEL W12, W12, W9, EQ
	0x03D35F04 LDR W9, [X31 + 0x64]
	0x03D35F08 CSEL W9, W9, W0, EQ
	0x03D35F0C STP W12, W9, [X31 + 0x60]
	0x03D35F10 LDR W9, [X31 + 0x68]
	0x03D35F14 CSEL W9, W9, W10, EQ
	0x03D35F18 STR W9, [X31 + 0x68]
	0x03D35F1C CBNZ W11, 0x3D35F28
	0x03D35F20 MOV X0, X8
	0x03D35F24 BL 0x1C16DFC
	0x03D35F28 LDR X0, [X31 + 0x80]
	0x03D35F2C MOV X1, X24
	0x03D35F30 BL 0x3D2CBE4
	0x03D35F34 ADRP X8, 0x3E6000
	0x03D35F38 LDR X8, [X8 + 0x620]
	0x03D35F3C MOV X22, X0
	0x03D35F40 LDR X0, [X8]
	0x03D35F44 LDR X8, [X31 + 0xB8]
	0x03D35F48 STR W8, [X31 + 0x1E0]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0x6B3000
	013 Move X20, 0x3E8000
	014 Move W8, [X19+2882]
	015 Move X20, [X20+2080]
	016 Move V8, V4
	017 Move V9, V3
	018 Move V10, V2
	019 Move V11, V1
	020 Move V12, V0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x3E8000
	026 Move X0, [X0+2080]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+2882], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call Utility.GetActiveViewport
	037 Move X20, 0x6A5000
	038 Move W8, [X20+1495]
	039 Move X19, X1
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x3BF000
	043 Move X0, [X0+1448]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+1495], W8
	047 Move X21, 0x3BF000
	048 Move X21, [X21+1448]
	049 Move X19, X19
	050 ShiftRight X19, 32
	051 And X19, X19, 0x7FFFFFFF
	052 Multiply S13, S12, S8
	053 Move X0, [X21]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 NotImplemented "Instruction FCVT not yet implemented."
	059 Add X0, X31, 8
	060 Move V0, V12
	061 Call 0x3EB2C00
	062 NotImplemented "Instruction FCMP not yet implemented."
	063 Move D1, -0.5
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 Move V0, [X31+8]
	066 Move D1, -1
	067 Move D1, 0.5
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Move V0, [X31+8]
	070 Move D1, 1
	071 NotImplemented "Instruction FCVTZS not yet implemented."
	072 Add D1, D0, D1
	073 And X31, X8, 1
	074 NotImplemented "Instruction FCSEL not yet implemented."
	075 Add D0, D12, D1
	076 NotImplemented "Instruction FRINTP not yet implemented."
	077 Add D0, D12, D1
	078 NotImplemented "Instruction FRINTM not yet implemented."
	079 Move W8, [X20+1495]
	080 Add S0, S9, S11
	081 NotImplemented "Instruction SCVTF not yet implemented."
	082 Multiply S11, S0, S8
	083 Compare W8, 0
	084 JumpIfNotEqual {90}
	085 Move X0, 0x3BF000
	086 Move X0, [X0+1448]
	087 Call 0x1C17CF4
	088 Move W8, 1
	089 Move [X20+1495], W8
	090 Move X0, [X21]
	091 Subtract S13, S13, S11
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 NotImplemented "Instruction FCVT not yet implemented."
	097 Add X0, X31, 8
	098 Move V0, V11
	099 Call 0x3EB2C00
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 Move D1, -0.5
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 Move V0, [X31+8]
	104 Move D1, -1
	105 Move D1, 0.5
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move V0, [X31+8]
	108 Move D1, 1
	109 NotImplemented "Instruction FCVTZS not yet implemented."
	110 Add D1, D0, D1
	111 And X31, X8, 1
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Add D0, D11, D1
	114 NotImplemented "Instruction FRINTP not yet implemented."
	115 Add D0, D11, D1
	116 NotImplemented "Instruction FRINTM not yet implemented."
	117 Move W8, [X20+1495]
	118 Compare W8, 0
	119 JumpIfNotEqual {125}
	120 Move X0, 0x3BF000
	121 Move X0, [X0+1448]
	122 Call 0x1C17CF4
	123 Move W8, 1
	124 Move [X20+1495], W8
	125 Move X0, [X21]
	126 Multiply S13, S10, S8
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {131}
	130 Call 0x1C17DFC
	131 NotImplemented "Instruction FCVT not yet implemented."
	132 Add X0, X31, 8
	133 Move V0, V10
	134 Call 0x3EB2C00
	135 NotImplemented "Instruction FCMP not yet implemented."
	136 Move D1, -0.5
	137 NotImplemented "Instruction FCMP not yet implemented."
	138 Move V0, [X31+8]
	139 Move D1, -1
	140 Move D1, 0.5
	141 NotImplemented "Instruction FCMP not yet implemented."
	142 Move V0, [X31+8]
	143 Move D1, 1
	144 NotImplemented "Instruction FCVTZS not yet implemented."
	145 Add D1, D0, D1
	146 And X31, X8, 1
	147 NotImplemented "Instruction FCSEL not yet implemented."
	148 Add D0, D10, D1
	149 NotImplemented "Instruction FRINTP not yet implemented."
	150 Add D0, D10, D1
	151 NotImplemented "Instruction FRINTM not yet implemented."
	152 Move W8, [X20+1495]
	153 Compare W8, 0
	154 JumpIfNotEqual {160}
	155 Move X0, 0x3BF000
	156 Move X0, [X0+1448]
	157 Call 0x1C17CF4
	158 Move W8, 1
	159 Move [X20+1495], W8
	160 Move X0, [X21]
	161 Multiply S9, S9, S8
	162 Move W8, [X0+224]
	163 Compare W8, 0
	164 JumpIfNotEqual {166}
	165 Call 0x1C17DFC
	166 NotImplemented "Instruction FCVT not yet implemented."
	167 Add X0, X31, 8
	168 Move V0, V8
	169 Call 0x3EB2C00
	170 NotImplemented "Instruction FCMP not yet implemented."
	171 Move D1, -0.5
	172 NotImplemented "Instruction FCMP not yet implemented."
	173 Move V0, [X31+8]
	174 Move D1, -1
	175 Move D1, 0.5
	176 NotImplemented "Instruction FCMP not yet implemented."
	177 Move V0, [X31+8]
	178 Move D1, 1
	179 NotImplemented "Instruction FCVTZS not yet implemented."
	180 Add D1, D0, D1
	181 And X31, X8, 1
	182 NotImplemented "Instruction FCSEL not yet implemented."
	183 Add D0, D8, D1
	184 NotImplemented "Instruction FRINTP not yet implemented."
	185 Add D0, D8, D1
	186 NotImplemented "Instruction FRINTM not yet implemented."
	187 Move X9, 0x7FF00000
	188 Move D1, X9
	189 NotImplemented "Instruction FCVTZS not yet implemented."
	190 Move W10, 0x80000000
	191 NotImplemented "Instruction FCVTZS not yet implemented."
	192 NotImplemented "Instruction FCMP not yet implemented."
	193 NotImplemented "Instruction FCVTZS not yet implemented."
	194 Move X9, 0x80000000
	195 Move X13, X13
	196 ShiftRight X13, 32
	197 And X13, X13, 0x7FFFFFFF
	198 NotImplemented "Instruction CSEL not yet implemented."
	199 NotImplemented "Instruction FCMP not yet implemented."
	200 Move X11, X11
	201 ShiftRight X11, 32
	202 And X11, X11, 0x7FFFFFFF
	203 NotImplemented "Instruction CSEL not yet implemented."
	204 NotImplemented "Instruction FCMP not yet implemented."
	205 NotImplemented "Instruction FCVTZS not yet implemented."
	206 Or X1, X13, X8
	207 NotImplemented "Instruction CSEL not yet implemented."
	208 NotImplemented "Instruction FCMP not yet implemented."
	209 Move X20, [X31+80]
	210 Move X19, [X31+88]
	211 Move X30, [X31+64]
	212 Move X21, [X31+72]
	213 Move D9, [X31+48]
	214 Move D8, [X31+56]
	215 Move D11, [X31+32]
	216 Move D10, [X31+40]
	217 Move D13, [X31+16]
	218 Move D12, [X31+24]
	219 NotImplemented "Instruction CSEL not yet implemented."
	220 Or X0, X8, X9
	221 Add X31, X31, 96
	222 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03D288F8 LDR W9, [X8 + 0x18]
	0x03D288FC CBZ W9, 0x3D28944
	0x03D28900 AND W9, W6, 0x1
	0x03D28904 MOV X0, X19
	0x03D28908 STP X2, X3, [X8 + 0x20]
	0x03D2890C STP X4, X5, [X8 + 0x30]
	0x03D28910 STP S0, S1, [X8 + 0x44]
	0x03D28914 STP S2, S3, [X8 + 0x4C]
	0x03D28918 STR W9, [X8 + 0x40]
	0x03D2891C STR W31, [X8 + 0x54]
	0x03D28920 BL 0x3D28948
	0x03D28924 LDR X1, [X19 + 0x10]
	0x03D28928 MOV X0, X19
	0x03D2892C MOV W2, W31
	0x03D28930 BL 0x3D28B40
	0x03D28934 MOV X0, X19
	0x03D28938 LDP X30, X19, [X31], #0x10
	0x03D2893C B 0x3D290E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x6C0000
	006 Move X21, 0x43D000
	007 Move W8, [X20+2883]
	008 Move X21, [X21+2496]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x43D000
	015 Move X0, [X0+2496]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2883], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x2EF1D48, X0
	026 Return 

Method: System.Void .cctor()

Disassembly:
	0x03D361C0 ORR W11, W11, W12, 0x0
	0x03D361C4 ADRP X12, 0x42F000
	0x03D361C8 LDP V0, V1, [X9 + 0x60]
	0x03D361CC LDP V2, V3, [X9 + 0x80]
	0x03D361D0 BFM W8, W10, 0x18, 0x7
	0x03D361D4 LDR W10, [X31 + 0xC4]
	0x03D361D8 LDR X12, [X12 + 0x138]
	0x03D361DC AND W9, W21, 0x1
	0x03D361E0 AND W13, W13, 0xFFFF
	0x03D361E4 AND W10, W10, 0x1
	0x03D361E8 LDR X2, [X12]
	0x03D361EC LDR X12, [X31 + 0x40]
	0x03D361F0 STP V2, V3, [X12 + 0x20]
	0x03D361F4 STP V0, V1, [X12]
	0x03D361F8 STR W9, [X31 + 0x19C]
	0x03D361FC STR W15, [X31 + 0x1A0]
	0x03D36200 STR W11, [X31 + 0x1A4]
	0x03D36204 STR W19, [X31 + 0x1A8]
	0x03D36208 STR W13, [X31 + 0x1AC]
	0x03D3620C STR W8, [X31 + 0x1B0]
	0x03D36210 STR W10, [X31 + 0x1B4]
	0x03D36214 STR S8, [X31 + 0x1B8]
	0x03D36218 MOV X0, X27
	0x03D3621C MOV X1, X25
	0x03D36220 BL 0x22232B4
	0x03D36224 MOV X1, X31
	0x03D36228 BL 0x33C693C
	0x03D3622C ADRP X9, 0x42F000
	0x03D36230 LDR X8, [X31 + 0x280]
	0x03D36234 LDR X1, [X31 + 0x288]
	0x03D36238 LDR X9, [X9 + 0x138]
	0x03D3623C STR X0, [X31 + 0x1C0]
	0x03D36240 LDR X2, [X9]
	0x03D36244 MOV X0, X8
	0x03D36248 BL 0x22232B4
	0x03D3624C MOV X1, X31
	0x03D36250 BL 0x33C693C
	0x03D36254 ADRP X8, 0x42E000
	0x03D36258 LDR X8, [X8 + 0xFB8]
	0x03D3625C STR X0, [X31 + 0x1C8]
	0x03D36260 LDR X1, [X8]
	0x03D36264 ADD X0, X31, 0x280

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x6B2000
	007 Move X22, 0x418000
	008 Move X19, 0x42F000
	009 Move X20, 0x430000
	010 Move W8, [X21+2884]
	011 Move X22, [X22+2816]
	012 Move X19, [X19+2488]
	013 Move X20, [X20+240]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x42F000
	019 Move X0, [X0+2488]
	020 Call 0x1C17CF4
	021 Move X0, 0x430000
	022 Move X0, [X0+240]
	023 Call 0x1C17CF4
	024 Move X0, 0x418000
	025 Move X0, [X0+2816]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2884], W8
	029 Move X0, [X22]
	030 Move X1, X31
	031 Call Shader.PropertyToID, X0
	032 Move X8, [X19]
	033 Move W1, 1
	034 Move W2, W31
	035 Move W3, W31
	036 Move X8, [X8+184]
	037 Move X4, X31
	038 Move [X8], W0
	039 Move X0, [X20]
	040 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	041 Move X8, [X19]
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X8, [X8+184]
	047 Move [X8+8], X0
	048 Move X30, [X31+48]
	049 Return 

