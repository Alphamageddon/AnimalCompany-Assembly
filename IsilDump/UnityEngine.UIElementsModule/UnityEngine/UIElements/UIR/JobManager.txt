Type: UnityEngine.UIElements.UIR.JobManager

Method: System.Void Add(ref UnityEngine.UIElements.UIR.NudgeJobData job)

Disassembly:
	0x03D22AAC MOVZ W2, 0x50
	0x03D22AB0 BL 0x3EB1AC0
	0x03D22AB4 LDR W8, [X31 + 0x2C]
	0x03D22AB8 ADD X0, X31, 0x220
	0x03D22ABC MOV W1, W24
	0x03D22AC0 MOV V0.16B, V9.16B
	0x03D22AC4 AND W3, W8, 0x1
	0x03D22AC8 ADD X8, X31, 0x270
	0x03D22ACC MOV V1.16B, V8.16B
	0x03D22AD0 MOV W2, W19
	0x03D22AD4 BL 0x3D2276C
	0x03D22AD8 CBZ X22, 0x3D22E68
	0x03D22ADC LDP V0, V1, [X31 + 0x270]
	0x03D22AE0 LDP V2, V3, [X31 + 0x290]
	0x03D22AE4 LDRB W8, [X27 + 0xAB4]
	0x03D22AE8 STP V0, V1, [X31 + 0x1E0]
	0x03D22AEC STP V2, V3, [X31 + 0x200]
	0x03D22AF0 CBNZ W8, 0x3D22B08
	0x03D22AF4 ADRP X0, 0x442000
	0x03D22AF8 LDR X0, [X0 + 0x610]
	0x03D22AFC BL 0x1C16CF4
	0x03D22B00 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C6000
	006 Move W8, [X21+2684]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x443000
	014 Move X0, [X0+1216]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2684], W8
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x443000
	022 Move X8, [X8+1216]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NativePagedList`1<NudgeJobData>.Add, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void Add(ref UnityEngine.UIElements.UIR.ConvertMeshJobData job)

Disassembly:
	0x03D22B04 STRB W8, [X27 + 0xAB4]
	0x03D22B08 LDR W1, [X22 + 0x44]
	0x03D22B0C ADRP X25, 0x442000
	0x03D22B10 ADD X2, X31, 0x300
	0x03D22B14 MOV X0, X20
	0x03D22B18 ADD W8, W1, 0x1
	0x03D22B1C STR W8, [X22 + 0x44]
	0x03D22B20 LDR X25, [X25 + 0x610]
	0x03D22B24 LDP V0, V1, [X31 + 0x1E0]
	0x03D22B28 LDP V2, V3, [X31 + 0x200]
	0x03D22B2C LDR X3, [X25]
	0x03D22B30 STP V0, V1, [X31 + 0x300]
	0x03D22B34 STP V2, V3, [X31 + 0x320]
	0x03D22B38 BL 0x24088B0
	0x03D22B3C ADD X0, X31, 0x190
	0x03D22B40 MOVZ W2, 0x50
	0x03D22B44 MOV X1, X21
	0x03D22B48 BL 0x3EB1AC0
	0x03D22B4C LDR W8, [X31 + 0x2C]
	0x03D22B50 ADD W28, W24, 0x1
	0x03D22B54 ADD X0, X31, 0x190
	0x03D22B58 MOV W1, W28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C6000
	006 Move W8, [X21+2685]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x443000
	014 Move X0, [X0+1224]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2685], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x443000
	022 Move X8, [X8+1224]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x24036C0, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void Add(ref UnityEngine.UIElements.UIR.CopyClosingMeshJobData job)

Disassembly:
	0x03D22B5C AND W29, W8, 0x1
	0x03D22B60 ADD X8, X31, 0x150
	0x03D22B64 MOV V0.16B, V9.16B
	0x03D22B68 MOV V1.16B, V8.16B
	0x03D22B6C MOV W2, W19
	0x03D22B70 MOV W3, W29
	0x03D22B74 BL 0x3D2276C
	0x03D22B78 LDRB W8, [X27 + 0xAB4]
	0x03D22B7C MOV W26, W19
	0x03D22B80 CBNZ W8, 0x3D22B94
	0x03D22B84 MOV X0, X25
	0x03D22B88 BL 0x1C16CF4
	0x03D22B8C MOVZ W8, 0x1
	0x03D22B90 STRB W8, [X27 + 0xAB4]
	0x03D22B94 LDR W1, [X22 + 0x44]
	0x03D22B98 ADD X2, X31, 0x300
	0x03D22B9C MOV X0, X20
	0x03D22BA0 STR W23, [X31 + 0x28]
	0x03D22BA4 ADD W8, W1, 0x1
	0x03D22BA8 STR W8, [X22 + 0x44]
	0x03D22BAC LDR X3, [X25]
	0x03D22BB0 LDP V0, V1, [X31 + 0x150]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C6000
	006 Move W8, [X21+2686]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x443000
	014 Move X0, [X0+1232]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2686], W8
	018 Move X0, [X20+32]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x443000
	022 Move X8, [X8+1232]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NativePagedList`1<CopyClosingMeshJobData>.Add, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void CompleteNudgeJobs()

Disassembly:
	0x03D22BB4 LDP V2, V3, [X31 + 0x170]
	0x03D22BB8 STP V0, V1, [X31 + 0x300]
	0x03D22BBC STP V2, V3, [X31 + 0x320]
	0x03D22BC0 BL 0x24088B0
	0x03D22BC4 ADD X0, X31, 0x100
	0x03D22BC8 MOVZ W2, 0x50
	0x03D22BCC MOV X1, X21
	0x03D22BD0 BL 0x3EB1AC0
	0x03D22BD4 ADD W19, W28, 0x1
	0x03D22BD8 ADD X8, X31, 0xC0
	0x03D22BDC ADD X0, X31, 0x100
	0x03D22BE0 MOV W1, W19
	0x03D22BE4 MOV V0.16B, V9.16B
	0x03D22BE8 MOV V1.16B, V8.16B
	0x03D22BEC MOV W2, W26
	0x03D22BF0 MOV W3, W29
	0x03D22BF4 BL 0x3D2276C
	0x03D22BF8 LDRB W8, [X27 + 0xAB4]
	0x03D22BFC CBNZ W8, 0x3D22C10
	0x03D22C00 MOV X0, X25
	0x03D22C04 BL 0x1C16CF4
	0x03D22C08 MOVZ W8, 0x1
	0x03D22C0C STRB W8, [X27 + 0xAB4]
	0x03D22C10 LDR W1, [X22 + 0x44]
	0x03D22C14 ADD X2, X31, 0x300
	0x03D22C18 MOV X0, X20
	0x03D22C1C ADD W8, W1, 0x1
	0x03D22C20 STR W8, [X22 + 0x44]
	0x03D22C24 LDR X3, [X25]
	0x03D22C28 LDP V0, V1, [X31 + 0xC0]
	0x03D22C2C LDP V2, V3, [X31 + 0xE0]
	0x03D22C30 STP V0, V1, [X31 + 0x300]
	0x03D22C34 STP V2, V3, [X31 + 0x320]
	0x03D22C38 BL 0x24088B0
	0x03D22C3C ADD X0, X31, 0x70
	0x03D22C40 MOVZ W2, 0x50
	0x03D22C44 MOV X1, X21
	0x03D22C48 MOV X23, X27
	0x03D22C4C BL 0x3EB1AC0
	0x03D22C50 LDR W8, [X31 + 0x2C]
	0x03D22C54 ADD W1, W19, 0x1
	0x03D22C58 ADD X0, X31, 0x70
	0x03D22C5C MOV V0.16B, V9.16B
	0x03D22C60 AND W3, W8, 0x1
	0x03D22C64 ADD X8, X31, 0x30
	0x03D22C68 MOV V1.16B, V8.16B
	0x03D22C6C MOV W2, W26
	0x03D22C70 STR W1, [X31 + 0x24]
	0x03D22C74 BL 0x3D2276C
	0x03D22C78 ADRP X19, 0x442000
	0x03D22C7C LDRB W8, [X27 + 0xAB4]
	0x03D22C80 LDR X19, [X19 + 0x610]
	0x03D22C84 MOV X26, X27
	0x03D22C88 CBNZ W8, 0x3D22C9C
	0x03D22C8C MOV X0, X19
	0x03D22C90 BL 0x1C16CF4
	0x03D22C94 MOVZ W8, 0x1
	0x03D22C98 STRB W8, [X26 + 0xAB4]
	0x03D22C9C LDR W1, [X22 + 0x44]
	0x03D22CA0 ADD X2, X31, 0x300
	0x03D22CA4 MOV X0, X20
	0x03D22CA8 ADD W8, W1, 0x1
	0x03D22CAC STR W8, [X22 + 0x44]
	0x03D22CB0 LDR X3, [X19]
	0x03D22CB4 LDP V0, V1, [X31 + 0x30]
	0x03D22CB8 LDP V2, V3, [X31 + 0x50]
	0x03D22CBC MOV X19, X20
	0x03D22CC0 STP V0, V1, [X31 + 0x300]
	0x03D22CC4 STP V2, V3, [X31 + 0x320]
	0x03D22CC8 BL 0x24088B0
	0x03D22CCC ADRP X21, 0x6C5000
	0x03D22CD0 LDRB W8, [X21 + 0xAB5]
	0x03D22CD4 LDR W23, [X31 + 0x28]
	0x03D22CD8 LDR X25, [X31 + 0x18]
	0x03D22CDC CBNZ W8, 0x3D22CF4
	0x03D22CE0 ADRP X0, 0x442000
	0x03D22CE4 LDR X0, [X0 + 0x618]
	0x03D22CE8 BL 0x1C16CF4
	0x03D22CEC MOVZ W8, 0x1
	0x03D22CF0 STRB W8, [X21 + 0xAB5]
	0x03D22CF4 LDR W1, [X22 + 0x40]
	0x03D22CF8 ADRP X29, 0x442000
	0x03D22CFC MOV X0, X25
	0x03D22D00 MOV W2, W24
	0x03D22D04 ADD W8, W1, 0x1
	0x03D22D08 STR W8, [X22 + 0x40]
	0x03D22D0C LDR X29, [X29 + 0x618]
	0x03D22D10 LDR X3, [X29]
	0x03D22D14 BL 0x2406EF0
	0x03D22D18 LDRB W8, [X21 + 0xAB5]
	0x03D22D1C CBNZ W8, 0x3D22D30
	0x03D22D20 MOV X0, X29
	0x03D22D24 BL 0x1C16CF4
	0x03D22D28 MOVZ W8, 0x1
	0x03D22D2C STRB W8, [X21 + 0xAB5]
	0x03D22D30 LDR W1, [X22 + 0x40]
	0x03D22D34 MOV X0, X25
	0x03D22D38 MOV W2, W28
	0x03D22D3C ADD W8, W1, 0x1
	0x03D22D40 STR W8, [X22 + 0x40]
	0x03D22D44 LDR X3, [X29]
	0x03D22D48 BL 0x2406EF0
	0x03D22D4C LDRB W8, [X21 + 0xAB5]
	0x03D22D50 MOV X20, X19
	0x03D22D54 MOV X27, X26
	0x03D22D58 MOV X26, X21
	0x03D22D5C CBNZ W8, 0x3D22D70
	0x03D22D60 MOV X0, X29
	0x03D22D64 BL 0x1C16CF4
	0x03D22D68 MOVZ W8, 0x1
	0x03D22D6C STRB W8, [X26 + 0xAB5]
	0x03D22D70 LDR W1, [X22 + 0x40]
	0x03D22D74 ADD W19, W24, 0x2
	0x03D22D78 MOV X0, X25
	0x03D22D7C MOV W2, W19
	0x03D22D80 ADD W8, W1, 0x1
	0x03D22D84 STR W8, [X22 + 0x40]
	0x03D22D88 LDR X3, [X29]
	0x03D22D8C BL 0x2406EF0
	0x03D22D90 LDRB W8, [X26 + 0xAB5]
	0x03D22D94 CBNZ W8, 0x3D22DA8
	0x03D22D98 MOV X0, X29
	0x03D22D9C BL 0x1C16CF4
	0x03D22DA0 MOVZ W8, 0x1
	0x03D22DA4 STRB W8, [X26 + 0xAB5]
	0x03D22DA8 LDR W1, [X22 + 0x40]
	0x03D22DAC MOV X0, X25
	0x03D22DB0 MOV W2, W19
	0x03D22DB4 ADD W8, W1, 0x1
	0x03D22DB8 STR W8, [X22 + 0x40]
	0x03D22DBC LDR X3, [X29]
	0x03D22DC0 BL 0x2406EF0
	0x03D22DC4 LDRB W8, [X26 + 0xAB5]
	0x03D22DC8 CBNZ W8, 0x3D22DDC
	0x03D22DCC MOV X0, X29
	0x03D22DD0 BL 0x1C16CF4
	0x03D22DD4 MOVZ W8, 0x1
	0x03D22DD8 STRB W8, [X26 + 0xAB5]
	0x03D22DDC LDR W1, [X22 + 0x40]
	0x03D22DE0 ADD W2, W24, 0x3
	0x03D22DE4 MOV X0, X25
	0x03D22DE8 ADD W8, W1, 0x1
	0x03D22DEC STR W8, [X22 + 0x40]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x6C6000
	012 Move W8, [X20+2687]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {44}
	018 Move X0, 0x443000
	019 Move X0, [X0+1240]
	020 Call 0x1C17CF4
	021 Move X0, 0x443000
	022 Move X0, [X0+1248]
	023 Call 0x1C17CF4
	024 Move X0, 0x443000
	025 Move X0, [X0+1256]
	026 Call 0x1C17CF4
	027 Move X0, 0x443000
	028 Move X0, [X0+1264]
	029 Call 0x1C17CF4
	030 Move X0, 0x443000
	031 Move X0, [X0+1272]
	032 Call 0x1C17CF4
	033 Move X0, 0x443000
	034 Move X0, [X0+1280]
	035 Call 0x1C17CF4
	036 Move X0, 0x443000
	037 Move X0, [X0+1288]
	038 Call 0x1C17CF4
	039 Move X0, 0x443000
	040 Move X0, [X0+1296]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+2687], W8
	044 NotImplemented "Instruction MOVI not yet implemented."
	045 Move [X31+48], X31
	046 Move [X31+56], X31
	047 Move [X31+64], V0
	048 Move [X31+72], V0
	049 Move [X31+32], X31
	050 Move [X31+40], X31
	051 Move X0, [X19+16]
	052 Compare X0, 0
	053 JumpIfEqual {139}
	054 Move X8, 0x443000
	055 Move X8, [X8+1272]
	056 Move X1, [X8]
	057 Call NativePagedList`1<NudgeJobData>.GetPages, X0
	058 Compare X0, 0
	059 JumpIfEqual {139}
	060 Move X8, 0x443000
	061 Move X8, [X8+1264]
	062 Move X24, 0x443000
	063 Move X25, 0x443000
	064 Move X24, [X24+1248]
	065 Move X25, [X25+1288]
	066 Move X1, [X8]
	067 Move X26, 0x443000
	068 Move X22, 0x443000
	069 Move X23, 0x443000
	070 Move X26, [X26+1296]
	071 Move X22, [X22+1280]
	072 Move X23, [X23+1240]
	073 Add X8, X31, 0
	074 Call List`1<NativeSlice`1<NudgeJobData>>.GetEnumerator, X0
	075 Move V0, [X31]
	076 Move V1, [X31+16]
	077 Move [X31+64], V0
	078 Move [X31+72], V1
	079 Move X1, [X24]
	080 Add X0, X31, 64
	081 Call Enumerator<NativeSlice`1<NudgeJobData>>.MoveNext, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {110}
	086 Move X0, [X31+80]
	087 Move X1, [X31+88]
	088 Move X2, [X25]
	089 Move [X31+48], X0
	090 Move [X31+56], X1
	091 Move X20, [X19+40]
	092 Call NativeSliceUnsafeUtility.GetUnsafePtr, X0
	093 Move X1, X31
	094 Call IntPtr.op_Explicit, X0
	095 Move X1, [X26]
	096 Move X21, X0
	097 Add X0, X31, 48
	098 Call NativeSlice`1<NudgeJobData>.get_Length, X0
	099 Move W1, W0
	100 Move X0, X21
	101 Call JobProcessor.ScheduleNudgeJobs, X0, X1
	102 Compare X20, 0
	103 JumpIfEqual {138}
	104 Move X2, X0
	105 Move X3, X1
	106 Move X0, X20
	107 Move X1, X2
	108 Move X2, X3
	109 Call JobMerger.Add, X0, X1
	110 Move X1, [X23]
	111 Add X0, X31, 64
	112 Call Enumerator<NativeSlice`1<NudgeJobData>>.Dispose, X0
	113 Move X0, [X19+40]
	114 Compare X0, 0
	115 JumpIfEqual {139}
	116 Call JobMerger.MergeAndReset, X0
	117 Move [X31+32], X0
	118 Move [X31+40], X1
	119 Add X0, X31, 32
	120 Move X1, X31
	121 Call JobHandle.Complete, X0
	122 Move X0, [X19+16]
	123 Compare X0, 0
	124 JumpIfEqual {139}
	125 Move X1, [X22]
	126 Call NativePagedList`1<NudgeJobData>.Reset, X0
	127 Move X20, [X31+160]
	128 Move X19, [X31+168]
	129 Move X22, [X31+144]
	130 Move X21, [X31+152]
	131 Move X24, [X31+128]
	132 Move X23, [X31+136]
	133 Move X26, [X31+112]
	134 Move X25, [X31+120]
	135 Move X30, [X31+96]
	136 Add X31, X31, 176
	137 Return 
	138 Call 0x1C17F20
	139 Call 0x1C17F20
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Call 0x3EB2AD0
	142 Move X20, [X0]
	143 Call 0x3EB2AE0
	144 Move X1, [X23]
	145 Add X0, X31, 64
	146 Call Enumerator<NativeSlice`1<NudgeJobData>>.Dispose, X0
	147 Compare X20, 0
	148 JumpIfEqual {113}
	149 Move X0, X20
	150 Call 0x1C17F18
	151 Move X19, X0
	152 Move X20, X31
	153 Move X19, X0
	154 Move X1, [X23]
	155 Add X0, X31, 64
	156 Call Enumerator<NativeSlice`1<NudgeJobData>>.Dispose, X0
	157 Compare X20, 0
	158 JumpIfNotEqual {161}
	159 Move X0, X19
	160 Call 0x1D2D690
	161 Move X0, X20
	162 Call 0x1C17F18
	163 Call 0x1991590

Method: System.Void CompleteConvertMeshJobs()

Disassembly:
	0x03D22EE4 ADRP X0, 0x442000
	0x03D22EE8 LDR X0, [X0 + 0x620]
	0x03D22EEC BL 0x1C16CF4
	0x03D22EF0 ADRP X0, 0x442000
	0x03D22EF4 LDR X0, [X0 + 0x628]
	0x03D22EF8 BL 0x1C16CF4
	0x03D22EFC ADRP X0, 0x442000
	0x03D22F00 LDR X0, [X0 + 0x630]
	0x03D22F04 BL 0x1C16CF4
	0x03D22F08 ADRP X0, 0x442000
	0x03D22F0C LDR X0, [X0 + 0x638]
	0x03D22F10 BL 0x1C16CF4
	0x03D22F14 MOVZ W8, 0x1
	0x03D22F18 STRB W8, [X23 + 0xA8B]
	0x03D22F1C LDR X0, [X24]
	0x03D22F20 MOVZ W1, 0x1
	0x03D22F24 MOV W2, W31
	0x03D22F28 MOV W3, W31
	0x03D22F2C MOV X4, X31
	0x03D22F30 BL 0x3BFE7FC
	0x03D22F34 LDR X8, [X19]
	0x03D22F38 MOVZ W1, 0x1
	0x03D22F3C MOV W2, W31
	0x03D22F40 MOV W3, W31
	0x03D22F44 LDR X8, [X8 + 0xB8]
	0x03D22F48 MOV X4, X31
	0x03D22F4C STR X0, [X8]
	0x03D22F50 LDR X0, [X22]
	0x03D22F54 BL 0x3BFE7FC
	0x03D22F58 LDR X8, [X19]
	0x03D22F5C MOVZ W1, 0x1
	0x03D22F60 MOV W2, W31
	0x03D22F64 MOV W3, W31
	0x03D22F68 LDR X8, [X8 + 0xB8]
	0x03D22F6C MOV X4, X31
	0x03D22F70 STR X0, [X8 + 0x8]
	0x03D22F74 LDR X0, [X21]
	0x03D22F78 BL 0x3BFE7FC
	0x03D22F7C LDR X8, [X19]
	0x03D22F80 MOVZ W1, 0x1
	0x03D22F84 MOV W2, W31
	0x03D22F88 MOV W3, W31
	0x03D22F8C LDR X8, [X8 + 0xB8]
	0x03D22F90 MOV X4, X31
	0x03D22F94 STR X0, [X8 + 0x10]
	0x03D22F98 LDR X0, [X20]
	0x03D22F9C BL 0x3BFE7FC
	0x03D22FA0 LDR X8, [X19]
	0x03D22FA4 LDP X20, X19, [X31 + 0x30]
	0x03D22FA8 LDP X22, X21, [X31 + 0x20]
	0x03D22FAC LDP X24, X23, [X31 + 0x10]
	0x03D22FB0 LDR X8, [X8 + 0xB8]
	0x03D22FB4 MOVZ W9, 0xC000
	0x03D22FB8 STR X0, [X8 + 0x18]
	0x03D22FBC STR W9, [X8 + 0x20]
	0x03D22FC0 LDR X30, [X31], #0x40
	0x03D22FC4 RET
	0x03D22FC8 STP X30, X21, [X31 - 0x20]!
	0x03D22FCC STP X20, X19, [X31 + 0x10]
	0x03D22FD0 LDR X8, [X2 + 0x8]
	0x03D22FD4 STP X1, X2, [X0 + 0x20]
	0x03D22FD8 MOV X19, X0
	0x03D22FDC MOV X20, X1
	0x03D22FE0 STR X8, [X0 + 0x10]
	0x03D22FE4 LDRB W21, [X2 + 0x52]
	0x03D22FE8 STR X0, [X0 + 0x40]
	0x03D22FEC MOV X0, X2
	0x03D22FF0 BL 0x1C16D84
	0x03D22FF4 TBZ X0, 0x0, 0x3D23010
	0x03D22FF8 CMP W21, 0x3
	0x03D22FFC B.NE 0x3D23014
	0x03D23000 ADRP X8, 0xFFFFFFFFFDEEC000
	0x03D23004 ADD X8, X8, 0xC14
	0x03D23008 STR X8, [X19 + 0x18]
	0x03D2300C B 0x3D23024
	0x03D23010 CBZ X20, 0x3D2303C
	0x03D23014 LDR X8, [X19 + 0x10]
	0x03D23018 LDR X9, [X19 + 0x20]
	0x03D2301C STR X8, [X19 + 0x18]
	0x03D23020 STR X9, [X19 + 0x40]
	0x03D23024 ADRP X8, 0xFFFFFFFFFDEEC000
	0x03D23028 ADD X8, X8, 0xBAC
	0x03D2302C STR X8, [X19 + 0x38]
	0x03D23030 LDP X20, X19, [X31 + 0x10]
	0x03D23034 LDP X30, X21, [X31], #0x20
	0x03D23038 RET
	0x03D2303C ADRP X1, 0xFFFFFFFFFCDF8000
	0x03D23040 ADD X1, X1, 0xEE3
	0x03D23044 MOV X0, X31
	0x03D23048 BL 0x1C16F3C
	0x03D2304C MOV X1, X31
	0x03D23050 BL 0x1C16DEC
	0x03D23054 LDR X8, [X0 + 0x40]
	0x03D23058 LDR X5, [X0 + 0x18]
	0x03D2305C LDR X4, [X0 + 0x28]
	0x03D23060 MOV X0, X8
	0x03D23064 BR X5
	0x03D23068 SUB X31, X31, 0x80
	0x03D2306C STP X30, X27, [X31 + 0x30]
	0x03D23070 STP X26, X25, [X31 + 0x40]
	0x03D23074 STP X24, X23, [X31 + 0x50]
	0x03D23078 STP X22, X21, [X31 + 0x60]
	0x03D2307C STP X20, X19, [X31 + 0x70]
	0x03D23080 ADRP X26, 0x6C4000
	0x03D23084 ADRP X27, 0x441000
	0x03D23088 LDRB W8, [X26 + 0xA8C]
	0x03D2308C LDR X27, [X27 + 0x640]
	0x03D23090 MOV W20, W6
	0x03D23094 MOV X21, X5
	0x03D23098 MOV X22, X4
	0x03D2309C MOV X23, X3
	0x03D230A0 MOV X24, X2
	0x03D230A4 MOV X25, X1
	0x03D230A8 MOV X19, X0
	0x03D230AC TBNZ X8, 0x0, 0x3D230C4
	0x03D230B0 ADRP X0, 0x441000
	0x03D230B4 LDR X0, [X0 + 0x640]
	0x03D230B8 BL 0x1C16CF4
	0x03D230BC MOVZ W8, 0x1
	0x03D230C0 STRB W8, [X26 + 0xA8C]
	0x03D230C4 LDR X5, [X27]
	0x03D230C8 ADD X0, X31, 0x8
	0x03D230CC MOVZ W2, 0x80
	0x03D230D0 MOV W1, W20
	0x03D230D4 MOV X3, X31
	0x03D230D8 MOV X4, X31
	0x03D230DC STP X25, X24, [X31 + 0x8]
	0x03D230E0 STP X23, X22, [X31 + 0x18]
	0x03D230E4 STP W21, W31, [X31 + 0x28]
	0x03D230E8 BL 0x21EEE04
	0x03D230EC LDR W8, [X19 + 0x20]
	0x03D230F0 LDR W9, [X19 + 0x18]
	0x03D230F4 MOV X20, X0
	0x03D230F8 MOV X21, X1
	0x03D230FC CMP W8, W9
	0x03D23100 B.NE 0x3D2312C
	0x03D23104 LDP X0, X1, [X19 + 0x10]
	0x03D23108 MOV X2, X31
	0x03D2310C BL 0x3BFDE5C
	0x03D23110 LDR X8, [X19 + 0x10]
	0x03D23114 MOVZ W9, 0x1
	0x03D23118 STP X0, X1, [X8]
	0x03D2311C MOV X0, X31

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x6C6000
	012 Move W8, [X20+2688]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {44}
	018 Move X0, 0x443000
	019 Move X0, [X0+1312]
	020 Call 0x1C17CF4
	021 Move X0, 0x443000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move X0, 0x443000
	025 Move X0, [X0+1328]
	026 Call 0x1C17CF4
	027 Move X0, 0x443000
	028 Move X0, [X0+1336]
	029 Call 0x1C17CF4
	030 Move X0, 0x443000
	031 Move X0, [X0+1344]
	032 Call 0x1C17CF4
	033 Move X0, 0x443000
	034 Move X0, [X0+1352]
	035 Call 0x1C17CF4
	036 Move X0, 0x443000
	037 Move X0, [X0+1360]
	038 Call 0x1C17CF4
	039 Move X0, 0x443000
	040 Move X0, [X0+1368]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+2688], W8
	044 NotImplemented "Instruction MOVI not yet implemented."
	045 Move [X31+48], X31
	046 Move [X31+56], X31
	047 Move [X31+64], V0
	048 Move [X31+72], V0
	049 Move [X31+32], X31
	050 Move [X31+40], X31
	051 Move X0, [X19+24]
	052 Compare X0, 0
	053 JumpIfEqual {139}
	054 Move X8, 0x443000
	055 Move X8, [X8+1344]
	056 Move X1, [X8]
	057 Call 0x240380C, X0
	058 Compare X0, 0
	059 JumpIfEqual {139}
	060 Move X8, 0x443000
	061 Move X8, [X8+1336]
	062 Move X24, 0x443000
	063 Move X25, 0x443000
	064 Move X24, [X24+1320]
	065 Move X25, [X25+1360]
	066 Move X1, [X8]
	067 Move X26, 0x443000
	068 Move X22, 0x443000
	069 Move X23, 0x443000
	070 Move X26, [X26+1368]
	071 Move X22, [X22+1352]
	072 Move X23, [X23+1312]
	073 Add X8, X31, 0
	074 Call List`1<NativeSlice`1<ConvertMeshJobData>>.GetEnumerator, X0
	075 Move V0, [X31]
	076 Move V1, [X31+16]
	077 Move [X31+64], V0
	078 Move [X31+72], V1
	079 Move X1, [X24]
	080 Add X0, X31, 64
	081 Call Enumerator<NativeSlice`1<ConvertMeshJobData>>.MoveNext, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {110}
	086 Move X0, [X31+80]
	087 Move X1, [X31+88]
	088 Move X2, [X25]
	089 Move [X31+48], X0
	090 Move [X31+56], X1
	091 Move X20, [X19+40]
	092 Call 0x2224298, X0
	093 Move X1, X31
	094 Call IntPtr.op_Explicit, X0
	095 Move X1, [X26]
	096 Move X21, X0
	097 Add X0, X31, 48
	098 Call 0x24053AC, X0
	099 Move W1, W0
	100 Move X0, X21
	101 Call JobProcessor.ScheduleConvertMeshJobs, X0, X1
	102 Compare X20, 0
	103 JumpIfEqual {138}
	104 Move X2, X0
	105 Move X3, X1
	106 Move X0, X20
	107 Move X1, X2
	108 Move X2, X3
	109 Call JobMerger.Add, X0, X1
	110 Move X1, [X23]
	111 Add X0, X31, 64
	112 Call Enumerator<NativeSlice`1<ConvertMeshJobData>>.Dispose, X0
	113 Move X0, [X19+40]
	114 Compare X0, 0
	115 JumpIfEqual {139}
	116 Call JobMerger.MergeAndReset, X0
	117 Move [X31+32], X0
	118 Move [X31+40], X1
	119 Add X0, X31, 32
	120 Move X1, X31
	121 Call JobHandle.Complete, X0
	122 Move X0, [X19+24]
	123 Compare X0, 0
	124 JumpIfEqual {139}
	125 Move X1, [X22]
	126 Call 0x240399C, X0
	127 Move X20, [X31+160]
	128 Move X19, [X31+168]
	129 Move X22, [X31+144]
	130 Move X21, [X31+152]
	131 Move X24, [X31+128]
	132 Move X23, [X31+136]
	133 Move X26, [X31+112]
	134 Move X25, [X31+120]
	135 Move X30, [X31+96]
	136 Add X31, X31, 176
	137 Return 
	138 Call 0x1C17F20
	139 Call 0x1C17F20
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Call 0x3EB2AD0
	142 Move X20, [X0]
	143 Call 0x3EB2AE0
	144 Move X1, [X23]
	145 Add X0, X31, 64
	146 Call Enumerator<NativeSlice`1<ConvertMeshJobData>>.Dispose, X0
	147 Compare X20, 0
	148 JumpIfEqual {113}
	149 Move X0, X20
	150 Call 0x1C17F18
	151 Move X19, X0
	152 Move X20, X31
	153 Move X19, X0
	154 Move X1, [X23]
	155 Add X0, X31, 64
	156 Call Enumerator<NativeSlice`1<ConvertMeshJobData>>.Dispose, X0
	157 Compare X20, 0
	158 JumpIfNotEqual {161}
	159 Move X0, X19
	160 Call 0x1D2D690
	161 Move X0, X20
	162 Call 0x1C17F18
	163 Call 0x1991590

Method: System.Void CompleteClosingMeshJobs()

Disassembly:
	0x03D23120 STR W9, [X19 + 0x20]
	0x03D23124 BL 0x3BFDDB0
	0x03D23128 LDR W8, [X19 + 0x20]
	0x03D2312C LDR X9, [X19 + 0x10]
	0x03D23130 ADD W10, W8, 0x1
	0x03D23134 STR W10, [X19 + 0x20]
	0x03D23138 LDP X24, X23, [X31 + 0x50]
	0x03D2313C ADD X8, X9, W8, 0x4, SXTW
	0x03D23140 STP X20, X21, [X8]
	0x03D23144 LDP X20, X19, [X31 + 0x70]
	0x03D23148 LDP X22, X21, [X31 + 0x60]
	0x03D2314C LDP X26, X25, [X31 + 0x40]
	0x03D23150 LDP X30, X27, [X31 + 0x30]
	0x03D23154 ADD X31, X31, 0x80
	0x03D23158 RET
	0x03D2315C SUB X31, X31, 0x30
	0x03D23160 STR X30, [X31 + 0x10]
	0x03D23164 STP X20, X19, [X31 + 0x20]
	0x03D23168 ADRP X20, 0x6C4000
	0x03D2316C LDRB W8, [X20 + 0xA8D]
	0x03D23170 MOV X19, X0
	0x03D23174 TBNZ X8, 0x0, 0x3D2318C
	0x03D23178 ADRP X0, 0x441000
	0x03D2317C LDR X0, [X0 + 0x518]
	0x03D23180 BL 0x1C16CF4
	0x03D23184 MOVZ W8, 0x1
	0x03D23188 STRB W8, [X20 + 0xA8D]
	0x03D2318C STP X31, X31, [X31]
	0x03D23190 LDR W3, [X19 + 0x20]
	0x03D23194 CMP W3, 0x1
	0x03D23198 B.LT 0x3D231E0
	0x03D2319C B.NE 0x3D231B0
	0x03D231A0 LDR X8, [X19 + 0x10]
	0x03D231A4 LDR V0, [X8]
	0x03D231A8 STR V0, [X31]
	0x03D231AC B 0x3D231D4
	0x03D231B0 ADRP X8, 0x441000
	0x03D231B4 LDP X0, X1, [X19 + 0x10]
	0x03D231B8 LDR X8, [X8 + 0x518]
	0x03D231BC MOV W2, W31
	0x03D231C0 LDR X4, [X8]
	0x03D231C4 BL 0x2222900
	0x03D231C8 MOV X2, X31
	0x03D231CC BL 0x3BFDF18
	0x03D231D0 STP X0, X1, [X31]
	0x03D231D4 ADD X0, X31, 0x0
	0x03D231D8 MOV X1, X31
	0x03D231DC BL 0x3BFDCAC
	0x03D231E0 STR W31, [X19 + 0x20]
	0x03D231E4 LDP X20, X19, [X31 + 0x20]
	0x03D231E8 LDR X30, [X31 + 0x10]
	0x03D231EC ADD X31, X31, 0x30
	0x03D231F0 RET
	0x03D231F4 LDRB W0, [X0 + 0x24]
	0x03D231F8 RET
	0x03D231FC AND W8, W1, 0x1
	0x03D23200 STRB W8, [X0 + 0x24]
	0x03D23204 RET
	0x03D23208 STP X30, X21, [X31 - 0x20]!
	0x03D2320C STP X20, X19, [X31 + 0x10]
	0x03D23210 ADRP X21, 0x6C4000
	0x03D23214 ADRP X20, 0x3D7000
	0x03D23218 LDRB W8, [X21 + 0xA8E]
	0x03D2321C LDR X20, [X20 + 0xC10]
	0x03D23220 MOV X19, X0
	0x03D23224 TBNZ X8, 0x0, 0x3D2323C
	0x03D23228 ADRP X0, 0x3D7000
	0x03D2322C LDR X0, [X0 + 0xC10]
	0x03D23230 BL 0x1C16CF4
	0x03D23234 MOVZ W8, 0x1
	0x03D23238 STRB W8, [X21 + 0xA8E]
	0x03D2323C LDR X8, [X19]
	0x03D23240 MOVZ W1, 0x1
	0x03D23244 MOV X0, X19
	0x03D23248 LDP X9, X2, [X8 + 0x188]
	0x03D2324C BLR X9
	0x03D23250 LDR X0, [X20]
	0x03D23254 LDR W8, [X0 + 0xE0]
	0x03D23258 CBNZ W8, 0x3D23260
	0x03D2325C BL 0x1C16DFC
	0x03D23260 MOV X0, X19
	0x03D23264 LDP X20, X19, [X31 + 0x10]
	0x03D23268 MOV X1, X31
	0x03D2326C LDP X30, X21, [X31], #0x20
	0x03D23270 B 0x33B3E9C
	0x03D23274 STP X30, X21, [X31 - 0x20]!
	0x03D23278 STP X20, X19, [X31 + 0x10]
	0x03D2327C ADRP X21, 0x6C4000
	0x03D23280 LDRB W8, [X21 + 0xA8F]
	0x03D23284 MOV W20, W1
	0x03D23288 MOV X19, X0
	0x03D2328C TBNZ X8, 0x0, 0x3D232A4
	0x03D23290 ADRP X0, 0x441000
	0x03D23294 LDR X0, [X0 + 0x5F8]
	0x03D23298 BL 0x1C16CF4
	0x03D2329C MOVZ W8, 0x1
	0x03D232A0 STRB W8, [X21 + 0xA8F]
	0x03D232A4 LDRB W8, [X19 + 0x24]
	0x03D232A8 CBNZ W8, 0x3D232CC
	0x03D232AC TBZ X20, 0x0, 0x3D232C4
	0x03D232B0 ADRP X8, 0x441000
	0x03D232B4 LDR X8, [X8 + 0x5F8]
	0x03D232B8 ADD X0, X19, 0x10
	0x03D232BC LDR X1, [X8]
	0x03D232C0 BL 0x23D7780
	0x03D232C4 MOVZ W8, 0x1
	0x03D232C8 STRB W8, [X19 + 0x24]
	0x03D232CC LDP X20, X19, [X31 + 0x10]
	0x03D232D0 LDP X30, X21, [X31], #0x20
	0x03D232D4 RET
	0x03D232D8 SUB X31, X31, 0x30
	0x03D232DC STP X30, X21, [X31 + 0x10]
	0x03D232E0 STP X20, X19, [X31 + 0x20]
	0x03D232E4 ADRP X21, 0x6C4000
	0x03D232E8 ADRP X20, 0x441000
	0x03D232EC LDRB W8, [X21 + 0xA90]
	0x03D232F0 LDR X20, [X20 + 0x5F0]
	0x03D232F4 MOV X19, X0
	0x03D232F8 TBNZ X8, 0x0, 0x3D23310
	0x03D232FC ADRP X0, 0x441000
	0x03D23300 LDR X0, [X0 + 0x5F0]
	0x03D23304 BL 0x1C16CF4
	0x03D23308 MOVZ W8, 0x1
	0x03D2330C STRB W8, [X21 + 0xA90]
	0x03D23310 LDR X4, [X20]
	0x03D23314 ADD X0, X31, 0x0
	0x03D23318 MOVZ W1, 0x100
	0x03D2331C MOVZ W2, 0x4
	0x03D23320 MOV W3, W31
	0x03D23324 STP X31, X31, [X31]
	0x03D23328 BL 0x23D7544
	0x03D2332C LDR V0, [X31]
	0x03D23330 MOV X0, X19
	0x03D23334 MOV X1, X31
	0x03D23338 STR V0, [X19 + 0x1]
	0x03D2333C BL 0x33BDD8C
	0x03D23340 LDP X20, X19, [X31 + 0x20]
	0x03D23344 LDP X30, X21, [X31 + 0x10]
	0x03D23348 ADD X31, X31, 0x30
	0x03D2334C RET
	0x03D23350 SUB X31, X31, 0xE0
	0x03D23354 STR X30, [X31 + 0xA0]
	0x03D23358 STP X24, X23, [X31 + 0xB0]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x6C5000
	012 Move W8, [X20+2689]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {44}
	018 Move X0, 0x442000
	019 Move X0, [X0+1376]
	020 Call 0x1C17CF4
	021 Move X0, 0x442000
	022 Move X0, [X0+1384]
	023 Call 0x1C17CF4
	024 Move X0, 0x442000
	025 Move X0, [X0+1392]
	026 Call 0x1C17CF4
	027 Move X0, 0x442000
	028 Move X0, [X0+1400]
	029 Call 0x1C17CF4
	030 Move X0, 0x442000
	031 Move X0, [X0+1408]
	032 Call 0x1C17CF4
	033 Move X0, 0x442000
	034 Move X0, [X0+1416]
	035 Call 0x1C17CF4
	036 Move X0, 0x442000
	037 Move X0, [X0+1424]
	038 Call 0x1C17CF4
	039 Move X0, 0x442000
	040 Move X0, [X0+1432]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+2689], W8
	044 NotImplemented "Instruction MOVI not yet implemented."
	045 Move [X31+48], X31
	046 Move [X31+56], X31
	047 Move [X31+64], V0
	048 Move [X31+72], V0
	049 Move [X31+32], X31
	050 Move [X31+40], X31
	051 Move X0, [X19+32]
	052 Compare X0, 0
	053 JumpIfEqual {139}
	054 Move X8, 0x442000
	055 Move X8, [X8+1408]
	056 Move X1, [X8]
	057 Call NativePagedList`1<CopyClosingMeshJobData>.GetPages, X0
	058 Compare X0, 0
	059 JumpIfEqual {139}
	060 Move X8, 0x442000
	061 Move X8, [X8+1400]
	062 Move X24, 0x442000
	063 Move X25, 0x442000
	064 Move X24, [X24+1384]
	065 Move X25, [X25+1424]
	066 Move X1, [X8]
	067 Move X26, 0x442000
	068 Move X22, 0x442000
	069 Move X23, 0x442000
	070 Move X26, [X26+1432]
	071 Move X22, [X22+1416]
	072 Move X23, [X23+1376]
	073 Add X8, X31, 0
	074 Call List`1<NativeSlice`1<CopyClosingMeshJobData>>.GetEnumerator, X0
	075 Move V0, [X31]
	076 Move V1, [X31+16]
	077 Move [X31+64], V0
	078 Move [X31+72], V1
	079 Move X1, [X24]
	080 Add X0, X31, 64
	081 Call Enumerator<NativeSlice`1<CopyClosingMeshJobData>>.MoveNext, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {110}
	086 Move X0, [X31+80]
	087 Move X1, [X31+88]
	088 Move X2, [X25]
	089 Move [X31+48], X0
	090 Move [X31+56], X1
	091 Move X20, [X19+40]
	092 Call NativeSliceUnsafeUtility.GetUnsafePtr, X0
	093 Move X1, X31
	094 Call IntPtr.op_Explicit, X0
	095 Move X1, [X26]
	096 Move X21, X0
	097 Add X0, X31, 48
	098 Call NativeSlice`1<CopyClosingMeshJobData>.get_Length, X0
	099 Move W1, W0
	100 Move X0, X21
	101 Call JobProcessor.ScheduleCopyClosingMeshJobs, X0, X1
	102 Compare X20, 0
	103 JumpIfEqual {138}
	104 Move X2, X0
	105 Move X3, X1
	106 Move X0, X20
	107 Move X1, X2
	108 Move X2, X3
	109 Call JobMerger.Add, X0, X1
	110 Move X1, [X23]
	111 Add X0, X31, 64
	112 Call Enumerator<NativeSlice`1<CopyClosingMeshJobData>>.Dispose, X0
	113 Move X0, [X19+40]
	114 Compare X0, 0
	115 JumpIfEqual {139}
	116 Call JobMerger.MergeAndReset, X0
	117 Move [X31+32], X0
	118 Move [X31+40], X1
	119 Add X0, X31, 32
	120 Move X1, X31
	121 Call JobHandle.Complete, X0
	122 Move X0, [X19+32]
	123 Compare X0, 0
	124 JumpIfEqual {139}
	125 Move X1, [X22]
	126 Call NativePagedList`1<CopyClosingMeshJobData>.Reset, X0
	127 Move X20, [X31+160]
	128 Move X19, [X31+168]
	129 Move X22, [X31+144]
	130 Move X21, [X31+152]
	131 Move X24, [X31+128]
	132 Move X23, [X31+136]
	133 Move X26, [X31+112]
	134 Move X25, [X31+120]
	135 Move X30, [X31+96]
	136 Add X31, X31, 176
	137 Return 
	138 Call 0x1C17F20
	139 Call 0x1C17F20
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Call 0x3EB2AD0
	142 Move X20, [X0]
	143 Call 0x3EB2AE0
	144 Move X1, [X23]
	145 Add X0, X31, 64
	146 Call Enumerator<NativeSlice`1<CopyClosingMeshJobData>>.Dispose, X0
	147 Compare X20, 0
	148 JumpIfEqual {113}
	149 Move X0, X20
	150 Call 0x1C17F18
	151 Move X19, X0
	152 Move X20, X31
	153 Move X19, X0
	154 Move X1, [X23]
	155 Add X0, X31, 64
	156 Call Enumerator<NativeSlice`1<CopyClosingMeshJobData>>.Dispose, X0
	157 Compare X20, 0
	158 JumpIfNotEqual {161}
	159 Move X0, X19
	160 Call 0x1D2D690
	161 Move X0, X20
	162 Call 0x1C17F18
	163 Call 0x1991590

Method: System.Boolean get_disposed()

Disassembly:
	0x03D2335C STP X22, X21, [X31 + 0xC0]
	0x03D23360 STP X20, X19, [X31 + 0xD0]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_disposed(System.Boolean value)

Disassembly:
	0x03D23364 MRS X21, 0xC000
	0x03D23368 LDR X8, [X21 + 0x28]
	0x03D2336C ADRP X23, 0x6C4000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.Void Dispose()

Disassembly:
	0x03D23370 ADRP X24, 0x441000
	0x03D23374 ADRP X22, 0x441000
	0x03D23378 STR X8, [X31 + 0x98]
	0x03D2337C LDRB W8, [X23 + 0xA91]
	0x03D23380 LDR X24, [X24 + 0x648]
	0x03D23384 LDR X22, [X22 + 0x610]
	0x03D23388 MOV W19, W1
	0x03D2338C MOV X20, X0
	0x03D23390 TBNZ X8, 0x0, 0x3D233B4
	0x03D23394 ADRP X0, 0x441000
	0x03D23398 LDR X0, [X0 + 0x648]
	0x03D2339C BL 0x1C16CF4
	0x03D233A0 ADRP X0, 0x441000
	0x03D233A4 LDR X0, [X0 + 0x610]
	0x03D233A8 BL 0x1C16CF4
	0x03D233AC MOVZ W8, 0x1
	0x03D233B0 STRB W8, [X23 + 0xA91]
	0x03D233B4 LDR X2, [X24]
	0x03D233B8 ADD X8, X31, 0x10
	0x03D233BC MOV X0, X20
	0x03D233C0 MOV W1, W19
	0x03D233C4 BL 0x240883C
	0x03D233C8 LDR V0, [X31 + 0x1]
	0x03D233CC LDUR V1, [X31 + 0x1E]
	0x03D233D0 LDUR W8, [X31 + 0x2F]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C5000
	006 Move X20, 0x3D8000
	007 Move W8, [X21+2690]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3D8000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2690], W8
	019 Move W1, 1
	020 Move X0, X19
	021 Call JobManager.Dispose, X0, X1
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call GC.SuppressFinalize, X0
	034 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03D233D4 LDRB W9, [X31 + 0x33]
	0x03D233D8 STR V0, [X31 + 0x7]
	0x03D233DC LDUR V0, [X31 + 0x36]
	0x03D233E0 STUR V1, [X31 + 0x7E]
	0x03D233E4 LDR V1, [X31 + 0x4]
	0x03D233E8 STR W8, [X31 + 0x8]
	0x03D233EC STRB W9, [X31 + 0xC]
	0x03D233F0 STR V0, [X31 + 0x5]
	0x03D233F4 STUR V1, [X31 + 0x5A]
	0x03D233F8 LDR V0, [X31 + 0x7]
	0x03D233FC LDRB W8, [X20 + 0x22]
	0x03D23400 LDRH W9, [X20 + 0x20]
	0x03D23404 LDUR V1, [X31 + 0x7E]
	0x03D23408 STR V0, [X31 + 0x1]
	0x03D2340C STRB W8, [X31 + 0x2E]
	0x03D23410 LDR W8, [X31 + 0x8]
	0x03D23414 LDR V0, [X31 + 0x5]
	0x03D23418 LDR X3, [X22]
	0x03D2341C ADD X0, X20, 0x10
	0x03D23420 STUR W8, [X31 + 0x2F]
	0x03D23424 LDRB W8, [X31 + 0xC]
	0x03D23428 STUR V0, [X31 + 0x36]
	0x03D2342C LDUR V0, [X31 + 0x5A]
	0x03D23430 ADD X2, X31, 0x10
	0x03D23434 MOV W1, W19
	0x03D23438 STUR V1, [X31 + 0x1E]
	0x03D2343C STRB W8, [X31 + 0x33]
	0x03D23440 STRH W9, [X31 + 0x34]
	0x03D23444 STR V0, [X31 + 0x4]
	0x03D23448 BL 0x24088B0
	0x03D2344C LDR X8, [X21 + 0x28]
	0x03D23450 LDR X9, [X31 + 0x98]
	0x03D23454 CMP X8, X9
	0x03D23458 B.NE 0x3D23474
	0x03D2345C LDP X20, X19, [X31 + 0xD0]
	0x03D23460 LDP X22, X21, [X31 + 0xC0]
	0x03D23464 LDP X24, X23, [X31 + 0xB0]
	0x03D23468 LDR X30, [X31 + 0xA0]
	0x03D2346C ADD X31, X31, 0xE0
	0x03D23470 RET
	0x03D23474 BL 0x3EB1B20
	0x03D23478 LDR X0, [X0 + 0xF8]
	0x03D2347C RET
	0x03D23480 STR X1, [X0 + 0xF8]
	0x03D23484 RET
	0x03D23488 STP X29, X30, [X31 - 0x60]!
	0x03D2348C STP X28, X27, [X31 + 0x10]
	0x03D23490 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C5000
	006 Move W8, [X21+2691]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x442000
	014 Move X0, [X0+1440]
	015 Call 0x1C17CF4
	016 Move X0, 0x442000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x442000
	020 Move X0, [X0+1456]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2691], W8
	024 Move W8, [X19+48]
	025 Compare W8, 0
	026 JumpIfNotEqual {58}
	027 Move TEMP, X20
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {56}
	031 Move X0, [X19+16]
	032 Compare X0, 0
	033 JumpIfEqual {63}
	034 Move X8, 0x442000
	035 Move X8, [X8+1448]
	036 Move X1, [X8]
	037 Call NativePagedList`1<NudgeJobData>.Dispose, X0
	038 Move X0, [X19+24]
	039 Compare X0, 0
	040 JumpIfEqual {63}
	041 Move X8, 0x442000
	042 Move X8, [X8+1440]
	043 Move X1, [X8]
	044 Call 0x2403AAC, X0
	045 Move X0, [X19+32]
	046 Compare X0, 0
	047 JumpIfEqual {63}
	048 Move X8, 0x442000
	049 Move X8, [X8+1456]
	050 Move X1, [X8]
	051 Call NativePagedList`1<CopyClosingMeshJobData>.Dispose, X0
	052 Move X0, [X19+40]
	053 Compare X0, 0
	054 JumpIfEqual {63}
	055 Call JobMerger.Dispose, X0
	056 Move W8, 1
	057 Move [X19+48], W8
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return 
	063 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03D234F8 TBNZ X8, 0x0, 0x3D235A0
	0x03D234FC ADRP X0, 0x441000
	0x03D23500 LDR X0, [X0 + 0x3E8]
	0x03D23504 BL 0x1C16CF4
	0x03D23508 ADRP X0, 0x441000
	0x03D2350C LDR X0, [X0 + 0x3F0]
	0x03D23510 BL 0x1C16CF4
	0x03D23514 ADRP X0, 0x441000
	0x03D23518 LDR X0, [X0 + 0x690]
	0x03D2351C BL 0x1C16CF4
	0x03D23520 ADRP X0, 0x441000
	0x03D23524 LDR X0, [X0 + 0x698]
	0x03D23528 BL 0x1C16CF4
	0x03D2352C ADRP X0, 0x441000
	0x03D23530 LDR X0, [X0 + 0x658]
	0x03D23534 BL 0x1C16CF4
	0x03D23538 ADRP X0, 0x3F9000
	0x03D2353C LDR X0, [X0 + 0x820]
	0x03D23540 BL 0x1C16CF4
	0x03D23544 ADRP X0, 0x441000
	0x03D23548 LDR X0, [X0 + 0x668]
	0x03D2354C BL 0x1C16CF4
	0x03D23550 ADRP X0, 0x441000
	0x03D23554 LDR X0, [X0 + 0x650]
	0x03D23558 BL 0x1C16CF4
	0x03D2355C ADRP X0, 0x441000
	0x03D23560 LDR X0, [X0 + 0x660]
	0x03D23564 BL 0x1C16CF4
	0x03D23568 ADRP X0, 0x441000
	0x03D2356C LDR X0, [X0 + 0x680]
	0x03D23570 BL 0x1C16CF4
	0x03D23574 ADRP X0, 0x441000
	0x03D23578 LDR X0, [X0 + 0x670]
	0x03D2357C BL 0x1C16CF4
	0x03D23580 ADRP X0, 0x441000
	0x03D23584 LDR X0, [X0 + 0x688]
	0x03D23588 BL 0x1C16CF4
	0x03D2358C ADRP X0, 0x441000
	0x03D23590 LDR X0, [X0 + 0x678]
	0x03D23594 BL 0x1C16CF4
	0x03D23598 MOVZ W8, 0x1
	0x03D2359C STRB W8, [X27 + 0xA92]
	0x03D235A0 LDR X0, [X26]
	0x03D235A4 ADRP X27, 0x441000
	0x03D235A8 ADRP X26, 0x441000
	0x03D235AC LDR X27, [X27 + 0x3F0]
	0x03D235B0 LDR X26, [X26 + 0x698]
	0x03D235B4 MOVZ W1, 0x1
	0x03D235B8 MOV W2, W31
	0x03D235BC MOV W3, W31
	0x03D235C0 MOV X4, X31
	0x03D235C4 BL 0x3BFE7FC
	0x03D235C8 LDR X8, [X21]
	0x03D235CC MOVZ W1, 0x1
	0x03D235D0 MOV W2, W31
	0x03D235D4 MOV W3, W31
	0x03D235D8 LDR X8, [X8 + 0xB8]
	0x03D235DC MOV X4, X31
	0x03D235E0 STR X0, [X8]
	0x03D235E4 LDR X0, [X20]
	0x03D235E8 BL 0x3BFE7FC
	0x03D235EC LDR X8, [X21]
	0x03D235F0 MOVZ W1, 0x1
	0x03D235F4 MOV W2, W31
	0x03D235F8 MOV W3, W31
	0x03D235FC LDR X8, [X8 + 0xB8]
	0x03D23600 MOV X4, X31
	0x03D23604 STR X0, [X8 + 0x8]
	0x03D23608 LDR X0, [X29]
	0x03D2360C BL 0x3BFE7FC
	0x03D23610 LDR X8, [X21]
	0x03D23614 MOVZ W1, 0x1
	0x03D23618 MOV W2, W31
	0x03D2361C MOV W3, W31
	0x03D23620 LDR X8, [X8 + 0xB8]
	0x03D23624 MOV X4, X31
	0x03D23628 STR X0, [X8 + 0x10]
	0x03D2362C LDR X0, [X28]
	0x03D23630 BL 0x3BFE7FC
	0x03D23634 LDR X8, [X21]
	0x03D23638 MOVZ W1, 0x1

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X26, 0x6C5000
	012 Move X27, 0x442000
	013 Move X20, 0x442000
	014 Move X25, 0x442000
	015 Move X24, 0x442000
	016 Move X23, 0x442000
	017 Move X22, 0x442000
	018 Move X21, 0x442000
	019 Move X27, [X27+1464]
	020 Move X20, [X20+1472]
	021 Move W8, [X26+2692]
	022 Move X25, [X25+1480]
	023 Move X24, [X24+1488]
	024 Move X23, [X23+1496]
	025 Move X22, [X22+1504]
	026 Move X21, [X21+1512]
	027 Move X19, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {55}
	032 Move X0, 0x442000
	033 Move X0, [X0+1512]
	034 Call 0x1C17CF4
	035 Move X0, 0x442000
	036 Move X0, [X0+1472]
	037 Call 0x1C17CF4
	038 Move X0, 0x442000
	039 Move X0, [X0+1488]
	040 Call 0x1C17CF4
	041 Move X0, 0x442000
	042 Move X0, [X0+1504]
	043 Call 0x1C17CF4
	044 Move X0, 0x442000
	045 Move X0, [X0+1496]
	046 Call 0x1C17CF4
	047 Move X0, 0x442000
	048 Move X0, [X0+1464]
	049 Call 0x1C17CF4
	050 Move X0, 0x442000
	051 Move X0, [X0+1480]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X26+2692], W8
	055 Move X0, [X27]
	056 Call 0x1C17F10
	057 Move X2, [X20]
	058 Move W1, 64
	059 Move X20, X0
	060 Call NativePagedList`1<NudgeJobData>..ctor, X0, X1
	061 Move [X19+16], X20
	062 Move X0, [X25]
	063 Call 0x1C17F10
	064 Move X2, [X24]
	065 Move W1, 64
	066 Move X20, X0
	067 Call 0x24035C4, X0, X1
	068 Move [X19+24], X20
	069 Move X0, [X23]
	070 Call 0x1C17F10
	071 Move X2, [X22]
	072 Move W1, 64
	073 Move X20, X0
	074 Call NativePagedList`1<CopyClosingMeshJobData>..ctor, X0, X1
	075 Move [X19+32], X20
	076 Move X0, [X21]
	077 Call 0x1C17F10
	078 Move W1, 128
	079 Move X20, X0
	080 Call JobMerger..ctor, X0, X1
	081 Move [X19+40], X20
	082 Move X0, X19
	083 Move X20, [X31+64]
	084 Move X19, [X31+72]
	085 Move X22, [X31+48]
	086 Move X21, [X31+56]
	087 Move X24, [X31+32]
	088 Move X23, [X31+40]
	089 Move X26, [X31+16]
	090 Move X25, [X31+24]
	091 Move X1, X31
	092 Move X30, [X31+80]
	093 Move X27, [X31+88]
	094 Call Object..ctor, X0
	095 Return 

