Type: UnityEngine.UIElements.UIR.Utility

Method: System.Void SetVectorArray(UnityEngine.MaterialPropertyBlock props, System.Int32 name, Unity.Collections.NativeSlice`1<T> vector4s)

Disassembly:
	0x022A9A80 LDR X0, [X1]
	0x022A9A84 TBNZ X8, 0x1F, 0x22A9A8C
	0x022A9A88 LDR X23, [X23]
	0x022A9A8C STP X26, X23, [X29 - 0x20]
	0x022A9A90 STUR X25, [X29 - 0x10]
	0x022A9A94 LDR X8, [X1 + 0x10]
	0x022A9A98 SUB X3, X29, 0x20
	0x022A9A9C MOV X2, X21
	0x022A9AA0 MOV X4, X25
	0x022A9AA4 BLR X8
	0x022A9AA8 LDUR X0, [X29 - 0x58]
	0x022A9AAC MOV X1, X25
	0x022A9AB0 B 0x22A9AE8
	0x022A9AB4 MOV W0, W31
	0x022A9AB8 B 0x22A9B08
	0x022A9ABC LDR X8, [X19 + 0x38]
	0x022A9AC0 MOV X0, X23
	0x022A9AC4 MOV X2, X22
	0x022A9AC8 LDR X8, [X8 + 0x10]
	0x022A9ACC LDR W8, [X8 + 0x28]
	0x022A9AD0 CMP W8, 0x0
	0x022A9AD4 SUB X8, X29, 0x28
	0x022A9AD8 CSEL X1, X24, X8, LT
	0x022A9ADC BL 0x3EB1AC0
	0x022A9AE0 LDUR X0, [X29 - 0x58]
	0x022A9AE4 MOV X1, X23
	0x022A9AE8 MOV X2, X22
	0x022A9AEC BL 0x3EB1AC0
	0x022A9AF0 LDR X8, [X19 + 0x38]
	0x022A9AF4 LDR X0, [X8 + 0x10]
	0x022A9AF8 LDRB W8, [X0 + 0x135]
	0x022A9AFC TBNZ X8, 0x0, 0x22A9B04
	0x022A9B00 BL 0x1C5C684
	0x022A9B04 MOVZ W0, 0x1
	0x022A9B08 LDR X8, [X20 + 0x28]
	0x022A9B0C LDUR X9, [X29 - 0x8]
	0x022A9B10 CMP X8, X9
	0x022A9B14 B.NE 0x22A9B38
	0x022A9B18 ADD X31, X29, 0x0
	0x022A9B1C LDP X20, X19, [X31 + 0x50]
	0x022A9B20 LDP X22, X21, [X31 + 0x40]
	0x022A9B24 LDP X24, X23, [X31 + 0x30]
	0x022A9B28 LDP X26, X25, [X31 + 0x20]
	0x022A9B2C LDP X28, X27, [X31 + 0x10]
	0x022A9B30 LDP X29, X30, [X31], #0x60
	0x022A9B34 RET
	0x022A9B38 BL 0x3EB1B20
	0x022A9B3C STP X30, X21, [X31 - 0x20]!
	0x022A9B40 STP X20, X19, [X31 + 0x10]
	0x022A9B44 LDR X8, [X2 + 0x38]
	0x022A9B48 MOV X20, X2

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X31], X2
	009 Move [X31+8], X3
	010 Move X8, [X4+56]
	011 Move X21, X4
	012 Move W19, W1
	013 Move X20, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {25}
	016 Move X0, 0x1E74000
	017 Move X0, [X0+2080]
	018 Call 0x1C17CF4
	019 Move X8, [X21+56]
	020 Compare X8, 0
	021 JumpIfNotEqual {25}
	022 Move X0, X21
	023 Call 0x1C5D6E0
	024 Move X8, [X21+56]
	025 Move X1, [X8+8]
	026 Add X0, X31, 0
	027 Call NativeSlice`1<Transform3x4>.get_Length, X0
	028 Move X9, [X21+56]
	029 Move X8, [X31]
	030 Move X1, [X31+8]
	031 Move W23, [X31+8]
	032 Move W21, W0
	033 Move X2, [X9+32]
	034 Move X0, X8
	035 Call NativeSliceUnsafeUtility.GetUnsafePtr, X0
	036 Move X8, 0x1E74000
	037 Move X8, [X8+2080]
	038 Move X22, X0
	039 Move X8, [X8]
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Multiply W8, W23, W21
	046 Add W9, W8, 15
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 NotImplemented "Instruction SBFM not yet implemented."
	050 Move X0, X20
	051 Move W1, W19
	052 Move X2, X22
	053 Move X4, X31
	054 Call Utility.SetVectorArray, X0, X1, X2, X3
	055 Move X20, [X31+48]
	056 Move X19, [X31+56]
	057 Move X22, [X31+32]
	058 Move X21, [X31+40]
	059 Move X30, [X31+16]
	060 Move X23, [X31+24]
	061 Add X31, X31, 64
	062 Return 

Method: System.Void add_GraphicsResourcesRecreate(System.Action`1<System.Boolean> value)

Disassembly:
	0x03D1F78C MOV X24, X0
	0x03D1F790 CBNZ X6, 0x3D1F7A8
	0x03D1F794 ADRP X0, 0xFFFFFFFFFCDEA000
	0x03D1F798 ADD X0, X0, 0xEB4
	0x03D1F79C BL 0x1C16CB8
	0x03D1F7A0 MOV X6, X0
	0x03D1F7A4 STR X0, [X25 + 0x9A8]
	0x03D1F7A8 MOV X0, X24
	0x03D1F7AC MOV X1, X23
	0x03D1F7B0 MOV W2, W22
	0x03D1F7B4 MOV X3, X21
	0x03D1F7B8 MOV W4, W20
	0x03D1F7BC MOV X5, X19
	0x03D1F7C0 LDP X20, X19, [X31 + 0x30]
	0x03D1F7C4 LDP X22, X21, [X31 + 0x20]
	0x03D1F7C8 LDP X24, X23, [X31 + 0x10]
	0x03D1F7CC LDP X30, X25, [X31], #0x40
	0x03D1F7D0 BR X6
	0x03D1F7D4 STR X30, [X31 - 0x20]!
	0x03D1F7D8 STP X20, X19, [X31 + 0x10]
	0x03D1F7DC ADRP X20, 0x6C8000
	0x03D1F7E0 LDR X1, [X20 + 0x9B0]
	0x03D1F7E4 MOV X19, X0
	0x03D1F7E8 CBNZ X1, 0x3D1F800
	0x03D1F7EC ADRP X0, 0xFFFFFFFFFCE0C000
	0x03D1F7F0 ADD X0, X0, 0x31C
	0x03D1F7F4 BL 0x1C16CB8
	0x03D1F7F8 MOV X1, X0
	0x03D1F7FC STR X0, [X20 + 0x9B0]
	0x03D1F800 MOV X0, X19
	0x03D1F804 LDP X20, X19, [X31 + 0x10]
	0x03D1F808 LDR X30, [X31], #0x20
	0x03D1F80C BR X1
	0x03D1F810 SUB X31, X31, 0x30
	0x03D1F814 STP X1, X30, [X31 + 0x8]
	0x03D1F818 STP X20, X19, [X31 + 0x20]
	0x03D1F81C ADRP X19, 0x6C8000
	0x03D1F820 STR X0, [X31]
	0x03D1F824 ADRP X20, 0x3FD000
	0x03D1F828 LDRB W8, [X19 + 0x9B8]
	0x03D1F82C LDR X20, [X20 + 0x820]
	0x03D1F830 TBNZ X8, 0x0, 0x3D1F848
	0x03D1F834 ADRP X0, 0x3FD000
	0x03D1F838 LDR X0, [X0 + 0x820]
	0x03D1F83C BL 0x1C16CF4
	0x03D1F840 MOVZ W8, 0x1
	0x03D1F844 STRB W8, [X19 + 0x9B8]
	0x03D1F848 LDR X0, [X20]
	0x03D1F84C LDR W8, [X0 + 0xE0]
	0x03D1F850 CBNZ W8, 0x3D1F858
	0x03D1F854 BL 0x1C16DFC
	0x03D1F858 ADRP X19, 0x6C8000
	0x03D1F85C LDR X8, [X19 + 0xA30]
	0x03D1F860 CBNZ X8, 0x3D1F878
	0x03D1F864 ADRP X0, 0xFFFFFFFFFCDEE000
	0x03D1F868 ADD X0, X0, 0xD0A
	0x03D1F86C BL 0x1C16CB8
	0x03D1F870 MOV X8, X0
	0x03D1F874 STR X0, [X19 + 0xA30]
	0x03D1F878 ADD X0, X31, 0x0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x6C9000
	010 Move X24, 0x3FE000
	011 Move W8, [X20+2403]
	012 Move X24, [X24+2080]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x3D5000
	019 Move X0, [X0+3368]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FE000
	022 Move X0, [X0+2080]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2403], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x3D5000
	034 Move X20, [X8]
	035 Move X25, [X25+3368]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X0, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Call 0x1C25138
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X20, X0
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Move X25, [X31+72]
	070 Return 
	071 Move X0, X22
	072 Move X1, X23
	073 Call 0x1C181E0

Method: System.Void remove_GraphicsResourcesRecreate(System.Action`1<System.Boolean> value)

Disassembly:
	0x03D1F87C BLR X8
	0x03D1F880 LDP X20, X19, [X31 + 0x20]
	0x03D1F884 LDR X30, [X31 + 0x10]
	0x03D1F888 ADD X31, X31, 0x30
	0x03D1F88C RET
	0x03D1F890 STR X30, [X31 - 0x20]!
	0x03D1F894 STP X20, X19, [X31 + 0x10]
	0x03D1F898 ADRP X20, 0x6C8000
	0x03D1F89C LDR X1, [X20 + 0xA30]
	0x03D1F8A0 MOV X19, X0
	0x03D1F8A4 CBNZ X1, 0x3D1F8BC
	0x03D1F8A8 ADRP X0, 0xFFFFFFFFFCDEE000
	0x03D1F8AC ADD X0, X0, 0xD0A
	0x03D1F8B0 BL 0x1C16CB8
	0x03D1F8B4 MOV X1, X0
	0x03D1F8B8 STR X0, [X20 + 0xA30]
	0x03D1F8BC MOV X0, X19
	0x03D1F8C0 LDP X20, X19, [X31 + 0x10]
	0x03D1F8C4 LDR X30, [X31], #0x20
	0x03D1F8C8 BR X1
	0x03D1F8CC STP X30, X19, [X31 - 0x10]!
	0x03D1F8D0 ADRP X19, 0x6C8000
	0x03D1F8D4 LDR X0, [X19 + 0x9C0]
	0x03D1F8D8 CBNZ X0, 0x3D1F8EC
	0x03D1F8DC ADRP X0, 0xFFFFFFFFFCDE6000
	0x03D1F8E0 ADD X0, X0, 0x956
	0x03D1F8E4 BL 0x1C16CB8
	0x03D1F8E8 STR X0, [X19 + 0x9C0]
	0x03D1F8EC LDP X30, X19, [X31], #0x10
	0x03D1F8F0 BR X0
	0x03D1F8F4 SUB X31, X31, 0x30
	0x03D1F8F8 STR X30, [X31 + 0x10]
	0x03D1F8FC STP X20, X19, [X31 + 0x20]
	0x03D1F900 ADRP X19, 0x6C8000
	0x03D1F904 STR X0, [X31]
	0x03D1F908 STR W1, [X31 + 0x8]
	0x03D1F90C ADRP X20, 0x3FD000
	0x03D1F910 LDRB W8, [X19 + 0x9C8]
	0x03D1F914 LDR X20, [X20 + 0x820]
	0x03D1F918 TBNZ X8, 0x0, 0x3D1F930
	0x03D1F91C ADRP X0, 0x3FD000
	0x03D1F920 LDR X0, [X0 + 0x820]
	0x03D1F924 BL 0x1C16CF4
	0x03D1F928 MOVZ W8, 0x1
	0x03D1F92C STRB W8, [X19 + 0x9C8]
	0x03D1F930 LDR X0, [X20]
	0x03D1F934 LDR W8, [X0 + 0xE0]
	0x03D1F938 CBNZ W8, 0x3D1F940
	0x03D1F93C BL 0x1C16DFC
	0x03D1F940 ADRP X19, 0x6C8000
	0x03D1F944 LDR X8, [X19 + 0xA38]
	0x03D1F948 CBNZ X8, 0x3D1F960
	0x03D1F94C ADRP X0, 0xFFFFFFFFFCDFE000
	0x03D1F950 ADD X0, X0, 0x891
	0x03D1F954 BL 0x1C16CB8
	0x03D1F958 MOV X8, X0
	0x03D1F95C STR X0, [X19 + 0xA38]
	0x03D1F960 ADD X0, X31, 0x0
	0x03D1F964 BLR X8
	0x03D1F968 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x6C9000
	010 Move X24, 0x3FE000
	011 Move W8, [X20+2404]
	012 Move X24, [X24+2080]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x3D5000
	019 Move X0, [X0+3368]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FE000
	022 Move X0, [X0+2080]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2404], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x3D5000
	034 Move X20, [X8]
	035 Move X25, [X25+3368]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X0, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Call 0x1C25138
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X20, X0
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Move X25, [X31+72]
	070 Return 
	071 Move X0, X22
	072 Move X1, X23
	073 Call 0x1C181E0

Method: System.Void add_EngineUpdate(System.Action value)

Disassembly:
	0x03D1F96C LDR X30, [X31 + 0x10]
	0x03D1F970 ADD X31, X31, 0x30
	0x03D1F974 RET
	0x03D1F978 STR X30, [X31 - 0x20]!
	0x03D1F97C STP X20, X19, [X31 + 0x10]
	0x03D1F980 ADRP X20, 0x6C8000
	0x03D1F984 LDR X1, [X20 + 0xA38]
	0x03D1F988 MOV X19, X0
	0x03D1F98C CBNZ X1, 0x3D1F9A4
	0x03D1F990 ADRP X0, 0xFFFFFFFFFCDFE000
	0x03D1F994 ADD X0, X0, 0x891
	0x03D1F998 BL 0x1C16CB8
	0x03D1F99C MOV X1, X0
	0x03D1F9A0 STR X0, [X20 + 0xA38]
	0x03D1F9A4 MOV X0, X19
	0x03D1F9A8 LDP X20, X19, [X31 + 0x10]
	0x03D1F9AC LDR X30, [X31], #0x20
	0x03D1F9B0 BR X1
	0x03D1F9B4 STP X30, X21, [X31 - 0x20]!
	0x03D1F9B8 STP X20, X19, [X31 + 0x10]
	0x03D1F9BC ADRP X21, 0x6C8000
	0x03D1F9C0 LDR X2, [X21 + 0x9D0]
	0x03D1F9C4 MOV W19, W1
	0x03D1F9C8 MOV X20, X0
	0x03D1F9CC CBNZ X2, 0x3D1F9E4
	0x03D1F9D0 ADRP X0, 0xFFFFFFFFFCDFE000
	0x03D1F9D4 ADD X0, X0, 0x7D1
	0x03D1F9D8 BL 0x1C16CB8
	0x03D1F9DC MOV X2, X0
	0x03D1F9E0 STR X0, [X21 + 0x9D0]
	0x03D1F9E4 MOV X0, X20
	0x03D1F9E8 MOV W1, W19
	0x03D1F9EC LDP X20, X19, [X31 + 0x10]
	0x03D1F9F0 LDP X30, X21, [X31], #0x20
	0x03D1F9F4 BR X2
	0x03D1F9F8 STP X30, X19, [X31 - 0x10]!
	0x03D1F9FC ADRP X19, 0x6C8000
	0x03D1FA00 LDR X0, [X19 + 0x9D8]
	0x03D1FA04 CBNZ X0, 0x3D1FA18
	0x03D1FA08 ADRP X0, 0xFFFFFFFFFCDFE000
	0x03D1FA0C ADD X0, X0, 0x821
	0x03D1FA10 BL 0x1C16CB8
	0x03D1FA14 STR X0, [X19 + 0x9D8]
	0x03D1FA18 LDP X30, X19, [X31], #0x10
	0x03D1FA1C BR X0
	0x03D1FA20 STP X30, X19, [X31 - 0x10]!
	0x03D1FA24 ADRP X19, 0x6C8000
	0x03D1FA28 LDR X0, [X19 + 0x9E0]
	0x03D1FA2C CBNZ X0, 0x3D1FA40
	0x03D1FA30 ADRP X0, 0xFFFFFFFFFCDFE000
	0x03D1FA34 ADD X0, X0, 0x85C
	0x03D1FA38 BL 0x1C16CB8
	0x03D1FA3C STR X0, [X19 + 0x9E0]
	0x03D1FA40 LDP X30, X19, [X31], #0x10
	0x03D1FA44 BR X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x6C9000
	008 Move X22, 0x3FE000
	009 Move W8, [X20+2405]
	010 Move X22, [X22+2080]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3D6000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x3FE000
	020 Move X0, [X0+2080]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2405], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X22]
	030 Move X8, [X0+184]
	031 Move X23, 0x3D6000
	032 Move X20, [X8+8]
	033 Move X23, [X23+3696]
	034 Move X0, X20
	035 Move X1, X19
	036 Move X2, X31
	037 Call Delegate.Combine, X0, X1
	038 Move X21, X0
	039 Compare X0, 0
	040 JumpIfEqual {44}
	041 Move X1, [X23]
	042 Move X8, [X21]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X8, [X0+184]
	051 Move X1, X21
	052 Move X2, X20
	053 Add X0, X8, 8
	054 Call 0x1C25138
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, X0
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Return 
	064 Move X0, X21
	065 Call 0x1C181E0

Method: System.Void remove_EngineUpdate(System.Action value)

Disassembly:
	0x03D1FA48 STR X30, [X31 - 0x20]!
	0x03D1FA4C STP X20, X19, [X31 + 0x10]
	0x03D1FA50 ADRP X20, 0x6C8000
	0x03D1FA54 LDR X1, [X20 + 0x9E8]
	0x03D1FA58 MOV W19, W0
	0x03D1FA5C CBNZ X1, 0x3D1FA74
	0x03D1FA60 ADRP X0, 0xFFFFFFFFFCDD8000
	0x03D1FA64 ADD X0, X0, 0xD97
	0x03D1FA68 BL 0x1C16CB8
	0x03D1FA6C MOV X1, X0
	0x03D1FA70 STR X0, [X20 + 0x9E8]
	0x03D1FA74 MOV W0, W19
	0x03D1FA78 LDP X20, X19, [X31 + 0x10]
	0x03D1FA7C LDR X30, [X31], #0x20
	0x03D1FA80 BR X1
	0x03D1FA84 STR X30, [X31 - 0x20]!
	0x03D1FA88 STP X20, X19, [X31 + 0x10]
	0x03D1FA8C ADRP X20, 0x6C8000
	0x03D1FA90 LDR X1, [X20 + 0x9F0]
	0x03D1FA94 MOV W19, W0
	0x03D1FA98 CBNZ X1, 0x3D1FAB0
	0x03D1FA9C ADRP X0, 0xFFFFFFFFFCE0A000
	0x03D1FAA0 ADD X0, X0, 0x382
	0x03D1FAA4 BL 0x1C16CB8
	0x03D1FAA8 MOV X1, X0
	0x03D1FAAC STR X0, [X20 + 0x9F0]
	0x03D1FAB0 MOV W0, W19
	0x03D1FAB4 LDP X20, X19, [X31 + 0x10]
	0x03D1FAB8 LDR X30, [X31], #0x20
	0x03D1FABC BR X1
	0x03D1FAC0 STP X30, X19, [X31 - 0x10]!
	0x03D1FAC4 ADRP X19, 0x6C8000
	0x03D1FAC8 LDR X0, [X19 + 0x9F8]
	0x03D1FACC CBNZ X0, 0x3D1FAE0
	0x03D1FAD0 ADRP X0, 0xFFFFFFFFFCDEA000
	0x03D1FAD4 ADD X0, X0, 0xF37
	0x03D1FAD8 BL 0x1C16CB8
	0x03D1FADC STR X0, [X19 + 0x9F8]
	0x03D1FAE0 LDP X30, X19, [X31], #0x10
	0x03D1FAE4 BR X0
	0x03D1FAE8 SUB X31, X31, 0x30
	0x03D1FAEC STR X30, [X31 + 0x10]
	0x03D1FAF0 STP X20, X19, [X31 + 0x20]
	0x03D1FAF4 ADRP X20, 0x6C8000
	0x03D1FAF8 ADRP X19, 0x3FD000
	0x03D1FAFC LDRB W8, [X20 + 0xA00]
	0x03D1FB00 LDR X19, [X19 + 0x820]
	0x03D1FB04 TBNZ X8, 0x0, 0x3D1FB1C
	0x03D1FB08 ADRP X0, 0x3FD000
	0x03D1FB0C LDR X0, [X0 + 0x820]
	0x03D1FB10 BL 0x1C16CF4
	0x03D1FB14 MOVZ W8, 0x1
	0x03D1FB18 STRB W8, [X20 + 0xA00]
	0x03D1FB1C LDR X0, [X19]
	0x03D1FB20 STP X31, X31, [X31]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x6C9000
	008 Move X22, 0x3FE000
	009 Move W8, [X20+2406]
	010 Move X22, [X22+2080]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3D6000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x3FE000
	020 Move X0, [X0+2080]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2406], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X22]
	030 Move X8, [X0+184]
	031 Move X23, 0x3D6000
	032 Move X20, [X8+8]
	033 Move X23, [X23+3696]
	034 Move X0, X20
	035 Move X1, X19
	036 Move X2, X31
	037 Call Delegate.Remove, X0, X1
	038 Move X21, X0
	039 Compare X0, 0
	040 JumpIfEqual {44}
	041 Move X1, [X23]
	042 Move X8, [X21]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X8, [X0+184]
	051 Move X1, X21
	052 Move X2, X20
	053 Add X0, X8, 8
	054 Call 0x1C25138
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, X0
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Return 
	064 Move X0, X21
	065 Call 0x1C181E0

Method: System.Void add_FlushPendingResources(System.Action value)

Disassembly:
	0x03D1FB24 LDR W8, [X0 + 0xE0]
	0x03D1FB28 CBNZ W8, 0x3D1FB30
	0x03D1FB2C BL 0x1C16DFC
	0x03D1FB30 ADRP X19, 0x6C8000
	0x03D1FB34 LDR X8, [X19 + 0xA40]
	0x03D1FB38 CBNZ X8, 0x3D1FB50
	0x03D1FB3C ADRP X0, 0xFFFFFFFFFCDDE000
	0x03D1FB40 ADD X0, X0, 0xD34
	0x03D1FB44 BL 0x1C16CB8
	0x03D1FB48 MOV X8, X0
	0x03D1FB4C STR X0, [X19 + 0xA40]
	0x03D1FB50 ADD X0, X31, 0x0
	0x03D1FB54 BLR X8
	0x03D1FB58 LDP X0, X1, [X31]
	0x03D1FB5C LDP X20, X19, [X31 + 0x20]
	0x03D1FB60 LDR X30, [X31 + 0x10]
	0x03D1FB64 ADD X31, X31, 0x30
	0x03D1FB68 RET
	0x03D1FB6C STR X30, [X31 - 0x20]!
	0x03D1FB70 STP X20, X19, [X31 + 0x10]
	0x03D1FB74 ADRP X20, 0x6C8000
	0x03D1FB78 LDR X1, [X20 + 0xA40]
	0x03D1FB7C MOV X19, X0
	0x03D1FB80 CBNZ X1, 0x3D1FB98
	0x03D1FB84 ADRP X0, 0xFFFFFFFFFCDDE000
	0x03D1FB88 ADD X0, X0, 0xD34
	0x03D1FB8C BL 0x1C16CB8
	0x03D1FB90 MOV X1, X0
	0x03D1FB94 STR X0, [X20 + 0xA40]
	0x03D1FB98 MOV X0, X19
	0x03D1FB9C LDP X20, X19, [X31 + 0x10]
	0x03D1FBA0 LDR X30, [X31], #0x20
	0x03D1FBA4 BR X1
	0x03D1FBA8 STP X30, X19, [X31 - 0x10]!
	0x03D1FBAC ADRP X19, 0x6C8000
	0x03D1FBB0 LDR X0, [X19 + 0xA08]
	0x03D1FBB4 CBNZ X0, 0x3D1FBC8
	0x03D1FBB8 ADRP X0, 0xFFFFFFFFFCDD8000
	0x03D1FBBC ADD X0, X0, 0xDD9
	0x03D1FBC0 BL 0x1C16CB8
	0x03D1FBC4 STR X0, [X19 + 0xA08]
	0x03D1FBC8 LDP X30, X19, [X31], #0x10
	0x03D1FBCC BR X0
	0x03D1FBD0 STP X30, X19, [X31 - 0x10]!
	0x03D1FBD4 ADRP X19, 0x6C8000
	0x03D1FBD8 LDR X0, [X19 + 0xA10]
	0x03D1FBDC CBNZ X0, 0x3D1FBF0
	0x03D1FBE0 ADRP X0, 0xFFFFFFFFFCE06000
	0x03D1FBE4 ADD X0, X0, 0x763
	0x03D1FBE8 BL 0x1C16CB8
	0x03D1FBEC STR X0, [X19 + 0xA10]
	0x03D1FBF0 LDP X30, X19, [X31], #0x10
	0x03D1FBF4 BR X0
	0x03D1FBF8 STR X30, [X31 - 0x20]!
	0x03D1FBFC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x6C9000
	008 Move X22, 0x3FE000
	009 Move W8, [X20+2407]
	010 Move X22, [X22+2080]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3D6000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x3FE000
	020 Move X0, [X0+2080]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2407], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X22]
	030 Move X8, [X0+184]
	031 Move X23, 0x3D6000
	032 Move X20, [X8+16]
	033 Move X23, [X23+3696]
	034 Move X0, X20
	035 Move X1, X19
	036 Move X2, X31
	037 Call Delegate.Combine, X0, X1
	038 Move X21, X0
	039 Compare X0, 0
	040 JumpIfEqual {44}
	041 Move X1, [X23]
	042 Move X8, [X21]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X8, [X0+184]
	051 Move X1, X21
	052 Move X2, X20
	053 Add X0, X8, 16
	054 Call 0x1C25138
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, X0
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Return 
	064 Move X0, X21
	065 Call 0x1C181E0

Method: System.Void remove_FlushPendingResources(System.Action value)

Disassembly:
	0x03D1FC00 ADRP X20, 0x6C8000
	0x03D1FC04 LDR X1, [X20 + 0xA18]
	0x03D1FC08 MOV W19, W0
	0x03D1FC0C CBNZ X1, 0x3D1FC24
	0x03D1FC10 ADRP X0, 0xFFFFFFFFFCDF2000
	0x03D1FC14 ADD X0, X0, 0x92F
	0x03D1FC18 BL 0x1C16CB8
	0x03D1FC1C MOV X1, X0
	0x03D1FC20 STR X0, [X20 + 0xA18]
	0x03D1FC24 AND W0, W19, 0x1
	0x03D1FC28 LDP X20, X19, [X31 + 0x10]
	0x03D1FC2C LDR X30, [X31], #0x20
	0x03D1FC30 BR X1
	0x03D1FC34 SUB X31, X31, 0x60
	0x03D1FC38 STP X30, X21, [X31 + 0x40]
	0x03D1FC3C STP X20, X19, [X31 + 0x50]
	0x03D1FC40 ADRP X21, 0x6C8000
	0x03D1FC44 ADRP X20, 0x3FD000
	0x03D1FC48 MOV X19, X8
	0x03D1FC4C LDRB W8, [X21 + 0xA20]
	0x03D1FC50 LDR X20, [X20 + 0x820]
	0x03D1FC54 TBNZ X8, 0x0, 0x3D1FC6C
	0x03D1FC58 ADRP X0, 0x3FD000
	0x03D1FC5C LDR X0, [X0 + 0x820]
	0x03D1FC60 BL 0x1C16CF4
	0x03D1FC64 MOVZ W8, 0x1
	0x03D1FC68 STRB W8, [X21 + 0xA20]
	0x03D1FC6C LDR X0, [X20]
	0x03D1FC70 MOVI V0.2D, 0x0
	0x03D1FC74 STP V0, V0, [X31 + 0x20]
	0x03D1FC78 STP V0, V0, [X31]
	0x03D1FC7C LDR W8, [X0 + 0xE0]
	0x03D1FC80 CBNZ W8, 0x3D1FC88
	0x03D1FC84 BL 0x1C16DFC
	0x03D1FC88 ADRP X20, 0x6C8000
	0x03D1FC8C LDR X8, [X20 + 0xA48]
	0x03D1FC90 CBNZ X8, 0x3D1FCA8
	0x03D1FC94 ADRP X0, 0xFFFFFFFFFCDE6000
	0x03D1FC98 ADD X0, X0, 0x98B
	0x03D1FC9C BL 0x1C16CB8
	0x03D1FCA0 MOV X8, X0
	0x03D1FCA4 STR X0, [X20 + 0xA48]
	0x03D1FCA8 ADD X0, X31, 0x0
	0x03D1FCAC BLR X8
	0x03D1FCB0 LDP V1, V0, [X31 + 0x20]
	0x03D1FCB4 LDP V3, V2, [X31]
	0x03D1FCB8 LDP X30, X21, [X31 + 0x40]
	0x03D1FCBC STP V1, V0, [X19 + 0x20]
	0x03D1FCC0 STP V3, V2, [X19]
	0x03D1FCC4 LDP X20, X19, [X31 + 0x50]
	0x03D1FCC8 ADD X31, X31, 0x60
	0x03D1FCCC RET
	0x03D1FCD0 STR X30, [X31 - 0x20]!
	0x03D1FCD4 STP X20, X19, [X31 + 0x10]
	0x03D1FCD8 ADRP X20, 0x6C8000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x6C9000
	008 Move X22, 0x3FE000
	009 Move W8, [X20+2408]
	010 Move X22, [X22+2080]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3D6000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x3FE000
	020 Move X0, [X0+2080]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2408], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X22]
	030 Move X8, [X0+184]
	031 Move X23, 0x3D6000
	032 Move X20, [X8+16]
	033 Move X23, [X23+3696]
	034 Move X0, X20
	035 Move X1, X19
	036 Move X2, X31
	037 Call Delegate.Remove, X0, X1
	038 Move X21, X0
	039 Compare X0, 0
	040 JumpIfEqual {44}
	041 Move X1, [X23]
	042 Move X8, [X21]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X8, [X0+184]
	051 Move X1, X21
	052 Move X2, X20
	053 Add X0, X8, 16
	054 Call 0x1C25138
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, X0
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Return 
	064 Move X0, X21
	065 Call 0x1C181E0

Method: System.Void add_RegisterIntermediateRenderers(System.Action`1<UnityEngine.Camera> value)

Disassembly:
	0x03D1FCDC LDR X1, [X20 + 0xA48]
	0x03D1FCE0 MOV X19, X0
	0x03D1FCE4 CBNZ X1, 0x3D1FCFC
	0x03D1FCE8 ADRP X0, 0xFFFFFFFFFCDE6000
	0x03D1FCEC ADD X0, X0, 0x98B
	0x03D1FCF0 BL 0x1C16CB8
	0x03D1FCF4 MOV X1, X0
	0x03D1FCF8 STR X0, [X20 + 0xA48]
	0x03D1FCFC MOV X0, X19
	0x03D1FD00 LDP X20, X19, [X31 + 0x10]
	0x03D1FD04 LDR X30, [X31], #0x20
	0x03D1FD08 BR X1
	0x03D1FD0C STP X30, X21, [X31 - 0x20]!
	0x03D1FD10 STP X20, X19, [X31 + 0x10]
	0x03D1FD14 ADRP X20, 0x6C8000
	0x03D1FD18 ADRP X21, 0x445000
	0x03D1FD1C ADRP X19, 0x3FD000
	0x03D1FD20 LDRB W8, [X20 + 0xA21]
	0x03D1FD24 LDR X21, [X21 + 0x3F8]
	0x03D1FD28 LDR X19, [X19 + 0x820]
	0x03D1FD2C TBNZ X8, 0x0, 0x3D1FD50
	0x03D1FD30 ADRP X0, 0x3FD000
	0x03D1FD34 LDR X0, [X0 + 0x820]
	0x03D1FD38 BL 0x1C16CF4
	0x03D1FD3C ADRP X0, 0x445000
	0x03D1FD40 LDR X0, [X0 + 0x3F8]
	0x03D1FD44 BL 0x1C16CF4
	0x03D1FD48 MOVZ W8, 0x1
	0x03D1FD4C STRB W8, [X20 + 0xA21]
	0x03D1FD50 LDR X0, [X21]
	0x03D1FD54 MOVZ W1, 0x1
	0x03D1FD58 MOV W2, W31
	0x03D1FD5C MOV W3, W31
	0x03D1FD60 MOV X4, X31
	0x03D1FD64 BL 0x3BFE7FC
	0x03D1FD68 LDR X8, [X19]
	0x03D1FD6C LDP X20, X19, [X31 + 0x10]
	0x03D1FD70 LDR X8, [X8 + 0xB8]
	0x03D1FD74 STR X0, [X8 + 0x38]
	0x03D1FD78 LDP X30, X21, [X31], #0x20
	0x03D1FD7C RET
	0x03D1FD80 SUB X31, X31, 0x30
	0x03D1FD84 STP X30, X21, [X31 + 0x10]
	0x03D1FD88 STP X20, X19, [X31 + 0x20]
	0x03D1FD8C ADRP X21, 0x6C8000
	0x03D1FD90 LDR X8, [X21 + 0xA50]
	0x03D1FD94 MOV W19, W1
	0x03D1FD98 MOV X20, X0
	0x03D1FD9C STP X31, X31, [X31]
	0x03D1FDA0 CBNZ X8, 0x3D1FDB8
	0x03D1FDA4 ADRP X0, 0xFFFFFFFFFCDD4000
	0x03D1FDA8 ADD X0, X0, 0xC2E
	0x03D1FDAC BL 0x1C16CB8
	0x03D1FDB0 MOV X8, X0
	0x03D1FDB4 STR X0, [X21 + 0xA50]
	0x03D1FDB8 ADD X2, X31, 0x0
	0x03D1FDBC MOV X0, X20
	0x03D1FDC0 MOV W1, W19
	0x03D1FDC4 BLR X8
	0x03D1FDC8 LDP X0, X1, [X31]
	0x03D1FDCC LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x6C9000
	010 Move X24, 0x3FE000
	011 Move W8, [X20+2409]
	012 Move X24, [X24+2080]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x446000
	019 Move X0, [X0+1000]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FE000
	022 Move X0, [X0+2080]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2409], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x446000
	034 Move X20, [X8+24]
	035 Move X25, [X25+1000]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 24
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_RegisterIntermediateRenderers(System.Action`1<UnityEngine.Camera> value)

Disassembly:
	0x03D1FDD0 LDP X30, X21, [X31 + 0x10]
	0x03D1FDD4 ADD X31, X31, 0x30
	0x03D1FDD8 RET
	0x03D1FDDC STR X30, [X31 - 0x30]!
	0x03D1FDE0 STP X22, X21, [X31 + 0x10]
	0x03D1FDE4 STP X20, X19, [X31 + 0x20]
	0x03D1FDE8 ADRP X22, 0x6C8000
	0x03D1FDEC LDR X3, [X22 + 0xA50]
	0x03D1FDF0 MOV X19, X2
	0x03D1FDF4 MOV W20, W1
	0x03D1FDF8 MOV X21, X0
	0x03D1FDFC CBNZ X3, 0x3D1FE14
	0x03D1FE00 ADRP X0, 0xFFFFFFFFFCDD4000
	0x03D1FE04 ADD X0, X0, 0xC2E
	0x03D1FE08 BL 0x1C16CB8
	0x03D1FE0C MOV X3, X0
	0x03D1FE10 STR X0, [X22 + 0xA50]
	0x03D1FE14 MOV X0, X21
	0x03D1FE18 MOV W1, W20
	0x03D1FE1C MOV X2, X19
	0x03D1FE20 LDP X20, X19, [X31 + 0x20]
	0x03D1FE24 LDP X22, X21, [X31 + 0x10]
	0x03D1FE28 LDR X30, [X31], #0x30
	0x03D1FE2C BR X3
	0x03D1FE30 SUB X31, X31, 0x30
	0x03D1FE34 STP X30, X21, [X31 + 0x10]
	0x03D1FE38 STP X20, X19, [X31 + 0x20]
	0x03D1FE3C ADRP X21, 0x6C8000
	0x03D1FE40 LDR X8, [X21 + 0xA58]
	0x03D1FE44 MOV W19, W1
	0x03D1FE48 MOV X20, X0
	0x03D1FE4C STP X31, X31, [X31]
	0x03D1FE50 CBNZ X8, 0x3D1FE68
	0x03D1FE54 ADRP X0, 0xFFFFFFFFFCDD2000
	0x03D1FE58 ADD X0, X0, 0xA76
	0x03D1FE5C BL 0x1C16CB8
	0x03D1FE60 MOV X8, X0
	0x03D1FE64 STR X0, [X21 + 0xA58]
	0x03D1FE68 ADD X2, X31, 0x0
	0x03D1FE6C MOV X0, X20
	0x03D1FE70 MOV W1, W19
	0x03D1FE74 BLR X8
	0x03D1FE78 LDP X0, X1, [X31]
	0x03D1FE7C LDP X20, X19, [X31 + 0x20]
	0x03D1FE80 LDP X30, X21, [X31 + 0x10]
	0x03D1FE84 ADD X31, X31, 0x30
	0x03D1FE88 RET
	0x03D1FE8C STR X30, [X31 - 0x30]!
	0x03D1FE90 STP X22, X21, [X31 + 0x10]
	0x03D1FE94 STP X20, X19, [X31 + 0x20]
	0x03D1FE98 ADRP X22, 0x6C8000
	0x03D1FE9C LDR X3, [X22 + 0xA58]
	0x03D1FEA0 MOV X19, X2
	0x03D1FEA4 MOV W20, W1
	0x03D1FEA8 MOV X21, X0
	0x03D1FEAC CBNZ X3, 0x3D1FEC4
	0x03D1FEB0 ADRP X0, 0xFFFFFFFFFCDD2000
	0x03D1FEB4 ADD X0, X0, 0xA76
	0x03D1FEB8 BL 0x1C16CB8
	0x03D1FEBC MOV X3, X0
	0x03D1FEC0 STR X0, [X22 + 0xA58]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x6C9000
	010 Move X24, 0x3FE000
	011 Move W8, [X20+2410]
	012 Move X24, [X24+2080]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x446000
	019 Move X0, [X0+1000]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FE000
	022 Move X0, [X0+2080]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2410], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x446000
	034 Move X20, [X8+24]
	035 Move X25, [X25+1000]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 24
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void add_RenderNodeExecute(System.Action`1<System.IntPtr> value)

Disassembly:
	0x03D1FEC4 MOV X0, X21
	0x03D1FEC8 MOV W1, W20
	0x03D1FECC MOV X2, X19
	0x03D1FED0 LDP X20, X19, [X31 + 0x20]
	0x03D1FED4 LDP X22, X21, [X31 + 0x10]
	0x03D1FED8 LDR X30, [X31], #0x30
	0x03D1FEDC BR X3
	0x03D1FEE0 SUB X31, X31, 0x30
	0x03D1FEE4 STP X30, X21, [X31 + 0x10]
	0x03D1FEE8 STP X20, X19, [X31 + 0x20]
	0x03D1FEEC ADRP X21, 0x6C8000
	0x03D1FEF0 LDR X8, [X21 + 0xA60]
	0x03D1FEF4 MOV W19, W1
	0x03D1FEF8 MOV X20, X0
	0x03D1FEFC STP X31, X31, [X31]
	0x03D1FF00 CBNZ X8, 0x3D1FF18
	0x03D1FF04 ADRP X0, 0xFFFFFFFFFCDD2000
	0x03D1FF08 ADD X0, X0, 0xAF2
	0x03D1FF0C BL 0x1C16CB8
	0x03D1FF10 MOV X8, X0
	0x03D1FF14 STR X0, [X21 + 0xA60]
	0x03D1FF18 ADD X2, X31, 0x0
	0x03D1FF1C MOV X0, X20
	0x03D1FF20 MOV W1, W19
	0x03D1FF24 BLR X8
	0x03D1FF28 LDP X0, X1, [X31]
	0x03D1FF2C LDP X20, X19, [X31 + 0x20]
	0x03D1FF30 LDP X30, X21, [X31 + 0x10]
	0x03D1FF34 ADD X31, X31, 0x30
	0x03D1FF38 RET
	0x03D1FF3C STR X30, [X31 - 0x30]!
	0x03D1FF40 STP X22, X21, [X31 + 0x10]
	0x03D1FF44 STP X20, X19, [X31 + 0x20]
	0x03D1FF48 ADRP X22, 0x6C8000
	0x03D1FF4C LDR X3, [X22 + 0xA60]
	0x03D1FF50 MOV X19, X2
	0x03D1FF54 MOV W20, W1
	0x03D1FF58 MOV X21, X0
	0x03D1FF5C CBNZ X3, 0x3D1FF74
	0x03D1FF60 ADRP X0, 0xFFFFFFFFFCDD2000
	0x03D1FF64 ADD X0, X0, 0xAF2
	0x03D1FF68 BL 0x1C16CB8
	0x03D1FF6C MOV X3, X0
	0x03D1FF70 STR X0, [X22 + 0xA60]
	0x03D1FF74 MOV X0, X21
	0x03D1FF78 MOV W1, W20
	0x03D1FF7C MOV X2, X19
	0x03D1FF80 LDP X20, X19, [X31 + 0x20]
	0x03D1FF84 LDP X22, X21, [X31 + 0x10]
	0x03D1FF88 LDR X30, [X31], #0x30
	0x03D1FF8C BR X3
	0x03D1FF90 STR X30, [X31 - 0x60]!
	0x03D1FF94 STP X28, X27, [X31 + 0x10]
	0x03D1FF98 STP X26, X25, [X31 + 0x20]
	0x03D1FF9C STP X24, X23, [X31 + 0x30]
	0x03D1FFA0 STP X22, X21, [X31 + 0x40]
	0x03D1FFA4 STP X20, X19, [X31 + 0x50]
	0x03D1FFA8 ADRP X28, 0x6C8000
	0x03D1FFAC ADRP X27, 0x445000
	0x03D1FFB0 ADRP X25, 0x445000
	0x03D1FFB4 ADRP X26, 0x3D4000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x6C9000
	010 Move X24, 0x3FE000
	011 Move W8, [X20+2411]
	012 Move X24, [X24+2080]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x446000
	019 Move X0, [X0+1008]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FE000
	022 Move X0, [X0+2080]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2411], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x446000
	034 Move X20, [X8+40]
	035 Move X25, [X25+1008]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 40
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_RenderNodeExecute(System.Action`1<System.IntPtr> value)

Disassembly:
	0x03D1FFB8 LDRB W8, [X28 + 0xA68]
	0x03D1FFBC LDR X27, [X27 + 0x400]
	0x03D1FFC0 LDR X25, [X25 + 0x408]
	0x03D1FFC4 LDR X26, [X26 + 0xA28]
	0x03D1FFC8 MOV W20, W3
	0x03D1FFCC MOV X21, X2
	0x03D1FFD0 MOV X22, X1
	0x03D1FFD4 MOV X19, X0
	0x03D1FFD8 UBFM X24, X1, 0x20, 0x3F
	0x03D1FFDC UBFM X23, X2, 0x20, 0x3F
	0x03D1FFE0 TBNZ X8, 0x0, 0x3D2001C
	0x03D1FFE4 ADRP X0, 0x3D4000
	0x03D1FFE8 LDR X0, [X0 + 0xA28]
	0x03D1FFEC BL 0x1C16CF4
	0x03D1FFF0 ADRP X0, 0x445000
	0x03D1FFF4 LDR X0, [X0 + 0x408]
	0x03D1FFF8 BL 0x1C16CF4
	0x03D1FFFC ADRP X0, 0x445000
	0x03D20000 LDR X0, [X0 + 0x400]
	0x03D20004 BL 0x1C16CF4
	0x03D20008 ADRP X0, 0x3FD000
	0x03D2000C LDR X0, [X0 + 0x240]
	0x03D20010 BL 0x1C16CF4
	0x03D20014 MOVZ W8, 0x1
	0x03D20018 STRB W8, [X28 + 0xA68]
	0x03D2001C LDR X0, [X27]
	0x03D20020 ADRP X27, 0x3FD000
	0x03D20024 LDR X27, [X27 + 0x240]
	0x03D20028 BL 0x1C16F10
	0x03D2002C LDR X1, [X25]
	0x03D20030 MOV X25, X0
	0x03D20034 BL 0x301B7C4
	0x03D20038 MOV X0, X19
	0x03D2003C MOV X1, X31
	0x03D20040 STR X25, [X19 + 0x38]
	0x03D20044 BL 0x33BDD8C
	0x03D20048 LDR X0, [X26]
	0x03D2004C CMP W22, 0x0
	0x03D20050 CSET W8, GT
	0x03D20054 CMP W22, W21
	0x03D20058 CSET W9, LE
	0x03D2005C CMP W24, 0x0
	0x03D20060 LDR W10, [X0 + 0xE0]
	0x03D20064 AND W8, W8, W9, 0x0
	0x03D20068 CSET W9, GT
	0x03D2006C CMP W24, W23
	0x03D20070 CSET W11, LE
	0x03D20074 AND W8, W9, W8, 0x0
	0x03D20078 AND W25, W11, W8, 0x0
	0x03D2007C CBNZ W10, 0x3D20084
	0x03D20080 BL 0x1C16DFC
	0x03D20084 MOV W0, W25
	0x03D20088 MOV X1, X31
	0x03D2008C BL 0x3C06E58
	0x03D20090 LDR X0, [X27]
	0x03D20094 LDR W8, [X0 + 0xE0]
	0x03D20098 CBNZ W8, 0x3D200A0
	0x03D2009C BL 0x1C16DFC
	0x03D200A0 MOV W0, W22
	0x03D200A4 MOV X1, X31
	0x03D200A8 BL 0x3DE1100

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x6C9000
	010 Move X24, 0x3FE000
	011 Move W8, [X20+2412]
	012 Move X24, [X24+2080]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x446000
	019 Move X0, [X0+1008]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FE000
	022 Move X0, [X0+2080]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2412], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x445000
	034 Move X20, [X8+40]
	035 Move X25, [X25+1008]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 40
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void RaiseGraphicsResourcesRecreate(System.Boolean recreate)

Disassembly:
	0x03D200AC CMP W0, W22
	0x03D200B0 B.NE 0x3D20124
	0x03D200B4 LDR X0, [X27]
	0x03D200B8 LDR W8, [X0 + 0xE0]
	0x03D200BC CBNZ W8, 0x3D200C4
	0x03D200C0 BL 0x1C16DFC
	0x03D200C4 MOV W0, W24
	0x03D200C8 MOV X1, X31
	0x03D200CC BL 0x3DE1100
	0x03D200D0 CMP W0, W24
	0x03D200D4 B.NE 0x3D20124
	0x03D200D8 LDR X0, [X27]
	0x03D200DC LDR W8, [X0 + 0xE0]
	0x03D200E0 CBNZ W8, 0x3D200E8
	0x03D200E4 BL 0x1C16DFC
	0x03D200E8 MOV W0, W21
	0x03D200EC MOV X1, X31
	0x03D200F0 BL 0x3DE1100
	0x03D200F4 CMP W0, W21
	0x03D200F8 B.NE 0x3D20124
	0x03D200FC LDR X0, [X27]
	0x03D20100 LDR W8, [X0 + 0xE0]
	0x03D20104 CBNZ W8, 0x3D2010C
	0x03D20108 BL 0x1C16DFC
	0x03D2010C MOV W0, W23
	0x03D20110 MOV X1, X31
	0x03D20114 BL 0x3DE1100
	0x03D20118 CMP W0, W23
	0x03D2011C CSET W23, EQ
	0x03D20120 B 0x3D20128
	0x03D20124 MOV W23, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C8000
	006 Move X20, 0x3FD000
	007 Move W8, [X21+2413]
	008 Move X20, [X20+2080]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3FD000
	015 Move X0, [X0+2080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2413], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8]
	027 Compare X8, 0
	028 JumpIfEqual {38}
	029 Move X3, [X8+24]
	030 Move X0, [X8+64]
	031 Move X2, [X8+40]
	032 And W1, W19, 1
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X3
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.Void RaiseEngineUpdate()

Disassembly:
	0x03D20128 LDR X0, [X26]
	0x03D2012C LDR W8, [X0 + 0xE0]
	0x03D20130 CBNZ W8, 0x3D20138
	0x03D20134 BL 0x1C16DFC
	0x03D20138 MOV W0, W23
	0x03D2013C MOV X1, X31
	0x03D20140 BL 0x3C06E58
	0x03D20144 ORN W8, W31, W20, 0x0
	0x03D20148 UBFM W0, W8, 0x1F, 0x1F
	0x03D2014C MOV X1, X31
	0x03D20150 BL 0x3C06E58
	0x03D20154 LDR X0, [X19 + 0x38]
	0x03D20158 MOV X1, X22
	0x03D2015C MOV X2, X21
	0x03D20160 STP X22, X21, [X19 + 0x10]
	0x03D20164 STR W20, [X19 + 0x28]
	0x03D20168 BL 0x3D201A8
	0x03D2016C LDR X0, [X19 + 0x38]
	0x03D20170 MOV W1, W20
	0x03D20174 BL 0x3D203D4
	0x03D20178 STR X0, [X19 + 0x20]
	0x03D2017C UBFM X0, X0, 0x20, 0x3F
	0x03D20180 MOV W1, W20
	0x03D20184 BL 0x3D204D8
	0x03D20188 STR X0, [X19 + 0x30]
	0x03D2018C LDP X20, X19, [X31 + 0x50]
	0x03D20190 LDP X22, X21, [X31 + 0x40]
	0x03D20194 LDP X24, X23, [X31 + 0x30]
	0x03D20198 LDP X26, X25, [X31 + 0x20]
	0x03D2019C LDP X28, X27, [X31 + 0x10]
	0x03D201A0 LDR X30, [X31], #0x60
	0x03D201A4 RET
	0x03D201A8 STP X29, X30, [X31 - 0x60]!
	0x03D201AC STP X28, X27, [X31 + 0x10]
	0x03D201B0 STP X26, X25, [X31 + 0x20]
	0x03D201B4 STP X24, X23, [X31 + 0x30]
	0x03D201B8 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X19, 0x3FD000
	006 Move W8, [X20+2414]
	007 Move X19, [X19+2080]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3FD000
	013 Move X0, [X0+2080]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2414], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X9, [X8+8]
	025 Compare X9, 0
	026 JumpIfEqual {43}
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {33}
	030 Call 0x1C17DFC
	031 Move X8, [X19]
	032 Move X8, [X8+184]
	033 Move X8, [X8+8]
	034 Compare X8, 0
	035 JumpIfEqual {47}
	036 Move X2, [X8+24]
	037 Move X0, [X8+64]
	038 Move X1, [X8+40]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 CallNoReturn X2
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 
	047 Call 0x1C17F20

Method: System.Void RaiseFlushPendingResources()

Disassembly:
	0x03D201BC STP X20, X19, [X31 + 0x50]
	0x03D201C0 ADRP X23, 0x6C7000
	0x03D201C4 ADRP X24, 0x444000
	0x03D201C8 LDRB W8, [X23 + 0xA6B]
	0x03D201CC LDR X24, [X24 + 0x410]
	0x03D201D0 MOV X19, X2
	0x03D201D4 MOV X21, X1
	0x03D201D8 MOV X20, X0
	0x03D201DC UBFM X22, X1, 0x20, 0x3F
	0x03D201E0 TBNZ X8, 0x0, 0x3D20204
	0x03D201E4 ADRP X0, 0x444000
	0x03D201E8 LDR X0, [X0 + 0x410]
	0x03D201EC BL 0x1C16CF4
	0x03D201F0 ADRP X0, 0x444000
	0x03D201F4 LDR X0, [X0 + 0x418]
	0x03D201F8 BL 0x1C16CF4
	0x03D201FC MOVZ W8, 0x1
	0x03D20200 STRB W8, [X23 + 0xA6B]
	0x03D20204 LDR X0, [X24]
	0x03D20208 CMP W21, W22
	0x03D2020C CSEL W25, W21, W22, LT
	0x03D20210 MOV X22, X25
	0x03D20214 BFM X22, X25, 0x20, 0x1F
	0x03D20218 BL 0x1C16F10
	0x03D2021C MOV X1, X31
	0x03D20220 MOV X2, X22
	0x03D20224 MOV X21, X0
	0x03D20228 BL 0x3D20D18
	0x03D2022C CBZ X20, 0x3D203D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X19, 0x3FD000
	006 Move W8, [X20+2415]
	007 Move X19, [X19+2080]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x3FD000
	013 Move X0, [X0+2080]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2415], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8+16]
	025 Compare X8, 0
	026 JumpIfEqual {34}
	027 Move X2, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 CallNoReturn X2
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 

Method: System.Void RaiseRegisterIntermediateRenderers(UnityEngine.Camera camera)

Disassembly:
	0x03D20230 ADRP X26, 0x444000
	0x03D20234 LDR X26, [X26 + 0x418]
	0x03D20238 LDR W10, [X20 + 0x1C]
	0x03D2023C LDR X8, [X20 + 0x10]
	0x03D20240 LDR X9, [X26]
	0x03D20244 ADD W10, W10, 0x1
	0x03D20248 STR W10, [X20 + 0x1C]
	0x03D2024C CBZ X8, 0x3D203D0
	0x03D20250 LDRSW X10, [X20 + 0x18]
	0x03D20254 LDR W11, [X8 + 0x18]
	0x03D20258 UBFM X27, X19, 0x20, 0x3F
	0x03D2025C CMP W10, W11
	0x03D20260 B.CS 0x3D2027C
	0x03D20264 ADD W9, W10, 0x1
	0x03D20268 ADD X8, X8, X10, 0x3, LSL
	0x03D2026C STR W9, [X20 + 0x18]
	0x03D20270 STR X21, [X8 + 0x20]
	0x03D20274 MOV W28, W25
	0x03D20278 B 0x3D20298
	0x03D2027C LDR X8, [X9 + 0x20]
	0x03D20280 MOV X0, X20
	0x03D20284 MOV X1, X21
	0x03D20288 LDR X8, [X8 + 0xC0]
	0x03D2028C LDR X2, [X8 + 0x70]
	0x03D20290 BL 0x301BF90
	0x03D20294 MOV W28, W25
	0x03D20298 UBFM X29, X28, 0x20, 0x1F
	0x03D2029C CMP W25, W19
	0x03D202A0 B.GE 0x3D20300
	0x03D202A4 LDR X0, [X24]
	0x03D202A8 MOV W22, W25

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C8000
	006 Move X20, 0x3FD000
	007 Move W8, [X21+2416]
	008 Move X20, [X20+2080]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3FD000
	015 Move X0, [X0+2080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2416], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8+24]
	027 Compare X8, 0
	028 JumpIfEqual {38}
	029 Move X3, [X8+24]
	030 Move X0, [X8+64]
	031 Move X2, [X8+40]
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X3
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.Void RaiseRenderNodeAdd(System.IntPtr userData)

Disassembly:
	0x03D202AC ORR X23, X29, X22, 0x0
	0x03D202B0 BL 0x1C16F10
	0x03D202B4 MOV X1, X22
	0x03D202B8 MOV X2, X23
	0x03D202BC MOV X21, X0
	0x03D202C0 BL 0x3D20D18
	0x03D202C4 LDR W10, [X20 + 0x1C]
	0x03D202C8 LDR X8, [X20 + 0x10]
	0x03D202CC LDR X9, [X26]
	0x03D202D0 ADD W10, W10, 0x1
	0x03D202D4 STR W10, [X20 + 0x1C]
	0x03D202D8 CBZ X8, 0x3D203D0
	0x03D202DC LDRSW X10, [X20 + 0x18]
	0x03D202E0 LDR W11, [X8 + 0x18]
	0x03D202E4 CMP W10, W11
	0x03D202E8 B.CS 0x3D2030C
	0x03D202EC ADD W9, W10, 0x1
	0x03D202F0 ADD X8, X8, X10, 0x3, LSL
	0x03D202F4 STR W9, [X20 + 0x18]
	0x03D202F8 STR X21, [X8 + 0x20]
	0x03D202FC B 0x3D20324
	0x03D20300 CMP W28, W27
	0x03D20304 B.LT 0x3D20328
	0x03D20308 B 0x3D203B4
	0x03D2030C LDR X8, [X9 + 0x20]
	0x03D20310 MOV X0, X20
	0x03D20314 MOV X1, X21
	0x03D20318 LDR X8, [X8 + 0xC0]
	0x03D2031C LDR X2, [X8 + 0x70]
	0x03D20320 BL 0x301BF90
	0x03D20324 UBFM W25, W25, 0x1F, 0x1E

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C8000
	006 Move X20, 0x3FD000
	007 Move W8, [X21+2417]
	008 Move X20, [X20+2080]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3FD000
	015 Move X0, [X0+2080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2417], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8+32]
	027 Compare X8, 0
	028 JumpIfEqual {38}
	029 Move X3, [X8+24]
	030 Move X0, [X8+64]
	031 Move X2, [X8+40]
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X3
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.Void RaiseRenderNodeExecute(System.IntPtr userData)

Disassembly:
	0x03D20328 CMP W28, W27
	0x03D2032C B.GE 0x3D2029C
	0x03D20330 LDR X0, [X24]
	0x03D20334 MOV W22, W25
	0x03D20338 MOV W8, W28
	0x03D2033C UBFM X23, X8, 0x20, 0x1F
	0x03D20340 BFM X22, X8, 0x20, 0x1F
	0x03D20344 BL 0x1C16F10
	0x03D20348 MOV X1, X23
	0x03D2034C MOV X2, X22
	0x03D20350 MOV X21, X0
	0x03D20354 BL 0x3D20D18
	0x03D20358 LDR W10, [X20 + 0x1C]
	0x03D2035C LDR X8, [X20 + 0x10]
	0x03D20360 LDR X9, [X26]
	0x03D20364 ADD W10, W10, 0x1
	0x03D20368 STR W10, [X20 + 0x1C]
	0x03D2036C CBZ X8, 0x3D203D0
	0x03D20370 LDRSW X10, [X20 + 0x18]
	0x03D20374 LDR W11, [X8 + 0x18]
	0x03D20378 CMP W10, W11
	0x03D2037C B.CS 0x3D20394
	0x03D20380 ADD W9, W10, 0x1
	0x03D20384 ADD X8, X8, X10, 0x3, LSL
	0x03D20388 STR W9, [X20 + 0x18]
	0x03D2038C STR X21, [X8 + 0x20]
	0x03D20390 B 0x3D203AC
	0x03D20394 LDR X8, [X9 + 0x20]
	0x03D20398 MOV X0, X20
	0x03D2039C MOV X1, X21
	0x03D203A0 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C8000
	006 Move X20, 0x3FD000
	007 Move W8, [X21+2418]
	008 Move X20, [X20+2080]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3FD000
	015 Move X0, [X0+2080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2418], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8+40]
	027 Compare X8, 0
	028 JumpIfEqual {38}
	029 Move X3, [X8+24]
	030 Move X0, [X8+64]
	031 Move X2, [X8+40]
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X3
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.Void RaiseRenderNodeCleanup(System.IntPtr userData)

Disassembly:
	0x03D203A4 LDR X2, [X8 + 0x70]
	0x03D203A8 BL 0x301BF90
	0x03D203AC UBFM W28, W28, 0x1F, 0x1E
	0x03D203B0 B 0x3D20298
	0x03D203B4 LDP X20, X19, [X31 + 0x50]
	0x03D203B8 LDP X22, X21, [X31 + 0x40]
	0x03D203BC LDP X24, X23, [X31 + 0x30]
	0x03D203C0 LDP X26, X25, [X31 + 0x20]
	0x03D203C4 LDP X28, X27, [X31 + 0x10]
	0x03D203C8 LDP X29, X30, [X31], #0x60
	0x03D203CC RET
	0x03D203D0 BL 0x1C16F20
	0x03D203D4 STR X30, [X31 - 0x40]!
	0x03D203D8 STP X24, X23, [X31 + 0x10]
	0x03D203DC STP X22, X21, [X31 + 0x20]
	0x03D203E0 STP X20, X19, [X31 + 0x30]
	0x03D203E4 ADRP X21, 0x6C7000
	0x03D203E8 LDRB W8, [X21 + 0xA6C]
	0x03D203EC MOV W19, W1
	0x03D203F0 MOV X20, X0
	0x03D203F4 TBNZ X8, 0x0, 0x3D20424
	0x03D203F8 ADRP X0, 0x444000
	0x03D203FC LDR X0, [X0 + 0x420]
	0x03D20400 BL 0x1C16CF4
	0x03D20404 ADRP X0, 0x444000
	0x03D20408 LDR X0, [X0 + 0x428]
	0x03D2040C BL 0x1C16CF4
	0x03D20410 ADRP X0, 0x3FD000
	0x03D20414 LDR X0, [X0 + 0x240]
	0x03D20418 BL 0x1C16CF4
	0x03D2041C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C8000
	006 Move X20, 0x3FD000
	007 Move W8, [X21+2419]
	008 Move X20, [X20+2080]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x3FD000
	015 Move X0, [X0+2080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2419], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X8, [X8+48]
	027 Compare X8, 0
	028 JumpIfEqual {38}
	029 Move X3, [X8+24]
	030 Move X0, [X8+64]
	031 Move X2, [X8+40]
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X3
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.IntPtr AllocateBuffer(System.Int32 elementCount, System.Int32 elementStride, System.Boolean vertexBuffer)

Disassembly:
	0x03D20420 STRB W8, [X21 + 0xA6C]
	0x03D20424 CBZ X20, 0x3D204D4
	0x03D20428 LDR W8, [X20 + 0x18]
	0x03D2042C CMP W8, 0x1
	0x03D20430 B.LT 0x3D20488
	0x03D20434 ADRP X24, 0x444000
	0x03D20438 LDR X24, [X24 + 0x428]
	0x03D2043C MOV W21, W31
	0x03D20440 MOV W22, W31
	0x03D20444 MOV W23, W31
	0x03D20448 LDR X2, [X24]
	0x03D2044C MOV X0, X20
	0x03D20450 MOV W1, W21
	0x03D20454 BL 0x301BCCC
	0x03D20458 CBZ X0, 0x3D204D4
	0x03D2045C LDP W8, W9, [X0 + 0x18]
	0x03D20460 LDR W10, [X20 + 0x18]
	0x03D20464 ADD W21, W21, 0x1
	0x03D20468 CMP W8, W23
	0x03D2046C CSEL W23, W8, W23, GT
	0x03D20470 CMP W9, W22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6C8000
	007 Move X3, [X22+2424]
	008 Move W20, W2
	009 Move W19, W1
	010 Move W21, W0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -52535296
	014 Add X0, X0, 2297
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2424], X0
	018 And W2, W20, 1
	019 Move W0, W21
	020 Move W1, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void FreeBuffer(System.IntPtr buffer)

Disassembly:
	0x03D20474 CSEL W22, W9, W22, GT
	0x03D20478 CMP W21, W10
	0x03D2047C B.LT 0x3D20448
	0x03D20480 MOV W20, W23
	0x03D20484 B 0x3D20490
	0x03D20488 MOV X20, X31
	0x03D2048C MOV W22, W31
	0x03D20490 ADRP X8, 0x3FD000
	0x03D20494 LDR X8, [X8 + 0x240]
	0x03D20498 LDR X0, [X8]
	0x03D2049C LDR W8, [X0 + 0xE0]
	0x03D204A0 CBNZ W8, 0x3D204A8
	0x03D204A4 BL 0x1C16DFC
	0x03D204A8 SUB W0, W22, W19
	0x03D204AC MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2432]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52609024
	010 Add X0, X0, 3056
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2432], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void UpdateBufferRanges(System.IntPtr buffer, System.IntPtr ranges, System.Int32 rangeCount, System.Int32 writeRangeStart, System.Int32 writeRangeEnd)

Disassembly:
	0x03D204B0 BL 0x3DE10CC
	0x03D204B4 ADD W8, W0, W19
	0x03D204B8 BFM X20, X8, 0x20, 0x1F
	0x03D204BC MOV X0, X20
	0x03D204C0 LDP X20, X19, [X31 + 0x30]
	0x03D204C4 LDP X22, X21, [X31 + 0x20]
	0x03D204C8 LDP X24, X23, [X31 + 0x10]
	0x03D204CC LDR X30, [X31], #0x40
	0x03D204D0 RET
	0x03D204D4 BL 0x1C16F20
	0x03D204D8 STR X30, [X31 - 0x30]!
	0x03D204DC STP X22, X21, [X31 + 0x10]
	0x03D204E0 STP X20, X19, [X31 + 0x20]
	0x03D204E4 ADRP X22, 0x6C7000
	0x03D204E8 ADRP X21, 0x3FD000
	0x03D204EC LDRB W8, [X22 + 0xA6D]
	0x03D204F0 LDR X21, [X21 + 0x240]
	0x03D204F4 MOV W19, W1
	0x03D204F8 MOV W20, W0
	0x03D204FC TBNZ X8, 0x0, 0x3D20520
	0x03D20500 ADRP X0, 0x444000
	0x03D20504 LDR X0, [X0 + 0x430]
	0x03D20508 BL 0x1C16CF4
	0x03D2050C ADRP X0, 0x3FD000
	0x03D20510 LDR X0, [X0 + 0x240]
	0x03D20514 BL 0x1C16CF4
	0x03D20518 MOVZ W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x6C8000
	009 Move X5, [X24+2440]
	010 Move W19, W4
	011 Move W20, W3
	012 Move W21, W2
	013 Move X22, X1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -52543488
	018 Add X0, X0, 3104
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+2440], X0
	022 Move X0, X23
	023 Move X1, X22
	024 Move W2, W21
	025 Move W3, W20
	026 Move W4, W19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Void SetVectorArray(UnityEngine.MaterialPropertyBlock props, System.Int32 name, System.IntPtr vector4s, System.Int32 count)

Disassembly:
	0x03D2051C STRB W8, [X22 + 0xA6D]
	0x03D20520 LDR X0, [X21]
	0x03D20524 ADRP X21, 0x444000
	0x03D20528 LDR W8, [X0 + 0xE0]
	0x03D2052C LDR X21, [X21 + 0x430]
	0x03D20530 CBNZ W8, 0x3D20538
	0x03D20534 BL 0x1C16DFC
	0x03D20538 SUB W0, W20, W19
	0x03D2053C MOV X1, X31
	0x03D20540 BL 0x3DE111C
	0x03D20544 LDR X8, [X21]
	0x03D20548 LDP X20, X19, [X31 + 0x20]
	0x03D2054C LDP X22, X21, [X31 + 0x10]
	0x03D20550 ADD W1, W0, 0x1
	0x03D20554 MOV X0, X8
	0x03D20558 LDR X30, [X31], #0x30
	0x03D2055C B 0x1C16D6C
	0x03D20560 SUB X31, X31, 0x130
	0x03D20564 STP X29, X30, [X31 + 0xD0]
	0x03D20568 STP X28, X27, [X31 + 0xE0]
	0x03D2056C STP X26, X25, [X31 + 0xF0]
	0x03D20570 STP X24, X23, [X31 + 0x100]
	0x03D20574 STP X22, X21, [X31 + 0x110]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x6C8000
	008 Move X4, [X23+2448]
	009 Move W19, W3
	010 Move X20, X2
	011 Move W21, W1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -52502528
	016 Add X0, X0, 3212
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+2448], X0
	020 Move X0, X22
	021 Move W1, W21
	022 Move X2, X20
	023 Move W3, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.IntPtr GetVertexDeclaration(UnityEngine.Rendering.VertexAttributeDescriptor[] vertexAttributes)

Disassembly:
	0x03D20578 STP X20, X19, [X31 + 0x120]
	0x03D2057C ADRP X20, 0x6C7000
	0x03D20580 LDRB W8, [X20 + 0xA69]
	0x03D20584 MOV X19, X3
	0x03D20588 MOV W25, W2
	0x03D2058C MOV W21, W1
	0x03D20590 MOV X22, X0
	0x03D20594 TBNZ X8, 0x0, 0x3D205F4
	0x03D20598 ADRP X0, 0x444000
	0x03D2059C LDR X0, [X0 + 0x438]
	0x03D205A0 BL 0x1C16CF4
	0x03D205A4 ADRP X0, 0x3D3000
	0x03D205A8 LDR X0, [X0 + 0xA28]
	0x03D205AC BL 0x1C16CF4
	0x03D205B0 ADRP X0, 0x444000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2456]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52453376
	010 Add X0, X0, 1777
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2456], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void RegisterIntermediateRenderer(UnityEngine.Camera camera, UnityEngine.Material material, UnityEngine.Matrix4x4 transform, UnityEngine.Bounds aabb, System.Int32 renderLayer, System.Int32 shadowCasting, System.Boolean receiveShadows, System.Int32 sameDistanceSortPriority, System.UInt64 sceneCullingMask, System.Int32 rendererCallbackFlags, System.IntPtr userData, System.Int32 userDataSize)

Disassembly:
	0x03D205B4 LDR X0, [X0 + 0x440]
	0x03D205B8 BL 0x1C16CF4
	0x03D205BC ADRP X0, 0x444000
	0x03D205C0 LDR X0, [X0 + 0x420]
	0x03D205C4 BL 0x1C16CF4
	0x03D205C8 ADRP X0, 0x444000
	0x03D205CC LDR X0, [X0 + 0x428]
	0x03D205D0 BL 0x1C16CF4
	0x03D205D4 ADRP X0, 0x444000
	0x03D205D8 LDR X0, [X0 + 0x448]
	0x03D205DC BL 0x1C16CF4
	0x03D205E0 ADRP X0, 0x3FD000
	0x03D205E4 LDR X0, [X0 + 0x240]
	0x03D205E8 BL 0x1C16CF4
	0x03D205EC MOVZ W8, 0x1
	0x03D205F0 STRB W8, [X20 + 0xA69]
	0x03D205F4 CMP W21, 0x1
	0x03D205F8 B.LT 0x3D20790
	0x03D205FC CMP W25, 0x1
	0x03D20600 B.LT 0x3D20790
	0x03D20604 LDR W8, [X22 + 0x20]
	0x03D20608 CMP W8, W21
	0x03D2060C B.LT 0x3D20790
	0x03D20610 LDR W8, [X22 + 0x24]
	0x03D20614 CMP W8, W25
	0x03D20618 B.LT 0x3D20790
	0x03D2061C ADRP X8, 0x3FD000
	0x03D20620 LDR X8, [X8 + 0x240]
	0x03D20624 LDR X0, [X8]
	0x03D20628 LDR W8, [X22 + 0x28]
	0x03D2062C LDR W9, [X0 + 0xE0]
	0x03D20630 SUB W8, W25, W8
	0x03D20634 CMP W8, 0x1
	0x03D20638 CSINC W23, W8, W31, GT
	0x03D2063C CBNZ W9, 0x3D20644
	0x03D20640 BL 0x1C16DFC
	0x03D20644 MOV W0, W23
	0x03D20648 MOV X1, X31
	0x03D2064C BL 0x3DE111C
	0x03D20650 LDR X8, [X22 + 0x30]
	0x03D20654 CBZ X8, 0x3D2078C
	0x03D20658 LDR W9, [X8 + 0x18]
	0x03D2065C MOV W23, W0
	0x03D20660 CMP W0, W9
	0x03D20664 B.CS 0x3D20A04
	0x03D20668 SXTW X26, W23
	0x03D2066C ADD X8, X8, X26, 0x3, LSL
	0x03D20670 LDR X24, [X8 + 0x20]
	0x03D20674 ADD X27, X31, 0xB0
	0x03D20678 CBZ X24, 0x3D206C0
	0x03D2067C ADD X8, X31, 0x70
	0x03D20680 ADD X20, X8, 0x8
	0x03D20684 LDR W8, [X24 + 0x20]
	0x03D20688 CMP W8, W21
	0x03D2068C B.LT 0x3D206B8
	0x03D20690 LDR X0, [X24 + 0x30]
	0x03D20694 CBZ X0, 0x3D2078C
	0x03D20698 ADD X8, X31, 0x70
	0x03D2069C MOV W1, W21

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+8], W5
	015 Move [X31+12], W7
	016 Move [X31+4], W4
	017 Move X20, 0x6C8000
	018 Move X21, 0x3FD000
	019 Move W27, [X31+136]
	020 Move X28, [X31+128]
	021 Move W29, [X31+120]
	022 Move W8, [X20+2464]
	023 Move X19, [X31+112]
	024 Move X21, [X21+2080]
	025 Move W23, W6
	026 Move X22, X3
	027 Move X24, X2
	028 Move X25, X1
	029 Move X26, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {39}
	034 Move X0, 0x3FD000
	035 Move X0, [X0+2080]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+2464], W8
	039 Move X0, [X21]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X20, 0x6C8000
	045 Move X8, [X20+2600]
	046 Compare X8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, -52445184
	049 Add X0, X0, 1859
	050 Call 0x1C17CB8
	051 Move X8, X0
	052 Move [X20+2600], X0
	053 Move [X31+136], W27
	054 Move [X31+128], X28
	055 Move [X31+120], W29
	056 And W6, W23, 1
	057 Move [X31+112], X19
	058 Move X0, X26
	059 Move X1, X25
	060 Move X2, X24
	061 Move X3, X22
	062 Move W4, [X31+4]
	063 Move W5, [X31+8]
	064 Move W7, [X31+12]
	065 Move X20, [X31+96]
	066 Move X19, [X31+104]
	067 Move X22, [X31+80]
	068 Move X21, [X31+88]
	069 Move X24, [X31+64]
	070 Move X23, [X31+72]
	071 Move X26, [X31+48]
	072 Move X25, [X31+56]
	073 Move X28, [X31+32]
	074 Move X27, [X31+40]
	075 Move X29, [X31+16]
	076 Move X30, [X31+24]
	077 Add X31, X31, 112
	078 CallNoReturn X8

Method: System.Void DrawRanges(System.IntPtr ib, System.IntPtr* vertexStreams, System.Int32 streamCount, System.IntPtr ranges, System.Int32 rangeCount, System.IntPtr vertexDecl)

Disassembly:
	0x03D20760 ADD X8, X31, 0x70
	0x03D20764 MOV W1, W24
	0x03D20768 MOV X2, X31
	0x03D2076C BL 0x3D342E8
	0x03D20770 LDP W29, W20, [X31 + 0x70]
	0x03D20774 LDR V0, [X28]
	0x03D20778 STR V0, [X27]
	0x03D2077C CBNZ W20, 0x3D207EC
	0x03D20780 LDR X0, [X22 + 0x38]
	0x03D20784 ADD W25, W25, 0x1
	0x03D20788 CBNZ X0, 0x3D20720
	0x03D2078C BL 0x1C16F20
	0x03D20790 MOV W0, W31
	0x03D20794 MOVI V0.2D, 0x0
	0x03D20798 STP V0, V0, [X19 + 0x10]
	0x03D2079C STR V0, [X19]
	0x03D207A0 LDP X20, X19, [X31 + 0x120]
	0x03D207A4 LDP X22, X21, [X31 + 0x110]
	0x03D207A8 LDP X24, X23, [X31 + 0x100]
	0x03D207AC LDP X26, X25, [X31 + 0xF0]
	0x03D207B0 LDP X28, X27, [X31 + 0xE0]
	0x03D207B4 LDP X29, X30, [X31 + 0xD0]
	0x03D207B8 ADD X31, X31, 0x130
	0x03D207BC RET
	0x03D207C0 LDR V0, [X27 + 0x1]
	0x03D207C4 MOVI V1.2D, 0x0
	0x03D207C8 ADD X0, X31, 0x70
	0x03D207CC ADD X2, X31, 0x58
	0x03D207D0 MOV X1, X24

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x6C8000
	010 Move X6, [X25+2472]
	011 Move X19, X5
	012 Move W20, W4
	013 Move X21, X3
	014 Move W22, W2
	015 Move X23, X1
	016 Move X24, X0
	017 Compare X6, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -52518912
	020 Add X0, X0, 3764
	021 Call 0x1C17CB8
	022 Move X6, X0
	023 Move [X25+2472], X0
	024 Move X0, X24
	025 Move X1, X23
	026 Move W2, W22
	027 Move X3, X21
	028 Move W4, W20
	029 Move X5, X19
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X24, [X31+16]
	035 Move X23, [X31+24]
	036 Move X30, [X31+64]
	037 Move X25, [X31+72]
	038 CallNoReturn X6

Method: System.Void SetPropertyBlock(UnityEngine.MaterialPropertyBlock props)

Disassembly:
	0x03D207D4 MOV W3, W21
	0x03D207D8 MOV W4, W25
	0x03D207DC STP V1, V1, [X31 + 0x80]
	0x03D207E0 STP V0, V1, [X31 + 0x60]
	0x03D207E4 STP W9, W8, [X31 + 0x58]
	0x03D207E8 B 0x3D209E8
	0x03D207EC ADRP X23, 0x444000
	0x03D207F0 LDR X23, [X23 + 0x448]
	0x03D207F4 LDR X0, [X23]
	0x03D207F8 LDR W8, [X0 + 0xE0]
	0x03D207FC CBNZ W8, 0x3D20808
	0x03D20800 BL 0x1C16DFC
	0x03D20804 LDR X0, [X23]
	0x03D20808 LDR X8, [X0 + 0xB8]
	0x03D2080C LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2480]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52379648
	010 Add X0, X0, 796
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2480], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetScissorRect(UnityEngine.RectInt scissorRect)

Disassembly:
	0x03D20810 CBZ X0, 0x3D2078C
	0x03D20814 ADRP X8, 0x444000
	0x03D20818 LDR X8, [X8 + 0x440]
	0x03D2081C LDR X1, [X8]
	0x03D20820 BL 0x2EF0E28
	0x03D20824 LDR V0, [X27]
	0x03D20828 STR V0, [X31 + 0x4]
	0x03D2082C CBZ X0, 0x3D2078C
	0x03D20830 STP W29, W20, [X0 + 0x38]
	0x03D20834 LDR V0, [X31 + 0x4]
	0x03D20838 ADRP X8, 0x444000
	0x03D2083C LDR X8, [X8 + 0x438]
	0x03D20840 MOV X25, X0
	0x03D20844 STR V0, [X0 + 0x4]
	0x03D20848 LDR W27, [X26 + 0x18]
	0x03D2084C LDR X0, [X8]
	0x03D20850 BL 0x1C16F10
	0x03D20854 MOV W1, W27
	0x03D20858 MOV X2, X31
	0x03D2085C MOV X28, X0
	0x03D20860 BL 0x3D34148
	0x03D20864 STP X26, X28, [X25 + 0x28]
	0x03D20868 LDR X8, [X22 + 0x30]
	0x03D2086C CBZ X8, 0x3D2078C
	0x03D20870 LDR W9, [X8 + 0x18]
	0x03D20874 LDR X10, [X31 + 0x20]
	0x03D20878 CMP W10, W9
	0x03D2087C LDR X9, [X31 + 0x18]
	0x03D20880 B.CS 0x3D20A04
	0x03D20884 ADD X8, X8, X9, 0x3, LSL
	0x03D20888 LDR X8, [X8 + 0x20]
	0x03D2088C ADRP X20, 0x6C4000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X1
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x6C8000
	007 Move [X31], X0
	008 Move X20, 0x3FD000
	009 Move W8, [X19+2488]
	010 Move X20, [X20+2080]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x3FD000
	016 Move X0, [X0+2080]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+2488], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X19, 0x6C8000
	026 Move X8, [X19+2608]
	027 Compare X8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, -52502528
	030 Add X0, X0, 3338
	031 Call 0x1C17CB8
	032 Move X8, X0
	033 Move [X19+2608], X0
	034 Add X0, X31, 0
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Add X31, X31, 48
	040 Return 

Method: System.Void DisableScissor()

Disassembly:
	0x03D208CC BL 0x1C16DFC
	0x03D208D0 ADD W1, W23, W27
	0x03D208D4 MOV W0, W27
	0x03D208D8 MOV X2, X31
	0x03D208DC BL 0x337EE94
	0x03D208E0 ADRP X23, 0x6C4000
	0x03D208E4 LDRB W8, [X23 + 0xD8C]
	0x03D208E8 MOV W27, W0
	0x03D208EC CBNZ W8, 0x3D20904
	0x03D208F0 ADRP X0, 0x3D3000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x6C8000
	004 Move X0, [X19+2496]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -52535296
	008 Add X0, X0, 2390
	009 Call 0x1C17CB8
	010 Move [X19+2496], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.IntPtr CreateStencilState(UnityEngine.Rendering.StencilState stencilState)

Disassembly:
	0x03D208F4 LDR X0, [X0 + 0x5A8]
	0x03D208F8 BL 0x1C16CF4
	0x03D208FC MOVZ W8, 0x1
	0x03D20900 STRB W8, [X23 + 0xD8C]
	0x03D20904 LDR X0, [X20]
	0x03D20908 LDR W28, [X26 + 0x14]
	0x03D2090C LDR W20, [X26 + 0x1C]
	0x03D20910 LDR W8, [X0 + 0xE0]
	0x03D20914 CBNZ W8, 0x3D2091C
	0x03D20918 BL 0x1C16DFC
	0x03D2091C ADD W1, W20, W28
	0x03D20920 MOV W0, W28
	0x03D20924 MOV X2, X31
	0x03D20928 BL 0x337EE94
	0x03D2092C LDR W8, [X26 + 0x18]
	0x03D20930 ADD W9, W0, W29
	0x03D20934 STP W27, W9, [X25 + 0x18]
	0x03D20938 STP W8, W24, [X25 + 0x20]
	0x03D2093C LDR X20, [X22 + 0x30]
	0x03D20940 CBZ X20, 0x3D2078C
	0x03D20944 LDR X8, [X20]
	0x03D20948 MOV X0, X25
	0x03D2094C LDR X1, [X8 + 0x40]
	0x03D20950 BL 0x1C16E00
	0x03D20954 LDP X10, X9, [X31 + 0x18]
	0x03D20958 CBZ X0, 0x3D20A08
	0x03D2095C LDR W8, [X20 + 0x18]
	0x03D20960 CMP W9, W8
	0x03D20964 B.CS 0x3D20A04
	0x03D20968 ADD X8, X20, X10, 0x3, LSL
	0x03D2096C STR X25, [X8 + 0x20]
	0x03D20970 LDR X0, [X25 + 0x30]
	0x03D20974 CBZ X0, 0x3D2078C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X19, 0x6C8000
	006 Move [X31], X0
	007 Move [X31+8], W1
	008 Move X20, 0x3FD000
	009 Move W8, [X19+2504]
	010 Move X20, [X20+2080]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x3FD000
	016 Move X0, [X0+2080]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+2504], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X19, 0x6C8000
	026 Move X8, [X19+2616]
	027 Compare X8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, -52436992
	030 Add X0, X0, 2193
	031 Call 0x1C17CB8
	032 Move X8, X0
	033 Move [X19+2616], X0
	034 Add X0, X31, 0
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Add X31, X31, 48
	040 Return X0

Method: System.Void SetStencilState(System.IntPtr stencilState, System.Int32 stencilRef)

Disassembly:
	0x03D209B4 MOV X1, X31
	0x03D209B8 BL 0x3C06E58
	0x03D209BC LDR V0, [X31 + 0xA]
	0x03D209C0 LDR W4, [X31 + 0x14]
	0x03D209C4 MOVI V1.2D, 0x0
	0x03D209C8 STP V1, V1, [X31 + 0x80]
	0x03D209CC STR V1, [X31 + 0x7]
	0x03D209D0 STUR V0, [X31 + 0x30]
	0x03D209D4 STP W22, W20, [X31 + 0x28]
	0x03D209D8 ADD X0, X31, 0x70
	0x03D209DC ADD X2, X31, 0x28
	0x03D209E0 MOV X1, X25
	0x03D209E4 MOV W3, W21
	0x03D209E8 BL 0x3D20A14
	0x03D209EC LDP V1, V0, [X31 + 0x80]
	0x03D209F0 LDR V2, [X31 + 0x7]
	0x03D209F4 MOVZ W0, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6C8000
	006 Move X2, [X21+2512]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52436992
	012 Add X0, X0, 2001
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2512], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean HasMappedBufferRange()

Disassembly:
	0x03D209F8 STP V1, V0, [X19 + 0x10]
	0x03D209FC STR V2, [X19]
	0x03D20A00 B 0x3D207A0
	0x03D20A04 BL 0x1C16F28
	0x03D20A08 BL 0x1C16F44
	0x03D20A0C MOV X1, X31
	0x03D20A10 BL 0x1C16DEC
	0x03D20A14 STR X30, [X31 - 0x50]!
	0x03D20A18 STP X26, X25, [X31 + 0x10]
	0x03D20A1C STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x6C8000
	004 Move X0, [X19+2520]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -52436992
	008 Add X0, X0, 2081
	009 Call 0x1C17CB8
	010 Move [X19+2520], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.UInt32 InsertCPUFence()

Disassembly:
	0x03D20A20 STP X22, X21, [X31 + 0x30]
	0x03D20A24 STP X20, X19, [X31 + 0x40]
	0x03D20A28 LDR X8, [X2 + 0x10]
	0x03D20A2C LDR V0, [X2]
	0x03D20A30 STR X1, [X0 + 0x10]
	0x03D20A34 STR X8, [X0 + 0x28]
	0x03D20A38 STUR V0, [X0 + 0x18]
	0x03D20A3C CBZ X1, 0x3D20B18
	0x03D20A40 ADRP X24, 0x6C4000
	0x03D20A44 LDRB W8, [X24 + 0xD8B]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x6C8000
	004 Move X0, [X19+2528]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -52436992
	008 Add X0, X0, 2140
	009 Call 0x1C17CB8
	010 Move [X19+2528], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean CPUFencePassed(System.UInt32 fence)

Disassembly:
	0x03D20A48 MOV W19, W4
	0x03D20A4C MOV W20, W3
	0x03D20A50 MOV X23, X2
	0x03D20A54 MOV X22, X1
	0x03D20A58 MOV X21, X0
	0x03D20A5C CBNZ W8, 0x3D20A74
	0x03D20A60 ADRP X0, 0x3D3000
	0x03D20A64 LDR X0, [X0 + 0x5A8]
	0x03D20A68 BL 0x1C16CF4
	0x03D20A6C MOVZ W8, 0x1
	0x03D20A70 STRB W8, [X24 + 0xD8B]
	0x03D20A74 ADRP X25, 0x3D3000
	0x03D20A78 LDR X25, [X25 + 0x5A8]
	0x03D20A7C LDR W24, [X22 + 0x18]
	0x03D20A80 LDR W26, [X22 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2536]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52592640
	010 Add X0, X0, 3479
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2536], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void WaitForCPUFencePassed(System.UInt32 fence)

Disassembly:
	0x03D20A84 LDR X0, [X25]
	0x03D20A88 LDR W8, [X0 + 0xE0]
	0x03D20A8C CBNZ W8, 0x3D20A94
	0x03D20A90 BL 0x1C16DFC
	0x03D20A94 ADD W1, W26, W24
	0x03D20A98 MOV W0, W24
	0x03D20A9C MOV X2, X31
	0x03D20AA0 BL 0x337EE94
	0x03D20AA4 ADRP X24, 0x6C4000
	0x03D20AA8 LDRB W8, [X24 + 0xD8C]
	0x03D20AAC LDR W26, [X23]
	0x03D20AB0 MOV W23, W0
	0x03D20AB4 CBNZ W8, 0x3D20ACC
	0x03D20AB8 ADRP X0, 0x3D3000
	0x03D20ABC LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2544]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52387840
	010 Add X0, X0, 898
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2544], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SyncRenderThread()

Disassembly:
	0x03D20AC0 BL 0x1C16CF4
	0x03D20AC4 MOVZ W8, 0x1
	0x03D20AC8 STRB W8, [X24 + 0xD8C]
	0x03D20ACC LDR X0, [X25]
	0x03D20AD0 LDR W24, [X22 + 0x1C]
	0x03D20AD4 LDR W22, [X22 + 0x24]
	0x03D20AD8 LDR W8, [X0 + 0xE0]
	0x03D20ADC CBNZ W8, 0x3D20AE4
	0x03D20AE0 BL 0x1C16DFC
	0x03D20AE4 ADD W1, W22, W24

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x6C8000
	004 Move X0, [X19+2552]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -52518912
	008 Add X0, X0, 3895
	009 Call 0x1C17CB8
	010 Move [X19+2552], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.RectInt GetActiveViewport()

Disassembly:
	0x03D20AE8 MOV W0, W24
	0x03D20AEC MOV X2, X31
	0x03D20AF0 BL 0x337EE94
	0x03D20AF4 ADD W8, W26, W23
	0x03D20AF8 STP W8, W0, [X21]
	0x03D20AFC STP W20, W19, [X21 + 0x8]
	0x03D20B00 LDP X20, X19, [X31 + 0x40]
	0x03D20B04 LDP X22, X21, [X31 + 0x30]
	0x03D20B08 LDP X24, X23, [X31 + 0x20]
	0x03D20B0C LDP X26, X25, [X31 + 0x10]
	0x03D20B10 LDR X30, [X31], #0x50
	0x03D20B14 RET
	0x03D20B18 BL 0x1C16F20
	0x03D20B1C SUB X31, X31, 0xC0
	0x03D20B20 STP X30, X23, [X31 + 0x90]
	0x03D20B24 STP X22, X21, [X31 + 0xA0]
	0x03D20B28 STP X20, X19, [X31 + 0xB0]
	0x03D20B2C ADRP X19, 0x6C7000
	0x03D20B30 LDRB W8, [X19 + 0xA6A]
	0x03D20B34 MOV X21, X1
	0x03D20B38 MOV X20, X0
	0x03D20B3C TBNZ X8, 0x0, 0x3D20B6C
	0x03D20B40 ADRP X0, 0x444000
	0x03D20B44 LDR X0, [X0 + 0x450]
	0x03D20B48 BL 0x1C16CF4
	0x03D20B4C ADRP X0, 0x444000
	0x03D20B50 LDR X0, [X0 + 0x448]
	0x03D20B54 BL 0x1C16CF4
	0x03D20B58 ADRP X0, 0x3FD000
	0x03D20B5C LDR X0, [X0 + 0x240]
	0x03D20B60 BL 0x1C16CF4
	0x03D20B64 MOVZ W8, 0x1
	0x03D20B68 STRB W8, [X19 + 0xA6A]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x6C8000
	006 Move X19, 0x3FD000
	007 Move W8, [X20+2560]
	008 Move X19, [X19+2080]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x3FD000
	014 Move X0, [X0+2080]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2560], W8
	018 Move X0, [X19]
	019 Move [X31], X31
	020 Move [X31+8], X31
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X19, 0x6C8000
	026 Move X8, [X19+2624]
	027 Compare X8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, -52568064
	030 Add X0, X0, 3380
	031 Call 0x1C17CB8
	032 Move X8, X0
	033 Move [X19+2624], X0
	034 Add X0, X31, 0
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, [X31]
	037 Move X1, [X31+8]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Add X31, X31, 48
	042 Return X0

Method: System.Void ProfileDrawChainBegin()

Disassembly:
	0x03D20BA8 LDR X8, [X31 + 0x50]
	0x03D20BAC ADD X1, X31, 0x20
	0x03D20BB0 MOV X2, X31
	0x03D20BB4 STR V0, [X31 + 0x2]
	0x03D20BB8 STR X8, [X31 + 0x30]
	0x03D20BBC BL 0x3D345BC
	0x03D20BC0 LDR X0, [X19 + 0x30]
	0x03D20BC4 CBZ X0, 0x3D20C7C
	0x03D20BC8 MOV X1, X31
	0x03D20BCC BL 0x3D342E0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x6C8000
	004 Move X0, [X19+2568]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -52592640
	008 Add X0, X0, 3545
	009 Call 0x1C17CB8
	010 Move [X19+2568], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void ProfileDrawChainEnd()

Disassembly:
	0x03D20BD0 CBNZ W0, 0x3D20CF4
	0x03D20BD4 LDR X8, [X19 + 0x28]
	0x03D20BD8 CBZ X8, 0x3D20C7C
	0x03D20BDC LDR X0, [X8 + 0x20]
	0x03D20BE0 LDR X8, [X19 + 0x48]
	0x03D20BE4 LDUR V0, [X19 + 0x38]
	0x03D20BE8 STR X8, [X31 + 0x70]
	0x03D20BEC STR V0, [X31 + 0x6]
	0x03D20BF0 CBZ X0, 0x3D20C7C
	0x03D20BF4 LDR V0, [X31 + 0x6]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x6C8000
	004 Move X0, [X19+2576]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -52404224
	008 Add X0, X0, 1891
	009 Call 0x1C17CB8
	010 Move [X19+2576], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void NotifyOfUIREvents(System.Boolean subscribe)

Disassembly:
	0x03D20BF8 LDR X8, [X31 + 0x70]
	0x03D20BFC ADD X1, X31, 0x0
	0x03D20C00 MOV X2, X31
	0x03D20C04 STR V0, [X31]
	0x03D20C08 STR X8, [X31 + 0x10]
	0x03D20C0C BL 0x3D345BC
	0x03D20C10 ADRP X8, 0x3FD000
	0x03D20C14 LDR X8, [X8 + 0x240]
	0x03D20C18 LDR W21, [X19 + 0x24]
	0x03D20C1C LDR W22, [X20 + 0x28]
	0x03D20C20 LDR X0, [X8]
	0x03D20C24 LDR W8, [X0 + 0xE0]
	0x03D20C28 CBNZ W8, 0x3D20C30
	0x03D20C2C BL 0x1C16DFC
	0x03D20C30 SUB W0, W21, W22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2584]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52486144
	010 Add X0, X0, 2351
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2584], X0
	014 And W0, W19, 1
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Matrix4x4 GetUnityProjectionMatrix()

Disassembly:
	0x03D20C34 MOV X1, X31
	0x03D20C38 BL 0x3DE111C
	0x03D20C3C LDR X23, [X20 + 0x30]
	0x03D20C40 CBZ X23, 0x3D20C7C
	0x03D20C44 LDR W8, [X23 + 0x18]
	0x03D20C48 MOV W20, W0
	0x03D20C4C CMP W0, W8
	0x03D20C50 B.CS 0x3D20D08
	0x03D20C54 ADD X22, X23, W20, 0x3, SXTW
	0x03D20C58 LDR X9, [X22 + 0x20]!
	0x03D20C5C CMP X9, X19
	0x03D20C60 B.EQ 0x3D20C8C
	0x03D20C64 CBZ X9, 0x3D20C7C
	0x03D20C68 LDR X8, [X9 + 0x50]
	0x03D20C6C CMP X8, X19
	0x03D20C70 B.EQ 0x3D20C80
	0x03D20C74 MOV X9, X8
	0x03D20C78 CBNZ X8, 0x3D20C68
	0x03D20C7C BL 0x1C16F20
	0x03D20C80 LDR X8, [X19 + 0x50]
	0x03D20C84 STR X8, [X9 + 0x50]
	0x03D20C88 B 0x3D20CB8
	0x03D20C8C LDR X21, [X19 + 0x50]
	0x03D20C90 CBZ X21, 0x3D20CAC
	0x03D20C94 LDR X8, [X23]
	0x03D20C98 MOV X0, X21
	0x03D20C9C LDR X1, [X8 + 0x40]
	0x03D20CA0 BL 0x1C16E00
	0x03D20CA4 CBZ X0, 0x3D20D0C
	0x03D20CA8 LDR W8, [X23 + 0x18]
	0x03D20CAC CMP W20, W8
	0x03D20CB0 B.CS 0x3D20D08
	0x03D20CB4 STR X21, [X22]
	0x03D20CB8 ADRP X20, 0x444000
	0x03D20CBC LDR X20, [X20 + 0x448]
	0x03D20CC0 LDR X0, [X20]
	0x03D20CC4 LDR W8, [X0 + 0xE0]
	0x03D20CC8 CBNZ W8, 0x3D20CD4
	0x03D20CCC BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x6C8000
	007 Move X20, 0x3FD000
	008 Move X19, X8
	009 Move W8, [X21+2592]
	010 Move X20, [X20+2080]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x3FD000
	016 Move X0, [X0+2080]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2592], W8
	020 Move X0, [X20]
	021 NotImplemented "Instruction MOVI not yet implemented."
	022 Move [X31+32], V0
	023 Move [X31+40], V0
	024 Move [X31], V0
	025 Move [X31+8], V0
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X20, 0x6C8000
	031 Move X8, [X20+2632]
	032 Compare X8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, -52535296
	035 Add X0, X0, 2443
	036 Call 0x1C17CB8
	037 Move X8, X0
	038 Move [X20+2632], X0
	039 Add X0, X31, 0
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move V1, [X31+32]
	042 Move V0, [X31+48]
	043 Move V3, [X31]
	044 Move V2, [X31+16]
	045 Move X30, [X31+64]
	046 Move X21, [X31+72]
	047 Move [X19+32], V1
	048 Move [X19+40], V0
	049 Move [X19], V3
	050 Move [X19+8], V2
	051 Move X20, [X31+80]
	052 Move X19, [X31+88]
	053 Add X31, X31, 96
	054 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03D20D0C BL 0x1C16F44
	0x03D20D10 MOV X1, X31
	0x03D20D14 BL 0x1C16DEC
	0x03D20D18 STP X30, X23, [X31 - 0x30]!
	0x03D20D1C STP X22, X21, [X31 + 0x10]
	0x03D20D20 STP X20, X19, [X31 + 0x20]
	0x03D20D24 ADRP X23, 0x6C7000
	0x03D20D28 ADRP X22, 0x444000
	0x03D20D2C LDRB W8, [X23 + 0xA6E]
	0x03D20D30 LDR X22, [X22 + 0x438]
	0x03D20D34 MOV X20, X2
	0x03D20D38 MOV X21, X1
	0x03D20D3C MOV X19, X0
	0x03D20D40 TBNZ X8, 0x0, 0x3D20D58
	0x03D20D44 ADRP X0, 0x444000
	0x03D20D48 LDR X0, [X0 + 0x438]
	0x03D20D4C BL 0x1C16CF4
	0x03D20D50 MOVZ W8, 0x1
	0x03D20D54 STRB W8, [X23 + 0xA6E]
	0x03D20D58 MOV X0, X19
	0x03D20D5C MOV X1, X31
	0x03D20D60 BL 0x33BDD8C
	0x03D20D64 STP X21, X20, [X19 + 0x10]
	0x03D20D68 LDR X0, [X22]
	0x03D20D6C UBFM X20, X20, 0x20, 0x3F
	0x03D20D70 BL 0x1C16F10
	0x03D20D74 MOV W1, W20
	0x03D20D78 MOV X2, X31
	0x03D20D7C MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x6C8000
	006 Move X21, 0x445000
	007 Move X19, 0x3FD000
	008 Move W8, [X20+2593]
	009 Move X21, [X21+1016]
	010 Move X19, [X19+2080]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x3FD000
	016 Move X0, [X0+2080]
	017 Call 0x1C17CF4
	018 Move X0, 0x445000
	019 Move X0, [X0+1016]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2593], W8
	023 Move X0, [X21]
	024 Move W1, 1
	025 Move W2, W31
	026 Move W3, W31
	027 Move X4, X31
	028 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	029 Move X8, [X19]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X8, [X8+184]
	033 Move [X8+56], X0
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 

Method: System.Void RegisterIntermediateRenderer_Injected(UnityEngine.Camera camera, UnityEngine.Material material, ref UnityEngine.Matrix4x4 transform, ref UnityEngine.Bounds aabb, System.Int32 renderLayer, System.Int32 shadowCasting, System.Boolean receiveShadows, System.Int32 sameDistanceSortPriority, System.UInt64 sceneCullingMask, System.Int32 rendererCallbackFlags, System.IntPtr userData, System.Int32 userDataSize)

Disassembly:
	0x03D206A0 MOV X2, X31
	0x03D206A4 BL 0x3D342E8
	0x03D206A8 LDP W9, W8, [X31 + 0x70]
	0x03D206AC LDR V0, [X20]
	0x03D206B0 STR V0, [X27 + 0x1]
	0x03D206B4 CBNZ W8, 0x3D207C0
	0x03D206B8 LDR X24, [X24 + 0x50]
	0x03D206BC CBNZ X24, 0x3D20684
	0x03D206C0 STR X26, [X31 + 0x18]
	0x03D206C4 ADRP X8, 0x3D3000
	0x03D206C8 LDR X8, [X8 + 0xA28]
	0x03D206CC MOVZ W10, 0x1
	0x03D206D0 LSLV W10, W10, W23
	0x03D206D4 STR X23, [X31 + 0x20]
	0x03D206D8 LDR X0, [X8]
	0x03D206DC LDR W8, [X22 + 0x28]
	0x03D206E0 LDR W9, [X0 + 0xE0]
	0x03D206E4 ADD W24, W8, W10
	0x03D206E8 CBNZ W9, 0x3D206F0
	0x03D206EC BL 0x1C16DFC
	0x03D206F0 CMP W24, W25
	0x03D206F4 CSET W0, GE
	0x03D206F8 MOV X1, X31
	0x03D206FC STR W25, [X31 + 0x14]
	0x03D20700 BL 0x3C06E58
	0x03D20704 LDR X0, [X22 + 0x38]
	0x03D20708 CBZ X0, 0x3D2078C
	0x03D2070C ADRP X23, 0x444000
	0x03D20710 LDR X23, [X23 + 0x428]
	0x03D20714 ADD X8, X31, 0x70
	0x03D20718 MOV W25, W31
	0x03D2071C ADD X28, X8, 0x8
	0x03D20720 LDR W8, [X0 + 0x18]
	0x03D20724 CMP W25, W8
	0x03D20728 B.GE 0x3D20790
	0x03D2072C LDR X2, [X23]
	0x03D20730 MOV W1, W25
	0x03D20734 BL 0x301BCCC
	0x03D20738 CBZ X0, 0x3D2078C
	0x03D2073C LDR W8, [X0 + 0x1C]
	0x03D20740 MOV X26, X0
	0x03D20744 CMP W8, W24
	0x03D20748 B.LT 0x3D20780
	0x03D2074C LDR W8, [X26 + 0x18]
	0x03D20750 CMP W8, W21
	0x03D20754 B.LT 0x3D20780
	0x03D20758 LDR X0, [X26 + 0x20]
	0x03D2075C CBZ X0, 0x3D2078C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X8, 0x6C8000
	015 Move W27, [X31+136]
	016 Move X28, [X31+128]
	017 Move W29, [X31+120]
	018 Move X8, [X8+2600]
	019 Move X19, [X31+112]
	020 Move W23, W6
	021 Move W20, W5
	022 Move W21, W4
	023 Move X22, X3
	024 Move X24, X2
	025 Move X25, X1
	026 Move X26, X0
	027 Compare X8, 0
	028 JumpIfNotEqual {37}
	029 Move X0, -52445184
	030 Add X0, X0, 1859
	031 Move [X31+12], W7
	032 Call 0x1C17CB8
	033 Move W7, [X31+12]
	034 Move X8, X0
	035 Move X9, 0x6C8000
	036 Move [X9+2600], X0
	037 Move [X31+136], W27
	038 Move [X31+128], X28
	039 Move [X31+120], W29
	040 And W6, W23, 1
	041 Move [X31+112], X19
	042 Move X0, X26
	043 Move X1, X25
	044 Move X2, X24
	045 Move X3, X22
	046 Move W4, W21
	047 Move W5, W20
	048 Move X20, [X31+96]
	049 Move X19, [X31+104]
	050 Move X22, [X31+80]
	051 Move X21, [X31+88]
	052 Move X24, [X31+64]
	053 Move X23, [X31+72]
	054 Move X26, [X31+48]
	055 Move X25, [X31+56]
	056 Move X28, [X31+32]
	057 Move X27, [X31+40]
	058 Move X29, [X31+16]
	059 Move X30, [X31+24]
	060 Add X31, X31, 112
	061 CallNoReturn X8

Method: System.Void SetScissorRect_Injected(ref UnityEngine.RectInt scissorRect)

Disassembly:
	0x03D20890 STR X8, [X25 + 0x50]
	0x03D20894 LDRB W8, [X20 + 0xD8B]
	0x03D20898 CBNZ W8, 0x3D208B0
	0x03D2089C ADRP X0, 0x3D3000
	0x03D208A0 LDR X0, [X0 + 0x5A8]
	0x03D208A4 BL 0x1C16CF4
	0x03D208A8 MOVZ W8, 0x1
	0x03D208AC STRB W8, [X20 + 0xD8B]
	0x03D208B0 ADRP X20, 0x3D3000
	0x03D208B4 LDR X20, [X20 + 0x5A8]
	0x03D208B8 LDR W27, [X26 + 0x10]
	0x03D208BC LDR W23, [X26 + 0x18]
	0x03D208C0 LDR X0, [X20]
	0x03D208C4 LDR W8, [X0 + 0xE0]
	0x03D208C8 CBNZ W8, 0x3D208D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2608]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52502528
	010 Add X0, X0, 3338
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2608], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr CreateStencilState_Injected(ref UnityEngine.Rendering.StencilState stencilState)

Disassembly:
	0x03D20978 ADD X8, X31, 0x70
	0x03D2097C MOV W1, W21
	0x03D20980 MOV X2, X31
	0x03D20984 BL 0x3D342E8
	0x03D20988 ADRP X8, 0x3D3000
	0x03D2098C LDUR V0, [X31 + 0x78]
	0x03D20990 LDR X8, [X8 + 0xA28]
	0x03D20994 LDP W22, W20, [X31 + 0x70]
	0x03D20998 STR V0, [X31 + 0xA]
	0x03D2099C LDR X0, [X8]
	0x03D209A0 LDR W8, [X0 + 0xE0]
	0x03D209A4 CBNZ W8, 0x3D209AC
	0x03D209A8 BL 0x1C16DFC
	0x03D209AC CMP W20, 0x0
	0x03D209B0 CSET W0, NE

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2616]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52436992
	010 Add X0, X0, 2193
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2616], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void GetActiveViewport_Injected(out UnityEngine.RectInt ret)

Disassembly:
	0x03D20B6C LDR W8, [X21 + 0x1C]
	0x03D20B70 CBZ W8, 0x3D20CF4
	0x03D20B74 LDR X19, [X21 + 0x10]
	0x03D20B78 CBZ X19, 0x3D20C7C
	0x03D20B7C LDP V1, V0, [X21 + 0x10]
	0x03D20B80 LDR V2, [X21]
	0x03D20B84 LDR X0, [X19 + 0x30]
	0x03D20B88 STP V1, V0, [X31 + 0x70]
	0x03D20B8C LDUR V0, [X31 + 0x78]
	0x03D20B90 LDR X8, [X31 + 0x88]
	0x03D20B94 STR V2, [X31 + 0x6]
	0x03D20B98 STR V0, [X31 + 0x4]
	0x03D20B9C STR X8, [X31 + 0x50]
	0x03D20BA0 CBZ X0, 0x3D20C7C
	0x03D20BA4 LDR V0, [X31 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2624]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52568064
	010 Add X0, X0, 3380
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2624], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void GetUnityProjectionMatrix_Injected(out UnityEngine.Matrix4x4 ret)

Disassembly:
	0x03D20CD0 LDR X0, [X20]
	0x03D20CD4 LDR X8, [X0 + 0xB8]
	0x03D20CD8 LDR X0, [X8]
	0x03D20CDC CBZ X0, 0x3D20C7C
	0x03D20CE0 ADRP X8, 0x444000
	0x03D20CE4 LDR X8, [X8 + 0x450]
	0x03D20CE8 MOV X1, X19
	0x03D20CEC LDR X2, [X8]
	0x03D20CF0 BL 0x2EF0E90
	0x03D20CF4 LDP X20, X19, [X31 + 0xB0]
	0x03D20CF8 LDP X22, X21, [X31 + 0xA0]
	0x03D20CFC LDP X30, X23, [X31 + 0x90]
	0x03D20D00 ADD X31, X31, 0xC0
	0x03D20D04 RET
	0x03D20D08 BL 0x1C16F28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6C8000
	005 Move X1, [X20+2632]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52535296
	010 Add X0, X0, 2443
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2632], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

