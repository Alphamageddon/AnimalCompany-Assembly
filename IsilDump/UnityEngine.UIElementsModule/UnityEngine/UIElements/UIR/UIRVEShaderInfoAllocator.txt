Type: UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator

Method: System.Int32 get_pageWidth()

Disassembly:
	0x03D2B8EC CBNZ W8, 0x3D2B8F8
	0x03D2B8F0 BL 0x1C16DFC

ISIL:
	001 Move W0, 32
	002 Return X0

Method: System.Int32 get_pageHeight()

Disassembly:
	0x03D2B8F4 LDR X0, [X21]
	0x03D2B8F8 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move W0, 8
	002 Return X0

Method: UnityEngine.Vector2Int AllocToTexelCoord(ref UnityEngine.UIElements.UIR.BitmapAllocator32 allocator, UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2B8FC LDP X2, X3, [X31 + 0x90]
	0x03D2B900 MOV X0, X20
	0x03D2B904 LDR X1, [X8 + 0x120]
	0x03D2B908 BL 0x3D2A9AC
	0x03D2B90C TBZ X0, 0x0, 0x3D2BA84
	0x03D2B910 LDR X0, [X21]
	0x03D2B914 ADD X20, X19, 0x88
	0x03D2B918 LDR W8, [X0 + 0xE0]
	0x03D2B91C CBNZ W8, 0x3D2B928
	0x03D2B920 BL 0x1C16DFC
	0x03D2B924 LDR X0, [X21]
	0x03D2B928 LDR X8, [X0 + 0xB8]
	0x03D2B92C LDP X2, X3, [X31 + 0x80]
	0x03D2B930 MOV X0, X20
	0x03D2B934 LDR X1, [X8 + 0x128]
	0x03D2B938 BL 0x3D2A9AC
	0x03D2B93C TBZ X0, 0x0, 0x3D2BAA4
	0x03D2B940 LDR X0, [X21]
	0x03D2B944 LDR W8, [X0 + 0xE0]
	0x03D2B948 CBNZ W8, 0x3D2B954

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Add X2, X31, 12
	005 Add X3, X31, 8
	006 Move X19, X1
	007 Move X20, X0
	008 NotImplemented "Instruction STRH not yet implemented."
	009 NotImplemented "Instruction STRH not yet implemented."
	010 Call BitmapAllocator32.GetAllocPageAtlasLocation, X0, X1, X2, X3
	011 NotImplemented "Instruction LDRH not yet implemented."
	012 Move W9, [X20+24]
	013 Move W10, [X20+28]
	014 NotImplemented "Instruction LDRH not yet implemented."
	015 Move X12, X19
	016 ShiftRight X12, 48
	017 And X12, X12, 0x7FFFFF
	018 Move X13, X19
	019 ShiftRight X13, 32
	020 And X13, X13, 0x7FFF
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 NotImplemented "Instruction MADD not yet implemented."
	024 NotImplemented "Instruction MADD not yet implemented."
	025 NotImplemented "Instruction BFM not yet implemented."
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Int32 AllocToConstantBufferIndex(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2B94C BL 0x1C16DFC
	0x03D2B950 LDR X0, [X21]
	0x03D2B954 LDR X8, [X0 + 0xB8]
	0x03D2B958 ADD X2, X31, 0x40
	0x03D2B95C MOV X0, X19
	0x03D2B960 LDR X1, [X8 + 0x108]
	0x03D2B964 LDUR V0, [X8 + 0x58]
	0x03D2B968 LDUR V1, [X8 + 0x48]
	0x03D2B96C LDUR V2, [X8 + 0x38]
	0x03D2B970 LDUR V3, [X8 + 0x28]
	0x03D2B974 STP V1, V0, [X31 + 0x60]
	0x03D2B978 STP V3, V2, [X31 + 0x40]
	0x03D2B97C BL 0x3D2BAEC
	0x03D2B980 LDR X8, [X21]
	0x03D2B984 MOV X0, X19
	0x03D2B988 LDR X8, [X8 + 0xB8]
	0x03D2B98C LDR X1, [X8 + 0x110]
	0x03D2B990 LDP S0, S1, [X8 + 0x98]
	0x03D2B994 LDP S2, S3, [X8 + 0xA0]
	0x03D2B998 BL 0x3D2BD28
	0x03D2B99C LDR X8, [X21]
	0x03D2B9A0 MOV X0, X19
	0x03D2B9A4 LDR X8, [X8 + 0xB8]
	0x03D2B9A8 LDR X1, [X8 + 0x118]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x6BD000
	006 Move X21, 0x43A000
	007 Move W8, [X20+2784]
	008 Move X21, [X21+1888]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x43A000
	015 Move X0, [X0+1888]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2784], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, X19
	025 ShiftRight X8, 48
	026 And X8, X8, 0x7FFFFFFF
	027 Move X9, X19
	028 ShiftRight X9, 27
	029 And X9, X9, 0x7FFFFFFF
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 And W9, W9, 0x1FFFE0
	033 Add W0, W9, W8
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Boolean AtlasRectMatchesPage(ref UnityEngine.UIElements.UIR.BitmapAllocator32 allocator, UnityEngine.UIElements.UIR.BMPAlloc defAlloc, UnityEngine.RectInt atlasRect)

Disassembly:
	0x03D2B9AC LDR V0, [X8 + 0xB4]
	0x03D2B9B0 BL 0x3D2BE84
	0x03D2B9B4 LDR X8, [X21]
	0x03D2B9B8 MOV X0, X19
	0x03D2B9BC MOV W2, W31
	0x03D2B9C0 LDR X8, [X8 + 0xB8]
	0x03D2B9C4 LDR X1, [X8 + 0x120]
	0x03D2B9C8 LDP S0, S1, [X8 + 0xB8]
	0x03D2B9CC LDP S2, S3, [X8 + 0xC0]
	0x03D2B9D0 BL 0x3D2BF84
	0x03D2B9D4 LDR X8, [X21]
	0x03D2B9D8 ADD X2, X31, 0x0
	0x03D2B9DC MOV X0, X19
	0x03D2B9E0 MOV W3, W31
	0x03D2B9E4 LDR X8, [X8 + 0xB8]
	0x03D2B9E8 LDR X1, [X8 + 0x128]
	0x03D2B9EC LDUR V0, [X8 + 0xF8]
	0x03D2B9F0 LDUR V1, [X8 + 0xE8]
	0x03D2B9F4 LDUR V2, [X8 + 0xC8]
	0x03D2B9F8 LDUR V3, [X8 + 0xD8]
	0x03D2B9FC STP V1, V0, [X31 + 0x20]
	0x03D2BA00 STP V2, V3, [X31]
	0x03D2BA04 BL 0x3D2C10C
	0x03D2BA08 MOVZ W8, 0x1
	0x03D2BA0C STRB W8, [X19 + 0xA8]
	0x03D2BA10 LDP X20, X19, [X31 + 0xE0]
	0x03D2BA14 LDP X30, X21, [X31 + 0xD0]
	0x03D2BA18 ADD X31, X31, 0xF0
	0x03D2BA1C RET
	0x03D2BA20 BL 0x1C16F20
	0x03D2BA24 ADRP X0, 0x3C8000
	0x03D2BA28 LDR X0, [X0 + 0x7D0]
	0x03D2BA2C BL 0x1C16D08
	0x03D2BA30 BL 0x1C16F10
	0x03D2BA34 MOV X19, X0
	0x03D2BA38 ADRP X0, 0x439000
	0x03D2BA3C LDR X0, [X0 + 0xBC0]
	0x03D2BA40 B 0x3D2BAC0
	0x03D2BA44 ADRP X0, 0x3C8000
	0x03D2BA48 LDR X0, [X0 + 0x7D0]
	0x03D2BA4C BL 0x1C16D08
	0x03D2BA50 BL 0x1C16F10
	0x03D2BA54 MOV X19, X0
	0x03D2BA58 ADRP X0, 0x439000
	0x03D2BA5C LDR X0, [X0 + 0xBC8]
	0x03D2BA60 B 0x3D2BAC0
	0x03D2BA64 ADRP X0, 0x3C8000
	0x03D2BA68 LDR X0, [X0 + 0x7D0]
	0x03D2BA6C BL 0x1C16D08
	0x03D2BA70 BL 0x1C16F10
	0x03D2BA74 MOV X19, X0
	0x03D2BA78 ADRP X0, 0x439000
	0x03D2BA7C LDR X0, [X0 + 0xBD0]
	0x03D2BA80 B 0x3D2BAC0
	0x03D2BA84 ADRP X0, 0x3C8000
	0x03D2BA88 LDR X0, [X0 + 0x7D0]
	0x03D2BA8C BL 0x1C16D08
	0x03D2BA90 BL 0x1C16F10
	0x03D2BA94 MOV X19, X0
	0x03D2BA98 ADRP X0, 0x439000
	0x03D2BA9C LDR X0, [X0 + 0xBD8]
	0x03D2BAA0 B 0x3D2BAC0
	0x03D2BAA4 ADRP X0, 0x3C8000
	0x03D2BAA8 LDR X0, [X0 + 0x7D0]
	0x03D2BAAC BL 0x1C16D08
	0x03D2BAB0 BL 0x1C16F10
	0x03D2BAB4 MOV X19, X0
	0x03D2BAB8 ADRP X0, 0x439000
	0x03D2BABC LDR X0, [X0 + 0xBE0]
	0x03D2BAC0 BL 0x1C16D08
	0x03D2BAC4 MOV X1, X0
	0x03D2BAC8 MOV X0, X19
	0x03D2BACC MOV X2, X31
	0x03D2BAD0 BL 0x33B2C70
	0x03D2BAD4 ADRP X0, 0x439000
	0x03D2BAD8 LDR X0, [X0 + 0xBE8]
	0x03D2BADC BL 0x1C16D08
	0x03D2BAE0 MOV X1, X0
	0x03D2BAE4 MOV X0, X19
	0x03D2BAE8 BL 0x1C16DEC
	0x03D2BAEC STP D15, D14, [X31 - 0x70]!
	0x03D2BAF0 STP D13, D12, [X31 + 0x10]
	0x03D2BAF4 STP D11, D10, [X31 + 0x20]
	0x03D2BAF8 STP D9, D8, [X31 + 0x30]
	0x03D2BAFC STP X30, X23, [X31 + 0x40]
	0x03D2BB00 STP X22, X21, [X31 + 0x50]
	0x03D2BB04 STP X20, X19, [X31 + 0x60]
	0x03D2BB08 ADRP X23, 0x6BC000
	0x03D2BB0C ADRP X22, 0x439000
	0x03D2BB10 LDRB W8, [X23 + 0xAED]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0x6BD000
	011 Move W8, [X23+2785]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x43A000
	021 Move X0, [X0+1888]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2785], W8
	025 Add X2, X31, 12
	026 Add X3, X31, 8
	027 Move X0, X20
	028 Move W1, W22
	029 NotImplemented "Instruction STRH not yet implemented."
	030 NotImplemented "Instruction STRH not yet implemented."
	031 Call BitmapAllocator32.GetAllocPageAtlasLocation, X0, X1, X2, X3
	032 Move X23, 0x6BA000
	033 Move W8, [X23+3467]
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x3C9000
	038 Move X0, [X0+1448]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X23+3467], W8
	042 Move X23, 0x3C9000
	043 Move X23, [X23+1448]
	044 Move X0, [X23]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Add W1, W19, W21
	050 Move W0, W21
	051 Move X2, X31
	052 Call Math.Min, X0, X1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X25, 0x6BA000
	055 Move W8, [X25+3468]
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Move X21, X21
	058 ShiftRight X21, 32
	059 And X21, X21, 0x7FFFFFFF
	060 Move X22, X19
	061 ShiftRight X22, 32
	062 And X22, X22, 0x7FFFFFFF
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x3C9000
	066 Move X0, [X0+1448]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X25+3468], W8
	070 Move X0, [X23]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Add W1, W22, W21
	076 Move W0, W21
	077 Move X2, X31
	078 Call Math.Min, X0, X1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X21, 0x43A000
	081 Move X21, [X21+1888]
	082 Move W23, [X20+24]
	083 Move X0, [X21]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X0, [X21]
	090 Move W19, [X20+28]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSET not yet implemented."
	097 Move W0, W31
	098 Move X20, [X31+64]
	099 Move X19, [X31+72]
	100 Move X22, [X31+48]
	101 Move X21, [X31+56]
	102 Move X24, [X31+32]
	103 Move X23, [X31+40]
	104 Move X30, [X31+16]
	105 Move X25, [X31+24]
	106 Add X31, X31, 80
	107 Return X0

Method: Unity.Collections.NativeSlice`1<UnityEngine.UIElements.UIR.Transform3x4> get_transformConstants()

Disassembly:
	0x03D2BB14 LDR X22, [X22 + 0x9C8]
	0x03D2BB18 MOV X20, X2
	0x03D2BB1C MOV X21, X1
	0x03D2BB20 MOV X19, X0
	0x03D2BB24 TBNZ X8, 0x0, 0x3D2BB54
	0x03D2BB28 ADRP X0, 0x439000
	0x03D2BB2C LDR X0, [X0 + 0x9C8]
	0x03D2BB30 BL 0x1C16CF4
	0x03D2BB34 ADRP X0, 0x3C8000
	0x03D2BB38 LDR X0, [X0 + 0xA28]
	0x03D2BB3C BL 0x1C16CF4
	0x03D2BB40 ADRP X0, 0x439000
	0x03D2BB44 LDR X0, [X0 + 0x760]
	0x03D2BB48 BL 0x1C16CF4
	0x03D2BB4C MOVZ W8, 0x1
	0x03D2BB50 STRB W8, [X23 + 0xAED]
	0x03D2BB54 LDR X0, [X22]
	0x03D2BB58 ADRP X22, 0x3C8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6BD000
	006 Move X20, 0x43A000
	007 Move W8, [X21+2786]
	008 Move X20, [X20+2952]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x43A000
	015 Move X0, [X0+2952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2786], W8
	019 Move X0, [X19+176]
	020 Move X1, [X19+184]
	021 Move X2, [X20]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call NativeSlice`1<Transform3x4>.op_Implicit, X0
	027 Return X0

Method: Unity.Collections.NativeSlice`1<UnityEngine.Vector4> get_clipRectConstants()

Disassembly:
	0x03D2BB5C LDR W8, [X0 + 0xE0]
	0x03D2BB60 LDR X22, [X22 + 0xA28]
	0x03D2BB64 CBNZ W8, 0x3D2BB6C
	0x03D2BB68 BL 0x1C16DFC
	0x03D2BB6C LDR X0, [X22]
	0x03D2BB70 LDR W8, [X0 + 0xE0]
	0x03D2BB74 CBNZ W8, 0x3D2BB7C
	0x03D2BB78 BL 0x1C16DFC
	0x03D2BB7C ADRP X22, 0x439000
	0x03D2BB80 LDR X22, [X22 + 0x760]
	0x03D2BB84 ORN W8, W31, W21, 0x0
	0x03D2BB88 UBFM W0, W8, 0x1F, 0x1F
	0x03D2BB8C MOV X1, X31
	0x03D2BB90 BL 0x3C06E58
	0x03D2BB94 LDRB W8, [X19 + 0xA9]
	0x03D2BB98 CBZ W8, 0x3D2BC70
	0x03D2BB9C LDR X0, [X22]
	0x03D2BBA0 ADD X22, X19, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x6BD000
	006 Move X20, 0x43A000
	007 Move W8, [X21+2787]
	008 Move X20, [X20+2960]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x43A000
	015 Move X0, [X0+2960]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2787], W8
	019 Move X0, [X19+192]
	020 Move X1, [X19+200]
	021 Move X2, [X20]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call NativeSlice`1<Vector4>.op_Implicit, X0
	027 Return X0

Method: UnityEngine.Texture get_atlas()

Disassembly:
	0x03D2BBA4 LDR W8, [X0 + 0xE0]
	0x03D2BBA8 CBNZ W8, 0x3D2BBB0
	0x03D2BBAC BL 0x1C16DFC
	0x03D2BBB0 MOV X0, X22
	0x03D2BBB4 MOV X1, X21
	0x03D2BBB8 BL 0x3D2A8FC
	0x03D2BBBC LDR X23, [X19]
	0x03D2BBC0 MOV X21, X0
	0x03D2BBC4 MOV X0, X20
	0x03D2BBC8 MOV W1, W31
	0x03D2BBCC MOV X2, X31
	0x03D2BBD0 BL 0x3C280A0
	0x03D2BBD4 CBZ X23, 0x3D2BD24
	0x03D2BBD8 LDR X8, [X23]
	0x03D2BBDC UBFM X22, X21, 0x20, 0x3F
	0x03D2BBE0 MOV X0, X23
	0x03D2BBE4 MOV W1, W21
	0x03D2BBE8 LDP X9, X3, [X8 + 0x1A8]
	0x03D2BBEC MOV W2, W22
	0x03D2BBF0 BLR X9
	0x03D2BBF4 LDR X23, [X19]
	0x03D2BBF8 MOVZ W1, 0x1
	0x03D2BBFC MOV X0, X20
	0x03D2BC00 MOV X2, X31
	0x03D2BC04 BL 0x3C280A0
	0x03D2BC08 CBZ X23, 0x3D2BD24
	0x03D2BC0C LDR X8, [X23]
	0x03D2BC10 ADD W2, W22, 0x1
	0x03D2BC14 MOV X0, X23
	0x03D2BC18 MOV W1, W21
	0x03D2BC1C LDP X9, X3, [X8 + 0x1A8]
	0x03D2BC20 BLR X9
	0x03D2BC24 LDR X19, [X19]
	0x03D2BC28 MOVZ W1, 0x2
	0x03D2BC2C MOV X0, X20
	0x03D2BC30 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6BD000
	005 Move W8, [X20+2788]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x43A000
	012 Move X0, [X0+1784]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2788], W8
	016 Move W8, [X19+168]
	017 Compare W8, 0
	018 JumpIfEqual {29}
	019 Move X0, [X19]
	020 Compare X0, 0
	021 JumpIfEqual {49}
	022 Move X8, [X0]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X2, [X8+392]
	026 Move X1, [X8+400]
	027 Move X30, [X31+32]
	028 CallNoReturn X2
	029 Move X8, 0x43A000
	030 Move X8, [X8+1784]
	031 Move W19, [X19+169]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfEqual {43}
	036 Compare W19, 0
	037 JumpIfEqual {46}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Call UIRenderDevice.get_defaultShaderInfoTexFloat
	042 Return X0
	043 Call 0x1C17DFC
	044 Compare W19, 0
	045 JumpIfNotEqual {38}
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Call 0x1C17F20

Method: System.Void Construct()

Disassembly:
	0x03D2C294 MOV V0.16B, V1.16B
	0x03D2C298 BL 0x3C25A10
	0x03D2C29C CBZ X23, 0x3D2C3E0
	0x03D2C2A0 LDR X8, [X23]
	0x03D2C2A4 LDR V3, [X20 + 0x1C]
	0x03D2C2A8 MOV V2.16B, V0.16B
	0x03D2C2AC ADD W2, W22, 0x1
	0x03D2C2B0 LDP X9, X3, [X8 + 0x1A8]
	0x03D2C2B4 MOV X0, X23
	0x03D2C2B8 MOV W1, W21
	0x03D2C2BC MOV V0.16B, V11.16B
	0x03D2C2C0 MOV V1.16B, V12.16B
	0x03D2C2C4 BLR X9
	0x03D2C2C8 LDR V0, [X20 + 0x24]
	0x03D2C2CC LDR X23, [X19]
	0x03D2C2D0 MOV X0, X31
	0x03D2C2D4 BL 0x3C25A10
	0x03D2C2D8 LDR V1, [X20 + 0x28]
	0x03D2C2DC MOV V11.16B, V0.16B
	0x03D2C2E0 MOV X0, X31
	0x03D2C2E4 MOV V0.16B, V1.16B
	0x03D2C2E8 BL 0x3C25A10
	0x03D2C2EC LDR V1, [X20 + 0x2C]
	0x03D2C2F0 MOV V12.16B, V0.16B
	0x03D2C2F4 MOV X0, X31
	0x03D2C2F8 MOV V0.16B, V1.16B
	0x03D2C2FC BL 0x3C25A10
	0x03D2C300 CBZ X23, 0x3D2C3E0
	0x03D2C304 LDR X8, [X23]
	0x03D2C308 LDR V3, [X20 + 0x30]
	0x03D2C30C MOV V2.16B, V0.16B
	0x03D2C310 ADD W2, W22, 0x2
	0x03D2C314 LDP X9, X3, [X8 + 0x1A8]
	0x03D2C318 MOV X0, X23
	0x03D2C31C MOV W1, W21
	0x03D2C320 MOV V0.16B, V11.16B
	0x03D2C324 MOV V1.16B, V12.16B
	0x03D2C328 B 0x3D2C394
	0x03D2C32C CBZ X24, 0x3D2C3E0
	0x03D2C330 LDR X8, [X24]
	0x03D2C334 LDP S2, S3, [X20 + 0x8]
	0x03D2C338 LDP S0, S1, [X20]
	0x03D2C33C MOV X0, X24
	0x03D2C340 LDP X9, X3, [X8 + 0x1A8]
	0x03D2C344 MOV W1, W21
	0x03D2C348 MOV W2, W22
	0x03D2C34C BLR X9
	0x03D2C350 LDR X0, [X19]
	0x03D2C354 CBZ X0, 0x3D2C3E0
	0x03D2C358 LDR X8, [X0]
	0x03D2C35C LDP S2, S3, [X20 + 0x18]
	0x03D2C360 LDP S0, S1, [X20 + 0x10]
	0x03D2C364 ADD W2, W22, 0x1
	0x03D2C368 LDP X9, X3, [X8 + 0x1A8]
	0x03D2C36C MOV W1, W21
	0x03D2C370 BLR X9
	0x03D2C374 LDR X0, [X19]
	0x03D2C378 CBZ X0, 0x3D2C3E0
	0x03D2C37C LDR X8, [X0]
	0x03D2C380 LDP S2, S3, [X20 + 0x2C]
	0x03D2C384 LDP S0, S1, [X20 + 0x24]
	0x03D2C388 ADD W2, W22, 0x2
	0x03D2C38C LDP X9, X3, [X8 + 0x1A8]
	0x03D2C390 MOV W1, W21
	0x03D2C394 BLR X9
	0x03D2C398 LDR X0, [X19]
	0x03D2C39C CBZ X0, 0x3D2C3E0
	0x03D2C3A0 LDR X8, [X0]
	0x03D2C3A4 ADD W2, W22, 0x3
	0x03D2C3A8 MOV W1, W21
	0x03D2C3AC MOV V1.16B, V8.16B
	0x03D2C3B0 LDP X4, X3, [X8 + 0x1A8]
	0x03D2C3B4 MOV V2.16B, V9.16B
	0x03D2C3B8 MOV V3.16B, V10.16B
	0x03D2C3BC LDP X20, X19, [X31 + 0x60]
	0x03D2C3C0 LDP X22, X21, [X31 + 0x50]
	0x03D2C3C4 LDP X24, X23, [X31 + 0x40]
	0x03D2C3C8 LDR X30, [X31 + 0x30]
	0x03D2C3CC LDP D9, D8, [X31 + 0x20]
	0x03D2C3D0 LDP D11, D10, [X31 + 0x10]
	0x03D2C3D4 FNEG S0, S13
	0x03D2C3D8 LDP D13, D12, [X31], #0x70
	0x03D2C3DC BR X4
	0x03D2C3E0 BL 0x1C16F20
	0x03D2C3E4 STR X30, [X31 - 0x20]!
	0x03D2C3E8 STP X20, X19, [X31 + 0x10]
	0x03D2C3EC ADRP X20, 0x6BB000
	0x03D2C3F0 LDRB W8, [X20 + 0xAE7]
	0x03D2C3F4 MOV X19, X0
	0x03D2C3F8 TBNZ X8, 0x0, 0x3D2C434
	0x03D2C3FC ADRP X0, 0x438000
	0x03D2C400 LDR X0, [X0 + 0xBF0]
	0x03D2C404 BL 0x1C16CF4
	0x03D2C408 ADRP X0, 0x438000
	0x03D2C40C LDR X0, [X0 + 0xBF8]
	0x03D2C410 BL 0x1C16CF4
	0x03D2C414 ADRP X0, 0x438000
	0x03D2C418 LDR X0, [X0 + 0xC00]
	0x03D2C41C BL 0x1C16CF4
	0x03D2C420 ADRP X0, 0x438000
	0x03D2C424 LDR X0, [X0 + 0xC08]
	0x03D2C428 BL 0x1C16CF4
	0x03D2C42C MOVZ W8, 0x1
	0x03D2C430 STRB W8, [X20 + 0xAE7]
	0x03D2C434 LDR X0, [X19]
	0x03D2C438 CBZ X0, 0x3D2C440
	0x03D2C43C BL 0x3D27A60
	0x03D2C440 STR X31, [X19]
	0x03D2C444 MOV X0, X19
	0x03D2C448 LDR X8, [X0 + 0xC0]!
	0x03D2C44C CBZ X8, 0x3D2C460
	0x03D2C450 ADRP X8, 0x438000
	0x03D2C454 LDR X8, [X8 + 0xBF8]
	0x03D2C458 LDR X1, [X8]
	0x03D2C45C BL 0x23F2098
	0x03D2C460 MOV X0, X19
	0x03D2C464 LDR X8, [X0 + 0xB0]!
	0x03D2C468 CBZ X8, 0x3D2C47C
	0x03D2C46C ADRP X8, 0x438000
	0x03D2C470 LDR X8, [X8 + 0xBF0]
	0x03D2C474 LDR X1, [X8]
	0x03D2C478 BL 0x23E62A0
	0x03D2C47C STRB W31, [X19 + 0xA8]
	0x03D2C480 LDP X20, X19, [X31 + 0x10]
	0x03D2C484 LDR X30, [X31], #0x20
	0x03D2C488 RET
	0x03D2C48C LDR X0, [X0]
	0x03D2C490 CBZ X0, 0x3D2C4A0
	0x03D2C494 LDR X8, [X0]
	0x03D2C498 LDP X2, X1, [X8 + 0x1B8]
	0x03D2C49C BR X2
	0x03D2C4A0 RET
	0x03D2C4A4 STP X30, X21, [X31 - 0x20]!
	0x03D2C4A8 STP X20, X19, [X31 + 0x10]
	0x03D2C4AC ADRP X20, 0x6BB000
	0x03D2C4B0 LDRB W8, [X20 + 0xAE8]
	0x03D2C4B4 MOV X19, X0
	0x03D2C4B8 TBNZ X8, 0x0, 0x3D2C4DC
	0x03D2C4BC ADRP X0, 0x438000
	0x03D2C4C0 LDR X0, [X0 + 0x9C8]
	0x03D2C4C4 BL 0x1C16CF4
	0x03D2C4C8 ADRP X0, 0x438000
	0x03D2C4CC LDR X0, [X0 + 0x760]
	0x03D2C4D0 BL 0x1C16CF4
	0x03D2C4D4 MOVZ W8, 0x1
	0x03D2C4D8 STRB W8, [X20 + 0xAE8]
	0x03D2C4DC LDRB W8, [X19 + 0xA8]
	0x03D2C4E0 CBNZ W8, 0x3D2C504
	0x03D2C4E4 ADRP X8, 0x438000
	0x03D2C4E8 LDR X8, [X8 + 0x760]
	0x03D2C4EC LDR X0, [X8]
	0x03D2C4F0 LDR W8, [X0 + 0xE0]
	0x03D2C4F4 CBNZ W8, 0x3D2C4FC
	0x03D2C4F8 BL 0x1C16DFC
	0x03D2C4FC MOV X0, X19
	0x03D2C500 BL 0x3D2B6E8
	0x03D2C504 LDRB W8, [X19 + 0xA9]
	0x03D2C508 ADD X20, X19, 0x8

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x6BC000
	012 Move X25, 0x439000
	013 Move W8, [X20+2789]
	014 Move X25, [X25+1888]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x439000
	021 Move X0, [X0+2984]
	022 Call 0x1C17CF4
	023 Move X0, 0x439000
	024 Move X0, [X0+2992]
	025 Call 0x1C17CF4
	026 Move X0, 0x439000
	027 Move X0, [X0+1888]
	028 Call 0x1C17CF4
	029 Move X0, 0x439000
	030 Move X0, [X0+1784]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+2789], W8
	034 NotImplemented "Instruction MOVI not yet implemented."
	035 Move X20, X19
	036 Move [X31+64], V0
	037 Move [X31+72], V0
	038 Move [X31+3], V0
	039 Move [X20+136], V0
	040 Move X24, X20
	041 Move X23, X20
	042 Move X21, X20
	043 Move X22, X20
	044 Move [X20+1], V0
	045 Move [X20-112], V0
	046 Move [X24-128], V0
	047 Move [X23-96], V0
	048 Move [X20-80], V0
	049 Move [X21-32], V0
	050 Move [X20-16], V0
	051 Move [X22-64], V0
	052 Move [X20-48], V0
	053 Move X0, [X25]
	054 Move X26, 0x439000
	055 Move W8, [X0+224]
	056 Move X26, [X26+1784]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move W1, 8
	061 Move W2, 1
	062 Move W3, 3
	063 Move X0, X24
	064 Call BitmapAllocator32.Construct, X0, X1, X2, X3
	065 Move X8, [X25]
	066 Move X0, X24
	067 Move X8, [X8+184]
	068 Move W1, [X8]
	069 Move W2, [X8+4]
	070 Call BitmapAllocator32.ForceFirstAlloc, X0, X1, X2
	071 Move W1, 8
	072 Move W2, 1
	073 Move W3, 1
	074 Move X0, X23
	075 Call BitmapAllocator32.Construct, X0, X1, X2, X3
	076 Move X8, [X25]
	077 Move X0, X23
	078 Move X8, [X8+184]
	079 Move W1, [X8+8]
	080 Move W2, [X8+12]
	081 Call BitmapAllocator32.ForceFirstAlloc, X0, X1, X2
	082 Move W1, 8
	083 Move W2, 1
	084 Move W3, 1
	085 Move X0, X22
	086 Call BitmapAllocator32.Construct, X0, X1, X2, X3
	087 Move X8, [X25]
	088 Move X0, X22
	089 Move X8, [X8+184]
	090 Move W1, [X8+16]
	091 Move W2, [X8+20]
	092 Call BitmapAllocator32.ForceFirstAlloc, X0, X1, X2
	093 Move W1, 8
	094 Move W2, 1
	095 Move W3, 1
	096 Move X0, X21
	097 Call BitmapAllocator32.Construct, X0, X1, X2, X3
	098 Move X8, [X25]
	099 Move X0, X21
	100 Move X8, [X8+184]
	101 Move W1, [X8+24]
	102 Move W2, [X8+28]
	103 Call BitmapAllocator32.ForceFirstAlloc, X0, X1, X2
	104 Move W1, 8
	105 Move W2, 1
	106 Move W3, 4
	107 Move X0, X20
	108 Call BitmapAllocator32.Construct, X0, X1, X2, X3
	109 Move X8, [X25]
	110 Move X0, X20
	111 Move X8, [X8+184]
	112 Move W1, [X8+32]
	113 Move W2, [X8+36]
	114 Call BitmapAllocator32.ForceFirstAlloc, X0, X1, X2
	115 Move X0, [X26]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Call UIRenderDevice.get_vertexTexturingIsAvailable
	121 And W8, W0, 1
	122 Move [X19+169], W8
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfEqual {175}
	127 Move X8, 0x439000
	128 Move X8, [X8+2992]
	129 Move X20, 0x439000
	130 Add X0, X31, 32
	131 Move W1, 20
	132 Move X4, [X8]
	133 Move X20, [X20+2984]
	134 Move W2, 4
	135 Move W3, W31
	136 Move [X31+32], X31
	137 Move [X31+40], X31
	138 Call NativeArray`1<Transform3x4>..ctor, X0, X1, X2, X3
	139 Move V0, [X31+2]
	140 Add X0, X31, 16
	141 Move W1, 20
	142 Move W2, 4
	143 Move [X19+11], V0
	144 Move X4, [X20]
	145 Move W3, W31
	146 Add X20, X19, 176
	147 Move [X31+16], X31
	148 Move [X31+24], X31
	149 Call NativeArray`1<Vector4>..ctor, X0, X1, X2, X3
	150 Move V0, [X31+1]
	151 Move [X19+192], V0
	152 Move X0, [X25]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {158}
	156 Call 0x1C17DFC
	157 Move X0, [X25]
	158 Move X8, [X0+184]
	159 NotImplemented "Instruction LDUR not yet implemented."
	160 NotImplemented "Instruction LDUR not yet implemented."
	161 Move [X31+48], V0
	162 Move [X31+56], V1
	163 NotImplemented "Instruction LDUR not yet implemented."
	164 Move [X31+5], V2
	165 Move X8, [X20]
	166 Move [X8+16], V1
	167 Move [X8+24], V2
	168 Move [X8], V0
	169 Move X8, [X25]
	170 Move X8, [X8+184]
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 Move [X31], V0
	173 Move X8, [X19]
	174 Move [X8], V0
	175 Move X20, [X31+160]
	176 Move X19, [X31+168]
	177 Move X22, [X31+144]
	178 Move X21, [X31+152]
	179 Move X24, [X31+128]
	180 Move X23, [X31+136]
	181 Move X26, [X31+112]
	182 Move X25, [X31+120]
	183 Move X30, [X31+96]
	184 Add X31, X31, 176
	185 Return 

Method: System.Void ReallyCreateStorage()

Disassembly:
	0x03D2C6E8 CBNZ W8, 0x3D2C6F0
	0x03D2C6EC BL 0x1C16DFC
	0x03D2C6F0 MOV X0, X19
	0x03D2C6F4 BL 0x3D2B6E8
	0x03D2C6F8 LDR X1, [X19], #0x48
	0x03D2C6FC MOV X0, X19
	0x03D2C700 LDP X20, X19, [X31 + 0x10]
	0x03D2C704 LDR X30, [X31], #0x20
	0x03D2C708 B 0x3D2A230
	0x03D2C70C STR X30, [X31 - 0x20]!
	0x03D2C710 STP X20, X19, [X31 + 0x10]
	0x03D2C714 ADRP X20, 0x6BB000
	0x03D2C718 LDRB W8, [X20 + 0xAEB]
	0x03D2C71C MOV X19, X0
	0x03D2C720 TBNZ X8, 0x0, 0x3D2C738
	0x03D2C724 ADRP X0, 0x438000
	0x03D2C728 LDR X0, [X0 + 0x760]
	0x03D2C72C BL 0x1C16CF4
	0x03D2C730 MOVZ W8, 0x1
	0x03D2C734 STRB W8, [X20 + 0xAEB]
	0x03D2C738 LDRB W8, [X19 + 0xA8]
	0x03D2C73C CBNZ W8, 0x3D2C760
	0x03D2C740 ADRP X8, 0x438000
	0x03D2C744 LDR X8, [X8 + 0x760]
	0x03D2C748 LDR X0, [X8]
	0x03D2C74C LDR W8, [X0 + 0xE0]
	0x03D2C750 CBNZ W8, 0x3D2C758
	0x03D2C754 BL 0x1C16DFC
	0x03D2C758 MOV X0, X19
	0x03D2C75C BL 0x3D2B6E8
	0x03D2C760 LDR X1, [X19], #0x68
	0x03D2C764 MOV X0, X19
	0x03D2C768 LDP X20, X19, [X31 + 0x10]
	0x03D2C76C LDR X30, [X31], #0x20
	0x03D2C770 B 0x3D2A230
	0x03D2C774 STR X30, [X31 - 0x20]!
	0x03D2C778 STP X20, X19, [X31 + 0x10]
	0x03D2C77C ADRP X20, 0x6BB000
	0x03D2C780 LDRB W8, [X20 + 0xAEC]
	0x03D2C784 MOV X19, X0
	0x03D2C788 TBNZ X8, 0x0, 0x3D2C7A0
	0x03D2C78C ADRP X0, 0x438000
	0x03D2C790 LDR X0, [X0 + 0x760]
	0x03D2C794 BL 0x1C16CF4
	0x03D2C798 MOVZ W8, 0x1
	0x03D2C79C STRB W8, [X20 + 0xAEC]
	0x03D2C7A0 LDRB W8, [X19 + 0xA8]
	0x03D2C7A4 CBNZ W8, 0x3D2C7C8
	0x03D2C7A8 ADRP X8, 0x438000
	0x03D2C7AC LDR X8, [X8 + 0x760]
	0x03D2C7B0 LDR X0, [X8]
	0x03D2C7B4 LDR W8, [X0 + 0xE0]
	0x03D2C7B8 CBNZ W8, 0x3D2C7C0
	0x03D2C7BC BL 0x1C16DFC
	0x03D2C7C0 MOV X0, X19
	0x03D2C7C4 BL 0x3D2B6E8
	0x03D2C7C8 LDR X1, [X19], #0x88
	0x03D2C7CC MOV X0, X19
	0x03D2C7D0 LDP X20, X19, [X31 + 0x10]
	0x03D2C7D4 LDR X30, [X31], #0x20
	0x03D2C7D8 B 0x3D2A230
	0x03D2C7DC STR X30, [X31 - 0x30]!
	0x03D2C7E0 STP X22, X21, [X31 + 0x10]
	0x03D2C7E4 STP X20, X19, [X31 + 0x20]
	0x03D2C7E8 ADRP X22, 0x6BB000
	0x03D2C7EC ADRP X21, 0x438000
	0x03D2C7F0 LDRB W8, [X22 + 0xAF2]
	0x03D2C7F4 LDR X21, [X21 + 0x9C8]
	0x03D2C7F8 MOV X19, X1
	0x03D2C7FC MOV X20, X0
	0x03D2C800 TBNZ X8, 0x0, 0x3D2C824
	0x03D2C804 ADRP X0, 0x438000
	0x03D2C808 LDR X0, [X0 + 0x9C8]
	0x03D2C80C BL 0x1C16CF4
	0x03D2C810 ADRP X0, 0x3C7000
	0x03D2C814 LDR X0, [X0 + 0xA28]
	0x03D2C818 BL 0x1C16CF4
	0x03D2C81C MOVZ W8, 0x1
	0x03D2C820 STRB W8, [X22 + 0xAF2]
	0x03D2C824 LDR X0, [X21]
	0x03D2C828 ADRP X21, 0x3C7000
	0x03D2C82C LDR W8, [X0 + 0xE0]
	0x03D2C830 LDR X21, [X21 + 0xA28]
	0x03D2C834 CBNZ W8, 0x3D2C83C
	0x03D2C838 BL 0x1C16DFC
	0x03D2C83C LDR X0, [X21]
	0x03D2C840 LDR W8, [X0 + 0xE0]
	0x03D2C844 CBNZ W8, 0x3D2C84C
	0x03D2C848 BL 0x1C16DFC
	0x03D2C84C ORN W8, W31, W19, 0x0
	0x03D2C850 UBFM W0, W8, 0x1F, 0x1F
	0x03D2C854 MOV X1, X31
	0x03D2C858 BL 0x3C06E58
	0x03D2C85C ADD X0, X20, 0x8
	0x03D2C860 MOV X1, X19
	0x03D2C864 LDP X20, X19, [X31 + 0x20]
	0x03D2C868 LDP X22, X21, [X31 + 0x10]
	0x03D2C86C LDR X30, [X31], #0x30
	0x03D2C870 B 0x3D2A720
	0x03D2C874 STR X30, [X31 - 0x30]!
	0x03D2C878 STP X22, X21, [X31 + 0x10]
	0x03D2C87C STP X20, X19, [X31 + 0x20]
	0x03D2C880 ADRP X22, 0x6BB000
	0x03D2C884 ADRP X21, 0x438000
	0x03D2C888 LDRB W8, [X22 + 0xAF3]
	0x03D2C88C LDR X21, [X21 + 0x9C8]
	0x03D2C890 MOV X19, X1
	0x03D2C894 MOV X20, X0
	0x03D2C898 TBNZ X8, 0x0, 0x3D2C8BC
	0x03D2C89C ADRP X0, 0x438000
	0x03D2C8A0 LDR X0, [X0 + 0x9C8]
	0x03D2C8A4 BL 0x1C16CF4
	0x03D2C8A8 ADRP X0, 0x3C7000
	0x03D2C8AC LDR X0, [X0 + 0xA28]
	0x03D2C8B0 BL 0x1C16CF4
	0x03D2C8B4 MOVZ W8, 0x1
	0x03D2C8B8 STRB W8, [X22 + 0xAF3]
	0x03D2C8BC LDR X0, [X21]
	0x03D2C8C0 ADRP X21, 0x3C7000
	0x03D2C8C4 LDR W8, [X0 + 0xE0]
	0x03D2C8C8 LDR X21, [X21 + 0xA28]
	0x03D2C8CC CBNZ W8, 0x3D2C8D4
	0x03D2C8D0 BL 0x1C16DFC
	0x03D2C8D4 LDR X0, [X21]
	0x03D2C8D8 LDR W8, [X0 + 0xE0]
	0x03D2C8DC CBNZ W8, 0x3D2C8E4
	0x03D2C8E0 BL 0x1C16DFC
	0x03D2C8E4 ORN W8, W31, W19, 0x0
	0x03D2C8E8 UBFM W0, W8, 0x1F, 0x1F
	0x03D2C8EC MOV X1, X31
	0x03D2C8F0 BL 0x3C06E58
	0x03D2C8F4 ADD X0, X20, 0x28
	0x03D2C8F8 MOV X1, X19
	0x03D2C8FC LDP X20, X19, [X31 + 0x20]
	0x03D2C900 LDP X22, X21, [X31 + 0x10]
	0x03D2C904 LDR X30, [X31], #0x30
	0x03D2C908 B 0x3D2A720
	0x03D2C90C STR X30, [X31 - 0x30]!
	0x03D2C910 STP X22, X21, [X31 + 0x10]
	0x03D2C914 STP X20, X19, [X31 + 0x20]
	0x03D2C918 ADRP X22, 0x6BB000
	0x03D2C91C ADRP X21, 0x438000
	0x03D2C920 LDRB W8, [X22 + 0xAF4]
	0x03D2C924 LDR X21, [X21 + 0x9C8]
	0x03D2C928 MOV X19, X1
	0x03D2C92C MOV X20, X0
	0x03D2C930 TBNZ X8, 0x0, 0x3D2C954
	0x03D2C934 ADRP X0, 0x438000
	0x03D2C938 LDR X0, [X0 + 0x9C8]
	0x03D2C93C BL 0x1C16CF4
	0x03D2C940 ADRP X0, 0x3C7000
	0x03D2C944 LDR X0, [X0 + 0xA28]
	0x03D2C948 BL 0x1C16CF4
	0x03D2C94C MOVZ W8, 0x1
	0x03D2C950 STRB W8, [X22 + 0xAF4]
	0x03D2C954 LDR X0, [X21]
	0x03D2C958 ADRP X21, 0x3C7000
	0x03D2C95C LDR W8, [X0 + 0xE0]
	0x03D2C960 LDR X21, [X21 + 0xA28]
	0x03D2C964 CBNZ W8, 0x3D2C96C
	0x03D2C968 BL 0x1C16DFC
	0x03D2C96C LDR X0, [X21]
	0x03D2C970 LDR W8, [X0 + 0xE0]
	0x03D2C974 CBNZ W8, 0x3D2C97C
	0x03D2C978 BL 0x1C16DFC
	0x03D2C97C ORN W8, W31, W19, 0x0
	0x03D2C980 UBFM W0, W8, 0x1F, 0x1F
	0x03D2C984 MOV X1, X31
	0x03D2C988 BL 0x3C06E58
	0x03D2C98C ADD X0, X20, 0x48
	0x03D2C990 MOV X1, X19
	0x03D2C994 LDP X20, X19, [X31 + 0x20]
	0x03D2C998 LDP X22, X21, [X31 + 0x10]
	0x03D2C99C LDR X30, [X31], #0x30
	0x03D2C9A0 B 0x3D2A720
	0x03D2C9A4 STR X30, [X31 - 0x30]!
	0x03D2C9A8 STP X22, X21, [X31 + 0x10]
	0x03D2C9AC STP X20, X19, [X31 + 0x20]
	0x03D2C9B0 ADRP X22, 0x6BB000
	0x03D2C9B4 ADRP X21, 0x438000
	0x03D2C9B8 LDRB W8, [X22 + 0xAF5]
	0x03D2C9BC LDR X21, [X21 + 0x9C8]
	0x03D2C9C0 MOV X19, X1
	0x03D2C9C4 MOV X20, X0
	0x03D2C9C8 TBNZ X8, 0x0, 0x3D2C9EC
	0x03D2C9CC ADRP X0, 0x438000
	0x03D2C9D0 LDR X0, [X0 + 0x9C8]
	0x03D2C9D4 BL 0x1C16CF4
	0x03D2C9D8 ADRP X0, 0x3C7000
	0x03D2C9DC LDR X0, [X0 + 0xA28]
	0x03D2C9E0 BL 0x1C16CF4
	0x03D2C9E4 MOVZ W8, 0x1
	0x03D2C9E8 STRB W8, [X22 + 0xAF5]
	0x03D2C9EC LDR X0, [X21]
	0x03D2C9F0 ADRP X21, 0x3C7000
	0x03D2C9F4 LDR W8, [X0 + 0xE0]
	0x03D2C9F8 LDR X21, [X21 + 0xA28]
	0x03D2C9FC CBNZ W8, 0x3D2CA04
	0x03D2CA00 BL 0x1C16DFC
	0x03D2CA04 LDR X0, [X21]
	0x03D2CA08 LDR W8, [X0 + 0xE0]
	0x03D2CA0C CBNZ W8, 0x3D2CA14
	0x03D2CA10 BL 0x1C16DFC
	0x03D2CA14 ORN W8, W31, W19, 0x0
	0x03D2CA18 UBFM W0, W8, 0x1F, 0x1F
	0x03D2CA1C MOV X1, X31
	0x03D2CA20 BL 0x3C06E58
	0x03D2CA24 ADD X0, X20, 0x68
	0x03D2CA28 MOV X1, X19
	0x03D2CA2C LDP X20, X19, [X31 + 0x20]
	0x03D2CA30 LDP X22, X21, [X31 + 0x10]
	0x03D2CA34 LDR X30, [X31], #0x30
	0x03D2CA38 B 0x3D2A720
	0x03D2CA3C STR X30, [X31 - 0x30]!
	0x03D2CA40 STP X22, X21, [X31 + 0x10]
	0x03D2CA44 STP X20, X19, [X31 + 0x20]
	0x03D2CA48 ADRP X22, 0x6BB000
	0x03D2CA4C ADRP X21, 0x438000
	0x03D2CA50 LDRB W8, [X22 + 0xAF6]
	0x03D2CA54 LDR X21, [X21 + 0x9C8]
	0x03D2CA58 MOV X19, X1
	0x03D2CA5C MOV X20, X0
	0x03D2CA60 TBNZ X8, 0x0, 0x3D2CA84
	0x03D2CA64 ADRP X0, 0x438000
	0x03D2CA68 LDR X0, [X0 + 0x9C8]
	0x03D2CA6C BL 0x1C16CF4
	0x03D2CA70 ADRP X0, 0x3C7000
	0x03D2CA74 LDR X0, [X0 + 0xA28]
	0x03D2CA78 BL 0x1C16CF4
	0x03D2CA7C MOVZ W8, 0x1
	0x03D2CA80 STRB W8, [X22 + 0xAF6]
	0x03D2CA84 LDR X0, [X21]
	0x03D2CA88 ADRP X21, 0x3C7000
	0x03D2CA8C LDR W8, [X0 + 0xE0]
	0x03D2CA90 LDR X21, [X21 + 0xA28]
	0x03D2CA94 CBNZ W8, 0x3D2CA9C
	0x03D2CA98 BL 0x1C16DFC
	0x03D2CA9C LDR X0, [X21]
	0x03D2CAA0 LDR W8, [X0 + 0xE0]
	0x03D2CAA4 CBNZ W8, 0x3D2CAAC
	0x03D2CAA8 BL 0x1C16DFC
	0x03D2CAAC ORN W8, W31, W19, 0x0
	0x03D2CAB0 UBFM W0, W8, 0x1F, 0x1F
	0x03D2CAB4 MOV X1, X31
	0x03D2CAB8 BL 0x3C06E58
	0x03D2CABC ADD X0, X20, 0x88
	0x03D2CAC0 MOV X1, X19
	0x03D2CAC4 LDP X20, X19, [X31 + 0x20]
	0x03D2CAC8 LDP X22, X21, [X31 + 0x10]
	0x03D2CACC LDR X30, [X31], #0x30
	0x03D2CAD0 B 0x3D2A720
	0x03D2CAD4 STR X30, [X31 - 0x30]!
	0x03D2CAD8 STP X22, X21, [X31 + 0x10]
	0x03D2CADC STP X20, X19, [X31 + 0x20]
	0x03D2CAE0 ADRP X22, 0x6BB000
	0x03D2CAE4 ADRP X21, 0x438000
	0x03D2CAE8 LDRB W8, [X22 + 0xAF7]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+208], X30
	003 Move [X31+216], X21
	004 Move [X31+224], X20
	005 Move [X31+232], X19
	006 Move X20, 0x6BC000
	007 Move W8, [X20+2790]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x439000
	014 Move X0, [X0+2536]
	015 Call 0x1C17CF4
	016 Move X0, 0x439000
	017 Move X0, [X0+2576]
	018 Call 0x1C17CF4
	019 Move X0, 0x439000
	020 Move X0, [X0+1888]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2790], W8
	024 Move [X31+192], X31
	025 Move [X31+200], X31
	026 Move [X31+176], X31
	027 Move [X31+184], X31
	028 Move [X31+160], X31
	029 Move [X31+168], X31
	030 Move [X31+144], X31
	031 Move [X31+152], X31
	032 Move [X31+128], X31
	033 Move [X31+136], X31
	034 Move X21, 0x439000
	035 Move W8, [X19+169]
	036 Move X21, [X21+1888]
	037 Compare W8, 0
	038 JumpIfEqual {47}
	039 Move X8, 0x439000
	040 Move X8, [X8+2576]
	041 Move X0, [X8]
	042 Call 0x1C17F10
	043 Move W1, 64
	044 Move W2, 4096
	045 Move X20, X0
	046 Call ShaderInfoStorageRGBAFloat..ctor, X0, X1, X2
	047 Move X8, 0x439000
	048 Move X8, [X8+2536]
	049 Move X0, [X8]
	050 Call 0x1C17F10
	051 Move W1, 64
	052 Move W2, 4096
	053 Move X20, X0
	054 Call ShaderInfoStorageRGBA32..ctor, X0, X1, X2
	055 Move [X19], X20
	056 Move X0, [X21]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Compare X20, 0
	062 JumpIfEqual {288}
	063 Move X8, [X20]
	064 Move W10, [X19+32]
	065 Move W9, [X19+36]
	066 Add X3, X31, 192
	067 Move X0, X20
	068 Move X11, [X8+408]
	069 Move X4, [X8+416]
	070 Move W1, W10
	071 ShiftRight W1, 27
	072 And W1, W1, 0x3FFFFFF
	073 Move W2, W9
	074 ShiftRight W2, 29
	075 And W2, W2, 0xFFFFFFF
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X0, [X19]
	078 Compare X0, 0
	079 JumpIfEqual {288}
	080 Move X8, [X0]
	081 Move W10, [X19+64]
	082 Move W9, [X19+68]
	083 Add X3, X31, 176
	084 Move X11, [X8+408]
	085 Move X4, [X8+416]
	086 Move W1, W10
	087 ShiftRight W1, 27
	088 And W1, W1, 0x3FFFFFF
	089 Move W2, W9
	090 ShiftRight W2, 29
	091 And W2, W2, 0xFFFFFFF
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move X0, [X19]
	094 Compare X0, 0
	095 JumpIfEqual {288}
	096 Move X8, [X0]
	097 Move W10, [X19+96]
	098 Move W9, [X19+100]
	099 Add X3, X31, 160
	100 Move X11, [X8+408]
	101 Move X4, [X8+416]
	102 Move W1, W10
	103 ShiftRight W1, 27
	104 And W1, W1, 0x3FFFFFF
	105 Move W2, W9
	106 ShiftRight W2, 29
	107 And W2, W2, 0xFFFFFFF
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X0, [X19]
	110 Compare X0, 0
	111 JumpIfEqual {288}
	112 Move X8, [X0]
	113 Move W10, [X19+128]
	114 Move W9, [X19+132]
	115 Add X3, X31, 144
	116 Move X11, [X8+408]
	117 Move X4, [X8+416]
	118 Move W1, W10
	119 ShiftRight W1, 27
	120 And W1, W1, 0x3FFFFFF
	121 Move W2, W9
	122 ShiftRight W2, 29
	123 And W2, W2, 0xFFFFFFF
	124 NotImplemented "Instruction BLR not yet implemented."
	125 Move X0, [X19]
	126 Compare X0, 0
	127 JumpIfEqual {288}
	128 Move X8, [X0]
	129 Move W10, [X19+160]
	130 Move W9, [X19+164]
	131 Add X3, X31, 128
	132 Add X20, X19, 8
	133 Move X11, [X8+408]
	134 Move X4, [X8+416]
	135 Move W1, W10
	136 ShiftRight W1, 27
	137 And W1, W1, 0x3FFFFFF
	138 Move W2, W9
	139 ShiftRight W2, 29
	140 And W2, W2, 0xFFFFFFF
	141 NotImplemented "Instruction BLR not yet implemented."
	142 Move X8, [X21]
	143 Move X2, [X31+192]
	144 Move X3, [X31+200]
	145 Move X0, X20
	146 Move X8, [X8+184]
	147 Move X1, [X8+264]
	148 Call UIRVEShaderInfoAllocator.AtlasRectMatchesPage, X0, X1, X2
	149 Move TEMP, X0
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfNotEqual {289}
	153 Move X0, [X21]
	154 Add X20, X19, 40
	155 Move W8, [X0+224]
	156 Compare W8, 0
	157 JumpIfNotEqual {160}
	158 Call 0x1C17DFC
	159 Move X0, [X21]
	160 Move X8, [X0+184]
	161 Move X2, [X31+176]
	162 Move X3, [X31+184]
	163 Move X0, X20
	164 Move X1, [X8+272]
	165 Call UIRVEShaderInfoAllocator.AtlasRectMatchesPage, X0, X1, X2
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {296}
	170 Move X0, [X21]
	171 Add X20, X19, 72
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {177}
	175 Call 0x1C17DFC
	176 Move X0, [X21]
	177 Move X8, [X0+184]
	178 Move X2, [X31+160]
	179 Move X3, [X31+168]
	180 Move X0, X20
	181 Move X1, [X8+280]
	182 Call UIRVEShaderInfoAllocator.AtlasRectMatchesPage, X0, X1, X2
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {303}
	187 Move X0, [X21]
	188 Add X20, X19, 104
	189 Move W8, [X0+224]
	190 Compare W8, 0
	191 JumpIfNotEqual {194}
	192 Call 0x1C17DFC
	193 Move X0, [X21]
	194 Move X8, [X0+184]
	195 Move X2, [X31+144]
	196 Move X3, [X31+152]
	197 Move X0, X20
	198 Move X1, [X8+288]
	199 Call UIRVEShaderInfoAllocator.AtlasRectMatchesPage, X0, X1, X2
	200 Move TEMP, X0
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfNotEqual {310}
	204 Move X0, [X21]
	205 Add X20, X19, 136
	206 Move W8, [X0+224]
	207 Compare W8, 0
	208 JumpIfNotEqual {211}
	209 Call 0x1C17DFC
	210 Move X0, [X21]
	211 Move X8, [X0+184]
	212 Move X2, [X31+128]
	213 Move X3, [X31+136]
	214 Move X0, X20
	215 Move X1, [X8+296]
	216 Call UIRVEShaderInfoAllocator.AtlasRectMatchesPage, X0, X1, X2
	217 Move TEMP, X0
	218 And TEMP, TEMP, 1
	219 Compare TEMP, 1
	220 JumpIfNotEqual {317}
	221 Move X0, [X21]
	222 Move W8, [X0+224]
	223 Compare W8, 0
	224 JumpIfNotEqual {227}
	225 Call 0x1C17DFC
	226 Move X0, [X21]
	227 Move X8, [X0+184]
	228 Add X2, X31, 64
	229 Move X0, X19
	230 Move X1, [X8+264]
	231 NotImplemented "Instruction LDUR not yet implemented."
	232 NotImplemented "Instruction LDUR not yet implemented."
	233 NotImplemented "Instruction LDUR not yet implemented."
	234 NotImplemented "Instruction LDUR not yet implemented."
	235 Move [X31+96], V1
	236 Move [X31+104], V0
	237 Move [X31+64], V3
	238 Move [X31+72], V2
	239 Call UIRVEShaderInfoAllocator.SetTransformValue, X0, X1, X2
	240 Move X8, [X21]
	241 Move X0, X19
	242 Move X8, [X8+184]
	243 Move X1, [X8+272]
	244 Move S0, [X8+152]
	245 Move S1, [X8+156]
	246 Move S2, [X8+160]
	247 Move S3, [X8+164]
	248 Call UIRVEShaderInfoAllocator.SetClipRectValue, X0, X1, X2
	249 Move X8, [X21]
	250 Move X0, X19
	251 Move X8, [X8+184]
	252 Move X1, [X8+280]
	253 Move V0, [X8+180]
	254 Call UIRVEShaderInfoAllocator.SetOpacityValue, X0, X1, V0
	255 Move X8, [X21]
	256 Move X0, X19
	257 Move W2, W31
	258 Move X8, [X8+184]
	259 Move X1, [X8+288]
	260 Move S0, [X8+184]
	261 Move S1, [X8+188]
	262 Move S2, [X8+192]
	263 Move S3, [X8+196]
	264 Call UIRVEShaderInfoAllocator.SetColorValue, X0, X1, X2, X3
	265 Move X8, [X21]
	266 Add X2, X31, 0
	267 Move X0, X19
	268 Move W3, W31
	269 Move X8, [X8+184]
	270 Move X1, [X8+296]
	271 NotImplemented "Instruction LDUR not yet implemented."
	272 NotImplemented "Instruction LDUR not yet implemented."
	273 NotImplemented "Instruction LDUR not yet implemented."
	274 NotImplemented "Instruction LDUR not yet implemented."
	275 Move [X31+32], V1
	276 Move [X31+40], V0
	277 Move [X31], V2
	278 Move [X31+8], V3
	279 Call UIRVEShaderInfoAllocator.SetTextCoreSettingValue, X0, X1, X2, X3
	280 Move W8, 1
	281 Move [X19+168], W8
	282 Move X20, [X31+224]
	283 Move X19, [X31+232]
	284 Move X30, [X31+208]
	285 Move X21, [X31+216]
	286 Add X31, X31, 240
	287 Return 
	288 Call 0x1C17F20
	289 Move X0, 0x3C8000
	290 Move X0, [X0+2000]
	291 Call 0x1C17D08
	292 Call 0x1C17F10
	293 Move X19, X0
	294 Move X0, 0x439000
	295 Move X0, [X0+3008]
	296 Move X0, 0x3C8000
	297 Move X0, [X0+2000]
	298 Call 0x1C17D08
	299 Call 0x1C17F10
	300 Move X19, X0
	301 Move X0, 0x439000
	302 Move X0, [X0+3016]
	303 Move X0, 0x3C8000
	304 Move X0, [X0+2000]
	305 Call 0x1C17D08
	306 Call 0x1C17F10
	307 Move X19, X0
	308 Move X0, 0x439000
	309 Move X0, [X0+3024]
	310 Move X0, 0x3C8000
	311 Move X0, [X0+2000]
	312 Call 0x1C17D08
	313 Call 0x1C17F10
	314 Move X19, X0
	315 Move X0, 0x439000
	316 Move X0, [X0+3032]
	317 Move X0, 0x3C8000
	318 Move X0, [X0+2000]
	319 Call 0x1C17D08
	320 Call 0x1C17F10
	321 Move X19, X0
	322 Move X0, 0x439000
	323 Move X0, [X0+3040]
	324 Call 0x1C17D08
	325 Move X1, X0
	326 Move X0, X19
	327 Move X2, X31
	328 Call Exception..ctor, X0, X1
	329 Move X0, 0x439000
	330 Move X0, [X0+3048]
	331 Call 0x1C17D08
	332 Move X1, X0
	333 Move X0, X19
	334 Call 0x1C17DEC

Method: System.Void Dispose()

Disassembly:
	0x03D2D3E4 STP X30, X21, [X31 - 0x20]!
	0x03D2D3E8 STP X20, X19, [X31 + 0x10]
	0x03D2D3EC ADRP X20, 0x6BA000
	0x03D2D3F0 ADRP X21, 0x437000
	0x03D2D3F4 LDRB W8, [X20 + 0xB00]
	0x03D2D3F8 LDR X21, [X21 + 0xC48]
	0x03D2D3FC MOV X19, X0
	0x03D2D400 TBNZ X8, 0x0, 0x3D2D418
	0x03D2D404 ADRP X0, 0x437000
	0x03D2D408 LDR X0, [X0 + 0xC48]
	0x03D2D40C BL 0x1C16CF4
	0x03D2D410 MOVZ W8, 0x1
	0x03D2D414 STRB W8, [X20 + 0xB00]
	0x03D2D418 LDR X1, [X21]
	0x03D2D41C MOV X0, X19
	0x03D2D420 LDP X20, X19, [X31 + 0x10]
	0x03D2D424 LDP X30, X21, [X31], #0x20
	0x03D2D428 B 0x2EF0D48
	0x03D2D42C STR X30, [X31 - 0x10]!
	0x03D2D430 CBZ X1, 0x3D2D448
	0x03D2D434 MOVI V0.2D, 0x0
	0x03D2D438 STR W31, [X1 + 0x18]
	0x03D2D43C STP V0, V0, [X1 + 0x20]
	0x03D2D440 LDR X30, [X31], #0x10
	0x03D2D444 RET
	0x03D2D448 BL 0x1C16F20
	0x03D2D44C MOVI V0.2D, 0x0
	0x03D2D450 STR W31, [X0 + 0x18]
	0x03D2D454 STP V0, V0, [X0 + 0x20]
	0x03D2D458 RET
	0x03D2D45C STR X30, [X31 - 0x40]!
	0x03D2D460 STP X24, X23, [X31 + 0x10]
	0x03D2D464 STP X22, X21, [X31 + 0x20]
	0x03D2D468 STP X20, X19, [X31 + 0x30]
	0x03D2D46C ADRP X20, 0x6BA000
	0x03D2D470 ADRP X23, 0x437000
	0x03D2D474 LDRB W8, [X20 + 0xB01]
	0x03D2D478 LDR X23, [X23 + 0xC50]
	0x03D2D47C MOV X19, X0
	0x03D2D480 TBNZ X8, 0x0, 0x3D2D4D4
	0x03D2D484 ADRP X0, 0x437000
	0x03D2D488 LDR X0, [X0 + 0xC58]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6BB000
	005 Move W8, [X20+2791]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {25}
	011 Move X0, 0x438000
	012 Move X0, [X0+3056]
	013 Call 0x1C17CF4
	014 Move X0, 0x438000
	015 Move X0, [X0+3064]
	016 Call 0x1C17CF4
	017 Move X0, 0x438000
	018 Move X0, [X0+3072]
	019 Call 0x1C17CF4
	020 Move X0, 0x438000
	021 Move X0, [X0+3080]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2791], W8
	025 Move X0, [X19]
	026 Compare X0, 0
	027 JumpIfEqual {29}
	028 Call BaseShaderInfoStorage.Dispose, X0
	029 Move [X19], X31
	030 Move X0, X19
	031 Add X0, X0, 192
	032 Move X8, [X0]
	033 Compare X8, 0
	034 JumpIfEqual {39}
	035 Move X8, 0x438000
	036 Move X8, [X8+3064]
	037 Move X1, [X8]
	038 Call NativeArray`1<Vector4>.Dispose, X0
	039 Move X0, X19
	040 Add X0, X0, 176
	041 Move X8, [X0]
	042 Compare X8, 0
	043 JumpIfEqual {48}
	044 Move X8, 0x438000
	045 Move X8, [X8+3056]
	046 Move X1, [X8]
	047 Call NativeArray`1<Transform3x4>.Dispose, X0
	048 Move [X19+168], W31
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 

Method: System.Void IssuePendingStorageChanges()

Disassembly:
	0x03D2D48C BL 0x1C16CF4
	0x03D2D490 ADRP X0, 0x437000
	0x03D2D494 LDR X0, [X0 + 0xC60]
	0x03D2D498 BL 0x1C16CF4
	0x03D2D49C ADRP X0, 0x437000
	0x03D2D4A0 LDR X0, [X0 + 0xC68]

ISIL:
	001 Move X0, [X0]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+440]
	006 Move X1, [X8+448]
	007 CallNoReturn X2
	008 Return 

Method: UnityEngine.UIElements.UIR.BMPAlloc AllocTransform()

Disassembly:
	0x03D2D4A4 BL 0x1C16CF4
	0x03D2D4A8 ADRP X0, 0x437000
	0x03D2D4AC LDR X0, [X0 + 0xC70]
	0x03D2D4B0 BL 0x1C16CF4
	0x03D2D4B4 ADRP X0, 0x437000
	0x03D2D4B8 LDR X0, [X0 + 0xC78]
	0x03D2D4BC BL 0x1C16CF4
	0x03D2D4C0 ADRP X0, 0x437000
	0x03D2D4C4 LDR X0, [X0 + 0xC50]
	0x03D2D4C8 BL 0x1C16CF4
	0x03D2D4CC MOVZ W8, 0x1
	0x03D2D4D0 STRB W8, [X20 + 0xB01]
	0x03D2D4D4 LDR X0, [X23]
	0x03D2D4D8 LDR W8, [X0 + 0xE0]
	0x03D2D4DC CBNZ W8, 0x3D2D4E8
	0x03D2D4E0 BL 0x1C16DFC
	0x03D2D4E4 LDR X0, [X23]
	0x03D2D4E8 LDR X8, [X0 + 0xB8]
	0x03D2D4EC LDR X20, [X8 + 0x8]
	0x03D2D4F0 CBNZ X20, 0x3D2D544
	0x03D2D4F4 LDR W8, [X0 + 0xE0]
	0x03D2D4F8 CBNZ W8, 0x3D2D504
	0x03D2D4FC BL 0x1C16DFC
	0x03D2D500 LDR X0, [X23]
	0x03D2D504 ADRP X9, 0x437000
	0x03D2D508 LDR X8, [X0 + 0xB8]
	0x03D2D50C LDR X9, [X9 + 0xC60]
	0x03D2D510 LDR X21, [X8]
	0x03D2D514 LDR X0, [X9]
	0x03D2D518 BL 0x1C16F10
	0x03D2D51C ADRP X8, 0x437000
	0x03D2D520 LDR X8, [X8 + 0xC70]
	0x03D2D524 MOV X1, X21
	0x03D2D528 MOV X3, X31
	0x03D2D52C MOV X20, X0
	0x03D2D530 LDR X2, [X8]
	0x03D2D534 BL 0x2D27AA8
	0x03D2D538 LDR X0, [X23]
	0x03D2D53C LDR X8, [X0 + 0xB8]
	0x03D2D540 STR X20, [X8 + 0x8]
	0x03D2D544 LDR W8, [X0 + 0xE0]
	0x03D2D548 CBNZ W8, 0x3D2D554
	0x03D2D54C BL 0x1C16DFC
	0x03D2D550 LDR X0, [X23]
	0x03D2D554 LDR X8, [X0 + 0xB8]
	0x03D2D558 ADRP X24, 0x437000
	0x03D2D55C LDR X21, [X8 + 0x10]
	0x03D2D560 LDR X24, [X24 + 0xC68]
	0x03D2D564 CBNZ X21, 0x3D2D5B8
	0x03D2D568 LDR W8, [X0 + 0xE0]
	0x03D2D56C CBNZ W8, 0x3D2D578
	0x03D2D570 BL 0x1C16DFC
	0x03D2D574 LDR X0, [X23]
	0x03D2D578 ADRP X9, 0x437000
	0x03D2D57C LDR X8, [X0 + 0xB8]
	0x03D2D580 LDR X9, [X9 + 0xC58]
	0x03D2D584 LDR X22, [X8]
	0x03D2D588 LDR X0, [X9]
	0x03D2D58C BL 0x1C16F10
	0x03D2D590 ADRP X8, 0x437000
	0x03D2D594 LDR X8, [X8 + 0xC78]
	0x03D2D598 MOV X1, X22
	0x03D2D59C MOV X3, X31
	0x03D2D5A0 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x6BB000
	006 Move W8, [X20+2792]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x438000
	013 Move X0, [X0+2504]
	014 Call 0x1C17CF4
	015 Move X0, 0x438000
	016 Move X0, [X0+1888]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2792], W8
	020 Move W8, [X19+168]
	021 Compare W8, 0
	022 JumpIfNotEqual {32}
	023 Move X8, 0x438000
	024 Move X8, [X8+1888]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Call UIRVEShaderInfoAllocator.ReallyCreateStorage, X0
	032 Move W8, [X19+169]
	033 Add X20, X19, 8
	034 Compare W8, 0
	035 JumpIfEqual {44}
	036 Move X1, [X19]
	037 Move X0, X20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call BitmapAllocator32.Allocate, X0, X1
	043 Return X0
	044 Move X0, X20
	045 Move X1, X31
	046 Call BitmapAllocator32.Allocate, X0, X1
	047 Move X8, 0x438000
	048 Move X8, [X8+1888]
	049 Move X21, X0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move X0, X21
	057 Call UIRVEShaderInfoAllocator.AllocToConstantBufferIndex, X0
	058 Move W8, [X19+184]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X20
	061 Move X1, X21
	062 Call BitmapAllocator32.Free, X0, X1
	063 Move X19, 0x438000
	064 Move X19, [X19+2504]
	065 Move X0, [X19]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X19]
	071 Move X8, [X0+184]
	072 Move X21, [X8]
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X0, X21
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Return X0

Method: UnityEngine.UIElements.UIR.BMPAlloc AllocClipRect()

Disassembly:
	0x03D2D5A4 LDR X2, [X8]
	0x03D2D5A8 BL 0x2A6B948
	0x03D2D5AC LDR X8, [X23]
	0x03D2D5B0 LDR X8, [X8 + 0xB8]
	0x03D2D5B4 STR X21, [X8 + 0x10]
	0x03D2D5B8 LDR X4, [X24]
	0x03D2D5BC MOV X0, X19
	0x03D2D5C0 MOV X1, X20
	0x03D2D5C4 MOV X2, X21
	0x03D2D5C8 LDP X20, X19, [X31 + 0x30]
	0x03D2D5CC LDP X22, X21, [X31 + 0x20]
	0x03D2D5D0 LDP X24, X23, [X31 + 0x10]
	0x03D2D5D4 MOVZ W3, 0x2710
	0x03D2D5D8 LDR X30, [X31], #0x40
	0x03D2D5DC B 0x2EF0D58
	0x03D2D5E0 STR X30, [X31 - 0x20]!
	0x03D2D5E4 STP X20, X19, [X31 + 0x10]
	0x03D2D5E8 ADRP X19, 0x6BA000
	0x03D2D5EC ADRP X20, 0x437000
	0x03D2D5F0 LDRB W8, [X19 + 0xB02]
	0x03D2D5F4 LDR X20, [X20 + 0xC50]
	0x03D2D5F8 TBNZ X8, 0x0, 0x3D2D610
	0x03D2D5FC ADRP X0, 0x437000
	0x03D2D600 LDR X0, [X0 + 0xC50]
	0x03D2D604 BL 0x1C16CF4
	0x03D2D608 MOVZ W8, 0x1
	0x03D2D60C STRB W8, [X19 + 0xB02]
	0x03D2D610 LDR X0, [X20]
	0x03D2D614 BL 0x1C16F10
	0x03D2D618 MOV X1, X31
	0x03D2D61C MOV X19, X0
	0x03D2D620 BL 0x33BDD8C
	0x03D2D624 LDR X8, [X20]
	0x03D2D628 LDR X8, [X8 + 0xB8]
	0x03D2D62C STR X19, [X8]
	0x03D2D630 LDP X20, X19, [X31 + 0x10]
	0x03D2D634 LDR X30, [X31], #0x20
	0x03D2D638 RET
	0x03D2D63C MOV X1, X31
	0x03D2D640 B 0x33BDD8C
	0x03D2D644 STR X30, [X31 - 0x20]!
	0x03D2D648 STP X20, X19, [X31 + 0x10]
	0x03D2D64C ADRP X19, 0x6BA000
	0x03D2D650 ADRP X20, 0x437000
	0x03D2D654 LDRB W8, [X19 + 0xB03]
	0x03D2D658 LDR X20, [X20 + 0xC80]
	0x03D2D65C TBNZ X8, 0x0, 0x3D2D674
	0x03D2D660 ADRP X0, 0x437000
	0x03D2D664 LDR X0, [X0 + 0xC80]
	0x03D2D668 BL 0x1C16CF4
	0x03D2D66C MOVZ W8, 0x1
	0x03D2D670 STRB W8, [X19 + 0xB03]
	0x03D2D674 LDR X0, [X20]
	0x03D2D678 BL 0x1C16F10
	0x03D2D67C MOV X19, X0
	0x03D2D680 BL 0x3D2D694
	0x03D2D684 MOV X0, X19
	0x03D2D688 LDP X20, X19, [X31 + 0x10]
	0x03D2D68C LDR X30, [X31], #0x20
	0x03D2D690 RET
	0x03D2D694 STP X30, X21, [X31 - 0x20]!
	0x03D2D698 STP X20, X19, [X31 + 0x10]
	0x03D2D69C ADRP X20, 0x6BA000
	0x03D2D6A0 ADRP X21, 0x437000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x6BB000
	006 Move W8, [X20+2793]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x438000
	013 Move X0, [X0+2504]
	014 Call 0x1C17CF4
	015 Move X0, 0x438000
	016 Move X0, [X0+1888]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2793], W8
	020 Move W8, [X19+168]
	021 Compare W8, 0
	022 JumpIfNotEqual {32}
	023 Move X8, 0x438000
	024 Move X8, [X8+1888]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Call UIRVEShaderInfoAllocator.ReallyCreateStorage, X0
	032 Move W8, [X19+169]
	033 Add X20, X19, 40
	034 Compare W8, 0
	035 JumpIfEqual {44}
	036 Move X1, [X19]
	037 Move X0, X20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call BitmapAllocator32.Allocate, X0, X1
	043 Return X0
	044 Move X0, X20
	045 Move X1, X31
	046 Call BitmapAllocator32.Allocate, X0, X1
	047 Move X8, 0x438000
	048 Move X8, [X8+1888]
	049 Move X21, X0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move X0, X21
	057 Call UIRVEShaderInfoAllocator.AllocToConstantBufferIndex, X0
	058 Move W8, [X19+200]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X20
	061 Move X1, X21
	062 Call BitmapAllocator32.Free, X0, X1
	063 Move X19, 0x438000
	064 Move X19, [X19+2504]
	065 Move X0, [X19]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X19]
	071 Move X8, [X0+184]
	072 Move X21, [X8]
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X0, X21
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Return X0

Method: UnityEngine.UIElements.UIR.BMPAlloc AllocOpacity()

Disassembly:
	0x03D2D6A4 LDRB W8, [X20 + 0xB05]
	0x03D2D6A8 LDR X21, [X21 + 0xC88]
	0x03D2D6AC MOV X19, X0
	0x03D2D6B0 TBNZ X8, 0x0, 0x3D2D6C8
	0x03D2D6B4 ADRP X0, 0x437000
	0x03D2D6B8 LDR X0, [X0 + 0xC88]
	0x03D2D6BC BL 0x1C16CF4
	0x03D2D6C0 MOVZ W8, 0x1
	0x03D2D6C4 STRB W8, [X20 + 0xB05]
	0x03D2D6C8 LDR X1, [X21]
	0x03D2D6CC MOV X0, X19
	0x03D2D6D0 LDP X20, X19, [X31 + 0x10]
	0x03D2D6D4 LDP X30, X21, [X31], #0x20
	0x03D2D6D8 B 0x2EF0D48
	0x03D2D6DC CBZ X1, 0x3D2D6E8
	0x03D2D6E0 MOV X0, X1
	0x03D2D6E4 B 0x3D2D6F0
	0x03D2D6E8 STR X30, [X31 - 0x10]!
	0x03D2D6EC BL 0x1C16F20
	0x03D2D6F0 STP X30, X21, [X31 - 0x20]!
	0x03D2D6F4 STP X20, X19, [X31 + 0x10]
	0x03D2D6F8 ADRP X21, 0x6BA000
	0x03D2D6FC ADRP X20, 0x3EE000
	0x03D2D700 LDRB W8, [X21 + 0xB04]
	0x03D2D704 LDR X20, [X20 + 0x620]
	0x03D2D708 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6BB000
	005 Move W8, [X20+2794]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x438000
	012 Move X0, [X0+1888]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2794], W8
	016 Move W8, [X19+168]
	017 Compare W8, 0
	018 JumpIfNotEqual {28}
	019 Move X8, 0x438000
	020 Move X8, [X8+1888]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Call UIRVEShaderInfoAllocator.ReallyCreateStorage, X0
	028 Move X1, [X19+72]
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Call BitmapAllocator32.Allocate, X0, X1
	034 Return X0

Method: UnityEngine.UIElements.UIR.BMPAlloc AllocColor()

Disassembly:
	0x03D2D70C TBNZ X8, 0x0, 0x3D2D724
	0x03D2D710 ADRP X0, 0x3EE000
	0x03D2D714 LDR X0, [X0 + 0x620]
	0x03D2D718 BL 0x1C16CF4
	0x03D2D71C MOVZ W8, 0x1
	0x03D2D720 STRB W8, [X21 + 0xB04]
	0x03D2D724 STP X31, X31, [X19 + 0x18]
	0x03D2D728 STR X31, [X19 + 0x28]
	0x03D2D72C LDR X0, [X20]
	0x03D2D730 LDR W8, [X0 + 0xE0]
	0x03D2D734 CBNZ W8, 0x3D2D740
	0x03D2D738 BL 0x1C16DFC
	0x03D2D73C LDR X0, [X20]
	0x03D2D740 LDR X8, [X0 + 0xB8]
	0x03D2D744 LDR W8, [X8]
	0x03D2D748 STR W8, [X19 + 0x38]
	0x03D2D74C LDP X20, X19, [X31 + 0x10]
	0x03D2D750 LDP X30, X21, [X31], #0x20
	0x03D2D754 RET
	0x03D2D758 LDR X0, [X0 + 0x30]
	0x03D2D75C CBZ X0, 0x3D2D768
	0x03D2D760 MOV X1, X31
	0x03D2D764 B 0x3D21264
	0x03D2D768 RET
	0x03D2D76C STP X30, X25, [X31 - 0x40]!
	0x03D2D770 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6BB000
	005 Move W8, [X20+2795]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x438000
	012 Move X0, [X0+1888]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2795], W8
	016 Move W8, [X19+168]
	017 Compare W8, 0
	018 JumpIfNotEqual {28}
	019 Move X8, 0x438000
	020 Move X8, [X8+1888]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Call UIRVEShaderInfoAllocator.ReallyCreateStorage, X0
	028 Move X1, [X19+104]
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Call BitmapAllocator32.Allocate, X0, X1
	034 Return X0

Method: UnityEngine.UIElements.UIR.BMPAlloc AllocTextCoreSettings(UnityEngine.UIElements.UIR.TextCoreSettings settings)

Disassembly:
	0x03D2D774 STP X22, X21, [X31 + 0x20]
	0x03D2D778 STP X20, X19, [X31 + 0x30]
	0x03D2D77C ADRP X22, 0x6BA000
	0x03D2D780 ADRP X21, 0x437000
	0x03D2D784 LDRB W8, [X22 + 0xB06]
	0x03D2D788 LDR X21, [X21 + 0x700]
	0x03D2D78C MOV X20, X1
	0x03D2D790 MOV X19, X0
	0x03D2D794 TBNZ X8, 0x0, 0x3D2D7F4
	0x03D2D798 ADRP X0, 0x437000
	0x03D2D79C LDR X0, [X0 + 0xC90]
	0x03D2D7A0 BL 0x1C16CF4
	0x03D2D7A4 ADRP X0, 0x437000
	0x03D2D7A8 LDR X0, [X0 + 0xC98]
	0x03D2D7AC BL 0x1C16CF4
	0x03D2D7B0 ADRP X0, 0x437000
	0x03D2D7B4 LDR X0, [X0 + 0xCA0]
	0x03D2D7B8 BL 0x1C16CF4
	0x03D2D7BC ADRP X0, 0x437000
	0x03D2D7C0 LDR X0, [X0 + 0x4A0]
	0x03D2D7C4 BL 0x1C16CF4
	0x03D2D7C8 ADRP X0, 0x437000
	0x03D2D7CC LDR X0, [X0 + 0xCA8]
	0x03D2D7D0 BL 0x1C16CF4
	0x03D2D7D4 ADRP X0, 0x437000
	0x03D2D7D8 LDR X0, [X0 + 0x700]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x6BB000
	005 Move W8, [X20+2796]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x438000
	012 Move X0, [X0+1888]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2796], W8
	016 Move W8, [X19+168]
	017 Compare W8, 0
	018 JumpIfNotEqual {28}
	019 Move X8, 0x438000
	020 Move X8, [X8+1888]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Call UIRVEShaderInfoAllocator.ReallyCreateStorage, X0
	028 Move X1, [X19+136]
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Call BitmapAllocator32.Allocate, X0, X1
	034 Return X0

Method: System.Void SetTransformValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.Matrix4x4 xform)

Disassembly:
	0x03D2CAEC LDR X21, [X21 + 0x760]
	0x03D2CAF0 MOV X19, X1
	0x03D2CAF4 MOV X20, X0
	0x03D2CAF8 TBNZ X8, 0x0, 0x3D2CB1C
	0x03D2CAFC ADRP X0, 0x3C7000
	0x03D2CB00 LDR X0, [X0 + 0xA28]
	0x03D2CB04 BL 0x1C16CF4
	0x03D2CB08 ADRP X0, 0x438000
	0x03D2CB0C LDR X0, [X0 + 0x760]
	0x03D2CB10 BL 0x1C16CF4
	0x03D2CB14 MOVZ W8, 0x1
	0x03D2CB18 STRB W8, [X22 + 0xAF7]
	0x03D2CB1C LDR X0, [X21]
	0x03D2CB20 ADRP X22, 0x3C7000
	0x03D2CB24 LDR W8, [X0 + 0xE0]
	0x03D2CB28 LDR X22, [X22 + 0xA28]
	0x03D2CB2C CBNZ W8, 0x3D2CB44
	0x03D2CB30 BL 0x1C16DFC
	0x03D2CB34 LDR X0, [X21]
	0x03D2CB38 LDR W8, [X0 + 0xE0]
	0x03D2CB3C CBNZ W8, 0x3D2CB44
	0x03D2CB40 BL 0x1C16DFC
	0x03D2CB44 LDR X0, [X22]
	0x03D2CB48 LDR W8, [X0 + 0xE0]
	0x03D2CB4C CBNZ W8, 0x3D2CB54
	0x03D2CB50 BL 0x1C16DFC
	0x03D2CB54 MOVZ W0, 0x1
	0x03D2CB58 MOV X1, X31
	0x03D2CB5C BL 0x3C06E58
	0x03D2CB60 STRH W31, [X31 + 0xC]
	0x03D2CB64 STRH W31, [X31 + 0x8]
	0x03D2CB68 LDRB W8, [X20 + 0xA9]
	0x03D2CB6C CBZ W8, 0x3D2CB9C
	0x03D2CB70 ADD X0, X20, 0x8
	0x03D2CB74 ADD X2, X31, 0xC
	0x03D2CB78 ADD X3, X31, 0x8
	0x03D2CB7C MOV W1, W19
	0x03D2CB80 BL 0x3D2A874
	0x03D2CB84 LDRH W8, [X31 + 0x8]
	0x03D2CB88 LDRH W9, [X31 + 0xC]
	0x03D2CB8C UBFM W8, W8, 0x1B, 0x1A
	0x03D2CB90 AND X20, X8, 0xFFFF
	0x03D2CB94 UBFM X22, X9, 0x5, 0xC
	0x03D2CB98 B 0x3D2CBA4
	0x03D2CB9C MOV X20, X31
	0x03D2CBA0 MOV X22, X31
	0x03D2CBA4 LDR X0, [X21]
	0x03D2CBA8 LDR W8, [X0 + 0xE0]
	0x03D2CBAC CBNZ W8, 0x3D2CBB4
	0x03D2CBB0 BL 0x1C16DFC
	0x03D2CBB4 UBFM X9, X19, 0x1B, 0x3F
	0x03D2CBB8 UBFM X8, X19, 0x30, 0x3F
	0x03D2CBBC AND W9, W9, 0xE0
	0x03D2CBC0 ADD W8, W9, W8
	0x03D2CBC4 UBFM W8, W8, 0x10, 0xF
	0x03D2CBC8 AND X8, X8, 0xFFFFFF
	0x03D2CBCC ORR X8, X8, X22, 0x0
	0x03D2CBD0 ORR X0, X8, X20, 0x0
	0x03D2CBD4 LDP X20, X19, [X31 + 0x20]
	0x03D2CBD8 LDP X22, X21, [X31 + 0x10]
	0x03D2CBDC LDR X30, [X31], #0x30
	0x03D2CBE0 RET
	0x03D2CBE4 STR X30, [X31 - 0x30]!
	0x03D2CBE8 STP X22, X21, [X31 + 0x10]
	0x03D2CBEC STP X20, X19, [X31 + 0x20]
	0x03D2CBF0 ADRP X22, 0x6BB000
	0x03D2CBF4 ADRP X21, 0x438000
	0x03D2CBF8 LDRB W8, [X22 + 0xAF8]
	0x03D2CBFC LDR X21, [X21 + 0x760]
	0x03D2CC00 MOV X19, X1
	0x03D2CC04 MOV X20, X0
	0x03D2CC08 TBNZ X8, 0x0, 0x3D2CC2C
	0x03D2CC0C ADRP X0, 0x3C7000
	0x03D2CC10 LDR X0, [X0 + 0xA28]
	0x03D2CC14 BL 0x1C16CF4
	0x03D2CC18 ADRP X0, 0x438000
	0x03D2CC1C LDR X0, [X0 + 0x760]
	0x03D2CC20 BL 0x1C16CF4
	0x03D2CC24 MOVZ W8, 0x1
	0x03D2CC28 STRB W8, [X22 + 0xAF8]
	0x03D2CC2C LDR X0, [X21]
	0x03D2CC30 ADRP X22, 0x3C7000
	0x03D2CC34 LDR W8, [X0 + 0xE0]
	0x03D2CC38 LDR X22, [X22 + 0xA28]
	0x03D2CC3C CBNZ W8, 0x3D2CC54
	0x03D2CC40 BL 0x1C16DFC
	0x03D2CC44 LDR X0, [X21]
	0x03D2CC48 LDR W8, [X0 + 0xE0]
	0x03D2CC4C CBNZ W8, 0x3D2CC54
	0x03D2CC50 BL 0x1C16DFC
	0x03D2CC54 LDR X0, [X22]
	0x03D2CC58 LDR W8, [X0 + 0xE0]
	0x03D2CC5C CBNZ W8, 0x3D2CC64
	0x03D2CC60 BL 0x1C16DFC
	0x03D2CC64 MOVZ W0, 0x1
	0x03D2CC68 MOV X1, X31
	0x03D2CC6C BL 0x3C06E58
	0x03D2CC70 STRH W31, [X31 + 0xC]
	0x03D2CC74 STRH W31, [X31 + 0x8]
	0x03D2CC78 LDRB W8, [X20 + 0xA9]
	0x03D2CC7C CBZ W8, 0x3D2CCAC
	0x03D2CC80 ADD X0, X20, 0x28
	0x03D2CC84 ADD X2, X31, 0xC
	0x03D2CC88 ADD X3, X31, 0x8
	0x03D2CC8C MOV W1, W19
	0x03D2CC90 BL 0x3D2A874
	0x03D2CC94 LDRH W8, [X31 + 0x8]
	0x03D2CC98 LDRH W9, [X31 + 0xC]
	0x03D2CC9C UBFM W8, W8, 0x1B, 0x1A
	0x03D2CCA0 AND X20, X8, 0xFFFF
	0x03D2CCA4 UBFM X22, X9, 0x5, 0xC
	0x03D2CCA8 B 0x3D2CCB4
	0x03D2CCAC MOV X20, X31
	0x03D2CCB0 MOV X22, X31
	0x03D2CCB4 LDR X0, [X21]
	0x03D2CCB8 LDR W8, [X0 + 0xE0]
	0x03D2CCBC CBNZ W8, 0x3D2CCC4
	0x03D2CCC0 BL 0x1C16DFC
	0x03D2CCC4 UBFM X9, X19, 0x1B, 0x3F
	0x03D2CCC8 UBFM X8, X19, 0x30, 0x3F
	0x03D2CCCC AND W9, W9, 0xE0
	0x03D2CCD0 ADD W8, W9, W8
	0x03D2CCD4 UBFM W8, W8, 0x10, 0xF
	0x03D2CCD8 AND X8, X8, 0xFFFFFF
	0x03D2CCDC ORR X8, X8, X22, 0x0
	0x03D2CCE0 ORR X0, X8, X20, 0x0
	0x03D2CCE4 LDP X20, X19, [X31 + 0x20]
	0x03D2CCE8 LDP X22, X21, [X31 + 0x10]
	0x03D2CCEC LDR X30, [X31], #0x30
	0x03D2CCF0 RET
	0x03D2CCF4 STR X30, [X31 - 0x30]!
	0x03D2CCF8 STP X22, X21, [X31 + 0x10]
	0x03D2CCFC STP X20, X19, [X31 + 0x20]
	0x03D2CD00 ADRP X22, 0x6BB000
	0x03D2CD04 ADRP X21, 0x438000
	0x03D2CD08 LDRB W8, [X22 + 0xAF9]
	0x03D2CD0C LDR X21, [X21 + 0x760]
	0x03D2CD10 MOV X19, X1
	0x03D2CD14 MOV X20, X0
	0x03D2CD18 TBNZ X8, 0x0, 0x3D2CD3C
	0x03D2CD1C ADRP X0, 0x3C7000
	0x03D2CD20 LDR X0, [X0 + 0xA28]
	0x03D2CD24 BL 0x1C16CF4

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X23, 0x6BC000
	016 Move X22, 0x439000
	017 Move W8, [X23+2797]
	018 Move X22, [X22+2504]
	019 Move X20, X2
	020 Move X21, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {37}
	026 Move X0, 0x439000
	027 Move X0, [X0+2504]
	028 Call 0x1C17CF4
	029 Move X0, 0x3C8000
	030 Move X0, [X0+2600]
	031 Call 0x1C17CF4
	032 Move X0, 0x439000
	033 Move X0, [X0+1888]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+2797], W8
	037 Move X0, [X22]
	038 Move X22, 0x3C8000
	039 Move W8, [X0+224]
	040 Move X22, [X22+2600]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X22, 0x439000
	050 Move X22, [X22+1888]
	051 NotImplemented "Instruction ORN not yet implemented."
	052 Move W0, W8
	053 ShiftRight W0, 31
	054 And W0, W0, 0x7FFFFFFF
	055 Move X1, X31
	056 Call Debug.Assert, X0
	057 Move W8, [X19+169]
	058 Compare W8, 0
	059 JumpIfEqual {129}
	060 Move X0, [X22]
	061 Add X22, X19, 8
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move X1, X21
	068 Call UIRVEShaderInfoAllocator.AllocToTexelCoord, X0, X1
	069 Move X23, [X19]
	070 Move X21, X0
	071 Move X0, X20
	072 Move W1, W31
	073 Move X2, X31
	074 Call Matrix4x4.GetRow, X0, X1
	075 Compare X23, 0
	076 JumpIfEqual {188}
	077 Move X8, [X23]
	078 Move X22, X21
	079 ShiftRight X22, 32
	080 And X22, X22, 0x7FFFFFFF
	081 Move X0, X23
	082 Move W1, W21
	083 Move X9, [X8+424]
	084 Move X3, [X8+432]
	085 Move W2, W22
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X23, [X19]
	088 Move W1, 1
	089 Move X0, X20
	090 Move X2, X31
	091 Call Matrix4x4.GetRow, X0, X1
	092 Compare X23, 0
	093 JumpIfEqual {188}
	094 Move X8, [X23]
	095 Add W2, W22, 1
	096 Move X0, X23
	097 Move W1, W21
	098 Move X9, [X8+424]
	099 Move X3, [X8+432]
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X19, [X19]
	102 Move W1, 2
	103 Move X0, X20
	104 Move X2, X31
	105 Call Matrix4x4.GetRow, X0, X1
	106 Compare X19, 0
	107 JumpIfEqual {188}
	108 Move X8, [X19]
	109 Add W2, W22, 2
	110 Move X0, X19
	111 Move W1, W21
	112 Move X4, [X8+424]
	113 Move X3, [X8+432]
	114 Move X20, [X31+96]
	115 Move X19, [X31+104]
	116 Move X22, [X31+80]
	117 Move X21, [X31+88]
	118 Move X30, [X31+64]
	119 Move X23, [X31+72]
	120 Move D9, [X31+48]
	121 Move D8, [X31+56]
	122 Move D11, [X31+32]
	123 Move D10, [X31+40]
	124 Move D13, [X31+16]
	125 Move D12, [X31+24]
	126 Move D15, [X31+112]
	127 Move D14, [X31+120]
	128 CallNoReturn X4
	129 Move X0, [X22]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move X0, X21
	135 Call UIRVEShaderInfoAllocator.AllocToConstantBufferIndex, X0
	136 Move W21, W0
	137 Move X0, X20
	138 Move W1, W31
	139 Move X2, X31
	140 Call Matrix4x4.GetRow, X0, X1
	141 Move W1, 1
	142 Move X0, X20
	143 Move X2, X31
	144 Move V8, V0
	145 Move V9, V1
	146 Move V10, V2
	147 Move V11, V3
	148 Call Matrix4x4.GetRow, X0, X1
	149 Move W1, 2
	150 Move X0, X20
	151 Move X2, X31
	152 Move V12, V0
	153 Move V13, V1
	154 Move V14, V2
	155 Move V15, V3
	156 Call Matrix4x4.GetRow, X0, X1
	157 Move X8, [X19+176]
	158 Move W9, 48
	159 Move X20, [X31+96]
	160 Move X19, [X31+104]
	161 Move X30, [X31+64]
	162 Move X23, [X31+72]
	163 NotImplemented "Instruction NOP not yet implemented."
	164 NotImplemented "Instruction SMADDL not yet implemented."
	165 Move [X8], S8
	166 Move [X8+8], S9
	167 Move [X8+8], S10
	168 Move [X8+16], S11
	169 Move [X8+16], S12
	170 Move [X8+24], S13
	171 Move X22, [X31+80]
	172 Move X21, [X31+88]
	173 Move D9, [X31+48]
	174 Move D8, [X31+56]
	175 Move D11, [X31+32]
	176 Move D10, [X31+40]
	177 Move D13, [X31+16]
	178 Move D12, [X31+24]
	179 Move [X8+24], S14
	180 Move [X8+32], S15
	181 Move [X8+32], S0
	182 Move [X8+40], S1
	183 Move [X8+40], S2
	184 Move [X8+48], S3
	185 Move D15, [X31+112]
	186 Move D14, [X31+120]
	187 Return 
	188 Call 0x1C17F20

Method: System.Void SetClipRectValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.Vector4 clipRect)

Disassembly:
	0x03D2CD28 ADRP X0, 0x438000
	0x03D2CD2C LDR X0, [X0 + 0x760]
	0x03D2CD30 BL 0x1C16CF4
	0x03D2CD34 MOVZ W8, 0x1
	0x03D2CD38 STRB W8, [X22 + 0xAF9]
	0x03D2CD3C LDR X0, [X21]
	0x03D2CD40 STRH W31, [X31 + 0xC]
	0x03D2CD44 STRH W31, [X31 + 0x8]
	0x03D2CD48 ADRP X22, 0x3C7000
	0x03D2CD4C LDR W8, [X0 + 0xE0]
	0x03D2CD50 LDR X22, [X22 + 0xA28]
	0x03D2CD54 CBNZ W8, 0x3D2CD6C
	0x03D2CD58 BL 0x1C16DFC
	0x03D2CD5C LDR X0, [X21]
	0x03D2CD60 LDR W8, [X0 + 0xE0]
	0x03D2CD64 CBNZ W8, 0x3D2CD6C
	0x03D2CD68 BL 0x1C16DFC
	0x03D2CD6C LDR X0, [X22]
	0x03D2CD70 LDR W8, [X0 + 0xE0]
	0x03D2CD74 CBNZ W8, 0x3D2CD7C
	0x03D2CD78 BL 0x1C16DFC
	0x03D2CD7C MOVZ W0, 0x1
	0x03D2CD80 MOV X1, X31
	0x03D2CD84 BL 0x3C06E58
	0x03D2CD88 ADD X0, X20, 0x48
	0x03D2CD8C ADD X2, X31, 0xC
	0x03D2CD90 ADD X3, X31, 0x8
	0x03D2CD94 MOV W1, W19
	0x03D2CD98 BL 0x3D2A874
	0x03D2CD9C LDR X0, [X21]
	0x03D2CDA0 LDRH W21, [X31 + 0xC]
	0x03D2CDA4 LDRH W20, [X31 + 0x8]
	0x03D2CDA8 LDR W8, [X0 + 0xE0]
	0x03D2CDAC CBNZ W8, 0x3D2CDB4
	0x03D2CDB0 BL 0x1C16DFC
	0x03D2CDB4 UBFM X9, X19, 0x1B, 0x3F
	0x03D2CDB8 UBFM X8, X19, 0x30, 0x3F
	0x03D2CDBC AND W9, W9, 0xE0
	0x03D2CDC0 UBFM X10, X21, 0x5, 0x1F
	0x03D2CDC4 UBFM W11, W20, 0x1B, 0x1A
	0x03D2CDC8 ADD W8, W9, W8
	0x03D2CDCC LDP X20, X19, [X31 + 0x20]
	0x03D2CDD0 LDP X22, X21, [X31 + 0x10]
	0x03D2CDD4 ORR W12, W31, 0xFF00FF
	0x03D2CDD8 BFM W10, W8, 0x10, 0xF
	0x03D2CDDC AND X8, X11, 0xFFFF
	0x03D2CDE0 AND X9, X10, X12, 0x0
	0x03D2CDE4 ORR X0, X9, X8, 0x0
	0x03D2CDE8 LDR X30, [X31], #0x30
	0x03D2CDEC RET
	0x03D2CDF0 STR X30, [X31 - 0x30]!
	0x03D2CDF4 STP X22, X21, [X31 + 0x10]
	0x03D2CDF8 STP X20, X19, [X31 + 0x20]
	0x03D2CDFC ADRP X22, 0x6BB000
	0x03D2CE00 ADRP X21, 0x438000
	0x03D2CE04 LDRB W8, [X22 + 0xAFA]
	0x03D2CE08 LDR X21, [X21 + 0x760]
	0x03D2CE0C MOV X19, X1
	0x03D2CE10 MOV X20, X0
	0x03D2CE14 TBNZ X8, 0x0, 0x3D2CE38
	0x03D2CE18 ADRP X0, 0x3C7000
	0x03D2CE1C LDR X0, [X0 + 0xA28]
	0x03D2CE20 BL 0x1C16CF4
	0x03D2CE24 ADRP X0, 0x438000
	0x03D2CE28 LDR X0, [X0 + 0x760]
	0x03D2CE2C BL 0x1C16CF4
	0x03D2CE30 MOVZ W8, 0x1
	0x03D2CE34 STRB W8, [X22 + 0xAFA]
	0x03D2CE38 LDR X0, [X21]
	0x03D2CE3C STRH W31, [X31 + 0xC]
	0x03D2CE40 STRH W31, [X31 + 0x8]
	0x03D2CE44 ADRP X22, 0x3C7000
	0x03D2CE48 LDR W8, [X0 + 0xE0]
	0x03D2CE4C LDR X22, [X22 + 0xA28]
	0x03D2CE50 CBNZ W8, 0x3D2CE68
	0x03D2CE54 BL 0x1C16DFC
	0x03D2CE58 LDR X0, [X21]
	0x03D2CE5C LDR W8, [X0 + 0xE0]
	0x03D2CE60 CBNZ W8, 0x3D2CE68
	0x03D2CE64 BL 0x1C16DFC
	0x03D2CE68 LDR X0, [X22]
	0x03D2CE6C LDR W8, [X0 + 0xE0]
	0x03D2CE70 CBNZ W8, 0x3D2CE78
	0x03D2CE74 BL 0x1C16DFC
	0x03D2CE78 MOVZ W0, 0x1
	0x03D2CE7C MOV X1, X31
	0x03D2CE80 BL 0x3C06E58

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x6BC000
	011 Move X21, 0x439000
	012 Move W8, [X22+2798]
	013 Move X21, [X21+2504]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0x439000
	025 Move X0, [X0+2504]
	026 Call 0x1C17CF4
	027 Move X0, 0x3C8000
	028 Move X0, [X0+2600]
	029 Call 0x1C17CF4
	030 Move X0, 0x439000
	031 Move X0, [X0+1888]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+2798], W8
	035 Move X0, [X21]
	036 Move X21, 0x3C8000
	037 Move W8, [X0+224]
	038 Move X21, [X21+2600]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X21, 0x439000
	048 Move X21, [X21+1888]
	049 NotImplemented "Instruction ORN not yet implemented."
	050 Move W0, W8
	051 ShiftRight W0, 31
	052 And W0, W0, 0x7FFFFFFF
	053 Move X1, X31
	054 Call Debug.Assert, X0
	055 Move W8, [X19+169]
	056 Compare W8, 0
	057 JumpIfEqual {92}
	058 Move X0, [X21]
	059 Add X21, X19, 40
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X21
	065 Move X1, X20
	066 Call UIRVEShaderInfoAllocator.AllocToTexelCoord, X0, X1
	067 Move X8, [X19]
	068 Compare X8, 0
	069 JumpIfEqual {115}
	070 Move X9, [X8]
	071 Move V2, V9
	072 Move V3, V8
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X4, [X9+424]
	076 Move X3, [X9+432]
	077 Move X22, [X31+48]
	078 Move X21, [X31+56]
	079 Move X30, [X31+32]
	080 Move D9, [X31+16]
	081 Move D8, [X31+24]
	082 Move X1, X0
	083 Move X2, X0
	084 ShiftRight X2, 32
	085 And X2, X2, 0x7FFFFFFF
	086 Move X0, X8
	087 Move V0, V11
	088 Move V1, V10
	089 Move D11, [X31+80]
	090 Move D10, [X31+88]
	091 CallNoReturn X4
	092 Move X0, [X21]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X20
	098 Call UIRVEShaderInfoAllocator.AllocToConstantBufferIndex, X0
	099 Move X8, [X19+192]
	100 Move X20, [X31+64]
	101 Move X19, [X31+72]
	102 Move X22, [X31+48]
	103 Move X21, [X31+56]
	104 Move X30, [X31+32]
	105 Add X8, X8, W0
	106 Move [X8+8], S9
	107 Move [X8+16], S8
	108 Move D9, [X31+16]
	109 Move D8, [X31+24]
	110 Move [X8], S11
	111 Move [X8+8], S10
	112 Move D11, [X31+80]
	113 Move D10, [X31+88]
	114 Return 
	115 Call 0x1C17F20

Method: System.Void SetOpacityValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, System.Single opacity)

Disassembly:
	0x03D2CE84 ADD X0, X20, 0x68
	0x03D2CE88 ADD X2, X31, 0xC
	0x03D2CE8C ADD X3, X31, 0x8
	0x03D2CE90 MOV W1, W19
	0x03D2CE94 BL 0x3D2A874
	0x03D2CE98 LDR X0, [X21]
	0x03D2CE9C LDRH W21, [X31 + 0xC]
	0x03D2CEA0 LDRH W20, [X31 + 0x8]
	0x03D2CEA4 LDR W8, [X0 + 0xE0]
	0x03D2CEA8 CBNZ W8, 0x3D2CEB0
	0x03D2CEAC BL 0x1C16DFC
	0x03D2CEB0 UBFM X9, X19, 0x1B, 0x3F
	0x03D2CEB4 UBFM X8, X19, 0x30, 0x3F
	0x03D2CEB8 AND W9, W9, 0xE0
	0x03D2CEBC UBFM X10, X21, 0x5, 0x1F
	0x03D2CEC0 UBFM W11, W20, 0x1B, 0x1A
	0x03D2CEC4 ADD W8, W9, W8
	0x03D2CEC8 LDP X20, X19, [X31 + 0x20]
	0x03D2CECC LDP X22, X21, [X31 + 0x10]
	0x03D2CED0 ORR W12, W31, 0xFF00FF
	0x03D2CED4 BFM W10, W8, 0x10, 0xF
	0x03D2CED8 AND X8, X11, 0xFFFF
	0x03D2CEDC AND X9, X10, X12, 0x0
	0x03D2CEE0 ORR X0, X9, X8, 0x0
	0x03D2CEE4 LDR X30, [X31], #0x30
	0x03D2CEE8 RET
	0x03D2CEEC STR X30, [X31 - 0x30]!
	0x03D2CEF0 STP X22, X21, [X31 + 0x10]
	0x03D2CEF4 STP X20, X19, [X31 + 0x20]
	0x03D2CEF8 ADRP X22, 0x6BB000
	0x03D2CEFC ADRP X21, 0x438000
	0x03D2CF00 LDRB W8, [X22 + 0xAFB]
	0x03D2CF04 LDR X21, [X21 + 0x760]
	0x03D2CF08 MOV X19, X1
	0x03D2CF0C MOV X20, X0
	0x03D2CF10 TBNZ X8, 0x0, 0x3D2CF34
	0x03D2CF14 ADRP X0, 0x3C7000
	0x03D2CF18 LDR X0, [X0 + 0xA28]
	0x03D2CF1C BL 0x1C16CF4
	0x03D2CF20 ADRP X0, 0x438000
	0x03D2CF24 LDR X0, [X0 + 0x760]
	0x03D2CF28 BL 0x1C16CF4
	0x03D2CF2C MOVZ W8, 0x1
	0x03D2CF30 STRB W8, [X22 + 0xAFB]
	0x03D2CF34 LDR X0, [X21]
	0x03D2CF38 STRH W31, [X31 + 0xC]
	0x03D2CF3C STRH W31, [X31 + 0x8]
	0x03D2CF40 ADRP X22, 0x3C7000
	0x03D2CF44 LDR W8, [X0 + 0xE0]
	0x03D2CF48 LDR X22, [X22 + 0xA28]
	0x03D2CF4C CBNZ W8, 0x3D2CF64
	0x03D2CF50 BL 0x1C16DFC
	0x03D2CF54 LDR X0, [X21]
	0x03D2CF58 LDR W8, [X0 + 0xE0]
	0x03D2CF5C CBNZ W8, 0x3D2CF64
	0x03D2CF60 BL 0x1C16DFC
	0x03D2CF64 LDR X0, [X22]
	0x03D2CF68 LDR W8, [X0 + 0xE0]
	0x03D2CF6C CBNZ W8, 0x3D2CF74
	0x03D2CF70 BL 0x1C16DFC
	0x03D2CF74 MOVZ W0, 0x1
	0x03D2CF78 MOV X1, X31
	0x03D2CF7C BL 0x3C06E58
	0x03D2CF80 ADD X0, X20, 0x88

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x6BC000
	008 Move X21, 0x439000
	009 Move W8, [X22+2799]
	010 Move X21, [X21+2504]
	011 Move V8, V0
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x439000
	019 Move X0, [X0+2504]
	020 Call 0x1C17CF4
	021 Move X0, 0x3C8000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move X0, 0x439000
	025 Move X0, [X0+1888]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+2799], W8
	029 Move X0, [X21]
	030 Move X21, 0x3C8000
	031 Move W8, [X0+224]
	032 Move X21, [X21+2600]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X21]
	037 Move X21, 0x439000
	038 Move W8, [X0+224]
	039 Move X21, [X21+1888]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 NotImplemented "Instruction ORN not yet implemented."
	044 Move W0, W8
	045 ShiftRight W0, 31
	046 And W0, W0, 0x7FFFFFFF
	047 Move X1, X31
	048 Call Debug.Assert, X0
	049 Move X0, [X21]
	050 Add X21, X19, 72
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X21
	056 Move X1, X20
	057 Call UIRVEShaderInfoAllocator.AllocToTexelCoord, X0, X1
	058 Move X8, [X19]
	059 Compare X8, 0
	060 JumpIfEqual {80}
	061 Move X9, [X8]
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+8]
	067 Move X4, [X9+424]
	068 Move X3, [X9+432]
	069 Move X1, X0
	070 Move X2, X0
	071 ShiftRight X2, 32
	072 And X2, X2, 0x7FFFFFFF
	073 Move S0, 1
	074 Move S1, 1
	075 Move S2, 1
	076 Move X0, X8
	077 Move V3, V8
	078 Move V8, [X31+48]
	079 CallNoReturn X4
	080 Call 0x1C17F20

Method: System.Void SetColorValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.Color color, System.Boolean isEditorContext)

Disassembly:
	0x03D2CF84 ADD X2, X31, 0xC
	0x03D2CF88 ADD X3, X31, 0x8
	0x03D2CF8C MOV W1, W19
	0x03D2CF90 BL 0x3D2A874
	0x03D2CF94 LDR X0, [X21]
	0x03D2CF98 LDRH W21, [X31 + 0xC]
	0x03D2CF9C LDRH W20, [X31 + 0x8]
	0x03D2CFA0 LDR W8, [X0 + 0xE0]
	0x03D2CFA4 CBNZ W8, 0x3D2CFAC
	0x03D2CFA8 BL 0x1C16DFC
	0x03D2CFAC UBFM X9, X19, 0x1B, 0x3F
	0x03D2CFB0 UBFM X8, X19, 0x30, 0x3F
	0x03D2CFB4 AND W9, W9, 0xE0
	0x03D2CFB8 UBFM X10, X21, 0x5, 0x1F
	0x03D2CFBC UBFM W11, W20, 0x1B, 0x1A
	0x03D2CFC0 ADD W8, W9, W8
	0x03D2CFC4 LDP X20, X19, [X31 + 0x20]
	0x03D2CFC8 LDP X22, X21, [X31 + 0x10]
	0x03D2CFCC ORR W12, W31, 0xFF00FF
	0x03D2CFD0 BFM W10, W8, 0x10, 0xF
	0x03D2CFD4 AND X8, X11, 0xFFFF
	0x03D2CFD8 AND X9, X10, X12, 0x0
	0x03D2CFDC ORR X0, X9, X8, 0x0
	0x03D2CFE0 LDR X30, [X31], #0x30
	0x03D2CFE4 RET
	0x03D2CFE8 SUB X31, X31, 0x70
	0x03D2CFEC STP X30, X21, [X31 + 0x50]
	0x03D2CFF0 STP X20, X19, [X31 + 0x60]
	0x03D2CFF4 ADRP X20, 0x6BB000
	0x03D2CFF8 ADRP X19, 0x438000
	0x03D2CFFC LDRB W8, [X20 + 0xAFC]
	0x03D2D000 B 0x3EB1A04
	0x03D2D004 TBNZ X8, 0x0, 0x3D2D01C
	0x03D2D008 ADRP X0, 0x437000
	0x03D2D00C LDR X0, [X0 + 0x760]
	0x03D2D010 BL 0x1C16CF4
	0x03D2D014 MOVZ W8, 0x1
	0x03D2D018 STRB W8, [X20 + 0xAFC]
	0x03D2D01C LDR X8, [X19]
	0x03D2D020 MOVZ X10, 0x20
	0x03D2D024 ADRP X20, 0x6AB000
	0x03D2D028 LDR X8, [X8 + 0xB8]
	0x03D2D02C STR X31, [X8]
	0x03D2D030 LDR X8, [X19]
	0x03D2D034 LDR X9, [X8 + 0xB8]
	0x03D2D038 STR X10, [X9 + 0x8]
	0x03D2D03C LDR X9, [X8 + 0xB8]
	0x03D2D040 ORR X10, X31, 0x2000000020
	0x03D2D044 STR X10, [X9 + 0x10]
	0x03D2D048 LDR X9, [X8 + 0xB8]
	0x03D2D04C MOVZ X10, 0x28
	0x03D2D050 STR X10, [X9 + 0x18]
	0x03D2D054 LDR X9, [X8 + 0xB8]
	0x03D2D058 MOVZ W10, 0x20
	0x03D2D05C STR X10, [X9 + 0x20]
	0x03D2D060 LDRB W9, [X20 + 0xAC0]
	0x03D2D064 CBNZ W9, 0x3D2D080
	0x03D2D068 ADRP X0, 0x3CA000
	0x03D2D06C LDR X0, [X0 + 0x270]
	0x03D2D070 BL 0x1C16CF4
	0x03D2D074 LDR X8, [X19]
	0x03D2D078 MOVZ W9, 0x1
	0x03D2D07C STRB W9, [X20 + 0xAC0]
	0x03D2D080 ADRP X9, 0x3CA000
	0x03D2D084 LDR X9, [X9 + 0x270]
	0x03D2D088 MOV W1, W31
	0x03D2D08C MOV X2, X31
	0x03D2D090 LDR X9, [X9]
	0x03D2D094 LDR X9, [X9 + 0xB8]
	0x03D2D098 LDP V1, V0, [X9 + 0x60]
	0x03D2D09C LDP V2, V3, [X9 + 0x40]
	0x03D2D0A0 STP V1, V0, [X31 + 0x30]
	0x03D2D0A4 STP V2, V3, [X31 + 0x10]
	0x03D2D0A8 LDR X9, [X8 + 0xB8]
	0x03D2D0AC STUR V1, [X9 + 0x48]
	0x03D2D0B0 STUR V3, [X9 + 0x38]
	0x03D2D0B4 STUR V2, [X9 + 0x28]
	0x03D2D0B8 STUR V0, [X9 + 0x58]
	0x03D2D0BC LDR X8, [X8 + 0xB8]
	0x03D2D0C0 ADD X0, X8, 0x28
	0x03D2D0C4 BL 0x3C280A0
	0x03D2D0C8 LDR X8, [X19]
	0x03D2D0CC MOVZ W1, 0x1
	0x03D2D0D0 MOV X2, X31
	0x03D2D0D4 MOVZ W20, 0x1
	0x03D2D0D8 LDR X9, [X8 + 0xB8]
	0x03D2D0DC STP S0, S1, [X9 + 0x68]
	0x03D2D0E0 STP S2, S3, [X9 + 0x70]
	0x03D2D0E4 LDR X8, [X8 + 0xB8]
	0x03D2D0E8 ADD X0, X8, 0x28
	0x03D2D0EC BL 0x3C280A0
	0x03D2D0F0 LDR X8, [X19]
	0x03D2D0F4 MOVZ W1, 0x2
	0x03D2D0F8 MOV X2, X31
	0x03D2D0FC LDR X9, [X8 + 0xB8]
	0x03D2D100 STP S0, S1, [X9 + 0x78]
	0x03D2D104 STP S2, S3, [X9 + 0x80]
	0x03D2D108 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x6BC000
	012 Move X22, 0x439000
	013 Move W8, [X23+2800]
	014 Move X22, [X22+2504]
	015 Move W19, W2
	016 Move V8, V3
	017 Move V9, V2
	018 Move V10, V1
	019 Move V11, V0
	020 Move X21, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {37}
	026 Move X0, 0x439000
	027 Move X0, [X0+2504]
	028 Call 0x1C17CF4
	029 Move X0, 0x3C8000
	030 Move X0, [X0+2600]
	031 Call 0x1C17CF4
	032 Move X0, 0x439000
	033 Move X0, [X0+1888]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+2800], W8
	037 Move X0, [X22]
	038 Move X22, 0x3C8000
	039 Move W8, [X0+224]
	040 Call 0x3EB29FC
	041 Return 
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, [X22]
	046 Move X22, 0x438000
	047 Move W8, [X0+224]
	048 Move X22, [X22+1888]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 NotImplemented "Instruction ORN not yet implemented."
	053 Move W0, W8
	054 ShiftRight W0, 31
	055 And W0, W0, 0x7FFFFFFF
	056 Move X1, X31
	057 Call Debug.Assert, X0
	058 Move X0, [X22]
	059 Add X22, X20, 104
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X22
	065 Move X1, X21
	066 Call UIRVEShaderInfoAllocator.AllocToTexelCoord, X0, X1
	067 Move X21, X0
	068 Move X22, X0
	069 ShiftRight X22, 32
	070 And X22, X22, 0x7FFFFFFF
	071 Move X0, X31
	072 Call QualitySettings.get_activeColorSpace
	073 Move X20, [X20]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move TEMP, X19
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {101}
	079 Move V0, V11
	080 Move X0, X31
	081 Call Mathf.GammaToLinearSpace, V0
	082 Move V11, V0
	083 Move V0, V10
	084 Move X0, X31
	085 Call Mathf.GammaToLinearSpace, V0
	086 Move V10, V0
	087 Move V0, V9
	088 Move X0, X31
	089 Call Mathf.GammaToLinearSpace, V0
	090 Compare X20, 0
	091 JumpIfEqual {124}
	092 Move X8, [X20]
	093 Move V2, V0
	094 Move X0, X20
	095 Move W1, W21
	096 Move X4, [X8+424]
	097 Move X3, [X8+432]
	098 Move W2, W22
	099 Move V0, V11
	100 Move V1, V10
	101 Compare X20, 0
	102 JumpIfEqual {124}
	103 Move X8, [X20]
	104 Move X0, X20
	105 Move W1, W21
	106 Move W2, W22
	107 Move X4, [X8+424]
	108 Move X3, [X8+432]
	109 Move V0, V11
	110 Move V1, V10
	111 Move V2, V9
	112 Move V3, V8
	113 Move X20, [X31+64]
	114 Move X19, [X31+72]
	115 Move X22, [X31+48]
	116 Move X21, [X31+56]
	117 Move X30, [X31+32]
	118 Move X23, [X31+40]
	119 Move D9, [X31+16]
	120 Move D8, [X31+24]
	121 Move D11, [X31+80]
	122 Move D10, [X31+88]
	123 CallNoReturn X4
	124 Call 0x1C17F20

Method: System.Void SetTextCoreSettingValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.UIElements.UIR.TextCoreSettings settings, System.Boolean isEditorContext)

Disassembly:
	0x03D2D10C ADD X0, X8, 0x28
	0x03D2D110 BL 0x3C280A0
	0x03D2D114 LDR X8, [X19]
	0x03D2D118 ADRP X21, 0x6AC000
	0x03D2D11C LDR X9, [X8 + 0xB8]
	0x03D2D120 STP S0, S1, [X9 + 0x88]
	0x03D2D124 STP S2, S3, [X9 + 0x90]
	0x03D2D128 LDR X9, [X8 + 0xB8]
	0x03D2D12C FMOV V2.4S, 0x0
	0x03D2D130 STP X31, X31, [X9 + 0x98]
	0x03D2D134 LDR X9, [X8 + 0xB8]
	0x03D2D138 STUR V2, [X9 + 0xA8]
	0x03D2D13C LDR X9, [X8 + 0xB8]
	0x03D2D140 STP X31, X31, [X9 + 0xB8]
	0x03D2D144 LDRB W9, [X21 + 0x78F]
	0x03D2D148 CBNZ W9, 0x3D2D168
	0x03D2D14C ADRP X0, 0x3CE000
	0x03D2D150 LDR X0, [X0 + 0xF08]
	0x03D2D154 STR V2, [X31]
	0x03D2D158 BL 0x1C16CF4
	0x03D2D15C LDR V2, [X31]
	0x03D2D160 LDR X8, [X19]
	0x03D2D164 STRB W20, [X21 + 0x78F]
	0x03D2D168 ADRP X9, 0x3CE000
	0x03D2D16C LDR X9, [X9 + 0xF08]
	0x03D2D170 LDR X8, [X8 + 0xB8]
	0x03D2D174 LDP X20, X19, [X31 + 0x60]
	0x03D2D178 LDP X30, X21, [X31 + 0x50]
	0x03D2D17C LDR X9, [X9]
	0x03D2D180 MOVI V0.2D, 0x0
	0x03D2D184 LDR X9, [X9 + 0xB8]
	0x03D2D188 LDR V1, [X9]
	0x03D2D18C STUR V2, [X8 + 0xC8]
	0x03D2D190 STUR V0, [X8 + 0xD8]
	0x03D2D194 STUR V0, [X8 + 0xE8]
	0x03D2D198 STR W31, [X8 + 0xF8]
	0x03D2D19C STUR D1, [X8 + 0xFC]
	0x03D2D1A0 STR W31, [X8 + 0x104]
	0x03D2D1A4 ADD X31, X31, 0x70
	0x03D2D1A8 RET
	0x03D2D1AC STR X30, [X31 - 0x40]!
	0x03D2D1B0 STP X24, X23, [X31 + 0x10]
	0x03D2D1B4 STP X22, X21, [X31 + 0x20]
	0x03D2D1B8 STP X20, X19, [X31 + 0x30]
	0x03D2D1BC ADRP X20, 0x6BA000
	0x03D2D1C0 ADRP X23, 0x437000
	0x03D2D1C4 LDRB W8, [X20 + 0xAFD]
	0x03D2D1C8 LDR X23, [X23 + 0xC10]
	0x03D2D1CC MOV X19, X0
	0x03D2D1D0 TBNZ X8, 0x0, 0x3D2D224
	0x03D2D1D4 ADRP X0, 0x437000
	0x03D2D1D8 LDR X0, [X0 + 0xC18]
	0x03D2D1DC BL 0x1C16CF4
	0x03D2D1E0 ADRP X0, 0x437000
	0x03D2D1E4 LDR X0, [X0 + 0xC20]
	0x03D2D1E8 BL 0x1C16CF4
	0x03D2D1EC ADRP X0, 0x437000
	0x03D2D1F0 LDR X0, [X0 + 0xC28]
	0x03D2D1F4 BL 0x1C16CF4
	0x03D2D1F8 ADRP X0, 0x437000
	0x03D2D1FC LDR X0, [X0 + 0xC30]
	0x03D2D200 BL 0x1C16CF4
	0x03D2D204 ADRP X0, 0x437000
	0x03D2D208 LDR X0, [X0 + 0xC38]
	0x03D2D20C BL 0x1C16CF4
	0x03D2D210 ADRP X0, 0x437000
	0x03D2D214 LDR X0, [X0 + 0xC10]
	0x03D2D218 BL 0x1C16CF4
	0x03D2D21C MOVZ W8, 0x1
	0x03D2D220 STRB W8, [X20 + 0xAFD]
	0x03D2D224 LDR X0, [X23]
	0x03D2D228 LDR W8, [X0 + 0xE0]
	0x03D2D22C CBNZ W8, 0x3D2D238
	0x03D2D230 BL 0x1C16DFC
	0x03D2D234 LDR X0, [X23]
	0x03D2D238 LDR X8, [X0 + 0xB8]
	0x03D2D23C LDR X20, [X8 + 0x8]
	0x03D2D240 CBNZ X20, 0x3D2D294
	0x03D2D244 LDR W8, [X0 + 0xE0]
	0x03D2D248 CBNZ W8, 0x3D2D254
	0x03D2D24C BL 0x1C16DFC
	0x03D2D250 LDR X0, [X23]
	0x03D2D254 ADRP X9, 0x437000
	0x03D2D258 LDR X8, [X0 + 0xB8]
	0x03D2D25C LDR X9, [X9 + 0xC20]
	0x03D2D260 LDR X21, [X8]
	0x03D2D264 LDR X0, [X9]
	0x03D2D268 BL 0x1C16F10
	0x03D2D26C ADRP X8, 0x437000
	0x03D2D270 LDR X8, [X8 + 0xC30]
	0x03D2D274 MOV X1, X21
	0x03D2D278 MOV X3, X31
	0x03D2D27C MOV X20, X0
	0x03D2D280 LDR X2, [X8]
	0x03D2D284 BL 0x2D27AA8
	0x03D2D288 LDR X0, [X23]
	0x03D2D28C LDR X8, [X0 + 0xB8]
	0x03D2D290 STR X20, [X8 + 0x8]
	0x03D2D294 LDR W8, [X0 + 0xE0]
	0x03D2D298 CBNZ W8, 0x3D2D2A4
	0x03D2D29C BL 0x1C16DFC
	0x03D2D2A0 LDR X0, [X23]
	0x03D2D2A4 LDR X8, [X0 + 0xB8]
	0x03D2D2A8 ADRP X24, 0x437000
	0x03D2D2AC LDR X21, [X8 + 0x10]
	0x03D2D2B0 LDR X24, [X24 + 0xC28]
	0x03D2D2B4 CBNZ X21, 0x3D2D308
	0x03D2D2B8 LDR W8, [X0 + 0xE0]
	0x03D2D2BC CBNZ W8, 0x3D2D2C8
	0x03D2D2C0 BL 0x1C16DFC
	0x03D2D2C4 LDR X0, [X23]
	0x03D2D2C8 ADRP X9, 0x437000
	0x03D2D2CC LDR X8, [X0 + 0xB8]
	0x03D2D2D0 LDR X9, [X9 + 0xC18]
	0x03D2D2D4 LDR X22, [X8]
	0x03D2D2D8 LDR X0, [X9]
	0x03D2D2DC BL 0x1C16F10
	0x03D2D2E0 ADRP X8, 0x437000
	0x03D2D2E4 LDR X8, [X8 + 0xC38]
	0x03D2D2E8 MOV X1, X22
	0x03D2D2EC MOV X3, X31
	0x03D2D2F0 MOV X21, X0
	0x03D2D2F4 LDR X2, [X8]
	0x03D2D2F8 BL 0x2A6B948
	0x03D2D2FC LDR X8, [X23]
	0x03D2D300 LDR X8, [X8 + 0xB8]
	0x03D2D304 STR X21, [X8 + 0x10]
	0x03D2D308 LDR X4, [X24]
	0x03D2D30C MOV X0, X19
	0x03D2D310 MOV X1, X20
	0x03D2D314 MOV X2, X21
	0x03D2D318 LDP X20, X19, [X31 + 0x30]
	0x03D2D31C LDP X22, X21, [X31 + 0x20]
	0x03D2D320 LDP X24, X23, [X31 + 0x10]
	0x03D2D324 MOVZ W3, 0x2710
	0x03D2D328 LDR X30, [X31], #0x40
	0x03D2D32C B 0x2EF0D58
	0x03D2D330 STR X30, [X31 - 0x20]!
	0x03D2D334 STP X20, X19, [X31 + 0x10]
	0x03D2D338 ADRP X19, 0x6BA000
	0x03D2D33C ADRP X20, 0x437000
	0x03D2D340 LDRB W8, [X19 + 0xAFE]
	0x03D2D344 LDR X20, [X20 + 0xC10]
	0x03D2D348 TBNZ X8, 0x0, 0x3D2D360
	0x03D2D34C ADRP X0, 0x437000
	0x03D2D350 LDR X0, [X0 + 0xC10]
	0x03D2D354 BL 0x1C16CF4
	0x03D2D358 MOVZ W8, 0x1
	0x03D2D35C STRB W8, [X19 + 0xAFE]
	0x03D2D360 LDR X0, [X20]
	0x03D2D364 BL 0x1C16F10
	0x03D2D368 MOV X1, X31
	0x03D2D36C MOV X19, X0
	0x03D2D370 BL 0x33BDD8C
	0x03D2D374 LDR X8, [X20]
	0x03D2D378 LDR X8, [X8 + 0xB8]
	0x03D2D37C STR X19, [X8]
	0x03D2D380 LDP X20, X19, [X31 + 0x10]
	0x03D2D384 LDR X30, [X31], #0x20
	0x03D2D388 RET
	0x03D2D38C MOV X1, X31
	0x03D2D390 B 0x33BDD8C
	0x03D2D394 STR X30, [X31 - 0x20]!
	0x03D2D398 STP X20, X19, [X31 + 0x10]
	0x03D2D39C ADRP X19, 0x6BA000
	0x03D2D3A0 ADRP X20, 0x437000
	0x03D2D3A4 LDRB W8, [X19 + 0xAFF]
	0x03D2D3A8 LDR X20, [X20 + 0xC40]
	0x03D2D3AC TBNZ X8, 0x0, 0x3D2D3C4
	0x03D2D3B0 ADRP X0, 0x437000
	0x03D2D3B4 LDR X0, [X0 + 0xC40]
	0x03D2D3B8 BL 0x1C16CF4
	0x03D2D3BC MOVZ W8, 0x1
	0x03D2D3C0 STRB W8, [X19 + 0xAFF]
	0x03D2D3C4 LDR X0, [X20]
	0x03D2D3C8 BL 0x1C16F10
	0x03D2D3CC MOV X19, X0
	0x03D2D3D0 BL 0x3D2D3E4
	0x03D2D3D4 MOV X0, X19
	0x03D2D3D8 LDP X20, X19, [X31 + 0x10]
	0x03D2D3DC LDR X30, [X31], #0x20
	0x03D2D3E0 RET

ISIL:
	001 Move [X31-112], D13
	002 Move [X31-104], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X24, 0x6BB000
	015 Move X22, 0x438000
	016 Move W8, [X24+2801]
	017 Move X22, [X22+2504]
	018 Move W23, W3
	019 Move X20, X2
	020 Move X21, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {37}
	026 Move X0, 0x438000
	027 Move X0, [X0+2504]
	028 Call 0x1C17CF4
	029 Move X0, 0x3C7000
	030 Move X0, [X0+2600]
	031 Call 0x1C17CF4
	032 Move X0, 0x438000
	033 Move X0, [X0+1888]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X24+2801], W8
	037 Move X0, [X22]
	038 Move X22, 0x3C7000
	039 Move W8, [X0+224]
	040 Move X22, [X22+2600]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, [X22]
	045 Move X22, 0x438000
	046 Move W8, [X0+224]
	047 Move X22, [X22+1888]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 NotImplemented "Instruction ORN not yet implemented."
	052 Move W0, W8
	053 ShiftRight W0, 31
	054 And W0, W0, 0x7FFFFFFF
	055 Move X1, X31
	056 Call Debug.Assert, X0
	057 Move X0, [X22]
	058 Add X22, X19, 136
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X22
	064 Move X1, X21
	065 Call UIRVEShaderInfoAllocator.AllocToTexelCoord, X0, X1
	066 Move S13, [X20+52]
	067 Move S8, [X20+56]
	068 Move V9, [X20+60]
	069 Move V10, [X20+32]
	070 Move X21, X0
	071 Move X22, X0
	072 ShiftRight X22, 32
	073 And X22, X22, 0x7FFFFFFF
	074 Move X0, X31
	075 Call QualitySettings.get_activeColorSpace
	076 Move X24, [X19]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move TEMP, X23
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {161}
	082 Move V0, [X20]
	083 Move X0, X31
	084 Call Mathf.GammaToLinearSpace, V0
	085 Move V1, [X20+4]
	086 Move V11, V0
	087 Move X0, X31
	088 Move V0, V1
	089 Call Mathf.GammaToLinearSpace, V0
	090 Move V1, [X20+8]
	091 Move V12, V0
	092 Move X0, X31
	093 Move V0, V1
	094 Call Mathf.GammaToLinearSpace, V0
	095 Compare X24, 0
	096 JumpIfEqual {226}
	097 Move X8, [X24]
	098 Move V3, [X20+12]
	099 Move V2, V0
	100 Move X0, X24
	101 Move X9, [X8+424]
	102 Move X3, [X8+432]
	103 Move W1, W21
	104 Move W2, W22
	105 Move V0, V11
	106 Move V1, V12
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move V0, [X20+16]
	109 Move X23, [X19]
	110 Move X0, X31
	111 Call Mathf.GammaToLinearSpace, V0
	112 Move V1, [X20+20]
	113 Move V11, V0
	114 Move X0, X31
	115 Move V0, V1
	116 Call Mathf.GammaToLinearSpace, V0
	117 Move V1, [X20+24]
	118 Move V12, V0
	119 Move X0, X31
	120 Move V0, V1
	121 Call Mathf.GammaToLinearSpace, V0
	122 Compare X23, 0
	123 JumpIfEqual {226}
	124 Move X8, [X23]
	125 Move V3, [X20+28]
	126 Move V2, V0
	127 Add W2, W22, 1
	128 Move X9, [X8+424]
	129 Move X3, [X8+432]
	130 Move X0, X23
	131 Move W1, W21
	132 Move V0, V11
	133 Move V1, V12
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Move V0, [X20+36]
	136 Move X23, [X19]
	137 Move X0, X31
	138 Call Mathf.GammaToLinearSpace, V0
	139 Move V1, [X20+40]
	140 Move V11, V0
	141 Move X0, X31
	142 Move V0, V1
	143 Call Mathf.GammaToLinearSpace, V0
	144 Move V1, [X20+44]
	145 Move V12, V0
	146 Move X0, X31
	147 Move V0, V1
	148 Call Mathf.GammaToLinearSpace, V0
	149 Compare X23, 0
	150 JumpIfEqual {226}
	151 Move X8, [X23]
	152 Move V3, [X20+48]
	153 Move V2, V0
	154 Add W2, W22, 2
	155 Move X9, [X8+424]
	156 Move X3, [X8+432]
	157 Move X0, X23
	158 Move W1, W21
	159 Move V0, V11
	160 Move V1, V12
	161 Compare X24, 0
	162 JumpIfEqual {226}
	163 Move X8, [X24]
	164 Move S2, [X20+8]
	165 Move S3, [X20+12]
	166 Move S0, [X20]
	167 Move S1, [X20+4]
	168 Move X0, X24
	169 Move X9, [X8+424]
	170 Move X3, [X8+432]
	171 Move W1, W21
	172 Move W2, W22
	173 NotImplemented "Instruction BLR not yet implemented."
	174 Move X0, [X19]
	175 Compare X0, 0
	176 JumpIfEqual {226}
	177 Move X8, [X0]
	178 Move S2, [X20+24]
	179 Move S3, [X20+28]
	180 Move S0, [X20+16]
	181 Move S1, [X20+20]
	182 Add W2, W22, 1
	183 Move X9, [X8+424]
	184 Move X3, [X8+432]
	185 Move W1, W21
	186 NotImplemented "Instruction BLR not yet implemented."
	187 Move X0, [X19]
	188 Compare X0, 0
	189 JumpIfEqual {226}
	190 Move X8, [X0]
	191 Move S2, [X20+44]
	192 Move S3, [X20+48]
	193 Move S0, [X20+36]
	194 Move S1, [X20+40]
	195 Add W2, W22, 2
	196 Move X9, [X8+424]
	197 Move X3, [X8+432]
	198 Move W1, W21
	199 NotImplemented "Instruction BLR not yet implemented."
	200 Move X0, [X19]
	201 Compare X0, 0
	202 JumpIfEqual {226}
	203 Move X8, [X0]
	204 Add W2, W22, 3
	205 Move W1, W21
	206 Move V1, V8
	207 Move X4, [X8+424]
	208 Move X3, [X8+432]
	209 Move V2, V9
	210 Move V3, V10
	211 Move X20, [X31+96]
	212 Move X19, [X31+104]
	213 Move X22, [X31+80]
	214 Move X21, [X31+88]
	215 Move X24, [X31+64]
	216 Move X23, [X31+72]
	217 Move X30, [X31+48]
	218 Move D9, [X31+32]
	219 Move D8, [X31+40]
	220 Move D11, [X31+16]
	221 Move D10, [X31+24]
	222 NotImplemented "Instruction FNEG not yet implemented."
	223 Move D13, [X31+112]
	224 Move D12, [X31+120]
	225 CallNoReturn X4
	226 Call 0x1C17F20

Method: System.Void FreeTransform(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2D7DC BL 0x1C16CF4
	0x03D2D7E0 ADRP X0, 0x437000
	0x03D2D7E4 LDR X0, [X0 + 0xCB0]
	0x03D2D7E8 BL 0x1C16CF4
	0x03D2D7EC MOVZ W8, 0x1
	0x03D2D7F0 STRB W8, [X22 + 0xB06]
	0x03D2D7F4 MOV X0, X19
	0x03D2D7F8 MOV X1, X31
	0x03D2D7FC BL 0x33BDD8C
	0x03D2D800 LDR X0, [X21]
	0x03D2D804 LDR W8, [X0 + 0xE0]
	0x03D2D808 CBNZ W8, 0x3D2D814
	0x03D2D80C BL 0x1C16DFC
	0x03D2D810 LDR X0, [X21]
	0x03D2D814 LDR X8, [X0 + 0xB8]
	0x03D2D818 LDR X0, [X8]
	0x03D2D81C CBZ X0, 0x3D2D918
	0x03D2D820 ADRP X9, 0x437000
	0x03D2D824 LDR X9, [X9 + 0xCA8]
	0x03D2D828 LDR W10, [X0 + 0x1C]
	0x03D2D82C LDR X8, [X0 + 0x10]
	0x03D2D830 LDR X9, [X9]
	0x03D2D834 ADD W10, W10, 0x1
	0x03D2D838 STR W10, [X0 + 0x1C]
	0x03D2D83C CBZ X8, 0x3D2D918
	0x03D2D840 ADRP X24, 0x437000
	0x03D2D844 LDR X24, [X24 + 0xC98]
	0x03D2D848 LDRSW X10, [X0 + 0x18]
	0x03D2D84C LDR W11, [X8 + 0x18]
	0x03D2D850 ADRP X25, 0x437000
	0x03D2D854 ADRP X23, 0x437000
	0x03D2D858 ADRP X22, 0x437000
	0x03D2D85C ADRP X21, 0x437000
	0x03D2D860 LDR X25, [X25 + 0xC90]
	0x03D2D864 LDR X23, [X23 + 0xCB0]
	0x03D2D868 LDR X22, [X22 + 0xCA0]
	0x03D2D86C LDR X21, [X21 + 0x4A0]
	0x03D2D870 CMP W10, W11

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2802]
	009 Move X21, [X21+2504]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x438000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move X0, 0x3C7000
	020 Move X0, [X0+2600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2802], W8
	024 Move X0, [X21]
	025 Move X21, 0x3C7000
	026 Move W8, [X0+224]
	027 Move X21, [X21+2600]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 NotImplemented "Instruction ORN not yet implemented."
	037 Move W0, W8
	038 ShiftRight W0, 31
	039 And W0, W0, 0x7FFFFFFF
	040 Move X1, X31
	041 Call Debug.Assert, X0
	042 Add X0, X20, 8
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Call BitmapAllocator32.Free, X0, X1
	050 Return 

Method: System.Void FreeClipRect(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2D874 B.CS 0x3D2D88C
	0x03D2D878 ADD W9, W10, 0x1
	0x03D2D87C ADD X8, X8, X10, 0x3, LSL
	0x03D2D880 STR W9, [X0 + 0x18]
	0x03D2D884 STR X19, [X8 + 0x20]
	0x03D2D888 B 0x3D2D8A0
	0x03D2D88C LDR X8, [X9 + 0x20]
	0x03D2D890 MOV X1, X19
	0x03D2D894 LDR X8, [X8 + 0xC0]
	0x03D2D898 LDR X2, [X8 + 0x70]
	0x03D2D89C BL 0x301BF90
	0x03D2D8A0 STR X20, [X19 + 0x10]
	0x03D2D8A4 LDR X0, [X24]
	0x03D2D8A8 BL 0x1C16F10
	0x03D2D8AC LDR X2, [X25]
	0x03D2D8B0 MOVZ W1, 0x20
	0x03D2D8B4 MOV X20, X0
	0x03D2D8B8 BL 0x2AA481C
	0x03D2D8BC STR X20, [X19 + 0x18]
	0x03D2D8C0 LDR X0, [X23]
	0x03D2D8C4 BL 0x1C16F10
	0x03D2D8C8 MOV X20, X0
	0x03D2D8CC BL 0x3D2D1AC
	0x03D2D8D0 STR X20, [X19 + 0x20]
	0x03D2D8D4 LDR X0, [X22]
	0x03D2D8D8 BL 0x1C16F10
	0x03D2D8DC MOV X20, X0
	0x03D2D8E0 BL 0x3D2D45C
	0x03D2D8E4 STR X20, [X19 + 0x28]
	0x03D2D8E8 LDR X0, [X21]
	0x03D2D8EC BL 0x1C16F10
	0x03D2D8F0 MOVZ W1, 0x1000
	0x03D2D8F4 MOV X2, X31
	0x03D2D8F8 MOV X20, X0
	0x03D2D8FC BL 0x3D2117C
	0x03D2D900 STR X20, [X19 + 0x30]
	0x03D2D904 LDP X20, X19, [X31 + 0x30]
	0x03D2D908 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2803]
	009 Move X21, [X21+2504]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x438000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move X0, 0x3C7000
	020 Move X0, [X0+2600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2803], W8
	024 Move X0, [X21]
	025 Move X21, 0x3C7000
	026 Move W8, [X0+224]
	027 Move X21, [X21+2600]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 NotImplemented "Instruction ORN not yet implemented."
	037 Move W0, W8
	038 ShiftRight W0, 31
	039 And W0, W0, 0x7FFFFFFF
	040 Move X1, X31
	041 Call Debug.Assert, X0
	042 Add X0, X20, 40
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Call BitmapAllocator32.Free, X0, X1
	050 Return 

Method: System.Void FreeOpacity(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2D90C LDP X24, X23, [X31 + 0x10]
	0x03D2D910 LDP X30, X25, [X31], #0x40
	0x03D2D914 RET
	0x03D2D918 BL 0x1C16F20
	0x03D2D91C LDRB W0, [X0 + 0x39]
	0x03D2D920 RET
	0x03D2D924 AND W8, W1, 0x1
	0x03D2D928 STRB W8, [X0 + 0x39]
	0x03D2D92C RET
	0x03D2D930 STP X30, X21, [X31 - 0x20]!
	0x03D2D934 STP X20, X19, [X31 + 0x10]
	0x03D2D938 ADRP X21, 0x6BA000
	0x03D2D93C ADRP X20, 0x3CD000
	0x03D2D940 LDRB W8, [X21 + 0xB07]
	0x03D2D944 LDR X20, [X20 + 0xC10]
	0x03D2D948 MOV X19, X0
	0x03D2D94C TBNZ X8, 0x0, 0x3D2D964
	0x03D2D950 ADRP X0, 0x3CD000
	0x03D2D954 LDR X0, [X0 + 0xC10]
	0x03D2D958 BL 0x1C16CF4
	0x03D2D95C MOVZ W8, 0x1
	0x03D2D960 STRB W8, [X21 + 0xB07]
	0x03D2D964 LDR X8, [X19]
	0x03D2D968 MOVZ W1, 0x1
	0x03D2D96C MOV X0, X19
	0x03D2D970 LDP X9, X2, [X8 + 0x188]
	0x03D2D974 BLR X9
	0x03D2D978 LDR X0, [X20]
	0x03D2D97C LDR W8, [X0 + 0xE0]
	0x03D2D980 CBNZ W8, 0x3D2D988
	0x03D2D984 BL 0x1C16DFC
	0x03D2D988 MOV X0, X19
	0x03D2D98C LDP X20, X19, [X31 + 0x10]
	0x03D2D990 MOV X1, X31
	0x03D2D994 LDP X30, X21, [X31], #0x20
	0x03D2D998 B 0x33B3E9C
	0x03D2D99C STP X30, X21, [X31 - 0x20]!
	0x03D2D9A0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2804]
	009 Move X21, [X21+2504]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x438000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move X0, 0x3C7000
	020 Move X0, [X0+2600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2804], W8
	024 Move X0, [X21]
	025 Move X21, 0x3C7000
	026 Move W8, [X0+224]
	027 Move X21, [X21+2600]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 NotImplemented "Instruction ORN not yet implemented."
	037 Move W0, W8
	038 ShiftRight W0, 31
	039 And W0, W0, 0x7FFFFFFF
	040 Move X1, X31
	041 Call Debug.Assert, X0
	042 Add X0, X20, 72
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Call BitmapAllocator32.Free, X0, X1
	050 Return 

Method: System.Void FreeColor(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2D9A4 ADRP X21, 0x6BA000
	0x03D2D9A8 LDRB W8, [X21 + 0xB08]
	0x03D2D9AC MOV W20, W1
	0x03D2D9B0 MOV X19, X0
	0x03D2D9B4 TBNZ X8, 0x0, 0x3D2D9FC
	0x03D2D9B8 ADRP X0, 0x437000
	0x03D2D9BC LDR X0, [X0 + 0xCB8]
	0x03D2D9C0 BL 0x1C16CF4
	0x03D2D9C4 ADRP X0, 0x437000
	0x03D2D9C8 LDR X0, [X0 + 0xCC0]
	0x03D2D9CC BL 0x1C16CF4
	0x03D2D9D0 ADRP X0, 0x437000
	0x03D2D9D4 LDR X0, [X0 + 0xCC8]
	0x03D2D9D8 BL 0x1C16CF4
	0x03D2D9DC ADRP X0, 0x437000
	0x03D2D9E0 LDR X0, [X0 + 0xCD0]
	0x03D2D9E4 BL 0x1C16CF4
	0x03D2D9E8 ADRP X0, 0x437000
	0x03D2D9EC LDR X0, [X0 + 0x700]
	0x03D2D9F0 BL 0x1C16CF4
	0x03D2D9F4 MOVZ W8, 0x1
	0x03D2D9F8 STRB W8, [X21 + 0xB08]
	0x03D2D9FC LDRB W8, [X19 + 0x39]
	0x03D2DA00 CBNZ W8, 0x3D2DAA4
	0x03D2DA04 TBZ X20, 0x0, 0x3D2DA9C
	0x03D2DA08 LDR X0, [X19 + 0x18]
	0x03D2DA0C CBZ X0, 0x3D2DAB0
	0x03D2DA10 ADRP X8, 0x437000
	0x03D2DA14 LDR X8, [X8 + 0xCB8]
	0x03D2DA18 LDR X1, [X8]
	0x03D2DA1C BL 0x2AA5220
	0x03D2DA20 LDR X0, [X19 + 0x20]
	0x03D2DA24 CBZ X0, 0x3D2DAB0
	0x03D2DA28 ADRP X8, 0x437000
	0x03D2DA2C LDR X8, [X8 + 0xCC0]
	0x03D2DA30 LDR X1, [X8]
	0x03D2DA34 BL 0x2EF0E1C
	0x03D2DA38 LDR X0, [X19 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2805]
	009 Move X21, [X21+2504]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x438000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move X0, 0x3C7000
	020 Move X0, [X0+2600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2805], W8
	024 Move X0, [X21]
	025 Move X21, 0x3C7000
	026 Move W8, [X0+224]
	027 Move X21, [X21+2600]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 NotImplemented "Instruction ORN not yet implemented."
	037 Move W0, W8
	038 ShiftRight W0, 31
	039 And W0, W0, 0x7FFFFFFF
	040 Move X1, X31
	041 Call Debug.Assert, X0
	042 Add X0, X20, 104
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Call BitmapAllocator32.Free, X0, X1
	050 Return 

Method: System.Void FreeTextCoreSettings(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2DA3C CBZ X0, 0x3D2DAB0
	0x03D2DA40 ADRP X8, 0x437000
	0x03D2DA44 LDR X8, [X8 + 0xCC8]
	0x03D2DA48 LDR X1, [X8]
	0x03D2DA4C BL 0x2EF0E1C
	0x03D2DA50 LDR X0, [X19 + 0x30]
	0x03D2DA54 CBZ X0, 0x3D2DAB0
	0x03D2DA58 MOV X1, X31
	0x03D2DA5C BL 0x3D21098
	0x03D2DA60 ADRP X20, 0x437000
	0x03D2DA64 LDR X20, [X20 + 0x700]
	0x03D2DA68 LDR X0, [X20]
	0x03D2DA6C LDR W8, [X0 + 0xE0]
	0x03D2DA70 CBNZ W8, 0x3D2DA7C
	0x03D2DA74 BL 0x1C16DFC
	0x03D2DA78 LDR X0, [X20]
	0x03D2DA7C LDR X8, [X0 + 0xB8]
	0x03D2DA80 LDR X0, [X8]
	0x03D2DA84 CBZ X0, 0x3D2DAB0
	0x03D2DA88 ADRP X8, 0x437000
	0x03D2DA8C LDR X8, [X8 + 0xCD0]
	0x03D2DA90 MOV X1, X19
	0x03D2DA94 LDR X2, [X8]
	0x03D2DA98 BL 0x301D7A8
	0x03D2DA9C MOVZ W8, 0x1
	0x03D2DAA0 STRB W8, [X19 + 0x39]
	0x03D2DAA4 LDP X20, X19, [X31 + 0x10]
	0x03D2DAA8 LDP X30, X21, [X31], #0x20
	0x03D2DAAC RET
	0x03D2DAB0 BL 0x1C16F20
	0x03D2DAB4 STR X30, [X31 - 0x10]!
	0x03D2DAB8 LDRB W8, [X0 + 0x39]
	0x03D2DABC CBZ W8, 0x3D2DACC
	0x03D2DAC0 MOV X1, X31
	0x03D2DAC4 LDR X30, [X31], #0x10
	0x03D2DAC8 B 0x3D909FC
	0x03D2DACC LDR X0, [X0 + 0x30]
	0x03D2DAD0 CBZ X0, 0x3D2DAE0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2806]
	009 Move X21, [X21+2504]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x438000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move X0, 0x3C7000
	020 Move X0, [X0+2600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2806], W8
	024 Move X0, [X21]
	025 Move X21, 0x3C7000
	026 Move W8, [X0+224]
	027 Move X21, [X21+2600]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 NotImplemented "Instruction ORN not yet implemented."
	037 Move W0, W8
	038 ShiftRight W0, 31
	039 And W0, W0, 0x7FFFFFFF
	040 Move X1, X31
	041 Call Debug.Assert, X0
	042 Add X0, X20, 136
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Call BitmapAllocator32.Free, X0, X1
	050 Return 

Method: UnityEngine.Color32 TransformAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2DAD4 MOV X1, X31
	0x03D2DAD8 LDR X30, [X31], #0x10
	0x03D2DADC B 0x3D21838
	0x03D2DAE0 BL 0x1C16F20
	0x03D2DAE4 STR X30, [X31 - 0x30]!
	0x03D2DAE8 STP X22, X21, [X31 + 0x10]
	0x03D2DAEC STP X20, X19, [X31 + 0x20]
	0x03D2DAF0 ADRP X22, 0x6BA000
	0x03D2DAF4 LDRB W8, [X22 + 0xB09]
	0x03D2DAF8 MOV X19, X2
	0x03D2DAFC MOV X20, X1
	0x03D2DB00 MOV X21, X0
	0x03D2DB04 TBNZ X8, 0x0, 0x3D2DB28
	0x03D2DB08 ADRP X0, 0x437000
	0x03D2DB0C LDR X0, [X0 + 0xCD8]
	0x03D2DB10 BL 0x1C16CF4
	0x03D2DB14 ADRP X0, 0x3C6000
	0x03D2DB18 LDR X0, [X0 + 0x598]
	0x03D2DB1C BL 0x1C16CF4
	0x03D2DB20 MOVZ W8, 0x1
	0x03D2DB24 STRB W8, [X22 + 0xB09]
	0x03D2DB28 STR X31, [X31 + 0x8]
	0x03D2DB2C LDRB W8, [X21 + 0x39]
	0x03D2DB30 CBZ W8, 0x3D2DB48
	0x03D2DB34 MOV X0, X21
	0x03D2DB38 MOV X1, X31
	0x03D2DB3C BL 0x3D909FC
	0x03D2DB40 MOV X0, X31
	0x03D2DB44 B 0x3D2DBD4
	0x03D2DB48 ADRP X8, 0x3C6000
	0x03D2DB4C LDR X8, [X8 + 0x598]
	0x03D2DB50 LDR X0, [X8]
	0x03D2DB54 LDR W8, [X0 + 0xE0]
	0x03D2DB58 CBNZ W8, 0x3D2DB60
	0x03D2DB5C BL 0x1C16DFC
	0x03D2DB60 MOV X0, X20
	0x03D2DB64 MOV X1, X31
	0x03D2DB68 MOV X2, X31
	0x03D2DB6C BL 0x3C3883C
	0x03D2DB70 MOV W8, W0
	0x03D2DB74 MOV X0, X31
	0x03D2DB78 TBNZ X8, 0x0, 0x3D2DBD4
	0x03D2DB7C LDR X0, [X21 + 0x18]
	0x03D2DB80 CBZ X0, 0x3D2DBE4
	0x03D2DB84 ADRP X8, 0x437000
	0x03D2DB88 LDR X8, [X8 + 0xCD8]
	0x03D2DB8C ADD X2, X31, 0x8
	0x03D2DB90 MOV X1, X20
	0x03D2DB94 LDR X3, [X8]
	0x03D2DB98 BL 0x2AA6B2C
	0x03D2DB9C TBZ X0, 0x0, 0x3D2DBB8
	0x03D2DBA0 LDR X0, [X31 + 0x8]
	0x03D2DBA4 CBZ X0, 0x3D2DBE4
	0x03D2DBA8 LDR W8, [X0 + 0x18]
	0x03D2DBAC ADD W8, W8, 0x1
	0x03D2DBB0 STR W8, [X0 + 0x18]
	0x03D2DBB4 B 0x3D2DBD0
	0x03D2DBB8 MOV X0, X21
	0x03D2DBBC MOV X1, X20
	0x03D2DBC0 MOV X2, X19
	0x03D2DBC4 BL 0x3D2DBE8
	0x03D2DBC8 STR X0, [X31 + 0x8]
	0x03D2DBCC CBZ X0, 0x3D2DBE4
	0x03D2DBD0 LDR X0, [X0 + 0x20]
	0x03D2DBD4 LDP X20, X19, [X31 + 0x20]
	0x03D2DBD8 LDP X22, X21, [X31 + 0x10]
	0x03D2DBDC LDR X30, [X31], #0x30
	0x03D2DBE0 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2807]
	009 Move X21, [X21+1888]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3C7000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x438000
	020 Move X0, [X0+1888]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2807], W8
	024 Move X0, [X21]
	025 Move X22, 0x3C7000
	026 Move W8, [X0+224]
	027 Move X22, [X22+2600]
	028 Compare W8, 0
	029 JumpIfNotEqual {36}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X22]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W0, 1
	042 Move X1, X31
	043 Call Debug.Assert, X0
	044 NotImplemented "Instruction STRH not yet implemented."
	045 NotImplemented "Instruction STRH not yet implemented."
	046 Move W8, [X20+169]
	047 Compare W8, 0
	048 JumpIfEqual {63}
	049 Add X0, X20, 8
	050 Add X2, X31, 12
	051 Add X3, X31, 8
	052 Move W1, W19
	053 Call BitmapAllocator32.GetAllocPageAtlasLocation, X0, X1, X2, X3
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 NotImplemented "Instruction LDRH not yet implemented."
	056 Move W8, W8
	057 ShiftRight W8, 27
	058 And W8, W8, 0x3FFFFFF
	059 And X20, X8, 0xFFFF
	060 Move X22, X9
	061 ShiftRight X22, 5
	062 And X22, X22, 4095
	063 Move X20, X31
	064 Move X22, X31
	065 Move X0, [X21]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X9, X19
	071 ShiftRight X9, 27
	072 And X9, X9, 0x7FFFFFFF
	073 Move X8, X19
	074 ShiftRight X8, 48
	075 And X8, X8, 0x7FFFFFFF
	076 And W9, W9, 224
	077 Add W8, W9, W8
	078 Move W8, W8
	079 ShiftRight W8, 16
	080 And W8, W8, 0x7FFF
	081 And X8, X8, 0xFFFFFF
	082 Or X8, X8, X22
	083 Or X0, X8, X20
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return X0

Method: UnityEngine.Color32 ClipRectAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2DBE4 BL 0x1C16F20
	0x03D2DBE8 SUB X31, X31, 0xF0
	0x03D2DBEC STP X29, X30, [X31 + 0x90]
	0x03D2DBF0 STP X28, X27, [X31 + 0xA0]
	0x03D2DBF4 STP X26, X25, [X31 + 0xB0]
	0x03D2DBF8 STP X24, X23, [X31 + 0xC0]
	0x03D2DBFC STP X22, X21, [X31 + 0xD0]
	0x03D2DC00 STP X20, X19, [X31 + 0xE0]
	0x03D2DC04 ADRP X20, 0x6BA000
	0x03D2DC08 LDRB W8, [X20 + 0xB0A]
	0x03D2DC0C MOV X22, X2
	0x03D2DC10 MOV X21, X1
	0x03D2DC14 MOV X19, X0
	0x03D2DC18 TBNZ X8, 0x0, 0x3D2DC78
	0x03D2DC1C ADRP X0, 0x3C6000
	0x03D2DC20 LDR X0, [X0 + 0xA28]
	0x03D2DC24 BL 0x1C16CF4
	0x03D2DC28 ADRP X0, 0x437000
	0x03D2DC2C LDR X0, [X0 + 0xCE0]
	0x03D2DC30 BL 0x1C16CF4
	0x03D2DC34 ADRP X0, 0x437000
	0x03D2DC38 LDR X0, [X0 + 0xCE8]
	0x03D2DC3C BL 0x1C16CF4
	0x03D2DC40 ADRP X0, 0x437000
	0x03D2DC44 LDR X0, [X0 + 0xCF0]
	0x03D2DC48 BL 0x1C16CF4
	0x03D2DC4C ADRP X0, 0x3EE000
	0x03D2DC50 LDR X0, [X0 + 0x620]
	0x03D2DC54 BL 0x1C16CF4
	0x03D2DC58 ADRP X0, 0x437000
	0x03D2DC5C LDR X0, [X0 + 0xCF8]
	0x03D2DC60 BL 0x1C16CF4
	0x03D2DC64 ADRP X0, 0x437000
	0x03D2DC68 LDR X0, [X0 + 0xD00]
	0x03D2DC6C BL 0x1C16CF4
	0x03D2DC70 MOVZ W8, 0x1
	0x03D2DC74 STRB W8, [X20 + 0xB0A]
	0x03D2DC78 STR W31, [X31 + 0x78]
	0x03D2DC7C STP X31, X31, [X31 + 0x68]
	0x03D2DC80 STR W31, [X31 + 0x64]
	0x03D2DC84 LDR X0, [X19 + 0x20]
	0x03D2DC88 CBZ X0, 0x3D2DFA4
	0x03D2DC8C ADRP X8, 0x437000
	0x03D2DC90 LDR X8, [X8 + 0xCF0]
	0x03D2DC94 LDR X1, [X8]
	0x03D2DC98 BL 0x2EF0E28
	0x03D2DC9C CBZ X0, 0x3D2DFA4
	0x03D2DCA0 MOVZ W8, 0x1
	0x03D2DCA4 STR W8, [X0 + 0x18]
	0x03D2DCA8 MOV X20, X0
	0x03D2DCAC LDR X0, [X19 + 0x18]
	0x03D2DCB0 CBZ X0, 0x3D2DFA4
	0x03D2DCB4 ADRP X8, 0x437000
	0x03D2DCB8 LDR X8, [X8 + 0xCE0]
	0x03D2DCBC MOV X1, X21
	0x03D2DCC0 MOV X2, X20
	0x03D2DCC4 LDR X3, [X8]
	0x03D2DCC8 BL 0x2AA5084
	0x03D2DCCC CBZ X21, 0x3D2DFA4
	0x03D2DCD0 LDR X8, [X21 + 0x38]
	0x03D2DCD4 CBZ X8, 0x3D2DF30
	0x03D2DCD8 LDR X23, [X8 + 0x18]
	0x03D2DCDC CBZ W23, 0x3D2DF30
	0x03D2DCE0 LDR X0, [X19 + 0x30]
	0x03D2DCE4 CBZ X0, 0x3D2DFA4
	0x03D2DCE8 ADD X8, X31, 0x40
	0x03D2DCEC MOV W1, W23
	0x03D2DCF0 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2808]
	009 Move X21, [X21+1888]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3C7000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x438000
	020 Move X0, [X0+1888]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2808], W8
	024 Move X0, [X21]
	025 Move X22, 0x3C7000
	026 Move W8, [X0+224]
	027 Move X22, [X22+2600]
	028 Compare W8, 0
	029 JumpIfNotEqual {36}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X22]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W0, 1
	042 Move X1, X31
	043 Call Debug.Assert, X0
	044 NotImplemented "Instruction STRH not yet implemented."
	045 NotImplemented "Instruction STRH not yet implemented."
	046 Move W8, [X20+169]
	047 Compare W8, 0
	048 JumpIfEqual {63}
	049 Add X0, X20, 40
	050 Add X2, X31, 12
	051 Add X3, X31, 8
	052 Move W1, W19
	053 Call BitmapAllocator32.GetAllocPageAtlasLocation, X0, X1, X2, X3
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 NotImplemented "Instruction LDRH not yet implemented."
	056 Move W8, W8
	057 ShiftRight W8, 27
	058 And W8, W8, 0x3FFFFFF
	059 And X20, X8, 0xFFFF
	060 Move X22, X9
	061 ShiftRight X22, 5
	062 And X22, X22, 4095
	063 Move X20, X31
	064 Move X22, X31
	065 Move X0, [X21]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X9, X19
	071 ShiftRight X9, 27
	072 And X9, X9, 0x7FFFFFFF
	073 Move X8, X19
	074 ShiftRight X8, 48
	075 And X8, X8, 0x7FFFFFFF
	076 And W9, W9, 224
	077 Add W8, W9, W8
	078 Move W8, W8
	079 ShiftRight W8, 16
	080 And W8, W8, 0x7FFF
	081 And X8, X8, 0xFFFFFF
	082 Or X8, X8, X22
	083 Or X0, X8, X20
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return X0

Method: UnityEngine.Color32 OpacityAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2DCF4 BL 0x3D2126C
	0x03D2DCF8 LDP W25, W24, [X31 + 0x40]
	0x03D2DCFC LDUR V0, [X31 + 0x48]
	0x03D2DD00 STR V0, [X31 + 0x8]
	0x03D2DD04 CBZ W24, 0x3D2DE00
	0x03D2DD08 LDR X0, [X19 + 0x10]
	0x03D2DD0C CBZ X0, 0x3D2DFA4
	0x03D2DD10 LDR X8, [X0]
	0x03D2DD14 LDR X2, [X21 + 0x20]
	0x03D2DD18 ADD X3, X31, 0x78
	0x03D2DD1C ADD X4, X31, 0x68
	0x03D2DD20 LDP X9, X5, [X8 + 0x178]
	0x03D2DD24 MOV X1, X22
	0x03D2DD28 BLR X9
	0x03D2DD2C TBZ X0, 0x0, 0x3D2DE6C
	0x03D2DD30 CMP W23, 0x1
	0x03D2DD34 B.LT 0x3D2DDD4
	0x03D2DD38 ADRP X28, 0x437000
	0x03D2DD3C LDR X28, [X28 + 0xCE8]
	0x03D2DD40 MOV X22, X31
	0x03D2DD44 MOV X29, X31
	0x03D2DD48 AND X23, X23, 0x0
	0x03D2DD4C ADD X26, X20, 0x20
	0x03D2DD50 MOVZ W27, 0x30
	0x03D2DD54 LDR X0, [X19 + 0x28]
	0x03D2DD58 CBZ X0, 0x3D2DFA4
	0x03D2DD5C LDR X1, [X28]
	0x03D2DD60 BL 0x2EF0E28
	0x03D2DD64 CBZ X22, 0x3D2DD74
	0x03D2DD68 CBZ X29, 0x3D2DFA4
	0x03D2DD6C ADD X8, X29, 0x30
	0x03D2DD70 B 0x3D2DD78
	0x03D2DD74 MOV X8, X26
	0x03D2DD78 STR X0, [X8]
	0x03D2DD7C CBZ X0, 0x3D2DFA4
	0x03D2DD80 ADD W8, W25, W22
	0x03D2DD84 STP W22, W8, [X0 + 0x18]
	0x03D2DD88 LDR X8, [X21 + 0x38]
	0x03D2DD8C CBZ X8, 0x3D2DFA4
	0x03D2DD90 LDR W9, [X8 + 0x18]
	0x03D2DD94 CMP X22, X9
	0x03D2DD98 B.CS 0x3D2DFA8
	0x03D2DD9C ADD X8, X8, X27
	0x03D2DDA0 LDR V0, [X31 + 0x68]
	0x03D2DDA4 LDR V1, [X8]
	0x03D2DDA8 LDR X8, [X8 + 0x8]
	0x03D2DDAC ADD X22, X22, 0x1
	0x03D2DDB0 CMP X23, X22
	0x03D2DDB4 ADD S0.2S, S0.2S, S1.2S
	0x03D2DDB8 STR X8, [X0 + 0x28]
	0x03D2DDBC STR D0, [X0 + 0x20]
	0x03D2DDC0 LDR W8, [X31 + 0x78]
	0x03D2DDC4 ADD X27, X27, 0x20
	0x03D2DDC8 MOV X29, X0
	0x03D2DDCC STR W8, [X0 + 0x38]
	0x03D2DDD0 B.NE 0x3D2DD54
	0x03D2DDD4 LDR X0, [X19 + 0x30]
	0x03D2DDD8 LDR V0, [X31 + 0x8]
	0x03D2DDDC STR V0, [X31 + 0x4]
	0x03D2DDE0 CBZ X0, 0x3D2DFA4
	0x03D2DDE4 LDR X3, [X20 + 0x20]
	0x03D2DDE8 LDR V0, [X31 + 0x4]
	0x03D2DDEC LDR X2, [X21 + 0x38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2809]
	009 Move X21, [X21+1888]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3C7000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x438000
	020 Move X0, [X0+1888]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2809], W8
	024 Move X0, [X21]
	025 NotImplemented "Instruction STRH not yet implemented."
	026 NotImplemented "Instruction STRH not yet implemented."
	027 Move X22, 0x3C7000
	028 Move W8, [X0+224]
	029 Move X22, [X22+2600]
	030 Compare W8, 0
	031 JumpIfNotEqual {38}
	032 Call 0x1C17DFC
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, 1
	044 Move X1, X31
	045 Call Debug.Assert, X0
	046 Add X0, X20, 72
	047 Add X2, X31, 12
	048 Add X3, X31, 8
	049 Move W1, W19
	050 Call BitmapAllocator32.GetAllocPageAtlasLocation, X0, X1, X2, X3
	051 Move X0, [X21]
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 NotImplemented "Instruction LDRH not yet implemented."
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X9, X19
	059 ShiftRight X9, 27
	060 And X9, X9, 0x7FFFFFFF
	061 Move X8, X19
	062 ShiftRight X8, 48
	063 And X8, X8, 0x7FFFFFFF
	064 And W9, W9, 224
	065 Move X10, X21
	066 ShiftRight X10, 5
	067 And X10, X10, 0x7FFFFFFF
	068 Move W11, W20
	069 ShiftRight W11, 27
	070 And W11, W11, 0x3FFFFFF
	071 Add W8, W9, W8
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Or W12, W31, 0xFF00FF
	077 NotImplemented "Instruction BFM not yet implemented."
	078 And X8, X11, 0xFFFF
	079 And X9, X10, X12
	080 Or X0, X9, X8
	081 Move X30, [X31+48]
	082 Return X0

Method: UnityEngine.Color32 ColorAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2DDF0 ADD X1, X31, 0x28
	0x03D2DDF4 STP W25, W24, [X31 + 0x28]
	0x03D2DDF8 STUR V0, [X31 + 0x30]
	0x03D2DDFC B 0x3D2DF28
	0x03D2DE00 LDRB W8, [X19 + 0x38]
	0x03D2DE04 CBNZ W8, 0x3D2DF30
	0x03D2DE08 LDR X0, [X19 + 0x30]
	0x03D2DE0C CBZ X0, 0x3D2DFA4
	0x03D2DE10 MOV X1, X31
	0x03D2DE14 BL 0x3D2107C
	0x03D2DE18 STR W0, [X31 + 0x64]
	0x03D2DE1C ADD X0, X31, 0x64
	0x03D2DE20 MOV X1, X31
	0x03D2DE24 BL 0x337B6E0
	0x03D2DE28 LDR X8, [X19 + 0x30]
	0x03D2DE2C CBZ X8, 0x3D2DFA4
	0x03D2DE30 MOV X21, X0
	0x03D2DE34 MOV X0, X8
	0x03D2DE38 MOV X1, X31
	0x03D2DE3C BL 0x3D21264
	0x03D2DE40 ADRP X8, 0x437000
	0x03D2DE44 ADRP X9, 0x437000
	0x03D2DE48 LDR X8, [X8 + 0xD00]
	0x03D2DE4C LDR X9, [X9 + 0xCF8]
	0x03D2DE50 LDR X22, [X8]
	0x03D2DE54 LDR X23, [X9]
	0x03D2DE58 CBZ X0, 0x3D2DF54
	0x03D2DE5C MOV X1, X31
	0x03D2DE60 BL 0x3C389D4
	0x03D2DE64 MOV X3, X0
	0x03D2DE68 B 0x3D2DF58
	0x03D2DE6C CMP W23, 0x1
	0x03D2DE70 STR W24, [X31 + 0xC]
	0x03D2DE74 B.LT 0x3D2DEFC
	0x03D2DE78 ADRP X28, 0x437000
	0x03D2DE7C ADRP X29, 0x3EE000
	0x03D2DE80 LDR X28, [X28 + 0xCE8]
	0x03D2DE84 LDR X29, [X29 + 0x620]
	0x03D2DE88 MOV X24, X31
	0x03D2DE8C MOV W26, W31
	0x03D2DE90 ADD X27, X20, 0x20
	0x03D2DE94 LDR X0, [X19 + 0x28]
	0x03D2DE98 CBZ X0, 0x3D2DFA4
	0x03D2DE9C LDR X1, [X28]
	0x03D2DEA0 BL 0x2EF0E28
	0x03D2DEA4 MOV X22, X0
	0x03D2DEA8 CBZ W26, 0x3D2DEB8
	0x03D2DEAC CBZ X24, 0x3D2DFA4
	0x03D2DEB0 ADD X8, X24, 0x30
	0x03D2DEB4 B 0x3D2DEBC
	0x03D2DEB8 MOV X8, X27
	0x03D2DEBC STR X22, [X8]
	0x03D2DEC0 CBZ X22, 0x3D2DFA4
	0x03D2DEC4 ADD W8, W25, W26
	0x03D2DEC8 STP W26, W8, [X22 + 0x18]
	0x03D2DECC LDR X0, [X29]
	0x03D2DED0 LDR W8, [X0 + 0xE0]
	0x03D2DED4 CBNZ W8, 0x3D2DEE0
	0x03D2DED8 BL 0x1C16DFC
	0x03D2DEDC LDR X0, [X29]
	0x03D2DEE0 LDR X8, [X0 + 0xB8]
	0x03D2DEE4 ADD W26, W26, 0x1
	0x03D2DEE8 CMP W23, W26

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2810]
	009 Move X21, [X21+1888]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3C7000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x438000
	020 Move X0, [X0+1888]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2810], W8
	024 Move X0, [X21]
	025 NotImplemented "Instruction STRH not yet implemented."
	026 NotImplemented "Instruction STRH not yet implemented."
	027 Move X22, 0x3C7000
	028 Move W8, [X0+224]
	029 Move X22, [X22+2600]
	030 Compare W8, 0
	031 JumpIfNotEqual {38}
	032 Call 0x1C17DFC
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, 1
	044 Move X1, X31
	045 Call Debug.Assert, X0
	046 Add X0, X20, 104
	047 Add X2, X31, 12
	048 Add X3, X31, 8
	049 Move W1, W19
	050 Call BitmapAllocator32.GetAllocPageAtlasLocation, X0, X1, X2, X3
	051 Move X0, [X21]
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 NotImplemented "Instruction LDRH not yet implemented."
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X9, X19
	059 ShiftRight X9, 27
	060 And X9, X9, 0x7FFFFFFF
	061 Move X8, X19
	062 ShiftRight X8, 48
	063 And X8, X8, 0x7FFFFFFF
	064 And W9, W9, 224
	065 Move X10, X21
	066 ShiftRight X10, 5
	067 And X10, X10, 0x7FFFFFFF
	068 Move W11, W20
	069 ShiftRight W11, 27
	070 And W11, W11, 0x3FFFFFF
	071 Add W8, W9, W8
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Or W12, W31, 0xFF00FF
	077 NotImplemented "Instruction BFM not yet implemented."
	078 And X8, X11, 0xFFFF
	079 And X9, X10, X12
	080 Or X0, X9, X8
	081 Move X30, [X31+48]
	082 Return X0

Method: UnityEngine.Color32 TextCoreSettingsToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)

Disassembly:
	0x03D2DEEC MOV X24, X22
	0x03D2DEF0 LDR W8, [X8]
	0x03D2DEF4 STR W8, [X22 + 0x38]
	0x03D2DEF8 B.NE 0x3D2DE94
	0x03D2DEFC LDR X0, [X19 + 0x30]
	0x03D2DF00 LDR V0, [X31 + 0x8]
	0x03D2DF04 STR V0, [X31 + 0x4]
	0x03D2DF08 CBZ X0, 0x3D2DFA4
	0x03D2DF0C LDR V0, [X31 + 0x4]
	0x03D2DF10 LDR W8, [X31 + 0xC]
	0x03D2DF14 LDR X2, [X21 + 0x38]
	0x03D2DF18 ADD X1, X31, 0x10
	0x03D2DF1C STUR V0, [X31 + 0x18]
	0x03D2DF20 STP W25, W8, [X31 + 0x10]
	0x03D2DF24 MOV X3, X31
	0x03D2DF28 MOV X4, X31
	0x03D2DF2C BL 0x3D21348
	0x03D2DF30 MOV X0, X20
	0x03D2DF34 LDP X20, X19, [X31 + 0xE0]
	0x03D2DF38 LDP X22, X21, [X31 + 0xD0]
	0x03D2DF3C LDP X24, X23, [X31 + 0xC0]
	0x03D2DF40 LDP X26, X25, [X31 + 0xB0]
	0x03D2DF44 LDP X28, X27, [X31 + 0xA0]
	0x03D2DF48 LDP X29, X30, [X31 + 0x90]
	0x03D2DF4C ADD X31, X31, 0xF0
	0x03D2DF50 RET
	0x03D2DF54 MOV X3, X31
	0x03D2DF58 MOV X0, X23
	0x03D2DF5C MOV X1, X21
	0x03D2DF60 MOV X2, X22
	0x03D2DF64 MOV X4, X31
	0x03D2DF68 BL 0x32277C4
	0x03D2DF6C ADRP X8, 0x3C6000
	0x03D2DF70 LDR X8, [X8 + 0xA28]
	0x03D2DF74 MOV X21, X0
	0x03D2DF78 LDR X8, [X8]
	0x03D2DF7C LDR W9, [X8 + 0xE0]
	0x03D2DF80 CBNZ W9, 0x3D2DF8C
	0x03D2DF84 MOV X0, X8
	0x03D2DF88 BL 0x1C16DFC
	0x03D2DF8C MOV X0, X21
	0x03D2DF90 MOV X1, X31
	0x03D2DF94 BL 0x3C0649C
	0x03D2DF98 MOVZ W8, 0x1
	0x03D2DF9C STRB W8, [X19 + 0x38]
	0x03D2DFA0 B 0x3D2DF30
	0x03D2DFA4 BL 0x1C16F20
	0x03D2DFA8 BL 0x1C16F28
	0x03D2DFAC STR X30, [X31 - 0x40]!
	0x03D2DFB0 STP X24, X23, [X31 + 0x10]
	0x03D2DFB4 STP X22, X21, [X31 + 0x20]
	0x03D2DFB8 STP X20, X19, [X31 + 0x30]
	0x03D2DFBC ADRP X23, 0x6BA000
	0x03D2DFC0 ADRP X24, 0x437000
	0x03D2DFC4 ADRP X19, 0x437000
	0x03D2DFC8 ADRP X20, 0x437000
	0x03D2DFCC ADRP X22, 0x437000
	0x03D2DFD0 ADRP X21, 0x437000
	0x03D2DFD4 LDRB W8, [X23 + 0xB0B]
	0x03D2DFD8 LDR X24, [X24 + 0xD08]
	0x03D2DFDC LDR X19, [X19 + 0xD10]
	0x03D2DFE0 LDR X20, [X20 + 0x700]
	0x03D2DFE4 LDR X22, [X22 + 0xD18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x6BB000
	007 Move X21, 0x438000
	008 Move W8, [X22+2811]
	009 Move X21, [X21+1888]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x3C7000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x438000
	020 Move X0, [X0+1888]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2811], W8
	024 Move X0, [X21]
	025 NotImplemented "Instruction STRH not yet implemented."
	026 NotImplemented "Instruction STRH not yet implemented."
	027 Move X22, 0x3C7000
	028 Move W8, [X0+224]
	029 Move X22, [X22+2600]
	030 Compare W8, 0
	031 JumpIfNotEqual {38}
	032 Call 0x1C17DFC
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, 1
	044 Move X1, X31
	045 Call Debug.Assert, X0
	046 Add X0, X20, 136
	047 Add X2, X31, 12
	048 Add X3, X31, 8
	049 Move W1, W19
	050 Call BitmapAllocator32.GetAllocPageAtlasLocation, X0, X1, X2, X3
	051 Move X0, [X21]
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 NotImplemented "Instruction LDRH not yet implemented."
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X9, X19
	059 ShiftRight X9, 27
	060 And X9, X9, 0x7FFFFFFF
	061 Move X8, X19
	062 ShiftRight X8, 48
	063 And X8, X8, 0x7FFFFFFF
	064 And W9, W9, 224
	065 Move X10, X21
	066 ShiftRight X10, 5
	067 And X10, X10, 0x7FFFFFFF
	068 Move W11, W20
	069 ShiftRight W11, 27
	070 And W11, W11, 0x3FFFFFF
	071 Add W8, W9, W8
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Or W12, W31, 0xFF00FF
	077 NotImplemented "Instruction BFM not yet implemented."
	078 And X8, X11, 0xFFFF
	079 And X9, X10, X12
	080 Or X0, X9, X8
	081 Move X30, [X31+48]
	082 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03D2DFE8 LDR X21, [X21 + 0xD20]
	0x03D2DFEC TBNZ X8, 0x0, 0x3D2E034
	0x03D2DFF0 ADRP X0, 0x437000
	0x03D2DFF4 LDR X0, [X0 + 0xD10]
	0x03D2DFF8 BL 0x1C16CF4
	0x03D2DFFC ADRP X0, 0x437000
	0x03D2E000 LDR X0, [X0 + 0xD08]
	0x03D2E004 BL 0x1C16CF4
	0x03D2E008 ADRP X0, 0x436000
	0x03D2E00C LDR X0, [X0 + 0x700]
	0x03D2E010 BL 0x1C16CF4
	0x03D2E014 ADRP X0, 0x436000
	0x03D2E018 LDR X0, [X0 + 0xD20]
	0x03D2E01C BL 0x1C16CF4
	0x03D2E020 ADRP X0, 0x436000
	0x03D2E024 LDR X0, [X0 + 0xD18]
	0x03D2E028 BL 0x1C16CF4
	0x03D2E02C MOVZ W8, 0x1
	0x03D2E030 STRB W8, [X23 + 0xB0B]
	0x03D2E034 LDR X0, [X24]
	0x03D2E038 BL 0x1C16F10
	0x03D2E03C LDR X2, [X19]
	0x03D2E040 MOVZ W1, 0x10
	0x03D2E044 MOV X19, X0
	0x03D2E048 BL 0x301B830
	0x03D2E04C LDR X8, [X20]
	0x03D2E050 MOVZ W1, 0x1
	0x03D2E054 MOV W2, W31
	0x03D2E058 MOV W3, W31
	0x03D2E05C LDR X8, [X8 + 0xB8]
	0x03D2E060 MOV X4, X31
	0x03D2E064 STR X19, [X8]
	0x03D2E068 LDR X0, [X22]
	0x03D2E06C BL 0x3BFE7FC
	0x03D2E070 LDR X8, [X20]
	0x03D2E074 MOVZ W1, 0x1
	0x03D2E078 MOV W2, W31
	0x03D2E07C MOV W3, W31
	0x03D2E080 LDR X8, [X8 + 0xB8]
	0x03D2E084 MOV X4, X31
	0x03D2E088 STR X0, [X8 + 0x8]
	0x03D2E08C LDR X0, [X21]
	0x03D2E090 BL 0x3BFE7FC
	0x03D2E094 LDR X8, [X20]
	0x03D2E098 LDP X20, X19, [X31 + 0x30]
	0x03D2E09C LDP X22, X21, [X31 + 0x20]
	0x03D2E0A0 LDP X24, X23, [X31 + 0x10]
	0x03D2E0A4 LDR X8, [X8 + 0xB8]
	0x03D2E0A8 STR X0, [X8 + 0x10]
	0x03D2E0AC LDR X30, [X31], #0x40
	0x03D2E0B0 RET
	0x03D2E0B4 STP X30, X21, [X31 - 0x20]!
	0x03D2E0B8 STP X20, X19, [X31 + 0x10]
	0x03D2E0BC ADRP X20, 0x6B9000
	0x03D2E0C0 ADRP X21, 0x436000
	0x03D2E0C4 LDRB W8, [X20 + 0xB0C]
	0x03D2E0C8 LDR X21, [X21 + 0xD28]
	0x03D2E0CC MOV X19, X0
	0x03D2E0D0 TBNZ X8, 0x0, 0x3D2E0E8
	0x03D2E0D4 ADRP X0, 0x436000
	0x03D2E0D8 LDR X0, [X0 + 0xD28]
	0x03D2E0DC BL 0x1C16CF4
	0x03D2E0E0 MOVZ W8, 0x1
	0x03D2E0E4 STRB W8, [X20 + 0xB0C]
	0x03D2E0E8 LDR X1, [X21]
	0x03D2E0EC MOV X0, X19
	0x03D2E0F0 LDP X20, X19, [X31 + 0x10]
	0x03D2E0F4 LDP X30, X21, [X31], #0x20
	0x03D2E0F8 B 0x2EF0D48
	0x03D2E0FC LDR W0, [X0 + 0xA8]
	0x03D2E100 RET
	0x03D2E104 LDRB W0, [X0 + 0xAC]
	0x03D2E108 RET
	0x03D2E10C AND W8, W1, 0x1
	0x03D2E110 STRB W8, [X0 + 0xAC]
	0x03D2E114 RET
	0x03D2E118 STP X29, X30, [X31 - 0x60]!
	0x03D2E11C STP X28, X27, [X31 + 0x10]
	0x03D2E120 STP X26, X25, [X31 + 0x20]
	0x03D2E124 STP X24, X23, [X31 + 0x30]
	0x03D2E128 STP X22, X21, [X31 + 0x40]
	0x03D2E12C STP X20, X19, [X31 + 0x50]
	0x03D2E130 ADRP X26, 0x6B9000
	0x03D2E134 ADRP X28, 0x436000
	0x03D2E138 ADRP X19, 0x436000
	0x03D2E13C ADRP X22, 0x436000
	0x03D2E140 ADRP X25, 0x436000
	0x03D2E144 ADRP X24, 0x436000
	0x03D2E148 ADRP X23, 0x436000
	0x03D2E14C ADRP X21, 0x436000
	0x03D2E150 ADRP X29, 0x436000
	0x03D2E154 ADRP X27, 0x436000
	0x03D2E158 ADRP X20, 0x3C6000
	0x03D2E15C LDR X28, [X28 + 0xD30]
	0x03D2E160 LDR X19, [X19 + 0xD38]
	0x03D2E164 LDR X22, [X22 + 0x6F8]
	0x03D2E168 LDR X25, [X25 + 0xD40]
	0x03D2E16C LDR X24, [X24 + 0xD48]
	0x03D2E170 LDR X23, [X23 + 0xD50]
	0x03D2E174 LDR X21, [X21 + 0xD58]
	0x03D2E178 LDR X29, [X29 + 0xD60]
	0x03D2E17C LDR X27, [X27 + 0xD68]
	0x03D2E180 LDRB W8, [X26 + 0xB0D]
	0x03D2E184 LDR X20, [X20 + 0xE70]
	0x03D2E188 TBNZ X8, 0x0, 0x3D2E254
	0x03D2E18C ADRP X0, 0x3C6000
	0x03D2E190 LDR X0, [X0 + 0xE70]
	0x03D2E194 BL 0x1C16CF4
	0x03D2E198 ADRP X0, 0x436000
	0x03D2E19C LDR X0, [X0 + 0xD38]
	0x03D2E1A0 BL 0x1C16CF4
	0x03D2E1A4 ADRP X0, 0x436000
	0x03D2E1A8 LDR X0, [X0 + 0xD30]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+88], X21
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move X20, 0x6BB000
	007 Move X19, 0x438000
	008 Move W8, [X20+2812]
	009 Call 0x3EB2A04
	010 Return 
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x437000
	016 Move X0, [X0+1888]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2812], W8
	020 Move X8, [X19]
	021 Move X10, 32
	022 Move X20, 0x6AB000
	023 Move X8, [X8+184]
	024 Move [X8], X31
	025 Move X8, [X19]
	026 Move X9, [X8+184]
	027 Move [X9+8], X10
	028 Move X9, [X8+184]
	029 Or X10, X31, 0x2000000020
	030 Move [X9+16], X10
	031 Move X9, [X8+184]
	032 Move X10, 40
	033 Move [X9+24], X10
	034 Move X9, [X8+184]
	035 Move W10, 32
	036 Move [X9+32], X10
	037 Move W9, [X20+2752]
	038 Compare W9, 0
	039 JumpIfNotEqual {46}
	040 Move X0, 0x3CA000
	041 Move X0, [X0+624]
	042 Call 0x1C17CF4
	043 Move X8, [X19]
	044 Move W9, 1
	045 Move [X20+2752], W9
	046 Move X9, 0x3CA000
	047 Move X9, [X9+624]
	048 Move W1, W31
	049 Move X2, X31
	050 Move X9, [X9]
	051 Move X9, [X9+184]
	052 Move V1, [X9+96]
	053 Move V0, [X9+112]
	054 Move V2, [X9+64]
	055 Move V3, [X9+80]
	056 Move [X31+48], V1
	057 Move [X31+56], V0
	058 Move [X31+16], V2
	059 Move [X31+24], V3
	060 Move X9, [X8+184]
	061 Move [X9+72], V1
	062 Move [X9+56], V3
	063 Move [X9+40], V2
	064 Move [X9+88], V0
	065 Move X8, [X8+184]
	066 Add X0, X8, 40
	067 Call Matrix4x4.GetRow, X0, X1
	068 Move X8, [X19]
	069 Move W1, 1
	070 Move X2, X31
	071 Move W20, 1
	072 Move X9, [X8+184]
	073 Move [X9+104], S0
	074 Move [X9+112], S1
	075 Move [X9+112], S2
	076 Move [X9+120], S3
	077 Move X8, [X8+184]
	078 Add X0, X8, 40
	079 Call Matrix4x4.GetRow, X0, X1
	080 Move X8, [X19]
	081 Move W1, 2
	082 Move X2, X31
	083 Move X9, [X8+184]
	084 Move [X9+120], S0
	085 Move [X9+128], S1
	086 Move [X9+128], S2
	087 Move [X9+136], S3
	088 Move X8, [X8+184]
	089 Add X0, X8, 40
	090 Call Matrix4x4.GetRow, X0, X1
	091 Move X8, [X19]
	092 Move X21, 0x6AC000
	093 Move X9, [X8+184]
	094 Move [X9+136], S0
	095 Move [X9+144], S1
	096 Move [X9+144], S2
	097 Move [X9+152], S3
	098 Move X9, [X8+184]
	099 Move V2, 0
	100 Move [X9+152], X31
	101 Move [X9+160], X31
	102 Move X9, [X8+184]
	103 Move [X9+168], V2
	104 Move X9, [X8+184]
	105 Move [X9+184], X31
	106 Move [X9+192], X31
	107 Move W9, [X21+1935]
	108 Compare W9, 0
	109 JumpIfNotEqual {117}
	110 Move X0, 0x3CE000
	111 Move X0, [X0+3848]
	112 Move [X31], V2
	113 Call 0x1C17CF4
	114 Move V2, [X31]
	115 Move X8, [X19]
	116 Move [X21+1935], W20
	117 Move X9, 0x3CE000
	118 Move X9, [X9+3848]
	119 Move X8, [X8+184]
	120 Move X20, [X31+96]
	121 Move X19, [X31+104]
	122 Move X30, [X31+80]
	123 Move X21, [X31+88]
	124 Move X9, [X9]
	125 NotImplemented "Instruction MOVI not yet implemented."
	126 Move X9, [X9+184]
	127 Move V1, [X9]
	128 Move [X8+200], V2
	129 Move [X8+216], V0
	130 Move [X8+232], V0
	131 Move [X8+248], W31
	132 Move [X8+252], D1
	133 Move [X8+260], W31
	134 Add X31, X31, 112
	135 Return 

