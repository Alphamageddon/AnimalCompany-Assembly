Type: UnityEngine.UIElements.StyleComplexSelector

Method: System.Int32 get_specificity()

Disassembly:
	0x03E067D0 LDP X30, X21, [X31 + 0x10]
	0x03E067D4 ADD X31, X31, 0x30

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: UnityEngine.UIElements.StyleRule get_rule()

Disassembly:
	0x03E067D8 RET
	0x03E067DC BL 0x1C16F28

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_rule(UnityEngine.UIElements.StyleRule value)

Disassembly:
	0x03E067E0 BL 0x1C16F44
	0x03E067E4 MOV X1, X31

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Boolean get_isSimple()

Disassembly:
	0x03E067E8 BL 0x1C16DEC
	0x03E067EC BL 0x1C16F20

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: UnityEngine.UIElements.StyleSelector[] get_selectors()

Disassembly:
	0x03E067F0 STR W1, [X0 + 0x8]
	0x03E067F4 RET

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_selectors(UnityEngine.UIElements.StyleSelector[] value)

Disassembly:
	0x03E067F8 MOVZ W9, 0x3
	0x03E067FC STR X0, [X8]
	0x03E06800 STUR X31, [X8 + 0xC]
	0x03E06804 STR W9, [X8 + 0x8]
	0x03E06808 STR W31, [X8 + 0x14]
	0x03E0680C RET
	0x03E06810 MOVZ W9, 0x6
	0x03E06814 STR X0, [X8]
	0x03E06818 STUR X31, [X8 + 0xC]
	0x03E0681C STR W9, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+56], X1
	003 Compare X1, 0
	004 JumpIfEqual {11}
	005 Move W8, [X1+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move [X0+48], W8
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x03E06820 STR W31, [X8 + 0x14]

ISIL:
	001 Return 

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x03E06824 RET
	0x03E06828 ADRP X9, 0xFFFFFFFFFCCE7000
	0x03E0682C LDR V0, [X9 + 0xB68]
	0x03E06830 STR X31, [X8]
	0x03E06834 STR X0, [X8 + 0x10]
	0x03E06838 STR D0, [X8 + 0x8]
	0x03E0683C RET
	0x03E06840 LDRB W0, [X0 + 0x18]
	0x03E06844 RET
	0x03E06848 AND W8, W1, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W8, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move [X0+48], W8
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Void CachePseudoStateMasks()

Disassembly:
	0x03E0684C STRB W8, [X0 + 0x18]
	0x03E06850 RET
	0x03E06854 LDRB W0, [X0 + 0x19]
	0x03E06858 RET
	0x03E0685C AND W8, W1, 0x1
	0x03E06860 STRB W8, [X0 + 0x19]
	0x03E06864 RET
	0x03E06868 LDR X0, [X0 + 0x20]
	0x03E0686C RET
	0x03E06870 STR X1, [X0 + 0x20]
	0x03E06874 B 0x3E06878
	0x03E06878 SUB X31, X31, 0x80
	0x03E0687C STP X29, X30, [X31 + 0x20]
	0x03E06880 STP X28, X27, [X31 + 0x30]
	0x03E06884 STP X26, X25, [X31 + 0x40]
	0x03E06888 STP X24, X23, [X31 + 0x50]
	0x03E0688C STP X22, X21, [X31 + 0x60]
	0x03E06890 STP X20, X19, [X31 + 0x70]
	0x03E06894 ADRP X20, 0x5E2000
	0x03E06898 LDRB W8, [X20 + 0x319]
	0x03E0689C MOV X19, X0
	0x03E068A0 TBNZ X8, 0x0, 0x3E06924
	0x03E068A4 ADRP X0, 0x2ED000
	0x03E068A8 LDR X0, [X0 + 0xA28]
	0x03E068AC BL 0x1C16CF4
	0x03E068B0 ADRP X0, 0x364000
	0x03E068B4 LDR X0, [X0 + 0x150]
	0x03E068B8 BL 0x1C16CF4
	0x03E068BC ADRP X0, 0x364000
	0x03E068C0 LDR X0, [X0 + 0x158]
	0x03E068C4 BL 0x1C16CF4
	0x03E068C8 ADRP X0, 0x364000
	0x03E068CC LDR X0, [X0 + 0x160]
	0x03E068D0 BL 0x1C16CF4
	0x03E068D4 ADRP X0, 0x364000
	0x03E068D8 LDR X0, [X0 + 0x168]
	0x03E068DC BL 0x1C16CF4
	0x03E068E0 ADRP X0, 0x2FA000
	0x03E068E4 LDR X0, [X0 + 0x2F0]
	0x03E068E8 BL 0x1C16CF4
	0x03E068EC ADRP X0, 0x364000
	0x03E068F0 LDR X0, [X0 + 0x140]
	0x03E068F4 BL 0x1C16CF4
	0x03E068F8 ADRP X0, 0x35D000
	0x03E068FC LDR X0, [X0 + 0xE18]
	0x03E06900 BL 0x1C16CF4
	0x03E06904 ADRP X0, 0x31F000
	0x03E06908 LDR X0, [X0 + 0xEF0]
	0x03E0690C BL 0x1C16CF4
	0x03E06910 ADRP X0, 0x364000
	0x03E06914 LDR X0, [X0 + 0x170]
	0x03E06918 BL 0x1C16CF4
	0x03E0691C MOVZ W8, 0x1
	0x03E06920 STRB W8, [X20 + 0x319]
	0x03E06924 STR X31, [X31 + 0x18]
	0x03E06928 LDR X8, [X19 + 0x28]
	0x03E0692C CBZ X8, 0x3E06D94
	0x03E06930 LDR X21, [X19 + 0x20]
	0x03E06934 CBZ X21, 0x3E06D94
	0x03E06938 LDR W8, [X21 + 0x18]
	0x03E0693C STR X19, [X31 + 0x8]
	0x03E06940 CMP W8, 0x1
	0x03E06944 B.LT 0x3E06A44
	0x03E06948 ADRP X23, 0x35D000
	0x03E0694C LDR X23, [X23 + 0xE18]
	0x03E06950 MOV W22, W31
	0x03E06954 MOVZ W24, 0x1
	0x03E06958 CMP W22, W8
	0x03E0695C B.CS 0x3E06DB4
	0x03E06960 ADD X8, X21, W22, 0x3, SXTW
	0x03E06964 LDR X25, [X8 + 0x20]
	0x03E06968 CBZ X25, 0x3E06D90
	0x03E0696C LDR X26, [X25 + 0x10]
	0x03E06970 CBZ X26, 0x3E06D90
	0x03E06974 LDR W8, [X26 + 0x18]
	0x03E06978 CMP W8, 0x1
	0x03E0697C B.LT 0x3E06A34
	0x03E06980 MOV W27, W31
	0x03E06984 CMP W27, W8
	0x03E06988 B.CS 0x3E06DB4
	0x03E0698C ADD X8, X26, W27, 0x3, SXTW
	0x03E06990 LDR X28, [X8 + 0x20]
	0x03E06994 CBZ X28, 0x3E06D90
	0x03E06998 LDR X0, [X23]
	0x03E0699C LDR X20, [X28 + 0x10]
	0x03E069A0 LDR W8, [X0 + 0xE0]
	0x03E069A4 CBNZ W8, 0x3E069B0
	0x03E069A8 BL 0x1C16DFC
	0x03E069AC LDR X0, [X23]
	0x03E069B0 LDR X8, [X0 + 0xB8]
	0x03E069B4 MOV X0, X20
	0x03E069B8 LDR X1, [X8]
	0x03E069BC BL 0x3E0710C
	0x03E069C0 TBZ X0, 0x0, 0x3E069D4
	0x03E069C4 LDR W8, [X25 + 0x1C]
	0x03E069C8 ADD W8, W8, 0x1
	0x03E069CC STR W8, [X25 + 0x1C]
	0x03E069D0 STRB W24, [X28 + 0x28]
	0x03E069D4 LDR X20, [X28 + 0x20]
	0x03E069D8 CBZ X20, 0x3E06D90
	0x03E069DC LDR X8, [X20 + 0x18]
	0x03E069E0 CMP W8, 0x1
	0x03E069E4 B.LT 0x3E06A24
	0x03E069E8 MOV X29, X31
	0x03E069EC AND X8, X8, 0x0
	0x03E069F0 ADD X19, X20, 0x20
	0x03E069F4 CMP X29, W8, UXTW
	0x03E069F8 B.CS 0x3E06DB4
	0x03E069FC LDR X0, [X19, X29, LSL #3]
	0x03E06A00 MOV X1, X31
	0x03E06A04 BL 0x3D555CC
	0x03E06A08 TBNZ X0, 0x0, 0x3E06A20
	0x03E06A0C LDR W8, [X20 + 0x18]
	0x03E06A10 ADD X29, X29, 0x1
	0x03E06A14 CMP X29, W8, SXTW
	0x03E06A18 B.LT 0x3E069F4
	0x03E06A1C B 0x3E06A24
	0x03E06A20 STRB W24, [X28 + 0x29]
	0x03E06A24 LDR W8, [X26 + 0x18]
	0x03E06A28 ADD W27, W27, 0x1
	0x03E06A2C CMP W27, W8
	0x03E06A30 B.LT 0x3E06984
	0x03E06A34 LDR W8, [X21 + 0x18]
	0x03E06A38 ADD W22, W22, 0x1
	0x03E06A3C CMP W22, W8
	0x03E06A40 B.LT 0x3E06958
	0x03E06A44 LDR X21, [X31 + 0x8]
	0x03E06A48 LDR X8, [X21 + 0x28]
	0x03E06A4C CBZ X8, 0x3E06D90
	0x03E06A50 LDR W20, [X8 + 0x18]
	0x03E06A54 CMP W20, 0x1
	0x03E06A58 B.LT 0x3E06A94
	0x03E06A5C MOV W19, W31
	0x03E06A60 LDR W9, [X8 + 0x18]
	0x03E06A64 CMP W19, W9
	0x03E06A68 B.CS 0x3E06DB4
	0x03E06A6C ADD X8, X8, W19, 0x3, SXTW
	0x03E06A70 LDR X0, [X8 + 0x20]
	0x03E06A74 CBZ X0, 0x3E06D90
	0x03E06A78 BL 0x3E0584C
	0x03E06A7C ADD W19, W19, 0x1
	0x03E06A80 CMP W20, W19
	0x03E06A84 B.EQ 0x3E06A94
	0x03E06A88 LDR X8, [X21 + 0x28]
	0x03E06A8C CBNZ X8, 0x3E06A60
	0x03E06A90 B 0x3E06D90
	0x03E06A94 ADRP X22, 0x2FA000
	0x03E06A98 LDR X22, [X22 + 0x2F0]
	0x03E06A9C LDR X0, [X22]
	0x03E06AA0 LDR W8, [X0 + 0xE0]
	0x03E06AA4 CBNZ W8, 0x3E06AAC
	0x03E06AA8 BL 0x1C16DFC
	0x03E06AAC ADRP X24, 0x5D3000
	0x03E06AB0 LDRB W8, [X24 + 0x5A3]
	0x03E06AB4 CBNZ W8, 0x3E06ACC
	0x03E06AB8 ADRP X0, 0x2FA000
	0x03E06ABC LDR X0, [X0 + 0x2F0]
	0x03E06AC0 BL 0x1C16CF4
	0x03E06AC4 MOVZ W8, 0x1
	0x03E06AC8 STRB W8, [X24 + 0x5A3]
	0x03E06ACC LDR X0, [X22]
	0x03E06AD0 LDR W8, [X0 + 0xE0]
	0x03E06AD4 CBNZ W8, 0x3E06AE0
	0x03E06AD8 BL 0x1C16DFC
	0x03E06ADC LDR X0, [X22]
	0x03E06AE0 ADRP X25, 0x364000
	0x03E06AE4 LDR X8, [X0 + 0xB8]
	0x03E06AE8 LDR X25, [X25 + 0x168]
	0x03E06AEC LDR X20, [X8 + 0x10]
	0x03E06AF0 LDR X0, [X25]
	0x03E06AF4 BL 0x1C16F10
	0x03E06AF8 ADRP X26, 0x364000
	0x03E06AFC LDR X26, [X26 + 0x158]
	0x03E06B00 MOV X1, X20
	0x03E06B04 MOV X21, X0
	0x03E06B08 LDR X2, [X26]
	0x03E06B0C BL 0x2AA4830
	0x03E06B10 LDR X23, [X31 + 0x8]
	0x03E06B14 STR X21, [X23 + 0x88]!
	0x03E06B18 LDRB W8, [X24 + 0x5A3]
	0x03E06B1C CBNZ W8, 0x3E06B34
	0x03E06B20 ADRP X0, 0x2FA000
	0x03E06B24 LDR X0, [X0 + 0x2F0]
	0x03E06B28 BL 0x1C16CF4
	0x03E06B2C MOVZ W8, 0x1
	0x03E06B30 STRB W8, [X24 + 0x5A3]
	0x03E06B34 LDR X0, [X22]
	0x03E06B38 LDR W8, [X0 + 0xE0]
	0x03E06B3C CBNZ W8, 0x3E06B48
	0x03E06B40 BL 0x1C16DFC
	0x03E06B44 LDR X0, [X22]
	0x03E06B48 LDR X8, [X0 + 0xB8]
	0x03E06B4C LDR X0, [X25]
	0x03E06B50 LDR X20, [X8 + 0x10]
	0x03E06B54 BL 0x1C16F10
	0x03E06B58 LDR X2, [X26]
	0x03E06B5C MOV X1, X20
	0x03E06B60 MOV X21, X0
	0x03E06B64 BL 0x2AA4830
	0x03E06B68 LDR X8, [X31 + 0x8]
	0x03E06B6C STR X21, [X8 + 0x78]!
	0x03E06B70 STR X8, [X31]
	0x03E06B74 LDRB W8, [X24 + 0x5A3]
	0x03E06B78 CBNZ W8, 0x3E06B90
	0x03E06B7C ADRP X0, 0x2FA000
	0x03E06B80 LDR X0, [X0 + 0x2F0]
	0x03E06B84 BL 0x1C16CF4
	0x03E06B88 MOVZ W8, 0x1
	0x03E06B8C STRB W8, [X24 + 0x5A3]
	0x03E06B90 LDR X0, [X22]
	0x03E06B94 LDR W8, [X0 + 0xE0]
	0x03E06B98 CBNZ W8, 0x3E06BA4
	0x03E06B9C BL 0x1C16DFC
	0x03E06BA0 LDR X0, [X22]
	0x03E06BA4 LDR X8, [X0 + 0xB8]
	0x03E06BA8 LDR X0, [X25]
	0x03E06BAC LDR X20, [X8 + 0x10]
	0x03E06BB0 BL 0x1C16F10
	0x03E06BB4 LDR X2, [X26]
	0x03E06BB8 MOV X1, X20
	0x03E06BBC MOV X21, X0
	0x03E06BC0 BL 0x2AA4830
	0x03E06BC4 LDR X19, [X31 + 0x8]
	0x03E06BC8 MOV X25, X19
	0x03E06BCC STR X21, [X25 + 0x80]!
	0x03E06BD0 LDUR X8, [X25 - 0x58]
	0x03E06BD4 CBZ X8, 0x3E06D90
	0x03E06BD8 ADRP X24, 0x364000
	0x03E06BDC ADRP X28, 0x364000
	0x03E06BE0 LDR X24, [X24 + 0x150]
	0x03E06BE4 LDR X28, [X28 + 0x160]
	0x03E06BE8 ADRP X29, 0xFFFFFFFFFCD92000
	0x03E06BEC MOV X26, X31
	0x03E06BF0 MOV X27, INVALID
	0x03E06BF4 ADD X29, X29, 0x5D4
	0x03E06BF8 LDR W9, [X8 + 0x18]
	0x03E06BFC CMP W26, W9
	0x03E06C00 B.GE 0x3E06D94
	0x03E06C04 CMP W26, W9
	0x03E06C08 B.CS 0x3E06DB4
	0x03E06C0C ADD X8, X8, X26, 0x3, LSL
	0x03E06C10 LDR X20, [X8 + 0x20]
	0x03E06C14 CBZ X20, 0x3E06D90
	0x03E06C18 LDR X8, [X19 + 0x20]
	0x03E06C1C CBZ X8, 0x3E06D90
	0x03E06C20 LDRSW X9, [X20 + 0x40]
	0x03E06C24 LDR W10, [X8 + 0x18]
	0x03E06C28 CMP W9, W10
	0x03E06C2C B.GE 0x3E06C44
	0x03E06C30 CMP W9, W10
	0x03E06C34 B.CS 0x3E06DB4
	0x03E06C38 ADD X8, X8, X9, 0x3, LSL
	0x03E06C3C LDR X8, [X8 + 0x20]
	0x03E06C40 STR X8, [X20 + 0x28]
	0x03E06C44 MOV X0, X20
	0x03E06C48 BL 0x3E05EE8
	0x03E06C4C LDR X8, [X20 + 0x38]
	0x03E06C50 STR W26, [X20 + 0x50]
	0x03E06C54 CBZ X8, 0x3E06D90
	0x03E06C58 LDR X9, [X8 + 0x18]
	0x03E06C5C CBZ W9, 0x3E06DB4
	0x03E06C60 ADD X9, X27, X9, 0x20, LSL
	0x03E06C64 ADD X8, X8, X9, 0x1D, ASR
	0x03E06C68 LDR X8, [X8 + 0x20]
	0x03E06C6C CBZ X8, 0x3E06D90
	0x03E06C70 LDR X9, [X8 + 0x10]
	0x03E06C74 CBZ X9, 0x3E06D90
	0x03E06C78 LDR W8, [X9 + 0x18]
	0x03E06C7C CBZ W8, 0x3E06DB4
	0x03E06C80 LDR W8, [X9 + 0x28]
	0x03E06C84 SUB W10, W8, 0x1
	0x03E06C88 CMP W10, 0x5
	0x03E06C8C B.HI 0x3E06CD8
	0x03E06C90 LDR X21, [X9 + 0x20]
	0x03E06C94 ADR X11, 0x14
	0x03E06C98 LDRB W9, [X29, X10, LSL]
	0x03E06C9C ADD X11, X11, X9, 0x2, LSL
	0x03E06CA0 MOV X9, X23
	0x03E06CA4 BR X11
	0x03E06CA8 ADRP X8, 0x31F000
	0x03E06CAC LDR X8, [X8 + 0xEF0]
	0x03E06CB0 CMP X21, 0x0
	0x03E06CB4 MOV X9, X25
	0x03E06CB8 LDR X8, [X8]
	0x03E06CBC CSEL X21, X8, X21, EQ
	0x03E06CC0 B 0x3E06D44
	0x03E06CC4 ADRP X8, 0x31F000
	0x03E06CC8 LDR X8, [X8 + 0xEF0]
	0x03E06CCC MOV X9, X25
	0x03E06CD0 LDR X21, [X8]
	0x03E06CD4 B 0x3E06D44
	0x03E06CD8 ADRP X9, 0x364000
	0x03E06CDC LDR X9, [X9 + 0x140]
	0x03E06CE0 ADD X1, X31, 0x14
	0x03E06CE4 STR W8, [X31 + 0x14]
	0x03E06CE8 LDR X0, [X9]
	0x03E06CEC BL 0x1C16E04
	0x03E06CF0 ADRP X8, 0x364000
	0x03E06CF4 LDR X8, [X8 + 0x170]
	0x03E06CF8 MOV X1, X0
	0x03E06CFC MOV X2, X31
	0x03E06D00 LDR X8, [X8]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move [X31+8], X0
	015 Move X19, 0x5E3000
	016 Move X21, 0x318000
	017 Move W8, [X19+781]
	018 Move X21, [X21+2576]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {76}
	023 Move X0, 0x2EE000
	024 Move X0, [X0+2600]
	025 Call 0x1C17CF4
	026 Move X0, 0x365000
	027 Move X0, [X0+112]
	028 Call 0x1C17CF4
	029 Move X0, 0x365000
	030 Move X0, [X0+120]
	031 Call 0x1C17CF4
	032 Move X0, 0x365000
	033 Move X0, [X0+128]
	034 Call 0x1C17CF4
	035 Move X0, 0x365000
	036 Move X0, [X0+136]
	037 Call 0x1C17CF4
	038 Move X0, 0x2EE000
	039 Move X0, [X0+2512]
	040 Call 0x1C17CF4
	041 Move X0, 0x318000
	042 Move X0, [X0+2576]
	043 Call 0x1C17CF4
	044 Move X0, 0x365000
	045 Move X0, [X0+144]
	046 Call 0x1C17CF4
	047 Move X0, 0x318000
	048 Move X0, [X0+1360]
	049 Call 0x1C17CF4
	050 Move X0, 0x365000
	051 Move X0, [X0+152]
	052 Call 0x1C17CF4
	053 Move X0, 0x365000
	054 Move X0, [X0+160]
	055 Call 0x1C17CF4
	056 Move X0, 0x365000
	057 Move X0, [X0+168]
	058 Call 0x1C17CF4
	059 Move X0, 0x315000
	060 Move X0, [X0+1008]
	061 Call 0x1C17CF4
	062 Move X0, 0x318000
	063 Move X0, [X0+1392]
	064 Call 0x1C17CF4
	065 Move X0, 0x365000
	066 Move X0, [X0+176]
	067 Call 0x1C17CF4
	068 Move X0, 0x365000
	069 Move X0, [X0+184]
	070 Call 0x1C17CF4
	071 Move X0, 0x345000
	072 Move X0, [X0+2080]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X19+781], W8
	076 Move X0, [X21]
	077 Move [X31+24], X31
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X21]
	083 Move X8, [X0+184]
	084 Move X8, [X8]
	085 Compare X8, 0
	086 JumpIfNotEqual {206}
	087 Move X8, 0x365000
	088 Move X8, [X8+136]
	089 Move X0, [X8]
	090 Call 0x1C17F10
	091 Move X8, 0x365000
	092 Move X8, [X8+120]
	093 Move X20, X0
	094 Move X1, [X8]
	095 Call Dictionary`2<Object, PseudoStateData>..ctor, X0
	096 Move X0, [X21]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X21]
	102 Move X8, [X0+184]
	103 Move [X8], X20
	104 Move X8, [X21]
	105 Move X8, [X8+184]
	106 Move X0, [X8]
	107 Compare X0, 0
	108 JumpIfEqual {319}
	109 Move X8, 0x365000
	110 Move X19, 0x365000
	111 Move X8, [X8+160]
	112 Move X19, [X19+128]
	113 Move W2, 1
	114 Move X1, [X8]
	115 Move X3, [X19]
	116 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	117 Move X8, [X21]
	118 Move X8, [X8+184]
	119 Move X0, [X8]
	120 Compare X0, 0
	121 JumpIfEqual {319}
	122 Move X8, 0x365000
	123 Move X8, [X8+176]
	124 Move X3, [X19]
	125 Move W2, 2
	126 Move X1, [X8]
	127 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	128 Move X8, [X21]
	129 Move X8, [X8+184]
	130 Move X0, [X8]
	131 Compare X0, 0
	132 JumpIfEqual {319}
	133 Move X8, 0x365000
	134 Move X8, [X8+152]
	135 Move X3, [X19]
	136 Move W2, 8
	137 Move X1, [X8]
	138 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	139 Move X8, [X21]
	140 Move X8, [X8+184]
	141 Move X0, [X8]
	142 Compare X0, 0
	143 JumpIfEqual {319}
	144 Move X8, 0x318000
	145 Move X8, [X8+1392]
	146 Move X3, [X19]
	147 Move W2, 8
	148 Move X1, [X8]
	149 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	150 Move X8, [X21]
	151 Move X8, [X8+184]
	152 Move X0, [X8]
	153 Compare X0, 0
	154 JumpIfEqual {319}
	155 Move X8, 0x318000
	156 Move X8, [X8+1360]
	157 Move X3, [X19]
	158 Move W2, 32
	159 Move X1, [X8]
	160 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	161 Move X8, [X21]
	162 Move X8, [X8+184]
	163 Move X0, [X8]
	164 Compare X0, 0
	165 JumpIfEqual {319}
	166 Move X8, 0x365000
	167 Move X8, [X8+144]
	168 Move X3, [X19]
	169 Move W2, 64
	170 Move X1, [X8]
	171 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	172 Move X8, [X21]
	173 Move X8, [X8+184]
	174 Move X0, [X8]
	175 Compare X0, 0
	176 JumpIfEqual {319}
	177 Move X8, 0x315000
	178 Move X8, [X8+1008]
	179 Move X3, [X19]
	180 Move W2, 128
	181 Move X1, [X8]
	182 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	183 Move X8, [X21]
	184 Move X8, [X8+184]
	185 Move X0, [X8]
	186 Compare X0, 0
	187 JumpIfEqual {319}
	188 Move X8, 0x365000
	189 Move X8, [X8+168]
	190 Move X3, [X19]
	191 Or X2, X31, 0x100000001
	192 Move X1, [X8]
	193 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	194 Move X8, [X21]
	195 Move X8, [X8+184]
	196 Move X0, [X8]
	197 Compare X0, 0
	198 JumpIfEqual {319}
	199 Move X8, 0x345000
	200 Move X8, [X8+2080]
	201 Move X3, [X19]
	202 Move X2, 32
	203 NotImplemented "Instruction MOVK not yet implemented."
	204 Move X1, [X8]
	205 Call Dictionary`2<Object, PseudoStateData>.set_Item, X0, X1, X2
	206 Move X8, [X31+8]
	207 Move X8, [X8+56]
	208 Compare X8, 0
	209 JumpIfEqual {319}
	210 Move W9, [X8+24]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move [X31+4], W9
	213 Move X24, 0x365000
	214 Move X24, [X24+112]
	215 Move W10, W31
	216 Move W9, [X8+24]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Add X8, X8, W10
	219 Move X29, [X8+32]
	220 Move [X31+20], W10
	221 Compare X29, 0
	222 JumpIfEqual {319}
	223 Move X26, [X29+16]
	224 Compare X26, 0
	225 JumpIfEqual {319}
	226 Move X27, X31
	227 Move X28, X31
	228 Move W19, W31
	229 Move W23, W31
	230 Add X22, X26, 32
	231 Move X8, X26
	232 Move W9, [X8+24]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Add X8, X8, X27
	236 Move W8, [X8+40]
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X0, [X21]
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {244}
	242 Call 0x1C17DFC
	243 Move X0, [X21]
	244 Move W8, [X26+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, [X0+184]
	247 Move X0, [X8]
	248 Compare X0, 0
	249 JumpIfEqual {319}
	250 Move X1, [X22]
	251 Move X3, [X24]
	252 Add X2, X31, 24
	253 Call Dictionary`2<Object, PseudoStateData>.TryGetValue, X0, X1, X2
	254 Move TEMP, X0
	255 And TEMP, TEMP, 1
	256 Compare TEMP, 1
	257 JumpIfNotEqual {265}
	258 Move W9, [X31+28]
	259 Move W8, [X31+24]
	260 Move TEMP, X9
	261 And TEMP, TEMP, 1
	262 Compare TEMP, 1
	263 JumpIfEqual {303}
	264 Or W19, W8, W19
	265 Move X8, 0x2EE000
	266 Move X8, [X8+2512]
	267 Move W1, 1
	268 Move X0, [X8]
	269 Call 0x1C17D6C
	270 Move W8, [X26+24]
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move X20, X0
	273 Compare X0, 0
	274 JumpIfEqual {319}
	275 Move X25, X21
	276 Move X21, [X22]
	277 Compare X21, 0
	278 JumpIfEqual {285}
	279 Move X8, [X20]
	280 Move X0, X21
	281 Move X1, [X8+64]
	282 Call 0x1C17E00
	283 Compare X0, 0
	284 JumpIfEqual {335}
	285 Move W8, [X20+24]
	286 Compare W8, 0
	287 JumpIfEqual {334}
	288 Move [X20+32], X21
	289 Move X8, 0x2EE000
	290 Move X8, [X8+2600]
	291 Move X0, [X8]
	292 Move W8, [X0+224]
	293 Compare W8, 0
	294 JumpIfNotEqual {296}
	295 Call 0x1C17DFC
	296 Move X8, 0x365000
	297 Move X8, [X8+184]
	298 Move X1, X20
	299 Move X2, X31
	300 Move X0, [X8]
	301 Call Debug.LogWarningFormat, X0, X1
	302 Move X21, X25
	303 Or W23, W8, W23
	304 Move X8, [X29+16]
	305 Add X28, X28, 1
	306 Add X27, X27, 24
	307 Compare X8, 0
	308 JumpIfNotEqual {232}
	309 Move W10, [X31+20]
	310 Move W8, [X31+4]
	311 Move [X29+28], W19
	312 Move [X29+32], W23
	313 Add W10, W10, 1
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move X8, [X31+8]
	316 Move X8, [X8+56]
	317 Compare X8, 0
	318 JumpIfNotEqual {216}
	319 Call 0x1C17F20
	320 Move X20, [X31+112]
	321 Move X19, [X31+120]
	322 Move X22, [X31+96]
	323 Move X21, [X31+104]
	324 Move X24, [X31+80]
	325 Move X23, [X31+88]
	326 Move X26, [X31+64]
	327 Move X25, [X31+72]
	328 Move X28, [X31+48]
	329 Move X27, [X31+56]
	330 Move X29, [X31+32]
	331 Move X30, [X31+40]
	332 Add X31, X31, 128
	333 Return 
	334 Call 0x1C17F28
	335 Call 0x1C17F44
	336 Move X1, X31
	337 Call 0x1C17DEC

Method: System.String ToString()

Disassembly:
	0x03E06D2C MOV X0, X20
	0x03E06D30 MOV X1, X19
	0x03E06D34 MOV X2, X31
	0x03E06D38 BL 0x3C065A4
	0x03E06D3C B 0x3E06D80
	0x03E06D40 LDR X9, [X31]
	0x03E06D44 LDR X22, [X9]
	0x03E06D48 CBZ X22, 0x3E06D80
	0x03E06D4C LDR X3, [X24]
	0x03E06D50 ADD X2, X31, 0x18
	0x03E06D54 MOV X0, X22
	0x03E06D58 MOV X1, X21
	0x03E06D5C BL 0x2AA6B2C
	0x03E06D60 TBZ X0, 0x0, 0x3E06D6C
	0x03E06D64 LDR X8, [X31 + 0x18]
	0x03E06D68 STR X8, [X20 + 0x48]
	0x03E06D6C LDR X3, [X28]
	0x03E06D70 MOV X0, X22
	0x03E06D74 MOV X1, X21
	0x03E06D78 MOV X2, X20
	0x03E06D7C BL 0x2AA5084
	0x03E06D80 LDR X19, [X31 + 0x8]
	0x03E06D84 ADD X26, X26, 0x1
	0x03E06D88 LDR X8, [X19 + 0x28]
	0x03E06D8C CBNZ X8, 0x3E06BF8
	0x03E06D90 BL 0x1C16F20
	0x03E06D94 LDP X20, X19, [X31 + 0x70]
	0x03E06D98 LDP X22, X21, [X31 + 0x60]
	0x03E06D9C LDP X24, X23, [X31 + 0x50]
	0x03E06DA0 LDP X26, X25, [X31 + 0x40]
	0x03E06DA4 LDP X28, X27, [X31 + 0x30]
	0x03E06DA8 LDP X29, X30, [X31 + 0x20]
	0x03E06DAC ADD X31, X31, 0x80
	0x03E06DB0 RET
	0x03E06DB4 BL 0x1C16F28
	0x03E06DB8 LDR X0, [X0 + 0x28]
	0x03E06DBC RET
	0x03E06DC0 STR X1, [X0 + 0x28]
	0x03E06DC4 B 0x3E06878
	0x03E06DC8 LDR X0, [X0 + 0x60]
	0x03E06DCC RET
	0x03E06DD0 LDR W0, [X0 + 0x68]
	0x03E06DD4 RET
	0x03E06DD8 STR W1, [X0 + 0x68]
	0x03E06DDC RET
	0x03E06DE0 LDRB W0, [X0 + 0x90]
	0x03E06DE4 RET
	0x03E06DE8 SUB X31, X31, 0x50
	0x03E06DEC STR X30, [X31 + 0x20]
	0x03E06DF0 STP X22, X21, [X31 + 0x30]
	0x03E06DF4 STP X20, X19, [X31 + 0x40]
	0x03E06DF8 ADRP X22, 0x5E2000
	0x03E06DFC LDRB W8, [X22 + 0x316]
	0x03E06E00 MOV W19, W1
	0x03E06E04 MOV X20, X0
	0x03E06E08 AND W21, W1, 0x1
	0x03E06E0C TBNZ X8, 0x0, 0x3E06E48
	0x03E06E10 ADRP X0, 0x35D000
	0x03E06E14 LDR X0, [X0 + 0xE20]
	0x03E06E18 BL 0x1C16CF4
	0x03E06E1C ADRP X0, 0x35D000
	0x03E06E20 LDR X0, [X0 + 0xDC8]
	0x03E06E24 BL 0x1C16CF4
	0x03E06E28 ADRP X0, 0x35D000
	0x03E06E2C LDR X0, [X0 + 0xDD8]
	0x03E06E30 BL 0x1C16CF4
	0x03E06E34 ADRP X0, 0x35D000
	0x03E06E38 LDR X0, [X0 + 0xE08]
	0x03E06E3C BL 0x1C16CF4
	0x03E06E40 MOVZ W8, 0x1
	0x03E06E44 STRB W8, [X22 + 0x316]
	0x03E06E48 STP X31, X31, [X31 + 0x8]
	0x03E06E4C STR X31, [X31 + 0x18]
	0x03E06E50 LDR X0, [X20 + 0x60]
	0x03E06E54 STRB W21, [X20 + 0x90]
	0x03E06E58 CBZ X0, 0x3E06EB4
	0x03E06E5C ADRP X8, 0x35D000
	0x03E06E60 LDR X8, [X8 + 0xE08]
	0x03E06E64 ADRP X21, 0x35D000
	0x03E06E68 ADRP X20, 0x35D000
	0x03E06E6C LDR X1, [X8]
	0x03E06E70 LDR X21, [X21 + 0xDC8]
	0x03E06E74 LDR X20, [X20 + 0xE20]
	0x03E06E78 ADD X8, X31, 0x8
	0x03E06E7C BL 0x301CB58
	0x03E06E80 AND W19, W19, 0x1
	0x03E06E84 LDR X1, [X21]
	0x03E06E88 ADD X0, X31, 0x8
	0x03E06E8C BL 0x2BC4350
	0x03E06E90 TBZ X0, 0x0, 0x3E06EA8
	0x03E06E94 LDR X0, [X31 + 0x18]
	0x03E06E98 CBZ X0, 0x3E06EC8

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x5E3000
	011 Move X24, 0x365000
	012 Move W8, [X20+782]
	013 Move X24, [X24+192]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0x365000
	020 Move X0, [X0+200]
	021 Call 0x1C17CF4
	022 Move X0, 0x2EE000
	023 Move X0, [X0+3768]
	024 Call 0x1C17CF4
	025 Move X0, 0x365000
	026 Move X0, [X0+208]
	027 Call 0x1C17CF4
	028 Move X0, 0x365000
	029 Move X0, [X0+216]
	030 Call 0x1C17CF4
	031 Move X0, 0x365000
	032 Move X0, [X0+192]
	033 Call 0x1C17CF4
	034 Move X0, 0x2EE000
	035 Move X0, [X0+2104]
	036 Call 0x1C17CF4
	037 Move X0, 0x334000
	038 Move X0, [X0+1048]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+782], W8
	042 Move X0, [X24]
	043 Move X21, 0x2EE000
	044 Move X20, 0x334000
	045 Move X19, [X19+56]
	046 Move W8, [X0+224]
	047 Move X21, [X21+2104]
	048 Move X20, [X20+1048]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X24]
	053 Move X8, [X0+184]
	054 Move X26, 0x365000
	055 Move X25, 0x2EE000
	056 Move X21, [X21]
	057 Move X22, [X8+8]
	058 Move X20, [X20]
	059 Move X26, [X26+200]
	060 Move X25, [X25+3768]
	061 Compare X22, 0
	062 JumpIfNotEqual {84}
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X24]
	068 Move X9, 0x365000
	069 Move X8, [X0+184]
	070 Move X9, [X9+208]
	071 Move X23, [X8]
	072 Move X0, [X9]
	073 Call 0x1C17F10
	074 Move X8, 0x365000
	075 Move X8, [X8+216]
	076 Move X1, X23
	077 Move X3, X31
	078 Move X22, X0
	079 Move X2, [X8]
	080 Call Func`2<Object, Object>..ctor, X0, X1, X2
	081 Move X8, [X24]
	082 Move X8, [X8+184]
	083 Move [X8+8], X22
	084 Move X2, [X26]
	085 Move X0, X19
	086 Move X1, X22
	087 Call Enumerable.Select, X0, X1
	088 Move X1, [X25]
	089 Call Enumerable.ToArray, X0
	090 Move X1, X0
	091 Move X0, X21
	092 Move X2, X31
	093 Call String.Join, X0, X1
	094 Move X1, X0
	095 Move X0, X20
	096 Move X20, [X31+64]
	097 Move X19, [X31+72]
	098 Move X22, [X31+48]
	099 Move X21, [X31+56]
	100 Move X24, [X31+32]
	101 Move X23, [X31+40]
	102 Move X26, [X31+16]
	103 Move X25, [X31+24]
	104 Move X2, X31
	105 Move X30, [X31+80]
	106 Call String.Format, X0, X1
	107 Return X0

Method: System.Int32 StyleSelectorPartCompare(UnityEngine.UIElements.StyleSelectorPart x, UnityEngine.UIElements.StyleSelectorPart y)

Disassembly:
	0x03E06E9C MOV W1, W19
	0x03E06EA0 BL 0x3E06DE8
	0x03E06EA4 B 0x3E06E84
	0x03E06EA8 LDR X1, [X20]
	0x03E06EAC ADD X0, X31, 0x8
	0x03E06EB0 BL 0x2BC434C
	0x03E06EB4 LDP X20, X19, [X31 + 0x40]
	0x03E06EB8 LDP X22, X21, [X31 + 0x30]
	0x03E06EBC LDR X30, [X31 + 0x20]
	0x03E06EC0 ADD X31, X31, 0x50
	0x03E06EC4 RET
	0x03E06EC8 BL 0x1C16F20
	0x03E06ECC B 0x3E06ED4
	0x03E06ED0 B 0x3E06ED4
	0x03E06ED4 MOV X19, X0
	0x03E06ED8 CMP W1, 0x1
	0x03E06EDC B.NE 0x3E06F10
	0x03E06EE0 MOV X0, X19
	0x03E06EE4 BL 0x3EB1AD0

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X1+8]
	003 Move W9, [X0+8]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move TEMP, 0
	006 Not TEMP
	007 Move W0, TEMP
	008 Move W0, 1
	009 Move X30, [X31+16]
	010 Return X0
	011 Move X8, [X1]
	012 Compare X8, 0
	013 JumpIfEqual {20}
	014 Move X1, [X0]
	015 Move X0, X8
	016 Move X2, X31
	017 Move X30, [X31+16]
	018 Call String.CompareTo, X0, X1
	019 Return X0
	020 Call 0x1C17F20

Method: System.Void CalculateHashes()

Disassembly:
	0x03E06EE8 LDR X20, [X0]
	0x03E06EEC BL 0x3EB1AE0
	0x03E06EF0 ADRP X8, 0x35D000
	0x03E06EF4 LDR X8, [X8 + 0xE20]
	0x03E06EF8 ADD X0, X31, 0x8
	0x03E06EFC LDR X1, [X8]
	0x03E06F00 BL 0x2BC434C
	0x03E06F04 CBZ X20, 0x3E06EB4
	0x03E06F08 MOV X0, X20
	0x03E06F0C BL 0x1C16F18
	0x03E06F10 MOV X20, X31
	0x03E06F14 B 0x3E06F1C
	0x03E06F18 MOV X19, X0
	0x03E06F1C ADRP X8, 0x35D000
	0x03E06F20 LDR X8, [X8 + 0xE20]
	0x03E06F24 LDR X1, [X8]
	0x03E06F28 ADD X0, X31, 0x8
	0x03E06F2C BL 0x2BC434C
	0x03E06F30 CBNZ X20, 0x3E06F3C
	0x03E06F34 MOV X0, X19
	0x03E06F38 BL 0x1D2C690
	0x03E06F3C MOV X0, X20
	0x03E06F40 BL 0x1C16F18
	0x03E06F44 BL 0x1990590
	0x03E06F48 B 0x3E06878
	0x03E06F4C STR X30, [X31 - 0x30]!
	0x03E06F50 STP X22, X21, [X31 + 0x10]
	0x03E06F54 STP X20, X19, [X31 + 0x20]
	0x03E06F58 ADRP X21, 0x5E2000
	0x03E06F5C ADRP X22, 0x35E000
	0x03E06F60 ADRP X20, 0x35E000
	0x03E06F64 LDRB W8, [X21 + 0x317]
	0x03E06F68 LDR X22, [X22 + 0x118]
	0x03E06F6C LDR X20, [X20 + 0x110]
	0x03E06F70 MOV X19, X0
	0x03E06F74 TBNZ X8, 0x0, 0x3E06F98
	0x03E06F78 ADRP X0, 0x35E000
	0x03E06F7C LDR X0, [X0 + 0x110]
	0x03E06F80 BL 0x1C16CF4
	0x03E06F84 ADRP X0, 0x35E000
	0x03E06F88 LDR X0, [X0 + 0x118]
	0x03E06F8C BL 0x1C16CF4
	0x03E06F90 MOVZ W8, 0x1
	0x03E06F94 STRB W8, [X21 + 0x317]
	0x03E06F98 LDR X0, [X22]
	0x03E06F9C BL 0x1C16F10
	0x03E06FA0 LDR X1, [X20]
	0x03E06FA4 MOV X20, X0
	0x03E06FA8 BL 0x301B7C4
	0x03E06FAC STR X20, [X19 + 0x60]
	0x03E06FB0 MOV X0, X19
	0x03E06FB4 MOV X1, X19
	0x03E06FB8 LDP X20, X19, [X31 + 0x20]
	0x03E06FBC LDP X22, X21, [X31 + 0x10]
	0x03E06FC0 LDR X30, [X31], #0x30
	0x03E06FC4 B 0x3E06FC8
	0x03E06FC8 STP X30, X25, [X31 - 0x40]!
	0x03E06FCC STP X24, X23, [X31 + 0x10]
	0x03E06FD0 STP X22, X21, [X31 + 0x20]
	0x03E06FD4 STP X20, X19, [X31 + 0x30]
	0x03E06FD8 ADRP X21, 0x5E2000
	0x03E06FDC LDRB W8, [X21 + 0x318]
	0x03E06FE0 MOV X19, X1
	0x03E06FE4 MOV X20, X0
	0x03E06FE8 TBNZ X8, 0x0, 0x3E0700C
	0x03E06FEC ADRP X0, 0x35E000
	0x03E06FF0 LDR X0, [X0 + 0x100]
	0x03E06FF4 BL 0x1C16CF4
	0x03E06FF8 ADRP X0, 0x2ED000
	0x03E06FFC LDR X0, [X0 + 0x598]
	0x03E07000 BL 0x1C16CF4
	0x03E07004 MOVZ W8, 0x1
	0x03E07008 STRB W8, [X21 + 0x318]
	0x03E0700C CBZ X19, 0x3E070F0
	0x03E07010 LDR X8, [X19 + 0x58]
	0x03E07014 CBZ X8, 0x3E070F4
	0x03E07018 ADRP X23, 0x2EC000
	0x03E0701C ADRP X24, 0x35D000
	0x03E07020 LDR X23, [X23 + 0x598]
	0x03E07024 LDR X24, [X24 + 0x100]
	0x03E07028 MOV X22, X31
	0x03E0702C MOVZ W25, 0x20
	0x03E07030 LDR W9, [X8 + 0x18]
	0x03E07034 CMP X22, W9, SXTW
	0x03E07038 B.GE 0x3E070F4
	0x03E0703C CMP X22, X9
	0x03E07040 B.CS 0x3E07108
	0x03E07044 LDR X0, [X23]
	0x03E07048 LDR X21, [X8, X25, LSL]
	0x03E0704C LDR W9, [X0 + 0xE0]
	0x03E07050 CBNZ W9, 0x3E07058
	0x03E07054 BL 0x1C16DFC
	0x03E07058 MOV X0, X21
	0x03E0705C MOV X1, X31
	0x03E07060 MOV X2, X31
	0x03E07064 BL 0x3C3883C
	0x03E07068 TBNZ X0, 0x0, 0x3E070E0
	0x03E0706C CBZ X21, 0x3E070F0
	0x03E07070 LDRB W1, [X20 + 0x90]
	0x03E07074 MOV X0, X21
	0x03E07078 BL 0x3E06DE8
	0x03E0707C MOV X0, X20
	0x03E07080 MOV X1, X21
	0x03E07084 BL 0x3E06FC8
	0x03E07088 LDR X0, [X20 + 0x60]
	0x03E0708C CBZ X0, 0x3E070F0
	0x03E07090 LDR W10, [X0 + 0x1C]
	0x03E07094 LDR X8, [X0 + 0x10]
	0x03E07098 LDR X9, [X24]
	0x03E0709C ADD W10, W10, 0x1
	0x03E070A0 STR W10, [X0 + 0x1C]
	0x03E070A4 CBZ X8, 0x3E070F0
	0x03E070A8 LDRSW X10, [X0 + 0x18]
	0x03E070AC LDR W11, [X8 + 0x18]
	0x03E070B0 CMP W10, W11
	0x03E070B4 B.CS 0x3E070CC
	0x03E070B8 ADD W9, W10, 0x1
	0x03E070BC ADD X8, X8, X10, 0x3, LSL
	0x03E070C0 STR W9, [X0 + 0x18]
	0x03E070C4 STR X21, [X8 + 0x20]
	0x03E070C8 B 0x3E070E0
	0x03E070CC LDR X8, [X9 + 0x20]
	0x03E070D0 MOV X1, X21
	0x03E070D4 LDR X8, [X8 + 0xC0]
	0x03E070D8 LDR X2, [X8 + 0x70]
	0x03E070DC BL 0x301BF90
	0x03E070E0 LDR X8, [X19 + 0x58]
	0x03E070E4 ADD X22, X22, 0x1
	0x03E070E8 ADD X25, X25, 0x10
	0x03E070EC CBNZ X8, 0x3E07030
	0x03E070F0 BL 0x1C16F20
	0x03E070F4 LDP X20, X19, [X31 + 0x30]
	0x03E070F8 LDP X22, X21, [X31 + 0x20]
	0x03E070FC LDP X24, X23, [X31 + 0x10]
	0x03E07100 LDP X30, X25, [X31], #0x40
	0x03E07104 RET
	0x03E07108 BL 0x1C16F28
	0x03E0710C STP X30, X25, [X31 - 0x40]!
	0x03E07110 STP X24, X23, [X31 + 0x10]
	0x03E07114 STP X22, X21, [X31 + 0x20]
	0x03E07118 STP X20, X19, [X31 + 0x30]
	0x03E0711C CBZ X0, 0x3E071D0
	0x03E07120 MOV X20, X1
	0x03E07124 CBZ X1, 0x3E071D0
	0x03E07128 LDR W22, [X20 + 0x10]
	0x03E0712C LDR W23, [X0 + 0x10]
	0x03E07130 MOV X21, X0
	0x03E07134 MOV W19, W31
	0x03E07138 SUBS W8, W22, 0x1
	0x03E0713C B.LT 0x3E07190
	0x03E07140 SUBS W9, W23, 0x1
	0x03E07144 B.LT 0x3E07190
	0x03E07148 CMP W9, W8
	0x03E0714C MOV W19, W31
	0x03E07150 CSEL W24, W23, W22, CC
	0x03E07154 MOV X0, X21
	0x03E07158 MOV W1, W19
	0x03E0715C MOV X2, X31
	0x03E07160 BL 0x3222A1C
	0x03E07164 AND W25, W0, 0xFFFF
	0x03E07168 MOV X0, X20
	0x03E0716C MOV W1, W19
	0x03E07170 MOV X2, X31
	0x03E07174 BL 0x3222A1C
	0x03E07178 CMP W25, W0, UXTH
	0x03E0717C B.NE 0x3E07190
	0x03E07180 ADD W19, W19, 0x1
	0x03E07184 CMP W24, W19
	0x03E07188 B.NE 0x3E07154
	0x03E0718C MOV W19, W24
	0x03E07190 CMP W23, W22
	0x03E07194 B.LT 0x3E071A8
	0x03E07198 CMP W19, W22
	0x03E0719C B.NE 0x3E071A8
	0x03E071A0 MOVZ W0, 0x1
	0x03E071A4 B 0x3E071BC
	0x03E071A8 CMP W19, W23
	0x03E071AC CSET W8, EQ
	0x03E071B0 CMP W22, W23
	0x03E071B4 CSET W9, GE
	0x03E071B8 AND W0, W8, W9, 0x0
	0x03E071BC LDP X20, X19, [X31 + 0x30]
	0x03E071C0 LDP X22, X21, [X31 + 0x20]
	0x03E071C4 LDP X24, X23, [X31 + 0x10]
	0x03E071C8 LDP X30, X25, [X31], #0x40
	0x03E071CC RET
	0x03E071D0 BL 0x1C16F20
	0x03E071D4 UBFM X0, X1, 0x20, 0x3F
	0x03E071D8 RET
	0x03E071DC STP X30, X21, [X31 - 0x20]!
	0x03E071E0 STP X20, X19, [X31 + 0x10]
	0x03E071E4 ADRP X21, 0x5E1000
	0x03E071E8 LDRB W8, [X21 + 0x31A]
	0x03E071EC MOV X19, X1
	0x03E071F0 MOV X20, X0
	0x03E071F4 TBNZ X8, 0x0, 0x3E07218
	0x03E071F8 ADRP X0, 0x363000
	0x03E071FC LDR X0, [X0 + 0x178]
	0x03E07200 BL 0x1C16CF4
	0x03E07204 ADRP X0, 0x363000
	0x03E07208 LDR X0, [X0 + 0x180]
	0x03E0720C BL 0x1C16CF4
	0x03E07210 MOVZ W8, 0x1
	0x03E07214 STRB W8, [X21 + 0x31A]
	0x03E07218 CMP W19, 0x3
	0x03E0721C B.NE 0x3E07254
	0x03E07220 ADRP X8, 0x363000
	0x03E07224 LDR X8, [X8 + 0x178]
	0x03E07228 LDR X1, [X20 + 0x38]
	0x03E0722C MOVZ W2, 0x3
	0x03E07230 MOV X0, X20
	0x03E07234 LDR X4, [X8]
	0x03E07238 MOV X3, X19
	0x03E0723C BL 0x2293AB0
	0x03E07240 LDP X20, X19, [X31 + 0x10]
	0x03E07244 UBFM X8, X0, 0x20, 0x3F
	0x03E07248 FMOV S0, W8
	0x03E0724C LDP X30, X21, [X31], #0x20
	0x03E07250 RET
	0x03E07254 ADRP X8, 0x363000
	0x03E07258 LDR X8, [X8 + 0x180]
	0x03E0725C LDR X1, [X20 + 0x30]
	0x03E07260 MOV X0, X20
	0x03E07264 MOV X3, X19
	0x03E07268 LDR X4, [X8]
	0x03E0726C LDP X20, X19, [X31 + 0x10]
	0x03E07270 MOVZ W2, 0x2
	0x03E07274 LDP X30, X21, [X31], #0x20
	0x03E07278 B 0x229406C
	0x03E0727C SUB X31, X31, 0x30
	0x03E07280 STP X30, X21, [X31 + 0x10]
	0x03E07284 STP X20, X19, [X31 + 0x20]
	0x03E07288 ADRP X21, 0x5E1000
	0x03E0728C LDRB W8, [X21 + 0x31C]
	0x03E07290 MOV X19, X1
	0x03E07294 MOV X20, X0
	0x03E07298 TBNZ X8, 0x0, 0x3E072BC
	0x03E0729C ADRP X0, 0x363000
	0x03E072A0 LDR X0, [X0 + 0x178]
	0x03E072A4 BL 0x1C16CF4
	0x03E072A8 ADRP X0, 0x363000
	0x03E072AC LDR X0, [X0 + 0x180]
	0x03E072B0 BL 0x1C16CF4
	0x03E072B4 MOVZ W8, 0x1
	0x03E072B8 STRB W8, [X21 + 0x31C]
	0x03E072BC CMP W19, 0x2
	0x03E072C0 B.NE 0x3E0730C
	0x03E072C4 ADRP X8, 0x363000
	0x03E072C8 LDR X8, [X8 + 0x180]
	0x03E072CC LDR X1, [X20 + 0x30]
	0x03E072D0 MOVZ W2, 0x2
	0x03E072D4 MOV X0, X20
	0x03E072D8 LDR X4, [X8]
	0x03E072DC MOV X3, X19
	0x03E072E0 BL 0x229406C
	0x03E072E4 ADD X0, X31, 0x8
	0x03E072E8 MOV W1, W31
	0x03E072EC MOV X2, X31
	0x03E072F0 STR X31, [X31 + 0x8]
	0x03E072F4 BL 0x3D4E62C
	0x03E072F8 LDR X0, [X31 + 0x8]
	0x03E072FC LDP X20, X19, [X31 + 0x20]
	0x03E07300 LDP X30, X21, [X31 + 0x10]
	0x03E07304 ADD X31, X31, 0x30
	0x03E07308 RET
	0x03E0730C ADRP X8, 0x363000
	0x03E07310 LDR X8, [X8 + 0x178]
	0x03E07314 LDR X1, [X20 + 0x38]
	0x03E07318 MOV X0, X20
	0x03E0731C MOV X3, X19
	0x03E07320 LDR X4, [X8]
	0x03E07324 LDP X20, X19, [X31 + 0x20]
	0x03E07328 LDP X30, X21, [X31 + 0x10]
	0x03E0732C MOVZ W2, 0x3
	0x03E07330 ADD X31, X31, 0x30
	0x03E07334 B 0x2293AB0
	0x03E07338 SUB X31, X31, 0x40
	0x03E0733C STP X30, X23, [X31 + 0x10]
	0x03E07340 STP X22, X21, [X31 + 0x20]
	0x03E07344 STP X20, X19, [X31 + 0x30]
	0x03E07348 ADRP X23, 0x5E1000
	0x03E0734C ADRP X22, 0x362000
	0x03E07350 LDRB W8, [X23 + 0x31D]
	0x03E07354 LDR X22, [X22 + 0xC30]
	0x03E07358 MOV X19, X2
	0x03E0735C MOV X20, X1
	0x03E07360 MOV X21, X0
	0x03E07364 TBNZ X8, 0x0, 0x3E07388
	0x03E07368 ADRP X0, 0x362000
	0x03E0736C LDR X0, [X0 + 0xC30]
	0x03E07370 BL 0x1C16CF4
	0x03E07374 ADRP X0, 0x362000
	0x03E07378 LDR X0, [X0 + 0xC28]
	0x03E0737C BL 0x1C16CF4
	0x03E07380 MOVZ W8, 0x1
	0x03E07384 STRB W8, [X23 + 0x31D]
	0x03E07388 LDR X1, [X21 + 0x38]
	0x03E0738C LDR X5, [X22]
	0x03E07390 MOVZ W2, 0x3
	0x03E07394 MOV X0, X21
	0x03E07398 MOV X3, X20
	0x03E0739C MOV X4, X19
	0x03E073A0 BL 0x2294710

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0x5E3000
	015 Move W8, [X20+783]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {65}
	021 Move X0, 0x365000
	022 Move X0, [X0+224]
	023 Call 0x1C17CF4
	024 Move X0, 0x365000
	025 Move X0, [X0+232]
	026 Call 0x1C17CF4
	027 Move X0, 0x318000
	028 Move X0, [X0+2600]
	029 Call 0x1C17CF4
	030 Move X0, 0x365000
	031 Move X0, [X0+240]
	032 Call 0x1C17CF4
	033 Move X0, 0x365000
	034 Move X0, [X0+248]
	035 Call 0x1C17CF4
	036 Move X0, 0x318000
	037 Move X0, [X0+2584]
	038 Call 0x1C17CF4
	039 Move X0, 0x365000
	040 Move X0, [X0+256]
	041 Call 0x1C17CF4
	042 Move X0, 0x2EE000
	043 Move X0, [X0+1448]
	044 Call 0x1C17CF4
	045 Move X0, 0x365000
	046 Move X0, [X0+264]
	047 Call 0x1C17CF4
	048 Move X0, 0x365000
	049 Move X0, [X0+272]
	050 Call 0x1C17CF4
	051 Move X0, 0x318000
	052 Move X0, [X0+2576]
	053 Call 0x1C17CF4
	054 Move X0, 0x365000
	055 Move X0, [X0+280]
	056 Call 0x1C17CF4
	057 Move X0, 0x365000
	058 Move X0, [X0+192]
	059 Call 0x1C17CF4
	060 Move X0, 0x2EE000
	061 Move X0, [X0+2440]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X20+783], W8
	065 Move W8, [X19+48]
	066 Compare W8, 0
	067 JumpIfNotEqual {333}
	068 Move X8, [X19+56]
	069 Compare X8, 0
	070 JumpIfEqual {347}
	071 Move W8, [X8+24]
	072 Move X23, 0x318000
	073 Move X22, 0x365000
	074 Move X23, [X23+2576]
	075 Move X22, [X22+232]
	076 Subtract W21, W8, 2
	077 Move X0, [X23]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X23]
	083 Move X8, [X0+184]
	084 Move X20, [X8+8]
	085 Move TEMP, X21
	086 And TEMP, TEMP, -2147483648
	087 Compare TEMP, -2147483648
	088 JumpIfEqual {105}
	089 Move X8, [X19+56]
	090 Compare X8, 0
	091 JumpIfEqual {347}
	092 Move W9, [X8+24]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add X8, X8, W21
	095 Move X8, [X8+32]
	096 Compare X8, 0
	097 JumpIfEqual {347}
	098 Compare X20, 0
	099 JumpIfEqual {347}
	100 Move X1, [X8+16]
	101 Move X2, [X22]
	102 Move X0, X20
	103 Call List`1<StyleSelectorPart>.AddRange, X0, X1
	104 Subtract W21, W21, 1
	105 Move X24, 0x364000
	106 Move X24, [X24+192]
	107 Move X0, [X24]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {113}
	111 Call 0x1C17DFC
	112 Move X0, [X24]
	113 Move X8, [X0+184]
	114 Move X21, [X8+16]
	115 Compare X21, 0
	116 JumpIfNotEqual {138}
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {122}
	120 Call 0x1C17DFC
	121 Move X0, [X24]
	122 Move X9, 0x364000
	123 Move X8, [X0+184]
	124 Move X9, [X9+264]
	125 Move X22, [X8]
	126 Move X0, [X9]
	127 Call 0x1C17F10
	128 Move X8, 0x364000
	129 Move X8, [X8+280]
	130 Move X1, X22
	131 Move X3, X31
	132 Move X21, X0
	133 Move X2, [X8]
	134 Call Predicate`1<StyleSelectorPart>..ctor, X0, X1, X2
	135 Move X8, [X24]
	136 Move X8, [X8+184]
	137 Move [X8+16], X21
	138 Compare X20, 0
	139 JumpIfEqual {347}
	140 Move X8, 0x364000
	141 Move X8, [X8+240]
	142 Move X0, X20
	143 Move X1, X21
	144 Move X2, [X8]
	145 Call List`1<StyleSelectorPart>.RemoveAll, X0, X1
	146 Move X0, [X23]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {152}
	150 Call 0x1C17DFC
	151 Move X0, [X23]
	152 Move X9, 0x364000
	153 Move X8, [X0+184]
	154 Move X9, [X9+224]
	155 Move X20, [X8+8]
	156 Move X0, [X9]
	157 Call 0x1C17F10
	158 Move X8, 0x364000
	159 Move X8, [X8+272]
	160 Move X1, X31
	161 Move X3, X31
	162 Move X21, X0
	163 Move X2, [X8]
	164 Call Comparison`1<StyleSelectorPart>..ctor, X0, X1, X2
	165 Compare X20, 0
	166 JumpIfEqual {347}
	167 Move X8, 0x364000
	168 Move X8, [X8+248]
	169 Move X0, X20
	170 Move X1, X21
	171 Move X2, [X8]
	172 Call List`1<StyleSelectorPart>.Sort, X0, X1
	173 Move X8, [X23]
	174 Move X8, [X8+184]
	175 Move X8, [X8+8]
	176 Compare X8, 0
	177 JumpIfEqual {347}
	178 Move X9, 0x2ED000
	179 Move X9, [X9+1448]
	180 Move X0, [X9]
	181 Move X9, 0x2ED000
	182 Move X9, [X9+2440]
	183 Move W20, [X8+24]
	184 Move X21, [X9]
	185 Move W9, [X0+224]
	186 Compare W9, 0
	187 JumpIfNotEqual {189}
	188 Call 0x1C17DFC
	189 Move W0, 4
	190 Move W1, W20
	191 Move X2, X31
	192 Call Math.Min, X0, X1
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move X25, 0x364000
	195 Move X25, [X25+256]
	196 Move X22, X31
	197 Move W29, W31
	198 Move W20, W31
	199 Add X19, X19, 16
	200 Move W24, W0
	201 Move W8, 1
	202 Move W27, 19
	203 Move W28, 17
	204 Move TEMP, X8
	205 And TEMP, TEMP, 1
	206 Compare TEMP, 1
	207 JumpIfNotEqual {209}
	208 Move X0, [X23]
	209 Move X0, [X23]
	210 Move W8, [X0+224]
	211 Compare W8, 0
	212 JumpIfNotEqual {215}
	213 Call 0x1C17DFC
	214 Move X0, [X23]
	215 Move X8, [X0+184]
	216 Move X9, [X8+8]
	217 Compare X9, 0
	218 JumpIfEqual {347}
	219 Move W8, [X9+24]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {230}
	224 Call 0x1C17DFC
	225 Move X8, [X23]
	226 Move X8, [X8+184]
	227 Move X9, [X8+8]
	228 Compare X9, 0
	229 JumpIfEqual {347}
	230 Move X2, [X25]
	231 Add X8, X31, 8
	232 Move X0, X9
	233 Move W1, W20
	234 Call List`1<StyleSelectorPart>.get_Item, X0, X1
	235 Move W8, [X31+16]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X0, [X23]
	238 Move W8, [X0+224]
	239 Compare W8, 0
	240 JumpIfNotEqual {243}
	241 Call 0x1C17DFC
	242 Move X0, [X23]
	243 Move X8, [X0+184]
	244 Move X0, [X8+8]
	245 Compare X0, 0
	246 JumpIfEqual {347}
	247 Move X2, [X25]
	248 Add X8, X31, 8
	249 Move W1, W20
	250 Call List`1<StyleSelectorPart>.get_Item, X0, X1
	251 Move X0, [X31+8]
	252 Move X1, X21
	253 Move X2, X31
	254 Call String.op_Equality, X0, X1
	255 Move TEMP, X0
	256 And TEMP, TEMP, 1
	257 Compare TEMP, 1
	258 JumpIfNotEqual {260}
	259 Add W20, W20, 1
	260 Move X0, [X23]
	261 Move W8, [X0+224]
	262 Compare W8, 0
	263 JumpIfNotEqual {266}
	264 Call 0x1C17DFC
	265 Move X0, [X23]
	266 Move X8, [X0+184]
	267 Move X8, [X8+8]
	268 Compare X8, 0
	269 JumpIfEqual {347}
	270 Move W8, [X8+24]
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move W8, [X0+224]
	273 Compare W8, 0
	274 JumpIfNotEqual {277}
	275 Call 0x1C17DFC
	276 Move X0, [X23]
	277 Move X8, [X0+184]
	278 Move X0, [X8+8]
	279 Compare X0, 0
	280 JumpIfEqual {347}
	281 Move X2, [X25]
	282 Add X8, X31, 8
	283 Move W1, W20
	284 Call List`1<StyleSelectorPart>.get_Item, X0, X1
	285 Move X8, [X23]
	286 Move X8, [X8+184]
	287 Move X0, [X8+8]
	288 Compare X0, 0
	289 JumpIfEqual {347}
	290 Move X2, [X25]
	291 Move W29, [X31+16]
	292 Add X8, X31, 8
	293 Move W1, W20
	294 Call List`1<StyleSelectorPart>.get_Item, X0, X1
	295 Move X21, [X31+8]
	296 Compare X21, 0
	297 JumpIfEqual {347}
	298 Move X8, [X21]
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move X0, X21
	301 Move X9, [X8+344]
	302 Move X1, [X8+352]
	303 Move W8, 13
	304 NotImplemented "Instruction CSEL not yet implemented."
	305 NotImplemented "Instruction CMP not yet implemented."
	306 NotImplemented "Instruction CSEL not yet implemented."
	307 NotImplemented "Instruction BLR not yet implemented."
	308 Multiply W8, W0, W26
	309 Move [X19], W8
	310 Add X22, X22, 1
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Move W8, W31
	313 Move X0, [X23]
	314 Move W8, [X0+224]
	315 Compare W8, 0
	316 JumpIfNotEqual {319}
	317 Call 0x1C17DFC
	318 Move X0, [X23]
	319 Move X8, [X0+184]
	320 Move X8, [X8+8]
	321 Compare X8, 0
	322 JumpIfEqual {347}
	323 Move W2, [X8+24]
	324 Move W9, [X8+28]
	325 Add W9, W9, 1
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move [X8+24], W31
	328 Move [X8+28], W9
	329 Move X0, [X8+16]
	330 Move W1, W31
	331 Move X3, X31
	332 Call Array.Clear, X0, X1, X2
	333 Move X20, [X31+112]
	334 Move X19, [X31+120]
	335 Move X22, [X31+96]
	336 Move X21, [X31+104]
	337 Move X24, [X31+80]
	338 Move X23, [X31+88]
	339 Move X26, [X31+64]
	340 Move X25, [X31+72]
	341 Move X28, [X31+48]
	342 Move X27, [X31+56]
	343 Move X29, [X31+32]
	344 Move X30, [X31+40]
	345 Add X31, X31, 128
	346 Return 
	347 Call 0x1C17F20
	348 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x03E073A4 TBZ X0, 0x0, 0x3E073B0
	0x03E073A8 MOVZ W20, 0x1

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x03E073AC B 0x3E073FC
	0x03E073B0 ADRP X8, 0x362000
	0x03E073B4 LDR X8, [X8 + 0xC28]
	0x03E073B8 STR W31, [X31 + 0xC]
	0x03E073BC LDR X1, [X21 + 0x30]
	0x03E073C0 ADD X4, X31, 0xC
	0x03E073C4 LDR X5, [X8]
	0x03E073C8 MOVZ W2, 0x2
	0x03E073CC MOV X0, X21
	0x03E073D0 MOV X3, X20
	0x03E073D4 BL 0x2294A88
	0x03E073D8 LDR V0, [X31 + 0xC]
	0x03E073DC MOV W20, W0
	0x03E073E0 ADD X0, X31, 0x0
	0x03E073E4 MOV W1, W31
	0x03E073E8 MOV X2, X31
	0x03E073EC STR X31, [X31]
	0x03E073F0 BL 0x3D4E62C
	0x03E073F4 LDR X8, [X31]
	0x03E073F8 STR X8, [X19]
	0x03E073FC AND W0, W20, 0x1
	0x03E07400 LDP X20, X19, [X31 + 0x30]
	0x03E07404 LDP X22, X21, [X31 + 0x20]
	0x03E07408 LDP X30, X23, [X31 + 0x10]
	0x03E0740C ADD X31, X31, 0x40
	0x03E07410 RET
	0x03E07414 STR X30, [X31 - 0x30]!
	0x03E07418 STP X22, X21, [X31 + 0x10]
	0x03E0741C STP X20, X19, [X31 + 0x20]
	0x03E07420 ADRP X22, 0x5E1000
	0x03E07424 ADRP X21, 0x363000
	0x03E07428 LDRB W8, [X22 + 0x31E]
	0x03E0742C LDR X21, [X21 + 0x188]
	0x03E07430 MOV X19, X1
	0x03E07434 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5E2000
	007 Move X22, 0x317000
	008 Move X19, 0x317000
	009 Move X20, 0x317000
	010 Move W8, [X21+784]
	011 Move X22, [X22+2512]
	012 Move X19, [X19+2504]
	013 Move X20, [X20+2576]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x317000
	019 Move X0, [X0+2504]
	020 Call 0x1C17CF4
	021 Move X0, 0x317000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0x317000
	025 Move X0, [X0+2576]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+784], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call List`1<StyleSelectorPart>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8+8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

