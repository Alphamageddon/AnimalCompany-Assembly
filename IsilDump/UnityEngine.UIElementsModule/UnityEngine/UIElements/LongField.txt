Type: UnityEngine.UIElements.LongField

Method: UnityEngine.UIElements.LongField/LongInput get_longInput()

Disassembly:
	0x03D6C938 MOV X1, X31
	0x03D6C93C BL 0x3DE0EB8
	0x03D6C940 CBZ X0, 0x3D6D540
	0x03D6C944 LDR X8, [X0]
	0x03D6C948 LDR X1, [X25]
	0x03D6C94C MOV X21, X0
	0x03D6C950 LDRH W9, [X8 + 0x12E]
	0x03D6C954 CBZ X9, 0x3D6C978
	0x03D6C958 LDR X10, [X8 + 0xB0]
	0x03D6C95C ADD X10, X10, 0x8
	0x03D6C960 LDUR X11, [X10 - 0x8]
	0x03D6C964 CMP X11, X1
	0x03D6C968 B.EQ 0x3D6C988
	0x03D6C96C SUBS X9, X9, 0x1
	0x03D6C970 ADD X10, X10, 0x10
	0x03D6C974 B.NE 0x3D6C960
	0x03D6C978 MOVZ W2, 0x27
	0x03D6C97C MOV X0, X21
	0x03D6C980 BL 0x1C5C788
	0x03D6C984 B 0x3D6C998
	0x03D6C988 LDR W9, [X10]
	0x03D6C98C ADD W9, W9, 0x27
	0x03D6C990 ADD X8, X8, W9, 0x4, SXTW
	0x03D6C994 ADD X0, X8, 0x138
	0x03D6C998 LDP X8, X1, [X0]
	0x03D6C99C MOV X0, X21
	0x03D6C9A0 BLR X8
	0x03D6C9A4 LDR X8, [X19 + 0x440]
	0x03D6C9A8 CBZ X8, 0x3D6D540
	0x03D6C9AC MOV W21, W0
	0x03D6C9B0 MOV X0, X8
	0x03D6C9B4 MOV X1, X31
	0x03D6C9B8 BL 0x3DE0EB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x67C000
	005 Move W8, [X20+3321]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x3FB000
	012 Move X0, [X0+2992]
	013 Call 0x1C17CF4
	014 Move X0, 0x3FB000
	015 Move X0, [X0+3000]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3321], W8
	019 Move X0, [X19+1096]
	020 Compare X0, 0
	021 JumpIfEqual {33}
	022 Move X9, 0x3FB000
	023 Move X9, [X9+2992]
	024 Move X8, [X0]
	025 Move X1, [X9]
	026 Move W10, [X8+304]
	027 Move W9, [X1+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X8+200]
	030 Add X8, X8, X9
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C181E0

Method: System.String ValueToString(System.Int64 v)

Disassembly:
	0x03D6C9BC CBZ X0, 0x3D6D540
	0x03D6C9C0 LDR X8, [X0]
	0x03D6C9C4 ADRP X26, 0x3F7000
	0x03D6C9C8 LDR X1, [X25]
	0x03D6C9CC MOV X22, X0
	0x03D6C9D0 LDRH W9, [X8 + 0x12E]
	0x03D6C9D4 LDR X26, [X26 + 0x5F8]
	0x03D6C9D8 CBZ X9, 0x3D6C9FC
	0x03D6C9DC LDR X10, [X8 + 0xB0]
	0x03D6C9E0 ADD X10, X10, 0x8
	0x03D6C9E4 LDUR X11, [X10 - 0x8]
	0x03D6C9E8 CMP X11, X1
	0x03D6C9EC B.EQ 0x3D6CA0C
	0x03D6C9F0 SUBS X9, X9, 0x1
	0x03D6C9F4 ADD X10, X10, 0x10
	0x03D6C9F8 B.NE 0x3D6C9E4
	0x03D6C9FC MOVZ W2, 0x26
	0x03D6CA00 MOV X0, X22
	0x03D6CA04 BL 0x1C5C788
	0x03D6CA08 B 0x3D6CA1C
	0x03D6CA0C LDR W9, [X10]
	0x03D6CA10 ADD W9, W9, 0x26
	0x03D6CA14 ADD X8, X8, W9, 0x4, SXTW
	0x03D6CA18 ADD X0, X8, 0x138
	0x03D6CA1C LDP X8, X1, [X0]
	0x03D6CA20 MOV X0, X22
	0x03D6CA24 BLR X8
	0x03D6CA28 LDR X1, [X26]
	0x03D6CA2C MOV W22, W0
	0x03D6CA30 MOV X0, X19
	0x03D6CA34 BL 0x28A804C
	0x03D6CA38 CBZ X0, 0x3D6D540
	0x03D6CA3C MOV X1, X31
	0x03D6CA40 BL 0x3DEC528
	0x03D6CA44 LDR X0, [X19 + 0x440]
	0x03D6CA48 CBZ X0, 0x3D6D540
	0x03D6CA4C MOV X1, X31
	0x03D6CA50 MOV V10.16B, V2.16B
	0x03D6CA54 BL 0x3DE0EB8
	0x03D6CA58 CBZ X0, 0x3D6D540
	0x03D6CA5C LDR X8, [X0]
	0x03D6CA60 LDR X1, [X25]
	0x03D6CA64 MOV X23, X0
	0x03D6CA68 LDRH W9, [X8 + 0x12E]
	0x03D6CA6C CBZ X9, 0x3D6CA90
	0x03D6CA70 LDR X10, [X8 + 0xB0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67C000
	007 Move [X31+8], X1
	008 Move X22, 0x3FB000
	009 Move X20, 0x38A000
	010 Move W8, [X21+3322]
	011 Move X22, [X22+3008]
	012 Move X20, [X20+3144]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x38A000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x3FB000
	022 Move X0, [X0+3008]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3322], W8
	026 Move X1, [X22]
	027 Move X0, X19
	028 Call TextValueField`1<Int64>.get_formatString, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Compare X0, 0
	039 JumpIfEqual {55}
	040 Move X8, [X0]
	041 Move X9, [X8+536]
	042 Move X1, [X8+544]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X2, X0
	045 Add X0, X31, 8
	046 Move X1, X19
	047 Move X3, X31
	048 Call Int64.ToString, X0, X1, X2
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0
	055 Call 0x1C17F20

Method: System.Int64 StringToValue(System.String str)

Disassembly:
	0x03D6CA74 ADD X10, X10, 0x8
	0x03D6CA78 LDUR X11, [X10 - 0x8]
	0x03D6CA7C CMP X11, X1
	0x03D6CA80 B.EQ 0x3D6CAA0
	0x03D6CA84 SUBS X9, X9, 0x1
	0x03D6CA88 ADD X10, X10, 0x10
	0x03D6CA8C B.NE 0x3D6CA78
	0x03D6CA90 MOVZ W2, 0x27
	0x03D6CA94 MOV X0, X23
	0x03D6CA98 BL 0x1C5C788
	0x03D6CA9C B 0x3D6CAB0
	0x03D6CAA0 LDR W9, [X10]
	0x03D6CAA4 ADD W9, W9, 0x27
	0x03D6CAA8 ADD X8, X8, W9, 0x4, SXTW
	0x03D6CAAC ADD X0, X8, 0x138
	0x03D6CAB0 LDP X8, X1, [X0]
	0x03D6CAB4 MOV X0, X23
	0x03D6CAB8 BLR X8
	0x03D6CABC LDR X8, [X19]
	0x03D6CAC0 MOV W24, W0
	0x03D6CAC4 MOV X0, X19
	0x03D6CAC8 LDR X9, [X8 + 0x7E8]
	0x03D6CACC LDR X1, [X8 + 0x7F0]
	0x03D6CAD0 BLR X9
	0x03D6CAD4 LDR X0, [X19 + 0x440]
	0x03D6CAD8 CBZ X0, 0x3D6D540
	0x03D6CADC LDR V12, [X19 + 0x494]
	0x03D6CAE0 LDR V13, [X19 + 0x498]
	0x03D6CAE4 MOV X1, X31
	0x03D6CAE8 MOV V11.16B, V0.16B
	0x03D6CAEC BL 0x3DE0EB8
	0x03D6CAF0 CBZ X0, 0x3D6D540
	0x03D6CAF4 LDR X8, [X0]
	0x03D6CAF8 FNEG S0, S8
	0x03D6CAFC FSUB S1, S11, S12
	0x03D6CB00 FSUB S2, S13, S12
	0x03D6CB04 FSUB S11, S0, S9
	0x03D6CB08 FDIV S0, S1, S2
	0x03D6CB0C FADD S1, S11, S10
	0x03D6CB10 SCVTF S2, W24
	0x03D6CB14 SCVTF S3, W22
	0x03D6CB18 FSUB S1, S1, S2
	0x03D6CB1C LDRH W9, [X8 + 0x12E]
	0x03D6CB20 LDR X1, [X25]
	0x03D6CB24 FSUB S1, S1, S3
	0x03D6CB28 FMUL S0, S1, S0
	0x03D6CB2C MOV X23, X0
	0x03D6CB30 FADD S8, S0, S3
	0x03D6CB34 CBZ X9, 0x3D6CB58
	0x03D6CB38 LDR X10, [X8 + 0xB0]
	0x03D6CB3C ADD X10, X10, 0x8
	0x03D6CB40 LDUR X11, [X10 - 0x8]
	0x03D6CB44 CMP X11, X1
	0x03D6CB48 B.EQ 0x3D6CB68
	0x03D6CB4C SUBS X9, X9, 0x1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x67C000
	007 Move W8, [X21+3323]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x3FB000
	015 Move X0, [X0+3016]
	016 Call 0x1C17CF4
	017 Move X0, 0x3FB000
	018 Move X0, [X0+3000]
	019 Call 0x1C17CF4
	020 Move X0, 0x3FB000
	021 Move X0, [X0+3024]
	022 Call 0x1C17CF4
	023 Move X0, 0x3F4000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3323], W8
	028 Move [X31+8], X31
	029 Move X0, [X19+1096]
	030 Compare X0, 0
	031 JumpIfEqual {66}
	032 Move X8, 0x3FB000
	033 Move X8, [X8+3024]
	034 Move X21, 0x3F4000
	035 Move X1, [X8]
	036 Move X21, [X21+1960]
	037 Call TextInputBase<Int64>.get_originalText, X0
	038 Move X8, [X21]
	039 Move X21, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Add X2, X31, 8
	046 Move X0, X20
	047 Move X1, X21
	048 Move X3, X31
	049 Call UINumericFieldsUtils.TryConvertStringToLong, X0, X1, X2
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Move X0, [X31+8]
	055 Move X8, 0x3FB000
	056 Move X8, [X8+3016]
	057 Move X0, X19
	058 Move X1, [X8]
	059 Call BaseField`1<Int64>.get_rawValue, X0
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return X0
	066 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03D6CB50 ADD X10, X10, 0x10
	0x03D6CB54 B.NE 0x3D6CB40
	0x03D6CB58 MOVZ W2, 0x26

ISIL:
	001 Move W2, 1000
	002 Move X1, X31

Method: System.Void .ctor(System.String label, System.Int32 maxLength = 1000)

Disassembly:
	0x03D6CB5C MOV X0, X23
	0x03D6CB60 BL 0x1C5C788
	0x03D6CB64 B 0x3D6CB78
	0x03D6CB68 LDR W9, [X10]
	0x03D6CB6C ADD W9, W9, 0x26
	0x03D6CB70 ADD X8, X8, W9, 0x4, SXTW
	0x03D6CB74 ADD X0, X8, 0x138
	0x03D6CB78 LDP X8, X1, [X0]
	0x03D6CB7C MOV X0, X23
	0x03D6CB80 BLR X8
	0x03D6CB84 SCVTF S0, W0
	0x03D6CB88 FSUB S8, S8, S0
	0x03D6CB8C FCVT S0, S8
	0x03D6CB90 ADD X0, X31, 0x38
	0x03D6CB94 BL 0x3EB1C00
	0x03D6CB98 FCMP S8, 0x0
	0x03D6CB9C B.GE 0x3D6CBB8
	0x03D6CBA0 FMOV D1, -0.5
	0x03D6CBA4 FCMP D0, D1
	0x03D6CBA8 B.NE 0x3D6CBE4
	0x03D6CBAC LDR V0, [X31 + 0x38]
	0x03D6CBB0 FMOV S1, -1
	0x03D6CBB4 B 0x3D6CBCC
	0x03D6CBB8 FMOV D1, 0.5
	0x03D6CBBC FCMP D0, D1
	0x03D6CBC0 B.NE 0x3D6CBF4
	0x03D6CBC4 LDR V0, [X31 + 0x38]
	0x03D6CBC8 FMOV S1, 1
	0x03D6CBCC FCVTZS X8, D0
	0x00000000 INVALID
	0x03D6CBD4 FADD S1, S0, S1
	0x03D6CBD8 ANDS X31, X8, 0x1
	0x03D6CBDC FCSEL S8, S0, S1, EQ
	0x03D6CBE0 B 0x3D6CC00
	0x03D6CBE4 FMOV S0, -0.5
	0x03D6CBE8 FADD S0, S8, S0
	0x03D6CBEC FRINTP S8, S0
	0x03D6CBF0 B 0x3D6CC00
	0x03D6CBF4 FMOV S0, 0.5
	0x03D6CBF8 FADD S0, S8, S0
	0x03D6CBFC FRINTM S8, S0
	0x03D6CC00 LDR X0, [X19 + 0x440]
	0x03D6CC04 CBZ X0, 0x3D6D540
	0x03D6CC08 MOV X1, X31
	0x03D6CC0C BL 0x3DE0EB8
	0x03D6CC10 CBZ X0, 0x3D6D540
	0x03D6CC14 LDR X8, [X0]
	0x03D6CC18 LDR X1, [X25]
	0x03D6CC1C MOV X22, X0
	0x03D6CC20 LDRH W9, [X8 + 0x12E]
	0x03D6CC24 CBZ X9, 0x3D6CC48
	0x03D6CC28 LDR X10, [X8 + 0xB0]
	0x03D6CC2C ADD X10, X10, 0x8
	0x03D6CC30 LDUR X11, [X10 - 0x8]
	0x03D6CC34 CMP X11, X1
	0x03D6CC38 B.EQ 0x3D6CC58
	0x03D6CC3C SUBS X9, X9, 0x1
	0x03D6CC40 ADD X10, X10, 0x10
	0x03D6CC44 B.NE 0x3D6CC30
	0x03D6CC48 MOVZ W2, 0x26
	0x03D6CC4C MOV X0, X22
	0x03D6CC50 BL 0x1C5C788
	0x03D6CC54 B 0x3D6CC68
	0x03D6CC58 LDR W9, [X10]
	0x03D6CC5C ADD W9, W9, 0x26
	0x03D6CC60 ADD X8, X8, W9, 0x4, SXTW
	0x03D6CC64 ADD X0, X8, 0x138
	0x03D6CC68 LDP X8, X1, [X0]
	0x03D6CC6C MOV X0, X22
	0x03D6CC70 BLR X8
	0x03D6CC74 LDR X1, [X26]
	0x03D6CC78 MOV W22, W0
	0x03D6CC7C MOV X0, X19
	0x03D6CC80 BL 0x28A804C
	0x03D6CC84 CBZ X0, 0x3D6D540
	0x03D6CC88 MOV X1, X31
	0x03D6CC8C BL 0x3DEC528
	0x03D6CC90 LDR X0, [X19 + 0x440]
	0x03D6CC94 CBZ X0, 0x3D6D540
	0x03D6CC98 MOV X1, X31
	0x03D6CC9C MOV V9.16B, V2.16B
	0x03D6CCA0 BL 0x3DE0EB8
	0x03D6CCA4 CBZ X0, 0x3D6D540
	0x03D6CCA8 LDR X8, [X0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x67C000
	010 Move X25, 0x3FB000
	011 Move X24, 0x3FB000
	012 Move X23, 0x3FB000
	013 Move W8, [X22+3324]
	014 Move X25, [X25+2992]
	015 Move X24, [X24+3032]
	016 Move X23, [X23+3040]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x3FB000
	025 Move X0, [X0+3048]
	026 Call 0x1C17CF4
	027 Move X0, 0x3FB000
	028 Move X0, [X0+3056]
	029 Call 0x1C17CF4
	030 Move X0, 0x3FB000
	031 Move X0, [X0+3040]
	032 Call 0x1C17CF4
	033 Move X0, 0x3FB000
	034 Move X0, [X0+2992]
	035 Call 0x1C17CF4
	036 Move X0, 0x3FB000
	037 Move X0, [X0+3064]
	038 Call 0x1C17CF4
	039 Move X0, 0x3FB000
	040 Move X0, [X0+3032]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+3324], W8
	044 Move X0, [X25]
	045 Call 0x1C17F10
	046 Move X22, X0
	047 Call LongInput..ctor, X0
	048 Move X4, [X24]
	049 Move X0, X19
	050 Move X1, X21
	051 Move W2, W20
	052 Move X3, X22
	053 Call TextValueField`1<Int64>..ctor, X0, X1, X2, X3
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X0+184]
	061 Move X0, X19
	062 Move X2, X31
	063 Move X1, [X8]
	064 Call VisualElement.AddToClassList, X0, X1
	065 Move X0, [X19+1024]
	066 Compare X0, 0
	067 JumpIfEqual {99}
	068 Move X8, [X23]
	069 Move X20, 0x3FB000
	070 Move X2, X31
	071 Move X8, [X8+184]
	072 Move X1, [X8+8]
	073 Move X20, [X20+3056]
	074 Call VisualElement.AddToClassList, X0, X1
	075 Move X1, [X20]
	076 Move X0, X19
	077 Call BaseField`1<Int64>.get_visualInput, X0
	078 Compare X0, 0
	079 JumpIfEqual {99}
	080 Move X8, [X23]
	081 Move X20, 0x3FB000
	082 Move X2, X31
	083 Move X8, [X8+184]
	084 Move X1, [X8+16]
	085 Move X20, [X20+3064]
	086 Call VisualElement.AddToClassList, X0, X1
	087 Move X1, [X20]
	088 Move X0, X19
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Move X25, [X31+72]
	097 Call TextValueField`1<Int64>.AddLabelDragger, X0
	098 Return 
	099 Call 0x1C17F20

Method: System.Boolean CanTryParse(System.String textString)

Disassembly:
	0x03D6CD40 LDR X8, [X0]
	0x03D6CD44 FSUB S0, S10, S12
	0x03D6CD48 FSUB S1, S13, S12
	0x03D6CD4C FDIV S0, S0, S1
	0x03D6CD50 FADD S1, S11, S9
	0x03D6CD54 SCVTF S3, W24
	0x03D6CD58 SCVTF S2, W22
	0x03D6CD5C FSUB S1, S1, S3
	0x03D6CD60 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X1
	003 Add X1, X31, 8
	004 Move X2, X31
	005 Move [X31+8], X31
	006 Call Int64.TryParse, X0, X1
	007 And W0, W0, 1
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.Int64 startValue)

Disassembly:
	0x03D6CD64 LDR X1, [X25]
	0x03D6CD68 FSUB S1, S1, S2
	0x03D6CD6C FMUL S0, S1, S0
	0x03D6CD70 MOV X23, X0
	0x03D6CD74 FADD S9, S0, S2
	0x03D6CD78 CBZ X9, 0x3D6CD9C
	0x03D6CD7C LDR X10, [X8 + 0xB0]
	0x03D6CD80 ADD X10, X10, 0x8
	0x03D6CD84 LDUR X11, [X10 - 0x8]
	0x03D6CD88 CMP X11, X1
	0x03D6CD8C B.EQ 0x3D6CDAC
	0x03D6CD90 SUBS X9, X9, 0x1
	0x03D6CD94 ADD X10, X10, 0x10
	0x03D6CD98 B.NE 0x3D6CD84
	0x03D6CD9C MOVZ W2, 0x27
	0x03D6CDA0 MOV X0, X23
	0x03D6CDA4 BL 0x1C5C788
	0x03D6CDA8 B 0x3D6CDBC
	0x03D6CDAC LDR W9, [X10]
	0x03D6CDB0 ADD W9, W9, 0x27
	0x03D6CDB4 ADD X8, X8, W9, 0x4, SXTW
	0x03D6CDB8 ADD X0, X8, 0x138
	0x03D6CDBC LDP X8, X1, [X0]
	0x03D6CDC0 MOV X0, X23
	0x03D6CDC4 BLR X8

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X2
	008 Move W20, W1
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Call LongField.get_longInput, X0
	013 Compare X0, 0
	014 JumpIfEqual {30}
	015 Move X8, [X0]
	016 Move V1, V9
	017 Move V2, V8
	018 Move W1, W20
	019 Move X4, [X8+1992]
	020 Move X3, [X8+2000]
	021 Move X2, X19
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+24]
	025 Move D9, [X31+8]
	026 Move D8, [X31+16]
	027 Move V0, V10
	028 Move V10, [X31+48]
	029 CallNoReturn X4
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03D6CDC8 SCVTF S0, W0
	0x03D6CDCC FADD S9, S9, S0
	0x03D6CDD0 FCVT S0, S9
	0x03D6CDD4 ADD X0, X31, 0x38
	0x03D6CDD8 BL 0x3EB1C00
	0x03D6CDDC FCMP S9, 0x0
	0x03D6CDE0 B.GE 0x3D6CDFC
	0x03D6CDE4 FMOV D1, -0.5
	0x03D6CDE8 FCMP D0, D1
	0x03D6CDEC B.NE 0x3D6CE28
	0x03D6CDF0 LDR V0, [X31 + 0x38]
	0x03D6CDF4 FMOV S1, -1
	0x03D6CDF8 B 0x3D6CE10
	0x03D6CDFC FMOV D1, 0.5
	0x03D6CE00 FCMP D0, D1
	0x03D6CE04 B.NE 0x3D6CE38
	0x03D6CE08 LDR V0, [X31 + 0x38]
	0x03D6CE0C FMOV S1, 1
	0x03D6CE10 FCVTZS X8, D0
	0x00000000 INVALID
	0x03D6CE18 FADD S1, S0, S1
	0x03D6CE1C ANDS X31, X8, 0x1
	0x03D6CE20 FCSEL S9, S0, S1, EQ
	0x03D6CE24 B 0x3D6CE44
	0x03D6CE28 FMOV S0, -0.5
	0x03D6CE2C FADD S0, S9, S0
	0x03D6CE30 FRINTP S9, S0
	0x03D6CE34 B 0x3D6CE44
	0x03D6CE38 FMOV S0, 0.5
	0x03D6CE3C FADD S0, S9, S0
	0x03D6CE40 FRINTM S9, S0
	0x03D6CE44 LDR X0, [X19 + 0x440]
	0x03D6CE48 CBZ X0, 0x3D6D540
	0x03D6CE4C MOV X1, X31
	0x03D6CE50 ADD W21, W21, W20
	0x03D6CE54 BL 0x3DE7EEC
	0x03D6CE58 SCVTF S0, W21
	0x03D6CE5C FSUB S1, S9, S8
	0x03D6CE60 FCMP S1, S0
	0x03D6CE64 MOV X20, X0
	0x03D6CE68 FCSEL S0, S0, S1, MI
	0x03D6CE6C MOV X0, X31
	0x03D6CE70 BL 0x3DFED98
	0x03D6CE74 CBZ X20, 0x3D6D540
	0x03D6CE78 ADRP X23, 0x3B0000
	0x03D6CE7C LDR X9, [X20]
	0x03D6CE80 LDR X23, [X23 + 0x128]
	0x03D6CE84 MOV X8, X1
	0x03D6CE88 MOV X21, X0
	0x03D6CE8C LDRH W10, [X9 + 0x12E]
	0x03D6CE90 LDR X1, [X23]
	0x03D6CE94 AND X22, X8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x67C000
	008 Move X22, 0x3FB000
	009 Move X19, 0x3FB000
	010 Move X21, 0x3B1000
	011 Move X20, 0x3B1000
	012 Move W8, [X23+3325]
	013 Move X22, [X22+3088]
	014 Move X19, [X19+3040]
	015 Move X21, [X21+3768]
	016 Move X20, [X20+3776]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x3FB000
	022 Move X0, [X0+3040]
	023 Call 0x1C17CF4
	024 Move X0, 0x3FB000
	025 Move X0, [X0+3088]
	026 Call 0x1C17CF4
	027 Move X0, 0x3B1000
	028 Move X0, [X0+3768]
	029 Call 0x1C17CF4
	030 Move X0, 0x3B1000
	031 Move X0, [X0+3776]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+3325], W8
	035 Move X8, [X19]
	036 Move X9, [X22]
	037 Move X2, X31
	038 Move X8, [X8+184]
	039 Move [X8], X9
	040 Move X8, [X19]
	041 Move X1, [X21]
	042 Move X8, [X8+184]
	043 Move X0, [X8]
	044 Call String.Concat, X0, X1
	045 Move X8, [X19]
	046 Move X2, X31
	047 Move X8, [X8+184]
	048 Move [X8+8], X0
	049 Move X0, [X8]
	050 Move X1, [X20]
	051 Call String.Concat, X0, X1
	052 Move X8, [X19]
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X8, [X8+184]
	058 Move [X8+16], X0
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

