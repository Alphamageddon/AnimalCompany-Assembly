Type: UnityEngine.UIElements.TwoPaneSplitViewResizer

Method: UnityEngine.UIElements.TwoPaneSplitViewOrientation get_orientation()

Disassembly:
	0x03D8B3B4 CMP X11, X1
	0x03D8B3B8 B.EQ 0x3D8B3D8
	0x03D8B3BC SUBS X10, X10, 0x1
	0x03D8B3C0 ADD X8, X8, 0x10
	0x03D8B3C4 B.NE 0x3D8B3B0
	0x03D8B3C8 MOVZ W2, 0x19
	0x03D8B3CC MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+1040]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.UIElements.VisualElement get_fixedPane()

Disassembly:
	0x03D8B3D0 BL 0x1C5C788
	0x03D8B3D4 B 0x3D8B3E8
	0x03D8B3D8 LDR W8, [X8]
	0x03D8B3DC ADD W8, W8, 0x19
	0x03D8B3E0 ADD X8, X9, W8, 0x4, SXTW
	0x03D8B3E4 ADD X0, X8, 0x138
	0x03D8B3E8 LDP X8, X3, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+984]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.UIElements.VisualElement get_flexedPane()

Disassembly:
	0x03D8B3EC MOV X0, X20
	0x03D8B3F0 MOV X1, X21
	0x03D8B3F4 MOV X2, X22
	0x03D8B3F8 BLR X8
	0x03D8B3FC LDR X0, [X19 + 0x40]
	0x03D8B400 CBZ X0, 0x3D8B458
	0x03D8B404 LDR V0, [X0 + 0x3E8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+992]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Single get_fixedPaneMinDimension()

Disassembly:
	0x03D8B408 FCMP S0, S8
	0x03D8B40C B.EQ 0x3D8B438
	0x03D8B410 STR S8, [X0 + 0x3E8]
	0x03D8B414 LDP X20, X19, [X31 + 0x60]
	0x03D8B418 LDP X22, X21, [X31 + 0x50]
	0x03D8B41C LDP X24, X23, [X31 + 0x40]
	0x03D8B420 LDP X30, X25, [X31 + 0x30]
	0x03D8B424 LDP D9, D8, [X31 + 0x20]
	0x03D8B428 LDP D11, D10, [X31 + 0x10]
	0x03D8B42C MOV X1, X31
	0x03D8B430 LDR V12, [X31], #0x70
	0x03D8B434 B 0x3DF276C
	0x03D8B438 LDP X20, X19, [X31 + 0x60]
	0x03D8B43C LDP X22, X21, [X31 + 0x50]
	0x03D8B440 LDP X24, X23, [X31 + 0x40]
	0x03D8B444 LDP X30, X25, [X31 + 0x30]
	0x03D8B448 LDP D9, D8, [X31 + 0x20]
	0x03D8B44C LDP D11, D10, [X31 + 0x10]
	0x03D8B450 LDR V12, [X31], #0x70
	0x03D8B454 RET
	0x03D8B458 BL 0x1C16F20
	0x03D8B45C STP X30, X21, [X31 - 0x20]!
	0x03D8B460 STP X20, X19, [X31 + 0x10]
	0x03D8B464 ADRP X21, 0x65C000
	0x03D8B468 LDRB W8, [X21 + 0xE16]
	0x03D8B46C MOV X19, X1
	0x03D8B470 MOV X20, X0
	0x03D8B474 TBNZ X8, 0x0, 0x3D8B498
	0x03D8B478 ADRP X0, 0x393000
	0x03D8B47C LDR X0, [X0 + 0xCF0]
	0x03D8B480 BL 0x1C16CF4
	0x03D8B484 ADRP X0, 0x393000
	0x03D8B488 LDR X0, [X0 + 0xCF8]
	0x03D8B48C BL 0x1C16CF4
	0x03D8B490 MOVZ W8, 0x1
	0x03D8B494 STRB W8, [X21 + 0xE16]
	0x03D8B498 LDRB W8, [X20 + 0x3C]
	0x03D8B49C CBZ W8, 0x3D8B4B8
	0x03D8B4A0 CBZ X19, 0x3D8B520
	0x03D8B4A4 MOV X0, X19
	0x03D8B4A8 LDP X20, X19, [X31 + 0x10]
	0x03D8B4AC MOV X1, X31
	0x03D8B4B0 LDP X30, X21, [X31], #0x20
	0x03D8B4B4 B 0x3DA02EC
	0x03D8B4B8 MOV X0, X20
	0x03D8B4BC MOV X1, X19
	0x03D8B4C0 MOV X2, X31
	0x03D8B4C4 BL 0x3DC06D4
	0x03D8B4C8 TBZ X0, 0x0, 0x3D8B514
	0x03D8B4CC CBZ X19, 0x3D8B520
	0x03D8B4D0 LDR V0, [X19 + 0xC0]
	0x03D8B4D4 LDR V1, [X19 + 0xC8]
	0x03D8B4D8 MOVZ W8, 0x1
	0x03D8B4DC MOV X0, X20
	0x03D8B4E0 MOV X1, X31
	0x03D8B4E4 STR D0, [X20 + 0x30]
	0x03D8B4E8 STR S1, [X20 + 0x38]
	0x03D8B4EC STRB W8, [X20 + 0x3C]
	0x03D8B4F0 BL 0x3DB9E70
	0x03D8B4F4 LDR W1, [X19 + 0x9C]
	0x03D8B4F8 MOV X2, X31
	0x03D8B4FC BL 0x3DBAC60
	0x03D8B500 MOV X0, X19
	0x03D8B504 LDP X20, X19, [X31 + 0x10]
	0x03D8B508 MOV X1, X31
	0x03D8B50C LDP X30, X21, [X31], #0x20
	0x03D8B510 B 0x3D9D950
	0x03D8B514 LDP X20, X19, [X31 + 0x10]
	0x03D8B518 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x65D000
	005 Move W8, [X20+3598]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x392000
	012 Move X0, [X0+288]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3598], W8
	016 Move [X31+8], X31
	017 Move X8, [X19+64]
	018 Compare X8, 0
	019 JumpIfEqual {74}
	020 Move X0, [X8+984]
	021 Compare X0, 0
	022 JumpIfEqual {74}
	023 Move W20, [X8+1040]
	024 Move X1, X31
	025 Call VisualElement.get_resolvedStyle, X0
	026 Compare X0, 0
	027 JumpIfEqual {74}
	028 Move X9, 0x392000
	029 Move X8, [X0]
	030 Move X9, [X9+288]
	031 Move X19, X0
	032 Move X1, [X9]
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Compare W20, 0
	035 JumpIfEqual {45}
	036 Compare W9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 25
	045 Compare W9, 0
	046 JumpIfEqual {53}
	047 Move X10, [X8+176]
	048 Add X10, X10, 8
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Subtract X9, X9, 1
	052 Add X10, X10, 16
	053 Move W2, 26
	054 Move X0, X19
	055 Call 0x1C5D788
	056 Move W9, [X10]
	057 Add W9, W9, 25
	058 Move W9, [X10]
	059 Add W9, W9, 26
	060 Add X8, X8, W9
	061 Add X0, X8, 312
	062 Move X8, [X0]
	063 Move X1, [X0+8]
	064 Move X0, X19
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move [X31+8], X0
	067 Add X0, X31, 8
	068 Move X1, X31
	069 Call StyleFloat.get_value, X0
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Return V0
	074 Call 0x1C17F20

Method: System.Single get_fixedPaneMargins()

Disassembly:
	0x03D8B51C RET
	0x03D8B520 BL 0x1C16F20
	0x03D8B524 STP X30, X21, [X31 - 0x20]!
	0x03D8B528 STP X20, X19, [X31 + 0x10]
	0x03D8B52C ADRP X21, 0x65C000
	0x03D8B530 LDRB W8, [X21 + 0xE17]
	0x03D8B534 MOV X19, X1
	0x03D8B538 MOV X20, X0
	0x03D8B53C TBNZ X8, 0x0, 0x3D8B560
	0x03D8B540 ADRP X0, 0x3D7000
	0x03D8B544 LDR X0, [X0 + 0xA58]
	0x03D8B548 BL 0x1C16CF4
	0x03D8B54C ADRP X0, 0x393000
	0x03D8B550 LDR X0, [X0 + 0x210]
	0x03D8B554 BL 0x1C16CF4
	0x03D8B558 MOVZ W8, 0x1
	0x03D8B55C STRB W8, [X21 + 0xE17]
	0x03D8B560 LDRB W8, [X20 + 0x3C]
	0x03D8B564 CBZ W8, 0x3D8B5D4
	0x03D8B568 MOV X0, X20
	0x03D8B56C MOV X1, X31
	0x03D8B570 BL 0x3DB9E70
	0x03D8B574 CBZ X19, 0x3D8B5E0
	0x03D8B578 LDR W1, [X19 + 0x9C]
	0x03D8B57C MOV X2, X31
	0x03D8B580 BL 0x3DBAB50
	0x03D8B584 TBZ X0, 0x0, 0x3D8B5D4
	0x03D8B588 LDR X8, [X20 + 0x40]
	0x03D8B58C CBZ X8, 0x3D8B5E0
	0x03D8B590 LDP S1, S0, [X19 + 0xC0]
	0x03D8B594 LDP S3, S2, [X20 + 0x30]
	0x03D8B598 LDR W8, [X8 + 0x410]
	0x03D8B59C LDR V4, [X20 + 0x48]
	0x03D8B5A0 MOV X0, X20
	0x03D8B5A4 FSUB S0, S0, S2
	0x03D8B5A8 FSUB S1, S1, S3
	0x03D8B5AC CMP W8, 0x1
	0x03D8B5B0 FCSEL S0, S0, S1, EQ
	0x03D8B5B4 SCVTF S1, S4
	0x03D8B5B8 FMUL S0, S0, S1
	0x03D8B5BC BL 0x3D8ADD8
	0x03D8B5C0 MOV X0, X19
	0x03D8B5C4 LDP X20, X19, [X31 + 0x10]
	0x03D8B5C8 MOV X1, X31
	0x03D8B5CC LDP X30, X21, [X31], #0x20
	0x03D8B5D0 B 0x3D9D950
	0x03D8B5D4 LDP X20, X19, [X31 + 0x10]
	0x03D8B5D8 LDP X30, X21, [X31], #0x20
	0x03D8B5DC RET
	0x03D8B5E0 BL 0x1C16F20
	0x03D8B5E4 STP X30, X21, [X31 - 0x20]!
	0x03D8B5E8 STP X20, X19, [X31 + 0x10]
	0x03D8B5EC ADRP X21, 0x65C000
	0x03D8B5F0 LDRB W8, [X21 + 0xE18]
	0x03D8B5F4 MOV X19, X1
	0x03D8B5F8 MOV X20, X0
	0x03D8B5FC TBNZ X8, 0x0, 0x3D8B614
	0x03D8B600 ADRP X0, 0x393000
	0x03D8B604 LDR X0, [X0 + 0xD20]
	0x03D8B608 BL 0x1C16CF4
	0x03D8B60C MOVZ W8, 0x1
	0x03D8B610 STRB W8, [X21 + 0xE18]
	0x03D8B614 LDRB W8, [X20 + 0x3C]
	0x03D8B618 CBZ W8, 0x3D8B680
	0x03D8B61C MOV X0, X20
	0x03D8B620 MOV X1, X31
	0x03D8B624 BL 0x3DB9E70
	0x03D8B628 CBZ X19, 0x3D8B68C
	0x03D8B62C LDR W1, [X19 + 0x9C]
	0x03D8B630 MOV X2, X31
	0x03D8B634 BL 0x3DBAB50
	0x03D8B638 TBZ X0, 0x0, 0x3D8B680
	0x03D8B63C MOV X0, X20
	0x03D8B640 MOV X1, X19
	0x03D8B644 MOV X2, X31
	0x03D8B648 BL 0x3DC08B8
	0x03D8B64C TBZ X0, 0x0, 0x3D8B680
	0x03D8B650 MOV X0, X20
	0x03D8B654 MOV X1, X31
	0x03D8B658 STRB W31, [X20 + 0x3C]
	0x03D8B65C BL 0x3DB9E70
	0x03D8B660 LDR W1, [X19 + 0x9C]
	0x03D8B664 MOV X2, X31
	0x03D8B668 BL 0x3DBAE34
	0x03D8B66C MOV X0, X19
	0x03D8B670 LDP X20, X19, [X31 + 0x10]
	0x03D8B674 MOV X1, X31
	0x03D8B678 LDP X30, X21, [X31], #0x20
	0x03D8B67C B 0x3D9D950
	0x03D8B680 LDP X20, X19, [X31 + 0x10]
	0x03D8B684 LDP X30, X21, [X31], #0x20
	0x03D8B688 RET
	0x03D8B68C BL 0x1C16F20
	0x03D8B690 STR X30, [X31 - 0x20]!
	0x03D8B694 STP X20, X19, [X31 + 0x10]
	0x03D8B698 ADRP X20, 0x65C000
	0x03D8B69C LDRB W8, [X20 + 0xE19]
	0x03D8B6A0 MOV X19, X0
	0x03D8B6A4 TBNZ X8, 0x0, 0x3D8B6C8
	0x03D8B6A8 ADRP X0, 0x3DC000
	0x03D8B6AC LDR X0, [X0 + 0x7F8]
	0x03D8B6B0 BL 0x1C16CF4
	0x03D8B6B4 ADRP X0, 0x3DC000
	0x03D8B6B8 LDR X0, [X0 + 0x800]
	0x03D8B6BC BL 0x1C16CF4
	0x03D8B6C0 MOVZ W8, 0x1
	0x03D8B6C4 STRB W8, [X20 + 0xE19]
	0x03D8B6C8 LDR X0, [X19 + 0x448]
	0x03D8B6CC CBZ X0, 0x3D8B704
	0x03D8B6D0 ADRP X9, 0x3DC000
	0x03D8B6D4 LDR X9, [X9 + 0x800]
	0x03D8B6D8 LDR X8, [X0]
	0x03D8B6DC LDR X1, [X9]
	0x03D8B6E0 LDRB W10, [X8 + 0x130]
	0x03D8B6E4 LDRB W9, [X1 + 0x130]
	0x03D8B6E8 CMP W10, W9
	0x03D8B6EC B.CC 0x3D8B710
	0x03D8B6F0 LDR X8, [X8 + 0xC8]
	0x03D8B6F4 ADD X8, X8, X9, 0x3, LSL
	0x03D8B6F8 LDUR X8, [X8 - 0x8]
	0x03D8B6FC CMP X8, X1
	0x03D8B700 B.NE 0x3D8B710
	0x03D8B704 LDP X20, X19, [X31 + 0x10]
	0x03D8B708 LDR X30, [X31], #0x20
	0x03D8B70C RET
	0x03D8B710 BL 0x1C171E0
	0x03D8B714 STR X30, [X31 - 0x30]!
	0x03D8B718 STP X22, X21, [X31 + 0x10]
	0x03D8B71C STP X20, X19, [X31 + 0x20]
	0x03D8B720 ADRP X21, 0x65C000
	0x03D8B724 STR W1, [X31 + 0xC]
	0x03D8B728 ADRP X22, 0x3DC000
	0x03D8B72C ADRP X20, 0x36A000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x65D000
	008 Move W8, [X20+3599]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x392000
	015 Move X0, [X0+288]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3599], W8
	019 Move X8, [X19+64]
	020 Compare X8, 0
	021 JumpIfEqual {144}
	022 Move X0, [X8+984]
	023 Compare X0, 0
	024 JumpIfEqual {144}
	025 Move W22, [X8+1040]
	026 Move X1, X31
	027 Call VisualElement.get_resolvedStyle, X0
	028 Compare X0, 0
	029 JumpIfEqual {144}
	030 Move X21, 0x392000
	031 Move X8, [X0]
	032 Move X21, [X21+288]
	033 Move X20, X0
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Move X1, [X21]
	036 Compare W22, 0
	037 JumpIfEqual {49}
	038 Compare W9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 24
	047 Move X0, X20
	048 Call 0x1C5D788
	049 Compare W9, 0
	050 JumpIfEqual {57}
	051 Move X10, [X8+176]
	052 Add X10, X10, 8
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Subtract X9, X9, 1
	056 Add X10, X10, 16
	057 Move W2, 22
	058 Move X0, X20
	059 Call 0x1C5D788
	060 Move W9, [X10]
	061 Add W9, W9, 24
	062 Add X8, X8, W9
	063 Add X0, X8, 312
	064 Move X8, [X0]
	065 Move X1, [X0+8]
	066 Move X0, X20
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X8, [X19+64]
	069 Compare X8, 0
	070 JumpIfEqual {144}
	071 Move X0, [X8+984]
	072 Compare X0, 0
	073 JumpIfEqual {144}
	074 Move X1, X31
	075 Move V8, V0
	076 Call VisualElement.get_resolvedStyle, X0
	077 Compare X0, 0
	078 JumpIfEqual {144}
	079 Move X8, [X0]
	080 Move X1, [X21]
	081 Move X19, X0
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Compare X9, 0
	084 JumpIfEqual {91}
	085 Move X10, [X8+176]
	086 Add X10, X10, 8
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Subtract X9, X9, 1
	090 Add X10, X10, 16
	091 Move W2, 21
	092 Move W9, [X10]
	093 Add W9, W9, 21
	094 Move W9, [X10]
	095 Add W9, W9, 22
	096 Add X8, X8, W9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X20
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X8, [X19+64]
	103 Compare X8, 0
	104 JumpIfEqual {144}
	105 Move X0, [X8+984]
	106 Compare X0, 0
	107 JumpIfEqual {144}
	108 Move X1, X31
	109 Move V8, V0
	110 Call VisualElement.get_resolvedStyle, X0
	111 Compare X0, 0
	112 JumpIfEqual {144}
	113 Move X8, [X0]
	114 Move X1, [X21]
	115 Move X19, X0
	116 NotImplemented "Instruction LDRH not yet implemented."
	117 Compare X9, 0
	118 JumpIfEqual {125}
	119 Move X10, [X8+176]
	120 Add X10, X10, 8
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Subtract X9, X9, 1
	124 Add X10, X10, 16
	125 Move W2, 23
	126 Move X0, X19
	127 Call 0x1C5D788
	128 Move W9, [X10]
	129 Add W9, W9, 23
	130 Add X8, X8, W9
	131 Add X0, X8, 312
	132 Move X8, [X0]
	133 Move X1, [X0+8]
	134 Move X0, X19
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move X20, [X31+32]
	137 Move X19, [X31+40]
	138 Move X22, [X31+16]
	139 Move X21, [X31+24]
	140 Move X30, [X31+8]
	141 Add S0, S8, S0
	142 Move V8, [X31+48]
	143 Return V0
	144 Call 0x1C17F20

Method: System.Single get_flexedPaneMinDimension()

Disassembly:
	0x03D8B730 LDRB W8, [X21 + 0xE1A]
	0x03D8B734 LDR X22, [X22 + 0x808]
	0x03D8B738 LDR X20, [X20 + 0xC48]
	0x03D8B73C MOV X19, X0
	0x03D8B740 TBNZ X8, 0x0, 0x3D8B764
	0x03D8B744 ADRP X0, 0x36A000
	0x03D8B748 LDR X0, [X0 + 0xC48]
	0x03D8B74C BL 0x1C16CF4
	0x03D8B750 ADRP X0, 0x3DC000
	0x03D8B754 LDR X0, [X0 + 0x808]
	0x03D8B758 BL 0x1C16CF4
	0x03D8B75C MOVZ W8, 0x1
	0x03D8B760 STRB W8, [X21 + 0xE1A]
	0x03D8B764 LDR X1, [X22]
	0x03D8B768 MOV X0, X19
	0x03D8B76C BL 0x26E9B68
	0x03D8B770 LDR X8, [X20]
	0x03D8B774 MOV X19, X0
	0x03D8B778 LDR W9, [X8 + 0xE0]
	0x03D8B77C CBNZ W9, 0x3D8B788
	0x03D8B780 MOV X0, X8
	0x03D8B784 BL 0x1C16DFC
	0x03D8B788 MOV X0, X31
	0x03D8B78C BL 0x3338524
	0x03D8B790 CBZ X0, 0x3D8B7C8
	0x03D8B794 LDR X8, [X0]
	0x03D8B798 LDR X9, [X8 + 0x218]
	0x03D8B79C LDR X1, [X8 + 0x220]
	0x03D8B7A0 BLR X9
	0x03D8B7A4 MOV X2, X0
	0x03D8B7A8 ADD X0, X31, 0xC
	0x03D8B7AC MOV X1, X19
	0x03D8B7B0 MOV X3, X31
	0x03D8B7B4 BL 0x3399CE8
	0x03D8B7B8 LDP X20, X19, [X31 + 0x20]
	0x03D8B7BC LDP X22, X21, [X31 + 0x10]
	0x03D8B7C0 LDR X30, [X31], #0x30
	0x03D8B7C4 RET
	0x03D8B7C8 BL 0x1C16F20
	0x03D8B7CC SUB X31, X31, 0x30
	0x03D8B7D0 STP X30, X21, [X31 + 0x10]
	0x03D8B7D4 STP X20, X19, [X31 + 0x20]
	0x03D8B7D8 ADRP X21, 0x65C000
	0x03D8B7DC LDRB W8, [X21 + 0xE1B]
	0x03D8B7E0 MOV X20, X1
	0x03D8B7E4 MOV X19, X0
	0x03D8B7E8 TBNZ X8, 0x0, 0x3D8B824
	0x03D8B7EC ADRP X0, 0x3DC000
	0x03D8B7F0 LDR X0, [X0 + 0x810]
	0x03D8B7F4 BL 0x1C16CF4
	0x03D8B7F8 ADRP X0, 0x3DC000
	0x03D8B7FC LDR X0, [X0 + 0x7F8]
	0x03D8B800 BL 0x1C16CF4
	0x03D8B804 ADRP X0, 0x3DC000
	0x03D8B808 LDR X0, [X0 + 0x818]
	0x03D8B80C BL 0x1C16CF4
	0x03D8B810 ADRP X0, 0x3D4000
	0x03D8B814 LDR X0, [X0 + 0x7A8]
	0x03D8B818 BL 0x1C16CF4
	0x03D8B81C MOVZ W8, 0x1
	0x03D8B820 STRB W8, [X21 + 0xE1B]
	0x03D8B824 STR W31, [X31 + 0xC]
	0x03D8B828 LDR X0, [X19 + 0x448]
	0x03D8B82C CBZ X0, 0x3D8B8A4
	0x03D8B830 ADRP X8, 0x3DC000
	0x03D8B834 LDR X8, [X8 + 0x818]
	0x03D8B838 ADRP X21, 0x3D4000
	0x03D8B83C LDR X1, [X8]
	0x03D8B840 LDR X21, [X21 + 0x7A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x65D000
	005 Move W8, [X20+3600]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x392000
	012 Move X0, [X0+288]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3600], W8
	016 Move [X31+8], X31
	017 Move X8, [X19+64]
	018 Compare X8, 0
	019 JumpIfEqual {74}
	020 Move X0, [X8+992]
	021 Compare X0, 0
	022 JumpIfEqual {74}
	023 Move W20, [X8+1040]
	024 Move X1, X31
	025 Call VisualElement.get_resolvedStyle, X0
	026 Compare X0, 0
	027 JumpIfEqual {74}
	028 Move X9, 0x392000
	029 Move X8, [X0]
	030 Move X9, [X9+288]
	031 Move X19, X0
	032 Move X1, [X9]
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Compare W20, 0
	035 JumpIfEqual {45}
	036 Compare W9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 25
	045 Compare W9, 0
	046 JumpIfEqual {53}
	047 Move X10, [X8+176]
	048 Add X10, X10, 8
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Subtract X9, X9, 1
	052 Add X10, X10, 16
	053 Move W2, 26
	054 Move X0, X19
	055 Call 0x1C5D788
	056 Move W9, [X10]
	057 Add W9, W9, 25
	058 Move W9, [X10]
	059 Add W9, W9, 26
	060 Add X8, X8, W9
	061 Add X0, X8, 312
	062 Move X8, [X0]
	063 Move X1, [X0+8]
	064 Move X0, X19
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move [X31+8], X0
	067 Add X0, X31, 8
	068 Move X1, X31
	069 Call StyleFloat.get_value, X0
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Return V0
	074 Call 0x1C17F20

Method: System.Single get_flexedPaneMargin()

Disassembly:
	0x03D8B844 BL 0x26C7544
	0x03D8B848 LDR X8, [X21]
	0x03D8B84C MOV X21, X0
	0x03D8B850 LDR W9, [X8 + 0xE0]
	0x03D8B854 CBNZ W9, 0x3D8B860
	0x03D8B858 MOV X0, X8
	0x03D8B85C BL 0x1C16DFC
	0x03D8B860 ADD X2, X31, 0xC
	0x03D8B864 MOV X0, X20
	0x03D8B868 MOV X1, X21
	0x03D8B86C MOV X3, X31
	0x03D8B870 BL 0x3C3D9F0
	0x03D8B874 TBZ X0, 0x0, 0x3D8B880
	0x03D8B878 LDR W0, [X31 + 0xC]
	0x03D8B87C B 0x3D8B894
	0x03D8B880 ADRP X8, 0x3DC000
	0x03D8B884 LDR X8, [X8 + 0x810]
	0x03D8B888 MOV X0, X19
	0x03D8B88C LDR X1, [X8]
	0x03D8B890 BL 0x28A3638
	0x03D8B894 LDP X20, X19, [X31 + 0x20]
	0x03D8B898 LDP X30, X21, [X31 + 0x10]
	0x03D8B89C ADD X31, X31, 0x30
	0x03D8B8A0 RET
	0x03D8B8A4 BL 0x1C16F20
	0x03D8B8A8 MOVZ W2, 0x3E8
	0x03D8B8AC MOV X1, X31
	0x03D8B8B0 B 0x3D8B8B4
	0x03D8B8B4 STP X30, X25, [X31 - 0x40]!
	0x03D8B8B8 STP X24, X23, [X31 + 0x10]
	0x03D8B8BC STP X22, X21, [X31 + 0x20]
	0x03D8B8C0 STP X20, X19, [X31 + 0x30]
	0x03D8B8C4 ADRP X22, 0x65C000
	0x03D8B8C8 ADRP X25, 0x3DC000
	0x03D8B8CC ADRP X24, 0x3DC000
	0x03D8B8D0 ADRP X23, 0x3DC000
	0x03D8B8D4 LDRB W8, [X22 + 0xE1C]
	0x03D8B8D8 LDR X25, [X25 + 0x800]
	0x03D8B8DC LDR X24, [X24 + 0x820]
	0x03D8B8E0 LDR X23, [X23 + 0x828]
	0x03D8B8E4 MOV W20, W2
	0x03D8B8E8 MOV X21, X1
	0x03D8B8EC MOV X19, X0
	0x03D8B8F0 TBNZ X8, 0x0, 0x3D8B944
	0x03D8B8F4 ADRP X0, 0x3DC000
	0x03D8B8F8 LDR X0, [X0 + 0x830]
	0x03D8B8FC BL 0x1C16CF4
	0x03D8B900 ADRP X0, 0x3DC000
	0x03D8B904 LDR X0, [X0 + 0x838]
	0x03D8B908 BL 0x1C16CF4
	0x03D8B90C ADRP X0, 0x3DC000
	0x03D8B910 LDR X0, [X0 + 0x840]
	0x03D8B914 BL 0x1C16CF4
	0x03D8B918 ADRP X0, 0x3DC000
	0x03D8B91C LDR X0, [X0 + 0x820]
	0x03D8B920 BL 0x1C16CF4
	0x03D8B924 ADRP X0, 0x3DC000
	0x03D8B928 LDR X0, [X0 + 0x828]
	0x03D8B92C BL 0x1C16CF4
	0x03D8B930 ADRP X0, 0x3DC000
	0x03D8B934 LDR X0, [X0 + 0x800]
	0x03D8B938 BL 0x1C16CF4
	0x03D8B93C MOVZ W8, 0x1
	0x03D8B940 STRB W8, [X22 + 0xE1C]
	0x03D8B944 LDR X0, [X25]
	0x03D8B948 BL 0x1C16F10
	0x03D8B94C MOV X22, X0
	0x03D8B950 BL 0x3D8BA04
	0x03D8B954 LDR X4, [X24]
	0x03D8B958 MOV X0, X19
	0x03D8B95C MOV X1, X21
	0x03D8B960 MOV W2, W20
	0x03D8B964 MOV X3, X22
	0x03D8B968 BL 0x26E9B90
	0x03D8B96C LDR X0, [X23]
	0x03D8B970 LDR W8, [X0 + 0xE0]
	0x03D8B974 CBNZ W8, 0x3D8B980
	0x03D8B978 BL 0x1C16DFC
	0x03D8B97C LDR X0, [X23]
	0x03D8B980 LDR X8, [X0 + 0xB8]
	0x03D8B984 MOV X0, X19
	0x03D8B988 MOV X2, X31
	0x03D8B98C LDR X1, [X8]
	0x03D8B990 BL 0x3DF1C70
	0x03D8B994 LDR X0, [X19 + 0x400]
	0x03D8B998 CBZ X0, 0x3D8BA00
	0x03D8B99C LDR X8, [X23]
	0x03D8B9A0 ADRP X20, 0x3DC000
	0x03D8B9A4 MOV X2, X31
	0x03D8B9A8 LDR X8, [X8 + 0xB8]
	0x03D8B9AC LDR X1, [X8 + 0x8]
	0x03D8B9B0 LDR X20, [X20 + 0x838]
	0x03D8B9B4 BL 0x3DF1C70
	0x03D8B9B8 LDR X1, [X20]
	0x03D8B9BC MOV X0, X19
	0x03D8B9C0 BL 0x28A351C
	0x03D8B9C4 CBZ X0, 0x3D8BA00
	0x03D8B9C8 LDR X8, [X23]
	0x03D8B9CC ADRP X20, 0x3DC000
	0x03D8B9D0 MOV X2, X31
	0x03D8B9D4 LDR X8, [X8 + 0xB8]
	0x03D8B9D8 LDR X1, [X8 + 0x10]
	0x03D8B9DC LDR X20, [X20 + 0x840]
	0x03D8B9E0 BL 0x3DF1C70
	0x03D8B9E4 LDR X1, [X20]
	0x03D8B9E8 MOV X0, X19
	0x03D8B9EC LDP X20, X19, [X31 + 0x30]
	0x03D8B9F0 LDP X22, X21, [X31 + 0x20]
	0x03D8B9F4 LDP X24, X23, [X31 + 0x10]
	0x03D8B9F8 LDP X30, X25, [X31], #0x40
	0x03D8B9FC B 0x213CB20
	0x03D8BA00 BL 0x1C16F20
	0x03D8BA04 STR X30, [X31 - 0x30]!
	0x03D8BA08 STP X22, X21, [X31 + 0x10]
	0x03D8BA0C STP X20, X19, [X31 + 0x20]
	0x03D8BA10 ADRP X21, 0x65C000
	0x03D8BA14 ADRP X22, 0x3DC000
	0x03D8BA18 ADRP X20, 0x3D4000
	0x03D8BA1C LDRB W8, [X21 + 0xE21]
	0x03D8BA20 LDR X22, [X22 + 0x848]
	0x03D8BA24 LDR X20, [X20 + 0x7A8]
	0x03D8BA28 MOV X19, X0
	0x03D8BA2C TBNZ X8, 0x0, 0x3D8BA5C
	0x03D8BA30 ADRP X0, 0x3DC000
	0x03D8BA34 LDR X0, [X0 + 0x848]
	0x03D8BA38 BL 0x1C16CF4
	0x03D8BA3C ADRP X0, 0x3DC000
	0x03D8BA40 LDR X0, [X0 + 0x850]
	0x03D8BA44 BL 0x1C16CF4
	0x03D8BA48 ADRP X0, 0x3D4000
	0x03D8BA4C LDR X0, [X0 + 0x7A8]
	0x03D8BA50 BL 0x1C16CF4
	0x03D8BA54 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x65D000
	008 Move W8, [X20+3601]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x392000
	015 Move X0, [X0+288]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3601], W8
	019 Move X8, [X19+64]
	020 Compare X8, 0
	021 JumpIfEqual {144}
	022 Move X0, [X8+992]
	023 Compare X0, 0
	024 JumpIfEqual {144}
	025 Move W22, [X8+1040]
	026 Move X1, X31
	027 Call VisualElement.get_resolvedStyle, X0
	028 Compare X0, 0
	029 JumpIfEqual {144}
	030 Move X21, 0x392000
	031 Move X8, [X0]
	032 Move X21, [X21+288]
	033 Move X20, X0
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Move X1, [X21]
	036 Compare W22, 0
	037 JumpIfEqual {49}
	038 Compare W9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 24
	047 Move X0, X20
	048 Call 0x1C5D788
	049 Compare W9, 0
	050 JumpIfEqual {57}
	051 Move X10, [X8+176]
	052 Add X10, X10, 8
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Subtract X9, X9, 1
	056 Add X10, X10, 16
	057 Move W2, 22
	058 Move X0, X20
	059 Call 0x1C5D788
	060 Move W9, [X10]
	061 Add W9, W9, 24
	062 Add X8, X8, W9
	063 Add X0, X8, 312
	064 Move X8, [X0]
	065 Move X1, [X0+8]
	066 Move X0, X20
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X8, [X19+64]
	069 Compare X8, 0
	070 JumpIfEqual {144}
	071 Move X0, [X8+992]
	072 Compare X0, 0
	073 JumpIfEqual {144}
	074 Move X1, X31
	075 Move V8, V0
	076 Call VisualElement.get_resolvedStyle, X0
	077 Compare X0, 0
	078 JumpIfEqual {144}
	079 Move X8, [X0]
	080 Move X1, [X21]
	081 Move X19, X0
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Compare X9, 0
	084 JumpIfEqual {91}
	085 Move X10, [X8+176]
	086 Add X10, X10, 8
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Subtract X9, X9, 1
	090 Add X10, X10, 16
	091 Move W2, 21
	092 Move W9, [X10]
	093 Add W9, W9, 21
	094 Move W9, [X10]
	095 Add W9, W9, 22
	096 Add X8, X8, W9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X20
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X8, [X19+64]
	103 Compare X8, 0
	104 JumpIfEqual {144}
	105 Move X0, [X8+992]
	106 Compare X0, 0
	107 JumpIfEqual {144}
	108 Move X1, X31
	109 Move V8, V0
	110 Call VisualElement.get_resolvedStyle, X0
	111 Compare X0, 0
	112 JumpIfEqual {144}
	113 Move X8, [X0]
	114 Move X1, [X21]
	115 Move X19, X0
	116 NotImplemented "Instruction LDRH not yet implemented."
	117 Compare X9, 0
	118 JumpIfEqual {125}
	119 Move X10, [X8+176]
	120 Add X10, X10, 8
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Subtract X9, X9, 1
	124 Add X10, X10, 16
	125 Move W2, 23
	126 Move X0, X19
	127 Call 0x1C5D788
	128 Move W9, [X10]
	129 Add W9, W9, 23
	130 Add X8, X8, W9
	131 Add X0, X8, 312
	132 Move X8, [X0]
	133 Move X1, [X0+8]
	134 Move X0, X19
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move X20, [X31+32]
	137 Move X19, [X31+40]
	138 Move X22, [X31+16]
	139 Move X21, [X31+24]
	140 Move X30, [X31+8]
	141 Add S0, S8, S0
	142 Move V8, [X31+48]
	143 Return V0
	144 Call 0x1C17F20

Method: System.Void .ctor(UnityEngine.UIElements.TwoPaneSplitView splitView, System.Int32 dir)

Disassembly:
	0x03D8A1B4 ADD X2, X31, 0x80
	0x03D8A1B8 MOV X1, X20
	0x03D8A1BC LDR X9, [X8 + 0x178]
	0x03D8A1C0 STP V0, V1, [X31 + 0x80]
	0x03D8A1C4 LDR X3, [X8 + 0x180]
	0x03D8A1C8 BLR X9
	0x03D8A1CC MOV W24, W0
	0x03D8A1D0 LDP V0, V1, [X21]
	0x03D8A1D4 LDR X0, [X22 + 0x80]
	0x03D8A1D8 STP V0, V1, [X31]
	0x03D8A1DC CBZ X0, 0x3D8A264
	0x03D8A1E0 LDR X8, [X0]
	0x03D8A1E4 LDP V0, V1, [X31]
	0x03D8A1E8 ADD X2, X31, 0x80
	0x03D8A1EC MOV X1, X20
	0x03D8A1F0 LDR X9, [X8 + 0x178]
	0x03D8A1F4 STP V0, V1, [X31 + 0x80]
	0x03D8A1F8 LDR X3, [X8 + 0x180]
	0x03D8A1FC BLR X9
	0x03D8A200 CBZ X19, 0x3D8A264
	0x03D8A204 ADRP X9, 0x3DD000
	0x03D8A208 LDR X9, [X9 + 0x740]
	0x03D8A20C LDR X8, [X19]
	0x03D8A210 LDR X1, [X9]
	0x03D8A214 LDRB W10, [X8 + 0x130]
	0x03D8A218 LDRB W9, [X1 + 0x130]
	0x03D8A21C CMP W10, W9
	0x03D8A220 B.CC 0x3D8A268
	0x03D8A224 LDR X8, [X8 + 0xC8]
	0x03D8A228 ADD X8, X8, X9, 0x3, LSL
	0x03D8A22C LDUR X8, [X8 - 0x8]
	0x03D8A230 CMP X8, X1
	0x03D8A234 B.NE 0x3D8A268
	0x03D8A238 MOV W2, W0
	0x03D8A23C SCVTF S0, W24
	0x03D8A240 MOV X0, X19
	0x03D8A244 MOV W1, W23
	0x03D8A248 BL 0x3D87C00
	0x03D8A24C LDP X20, X19, [X31 + 0xD0]
	0x03D8A250 LDP X22, X21, [X31 + 0xC0]
	0x03D8A254 LDP X24, X23, [X31 + 0xB0]
	0x03D8A258 LDR X30, [X31 + 0xA0]
	0x03D8A25C ADD X31, X31, 0xE0
	0x03D8A260 RET
	0x03D8A264 BL 0x1C16F20
	0x03D8A268 MOV X0, X19
	0x03D8A26C BL 0x1C171E0
	0x03D8A270 STP X30, X21, [X31 - 0x20]!
	0x03D8A274 STP X20, X19, [X31 + 0x10]
	0x03D8A278 ADRP X20, 0x65D000
	0x03D8A27C ADRP X21, 0x393000
	0x03D8A280 LDRB W8, [X20 + 0xE0D]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x65E000
	007 Move W8, [X22+3602]
	008 Move W20, W2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x3D9000
	016 Move X0, [X0+2384]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3602], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call PointerManipulator..ctor, X0
	023 Move X0, [X19+24]
	024 Move [X19+64], X21
	025 Move [X19+72], W20
	026 Compare X0, 0
	027 JumpIfEqual {59}
	028 Move X9, 0x3D9000
	029 Move X9, [X9+2384]
	030 Move W10, [X0+28]
	031 Move X8, [X0+16]
	032 Move X9, [X9]
	033 Add W10, W10, 1
	034 Move [X0+28], W10
	035 Compare X8, 0
	036 JumpIfEqual {59}
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move W11, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W11, 12
	041 Add W9, W10, 1
	042 NotImplemented "Instruction MADD not yet implemented."
	043 Move [X0+24], W9
	044 Move [X8+32], X31
	045 Move [X8+40], W31
	046 Move X8, [X9+32]
	047 Move X1, X31
	048 Move X2, X31
	049 Move X8, [X8+192]
	050 Move X3, [X8+112]
	051 Call List`1<ManipulatorActivationFilter>.AddWithResize, X0, X1
	052 Move [X19+60], W31
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return 
	059 Call 0x1C17F20

Method: System.Void RegisterCallbacksOnTarget()

Disassembly:
	0x03D8BA58 STRB W8, [X21 + 0xE21]
	0x03D8BA5C LDR X1, [X22]
	0x03D8BA60 MOV X0, X19
	0x03D8BA64 BL 0x26ED060
	0x03D8BA68 LDR X0, [X20]
	0x03D8BA6C LDR W8, [X0 + 0xE0]
	0x03D8BA70 CBNZ W8, 0x3D8BA7C
	0x03D8BA74 BL 0x1C16DFC
	0x03D8BA78 LDR X0, [X20]
	0x03D8BA7C LDR X8, [X0 + 0xB8]
	0x03D8BA80 LDP X22, X21, [X31 + 0x10]
	0x03D8BA84 LDR X8, [X8 + 0x20]
	0x03D8BA88 STR X8, [X19 + 0x400]
	0x03D8BA8C LDP X20, X19, [X31 + 0x20]
	0x03D8BA90 LDR X30, [X31], #0x30
	0x03D8BA94 RET
	0x03D8BA98 STR X30, [X31 - 0x10]!
	0x03D8BA9C MOV X0, X1
	0x03D8BAA0 ADD X1, X31, 0xC
	0x03D8BAA4 MOV X2, X31
	0x03D8BAA8 STR W31, [X31 + 0xC]
	0x03D8BAAC BL 0x339A090
	0x03D8BAB0 AND W0, W0, 0x1
	0x03D8BAB4 LDR X30, [X31], #0x10
	0x03D8BAB8 RET
	0x03D8BABC STR D10, [X31 - 0x30]!
	0x03D8BAC0 STP D9, D8, [X31 + 0x8]
	0x03D8BAC4 STR X30, [X31 + 0x18]
	0x03D8BAC8 STP X20, X19, [X31 + 0x20]
	0x03D8BACC MOV W19, W2
	0x03D8BAD0 MOV W20, W1
	0x03D8BAD4 MOV V8.16B, V2.16B
	0x03D8BAD8 MOV V9.16B, V1.16B
	0x03D8BADC MOV V10.16B, V0.16B
	0x03D8BAE0 BL 0x3D8B690
	0x03D8BAE4 CBZ X0, 0x3D8BB1C
	0x03D8BAE8 LDR X8, [X0]
	0x03D8BAEC MOV V1.16B, V9.16B
	0x03D8BAF0 MOV V2.16B, V8.16B
	0x03D8BAF4 MOV W1, W20
	0x03D8BAF8 LDR X4, [X8 + 0x7C8]
	0x03D8BAFC LDR X3, [X8 + 0x7D0]
	0x03D8BB00 MOV W2, W19
	0x03D8BB04 LDP X20, X19, [X31 + 0x20]
	0x03D8BB08 LDR X30, [X31 + 0x18]
	0x03D8BB0C LDP D9, D8, [X31 + 0x8]
	0x03D8BB10 MOV V0.16B, V10.16B
	0x03D8BB14 LDR V10, [X31], #0x30
	0x03D8BB18 BR X4
	0x03D8BB1C BL 0x1C16F20
	0x03D8BB20 STP X30, X23, [X31 - 0x30]!
	0x03D8BB24 STP X22, X21, [X31 + 0x10]
	0x03D8BB28 STP X20, X19, [X31 + 0x20]
	0x03D8BB2C ADRP X23, 0x65C000
	0x03D8BB30 ADRP X22, 0x3DC000
	0x03D8BB34 ADRP X19, 0x3DC000
	0x03D8BB38 ADRP X21, 0x391000
	0x03D8BB3C ADRP X20, 0x391000
	0x03D8BB40 LDRB W8, [X23 + 0xE1D]
	0x03D8BB44 LDR X22, [X22 + 0x858]
	0x03D8BB48 LDR X19, [X19 + 0x828]
	0x03D8BB4C LDR X21, [X21 + 0xEB8]
	0x03D8BB50 LDR X20, [X20 + 0xEC0]
	0x03D8BB54 TBNZ X8, 0x0, 0x3D8BB90
	0x03D8BB58 ADRP X0, 0x3DC000
	0x03D8BB5C LDR X0, [X0 + 0x828]
	0x03D8BB60 BL 0x1C16CF4
	0x03D8BB64 ADRP X0, 0x391000
	0x03D8BB68 LDR X0, [X0 + 0xEB8]
	0x03D8BB6C BL 0x1C16CF4
	0x03D8BB70 ADRP X0, 0x3DC000
	0x03D8BB74 LDR X0, [X0 + 0x858]
	0x03D8BB78 BL 0x1C16CF4
	0x03D8BB7C ADRP X0, 0x391000
	0x03D8BB80 LDR X0, [X0 + 0xEC0]
	0x03D8BB84 BL 0x1C16CF4
	0x03D8BB88 MOVZ W8, 0x1
	0x03D8BB8C STRB W8, [X23 + 0xE1D]
	0x03D8BB90 LDR X8, [X19]
	0x03D8BB94 LDR X9, [X22]
	0x03D8BB98 MOV X2, X31
	0x03D8BB9C LDR X8, [X8 + 0xB8]
	0x03D8BBA0 STR X9, [X8]
	0x03D8BBA4 LDR X8, [X19]
	0x03D8BBA8 LDR X1, [X21]
	0x03D8BBAC LDR X8, [X8 + 0xB8]
	0x03D8BBB0 LDR X0, [X8]
	0x03D8BBB4 BL 0x321B938
	0x03D8BBB8 LDR X8, [X19]
	0x03D8BBBC MOV X2, X31
	0x03D8BBC0 LDR X8, [X8 + 0xB8]
	0x03D8BBC4 STR X0, [X8 + 0x8]
	0x03D8BBC8 LDR X0, [X8]
	0x03D8BBCC LDR X1, [X20]
	0x03D8BBD0 BL 0x321B938
	0x03D8BBD4 LDR X8, [X19]
	0x03D8BBD8 LDP X20, X19, [X31 + 0x20]
	0x03D8BBDC LDP X22, X21, [X31 + 0x10]
	0x03D8BBE0 LDR X8, [X8 + 0xB8]
	0x03D8BBE4 STR X0, [X8 + 0x10]
	0x03D8BBE8 LDP X30, X23, [X31], #0x30
	0x03D8BBEC RET
	0x03D8BBF0 STP X30, X21, [X31 - 0x20]!
	0x03D8BBF4 STP X20, X19, [X31 + 0x10]
	0x03D8BBF8 ADRP X20, 0x65C000
	0x03D8BBFC ADRP X21, 0x3DC000
	0x03D8BC00 LDRB W8, [X20 + 0xE1E]
	0x03D8BC04 LDR X21, [X21 + 0x860]
	0x03D8BC08 MOV X19, X0
	0x03D8BC0C TBNZ X8, 0x0, 0x3D8BC24
	0x03D8BC10 ADRP X0, 0x3DC000
	0x03D8BC14 LDR X0, [X0 + 0x860]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x65D000
	008 Move X20, 0x393000
	009 Move X21, 0x3DD000
	010 Move W8, [X22+3603]
	011 Move X20, [X20+1920]
	012 Move X21, [X21+2016]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {47}
	018 Move X0, 0x393000
	019 Move X0, [X0+1904]
	020 Call 0x1C17CF4
	021 Move X0, 0x394000
	022 Move X0, [X0+152]
	023 Call 0x1C17CF4
	024 Move X0, 0x393000
	025 Move X0, [X0+1912]
	026 Call 0x1C17CF4
	027 Move X0, 0x394000
	028 Move X0, [X0+160]
	029 Call 0x1C17CF4
	030 Move X0, 0x393000
	031 Move X0, [X0+1920]
	032 Call 0x1C17CF4
	033 Move X0, 0x393000
	034 Move X0, [X0+1928]
	035 Call 0x1C17CF4
	036 Move X0, 0x3DD000
	037 Move X0, [X0+2016]
	038 Call 0x1C17CF4
	039 Move X0, 0x3DD000
	040 Move X0, [X0+2024]
	041 Call 0x1C17CF4
	042 Move X0, 0x3DD000
	043 Move X0, [X0+2032]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+3603], W8
	047 Move X0, X19
	048 Move X1, X31
	049 Call Manipulator.get_target, X0
	050 Move X8, [X20]
	051 Move X20, X0
	052 Move X0, X8
	053 Call 0x1C17F10
	054 Move X2, [X21]
	055 Move X1, X19
	056 Move X3, X31
	057 Move X21, X0
	058 Call 0x2D0F824, X0, X1, X2
	059 Compare X20, 0
	060 JumpIfEqual {125}
	061 Move X8, 0x393000
	062 Move X8, [X8+1904]
	063 Move X22, 0x394000
	064 Move X23, 0x3DD000
	065 Move X0, X20
	066 Move X3, [X8]
	067 Move X22, [X22+160]
	068 Move X23, [X23+2024]
	069 Move X1, X21
	070 Move W2, W31
	071 Call 0x21A2534, X0, X1, X2
	072 Move X0, X19
	073 Move X1, X31
	074 Call Manipulator.get_target, X0
	075 Move X8, [X22]
	076 Move X20, X0
	077 Move X0, X8
	078 Call 0x1C17F10
	079 Move X2, [X23]
	080 Move X1, X19
	081 Move X3, X31
	082 Move X21, X0
	083 Call 0x2D0F824, X0, X1, X2
	084 Compare X20, 0
	085 JumpIfEqual {125}
	086 Move X8, 0x394000
	087 Move X8, [X8+152]
	088 Move X22, 0x393000
	089 Move X23, 0x3DD000
	090 Move X0, X20
	091 Move X3, [X8]
	092 Move X22, [X22+1928]
	093 Move X23, [X23+2032]
	094 Move X1, X21
	095 Move W2, W31
	096 Call 0x21A2534, X0, X1, X2
	097 Move X0, X19
	098 Move X1, X31
	099 Call Manipulator.get_target, X0
	100 Move X8, [X22]
	101 Move X20, X0
	102 Move X0, X8
	103 Call 0x1C17F10
	104 Move X2, [X23]
	105 Move X1, X19
	106 Move X3, X31
	107 Move X21, X0
	108 Call 0x2D0F824, X0, X1, X2
	109 Compare X20, 0
	110 JumpIfEqual {125}
	111 Move X8, 0x393000
	112 Move X8, [X8+1912]
	113 Move X0, X20
	114 Move X1, X21
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X3, [X8]
	118 Move X22, [X31+16]
	119 Move X21, [X31+24]
	120 Move W2, W31
	121 Move X30, [X31+48]
	122 Move X23, [X31+56]
	123 Call 0x21A2534, X0, X1, X2
	124 Return 
	125 Call 0x1C17F20

Method: System.Void UnregisterCallbacksFromTarget()

Disassembly:
	0x03D8BC18 BL 0x1C16CF4
	0x03D8BC1C MOVZ W8, 0x1
	0x03D8BC20 STRB W8, [X20 + 0xE1E]
	0x03D8BC24 LDR X1, [X21]
	0x03D8BC28 MOV X0, X19
	0x03D8BC2C LDP X20, X19, [X31 + 0x10]
	0x03D8BC30 LDP X30, X21, [X31], #0x20
	0x03D8BC34 B 0x2736468
	0x03D8BC38 STP X30, X21, [X31 - 0x20]!
	0x03D8BC3C STP X20, X19, [X31 + 0x10]
	0x03D8BC40 ADRP X20, 0x65C000
	0x03D8BC44 ADRP X21, 0x3DC000
	0x03D8BC48 LDRB W8, [X20 + 0xE1F]
	0x03D8BC4C LDR X21, [X21 + 0x868]
	0x03D8BC50 MOV X19, X0
	0x03D8BC54 TBNZ X8, 0x0, 0x3D8BC6C
	0x03D8BC58 ADRP X0, 0x3DC000
	0x03D8BC5C LDR X0, [X0 + 0x868]
	0x03D8BC60 BL 0x1C16CF4
	0x03D8BC64 MOVZ W8, 0x1
	0x03D8BC68 STRB W8, [X20 + 0xE1F]
	0x03D8BC6C LDR X1, [X21]
	0x03D8BC70 MOV X0, X19
	0x03D8BC74 LDP X20, X19, [X31 + 0x10]
	0x03D8BC78 LDP X30, X21, [X31], #0x20
	0x03D8BC7C B 0x26E6AD8
	0x03D8BC80 STR X30, [X31 - 0x20]!
	0x03D8BC84 STP X20, X19, [X31 + 0x10]
	0x03D8BC88 ADRP X20, 0x65C000
	0x03D8BC8C LDRB W8, [X20 + 0xE20]
	0x03D8BC90 MOV X19, X0
	0x03D8BC94 TBNZ X8, 0x0, 0x3D8BCAC
	0x03D8BC98 ADRP X0, 0x3DC000
	0x03D8BC9C LDR X0, [X0 + 0x828]
	0x03D8BCA0 BL 0x1C16CF4
	0x03D8BCA4 MOVZ W8, 0x1
	0x03D8BCA8 STRB W8, [X20 + 0xE20]
	0x03D8BCAC MOV X0, X19
	0x03D8BCB0 MOV X1, X31
	0x03D8BCB4 BL 0x3DEBF58
	0x03D8BCB8 CBZ X0, 0x3D8BCF0
	0x03D8BCBC ADRP X9, 0x3DC000
	0x03D8BCC0 LDR X9, [X9 + 0x828]
	0x03D8BCC4 LDR X8, [X0]
	0x03D8BCC8 LDR X1, [X9]
	0x03D8BCCC LDRB W10, [X8 + 0x130]
	0x03D8BCD0 LDRB W9, [X1 + 0x130]
	0x03D8BCD4 CMP W10, W9
	0x03D8BCD8 B.CC 0x3D8BCFC
	0x03D8BCDC LDR X8, [X8 + 0xC8]
	0x03D8BCE0 ADD X8, X8, X9, 0x3, LSL
	0x03D8BCE4 LDUR X8, [X8 - 0x8]
	0x03D8BCE8 CMP X8, X1
	0x03D8BCEC B.NE 0x3D8BCFC
	0x03D8BCF0 LDP X20, X19, [X31 + 0x10]
	0x03D8BCF4 LDR X30, [X31], #0x20
	0x03D8BCF8 RET
	0x03D8BCFC BL 0x1C171E0
	0x03D8BD00 STR X30, [X31 - 0x20]!
	0x03D8BD04 STP X20, X19, [X31 + 0x10]
	0x03D8BD08 ADRP X20, 0x65C000
	0x03D8BD0C ADRP X19, 0x3D4000
	0x03D8BD10 LDRB W8, [X20 + 0xE22]
	0x03D8BD14 LDR X19, [X19 + 0x7A8]
	0x03D8BD18 TBNZ X8, 0x0, 0x3D8BD30
	0x03D8BD1C ADRP X0, 0x3D4000
	0x03D8BD20 LDR X0, [X0 + 0x7A8]
	0x03D8BD24 BL 0x1C16CF4
	0x03D8BD28 MOVZ W8, 0x1
	0x03D8BD2C STRB W8, [X20 + 0xE22]
	0x03D8BD30 LDR X0, [X19]
	0x03D8BD34 LDR W8, [X0 + 0xE0]
	0x03D8BD38 CBNZ W8, 0x3D8BD44
	0x03D8BD3C BL 0x1C16DFC
	0x03D8BD40 LDR X0, [X19]
	0x03D8BD44 LDR X8, [X0 + 0xB8]
	0x03D8BD48 LDP X20, X19, [X31 + 0x10]
	0x03D8BD4C LDR X0, [X8 + 0x8]
	0x03D8BD50 LDR X30, [X31], #0x20
	0x03D8BD54 RET
	0x03D8BD58 STP D11, D10, [X31 - 0x60]!
	0x03D8BD5C STP D9, D8, [X31 + 0x10]
	0x03D8BD60 STR X30, [X31 + 0x20]
	0x03D8BD64 STP X24, X23, [X31 + 0x30]
	0x03D8BD68 STP X22, X21, [X31 + 0x40]
	0x03D8BD6C STP X20, X19, [X31 + 0x50]
	0x03D8BD70 ADRP X24, 0x65C000
	0x03D8BD74 ADRP X23, 0x3DC000
	0x03D8BD78 ADRP X22, 0x368000
	0x03D8BD7C LDRB W8, [X24 + 0xE23]
	0x03D8BD80 LDR X23, [X23 + 0x870]
	0x03D8BD84 LDR X22, [X22 + 0x5A8]
	0x03D8BD88 MOV W21, W2
	0x03D8BD8C MOV W20, W1
	0x03D8BD90 MOV V8.16B, V1.16B
	0x03D8BD94 MOV V9.16B, V0.16B
	0x03D8BD98 MOV X19, X0
	0x03D8BD9C TBNZ X8, 0x0, 0x3D8BDD8
	0x03D8BDA0 ADRP X0, 0x368000
	0x03D8BDA4 LDR X0, [X0 + 0x5A8]
	0x03D8BDA8 BL 0x1C16CF4
	0x03D8BDAC ADRP X0, 0x3DC000
	0x03D8BDB0 LDR X0, [X0 + 0x878]
	0x03D8BDB4 BL 0x1C16CF4
	0x03D8BDB8 ADRP X0, 0x3DC000
	0x03D8BDBC LDR X0, [X0 + 0x870]
	0x03D8BDC0 BL 0x1C16CF4
	0x03D8BDC4 ADRP X0, 0x3DC000
	0x03D8BDC8 LDR X0, [X0 + 0x880]
	0x03D8BDCC BL 0x1C16CF4
	0x03D8BDD0 MOVZ W8, 0x1
	0x03D8BDD4 STRB W8, [X24 + 0xE23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x65D000
	008 Move X20, 0x393000
	009 Move X21, 0x3DD000
	010 Move W8, [X22+3604]
	011 Move X20, [X20+1920]
	012 Move X21, [X21+2016]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {47}
	018 Move X0, 0x393000
	019 Move X0, [X0+1936]
	020 Call 0x1C17CF4
	021 Move X0, 0x394000
	022 Move X0, [X0+3368]
	023 Call 0x1C17CF4
	024 Move X0, 0x393000
	025 Move X0, [X0+1944]
	026 Call 0x1C17CF4
	027 Move X0, 0x394000
	028 Move X0, [X0+160]
	029 Call 0x1C17CF4
	030 Move X0, 0x393000
	031 Move X0, [X0+1920]
	032 Call 0x1C17CF4
	033 Move X0, 0x393000
	034 Move X0, [X0+1928]
	035 Call 0x1C17CF4
	036 Move X0, 0x3DD000
	037 Move X0, [X0+2016]
	038 Call 0x1C17CF4
	039 Move X0, 0x3DD000
	040 Move X0, [X0+2024]
	041 Call 0x1C17CF4
	042 Move X0, 0x3DD000
	043 Move X0, [X0+2032]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+3604], W8
	047 Move X0, X19
	048 Move X1, X31
	049 Call Manipulator.get_target, X0
	050 Move X8, [X20]
	051 Move X20, X0
	052 Move X0, X8
	053 Call 0x1C17F10
	054 Move X2, [X21]
	055 Move X1, X19
	056 Move X3, X31
	057 Move X21, X0
	058 Call 0x2D0F824, X0, X1, X2
	059 Compare X20, 0
	060 JumpIfEqual {125}
	061 Move X8, 0x393000
	062 Move X8, [X8+1936]
	063 Move X22, 0x394000
	064 Move X23, 0x3DD000
	065 Move X0, X20
	066 Move X3, [X8]
	067 Move X22, [X22+160]
	068 Move X23, [X23+2024]
	069 Move X1, X21
	070 Move W2, W31
	071 Call 0x21A28B4, X0, X1, X2
	072 Move X0, X19
	073 Move X1, X31
	074 Call Manipulator.get_target, X0
	075 Move X8, [X22]
	076 Move X20, X0
	077 Move X0, X8
	078 Call 0x1C17F10
	079 Move X2, [X23]
	080 Move X1, X19
	081 Move X3, X31
	082 Move X21, X0
	083 Call 0x2D0F824, X0, X1, X2
	084 Compare X20, 0
	085 JumpIfEqual {125}
	086 Move X8, 0x394000
	087 Move X8, [X8+3368]
	088 Move X22, 0x393000
	089 Move X23, 0x3DD000
	090 Move X0, X20
	091 Move X3, [X8]
	092 Move X22, [X22+1928]
	093 Move X23, [X23+2032]
	094 Move X1, X21
	095 Move W2, W31
	096 Call 0x21A28B4, X0, X1, X2
	097 Move X0, X19
	098 Move X1, X31
	099 Call Manipulator.get_target, X0
	100 Move X8, [X22]
	101 Move X20, X0
	102 Move X0, X8
	103 Call 0x1C17F10
	104 Move X2, [X23]
	105 Move X1, X19
	106 Move X3, X31
	107 Move X21, X0
	108 Call 0x2D0F824, X0, X1, X2
	109 Compare X20, 0
	110 JumpIfEqual {125}
	111 Move X8, 0x393000
	112 Move X8, [X8+1944]
	113 Move X0, X20
	114 Move X1, X21
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X3, [X8]
	118 Move X22, [X31+16]
	119 Move X21, [X31+24]
	120 Move W2, W31
	121 Move X30, [X31+48]
	122 Move X23, [X31+56]
	123 Call 0x21A28B4, X0, X1, X2
	124 Return 
	125 Call 0x1C17F20

Method: System.Void ApplyDelta(System.Single delta)

Disassembly:
	0x03D8BDD8 MOV W0, W21
	0x03D8BDDC MOV X1, X31
	0x03D8BDE0 BL 0x3C2F82C
	0x03D8BDE4 CMP W20, 0x0
	0x03D8BDE8 SCVTF D11, X0
	0x03D8BDEC CSET W0, EQ
	0x03D8BDF0 CMP W20, 0x2
	0x03D8BDF4 CSET W1, EQ
	0x03D8BDF8 MOV X2, X31
	0x03D8BDFC BL 0x3C2F590
	0x03D8BE00 LDR X1, [X23]
	0x03D8BE04 MOV X0, X19
	0x03D8BE08 MOV V10.16B, V0.16B
	0x03D8BE0C BL 0x26C7AC8
	0x03D8BE10 LDR X8, [X19]
	0x03D8BE14 MOV X1, X0
	0x03D8BE18 MOV X0, X19
	0x03D8BE1C LDR X9, [X8 + 0x778]
	0x03D8BE20 LDR X2, [X8 + 0x780]
	0x03D8BE24 BLR X9
	0x03D8BE28 MOV W20, W0
	0x03D8BE2C MOV V0.16B, V9.16B
	0x03D8BE30 MOV V1.16B, V8.16B
	0x03D8BE34 MOV V2.16B, V10.16B
	0x03D8BE38 MOV X0, X31
	0x03D8BE3C BL 0x3C2F5B4
	0x03D8BE40 LDR X0, [X22]
	0x03D8BE44 MOV V8.16B, V0.16B
	0x03D8BE48 LDR W8, [X0 + 0xE0]
	0x03D8BE4C CBNZ W8, 0x3D8BE54
	0x03D8BE50 BL 0x1C16DFC
	0x03D8BE54 FCVT S0, S8
	0x03D8BE58 FMUL D8, D11, D0
	0x03D8BE5C ADD X0, X31, 0x28
	0x03D8BE60 MOV V0.16B, V8.16B
	0x03D8BE64 BL 0x3EB1C00
	0x03D8BE68 FCMP D8, 0x0
	0x03D8BE6C B.GE 0x3D8BE88
	0x03D8BE70 FMOV D1, -0.5
	0x03D8BE74 FCMP D0, D1
	0x03D8BE78 B.NE 0x3D8BEB0
	0x03D8BE7C LDR V0, [X31 + 0x28]
	0x03D8BE80 FMOV D1, -1
	0x03D8BE84 B 0x3D8BE9C
	0x03D8BE88 FMOV D1, 0.5
	0x03D8BE8C FCMP D0, D1
	0x03D8BE90 B.NE 0x3D8BEBC
	0x03D8BE94 LDR V0, [X31 + 0x28]
	0x03D8BE98 FMOV D1, 1
	0x03D8BE9C FCVTZS X8, D0
	0x03D8BEA0 FADD D1, D0, D1
	0x03D8BEA4 ANDS X31, X8, 0x1
	0x03D8BEA8 FCSEL D0, D0, D1, EQ
	0x03D8BEAC B 0x3D8BEC4
	0x03D8BEB0 FADD D0, D8, D1
	0x03D8BEB4 FRINTP D0, D0
	0x03D8BEB8 B 0x3D8BEC4
	0x03D8BEBC FADD D0, D8, D1
	0x03D8BEC0 FRINTM D0, D0
	0x03D8BEC4 MOVZ X8, 0x7FF00000
	0x03D8BEC8 FMOV D1, X8
	0x03D8BECC FCVTZS X9, D0
	0x03D8BED0 FCMP D0, D1
	0x03D8BED4 MOVZ X8, 0x80000000
	0x03D8BED8 MOV X0, X19
	0x03D8BEDC CSEL X21, X8, X9, EQ
	0x03D8BEE0 BL 0x3D8BC80
	0x03D8BEE4 CBZ X0, 0x3D8BFA4
	0x03D8BEE8 ADRP X8, 0x3DC000
	0x03D8BEEC LDR X8, [X8 + 0x878]
	0x03D8BEF0 LDR X1, [X8]
	0x03D8BEF4 MOV W8, W20
	0x03D8BEF8 ADD X20, X21, X8
	0x03D8BEFC BL 0x26DC4B0
	0x03D8BF00 TBZ X0, 0x0, 0x3D8BF58
	0x03D8BF04 MOV X0, X20
	0x03D8BF08 MOV X1, X31
	0x03D8BF0C BL 0x3C2C228
	0x03D8BF10 LDR X8, [X19]
	0x03D8BF14 MOV W1, W0
	0x03D8BF18 MOV X0, X19
	0x03D8BF1C LDR X9, [X8 + 0x7D8]
	0x03D8BF20 LDR X2, [X8 + 0x7E0]
	0x03D8BF24 BLR X9
	0x03D8BF28 ADRP X8, 0x3DC000
	0x03D8BF2C LDR X8, [X8 + 0x880]
	0x03D8BF30 MOV X1, X0
	0x03D8BF34 MOV X0, X19
	0x03D8BF38 LDP X20, X19, [X31 + 0x50]
	0x03D8BF3C LDR X2, [X8]
	0x03D8BF40 LDP X22, X21, [X31 + 0x40]
	0x03D8BF44 LDP X24, X23, [X31 + 0x30]
	0x03D8BF48 LDR X30, [X31 + 0x20]
	0x03D8BF4C LDP D9, D8, [X31 + 0x10]
	0x03D8BF50 LDP D11, D10, [X31], #0x60
	0x03D8BF54 B 0x26C7AEC
	0x03D8BF58 MOV X0, X19
	0x03D8BF5C BL 0x3D8BC80
	0x03D8BF60 MOV X19, X0
	0x03D8BF64 MOV X0, X20
	0x03D8BF68 MOV X1, X31
	0x03D8BF6C BL 0x3C2C228
	0x03D8BF70 CBZ X19, 0x3D8BFA4
	0x03D8BF74 LDR X8, [X19]
	0x03D8BF78 MOV W1, W0
	0x03D8BF7C MOV X0, X19
	0x03D8BF80 LDP X20, X19, [X31 + 0x50]
	0x03D8BF84 LDR X3, [X8 + 0x7F8]
	0x03D8BF88 LDR X2, [X8 + 0x800]
	0x03D8BF8C LDP X22, X21, [X31 + 0x40]
	0x03D8BF90 LDP X24, X23, [X31 + 0x30]
	0x03D8BF94 LDR X30, [X31 + 0x20]
	0x03D8BF98 LDP D9, D8, [X31 + 0x10]
	0x03D8BF9C LDP D11, D10, [X31], #0x60
	0x03D8BFA0 BR X3
	0x03D8BFA4 BL 0x1C16F20
	0x03D8BFA8 STR X30, [X31 - 0x20]!
	0x03D8BFAC STP X20, X19, [X31 + 0x10]
	0x03D8BFB0 ADRP X20, 0x65C000
	0x03D8BFB4 LDRB W8, [X20 + 0xE24]
	0x03D8BFB8 MOV X19, X0
	0x03D8BFBC STR W1, [X31 + 0xC]
	0x03D8BFC0 TBNZ X8, 0x0, 0x3D8BFD8
	0x03D8BFC4 ADRP X0, 0x3DC000
	0x03D8BFC8 LDR X0, [X0 + 0x888]
	0x03D8BFCC BL 0x1C16CF4
	0x03D8BFD0 MOVZ W8, 0x1
	0x03D8BFD4 STRB W8, [X20 + 0xE24]
	0x03D8BFD8 LDR X1, [X19 + 0x400]
	0x03D8BFDC ADD X0, X31, 0xC
	0x03D8BFE0 MOV X2, X31
	0x03D8BFE4 BL 0x3399C34
	0x03D8BFE8 LDP X20, X19, [X31 + 0x10]
	0x03D8BFEC LDR X30, [X31], #0x20
	0x03D8BFF0 RET
	0x03D8BFF4 SUB X31, X31, 0x40
	0x03D8BFF8 STP X30, X23, [X31 + 0x10]
	0x03D8BFFC STP X22, X21, [X31 + 0x20]
	0x03D8C000 STP X20, X19, [X31 + 0x30]
	0x03D8C004 ADRP X23, 0x65B000
	0x03D8C008 ADRP X22, 0x3DB000
	0x03D8C00C ADRP X21, 0x3D3000
	0x03D8C010 LDRB W8, [X23 + 0xE25]
	0x03D8C014 LDR X22, [X22 + 0x818]
	0x03D8C018 LDR X21, [X21 + 0x7A8]
	0x03D8C01C MOV X19, X1
	0x03D8C020 MOV X20, X0
	0x03D8C024 TBNZ X8, 0x0, 0x3D8C048
	0x03D8C028 ADRP X0, 0x3DB000
	0x03D8C02C LDR X0, [X0 + 0x818]
	0x03D8C030 BL 0x1C16CF4
	0x03D8C034 ADRP X0, 0x3D3000
	0x03D8C038 LDR X0, [X0 + 0x7A8]
	0x03D8C03C BL 0x1C16CF4
	0x03D8C040 MOVZ W8, 0x1
	0x03D8C044 STRB W8, [X23 + 0xE25]
	0x03D8C048 LDR X1, [X22]
	0x03D8C04C MOV X0, X20
	0x03D8C050 STR W31, [X31 + 0xC]
	0x03D8C054 BL 0x26C7544
	0x03D8C058 LDR X8, [X21]
	0x03D8C05C MOV X20, X0
	0x03D8C060 LDR W9, [X8 + 0xE0]
	0x03D8C064 CBNZ W9, 0x3D8C070
	0x03D8C068 MOV X0, X8
	0x03D8C06C BL 0x1C16DFC
	0x03D8C070 ADD X2, X31, 0xC
	0x03D8C074 MOV X0, X19
	0x03D8C078 MOV X1, X20
	0x03D8C07C MOV X3, X31
	0x03D8C080 BL 0x3C3D9F0
	0x03D8C084 LDR W0, [X31 + 0xC]
	0x03D8C088 LDP X20, X19, [X31 + 0x30]
	0x03D8C08C LDP X22, X21, [X31 + 0x20]
	0x03D8C090 LDP X30, X23, [X31 + 0x10]
	0x03D8C094 ADD X31, X31, 0x40
	0x03D8C098 RET
	0x03D8C09C STR X30, [X31 - 0x20]!
	0x03D8C0A0 STP X20, X19, [X31 + 0x10]
	0x03D8C0A4 ADRP X20, 0x65B000
	0x03D8C0A8 LDRB W8, [X20 + 0xE26]
	0x03D8C0AC MOV X19, X0
	0x03D8C0B0 TBNZ X8, 0x0, 0x3D8C0D4
	0x03D8C0B4 ADRP X0, 0x3DB000
	0x03D8C0B8 LDR X0, [X0 + 0x890]
	0x03D8C0BC BL 0x1C16CF4
	0x03D8C0C0 ADRP X0, 0x3DB000
	0x03D8C0C4 LDR X0, [X0 + 0x898]
	0x03D8C0C8 BL 0x1C16CF4
	0x03D8C0CC MOVZ W8, 0x1
	0x03D8C0D0 STRB W8, [X20 + 0xE26]
	0x03D8C0D4 LDR X0, [X19 + 0x448]
	0x03D8C0D8 CBZ X0, 0x3D8C110
	0x03D8C0DC ADRP X9, 0x3DB000
	0x03D8C0E0 LDR X9, [X9 + 0x898]
	0x03D8C0E4 LDR X8, [X0]
	0x03D8C0E8 LDR X1, [X9]
	0x03D8C0EC LDRB W10, [X8 + 0x130]
	0x03D8C0F0 LDRB W9, [X1 + 0x130]
	0x03D8C0F4 CMP W10, W9
	0x03D8C0F8 B.CC 0x3D8C11C
	0x03D8C0FC LDR X8, [X8 + 0xC8]
	0x03D8C100 ADD X8, X8, X9, 0x3, LSL
	0x03D8C104 LDUR X8, [X8 - 0x8]
	0x03D8C108 CMP X8, X1
	0x03D8C10C B.NE 0x3D8C11C
	0x03D8C110 LDP X20, X19, [X31 + 0x10]
	0x03D8C114 LDR X30, [X31], #0x20
	0x03D8C118 RET
	0x03D8C11C BL 0x1C171E0
	0x03D8C120 STR X30, [X31 - 0x30]!
	0x03D8C124 STP X22, X21, [X31 + 0x10]
	0x03D8C128 STP X20, X19, [X31 + 0x20]
	0x03D8C12C ADRP X21, 0x65B000
	0x03D8C130 STR X1, [X31 + 0x8]
	0x03D8C134 ADRP X22, 0x3DB000
	0x03D8C138 ADRP X20, 0x369000
	0x03D8C13C LDRB W8, [X21 + 0xE27]
	0x03D8C140 LDR X22, [X22 + 0x8A0]
	0x03D8C144 LDR X20, [X20 + 0xC48]
	0x03D8C148 MOV X19, X0
	0x03D8C14C TBNZ X8, 0x0, 0x3D8C170
	0x03D8C150 ADRP X0, 0x369000
	0x03D8C154 LDR X0, [X0 + 0xC48]
	0x03D8C158 BL 0x1C16CF4
	0x03D8C15C ADRP X0, 0x3DB000
	0x03D8C160 LDR X0, [X0 + 0x8A0]
	0x03D8C164 BL 0x1C16CF4
	0x03D8C168 MOVZ W8, 0x1
	0x03D8C16C STRB W8, [X21 + 0xE27]
	0x03D8C170 LDR X1, [X22]
	0x03D8C174 MOV X0, X19
	0x03D8C178 BL 0x26EA62C
	0x03D8C17C LDR X8, [X20]
	0x03D8C180 MOV X19, X0
	0x03D8C184 LDR W9, [X8 + 0xE0]
	0x03D8C188 CBNZ W9, 0x3D8C194
	0x03D8C18C MOV X0, X8
	0x03D8C190 BL 0x1C16DFC
	0x03D8C194 MOV X0, X31
	0x03D8C198 BL 0x3338524
	0x03D8C19C CBZ X0, 0x3D8C1D4
	0x03D8C1A0 LDR X8, [X0]
	0x03D8C1A4 LDR X9, [X8 + 0x218]
	0x03D8C1A8 LDR X1, [X8 + 0x220]
	0x03D8C1AC BLR X9
	0x03D8C1B0 MOV X2, X0
	0x03D8C1B4 ADD X0, X31, 0x8
	0x03D8C1B8 MOV X1, X19
	0x03D8C1BC MOV X3, X31
	0x03D8C1C0 BL 0x339AB50
	0x03D8C1C4 LDP X20, X19, [X31 + 0x20]
	0x03D8C1C8 LDP X22, X21, [X31 + 0x10]
	0x03D8C1CC LDR X30, [X31], #0x30
	0x03D8C1D0 RET
	0x03D8C1D4 BL 0x1C16F20
	0x03D8C1D8 SUB X31, X31, 0x30
	0x03D8C1DC STP X30, X21, [X31 + 0x10]
	0x03D8C1E0 STP X20, X19, [X31 + 0x20]
	0x03D8C1E4 ADRP X21, 0x65B000
	0x03D8C1E8 LDRB W8, [X21 + 0xE28]
	0x03D8C1EC MOV X20, X1
	0x03D8C1F0 MOV X19, X0
	0x03D8C1F4 TBNZ X8, 0x0, 0x3D8C230
	0x03D8C1F8 ADRP X0, 0x3DB000
	0x03D8C1FC LDR X0, [X0 + 0x8A8]
	0x03D8C200 BL 0x1C16CF4
	0x03D8C204 ADRP X0, 0x3DB000
	0x03D8C208 LDR X0, [X0 + 0x890]
	0x03D8C20C BL 0x1C16CF4
	0x03D8C210 ADRP X0, 0x3DB000
	0x03D8C214 LDR X0, [X0 + 0x8B0]
	0x03D8C218 BL 0x1C16CF4
	0x03D8C21C ADRP X0, 0x3D3000
	0x03D8C220 LDR X0, [X0 + 0x7A8]
	0x03D8C224 BL 0x1C16CF4
	0x03D8C228 MOVZ W8, 0x1
	0x03D8C22C STRB W8, [X21 + 0xE28]
	0x03D8C230 STR X31, [X31 + 0x8]
	0x03D8C234 LDR X0, [X19 + 0x448]
	0x03D8C238 CBZ X0, 0x3D8C2B0
	0x03D8C23C ADRP X8, 0x3DB000
	0x03D8C240 LDR X8, [X8 + 0x8B0]
	0x03D8C244 ADRP X21, 0x3D3000
	0x03D8C248 LDR X1, [X8]
	0x03D8C24C LDR X21, [X21 + 0x7A8]
	0x03D8C250 BL 0x26CAF78
	0x03D8C254 LDR X8, [X21]
	0x03D8C258 MOV X21, X0
	0x03D8C25C LDR W9, [X8 + 0xE0]
	0x03D8C260 CBNZ W9, 0x3D8C26C
	0x03D8C264 MOV X0, X8
	0x03D8C268 BL 0x1C16DFC
	0x03D8C26C ADD X2, X31, 0x8
	0x03D8C270 MOV X0, X20
	0x03D8C274 MOV X1, X21
	0x03D8C278 MOV X3, X31
	0x03D8C27C BL 0x3C3D850
	0x03D8C280 TBZ X0, 0x0, 0x3D8C28C
	0x03D8C284 LDR X0, [X31 + 0x8]
	0x03D8C288 B 0x3D8C2A0
	0x03D8C28C ADRP X8, 0x3DB000
	0x03D8C290 LDR X8, [X8 + 0x8A8]
	0x03D8C294 MOV X0, X19
	0x03D8C298 LDR X1, [X8]
	0x03D8C29C BL 0x28A5BD0
	0x03D8C2A0 LDP X20, X19, [X31 + 0x20]
	0x03D8C2A4 LDP X30, X21, [X31 + 0x10]
	0x03D8C2A8 ADD X31, X31, 0x30
	0x03D8C2AC RET
	0x03D8C2B0 BL 0x1C16F20
	0x03D8C2B4 MOVZ W2, 0x3E8
	0x03D8C2B8 MOV X1, X31
	0x03D8C2BC B 0x3D8C2C0
	0x03D8C2C0 STP X30, X25, [X31 - 0x40]!
	0x03D8C2C4 STP X24, X23, [X31 + 0x10]
	0x03D8C2C8 STP X22, X21, [X31 + 0x20]
	0x03D8C2CC STP X20, X19, [X31 + 0x30]
	0x03D8C2D0 ADRP X22, 0x65B000
	0x03D8C2D4 ADRP X25, 0x3DB000
	0x03D8C2D8 ADRP X24, 0x3DB000
	0x03D8C2DC ADRP X23, 0x3DB000
	0x03D8C2E0 LDRB W8, [X22 + 0xE29]
	0x03D8C2E4 LDR X25, [X25 + 0x898]
	0x03D8C2E8 LDR X24, [X24 + 0x8B8]
	0x03D8C2EC LDR X23, [X23 + 0x8C0]
	0x03D8C2F0 MOV W20, W2
	0x03D8C2F4 MOV X21, X1
	0x03D8C2F8 MOV X19, X0
	0x03D8C2FC TBNZ X8, 0x0, 0x3D8C350
	0x03D8C300 ADRP X0, 0x3DB000
	0x03D8C304 LDR X0, [X0 + 0x8C8]
	0x03D8C308 BL 0x1C16CF4
	0x03D8C30C ADRP X0, 0x3DB000
	0x03D8C310 LDR X0, [X0 + 0x8D0]
	0x03D8C314 BL 0x1C16CF4
	0x03D8C318 ADRP X0, 0x3DB000
	0x03D8C31C LDR X0, [X0 + 0x8D8]
	0x03D8C320 BL 0x1C16CF4
	0x03D8C324 ADRP X0, 0x3DB000
	0x03D8C328 LDR X0, [X0 + 0x8B8]
	0x03D8C32C BL 0x1C16CF4
	0x03D8C330 ADRP X0, 0x3DB000
	0x03D8C334 LDR X0, [X0 + 0x8C0]
	0x03D8C338 BL 0x1C16CF4
	0x03D8C33C ADRP X0, 0x3DB000
	0x03D8C340 LDR X0, [X0 + 0x898]
	0x03D8C344 BL 0x1C16CF4
	0x03D8C348 MOVZ W8, 0x1
	0x03D8C34C STRB W8, [X22 + 0xE29]
	0x03D8C350 LDR X0, [X25]
	0x03D8C354 BL 0x1C16F10
	0x03D8C358 MOV X22, X0
	0x03D8C35C BL 0x3D8C410
	0x03D8C360 LDR X4, [X24]
	0x03D8C364 MOV X0, X19
	0x03D8C368 MOV X1, X21
	0x03D8C36C MOV W2, W20
	0x03D8C370 MOV X3, X22
	0x03D8C374 BL 0x26EA654
	0x03D8C378 LDR X0, [X23]
	0x03D8C37C LDR W8, [X0 + 0xE0]
	0x03D8C380 CBNZ W8, 0x3D8C38C
	0x03D8C384 BL 0x1C16DFC
	0x03D8C388 LDR X0, [X23]
	0x03D8C38C LDR X8, [X0 + 0xB8]
	0x03D8C390 MOV X0, X19
	0x03D8C394 MOV X2, X31
	0x03D8C398 LDR X1, [X8]
	0x03D8C39C BL 0x3DF1C70
	0x03D8C3A0 LDR X0, [X19 + 0x400]
	0x03D8C3A4 CBZ X0, 0x3D8C40C
	0x03D8C3A8 LDR X8, [X23]
	0x03D8C3AC ADRP X20, 0x3DB000
	0x03D8C3B0 MOV X2, X31
	0x03D8C3B4 LDR X8, [X8 + 0xB8]
	0x03D8C3B8 LDR X1, [X8 + 0x8]
	0x03D8C3BC LDR X20, [X20 + 0x8D0]
	0x03D8C3C0 BL 0x3DF1C70
	0x03D8C3C4 LDR X1, [X20]
	0x03D8C3C8 MOV X0, X19
	0x03D8C3CC BL 0x28A5AB4
	0x03D8C3D0 CBZ X0, 0x3D8C40C
	0x03D8C3D4 LDR X8, [X23]
	0x03D8C3D8 ADRP X20, 0x3DB000
	0x03D8C3DC MOV X2, X31
	0x03D8C3E0 LDR X8, [X8 + 0xB8]
	0x03D8C3E4 LDR X1, [X8 + 0x10]
	0x03D8C3E8 LDR X20, [X20 + 0x8D8]
	0x03D8C3EC BL 0x3DF1C70
	0x03D8C3F0 LDR X1, [X20]
	0x03D8C3F4 MOV X0, X19
	0x03D8C3F8 LDP X20, X19, [X31 + 0x30]
	0x03D8C3FC LDP X22, X21, [X31 + 0x20]
	0x03D8C400 LDP X24, X23, [X31 + 0x10]
	0x03D8C404 LDP X30, X25, [X31], #0x40
	0x03D8C408 B 0x213CBF4
	0x03D8C40C BL 0x1C16F20
	0x03D8C410 STR X30, [X31 - 0x30]!
	0x03D8C414 STP X22, X21, [X31 + 0x10]
	0x03D8C418 STP X20, X19, [X31 + 0x20]
	0x03D8C41C ADRP X21, 0x65B000
	0x03D8C420 ADRP X22, 0x3DB000
	0x03D8C424 ADRP X20, 0x3D3000
	0x03D8C428 LDRB W8, [X21 + 0xE2E]
	0x03D8C42C LDR X22, [X22 + 0x8E0]
	0x03D8C430 LDR X20, [X20 + 0x7A8]
	0x03D8C434 MOV X19, X0
	0x03D8C438 TBNZ X8, 0x0, 0x3D8C468
	0x03D8C43C ADRP X0, 0x3DB000
	0x03D8C440 LDR X0, [X0 + 0x8E0]
	0x03D8C444 BL 0x1C16CF4
	0x03D8C448 ADRP X0, 0x3DB000
	0x03D8C44C LDR X0, [X0 + 0x8E8]
	0x03D8C450 BL 0x1C16CF4
	0x03D8C454 ADRP X0, 0x3D3000
	0x03D8C458 LDR X0, [X0 + 0x7A8]

ISIL:
	001 Move [X31-112], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x65D000
	015 Move W8, [X20+3605]
	016 Move V9, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x392000
	023 Move X0, [X0+288]
	024 Call 0x1C17CF4
	025 Move X0, 0x392000
	026 Move X0, [X0+296]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3605], W8
	030 Move X8, [X19+64]
	031 Compare X8, 0
	032 JumpIfEqual {442}
	033 Move X0, [X8+984]
	034 Compare X0, 0
	035 JumpIfEqual {442}
	036 Move W21, [X8+1040]
	037 Move X1, X31
	038 Call VisualElement.get_resolvedStyle, X0
	039 Compare X0, 0
	040 JumpIfEqual {442}
	041 Move X23, 0x392000
	042 Move X8, [X0]
	043 Move X23, [X23+288]
	044 Move X20, X0
	045 NotImplemented "Instruction LDRH not yet implemented."
	046 Move X1, [X23]
	047 Compare W21, 0
	048 JumpIfEqual {58}
	049 Compare W9, 0
	050 JumpIfEqual {57}
	051 Move X10, [X8+176]
	052 Add X10, X10, 8
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Subtract X9, X9, 1
	056 Add X10, X10, 16
	057 Move W2, 19
	058 Compare W9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move W2, 44
	067 Move X0, X20
	068 Call 0x1C5D788
	069 Move W9, [X10]
	070 Add W9, W9, 19
	071 Move W9, [X10]
	072 Add W9, W9, 44
	073 Add X8, X8, W9
	074 Add X0, X8, 312
	075 Move X8, [X0]
	076 Move X1, [X0+8]
	077 Move X0, X20
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Add S9, S0, S9
	080 Move V8, V0
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Move X0, X19
	083 Call TwoPaneSplitViewResizer.get_fixedPaneMinDimension, X0
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move X0, X19
	086 Call TwoPaneSplitViewResizer.get_fixedPaneMinDimension, X0
	087 Move V9, V0
	088 Move X0, [X19+64]
	089 Compare X0, 0
	090 JumpIfEqual {442}
	091 Move W21, [X0+1040]
	092 Move X1, X31
	093 Call VisualElement.get_resolvedStyle, X0
	094 Compare X0, 0
	095 JumpIfEqual {442}
	096 Move X8, [X0]
	097 Move X1, [X23]
	098 Move X20, X0
	099 NotImplemented "Instruction LDRH not yet implemented."
	100 Compare W21, 0
	101 JumpIfEqual {111}
	102 Compare W9, 0
	103 JumpIfEqual {110}
	104 Move X10, [X8+176]
	105 Add X10, X10, 8
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Subtract X9, X9, 1
	109 Add X10, X10, 16
	110 Move W2, 19
	111 Compare W9, 0
	112 JumpIfEqual {119}
	113 Move X10, [X8+176]
	114 Add X10, X10, 8
	115 NotImplemented "Instruction LDUR not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Subtract X9, X9, 1
	118 Add X10, X10, 16
	119 Move W2, 44
	120 Move X0, X20
	121 Call 0x1C5D788
	122 Move W9, [X10]
	123 Add W9, W9, 19
	124 Move W9, [X10]
	125 Add W9, W9, 44
	126 Add X8, X8, W9
	127 Add X0, X8, 312
	128 Move X8, [X0]
	129 Move X1, [X0+8]
	130 Move X0, X20
	131 NotImplemented "Instruction BLR not yet implemented."
	132 Move X0, X19
	133 Move V10, V0
	134 Call TwoPaneSplitViewResizer.get_flexedPaneMinDimension, X0
	135 Move X0, X19
	136 Move V11, V0
	137 Call TwoPaneSplitViewResizer.get_flexedPaneMargin, X0
	138 Move X0, X19
	139 Move V12, V0
	140 Call TwoPaneSplitViewResizer.get_fixedPaneMargins, X0
	141 Add S1, S11, S12
	142 Add S0, S1, S0
	143 Move X8, [X19+64]
	144 Subtract S0, S10, S0
	145 NotImplemented "Instruction FCMP not yet implemented."
	146 NotImplemented "Instruction FCCMP not yet implemented."
	147 NotImplemented "Instruction FCSEL not yet implemented."
	148 Compare X8, 0
	149 JumpIfEqual {442}
	150 Move X0, [X8+984]
	151 Compare X0, 0
	152 JumpIfEqual {442}
	153 Move W25, [X8+1040]
	154 Move X1, X31
	155 Call VisualElement.get_style, X0
	156 Move X20, X0
	157 Move V0, V8
	158 Move X0, X31
	159 Call StyleLength.op_Implicit, V0
	160 Compare X20, 0
	161 JumpIfEqual {442}
	162 Move X24, 0x391000
	163 Move X9, [X20]
	164 Move X24, [X24+296]
	165 Move X8, X1
	166 Move X21, X0
	167 NotImplemented "Instruction LDRH not yet implemented."
	168 Move X1, [X24]
	169 And X22, X8, 0
	170 Compare W25, 0
	171 JumpIfEqual {183}
	172 Compare W10, 0
	173 JumpIfEqual {180}
	174 Move X8, [X9+176]
	175 Add X8, X8, 8
	176 NotImplemented "Instruction LDUR not yet implemented."
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Subtract X10, X10, 1
	179 Add X8, X8, 16
	180 Move W2, 24
	181 Move X0, X20
	182 Call 0x1C5D788
	183 Compare W10, 0
	184 JumpIfEqual {191}
	185 Move X8, [X9+176]
	186 Add X8, X8, 8
	187 NotImplemented "Instruction LDUR not yet implemented."
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Subtract X10, X10, 1
	190 Add X8, X8, 16
	191 Move W2, 54
	192 Move X0, X20
	193 Call 0x1C5D788
	194 Move W8, [X8]
	195 Add W8, W8, 24
	196 Add X8, X9, W8
	197 Add X0, X8, 312
	198 Move X8, [X0]
	199 Move X3, [X0+8]
	200 Move X0, X20
	201 Move X1, X21
	202 Move X2, X22
	203 NotImplemented "Instruction BLR not yet implemented."
	204 Move X8, [X19+64]
	205 Compare X8, 0
	206 JumpIfEqual {442}
	207 Move W21, [X8+1044]
	208 Move X0, X19
	209 Move X1, X31
	210 Call Manipulator.get_target, X0
	211 Compare X0, 0
	212 JumpIfEqual {442}
	213 Move X1, X31
	214 Call VisualElement.get_style, X0
	215 Move X20, X0
	216 Compare W21, 0
	217 JumpIfEqual {240}
	218 Move X0, [X19+64]
	219 Compare X0, 0
	220 JumpIfEqual {442}
	221 Move X1, X31
	222 Call VisualElement.get_resolvedStyle, X0
	223 Compare X0, 0
	224 JumpIfEqual {442}
	225 Move X8, [X0]
	226 Move X1, [X23]
	227 Move X21, X0
	228 NotImplemented "Instruction LDRH not yet implemented."
	229 Compare X9, 0
	230 JumpIfEqual {237}
	231 Move X10, [X8+176]
	232 Add X10, X10, 8
	233 NotImplemented "Instruction LDUR not yet implemented."
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Subtract X9, X9, 1
	236 Add X10, X10, 16
	237 Move W2, 19
	238 Move X0, X21
	239 Call 0x1C5D788
	240 Move X0, X19
	241 Call TwoPaneSplitViewResizer.get_fixedPaneMargins, X0
	242 Add S0, S8, S0
	243 Move X0, X31
	244 Call StyleLength.op_Implicit, V0
	245 Compare X20, 0
	246 JumpIfEqual {442}
	247 Move X9, [X20]
	248 Move X8, X1
	249 Move X1, [X24]
	250 Move X21, X0
	251 NotImplemented "Instruction LDRH not yet implemented."
	252 And X22, X8, 0
	253 Compare X10, 0
	254 JumpIfEqual {292}
	255 Move X8, [X9+176]
	256 Add X8, X8, 8
	257 NotImplemented "Instruction LDUR not yet implemented."
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Subtract X10, X10, 1
	260 Add X8, X8, 16
	261 Move W9, [X10]
	262 Add W9, W9, 19
	263 Add X8, X8, W9
	264 Add X0, X8, 312
	265 Move X8, [X0]
	266 Move X1, [X0+8]
	267 Move X0, X21
	268 NotImplemented "Instruction BLR not yet implemented."
	269 Move X0, X19
	270 Move V9, V0
	271 Call TwoPaneSplitViewResizer.get_fixedPaneMargins, X0
	272 Subtract S1, S9, S8
	273 Subtract S0, S1, S0
	274 Move X0, X31
	275 Call StyleLength.op_Implicit, V0
	276 Compare X20, 0
	277 JumpIfEqual {442}
	278 Move X9, [X20]
	279 Move X8, X1
	280 Move X1, [X24]
	281 Move X21, X0
	282 NotImplemented "Instruction LDRH not yet implemented."
	283 And X22, X8, 0
	284 Compare X10, 0
	285 JumpIfEqual {292}
	286 Move X8, [X9+176]
	287 Add X8, X8, 8
	288 NotImplemented "Instruction LDUR not yet implemented."
	289 NotImplemented "Instruction CMP not yet implemented."
	290 Subtract X10, X10, 1
	291 Add X8, X8, 16
	292 Move W2, 45
	293 Move W8, [X8]
	294 Add W8, W8, 45
	295 Move W8, [X8]
	296 Add W8, W8, 54
	297 Add X8, X9, W8
	298 Add X0, X8, 312
	299 Move X8, [X0]
	300 Move X3, [X0+8]
	301 Move X0, X20
	302 Move X1, X21
	303 Move X2, X22
	304 NotImplemented "Instruction BLR not yet implemented."
	305 Move X8, [X19+64]
	306 Compare X8, 0
	307 JumpIfEqual {442}
	308 Move W21, [X8+1044]
	309 Move X0, X19
	310 Move X1, X31
	311 Call Manipulator.get_target, X0
	312 Compare X0, 0
	313 JumpIfEqual {442}
	314 Move X1, X31
	315 Call VisualElement.get_style, X0
	316 Move X20, X0
	317 Compare W21, 0
	318 JumpIfEqual {341}
	319 Move X0, [X19+64]
	320 Compare X0, 0
	321 JumpIfEqual {442}
	322 Move X1, X31
	323 Call VisualElement.get_resolvedStyle, X0
	324 Compare X0, 0
	325 JumpIfEqual {442}
	326 Move X8, [X0]
	327 Move X1, [X23]
	328 Move X21, X0
	329 NotImplemented "Instruction LDRH not yet implemented."
	330 Compare X9, 0
	331 JumpIfEqual {338}
	332 Move X10, [X8+176]
	333 Add X10, X10, 8
	334 NotImplemented "Instruction LDUR not yet implemented."
	335 NotImplemented "Instruction CMP not yet implemented."
	336 Subtract X9, X9, 1
	337 Add X10, X10, 16
	338 Move W2, 44
	339 Move X0, X21
	340 Call 0x1C5D788
	341 Move X0, X19
	342 Call TwoPaneSplitViewResizer.get_fixedPaneMargins, X0
	343 Add S0, S8, S0
	344 Move X0, X31
	345 Call StyleLength.op_Implicit, V0
	346 Compare X20, 0
	347 JumpIfEqual {442}
	348 Move X9, [X20]
	349 Move X8, X1
	350 Move X1, [X24]
	351 Move X21, X0
	352 NotImplemented "Instruction LDRH not yet implemented."
	353 And X22, X8, 0
	354 Compare X10, 0
	355 JumpIfEqual {393}
	356 Move X8, [X9+176]
	357 Add X8, X8, 8
	358 NotImplemented "Instruction LDUR not yet implemented."
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Subtract X10, X10, 1
	361 Add X8, X8, 16
	362 Move W9, [X10]
	363 Add W9, W9, 44
	364 Add X8, X8, W9
	365 Add X0, X8, 312
	366 Move X8, [X0]
	367 Move X1, [X0+8]
	368 Move X0, X21
	369 NotImplemented "Instruction BLR not yet implemented."
	370 Move X0, X19
	371 Move V9, V0
	372 Call TwoPaneSplitViewResizer.get_fixedPaneMargins, X0
	373 Subtract S1, S9, S8
	374 Subtract S0, S1, S0
	375 Move X0, X31
	376 Call StyleLength.op_Implicit, V0
	377 Compare X20, 0
	378 JumpIfEqual {442}
	379 Move X9, [X20]
	380 Move X8, X1
	381 Move X1, [X24]
	382 Move X21, X0
	383 NotImplemented "Instruction LDRH not yet implemented."
	384 And X22, X8, 0
	385 Compare X10, 0
	386 JumpIfEqual {393}
	387 Move X8, [X9+176]
	388 Add X8, X8, 8
	389 NotImplemented "Instruction LDUR not yet implemented."
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Subtract X10, X10, 1
	392 Add X8, X8, 16
	393 Move W2, 25
	394 Move X0, X20
	395 Call 0x1C5D788
	396 Move W8, [X8]
	397 Add W8, W8, 25
	398 Add X8, X9, W8
	399 Add X0, X8, 312
	400 Move X8, [X0]
	401 Move X3, [X0+8]
	402 Move X0, X20
	403 Move X1, X21
	404 Move X2, X22
	405 NotImplemented "Instruction BLR not yet implemented."
	406 Move X0, [X19+64]
	407 Compare X0, 0
	408 JumpIfEqual {442}
	409 Move V0, [X0+1000]
	410 NotImplemented "Instruction FCMP not yet implemented."
	411 Move [X0+1000], S8
	412 Move X20, [X31+96]
	413 Move X19, [X31+104]
	414 Move X22, [X31+80]
	415 Move X21, [X31+88]
	416 Move X24, [X31+64]
	417 Move X23, [X31+72]
	418 Move X30, [X31+48]
	419 Move X25, [X31+56]
	420 Move D9, [X31+32]
	421 Move D8, [X31+40]
	422 Move D11, [X31+16]
	423 Move D10, [X31+24]
	424 Move X1, X31
	425 Move V12, [X31+112]
	426 Call VisualElement.SaveViewData, X0
	427 Return 
	428 Move X20, [X31+96]
	429 Move X19, [X31+104]
	430 Move X22, [X31+80]
	431 Move X21, [X31+88]
	432 Move X24, [X31+64]
	433 Move X23, [X31+72]
	434 Move X30, [X31+48]
	435 Move X25, [X31+56]
	436 Move D9, [X31+32]
	437 Move D8, [X31+40]
	438 Move D11, [X31+16]
	439 Move D10, [X31+24]
	440 Move V12, [X31+112]
	441 Return 
	442 Call 0x1C17F20

Method: System.Void OnPointerDown(UnityEngine.UIElements.PointerDownEvent e)

Disassembly:
	0x03D8C45C BL 0x1C16CF4
	0x03D8C460 MOVZ W8, 0x1
	0x03D8C464 STRB W8, [X21 + 0xE2E]
	0x03D8C468 LDR X1, [X22]
	0x03D8C46C MOV X0, X19
	0x03D8C470 BL 0x26ED374
	0x03D8C474 LDR X0, [X20]
	0x03D8C478 LDR W8, [X0 + 0xE0]
	0x03D8C47C CBNZ W8, 0x3D8C488
	0x03D8C480 BL 0x1C16DFC
	0x03D8C484 LDR X0, [X20]
	0x03D8C488 LDR X8, [X0 + 0xB8]
	0x03D8C48C LDP X22, X21, [X31 + 0x10]
	0x03D8C490 LDR X8, [X8 + 0x20]
	0x03D8C494 STR X8, [X19 + 0x400]
	0x03D8C498 LDP X20, X19, [X31 + 0x20]
	0x03D8C49C LDR X30, [X31], #0x30
	0x03D8C4A0 RET
	0x03D8C4A4 STR X30, [X31 - 0x10]!
	0x03D8C4A8 MOV X0, X1
	0x03D8C4AC ADD X1, X31, 0x8
	0x03D8C4B0 MOV X2, X31
	0x03D8C4B4 STR X31, [X31 + 0x8]
	0x03D8C4B8 BL 0x339AEF8
	0x03D8C4BC AND W0, W0, 0x1
	0x03D8C4C0 LDR X30, [X31], #0x10
	0x03D8C4C4 RET
	0x03D8C4C8 STR D10, [X31 - 0x30]!
	0x03D8C4CC STP D9, D8, [X31 + 0x8]
	0x03D8C4D0 STR X30, [X31 + 0x18]
	0x03D8C4D4 STP X20, X19, [X31 + 0x20]
	0x03D8C4D8 MOV X19, X2
	0x03D8C4DC MOV W20, W1
	0x03D8C4E0 MOV V8.16B, V2.16B
	0x03D8C4E4 MOV V9.16B, V1.16B
	0x03D8C4E8 MOV V10.16B, V0.16B
	0x03D8C4EC BL 0x3D8C09C
	0x03D8C4F0 CBZ X0, 0x3D8C528
	0x03D8C4F4 LDR X8, [X0]
	0x03D8C4F8 MOV V1.16B, V9.16B
	0x03D8C4FC MOV V2.16B, V8.16B
	0x03D8C500 MOV W1, W20
	0x03D8C504 LDR X4, [X8 + 0x7C8]
	0x03D8C508 LDR X3, [X8 + 0x7D0]
	0x03D8C50C MOV X2, X19
	0x03D8C510 LDP X20, X19, [X31 + 0x20]
	0x03D8C514 LDR X30, [X31 + 0x18]
	0x03D8C518 LDP D9, D8, [X31 + 0x8]
	0x03D8C51C MOV V0.16B, V10.16B
	0x03D8C520 LDR V10, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x65C000
	006 Move W8, [X21+3606]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x393000
	014 Move X0, [X0+3312]
	015 Call 0x1C17CF4
	016 Move X0, 0x393000
	017 Move X0, [X0+3320]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3606], W8
	021 Move W8, [X20+60]
	022 Compare W8, 0
	023 JumpIfEqual {34}
	024 Compare X19, 0
	025 JumpIfEqual {69}
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call EventBase.StopImmediatePropagation, X0
	033 Return 
	034 Move X0, X20
	035 Move X1, X19
	036 Move X2, X31
	037 Call PointerManipulator.CanStartManipulation, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {64}
	042 Compare X19, 0
	043 JumpIfEqual {69}
	044 Move V0, [X19+192]
	045 Move V1, [X19+200]
	046 Move W8, 1
	047 Move X0, X20
	048 Move X1, X31
	049 Move [X20+48], D0
	050 Move [X20+56], S1
	051 Move [X20+60], W8
	052 Call Manipulator.get_target, X0
	053 Move W1, [X19+156]
	054 Move X2, X31
	055 Call PointerCaptureHelper.CapturePointer, X0, X1
	056 Move X0, X19
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X1, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call EventBase.StopPropagation, X0
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Return 
	069 Call 0x1C17F20

Method: System.Void OnPointerMove(UnityEngine.UIElements.PointerMoveEvent e)

Disassembly:
	0x03D8C524 BR X4
	0x03D8C528 BL 0x1C16F20
	0x03D8C52C STP X30, X23, [X31 - 0x30]!
	0x03D8C530 STP X22, X21, [X31 + 0x10]
	0x03D8C534 STP X20, X19, [X31 + 0x20]
	0x03D8C538 ADRP X23, 0x65B000
	0x03D8C53C ADRP X22, 0x3DB000
	0x03D8C540 ADRP X19, 0x3DB000
	0x03D8C544 ADRP X21, 0x390000
	0x03D8C548 ADRP X20, 0x390000
	0x03D8C54C LDRB W8, [X23 + 0xE2A]
	0x03D8C550 LDR X22, [X22 + 0x8F0]
	0x03D8C554 LDR X19, [X19 + 0x8C0]
	0x03D8C558 LDR X21, [X21 + 0xEB8]
	0x03D8C55C LDR X20, [X20 + 0xEC0]
	0x03D8C560 TBNZ X8, 0x0, 0x3D8C59C
	0x03D8C564 ADRP X0, 0x3DB000
	0x03D8C568 LDR X0, [X0 + 0x8C0]
	0x03D8C56C BL 0x1C16CF4
	0x03D8C570 ADRP X0, 0x3DB000
	0x03D8C574 LDR X0, [X0 + 0x8F0]
	0x03D8C578 BL 0x1C16CF4
	0x03D8C57C ADRP X0, 0x390000
	0x03D8C580 LDR X0, [X0 + 0xEB8]
	0x03D8C584 BL 0x1C16CF4
	0x03D8C588 ADRP X0, 0x390000
	0x03D8C58C LDR X0, [X0 + 0xEC0]
	0x03D8C590 BL 0x1C16CF4
	0x03D8C594 MOVZ W8, 0x1
	0x03D8C598 STRB W8, [X23 + 0xE2A]
	0x03D8C59C LDR X8, [X19]
	0x03D8C5A0 LDR X9, [X22]
	0x03D8C5A4 MOV X2, X31
	0x03D8C5A8 LDR X8, [X8 + 0xB8]
	0x03D8C5AC STR X9, [X8]
	0x03D8C5B0 LDR X8, [X19]
	0x03D8C5B4 LDR X1, [X21]
	0x03D8C5B8 LDR X8, [X8 + 0xB8]
	0x03D8C5BC LDR X0, [X8]
	0x03D8C5C0 BL 0x321B938
	0x03D8C5C4 LDR X8, [X19]
	0x03D8C5C8 MOV X2, X31
	0x03D8C5CC LDR X8, [X8 + 0xB8]
	0x03D8C5D0 STR X0, [X8 + 0x8]
	0x03D8C5D4 LDR X0, [X8]
	0x03D8C5D8 LDR X1, [X20]
	0x03D8C5DC BL 0x321B938
	0x03D8C5E0 LDR X8, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x65C000
	006 Move W8, [X21+3607]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x3D7000
	014 Move X0, [X0+2648]
	015 Call 0x1C17CF4
	016 Move X0, 0x393000
	017 Move X0, [X0+528]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3607], W8
	021 Move W8, [X20+60]
	022 Compare W8, 0
	023 JumpIfEqual {61}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Manipulator.get_target, X0
	027 Compare X19, 0
	028 JumpIfEqual {66}
	029 Move W1, [X19+156]
	030 Move X2, X31
	031 Call PointerCaptureHelper.HasPointerCapture, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {61}
	036 Move X8, [X20+64]
	037 Compare X8, 0
	038 JumpIfEqual {66}
	039 Move S1, [X19+192]
	040 Move S0, [X19+196]
	041 Move S3, [X20+48]
	042 Move S2, [X20+52]
	043 Move W8, [X8+1040]
	044 Move V4, [X20+72]
	045 Move X0, X20
	046 Subtract S0, S0, S2
	047 Subtract S1, S1, S3
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction FCSEL not yet implemented."
	050 NotImplemented "Instruction SCVTF not yet implemented."
	051 Multiply S0, S0, S1
	052 Call TwoPaneSplitViewResizer.ApplyDelta, X0, V0
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X1, X31
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Call EventBase.StopPropagation, X0
	060 Return 
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Return 
	066 Call 0x1C17F20

Method: System.Void OnPointerUp(UnityEngine.UIElements.PointerUpEvent e)

Disassembly:
	0x03D8C5E4 LDP X20, X19, [X31 + 0x20]
	0x03D8C5E8 LDP X22, X21, [X31 + 0x10]
	0x03D8C5EC LDR X8, [X8 + 0xB8]
	0x03D8C5F0 STR X0, [X8 + 0x10]
	0x03D8C5F4 LDP X30, X23, [X31], #0x30
	0x03D8C5F8 RET
	0x03D8C5FC STP X30, X21, [X31 - 0x20]!
	0x03D8C600 STP X20, X19, [X31 + 0x10]
	0x03D8C604 ADRP X20, 0x65B000
	0x03D8C608 ADRP X21, 0x3DB000
	0x03D8C60C LDRB W8, [X20 + 0xE2B]
	0x03D8C610 LDR X21, [X21 + 0x8F8]
	0x03D8C614 MOV X19, X0
	0x03D8C618 TBNZ X8, 0x0, 0x3D8C630
	0x03D8C61C ADRP X0, 0x3DB000
	0x03D8C620 LDR X0, [X0 + 0x8F8]
	0x03D8C624 BL 0x1C16CF4
	0x03D8C628 MOVZ W8, 0x1
	0x03D8C62C STRB W8, [X20 + 0xE2B]
	0x03D8C630 LDR X1, [X21]
	0x03D8C634 MOV X0, X19
	0x03D8C638 LDP X20, X19, [X31 + 0x10]
	0x03D8C63C LDP X30, X21, [X31], #0x20
	0x03D8C640 B 0x2736468
	0x03D8C644 STP X30, X21, [X31 - 0x20]!
	0x03D8C648 STP X20, X19, [X31 + 0x10]
	0x03D8C64C ADRP X20, 0x65B000
	0x03D8C650 ADRP X21, 0x3DB000
	0x03D8C654 LDRB W8, [X20 + 0xE2C]
	0x03D8C658 LDR X21, [X21 + 0x900]
	0x03D8C65C MOV X19, X0
	0x03D8C660 TBNZ X8, 0x0, 0x3D8C678
	0x03D8C664 ADRP X0, 0x3DB000
	0x03D8C668 LDR X0, [X0 + 0x900]
	0x03D8C66C BL 0x1C16CF4
	0x03D8C670 MOVZ W8, 0x1
	0x03D8C674 STRB W8, [X20 + 0xE2C]
	0x03D8C678 LDR X1, [X21]
	0x03D8C67C MOV X0, X19
	0x03D8C680 LDP X20, X19, [X31 + 0x10]
	0x03D8C684 LDP X30, X21, [X31], #0x20
	0x03D8C688 B 0x26E6CF0
	0x03D8C68C STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x65C000
	006 Move W8, [X21+3608]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x393000
	014 Move X0, [X0+3360]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3608], W8
	018 Move W8, [X20+60]
	019 Compare W8, 0
	020 JumpIfEqual {56}
	021 Move X0, X20
	022 Move X1, X31
	023 Call Manipulator.get_target, X0
	024 Compare X19, 0
	025 JumpIfEqual {61}
	026 Move W1, [X19+156]
	027 Move X2, X31
	028 Call PointerCaptureHelper.HasPointerCapture, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {56}
	033 Move X0, X20
	034 Move X1, X19
	035 Move X2, X31
	036 Call PointerManipulator.CanStopManipulation, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {56}
	041 Move X0, X20
	042 Move X1, X31
	043 Move [X20+60], W31
	044 Call Manipulator.get_target, X0
	045 Move W1, [X19+156]
	046 Move X2, X31
	047 Call PointerCaptureHelper.ReleasePointer, X0, X1
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Call EventBase.StopPropagation, X0
	055 Return 
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return 
	061 Call 0x1C17F20

