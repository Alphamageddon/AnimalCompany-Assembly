Type: UnityEngine.UIElements.UnsignedIntegerField

Method: UnityEngine.UIElements.UnsignedIntegerField/UnsignedIntegerInput get_integerInput()

Disassembly:
	0x03D8C690 STP X20, X19, [X31 + 0x10]
	0x03D8C694 ADRP X20, 0x65B000
	0x03D8C698 LDRB W8, [X20 + 0xE2D]
	0x03D8C69C MOV X19, X0
	0x03D8C6A0 TBNZ X8, 0x0, 0x3D8C6B8
	0x03D8C6A4 ADRP X0, 0x3DB000
	0x03D8C6A8 LDR X0, [X0 + 0x8C0]
	0x03D8C6AC BL 0x1C16CF4
	0x03D8C6B0 MOVZ W8, 0x1
	0x03D8C6B4 STRB W8, [X20 + 0xE2D]
	0x03D8C6B8 MOV X0, X19
	0x03D8C6BC MOV X1, X31
	0x03D8C6C0 BL 0x3DEBF58
	0x03D8C6C4 CBZ X0, 0x3D8C6FC
	0x03D8C6C8 ADRP X9, 0x3DB000
	0x03D8C6CC LDR X9, [X9 + 0x8C0]
	0x03D8C6D0 LDR X8, [X0]
	0x03D8C6D4 LDR X1, [X9]
	0x03D8C6D8 LDRB W10, [X8 + 0x130]
	0x03D8C6DC LDRB W9, [X1 + 0x130]
	0x03D8C6E0 CMP W10, W9
	0x03D8C6E4 B.CC 0x3D8C708
	0x03D8C6E8 LDR X8, [X8 + 0xC8]
	0x03D8C6EC ADD X8, X8, X9, 0x3, LSL
	0x03D8C6F0 LDUR X8, [X8 - 0x8]
	0x03D8C6F4 CMP X8, X1
	0x03D8C6F8 B.NE 0x3D8C708
	0x03D8C6FC LDP X20, X19, [X31 + 0x10]
	0x03D8C700 LDR X30, [X31], #0x20
	0x03D8C704 RET
	0x03D8C708 BL 0x1C171E0
	0x03D8C70C STR X30, [X31 - 0x20]!
	0x03D8C710 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x65C000
	005 Move W8, [X20+3609]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x3DC000
	012 Move X0, [X0+2040]
	013 Call 0x1C17CF4
	014 Move X0, 0x3DC000
	015 Move X0, [X0+2048]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3609], W8
	019 Move X0, [X19+1096]
	020 Compare X0, 0
	021 JumpIfEqual {33}
	022 Move X9, 0x3DC000
	023 Move X9, [X9+2048]
	024 Move X8, [X0]
	025 Move X1, [X9]
	026 Move W10, [X8+304]
	027 Move W9, [X1+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X8+200]
	030 Add X8, X8, X9
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C181E0

Method: System.String ValueToString(System.UInt32 v)

Disassembly:
	0x03D8C714 ADRP X20, 0x65B000
	0x03D8C718 ADRP X19, 0x3D3000
	0x03D8C71C LDRB W8, [X20 + 0xE2F]
	0x03D8C720 LDR X19, [X19 + 0x7A8]
	0x03D8C724 TBNZ X8, 0x0, 0x3D8C73C
	0x03D8C728 ADRP X0, 0x3D3000
	0x03D8C72C LDR X0, [X0 + 0x7A8]
	0x03D8C730 BL 0x1C16CF4
	0x03D8C734 MOVZ W8, 0x1
	0x03D8C738 STRB W8, [X20 + 0xE2F]
	0x03D8C73C LDR X0, [X19]
	0x03D8C740 LDR W8, [X0 + 0xE0]
	0x03D8C744 CBNZ W8, 0x3D8C750
	0x03D8C748 BL 0x1C16DFC
	0x03D8C74C LDR X0, [X19]
	0x03D8C750 LDR X8, [X0 + 0xB8]
	0x03D8C754 LDP X20, X19, [X31 + 0x10]
	0x03D8C758 LDR X0, [X8 + 0x8]
	0x03D8C75C LDR X30, [X31], #0x20
	0x03D8C760 RET
	0x03D8C764 STP D11, D10, [X31 - 0x60]!
	0x03D8C768 STP D9, D8, [X31 + 0x10]
	0x03D8C76C STR X30, [X31 + 0x20]
	0x03D8C770 STP X24, X23, [X31 + 0x30]
	0x03D8C774 STP X22, X21, [X31 + 0x40]
	0x03D8C778 STP X20, X19, [X31 + 0x50]
	0x03D8C77C ADRP X24, 0x65B000
	0x03D8C780 ADRP X23, 0x3DB000
	0x03D8C784 ADRP X22, 0x367000
	0x03D8C788 LDRB W8, [X24 + 0xE30]
	0x03D8C78C LDR X23, [X23 + 0x908]
	0x03D8C790 LDR X22, [X22 + 0x5A8]
	0x03D8C794 MOV X21, X2
	0x03D8C798 MOV W20, W1
	0x03D8C79C MOV V8.16B, V1.16B
	0x03D8C7A0 MOV V9.16B, V0.16B
	0x03D8C7A4 MOV X19, X0
	0x03D8C7A8 TBNZ X8, 0x0, 0x3D8C7E4
	0x03D8C7AC ADRP X0, 0x367000
	0x03D8C7B0 LDR X0, [X0 + 0x5A8]
	0x03D8C7B4 BL 0x1C16CF4
	0x03D8C7B8 ADRP X0, 0x3DB000
	0x03D8C7BC LDR X0, [X0 + 0x910]
	0x03D8C7C0 BL 0x1C16CF4
	0x03D8C7C4 ADRP X0, 0x3DB000
	0x03D8C7C8 LDR X0, [X0 + 0x908]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x65C000
	007 Move [X31+12], W1
	008 Move X22, 0x3DC000
	009 Move X20, 0x36A000
	010 Move W8, [X21+3610]
	011 Move X22, [X22+2056]
	012 Move X20, [X20+3144]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x36A000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x3DC000
	022 Move X0, [X0+2056]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3610], W8
	026 Move X1, [X22]
	027 Move X0, X19
	028 Call TextValueField`1<UInt32>.get_formatString, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Compare X0, 0
	039 JumpIfEqual {55}
	040 Move X8, [X0]
	041 Move X9, [X8+536]
	042 Move X1, [X8+544]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X2, X0
	045 Add X0, X31, 12
	046 Move X1, X19
	047 Move X3, X31
	048 Call UInt32.ToString, X0, X1, X2
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0
	055 Call 0x1C17F20

Method: System.UInt32 StringToValue(System.String str)

Disassembly:
	0x03D8C7CC BL 0x1C16CF4
	0x03D8C7D0 ADRP X0, 0x3DB000
	0x03D8C7D4 LDR X0, [X0 + 0x918]
	0x03D8C7D8 BL 0x1C16CF4
	0x03D8C7DC MOVZ W8, 0x1
	0x03D8C7E0 STRB W8, [X24 + 0xE30]
	0x03D8C7E4 MOV X0, X21
	0x03D8C7E8 MOV X1, X31
	0x03D8C7EC BL 0x3C2F8D4
	0x03D8C7F0 CMP W20, 0x0
	0x03D8C7F4 UCVTF D11, X0
	0x03D8C7F8 CSET W0, EQ
	0x03D8C7FC CMP W20, 0x2
	0x03D8C800 CSET W1, EQ
	0x03D8C804 MOV X2, X31
	0x03D8C808 BL 0x3C2F590
	0x03D8C80C LDR X1, [X23]
	0x03D8C810 MOV X0, X19
	0x03D8C814 MOV V10.16B, V0.16B
	0x03D8C818 BL 0x26CB4FC
	0x03D8C81C LDR X8, [X19]
	0x03D8C820 MOV X1, X0
	0x03D8C824 MOV X0, X19
	0x03D8C828 LDR X9, [X8 + 0x778]
	0x03D8C82C LDR X2, [X8 + 0x780]
	0x03D8C830 BLR X9
	0x03D8C834 MOV X20, X0
	0x03D8C838 MOV V0.16B, V9.16B
	0x03D8C83C MOV V1.16B, V8.16B
	0x03D8C840 MOV V2.16B, V10.16B
	0x03D8C844 MOV X0, X31
	0x03D8C848 BL 0x3C2F5B4
	0x03D8C84C LDR X0, [X22]
	0x03D8C850 MOV V8.16B, V0.16B
	0x03D8C854 LDR W8, [X0 + 0xE0]
	0x03D8C858 CBNZ W8, 0x3D8C860
	0x03D8C85C BL 0x1C16DFC
	0x03D8C860 FCVT S0, S8
	0x03D8C864 FMUL D8, D11, D0
	0x03D8C868 ADD X0, X31, 0x28
	0x03D8C86C MOV V0.16B, V8.16B
	0x03D8C870 BL 0x3EB1C00
	0x03D8C874 FCMP D8, 0x0
	0x03D8C878 B.GE 0x3D8C894
	0x03D8C87C FMOV D1, -0.5
	0x03D8C880 FCMP D0, D1
	0x03D8C884 B.NE 0x3D8C8BC
	0x03D8C888 LDR V0, [X31 + 0x28]
	0x03D8C88C FMOV D1, -1
	0x03D8C890 B 0x3D8C8A8
	0x03D8C894 FMOV D1, 0.5
	0x03D8C898 FCMP D0, D1
	0x03D8C89C B.NE 0x3D8C8C8
	0x03D8C8A0 LDR V0, [X31 + 0x28]
	0x03D8C8A4 FMOV D1, 1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x65C000
	007 Move W8, [X21+3611]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x3DC000
	015 Move X0, [X0+2064]
	016 Call 0x1C17CF4
	017 Move X0, 0x3DC000
	018 Move X0, [X0+2040]
	019 Call 0x1C17CF4
	020 Move X0, 0x3DC000
	021 Move X0, [X0+2072]
	022 Call 0x1C17CF4
	023 Move X0, 0x3D4000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3611], W8
	028 Move [X31+12], W31
	029 Move X0, [X19+1096]
	030 Compare X0, 0
	031 JumpIfEqual {66}
	032 Move X8, 0x3DC000
	033 Move X8, [X8+2072]
	034 Move X21, 0x3D4000
	035 Move X1, [X8]
	036 Move X21, [X21+1960]
	037 Call TextInputBase<UInt32>.get_originalText, X0
	038 Move X8, [X21]
	039 Move X21, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Add X2, X31, 12
	046 Move X0, X20
	047 Move X1, X21
	048 Move X3, X31
	049 Call UINumericFieldsUtils.TryConvertStringToUInt, X0, X1, X2
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Move W0, [X31+12]
	055 Move X8, 0x3DC000
	056 Move X8, [X8+2064]
	057 Move X0, X19
	058 Move X1, [X8]
	059 Call BaseField`1<UInt32>.get_rawValue, X0
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return X0
	066 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03D8C8A8 FCVTZS X8, D0
	0x03D8C8AC FADD D1, D0, D1
	0x03D8C8B0 ANDS X31, X8, 0x1

ISIL:
	001 Move W2, 1000
	002 Move X1, X31

Method: System.Void .ctor(System.String label, System.Int32 maxLength = 1000)

Disassembly:
	0x03D8C8B4 FCSEL D0, D0, D1, EQ
	0x03D8C8B8 B 0x3D8C8D0
	0x03D8C8BC FADD D0, D8, D1
	0x03D8C8C0 FRINTP D0, D0
	0x03D8C8C4 B 0x3D8C8D0
	0x03D8C8C8 FADD D0, D8, D1
	0x03D8C8CC FRINTM D0, D0
	0x03D8C8D0 MOVZ X8, 0x7FF00000
	0x03D8C8D4 FMOV D1, X8
	0x03D8C8D8 FCVTZS X9, D0
	0x03D8C8DC FCMP D0, D1
	0x03D8C8E0 MOVZ X8, 0x80000000
	0x03D8C8E4 CSEL X1, X8, X9, EQ
	0x03D8C8E8 MOV X2, X20
	0x03D8C8EC BL 0x3D8C998
	0x03D8C8F0 MOV X20, X0
	0x03D8C8F4 MOV X0, X19
	0x03D8C8F8 BL 0x3D8C68C
	0x03D8C8FC CBZ X0, 0x3D8C994
	0x03D8C900 ADRP X8, 0x3DB000
	0x03D8C904 LDR X8, [X8 + 0x910]
	0x03D8C908 LDR X1, [X8]
	0x03D8C90C BL 0x26DDDB0
	0x03D8C910 TBZ X0, 0x0, 0x3D8C95C
	0x03D8C914 LDR X8, [X19]
	0x03D8C918 MOV X0, X19
	0x03D8C91C MOV X1, X20
	0x03D8C920 LDR X9, [X8 + 0x7D8]
	0x03D8C924 LDR X2, [X8 + 0x7E0]
	0x03D8C928 BLR X9
	0x03D8C92C ADRP X8, 0x3DB000
	0x03D8C930 LDR X8, [X8 + 0x918]
	0x03D8C934 MOV X1, X0
	0x03D8C938 MOV X0, X19
	0x03D8C93C LDP X20, X19, [X31 + 0x50]
	0x03D8C940 LDR X2, [X8]
	0x03D8C944 LDP X22, X21, [X31 + 0x40]
	0x03D8C948 LDP X24, X23, [X31 + 0x30]
	0x03D8C94C LDR X30, [X31 + 0x20]
	0x03D8C950 LDP D9, D8, [X31 + 0x10]
	0x03D8C954 LDP D11, D10, [X31], #0x60
	0x03D8C958 B 0x26CB520
	0x03D8C95C MOV X0, X19
	0x03D8C960 BL 0x3D8C68C
	0x03D8C964 CBZ X0, 0x3D8C994
	0x03D8C968 LDR X8, [X0]
	0x03D8C96C MOV X1, X20
	0x03D8C970 LDP X20, X19, [X31 + 0x50]
	0x03D8C974 LDP X22, X21, [X31 + 0x40]
	0x03D8C978 LDR X3, [X8 + 0x7F8]
	0x03D8C97C LDR X2, [X8 + 0x800]
	0x03D8C980 LDP X24, X23, [X31 + 0x30]
	0x03D8C984 LDR X30, [X31 + 0x20]
	0x03D8C988 LDP D9, D8, [X31 + 0x10]
	0x03D8C98C LDP D11, D10, [X31], #0x60
	0x03D8C990 BR X3
	0x03D8C994 BL 0x1C16F20
	0x03D8C998 STR X30, [X31 - 0x30]!
	0x03D8C99C STP X22, X21, [X31 + 0x10]
	0x03D8C9A0 STP X20, X19, [X31 + 0x20]
	0x03D8C9A4 ADRP X21, 0x65B000
	0x03D8C9A8 ADRP X22, 0x367000
	0x03D8C9AC LDRB W8, [X21 + 0xE31]
	0x03D8C9B0 LDR X22, [X22 + 0x5A8]
	0x03D8C9B4 MOV X19, X2
	0x03D8C9B8 MOV X20, X1
	0x03D8C9BC TBNZ X8, 0x0, 0x3D8C9D4
	0x03D8C9C0 ADRP X0, 0x367000
	0x03D8C9C4 LDR X0, [X0 + 0x5A8]
	0x03D8C9C8 BL 0x1C16CF4
	0x03D8C9CC MOVZ W8, 0x1
	0x03D8C9D0 STRB W8, [X21 + 0xE31]
	0x03D8C9D4 LDR X0, [X22]
	0x03D8C9D8 LDR W8, [X0 + 0xE0]
	0x03D8C9DC CBNZ W8, 0x3D8C9E4
	0x03D8C9E0 BL 0x1C16DFC
	0x03D8C9E4 CMP X20, 0x0
	0x03D8C9E8 CSNEG X8, X20, X20, PL
	0x03D8C9EC CMP X20, 0x1
	0x03D8C9F0 B.LT 0x3D8CA00
	0x03D8C9F4 ADDS X8, X19, X8
	0x03D8C9F8 CSINV X0, X8, X31, CC
	0x03D8C9FC B 0x3D8CA08
	0x03D8CA00 SUBS X8, X19, X8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x65C000
	010 Move X25, 0x3DC000
	011 Move X24, 0x3DC000
	012 Move X23, 0x3DC000
	013 Move W8, [X22+3612]
	014 Move X25, [X25+2048]
	015 Move X24, [X24+2080]
	016 Move X23, [X23+2088]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x3DC000
	025 Move X0, [X0+2096]
	026 Call 0x1C17CF4
	027 Move X0, 0x3DC000
	028 Move X0, [X0+2104]
	029 Call 0x1C17CF4
	030 Move X0, 0x3DC000
	031 Move X0, [X0+2112]
	032 Call 0x1C17CF4
	033 Move X0, 0x3DC000
	034 Move X0, [X0+2080]
	035 Call 0x1C17CF4
	036 Move X0, 0x3DC000
	037 Move X0, [X0+2088]
	038 Call 0x1C17CF4
	039 Move X0, 0x3DC000
	040 Move X0, [X0+2048]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+3612], W8
	044 Move X0, [X25]
	045 Call 0x1C17F10
	046 Move X22, X0
	047 Call UnsignedIntegerInput..ctor, X0
	048 Move X4, [X24]
	049 Move X0, X19
	050 Move X1, X21
	051 Move W2, W20
	052 Move X3, X22
	053 Call TextValueField`1<UInt32>..ctor, X0, X1, X2, X3
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X0+184]
	061 Move X0, X19
	062 Move X2, X31
	063 Move X1, [X8]
	064 Call VisualElement.AddToClassList, X0, X1
	065 Move X0, [X19+1024]
	066 Compare X0, 0
	067 JumpIfEqual {99}
	068 Move X8, [X23]
	069 Move X20, 0x3DC000
	070 Move X2, X31
	071 Move X8, [X8+184]
	072 Move X1, [X8+8]
	073 Move X20, [X20+2104]
	074 Call VisualElement.AddToClassList, X0, X1
	075 Move X1, [X20]
	076 Move X0, X19
	077 Call BaseField`1<UInt32>.get_visualInput, X0
	078 Compare X0, 0
	079 JumpIfEqual {99}
	080 Move X8, [X23]
	081 Move X20, 0x3DC000
	082 Move X2, X31
	083 Move X8, [X8+184]
	084 Move X1, [X8+16]
	085 Move X20, [X20+2112]
	086 Call VisualElement.AddToClassList, X0, X1
	087 Move X1, [X20]
	088 Move X0, X19
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Move X25, [X31+72]
	097 Call TextValueField`1<UInt32>.AddLabelDragger, X0
	098 Return 
	099 Call 0x1C17F20

Method: System.Boolean CanTryParse(System.String textString)

Disassembly:
	0x03D8CA98 ADRP X0, 0x3DB000
	0x03D8CA9C LDR X0, [X0 + 0x8B0]
	0x03D8CAA0 BL 0x1C16CF4
	0x03D8CAA4 ADRP X0, 0x3D3000
	0x03D8CAA8 LDR X0, [X0 + 0x7A8]
	0x03D8CAAC BL 0x1C16CF4
	0x03D8CAB0 MOVZ W8, 0x1
	0x03D8CAB4 STRB W8, [X23 + 0xE33]
	0x03D8CAB8 LDR X1, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X1
	003 Add X1, X31, 12
	004 Move X2, X31
	005 Move [X31+12], W31
	006 Call UInt32.TryParse, X0, X1
	007 And W0, W0, 1
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.UInt32 startValue)

Disassembly:
	0x03D8CABC MOV X0, X20
	0x03D8CAC0 STR X31, [X31 + 0x8]
	0x03D8CAC4 BL 0x26CAF78
	0x03D8CAC8 LDR X8, [X21]
	0x03D8CACC MOV X20, X0
	0x03D8CAD0 LDR W9, [X8 + 0xE0]
	0x03D8CAD4 CBNZ W9, 0x3D8CAE0
	0x03D8CAD8 MOV X0, X8
	0x03D8CADC BL 0x1C16DFC
	0x03D8CAE0 ADD X2, X31, 0x8
	0x03D8CAE4 MOV X0, X19
	0x03D8CAE8 MOV X1, X20
	0x03D8CAEC MOV X3, X31
	0x03D8CAF0 BL 0x3C3D850
	0x03D8CAF4 LDR X0, [X31 + 0x8]
	0x03D8CAF8 LDP X20, X19, [X31 + 0x30]
	0x03D8CAFC LDP X22, X21, [X31 + 0x20]
	0x03D8CB00 LDP X30, X23, [X31 + 0x10]
	0x03D8CB04 ADD X31, X31, 0x40
	0x03D8CB08 RET
	0x03D8CB0C LDRB W9, [X0, W1, UXTW]
	0x03D8CB10 MOV W8, W1
	0x03D8CB14 TBZ X2, 0x0, 0x3D8CB28
	0x03D8CB18 CMP W9, 0xFF
	0x03D8CB1C B.EQ 0x3D8CB34

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W19, W2
	008 Move W20, W1
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Call UnsignedIntegerField.get_integerInput, X0
	013 Compare X0, 0
	014 JumpIfEqual {30}
	015 Move X8, [X0]
	016 Move V1, V9
	017 Move V2, V8
	018 Move W1, W20
	019 Move X4, [X8+1992]
	020 Move X3, [X8+2000]
	021 Move W2, W19
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+24]
	025 Move D9, [X31+8]
	026 Move D8, [X31+16]
	027 Move V0, V10
	028 Move V10, [X31+48]
	029 CallNoReturn X4
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03D8CB20 ADD W9, W9, 0x1
	0x03D8CB24 B 0x3D8CB30
	0x03D8CB28 CBZ W9, 0x3D8CB34
	0x03D8CB2C SUB W9, W9, 0x1
	0x03D8CB30 STRB W9, [X0, X8, LSL]
	0x03D8CB34 RET
	0x03D8CB38 AND W0, W1, 0x3FFF
	0x03D8CB3C RET
	0x03D8CB40 UBFM W0, W1, 0xE, 0x1B
	0x03D8CB44 RET
	0x03D8CB48 LDRB W8, [X0, W1, UXTW]
	0x03D8CB4C CMP W8, 0x0
	0x03D8CB50 CSET W0, EQ
	0x03D8CB54 RET
	0x03D8CB58 MOV W8, W1
	0x03D8CB5C AND X8, X8, 0x3FFF
	0x03D8CB60 LDRB W9, [X8, X0, LSL]
	0x03D8CB64 CMP W9, 0xFF
	0x03D8CB68 B.EQ 0x3D8CB74
	0x03D8CB6C ADD W9, W9, 0x1
	0x03D8CB70 STRB W9, [X0, X8, LSL]
	0x03D8CB74 UBFM X8, X1, 0xE, 0x1B
	0x03D8CB78 LDRB W9, [X8, X0, LSL]
	0x03D8CB7C CMP W9, 0xFF
	0x03D8CB80 B.EQ 0x3D8CB8C
	0x03D8CB84 ADD W9, W9, 0x1
	0x03D8CB88 STRB W9, [X0, X8, LSL]
	0x03D8CB8C RET
	0x03D8CB90 MOV W8, W1
	0x03D8CB94 AND X8, X8, 0x3FFF
	0x03D8CB98 LDRB W9, [X8, X0, LSL]
	0x03D8CB9C CBZ W9, 0x3D8CBA8
	0x03D8CBA0 SUB W9, W9, 0x1
	0x03D8CBA4 STRB W9, [X0, X8, LSL]
	0x03D8CBA8 UBFM X8, X1, 0xE, 0x1B
	0x03D8CBAC LDRB W9, [X8, X0, LSL]
	0x03D8CBB0 CBZ W9, 0x3D8CBBC
	0x03D8CBB4 SUB W9, W9, 0x1
	0x03D8CBB8 STRB W9, [X0, X8, LSL]
	0x03D8CBBC RET
	0x03D8CBC0 AND X8, X1, 0x3FFF
	0x03D8CBC4 LDRB W8, [X8, X0, LSL]
	0x03D8CBC8 CBZ W8, 0x3D8CBE0
	0x03D8CBCC UBFM X8, X1, 0xE, 0x1B
	0x03D8CBD0 LDRB W8, [X8, X0, LSL]
	0x03D8CBD4 CMP W8, 0x0
	0x03D8CBD8 CSET W0, NE
	0x03D8CBDC RET
	0x03D8CBE0 MOV W0, W31
	0x03D8CBE4 RET
	0x03D8CBE8 STR X30, [X31 - 0x30]!
	0x03D8CBEC STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x65C000
	008 Move X22, 0x3DC000
	009 Move X19, 0x3DC000
	010 Move X21, 0x391000
	011 Move X20, 0x391000
	012 Move W8, [X23+3613]
	013 Move X22, [X22+2136]
	014 Move X19, [X19+2088]
	015 Move X21, [X21+3768]
	016 Move X20, [X20+3776]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x3DC000
	022 Move X0, [X0+2088]
	023 Call 0x1C17CF4
	024 Move X0, 0x391000
	025 Move X0, [X0+3768]
	026 Call 0x1C17CF4
	027 Move X0, 0x3DC000
	028 Move X0, [X0+2136]
	029 Call 0x1C17CF4
	030 Move X0, 0x391000
	031 Move X0, [X0+3776]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+3613], W8
	035 Move X8, [X19]
	036 Move X9, [X22]
	037 Move X2, X31
	038 Move X8, [X8+184]
	039 Move [X8], X9
	040 Move X8, [X19]
	041 Move X1, [X21]
	042 Move X8, [X8+184]
	043 Move X0, [X8]
	044 Call String.Concat, X0, X1
	045 Move X8, [X19]
	046 Move X2, X31
	047 Move X8, [X8+184]
	048 Move [X8+8], X0
	049 Move X0, [X8]
	050 Move X1, [X20]
	051 Call String.Concat, X0, X1
	052 Move X8, [X19]
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X8, [X8+184]
	058 Move [X8+16], X0
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

