Type: UnityEngine.Yoga.YogaNode

Method: System.Void set_Left(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE7620 ADRP X0, 0xFFFFFFFFFCE24000
	0x03CE7624 ADD X0, X0, 0xAC6
	0x03CE7628 BL 0x1C16CB8

ISIL:
	001 Move X2, X1
	002 Move W1, W31

Method: System.Void set_Top(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE76B0 B 0x3CE76D4
	0x03CE76B4 ADRP X20, 0x700000
	0x03CE76B8 LDR X1, [X20 + 0x648]

ISIL:
	001 Move X2, X1
	002 Move W1, 1
	003 Call YogaNode.SetStylePosition, X0, X1, X2
	004 Return 

Method: System.Void set_Right(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE76BC CBNZ X1, 0x3CE76D4
	0x03CE76C0 ADRP X0, 0xFFFFFFFFFCE08000
	0x03CE76C4 ADD X0, X0, 0x8EE

ISIL:
	001 Move X2, X1
	002 Move W1, 2
	003 Call YogaNode.SetStylePosition, X0, X1, X2
	004 Return 

Method: System.Void set_Bottom(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE76C8 BL 0x1C16CB8
	0x03CE76CC MOV X1, X0
	0x03CE76D0 STR X0, [X20 + 0x648]

ISIL:
	001 Move X2, X1
	002 Move W1, 3
	003 Call YogaNode.SetStylePosition, X0, X1, X2
	004 Return 

Method: System.Void SetStylePosition(UnityEngine.Yoga.YogaEdge edge, UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE762C MOV X1, X0
	0x03CE7630 STR X0, [X20 + 0x680]
	0x03CE7634 B 0x3CE7658
	0x03CE7638 ADRP X20, 0x700000
	0x03CE763C LDR X1, [X20 + 0x678]
	0x03CE7640 CBNZ X1, 0x3CE7658
	0x03CE7644 ADRP X0, 0xFFFFFFFFFCE0C000
	0x03CE7648 ADD X0, X0, 0xBA2
	0x03CE764C BL 0x1C16CB8
	0x03CE7650 MOV X1, X0
	0x03CE7654 STR X0, [X20 + 0x678]
	0x03CE7658 MOV X0, X19
	0x03CE765C LDP X20, X19, [X31 + 0x10]
	0x03CE7660 LDR X30, [X31 + 0x8]
	0x03CE7664 MOV V0.16B, V8.16B
	0x03CE7668 LDR V8, [X31], #0x20
	0x03CE766C BR X1
	0x03CE7670 STR D8, [X31 - 0x20]!
	0x03CE7674 STR X30, [X31 + 0x8]
	0x03CE7678 STP X20, X19, [X31 + 0x10]
	0x03CE767C LDR X19, [X0 + 0x10]
	0x03CE7680 UBFM X8, X1, 0x20, 0x3F
	0x03CE7684 CMP X8, 0x2
	0x03CE7688 FMOV S8, W1
	0x03CE768C B.NE 0x3CE76B4
	0x03CE7690 ADRP X20, 0x700000
	0x03CE7694 LDR X1, [X20 + 0x650]
	0x03CE7698 CBNZ X1, 0x3CE76D4
	0x03CE769C ADRP X0, 0xFFFFFFFFFCE32000
	0x03CE76A0 ADD X0, X0, 0x69D
	0x03CE76A4 BL 0x1C16CB8
	0x03CE76A8 MOV X1, X0
	0x03CE76AC STR X0, [X20 + 0x650]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, [X0+16]
	007 Move X8, X2
	008 ShiftRight X8, 32
	009 And X8, X8, 0x7FFFFFFF
	010 Move W19, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move S8, W2
	013 Move X21, 0x701000
	014 Move X2, [X21+1680]
	015 Compare X2, 0
	016 JumpIfNotEqual {31}
	017 Move X0, -52359168
	018 Add X0, X0, 3199
	019 Call 0x1C17CB8
	020 Move X2, X0
	021 Move [X21+1680], X0
	022 Move X21, 0x701000
	023 Move X2, [X21+1672]
	024 Compare X2, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -52383744
	027 Add X0, X0, 2575
	028 Call 0x1C17CB8
	029 Move X2, X0
	030 Move [X21+1672], X0
	031 Move X0, X20
	032 Move W1, W19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Move V0, V8
	038 Move V8, [X31+48]
	039 CallNoReturn X2

Method: System.Void set_MarginLeft(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE76E4 LDR V8, [X31], #0x20
	0x03CE76E8 BR X1
	0x03CE76EC STR D8, [X31 - 0x20]!

ISIL:
	001 Move X2, X1
	002 Move W1, W31

Method: System.Void set_MarginTop(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE77B8 CBNZ X1, 0x3CE77D0
	0x03CE77BC ADRP X0, 0xFFFFFFFFFCE08000
	0x03CE77C0 ADD X0, X0, 0x9A0

ISIL:
	001 Move X2, X1
	002 Move W1, 1
	003 Call YogaNode.SetStyleMargin, X0, X1, X2
	004 Return 

Method: System.Void set_MarginRight(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE77C4 BL 0x1C16CB8
	0x03CE77C8 MOV X1, X0
	0x03CE77CC STR X0, [X20 + 0x6D0]

ISIL:
	001 Move X2, X1
	002 Move W1, 2
	003 Call YogaNode.SetStyleMargin, X0, X1, X2
	004 Return 

Method: System.Void set_MarginBottom(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE77D0 MOV X0, X19
	0x03CE77D4 LDP X20, X19, [X31 + 0x10]
	0x03CE77D8 LDR X30, [X31], #0x20

ISIL:
	001 Move X2, X1
	002 Move W1, 3
	003 Call YogaNode.SetStyleMargin, X0, X1, X2
	004 Return 

Method: System.Void SetStyleMargin(UnityEngine.Yoga.YogaEdge edge, UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE76F0 STR X30, [X31 + 0x8]
	0x03CE76F4 STP X20, X19, [X31 + 0x10]
	0x03CE76F8 LDR X19, [X0 + 0x10]
	0x03CE76FC UBFM X8, X1, 0x20, 0x3F
	0x03CE7700 CMP X8, 0x2
	0x03CE7704 FMOV S8, W1
	0x03CE7708 B.NE 0x3CE7730
	0x03CE770C ADRP X20, 0x700000
	0x03CE7710 LDR X1, [X20 + 0x660]
	0x03CE7714 CBNZ X1, 0x3CE7750
	0x03CE7718 ADRP X0, 0xFFFFFFFFFCE14000
	0x03CE771C ADD X0, X0, 0xBDE
	0x03CE7720 BL 0x1C16CB8
	0x03CE7724 MOV X1, X0
	0x03CE7728 STR X0, [X20 + 0x660]
	0x03CE772C B 0x3CE7750
	0x03CE7730 ADRP X20, 0x700000
	0x03CE7734 LDR X1, [X20 + 0x658]
	0x03CE7738 CBNZ X1, 0x3CE7750
	0x03CE773C ADRP X0, 0xFFFFFFFFFCE3A000
	0x03CE7740 ADD X0, X0, 0x71E
	0x03CE7744 BL 0x1C16CB8
	0x03CE7748 MOV X1, X0
	0x03CE774C STR X0, [X20 + 0x658]
	0x03CE7750 MOV X0, X19
	0x03CE7754 LDP X20, X19, [X31 + 0x10]
	0x03CE7758 LDR X30, [X31 + 0x8]
	0x03CE775C MOV V0.16B, V8.16B
	0x03CE7760 LDR V8, [X31], #0x20
	0x03CE7764 BR X1
	0x03CE7768 STR X30, [X31 - 0x20]!
	0x03CE776C STP X20, X19, [X31 + 0x10]
	0x03CE7770 ADRP X20, 0x700000
	0x03CE7774 LDR X1, [X20 + 0x6C8]
	0x03CE7778 LDR X19, [X0 + 0x10]
	0x03CE777C CBNZ X1, 0x3CE7794
	0x03CE7780 ADRP X0, 0xFFFFFFFFFCE14000
	0x03CE7784 ADD X0, X0, 0xC33
	0x03CE7788 BL 0x1C16CB8
	0x03CE778C MOV X1, X0
	0x03CE7790 STR X0, [X20 + 0x6C8]
	0x03CE7794 MOV X0, X19
	0x03CE7798 LDP X20, X19, [X31 + 0x10]
	0x03CE779C LDR X30, [X31], #0x20
	0x03CE77A0 BR X1
	0x03CE77A4 STR X30, [X31 - 0x20]!
	0x03CE77A8 STP X20, X19, [X31 + 0x10]
	0x03CE77AC ADRP X20, 0x700000
	0x03CE77B0 LDR X1, [X20 + 0x6D0]
	0x03CE77B4 LDR X19, [X0 + 0x10]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, X2
	007 ShiftRight X8, 32
	008 And X8, X8, 0x7FFFFFFF
	009 Move W19, W1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move S8, W2
	012 Move X21, 0x701000
	013 Move X2, [X21+1696]
	014 Move X20, [X0+16]
	015 Compare X2, 0
	016 JumpIfNotEqual {50}
	017 Move X0, -52178944
	018 Add X0, X0, 2757
	019 Call 0x1C17CB8
	020 Move X2, X0
	021 Move [X21+1696], X0
	022 Move X20, [X0+16]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X21, 0x701000
	025 Move X2, [X21+1704]
	026 Compare X2, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -52301824
	029 Add X0, X0, 2206
	030 Call 0x1C17CB8
	031 Move X2, X0
	032 Move [X21+1704], X0
	033 Move X0, X20
	034 Move W1, W19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move V8, [X31+48]
	040 CallNoReturn X2
	041 Move X21, 0x701000
	042 Move X2, [X21+1688]
	043 Compare X2, 0
	044 JumpIfNotEqual {50}
	045 Move X0, -52162560
	046 Add X0, X0, 1178
	047 Call 0x1C17CB8
	048 Move X2, X0
	049 Move [X21+1688], X0
	050 Move X0, X20
	051 Move W1, W19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+16]
	055 Move X21, [X31+24]
	056 Move V0, V8
	057 Move V8, [X31+48]
	058 CallNoReturn X2

Method: System.Void set_PaddingLeft(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE77DC BR X1
	0x03CE77E0 STR X30, [X31 - 0x20]!
	0x03CE77E4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X2, X1
	002 Move W1, W31

Method: System.Void set_PaddingTop(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE786C CBNZ X1, 0x3CE7884
	0x03CE7870 ADRP X0, 0xFFFFFFFFFCE1C000
	0x03CE7874 ADD X0, X0, 0xBE3

ISIL:
	001 Move X2, X1
	002 Move W1, 1
	003 Call YogaNode.SetStylePadding, X0, X1, X2
	004 Return 

Method: System.Void set_PaddingRight(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE7878 BL 0x1C16CB8
	0x03CE787C MOV X1, X0
	0x03CE7880 STR X0, [X20 + 0x6E8]

ISIL:
	001 Move X2, X1
	002 Move W1, 2
	003 Call YogaNode.SetStylePadding, X0, X1, X2
	004 Return 

Method: System.Void set_PaddingBottom(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE7884 MOV X0, X19
	0x03CE7888 LDP X20, X19, [X31 + 0x10]
	0x03CE788C LDR X30, [X31], #0x20

ISIL:
	001 Move X2, X1
	002 Move W1, 3
	003 Call YogaNode.SetStylePadding, X0, X1, X2
	004 Return 

Method: System.Void SetStylePadding(UnityEngine.Yoga.YogaEdge edge, UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE77E8 ADRP X20, 0x700000
	0x03CE77EC LDR X1, [X20 + 0x6D8]
	0x03CE77F0 LDR X19, [X0 + 0x10]
	0x03CE77F4 CBNZ X1, 0x3CE780C
	0x03CE77F8 ADRP X0, 0xFFFFFFFFFCE44000
	0x03CE77FC ADD X0, X0, 0x2DF
	0x03CE7800 BL 0x1C16CB8
	0x03CE7804 MOV X1, X0
	0x03CE7808 STR X0, [X20 + 0x6D8]
	0x03CE780C MOV X0, X19
	0x03CE7810 LDP X20, X19, [X31 + 0x10]
	0x03CE7814 LDR X30, [X31], #0x20
	0x03CE7818 BR X1
	0x03CE781C STR X30, [X31 - 0x20]!
	0x03CE7820 STP X20, X19, [X31 + 0x10]
	0x03CE7824 ADRP X20, 0x700000
	0x03CE7828 LDR X1, [X20 + 0x6E0]
	0x03CE782C LDR X19, [X0 + 0x10]
	0x03CE7830 CBNZ X1, 0x3CE7848
	0x03CE7834 ADRP X0, 0xFFFFFFFFFCE10000
	0x03CE7838 ADD X0, X0, 0xCED
	0x03CE783C BL 0x1C16CB8
	0x03CE7840 MOV X1, X0
	0x03CE7844 STR X0, [X20 + 0x6E0]
	0x03CE7848 MOV X0, X19
	0x03CE784C LDP X20, X19, [X31 + 0x10]
	0x03CE7850 LDR X30, [X31], #0x20
	0x03CE7854 BR X1
	0x03CE7858 STR X30, [X31 - 0x20]!
	0x03CE785C STP X20, X19, [X31 + 0x10]
	0x03CE7860 ADRP X20, 0x700000
	0x03CE7864 LDR X1, [X20 + 0x6E8]
	0x03CE7868 LDR X19, [X0 + 0x10]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, [X0+16]
	007 Move X8, X2
	008 ShiftRight X8, 32
	009 And X8, X8, 0x7FFFFFFF
	010 Move W19, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move S8, W2
	013 Move X21, 0x701000
	014 Move X2, [X21+1720]
	015 Compare X2, 0
	016 JumpIfNotEqual {31}
	017 Move X0, -52277248
	018 Add X0, X0, 2843
	019 Call 0x1C17CB8
	020 Move X2, X0
	021 Move [X21+1720], X0
	022 Move X21, 0x701000
	023 Move X2, [X21+1712]
	024 Compare X2, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -52236288
	027 Add X0, X0, 1018
	028 Call 0x1C17CB8
	029 Move X2, X0
	030 Move [X21+1712], X0
	031 Move X0, X20
	032 Move W1, W19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Move V0, V8
	038 Move V8, [X31+48]
	039 CallNoReturn X2

Method: System.Void set_BorderLeftWidth(System.Single value)

Disassembly:
	0x03CE7890 BR X1
	0x03CE7894 STR X30, [X31 - 0x20]!
	0x03CE7898 STP X20, X19, [X31 + 0x10]
	0x03CE789C ADRP X20, 0x700000
	0x03CE78A0 LDR X1, [X20 + 0x6F0]
	0x03CE78A4 LDR X19, [X0 + 0x10]
	0x03CE78A8 CBNZ X1, 0x3CE78C0
	0x03CE78AC ADRP X0, 0xFFFFFFFFFCE1A000
	0x03CE78B0 ADD X0, X0, 0x93F
	0x03CE78B4 BL 0x1C16CB8
	0x03CE78B8 MOV X1, X0
	0x03CE78BC STR X0, [X20 + 0x6F0]
	0x03CE78C0 MOV X0, X19
	0x03CE78C4 LDP X20, X19, [X31 + 0x10]
	0x03CE78C8 LDR X30, [X31], #0x20
	0x03CE78CC BR X1
	0x03CE78D0 STP X30, X21, [X31 - 0x20]!
	0x03CE78D4 STP X20, X19, [X31 + 0x10]
	0x03CE78D8 ADRP X21, 0x700000
	0x03CE78DC LDR X2, [X21 + 0x5D8]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x701000
	006 Move X2, [X20+1728]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52391936
	012 Add X0, X0, 2363
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X20+1728], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move W1, W31
	021 Move V0, V8
	022 Move V8, [X31+32]
	023 CallNoReturn X2

Method: System.Void set_BorderTopWidth(System.Single value)

Disassembly:
	0x03CE78E0 LDR X20, [X0 + 0x10]
	0x03CE78E4 MOV W19, W1
	0x03CE78E8 CBNZ X2, 0x3CE7900
	0x03CE78EC ADRP X0, 0xFFFFFFFFFCE2E000
	0x03CE78F0 ADD X0, X0, 0x39D
	0x03CE78F4 BL 0x1C16CB8
	0x03CE78F8 MOV X2, X0
	0x03CE78FC STR X0, [X21 + 0x5D8]
	0x03CE7900 MOV X0, X20
	0x03CE7904 MOV W1, W19
	0x03CE7908 LDP X20, X19, [X31 + 0x10]
	0x03CE790C LDP X30, X21, [X31], #0x20
	0x03CE7910 BR X2
	0x03CE7914 STR X30, [X31 - 0x20]!
	0x03CE7918 STP X20, X19, [X31 + 0x10]
	0x03CE791C ADRP X20, 0x700000
	0x03CE7920 LDRB W8, [X20 + 0x712]
	0x03CE7924 MOV X19, X0
	0x03CE7928 TBNZ X8, 0x0, 0x3CE7940
	0x03CE792C ADRP X0, 0x47B000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x701000
	006 Move X2, [X20+1728]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52391936
	012 Add X0, X0, 2363
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X20+1728], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move W1, 1
	021 Move V0, V8
	022 Move V8, [X31+32]
	023 CallNoReturn X2

Method: System.Void set_BorderRightWidth(System.Single value)

Disassembly:
	0x03CE7930 LDR X0, [X0 + 0x660]
	0x03CE7934 BL 0x1C16CF4
	0x03CE7938 MOVZ W8, 0x1
	0x03CE793C STRB W8, [X20 + 0x712]
	0x03CE7940 LDR X8, [X19 + 0x28]
	0x03CE7944 CBZ X8, 0x3CE7950
	0x03CE7948 LDR W0, [X8 + 0x18]
	0x03CE794C B 0x3CE7954
	0x03CE7950 MOV W0, W31
	0x03CE7954 LDP X20, X19, [X31 + 0x10]
	0x03CE7958 LDR X30, [X31], #0x20
	0x03CE795C RET
	0x03CE7960 STR X30, [X31 - 0x20]!
	0x03CE7964 STP X20, X19, [X31 + 0x10]
	0x03CE7968 ADRP X20, 0x700000
	0x03CE796C LDR X2, [X20 + 0x588]
	0x03CE7970 LDR X19, [X0 + 0x10]
	0x03CE7974 CBNZ X2, 0x3CE798C
	0x03CE7978 ADRP X0, 0xFFFFFFFFFCE30000
	0x03CE797C ADD X0, X0, 0x33A

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x701000
	006 Move X2, [X20+1728]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52391936
	012 Add X0, X0, 2363
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X20+1728], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move W1, 2
	021 Move V0, V8
	022 Move V8, [X31+32]
	023 CallNoReturn X2

Method: System.Void set_BorderBottomWidth(System.Single value)

Disassembly:
	0x03CE7980 BL 0x1C16CB8
	0x03CE7984 MOV X2, X0
	0x03CE7988 STR X0, [X20 + 0x588]
	0x03CE798C MOV X0, X19
	0x03CE7990 LDP X20, X19, [X31 + 0x10]
	0x03CE7994 MOV W1, W31
	0x03CE7998 LDR X30, [X31], #0x20
	0x03CE799C BR X2
	0x03CE79A0 STP X30, X23, [X31 - 0x30]!
	0x03CE79A4 STP X22, X21, [X31 + 0x10]
	0x03CE79A8 STP X20, X19, [X31 + 0x20]
	0x03CE79AC ADRP X22, 0x700000
	0x03CE79B0 LDRB W8, [X22 + 0x713]
	0x03CE79B4 MOV X20, X2
	0x03CE79B8 MOV W19, W1
	0x03CE79BC MOV X21, X0
	0x03CE79C0 TBNZ X8, 0x0, 0x3CE79FC
	0x03CE79C4 ADRP X0, 0x47B000
	0x03CE79C8 LDR X0, [X0 + 0x668]
	0x03CE79CC BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x701000
	006 Move X2, [X20+1728]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52391936
	012 Add X0, X0, 2363
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X20+1728], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move W1, 3
	021 Move V0, V8
	022 Move V8, [X31+32]
	023 CallNoReturn X2

Method: System.Single get_LayoutMarginLeft()

Disassembly:
	0x03CE79D0 ADRP X0, 0x47B000
	0x03CE79D4 LDR X0, [X0 + 0x670]
	0x03CE79D8 BL 0x1C16CF4
	0x03CE79DC ADRP X0, 0x47B000
	0x03CE79E0 LDR X0, [X0 + 0x678]
	0x03CE79E4 BL 0x1C16CF4
	0x03CE79E8 ADRP X0, 0x43C000
	0x03CE79EC LDR X0, [X0 + 0xD60]
	0x03CE79F0 BL 0x1C16CF4
	0x03CE79F4 MOVZ W8, 0x1
	0x03CE79F8 STRB W8, [X22 + 0x713]
	0x03CE79FC LDR X22, [X21 + 0x28]
	0x03CE7A00 CBNZ X22, 0x3CE7A34
	0x03CE7A04 ADRP X8, 0x47B000
	0x03CE7A08 LDR X8, [X8 + 0x678]
	0x03CE7A0C LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1784]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52142080
	010 Add X0, X0, 3903
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1784], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, W31
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutMarginTop()

Disassembly:
	0x03CE7A10 BL 0x1C16F10
	0x03CE7A14 ADRP X8, 0x47B000
	0x03CE7A18 LDR X8, [X8 + 0x670]
	0x03CE7A1C MOVZ W1, 0x4
	0x03CE7A20 MOV X22, X0
	0x03CE7A24 LDR X2, [X8]
	0x03CE7A28 BL 0x301B830
	0x03CE7A2C STR X22, [X21 + 0x28]
	0x03CE7A30 CBZ X22, 0x3CE7ABC
	0x03CE7A34 ADRP X8, 0x47B000
	0x03CE7A38 LDR X8, [X8 + 0x668]
	0x03CE7A3C ADRP X23, 0x43C000
	0x03CE7A40 MOV X0, X22
	0x03CE7A44 MOV W1, W19
	0x03CE7A48 LDR X3, [X8]
	0x03CE7A4C LDR X23, [X23 + 0xD60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1784]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52142080
	010 Add X0, X0, 3903
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1784], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 1
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutMarginRight()

Disassembly:
	0x03CE7A50 MOV X2, X20
	0x03CE7A54 BL 0x301CEEC
	0x03CE7A58 LDR X0, [X23]
	0x03CE7A5C BL 0x1C16F10
	0x03CE7A60 MOV X1, X21
	0x03CE7A64 MOV X2, X31
	0x03CE7A68 MOV X22, X0
	0x03CE7A6C BL 0x33D571C
	0x03CE7A70 CBZ X20, 0x3CE7ABC
	0x03CE7A74 STR X22, [X20 + 0x20]
	0x03CE7A78 ADRP X22, 0x700000
	0x03CE7A7C LDR X21, [X21 + 0x10]
	0x03CE7A80 LDR X3, [X22 + 0x548]
	0x03CE7A84 LDR X20, [X20 + 0x10]
	0x03CE7A88 CBNZ X3, 0x3CE7AA0
	0x03CE7A8C ADRP X0, 0xFFFFFFFFFCE38000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1784]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52142080
	010 Add X0, X0, 3903
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1784], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 2
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutMarginBottom()

Disassembly:
	0x03CE7A90 ADD X0, X0, 0x81A
	0x03CE7A94 BL 0x1C16CB8
	0x03CE7A98 MOV X3, X0
	0x03CE7A9C STR X0, [X22 + 0x548]
	0x03CE7AA0 MOV X0, X21
	0x03CE7AA4 MOV X1, X20
	0x03CE7AA8 MOV W2, W19
	0x03CE7AAC LDP X20, X19, [X31 + 0x20]
	0x03CE7AB0 LDP X22, X21, [X31 + 0x10]
	0x03CE7AB4 LDP X30, X23, [X31], #0x30
	0x03CE7AB8 BR X3
	0x03CE7ABC BL 0x1C16F20
	0x03CE7AC0 STR X30, [X31 - 0x30]!
	0x03CE7AC4 STP X22, X21, [X31 + 0x10]
	0x03CE7AC8 STP X20, X19, [X31 + 0x20]
	0x03CE7ACC ADRP X21, 0x700000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1784]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52142080
	010 Add X0, X0, 3903
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1784], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 3
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutPaddingLeft()

Disassembly:
	0x03CE7AD0 LDRB W8, [X21 + 0x714]
	0x03CE7AD4 MOV W20, W1
	0x03CE7AD8 MOV X19, X0
	0x03CE7ADC TBNZ X8, 0x0, 0x3CE7B00
	0x03CE7AE0 ADRP X0, 0x47B000
	0x03CE7AE4 LDR X0, [X0 + 0x680]
	0x03CE7AE8 BL 0x1C16CF4
	0x03CE7AEC ADRP X0, 0x47B000
	0x03CE7AF0 LDR X0, [X0 + 0x688]
	0x03CE7AF4 BL 0x1C16CF4
	0x03CE7AF8 MOVZ W8, 0x1
	0x03CE7AFC STRB W8, [X21 + 0x714]
	0x03CE7B00 LDR X0, [X19 + 0x28]
	0x03CE7B04 CBZ X0, 0x3CE7B84
	0x03CE7B08 ADRP X8, 0x47B000
	0x03CE7B0C LDR X8, [X8 + 0x688]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1792]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52228096
	010 Add X0, X0, 965
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1792], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, W31
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutPaddingTop()

Disassembly:
	0x03CE7B10 MOV W1, W20
	0x03CE7B14 LDR X2, [X8]
	0x03CE7B18 BL 0x301BCCC
	0x03CE7B1C CBZ X0, 0x3CE7B84
	0x03CE7B20 STR X31, [X0 + 0x20]
	0x03CE7B24 MOV X21, X0
	0x03CE7B28 LDR X0, [X19 + 0x28]
	0x03CE7B2C CBZ X0, 0x3CE7B84
	0x03CE7B30 ADRP X8, 0x47B000
	0x03CE7B34 LDR X8, [X8 + 0x680]
	0x03CE7B38 MOV W1, W20
	0x03CE7B3C LDR X2, [X8]
	0x03CE7B40 BL 0x301DA48
	0x03CE7B44 ADRP X22, 0x700000
	0x03CE7B48 LDR X19, [X19 + 0x10]
	0x03CE7B4C LDR X2, [X22 + 0x550]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1792]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52228096
	010 Add X0, X0, 965
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1792], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 1
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutPaddingRight()

Disassembly:
	0x03CE7B50 LDR X20, [X21 + 0x10]
	0x03CE7B54 CBNZ X2, 0x3CE7B6C
	0x03CE7B58 ADRP X0, 0xFFFFFFFFFCE44000
	0x03CE7B5C ADD X0, X0, 0x297
	0x03CE7B60 BL 0x1C16CB8
	0x03CE7B64 MOV X2, X0
	0x03CE7B68 STR X0, [X22 + 0x550]
	0x03CE7B6C MOV X0, X19
	0x03CE7B70 MOV X1, X20
	0x03CE7B74 LDP X20, X19, [X31 + 0x20]
	0x03CE7B78 LDP X22, X21, [X31 + 0x10]
	0x03CE7B7C LDR X30, [X31], #0x30
	0x03CE7B80 BR X2
	0x03CE7B84 BL 0x1C16F20
	0x03CE7B88 STR X30, [X31 - 0x20]!
	0x03CE7B8C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1792]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52228096
	010 Add X0, X0, 965
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1792], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 2
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutPaddingBottom()

Disassembly:
	0x03CE7B90 ADRP X20, 0x700000
	0x03CE7B94 LDRB W8, [X20 + 0x715]
	0x03CE7B98 MOV X19, X0
	0x03CE7B9C TBNZ X8, 0x0, 0x3CE7BB4
	0x03CE7BA0 ADRP X0, 0x47B000
	0x03CE7BA4 LDR X0, [X0 + 0x660]
	0x03CE7BA8 BL 0x1C16CF4
	0x03CE7BAC MOVZ W8, 0x1
	0x03CE7BB0 STRB W8, [X20 + 0x715]
	0x03CE7BB4 LDR X8, [X19 + 0x28]
	0x03CE7BB8 CBZ X8, 0x3CE7BE0
	0x03CE7BBC LDR W8, [X8 + 0x18]
	0x03CE7BC0 CMP W8, 0x0
	0x03CE7BC4 B.LE 0x3CE7BE0
	0x03CE7BC8 SUB W1, W8, 0x1
	0x03CE7BCC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1792]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52228096
	010 Add X0, X0, 965
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1792], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 3
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutBorderLeft()

Disassembly:
	0x03CE7BD0 BL 0x3CE7AC0
	0x03CE7BD4 LDR X8, [X19 + 0x28]
	0x03CE7BD8 CBNZ X8, 0x3CE7BBC
	0x03CE7BDC BL 0x1C16F20
	0x03CE7BE0 LDP X20, X19, [X31 + 0x10]
	0x03CE7BE4 LDR X30, [X31], #0x20
	0x03CE7BE8 RET
	0x03CE7BEC STP X30, X21, [X31 - 0x20]!
	0x03CE7BF0 STP X20, X19, [X31 + 0x10]
	0x03CE7BF4 MOV X19, X0
	0x03CE7BF8 STR X1, [X0 + 0x30]
	0x03CE7BFC CBZ X1, 0x3CE7C58
	0x03CE7C00 ADRP X21, 0x700000
	0x03CE7C04 LDR X8, [X21 + 0x508]
	0x03CE7C08 LDR X20, [X19 + 0x10]
	0x03CE7C0C CBNZ X8, 0x3CE7C24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1800]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52252672
	010 Add X0, X0, 2162
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1800], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, W31
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutBorderTop()

Disassembly:
	0x03CE7C10 ADRP X0, 0xFFFFFFFFFCE22000
	0x03CE7C14 ADD X0, X0, 0xD88
	0x03CE7C18 BL 0x1C16CB8
	0x03CE7C1C MOV X8, X0
	0x03CE7C20 STR X0, [X21 + 0x508]
	0x03CE7C24 MOV X0, X20
	0x03CE7C28 MOV X1, X19
	0x03CE7C2C BLR X8
	0x03CE7C30 ADRP X20, 0x700000
	0x03CE7C34 LDR X1, [X20 + 0x578]
	0x03CE7C38 LDR X19, [X19 + 0x10]
	0x03CE7C3C CBNZ X1, 0x3CE7CB4
	0x03CE7C40 ADRP X0, 0xFFFFFFFFFCE2E000
	0x03CE7C44 ADD X0, X0, 0x304
	0x03CE7C48 BL 0x1C16CB8
	0x03CE7C4C MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1800]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52252672
	010 Add X0, X0, 2162
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1800], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 1
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutBorderRight()

Disassembly:
	0x03CE7C50 STR X0, [X20 + 0x578]
	0x03CE7C54 B 0x3CE7CB4
	0x03CE7C58 LDR X8, [X19 + 0x38]
	0x03CE7C5C CBNZ X8, 0x3CE7C90
	0x03CE7C60 ADRP X21, 0x700000
	0x03CE7C64 LDR X8, [X21 + 0x508]
	0x03CE7C68 LDR X20, [X19 + 0x10]
	0x03CE7C6C CBNZ X8, 0x3CE7C84
	0x03CE7C70 ADRP X0, 0xFFFFFFFFFCE22000
	0x03CE7C74 ADD X0, X0, 0xD88
	0x03CE7C78 BL 0x1C16CB8
	0x03CE7C7C MOV X8, X0
	0x03CE7C80 STR X0, [X21 + 0x508]
	0x03CE7C84 MOV X0, X20
	0x03CE7C88 MOV X1, X31
	0x03CE7C8C BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1800]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52252672
	010 Add X0, X0, 2162
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1800], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 2
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Single get_LayoutBorderBottom()

Disassembly:
	0x03CE7C90 ADRP X20, 0x700000
	0x03CE7C94 LDR X1, [X20 + 0x580]
	0x03CE7C98 LDR X19, [X19 + 0x10]
	0x03CE7C9C CBNZ X1, 0x3CE7CB4
	0x03CE7CA0 ADRP X0, 0xFFFFFFFFFCE26000
	0x03CE7CA4 ADD X0, X0, 0xBFF
	0x03CE7CA8 BL 0x1C16CB8
	0x03CE7CAC MOV X1, X0
	0x03CE7CB0 STR X0, [X20 + 0x580]
	0x03CE7CB4 MOV X0, X19
	0x03CE7CB8 LDP X20, X19, [X31 + 0x10]
	0x03CE7CBC LDP X30, X21, [X31], #0x20
	0x03CE7CC0 BR X1
	0x03CE7CC4 STP D9, D8, [X31 - 0x30]!
	0x03CE7CC8 STP X30, X21, [X31 + 0x10]
	0x03CE7CCC STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X2, [X20+1800]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52252672
	010 Add X0, X0, 2162
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1800], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 3
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Void .ctor(UnityEngine.Yoga.YogaConfig config = null)

Disassembly:
	0x03CE7CD0 ADRP X20, 0x700000
	0x03CE7CD4 LDR X8, [X20 + 0x598]
	0x03CE7CD8 LDR X19, [X0 + 0x10]
	0x03CE7CDC MOV V8.16B, V1.16B
	0x03CE7CE0 MOV V9.16B, V0.16B
	0x03CE7CE4 CBNZ X8, 0x3CE7CFC
	0x03CE7CE8 ADRP X0, 0xFFFFFFFFFCE20000
	0x03CE7CEC ADD X0, X0, 0xB32
	0x03CE7CF0 BL 0x1C16CB8
	0x03CE7CF4 MOV X8, X0
	0x03CE7CF8 STR X0, [X20 + 0x598]
	0x03CE7CFC MOV X0, X19
	0x03CE7D00 BLR X8
	0x03CE7D04 ADRP X21, 0x700000
	0x03CE7D08 LDR X2, [X21 + 0x558]
	0x03CE7D0C MOV W20, W0
	0x03CE7D10 CBNZ X2, 0x3CE7D28
	0x03CE7D14 ADRP X0, 0xFFFFFFFFFCE2C000
	0x03CE7D18 ADD X0, X0, 0x5C6
	0x03CE7D1C BL 0x1C16CB8
	0x03CE7D20 MOV X2, X0
	0x03CE7D24 STR X0, [X21 + 0x558]
	0x03CE7D28 MOV X0, X19
	0x03CE7D2C MOV W1, W20
	0x03CE7D30 LDP X20, X19, [X31 + 0x20]
	0x03CE7D34 LDP X30, X21, [X31 + 0x10]
	0x03CE7D38 MOV V0.16B, V9.16B
	0x03CE7D3C MOV V1.16B, V8.16B
	0x03CE7D40 LDP D9, D8, [X31], #0x30
	0x03CE7D44 BR X2
	0x03CE7D48 STR X30, [X31 - 0x20]!
	0x03CE7D4C STP X20, X19, [X31 + 0x10]
	0x03CE7D50 ADRP X20, 0x700000
	0x03CE7D54 LDRB W8, [X20 + 0x716]
	0x03CE7D58 MOV X19, X0
	0x03CE7D5C TBNZ X8, 0x0, 0x3CE7D80
	0x03CE7D60 ADRP X0, 0x47B000
	0x03CE7D64 LDR X0, [X0 + 0x690]
	0x03CE7D68 BL 0x1C16CF4
	0x03CE7D6C ADRP X0, 0x47B000
	0x03CE7D70 LDR X0, [X0 + 0x698]
	0x03CE7D74 BL 0x1C16CF4
	0x03CE7D78 MOVZ W8, 0x1
	0x03CE7D7C STRB W8, [X20 + 0x716]
	0x03CE7D80 ADRP X20, 0x47B000
	0x03CE7D84 LDR X19, [X19 + 0x28]
	0x03CE7D88 LDR X20, [X20 + 0x698]
	0x03CE7D8C CBZ X19, 0x3CE7DC4
	0x03CE7D90 LDR X8, [X19]
	0x03CE7D94 LDR X1, [X20]
	0x03CE7D98 LDRH W9, [X8 + 0x12E]
	0x03CE7D9C CBZ X9, 0x3CE7E50
	0x03CE7DA0 LDR X10, [X8 + 0xB0]
	0x03CE7DA4 ADD X10, X10, 0x8
	0x03CE7DA8 LDUR X11, [X10 - 0x8]
	0x03CE7DAC CMP X11, X1
	0x03CE7DB0 B.EQ 0x3CE7E60
	0x03CE7DB4 SUBS X9, X9, 0x1
	0x03CE7DB8 ADD X10, X10, 0x10
	0x03CE7DBC B.NE 0x3CE7DA8
	0x03CE7DC0 B 0x3CE7E50
	0x03CE7DC4 ADRP X8, 0x47B000
	0x03CE7DC8 LDR X8, [X8 + 0x690]
	0x03CE7DCC LDR X19, [X8]
	0x03CE7DD0 LDR X8, [X19 + 0x38]
	0x03CE7DD4 CBNZ X8, 0x3CE7DE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x701000
	006 Move W8, [X21+1808]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x47C000
	014 Move X0, [X0+1584]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1808], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Call Object..ctor, X0
	021 Compare X20, 0
	022 JumpIfNotEqual {33}
	023 Move X20, 0x47C000
	024 Move X20, [X20+1584]
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X20, [X8]
	033 Compare X19, 0
	034 JumpIfEqual {63}
	035 Move [X19+24], X20
	036 Compare X20, 0
	037 JumpIfEqual {63}
	038 Move X21, 0x701000
	039 Move X8, [X21+1272]
	040 Move X20, [X20+16]
	041 Compare X8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, -52252672
	044 Add X0, X0, 1999
	045 Call 0x1C17CB8
	046 Move X8, X0
	047 Move [X21+1272], X0
	048 Move X0, X20
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X1, X31
	051 Move X2, X31
	052 Move [X19+16], X0
	053 Call IntPtr.op_Equality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {64}
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return 
	063 Call 0x1C17F20
	064 Move X0, 0x40D000
	065 Move X0, [X0+1456]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0x47C000
	070 Move X0, [X0+1568]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Move X2, X31
	075 Call InvalidOperationException..ctor, X0, X1
	076 Move X0, 0x47C000
	077 Move X0, [X0+1624]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Call 0x1C17DEC

Method: System.Void Finalize()

Disassembly:
	0x03CE7DD8 MOV X0, X19
	0x03CE7DDC BL 0x1C5C6E0
	0x03CE7DE0 LDR X8, [X19 + 0x38]
	0x03CE7DE4 LDR X0, [X8 + 0x10]
	0x03CE7DE8 LDRB W8, [X0 + 0x135]
	0x03CE7DEC TBNZ X8, 0x0, 0x3CE7DF4
	0x03CE7DF0 BL 0x1C5C684
	0x03CE7DF4 LDR W8, [X0 + 0xE0]
	0x03CE7DF8 CBNZ W8, 0x3CE7E00
	0x03CE7DFC BL 0x1C16DFC
	0x03CE7E00 LDR X8, [X19 + 0x38]
	0x03CE7E04 LDR X0, [X8 + 0x10]
	0x03CE7E08 LDRB W8, [X0 + 0x135]
	0x03CE7E0C TBNZ X8, 0x0, 0x3CE7E14
	0x03CE7E10 BL 0x1C5C684
	0x03CE7E14 LDR X8, [X0 + 0xB8]
	0x03CE7E18 LDR X19, [X8]
	0x03CE7E1C CBZ X19, 0x3CE7E80
	0x03CE7E20 LDR X8, [X19]
	0x03CE7E24 LDR X1, [X20]
	0x03CE7E28 LDRH W9, [X8 + 0x12E]
	0x03CE7E2C CBZ X9, 0x3CE7E50
	0x03CE7E30 LDR X10, [X8 + 0xB0]
	0x03CE7E34 ADD X10, X10, 0x8
	0x03CE7E38 LDUR X11, [X10 - 0x8]
	0x03CE7E3C CMP X11, X1
	0x03CE7E40 B.EQ 0x3CE7E60
	0x03CE7E44 SUBS X9, X9, 0x1
	0x03CE7E48 ADD X10, X10, 0x10
	0x03CE7E4C B.NE 0x3CE7E38
	0x03CE7E50 MOV X0, X19
	0x03CE7E54 MOV W2, W31
	0x03CE7E58 BL 0x1C5C788
	0x03CE7E5C B 0x3CE7E6C
	0x03CE7E60 LDRSW X9, [X10]
	0x03CE7E64 ADD X8, X8, X9, 0x4, LSL
	0x03CE7E68 ADD X0, X8, 0x138
	0x03CE7E6C LDP X2, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+16]
	007 Call Native.YGNodeFree, X0
	008 Move X0, X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X1, X31
	012 Move X30, [X31+32]
	013 Move X21, [X31+40]
	014 Call Object.Finalize, X0
	015 Return 
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X21, X0
	018 Move X0, X21
	019 Call 0x3EB2AD0
	020 Move X20, [X0]
	021 Call 0x3EB2AE0
	022 Move X0, X19
	023 Move X1, X31
	024 Call Object.Finalize, X0
	025 Compare X20, 0
	026 JumpIfNotEqual {33}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 
	032 Move X20, X31
	033 Move X0, X20
	034 Call 0x1C17F18
	035 Move X21, X0
	036 Move X0, X19
	037 Move X1, X31
	038 Call Object.Finalize, X0
	039 Compare X20, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X21
	042 Call 0x1D2D690
	043 Move X0, X20
	044 Call 0x1C17F18
	045 Call 0x1991590

Method: System.Void set_Config(UnityEngine.Yoga.YogaConfig value)

Disassembly:
	0x03CE7E70 MOV X0, X19
	0x03CE7E74 LDP X20, X19, [X31 + 0x10]
	0x03CE7E78 LDR X30, [X31], #0x20
	0x03CE7E7C BR X2
	0x03CE7E80 BL 0x1C16F20
	0x03CE7E84 STR X30, [X31 - 0x20]!
	0x03CE7E88 STP X20, X19, [X31 + 0x10]
	0x03CE7E8C ADRP X20, 0x700000
	0x03CE7E90 LDRB W8, [X20 + 0x717]
	0x03CE7E94 MOV X19, X0
	0x03CE7E98 TBNZ X8, 0x0, 0x3CE7EBC
	0x03CE7E9C ADRP X0, 0x47B000
	0x03CE7EA0 LDR X0, [X0 + 0x690]
	0x03CE7EA4 BL 0x1C16CF4
	0x03CE7EA8 ADRP X0, 0x47B000
	0x03CE7EAC LDR X0, [X0 + 0x698]
	0x03CE7EB0 BL 0x1C16CF4
	0x03CE7EB4 MOVZ W8, 0x1
	0x03CE7EB8 STRB W8, [X20 + 0x717]
	0x03CE7EBC ADRP X20, 0x47B000
	0x03CE7EC0 LDR X19, [X19 + 0x28]
	0x03CE7EC4 LDR X20, [X20 + 0x698]
	0x03CE7EC8 CBZ X19, 0x3CE7F00
	0x03CE7ECC LDR X8, [X19]
	0x03CE7ED0 LDR X1, [X20]
	0x03CE7ED4 LDRH W9, [X8 + 0x12E]
	0x03CE7ED8 CBZ X9, 0x3CE7F8C
	0x03CE7EDC LDR X10, [X8 + 0xB0]
	0x03CE7EE0 ADD X10, X10, 0x8
	0x03CE7EE4 LDUR X11, [X10 - 0x8]
	0x03CE7EE8 CMP X11, X1
	0x03CE7EEC B.EQ 0x3CE7F9C
	0x03CE7EF0 SUBS X9, X9, 0x1
	0x03CE7EF4 ADD X10, X10, 0x10
	0x03CE7EF8 B.NE 0x3CE7EE4
	0x03CE7EFC B 0x3CE7F8C
	0x03CE7F00 ADRP X8, 0x47B000
	0x03CE7F04 LDR X8, [X8 + 0x690]
	0x03CE7F08 LDR X19, [X8]
	0x03CE7F0C LDR X8, [X19 + 0x38]
	0x03CE7F10 CBNZ X8, 0x3CE7F20
	0x03CE7F14 MOV X0, X19
	0x03CE7F18 BL 0x1C5C6E0
	0x03CE7F1C LDR X8, [X19 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x701000
	006 Move W8, [X21+1809]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {17}
	013 Compare X20, 0
	014 JumpIfEqual {24}
	015 Compare X19, 0
	016 JumpIfNotEqual {36}
	017 Move X0, 0x47C000
	018 Move X0, [X0+1584]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1809], W8
	022 Compare X20, 0
	023 JumpIfNotEqual {15}
	024 Move X20, 0x47C000
	025 Move X20, [X20+1584]
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move X20, [X8]
	034 Compare X19, 0
	035 JumpIfEqual {57}
	036 Move [X19+24], X20
	037 Compare X20, 0
	038 JumpIfEqual {57}
	039 Move X21, 0x701000
	040 Move X19, [X19+16]
	041 Move X2, [X21+1296]
	042 Move X20, [X20+16]
	043 Compare X2, 0
	044 JumpIfNotEqual {50}
	045 Move X0, -52383744
	046 Add X0, X0, 2505
	047 Call 0x1C17CB8
	048 Move X2, X0
	049 Move [X21+1296], X0
	050 Move X0, X19
	051 Move X1, X20
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 CallNoReturn X2
	057 Call 0x1C17F20

Method: System.Boolean get_IsDirty()

Disassembly:
	0x03CE7F20 LDR X0, [X8 + 0x10]
	0x03CE7F24 LDRB W8, [X0 + 0x135]
	0x03CE7F28 TBNZ X8, 0x0, 0x3CE7F30
	0x03CE7F2C BL 0x1C5C684
	0x03CE7F30 LDR W8, [X0 + 0xE0]
	0x03CE7F34 CBNZ W8, 0x3CE7F3C
	0x03CE7F38 BL 0x1C16DFC
	0x03CE7F3C LDR X8, [X19 + 0x38]
	0x03CE7F40 LDR X0, [X8 + 0x10]
	0x03CE7F44 LDRB W8, [X0 + 0x135]
	0x03CE7F48 TBNZ X8, 0x0, 0x3CE7F50
	0x03CE7F4C BL 0x1C5C684
	0x03CE7F50 LDR X8, [X0 + 0xB8]
	0x03CE7F54 LDR X19, [X8]
	0x03CE7F58 CBZ X19, 0x3CE7FBC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X1, [X20+1384]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52367360
	010 Add X0, X0, 2841
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1384], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void MarkDirty()

Disassembly:
	0x03CE7F5C LDR X8, [X19]
	0x03CE7F60 LDR X1, [X20]
	0x03CE7F64 LDRH W9, [X8 + 0x12E]
	0x03CE7F68 CBZ X9, 0x3CE7F8C
	0x03CE7F6C LDR X10, [X8 + 0xB0]
	0x03CE7F70 ADD X10, X10, 0x8
	0x03CE7F74 LDUR X11, [X10 - 0x8]
	0x03CE7F78 CMP X11, X1
	0x03CE7F7C B.EQ 0x3CE7F9C
	0x03CE7F80 SUBS X9, X9, 0x1
	0x03CE7F84 ADD X10, X10, 0x10
	0x03CE7F88 B.NE 0x3CE7F74
	0x03CE7F8C MOV X0, X19
	0x03CE7F90 MOV W2, W31
	0x03CE7F94 BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X1, [X20+1376]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52318208
	010 Add X0, X0, 2311
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1376], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_HasNewLayout()

Disassembly:
	0x03CE7F98 B 0x3CE7FA8
	0x03CE7F9C LDRSW X9, [X10]
	0x03CE7FA0 ADD X8, X8, X9, 0x4, LSL
	0x03CE7FA4 ADD X0, X8, 0x138
	0x03CE7FA8 LDP X2, X1, [X0]
	0x03CE7FAC MOV X0, X19
	0x03CE7FB0 LDP X20, X19, [X31 + 0x10]
	0x03CE7FB4 LDR X30, [X31], #0x20
	0x03CE7FB8 BR X2
	0x03CE7FBC BL 0x1C16F20
	0x03CE7FC0 FMOV W0, S0
	0x03CE7FC4 MOVZ W9, 0x1
	0x03CE7FC8 AND W8, W0, 0x7FFFFFFF
	0x03CE7FCC MOVK W9, 0x7F800000
	0x03CE7FD0 CMP W8, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x701000
	005 Move X1, [X20+1424]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52228096
	010 Add X0, X0, 903
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1424], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_IsMeasureDefined()

Disassembly:
	0x03CE7FD4 CSET W8, CC
	0x03CE7FD8 BFM X0, X8, 0x20, 0x0
	0x03CE7FDC RET
	0x03CE7FE0 SUB X31, X31, 0x20

ISIL:
	001 Move X8, [X0+48]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsBaselineDefined()

Disassembly:
	0x03CE7FE4 STP X30, X19, [X31 + 0x10]
	0x03CE7FE8 LDR W8, [X0 + 0x4]
	0x03CE7FEC UBFM X9, X1, 0x20, 0x3F
	0x03CE7FF0 CMP W8, W9

ISIL:
	001 Move X8, [X0+56]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void CopyStyle(UnityEngine.Yoga.YogaNode srcNode)

Disassembly:
	0x03CE7FF4 B.NE 0x3CE8020
	0x03CE7FF8 LDR V1, [X0]
	0x03CE7FFC MOV X19, X0
	0x03CE8000 FMOV S0, W1
	0x03CE8004 ADD X0, X31, 0xC
	0x03CE8008 MOV X1, X31
	0x03CE800C STR S1, [X31 + 0xC]
	0x03CE8010 BL 0x338FDC0
	0x03CE8014 TBZ X0, 0x0, 0x3CE8028
	0x03CE8018 MOVZ W0, 0x1
	0x03CE801C B 0x3CE8034
	0x03CE8020 MOV W0, W31
	0x03CE8024 B 0x3CE8034
	0x03CE8028 LDR W8, [X19 + 0x4]
	0x03CE802C CMP W8, 0x0
	0x03CE8030 CSET W0, EQ
	0x03CE8034 LDP X30, X19, [X31 + 0x10]
	0x03CE8038 ADD X31, X31, 0x20
	0x03CE803C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {26}
	007 Move X21, 0x700000
	008 Move X19, [X0+16]
	009 Call 0x3EB2764
	010 Return 
	011 Move X20, [X1+16]
	012 Compare X2, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -52191232
	015 Add X0, X0, 1752
	016 Call 0x1C17CB8
	017 Move X2, X0
	018 Move [X21+1392], X0
	019 Move X0, X19
	020 Move X1, X20
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 CallNoReturn X2
	026 Call 0x1C17F20

Method: System.Void set_FlexDirection(UnityEngine.Yoga.YogaFlexDirection value)

Disassembly:
	0x03CE8040 STP X30, X21, [X31 - 0x20]!
	0x03CE8044 STP X20, X19, [X31 + 0x10]
	0x03CE8048 ADRP X21, 0x6FF000
	0x03CE804C LDRB W8, [X21 + 0x718]
	0x03CE8050 MOV X20, X1
	0x03CE8054 MOV X19, X0
	0x03CE8058 TBNZ X8, 0x0, 0x3CE8070
	0x03CE805C ADRP X0, 0x47A000
	0x03CE8060 LDR X0, [X0 + 0x6A0]
	0x03CE8064 BL 0x1C16CF4
	0x03CE8068 MOVZ W8, 0x1
	0x03CE806C STRB W8, [X21 + 0x718]
	0x03CE8070 CBZ X20, 0x3CE808C
	0x03CE8074 ADRP X8, 0x47A000
	0x03CE8078 LDR X8, [X8 + 0x6A0]
	0x03CE807C LDR X9, [X20]
	0x03CE8080 LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1440]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52256768
	012 Add X0, X0, 2059
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1440], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_JustifyContent(UnityEngine.Yoga.YogaJustify value)

Disassembly:
	0x03CE8084 CMP X9, X8
	0x03CE8088 B.EQ 0x3CE809C
	0x03CE808C LDP X20, X19, [X31 + 0x10]
	0x03CE8090 MOV W0, W31
	0x03CE8094 LDP X30, X21, [X31], #0x20
	0x03CE8098 RET
	0x03CE809C MOV X0, X20
	0x03CE80A0 BL 0x1C16E08
	0x03CE80A4 LDR X1, [X0]
	0x03CE80A8 MOV X0, X19
	0x03CE80AC LDP X20, X19, [X31 + 0x10]
	0x03CE80B0 LDP X30, X21, [X31], #0x20
	0x03CE80B4 B 0x3CE7FE0
	0x03CE80B8 SUB X31, X31, 0x20
	0x03CE80BC STP X30, X19, [X31 + 0x10]
	0x03CE80C0 LDR V0, [X0]
	0x03CE80C4 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1448]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52264960
	012 Add X0, X0, 3413
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1448], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_Display(UnityEngine.Yoga.YogaDisplay value)

Disassembly:
	0x03CE80C8 ADD X0, X31, 0xC
	0x03CE80CC MOV X1, X31
	0x03CE80D0 STR S0, [X31 + 0xC]
	0x03CE80D4 BL 0x338FE0C
	0x03CE80D8 LDR W8, [X19 + 0x4]
	0x03CE80DC LDP X30, X19, [X31 + 0x10]
	0x03CE80E0 MOVZ W9, 0x18D
	0x03CE80E4 MUL W9, W0, W9
	0x03CE80E8 EOR W0, W9, W8, 0x0
	0x03CE80EC ADD X31, X31, 0x20
	0x03CE80F0 RET
	0x03CE80F4 MOVZ X0, 0x7FC00000
	0x03CE80F8 MOVK X0, 0x3
	0x03CE80FC RET
	0x03CE8100 FMOV W0, S0
	0x03CE8104 MOVZ W9, 0x1
	0x03CE8108 AND W8, W0, 0x7FFFFFFF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1504]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52396032
	012 Add X0, X0, 2127
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1504], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_AlignItems(UnityEngine.Yoga.YogaAlign value)

Disassembly:
	0x03CE810C MOVK W9, 0x7F800000
	0x03CE8110 CMP W8, W9
	0x03CE8114 CSET W8, CC
	0x03CE8118 BFM X0, X8, 0x1F, 0x0
	0x03CE811C RET
	0x03CE8120 FMOV W0, S0
	0x03CE8124 MOVZ W9, 0x1
	0x03CE8128 AND W8, W0, 0x7FFFFFFF
	0x03CE812C MOVK W9, 0x7F800000
	0x03CE8130 CMP W8, W9
	0x03CE8134 CSET W8, CC
	0x03CE8138 BFM X0, X8, 0x20, 0x0
	0x03CE813C RET
	0x03CE8140 FMUL S0, S0, S1
	0x03CE8144 FMOV S3, 0.5
	0x03CE8148 FADD S0, S0, S3
	0x03CE814C FADD S0, S0, S2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1464]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52240384
	012 Add X0, X0, 833
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1464], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_AlignSelf(UnityEngine.Yoga.YogaAlign value)

Disassembly:
	0x03CE8150 FRINTM S0, S0
	0x03CE8154 FDIV S0, S0, S1
	0x03CE8158 RET
	0x03CE815C FMUL S0, S0, S1
	0x03CE8160 FADD S0, S0, S2
	0x03CE8164 FRINTP S0, S0
	0x03CE8168 FDIV S0, S0, S1
	0x03CE816C RET
	0x03CE8170 STR X30, [X31 - 0x30]!
	0x03CE8174 STP X22, X21, [X31 + 0x10]
	0x03CE8178 STP X20, X19, [X31 + 0x20]
	0x03CE817C ADRP X22, 0x6FF000
	0x03CE8180 ADRP X21, 0x433000
	0x03CE8184 LDRB W8, [X22 + 0x719]
	0x03CE8188 LDR X21, [X21 + 0x620]
	0x03CE818C MOV X19, X4
	0x03CE8190 MOV X20, X3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1472]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52346880
	012 Add X0, X0, 2947
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1472], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_AlignContent(UnityEngine.Yoga.YogaAlign value)

Disassembly:
	0x03CE8194 TBNZ X8, 0x0, 0x3CE81AC
	0x03CE8198 ADRP X0, 0x433000
	0x03CE819C LDR X0, [X0 + 0x620]
	0x03CE81A0 BL 0x1C16CF4
	0x03CE81A4 MOVZ W8, 0x1
	0x03CE81A8 STRB W8, [X22 + 0x719]
	0x03CE81AC LDR X0, [X21]
	0x03CE81B0 LDR W8, [X0 + 0xE0]
	0x03CE81B4 CBNZ W8, 0x3CE81C0
	0x03CE81B8 BL 0x1C16DFC
	0x03CE81BC LDR X0, [X21]
	0x03CE81C0 LDR X8, [X0 + 0xB8]
	0x03CE81C4 LDP X22, X21, [X31 + 0x10]
	0x03CE81C8 MOV W0, W31
	0x03CE81CC LDR W8, [X8]
	0x03CE81D0 STR W8, [X20]
	0x03CE81D4 STP X31, X31, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1456]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52371456
	012 Add X0, X0, 2895
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1456], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_PositionType(UnityEngine.Yoga.YogaPositionType value)

Disassembly:
	0x03CE81D8 LDP X20, X19, [X31 + 0x20]
	0x03CE81DC LDR X30, [X31], #0x30
	0x03CE81E0 RET
	0x03CE81E4 RET
	0x03CE81E8 RET
	0x03CE81EC RET
	0x03CE81F0 RET
	0x03CE81F4 RET
	0x03CE81F8 LDR X8, [X0]
	0x03CE81FC LDP X3, X2, [X8 + 0x1A8]
	0x03CE8200 BR X3
	0x03CE8204 LDR X8, [X0]
	0x03CE8208 LDP X3, X2, [X8 + 0x1B8]
	0x03CE820C BR X3
	0x03CE8210 LDR X8, [X0]
	0x03CE8214 LDP X3, X2, [X8 + 0x1C8]
	0x03CE8218 BR X3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1480]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52338688
	012 Add X0, X0, 3119
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1480], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_Wrap(UnityEngine.Yoga.YogaWrap value)

Disassembly:
	0x03CE821C STR X30, [X31 - 0x20]!
	0x03CE8220 STP X20, X19, [X31 + 0x10]
	0x03CE8224 ADRP X20, 0x6FF000
	0x03CE8228 LDRB W8, [X20 + 0x71A]
	0x03CE822C MOV X19, X0
	0x03CE8230 TBNZ X8, 0x0, 0x3CE8254
	0x03CE8234 ADRP X0, 0x435000
	0x03CE8238 LDR X0, [X0 + 0xD08]
	0x03CE823C BL 0x1C16CF4
	0x03CE8240 ADRP X0, 0x47A000
	0x03CE8244 LDR X0, [X0 + 0x6A8]
	0x03CE8248 BL 0x1C16CF4
	0x03CE824C MOVZ W8, 0x1
	0x03CE8250 STRB W8, [X20 + 0x71A]
	0x03CE8254 CBZ X19, 0x3CE828C
	0x03CE8258 ADRP X9, 0x435000
	0x03CE825C LDR X9, [X9 + 0xD08]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1488]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52371456
	012 Add X0, X0, 2989
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1488], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_Flex(System.Single value)

Disassembly:
	0x03CE8260 LDR X8, [X19]
	0x03CE8264 LDR X9, [X9]
	0x03CE8268 LDRB W11, [X8 + 0x130]
	0x03CE826C LDRB W10, [X9 + 0x130]
	0x03CE8270 CMP W11, W10
	0x03CE8274 B.CC 0x3CE828C
	0x03CE8278 LDR X11, [X8 + 0xC8]
	0x03CE827C ADD X10, X11, X10, 0x3, LSL
	0x03CE8280 LDUR X10, [X10 - 0x8]
	0x03CE8284 CMP X10, X9
	0x03CE8288 B.EQ 0x3CE8298
	0x03CE828C LDP X20, X19, [X31 + 0x10]
	0x03CE8290 LDR X30, [X31], #0x20
	0x03CE8294 RET
	0x03CE8298 LDR X9, [X8 + 0x438]
	0x03CE829C LDR X2, [X8 + 0x440]
	0x03CE82A0 MOVZ W1, 0x6
	0x03CE82A4 MOV X0, X19
	0x03CE82A8 BLR X9

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x700000
	006 Move X1, [X20+1512]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52289536
	012 Add X0, X0, 3549
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+1512], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_FlexGrow(System.Single value)

Disassembly:
	0x03CE82AC CBZ X0, 0x3CE828C
	0x03CE82B0 ADRP X8, 0x47A000
	0x03CE82B4 LDR X8, [X8 + 0x6A8]
	0x03CE82B8 LDR X9, [X0]
	0x03CE82BC LDR X8, [X8]
	0x03CE82C0 LDRB W11, [X9 + 0x130]
	0x03CE82C4 LDRB W10, [X8 + 0x130]
	0x03CE82C8 CMP W11, W10
	0x03CE82CC B.CC 0x3CE828C
	0x03CE82D0 LDR X9, [X9 + 0xC8]
	0x03CE82D4 ADD X9, X9, X10, 0x3, LSL
	0x03CE82D8 LDUR X9, [X9 - 0x8]
	0x03CE82DC CMP X9, X8
	0x03CE82E0 CSEL X8, X0, X31, EQ
	0x03CE82E4 B.NE 0x3CE828C
	0x03CE82E8 CBZ X8, 0x3CE8304
	0x03CE82EC LDR X0, [X8 + 0x28]
	0x03CE82F0 CBZ X0, 0x3CE828C
	0x03CE82F4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x700000
	006 Move X1, [X20+1520]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52273152
	012 Add X0, X0, 3135
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+1520], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_FlexShrink(System.Single value)

Disassembly:
	0x03CE82F8 MOV X1, X31
	0x03CE82FC LDR X30, [X31], #0x20
	0x03CE8300 B 0x3D273DC
	0x03CE8304 BL 0x1C16F20
	0x03CE8308 STR X30, [X31 - 0x10]!
	0x03CE830C LDR X0, [X0 + 0x10]
	0x03CE8310 CBZ X0, 0x3CE8324
	0x03CE8314 AND X1, X1, 0x0
	0x03CE8318 MOV X3, X31
	0x03CE831C LDR X30, [X31], #0x10
	0x03CE8320 B 0x3DE04A0
	0x03CE8324 BL 0x1C16F20
	0x03CE8328 STP X30, X21, [X31 - 0x20]!
	0x03CE832C STP X20, X19, [X31 + 0x10]
	0x03CE8330 ADRP X21, 0x6FF000
	0x03CE8334 ADRP X20, 0x47A000
	0x03CE8338 LDRB W8, [X21 + 0x71B]
	0x03CE833C LDR X20, [X20 + 0x6B0]
	0x03CE8340 MOV X19, X0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x700000
	006 Move X1, [X20+1528]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52224000
	012 Add X0, X0, 1614
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+1528], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_FlexBasis(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE8344 TBNZ X8, 0x0, 0x3CE835C
	0x03CE8348 ADRP X0, 0x47A000
	0x03CE834C LDR X0, [X0 + 0x6B0]
	0x03CE8350 BL 0x1C16CF4
	0x03CE8354 MOVZ W8, 0x1
	0x03CE8358 STRB W8, [X21 + 0x71B]
	0x03CE835C LDR X0, [X20]
	0x03CE8360 LDR W8, [X0 + 0xE0]
	0x03CE8364 CBNZ W8, 0x3CE836C
	0x03CE8368 BL 0x1C16DFC
	0x03CE836C ADRP X21, 0x6FF000
	0x03CE8370 LDRB W8, [X21 + 0x7E5]
	0x03CE8374 CBNZ W8, 0x3CE838C
	0x03CE8378 ADRP X0, 0x47A000
	0x03CE837C LDR X0, [X0 + 0x6B0]
	0x03CE8380 BL 0x1C16CF4
	0x03CE8384 MOVZ W8, 0x1
	0x03CE8388 STRB W8, [X21 + 0x7E5]
	0x03CE838C LDR X0, [X20]
	0x03CE8390 LDR W8, [X0 + 0xE0]
	0x03CE8394 CBNZ W8, 0x3CE83A0
	0x03CE8398 BL 0x1C16DFC
	0x03CE839C LDR X0, [X20]
	0x03CE83A0 LDR X8, [X0 + 0xB8]
	0x03CE83A4 MOV X0, X19
	0x03CE83A8 MOV X1, X31
	0x03CE83AC LDR X8, [X8]
	0x03CE83B0 STR X8, [X19 + 0x10]
	0x03CE83B4 LDP X20, X19, [X31 + 0x10]
	0x03CE83B8 LDP X30, X21, [X31], #0x20
	0x03CE83BC B 0x33BDD8C
	0x03CE83C0 STP X30, X21, [X31 - 0x20]!
	0x03CE83C4 STP X20, X19, [X31 + 0x10]
	0x03CE83C8 LDR X8, [X2 + 0x8]
	0x03CE83CC STP X1, X2, [X0 + 0x20]
	0x03CE83D0 MOV X19, X0
	0x03CE83D4 MOV X20, X1
	0x03CE83D8 STR X8, [X0 + 0x10]
	0x03CE83DC LDRB W21, [X2 + 0x52]
	0x03CE83E0 STR X0, [X0 + 0x40]
	0x03CE83E4 MOV X0, X2
	0x03CE83E8 BL 0x1C16D84
	0x03CE83EC TBZ X0, 0x0, 0x3CE8404
	0x03CE83F0 CMP W21, 0x2
	0x03CE83F4 B.NE 0x3CE8420
	0x03CE83F8 ADRP X8, 0xFFFFFFFFFDF27000
	0x03CE83FC ADD X8, X8, 0x43C

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, X1
	006 ShiftRight X8, 32
	007 And X8, X8, 0x7FFFFFFF
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move S8, W1
	010 Move X20, 0x700000
	011 Move X1, [X20+1544]
	012 Move X19, [X0+16]
	013 Compare X1, 0
	014 JumpIfNotEqual {46}
	015 Move X0, -52338688
	016 Add X0, X0, 3220
	017 Call 0x1C17CB8
	018 Move X1, X0
	019 Move [X20+1544], X0
	020 Move X19, [X0+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X20, 0x700000
	023 Move X1, [X20+1552]
	024 Compare X1, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -52396032
	027 Add X0, X0, 2218
	028 Call 0x1C17CB8
	029 Move X1, X0
	030 Move [X20+1552], X0
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+8]
	035 Move V8, [X31+32]
	036 CallNoReturn X1
	037 Move X20, 0x700000
	038 Move X1, [X20+1536]
	039 Compare X1, 0
	040 JumpIfNotEqual {46}
	041 Move X0, -52289536
	042 Add X0, X0, 3622
	043 Call 0x1C17CB8
	044 Move X1, X0
	045 Move [X20+1536], X0
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+8]
	050 Move V0, V8
	051 Move V8, [X31+32]
	052 CallNoReturn X1

Method: System.Void set_Width(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE8400 B 0x3CE8414
	0x03CE8404 CMP W21, 0x1
	0x03CE8408 B.NE 0x3CE841C
	0x03CE840C ADRP X8, 0xFFFFFFFFFDF27000
	0x03CE8410 ADD X8, X8, 0x418
	0x03CE8414 STR X8, [X19 + 0x18]
	0x03CE8418 B 0x3CE8430
	0x03CE841C CBZ X20, 0x3CE8448
	0x03CE8420 LDR X8, [X19 + 0x10]
	0x03CE8424 LDR X9, [X19 + 0x20]
	0x03CE8428 STR X8, [X19 + 0x18]
	0x03CE842C STR X9, [X19 + 0x40]
	0x03CE8430 ADRP X8, 0xFFFFFFFFFDF27000
	0x03CE8434 ADD X8, X8, 0x3B4
	0x03CE8438 STR X8, [X19 + 0x38]
	0x03CE843C LDP X20, X19, [X31 + 0x10]
	0x03CE8440 LDP X30, X21, [X31], #0x20
	0x03CE8444 RET
	0x03CE8448 ADRP X1, 0xFFFFFFFFFCE33000
	0x03CE844C ADD X1, X1, 0xEE3
	0x03CE8450 MOV X0, X31
	0x03CE8454 BL 0x1C16F3C
	0x03CE8458 MOV X1, X31
	0x03CE845C BL 0x1C16DEC
	0x03CE8460 LDR X8, [X0 + 0x40]
	0x03CE8464 LDR X4, [X0 + 0x18]
	0x03CE8468 LDR X3, [X0 + 0x28]
	0x03CE846C MOV X0, X8
	0x03CE8470 BR X4
	0x03CE8474 LDR X8, [X0 + 0x20]
	0x03CE8478 CBZ X8, 0x3CE8484
	0x03CE847C MOVZ W0, 0x1
	0x03CE8480 RET
	0x03CE8484 LDR X8, [X0 + 0x28]
	0x03CE8488 CMP X8, 0x0
	0x03CE848C CSET W0, NE
	0x03CE8490 RET
	0x03CE8494 STP X30, X21, [X31 - 0x20]!
	0x03CE8498 STP X20, X19, [X31 + 0x10]
	0x03CE849C ADRP X21, 0x6FF000
	0x03CE84A0 LDRB W8, [X21 + 0x71C]
	0x03CE84A4 MOV X20, X1
	0x03CE84A8 MOV X19, X0
	0x03CE84AC TBNZ X8, 0x0, 0x3CE84D0
	0x03CE84B0 ADRP X0, 0x47A000
	0x03CE84B4 LDR X0, [X0 + 0x6B8]
	0x03CE84B8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, X1
	006 ShiftRight X8, 32
	007 And X8, X8, 0x7FFFFFFF
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move S8, W1
	010 Move X20, 0x700000
	011 Move X1, [X20+1568]
	012 Move X19, [X0+16]
	013 Compare X1, 0
	014 JumpIfNotEqual {46}
	015 Move X0, -52183040
	016 Add X0, X0, 2676
	017 Call 0x1C17CB8
	018 Move X1, X0
	019 Move [X20+1568], X0
	020 Move X19, [X0+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X20, 0x700000
	023 Move X1, [X20+1576]
	024 Compare X1, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -52289536
	027 Add X0, X0, 3700
	028 Call 0x1C17CB8
	029 Move X1, X0
	030 Move [X20+1576], X0
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+8]
	035 Move V8, [X31+32]
	036 CallNoReturn X1
	037 Move X20, 0x700000
	038 Move X1, [X20+1560]
	039 Compare X1, 0
	040 JumpIfNotEqual {46}
	041 Move X0, -52314112
	042 Add X0, X0, 2969
	043 Call 0x1C17CB8
	044 Move X1, X0
	045 Move [X20+1560], X0
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+8]
	050 Move V0, V8
	051 Move V8, [X31+32]
	052 CallNoReturn X1

Method: System.Void set_Height(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE84BC ADRP X0, 0x47A000
	0x03CE84C0 LDR X0, [X0 + 0x6C0]
	0x03CE84C4 BL 0x1C16CF4
	0x03CE84C8 MOVZ W8, 0x1
	0x03CE84CC STRB W8, [X21 + 0x71C]
	0x03CE84D0 LDR X0, [X19 + 0x38]
	0x03CE84D4 CBZ X0, 0x3CE855C
	0x03CE84D8 ADRP X9, 0x47A000
	0x03CE84DC LDR X9, [X9 + 0x6B8]
	0x03CE84E0 LDR W10, [X0 + 0x1C]
	0x03CE84E4 LDR X8, [X0 + 0x10]
	0x03CE84E8 LDR X9, [X9]
	0x03CE84EC ADD W10, W10, 0x1
	0x03CE84F0 STR W10, [X0 + 0x1C]
	0x03CE84F4 CBZ X8, 0x3CE855C
	0x03CE84F8 LDRSW X10, [X0 + 0x18]
	0x03CE84FC LDR W11, [X8 + 0x18]
	0x03CE8500 CMP W10, W11
	0x03CE8504 B.CS 0x3CE851C
	0x03CE8508 ADD W9, W10, 0x1
	0x03CE850C ADD X8, X8, X10, 0x3, LSL
	0x03CE8510 STR W9, [X0 + 0x18]
	0x03CE8514 STR X20, [X8 + 0x20]
	0x03CE8518 B 0x3CE8530
	0x03CE851C LDR X8, [X9 + 0x20]
	0x03CE8520 MOV X1, X20
	0x03CE8524 LDR X8, [X8 + 0xC0]
	0x03CE8528 LDR X2, [X8 + 0x70]
	0x03CE852C BL 0x301BF90
	0x03CE8530 LDR X8, [X19 + 0x38]
	0x03CE8534 CBZ X8, 0x3CE855C
	0x03CE8538 LDR W8, [X8 + 0x18]
	0x03CE853C CMP W8, 0x1
	0x03CE8540 B.NE 0x3CE8550
	0x03CE8544 MOV X0, X31
	0x03CE8548 BL 0x3C113A8
	0x03CE854C STR W0, [X19 + 0x30]
	0x03CE8550 LDP X20, X19, [X31 + 0x10]
	0x03CE8554 LDP X30, X21, [X31], #0x20
	0x03CE8558 RET
	0x03CE855C BL 0x1C16F20
	0x03CE8560 STP X30, X21, [X31 - 0x20]!
	0x03CE8564 STP X20, X19, [X31 + 0x10]
	0x03CE8568 ADRP X21, 0x6FF000
	0x03CE856C LDRB W8, [X21 + 0x71D]
	0x03CE8570 MOV X20, X1
	0x03CE8574 MOV X19, X0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, X1
	006 ShiftRight X8, 32
	007 And X8, X8, 0x7FFFFFFF
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move S8, W1
	010 Move X20, 0x700000
	011 Move X1, [X20+1592]
	012 Move X19, [X0+16]
	013 Compare X1, 0
	014 JumpIfNotEqual {46}
	015 Move X0, -52281344
	016 Add X0, X0, 2676
	017 Call 0x1C17CB8
	018 Move X1, X0
	019 Move [X20+1592], X0
	020 Move X19, [X0+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X20, 0x700000
	023 Move X1, [X20+1600]
	024 Compare X1, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -52355072
	027 Add X0, X0, 3572
	028 Call 0x1C17CB8
	029 Move X1, X0
	030 Move [X20+1600], X0
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+8]
	035 Move V8, [X31+32]
	036 CallNoReturn X1
	037 Move X20, 0x700000
	038 Move X1, [X20+1584]
	039 Compare X1, 0
	040 JumpIfNotEqual {46}
	041 Move X0, -52338688
	042 Add X0, X0, 3305
	043 Call 0x1C17CB8
	044 Move X1, X0
	045 Move [X20+1584], X0
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+8]
	050 Move V0, V8
	051 Move V8, [X31+32]
	052 CallNoReturn X1

Method: System.Void set_MaxWidth(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE8578 TBNZ X8, 0x0, 0x3CE859C
	0x03CE857C ADRP X0, 0x47A000
	0x03CE8580 LDR X0, [X0 + 0x6C8]
	0x03CE8584 BL 0x1C16CF4
	0x03CE8588 ADRP X0, 0x47A000
	0x03CE858C LDR X0, [X0 + 0x6C0]
	0x03CE8590 BL 0x1C16CF4
	0x03CE8594 MOVZ W8, 0x1
	0x03CE8598 STRB W8, [X21 + 0x71D]
	0x03CE859C LDR X0, [X19 + 0x38]
	0x03CE85A0 CBZ X0, 0x3CE85F4
	0x03CE85A4 ADRP X8, 0x47A000
	0x03CE85A8 LDR X8, [X8 + 0x6C8]
	0x03CE85AC MOV X1, X20
	0x03CE85B0 LDR X2, [X8]
	0x03CE85B4 BL 0x301D7A8
	0x03CE85B8 LDR X8, [X19 + 0x38]
	0x03CE85BC CBZ X8, 0x3CE85F4
	0x03CE85C0 LDR W8, [X8 + 0x18]
	0x03CE85C4 CBZ W8, 0x3CE85D4
	0x03CE85C8 LDP X20, X19, [X31 + 0x10]
	0x03CE85CC LDP X30, X21, [X31], #0x20
	0x03CE85D0 RET
	0x03CE85D4 LDR X8, [X19 + 0x20]
	0x03CE85D8 CBNZ X8, 0x3CE85E4
	0x03CE85DC LDR X8, [X19 + 0x28]
	0x03CE85E0 CBZ X8, 0x3CE85C8
	0x03CE85E4 MOV X0, X19
	0x03CE85E8 LDP X20, X19, [X31 + 0x10]
	0x03CE85EC LDP X30, X21, [X31], #0x20
	0x03CE85F0 B 0x3CE85F8

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, [X0+16]
	006 Move X8, X1
	007 ShiftRight X8, 32
	008 And X8, X8, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move S8, W1
	011 Move X20, 0x700000
	012 Move X1, [X20+1648]
	013 Compare X1, 0
	014 JumpIfNotEqual {29}
	015 Move X0, -52330496
	016 Add X0, X0, 2475
	017 Call 0x1C17CB8
	018 Move X1, X0
	019 Move [X20+1648], X0
	020 Move X20, 0x700000
	021 Move X1, [X20+1640]
	022 Compare X1, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -52207616
	025 Add X0, X0, 1924
	026 Call 0x1C17CB8
	027 Move X1, X0
	028 Move [X20+1640], X0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+8]
	033 Move V0, V8
	034 Move V8, [X31+32]
	035 CallNoReturn X1

Method: System.Void set_MaxHeight(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE85F4 BL 0x1C16F20
	0x03CE85F8 STR X30, [X31 - 0x20]!
	0x03CE85FC STP X20, X19, [X31 + 0x10]
	0x03CE8600 ADRP X20, 0x6FF000
	0x03CE8604 LDRB W8, [X20 + 0x720]
	0x03CE8608 MOV X19, X0
	0x03CE860C TBNZ X8, 0x0, 0x3CE8624
	0x03CE8610 ADRP X0, 0x47A000
	0x03CE8614 LDR X0, [X0 + 0x6D0]
	0x03CE8618 BL 0x1C16CF4
	0x03CE861C MOVZ W8, 0x1
	0x03CE8620 STRB W8, [X20 + 0x720]
	0x03CE8624 LDR X0, [X19 + 0x20]
	0x03CE8628 CBZ X0, 0x3CE866C
	0x03CE862C MOV X1, X31
	0x03CE8630 BL 0x3DC1DC4
	0x03CE8634 LDR X0, [X19 + 0x28]
	0x03CE8638 STR X31, [X19 + 0x20]
	0x03CE863C CBZ X0, 0x3CE866C
	0x03CE8640 MOV X1, X31
	0x03CE8644 BL 0x3DC1DC4
	0x03CE8648 LDR X0, [X19 + 0x18]
	0x03CE864C STR X31, [X19 + 0x28]
	0x03CE8650 CBZ X0, 0x3CE866C
	0x03CE8654 ADRP X8, 0x47A000
	0x03CE8658 LDR X8, [X8 + 0x6D0]
	0x03CE865C LDP X20, X19, [X31 + 0x10]
	0x03CE8660 LDR X1, [X8]
	0x03CE8664 LDR X30, [X31], #0x20
	0x03CE8668 B 0x2AA5220
	0x03CE866C BL 0x1C16F20

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, [X0+16]
	006 Move X8, X1
	007 ShiftRight X8, 32
	008 And X8, X8, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move S8, W1
	011 Move X20, 0x700000
	012 Move X1, [X20+1664]
	013 Compare X1, 0
	014 JumpIfNotEqual {29}
	015 Move X0, -52281344
	016 Add X0, X0, 2758
	017 Call 0x1C17CB8
	018 Move X1, X0
	019 Move [X20+1664], X0
	020 Move X20, 0x700000
	021 Move X1, [X20+1656]
	022 Compare X1, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -52379648
	025 Add X0, X0, 2978
	026 Call 0x1C17CB8
	027 Move X1, X0
	028 Move [X20+1656], X0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+8]
	033 Move V0, V8
	034 Move V8, [X31+32]
	035 CallNoReturn X1

Method: System.Void set_MinWidth(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE8670 STR X30, [X31 - 0x30]!
	0x03CE8674 STP X22, X21, [X31 + 0x10]
	0x03CE8678 STP X20, X19, [X31 + 0x20]
	0x03CE867C ADRP X20, 0x6FF000
	0x03CE8680 LDRB W8, [X20 + 0x71E]
	0x03CE8684 MOV X19, X0
	0x03CE8688 TBNZ X8, 0x0, 0x3CE86AC
	0x03CE868C ADRP X0, 0x47A000
	0x03CE8690 LDR X0, [X0 + 0x6C0]
	0x03CE8694 BL 0x1C16CF4
	0x03CE8698 ADRP X0, 0x47A000
	0x03CE869C LDR X0, [X0 + 0x6D8]
	0x03CE86A0 BL 0x1C16CF4
	0x03CE86A4 MOVZ W8, 0x1
	0x03CE86A8 STRB W8, [X20 + 0x71E]
	0x03CE86AC LDR X8, [X19 + 0x20]
	0x03CE86B0 CBNZ X8, 0x3CE86BC
	0x03CE86B4 LDR X8, [X19 + 0x28]
	0x03CE86B8 CBZ X8, 0x3CE870C
	0x03CE86BC MOV X0, X19
	0x03CE86C0 BL 0x3CE85F8
	0x03CE86C4 LDR X0, [X19 + 0x38]
	0x03CE86C8 CBZ X0, 0x3CE8708
	0x03CE86CC LDR W8, [X0 + 0x18]
	0x03CE86D0 SUBS W21, W8, 0x1
	0x03CE86D4 B.LT 0x3CE870C
	0x03CE86D8 ADRP X22, 0x47A000
	0x03CE86DC LDR X22, [X22 + 0x6D8]
	0x03CE86E0 MOV W20, W31
	0x03CE86E4 LDR X2, [X22]
	0x03CE86E8 MOV W1, W20

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, [X0+16]
	006 Move X8, X1
	007 ShiftRight X8, 32
	008 And X8, X8, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move S8, W1
	011 Move X20, 0x700000
	012 Move X1, [X20+1616]
	013 Compare X1, 0
	014 JumpIfNotEqual {29}
	015 Move X0, -52224000
	016 Add X0, X0, 1693
	017 Call 0x1C17CB8
	018 Move X1, X0
	019 Move [X20+1616], X0
	020 Move X20, 0x700000
	021 Move X1, [X20+1608]
	022 Compare X1, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -52396032
	025 Add X0, X0, 2286
	026 Call 0x1C17CB8
	027 Move X1, X0
	028 Move [X20+1608], X0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+8]
	033 Move V0, V8
	034 Move V8, [X31+32]
	035 CallNoReturn X1

Method: System.Void set_MinHeight(UnityEngine.Yoga.YogaValue value)

Disassembly:
	0x03CE86EC BL 0x301BCCC
	0x03CE86F0 BL 0x3CE821C
	0x03CE86F4 CMP W21, W20
	0x03CE86F8 B.EQ 0x3CE870C
	0x03CE86FC LDR X0, [X19 + 0x38]
	0x03CE8700 ADD W20, W20, 0x1
	0x03CE8704 CBNZ X0, 0x3CE86E4
	0x03CE8708 BL 0x1C16F20
	0x03CE870C LDP X20, X19, [X31 + 0x20]
	0x03CE8710 LDP X22, X21, [X31 + 0x10]
	0x03CE8714 LDR X30, [X31], #0x30
	0x03CE8718 RET
	0x03CE871C STP X30, X23, [X31 - 0x30]!
	0x03CE8720 STP X22, X21, [X31 + 0x10]
	0x03CE8724 STP X20, X19, [X31 + 0x20]
	0x03CE8728 ADRP X20, 0x6FF000
	0x03CE872C ADRP X23, 0x47A000
	0x03CE8730 LDRB W8, [X20 + 0x71F]
	0x03CE8734 LDR X23, [X23 + 0x6E0]
	0x03CE8738 MOV X19, X0
	0x03CE873C TBNZ X8, 0x0, 0x3CE8754
	0x03CE8740 ADRP X0, 0x47A000
	0x03CE8744 LDR X0, [X0 + 0x6E0]
	0x03CE8748 BL 0x1C16CF4
	0x03CE874C MOVZ W8, 0x1
	0x03CE8750 STRB W8, [X20 + 0x71F]
	0x03CE8754 LDR W8, [X19 + 0x48]
	0x03CE8758 MOV X1, X31
	0x03CE875C CMP W8, 0x1
	0x03CE8760 CSINC W0, W8, W31, GT
	0x03CE8764 BL 0x3C2B340

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, [X0+16]
	006 Move X8, X1
	007 ShiftRight X8, 32
	008 And X8, X8, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move S8, W1
	011 Move X20, 0x700000
	012 Move X1, [X20+1632]
	013 Compare X1, 0
	014 JumpIfNotEqual {29}
	015 Move X0, -52346880
	016 Add X0, X0, 3038
	017 Call 0x1C17CB8
	018 Move X1, X0
	019 Move [X20+1632], X0
	020 Move X20, 0x700000
	021 Move X1, [X20+1624]
	022 Compare X1, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -52191232
	025 Add X0, X0, 1822
	026 Call 0x1C17CB8
	027 Move X1, X0
	028 Move [X20+1624], X0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+8]
	033 Move V0, V8
	034 Move V8, [X31+32]
	035 CallNoReturn X1

Method: System.Single get_LayoutX()

Disassembly:
	0x03CE8768 LDR W8, [X19 + 0x44]
	0x03CE876C MOV X1, X31
	0x03CE8770 CMP W8, 0x1
	0x03CE8774 CSINC W0, W8, W31, GT
	0x03CE8778 BL 0x3C2B340
	0x03CE877C MOV W20, W0
	0x03CE8780 MOV X0, X31
	0x03CE8784 BL 0x3C3C214
	0x03CE8788 LDR W8, [X19 + 0x40]
	0x03CE878C CMP W20, W0
	0x03CE8790 CSEL W20, W20, W0, LT
	0x03CE8794 MOV X1, X31
	0x03CE8798 CMP W8, 0x1
	0x03CE879C CSINC W0, W8, W31, GT
	0x03CE87A0 BL 0x3C2B340

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move X1, [X20+1736]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52346880
	010 Add X0, X0, 3123
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1736], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single get_LayoutY()

Disassembly:
	0x03CE87A4 LDR X8, [X23]
	0x03CE87A8 CMP W0, W20
	0x03CE87AC CSEL W21, W0, W20, LT
	0x03CE87B0 BFM X21, X21, 0x20, 0x1F
	0x03CE87B4 MOV X0, X8
	0x03CE87B8 BFM X20, X20, 0x20, 0x1F
	0x03CE87BC BL 0x1C16F10
	0x03CE87C0 MOV W1, W31
	0x03CE87C4 MOV W2, W31
	0x03CE87C8 MOV X3, X21
	0x03CE87CC MOV X4, X20
	0x03CE87D0 MOV X5, X31
	0x03CE87D4 MOV X22, X0
	0x03CE87D8 BL 0x3DC1C64
	0x03CE87DC STR X22, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move X1, [X20+1744]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52396032
	010 Add X0, X0, 2464
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1744], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single get_LayoutRight()

Disassembly:
	0x03CE87E0 LDR X0, [X23]
	0x03CE87E4 BL 0x1C16F10
	0x03CE87E8 MOVZ W2, 0x1
	0x03CE87EC MOV W1, W31
	0x03CE87F0 MOV X3, X21
	0x03CE87F4 MOV X4, X20
	0x03CE87F8 MOV X5, X31
	0x03CE87FC MOV X22, X0
	0x03CE8800 BL 0x3DC1C64
	0x03CE8804 STR X22, [X19 + 0x28]
	0x03CE8808 LDP X20, X19, [X31 + 0x20]
	0x03CE880C LDP X22, X21, [X31 + 0x10]
	0x03CE8810 LDP X30, X23, [X31], #0x30
	0x03CE8814 RET
	0x03CE8818 SUB X31, X31, 0xA0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move X1, [X20+1752]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52150272
	010 Add X0, X0, 735
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1752], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single get_LayoutBottom()

Disassembly:
	0x03CE881C STP X30, X23, [X31 + 0x70]
	0x03CE8820 STP X22, X21, [X31 + 0x80]
	0x03CE8824 STP X20, X19, [X31 + 0x90]
	0x03CE8828 ADRP X23, 0x6FF000
	0x03CE882C LDRB W8, [X23 + 0x721]
	0x03CE8830 MOV X20, X4
	0x03CE8834 MOV X19, X3
	0x03CE8838 MOV X22, X2
	0x03CE883C MOV X21, X0
	0x03CE8840 TBNZ X8, 0x0, 0x3CE88A0
	0x03CE8844 ADRP X0, 0x47A000
	0x03CE8848 LDR X0, [X0 + 0x6E8]
	0x03CE884C BL 0x1C16CF4
	0x03CE8850 ADRP X0, 0x47A000
	0x03CE8854 LDR X0, [X0 + 0x6F0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move X1, [X20+1760]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52363264
	010 Add X0, X0, 3309
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1760], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single get_LayoutWidth()

Disassembly:
	0x03CE8858 BL 0x1C16CF4
	0x03CE885C ADRP X0, 0x47A000
	0x03CE8860 LDR X0, [X0 + 0x6F8]
	0x03CE8864 BL 0x1C16CF4
	0x03CE8868 ADRP X0, 0x47A000
	0x03CE886C LDR X0, [X0 + 0x6C0]
	0x03CE8870 BL 0x1C16CF4
	0x03CE8874 ADRP X0, 0x40B000
	0x03CE8878 LDR X0, [X0 + 0x598]
	0x03CE887C BL 0x1C16CF4
	0x03CE8880 ADRP X0, 0x433000
	0x03CE8884 LDR X0, [X0 + 0x620]
	0x03CE8888 BL 0x1C16CF4
	0x03CE888C ADRP X0, 0x47A000
	0x03CE8890 LDR X0, [X0 + 0x700]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move X1, [X20+1768]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52314112
	010 Add X0, X0, 3043
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1768], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single get_LayoutHeight()

Disassembly:
	0x03CE8894 BL 0x1C16CF4
	0x03CE8898 MOVZ W8, 0x1
	0x03CE889C STRB W8, [X23 + 0x721]
	0x03CE88A0 MOVI V0.2D, 0x0
	0x03CE88A4 STR X31, [X31 + 0x68]
	0x03CE88A8 STP V0, V0, [X31 + 0x40]
	0x03CE88AC STR V0, [X31 + 0x3]
	0x03CE88B0 LDR X8, [X21 + 0x38]
	0x03CE88B4 CBZ X8, 0x3CE8B78
	0x03CE88B8 ADRP X23, 0x433000
	0x03CE88BC LDR W8, [X8 + 0x18]
	0x03CE88C0 LDR X23, [X23 + 0x620]
	0x03CE88C4 CBZ W8, 0x3CE88F4
	0x03CE88C8 ADRP X8, 0x40B000
	0x03CE88CC LDR X8, [X8 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move X1, [X20+1776]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52322304
	010 Add X0, X0, 2367
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1776], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_Overflow(UnityEngine.Yoga.YogaOverflow value)

Disassembly:
	0x03CE88D0 LDR X0, [X8]
	0x03CE88D4 LDR W8, [X0 + 0xE0]
	0x03CE88D8 CBNZ W8, 0x3CE88E0
	0x03CE88DC BL 0x1C16DFC
	0x03CE88E0 MOV X0, X22
	0x03CE88E4 MOV X1, X31
	0x03CE88E8 MOV X2, X31
	0x03CE88EC BL 0x3C3883C
	0x03CE88F0 TBZ X0, 0x0, 0x3CE8934
	0x03CE88F4 LDR X8, [X23]
	0x03CE88F8 LDR W9, [X8 + 0xE0]
	0x03CE88FC CBNZ W9, 0x3CE890C
	0x03CE8900 MOV X0, X8
	0x03CE8904 BL 0x1C16DFC
	0x03CE8908 LDR X8, [X23]
	0x03CE890C LDR X8, [X8 + 0xB8]
	0x03CE8910 MOV W0, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x700000
	006 Move X2, [X21+1496]
	007 Move X20, [X0+16]
	008 Move W19, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52240384
	012 Add X0, X0, 925
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1496], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_Count()

Disassembly:
	0x03CE8914 LDR W8, [X8]
	0x03CE8918 STR W8, [X19]
	0x03CE891C STP X31, X31, [X20]
	0x03CE8920 LDP X20, X19, [X31 + 0x90]
	0x03CE8924 LDP X22, X21, [X31 + 0x80]
	0x03CE8928 LDP X30, X23, [X31 + 0x70]
	0x03CE892C ADD X31, X31, 0xA0
	0x03CE8930 RET
	0x03CE8934 LDR X8, [X21 + 0x20]
	0x03CE8938 CBNZ X8, 0x3CE894C
	0x03CE893C LDR X8, [X21 + 0x28]
	0x03CE8940 CBNZ X8, 0x3CE894C
	0x03CE8944 MOV X0, X21
	0x03CE8948 BL 0x3CE871C
	0x03CE894C LDR X0, [X21 + 0x18]
	0x03CE8950 CBZ X0, 0x3CE8B78
	0x03CE8954 ADRP X8, 0x47A000
	0x03CE8958 LDR X8, [X8 + 0x6E8]
	0x03CE895C ADD X2, X31, 0x68

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move W8, [X20+1810]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47B000
	012 Move X0, [X0+1632]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1810], W8
	016 Move X8, [X19+40]
	017 Compare X8, 0
	018 JumpIfEqual {20}
	019 Move W0, [X8+24]
	020 Move W0, W31
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Void MarkLayoutSeen()

Disassembly:
	0x03CE8960 MOV X1, X22
	0x03CE8964 LDR X3, [X8]
	0x03CE8968 BL 0x2AA6B2C
	0x03CE896C TBZ X0, 0x0, 0x3CE89A4
	0x03CE8970 LDR X8, [X31 + 0x68]
	0x03CE8974 CBZ X8, 0x3CE8B78
	0x03CE8978 LDR X9, [X8 + 0x18]
	0x03CE897C CBZ X9, 0x3CE8B78
	0x03CE8980 LDR W9, [X9 + 0x10]
	0x03CE8984 MOVZ W0, 0x1
	0x03CE8988 STR W9, [X19]
	0x03CE898C LDUR V0, [X8 + 0x58]
	0x03CE8990 STR V0, [X20]
	0x03CE8994 LDR W9, [X8 + 0x20]
	0x03CE8998 ADD W9, W9, 0x1
	0x03CE899C STR W9, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move X2, [X20+1416]
	006 Move X19, [X0+16]
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52232192
	010 Add X0, X0, 826
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+1416], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, W31
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Void Insert(System.Int32 index, UnityEngine.Yoga.YogaNode node)

Disassembly:
	0x03CE89A0 B 0x3CE8920
	0x03CE89A4 LDR X8, [X21]
	0x03CE89A8 MOVZ W2, 0x1
	0x03CE89AC MOV X0, X21
	0x03CE89B0 MOV X1, X22
	0x03CE89B4 LDP X9, X3, [X8 + 0x1D8]
	0x03CE89B8 BLR X9
	0x03CE89BC TBZ X0, 0x0, 0x3CE8A88
	0x03CE89C0 LDR X0, [X21 + 0x28]
	0x03CE89C4 CBZ X0, 0x3CE8B78
	0x03CE89C8 ADD X2, X31, 0x30
	0x03CE89CC MOV X1, X22
	0x03CE89D0 MOV X3, X20
	0x03CE89D4 MOV X4, X31
	0x03CE89D8 BL 0x3DC200C
	0x03CE89DC TBZ X0, 0x0, 0x3CE8A88
	0x03CE89E0 ADRP X23, 0x47A000
	0x03CE89E4 LDR X23, [X23 + 0x700]
	0x03CE89E8 LDR X0, [X23]
	0x03CE89EC LDR W8, [X0 + 0xE0]
	0x03CE89F0 CBNZ W8, 0x3CE89FC
	0x03CE89F4 BL 0x1C16DFC
	0x03CE89F8 LDR X0, [X23]
	0x03CE89FC LDR X8, [X0 + 0xB8]
	0x03CE8A00 LDR X0, [X8]
	0x03CE8A04 CBZ X0, 0x3CE8B78
	0x03CE8A08 ADRP X8, 0x47A000
	0x03CE8A0C LDR X8, [X8 + 0x6F8]
	0x03CE8A10 LDR X1, [X8]
	0x03CE8A14 BL 0x2EF0E28
	0x03CE8A18 LDP V0, V1, [X31 + 0x30]
	0x03CE8A1C LDR V2, [X31 + 0x5]
	0x03CE8A20 STR X0, [X31 + 0x68]
	0x03CE8A24 STP V0, V1, [X31]
	0x03CE8A28 STR V2, [X31 + 0x2]
	0x03CE8A2C CBZ X0, 0x3CE8B78
	0x03CE8A30 LDP V1, V0, [X31 + 0x10]
	0x03CE8A34 LDR V2, [X31]
	0x03CE8A38 MOVZ W8, 0x1
	0x03CE8A3C STR W8, [X0 + 0x20]
	0x03CE8A40 STUR V0, [X0 + 0x48]
	0x03CE8A44 STUR V1, [X0 + 0x38]
	0x03CE8A48 STUR V2, [X0 + 0x28]
	0x03CE8A4C LDR X8, [X21 + 0x28]
	0x03CE8A50 MOV X2, X0
	0x03CE8A54 STR X8, [X0 + 0x18]
	0x03CE8A58 LDR V0, [X20]
	0x03CE8A5C STUR V0, [X0 + 0x58]
	0x03CE8A60 LDR X0, [X21 + 0x18]
	0x03CE8A64 CBZ X0, 0x3CE8B78
	0x03CE8A68 ADRP X8, 0x47A000
	0x03CE8A6C LDR X8, [X8 + 0x6F0]
	0x03CE8A70 MOV X1, X22
	0x03CE8A74 LDR X3, [X8]
	0x03CE8A78 BL 0x2AA5084
	0x03CE8A7C LDR X8, [X21 + 0x28]
	0x03CE8A80 CBNZ X8, 0x3CE8B68
	0x03CE8A84 B 0x3CE8B78
	0x03CE8A88 LDR X8, [X21]
	0x03CE8A8C MOV X0, X21
	0x03CE8A90 MOV X1, X22
	0x03CE8A94 MOV W2, W31
	0x03CE8A98 LDP X9, X3, [X8 + 0x1D8]
	0x03CE8A9C BLR X9
	0x03CE8AA0 TBZ X0, 0x0, 0x3CE88F4
	0x03CE8AA4 LDR X0, [X21 + 0x20]
	0x03CE8AA8 CBZ X0, 0x3CE8B78
	0x03CE8AAC ADD X2, X31, 0x30
	0x03CE8AB0 MOV X1, X22
	0x03CE8AB4 MOV X3, X20
	0x03CE8AB8 MOV X4, X31
	0x03CE8ABC BL 0x3DC200C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x700000
	008 Move W8, [X22+1811]
	009 Move X20, X2
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x47B000
	017 Move X0, [X0+1640]
	018 Call 0x1C17CF4
	019 Move X0, 0x47B000
	020 Move X0, [X0+1648]
	021 Call 0x1C17CF4
	022 Move X0, 0x47B000
	023 Move X0, [X0+1656]
	024 Call 0x1C17CF4
	025 Move X0, 0x43C000
	026 Move X0, [X0+3424]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+1811], W8
	030 Move X22, [X21+40]
	031 Compare X22, 0
	032 JumpIfNotEqual {46}
	033 Move X8, 0x47B000
	034 Move X8, [X8+1656]
	035 Move X0, [X8]
	036 Call 0x1C17F10
	037 Move X8, 0x47B000
	038 Move X8, [X8+1648]
	039 Move W1, 4
	040 Move X22, X0
	041 Move X2, [X8]
	042 Call List`1<Object>..ctor, X0, X1
	043 Move [X21+40], X22
	044 Compare X22, 0
	045 JumpIfEqual {85}
	046 Move X8, 0x47B000
	047 Move X8, [X8+1640]
	048 Move X23, 0x43C000
	049 Move X0, X22
	050 Move W1, W19
	051 Move X3, [X8]
	052 Move X23, [X23+3424]
	053 Move X2, X20
	054 Call List`1<Object>.Insert, X0, X1, X2
	055 Move X0, [X23]
	056 Call 0x1C17F10
	057 Move X1, X21
	058 Move X2, X31
	059 Move X22, X0
	060 Call WeakReference..ctor, X0, X1
	061 Compare X20, 0
	062 JumpIfEqual {85}
	063 Move [X20+32], X22
	064 Move X22, 0x700000
	065 Move X21, [X21+16]
	066 Move X3, [X22+1352]
	067 Move X20, [X20+16]
	068 Compare X3, 0
	069 JumpIfNotEqual {75}
	070 Move X0, -52199424
	071 Add X0, X0, 2074
	072 Call 0x1C17CB8
	073 Move X3, X0
	074 Move [X22+1352], X0
	075 Move X0, X21
	076 Move X1, X20
	077 Move W2, W19
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X30, [X31+48]
	083 Move X23, [X31+56]
	084 CallNoReturn X3
	085 Call 0x1C17F20

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x03CE8AC0 TBZ X0, 0x0, 0x3CE88F4
	0x03CE8AC4 ADRP X23, 0x47A000
	0x03CE8AC8 LDR X23, [X23 + 0x700]
	0x03CE8ACC LDR X0, [X23]
	0x03CE8AD0 LDR W8, [X0 + 0xE0]
	0x03CE8AD4 CBNZ W8, 0x3CE8AE0
	0x03CE8AD8 BL 0x1C16DFC
	0x03CE8ADC LDR X0, [X23]
	0x03CE8AE0 LDR X8, [X0 + 0xB8]
	0x03CE8AE4 LDR X0, [X8]
	0x03CE8AE8 CBZ X0, 0x3CE8B78
	0x03CE8AEC ADRP X8, 0x47A000
	0x03CE8AF0 LDR X8, [X8 + 0x6F8]
	0x03CE8AF4 LDR X1, [X8]
	0x03CE8AF8 BL 0x2EF0E28
	0x03CE8AFC LDP V0, V1, [X31 + 0x30]
	0x03CE8B00 LDR V2, [X31 + 0x5]
	0x03CE8B04 STR X0, [X31 + 0x68]
	0x03CE8B08 STP V0, V1, [X31]
	0x03CE8B0C STR V2, [X31 + 0x2]
	0x03CE8B10 CBZ X0, 0x3CE8B78
	0x03CE8B14 LDP V1, V0, [X31 + 0x10]
	0x03CE8B18 LDR V2, [X31]
	0x03CE8B1C MOVZ W8, 0x1
	0x03CE8B20 STR W8, [X0 + 0x20]
	0x03CE8B24 STUR V0, [X0 + 0x48]
	0x03CE8B28 STUR V1, [X0 + 0x38]
	0x03CE8B2C STUR V2, [X0 + 0x28]
	0x03CE8B30 LDR X8, [X21 + 0x20]
	0x03CE8B34 MOV X2, X0
	0x03CE8B38 STR X8, [X0 + 0x18]
	0x03CE8B3C LDR V0, [X20]
	0x03CE8B40 STUR V0, [X0 + 0x58]
	0x03CE8B44 LDR X0, [X21 + 0x18]
	0x03CE8B48 CBZ X0, 0x3CE8B78
	0x03CE8B4C ADRP X8, 0x47A000
	0x03CE8B50 LDR X8, [X8 + 0x6F0]
	0x03CE8B54 MOV X1, X22
	0x03CE8B58 LDR X3, [X8]
	0x03CE8B5C BL 0x2AA5084
	0x03CE8B60 LDR X8, [X21 + 0x20]
	0x03CE8B64 CBZ X8, 0x3CE8B78
	0x03CE8B68 LDR W8, [X8 + 0x10]
	0x03CE8B6C MOVZ W0, 0x1
	0x03CE8B70 STR W8, [X19]
	0x03CE8B74 B 0x3CE8920
	0x03CE8B78 BL 0x1C16F20
	0x03CE8B7C SUB X31, X31, 0x90
	0x03CE8B80 STP X30, X21, [X31 + 0x70]
	0x03CE8B84 STP X20, X19, [X31 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x700000
	007 Move W8, [X21+1812]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x47B000
	015 Move X0, [X0+1664]
	016 Call 0x1C17CF4
	017 Move X0, 0x47B000
	018 Move X0, [X0+1672]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1812], W8
	022 Move X0, [X19+40]
	023 Compare X0, 0
	024 JumpIfEqual {61}
	025 Move X8, 0x47B000
	026 Move X8, [X8+1672]
	027 Move W1, W20
	028 Move X2, [X8]
	029 Call List`1<Object>.get_Item, X0, X1
	030 Compare X0, 0
	031 JumpIfEqual {61}
	032 Move [X0+32], X31
	033 Move X21, X0
	034 Move X0, [X19+40]
	035 Compare X0, 0
	036 JumpIfEqual {61}
	037 Move X8, 0x47B000
	038 Move X8, [X8+1664]
	039 Move W1, W20
	040 Move X2, [X8]
	041 Call List`1<Object>.RemoveAt, X0, X1
	042 Move X22, 0x700000
	043 Move X19, [X19+16]
	044 Move X2, [X22+1360]
	045 Move X20, [X21+16]
	046 Compare X2, 0
	047 JumpIfNotEqual {53}
	048 Move X0, -52150272
	049 Add X0, X0, 663
	050 Call 0x1C17CB8
	051 Move X2, X0
	052 Move [X22+1360], X0
	053 Move X0, X19
	054 Move X1, X20
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 CallNoReturn X2
	061 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x03CE8B88 ADRP X21, 0x6FF000
	0x03CE8B8C LDRB W8, [X21 + 0x722]
	0x03CE8B90 MOV X19, X2
	0x03CE8B94 MOV X20, X0
	0x03CE8B98 TBNZ X8, 0x0, 0x3CE8BD4
	0x03CE8B9C ADRP X0, 0x47A000
	0x03CE8BA0 LDR X0, [X0 + 0x708]
	0x03CE8BA4 BL 0x1C16CF4
	0x03CE8BA8 ADRP X0, 0x47A000
	0x03CE8BAC LDR X0, [X0 + 0x6E8]
	0x03CE8BB0 BL 0x1C16CF4
	0x03CE8BB4 ADRP X0, 0x47A000
	0x03CE8BB8 LDR X0, [X0 + 0x710]
	0x03CE8BBC BL 0x1C16CF4
	0x03CE8BC0 ADRP X0, 0x47A000
	0x03CE8BC4 LDR X0, [X0 + 0x700]
	0x03CE8BC8 BL 0x1C16CF4
	0x03CE8BCC MOVZ W8, 0x1
	0x03CE8BD0 STRB W8, [X21 + 0x722]
	0x03CE8BD4 STR X31, [X31 + 0x68]
	0x03CE8BD8 LDR X0, [X20 + 0x18]
	0x03CE8BDC CBZ X0, 0x3CE8CB4
	0x03CE8BE0 ADRP X8, 0x47A000
	0x03CE8BE4 LDR X8, [X8 + 0x6E8]
	0x03CE8BE8 ADD X2, X31, 0x68

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move W8, [X20+1813]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47B000
	012 Move X0, [X0+1632]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1813], W8
	016 Move X8, [X19+40]
	017 Compare X8, 0
	018 JumpIfEqual {28}
	019 Move W8, [X8+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Subtract W1, W8, 1
	022 Move X0, X19
	023 Call YogaNode.RemoveAt, X0, X1
	024 Move X8, [X19+40]
	025 Compare X8, 0
	026 JumpIfNotEqual {19}
	027 Call 0x1C17F20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

Method: System.Void SetMeasureFunction(UnityEngine.Yoga.MeasureFunction measureFunction)

Disassembly:
	0x03CE8BEC MOV X1, X19
	0x03CE8BF0 LDR X3, [X8]
	0x03CE8BF4 BL 0x2AA6B2C
	0x03CE8BF8 TBZ X0, 0x0, 0x3CE8CA4
	0x03CE8BFC LDR X8, [X31 + 0x68]
	0x03CE8C00 CBZ X8, 0x3CE8CB4
	0x03CE8C04 LDR W9, [X8 + 0x20]
	0x03CE8C08 SUBS W9, W9, 0x1
	0x03CE8C0C STR W9, [X8 + 0x20]
	0x03CE8C10 B.NE 0x3CE8CA4
	0x03CE8C14 LDR X0, [X8 + 0x18]
	0x03CE8C18 LDUR V0, [X8 + 0x48]
	0x03CE8C1C LDUR V1, [X8 + 0x38]
	0x03CE8C20 LDUR V2, [X8 + 0x28]
	0x03CE8C24 STP V1, V0, [X31 + 0x40]
	0x03CE8C28 STR V2, [X31 + 0x3]
	0x03CE8C2C CBZ X0, 0x3CE8CB4
	0x03CE8C30 LDP V0, V1, [X31 + 0x30]
	0x03CE8C34 LDR V2, [X31 + 0x5]
	0x03CE8C38 ADD X1, X31, 0x0
	0x03CE8C3C MOV X2, X31
	0x03CE8C40 STP V0, V1, [X31]
	0x03CE8C44 STR V2, [X31 + 0x2]
	0x03CE8C48 BL 0x3DC2410
	0x03CE8C4C LDR X0, [X20 + 0x18]
	0x03CE8C50 CBZ X0, 0x3CE8CB4
	0x03CE8C54 ADRP X8, 0x47A000
	0x03CE8C58 LDR X8, [X8 + 0x708]
	0x03CE8C5C MOV X1, X19
	0x03CE8C60 LDR X2, [X8]
	0x03CE8C64 BL 0x2AA64F8
	0x03CE8C68 ADRP X19, 0x47A000
	0x03CE8C6C LDR X19, [X19 + 0x700]
	0x03CE8C70 LDR X0, [X19]
	0x03CE8C74 LDR W8, [X0 + 0xE0]
	0x03CE8C78 CBNZ W8, 0x3CE8C84
	0x03CE8C7C BL 0x1C16DFC
	0x03CE8C80 LDR X0, [X19]
	0x03CE8C84 LDR X8, [X0 + 0xB8]
	0x03CE8C88 LDR X0, [X8]
	0x03CE8C8C CBZ X0, 0x3CE8CB4
	0x03CE8C90 ADRP X8, 0x47A000
	0x03CE8C94 LDR X1, [X31 + 0x68]
	0x03CE8C98 LDR X8, [X8 + 0x710]
	0x03CE8C9C LDR X2, [X8]
	0x03CE8CA0 BL 0x2EF0E90
	0x03CE8CA4 LDP X20, X19, [X31 + 0x80]
	0x03CE8CA8 LDP X30, X21, [X31 + 0x70]
	0x03CE8CAC ADD X31, X31, 0x90
	0x03CE8CB0 RET
	0x03CE8CB4 BL 0x1C16F20
	0x03CE8CB8 STP X30, X19, [X31 - 0x10]!
	0x03CE8CBC MOV X19, X0
	0x03CE8CC0 LDR X0, [X0 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move [X0+48], X1
	007 Compare X1, 0
	008 JumpIfEqual {32}
	009 Move X21, 0x700000
	010 Move X8, [X21+1288]
	011 Move X20, [X19+16]
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -52289536
	015 Add X0, X0, 3464
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X21+1288], X0
	019 Move X0, X20
	020 Move X1, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X20, 0x700000
	023 Move X1, [X20+1400]
	024 Move X19, [X19+16]
	025 Compare X1, 0
	026 JumpIfNotEqual {58}
	027 Move X0, -52240384
	028 Add X0, X0, 772
	029 Call 0x1C17CB8
	030 Move X1, X0
	031 Move [X20+1400], X0
	032 Move X8, [X19+56]
	033 Compare X8, 0
	034 JumpIfNotEqual {48}
	035 Move X21, 0x700000
	036 Move X8, [X21+1288]
	037 Move X20, [X19+16]
	038 Compare X8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, -52289536
	041 Add X0, X0, 3464
	042 Call 0x1C17CB8
	043 Move X8, X0
	044 Move [X21+1288], X0
	045 Move X0, X20
	046 Move X1, X31
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X20, 0x700000
	049 Move X1, [X20+1408]
	050 Move X19, [X19+16]
	051 Compare X1, 0
	052 JumpIfNotEqual {58}
	053 Move X0, -52273152
	054 Add X0, X0, 3071
	055 Call 0x1C17CB8
	056 Move X1, X0
	057 Move [X20+1408], X0
	058 Move X0, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 CallNoReturn X1

Method: System.Void CalculateLayout(System.Single width = NaN, System.Single height = NaN)

Disassembly:
	0x03CE8CC4 CBZ X0, 0x3CE8CE8
	0x03CE8CC8 MOV X1, X31
	0x03CE8CCC BL 0x3DC24F0
	0x03CE8CD0 LDR X8, [X19 + 0x20]
	0x03CE8CD4 CBZ X8, 0x3CE8D1C
	0x03CE8CD8 LDR W1, [X8 + 0x10]
	0x03CE8CDC LDR X2, [X8 + 0x18]
	0x03CE8CE0 MOV X0, X19
	0x03CE8CE4 BL 0x3CE8308
	0x03CE8CE8 LDR X0, [X19 + 0x28]
	0x03CE8CEC CBZ X0, 0x3CE8D14
	0x03CE8CF0 MOV X1, X31
	0x03CE8CF4 BL 0x3DC24F0
	0x03CE8CF8 LDR X8, [X19 + 0x28]
	0x03CE8CFC CBZ X8, 0x3CE8D1C
	0x03CE8D00 LDR W1, [X8 + 0x10]
	0x03CE8D04 LDR X2, [X8 + 0x18]
	0x03CE8D08 MOV X0, X19
	0x03CE8D0C LDP X30, X19, [X31], #0x10
	0x03CE8D10 B 0x3CE8308
	0x03CE8D14 LDP X30, X19, [X31], #0x10
	0x03CE8D18 RET
	0x03CE8D1C BL 0x1C16F20
	0x03CE8D20 SUB W8, W0, 0x1
	0x03CE8D24 CMP W8, 0x49
	0x03CE8D28 B.HI 0x3CE8D4C
	0x03CE8D2C ADRP X9, 0xFFFFFFFFFCEAF000
	0x03CE8D30 ADD X9, X9, 0xF2F
	0x03CE8D34 ADR X10, 0x14
	0x03CE8D38 LDRB W11, [X9, X8, LSL]
	0x03CE8D3C ADD X10, X10, X11, 0x2, LSL
	0x03CE8D40 MOVZ W0, 0x1
	0x03CE8D44 BR X10

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x700000
	008 Move X8, [X20+1432]
	009 Move X19, [X0+16]
	010 Move V8, V1
	011 Move V9, V0
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -52297728
	015 Add X0, X0, 2866
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+1432], X0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X21, 0x700000
	022 Move X2, [X21+1368]
	023 Move W20, W0
	024 Compare X2, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -52248576
	027 Add X0, X0, 1478
	028 Call 0x1C17CB8
	029 Move X2, X0
	030 Move [X21+1368], X0
	031 Move X0, X19
	032 Move W1, W20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Move V0, V9
	038 Move V1, V8
	039 Move D9, [X31+48]
	040 Move D8, [X31+56]
	041 CallNoReturn X2

Method: UnityEngine.Yoga.YogaSize MeasureInternal(UnityEngine.Yoga.YogaNode node, System.Single width, UnityEngine.Yoga.YogaMeasureMode widthMode, System.Single height, UnityEngine.Yoga.YogaMeasureMode heightMode)

Disassembly:
	0x03CE6748 LDR X2, [X21 + 0x6A8]
	0x03CE674C CBNZ X2, 0x3CE6764
	0x03CE6750 ADRP X0, 0xFFFFFFFFFCE1F000
	0x03CE6754 ADD X0, X0, 0x89E
	0x03CE6758 BL 0x1C16CB8
	0x03CE675C MOV X2, X0
	0x03CE6760 STR X0, [X21 + 0x6A8]
	0x03CE6764 MOV X0, X20
	0x03CE6768 MOV W1, W19
	0x03CE676C LDP X20, X19, [X31 + 0x20]
	0x03CE6770 LDP X30, X21, [X31 + 0x10]
	0x03CE6774 LDR V8, [X31], #0x30
	0x03CE6778 BR X2
	0x03CE677C ADRP X21, 0x701000
	0x03CE6780 LDR X2, [X21 + 0x698]
	0x03CE6784 CBNZ X2, 0x3CE679C
	0x03CE6788 ADRP X0, 0xFFFFFFFFFCE41000
	0x03CE678C ADD X0, X0, 0x49A
	0x03CE6790 BL 0x1C16CB8
	0x03CE6794 MOV X2, X0
	0x03CE6798 STR X0, [X21 + 0x698]
	0x03CE679C MOV X0, X20
	0x03CE67A0 MOV W1, W19
	0x03CE67A4 LDP X20, X19, [X31 + 0x20]
	0x03CE67A8 LDP X30, X21, [X31 + 0x10]
	0x03CE67AC MOV V0.16B, V8.16B
	0x03CE67B0 LDR V8, [X31], #0x30
	0x03CE67B4 BR X2
	0x03CE67B8 MOV X2, X1
	0x03CE67BC MOVZ W1, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {17}
	005 Move X8, [X0+48]
	006 Move W3, W2
	007 Move W2, W1
	008 Move X1, X0
	009 Compare X8, 0
	010 JumpIfEqual {17}
	011 Move X5, [X8+24]
	012 Move X0, [X8+64]
	013 Move X4, [X8+40]
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 CallNoReturn X5
	017 Move X0, 0x40E000
	018 Move X0, [X0+1456]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0x47D000
	023 Move X0, [X0+1592]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call InvalidOperationException..ctor, X0, X1
	029 Move X0, 0x47D000
	030 Move X0, [X0+1600]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.Single BaselineInternal(UnityEngine.Yoga.YogaNode node, System.Single width, System.Single height)

Disassembly:
	0x03CE680C ADRP X21, 0x701000
	0x03CE6810 LDR X2, [X21 + 0x6B8]
	0x03CE6814 CBNZ X2, 0x3CE6850
	0x03CE6818 ADRP X0, 0xFFFFFFFFFCE25000
	0x03CE681C ADD X0, X0, 0xB1B
	0x03CE6820 BL 0x1C16CB8
	0x03CE6824 MOV X2, X0
	0x03CE6828 STR X0, [X21 + 0x6B8]
	0x03CE682C B 0x3CE6850
	0x03CE6830 ADRP X21, 0x701000
	0x03CE6834 LDR X2, [X21 + 0x6B0]
	0x03CE6838 CBNZ X2, 0x3CE6850
	0x03CE683C ADRP X0, 0xFFFFFFFFFCE2F000
	0x03CE6840 ADD X0, X0, 0x3FA
	0x03CE6844 BL 0x1C16CB8
	0x03CE6848 MOV X2, X0
	0x03CE684C STR X0, [X21 + 0x6B0]
	0x03CE6850 MOV X0, X20
	0x03CE6854 MOV W1, W19
	0x03CE6858 LDP X20, X19, [X31 + 0x20]
	0x03CE685C LDP X30, X21, [X31 + 0x10]
	0x03CE6860 MOV V0.16B, V8.16B
	0x03CE6864 LDR V8, [X31], #0x30
	0x03CE6868 BR X2
	0x03CE686C MOV X2, X1
	0x03CE6870 MOVZ W1, 0x1
	0x03CE6874 B 0x3CE67E8
	0x03CE6878 MOV X2, X1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {15}
	005 Move X8, [X0+56]
	006 Move X1, X0
	007 Compare X8, 0
	008 JumpIfEqual {15}
	009 Move X3, [X8+24]
	010 Move X0, [X8+64]
	011 Move X2, [X8+40]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 CallNoReturn X3
	015 Move X0, 0x40E000
	016 Move X0, [X0+1456]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0x47D000
	021 Move X0, [X0+1608]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Move X2, X31
	026 Call InvalidOperationException..ctor, X0, X1
	027 Move X0, 0x47D000
	028 Move X0, [X0+1616]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call 0x1C17DEC

Method: System.Collections.Generic.IEnumerator`1<UnityEngine.Yoga.YogaNode> GetEnumerator()

Disassembly:
	0x03CE8D48 RET
	0x03CE8D4C MOV W0, W31
	0x03CE8D50 RET
	0x03CE8D54 STR X30, [X31 - 0x30]!
	0x03CE8D58 STP X22, X21, [X31 + 0x10]
	0x03CE8D5C STP X20, X19, [X31 + 0x20]
	0x03CE8D60 LDR W22, [X0 + 0x4C]
	0x03CE8D64 MOV W19, W2
	0x03CE8D68 MOV X21, X0
	0x03CE8D6C MOV X20, X1
	0x03CE8D70 STR W22, [X31 + 0xC]
	0x03CE8D74 LDR X8, [X0 + 0x50]
	0x03CE8D78 CBZ X8, 0x3CE8D9C
	0x03CE8D7C LDR X9, [X8 + 0x18]
	0x03CE8D80 LDR X0, [X8 + 0x40]
	0x03CE8D84 LDR X3, [X8 + 0x28]
	0x03CE8D88 ADD X2, X31, 0xC
	0x03CE8D8C MOV X1, X20
	0x03CE8D90 BLR X9
	0x03CE8D94 TBZ X0, 0x0, 0x3CE8E4C
	0x03CE8D98 LDR W22, [X31 + 0xC]
	0x03CE8D9C TBZ X22, 0x0, 0x3CE8DB8
	0x03CE8DA0 CBZ X20, 0x3CE8E88
	0x03CE8DA4 LDR X8, [X20]
	0x03CE8DA8 MOV X0, X20
	0x03CE8DAC LDP X9, X1, [X8 + 0x1E8]
	0x03CE8DB0 BLR X9
	0x03CE8DB4 TBNZ X0, 0x0, 0x3CE8E4C
	0x03CE8DB8 TBNZ X22, 0x1, 0x3CE8E10
	0x03CE8DBC TBZ X22, 0x2, 0x3CE8DD8
	0x03CE8DC0 CBZ X20, 0x3CE8E88
	0x03CE8DC4 MOV X0, X20
	0x03CE8DC8 MOV X1, X31
	0x03CE8DCC BL 0x3C1B334
	0x03CE8DD0 BL 0x3CE8D20
	0x03CE8DD4 TBZ X0, 0x0, 0x3CE8E4C
	0x03CE8DD8 TBZ X22, 0x3, 0x3CE8E60
	0x03CE8DDC LDR W8, [X21 + 0x30]
	0x03CE8DE0 CMP W8, 0x1
	0x03CE8DE4 B.NE 0x3CE8E60
	0x03CE8DE8 CBZ X20, 0x3CE8E88
	0x03CE8DEC MOV X0, X20
	0x03CE8DF0 MOV X1, X31
	0x03CE8DF4 BL 0x3C1ADB0
	0x03CE8DF8 CMP W0, 0x0
	0x03CE8DFC MOV W8, W0
	0x03CE8E00 CSET W0, EQ
	0x03CE8E04 TBZ X22, 0x4, 0x3CE8E50
	0x03CE8E08 CBZ W8, 0x3CE8E70
	0x03CE8E0C B 0x3CE8E50
	0x03CE8E10 CBZ X20, 0x3CE8E88
	0x03CE8E14 LDR X8, [X20]
	0x03CE8E18 MOV X0, X20
	0x03CE8E1C LDP X9, X1, [X8 + 0x188]
	0x03CE8E20 BLR X9
	0x03CE8E24 LDR W8, [X21 + 0x48]
	0x03CE8E28 CMP W0, W8
	0x03CE8E2C B.GT 0x3CE8E4C
	0x03CE8E30 LDR X8, [X20]
	0x03CE8E34 MOV X0, X20
	0x03CE8E38 LDP X9, X1, [X8 + 0x1A8]
	0x03CE8E3C BLR X9
	0x03CE8E40 LDR W8, [X21 + 0x48]
	0x03CE8E44 CMP W0, W8
	0x03CE8E48 B.LE 0x3CE8DBC
	0x03CE8E4C MOV W0, W31
	0x03CE8E50 LDP X20, X19, [X31 + 0x20]
	0x03CE8E54 LDP X22, X21, [X31 + 0x10]
	0x03CE8E58 LDR X30, [X31], #0x30
	0x03CE8E5C RET
	0x03CE8E60 TBNZ X22, 0x4, 0x3CE8E6C
	0x03CE8E64 MOVZ W0, 0x1
	0x03CE8E68 B 0x3CE8E50
	0x03CE8E6C CBZ X20, 0x3CE8E88
	0x03CE8E70 MOV X0, X20
	0x03CE8E74 MOV X1, X31
	0x03CE8E78 BL 0x3C1AB20
	0x03CE8E7C CMP W0, W19
	0x03CE8E80 CSET W0, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move W8, [X20+1814]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x47B000
	012 Move X0, [X0+1680]
	013 Call 0x1C17CF4
	014 Move X0, 0x47B000
	015 Move X0, [X0+1688]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1814], W8
	019 Move X20, 0x47B000
	020 Move X19, [X19+40]
	021 Move X20, [X20+1688]
	022 Compare X19, 0
	023 JumpIfEqual {35}
	024 Move X8, [X19]
	025 Move X1, [X20]
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Compare X9, 0
	028 JumpIfEqual {78}
	029 Move X10, [X8+176]
	030 Add X10, X10, 8
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Subtract X9, X9, 1
	034 Add X10, X10, 16
	035 Move X8, 0x47B000
	036 Move X8, [X8+1680]
	037 Move X19, [X8]
	038 Move X8, [X19+56]
	039 Compare X8, 0
	040 JumpIfNotEqual {44}
	041 Move X0, X19
	042 Call 0x1C5D6E0
	043 Move X8, [X19+56]
	044 Move X0, [X8+16]
	045 Move W8, [X0+309]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {51}
	050 Call 0x1C5D684
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X8, [X19+56]
	056 Move X0, [X8+16]
	057 Move W8, [X0+309]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {63}
	062 Call 0x1C5D684
	063 Move X8, [X0+184]
	064 Move X19, [X8]
	065 Compare X19, 0
	066 JumpIfEqual {91}
	067 Move X8, [X19]
	068 Move X1, [X20]
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 Compare X9, 0
	071 JumpIfEqual {78}
	072 Move X10, [X8+176]
	073 Add X10, X10, 8
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Subtract X9, X9, 1
	077 Add X10, X10, 16
	078 Move X0, X19
	079 Move W2, W31
	080 Call 0x1C5D788
	081 NotImplemented "Instruction LDRSW not yet implemented."
	082 Add X8, X8, X9
	083 Add X0, X8, 312
	084 Move X2, [X0]
	085 Move X1, [X0+8]
	086 Move X0, X19
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 Move X30, [X31+32]
	090 CallNoReturn X2
	091 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x03CE8E84 B 0x3CE8E50
	0x03CE8E88 BL 0x1C16F20
	0x03CE8E8C LDR W0, [X0 + 0x48]
	0x03CE8E90 RET
	0x03CE8E94 LDR W8, [X0 + 0x40]
	0x03CE8E98 CMP W8, W1
	0x03CE8E9C B.NE 0x3CE8EA4
	0x03CE8EA0 RET
	0x03CE8EA4 LDR X8, [X0]
	0x03CE8EA8 STR W1, [X0 + 0x40]
	0x03CE8EAC LDP X2, X1, [X8 + 0x198]
	0x03CE8EB0 BR X2
	0x03CE8EB4 LDR W8, [X0 + 0x44]
	0x03CE8EB8 CMP W8, W1
	0x03CE8EBC B.NE 0x3CE8EC4
	0x03CE8EC0 RET
	0x03CE8EC4 LDR X8, [X0]
	0x03CE8EC8 STR W1, [X0 + 0x44]
	0x03CE8ECC LDP X2, X1, [X8 + 0x198]
	0x03CE8ED0 BR X2
	0x03CE8ED4 MOVZ W0, 0x1F
	0x03CE8ED8 RET
	0x03CE8EDC LDR W8, [X0 + 0x4C]
	0x03CE8EE0 CMP W8, W1
	0x03CE8EE4 B.NE 0x3CE8EEC
	0x03CE8EE8 RET
	0x03CE8EEC LDR X8, [X0]
	0x03CE8EF0 STR W1, [X0 + 0x4C]
	0x03CE8EF4 LDP X2, X1, [X8 + 0x198]
	0x03CE8EF8 BR X2
	0x03CE8EFC LDR W8, [X0 + 0x48]
	0x03CE8F00 CMP W8, W1
	0x03CE8F04 B.NE 0x3CE8F0C
	0x03CE8F08 RET
	0x03CE8F0C LDR X8, [X0]
	0x03CE8F10 STR W1, [X0 + 0x48]
	0x03CE8F14 LDP X2, X1, [X8 + 0x198]
	0x03CE8F18 BR X2
	0x03CE8F1C STR X30, [X31 - 0x20]!
	0x03CE8F20 STP X20, X19, [X31 + 0x10]
	0x03CE8F24 MOV X19, X0
	0x03CE8F28 LDR X0, [X0 + 0x50]
	0x03CE8F2C MOV X2, X31
	0x03CE8F30 MOV X20, X1
	0x03CE8F34 BL 0x33C60F0
	0x03CE8F38 TBZ X0, 0x0, 0x3CE8F48
	0x03CE8F3C LDP X20, X19, [X31 + 0x10]
	0x03CE8F40 LDR X30, [X31], #0x20
	0x03CE8F44 RET
	0x03CE8F48 LDR X8, [X19]
	0x03CE8F4C STR X20, [X19 + 0x50]
	0x03CE8F50 MOV X0, X19
	0x03CE8F54 LDP X20, X19, [X31 + 0x10]
	0x03CE8F58 LDP X2, X1, [X8 + 0x198]
	0x03CE8F5C LDR X30, [X31], #0x20
	0x03CE8F60 BR X2
	0x03CE8F64 STR X30, [X31 - 0x40]!
	0x03CE8F68 STP X24, X23, [X31 + 0x10]
	0x03CE8F6C STP X22, X21, [X31 + 0x20]
	0x03CE8F70 STP X20, X19, [X31 + 0x30]
	0x03CE8F74 ADRP X23, 0x6FF000
	0x03CE8F78 ADRP X24, 0x47A000
	0x03CE8F7C ADRP X20, 0x47A000
	0x03CE8F80 ADRP X22, 0x47A000
	0x03CE8F84 ADRP X21, 0x47A000
	0x03CE8F88 LDRB W8, [X23 + 0x723]
	0x03CE8F8C LDR X24, [X24 + 0x718]
	0x03CE8F90 LDR X20, [X20 + 0x720]
	0x03CE8F94 LDR X22, [X22 + 0x728]
	0x03CE8F98 LDR X21, [X21 + 0x730]
	0x03CE8F9C MOV X19, X0
	0x03CE8FA0 TBNZ X8, 0x0, 0x3CE8FDC
	0x03CE8FA4 ADRP X0, 0x47A000
	0x03CE8FA8 LDR X0, [X0 + 0x720]
	0x03CE8FAC BL 0x1C16CF4
	0x03CE8FB0 ADRP X0, 0x47A000
	0x03CE8FB4 LDR X0, [X0 + 0x718]
	0x03CE8FB8 BL 0x1C16CF4
	0x03CE8FBC ADRP X0, 0x47A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x700000
	005 Move W8, [X20+1815]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x47B000
	012 Move X0, [X0+1680]
	013 Call 0x1C17CF4
	014 Move X0, 0x47B000
	015 Move X0, [X0+1688]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1815], W8
	019 Move X20, 0x47B000
	020 Move X19, [X19+40]
	021 Move X20, [X20+1688]
	022 Compare X19, 0
	023 JumpIfEqual {35}
	024 Move X8, [X19]
	025 Move X1, [X20]
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Compare X9, 0
	028 JumpIfEqual {78}
	029 Move X10, [X8+176]
	030 Add X10, X10, 8
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Subtract X9, X9, 1
	034 Add X10, X10, 16
	035 Move X8, 0x47B000
	036 Move X8, [X8+1680]
	037 Move X19, [X8]
	038 Move X8, [X19+56]
	039 Compare X8, 0
	040 JumpIfNotEqual {44}
	041 Move X0, X19
	042 Call 0x1C5D6E0
	043 Move X8, [X19+56]
	044 Move X0, [X8+16]
	045 Move W8, [X0+309]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {51}
	050 Call 0x1C5D684
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X8, [X19+56]
	056 Move X0, [X8+16]
	057 Move W8, [X0+309]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {63}
	062 Call 0x1C5D684
	063 Move X8, [X0+184]
	064 Move X19, [X8]
	065 Compare X19, 0
	066 JumpIfEqual {91}
	067 Move X8, [X19]
	068 Move X1, [X20]
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 Compare X9, 0
	071 JumpIfEqual {78}
	072 Move X10, [X8+176]
	073 Add X10, X10, 8
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Subtract X9, X9, 1
	077 Add X10, X10, 16
	078 Move X0, X19
	079 Move W2, W31
	080 Call 0x1C5D788
	081 NotImplemented "Instruction LDRSW not yet implemented."
	082 Add X8, X8, X9
	083 Add X0, X8, 312
	084 Move X2, [X0]
	085 Move X1, [X0+8]
	086 Move X0, X19
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 Move X30, [X31+32]
	090 CallNoReturn X2
	091 Call 0x1C17F20

