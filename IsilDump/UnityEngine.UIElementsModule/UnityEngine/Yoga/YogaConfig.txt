Type: UnityEngine.Yoga.YogaConfig

Method: System.Void .ctor(System.IntPtr ygConfig)

Disassembly:
	0x03CE5E70 BR X1
	0x03CE5E74 STR D8, [X31 - 0x20]!
	0x03CE5E78 STR X30, [X31 + 0x8]
	0x03CE5E7C STP X20, X19, [X31 + 0x10]
	0x03CE5E80 ADRP X20, 0x702000
	0x03CE5E84 LDR X1, [X20 + 0x638]
	0x03CE5E88 MOV V8.16B, V0.16B
	0x03CE5E8C MOV X19, X0
	0x03CE5E90 CBNZ X1, 0x3CE5EA8
	0x03CE5E94 ADRP X0, 0xFFFFFFFFFCE26000
	0x03CE5E98 ADD X0, X0, 0xA74
	0x03CE5E9C BL 0x1C16CB8
	0x03CE5EA0 MOV X1, X0
	0x03CE5EA4 STR X0, [X20 + 0x638]
	0x03CE5EA8 MOV X0, X19
	0x03CE5EAC LDP X20, X19, [X31 + 0x10]
	0x03CE5EB0 LDR X30, [X31 + 0x8]
	0x03CE5EB4 MOV V0.16B, V8.16B
	0x03CE5EB8 LDR V8, [X31], #0x20
	0x03CE5EBC BR X1
	0x03CE5EC0 STR X30, [X31 - 0x20]!
	0x03CE5EC4 STP X20, X19, [X31 + 0x10]
	0x03CE5EC8 ADRP X20, 0x702000
	0x03CE5ECC LDR X1, [X20 + 0x640]
	0x03CE5ED0 MOV X19, X0
	0x03CE5ED4 CBNZ X1, 0x3CE5EEC
	0x03CE5ED8 ADRP X0, 0xFFFFFFFFFCE14000
	0x03CE5EDC ADD X0, X0, 0xDF4
	0x03CE5EE0 BL 0x1C16CB8
	0x03CE5EE4 MOV X1, X0
	0x03CE5EE8 STR X0, [X20 + 0x640]
	0x03CE5EEC MOV X0, X19
	0x03CE5EF0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move X0, X19
	009 Move X1, X31
	010 Move X2, X31
	011 Move [X20+16], X19
	012 Call IntPtr.op_Equality, X0, X1
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {21}
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 Move X0, 0x40F000
	022 Move X0, [X0+1456]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0x47E000
	027 Move X0, [X0+1568]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call InvalidOperationException..ctor, X0, X1
	033 Move X0, 0x47E000
	034 Move X0, [X0+1576]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03CE5EF4 LDR X30, [X31], #0x20
	0x03CE5EF8 BR X1
	0x03CE5EFC STR D8, [X31 - 0x20]!
	0x03CE5F00 STR X30, [X31 + 0x8]
	0x03CE5F04 STP X20, X19, [X31 + 0x10]
	0x03CE5F08 ADRP X20, 0x702000
	0x03CE5F0C LDR X1, [X20 + 0x648]
	0x03CE5F10 MOV V8.16B, V0.16B
	0x03CE5F14 MOV X19, X0
	0x03CE5F18 CBNZ X1, 0x3CE5F30
	0x03CE5F1C ADRP X0, 0xFFFFFFFFFCE0A000
	0x03CE5F20 ADD X0, X0, 0x8EE
	0x03CE5F24 BL 0x1C16CB8
	0x03CE5F28 MOV X1, X0
	0x03CE5F2C STR X0, [X20 + 0x648]
	0x03CE5F30 MOV X0, X19
	0x03CE5F34 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x703000
	005 Move X8, [X20+1312]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52285440
	010 Add X0, X0, 2827
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1312], X0
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X1, X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Call YogaConfig..ctor, X0, X1
	021 Return 

Method: System.Void Finalize()

Disassembly:
	0x03CE5F60 MOV X19, X0
	0x03CE5F64 CBNZ X1, 0x3CE5F7C
	0x03CE5F68 ADRP X0, 0xFFFFFFFFFCE34000
	0x03CE5F6C ADD X0, X0, 0x69D
	0x03CE5F70 BL 0x1C16CB8
	0x03CE5F74 MOV X1, X0
	0x03CE5F78 STR X0, [X20 + 0x650]
	0x03CE5F7C MOV X0, X19
	0x03CE5F80 LDP X20, X19, [X31 + 0x10]
	0x03CE5F84 LDR X30, [X31 + 0x8]
	0x03CE5F88 MOV V0.16B, V8.16B
	0x03CE5F8C LDR V8, [X31], #0x20
	0x03CE5F90 BR X1
	0x03CE5F94 STR D8, [X31 - 0x20]!
	0x03CE5F98 STR X30, [X31 + 0x8]
	0x03CE5F9C STP X20, X19, [X31 + 0x10]
	0x03CE5FA0 ADRP X20, 0x702000
	0x03CE5FA4 LDR X1, [X20 + 0x658]
	0x03CE5FA8 MOV V8.16B, V0.16B
	0x03CE5FAC MOV X19, X0
	0x03CE5FB0 CBNZ X1, 0x3CE5FC8
	0x03CE5FB4 ADRP X0, 0xFFFFFFFFFCE3C000
	0x03CE5FB8 ADD X0, X0, 0x71E
	0x03CE5FBC BL 0x1C16CB8
	0x03CE5FC0 MOV X1, X0
	0x03CE5FC4 STR X0, [X20 + 0x658]
	0x03CE5FC8 MOV X0, X19
	0x03CE5FCC LDP X20, X19, [X31 + 0x10]
	0x03CE5FD0 LDR X30, [X31 + 0x8]
	0x03CE5FD4 MOV V0.16B, V8.16B
	0x03CE5FD8 LDR V8, [X31], #0x20
	0x03CE5FDC BR X1
	0x03CE5FE0 STR D8, [X31 - 0x20]!
	0x03CE5FE4 STR X30, [X31 + 0x8]
	0x03CE5FE8 STP X20, X19, [X31 + 0x10]
	0x03CE5FEC ADRP X20, 0x702000
	0x03CE5FF0 LDR X1, [X20 + 0x660]
	0x03CE5FF4 MOV V8.16B, V0.16B
	0x03CE5FF8 MOV X19, X0
	0x03CE5FFC CBNZ X1, 0x3CE6014
	0x03CE6000 ADRP X0, 0xFFFFFFFFFCE15000
	0x03CE6004 ADD X0, X0, 0xBDE
	0x03CE6008 BL 0x1C16CB8
	0x03CE600C MOV X1, X0
	0x03CE6010 STR X0, [X20 + 0x660]
	0x03CE6014 MOV X0, X19
	0x03CE6018 LDP X20, X19, [X31 + 0x10]
	0x03CE601C LDR X30, [X31 + 0x8]
	0x03CE6020 MOV V0.16B, V8.16B
	0x03CE6024 LDR V8, [X31], #0x20
	0x03CE6028 BR X1
	0x03CE602C STR D8, [X31 - 0x20]!
	0x03CE6030 STR X30, [X31 + 0x8]
	0x03CE6034 STP X20, X19, [X31 + 0x10]
	0x03CE6038 ADRP X20, 0x701000
	0x03CE603C LDR X1, [X20 + 0x668]
	0x03CE6040 MOV V8.16B, V0.16B
	0x03CE6044 MOV X19, X0
	0x03CE6048 CBNZ X1, 0x3CE6060
	0x03CE604C ADRP X0, 0xFFFFFFFFFCE37000
	0x03CE6050 ADD X0, X0, 0x784
	0x03CE6054 BL 0x1C16CB8
	0x03CE6058 MOV X1, X0
	0x03CE605C STR X0, [X20 + 0x668]
	0x03CE6060 MOV X0, X19
	0x03CE6064 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x703000
	006 Move X21, 0x47E000
	007 Move W8, [X20+1263]
	008 Move X21, [X21+1584]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x47E000
	015 Move X0, [X0+1584]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1263], W8
	019 Move X0, [X21]
	020 Move X20, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X8, [X8]
	028 Compare X8, 0
	029 JumpIfEqual {48}
	030 Move X1, [X8+16]
	031 Move X0, X20
	032 Move X2, X31
	033 Call IntPtr.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {40}
	038 Move X0, [X19+16]
	039 Call Native.YGConfigFree, X0
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X1, X31
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Call Object.Finalize, X0
	047 Return 
	048 Call 0x1C17F20
	049 Move X20, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, X20
	052 Call 0x3EB2AD0
	053 Move X21, [X0]
	054 Call 0x3EB2AE0
	055 Move X0, X19
	056 Move X1, X31
	057 Call Object.Finalize, X0
	058 Compare X21, 0
	059 JumpIfNotEqual {66}
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 
	065 Move X21, X31
	066 Move X0, X21
	067 Call 0x1C17F18
	068 Move X20, X0
	069 Move X0, X19
	070 Move X1, X31
	071 Call Object.Finalize, X0
	072 Compare X21, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X20
	075 Call 0x1D2D690
	076 Move X0, X21
	077 Call 0x1C17F18
	078 Call 0x1991590

Method: System.IntPtr get_Handle()

Disassembly:
	0x03CE6068 LDR X30, [X31 + 0x8]
	0x03CE606C MOV V0.16B, V8.16B

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Boolean get_UseWebDefaults()

Disassembly:
	0x03CE60C8 STR X30, [X31 + 0x8]
	0x03CE60CC STP X20, X19, [X31 + 0x10]
	0x03CE60D0 ADRP X20, 0x701000
	0x03CE60D4 LDR X1, [X20 + 0x678]
	0x03CE60D8 MOV V8.16B, V0.16B
	0x03CE60DC MOV X19, X0
	0x03CE60E0 CBNZ X1, 0x3CE60F8
	0x03CE60E4 ADRP X0, 0xFFFFFFFFFCE0D000
	0x03CE60E8 ADD X0, X0, 0xBA2
	0x03CE60EC BL 0x1C16CB8
	0x03CE60F0 MOV X1, X0
	0x03CE60F4 STR X0, [X20 + 0x678]
	0x03CE60F8 MOV X0, X19
	0x03CE60FC LDP X20, X19, [X31 + 0x10]
	0x03CE6100 LDR X30, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x702000
	005 Move X1, [X20+1336]
	006 Move X19, [X0+16]
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -52256768
	010 Add X0, X0, 3347
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1336], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_UseWebDefaults(System.Boolean value)

Disassembly:
	0x03CE6140 STR X0, [X20 + 0x680]
	0x03CE6144 MOV X0, X19
	0x03CE6148 LDP X20, X19, [X31 + 0x10]
	0x03CE614C LDR X30, [X31 + 0x8]
	0x03CE6150 MOV V0.16B, V8.16B
	0x03CE6154 LDR V8, [X31], #0x20
	0x03CE6158 BR X1
	0x03CE615C STR D8, [X31 - 0x30]!
	0x03CE6160 STP X30, X21, [X31 + 0x10]
	0x03CE6164 STP X20, X19, [X31 + 0x20]
	0x03CE6168 ADRP X21, 0x701000
	0x03CE616C LDR X2, [X21 + 0x688]
	0x03CE6170 MOV V8.16B, V0.16B
	0x03CE6174 MOV W19, W1
	0x03CE6178 MOV X20, X0
	0x03CE617C CBNZ X2, 0x3CE6194
	0x03CE6180 ADRP X0, 0xFFFFFFFFFCE0B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x702000
	006 Move X2, [X21+1328]
	007 Move X19, [X0+16]
	008 Move W20, W1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52191232
	012 Add X0, X0, 1993
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1328], X0
	016 And W1, W20, 1
	017 Move X0, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_PointScaleFactor(System.Single value)

Disassembly:
	0x03CE61C8 MOV W19, W1
	0x03CE61CC MOV X20, X0
	0x03CE61D0 CBNZ X2, 0x3CE61E8
	0x03CE61D4 ADRP X0, 0xFFFFFFFFFCE11000
	0x03CE61D8 ADD X0, X0, 0xC7F
	0x03CE61DC BL 0x1C16CB8
	0x03CE61E0 MOV X2, X0
	0x03CE61E4 STR X0, [X21 + 0x690]
	0x03CE61E8 MOV X0, X20
	0x03CE61EC MOV W1, W19
	0x03CE61F0 LDP X20, X19, [X31 + 0x20]
	0x03CE61F4 LDP X30, X21, [X31 + 0x10]
	0x03CE61F8 MOV V0.16B, V8.16B
	0x03CE61FC LDR V8, [X31], #0x30
	0x03CE6200 BR X2
	0x03CE6204 STR D8, [X31 - 0x30]!
	0x03CE6208 STP X30, X21, [X31 + 0x10]
	0x03CE620C STP X20, X19, [X31 + 0x20]
	0x03CE6210 ADRP X21, 0x701000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x702000
	006 Move X1, [X20+1344]
	007 Move X19, [X0+16]
	008 Move V8, V0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -52137984
	012 Add X0, X0, 3821
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+1344], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void .cctor()

Disassembly:
	0x03CE6260 STP X20, X19, [X31 + 0x20]
	0x03CE6264 ADRP X21, 0x701000
	0x03CE6268 LDR X2, [X21 + 0x6A0]
	0x03CE626C MOV V8.16B, V0.16B
	0x03CE6270 MOV W19, W1
	0x03CE6274 MOV X20, X0
	0x03CE6278 CBNZ X2, 0x3CE6290
	0x03CE627C ADRP X0, 0xFFFFFFFFFCE3D000
	0x03CE6280 ADD X0, X0, 0xAC5
	0x03CE6284 BL 0x1C16CB8
	0x03CE6288 MOV X2, X0
	0x03CE628C STR X0, [X21 + 0x6A0]
	0x03CE6290 MOV X0, X20
	0x03CE6294 MOV W1, W19
	0x03CE6298 LDP X20, X19, [X31 + 0x20]
	0x03CE629C LDP X30, X21, [X31 + 0x10]
	0x03CE62A0 MOV V0.16B, V8.16B
	0x03CE62A4 LDR V8, [X31], #0x30
	0x03CE62A8 BR X2
	0x03CE62AC STP X30, X21, [X31 - 0x20]!
	0x03CE62B0 STP X20, X19, [X31 + 0x10]
	0x03CE62B4 ADRP X21, 0x701000
	0x03CE62B8 LDR X2, [X21 + 0x6A8]
	0x03CE62BC MOV W19, W1
	0x03CE62C0 MOV X20, X0
	0x03CE62C4 CBNZ X2, 0x3CE62DC
	0x03CE62C8 ADRP X0, 0xFFFFFFFFFCE1F000
	0x03CE62CC ADD X0, X0, 0x89E
	0x03CE62D0 BL 0x1C16CB8
	0x03CE62D4 MOV X2, X0
	0x03CE62D8 STR X0, [X21 + 0x6A8]
	0x03CE62DC MOV X0, X20
	0x03CE62E0 MOV W1, W19
	0x03CE62E4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x702000
	006 Move W8, [X19+1264]
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47D000
	012 Move X0, [X0+1584]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+1264], W8
	016 Move X19, 0x702000
	017 Move X21, 0x47D000
	018 Move X8, [X19+1304]
	019 Move X21, [X21+1584]
	020 Compare X8, 0
	021 JumpIfNotEqual {27}
	022 Move X0, -52174848
	023 Add X0, X0, 2630
	024 Call 0x1C17CB8
	025 Move X8, X0
	026 Move [X19+1304], X0
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X8, [X21]
	029 Move X19, X0
	030 Move X0, X8
	031 Call 0x1C17F10
	032 Move X1, X19
	033 Move X20, X0
	034 Call YogaConfig..ctor, X0, X1
	035 Move X8, [X21]
	036 Move X8, [X8+184]
	037 Move [X8], X20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

