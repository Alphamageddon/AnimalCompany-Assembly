Type: UnityEngine.InputSystem.InputManager

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice> get_devices()

Disassembly:
	0x037BC5A0 MOV X0, X20
	0x037BC5A4 BL 0x37C1C54
	0x037BC5A8 ADRP X21, 0x98B000
	0x037BC5AC ADRP X22, 0x98B000
	0x037BC5B0 ADRP X23, 0x95F000
	0x037BC5B4 LDR X21, [X21 + 0xD40]
	0x037BC5B8 LDR X22, [X22 + 0xD28]
	0x037BC5BC LDR X23, [X23 + 0x270]
	0x037BC5C0 MOV X0, X19
	0x037BC5C4 MOV X1, X31
	0x037BC5C8 BL 0x377B5B0
	0x037BC5CC LDR X3, [X21]
	0x037BC5D0 LDR X5, [X22]
	0x037BC5D4 ADD X0, X20, 0xE0
	0x037BC5D8 MOVZ W2, 0x1
	0x037BC5DC MOV X1, X19
	0x037BC5E0 MOV X4, X31
	0x037BC5E4 BL 0x21AE04C
	0x037BC5E8 MOV X0, X19
	0x037BC5EC MOV X1, X31
	0x037BC5F0 BL 0x33BE520
	0x037BC5F4 LDR X8, [X23]
	0x037BC5F8 MOV X19, X0
	0x037BC5FC LDR W9, [X8 + 0xE0]
	0x037BC600 CBNZ W9, 0x37BC60C
	0x037BC604 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC26000
	007 Move X20, 0x98A000
	008 Move W8, [X21+439]
	009 Move X20, [X20+80]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x98A000
	016 Move X0, [X0+80]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+439], W8
	020 Move X1, [X19+120]
	021 Move W3, [X19+112]
	022 Move X4, [X20]
	023 Add X0, X31, 0
	024 Move W2, W31
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Call ReadOnlyArray`1<Object>..ctor, X0, X1, X2, X3
	028 Move X0, [X31]
	029 Move X1, [X31+8]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Add X31, X31, 48
	035 Return X0

Method: UnityEngine.InputSystem.Utilities.TypeTable get_processors()

Disassembly:
	0x037C23DC LDRB W8, [X22 + 0x1C7]
	0x037C23E0 LDR X21, [X21 + 0xC0]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: UnityEngine.InputSystem.Utilities.TypeTable get_interactions()

Disassembly:
	0x037C23E4 MOV X19, X1
	0x037C23E8 MOV X20, X0

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: UnityEngine.InputSystem.Utilities.TypeTable get_composites()

Disassembly:
	0x037C23EC TBNZ X8, 0x0, 0x37C2404
	0x037C23F0 ADRP X0, 0x986000

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputMetrics get_metrics()

Disassembly:
	0x037C23F4 LDR X0, [X0 + 0xC0]
	0x037C23F8 BL 0x1C16CF4
	0x037C23FC MOVZ W8, 0x1
	0x037C2400 STRB W8, [X22 + 0x1C7]
	0x037C2404 MOV X0, X20
	0x037C2408 BL 0x37C2428
	0x037C240C LDR X2, [X21]
	0x037C2410 ADD X0, X20, 0x2C0
	0x037C2414 MOV X1, X19
	0x037C2418 LDP X20, X19, [X31 + 0x20]
	0x037C241C LDP X22, X21, [X31 + 0x10]
	0x037C2420 LDR X30, [X31], #0x30
	0x037C2424 B 0x28F14E0
	0x037C2428 STP X30, X21, [X31 - 0x20]!
	0x037C242C STP X20, X19, [X31 + 0x10]
	0x037C2430 ADRP X20, 0xC1F000
	0x037C2434 LDRB W8, [X20 + 0x1FC]
	0x037C2438 MOV X19, X0
	0x037C243C TBNZ X8, 0x0, 0x37C246C
	0x037C2440 ADRP X0, 0x986000
	0x037C2444 LDR X0, [X0 + 0xC8]
	0x037C2448 BL 0x1C16CF4
	0x037C244C ADRP X0, 0x959000
	0x037C2450 LDR X0, [X0 + 0xED0]
	0x037C2454 BL 0x1C16CF4
	0x037C2458 ADRP X0, 0x986000
	0x037C245C LDR X0, [X0 + 0xD0]
	0x037C2460 BL 0x1C16CF4
	0x037C2464 MOVZ W8, 0x1
	0x037C2468 STRB W8, [X20 + 0x1FC]
	0x037C246C LDRB W8, [X19 + 0x3B0]
	0x037C2470 CBNZ W8, 0x37C2518
	0x037C2474 LDR X20, [X19 + 0x440]
	0x037C2478 CBZ X20, 0x37C2518
	0x037C247C ADRP X8, 0x986000
	0x037C2480 LDR X8, [X8 + 0xC8]
	0x037C2484 LDR X0, [X8]
	0x037C2488 BL 0x1C16F10
	0x037C248C ADRP X8, 0x986000
	0x037C2490 LDR X8, [X8 + 0xD0]
	0x037C2494 MOV X1, X19
	0x037C2498 MOV X3, X31
	0x037C249C MOV X21, X0
	0x037C24A0 LDR X2, [X8]
	0x037C24A4 BL 0x2984034
	0x037C24A8 ADRP X10, 0x959000
	0x037C24AC LDR X8, [X20]
	0x037C24B0 LDR X10, [X10 + 0xED0]
	0x037C24B4 LDRH W9, [X8 + 0x12E]
	0x037C24B8 LDR X1, [X10]
	0x037C24BC CBZ X9, 0x37C24E0
	0x037C24C0 LDR X10, [X8 + 0xB0]
	0x037C24C4 ADD X10, X10, 0x8
	0x037C24C8 LDUR X11, [X10 - 0x8]
	0x037C24CC CMP X11, X1
	0x037C24D0 B.EQ 0x37C24F0
	0x037C24D4 SUBS X9, X9, 0x1
	0x037C24D8 ADD X10, X10, 0x10
	0x037C24DC B.NE 0x37C24C8
	0x037C24E0 MOVZ W2, 0x7
	0x037C24E4 MOV X0, X20
	0x037C24E8 BL 0x1C5C788
	0x037C24EC B 0x37C2500
	0x037C24F0 LDR W9, [X10]
	0x037C24F4 ADD W9, W9, 0x7
	0x037C24F8 ADD X8, X8, W9, 0x4, SXTW
	0x037C24FC ADD X0, X8, 0x138
	0x037C2500 LDP X8, X2, [X0]
	0x037C2504 MOV X0, X20
	0x037C2508 MOV X1, X21
	0x037C250C BLR X8
	0x037C2510 MOVZ W8, 0x1
	0x037C2514 STRB W8, [X19 + 0x3B0]
	0x037C2518 LDP X20, X19, [X31 + 0x10]
	0x037C251C LDP X30, X21, [X31], #0x20
	0x037C2520 RET
	0x037C2524 STR X30, [X31 - 0x30]!
	0x037C2528 STP X22, X21, [X31 + 0x10]
	0x037C252C STP X20, X19, [X31 + 0x20]
	0x037C2530 ADRP X22, 0xC1F000
	0x037C2534 ADRP X21, 0x986000
	0x037C2538 LDRB W8, [X22 + 0x1C8]
	0x037C253C LDR X21, [X21 + 0xD8]
	0x037C2540 MOV X19, X1
	0x037C2544 MOV X20, X0
	0x037C2548 TBNZ X8, 0x0, 0x37C2560
	0x037C254C ADRP X0, 0x986000
	0x037C2550 LDR X0, [X0 + 0xD8]
	0x037C2554 BL 0x1C16CF4
	0x037C2558 MOVZ W8, 0x1
	0x037C255C STRB W8, [X22 + 0x1C8]
	0x037C2560 LDR X2, [X21]
	0x037C2564 ADD X0, X20, 0x2C0
	0x037C2568 MOV X1, X19
	0x037C256C LDP X20, X19, [X31 + 0x20]
	0x037C2570 LDP X22, X21, [X31 + 0x10]
	0x037C2574 LDR X30, [X31], #0x30
	0x037C2578 B 0x28F1650
	0x037C257C STR X30, [X31 - 0x30]!
	0x037C2580 STP X22, X21, [X31 + 0x10]
	0x037C2584 STP X20, X19, [X31 + 0x20]
	0x037C2588 ADRP X22, 0xC1F000
	0x037C258C ADRP X21, 0x986000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+40], X27
	004 Move [X31+48], X26
	005 Move [X31+56], X25
	006 Move [X31+64], X24
	007 Move [X31+72], X23
	008 Move [X31+80], X22
	009 Move [X31+88], X21
	010 Move [X31+96], X20
	011 Move [X31+104], X19
	012 Move X21, 0xC20000
	013 Move W9, [X21+440]
	014 Move X20, X0
	015 Move X19, X8
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x987000
	021 Move X0, [X0+24]
	022 Call 0x1C17CF4
	023 Move X0, 0x987000
	024 Move X0, [X0+32]
	025 Call 0x1C17CF4
	026 Move X0, 0x987000
	027 Move X0, [X0+40]
	028 Call 0x1C17CF4
	029 Move X0, 0x987000
	030 Move X0, [X0+48]
	031 Call 0x1C17CF4
	032 Move X0, 0x95A000
	033 Move X0, [X0+3392]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+440], W8
	037 Move V0, [X20+71]
	038 Move V1, [X20+70]
	039 Move W25, [X20+1096]
	040 Move W23, [X20+1104]
	041 Move [X31], V1
	042 Move [X31+8], V0
	043 Move W26, [X20+112]
	044 Move W24, [X20+180]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W27, W26
	047 Move X21, X31
	048 Move W27, W26
	049 Move X8, [X20+120]
	050 Compare X8, 0
	051 JumpIfEqual {125}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, X21
	055 Move X0, [X8+32]
	056 Compare X0, 0
	057 JumpIfEqual {125}
	058 Move X1, X31
	059 Call InputDevice.get_allControls, X0
	060 Move W8, [X20+112]
	061 Move X9, X1
	062 ShiftRight X9, 32
	063 And X9, X9, 0x7FFFFFFF
	064 Add X21, X21, 1
	065 Add W27, W27, W9
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X0, [X20+24]
	068 Compare X0, 0
	069 JumpIfEqual {125}
	070 Move X8, 0x987000
	071 Move X8, [X8+48]
	072 Move X1, [X8]
	073 Call Dictionary`2<InternedString, Object>.get_Count, X0
	074 Move X8, [X20+32]
	075 Compare X8, 0
	076 JumpIfEqual {125}
	077 Move X9, 0x987000
	078 Move X9, [X9+40]
	079 Move W21, W0
	080 Move X0, X8
	081 Move X1, [X9]
	082 Call Dictionary`2<InternedString, Object>.get_Count, X0
	083 Move X8, [X20+40]
	084 Compare X8, 0
	085 JumpIfEqual {125}
	086 Move X9, 0x987000
	087 Move X9, [X9+32]
	088 Move W22, W0
	089 Move X0, X8
	090 Move X1, [X9]
	091 Call Dictionary`2<InternedString, Object>.get_Count, X0
	092 Move X8, [X20+56]
	093 Compare X8, 0
	094 JumpIfEqual {125}
	095 Move X9, 0x987000
	096 Move X9, [X9+24]
	097 Move X1, [X9]
	098 Add W9, W22, W21
	099 Add W20, W9, W0
	100 Move X0, X8
	101 Call Dictionary`2<InternedString, Object>.get_Count, X0
	102 Move V1, [X31]
	103 Move V0, [X31+16]
	104 Add W8, W20, W0
	105 Move [X19], W25
	106 Move [X19+4], W26
	107 Move [X19+8], W23
	108 Move [X19+12], W24
	109 Move [X19+16], W27
	110 Move [X19+20], W8
	111 Move [X19+24], V1
	112 Move [X19+40], V0
	113 Move X20, [X31+96]
	114 Move X19, [X31+104]
	115 Move X22, [X31+80]
	116 Move X21, [X31+88]
	117 Move X24, [X31+64]
	118 Move X23, [X31+72]
	119 Move X26, [X31+48]
	120 Move X25, [X31+56]
	121 Move X30, [X31+32]
	122 Move X27, [X31+40]
	123 Add X31, X31, 112
	124 Return X0
	125 Call 0x1C17F20
	126 Call 0x1C17F28

Method: UnityEngine.InputSystem.InputSettings get_settings()

Disassembly:
	0x037C2590 LDRB W8, [X22 + 0x1C9]
	0x037C2594 LDR X21, [X21 + 0xC0]

ISIL:
	001 Move X0, [X0+1152]
	002 Return X0

Method: System.Void set_settings(UnityEngine.InputSystem.InputSettings value)

Disassembly:
	0x037C2598 MOV X19, X1
	0x037C259C MOV X20, X0
	0x037C25A0 TBNZ X8, 0x0, 0x37C25B8
	0x037C25A4 ADRP X0, 0x986000
	0x037C25A8 LDR X0, [X0 + 0xC0]
	0x037C25AC BL 0x1C16CF4
	0x037C25B0 MOVZ W8, 0x1
	0x037C25B4 STRB W8, [X22 + 0x1C9]
	0x037C25B8 LDR X2, [X21]
	0x037C25BC ADD X0, X20, 0x310
	0x037C25C0 MOV X1, X19
	0x037C25C4 LDP X20, X19, [X31 + 0x20]
	0x037C25C8 LDP X22, X21, [X31 + 0x10]
	0x037C25CC LDR X30, [X31], #0x30
	0x037C25D0 B 0x28F14E0
	0x037C25D4 STR X30, [X31 - 0x30]!
	0x037C25D8 STP X22, X21, [X31 + 0x10]
	0x037C25DC STP X20, X19, [X31 + 0x20]
	0x037C25E0 ADRP X22, 0xC1F000
	0x037C25E4 ADRP X21, 0x986000
	0x037C25E8 LDRB W8, [X22 + 0x1CA]
	0x037C25EC LDR X21, [X21 + 0xD8]
	0x037C25F0 MOV X19, X1
	0x037C25F4 MOV X20, X0
	0x037C25F8 TBNZ X8, 0x0, 0x37C2610
	0x037C25FC ADRP X0, 0x986000
	0x037C2600 LDR X0, [X0 + 0xD8]
	0x037C2604 BL 0x1C16CF4
	0x037C2608 MOVZ W8, 0x1
	0x037C260C STRB W8, [X22 + 0x1CA]
	0x037C2610 LDR X2, [X21]
	0x037C2614 ADD X0, X20, 0x310
	0x037C2618 MOV X1, X19
	0x037C261C LDP X20, X19, [X31 + 0x20]
	0x037C2620 LDP X22, X21, [X31 + 0x10]
	0x037C2624 LDR X30, [X31], #0x30
	0x037C2628 B 0x28F1650
	0x037C262C STR X30, [X31 - 0x30]!
	0x037C2630 STP X22, X21, [X31 + 0x10]
	0x037C2634 STP X20, X19, [X31 + 0x20]
	0x037C2638 ADRP X22, 0xC1F000
	0x037C263C ADRP X21, 0x986000
	0x037C2640 LDRB W8, [X22 + 0x1CB]
	0x037C2644 LDR X21, [X21 + 0xC0]
	0x037C2648 MOV X19, X1
	0x037C264C MOV X20, X0
	0x037C2650 TBNZ X8, 0x0, 0x37C2668
	0x037C2654 ADRP X0, 0x986000
	0x037C2658 LDR X0, [X0 + 0xC0]
	0x037C265C BL 0x1C16CF4
	0x037C2660 MOVZ W8, 0x1
	0x037C2664 STRB W8, [X22 + 0x1CB]
	0x037C2668 LDR X2, [X21]
	0x037C266C ADD X0, X20, 0x360
	0x037C2670 MOV X1, X19
	0x037C2674 LDP X20, X19, [X31 + 0x20]
	0x037C2678 LDP X22, X21, [X31 + 0x10]
	0x037C267C LDR X30, [X31], #0x30
	0x037C2680 B 0x28F14E0
	0x037C2684 STR X30, [X31 - 0x30]!
	0x037C2688 STP X22, X21, [X31 + 0x10]
	0x037C268C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC20000
	007 Move X21, 0x932000
	008 Move W8, [X22+441]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x932000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+441], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {61}
	034 Move X0, [X21]
	035 Move X21, [X19+1152]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X20
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {54}
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return 
	054 Move [X19+1152], X20
	055 Move X0, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X30, [X31+48]
	061 Move X0, 0x937000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0x93C000
	067 Move X0, [X0+3784]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Move X2, X31
	072 Call ArgumentNullException..ctor, X0, X1
	073 Move X0, 0x987000
	074 Move X0, [X0+56]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.InputUpdateType get_updateMask()

Disassembly:
	0x037C2C28 BL 0x19903C0
	0x037C2C2C MOVZ W1, 0x3

ISIL:
	001 Move W0, [X0+168]
	002 Return X0

Method: System.Void set_updateMask(UnityEngine.InputSystem.LowLevel.InputUpdateType value)

Disassembly:
	0x037C2C30 MOV X0, X19
	0x037C2C34 MOV X2, X20
	0x037C2C38 BL 0x1993444
	0x037C2C3C MOV X0, X19
	0x037C2C40 BL 0x19903C0
	0x037C2C44 ADRP X0, 0x939000
	0x037C2C48 LDR X0, [X0 + 0x9B0]
	0x037C2C4C BL 0x1C16D08
	0x037C2C50 MOV X2, X0

ISIL:
	001 Move W8, [X0+168]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+112]
	004 Move [X0+168], W1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Return 

Method: UnityEngine.InputSystem.LowLevel.InputUpdateType get_defaultUpdateType()

Disassembly:
	0x037C2DE0 MOV X1, X31
	0x037C2DE4 ADD X0, X8, 0x50
	0x037C2DE8 BL 0x38196AC
	0x037C2DEC TBNZ X23, 0x0, 0x37C2E4C
	0x037C2DF0 LDR W8, [X22]
	0x037C2DF4 CMP W8, 0x1
	0x037C2DF8 B.LT 0x37C2E4C

ISIL:
	001 Move W8, [X0+172]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, W8
	005 Return X0
	006 Move W0, [X0+168]
	007 Move X1, X31
	008 Call InputUpdate.GetUpdateTypeForPlayer, X0
	009 Return X0

Method: System.Single get_pollingFrequency()

Disassembly:
	0x037C2DFC B.NE 0x37C30E0
	0x037C2E00 ADRP X8, 0x985000

ISIL:
	001 Move V0, [X0+20]
	002 Return V0

Method: System.Void set_pollingFrequency(System.Single value)

Disassembly:
	0x037C2E04 LDR X8, [X8 + 0xD80]
	0x037C2E08 MOV X0, X22
	0x037C2E0C MOV W1, W31
	0x037C2E10 LDR X2, [X8]
	0x037C2E14 BL 0x2DE8D70
	0x037C2E18 STP X0, X1, [X31 + 0x20]
	0x037C2E1C ADD X0, X31, 0x20
	0x037C2E20 MOV X1, X31
	0x037C2E24 BL 0x375F7A0
	0x037C2E28 TBNZ X0, 0x0, 0x37C2E4C
	0x037C2E2C LDR X0, [X19 + 0x30]
	0x037C2E30 CBZ X0, 0x37C30D8
	0x037C2E34 ADRP X8, 0x986000
	0x037C2E38 LDP X3, X4, [X31 + 0x20]
	0x037C2E3C LDP X1, X2, [X31 + 0x30]
	0x037C2E40 LDR X8, [X8 + 0x118]
	0x037C2E44 LDR X5, [X8]
	0x037C2E48 BL 0x2A575D0
	0x037C2E4C LDR X0, [X19 + 0x48]
	0x037C2E50 STR W25, [X31 + 0xC]
	0x037C2E54 CBZ X0, 0x37C30D8
	0x037C2E58 STR W24, [X31 + 0x8]
	0x037C2E5C ADRP X29, 0x984000
	0x037C2E60 LDR X29, [X29 + 0x840]
	0x037C2E64 LDP X1, X2, [X31 + 0x30]
	0x037C2E68 LDR X3, [X29]
	0x037C2E6C BL 0x2A5EC30
	0x037C2E70 LDR X0, [X19 + 0x48]
	0x037C2E74 CBZ X0, 0x37C30D8
	0x037C2E78 ADRP X8, 0x986000
	0x037C2E7C LDR X8, [X8 + 0x110]
	0x037C2E80 LDR X1, [X8]
	0x037C2E84 BL 0x2A5D580
	0x037C2E88 CMP W0, 0x1
	0x037C2E8C B.LT 0x37C2FF8
	0x037C2E90 LDR X0, [X19 + 0x48]
	0x037C2E94 CBZ X0, 0x37C30D8
	0x037C2E98 ADRP X8, 0x984000
	0x037C2E9C LDR X8, [X8 + 0x850]
	0x037C2EA0 ADRP X20, 0x986000
	0x037C2EA4 LDR X1, [X8]
	0x037C2EA8 LDR X20, [X20 + 0x120]
	0x037C2EAC BL 0x2A5D590
	0x037C2EB0 LDR X1, [X20]
	0x037C2EB4 BL 0x21D55E4
	0x037C2EB8 CBZ X0, 0x37C30D8
	0x037C2EBC LDR X8, [X0 + 0x18]
	0x037C2EC0 MOV X24, X0
	0x037C2EC4 CMP W8, 0x1
	0x037C2EC8 B.LT 0x37C2FF8
	0x037C2ECC ADRP X21, 0x985000
	0x037C2ED0 LDR X21, [X21 + 0xD80]
	0x037C2ED4 MOV X20, X31
	0x037C2ED8 AND X8, X8, 0x0
	0x037C2EDC CMP X20, W8, UXTW
	0x037C2EE0 B.CS 0x37C30DC
	0x037C2EE4 LDR X0, [X19 + 0x48]
	0x037C2EE8 CBZ X0, 0x37C30D8
	0x037C2EEC ADD X8, X24, X20, 0x4, LSL
	0x037C2EF0 LDP X25, X26, [X8 + 0x20]
	0x037C2EF4 ADRP X8, 0x984000
	0x037C2EF8 LDR X8, [X8 + 0x848]
	0x037C2EFC MOV X1, X25
	0x037C2F00 MOV X2, X26
	0x037C2F04 LDR X3, [X8]
	0x037C2F08 BL 0x2A5D710
	0x037C2F0C MOV X27, X1
	0x037C2F10 TBZ X23, 0x0, 0x37C2FAC
	0x037C2F14 LDR W8, [X22]
	0x037C2F18 CMP W8, 0x1
	0x037C2F1C B.LT 0x37C2FE8
	0x037C2F20 MOV W28, W31
	0x037C2F24 LDR X2, [X21]
	0x037C2F28 MOV X0, X22

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xC20000
	006 Move W8, [X19+442]
	007 Move V8, V0
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x95A000
	014 Move X0, [X0+3792]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+442], W8
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move X19, [X20+1088]
	020 Move [X20+20], S8
	021 Compare X19, 0
	022 JumpIfEqual {39}
	023 Move X10, 0x95A000
	024 Move X8, [X19]
	025 Move X10, [X10+3792]
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X1, [X10]
	028 Compare X9, 0
	029 JumpIfEqual {36}
	030 Move X10, [X8+176]
	031 Add X10, X10, 8
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Subtract X9, X9, 1
	035 Add X10, X10, 16
	036 Move W2, 18
	037 Move X0, X19
	038 Call 0x1C5D788
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+8]
	042 Move V8, [X31+32]
	043 Return 
	044 Move W9, [X10]
	045 Add W9, W9, 18
	046 Add X8, X8, W9
	047 Add X0, X8, 312
	048 Move X2, [X0]
	049 Move X1, [X0+8]
	050 Move X0, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+8]
	054 Move V0, V8
	055 Move V8, [X31+32]
	056 CallNoReturn X2
	057 Move X0, 0x93A000
	058 Move X0, [X0+1400]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0x987000
	063 Move X0, [X0+120]
	064 Call 0x1C17D08
	065 Move X20, X0
	066 Move X0, 0x93C000
	067 Move X0, [X0+3784]
	068 Call 0x1C17D08
	069 Move X2, X0
	070 Move X0, X19
	071 Move X1, X20
	072 Move X3, X31
	073 Call ArgumentException..ctor, X0, X1, X2
	074 Move X0, 0x987000
	075 Move X0, [X0+128]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC

Method: System.Void add_onDeviceChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.InputDeviceChange> value)

Disassembly:
	0x037BAF38 ADRP X0, 0x98D000
	0x037BAF3C LDR X0, [X0 + 0xC78]
	0x037BAF40 BL 0x1C16CF4
	0x037BAF44 MOVZ W8, 0x1
	0x037BAF48 STRB W8, [X20 + 0x169]
	0x037BAF4C MOVI V0.2D, 0x0
	0x037BAF50 STP V0, V0, [X31 + 0x10]
	0x037BAF54 STR V0, [X31]
	0x037BAF58 LDR X8, [X19 + 0x18]
	0x037BAF5C CBZ X8, 0x37BAFD4
	0x037BAF60 LDR X0, [X8 + 0x28]
	0x037BAF64 CBZ X0, 0x37BAFD4
	0x037BAF68 ADRP X8, 0x98D000
	0x037BAF6C LDR X8, [X8 + 0xC58]
	0x037BAF70 ADRP X20, 0x98D000
	0x037BAF74 ADRP X21, 0x98D000
	0x037BAF78 LDR X1, [X8]
	0x037BAF7C LDR X20, [X20 + 0xC68]
	0x037BAF80 LDR X21, [X21 + 0xC60]
	0x037BAF84 ADD X8, X31, 0x0
	0x037BAF88 BL 0x2A5ABD0
	0x037BAF8C LDR X1, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC28000
	007 Move X21, 0x98E000
	008 Move W8, [X22+443]
	009 Move X21, [X21+2992]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x98E000
	017 Move X0, [X0+2992]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+443], W8
	021 Move X2, [X21]
	022 Add X0, X20, 224
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_onDeviceChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.InputDeviceChange> value)

Disassembly:
	0x037BB1A4 SUB X31, X31, 0x60
	0x037BB1A8 STP X30, X21, [X31 + 0x40]
	0x037BB1AC STP X20, X19, [X31 + 0x50]
	0x037BB1B0 ADRP X21, 0xC26000
	0x037BB1B4 LDRB W8, [X21 + 0x16A]
	0x037BB1B8 MOV X20, X1
	0x037BB1BC MOV X19, X0
	0x037BB1C0 TBNZ X8, 0x0, 0x37BB1E4
	0x037BB1C4 ADRP X0, 0x98C000
	0x037BB1C8 LDR X0, [X0 + 0xC80]
	0x037BB1CC BL 0x1C16CF4
	0x037BB1D0 ADRP X0, 0x98C000
	0x037BB1D4 LDR X0, [X0 + 0xC88]
	0x037BB1D8 BL 0x1C16CF4
	0x037BB1DC MOVZ W8, 0x1
	0x037BB1E0 STRB W8, [X21 + 0x16A]
	0x037BB1E4 STP X31, X31, [X31 + 0x20]
	0x037BB1E8 STR X31, [X31 + 0x30]
	0x037BB1EC LDR X8, [X19 + 0x20]
	0x037BB1F0 CBZ X8, 0x37BB248
	0x037BB1F4 ADD X8, X31, 0x8
	0x037BB1F8 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC27000
	007 Move X21, 0x98D000
	008 Move W8, [X22+444]
	009 Move X21, [X21+3016]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x98D000
	017 Move X0, [X0+3016]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+444], W8
	021 Move X2, [X21]
	022 Add X0, X20, 224
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onDeviceStateChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.LowLevel.InputEventPtr> value)

Disassembly:
	0x037C2F2C MOV W1, W28
	0x037C2F30 BL 0x2DE8D70
	0x037C2F34 MOV X2, X0
	0x037C2F38 MOV X3, X1
	0x037C2F3C MOV X0, X25
	0x037C2F40 MOV X1, X26
	0x037C2F44 MOV X4, X31
	0x037C2F48 BL 0x37564A4
	0x037C2F4C TBNZ X0, 0x0, 0x37C2F80
	0x037C2F50 LDR X2, [X21]
	0x037C2F54 MOV X0, X22
	0x037C2F58 MOV W1, W28
	0x037C2F5C BL 0x2DE8D70
	0x037C2F60 MOV X2, X31
	0x037C2F64 BL 0x37577E0
	0x037C2F68 MOV X1, X0
	0x037C2F6C MOVZ W2, 0x3B
	0x037C2F70 MOV X0, X27
	0x037C2F74 MOV X3, X31
	0x037C2F78 BL 0x37677D0
	0x037C2F7C TBZ X0, 0x0, 0x37C2F98
	0x037C2F80 LDR X0, [X19 + 0x48]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC20000
	007 Move X21, 0x987000
	008 Move W8, [X22+445]
	009 Move X21, [X21+136]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x987000
	017 Move X0, [X0+136]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+445], W8
	021 Move X2, [X21]
	022 Add X0, X20, 304
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_onDeviceStateChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.LowLevel.InputEventPtr> value)

Disassembly:
	0x037C2F84 CBZ X0, 0x37C30D8
	0x037C2F88 LDR X3, [X29]
	0x037C2F8C MOV X1, X25
	0x037C2F90 MOV X2, X26
	0x037C2F94 BL 0x2A5EC30
	0x037C2F98 LDR W8, [X22]
	0x037C2F9C ADD W28, W28, 0x1
	0x037C2FA0 CMP W28, W8
	0x037C2FA4 B.LT 0x37C2F24
	0x037C2FA8 B 0x37C2FE8
	0x037C2FAC LDP X0, X1, [X31 + 0x30]
	0x037C2FB0 MOV X2, X31
	0x037C2FB4 BL 0x37577E0
	0x037C2FB8 MOV X1, X0
	0x037C2FBC MOVZ W2, 0x3B
	0x037C2FC0 MOV X0, X27
	0x037C2FC4 MOV X3, X31
	0x037C2FC8 BL 0x37677D0
	0x037C2FCC TBZ X0, 0x0, 0x37C2FE8
	0x037C2FD0 LDR X0, [X19 + 0x48]
	0x037C2FD4 CBZ X0, 0x37C30D8
	0x037C2FD8 LDR X3, [X29]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC20000
	007 Move X21, 0x987000
	008 Move W8, [X22+446]
	009 Move X21, [X21+144]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x987000
	017 Move X0, [X0+144]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+446], W8
	021 Move X2, [X21]
	022 Add X0, X20, 304
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onDeviceCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate value)

Disassembly:
	0x037C2FDC MOV X1, X25
	0x037C2FE0 MOV X2, X26
	0x037C2FE4 BL 0x2A5EC30
	0x037C2FE8 LDR W8, [X24 + 0x18]
	0x037C2FEC ADD X20, X20, 0x1
	0x037C2FF0 CMP X20, W8, SXTW
	0x037C2FF4 B.LT 0x37C2EDC
	0x037C2FF8 ADRP X21, 0x986000
	0x037C2FFC ADRP X24, 0x986000
	0x037C3000 LDR X21, [X21 + 0x128]
	0x037C3004 B 0x3EB1944
	0x037C3008 TBZ X23, 0x0, 0x37C3068
	0x037C300C LDR W8, [X22]
	0x037C3010 LDR W25, [X31 + 0xC]
	0x037C3014 CMP W8, 0x1
	0x037C3018 B.LT 0x37C307C
	0x037C301C ADRP X20, 0x984000
	0x037C3020 LDR X20, [X20 + 0xD80]
	0x037C3024 MOV W23, W31
	0x037C3028 LDR X2, [X20]
	0x037C302C MOV X0, X22
	0x037C3030 MOV W1, W23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC20000
	007 Move X21, 0x987000
	008 Move W8, [X22+447]
	009 Move X21, [X21+152]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+447], W8
	021 Move X2, [X21]
	022 Add X0, X20, 464
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_onDeviceCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate value)

Disassembly:
	0x037C3034 BL 0x2DE8D70
	0x037C3038 MOV X2, X0
	0x037C303C MOV X4, X1
	0x037C3040 AND W3, W25, 0x1
	0x037C3044 MOV X0, X19
	0x037C3048 MOV X1, X2
	0x037C304C MOV X2, X4
	0x037C3050 BL 0x37C3434
	0x037C3054 LDR W8, [X22]
	0x037C3058 ADD W23, W23, 0x1
	0x037C305C CMP W23, W8
	0x037C3060 B.LT 0x37C3028
	0x037C3064 B 0x37C307C
	0x037C3068 LDR W8, [X31 + 0xC]
	0x037C306C LDP X1, X2, [X31 + 0x30]
	0x037C3070 MOV X0, X19
	0x037C3074 AND W3, W8, 0x1
	0x037C3078 BL 0x37C3434
	0x037C307C LDR W8, [X31 + 0x8]
	0x037C3080 ADD X0, X31, 0x30
	0x037C3084 MOV X1, X31
	0x037C3088 ADD X19, X19, 0x220

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+448]
	009 Move X21, [X21+160]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+160]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+448], W8
	021 Move X2, [X21]
	022 Add X0, X20, 464
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onFindControlLayoutForDevice(UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate value)

Disassembly:
	0x037C308C ANDS W31, W8, 0x1
	0x037C3090 MOVZ W8, 0x2
	0x037C3094 CSEL W20, W8, W31, NE
	0x037C3098 BL 0x37565F4
	0x037C309C LDR X3, [X21]
	0x037C30A0 LDR X5, [X24]
	0x037C30A4 MOV X1, X0
	0x037C30A8 MOV X0, X19
	0x037C30AC MOV W2, W20
	0x037C30B0 MOV X4, X31
	0x037C30B4 BL 0x21AE04C
	0x037C30B8 LDP X20, X19, [X31 + 0x90]
	0x037C30BC LDP X22, X21, [X31 + 0x80]
	0x037C30C0 LDP X24, X23, [X31 + 0x70]
	0x037C30C4 LDP X26, X25, [X31 + 0x60]
	0x037C30C8 LDP X28, X27, [X31 + 0x50]
	0x037C30CC LDP X29, X30, [X31 + 0x40]
	0x037C30D0 ADD X31, X31, 0xA0
	0x037C30D4 RET
	0x037C30D8 BL 0x1C16F20
	0x037C30DC BL 0x1C16F28
	0x037C30E0 LDR V0, [X31 + 0x3]
	0x037C30E4 ADRP X0, 0x95B000
	0x037C30E8 STR V0, [X31 + 0x1]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+449]
	009 Move X21, [X21+168]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+168]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+449], W8
	021 Move X2, [X21]
	022 Add X0, X19, 384
	023 Move X1, X20
	024 Call 0x28F24E0, X0, X1
	025 Move X0, X19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]

Method: System.Void remove_onFindControlLayoutForDevice(UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate value)

Disassembly:
	0x037C3370 LDP X1, X2, [X31 + 0x40]
	0x037C3374 LDR X3, [X23]
	0x037C3378 LDP X20, X22, [X31 + 0x50]
	0x037C337C MOVI V0.2D, 0x0
	0x037C3380 ADD X0, X31, 0x20
	0x037C3384 STP V0, V0, [X31 + 0x20]
	0x037C3388 BL 0x2DE897C
	0x037C338C LDP V0, V1, [X31 + 0x20]
	0x037C3390 AND W4, W21, 0x1
	0x037C3394 ADD X3, X31, 0x0
	0x037C3398 MOV X0, X19
	0x037C339C MOV X1, X20
	0x037C33A0 MOV X2, X22
	0x037C33A4 MOV W5, W31
	0x037C33A8 MOV W6, W31
	0x037C33AC STP V0, V1, [X31]
	0x037C33B0 BL 0x37C2CF0
	0x037C33B4 LDP X20, X19, [X31 + 0x80]
	0x037C33B8 LDP X22, X21, [X31 + 0x70]
	0x037C33BC LDP X30, X23, [X31 + 0x60]
	0x037C33C0 ADD X31, X31, 0x90
	0x037C33C4 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+450]
	009 Move X21, [X21+184]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+184]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+450], W8
	021 Move X2, [X21]
	022 Add X0, X20, 384
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onLayoutChange(System.Action`2<System.String, UnityEngine.InputSystem.InputControlLayoutChange> value)

Disassembly:
	0x037BAF90 ADD X0, X31, 0x0
	0x037BAF94 BL 0x2C01CA0
	0x037BAF98 TBZ X0, 0x0, 0x37BAFB8
	0x037BAF9C LDP X0, X1, [X31 + 0x10]
	0x037BAFA0 MOV X2, X31
	0x037BAFA4 BL 0x37577E0
	0x037BAFA8 MOV X1, X0
	0x037BAFAC MOV X0, X19
	0x037BAFB0 BL 0x37BB1A4
	0x037BAFB4 B 0x37BAF8C
	0x037BAFB8 LDR X1, [X21]
	0x037BAFBC ADD X0, X31, 0x0
	0x037BAFC0 BL 0x2C01DC8
	0x037BAFC4 LDP X20, X19, [X31 + 0x40]
	0x037BAFC8 LDP X30, X21, [X31 + 0x30]
	0x037BAFCC ADD X31, X31, 0x50
	0x037BAFD0 RET
	0x037BAFD4 BL 0x1C16F20
	0x037BAFD8 B 0x37BAFDC
	0x037BAFDC MOV X20, X0
	0x037BAFE0 CMP W1, 0x1
	0x037BAFE4 B.NE 0x37BB010

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC28000
	007 Move X21, 0x98E000
	008 Move W8, [X22+451]
	009 Move X21, [X21+3000]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x98E000
	017 Move X0, [X0+3000]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+451], W8
	021 Move X2, [X21]
	022 Add X0, X20, 544
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_onLayoutChange(System.Action`2<System.String, UnityEngine.InputSystem.InputControlLayoutChange> value)

Disassembly:
	0x037BB1FC MOV X1, X20
	0x037BB200 BL 0x37BB258
	0x037BB204 LDUR V0, [X31 + 0x8]
	0x037BB208 LDR X8, [X31 + 0x18]
	0x037BB20C STR V0, [X31 + 0x2]
	0x037BB210 LDRB W9, [X31 + 0x20]
	0x037BB214 STR X8, [X31 + 0x30]
	0x037BB218 CBZ W9, 0x37BB248
	0x037BB21C ADRP X8, 0x98C000
	0x037BB220 LDR X8, [X8 + 0xC88]
	0x037BB224 ADD X0, X31, 0x20
	0x037BB228 LDR X1, [X8]
	0x037BB22C BL 0x243EC90
	0x037BB230 MOV X2, X0
	0x037BB234 MOV X3, X1
	0x037BB238 MOV X0, X19
	0x037BB23C MOV X1, X2
	0x037BB240 MOV X2, X3
	0x037BB244 BL 0x37BB49C
	0x037BB248 LDP X20, X19, [X31 + 0x50]
	0x037BB24C LDP X30, X21, [X31 + 0x40]
	0x037BB250 ADD X31, X31, 0x60

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC27000
	007 Move X21, 0x98D000
	008 Move W8, [X22+452]
	009 Move X21, [X21+3024]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x98D000
	017 Move X0, [X0+3024]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+452], W8
	021 Move X2, [X21]
	022 Add X0, X20, 544
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onEvent(System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr, UnityEngine.InputSystem.InputDevice> value)

Disassembly:
	0x037BAEE0 BL 0x1C16F20
	0x037BAEE4 MOV X1, X31
	0x037BAEE8 B 0x33BDD8C
	0x037BAEEC SUB X31, X31, 0x50
	0x037BAEF0 STP X30, X21, [X31 + 0x30]
	0x037BAEF4 STP X20, X19, [X31 + 0x40]
	0x037BAEF8 ADRP X20, 0xC27000
	0x037BAEFC LDRB W8, [X20 + 0x169]
	0x037BAF00 MOV X19, X0
	0x037BAF04 TBNZ X8, 0x0, 0x37BAF4C
	0x037BAF08 ADRP X0, 0x98D000
	0x037BAF0C LDR X0, [X0 + 0xC58]
	0x037BAF10 BL 0x1C16CF4
	0x037BAF14 ADRP X0, 0x98D000
	0x037BAF18 LDR X0, [X0 + 0xC60]
	0x037BAF1C BL 0x1C16CF4
	0x037BAF20 ADRP X0, 0x98D000
	0x037BAF24 LDR X0, [X0 + 0xC68]
	0x037BAF28 BL 0x1C16CF4
	0x037BAF2C ADRP X0, 0x98D000
	0x037BAF30 LDR X0, [X0 + 0xC70]
	0x037BAF34 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC28000
	007 Move X21, 0x98E000
	008 Move W8, [X22+453]
	009 Move X21, [X21+2984]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x98E000
	017 Move X0, [X0+2984]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+453], W8
	021 Move X2, [X21]
	022 Add X0, X20, 624
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_onEvent(System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr, UnityEngine.InputSystem.InputDevice> value)

Disassembly:
	0x037BB14C MOV X0, X19
	0x037BB150 BL 0x3EB1AD0
	0x037BB154 LDR X20, [X0]
	0x037BB158 BL 0x3EB1AE0
	0x037BB15C LDR X1, [X21]
	0x037BB160 ADD X0, X31, 0x8
	0x037BB164 BL 0x2BC4968
	0x037BB168 CBZ X20, 0x37BB11C
	0x037BB16C MOV X0, X20
	0x037BB170 BL 0x1C16F18
	0x037BB174 MOV X20, X31
	0x037BB178 B 0x37BB180
	0x037BB17C MOV X19, X0
	0x037BB180 LDR X1, [X21]
	0x037BB184 ADD X0, X31, 0x8
	0x037BB188 BL 0x2BC4968
	0x037BB18C CBNZ X20, 0x37BB198
	0x037BB190 MOV X0, X19
	0x037BB194 BL 0x1D2C690
	0x037BB198 MOV X0, X20
	0x037BB19C BL 0x1C16F18
	0x037BB1A0 BL 0x1990590

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC27000
	007 Move X21, 0x98D000
	008 Move W8, [X22+454]
	009 Move X21, [X21+3008]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x98D000
	017 Move X0, [X0+3008]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+454], W8
	021 Move X2, [X21]
	022 Add X0, X20, 624
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onBeforeUpdate(System.Action value)

Disassembly:
	0x037C33C8 ADRP X0, 0x935000
	0x037C33CC LDR X0, [X0 + 0x528]
	0x037C33D0 BL 0x1C16D08
	0x037C33D4 BL 0x1C16F10
	0x037C33D8 MOV X19, X0
	0x037C33DC ADRP X0, 0x931000
	0x037C33E0 LDR X0, [X0 + 0x6E8]
	0x037C33E4 B 0x37C3404
	0x037C33E8 ADRP X0, 0x935000
	0x037C33EC LDR X0, [X0 + 0x528]
	0x037C33F0 BL 0x1C16D08
	0x037C33F4 BL 0x1C16F10
	0x037C33F8 MOV X19, X0
	0x037C33FC ADRP X0, 0x938000
	0x037C3400 LDR X0, [X0 + 0x588]
	0x037C3404 BL 0x1C16D08
	0x037C3408 MOV X1, X0
	0x037C340C MOV X0, X19
	0x037C3410 MOV X2, X31
	0x037C3414 BL 0x330E100
	0x037C3418 ADRP X0, 0x985000
	0x037C341C LDR X0, [X0 + 0x160]
	0x037C3420 BL 0x1C16D08
	0x037C3424 MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+455]
	009 Move X21, [X21+192]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+455], W8
	021 Move X0, X20
	022 Call InputManager.InstallBeforeUpdateHookIfNecessary, X0
	023 Move X2, [X21]
	024 Add X0, X20, 704
	025 Move X1, X19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Call 0x28F24E0, X0, X1
	032 Return 

Method: System.Void remove_onBeforeUpdate(System.Action value)

Disassembly:
	0x037C3524 BL 0x1C16F10
	0x037C3528 LDR X1, [X27]
	0x037C352C MOV X20, X0
	0x037C3530 BL 0x301B7C4
	0x037C3534 CBZ X20, 0x37C3620
	0x037C3538 LDR W10, [X20 + 0x1C]
	0x037C353C LDR X8, [X20 + 0x10]
	0x037C3540 LDR X9, [X28]
	0x037C3544 ADD W10, W10, 0x1
	0x037C3548 STR W10, [X20 + 0x1C]
	0x037C354C CBZ X8, 0x37C3620
	0x037C3550 LDRSW X10, [X20 + 0x18]
	0x037C3554 LDR W11, [X8 + 0x18]
	0x037C3558 CMP W10, W11
	0x037C355C B.CS 0x37C3574
	0x037C3560 ADD W9, W10, 0x1
	0x037C3564 ADD X8, X8, X10, 0x3, LSL
	0x037C3568 STR W9, [X20 + 0x18]
	0x037C356C STR X24, [X8 + 0x20]
	0x037C3570 B 0x37C358C
	0x037C3574 LDR X8, [X9 + 0x20]
	0x037C3578 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+456]
	009 Move X21, [X21+216]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+456], W8
	021 Move X2, [X21]
	022 Add X0, X20, 704
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onAfterUpdate(System.Action value)

Disassembly:
	0x037C357C MOV X1, X24
	0x037C3580 LDR X8, [X8 + 0xC0]
	0x037C3584 LDR X2, [X8 + 0x70]
	0x037C3588 BL 0x301BF90
	0x037C358C LDRSW X8, [X19 + 0x70]
	0x037C3590 ADD X25, X25, 0x1
	0x037C3594 CMP X25, X8
	0x037C3598 B.LT 0x37C34D8
	0x037C359C CBZ X20, 0x37C3604
	0x037C35A0 MOV X0, X31
	0x037C35A4 BL 0x381D9DC
	0x037C35A8 STRB W0, [X31 + 0x8]
	0x037C35AC LDR W8, [X20 + 0x18]
	0x037C35B0 CMP W8, 0x1
	0x037C35B4 B.LT 0x37C35F8
	0x037C35B8 ADRP X22, 0x985000
	0x037C35BC LDR X22, [X22 + 0x180]
	0x037C35C0 MOV W21, W31
	0x037C35C4 LDR X2, [X22]
	0x037C35C8 MOV X0, X20
	0x037C35CC MOV W1, W21
	0x037C35D0 BL 0x301BCCC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+457]
	009 Move X21, [X21+192]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+457], W8
	021 Move X2, [X21]
	022 Add X0, X20, 784
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_onAfterUpdate(System.Action value)

Disassembly:
	0x037C35D4 MOV X1, X0
	0x037C35D8 CBZ X1, 0x37C3628
	0x037C35DC LDP X2, X3, [X1 + 0x58]
	0x037C35E0 MOV X0, X19
	0x037C35E4 BL 0x37C385C
	0x037C35E8 LDR W8, [X20 + 0x18]
	0x037C35EC ADD W21, W21, 0x1
	0x037C35F0 CMP W21, W8
	0x037C35F4 B.LT 0x37C35C4
	0x037C35F8 ADD X0, X31, 0x8
	0x037C35FC MOV X1, X31
	0x037C3600 BL 0x381DA30
	0x037C3604 LDP X20, X19, [X31 + 0x50]
	0x037C3608 LDP X22, X21, [X31 + 0x40]
	0x037C360C LDP X24, X23, [X31 + 0x30]
	0x037C3610 LDP X26, X25, [X31 + 0x20]
	0x037C3614 LDP X28, X27, [X31 + 0x10]
	0x037C3618 LDR X30, [X31], #0x60
	0x037C361C RET
	0x037C3620 BL 0x1C16F20
	0x037C3624 BL 0x1C16F28
	0x037C3628 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+458]
	009 Move X21, [X21+216]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+458], W8
	021 Move X2, [X21]
	022 Add X0, X20, 784
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void add_onSettingsChange(System.Action value)

Disassembly:
	0x037C362C B 0x37C3634
	0x037C3630 B 0x37C3634
	0x037C3634 MOV X19, X0
	0x037C3638 CMP W1, 0x1
	0x037C363C B.NE 0x37C3668
	0x037C3640 MOV X0, X19
	0x037C3644 BL 0x3EB1AD0
	0x037C3648 LDR X20, [X0]
	0x037C364C BL 0x3EB1AE0
	0x037C3650 ADD X0, X31, 0x8
	0x037C3654 MOV X1, X31
	0x037C3658 BL 0x381DA30
	0x037C365C CBZ X20, 0x37C3604
	0x037C3660 MOV X0, X20
	0x037C3664 BL 0x1C16F18
	0x037C3668 MOV X20, X31
	0x037C366C B 0x37C3674
	0x037C3670 MOV X19, X0
	0x037C3674 ADD X0, X31, 0x8
	0x037C3678 MOV X1, X31
	0x037C367C BL 0x381DA30
	0x037C3680 CBNZ X20, 0x37C368C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+459]
	009 Move X21, [X21+192]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+459], W8
	021 Move X2, [X21]
	022 Add X0, X20, 864
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_onSettingsChange(System.Action value)

Disassembly:
	0x037C3684 MOV X0, X19
	0x037C3688 BL 0x1D2C690
	0x037C368C MOV X0, X20
	0x037C3690 BL 0x1C16F18
	0x037C3694 BL 0x1990590
	0x037C3698 SUB X31, X31, 0x40
	0x037C369C STP X30, X23, [X31 + 0x10]
	0x037C36A0 STP X22, X21, [X31 + 0x20]
	0x037C36A4 STP X20, X19, [X31 + 0x30]
	0x037C36A8 ADRP X23, 0xC1E000
	0x037C36AC LDRB W8, [X23 + 0x1D3]
	0x037C36B0 MOV X19, X3
	0x037C36B4 MOV X20, X2
	0x037C36B8 MOV X22, X1
	0x037C36BC MOV X21, X0
	0x037C36C0 TBNZ X8, 0x0, 0x37C36D8
	0x037C36C4 ADRP X0, 0x958000
	0x037C36C8 LDR X0, [X0 + 0xDB8]
	0x037C36CC BL 0x1C16CF4
	0x037C36D0 MOVZ W8, 0x1
	0x037C36D4 STRB W8, [X23 + 0x1D3]
	0x037C36D8 CBZ X22, 0x37C3764

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC1F000
	007 Move X21, 0x986000
	008 Move W8, [X22+460]
	009 Move X21, [X21+216]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x986000
	017 Move X0, [X0+216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+460], W8
	021 Move X2, [X21]
	022 Add X0, X20, 864
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Boolean get_isProcessingEvents()

Disassembly:
	0x037C36DC MOV X0, X22
	0x037C36E0 MOV X1, X31

ISIL:
	001 Move W0, [X0+1064]
	002 Return X0

Method: System.Boolean get_gameIsPlaying()

Disassembly:
	0x037C36E4 BL 0x3772094
	0x037C36E8 MOV X1, X20

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_gameHasFocus()

Disassembly:
	0x037C36EC MOV X2, X19
	0x037C36F0 MOV X3, X31
	0x037C36F4 BL 0x375FA38
	0x037C36F8 TBZ X0, 0x0, 0x37C3704
	0x037C36FC MOVZ W22, 0x1
	0x037C3700 B 0x37C374C
	0x037C3704 LDUR V0, [X22 + 0x58]
	0x037C3708 ADRP X23, 0x958000
	0x037C370C STR V0, [X31]
	0x037C3710 LDR X23, [X23 + 0xDB8]
	0x037C3714 LDR X0, [X21 + 0x30]
	0x037C3718 CBZ X0, 0x37C3764
	0x037C371C LDP X1, X2, [X31]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+946]
	003 Compare W8, 0
	004 JumpIfEqual {6}
	005 Move W0, 1
	006 Move X8, [X0+1152]
	007 Compare X8, 0
	008 JumpIfEqual {14}
	009 Move W8, [X8+48]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20

Method: System.Boolean get_gameShouldGetInputRegardlessOfFocus()

Disassembly:
	0x037C3720 LDR X4, [X23]
	0x037C3724 ADD X3, X31, 0x0
	0x037C3728 BL 0x2A590C0
	0x037C372C MOV W22, W0
	0x037C3730 TBZ X0, 0x0, 0x37C374C
	0x037C3734 LDP X0, X1, [X31]
	0x037C3738 MOV X2, X20
	0x037C373C MOV X3, X19
	0x037C3740 MOV X4, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+1152]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W8, [X8+48]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void RegisterControlLayout(System.String name, System.Type type)

Disassembly:
	0x037C3744 BL 0x37564A4
	0x037C3748 TBZ X0, 0x0, 0x37C3714
	0x037C374C AND W0, W22, 0x1
	0x037C3750 LDP X20, X19, [X31 + 0x30]
	0x037C3754 LDP X22, X21, [X31 + 0x20]
	0x037C3758 LDP X30, X23, [X31 + 0x10]
	0x037C375C ADD X31, X31, 0x40
	0x037C3760 RET
	0x037C3764 BL 0x1C16F20
	0x037C3768 SUB X31, X31, 0x40
	0x037C376C STP X30, X23, [X31 + 0x10]
	0x037C3770 STP X22, X21, [X31 + 0x20]
	0x037C3774 STP X20, X19, [X31 + 0x30]
	0x037C3778 ADRP X23, 0xC1E000
	0x037C377C LDRB W8, [X23 + 0x1D2]
	0x037C3780 MOV X19, X3
	0x037C3784 MOV X20, X2
	0x037C3788 MOV X22, X1
	0x037C378C MOV X21, X0
	0x037C3790 TBNZ X8, 0x0, 0x37C37B4
	0x037C3794 ADRP X0, 0x958000
	0x037C3798 LDR X0, [X0 + 0xD40]
	0x037C379C BL 0x1C16CF4
	0x037C37A0 ADRP X0, 0x958000
	0x037C37A4 LDR X0, [X0 + 0xD48]
	0x037C37A8 BL 0x1C16CF4
	0x037C37AC MOVZ W8, 0x1
	0x037C37B0 STRB W8, [X23 + 0x1D2]
	0x037C37B4 MOV X0, X21
	0x037C37B8 MOV X1, X22
	0x037C37BC MOV X2, X20
	0x037C37C0 MOV X3, X19
	0x037C37C4 BL 0x37C3698
	0x037C37C8 TBZ X0, 0x0, 0x37C37D4
	0x037C37CC MOVZ W0, 0x1
	0x037C37D0 B 0x37C3840
	0x037C37D4 CBZ X22, 0x37C3858
	0x037C37D8 MOV X0, X22
	0x037C37DC MOV X1, X31
	0x037C37E0 BL 0x37720C4
	0x037C37E4 UBFM X8, X1, 0x20, 0x3F
	0x037C37E8 CMP W8, 0x1
	0x037C37EC STP X0, X1, [X31]
	0x037C37F0 B.LT 0x37C383C
	0x037C37F4 ADRP X23, 0x958000
	0x037C37F8 LDR X23, [X23 + 0xD48]
	0x037C37FC MOV W22, W31
	0x037C3800 LDR X2, [X23]
	0x037C3804 ADD X0, X31, 0x0
	0x037C3808 MOV W1, W22
	0x037C380C BL 0x24FDB3C
	0x037C3810 MOV X1, X0
	0x037C3814 MOV X0, X21
	0x037C3818 MOV X2, X20
	0x037C381C MOV X3, X19
	0x037C3820 BL 0x37C3768
	0x037C3824 LDR W8, [X31 + 0xC]
	0x037C3828 ADD W22, W22, 0x1
	0x037C382C CMP W22, W8
	0x037C3830 B.GE 0x37C3840
	0x037C3834 TBZ X0, 0x0, 0x37C3800
	0x037C3838 B 0x37C3840
	0x037C383C MOV W0, W31
	0x037C3840 LDP X20, X19, [X31 + 0x30]
	0x037C3844 LDP X22, X21, [X31 + 0x20]
	0x037C3848 LDP X30, X23, [X31 + 0x10]
	0x037C384C AND W0, W0, 0x1
	0x037C3850 ADD X31, X31, 0x40
	0x037C3854 RET
	0x037C3858 BL 0x1C16F20
	0x037C385C SUB X31, X31, 0x70
	0x037C3860 STP X30, X23, [X31 + 0x40]
	0x037C3864 STP X22, X21, [X31 + 0x50]
	0x037C3868 STP X20, X19, [X31 + 0x60]
	0x037C386C ADRP X23, 0xC1E000
	0x037C3870 LDRB W8, [X23 + 0x1D7]
	0x037C3874 MOV X21, X3
	0x037C3878 MOV X22, X2
	0x037C387C MOV X20, X1
	0x037C3880 MOV X19, X0
	0x037C3884 TBNZ X8, 0x0, 0x37C389C
	0x037C3888 ADRP X0, 0x984000
	0x037C388C LDR X0, [X0 + 0xDB8]
	0x037C3890 BL 0x1C16CF4
	0x037C3894 MOVZ W8, 0x1
	0x037C3898 STRB W8, [X23 + 0x1D7]
	0x037C389C MOVZ W2, 0x1
	0x037C38A0 MOV X0, X19
	0x037C38A4 MOV X1, X20
	0x037C38A8 BL 0x37BC210
	0x037C38AC MOV X0, X22
	0x037C38B0 MOV X1, X21
	0x037C38B4 MOV X2, X31
	0x037C38B8 BL 0x37577E0
	0x037C38BC CBZ X20, 0x37C39A8
	0x037C38C0 MOV X21, X0
	0x037C38C4 LDP X0, X1, [X20 + 0x68]
	0x037C38C8 ADRP X22, 0x984000
	0x037C38CC LDR X22, [X22 + 0xDB8]
	0x037C38D0 MOV X2, X31
	0x037C38D4 BL 0x37577E0
	0x037C38D8 LDP V2, V0, [X20 + 0x100]
	0x037C38DC LDR X8, [X20 + 0x120]
	0x037C38E0 LDR V1, [X20 + 0xF]
	0x037C38E4 LDR X4, [X22]
	0x037C38E8 MOV X1, X0
	0x037C38EC ADD X2, X31, 0x0
	0x037C38F0 MOV X0, X21
	0x037C38F4 MOV W3, W31
	0x037C38F8 STR X8, [X31 + 0x30]
	0x037C38FC STP V2, V0, [X31 + 0x10]
	0x037C3900 STR V1, [X31]
	0x037C3904 BL 0x2203D94
	0x037C3908 CBZ X0, 0x37C39A8
	0x037C390C LDR W8, [X20 + 0xE0]
	0x037C3910 ADD X9, X20, 0xF0
	0x037C3914 MOV X21, X0
	0x037C3918 MOV X1, X31
	0x037C391C STR W8, [X0 + 0xE0]
	0x037C3920 LDR X8, [X9 + 0x30]
	0x037C3924 LDP V1, V0, [X9 + 0x10]
	0x037C3928 LDR V2, [X9]
	0x037C392C STR X8, [X0 + 0x120]
	0x037C3930 STP V1, V0, [X0 + 0x100]
	0x037C3934 STR V2, [X0 + 0xF]
	0x037C3938 MOV X0, X20
	0x037C393C BL 0x377AA1C
	0x037C3940 TBZ X0, 0x0, 0x37C3950
	0x037C3944 LDR W8, [X21 + 0xDC]
	0x037C3948 ORR W8, W8, 0x10
	0x037C394C STR W8, [X21 + 0xDC]
	0x037C3950 MOV X0, X20
	0x037C3954 MOV X1, X31
	0x037C3958 BL 0x377AA10
	0x037C395C TBZ X0, 0x0, 0x37C396C
	0x037C3960 LDR W8, [X21 + 0xDC]
	0x037C3964 ORR W8, W8, 0x8
	0x037C3968 STR W8, [X21 + 0xDC]
	0x037C396C MOV X0, X20
	0x037C3970 MOV X1, X31
	0x037C3974 BL 0x377A8A4
	0x037C3978 TBNZ X0, 0x0, 0x37C3988
	0x037C397C LDR W8, [X21 + 0xDC]
	0x037C3980 ORR W8, W8, 0x60
	0x037C3984 STR W8, [X21 + 0xDC]
	0x037C3988 MOV X0, X19
	0x037C398C MOV X1, X21
	0x037C3990 BL 0x37C45C8
	0x037C3994 LDP X20, X19, [X31 + 0x60]
	0x037C3998 LDP X22, X21, [X31 + 0x50]
	0x037C399C LDP X30, X23, [X31 + 0x40]
	0x037C39A0 ADD X31, X31, 0x70
	0x037C39A4 RET
	0x037C39A8 BL 0x1C16F20
	0x037C39AC SUB X31, X31, 0x110
	0x037C39B0 STP X29, X1, [X31 + 0xC0]
	0x037C39B4 STP X30, X25, [X31 + 0xD0]
	0x037C39B8 STP X24, X23, [X31 + 0xE0]
	0x037C39BC STP X22, X21, [X31 + 0xF0]
	0x037C39C0 STP X20, X19, [X31 + 0x100]
	0x037C39C4 ADRP X20, 0xC1E000
	0x037C39C8 LDRB W8, [X20 + 0x1D6]
	0x037C39CC MOV X19, X0
	0x037C39D0 TBNZ X8, 0x0, 0x37C39E8
	0x037C39D4 ADRP X0, 0x958000
	0x037C39D8 LDR X0, [X0 + 0xEC0]
	0x037C39DC BL 0x1C16CF4
	0x037C39E0 MOVZ W8, 0x1
	0x037C39E4 STRB W8, [X20 + 0x1D6]
	0x037C39E8 MOVI V0.2D, 0x0
	0x037C39EC STR X31, [X31 + 0xB0]
	0x037C39F0 STP V0, V0, [X31 + 0x90]
	0x037C39F4 STR V0, [X31 + 0x8]
	0x037C39F8 LDR W8, [X19 + 0x70]
	0x037C39FC CBZ W8, 0x37C3B3C
	0x037C3A00 MOV X0, X31
	0x037C3A04 BL 0x381D9DC
	0x037C3A08 STRB W0, [X31 + 0xB8]
	0x037C3A0C LDR W23, [X19 + 0x70]
	0x037C3A10 CMP W23, 0x1
	0x037C3A14 B.LT 0x37C3B30
	0x037C3A18 ADRP X25, 0x958000
	0x037C3A1C LDR X25, [X25 + 0xEC0]
	0x037C3A20 MOV W24, W31
	0x037C3A24 LDR X8, [X19 + 0x78]
	0x037C3A28 CBZ X8, 0x37C3B5C
	0x037C3A2C LDR W9, [X8 + 0x18]
	0x037C3A30 CMP W24, W9
	0x037C3A34 B.CS 0x37C3B58
	0x037C3A38 ADD X8, X8, W24, 0x3, SXTW
	0x037C3A3C LDR X20, [X8 + 0x20]
	0x037C3A40 CBZ X20, 0x37C3B60
	0x037C3A44 LDR X8, [X20 + 0x120]
	0x037C3A48 LDP V1, V0, [X20 + 0x100]
	0x037C3A4C LDR V2, [X20 + 0xF]
	0x037C3A50 STR X8, [X31 + 0xB0]
	0x037C3A54 STP V1, V0, [X31 + 0x90]
	0x037C3A58 STR V2, [X31 + 0x8]
	0x037C3A5C ADD X0, X31, 0x80
	0x037C3A60 MOV X1, X31
	0x037C3A64 BL 0x381DB2C
	0x037C3A68 TBNZ X0, 0x0, 0x37C3B24
	0x037C3A6C LDP V0, V1, [X31 + 0x80]
	0x037C3A70 LDR V2, [X31 + 0xA]
	0x037C3A74 LDR X8, [X31 + 0xB0]
	0x037C3A78 LDR X0, [X25]
	0x037C3A7C STP V0, V1, [X31 + 0x40]
	0x037C3A80 STR V2, [X31 + 0x6]
	0x037C3A84 STR X8, [X31 + 0x70]
	0x037C3A88 LDR W8, [X0 + 0xE0]
	0x037C3A8C CBNZ W8, 0x37C3A94
	0x037C3A90 BL 0x1C16DFC
	0x037C3A94 LDP V0, V1, [X31 + 0x40]
	0x037C3A98 LDR V2, [X31 + 0x6]
	0x037C3A9C LDR X8, [X31 + 0x70]
	0x037C3AA0 STP V0, V1, [X31]
	0x037C3AA4 STR V2, [X31 + 0x2]
	0x037C3AA8 STR X8, [X31 + 0x30]
	0x037C3AAC ADD X0, X31, 0xC8
	0x037C3AB0 ADD X1, X31, 0x0
	0x037C3AB4 MOV X2, X31
	0x037C3AB8 BL 0x375615C
	0x037C3ABC FCMP S0, 0x0
	0x037C3AC0 B.LE 0x37C3B24
	0x037C3AC4 LDR W2, [X20 + 0xE0]
	0x037C3AC8 ADD X1, X31, 0x80
	0x037C3ACC MOV X0, X19
	0x037C3AD0 BL 0x37C419C
	0x037C3AD4 LDP X2, X3, [X20 + 0x58]
	0x037C3AD8 MOV X21, X0
	0x037C3ADC MOV X22, X1
	0x037C3AE0 MOV X4, X31
	0x037C3AE4 BL 0x3757138
	0x037C3AE8 TBZ X0, 0x0, 0x37C3B24
	0x037C3AEC LDP V2, V0, [X31 + 0x90]
	0x037C3AF0 LDR X8, [X31 + 0xB0]
	0x037C3AF4 LDR V1, [X31 + 0x8]
	0x037C3AF8 ADD X9, X20, 0xF0
	0x037C3AFC STP V2, V0, [X9 + 0x10]
	0x037C3B00 STR X8, [X9 + 0x30]
	0x037C3B04 STR V1, [X9]
	0x037C3B08 MOV X0, X19
	0x037C3B0C MOV X1, X20
	0x037C3B10 MOV X2, X21
	0x037C3B14 MOV X3, X22
	0x037C3B18 BL 0x37C385C
	0x037C3B1C SUB W24, W24, 0x1
	0x037C3B20 SUB W23, W23, 0x1
	0x037C3B24 ADD W24, W24, 0x1
	0x037C3B28 CMP W24, W23
	0x037C3B2C B.LT 0x37C3A24
	0x037C3B30 ADD X0, X31, 0xB8
	0x037C3B34 MOV X1, X31
	0x037C3B38 BL 0x381DA30
	0x037C3B3C LDP X20, X19, [X31 + 0x100]
	0x037C3B40 LDP X22, X21, [X31 + 0xF0]
	0x037C3B44 LDP X24, X23, [X31 + 0xE0]
	0x037C3B48 LDP X30, X25, [X31 + 0xD0]
	0x037C3B4C LDR X29, [X31 + 0xC0]
	0x037C3B50 ADD X31, X31, 0x110
	0x037C3B54 RET
	0x037C3B58 BL 0x1C16F28
	0x037C3B5C BL 0x1C16F20
	0x037C3B60 BL 0x1C16F20
	0x037C3B64 B 0x37C3B84
	0x037C3B68 B 0x37C3B84
	0x037C3B6C B 0x37C3B84
	0x037C3B70 B 0x37C3B84
	0x037C3B74 B 0x37C3B84
	0x037C3B78 B 0x37C3B84
	0x037C3B7C B 0x37C3B84
	0x037C3B80 B 0x37C3B84
	0x037C3B84 MOV X19, X0
	0x037C3B88 CMP W1, 0x1
	0x037C3B8C B.NE 0x37C3BB8
	0x037C3B90 MOV X0, X19
	0x037C3B94 BL 0x3EB1AD0
	0x037C3B98 LDR X20, [X0]
	0x037C3B9C BL 0x3EB1AE0
	0x037C3BA0 ADD X0, X31, 0xB8
	0x037C3BA4 MOV X1, X31
	0x037C3BA8 BL 0x381DA30
	0x037C3BAC CBZ X20, 0x37C3B3C
	0x037C3BB0 MOV X0, X20
	0x037C3BB4 BL 0x1C16F18
	0x037C3BB8 MOV X20, X31
	0x037C3BBC B 0x37C3BC4
	0x037C3BC0 MOV X19, X0
	0x037C3BC4 ADD X0, X31, 0xB8
	0x037C3BC8 MOV X1, X31
	0x037C3BCC BL 0x381DA30
	0x037C3BD0 CBNZ X20, 0x37C3BDC
	0x037C3BD4 MOV X0, X19
	0x037C3BD8 BL 0x1D2C690
	0x037C3BDC MOV X0, X20
	0x037C3BE0 BL 0x1C16F18
	0x037C3BE4 BL 0x1990590
	0x037C3BE8 STP X29, X30, [X31 - 0x60]!
	0x037C3BEC STP X28, X27, [X31 + 0x10]
	0x037C3BF0 STP X26, X25, [X31 + 0x20]
	0x037C3BF4 STP X24, X23, [X31 + 0x30]
	0x037C3BF8 STP X22, X21, [X31 + 0x40]
	0x037C3BFC STP X20, X19, [X31 + 0x50]
	0x037C3C00 SUB X31, X31, 0x1D0
	0x037C3C04 ADRP X22, 0xC1E000
	0x037C3C08 LDRB W8, [X22 + 0x1D8]
	0x037C3C0C MOV X19, X3
	0x037C3C10 MOV X20, X2
	0x037C3C14 MOV X21, X0
	0x037C3C18 STR X1, [X31 + 0x1C8]
	0x037C3C1C TBNZ X8, 0x0, 0x37C3C40
	0x037C3C20 ADRP X0, 0x958000
	0x037C3C24 LDR X0, [X0 + 0xEC0]
	0x037C3C28 BL 0x1C16CF4
	0x037C3C2C ADRP X0, 0x985000
	0x037C3C30 LDR X0, [X0 + 0x190]
	0x037C3C34 BL 0x1C16CF4
	0x037C3C38 MOVZ W8, 0x1
	0x037C3C3C STRB W8, [X22 + 0x1D8]
	0x037C3C40 STR X31, [X31 + 0x1C0]
	0x037C3C44 LDR W8, [X21 + 0x88]
	0x037C3C48 CMP W8, 0x1
	0x037C3C4C B.LT 0x37C3F20
	0x037C3C50 ADRP X22, 0x958000
	0x037C3C54 ADRP X23, 0x985000
	0x037C3C58 ADRP X24, 0x95B000
	0x037C3C5C ADRP X25, 0x985000
	0x037C3C60 ADRP X26, 0x930000
	0x037C3C64 LDR X22, [X22 + 0xEC0]
	0x037C3C68 LDR X23, [X23 + 0x190]
	0x037C3C6C LDR X24, [X24 + 0x4F0]
	0x037C3C70 LDR X25, [X25 + 0x198]
	0x037C3C74 LDR X26, [X26 + 0xA28]
	0x037C3C78 MOV X29, X31
	0x037C3C7C MOV X28, X31
	0x037C3C80 LDR X8, [X21 + 0x90]
	0x037C3C84 CBZ X8, 0x37C3F40
	0x037C3C88 LDR W9, [X8 + 0x18]
	0x037C3C8C CMP X28, X9
	0x037C3C90 B.CS 0x37C3F44
	0x037C3C94 ADD X8, X8, X29
	0x037C3C98 LDRB W9, [X8 + 0x5D]
	0x037C3C9C CBNZ W9, 0x37C3E04
	0x037C3CA0 LDR W27, [X8 + 0x58]
	0x037C3CA4 MOV X0, X21
	0x037C3CA8 MOV W1, W27
	0x037C3CAC BL 0x37BC094
	0x037C3CB0 CBNZ X0, 0x37C3E04
	0x037C3CB4 LDR X8, [X21 + 0x90]
	0x037C3CB8 CBZ X8, 0x37C3F40
	0x037C3CBC LDR W9, [X8 + 0x18]
	0x037C3CC0 CMP X28, X9
	0x037C3CC4 B.CS 0x37C3F44
	0x037C3CC8 ADD X8, X8, X29
	0x037C3CCC LDP V2, V0, [X8 + 0x30]
	0x037C3CD0 LDR X9, [X8 + 0x50]
	0x037C3CD4 LDR V1, [X8 + 0x2]
	0x037C3CD8 LDR X0, [X22]
	0x037C3CDC STP V2, V0, [X31 + 0xD0]
	0x037C3CE0 STR X9, [X31 + 0xF0]
	0x037C3CE4 STR V1, [X31 + 0xC]
	0x037C3CE8 LDR W8, [X0 + 0xE0]
	0x037C3CEC CBNZ W8, 0x37C3CF4

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+192], X29
	003 Move [X31+200], X30
	004 Move [X31+208], X28
	005 Move [X31+216], X27
	006 Move [X31+224], X26
	007 Move [X31+232], X25
	008 Move [X31+240], X24
	009 Move [X31+248], X23
	010 Move [X31+256], X22
	011 Move [X31+264], X21
	012 Move [X31+272], X20
	013 Move [X31+280], X19
	014 Move X19, 0xC1F000
	015 Move W8, [X19+461]
	016 Move X21, X2
	017 Move X22, X1
	018 Move X24, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {58}
	023 Move X0, 0x984000
	024 Move X0, [X0+1680]
	025 Call 0x1C17CF4
	026 Move X0, 0x984000
	027 Move X0, [X0+1736]
	028 Call 0x1C17CF4
	029 Move X0, 0x984000
	030 Move X0, [X0+1688]
	031 Call 0x1C17CF4
	032 Move X0, 0x984000
	033 Move X0, [X0+1696]
	034 Call 0x1C17CF4
	035 Move X0, 0x984000
	036 Move X0, [X0+1704]
	037 Call 0x1C17CF4
	038 Move X0, 0x986000
	039 Move X0, [X0+224]
	040 Call 0x1C17CF4
	041 Move X0, 0x983000
	042 Move X0, [X0+1696]
	043 Call 0x1C17CF4
	044 Move X0, 0x986000
	045 Move X0, [X0+232]
	046 Call 0x1C17CF4
	047 Move X0, 0x984000
	048 Move X0, [X0+1712]
	049 Call 0x1C17CF4
	050 Move X0, 0x984000
	051 Move X0, [X0+1720]
	052 Call 0x1C17CF4
	053 Move X0, 0x931000
	054 Move X0, [X0+1728]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X19+461], W8
	058 NotImplemented "Instruction MOVI not yet implemented."
	059 Move X0, X22
	060 Move X1, X31
	061 Move [X31+176], X31
	062 Move [X31+184], X31
	063 Move [X31+144], V0
	064 Move [X31+152], V0
	065 Move [X31+8], V0
	066 Call String.IsNullOrEmpty, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {289}
	071 Move X27, 0x931000
	072 Move X27, [X27+1728]
	073 Move X0, [X27]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X21
	079 Move X1, X31
	080 Move X2, X31
	081 Call Type.op_Equality, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {296}
	086 Move X8, 0x986000
	087 Move X0, [X27]
	088 Move X8, [X8+232]
	089 Move W9, [X0+224]
	090 Move X20, [X8]
	091 Compare W9, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X31
	096 Call Type.GetTypeFromHandle, X0
	097 Compare X0, 0
	098 JumpIfEqual {288}
	099 Move X8, [X0]
	100 Move X28, 0x983000
	101 Move X1, X21
	102 Move X9, [X8+680]
	103 Move X2, [X8+688]
	104 Move X28, [X28+1696]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Move X8, [X28]
	107 Move W20, W0
	108 Move X1, X31
	109 Move X0, X8
	110 Call Type.GetTypeFromHandle, X0
	111 Compare X0, 0
	112 JumpIfEqual {288}
	113 Move X8, [X0]
	114 Move X1, X21
	115 Move X9, [X8+680]
	116 Move X2, [X8+688]
	117 NotImplemented "Instruction BLR not yet implemented."
	118 Or W8, W20, W0
	119 Move TEMP, X8
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {314}
	123 Add X0, X31, 176
	124 Move X1, X22
	125 Move X2, X31
	126 Call InternedString..ctor, X0, X1
	127 Move X1, [X31+176]
	128 Move X2, [X31+184]
	129 Add X23, X24, 24
	130 Move X0, X23
	131 Move X3, X31
	132 Call Collection.HasLayout, X0, X1
	133 Move X8, [X24+24]
	134 Compare X8, 0
	135 JumpIfEqual {288}
	136 Move [X31+20], W0
	137 Move [X31+24], X24
	138 Move X9, 0x984000
	139 Move X9, [X9+1736]
	140 Move X1, [X31+176]
	141 Move X2, [X31+184]
	142 Move X0, X8
	143 Move X3, X21
	144 Move X4, [X9]
	145 Call Dictionary`2<InternedString, Object>.set_Item, X0, X1, X2
	146 Compare X21, 0
	147 JumpIfEqual {288}
	148 Move X8, [X21]
	149 Move X22, 0x984000
	150 Move X22, [X22+1680]
	151 Move X19, 0x984000
	152 Move X9, [X8+2072]
	153 Move X1, [X8+2080]
	154 Move X29, 0x984000
	155 Move X19, [X19+1696]
	156 Move X29, [X29+1688]
	157 Move X0, X21
	158 NotImplemented "Instruction BLR not yet implemented."
	159 Move X21, X0
	160 Move X0, [X27]
	161 Move X24, [X28]
	162 Move W8, [X0+224]
	163 Compare W8, 0
	164 JumpIfNotEqual {166}
	165 Call 0x1C17DFC
	166 Move X0, X24
	167 Move X1, X31
	168 Call Type.GetTypeFromHandle, X0
	169 Move X1, X0
	170 Move X0, X21
	171 Move X2, X31
	172 Call Type.op_Inequality, X0, X1
	173 Move TEMP, X0
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfNotEqual {242}
	177 Move X0, [X23]
	178 Compare X0, 0
	179 JumpIfEqual {288}
	180 Move X1, [X22]
	181 Add X8, X31, 80
	182 Call Dictionary`2<InternedString, Object>.GetEnumerator, X0
	183 Move V0, [X31+80]
	184 Move V1, [X31+96]
	185 Move V2, [X31+7]
	186 Move [X31+128], V0
	187 Move [X31+136], V1
	188 Move [X31+10], V2
	189 Move X1, [X19]
	190 Add X0, X31, 128
	191 Call Enumerator<InternedString, Object>.MoveNext, X0
	192 Move TEMP, X0
	193 And TEMP, TEMP, 1
	194 Compare TEMP, 1
	195 JumpIfNotEqual {217}
	196 Move X0, [X27]
	197 Move X25, [X31+144]
	198 Move X24, [X31+152]
	199 Move X26, [X31+160]
	200 Move W8, [X0+224]
	201 Compare W8, 0
	202 JumpIfNotEqual {204}
	203 Call 0x1C17DFC
	204 Move X0, X26
	205 Move X1, X21
	206 Move X2, X31
	207 Call Type.op_Equality, X0, X1
	208 Move TEMP, X0
	209 And TEMP, TEMP, 1
	210 Compare TEMP, 1
	211 JumpIfNotEqual {189}
	212 Move X0, X25
	213 Move X1, X24
	214 Move X2, X31
	215 Call InternedString.op_Implicit, X0
	216 Move X24, X0
	217 Move X24, X31
	218 Move X1, [X29]
	219 Add X0, X31, 128
	220 Call Enumerator<InternedString, Object>.Dispose, X0
	221 Compare X21, 0
	222 JumpIfEqual {288}
	223 Move X8, [X21]
	224 Move X0, X21
	225 Move X9, [X8+2072]
	226 Move X1, [X8+2080]
	227 NotImplemented "Instruction BLR not yet implemented."
	228 Move X21, X0
	229 Compare X24, 0
	230 JumpIfEqual {160}
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Call 0x3EB2AD0
	233 Move X24, [X0]
	234 Call 0x3EB2AE0
	235 Move X1, [X29]
	236 Add X0, X31, 128
	237 Call Enumerator<InternedString, Object>.Dispose, X0
	238 Compare X24, 0
	239 JumpIfEqual {221}
	240 Move X0, X24
	241 Call 0x1C17F18
	242 Move X24, X31
	243 Move X21, [X31+176]
	244 Move X23, [X31+184]
	245 Add X0, X31, 64
	246 Move X1, X24
	247 Move X2, X31
	248 Move [X31+64], X31
	249 Move [X31+72], X31
	250 Call InternedString..ctor, X0, X1
	251 Move X8, 0x986000
	252 Move X1, [X31+64]
	253 Move X2, [X31+72]
	254 Move X8, [X8+224]
	255 NotImplemented "Instruction MOVI not yet implemented."
	256 Add X0, X31, 80
	257 Move [X31+80], V0
	258 Move [X31+88], V0
	259 Move X3, [X8]
	260 Call InlinedArray`1<InternedString>..ctor, X0, X1
	261 Move W8, [X31+20]
	262 Move V0, [X31+80]
	263 Move V1, [X31+96]
	264 Move X0, [X31+24]
	265 And W5, W20, 1
	266 And W4, W8, 1
	267 Add X3, X31, 32
	268 Move X1, X21
	269 Move X2, X23
	270 Move W6, W31
	271 Move [X31+32], V0
	272 Move [X31+40], V1
	273 Call InputManager.PerformLayoutPostRegistration, X0, X1, X2, X3, X4, X5
	274 Move X20, [X31+272]
	275 Move X19, [X31+280]
	276 Move X22, [X31+256]
	277 Move X21, [X31+264]
	278 Move X24, [X31+240]
	279 Move X23, [X31+248]
	280 Move X26, [X31+224]
	281 Move X25, [X31+232]
	282 Move X28, [X31+208]
	283 Move X27, [X31+216]
	284 Move X29, [X31+192]
	285 Move X30, [X31+200]
	286 Add X31, X31, 288
	287 Return 
	288 Call 0x1C17F20
	289 Move X0, 0x936000
	290 Move X0, [X0+1320]
	291 Call 0x1C17D08
	292 Call 0x1C17F10
	293 Move X19, X0
	294 Move X0, 0x939000
	295 Move X0, [X0+1416]
	296 Move X0, 0x936000
	297 Move X0, [X0+1320]
	298 Call 0x1C17D08
	299 Call 0x1C17F10
	300 Move X19, X0
	301 Move X0, 0x939000
	302 Move X0, [X0+1512]
	303 Call 0x1C17D08
	304 Move X1, X0
	305 Move X0, X19
	306 Move X2, X31
	307 Call ArgumentNullException..ctor, X0, X1
	308 Move X0, 0x986000
	309 Move X0, [X0+240]
	310 Call 0x1C17D08
	311 Move X1, X0
	312 Move X0, X19
	313 Call 0x1C17DEC
	314 Move X0, 0x931000
	315 Move X0, [X0+2760]
	316 Call 0x1C17D08
	317 Move W1, 5
	318 Call 0x1C17D6C
	319 Move X19, X0
	320 Call 0x19913C0
	321 Move X0, 0x986000
	322 Move X0, [X0+248]
	323 Call 0x1C17D08
	324 Move X2, X0
	325 Move X0, X19
	326 Move X1, X31
	327 Call 0x1994444
	328 Move X0, X21
	329 Call 0x19913C0
	330 Move X8, [X21]
	331 Move X0, X21
	332 Move X9, [X8+424]
	333 Move X1, [X8+432]
	334 NotImplemented "Instruction BLR not yet implemented."
	335 Move X20, X0
	336 Move X0, X19
	337 Call 0x19913C0
	338 Move W1, 1
	339 Move X0, X19
	340 Move X2, X20
	341 Call 0x1994444
	342 Move X0, X19
	343 Call 0x19913C0
	344 Move X0, 0x986000
	345 Move X0, [X0+256]
	346 Call 0x1C17D08
	347 Move X2, X0
	348 Move W1, 2
	349 Move X0, X19
	350 Call 0x1994444
	351 Move X0, X21
	352 Call 0x19913C0
	353 Move X8, [X21]
	354 Move X0, X21
	355 Move X9, [X8+2072]
	356 Move X1, [X8+2080]
	357 NotImplemented "Instruction BLR not yet implemented."
	358 Move X20, X0
	359 Call 0x19913C0
	360 Move X8, [X20]
	361 Move X0, X20
	362 Move X9, [X8+424]
	363 Move X1, [X8+432]
	364 NotImplemented "Instruction BLR not yet implemented."
	365 Move X20, X0
	366 Move X0, X19
	367 Call 0x19913C0
	368 Move W1, 3
	369 Move X0, X19
	370 Move X2, X20
	371 Call 0x1994444
	372 Move X0, X19
	373 Call 0x19913C0
	374 Move X0, 0x939000
	375 Move X0, [X0+2480]
	376 Call 0x1C17D08
	377 Move X2, X0
	378 Move W1, 4
	379 Move X0, X19
	380 Call 0x1994444
	381 Move X0, X19
	382 Move X1, X31
	383 Call String.Concat, X0
	384 Move X19, X0
	385 Move X0, 0x939000
	386 Move X0, [X0+1400]
	387 Call 0x1C17D08
	388 Call 0x1C17F10
	389 Move X20, X0
	390 Move X0, 0x939000
	391 Move X0, [X0+1512]
	392 Call 0x1C17D08
	393 Move X2, X0
	394 Move X0, X20
	395 Move X1, X19
	396 Move X3, X31
	397 Call ArgumentException..ctor, X0, X1, X2
	398 Move X0, 0x986000
	399 Move X0, [X0+240]
	400 Call 0x1C17D08
	401 Move X1, X0
	402 Move X0, X20
	403 Call 0x1C17DEC
	404 Move X19, X0
	405 Move X24, X31
	406 Move X19, X0
	407 Move X1, [X29]
	408 Add X0, X31, 128
	409 Call Enumerator<InternedString, Object>.Dispose, X0
	410 Compare X24, 0
	411 JumpIfNotEqual {414}
	412 Move X0, X19
	413 Call 0x1D2D690
	414 Move X0, X24
	415 Call 0x1C17F18
	416 Call 0x1991590

Method: System.Void RegisterControlLayout(System.String json, System.String name = null, System.Boolean isOverride = False)

Disassembly:
	0x037BD6F8 LDP X26, X25, [X31 + 0x10]
	0x037BD6FC MOV W1, W31
	0x037BD700 LDP X30, X27, [X31], #0x50
	0x037BD704 B 0x37BD724
	0x037BD708 LDP X20, X19, [X31 + 0x40]
	0x037BD70C LDP X22, X21, [X31 + 0x30]
	0x037BD710 LDP X24, X23, [X31 + 0x20]
	0x037BD714 LDP X26, X25, [X31 + 0x10]
	0x037BD718 LDP X30, X27, [X31], #0x50
	0x037BD71C RET
	0x037BD720 BL 0x1C16F20
	0x037BD724 STR X30, [X31 - 0x30]!
	0x037BD728 STP X22, X21, [X31 + 0x10]
	0x037BD72C STP X20, X19, [X31 + 0x20]
	0x037BD730 ADRP X21, 0xC24000
	0x037BD734 LDRB W8, [X21 + 0x181]
	0x037BD738 MOV W19, W1
	0x037BD73C MOV X20, X0
	0x037BD740 TBNZ X8, 0x0, 0x37BD770
	0x037BD744 ADRP X0, 0x98A000
	0x037BD748 LDR X0, [X0 + 0xE58]
	0x037BD74C BL 0x1C16CF4
	0x037BD750 ADRP X0, 0x98A000
	0x037BD754 LDR X0, [X0 + 0xE60]
	0x037BD758 BL 0x1C16CF4
	0x037BD75C ADRP X0, 0x98A000
	0x037BD760 LDR X0, [X0 + 0xE68]
	0x037BD764 BL 0x1C16CF4
	0x037BD768 MOVZ W8, 0x1
	0x037BD76C STRB W8, [X21 + 0x181]
	0x037BD770 MOV X21, X20
	0x037BD774 LDR X0, [X21 + 0x28]!
	0x037BD778 CBZ X0, 0x37BD7A4
	0x037BD77C ADRP X8, 0x98A000
	0x037BD780 LDR X8, [X8 + 0xE60]
	0x037BD784 MOV W1, W19
	0x037BD788 LDR X2, [X8]
	0x037BD78C BL 0x2175D8C
	0x037BD790 TBZ X0, 0x0, 0x37BD7A4
	0x037BD794 LDP X20, X19, [X31 + 0x20]
	0x037BD798 LDP X22, X21, [X31 + 0x10]
	0x037BD79C LDR X30, [X31], #0x30
	0x037BD7A0 RET
	0x037BD7A4 ADRP X8, 0x98A000
	0x037BD7A8 LDR X8, [X8 + 0xE58]
	0x037BD7AC ADRP X22, 0x98A000
	0x037BD7B0 MOV X0, X21
	0x037BD7B4 MOV W1, W19
	0x037BD7B8 LDR X2, [X8]
	0x037BD7BC LDR X22, [X22 + 0xE68]
	0x037BD7C0 BL 0x2172B6C
	0x037BD7C4 LDR X0, [X22]
	0x037BD7C8 BL 0x1C16F10
	0x037BD7CC MOV X1, X31
	0x037BD7D0 MOV X21, X0
	0x037BD7D4 BL 0x3C485BC
	0x037BD7D8 CBZ X21, 0x37BD7FC
	0x037BD7DC STR W19, [X21 + 0x10]
	0x037BD7E0 MOV X0, X20
	0x037BD7E4 MOV X2, X21
	0x037BD7E8 LDP X20, X19, [X31 + 0x20]
	0x037BD7EC LDP X22, X21, [X31 + 0x10]
	0x037BD7F0 MOV W1, W31
	0x037BD7F4 LDR X30, [X31], #0x30
	0x037BD7F8 B 0x37BD9A4
	0x037BD7FC BL 0x1C16F20
	0x037BD800 STR X30, [X31 - 0x40]!
	0x037BD804 STP X24, X23, [X31 + 0x10]
	0x037BD808 STP X22, X21, [X31 + 0x20]
	0x037BD80C STP X20, X19, [X31 + 0x30]
	0x037BD810 ADRP X20, 0xC24000
	0x037BD814 LDRB W8, [X20 + 0x180]
	0x037BD818 MOV X19, X1
	0x037BD81C MOV X21, X0
	0x037BD820 TBNZ X8, 0x0, 0x37BD850
	0x037BD824 ADRP X0, 0x98A000
	0x037BD828 LDR X0, [X0 + 0xE70]
	0x037BD82C BL 0x1C16CF4
	0x037BD830 ADRP X0, 0x98A000
	0x037BD834 LDR X0, [X0 + 0xCB0]
	0x037BD838 BL 0x1C16CF4
	0x037BD83C ADRP X0, 0x98A000
	0x037BD840 LDR X0, [X0 + 0xE78]
	0x037BD844 BL 0x1C16CF4
	0x037BD848 MOVZ W8, 0x1
	0x037BD84C STRB W8, [X20 + 0x180]
	0x037BD850 CBZ X19, 0x37BD950
	0x037BD854 ADRP X8, 0x98A000
	0x037BD858 LDR X8, [X8 + 0xE78]
	0x037BD85C LDR X0, [X8]
	0x037BD860 BL 0x1C16F10
	0x037BD864 MOV X1, X31
	0x037BD868 MOV X20, X0
	0x037BD86C BL 0x33BDD8C
	0x037BD870 CBZ X20, 0x37BD998
	0x037BD874 ADRP X8, 0x98A000
	0x037BD878 LDR X8, [X8 + 0xE70]
	0x037BD87C STP X21, X19, [X20 + 0x10]
	0x037BD880 ADD X0, X21, 0x20
	0x037BD884 MOV X1, X20
	0x037BD888 LDR X2, [X8]
	0x037BD88C BL 0x2172CE4
	0x037BD890 LDR X22, [X21 + 0x28]
	0x037BD894 CBZ X22, 0x37BD934
	0x037BD898 LDR X8, [X22 + 0x18]
	0x037BD89C CMP W8, 0x1
	0x037BD8A0 B.LT 0x37BD934
	0x037BD8A4 ADRP X24, 0x98A000
	0x037BD8A8 LDR X24, [X24 + 0xCB0]
	0x037BD8AC MOV X23, X31
	0x037BD8B0 AND X8, X8, 0x0
	0x037BD8B4 CMP X23, W8, UXTW
	0x037BD8B8 B.CS 0x37BD94C
	0x037BD8BC LDR X8, [X19]
	0x037BD8C0 ADD X9, X22, X23, 0x2, LSL
	0x037BD8C4 LDR W21, [X9 + 0x20]
	0x037BD8C8 LDR X1, [X24]
	0x037BD8CC LDRH W9, [X8 + 0x12E]
	0x037BD8D0 CBZ X9, 0x37BD8F4
	0x037BD8D4 LDR X10, [X8 + 0xB0]
	0x037BD8D8 ADD X10, X10, 0x8
	0x037BD8DC LDUR X11, [X10 - 0x8]
	0x037BD8E0 CMP X11, X1
	0x037BD8E4 B.EQ 0x37BD904
	0x037BD8E8 SUBS X9, X9, 0x1
	0x037BD8EC ADD X10, X10, 0x10
	0x037BD8F0 B.NE 0x37BD8DC
	0x037BD8F4 MOV X0, X19
	0x037BD8F8 MOV W2, W31
	0x037BD8FC BL 0x1C5C788
	0x037BD900 B 0x37BD910
	0x037BD904 LDRSW X9, [X10]
	0x037BD908 ADD X8, X8, X9, 0x4, LSL
	0x037BD90C ADD X0, X8, 0x138
	0x037BD910 LDP X8, X3, [X0]
	0x037BD914 MOV X0, X19
	0x037BD918 MOV X1, X21
	0x037BD91C MOV X2, X31
	0x037BD920 BLR X8
	0x037BD924 LDR W8, [X22 + 0x18]
	0x037BD928 ADD X23, X23, 0x1
	0x037BD92C CMP X23, W8, SXTW
	0x037BD930 B.LT 0x37BD8B4
	0x037BD934 MOV X0, X20
	0x037BD938 LDP X20, X19, [X31 + 0x30]
	0x037BD93C LDP X22, X21, [X31 + 0x20]
	0x037BD940 LDP X24, X23, [X31 + 0x10]
	0x037BD944 LDR X30, [X31], #0x40
	0x037BD948 RET
	0x037BD94C BL 0x1C16F28
	0x037BD950 ADRP X0, 0x93B000
	0x037BD954 LDR X0, [X0 + 0x528]
	0x037BD958 BL 0x1C16D08
	0x037BD95C BL 0x1C16F10
	0x037BD960 MOV X19, X0
	0x037BD964 ADRP X0, 0x98A000
	0x037BD968 LDR X0, [X0 + 0xC48]
	0x037BD96C BL 0x1C16D08
	0x037BD970 MOV X1, X0
	0x037BD974 MOV X0, X19
	0x037BD978 MOV X2, X31
	0x037BD97C BL 0x330E100
	0x037BD980 ADRP X0, 0x98A000
	0x037BD984 LDR X0, [X0 + 0xE80]
	0x037BD988 BL 0x1C16D08
	0x037BD98C MOV X1, X0
	0x037BD990 MOV X0, X19
	0x037BD994 BL 0x1C16DEC
	0x037BD998 BL 0x1C16F20
	0x037BD99C MOV X1, X31
	0x037BD9A0 B 0x33BDD8C
	0x037BD9A4 STR X30, [X31 - 0x40]!
	0x037BD9A8 STP X24, X23, [X31 + 0x10]
	0x037BD9AC STP X22, X21, [X31 + 0x20]
	0x037BD9B0 STP X20, X19, [X31 + 0x30]
	0x037BD9B4 ADRP X20, 0xC24000
	0x037BD9B8 LDRB W8, [X20 + 0x183]
	0x037BD9BC MOV X21, X2
	0x037BD9C0 MOV W22, W1
	0x037BD9C4 MOV X19, X0
	0x037BD9C8 TBNZ X8, 0x0, 0x37BD9E0
	0x037BD9CC ADRP X0, 0x98A000
	0x037BD9D0 LDR X0, [X0 + 0xCB0]
	0x037BD9D4 BL 0x1C16CF4
	0x037BD9D8 MOVZ W8, 0x1
	0x037BD9DC STRB W8, [X20 + 0x183]
	0x037BD9E0 LDR X8, [X19 + 0x20]
	0x037BD9E4 CBZ X8, 0x37BDA98
	0x037BD9E8 CBZ X21, 0x37BDA94
	0x037BD9EC LDR W20, [X21 + 0x10]
	0x037BD9F0 ADRP X24, 0x98A000
	0x037BD9F4 LDR X21, [X21 + 0x18]
	0x037BD9F8 LDR X24, [X24 + 0xCB0]
	0x037BD9FC MOV W23, W31
	0x037BDA00 BFM X20, X22, 0x20, 0x1F
	0x037BDA04 LDR W9, [X8 + 0x18]
	0x037BDA08 CMP W23, W9
	0x037BDA0C B.GE 0x37BDA98
	0x037BDA10 B.CS 0x37BDAAC
	0x037BDA14 ADD X8, X8, W23, 0x3, SXTW
	0x037BDA18 LDR X8, [X8 + 0x20]
	0x037BDA1C CBZ X8, 0x37BDA94
	0x037BDA20 LDR X22, [X8 + 0x18]
	0x037BDA24 CBZ X22, 0x37BDA94
	0x037BDA28 LDR X8, [X22]
	0x037BDA2C LDR X1, [X24]
	0x037BDA30 LDRH W9, [X8 + 0x12E]
	0x037BDA34 CBZ X9, 0x37BDA58
	0x037BDA38 LDR X10, [X8 + 0xB0]
	0x037BDA3C ADD X10, X10, 0x8
	0x037BDA40 LDUR X11, [X10 - 0x8]
	0x037BDA44 CMP X11, X1
	0x037BDA48 B.EQ 0x37BDA68
	0x037BDA4C SUBS X9, X9, 0x1
	0x037BDA50 ADD X10, X10, 0x10
	0x037BDA54 B.NE 0x37BDA40
	0x037BDA58 MOV X0, X22
	0x037BDA5C MOV W2, W31
	0x037BDA60 BL 0x1C5C788
	0x037BDA64 B 0x37BDA74
	0x037BDA68 LDRSW X9, [X10]
	0x037BDA6C ADD X8, X8, X9, 0x4, LSL
	0x037BDA70 ADD X0, X8, 0x138
	0x037BDA74 LDP X8, X3, [X0]
	0x037BDA78 MOV X0, X22
	0x037BDA7C MOV X1, X20
	0x037BDA80 MOV X2, X21
	0x037BDA84 BLR X8
	0x037BDA88 LDR X8, [X19 + 0x20]
	0x037BDA8C ADD W23, W23, 0x1
	0x037BDA90 CBNZ X8, 0x37BDA04
	0x037BDA94 BL 0x1C16F20
	0x037BDA98 LDP X20, X19, [X31 + 0x30]
	0x037BDA9C LDP X22, X21, [X31 + 0x20]
	0x037BDAA0 LDP X24, X23, [X31 + 0x10]
	0x037BDAA4 LDR X30, [X31], #0x40
	0x037BDAA8 RET
	0x037BDAAC BL 0x1C16F28
	0x037BDAB0 STP X30, X21, [X31 - 0x20]!
	0x037BDAB4 STP X20, X19, [X31 + 0x10]
	0x037BDAB8 ADRP X21, 0xC24000
	0x037BDABC LDRB W8, [X21 + 0x182]
	0x037BDAC0 MOV W19, W1
	0x037BDAC4 MOV X20, X0
	0x037BDAC8 TBNZ X8, 0x0, 0x37BDAF8
	0x037BDACC ADRP X0, 0x98A000
	0x037BDAD0 LDR X0, [X0 + 0xE60]
	0x037BDAD4 BL 0x1C16CF4
	0x037BDAD8 ADRP X0, 0x98A000
	0x037BDADC LDR X0, [X0 + 0xE88]
	0x037BDAE0 BL 0x1C16CF4
	0x037BDAE4 ADRP X0, 0x98A000
	0x037BDAE8 LDR X0, [X0 + 0xE68]
	0x037BDAEC BL 0x1C16CF4
	0x037BDAF0 MOVZ W8, 0x1
	0x037BDAF4 STRB W8, [X21 + 0x182]
	0x037BDAF8 MOV X21, X20
	0x037BDAFC LDR X0, [X21 + 0x28]!
	0x037BDB00 CBZ X0, 0x37BDB70
	0x037BDB04 ADRP X8, 0x98A000
	0x037BDB08 LDR X8, [X8 + 0xE60]
	0x037BDB0C MOV W1, W19
	0x037BDB10 LDR X2, [X8]
	0x037BDB14 BL 0x2175D8C
	0x037BDB18 TBZ X0, 0x0, 0x37BDB70
	0x037BDB1C ADRP X8, 0x98A000
	0x037BDB20 LDR X8, [X8 + 0xE88]
	0x037BDB24 MOV X0, X21
	0x037BDB28 MOV W1, W19
	0x037BDB2C LDR X2, [X8]
	0x037BDB30 BL 0x2176DBC
	0x037BDB34 ADRP X8, 0x98A000
	0x037BDB38 LDR X8, [X8 + 0xE68]
	0x037BDB3C LDR X0, [X8]
	0x037BDB40 BL 0x1C16F10
	0x037BDB44 MOV X1, X31
	0x037BDB48 MOV X21, X0
	0x037BDB4C BL 0x3C485BC
	0x037BDB50 CBZ X21, 0x37BDB7C
	0x037BDB54 STR W19, [X21 + 0x10]
	0x037BDB58 MOV X0, X20
	0x037BDB5C LDP X20, X19, [X31 + 0x10]
	0x037BDB60 MOVZ W1, 0x1
	0x037BDB64 MOV X2, X21
	0x037BDB68 LDP X30, X21, [X31], #0x20
	0x037BDB6C B 0x37BD9A4
	0x037BDB70 LDP X20, X19, [X31 + 0x10]
	0x037BDB74 LDP X30, X21, [X31], #0x20
	0x037BDB78 RET
	0x037BDB7C BL 0x1C16F20
	0x037BDB80 MOV X2, X1
	0x037BDB84 MOVZ W1, 0x3
	0x037BDB88 B 0x37BD9A4
	0x037BDB8C MOV X2, X1
	0x037BDB90 MOVZ W1, 0x2
	0x037BDB94 B 0x37BD9A4
	0x037BDB98 MOV X2, X1
	0x037BDB9C MOVZ W1, 0x4
	0x037BDBA0 B 0x37BD9A4
	0x037BDBA4 MOV X2, X1
	0x037BDBA8 MOVZ W1, 0x5
	0x037BDBAC B 0x37BD9A4
	0x037BDBB0 MOV X2, X1
	0x037BDBB4 MOVZ W1, 0x7
	0x037BDBB8 B 0x37BD9A4
	0x037BDBBC MOV X2, X1
	0x037BDBC0 MOVZ W1, 0x8

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+144], X30
	003 Move [X31+160], X28
	004 Move [X31+168], X27
	005 Move [X31+176], X26
	006 Move [X31+184], X25
	007 Move [X31+192], X24
	008 Move [X31+200], X23
	009 Move [X31+208], X22
	010 Move [X31+216], X21
	011 Move [X31+224], X20
	012 Move [X31+232], X19
	013 Move X23, 0xC25000
	014 Move W8, [X23+462]
	015 Move W20, W3
	016 Move X22, X2
	017 Move X21, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {52}
	023 Move X0, 0x98B000
	024 Move X0, [X0+3048]
	025 Call 0x1C17CF4
	026 Move X0, 0x98B000
	027 Move X0, [X0+3416]
	028 Call 0x1C17CF4
	029 Move X0, 0x98B000
	030 Move X0, [X0+3424]
	031 Call 0x1C17CF4
	032 Move X0, 0x98B000
	033 Move X0, [X0+3432]
	034 Call 0x1C17CF4
	035 Move X0, 0x98B000
	036 Move X0, [X0+3440]
	037 Call 0x1C17CF4
	038 Move X0, 0x98B000
	039 Move X0, [X0+3448]
	040 Call 0x1C17CF4
	041 Move X0, 0x98B000
	042 Move X0, [X0+3456]
	043 Call 0x1C17CF4
	044 Move X0, 0x95F000
	045 Move X0, [X0+3520]
	046 Call 0x1C17CF4
	047 Move X0, 0x95F000
	048 Move X0, [X0+3776]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X23+462], W8
	052 NotImplemented "Instruction MOVI not yet implemented."
	053 Move X0, X21
	054 Move X1, X31
	055 Move [X31+128], X31
	056 Move [X31+136], X31
	057 Move [X31+152], X31
	058 Move [X31+80], X31
	059 Move [X31+88], X31
	060 Move [X31+96], V0
	061 Move [X31+104], V0
	062 Move [X31+72], X31
	063 Call String.IsNullOrEmpty, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {251}
	068 Move X8, 0x95F000
	069 Move X8, [X8+3520]
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Add X1, X31, 128
	076 Add X2, X31, 96
	077 Add X3, X31, 152
	078 Move X0, X21
	079 Move X4, X31
	080 Call InputControlLayout.ParseHeaderFieldsFromJson, X0, X1, X2, X3
	081 Add X0, X31, 80
	082 Move X1, X22
	083 Move X2, X31
	084 Call InternedString..ctor, X0, X1
	085 Add X0, X31, 80
	086 Move X1, X31
	087 Call InternedString.IsEmpty, X0
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {101}
	092 Move V0, [X31+8]
	093 Add X0, X31, 80
	094 Move X1, X31
	095 Move [X31+5], V0
	096 Call InternedString.IsEmpty, X0
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {263}
	101 Move TEMP, X20
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {108}
	105 Move W8, [X31+96]
	106 Compare W8, 0
	107 JumpIfEqual {286}
	108 Move X1, [X31+80]
	109 Move X2, [X31+88]
	110 Add X0, X19, 24
	111 Move X3, X31
	112 Call Collection.HasLayout, X0, X1
	113 Move W22, W0
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {135}
	118 Move TEMP, X20
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {135}
	122 Move X0, [X19+64]
	123 Compare X0, 0
	124 JumpIfEqual {250}
	125 Move X8, 0x98B000
	126 Move X1, [X31+80]
	127 Move X2, [X31+88]
	128 Move X8, [X8+3448]
	129 Move X3, [X8]
	130 Call HashSet`1<InternedString>.Contains, X0, X1
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {314}
	135 Move X0, [X19+32]
	136 Compare X0, 0
	137 JumpIfEqual {250}
	138 Move X8, 0x98B000
	139 Move X8, [X8+3424]
	140 Move X1, [X31+80]
	141 Move X2, [X31+88]
	142 Move X3, X21
	143 Move X4, [X8]
	144 Call Dictionary`2<InternedString, Object>.set_Item, X0, X1, X2
	145 Move TEMP, X20
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {203}
	149 Move X0, [X19+64]
	150 Compare X0, 0
	151 JumpIfEqual {250}
	152 Move X8, 0x98B000
	153 Move X1, [X31+80]
	154 Move X2, [X31+88]
	155 Move X8, [X8+3440]
	156 Move X3, [X8]
	157 Call HashSet`1<InternedString>.Add, X0, X1
	158 Move W8, [X31+96]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X25, 0x98B000
	161 Move X26, 0x98B000
	162 Move X27, 0x98B000
	163 Move X28, 0x98B000
	164 Move X25, [X25+3456]
	165 Move X26, [X26+3416]
	166 Move X27, [X27+3432]
	167 Move X28, [X28+3048]
	168 Move W21, W31
	169 Move X2, [X25]
	170 Add X0, X31, 96
	171 Move W1, W21
	172 Call InlinedArray`1<InternedString>.get_Item, X0, X1
	173 Move X23, X0
	174 Move X0, [X19+56]
	175 Compare X0, 0
	176 JumpIfEqual {250}
	177 Move X4, [X26]
	178 Move X24, X1
	179 Add X3, X31, 72
	180 Move X1, X23
	181 Move X2, X24
	182 Call Dictionary`2<InternedString, Object>.TryGetValue, X0, X1, X2
	183 Move TEMP, X22
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfEqual {192}
	187 Move X1, [X31+80]
	188 Move X2, [X31+88]
	189 Move X3, [X28]
	190 Add X0, X31, 72
	191 Call ArrayHelpers.Append, X0, X1
	192 Move X0, [X19+56]
	193 Compare X0, 0
	194 JumpIfEqual {250}
	195 Move X3, [X31+72]
	196 Move X4, [X27]
	197 Move X1, X23
	198 Move X2, X24
	199 Call Dictionary`2<InternedString, Object>.set_Item, X0, X1, X2
	200 Move W8, [X31+96]
	201 Add W21, W21, 1
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move V0, [X31+96]
	204 Move V1, [X31+112]
	205 Move X1, [X31+80]
	206 Move X2, [X31+88]
	207 Move X21, 0x95F000
	208 Move X21, [X21+3776]
	209 And W4, W22, 1
	210 And W6, W20, 1
	211 Add X3, X31, 0
	212 Move X0, X19
	213 Move W5, W31
	214 Move [X31], V0
	215 Move [X31+8], V1
	216 Call InputManager.PerformLayoutPostRegistration, X0, X1, X2, X3, X4, X5
	217 Move X0, [X21]
	218 Move W8, [X0+224]
	219 Compare W8, 0
	220 JumpIfNotEqual {222}
	221 Call 0x1C17DFC
	222 Add X0, X31, 152
	223 Move X1, X31
	224 Call InputDeviceMatcher.get_empty, X0
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfEqual {237}
	229 Move X0, [X31+80]
	230 Move X1, [X31+88]
	231 Move X2, X31
	232 Call InternedString.op_Implicit, X0
	233 Move X2, [X31+152]
	234 Move X1, X0
	235 Move X0, X19
	236 Call InputManager.RegisterControlLayoutMatcher, X0, X1, X2
	237 Move X20, [X31+224]
	238 Move X19, [X31+232]
	239 Move X22, [X31+208]
	240 Move X21, [X31+216]
	241 Move X24, [X31+192]
	242 Move X23, [X31+200]
	243 Move X26, [X31+176]
	244 Move X25, [X31+184]
	245 Move X28, [X31+160]
	246 Move X27, [X31+168]
	247 Move X30, [X31+144]
	248 Add X31, X31, 240
	249 Return 
	250 Call 0x1C17F20
	251 Move X0, 0x93C000
	252 Move X0, [X0+1320]
	253 Call 0x1C17D08
	254 Call 0x1C17F10
	255 Move X19, X0
	256 Move X0, 0x989000
	257 Move X0, [X0+216]
	258 Call 0x1C17D08
	259 Move X1, X0
	260 Move X0, X19
	261 Move X2, X31
	262 Call ArgumentNullException..ctor, X0, X1
	263 Move X0, 0x93F000
	264 Move X0, [X0+1400]
	265 Call 0x1C17D08
	266 Call 0x1C17F10
	267 Move X19, X0
	268 Move X0, 0x98B000
	269 Move X0, [X0+3464]
	270 Call 0x1C17D08
	271 Move X20, X0
	272 Move X0, 0x93F000
	273 Move X0, [X0+1416]
	274 Call 0x1C17D08
	275 Move X2, X0
	276 Move X0, X19
	277 Move X1, X20
	278 Move X3, X31
	279 Call ArgumentException..ctor, X0, X1, X2
	280 Move X0, 0x98B000
	281 Move X0, [X0+3472]
	282 Call 0x1C17D08
	283 Move X1, X0
	284 Move X0, X19
	285 Call 0x1C17DEC
	286 Move V0, [X31+5]
	287 Move X0, 0x962000
	288 Move [X31+3], V0
	289 Move X0, [X0+1296]
	290 Call 0x1C17D08
	291 Add X1, X31, 48
	292 Call 0x1C17E04
	293 Move X19, X0
	294 Move X0, 0x98B000
	295 Move X0, [X0+3480]
	296 Call 0x1C17D08
	297 Move X1, X19
	298 Move X2, X31
	299 Call String.Format, X0, X1
	300 Move X19, X0
	301 Move X0, 0x93F000
	302 Move X0, [X0+1400]
	303 Call 0x1C17D08
	304 Call 0x1C17F10
	305 Move X20, X0
	306 Move X0, 0x989000
	307 Move X0, [X0+216]
	308 Call 0x1C17D08
	309 Move X2, X0
	310 Move X0, X20
	311 Move X1, X19
	312 Move X3, X31
	313 Call ArgumentException..ctor, X0, X1, X2
	314 Move V0, [X31+5]
	315 Move X19, 0x962000
	316 Move [X31+3], V0
	317 Move X19, [X19+1296]
	318 Move X0, X19
	319 Call 0x1C17D08
	320 Add X1, X31, 48
	321 Call 0x1C17E04
	322 Move X20, X0
	323 Move X0, 0x98B000
	324 Move X0, [X0+3488]
	325 Call 0x1C17D08
	326 Move X1, X20
	327 Move X2, X31
	328 Call String.Format, X0, X1
	329 Move V0, [X31+5]
	330 Move X20, X0
	331 Move X0, X19
	332 Move [X31+2], V0
	333 Call 0x1C17D08
	334 Add X1, X31, 32
	335 Call 0x1C17E04
	336 Move X19, X0
	337 Move X0, 0x98B000
	338 Move X0, [X0+3496]
	339 Call 0x1C17D08
	340 Move X1, X19
	341 Move X2, X31
	342 Call String.Format, X0, X1
	343 Move X19, X0
	344 Move X0, 0x98B000
	345 Move X0, [X0+3504]
	346 Call 0x1C17D08
	347 Move X2, X0
	348 Move X0, X20
	349 Move X1, X19
	350 Move X3, X31
	351 Call String.Concat, X0, X1, X2
	352 Move X19, X0
	353 Move X0, 0x93F000
	354 Move X0, [X0+1400]
	355 Call 0x1C17D08
	356 Call 0x1C17F10
	357 Move X1, X19
	358 Move X2, X31
	359 Move X20, X0
	360 Call ArgumentException..ctor, X0, X1
	361 Move X0, 0x98B000
	362 Move X0, [X0+3472]
	363 Call 0x1C17D08
	364 Move X1, X0
	365 Move X0, X20
	366 Call 0x1C17DEC

Method: System.Void RegisterControlLayoutBuilder(System.Func`1<UnityEngine.InputSystem.Layouts.InputControlLayout> method, System.String name, System.String baseLayout = null)

Disassembly:
	0x037C42A8 MOV X3, X31
	0x037C42AC BL 0x3818CE8
	0x037C42B0 ADRP X23, 0x92F000
	0x037C42B4 LDR X23, [X23 + 0x6C0]
	0x037C42B8 MOV X21, X0
	0x037C42BC LDR X8, [X23]
	0x037C42C0 LDR W9, [X8 + 0xE0]
	0x037C42C4 CBNZ W9, 0x37C42D0
	0x037C42C8 MOV X0, X8
	0x037C42CC BL 0x1C16DFC
	0x037C42D0 MOV X0, X21
	0x037C42D4 MOV X1, X31
	0x037C42D8 MOV X2, X31
	0x037C42DC BL 0x3395F0C
	0x037C42E0 TBZ X0, 0x0, 0x37C4338
	0x037C42E4 ADRP X8, 0x984000
	0x037C42E8 LDR X0, [X23]
	0x037C42EC LDR X8, [X8 + 0xE8]
	0x037C42F0 LDR W9, [X0 + 0xE0]
	0x037C42F4 LDR X23, [X8]
	0x037C42F8 CBNZ W9, 0x37C4300
	0x037C42FC BL 0x1C16DFC
	0x037C4300 MOV X0, X23
	0x037C4304 MOV X1, X31
	0x037C4308 BL 0x338C698
	0x037C430C CBZ X0, 0x37C458C
	0x037C4310 LDR X8, [X0]
	0x037C4314 MOV X1, X21
	0x037C4318 LDR X9, [X8 + 0x2A8]
	0x037C431C LDR X2, [X8 + 0x2B0]
	0x037C4320 BLR X9
	0x037C4324 TBZ X0, 0x0, 0x37C4338
	0x037C4328 LDR X1, [X19 + 0x8]
	0x037C432C ADD X0, X31, 0x70
	0x037C4330 MOV X2, X31
	0x037C4334 BL 0x3757420
	0x037C4338 ADRP X27, 0x984000
	0x037C433C LDR X27, [X27 + 0x1C8]
	0x037C4340 ADD X21, X20, 0x180
	0x037C4344 MOV X0, X21
	0x037C4348 LDR X1, [X27]
	0x037C434C BL 0x28F140C
	0x037C4350 CMP W0, 0x1
	0x037C4354 B.LT 0x37C4568
	0x037C4358 ADRP X24, 0x984000
	0x037C435C LDR X8, [X20 + 0x430]
	0x037C4360 LDR X24, [X24 + 0x1B0]
	0x037C4364 CBNZ X8, 0x37C4398
	0x037C4368 ADRP X8, 0x984000
	0x037C436C LDR X8, [X8 + 0x1D0]
	0x037C4370 LDR X0, [X8]
	0x037C4374 BL 0x1C16F10
	0x037C4378 ADRP X8, 0x984000
	0x037C437C LDR X8, [X8 + 0x1D8]
	0x037C4380 MOV X1, X20
	0x037C4384 MOV X3, X31
	0x037C4388 MOV X23, X0
	0x037C438C LDR X2, [X8]
	0x037C4390 BL 0x37FEA10
	0x037C4394 STR X23, [X20 + 0x430]
	0x037C4398 STR W22, [X20 + 0x438]
	0x037C439C LDR X1, [X24]
	0x037C43A0 MOV X0, X21
	0x037C43A4 BL 0x28F17BC
	0x037C43A8 LDR X1, [X27]
	0x037C43AC MOV X0, X21
	0x037C43B0 BL 0x28F140C
	0x037C43B4 CMP W0, 0x1
	0x037C43B8 B.LT 0x37C4554
	0x037C43BC ADRP X29, 0x984000
	0x037C43C0 ADRP X23, 0x92F000
	0x037C43C4 ADRP X24, 0x984000
	0x037C43C8 ADRP X25, 0x92F000
	0x037C43CC LDR X29, [X29 + 0x1C0]
	0x037C43D0 LDR X23, [X23 + 0x7D0]
	0x037C43D4 LDR X24, [X24 + 0x1E0]
	0x037C43D8 LDR X25, [X25 + 0xA28]
	0x037C43DC MOV W28, W31
	0x037C43E0 MOV W22, W31
	0x037C43E4 LDR X2, [X29]
	0x037C43E8 MOV X0, X21
	0x037C43EC MOV W1, W22
	0x037C43F0 BL 0x28F1414
	0x037C43F4 MOV X26, X0
	0x037C43F8 LDP X0, X1, [X31 + 0x70]
	0x037C43FC MOV X2, X31
	0x037C4400 BL 0x37577E0
	0x037C4404 CBZ X26, 0x37C4474
	0x037C4408 MOV X2, X0
	0x037C440C LDR X0, [X26 + 0x40]
	0x037C4410 LDR X3, [X20 + 0x430]
	0x037C4414 LDR X8, [X26 + 0x18]
	0x037C4418 LDR X4, [X26 + 0x28]
	0x037C441C MOV X1, X19
	0x037C4420 BLR X8
	0x037C4424 MOV X26, X0
	0x037C4428 MOV X1, X31
	0x037C442C BL 0x32277A8
	0x037C4430 ORR W8, W28, W0, 0x0

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X23, 0xC1E000
	009 Move W8, [X23+463]
	010 Move X21, X3
	011 Move X22, X2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x985000
	019 Move X0, [X0+344]
	020 Call 0x1C17CF4
	021 Move X0, 0x985000
	022 Move X0, [X0+224]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+463], W8
	026 Move [X31+80], X31
	027 Move [X31+88], X31
	028 Move [X31+64], X31
	029 Move [X31+72], X31
	030 Compare X20, 0
	031 JumpIfEqual {96}
	032 Move X0, X22
	033 Move X1, X31
	034 Call String.IsNullOrEmpty, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {103}
	039 Add X0, X31, 80
	040 Move X1, X22
	041 Move X2, X31
	042 Call InternedString..ctor, X0, X1
	043 Add X0, X31, 64
	044 Move X1, X21
	045 Move X2, X31
	046 Call InternedString..ctor, X0, X1
	047 Move X1, [X31+80]
	048 Move X2, [X31+88]
	049 Add X0, X19, 24
	050 Move X3, X31
	051 Call Collection.HasLayout, X0, X1
	052 Move X8, [X19+40]
	053 Compare X8, 0
	054 JumpIfEqual {121}
	055 Move X9, 0x985000
	056 Move X9, [X9+344]
	057 Move X1, [X31+80]
	058 Move X2, [X31+88]
	059 Move X23, 0x985000
	060 Move W21, W0
	061 Move X4, [X9]
	062 Move X23, [X23+224]
	063 Move X0, X8
	064 Move X3, X20
	065 Call Dictionary`2<InternedString, Object>.set_Item, X0, X1, X2
	066 Move X1, [X31+64]
	067 Move X2, [X31+72]
	068 Move X3, [X23]
	069 Move X20, [X31+80]
	070 Move X22, [X31+88]
	071 NotImplemented "Instruction MOVI not yet implemented."
	072 Add X0, X31, 32
	073 Move [X31+32], V0
	074 Move [X31+40], V0
	075 Call InlinedArray`1<InternedString>..ctor, X0, X1
	076 Move V0, [X31+32]
	077 Move V1, [X31+48]
	078 And W4, W21, 1
	079 Add X3, X31, 0
	080 Move X0, X19
	081 Move X1, X20
	082 Move X2, X22
	083 Move W5, W31
	084 Move W6, W31
	085 Move [X31], V0
	086 Move [X31+8], V1
	087 Call InputManager.PerformLayoutPostRegistration, X0, X1, X2, X3, X4, X5
	088 Move X20, [X31+128]
	089 Move X19, [X31+136]
	090 Move X22, [X31+112]
	091 Move X21, [X31+120]
	092 Move X30, [X31+96]
	093 Move X23, [X31+104]
	094 Add X31, X31, 144
	095 Return 
	096 Move X0, 0x935000
	097 Move X0, [X0+1320]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0x931000
	102 Move X0, [X0+1768]
	103 Move X0, 0x935000
	104 Move X0, [X0+1320]
	105 Call 0x1C17D08
	106 Call 0x1C17F10
	107 Move X19, X0
	108 Move X0, 0x938000
	109 Move X0, [X0+1416]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Move X2, X31
	114 Call ArgumentNullException..ctor, X0, X1
	115 Move X0, 0x985000
	116 Move X0, [X0+352]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Call 0x1C17DEC
	121 Call 0x1C17F20

Method: System.Void PerformLayoutPostRegistration(UnityEngine.InputSystem.Utilities.InternedString layoutName, UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.Utilities.InternedString> baseLayouts, System.Boolean isReplacement, System.Boolean isKnownToBeDeviceLayout = False, System.Boolean isOverride = False)

Disassembly:
	0x037C3CF0 BL 0x1C16DFC
	0x037C3CF4 LDP V0, V1, [X31 + 0xC0]
	0x037C3CF8 LDR V2, [X31 + 0xE]
	0x037C3CFC LDR X8, [X31 + 0xF0]
	0x037C3D00 ADD X0, X31, 0x1C8
	0x037C3D04 ADD X1, X31, 0x80
	0x037C3D08 MOV X2, X31
	0x037C3D0C STP V0, V1, [X31 + 0x80]
	0x037C3D10 STR V2, [X31 + 0xA]
	0x037C3D14 STR X8, [X31 + 0xB0]
	0x037C3D18 BL 0x375615C
	0x037C3D1C FCMP S0, 0x0
	0x037C3D20 B.LE 0x37C3E04
	0x037C3D24 LDR X8, [X21 + 0x90]
	0x037C3D28 CBZ X8, 0x37C3E1C
	0x037C3D2C LDR W9, [X8 + 0x18]
	0x037C3D30 CMP X28, X9
	0x037C3D34 B.CS 0x37C3E24
	0x037C3D38 ADD X8, X8, X29
	0x037C3D3C LDR X9, [X8 + 0x50]
	0x037C3D40 LDP V1, V0, [X8 + 0x30]
	0x037C3D44 LDR V2, [X8 + 0x2]
	0x037C3D48 STR X9, [X31 + 0xF0]
	0x037C3D4C STP V1, V0, [X31 + 0xD0]
	0x037C3D50 STR V2, [X31 + 0xC]
	0x037C3D54 LDRB W8, [X8 + 0x5C]
	0x037C3D58 CBZ W8, 0x37C3D80
	0x037C3D5C LDP V0, V1, [X31 + 0xC0]
	0x037C3D60 LDR V2, [X31 + 0xE]
	0x037C3D64 LDR X9, [X31 + 0xF0]
	0x037C3D68 ADD X8, X31, 0x180
	0x037C3D6C MOVZ W6, 0x10
	0x037C3D70 STP V0, V1, [X31 + 0x180]
	0x037C3D74 STR V2, [X31 + 0x1A]
	0x037C3D78 STR X9, [X31 + 0x1B0]
	0x037C3D7C B 0x37C3DA0
	0x037C3D80 LDP V0, V1, [X31 + 0xC0]
	0x037C3D84 LDR V2, [X31 + 0xE]
	0x037C3D88 LDR X9, [X31 + 0xF0]
	0x037C3D8C MOV W6, W31
	0x037C3D90 ADD X8, X31, 0x140
	0x037C3D94 STP V0, V1, [X31 + 0x140]
	0x037C3D98 STR V2, [X31 + 0x16]
	0x037C3D9C STR X9, [X31 + 0x170]
	0x037C3DA0 LDR X9, [X8 + 0x30]
	0x037C3DA4 LDP V1, V0, [X8 + 0x10]
	0x037C3DA8 LDR V2, [X8]
	0x037C3DAC STR X9, [X31 + 0x130]
	0x037C3DB0 STP V1, V0, [X31 + 0x110]
	0x037C3DB4 STR V2, [X31 + 0x10]
	0x037C3DB8 STP V2, V1, [X31 + 0x40]
	0x037C3DBC STR V0, [X31 + 0x6]
	0x037C3DC0 STR X9, [X31 + 0x70]
	0x037C3DC4 ADD X5, X31, 0x40
	0x037C3DC8 MOV X0, X21
	0x037C3DCC MOV X1, X20
	0x037C3DD0 MOV X2, X19
	0x037C3DD4 MOV W3, W27
	0x037C3DD8 MOV X4, X31
	0x037C3DDC STP X31, X31, [X31]
	0x037C3DE0 BL 0x37C4AFC
	0x037C3DE4 MOV X0, X31
	0x037C3DE8 BL 0x37FE71C
	0x037C3DEC STR X0, [X31 + 0x1C0]
	0x037C3DF0 LDR X0, [X21 + 0x440]
	0x037C3DF4 LDR X3, [X23]
	0x037C3DF8 ADD X2, X31, 0x1C0
	0x037C3DFC MOV W1, W27
	0x037C3E00 BL 0x2208E74
	0x037C3E04 LDRSW X8, [X21 + 0x88]
	0x037C3E08 ADD X28, X28, 0x1
	0x037C3E0C ADD X29, X29, 0x40
	0x037C3E10 CMP X28, X8
	0x037C3E14 B.LT 0x37C3C80
	0x037C3E18 B 0x37C3F20
	0x037C3E1C BL 0x1C16F20
	0x037C3E20 B 0x37C3F68
	0x037C3E24 BL 0x1C16F28
	0x037C3E28 B 0x37C3F48
	0x037C3E2C B 0x37C3E34
	0x037C3E30 B 0x37C3E34
	0x037C3E34 MOV X27, X0
	0x037C3E38 CMP W1, 0x1
	0x037C3E3C B.NE 0x37C3F74
	0x037C3E40 MOV X0, X27
	0x037C3E44 BL 0x3EB1AD0
	0x037C3E48 MOV X27, X0
	0x037C3E4C ADRP X0, 0x930000
	0x037C3E50 LDR X0, [X0 + 0x7D0]
	0x037C3E54 BL 0x1C16D08
	0x037C3E58 LDR X8, [X27]
	0x037C3E5C LDR X1, [X8]
	0x037C3E60 BL 0x1C17270
	0x037C3E64 TBZ X0, 0x0, 0x37C3F48
	0x037C3E68 LDR X8, [X27]
	0x037C3E6C STR X8, [X31 + 0x28]
	0x037C3E70 BL 0x3EB1AE0
	0x037C3E74 STP X20, X19, [X31 + 0x30]
	0x037C3E78 ADRP X0, 0x95B000
	0x037C3E7C LDR X0, [X0 + 0x510]
	0x037C3E80 BL 0x1C16D08
	0x037C3E84 ADD X1, X31, 0x30
	0x037C3E88 BL 0x1C16E04
	0x037C3E8C LDR X8, [X21 + 0x90]
	0x037C3E90 CBZ X8, 0x37C3F40
	0x037C3E94 LDR W9, [X8 + 0x18]
	0x037C3E98 CMP X28, X9
	0x037C3E9C B.CS 0x37C3F44
	0x037C3EA0 ADD X8, X8, X29
	0x037C3EA4 LDR X9, [X8 + 0x50]
	0x037C3EA8 LDP V1, V0, [X8 + 0x30]
	0x037C3EAC LDR V2, [X8 + 0x2]
	0x037C3EB0 MOV X27, X0
	0x037C3EB4 MOV X0, X24
	0x037C3EB8 STR X9, [X31 + 0xF0]
	0x037C3EBC STP V1, V0, [X31 + 0xD0]
	0x037C3EC0 STR V2, [X31 + 0xC]
	0x037C3EC4 BL 0x1C16D08
	0x037C3EC8 ADD X1, X31, 0xC0
	0x037C3ECC BL 0x1C16E04
	0x037C3ED0 STR X0, [X31 + 0x20]
	0x037C3ED4 MOV X0, X25
	0x037C3ED8 BL 0x1C16D08
	0x037C3EDC LDP X2, X3, [X31 + 0x20]
	0x037C3EE0 MOV X1, X27
	0x037C3EE4 MOV X4, X31
	0x037C3EE8 BL 0x3227C18
	0x037C3EEC MOV X27, X0
	0x037C3EF0 MOV X0, X26
	0x037C3EF4 BL 0x1C16D08
	0x037C3EF8 LDR W8, [X0 + 0xE0]
	0x037C3EFC CBNZ W8, 0x37C3F04
	0x037C3F00 BL 0x1C16DFC
	0x037C3F04 MOV X0, X27
	0x037C3F08 MOV X1, X31
	0x037C3F0C BL 0x3C0649C
	0x037C3F10 LDR X0, [X31 + 0x28]
	0x037C3F14 MOV X1, X31
	0x037C3F18 BL 0x3C02C84
	0x037C3F1C B 0x37C3E04
	0x037C3F20 ADD X31, X31, 0x1D0
	0x037C3F24 LDP X20, X19, [X31 + 0x50]
	0x037C3F28 LDP X22, X21, [X31 + 0x40]
	0x037C3F2C LDP X24, X23, [X31 + 0x30]
	0x037C3F30 LDP X26, X25, [X31 + 0x20]
	0x037C3F34 LDP X28, X27, [X31 + 0x10]
	0x037C3F38 LDP X29, X30, [X31], #0x60
	0x037C3F3C RET
	0x037C3F40 BL 0x1C16F20
	0x037C3F44 BL 0x1C16F28
	0x037C3F48 MOVZ W0, 0x8
	0x037C3F4C BL 0x3EB1AF0
	0x037C3F50 LDR X8, [X27]
	0x037C3F54 STR X8, [X0]
	0x037C3F58 ADRP X1, 0x6F1000
	0x037C3F5C ADD X1, X1, 0xE58
	0x037C3F60 MOV X2, X31
	0x037C3F64 BL 0x3EB1B00
	0x037C3F68 B 0x37C3F6C
	0x037C3F6C MOV X27, X0
	0x037C3F70 BL 0x3EB1AE0
	0x037C3F74 MOV X0, X27
	0x037C3F78 BL 0x1D2C690
	0x037C3F7C BL 0x1990590
	0x037C3F80 SUB X31, X31, 0x40
	0x037C3F84 STP X30, X2, [X31 + 0x10]
	0x037C3F88 STP X22, X21, [X31 + 0x20]
	0x037C3F8C STP X20, X19, [X31 + 0x30]
	0x037C3F90 ADRP X22, 0xC1E000
	0x037C3F94 ADRP X21, 0x930000
	0x037C3F98 LDRB W8, [X22 + 0x1D5]
	0x037C3F9C LDR X21, [X21 + 0x6C0]
	0x037C3FA0 MOV X20, X1
	0x037C3FA4 MOV X19, X0
	0x037C3FA8 TBNZ X8, 0x0, 0x37C3FCC
	0x037C3FAC ADRP X0, 0x958000
	0x037C3FB0 LDR X0, [X0 + 0xEC0]
	0x037C3FB4 BL 0x1C16CF4
	0x037C3FB8 ADRP X0, 0x930000
	0x037C3FBC LDR X0, [X0 + 0x6C0]
	0x037C3FC0 BL 0x1C16CF4
	0x037C3FC4 MOVZ W8, 0x1
	0x037C3FC8 STRB W8, [X22 + 0x1D5]
	0x037C3FCC LDR X0, [X21]
	0x037C3FD0 STP X31, X31, [X31]
	0x037C3FD4 LDR W8, [X0 + 0xE0]
	0x037C3FD8 CBNZ W8, 0x37C3FE0
	0x037C3FDC BL 0x1C16DFC
	0x037C3FE0 MOV X0, X20
	0x037C3FE4 MOV X1, X31
	0x037C3FE8 MOV X2, X31
	0x037C3FEC BL 0x3395194
	0x037C3FF0 TBNZ X0, 0x0, 0x37C4070
	0x037C3FF4 ADRP X8, 0x958000
	0x037C3FF8 LDR X8, [X8 + 0xEC0]
	0x037C3FFC LDR X0, [X8]
	0x037C4000 LDR W8, [X0 + 0xE0]
	0x037C4004 CBNZ W8, 0x37C400C
	0x037C4008 BL 0x1C16DFC
	0x037C400C ADD X0, X31, 0x18
	0x037C4010 MOV X1, X31
	0x037C4014 BL 0x3755C40
	0x037C4018 TBNZ X0, 0x0, 0x37C40A4
	0x037C401C ADD X0, X19, 0x18
	0x037C4020 MOV X1, X20
	0x037C4024 MOV X2, X31
	0x037C4028 BL 0x3813D04
	0x037C402C STP X0, X1, [X31]
	0x037C4030 ADD X0, X31, 0x0
	0x037C4034 MOV X1, X31
	0x037C4038 BL 0x375F7A0
	0x037C403C TBNZ X0, 0x0, 0x37C4100
	0x037C4040 LDP X0, X1, [X31]
	0x037C4044 MOV X2, X31
	0x037C4048 BL 0x37577E0
	0x037C404C LDR X2, [X31 + 0x18]
	0x037C4050 MOV X1, X0
	0x037C4054 MOV X0, X19
	0x037C4058 BL 0x37C3154
	0x037C405C LDP X20, X19, [X31 + 0x30]
	0x037C4060 LDP X22, X21, [X31 + 0x20]
	0x037C4064 LDR X30, [X31 + 0x10]
	0x037C4068 ADD X31, X31, 0x40
	0x037C406C RET
	0x037C4070 ADRP X0, 0x934000
	0x037C4074 LDR X0, [X0 + 0x528]
	0x037C4078 BL 0x1C16D08
	0x037C407C BL 0x1C16F10
	0x037C4080 MOV X19, X0
	0x037C4084 ADRP X0, 0x937000
	0x037C4088 LDR X0, [X0 + 0x5E8]
	0x037C408C BL 0x1C16D08
	0x037C4090 MOV X1, X0
	0x037C4094 MOV X0, X19
	0x037C4098 MOV X2, X31
	0x037C409C BL 0x330E100
	0x037C40A0 B 0x37C40E8
	0x037C40A4 ADRP X0, 0x937000
	0x037C40A8 LDR X0, [X0 + 0x578]
	0x037C40AC BL 0x1C16D08
	0x037C40B0 BL 0x1C16F10
	0x037C40B4 MOV X19, X0
	0x037C40B8 ADRP X0, 0x984000
	0x037C40BC LDR X0, [X0 + 0x140]
	0x037C40C0 BL 0x1C16D08
	0x037C40C4 MOV X20, X0
	0x037C40C8 ADRP X0, 0x984000
	0x037C40CC LDR X0, [X0 + 0x148]
	0x037C40D0 BL 0x1C16D08
	0x037C40D4 MOV X2, X0
	0x037C40D8 MOV X0, X19
	0x037C40DC MOV X1, X20
	0x037C40E0 MOV X3, X31
	0x037C40E4 BL 0x330E16C
	0x037C40E8 ADRP X0, 0x984000
	0x037C40EC LDR X0, [X0 + 0x1A0]
	0x037C40F0 BL 0x1C16D08
	0x037C40F4 MOV X1, X0
	0x037C40F8 MOV X0, X19
	0x037C40FC BL 0x1C16DEC
	0x037C4100 MOV X0, X20
	0x037C4104 BL 0x19903C0
	0x037C4108 LDR X8, [X20]
	0x037C410C MOV X0, X20
	0x037C4110 LDP X9, X1, [X8 + 0x1A8]
	0x037C4114 BLR X9
	0x037C4118 MOV X19, X0
	0x037C411C ADRP X0, 0x957000
	0x037C4120 LDR X0, [X0 + 0xCD0]
	0x037C4124 BL 0x1C16D08
	0x037C4128 MOV X20, X0
	0x037C412C ADRP X0, 0x984000
	0x037C4130 LDR X0, [X0 + 0x1A8]
	0x037C4134 BL 0x1C16D08
	0x037C4138 MOV X2, X0
	0x037C413C MOV X0, X20
	0x037C4140 MOV X1, X19
	0x037C4144 MOV X3, X31
	0x037C4148 BL 0x32274B8
	0x037C414C MOV X19, X0
	0x037C4150 ADRP X0, 0x937000

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X21, 0xC1F000
	015 Move [X31+48], X1
	016 Move [X31+56], X2
	017 Move X20, 0x959000
	018 Move W8, [X21+464]
	019 Move X20, [X20+3520]
	020 Move W23, W6
	021 Move W25, W5
	022 Move W24, W4
	023 Move X22, X3
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {61}
	029 Move X0, 0x986000
	030 Move X0, [X0+264]
	031 Call 0x1C17CF4
	032 Move X0, 0x984000
	033 Move X0, [X0+2112]
	034 Call 0x1C17CF4
	035 Move X0, 0x986000
	036 Move X0, [X0+272]
	037 Call 0x1C17CF4
	038 Move X0, 0x984000
	039 Move X0, [X0+2120]
	040 Call 0x1C17CF4
	041 Move X0, 0x984000
	042 Move X0, [X0+2128]
	043 Call 0x1C17CF4
	044 Move X0, 0x986000
	045 Move X0, [X0+280]
	046 Call 0x1C17CF4
	047 Move X0, 0x986000
	048 Move X0, [X0+288]
	049 Call 0x1C17CF4
	050 Move X0, 0x985000
	051 Move X0, [X0+3456]
	052 Call 0x1C17CF4
	053 Move X0, 0x959000
	054 Move X0, [X0+3520]
	055 Call 0x1C17CF4
	056 Move X0, 0x986000
	057 Move X0, [X0+296]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X21+464], W8
	061 Move [X31+32], X31
	062 Move [X31+40], X31
	063 Move W8, [X19+16]
	064 Add W8, W8, 1
	065 Move [X19+16], W8
	066 Move X0, [X20]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {72}
	070 Call 0x1C17DFC
	071 Move X0, [X20]
	072 Move X8, [X0+184]
	073 Move X1, X31
	074 Add X0, X8, 80
	075 Call Cache.Clear, X0
	076 Move TEMP, X23
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {108}
	080 Move W8, [X22]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X8, 0x985000
	083 Move X8, [X8+3456]
	084 Move X0, X22
	085 Move W1, W31
	086 Move X2, [X8]
	087 Call InlinedArray`1<InternedString>.get_Item, X0, X1
	088 Move [X31+32], X0
	089 Move [X31+40], X1
	090 Add X0, X31, 32
	091 Move X1, X31
	092 Call InternedString.IsEmpty, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfEqual {108}
	097 Move X0, [X19+48]
	098 Compare X0, 0
	099 JumpIfEqual {294}
	100 Move X8, 0x986000
	101 Move X3, [X31+32]
	102 Move X4, [X31+40]
	103 Move X1, [X31+48]
	104 Move X2, [X31+56]
	105 Move X8, [X8+280]
	106 Move X5, [X8]
	107 Call Dictionary`2<InternedString, InternedString>.set_Item, X0, X1, X2
	108 Move X0, [X19+72]
	109 Move [X31+12], W25
	110 Compare X0, 0
	111 JumpIfEqual {294}
	112 Move [X31+8], W24
	113 Move X29, 0x984000
	114 Move X29, [X29+2112]
	115 Move X1, [X31+48]
	116 Move X2, [X31+56]
	117 Move X3, [X29]
	118 Call Dictionary`2<InternedString, PrecompiledLayout>.Remove, X0, X1
	119 Move X0, [X19+72]
	120 Compare X0, 0
	121 JumpIfEqual {294}
	122 Move X8, 0x986000
	123 Move X8, [X8+272]
	124 Move X1, [X8]
	125 Call Dictionary`2<InternedString, PrecompiledLayout>.get_Count, X0
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X0, [X19+72]
	128 Compare X0, 0
	129 JumpIfEqual {294}
	130 Move X8, 0x984000
	131 Move X8, [X8+2128]
	132 Move X20, 0x986000
	133 Move X1, [X8]
	134 Move X20, [X20+288]
	135 Call Dictionary`2<InternedString, PrecompiledLayout>.get_Keys, X0
	136 Move X1, [X20]
	137 Call Enumerable.ToArray, X0
	138 Compare X0, 0
	139 JumpIfEqual {294}
	140 Move X8, [X0+24]
	141 Move X24, X0
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X21, 0x985000
	144 Move X21, [X21+3456]
	145 Move X20, X31
	146 And X8, X8, 0
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X0, [X19+72]
	149 Compare X0, 0
	150 JumpIfEqual {294}
	151 Add X8, X24, X20
	152 Move X25, [X8+32]
	153 Move X26, [X8+40]
	154 Move X8, 0x984000
	155 Move X8, [X8+2120]
	156 Move X1, X25
	157 Move X2, X26
	158 Move X3, [X8]
	159 Call Dictionary`2<InternedString, PrecompiledLayout>.get_Item, X0, X1
	160 Move X27, X1
	161 Move TEMP, X23
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfNotEqual {207}
	165 Move W8, [X22]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move W28, W31
	168 Move X2, [X21]
	169 Move X0, X22
	170 Move W1, W28
	171 Call InlinedArray`1<InternedString>.get_Item, X0, X1
	172 Move X2, X0
	173 Move X3, X1
	174 Move X0, X25
	175 Move X1, X26
	176 Move X4, X31
	177 Call InternedString.op_Equality, X0, X1
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfEqual {197}
	182 Move X2, [X21]
	183 Move X0, X22
	184 Move W1, W28
	185 Call InlinedArray`1<InternedString>.get_Item, X0, X1
	186 Move X2, X31
	187 Call InternedString.op_Implicit, X0
	188 Move X1, X0
	189 Move W2, 59
	190 Move X0, X27
	191 Move X3, X31
	192 Call StringHelpers.CharacterSeparatedListsHaveAtLeastOneCommonElement, X0, X1, X2
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfNotEqual {204}
	197 Move X0, [X19+72]
	198 Compare X0, 0
	199 JumpIfEqual {294}
	200 Move X3, [X29]
	201 Move X1, X25
	202 Move X2, X26
	203 Call Dictionary`2<InternedString, PrecompiledLayout>.Remove, X0, X1
	204 Move W8, [X22]
	205 Add W28, W28, 1
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move X0, [X31+48]
	208 Move X1, [X31+56]
	209 Move X2, X31
	210 Call InternedString.op_Implicit, X0
	211 Move X1, X0
	212 Move W2, 59
	213 Move X0, X27
	214 Move X3, X31
	215 Call StringHelpers.CharacterSeparatedListsHaveAtLeastOneCommonElement, X0, X1, X2
	216 Move TEMP, X0
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfNotEqual {227}
	220 Move X0, [X19+72]
	221 Compare X0, 0
	222 JumpIfEqual {294}
	223 Move X3, [X29]
	224 Move X1, X25
	225 Move X2, X26
	226 Call Dictionary`2<InternedString, PrecompiledLayout>.Remove, X0, X1
	227 Move W8, [X24+24]
	228 Add X20, X20, 1
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move X21, 0x986000
	231 Move X24, 0x986000
	232 Move X21, [X21+296]
	233 Call 0x3EB2944
	234 Return 
	235 Move TEMP, X23
	236 And TEMP, TEMP, 1
	237 Compare TEMP, 1
	238 JumpIfNotEqual {259}
	239 Move W8, [X22]
	240 Move W25, [X31+12]
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move X20, 0x984000
	243 Move X20, [X20+3456]
	244 Move W23, W31
	245 Move X2, [X20]
	246 Move X0, X22
	247 Move W1, W23
	248 Call InlinedArray`1<InternedString>.get_Item, X0, X1
	249 Move X2, X0
	250 Move X4, X1
	251 And W3, W25, 1
	252 Move X0, X19
	253 Move X1, X2
	254 Move X2, X4
	255 Call InputManager.RecreateDevicesUsingLayout, X0, X1, X2
	256 Move W8, [X22]
	257 Add W23, W23, 1
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move W8, [X31+12]
	260 Move X1, [X31+48]
	261 Move X2, [X31+56]
	262 Move X0, X19
	263 And W3, W8, 1
	264 Call InputManager.RecreateDevicesUsingLayout, X0, X1, X2
	265 Move W8, [X31+8]
	266 Add X0, X31, 48
	267 Move X1, X31
	268 Add X19, X19, 544
	269 And W31, W8, 1
	270 Move W8, 2
	271 NotImplemented "Instruction CSEL not yet implemented."
	272 Call InternedString.ToString, X0
	273 Move X3, [X21]
	274 Move X5, [X24]
	275 Move X1, X0
	276 Move X0, X19
	277 Move W2, W20
	278 Move X4, X31
	279 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	280 Move X20, [X31+144]
	281 Move X19, [X31+152]
	282 Move X22, [X31+128]
	283 Move X21, [X31+136]
	284 Move X24, [X31+112]
	285 Move X23, [X31+120]
	286 Move X26, [X31+96]
	287 Move X25, [X31+104]
	288 Move X28, [X31+80]
	289 Move X27, [X31+88]
	290 Move X29, [X31+64]
	291 Move X30, [X31+72]
	292 Add X31, X31, 160
	293 Return 
	294 Call 0x1C17F20
	295 Call 0x1C17F28
	296 Move V0, [X31+3]
	297 Move X0, 0x95B000
	298 Move [X31+1], V0
	299 Move X0, [X0+1296]
	300 Call 0x1C17D08
	301 Add X1, X31, 16
	302 Call 0x1C17E04
	303 Move X19, X0
	304 Move X0, 0x985000
	305 Move X0, [X0+304]
	306 Call 0x1C17D08
	307 Move X1, X19
	308 Move X2, X31
	309 Call String.Format, X0, X1
	310 Move X19, X0
	311 Move X0, 0x930000
	312 Move X0, [X0+2880]
	313 Call 0x1C17D08
	314 Call 0x1C17F10
	315 Move X1, X19
	316 Move X2, X31
	317 Move X20, X0
	318 Call NotSupportedException..ctor, X0, X1
	319 Move X0, 0x985000
	320 Move X0, [X0+312]
	321 Call 0x1C17D08
	322 Move X1, X0
	323 Move X0, X20
	324 Call 0x1C17DEC

Method: System.Void RegisterPrecompiledLayout(System.String metadata)

Disassembly:
	0x022096E8 BL 0x37F80A4
	0x022096EC ANDS W8, W0, 0x1
	0x022096F0 CSEL X26, X31, X25, NE
	0x022096F4 CSEL X27, X31, X21, NE
	0x022096F8 CSEL W28, W31, W19, NE
	0x022096FC CSEL X23, X31, X29, NE
	0x02209700 CSEL W20, W31, W24, NE
	0x02209704 CSEL W12, W31, W22, NE
	0x02209708 CBZ W8, 0x2209724
	0x0220970C ADD X0, X31, 0x8
	0x02209710 MOV X1, X31
	0x02209714 BL 0x3802884
	0x02209718 MOV X23, X29
	0x0220971C MOV W20, W24
	0x02209720 B 0x22097B4
	0x02209724 ADRP X8, 0x1F12000
	0x02209728 LDR X8, [X8 + 0xEC8]
	0x0220972C LDR X8, [X8]
	0x02209730 LDR X8, [X8 + 0xB8]
	0x02209734 LDR X19, [X8]
	0x02209738 CBZ X19, 0x22097FC
	0x0220973C ADRP X10, 0x1F12000
	0x02209740 LDR X8, [X19]
	0x02209744 LDR X10, [X10 + 0xED0]
	0x02209748 LDRH W9, [X8 + 0x12E]
	0x0220974C LDR X1, [X10]
	0x02209750 CBZ X9, 0x2209774
	0x02209754 LDR X10, [X8 + 0xB0]
	0x02209758 ADD X10, X10, 0x8
	0x0220975C LDUR X11, [X10 - 0x8]
	0x02209760 CMP X11, X1
	0x02209764 B.EQ 0x2209788
	0x02209768 SUBS X9, X9, 0x1
	0x0220976C ADD X10, X10, 0x10
	0x02209770 B.NE 0x220975C
	0x02209774 MOVZ W2, 0x13
	0x02209778 MOV X0, X19
	0x0220977C MOV W22, W12
	0x02209780 BL 0x1C5C788
	0x02209784 B 0x220979C
	0x02209788 LDR W9, [X10]
	0x0220978C MOV W22, W12
	0x02209790 ADD W9, W9, 0x13
	0x02209794 ADD X8, X8, W9, 0x4, SXTW
	0x02209798 ADD X0, X8, 0x138
	0x0220979C LDP X8, X1, [X0]
	0x022097A0 MOV X0, X19
	0x022097A4 BLR X8
	0x022097A8 MOV X25, X26
	0x022097AC MOV X21, X27
	0x022097B0 MOV W19, W28
	0x022097B4 CBZ X25, 0x22097FC
	0x022097B8 LDR X6, [X31 + 0x8]
	0x022097BC MOV X0, X25
	0x022097C0 MOV X1, X21
	0x022097C4 MOV W2, W19
	0x022097C8 MOV X3, X23
	0x022097CC MOV W4, W20
	0x022097D0 MOV W5, W22
	0x022097D4 MOV X7, X31
	0x022097D8 BL 0x37C6A44
	0x022097DC LDP X20, X19, [X31 + 0x60]
	0x022097E0 LDP X22, X21, [X31 + 0x50]
	0x022097E4 LDP X24, X23, [X31 + 0x40]
	0x022097E8 LDP X26, X25, [X31 + 0x30]
	0x022097EC LDP X28, X27, [X31 + 0x20]
	0x022097F0 LDP X29, X30, [X31 + 0x10]
	0x022097F4 ADD X31, X31, 0x70
	0x022097F8 RET
	0x022097FC BL 0x1C16F20
	0x02209800 ADRP X0, 0x1F12000
	0x02209804 LDR X0, [X0 + 0xEF0]
	0x02209808 BL 0x1C16D08
	0x0220980C MOV X1, X22
	0x02209810 MOV X2, X31
	0x02209814 BL 0x321EFD0
	0x02209818 MOV X19, X0
	0x0220981C ADRP X0, 0x1EF2000
	0x02209820 LDR X0, [X0 + 0x578]
	0x02209824 BL 0x1C16D08
	0x02209828 BL 0x1C16F10
	0x0220982C MOV X20, X0
	0x02209830 ADRP X0, 0x1F12000
	0x02209834 LDR X0, [X0 + 0xD60]
	0x02209838 BL 0x1C16D08
	0x0220983C MOV X2, X0
	0x02209840 MOV X0, X20
	0x02209844 MOV X1, X19
	0x02209848 MOV X3, X31
	0x0220984C BL 0x330E16C
	0x02209850 MOV X0, X20
	0x02209854 B 0x220988C
	0x02209858 ADRP X0, 0x1EEF000
	0x0220985C LDR X0, [X0 + 0x528]
	0x02209860 BL 0x1C16D08
	0x02209864 BL 0x1C16F10
	0x02209868 MOV X19, X0
	0x0220986C ADRP X0, 0x1F12000
	0x02209870 LDR X0, [X0 + 0xD60]
	0x02209874 BL 0x1C16D08
	0x02209878 MOV X1, X0
	0x0220987C MOV X0, X19
	0x02209880 MOV X2, X31
	0x02209884 BL 0x330E100
	0x02209888 MOV X0, X19
	0x0220988C MOV X1, X21
	0x02209890 BL 0x1C16DEC
	0x02209894 STP X30, X23, [X31 - 0x30]!
	0x02209898 STP X22, X21, [X31 + 0x10]
	0x0220989C STP X20, X19, [X31 + 0x20]
	0x022098A0 LDR X8, [X4 + 0x38]
	0x022098A4 MOV X19, X3
	0x022098A8 MOV W20, W2
	0x022098AC MOV X21, X1
	0x022098B0 MOV X22, X0
	0x022098B4 CBNZ X8, 0x22098C8
	0x022098B8 MOV X0, X4
	0x022098BC MOV X23, X4
	0x022098C0 BL 0x1C5C6E0
	0x022098C4 LDR X8, [X23 + 0x38]
	0x022098C8 LDR X4, [X8 + 0x8]
	0x022098CC MOV X0, X22
	0x022098D0 MOV X1, X21
	0x022098D4 MOV W2, W20
	0x022098D8 MOV X3, X19
	0x022098DC LDP X20, X19, [X31 + 0x20]
	0x022098E0 LDP X22, X21, [X31 + 0x10]
	0x022098E4 LDP X30, X23, [X31], #0x30
	0x022098E8 B 0x22098EC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X2+56]
	010 Move X19, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {29}
	015 Move X0, 0x1F13000
	016 Move X0, [X0+3800]
	017 Call 0x1C17CF4
	018 Move X0, 0x1F13000
	019 Move X0, [X0+3808]
	020 Call 0x1C17CF4
	021 Move X0, 0x1EEB000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move X8, [X19+56]
	025 Compare X8, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X19
	028 Call 0x1C5D6E0
	029 Compare X20, 0
	030 JumpIfEqual {151}
	031 Move X8, 0x1EEB000
	032 Move X8, [X8+1728]
	033 Move X0, [X8]
	034 Move X8, [X19+56]
	035 Move W9, [X0+224]
	036 Move X21, [X8]
	037 Compare W9, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Call Type.GetTypeFromHandle, X0
	043 Compare X0, 0
	044 JumpIfEqual {150}
	045 Move X8, [X0]
	046 Move X9, [X8+2072]
	047 Move X1, [X8+2080]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X1, X0
	050 Move X0, X22
	051 Move X2, X31
	052 Call InputManager.FindOrRegisterDeviceLayoutForType, X0, X1
	053 Move X8, [X19+56]
	054 Move X21, X0
	055 Move X23, [X22+72]
	056 Move X22, X1
	057 Move X0, [X8+16]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X8, [X19+56]
	069 Move X0, [X8+16]
	070 Move W8, [X0+309]
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {76}
	075 Call 0x1C5D684
	076 Move X8, [X0+184]
	077 Move X24, [X8+8]
	078 Compare X24, 0
	079 JumpIfNotEqual {130}
	080 Move X8, [X19+56]
	081 Move X0, [X8+16]
	082 Move W8, [X0+309]
	083 Move TEMP, X8
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {88}
	087 Call 0x1C5D684
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X8, [X19+56]
	093 Move X0, [X8+16]
	094 Move W8, [X0+309]
	095 Move TEMP, X8
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {100}
	099 Call 0x1C5D684
	100 Move X9, 0x1F13000
	101 Move X8, [X0+184]
	102 Move X9, [X9+3808]
	103 Move X25, [X8]
	104 Move X0, [X9]
	105 Call 0x1C17F10
	106 Move X8, [X19+56]
	107 Move X1, X25
	108 Move X3, X31
	109 Move X24, X0
	110 Move X2, [X8+24]
	111 Call Func`1<Object>..ctor, X0, X1, X2
	112 Move X8, [X19+56]
	113 Move X0, [X8+16]
	114 Move W8, [X0+309]
	115 Move TEMP, X8
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfEqual {120}
	119 Call 0x1C5D684
	120 Move X8, [X0+184]
	121 Move [X8+8], X24
	122 Move X8, [X19+56]
	123 Move X0, [X8+16]
	124 Move W8, [X0+309]
	125 Move TEMP, X8
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfEqual {130}
	129 Call 0x1C5D684
	130 Compare X23, 0
	131 JumpIfEqual {150}
	132 Move X8, 0x1F13000
	133 Move X8, [X8+3800]
	134 Move X0, X23
	135 Move X1, X21
	136 Move X2, X22
	137 Move X5, [X8]
	138 Move X3, X24
	139 Move X4, X20
	140 Move X20, [X31+48]
	141 Move X19, [X31+56]
	142 Move X22, [X31+32]
	143 Move X21, [X31+40]
	144 Move X24, [X31+16]
	145 Move X23, [X31+24]
	146 Move X30, [X31+64]
	147 Move X25, [X31+72]
	148 Call Dictionary`2<InternedString, PrecompiledLayout>.set_Item, X0, X1, X2
	149 Return 
	150 Call 0x1C17F20
	151 Move X0, 0x1EF0000
	152 Move X0, [X0+1320]
	153 Call 0x1C17D08
	154 Call 0x1C17F10
	155 Move X20, X0
	156 Move X0, 0x1EEC000
	157 Move X0, [X0+2632]
	158 Call 0x1C17D08
	159 Move X1, X0
	160 Move X0, X20
	161 Move X2, X31
	162 Call ArgumentNullException..ctor, X0, X1
	163 Move X0, X20
	164 Move X1, X19
	165 Call 0x1C17DEC

Method: System.Void RecreateDevicesUsingLayout(UnityEngine.InputSystem.Utilities.InternedString layout, System.Boolean isKnownToBeDeviceLayout = False)

Disassembly:
	0x037C4434 TBNZ X8, 0x0, 0x37C4458
	0x037C4438 STP X31, X31, [X31 + 0x10]
	0x037C443C ADD X0, X31, 0x10
	0x037C4440 MOV X1, X26
	0x037C4444 MOV X2, X31
	0x037C4448 BL 0x3757420
	0x037C444C LDR V0, [X31 + 0x1]
	0x037C4450 MOVZ W28, 0x1
	0x037C4454 STR V0, [X31 + 0x7]
	0x037C4458 LDR X1, [X27]
	0x037C445C MOV X0, X21
	0x037C4460 ADD W22, W22, 0x1
	0x037C4464 BL 0x28F140C
	0x037C4468 CMP W22, W0
	0x037C446C B.LT 0x37C43E4
	0x037C4470 B 0x37C4554
	0x037C4474 STR W28, [X31 + 0xC]
	0x037C4478 BL 0x1C16F20
	0x037C447C B 0x37C45B0
	0x037C4480 B 0x37C4494
	0x037C4484 B 0x37C4494
	0x037C4488 B 0x37C4494
	0x037C448C B 0x37C4498
	0x037C4490 B 0x37C4494
	0x037C4494 STR W28, [X31 + 0xC]
	0x037C4498 MOV X26, X0
	0x037C449C CMP W1, 0x1
	0x037C44A0 B.NE 0x37C45BC
	0x037C44A4 MOV X0, X26
	0x037C44A8 BL 0x3EB1AD0
	0x037C44AC MOV X26, X0
	0x037C44B0 MOV X0, X23
	0x037C44B4 BL 0x1C16D08
	0x037C44B8 LDR X8, [X26]
	0x037C44BC LDR X1, [X8]
	0x037C44C0 BL 0x1C17270
	0x037C44C4 TBZ X0, 0x0, 0x37C4590
	0x037C44C8 LDR X26, [X26]
	0x037C44CC BL 0x3EB1AE0
	0x037C44D0 CBZ X26, 0x37C458C
	0x037C44D4 MOV X0, X26
	0x037C44D8 MOV X1, X31
	0x037C44DC BL 0x33B32AC
	0x037C44E0 CBZ X0, 0x37C458C
	0x037C44E4 LDR X8, [X0]
	0x037C44E8 LDP X9, X1, [X8 + 0x1A8]
	0x037C44EC BLR X9
	0x037C44F0 MOV X27, X0
	0x037C44F4 MOV X0, X24
	0x037C44F8 BL 0x1C16D08
	0x037C44FC MOV X1, X0
	0x037C4500 MOV X0, X27
	0x037C4504 MOV X2, X31
	0x037C4508 BL 0x321B938
	0x037C450C MOV X27, X0
	0x037C4510 MOV X0, X25
	0x037C4514 BL 0x1C16D08
	0x037C4518 LDR W8, [X0 + 0xE0]
	0x037C451C CBNZ W8, 0x37C4524
	0x037C4520 BL 0x1C16DFC
	0x037C4524 MOV X0, X27
	0x037C4528 MOV X1, X31
	0x037C452C BL 0x3C0649C
	0x037C4530 MOV X0, X26
	0x037C4534 MOV X1, X31
	0x037C4538 BL 0x3C02C84
	0x037C453C ADRP X27, 0x984000
	0x037C4540 ADRP X29, 0x984000
	0x037C4544 LDR X27, [X27 + 0x1C8]
	0x037C4548 LDR X29, [X29 + 0x1C0]
	0x037C454C LDR W28, [X31 + 0xC]
	0x037C4550 B 0x37C4458
	0x037C4554 ADRP X8, 0x984000
	0x037C4558 LDR X8, [X8 + 0x1B8]
	0x037C455C MOV X0, X21
	0x037C4560 LDR X1, [X8]
	0x037C4564 BL 0x28F17C8
	0x037C4568 LDP X0, X1, [X31 + 0x70]
	0x037C456C LDP X20, X19, [X31 + 0xD0]
	0x037C4570 LDP X22, X21, [X31 + 0xC0]
	0x037C4574 LDP X24, X23, [X31 + 0xB0]
	0x037C4578 LDP X26, X25, [X31 + 0xA0]
	0x037C457C LDP X28, X27, [X31 + 0x90]
	0x037C4580 LDP X29, X30, [X31 + 0x80]
	0x037C4584 ADD X31, X31, 0xE0
	0x037C4588 RET
	0x037C458C BL 0x1C16F20
	0x037C4590 MOVZ W0, 0x8
	0x037C4594 BL 0x3EB1AF0
	0x037C4598 LDR X8, [X26]
	0x037C459C STR X8, [X0]
	0x037C45A0 ADRP X1, 0x6F0000
	0x037C45A4 ADD X1, X1, 0xE58
	0x037C45A8 MOV X2, X31
	0x037C45AC BL 0x3EB1B00
	0x037C45B0 B 0x37C45B4
	0x037C45B4 MOV X26, X0
	0x037C45B8 BL 0x3EB1AE0
	0x037C45BC MOV X0, X26
	0x037C45C0 BL 0x1D2C690
	0x037C45C4 BL 0x1990590
	0x037C45C8 STR X30, [X31 - 0x30]!
	0x037C45CC STP X22, X21, [X31 + 0x10]
	0x037C45D0 STP X20, X19, [X31 + 0x20]
	0x037C45D4 ADRP X21, 0xC1D000
	0x037C45D8 LDRB W8, [X21 + 0x1E5]
	0x037C45DC MOV X19, X1
	0x037C45E0 MOV X20, X0
	0x037C45E4 TBNZ X8, 0x0, 0x37C4680
	0x037C45E8 ADRP X0, 0x930000
	0x037C45EC LDR X0, [X0 + 0xE70]
	0x037C45F0 BL 0x1C16CF4
	0x037C45F4 ADRP X0, 0x984000
	0x037C45F8 LDR X0, [X0 + 0x1E8]
	0x037C45FC BL 0x1C16CF4
	0x037C4600 ADRP X0, 0x984000
	0x037C4604 LDR X0, [X0 + 0x1F0]
	0x037C4608 BL 0x1C16CF4
	0x037C460C ADRP X0, 0x983000
	0x037C4610 LDR X0, [X0 + 0xD28]
	0x037C4614 BL 0x1C16CF4
	0x037C4618 ADRP X0, 0x984000
	0x037C461C LDR X0, [X0 + 0x1F8]
	0x037C4620 BL 0x1C16CF4
	0x037C4624 ADRP X0, 0x984000
	0x037C4628 LDR X0, [X0 + 0x200]
	0x037C462C BL 0x1C16CF4
	0x037C4630 ADRP X0, 0x984000
	0x037C4634 LDR X0, [X0 + 0x208]
	0x037C4638 BL 0x1C16CF4
	0x037C463C ADRP X0, 0x957000
	0x037C4640 LDR X0, [X0 + 0xED0]
	0x037C4644 BL 0x1C16CF4
	0x037C4648 ADRP X0, 0x982000
	0x037C464C LDR X0, [X0 + 0xC68]
	0x037C4650 BL 0x1C16CF4
	0x037C4654 ADRP X0, 0x983000
	0x037C4658 LDR X0, [X0 + 0xD38]
	0x037C465C BL 0x1C16CF4
	0x037C4660 ADRP X0, 0x957000
	0x037C4664 LDR X0, [X0 + 0xD18]
	0x037C4668 BL 0x1C16CF4
	0x037C466C ADRP X0, 0x983000
	0x037C4670 LDR X0, [X0 + 0xD40]
	0x037C4674 BL 0x1C16CF4
	0x037C4678 MOVZ W8, 0x1
	0x037C467C STRB W8, [X21 + 0x1E5]
	0x037C4680 CBZ X19, 0x37C4A7C
	0x037C4684 MOV X0, X19
	0x037C4688 MOV X1, X31
	0x037C468C BL 0x3772094
	0x037C4690 MOV X1, X31
	0x037C4694 BL 0x32277A8

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0xC1E000
	013 Move W8, [X20+465]
	014 Move W21, W3
	015 Move X22, X2
	016 Move X23, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x985000
	023 Move X0, [X0+360]
	024 Call 0x1C17CF4
	025 Move X0, 0x985000
	026 Move X0, [X0+368]
	027 Call 0x1C17CF4
	028 Move X0, 0x985000
	029 Move X0, [X0+376]
	030 Call 0x1C17CF4
	031 Move X0, 0x985000
	032 Move X0, [X0+384]
	033 Call 0x1C17CF4
	034 Move X0, 0x985000
	035 Move X0, [X0+392]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+465], W8
	039 Move W8, [X19+112]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X26, 0x985000
	042 Move X27, 0x985000
	043 Move X28, 0x985000
	044 Move X26, [X26+392]
	045 Move X27, [X27+368]
	046 Move X28, [X28+360]
	047 Move X25, X31
	048 Move X20, X31
	049 Move X8, [X19+120]
	050 Compare X8, 0
	051 JumpIfEqual {145}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, X25
	055 Move X24, [X8+32]
	056 Move X0, X19
	057 Move X2, X23
	058 Move X3, X22
	059 Move X1, X24
	060 Move TEMP, X21
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {69}
	064 Call InputManager.IsControlUsingLayout, X0, X1, X2
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {74}
	069 Call InputManager.IsControlOrChildUsingLayoutRecursive, X0, X1, X2
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {103}
	074 Compare X20, 0
	075 JumpIfNotEqual {83}
	076 Move X0, [X26]
	077 Call 0x1C17F10
	078 Move X1, [X27]
	079 Move X20, X0
	080 Call List`1<Object>..ctor, X0
	081 Compare X20, 0
	082 JumpIfEqual {145}
	083 Move W10, [X20+28]
	084 Move X8, [X20+16]
	085 Move X9, [X28]
	086 Add W10, W10, 1
	087 Move [X20+28], W10
	088 Compare X8, 0
	089 JumpIfEqual {145}
	090 NotImplemented "Instruction LDRSW not yet implemented."
	091 Move W11, [X8+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add W9, W10, 1
	094 Add X8, X8, X10
	095 Move [X20+24], W9
	096 Move [X8+32], X24
	097 Move X8, [X9+32]
	098 Move X0, X20
	099 Move X1, X24
	100 Move X8, [X8+192]
	101 Move X2, [X8+112]
	102 Call List`1<Object>.AddWithResize, X0, X1
	103 NotImplemented "Instruction LDRSW not yet implemented."
	104 Add X25, X25, 1
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Compare X20, 0
	107 JumpIfEqual {133}
	108 Move X0, X31
	109 Call InputDeviceBuilder.Ref
	110 Move [X31+8], W0
	111 Move W8, [X20+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X22, 0x985000
	114 Move X22, [X22+384]
	115 Move W21, W31
	116 Move X2, [X22]
	117 Move X0, X20
	118 Move W1, W21
	119 Call List`1<Object>.get_Item, X0, X1
	120 Move X1, X0
	121 Compare X1, 0
	122 JumpIfEqual {147}
	123 Move X2, [X1+88]
	124 Move X3, [X1+96]
	125 Move X0, X19
	126 Call InputManager.RecreateDevice, X0, X1, X2
	127 Move W8, [X20+24]
	128 Add W21, W21, 1
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Add X0, X31, 8
	131 Move X1, X31
	132 Call RefInstance.Dispose, X0
	133 Move X20, [X31+80]
	134 Move X19, [X31+88]
	135 Move X22, [X31+64]
	136 Move X21, [X31+72]
	137 Move X24, [X31+48]
	138 Move X23, [X31+56]
	139 Move X26, [X31+32]
	140 Move X25, [X31+40]
	141 Move X28, [X31+16]
	142 Move X27, [X31+24]
	143 Move X30, [X31+96]
	144 Return 
	145 Call 0x1C17F20
	146 Call 0x1C17F28
	147 Call 0x1C17F20
	148 Move X19, X0
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X0, X19
	151 Call 0x3EB2AD0
	152 Move X20, [X0]
	153 Call 0x3EB2AE0
	154 Add X0, X31, 8
	155 Move X1, X31
	156 Call RefInstance.Dispose, X0
	157 Compare X20, 0
	158 JumpIfEqual {133}
	159 Move X0, X20
	160 Call 0x1C17F18
	161 Move X20, X31
	162 Move X19, X0
	163 Add X0, X31, 8
	164 Move X1, X31
	165 Call RefInstance.Dispose, X0
	166 Compare X20, 0
	167 JumpIfNotEqual {170}
	168 Move X0, X19
	169 Call 0x1D2D690
	170 Move X0, X20
	171 Call 0x1C17F18
	172 Call 0x1991590

Method: System.Boolean IsControlOrChildUsingLayoutRecursive(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.Utilities.InternedString layout)

Disassembly:
	0x037C4768 LDR W12, [X20 + 0x450]
	0x037C476C LDRSW X8, [X20 + 0x88]
	0x037C4770 CMP W9, W10
	0x037C4774 CSEL W9, W9, W10, GT
	0x037C4778 CMP W11, W12
	0x037C477C STR W9, [X20 + 0x448]
	0x037C4780 CSEL W9, W11, W12, GT
	0x037C4784 CMP W8, 0x1
	0x037C4788 STR W9, [X20 + 0x450]
	0x037C478C B.LT 0x37C47D0
	0x037C4790 LDR X11, [X20 + 0x90]
	0x037C4794 CBZ X11, 0x37C4AF8
	0x037C4798 LDR W10, [X11 + 0x18]
	0x037C479C MOV X9, X31
	0x037C47A0 ADD X11, X11, 0x58
	0x037C47A4 CMP X9, X10
	0x037C47A8 B.CS 0x37C4A78
	0x037C47AC LDR W12, [X11]
	0x037C47B0 LDR W13, [X19 + 0xE0]
	0x037C47B4 CMP W12, W13
	0x037C47B8 B.NE 0x37C47C0
	0x037C47BC STRB W31, [X11 + 0x5]
	0x037C47C0 ADD X9, X9, 0x1
	0x037C47C4 CMP X9, X8
	0x037C47C8 ADD X11, X11, 0x40
	0x037C47CC B.LT 0x37C47A4
	0x037C47D0 LDRB W8, [X20 + 0x3B2]
	0x037C47D4 CBNZ W8, 0x37C4890
	0x037C47D8 LDR X8, [X20 + 0x480]
	0x037C47DC CBZ X8, 0x37C4AF8
	0x037C47E0 LDR W8, [X8 + 0x30]
	0x037C47E4 CMP W8, 0x2
	0x037C47E8 B.EQ 0x37C4890
	0x037C47EC LDR X21, [X20 + 0x440]
	0x037C47F0 CBZ X21, 0x37C4AF8
	0x037C47F4 ADRP X10, 0x957000
	0x037C47F8 LDR X8, [X21]
	0x037C47FC LDR X10, [X10 + 0xED0]
	0x037C4800 LDRH W9, [X8 + 0x12E]
	0x037C4804 LDR X1, [X10]
	0x037C4808 CBZ X9, 0x37C482C
	0x037C480C LDR X10, [X8 + 0xB0]
	0x037C4810 ADD X10, X10, 0x8
	0x037C4814 LDUR X11, [X10 - 0x8]
	0x037C4818 CMP X11, X1
	0x037C481C B.EQ 0x37C483C
	0x037C4820 SUBS X9, X9, 0x1
	0x037C4824 ADD X10, X10, 0x10
	0x037C4828 B.NE 0x37C4814
	0x037C482C MOVZ W2, 0x17
	0x037C4830 MOV X0, X21
	0x037C4834 BL 0x1C5C788
	0x037C4838 B 0x37C484C
	0x037C483C LDR W9, [X10]
	0x037C4840 ADD W9, W9, 0x17
	0x037C4844 ADD X8, X8, W9, 0x4, SXTW
	0x037C4848 ADD X0, X8, 0x138
	0x037C484C LDP X8, X1, [X0]
	0x037C4850 MOV X0, X21
	0x037C4854 BLR X8
	0x037C4858 TBZ X0, 0x0, 0x37C4890

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC1E000
	009 Move W8, [X23+466]
	010 Move X19, X3
	011 Move X20, X2
	012 Move X22, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x958000
	019 Move X0, [X0+3392]
	020 Call 0x1C17CF4
	021 Move X0, 0x958000
	022 Move X0, [X0+3400]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+466], W8
	026 Move X0, X21
	027 Move X1, X22
	028 Move X2, X20
	029 Move X3, X19
	030 Call InputManager.IsControlUsingLayout, X0, X1, X2
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {36}
	035 Move W0, 1
	036 Compare X22, 0
	037 JumpIfEqual {76}
	038 Move X0, X22
	039 Move X1, X31
	040 Call InputControl.get_children, X0
	041 Move X8, X1
	042 ShiftRight X8, 32
	043 And X8, X8, 0x7FFFFFFF
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X31], X0
	046 Move [X31+8], X1
	047 Move X23, 0x958000
	048 Move X23, [X23+3400]
	049 Move W22, W31
	050 Move X2, [X23]
	051 Add X0, X31, 0
	052 Move W1, W22
	053 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	054 Move X1, X0
	055 Move X0, X21
	056 Move X2, X20
	057 Move X3, X19
	058 Call InputManager.IsControlOrChildUsingLayoutRecursive, X0, X1, X2
	059 Move W8, [X31+12]
	060 Add W22, W22, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {50}
	066 Move W0, W31
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X30, [X31+16]
	072 Move X23, [X31+24]
	073 And W0, W0, 1
	074 Add X31, X31, 64
	075 Return X0
	076 Call 0x1C17F20

Method: System.Boolean IsControlUsingLayout(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.Utilities.InternedString layout)

Disassembly:
	0x037C4698 TBNZ X0, 0x0, 0x37C4AB0
	0x037C469C ADRP X8, 0x984000
	0x037C46A0 LDR X8, [X8 + 0x1F0]
	0x037C46A4 MOV X21, X20
	0x037C46A8 LDR X0, [X21 + 0x78]!
	0x037C46AC MOV X1, X19
	0x037C46B0 LDR X2, [X8]
	0x037C46B4 BL 0x2175E44
	0x037C46B8 TBZ X0, 0x0, 0x37C46CC
	0x037C46BC LDP X20, X19, [X31 + 0x20]
	0x037C46C0 LDP X22, X21, [X31 + 0x10]
	0x037C46C4 LDR X30, [X31], #0x30
	0x037C46C8 RET
	0x037C46CC MOV X0, X20
	0x037C46D0 MOV X1, X19
	0x037C46D4 BL 0x37C5600
	0x037C46D8 MOV X0, X20
	0x037C46DC MOV X1, X19
	0x037C46E0 BL 0x37C5780
	0x037C46E4 ADRP X8, 0x984000
	0x037C46E8 LDR X8, [X8 + 0x1E8]
	0x037C46EC ADD X1, X20, 0x70
	0x037C46F0 MOVZ W3, 0xA
	0x037C46F4 MOV X0, X21
	0x037C46F8 LDR X4, [X8]
	0x037C46FC MOV X2, X19
	0x037C4700 BL 0x2174728
	0x037C4704 STR W0, [X19 + 0xE8]
	0x037C4708 LDR X0, [X20 + 0x80]
	0x037C470C CBZ X0, 0x37C4AF8
	0x037C4710 ADRP X8, 0x984000
	0x037C4714 LDR W1, [X19 + 0xE0]
	0x037C4718 LDR X8, [X8 + 0x1F8]
	0x037C471C MOV X2, X19
	0x037C4720 LDR X3, [X8]
	0x037C4724 BL 0x2A13678
	0x037C4728 ADRP X8, 0x957000
	0x037C472C LDR X8, [X8 + 0xD18]
	0x037C4730 LDR X0, [X8]
	0x037C4734 LDR W8, [X0 + 0xE0]
	0x037C4738 CBNZ W8, 0x37C4740
	0x037C473C BL 0x1C16DFC
	0x037C4740 MOVN W8, 0x0
	0x037C4744 MOV X0, X20
	0x037C4748 STR W8, [X19 + 0x14]
	0x037C474C BL 0x37C1C54
	0x037C4750 MOV X0, X20
	0x037C4754 MOV X1, X19
	0x037C4758 BL 0x37C5904
	0x037C475C LDR W9, [X20 + 0x70]
	0x037C4760 LDR W10, [X20 + 0x448]
	0x037C4764 LDR W11, [X20 + 0xB4]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC1E000
	009 Move W8, [X23+467]
	010 Move X19, X3
	011 Move X20, X2
	012 Move X22, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x958000
	019 Move X0, [X0+3512]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+467], W8
	023 Compare X22, 0
	024 JumpIfEqual {73}
	025 Move X0, X22
	026 Move X1, X31
	027 Call InputControl.get_layout, X0
	028 Move X1, X20
	029 Move X2, X19
	030 Move X3, X31
	031 Call InternedString.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move W22, 1
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 Move X23, 0x958000
	039 Move [X31], V0
	040 Move X23, [X23+3512]
	041 Move X0, [X21+48]
	042 Compare X0, 0
	043 JumpIfEqual {73}
	044 Move X1, [X31]
	045 Move X2, [X31+8]
	046 Move X4, [X23]
	047 Add X3, X31, 0
	048 Call Dictionary`2<InternedString, InternedString>.TryGetValue, X0, X1, X2
	049 Move W22, W0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {64}
	054 Move X0, [X31]
	055 Move X1, [X31+8]
	056 Move X2, X20
	057 Move X3, X19
	058 Move X4, X31
	059 Call InternedString.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {41}
	064 And W0, W22, 1
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X22, [X31+32]
	068 Move X21, [X31+40]
	069 Move X30, [X31+16]
	070 Move X23, [X31+24]
	071 Add X31, X31, 64
	072 Return X0
	073 Call 0x1C17F20

Method: System.Void RegisterControlLayoutMatcher(System.String layoutName, UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher)

Disassembly:
	0x037C4154 LDR X0, [X0 + 0x578]
	0x037C4158 BL 0x1C16D08
	0x037C415C BL 0x1C16F10
	0x037C4160 MOV X20, X0
	0x037C4164 ADRP X0, 0x937000
	0x037C4168 LDR X0, [X0 + 0x5E8]
	0x037C416C BL 0x1C16D08
	0x037C4170 MOV X2, X0
	0x037C4174 MOV X0, X20
	0x037C4178 MOV X1, X19
	0x037C417C MOV X3, X31
	0x037C4180 BL 0x330E16C
	0x037C4184 ADRP X0, 0x984000
	0x037C4188 LDR X0, [X0 + 0x1A0]
	0x037C418C BL 0x1C16D08
	0x037C4190 MOV X1, X0
	0x037C4194 MOV X0, X20
	0x037C4198 BL 0x1C16DEC
	0x037C419C SUB X31, X31, 0xE0
	0x037C41A0 STP X29, X30, [X31 + 0x80]
	0x037C41A4 STP X28, X27, [X31 + 0x90]
	0x037C41A8 STP X26, X25, [X31 + 0xA0]
	0x037C41AC STP X24, X23, [X31 + 0xB0]
	0x037C41B0 STP X22, X21, [X31 + 0xC0]
	0x037C41B4 STP X20, X19, [X31 + 0xD0]
	0x037C41B8 ADRP X21, 0xC1D000
	0x037C41BC LDRB W8, [X21 + 0x1DB]
	0x037C41C0 MOV W22, W2
	0x037C41C4 MOV X19, X1
	0x037C41C8 MOV X20, X0
	0x037C41CC TBNZ X8, 0x0, 0x37C4238
	0x037C41D0 ADRP X0, 0x984000
	0x037C41D4 LDR X0, [X0 + 0x1B0]
	0x037C41D8 BL 0x1C16CF4
	0x037C41DC ADRP X0, 0x984000
	0x037C41E0 LDR X0, [X0 + 0x1B8]
	0x037C41E4 BL 0x1C16CF4
	0x037C41E8 ADRP X0, 0x984000
	0x037C41EC LDR X0, [X0 + 0x1C0]
	0x037C41F0 BL 0x1C16CF4
	0x037C41F4 ADRP X0, 0x984000
	0x037C41F8 LDR X0, [X0 + 0x1C8]
	0x037C41FC BL 0x1C16CF4
	0x037C4200 ADRP X0, 0x984000
	0x037C4204 LDR X0, [X0 + 0x1D0]
	0x037C4208 BL 0x1C16CF4
	0x037C420C ADRP X0, 0x984000
	0x037C4210 LDR X0, [X0 + 0xE8]
	0x037C4214 BL 0x1C16CF4
	0x037C4218 ADRP X0, 0x984000
	0x037C421C LDR X0, [X0 + 0x1D8]
	0x037C4220 BL 0x1C16CF4
	0x037C4224 ADRP X0, 0x92F000
	0x037C4228 LDR X0, [X0 + 0x6C0]
	0x037C422C BL 0x1C16CF4
	0x037C4230 MOVZ W8, 0x1
	0x037C4234 STRB W8, [X21 + 0x1DB]
	0x037C4238 STP X31, X31, [X31 + 0x70]
	0x037C423C STP X31, X31, [X31 + 0x60]
	0x037C4240 LDP V2, V0, [X19 + 0x10]
	0x037C4244 LDR X8, [X19 + 0x30]
	0x037C4248 LDR V1, [X19]
	0x037C424C ADD X21, X20, 0x18
	0x037C4250 ADD X1, X31, 0x20
	0x037C4254 MOV X0, X21
	0x037C4258 MOV X2, X31
	0x037C425C STR X8, [X31 + 0x50]
	0x037C4260 STP V2, V0, [X31 + 0x30]
	0x037C4264 STR V1, [X31 + 0x2]
	0x037C4268 BL 0x381807C
	0x037C426C STP X0, X1, [X31 + 0x70]
	0x037C4270 ADD X0, X31, 0x70
	0x037C4274 MOV X1, X31
	0x037C4278 BL 0x375F7A0
	0x037C427C TBZ X0, 0x0, 0x37C4338
	0x037C4280 LDR X0, [X19 + 0x8]
	0x037C4284 MOV X1, X31
	0x037C4288 BL 0x32277A8
	0x037C428C TBNZ X0, 0x0, 0x37C4338
	0x037C4290 LDR X1, [X19 + 0x8]
	0x037C4294 ADD X0, X31, 0x60
	0x037C4298 MOV X2, X31
	0x037C429C BL 0x3757420
	0x037C42A0 LDP X1, X2, [X31 + 0x60]
	0x037C42A4 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xC1E000
	007 Move W8, [X21+468]
	008 Move X20, X1
	009 Move X19, X0
	010 Move [X31+24], X2
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x958000
	016 Move X0, [X0+3776]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+468], W8
	020 Move X0, X20
	021 Move X1, X31
	022 Move [X31+8], X31
	023 Move [X31+16], X31
	024 Call String.IsNullOrEmpty, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {67}
	029 Move X8, 0x958000
	030 Move X8, [X8+3776]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Add X0, X31, 24
	037 Move X1, X31
	038 Call InputDeviceMatcher.get_empty, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {79}
	043 Add X0, X31, 8
	044 Move X1, X20
	045 Move X2, X31
	046 Call InternedString..ctor, X0, X1
	047 Move X1, [X31+8]
	048 Move X2, [X31+16]
	049 Move X3, [X31+24]
	050 Add X0, X19, 24
	051 Move X4, X31
	052 Call Collection.AddMatcher, X0, X1, X2
	053 Move X1, [X31+24]
	054 Move X0, X19
	055 Call InputManager.RecreateDevicesUsingLayoutWithInferiorMatch, X0, X1
	056 Move X3, [X31+16]
	057 Move X1, [X31+24]
	058 Move X2, [X31+8]
	059 Move X0, X19
	060 Call InputManager.AddAvailableDevicesMatchingDescription, X0, X1, X2
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Add X31, X31, 64
	066 Return 
	067 Move X0, 0x935000
	068 Move X0, [X0+1320]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X19, X0
	072 Move X0, 0x983000
	073 Move X0, [X0+2072]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Move X2, X31
	078 Call ArgumentNullException..ctor, X0, X1
	079 Move X0, 0x938000
	080 Move X0, [X0+1400]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0x985000
	085 Move X0, [X0+320]
	086 Call 0x1C17D08
	087 Move X20, X0
	088 Move X0, 0x985000
	089 Move X0, [X0+328]
	090 Call 0x1C17D08
	091 Move X2, X0
	092 Move X0, X19
	093 Move X1, X20
	094 Move X3, X31
	095 Call ArgumentException..ctor, X0, X1, X2
	096 Move X0, 0x985000
	097 Move X0, [X0+336]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Call 0x1C17DEC

Method: System.Void RegisterControlLayoutMatcher(System.Type type, UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher)

Disassembly:
	0x037C4F80 TBNZ X0, 0x0, 0x37C5030
	0x037C4F84 LDP X1, X2, [X31]
	0x037C4F88 MOV X0, X20
	0x037C4F8C MOV X3, X31
	0x037C4F90 MOV X4, X31
	0x037C4F94 BL 0x3818440
	0x037C4F98 LDP X20, X19, [X31 + 0x30]
	0x037C4F9C LDP X22, X21, [X31 + 0x20]
	0x037C4FA0 LDR X30, [X31 + 0x10]
	0x037C4FA4 ADD X31, X31, 0x40
	0x037C4FA8 RET
	0x037C4FAC ADRP X0, 0x934000
	0x037C4FB0 LDR X0, [X0 + 0x528]
	0x037C4FB4 BL 0x1C16D08
	0x037C4FB8 BL 0x1C16F10
	0x037C4FBC MOV X19, X0
	0x037C4FC0 ADRP X0, 0x937000
	0x037C4FC4 LDR X0, [X0 + 0x5E8]
	0x037C4FC8 BL 0x1C16D08
	0x037C4FCC MOV X1, X0
	0x037C4FD0 MOV X0, X19
	0x037C4FD4 MOV X2, X31
	0x037C4FD8 BL 0x330E100
	0x037C4FDC ADRP X0, 0x984000
	0x037C4FE0 LDR X0, [X0 + 0x248]
	0x037C4FE4 BL 0x1C16D08
	0x037C4FE8 MOV X1, X0
	0x037C4FEC MOV X0, X19
	0x037C4FF0 BL 0x1C16DEC
	0x037C4FF4 BL 0x1C16F20
	0x037C4FF8 MOV X0, X19
	0x037C4FFC BL 0x19903C0
	0x037C5000 LDR X8, [X19]
	0x037C5004 MOV X0, X19
	0x037C5008 LDP X9, X1, [X8 + 0x1A8]
	0x037C500C BLR X9
	0x037C5010 MOV X19, X0
	0x037C5014 ADRP X0, 0x956000
	0x037C5018 LDR X0, [X0 + 0xCD0]
	0x037C501C BL 0x1C16D08
	0x037C5020 MOV X20, X0
	0x037C5024 ADRP X0, 0x980000
	0x037C5028 LDR X0, [X0 + 0x6A8]
	0x037C502C B 0x37C5064
	0x037C5030 MOV X0, X19
	0x037C5034 BL 0x19903C0
	0x037C5038 LDR X8, [X19]
	0x037C503C MOV X0, X19
	0x037C5040 LDP X9, X1, [X8 + 0x1A8]
	0x037C5044 BLR X9
	0x037C5048 MOV X19, X0
	0x037C504C ADRP X0, 0x956000
	0x037C5050 LDR X0, [X0 + 0xCD0]
	0x037C5054 BL 0x1C16D08
	0x037C5058 MOV X20, X0
	0x037C505C ADRP X0, 0x983000
	0x037C5060 LDR X0, [X0 + 0x1A8]
	0x037C5064 BL 0x1C16D08
	0x037C5068 MOV X2, X0
	0x037C506C MOV X0, X20
	0x037C5070 MOV X1, X19
	0x037C5074 MOV X3, X31
	0x037C5078 BL 0x32274B8
	0x037C507C MOV X19, X0
	0x037C5080 ADRP X0, 0x936000
	0x037C5084 LDR X0, [X0 + 0x578]
	0x037C5088 BL 0x1C16D08
	0x037C508C BL 0x1C16F10
	0x037C5090 MOV X20, X0
	0x037C5094 ADRP X0, 0x936000
	0x037C5098 LDR X0, [X0 + 0x5E8]
	0x037C509C BL 0x1C16D08
	0x037C50A0 MOV X2, X0
	0x037C50A4 MOV X0, X20
	0x037C50A8 MOV X1, X19
	0x037C50AC MOV X3, X31
	0x037C50B0 BL 0x330E16C
	0x037C50B4 ADRP X0, 0x983000
	0x037C50B8 LDR X0, [X0 + 0x248]
	0x037C50BC BL 0x1C16D08
	0x037C50C0 MOV X1, X0
	0x037C50C4 MOV X0, X20
	0x037C50C8 BL 0x1C16DEC
	0x037C50CC SUB X31, X31, 0x30
	0x037C50D0 STR X30, [X31 + 0x10]
	0x037C50D4 STP X20, X19, [X31 + 0x20]
	0x037C50D8 MOV X20, X0
	0x037C50DC ADD X0, X0, 0x18
	0x037C50E0 MOV X2, X31
	0x037C50E4 MOV X19, X1
	0x037C50E8 BL 0x3813D04
	0x037C50EC STP X0, X1, [X31]
	0x037C50F0 ADD X0, X31, 0x0
	0x037C50F4 MOV X1, X31
	0x037C50F8 BL 0x375F7A0
	0x037C50FC TBZ X0, 0x0, 0x37C5154
	0x037C5100 ADD X0, X31, 0x0
	0x037C5104 MOV X1, X31
	0x037C5108 BL 0x375F7A0
	0x037C510C TBZ X0, 0x0, 0x37C5154
	0x037C5110 CBZ X19, 0x37C5168
	0x037C5114 LDR X8, [X19]
	0x037C5118 MOV X0, X19
	0x037C511C LDP X9, X1, [X8 + 0x1A8]
	0x037C5120 BLR X9
	0x037C5124 MOV X1, X0
	0x037C5128 ADD X0, X31, 0x0
	0x037C512C MOV X2, X31
	0x037C5130 BL 0x3757420
	0x037C5134 LDR X8, [X19]
	0x037C5138 MOV X0, X19
	0x037C513C LDP X9, X1, [X8 + 0x1A8]
	0x037C5140 BLR X9
	0x037C5144 MOV X1, X0
	0x037C5148 MOV X0, X20
	0x037C514C MOV X2, X19
	0x037C5150 BL 0x37C2744
	0x037C5154 LDP X0, X1, [X31]
	0x037C5158 LDP X20, X19, [X31 + 0x20]
	0x037C515C LDR X30, [X31 + 0x10]
	0x037C5160 ADD X31, X31, 0x30
	0x037C5164 RET
	0x037C5168 BL 0x1C16F20
	0x037C516C SUB X31, X31, 0x50
	0x037C5170 STP X30, X23, [X31 + 0x20]
	0x037C5174 STP X22, X21, [X31 + 0x30]
	0x037C5178 STP X20, X19, [X31 + 0x40]
	0x037C517C ADRP X21, 0xC1C000
	0x037C5180 LDRB W8, [X21 + 0x1DC]
	0x037C5184 MOV X19, X2
	0x037C5188 MOV X20, X1
	0x037C518C MOV X22, X0
	0x037C5190 TBNZ X8, 0x0, 0x37C51B4
	0x037C5194 ADRP X0, 0x983000
	0x037C5198 LDR X0, [X0 + 0x48]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X2
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xC1E000
	009 Move X21, 0x930000
	010 Move W8, [X22+469]
	011 Move X21, [X21+1728]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x958000
	019 Move X0, [X0+3776]
	020 Call 0x1C17CF4
	021 Move X0, 0x930000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+469], W8
	026 Move X0, [X21]
	027 Move [X31], X31
	028 Move [X31+8], X31
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Type.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {83}
	041 Move X8, 0x958000
	042 Move X8, [X8+3776]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Add X0, X31, 24
	049 Move X1, X31
	050 Call InputDeviceMatcher.get_empty, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {95}
	055 Add X0, X19, 24
	056 Move X1, X20
	057 Move X2, X31
	058 Call Collection.TryFindLayoutForType, X0, X1
	059 Move [X31], X0
	060 Move [X31+8], X1
	061 Add X0, X31, 0
	062 Move X1, X31
	063 Call InternedString.IsEmpty, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {118}
	068 Move X0, [X31]
	069 Move X1, [X31+8]
	070 Move X2, X31
	071 Call InternedString.op_Implicit, X0
	072 Move X2, [X31+24]
	073 Move X1, X0
	074 Move X0, X19
	075 Call InputManager.RegisterControlLayoutMatcher, X0, X1, X2
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move X22, [X31+32]
	079 Move X21, [X31+40]
	080 Move X30, [X31+16]
	081 Add X31, X31, 64
	082 Return 
	083 Move X0, 0x934000
	084 Move X0, [X0+1320]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0x937000
	089 Move X0, [X0+1512]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ArgumentNullException..ctor, X0, X1
	095 Move X0, 0x937000
	096 Move X0, [X0+1400]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0x984000
	101 Move X0, [X0+320]
	102 Call 0x1C17D08
	103 Move X20, X0
	104 Move X0, 0x984000
	105 Move X0, [X0+328]
	106 Call 0x1C17D08
	107 Move X2, X0
	108 Move X0, X19
	109 Move X1, X20
	110 Move X3, X31
	111 Call ArgumentException..ctor, X0, X1, X2
	112 Move X0, 0x984000
	113 Move X0, [X0+416]
	114 Call 0x1C17D08
	115 Move X1, X0
	116 Move X0, X19
	117 Call 0x1C17DEC
	118 Move X0, X20
	119 Call 0x19913C0
	120 Move X8, [X20]
	121 Move X0, X20
	122 Move X9, [X8+424]
	123 Move X1, [X8+432]
	124 NotImplemented "Instruction BLR not yet implemented."
	125 Move X19, X0
	126 Move X0, 0x957000
	127 Move X0, [X0+3280]
	128 Call 0x1C17D08
	129 Move X20, X0
	130 Move X0, 0x984000
	131 Move X0, [X0+424]
	132 Call 0x1C17D08
	133 Move X2, X0
	134 Move X0, X20
	135 Move X1, X19
	136 Move X3, X31
	137 Call String.Concat, X0, X1, X2
	138 Move X19, X0
	139 Move X0, 0x937000
	140 Move X0, [X0+1400]
	141 Call 0x1C17D08
	142 Call 0x1C17F10
	143 Move X20, X0
	144 Move X0, 0x937000
	145 Move X0, [X0+1512]
	146 Call 0x1C17D08
	147 Move X2, X0
	148 Move X0, X20
	149 Move X1, X19
	150 Move X3, X31
	151 Call ArgumentException..ctor, X0, X1, X2
	152 Move X0, 0x984000
	153 Move X0, [X0+416]
	154 Call 0x1C17D08
	155 Move X1, X0
	156 Move X0, X20
	157 Call 0x1C17DEC

Method: System.Void RecreateDevicesUsingLayoutWithInferiorMatch(UnityEngine.InputSystem.Layouts.InputDeviceMatcher deviceMatcher)

Disassembly:
	0x037C49AC CBZ X0, 0x37C49C0
	0x037C49B0 MOVZ W1, 0x1
	0x037C49B4 MOV X0, X19
	0x037C49B8 MOV X2, X31
	0x037C49BC BL 0x377B2AC
	0x037C49C0 MOV X0, X19
	0x037C49C4 MOV X1, X31
	0x037C49C8 BL 0x377AA28
	0x037C49CC TBZ X0, 0x0, 0x37C49F8
	0x037C49D0 LDR W9, [X20 + 0xA8]
	0x037C49D4 ORR W8, W9, 0x4
	0x037C49D8 CMP W9, W8
	0x037C49DC B.EQ 0x37C49F8
	0x037C49E0 LDR W9, [X20 + 0x70]
	0x037C49E4 STR W8, [X20 + 0xA8]
	0x037C49E8 CMP W9, 0x1
	0x037C49EC B.LT 0x37C49F8
	0x037C49F0 MOV X0, X20
	0x037C49F4 BL 0x37C1C54
	0x037C49F8 MOV X0, X19
	0x037C49FC MOV X1, X31
	0x037C4A00 BL 0x377B5A0
	0x037C4A04 LDR X8, [X19]
	0x037C4A08 MOV X0, X19
	0x037C4A0C LDR X9, [X8 + 0x248]
	0x037C4A10 LDR X1, [X8 + 0x250]
	0x037C4A14 BLR X9
	0x037C4A18 ADRP X8, 0x983000
	0x037C4A1C ADRP X9, 0x983000
	0x037C4A20 LDR X8, [X8 + 0xD40]
	0x037C4A24 LDR X9, [X9 + 0xD28]
	0x037C4A28 ADD X0, X20, 0xE0
	0x037C4A2C MOV X1, X19
	0x037C4A30 LDR X3, [X8]
	0x037C4A34 LDR X5, [X9]
	0x037C4A38 MOV W2, W31
	0x037C4A3C MOV X4, X31
	0x037C4A40 BL 0x21AE04C
	0x037C4A44 MOV X0, X19
	0x037C4A48 MOV X1, X31
	0x037C4A4C BL 0x377A8A4
	0x037C4A50 TBZ X0, 0x0, 0x37C4A60
	0x037C4A54 MOV X0, X19
	0x037C4A58 MOV X1, X31
	0x037C4A5C BL 0x376EE10
	0x037C4A60 MOV X0, X19
	0x037C4A64 LDP X20, X19, [X31 + 0x20]
	0x037C4A68 LDP X22, X21, [X31 + 0x10]
	0x037C4A6C MOV X1, X31
	0x037C4A70 LDR X30, [X31], #0x30
	0x037C4A74 B 0x377F584
	0x037C4A78 BL 0x1C16F28
	0x037C4A7C ADRP X0, 0x934000
	0x037C4A80 LDR X0, [X0 + 0x528]
	0x037C4A84 BL 0x1C16D08
	0x037C4A88 BL 0x1C16F10
	0x037C4A8C MOV X19, X0
	0x037C4A90 ADRP X0, 0x957000
	0x037C4A94 LDR X0, [X0 + 0xD20]
	0x037C4A98 BL 0x1C16D08
	0x037C4A9C MOV X1, X0
	0x037C4AA0 MOV X0, X19
	0x037C4AA4 MOV X2, X31
	0x037C4AA8 BL 0x330E100
	0x037C4AAC B 0x37C4AE0
	0x037C4AB0 ADRP X0, 0x92F000
	0x037C4AB4 LDR X0, [X0 + 0x5B0]
	0x037C4AB8 BL 0x1C16D08
	0x037C4ABC BL 0x1C16F10
	0x037C4AC0 MOV X19, X0
	0x037C4AC4 ADRP X0, 0x984000
	0x037C4AC8 LDR X0, [X0 + 0x210]
	0x037C4ACC BL 0x1C16D08
	0x037C4AD0 MOV X1, X0
	0x037C4AD4 MOV X0, X19
	0x037C4AD8 MOV X2, X31
	0x037C4ADC BL 0x337DF1C
	0x037C4AE0 ADRP X0, 0x984000
	0x037C4AE4 LDR X0, [X0 + 0x218]
	0x037C4AE8 BL 0x1C16D08
	0x037C4AEC MOV X1, X0
	0x037C4AF0 MOV X0, X19
	0x037C4AF4 BL 0x1C16DEC
	0x037C4AF8 BL 0x1C16F20
	0x037C4AFC SUB X31, X31, 0xF0
	0x037C4B00 STP X29, X30, [X31 + 0x90]
	0x037C4B04 STP X28, X27, [X31 + 0xA0]
	0x037C4B08 STP X26, X25, [X31 + 0xB0]
	0x037C4B0C STP X24, X23, [X31 + 0xC0]
	0x037C4B10 STP X22, X21, [X31 + 0xD0]
	0x037C4B14 STP X20, X19, [X31 + 0xE0]
	0x037C4B18 ADRP X29, 0xC1D000
	0x037C4B1C ADRP X28, 0x983000
	0x037C4B20 LDRB W8, [X29 + 0x1E4]
	0x037C4B24 LDP X25, X24, [X31 + 0xF0]
	0x037C4B28 LDR X28, [X28 + 0xDB8]
	0x037C4B2C MOV W22, W6
	0x037C4B30 MOV X19, X5
	0x037C4B34 MOV X21, X4
	0x037C4B38 MOV W23, W3
	0x037C4B3C MOV X26, X2
	0x037C4B40 MOV X27, X1
	0x037C4B44 MOV X20, X0
	0x037C4B48 TBNZ X8, 0x0, 0x37C4B60
	0x037C4B4C ADRP X0, 0x983000
	0x037C4B50 LDR X0, [X0 + 0xDB8]
	0x037C4B54 BL 0x1C16CF4
	0x037C4B58 MOVZ W8, 0x1
	0x037C4B5C STRB W8, [X29 + 0x1E4]
	0x037C4B60 MOV X0, X27
	0x037C4B64 MOV X1, X26
	0x037C4B68 MOV X2, X31
	0x037C4B6C BL 0x37577E0
	0x037C4B70 MOV X1, X0
	0x037C4B74 ADD X0, X31, 0x0
	0x037C4B78 MOV X2, X31
	0x037C4B7C STP X31, X31, [X31]
	0x037C4B80 BL 0x3757420
	0x037C4B84 LDP X0, X1, [X31]
	0x037C4B88 MOV X2, X31
	0x037C4B8C BL 0x37577E0
	0x037C4B90 LDR X8, [X19 + 0x30]
	0x037C4B94 LDP V2, V0, [X19 + 0x10]
	0x037C4B98 LDR V1, [X19]
	0x037C4B9C MOV X26, X0
	0x037C4BA0 MOV X0, X25
	0x037C4BA4 MOV X1, X24
	0x037C4BA8 MOV X2, X31
	0x037C4BAC STR X8, [X31 + 0x40]
	0x037C4BB0 STP V2, V0, [X31 + 0x20]
	0x037C4BB4 STR V1, [X31 + 0x1]
	0x037C4BB8 BL 0x37577E0
	0x037C4BBC LDR X4, [X28]
	0x037C4BC0 LDP V0, V1, [X31 + 0x10]
	0x037C4BC4 LDR V2, [X31 + 0x3]
	0x037C4BC8 LDR X8, [X31 + 0x40]
	0x037C4BCC MOV X1, X0
	0x037C4BD0 ADD X2, X31, 0x50
	0x037C4BD4 MOV X0, X26
	0x037C4BD8 MOV W3, W31
	0x037C4BDC STP V0, V1, [X31 + 0x50]
	0x037C4BE0 STR V2, [X31 + 0x7]
	0x037C4BE4 STR X8, [X31 + 0x80]

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+192], X29
	003 Move [X31+200], X1
	004 Move [X31+208], X30
	005 Move [X31+216], X25
	006 Move [X31+224], X24
	007 Move [X31+232], X23
	008 Move [X31+240], X22
	009 Move [X31+248], X21
	010 Move [X31+256], X20
	011 Move [X31+264], X19
	012 Move X20, 0xC1E000
	013 Move W8, [X20+470]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x958000
	020 Move X0, [X0+3776]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+470], W8
	024 NotImplemented "Instruction MOVI not yet implemented."
	025 Move [X31+176], X31
	026 Move [X31+144], V0
	027 Move [X31+152], V0
	028 Move [X31+8], V0
	029 Move W8, [X19+112]
	030 Compare W8, 0
	031 JumpIfEqual {125}
	032 Move X0, X31
	033 Call InputDeviceBuilder.Ref
	034 Move [X31+184], W0
	035 Move W23, [X19+112]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X25, 0x958000
	038 Move X25, [X25+3776]
	039 Move W24, W31
	040 Move X8, [X19+120]
	041 Compare X8, 0
	042 JumpIfEqual {137}
	043 Move W9, [X8+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X8, X8, W24
	046 Move X20, [X8+32]
	047 Compare X20, 0
	048 JumpIfEqual {138}
	049 Move X8, [X20+288]
	050 Move V1, [X20+256]
	051 Move V0, [X20+272]
	052 Move V2, [X20+15]
	053 Move [X31+176], X8
	054 Move [X31+144], V1
	055 Move [X31+152], V0
	056 Move [X31+8], V2
	057 Add X0, X31, 128
	058 Move X1, X31
	059 Call InputDeviceDescription.get_empty, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {120}
	064 Move V0, [X31+128]
	065 Move V1, [X31+144]
	066 Move V2, [X31+10]
	067 Move X8, [X31+176]
	068 Move X0, [X25]
	069 Move [X31+64], V0
	070 Move [X31+72], V1
	071 Move [X31+6], V2
	072 Move [X31+112], X8
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move V0, [X31+64]
	078 Move V1, [X31+80]
	079 Move V2, [X31+6]
	080 Move X8, [X31+112]
	081 Move [X31], V0
	082 Move [X31+8], V1
	083 Move [X31+2], V2
	084 Move [X31+48], X8
	085 Add X0, X31, 200
	086 Add X1, X31, 0
	087 Move X2, X31
	088 Call InputDeviceMatcher.MatchPercentage, X0, X1
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 Move W2, [X20+224]
	091 Add X1, X31, 128
	092 Move X0, X19
	093 Call InputManager.TryFindMatchingControlLayout, X0, X1, X2
	094 Move X2, [X20+88]
	095 Move X3, [X20+96]
	096 Move X21, X0
	097 Move X22, X1
	098 Move X4, X31
	099 Call InternedString.op_Inequality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {120}
	104 Move V2, [X31+144]
	105 Move V0, [X31+160]
	106 Move X8, [X31+176]
	107 Move V1, [X31+8]
	108 Add X9, X20, 240
	109 Move [X9+16], V2
	110 Move [X9+24], V0
	111 Move [X9+48], X8
	112 Move [X9], V1
	113 Move X0, X19
	114 Move X1, X20
	115 Move X2, X21
	116 Move X3, X22
	117 Call InputManager.RecreateDevice, X0, X1, X2
	118 Subtract W24, W24, 1
	119 Subtract W23, W23, 1
	120 Add W24, W24, 1
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Add X0, X31, 184
	123 Move X1, X31
	124 Call RefInstance.Dispose, X0
	125 Move X20, [X31+256]
	126 Move X19, [X31+264]
	127 Move X22, [X31+240]
	128 Move X21, [X31+248]
	129 Move X24, [X31+224]
	130 Move X23, [X31+232]
	131 Move X30, [X31+208]
	132 Move X25, [X31+216]
	133 Move X29, [X31+192]
	134 Add X31, X31, 272
	135 Return 
	136 Call 0x1C17F28
	137 Call 0x1C17F20
	138 Call 0x1C17F20
	139 Move X19, X0
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X0, X19
	142 Call 0x3EB2AD0
	143 Move X20, [X0]
	144 Call 0x3EB2AE0
	145 Add X0, X31, 184
	146 Move X1, X31
	147 Call RefInstance.Dispose, X0
	148 Compare X20, 0
	149 JumpIfEqual {125}
	150 Move X0, X20
	151 Call 0x1C17F18
	152 Move X20, X31
	153 Move X19, X0
	154 Add X0, X31, 184
	155 Move X1, X31
	156 Call RefInstance.Dispose, X0
	157 Compare X20, 0
	158 JumpIfNotEqual {161}
	159 Move X0, X19
	160 Call 0x1D2D690
	161 Move X0, X20
	162 Call 0x1C17F18
	163 Call 0x1991590

Method: System.Void RecreateDevice(UnityEngine.InputSystem.InputDevice oldDevice, UnityEngine.InputSystem.Utilities.InternedString newLayout)

Disassembly:
	0x037C485C MOV X0, X19
	0x037C4860 MOV X1, X31
	0x037C4864 BL 0x377A8C0
	0x037C4868 TBZ X0, 0x0, 0x37C4890
	0x037C486C MOV X0, X20
	0x037C4870 MOV X1, X19
	0x037C4874 BL 0x37C5BB0
	0x037C4878 TBNZ X0, 0x0, 0x37C4890
	0x037C487C MOVZ W3, 0x2
	0x037C4880 MOV X0, X20
	0x037C4884 MOV X1, X19
	0x037C4888 MOV W2, W31
	0x037C488C BL 0x37C5BEC
	0x037C4890 MOV X0, X19
	0x037C4894 MOV W1, W31
	0x037C4898 MOV X2, X31
	0x037C489C BL 0x3751064
	0x037C48A0 ADRP X22, 0x983000
	0x037C48A4 LDR X22, [X22 + 0xD38]
	0x037C48A8 MOV X0, X19
	0x037C48AC LDR X1, [X22]
	0x037C48B0 BL 0x1C16E00
	0x037C48B4 CBZ X0, 0x37C493C
	0x037C48B8 ADRP X8, 0x930000
	0x037C48BC LDR X8, [X8 + 0xE70]
	0x037C48C0 MOV X21, X0
	0x037C48C4 LDR X0, [X8]
	0x037C48C8 BL 0x1C16F10
	0x037C48CC LDR X8, [X21]
	0x037C48D0 LDR X1, [X22]
	0x037C48D4 MOV X22, X0
	0x037C48D8 LDRH W9, [X8 + 0x12E]
	0x037C48DC CBZ X9, 0x37C4900
	0x037C48E0 LDR X10, [X8 + 0xB0]
	0x037C48E4 ADD X10, X10, 0x8
	0x037C48E8 LDUR X11, [X10 - 0x8]
	0x037C48EC CMP X11, X1
	0x037C48F0 B.EQ 0x37C4910
	0x037C48F4 SUBS X9, X9, 0x1
	0x037C48F8 ADD X10, X10, 0x10
	0x037C48FC B.NE 0x37C48E8
	0x037C4900 MOV X0, X21
	0x037C4904 MOV W2, W31
	0x037C4908 BL 0x1C5C788
	0x037C490C B 0x37C491C
	0x037C4910 LDRSW X9, [X10]
	0x037C4914 ADD X8, X8, X9, 0x4, LSL
	0x037C4918 ADD X0, X8, 0x138
	0x037C491C LDR X2, [X0 + 0x8]
	0x037C4920 MOV X0, X22
	0x037C4924 MOV X1, X21
	0x037C4928 MOV X3, X31
	0x037C492C BL 0x3314368
	0x037C4930 MOV X0, X20
	0x037C4934 MOV X1, X22
	0x037C4938 BL 0x37C23C8
	0x037C493C ADRP X8, 0x982000
	0x037C4940 LDR X8, [X8 + 0xC68]
	0x037C4944 MOV X0, X19
	0x037C4948 LDR X1, [X8]
	0x037C494C BL 0x1C16E00
	0x037C4950 CBZ X0, 0x37C4970
	0x037C4954 MOV X0, X20
	0x037C4958 BL 0x37C2428
	0x037C495C LDR W8, [X19 + 0xDC]
	0x037C4960 MOVZ W9, 0x1
	0x037C4964 ORR W8, W8, 0x2
	0x037C4968 STR W8, [X19 + 0xDC]
	0x037C496C STRB W9, [X20 + 0x3B1]
	0x037C4970 ADRP X8, 0x984000
	0x037C4974 LDR X8, [X8 + 0x200]
	0x037C4978 MOV X0, X19
	0x037C497C LDR X1, [X8]
	0x037C4980 BL 0x1C16E00
	0x037C4984 CBZ X0, 0x37C4998
	0x037C4988 MOVZ W1, 0x1
	0x037C498C MOV X0, X19
	0x037C4990 MOV X2, X31
	0x037C4994 BL 0x377B280
	0x037C4998 ADRP X8, 0x984000
	0x037C499C LDR X8, [X8 + 0x208]
	0x037C49A0 MOV X0, X19
	0x037C49A4 LDR X1, [X8]
	0x037C49A8 BL 0x1C16E00

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X23, 0xC1E000
	009 Move W8, [X23+471]
	010 Move X21, X3
	011 Move X22, X2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x984000
	019 Move X0, [X0+3512]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+471], W8
	023 Move W2, 1
	024 Move X0, X19
	025 Move X1, X20
	026 Call InputManager.RemoveDevice, X0, X1, X2
	027 Move X0, X22
	028 Move X1, X21
	029 Move X2, X31
	030 Call InternedString.op_Implicit, X0
	031 Compare X20, 0
	032 JumpIfEqual {109}
	033 Move X21, X0
	034 Move X0, [X20+104]
	035 Move X1, [X20+112]
	036 Move X22, 0x984000
	037 Move X22, [X22+3512]
	038 Move X2, X31
	039 Call InternedString.op_Implicit, X0
	040 Move V2, [X20+256]
	041 Move V0, [X20+272]
	042 Move X8, [X20+288]
	043 Move V1, [X20+15]
	044 Move X4, [X22]
	045 Move X1, X0
	046 Add X2, X31, 0
	047 Move X0, X21
	048 Move W3, W31
	049 Move [X31+48], X8
	050 Move [X31+16], V2
	051 Move [X31+24], V0
	052 Move [X31], V1
	053 Call 0x2204D94, X0, X1, X2, X3
	054 Compare X0, 0
	055 JumpIfEqual {109}
	056 Move W8, [X20+224]
	057 Add X9, X20, 240
	058 Move X21, X0
	059 Move X1, X31
	060 Move [X0+224], W8
	061 Move X8, [X9+48]
	062 Move V1, [X9+16]
	063 Move V0, [X9+32]
	064 Move V2, [X9]
	065 Move [X0+288], X8
	066 Move [X0+256], V1
	067 Move [X0+264], V0
	068 Move [X0+15], V2
	069 Move X0, X20
	070 Call InputDevice.get_native, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {78}
	075 Move W8, [X21+220]
	076 Or W8, W8, 16
	077 Move [X21+220], W8
	078 Move X0, X20
	079 Move X1, X31
	080 Call InputDevice.get_remote, X0
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {88}
	085 Move W8, [X21+220]
	086 Or W8, W8, 8
	087 Move [X21+220], W8
	088 Move X0, X20
	089 Move X1, X31
	090 Call InputDevice.get_enabled, X0
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {98}
	095 Move W8, [X21+220]
	096 Or W8, W8, 96
	097 Move [X21+220], W8
	098 Move X0, X19
	099 Move X1, X21
	100 Call InputManager.AddDevice, X0, X1
	101 Move X20, [X31+96]
	102 Move X19, [X31+104]
	103 Move X22, [X31+80]
	104 Move X21, [X31+88]
	105 Move X30, [X31+64]
	106 Move X23, [X31+72]
	107 Add X31, X31, 112
	108 Return 
	109 Call 0x1C17F20

Method: System.Void AddAvailableDevicesMatchingDescription(UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher, UnityEngine.InputSystem.Utilities.InternedString layout)

Disassembly:
	0x037C4BE8 BL 0x2203D94
	0x037C4BEC CBZ X0, 0x37C4C90
	0x037C4BF0 STR W23, [X0 + 0xE0]
	0x037C4BF4 LDR W8, [X0 + 0xDC]
	0x037C4BF8 LDP V2, V0, [X19 + 0x10]
	0x037C4BFC LDR X9, [X19 + 0x30]
	0x037C4C00 LDR V1, [X19]
	0x037C4C04 ORR W8, W8, W22, 0x0
	0x037C4C08 MOV X24, X0
	0x037C4C0C STR X9, [X0 + 0x120]
	0x037C4C10 STP V2, V0, [X0 + 0x100]
	0x037C4C14 STR V1, [X0 + 0xF]
	0x037C4C18 STR W8, [X0 + 0xDC]
	0x037C4C1C MOV X0, X21
	0x037C4C20 MOV X1, X31
	0x037C4C24 BL 0x32277A8
	0x037C4C28 TBNZ X0, 0x0, 0x37C4C48
	0x037C4C2C ADD X0, X31, 0x50
	0x037C4C30 MOV X1, X21
	0x037C4C34 MOV X2, X31
	0x037C4C38 STP X31, X31, [X31 + 0x50]
	0x037C4C3C BL 0x3757420
	0x037C4C40 LDR V0, [X31 + 0x5]
	0x037C4C44 STR V0, [X24 + 0x2]
	0x037C4C48 LDR X0, [X19 + 0x18]
	0x037C4C4C MOV X1, X31
	0x037C4C50 BL 0x32277A8
	0x037C4C54 TBNZ X0, 0x0, 0x37C4C60
	0x037C4C58 LDR X8, [X19 + 0x18]
	0x037C4C5C STR X8, [X24 + 0x38]
	0x037C4C60 MOV X0, X20
	0x037C4C64 MOV X1, X24
	0x037C4C68 BL 0x37C45C8
	0x037C4C6C MOV X0, X24
	0x037C4C70 LDP X20, X19, [X31 + 0xE0]
	0x037C4C74 LDP X22, X21, [X31 + 0xD0]
	0x037C4C78 LDP X24, X23, [X31 + 0xC0]
	0x037C4C7C LDP X26, X25, [X31 + 0xB0]
	0x037C4C80 LDP X28, X27, [X31 + 0xA0]
	0x037C4C84 LDP X29, X30, [X31 + 0x90]
	0x037C4C88 ADD X31, X31, 0xF0
	0x037C4C8C RET
	0x037C4C90 BL 0x1C16F20
	0x037C4C94 SUB X31, X31, 0x40
	0x037C4C98 STR X30, [X31 + 0x10]
	0x037C4C9C STP X22, X21, [X31 + 0x20]
	0x037C4CA0 STP X20, X19, [X31 + 0x30]
	0x037C4CA4 ADRP X21, 0xC1D000
	0x037C4CA8 LDRB W8, [X21 + 0x1D9]
	0x037C4CAC MOV X19, X1
	0x037C4CB0 MOV X20, X0
	0x037C4CB4 TBNZ X8, 0x0, 0x37C4D08
	0x037C4CB8 ADRP X0, 0x984000
	0x037C4CBC LDR X0, [X0 + 0x108]
	0x037C4CC0 BL 0x1C16CF4
	0x037C4CC4 ADRP X0, 0x984000
	0x037C4CC8 LDR X0, [X0 + 0x220]
	0x037C4CCC BL 0x1C16CF4
	0x037C4CD0 ADRP X0, 0x984000
	0x037C4CD4 LDR X0, [X0 + 0x228]
	0x037C4CD8 BL 0x1C16CF4
	0x037C4CDC ADRP X0, 0x984000
	0x037C4CE0 LDR X0, [X0 + 0x230]
	0x037C4CE4 BL 0x1C16CF4
	0x037C4CE8 ADRP X0, 0x984000
	0x037C4CEC LDR X0, [X0 + 0x238]
	0x037C4CF0 BL 0x1C16CF4
	0x037C4CF4 ADRP X0, 0x984000
	0x037C4CF8 LDR X0, [X0 + 0x128]
	0x037C4CFC BL 0x1C16CF4
	0x037C4D00 MOVZ W8, 0x1
	0x037C4D04 STRB W8, [X21 + 0x1D9]
	0x037C4D08 MOV X0, X19
	0x037C4D0C MOV X1, X31
	0x037C4D10 STP X31, X31, [X31]
	0x037C4D14 BL 0x32277A8
	0x037C4D18 TBNZ X0, 0x0, 0x37C4E5C
	0x037C4D1C ADD X0, X31, 0x0
	0x037C4D20 MOV X1, X19
	0x037C4D24 MOV X2, X31
	0x037C4D28 BL 0x3757420
	0x037C4D2C LDR W8, [X20 + 0x70]
	0x037C4D30 CMP W8, 0x0
	0x037C4D34 B.LE 0x37C4D98
	0x037C4D38 MOV X22, X31
	0x037C4D3C LDR X8, [X20 + 0x78]
	0x037C4D40 CBZ X8, 0x37C4E54
	0x037C4D44 LDR W9, [X8 + 0x18]
	0x037C4D48 CMP X22, X9
	0x037C4D4C B.CS 0x37C4E58
	0x037C4D50 ADD X8, X8, X22, 0x3, LSL
	0x037C4D54 LDR X21, [X8 + 0x20]
	0x037C4D58 LDP X2, X3, [X31]
	0x037C4D5C MOV X0, X20
	0x037C4D60 MOV X1, X21
	0x037C4D64 BL 0x37C3768
	0x037C4D68 TBZ X0, 0x0, 0x37C4D8C
	0x037C4D6C MOVZ W2, 0x1
	0x037C4D70 MOV X0, X20
	0x037C4D74 MOV X1, X21
	0x037C4D78 BL 0x37BC210
	0x037C4D7C LDRSW X8, [X20 + 0x70]
	0x037C4D80 CMP X22, X8
	0x037C4D84 B.LT 0x37C4D3C
	0x037C4D88 B 0x37C4D98
	0x037C4D8C LDRSW X8, [X20 + 0x70]
	0x037C4D90 ADD X22, X22, 0x1
	0x037C4D94 B 0x37C4D80
	0x037C4D98 LDR X0, [X20 + 0x18]
	0x037C4D9C CBZ X0, 0x37C4E54
	0x037C4DA0 ADRP X8, 0x984000
	0x037C4DA4 LDR X8, [X8 + 0x230]
	0x037C4DA8 LDP X1, X2, [X31]
	0x037C4DAC LDR X3, [X8]
	0x037C4DB0 BL 0x2A5BB5C
	0x037C4DB4 LDR X0, [X20 + 0x20]
	0x037C4DB8 CBZ X0, 0x37C4E54
	0x037C4DBC ADRP X8, 0x984000
	0x037C4DC0 LDR X8, [X8 + 0x228]
	0x037C4DC4 LDP X1, X2, [X31]
	0x037C4DC8 LDR X3, [X8]
	0x037C4DCC BL 0x2A5BB5C
	0x037C4DD0 LDR X0, [X20 + 0x28]
	0x037C4DD4 CBZ X0, 0x37C4E54
	0x037C4DD8 ADRP X8, 0x984000
	0x037C4DDC LDR X8, [X8 + 0x238]
	0x037C4DE0 LDP X1, X2, [X31]
	0x037C4DE4 LDR X3, [X8]
	0x037C4DE8 BL 0x2A5BB5C
	0x037C4DEC LDR X0, [X20 + 0x30]
	0x037C4DF0 CBZ X0, 0x37C4E54
	0x037C4DF4 ADRP X8, 0x984000
	0x037C4DF8 LDR X8, [X8 + 0x220]
	0x037C4DFC LDP X1, X2, [X31]
	0x037C4E00 ADRP X21, 0x984000
	0x037C4E04 ADRP X22, 0x984000
	0x037C4E08 LDR X3, [X8]
	0x037C4E0C LDR X21, [X21 + 0x128]
	0x037C4E10 LDR X22, [X22 + 0x108]
	0x037C4E14 BL 0x2A58A54
	0x037C4E18 LDR W8, [X20 + 0x10]
	0x037C4E1C ADD X0, X20, 0x220
	0x037C4E20 MOVZ W2, 0x1
	0x037C4E24 MOV X1, X19
	0x037C4E28 ADD W8, W8, 0x1
	0x037C4E2C STR W8, [X20 + 0x10]
	0x037C4E30 LDR X3, [X21]
	0x037C4E34 LDR X5, [X22]
	0x037C4E38 MOV X4, X31
	0x037C4E3C BL 0x21AE04C
	0x037C4E40 LDP X20, X19, [X31 + 0x30]
	0x037C4E44 LDP X22, X21, [X31 + 0x20]
	0x037C4E48 LDR X30, [X31 + 0x10]
	0x037C4E4C ADD X31, X31, 0x40
	0x037C4E50 RET
	0x037C4E54 BL 0x1C16F20
	0x037C4E58 BL 0x1C16F28
	0x037C4E5C ADRP X0, 0x934000
	0x037C4E60 LDR X0, [X0 + 0x528]
	0x037C4E64 BL 0x1C16D08
	0x037C4E68 BL 0x1C16F10
	0x037C4E6C MOV X19, X0
	0x037C4E70 ADRP X0, 0x937000
	0x037C4E74 LDR X0, [X0 + 0x588]
	0x037C4E78 BL 0x1C16D08
	0x037C4E7C MOV X1, X0
	0x037C4E80 MOV X0, X19
	0x037C4E84 MOV X2, X31
	0x037C4E88 BL 0x330E100
	0x037C4E8C ADRP X0, 0x984000
	0x037C4E90 LDR X0, [X0 + 0x240]
	0x037C4E94 BL 0x1C16D08
	0x037C4E98 MOV X1, X0
	0x037C4E9C MOV X0, X19
	0x037C4EA0 BL 0x1C16DEC
	0x037C4EA4 SUB X31, X31, 0x40
	0x037C4EA8 STR X30, [X31 + 0x10]
	0x037C4EAC STP X22, X21, [X31 + 0x20]
	0x037C4EB0 STP X20, X19, [X31 + 0x30]
	0x037C4EB4 ADRP X22, 0xC1D000
	0x037C4EB8 ADRP X21, 0x92F000
	0x037C4EBC LDRB W8, [X22 + 0x1DA]
	0x037C4EC0 LDR X21, [X21 + 0x6C0]
	0x037C4EC4 MOV X19, X1
	0x037C4EC8 MOV X20, X0
	0x037C4ECC TBNZ X8, 0x0, 0x37C4EF0
	0x037C4ED0 ADRP X0, 0x981000
	0x037C4ED4 LDR X0, [X0 + 0x6A0]
	0x037C4ED8 BL 0x1C16CF4
	0x037C4EDC ADRP X0, 0x92F000
	0x037C4EE0 LDR X0, [X0 + 0x6C0]
	0x037C4EE4 BL 0x1C16CF4
	0x037C4EE8 MOVZ W8, 0x1
	0x037C4EEC STRB W8, [X22 + 0x1DA]
	0x037C4EF0 LDR X0, [X21]
	0x037C4EF4 STP X31, X31, [X31]
	0x037C4EF8 LDR W8, [X0 + 0xE0]
	0x037C4EFC CBNZ W8, 0x37C4F04
	0x037C4F00 BL 0x1C16DFC
	0x037C4F04 MOV X0, X19
	0x037C4F08 MOV X1, X31
	0x037C4F0C MOV X2, X31
	0x037C4F10 BL 0x3395194
	0x037C4F14 TBNZ X0, 0x0, 0x37C4FAC
	0x037C4F18 ADRP X8, 0x981000
	0x037C4F1C LDR X0, [X21]
	0x037C4F20 LDR X8, [X8 + 0x6A0]
	0x037C4F24 LDR W9, [X0 + 0xE0]
	0x037C4F28 LDR X21, [X8]
	0x037C4F2C CBNZ W9, 0x37C4F34
	0x037C4F30 BL 0x1C16DFC
	0x037C4F34 MOV X0, X21
	0x037C4F38 MOV X1, X31
	0x037C4F3C BL 0x338C698
	0x037C4F40 CBZ X0, 0x37C4FF4
	0x037C4F44 LDR X8, [X0]
	0x037C4F48 MOV X1, X19
	0x037C4F4C LDR X9, [X8 + 0x2A8]
	0x037C4F50 LDR X2, [X8 + 0x2B0]
	0x037C4F54 BLR X9
	0x037C4F58 TBZ X0, 0x0, 0x37C4FF8
	0x037C4F5C ADD X20, X20, 0x18
	0x037C4F60 MOV X0, X20
	0x037C4F64 MOV X1, X19
	0x037C4F68 MOV X2, X31
	0x037C4F6C BL 0x3813D04
	0x037C4F70 STP X0, X1, [X31]
	0x037C4F74 ADD X0, X31, 0x0
	0x037C4F78 MOV X1, X31
	0x037C4F7C BL 0x375F7A0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 464
	014 Move X22, 0xC1E000
	015 Move W8, [X22+472]
	016 Move X19, X3
	017 Move X20, X2
	018 Move X21, X0
	019 Move [X31+456], X1
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x958000
	025 Move X0, [X0+3776]
	026 Call 0x1C17CF4
	027 Move X0, 0x985000
	028 Move X0, [X0+400]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+472], W8
	032 Move [X31+448], X31
	033 Move W8, [X21+136]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X22, 0x958000
	036 Move X23, 0x985000
	037 Move X24, 0x95B000
	038 Move X25, 0x985000
	039 Move X26, 0x930000
	040 Move X22, [X22+3776]
	041 Move X23, [X23+400]
	042 Move X24, [X24+1264]
	043 Move X25, [X25+408]
	044 Move X26, [X26+2600]
	045 Move X29, X31
	046 Move X28, X31
	047 Move X8, [X21+144]
	048 Compare X8, 0
	049 JumpIfEqual {245}
	050 Move W9, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X8, X29
	053 Move W9, [X8+93]
	054 Compare W9, 0
	055 JumpIfNotEqual {160}
	056 Move W27, [X8+88]
	057 Move X0, X21
	058 Move W1, W27
	059 Call InputManager.TryGetDeviceById, X0, X1
	060 Compare X0, 0
	061 JumpIfNotEqual {160}
	062 Move X8, [X21+144]
	063 Compare X8, 0
	064 JumpIfEqual {245}
	065 Move W9, [X8+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X8, X8, X29
	068 Move V2, [X8+48]
	069 Move V0, [X8+64]
	070 Move X9, [X8+80]
	071 Move V1, [X8+2]
	072 Move X0, [X22]
	073 Move [X31+208], V2
	074 Move [X31+216], V0
	075 Move [X31+240], X9
	076 Move [X31+12], V1
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move V0, [X31+192]
	082 Move V1, [X31+208]
	083 Move V2, [X31+14]
	084 Move X8, [X31+240]
	085 Add X0, X31, 456
	086 Add X1, X31, 128
	087 Move X2, X31
	088 Move [X31+128], V0
	089 Move [X31+136], V1
	090 Move [X31+10], V2
	091 Move [X31+176], X8
	092 Call InputDeviceMatcher.MatchPercentage, X0, X1
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 Move X8, [X21+144]
	095 Compare X8, 0
	096 JumpIfEqual {164}
	097 Move W9, [X8+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add X8, X8, X29
	100 Move X9, [X8+80]
	101 Move V1, [X8+48]
	102 Move V0, [X8+64]
	103 Move V2, [X8+2]
	104 Move [X31+240], X9
	105 Move [X31+208], V1
	106 Move [X31+216], V0
	107 Move [X31+12], V2
	108 Move W8, [X8+92]
	109 Compare W8, 0
	110 JumpIfEqual {121}
	111 Move V0, [X31+192]
	112 Move V1, [X31+208]
	113 Move V2, [X31+14]
	114 Move X9, [X31+240]
	115 Add X8, X31, 384
	116 Move W6, 16
	117 Move [X31+384], V0
	118 Move [X31+392], V1
	119 Move [X31+26], V2
	120 Move [X31+432], X9
	121 Move V0, [X31+192]
	122 Move V1, [X31+208]
	123 Move V2, [X31+14]
	124 Move X9, [X31+240]
	125 Move W6, W31
	126 Add X8, X31, 320
	127 Move [X31+320], V0
	128 Move [X31+328], V1
	129 Move [X31+22], V2
	130 Move [X31+368], X9
	131 Move X9, [X8+48]
	132 Move V1, [X8+16]
	133 Move V0, [X8+32]
	134 Move V2, [X8]
	135 Move [X31+304], X9
	136 Move [X31+272], V1
	137 Move [X31+280], V0
	138 Move [X31+16], V2
	139 Move [X31+64], V2
	140 Move [X31+72], V1
	141 Move [X31+6], V0
	142 Move [X31+112], X9
	143 Add X5, X31, 64
	144 Move X0, X21
	145 Move X1, X20
	146 Move X2, X19
	147 Move W3, W27
	148 Move X4, X31
	149 Move [X31], X31
	150 Move [X31+8], X31
	151 Call InputManager.AddDevice, X0, X1, X2, X3, X4, X5, X6
	152 Move X0, X31
	153 Call EnableDeviceCommand.Create
	154 Move [X31+448], X0
	155 Move X0, [X21+1088]
	156 Move X3, [X23]
	157 Add X2, X31, 448
	158 Move W1, W27
	159 Call InputRuntimeExtensions.DeviceCommand, X0, X1, X2
	160 NotImplemented "Instruction LDRSW not yet implemented."
	161 Add X28, X28, 1
	162 Add X29, X29, 64
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Call 0x1C17F20
	165 Call 0x1C17F28
	166 Move X27, X0
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move X0, X27
	169 Call 0x3EB2AD0
	170 Move X27, X0
	171 Move X0, 0x930000
	172 Move X0, [X0+2000]
	173 Call 0x1C17D08
	174 Move X8, [X27]
	175 Move X1, [X8]
	176 Call 0x1C18270
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {247}
	181 Move X8, [X27]
	182 Move [X31+40], X8
	183 Call 0x3EB2AE0
	184 Move [X31+48], X20
	185 Move [X31+56], X19
	186 Move X0, 0x95B000
	187 Move X0, [X0+1296]
	188 Call 0x1C17D08
	189 Add X1, X31, 48
	190 Call 0x1C17E04
	191 Move X8, [X21+144]
	192 Compare X8, 0
	193 JumpIfEqual {245}
	194 Move W9, [X8+24]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Add X8, X8, X29
	197 Move X9, [X8+80]
	198 Move V1, [X8+48]
	199 Move V0, [X8+64]
	200 Move V2, [X8+2]
	201 Move X27, X0
	202 Move X0, X24
	203 Move [X31+240], X9
	204 Move [X31+208], V1
	205 Move [X31+216], V0
	206 Move [X31+12], V2
	207 Call 0x1C17D08
	208 Add X1, X31, 192
	209 Call 0x1C17E04
	210 Move [X31+32], X0
	211 Move X0, X25
	212 Call 0x1C17D08
	213 Move X2, [X31+32]
	214 Move X3, [X31+40]
	215 Move X1, X27
	216 Move X4, X31
	217 Call String.Format, X0, X1, X2, X3
	218 Move X27, X0
	219 Move X0, X26
	220 Call 0x1C17D08
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {225}
	224 Call 0x1C17DFC
	225 Move X0, X27
	226 Move X1, X31
	227 Call Debug.LogError, X0
	228 Move X0, [X31+40]
	229 Move X1, X31
	230 Call Debug.LogException, X0
	231 Add X31, X31, 464
	232 Move X20, [X31+80]
	233 Move X19, [X31+88]
	234 Move X22, [X31+64]
	235 Move X21, [X31+72]
	236 Move X24, [X31+48]
	237 Move X23, [X31+56]
	238 Move X26, [X31+32]
	239 Move X25, [X31+40]
	240 Move X28, [X31+16]
	241 Move X27, [X31+24]
	242 Move X29, [X31+96]
	243 Move X30, [X31+104]
	244 Return 
	245 Call 0x1C17F20
	246 Call 0x1C17F28
	247 Move W0, 8
	248 Call 0x3EB2AF0
	249 Move X8, [X27]
	250 Move [X0], X8
	251 Move X1, 0x6F1000
	252 Add X1, X1, 3672
	253 Move X2, X31
	254 Call 0x3EB2B00
	255 Move X27, X0
	256 Call 0x3EB2AE0
	257 Move X0, X27
	258 Call 0x1D2D690
	259 Call 0x1991590

Method: System.Void RemoveControlLayout(System.String name)

Disassembly:
	0x037C5C94 MOV X1, X31
	0x037C5C98 BL 0x377B1D8
	0x037C5C9C TBZ X0, 0x0, 0x37C5DB4
	0x037C5CA0 MOV X0, X19
	0x037C5CA4 MOV X1, X31
	0x037C5CA8 BL 0x377B4BC
	0x037C5CAC MOV X0, X19
	0x037C5CB0 MOV W1, W31
	0x037C5CB4 B 0x37C5DAC
	0x037C5CB8 B.EQ 0x37C5F24
	0x037C5CBC CMP W21, 0x1
	0x037C5CC0 B.EQ 0x37C5DFC
	0x037C5CC4 CBNZ W21, 0x37C5FA0
	0x037C5CC8 MOV X0, X19
	0x037C5CCC MOV W1, W31
	0x037C5CD0 MOV X2, X31
	0x037C5CD4 BL 0x377B210
	0x037C5CD8 MOV X0, X19
	0x037C5CDC MOV X1, X31
	0x037C5CE0 BL 0x377B1AC
	0x037C5CE4 TBZ X0, 0x0, 0x37C5CF8
	0x037C5CE8 MOV X0, X19
	0x037C5CEC MOV X1, X31
	0x037C5CF0 BL 0x377B1D8
	0x037C5CF4 TBNZ X0, 0x0, 0x37C5FCC
	0x037C5CF8 MOV X0, X19
	0x037C5CFC MOV X1, X31
	0x037C5D00 BL 0x377B1D8
	0x037C5D04 TBNZ X0, 0x0, 0x37C5D24
	0x037C5D08 MOV X0, X19
	0x037C5D0C MOV X1, X31
	0x037C5D10 BL 0x377B534
	0x037C5D14 MOVZ W1, 0x1
	0x037C5D18 MOV X0, X19
	0x037C5D1C MOV X2, X31
	0x037C5D20 BL 0x377B1E4
	0x037C5D24 MOV X0, X19
	0x037C5D28 MOV X1, X31
	0x037C5D2C BL 0x377B1AC
	0x037C5D30 TBNZ X0, 0x0, 0x37C5FA0
	0x037C5D34 ADRP X8, 0x932000
	0x037C5D38 LDR X8, [X8 + 0xFD8]
	0x037C5D3C ADD X0, X31, 0xC
	0x037C5D40 MOV W1, W31
	0x037C5D44 STRH W31, [X31 + 0xC]
	0x037C5D48 LDR X2, [X8]
	0x037C5D4C BL 0x242D570
	0x037C5D50 LDRH W3, [X31 + 0xC]
	0x037C5D54 B 0x37C5E88
	0x037C5D58 MOV X0, X19
	0x037C5D5C MOV W1, W31
	0x037C5D60 MOV X2, X31
	0x037C5D64 BL 0x377B210
	0x037C5D68 MOV X0, X19
	0x037C5D6C MOV X1, X31
	0x037C5D70 BL 0x377B1AC
	0x037C5D74 TBNZ X0, 0x0, 0x37C5D88
	0x037C5D78 MOV X0, X19
	0x037C5D7C MOV X1, X31
	0x037C5D80 BL 0x377B1D8
	0x037C5D84 TBNZ X0, 0x0, 0x37C5FCC
	0x037C5D88 MOV X0, X19
	0x037C5D8C MOV X1, X31
	0x037C5D90 BL 0x377B1D8
	0x037C5D94 TBNZ X0, 0x0, 0x37C5DB4
	0x037C5D98 MOV X0, X19
	0x037C5D9C MOV X1, X31
	0x037C5DA0 BL 0x377B534
	0x037C5DA4 MOVZ W1, 0x1
	0x037C5DA8 MOV X0, X19
	0x037C5DAC MOV X2, X31
	0x037C5DB0 BL 0x377B1E4
	0x037C5DB4 MOV X0, X19
	0x037C5DB8 MOV X1, X31
	0x037C5DBC BL 0x377B1AC
	0x037C5DC0 TBZ X0, 0x0, 0x37C5F1C
	0x037C5DC4 MOV X0, X19
	0x037C5DC8 MOV X1, X31
	0x037C5DCC BL 0x376EE10
	0x037C5DD0 TBNZ X0, 0x0, 0x37C5DE8
	0x037C5DD4 MOV X0, X20
	0x037C5DD8 MOV X1, X19
	0x037C5DDC MOV W2, W31
	0x037C5DE0 MOV X3, X31
	0x037C5DE4 BL 0x37C6480
	0x037C5DE8 MOV X0, X19
	0x037C5DEC MOV W1, W31
	0x037C5DF0 MOV X2, X31
	0x037C5DF4 BL 0x377B1B8
	0x037C5DF8 B 0x37C5F1C
	0x037C5DFC MOV X0, X19
	0x037C5E00 MOV W1, W31
	0x037C5E04 MOV X2, X31
	0x037C5E08 BL 0x377B210
	0x037C5E0C MOV X0, X19
	0x037C5E10 MOV X1, X31
	0x037C5E14 BL 0x377B1D8
	0x037C5E18 TBNZ X0, 0x0, 0x37C5E2C
	0x037C5E1C MOV X0, X19
	0x037C5E20 MOV X1, X31
	0x037C5E24 BL 0x377B1AC
	0x037C5E28 TBNZ X0, 0x0, 0x37C5FCC
	0x037C5E2C MOV X0, X19
	0x037C5E30 MOV X1, X31
	0x037C5E34 BL 0x377B1D8
	0x037C5E38 TBZ X0, 0x0, 0x37C5E58
	0x037C5E3C MOV X0, X19
	0x037C5E40 MOV X1, X31
	0x037C5E44 BL 0x377B4BC
	0x037C5E48 MOV X0, X19
	0x037C5E4C MOV W1, W31
	0x037C5E50 MOV X2, X31
	0x037C5E54 BL 0x377B1E4
	0x037C5E58 MOV X0, X19
	0x037C5E5C MOV X1, X31
	0x037C5E60 BL 0x377B1AC
	0x037C5E64 TBNZ X0, 0x0, 0x37C5FA0
	0x037C5E68 ADRP X8, 0x932000
	0x037C5E6C LDR X8, [X8 + 0xFD8]
	0x037C5E70 ADD X0, X31, 0x8
	0x037C5E74 MOV W1, W31
	0x037C5E78 STRH W31, [X31 + 0x8]
	0x037C5E7C LDR X2, [X8]
	0x037C5E80 BL 0x242D570
	0x037C5E84 LDRH W3, [X31 + 0x8]
	0x037C5E88 MOV X0, X20
	0x037C5E8C MOV X1, X19
	0x037C5E90 MOV W2, W31
	0x037C5E94 BL 0x37C6480
	0x037C5E98 MOVZ W1, 0x1
	0x037C5E9C MOV X0, X19
	0x037C5EA0 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0xC1D000
	008 Move W8, [X21+473]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0x984000
	016 Move X0, [X0+264]
	017 Call 0x1C17CF4
	018 Move X0, 0x984000
	019 Move X0, [X0+544]
	020 Call 0x1C17CF4
	021 Move X0, 0x984000
	022 Move X0, [X0+552]
	023 Call 0x1C17CF4
	024 Move X0, 0x984000
	025 Move X0, [X0+560]
	026 Call 0x1C17CF4
	027 Move X0, 0x984000
	028 Move X0, [X0+568]
	029 Call 0x1C17CF4
	030 Move X0, 0x984000
	031 Move X0, [X0+296]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+473], W8
	035 Move X0, X19
	036 Move X1, X31
	037 Move [X31], X31
	038 Move [X31+8], X31
	039 Call String.IsNullOrEmpty, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {134}
	044 Add X0, X31, 0
	045 Move X1, X19
	046 Move X2, X31
	047 Call InternedString..ctor, X0, X1
	048 Move W8, [X20+112]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X22, X31
	051 Move X8, [X20+120]
	052 Compare X8, 0
	053 JumpIfEqual {132}
	054 Move W9, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X8, X8, X22
	057 Move X21, [X8+32]
	058 Move X2, [X31]
	059 Move X3, [X31+8]
	060 Move X0, X20
	061 Move X1, X21
	062 Call InputManager.IsControlOrChildUsingLayoutRecursive, X0, X1, X2
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {73}
	067 Move W2, 1
	068 Move X0, X20
	069 Move X1, X21
	070 Call InputManager.RemoveDevice, X0, X1, X2
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction LDRSW not yet implemented."
	074 Add X22, X22, 1
	075 Move X0, [X20+24]
	076 Compare X0, 0
	077 JumpIfEqual {132}
	078 Move X8, 0x984000
	079 Move X8, [X8+560]
	080 Move X1, [X31]
	081 Move X2, [X31+8]
	082 Move X3, [X8]
	083 Call Dictionary`2<InternedString, Object>.Remove, X0, X1
	084 Move X0, [X20+32]
	085 Compare X0, 0
	086 JumpIfEqual {132}
	087 Move X8, 0x984000
	088 Move X8, [X8+552]
	089 Move X1, [X31]
	090 Move X2, [X31+8]
	091 Move X3, [X8]
	092 Call Dictionary`2<InternedString, Object>.Remove, X0, X1
	093 Move X0, [X20+40]
	094 Compare X0, 0
	095 JumpIfEqual {132}
	096 Move X8, 0x984000
	097 Move X8, [X8+568]
	098 Move X1, [X31]
	099 Move X2, [X31+8]
	100 Move X3, [X8]
	101 Call Dictionary`2<InternedString, Object>.Remove, X0, X1
	102 Move X0, [X20+48]
	103 Compare X0, 0
	104 JumpIfEqual {132}
	105 Move X8, 0x984000
	106 Move X8, [X8+544]
	107 Move X1, [X31]
	108 Move X2, [X31+8]
	109 Move X21, 0x984000
	110 Move X22, 0x984000
	111 Move X3, [X8]
	112 Move X21, [X21+296]
	113 Move X22, [X22+264]
	114 Call Dictionary`2<InternedString, InternedString>.Remove, X0, X1
	115 Move W8, [X20+16]
	116 Add X0, X20, 544
	117 Move W2, 1
	118 Move X1, X19
	119 Add W8, W8, 1
	120 Move [X20+16], W8
	121 Move X3, [X21]
	122 Move X5, [X22]
	123 Move X4, X31
	124 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X30, [X31+16]
	130 Add X31, X31, 64
	131 Return 
	132 Call 0x1C17F20
	133 Call 0x1C17F28
	134 Move X0, 0x934000
	135 Move X0, [X0+1320]
	136 Call 0x1C17D08
	137 Call 0x1C17F10
	138 Move X19, X0
	139 Move X0, 0x937000
	140 Move X0, [X0+1416]
	141 Call 0x1C17D08
	142 Move X1, X0
	143 Move X0, X19
	144 Move X2, X31
	145 Call ArgumentNullException..ctor, X0, X1
	146 Move X0, 0x984000
	147 Move X0, [X0+576]
	148 Call 0x1C17D08
	149 Move X1, X0
	150 Move X0, X19
	151 Call 0x1C17DEC

Method: UnityEngine.InputSystem.Layouts.InputControlLayout TryLoadControlLayout(System.Type type)

Disassembly:
	0x037C5EA4 BL 0x377B1B8
	0x037C5EA8 B 0x37C5FA0
	0x037C5EAC MOV X0, X19
	0x037C5EB0 MOV X1, X31
	0x037C5EB4 BL 0x377B204
	0x037C5EB8 TBZ X0, 0x0, 0x37C5F1C
	0x037C5EBC MOV X0, X19
	0x037C5EC0 MOV X1, X31
	0x037C5EC4 BL 0x377B1D8
	0x037C5EC8 TBZ X0, 0x0, 0x37C5EE8
	0x037C5ECC MOV X0, X19
	0x037C5ED0 MOV X1, X31
	0x037C5ED4 BL 0x377B4BC
	0x037C5ED8 MOV X0, X19
	0x037C5EDC MOV W1, W31
	0x037C5EE0 MOV X2, X31
	0x037C5EE4 BL 0x377B1E4
	0x037C5EE8 MOV X0, X19
	0x037C5EEC MOV X1, X31
	0x037C5EF0 BL 0x376EE10
	0x037C5EF4 TBNZ X0, 0x0, 0x37C5F0C
	0x037C5EF8 MOV X0, X20
	0x037C5EFC MOV X1, X19
	0x037C5F00 MOV W2, W31
	0x037C5F04 MOV X3, X31
	0x037C5F08 BL 0x37C6480
	0x037C5F0C MOV X0, X19
	0x037C5F10 MOV W1, W31
	0x037C5F14 MOV X2, X31
	0x037C5F18 BL 0x377B210
	0x037C5F1C MOVZ W2, 0x4
	0x037C5F20 B 0x37C5FA4
	0x037C5F24 MOV X0, X19
	0x037C5F28 MOV X1, X31
	0x037C5F2C BL 0x377B1AC
	0x037C5F30 TBNZ X0, 0x0, 0x37C5FCC
	0x037C5F34 MOV X0, X19
	0x037C5F38 MOV X1, X31
	0x037C5F3C BL 0x377B204
	0x037C5F40 TBNZ X0, 0x0, 0x37C5FCC
	0x037C5F44 MOVZ W1, 0x1
	0x037C5F48 MOV X0, X19
	0x037C5F4C MOV X2, X31
	0x037C5F50 BL 0x377B210
	0x037C5F54 ADRP X8, 0x932000
	0x037C5F58 LDR X8, [X8 + 0xFD8]
	0x037C5F5C ADD X0, X31, 0x4
	0x037C5F60 MOV W1, W31
	0x037C5F64 STRH W31, [X31 + 0x4]
	0x037C5F68 LDR X2, [X8]
	0x037C5F6C BL 0x242D570
	0x037C5F70 LDRH W3, [X31 + 0x4]
	0x037C5F74 MOV X0, X20
	0x037C5F78 MOV X1, X19
	0x037C5F7C MOV W2, W31
	0x037C5F80 BL 0x37C6480
	0x037C5F84 MOV X0, X19
	0x037C5F88 MOV X1, X31
	0x037C5F8C BL 0x377B534
	0x037C5F90 MOVZ W1, 0x1
	0x037C5F94 MOV X0, X19
	0x037C5F98 MOV X2, X31
	0x037C5F9C BL 0x377B1E4
	0x037C5FA0 MOVZ W2, 0x5
	0x037C5FA4 ADRP X8, 0x982000
	0x037C5FA8 ADRP X9, 0x982000
	0x037C5FAC LDR X8, [X8 + 0xD40]
	0x037C5FB0 LDR X9, [X9 + 0xD28]
	0x037C5FB4 ADD X0, X20, 0xE0
	0x037C5FB8 MOV X1, X19
	0x037C5FBC LDR X3, [X8]
	0x037C5FC0 LDR X5, [X9]
	0x037C5FC4 MOV X4, X31
	0x037C5FC8 BL 0x21AE04C
	0x037C5FCC LDP X20, X19, [X31 + 0x30]
	0x037C5FD0 LDP X22, X21, [X31 + 0x20]
	0x037C5FD4 LDP X30, X23, [X31 + 0x10]
	0x037C5FD8 ADD X31, X31, 0x40
	0x037C5FDC RET
	0x037C5FE0 ADRP X0, 0x933000
	0x037C5FE4 LDR X0, [X0 + 0x528]
	0x037C5FE8 BL 0x1C16D08
	0x037C5FEC BL 0x1C16F10
	0x037C5FF0 MOV X19, X0
	0x037C5FF4 ADRP X0, 0x956000
	0x037C5FF8 LDR X0, [X0 + 0xD20]
	0x037C5FFC BL 0x1C16D08
	0x037C6000 MOV X1, X0
	0x037C6004 MOV X0, X19
	0x037C6008 MOV X2, X31
	0x037C600C BL 0x330E100
	0x037C6010 ADRP X0, 0x982000
	0x037C6014 LDR X0, [X0 + 0x2A0]
	0x037C6018 BL 0x1C16D08
	0x037C601C MOV X1, X0
	0x037C6020 MOV X0, X19
	0x037C6024 BL 0x1C16DEC
	0x037C6028 SUB X31, X31, 0x50
	0x037C602C STR X30, [X31 + 0x40]
	0x037C6030 LDR X8, [X1 + 0x30]
	0x037C6034 LDP V1, V0, [X1 + 0x10]
	0x037C6038 LDR V2, [X1]
	0x037C603C ADD X1, X31, 0x0
	0x037C6040 MOVZ W2, 0x1
	0x037C6044 MOV X3, X31
	0x037C6048 MOV W4, W31
	0x037C604C MOV W5, W31
	0x037C6050 STR X8, [X31 + 0x30]
	0x037C6054 STP V1, V0, [X31 + 0x10]
	0x037C6058 STR V2, [X31]
	0x037C605C BL 0x37C606C
	0x037C6060 LDR X30, [X31 + 0x40]
	0x037C6064 ADD X31, X31, 0x50
	0x037C6068 RET
	0x037C606C SUB X31, X31, 0xF0
	0x037C6070 STP X30, X25, [X31 + 0xB0]
	0x037C6074 STP X24, X23, [X31 + 0xC0]
	0x037C6078 STP X22, X21, [X31 + 0xD0]
	0x037C607C STP X20, X19, [X31 + 0xE0]
	0x037C6080 ADRP X25, 0xC1B000
	0x037C6084 LDRB W8, [X25 + 0x1E6]
	0x037C6088 MOV W22, W5
	0x037C608C MOV W19, W4
	0x037C6090 MOV X23, X3
	0x037C6094 MOV W24, W2
	0x037C6098 MOV X20, X1
	0x037C609C MOV X21, X0
	0x037C60A0 TBNZ X8, 0x0, 0x37C60B8
	0x037C60A4 ADRP X0, 0x982000
	0x037C60A8 LDR X0, [X0 + 0xB0]
	0x037C60AC BL 0x1C16CF4
	0x037C60B0 MOVZ W8, 0x1
	0x037C60B4 STRB W8, [X25 + 0x1E6]
	0x037C60B8 MOV X0, X21
	0x037C60BC MOV X1, X20
	0x037C60C0 MOV W2, W19
	0x037C60C4 STR X31, [X31 + 0x98]
	0x037C60C8 BL 0x37C419C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xC1D000
	008 Move X21, 0x92F000
	009 Move W8, [X22+474]
	010 Move X21, [X21+1728]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x981000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0x92F000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+474], W8
	025 Move X0, [X21]
	026 Move [X31], X31
	027 Move [X31+8], X31
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {89}
	040 Move X8, 0x981000
	041 Move X0, [X21]
	042 Move X8, [X8+1696]
	043 Move W9, [X0+224]
	044 Move X21, [X8]
	045 Compare W9, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X31
	050 Call Type.GetTypeFromHandle, X0
	051 Compare X0, 0
	052 JumpIfEqual {107}
	053 Move X8, [X0]
	054 Move X1, X19
	055 Move X9, [X8+680]
	056 Move X2, [X8+688]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {108}
	062 Add X20, X20, 24
	063 Move X0, X20
	064 Move X1, X19
	065 Move X2, X31
	066 Call Collection.TryFindLayoutForType, X0, X1
	067 Move [X31], X0
	068 Move [X31+8], X1
	069 Add X0, X31, 0
	070 Move X1, X31
	071 Call InternedString.IsEmpty, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {122}
	076 Move X1, [X31]
	077 Move X2, [X31+8]
	078 Move X0, X20
	079 Move X3, X31
	080 Move X4, X31
	081 Call Collection.TryLoadLayout, X0, X1, X2
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Move X30, [X31+16]
	087 Add X31, X31, 64
	088 Return X0
	089 Move X0, 0x934000
	090 Move X0, [X0+1320]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X19, X0
	094 Move X0, 0x937000
	095 Move X0, [X0+1512]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Move X2, X31
	100 Call ArgumentNullException..ctor, X0, X1
	101 Move X0, 0x984000
	102 Move X0, [X0+584]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Call 0x1C17DEC
	107 Call 0x1C17F20
	108 Move X0, X19
	109 Call 0x19913C0
	110 Move X8, [X19]
	111 Move X0, X19
	112 Move X9, [X8+424]
	113 Move X1, [X8+432]
	114 NotImplemented "Instruction BLR not yet implemented."
	115 Move X19, X0
	116 Move X0, 0x956000
	117 Move X0, [X0+3280]
	118 Call 0x1C17D08
	119 Move X20, X0
	120 Move X0, 0x980000
	121 Move X0, [X0+1704]
	122 Move X0, X19
	123 Call 0x19913C0
	124 Move X8, [X19]
	125 Move X0, X19
	126 Move X9, [X8+424]
	127 Move X1, [X8+432]
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move X19, X0
	130 Move X0, 0x956000
	131 Move X0, [X0+3280]
	132 Call 0x1C17D08
	133 Move X20, X0
	134 Move X0, 0x983000
	135 Move X0, [X0+424]
	136 Call 0x1C17D08
	137 Move X2, X0
	138 Move X0, X20
	139 Move X1, X19
	140 Move X3, X31
	141 Call String.Concat, X0, X1, X2
	142 Move X19, X0
	143 Move X0, 0x936000
	144 Move X0, [X0+1400]
	145 Call 0x1C17D08
	146 Call 0x1C17F10
	147 Move X20, X0
	148 Move X0, 0x936000
	149 Move X0, [X0+1512]
	150 Call 0x1C17D08
	151 Move X2, X0
	152 Move X0, X20
	153 Move X1, X19
	154 Move X3, X31
	155 Call ArgumentException..ctor, X0, X1, X2
	156 Move X0, 0x983000
	157 Move X0, [X0+584]
	158 Call 0x1C17D08
	159 Move X1, X0
	160 Move X0, X20
	161 Call 0x1C17DEC

Method: UnityEngine.InputSystem.Layouts.InputControlLayout TryLoadControlLayout(UnityEngine.InputSystem.Utilities.InternedString name)

Disassembly:
	0x037BD6E8 MOV X0, X20
	0x037BD6EC LDP X20, X19, [X31 + 0x40]
	0x037BD6F0 LDP X22, X21, [X31 + 0x30]
	0x037BD6F4 LDP X24, X23, [X31 + 0x20]

ISIL:
	001 Add X0, X0, 24
	002 Move X3, X31
	003 Move X4, X31
	004 Call Collection.TryLoadLayout, X0, X1, X2
	005 Return X0

Method: UnityEngine.InputSystem.Utilities.InternedString TryFindMatchingControlLayout(ref UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription, System.Int32 deviceId = 0)

Disassembly:
	0x037C519C BL 0x1C16CF4
	0x037C51A0 ADRP X0, 0x983000
	0x037C51A4 LDR X0, [X0 + 0x250]
	0x037C51A8 BL 0x1C16CF4
	0x037C51AC MOVZ W8, 0x1
	0x037C51B0 STRB W8, [X21 + 0x1DC]
	0x037C51B4 STP X31, X31, [X31]
	0x037C51B8 LDR X0, [X22 + 0x480]
	0x037C51BC CBZ X0, 0x37C5270
	0x037C51C0 MOV X1, X31
	0x037C51C4 BL 0x37CDAC4
	0x037C51C8 UBFM X8, X1, 0x20, 0x3F
	0x037C51CC STP X0, X1, [X31 + 0x10]
	0x037C51D0 CBZ W8, 0x37C5258
	0x037C51D4 CMP W8, 0x1
	0x037C51D8 B.LT 0x37C5250
	0x037C51DC ADRP X23, 0x983000
	0x037C51E0 LDR X23, [X23 + 0x250]
	0x037C51E4 MOV W21, W31
	0x037C51E8 ADD X22, X22, 0x18
	0x037C51EC LDR X2, [X23]
	0x037C51F0 ADD X0, X31, 0x10
	0x037C51F4 MOV W1, W21
	0x037C51F8 BL 0x24FDB3C
	0x037C51FC MOV X1, X0
	0x037C5200 ADD X0, X31, 0x0
	0x037C5204 MOV X2, X31
	0x037C5208 BL 0x3757420
	0x037C520C LDP X2, X3, [X31]
	0x037C5210 MOV X0, X20
	0x037C5214 MOV X1, X19
	0x037C5218 MOV X4, X31
	0x037C521C BL 0x37564A4
	0x037C5220 TBNZ X0, 0x0, 0x37C5258
	0x037C5224 LDP X1, X2, [X31]
	0x037C5228 MOV X0, X22
	0x037C522C MOV X3, X20
	0x037C5230 MOV X4, X19
	0x037C5234 MOV X5, X31
	0x037C5238 BL 0x381909C
	0x037C523C TBNZ X0, 0x0, 0x37C5258
	0x037C5240 LDR W8, [X31 + 0x1C]
	0x037C5244 ADD W21, W21, 0x1
	0x037C5248 CMP W21, W8
	0x037C524C B.LT 0x37C51EC
	0x037C5250 MOV W0, W31
	0x037C5254 B 0x37C525C
	0x037C5258 MOVZ W0, 0x1
	0x037C525C LDP X20, X19, [X31 + 0x40]
	0x037C5260 LDP X22, X21, [X31 + 0x30]
	0x037C5264 LDP X30, X23, [X31 + 0x20]
	0x037C5268 ADD X31, X31, 0x50
	0x037C526C RET
	0x037C5270 BL 0x1C16F20
	0x037C5274 STR X30, [X31 - 0x30]!
	0x037C5278 STP X22, X21, [X31 + 0x10]
	0x037C527C STP X20, X19, [X31 + 0x20]
	0x037C5280 ADRP X21, 0xC1C000
	0x037C5284 ADRP X22, 0x983000
	0x037C5288 LDRB W8, [X21 + 0x1DD]
	0x037C528C LDR X22, [X22 + 0x258]
	0x037C5290 MOV X19, X1
	0x037C5294 MOV X20, X0
	0x037C5298 TBNZ X8, 0x0, 0x37C52B0
	0x037C529C ADRP X0, 0x983000
	0x037C52A0 LDR X0, [X0 + 0x258]
	0x037C52A4 BL 0x1C16CF4
	0x037C52A8 MOVZ W8, 0x1
	0x037C52AC STRB W8, [X21 + 0x1DD]
	0x037C52B0 LDR X0, [X22]
	0x037C52B4 BL 0x1C16F10
	0x037C52B8 MOV X1, X31
	0x037C52BC MOV X21, X0
	0x037C52C0 BL 0x33BDD8C
	0x037C52C4 MOVN W8, 0x1
	0x037C52C8 MOV X0, X31
	0x037C52CC STR W8, [X21 + 0x10]
	0x037C52D0 BL 0x33C151C
	0x037C52D4 STR W0, [X21 + 0x20]
	0x037C52D8 STP X19, X20, [X21 + 0x30]
	0x037C52DC MOV X0, X21
	0x037C52E0 LDP X20, X19, [X31 + 0x20]
	0x037C52E4 LDP X22, X21, [X31 + 0x10]
	0x037C52E8 LDR X30, [X31], #0x30
	0x037C52EC RET
	0x037C52F0 STR X30, [X31 - 0x20]!
	0x037C52F4 STP X20, X19, [X31 + 0x10]
	0x037C52F8 MOV W19, W1
	0x037C52FC MOV X1, X31
	0x037C5300 MOV X20, X0
	0x037C5304 BL 0x33BDD8C
	0x037C5308 MOV X0, X31
	0x037C530C STR W19, [X20 + 0x10]
	0x037C5310 BL 0x33C151C
	0x037C5314 STR W0, [X20 + 0x20]
	0x037C5318 LDP X20, X19, [X31 + 0x10]
	0x037C531C LDR X30, [X31], #0x20
	0x037C5320 RET
	0x037C5324 SUB X31, X31, 0x40
	0x037C5328 STP X30, X21, [X31 + 0x20]
	0x037C532C STP X20, X19, [X31 + 0x30]
	0x037C5330 ADRP X21, 0xC1C000
	0x037C5334 LDRB W8, [X21 + 0x1DE]
	0x037C5338 MOV X19, X1
	0x037C533C MOV X20, X0
	0x037C5340 STP X2, X3, [X31 + 0x10]
	0x037C5344 TBNZ X8, 0x0, 0x37C5368
	0x037C5348 ADRP X0, 0x956000
	0x037C534C LDR X0, [X0 + 0xDC8]
	0x037C5350 BL 0x1C16CF4
	0x037C5354 ADRP X0, 0x956000
	0x037C5358 LDR X0, [X0 + 0xDD0]
	0x037C535C BL 0x1C16CF4
	0x037C5360 MOVZ W8, 0x1
	0x037C5364 STRB W8, [X21 + 0x1DE]
	0x037C5368 CBZ X19, 0x37C5430
	0x037C536C MOV X0, X19
	0x037C5370 MOV X1, X31
	0x037C5374 BL 0x3772134
	0x037C5378 UBFM X8, X1, 0x20, 0x3F
	0x037C537C CMP X8, 0x1
	0x037C5380 STP X0, X1, [X31]
	0x037C5384 B.NE 0x37C53C0
	0x037C5388 MOV X0, X19
	0x037C538C MOV X1, X31
	0x037C5390 BL 0x3772134
	0x037C5394 ADRP X8, 0x956000
	0x037C5398 LDR X8, [X8 + 0xDD0]
	0x037C539C STP X0, X1, [X31]
	0x037C53A0 ADD X0, X31, 0x0
	0x037C53A4 MOV W1, W31
	0x037C53A8 LDR X2, [X8]
	0x037C53AC BL 0x24FCF28
	0x037C53B0 LDP X2, X3, [X31 + 0x10]
	0x037C53B4 MOV X4, X31
	0x037C53B8 BL 0x37564A4
	0x037C53BC TBNZ X0, 0x0, 0x37C5420
	0x037C53C0 MOV X0, X19
	0x037C53C4 MOV X1, X31
	0x037C53C8 BL 0x3772134
	0x037C53CC UBFM X8, X1, 0x20, 0x3F
	0x037C53D0 STP X0, X1, [X31]
	0x037C53D4 CBNZ X8, 0x37C53E8
	0x037C53D8 ADD X0, X31, 0x10
	0x037C53DC MOV X1, X31
	0x037C53E0 BL 0x375F7A0
	0x037C53E4 TBNZ X0, 0x0, 0x37C5420
	0x037C53E8 MOV X0, X19
	0x037C53EC MOV X1, X31
	0x037C53F0 BL 0x377B45C
	0x037C53F4 ADD X0, X31, 0x10
	0x037C53F8 MOV X1, X31
	0x037C53FC BL 0x375F7A0
	0x037C5400 TBNZ X0, 0x0, 0x37C5414
	0x037C5404 LDP X1, X2, [X31 + 0x10]
	0x037C5408 MOV X0, X19
	0x037C540C MOV X3, X31
	0x037C5410 BL 0x377B2CC
	0x037C5414 MOV X0, X20
	0x037C5418 MOV X1, X19
	0x037C541C BL 0x37C5478
	0x037C5420 LDP X20, X19, [X31 + 0x30]
	0x037C5424 LDP X30, X21, [X31 + 0x20]
	0x037C5428 ADD X31, X31, 0x40
	0x037C542C RET
	0x037C5430 ADRP X0, 0x933000
	0x037C5434 LDR X0, [X0 + 0x528]
	0x037C5438 BL 0x1C16D08
	0x037C543C BL 0x1C16F10
	0x037C5440 MOV X19, X0
	0x037C5444 ADRP X0, 0x956000
	0x037C5448 LDR X0, [X0 + 0xD20]
	0x037C544C BL 0x1C16D08
	0x037C5450 MOV X1, X0
	0x037C5454 MOV X0, X19
	0x037C5458 MOV X2, X31
	0x037C545C BL 0x330E100
	0x037C5460 ADRP X0, 0x983000
	0x037C5464 LDR X0, [X0 + 0x260]
	0x037C5468 BL 0x1C16D08
	0x037C546C MOV X1, X0
	0x037C5470 MOV X0, X19
	0x037C5474 BL 0x1C16DEC
	0x037C5478 STP X30, X23, [X31 - 0x30]!
	0x037C547C STP X22, X21, [X31 + 0x10]
	0x037C5480 STP X20, X19, [X31 + 0x20]
	0x037C5484 ADRP X23, 0xC1C000
	0x037C5488 ADRP X21, 0x982000
	0x037C548C ADRP X22, 0x982000
	0x037C5490 LDRB W8, [X23 + 0x1E1]
	0x037C5494 LDR X21, [X21 + 0xD40]
	0x037C5498 LDR X22, [X22 + 0xD28]
	0x037C549C MOV X19, X1
	0x037C54A0 MOV X20, X0
	0x037C54A4 TBNZ X8, 0x0, 0x37C54C8
	0x037C54A8 ADRP X0, 0x982000
	0x037C54AC LDR X0, [X0 + 0xD28]
	0x037C54B0 BL 0x1C16CF4
	0x037C54B4 ADRP X0, 0x982000
	0x037C54B8 LDR X0, [X0 + 0xD40]
	0x037C54BC BL 0x1C16CF4
	0x037C54C0 MOVZ W8, 0x1
	0x037C54C4 STRB W8, [X23 + 0x1E1]
	0x037C54C8 MOVZ W1, 0x6
	0x037C54CC MOV X0, X19
	0x037C54D0 MOV X2, X31
	0x037C54D4 BL 0x3751064
	0x037C54D8 LDR X3, [X21]
	0x037C54DC LDR X5, [X22]
	0x037C54E0 ADD X0, X20, 0xE0
	0x037C54E4 MOVZ W2, 0x6
	0x037C54E8 MOV X1, X19
	0x037C54EC MOV X4, X31
	0x037C54F0 BL 0x21AE04C
	0x037C54F4 CBZ X19, 0x37C5518
	0x037C54F8 LDR X8, [X19]
	0x037C54FC MOV X0, X19
	0x037C5500 LDP X20, X19, [X31 + 0x20]
	0x037C5504 LDP X22, X21, [X31 + 0x10]
	0x037C5508 LDR X2, [X8 + 0x248]
	0x037C550C LDR X1, [X8 + 0x250]
	0x037C5510 LDP X30, X23, [X31], #0x30
	0x037C5514 BR X2
	0x037C5518 BL 0x1C16F20
	0x037C551C STP X30, X23, [X31 - 0x30]!
	0x037C5520 STP X22, X21, [X31 + 0x10]
	0x037C5524 STP X20, X19, [X31 + 0x20]
	0x037C5528 ADRP X22, 0xC1C000
	0x037C552C ADRP X23, 0x92E000
	0x037C5530 LDRB W8, [X22 + 0x1E2]
	0x037C5534 LDR X23, [X23 + 0x6C0]
	0x037C5538 MOV X19, X2
	0x037C553C MOV X21, X1
	0x037C5540 MOV X20, X0
	0x037C5544 TBNZ X8, 0x0, 0x37C555C
	0x037C5548 ADRP X0, 0x92E000
	0x037C554C LDR X0, [X0 + 0x6C0]
	0x037C5550 BL 0x1C16CF4
	0x037C5554 MOVZ W8, 0x1
	0x037C5558 STRB W8, [X22 + 0x1E2]
	0x037C555C LDR X0, [X23]
	0x037C5560 LDR W8, [X0 + 0xE0]
	0x037C5564 CBNZ W8, 0x37C556C
	0x037C5568 BL 0x1C16DFC
	0x037C556C MOV X0, X21
	0x037C5570 MOV X1, X31
	0x037C5574 MOV X2, X31
	0x037C5578 BL 0x3395194
	0x037C557C TBNZ X0, 0x0, 0x37C55B8
	0x037C5580 MOV X0, X20
	0x037C5584 MOV X1, X21
	0x037C5588 BL 0x37C50CC
	0x037C558C MOV X2, X31
	0x037C5590 BL 0x37577E0
	0x037C5594 MOV X1, X0
	0x037C5598 MOV X0, X20
	0x037C559C MOV X2, X19
	0x037C55A0 LDP X20, X19, [X31 + 0x20]
	0x037C55A4 LDP X22, X21, [X31 + 0x10]
	0x037C55A8 MOV X3, X31
	0x037C55AC MOV X4, X31
	0x037C55B0 LDP X30, X23, [X31], #0x30
	0x037C55B4 B 0x37BCBC4
	0x037C55B8 ADRP X0, 0x933000
	0x037C55BC LDR X0, [X0 + 0x528]
	0x037C55C0 BL 0x1C16D08
	0x037C55C4 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], X29
	003 Move [X31+136], X30
	004 Move [X31+144], X28
	005 Move [X31+152], X27
	006 Move [X31+160], X26
	007 Move [X31+168], X25
	008 Move [X31+176], X24
	009 Move [X31+184], X23
	010 Move [X31+192], X22
	011 Move [X31+200], X21
	012 Move [X31+208], X20
	013 Move [X31+216], X19
	014 Move X21, 0xC1D000
	015 Move W8, [X21+475]
	016 Move W22, W2
	017 Move X19, X1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {49}
	023 Move X0, 0x984000
	024 Move X0, [X0+432]
	025 Call 0x1C17CF4
	026 Move X0, 0x984000
	027 Move X0, [X0+440]
	028 Call 0x1C17CF4
	029 Move X0, 0x984000
	030 Move X0, [X0+448]
	031 Call 0x1C17CF4
	032 Move X0, 0x984000
	033 Move X0, [X0+456]
	034 Call 0x1C17CF4
	035 Move X0, 0x984000
	036 Move X0, [X0+464]
	037 Call 0x1C17CF4
	038 Move X0, 0x984000
	039 Move X0, [X0+232]
	040 Call 0x1C17CF4
	041 Move X0, 0x984000
	042 Move X0, [X0+472]
	043 Call 0x1C17CF4
	044 Move X0, 0x92F000
	045 Move X0, [X0+1728]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X21+475], W8
	049 Move [X31+112], X31
	050 Move [X31+120], X31
	051 Move [X31+96], X31
	052 Move [X31+104], X31
	053 Move V2, [X19+16]
	054 Move V0, [X19+32]
	055 Move X8, [X19+48]
	056 Move V1, [X19]
	057 Add X21, X20, 24
	058 Add X1, X31, 32
	059 Move X0, X21
	060 Move X2, X31
	061 Move [X31+80], X8
	062 Move [X31+48], V2
	063 Move [X31+56], V0
	064 Move [X31+2], V1
	065 Call Collection.TryFindMatchingLayout, X0, X1
	066 Move [X31+112], X0
	067 Move [X31+120], X1
	068 Add X0, X31, 112
	069 Move X1, X31
	070 Call InternedString.IsEmpty, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {134}
	075 Move X0, [X19+8]
	076 Move X1, X31
	077 Call String.IsNullOrEmpty, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {134}
	082 Move X1, [X19+8]
	083 Add X0, X31, 96
	084 Move X2, X31
	085 Call InternedString..ctor, X0, X1
	086 Move X1, [X31+96]
	087 Move X2, [X31+104]
	088 Move X0, X21
	089 Move X3, X31
	090 Call Collection.GetControlTypeForLayout, X0, X1
	091 Move X23, 0x92F000
	092 Move X23, [X23+1728]
	093 Move X21, X0
	094 Move X8, [X23]
	095 Move W9, [X8+224]
	096 Compare W9, 0
	097 JumpIfNotEqual {100}
	098 Move X0, X8
	099 Call 0x1C17DFC
	100 Move X0, X21
	101 Move X1, X31
	102 Move X2, X31
	103 Call Type.op_Inequality, X0, X1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {134}
	108 Move X8, 0x984000
	109 Move X0, [X23]
	110 Move X8, [X8+232]
	111 Move W9, [X0+224]
	112 Move X23, [X8]
	113 Compare W9, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X0, X23
	117 Move X1, X31
	118 Call Type.GetTypeFromHandle, X0
	119 Compare X0, 0
	120 JumpIfEqual {292}
	121 Move X8, [X0]
	122 Move X1, X21
	123 Move X9, [X8+680]
	124 Move X2, [X8+688]
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Move TEMP, X0
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfNotEqual {134}
	130 Move X1, [X19+8]
	131 Add X0, X31, 112
	132 Move X2, X31
	133 Call InternedString..ctor, X0, X1
	134 Move X27, 0x984000
	135 Move X27, [X27+456]
	136 Add X21, X20, 384
	137 Move X0, X21
	138 Move X1, [X27]
	139 Call 0x28F240C, X0
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X24, 0x984000
	142 Move X8, [X20+1072]
	143 Move X24, [X24+432]
	144 Compare X8, 0
	145 JumpIfNotEqual {158}
	146 Move X8, 0x984000
	147 Move X8, [X8+464]
	148 Move X0, [X8]
	149 Call 0x1C17F10
	150 Move X8, 0x984000
	151 Move X8, [X8+472]
	152 Move X1, X20
	153 Move X3, X31
	154 Move X23, X0
	155 Move X2, [X8]
	156 Call InputDeviceExecuteCommandDelegate..ctor, X0, X1, X2
	157 Move [X20+1072], X23
	158 Move [X20+1080], W22
	159 Move X1, [X24]
	160 Move X0, X21
	161 Call 0x28F27BC, X0
	162 Move X1, [X27]
	163 Move X0, X21
	164 Call 0x28F240C, X0
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move X29, 0x984000
	167 Move X23, 0x92F000
	168 Move X24, 0x984000
	169 Move X25, 0x92F000
	170 Move X29, [X29+448]
	171 Move X23, [X23+2000]
	172 Move X24, [X24+480]
	173 Move X25, [X25+2600]
	174 Move W28, W31
	175 Move W22, W31
	176 Move X2, [X29]
	177 Move X0, X21
	178 Move W1, W22
	179 Call 0x28F2414, X0, X1
	180 Move X26, X0
	181 Move X0, [X31+112]
	182 Move X1, [X31+120]
	183 Move X2, X31
	184 Call InternedString.op_Implicit, X0
	185 Compare X26, 0
	186 JumpIfEqual {216}
	187 Move X2, X0
	188 Move X0, [X26+64]
	189 Move X3, [X20+1072]
	190 Move X8, [X26+24]
	191 Move X4, [X26+40]
	192 Move X1, X19
	193 NotImplemented "Instruction BLR not yet implemented."
	194 Move X26, X0
	195 Move X1, X31
	196 Call String.IsNullOrEmpty, X0
	197 Or W8, W28, W0
	198 Move TEMP, X8
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfEqual {211}
	202 Move [X31+16], X31
	203 Move [X31+24], X31
	204 Add X0, X31, 16
	205 Move X1, X26
	206 Move X2, X31
	207 Call InternedString..ctor, X0, X1
	208 Move V0, [X31+1]
	209 Move W28, 1
	210 Move [X31+7], V0
	211 Move X1, [X27]
	212 Move X0, X21
	213 Add W22, W22, 1
	214 Call 0x28F240C, X0
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move [X31+12], W28
	217 Call 0x1C17F20
	218 Move [X31+12], W28
	219 Move X26, X0
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X0, X26
	222 Call 0x3EB2AD0
	223 Move X26, X0
	224 Move X0, X23
	225 Call 0x1C17D08
	226 Move X8, [X26]
	227 Move X1, [X8]
	228 Call 0x1C18270
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfNotEqual {293}
	233 Move X26, [X26]
	234 Call 0x3EB2AE0
	235 Compare X26, 0
	236 JumpIfEqual {292}
	237 Move X0, X26
	238 Move X1, X31
	239 Call Exception.GetType, X0
	240 Compare X0, 0
	241 JumpIfEqual {292}
	242 Move X8, [X0]
	243 Move X9, [X8+424]
	244 Move X1, [X8+432]
	245 NotImplemented "Instruction BLR not yet implemented."
	246 Move X27, X0
	247 Move X0, X24
	248 Call 0x1C17D08
	249 Move X1, X0
	250 Move X0, X27
	251 Move X2, X31
	252 Call String.Concat, X0, X1
	253 Move X27, X0
	254 Move X0, X25
	255 Call 0x1C17D08
	256 Move W8, [X0+224]
	257 Compare W8, 0
	258 JumpIfNotEqual {260}
	259 Call 0x1C17DFC
	260 Move X0, X27
	261 Move X1, X31
	262 Call Debug.LogError, X0
	263 Move X0, X26
	264 Move X1, X31
	265 Call Debug.LogException, X0
	266 Move X27, 0x984000
	267 Move X29, 0x984000
	268 Move X27, [X27+456]
	269 Move X29, [X29+448]
	270 Move W28, [X31+12]
	271 Move X8, 0x984000
	272 Move X8, [X8+440]
	273 Move X0, X21
	274 Move X1, [X8]
	275 Call 0x28F27C8, X0
	276 Move X0, [X31+112]
	277 Move X1, [X31+120]
	278 Move X20, [X31+208]
	279 Move X19, [X31+216]
	280 Move X22, [X31+192]
	281 Move X21, [X31+200]
	282 Move X24, [X31+176]
	283 Move X23, [X31+184]
	284 Move X26, [X31+160]
	285 Move X25, [X31+168]
	286 Move X28, [X31+144]
	287 Move X27, [X31+152]
	288 Move X29, [X31+128]
	289 Move X30, [X31+136]
	290 Add X31, X31, 224
	291 Return X0
	292 Call 0x1C17F20
	293 Move W0, 8
	294 Call 0x3EB2AF0
	295 Move X8, [X26]
	296 Move [X0], X8
	297 Move X1, 0x6F0000
	298 Add X1, X1, 3672
	299 Move X2, X31
	300 Call 0x3EB2B00
	301 Move X26, X0
	302 Call 0x3EB2AE0
	303 Move X0, X26
	304 Call 0x1D2D690
	305 Call 0x1991590

Method: UnityEngine.InputSystem.Utilities.InternedString FindOrRegisterDeviceLayoutForType(System.Type type)

Disassembly:
	0x037C60CC STP X0, X1, [X31 + 0xA0]
	0x037C60D0 ADD X0, X31, 0xA0
	0x037C60D4 MOV X1, X31
	0x037C60D8 BL 0x375F7A0
	0x037C60DC TBZ X0, 0x0, 0x37C6118
	0x037C60E0 TBNZ X24, 0x0, 0x37C619C
	0x037C60E4 CBZ W19, 0x37C6110
	0x037C60E8 MOV X0, X31
	0x037C60EC BL 0x37FE680
	0x037C60F0 STR X0, [X31 + 0x98]
	0x037C60F4 ADRP X8, 0x982000
	0x037C60F8 LDR X8, [X8 + 0xB0]
	0x037C60FC LDR X0, [X21 + 0x440]
	0x037C6100 ADD X2, X31, 0x98
	0x037C6104 MOV W1, W19
	0x037C6108 LDR X3, [X8]
	0x037C610C BL 0x2208D80
	0x037C6110 MOV X0, X31
	0x037C6114 B 0x37C6184
	0x037C6118 LDP V1, V0, [X20 + 0x10]
	0x037C611C LDR X8, [X20 + 0x30]
	0x037C6120 LDR V2, [X20]
	0x037C6124 LDP X1, X2, [X31 + 0xA0]
	0x037C6128 ADD X5, X31, 0x20
	0x037C612C MOV X0, X21
	0x037C6130 MOV W3, W19
	0x037C6134 MOV X4, X23
	0x037C6138 MOV W6, W22
	0x037C613C STR X8, [X31 + 0x50]
	0x037C6140 STP V1, V0, [X31 + 0x30]
	0x037C6144 STR V2, [X31 + 0x2]
	0x037C6148 STP X31, X31, [X31]
	0x037C614C BL 0x37C4AFC
	0x037C6150 LDR X8, [X20 + 0x30]
	0x037C6154 LDP V1, V0, [X20 + 0x10]
	0x037C6158 LDR V2, [X20]
	0x037C615C STR X8, [X31 + 0x90]
	0x037C6160 STP V1, V0, [X31 + 0x70]
	0x037C6164 STR V2, [X31 + 0x6]
	0x037C6168 CBZ X0, 0x37C6234

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, X0
	006 Add X0, X0, 24
	007 Move X2, X31
	008 Move X19, X1
	009 Call Collection.TryFindLayoutForType, X0, X1
	010 Move [X31], X0
	011 Move [X31+8], X1
	012 Add X0, X31, 0
	013 Move X1, X31
	014 Call InternedString.IsEmpty, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {46}
	019 Add X0, X31, 0
	020 Move X1, X31
	021 Call InternedString.IsEmpty, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {46}
	026 Compare X19, 0
	027 JumpIfEqual {53}
	028 Move X8, [X19]
	029 Move X0, X19
	030 Move X9, [X8+424]
	031 Move X1, [X8+432]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X1, X0
	034 Add X0, X31, 0
	035 Move X2, X31
	036 Call InternedString..ctor, X0, X1
	037 Move X8, [X19]
	038 Move X0, X19
	039 Move X9, [X8+424]
	040 Move X1, [X8+432]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X1, X0
	043 Move X0, X20
	044 Move X2, X19
	045 Call InputManager.RegisterControlLayout, X0, X1, X2
	046 Move X0, [X31]
	047 Move X1, [X31+8]
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X30, [X31+16]
	051 Add X31, X31, 48
	052 Return X0
	053 Call 0x1C17F20

Method: System.Boolean IsDeviceLayoutMarkedAsSupportedInSettings(UnityEngine.InputSystem.Utilities.InternedString layoutName)

Disassembly:
	0x037C616C LDR X8, [X31 + 0x90]
	0x037C6170 LDP V1, V0, [X31 + 0x70]
	0x037C6174 LDR V2, [X31 + 0x6]
	0x037C6178 STR X8, [X0 + 0x120]
	0x037C617C STP V1, V0, [X0 + 0x100]
	0x037C6180 STR V2, [X0 + 0xF]
	0x037C6184 LDP X20, X19, [X31 + 0xE0]
	0x037C6188 LDP X22, X21, [X31 + 0xD0]
	0x037C618C LDP X24, X23, [X31 + 0xC0]
	0x037C6190 LDP X30, X25, [X31 + 0xB0]
	0x037C6194 ADD X31, X31, 0xF0
	0x037C6198 RET
	0x037C619C LDR X8, [X20 + 0x30]
	0x037C61A0 LDP V1, V0, [X20 + 0x10]
	0x037C61A4 LDR V2, [X20]
	0x037C61A8 ADRP X0, 0x958000
	0x037C61AC STR X8, [X31 + 0x90]
	0x037C61B0 STP V1, V0, [X31 + 0x70]
	0x037C61B4 STR V2, [X31 + 0x6]
	0x037C61B8 LDR X0, [X0 + 0x4F0]
	0x037C61BC BL 0x1C16D08
	0x037C61C0 ADD X1, X31, 0x60
	0x037C61C4 BL 0x1C16E04
	0x037C61C8 MOV X19, X0
	0x037C61CC ADRP X0, 0x982000
	0x037C61D0 LDR X0, [X0 + 0x2A8]
	0x037C61D4 BL 0x1C16D08
	0x037C61D8 MOV X1, X19
	0x037C61DC MOV X2, X31
	0x037C61E0 BL 0x321EFD0
	0x037C61E4 MOV X19, X0
	0x037C61E8 ADRP X0, 0x935000
	0x037C61EC LDR X0, [X0 + 0x578]
	0x037C61F0 BL 0x1C16D08
	0x037C61F4 BL 0x1C16F10
	0x037C61F8 MOV X20, X0
	0x037C61FC ADRP X0, 0x980000
	0x037C6200 LDR X0, [X0 + 0x8D8]
	0x037C6204 BL 0x1C16D08
	0x037C6208 MOV X2, X0
	0x037C620C MOV X0, X20
	0x037C6210 MOV X1, X19
	0x037C6214 MOV X3, X31
	0x037C6218 BL 0x330E16C
	0x037C621C ADRP X0, 0x982000
	0x037C6220 LDR X0, [X0 + 0x2B0]
	0x037C6224 BL 0x1C16D08
	0x037C6228 MOV X1, X0
	0x037C622C MOV X0, X20
	0x037C6230 BL 0x1C16DEC
	0x037C6234 BL 0x1C16F20
	0x037C6238 SUB X31, X31, 0xB0
	0x037C623C STP X30, X19, [X31 + 0xA0]
	0x037C6240 LDR X9, [X1 + 0x30]
	0x037C6244 LDP V1, V0, [X1 + 0x10]
	0x037C6248 LDR V2, [X1]
	0x037C624C MOV X19, X1
	0x037C6250 MOV W8, W5
	0x037C6254 STR X9, [X31 + 0x90]
	0x037C6258 STP V1, V0, [X31 + 0x70]
	0x037C625C STR V2, [X31 + 0x6]
	0x037C6260 ADD X5, X31, 0x60
	0x037C6264 MOV X1, X2
	0x037C6268 MOV X2, X3
	0x037C626C MOV W3, W8
	0x037C6270 STP X31, X31, [X31]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X21, 0xC1C000
	009 Move W8, [X21+476]
	010 Move X19, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x983000
	018 Move X0, [X0+72]
	019 Call 0x1C17CF4
	020 Move X0, 0x983000
	021 Move X0, [X0+592]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+476], W8
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Move X0, [X22+1152]
	028 Compare X0, 0
	029 JumpIfEqual {86}
	030 Move X1, X31
	031 Call InputSettings.get_supportedDevices, X0
	032 Move X8, X1
	033 ShiftRight X8, 32
	034 And X8, X8, 0x7FFFFFFF
	035 Move [X31+16], X0
	036 Move [X31+24], X1
	037 Compare W8, 0
	038 JumpIfEqual {77}
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X23, 0x983000
	041 Move X23, [X23+592]
	042 Move W21, W31
	043 Add X22, X22, 24
	044 Move X2, [X23]
	045 Add X0, X31, 16
	046 Move W1, W21
	047 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	048 Move X1, X0
	049 Add X0, X31, 0
	050 Move X2, X31
	051 Call InternedString..ctor, X0, X1
	052 Move X2, [X31]
	053 Move X3, [X31+8]
	054 Move X0, X20
	055 Move X1, X19
	056 Move X4, X31
	057 Call InternedString.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {77}
	062 Move X1, [X31]
	063 Move X2, [X31+8]
	064 Move X0, X22
	065 Move X3, X20
	066 Move X4, X19
	067 Move X5, X31
	068 Call Collection.IsBasedOn, X0, X1, X2
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {77}
	073 Move W8, [X31+28]
	074 Add W21, W21, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W0, W31
	077 Move W0, 1
	078 Move X20, [X31+64]
	079 Move X19, [X31+72]
	080 Move X22, [X31+48]
	081 Move X21, [X31+56]
	082 Move X30, [X31+32]
	083 Move X23, [X31+40]
	084 Add X31, X31, 80
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<System.String> ListControlLayouts(System.String basedOn = null)

Disassembly:
	0x037C6274 BL 0x37C4AFC
	0x037C6278 LDR X9, [X19 + 0x30]
	0x037C627C LDP V1, V0, [X19 + 0x10]
	0x037C6280 LDR V2, [X19]
	0x037C6284 MOV X8, X0
	0x037C6288 STR X9, [X31 + 0x50]
	0x037C628C STP V1, V0, [X31 + 0x30]
	0x037C6290 STR V2, [X31 + 0x2]
	0x037C6294 CBZ X0, 0x37C62C0
	0x037C6298 LDR X9, [X31 + 0x50]
	0x037C629C LDP V1, V0, [X31 + 0x30]
	0x037C62A0 LDR V2, [X31 + 0x2]
	0x037C62A4 STR X9, [X8 + 0x120]
	0x037C62A8 STP V1, V0, [X8 + 0x100]
	0x037C62AC STR V2, [X8 + 0xF]
	0x037C62B0 LDP X30, X19, [X31 + 0xA0]
	0x037C62B4 MOV X0, X8
	0x037C62B8 ADD X31, X31, 0xB0
	0x037C62BC RET
	0x037C62C0 BL 0x1C16F20
	0x037C62C4 B 0x37C62C8
	0x037C62C8 CMP W1, 0x1
	0x037C62CC B.NE 0x37C62F4
	0x037C62D0 BL 0x3EB1AD0
	0x037C62D4 LDR X19, [X0]
	0x037C62D8 BL 0x3EB1AE0
	0x037C62DC CBNZ X19, 0x37C62E8
	0x037C62E0 MOV X8, X31
	0x037C62E4 B 0x37C62B0
	0x037C62E8 MOV X0, X19
	0x037C62EC BL 0x1C16F18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC1C000
	007 Move X22, 0x983000
	008 Move W8, [X21+477]
	009 Move X22, [X22+600]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x983000
	017 Move X0, [X0+600]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+477], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move TEMP, 1
	027 Not TEMP
	028 Move W8, TEMP
	029 Move X0, X31
	030 Move [X21+16], W8
	031 Call Environment.get_CurrentManagedThreadId
	032 Move [X21+32], W0
	033 Move [X21+48], X19
	034 Move [X21+56], X20
	035 Move X0, X21
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return X0

Method: System.Int32 GetControls(System.String path, ref UnityEngine.InputSystem.InputControlList`1<TControl> controls)

Disassembly:
	0x022095B8 ADRP X0, 0x1F12000
	0x022095BC LDR X0, [X0 + 0x270]
	0x022095C0 BL 0x1C16CF4
	0x022095C4 ADRP X0, 0x1EEA000
	0x022095C8 LDR X0, [X0 + 0x5A8]
	0x022095CC BL 0x1C16CF4
	0x022095D0 LDR X8, [X21 + 0x38]
	0x022095D4 CBNZ X8, 0x22095E0
	0x022095D8 MOV X0, X21
	0x022095DC BL 0x1C5C6E0
	0x022095E0 CBZ X22, 0x2209858
	0x022095E4 ADRP X20, 0x1F12000
	0x022095E8 LDR X20, [X20 + 0xD18]
	0x022095EC LDR X23, [X22 + 0x18]
	0x022095F0 LDR X0, [X20]
	0x022095F4 LDR W8, [X0 + 0xE0]
	0x022095F8 CBNZ W8, 0x2209600
	0x022095FC BL 0x1C16DFC
	0x02209600 CBNZ W23, 0x2209800
	0x02209604 LDR X0, [X20]
	0x02209608 LDR X23, [X22 + 0x18]
	0x0220960C LDR W8, [X0 + 0xE0]
	0x02209610 CBNZ W8, 0x2209618
	0x02209614 BL 0x1C16DFC
	0x02209618 ANDS X31, X23, 0x7FFFFFFFF
	0x0220961C B.NE 0x2209800
	0x02209620 LDR X0, [X20]
	0x02209624 LDR X21, [X22 + 0x78]
	0x02209628 ADD X23, X22, 0x10
	0x0220962C LDR W8, [X0 + 0xE0]
	0x02209630 CBNZ W8, 0x2209638
	0x02209634 BL 0x1C16DFC
	0x02209638 MOV X0, X23
	0x0220963C MOV X1, X31
	0x02209640 BL 0x3800B6C
	0x02209644 ADRP X8, 0x1EEA000
	0x02209648 LDR X8, [X8 + 0x5A8]
	0x0220964C MOV W22, W0
	0x02209650 LDR X8, [X8]
	0x02209654 LDR W9, [X8 + 0xE0]
	0x02209658 CBNZ W9, 0x2209664
	0x0220965C MOV X0, X8
	0x02209660 BL 0x1C16DFC
	0x02209664 MOV W1, W22
	0x02209668 MOVZ W0, 0x4
	0x0220966C MOV X2, X31
	0x02209670 BL 0x337EEA0
	0x02209674 CBZ X21, 0x22097FC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X3+56]
	010 Move X19, X3
	011 Move X20, X2
	012 Move X21, X1
	013 Move X22, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Move X0, X21
	019 Move X1, X31
	020 Call String.IsNullOrEmpty, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {45}
	025 Move W24, [X22+112]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X25, X31
	028 Move W23, W31
	029 Move X8, [X22+120]
	030 Compare X8, 0
	031 JumpIfEqual {56}
	032 Move W9, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, [X19+56]
	035 Add X8, X8, X25
	036 Move X0, [X8+32]
	037 Move X1, X21
	038 Move X4, [X9+8]
	039 Move W2, W31
	040 Move X3, X20
	041 Call 0x2200C70, X0, X1, X2, X3
	042 Add X25, X25, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add W23, W0, W23
	045 Move W23, W31
	046 Move W0, W23
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X30, [X31+64]
	054 Move X25, [X31+72]
	055 Return X0
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: System.Void SetDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x037C6324 MOV X21, X0
	0x037C6328 TBNZ X8, 0x0, 0x37C634C
	0x037C632C ADRP X0, 0x982000
	0x037C6330 LDR X0, [X0 + 0x2B8]
	0x037C6334 BL 0x1C16CF4
	0x037C6338 ADRP X0, 0x982000
	0x037C633C LDR X0, [X0 + 0x2C0]
	0x037C6340 BL 0x1C16CF4
	0x037C6344 MOVZ W8, 0x1
	0x037C6348 STRB W8, [X20 + 0x208]
	0x037C634C LDR X8, [X21 + 0x490]
	0x037C6350 CBZ X8, 0x37C640C
	0x037C6354 CBZ X19, 0x37C6424
	0x037C6358 LDRSW X9, [X19 + 0xE8]
	0x037C635C LDR W10, [X8 + 0x18]
	0x037C6360 CMP W9, W10
	0x037C6364 B.GE 0x37C640C
	0x037C6368 CMP W9, W10
	0x037C636C B.CS 0x37C6428
	0x037C6370 MOVZ W10, 0x38
	0x037C6374 MADD X8, X9, X10, X8
	0x037C6378 ADD X0, X8, 0x20
	0x037C637C BL 0x37CC488
	0x037C6380 LDR W8, [X21 + 0x498]
	0x037C6384 CMP W8, 0x1
	0x037C6388 B.LT 0x37C640C
	0x037C638C ADRP X23, 0x982000
	0x037C6390 ADRP X24, 0x982000
	0x037C6394 LDR X23, [X23 + 0x2B8]
	0x037C6398 LDR X24, [X24 + 0x2C0]
	0x037C639C MOV W20, W31
	0x037C63A0 MOV X22, X31
	0x037C63A4 ADD X21, X21, 0x498
	0x037C63A8 LDR X2, [X23]
	0x037C63AC ADD X8, X31, 0x0
	0x037C63B0 MOV X0, X21
	0x037C63B4 MOV W1, W20
	0x037C63B8 BL 0x2DF4D8C
	0x037C63BC LDR X8, [X31]
	0x037C63C0 CMP X8, 0x0
	0x037C63C4 CSEL X22, X22, X8, EQ
	0x037C63C8 CBZ X8, 0x37C63D4
	0x037C63CC CBZ X22, 0x37C6424
	0x037C63D0 LDR X8, [X22 + 0x78]
	0x037C63D4 CMP X8, X19
	0x037C63D8 B.NE 0x37C63FC
	0x037C63DC LDR X3, [X24]
	0x037C63E0 MOVI V0.2D, 0x0
	0x037C63E4 ADD X2, X31, 0x0
	0x037C63E8 MOV X0, X21
	0x037C63EC MOV W1, W20
	0x037C63F0 STR X31, [X31 + 0x20]
	0x037C63F4 STP V0, V0, [X31]
	0x037C63F8 BL 0x2DF4E38
	0x037C63FC LDR W8, [X21]
	0x037C6400 ADD W20, W20, 0x1
	0x037C6404 CMP W20, W8
	0x037C6408 B.LT 0x37C63A8
	0x037C640C LDP X20, X19, [X31 + 0x60]
	0x037C6410 LDP X22, X21, [X31 + 0x50]
	0x037C6414 LDP X24, X23, [X31 + 0x40]
	0x037C6418 LDR X30, [X31 + 0x30]
	0x037C641C ADD X31, X31, 0x70
	0x037C6420 RET
	0x037C6424 BL 0x1C16F20
	0x037C6428 BL 0x1C16F28
	0x037C642C STP X30, X21, [X31 - 0x20]!
	0x037C6430 STP X20, X19, [X31 + 0x10]
	0x037C6434 ADRP X21, 0xC1B000
	0x037C6438 ADRP X20, 0x982000
	0x037C643C LDRB W8, [X21 + 0x1E8]
	0x037C6440 LDR X20, [X20 + 0x2C8]
	0x037C6444 MOV X19, X0
	0x037C6448 TBNZ X8, 0x0, 0x37C6460
	0x037C644C ADRP X0, 0x982000
	0x037C6450 LDR X0, [X0 + 0x2C8]
	0x037C6454 BL 0x1C16CF4
	0x037C6458 MOVZ W8, 0x1
	0x037C645C STRB W8, [X21 + 0x1E8]
	0x037C6460 LDR X0, [X19 + 0xA0]
	0x037C6464 LDR W1, [X19 + 0x98]
	0x037C6468 LDR X2, [X20]
	0x037C646C BL 0x2175B30
	0x037C6470 STR W31, [X19 + 0x98]
	0x037C6474 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xC1C000
	007 Move W8, [X21+478]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31+16], X2
	011 Move [X31+24], X3
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x956000
	017 Move X0, [X0+3528]
	018 Call 0x1C17CF4
	019 Move X0, 0x956000
	020 Move X0, [X0+3536]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+478], W8
	024 Compare X19, 0
	025 JumpIfEqual {95}
	026 Move X0, X19
	027 Move X1, X31
	028 Call InputControl.get_usages, X0
	029 Move X8, X1
	030 ShiftRight X8, 32
	031 And X8, X8, 0x7FFFFFFF
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move [X31], X0
	034 Move [X31+8], X1
	035 Move X0, X19
	036 Move X1, X31
	037 Call InputControl.get_usages, X0
	038 Move X8, 0x956000
	039 Move X8, [X8+3536]
	040 Move [X31], X0
	041 Move [X31+8], X1
	042 Add X0, X31, 0
	043 Move W1, W31
	044 Move X2, [X8]
	045 Call ReadOnlyArray`1<InternedString>.get_Item, X0, X1
	046 Move X2, [X31+16]
	047 Move X3, [X31+24]
	048 Move X4, X31
	049 Call InternedString.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {89}
	054 Move X0, X19
	055 Move X1, X31
	056 Call InputControl.get_usages, X0
	057 Move X8, X1
	058 ShiftRight X8, 32
	059 And X8, X8, 0x7FFFFFFF
	060 Move [X31], X0
	061 Move [X31+8], X1
	062 Compare X8, 0
	063 JumpIfNotEqual {71}
	064 Add X0, X31, 16
	065 Move X1, X31
	066 Call InternedString.IsEmpty, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {89}
	071 Move X0, X19
	072 Move X1, X31
	073 Call InputDevice.ClearDeviceUsages, X0
	074 Add X0, X31, 16
	075 Move X1, X31
	076 Call InternedString.IsEmpty, X0
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {86}
	081 Move X1, [X31+16]
	082 Move X2, [X31+24]
	083 Move X0, X19
	084 Move X3, X31
	085 Call InputDevice.AddDeviceUsage, X0, X1
	086 Move X0, X20
	087 Move X1, X19
	088 Call InputManager.NotifyUsageChanged, X0, X1
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Add X31, X31, 64
	094 Return 
	095 Move X0, 0x933000
	096 Move X0, [X0+1320]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0x956000
	101 Move X0, [X0+3360]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X19
	105 Move X2, X31
	106 Call ArgumentNullException..ctor, X0, X1
	107 Move X0, 0x983000
	108 Move X0, [X0+608]
	109 Call 0x1C17D08
	110 Move X1, X0
	111 Move X0, X19
	112 Call 0x1C17DEC

Method: System.Void AddDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x037BDD04 B.EQ 0x37BDE44
	0x037BDD08 SUBS X9, X9, 0x1
	0x037BDD0C ADD X10, X10, 0x10
	0x037BDD10 B.NE 0x37BDCFC
	0x037BDD14 B 0x37BDE34
	0x037BDD18 ADRP X21, 0x98A000
	0x037BDD1C LDR X21, [X21 + 0xE38]
	0x037BDD20 LDR X0, [X21]
	0x037BDD24 LDR W8, [X0 + 0xE0]
	0x037BDD28 CBNZ W8, 0x37BDD34
	0x037BDD2C BL 0x1C16DFC
	0x037BDD30 LDR X0, [X21]
	0x037BDD34 ADRP X10, 0x98A000
	0x037BDD38 LDR X9, [X0 + 0xB8]
	0x037BDD3C LDR X8, [X20]
	0x037BDD40 LDR X10, [X10 + 0xDE8]
	0x037BDD44 LDP X22, X21, [X9 + 0x20]
	0x037BDD48 LDRH W9, [X8 + 0x12E]
	0x037BDD4C LDR X1, [X10]
	0x037BDD50 CBZ X9, 0x37BDE34
	0x037BDD54 LDR X10, [X8 + 0xB0]
	0x037BDD58 ADD X10, X10, 0x8
	0x037BDD5C LDUR X11, [X10 - 0x8]
	0x037BDD60 CMP X11, X1
	0x037BDD64 B.EQ 0x37BDE44
	0x037BDD68 SUBS X9, X9, 0x1
	0x037BDD6C ADD X10, X10, 0x10
	0x037BDD70 B.NE 0x37BDD5C
	0x037BDD74 B 0x37BDE34
	0x037BDD78 ADRP X21, 0x98A000
	0x037BDD7C LDR X21, [X21 + 0xE38]
	0x037BDD80 LDR X0, [X21]
	0x037BDD84 LDR W8, [X0 + 0xE0]
	0x037BDD88 CBNZ W8, 0x37BDD94
	0x037BDD8C BL 0x1C16DFC
	0x037BDD90 LDR X0, [X21]
	0x037BDD94 ADRP X10, 0x98A000
	0x037BDD98 LDR X9, [X0 + 0xB8]
	0x037BDD9C LDR X8, [X20]
	0x037BDDA0 LDR X10, [X10 + 0xDE8]
	0x037BDDA4 LDP X22, X21, [X9 + 0x30]
	0x037BDDA8 LDRH W9, [X8 + 0x12E]
	0x037BDDAC LDR X1, [X10]
	0x037BDDB0 CBZ X9, 0x37BDE34
	0x037BDDB4 LDR X10, [X8 + 0xB0]
	0x037BDDB8 ADD X10, X10, 0x8
	0x037BDDBC LDUR X11, [X10 - 0x8]
	0x037BDDC0 CMP X11, X1
	0x037BDDC4 B.EQ 0x37BDE44
	0x037BDDC8 SUBS X9, X9, 0x1
	0x037BDDCC ADD X10, X10, 0x10
	0x037BDDD0 B.NE 0x37BDDBC
	0x037BDDD4 B 0x37BDE34
	0x037BDDD8 ADRP X21, 0x98A000
	0x037BDDDC LDR X21, [X21 + 0xE38]
	0x037BDDE0 LDR X0, [X21]
	0x037BDDE4 LDR W8, [X0 + 0xE0]
	0x037BDDE8 CBNZ W8, 0x37BDDF4
	0x037BDDEC BL 0x1C16DFC
	0x037BDDF0 LDR X0, [X21]
	0x037BDDF4 ADRP X10, 0x98A000
	0x037BDDF8 LDR X9, [X0 + 0xB8]
	0x037BDDFC LDR X8, [X20]
	0x037BDE00 LDR X10, [X10 + 0xDE8]
	0x037BDE04 LDP X22, X21, [X9 + 0x40]
	0x037BDE08 LDRH W9, [X8 + 0x12E]
	0x037BDE0C LDR X1, [X10]
	0x037BDE10 CBZ X9, 0x37BDE34
	0x037BDE14 LDR X10, [X8 + 0xB0]
	0x037BDE18 ADD X10, X10, 0x8
	0x037BDE1C LDUR X11, [X10 - 0x8]
	0x037BDE20 CMP X11, X1
	0x037BDE24 B.EQ 0x37BDE44
	0x037BDE28 SUBS X9, X9, 0x1
	0x037BDE2C ADD X10, X10, 0x10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC25000
	007 Move W8, [X21+479]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31], X2
	011 Move [X31+8], X3
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x95F000
	017 Move X0, [X0+3880]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+479], W8
	021 Compare X19, 0
	022 JumpIfEqual {57}
	023 Add X0, X31, 0
	024 Move X1, X31
	025 Call InternedString.IsEmpty, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {69}
	030 Move X21, 0x95F000
	031 Move X21, [X21+3880]
	032 Move X0, X19
	033 Move X1, X31
	034 Call InputControl.get_usages, X0
	035 Move X2, [X31]
	036 Move X3, [X31+8]
	037 Move X4, [X21]
	038 Call 0x223D25C, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {51}
	043 Move X1, [X31]
	044 Move X2, [X31+8]
	045 Move X0, X19
	046 Move X3, X31
	047 Call InputDevice.AddDeviceUsage, X0, X1
	048 Move X0, X20
	049 Move X1, X19
	050 Call InputManager.NotifyUsageChanged, X0, X1
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+16]
	054 Move X21, [X31+24]
	055 Add X31, X31, 48
	056 Return 
	057 Move X0, 0x93C000
	058 Move X0, [X0+1320]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0x95F000
	063 Move X0, [X0+3360]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Move X2, X31
	068 Call ArgumentNullException..ctor, X0, X1
	069 Move X0, 0x93F000
	070 Move X0, [X0+1400]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0x98B000
	075 Move X0, [X0+3528]
	076 Call 0x1C17D08
	077 Move X20, X0
	078 Move X0, 0x98B000
	079 Move X0, [X0+3536]
	080 Call 0x1C17D08
	081 Move X2, X0
	082 Move X0, X19
	083 Move X1, X20
	084 Move X3, X31
	085 Call ArgumentException..ctor, X0, X1, X2
	086 Move X0, 0x98B000
	087 Move X0, [X0+3544]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC

Method: System.Void RemoveDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x037BDEBC ADRP X21, 0x98A000
	0x037BDEC0 ADRP X20, 0x98A000
	0x037BDEC4 LDR X26, [X26 + 0xE90]
	0x037BDEC8 LDR X19, [X19 + 0xE38]
	0x037BDECC LDR X25, [X25 + 0xE98]
	0x037BDED0 LDRB W8, [X27 + 0x185]
	0x037BDED4 LDR X24, [X24 + 0xEA0]
	0x037BDED8 LDR X23, [X23 + 0xEA8]
	0x037BDEDC LDR X22, [X22 + 0xEB0]
	0x037BDEE0 LDR X21, [X21 + 0xEB8]
	0x037BDEE4 LDR X20, [X20 + 0xEC0]
	0x037BDEE8 TBNZ X8, 0x0, 0x37BDF54
	0x037BDEEC ADRP X0, 0x98A000
	0x037BDEF0 LDR X0, [X0 + 0xE38]
	0x037BDEF4 BL 0x1C16CF4
	0x037BDEF8 ADRP X0, 0x98A000
	0x037BDEFC LDR X0, [X0 + 0xEB0]
	0x037BDF00 BL 0x1C16CF4
	0x037BDF04 ADRP X0, 0x98A000
	0x037BDF08 LDR X0, [X0 + 0xE90]
	0x037BDF0C BL 0x1C16CF4
	0x037BDF10 ADRP X0, 0x98A000
	0x037BDF14 LDR X0, [X0 + 0xE98]
	0x037BDF18 BL 0x1C16CF4
	0x037BDF1C ADRP X0, 0x98A000
	0x037BDF20 LDR X0, [X0 + 0xEA8]
	0x037BDF24 BL 0x1C16CF4
	0x037BDF28 ADRP X0, 0x98A000
	0x037BDF2C LDR X0, [X0 + 0xEA0]
	0x037BDF30 BL 0x1C16CF4
	0x037BDF34 ADRP X0, 0x98A000
	0x037BDF38 LDR X0, [X0 + 0xEC0]
	0x037BDF3C BL 0x1C16CF4
	0x037BDF40 ADRP X0, 0x98A000
	0x037BDF44 LDR X0, [X0 + 0xEB8]
	0x037BDF48 BL 0x1C16CF4
	0x037BDF4C MOVZ W8, 0x1
	0x037BDF50 STRB W8, [X27 + 0x185]
	0x037BDF54 LDR X1, [X26]
	0x037BDF58 ADD X0, X31, 0x60
	0x037BDF5C MOV X2, X31
	0x037BDF60 STP X31, X31, [X31 + 0x60]
	0x037BDF64 BL 0x3376AD0
	0x037BDF68 LDR X8, [X19]
	0x037BDF6C LDR V0, [X31 + 0x6]
	0x037BDF70 ADD X0, X31, 0x50
	0x037BDF74 MOV X2, X31
	0x037BDF78 LDR X8, [X8 + 0xB8]
	0x037BDF7C STR V0, [X8]
	0x037BDF80 LDR X1, [X25]
	0x037BDF84 STP X31, X31, [X31 + 0x50]
	0x037BDF88 BL 0x3376AD0
	0x037BDF8C LDR X8, [X19]
	0x037BDF90 LDR V0, [X31 + 0x5]
	0x037BDF94 ADD X0, X31, 0x40
	0x037BDF98 MOV X2, X31
	0x037BDF9C LDR X8, [X8 + 0xB8]
	0x037BDFA0 STR V0, [X8 + 0x1]
	0x037BDFA4 LDR X1, [X24]
	0x037BDFA8 STP X31, X31, [X31 + 0x40]
	0x037BDFAC BL 0x3376AD0
	0x037BDFB0 LDR X8, [X19]
	0x037BDFB4 LDR V0, [X31 + 0x4]
	0x037BDFB8 ADD X0, X31, 0x30
	0x037BDFBC MOV X2, X31
	0x037BDFC0 LDR X8, [X8 + 0xB8]
	0x037BDFC4 STR V0, [X8 + 0x2]
	0x037BDFC8 LDR X1, [X23]
	0x037BDFCC STP X31, X31, [X31 + 0x30]
	0x037BDFD0 BL 0x3376AD0
	0x037BDFD4 LDR X8, [X19]
	0x037BDFD8 LDR V0, [X31 + 0x3]
	0x037BDFDC ADD X0, X31, 0x20
	0x037BDFE0 MOV X2, X31
	0x037BDFE4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC25000
	007 Move W8, [X21+480]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31], X2
	011 Move [X31+8], X3
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x95F000
	017 Move X0, [X0+3880]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+480], W8
	021 Compare X19, 0
	022 JumpIfEqual {57}
	023 Add X0, X31, 0
	024 Move X1, X31
	025 Call InternedString.IsEmpty, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {69}
	030 Move X21, 0x95F000
	031 Move X21, [X21+3880]
	032 Move X0, X19
	033 Move X1, X31
	034 Call InputControl.get_usages, X0
	035 Move X2, [X31]
	036 Move X3, [X31+8]
	037 Move X4, [X21]
	038 Call 0x223D25C, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {51}
	043 Move X1, [X31]
	044 Move X2, [X31+8]
	045 Move X0, X19
	046 Move X3, X31
	047 Call InputDevice.RemoveDeviceUsage, X0, X1
	048 Move X0, X20
	049 Move X1, X19
	050 Call InputManager.NotifyUsageChanged, X0, X1
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+16]
	054 Move X21, [X31+24]
	055 Add X31, X31, 48
	056 Return 
	057 Move X0, 0x93C000
	058 Move X0, [X0+1320]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0x95F000
	063 Move X0, [X0+3360]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Move X2, X31
	068 Call ArgumentNullException..ctor, X0, X1
	069 Move X0, 0x93F000
	070 Move X0, [X0+1400]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0x98B000
	075 Move X0, [X0+3528]
	076 Call 0x1C17D08
	077 Move X20, X0
	078 Move X0, 0x98B000
	079 Move X0, [X0+3536]
	080 Call 0x1C17D08
	081 Move X2, X0
	082 Move X0, X19
	083 Move X1, X20
	084 Move X3, X31
	085 Call ArgumentException..ctor, X0, X1, X2
	086 Move X0, 0x98B000
	087 Move X0, [X0+3552]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC

Method: System.Void NotifyUsageChanged(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037C6478 LDP X30, X21, [X31], #0x20
	0x037C647C RET
	0x037C6480 SUB X31, X31, 0x90
	0x037C6484 STR D8, [X31 + 0x20]
	0x037C6488 STP X29, X30, [X31 + 0x30]
	0x037C648C STP X28, X27, [X31 + 0x40]
	0x037C6490 STP X26, X25, [X31 + 0x50]
	0x037C6494 STP X24, X23, [X31 + 0x60]
	0x037C6498 STP X22, X21, [X31 + 0x70]
	0x037C649C STP X20, X19, [X31 + 0x80]
	0x037C64A0 ADRP X22, 0xC1B000
	0x037C64A4 LDRB W8, [X22 + 0x1E9]
	0x037C64A8 MOV W21, W2
	0x037C64AC MOV X19, X1
	0x037C64B0 MOV X20, X0
	0x037C64B4 STRH W3, [X31 + 0x2C]
	0x037C64B8 TBNZ X8, 0x0, 0x37C653C
	0x037C64BC ADRP X0, 0x981000
	0x037C64C0 LDR X0, [X0 + 0xD28]
	0x037C64C4 BL 0x1C16CF4
	0x037C64C8 ADRP X0, 0x982000
	0x037C64CC LDR X0, [X0 + 0x2D0]
	0x037C64D0 BL 0x1C16CF4
	0x037C64D4 ADRP X0, 0x955000
	0x037C64D8 LDR X0, [X0 + 0xED0]
	0x037C64DC BL 0x1C16CF4
	0x037C64E0 ADRP X0, 0x955000
	0x037C64E4 LDR X0, [X0 + 0xD18]
	0x037C64E8 BL 0x1C16CF4
	0x037C64EC ADRP X0, 0x981000
	0x037C64F0 LDR X0, [X0 + 0xFE8]
	0x037C64F4 BL 0x1C16CF4
	0x037C64F8 ADRP X0, 0x955000
	0x037C64FC LDR X0, [X0 + 0xD68]
	0x037C6500 BL 0x1C16CF4
	0x037C6504 ADRP X0, 0x981000
	0x037C6508 LDR X0, [X0 + 0xFE0]
	0x037C650C BL 0x1C16CF4
	0x037C6510 ADRP X0, 0x931000
	0x037C6514 LDR X0, [X0 + 0xBF0]
	0x037C6518 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xC1C000
	008 Move X21, 0x982000
	009 Move X22, 0x982000
	010 Move W8, [X23+481]
	011 Move X21, [X21+3392]
	012 Move X22, [X22+3368]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x982000
	020 Move X0, [X0+3368]
	021 Call 0x1C17CF4
	022 Move X0, 0x982000
	023 Move X0, [X0+3392]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+481], W8
	027 Move W1, 6
	028 Move X0, X19
	029 Move X2, X31
	030 Call InputActionState.OnDeviceChange, X0, X1
	031 Move X3, [X21]
	032 Move X5, [X22]
	033 Add X0, X20, 224
	034 Move W2, 6
	035 Move X1, X19
	036 Move X4, X31
	037 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	038 Compare X19, 0
	039 JumpIfEqual {51}
	040 Move X8, [X19]
	041 Move X0, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X2, [X8+584]
	047 Move X1, [X8+592]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 CallNoReturn X2
	051 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputDevice AddDevice(System.Type type, System.String name = null)

Disassembly:
	0x037C651C ADRP X0, 0x931000
	0x037C6520 LDR X0, [X0 + 0xBF8]
	0x037C6524 BL 0x1C16CF4
	0x037C6528 ADRP X0, 0x982000
	0x037C652C LDR X0, [X0 + 0x2D8]
	0x037C6530 BL 0x1C16CF4
	0x037C6534 MOVZ W8, 0x1
	0x037C6538 STRB W8, [X22 + 0x1E9]
	0x037C653C STP X31, X31, [X31 + 0x10]
	0x037C6540 STP X31, X31, [X31]
	0x037C6544 CBZ X19, 0x37C68F4
	0x037C6548 MOV X0, X19
	0x037C654C MOV X1, X31
	0x037C6550 BL 0x376EE00
	0x037C6554 TBZ X0, 0x0, 0x37C693C
	0x037C6558 ADRP X23, 0x982000
	0x037C655C ADRP X24, 0x981000
	0x037C6560 LDR X23, [X23 + 0x2D8]
	0x037C6564 LDR X24, [X24 + 0xD28]
	0x037C6568 TBZ X21, 0x0, 0x37C6574
	0x037C656C MOVZ W26, 0x1
	0x037C6570 B 0x37C6588
	0x037C6574 MOV X0, X19
	0x037C6578 MOV X1, X31
	0x037C657C BL 0x377B248
	0x037C6580 ORN W8, W31, W0, 0x0
	0x037C6584 AND W26, W8, 0x1
	0x037C6588 CMP W26, 0x0
	0x037C658C MOVZ W8, 0x8
	0x037C6590 CINC W22, W8, NE
	0x037C6594 MOV X0, X19
	0x037C6598 MOV W1, W22
	0x037C659C MOV X2, X31
	0x037C65A0 BL 0x3751064
	0x037C65A4 LDR X3, [X23]
	0x037C65A8 LDR X5, [X24]
	0x037C65AC ADD X0, X20, 0xE0
	0x037C65B0 MOV X1, X19
	0x037C65B4 MOV W2, W22
	0x037C65B8 MOV X4, X31
	0x037C65BC BL 0x21AE04C
	0x037C65C0 TBNZ X21, 0x0, 0x37C6620
	0x037C65C4 ADRP X22, 0x982000
	0x037C65C8 LDR X22, [X22 + 0x2D0]
	0x037C65CC MOV X0, X19
	0x037C65D0 LDR X1, [X22]
	0x037C65D4 BL 0x1C16E00
	0x037C65D8 CBZ X0, 0x37C6620
	0x037C65DC LDR X8, [X0]
	0x037C65E0 LDR X1, [X22]
	0x037C65E4 MOV X21, X0
	0x037C65E8 LDRH W9, [X8 + 0x12E]
	0x037C65EC CBZ X9, 0x37C6610
	0x037C65F0 LDR X10, [X8 + 0xB0]
	0x037C65F4 ADD X10, X10, 0x8
	0x037C65F8 LDUR X11, [X10 - 0x8]
	0x037C65FC CMP X11, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xC1C000
	008 Move X23, 0x92E000
	009 Move W8, [X22+482]
	010 Move X23, [X23+1728]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x92E000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+482], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X31
	030 Move X2, X31
	031 Call Type.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {54}
	036 Move X0, X20
	037 Move X1, X21
	038 Call InputManager.FindOrRegisterDeviceLayoutForType, X0, X1
	039 Move X2, X31
	040 Call InternedString.op_Implicit, X0
	041 Move X1, X0
	042 Move X0, X20
	043 Move X2, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X3, X31
	049 Move X4, X31
	050 Move X30, [X31+48]
	051 Move X23, [X31+56]
	052 Call InputManager.AddDevice, X0, X1, X2, X3
	053 Return X0
	054 Move X0, 0x933000
	055 Move X0, [X0+1320]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0x936000
	060 Move X0, [X0+1512]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call ArgumentNullException..ctor, X0, X1
	066 Move X0, 0x983000
	067 Move X0, [X0+616]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputDevice AddDevice(System.String layout, System.String name = null, UnityEngine.InputSystem.Utilities.InternedString variants = null)

Disassembly:
	0x037BDBC4 B 0x37BD9A4
	0x037BDBC8 MOV X2, X1
	0x037BDBCC MOVZ W1, 0x9
	0x037BDBD0 B 0x37BD9A4
	0x037BDBD4 STR X30, [X31 - 0x30]!
	0x037BDBD8 STP X22, X21, [X31 + 0x10]
	0x037BDBDC STP X20, X19, [X31 + 0x20]
	0x037BDBE0 ADRP X22, 0xC24000
	0x037BDBE4 LDRB W8, [X22 + 0x184]
	0x037BDBE8 MOV X19, X2
	0x037BDBEC MOV X21, X1
	0x037BDBF0 MOV X20, X0
	0x037BDBF4 TBNZ X8, 0x0, 0x37BDC18
	0x037BDBF8 ADRP X0, 0x98A000
	0x037BDBFC LDR X0, [X0 + 0xDE8]
	0x037BDC00 BL 0x1C16CF4
	0x037BDC04 ADRP X0, 0x98A000
	0x037BDC08 LDR X0, [X0 + 0xE38]
	0x037BDC0C BL 0x1C16CF4
	0x037BDC10 MOVZ W8, 0x1
	0x037BDC14 STRB W8, [X22 + 0x184]
	0x037BDC18 LDR X20, [X20 + 0x18]
	0x037BDC1C CBZ X20, 0x37BDCA8
	0x037BDC20 UBFM X8, X21, 0x20, 0x3F
	0x037BDC24 SUB W8, W8, 0x2
	0x037BDC28 CMP W8, 0x5
	0x037BDC2C B.HI 0x37BDCA8
	0x037BDC30 ADRP X9, 0xFFFFFFFFFD3DA000
	0x037BDC34 ADD X9, X9, 0x951
	0x037BDC38 ADR X10, 0x10
	0x037BDC3C LDRB W11, [X9, X8, LSL]
	0x037BDC40 ADD X10, X10, X11, 0x2, LSL
	0x037BDC44 BR X10
	0x037BDC48 ADRP X21, 0x98A000
	0x037BDC4C LDR X21, [X21 + 0xE38]
	0x037BDC50 LDR X0, [X21]
	0x037BDC54 LDR W8, [X0 + 0xE0]
	0x037BDC58 CBNZ W8, 0x37BDC64
	0x037BDC5C BL 0x1C16DFC
	0x037BDC60 LDR X0, [X21]
	0x037BDC64 ADRP X10, 0x98A000
	0x037BDC68 LDR X9, [X0 + 0xB8]
	0x037BDC6C LDR X8, [X20]
	0x037BDC70 LDR X10, [X10 + 0xDE8]
	0x037BDC74 LDP X22, X21, [X9 + 0x10]
	0x037BDC78 LDRH W9, [X8 + 0x12E]
	0x037BDC7C LDR X1, [X10]
	0x037BDC80 CBZ X9, 0x37BDE34
	0x037BDC84 LDR X10, [X8 + 0xB0]
	0x037BDC88 ADD X10, X10, 0x8
	0x037BDC8C LDUR X11, [X10 - 0x8]
	0x037BDC90 CMP X11, X1
	0x037BDC94 B.EQ 0x37BDE44
	0x037BDC98 SUBS X9, X9, 0x1
	0x037BDC9C ADD X10, X10, 0x10
	0x037BDCA0 B.NE 0x37BDC8C
	0x037BDCA4 B 0x37BDE34
	0x037BDCA8 LDP X20, X19, [X31 + 0x20]
	0x037BDCAC LDP X22, X21, [X31 + 0x10]
	0x037BDCB0 LDR X30, [X31], #0x30
	0x037BDCB4 RET
	0x037BDCB8 ADRP X21, 0x98A000
	0x037BDCBC LDR X21, [X21 + 0xE38]
	0x037BDCC0 LDR X0, [X21]
	0x037BDCC4 LDR W8, [X0 + 0xE0]
	0x037BDCC8 CBNZ W8, 0x37BDCD4
	0x037BDCCC BL 0x1C16DFC
	0x037BDCD0 LDR X0, [X21]
	0x037BDCD4 ADRP X10, 0x98A000
	0x037BDCD8 LDR X9, [X0 + 0xB8]
	0x037BDCDC LDR X8, [X20]
	0x037BDCE0 LDR X10, [X10 + 0xDE8]
	0x037BDCE4 LDP X22, X21, [X9]
	0x037BDCE8 LDRH W9, [X8 + 0x12E]
	0x037BDCEC LDR X1, [X10]
	0x037BDCF0 CBZ X9, 0x37BDE34
	0x037BDCF4 LDR X10, [X8 + 0xB0]
	0x037BDCF8 ADD X10, X10, 0x8
	0x037BDCFC LDUR X11, [X10 - 0x8]
	0x037BDD00 CMP X11, X1

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X24, 0xC25000
	010 Move W8, [X24+483]
	011 Move X22, X4
	012 Move X23, X3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x98B000
	021 Move X0, [X0+3512]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+483], W8
	025 Move X0, X21
	026 Move X1, X31
	027 Call String.IsNullOrEmpty, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {80}
	032 Move X24, 0x98B000
	033 Move X24, [X24+3512]
	034 Move X0, X23
	035 Move X1, X22
	036 Move X2, X31
	037 Call InternedString.op_Implicit, X0
	038 Move X4, [X24]
	039 Move X1, X0
	040 NotImplemented "Instruction MOVI not yet implemented."
	041 Add X2, X31, 0
	042 Move X0, X21
	043 Move W3, W31
	044 Move [X31+48], X31
	045 Move [X31+16], V0
	046 Move [X31+24], V0
	047 Move [X31], V0
	048 Call 0x2204D94, X0, X1, X2, X3
	049 Move X21, X0
	050 Move X0, X20
	051 Move X1, X31
	052 Call String.IsNullOrEmpty, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {67}
	057 Add X0, X31, 0
	058 Move X1, X20
	059 Move X2, X31
	060 Move [X31], X31
	061 Move [X31+8], X31
	062 Call InternedString..ctor, X0, X1
	063 Compare X21, 0
	064 JumpIfEqual {98}
	065 Move V0, [X31]
	066 Move [X21+2], V0
	067 Move X0, X19
	068 Move X1, X21
	069 Call InputManager.AddDevice, X0, X1
	070 Move X0, X21
	071 Move X20, [X31+112]
	072 Move X19, [X31+120]
	073 Move X22, [X31+96]
	074 Move X21, [X31+104]
	075 Move X24, [X31+80]
	076 Move X23, [X31+88]
	077 Move X30, [X31+64]
	078 Add X31, X31, 128
	079 Return X0
	080 Move X0, 0x93C000
	081 Move X0, [X0+1320]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X19, X0
	085 Move X0, 0x98A000
	086 Move X0, [X0+2240]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X19
	090 Move X2, X31
	091 Call ArgumentNullException..ctor, X0, X1
	092 Move X0, 0x98B000
	093 Move X0, [X0+3520]
	094 Call 0x1C17D08
	095 Move X1, X0
	096 Move X0, X19
	097 Call 0x1C17DEC
	098 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Utilities.InternedString layout, System.Int32 deviceId, System.String deviceName = null, UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription = null, UnityEngine.InputSystem.InputDevice/DeviceFlags deviceFlags = 0, UnityEngine.InputSystem.Utilities.InternedString variants = null)

Disassembly:
	0x037C5AFC CMP W20, W25
	0x037C5B00 B.NE 0x37C5A04
	0x037C5B04 TBZ X23, 0x0, 0x37C5B8C
	0x037C5B08 LDR X8, [X31]
	0x037C5B0C LDR W22, [X19 + 0xE8]
	0x037C5B10 MOV X1, X31
	0x037C5B14 ADD X20, X8, 0xD8
	0x037C5B18 MOV X0, X20
	0x037C5B1C BL 0x380CCD0
	0x037C5B20 TBZ X0, 0x0, 0x37C5B8C
	0x037C5B24 MOV X0, X20
	0x037C5B28 MOV W1, W22
	0x037C5B2C MOV X2, X31
	0x037C5B30 ADD X19, X19, 0x10
	0x037C5B34 BL 0x380C4D0
	0x037C5B38 LDR X8, [X29]
	0x037C5B3C MOV X23, X0
	0x037C5B40 LDR W9, [X8 + 0xE0]
	0x037C5B44 CBNZ W9, 0x37C5B50
	0x037C5B48 MOV X0, X8
	0x037C5B4C BL 0x1C16DFC
	0x037C5B50 LDR X21, [X31 + 0x8]
	0x037C5B54 MOV X0, X19
	0x037C5B58 MOV X1, X23
	0x037C5B5C MOV X3, X31
	0x037C5B60 MOV X2, X21
	0x037C5B64 BL 0x380BE98
	0x037C5B68 MOV X0, X20
	0x037C5B6C MOV W1, W22
	0x037C5B70 MOV X2, X31
	0x037C5B74 BL 0x380C538
	0x037C5B78 MOV X1, X0
	0x037C5B7C MOV X0, X19
	0x037C5B80 MOV X2, X21
	0x037C5B84 MOV X3, X31
	0x037C5B88 BL 0x380BE98
	0x037C5B8C LDP X20, X19, [X31 + 0x70]
	0x037C5B90 LDP X22, X21, [X31 + 0x60]
	0x037C5B94 LDP X24, X23, [X31 + 0x50]
	0x037C5B98 LDP X26, X25, [X31 + 0x40]
	0x037C5B9C LDP X28, X27, [X31 + 0x30]
	0x037C5BA0 LDP X29, X30, [X31 + 0x20]
	0x037C5BA4 ADD X31, X31, 0x80
	0x037C5BA8 RET
	0x037C5BAC BL 0x1C16F20
	0x037C5BB0 STR X30, [X31 - 0x10]!
	0x037C5BB4 LDR X8, [X0 + 0x480]
	0x037C5BB8 CBZ X8, 0x37C5BE8
	0x037C5BBC LDR W8, [X8 + 0x30]
	0x037C5BC0 CMP W8, 0x1
	0x037C5BC4 B.NE 0x37C5BD4
	0x037C5BC8 MOV W0, W31
	0x037C5BCC LDR X30, [X31], #0x10
	0x037C5BD0 RET
	0x037C5BD4 CBZ X1, 0x37C5BE8
	0x037C5BD8 MOV X0, X1
	0x037C5BDC MOV X1, X31
	0x037C5BE0 LDR X30, [X31], #0x10
	0x037C5BE4 B 0x377A960
	0x037C5BE8 BL 0x1C16F20
	0x037C5BEC SUB X31, X31, 0x40
	0x037C5BF0 STP X30, X23, [X31 + 0x10]
	0x037C5BF4 STP X22, X21, [X31 + 0x20]
	0x037C5BF8 STP X20, X19, [X31 + 0x30]
	0x037C5BFC ADRP X23, 0xC1C000
	0x037C5C00 LDRB W8, [X23 + 0x1EC]
	0x037C5C04 MOV W21, W3
	0x037C5C08 MOV W22, W2
	0x037C5C0C MOV X19, X1
	0x037C5C10 MOV X20, X0
	0x037C5C14 TBNZ X8, 0x0, 0x37C5C44
	0x037C5C18 ADRP X0, 0x982000
	0x037C5C1C LDR X0, [X0 + 0xD28]
	0x037C5C20 BL 0x1C16CF4
	0x037C5C24 ADRP X0, 0x932000
	0x037C5C28 LDR X0, [X0 + 0xFD8]
	0x037C5C2C BL 0x1C16CF4
	0x037C5C30 ADRP X0, 0x982000
	0x037C5C34 LDR X0, [X0 + 0xD40]
	0x037C5C38 BL 0x1C16CF4
	0x037C5C3C MOVZ W8, 0x1
	0x037C5C40 STRB W8, [X23 + 0x1EC]
	0x037C5C44 CBZ X19, 0x37C5FE0
	0x037C5C48 CMP W21, 0x2
	0x037C5C4C TBZ X22, 0x0, 0x37C5CB8
	0x037C5C50 B.EQ 0x37C5EAC
	0x037C5C54 CMP W21, 0x1
	0x037C5C58 B.EQ 0x37C5D58
	0x037C5C5C CBNZ W21, 0x37C5F1C
	0x037C5C60 MOV X0, X19
	0x037C5C64 MOV W1, W31
	0x037C5C68 MOV X2, X31
	0x037C5C6C BL 0x377B210
	0x037C5C70 MOV X0, X19
	0x037C5C74 MOV X1, X31
	0x037C5C78 BL 0x377B1AC
	0x037C5C7C TBNZ X0, 0x0, 0x37C5C90
	0x037C5C80 MOV X0, X19
	0x037C5C84 MOV X1, X31
	0x037C5C88 BL 0x377B1D8
	0x037C5C8C TBZ X0, 0x0, 0x37C5FCC
	0x037C5C90 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+144], X29
	003 Move [X31+152], X30
	004 Move [X31+160], X28
	005 Move [X31+168], X27
	006 Move [X31+176], X26
	007 Move [X31+184], X25
	008 Move [X31+192], X24
	009 Move [X31+200], X23
	010 Move [X31+208], X22
	011 Move [X31+216], X21
	012 Move [X31+224], X20
	013 Move [X31+232], X19
	014 Move X29, 0xC1D000
	015 Move X28, 0x983000
	016 Move W8, [X29+484]
	017 Move X25, [X31+240]
	018 Move X24, [X31+248]
	019 Move X28, [X28+3512]
	020 Move W22, W6
	021 Move X19, X5
	022 Move X21, X4
	023 Move W23, W3
	024 Move X26, X2
	025 Move X27, X1
	026 Move X20, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0x983000
	032 Move X0, [X0+3512]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X29+484], W8
	036 Move X0, X27
	037 Move X1, X26
	038 Move X2, X31
	039 Call InternedString.op_Implicit, X0
	040 Move X1, X0
	041 Add X0, X31, 0
	042 Move X2, X31
	043 Move [X31], X31
	044 Move [X31+8], X31
	045 Call InternedString..ctor, X0, X1
	046 Move X0, [X31]
	047 Move X1, [X31+8]
	048 Move X2, X31
	049 Call InternedString.op_Implicit, X0
	050 Move X8, [X19+48]
	051 Move V2, [X19+16]
	052 Move V0, [X19+32]
	053 Move V1, [X19]
	054 Move X26, X0
	055 Move X0, X25
	056 Move X1, X24
	057 Move X2, X31
	058 Move [X31+64], X8
	059 Move [X31+32], V2
	060 Move [X31+40], V0
	061 Move [X31+1], V1
	062 Call InternedString.op_Implicit, X0
	063 Move X4, [X28]
	064 Move V0, [X31+16]
	065 Move V1, [X31+32]
	066 Move V2, [X31+3]
	067 Move X8, [X31+64]
	068 Move X1, X0
	069 Add X2, X31, 80
	070 Move X0, X26
	071 Move W3, W31
	072 Move [X31+80], V0
	073 Move [X31+88], V1
	074 Move [X31+7], V2
	075 Move [X31+128], X8
	076 Call 0x2204D94, X0, X1, X2, X3
	077 Compare X0, 0
	078 JumpIfEqual {134}
	079 Move [X0+224], W23
	080 Move W8, [X0+220]
	081 Move V2, [X19+16]
	082 Move V0, [X19+32]
	083 Move X9, [X19+48]
	084 Move V1, [X19]
	085 Or W8, W8, W22
	086 Move X24, X0
	087 Move [X0+288], X9
	088 Move [X0+256], V2
	089 Move [X0+264], V0
	090 Move [X0+15], V1
	091 Move [X0+220], W8
	092 Move X0, X21
	093 Move X1, X31
	094 Call String.IsNullOrEmpty, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {107}
	099 Add X0, X31, 80
	100 Move X1, X21
	101 Move X2, X31
	102 Move [X31+80], X31
	103 Move [X31+88], X31
	104 Call InternedString..ctor, X0, X1
	105 Move V0, [X31+5]
	106 Move [X24+2], V0
	107 Move X0, [X19+24]
	108 Move X1, X31
	109 Call String.IsNullOrEmpty, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {116}
	114 Move X8, [X19+24]
	115 Move [X24+56], X8
	116 Move X0, X20
	117 Move X1, X24
	118 Call InputManager.AddDevice, X0, X1
	119 Move X0, X24
	120 Move X20, [X31+224]
	121 Move X19, [X31+232]
	122 Move X22, [X31+208]
	123 Move X21, [X31+216]
	124 Move X24, [X31+192]
	125 Move X23, [X31+200]
	126 Move X26, [X31+176]
	127 Move X25, [X31+184]
	128 Move X28, [X31+160]
	129 Move X27, [X31+168]
	130 Move X29, [X31+144]
	131 Move X30, [X31+152]
	132 Add X31, X31, 240
	133 Return X0
	134 Call 0x1C17F20

Method: System.Void AddDevice(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037C55C8 MOV X19, X0
	0x037C55CC ADRP X0, 0x936000
	0x037C55D0 LDR X0, [X0 + 0x5E8]
	0x037C55D4 BL 0x1C16D08
	0x037C55D8 MOV X1, X0
	0x037C55DC MOV X0, X19
	0x037C55E0 MOV X2, X31
	0x037C55E4 BL 0x330E100
	0x037C55E8 ADRP X0, 0x983000
	0x037C55EC LDR X0, [X0 + 0x268]
	0x037C55F0 BL 0x1C16D08
	0x037C55F4 MOV X1, X0
	0x037C55F8 MOV X0, X19
	0x037C55FC BL 0x1C16DEC
	0x037C5600 SUB X31, X31, 0x50
	0x037C5604 STP X30, X25, [X31 + 0x10]
	0x037C5608 STP X24, X23, [X31 + 0x20]
	0x037C560C STP X22, X21, [X31 + 0x30]
	0x037C5610 STP X20, X19, [X31 + 0x40]
	0x037C5614 ADRP X21, 0xC1C000
	0x037C5618 LDRB W8, [X21 + 0x1F4]
	0x037C561C MOV X19, X1
	0x037C5620 MOV X20, X0
	0x037C5624 TBNZ X8, 0x0, 0x37C5660
	0x037C5628 ADRP X0, 0x983000
	0x037C562C LDR X0, [X0 + 0x270]
	0x037C5630 BL 0x1C16CF4
	0x037C5634 ADRP X0, 0x983000
	0x037C5638 LDR X0, [X0 + 0x278]
	0x037C563C BL 0x1C16CF4
	0x037C5640 ADRP X0, 0x983000
	0x037C5644 LDR X0, [X0 + 0x280]
	0x037C5648 BL 0x1C16CF4
	0x037C564C ADRP X0, 0x983000
	0x037C5650 LDR X0, [X0 + 0x288]
	0x037C5654 BL 0x1C16CF4
	0x037C5658 MOVZ W8, 0x1
	0x037C565C STRB W8, [X21 + 0x1F4]
	0x037C5660 LDR W8, [X20 + 0x70]
	0x037C5664 CBZ W8, 0x37C5764
	0x037C5668 CBZ X19, 0x37C577C
	0x037C566C ADRP X24, 0x983000
	0x037C5670 LDR X24, [X24 + 0x288]
	0x037C5674 MOV X0, X19
	0x037C5678 MOV X1, X31
	0x037C567C BL 0x3771E78
	0x037C5680 LDR X8, [X24]
	0x037C5684 LDR X20, [X20 + 0x78]
	0x037C5688 MOV X21, X0
	0x037C568C LDR W9, [X8 + 0xE0]
	0x037C5690 CBNZ W9, 0x37C56A0
	0x037C5694 MOV X0, X8
	0x037C5698 BL 0x1C16DFC
	0x037C569C LDR X8, [X24]
	0x037C56A0 LDR X9, [X8 + 0xB8]
	0x037C56A4 ADRP X25, 0x983000
	0x037C56A8 LDR X22, [X9 + 0x8]
	0x037C56AC LDR X25, [X25 + 0x278]
	0x037C56B0 CBNZ X22, 0x37C5708
	0x037C56B4 LDR W9, [X8 + 0xE0]
	0x037C56B8 CBNZ W9, 0x37C56C8
	0x037C56BC MOV X0, X8
	0x037C56C0 BL 0x1C16DFC
	0x037C56C4 LDR X8, [X24]
	0x037C56C8 ADRP X9, 0x983000
	0x037C56CC LDR X8, [X8 + 0xB8]
	0x037C56D0 LDR X9, [X9 + 0x270]
	0x037C56D4 LDR X23, [X8]
	0x037C56D8 LDR X0, [X9]
	0x037C56DC BL 0x1C16F10
	0x037C56E0 ADRP X8, 0x983000
	0x037C56E4 LDR X8, [X8 + 0x280]
	0x037C56E8 MOV X1, X23
	0x037C56EC MOV X3, X31
	0x037C56F0 MOV X22, X0
	0x037C56F4 LDR X2, [X8]
	0x037C56F8 BL 0x2D30578
	0x037C56FC LDR X8, [X24]
	0x037C5700 LDR X8, [X8 + 0xB8]
	0x037C5704 STR X22, [X8 + 0x8]
	0x037C5708 LDR X3, [X25]
	0x037C570C MOV X0, X21
	0x037C5710 MOV X1, X20
	0x037C5714 MOV X2, X22
	0x037C5718 BL 0x228D5E8
	0x037C571C MOV X20, X0
	0x037C5720 MOV X0, X19
	0x037C5724 MOV X1, X31
	0x037C5728 BL 0x3771E78
	0x037C572C MOV X1, X0
	0x037C5730 MOV X0, X20
	0x037C5734 MOV X2, X31
	0x037C5738 BL 0x3226EF8
	0x037C573C TBZ X0, 0x0, 0x37C5764
	0x037C5740 MOV X0, X19
	0x037C5744 BL 0x37C9414
	0x037C5748 ADD X0, X31, 0x0
	0x037C574C MOV X1, X20
	0x037C5750 MOV X2, X31
	0x037C5754 STP X31, X31, [X31]
	0x037C5758 BL 0x3757420
	0x037C575C LDR V0, [X31]
	0x037C5760 STR V0, [X19 + 0x2]
	0x037C5764 LDP X20, X19, [X31 + 0x40]
	0x037C5768 LDP X22, X21, [X31 + 0x30]
	0x037C576C LDP X24, X23, [X31 + 0x20]
	0x037C5770 LDP X30, X25, [X31 + 0x10]
	0x037C5774 ADD X31, X31, 0x50
	0x037C5778 RET
	0x037C577C BL 0x1C16F20
	0x037C5780 SUB X31, X31, 0x30
	0x037C5784 STP X30, X21, [X31 + 0x10]
	0x037C5788 STP X20, X19, [X31 + 0x20]
	0x037C578C ADRP X21, 0xC1C000
	0x037C5790 LDRB W8, [X21 + 0x1F6]
	0x037C5794 MOV X19, X1
	0x037C5798 MOV X20, X0
	0x037C579C TBNZ X8, 0x0, 0x37C57B4
	0x037C57A0 ADRP X0, 0x956000
	0x037C57A4 LDR X0, [X0 + 0xED0]
	0x037C57A8 BL 0x1C16CF4
	0x037C57AC MOVZ W8, 0x1
	0x037C57B0 STRB W8, [X21 + 0x1F6]
	0x037C57B4 CBZ X19, 0x37C5900
	0x037C57B8 LDR W1, [X19 + 0xE0]
	0x037C57BC CBZ W1, 0x37C5884
	0x037C57C0 MOV X0, X20
	0x037C57C4 BL 0x37BC094
	0x037C57C8 CBZ X0, 0x37C58F0
	0x037C57CC MOV X20, X0
	0x037C57D0 MOV X0, X19
	0x037C57D4 BL 0x19903C0
	0x037C57D8 LDR W8, [X19 + 0xE0]
	0x037C57DC ADRP X0, 0x92E000
	0x037C57E0 STR W8, [X31 + 0xC]
	0x037C57E4 LDR X0, [X0 + 0x758]
	0x037C57E8 BL 0x1C16D08
	0x037C57EC ADD X1, X31, 0xC
	0x037C57F0 BL 0x1C16E04
	0x037C57F4 MOV X21, X0
	0x037C57F8 MOV X0, X19
	0x037C57FC BL 0x19903C0
	0x037C5800 MOV X0, X19
	0x037C5804 MOV X1, X31
	0x037C5808 BL 0x3771E78
	0x037C580C MOV X19, X0
	0x037C5810 MOV X0, X20
	0x037C5814 BL 0x19903C0
	0x037C5818 MOV X0, X20
	0x037C581C MOV X1, X31
	0x037C5820 BL 0x3771E78
	0x037C5824 MOV X20, X0
	0x037C5828 ADRP X0, 0x983000
	0x037C582C LDR X0, [X0 + 0x290]
	0x037C5830 BL 0x1C16D08
	0x037C5834 MOV X1, X21
	0x037C5838 MOV X2, X19
	0x037C583C MOV X3, X20
	0x037C5840 MOV X4, X31
	0x037C5844 BL 0x3227C18
	0x037C5848 MOV X19, X0
	0x037C584C ADRP X0, 0x92E000
	0x037C5850 LDR X0, [X0 + 0x5B0]
	0x037C5854 BL 0x1C16D08
	0x037C5858 BL 0x1C16F10
	0x037C585C MOV X1, X19
	0x037C5860 MOV X2, X31
	0x037C5864 MOV X20, X0
	0x037C5868 BL 0x337DF1C
	0x037C586C ADRP X0, 0x983000
	0x037C5870 LDR X0, [X0 + 0x298]
	0x037C5874 BL 0x1C16D08
	0x037C5878 MOV X1, X0
	0x037C587C MOV X0, X20
	0x037C5880 BL 0x1C16DEC
	0x037C5884 LDR X20, [X20 + 0x440]
	0x037C5888 CBZ X20, 0x37C5900
	0x037C588C ADRP X10, 0x956000
	0x037C5890 LDR X8, [X20]
	0x037C5894 LDR X10, [X10 + 0xED0]
	0x037C5898 LDRH W9, [X8 + 0x12E]
	0x037C589C LDR X1, [X10]
	0x037C58A0 CBZ X9, 0x37C58C4
	0x037C58A4 LDR X10, [X8 + 0xB0]
	0x037C58A8 ADD X10, X10, 0x8
	0x037C58AC LDUR X11, [X10 - 0x8]
	0x037C58B0 CMP X11, X1
	0x037C58B4 B.EQ 0x37C58D4
	0x037C58B8 SUBS X9, X9, 0x1
	0x037C58BC ADD X10, X10, 0x10
	0x037C58C0 B.NE 0x37C58AC
	0x037C58C4 MOV X0, X20
	0x037C58C8 MOV W2, W31
	0x037C58CC BL 0x1C5C788
	0x037C58D0 B 0x37C58E0
	0x037C58D4 LDRSW X9, [X10]
	0x037C58D8 ADD X8, X8, X9, 0x4, LSL
	0x037C58DC ADD X0, X8, 0x138
	0x037C58E0 LDP X8, X1, [X0]
	0x037C58E4 MOV X0, X20
	0x037C58E8 BLR X8
	0x037C58EC STR W0, [X19 + 0xE0]
	0x037C58F0 LDP X20, X19, [X31 + 0x20]
	0x037C58F4 LDP X30, X21, [X31 + 0x10]
	0x037C58F8 ADD X31, X31, 0x30
	0x037C58FC RET
	0x037C5900 BL 0x1C16F20
	0x037C5904 SUB X31, X31, 0x80
	0x037C5908 STP X29, X30, [X31 + 0x20]
	0x037C590C STP X28, X27, [X31 + 0x30]
	0x037C5910 STP X26, X25, [X31 + 0x40]
	0x037C5914 STP X24, X23, [X31 + 0x50]
	0x037C5918 STP X22, X21, [X31 + 0x60]
	0x037C591C STP X20, X19, [X31 + 0x70]
	0x037C5920 ADRP X20, 0xC1C000
	0x037C5924 LDRB W8, [X20 + 0x1F9]
	0x037C5928 MOV X19, X1
	0x037C592C MOV X25, X0
	0x037C5930 TBNZ X8, 0x0, 0x37C5960
	0x037C5934 ADRP X0, 0x956000
	0x037C5938 LDR X0, [X0 + 0xD18]
	0x037C593C BL 0x1C16CF4
	0x037C5940 ADRP X0, 0x956000
	0x037C5944 LDR X0, [X0 + 0xD40]
	0x037C5948 BL 0x1C16CF4
	0x037C594C ADRP X0, 0x956000
	0x037C5950 LDR X0, [X0 + 0xD48]
	0x037C5954 BL 0x1C16CF4
	0x037C5958 MOVZ W8, 0x1
	0x037C595C STRB W8, [X20 + 0x1F9]
	0x037C5960 CBZ X19, 0x37C5BAC
	0x037C5964 ADRP X29, 0x956000
	0x037C5968 LDR X29, [X29 + 0xD18]
	0x037C596C MOV X0, X19
	0x037C5970 MOV X1, X31
	0x037C5974 BL 0x377AAE8
	0x037C5978 STP X0, X1, [X31 + 0x10]
	0x037C597C LDR X22, [X25 + 0xC8]
	0x037C5980 UBFM X20, X1, 0x20, 0x3F
	0x037C5984 MOV X0, X19
	0x037C5988 MOV X1, X31
	0x037C598C BL 0x377B23C
	0x037C5990 LDR X8, [X29]
	0x037C5994 LDR X24, [X25 + 0xC0]
	0x037C5998 LDR W21, [X19 + 0x14]
	0x037C599C MOV W23, W0
	0x037C59A0 LDR W9, [X8 + 0xE0]
	0x037C59A4 CBNZ W9, 0x37C59B0
	0x037C59A8 MOV X0, X8
	0x037C59AC BL 0x1C16DFC
	0x037C59B0 LDR W3, [X19 + 0x1C]
	0x037C59B4 MOV X0, X24
	0x037C59B8 MOV W1, W21
	0x037C59BC MOV W2, W31
	0x037C59C0 MOV W4, W31
	0x037C59C4 MOV X5, X31
	0x037C59C8 BL 0x3762D00
	0x037C59CC LDR W1, [X19 + 0x14]
	0x037C59D0 LDR W3, [X19 + 0x1C]
	0x037C59D4 MOVZ W4, 0x1
	0x037C59D8 MOV X0, X22
	0x037C59DC MOV W2, W31
	0x037C59E0 MOV X5, X31
	0x037C59E4 BL 0x3762D00
	0x037C59E8 LDR X8, [X25 + 0xB8]
	0x037C59EC CMP W20, 0x1
	0x037C59F0 STP X25, X8, [X31]
	0x037C59F4 B.LT 0x37C5B04
	0x037C59F8 ADRP X21, 0x956000
	0x037C59FC LDR X21, [X21 + 0xD48]
	0x037C5A00 MOV W25, W31
	0x037C5A04 LDR X2, [X21]
	0x037C5A08 ADD X0, X31, 0x10
	0x037C5A0C MOV W1, W25
	0x037C5A10 BL 0x24FDB3C
	0x037C5A14 CBZ X0, 0x37C5BAC
	0x037C5A18 MOV X1, X31
	0x037C5A1C MOV X26, X0
	0x037C5A20 BL 0x37734A0
	0x037C5A24 TBNZ X0, 0x0, 0x37C5AF8
	0x037C5A28 MOV X0, X26
	0x037C5A2C MOV X1, X31
	0x037C5A30 BL 0x3772220
	0x037C5A34 TBZ X0, 0x0, 0x37C5A48
	0x037C5A38 MOV X0, X26
	0x037C5A3C MOV X1, X31
	0x037C5A40 BL 0x3773474
	0x037C5A44 TBZ X0, 0x0, 0x37C5AB8
	0x037C5A48 MOV X0, X26
	0x037C5A4C MOV X1, X31
	0x037C5A50 BL 0x3772220
	0x037C5A54 TBNZ X0, 0x0, 0x37C5A80
	0x037C5A58 LDR X0, [X29]
	0x037C5A5C LDR W8, [X0 + 0xE0]
	0x037C5A60 CBNZ W8, 0x37C5A68
	0x037C5A64 BL 0x1C16DFC
	0x037C5A68 LDP W1, W2, [X26 + 0x14]
	0x037C5A6C LDR W3, [X26 + 0x1C]
	0x037C5A70 MOVZ W4, 0x1
	0x037C5A74 MOV X0, X24
	0x037C5A78 MOV X5, X31
	0x037C5A7C BL 0x3762D00
	0x037C5A80 MOV X0, X26
	0x037C5A84 MOV X1, X31
	0x037C5A88 BL 0x3773474
	0x037C5A8C TBZ X0, 0x0, 0x37C5AB8
	0x037C5A90 LDR X0, [X29]
	0x037C5A94 LDR W8, [X0 + 0xE0]
	0x037C5A98 CBNZ W8, 0x37C5AA0
	0x037C5A9C BL 0x1C16DFC
	0x037C5AA0 LDP W1, W2, [X26 + 0x14]
	0x037C5AA4 LDR W3, [X26 + 0x1C]
	0x037C5AA8 MOV X0, X22
	0x037C5AAC MOV W4, W31
	0x037C5AB0 MOV X5, X31
	0x037C5AB4 BL 0x3762D00
	0x037C5AB8 TBZ X23, 0x0, 0x37C5AF8
	0x037C5ABC MOV X0, X26
	0x037C5AC0 MOV X1, X31
	0x037C5AC4 BL 0x37734CC
	0x037C5AC8 TBZ X0, 0x0, 0x37C5AF8
	0x037C5ACC LDR X0, [X29]
	0x037C5AD0 LDP X28, X27, [X26 + 0xA8]
	0x037C5AD4 LDR W8, [X0 + 0xE0]
	0x037C5AD8 CBNZ W8, 0x37C5AE0
	0x037C5ADC BL 0x1C16DFC
	0x037C5AE0 LDR X1, [X31 + 0x8]
	0x037C5AE4 ADD X0, X26, 0x10
	0x037C5AE8 MOV X2, X28
	0x037C5AEC MOV X3, X27
	0x037C5AF0 MOV X4, X31
	0x037C5AF4 BL 0x380BB04
	0x037C5AF8 ADD W25, W25, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC1D000
	007 Move W8, [X21+485]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {52}
	014 Move X0, 0x930000
	015 Move X0, [X0+3696]
	016 Call 0x1C17CF4
	017 Move X0, 0x984000
	018 Move X0, [X0+488]
	019 Call 0x1C17CF4
	020 Move X0, 0x984000
	021 Move X0, [X0+496]
	022 Call 0x1C17CF4
	023 Move X0, 0x983000
	024 Move X0, [X0+3368]
	025 Call 0x1C17CF4
	026 Move X0, 0x984000
	027 Move X0, [X0+504]
	028 Call 0x1C17CF4
	029 Move X0, 0x984000
	030 Move X0, [X0+512]
	031 Call 0x1C17CF4
	032 Move X0, 0x984000
	033 Move X0, [X0+520]
	034 Call 0x1C17CF4
	035 Move X0, 0x957000
	036 Move X0, [X0+3792]
	037 Call 0x1C17CF4
	038 Move X0, 0x982000
	039 Move X0, [X0+3176]
	040 Call 0x1C17CF4
	041 Move X0, 0x983000
	042 Move X0, [X0+3384]
	043 Call 0x1C17CF4
	044 Move X0, 0x957000
	045 Move X0, [X0+3352]
	046 Call 0x1C17CF4
	047 Move X0, 0x983000
	048 Move X0, [X0+3392]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X21+485], W8
	052 Compare X19, 0
	053 JumpIfEqual {337}
	054 Move X0, X19
	055 Move X1, X31
	056 Call InputControl.get_layout, X0
	057 Move X1, X31
	058 Call String.IsNullOrEmpty, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {349}
	063 Move X8, 0x984000
	064 Move X8, [X8+496]
	065 Move X21, X20
	066 Add X21, X21, 120
	067 Move X0, [X21]
	068 Move X1, X19
	069 Move X2, [X8]
	070 Call ArrayHelpers.Contains, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {81}
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Return 
	081 Move X0, X20
	082 Move X1, X19
	083 Call InputManager.MakeDeviceNameUnique, X0, X1
	084 Move X0, X20
	085 Move X1, X19
	086 Call InputManager.AssignUniqueDeviceId, X0, X1
	087 Move X8, 0x984000
	088 Move X8, [X8+488]
	089 Add X1, X20, 112
	090 Move W3, 10
	091 Move X0, X21
	092 Move X4, [X8]
	093 Move X2, X19
	094 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	095 Move [X19+232], W0
	096 Move X0, [X20+128]
	097 Compare X0, 0
	098 JumpIfEqual {367}
	099 Move X8, 0x984000
	100 Move W1, [X19+224]
	101 Move X8, [X8+504]
	102 Move X2, X19
	103 Move X3, [X8]
	104 Call Dictionary`2<Int32, Object>.set_Item, X0, X1, X2
	105 Move X8, 0x957000
	106 Move X8, [X8+3352]
	107 Move X0, [X8]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move TEMP, 0
	113 Not TEMP
	114 Move W8, TEMP
	115 Move X0, X20
	116 Move [X19+20], W8
	117 Call InputManager.ReallocateStateBuffers, X0
	118 Move X0, X20
	119 Move X1, X19
	120 Call InputManager.InitializeDeviceState, X0, X1
	121 Move W9, [X20+112]
	122 Move W10, [X20+1096]
	123 Move W11, [X20+180]
	124 Move W12, [X20+1104]
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 NotImplemented "Instruction CSEL not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move [X20+1096], W9
	130 NotImplemented "Instruction CSEL not yet implemented."
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move [X20+1104], W9
	133 Move X11, [X20+144]
	134 Compare X11, 0
	135 JumpIfEqual {367}
	136 Move W10, [X11+24]
	137 Move X9, X31
	138 Add X11, X11, 88
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move W12, [X11]
	141 Move W13, [X19+224]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move [X11+5], W31
	144 Add X9, X9, 1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Add X11, X11, 64
	147 Move W8, [X20+946]
	148 Compare W8, 0
	149 JumpIfNotEqual {205}
	150 Move X8, [X20+1152]
	151 Compare X8, 0
	152 JumpIfEqual {367}
	153 Move W8, [X8+48]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X21, [X20+1088]
	156 Compare X21, 0
	157 JumpIfEqual {367}
	158 Move X10, 0x957000
	159 Move X8, [X21]
	160 Move X10, [X10+3792]
	161 NotImplemented "Instruction LDRH not yet implemented."
	162 Move X1, [X10]
	163 Compare X9, 0
	164 JumpIfEqual {171}
	165 Move X10, [X8+176]
	166 Add X10, X10, 8
	167 NotImplemented "Instruction LDUR not yet implemented."
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Subtract X9, X9, 1
	170 Add X10, X10, 16
	171 Move W2, 23
	172 Move X0, X21
	173 Call 0x1C5D788
	174 Move W9, [X10]
	175 Add W9, W9, 23
	176 Add X8, X8, W9
	177 Add X0, X8, 312
	178 Move X8, [X0]
	179 Move X1, [X0+8]
	180 Move X0, X21
	181 NotImplemented "Instruction BLR not yet implemented."
	182 Move TEMP, X0
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfNotEqual {205}
	186 Move X0, X19
	187 Move X1, X31
	188 Call InputDevice.QueryEnabledStateFromRuntime, X0
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {205}
	193 Move X0, X20
	194 Move X1, X19
	195 Call InputManager.ShouldRunDeviceInBackground, X0, X1
	196 Move TEMP, X0
	197 And TEMP, TEMP, 1
	198 Compare TEMP, 1
	199 JumpIfEqual {205}
	200 Move W3, 2
	201 Move X0, X20
	202 Move X1, X19
	203 Move W2, W31
	204 Call InputManager.EnableOrDisableDevice, X0, X1, X2, X3
	205 Move X0, X19
	206 Move W1, W31
	207 Move X2, X31
	208 Call InputActionState.OnDeviceChange, X0, X1
	209 Move X22, 0x983000
	210 Move X22, [X22+3384]
	211 Move X0, X19
	212 Move X1, [X22]
	213 Call 0x1C17E00
	214 Compare X0, 0
	215 JumpIfEqual {247}
	216 Move X8, 0x930000
	217 Move X8, [X8+3696]
	218 Move X21, X0
	219 Move X0, [X8]
	220 Call 0x1C17F10
	221 Move X8, [X21]
	222 Move X1, [X22]
	223 Move X22, X0
	224 NotImplemented "Instruction LDRH not yet implemented."
	225 Compare X9, 0
	226 JumpIfEqual {233}
	227 Move X10, [X8+176]
	228 Add X10, X10, 8
	229 NotImplemented "Instruction LDUR not yet implemented."
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Subtract X9, X9, 1
	232 Add X10, X10, 16
	233 Move X0, X21
	234 Move W2, W31
	235 Call 0x1C5D788
	236 NotImplemented "Instruction LDRSW not yet implemented."
	237 Add X8, X8, X9
	238 Add X0, X8, 312
	239 Move X2, [X0+8]
	240 Move X0, X22
	241 Move X1, X21
	242 Move X3, X31
	243 Call Action..ctor, X0, X1, X2
	244 Move X0, X20
	245 Move X1, X22
	246 Call InputManager.add_onBeforeUpdate, X0, X1
	247 Move X8, 0x982000
	248 Move X8, [X8+3176]
	249 Move X0, X19
	250 Move X1, [X8]
	251 Call 0x1C17E00
	252 Compare X0, 0
	253 JumpIfEqual {261}
	254 Move X0, X20
	255 Call InputManager.InstallBeforeUpdateHookIfNecessary, X0
	256 Move W8, [X19+220]
	257 Move W9, 1
	258 Or W8, W8, 2
	259 Move [X19+220], W8
	260 Move [X20+945], W9
	261 Move X8, 0x984000
	262 Move X8, [X8+512]
	263 Move X0, X19
	264 Move X1, [X8]
	265 Call 0x1C17E00
	266 Compare X0, 0
	267 JumpIfEqual {272}
	268 Move W1, 1
	269 Move X0, X19
	270 Move X2, X31
	271 Call InputDevice.set_hasEventMerger, X0, X1
	272 Move X8, 0x984000
	273 Move X8, [X8+520]
	274 Move X0, X19
	275 Move X1, [X8]
	276 Call 0x1C17E00
	277 Compare X0, 0
	278 JumpIfEqual {283}
	279 Move W1, 1
	280 Move X0, X19
	281 Move X2, X31
	282 Call InputDevice.set_hasEventPreProcessor, X0, X1
	283 Move X0, X19
	284 Move X1, X31
	285 Call InputDevice.get_updateBeforeRender, X0
	286 Move TEMP, X0
	287 And TEMP, TEMP, 1
	288 Compare TEMP, 1
	289 JumpIfNotEqual {298}
	290 Move W9, [X20+168]
	291 Or W8, W9, 4
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move W9, [X20+112]
	294 Move [X20+168], W8
	295 NotImplemented "Instruction CMP not yet implemented."
	296 Move X0, X20
	297 Call InputManager.ReallocateStateBuffers, X0
	298 Move X0, X19
	299 Move X1, X31
	300 Call InputDevice.NotifyAdded, X0
	301 Move X8, [X19]
	302 Move X0, X19
	303 Move X9, [X8+584]
	304 Move X1, [X8+592]
	305 NotImplemented "Instruction BLR not yet implemented."
	306 Move X8, 0x983000
	307 Move X9, 0x983000
	308 Move X8, [X8+3392]
	309 Move X9, [X9+3368]
	310 Add X0, X20, 224
	311 Move X1, X19
	312 Move X3, [X8]
	313 Move X5, [X9]
	314 Move W2, W31
	315 Move X4, X31
	316 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	317 Move X0, X19
	318 Move X1, X31
	319 Call InputDevice.get_enabled, X0
	320 Move TEMP, X0
	321 And TEMP, TEMP, 1
	322 Compare TEMP, 1
	323 JumpIfNotEqual {327}
	324 Move X0, X19
	325 Move X1, X31
	326 Call InputDevice.RequestSync, X0
	327 Move X0, X19
	328 Move X20, [X31+32]
	329 Move X19, [X31+40]
	330 Move X22, [X31+16]
	331 Move X21, [X31+24]
	332 Move X1, X31
	333 Move X30, [X31+48]
	334 Call 0x3780584
	335 Return 
	336 Call 0x1C17F28
	337 Move X0, 0x934000
	338 Move X0, [X0+1320]
	339 Call 0x1C17D08
	340 Call 0x1C17F10
	341 Move X19, X0
	342 Move X0, 0x957000
	343 Move X0, [X0+3360]
	344 Call 0x1C17D08
	345 Move X1, X0
	346 Move X0, X19
	347 Move X2, X31
	348 Call ArgumentNullException..ctor, X0, X1
	349 Move X0, 0x92F000
	350 Move X0, [X0+1456]
	351 Call 0x1C17D08
	352 Call 0x1C17F10
	353 Move X19, X0
	354 Move X0, 0x984000
	355 Move X0, [X0+528]
	356 Call 0x1C17D08
	357 Move X1, X0
	358 Move X0, X19
	359 Move X2, X31
	360 Call InvalidOperationException..ctor, X0, X1
	361 Move X0, 0x984000
	362 Move X0, [X0+536]
	363 Call 0x1C17D08
	364 Move X1, X0
	365 Move X0, X19
	366 Call 0x1C17DEC
	367 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description)

Disassembly:
	0x037C7028 BL 0x1C16D08
	0x037C702C MOV X1, X0
	0x037C7030 MOV X0, X19
	0x037C7034 BL 0x1C16DEC
	0x037C7038 STP X30, X21, [X31 - 0x20]!
	0x037C703C STP X20, X19, [X31 + 0x10]
	0x037C7040 ADRP X21, 0xC1A000
	0x037C7044 LDRB W8, [X21 + 0x1ED]
	0x037C7048 MOV X19, X1
	0x037C704C MOV X20, X0
	0x037C7050 TBNZ X8, 0x0, 0x37C7068
	0x037C7054 ADRP X0, 0x954000
	0x037C7058 LDR X0, [X0 + 0xED0]
	0x037C705C BL 0x1C16CF4
	0x037C7060 MOVZ W8, 0x1
	0x037C7064 STRB W8, [X21 + 0x1ED]
	0x037C7068 LDRB W8, [X20 + 0x428]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move X8, [X1+48]
	004 Move V1, [X1+16]
	005 Move V0, [X1+32]
	006 Move V2, [X1]
	007 Add X1, X31, 0
	008 Move W2, 1
	009 Move X3, X31
	010 Move W4, W31
	011 Move W5, W31
	012 Move [X31+48], X8
	013 Move [X31+16], V1
	014 Move [X31+24], V0
	015 Move [X31], V2
	016 Call InputManager.AddDevice, X0, X1, X2, X3, X4, X5
	017 Move X30, [X31+64]
	018 Add X31, X31, 80
	019 Return X0

Method: UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description, System.Boolean throwIfNoLayoutFound, System.String deviceName = null, System.Int32 deviceId = 0, UnityEngine.InputSystem.InputDevice/DeviceFlags deviceFlags = 0)

Disassembly:
	0x037C706C CBZ W8, 0x37C7088
	0x037C7070 ADD X0, X20, 0x3B8
	0x037C7074 MOV X1, X19
	0x037C7078 LDP X20, X19, [X31 + 0x10]
	0x037C707C MOV X2, X31
	0x037C7080 LDP X30, X21, [X31], #0x20
	0x037C7084 B 0x3803108
	0x037C7088 LDR X20, [X20 + 0x440]
	0x037C708C CBZ X20, 0x37C7100
	0x037C7090 ADRP X10, 0x954000
	0x037C7094 LDR X8, [X20]
	0x037C7098 LDR X10, [X10 + 0xED0]
	0x037C709C LDRH W9, [X8 + 0x12E]
	0x037C70A0 LDR X1, [X10]
	0x037C70A4 CBZ X9, 0x37C70C8
	0x037C70A8 LDR X10, [X8 + 0xB0]
	0x037C70AC ADD X10, X10, 0x8
	0x037C70B0 LDUR X11, [X10 - 0x8]
	0x037C70B4 CMP X11, X1
	0x037C70B8 B.EQ 0x37C70D8
	0x037C70BC SUBS X9, X9, 0x1
	0x037C70C0 ADD X10, X10, 0x10
	0x037C70C4 B.NE 0x37C70B0
	0x037C70C8 MOVZ W2, 0x2
	0x037C70CC MOV X0, X20
	0x037C70D0 BL 0x1C5C788
	0x037C70D4 B 0x37C70E8
	0x037C70D8 LDR W9, [X10]
	0x037C70DC ADD W9, W9, 0x2
	0x037C70E0 ADD X8, X8, W9, 0x4, SXTW
	0x037C70E4 ADD X0, X8, 0x138
	0x037C70E8 LDP X3, X2, [X0]
	0x037C70EC MOV X0, X20
	0x037C70F0 MOV X1, X19
	0x037C70F4 LDP X20, X19, [X31 + 0x10]
	0x037C70F8 LDP X30, X21, [X31], #0x20
	0x037C70FC BR X3
	0x037C7100 BL 0x1C16F20
	0x037C7104 STP X30, X19, [X31 - 0x10]!
	0x037C7108 LDR W1, [X0 + 0xAC]
	0x037C710C MOV X19, X0
	0x037C7110 CBNZ W1, 0x37C7124
	0x037C7114 LDR W0, [X19 + 0xA8]
	0x037C7118 MOV X1, X31
	0x037C711C BL 0x3807CA8
	0x037C7120 MOV W1, W0
	0x037C7124 MOV X0, X19
	0x037C7128 LDP X30, X19, [X31], #0x10
	0x037C712C B 0x37C7130
	0x037C7130 STP X30, X21, [X31 - 0x20]!
	0x037C7134 STP X20, X19, [X31 + 0x10]
	0x037C7138 ADRP X21, 0xC1A000
	0x037C713C LDRB W8, [X21 + 0x1EE]
	0x037C7140 MOV W19, W1
	0x037C7144 MOV X20, X0
	0x037C7148 TBNZ X8, 0x0, 0x37C7160
	0x037C714C ADRP X0, 0x954000
	0x037C7150 LDR X0, [X0 + 0xED0]
	0x037C7154 BL 0x1C16CF4
	0x037C7158 MOVZ W8, 0x1
	0x037C715C STRB W8, [X21 + 0x1EE]
	0x037C7160 LDR X20, [X20 + 0x440]
	0x037C7164 CBZ X20, 0x37C71D8
	0x037C7168 ADRP X10, 0x954000
	0x037C716C LDR X8, [X20]
	0x037C7170 LDR X10, [X10 + 0xED0]
	0x037C7174 LDRH W9, [X8 + 0x12E]
	0x037C7178 LDR X1, [X10]
	0x037C717C CBZ X9, 0x37C71A0
	0x037C7180 LDR X10, [X8 + 0xB0]
	0x037C7184 ADD X10, X10, 0x8
	0x037C7188 LDUR X11, [X10 - 0x8]
	0x037C718C CMP X11, X1
	0x037C7190 B.EQ 0x37C71B0
	0x037C7194 SUBS X9, X9, 0x1
	0x037C7198 ADD X10, X10, 0x10
	0x037C719C B.NE 0x37C7188
	0x037C71A0 MOVZ W2, 0x1
	0x037C71A4 MOV X0, X20
	0x037C71A8 BL 0x1C5C788
	0x037C71AC B 0x37C71C0
	0x037C71B0 LDR W9, [X10]
	0x037C71B4 ADD W9, W9, 0x1
	0x037C71B8 ADD X8, X8, W9, 0x4, SXTW
	0x037C71BC ADD X0, X8, 0x138
	0x037C71C0 LDP X3, X2, [X0]
	0x037C71C4 MOV X0, X20
	0x037C71C8 MOV W1, W19
	0x037C71CC LDP X20, X19, [X31 + 0x10]
	0x037C71D0 LDP X30, X21, [X31], #0x20
	0x037C71D4 BR X3
	0x037C71D8 BL 0x1C16F20
	0x037C71DC STR X30, [X31 - 0x20]!
	0x037C71E0 STP X20, X19, [X31 + 0x10]
	0x037C71E4 MOV X19, X1
	0x037C71E8 MOV X20, X0
	0x037C71EC STR X2, [X0 + 0x480]
	0x037C71F0 BL 0x37C7218
	0x037C71F4 MOV X0, X20
	0x037C71F8 MOV X1, X19
	0x037C71FC BL 0x37C8698
	0x037C7200 MOV X0, X20
	0x037C7204 BL 0x37C8D6C
	0x037C7208 MOV X0, X20
	0x037C720C LDP X20, X19, [X31 + 0x10]
	0x037C7210 LDR X30, [X31], #0x20
	0x037C7214 B 0x37C1690
	0x037C7218 SUB X31, X31, 0x70
	0x037C721C STP X29, X30, [X31 + 0x10]
	0x037C7220 STP X28, X27, [X31 + 0x20]
	0x037C7224 STP X26, X25, [X31 + 0x30]
	0x037C7228 STP X24, X23, [X31 + 0x40]
	0x037C722C STP X22, X21, [X31 + 0x50]
	0x037C7230 STP X20, X19, [X31 + 0x60]
	0x037C7234 ADRP X23, 0xC1A000

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+176], X30
	003 Move [X31+184], X25
	004 Move [X31+192], X24
	005 Move [X31+200], X23
	006 Move [X31+208], X22
	007 Move [X31+216], X21
	008 Move [X31+224], X20
	009 Move [X31+232], X19
	010 Move X25, 0xC1B000
	011 Move W8, [X25+486]
	012 Move W22, W5
	013 Move W19, W4
	014 Move X23, X3
	015 Move W24, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x982000
	023 Move X0, [X0+176]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+486], W8
	027 Move X0, X21
	028 Move X1, X20
	029 Move W2, W19
	030 Move [X31+152], X31
	031 Call InputManager.TryFindMatchingControlLayout, X0, X1, X2
	032 Move [X31+160], X0
	033 Move [X31+168], X1
	034 Add X0, X31, 160
	035 Move X1, X31
	036 Call InternedString.IsEmpty, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {58}
	041 Move TEMP, X24
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {104}
	045 Compare W19, 0
	046 JumpIfEqual {57}
	047 Move X0, X31
	048 Call DisableDeviceCommand.Create
	049 Move [X31+152], X0
	050 Move X8, 0x982000
	051 Move X8, [X8+176]
	052 Move X0, [X21+1088]
	053 Add X2, X31, 152
	054 Move W1, W19
	055 Move X3, [X8]
	056 Call 0x2209D80, X0, X1, X2
	057 Move X0, X31
	058 Move V1, [X20+16]
	059 Move V0, [X20+32]
	060 Move X8, [X20+48]
	061 Move V2, [X20]
	062 Move X1, [X31+160]
	063 Move X2, [X31+168]
	064 Add X5, X31, 32
	065 Move X0, X21
	066 Move W3, W19
	067 Move X4, X23
	068 Move W6, W22
	069 Move [X31+80], X8
	070 Move [X31+48], V1
	071 Move [X31+56], V0
	072 Move [X31+2], V2
	073 Move [X31], X31
	074 Move [X31+8], X31
	075 Call InputManager.AddDevice, X0, X1, X2, X3, X4, X5, X6
	076 Move X8, [X20+48]
	077 Move V1, [X20+16]
	078 Move V0, [X20+32]
	079 Move V2, [X20]
	080 Move [X31+144], X8
	081 Move [X31+112], V1
	082 Move [X31+120], V0
	083 Move [X31+6], V2
	084 Compare X0, 0
	085 JumpIfEqual {144}
	086 Move X8, [X31+144]
	087 Move V1, [X31+112]
	088 Move V0, [X31+128]
	089 Move V2, [X31+6]
	090 Move [X0+288], X8
	091 Move [X0+256], V1
	092 Move [X0+264], V0
	093 Move [X0+15], V2
	094 Move X20, [X31+224]
	095 Move X19, [X31+232]
	096 Move X22, [X31+208]
	097 Move X21, [X31+216]
	098 Move X24, [X31+192]
	099 Move X23, [X31+200]
	100 Move X30, [X31+176]
	101 Move X25, [X31+184]
	102 Add X31, X31, 240
	103 Return X0
	104 Move X8, [X20+48]
	105 Move V1, [X20+16]
	106 Move V0, [X20+32]
	107 Move V2, [X20]
	108 Move X0, 0x958000
	109 Move [X31+144], X8
	110 Move [X31+112], V1
	111 Move [X31+120], V0
	112 Move [X31+6], V2
	113 Move X0, [X0+1264]
	114 Call 0x1C17D08
	115 Add X1, X31, 96
	116 Call 0x1C17E04
	117 Move X19, X0
	118 Move X0, 0x982000
	119 Move X0, [X0+680]
	120 Call 0x1C17D08
	121 Move X1, X19
	122 Move X2, X31
	123 Call String.Format, X0, X1
	124 Move X19, X0
	125 Move X0, 0x935000
	126 Move X0, [X0+1400]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X20, X0
	130 Move X0, 0x980000
	131 Move X0, [X0+2264]
	132 Call 0x1C17D08
	133 Move X2, X0
	134 Move X0, X20
	135 Move X1, X19
	136 Move X3, X31
	137 Call ArgumentException..ctor, X0, X1, X2
	138 Move X0, 0x982000
	139 Move X0, [X0+688]
	140 Call 0x1C17D08
	141 Move X1, X0
	142 Move X0, X20
	143 Call 0x1C17DEC
	144 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description, UnityEngine.InputSystem.Utilities.InternedString layout, System.String deviceName = null, System.Int32 deviceId = 0, UnityEngine.InputSystem.InputDevice/DeviceFlags deviceFlags = 0)

Disassembly:
	0x037C7238 ADRP X25, 0x981000
	0x037C723C ADRP X20, 0x981000
	0x037C7240 ADRP X21, 0x92C000
	0x037C7244 LDRB W8, [X23 + 0x1F0]
	0x037C7248 LDR X25, [X25 + 0x340]
	0x037C724C LDR X20, [X20 + 0x348]
	0x037C7250 LDR X21, [X21 + 0x970]
	0x037C7254 MOV X19, X0
	0x037C7258 TBNZ X8, 0x0, 0x37C78DC
	0x037C725C ADRP X0, 0x981000
	0x037C7260 LDR X0, [X0 + 0x350]
	0x037C7264 BL 0x1C16CF4
	0x037C7268 ADRP X0, 0x981000
	0x037C726C LDR X0, [X0 + 0x358]
	0x037C7270 BL 0x1C16CF4
	0x037C7274 ADRP X0, 0x981000
	0x037C7278 LDR X0, [X0 + 0x360]
	0x037C727C BL 0x1C16CF4
	0x037C7280 ADRP X0, 0x92C000
	0x037C7284 LDR X0, [X0 + 0x970]
	0x037C7288 BL 0x1C16CF4
	0x037C728C ADRP X0, 0x981000
	0x037C7290 LDR X0, [X0 + 0x368]
	0x037C7294 BL 0x1C16CF4
	0x037C7298 ADRP X0, 0x981000
	0x037C729C LDR X0, [X0 + 0x370]
	0x037C72A0 BL 0x1C16CF4
	0x037C72A4 ADRP X0, 0x981000
	0x037C72A8 LDR X0, [X0 + 0x378]
	0x037C72AC BL 0x1C16CF4
	0x037C72B0 ADRP X0, 0x981000
	0x037C72B4 LDR X0, [X0 + 0x380]
	0x037C72B8 BL 0x1C16CF4
	0x037C72BC ADRP X0, 0x981000
	0x037C72C0 LDR X0, [X0 + 0x388]
	0x037C72C4 BL 0x1C16CF4
	0x037C72C8 ADRP X0, 0x981000
	0x037C72CC LDR X0, [X0 + 0x390]
	0x037C72D0 BL 0x1C16CF4
	0x037C72D4 ADRP X0, 0x981000
	0x037C72D8 LDR X0, [X0 + 0x398]
	0x037C72DC BL 0x1C16CF4
	0x037C72E0 ADRP X0, 0x981000
	0x037C72E4 LDR X0, [X0 + 0x3A0]
	0x037C72E8 BL 0x1C16CF4
	0x037C72EC ADRP X0, 0x981000
	0x037C72F0 LDR X0, [X0 + 0x3A8]
	0x037C72F4 BL 0x1C16CF4
	0x037C72F8 ADRP X0, 0x981000
	0x037C72FC LDR X0, [X0 + 0x3B0]
	0x037C7300 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+160], X30
	003 Move [X31+168], X19
	004 Move X9, [X1+48]
	005 Move V1, [X1+16]
	006 Move V0, [X1+32]
	007 Move V2, [X1]
	008 Move X19, X1
	009 Move W8, W5
	010 Move [X31+144], X9
	011 Move [X31+112], V1
	012 Move [X31+120], V0
	013 Move [X31+6], V2
	014 Add X5, X31, 96
	015 Move X1, X2
	016 Move X2, X3
	017 Move W3, W8
	018 Move [X31], X31
	019 Move [X31+8], X31
	020 Call InputManager.AddDevice, X0, X1, X2, X3, X4, X5, X6
	021 Move X9, [X19+48]
	022 Move V1, [X19+16]
	023 Move V0, [X19+32]
	024 Move V2, [X19]
	025 Move X8, X0
	026 Move [X31+80], X9
	027 Move [X31+48], V1
	028 Move [X31+56], V0
	029 Move [X31+2], V2
	030 Compare X0, 0
	031 JumpIfEqual {45}
	032 Move X9, [X31+80]
	033 Move V1, [X31+48]
	034 Move V0, [X31+64]
	035 Move V2, [X31+2]
	036 Move [X8+288], X9
	037 Move [X8+256], V1
	038 Move [X8+264], V0
	039 Move [X8+15], V2
	040 Move X30, [X31+160]
	041 Move X19, [X31+168]
	042 Move X0, X8
	043 Add X31, X31, 176
	044 Return X0
	045 Call 0x1C17F20
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Call 0x3EB2AD0
	048 Move X19, [X0]
	049 Call 0x3EB2AE0
	050 Compare X19, 0
	051 JumpIfNotEqual {53}
	052 Move X8, X31
	053 Move X0, X19
	054 Call 0x1C17F18
	055 Compare X19, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1D2D690
	058 Move X0, X19
	059 Call 0x1C17F18
	060 Call 0x1991590

Method: System.Void RemoveDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean keepOnListOfAvailableDevices = False)

Disassembly:
	0x037BD210 LDR W9, [X10]
	0x037BD214 ADD W9, W9, 0x1
	0x037BD218 ADD X8, X8, W9, 0x4, SXTW
	0x037BD21C ADD X0, X8, 0x138
	0x037BD220 LDP X8, X2, [X0]
	0x037BD224 MOV X0, X21
	0x037BD228 MOV X1, X22
	0x037BD22C BLR X8
	0x037BD230 LDR X0, [X23]
	0x037BD234 BL 0x1C16F10
	0x037BD238 ADRP X8, 0x98A000
	0x037BD23C LDR X8, [X8 + 0xE00]
	0x037BD240 MOV X1, X20
	0x037BD244 MOV X3, X31
	0x037BD248 MOV X22, X0
	0x037BD24C LDR X2, [X8]
	0x037BD250 BL 0x2725B2C
	0x037BD254 LDR X8, [X21]
	0x037BD258 LDR X1, [X25]
	0x037BD25C LDRH W9, [X8 + 0x12E]
	0x037BD260 CBZ X9, 0x37BD284
	0x037BD264 LDR X10, [X8 + 0xB0]
	0x037BD268 ADD X10, X10, 0x8
	0x037BD26C LDUR X11, [X10 - 0x8]
	0x037BD270 CMP X11, X1
	0x037BD274 B.EQ 0x37BD294
	0x037BD278 SUBS X9, X9, 0x1
	0x037BD27C ADD X10, X10, 0x10
	0x037BD280 B.NE 0x37BD26C
	0x037BD284 MOVZ W2, 0x2
	0x037BD288 MOV X0, X21
	0x037BD28C BL 0x1C5C788
	0x037BD290 B 0x37BD2A4
	0x037BD294 LDR W9, [X10]
	0x037BD298 ADD W9, W9, 0x2
	0x037BD29C ADD X8, X8, W9, 0x4, SXTW
	0x037BD2A0 ADD X0, X8, 0x138
	0x037BD2A4 LDP X8, X2, [X0]
	0x037BD2A8 MOV X0, X21
	0x037BD2AC MOV X1, X22
	0x037BD2B0 BLR X8
	0x037BD2B4 ADRP X26, 0x98A000
	0x037BD2B8 LDR X26, [X26 + 0xE38]
	0x037BD2BC LDR X0, [X26]
	0x037BD2C0 LDR W8, [X0 + 0xE0]
	0x037BD2C4 CBNZ W8, 0x37BD2D0
	0x037BD2C8 BL 0x1C16DFC
	0x037BD2CC LDR X0, [X26]
	0x037BD2D0 ADRP X27, 0x98A000
	0x037BD2D4 LDR X8, [X0 + 0xB8]
	0x037BD2D8 LDR X27, [X27 + 0xE40]
	0x037BD2DC LDP X23, X22, [X8]
	0x037BD2E0 LDR X0, [X27]
	0x037BD2E4 BL 0x1C16F10
	0x037BD2E8 ADRP X8, 0x98A000
	0x037BD2EC LDR X8, [X8 + 0xE08]
	0x037BD2F0 MOV X1, X20
	0x037BD2F4 MOV X3, X31
	0x037BD2F8 MOV X24, X0
	0x037BD2FC LDR X2, [X8]
	0x037BD300 BL 0x2725C6C
	0x037BD304 LDR X8, [X21]
	0x037BD308 LDR X1, [X25]
	0x037BD30C LDRH W9, [X8 + 0x12E]
	0x037BD310 CBZ X9, 0x37BD334
	0x037BD314 LDR X10, [X8 + 0xB0]
	0x037BD318 ADD X10, X10, 0x8
	0x037BD31C LDUR X11, [X10 - 0x8]
	0x037BD320 CMP X11, X1
	0x037BD324 B.EQ 0x37BD344
	0x037BD328 SUBS X9, X9, 0x1
	0x037BD32C ADD X10, X10, 0x10
	0x037BD330 B.NE 0x37BD31C
	0x037BD334 MOV X0, X21
	0x037BD338 MOV W2, W31
	0x037BD33C BL 0x1C5C788
	0x037BD340 B 0x37BD350
	0x037BD344 LDRSW X9, [X10]
	0x037BD348 ADD X8, X8, X9, 0x4, LSL
	0x037BD34C ADD X0, X8, 0x138
	0x037BD350 LDP X8, X4, [X0]
	0x037BD354 MOV X0, X21
	0x037BD358 MOV X1, X23
	0x037BD35C MOV X2, X22
	0x037BD360 MOV X3, X24
	0x037BD364 BLR X8
	0x037BD368 LDR X8, [X26]
	0x037BD36C LDR X0, [X27]
	0x037BD370 LDR X8, [X8 + 0xB8]
	0x037BD374 LDP X22, X23, [X8 + 0x10]
	0x037BD378 BL 0x1C16F10
	0x037BD37C ADRP X8, 0x98A000
	0x037BD380 LDR X8, [X8 + 0xE18]
	0x037BD384 MOV X1, X20
	0x037BD388 MOV X3, X31
	0x037BD38C MOV X24, X0
	0x037BD390 LDR X2, [X8]
	0x037BD394 BL 0x2725C6C
	0x037BD398 LDR X8, [X21]
	0x037BD39C LDR X1, [X25]
	0x037BD3A0 LDRH W9, [X8 + 0x12E]
	0x037BD3A4 CBZ X9, 0x37BD3C8
	0x037BD3A8 LDR X10, [X8 + 0xB0]
	0x037BD3AC ADD X10, X10, 0x8
	0x037BD3B0 LDUR X11, [X10 - 0x8]
	0x037BD3B4 CMP X11, X1
	0x037BD3B8 B.EQ 0x37BD3D8
	0x037BD3BC SUBS X9, X9, 0x1
	0x037BD3C0 ADD X10, X10, 0x10
	0x037BD3C4 B.NE 0x37BD3B0
	0x037BD3C8 MOV X0, X21
	0x037BD3CC MOV W2, W31
	0x037BD3D0 BL 0x1C5C788
	0x037BD3D4 B 0x37BD3E4
	0x037BD3D8 LDRSW X9, [X10]
	0x037BD3DC ADD X8, X8, X9, 0x4, LSL
	0x037BD3E0 ADD X0, X8, 0x138
	0x037BD3E4 LDP X8, X4, [X0]
	0x037BD3E8 MOV X0, X21
	0x037BD3EC MOV X1, X22
	0x037BD3F0 MOV X2, X23
	0x037BD3F4 MOV X3, X24
	0x037BD3F8 BLR X8
	0x037BD3FC LDR X8, [X26]
	0x037BD400 LDR X0, [X27]
	0x037BD404 LDR X8, [X8 + 0xB8]
	0x037BD408 LDP X22, X23, [X8 + 0x20]
	0x037BD40C BL 0x1C16F10
	0x037BD410 ADRP X8, 0x98A000
	0x037BD414 LDR X8, [X8 + 0xE10]
	0x037BD418 MOV X1, X20
	0x037BD41C MOV X3, X31
	0x037BD420 MOV X24, X0
	0x037BD424 LDR X2, [X8]
	0x037BD428 BL 0x2725C6C
	0x037BD42C LDR X8, [X21]
	0x037BD430 LDR X1, [X25]
	0x037BD434 LDRH W9, [X8 + 0x12E]
	0x037BD438 CBZ X9, 0x37BD45C
	0x037BD43C LDR X10, [X8 + 0xB0]
	0x037BD440 ADD X10, X10, 0x8
	0x037BD444 LDUR X11, [X10 - 0x8]
	0x037BD448 CMP X11, X1
	0x037BD44C B.EQ 0x37BD46C
	0x037BD450 SUBS X9, X9, 0x1
	0x037BD454 ADD X10, X10, 0x10
	0x037BD458 B.NE 0x37BD444
	0x037BD45C MOV X0, X21
	0x037BD460 MOV W2, W31
	0x037BD464 BL 0x1C5C788
	0x037BD468 B 0x37BD478
	0x037BD46C LDRSW X9, [X10]
	0x037BD470 ADD X8, X8, X9, 0x4, LSL
	0x037BD474 ADD X0, X8, 0x138
	0x037BD478 LDP X8, X4, [X0]
	0x037BD47C MOV X0, X21
	0x037BD480 MOV X1, X22
	0x037BD484 MOV X2, X23
	0x037BD488 MOV X3, X24
	0x037BD48C BLR X8
	0x037BD490 LDR X8, [X26]
	0x037BD494 LDR X0, [X27]
	0x037BD498 LDR X8, [X8 + 0xB8]
	0x037BD49C LDP X22, X23, [X8 + 0x30]
	0x037BD4A0 BL 0x1C16F10
	0x037BD4A4 ADRP X8, 0x98A000
	0x037BD4A8 LDR X8, [X8 + 0xE20]
	0x037BD4AC MOV X1, X20
	0x037BD4B0 MOV X3, X31
	0x037BD4B4 MOV X24, X0
	0x037BD4B8 LDR X2, [X8]
	0x037BD4BC BL 0x2725C6C
	0x037BD4C0 LDR X8, [X21]
	0x037BD4C4 LDR X1, [X25]
	0x037BD4C8 LDRH W9, [X8 + 0x12E]
	0x037BD4CC CBZ X9, 0x37BD4F0
	0x037BD4D0 LDR X10, [X8 + 0xB0]
	0x037BD4D4 ADD X10, X10, 0x8
	0x037BD4D8 LDUR X11, [X10 - 0x8]
	0x037BD4DC CMP X11, X1
	0x037BD4E0 B.EQ 0x37BD500
	0x037BD4E4 SUBS X9, X9, 0x1
	0x037BD4E8 ADD X10, X10, 0x10
	0x037BD4EC B.NE 0x37BD4D8
	0x037BD4F0 MOV X0, X21
	0x037BD4F4 MOV W2, W31
	0x037BD4F8 BL 0x1C5C788
	0x037BD4FC B 0x37BD50C
	0x037BD500 LDRSW X9, [X10]
	0x037BD504 ADD X8, X8, X9, 0x4, LSL
	0x037BD508 ADD X0, X8, 0x138
	0x037BD50C LDP X8, X4, [X0]
	0x037BD510 MOV X0, X21
	0x037BD514 MOV X1, X22
	0x037BD518 MOV X2, X23
	0x037BD51C MOV X3, X24
	0x037BD520 BLR X8
	0x037BD524 LDR X8, [X26]
	0x037BD528 LDR X0, [X27]
	0x037BD52C LDR X8, [X8 + 0xB8]
	0x037BD530 LDP X22, X23, [X8 + 0x40]
	0x037BD534 BL 0x1C16F10
	0x037BD538 ADRP X8, 0x98A000
	0x037BD53C LDR X8, [X8 + 0xDF0]
	0x037BD540 MOV X1, X20
	0x037BD544 MOV X3, X31
	0x037BD548 MOV X24, X0
	0x037BD54C LDR X2, [X8]
	0x037BD550 BL 0x2725C6C
	0x037BD554 LDR X8, [X21]
	0x037BD558 LDR X1, [X25]
	0x037BD55C LDRH W9, [X8 + 0x12E]
	0x037BD560 CBZ X9, 0x37BD584
	0x037BD564 LDR X10, [X8 + 0xB0]
	0x037BD568 ADD X10, X10, 0x8
	0x037BD56C LDUR X11, [X10 - 0x8]
	0x037BD570 CMP X11, X1
	0x037BD574 B.EQ 0x37BD594
	0x037BD578 SUBS X9, X9, 0x1
	0x037BD57C ADD X10, X10, 0x10
	0x037BD580 B.NE 0x37BD56C
	0x037BD584 MOV X0, X21
	0x037BD588 MOV W2, W31
	0x037BD58C BL 0x1C5C788
	0x037BD590 B 0x37BD5A0
	0x037BD594 LDRSW X9, [X10]
	0x037BD598 ADD X8, X8, X9, 0x4, LSL
	0x037BD59C ADD X0, X8, 0x138
	0x037BD5A0 LDP X8, X4, [X0]
	0x037BD5A4 MOV X0, X21
	0x037BD5A8 MOV X1, X22
	0x037BD5AC MOV X2, X23
	0x037BD5B0 MOV X3, X24
	0x037BD5B4 BLR X8
	0x037BD5B8 LDR X8, [X26]
	0x037BD5BC LDR X0, [X27]
	0x037BD5C0 LDR X8, [X8 + 0xB8]
	0x037BD5C4 LDP X22, X23, [X8 + 0x50]
	0x037BD5C8 BL 0x1C16F10
	0x037BD5CC ADRP X8, 0x98A000
	0x037BD5D0 LDR X8, [X8 + 0xE28]
	0x037BD5D4 MOV X1, X20
	0x037BD5D8 MOV X3, X31
	0x037BD5DC MOV X24, X0
	0x037BD5E0 LDR X2, [X8]
	0x037BD5E4 BL 0x2725C6C
	0x037BD5E8 LDR X8, [X21]
	0x037BD5EC LDR X1, [X25]
	0x037BD5F0 LDRH W9, [X8 + 0x12E]
	0x037BD5F4 CBZ X9, 0x37BD618
	0x037BD5F8 LDR X10, [X8 + 0xB0]
	0x037BD5FC ADD X10, X10, 0x8
	0x037BD600 LDUR X11, [X10 - 0x8]
	0x037BD604 CMP X11, X1
	0x037BD608 B.EQ 0x37BD628
	0x037BD60C SUBS X9, X9, 0x1
	0x037BD610 ADD X10, X10, 0x10
	0x037BD614 B.NE 0x37BD600
	0x037BD618 MOV X0, X21
	0x037BD61C MOV W2, W31
	0x037BD620 BL 0x1C5C788
	0x037BD624 B 0x37BD634
	0x037BD628 LDRSW X9, [X10]
	0x037BD62C ADD X8, X8, X9, 0x4, LSL
	0x037BD630 ADD X0, X8, 0x138
	0x037BD634 LDP X8, X4, [X0]
	0x037BD638 MOV X0, X21
	0x037BD63C MOV X1, X22
	0x037BD640 MOV X2, X23
	0x037BD644 MOV X3, X24
	0x037BD648 BLR X8
	0x037BD64C LDR X8, [X26]
	0x037BD650 LDR X0, [X27]
	0x037BD654 LDR X8, [X8 + 0xB8]
	0x037BD658 LDP X22, X23, [X8 + 0x60]
	0x037BD65C BL 0x1C16F10
	0x037BD660 ADRP X8, 0x98A000
	0x037BD664 LDR X8, [X8 + 0xE30]
	0x037BD668 MOV X1, X20
	0x037BD66C MOV X3, X31
	0x037BD670 MOV X24, X0
	0x037BD674 LDR X2, [X8]
	0x037BD678 BL 0x2725C6C
	0x037BD67C LDR X8, [X21]
	0x037BD680 LDR X1, [X25]
	0x037BD684 LDRH W9, [X8 + 0x12E]
	0x037BD688 CBZ X9, 0x37BD6AC
	0x037BD68C LDR X10, [X8 + 0xB0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xC25000
	009 Move W8, [X21+487]
	010 Move W22, W2
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {52}
	017 Move X0, 0x938000
	018 Move X0, [X0+3696]
	019 Call 0x1C17CF4
	020 Move X0, 0x98B000
	021 Move X0, [X0+3344]
	022 Call 0x1C17CF4
	023 Move X0, 0x989000
	024 Move X0, [X0+824]
	025 Call 0x1C17CF4
	026 Move X0, 0x98B000
	027 Move X0, [X0+3352]
	028 Call 0x1C17CF4
	029 Move X0, 0x98B000
	030 Move X0, [X0+3360]
	031 Call 0x1C17CF4
	032 Move X0, 0x98B000
	033 Move X0, [X0+3368]
	034 Call 0x1C17CF4
	035 Move X0, 0x98B000
	036 Move X0, [X0+3376]
	037 Call 0x1C17CF4
	038 Move X0, 0x98B000
	039 Move X0, [X0+3384]
	040 Call 0x1C17CF4
	041 Move X0, 0x95F000
	042 Move X0, [X0+3352]
	043 Call 0x1C17CF4
	044 Move X0, 0x95F000
	045 Move X0, [X0+624]
	046 Call 0x1C17CF4
	047 Move X0, 0x98B000
	048 Move X0, [X0+3392]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X21+487], W8
	052 Move [X31+12], W31
	053 Compare X19, 0
	054 JumpIfEqual {286}
	055 Move W8, [X19+232]
	056 Add W31, W8, 1
	057 Move X21, 0x98B000
	058 Move X21, [X21+3360]
	059 Move X0, X20
	060 Move X1, X19
	061 Call InputManager.RemoveStateChangeMonitors, X0, X1
	062 Move X0, [X20+1168]
	063 Move X1, [X21]
	064 Move W24, [X19+232]
	065 Move W23, [X19+224]
	066 Call ArrayHelpers.LengthSafe, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, [X20+1168]
	069 Compare X0, 0
	070 JumpIfEqual {285}
	071 Move X9, 0x98B000
	072 Move X8, [X0+24]
	073 Move X9, [X9+3352]
	074 Add X1, X31, 12
	075 Move W2, W24
	076 Move [X31+12], W8
	077 Move X3, [X9]
	078 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	079 Move X8, 0x989000
	080 Move X8, [X8+824]
	081 Move X0, [X20+120]
	082 Add X21, X20, 112
	083 Move X1, X21
	084 Move X3, [X8]
	085 Move W2, W24
	086 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	087 Move X0, [X20+128]
	088 Compare X0, 0
	089 JumpIfEqual {285}
	090 Move X8, 0x98B000
	091 Move X8, [X8+3376]
	092 Move W1, W23
	093 Move X2, [X8]
	094 Call Dictionary`2<Int32, Object>.Remove, X0, X1
	095 Move X8, [X20+120]
	096 Compare X8, 0
	097 JumpIfEqual {100}
	098 Move X0, X20
	099 Call InputManager.ReallocateStateBuffers, X0
	100 Add X0, X20, 176
	101 Move X1, X31
	102 Call InputStateBuffers.FreeAll, X0
	103 Move W8, [X21]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X10, [X20+120]
	106 Compare X10, 0
	107 JumpIfEqual {285}
	108 Move W9, [X10+24]
	109 Move X11, W24
	110 Add X10, X10, X11
	111 Add X10, X10, 32
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X11, [X10]
	114 Compare X11, 0
	115 JumpIfEqual {285}
	116 Move W12, [X11+232]
	117 Add W24, W24, 1
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Add X10, X10, 8
	120 Subtract W12, W12, 1
	121 Move [X11+232], W12
	122 Move TEMP, 0
	123 Not TEMP
	124 Move W8, TEMP
	125 Move [X19+232], W8
	126 Move X1, X20
	127 Add X1, X1, 136
	128 Move W8, [X1]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X0, [X20+144]
	131 Compare X0, 0
	132 JumpIfEqual {285}
	133 Move W10, [X0+24]
	134 Move W2, W31
	135 Add X9, X0, 93
	136 NotImplemented "Instruction CMP not yet implemented."
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Add W2, W2, 1
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Add X9, X9, 64
	142 Move TEMP, X22
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {148}
	146 Move W8, 1
	147 Move [X9], W8
	148 Move X8, 0x98B000
	149 Move X8, [X8+3344]
	150 Move X3, [X8]
	151 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	152 Move X8, 0x95F000
	153 Move X8, [X8+3352]
	154 Move X23, 0x98B000
	155 Move X0, [X8]
	156 Move W8, [X0+224]
	157 Move X23, [X23+3384]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move W8, [X19+20]
	162 Move X0, X19
	163 Move X2, X31
	164 Subtract W1, W31, W8
	165 Call InputControl.BakeOffsetIntoStateBlockRecursive, X0, X1
	166 Move W1, 1
	167 Move X0, X19
	168 Move X2, X31
	169 Call InputActionState.OnDeviceChange, X0, X1
	170 Move X1, [X23]
	171 Move X0, X19
	172 Call 0x1C17E00
	173 Compare X0, 0
	174 JumpIfEqual {206}
	175 Move X8, 0x938000
	176 Move X8, [X8+3696]
	177 Move X22, X0
	178 Move X0, [X8]
	179 Call 0x1C17F10
	180 Move X8, [X22]
	181 Move X1, [X23]
	182 Move X23, X0
	183 NotImplemented "Instruction LDRH not yet implemented."
	184 Compare X9, 0
	185 JumpIfEqual {192}
	186 Move X10, [X8+176]
	187 Add X10, X10, 8
	188 NotImplemented "Instruction LDUR not yet implemented."
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Subtract X9, X9, 1
	191 Add X10, X10, 16
	192 Move X0, X22
	193 Move W2, W31
	194 Call 0x1C5D788
	195 NotImplemented "Instruction LDRSW not yet implemented."
	196 Add X8, X8, X9
	197 Add X0, X8, 312
	198 Move X2, [X0+8]
	199 Move X0, X23
	200 Move X1, X22
	201 Move X3, X31
	202 Call Action..ctor, X0, X1, X2
	203 Move X0, X20
	204 Move X1, X23
	205 Call InputManager.remove_onBeforeUpdate, X0, X1
	206 Move X0, X19
	207 Move X1, X31
	208 Call InputDevice.get_updateBeforeRender, X0
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfNotEqual {241}
	213 Move W8, [X21]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X22, X31
	216 Move X8, [X20+120]
	217 Compare X8, 0
	218 JumpIfEqual {285}
	219 Move W9, [X8+24]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Add X8, X8, X22
	222 Move X0, [X8+32]
	223 Compare X0, 0
	224 JumpIfEqual {285}
	225 Move X1, X31
	226 Call InputDevice.get_updateBeforeRender, X0
	227 Move TEMP, X0
	228 And TEMP, TEMP, 1
	229 Compare TEMP, 1
	230 JumpIfEqual {241}
	231 Move W8, [X21]
	232 Add X22, X22, 1
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move W10, [X20+168]
	235 And W9, W10, 0xFFFFFFFB
	236 NotImplemented "Instruction CMP not yet implemented."
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move [X20+168], W9
	239 Move X0, X20
	240 Call InputManager.ReallocateStateBuffers, X0
	241 Move X21, 0x98B000
	242 Move X22, 0x98B000
	243 Move X23, 0x95F000
	244 Move X21, [X21+3392]
	245 Move X22, [X22+3368]
	246 Move X23, [X23+624]
	247 Move X0, X19
	248 Move X1, X31
	249 Call InputDevice.NotifyRemoved, X0
	250 Move X3, [X21]
	251 Move X5, [X22]
	252 Add X0, X20, 224
	253 Move W2, 1
	254 Move X1, X19
	255 Move X4, X31
	256 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	257 Move X0, X19
	258 Move X1, X31
	259 Call "il2cpp_vm_object_is_inst", X0
	260 Move X8, [X23]
	261 Move X19, X0
	262 Move W9, [X8+224]
	263 Compare W9, 0
	264 JumpIfNotEqual {267}
	265 Move X0, X8
	266 Call 0x1C17DFC
	267 Move X0, X19
	268 Move X1, X31
	269 Call InputSystem.GetDevice, X0
	270 Compare X0, 0
	271 JumpIfEqual {276}
	272 Move X8, [X0]
	273 Move X9, [X8+584]
	274 Move X1, [X8+592]
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Move X20, [X31+48]
	277 Move X19, [X31+56]
	278 Move X22, [X31+32]
	279 Move X21, [X31+40]
	280 Move X24, [X31+16]
	281 Move X23, [X31+24]
	282 Move X30, [X31+64]
	283 Return 
	284 Call 0x1C17F28
	285 Call 0x1C17F20
	286 Move X0, 0x93C000
	287 Move X0, [X0+1320]
	288 Call 0x1C17D08
	289 Call 0x1C17F10
	290 Move X19, X0
	291 Move X0, 0x95F000
	292 Move X0, [X0+3360]
	293 Call 0x1C17D08
	294 Move X1, X0
	295 Move X0, X19
	296 Move X2, X31
	297 Call ArgumentNullException..ctor, X0, X1
	298 Move X0, 0x98B000
	299 Move X0, [X0+3400]
	300 Call 0x1C17D08
	301 Move X1, X0
	302 Move X0, X19
	303 Call 0x1C17DEC

Method: System.Void FlushDisconnectedDevices()

Disassembly:
	0x037C742C BL 0x1C16CF4
	0x037C7430 ADRP X0, 0x981000
	0x037C7434 LDR X0, [X0 + 0x470]
	0x037C7438 BL 0x1C16CF4
	0x037C743C ADRP X0, 0x981000
	0x037C7440 LDR X0, [X0 + 0x478]
	0x037C7444 BL 0x1C16CF4
	0x037C7448 ADRP X0, 0x981000
	0x037C744C LDR X0, [X0 + 0x480]
	0x037C7450 BL 0x1C16CF4
	0x037C7454 ADRP X0, 0x981000
	0x037C7458 LDR X0, [X0 + 0x488]
	0x037C745C BL 0x1C16CF4
	0x037C7460 ADRP X0, 0x981000
	0x037C7464 LDR X0, [X0 + 0x490]
	0x037C7468 BL 0x1C16CF4
	0x037C746C ADRP X0, 0x981000
	0x037C7470 LDR X0, [X0 + 0x498]
	0x037C7474 BL 0x1C16CF4
	0x037C7478 ADRP X0, 0x981000
	0x037C747C LDR X0, [X0 + 0x4A0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC1B000
	006 Move X20, 0x982000
	007 Move W8, [X21+488]
	008 Move X20, [X20+712]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x982000
	015 Move X0, [X0+712]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+488], W8
	019 Move X0, [X19+160]
	020 Move W1, [X19+152]
	021 Move X2, [X20]
	022 Call 0x2176B30, X0, X1
	023 Move [X19+152], W31
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return 

Method: System.Void ResetDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean alsoResetDontResetControls = False, System.Nullable`1<System.Boolean> issueResetCommand = null)

Disassembly:
	0x037C7480 BL 0x1C16CF4
	0x037C7484 ADRP X0, 0x981000
	0x037C7488 LDR X0, [X0 + 0x4A8]
	0x037C748C BL 0x1C16CF4
	0x037C7490 ADRP X0, 0x981000
	0x037C7494 LDR X0, [X0 + 0x4B0]
	0x037C7498 BL 0x1C16CF4
	0x037C749C ADRP X0, 0x981000
	0x037C74A0 LDR X0, [X0 + 0x4B8]
	0x037C74A4 BL 0x1C16CF4
	0x037C74A8 ADRP X0, 0x981000
	0x037C74AC LDR X0, [X0 + 0x4C0]
	0x037C74B0 BL 0x1C16CF4
	0x037C74B4 ADRP X0, 0x981000
	0x037C74B8 LDR X0, [X0 + 0x4C8]
	0x037C74BC BL 0x1C16CF4
	0x037C74C0 ADRP X0, 0x981000
	0x037C74C4 LDR X0, [X0 + 0x4D0]
	0x037C74C8 BL 0x1C16CF4
	0x037C74CC ADRP X0, 0x981000
	0x037C74D0 LDR X0, [X0 + 0x4D8]
	0x037C74D4 BL 0x1C16CF4
	0x037C74D8 ADRP X0, 0x981000
	0x037C74DC LDR X0, [X0 + 0x4E0]
	0x037C74E0 BL 0x1C16CF4
	0x037C74E4 ADRP X0, 0x981000
	0x037C74E8 LDR X0, [X0 + 0x4E8]
	0x037C74EC BL 0x1C16CF4
	0x037C74F0 ADRP X0, 0x981000
	0x037C74F4 LDR X0, [X0 + 0x4F0]
	0x037C74F8 BL 0x1C16CF4
	0x037C74FC ADRP X0, 0x981000
	0x037C7500 LDR X0, [X0 + 0x4F8]
	0x037C7504 BL 0x1C16CF4
	0x037C7508 ADRP X0, 0x981000
	0x037C750C LDR X0, [X0 + 0x500]
	0x037C7510 BL 0x1C16CF4
	0x037C7514 ADRP X0, 0x981000
	0x037C7518 LDR X0, [X0 + 0x508]
	0x037C751C BL 0x1C16CF4
	0x037C7520 ADRP X0, 0x981000
	0x037C7524 LDR X0, [X0 + 0x510]
	0x037C7528 BL 0x1C16CF4
	0x037C752C ADRP X0, 0x981000
	0x037C7530 LDR X0, [X0 + 0x518]
	0x037C7534 BL 0x1C16CF4
	0x037C7538 ADRP X0, 0x981000
	0x037C753C LDR X0, [X0 + 0x520]
	0x037C7540 BL 0x1C16CF4
	0x037C7544 ADRP X0, 0x981000
	0x037C7548 LDR X0, [X0 + 0x528]
	0x037C754C BL 0x1C16CF4
	0x037C7550 ADRP X0, 0x981000
	0x037C7554 LDR X0, [X0 + 0x530]
	0x037C7558 BL 0x1C16CF4
	0x037C755C ADRP X0, 0x981000
	0x037C7560 LDR X0, [X0 + 0x538]
	0x037C7564 BL 0x1C16CF4
	0x037C7568 ADRP X0, 0x92C000
	0x037C756C LDR X0, [X0 + 0x6C0]
	0x037C7570 BL 0x1C16CF4
	0x037C7574 ADRP X0, 0x981000
	0x037C7578 LDR X0, [X0 + 0x540]
	0x037C757C BL 0x1C16CF4
	0x037C7580 ADRP X0, 0x981000
	0x037C7584 LDR X0, [X0 + 0x548]
	0x037C7588 BL 0x1C16CF4
	0x037C758C ADRP X0, 0x981000
	0x037C7590 LDR X0, [X0 + 0x550]
	0x037C7594 BL 0x1C16CF4
	0x037C7598 ADRP X0, 0x981000
	0x037C759C LDR X0, [X0 + 0x558]
	0x037C75A0 BL 0x1C16CF4
	0x037C75A4 ADRP X0, 0x981000
	0x037C75A8 LDR X0, [X0 + 0x560]
	0x037C75AC BL 0x1C16CF4
	0x037C75B0 ADRP X0, 0x981000
	0x037C75B4 LDR X0, [X0 + 0x568]
	0x037C75B8 BL 0x1C16CF4
	0x037C75BC ADRP X0, 0x975000
	0x037C75C0 LDR X0, [X0 + 0xE70]
	0x037C75C4 BL 0x1C16CF4
	0x037C75C8 ADRP X0, 0x980000
	0x037C75CC LDR X0, [X0 + 0x940]
	0x037C75D0 BL 0x1C16CF4
	0x037C75D4 ADRP X0, 0x981000
	0x037C75D8 LDR X0, [X0 + 0x570]
	0x037C75DC BL 0x1C16CF4
	0x037C75E0 ADRP X0, 0x981000
	0x037C75E4 LDR X0, [X0 + 0x578]
	0x037C75E8 BL 0x1C16CF4
	0x037C75EC ADRP X0, 0x981000
	0x037C75F0 LDR X0, [X0 + 0x580]
	0x037C75F4 BL 0x1C16CF4
	0x037C75F8 ADRP X0, 0x981000
	0x037C75FC LDR X0, [X0 + 0x588]
	0x037C7600 BL 0x1C16CF4
	0x037C7604 ADRP X0, 0x981000
	0x037C7608 LDR X0, [X0 + 0x590]
	0x037C760C BL 0x1C16CF4
	0x037C7610 ADRP X0, 0x981000
	0x037C7614 LDR X0, [X0 + 0x598]
	0x037C7618 BL 0x1C16CF4
	0x037C761C ADRP X0, 0x975000
	0x037C7620 LDR X0, [X0 + 0xE88]
	0x037C7624 BL 0x1C16CF4
	0x037C7628 ADRP X0, 0x981000
	0x037C762C LDR X0, [X0 + 0x5A0]
	0x037C7630 BL 0x1C16CF4
	0x037C7634 ADRP X0, 0x980000
	0x037C7638 LDR X0, [X0 + 0x918]
	0x037C763C BL 0x1C16CF4
	0x037C7640 ADRP X0, 0x980000
	0x037C7644 LDR X0, [X0 + 0x7D8]
	0x037C7648 BL 0x1C16CF4
	0x037C764C ADRP X0, 0x981000
	0x037C7650 LDR X0, [X0 + 0x5A8]
	0x037C7654 BL 0x1C16CF4
	0x037C7658 ADRP X0, 0x980000
	0x037C765C LDR X0, [X0 + 0x948]
	0x037C7660 BL 0x1C16CF4
	0x037C7664 ADRP X0, 0x981000
	0x037C7668 LDR X0, [X0 + 0x5B0]
	0x037C766C BL 0x1C16CF4
	0x037C7670 ADRP X0, 0x980000
	0x037C7674 LDR X0, [X0 + 0x950]
	0x037C7678 BL 0x1C16CF4
	0x037C767C ADRP X0, 0x981000
	0x037C7680 LDR X0, [X0 + 0x5B8]
	0x037C7684 BL 0x1C16CF4
	0x037C7688 ADRP X0, 0x981000
	0x037C768C LDR X0, [X0 + 0x5C0]
	0x037C7690 BL 0x1C16CF4
	0x037C7694 ADRP X0, 0x981000
	0x037C7698 LDR X0, [X0 + 0x5C8]
	0x037C769C BL 0x1C16CF4
	0x037C76A0 ADRP X0, 0x981000
	0x037C76A4 LDR X0, [X0 + 0x5D0]
	0x037C76A8 BL 0x1C16CF4
	0x037C76AC ADRP X0, 0x981000
	0x037C76B0 LDR X0, [X0 + 0x5D8]
	0x037C76B4 BL 0x1C16CF4
	0x037C76B8 ADRP X0, 0x981000
	0x037C76BC LDR X0, [X0 + 0x5E0]
	0x037C76C0 BL 0x1C16CF4
	0x037C76C4 ADRP X0, 0x981000
	0x037C76C8 LDR X0, [X0 + 0x5E8]
	0x037C76CC BL 0x1C16CF4
	0x037C76D0 ADRP X0, 0x981000
	0x037C76D4 LDR X0, [X0 + 0x5F0]
	0x037C76D8 BL 0x1C16CF4
	0x037C76DC ADRP X0, 0x981000
	0x037C76E0 LDR X0, [X0 + 0x5F8]
	0x037C76E4 BL 0x1C16CF4
	0x037C76E8 ADRP X0, 0x981000
	0x037C76EC LDR X0, [X0 + 0x600]
	0x037C76F0 BL 0x1C16CF4
	0x037C76F4 ADRP X0, 0x980000
	0x037C76F8 LDR X0, [X0 + 0x4A0]
	0x037C76FC BL 0x1C16CF4
	0x037C7700 ADRP X0, 0x981000
	0x037C7704 LDR X0, [X0 + 0x608]
	0x037C7708 BL 0x1C16CF4
	0x037C770C ADRP X0, 0x97E000
	0x037C7710 LDR X0, [X0 + 0x350]
	0x037C7714 BL 0x1C16CF4
	0x037C7718 ADRP X0, 0x981000
	0x037C771C LDR X0, [X0 + 0x610]
	0x037C7720 BL 0x1C16CF4
	0x037C7724 ADRP X0, 0x980000
	0x037C7728 LDR X0, [X0 + 0x958]
	0x037C772C BL 0x1C16CF4
	0x037C7730 ADRP X0, 0x981000
	0x037C7734 LDR X0, [X0 + 0x618]
	0x037C7738 BL 0x1C16CF4
	0x037C773C ADRP X0, 0x981000
	0x037C7740 LDR X0, [X0 + 0x620]
	0x037C7744 BL 0x1C16CF4
	0x037C7748 ADRP X0, 0x981000
	0x037C774C LDR X0, [X0 + 0x628]
	0x037C7750 BL 0x1C16CF4
	0x037C7754 ADRP X0, 0x981000
	0x037C7758 LDR X0, [X0 + 0x630]
	0x037C775C BL 0x1C16CF4
	0x037C7760 ADRP X0, 0x981000
	0x037C7764 LDR X0, [X0 + 0x638]
	0x037C7768 BL 0x1C16CF4
	0x037C776C ADRP X0, 0x981000
	0x037C7770 LDR X0, [X0 + 0x640]
	0x037C7774 BL 0x1C16CF4
	0x037C7778 ADRP X0, 0x981000
	0x037C777C LDR X0, [X0 + 0x648]
	0x037C7780 BL 0x1C16CF4
	0x037C7784 ADRP X0, 0x981000
	0x037C7788 LDR X0, [X0 + 0x650]
	0x037C778C BL 0x1C16CF4
	0x037C7790 ADRP X0, 0x981000
	0x037C7794 LDR X0, [X0 + 0x658]
	0x037C7798 BL 0x1C16CF4
	0x037C779C ADRP X0, 0x981000
	0x037C77A0 LDR X0, [X0 + 0x660]
	0x037C77A4 BL 0x1C16CF4
	0x037C77A8 ADRP X0, 0x981000
	0x037C77AC LDR X0, [X0 + 0x668]
	0x037C77B0 BL 0x1C16CF4
	0x037C77B4 ADRP X0, 0x981000
	0x037C77B8 LDR X0, [X0 + 0x670]
	0x037C77BC BL 0x1C16CF4
	0x037C77C0 ADRP X0, 0x980000
	0x037C77C4 LDR X0, [X0 + 0x828]
	0x037C77C8 BL 0x1C16CF4
	0x037C77CC ADRP X0, 0x981000
	0x037C77D0 LDR X0, [X0 + 0x678]
	0x037C77D4 BL 0x1C16CF4
	0x037C77D8 ADRP X0, 0x981000
	0x037C77DC LDR X0, [X0 + 0x680]
	0x037C77E0 BL 0x1C16CF4
	0x037C77E4 ADRP X0, 0x981000
	0x037C77E8 LDR X0, [X0 + 0x688]
	0x037C77EC BL 0x1C16CF4
	0x037C77F0 ADRP X0, 0x981000
	0x037C77F4 LDR X0, [X0 + 0x690]
	0x037C77F8 BL 0x1C16CF4
	0x037C77FC ADRP X0, 0x958000
	0x037C7800 LDR X0, [X0 + 0xF0]
	0x037C7804 BL 0x1C16CF4
	0x037C7808 ADRP X0, 0x980000
	0x037C780C LDR X0, [X0 + 0x7F8]
	0x037C7810 BL 0x1C16CF4
	0x037C7814 ADRP X0, 0x980000
	0x037C7818 LDR X0, [X0 + 0x470]
	0x037C781C BL 0x1C16CF4
	0x037C7820 ADRP X0, 0x981000
	0x037C7824 LDR X0, [X0 + 0x698]
	0x037C7828 BL 0x1C16CF4
	0x037C782C ADRP X0, 0x980000
	0x037C7830 LDR X0, [X0 + 0x4C8]
	0x037C7834 BL 0x1C16CF4
	0x037C7838 ADRP X0, 0x981000
	0x037C783C LDR X0, [X0 + 0x6A0]
	0x037C7840 BL 0x1C16CF4
	0x037C7844 ADRP X0, 0x981000
	0x037C7848 LDR X0, [X0 + 0x6A8]
	0x037C784C BL 0x1C16CF4
	0x037C7850 ADRP X0, 0x980000
	0x037C7854 LDR X0, [X0 + 0x800]
	0x037C7858 BL 0x1C16CF4
	0x037C785C ADRP X0, 0x981000
	0x037C7860 LDR X0, [X0 + 0x6B0]
	0x037C7864 BL 0x1C16CF4
	0x037C7868 ADRP X0, 0x981000
	0x037C786C LDR X0, [X0 + 0x6B8]
	0x037C7870 BL 0x1C16CF4
	0x037C7874 ADRP X0, 0x980000
	0x037C7878 LDR X0, [X0 + 0x808]
	0x037C787C BL 0x1C16CF4
	0x037C7880 ADRP X0, 0x981000
	0x037C7884 LDR X0, [X0 + 0x6C0]
	0x037C7888 BL 0x1C16CF4
	0x037C788C ADRP X0, 0x954000
	0x037C7890 LDR X0, [X0 + 0x510]
	0x037C7894 BL 0x1C16CF4
	0x037C7898 ADRP X0, 0x981000
	0x037C789C LDR X0, [X0 + 0x6C8]
	0x037C78A0 BL 0x1C16CF4
	0x037C78A4 ADRP X0, 0x981000
	0x037C78A8 LDR X0, [X0 + 0x6D0]
	0x037C78AC BL 0x1C16CF4
	0x037C78B0 ADRP X0, 0x954000
	0x037C78B4 LDR X0, [X0 + 0x518]
	0x037C78B8 BL 0x1C16CF4
	0x037C78BC ADRP X0, 0x981000
	0x037C78C0 LDR X0, [X0 + 0x6D8]
	0x037C78C4 BL 0x1C16CF4
	0x037C78C8 ADRP X0, 0x95E000
	0x037C78CC LDR X0, [X0 + 0xF0]
	0x037C78D0 BL 0x1C16CF4
	0x037C78D4 MOVZ W8, 0x1
	0x037C78D8 STRB W8, [X23 + 0x1F0]
	0x037C78DC ADRP X22, 0x981000
	0x037C78E0 ADRP X24, 0x92C000
	0x037C78E4 LDR X22, [X22 + 0x378]
	0x037C78E8 LDR X24, [X24 + 0x6C0]
	0x037C78EC ADD X0, X19, 0x18
	0x037C78F0 MOV X1, X31
	0x037C78F4 STR X31, [X31 + 0x8]
	0x037C78F8 BL 0x3817E30
	0x037C78FC ADD X0, X19, 0x58
	0x037C7900 MOV X1, X31
	0x037C7904 BL 0x37698FC
	0x037C7908 ADD X0, X19, 0x60
	0x037C790C MOV X1, X31
	0x037C7910 BL 0x37698FC
	0x037C7914 ADD X0, X19, 0x68
	0x037C7918 MOV X1, X31
	0x037C791C BL 0x37698FC
	0x037C7920 LDR X0, [X25]
	0x037C7924 BL 0x1C16F10
	0x037C7928 LDR X1, [X20]
	0x037C792C MOV X20, X0
	0x037C7930 BL 0x2A12DD4
	0x037C7934 MOVZ W8, 0x3
	0x037C7938 STR X20, [X19 + 0x80]
	0x037C793C STR W8, [X19 + 0xA8]
	0x037C7940 LDR X0, [X21]
	0x037C7944 LDR W8, [X0 + 0xE0]
	0x037C7948 CBNZ W8, 0x37C7950
	0x037C794C BL 0x1C16DFC
	0x037C7950 ADRP X27, 0x954000
	0x037C7954 ADRP X26, 0x981000
	0x037C7958 ADRP X21, 0x97E000
	0x037C795C ADRP X25, 0x981000
	0x037C7960 ADRP X29, 0x980000
	0x037C7964 ADRP X28, 0x981000
	0x037C7968 ADRP X23, 0x981000
	0x037C796C LDR X27, [X27 + 0x518]
	0x037C7970 LDR X26, [X26 + 0x388]
	0x037C7974 LDR X21, [X21 + 0x350]
	0x037C7978 LDR X25, [X25 + 0x3C0]
	0x037C797C LDR X29, [X29 + 0x4C8]
	0x037C7980 LDR X28, [X28 + 0x448]
	0x037C7984 LDR X23, [X23 + 0x420]
	0x037C7988 MOV X0, X31
	0x037C798C BL 0x3C0190C
	0x037C7990 AND W8, W0, 0x1
	0x037C7994 MOVZ W9, 0x42700000
	0x037C7998 STRB W8, [X19 + 0x3B2]
	0x037C799C STR W9, [X19 + 0x14]
	0x037C79A0 LDR X0, [X24]
	0x037C79A4 LDR X20, [X22]
	0x037C79A8 LDR W8, [X0 + 0xE0]
	0x037C79AC CBNZ W8, 0x37C79B4
	0x037C79B0 BL 0x1C16DFC
	0x037C79B4 MOV X0, X20
	0x037C79B8 MOV X1, X31
	0x037C79BC BL 0x338C698
	0x037C79C0 LDR X1, [X27]
	0x037C79C4 MOV X2, X0
	0x037C79C8 MOV X0, X19
	0x037C79CC BL 0x37C2744
	0x037C79D0 LDR X0, [X26]
	0x037C79D4 MOV X1, X31
	0x037C79D8 BL 0x338C698
	0x037C79DC LDR X1, [X21]
	0x037C79E0 MOV X2, X0
	0x037C79E4 MOV X0, X19
	0x037C79E8 BL 0x37C2744
	0x037C79EC LDR X0, [X25]
	0x037C79F0 MOV X1, X31
	0x037C79F4 BL 0x338C698
	0x037C79F8 LDR X1, [X29]
	0x037C79FC MOV X2, X0
	0x037C7A00 MOV X0, X19
	0x037C7A04 BL 0x37C2744
	0x037C7A08 LDR X0, [X28]
	0x037C7A0C MOV X1, X31
	0x037C7A10 BL 0x338C698
	0x037C7A14 ADRP X8, 0x958000
	0x037C7A18 LDR X8, [X8 + 0xF0]
	0x037C7A1C MOV X2, X0
	0x037C7A20 MOV X0, X19
	0x037C7A24 LDR X1, [X8]
	0x037C7A28 BL 0x37C2744
	0x037C7A2C LDR X0, [X22]
	0x037C7A30 MOV X1, X31
	0x037C7A34 BL 0x338C698
	0x037C7A38 ADRP X8, 0x980000
	0x037C7A3C LDR X8, [X8 + 0x940]
	0x037C7A40 MOV X2, X0

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D8
	003 Move [X31+48], X29
	004 Move [X31+56], X30
	005 Move [X31+64], X28
	006 Move [X31+72], X27
	007 Move [X31+80], X26
	008 Move [X31+88], X25
	009 Move [X31+96], X24
	010 Move [X31+104], X23
	011 Move [X31+112], X22
	012 Move [X31+120], X21
	013 Move [X31+128], X20
	014 Move [X31+136], X19
	015 Move X22, 0xC1B000
	016 Move W8, [X22+489]
	017 Move W21, W2
	018 Move X19, X1
	019 Move X20, X0
	020 NotImplemented "Instruction STRH not yet implemented."
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {57}
	025 Move X0, 0x981000
	026 Move X0, [X0+3368]
	027 Call 0x1C17CF4
	028 Move X0, 0x982000
	029 Move X0, [X0+720]
	030 Call 0x1C17CF4
	031 Move X0, 0x955000
	032 Move X0, [X0+3792]
	033 Call 0x1C17CF4
	034 Move X0, 0x955000
	035 Move X0, [X0+3352]
	036 Call 0x1C17CF4
	037 Move X0, 0x981000
	038 Move X0, [X0+4072]
	039 Call 0x1C17CF4
	040 Move X0, 0x955000
	041 Move X0, [X0+3432]
	042 Call 0x1C17CF4
	043 Move X0, 0x981000
	044 Move X0, [X0+4064]
	045 Call 0x1C17CF4
	046 Move X0, 0x931000
	047 Move X0, [X0+3056]
	048 Call 0x1C17CF4
	049 Move X0, 0x931000
	050 Move X0, [X0+3064]
	051 Call 0x1C17CF4
	052 Move X0, 0x982000
	053 Move X0, [X0+728]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X22+489], W8
	057 Move [X31+16], X31
	058 Move [X31+24], X31
	059 Move [X31], X31
	060 Move [X31+8], X31
	061 Compare X19, 0
	062 JumpIfEqual {325}
	063 Move X0, X19
	064 Move X1, X31
	065 Call InputDevice.get_added, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {343}
	070 Move X23, 0x982000
	071 Move X24, 0x981000
	072 Move X23, [X23+728]
	073 Move X24, [X24+3368]
	074 Move TEMP, X21
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {79}
	078 Move W26, 1
	079 Move X0, X19
	080 Move X1, X31
	081 Call InputDevice.get_hasDontResetControls, X0
	082 NotImplemented "Instruction ORN not yet implemented."
	083 And W26, W8, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W8, 8
	086 NotImplemented "Instruction CINC not yet implemented."
	087 Move X0, X19
	088 Move W1, W22
	089 Move X2, X31
	090 Call InputActionState.OnDeviceChange, X0, X1
	091 Move X3, [X23]
	092 Move X5, [X24]
	093 Add X0, X20, 224
	094 Move X1, X19
	095 Move W2, W22
	096 Move X4, X31
	097 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	098 Move TEMP, X21
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {124}
	102 Move X22, 0x982000
	103 Move X22, [X22+720]
	104 Move X0, X19
	105 Move X1, [X22]
	106 Call 0x1C17E00
	107 Compare X0, 0
	108 JumpIfEqual {124}
	109 Move X8, [X0]
	110 Move X1, [X22]
	111 Move X21, X0
	112 NotImplemented "Instruction LDRH not yet implemented."
	113 Compare X9, 0
	114 JumpIfEqual {121}
	115 Move X10, [X8+176]
	116 Add X10, X10, 8
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract X9, X9, 1
	120 Add X10, X10, 16
	121 Move X0, X21
	122 Move W2, W31
	123 Call 0x1C5D788
	124 Move X21, 0xC15000
	125 Move X29, 0x955000
	126 Move W8, [X21+2563]
	127 Move X29, [X29+3352]
	128 Compare W8, 0
	129 JumpIfNotEqual {135}
	130 Move X0, 0x958000
	131 Move X0, [X0+4072]
	132 Call 0x1C17CF4
	133 Move W8, 1
	134 Move [X21+2563], W8
	135 Move X8, 0x958000
	136 Move X8, [X8+4072]
	137 Move V0, [X19+1]
	138 Move X0, [X29]
	139 Move X21, 0x981000
	140 Move X8, [X8]
	141 Move X22, 0x981000
	142 Move X8, [X8+184]
	143 Move X28, [X8]
	144 Move [X31+1], V0
	145 Move W8, [X0+224]
	146 Move X21, [X21+4064]
	147 Move X22, [X22+4072]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X27, 0x955000
	152 Move X27, [X27+3432]
	153 Add X0, X31, 16
	154 Move X1, X31
	155 Call InputStateBlock.get_alignedSizeInBytes, X0
	156 Move X4, [X21]
	157 Add W24, W0, 24
	158 Move W21, W0
	159 Add X0, X31, 0
	160 Move W2, 2
	161 Move W3, 1
	162 Move W1, W24
	163 Call NativeArray`1<Byte>..ctor, X0, X1, X2, X3
	164 Move X0, [X31]
	165 Move X1, [X31+8]
	166 Move X2, [X22]
	167 Call 0x2223688, X0
	168 Move X22, X0
	169 Move X1, X31
	170 Call StateEvent.get_state, X0
	171 Move X25, [X20+1088]
	172 Compare X25, 0
	173 JumpIfEqual {364}
	174 Move X10, 0x955000
	175 Move X8, [X25]
	176 Move X10, [X10+3792]
	177 Move X23, X0
	178 NotImplemented "Instruction LDRH not yet implemented."
	179 Move X1, [X10]
	180 Compare X9, 0
	181 JumpIfEqual {188}
	182 Move X10, [X8+176]
	183 Add X10, X10, 8
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Subtract X9, X9, 1
	187 Add X10, X10, 16
	188 Move W2, 19
	189 Move X0, X25
	190 Call 0x1C5D788
	191 Move W9, [X10]
	192 Add W9, W9, 19
	193 Add X8, X8, W9
	194 Add X0, X8, 312
	195 Move X8, [X0]
	196 Move X1, [X0+8]
	197 Move X0, X25
	198 NotImplemented "Instruction BLR not yet implemented."
	199 Compare X22, 0
	200 JumpIfEqual {365}
	201 Move V8, V0
	202 Move W1, 0x4154
	203 NotImplemented "Instruction MOVK not yet implemented."
	204 Move X0, X22
	205 Move X2, X31
	206 Call InputEvent.set_type, X0, X1
	207 Move X0, X22
	208 Move W1, W24
	209 Move X2, X31
	210 Call InputEvent.set_sizeInBytes, X0, X1
	211 Move X0, X22
	212 Move V0, V8
	213 Move X1, X31
	214 Call InputEvent.set_time, X0, V0
	215 Move W1, [X19+224]
	216 Move X0, X22
	217 Move X2, X31
	218 Call InputEvent.set_deviceId, X0, X1
	219 Move TEMP, 0
	220 Not TEMP
	221 Move W1, TEMP
	222 Move X0, X22
	223 Move X2, X31
	224 Call InputEvent.set_eventId, X0, X1
	225 Move X0, [X29]
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {230}
	229 Call 0x1C17DFC
	230 Move W8, [X19+16]
	231 Move [X22+20], W8
	232 Compare W26, 0
	233 JumpIfEqual {245}
	234 Move X0, [X29]
	235 Move W8, [X0+224]
	236 Compare W8, 0
	237 JumpIfNotEqual {239}
	238 Call 0x1C17DFC
	239 Move W8, [X19+20]
	240 Move W2, W21
	241 Add X1, X8, X28
	242 Move X0, X23
	243 Move X3, X31
	244 Call UnsafeUtility.MemCpy, X0, X1, X2
	245 Move X0, X19
	246 Move X1, X31
	247 Call InputControl.get_currentStatePtr, X0
	248 Move X24, X0
	249 Move X0, [X29]
	250 Move X25, [X20+200]
	251 Move W8, [X0+224]
	252 Compare W8, 0
	253 JumpIfNotEqual {255}
	254 Call 0x1C17DFC
	255 Move W8, [X19+20]
	256 Move W2, W21
	257 Add X1, X8, X24
	258 Move X0, X23
	259 Move X3, X31
	260 Call UnsafeUtility.MemCpy, X0, X1, X2
	261 Move W8, [X19+20]
	262 Add X1, X8, X28
	263 Add X3, X8, X25
	264 Move X0, X23
	265 Move W2, W21
	266 Move X4, X31
	267 Call MemoryHelpers.MemCpyMasked, X0, X1, X2, X3
	268 Move W2, [X20+172]
	269 Compare W2, 0
	270 JumpIfNotEqual {275}
	271 Move W0, [X20+168]
	272 Move X1, X31
	273 Call InputUpdate.GetUpdateTypeForPlayer, X0
	274 Move W2, W0
	275 Move X0, X20
	276 Move X1, X19
	277 Move X3, X23
	278 Move W4, W31
	279 Move W5, W21
	280 Move V0, V8
	281 Move X6, X22
	282 Call InputManager.UpdateState, X0, X1, X2, X3, X4, X5, V0, X6
	283 Move X1, [X27]
	284 Add X0, X31, 0
	285 Call NativeArray`1<Byte>.Dispose, X0
	286 NotImplemented "Instruction LDRSW not yet implemented."
	287 Add X8, X8, X9
	288 Add X0, X8, 312
	289 Move X8, [X0]
	290 Move X1, [X0+8]
	291 Move X0, X21
	292 NotImplemented "Instruction BLR not yet implemented."
	293 Move W8, [X31+44]
	294 Compare W8, 0
	295 JumpIfEqual {323}
	296 Move X8, 0x931000
	297 Move X8, [X8+3064]
	298 Add X0, X31, 44
	299 Move X1, [X8]
	300 Call Nullable`1<Boolean>.get_Value, X0
	301 Move TEMP, X0
	302 And TEMP, TEMP, 1
	303 Compare TEMP, 1
	304 JumpIfNotEqual {308}
	305 Move X0, X19
	306 Move X1, X31
	307 Call InputDevice.RequestReset, X0
	308 Move X20, [X31+128]
	309 Move X19, [X31+136]
	310 Move X22, [X31+112]
	311 Move X21, [X31+120]
	312 Move X24, [X31+96]
	313 Move X23, [X31+104]
	314 Move X26, [X31+80]
	315 Move X25, [X31+88]
	316 Move X28, [X31+64]
	317 Move X27, [X31+72]
	318 Move X29, [X31+48]
	319 Move X30, [X31+56]
	320 Move V8, [X31+32]
	321 Add X31, X31, 144
	322 Return 
	323 Compare W26, 0
	324 JumpIfNotEqual {305}
	325 Move X0, 0x932000
	326 Move X0, [X0+1320]
	327 Call 0x1C17D08
	328 Call 0x1C17F10
	329 Move X19, X0
	330 Move X0, 0x955000
	331 Move X0, [X0+3360]
	332 Call 0x1C17D08
	333 Move X1, X0
	334 Move X0, X19
	335 Move X2, X31
	336 Call ArgumentNullException..ctor, X0, X1
	337 Move X0, 0x982000
	338 Move X0, [X0+736]
	339 Call 0x1C17D08
	340 Move X1, X0
	341 Move X0, X19
	342 Call 0x1C17DEC
	343 Move X0, 0x982000
	344 Move X0, [X0+744]
	345 Call 0x1C17D08
	346 Move X1, X19
	347 Move X2, X31
	348 Call String.Format, X0, X1
	349 Move X19, X0
	350 Move X0, 0x92D000
	351 Move X0, [X0+1456]
	352 Call 0x1C17D08
	353 Call 0x1C17F10
	354 Move X1, X19
	355 Move X2, X31
	356 Move X20, X0
	357 Call InvalidOperationException..ctor, X0, X1
	358 Move X0, 0x982000
	359 Move X0, [X0+736]
	360 Call 0x1C17D08
	361 Move X1, X0
	362 Move X0, X20
	363 Call 0x1C17DEC
	364 Call 0x1C17F20
	365 Call 0x1C17F20
	366 Move X20, X0
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move X0, X20
	369 Call 0x3EB2AD0
	370 Move X21, [X0]
	371 Call 0x3EB2AE0
	372 Move X1, [X27]
	373 Add X0, X31, 0
	374 Call NativeArray`1<Byte>.Dispose, X0
	375 Compare X21, 0
	376 JumpIfEqual {293}
	377 Move X0, X21
	378 Call 0x1C17F18
	379 Move X21, X31
	380 Move X20, X0
	381 Move X1, [X27]
	382 Add X0, X31, 0
	383 Call NativeArray`1<Byte>.Dispose, X0
	384 Compare X21, 0
	385 JumpIfNotEqual {388}
	386 Move X0, X20
	387 Call 0x1D2D690
	388 Move X0, X21
	389 Call 0x1C17F18
	390 Call 0x1991590

Method: UnityEngine.InputSystem.InputDevice TryGetDevice(System.String nameOrLayout)

Disassembly:
	0x037C7C3C LDR X8, [X8 + 0x948]
	0x037C7C40 MOV X2, X0
	0x037C7C44 MOV X0, X19
	0x037C7C48 LDR X1, [X8]
	0x037C7C4C BL 0x37C2744
	0x037C7C50 ADRP X8, 0x981000
	0x037C7C54 LDR X8, [X8 + 0x518]
	0x037C7C58 MOV X1, X31
	0x037C7C5C LDR X0, [X8]
	0x037C7C60 BL 0x338C698
	0x037C7C64 ADRP X8, 0x980000
	0x037C7C68 LDR X8, [X8 + 0x958]
	0x037C7C6C MOV X2, X0
	0x037C7C70 MOV X0, X19
	0x037C7C74 LDR X1, [X8]
	0x037C7C78 BL 0x37C2744
	0x037C7C7C ADRP X8, 0x981000
	0x037C7C80 LDR X8, [X8 + 0x520]
	0x037C7C84 MOV X1, X31
	0x037C7C88 LDR X0, [X8]
	0x037C7C8C BL 0x338C698
	0x037C7C90 ADRP X8, 0x980000
	0x037C7C94 LDR X8, [X8 + 0x950]
	0x037C7C98 MOV X2, X0
	0x037C7C9C MOV X0, X19
	0x037C7CA0 LDR X1, [X8]
	0x037C7CA4 BL 0x37C2744
	0x037C7CA8 ADRP X8, 0x981000
	0x037C7CAC LDR X8, [X8 + 0x3E0]
	0x037C7CB0 MOV X1, X31
	0x037C7CB4 LDR X0, [X8]
	0x037C7CB8 BL 0x338C698
	0x037C7CBC ADRP X8, 0x981000
	0x037C7CC0 LDR X8, [X8 + 0x5D8]
	0x037C7CC4 MOV X2, X0
	0x037C7CC8 MOV X0, X19
	0x037C7CCC LDR X1, [X8]
	0x037C7CD0 BL 0x37C2744
	0x037C7CD4 ADRP X8, 0x981000
	0x037C7CD8 LDR X8, [X8 + 0x440]
	0x037C7CDC MOV X1, X31
	0x037C7CE0 LDR X0, [X8]
	0x037C7CE4 BL 0x338C698
	0x037C7CE8 ADRP X8, 0x981000
	0x037C7CEC LDR X8, [X8 + 0x690]
	0x037C7CF0 MOV X2, X0
	0x037C7CF4 MOV X0, X19
	0x037C7CF8 LDR X1, [X8]
	0x037C7CFC BL 0x37C2744
	0x037C7D00 ADRP X8, 0x981000
	0x037C7D04 LDR X8, [X8 + 0x450]
	0x037C7D08 MOV X1, X31
	0x037C7D0C LDR X0, [X8]
	0x037C7D10 BL 0x338C698
	0x037C7D14 ADRP X8, 0x980000
	0x037C7D18 LDR X8, [X8 + 0x470]
	0x037C7D1C MOV X2, X0
	0x037C7D20 MOV X0, X19
	0x037C7D24 LDR X1, [X8]
	0x037C7D28 BL 0x37C2744
	0x037C7D2C ADRP X8, 0x981000
	0x037C7D30 LDR X8, [X8 + 0x4A8]
	0x037C7D34 MOV X1, X31
	0x037C7D38 LDR X0, [X8]
	0x037C7D3C BL 0x338C698
	0x037C7D40 ADRP X8, 0x981000
	0x037C7D44 LDR X8, [X8 + 0x620]
	0x037C7D48 MOV X2, X0
	0x037C7D4C MOV X0, X19
	0x037C7D50 LDR X1, [X8]
	0x037C7D54 BL 0x37C2744
	0x037C7D58 ADRP X8, 0x981000
	0x037C7D5C LDR X8, [X8 + 0x470]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X1
	007 Move X19, X0
	008 Move X0, X1
	009 Move X1, X31
	010 Call String.IsNullOrEmpty, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {65}
	015 Move W8, [X19+112]
	016 Compare W8, 0
	017 JumpIfEqual {55}
	018 Compare X20, 0
	019 JumpIfEqual {63}
	020 Move X0, X20
	021 Move X1, X31
	022 Call String.ToLower, X0
	023 Move W8, [X19+112]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X20, X0
	026 Move X22, X31
	027 Move X8, [X19+120]
	028 Compare X8, 0
	029 JumpIfEqual {63}
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Add X8, X8, X22
	033 Move X21, [X8+32]
	034 Compare X21, 0
	035 JumpIfEqual {63}
	036 Move X0, [X21+40]
	037 Move X1, X20
	038 Move X2, X31
	039 Call String.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {56}
	044 Move X0, [X21+96]
	045 Move X1, X20
	046 Move X2, X31
	047 Call String.op_Equality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {56}
	052 Move W8, [X19+112]
	053 Add X22, X22, 1
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X21, X31
	056 Move X0, X21
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return X0
	063 Call 0x1C17F20
	064 Call 0x1C17F28
	065 Move X0, 0x935000
	066 Move X0, [X0+1400]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0x982000
	071 Move X0, [X0+768]
	072 Call 0x1C17D08
	073 Move X20, X0
	074 Move X0, 0x982000
	075 Move X0, [X0+776]
	076 Call 0x1C17D08
	077 Move X2, X0
	078 Move X0, X19
	079 Move X1, X20
	080 Move X3, X31
	081 Call ArgumentException..ctor, X0, X1, X2
	082 Move X0, 0x982000
	083 Move X0, [X0+784]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputDevice GetDevice(System.String nameOrLayout)

Disassembly:
	0x037C7D60 MOV X1, X31
	0x037C7D64 LDR X0, [X8]
	0x037C7D68 BL 0x338C698
	0x037C7D6C ADRP X8, 0x975000
	0x037C7D70 LDR X8, [X8 + 0xE88]
	0x037C7D74 MOV X2, X0
	0x037C7D78 MOV X0, X19
	0x037C7D7C LDR X1, [X8]
	0x037C7D80 BL 0x37C2744
	0x037C7D84 ADRP X8, 0x981000
	0x037C7D88 LDR X8, [X8 + 0x4A0]
	0x037C7D8C MOV X1, X31
	0x037C7D90 LDR X0, [X8]
	0x037C7D94 BL 0x338C698
	0x037C7D98 ADRP X8, 0x981000
	0x037C7D9C LDR X8, [X8 + 0x670]
	0x037C7DA0 MOV X2, X0
	0x037C7DA4 MOV X0, X19
	0x037C7DA8 LDR X1, [X8]
	0x037C7DAC BL 0x37C2744
	0x037C7DB0 ADRP X8, 0x981000
	0x037C7DB4 LDR X8, [X8 + 0x528]
	0x037C7DB8 MOV X1, X31
	0x037C7DBC LDR X0, [X8]
	0x037C7DC0 BL 0x338C698
	0x037C7DC4 ADRP X8, 0x980000
	0x037C7DC8 LDR X8, [X8 + 0x918]
	0x037C7DCC MOV X2, X0
	0x037C7DD0 MOV X0, X19
	0x037C7DD4 LDR X1, [X8]
	0x037C7DD8 BL 0x37C2744
	0x037C7DDC ADRP X8, 0x981000
	0x037C7DE0 LDR X8, [X8 + 0x4E0]
	0x037C7DE4 MOV X1, X31
	0x037C7DE8 LDR X0, [X8]
	0x037C7DEC BL 0x338C698
	0x037C7DF0 ADRP X8, 0x981000
	0x037C7DF4 LDR X8, [X8 + 0x678]
	0x037C7DF8 MOV X2, X0
	0x037C7DFC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Call InputManager.TryGetDevice, X0, X1
	006 Compare X0, 0
	007 JumpIfEqual {12}
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Return X0
	012 Move X0, 0x982000
	013 Move X0, [X0+792]
	014 Call 0x1C17D08
	015 Move X20, X0
	016 Move X0, 0x935000
	017 Move X0, [X0+2480]
	018 Call 0x1C17D08
	019 Move X2, X0
	020 Move X0, X20
	021 Move X1, X19
	022 Move X3, X31
	023 Call String.Concat, X0, X1, X2
	024 Move X19, X0
	025 Move X0, 0x935000
	026 Move X0, [X0+1400]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X20, X0
	030 Move X0, 0x982000
	031 Move X0, [X0+776]
	032 Call 0x1C17D08
	033 Move X2, X0
	034 Move X0, X20
	035 Move X1, X19
	036 Move X3, X31
	037 Call ArgumentException..ctor, X0, X1, X2
	038 Move X0, 0x982000
	039 Move X0, [X0+800]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X20
	043 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputDevice TryGetDevice(System.Type layoutType)

Disassembly:
	0x037C7E00 LDR X1, [X8]
	0x037C7E04 BL 0x37C2744
	0x037C7E08 ADRP X8, 0x981000
	0x037C7E0C LDR X8, [X8 + 0x350]
	0x037C7E10 MOV X1, X31
	0x037C7E14 LDR X0, [X8]
	0x037C7E18 BL 0x338C698
	0x037C7E1C ADRP X8, 0x981000
	0x037C7E20 LDR X8, [X8 + 0x580]
	0x037C7E24 MOV X2, X0
	0x037C7E28 MOV X0, X19
	0x037C7E2C LDR X1, [X8]
	0x037C7E30 BL 0x37C2744
	0x037C7E34 ADRP X8, 0x981000
	0x037C7E38 LDR X8, [X8 + 0x3F0]
	0x037C7E3C MOV X1, X31
	0x037C7E40 LDR X0, [X8]
	0x037C7E44 BL 0x338C698
	0x037C7E48 ADRP X8, 0x981000
	0x037C7E4C LDR X8, [X8 + 0x610]
	0x037C7E50 MOV X2, X0
	0x037C7E54 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Add X0, X0, 24
	006 Move X2, X31
	007 Call Collection.TryFindLayoutForType, X0, X1
	008 Move [X31], X0
	009 Move [X31+8], X1
	010 Add X0, X31, 0
	011 Move X1, X31
	012 Call InternedString.IsEmpty, X0
	013 Move W8, W0
	014 Move X0, X31
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {26}
	019 Move X0, [X31]
	020 Move X1, [X31+8]
	021 Move X2, X31
	022 Call InternedString.op_Implicit, X0
	023 Move X1, X0
	024 Move X0, X19
	025 Call InputManager.TryGetDevice, X0, X1
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Add X31, X31, 32
	029 Return X0

Method: UnityEngine.InputSystem.InputDevice TryGetDeviceById(System.Int32 id)

Disassembly:
	0x037BD094 MOV X20, X0
	0x037BD098 TBNZ X8, 0x0, 0x37BD140
	0x037BD09C ADRP X0, 0x98A000
	0x037BD0A0 LDR X0, [X0 + 0xDE8]
	0x037BD0A4 BL 0x1C16CF4
	0x037BD0A8 ADRP X0, 0x98A000
	0x037BD0AC LDR X0, [X0 + 0xDF0]
	0x037BD0B0 BL 0x1C16CF4
	0x037BD0B4 ADRP X0, 0x98A000
	0x037BD0B8 LDR X0, [X0 + 0xDF8]
	0x037BD0BC BL 0x1C16CF4
	0x037BD0C0 ADRP X0, 0x98A000
	0x037BD0C4 LDR X0, [X0 + 0xE00]
	0x037BD0C8 BL 0x1C16CF4
	0x037BD0CC ADRP X0, 0x98A000
	0x037BD0D0 LDR X0, [X0 + 0xE08]
	0x037BD0D4 BL 0x1C16CF4
	0x037BD0D8 ADRP X0, 0x98A000
	0x037BD0DC LDR X0, [X0 + 0xE10]
	0x037BD0E0 BL 0x1C16CF4
	0x037BD0E4 ADRP X0, 0x98A000
	0x037BD0E8 LDR X0, [X0 + 0xE18]
	0x037BD0EC BL 0x1C16CF4
	0x037BD0F0 ADRP X0, 0x98A000
	0x037BD0F4 LDR X0, [X0 + 0xE20]
	0x037BD0F8 BL 0x1C16CF4
	0x037BD0FC ADRP X0, 0x98A000
	0x037BD100 LDR X0, [X0 + 0xE28]
	0x037BD104 BL 0x1C16CF4
	0x037BD108 ADRP X0, 0x98A000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC25000
	007 Move W8, [X21+490]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x98B000
	015 Move X0, [X0+3328]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+490], W8
	019 Move [X31+8], X31
	020 Move X0, [X20+128]
	021 Compare X0, 0
	022 JumpIfEqual {38}
	023 Move X8, 0x98B000
	024 Move X8, [X8+3328]
	025 Add X2, X31, 8
	026 Move W1, W19
	027 Move X3, [X8]
	028 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	029 Move X8, [X31+8]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 And W31, W0, 1
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Add X31, X31, 48
	037 Return X0
	038 Call 0x1C17F20

Method: System.Int32 GetUnsupportedDevices(System.Collections.Generic.List`1<UnityEngine.InputSystem.Layouts.InputDeviceDescription> descriptions)

Disassembly:
	0x037C7E58 LDR X1, [X8]
	0x037C7E5C BL 0x37C2744
	0x037C7E60 ADRP X8, 0x981000
	0x037C7E64 LDR X8, [X8 + 0x3E8]
	0x037C7E68 MOV X1, X31
	0x037C7E6C LDR X0, [X8]
	0x037C7E70 BL 0x338C698
	0x037C7E74 ADRP X8, 0x981000
	0x037C7E78 LDR X8, [X8 + 0x5A8]
	0x037C7E7C MOV X2, X0
	0x037C7E80 MOV X0, X19
	0x037C7E84 LDR X1, [X8]
	0x037C7E88 BL 0x37C2744
	0x037C7E8C ADRP X8, 0x981000
	0x037C7E90 LDR X8, [X8 + 0x368]
	0x037C7E94 MOV X1, X31
	0x037C7E98 LDR X0, [X8]
	0x037C7E9C BL 0x338C698
	0x037C7EA0 ADRP X8, 0x981000
	0x037C7EA4 LDR X8, [X8 + 0x5F0]
	0x037C7EA8 MOV X2, X0
	0x037C7EAC MOV X0, X19
	0x037C7EB0 LDR X1, [X8]
	0x037C7EB4 BL 0x37C2744
	0x037C7EB8 ADRP X8, 0x981000
	0x037C7EBC LDR X8, [X8 + 0x460]
	0x037C7EC0 MOV X1, X31
	0x037C7EC4 LDR X0, [X8]
	0x037C7EC8 BL 0x338C698
	0x037C7ECC ADRP X8, 0x981000
	0x037C7ED0 LDR X8, [X8 + 0x6A8]
	0x037C7ED4 MOV X2, X0
	0x037C7ED8 MOV X0, X19
	0x037C7EDC LDR X1, [X8]
	0x037C7EE0 BL 0x37C2744
	0x037C7EE4 ADRP X8, 0x981000
	0x037C7EE8 LDR X8, [X8 + 0x468]
	0x037C7EEC MOV X1, X31
	0x037C7EF0 LDR X0, [X8]
	0x037C7EF4 BL 0x338C698
	0x037C7EF8 ADRP X8, 0x981000
	0x037C7EFC LDR X8, [X8 + 0x6C0]
	0x037C7F00 MOV X2, X0
	0x037C7F04 MOV X0, X19
	0x037C7F08 LDR X1, [X8]
	0x037C7F0C BL 0x37C2744
	0x037C7F10 ADRP X8, 0x981000
	0x037C7F14 LDR X8, [X8 + 0x458]
	0x037C7F18 MOV X1, X31
	0x037C7F1C LDR X0, [X8]
	0x037C7F20 BL 0x338C698
	0x037C7F24 ADRP X8, 0x981000
	0x037C7F28 LDR X8, [X8 + 0x650]
	0x037C7F2C MOV X2, X0
	0x037C7F30 MOV X0, X19
	0x037C7F34 LDR X1, [X8]
	0x037C7F38 BL 0x37C2744
	0x037C7F3C ADRP X8, 0x981000
	0x037C7F40 LDR X8, [X8 + 0x4B8]
	0x037C7F44 MOV X1, X31
	0x037C7F48 LDR X0, [X8]
	0x037C7F4C BL 0x338C698
	0x037C7F50 ADRP X8, 0x981000
	0x037C7F54 LDR X8, [X8 + 0x630]
	0x037C7F58 MOV X2, X0
	0x037C7F5C MOV X0, X19
	0x037C7F60 LDR X1, [X8]
	0x037C7F64 BL 0x37C2744
	0x037C7F68 ADRP X8, 0x981000
	0x037C7F6C LDR X8, [X8 + 0x400]
	0x037C7F70 MOV X1, X31
	0x037C7F74 LDR X0, [X8]
	0x037C7F78 BL 0x338C698
	0x037C7F7C ADRP X8, 0x981000
	0x037C7F80 LDR X8, [X8 + 0x698]
	0x037C7F84 MOV X2, X0
	0x037C7F88 MOV X0, X19
	0x037C7F8C LDR X1, [X8]
	0x037C7F90 BL 0x37C2744
	0x037C7F94 ADRP X8, 0x981000
	0x037C7F98 LDR X8, [X8 + 0x358]
	0x037C7F9C MOV X1, X31
	0x037C7FA0 LDR X0, [X8]
	0x037C7FA4 BL 0x338C698
	0x037C7FA8 ADRP X8, 0x981000
	0x037C7FAC LDR X8, [X8 + 0x680]
	0x037C7FB0 MOV X2, X0
	0x037C7FB4 MOV X0, X19
	0x037C7FB8 LDR X1, [X8]
	0x037C7FBC BL 0x37C2744
	0x037C7FC0 ADRP X8, 0x981000
	0x037C7FC4 LDR X8, [X8 + 0x4F0]
	0x037C7FC8 MOV X1, X31
	0x037C7FCC LDR X0, [X8]
	0x037C7FD0 BL 0x338C698
	0x037C7FD4 ADRP X8, 0x981000
	0x037C7FD8 LDR X8, [X8 + 0x600]
	0x037C7FDC MOV X2, X0
	0x037C7FE0 MOV X0, X19
	0x037C7FE4 LDR X1, [X8]
	0x037C7FE8 BL 0x37C2744
	0x037C7FEC ADRP X8, 0x981000
	0x037C7FF0 LDR X8, [X8 + 0x530]
	0x037C7FF4 MOV X1, X31
	0x037C7FF8 LDR X0, [X8]
	0x037C7FFC BL 0x338C698
	0x037C8000 ADRP X8, 0x980000
	0x037C8004 LDR X8, [X8 + 0x578]
	0x037C8008 MOV X2, X0
	0x037C800C MOV X0, X19
	0x037C8010 LDR X1, [X8]
	0x037C8014 BL 0x37C2744
	0x037C8018 ADRP X8, 0x980000
	0x037C801C LDR X8, [X8 + 0x590]
	0x037C8020 MOV X0, X19
	0x037C8024 LDR X1, [X8]
	0x037C8028 ADRP X8, 0x980000
	0x037C802C LDR X8, [X8 + 0x408]
	0x037C8030 LDR X2, [X8]
	0x037C8034 BL 0x22086E8

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+192], X29
	003 Move [X31+208], X30
	004 Move [X31+216], X25
	005 Move [X31+224], X24
	006 Move [X31+232], X23
	007 Move [X31+240], X22
	008 Move [X31+248], X21
	009 Move [X31+256], X20
	010 Move [X31+264], X19
	011 Move X21, 0xC1B000
	012 Move W8, [X21+491]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x982000
	020 Move X0, [X0+808]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+491], W8
	024 Compare X19, 0
	025 JumpIfEqual {119}
	026 Move W8, [X20+136]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X24, 0x982000
	029 Move X24, [X24+808]
	030 Move X22, X31
	031 Move X23, X31
	032 Move W21, W31
	033 Move W25, 56
	034 Move X8, [X20+144]
	035 Compare X8, 0
	036 JumpIfEqual {117}
	037 Move W9, [X8+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add X8, X8, X22
	040 Move W1, [X8+88]
	041 Move X0, X20
	042 Call InputManager.TryGetDeviceById, X0, X1
	043 Compare X0, 0
	044 JumpIfNotEqual {100}
	045 Move X8, [X20+144]
	046 Compare X8, 0
	047 JumpIfEqual {117}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X8, X8, X22
	051 Move X9, [X8+80]
	052 Move V1, [X8+48]
	053 Move V0, [X8+64]
	054 Move V2, [X8+2]
	055 Move X10, [X24]
	056 Move [X31+48], X9
	057 Move [X31+16], V1
	058 Move [X31+24], V0
	059 Move [X31], V2
	060 Move [X31+64], V2
	061 Move [X31+72], V1
	062 Move [X31+6], V0
	063 Move [X31+112], X9
	064 Move W9, [X19+28]
	065 Move X8, [X19+16]
	066 Add W9, W9, 1
	067 Move [X19+28], W9
	068 Compare X8, 0
	069 JumpIfEqual {117}
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 Move W11, [X8+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Add W10, W9, 1
	074 Move [X19+24], W10
	075 Move V2, [X31+80]
	076 Move V0, [X31+96]
	077 Move X10, [X31+112]
	078 Move V1, [X31+4]
	079 NotImplemented "Instruction NOP not yet implemented."
	080 NotImplemented "Instruction MADD not yet implemented."
	081 Move [X8+48], V2
	082 Move [X8+56], V0
	083 Move [X8+80], X10
	084 Move [X8+2], V1
	085 Move X8, [X10+32]
	086 Move V0, [X31+64]
	087 Move V1, [X31+80]
	088 Move V2, [X31+6]
	089 Move X9, [X31+112]
	090 Move X8, [X8+192]
	091 Add X1, X31, 128
	092 Move X0, X19
	093 Move X2, [X8+112]
	094 Move [X31+128], V0
	095 Move [X31+136], V1
	096 Move [X31+10], V2
	097 Move [X31+176], X9
	098 Call List`1<InputDeviceDescription>.AddWithResize, X0, X1
	099 Add W21, W21, 1
	100 NotImplemented "Instruction LDRSW not yet implemented."
	101 Add X23, X23, 1
	102 Add X22, X22, 64
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move W21, W31
	105 Move W0, W21
	106 Move X20, [X31+256]
	107 Move X19, [X31+264]
	108 Move X22, [X31+240]
	109 Move X21, [X31+248]
	110 Move X24, [X31+224]
	111 Move X23, [X31+232]
	112 Move X30, [X31+208]
	113 Move X25, [X31+216]
	114 Move X29, [X31+192]
	115 Add X31, X31, 272
	116 Return X0
	117 Call 0x1C17F20
	118 Call 0x1C17F28
	119 Move X0, 0x932000
	120 Move X0, [X0+1320]
	121 Call 0x1C17D08
	122 Call 0x1C17F10
	123 Move X19, X0
	124 Move X0, 0x981000
	125 Move X0, [X0+816]
	126 Call 0x1C17D08
	127 Move X1, X0
	128 Move X0, X19
	129 Move X2, X31
	130 Call ArgumentNullException..ctor, X0, X1
	131 Move X0, 0x981000
	132 Move X0, [X0+824]
	133 Call 0x1C17D08
	134 Move X1, X0
	135 Move X0, X19
	136 Call 0x1C17DEC

Method: System.Void EnableOrDisableDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean enable, UnityEngine.InputSystem.InputManager/DeviceDisableScope scope = 0)

Disassembly:
	0x037C6BEC MOV X0, X19
	0x037C6BF0 MOV X1, X31
	0x037C6BF4 BL 0x38021A8
	0x037C6BF8 MOV X2, X0
	0x037C6BFC MOV X0, X20
	0x037C6C00 MOV W1, W25
	0x037C6C04 MOV V0.16B, V8.16B
	0x037C6C08 BL 0x37CBD9C
	0x037C6C0C ORN W8, W31, W29, 0x0
	0x037C6C10 LDP X20, X19, [X31 + 0x70]
	0x037C6C14 LDP X22, X21, [X31 + 0x60]
	0x037C6C18 LDP X24, X23, [X31 + 0x50]
	0x037C6C1C LDP X26, X25, [X31 + 0x40]
	0x037C6C20 LDP X28, X27, [X31 + 0x30]
	0x037C6C24 LDP X29, X30, [X31 + 0x20]
	0x037C6C28 LDR V8, [X31 + 0x10]
	0x037C6C2C AND W0, W8, 0x1
	0x037C6C30 ADD X31, X31, 0x80
	0x037C6C34 RET
	0x037C6C38 BL 0x1C16F20
	0x037C6C3C STR X30, [X31 - 0x30]!
	0x037C6C40 STP X22, X21, [X31 + 0x10]
	0x037C6C44 STP X20, X19, [X31 + 0x20]
	0x037C6C48 MOV X20, X1
	0x037C6C4C MOV X19, X0
	0x037C6C50 MOV X0, X1
	0x037C6C54 MOV X1, X31
	0x037C6C58 BL 0x32277A8
	0x037C6C5C TBNZ X0, 0x0, 0x37C6D04
	0x037C6C60 LDR W8, [X19 + 0x70]
	0x037C6C64 CBZ W8, 0x37C6CE4
	0x037C6C68 CBZ X20, 0x37C6CFC
	0x037C6C6C MOV X0, X20
	0x037C6C70 MOV X1, X31
	0x037C6C74 BL 0x322B5E4
	0x037C6C78 LDR W8, [X19 + 0x70]
	0x037C6C7C CMP W8, 0x1
	0x037C6C80 B.LT 0x37C6CE4
	0x037C6C84 MOV X20, X0
	0x037C6C88 MOV X22, X31
	0x037C6C8C LDR X8, [X19 + 0x78]
	0x037C6C90 CBZ X8, 0x37C6CFC
	0x037C6C94 LDR W9, [X8 + 0x18]
	0x037C6C98 CMP W22, W9
	0x037C6C9C B.CS 0x37C6D00
	0x037C6CA0 ADD X8, X8, X22, 0x3, LSL
	0x037C6CA4 LDR X21, [X8 + 0x20]
	0x037C6CA8 CBZ X21, 0x37C6CFC
	0x037C6CAC LDR X0, [X21 + 0x28]
	0x037C6CB0 MOV X1, X20
	0x037C6CB4 MOV X2, X31
	0x037C6CB8 BL 0x321BA08
	0x037C6CBC TBNZ X0, 0x0, 0x37C6CE8
	0x037C6CC0 LDR X0, [X21 + 0x60]
	0x037C6CC4 MOV X1, X20
	0x037C6CC8 MOV X2, X31
	0x037C6CCC BL 0x321BA08
	0x037C6CD0 TBNZ X0, 0x0, 0x37C6CE8
	0x037C6CD4 LDR W8, [X19 + 0x70]
	0x037C6CD8 ADD X22, X22, 0x1
	0x037C6CDC CMP W22, W8
	0x037C6CE0 B.LT 0x37C6C8C
	0x037C6CE4 MOV X21, X31
	0x037C6CE8 MOV X0, X21
	0x037C6CEC LDP X20, X19, [X31 + 0x20]
	0x037C6CF0 LDP X22, X21, [X31 + 0x10]
	0x037C6CF4 LDR X30, [X31], #0x30
	0x037C6CF8 RET
	0x037C6CFC BL 0x1C16F20
	0x037C6D00 BL 0x1C16F28
	0x037C6D04 ADRP X0, 0x935000
	0x037C6D08 LDR X0, [X0 + 0x578]
	0x037C6D0C BL 0x1C16D08
	0x037C6D10 BL 0x1C16F10
	0x037C6D14 MOV X19, X0
	0x037C6D18 ADRP X0, 0x982000
	0x037C6D1C LDR X0, [X0 + 0x300]
	0x037C6D20 BL 0x1C16D08
	0x037C6D24 MOV X20, X0
	0x037C6D28 ADRP X0, 0x982000
	0x037C6D2C LDR X0, [X0 + 0x308]
	0x037C6D30 BL 0x1C16D08
	0x037C6D34 MOV X2, X0
	0x037C6D38 MOV X0, X19
	0x037C6D3C MOV X1, X20
	0x037C6D40 MOV X3, X31
	0x037C6D44 BL 0x330E16C
	0x037C6D48 ADRP X0, 0x982000
	0x037C6D4C LDR X0, [X0 + 0x310]
	0x037C6D50 BL 0x1C16D08
	0x037C6D54 MOV X1, X0
	0x037C6D58 MOV X0, X19
	0x037C6D5C BL 0x1C16DEC
	0x037C6D60 STR X30, [X31 - 0x20]!
	0x037C6D64 STP X20, X19, [X31 + 0x10]
	0x037C6D68 MOV X19, X1
	0x037C6D6C BL 0x37C6C3C
	0x037C6D70 CBZ X0, 0x37C6D80
	0x037C6D74 LDP X20, X19, [X31 + 0x10]
	0x037C6D78 LDR X30, [X31], #0x20
	0x037C6D7C RET
	0x037C6D80 ADRP X0, 0x982000
	0x037C6D84 LDR X0, [X0 + 0x318]
	0x037C6D88 BL 0x1C16D08
	0x037C6D8C MOV X20, X0
	0x037C6D90 ADRP X0, 0x935000
	0x037C6D94 LDR X0, [X0 + 0x9B0]
	0x037C6D98 BL 0x1C16D08
	0x037C6D9C MOV X2, X0
	0x037C6DA0 MOV X0, X20
	0x037C6DA4 MOV X1, X19
	0x037C6DA8 MOV X3, X31
	0x037C6DAC BL 0x32274B8
	0x037C6DB0 MOV X19, X0
	0x037C6DB4 ADRP X0, 0x935000
	0x037C6DB8 LDR X0, [X0 + 0x578]
	0x037C6DBC BL 0x1C16D08
	0x037C6DC0 BL 0x1C16F10
	0x037C6DC4 MOV X20, X0
	0x037C6DC8 ADRP X0, 0x982000
	0x037C6DCC LDR X0, [X0 + 0x308]
	0x037C6DD0 BL 0x1C16D08
	0x037C6DD4 MOV X2, X0
	0x037C6DD8 MOV X0, X20
	0x037C6DDC MOV X1, X19
	0x037C6DE0 MOV X3, X31
	0x037C6DE4 BL 0x330E16C
	0x037C6DE8 ADRP X0, 0x982000
	0x037C6DEC LDR X0, [X0 + 0x320]
	0x037C6DF0 BL 0x1C16D08
	0x037C6DF4 MOV X1, X0
	0x037C6DF8 MOV X0, X20
	0x037C6DFC BL 0x1C16DEC
	0x037C6E00 SUB X31, X31, 0x20
	0x037C6E04 STP X30, X19, [X31 + 0x10]
	0x037C6E08 MOV X19, X0
	0x037C6E0C ADD X0, X0, 0x18
	0x037C6E10 MOV X2, X31
	0x037C6E14 BL 0x3813D04
	0x037C6E18 STP X0, X1, [X31]
	0x037C6E1C ADD X0, X31, 0x0
	0x037C6E20 MOV X1, X31
	0x037C6E24 BL 0x375F7A0
	0x037C6E28 MOV W8, W0
	0x037C6E2C MOV X0, X31
	0x037C6E30 TBNZ X8, 0x0, 0x37C6E4C
	0x037C6E34 LDP X0, X1, [X31]
	0x037C6E38 MOV X2, X31
	0x037C6E3C BL 0x37577E0
	0x037C6E40 MOV X1, X0
	0x037C6E44 MOV X0, X19
	0x037C6E48 BL 0x37C6C3C
	0x037C6E4C LDP X30, X19, [X31 + 0x10]
	0x037C6E50 ADD X31, X31, 0x20
	0x037C6E54 RET
	0x037C6E58 SUB X31, X31, 0x110
	0x037C6E5C STR X29, [X31 + 0xC0]
	0x037C6E60 STP X30, X25, [X31 + 0xD0]
	0x037C6E64 STP X24, X23, [X31 + 0xE0]
	0x037C6E68 STP X22, X21, [X31 + 0xF0]
	0x037C6E6C STP X20, X19, [X31 + 0x100]
	0x037C6E70 ADRP X21, 0xC1B000
	0x037C6E74 LDRB W8, [X21 + 0x1EB]
	0x037C6E78 MOV X19, X1
	0x037C6E7C MOV X20, X0
	0x037C6E80 TBNZ X8, 0x0, 0x37C6E98
	0x037C6E84 ADRP X0, 0x982000
	0x037C6E88 LDR X0, [X0 + 0x328]
	0x037C6E8C BL 0x1C16CF4
	0x037C6E90 MOVZ W8, 0x1
	0x037C6E94 STRB W8, [X21 + 0x1EB]
	0x037C6E98 CBZ X19, 0x37C6FF0
	0x037C6E9C LDR W8, [X20 + 0x88]
	0x037C6EA0 CMP W8, 0x1
	0x037C6EA4 B.LT 0x37C6FC4
	0x037C6EA8 ADRP X24, 0x982000
	0x037C6EAC LDR X24, [X24 + 0x328]
	0x037C6EB0 MOV X22, X31
	0x037C6EB4 MOV X23, X31
	0x037C6EB8 MOV W21, W31
	0x037C6EBC MOVZ W25, 0x38
	0x037C6EC0 LDR X8, [X20 + 0x90]
	0x037C6EC4 CBZ X8, 0x37C6FE8
	0x037C6EC8 LDR W9, [X8 + 0x18]
	0x037C6ECC CMP X23, X9
	0x037C6ED0 B.CS 0x37C6FEC
	0x037C6ED4 ADD X8, X8, X22
	0x037C6ED8 LDR W1, [X8 + 0x58]
	0x037C6EDC MOV X0, X20
	0x037C6EE0 BL 0x37BC094
	0x037C6EE4 CBNZ X0, 0x37C6FAC
	0x037C6EE8 LDR X8, [X20 + 0x90]
	0x037C6EEC CBZ X8, 0x37C6FE8
	0x037C6EF0 LDR W9, [X8 + 0x18]
	0x037C6EF4 CMP X23, X9
	0x037C6EF8 B.CS 0x37C6FEC
	0x037C6EFC ADD X8, X8, X22
	0x037C6F00 LDR X9, [X8 + 0x50]
	0x037C6F04 LDP V1, V0, [X8 + 0x30]
	0x037C6F08 LDR V2, [X8 + 0x2]
	0x037C6F0C LDR X10, [X24]
	0x037C6F10 STR X9, [X31 + 0x30]
	0x037C6F14 STP V1, V0, [X31 + 0x10]
	0x037C6F18 STR V2, [X31]
	0x037C6F1C STP V2, V1, [X31 + 0x40]
	0x037C6F20 STR V0, [X31 + 0x6]
	0x037C6F24 STR X9, [X31 + 0x70]
	0x037C6F28 LDR W9, [X19 + 0x1C]
	0x037C6F2C LDR X8, [X19 + 0x10]
	0x037C6F30 ADD W9, W9, 0x1
	0x037C6F34 STR W9, [X19 + 0x1C]
	0x037C6F38 CBZ X8, 0x37C6FE8
	0x037C6F3C LDRSW X9, [X19 + 0x18]
	0x037C6F40 LDR W11, [X8 + 0x18]
	0x037C6F44 CMP W9, W11
	0x037C6F48 B.CS 0x37C6F78
	0x037C6F4C ADD W10, W9, 0x1
	0x037C6F50 STR W10, [X19 + 0x18]
	0x037C6F54 LDP V2, V0, [X31 + 0x50]
	0x037C6F58 LDR X10, [X31 + 0x70]
	0x037C6F5C LDR V1, [X31 + 0x4]
	0x037C6F60 NOP
	0x037C6F64 MADD X8, X9, X25, X8
	0x037C6F68 STP V2, V0, [X8 + 0x30]
	0x037C6F6C STR X10, [X8 + 0x50]
	0x037C6F70 STR V1, [X8 + 0x2]
	0x037C6F74 B 0x37C6FA8
	0x037C6F78 LDR X8, [X10 + 0x20]
	0x037C6F7C LDP V0, V1, [X31 + 0x40]
	0x037C6F80 LDR V2, [X31 + 0x6]
	0x037C6F84 LDR X9, [X31 + 0x70]
	0x037C6F88 LDR X8, [X8 + 0xC0]
	0x037C6F8C ADD X1, X31, 0x80
	0x037C6F90 MOV X0, X19
	0x037C6F94 LDR X2, [X8 + 0x70]
	0x037C6F98 STP V0, V1, [X31 + 0x80]
	0x037C6F9C STR V2, [X31 + 0xA]
	0x037C6FA0 STR X9, [X31 + 0xB0]
	0x037C6FA4 BL 0x2FD3F50
	0x037C6FA8 ADD W21, W21, 0x1
	0x037C6FAC LDRSW X8, [X20 + 0x88]
	0x037C6FB0 ADD X23, X23, 0x1
	0x037C6FB4 ADD X22, X22, 0x40
	0x037C6FB8 CMP X23, X8
	0x037C6FBC B.LT 0x37C6EC0
	0x037C6FC0 B 0x37C6FC8
	0x037C6FC4 MOV W21, W31
	0x037C6FC8 MOV W0, W21
	0x037C6FCC LDP X20, X19, [X31 + 0x100]
	0x037C6FD0 LDP X22, X21, [X31 + 0xF0]
	0x037C6FD4 LDP X24, X23, [X31 + 0xE0]
	0x037C6FD8 LDP X30, X25, [X31 + 0xD0]
	0x037C6FDC LDR X29, [X31 + 0xC0]
	0x037C6FE0 ADD X31, X31, 0x110
	0x037C6FE4 RET
	0x037C6FE8 BL 0x1C16F20
	0x037C6FEC BL 0x1C16F28
	0x037C6FF0 ADRP X0, 0x932000
	0x037C6FF4 LDR X0, [X0 + 0x528]
	0x037C6FF8 BL 0x1C16D08
	0x037C6FFC BL 0x1C16F10
	0x037C7000 MOV X19, X0
	0x037C7004 ADRP X0, 0x981000
	0x037C7008 LDR X0, [X0 + 0x330]
	0x037C700C BL 0x1C16D08
	0x037C7010 MOV X1, X0
	0x037C7014 MOV X0, X19
	0x037C7018 MOV X2, X31
	0x037C701C BL 0x330E100
	0x037C7020 ADRP X0, 0x981000
	0x037C7024 LDR X0, [X0 + 0x338]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC1C000
	009 Move W8, [X23+492]
	010 Move W21, W3
	011 Move W22, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x982000
	019 Move X0, [X0+3368]
	020 Call 0x1C17CF4
	021 Move X0, 0x932000
	022 Move X0, [X0+4056]
	023 Call 0x1C17CF4
	024 Move X0, 0x982000
	025 Move X0, [X0+3392]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+492], W8
	029 Compare X19, 0
	030 JumpIfEqual {323}
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move TEMP, X22
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 Invalid "Jump target not found in method."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Compare W21, 0
	038 JumpIfNotEqual {266}
	039 Move X0, X19
	040 Move W1, W31
	041 Move X2, X31
	042 Call InputDevice.set_disabledWhileInBackground, X0, X1
	043 Move X0, X19
	044 Move X1, X31
	045 Call InputDevice.get_disabledInFrontend, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {57}
	050 Move X0, X19
	051 Move X1, X31
	052 Call InputDevice.get_disabledInRuntime, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {315}
	057 Move X0, X19
	058 Move X1, X31
	059 Call InputDevice.get_disabledInRuntime, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {151}
	064 Move X0, X19
	065 Move X1, X31
	066 Call InputDevice.ExecuteEnableCommand, X0
	067 Move X0, X19
	068 Move W1, W31
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare W21, 0
	071 JumpIfNotEqual {304}
	072 Move X0, X19
	073 Move W1, W31
	074 Move X2, X31
	075 Call InputDevice.set_disabledWhileInBackground, X0, X1
	076 Move X0, X19
	077 Move X1, X31
	078 Call InputDevice.get_disabledInFrontend, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {90}
	083 Move X0, X19
	084 Move X1, X31
	085 Call InputDevice.get_disabledInRuntime, X0
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {315}
	090 Move X0, X19
	091 Move X1, X31
	092 Call InputDevice.get_disabledInRuntime, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfEqual {104}
	097 Move X0, X19
	098 Move X1, X31
	099 Call InputDevice.ExecuteDisableCommand, X0
	100 Move W1, 1
	101 Move X0, X19
	102 Move X2, X31
	103 Call InputDevice.set_disabledInRuntime, X0, X1
	104 Move X0, X19
	105 Move X1, X31
	106 Call InputDevice.get_disabledInFrontend, X0
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfEqual {304}
	111 Move X8, 0x932000
	112 Move X8, [X8+4056]
	113 Add X0, X31, 12
	114 Move W1, W31
	115 NotImplemented "Instruction STRH not yet implemented."
	116 Move X2, [X8]
	117 Call Nullable`1<Boolean>..ctor, X0, X1
	118 NotImplemented "Instruction LDRH not yet implemented."
	119 Move X0, X19
	120 Move W1, W31
	121 Move X2, X31
	122 Call InputDevice.set_disabledWhileInBackground, X0, X1
	123 Move X0, X19
	124 Move X1, X31
	125 Call InputDevice.get_disabledInFrontend, X0
	126 Move TEMP, X0
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfEqual {137}
	130 Move X0, X19
	131 Move X1, X31
	132 Call InputDevice.get_disabledInRuntime, X0
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfEqual {315}
	137 Move X0, X19
	138 Move X1, X31
	139 Call InputDevice.get_disabledInRuntime, X0
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfEqual {151}
	144 Move X0, X19
	145 Move X1, X31
	146 Call InputDevice.ExecuteDisableCommand, X0
	147 Move W1, 1
	148 Move X0, X19
	149 Move X2, X31
	150 Call InputDevice.set_disabledInRuntime, X0, X1
	151 Move X0, X19
	152 Move X1, X31
	153 Call InputDevice.get_disabledInFrontend, X0
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {266}
	158 Move X0, X19
	159 Move X1, X31
	160 Call InputDevice.RequestSync, X0
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfEqual {170}
	165 Move X0, X20
	166 Move X1, X19
	167 Move W2, W31
	168 Move X3, X31
	169 Call InputManager.ResetDevice, X0, X1, X2, X3
	170 Move X0, X19
	171 Move W1, W31
	172 Move X2, X31
	173 Call InputDevice.set_disabledInFrontend, X0, X1
	174 Move X0, X19
	175 Move W1, W31
	176 Move X2, X31
	177 Call InputDevice.set_disabledWhileInBackground, X0, X1
	178 Move X0, X19
	179 Move X1, X31
	180 Call InputDevice.get_disabledInRuntime, X0
	181 Move TEMP, X0
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfEqual {192}
	185 Move X0, X19
	186 Move X1, X31
	187 Call InputDevice.get_disabledInFrontend, X0
	188 Move TEMP, X0
	189 And TEMP, TEMP, 1
	190 Compare TEMP, 1
	191 JumpIfEqual {315}
	192 Move X0, X19
	193 Move X1, X31
	194 Call InputDevice.get_disabledInRuntime, X0
	195 Move TEMP, X0
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfNotEqual {206}
	199 Move X0, X19
	200 Move X1, X31
	201 Call InputDevice.ExecuteEnableCommand, X0
	202 Move X0, X19
	203 Move W1, W31
	204 Move X2, X31
	205 Call InputDevice.set_disabledInRuntime, X0, X1
	206 Move X0, X19
	207 Move X1, X31
	208 Call InputDevice.get_disabledInFrontend, X0
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfEqual {304}
	213 Move X8, 0x932000
	214 Move X8, [X8+4056]
	215 Add X0, X31, 8
	216 Move W1, W31
	217 NotImplemented "Instruction STRH not yet implemented."
	218 Move X2, [X8]
	219 Call Nullable`1<Boolean>..ctor, X0, X1
	220 NotImplemented "Instruction LDRH not yet implemented."
	221 Move X0, X20
	222 Move X1, X19
	223 Move W2, W31
	224 Call InputManager.ResetDevice, X0, X1, X2, X3
	225 Move W1, 1
	226 Move X0, X19
	227 Move X2, X31
	228 Call InputDevice.set_disabledInFrontend, X0, X1
	229 Move X0, X19
	230 Move X1, X31
	231 Call InputDevice.get_disabledWhileInBackground, X0
	232 Move TEMP, X0
	233 And TEMP, TEMP, 1
	234 Compare TEMP, 1
	235 JumpIfNotEqual {266}
	236 Move X0, X19
	237 Move X1, X31
	238 Call InputDevice.get_disabledInRuntime, X0
	239 Move TEMP, X0
	240 And TEMP, TEMP, 1
	241 Compare TEMP, 1
	242 JumpIfNotEqual {250}
	243 Move X0, X19
	244 Move X1, X31
	245 Call InputDevice.ExecuteEnableCommand, X0
	246 Move X0, X19
	247 Move W1, W31
	248 Move X2, X31
	249 Call InputDevice.set_disabledInRuntime, X0, X1
	250 Move X0, X19
	251 Move X1, X31
	252 Call InputDevice.RequestSync, X0
	253 Move TEMP, X0
	254 And TEMP, TEMP, 1
	255 Compare TEMP, 1
	256 JumpIfEqual {262}
	257 Move X0, X20
	258 Move X1, X19
	259 Move W2, W31
	260 Move X3, X31
	261 Call InputManager.ResetDevice, X0, X1, X2, X3
	262 Move X0, X19
	263 Move W1, W31
	264 Move X2, X31
	265 Call InputDevice.set_disabledWhileInBackground, X0, X1
	266 Move W2, 4
	267 Move X0, X19
	268 Move X1, X31
	269 Call InputDevice.get_disabledInFrontend, X0
	270 Move TEMP, X0
	271 And TEMP, TEMP, 1
	272 Compare TEMP, 1
	273 JumpIfEqual {315}
	274 Move X0, X19
	275 Move X1, X31
	276 Call InputDevice.get_disabledWhileInBackground, X0
	277 Move TEMP, X0
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfEqual {315}
	281 Move W1, 1
	282 Move X0, X19
	283 Move X2, X31
	284 Call InputDevice.set_disabledWhileInBackground, X0, X1
	285 Move X8, 0x932000
	286 Move X8, [X8+4056]
	287 Add X0, X31, 4
	288 Move W1, W31
	289 NotImplemented "Instruction STRH not yet implemented."
	290 Move X2, [X8]
	291 Call Nullable`1<Boolean>..ctor, X0, X1
	292 NotImplemented "Instruction LDRH not yet implemented."
	293 Move X0, X20
	294 Move X1, X19
	295 Move W2, W31
	296 Call InputManager.ResetDevice, X0, X1, X2, X3
	297 Move X0, X19
	298 Move X1, X31
	299 Call InputDevice.ExecuteDisableCommand, X0
	300 Move W1, 1
	301 Move X0, X19
	302 Move X2, X31
	303 Call InputDevice.set_disabledInRuntime, X0, X1
	304 Move W2, 5
	305 Move X8, 0x982000
	306 Move X9, 0x982000
	307 Move X8, [X8+3392]
	308 Move X9, [X9+3368]
	309 Add X0, X20, 224
	310 Move X1, X19
	311 Move X3, [X8]
	312 Move X5, [X9]
	313 Move X4, X31
	314 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	315 Move X20, [X31+48]
	316 Move X19, [X31+56]
	317 Move X22, [X31+32]
	318 Move X21, [X31+40]
	319 Move X30, [X31+16]
	320 Move X23, [X31+24]
	321 Add X31, X31, 64
	322 Return 
	323 Move X0, 0x933000
	324 Move X0, [X0+1320]
	325 Call 0x1C17D08
	326 Call 0x1C17F10
	327 Move X19, X0
	328 Move X0, 0x956000
	329 Move X0, [X0+3360]
	330 Call 0x1C17D08
	331 Move X1, X0
	332 Move X0, X19
	333 Move X2, X31
	334 Call ArgumentNullException..ctor, X0, X1
	335 Move X0, 0x982000
	336 Move X0, [X0+672]
	337 Call 0x1C17D08
	338 Move X1, X0
	339 Move X0, X19
	340 Call 0x1C17DEC

Method: System.Void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)

Disassembly:
	0x037C8038 ADRP X8, 0x980000
	0x037C803C LDR X8, [X8 + 0x5E8]
	0x037C8040 MOV X0, X19
	0x037C8044 LDR X1, [X8]
	0x037C8048 ADRP X8, 0x980000
	0x037C804C LDR X8, [X8 + 0x418]
	0x037C8050 LDR X2, [X8]
	0x037C8054 BL 0x22086E8
	0x037C8058 ADRP X8, 0x980000
	0x037C805C LDR X8, [X8 + 0x648]
	0x037C8060 MOV X0, X19
	0x037C8064 LDR X1, [X8]
	0x037C8068 ADRP X8, 0x980000
	0x037C806C LDR X8, [X8 + 0x410]
	0x037C8070 LDR X2, [X8]
	0x037C8074 BL 0x22086E8
	0x037C8078 ADRP X9, 0x980000
	0x037C807C LDR X8, [X19 + 0x58]
	0x037C8080 LDR X9, [X9 + 0x428]
	0x037C8084 MOV X1, X31
	0x037C8088 STR X8, [X31 + 0x8]
	0x037C808C LDR X0, [X9]
	0x037C8090 BL 0x338C698
	0x037C8094 ADRP X8, 0x980000
	0x037C8098 LDR X8, [X8 + 0x658]
	0x037C809C MOV X2, X0
	0x037C80A0 ADD X0, X31, 0x8
	0x037C80A4 MOV X3, X31
	0x037C80A8 LDR X1, [X8]
	0x037C80AC BL 0x3769B8C
	0x037C80B0 ADRP X9, 0x980000
	0x037C80B4 LDR X8, [X19 + 0x58]
	0x037C80B8 LDR X9, [X9 + 0x430]
	0x037C80BC MOV X1, X31
	0x037C80C0 STR X8, [X31 + 0x8]
	0x037C80C4 LDR X0, [X9]
	0x037C80C8 BL 0x338C698
	0x037C80CC ADRP X8, 0x980000
	0x037C80D0 LDR X8, [X8 + 0x5D0]
	0x037C80D4 MOV X2, X0
	0x037C80D8 ADD X0, X31, 0x8
	0x037C80DC MOV X3, X31
	0x037C80E0 LDR X1, [X8]
	0x037C80E4 BL 0x3769B8C
	0x037C80E8 ADRP X9, 0x980000
	0x037C80EC LDR X8, [X19 + 0x58]
	0x037C80F0 LDR X9, [X9 + 0x438]
	0x037C80F4 MOV X1, X31
	0x037C80F8 STR X8, [X31 + 0x8]
	0x037C80FC LDR X0, [X9]
	0x037C8100 BL 0x338C698

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC1A000
	006 Move W8, [X21+493]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x954000
	014 Move X0, [X0+3792]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+493], W8
	018 Move W8, [X20+1064]
	019 Compare W8, 0
	020 JumpIfEqual {30}
	021 Add X0, X20, 952
	022 Move X1, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X2, X31
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Call InputEventStream.Write, X0, X1
	029 Return 
	030 Move X20, [X20+1088]
	031 Compare X20, 0
	032 JumpIfEqual {62}
	033 Move X10, 0x954000
	034 Move X8, [X20]
	035 Move X10, [X10+3792]
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move X1, [X10]
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 2
	047 Move X0, X20
	048 Call 0x1C5D788
	049 Move W9, [X10]
	050 Add W9, W9, 2
	051 Add X8, X8, W9
	052 Add X0, X8, 312
	053 Move X3, [X0]
	054 Move X2, [X0+8]
	055 Move X0, X20
	056 Move X1, X19
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 CallNoReturn X3
	062 Call 0x1C17F20

Method: System.Void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)

Disassembly:
	0x037BDEB8 ADRP X22, 0x98A000

ISIL:
	001 Call InputManager.QueueEvent, X0, X1
	002 Return 

Method: System.Void QueueEvent(ref TEvent inputEvent)

Disassembly:
	0x02209678 ADRP X20, 0x1F12000
	0x0220967C LDR X20, [X20 + 0x270]

ISIL:
	001 Move X2, X31
	002 Call InputManager.QueueEvent, X0, X1
	003 Return 

Method: System.Void Update()

Disassembly:
	0x037C8104 ADRP X8, 0x980000
	0x037C8108 LDR X8, [X8 + 0x6D8]
	0x037C810C MOV X2, X0
	0x037C8110 ADD X0, X31, 0x8
	0x037C8114 MOV X3, X31
	0x037C8118 LDR X1, [X8]
	0x037C811C BL 0x3769B8C
	0x037C8120 ADRP X9, 0x980000
	0x037C8124 LDR X8, [X19 + 0x58]
	0x037C8128 LDR X9, [X9 + 0x3A0]
	0x037C812C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+172]
	004 Move X19, X0
	005 Compare W1, 0
	006 JumpIfNotEqual {11}
	007 Move W0, [X19+168]
	008 Move X1, X31
	009 Call InputUpdate.GetUpdateTypeForPlayer, X0
	010 Move W1, W0
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]

Method: System.Void Update(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x037C8130 STR X8, [X31 + 0x8]
	0x037C8134 LDR X0, [X9]
	0x037C8138 BL 0x338C698
	0x037C813C ADRP X8, 0x980000
	0x037C8140 LDR X8, [X8 + 0x568]
	0x037C8144 MOV X2, X0
	0x037C8148 ADD X0, X31, 0x8
	0x037C814C MOV X3, X31
	0x037C8150 LDR X1, [X8]
	0x037C8154 BL 0x3769B8C
	0x037C8158 ADRP X9, 0x980000
	0x037C815C LDR X8, [X19 + 0x58]
	0x037C8160 LDR X9, [X9 + 0x480]
	0x037C8164 MOV X1, X31
	0x037C8168 STR X8, [X31 + 0x8]
	0x037C816C LDR X0, [X9]
	0x037C8170 BL 0x338C698
	0x037C8174 ADRP X8, 0x980000
	0x037C8178 LDR X8, [X8 + 0x5A0]
	0x037C817C MOV X2, X0
	0x037C8180 ADD X0, X31, 0x8
	0x037C8184 MOV X3, X31
	0x037C8188 LDR X1, [X8]
	0x037C818C BL 0x3769B8C
	0x037C8190 ADRP X9, 0x980000
	0x037C8194 LDR X8, [X19 + 0x58]
	0x037C8198 LDR X9, [X9 + 0x488]
	0x037C819C MOV X1, X31
	0x037C81A0 STR X8, [X31 + 0x8]
	0x037C81A4 LDR X0, [X9]
	0x037C81A8 BL 0x338C698
	0x037C81AC ADRP X8, 0x980000
	0x037C81B0 LDR X8, [X8 + 0x5C0]
	0x037C81B4 MOV X2, X0
	0x037C81B8 ADD X0, X31, 0x8
	0x037C81BC MOV X3, X31
	0x037C81C0 LDR X1, [X8]
	0x037C81C4 BL 0x3769B8C
	0x037C81C8 ADRP X9, 0x980000
	0x037C81CC LDR X8, [X19 + 0x58]
	0x037C81D0 LDR X9, [X9 + 0x490]
	0x037C81D4 MOV X1, X31
	0x037C81D8 STR X8, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC1A000
	006 Move W8, [X21+494]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x954000
	014 Move X0, [X0+3792]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+494], W8
	018 Move X20, [X20+1088]
	019 Compare X20, 0
	020 JumpIfEqual {50}
	021 Move X10, 0x954000
	022 Move X8, [X20]
	023 Move X10, [X10+3792]
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X1, [X10]
	026 Compare X9, 0
	027 JumpIfEqual {34}
	028 Move X10, [X8+176]
	029 Add X10, X10, 8
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Subtract X9, X9, 1
	033 Add X10, X10, 16
	034 Move W2, 1
	035 Move X0, X20
	036 Call 0x1C5D788
	037 Move W9, [X10]
	038 Add W9, W9, 1
	039 Add X8, X8, W9
	040 Add X0, X8, 312
	041 Move X3, [X0]
	042 Move X2, [X0+8]
	043 Move X0, X20
	044 Move W1, W19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 CallNoReturn X3
	050 Call 0x1C17F20

Method: System.Void Initialize(UnityEngine.InputSystem.LowLevel.IInputRuntime runtime, UnityEngine.InputSystem.InputSettings settings)

Disassembly:
	0x037C81DC LDR X0, [X9]
	0x037C81E0 BL 0x338C698
	0x037C81E4 ADRP X8, 0x980000
	0x037C81E8 LDR X8, [X8 + 0x6B0]
	0x037C81EC MOV X2, X0
	0x037C81F0 ADD X0, X31, 0x8
	0x037C81F4 MOV X3, X31
	0x037C81F8 LDR X1, [X8]
	0x037C81FC BL 0x3769B8C
	0x037C8200 ADRP X9, 0x980000
	0x037C8204 LDR X8, [X19 + 0x58]
	0x037C8208 LDR X9, [X9 + 0x4C8]
	0x037C820C MOV X1, X31
	0x037C8210 STR X8, [X31 + 0x8]
	0x037C8214 LDR X0, [X9]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Move [X0+1152], X2
	007 Call InputManager.InitializeData, X0
	008 Move X0, X20
	009 Move X1, X19
	010 Call InputManager.InstallRuntime, X0, X1
	011 Move X0, X20
	012 Call InputManager.InstallGlobals, X0
	013 Move X0, X20
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Call InputManager.ApplySettings, X0
	018 Return 

Method: System.Void Destroy()

Disassembly:
	0x037C9F7C LDR X8, [X20 + 0x78]
	0x037C9F80 CBZ X8, 0x37CA01C
	0x037C9F84 LDR W9, [X8 + 0x18]
	0x037C9F88 CMP W22, W9
	0x037C9F8C B.CS 0x37CA020
	0x037C9F90 ADD X8, X8, W22, 0x3, SXTW
	0x037C9F94 LDR X21, [X8 + 0x20]
	0x037C9F98 CBZ X21, 0x37CA01C
	0x037C9F9C MOV X0, X21
	0x037C9FA0 MOV X1, X31
	0x037C9FA4 BL 0x377A8A4
	0x037C9FA8 TBZ X0, 0x0, 0x37C9FF0
	0x037C9FAC MOV X0, X20
	0x037C9FB0 MOV X1, X21
	0x037C9FB4 BL 0x37C5BB0
	0x037C9FB8 TBNZ X0, 0x0, 0x37C9FF0
	0x037C9FBC MOVZ W3, 0x2
	0x037C9FC0 MOV X0, X20
	0x037C9FC4 MOV X1, X21
	0x037C9FC8 MOV W2, W31
	0x037C9FCC BL 0x37C5BEC
	0x037C9FD0 LDR X0, [X20 + 0x78]
	0x037C9FD4 LDR W2, [X20 + 0x70]
	0x037C9FD8 LDR X3, [X23]
	0x037C9FDC MOV X1, X21
	0x037C9FE0 BL 0x2179B8C
	0x037C9FE4 SUB W8, W22, 0x1
	0x037C9FE8 ADDS W31, W0, 0x1
	0x037C9FEC CSEL W22, W8, W0, EQ
	0x037C9FF0 LDR W8, [X20 + 0x70]
	0x037C9FF4 ADD W22, W22, 0x1
	0x037C9FF8 CMP W22, W8
	0x037C9FFC B.LT 0x37C9F7C
	0x037CA000 AND W8, W19, 0x1
	0x037CA004 STRB W8, [X20 + 0x3B2]
	0x037CA008 LDP X20, X19, [X31 + 0x30]
	0x037CA00C LDP X22, X21, [X31 + 0x20]
	0x037CA010 LDP X24, X23, [X31 + 0x10]
	0x037CA014 LDR X30, [X31], #0x40
	0x037CA018 RET
	0x037CA01C BL 0x1C16F20
	0x037CA020 BL 0x1C16F28
	0x037CA024 CBZ W1, 0x37CA038
	0x037CA028 LDR W8, [X0 + 0xA8]
	0x037CA02C ANDS W31, W8, W1, 0x0
	0x037CA030 CSET W0, NE
	0x037CA034 RET
	0x037CA038 MOVZ W0, 0x1
	0x037CA03C RET
	0x037CA040 STR D10, [X31 - 0x80]!
	0x037CA044 STP D9, D8, [X31 + 0x10]
	0x037CA048 STP X29, X30, [X31 + 0x20]
	0x037CA04C STP X28, X27, [X31 + 0x30]
	0x037CA050 STP X26, X25, [X31 + 0x40]
	0x037CA054 STP X24, X23, [X31 + 0x50]
	0x037CA058 STP X22, X21, [X31 + 0x60]
	0x037CA05C STP X20, X19, [X31 + 0x70]
	0x037CA060 SUB X31, X31, 0x2B0
	0x037CA064 STR X2, [X31 + 0x60]
	0x037CA068 MRS X22, 0xC000
	0x037CA06C LDR X8, [X22 + 0x28]
	0x037CA070 ADRP X19, 0xC17000
	0x037CA074 MOV W21, W1
	0x037CA078 MOV X20, X0
	0x037CA07C STR X8, [X31 + 0x2A8]
	0x037CA080 LDRB W8, [X19 + 0x201]
	0x037CA084 TBNZ X8, 0x0, 0x37CA18C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC19000
	006 Move W8, [X20+495]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x92B000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+495], W8
	017 Move W8, [X19+112]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X20, X31
	020 Move X8, [X19+120]
	021 Compare X8, 0
	022 JumpIfEqual {80}
	023 Move W9, [X8+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X8, X8, X20
	026 Move X0, [X8+32]
	027 Compare X0, 0
	028 JumpIfEqual {80}
	029 Move X1, X31
	030 Call InputDevice.NotifyRemoved, X0
	031 Move W8, [X19+112]
	032 Add X20, X20, 1
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X21, 0x92B000
	035 Move X21, [X21+1432]
	036 Add X0, X19, 176
	037 Move X1, X31
	038 Call InputStateBuffers.FreeAll, X0
	039 Move X0, X19
	040 Call InputManager.UninstallGlobals, X0
	041 Move X0, [X21]
	042 Move X20, [X19+1152]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {75}
	055 Move X0, [X19+1152]
	056 Compare X0, 0
	057 JumpIfEqual {80}
	058 Move X1, X31
	059 Call Object.get_hideFlags, X0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, [X21]
	062 Move X19, [X19+1152]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X19
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X1, X31
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Call Object.DestroyImmediate, X0
	074 Return 
	075 Move X20, [X31+16]
	076 Move X19, [X31+24]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Return 
	080 Call 0x1C17F20
	081 Call 0x1C17F28

Method: System.Void InitializeData()

Disassembly:
	0x037C8218 BL 0x338C698
	0x037C821C ADRP X8, 0x974000
	0x037C8220 LDR X8, [X8 + 0xE70]
	0x037C8224 MOV X2, X0
	0x037C8228 ADD X0, X31, 0x8
	0x037C822C MOV X3, X31
	0x037C8230 LDR X1, [X8]
	0x037C8234 BL 0x3769B8C
	0x037C8238 ADRP X9, 0x980000
	0x037C823C LDR X8, [X19 + 0x58]
	0x037C8240 LDR X9, [X9 + 0x4D0]
	0x037C8244 MOV X1, X31
	0x037C8248 STR X8, [X31 + 0x8]
	0x037C824C LDR X0, [X9]
	0x037C8250 BL 0x338C698
	0x037C8254 ADRP X8, 0x980000
	0x037C8258 LDR X8, [X8 + 0x6A0]
	0x037C825C MOV X2, X0
	0x037C8260 ADD X0, X31, 0x8
	0x037C8264 MOV X3, X31
	0x037C8268 LDR X1, [X8]
	0x037C826C BL 0x3769B8C
	0x037C8270 ADRP X9, 0x980000
	0x037C8274 LDR X8, [X19 + 0x58]
	0x037C8278 LDR X9, [X9 + 0x4D8]
	0x037C827C MOV X1, X31
	0x037C8280 STR X8, [X31 + 0x8]
	0x037C8284 LDR X0, [X9]
	0x037C8288 BL 0x338C698
	0x037C828C ADRP X8, 0x980000
	0x037C8290 LDR X8, [X8 + 0x668]
	0x037C8294 MOV X2, X0
	0x037C8298 ADD X0, X31, 0x8
	0x037C829C MOV X3, X31
	0x037C82A0 LDR X1, [X8]
	0x037C82A4 BL 0x3769B8C
	0x037C82A8 ADRP X9, 0x980000
	0x037C82AC LDR X8, [X19 + 0x58]
	0x037C82B0 LDR X9, [X9 + 0x500]
	0x037C82B4 MOV X1, X31
	0x037C82B8 STR X8, [X31 + 0x8]
	0x037C82BC LDR X0, [X9]
	0x037C82C0 BL 0x338C698
	0x037C82C4 ADRP X8, 0x980000
	0x037C82C8 LDR X8, [X8 + 0x570]
	0x037C82CC MOV X2, X0
	0x037C82D0 ADD X0, X31, 0x8
	0x037C82D4 MOV X3, X31
	0x037C82D8 LDR X1, [X8]
	0x037C82DC BL 0x3769B8C
	0x037C82E0 ADRP X9, 0x980000
	0x037C82E4 LDR X8, [X19 + 0x58]
	0x037C82E8 LDR X9, [X9 + 0x380]
	0x037C82EC MOV X1, X31
	0x037C82F0 STR X8, [X31 + 0x8]
	0x037C82F4 LDR X0, [X9]
	0x037C82F8 BL 0x338C698
	0x037C82FC ADRP X8, 0x980000
	0x037C8300 LDR X8, [X8 + 0x5F8]
	0x037C8304 MOV X2, X0
	0x037C8308 ADD X0, X31, 0x8
	0x037C830C MOV X3, X31
	0x037C8310 LDR X1, [X8]
	0x037C8314 BL 0x3769B8C
	0x037C8318 ADRP X9, 0x980000
	0x037C831C LDR X8, [X19 + 0x58]
	0x037C8320 LDR X9, [X9 + 0x3A8]
	0x037C8324 MOV X1, X31
	0x037C8328 STR X8, [X31 + 0x8]
	0x037C832C LDR X0, [X9]
	0x037C8330 BL 0x338C698
	0x037C8334 ADRP X8, 0x980000
	0x037C8338 LDR X8, [X8 + 0x6B8]
	0x037C833C MOV X2, X0
	0x037C8340 ADD X0, X31, 0x8
	0x037C8344 MOV X3, X31
	0x037C8348 LDR X1, [X8]
	0x037C834C BL 0x3769B8C
	0x037C8350 ADRP X9, 0x980000
	0x037C8354 LDR X8, [X19 + 0x58]
	0x037C8358 LDR X9, [X9 + 0x3B0]
	0x037C835C MOV X1, X31
	0x037C8360 STR X8, [X31 + 0x8]
	0x037C8364 LDR X0, [X9]
	0x037C8368 BL 0x338C698
	0x037C836C ADRP X8, 0x980000
	0x037C8370 LDR X8, [X8 + 0x5B0]
	0x037C8374 MOV X2, X0
	0x037C8378 ADD X0, X31, 0x8
	0x037C837C MOV X3, X31
	0x037C8380 LDR X1, [X8]
	0x037C8384 BL 0x3769B8C
	0x037C8388 ADRP X9, 0x980000
	0x037C838C LDR X8, [X19 + 0x60]
	0x037C8390 LDR X9, [X9 + 0x3F8]
	0x037C8394 MOV X1, X31
	0x037C8398 STR X8, [X31 + 0x8]
	0x037C839C LDR X0, [X9]
	0x037C83A0 BL 0x338C698
	0x037C83A4 ADRP X8, 0x980000
	0x037C83A8 LDR X8, [X8 + 0x608]
	0x037C83AC MOV X2, X0
	0x037C83B0 ADD X0, X31, 0x8
	0x037C83B4 MOV X3, X31
	0x037C83B8 LDR X1, [X8]
	0x037C83BC BL 0x3769B8C
	0x037C83C0 ADRP X9, 0x980000
	0x037C83C4 LDR X8, [X19 + 0x60]
	0x037C83C8 LDR X9, [X9 + 0x508]
	0x037C83CC MOV X1, X31
	0x037C83D0 STR X8, [X31 + 0x8]
	0x037C83D4 LDR X0, [X9]
	0x037C83D8 BL 0x338C698
	0x037C83DC ADRP X8, 0x980000
	0x037C83E0 LDR X8, [X8 + 0x618]
	0x037C83E4 MOV X2, X0
	0x037C83E8 ADD X0, X31, 0x8
	0x037C83EC MOV X3, X31
	0x037C83F0 LDR X1, [X8]
	0x037C83F4 BL 0x3769B8C
	0x037C83F8 ADRP X9, 0x980000
	0x037C83FC LDR X8, [X19 + 0x60]
	0x037C8400 LDR X9, [X9 + 0x4E8]
	0x037C8404 MOV X1, X31
	0x037C8408 STR X8, [X31 + 0x8]
	0x037C840C LDR X0, [X9]
	0x037C8410 BL 0x338C698
	0x037C8414 ADRP X8, 0x980000
	0x037C8418 LDR X8, [X8 + 0x6D0]
	0x037C841C MOV X2, X0
	0x037C8420 ADD X0, X31, 0x8
	0x037C8424 MOV X3, X31
	0x037C8428 LDR X1, [X8]
	0x037C842C BL 0x3769B8C
	0x037C8430 ADRP X9, 0x980000
	0x037C8434 LDR X8, [X19 + 0x60]
	0x037C8438 LDR X9, [X9 + 0x478]
	0x037C843C MOV X1, X31
	0x037C8440 STR X8, [X31 + 0x8]
	0x037C8444 LDR X0, [X9]
	0x037C8448 BL 0x338C698
	0x037C844C ADRP X8, 0x980000
	0x037C8450 LDR X8, [X8 + 0x5C8]
	0x037C8454 MOV X2, X0
	0x037C8458 ADD X0, X31, 0x8
	0x037C845C MOV X3, X31
	0x037C8460 LDR X1, [X8]
	0x037C8464 BL 0x3769B8C
	0x037C8468 ADRP X9, 0x980000
	0x037C846C LDR X8, [X19 + 0x60]
	0x037C8470 LDR X9, [X9 + 0x4B0]
	0x037C8474 MOV X1, X31
	0x037C8478 STR X8, [X31 + 0x8]
	0x037C847C LDR X0, [X9]
	0x037C8480 BL 0x338C698
	0x037C8484 ADRP X8, 0x97F000
	0x037C8488 LDR X8, [X8 + 0x828]
	0x037C848C MOV X2, X0
	0x037C8490 ADD X0, X31, 0x8
	0x037C8494 MOV X3, X31
	0x037C8498 LDR X1, [X8]
	0x037C849C BL 0x3769B8C
	0x037C84A0 ADRP X23, 0x980000
	0x037C84A4 LDR X8, [X19 + 0x68]
	0x037C84A8 LDR X23, [X23 + 0x370]
	0x037C84AC MOV X1, X31
	0x037C84B0 STR X8, [X31 + 0x8]
	0x037C84B4 LDR X0, [X23]
	0x037C84B8 BL 0x338C698
	0x037C84BC ADRP X8, 0x980000
	0x037C84C0 LDR X8, [X8 + 0x560]
	0x037C84C4 MOV X2, X0
	0x037C84C8 ADD X0, X31, 0x8
	0x037C84CC MOV X3, X31
	0x037C84D0 LDR X1, [X8]
	0x037C84D4 BL 0x3769B8C
	0x037C84D8 ADRP X22, 0x980000
	0x037C84DC LDR X8, [X19 + 0x68]
	0x037C84E0 LDR X22, [X22 + 0x540]
	0x037C84E4 MOV X1, X31
	0x037C84E8 STR X8, [X31 + 0x8]
	0x037C84EC LDR X0, [X22]
	0x037C84F0 BL 0x338C698
	0x037C84F4 ADRP X8, 0x953000
	0x037C84F8 LDR X8, [X8 + 0x510]
	0x037C84FC MOV X2, X0
	0x037C8500 ADD X0, X31, 0x8
	0x037C8504 MOV X3, X31
	0x037C8508 LDR X1, [X8]
	0x037C850C BL 0x3769B8C
	0x037C8510 ADRP X9, 0x980000
	0x037C8514 LDR X8, [X19 + 0x68]
	0x037C8518 LDR X9, [X9 + 0x550]
	0x037C851C MOV X1, X31
	0x037C8520 STR X8, [X31 + 0x8]
	0x037C8524 LDR X0, [X9]
	0x037C8528 BL 0x338C698
	0x037C852C ADRP X8, 0x980000
	0x037C8530 LDR X8, [X8 + 0x640]
	0x037C8534 MOV X2, X0
	0x037C8538 ADD X0, X31, 0x8
	0x037C853C MOV X3, X31
	0x037C8540 LDR X1, [X8]
	0x037C8544 BL 0x3769B8C
	0x037C8548 LDR X8, [X19 + 0x68]
	0x037C854C LDR X0, [X23]
	0x037C8550 MOV X1, X31
	0x037C8554 STR X8, [X31 + 0x8]
	0x037C8558 BL 0x338C698
	0x037C855C LDR X1, [X27]
	0x037C8560 MOV X2, X0
	0x037C8564 ADD X0, X31, 0x8
	0x037C8568 MOV X3, X31
	0x037C856C BL 0x3769B8C
	0x037C8570 LDR X8, [X19 + 0x68]
	0x037C8574 LDR X0, [X22]
	0x037C8578 MOV X1, X31
	0x037C857C STR X8, [X31 + 0x8]
	0x037C8580 BL 0x338C698
	0x037C8584 LDR X1, [X21]
	0x037C8588 MOV X2, X0
	0x037C858C ADD X0, X31, 0x8
	0x037C8590 MOV X3, X31
	0x037C8594 BL 0x3769B8C
	0x037C8598 ADRP X9, 0x980000
	0x037C859C LDR X8, [X19 + 0x68]
	0x037C85A0 LDR X9, [X9 + 0x390]
	0x037C85A4 MOV X1, X31
	0x037C85A8 STR X8, [X31 + 0x8]
	0x037C85AC LDR X0, [X9]
	0x037C85B0 BL 0x338C698
	0x037C85B4 ADRP X8, 0x980000
	0x037C85B8 LDR X8, [X8 + 0x5B8]
	0x037C85BC MOV X2, X0
	0x037C85C0 ADD X0, X31, 0x8
	0x037C85C4 MOV X3, X31
	0x037C85C8 LDR X1, [X8]
	0x037C85CC BL 0x3769B8C
	0x037C85D0 ADRP X9, 0x980000
	0x037C85D4 LDR X8, [X19 + 0x68]
	0x037C85D8 LDR X9, [X9 + 0x398]
	0x037C85DC MOV X1, X31
	0x037C85E0 STR X8, [X31 + 0x8]
	0x037C85E4 LDR X0, [X9]
	0x037C85E8 BL 0x338C698
	0x037C85EC ADRP X8, 0x980000
	0x037C85F0 LDR X8, [X8 + 0x628]
	0x037C85F4 MOV X2, X0
	0x037C85F8 ADD X0, X31, 0x8
	0x037C85FC MOV X3, X31
	0x037C8600 LDR X1, [X8]
	0x037C8604 BL 0x3769B8C
	0x037C8608 ADRP X9, 0x980000
	0x037C860C LDR X8, [X19 + 0x68]
	0x037C8610 LDR X9, [X9 + 0x498]
	0x037C8614 MOV X1, X31
	0x037C8618 STR X8, [X31 + 0x8]
	0x037C861C LDR X0, [X9]
	0x037C8620 BL 0x338C698
	0x037C8624 ADRP X8, 0x980000
	0x037C8628 LDR X8, [X8 + 0x588]
	0x037C862C MOV X2, X0
	0x037C8630 ADD X0, X31, 0x8
	0x037C8634 MOV X3, X31
	0x037C8638 LDR X1, [X8]
	0x037C863C BL 0x3769B8C
	0x037C8640 ADRP X9, 0x980000
	0x037C8644 LDR X8, [X19 + 0x68]
	0x037C8648 LDR X9, [X9 + 0x538]
	0x037C864C MOV X1, X31
	0x037C8650 STR X8, [X31 + 0x8]
	0x037C8654 LDR X0, [X9]
	0x037C8658 BL 0x338C698
	0x037C865C ADRP X8, 0x980000
	0x037C8660 LDR X8, [X8 + 0x660]
	0x037C8664 MOV X2, X0
	0x037C8668 ADD X0, X31, 0x8
	0x037C866C MOV X3, X31
	0x037C8670 LDR X1, [X8]
	0x037C8674 BL 0x3769B8C
	0x037C8678 LDP X20, X19, [X31 + 0x60]
	0x037C867C LDP X22, X21, [X31 + 0x50]
	0x037C8680 LDP X24, X23, [X31 + 0x40]
	0x037C8684 LDP X26, X25, [X31 + 0x30]
	0x037C8688 LDP X28, X27, [X31 + 0x20]
	0x037C868C LDP X29, X30, [X31 + 0x10]
	0x037C8690 ADD X31, X31, 0x70
	0x037C8694 RET
	0x037C8698 STR D8, [X31 - 0x40]!
	0x037C869C STR X30, [X31 + 0x8]
	0x037C86A0 STP X24, X23, [X31 + 0x10]
	0x037C86A4 STP X22, X21, [X31 + 0x20]
	0x037C86A8 STP X20, X19, [X31 + 0x30]
	0x037C86AC ADRP X21, 0xC19000
	0x037C86B0 LDRB W8, [X21 + 0x1F1]
	0x037C86B4 MOV X20, X1
	0x037C86B8 MOV X19, X0
	0x037C86BC TBNZ X8, 0x0, 0x37C8758
	0x037C86C0 ADRP X0, 0x92B000
	0x037C86C4 LDR X0, [X0 + 0xD28]
	0x037C86C8 BL 0x1C16CF4
	0x037C86CC ADRP X0, 0x980000
	0x037C86D0 LDR X0, [X0 + 0xC8]
	0x037C86D4 BL 0x1C16CF4
	0x037C86D8 ADRP X0, 0x980000
	0x037C86DC LDR X0, [X0 + 0x6E0]
	0x037C86E0 BL 0x1C16CF4
	0x037C86E4 ADRP X0, 0x97E000
	0x037C86E8 LDR X0, [X0 + 0x260]
	0x037C86EC BL 0x1C16CF4
	0x037C86F0 ADRP X0, 0x980000
	0x037C86F4 LDR X0, [X0 + 0x6E8]
	0x037C86F8 BL 0x1C16CF4
	0x037C86FC ADRP X0, 0x953000
	0x037C8700 LDR X0, [X0 + 0xED0]
	0x037C8704 BL 0x1C16CF4
	0x037C8708 ADRP X0, 0x980000
	0x037C870C LDR X0, [X0 + 0xD0]
	0x037C8710 BL 0x1C16CF4
	0x037C8714 ADRP X0, 0x980000
	0x037C8718 LDR X0, [X0 + 0x6F0]
	0x037C871C BL 0x1C16CF4
	0x037C8720 ADRP X0, 0x980000
	0x037C8724 LDR X0, [X0 + 0x6F8]
	0x037C8728 BL 0x1C16CF4
	0x037C872C ADRP X0, 0x980000
	0x037C8730 LDR X0, [X0 + 0x700]
	0x037C8734 BL 0x1C16CF4
	0x037C8738 ADRP X0, 0x980000
	0x037C873C LDR X0, [X0 + 0x708]
	0x037C8740 BL 0x1C16CF4
	0x037C8744 ADRP X0, 0x980000
	0x037C8748 LDR X0, [X0 + 0x710]
	0x037C874C BL 0x1C16CF4
	0x037C8750 MOVZ W8, 0x1
	0x037C8754 STRB W8, [X21 + 0x1F1]
	0x037C8758 ADRP X22, 0x953000
	0x037C875C LDR X21, [X19 + 0x440]
	0x037C8760 LDR X22, [X22 + 0xED0]
	0x037C8764 CBZ X21, 0x37C8968
	0x037C8768 LDR X8, [X21]
	0x037C876C LDR X1, [X22]
	0x037C8770 LDRH W9, [X8 + 0x12E]
	0x037C8774 CBZ X9, 0x37C8798
	0x037C8778 LDR X10, [X8 + 0xB0]
	0x037C877C ADD X10, X10, 0x8
	0x037C8780 LDUR X11, [X10 - 0x8]
	0x037C8784 CMP X11, X1
	0x037C8788 B.EQ 0x37C87A8
	0x037C878C SUBS X9, X9, 0x1
	0x037C8790 ADD X10, X10, 0x10
	0x037C8794 B.NE 0x37C8780
	0x037C8798 MOVZ W2, 0x5
	0x037C879C MOV X0, X21
	0x037C87A0 BL 0x1C5C788
	0x037C87A4 B 0x37C87B8
	0x037C87A8 LDR W9, [X10]
	0x037C87AC ADD W9, W9, 0x5
	0x037C87B0 ADD X8, X8, W9, 0x4, SXTW
	0x037C87B4 ADD X0, X8, 0x138
	0x037C87B8 LDP X8, X2, [X0]
	0x037C87BC MOV X0, X21
	0x037C87C0 MOV X1, X31
	0x037C87C4 BLR X8
	0x037C87C8 LDR X21, [X19 + 0x440]
	0x037C87CC CBZ X21, 0x37C8D68
	0x037C87D0 LDR X8, [X21]
	0x037C87D4 LDR X1, [X22]
	0x037C87D8 LDRH W9, [X8 + 0x12E]
	0x037C87DC CBZ X9, 0x37C8800
	0x037C87E0 LDR X10, [X8 + 0xB0]
	0x037C87E4 ADD X10, X10, 0x8
	0x037C87E8 LDUR X11, [X10 - 0x8]
	0x037C87EC CMP X11, X1
	0x037C87F0 B.EQ 0x37C8810
	0x037C87F4 SUBS X9, X9, 0x1
	0x037C87F8 ADD X10, X10, 0x10
	0x037C87FC B.NE 0x37C87E8
	0x037C8800 MOVZ W2, 0x7
	0x037C8804 MOV X0, X21
	0x037C8808 BL 0x1C5C788
	0x037C880C B 0x37C8820
	0x037C8810 LDR W9, [X10]
	0x037C8814 ADD W9, W9, 0x7
	0x037C8818 ADD X8, X8, W9, 0x4, SXTW
	0x037C881C ADD X0, X8, 0x138
	0x037C8820 LDP X8, X2, [X0]
	0x037C8824 MOV X0, X21
	0x037C8828 MOV X1, X31
	0x037C882C BLR X8
	0x037C8830 LDR X21, [X19 + 0x440]
	0x037C8834 CBZ X21, 0x37C8D68
	0x037C8838 LDR X8, [X21]
	0x037C883C LDR X1, [X22]
	0x037C8840 LDRH W9, [X8 + 0x12E]
	0x037C8844 CBZ X9, 0x37C8868
	0x037C8848 LDR X10, [X8 + 0xB0]
	0x037C884C ADD X10, X10, 0x8
	0x037C8850 LDUR X11, [X10 - 0x8]
	0x037C8854 CMP X11, X1
	0x037C8858 B.EQ 0x37C8878
	0x037C885C SUBS X9, X9, 0x1
	0x037C8860 ADD X10, X10, 0x10
	0x037C8864 B.NE 0x37C8850
	0x037C8868 MOVZ W2, 0xB
	0x037C886C MOV X0, X21
	0x037C8870 BL 0x1C5C788
	0x037C8874 B 0x37C8888
	0x037C8878 LDR W9, [X10]
	0x037C887C ADD W9, W9, 0xB
	0x037C8880 ADD X8, X8, W9, 0x4, SXTW
	0x037C8884 ADD X0, X8, 0x138
	0x037C8888 LDP X8, X2, [X0]
	0x037C888C MOV X0, X21
	0x037C8890 MOV X1, X31
	0x037C8894 BLR X8
	0x037C8898 LDR X21, [X19 + 0x440]
	0x037C889C CBZ X21, 0x37C8D68
	0x037C88A0 LDR X8, [X21]
	0x037C88A4 LDR X1, [X22]
	0x037C88A8 LDRH W9, [X8 + 0x12E]
	0x037C88AC CBZ X9, 0x37C88D0
	0x037C88B0 LDR X10, [X8 + 0xB0]
	0x037C88B4 ADD X10, X10, 0x8
	0x037C88B8 LDUR X11, [X10 - 0x8]
	0x037C88BC CMP X11, X1
	0x037C88C0 B.EQ 0x37C88E0
	0x037C88C4 SUBS X9, X9, 0x1
	0x037C88C8 ADD X10, X10, 0x10
	0x037C88CC B.NE 0x37C88B8
	0x037C88D0 MOVZ W2, 0xD
	0x037C88D4 MOV X0, X21
	0x037C88D8 BL 0x1C5C788
	0x037C88DC B 0x37C88F0
	0x037C88E0 LDR W9, [X10]
	0x037C88E4 ADD W9, W9, 0xD
	0x037C88E8 ADD X8, X8, W9, 0x4, SXTW
	0x037C88EC ADD X0, X8, 0x138
	0x037C88F0 LDP X8, X2, [X0]
	0x037C88F4 MOV X0, X21
	0x037C88F8 MOV X1, X31
	0x037C88FC BLR X8
	0x037C8900 LDR X21, [X19 + 0x440]
	0x037C8904 CBZ X21, 0x37C8D68
	0x037C8908 LDR X8, [X21]
	0x037C890C LDR X1, [X22]
	0x037C8910 LDRH W9, [X8 + 0x12E]
	0x037C8914 CBZ X9, 0x37C8938
	0x037C8918 LDR X10, [X8 + 0xB0]
	0x037C891C ADD X10, X10, 0x8
	0x037C8920 LDUR X11, [X10 - 0x8]
	0x037C8924 CMP X11, X1
	0x037C8928 B.EQ 0x37C8948
	0x037C892C SUBS X9, X9, 0x1
	0x037C8930 ADD X10, X10, 0x10
	0x037C8934 B.NE 0x37C8920
	0x037C8938 MOVZ W2, 0x9
	0x037C893C MOV X0, X21
	0x037C8940 BL 0x1C5C788
	0x037C8944 B 0x37C8958
	0x037C8948 LDR W9, [X10]
	0x037C894C ADD W9, W9, 0x9
	0x037C8950 ADD X8, X8, W9, 0x4, SXTW
	0x037C8954 ADD X0, X8, 0x138
	0x037C8958 LDP X8, X2, [X0]
	0x037C895C MOV X0, X21
	0x037C8960 MOV X1, X31
	0x037C8964 BLR X8
	0x037C8968 ADRP X8, 0x980000
	0x037C896C LDR X8, [X8 + 0x710]
	0x037C8970 STR X20, [X19 + 0x440]
	0x037C8974 ADRP X21, 0x980000
	0x037C8978 LDR X0, [X8]
	0x037C897C LDR X21, [X21 + 0x700]
	0x037C8980 BL 0x1C16F10
	0x037C8984 LDR X2, [X21]
	0x037C8988 MOV X1, X19
	0x037C898C MOV X3, X31
	0x037C8990 MOV X21, X0
	0x037C8994 BL 0x380780C
	0x037C8998 CBZ X20, 0x37C8D68
	0x037C899C LDR X8, [X20]
	0x037C89A0 ADRP X24, 0x980000
	0x037C89A4 ADRP X23, 0x980000
	0x037C89A8 LDR X1, [X22]
	0x037C89AC LDRH W9, [X8 + 0x12E]
	0x037C89B0 LDR X24, [X24 + 0x6E0]
	0x037C89B4 LDR X23, [X23 + 0x6F8]
	0x037C89B8 CBZ X9, 0x37C89DC
	0x037C89BC LDR X10, [X8 + 0xB0]
	0x037C89C0 ADD X10, X10, 0x8
	0x037C89C4 LDUR X11, [X10 - 0x8]
	0x037C89C8 CMP X11, X1
	0x037C89CC B.EQ 0x37C89EC
	0x037C89D0 SUBS X9, X9, 0x1
	0x037C89D4 ADD X10, X10, 0x10
	0x037C89D8 B.NE 0x37C89C4
	0x037C89DC MOVZ W2, 0x5
	0x037C89E0 MOV X0, X20
	0x037C89E4 BL 0x1C5C788
	0x037C89E8 B 0x37C89FC
	0x037C89EC LDR W9, [X10]
	0x037C89F0 ADD W9, W9, 0x5
	0x037C89F4 ADD X8, X8, W9, 0x4, SXTW
	0x037C89F8 ADD X0, X8, 0x138
	0x037C89FC LDP X8, X2, [X0]
	0x037C8A00 MOV X0, X20
	0x037C8A04 MOV X1, X21
	0x037C8A08 BLR X8
	0x037C8A0C LDR X0, [X24]
	0x037C8A10 LDR X20, [X19 + 0x440]
	0x037C8A14 BL 0x1C16F10
	0x037C8A18 LDR X2, [X23]
	0x037C8A1C MOV X1, X19
	0x037C8A20 MOV X3, X31
	0x037C8A24 MOV X21, X0
	0x037C8A28 BL 0x2A76070
	0x037C8A2C CBZ X20, 0x37C8D68
	0x037C8A30 LDR X8, [X20]
	0x037C8A34 ADRP X24, 0x92B000
	0x037C8A38 ADRP X23, 0x980000
	0x037C8A3C LDR X1, [X22]
	0x037C8A40 LDRH W9, [X8 + 0x12E]
	0x037C8A44 LDR X24, [X24 + 0xD28]
	0x037C8A48 LDR X23, [X23 + 0x6F0]
	0x037C8A4C CBZ X9, 0x37C8A70
	0x037C8A50 LDR X10, [X8 + 0xB0]
	0x037C8A54 ADD X10, X10, 0x8
	0x037C8A58 LDUR X11, [X10 - 0x8]
	0x037C8A5C CMP X11, X1
	0x037C8A60 B.EQ 0x37C8A80
	0x037C8A64 SUBS X9, X9, 0x1
	0x037C8A68 ADD X10, X10, 0x10
	0x037C8A6C B.NE 0x37C8A58
	0x037C8A70 MOVZ W2, 0xB
	0x037C8A74 MOV X0, X20
	0x037C8A78 BL 0x1C5C788
	0x037C8A7C B 0x37C8A90
	0x037C8A80 LDR W9, [X10]
	0x037C8A84 ADD W9, W9, 0xB
	0x037C8A88 ADD X8, X8, W9, 0x4, SXTW
	0x037C8A8C ADD X0, X8, 0x138
	0x037C8A90 LDP X8, X2, [X0]
	0x037C8A94 MOV X0, X20
	0x037C8A98 MOV X1, X21
	0x037C8A9C BLR X8
	0x037C8AA0 LDR X0, [X24]
	0x037C8AA4 LDR X20, [X19 + 0x440]
	0x037C8AA8 BL 0x1C16F10
	0x037C8AAC LDR X2, [X23]
	0x037C8AB0 MOV X1, X19
	0x037C8AB4 MOV X3, X31
	0x037C8AB8 MOV X21, X0
	0x037C8ABC BL 0x29818C8
	0x037C8AC0 CBZ X20, 0x37C8D68
	0x037C8AC4 LDR X8, [X20]
	0x037C8AC8 ADRP X24, 0x980000
	0x037C8ACC ADRP X23, 0x980000
	0x037C8AD0 LDR X1, [X22]
	0x037C8AD4 LDRH W9, [X8 + 0x12E]
	0x037C8AD8 LDR X24, [X24 + 0x6E8]
	0x037C8ADC LDR X23, [X23 + 0x708]
	0x037C8AE0 CBZ X9, 0x37C8B04
	0x037C8AE4 LDR X10, [X8 + 0xB0]
	0x037C8AE8 ADD X10, X10, 0x8
	0x037C8AEC LDUR X11, [X10 - 0x8]
	0x037C8AF0 CMP X11, X1
	0x037C8AF4 B.EQ 0x37C8B14
	0x037C8AF8 SUBS X9, X9, 0x1
	0x037C8AFC ADD X10, X10, 0x10
	0x037C8B00 B.NE 0x37C8AEC
	0x037C8B04 MOVZ W2, 0xD
	0x037C8B08 MOV X0, X20
	0x037C8B0C BL 0x1C5C788
	0x037C8B10 B 0x37C8B24
	0x037C8B14 LDR W9, [X10]
	0x037C8B18 ADD W9, W9, 0xD
	0x037C8B1C ADD X8, X8, W9, 0x4, SXTW
	0x037C8B20 ADD X0, X8, 0x138
	0x037C8B24 LDP X8, X2, [X0]
	0x037C8B28 MOV X0, X20
	0x037C8B2C MOV X1, X21
	0x037C8B30 BLR X8
	0x037C8B34 LDR X0, [X24]
	0x037C8B38 LDR X20, [X19 + 0x440]
	0x037C8B3C BL 0x1C16F10
	0x037C8B40 LDR X2, [X23]
	0x037C8B44 MOV X1, X19
	0x037C8B48 MOV X3, X31
	0x037C8B4C MOV X21, X0
	0x037C8B50 BL 0x2D2D3D4
	0x037C8B54 CBZ X20, 0x37C8D68
	0x037C8B58 LDR X8, [X20]
	0x037C8B5C LDR X1, [X22]
	0x037C8B60 LDRH W9, [X8 + 0x12E]
	0x037C8B64 CBZ X9, 0x37C8B88
	0x037C8B68 LDR X10, [X8 + 0xB0]
	0x037C8B6C ADD X10, X10, 0x8
	0x037C8B70 LDUR X11, [X10 - 0x8]
	0x037C8B74 CMP X11, X1
	0x037C8B78 B.EQ 0x37C8B98
	0x037C8B7C SUBS X9, X9, 0x1
	0x037C8B80 ADD X10, X10, 0x10
	0x037C8B84 B.NE 0x37C8B70
	0x037C8B88 MOVZ W2, 0x9
	0x037C8B8C MOV X0, X20
	0x037C8B90 BL 0x1C5C788
	0x037C8B94 B 0x37C8BA8
	0x037C8B98 LDR W9, [X10]
	0x037C8B9C ADD W9, W9, 0x9
	0x037C8BA0 ADD X8, X8, W9, 0x4, SXTW
	0x037C8BA4 ADD X0, X8, 0x138
	0x037C8BA8 LDP X8, X2, [X0]
	0x037C8BAC MOV X0, X20
	0x037C8BB0 MOV X1, X21
	0x037C8BB4 BLR X8
	0x037C8BB8 LDR X20, [X19 + 0x440]
	0x037C8BBC CBZ X20, 0x37C8D68
	0x037C8BC0 LDR X8, [X20]
	0x037C8BC4 LDR V8, [X19 + 0x14]
	0x037C8BC8 LDR X1, [X22]
	0x037C8BCC LDRH W9, [X8 + 0x12E]
	0x037C8BD0 CBZ X9, 0x37C8BF4
	0x037C8BD4 LDR X10, [X8 + 0xB0]
	0x037C8BD8 ADD X10, X10, 0x8
	0x037C8BDC LDUR X11, [X10 - 0x8]
	0x037C8BE0 CMP X11, X1
	0x037C8BE4 B.EQ 0x37C8C04
	0x037C8BE8 SUBS X9, X9, 0x1
	0x037C8BEC ADD X10, X10, 0x10
	0x037C8BF0 B.NE 0x37C8BDC
	0x037C8BF4 MOVZ W2, 0x12
	0x037C8BF8 MOV X0, X20
	0x037C8BFC BL 0x1C5C788
	0x037C8C00 B 0x37C8C14
	0x037C8C04 LDR W9, [X10]
	0x037C8C08 ADD W9, W9, 0x12
	0x037C8C0C ADD X8, X8, W9, 0x4, SXTW
	0x037C8C10 ADD X0, X8, 0x138
	0x037C8C14 LDP X8, X1, [X0]
	0x037C8C18 MOV X0, X20
	0x037C8C1C MOV V0.16B, V8.16B
	0x037C8C20 BLR X8
	0x037C8C24 LDR X20, [X19 + 0x440]
	0x037C8C28 CBZ X20, 0x37C8D68
	0x037C8C2C LDR X8, [X20]
	0x037C8C30 ADRP X21, 0x97E000
	0x037C8C34 LDR X1, [X22]
	0x037C8C38 LDRH W9, [X8 + 0x12E]
	0x037C8C3C LDR X21, [X21 + 0x260]
	0x037C8C40 CBZ X9, 0x37C8C64
	0x037C8C44 LDR X10, [X8 + 0xB0]
	0x037C8C48 ADD X10, X10, 0x8
	0x037C8C4C LDUR X11, [X10 - 0x8]
	0x037C8C50 CMP X11, X1
	0x037C8C54 B.EQ 0x37C8C74
	0x037C8C58 SUBS X9, X9, 0x1
	0x037C8C5C ADD X10, X10, 0x10
	0x037C8C60 B.NE 0x37C8C4C
	0x037C8C64 MOVZ W2, 0xE
	0x037C8C68 MOV X0, X20
	0x037C8C6C BL 0x1C5C788
	0x037C8C70 B 0x37C8C84
	0x037C8C74 LDR W9, [X10]
	0x037C8C78 ADD W9, W9, 0xE
	0x037C8C7C ADD X8, X8, W9, 0x4, SXTW
	0x037C8C80 ADD X0, X8, 0x138
	0x037C8C84 LDP X8, X1, [X0]
	0x037C8C88 MOV X0, X20
	0x037C8C8C BLR X8
	0x037C8C90 AND W8, W0, 0x1
	0x037C8C94 STRB W8, [X19 + 0x3B2]
	0x037C8C98 LDR X1, [X21]
	0x037C8C9C ADD X0, X19, 0x2C0
	0x037C8CA0 BL 0x28F140C
	0x037C8CA4 CMP W0, 0x0
	0x037C8CA8 B.GT 0x37C8CB4
	0x037C8CAC LDRB W8, [X19 + 0x3B1]
	0x037C8CB0 CBZ W8, 0x37C8D50
	0x037C8CB4 ADRP X8, 0x980000
	0x037C8CB8 LDR X8, [X8 + 0xC8]
	0x037C8CBC ADRP X21, 0x980000
	0x037C8CC0 LDR X20, [X19 + 0x440]
	0x037C8CC4 LDR X0, [X8]
	0x037C8CC8 LDR X21, [X21 + 0xD0]
	0x037C8CCC BL 0x1C16F10
	0x037C8CD0 LDR X2, [X21]
	0x037C8CD4 MOV X1, X19
	0x037C8CD8 MOV X3, X31
	0x037C8CDC MOV X21, X0
	0x037C8CE0 BL 0x2984034
	0x037C8CE4 CBZ X20, 0x37C8D68
	0x037C8CE8 LDR X8, [X20]
	0x037C8CEC LDR X1, [X22]
	0x037C8CF0 LDRH W9, [X8 + 0x12E]
	0x037C8CF4 CBZ X9, 0x37C8D18
	0x037C8CF8 LDR X10, [X8 + 0xB0]
	0x037C8CFC ADD X10, X10, 0x8
	0x037C8D00 LDUR X11, [X10 - 0x8]
	0x037C8D04 CMP X11, X1
	0x037C8D08 B.EQ 0x37C8D28
	0x037C8D0C SUBS X9, X9, 0x1
	0x037C8D10 ADD X10, X10, 0x10
	0x037C8D14 B.NE 0x37C8D00
	0x037C8D18 MOVZ W2, 0x7
	0x037C8D1C MOV X0, X20
	0x037C8D20 BL 0x1C5C788
	0x037C8D24 B 0x37C8D38
	0x037C8D28 LDR W9, [X10]
	0x037C8D2C ADD W9, W9, 0x7
	0x037C8D30 ADD X8, X8, W9, 0x4, SXTW
	0x037C8D34 ADD X0, X8, 0x138
	0x037C8D38 LDP X8, X2, [X0]
	0x037C8D3C MOV X0, X20
	0x037C8D40 MOV X1, X21
	0x037C8D44 BLR X8
	0x037C8D48 MOVZ W8, 0x1
	0x037C8D4C STRB W8, [X19 + 0x3B0]
	0x037C8D50 LDP X20, X19, [X31 + 0x30]
	0x037C8D54 LDP X22, X21, [X31 + 0x20]
	0x037C8D58 LDP X24, X23, [X31 + 0x10]
	0x037C8D5C LDR X30, [X31 + 0x8]
	0x037C8D60 LDR V8, [X31], #0x40
	0x037C8D64 RET
	0x037C8D68 BL 0x1C16F20
	0x037C8D6C SUB X31, X31, 0xB0
	0x037C8D70 STR X30, [X31 + 0x70]
	0x037C8D74 STP X24, X23, [X31 + 0x80]
	0x037C8D78 STP X22, X21, [X31 + 0x90]
	0x037C8D7C STP X20, X19, [X31 + 0xA0]
	0x037C8D80 ADRP X21, 0xC19000
	0x037C8D84 ADRP X20, 0x953000
	0x037C8D88 LDRB W8, [X21 + 0x1F2]
	0x037C8D8C LDR X20, [X20 + 0xDC0]
	0x037C8D90 MOV X19, X0
	0x037C8D94 TBNZ X8, 0x0, 0x37C8DF4
	0x037C8D98 ADRP X0, 0x953000
	0x037C8D9C LDR X0, [X0 + 0xED0]
	0x037C8DA0 BL 0x1C16CF4
	0x037C8DA4 ADRP X0, 0x953000
	0x037C8DA8 LDR X0, [X0 + 0xC28]
	0x037C8DAC BL 0x1C16CF4
	0x037C8DB0 ADRP X0, 0x953000
	0x037C8DB4 LDR X0, [X0 + 0xDC0]
	0x037C8DB8 BL 0x1C16CF4
	0x037C8DBC ADRP X0, 0x953000
	0x037C8DC0 LDR X0, [X0 + 0xC30]
	0x037C8DC4 BL 0x1C16CF4
	0x037C8DC8 ADRP X0, 0x953000
	0x037C8DCC LDR X0, [X0 + 0xC40]
	0x037C8DD0 BL 0x1C16CF4
	0x037C8DD4 ADRP X0, 0x953000
	0x037C8DD8 LDR X0, [X0 + 0xEC8]
	0x037C8DDC BL 0x1C16CF4
	0x037C8DE0 ADRP X0, 0x956000
	0x037C8DE4 LDR X0, [X0 + 0xFE8]
	0x037C8DE8 BL 0x1C16CF4
	0x037C8DEC MOVZ W8, 0x1
	0x037C8DF0 STRB W8, [X21 + 0x1F2]
	0x037C8DF4 LDUR V0, [X19 + 0x18]
	0x037C8DF8 LDUR V1, [X19 + 0x48]
	0x037C8DFC LDUR V2, [X19 + 0x38]
	0x037C8E00 LDUR V3, [X19 + 0x28]
	0x037C8E04 LDR X0, [X20]
	0x037C8E08 ADRP X24, 0x953000
	0x037C8E0C STP V2, V1, [X31 + 0x50]
	0x037C8E10 STP V0, V3, [X31 + 0x30]
	0x037C8E14 ADRP X23, 0x953000
	0x037C8E18 ADRP X22, 0x953000
	0x037C8E1C ADRP X21, 0x953000
	0x037C8E20 LDR W8, [X0 + 0xE0]
	0x037C8E24 LDR X24, [X24 + 0xC40]
	0x037C8E28 LDR X23, [X23 + 0xC30]
	0x037C8E2C LDR X22, [X22 + 0xC28]
	0x037C8E30 LDR X21, [X21 + 0xEC8]
	0x037C8E34 CBNZ W8, 0x37C8E40
	0x037C8E38 BL 0x1C16DFC
	0x037C8E3C LDR X0, [X20]
	0x037C8E40 LDR X8, [X0 + 0xB8]
	0x037C8E44 LDP V1, V0, [X31 + 0x50]
	0x037C8E48 LDP V3, V2, [X31 + 0x30]
	0x037C8E4C STP V1, V0, [X8 + 0x30]
	0x037C8E50 STP V3, V2, [X8 + 0x10]
	0x037C8E54 LDR X8, [X24]
	0x037C8E58 LDR X9, [X19 + 0x58]
	0x037C8E5C LDR X8, [X8 + 0xB8]
	0x037C8E60 STR X9, [X8]
	0x037C8E64 LDR X8, [X23]
	0x037C8E68 LDR X9, [X19 + 0x60]
	0x037C8E6C LDR X8, [X8 + 0xB8]
	0x037C8E70 STR X9, [X8]
	0x037C8E74 LDR X8, [X22]
	0x037C8E78 LDR X9, [X19 + 0x68]
	0x037C8E7C LDR X8, [X8 + 0xB8]
	0x037C8E80 STR X9, [X8]
	0x037C8E84 LDR X8, [X21]
	0x037C8E88 LDR X20, [X19 + 0x440]
	0x037C8E8C LDR X8, [X8 + 0xB8]
	0x037C8E90 STR X20, [X8]
	0x037C8E94 CBZ X20, 0x37C8F78
	0x037C8E98 ADRP X10, 0x953000
	0x037C8E9C LDR X8, [X20]
	0x037C8EA0 LDR X10, [X10 + 0xED0]
	0x037C8EA4 ADRP X22, 0x956000
	0x037C8EA8 LDRH W9, [X8 + 0x12E]
	0x037C8EAC LDR X1, [X10]
	0x037C8EB0 LDR X22, [X22 + 0xFE8]
	0x037C8EB4 CBZ X9, 0x37C8ED8
	0x037C8EB8 LDR X10, [X8 + 0xB0]
	0x037C8EBC ADD X10, X10, 0x8
	0x037C8EC0 LDUR X11, [X10 - 0x8]
	0x037C8EC4 CMP X11, X1
	0x037C8EC8 B.EQ 0x37C8EE8
	0x037C8ECC SUBS X9, X9, 0x1
	0x037C8ED0 ADD X10, X10, 0x10
	0x037C8ED4 B.NE 0x37C8EC0
	0x037C8ED8 MOVZ W2, 0x16
	0x037C8EDC MOV X0, X20
	0x037C8EE0 BL 0x1C5C788
	0x037C8EE4 B 0x37C8EF8
	0x037C8EE8 LDR W9, [X10]
	0x037C8EEC ADD W9, W9, 0x16
	0x037C8EF0 ADD X8, X8, W9, 0x4, SXTW
	0x037C8EF4 ADD X0, X8, 0x138
	0x037C8EF8 LDP X8, X1, [X0]
	0x037C8EFC MOV X0, X20
	0x037C8F00 BLR X8
	0x037C8F04 LDR X8, [X21]
	0x037C8F08 MOV X0, X31
	0x037C8F0C MOV X1, X31
	0x037C8F10 MOV X2, X31
	0x037C8F14 LDR X8, [X8 + 0xB8]
	0x037C8F18 STR D0, [X8 + 0x8]
	0x037C8F1C BL 0x3807C14
	0x037C8F20 LDP V1, V0, [X19 + 0xC0]
	0x037C8F24 LDR V2, [X19 + 0xB]
	0x037C8F28 ADD X0, X31, 0x0
	0x037C8F2C MOVZ W1, 0x1
	0x037C8F30 MOV X2, X31
	0x037C8F34 STP V1, V0, [X31 + 0x10]
	0x037C8F38 STR V2, [X31]
	0x037C8F3C BL 0x380C54C
	0x037C8F40 LDR X8, [X22]
	0x037C8F44 LDR X9, [X19 + 0xB8]
	0x037C8F48 LDP X24, X23, [X31 + 0x80]
	0x037C8F4C LDR X30, [X31 + 0x70]
	0x037C8F50 LDR X8, [X8 + 0xB8]
	0x037C8F54 STR X9, [X8]
	0x037C8F58 LDR X8, [X22]
	0x037C8F5C LDR V0, [X19 + 0xC]
	0x037C8F60 LDP X20, X19, [X31 + 0xA0]
	0x037C8F64 LDP X22, X21, [X31 + 0x90]
	0x037C8F68 LDR X8, [X8 + 0xB8]
	0x037C8F6C STUR V0, [X8 + 0x8]
	0x037C8F70 ADD X31, X31, 0xB0
	0x037C8F74 RET
	0x037C8F78 BL 0x1C16F20
	0x037C8F7C STP X30, X21, [X31 - 0x20]!
	0x037C8F80 STP X20, X19, [X31 + 0x10]
	0x037C8F84 ADRP X20, 0xC19000
	0x037C8F88 LDRB W8, [X20 + 0x1EF]
	0x037C8F8C MOV X19, X0
	0x037C8F90 TBNZ X8, 0x0, 0x37C8FA8
	0x037C8F94 ADRP X0, 0x92B000
	0x037C8F98 LDR X0, [X0 + 0x598]
	0x037C8F9C BL 0x1C16CF4
	0x037C8FA0 MOVZ W8, 0x1
	0x037C8FA4 STRB W8, [X20 + 0x1EF]
	0x037C8FA8 LDR W8, [X19 + 0x70]
	0x037C8FAC CMP W8, 0x1
	0x037C8FB0 B.LT 0x37C8FF0
	0x037C8FB4 MOV X20, X31
	0x037C8FB8 LDR X8, [X19 + 0x78]
	0x037C8FBC CBZ X8, 0x37C9080
	0x037C8FC0 LDR W9, [X8 + 0x18]
	0x037C8FC4 CMP W20, W9
	0x037C8FC8 B.CS 0x37C9084
	0x037C8FCC ADD X8, X8, X20, 0x3, LSL
	0x037C8FD0 LDR X0, [X8 + 0x20]
	0x037C8FD4 CBZ X0, 0x37C9080
	0x037C8FD8 MOV X1, X31
	0x037C8FDC BL 0x377B5B0
	0x037C8FE0 LDR W8, [X19 + 0x70]
	0x037C8FE4 ADD X20, X20, 0x1
	0x037C8FE8 CMP W20, W8
	0x037C8FEC B.LT 0x37C8FB8
	0x037C8FF0 ADRP X21, 0x92B000
	0x037C8FF4 LDR X21, [X21 + 0x598]
	0x037C8FF8 ADD X0, X19, 0xB0
	0x037C8FFC MOV X1, X31
	0x037C9000 BL 0x380C754
	0x037C9004 MOV X0, X19
	0x037C9008 BL 0x37C9088
	0x037C900C LDR X0, [X21]
	0x037C9010 LDR X20, [X19 + 0x480]
	0x037C9014 LDR W8, [X0 + 0xE0]
	0x037C9018 CBNZ W8, 0x37C9020
	0x037C901C BL 0x1C16DFC
	0x037C9020 MOV X0, X20
	0x037C9024 MOV X1, X31
	0x037C9028 MOV X2, X31
	0x037C902C BL 0x3C354F8
	0x037C9030 TBZ X0, 0x0, 0x37C9074
	0x037C9034 LDR X0, [X19 + 0x480]
	0x037C9038 CBZ X0, 0x37C9080
	0x037C903C MOV X1, X31
	0x037C9040 BL 0x3C396B0
	0x037C9044 CMP W0, 0x3D
	0x037C9048 B.NE 0x37C9074
	0x037C904C LDR X0, [X21]
	0x037C9050 LDR X19, [X19 + 0x480]
	0x037C9054 LDR W8, [X0 + 0xE0]
	0x037C9058 CBNZ W8, 0x37C9060
	0x037C905C BL 0x1C16DFC
	0x037C9060 MOV X0, X19
	0x037C9064 LDP X20, X19, [X31 + 0x10]
	0x037C9068 MOV X1, X31
	0x037C906C LDP X30, X21, [X31], #0x20
	0x037C9070 B 0x3C39564
	0x037C9074 LDP X20, X19, [X31 + 0x10]
	0x037C9078 LDP X30, X21, [X31], #0x20
	0x037C907C RET
	0x037C9080 BL 0x1C16F20
	0x037C9084 BL 0x1C16F28
	0x037C9088 STP X30, X21, [X31 - 0x20]!
	0x037C908C STP X20, X19, [X31 + 0x10]
	0x037C9090 ADRP X21, 0xC18000
	0x037C9094 ADRP X20, 0x952000
	0x037C9098 LDRB W8, [X21 + 0x1F3]
	0x037C909C LDR X20, [X20 + 0xDC0]
	0x037C90A0 MOV X19, X0
	0x037C90A4 TBNZ X8, 0x0, 0x37C90F8
	0x037C90A8 ADRP X0, 0x952000
	0x037C90AC LDR X0, [X0 + 0xED0]
	0x037C90B0 BL 0x1C16CF4
	0x037C90B4 ADRP X0, 0x952000
	0x037C90B8 LDR X0, [X0 + 0xC28]
	0x037C90BC BL 0x1C16CF4
	0x037C90C0 ADRP X0, 0x952000
	0x037C90C4 LDR X0, [X0 + 0xDC0]
	0x037C90C8 BL 0x1C16CF4
	0x037C90CC ADRP X0, 0x952000
	0x037C90D0 LDR X0, [X0 + 0xC30]
	0x037C90D4 BL 0x1C16CF4
	0x037C90D8 ADRP X0, 0x952000
	0x037C90DC LDR X0, [X0 + 0xC40]
	0x037C90E0 BL 0x1C16CF4
	0x037C90E4 ADRP X0, 0x952000
	0x037C90E8 LDR X0, [X0 + 0xEC8]
	0x037C90EC BL 0x1C16CF4
	0x037C90F0 MOVZ W8, 0x1
	0x037C90F4 STRB W8, [X21 + 0x1F3]
	0x037C90F8 LDR X0, [X20]
	0x037C90FC LDR W8, [X0 + 0xE0]
	0x037C9100 CBNZ W8, 0x37C910C
	0x037C9104 BL 0x1C16DFC
	0x037C9108 LDR X0, [X20]
	0x037C910C LDR X8, [X0 + 0xB8]
	0x037C9110 LDR X10, [X19 + 0x30]
	0x037C9114 ADRP X21, 0x952000
	0x037C9118 LDR X9, [X8 + 0x28]
	0x037C911C LDR X21, [X21 + 0xC40]
	0x037C9120 CMP X9, X10
	0x037C9124 B.NE 0x37C9148
	0x037C9128 LDR W9, [X0 + 0xE0]
	0x037C912C CBNZ W9, 0x37C913C
	0x037C9130 BL 0x1C16DFC
	0x037C9134 LDR X8, [X20]
	0x037C9138 LDR X8, [X8 + 0xB8]
	0x037C913C MOVI V0.2D, 0x0
	0x037C9140 STP V0, V0, [X8 + 0x30]
	0x037C9144 STP V0, V0, [X8 + 0x10]
	0x037C9148 LDR X8, [X21]
	0x037C914C LDR X10, [X19 + 0x58]
	0x037C9150 LDR X8, [X8 + 0xB8]
	0x037C9154 LDR X9, [X8]
	0x037C9158 CMP X9, X10
	0x037C915C ADRP X9, 0x952000
	0x037C9160 LDR X9, [X9 + 0xC30]
	0x037C9164 B.NE 0x37C916C
	0x037C9168 STR X31, [X8]
	0x037C916C LDR X8, [X9]
	0x037C9170 LDR X10, [X19 + 0x60]
	0x037C9174 LDR X8, [X8 + 0xB8]
	0x037C9178 LDR X9, [X8]
	0x037C917C CMP X9, X10
	0x037C9180 ADRP X9, 0x952000
	0x037C9184 LDR X9, [X9 + 0xC28]
	0x037C9188 B.NE 0x37C9190
	0x037C918C STR X31, [X8]
	0x037C9190 LDR X8, [X9]
	0x037C9194 LDR X10, [X19 + 0x68]
	0x037C9198 LDR X8, [X8 + 0xB8]
	0x037C919C LDR X9, [X8]
	0x037C91A0 CMP X9, X10
	0x037C91A4 B.NE 0x37C91AC
	0x037C91A8 STR X31, [X8]
	0x037C91AC LDR X0, [X20]
	0x037C91B0 LDR W8, [X0 + 0xE0]
	0x037C91B4 CBNZ W8, 0x37C91C0
	0x037C91B8 BL 0x1C16DFC
	0x037C91BC LDR X0, [X20]
	0x037C91C0 LDR X8, [X0 + 0xB8]
	0x037C91C4 STR X31, [X8 + 0x50]
	0x037C91C8 LDR X8, [X0 + 0xB8]
	0x037C91CC STR W31, [X8 + 0x58]
	0x037C91D0 LDR X20, [X19 + 0x440]
	0x037C91D4 CBZ X20, 0x37C9404
	0x037C91D8 ADRP X21, 0x952000
	0x037C91DC LDR X8, [X20]
	0x037C91E0 LDR X21, [X21 + 0xED0]
	0x037C91E4 LDRH W9, [X8 + 0x12E]
	0x037C91E8 LDR X1, [X21]
	0x037C91EC CBZ X9, 0x37C9210
	0x037C91F0 LDR X10, [X8 + 0xB0]
	0x037C91F4 ADD X10, X10, 0x8
	0x037C91F8 LDUR X11, [X10 - 0x8]
	0x037C91FC CMP X11, X1
	0x037C9200 B.EQ 0x37C9220
	0x037C9204 SUBS X9, X9, 0x1
	0x037C9208 ADD X10, X10, 0x10
	0x037C920C B.NE 0x37C91F8
	0x037C9210 MOVZ W2, 0x5
	0x037C9214 MOV X0, X20
	0x037C9218 BL 0x1C5C788
	0x037C921C B 0x37C9230
	0x037C9220 LDR W9, [X10]
	0x037C9224 ADD W9, W9, 0x5
	0x037C9228 ADD X8, X8, W9, 0x4, SXTW
	0x037C922C ADD X0, X8, 0x138
	0x037C9230 LDP X8, X2, [X0]
	0x037C9234 MOV X0, X20
	0x037C9238 MOV X1, X31
	0x037C923C BLR X8
	0x037C9240 LDR X20, [X19 + 0x440]
	0x037C9244 CBZ X20, 0x37C9410
	0x037C9248 LDR X8, [X20]
	0x037C924C LDR X1, [X21]
	0x037C9250 LDRH W9, [X8 + 0x12E]
	0x037C9254 CBZ X9, 0x37C9278
	0x037C9258 LDR X10, [X8 + 0xB0]
	0x037C925C ADD X10, X10, 0x8
	0x037C9260 LDUR X11, [X10 - 0x8]
	0x037C9264 CMP X11, X1
	0x037C9268 B.EQ 0x37C9288
	0x037C926C SUBS X9, X9, 0x1
	0x037C9270 ADD X10, X10, 0x10
	0x037C9274 B.NE 0x37C9260
	0x037C9278 MOVZ W2, 0xB
	0x037C927C MOV X0, X20
	0x037C9280 BL 0x1C5C788
	0x037C9284 B 0x37C9298
	0x037C9288 LDR W9, [X10]
	0x037C928C ADD W9, W9, 0xB
	0x037C9290 ADD X8, X8, W9, 0x4, SXTW
	0x037C9294 ADD X0, X8, 0x138
	0x037C9298 LDP X8, X2, [X0]
	0x037C929C MOV X0, X20
	0x037C92A0 MOV X1, X31
	0x037C92A4 BLR X8
	0x037C92A8 LDR X20, [X19 + 0x440]
	0x037C92AC CBZ X20, 0x37C9410
	0x037C92B0 LDR X8, [X20]
	0x037C92B4 LDR X1, [X21]
	0x037C92B8 LDRH W9, [X8 + 0x12E]
	0x037C92BC CBZ X9, 0x37C92E0
	0x037C92C0 LDR X10, [X8 + 0xB0]
	0x037C92C4 ADD X10, X10, 0x8
	0x037C92C8 LDUR X11, [X10 - 0x8]
	0x037C92CC CMP X11, X1
	0x037C92D0 B.EQ 0x37C92F0
	0x037C92D4 SUBS X9, X9, 0x1
	0x037C92D8 ADD X10, X10, 0x10
	0x037C92DC B.NE 0x37C92C8
	0x037C92E0 MOVZ W2, 0x7
	0x037C92E4 MOV X0, X20
	0x037C92E8 BL 0x1C5C788
	0x037C92EC B 0x37C9300
	0x037C92F0 LDR W9, [X10]
	0x037C92F4 ADD W9, W9, 0x7
	0x037C92F8 ADD X8, X8, W9, 0x4, SXTW
	0x037C92FC ADD X0, X8, 0x138
	0x037C9300 LDP X8, X2, [X0]
	0x037C9304 MOV X0, X20
	0x037C9308 MOV X1, X31
	0x037C930C BLR X8
	0x037C9310 LDR X20, [X19 + 0x440]
	0x037C9314 CBZ X20, 0x37C9410
	0x037C9318 LDR X8, [X20]
	0x037C931C LDR X1, [X21]
	0x037C9320 LDRH W9, [X8 + 0x12E]
	0x037C9324 CBZ X9, 0x37C9348
	0x037C9328 LDR X10, [X8 + 0xB0]
	0x037C932C ADD X10, X10, 0x8
	0x037C9330 LDUR X11, [X10 - 0x8]
	0x037C9334 CMP X11, X1
	0x037C9338 B.EQ 0x37C9358
	0x037C933C SUBS X9, X9, 0x1
	0x037C9340 ADD X10, X10, 0x10
	0x037C9344 B.NE 0x37C9330
	0x037C9348 MOVZ W2, 0xD
	0x037C934C MOV X0, X20
	0x037C9350 BL 0x1C5C788
	0x037C9354 B 0x37C9368
	0x037C9358 LDR W9, [X10]
	0x037C935C ADD W9, W9, 0xD
	0x037C9360 ADD X8, X8, W9, 0x4, SXTW
	0x037C9364 ADD X0, X8, 0x138
	0x037C9368 LDP X8, X2, [X0]
	0x037C936C MOV X0, X20
	0x037C9370 MOV X1, X31
	0x037C9374 BLR X8
	0x037C9378 LDR X20, [X19 + 0x440]
	0x037C937C CBZ X20, 0x37C9410
	0x037C9380 LDR X8, [X20]
	0x037C9384 LDR X1, [X21]
	0x037C9388 ADRP X21, 0x952000
	0x037C938C LDRH W9, [X8 + 0x12E]
	0x037C9390 LDR X21, [X21 + 0xEC8]
	0x037C9394 CBZ X9, 0x37C93B8
	0x037C9398 LDR X10, [X8 + 0xB0]
	0x037C939C ADD X10, X10, 0x8
	0x037C93A0 LDUR X11, [X10 - 0x8]
	0x037C93A4 CMP X11, X1
	0x037C93A8 B.EQ 0x37C93C8
	0x037C93AC SUBS X9, X9, 0x1
	0x037C93B0 ADD X10, X10, 0x10
	0x037C93B4 B.NE 0x37C93A0
	0x037C93B8 MOVZ W2, 0x9
	0x037C93BC MOV X0, X20
	0x037C93C0 BL 0x1C5C788
	0x037C93C4 B 0x37C93D8
	0x037C93C8 LDR W9, [X10]
	0x037C93CC ADD W9, W9, 0x9
	0x037C93D0 ADD X8, X8, W9, 0x4, SXTW
	0x037C93D4 ADD X0, X8, 0x138
	0x037C93D8 LDP X8, X2, [X0]
	0x037C93DC MOV X0, X20
	0x037C93E0 MOV X1, X31
	0x037C93E4 BLR X8
	0x037C93E8 LDR X8, [X21]
	0x037C93EC LDR X10, [X19 + 0x440]
	0x037C93F0 LDR X8, [X8 + 0xB8]
	0x037C93F4 LDR X9, [X8]
	0x037C93F8 CMP X9, X10
	0x037C93FC B.NE 0x37C9404
	0x037C9400 STR X31, [X8]
	0x037C9404 LDP X20, X19, [X31 + 0x10]
	0x037C9408 LDP X30, X21, [X31], #0x20
	0x037C940C RET
	0x037C9410 BL 0x1C16F20
	0x037C9414 SUB X31, X31, 0x30
	0x037C9418 STP X30, X21, [X31 + 0x10]
	0x037C941C STP X20, X19, [X31 + 0x20]
	0x037C9420 ADRP X20, 0xC18000
	0x037C9424 LDRB W8, [X20 + 0x1F5]
	0x037C9428 MOV X19, X0
	0x037C942C TBNZ X8, 0x0, 0x37C9450
	0x037C9430 ADRP X0, 0x952000
	0x037C9434 LDR X0, [X0 + 0xD40]
	0x037C9438 BL 0x1C16CF4
	0x037C943C ADRP X0, 0x952000
	0x037C9440 LDR X0, [X0 + 0xD48]
	0x037C9444 BL 0x1C16CF4
	0x037C9448 MOVZ W8, 0x1
	0x037C944C STRB W8, [X20 + 0x1F5]
	0x037C9450 CBZ X19, 0x37C94B0
	0x037C9454 MOV X0, X19
	0x037C9458 MOV X1, X31
	0x037C945C STR X31, [X19 + 0x30]
	0x037C9460 BL 0x37720C4
	0x037C9464 UBFM X20, X1, 0x20, 0x3F
	0x037C9468 CMP W20, 0x1
	0x037C946C STP X0, X1, [X31]
	0x037C9470 B.LT 0x37C94A0
	0x037C9474 ADRP X21, 0x952000
	0x037C9478 LDR X21, [X21 + 0xD48]
	0x037C947C MOV W19, W31
	0x037C9480 LDR X2, [X21]
	0x037C9484 ADD X0, X31, 0x0
	0x037C9488 MOV W1, W19
	0x037C948C BL 0x24FDB3C
	0x037C9490 BL 0x37C9414
	0x037C9494 ADD W19, W19, 0x1
	0x037C9498 CMP W20, W19
	0x037C949C B.NE 0x37C9480
	0x037C94A0 LDP X20, X19, [X31 + 0x20]
	0x037C94A4 LDP X30, X21, [X31 + 0x10]
	0x037C94A8 ADD X31, X31, 0x30
	0x037C94AC RET
	0x037C94B0 BL 0x1C16F20
	0x037C94B4 SUB X31, X31, 0x80
	0x037C94B8 STR X30, [X31 + 0x20]
	0x037C94BC STP X28, X27, [X31 + 0x30]
	0x037C94C0 STP X26, X25, [X31 + 0x40]
	0x037C94C4 STP X24, X23, [X31 + 0x50]
	0x037C94C8 STP X22, X21, [X31 + 0x60]
	0x037C94CC STP X20, X19, [X31 + 0x70]
	0x037C94D0 ADRP X19, 0xC18000
	0x037C94D4 LDRB W8, [X19 + 0x1F8]
	0x037C94D8 MOV X20, X1
	0x037C94DC MOV X21, X0
	0x037C94E0 TBNZ X8, 0x0, 0x37C9510
	0x037C94E4 ADRP X0, 0x952000
	0x037C94E8 LDR X0, [X0 + 0xD18]
	0x037C94EC BL 0x1C16CF4
	0x037C94F0 ADRP X0, 0x952000
	0x037C94F4 LDR X0, [X0 + 0xD40]
	0x037C94F8 BL 0x1C16CF4
	0x037C94FC ADRP X0, 0x952000
	0x037C9500 LDR X0, [X0 + 0xD48]
	0x037C9504 BL 0x1C16CF4
	0x037C9508 MOVZ W8, 0x1
	0x037C950C STRB W8, [X19 + 0x1F8]
	0x037C9510 STP X31, X31, [X31]
	0x037C9514 CBZ X20, 0x37C9660
	0x037C9518 MOV X0, X20
	0x037C951C MOV X1, X31
	0x037C9520 BL 0x377B23C
	0x037C9524 TBZ X0, 0x0, 0x37C9640
	0x037C9528 MOV X0, X20
	0x037C952C MOV X1, X31
	0x037C9530 BL 0x377AAE8
	0x037C9534 STP X0, X1, [X31 + 0x10]
	0x037C9538 LDR X19, [X21 + 0xB8]
	0x037C953C UBFM X26, X1, 0x20, 0x3F
	0x037C9540 CMP W26, 0x1
	0x037C9544 B.LT 0x37C95B8
	0x037C9548 ADRP X27, 0x952000
	0x037C954C ADRP X28, 0x952000
	0x037C9550 LDR X27, [X27 + 0xD48]
	0x037C9554 LDR X28, [X28 + 0xD18]
	0x037C9558 MOV W22, W31
	0x037C955C LDR X2, [X27]
	0x037C9560 ADD X0, X31, 0x10
	0x037C9564 MOV W1, W22
	0x037C9568 BL 0x24FDB3C
	0x037C956C CBZ X0, 0x37C9660
	0x037C9570 MOV X1, X31
	0x037C9574 MOV X23, X0
	0x037C9578 BL 0x37734CC
	0x037C957C TBZ X0, 0x0, 0x37C95AC
	0x037C9580 LDR X0, [X28]
	0x037C9584 LDP X25, X24, [X23 + 0xA8]
	0x037C9588 LDR W8, [X0 + 0xE0]
	0x037C958C CBNZ W8, 0x37C9594
	0x037C9590 BL 0x1C16DFC
	0x037C9594 ADD X0, X23, 0x10
	0x037C9598 MOV X1, X19
	0x037C959C MOV X2, X25
	0x037C95A0 MOV X3, X24
	0x037C95A4 MOV X4, X31
	0x037C95A8 BL 0x380BB04
	0x037C95AC ADD W22, W22, 0x1
	0x037C95B0 CMP W26, W22
	0x037C95B4 B.NE 0x37C955C
	0x037C95B8 LDR V0, [X20 + 0x1]
	0x037C95BC ADD X21, X21, 0xD8
	0x037C95C0 MOV X0, X21
	0x037C95C4 MOV X1, X31
	0x037C95C8 STR V0, [X31]
	0x037C95CC LDR W20, [X20 + 0xE8]
	0x037C95D0 BL 0x380CCD0
	0x037C95D4 TBZ X0, 0x0, 0x37C9640
	0x037C95D8 MOV X0, X21
	0x037C95DC MOV W1, W20
	0x037C95E0 MOV X2, X31
	0x037C95E4 BL 0x380C4D0
	0x037C95E8 ADRP X8, 0x952000
	0x037C95EC LDR X8, [X8 + 0xD18]
	0x037C95F0 MOV X22, X0
	0x037C95F4 LDR X8, [X8]
	0x037C95F8 LDR W9, [X8 + 0xE0]
	0x037C95FC CBNZ W9, 0x37C9608
	0x037C9600 MOV X0, X8
	0x037C9604 BL 0x1C16DFC
	0x037C9608 ADD X0, X31, 0x0
	0x037C960C MOV X1, X22
	0x037C9610 MOV X2, X19
	0x037C9614 MOV X3, X31
	0x037C9618 BL 0x380BE98
	0x037C961C MOV X0, X21
	0x037C9620 MOV W1, W20
	0x037C9624 MOV X2, X31
	0x037C9628 BL 0x380C538
	0x037C962C MOV X1, X0
	0x037C9630 ADD X0, X31, 0x0
	0x037C9634 MOV X2, X19
	0x037C9638 MOV X3, X31
	0x037C963C BL 0x380BE98
	0x037C9640 LDP X20, X19, [X31 + 0x70]
	0x037C9644 LDP X22, X21, [X31 + 0x60]
	0x037C9648 LDP X24, X23, [X31 + 0x50]
	0x037C964C LDP X26, X25, [X31 + 0x40]
	0x037C9650 LDP X28, X27, [X31 + 0x30]
	0x037C9654 LDR X30, [X31 + 0x20]
	0x037C9658 ADD X31, X31, 0x80
	0x037C965C RET
	0x037C9660 BL 0x1C16F20
	0x037C9664 SUB X31, X31, 0x140
	0x037C9668 STR X29, [X31 + 0x100]
	0x037C966C STP X30, X23, [X31 + 0x110]
	0x037C9670 STP X22, X21, [X31 + 0x120]
	0x037C9674 STP X20, X19, [X31 + 0x130]
	0x037C9678 ADRP X21, 0xC18000
	0x037C967C LDRB W8, [X21 + 0x1FA]
	0x037C9680 MOV X22, X2
	0x037C9684 MOV W19, W1
	0x037C9688 MOV X20, X0
	0x037C968C TBNZ X8, 0x0, 0x37C96C8
	0x037C9690 ADRP X0, 0x97F000
	0x037C9694 LDR X0, [X0 + 0x718]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0xC1A000
	015 Move X25, 0x981000
	016 Move X20, 0x981000
	017 Move X21, 0x92C000
	018 Move W8, [X23+496]
	019 Move X25, [X25+832]
	020 Move X20, [X20+840]
	021 Move X21, [X21+2416]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {443}
	027 Move X0, 0x981000
	028 Move X0, [X0+848]
	029 Call 0x1C17CF4
	030 Move X0, 0x981000
	031 Move X0, [X0+856]
	032 Call 0x1C17CF4
	033 Move X0, 0x981000
	034 Move X0, [X0+864]
	035 Call 0x1C17CF4
	036 Move X0, 0x92C000
	037 Move X0, [X0+2416]
	038 Call 0x1C17CF4
	039 Move X0, 0x981000
	040 Move X0, [X0+872]
	041 Call 0x1C17CF4
	042 Move X0, 0x981000
	043 Move X0, [X0+880]
	044 Call 0x1C17CF4
	045 Move X0, 0x981000
	046 Move X0, [X0+888]
	047 Call 0x1C17CF4
	048 Move X0, 0x981000
	049 Move X0, [X0+896]
	050 Call 0x1C17CF4
	051 Move X0, 0x981000
	052 Move X0, [X0+904]
	053 Call 0x1C17CF4
	054 Move X0, 0x981000
	055 Move X0, [X0+912]
	056 Call 0x1C17CF4
	057 Move X0, 0x981000
	058 Move X0, [X0+920]
	059 Call 0x1C17CF4
	060 Move X0, 0x981000
	061 Move X0, [X0+928]
	062 Call 0x1C17CF4
	063 Move X0, 0x981000
	064 Move X0, [X0+936]
	065 Call 0x1C17CF4
	066 Move X0, 0x981000
	067 Move X0, [X0+944]
	068 Call 0x1C17CF4
	069 Move X0, 0x981000
	070 Move X0, [X0+952]
	071 Call 0x1C17CF4
	072 Move X0, 0x981000
	073 Move X0, [X0+840]
	074 Call 0x1C17CF4
	075 Move X0, 0x981000
	076 Move X0, [X0+832]
	077 Call 0x1C17CF4
	078 Move X0, 0x981000
	079 Move X0, [X0+960]
	080 Call 0x1C17CF4
	081 Move X0, 0x981000
	082 Move X0, [X0+968]
	083 Call 0x1C17CF4
	084 Move X0, 0x981000
	085 Move X0, [X0+976]
	086 Call 0x1C17CF4
	087 Move X0, 0x981000
	088 Move X0, [X0+984]
	089 Call 0x1C17CF4
	090 Move X0, 0x981000
	091 Move X0, [X0+992]
	092 Call 0x1C17CF4
	093 Move X0, 0x981000
	094 Move X0, [X0+1000]
	095 Call 0x1C17CF4
	096 Move X0, 0x981000
	097 Move X0, [X0+1008]
	098 Call 0x1C17CF4
	099 Move X0, 0x981000
	100 Move X0, [X0+1016]
	101 Call 0x1C17CF4
	102 Move X0, 0x981000
	103 Move X0, [X0+1024]
	104 Call 0x1C17CF4
	105 Move X0, 0x981000
	106 Move X0, [X0+1032]
	107 Call 0x1C17CF4
	108 Move X0, 0x981000
	109 Move X0, [X0+1040]
	110 Call 0x1C17CF4
	111 Move X0, 0x981000
	112 Move X0, [X0+1048]
	113 Call 0x1C17CF4
	114 Move X0, 0x981000
	115 Move X0, [X0+1056]
	116 Call 0x1C17CF4
	117 Move X0, 0x981000
	118 Move X0, [X0+1064]
	119 Call 0x1C17CF4
	120 Move X0, 0x981000
	121 Move X0, [X0+1072]
	122 Call 0x1C17CF4
	123 Move X0, 0x981000
	124 Move X0, [X0+1080]
	125 Call 0x1C17CF4
	126 Move X0, 0x981000
	127 Move X0, [X0+1088]
	128 Call 0x1C17CF4
	129 Move X0, 0x981000
	130 Move X0, [X0+1096]
	131 Call 0x1C17CF4
	132 Move X0, 0x981000
	133 Move X0, [X0+1104]
	134 Call 0x1C17CF4
	135 Move X0, 0x981000
	136 Move X0, [X0+1112]
	137 Call 0x1C17CF4
	138 Move X0, 0x981000
	139 Move X0, [X0+1120]
	140 Call 0x1C17CF4
	141 Move X0, 0x981000
	142 Move X0, [X0+1128]
	143 Call 0x1C17CF4
	144 Move X0, 0x981000
	145 Move X0, [X0+1136]
	146 Call 0x1C17CF4
	147 Move X0, 0x981000
	148 Move X0, [X0+1144]
	149 Call 0x1C17CF4
	150 Move X0, 0x981000
	151 Move X0, [X0+1152]
	152 Call 0x1C17CF4
	153 Move X0, 0x981000
	154 Move X0, [X0+1160]
	155 Call 0x1C17CF4
	156 Move X0, 0x981000
	157 Move X0, [X0+1168]
	158 Call 0x1C17CF4
	159 Move X0, 0x981000
	160 Move X0, [X0+1176]
	161 Call 0x1C17CF4
	162 Move X0, 0x981000
	163 Move X0, [X0+1184]
	164 Call 0x1C17CF4
	165 Move X0, 0x981000
	166 Move X0, [X0+1192]
	167 Call 0x1C17CF4
	168 Move X0, 0x981000
	169 Move X0, [X0+1200]
	170 Call 0x1C17CF4
	171 Move X0, 0x981000
	172 Move X0, [X0+1208]
	173 Call 0x1C17CF4
	174 Move X0, 0x981000
	175 Move X0, [X0+1216]
	176 Call 0x1C17CF4
	177 Move X0, 0x981000
	178 Move X0, [X0+1224]
	179 Call 0x1C17CF4
	180 Move X0, 0x981000
	181 Move X0, [X0+1232]
	182 Call 0x1C17CF4
	183 Move X0, 0x981000
	184 Move X0, [X0+1240]
	185 Call 0x1C17CF4
	186 Move X0, 0x981000
	187 Move X0, [X0+1248]
	188 Call 0x1C17CF4
	189 Move X0, 0x981000
	190 Move X0, [X0+1256]
	191 Call 0x1C17CF4
	192 Move X0, 0x981000
	193 Move X0, [X0+1264]
	194 Call 0x1C17CF4
	195 Move X0, 0x981000
	196 Move X0, [X0+1272]
	197 Call 0x1C17CF4
	198 Move X0, 0x981000
	199 Move X0, [X0+1280]
	200 Call 0x1C17CF4
	201 Move X0, 0x981000
	202 Move X0, [X0+1288]
	203 Call 0x1C17CF4
	204 Move X0, 0x981000
	205 Move X0, [X0+1296]
	206 Call 0x1C17CF4
	207 Move X0, 0x981000
	208 Move X0, [X0+1304]
	209 Call 0x1C17CF4
	210 Move X0, 0x981000
	211 Move X0, [X0+1312]
	212 Call 0x1C17CF4
	213 Move X0, 0x981000
	214 Move X0, [X0+1320]
	215 Call 0x1C17CF4
	216 Move X0, 0x981000
	217 Move X0, [X0+1328]
	218 Call 0x1C17CF4
	219 Move X0, 0x981000
	220 Move X0, [X0+1336]
	221 Call 0x1C17CF4
	222 Move X0, 0x92C000
	223 Move X0, [X0+1728]
	224 Call 0x1C17CF4
	225 Move X0, 0x981000
	226 Move X0, [X0+1344]
	227 Call 0x1C17CF4
	228 Move X0, 0x981000
	229 Move X0, [X0+1352]
	230 Call 0x1C17CF4
	231 Move X0, 0x981000
	232 Move X0, [X0+1360]
	233 Call 0x1C17CF4
	234 Move X0, 0x981000
	235 Move X0, [X0+1368]
	236 Call 0x1C17CF4
	237 Move X0, 0x981000
	238 Move X0, [X0+1376]
	239 Call 0x1C17CF4
	240 Move X0, 0x981000
	241 Move X0, [X0+1384]
	242 Call 0x1C17CF4
	243 Move X0, 0x975000
	244 Move X0, [X0+3696]
	245 Call 0x1C17CF4
	246 Move X0, 0x980000
	247 Move X0, [X0+2368]
	248 Call 0x1C17CF4
	249 Move X0, 0x981000
	250 Move X0, [X0+1392]
	251 Call 0x1C17CF4
	252 Move X0, 0x981000
	253 Move X0, [X0+1400]
	254 Call 0x1C17CF4
	255 Move X0, 0x981000
	256 Move X0, [X0+1408]
	257 Call 0x1C17CF4
	258 Move X0, 0x981000
	259 Move X0, [X0+1416]
	260 Call 0x1C17CF4
	261 Move X0, 0x981000
	262 Move X0, [X0+1424]
	263 Call 0x1C17CF4
	264 Move X0, 0x981000
	265 Move X0, [X0+1432]
	266 Call 0x1C17CF4
	267 Move X0, 0x975000
	268 Move X0, [X0+3720]
	269 Call 0x1C17CF4
	270 Move X0, 0x981000
	271 Move X0, [X0+1440]
	272 Call 0x1C17CF4
	273 Move X0, 0x980000
	274 Move X0, [X0+2328]
	275 Call 0x1C17CF4
	276 Move X0, 0x980000
	277 Move X0, [X0+2008]
	278 Call 0x1C17CF4
	279 Move X0, 0x981000
	280 Move X0, [X0+1448]
	281 Call 0x1C17CF4
	282 Move X0, 0x980000
	283 Move X0, [X0+2376]
	284 Call 0x1C17CF4
	285 Move X0, 0x981000
	286 Move X0, [X0+1456]
	287 Call 0x1C17CF4
	288 Move X0, 0x980000
	289 Move X0, [X0+2384]
	290 Call 0x1C17CF4
	291 Move X0, 0x981000
	292 Move X0, [X0+1464]
	293 Call 0x1C17CF4
	294 Move X0, 0x981000
	295 Move X0, [X0+1472]
	296 Call 0x1C17CF4
	297 Move X0, 0x981000
	298 Move X0, [X0+1480]
	299 Call 0x1C17CF4
	300 Move X0, 0x981000
	301 Move X0, [X0+1488]
	302 Call 0x1C17CF4
	303 Move X0, 0x981000
	304 Move X0, [X0+1496]
	305 Call 0x1C17CF4
	306 Move X0, 0x981000
	307 Move X0, [X0+1504]
	308 Call 0x1C17CF4
	309 Move X0, 0x981000
	310 Move X0, [X0+1512]
	311 Call 0x1C17CF4
	312 Move X0, 0x981000
	313 Move X0, [X0+1520]
	314 Call 0x1C17CF4
	315 Move X0, 0x981000
	316 Move X0, [X0+1528]
	317 Call 0x1C17CF4
	318 Move X0, 0x981000
	319 Move X0, [X0+1536]
	320 Call 0x1C17CF4
	321 Move X0, 0x980000
	322 Move X0, [X0+1184]
	323 Call 0x1C17CF4
	324 Move X0, 0x981000
	325 Move X0, [X0+1544]
	326 Call 0x1C17CF4
	327 Move X0, 0x97E000
	328 Move X0, [X0+848]
	329 Call 0x1C17CF4
	330 Move X0, 0x981000
	331 Move X0, [X0+1552]
	332 Call 0x1C17CF4
	333 Move X0, 0x980000
	334 Move X0, [X0+2392]
	335 Call 0x1C17CF4
	336 Move X0, 0x981000
	337 Move X0, [X0+1560]
	338 Call 0x1C17CF4
	339 Move X0, 0x981000
	340 Move X0, [X0+1568]
	341 Call 0x1C17CF4
	342 Move X0, 0x981000
	343 Move X0, [X0+1576]
	344 Call 0x1C17CF4
	345 Move X0, 0x981000
	346 Move X0, [X0+1584]
	347 Call 0x1C17CF4
	348 Move X0, 0x981000
	349 Move X0, [X0+1592]
	350 Call 0x1C17CF4
	351 Move X0, 0x981000
	352 Move X0, [X0+1600]
	353 Call 0x1C17CF4
	354 Move X0, 0x981000
	355 Move X0, [X0+1608]
	356 Call 0x1C17CF4
	357 Move X0, 0x981000
	358 Move X0, [X0+1616]
	359 Call 0x1C17CF4
	360 Move X0, 0x981000
	361 Move X0, [X0+1624]
	362 Call 0x1C17CF4
	363 Move X0, 0x981000
	364 Move X0, [X0+1632]
	365 Call 0x1C17CF4
	366 Move X0, 0x981000
	367 Move X0, [X0+1640]
	368 Call 0x1C17CF4
	369 Move X0, 0x981000
	370 Move X0, [X0+1648]
	371 Call 0x1C17CF4
	372 Move X0, 0x980000
	373 Move X0, [X0+2088]
	374 Call 0x1C17CF4
	375 Move X0, 0x981000
	376 Move X0, [X0+1656]
	377 Call 0x1C17CF4
	378 Move X0, 0x981000
	379 Move X0, [X0+1664]
	380 Call 0x1C17CF4
	381 Move X0, 0x981000
	382 Move X0, [X0+1672]
	383 Call 0x1C17CF4
	384 Move X0, 0x981000
	385 Move X0, [X0+1680]
	386 Call 0x1C17CF4
	387 Move X0, 0x958000
	388 Move X0, [X0+240]
	389 Call 0x1C17CF4
	390 Move X0, 0x980000
	391 Move X0, [X0+2040]
	392 Call 0x1C17CF4
	393 Move X0, 0x980000
	394 Move X0, [X0+1136]
	395 Call 0x1C17CF4
	396 Move X0, 0x981000
	397 Move X0, [X0+1688]
	398 Call 0x1C17CF4
	399 Move X0, 0x980000
	400 Move X0, [X0+1224]
	401 Call 0x1C17CF4
	402 Move X0, 0x981000
	403 Move X0, [X0+1696]
	404 Call 0x1C17CF4
	405 Move X0, 0x981000
	406 Move X0, [X0+1704]
	407 Call 0x1C17CF4
	408 Move X0, 0x980000
	409 Move X0, [X0+2048]
	410 Call 0x1C17CF4
	411 Move X0, 0x981000
	412 Move X0, [X0+1712]
	413 Call 0x1C17CF4
	414 Move X0, 0x981000
	415 Move X0, [X0+1720]
	416 Call 0x1C17CF4
	417 Move X0, 0x980000
	418 Move X0, [X0+2056]
	419 Call 0x1C17CF4
	420 Move X0, 0x981000
	421 Move X0, [X0+1728]
	422 Call 0x1C17CF4
	423 Move X0, 0x954000
	424 Move X0, [X0+1296]
	425 Call 0x1C17CF4
	426 Move X0, 0x981000
	427 Move X0, [X0+1736]
	428 Call 0x1C17CF4
	429 Move X0, 0x981000
	430 Move X0, [X0+1744]
	431 Call 0x1C17CF4
	432 Move X0, 0x954000
	433 Move X0, [X0+1304]
	434 Call 0x1C17CF4
	435 Move X0, 0x981000
	436 Move X0, [X0+1752]
	437 Call 0x1C17CF4
	438 Move X0, 0x95E000
	439 Move X0, [X0+240]
	440 Call 0x1C17CF4
	441 Move W8, 1
	442 Move [X23+496], W8
	443 Move X22, 0x981000
	444 Move X24, 0x92C000
	445 Move X22, [X22+888]
	446 Move X24, [X24+1728]
	447 Add X0, X19, 24
	448 Move X1, X31
	449 Move [X31+8], X31
	450 Call Collection.Allocate, X0
	451 Add X0, X19, 88
	452 Move X1, X31
	453 Call TypeTable.Initialize, X0
	454 Add X0, X19, 96
	455 Move X1, X31
	456 Call TypeTable.Initialize, X0
	457 Add X0, X19, 104
	458 Move X1, X31
	459 Call TypeTable.Initialize, X0
	460 Move X0, [X25]
	461 Call 0x1C17F10
	462 Move X1, [X20]
	463 Move X20, X0
	464 Call Dictionary`2<Int32, Object>..ctor, X0
	465 Move W8, 3
	466 Move [X19+128], X20
	467 Move [X19+168], W8
	468 Move X0, [X21]
	469 Move W8, [X0+224]
	470 Compare W8, 0
	471 JumpIfNotEqual {473}
	472 Call 0x1C17DFC
	473 Move X27, 0x954000
	474 Move X26, 0x981000
	475 Move X21, 0x97E000
	476 Move X25, 0x981000
	477 Move X29, 0x980000
	478 Move X28, 0x981000
	479 Move X23, 0x981000
	480 Move X27, [X27+1304]
	481 Move X26, [X26+904]
	482 Move X21, [X21+848]
	483 Move X25, [X25+960]
	484 Move X29, [X29+1224]
	485 Move X28, [X28+1096]
	486 Move X23, [X23+1056]
	487 Move X0, X31
	488 Call Application.get_isFocused
	489 And W8, W0, 1
	490 Move W9, 0x42700000
	491 Move [X19+946], W8
	492 Move [X19+20], W9
	493 Move X0, [X24]
	494 Move X20, [X22]
	495 Move W8, [X0+224]
	496 Compare W8, 0
	497 JumpIfNotEqual {499}
	498 Call 0x1C17DFC
	499 Move X0, X20
	500 Move X1, X31
	501 Call Type.GetTypeFromHandle, X0
	502 Move X1, [X27]
	503 Move X2, X0
	504 Move X0, X19
	505 Call InputManager.RegisterControlLayout, X0, X1, X2
	506 Move X0, [X26]
	507 Move X1, X31
	508 Call Type.GetTypeFromHandle, X0
	509 Move X1, [X21]
	510 Move X2, X0
	511 Move X0, X19
	512 Call InputManager.RegisterControlLayout, X0, X1, X2
	513 Move X0, [X25]
	514 Move X1, X31
	515 Call Type.GetTypeFromHandle, X0
	516 Move X1, [X29]
	517 Move X2, X0
	518 Move X0, X19
	519 Call InputManager.RegisterControlLayout, X0, X1, X2
	520 Move X0, [X28]
	521 Move X1, X31
	522 Call Type.GetTypeFromHandle, X0
	523 Move X8, 0x958000
	524 Move X8, [X8+240]
	525 Move X2, X0
	526 Move X0, X19
	527 Move X1, [X8]
	528 Call InputManager.RegisterControlLayout, X0, X1, X2
	529 Move X0, [X22]
	530 Move X1, X31
	531 Call Type.GetTypeFromHandle, X0
	532 Move X8, 0x980000
	533 Move X8, [X8+2368]
	534 Move X2, X0
	535 Move X0, X19
	536 Move X1, [X8]
	537 Call InputManager.RegisterControlLayout, X0, X1, X2
	538 Move X0, [X23]
	539 Move X1, X31
	540 Call Type.GetTypeFromHandle, X0
	541 Move X8, 0x980000
	542 Move X8, [X8+2056]
	543 Move X2, X0
	544 Move X0, X19
	545 Move X1, [X8]
	546 Call InputManager.RegisterControlLayout, X0, X1, X2
	547 Move X0, [X23]
	548 Move X1, X31
	549 Call Type.GetTypeFromHandle, X0
	550 Move X8, 0x980000
	551 Move X8, [X8+2008]
	552 Move X2, X0
	553 Move X0, X19
	554 Move X1, [X8]
	555 Call InputManager.RegisterControlLayout, X0, X1, X2
	556 Move X8, 0x981000
	557 Move X8, [X8+968]
	558 Move X1, X31
	559 Move X0, [X8]
	560 Call Type.GetTypeFromHandle, X0
	561 Move X8, 0x95E000
	562 Move X8, [X8+240]
	563 Move X2, X0
	564 Move X0, X19
	565 Move X1, [X8]
	566 Call InputManager.RegisterControlLayout, X0, X1, X2
	567 Move X8, 0x981000
	568 Move X8, [X8+1352]
	569 Move X1, X31
	570 Move X0, [X8]
	571 Call Type.GetTypeFromHandle, X0
	572 Move X8, 0x980000
	573 Move X8, [X8+2048]
	574 Move X2, X0
	575 Move X0, X19
	576 Move X1, [X8]
	577 Call InputManager.RegisterControlLayout, X0, X1, X2
	578 Move X8, 0x981000
	579 Move X8, [X8+1368]
	580 Move X1, X31
	581 Move X0, [X8]
	582 Call Type.GetTypeFromHandle, X0
	583 Move X8, 0x981000
	584 Move X8, [X8+1672]
	585 Move X2, X0
	586 Move X0, X19
	587 Move X1, [X8]
	588 Call InputManager.RegisterControlLayout, X0, X1, X2
	589 Move X8, 0x981000
	590 Move X8, [X8+952]
	591 Move X1, X31
	592 Move X0, [X8]
	593 Call Type.GetTypeFromHandle, X0
	594 Move X8, 0x980000
	595 Move X8, [X8+2040]
	596 Move X2, X0
	597 Move X0, X19
	598 Move X1, [X8]
	599 Call InputManager.RegisterControlLayout, X0, X1, X2
	600 Move X8, 0x981000
	601 Move X8, [X8+1216]
	602 Move X1, X31
	603 Move X0, [X8]
	604 Call Type.GetTypeFromHandle, X0
	605 Move X8, 0x981000
	606 Move X8, [X8+1432]
	607 Move X2, X0
	608 Move X0, X19
	609 Move X1, [X8]
	610 Call InputManager.RegisterControlLayout, X0, X1, X2
	611 Move X8, 0x981000
	612 Move X8, [X8+1272]
	613 Move X1, X31
	614 Move X0, [X8]
	615 Call Type.GetTypeFromHandle, X0
	616 Move X8, 0x981000
	617 Move X8, [X8+1504]
	618 Move X2, X0
	619 Move X0, X19
	620 Move X1, [X8]
	621 Call InputManager.RegisterControlLayout, X0, X1, X2
	622 Move X8, 0x981000
	623 Move X8, [X8+984]
	624 Move X1, X31
	625 Move X0, [X8]
	626 Call Type.GetTypeFromHandle, X0
	627 Move X21, 0x981000
	628 Move X21, [X21+1736]
	629 Move X2, X0
	630 Move X0, X19
	631 Move X1, [X21]
	632 Call InputManager.RegisterControlLayout, X0, X1, X2
	633 Move X8, 0x981000
	634 Move X8, [X8+976]
	635 Move X1, X31
	636 Move X0, [X8]
	637 Call Type.GetTypeFromHandle, X0
	638 Move X8, 0x981000
	639 Move X8, [X8+1592]
	640 Move X2, X0
	641 Move X0, X19
	642 Move X1, [X8]
	643 Call InputManager.RegisterControlLayout, X0, X1, X2
	644 Move X8, 0x981000
	645 Move X8, [X8+864]
	646 Move X1, X31
	647 Move X0, [X8]
	648 Call Type.GetTypeFromHandle, X0
	649 Move X8, 0x980000
	650 Move X8, [X8+1184]
	651 Move X2, X0
	652 Move X0, X19
	653 Move X1, [X8]
	654 Call InputManager.RegisterControlLayout, X0, X1, X2
	655 Move X8, 0x981000
	656 Move X8, [X8+1296]
	657 Move X1, X31
	658 Move X0, [X8]
	659 Call Type.GetTypeFromHandle, X0
	660 Move X8, 0x980000
	661 Move X8, [X8+2376]
	662 Move X2, X0
	663 Move X0, X19
	664 Move X1, [X8]
	665 Call InputManager.RegisterControlLayout, X0, X1, X2
	666 Move X8, 0x981000
	667 Move X8, [X8+1304]
	668 Move X1, X31
	669 Move X0, [X8]
	670 Call Type.GetTypeFromHandle, X0
	671 Move X8, 0x980000
	672 Move X8, [X8+2392]
	673 Move X2, X0
	674 Move X0, X19
	675 Move X1, [X8]
	676 Call InputManager.RegisterControlLayout, X0, X1, X2
	677 Move X8, 0x981000
	678 Move X8, [X8+1312]
	679 Move X1, X31
	680 Move X0, [X8]
	681 Call Type.GetTypeFromHandle, X0
	682 Move X8, 0x980000
	683 Move X8, [X8+2384]
	684 Move X2, X0
	685 Move X0, X19
	686 Move X1, [X8]
	687 Call InputManager.RegisterControlLayout, X0, X1, X2
	688 Move X8, 0x981000
	689 Move X8, [X8+992]
	690 Move X1, X31
	691 Move X0, [X8]
	692 Call Type.GetTypeFromHandle, X0
	693 Move X8, 0x981000
	694 Move X8, [X8+1496]
	695 Move X2, X0
	696 Move X0, X19
	697 Move X1, [X8]
	698 Call InputManager.RegisterControlLayout, X0, X1, X2
	699 Move X8, 0x981000
	700 Move X8, [X8+1088]
	701 Move X1, X31
	702 Move X0, [X8]
	703 Call Type.GetTypeFromHandle, X0
	704 Move X8, 0x981000
	705 Move X8, [X8+1680]
	706 Move X2, X0
	707 Move X0, X19
	708 Move X1, [X8]
	709 Call InputManager.RegisterControlLayout, X0, X1, X2
	710 Move X8, 0x981000
	711 Move X8, [X8+1104]
	712 Move X1, X31
	713 Move X0, [X8]
	714 Call Type.GetTypeFromHandle, X0
	715 Move X8, 0x980000
	716 Move X8, [X8+1136]
	717 Move X2, X0
	718 Move X0, X19
	719 Move X1, [X8]
	720 Call InputManager.RegisterControlLayout, X0, X1, X2
	721 Move X8, 0x981000
	722 Move X8, [X8+1192]
	723 Move X1, X31
	724 Move X0, [X8]
	725 Call Type.GetTypeFromHandle, X0
	726 Move X8, 0x981000
	727 Move X8, [X8+1568]
	728 Move X2, X0
	729 Move X0, X19
	730 Move X1, [X8]
	731 Call InputManager.RegisterControlLayout, X0, X1, X2
	732 Move X8, 0x981000
	733 Move X8, [X8+1136]
	734 Move X1, X31
	735 Move X0, [X8]
	736 Call Type.GetTypeFromHandle, X0
	737 Move X8, 0x975000
	738 Move X8, [X8+3720]
	739 Move X2, X0
	740 Move X0, X19
	741 Move X1, [X8]
	742 Call InputManager.RegisterControlLayout, X0, X1, X2
	743 Move X8, 0x981000
	744 Move X8, [X8+1184]
	745 Move X1, X31
	746 Move X0, [X8]
	747 Call Type.GetTypeFromHandle, X0
	748 Move X8, 0x981000
	749 Move X8, [X8+1648]
	750 Move X2, X0
	751 Move X0, X19
	752 Move X1, [X8]
	753 Call InputManager.RegisterControlLayout, X0, X1, X2
	754 Move X8, 0x981000
	755 Move X8, [X8+1320]
	756 Move X1, X31
	757 Move X0, [X8]
	758 Call Type.GetTypeFromHandle, X0
	759 Move X8, 0x980000
	760 Move X8, [X8+2328]
	761 Move X2, X0
	762 Move X0, X19
	763 Move X1, [X8]
	764 Call InputManager.RegisterControlLayout, X0, X1, X2
	765 Move X8, 0x981000
	766 Move X8, [X8+1248]
	767 Move X1, X31
	768 Move X0, [X8]
	769 Call Type.GetTypeFromHandle, X0
	770 Move X8, 0x981000
	771 Move X8, [X8+1656]
	772 Move X2, X0
	773 Move X0, X19
	774 Move X1, [X8]
	775 Call InputManager.RegisterControlLayout, X0, X1, X2
	776 Move X8, 0x981000
	777 Move X8, [X8+848]
	778 Move X1, X31
	779 Move X0, [X8]
	780 Call Type.GetTypeFromHandle, X0
	781 Move X8, 0x981000
	782 Move X8, [X8+1408]
	783 Move X2, X0
	784 Move X0, X19
	785 Move X1, [X8]
	786 Call InputManager.RegisterControlLayout, X0, X1, X2
	787 Move X8, 0x981000
	788 Move X8, [X8+1008]
	789 Move X1, X31
	790 Move X0, [X8]
	791 Call Type.GetTypeFromHandle, X0
	792 Move X8, 0x981000
	793 Move X8, [X8+1552]
	794 Move X2, X0
	795 Move X0, X19
	796 Move X1, [X8]
	797 Call InputManager.RegisterControlLayout, X0, X1, X2
	798 Move X8, 0x981000
	799 Move X8, [X8+1000]
	800 Move X1, X31
	801 Move X0, [X8]
	802 Call Type.GetTypeFromHandle, X0
	803 Move X8, 0x981000
	804 Move X8, [X8+1448]
	805 Move X2, X0
	806 Move X0, X19
	807 Move X1, [X8]
	808 Call InputManager.RegisterControlLayout, X0, X1, X2
	809 Move X8, 0x981000
	810 Move X8, [X8+872]
	811 Move X1, X31
	812 Move X0, [X8]
	813 Call Type.GetTypeFromHandle, X0
	814 Move X8, 0x981000
	815 Move X8, [X8+1520]
	816 Move X2, X0
	817 Move X0, X19
	818 Move X1, [X8]
	819 Call InputManager.RegisterControlLayout, X0, X1, X2
	820 Move X8, 0x981000
	821 Move X8, [X8+1120]
	822 Move X1, X31
	823 Move X0, [X8]
	824 Call Type.GetTypeFromHandle, X0
	825 Move X8, 0x981000
	826 Move X8, [X8+1704]
	827 Move X2, X0
	828 Move X0, X19
	829 Move X1, [X8]
	830 Call InputManager.RegisterControlLayout, X0, X1, X2
	831 Move X8, 0x981000
	832 Move X8, [X8+1128]
	833 Move X1, X31
	834 Move X0, [X8]
	835 Call Type.GetTypeFromHandle, X0
	836 Move X8, 0x981000
	837 Move X8, [X8+1728]
	838 Move X2, X0
	839 Move X0, X19
	840 Move X1, [X8]
	841 Call InputManager.RegisterControlLayout, X0, X1, X2
	842 Move X8, 0x981000
	843 Move X8, [X8+1112]
	844 Move X1, X31
	845 Move X0, [X8]
	846 Call Type.GetTypeFromHandle, X0
	847 Move X8, 0x981000
	848 Move X8, [X8+1616]
	849 Move X2, X0
	850 Move X0, X19
	851 Move X1, [X8]
	852 Call InputManager.RegisterControlLayout, X0, X1, X2
	853 Move X8, 0x981000
	854 Move X8, [X8+1208]
	855 Move X1, X31
	856 Move X0, [X8]
	857 Call Type.GetTypeFromHandle, X0
	858 Move X8, 0x981000
	859 Move X8, [X8+1584]
	860 Move X2, X0
	861 Move X0, X19
	862 Move X1, [X8]
	863 Call InputManager.RegisterControlLayout, X0, X1, X2
	864 Move X8, 0x981000
	865 Move X8, [X8+1024]
	866 Move X1, X31
	867 Move X0, [X8]
	868 Call Type.GetTypeFromHandle, X0
	869 Move X8, 0x981000
	870 Move X8, [X8+1688]
	871 Move X2, X0
	872 Move X0, X19
	873 Move X1, [X8]
	874 Call InputManager.RegisterControlLayout, X0, X1, X2
	875 Move X8, 0x981000
	876 Move X8, [X8+856]
	877 Move X1, X31
	878 Move X0, [X8]
	879 Call Type.GetTypeFromHandle, X0
	880 Move X8, 0x981000
	881 Move X8, [X8+1664]
	882 Move X2, X0
	883 Move X0, X19
	884 Move X1, [X8]
	885 Call InputManager.RegisterControlLayout, X0, X1, X2
	886 Move X8, 0x981000
	887 Move X8, [X8+1264]
	888 Move X1, X31
	889 Move X0, [X8]
	890 Call Type.GetTypeFromHandle, X0
	891 Move X8, 0x981000
	892 Move X8, [X8+1536]
	893 Move X2, X0
	894 Move X0, X19
	895 Move X1, [X8]
	896 Call InputManager.RegisterControlLayout, X0, X1, X2
	897 Move X8, 0x981000
	898 Move X8, [X8+1328]
	899 Move X1, X31
	900 Move X0, [X8]
	901 Call Type.GetTypeFromHandle, X0
	902 Move X8, 0x980000
	903 Move X8, [X8+1400]
	904 Move X2, X0
	905 Move X0, X19
	906 Move X1, [X8]
	907 Call InputManager.RegisterControlLayout, X0, X1, X2
	908 Move X8, 0x980000
	909 Move X8, [X8+1424]
	910 Move X0, X19
	911 Move X1, [X8]
	912 Move X8, 0x980000
	913 Move X8, [X8+1032]
	914 Move X2, [X8]
	915 Call 0x22096E8, X0, X1
	916 Move X8, 0x980000
	917 Move X8, [X8+1512]
	918 Move X0, X19
	919 Move X1, [X8]
	920 Move X8, 0x980000
	921 Move X8, [X8+1048]
	922 Move X2, [X8]
	923 Call 0x22096E8, X0, X1
	924 Move X8, 0x980000
	925 Move X8, [X8+1608]
	926 Move X0, X19
	927 Move X1, [X8]
	928 Move X8, 0x980000
	929 Move X8, [X8+1040]
	930 Move X2, [X8]
	931 Call 0x22096E8, X0, X1
	932 Move X9, 0x980000
	933 Move X8, [X19+88]
	934 Move X9, [X9+1064]
	935 Move X1, X31
	936 Move [X31+8], X8
	937 Move X0, [X9]
	938 Call Type.GetTypeFromHandle, X0
	939 Move X8, 0x980000
	940 Move X8, [X8+1624]
	941 Move X2, X0
	942 Add X0, X31, 8
	943 Move X3, X31
	944 Move X1, [X8]
	945 Call TypeTable.AddTypeRegistration, X0, X1, X2
	946 Move X9, 0x980000
	947 Move X8, [X19+88]
	948 Move X9, [X9+1072]
	949 Move X1, X31
	950 Move [X31+8], X8
	951 Move X0, [X9]
	952 Call Type.GetTypeFromHandle, X0
	953 Move X8, 0x980000
	954 Move X8, [X8+1488]
	955 Move X2, X0
	956 Add X0, X31, 8
	957 Move X3, X31
	958 Move X1, [X8]
	959 Call TypeTable.AddTypeRegistration, X0, X1, X2
	960 Move X9, 0x980000
	961 Move X8, [X19+88]
	962 Move X9, [X9+1080]
	963 Move X1, X31
	964 Move [X31+8], X8
	965 Move X0, [X9]
	966 Call Type.GetTypeFromHandle, X0
	967 Move X8, 0x980000
	968 Move X8, [X8+1752]
	969 Move X2, X0
	970 Add X0, X31, 8
	971 Move X3, X31
	972 Move X1, [X8]
	973 Call TypeTable.AddTypeRegistration, X0, X1, X2
	974 Move X9, 0x980000
	975 Move X8, [X19+88]
	976 Move X9, [X9+928]
	977 Move X1, X31
	978 Move [X31+8], X8
	979 Move X0, [X9]
	980 Call Type.GetTypeFromHandle, X0
	981 Move X8, 0x980000
	982 Move X8, [X8+1384]
	983 Move X2, X0
	984 Add X0, X31, 8
	985 Move X3, X31
	986 Move X1, [X8]
	987 Call TypeTable.AddTypeRegistration, X0, X1, X2
	988 Move X9, 0x980000
	989 Move X8, [X19+88]
	990 Move X9, [X9+1152]
	991 Move X1, X31
	992 Move [X31+8], X8
	993 Move X0, [X9]
	994 Call Type.GetTypeFromHandle, X0
	995 Move X8, 0x980000
	996 Move X8, [X8+1440]
	997 Move X2, X0
	998 Add X0, X31, 8
	999 Move X3, X31
	1000 Move X1, [X8]
	1001 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1002 Move X9, 0x980000
	1003 Move X8, [X19+88]
	1004 Move X9, [X9+1160]
	1005 Move X1, X31
	1006 Move [X31+8], X8
	1007 Move X0, [X9]
	1008 Call Type.GetTypeFromHandle, X0
	1009 Move X8, 0x980000
	1010 Move X8, [X8+1472]
	1011 Move X2, X0
	1012 Add X0, X31, 8
	1013 Move X3, X31
	1014 Move X1, [X8]
	1015 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1016 Move X9, 0x980000
	1017 Move X8, [X19+88]
	1018 Move X9, [X9+1168]
	1019 Move X1, X31
	1020 Move [X31+8], X8
	1021 Move X0, [X9]
	1022 Call Type.GetTypeFromHandle, X0
	1023 Move X8, 0x980000
	1024 Move X8, [X8+1712]
	1025 Move X2, X0
	1026 Add X0, X31, 8
	1027 Move X3, X31
	1028 Move X1, [X8]
	1029 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1030 Move X9, 0x980000
	1031 Move X8, [X19+88]
	1032 Move X9, [X9+1224]
	1033 Move X1, X31
	1034 Move [X31+8], X8
	1035 Move X0, [X9]
	1036 Call Type.GetTypeFromHandle, X0
	1037 Move X8, 0x974000
	1038 Move X8, [X8+3696]
	1039 Move X2, X0
	1040 Add X0, X31, 8
	1041 Move X3, X31
	1042 Move X1, [X8]
	1043 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1044 Move X9, 0x980000
	1045 Move X8, [X19+88]
	1046 Move X9, [X9+1232]
	1047 Move X1, X31
	1048 Move [X31+8], X8
	1049 Move X0, [X9]
	1050 Call Type.GetTypeFromHandle, X0
	1051 Move X8, 0x980000
	1052 Move X8, [X8+1696]
	1053 Move X2, X0
	1054 Add X0, X31, 8
	1055 Move X3, X31
	1056 Move X1, [X8]
	1057 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1058 Move X9, 0x980000
	1059 Move X8, [X19+88]
	1060 Move X9, [X9+1240]
	1061 Move X1, X31
	1062 Move [X31+8], X8
	1063 Move X0, [X9]
	1064 Call Type.GetTypeFromHandle, X0
	1065 Move X8, 0x980000
	1066 Move X8, [X8+1640]
	1067 Move X2, X0
	1068 Add X0, X31, 8
	1069 Move X3, X31
	1070 Move X1, [X8]
	1071 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1072 Move X9, 0x980000
	1073 Move X8, [X19+88]
	1074 Move X9, [X9+1280]
	1075 Move X1, X31
	1076 Move [X31+8], X8
	1077 Move X0, [X9]
	1078 Call Type.GetTypeFromHandle, X0
	1079 Move X8, 0x980000
	1080 Move X8, [X8+1392]
	1081 Move X2, X0
	1082 Add X0, X31, 8
	1083 Move X3, X31
	1084 Move X1, [X8]
	1085 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1086 Move X9, 0x980000
	1087 Move X8, [X19+88]
	1088 Move X9, [X9+896]
	1089 Move X1, X31
	1090 Move [X31+8], X8
	1091 Move X0, [X9]
	1092 Call Type.GetTypeFromHandle, X0
	1093 Move X8, 0x980000
	1094 Move X8, [X8+1528]
	1095 Move X2, X0
	1096 Add X0, X31, 8
	1097 Move X3, X31
	1098 Move X1, [X8]
	1099 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1100 Move X9, 0x980000
	1101 Move X8, [X19+88]
	1102 Move X9, [X9+936]
	1103 Move X1, X31
	1104 Move [X31+8], X8
	1105 Move X0, [X9]
	1106 Call Type.GetTypeFromHandle, X0
	1107 Move X8, 0x980000
	1108 Move X8, [X8+1720]
	1109 Move X2, X0
	1110 Add X0, X31, 8
	1111 Move X3, X31
	1112 Move X1, [X8]
	1113 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1114 Move X9, 0x980000
	1115 Move X8, [X19+88]
	1116 Move X9, [X9+944]
	1117 Move X1, X31
	1118 Move [X31+8], X8
	1119 Move X0, [X9]
	1120 Call Type.GetTypeFromHandle, X0
	1121 Move X8, 0x980000
	1122 Move X8, [X8+1456]
	1123 Move X2, X0
	1124 Add X0, X31, 8
	1125 Move X3, X31
	1126 Move X1, [X8]
	1127 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1128 Move X9, 0x980000
	1129 Move X8, [X19+96]
	1130 Move X9, [X9+1016]
	1131 Move X1, X31
	1132 Move [X31+8], X8
	1133 Move X0, [X9]
	1134 Call Type.GetTypeFromHandle, X0
	1135 Move X8, 0x980000
	1136 Move X8, [X8+1544]
	1137 Move X2, X0
	1138 Add X0, X31, 8
	1139 Move X3, X31
	1140 Move X1, [X8]
	1141 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1142 Move X9, 0x980000
	1143 Move X8, [X19+96]
	1144 Move X9, [X9+1288]
	1145 Move X1, X31
	1146 Move [X31+8], X8
	1147 Move X0, [X9]
	1148 Call Type.GetTypeFromHandle, X0
	1149 Move X8, 0x980000
	1150 Move X8, [X8+1560]
	1151 Move X2, X0
	1152 Add X0, X31, 8
	1153 Move X3, X31
	1154 Move X1, [X8]
	1155 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1156 Move X9, 0x980000
	1157 Move X8, [X19+96]
	1158 Move X9, [X9+1256]
	1159 Move X1, X31
	1160 Move [X31+8], X8
	1161 Move X0, [X9]
	1162 Call Type.GetTypeFromHandle, X0
	1163 Move X8, 0x980000
	1164 Move X8, [X8+1744]
	1165 Move X2, X0
	1166 Add X0, X31, 8
	1167 Move X3, X31
	1168 Move X1, [X8]
	1169 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1170 Move X9, 0x980000
	1171 Move X8, [X19+96]
	1172 Move X9, [X9+1144]
	1173 Move X1, X31
	1174 Move [X31+8], X8
	1175 Move X0, [X9]
	1176 Call Type.GetTypeFromHandle, X0
	1177 Move X8, 0x980000
	1178 Move X8, [X8+1480]
	1179 Move X2, X0
	1180 Add X0, X31, 8
	1181 Move X3, X31
	1182 Move X1, [X8]
	1183 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1184 Move X9, 0x980000
	1185 Move X8, [X19+96]
	1186 Move X9, [X9+1200]
	1187 Move X1, X31
	1188 Move [X31+8], X8
	1189 Move X0, [X9]
	1190 Call Type.GetTypeFromHandle, X0
	1191 Move X8, 0x97F000
	1192 Move X8, [X8+2088]
	1193 Move X2, X0
	1194 Add X0, X31, 8
	1195 Move X3, X31
	1196 Move X1, [X8]
	1197 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1198 Move X23, 0x980000
	1199 Move X8, [X19+104]
	1200 Move X23, [X23+880]
	1201 Move X1, X31
	1202 Move [X31+8], X8
	1203 Move X0, [X23]
	1204 Call Type.GetTypeFromHandle, X0
	1205 Move X8, 0x980000
	1206 Move X8, [X8+1376]
	1207 Move X2, X0
	1208 Add X0, X31, 8
	1209 Move X3, X31
	1210 Move X1, [X8]
	1211 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1212 Move X22, 0x980000
	1213 Move X8, [X19+104]
	1214 Move X22, [X22+1344]
	1215 Move X1, X31
	1216 Move [X31+8], X8
	1217 Move X0, [X22]
	1218 Call Type.GetTypeFromHandle, X0
	1219 Move X8, 0x953000
	1220 Move X8, [X8+1296]
	1221 Move X2, X0
	1222 Add X0, X31, 8
	1223 Move X3, X31
	1224 Move X1, [X8]
	1225 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1226 Move X9, 0x980000
	1227 Move X8, [X19+104]
	1228 Move X9, [X9+1360]
	1229 Move X1, X31
	1230 Move [X31+8], X8
	1231 Move X0, [X9]
	1232 Call Type.GetTypeFromHandle, X0
	1233 Move X8, 0x980000
	1234 Move X8, [X8+1600]
	1235 Move X2, X0
	1236 Add X0, X31, 8
	1237 Move X3, X31
	1238 Move X1, [X8]
	1239 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1240 Move X8, [X19+104]
	1241 Move X0, [X23]
	1242 Move X1, X31
	1243 Move [X31+8], X8
	1244 Call Type.GetTypeFromHandle, X0
	1245 Move X1, [X27]
	1246 Move X2, X0
	1247 Add X0, X31, 8
	1248 Move X3, X31
	1249 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1250 Move X8, [X19+104]
	1251 Move X0, [X22]
	1252 Move X1, X31
	1253 Move [X31+8], X8
	1254 Call Type.GetTypeFromHandle, X0
	1255 Move X1, [X21]
	1256 Move X2, X0
	1257 Add X0, X31, 8
	1258 Move X3, X31
	1259 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1260 Move X9, 0x980000
	1261 Move X8, [X19+104]
	1262 Move X9, [X9+912]
	1263 Move X1, X31
	1264 Move [X31+8], X8
	1265 Move X0, [X9]
	1266 Call Type.GetTypeFromHandle, X0
	1267 Move X8, 0x980000
	1268 Move X8, [X8+1464]
	1269 Move X2, X0
	1270 Add X0, X31, 8
	1271 Move X3, X31
	1272 Move X1, [X8]
	1273 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1274 Move X9, 0x980000
	1275 Move X8, [X19+104]
	1276 Move X9, [X9+920]
	1277 Move X1, X31
	1278 Move [X31+8], X8
	1279 Move X0, [X9]
	1280 Call Type.GetTypeFromHandle, X0
	1281 Move X8, 0x980000
	1282 Move X8, [X8+1576]
	1283 Move X2, X0
	1284 Add X0, X31, 8
	1285 Move X3, X31
	1286 Move X1, [X8]
	1287 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1288 Move X9, 0x980000
	1289 Move X8, [X19+104]
	1290 Move X9, [X9+1176]
	1291 Move X1, X31
	1292 Move [X31+8], X8
	1293 Move X0, [X9]
	1294 Call Type.GetTypeFromHandle, X0
	1295 Move X8, 0x980000
	1296 Move X8, [X8+1416]
	1297 Move X2, X0
	1298 Add X0, X31, 8
	1299 Move X3, X31
	1300 Move X1, [X8]
	1301 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1302 Move X9, 0x980000
	1303 Move X8, [X19+104]
	1304 Move X9, [X9+1336]
	1305 Move X1, X31
	1306 Move [X31+8], X8
	1307 Move X0, [X9]
	1308 Call Type.GetTypeFromHandle, X0
	1309 Move X8, 0x980000
	1310 Move X8, [X8+1632]
	1311 Move X2, X0
	1312 Add X0, X31, 8
	1313 Move X3, X31
	1314 Move X1, [X8]
	1315 Call TypeTable.AddTypeRegistration, X0, X1, X2
	1316 Move X20, [X31+96]
	1317 Move X19, [X31+104]
	1318 Move X22, [X31+80]
	1319 Move X21, [X31+88]
	1320 Move X24, [X31+64]
	1321 Move X23, [X31+72]
	1322 Move X26, [X31+48]
	1323 Move X25, [X31+56]
	1324 Move X28, [X31+32]
	1325 Move X27, [X31+40]
	1326 Move X29, [X31+16]
	1327 Move X30, [X31+24]
	1328 Add X31, X31, 112
	1329 Return 

Method: System.Void InstallRuntime(UnityEngine.InputSystem.LowLevel.IInputRuntime runtime)

Disassembly:
	0x037C9698 BL 0x1C16CF4
	0x037C969C ADRP X0, 0x97E000
	0x037C96A0 LDR X0, [X0 + 0xD28]
	0x037C96A4 BL 0x1C16CF4
	0x037C96A8 ADRP X0, 0x97F000
	0x037C96AC LDR X0, [X0 + 0x48]
	0x037C96B0 BL 0x1C16CF4
	0x037C96B4 ADRP X0, 0x97E000
	0x037C96B8 LDR X0, [X0 + 0xD40]
	0x037C96BC BL 0x1C16CF4
	0x037C96C0 MOVZ W8, 0x1
	0x037C96C4 STRB W8, [X21 + 0x1FA]
	0x037C96C8 MOVI V0.2D, 0x0
	0x037C96CC MOV X0, X20
	0x037C96D0 MOV X1, X22
	0x037C96D4 STR X31, [X31 + 0xB0]
	0x037C96D8 STP V0, V0, [X31 + 0x90]
	0x037C96DC STR V0, [X31 + 0x8]
	0x037C96E0 BL 0x37C9A3C
	0x037C96E4 MOV X21, X0
	0x037C96E8 CBZ X0, 0x37C9708
	0x037C96EC LDR X8, [X21 + 0x120]
	0x037C96F0 LDP V1, V0, [X21 + 0x100]
	0x037C96F4 LDR V2, [X21 + 0xF]
	0x037C96F8 STR X8, [X31 + 0x70]
	0x037C96FC STP V1, V0, [X31 + 0x50]
	0x037C9700 STR V2, [X31 + 0x4]
	0x037C9704 B 0x37C9730
	0x037C9708 ADD X8, X31, 0xC0
	0x037C970C MOV X0, X22
	0x037C9710 MOV X1, X31
	0x037C9714 BL 0x381E164
	0x037C9718 LDP V0, V1, [X31 + 0xC0]
	0x037C971C LDR V2, [X31 + 0xE]
	0x037C9720 LDR X8, [X31 + 0xF0]
	0x037C9724 STP V0, V1, [X31 + 0x40]
	0x037C9728 STR V2, [X31 + 0x6]
	0x037C972C STR X8, [X31 + 0x70]
	0x037C9730 LDP V0, V1, [X31 + 0x40]
	0x037C9734 LDR V2, [X31 + 0x6]
	0x037C9738 LDR X8, [X31 + 0x70]
	0x037C973C ADRP X23, 0x97F000
	0x037C9740 STP V0, V1, [X31 + 0x80]
	0x037C9744 STR V2, [X31 + 0xA]
	0x037C9748 STR X8, [X31 + 0xB0]
	0x037C974C LDR X0, [X20 + 0x480]
	0x037C9750 LDR X23, [X23 + 0x718]
	0x037C9754 CBZ X0, 0x37C989C
	0x037C9758 MOV X1, X31
	0x037C975C BL 0x37CDAC4
	0x037C9760 UBFM X8, X1, 0x20, 0x3F
	0x037C9764 CMP W8, 0x1
	0x037C9768 B.LT 0x37C97A0
	0x037C976C CBZ X21, 0x37C9778
	0x037C9770 LDP X8, X2, [X21 + 0x58]
	0x037C9774 B 0x37C9790
	0x037C9778 ADD X1, X31, 0x80
	0x037C977C MOV X0, X20
	0x037C9780 MOV W2, W19
	0x037C9784 BL 0x37C419C
	0x037C9788 MOV X8, X0
	0x037C978C MOV X2, X1
	0x037C9790 MOV X0, X20
	0x037C9794 MOV X1, X8
	0x037C9798 BL 0x37C516C
	0x037C979C TBZ X0, 0x0, 0x37C97F4
	0x037C97A0 CBZ X21, 0x37C9800
	0x037C97A4 LDR W8, [X21 + 0xDC]
	0x037C97A8 MOVN W9, 0x170
	0x037C97AC AND W8, W8, W9, 0x0
	0x037C97B0 ORR W8, W8, 0x10
	0x037C97B4 STP W8, W19, [X21 + 0xDC]
	0x037C97B8 MOV X0, X20
	0x037C97BC MOV X1, X21
	0x037C97C0 BL 0x37C45C8
	0x037C97C4 ADRP X8, 0x97E000
	0x037C97C8 ADRP X9, 0x97E000
	0x037C97CC LDR X8, [X8 + 0xD40]
	0x037C97D0 LDR X9, [X9 + 0xD28]
	0x037C97D4 ADD X0, X20, 0xE0
	0x037C97D8 LDR X3, [X8]
	0x037C97DC LDR X5, [X9]
	0x037C97E0 MOVZ W2, 0x3
	0x037C97E4 MOV X1, X21
	0x037C97E8 MOV X4, X31
	0x037C97EC BL 0x21AE04C
	0x037C97F0 B 0x37C9834
	0x037C97F4 MOV X21, X31
	0x037C97F8 MOVZ W8, 0x1
	0x037C97FC B 0x37C983C
	0x037C9800 LDP V0, V1, [X31 + 0x80]
	0x037C9804 LDR V2, [X31 + 0xA]
	0x037C9808 LDR X8, [X31 + 0xB0]
	0x037C980C STP V0, V1, [X31]
	0x037C9810 STR V2, [X31 + 0x2]
	0x037C9814 STR X8, [X31 + 0x30]
	0x037C9818 ADD X1, X31, 0x0
	0x037C981C MOVZ W5, 0x10
	0x037C9820 MOV X0, X20
	0x037C9824 MOV W2, W31
	0x037C9828 MOV X3, X31
	0x037C982C MOV W4, W19
	0x037C9830 BL 0x37C606C
	0x037C9834 MOV W8, W31
	0x037C9838 MOV X21, X31
	0x037C983C LDP V0, V1, [X31 + 0x80]
	0x037C9840 LDR X4, [X23]
	0x037C9844 LDR X9, [X31 + 0xB0]
	0x037C9848 ADD X0, X20, 0x90
	0x037C984C STP V0, V1, [X31 + 0xC0]
	0x037C9850 LDR V0, [X31 + 0xA]
	0x037C9854 ADD X1, X20, 0x88
	0x037C9858 MOVZ W10, 0x1
	0x037C985C ADD X2, X31, 0xC0
	0x037C9860 MOVZ W3, 0xA
	0x037C9864 STR W19, [X31 + 0xF8]
	0x037C9868 STRB W8, [X31 + 0xFD]
	0x037C986C STRB W10, [X31 + 0xFC]
	0x037C9870 STR V0, [X31 + 0xE]
	0x037C9874 STR X9, [X31 + 0xF0]
	0x037C9878 STRH W31, [X31 + 0xFE]
	0x037C987C BL 0x21750D0
	0x037C9880 CBNZ X21, 0x37C98A0
	0x037C9884 LDP X20, X19, [X31 + 0x130]
	0x037C9888 LDP X22, X21, [X31 + 0x120]
	0x037C988C LDP X30, X23, [X31 + 0x110]
	0x037C9890 LDR X29, [X31 + 0x100]
	0x037C9894 ADD X31, X31, 0x140
	0x037C9898 RET
	0x037C989C BL 0x1C16F20
	0x037C98A0 MOV X0, X21
	0x037C98A4 BL 0x1C16F18
	0x037C98A8 B 0x37C98C0
	0x037C98AC B 0x37C98C0
	0x037C98B0 B 0x37C98C0
	0x037C98B4 B 0x37C98C0
	0x037C98B8 B 0x37C98C0
	0x037C98BC B 0x37C98C0
	0x037C98C0 MOV X22, X0
	0x037C98C4 CMP W1, 0x1
	0x037C98C8 B.NE 0x37C99B8
	0x037C98CC MOV X0, X22
	0x037C98D0 BL 0x3EB1AD0
	0x037C98D4 MOV X21, X0
	0x037C98D8 ADRP X0, 0x92A000
	0x037C98DC LDR X0, [X0 + 0x7D0]
	0x037C98E0 BL 0x1C16D08
	0x037C98E4 LDR X8, [X21]
	0x037C98E8 LDR X1, [X8]
	0x037C98EC BL 0x1C17270
	0x037C98F0 TBZ X0, 0x0, 0x37C9974
	0x037C98F4 LDR X21, [X21]
	0x037C98F8 BL 0x3EB1AE0
	0x037C98FC LDP V0, V1, [X31 + 0x80]
	0x037C9900 LDR V2, [X31 + 0xA]
	0x037C9904 LDR X8, [X31 + 0xB0]
	0x037C9908 STP V0, V1, [X31 + 0xC0]
	0x037C990C STR V2, [X31 + 0xE]
	0x037C9910 STR X8, [X31 + 0xF0]
	0x037C9914 ADRP X0, 0x955000
	0x037C9918 LDR X0, [X0 + 0x4F0]
	0x037C991C BL 0x1C16D08
	0x037C9920 ADD X1, X31, 0xC0
	0x037C9924 BL 0x1C16E04
	0x037C9928 MOV X22, X0
	0x037C992C ADRP X0, 0x97F000
	0x037C9930 LDR X0, [X0 + 0x720]
	0x037C9934 BL 0x1C16D08
	0x037C9938 MOV X1, X22
	0x037C993C MOV X2, X21
	0x037C9940 MOV X3, X31
	0x037C9944 BL 0x3227BD4
	0x037C9948 MOV X21, X0
	0x037C994C ADRP X0, 0x92A000
	0x037C9950 LDR X0, [X0 + 0xA28]
	0x037C9954 BL 0x1C16D08
	0x037C9958 LDR W8, [X0 + 0xE0]
	0x037C995C CBNZ W8, 0x37C9964
	0x037C9960 BL 0x1C16DFC
	0x037C9964 MOV X0, X21
	0x037C9968 MOV X1, X31
	0x037C996C BL 0x3C0649C
	0x037C9970 B 0x37C9834
	0x037C9974 MOVZ W0, 0x8
	0x037C9978 BL 0x3EB1AF0
	0x037C997C LDR X8, [X21]
	0x037C9980 STR X8, [X0]
	0x037C9984 ADRP X1, 0x6EB000
	0x037C9988 ADD X1, X1, 0xE58
	0x037C998C MOV X2, X31
	0x037C9990 BL 0x3EB1B00
	0x037C9994 MOV X22, X0
	0x037C9998 B 0x37C99B8
	0x037C999C B 0x37C99B4
	0x037C99A0 MOV X21, X1
	0x037C99A4 MOV X22, X0
	0x037C99A8 BL 0x3EB1AE0
	0x037C99AC MOV W1, W21
	0x037C99B0 B 0x37C99B8
	0x037C99B4 MOV X22, X0
	0x037C99B8 MOVZ W8, 0x1
	0x037C99BC CMP W1, W8
	0x037C99C0 B.NE 0x37C99DC
	0x037C99C4 MOV X0, X22
	0x037C99C8 BL 0x3EB1AD0
	0x037C99CC LDR X21, [X0]
	0x037C99D0 BL 0x3EB1AE0
	0x037C99D4 MOV W8, W31
	0x037C99D8 B 0x37C983C
	0x037C99DC MOV X21, X31
	0x037C99E0 B 0x37C99E8
	0x037C99E4 MOV X22, X0
	0x037C99E8 LDP V0, V1, [X31 + 0x80]
	0x037C99EC LDR V2, [X31 + 0xA]
	0x037C99F0 LDR X8, [X31 + 0xB0]
	0x037C99F4 LDR X4, [X23]
	0x037C99F8 ADD X0, X20, 0x90
	0x037C99FC ADD X1, X20, 0x88
	0x037C9A00 MOVZ W9, 0x1
	0x037C9A04 STP V0, V1, [X31 + 0xC0]
	0x037C9A08 STR V2, [X31 + 0xE]
	0x037C9A0C STR X8, [X31 + 0xF0]
	0x037C9A10 STP W19, W9, [X31 + 0xF8]
	0x037C9A14 ADD X2, X31, 0xC0
	0x037C9A18 MOVZ W3, 0xA
	0x037C9A1C BL 0x21750D0
	0x037C9A20 CBNZ X21, 0x37C9A2C
	0x037C9A24 MOV X0, X22
	0x037C9A28 BL 0x1D2C690
	0x037C9A2C MOV X0, X21
	0x037C9A30 BL 0x1C16F18
	0x037C9A34 BL 0x1990590
	0x037C9A38 RET
	0x037C9A3C STP X29, X30, [X31 - 0x60]!
	0x037C9A40 STP X28, X27, [X31 + 0x10]
	0x037C9A44 STP X26, X25, [X31 + 0x20]
	0x037C9A48 STP X24, X23, [X31 + 0x30]
	0x037C9A4C STP X22, X21, [X31 + 0x40]
	0x037C9A50 STP X20, X19, [X31 + 0x50]
	0x037C9A54 ADRP X21, 0xC18000
	0x037C9A58 LDRB W8, [X21 + 0x1FB]
	0x037C9A5C MOV X19, X1
	0x037C9A60 MOV X20, X0
	0x037C9A64 TBNZ X8, 0x0, 0x37C9AC4
	0x037C9A68 ADRP X0, 0x97C000
	0x037C9A6C LDR X0, [X0 + 0x338]
	0x037C9A70 BL 0x1C16CF4
	0x037C9A74 ADRP X0, 0x97C000
	0x037C9A78 LDR X0, [X0 + 0xF40]
	0x037C9A7C BL 0x1C16CF4
	0x037C9A80 ADRP X0, 0x97F000
	0x037C9A84 LDR X0, [X0 + 0x728]
	0x037C9A88 BL 0x1C16CF4
	0x037C9A8C ADRP X0, 0x97F000
	0x037C9A90 LDR X0, [X0 + 0x730]
	0x037C9A94 BL 0x1C16CF4
	0x037C9A98 ADRP X0, 0x97C000
	0x037C9A9C LDR X0, [X0 + 0xF38]
	0x037C9AA0 BL 0x1C16CF4
	0x037C9AA4 ADRP X0, 0x932000
	0x037C9AA8 LDR X0, [X0 + 0x5E8]
	0x037C9AAC BL 0x1C16CF4
	0x037C9AB0 ADRP X0, 0x97C000
	0x037C9AB4 LDR X0, [X0 + 0xF28]
	0x037C9AB8 BL 0x1C16CF4
	0x037C9ABC MOVZ W8, 0x1
	0x037C9AC0 STRB W8, [X21 + 0x1FB]
	0x037C9AC4 MOV X21, X20
	0x037C9AC8 LDR W8, [X21 + 0x98]!
	0x037C9ACC CMP W8, 0x1
	0x037C9AD0 B.LT 0x37C9BD4
	0x037C9AD4 ADRP X29, 0x97C000
	0x037C9AD8 LDR X29, [X29 + 0xF28]
	0x037C9ADC MOV W22, W31
	0x037C9AE0 LDR X8, [X20 + 0xA0]
	0x037C9AE4 CBZ X8, 0x37C9C18
	0x037C9AE8 LDR W9, [X8 + 0x18]
	0x037C9AEC CMP W22, W9
	0x037C9AF0 B.CS 0x37C9C1C
	0x037C9AF4 ADD X8, X8, W22, 0x3, SXTW
	0x037C9AF8 LDR X23, [X8 + 0x20]
	0x037C9AFC CBZ X23, 0x37C9C18
	0x037C9B00 LDP X1, X26, [X23 + 0xF0]
	0x037C9B04 LDR X0, [X29]
	0x037C9B08 LDP X27, X28, [X23 + 0x100]
	0x037C9B0C LDR X24, [X23 + 0x110]
	0x037C9B10 LDR X25, [X23 + 0x120]
	0x037C9B14 MOV X2, X19
	0x037C9B18 MOV X3, X31
	0x037C9B1C BL 0x381E228
	0x037C9B20 TBZ X0, 0x0, 0x37C9BC4
	0x037C9B24 ADRP X8, 0x97C000
	0x037C9B28 LDR X8, [X8 + 0xF40]
	0x037C9B2C MOV X1, X28
	0x037C9B30 MOV X2, X19
	0x037C9B34 MOV X3, X31
	0x037C9B38 LDR X0, [X8]
	0x037C9B3C BL 0x381E228
	0x037C9B40 TBZ X0, 0x0, 0x37C9BC4
	0x037C9B44 ADRP X8, 0x97C000
	0x037C9B48 LDR X8, [X8 + 0xF38]
	0x037C9B4C MOV X1, X27
	0x037C9B50 MOV X2, X19
	0x037C9B54 MOV X3, X31
	0x037C9B58 LDR X0, [X8]
	0x037C9B5C BL 0x381E228
	0x037C9B60 TBZ X0, 0x0, 0x37C9BC4
	0x037C9B64 ADRP X8, 0x932000
	0x037C9B68 LDR X8, [X8 + 0x5E8]
	0x037C9B6C MOV X1, X26
	0x037C9B70 MOV X2, X19
	0x037C9B74 MOV X3, X31
	0x037C9B78 LDR X0, [X8]
	0x037C9B7C BL 0x381E228
	0x037C9B80 TBZ X0, 0x0, 0x37C9BC4
	0x037C9B84 ADRP X8, 0x97F000
	0x037C9B88 LDR X8, [X8 + 0x730]
	0x037C9B8C MOV X1, X25
	0x037C9B90 MOV X2, X19
	0x037C9B94 MOV X3, X31
	0x037C9B98 LDR X0, [X8]
	0x037C9B9C BL 0x381E228
	0x037C9BA0 TBZ X0, 0x0, 0x37C9BC4
	0x037C9BA4 ADRP X8, 0x97F000
	0x037C9BA8 LDR X8, [X8 + 0x728]
	0x037C9BAC MOV X1, X24
	0x037C9BB0 MOV X2, X19
	0x037C9BB4 MOV X3, X31
	0x037C9BB8 LDR X0, [X8]
	0x037C9BBC BL 0x381E228
	0x037C9BC0 TBNZ X0, 0x0, 0x37C9BF8
	0x037C9BC4 LDR W8, [X21]
	0x037C9BC8 ADD W22, W22, 0x1
	0x037C9BCC CMP W22, W8
	0x037C9BD0 B.LT 0x37C9AE0
	0x037C9BD4 MOV X23, X31
	0x037C9BD8 MOV X0, X23
	0x037C9BDC LDP X20, X19, [X31 + 0x50]
	0x037C9BE0 LDP X22, X21, [X31 + 0x40]
	0x037C9BE4 LDP X24, X23, [X31 + 0x30]
	0x037C9BE8 LDP X26, X25, [X31 + 0x20]
	0x037C9BEC LDP X28, X27, [X31 + 0x10]
	0x037C9BF0 LDP X29, X30, [X31], #0x60
	0x037C9BF4 RET
	0x037C9BF8 ADRP X8, 0x97C000
	0x037C9BFC LDR X0, [X20 + 0xA0]
	0x037C9C00 LDR X8, [X8 + 0x338]
	0x037C9C04 MOV X1, X21
	0x037C9C08 MOV W2, W22
	0x037C9C0C LDR X3, [X8]
	0x037C9C10 BL 0x2177EC0
	0x037C9C14 B 0x37C9BD8
	0x037C9C18 BL 0x1C16F20
	0x037C9C1C BL 0x1C16F28
	0x037C9C20 RET
	0x037C9C24 SUB X31, X31, 0x70
	0x037C9C28 STR X30, [X31 + 0x30]
	0x037C9C2C STP X24, X23, [X31 + 0x40]
	0x037C9C30 STP X22, X21, [X31 + 0x50]
	0x037C9C34 STP X20, X19, [X31 + 0x60]
	0x037C9C38 ADRP X21, 0xC18000
	0x037C9C3C LDRB W8, [X21 + 0x1FD]
	0x037C9C40 MOV W20, W1
	0x037C9C44 MOV X19, X0
	0x037C9C48 TBNZ X8, 0x0, 0x37C9C6C
	0x037C9C4C ADRP X0, 0x97D000
	0x037C9C50 LDR X0, [X0 + 0xC68]
	0x037C9C54 BL 0x1C16CF4
	0x037C9C58 ADRP X0, 0x97F000
	0x037C9C5C LDR X0, [X0 + 0x738]
	0x037C9C60 BL 0x1C16CF4
	0x037C9C64 MOVZ W8, 0x1
	0x037C9C68 STRB W8, [X21 + 0x1FD]
	0x037C9C6C LDR W8, [X19 + 0xA8]
	0x037C9C70 ANDS W31, W8, W20, 0x0
	0x037C9C74 B.EQ 0x37C9DAC
	0x037C9C78 LDP V1, V0, [X19 + 0xC0]
	0x037C9C7C LDR V2, [X19 + 0xB]
	0x037C9C80 ADD X0, X31, 0x0
	0x037C9C84 MOV W1, W20
	0x037C9C88 MOV X2, X31
	0x037C9C8C STP V1, V0, [X31 + 0x10]
	0x037C9C90 STR V2, [X31]
	0x037C9C94 BL 0x380C54C
	0x037C9C98 MOV W0, W20
	0x037C9C9C MOV X1, X31
	0x037C9CA0 BL 0x3807A74
	0x037C9CA4 CMP W20, 0x4
	0x037C9CA8 B.EQ 0x37C9D90
	0x037C9CAC LDRB W8, [X19 + 0x3B1]
	0x037C9CB0 CBZ W8, 0x37C9D90
	0x037C9CB4 LDR W8, [X19 + 0x70]
	0x037C9CB8 CMP W8, 0x1
	0x037C9CBC B.LT 0x37C9D90
	0x037C9CC0 ADRP X24, 0x97D000
	0x037C9CC4 LDR X24, [X24 + 0xC68]
	0x037C9CC8 MOV W23, W31
	0x037C9CCC LDR X8, [X19 + 0x78]
	0x037C9CD0 CBZ X8, 0x37C9DC4
	0x037C9CD4 LDR W9, [X8 + 0x18]
	0x037C9CD8 CMP W23, W9
	0x037C9CDC B.CS 0x37C9DC8
	0x037C9CE0 ADD X8, X8, W23, 0x3, SXTW
	0x037C9CE4 LDR X22, [X8 + 0x20]
	0x037C9CE8 CBZ X22, 0x37C9DC4
	0x037C9CEC MOV X0, X22
	0x037C9CF0 MOV X1, X31
	0x037C9CF4 BL 0x3774978
	0x037C9CF8 TBZ X0, 0x0, 0x37C9D80
	0x037C9CFC LDR X20, [X24]
	0x037C9D00 MOV X0, X22
	0x037C9D04 MOV X1, X20
	0x037C9D08 BL 0x1C16E00
	0x037C9D0C CBZ X0, 0x37C9DCC
	0x037C9D10 LDR X21, [X24]
	0x037C9D14 MOV X0, X22
	0x037C9D18 MOV X1, X21
	0x037C9D1C BL 0x1C16E00
	0x037C9D20 CBZ X0, 0x37C9DD8
	0x037C9D24 LDR X8, [X0]
	0x037C9D28 MOV X20, X0
	0x037C9D2C LDRH W9, [X8 + 0x12E]
	0x037C9D30 CBZ X9, 0x37C9D54
	0x037C9D34 LDR X10, [X8 + 0xB0]
	0x037C9D38 ADD X10, X10, 0x8
	0x037C9D3C LDUR X11, [X10 - 0x8]
	0x037C9D40 CMP X11, X21
	0x037C9D44 B.EQ 0x37C9D68
	0x037C9D48 SUBS X9, X9, 0x1
	0x037C9D4C ADD X10, X10, 0x10
	0x037C9D50 B.NE 0x37C9D3C
	0x037C9D54 MOV X0, X20
	0x037C9D58 MOV X1, X21
	0x037C9D5C MOV W2, W31
	0x037C9D60 BL 0x1C5C788
	0x037C9D64 B 0x37C9D74
	0x037C9D68 LDRSW X9, [X10]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xC19000
	010 Move W8, [X21+497]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {55}
	017 Move X0, 0x92B000
	018 Move X0, [X0+3368]
	019 Call 0x1C17CF4
	020 Move X0, 0x980000
	021 Move X0, [X0+200]
	022 Call 0x1C17CF4
	023 Move X0, 0x980000
	024 Move X0, [X0+1760]
	025 Call 0x1C17CF4
	026 Move X0, 0x97E000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0x980000
	030 Move X0, [X0+1768]
	031 Call 0x1C17CF4
	032 Move X0, 0x953000
	033 Move X0, [X0+3792]
	034 Call 0x1C17CF4
	035 Move X0, 0x980000
	036 Move X0, [X0+208]
	037 Call 0x1C17CF4
	038 Move X0, 0x980000
	039 Move X0, [X0+1776]
	040 Call 0x1C17CF4
	041 Move X0, 0x980000
	042 Move X0, [X0+1784]
	043 Call 0x1C17CF4
	044 Move X0, 0x980000
	045 Move X0, [X0+1792]
	046 Call 0x1C17CF4
	047 Move X0, 0x980000
	048 Move X0, [X0+1800]
	049 Call 0x1C17CF4
	050 Move X0, 0x980000
	051 Move X0, [X0+1808]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+497], W8
	055 Move X22, 0x953000
	056 Move X21, [X19+1088]
	057 Move X22, [X22+3792]
	058 Compare X21, 0
	059 JumpIfEqual {187}
	060 Move X8, [X21]
	061 Move X1, [X22]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Compare X9, 0
	064 JumpIfEqual {71}
	065 Move X10, [X8+176]
	066 Add X10, X10, 8
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Subtract X9, X9, 1
	070 Add X10, X10, 16
	071 Move W2, 5
	072 Move X0, X21
	073 Call 0x1C5D788
	074 Move W9, [X10]
	075 Add W9, W9, 5
	076 Add X8, X8, W9
	077 Add X0, X8, 312
	078 Move X8, [X0]
	079 Move X2, [X0+8]
	080 Move X0, X21
	081 Move X1, X31
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Move X21, [X19+1088]
	084 Compare X21, 0
	085 JumpIfEqual {446}
	086 Move X8, [X21]
	087 Move X1, [X22]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Compare X9, 0
	090 JumpIfEqual {97}
	091 Move X10, [X8+176]
	092 Add X10, X10, 8
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Subtract X9, X9, 1
	096 Add X10, X10, 16
	097 Move W2, 7
	098 Move X0, X21
	099 Call 0x1C5D788
	100 Move W9, [X10]
	101 Add W9, W9, 7
	102 Add X8, X8, W9
	103 Add X0, X8, 312
	104 Move X8, [X0]
	105 Move X2, [X0+8]
	106 Move X0, X21
	107 Move X1, X31
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X21, [X19+1088]
	110 Compare X21, 0
	111 JumpIfEqual {446}
	112 Move X8, [X21]
	113 Move X1, [X22]
	114 NotImplemented "Instruction LDRH not yet implemented."
	115 Compare X9, 0
	116 JumpIfEqual {123}
	117 Move X10, [X8+176]
	118 Add X10, X10, 8
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Subtract X9, X9, 1
	122 Add X10, X10, 16
	123 Move W2, 11
	124 Move X0, X21
	125 Call 0x1C5D788
	126 Move W9, [X10]
	127 Add W9, W9, 11
	128 Add X8, X8, W9
	129 Add X0, X8, 312
	130 Move X8, [X0]
	131 Move X2, [X0+8]
	132 Move X0, X21
	133 Move X1, X31
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Move X21, [X19+1088]
	136 Compare X21, 0
	137 JumpIfEqual {446}
	138 Move X8, [X21]
	139 Move X1, [X22]
	140 NotImplemented "Instruction LDRH not yet implemented."
	141 Compare X9, 0
	142 JumpIfEqual {149}
	143 Move X10, [X8+176]
	144 Add X10, X10, 8
	145 NotImplemented "Instruction LDUR not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Subtract X9, X9, 1
	148 Add X10, X10, 16
	149 Move W2, 13
	150 Move X0, X21
	151 Call 0x1C5D788
	152 Move W9, [X10]
	153 Add W9, W9, 13
	154 Add X8, X8, W9
	155 Add X0, X8, 312
	156 Move X8, [X0]
	157 Move X2, [X0+8]
	158 Move X0, X21
	159 Move X1, X31
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move X21, [X19+1088]
	162 Compare X21, 0
	163 JumpIfEqual {446}
	164 Move X8, [X21]
	165 Move X1, [X22]
	166 NotImplemented "Instruction LDRH not yet implemented."
	167 Compare X9, 0
	168 JumpIfEqual {175}
	169 Move X10, [X8+176]
	170 Add X10, X10, 8
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Subtract X9, X9, 1
	174 Add X10, X10, 16
	175 Move W2, 9
	176 Move X0, X21
	177 Call 0x1C5D788
	178 Move W9, [X10]
	179 Add W9, W9, 9
	180 Add X8, X8, W9
	181 Add X0, X8, 312
	182 Move X8, [X0]
	183 Move X2, [X0+8]
	184 Move X0, X21
	185 Move X1, X31
	186 NotImplemented "Instruction BLR not yet implemented."
	187 Move X8, 0x980000
	188 Move X8, [X8+1808]
	189 Move [X19+1088], X20
	190 Move X21, 0x980000
	191 Move X0, [X8]
	192 Move X21, [X21+1792]
	193 Call 0x1C17F10
	194 Move X2, [X21]
	195 Move X1, X19
	196 Move X3, X31
	197 Move X21, X0
	198 Call InputUpdateDelegate..ctor, X0, X1, X2
	199 Compare X20, 0
	200 JumpIfEqual {446}
	201 Move X8, [X20]
	202 Move X24, 0x980000
	203 Move X23, 0x980000
	204 Move X1, [X22]
	205 NotImplemented "Instruction LDRH not yet implemented."
	206 Move X24, [X24+1760]
	207 Move X23, [X23+1784]
	208 Compare X9, 0
	209 JumpIfEqual {216}
	210 Move X10, [X8+176]
	211 Add X10, X10, 8
	212 NotImplemented "Instruction LDUR not yet implemented."
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Subtract X9, X9, 1
	215 Add X10, X10, 16
	216 Move W2, 5
	217 Move X0, X20
	218 Call 0x1C5D788
	219 Move W9, [X10]
	220 Add W9, W9, 5
	221 Add X8, X8, W9
	222 Add X0, X8, 312
	223 Move X8, [X0]
	224 Move X2, [X0+8]
	225 Move X0, X20
	226 Move X1, X21
	227 NotImplemented "Instruction BLR not yet implemented."
	228 Move X0, [X24]
	229 Move X20, [X19+1088]
	230 Call 0x1C17F10
	231 Move X2, [X23]
	232 Move X1, X19
	233 Move X3, X31
	234 Move X21, X0
	235 Call Action`2<Int32, Object>..ctor, X0, X1, X2
	236 Compare X20, 0
	237 JumpIfEqual {446}
	238 Move X8, [X20]
	239 Move X24, 0x92B000
	240 Move X23, 0x980000
	241 Move X1, [X22]
	242 NotImplemented "Instruction LDRH not yet implemented."
	243 Move X24, [X24+3368]
	244 Move X23, [X23+1776]
	245 Compare X9, 0
	246 JumpIfEqual {253}
	247 Move X10, [X8+176]
	248 Add X10, X10, 8
	249 NotImplemented "Instruction LDUR not yet implemented."
	250 NotImplemented "Instruction CMP not yet implemented."
	251 Subtract X9, X9, 1
	252 Add X10, X10, 16
	253 Move W2, 11
	254 Move X0, X20
	255 Call 0x1C5D788
	256 Move W9, [X10]
	257 Add W9, W9, 11
	258 Add X8, X8, W9
	259 Add X0, X8, 312
	260 Move X8, [X0]
	261 Move X2, [X0+8]
	262 Move X0, X20
	263 Move X1, X21
	264 NotImplemented "Instruction BLR not yet implemented."
	265 Move X0, [X24]
	266 Move X20, [X19+1088]
	267 Call 0x1C17F10
	268 Move X2, [X23]
	269 Move X1, X19
	270 Move X3, X31
	271 Move X21, X0
	272 Call Action`1<Boolean>..ctor, X0, X1, X2
	273 Compare X20, 0
	274 JumpIfEqual {446}
	275 Move X8, [X20]
	276 Move X24, 0x980000
	277 Move X23, 0x980000
	278 Move X1, [X22]
	279 NotImplemented "Instruction LDRH not yet implemented."
	280 Move X24, [X24+1768]
	281 Move X23, [X23+1800]
	282 Compare X9, 0
	283 JumpIfEqual {290}
	284 Move X10, [X8+176]
	285 Add X10, X10, 8
	286 NotImplemented "Instruction LDUR not yet implemented."
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Subtract X9, X9, 1
	289 Add X10, X10, 16
	290 Move W2, 13
	291 Move X0, X20
	292 Call 0x1C5D788
	293 Move W9, [X10]
	294 Add W9, W9, 13
	295 Add X8, X8, W9
	296 Add X0, X8, 312
	297 Move X8, [X0]
	298 Move X2, [X0+8]
	299 Move X0, X20
	300 Move X1, X21
	301 NotImplemented "Instruction BLR not yet implemented."
	302 Move X0, [X24]
	303 Move X20, [X19+1088]
	304 Call 0x1C17F10
	305 Move X2, [X23]
	306 Move X1, X19
	307 Move X3, X31
	308 Move X21, X0
	309 Call Func`2<Int32Enum, Boolean>..ctor, X0, X1, X2
	310 Compare X20, 0
	311 JumpIfEqual {446}
	312 Move X8, [X20]
	313 Move X1, [X22]
	314 NotImplemented "Instruction LDRH not yet implemented."
	315 Compare X9, 0
	316 JumpIfEqual {323}
	317 Move X10, [X8+176]
	318 Add X10, X10, 8
	319 NotImplemented "Instruction LDUR not yet implemented."
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Subtract X9, X9, 1
	322 Add X10, X10, 16
	323 Move W2, 9
	324 Move X0, X20
	325 Call 0x1C5D788
	326 Move W9, [X10]
	327 Add W9, W9, 9
	328 Add X8, X8, W9
	329 Add X0, X8, 312
	330 Move X8, [X0]
	331 Move X2, [X0+8]
	332 Move X0, X20
	333 Move X1, X21
	334 NotImplemented "Instruction BLR not yet implemented."
	335 Move X20, [X19+1088]
	336 Compare X20, 0
	337 JumpIfEqual {446}
	338 Move X8, [X20]
	339 Move V8, [X19+20]
	340 Move X1, [X22]
	341 NotImplemented "Instruction LDRH not yet implemented."
	342 Compare X9, 0
	343 JumpIfEqual {350}
	344 Move X10, [X8+176]
	345 Add X10, X10, 8
	346 NotImplemented "Instruction LDUR not yet implemented."
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Subtract X9, X9, 1
	349 Add X10, X10, 16
	350 Move W2, 18
	351 Move X0, X20
	352 Call 0x1C5D788
	353 Move W9, [X10]
	354 Add W9, W9, 18
	355 Add X8, X8, W9
	356 Add X0, X8, 312
	357 Move X8, [X0]
	358 Move X1, [X0+8]
	359 Move X0, X20
	360 Move V0, V8
	361 NotImplemented "Instruction BLR not yet implemented."
	362 Move X20, [X19+1088]
	363 Compare X20, 0
	364 JumpIfEqual {446}
	365 Move X8, [X20]
	366 Move X21, 0x97E000
	367 Move X1, [X22]
	368 NotImplemented "Instruction LDRH not yet implemented."
	369 Move X21, [X21+608]
	370 Compare X9, 0
	371 JumpIfEqual {378}
	372 Move X10, [X8+176]
	373 Add X10, X10, 8
	374 NotImplemented "Instruction LDUR not yet implemented."
	375 NotImplemented "Instruction CMP not yet implemented."
	376 Subtract X9, X9, 1
	377 Add X10, X10, 16
	378 Move W2, 14
	379 Move X0, X20
	380 Call 0x1C5D788
	381 Move W9, [X10]
	382 Add W9, W9, 14
	383 Add X8, X8, W9
	384 Add X0, X8, 312
	385 Move X8, [X0]
	386 Move X1, [X0+8]
	387 Move X0, X20
	388 NotImplemented "Instruction BLR not yet implemented."
	389 And W8, W0, 1
	390 Move [X19+946], W8
	391 Move X1, [X21]
	392 Add X0, X19, 704
	393 Call 0x28F240C, X0
	394 NotImplemented "Instruction CMP not yet implemented."
	395 Move W8, [X19+945]
	396 Compare W8, 0
	397 JumpIfEqual {437}
	398 Move X8, 0x980000
	399 Move X8, [X8+200]
	400 Move X21, 0x980000
	401 Move X20, [X19+1088]
	402 Move X0, [X8]
	403 Move X21, [X21+208]
	404 Call 0x1C17F10
	405 Move X2, [X21]
	406 Move X1, X19
	407 Move X3, X31
	408 Move X21, X0
	409 Call Action`1<Int32Enum>..ctor, X0, X1, X2
	410 Compare X20, 0
	411 JumpIfEqual {446}
	412 Move X8, [X20]
	413 Move X1, [X22]
	414 NotImplemented "Instruction LDRH not yet implemented."
	415 Compare X9, 0
	416 JumpIfEqual {423}
	417 Move X10, [X8+176]
	418 Add X10, X10, 8
	419 NotImplemented "Instruction LDUR not yet implemented."
	420 NotImplemented "Instruction CMP not yet implemented."
	421 Subtract X9, X9, 1
	422 Add X10, X10, 16
	423 Move W2, 7
	424 Move X0, X20
	425 Call 0x1C5D788
	426 Move W9, [X10]
	427 Add W9, W9, 7
	428 Add X8, X8, W9
	429 Add X0, X8, 312
	430 Move X8, [X0]
	431 Move X2, [X0+8]
	432 Move X0, X20
	433 Move X1, X21
	434 NotImplemented "Instruction BLR not yet implemented."
	435 Move W8, 1
	436 Move [X19+944], W8
	437 Move X20, [X31+48]
	438 Move X19, [X31+56]
	439 Move X22, [X31+32]
	440 Move X21, [X31+40]
	441 Move X24, [X31+16]
	442 Move X23, [X31+24]
	443 Move X30, [X31+8]
	444 Move V8, [X31+64]
	445 Return 
	446 Call 0x1C17F20

Method: System.Void InstallGlobals()

Disassembly:
	0x037C9D6C ADD X8, X8, X9, 0x4, LSL
	0x037C9D70 ADD X0, X8, 0x138
	0x037C9D74 LDP X8, X1, [X0]
	0x037C9D78 MOV X0, X20
	0x037C9D7C BLR X8
	0x037C9D80 LDR W8, [X19 + 0x70]
	0x037C9D84 ADD W23, W23, 0x1
	0x037C9D88 CMP W23, W8
	0x037C9D8C B.LT 0x37C9CCC
	0x037C9D90 ADRP X8, 0x97F000
	0x037C9D94 LDR X8, [X8 + 0x738]
	0x037C9D98 ADD X0, X19, 0x2C0
	0x037C9D9C MOV X2, X31
	0x037C9DA0 MOV X3, X31
	0x037C9DA4 LDR X1, [X8]
	0x037C9DA8 BL 0x375EFDC
	0x037C9DAC LDP X20, X19, [X31 + 0x60]
	0x037C9DB0 LDP X22, X21, [X31 + 0x50]
	0x037C9DB4 LDP X24, X23, [X31 + 0x40]
	0x037C9DB8 LDR X30, [X31 + 0x30]
	0x037C9DBC ADD X31, X31, 0x70
	0x037C9DC0 RET
	0x037C9DC4 BL 0x1C16F20
	0x037C9DC8 BL 0x1C16F28
	0x037C9DCC MOV X0, X22
	0x037C9DD0 MOV X1, X20
	0x037C9DD4 BL 0x1C171E0
	0x037C9DD8 MOV X0, X22
	0x037C9DDC MOV X1, X21
	0x037C9DE0 BL 0x1C171E0
	0x037C9DE4 STR X30, [X31 - 0x40]!
	0x037C9DE8 STP X24, X23, [X31 + 0x10]
	0x037C9DEC STP X22, X21, [X31 + 0x20]
	0x037C9DF0 STP X20, X19, [X31 + 0x30]
	0x037C9DF4 ADRP X21, 0xC18000
	0x037C9DF8 LDRB W8, [X21 + 0x200]
	0x037C9DFC MOV W19, W1
	0x037C9E00 MOV X20, X0
	0x037C9E04 TBNZ X8, 0x0, 0x37C9E28
	0x037C9E08 ADRP X0, 0x97C000
	0x037C9E0C LDR X0, [X0 + 0x330]
	0x037C9E10 BL 0x1C16CF4
	0x037C9E14 ADRP X0, 0x952000
	0x037C9E18 LDR X0, [X0 + 0xED0]
	0x037C9E1C BL 0x1C16CF4
	0x037C9E20 MOVZ W8, 0x1
	0x037C9E24 STRB W8, [X21 + 0x200]
	0x037C9E28 LDR X21, [X20 + 0x440]
	0x037C9E2C CBZ X21, 0x37CA01C
	0x037C9E30 ADRP X10, 0x952000
	0x037C9E34 LDR X8, [X21]
	0x037C9E38 LDR X10, [X10 + 0xED0]
	0x037C9E3C LDRH W9, [X8 + 0x12E]
	0x037C9E40 LDR X1, [X10]
	0x037C9E44 CBZ X9, 0x37C9E68
	0x037C9E48 LDR X10, [X8 + 0xB0]
	0x037C9E4C ADD X10, X10, 0x8
	0x037C9E50 LDUR X11, [X10 - 0x8]
	0x037C9E54 CMP X11, X1
	0x037C9E58 B.EQ 0x37C9E78
	0x037C9E5C SUBS X9, X9, 0x1
	0x037C9E60 ADD X10, X10, 0x10
	0x037C9E64 B.NE 0x37C9E50
	0x037C9E68 MOVZ W2, 0x17
	0x037C9E6C MOV X0, X21
	0x037C9E70 BL 0x1C5C788
	0x037C9E74 B 0x37C9E88
	0x037C9E78 LDR W9, [X10]
	0x037C9E7C ADD W9, W9, 0x17
	0x037C9E80 ADD X8, X8, W9, 0x4, SXTW
	0x037C9E84 ADD X0, X8, 0x138
	0x037C9E88 LDP X8, X1, [X0]
	0x037C9E8C MOV X0, X21
	0x037C9E90 BLR X8
	0x037C9E94 LDR X8, [X20 + 0x480]
	0x037C9E98 CBZ X8, 0x37CA01C
	0x037C9E9C LDR W8, [X8 + 0x30]
	0x037C9EA0 MOV W21, W0
	0x037C9EA4 CMP W8, 0x2
	0x037C9EA8 CSET W8, EQ
	0x037C9EAC AND W8, W0, W8, 0x0
	0x037C9EB0 TBNZ X8, 0x0, 0x37CA000
	0x037C9EB4 TBZ X19, 0x0, 0x37C9F60
	0x037C9EB8 LDR W8, [X20 + 0x70]
	0x037C9EBC CMP W8, 0x1
	0x037C9EC0 B.LT 0x37CA000
	0x037C9EC4 MOV X24, X31
	0x037C9EC8 LDR X8, [X20 + 0x78]
	0x037C9ECC CBZ X8, 0x37CA01C
	0x037C9ED0 LDR W9, [X8 + 0x18]
	0x037C9ED4 CMP W24, W9
	0x037C9ED8 B.CS 0x37CA020
	0x037C9EDC ADD X8, X8, X24, 0x3, LSL
	0x037C9EE0 LDR X23, [X8 + 0x20]
	0x037C9EE4 CBZ X23, 0x37CA01C
	0x037C9EE8 MOV X0, X23
	0x037C9EEC MOV X1, X31
	0x037C9EF0 BL 0x377B204
	0x037C9EF4 TBZ X0, 0x0, 0x37C9F10
	0x037C9EF8 MOVZ W2, 0x1
	0x037C9EFC MOVZ W3, 0x2
	0x037C9F00 MOV X0, X20
	0x037C9F04 MOV X1, X23
	0x037C9F08 BL 0x37C5BEC
	0x037C9F0C B 0x37C9F4C
	0x037C9F10 MOV X0, X23
	0x037C9F14 MOV X1, X31
	0x037C9F18 BL 0x377A8A4
	0x037C9F1C ORN W8, W21, W0, 0x0
	0x037C9F20 TBNZ X8, 0x0, 0x37C9F4C
	0x037C9F24 MOV X0, X23
	0x037C9F28 MOV X1, X31
	0x037C9F2C BL 0x376EE10
	0x037C9F30 TBNZ X0, 0x0, 0x37C9F4C
	0x037C9F34 AND X22, X22, 0xFFFFFFFF
	0x037C9F38 MOV X0, X20
	0x037C9F3C MOV X1, X23
	0x037C9F40 MOV W2, W31
	0x037C9F44 MOV X3, X22
	0x037C9F48 BL 0x37C6480
	0x037C9F4C LDR W8, [X20 + 0x70]
	0x037C9F50 ADD X24, X24, 0x1
	0x037C9F54 CMP W24, W8
	0x037C9F58 B.LT 0x37C9EC8
	0x037C9F5C B 0x37CA000
	0x037C9F60 TBZ X21, 0x0, 0x37CA000
	0x037C9F64 LDR W8, [X20 + 0x70]
	0x037C9F68 CMP W8, 0x1
	0x037C9F6C B.LT 0x37CA000
	0x037C9F70 ADRP X23, 0x97C000
	0x037C9F74 LDR X23, [X23 + 0x330]
	0x037C9F78 MOV W22, W31

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+112], X30
	003 Move [X31+128], X24
	004 Move [X31+136], X23
	005 Move [X31+144], X22
	006 Move [X31+152], X21
	007 Move [X31+160], X20
	008 Move [X31+168], X19
	009 Move X21, 0xC19000
	010 Move X20, 0x953000
	011 Move W8, [X21+498]
	012 Move X20, [X20+3520]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0x953000
	019 Move X0, [X0+3792]
	020 Call 0x1C17CF4
	021 Move X0, 0x953000
	022 Move X0, [X0+3112]
	023 Call 0x1C17CF4
	024 Move X0, 0x953000
	025 Move X0, [X0+3520]
	026 Call 0x1C17CF4
	027 Move X0, 0x953000
	028 Move X0, [X0+3120]
	029 Call 0x1C17CF4
	030 Move X0, 0x953000
	031 Move X0, [X0+3136]
	032 Call 0x1C17CF4
	033 Move X0, 0x953000
	034 Move X0, [X0+3784]
	035 Call 0x1C17CF4
	036 Move X0, 0x956000
	037 Move X0, [X0+4072]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+498], W8
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 Move X0, [X20]
	046 Move X24, 0x953000
	047 Move [X31+80], V2
	048 Move [X31+88], V1
	049 Move [X31+48], V0
	050 Move [X31+56], V3
	051 Move X23, 0x953000
	052 Move X22, 0x953000
	053 Move X21, 0x953000
	054 Move W8, [X0+224]
	055 Move X24, [X24+3136]
	056 Move X23, [X23+3120]
	057 Move X22, [X22+3112]
	058 Move X21, [X21+3784]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X20]
	063 Move X8, [X0+184]
	064 Move V1, [X31+80]
	065 Move V0, [X31+96]
	066 Move V3, [X31+48]
	067 Move V2, [X31+64]
	068 Move [X8+48], V1
	069 Move [X8+56], V0
	070 Move [X8+16], V3
	071 Move [X8+24], V2
	072 Move X8, [X24]
	073 Move X9, [X19+88]
	074 Move X8, [X8+184]
	075 Move [X8], X9
	076 Move X8, [X23]
	077 Move X9, [X19+96]
	078 Move X8, [X8+184]
	079 Move [X8], X9
	080 Move X8, [X22]
	081 Move X9, [X19+104]
	082 Move X8, [X8+184]
	083 Move [X8], X9
	084 Move X8, [X21]
	085 Move X20, [X19+1088]
	086 Move X8, [X8+184]
	087 Move [X8], X20
	088 Compare X20, 0
	089 JumpIfEqual {150}
	090 Move X10, 0x953000
	091 Move X8, [X20]
	092 Move X10, [X10+3792]
	093 Move X22, 0x956000
	094 NotImplemented "Instruction LDRH not yet implemented."
	095 Move X1, [X10]
	096 Move X22, [X22+4072]
	097 Compare X9, 0
	098 JumpIfEqual {105}
	099 Move X10, [X8+176]
	100 Add X10, X10, 8
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Subtract X9, X9, 1
	104 Add X10, X10, 16
	105 Move W2, 22
	106 Move X0, X20
	107 Call 0x1C5D788
	108 Move W9, [X10]
	109 Add W9, W9, 22
	110 Add X8, X8, W9
	111 Add X0, X8, 312
	112 Move X8, [X0]
	113 Move X1, [X0+8]
	114 Move X0, X20
	115 NotImplemented "Instruction BLR not yet implemented."
	116 Move X8, [X21]
	117 Move X0, X31
	118 Move X1, X31
	119 Move X2, X31
	120 Move X8, [X8+184]
	121 Move [X8+8], D0
	122 Call InputUpdate.Restore, X0
	123 Move V1, [X19+192]
	124 Move V0, [X19+208]
	125 Move V2, [X19+11]
	126 Add X0, X31, 0
	127 Move W1, 1
	128 Move X2, X31
	129 Move [X31+16], V1
	130 Move [X31+24], V0
	131 Move [X31], V2
	132 Call InputStateBuffers.SwitchTo, X0, X1
	133 Move X8, [X22]
	134 Move X9, [X19+184]
	135 Move X24, [X31+128]
	136 Move X23, [X31+136]
	137 Move X30, [X31+112]
	138 Move X8, [X8+184]
	139 Move [X8], X9
	140 Move X8, [X22]
	141 Move V0, [X19+12]
	142 Move X20, [X31+160]
	143 Move X19, [X31+168]
	144 Move X22, [X31+144]
	145 Move X21, [X31+152]
	146 Move X8, [X8+184]
	147 Move [X8+8], V0
	148 Add X31, X31, 176
	149 Return 
	150 Call 0x1C17F20

Method: System.Void UninstallGlobals()

Disassembly:
	0x037CA088 ADRP X0, 0x97E000
	0x037CA08C LDR X0, [X0 + 0x1E8]
	0x037CA090 BL 0x1C16CF4
	0x037CA094 ADRP X0, 0x97E000
	0x037CA098 LDR X0, [X0 + 0x740]
	0x037CA09C BL 0x1C16CF4
	0x037CA0A0 ADRP X0, 0x929000
	0x037CA0A4 LDR X0, [X0 + 0xA28]
	0x037CA0A8 BL 0x1C16CF4
	0x037CA0AC ADRP X0, 0x97D000
	0x037CA0B0 LDR X0, [X0 + 0xD28]
	0x037CA0B4 BL 0x1C16CF4
	0x037CA0B8 ADRP X0, 0x97E000
	0x037CA0BC LDR X0, [X0 + 0x748]
	0x037CA0C0 BL 0x1C16CF4
	0x037CA0C4 ADRP X0, 0x951000
	0x037CA0C8 LDR X0, [X0 + 0xF10]
	0x037CA0CC BL 0x1C16CF4
	0x037CA0D0 ADRP X0, 0x951000
	0x037CA0D4 LDR X0, [X0 + 0xF18]
	0x037CA0D8 BL 0x1C16CF4
	0x037CA0DC ADRP X0, 0x951000
	0x037CA0E0 LDR X0, [X0 + 0xF20]
	0x037CA0E4 BL 0x1C16CF4
	0x037CA0E8 ADRP X0, 0x97E000
	0x037CA0EC LDR X0, [X0 + 0x200]
	0x037CA0F0 BL 0x1C16CF4
	0x037CA0F4 ADRP X0, 0x97E000
	0x037CA0F8 LDR X0, [X0 + 0x208]
	0x037CA0FC BL 0x1C16CF4
	0x037CA100 ADRP X0, 0x951000
	0x037CA104 LDR X0, [X0 + 0xED0]
	0x037CA108 BL 0x1C16CF4
	0x037CA10C ADRP X0, 0x97C000
	0x037CA110 LDR X0, [X0 + 0xC68]
	0x037CA114 BL 0x1C16CF4
	0x037CA118 ADRP X0, 0x97E000
	0x037CA11C LDR X0, [X0 + 0x750]
	0x037CA120 BL 0x1C16CF4
	0x037CA124 ADRP X0, 0x951000
	0x037CA128 LDR X0, [X0 + 0xEC8]
	0x037CA12C BL 0x1C16CF4
	0x037CA130 ADRP X0, 0x951000
	0x037CA134 LDR X0, [X0 + 0xD18]
	0x037CA138 BL 0x1C16CF4
	0x037CA13C ADRP X0, 0x951000
	0x037CA140 LDR X0, [X0 + 0x270]
	0x037CA144 BL 0x1C16CF4
	0x037CA148 ADRP X0, 0x951000
	0x037CA14C LDR X0, [X0 + 0xF30]
	0x037CA150 BL 0x1C16CF4
	0x037CA154 ADRP X0, 0x931000
	0x037CA158 LDR X0, [X0 + 0x708]
	0x037CA15C BL 0x1C16CF4
	0x037CA160 ADRP X0, 0x97D000
	0x037CA164 LDR X0, [X0 + 0xD40]
	0x037CA168 BL 0x1C16CF4
	0x037CA16C ADRP X0, 0x97E000
	0x037CA170 LDR X0, [X0 + 0x758]
	0x037CA174 BL 0x1C16CF4
	0x037CA178 ADRP X0, 0x97E000
	0x037CA17C LDR X0, [X0 + 0x760]
	0x037CA180 BL 0x1C16CF4
	0x037CA184 MOVZ W8, 0x1
	0x037CA188 STRB W8, [X19 + 0x201]
	0x037CA18C MOVI V0.2D, 0x0
	0x037CA190 STP X31, X31, [X31 + 0xF0]
	0x037CA194 STR X31, [X31 + 0x100]
	0x037CA198 STP X31, X31, [X31 + 0xE0]
	0x037CA19C STP X31, X31, [X31 + 0xD0]
	0x037CA1A0 STP V0, V0, [X31 + 0xB0]
	0x037CA1A4 STR V0, [X31 + 0xA]
	0x037CA1A8 LDRB W8, [X20 + 0x428]
	0x037CA1AC CBNZ W8, 0x37CB0EC
	0x037CA1B0 LDR W8, [X20 + 0xA8]
	0x037CA1B4 ANDS W31, W8, W21, 0x0
	0x037CA1B8 B.EQ 0x37CB070
	0x037CA1BC LDR W8, [X20 + 0x468]
	0x037CA1C0 LDR X23, [X20 + 0x440]
	0x037CA1C4 STR X22, [X31 + 0x50]
	0x037CA1C8 ADD W8, W8, 0x1
	0x037CA1CC STR W8, [X20 + 0x468]
	0x037CA1D0 CBZ X23, 0x37CB0E8
	0x037CA1D4 ADRP X25, 0x951000
	0x037CA1D8 LDR X8, [X23]
	0x037CA1DC LDR X25, [X25 + 0xED0]
	0x037CA1E0 ADRP X28, 0x951000
	0x037CA1E4 ADRP X22, 0x951000
	0x037CA1E8 LDRH W9, [X8 + 0x12E]
	0x037CA1EC LDR X1, [X25]
	0x037CA1F0 LDR X28, [X28 + 0xEC8]
	0x037CA1F4 LDR X22, [X22 + 0xF30]
	0x037CA1F8 ADD X19, X20, 0x3B8
	0x037CA1FC CBZ X9, 0x37CA220
	0x037CA200 LDR X10, [X8 + 0xB0]
	0x037CA204 ADD X10, X10, 0x8
	0x037CA208 LDUR X11, [X10 - 0x8]
	0x037CA20C CMP X11, X1
	0x037CA210 B.EQ 0x37CA230
	0x037CA214 SUBS X9, X9, 0x1
	0x037CA218 ADD X10, X10, 0x10
	0x037CA21C B.NE 0x37CA208
	0x037CA220 MOVZ W2, 0x16
	0x037CA224 MOV X0, X23
	0x037CA228 BL 0x1C5C788
	0x037CA22C B 0x37CA240
	0x037CA230 LDR W9, [X10]
	0x037CA234 ADD W9, W9, 0x16
	0x037CA238 ADD X8, X8, W9, 0x4, SXTW
	0x037CA23C ADD X0, X8, 0x138
	0x037CA240 LDP X8, X1, [X0]
	0x037CA244 ADRP X26, 0x951000
	0x037CA248 ADRP X27, 0x951000
	0x037CA24C ADRP X24, 0x951000
	0x037CA250 LDR X26, [X26 + 0xF18]
	0x037CA254 LDR X27, [X27 + 0xF20]
	0x037CA258 LDR X24, [X24 + 0xF10]
	0x037CA25C MOV X0, X23
	0x037CA260 BLR X8
	0x037CA264 LDR X8, [X28]
	0x037CA268 ADD X0, X31, 0x70
	0x037CA26C MOV W1, W21
	0x037CA270 MOV X2, X31
	0x037CA274 LDR X8, [X8 + 0xB8]
	0x037CA278 STR D0, [X8 + 0x8]
	0x037CA27C LDP V2, V0, [X20 + 0xC0]
	0x037CA280 LDR V1, [X20 + 0xB]
	0x037CA284 STP V2, V0, [X31 + 0x80]
	0x037CA288 STR V1, [X31 + 0x7]
	0x037CA28C BL 0x380C54C
	0x037CA290 MOV W0, W21
	0x037CA294 MOV X1, X31
	0x037CA298 STR W21, [X20 + 0xAC]
	0x037CA29C BL 0x3807B0C
	0x037CA2A0 MOV X0, X20
	0x037CA2A4 BL 0x37BB5A0
	0x037CA2A8 LDR X9, [X22]
	0x037CA2AC STP X0, X1, [X31 + 0xE0]
	0x037CA2B0 ADD X8, X31, 0x220
	0x037CA2B4 ADD X0, X31, 0xE0
	0x037CA2B8 MOV X1, X9
	0x037CA2BC BL 0x24FD990
	0x037CA2C0 LDR V0, [X31 + 0x22]
	0x037CA2C4 LDR X8, [X31 + 0x230]
	0x037CA2C8 STR V0, [X31 + 0xF]
	0x037CA2CC STR X8, [X31 + 0x100]
	0x037CA2D0 LDR X1, [X26]
	0x037CA2D4 ADD X0, X31, 0xF0
	0x037CA2D8 BL 0x2BC496C
	0x037CA2DC TBZ X0, 0x0, 0x37CA2F0
	0x037CA2E0 LDR X1, [X27]
	0x037CA2E4 ADD X0, X31, 0xF0
	0x037CA2E8 BL 0x2BC4998
	0x037CA2EC B 0x37CA2D0
	0x037CA2F0 LDR X1, [X24]
	0x037CA2F4 ADD X0, X31, 0xF0
	0x037CA2F8 BL 0x2BC4968
	0x037CA2FC MOV W0, W21
	0x037CA300 MOV X1, X31
	0x037CA304 BL 0x3807CC8
	0x037CA308 LDR X24, [X20 + 0x440]
	0x037CA30C STR W0, [X31 + 0x4C]
	0x037CA310 CBZ X24, 0x37CB0E8
	0x037CA314 LDR X8, [X24]
	0x037CA318 LDR X1, [X25]
	0x037CA31C CMP W21, 0x2
	0x037CA320 LDRH W9, [X8 + 0x12E]
	0x037CA324 B.NE 0x37CA354
	0x037CA328 CBZ W9, 0x37CA34C
	0x037CA32C LDR X10, [X8 + 0xB0]
	0x037CA330 ADD X10, X10, 0x8
	0x037CA334 LDUR X11, [X10 - 0x8]
	0x037CA338 CMP X11, X1
	0x037CA33C B.EQ 0x37CA388
	0x037CA340 SUBS X9, X9, 0x1
	0x037CA344 ADD X10, X10, 0x10
	0x037CA348 B.NE 0x37CA334
	0x037CA34C MOVZ W2, 0x14
	0x037CA350 B 0x37CA37C
	0x037CA354 CBZ W9, 0x37CA378
	0x037CA358 LDR X10, [X8 + 0xB0]
	0x037CA35C ADD X10, X10, 0x8
	0x037CA360 LDUR X11, [X10 - 0x8]
	0x037CA364 CMP X11, X1
	0x037CA368 B.EQ 0x37CA394
	0x037CA36C SUBS X9, X9, 0x1
	0x037CA370 ADD X10, X10, 0x10
	0x037CA374 B.NE 0x37CA360
	0x037CA378 MOVZ W2, 0x13
	0x037CA37C MOV X0, X24
	0x037CA380 BL 0x1C5C788
	0x037CA384 B 0x37CA3A4
	0x037CA388 LDR W9, [X10]
	0x037CA38C ADD W9, W9, 0x14
	0x037CA390 B 0x37CA39C
	0x037CA394 LDR W9, [X10]
	0x037CA398 ADD W9, W9, 0x13
	0x037CA39C ADD X8, X8, W9, 0x4, SXTW
	0x037CA3A0 ADD X0, X8, 0x138
	0x037CA3A4 LDP X8, X1, [X0]
	0x037CA3A8 MOV X0, X24
	0x037CA3AC BLR X8
	0x037CA3B0 MOV V8.16B, V0.16B
	0x037CA3B4 CMP W21, 0x4
	0x037CA3B8 B.EQ 0x37CA3C4
	0x037CA3BC CMP W21, 0x2
	0x037CA3C0 B.NE 0x37CA3FC
	0x037CA3C4 ADRP X8, 0x951000
	0x037CA3C8 LDR X8, [X8 + 0x270]
	0x037CA3CC LDR X0, [X8]
	0x037CA3D0 LDR W8, [X0 + 0xE0]
	0x037CA3D4 CBNZ W8, 0x37CA3DC
	0x037CA3D8 BL 0x1C16DFC
	0x037CA3DC MOV X0, X31
	0x037CA3E0 BL 0x37701B0
	0x037CA3E4 CBZ X0, 0x37CB0E8
	0x037CA3E8 LDR W8, [X0 + 0x20]
	0x037CA3EC CMP W8, 0x2
	0x037CA3F0 CSET W8, EQ
	0x037CA3F4 STR W8, [X31 + 0x6C]
	0x037CA3F8 B 0x37CA400
	0x037CA3FC STR W31, [X31 + 0x6C]
	0x037CA400 LDRB W8, [X20 + 0x3B2]
	0x037CA404 CBNZ W8, 0x37CA41C
	0x037CA408 LDR X8, [X20 + 0x480]
	0x037CA40C CBZ X8, 0x37CB0E8
	0x037CA410 LDR W8, [X8 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC18000
	006 Move X20, 0x952000
	007 Move W8, [X21+499]
	008 Move X20, [X20+3520]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x952000
	015 Move X0, [X0+3792]
	016 Call 0x1C17CF4
	017 Move X0, 0x952000
	018 Move X0, [X0+3112]
	019 Call 0x1C17CF4
	020 Move X0, 0x952000
	021 Move X0, [X0+3520]
	022 Call 0x1C17CF4
	023 Move X0, 0x952000
	024 Move X0, [X0+3120]
	025 Call 0x1C17CF4
	026 Move X0, 0x952000
	027 Move X0, [X0+3136]
	028 Call 0x1C17CF4
	029 Move X0, 0x952000
	030 Move X0, [X0+3784]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+499], W8
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X20]
	040 Move X8, [X0+184]
	041 Move X10, [X19+48]
	042 Move X21, 0x952000
	043 Move X9, [X8+40]
	044 Move X21, [X21+3136]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W9, [X0+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Call 0x1C17DFC
	050 Move X8, [X20]
	051 Move X8, [X8+184]
	052 NotImplemented "Instruction MOVI not yet implemented."
	053 Move [X8+48], V0
	054 Move [X8+56], V0
	055 Move [X8+16], V0
	056 Move [X8+24], V0
	057 Move X8, [X21]
	058 Move X10, [X19+88]
	059 Move X8, [X8+184]
	060 Move X9, [X8]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X9, 0x952000
	063 Move X9, [X9+3120]
	064 Move [X8], X31
	065 Move X8, [X9]
	066 Move X10, [X19+96]
	067 Move X8, [X8+184]
	068 Move X9, [X8]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X9, 0x952000
	071 Move X9, [X9+3112]
	072 Move [X8], X31
	073 Move X8, [X9]
	074 Move X10, [X19+104]
	075 Move X8, [X8+184]
	076 Move X9, [X8]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move [X8], X31
	079 Move X0, [X20]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X20]
	085 Move X8, [X0+184]
	086 Move [X8+80], X31
	087 Move X8, [X0+184]
	088 Move [X8+88], W31
	089 Move X20, [X19+1088]
	090 Compare X20, 0
	091 JumpIfEqual {229}
	092 Move X21, 0x952000
	093 Move X8, [X20]
	094 Move X21, [X21+3792]
	095 NotImplemented "Instruction LDRH not yet implemented."
	096 Move X1, [X21]
	097 Compare X9, 0
	098 JumpIfEqual {105}
	099 Move X10, [X8+176]
	100 Add X10, X10, 8
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Subtract X9, X9, 1
	104 Add X10, X10, 16
	105 Move W2, 5
	106 Move X0, X20
	107 Call 0x1C5D788
	108 Move W9, [X10]
	109 Add W9, W9, 5
	110 Add X8, X8, W9
	111 Add X0, X8, 312
	112 Move X8, [X0]
	113 Move X2, [X0+8]
	114 Move X0, X20
	115 Move X1, X31
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Move X20, [X19+1088]
	118 Compare X20, 0
	119 JumpIfEqual {234}
	120 Move X8, [X20]
	121 Move X1, [X21]
	122 NotImplemented "Instruction LDRH not yet implemented."
	123 Compare X9, 0
	124 JumpIfEqual {131}
	125 Move X10, [X8+176]
	126 Add X10, X10, 8
	127 NotImplemented "Instruction LDUR not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Subtract X9, X9, 1
	130 Add X10, X10, 16
	131 Move W2, 11
	132 Move X0, X20
	133 Call 0x1C5D788
	134 Move W9, [X10]
	135 Add W9, W9, 11
	136 Add X8, X8, W9
	137 Add X0, X8, 312
	138 Move X8, [X0]
	139 Move X2, [X0+8]
	140 Move X0, X20
	141 Move X1, X31
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move X20, [X19+1088]
	144 Compare X20, 0
	145 JumpIfEqual {234}
	146 Move X8, [X20]
	147 Move X1, [X21]
	148 NotImplemented "Instruction LDRH not yet implemented."
	149 Compare X9, 0
	150 JumpIfEqual {157}
	151 Move X10, [X8+176]
	152 Add X10, X10, 8
	153 NotImplemented "Instruction LDUR not yet implemented."
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Subtract X9, X9, 1
	156 Add X10, X10, 16
	157 Move W2, 7
	158 Move X0, X20
	159 Call 0x1C5D788
	160 Move W9, [X10]
	161 Add W9, W9, 7
	162 Add X8, X8, W9
	163 Add X0, X8, 312
	164 Move X8, [X0]
	165 Move X2, [X0+8]
	166 Move X0, X20
	167 Move X1, X31
	168 NotImplemented "Instruction BLR not yet implemented."
	169 Move X20, [X19+1088]
	170 Compare X20, 0
	171 JumpIfEqual {234}
	172 Move X8, [X20]
	173 Move X1, [X21]
	174 NotImplemented "Instruction LDRH not yet implemented."
	175 Compare X9, 0
	176 JumpIfEqual {183}
	177 Move X10, [X8+176]
	178 Add X10, X10, 8
	179 NotImplemented "Instruction LDUR not yet implemented."
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Subtract X9, X9, 1
	182 Add X10, X10, 16
	183 Move W2, 13
	184 Move X0, X20
	185 Call 0x1C5D788
	186 Move W9, [X10]
	187 Add W9, W9, 13
	188 Add X8, X8, W9
	189 Add X0, X8, 312
	190 Move X8, [X0]
	191 Move X2, [X0+8]
	192 Move X0, X20
	193 Move X1, X31
	194 NotImplemented "Instruction BLR not yet implemented."
	195 Move X20, [X19+1088]
	196 Compare X20, 0
	197 JumpIfEqual {234}
	198 Move X8, [X20]
	199 Move X1, [X21]
	200 Move X21, 0x952000
	201 NotImplemented "Instruction LDRH not yet implemented."
	202 Move X21, [X21+3784]
	203 Compare X9, 0
	204 JumpIfEqual {211}
	205 Move X10, [X8+176]
	206 Add X10, X10, 8
	207 NotImplemented "Instruction LDUR not yet implemented."
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Subtract X9, X9, 1
	210 Add X10, X10, 16
	211 Move W2, 9
	212 Move X0, X20
	213 Call 0x1C5D788
	214 Move W9, [X10]
	215 Add W9, W9, 9
	216 Add X8, X8, W9
	217 Add X0, X8, 312
	218 Move X8, [X0]
	219 Move X2, [X0+8]
	220 Move X0, X20
	221 Move X1, X31
	222 NotImplemented "Instruction BLR not yet implemented."
	223 Move X8, [X21]
	224 Move X10, [X19+1088]
	225 Move X8, [X8+184]
	226 Move X9, [X8]
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move [X8], X31
	229 Move X20, [X31+16]
	230 Move X19, [X31+24]
	231 Move X30, [X31+32]
	232 Move X21, [X31+40]
	233 Return 
	234 Call 0x1C17F20

Method: System.Void MakeDeviceNameUnique(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037C6600 B.EQ 0x37C6884
	0x037C6604 SUBS X9, X9, 0x1
	0x037C6608 ADD X10, X10, 0x10
	0x037C660C B.NE 0x37C65F8
	0x037C6610 MOV X0, X21
	0x037C6614 MOV W2, W31
	0x037C6618 BL 0x1C5C788
	0x037C661C B 0x37C6890
	0x037C6620 ADRP X21, 0xC15000
	0x037C6624 ADRP X29, 0x955000
	0x037C6628 LDRB W8, [X21 + 0xA03]
	0x037C662C LDR X29, [X29 + 0xD18]
	0x037C6630 CBNZ W8, 0x37C6648
	0x037C6634 ADRP X0, 0x958000
	0x037C6638 LDR X0, [X0 + 0xFE8]
	0x037C663C BL 0x1C16CF4
	0x037C6640 MOVZ W8, 0x1
	0x037C6644 STRB W8, [X21 + 0xA03]
	0x037C6648 ADRP X8, 0x958000
	0x037C664C LDR X8, [X8 + 0xFE8]
	0x037C6650 LDR V0, [X19 + 0x1]
	0x037C6654 LDR X0, [X29]
	0x037C6658 ADRP X21, 0x981000
	0x037C665C LDR X8, [X8]
	0x037C6660 ADRP X22, 0x981000
	0x037C6664 LDR X8, [X8 + 0xB8]
	0x037C6668 LDR X28, [X8]
	0x037C666C STR V0, [X31 + 0x1]
	0x037C6670 LDR W8, [X0 + 0xE0]
	0x037C6674 LDR X21, [X21 + 0xFE0]
	0x037C6678 LDR X22, [X22 + 0xFE8]
	0x037C667C CBNZ W8, 0x37C6684
	0x037C6680 BL 0x1C16DFC
	0x037C6684 ADRP X27, 0x955000
	0x037C6688 LDR X27, [X27 + 0xD68]
	0x037C668C ADD X0, X31, 0x10
	0x037C6690 MOV X1, X31
	0x037C6694 BL 0x3800B6C
	0x037C6698 LDR X4, [X21]
	0x037C669C ADD W24, W0, 0x18
	0x037C66A0 MOV W21, W0
	0x037C66A4 ADD X0, X31, 0x0
	0x037C66A8 MOVZ W2, 0x2
	0x037C66AC MOVZ W3, 0x1
	0x037C66B0 MOV W1, W24
	0x037C66B4 BL 0x23C9B94
	0x037C66B8 LDP X0, X1, [X31]
	0x037C66BC LDR X2, [X22]
	0x037C66C0 BL 0x2222688
	0x037C66C4 MOV X22, X0
	0x037C66C8 MOV X1, X31
	0x037C66CC BL 0x3807298
	0x037C66D0 LDR X25, [X20 + 0x440]
	0x037C66D4 CBZ X25, 0x37C6990
	0x037C66D8 ADRP X10, 0x955000
	0x037C66DC LDR X8, [X25]
	0x037C66E0 LDR X10, [X10 + 0xED0]
	0x037C66E4 MOV X23, X0
	0x037C66E8 LDRH W9, [X8 + 0x12E]
	0x037C66EC LDR X1, [X10]
	0x037C66F0 CBZ X9, 0x37C6714
	0x037C66F4 LDR X10, [X8 + 0xB0]
	0x037C66F8 ADD X10, X10, 0x8
	0x037C66FC LDUR X11, [X10 - 0x8]
	0x037C6700 CMP X11, X1
	0x037C6704 B.EQ 0x37C6724
	0x037C6708 SUBS X9, X9, 0x1
	0x037C670C ADD X10, X10, 0x10
	0x037C6710 B.NE 0x37C66FC
	0x037C6714 MOVZ W2, 0x13
	0x037C6718 MOV X0, X25
	0x037C671C BL 0x1C5C788
	0x037C6720 B 0x37C6734
	0x037C6724 LDR W9, [X10]
	0x037C6728 ADD W9, W9, 0x13
	0x037C672C ADD X8, X8, W9, 0x4, SXTW
	0x037C6730 ADD X0, X8, 0x138
	0x037C6734 LDP X8, X1, [X0]
	0x037C6738 MOV X0, X25
	0x037C673C BLR X8
	0x037C6740 CBZ X22, 0x37C6994
	0x037C6744 MOV V8.16B, V0.16B
	0x037C6748 MOVZ W1, 0x4154
	0x037C674C MOVK W1, 0x53540000
	0x037C6750 MOV X0, X22
	0x037C6754 MOV X2, X31
	0x037C6758 BL 0x38011A0
	0x037C675C MOV X0, X22
	0x037C6760 MOV W1, W24
	0x037C6764 MOV X2, X31
	0x037C6768 BL 0x38011A8
	0x037C676C MOV X0, X22
	0x037C6770 MOV V0.16B, V8.16B
	0x037C6774 MOV X1, X31
	0x037C6778 BL 0x38012CC
	0x037C677C LDR W1, [X19 + 0xE0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xC1C000
	011 Move W8, [X21+500]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x983000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move X0, 0x983000
	022 Move X0, [X0+632]
	023 Call 0x1C17CF4
	024 Move X0, 0x983000
	025 Move X0, [X0+640]
	026 Call 0x1C17CF4
	027 Move X0, 0x983000
	028 Move X0, [X0+648]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+500], W8
	032 Move W8, [X20+112]
	033 Compare W8, 0
	034 JumpIfEqual {106}
	035 Compare X19, 0
	036 JumpIfEqual {116}
	037 Move X24, 0x983000
	038 Move X24, [X24+648]
	039 Move X0, X19
	040 Move X1, X31
	041 Call InputControl.get_name, X0
	042 Move X8, [X24]
	043 Move X20, [X20+120]
	044 Move X21, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {51}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X8, [X24]
	051 Move X9, [X8+184]
	052 Move X25, 0x983000
	053 Move X22, [X9+8]
	054 Move X25, [X25+632]
	055 Compare X22, 0
	056 JumpIfNotEqual {79}
	057 Move W9, [X8+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {63}
	060 Move X0, X8
	061 Call 0x1C17DFC
	062 Move X8, [X24]
	063 Move X9, 0x983000
	064 Move X8, [X8+184]
	065 Move X9, [X9+624]
	066 Move X23, [X8]
	067 Move X0, [X9]
	068 Call 0x1C17F10
	069 Move X8, 0x983000
	070 Move X8, [X8+640]
	071 Move X1, X23
	072 Move X3, X31
	073 Move X22, X0
	074 Move X2, [X8]
	075 Call Func`2<Object, Object>..ctor, X0, X1, X2
	076 Move X8, [X24]
	077 Move X8, [X8+184]
	078 Move [X8+8], X22
	079 Move X3, [X25]
	080 Move X0, X21
	081 Move X1, X20
	082 Move X2, X22
	083 Call 0x228E5E8, X0, X1, X2
	084 Move X20, X0
	085 Move X0, X19
	086 Move X1, X31
	087 Call InputControl.get_name, X0
	088 Move X1, X0
	089 Move X0, X20
	090 Move X2, X31
	091 Call String.op_Inequality, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {106}
	096 Move X0, X19
	097 Call InputManager.ResetControlPathsRecursive, X0
	098 Add X0, X31, 0
	099 Move X1, X20
	100 Move X2, X31
	101 Move [X31], X31
	102 Move [X31+8], X31
	103 Call InternedString..ctor, X0, X1
	104 Move V0, [X31]
	105 Move [X19+2], V0
	106 Move X20, [X31+64]
	107 Move X19, [X31+72]
	108 Move X22, [X31+48]
	109 Move X21, [X31+56]
	110 Move X24, [X31+32]
	111 Move X23, [X31+40]
	112 Move X30, [X31+16]
	113 Move X25, [X31+24]
	114 Add X31, X31, 80
	115 Return 
	116 Call 0x1C17F20

Method: System.Void ResetControlPathsRecursive(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x037CA414 CMP W8, 0x2
	0x037CA418 B.NE 0x37CA47C
	0x037CA41C MOV W22, W31
	0x037CA420 LDR X8, [X31 + 0x60]
	0x037CA424 LDR W8, [X8 + 0x18]
	0x037CA428 CMP W8, 0x0
	0x037CA42C CSET W8, EQ
	0x037CA430 ORR W8, W22, W8, 0x0
	0x037CA434 CBZ W8, 0x37CA468
	0x037CA438 LDR W8, [X31 + 0x4C]
	0x037CA43C TBZ X8, 0x0, 0x37CA448
	0x037CA440 MOV X0, X20
	0x037CA444 BL 0x37CB3C0
	0x037CA448 MOV X0, X20
	0x037CA44C MOV W1, W21
	0x037CA450 BL 0x37CB674
	0x037CA454 CBZ W22, 0x37CB068
	0x037CA458 LDR X0, [X31 + 0x60]
	0x037CA45C MOV X1, X31
	0x037CA460 BL 0x3801E88
	0x037CA464 B 0x37CB068
	0x037CA468 LDRB W9, [X20 + 0x3B2]
	0x037CA46C LDR X8, [X20 + 0x480]
	0x037CA470 CBZ W9, 0x37CA4C4
	0x037CA474 CBNZ X8, 0x37CA4D4
	0x037CA478 B 0x37CB0E8
	0x037CA47C LDR X23, [X20 + 0x440]
	0x037CA480 CBZ X23, 0x37CB0E8
	0x037CA484 LDR X8, [X23]
	0x037CA488 LDR X1, [X25]
	0x037CA48C LDRH W9, [X8 + 0x12E]
	0x037CA490 CBZ X9, 0x37CA4B4
	0x037CA494 LDR X10, [X8 + 0xB0]
	0x037CA498 ADD X10, X10, 0x8
	0x037CA49C LDUR X11, [X10 - 0x8]
	0x037CA4A0 CMP X11, X1
	0x037CA4A4 B.EQ 0x37CB0BC
	0x037CA4A8 SUBS X9, X9, 0x1
	0x037CA4AC ADD X10, X10, 0x10
	0x037CA4B0 B.NE 0x37CA49C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC18000
	007 Move W8, [X20+501]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x952000
	014 Move X0, [X0+3392]
	015 Call 0x1C17CF4
	016 Move X0, 0x952000
	017 Move X0, [X0+3400]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+501], W8
	021 Compare X19, 0
	022 JumpIfEqual {49}
	023 Move X0, X19
	024 Move X1, X31
	025 Move [X19+48], X31
	026 Call InputControl.get_children, X0
	027 Move X20, X1
	028 ShiftRight X20, 32
	029 And X20, X20, 0x7FFFFFFF
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X31], X0
	032 Move [X31+8], X1
	033 Move X21, 0x952000
	034 Move X21, [X21+3400]
	035 Move W19, W31
	036 Move X2, [X21]
	037 Add X0, X31, 0
	038 Move W1, W19
	039 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	040 Call InputManager.ResetControlPathsRecursive, X0
	041 Add W19, W19, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+16]
	046 Move X21, [X31+24]
	047 Add X31, X31, 48
	048 Return 
	049 Call 0x1C17F20

Method: System.Void AssignUniqueDeviceId(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037C6780 MOV X0, X22
	0x037C6784 MOV X2, X31
	0x037C6788 BL 0x3801270
	0x037C678C MOVN W1, 0x0
	0x037C6790 MOV X0, X22
	0x037C6794 MOV X2, X31
	0x037C6798 BL 0x3801254
	0x037C679C LDR X0, [X29]
	0x037C67A0 LDR W8, [X0 + 0xE0]
	0x037C67A4 CBNZ W8, 0x37C67AC
	0x037C67A8 BL 0x1C16DFC
	0x037C67AC LDR W8, [X19 + 0x10]
	0x037C67B0 STR W8, [X22 + 0x14]
	0x037C67B4 CBZ W26, 0x37C67E4
	0x037C67B8 LDR X0, [X29]
	0x037C67BC LDR W8, [X0 + 0xE0]
	0x037C67C0 CBNZ W8, 0x37C67C8
	0x037C67C4 BL 0x1C16DFC
	0x037C67C8 LDR W8, [X19 + 0x14]
	0x037C67CC MOV W2, W21
	0x037C67D0 ADD X1, X8, X28
	0x037C67D4 MOV X0, X23
	0x037C67D8 MOV X3, X31
	0x037C67DC BL 0x3BFF954
	0x037C67E0 B 0x37C683C
	0x037C67E4 MOV X0, X19
	0x037C67E8 MOV X1, X31
	0x037C67EC BL 0x3772640
	0x037C67F0 MOV X24, X0
	0x037C67F4 LDR X0, [X29]
	0x037C67F8 LDR X25, [X20 + 0xC8]
	0x037C67FC LDR W8, [X0 + 0xE0]
	0x037C6800 CBNZ W8, 0x37C6808
	0x037C6804 BL 0x1C16DFC
	0x037C6808 LDR W8, [X19 + 0x14]
	0x037C680C MOV W2, W21
	0x037C6810 ADD X1, X8, X24
	0x037C6814 MOV X0, X23
	0x037C6818 MOV X3, X31
	0x037C681C BL 0x3BFF954
	0x037C6820 LDR W8, [X19 + 0x14]
	0x037C6824 ADD X1, X8, X28
	0x037C6828 ADD X3, X8, X25
	0x037C682C MOV X0, X23
	0x037C6830 MOV W2, W21
	0x037C6834 MOV X4, X31
	0x037C6838 BL 0x3762A00
	0x037C683C LDR W2, [X20 + 0xAC]
	0x037C6840 CBNZ W2, 0x37C6854
	0x037C6844 LDR W0, [X20 + 0xA8]
	0x037C6848 MOV X1, X31
	0x037C684C BL 0x3807CA8
	0x037C6850 MOV W2, W0
	0x037C6854 MOV X0, X20
	0x037C6858 MOV X1, X19
	0x037C685C MOV X3, X23
	0x037C6860 MOV W4, W31
	0x037C6864 MOV W5, W21
	0x037C6868 MOV V0.16B, V8.16B
	0x037C686C MOV X6, X22
	0x037C6870 BL 0x37C6A44
	0x037C6874 LDR X1, [X27]
	0x037C6878 ADD X0, X31, 0x0
	0x037C687C BL 0x23C9DBC
	0x037C6880 B 0x37C689C
	0x037C6884 LDRSW X9, [X10]
	0x037C6888 ADD X8, X8, X9, 0x4, LSL
	0x037C688C ADD X0, X8, 0x138
	0x037C6890 LDP X8, X1, [X0]
	0x037C6894 MOV X0, X21
	0x037C6898 BLR X8
	0x037C689C LDRB W8, [X31 + 0x2C]
	0x037C68A0 CBZ W8, 0x37C68EC
	0x037C68A4 ADRP X8, 0x931000
	0x037C68A8 LDR X8, [X8 + 0xBF8]
	0x037C68AC ADD X0, X31, 0x2C
	0x037C68B0 LDR X1, [X8]
	0x037C68B4 BL 0x242D58C
	0x037C68B8 TBZ X0, 0x0, 0x37C68C8
	0x037C68BC MOV X0, X19
	0x037C68C0 MOV X1, X31
	0x037C68C4 BL 0x376EF5C
	0x037C68C8 LDP X20, X19, [X31 + 0x80]
	0x037C68CC LDP X22, X21, [X31 + 0x70]
	0x037C68D0 LDP X24, X23, [X31 + 0x60]
	0x037C68D4 LDP X26, X25, [X31 + 0x50]
	0x037C68D8 LDP X28, X27, [X31 + 0x40]
	0x037C68DC LDP X29, X30, [X31 + 0x30]
	0x037C68E0 LDR V8, [X31 + 0x20]
	0x037C68E4 ADD X31, X31, 0x90
	0x037C68E8 RET
	0x037C68EC CBNZ W26, 0x37C68BC
	0x037C68F0 B 0x37C68C8
	0x037C68F4 ADRP X0, 0x932000
	0x037C68F8 LDR X0, [X0 + 0x528]
	0x037C68FC BL 0x1C16D08
	0x037C6900 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC1C000
	007 Move W8, [X21+502]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x956000
	015 Move X0, [X0+3792]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+502], W8
	019 Compare X19, 0
	020 JumpIfEqual {107}
	021 Move W1, [X19+224]
	022 Compare W1, 0
	023 JumpIfEqual {74}
	024 Move X0, X20
	025 Call InputManager.TryGetDeviceById, X0, X1
	026 Compare X0, 0
	027 JumpIfEqual {101}
	028 Move X20, X0
	029 Move X0, X19
	030 Call 0x19913C0
	031 Move W8, [X19+224]
	032 Move X0, 0x92E000
	033 Move [X31+12], W8
	034 Move X0, [X0+1880]
	035 Call 0x1C17D08
	036 Add X1, X31, 12
	037 Call 0x1C17E04
	038 Move X21, X0
	039 Move X0, X19
	040 Call 0x19913C0
	041 Move X0, X19
	042 Move X1, X31
	043 Call InputControl.get_name, X0
	044 Move X19, X0
	045 Move X0, X20
	046 Call 0x19913C0
	047 Move X0, X20
	048 Move X1, X31
	049 Call InputControl.get_name, X0
	050 Move X20, X0
	051 Move X0, 0x983000
	052 Move X0, [X0+656]
	053 Call 0x1C17D08
	054 Move X1, X21
	055 Move X2, X19
	056 Move X3, X20
	057 Move X4, X31
	058 Call String.Format, X0, X1, X2, X3
	059 Move X19, X0
	060 Move X0, 0x92E000
	061 Move X0, [X0+1456]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X1, X19
	065 Move X2, X31
	066 Move X20, X0
	067 Call InvalidOperationException..ctor, X0, X1
	068 Move X0, 0x983000
	069 Move X0, [X0+664]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X20
	073 Call 0x1C17DEC
	074 Move X20, [X20+1088]
	075 Compare X20, 0
	076 JumpIfEqual {107}
	077 Move X10, 0x956000
	078 Move X8, [X20]
	079 Move X10, [X10+3792]
	080 NotImplemented "Instruction LDRH not yet implemented."
	081 Move X1, [X10]
	082 Compare X9, 0
	083 JumpIfEqual {90}
	084 Move X10, [X8+176]
	085 Add X10, X10, 8
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract X9, X9, 1
	089 Add X10, X10, 16
	090 Move X0, X20
	091 Move W2, W31
	092 Call 0x1C5D788
	093 NotImplemented "Instruction LDRSW not yet implemented."
	094 Add X8, X8, X9
	095 Add X0, X8, 312
	096 Move X8, [X0]
	097 Move X1, [X0+8]
	098 Move X0, X20
	099 NotImplemented "Instruction BLR not yet implemented."
	100 Move [X19+224], W0
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X30, [X31+16]
	104 Move X21, [X31+24]
	105 Add X31, X31, 48
	106 Return 
	107 Call 0x1C17F20

Method: System.Void ReallocateStateBuffers()

Disassembly:
	0x037C2C54 MOVZ W1, 0x4
	0x037C2C58 MOV X0, X19
	0x037C2C5C BL 0x1993444
	0x037C2C60 MOV X0, X19
	0x037C2C64 MOV X1, X31
	0x037C2C68 BL 0x32278CC
	0x037C2C6C MOV X19, X0
	0x037C2C70 ADRP X0, 0x939000
	0x037C2C74 LDR X0, [X0 + 0x578]
	0x037C2C78 BL 0x1C16D08
	0x037C2C7C BL 0x1C16F10
	0x037C2C80 MOV X20, X0
	0x037C2C84 ADRP X0, 0x939000
	0x037C2C88 LDR X0, [X0 + 0x5E8]
	0x037C2C8C BL 0x1C16D08
	0x037C2C90 MOV X2, X0
	0x037C2C94 MOV X0, X20
	0x037C2C98 MOV X1, X19
	0x037C2C9C MOV X3, X31
	0x037C2CA0 BL 0x330E16C
	0x037C2CA4 ADRP X0, 0x986000
	0x037C2CA8 LDR X0, [X0 + 0xF0]
	0x037C2CAC BL 0x1C16D08
	0x037C2CB0 MOV X1, X0
	0x037C2CB4 MOV X0, X20
	0x037C2CB8 BL 0x1C16DEC
	0x037C2CBC MOV X19, X0
	0x037C2CC0 MOV X24, X31
	0x037C2CC4 B 0x37C2CCC
	0x037C2CC8 MOV X19, X0
	0x037C2CCC LDR X1, [X29]
	0x037C2CD0 ADD X0, X31, 0x80
	0x037C2CD4 BL 0x2C01DC8
	0x037C2CD8 CBNZ X24, 0x37C2CE4
	0x037C2CDC MOV X0, X19
	0x037C2CE0 BL 0x1D2C690
	0x037C2CE4 MOV X0, X24
	0x037C2CE8 BL 0x1C16F18
	0x037C2CEC BL 0x1990590
	0x037C2CF0 SUB X31, X31, 0xA0
	0x037C2CF4 STP X29, X30, [X31 + 0x40]
	0x037C2CF8 STP X28, X27, [X31 + 0x50]
	0x037C2CFC STP X26, X25, [X31 + 0x60]
	0x037C2D00 STP X24, X23, [X31 + 0x70]
	0x037C2D04 STP X22, X21, [X31 + 0x80]
	0x037C2D08 STP X20, X19, [X31 + 0x90]
	0x037C2D0C ADRP X21, 0xC1F000
	0x037C2D10 STP X1, X2, [X31 + 0x30]
	0x037C2D14 ADRP X20, 0x959000
	0x037C2D18 LDRB W8, [X21 + 0x1D0]
	0x037C2D1C LDR X20, [X20 + 0xDC0]
	0x037C2D20 MOV W23, W6
	0x037C2D24 MOV W25, W5
	0x037C2D28 MOV W24, W4
	0x037C2D2C MOV X22, X3
	0x037C2D30 MOV X19, X0
	0x037C2D34 TBNZ X8, 0x0, 0x37C2DB8
	0x037C2D38 ADRP X0, 0x986000
	0x037C2D3C LDR X0, [X0 + 0x108]
	0x037C2D40 BL 0x1C16CF4
	0x037C2D44 ADRP X0, 0x984000
	0x037C2D48 LDR X0, [X0 + 0x840]
	0x037C2D4C BL 0x1C16CF4
	0x037C2D50 ADRP X0, 0x986000
	0x037C2D54 LDR X0, [X0 + 0x110]
	0x037C2D58 BL 0x1C16CF4
	0x037C2D5C ADRP X0, 0x984000
	0x037C2D60 LDR X0, [X0 + 0x848]
	0x037C2D64 BL 0x1C16CF4
	0x037C2D68 ADRP X0, 0x984000
	0x037C2D6C LDR X0, [X0 + 0x850]
	0x037C2D70 BL 0x1C16CF4
	0x037C2D74 ADRP X0, 0x986000
	0x037C2D78 LDR X0, [X0 + 0x118]
	0x037C2D7C BL 0x1C16CF4
	0x037C2D80 ADRP X0, 0x986000
	0x037C2D84 LDR X0, [X0 + 0x120]
	0x037C2D88 BL 0x1C16CF4
	0x037C2D8C ADRP X0, 0x985000
	0x037C2D90 LDR X0, [X0 + 0xD80]
	0x037C2D94 BL 0x1C16CF4
	0x037C2D98 ADRP X0, 0x959000
	0x037C2D9C LDR X0, [X0 + 0xDC0]
	0x037C2DA0 BL 0x1C16CF4
	0x037C2DA4 ADRP X0, 0x986000
	0x037C2DA8 LDR X0, [X0 + 0x128]
	0x037C2DAC BL 0x1C16CF4
	0x037C2DB0 MOVZ W8, 0x1
	0x037C2DB4 STRB W8, [X21 + 0x1D0]
	0x037C2DB8 STP X31, X31, [X31 + 0x20]
	0x037C2DBC LDR W8, [X19 + 0x10]
	0x037C2DC0 ADD W8, W8, 0x1
	0x037C2DC4 STR W8, [X19 + 0x10]
	0x037C2DC8 LDR X0, [X20]
	0x037C2DCC LDR W8, [X0 + 0xE0]
	0x037C2DD0 CBNZ W8, 0x37C2DDC
	0x037C2DD4 BL 0x1C16DFC
	0x037C2DD8 LDR X0, [X20]
	0x037C2DDC LDR X8, [X0 + 0xB8]

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+288], X29
	003 Move [X31+296], X30
	004 Move [X31+304], X22
	005 Move [X31+312], X21
	006 Move [X31+320], X20
	007 Move [X31+328], X19
	008 Move X22, 0xC20000
	009 Move X21, 0x95D000
	010 Move X20, 0x983000
	011 Move W8, [X22+503]
	012 Move X21, [X21+4072]
	013 Move X20, [X20+3984]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x95D000
	020 Move X0, [X0+4072]
	021 Call 0x1C17CF4
	022 Move X0, 0x983000
	023 Move X0, [X0+3984]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+503], W8
	027 Move V0, [X19+176]
	028 Move V1, [X19+192]
	029 Move V2, [X19+13]
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move [X31+192], V3
	032 Move [X31+200], V3
	033 Move [X31+224], V3
	034 Move [X31+232], V0
	035 Move [X31+256], V1
	036 Move [X31+264], V2
	037 Move X1, [X19+120]
	038 Move W2, [X19+112]
	039 Add X0, X31, 192
	040 Move X3, X31
	041 Call InputStateBuffers.AllocateAll, X0, X1, X2
	042 Move X1, [X19+120]
	043 Move V0, [X31+240]
	044 Move V1, [X31+256]
	045 Move V2, [X31+17]
	046 Move W2, [X19+112]
	047 Add X0, X31, 192
	048 Add X3, X31, 48
	049 Move X4, X31
	050 Move [X31+48], V0
	051 Move [X31+56], V1
	052 Move [X31+5], V2
	053 Call InputStateBuffers.MigrateAll, X0, X1, X2, X3
	054 Add X0, X31, 240
	055 Move X1, X31
	056 Call InputStateBuffers.FreeAll, X0
	057 Move V1, [X31+208]
	058 Move V0, [X31+224]
	059 Move V2, [X31+12]
	060 Move [X19+192], V1
	061 Move [X19+200], V0
	062 Move [X19+11], V2
	063 Move X8, [X21]
	064 Move X9, [X31+200]
	065 Move X8, [X8+184]
	066 Move [X8], X9
	067 Move X8, [X21]
	068 Move X9, [X31+208]
	069 Move X8, [X8+184]
	070 Move [X8+8], X9
	071 Move X9, [X31+216]
	072 Move [X8+16], X9
	073 Move V1, [X19+192]
	074 Move V0, [X19+208]
	075 Move V2, [X19+11]
	076 Move X8, [X20]
	077 Move [X31+112], V1
	078 Move [X31+120], V0
	079 Move [X31+6], V2
	080 Move X8, [X8+184]
	081 Move W1, [X8+4]
	082 Compare W1, 0
	083 JumpIfEqual {91}
	084 Move V0, [X31+96]
	085 Move V1, [X31+112]
	086 Move V2, [X31+8]
	087 Add X19, X31, 144
	088 Move [X31+144], V0
	089 Move [X31+152], V1
	090 Move [X31+11], V2
	091 Move V0, [X31+96]
	092 Move V1, [X31+112]
	093 Move V2, [X31+8]
	094 Move [X31+144], V0
	095 Move [X31+152], V1
	096 Move [X31+11], V2
	097 Move W1, [X19+172]
	098 Compare W1, 0
	099 JumpIfEqual {101}
	100 Add X19, X31, 144
	101 Move W0, [X19+168]
	102 Move X1, X31
	103 Add X19, X31, 144
	104 Call InputUpdate.GetUpdateTypeForPlayer, X0
	105 Move W1, W0
	106 Move V1, [X19+16]
	107 Move V0, [X19+32]
	108 Move V2, [X19]
	109 Add X0, X31, 0
	110 Move X2, X31
	111 Move [X31+112], V1
	112 Move [X31+120], V0
	113 Move [X31+6], V2
	114 Move [X31], V2
	115 Move [X31+8], V1
	116 Move [X31+2], V0
	117 Call InputStateBuffers.SwitchTo, X0, X1
	118 Move X20, [X31+320]
	119 Move X19, [X31+328]
	120 Move X22, [X31+304]
	121 Move X21, [X31+312]
	122 Move X29, [X31+288]
	123 Move X30, [X31+296]
	124 Add X31, X31, 336
	125 Return 

Method: System.Void InitializeDefaultState(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037CA4B4 MOVZ W2, 0x17
	0x037CA4B8 MOV X0, X23
	0x037CA4BC BL 0x1C5C788
	0x037CA4C0 B 0x37CB0CC
	0x037CA4C4 CBZ X8, 0x37CB0E8
	0x037CA4C8 LDR W8, [X8 + 0x30]
	0x037CA4CC CMP W8, 0x2
	0x037CA4D0 B.NE 0x37CB0A8
	0x037CA4D4 ADRP X8, 0x931000
	0x037CA4D8 LDR X8, [X8 + 0x708]
	0x037CA4DC LDR X0, [X8]
	0x037CA4E0 LDR W8, [X0 + 0xE0]
	0x037CA4E4 CBNZ W8, 0x37CA4EC
	0x037CA4E8 BL 0x1C16DFC
	0x037CA4EC MOV X0, X31
	0x037CA4F0 BL 0x364BF5C
	0x037CA4F4 LDR X8, [X20 + 0x480]
	0x037CA4F8 STR X0, [X31 + 0x38]
	0x037CA4FC CBZ X8, 0x37CB150
	0x037CA500 LDR W2, [X8 + 0x28]
	0x037CA504 MOVI V0.2D, 0x0
	0x037CA508 STR X31, [X31 + 0x290]
	0x037CA50C STP V0, V0, [X31 + 0x270]
	0x037CA510 STP V0, V0, [X31 + 0x250]
	0x037CA514 STP V0, V0, [X31 + 0x230]
	0x037CA518 STR V0, [X31 + 0x22]
	0x037CA51C LDR X1, [X31 + 0x60]
	0x037CA520 ADD X0, X31, 0x220
	0x037CA524 MOV X3, X31
	0x037CA528 BL 0x3802EF8
	0x037CA52C ADD X1, X31, 0x220
	0x037CA530 MOVZ W2, 0x78
	0x037CA534 MOV X0, X19
	0x037CA538 BL 0x3EB1AC0
	0x037CA53C ADD X8, X20, 0xA0
	0x037CA540 STP X8, X31, [X31 + 0x18]
	0x037CA544 ADD X8, X20, 0x98
	0x037CA548 ADD X9, X20, 0x270
	0x037CA54C STR X8, [X31 + 0x10]
	0x037CA550 ADD X8, X20, 0xE0
	0x037CA554 MOV X29, X31
	0x037CA558 STR W31, [X31 + 0x5C]
	0x037CA55C STP X8, X9, [X31 + 0x28]
	0x037CA560 FMOV D10, X31
	0x037CA564 STR X29, [X31 + 0x40]
	0x037CA568 MOV X0, X19
	0x037CA56C MOV X1, X31
	0x037CA570 BL 0x3802E58
	0x037CA574 CMP W0, 0x0
	0x037CA578 B.LE 0x37CAFDC
	0x037CA57C LDR X8, [X20 + 0x480]
	0x037CA580 CBZ X8, 0x37CB0E4
	0x037CA584 LDR W8, [X8 + 0x24]
	0x037CA588 CMP W8, 0x1
	0x037CA58C B.LT 0x37CA59C
	0x037CA590 LDR W9, [X31 + 0x5C]
	0x037CA594 CMP W9, W8
	0x037CA598 B.CS 0x37CAFB0
	0x037CA59C MOV X0, X19
	0x037CA5A0 MOV X1, X31
	0x037CA5A4 BL 0x3802E70
	0x037CA5A8 MOV X27, X0
	0x037CA5AC CMP W21, 0x4
	0x037CA5B0 B.NE 0x37CA64C
	0x037CA5B4 MOV X26, X31
	0x037CA5B8 MOV X0, X19
	0x037CA5BC MOV X1, X31
	0x037CA5C0 BL 0x3802E58
	0x037CA5C4 CMP W0, 0x0
	0x037CA5C8 B.LE 0x37CA650
	0x037CA5CC MOV X0, X27
	0x037CA5D0 MOV X1, X31
	0x037CA5D4 BL 0x3801268
	0x037CA5D8 MOV W1, W0
	0x037CA5DC MOV X0, X20
	0x037CA5E0 BL 0x37BC094
	0x037CA5E4 MOV X26, X0
	0x037CA5E8 CBZ X0, 0x37CA634
	0x037CA5EC MOV X0, X26
	0x037CA5F0 MOV X1, X31
	0x037CA5F4 BL 0x377AA28
	0x037CA5F8 TBZ X0, 0x0, 0x37CA634
	0x037CA5FC MOV X0, X27
	0x037CA600 MOV X1, X31
	0x037CA604 BL 0x3801198
	0x037CA608 MOVZ W8, 0x4154
	0x037CA60C MOVK W8, 0x53540000
	0x037CA610 CMP W0, W8
	0x037CA614 B.EQ 0x37CA650
	0x037CA618 MOV X0, X27
	0x037CA61C MOV X1, X31
	0x037CA620 BL 0x3801198
	0x037CA624 MOVZ W8, 0x5441
	0x037CA628 MOVK W8, 0x444C0000
	0x037CA62C CMP W0, W8
	0x037CA630 B.EQ 0x37CA650
	0x037CA634 MOVZ W1, 0x1
	0x037CA638 MOV X0, X19
	0x037CA63C MOV X2, X31
	0x037CA640 BL 0x3803298
	0x037CA644 MOV X27, X0
	0x037CA648 B 0x37CA5B8
	0x037CA64C MOV X26, X31
	0x037CA650 MOV X0, X19
	0x037CA654 MOV X1, X31
	0x037CA658 BL 0x3802E58
	0x037CA65C CBZ W0, 0x37CAFDC
	0x037CA660 MOV X0, X27

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X30
	003 Move [X31+48], X28
	004 Move [X31+56], X27
	005 Move [X31+64], X26
	006 Move [X31+72], X25
	007 Move [X31+80], X24
	008 Move [X31+88], X23
	009 Move [X31+96], X22
	010 Move [X31+104], X21
	011 Move [X31+112], X20
	012 Move [X31+120], X19
	013 Move X19, 0xC18000
	014 Move W8, [X19+504]
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x952000
	022 Move X0, [X0+3352]
	023 Call 0x1C17CF4
	024 Move X0, 0x952000
	025 Move X0, [X0+3392]
	026 Call 0x1C17CF4
	027 Move X0, 0x952000
	028 Move X0, [X0+3400]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X19+504], W8
	032 Move [X31], X31
	033 Move [X31+8], X31
	034 Compare X20, 0
	035 JumpIfEqual {137}
	036 Move X0, X20
	037 Move X1, X31
	038 Call InputDevice.get_hasControlsWithDefaultState, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {124}
	043 Move X0, X20
	044 Move X1, X31
	045 Call InputDevice.get_allControls, X0
	046 Move [X31+16], X0
	047 Move [X31+24], X1
	048 Move X19, [X21+184]
	049 Move X26, X1
	050 ShiftRight X26, 32
	051 And X26, X26, 0x7FFFFFFF
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X27, 0x952000
	054 Move X28, 0x952000
	055 Move X27, [X27+3400]
	056 Move X28, [X28+3352]
	057 Move W22, W31
	058 Move X2, [X27]
	059 Add X0, X31, 16
	060 Move W1, W22
	061 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {137}
	064 Move X1, X31
	065 Move X23, X0
	066 Call InputControl.get_hasDefaultState, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {84}
	071 Move X0, [X28]
	072 Move X25, [X23+168]
	073 Move X24, [X23+176]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Add X0, X23, 16
	079 Move X1, X19
	080 Move X2, X25
	081 Move X3, X24
	082 Move X4, X31
	083 Call InputStateBlock.Write, X0, X1, X2
	084 Add W22, W22, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move V0, [X20+1]
	087 Add X21, X21, 216
	088 Move X0, X21
	089 Move X1, X31
	090 Move [X31], V0
	091 Move W20, [X20+232]
	092 Call DoubleBuffers.get_valid, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {124}
	097 Move X0, X21
	098 Move W1, W20
	099 Move X2, X31
	100 Call DoubleBuffers.GetFrontBuffer, X0, X1
	101 Move X8, 0x952000
	102 Move X8, [X8+3352]
	103 Move X22, X0
	104 Move X8, [X8]
	105 Move W9, [X8+224]
	106 Compare W9, 0
	107 JumpIfNotEqual {110}
	108 Move X0, X8
	109 Call 0x1C17DFC
	110 Add X0, X31, 0
	111 Move X1, X22
	112 Move X2, X19
	113 Move X3, X31
	114 Call InputStateBlock.CopyToFrom, X0, X1, X2
	115 Move X0, X21
	116 Move W1, W20
	117 Move X2, X31
	118 Call DoubleBuffers.GetBackBuffer, X0, X1
	119 Move X1, X0
	120 Add X0, X31, 0
	121 Move X2, X19
	122 Move X3, X31
	123 Call InputStateBlock.CopyToFrom, X0, X1, X2
	124 Move X20, [X31+112]
	125 Move X19, [X31+120]
	126 Move X22, [X31+96]
	127 Move X21, [X31+104]
	128 Move X24, [X31+80]
	129 Move X23, [X31+88]
	130 Move X26, [X31+64]
	131 Move X25, [X31+72]
	132 Move X28, [X31+48]
	133 Move X27, [X31+56]
	134 Move X30, [X31+32]
	135 Add X31, X31, 128
	136 Return 
	137 Call 0x1C17F20

Method: System.Void InitializeDeviceState(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037C6904 MOV X19, X0
	0x037C6908 ADRP X0, 0x955000
	0x037C690C LDR X0, [X0 + 0xD20]
	0x037C6910 BL 0x1C16D08
	0x037C6914 MOV X1, X0
	0x037C6918 MOV X0, X19
	0x037C691C MOV X2, X31
	0x037C6920 BL 0x330E100
	0x037C6924 ADRP X0, 0x982000
	0x037C6928 LDR X0, [X0 + 0x2E0]
	0x037C692C BL 0x1C16D08
	0x037C6930 MOV X1, X0
	0x037C6934 MOV X0, X19
	0x037C6938 BL 0x1C16DEC
	0x037C693C ADRP X0, 0x982000
	0x037C6940 LDR X0, [X0 + 0x2E8]
	0x037C6944 BL 0x1C16D08
	0x037C6948 MOV X1, X19
	0x037C694C MOV X2, X31
	0x037C6950 BL 0x321EFD0
	0x037C6954 MOV X19, X0
	0x037C6958 ADRP X0, 0x92D000
	0x037C695C LDR X0, [X0 + 0x5B0]
	0x037C6960 BL 0x1C16D08
	0x037C6964 BL 0x1C16F10
	0x037C6968 MOV X1, X19
	0x037C696C MOV X2, X31
	0x037C6970 MOV X20, X0
	0x037C6974 BL 0x337DF1C
	0x037C6978 ADRP X0, 0x982000
	0x037C697C LDR X0, [X0 + 0x2E0]
	0x037C6980 BL 0x1C16D08
	0x037C6984 MOV X1, X0
	0x037C6988 MOV X0, X20
	0x037C698C BL 0x1C16DEC
	0x037C6990 BL 0x1C16F20
	0x037C6994 BL 0x1C16F20
	0x037C6998 B 0x37C69E0
	0x037C699C B 0x37C69E0
	0x037C69A0 B 0x37C69E0
	0x037C69A4 B 0x37C69E0
	0x037C69A8 B 0x37C69E0
	0x037C69AC B 0x37C69E0
	0x037C69B0 B 0x37C69E0
	0x037C69B4 B 0x37C69E0
	0x037C69B8 B 0x37C69E0
	0x037C69BC B 0x37C69E0
	0x037C69C0 B 0x37C69E0
	0x037C69C4 B 0x37C69E0
	0x037C69C8 B 0x37C69E0
	0x037C69CC B 0x37C69E0
	0x037C69D0 B 0x37C69E0
	0x037C69D4 B 0x37C69E0
	0x037C69D8 B 0x37C69E0
	0x037C69DC B 0x37C69E0
	0x037C69E0 MOV X20, X0
	0x037C69E4 CMP W1, 0x1
	0x037C69E8 B.NE 0x37C6A14
	0x037C69EC MOV X0, X20
	0x037C69F0 BL 0x3EB1AD0
	0x037C69F4 LDR X21, [X0]
	0x037C69F8 BL 0x3EB1AE0
	0x037C69FC LDR X1, [X27]
	0x037C6A00 ADD X0, X31, 0x0
	0x037C6A04 BL 0x23C9DBC
	0x037C6A08 CBZ X21, 0x37C689C
	0x037C6A0C MOV X0, X21
	0x037C6A10 BL 0x1C16F18
	0x037C6A14 MOV X21, X31
	0x037C6A18 B 0x37C6A20
	0x037C6A1C MOV X20, X0
	0x037C6A20 LDR X1, [X27]
	0x037C6A24 ADD X0, X31, 0x0
	0x037C6A28 BL 0x23C9DBC
	0x037C6A2C CBNZ X21, 0x37C6A38
	0x037C6A30 MOV X0, X20
	0x037C6A34 BL 0x1D2C690
	0x037C6A38 MOV X0, X21
	0x037C6A3C BL 0x1C16F18
	0x037C6A40 BL 0x1990590
	0x037C6A44 SUB X31, X31, 0x80
	0x037C6A48 STR D8, [X31 + 0x10]
	0x037C6A4C STP X29, X30, [X31 + 0x20]
	0x037C6A50 STP X28, X27, [X31 + 0x30]
	0x037C6A54 STP X26, X25, [X31 + 0x40]
	0x037C6A58 STP X24, X23, [X31 + 0x50]
	0x037C6A5C STP X22, X21, [X31 + 0x60]
	0x037C6A60 STP X20, X19, [X31 + 0x70]
	0x037C6A64 ADRP X25, 0xC1B000
	0x037C6A68 LDRB W8, [X25 + 0x204]
	0x037C6A6C MOV X19, X6
	0x037C6A70 MOV V8.16B, V0.16B
	0x037C6A74 MOV W22, W5
	0x037C6A78 MOV W24, W4
	0x037C6A7C MOV X23, X3
	0x037C6A80 MOV W26, W2
	0x037C6A84 MOV X21, X1
	0x037C6A88 MOV X20, X0
	0x037C6A8C TBNZ X8, 0x0, 0x37C6AC8
	0x037C6A90 ADRP X0, 0x982000
	0x037C6A94 LDR X0, [X0 + 0x2F0]
	0x037C6A98 BL 0x1C16CF4
	0x037C6A9C ADRP X0, 0x955000
	0x037C6AA0 LDR X0, [X0 + 0xD18]
	0x037C6AA4 BL 0x1C16CF4
	0x037C6AA8 ADRP X0, 0x958000
	0x037C6AAC LDR X0, [X0 + 0xFE8]
	0x037C6AB0 BL 0x1C16CF4
	0x037C6AB4 ADRP X0, 0x982000
	0x037C6AB8 LDR X0, [X0 + 0x2F8]
	0x037C6ABC BL 0x1C16CF4
	0x037C6AC0 MOVZ W8, 0x1
	0x037C6AC4 STRB W8, [X25 + 0x204]
	0x037C6AC8 STR X19, [X31 + 0x18]
	0x037C6ACC CBZ X21, 0x37C6C38
	0x037C6AD0 LDR W25, [X21 + 0xE8]
	0x037C6AD4 ADRP X19, 0x955000
	0x037C6AD8 LDR X19, [X19 + 0xD18]
	0x037C6ADC MOV X1, X31
	0x037C6AE0 MOV W0, W25
	0x037C6AE4 ADD X27, X21, 0x10
	0x037C6AE8 BL 0x380C47C
	0x037C6AEC MOV X29, X0
	0x037C6AF0 MOV X0, X20
	0x037C6AF4 MOV W1, W25
	0x037C6AF8 BL 0x37CB854
	0x037C6AFC LDR X0, [X19]
	0x037C6B00 LDR W8, [X0 + 0xE0]
	0x037C6B04 CBNZ W8, 0x37C6B0C
	0x037C6B08 BL 0x1C16DFC
	0x037C6B0C LDR W8, [X21 + 0x14]
	0x037C6B10 MOV X0, X20
	0x037C6B14 MOV W1, W25
	0x037C6B18 MOV X2, X23
	0x037C6B1C ADD X3, X8, X29
	0x037C6B20 MOV W4, W22
	0x037C6B24 MOV W5, W24
	0x037C6B28 BL 0x37CB8A4
	0x037C6B2C LDR W8, [X21 + 0x14]
	0x037C6B30 MOV W28, W0
	0x037C6B34 MOV X0, X21
	0x037C6B38 MOV X1, X31
	0x037C6B3C ADD W19, W8, W24
	0x037C6B40 BL 0x3772220
	0x037C6B44 MOV W8, W0
	0x037C6B48 MOV X4, X31
	0x037C6B4C ADD X0, X19, X29
	0x037C6B50 TBZ X8, 0x0, 0x37C6B6C
	0x037C6B54 ADRP X8, 0x958000
	0x037C6B58 LDR X8, [X8 + 0xFE8]
	0x037C6B5C LDR X8, [X8]
	0x037C6B60 LDR X8, [X8 + 0xB8]
	0x037C6B64 LDR X8, [X8 + 0x8]
	0x037C6B68 ADD X4, X8, X19
	0x037C6B6C UBFM W3, W22, 0x1D, 0x1C
	0x037C6B70 MOV X1, X23
	0x037C6B74 MOV W2, W31
	0x037C6B78 MOV X5, X31
	0x037C6B7C BL 0x37626EC
	0x037C6B80 MOV W29, W0
	0x037C6B84 MOV X0, X20
	0x037C6B88 MOV X1, X21
	0x037C6B8C MOV W2, W26
	0x037C6B90 BL 0x37CBB04
	0x037C6B94 LDR X1, [X20 + 0xD8]
	0x037C6B98 AND W7, W0, 0x1
	0x037C6B9C MOV X0, X20
	0x037C6BA0 MOV W2, W25
	0x037C6BA4 MOV X3, X27
	0x037C6BA8 MOV W4, W24
	0x037C6BAC MOV X5, X23

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0xC1C000
	015 Move W8, [X20+505]
	016 Move X19, X1
	017 Move X25, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x956000
	023 Move X0, [X0+3352]
	024 Call 0x1C17CF4
	025 Move X0, 0x956000
	026 Move X0, [X0+3392]
	027 Call 0x1C17CF4
	028 Move X0, 0x956000
	029 Move X0, [X0+3400]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+505], W8
	033 Compare X19, 0
	034 JumpIfEqual {225}
	035 Move X29, 0x956000
	036 Move X29, [X29+3352]
	037 Move X0, X19
	038 Move X1, X31
	039 Call InputDevice.get_allControls, X0
	040 Move [X31+16], X0
	041 Move [X31+24], X1
	042 Move X22, [X25+200]
	043 Move X20, X1
	044 ShiftRight X20, 32
	045 And X20, X20, 0x7FFFFFFF
	046 Move X0, X19
	047 Move X1, X31
	048 Call InputDevice.get_hasControlsWithDefaultState, X0
	049 Move X8, [X29]
	050 Move X24, [X25+192]
	051 Move W21, [X19+20]
	052 Move W23, W0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move W3, [X19+28]
	059 Move X0, X24
	060 Move W1, W21
	061 Move W2, W31
	062 Move W4, W31
	063 Move X5, X31
	064 Call MemoryHelpers.SetBitsInBuffer, X0, X1, X2, X3, X4
	065 Move W1, [X19+20]
	066 Move W3, [X19+28]
	067 Move W4, 1
	068 Move X0, X22
	069 Move W2, W31
	070 Move X5, X31
	071 Call MemoryHelpers.SetBitsInBuffer, X0, X1, X2, X3, X4
	072 Move X8, [X25+184]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X31], X25
	075 Move [X31+8], X8
	076 Move X21, 0x956000
	077 Move X21, [X21+3400]
	078 Move W25, W31
	079 Move X2, [X21]
	080 Add X0, X31, 16
	081 Move W1, W25
	082 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	083 Compare X0, 0
	084 JumpIfEqual {225}
	085 Move X1, X31
	086 Move X26, X0
	087 Call InputControl.get_usesStateFromOtherControl, X0
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfEqual {168}
	092 Move X0, X26
	093 Move X1, X31
	094 Call InputControl.get_noisy, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {106}
	099 Move X0, X26
	100 Move X1, X31
	101 Call InputControl.get_dontReset, X0
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {144}
	106 Move X0, X26
	107 Move X1, X31
	108 Call InputControl.get_noisy, X0
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {125}
	113 Move X0, [X29]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move W1, [X26+20]
	119 Move W2, [X26+24]
	120 Move W3, [X26+28]
	121 Move W4, 1
	122 Move X0, X24
	123 Move X5, X31
	124 Call MemoryHelpers.SetBitsInBuffer, X0, X1, X2, X3, X4
	125 Move X0, X26
	126 Move X1, X31
	127 Call InputControl.get_dontReset, X0
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {144}
	132 Move X0, [X29]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move W1, [X26+20]
	138 Move W2, [X26+24]
	139 Move W3, [X26+28]
	140 Move X0, X22
	141 Move W4, W31
	142 Move X5, X31
	143 Call MemoryHelpers.SetBitsInBuffer, X0, X1, X2, X3, X4
	144 Move TEMP, X23
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {168}
	148 Move X0, X26
	149 Move X1, X31
	150 Call InputControl.get_hasDefaultState, X0
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {168}
	155 Move X0, [X29]
	156 Move X28, [X26+168]
	157 Move X27, [X26+176]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Move X1, [X31+8]
	163 Add X0, X26, 16
	164 Move X2, X28
	165 Move X3, X27
	166 Move X4, X31
	167 Call InputStateBlock.Write, X0, X1, X2
	168 Add W25, W25, 1
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move TEMP, X23
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {211}
	174 Move X8, [X31]
	175 Move W22, [X19+232]
	176 Move X1, X31
	177 Add X20, X8, 216
	178 Move X0, X20
	179 Call DoubleBuffers.get_valid, X0
	180 Move TEMP, X0
	181 And TEMP, TEMP, 1
	182 Compare TEMP, 1
	183 JumpIfNotEqual {211}
	184 Move X0, X20
	185 Move W1, W22
	186 Move X2, X31
	187 Add X19, X19, 16
	188 Call DoubleBuffers.GetFrontBuffer, X0, X1
	189 Move X8, [X29]
	190 Move X23, X0
	191 Move W9, [X8+224]
	192 Compare W9, 0
	193 JumpIfNotEqual {196}
	194 Move X0, X8
	195 Call 0x1C17DFC
	196 Move X21, [X31+8]
	197 Move X0, X19
	198 Move X1, X23
	199 Move X3, X31
	200 Move X2, X21
	201 Call InputStateBlock.CopyToFrom, X0, X1, X2
	202 Move X0, X20
	203 Move W1, W22
	204 Move X2, X31
	205 Call DoubleBuffers.GetBackBuffer, X0, X1
	206 Move X1, X0
	207 Move X0, X19
	208 Move X2, X21
	209 Move X3, X31
	210 Call InputStateBlock.CopyToFrom, X0, X1, X2
	211 Move X20, [X31+112]
	212 Move X19, [X31+120]
	213 Move X22, [X31+96]
	214 Move X21, [X31+104]
	215 Move X24, [X31+80]
	216 Move X23, [X31+88]
	217 Move X26, [X31+64]
	218 Move X25, [X31+72]
	219 Move X28, [X31+48]
	220 Move X27, [X31+56]
	221 Move X29, [X31+32]
	222 Move X30, [X31+40]
	223 Add X31, X31, 128
	224 Return 
	225 Call 0x1C17F20

Method: System.Void OnNativeDeviceDiscovered(System.Int32 deviceId, System.String deviceDescriptor)

Disassembly:
	0x037CA664 MOV X1, X31
	0x037CA668 BL 0x380132C
	0x037CA66C MOV V9.16B, V0.16B
	0x037CA670 MOV X0, X27
	0x037CA674 MOV X1, X31
	0x037CA678 BL 0x3801198
	0x037CA67C LDR W8, [X31 + 0x6C]
	0x037CA680 MOV X28, X0
	0x037CA684 CBZ W8, 0x37CA6A4
	0x037CA688 FCMP D9, D8
	0x037CA68C B.LT 0x37CA6A4
	0x037CA690 MOVZ W1, 0x1
	0x037CA694 MOV X0, X19
	0x037CA698 MOV X2, X31
	0x037CA69C BL 0x3803298
	0x037CA6A0 B 0x37CA568
	0x037CA6A4 CBNZ X26, 0x37CA6C8
	0x037CA6A8 MOV X0, X27
	0x037CA6AC MOV X1, X31
	0x037CA6B0 BL 0x3801268
	0x037CA6B4 MOV W1, W0
	0x037CA6B8 MOV X0, X20
	0x037CA6BC BL 0x37BC094
	0x037CA6C0 MOV X26, X0
	0x037CA6C4 CBZ X0, 0x37CA870
	0x037CA6C8 MOV X0, X26
	0x037CA6CC MOV X1, X31
	0x037CA6D0 BL 0x377A8A4
	0x037CA6D4 TBNZ X0, 0x0, 0x37CA718
	0x037CA6D8 MOVZ W8, 0x4647
	0x037CA6DC MOVK W8, 0x44430000
	0x037CA6E0 CMP W28, W8
	0x037CA6E4 B.EQ 0x37CA718
	0x037CA6E8 MOVZ W8, 0x454D
	0x037CA6EC MOVK W8, 0x44520000
	0x037CA6F0 CMP W28, W8
	0x037CA6F4 B.EQ 0x37CA718
	0x037CA6F8 LDRH W8, [X26 + 0xDC]
	0x037CA6FC ANDS W31, W8, 0x180
	0x037CA700 B.EQ 0x37CA718
	0x037CA704 MOV X0, X19
	0x037CA708 MOV W1, W31
	0x037CA70C MOV X2, X31
	0x037CA710 BL 0x3803298
	0x037CA714 B 0x37CA568
	0x037CA718 LDR X8, [X20 + 0x480]
	0x037CA71C CBZ X8, 0x37CB134
	0x037CA720 LDRB W8, [X8 + 0x5C]
	0x037CA724 CBNZ W8, 0x37CA884
	0x037CA728 MOV X0, X26
	0x037CA72C MOV X1, X31
	0x037CA730 BL 0x377B274
	0x037CA734 LDR X8, [X31 + 0x40]
	0x037CA738 CMP X27, X8
	0x037CA73C B.EQ 0x37CA884
	0x037CA740 EOR W8, W0, 0x1
	0x037CA744 TBNZ X8, 0x0, 0x37CA884
	0x037CA748 MOV X0, X19
	0x037CA74C MOV X1, X31
	0x037CA750 BL 0x380333C
	0x037CA754 MOV X29, X0
	0x037CA758 CBZ X0, 0x37CA884
	0x037CA75C MOV X0, X27
	0x037CA760 MOV X1, X31
	0x037CA764 BL 0x3801268
	0x037CA768 MOV W22, W0
	0x037CA76C MOV X0, X29
	0x037CA770 MOV X1, X31
	0x037CA774 BL 0x3801268
	0x037CA778 CMP W22, W0
	0x037CA77C B.NE 0x37CA884
	0x037CA780 LDR W8, [X31 + 0x6C]
	0x037CA784 CBZ W8, 0x37CA79C
	0x037CA788 MOV X0, X29
	0x037CA78C MOV X1, X31
	0x037CA790 BL 0x380132C
	0x037CA794 FCMP D0, D8
	0x037CA798 B.PL 0x37CA884
	0x037CA79C MOV X0, X27
	0x037CA7A0 MOV X1, X31
	0x037CA7A4 BL 0x3801854
	0x037CA7A8 MOV X24, X0
	0x037CA7AC MOV X0, X29
	0x037CA7B0 MOV X1, X31
	0x037CA7B4 BL 0x3801854
	0x037CA7B8 ADRP X8, 0x97E000
	0x037CA7BC LDR X8, [X8 + 0x200]
	0x037CA7C0 MOV X25, X0
	0x037CA7C4 LDR X22, [X8]
	0x037CA7C8 MOV X0, X26
	0x037CA7CC MOV X1, X22
	0x037CA7D0 BL 0x1C16E00
	0x037CA7D4 CBZ X0, 0x37CB144
	0x037CA7D8 ADRP X8, 0x97E000
	0x037CA7DC LDR X8, [X8 + 0x200]
	0x037CA7E0 LDR X22, [X8]
	0x037CA7E4 MOV X0, X26
	0x037CA7E8 MOV X1, X22
	0x037CA7EC BL 0x1C16E00
	0x037CA7F0 MOV X23, X0
	0x037CA7F4 CBZ X0, 0x37CB138
	0x037CA7F8 LDR X8, [X23]
	0x037CA7FC LDRH W9, [X8 + 0x12E]
	0x037CA800 CBZ X9, 0x37CA824
	0x037CA804 LDR X10, [X8 + 0xB0]
	0x037CA808 ADD X10, X10, 0x8
	0x037CA80C LDUR X11, [X10 - 0x8]
	0x037CA810 CMP X11, X22
	0x037CA814 B.EQ 0x37CA838
	0x037CA818 SUBS X9, X9, 0x1
	0x037CA81C ADD X10, X10, 0x10
	0x037CA820 B.NE 0x37CA80C
	0x037CA824 MOV X0, X23
	0x037CA828 MOV X1, X22
	0x037CA82C MOV W2, W31
	0x037CA830 BL 0x1C5C788
	0x037CA834 B 0x37CA844
	0x037CA838 LDRSW X9, [X10]
	0x037CA83C ADD X8, X8, X9, 0x4, LSL
	0x037CA840 ADD X0, X8, 0x138
	0x037CA844 LDP X8, X3, [X0]
	0x037CA848 MOV X0, X23
	0x037CA84C MOV X1, X24
	0x037CA850 MOV X2, X25
	0x037CA854 BLR X8
	0x037CA858 TBZ X0, 0x0, 0x37CA888
	0x037CA85C MOV X0, X19
	0x037CA860 MOV W1, W31
	0x037CA864 MOV X2, X31
	0x037CA868 BL 0x3803298
	0x037CA86C B 0x37CA568
	0x037CA870 MOV X0, X19
	0x037CA874 MOV W1, W31
	0x037CA878 MOV X2, X31
	0x037CA87C BL 0x3803298
	0x037CA880 B 0x37CA568
	0x037CA884 LDR X29, [X31 + 0x40]
	0x037CA888 MOV X0, X26
	0x037CA88C MOV X1, X31
	0x037CA890 BL 0x377B2A0
	0x037CA894 TBZ X0, 0x0, 0x37CA944
	0x037CA898 MOV X0, X27
	0x037CA89C MOV X1, X31
	0x037CA8A0 BL 0x3801854
	0x037CA8A4 ADRP X8, 0x97E000
	0x037CA8A8 LDR X8, [X8 + 0x208]
	0x037CA8AC MOV X24, X0
	0x037CA8B0 LDR X22, [X8]
	0x037CA8B4 MOV X0, X26
	0x037CA8B8 MOV X1, X22
	0x037CA8BC BL 0x1C16E00
	0x037CA8C0 CBZ X0, 0x37CB160
	0x037CA8C4 ADRP X8, 0x97E000
	0x037CA8C8 LDR X8, [X8 + 0x208]
	0x037CA8CC LDR X22, [X8]
	0x037CA8D0 MOV X0, X26
	0x037CA8D4 MOV X1, X22
	0x037CA8D8 BL 0x1C16E00
	0x037CA8DC MOV X23, X0
	0x037CA8E0 CBZ X0, 0x37CB154
	0x037CA8E4 LDR X8, [X23]
	0x037CA8E8 LDRH W9, [X8 + 0x12E]
	0x037CA8EC CBZ X9, 0x37CA910
	0x037CA8F0 LDR X10, [X8 + 0xB0]
	0x037CA8F4 ADD X10, X10, 0x8
	0x037CA8F8 LDUR X11, [X10 - 0x8]
	0x037CA8FC CMP X11, X22
	0x037CA900 B.EQ 0x37CA924
	0x037CA904 SUBS X9, X9, 0x1
	0x037CA908 ADD X10, X10, 0x10
	0x037CA90C B.NE 0x37CA8F8
	0x037CA910 MOV X0, X23
	0x037CA914 MOV X1, X22
	0x037CA918 MOV W2, W31
	0x037CA91C BL 0x1C5C788
	0x037CA920 B 0x37CA930
	0x037CA924 LDRSW X9, [X10]
	0x037CA928 ADD X8, X8, X9, 0x4, LSL
	0x037CA92C ADD X0, X8, 0x138
	0x037CA930 LDP X8, X2, [X0]
	0x037CA934 MOV X0, X23
	0x037CA938 MOV X1, X24
	0x037CA93C BLR X8
	0x037CA940 TBZ X0, 0x0, 0x37CA9B4
	0x037CA944 ADRP X8, 0x97E000
	0x037CA948 LDR X8, [X8 + 0x740]
	0x037CA94C LDR X1, [X8]
	0x037CA950 LDR X0, [X31 + 0x30]
	0x037CA954 BL 0x28F140C
	0x037CA958 CMP W0, 0x1
	0x037CA95C B.LT 0x37CA9CC
	0x037CA960 ADRP X8, 0x97E000
	0x037CA964 LDR X8, [X8 + 0x758]
	0x037CA968 LDR X3, [X8]
	0x037CA96C ADRP X8, 0x97E000
	0x037CA970 LDR X8, [X8 + 0x748]
	0x037CA974 LDR X5, [X8]
	0x037CA978 LDR X0, [X31 + 0x30]
	0x037CA97C MOV X1, X27
	0x037CA980 MOV X2, X26
	0x037CA984 MOV X4, X31
	0x037CA988 BL 0x21ADB24
	0x037CA98C MOV X0, X27
	0x037CA990 MOV X1, X31
	0x037CA994 BL 0x380133C
	0x037CA998 TBZ X0, 0x0, 0x37CA9CC
	0x037CA99C MOV X0, X19
	0x037CA9A0 MOV W1, W31
	0x037CA9A4 MOV X2, X31
	0x037CA9A8 BL 0x3803298
	0x037CA9AC STR X29, [X31 + 0x40]
	0x037CA9B0 B 0x37CA568
	0x037CA9B4 MOV X0, X19
	0x037CA9B8 MOV W1, W31
	0x037CA9BC MOV X2, X31
	0x037CA9C0 BL 0x3803298
	0x037CA9C4 STR X29, [X31 + 0x40]
	0x037CA9C8 B 0x37CA568
	0x037CA9CC LDR W8, [X20 + 0x464]
	0x037CA9D0 LDR W22, [X20 + 0x460]
	0x037CA9D4 FSUB D0, D8, D9
	0x037CA9D8 FADD D0, D10, D0
	0x037CA9DC FCMP D9, D8
	0x037CA9E0 FCSEL D10, D10, D0, HI
	0x037CA9E4 ADD W8, W8, 0x1
	0x037CA9E8 STR W8, [X20 + 0x464]
	0x037CA9EC MOV X0, X27
	0x037CA9F0 MOV X1, X31
	0x037CA9F4 BL 0x3800398
	0x037CA9F8 MOVZ W9, 0x454D
	0x037CA9FC MOVK W9, 0x44520000
	0x037CAA00 ADD W8, W0, W22
	0x037CAA04 CMP W28, W9
	0x037CAA08 STR W8, [X20 + 0x460]
	0x037CAA0C B.LE 0x37CAA44
	0x037CAA10 MOVZ W8, 0x4553
	0x037CAA14 MOVK W8, 0x494D0000
	0x037CAA18 CMP W28, W8
	0x037CAA1C B.LE 0x37CAB08
	0x037CAA20 MOVZ W8, 0x5854
	0x037CAA24 MOVK W8, 0x54450000
	0x037CAA28 CMP W28, W8
	0x037CAA2C B.EQ 0x37CACF0
	0x037CAA30 MOVZ W8, 0x4154
	0x037CAA34 MOVK W8, 0x53540000

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+256], X29
	003 Move [X31+272], X30
	004 Move [X31+280], X23
	005 Move [X31+288], X22
	006 Move [X31+296], X21
	007 Move [X31+304], X20
	008 Move [X31+312], X19
	009 Move X21, 0xC18000
	010 Move W8, [X21+506]
	011 Move X22, X2
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x97F000
	019 Move X0, [X0+1816]
	020 Call 0x1C17CF4
	021 Move X0, 0x97E000
	022 Move X0, [X0+3368]
	023 Call 0x1C17CF4
	024 Move X0, 0x97F000
	025 Move X0, [X0+72]
	026 Call 0x1C17CF4
	027 Move X0, 0x97E000
	028 Move X0, [X0+3392]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+506], W8
	032 NotImplemented "Instruction MOVI not yet implemented."
	033 Move X0, X20
	034 Move X1, X22
	035 Move [X31+176], X31
	036 Move [X31+144], V0
	037 Move [X31+152], V0
	038 Move [X31+8], V0
	039 Call InputManager.TryMatchDisconnectedDevice, X0, X1
	040 Move X21, X0
	041 Compare X0, 0
	042 JumpIfEqual {51}
	043 Move X8, [X21+288]
	044 Move V1, [X21+256]
	045 Move V0, [X21+272]
	046 Move V2, [X21+15]
	047 Move [X31+112], X8
	048 Move [X31+80], V1
	049 Move [X31+88], V0
	050 Move [X31+4], V2
	051 Add X8, X31, 192
	052 Move X0, X22
	053 Move X1, X31
	054 Call InputDeviceDescription.FromJson, X0
	055 Move V0, [X31+192]
	056 Move V1, [X31+208]
	057 Move V2, [X31+14]
	058 Move X8, [X31+240]
	059 Move [X31+64], V0
	060 Move [X31+72], V1
	061 Move [X31+6], V2
	062 Move [X31+112], X8
	063 Move V0, [X31+64]
	064 Move V1, [X31+80]
	065 Move V2, [X31+6]
	066 Move X8, [X31+112]
	067 Move X23, 0x97F000
	068 Move [X31+128], V0
	069 Move [X31+136], V1
	070 Move [X31+10], V2
	071 Move [X31+176], X8
	072 Move X0, [X20+1152]
	073 Move X23, [X23+1816]
	074 Compare X0, 0
	075 JumpIfEqual {172}
	076 Move X1, X31
	077 Call InputSettings.get_supportedDevices, X0
	078 Move X8, X1
	079 ShiftRight X8, 32
	080 And X8, X8, 0x7FFFFFFF
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Compare X21, 0
	083 JumpIfEqual {86}
	084 Move X8, [X21+88]
	085 Move X2, [X21+96]
	086 Add X1, X31, 128
	087 Move X0, X20
	088 Move W2, W19
	089 Call InputManager.TryFindMatchingControlLayout, X0, X1, X2
	090 Move X8, X0
	091 Move X2, X1
	092 Move X0, X20
	093 Move X1, X8
	094 Call InputManager.IsDeviceLayoutMarkedAsSupportedInSettings, X0, X1
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {123}
	099 Compare X21, 0
	100 JumpIfEqual {125}
	101 Move W8, [X21+220]
	102 Move TEMP, 368
	103 Not TEMP
	104 Move W9, TEMP
	105 And W8, W8, W9
	106 Or W8, W8, 16
	107 Move [X21+220], W8
	108 Move [X21+224], W19
	109 Move X0, X20
	110 Move X1, X21
	111 Call InputManager.AddDevice, X0, X1
	112 Move X8, 0x97E000
	113 Move X9, 0x97E000
	114 Move X8, [X8+3392]
	115 Move X9, [X9+3368]
	116 Add X0, X20, 224
	117 Move X3, [X8]
	118 Move X5, [X9]
	119 Move W2, 3
	120 Move X1, X21
	121 Move X4, X31
	122 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	123 Move X21, X31
	124 Move W8, 1
	125 Move V0, [X31+128]
	126 Move V1, [X31+144]
	127 Move V2, [X31+10]
	128 Move X8, [X31+176]
	129 Move [X31], V0
	130 Move [X31+8], V1
	131 Move [X31+2], V2
	132 Move [X31+48], X8
	133 Add X1, X31, 0
	134 Move W5, 16
	135 Move X0, X20
	136 Move W2, W31
	137 Move X3, X31
	138 Move W4, W19
	139 Call InputManager.AddDevice, X0, X1, X2, X3, X4, X5
	140 Move W8, W31
	141 Move X21, X31
	142 Move V0, [X31+128]
	143 Move V1, [X31+144]
	144 Move X4, [X23]
	145 Move X9, [X31+176]
	146 Add X0, X20, 144
	147 Move [X31+192], V0
	148 Move [X31+200], V1
	149 Move V0, [X31+10]
	150 Add X1, X20, 136
	151 Move W10, 1
	152 Add X2, X31, 192
	153 Move W3, 10
	154 Move [X31+248], W19
	155 Move [X31+253], W8
	156 Move [X31+252], W10
	157 Move [X31+14], V0
	158 Move [X31+240], X9
	159 NotImplemented "Instruction STRH not yet implemented."
	160 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	161 Compare X21, 0
	162 JumpIfNotEqual {173}
	163 Move X20, [X31+304]
	164 Move X19, [X31+312]
	165 Move X22, [X31+288]
	166 Move X21, [X31+296]
	167 Move X30, [X31+272]
	168 Move X23, [X31+280]
	169 Move X29, [X31+256]
	170 Add X31, X31, 320
	171 Return 
	172 Call 0x1C17F20
	173 Move X0, X21
	174 Call 0x1C17F18
	175 Move X22, X0
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X0, X22
	178 Call 0x3EB2AD0
	179 Move X21, X0
	180 Move X0, 0x92A000
	181 Move X0, [X0+2000]
	182 Call 0x1C17D08
	183 Move X8, [X21]
	184 Move X1, [X8]
	185 Call 0x1C18270
	186 Move TEMP, X0
	187 And TEMP, TEMP, 1
	188 Compare TEMP, 1
	189 JumpIfNotEqual {224}
	190 Move X21, [X21]
	191 Call 0x3EB2AE0
	192 Move V0, [X31+128]
	193 Move V1, [X31+144]
	194 Move V2, [X31+10]
	195 Move X8, [X31+176]
	196 Move [X31+192], V0
	197 Move [X31+200], V1
	198 Move [X31+14], V2
	199 Move [X31+240], X8
	200 Move X0, 0x955000
	201 Move X0, [X0+1264]
	202 Call 0x1C17D08
	203 Add X1, X31, 192
	204 Call 0x1C17E04
	205 Move X22, X0
	206 Move X0, 0x97F000
	207 Move X0, [X0+1824]
	208 Call 0x1C17D08
	209 Move X1, X22
	210 Move X2, X21
	211 Move X3, X31
	212 Call String.Format, X0, X1, X2
	213 Move X21, X0
	214 Move X0, 0x92A000
	215 Move X0, [X0+2600]
	216 Call 0x1C17D08
	217 Move W8, [X0+224]
	218 Compare W8, 0
	219 JumpIfNotEqual {221}
	220 Call 0x1C17DFC
	221 Move X0, X21
	222 Move X1, X31
	223 Call Debug.LogError, X0
	224 Move W0, 8
	225 Call 0x3EB2AF0
	226 Move X8, [X21]
	227 Move [X0], X8
	228 Move X1, 0x6EB000
	229 Add X1, X1, 3672
	230 Move X2, X31
	231 Call 0x3EB2B00
	232 Move X22, X0
	233 Move X21, X1
	234 Move X22, X0
	235 Call 0x3EB2AE0
	236 Move W1, W21
	237 Move X22, X0
	238 Move W8, 1
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X0, X22
	241 Call 0x3EB2AD0
	242 Move X21, [X0]
	243 Call 0x3EB2AE0
	244 Move W8, W31
	245 Move X21, X31
	246 Move X22, X0
	247 Move V0, [X31+128]
	248 Move V1, [X31+144]
	249 Move V2, [X31+10]
	250 Move X8, [X31+176]
	251 Move X4, [X23]
	252 Add X0, X20, 144
	253 Add X1, X20, 136
	254 Move W9, 1
	255 Move [X31+192], V0
	256 Move [X31+200], V1
	257 Move [X31+14], V2
	258 Move [X31+240], X8
	259 Move [X31+248], W19
	260 Move [X31+252], W9
	261 Add X2, X31, 192
	262 Move W3, 10
	263 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	264 Compare X21, 0
	265 JumpIfNotEqual {268}
	266 Move X0, X22
	267 Call 0x1D2D690
	268 Move X0, X21
	269 Call 0x1C17F18
	270 Call 0x1991590

Method: UnityEngine.InputSystem.InputDevice TryMatchDisconnectedDevice(System.String deviceDescriptor)

Disassembly:
	0x037CAA3C B.EQ 0x37CABC4
	0x037CAA40 B 0x37CAF9C
	0x037CAA44 MOVZ W8, 0x4647
	0x037CAA48 MOVK W8, 0x44430000
	0x037CAA4C CMP W28, W8
	0x037CAA50 B.EQ 0x37CAC18
	0x037CAA54 MOVZ W8, 0x5441
	0x037CAA58 MOVK W8, 0x444C0000
	0x037CAA5C CMP W28, W8
	0x037CAA60 B.EQ 0x37CABC4
	0x037CAA64 MOVZ W8, 0x454D
	0x037CAA68 MOVK W8, 0x44520000
	0x037CAA6C CMP W28, W8
	0x037CAA70 B.NE 0x37CAF9C
	0x037CAA74 MOV X0, X20
	0x037CAA78 MOV X1, X26
	0x037CAA7C MOV W2, W31
	0x037CAA80 BL 0x37BC210
	0x037CAA84 MOV X0, X26
	0x037CAA88 MOV X1, X31
	0x037CAA8C BL 0x377AA1C
	0x037CAA90 TBZ X0, 0x0, 0x37CAF9C
	0x037CAA94 LDR X8, [X26 + 0x120]
	0x037CAA98 LDP V1, V0, [X26 + 0x100]
	0x037CAA9C LDR V2, [X26 + 0xF]
	0x037CAAA0 STR X8, [X31 + 0xD0]
	0x037CAAA4 STP V1, V0, [X31 + 0xB0]
	0x037CAAA8 STR V2, [X31 + 0xA]
	0x037CAAAC ADD X0, X31, 0xA0
	0x037CAAB0 MOV X1, X31
	0x037CAAB4 BL 0x381DB2C
	0x037CAAB8 TBNZ X0, 0x0, 0x37CAF9C
	0x037CAABC ADRP X8, 0x97E000
	0x037CAAC0 LDR X8, [X8 + 0x1E8]
	0x037CAAC4 LDR X4, [X8]
	0x037CAAC8 LDP X1, X0, [X31 + 0x10]
	0x037CAACC MOVZ W3, 0xA
	0x037CAAD0 MOV X2, X26
	0x037CAAD4 BL 0x2174728
	0x037CAAD8 ADRP X8, 0x97D000
	0x037CAADC LDR X8, [X8 + 0xD40]
	0x037CAAE0 LDR X3, [X8]
	0x037CAAE4 ADRP X8, 0x97D000
	0x037CAAE8 LDR X8, [X8 + 0xD28]
	0x037CAAEC LDR X5, [X8]
	0x037CAAF0 LDR X0, [X31 + 0x28]
	0x037CAAF4 MOVZ W2, 0x2
	0x037CAAF8 MOV X1, X26
	0x037CAAFC MOV X4, X31
	0x037CAB00 BL 0x21AE04C
	0x037CAB04 B 0x37CAF9C
	0x037CAB08 MOVZ W8, 0x5354
	0x037CAB0C MOVK W8, 0x44520000
	0x037CAB10 CMP W28, W8
	0x037CAB14 B.EQ 0x37CAD64
	0x037CAB18 MOVZ W8, 0x4553
	0x037CAB1C MOVK W8, 0x494D0000
	0x037CAB20 CMP W28, W8
	0x037CAB24 B.NE 0x37CAF9C
	0x037CAB28 ADRP X8, 0x97E000
	0x037CAB2C LDR X8, [X8 + 0x750]
	0x037CAB30 LDR X1, [X8]
	0x037CAB34 MOV X0, X26
	0x037CAB38 BL 0x1C16E00
	0x037CAB3C LDR X8, [X31 + 0x20]
	0x037CAB40 CMP X0, 0x0
	0x037CAB44 CSEL X24, X8, X0, EQ
	0x037CAB48 CBZ X0, 0x37CAF9C
	0x037CAB4C CBZ X27, 0x37CB190
	0x037CAB50 ADD X1, X27, 0x14
	0x037CAB54 ADD X0, X31, 0x198
	0x037CAB58 MOVZ W2, 0x84
	0x037CAB5C BL 0x3EB1AC0
	0x037CAB60 CBZ X24, 0x37CB18C
	0x037CAB64 ADRP X8, 0x97E000
	0x037CAB68 LDR X8, [X8 + 0x750]
	0x037CAB6C ADD X0, X31, 0x110
	0x037CAB70 ADD X1, X31, 0x198
	0x037CAB74 MOVZ W2, 0x84
	0x037CAB78 LDR X22, [X8]
	0x037CAB7C BL 0x3EB1AC0
	0x037CAB80 LDR X8, [X24]
	0x037CAB84 LDRH W9, [X8 + 0x12E]
	0x037CAB88 CBZ X9, 0x37CABAC
	0x037CAB8C LDR X10, [X8 + 0xB0]
	0x037CAB90 ADD X10, X10, 0x8
	0x037CAB94 LDUR X11, [X10 - 0x8]
	0x037CAB98 CMP X11, X22
	0x037CAB9C B.EQ 0x37CAEB4
	0x037CABA0 SUBS X9, X9, 0x1
	0x037CABA4 ADD X10, X10, 0x10
	0x037CABA8 B.NE 0x37CAB94
	0x037CABAC MOVZ W2, 0x1
	0x037CABB0 MOV X0, X24
	0x037CABB4 MOV X1, X22
	0x037CABB8 BL 0x1C5C788
	0x037CABBC MOV X22, X0
	0x037CABC0 B 0x37CAEC4
	0x037CABC4 STR X27, [X31 + 0xD8]
	0x037CABC8 MOV X0, X26
	0x037CABCC MOV X1, X31
	0x037CABD0 BL 0x3774978
	0x037CABD4 LDR V0, [X26 + 0x128]
	0x037CABD8 FCMP D9, D0
	0x037CABDC B.PL 0x37CAC64
	0x037CABE0 TBZ X0, 0x0, 0x37CAF9C
	0x037CABE4 ADRP X8, 0x951000
	0x037CABE8 LDR X8, [X8 + 0xD18]
	0x037CABEC LDR W22, [X26 + 0x10]
	0x037CABF0 LDR X0, [X8]
	0x037CABF4 LDR W8, [X0 + 0xE0]
	0x037CABF8 CBNZ W8, 0x37CAC00
	0x037CABFC BL 0x1C16DFC
	0x037CAC00 ADD X0, X31, 0xD8
	0x037CAC04 MOV X1, X31
	0x037CAC08 BL 0x3802904
	0x037CAC0C CMP W22, W0
	0x037CAC10 B.NE 0x37CAC68
	0x037CAC14 B 0x37CAF9C
	0x037CAC18 MOV X0, X26
	0x037CAC1C MOV X1, X31

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0xC18000
	014 Move W8, [X21+507]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0x97C000
	022 Move X0, [X0+824]
	023 Call 0x1C17CF4
	024 Move X0, 0x97C000
	025 Move X0, [X0+3904]
	026 Call 0x1C17CF4
	027 Move X0, 0x97F000
	028 Move X0, [X0+1832]
	029 Call 0x1C17CF4
	030 Move X0, 0x97F000
	031 Move X0, [X0+1840]
	032 Call 0x1C17CF4
	033 Move X0, 0x97C000
	034 Move X0, [X0+3896]
	035 Call 0x1C17CF4
	036 Move X0, 0x932000
	037 Move X0, [X0+1512]
	038 Call 0x1C17CF4
	039 Move X0, 0x97C000
	040 Move X0, [X0+3880]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+507], W8
	044 Move X21, X20
	045 Add X21, X21, 152
	046 Move W8, [X21]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X29, 0x97C000
	049 Move X29, [X29+3880]
	050 Move W22, W31
	051 Move X8, [X20+160]
	052 Compare X8, 0
	053 JumpIfEqual {154}
	054 Move W9, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X8, X8, W22
	057 Move X23, [X8+32]
	058 Compare X23, 0
	059 JumpIfEqual {154}
	060 Move X1, [X23+240]
	061 Move X26, [X23+248]
	062 Move X0, [X29]
	063 Move X27, [X23+256]
	064 Move X28, [X23+264]
	065 Move X24, [X23+272]
	066 Move X25, [X23+288]
	067 Move X2, X19
	068 Move X3, X31
	069 Call InputDeviceDescription.ComparePropertyToDeviceDescriptor, X0, X1, X2
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {129}
	074 Move X8, 0x97C000
	075 Move X8, [X8+3904]
	076 Move X1, X28
	077 Move X2, X19
	078 Move X3, X31
	079 Move X0, [X8]
	080 Call InputDeviceDescription.ComparePropertyToDeviceDescriptor, X0, X1, X2
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {129}
	085 Move X8, 0x97C000
	086 Move X8, [X8+3896]
	087 Move X1, X27
	088 Move X2, X19
	089 Move X3, X31
	090 Move X0, [X8]
	091 Call InputDeviceDescription.ComparePropertyToDeviceDescriptor, X0, X1, X2
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {129}
	096 Move X8, 0x932000
	097 Move X8, [X8+1512]
	098 Move X1, X26
	099 Move X2, X19
	100 Move X3, X31
	101 Move X0, [X8]
	102 Call InputDeviceDescription.ComparePropertyToDeviceDescriptor, X0, X1, X2
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {129}
	107 Move X8, 0x97F000
	108 Move X8, [X8+1840]
	109 Move X1, X25
	110 Move X2, X19
	111 Move X3, X31
	112 Move X0, [X8]
	113 Call InputDeviceDescription.ComparePropertyToDeviceDescriptor, X0, X1, X2
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {129}
	118 Move X8, 0x97F000
	119 Move X8, [X8+1832]
	120 Move X1, X24
	121 Move X2, X19
	122 Move X3, X31
	123 Move X0, [X8]
	124 Call InputDeviceDescription.ComparePropertyToDeviceDescriptor, X0, X1, X2
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfEqual {147}
	129 Move W8, [X21]
	130 Add W22, W22, 1
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X23, X31
	133 Move X0, X23
	134 Move X20, [X31+80]
	135 Move X19, [X31+88]
	136 Move X22, [X31+64]
	137 Move X21, [X31+72]
	138 Move X24, [X31+48]
	139 Move X23, [X31+56]
	140 Move X26, [X31+32]
	141 Move X25, [X31+40]
	142 Move X28, [X31+16]
	143 Move X27, [X31+24]
	144 Move X29, [X31+96]
	145 Move X30, [X31+104]
	146 Return X0
	147 Move X8, 0x97C000
	148 Move X0, [X20+160]
	149 Move X8, [X8+824]
	150 Move X1, X21
	151 Move W2, W22
	152 Move X3, [X8]
	153 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	154 Call 0x1C17F20
	155 Call 0x1C17F28

Method: System.Void InstallBeforeUpdateHookIfNecessary()

Disassembly:
	0x037C3428 MOV X0, X19
	0x037C342C BL 0x1C16DEC
	0x037C3430 BL 0x1C16F20
	0x037C3434 STR X30, [X31 - 0x60]!
	0x037C3438 STP X28, X27, [X31 + 0x10]
	0x037C343C STP X26, X25, [X31 + 0x20]
	0x037C3440 STP X24, X23, [X31 + 0x30]
	0x037C3444 STP X22, X21, [X31 + 0x40]
	0x037C3448 STP X20, X19, [X31 + 0x50]
	0x037C344C ADRP X20, 0xC1E000
	0x037C3450 LDRB W8, [X20 + 0x1D1]
	0x037C3454 MOV W21, W3
	0x037C3458 MOV X22, X2
	0x037C345C MOV X23, X1
	0x037C3460 MOV X19, X0
	0x037C3464 TBNZ X8, 0x0, 0x37C34AC
	0x037C3468 ADRP X0, 0x985000
	0x037C346C LDR X0, [X0 + 0x168]
	0x037C3470 BL 0x1C16CF4
	0x037C3474 ADRP X0, 0x985000
	0x037C3478 LDR X0, [X0 + 0x170]
	0x037C347C BL 0x1C16CF4
	0x037C3480 ADRP X0, 0x985000
	0x037C3484 LDR X0, [X0 + 0x178]
	0x037C3488 BL 0x1C16CF4
	0x037C348C ADRP X0, 0x985000
	0x037C3490 LDR X0, [X0 + 0x180]
	0x037C3494 BL 0x1C16CF4
	0x037C3498 ADRP X0, 0x985000
	0x037C349C LDR X0, [X0 + 0x188]
	0x037C34A0 BL 0x1C16CF4
	0x037C34A4 MOVZ W8, 0x1
	0x037C34A8 STRB W8, [X20 + 0x1D1]
	0x037C34AC LDR W8, [X19 + 0x70]
	0x037C34B0 CMP W8, 0x1
	0x037C34B4 B.LT 0x37C3604
	0x037C34B8 ADRP X26, 0x985000
	0x037C34BC ADRP X27, 0x985000
	0x037C34C0 ADRP X28, 0x985000
	0x037C34C4 LDR X26, [X26 + 0x188]
	0x037C34C8 LDR X27, [X27 + 0x170]
	0x037C34CC LDR X28, [X28 + 0x168]
	0x037C34D0 MOV X25, X31
	0x037C34D4 MOV X20, X31
	0x037C34D8 LDR X8, [X19 + 0x78]
	0x037C34DC CBZ X8, 0x37C3620
	0x037C34E0 LDR W9, [X8 + 0x18]
	0x037C34E4 CMP X25, X9
	0x037C34E8 B.CS 0x37C3624
	0x037C34EC ADD X8, X8, X25, 0x3, LSL
	0x037C34F0 LDR X24, [X8 + 0x20]
	0x037C34F4 MOV X0, X19
	0x037C34F8 MOV X2, X23
	0x037C34FC MOV X3, X22
	0x037C3500 MOV X1, X24
	0x037C3504 TBZ X21, 0x0, 0x37C3514
	0x037C3508 BL 0x37C3698
	0x037C350C TBNZ X0, 0x0, 0x37C351C
	0x037C3510 B 0x37C358C
	0x037C3514 BL 0x37C3768
	0x037C3518 TBZ X0, 0x0, 0x37C358C
	0x037C351C CBNZ X20, 0x37C3538
	0x037C3520 LDR X0, [X26]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC1F000
	006 Move W8, [X20+508]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x986000
	013 Move X0, [X0+200]
	014 Call 0x1C17CF4
	015 Move X0, 0x959000
	016 Move X0, [X0+3792]
	017 Call 0x1C17CF4
	018 Move X0, 0x986000
	019 Move X0, [X0+208]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+508], W8
	023 Move W8, [X19+944]
	024 Compare W8, 0
	025 JumpIfNotEqual {67}
	026 Move X20, [X19+1088]
	027 Compare X20, 0
	028 JumpIfEqual {67}
	029 Move X8, 0x986000
	030 Move X8, [X8+200]
	031 Move X0, [X8]
	032 Call 0x1C17F10
	033 Move X8, 0x986000
	034 Move X8, [X8+208]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Move X2, [X8]
	039 Call Action`1<Int32Enum>..ctor, X0, X1, X2
	040 Move X10, 0x959000
	041 Move X8, [X20]
	042 Move X10, [X10+3792]
	043 NotImplemented "Instruction LDRH not yet implemented."
	044 Move X1, [X10]
	045 Compare X9, 0
	046 JumpIfEqual {53}
	047 Move X10, [X8+176]
	048 Add X10, X10, 8
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Subtract X9, X9, 1
	052 Add X10, X10, 16
	053 Move W2, 7
	054 Move X0, X20
	055 Call 0x1C5D788
	056 Move W9, [X10]
	057 Add W9, W9, 7
	058 Add X8, X8, W9
	059 Add X0, X8, 312
	060 Move X8, [X0]
	061 Move X2, [X0+8]
	062 Move X0, X20
	063 Move X1, X21
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move W8, 1
	066 Move [X19+944], W8
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return 

Method: System.Void RestoreDevicesAfterDomainReloadIfNecessary()

Disassembly:
	0x037CAA38 CMP W28, W8

ISIL:
	001 Return 

Method: System.Void WarnAboutDevicesFailingToRecreateAfterDomainReload()

Disassembly:
	0x037CAC20 BL 0x377B04C

ISIL:
	001 Return 

Method: System.Void OnBeforeUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x037CAC24 MOVZ W1, 0x7
	0x037CAC28 MOV X0, X26
	0x037CAC2C MOV X2, X31
	0x037CAC30 BL 0x3751064
	0x037CAC34 ADRP X8, 0x97D000
	0x037CAC38 LDR X8, [X8 + 0xD40]
	0x037CAC3C LDR X3, [X8]
	0x037CAC40 ADRP X8, 0x97D000
	0x037CAC44 LDR X8, [X8 + 0xD28]
	0x037CAC48 LDR X5, [X8]
	0x037CAC4C LDR X0, [X31 + 0x28]
	0x037CAC50 MOVZ W2, 0x7
	0x037CAC54 MOV X1, X26
	0x037CAC58 MOV X4, X31
	0x037CAC5C BL 0x21AE04C
	0x037CAC60 B 0x37CAF9C
	0x037CAC64 TBZ X0, 0x0, 0x37CAD88
	0x037CAC68 MOVZ W8, 0x1
	0x037CAC6C STRB W8, [X20 + 0x488]
	0x037CAC70 ADRP X8, 0x97C000
	0x037CAC74 LDR X24, [X31 + 0xD8]
	0x037CAC78 LDR X8, [X8 + 0xC68]
	0x037CAC7C LDR X22, [X8]
	0x037CAC80 MOV X0, X26
	0x037CAC84 MOV X1, X22
	0x037CAC88 BL 0x1C16E00
	0x037CAC8C CBZ X0, 0x37CB17C
	0x037CAC90 ADRP X8, 0x97C000
	0x037CAC94 LDR X8, [X8 + 0xC68]
	0x037CAC98 LDR X25, [X8]
	0x037CAC9C MOV X0, X26
	0x037CACA0 MOV X1, X25
	0x037CACA4 BL 0x1C16E00
	0x037CACA8 MOV X23, X0
	0x037CACAC CBZ X0, 0x37CB170
	0x037CACB0 LDR X8, [X23]
	0x037CACB4 LDRH W9, [X8 + 0x12E]
	0x037CACB8 CBZ X9, 0x37CACDC
	0x037CACBC LDR X10, [X8 + 0xB0]
	0x037CACC0 ADD X10, X10, 0x8
	0x037CACC4 LDUR X11, [X10 - 0x8]
	0x037CACC8 CMP X11, X25
	0x037CACCC B.EQ 0x37CAE28
	0x037CACD0 SUBS X9, X9, 0x1
	0x037CACD4 ADD X10, X10, 0x10
	0x037CACD8 B.NE 0x37CACC4
	0x037CACDC MOVZ W2, 0x1
	0x037CACE0 MOV X0, X23
	0x037CACE4 MOV X1, X25
	0x037CACE8 BL 0x1C5C788
	0x037CACEC B 0x37CAE38
	0x037CACF0 ADRP X8, 0x97E000
	0x037CACF4 LDR X8, [X8 + 0x750]
	0x037CACF8 LDR X1, [X8]
	0x037CACFC MOV X0, X26
	0x037CAD00 BL 0x1C16E00
	0x037CAD04 MOV X26, X0
	0x037CAD08 CBZ X0, 0x37CAF9C
	0x037CAD0C CBZ X27, 0x37CB194
	0x037CAD10 LDR W27, [X27 + 0x14]
	0x037CAD14 CMP W27, 0x10000
	0x037CAD18 B.GE 0x37CADE0
	0x037CAD1C LDR X8, [X26]
	0x037CAD20 ADRP X10, 0x97E000
	0x037CAD24 LDRH W9, [X8 + 0x12E]
	0x037CAD28 LDR X10, [X10 + 0x750]
	0x037CAD2C LDR X1, [X10]
	0x037CAD30 CBZ X9, 0x37CAD54
	0x037CAD34 LDR X10, [X8 + 0xB0]
	0x037CAD38 ADD X10, X10, 0x8
	0x037CAD3C LDUR X11, [X10 - 0x8]
	0x037CAD40 CMP X11, X1
	0x037CAD44 B.EQ 0x37CAEF0
	0x037CAD48 SUBS X9, X9, 0x1
	0x037CAD4C ADD X10, X10, 0x10
	0x037CAD50 B.NE 0x37CAD3C
	0x037CAD54 MOV X0, X26
	0x037CAD58 MOV W2, W31
	0x037CAD5C BL 0x1C5C788
	0x037CAD60 B 0x37CAEFC
	0x037CAD64 CBZ X27, 0x37CB16C
	0x037CAD68 LDR X3, [X31 + 0x8]
	0x037CAD6C LDRB W2, [X27 + 0x8]
	0x037CAD70 AND X3, X3, 0xFFFFFFFF
	0x037CAD74 MOV X0, X20
	0x037CAD78 MOV X1, X26
	0x037CAD7C STR X3, [X31 + 0x8]
	0x037CAD80 BL 0x37C6480
	0x037CAD84 B 0x37CAF9C
	0x037CAD88 ADRP X8, 0x951000
	0x037CAD8C LDR X8, [X8 + 0xD18]
	0x037CAD90 LDR W22, [X26 + 0x10]
	0x037CAD94 LDR X0, [X8]
	0x037CAD98 LDR W8, [X0 + 0xE0]
	0x037CAD9C CBNZ W8, 0x37CADA4
	0x037CADA0 BL 0x1C16DFC
	0x037CADA4 ADD X0, X31, 0xD8
	0x037CADA8 MOV X1, X31
	0x037CADAC BL 0x3802904
	0x037CADB0 CMP W22, W0
	0x037CADB4 B.NE 0x37CAF9C
	0x037CADB8 LDR X0, [X31 + 0xD8]
	0x037CADBC MOV X1, X31
	0x037CADC0 BL 0x38021A8
	0x037CADC4 MOV X2, X0
	0x037CADC8 MOV X0, X20
	0x037CADCC MOV X1, X26
	0x037CADD0 MOV W3, W21
	0x037CADD4 BL 0x37CB6DC
	0x037CADD8 MOV W22, W0
	0x037CADDC B 0x37CAE54
	0x037CADE0 LDR X8, [X26]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X21, 0xC18000
	010 Move W8, [X21+509]
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x97D000
	018 Move X0, [X0+3176]
	019 Call 0x1C17CF4
	020 Move X0, 0x97F000
	021 Move X0, [X0+1848]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+509], W8
	025 Move W8, [X19+168]
	026 And W31, W8, W20
	027 Move V1, [X19+192]
	028 Move V0, [X19+208]
	029 Move V2, [X19+11]
	030 Add X0, X31, 0
	031 Move W1, W20
	032 Move X2, X31
	033 Move [X31+16], V1
	034 Move [X31+24], V0
	035 Move [X31], V2
	036 Call InputStateBuffers.SwitchTo, X0, X1
	037 Move W0, W20
	038 Move X1, X31
	039 Call InputUpdate.OnBeforeUpdate, X0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, [X19+945]
	042 Compare W8, 0
	043 JumpIfEqual {102}
	044 Move W8, [X19+112]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X24, 0x97D000
	047 Move X24, [X24+3176]
	048 Move W23, W31
	049 Move X8, [X19+120]
	050 Compare X8, 0
	051 JumpIfEqual {118}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, W23
	055 Move X22, [X8+32]
	056 Compare X22, 0
	057 JumpIfEqual {118}
	058 Move X0, X22
	059 Move X1, X31
	060 Call InputDevice.get_hasStateCallbacks, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {99}
	065 Move X20, [X24]
	066 Move X0, X22
	067 Move X1, X20
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {120}
	071 Move X21, [X24]
	072 Move X0, X22
	073 Move X1, X21
	074 Call 0x1C17E00
	075 Compare X0, 0
	076 JumpIfEqual {123}
	077 Move X8, [X0]
	078 Move X20, X0
	079 NotImplemented "Instruction LDRH not yet implemented."
	080 Compare X9, 0
	081 JumpIfEqual {88}
	082 Move X10, [X8+176]
	083 Add X10, X10, 8
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Subtract X9, X9, 1
	087 Add X10, X10, 16
	088 Move X0, X20
	089 Move X1, X21
	090 Move W2, W31
	091 Call 0x1C5D788
	092 NotImplemented "Instruction LDRSW not yet implemented."
	093 Add X8, X8, X9
	094 Add X0, X8, 312
	095 Move X8, [X0]
	096 Move X1, [X0+8]
	097 Move X0, X20
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Move W8, [X19+112]
	100 Add W23, W23, 1
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X8, 0x97F000
	103 Move X8, [X8+1848]
	104 Add X0, X19, 704
	105 Move X2, X31
	106 Move X3, X31
	107 Move X1, [X8]
	108 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2
	109 Move X20, [X31+96]
	110 Move X19, [X31+104]
	111 Move X22, [X31+80]
	112 Move X21, [X31+88]
	113 Move X24, [X31+64]
	114 Move X23, [X31+72]
	115 Move X30, [X31+48]
	116 Add X31, X31, 112
	117 Return 
	118 Call 0x1C17F20
	119 Call 0x1C17F28
	120 Move X0, X22
	121 Move X1, X20
	122 Call 0x1C181E0
	123 Move X0, X22
	124 Move X1, X21
	125 Call 0x1C181E0

Method: System.Void ApplySettings()

Disassembly:
	0x037C2690 ADRP X22, 0xC1F000
	0x037C2694 ADRP X21, 0x986000
	0x037C2698 LDRB W8, [X22 + 0x1CC]
	0x037C269C LDR X21, [X21 + 0xD8]
	0x037C26A0 MOV X19, X1
	0x037C26A4 MOV X20, X0
	0x037C26A8 TBNZ X8, 0x0, 0x37C26C0
	0x037C26AC ADRP X0, 0x986000
	0x037C26B0 LDR X0, [X0 + 0xD8]
	0x037C26B4 BL 0x1C16CF4
	0x037C26B8 MOVZ W8, 0x1
	0x037C26BC STRB W8, [X22 + 0x1CC]
	0x037C26C0 LDR X2, [X21]
	0x037C26C4 ADD X0, X20, 0x360
	0x037C26C8 MOV X1, X19
	0x037C26CC LDP X20, X19, [X31 + 0x20]
	0x037C26D0 LDP X22, X21, [X31 + 0x10]
	0x037C26D4 LDR X30, [X31], #0x30
	0x037C26D8 B 0x28F1650
	0x037C26DC LDRB W0, [X0 + 0x428]
	0x037C26E0 RET
	0x037C26E4 MOVZ W0, 0x1
	0x037C26E8 RET
	0x037C26EC STR X30, [X31 - 0x10]!
	0x037C26F0 LDRB W8, [X0 + 0x3B2]
	0x037C26F4 CBZ W8, 0x37C2700
	0x037C26F8 MOVZ W0, 0x1
	0x037C26FC B 0x37C2714
	0x037C2700 LDR X8, [X0 + 0x480]
	0x037C2704 CBZ X8, 0x37C271C
	0x037C2708 LDR W8, [X8 + 0x30]
	0x037C270C CMP W8, 0x2
	0x037C2710 CSET W0, EQ
	0x037C2714 LDR X30, [X31], #0x10
	0x037C2718 RET
	0x037C271C BL 0x1C16F20
	0x037C2720 STR X30, [X31 - 0x10]!
	0x037C2724 LDR X8, [X0 + 0x480]
	0x037C2728 CBZ X8, 0x37C2740
	0x037C272C LDR W8, [X8 + 0x30]
	0x037C2730 CMP W8, 0x2
	0x037C2734 CSET W0, EQ
	0x037C2738 LDR X30, [X31], #0x10
	0x037C273C RET
	0x037C2740 BL 0x1C16F20
	0x037C2744 SUB X31, X31, 0x120
	0x037C2748 STP X29, X30, [X31 + 0xC0]
	0x037C274C STP X28, X27, [X31 + 0xD0]
	0x037C2750 STP X26, X25, [X31 + 0xE0]
	0x037C2754 STP X24, X23, [X31 + 0xF0]
	0x037C2758 STP X22, X21, [X31 + 0x100]
	0x037C275C STP X20, X19, [X31 + 0x110]
	0x037C2760 ADRP X19, 0xC1F000
	0x037C2764 LDRB W8, [X19 + 0x1CD]
	0x037C2768 MOV X21, X2
	0x037C276C MOV X22, X1
	0x037C2770 MOV X24, X0
	0x037C2774 TBNZ X8, 0x0, 0x37C2804
	0x037C2778 ADRP X0, 0x984000
	0x037C277C LDR X0, [X0 + 0x690]
	0x037C2780 BL 0x1C16CF4
	0x037C2784 ADRP X0, 0x984000
	0x037C2788 LDR X0, [X0 + 0x6C8]
	0x037C278C BL 0x1C16CF4
	0x037C2790 ADRP X0, 0x984000
	0x037C2794 LDR X0, [X0 + 0x698]
	0x037C2798 BL 0x1C16CF4
	0x037C279C ADRP X0, 0x984000
	0x037C27A0 LDR X0, [X0 + 0x6A0]
	0x037C27A4 BL 0x1C16CF4
	0x037C27A8 ADRP X0, 0x984000
	0x037C27AC LDR X0, [X0 + 0x6A8]
	0x037C27B0 BL 0x1C16CF4
	0x037C27B4 ADRP X0, 0x986000
	0x037C27B8 LDR X0, [X0 + 0xE0]
	0x037C27BC BL 0x1C16CF4
	0x037C27C0 ADRP X0, 0x983000
	0x037C27C4 LDR X0, [X0 + 0x6A0]
	0x037C27C8 BL 0x1C16CF4
	0x037C27CC ADRP X0, 0x986000
	0x037C27D0 LDR X0, [X0 + 0xE8]
	0x037C27D4 BL 0x1C16CF4
	0x037C27D8 ADRP X0, 0x984000
	0x037C27DC LDR X0, [X0 + 0x6B0]
	0x037C27E0 BL 0x1C16CF4
	0x037C27E4 ADRP X0, 0x984000
	0x037C27E8 LDR X0, [X0 + 0x6B8]
	0x037C27EC BL 0x1C16CF4
	0x037C27F0 ADRP X0, 0x931000
	0x037C27F4 LDR X0, [X0 + 0x6C0]
	0x037C27F8 BL 0x1C16CF4
	0x037C27FC MOVZ W8, 0x1
	0x037C2800 STRB W8, [X19 + 0x1CD]
	0x037C2804 MOVI V0.2D, 0x0
	0x037C2808 MOV X0, X22
	0x037C280C MOV X1, X31
	0x037C2810 STP X31, X31, [X31 + 0xB0]
	0x037C2814 STP V0, V0, [X31 + 0x90]
	0x037C2818 STR V0, [X31 + 0x8]
	0x037C281C BL 0x32277A8
	0x037C2820 TBNZ X0, 0x0, 0x37C2AF4
	0x037C2824 ADRP X27, 0x931000
	0x037C2828 LDR X27, [X27 + 0x6C0]
	0x037C282C LDR X0, [X27]
	0x037C2830 LDR W8, [X0 + 0xE0]
	0x037C2834 CBNZ W8, 0x37C283C
	0x037C2838 BL 0x1C16DFC
	0x037C283C MOV X0, X21
	0x037C2840 MOV X1, X31
	0x037C2844 MOV X2, X31
	0x037C2848 BL 0x3395194
	0x037C284C TBNZ X0, 0x0, 0x37C2B14
	0x037C2850 ADRP X8, 0x986000
	0x037C2854 LDR X0, [X27]
	0x037C2858 LDR X8, [X8 + 0xE8]
	0x037C285C LDR W9, [X0 + 0xE0]
	0x037C2860 LDR X20, [X8]
	0x037C2864 CBNZ W9, 0x37C286C
	0x037C2868 BL 0x1C16DFC
	0x037C286C MOV X0, X20
	0x037C2870 MOV X1, X31
	0x037C2874 BL 0x338C698
	0x037C2878 CBZ X0, 0x37C2AF0
	0x037C287C LDR X8, [X0]
	0x037C2880 ADRP X28, 0x983000
	0x037C2884 MOV X1, X21
	0x037C2888 LDR X9, [X8 + 0x2A8]
	0x037C288C LDR X2, [X8 + 0x2B0]
	0x037C2890 LDR X28, [X28 + 0x6A0]
	0x037C2894 BLR X9
	0x037C2898 LDR X8, [X28]
	0x037C289C MOV W20, W0
	0x037C28A0 MOV X1, X31
	0x037C28A4 MOV X0, X8
	0x037C28A8 BL 0x338C698
	0x037C28AC CBZ X0, 0x37C2AF0
	0x037C28B0 LDR X8, [X0]
	0x037C28B4 MOV X1, X21
	0x037C28B8 LDR X9, [X8 + 0x2A8]
	0x037C28BC LDR X2, [X8 + 0x2B0]
	0x037C28C0 BLR X9
	0x037C28C4 ORR W8, W20, W0, 0x0
	0x037C28C8 TBZ X8, 0x0, 0x37C2B5C
	0x037C28CC ADD X0, X31, 0xB0
	0x037C28D0 MOV X1, X22
	0x037C28D4 MOV X2, X31
	0x037C28D8 BL 0x3757420
	0x037C28DC LDP X1, X2, [X31 + 0xB0]
	0x037C28E0 ADD X23, X24, 0x18
	0x037C28E4 MOV X0, X23
	0x037C28E8 MOV X3, X31
	0x037C28EC BL 0x3813EB4
	0x037C28F0 LDR X8, [X24 + 0x18]
	0x037C28F4 CBZ X8, 0x37C2AF0
	0x037C28F8 STR W0, [X31 + 0x14]
	0x037C28FC STR X24, [X31 + 0x18]
	0x037C2900 ADRP X9, 0x984000
	0x037C2904 LDR X9, [X9 + 0x6C8]
	0x037C2908 LDP X1, X2, [X31 + 0xB0]
	0x037C290C MOV X0, X8
	0x037C2910 MOV X3, X21
	0x037C2914 LDR X4, [X9]
	0x037C2918 BL 0x2A5A750
	0x037C291C CBZ X21, 0x37C2AF0
	0x037C2920 LDR X8, [X21]
	0x037C2924 ADRP X22, 0x984000
	0x037C2928 LDR X22, [X22 + 0x690]
	0x037C292C ADRP X19, 0x984000
	0x037C2930 LDR X9, [X8 + 0x818]
	0x037C2934 LDR X1, [X8 + 0x820]
	0x037C2938 ADRP X29, 0x984000
	0x037C293C LDR X19, [X19 + 0x6A0]
	0x037C2940 LDR X29, [X29 + 0x698]
	0x037C2944 MOV X0, X21
	0x037C2948 BLR X9
	0x037C294C MOV X21, X0
	0x037C2950 LDR X0, [X27]
	0x037C2954 LDR X24, [X28]
	0x037C2958 LDR W8, [X0 + 0xE0]
	0x037C295C CBNZ W8, 0x37C2964
	0x037C2960 BL 0x1C16DFC
	0x037C2964 MOV X0, X24
	0x037C2968 MOV X1, X31
	0x037C296C BL 0x338C698
	0x037C2970 MOV X1, X0
	0x037C2974 MOV X0, X21
	0x037C2978 MOV X2, X31
	0x037C297C BL 0x3395F0C
	0x037C2980 TBZ X0, 0x0, 0x37C2A68
	0x037C2984 LDR X0, [X23]
	0x037C2988 CBZ X0, 0x37C2AF0
	0x037C298C LDR X1, [X22]
	0x037C2990 ADD X8, X31, 0x50
	0x037C2994 BL 0x2A5ABD0
	0x037C2998 LDP V0, V1, [X31 + 0x50]
	0x037C299C LDR V2, [X31 + 0x7]
	0x037C29A0 STP V0, V1, [X31 + 0x80]
	0x037C29A4 STR V2, [X31 + 0xA]
	0x037C29A8 LDR X1, [X19]
	0x037C29AC ADD X0, X31, 0x80
	0x037C29B0 BL 0x2C01CA0
	0x037C29B4 TBZ X0, 0x0, 0x37C29FC
	0x037C29B8 LDR X0, [X27]
	0x037C29BC LDP X25, X24, [X31 + 0x90]
	0x037C29C0 LDR X26, [X31 + 0xA0]
	0x037C29C4 LDR W8, [X0 + 0xE0]
	0x037C29C8 CBNZ W8, 0x37C29D0
	0x037C29CC BL 0x1C16DFC
	0x037C29D0 MOV X0, X26
	0x037C29D4 MOV X1, X21
	0x037C29D8 MOV X2, X31
	0x037C29DC BL 0x3395194
	0x037C29E0 TBZ X0, 0x0, 0x37C29A8
	0x037C29E4 MOV X0, X25
	0x037C29E8 MOV X1, X24
	0x037C29EC MOV X2, X31
	0x037C29F0 BL 0x37577E0
	0x037C29F4 MOV X24, X0
	0x037C29F8 B 0x37C2A00
	0x037C29FC MOV X24, X31
	0x037C2A00 LDR X1, [X29]
	0x037C2A04 ADD X0, X31, 0x80
	0x037C2A08 BL 0x2C01DC8
	0x037C2A0C CBZ X21, 0x37C2AF0
	0x037C2A10 LDR X8, [X21]
	0x037C2A14 MOV X0, X21
	0x037C2A18 LDR X9, [X8 + 0x818]
	0x037C2A1C LDR X1, [X8 + 0x820]
	0x037C2A20 BLR X9
	0x037C2A24 MOV X21, X0
	0x037C2A28 CBZ X24, 0x37C2950
	0x037C2A2C B 0x37C2A6C
	0x037C2A30 B 0x37C2A3C
	0x037C2A34 B 0x37C2A3C
	0x037C2A38 B 0x37C2A3C
	0x037C2A3C CMP W1, 0x1
	0x037C2A40 B.NE 0x37C2CBC
	0x037C2A44 BL 0x3EB1AD0
	0x037C2A48 LDR X24, [X0]
	0x037C2A4C BL 0x3EB1AE0
	0x037C2A50 LDR X1, [X29]
	0x037C2A54 ADD X0, X31, 0x80
	0x037C2A58 BL 0x2C01DC8
	0x037C2A5C CBZ X24, 0x37C2A0C
	0x037C2A60 MOV X0, X24
	0x037C2A64 BL 0x1C16F18
	0x037C2A68 MOV X24, X31
	0x037C2A6C LDP X21, X23, [X31 + 0xB0]
	0x037C2A70 ADD X0, X31, 0x40
	0x037C2A74 MOV X1, X24
	0x037C2A78 MOV X2, X31
	0x037C2A7C STP X31, X31, [X31 + 0x40]
	0x037C2A80 BL 0x3757420
	0x037C2A84 ADRP X8, 0x986000
	0x037C2A88 LDP X1, X2, [X31 + 0x40]
	0x037C2A8C LDR X8, [X8 + 0xE0]
	0x037C2A90 MOVI V0.2D, 0x0
	0x037C2A94 ADD X0, X31, 0x50
	0x037C2A98 STP V0, V0, [X31 + 0x50]
	0x037C2A9C LDR X3, [X8]
	0x037C2AA0 BL 0x2DE897C
	0x037C2AA4 LDR W8, [X31 + 0x14]
	0x037C2AA8 LDP V0, V1, [X31 + 0x50]
	0x037C2AAC LDR X0, [X31 + 0x18]
	0x037C2AB0 AND W5, W20, 0x1
	0x037C2AB4 AND W4, W8, 0x1
	0x037C2AB8 ADD X3, X31, 0x20
	0x037C2ABC MOV X1, X21
	0x037C2AC0 MOV X2, X23
	0x037C2AC4 MOV W6, W31
	0x037C2AC8 STP V0, V1, [X31 + 0x20]
	0x037C2ACC BL 0x37C2CF0
	0x037C2AD0 LDP X20, X19, [X31 + 0x110]
	0x037C2AD4 LDP X22, X21, [X31 + 0x100]
	0x037C2AD8 LDP X24, X23, [X31 + 0xF0]
	0x037C2ADC LDP X26, X25, [X31 + 0xE0]
	0x037C2AE0 LDP X28, X27, [X31 + 0xD0]
	0x037C2AE4 LDP X29, X30, [X31 + 0xC0]
	0x037C2AE8 ADD X31, X31, 0x120
	0x037C2AEC RET
	0x037C2AF0 BL 0x1C16F20
	0x037C2AF4 ADRP X0, 0x936000
	0x037C2AF8 LDR X0, [X0 + 0x528]
	0x037C2AFC BL 0x1C16D08
	0x037C2B00 BL 0x1C16F10
	0x037C2B04 MOV X19, X0
	0x037C2B08 ADRP X0, 0x939000
	0x037C2B0C LDR X0, [X0 + 0x588]
	0x037C2B10 B 0x37C2B30
	0x037C2B14 ADRP X0, 0x936000
	0x037C2B18 LDR X0, [X0 + 0x528]
	0x037C2B1C BL 0x1C16D08
	0x037C2B20 BL 0x1C16F10
	0x037C2B24 MOV X19, X0
	0x037C2B28 ADRP X0, 0x939000
	0x037C2B2C LDR X0, [X0 + 0x5E8]
	0x037C2B30 BL 0x1C16D08
	0x037C2B34 MOV X1, X0
	0x037C2B38 MOV X0, X19
	0x037C2B3C MOV X2, X31
	0x037C2B40 BL 0x330E100
	0x037C2B44 ADRP X0, 0x986000
	0x037C2B48 LDR X0, [X0 + 0xF0]
	0x037C2B4C BL 0x1C16D08
	0x037C2B50 MOV X1, X0
	0x037C2B54 MOV X0, X19
	0x037C2B58 BL 0x1C16DEC
	0x037C2B5C ADRP X0, 0x931000
	0x037C2B60 LDR X0, [X0 + 0xAC8]
	0x037C2B64 BL 0x1C16D08
	0x037C2B68 MOVZ W1, 0x5
	0x037C2B6C BL 0x1C16D6C
	0x037C2B70 MOV X19, X0
	0x037C2B74 BL 0x19903C0
	0x037C2B78 ADRP X0, 0x986000
	0x037C2B7C LDR X0, [X0 + 0xF8]
	0x037C2B80 BL 0x1C16D08
	0x037C2B84 MOV X2, X0
	0x037C2B88 MOV X0, X19
	0x037C2B8C MOV X1, X31
	0x037C2B90 BL 0x1993444
	0x037C2B94 MOV X0, X21
	0x037C2B98 BL 0x19903C0
	0x037C2B9C LDR X8, [X21]
	0x037C2BA0 MOV X0, X21
	0x037C2BA4 LDP X9, X1, [X8 + 0x1A8]
	0x037C2BA8 BLR X9
	0x037C2BAC MOV X20, X0
	0x037C2BB0 MOV X0, X19
	0x037C2BB4 BL 0x19903C0
	0x037C2BB8 MOVZ W1, 0x1
	0x037C2BBC MOV X0, X19
	0x037C2BC0 MOV X2, X20
	0x037C2BC4 BL 0x1993444
	0x037C2BC8 MOV X0, X19
	0x037C2BCC BL 0x19903C0
	0x037C2BD0 ADRP X0, 0x986000
	0x037C2BD4 LDR X0, [X0 + 0x100]
	0x037C2BD8 BL 0x1C16D08
	0x037C2BDC MOV X2, X0
	0x037C2BE0 MOVZ W1, 0x2
	0x037C2BE4 MOV X0, X19
	0x037C2BE8 BL 0x1993444
	0x037C2BEC MOV X0, X21
	0x037C2BF0 BL 0x19903C0
	0x037C2BF4 LDR X8, [X21]
	0x037C2BF8 MOV X0, X21
	0x037C2BFC LDR X9, [X8 + 0x818]
	0x037C2C00 LDR X1, [X8 + 0x820]
	0x037C2C04 BLR X9
	0x037C2C08 MOV X20, X0
	0x037C2C0C BL 0x19903C0
	0x037C2C10 LDR X8, [X20]
	0x037C2C14 MOV X0, X20
	0x037C2C18 LDP X9, X1, [X8 + 0x1A8]
	0x037C2C1C BLR X9
	0x037C2C20 MOV X20, X0
	0x037C2C24 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0xC20000
	012 Move W8, [X20+510]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {56}
	018 Move X0, 0x95A000
	019 Move X0, [X0+3216]
	020 Call 0x1C17CF4
	021 Move X0, 0x932000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move X0, 0x95A000
	025 Move X0, [X0+3856]
	026 Call 0x1C17CF4
	027 Move X0, 0x95A000
	028 Move X0, [X0+3864]
	029 Call 0x1C17CF4
	030 Move X0, 0x95A000
	031 Move X0, [X0+3872]
	032 Call 0x1C17CF4
	033 Move X0, 0x987000
	034 Move X0, [X0+64]
	035 Call 0x1C17CF4
	036 Move X0, 0x95A000
	037 Move X0, [X0+3888]
	038 Call 0x1C17CF4
	039 Move X0, 0x987000
	040 Move X0, [X0+72]
	041 Call 0x1C17CF4
	042 Move X0, 0x985000
	043 Move X0, [X0+3416]
	044 Call 0x1C17CF4
	045 Move X0, 0x987000
	046 Move X0, [X0+80]
	047 Call 0x1C17CF4
	048 Move X0, 0x987000
	049 Move X0, [X0+88]
	050 Call 0x1C17CF4
	051 Move X0, 0x987000
	052 Move X0, [X0+96]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X20+510], W8
	056 Move [X31+88], W31
	057 Move [X31+80], X31
	058 Move [X31+48], X31
	059 Move [X31+56], X31
	060 Move [X31+64], X31
	061 Move [X31+32], X31
	062 Move [X31+40], X31
	063 Move X20, [X19+1152]
	064 Compare X20, 0
	065 JumpIfEqual {306}
	066 Move W8, [X20+32]
	067 Move W21, [X19+168]
	068 Compare W8, 0
	069 JumpIfNotEqual {77}
	070 Move W1, 1
	071 Move X0, X20
	072 Move X2, X31
	073 Call InputSettings.set_updateMode, X0, X1
	074 Move X20, [X19+1152]
	075 Compare X20, 0
	076 JumpIfEqual {306}
	077 Move W8, [X20+32]
	078 Subtract W8, W8, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X9, -46309376
	081 Add X9, X9, 2416
	082 Move W8, [X9]
	083 Move W9, [X19+168]
	084 And W10, W21, 4
	085 Or W8, W10, W8
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W9, [X19+112]
	088 Move [X19+168], W8
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X0, X19
	091 Call InputManager.ReallocateStateBuffers, X0
	092 Move X0, X19
	093 Call InputManager.AddAvailableDevicesThatAreNowRecognized, X0
	094 Move X0, [X19+1152]
	095 Compare X0, 0
	096 JumpIfEqual {306}
	097 Move X1, X31
	098 Call InputSettings.get_supportedDevices, X0
	099 Move X8, X1
	100 ShiftRight X8, 32
	101 And X8, X8, 0x7FFFFFFF
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W8, [X19+112]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move W21, W31
	106 Move X8, [X19+120]
	107 Compare X8, 0
	108 JumpIfEqual {306}
	109 Move W9, [X8+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X8, X8, W21
	112 Move X20, [X8+32]
	113 Compare X20, 0
	114 JumpIfEqual {306}
	115 Move W8, [X19+136]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X11, [X19+144]
	118 Compare X11, 0
	119 JumpIfEqual {306}
	120 Move X1, [X20+88]
	121 Move X2, [X20+96]
	122 Move W10, [X11+24]
	123 Move W9, W31
	124 Add X11, X11, 88
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move W12, [X11]
	127 Move W13, [X20+224]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Add W9, W9, 1
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add X11, X11, 64
	132 Move X0, X19
	133 Call InputManager.IsDeviceLayoutMarkedAsSupportedInSettings, X0, X1
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfEqual {143}
	138 Move W2, 1
	139 Move X0, X19
	140 Move X1, X20
	141 Call InputManager.RemoveDevice, X0, X1, X2
	142 Subtract W21, W21, 1
	143 Move W8, [X19+112]
	144 Add W21, W21, 1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X0, [X19+1152]
	147 Compare X0, 0
	148 JumpIfEqual {306}
	149 Move X8, [X0+96]
	150 Compare X8, 0
	151 JumpIfEqual {188}
	152 Move X8, 0x987000
	153 Move X8, [X8+96]
	154 Move X2, X31
	155 Move X1, [X8]
	156 Call InputSettings.IsFeatureEnabled, X0, X1
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {188}
	161 Move W0, 1
	162 Move X1, X31
	163 Call UseWindowsGamingInputCommand.Create, X0
	164 Move X8, 0x987000
	165 Move X8, [X8+64]
	166 Move [X31+80], X0
	167 Move [X31+88], W1
	168 Add X1, X31, 80
	169 Move X2, [X8]
	170 Move X0, X19
	171 Call 0x2209408, X0, X1
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {188}
	176 Move X8, 0x932000
	177 Move X8, [X8+2600]
	178 Move X0, [X8]
	179 Move W8, [X0+224]
	180 Compare W8, 0
	181 JumpIfNotEqual {183}
	182 Call 0x1C17DFC
	183 Move X8, 0x987000
	184 Move X8, [X8+88]
	185 Move X1, X31
	186 Move X0, [X8]
	187 Call Debug.LogError, X0
	188 Move X8, [X19+1152]
	189 Compare X8, 0
	190 JumpIfEqual {306}
	191 Move X9, 0x985000
	192 Move X9, [X9+3416]
	193 Move V0, [X8+72]
	194 Move X10, 0x95A000
	195 Move X26, 0x95A000
	196 Move X9, [X9]
	197 Move X24, 0x95A000
	198 Move TEMP, 0x80800000
	199 Not TEMP
	200 Move W11, TEMP
	201 Move S2, W11
	202 Move X9, [X9+184]
	203 Move X25, 0x95A000
	204 Move X23, 0x987000
	205 Move X22, 0x95A000
	206 Move [X9+8], S0
	207 Move V0, [X8+88]
	208 Move X0, X19
	209 Move [X9+12], S0
	210 Move V0, [X8+84]
	211 Move X10, [X10+3216]
	212 Move X26, [X26+3888]
	213 Multiply S0, S0, S0
	214 Move [X9+16], S0
	215 Move X9, [X10]
	216 Move X10, -47022080
	217 Move V0, [X8+64]
	218 Move V1, [X10+3880]
	219 Move X24, [X24+3864]
	220 Move X9, [X9+184]
	221 NotImplemented "Instruction FMIN not yet implemented."
	222 NotImplemented "Instruction FCMP not yet implemented."
	223 NotImplemented "Instruction FCSEL not yet implemented."
	224 Move [X9], S0
	225 Move V0, [X8+68]
	226 Move X25, [X25+3872]
	227 Move X23, [X23+80]
	228 Move X22, [X22+3856]
	229 Move [X9+4], S0
	230 Call InputManager.get_devices, X0
	231 Move X9, [X26]
	232 Move [X31+32], X0
	233 Move [X31+40], X1
	234 Add X8, X31, 8
	235 Add X0, X31, 32
	236 Move X1, X9
	237 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	238 NotImplemented "Instruction LDUR not yet implemented."
	239 Move X8, [X31+24]
	240 Move [X31+3], V0
	241 Move [X31+64], X8
	242 Move X1, [X24]
	243 Add X0, X31, 48
	244 Call Enumerator<Object>.MoveNext, X0
	245 Move TEMP, X0
	246 And TEMP, TEMP, 1
	247 Compare TEMP, 1
	248 JumpIfNotEqual {256}
	249 Move X1, [X25]
	250 Add X0, X31, 48
	251 Call Enumerator<Object>.get_Current, X0
	252 Compare X0, 0
	253 JumpIfEqual {307}
	254 Move X1, X31
	255 Call 0x3780584
	256 Move X1, [X22]
	257 Add X0, X31, 48
	258 Call Enumerator<Object>.Dispose, X0
	259 Move X0, X19
	260 Call InputManager.get_devices, X0
	261 Move X9, [X26]
	262 Move [X31+32], X0
	263 Move [X31+40], X1
	264 Add X8, X31, 8
	265 Add X0, X31, 32
	266 Move X1, X9
	267 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	268 NotImplemented "Instruction LDUR not yet implemented."
	269 Move X8, [X31+24]
	270 Move [X31+3], V0
	271 Move [X31+64], X8
	272 Move X1, [X24]
	273 Add X0, X31, 48
	274 Call Enumerator<Object>.MoveNext, X0
	275 Move TEMP, X0
	276 And TEMP, TEMP, 1
	277 Compare TEMP, 1
	278 JumpIfNotEqual {286}
	279 Move X1, [X25]
	280 Add X0, X31, 48
	281 Call Enumerator<Object>.get_Current, X0
	282 Compare X0, 0
	283 JumpIfEqual {308}
	284 Move X1, X31
	285 Call InputControl.MarkAsStaleRecursively, X0
	286 Move X1, [X22]
	287 Add X0, X31, 48
	288 Call Enumerator<Object>.Dispose, X0
	289 Move X1, [X23]
	290 Add X0, X19, 864
	291 Move X2, X31
	292 Move X3, X31
	293 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2
	294 Move X20, [X31+160]
	295 Move X19, [X31+168]
	296 Move X22, [X31+144]
	297 Move X21, [X31+152]
	298 Move X24, [X31+128]
	299 Move X23, [X31+136]
	300 Move X26, [X31+112]
	301 Move X25, [X31+120]
	302 Move X30, [X31+96]
	303 Add X31, X31, 176
	304 Return 
	305 Call 0x1C17F28
	306 Call 0x1C17F20
	307 Call 0x1C17F20
	308 Call 0x1C17F20
	309 Move X0, X20
	310 Call 0x19913C0
	311 Move X0, 0x985000
	312 Move W19, [X20+32]
	313 Move X0, [X0+2496]
	314 Call 0x1C17D08
	315 Move TEMP, 0
	316 Not TEMP
	317 Move X8, TEMP
	318 Move [X31+8], X0
	319 Move [X31+16], X8
	320 Add X0, X31, 8
	321 Move X1, X31
	322 Move [X31+24], W19
	323 Call Enum.ToString, X0
	324 Move X19, X0
	325 Move X0, 0x987000
	326 Move X0, [X0+104]
	327 Call 0x1C17D08
	328 Move X1, X19
	329 Move X2, X31
	330 Call String.Concat, X0, X1
	331 Move X19, X0
	332 Move X0, 0x932000
	333 Move X0, [X0+2880]
	334 Call 0x1C17D08
	335 Call 0x1C17F10
	336 Move X1, X19
	337 Move X2, X31
	338 Move X20, X0
	339 Call NotSupportedException..ctor, X0, X1
	340 Move X0, 0x987000
	341 Move X0, [X0+112]
	342 Call 0x1C17D08
	343 Move X1, X0
	344 Move X0, X20
	345 Call 0x1C17DEC
	346 Move X20, X0
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Move X0, X20
	349 Call 0x3EB2AD0
	350 Move X21, [X0]
	351 Call 0x3EB2AE0
	352 Move X1, [X22]
	353 Add X0, X31, 48
	354 Call Enumerator<Object>.Dispose, X0
	355 Compare X21, 0
	356 JumpIfEqual {289}
	357 Move X21, X31
	358 Move X20, X0
	359 Move X1, [X22]
	360 Add X0, X31, 48
	361 Call Enumerator<Object>.Dispose, X0
	362 Compare X21, 0
	363 JumpIfEqual {386}
	364 Move X0, X21
	365 Call 0x1C17F18
	366 Move X20, X0
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move X0, X20
	369 Call 0x3EB2AD0
	370 Move X21, [X0]
	371 Call 0x3EB2AE0
	372 Move X1, [X22]
	373 Add X0, X31, 48
	374 Call Enumerator<Object>.Dispose, X0
	375 Compare X21, 0
	376 JumpIfEqual {259}
	377 Move X0, X21
	378 Call 0x1C17F18
	379 Move X21, X31
	380 Move X20, X0
	381 Move X1, [X22]
	382 Add X0, X31, 48
	383 Call Enumerator<Object>.Dispose, X0
	384 Compare X21, 0
	385 JumpIfNotEqual {388}
	386 Move X0, X20
	387 Call 0x1D2D690
	388 Move X0, X21
	389 Call 0x1C17F18
	390 Call 0x1991590

Method: System.Int64 ExecuteGlobalCommand(ref TCommand command)

Disassembly:
	0x02209408 MOV X0, X19
	0x0220940C BLR X8
	0x02209410 MOV X24, X25
	0x02209414 MOV X21, X26
	0x02209418 MOV W20, W27
	0x0220941C MOV X19, X28
	0x02209420 CBZ X24, 0x2209468
	0x02209424 LDR X6, [X31 + 0x8]
	0x02209428 MOV X0, X24
	0x0220942C MOV X1, X21
	0x02209430 MOV W2, W20
	0x02209434 MOV X3, X19
	0x02209438 MOV W4, W29
	0x0220943C MOV W5, W22
	0x02209440 MOV X7, X31
	0x02209444 BL 0x37C6A44
	0x02209448 LDP X20, X19, [X31 + 0x60]
	0x0220944C LDP X22, X21, [X31 + 0x50]
	0x02209450 LDP X24, X23, [X31 + 0x40]
	0x02209454 LDP X26, X25, [X31 + 0x30]
	0x02209458 LDP X28, X27, [X31 + 0x20]
	0x0220945C LDP X29, X30, [X31 + 0x10]
	0x02209460 ADD X31, X31, 0x70
	0x02209464 RET
	0x02209468 BL 0x1C16F20
	0x0220946C ADRP X0, 0x1F12000
	0x02209470 LDR X0, [X0 + 0xEF0]
	0x02209474 BL 0x1C16D08
	0x02209478 MOV X1, X22
	0x0220947C MOV X2, X31
	0x02209480 BL 0x321EFD0
	0x02209484 MOV X19, X0
	0x02209488 ADRP X0, 0x1EF2000
	0x0220948C LDR X0, [X0 + 0x578]
	0x02209490 BL 0x1C16D08
	0x02209494 BL 0x1C16F10
	0x02209498 MOV X20, X0
	0x0220949C ADRP X0, 0x1F12000
	0x022094A0 LDR X0, [X0 + 0xD60]
	0x022094A4 BL 0x1C16D08
	0x022094A8 MOV X2, X0
	0x022094AC MOV X0, X20
	0x022094B0 MOV X1, X19
	0x022094B4 MOV X3, X31
	0x022094B8 BL 0x330E16C
	0x022094BC MOV X0, X20
	0x022094C0 B 0x22094F8
	0x022094C4 ADRP X0, 0x1EEF000
	0x022094C8 LDR X0, [X0 + 0x528]
	0x022094CC BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x21D1000
	006 Move X21, 0x1F13000
	007 Move W8, [X20+2126]
	008 Move X21, [X21+3784]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x1F13000
	015 Move X0, [X0+3792]
	016 Call 0x1C17CF4
	017 Move X0, 0x1F13000
	018 Move X0, [X0+3784]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2126], W8
	022 Move X8, [X21]
	023 Move X8, [X8+184]
	024 Move X20, [X8]
	025 Compare X20, 0
	026 JumpIfEqual {57}
	027 Move X10, 0x1F13000
	028 Move X8, [X20]
	029 Move X10, [X10+3792]
	030 NotImplemented "Instruction LDRH not yet implemented."
	031 Move X1, [X10]
	032 Compare X9, 0
	033 JumpIfEqual {40}
	034 Move X10, [X8+176]
	035 Add X10, X10, 8
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Subtract X9, X9, 1
	039 Add X10, X10, 16
	040 Move W2, 3
	041 Move X0, X20
	042 Call 0x1C5D788
	043 Move W9, [X10]
	044 Add W9, W9, 3
	045 Add X8, X8, W9
	046 Add X0, X8, 312
	047 Move X4, [X0]
	048 Move X3, [X0+8]
	049 Move X0, X20
	050 Move X2, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move W1, W31
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 CallNoReturn X4
	057 Call 0x1C17F20

Method: System.Void AddAvailableDevicesThatAreNowRecognized()

Disassembly:
	0x037C30EC LDR X0, [X0 + 0x510]
	0x037C30F0 BL 0x1C16D08
	0x037C30F4 ADD X1, X31, 0x10
	0x037C30F8 BL 0x1C16E04
	0x037C30FC MOV X19, X0
	0x037C3100 ADRP X0, 0x985000
	0x037C3104 LDR X0, [X0 + 0x130]
	0x037C3108 BL 0x1C16D08
	0x037C310C MOV X1, X19
	0x037C3110 MOV X2, X31
	0x037C3114 BL 0x321EFD0
	0x037C3118 MOV X19, X0
	0x037C311C ADRP X0, 0x930000
	0x037C3120 LDR X0, [X0 + 0xB40]
	0x037C3124 BL 0x1C16D08
	0x037C3128 BL 0x1C16F10
	0x037C312C MOV X1, X19
	0x037C3130 MOV X2, X31
	0x037C3134 MOV X20, X0
	0x037C3138 BL 0x3379A44
	0x037C313C ADRP X0, 0x985000
	0x037C3140 LDR X0, [X0 + 0x138]
	0x037C3144 BL 0x1C16D08
	0x037C3148 MOV X1, X0
	0x037C314C MOV X0, X20
	0x037C3150 BL 0x1C16DEC
	0x037C3154 SUB X31, X31, 0x40
	0x037C3158 STP X30, X21, [X31 + 0x20]
	0x037C315C STP X20, X19, [X31 + 0x30]
	0x037C3160 ADRP X21, 0xC1E000
	0x037C3164 LDRB W8, [X21 + 0x1D4]
	0x037C3168 MOV X20, X1
	0x037C316C MOV X19, X0
	0x037C3170 STR X2, [X31 + 0x18]
	0x037C3174 TBNZ X8, 0x0, 0x37C318C
	0x037C3178 ADRP X0, 0x958000
	0x037C317C LDR X0, [X0 + 0xEC0]
	0x037C3180 BL 0x1C16CF4
	0x037C3184 MOVZ W8, 0x1
	0x037C3188 STRB W8, [X21 + 0x1D4]
	0x037C318C MOV X0, X20
	0x037C3190 MOV X1, X31
	0x037C3194 STP X31, X31, [X31 + 0x8]
	0x037C3198 BL 0x32277A8
	0x037C319C TBNZ X0, 0x0, 0x37C3218
	0x037C31A0 ADRP X8, 0x958000
	0x037C31A4 LDR X8, [X8 + 0xEC0]
	0x037C31A8 LDR X0, [X8]
	0x037C31AC LDR W8, [X0 + 0xE0]
	0x037C31B0 CBNZ W8, 0x37C31B8
	0x037C31B4 BL 0x1C16DFC
	0x037C31B8 ADD X0, X31, 0x18
	0x037C31BC MOV X1, X31
	0x037C31C0 BL 0x3755C40
	0x037C31C4 TBNZ X0, 0x0, 0x37C324C
	0x037C31C8 ADD X0, X31, 0x8
	0x037C31CC MOV X1, X20
	0x037C31D0 MOV X2, X31
	0x037C31D4 BL 0x3757420
	0x037C31D8 LDP X1, X2, [X31 + 0x8]
	0x037C31DC LDR X3, [X31 + 0x18]
	0x037C31E0 ADD X0, X19, 0x18
	0x037C31E4 MOV X4, X31
	0x037C31E8 BL 0x3819148
	0x037C31EC LDR X1, [X31 + 0x18]
	0x037C31F0 MOV X0, X19
	0x037C31F4 BL 0x37C39AC
	0x037C31F8 LDP X3, X1, [X31 + 0x10]
	0x037C31FC LDR X2, [X31 + 0x8]
	0x037C3200 MOV X0, X19
	0x037C3204 BL 0x37C3BE8
	0x037C3208 LDP X20, X19, [X31 + 0x30]
	0x037C320C LDP X30, X21, [X31 + 0x20]
	0x037C3210 ADD X31, X31, 0x40
	0x037C3214 RET
	0x037C3218 ADRP X0, 0x935000
	0x037C321C LDR X0, [X0 + 0x528]
	0x037C3220 BL 0x1C16D08
	0x037C3224 BL 0x1C16F10
	0x037C3228 MOV X19, X0
	0x037C322C ADRP X0, 0x983000
	0x037C3230 LDR X0, [X0 + 0x818]
	0x037C3234 BL 0x1C16D08
	0x037C3238 MOV X1, X0
	0x037C323C MOV X0, X19
	0x037C3240 MOV X2, X31
	0x037C3244 BL 0x330E100
	0x037C3248 B 0x37C3290
	0x037C324C ADRP X0, 0x938000
	0x037C3250 LDR X0, [X0 + 0x578]
	0x037C3254 BL 0x1C16D08
	0x037C3258 BL 0x1C16F10
	0x037C325C MOV X19, X0
	0x037C3260 ADRP X0, 0x985000
	0x037C3264 LDR X0, [X0 + 0x140]
	0x037C3268 BL 0x1C16D08
	0x037C326C MOV X20, X0
	0x037C3270 ADRP X0, 0x985000
	0x037C3274 LDR X0, [X0 + 0x148]
	0x037C3278 BL 0x1C16D08
	0x037C327C MOV X2, X0
	0x037C3280 MOV X0, X19
	0x037C3284 MOV X1, X20
	0x037C3288 MOV X3, X31
	0x037C328C BL 0x330E16C
	0x037C3290 ADRP X0, 0x985000
	0x037C3294 LDR X0, [X0 + 0x150]
	0x037C3298 BL 0x1C16D08
	0x037C329C MOV X1, X0
	0x037C32A0 MOV X0, X19
	0x037C32A4 BL 0x1C16DEC
	0x037C32A8 SUB X31, X31, 0x90
	0x037C32AC STP X30, X23, [X31 + 0x60]
	0x037C32B0 STP X22, X21, [X31 + 0x70]
	0x037C32B4 STP X20, X19, [X31 + 0x80]
	0x037C32B8 ADRP X23, 0xC1E000
	0x037C32BC LDRB W8, [X23 + 0x1CF]
	0x037C32C0 MOV X21, X3
	0x037C32C4 MOV X22, X2
	0x037C32C8 MOV X20, X1
	0x037C32CC MOV X19, X0
	0x037C32D0 TBNZ X8, 0x0, 0x37C32F4
	0x037C32D4 ADRP X0, 0x985000
	0x037C32D8 LDR X0, [X0 + 0x158]
	0x037C32DC BL 0x1C16CF4
	0x037C32E0 ADRP X0, 0x985000
	0x037C32E4 LDR X0, [X0 + 0xE0]
	0x037C32E8 BL 0x1C16CF4
	0x037C32EC MOVZ W8, 0x1
	0x037C32F0 STRB W8, [X23 + 0x1CF]
	0x037C32F4 STP X31, X31, [X31 + 0x50]
	0x037C32F8 STP X31, X31, [X31 + 0x40]
	0x037C32FC CBZ X20, 0x37C33C8
	0x037C3300 MOV X0, X22
	0x037C3304 MOV X1, X31
	0x037C3308 BL 0x32277A8
	0x037C330C TBNZ X0, 0x0, 0x37C33E8
	0x037C3310 ADD X0, X31, 0x50
	0x037C3314 MOV X1, X22
	0x037C3318 MOV X2, X31
	0x037C331C BL 0x3757420
	0x037C3320 ADD X0, X31, 0x40
	0x037C3324 MOV X1, X21
	0x037C3328 MOV X2, X31
	0x037C332C BL 0x3757420
	0x037C3330 LDP X1, X2, [X31 + 0x50]
	0x037C3334 ADD X0, X19, 0x18
	0x037C3338 MOV X3, X31
	0x037C333C BL 0x3813EB4
	0x037C3340 LDR X8, [X19 + 0x28]
	0x037C3344 CBZ X8, 0x37C3430
	0x037C3348 ADRP X9, 0x985000
	0x037C334C LDR X9, [X9 + 0x158]
	0x037C3350 LDP X1, X2, [X31 + 0x50]
	0x037C3354 ADRP X23, 0x985000
	0x037C3358 MOV W21, W0
	0x037C335C LDR X4, [X9]
	0x037C3360 LDR X23, [X23 + 0xE0]
	0x037C3364 MOV X0, X8
	0x037C3368 MOV X3, X20
	0x037C336C BL 0x2A5A750

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+336], X29
	003 Move [X31+344], X30
	004 Move [X31+352], X24
	005 Move [X31+360], X23
	006 Move [X31+368], X22
	007 Move [X31+376], X21
	008 Move [X31+384], X20
	009 Move [X31+392], X19
	010 Move X20, 0xC1F000
	011 Move W8, [X20+511]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x986000
	018 Move X0, [X0+176]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+511], W8
	022 Move [X31+320], X31
	023 Move [X31+328], X31
	024 Move [X31+312], X31
	025 Move W8, [X19+136]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X24, 0x986000
	028 Move X20, 0x931000
	029 Move X24, [X24+176]
	030 Move X20, [X20+2000]
	031 Move X22, X31
	032 Move X23, X31
	033 Move X8, [X19+144]
	034 Compare X8, 0
	035 JumpIfEqual {171}
	036 Move W9, [X8+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X8, X8, X22
	039 Move W21, [X8+88]
	040 Move X0, X19
	041 Move W1, W21
	042 Call InputManager.TryGetDeviceById, X0, X1
	043 Compare X0, 0
	044 JumpIfNotEqual {139}
	045 Move X8, [X19+144]
	046 Compare X8, 0
	047 JumpIfEqual {171}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X8, X8, X22
	051 Add X1, X8, 32
	052 Move X0, X19
	053 Move W2, W21
	054 Call InputManager.TryFindMatchingControlLayout, X0, X1, X2
	055 Move X8, X0
	056 Move X2, X1
	057 Move [X31+320], X0
	058 Move [X31+328], X1
	059 Move X0, X19
	060 Move X1, X8
	061 Call InputManager.IsDeviceLayoutMarkedAsSupportedInSettings, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {139}
	066 Add X0, X31, 320
	067 Move X1, X31
	068 Call InternedString.IsEmpty, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {83}
	073 Compare W21, 0
	074 JumpIfEqual {139}
	075 Move X0, X31
	076 Call DisableDeviceCommand.Create
	077 Move [X31+312], X0
	078 Move X0, [X19+1088]
	079 Move X3, [X24]
	080 Add X2, X31, 312
	081 Move W1, W21
	082 Call 0x2209D80, X0, X1, X2
	083 Move X8, [X19+144]
	084 Compare X8, 0
	085 JumpIfEqual {143}
	086 Move W9, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X8, X8, X22
	089 Move X9, [X8+80]
	090 Move V1, [X8+48]
	091 Move V0, [X8+64]
	092 Move V2, [X8+2]
	093 Move [X31+112], X9
	094 Move [X31+80], V1
	095 Move [X31+88], V0
	096 Move [X31+4], V2
	097 Move W8, [X8+92]
	098 Compare W8, 0
	099 JumpIfEqual {110}
	100 Move V0, [X31+64]
	101 Move V1, [X31+80]
	102 Move V2, [X31+6]
	103 Move X9, [X31+112]
	104 Add X8, X31, 256
	105 Move W6, 16
	106 Move [X31+256], V0
	107 Move [X31+264], V1
	108 Move [X31+18], V2
	109 Move [X31+304], X9
	110 Move V0, [X31+64]
	111 Move V1, [X31+80]
	112 Move V2, [X31+6]
	113 Move X9, [X31+112]
	114 Move W6, W31
	115 Add X8, X31, 192
	116 Move [X31+192], V0
	117 Move [X31+200], V1
	118 Move [X31+14], V2
	119 Move [X31+240], X9
	120 Move V0, [X8]
	121 Move V1, [X8+16]
	122 Move X9, [X8+48]
	123 Move V2, [X8+2]
	124 Move X2, [X31+320]
	125 Move X3, [X31+328]
	126 Move [X31+8], V0
	127 Move [X31+176], X9
	128 Move [X31+144], V1
	129 Move [X31+152], V2
	130 Move [X31], V0
	131 Move [X31+8], V1
	132 Move [X31+2], V2
	133 Move [X31+48], X9
	134 Add X1, X31, 0
	135 Move X0, X19
	136 Move X4, X31
	137 Move W5, W21
	138 Call InputManager.AddDevice, X0, X1, X2, X3, X4, X5
	139 NotImplemented "Instruction LDRSW not yet implemented."
	140 Add X23, X23, 1
	141 Add X22, X22, 64
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Call 0x1C17F20
	144 Call 0x1C17F28
	145 Move X21, X0
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X0, X21
	148 Call 0x3EB2AD0
	149 Move X21, X0
	150 Move X0, X20
	151 Call 0x1C17D08
	152 Move X8, [X21]
	153 Move X1, [X8]
	154 Call 0x1C18270
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {172}
	159 Call 0x3EB2AE0
	160 Move X20, [X31+384]
	161 Move X19, [X31+392]
	162 Move X22, [X31+368]
	163 Move X21, [X31+376]
	164 Move X24, [X31+352]
	165 Move X23, [X31+360]
	166 Move X29, [X31+336]
	167 Move X30, [X31+344]
	168 Add X31, X31, 400
	169 Return 
	170 Call 0x1C17F28
	171 Call 0x1C17F20
	172 Move W0, 8
	173 Call 0x3EB2AF0
	174 Move X8, [X21]
	175 Move [X0], X8
	176 Move X1, 0x6F2000
	177 Add X1, X1, 3672
	178 Move X2, X31
	179 Call 0x3EB2B00
	180 Move X21, X0
	181 Call 0x3EB2AE0
	182 Move X0, X21
	183 Call 0x1D2D690
	184 Call 0x1991590

Method: System.Boolean ShouldRunDeviceInBackground(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037C6BB0 MOV W6, W22
	0x037C6BB4 BL 0x37CBBA8
	0x037C6BB8 ADRP X8, 0x982000
	0x037C6BBC LDR X8, [X8 + 0x2F8]
	0x037C6BC0 ADD X0, X20, 0x130
	0x037C6BC4 MOV X1, X21
	0x037C6BC8 MOV X4, X31
	0x037C6BCC LDR X3, [X8]
	0x037C6BD0 ADRP X8, 0x982000
	0x037C6BD4 LDR X8, [X8 + 0x2F0]
	0x037C6BD8 LDR X19, [X31 + 0x18]
	0x037C6BDC LDR X5, [X8]
	0x037C6BE0 MOV X2, X19
	0x037C6BE4 BL 0x21ADDB8
	0x037C6BE8 TBZ X28, 0x0, 0x37C6C0C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+1152]
	003 Compare X8, 0
	004 JumpIfEqual {17}
	005 Move W8, [X8+48]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W0, W31
	008 Move X30, [X31+16]
	009 Return X0
	010 Compare X1, 0
	011 JumpIfEqual {17}
	012 Move X0, X1
	013 Move X1, X31
	014 Move X30, [X31+16]
	015 Call InputDevice.get_canRunInBackground, X0
	016 Return X0
	017 Call 0x1C17F20

Method: System.Void OnFocusChanged(System.Boolean focus)

Disassembly:
	0x037CADE4 ADRP X10, 0x97E000
	0x037CADE8 LDRH W9, [X8 + 0x12E]
	0x037CADEC LDR X10, [X10 + 0x750]
	0x037CADF0 LDR X1, [X10]
	0x037CADF4 CBZ X9, 0x37CAE18
	0x037CADF8 LDR X10, [X8 + 0xB0]
	0x037CADFC ADD X10, X10, 0x8
	0x037CAE00 LDUR X11, [X10 - 0x8]
	0x037CAE04 CMP X11, X1
	0x037CAE08 B.EQ 0x37CAF10
	0x037CAE0C SUBS X9, X9, 0x1
	0x037CAE10 ADD X10, X10, 0x10
	0x037CAE14 B.NE 0x37CAE00
	0x037CAE18 MOV X0, X26
	0x037CAE1C MOV W2, W31
	0x037CAE20 BL 0x1C5C788
	0x037CAE24 B 0x37CAF1C
	0x037CAE28 LDR W9, [X10]
	0x037CAE2C ADD W9, W9, 0x1
	0x037CAE30 ADD X8, X8, W9, 0x4, SXTW
	0x037CAE34 ADD X0, X8, 0x138
	0x037CAE38 LDP X8, X2, [X0]
	0x037CAE3C MOV X0, X23
	0x037CAE40 MOV X1, X24
	0x037CAE44 BLR X8
	0x037CAE48 LDRB W8, [X20 + 0x488]
	0x037CAE4C CMP W8, 0x0
	0x037CAE50 CSET W22, NE
	0x037CAE54 ADD X0, X31, 0xD8
	0x037CAE58 MOV X1, X31
	0x037CAE5C BL 0x3802748
	0x037CAE60 LDR V9, [X26 + 0x128]
	0x037CAE64 MOV W23, W0
	0x037CAE68 ADD X0, X31, 0xD8
	0x037CAE6C MOV X1, X31
	0x037CAE70 BL 0x3802884
	0x037CAE74 FCMP D9, D0
	0x037CAE78 B.HI 0x37CAE8C
	0x037CAE7C ADD X0, X31, 0xD8
	0x037CAE80 MOV X1, X31
	0x037CAE84 BL 0x3802884
	0x037CAE88 STR D0, [X26 + 0x128]
	0x037CAE8C LDR W8, [X31 + 0x5C]
	0x037CAE90 ADD W8, W23, W8
	0x037CAE94 STR W8, [X31 + 0x5C]
	0x037CAE98 TBZ X22, 0x0, 0x37CAF9C
	0x037CAE9C LDR X8, [X26]
	0x037CAEA0 LDR X1, [X8 + 0x250]
	0x037CAEA4 LDR X9, [X8 + 0x248]
	0x037CAEA8 MOV X0, X26
	0x037CAEAC BLR X9
	0x037CAEB0 B 0x37CAF9C
	0x037CAEB4 LDR W9, [X10]
	0x037CAEB8 ADD W9, W9, 0x1
	0x037CAEBC ADD X8, X8, W9, 0x4, SXTW
	0x037CAEC0 ADD X22, X8, 0x138
	0x037CAEC4 LDR X23, [X22]
	0x037CAEC8 ADD X0, X31, 0x220
	0x037CAECC ADD X1, X31, 0x110
	0x037CAED0 MOVZ W2, 0x84
	0x037CAED4 BL 0x3EB1AC0
	0x037CAED8 LDR X2, [X22 + 0x8]
	0x037CAEDC ADD X1, X31, 0x220
	0x037CAEE0 MOV X0, X24
	0x037CAEE4 BLR X23
	0x037CAEE8 STR X24, [X31 + 0x20]
	0x037CAEEC B 0x37CAF9C
	0x037CAEF0 LDRSW X9, [X10]
	0x037CAEF4 ADD X8, X8, X9, 0x4, LSL
	0x037CAEF8 ADD X0, X8, 0x138
	0x037CAEFC LDP X8, X2, [X0]
	0x037CAF00 MOV X0, X26
	0x037CAF04 MOV W1, W27
	0x037CAF08 BLR X8
	0x037CAF0C B 0x37CAF9C
	0x037CAF10 LDRSW X9, [X10]
	0x037CAF14 ADD X8, X8, X9, 0x4, LSL
	0x037CAF18 ADD X0, X8, 0x138
	0x037CAF1C LDP X8, X2, [X0]
	0x037CAF20 ADD W9, W27, 0xF0000
	0x037CAF24 MOVN W1, 0x27FF
	0x037CAF28 BFM W1, W9, 0xA, 0x13
	0x037CAF2C MOV X0, X26
	0x037CAF30 BLR X8
	0x037CAF34 LDR X8, [X26]
	0x037CAF38 ADRP X10, 0x97E000
	0x037CAF3C LDRH W9, [X8 + 0x12E]
	0x037CAF40 LDR X10, [X10 + 0x750]
	0x037CAF44 LDR X1, [X10]
	0x037CAF48 CBZ X9, 0x37CAF6C
	0x037CAF4C LDR X10, [X8 + 0xB0]
	0x037CAF50 ADD X10, X10, 0x8
	0x037CAF54 LDUR X11, [X10 - 0x8]
	0x037CAF58 CMP X11, X1
	0x037CAF5C B.EQ 0x37CAF7C
	0x037CAF60 SUBS X9, X9, 0x1
	0x037CAF64 ADD X10, X10, 0x10
	0x037CAF68 B.NE 0x37CAF54
	0x037CAF6C MOV X0, X26
	0x037CAF70 MOV W2, W31
	0x037CAF74 BL 0x1C5C788
	0x037CAF78 B 0x37CAF88
	0x037CAF7C LDRSW X9, [X10]
	0x037CAF80 ADD X8, X8, X9, 0x4, LSL
	0x037CAF84 ADD X0, X8, 0x138
	0x037CAF88 LDP X8, X2, [X0]
	0x037CAF8C MOVN W1, 0x23FF
	0x037CAF90 BFM W1, W27, 0x0, 0x9
	0x037CAF94 MOV X0, X26
	0x037CAF98 BLR X8
	0x037CAF9C MOV X0, X19
	0x037CAFA0 MOV W1, W31
	0x037CAFA4 MOV X2, X31
	0x037CAFA8 BL 0x3803298
	0x037CAFAC B 0x37CA564
	0x037CAFB0 ADRP X8, 0x929000
	0x037CAFB4 LDR X8, [X8 + 0xA28]
	0x037CAFB8 LDR X0, [X8]
	0x037CAFBC LDR W8, [X0 + 0xE0]
	0x037CAFC0 CBNZ W8, 0x37CAFC8
	0x037CAFC4 BL 0x1C16DFC
	0x037CAFC8 ADRP X8, 0x97E000
	0x037CAFCC LDR X8, [X8 + 0x760]
	0x037CAFD0 LDR X0, [X8]
	0x037CAFD4 MOV X1, X31
	0x037CAFD8 BL 0x3C0649C
	0x037CAFDC ADRP X8, 0x931000
	0x037CAFE0 LDR X8, [X8 + 0x708]
	0x037CAFE4 LDR V8, [X20 + 0x470]
	0x037CAFE8 LDR X0, [X8]
	0x037CAFEC LDR W8, [X0 + 0xE0]
	0x037CAFF0 CBNZ W8, 0x37CAFF8
	0x037CAFF4 BL 0x1C16DFC
	0x037CAFF8 MOV X0, X31
	0x037CAFFC BL 0x364BF5C
	0x037CB000 ADRP X8, 0x930000
	0x037CB004 LDR X8, [X8 + 0x708]
	0x037CB008 LDR V0, [X20 + 0x478]
	0x037CB00C LDR X8, [X8]
	0x037CB010 FADD D0, D10, D0
	0x037CB014 LDR X8, [X8 + 0xB8]
	0x037CB018 LDR V1, [X8]
	0x037CB01C LDR X8, [X31 + 0x38]
	0x037CB020 STR D0, [X20 + 0x478]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xC18000
	009 Move W8, [X21+512]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x97C000
	017 Move X0, [X0+816]
	018 Call 0x1C17CF4
	019 Move X0, 0x952000
	020 Move X0, [X0+3792]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+512], W8
	024 Move X21, [X20+1088]
	025 Compare X21, 0
	026 JumpIfEqual {173}
	027 Move X10, 0x952000
	028 Move X8, [X21]
	029 Move X10, [X10+3792]
	030 NotImplemented "Instruction LDRH not yet implemented."
	031 Move X1, [X10]
	032 Compare X9, 0
	033 JumpIfEqual {40}
	034 Move X10, [X8+176]
	035 Add X10, X10, 8
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Subtract X9, X9, 1
	039 Add X10, X10, 16
	040 Move W2, 23
	041 Move X0, X21
	042 Call 0x1C5D788
	043 Move W9, [X10]
	044 Add W9, W9, 23
	045 Add X8, X8, W9
	046 Add X0, X8, 312
	047 Move X8, [X0]
	048 Move X1, [X0+8]
	049 Move X0, X21
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X8, [X20+1152]
	052 Compare X8, 0
	053 JumpIfEqual {173}
	054 Move W8, [X8+48]
	055 Move W21, W0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 And W8, W0, W8
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {163}
	063 Move TEMP, X19
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {115}
	067 Move W8, [X20+112]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X24, X31
	070 Move X8, [X20+120]
	071 Compare X8, 0
	072 JumpIfEqual {173}
	073 Move W9, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X8, X8, X24
	076 Move X23, [X8+32]
	077 Compare X23, 0
	078 JumpIfEqual {173}
	079 Move X0, X23
	080 Move X1, X31
	081 Call InputDevice.get_disabledWhileInBackground, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {91}
	086 Move W2, 1
	087 Move W3, 2
	088 Move X0, X20
	089 Move X1, X23
	090 Call InputManager.EnableOrDisableDevice, X0, X1, X2, X3
	091 Move X0, X23
	092 Move X1, X31
	093 Call InputDevice.get_enabled, X0
	094 NotImplemented "Instruction ORN not yet implemented."
	095 Move TEMP, X8
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {112}
	099 Move X0, X23
	100 Move X1, X31
	101 Call InputDevice.RequestSync, X0
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfEqual {112}
	106 And X22, X22, 0xFFFFFFFF
	107 Move X0, X20
	108 Move X1, X23
	109 Move W2, W31
	110 Move X3, X22
	111 Call InputManager.ResetDevice, X0, X1, X2, X3
	112 Move W8, [X20+112]
	113 Add X24, X24, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move TEMP, X21
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {163}
	119 Move W8, [X20+112]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X23, 0x97C000
	122 Move X23, [X23+816]
	123 Move W22, W31
	124 Move X8, [X20+120]
	125 Compare X8, 0
	126 JumpIfEqual {173}
	127 Move W9, [X8+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Add X8, X8, W22
	130 Move X21, [X8+32]
	131 Compare X21, 0
	132 JumpIfEqual {173}
	133 Move X0, X21
	134 Move X1, X31
	135 Call InputDevice.get_enabled, X0
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {160}
	140 Move X0, X20
	141 Move X1, X21
	142 Call InputManager.ShouldRunDeviceInBackground, X0, X1
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfEqual {160}
	147 Move W3, 2
	148 Move X0, X20
	149 Move X1, X21
	150 Move W2, W31
	151 Call InputManager.EnableOrDisableDevice, X0, X1, X2, X3
	152 Move X0, [X20+120]
	153 Move W2, [X20+112]
	154 Move X3, [X23]
	155 Move X1, X21
	156 Call 0x217AB8C, X0, X1, X2
	157 Subtract W8, W22, 1
	158 Add W31, W0, 1
	159 NotImplemented "Instruction CSEL not yet implemented."
	160 Move W8, [X20+112]
	161 Add W22, W22, 1
	162 NotImplemented "Instruction CMP not yet implemented."
	163 And W8, W19, 1
	164 Move [X20+946], W8
	165 Move X20, [X31+48]
	166 Move X19, [X31+56]
	167 Move X22, [X31+32]
	168 Move X21, [X31+40]
	169 Move X24, [X31+16]
	170 Move X23, [X31+24]
	171 Move X30, [X31+64]
	172 Return 
	173 Call 0x1C17F20
	174 Call 0x1C17F28

Method: System.Boolean ShouldRunUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x037CB024 SCVTF D1, D1
	0x037CB028 SUB X8, X0, X8
	0x037CB02C SCVTF D2, X8
	0x037CB030 FDIV D1, D2, D1
	0x037CB034 FADD D1, D8, D1
	0x037CB038 STR D1, [X20 + 0x470]
	0x037CB03C LDR X1, [X31 + 0x60]

ISIL:
	001 Compare W1, 0
	002 JumpIfEqual {7}
	003 Move W8, [X0+168]
	004 And W31, W8, W1
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0
	007 Move W0, 1
	008 Return X0

Method: System.Void OnUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType, ref UnityEngine.InputSystem.LowLevel.InputEventBuffer eventBuffer)

Disassembly:
	0x037CB040 MOV X0, X19
	0x037CB044 MOV X2, X31
	0x037CB048 BL 0x3802F84
	0x037CB04C LDR W8, [X31 + 0x4C]
	0x037CB050 TBZ X8, 0x0, 0x37CB05C
	0x037CB054 MOV X0, X20
	0x037CB058 BL 0x37CB3C0
	0x037CB05C MOV X0, X20
	0x037CB060 MOV W1, W21
	0x037CB064 BL 0x37CB674
	0x037CB068 LDR X22, [X31 + 0x50]
	0x037CB06C STR W31, [X20 + 0xAC]
	0x037CB070 LDR X8, [X22 + 0x28]
	0x037CB074 LDR X9, [X31 + 0x2A8]
	0x037CB078 CMP X8, X9
	0x037CB07C B.NE 0x37CB188
	0x037CB080 ADD X31, X31, 0x2B0
	0x037CB084 LDP X20, X19, [X31 + 0x70]
	0x037CB088 LDP X22, X21, [X31 + 0x60]
	0x037CB08C LDP X24, X23, [X31 + 0x50]
	0x037CB090 LDP X26, X25, [X31 + 0x40]
	0x037CB094 LDP X28, X27, [X31 + 0x30]
	0x037CB098 LDP X29, X30, [X31 + 0x20]
	0x037CB09C LDP D9, D8, [X31 + 0x10]
	0x037CB0A0 LDR V10, [X31], #0x80
	0x037CB0A4 RET
	0x037CB0A8 CMP W21, 0x8
	0x037CB0AC B.EQ 0x37CA4D4
	0x037CB0B0 CMP W8, 0x1
	0x037CB0B4 B.EQ 0x37CA438
	0x037CB0B8 B 0x37CA4D4
	0x037CB0BC LDR W9, [X10]
	0x037CB0C0 ADD W9, W9, 0x17
	0x037CB0C4 ADD X8, X8, W9, 0x4, SXTW
	0x037CB0C8 ADD X0, X8, 0x138
	0x037CB0CC LDP X8, X1, [X0]
	0x037CB0D0 MOV X0, X23
	0x037CB0D4 BLR X8
	0x037CB0D8 ORN W8, W31, W0, 0x0
	0x037CB0DC AND W22, W8, 0x1
	0x037CB0E0 B 0x37CA420
	0x037CB0E4 BL 0x1C16F20
	0x037CB0E8 BL 0x1C16F20
	0x037CB0EC ADRP X0, 0x928000
	0x037CB0F0 LDR X0, [X0 + 0x5B0]
	0x037CB0F4 BL 0x1C16D08
	0x037CB0F8 BL 0x1C16F10
	0x037CB0FC MOV X19, X0
	0x037CB100 ADRP X0, 0x97D000
	0x037CB104 LDR X0, [X0 + 0x768]
	0x037CB108 BL 0x1C16D08
	0x037CB10C MOV X1, X0
	0x037CB110 MOV X0, X19
	0x037CB114 MOV X2, X31
	0x037CB118 BL 0x337DF1C
	0x037CB11C ADRP X0, 0x97D000
	0x037CB120 LDR X0, [X0 + 0x700]
	0x037CB124 BL 0x1C16D08
	0x037CB128 MOV X1, X0
	0x037CB12C MOV X0, X19
	0x037CB130 BL 0x1C16DEC
	0x037CB134 BL 0x1C16F20
	0x037CB138 MOV X0, X26
	0x037CB13C MOV X1, X22
	0x037CB140 BL 0x1C171E0
	0x037CB144 MOV X0, X26
	0x037CB148 MOV X1, X22
	0x037CB14C BL 0x1C171E0
	0x037CB150 BL 0x1C16F20
	0x037CB154 MOV X0, X26
	0x037CB158 MOV X1, X22
	0x037CB15C BL 0x1C171E0
	0x037CB160 MOV X0, X26
	0x037CB164 MOV X1, X22
	0x037CB168 BL 0x1C171E0
	0x037CB16C BL 0x1C16F20
	0x037CB170 MOV X0, X26
	0x037CB174 MOV X1, X25
	0x037CB178 BL 0x1C171E0
	0x037CB17C MOV X0, X26
	0x037CB180 MOV X1, X22
	0x037CB184 BL 0x1C171E0
	0x037CB188 BL 0x3EB1B20
	0x037CB18C BL 0x1C16F20
	0x037CB190 BL 0x1C16F20
	0x037CB194 BL 0x1C16F20
	0x037CB198 B 0x37CB33C
	0x037CB19C B 0x37CB33C
	0x037CB1A0 B 0x37CB33C
	0x037CB1A4 B 0x37CB33C
	0x037CB1A8 B 0x37CB33C
	0x037CB1AC B 0x37CB33C
	0x037CB1B0 B 0x37CB33C
	0x037CB1B4 B 0x37CB33C
	0x037CB1B8 B 0x37CB33C
	0x037CB1BC B 0x37CB33C
	0x037CB1C0 B 0x37CB33C
	0x037CB1C4 B 0x37CB33C
	0x037CB1C8 B 0x37CB33C
	0x037CB1CC B 0x37CB33C
	0x037CB1D0 B 0x37CB33C
	0x037CB1D4 B 0x37CB33C
	0x037CB1D8 B 0x37CB33C
	0x037CB1DC B 0x37CB33C
	0x037CB1E0 B 0x37CB33C
	0x037CB1E4 B 0x37CB33C
	0x037CB1E8 B 0x37CB33C
	0x037CB1EC B 0x37CB33C
	0x037CB1F0 B 0x37CB33C
	0x037CB1F4 B 0x37CB33C
	0x037CB1F8 B 0x37CB33C
	0x037CB1FC B 0x37CB33C
	0x037CB200 B 0x37CB33C
	0x037CB204 B 0x37CB33C
	0x037CB208 B 0x37CB33C
	0x037CB20C B 0x37CB33C
	0x037CB210 B 0x37CB33C
	0x037CB214 B 0x37CB33C
	0x037CB218 B 0x37CB33C
	0x037CB21C B 0x37CB33C
	0x037CB220 B 0x37CB33C
	0x037CB224 B 0x37CB33C
	0x037CB228 B 0x37CB33C
	0x037CB22C B 0x37CB33C
	0x037CB230 B 0x37CB33C
	0x037CB234 B 0x37CB33C
	0x037CB238 B 0x37CB33C
	0x037CB23C B 0x37CB33C
	0x037CB240 B 0x37CB33C
	0x037CB244 B 0x37CB33C
	0x037CB248 B 0x37CB33C
	0x037CB24C B 0x37CB33C
	0x037CB250 B 0x37CB33C
	0x037CB254 B 0x37CB33C
	0x037CB258 B 0x37CB33C
	0x037CB25C B 0x37CB33C
	0x037CB260 B 0x37CB33C
	0x037CB264 B 0x37CB33C
	0x037CB268 B 0x37CB33C
	0x037CB26C B 0x37CB33C
	0x037CB270 B 0x37CB33C
	0x037CB274 B 0x37CB33C
	0x037CB278 B 0x37CB33C
	0x037CB27C B 0x37CB33C
	0x037CB280 B 0x37CB33C
	0x037CB284 B 0x37CB33C
	0x037CB288 B 0x37CB33C
	0x037CB28C B 0x37CB33C
	0x037CB290 B 0x37CB33C
	0x037CB294 B 0x37CB33C
	0x037CB298 B 0x37CB33C
	0x037CB29C B 0x37CB33C
	0x037CB2A0 B 0x37CB33C
	0x037CB2A4 B 0x37CB33C
	0x037CB2A8 B 0x37CB33C
	0x037CB2AC B 0x37CB33C
	0x037CB2B0 B 0x37CB33C
	0x037CB2B4 B 0x37CB33C
	0x037CB2B8 B 0x37CB33C
	0x037CB2BC B 0x37CB33C
	0x037CB2C0 B 0x37CB33C
	0x037CB2C4 B 0x37CB33C
	0x037CB2C8 B 0x37CB33C
	0x037CB2CC B 0x37CB33C
	0x037CB2D0 B 0x37CB33C
	0x037CB2D4 B 0x37CB2D8
	0x037CB2D8 MOV X23, X0
	0x037CB2DC CMP W1, 0x1
	0x037CB2E0 B.NE 0x37CB30C
	0x037CB2E4 MOV X0, X23
	0x037CB2E8 BL 0x3EB1AD0
	0x037CB2EC LDR X22, [X0]
	0x037CB2F0 BL 0x3EB1AE0
	0x037CB2F4 LDR X1, [X24]
	0x037CB2F8 ADD X0, X31, 0xF0
	0x037CB2FC BL 0x2BC4968
	0x037CB300 CBZ X22, 0x37CA2FC
	0x037CB304 MOV X0, X22
	0x037CB308 BL 0x1C16F18
	0x037CB30C MOV X22, X31
	0x037CB310 B 0x37CB318
	0x037CB314 MOV X23, X0
	0x037CB318 LDR X1, [X24]
	0x037CB31C ADD X0, X31, 0xF0
	0x037CB320 BL 0x2BC4968
	0x037CB324 CBZ X22, 0x37CB3B4
	0x037CB328 MOV X0, X22
	0x037CB32C BL 0x1C16F18
	0x037CB330 B 0x37CB33C
	0x037CB334 B 0x37CB33C
	0x037CB338 B 0x37CB33C
	0x037CB33C MOV X23, X0
	0x037CB340 CMP W1, 0x1
	0x037CB344 B.NE 0x37CB3B4
	0x037CB348 MOV X0, X23
	0x037CB34C BL 0x3EB1AD0
	0x037CB350 MOV X20, X0
	0x037CB354 ADRP X0, 0x928000
	0x037CB358 LDR X0, [X0 + 0x7D0]
	0x037CB35C BL 0x1C16D08
	0x037CB360 LDR X8, [X20]
	0x037CB364 LDR X1, [X8]
	0x037CB368 BL 0x1C17270
	0x037CB36C TBZ X0, 0x0, 0x37CB38C
	0x037CB370 LDR X20, [X20]
	0x037CB374 BL 0x3EB1AE0
	0x037CB378 MOV X0, X19
	0x037CB37C MOV X1, X31
	0x037CB380 BL 0x38030A0
	0x037CB384 MOV X0, X20
	0x037CB388 BL 0x1C16F18
	0x037CB38C MOVZ W0, 0x8
	0x037CB390 BL 0x3EB1AF0
	0x037CB394 LDR X8, [X20]
	0x037CB398 STR X8, [X0]
	0x037CB39C ADRP X1, 0x6E9000
	0x037CB3A0 ADD X1, X1, 0xE58
	0x037CB3A4 MOV X2, X31
	0x037CB3A8 BL 0x3EB1B00
	0x037CB3AC MOV X23, X0
	0x037CB3B0 BL 0x3EB1AE0
	0x037CB3B4 MOV X0, X23
	0x037CB3B8 BL 0x1D2C690
	0x037CB3BC BL 0x1990590
	0x037CB3C0 SUB X31, X31, 0xC0
	0x037CB3C4 STR D8, [X31 + 0x60]
	0x037CB3C8 STR X30, [X31 + 0x68]
	0x037CB3CC STP X28, X27, [X31 + 0x70]
	0x037CB3D0 STP X26, X25, [X31 + 0x80]
	0x037CB3D4 STP X24, X23, [X31 + 0x90]
	0x037CB3D8 STP X22, X21, [X31 + 0xA0]
	0x037CB3DC STP X20, X19, [X31 + 0xB0]
	0x037CB3E0 ADRP X20, 0xC16000
	0x037CB3E4 LDRB W8, [X20 + 0x20F]
	0x037CB3E8 MOV X19, X0
	0x037CB3EC TBNZ X8, 0x0, 0x37CB440
	0x037CB3F0 ADRP X0, 0x950000
	0x037CB3F4 LDR X0, [X0 + 0xED0]
	0x037CB3F8 BL 0x1C16CF4
	0x037CB3FC ADRP X0, 0x97D000
	0x037CB400 LDR X0, [X0 + 0x770]
	0x037CB404 BL 0x1C16CF4
	0x037CB408 ADRP X0, 0x97D000
	0x037CB40C LDR X0, [X0 + 0x778]
	0x037CB410 BL 0x1C16CF4
	0x037CB414 ADRP X0, 0x97D000
	0x037CB418 LDR X0, [X0 + 0x2B8]
	0x037CB41C BL 0x1C16CF4
	0x037CB420 ADRP X0, 0x97D000
	0x037CB424 LDR X0, [X0 + 0x2C0]
	0x037CB428 BL 0x1C16CF4
	0x037CB42C ADRP X0, 0x950000
	0x037CB430 LDR X0, [X0 + 0xEC8]
	0x037CB434 BL 0x1C16CF4
	0x037CB438 MOVZ W8, 0x1
	0x037CB43C STRB W8, [X20 + 0x20F]
	0x037CB440 LDR W8, [X19 + 0x498]
	0x037CB444 CBZ W8, 0x37CB64C
	0x037CB448 LDR X20, [X19 + 0x440]
	0x037CB44C CBZ X20, 0x37CB670
	0x037CB450 ADRP X10, 0x950000
	0x037CB454 LDR X8, [X20]
	0x037CB458 LDR X10, [X10 + 0xED0]
	0x037CB45C ADD X19, X19, 0x498
	0x037CB460 LDRH W9, [X8 + 0x12E]
	0x037CB464 LDR X1, [X10]
	0x037CB468 CBZ X9, 0x37CB48C
	0x037CB46C LDR X10, [X8 + 0xB0]
	0x037CB470 ADD X10, X10, 0x8
	0x037CB474 LDUR X11, [X10 - 0x8]
	0x037CB478 CMP X11, X1
	0x037CB47C B.EQ 0x37CB49C
	0x037CB480 SUBS X9, X9, 0x1
	0x037CB484 ADD X10, X10, 0x10
	0x037CB488 B.NE 0x37CB474
	0x037CB48C MOVZ W2, 0x13
	0x037CB490 MOV X0, X20
	0x037CB494 BL 0x1C5C788
	0x037CB498 B 0x37CB4AC
	0x037CB49C LDR W9, [X10]
	0x037CB4A0 ADD W9, W9, 0x13
	0x037CB4A4 ADD X8, X8, W9, 0x4, SXTW
	0x037CB4A8 ADD X0, X8, 0x138
	0x037CB4AC LDP X8, X1, [X0]
	0x037CB4B0 MOV X0, X20
	0x037CB4B4 BLR X8
	0x037CB4B8 LDR W8, [X19]
	0x037CB4BC CMP W8, 0x1
	0x037CB4C0 B.LT 0x37CB630
	0x037CB4C4 ADRP X8, 0x950000
	0x037CB4C8 LDR X8, [X8 + 0xEC8]
	0x037CB4CC ADRP X26, 0x97D000
	0x037CB4D0 ADRP X27, 0x97D000
	0x037CB4D4 ADRP X28, 0x97D000
	0x037CB4D8 LDR X8, [X8]
	0x037CB4DC MOV W20, W31
	0x037CB4E0 MOV W21, W31
	0x037CB4E4 LDR X8, [X8 + 0xB8]
	0x037CB4E8 LDR V1, [X8 + 0x8]
	0x037CB4EC LDR X26, [X26 + 0x2B8]
	0x037CB4F0 LDR X27, [X27 + 0x2C0]
	0x037CB4F4 LDR X28, [X28 + 0x770]
	0x037CB4F8 FSUB D8, D0, D1
	0x037CB4FC LDR X2, [X26]
	0x037CB500 ADD X8, X31, 0x30
	0x037CB504 MOV X0, X19
	0x037CB508 MOV W1, W21
	0x037CB50C BL 0x2DF4D8C
	0x037CB510 LDR X8, [X31 + 0x30]
	0x037CB514 CBZ X8, 0x37CB61C
	0x037CB518 LDR X2, [X26]
	0x037CB51C ADD X8, X31, 0x30
	0x037CB520 MOV X0, X19
	0x037CB524 MOV W1, W21
	0x037CB528 BL 0x2DF4D8C
	0x037CB52C LDR V0, [X31 + 0x38]
	0x037CB530 FCMP D0, D8
	0x037CB534 B.LS 0x37CB588
	0x037CB538 CMP W21, W20
	0x037CB53C B.EQ 0x37CB580
	0x037CB540 LDR X2, [X26]
	0x037CB544 ADD X8, X31, 0x30
	0x037CB548 MOV X0, X19
	0x037CB54C MOV W1, W21
	0x037CB550 BL 0x2DF4D8C
	0x037CB554 LDR X8, [X31 + 0x50]
	0x037CB558 LDP V1, V0, [X31 + 0x30]
	0x037CB55C LDR X3, [X27]
	0x037CB560 ADD X2, X31, 0x30
	0x037CB564 MOV X0, X19
	0x037CB568 MOV W1, W20
	0x037CB56C STR X8, [X31 + 0x20]
	0x037CB570 STP V1, V0, [X31]
	0x037CB574 STP V1, V0, [X31 + 0x30]
	0x037CB578 STR X8, [X31 + 0x50]
	0x037CB57C BL 0x2DF4E38
	0x037CB580 ADD W20, W20, 0x1
	0x037CB584 B 0x37CB61C
	0x037CB588 LDR X2, [X26]
	0x037CB58C ADD X8, X31, 0x30
	0x037CB590 MOV X0, X19
	0x037CB594 MOV W1, W21
	0x037CB598 BL 0x2DF4D8C
	0x037CB59C LDR X22, [X31 + 0x40]
	0x037CB5A0 CBZ X22, 0x37CB670
	0x037CB5A4 LDR X8, [X22]
	0x037CB5A8 LDR X25, [X31 + 0x30]
	0x037CB5AC LDR X24, [X31 + 0x48]
	0x037CB5B0 LDR W23, [X31 + 0x50]
	0x037CB5B4 LDRH W9, [X8 + 0x12E]
	0x037CB5B8 LDR X1, [X28]
	0x037CB5BC CBZ X9, 0x37CB5E0
	0x037CB5C0 LDR X10, [X8 + 0xB0]
	0x037CB5C4 ADD X10, X10, 0x8
	0x037CB5C8 LDUR X11, [X10 - 0x8]
	0x037CB5CC CMP X11, X1
	0x037CB5D0 B.EQ 0x37CB5F0
	0x037CB5D4 SUBS X9, X9, 0x1
	0x037CB5D8 ADD X10, X10, 0x10
	0x037CB5DC B.NE 0x37CB5C8
	0x037CB5E0 MOVZ W2, 0x1
	0x037CB5E4 MOV X0, X22
	0x037CB5E8 BL 0x1C5C788
	0x037CB5EC B 0x37CB600
	0x037CB5F0 LDR W9, [X10]
	0x037CB5F4 ADD W9, W9, 0x1
	0x037CB5F8 ADD X8, X8, W9, 0x4, SXTW
	0x037CB5FC ADD X0, X8, 0x138
	0x037CB600 LDP X8, X4, [X0]
	0x037CB604 MOV X0, X22
	0x037CB608 MOV X1, X25
	0x037CB60C MOV V0.16B, V8.16B
	0x037CB610 MOV X2, X24
	0x037CB614 MOV W3, W23
	0x037CB618 BLR X8
	0x037CB61C LDR W8, [X19]
	0x037CB620 ADD W21, W21, 0x1
	0x037CB624 CMP W21, W8
	0x037CB628 B.LT 0x37CB4FC
	0x037CB62C B 0x37CB634
	0x037CB630 MOV W20, W31
	0x037CB634 ADRP X8, 0x97D000
	0x037CB638 LDR X8, [X8 + 0x778]
	0x037CB63C MOV X0, X19
	0x037CB640 MOV W1, W20
	0x037CB644 LDR X2, [X8]
	0x037CB648 BL 0x2DF5058
	0x037CB64C LDP X20, X19, [X31 + 0xB0]
	0x037CB650 LDP X22, X21, [X31 + 0xA0]
	0x037CB654 LDP X24, X23, [X31 + 0x90]
	0x037CB658 LDP X26, X25, [X31 + 0x80]
	0x037CB65C LDP X28, X27, [X31 + 0x70]
	0x037CB660 LDR X30, [X31 + 0x68]
	0x037CB664 LDR V8, [X31 + 0x60]
	0x037CB668 ADD X31, X31, 0xC0
	0x037CB66C RET
	0x037CB670 BL 0x1C16F20
	0x037CB674 STP X30, X21, [X31 - 0x20]!
	0x037CB678 STP X20, X19, [X31 + 0x10]
	0x037CB67C ADRP X21, 0xC16000
	0x037CB680 LDRB W8, [X21 + 0x202]
	0x037CB684 MOV W20, W1
	0x037CB688 MOV X19, X0
	0x037CB68C TBNZ X8, 0x0, 0x37CB6A4
	0x037CB690 ADRP X0, 0x97D000
	0x037CB694 LDR X0, [X0 + 0x780]
	0x037CB698 BL 0x1C16CF4
	0x037CB69C MOVZ W8, 0x1
	0x037CB6A0 STRB W8, [X21 + 0x202]
	0x037CB6A4 CMP W20, 0x8
	0x037CB6A8 B.NE 0x37CB6B8
	0x037CB6AC LDP X20, X19, [X31 + 0x10]
	0x037CB6B0 LDP X30, X21, [X31], #0x20
	0x037CB6B4 RET
	0x037CB6B8 ADRP X8, 0x97D000
	0x037CB6BC LDR X8, [X8 + 0x780]
	0x037CB6C0 ADD X0, X19, 0x310
	0x037CB6C4 LDP X20, X19, [X31 + 0x10]
	0x037CB6C8 MOV X2, X31
	0x037CB6CC LDR X1, [X8]
	0x037CB6D0 MOV X3, X31
	0x037CB6D4 LDP X30, X21, [X31], #0x20
	0x037CB6D8 B 0x375EFDC
	0x037CB6DC STR D8, [X31 - 0x50]!
	0x037CB6E0 STR X30, [X31 + 0x8]
	0x037CB6E4 STP X26, X25, [X31 + 0x10]
	0x037CB6E8 STP X24, X23, [X31 + 0x20]
	0x037CB6EC STP X22, X21, [X31 + 0x30]
	0x037CB6F0 STP X20, X19, [X31 + 0x40]
	0x037CB6F4 ADRP X23, 0xC16000
	0x037CB6F8 LDRB W8, [X23 + 0x203]
	0x037CB6FC MOV W19, W3
	0x037CB700 MOV X22, X2
	0x037CB704 MOV X20, X1
	0x037CB708 MOV X21, X0
	0x037CB70C TBNZ X8, 0x0, 0x37CB724
	0x037CB710 ADRP X0, 0x950000
	0x037CB714 LDR X0, [X0 + 0xD18]
	0x037CB718 BL 0x1C16CF4
	0x037CB71C MOVZ W8, 0x1
	0x037CB720 STRB W8, [X23 + 0x203]
	0x037CB724 CBZ X20, 0x37CB848
	0x037CB728 ADRP X8, 0x950000
	0x037CB72C LDR X8, [X8 + 0xD18]
	0x037CB730 LDR W23, [X20 + 0x1C]
	0x037CB734 LDR X0, [X8]
	0x037CB738 LDR W8, [X0 + 0xE0]
	0x037CB73C CBNZ W8, 0x37CB744
	0x037CB740 BL 0x1C16DFC
	0x037CB744 MOV X0, X22
	0x037CB748 MOV X1, X31
	0x037CB74C UBFM W26, W23, 0x3, 0x1F
	0x037CB750 BL 0x3801198
	0x037CB754 MOVZ W8, 0x4154
	0x037CB758 MOVK W8, 0x53540000
	0x037CB75C CMP W0, W8
	0x037CB760 B.NE 0x37CB794
	0x037CB764 MOV X0, X22
	0x037CB768 MOV X1, X31
	0x037CB76C BL 0x3802C74
	0x037CB770 MOV W23, W0
	0x037CB774 MOV X0, X22
	0x037CB778 MOV X1, X31
	0x037CB77C BL 0x3807298
	0x037CB780 CMP W23, W26
	0x037CB784 MOV X24, X0
	0x037CB788 MOV W25, W31
	0x037CB78C CSEL W23, W26, W23, HI
	0x037CB790 B 0x37CB7D0
	0x037CB794 MOV X0, X22
	0x037CB798 MOV X1, X31
	0x037CB79C BL 0x38006BC
	0x037CB7A0 MOV W23, W0
	0x037CB7A4 MOV X0, X22
	0x037CB7A8 MOV X1, X31
	0x037CB7AC BL 0x38006C8
	0x037CB7B0 CBZ X22, 0x37CB848
	0x037CB7B4 LDR W25, [X22 + 0x18]
	0x037CB7B8 MOV X24, X0
	0x037CB7BC ADD W8, W25, W23
	0x037CB7C0 CMP W8, W26
	0x037CB7C4 B.LS 0x37CB7D0
	0x037CB7C8 SUBS W23, W26, W25
	0x037CB7CC B.LS 0x37CB828
	0x037CB7D0 MOV X0, X22
	0x037CB7D4 MOV X1, X31
	0x037CB7D8 BL 0x380132C
	0x037CB7DC MOV X0, X22
	0x037CB7E0 MOV X1, X31
	0x037CB7E4 MOV V8.16B, V0.16B
	0x037CB7E8 BL 0x3801854
	0x037CB7EC MOV X6, X0
	0x037CB7F0 MOV X0, X21
	0x037CB7F4 MOV X1, X20
	0x037CB7F8 MOV W2, W19
	0x037CB7FC MOV X3, X24
	0x037CB800 MOV W4, W25
	0x037CB804 MOV W5, W23
	0x037CB808 LDP X20, X19, [X31 + 0x40]
	0x037CB80C LDP X22, X21, [X31 + 0x30]
	0x037CB810 LDP X24, X23, [X31 + 0x20]
	0x037CB814 LDP X26, X25, [X31 + 0x10]
	0x037CB818 LDR X30, [X31 + 0x8]
	0x037CB81C MOV V0.16B, V8.16B
	0x037CB820 LDR V8, [X31], #0x50
	0x037CB824 B 0x37C6A44
	0x037CB828 LDP X20, X19, [X31 + 0x40]
	0x037CB82C LDP X22, X21, [X31 + 0x30]
	0x037CB830 LDP X24, X23, [X31 + 0x20]
	0x037CB834 LDP X26, X25, [X31 + 0x10]
	0x037CB838 LDR X30, [X31 + 0x8]
	0x037CB83C MOV W0, W31
	0x037CB840 LDR V8, [X31], #0x50
	0x037CB844 RET
	0x037CB848 BL 0x1C16F20
	0x037CB84C STRB W31, [X0 + 0x488]
	0x037CB850 RET
	0x037CB854 STR X30, [X31 - 0x10]!
	0x037CB858 LDR X8, [X0 + 0x490]
	0x037CB85C CBZ X8, 0x37CB898
	0x037CB860 LDR W9, [X8 + 0x18]
	0x037CB864 CMP W9, W1
	0x037CB868 B.LE 0x37CB898
	0x037CB86C B.LS 0x37CB8A0
	0x037CB870 MOVZ W9, 0x38
	0x037CB874 SMADDL X9, X1, X9, X8
	0x037CB878 LDRB W9, [X9 + 0x50]
	0x037CB87C CBZ W9, 0x37CB898
	0x037CB880 SXTW X9, W1
	0x037CB884 MOVZ W10, 0x38
	0x037CB888 MADD X8, X9, X10, X8
	0x037CB88C ADD X0, X8, 0x20
	0x037CB890 LDR X30, [X31], #0x10
	0x037CB894 B 0x37CC8AC
	0x037CB898 LDR X30, [X31], #0x10
	0x037CB89C RET
	0x037CB8A0 BL 0x1C16F28
	0x037CB8A4 SUB X31, X31, 0xC0
	0x037CB8A8 STP X29, X30, [X31 + 0x60]
	0x037CB8AC STP X28, X27, [X31 + 0x70]
	0x037CB8B0 STP X26, X25, [X31 + 0x80]
	0x037CB8B4 STP X24, X23, [X31 + 0x90]
	0x037CB8B8 STP X22, X21, [X31 + 0xA0]
	0x037CB8BC STP X20, X19, [X31 + 0xB0]
	0x037CB8C0 ADRP X22, 0xC16000
	0x037CB8C4 LDRB W8, [X22 + 0x20D]
	0x037CB8C8 MOV W25, W5
	0x037CB8CC MOV W24, W4
	0x037CB8D0 MOV X21, X3
	0x037CB8D4 MOV X26, X2
	0x037CB8D8 MOV W19, W1
	0x037CB8DC MOV X20, X0
	0x037CB8E0 TBNZ X8, 0x0, 0x37CB904
	0x037CB8E4 ADRP X0, 0x97D000
	0x037CB8E8 LDR X0, [X0 + 0x788]
	0x037CB8EC BL 0x1C16CF4
	0x037CB8F0 ADRP X0, 0x97D000
	0x037CB8F4 LDR X0, [X0 + 0x790]
	0x037CB8F8 BL 0x1C16CF4
	0x037CB8FC MOVZ W8, 0x1
	0x037CB900 STRB W8, [X22 + 0x20D]
	0x037CB904 MOVI V0.2D, 0x0
	0x037CB908 STP X31, X31, [X31 + 0x30]
	0x037CB90C STR X31, [X31 + 0x28]
	0x037CB910 STP V0, V0, [X31 + 0x40]
	0x037CB914 LDR X8, [X20 + 0x490]
	0x037CB918 CBZ X8, 0x37CBAAC
	0x037CB91C LDR W9, [X8 + 0x18]
	0x037CB920 CMP W9, W19
	0x037CB924 B.LE 0x37CBAAC
	0x037CB928 CMP W9, W19
	0x037CB92C B.LS 0x37CBAFC
	0x037CB930 SXTW X27, W19
	0x037CB934 MOVZ W9, 0x38
	0x037CB938 MADD X9, X27, X9, X8
	0x037CB93C LDR X22, [X9 + 0x20]
	0x037CB940 CBZ X22, 0x37CBAAC
	0x037CB944 MOVZ W9, 0x38
	0x037CB948 MADD X8, X27, X9, X8
	0x037CB94C LDP V1, V0, [X8 + 0x30]
	0x037CB950 LDR W23, [X8 + 0x48]
	0x037CB954 UBFM W3, W24, 0x1D, 0x1C
	0x037CB958 ADD X0, X31, 0x38
	0x037CB95C MOV W1, W25
	0x037CB960 MOV W2, W31
	0x037CB964 MOV X4, X31
	0x037CB968 STP V1, V0, [X31 + 0x40]
	0x037CB96C BL 0x3762F60
	0x037CB970 CMP W23, 0x1
	0x037CB974 B.LT 0x37CBAD4
	0x037CB978 SUB X25, X26, W25, UXTW
	0x037CB97C ADRP X26, 0x97D000
	0x037CB980 LDR X26, [X26 + 0x788]
	0x037CB984 MOV W28, W31
	0x037CB988 MOV W29, W31
	0x037CB98C MOV W24, W31
	0x037CB990 LDR W8, [X22 + 0x18]
	0x037CB994 CMP W24, W8
	0x037CB998 B.CS 0x37CBAFC
	0x037CB99C ADD X8, X22, W24, 0x3, SXTW
	0x037CB9A0 LDR X1, [X8 + 0x20]
	0x037CB9A4 UBFM X8, X1, 0x20, 0x3F
	0x037CB9A8 CBNZ X8, 0x37CBA1C
	0x037CB9AC STP W23, W23, [X31 + 0x28]
	0x037CB9B0 LDR X8, [X20 + 0x490]
	0x037CB9B4 CBZ X8, 0x37CBB00
	0x037CB9B8 LDR W9, [X8 + 0x18]
	0x037CB9BC CMP W9, W19
	0x037CB9C0 B.LS 0x37CBAFC
	0x037CB9C4 MOVZ W9, 0x38
	0x037CB9C8 MADD X8, X27, X9, X8
	0x037CB9CC LDR X0, [X8 + 0x28]
	0x037CB9D0 ADRP X8, 0x97D000
	0x037CB9D4 LDR X8, [X8 + 0x790]
	0x037CB9D8 ADD X1, X31, 0x2C
	0x037CB9DC MOV W2, W24
	0x037CB9E0 LDR X3, [X8]
	0x037CB9E4 BL 0x21784F4
	0x037CB9E8 LDR X3, [X26]
	0x037CB9EC ADD X1, X31, 0x28
	0x037CB9F0 MOV X0, X22
	0x037CB9F4 MOV W2, W24
	0x037CB9F8 BL 0x2178850
	0x037CB9FC SUB W23, W23, 0x1
	0x037CBA00 ADD X0, X31, 0x40
	0x037CBA04 MOV W1, W23
	0x037CBA08 MOV X2, X31
	0x037CBA0C BL 0x37DA854
	0x037CBA10 SUB W24, W24, 0x1
	0x037CBA14 MOVZ W29, 0x1
	0x037CBA18 B 0x37CBA6C
	0x037CBA1C ADD X0, X31, 0x38
	0x037CBA20 MOV X2, X31
	0x037CBA24 BL 0x3762F6C
	0x037CBA28 STR X0, [X31 + 0x30]
	0x037CBA2C ADD X0, X31, 0x30
	0x037CBA30 MOV X1, X31
	0x037CBA34 BL 0x3762F48
	0x037CBA38 TBNZ X0, 0x0, 0x37CBA6C
	0x037CBA3C LDR X2, [X31 + 0x30]
	0x037CBA40 MOV X0, X21
	0x037CBA44 MOV X1, X25
	0x037CBA48 MOV X3, X31
	0x037CBA4C BL 0x376268C
	0x037CBA50 TBNZ X0, 0x0, 0x37CBA6C
	0x037CBA54 ADD X0, X31, 0x40
	0x037CBA58 MOV W1, W24
	0x037CBA5C MOV X2, X31
	0x037CBA60 BL 0x37DA8E0
	0x037CBA64 MOVZ W29, 0x1
	0x037CBA68 MOVZ W28, 0x1
	0x037CBA6C ADD W24, W24, 0x1
	0x037CBA70 CMP W24, W23
	0x037CBA74 B.LT 0x37CB990
	0x037CBA78 TBZ X29, 0x0, 0x37CBAD8
	0x037CBA7C LDR X8, [X20 + 0x490]
	0x037CBA80 CBZ X8, 0x37CBB00
	0x037CBA84 LDP V0, V1, [X31 + 0x40]
	0x037CBA88 STP V0, V1, [X31]
	0x037CBA8C LDR W9, [X8 + 0x18]
	0x037CBA90 CMP W9, W19
	0x037CBA94 B.LS 0x37CBAFC
	0x037CBA98 LDP V1, V0, [X31]
	0x037CBA9C MOVZ W9, 0x38
	0x037CBAA0 MADD X8, X27, X9, X8
	0x037CBAA4 STP V1, V0, [X8 + 0x30]
	0x037CBAA8 B 0x37CBAD8
	0x037CBAAC MOV W28, W31
	0x037CBAB0 AND W0, W28, 0x1
	0x037CBAB4 LDP X20, X19, [X31 + 0xB0]
	0x037CBAB8 LDP X22, X21, [X31 + 0xA0]
	0x037CBABC LDP X24, X23, [X31 + 0x90]
	0x037CBAC0 LDP X26, X25, [X31 + 0x80]
	0x037CBAC4 LDP X28, X27, [X31 + 0x70]
	0x037CBAC8 LDP X29, X30, [X31 + 0x60]
	0x037CBACC ADD X31, X31, 0xC0
	0x037CBAD0 RET
	0x037CBAD4 MOV W28, W31
	0x037CBAD8 LDR X8, [X20 + 0x490]
	0x037CBADC CBZ X8, 0x37CBB00
	0x037CBAE0 LDR W9, [X8 + 0x18]
	0x037CBAE4 CMP W9, W19
	0x037CBAE8 B.LS 0x37CBAFC
	0x037CBAEC MOVZ W9, 0x38
	0x037CBAF0 MADD X8, X27, X9, X8
	0x037CBAF4 STRB W31, [X8 + 0x51]
	0x037CBAF8 B 0x37CBAB0
	0x037CBAFC BL 0x1C16F28
	0x037CBB00 BL 0x1C16F20
	0x037CBB04 STR X30, [X31 - 0x30]!
	0x037CBB08 STP X22, X21, [X31 + 0x10]
	0x037CBB0C STP X20, X19, [X31 + 0x20]
	0x037CBB10 ADRP X22, 0xC16000
	0x037CBB14 LDRB W8, [X22 + 0x206]
	0x037CBB18 MOV W21, W2
	0x037CBB1C MOV X19, X1
	0x037CBB20 MOV X20, X0
	0x037CBB24 TBNZ X8, 0x0, 0x37CBB3C
	0x037CBB28 ADRP X0, 0x979000
	0x037CBB2C LDR X0, [X0 + 0xF90]
	0x037CBB30 BL 0x1C16CF4
	0x037CBB34 MOVZ W8, 0x1
	0x037CBB38 STRB W8, [X22 + 0x206]
	0x037CBB3C CMP W21, 0x4
	0x037CBB40 B.EQ 0x37CBB68
	0x037CBB44 CBZ X19, 0x37CBBA4
	0x037CBB48 ADRP X21, 0x979000
	0x037CBB4C LDR X21, [X21 + 0xF90]
	0x037CBB50 LDR W9, [X19 + 0x130]
	0x037CBB54 LDR X8, [X21]
	0x037CBB58 LDR X8, [X8 + 0xB8]
	0x037CBB5C LDR W8, [X8]
	0x037CBB60 CMP W9, W8
	0x037CBB64 B.NE 0x37CBB70
	0x037CBB68 MOV W0, W31
	0x037CBB6C B 0x37CBB94
	0x037CBB70 LDR W1, [X19 + 0xE8]
	0x037CBB74 ADD X0, X20, 0xD8
	0x037CBB78 MOV X2, X31
	0x037CBB7C BL 0x380CCE0
	0x037CBB80 LDR X8, [X21]
	0x037CBB84 MOVZ W0, 0x1
	0x037CBB88 LDR X8, [X8 + 0xB8]
	0x037CBB8C LDR W8, [X8]
	0x037CBB90 STR W8, [X19 + 0x130]
	0x037CBB94 LDP X20, X19, [X31 + 0x20]
	0x037CBB98 LDP X22, X21, [X31 + 0x10]
	0x037CBB9C LDR X30, [X31], #0x30
	0x037CBBA0 RET
	0x037CBBA4 BL 0x1C16F20
	0x037CBBA8 SUB X31, X31, 0x70
	0x037CBBAC STP X29, X30, [X31 + 0x10]
	0x037CBBB0 STP X28, X27, [X31 + 0x20]
	0x037CBBB4 STP X26, X25, [X31 + 0x30]
	0x037CBBB8 STP X24, X23, [X31 + 0x40]
	0x037CBBBC STP X22, X21, [X31 + 0x50]
	0x037CBBC0 STP X20, X19, [X31 + 0x60]
	0x037CBBC4 ADRP X23, 0xC16000
	0x037CBBC8 STR X1, [X31 + 0x8]
	0x037CBBCC ADRP X29, 0x950000
	0x037CBBD0 LDRB W8, [X23 + 0x205]
	0x037CBBD4 LDR X29, [X29 + 0xD18]
	0x037CBBD8 MOV W26, W7
	0x037CBBDC MOV W20, W6
	0x037CBBE0 MOV X19, X5
	0x037CBBE4 MOV W25, W4
	0x037CBBE8 MOV X22, X3
	0x037CBBEC MOV W24, W2
	0x037CBBF0 MOV X28, X0
	0x037CBBF4 TBNZ X8, 0x0, 0x37CBC18
	0x037CBBF8 ADRP X0, 0x953000
	0x037CBBFC LDR X0, [X0 + 0xFE0]
	0x037CBC00 BL 0x1C16CF4
	0x037CBC04 ADRP X0, 0x950000
	0x037CBC08 LDR X0, [X0 + 0xD18]
	0x037CBC0C BL 0x1C16CF4
	0x037CBC10 MOVZ W8, 0x1
	0x037CBC14 STRB W8, [X23 + 0x205]
	0x037CBC18 ADD X0, X31, 0x8
	0x037CBC1C MOV W1, W24
	0x037CBC20 MOV X2, X31
	0x037CBC24 BL 0x380C4D0
	0x037CBC28 LDR X8, [X29]
	0x037CBC2C MOV X23, X0
	0x037CBC30 LDR W9, [X8 + 0xE0]
	0x037CBC34 CBNZ W9, 0x37CBC40
	0x037CBC38 MOV X0, X8
	0x037CBC3C BL 0x1C16DFC
	0x037CBC40 LDR W8, [X22 + 0xC]
	0x037CBC44 UBFM X27, X8, 0x3, 0x3F
	0x037CBC48 ADRP X8, 0x953000
	0x037CBC4C LDR X8, [X8 + 0xFE0]
	0x037CBC50 CMP W27, W20
	0x037CBC54 B.EQ 0x37CBCBC
	0x037CBC58 TBZ X26, 0x0, 0x37CBCBC
	0x037CBC5C ADD X0, X31, 0x8
	0x037CBC60 MOV W1, W24
	0x037CBC64 MOV X2, X31
	0x037CBC68 MOV X21, X19
	0x037CBC6C MOV X19, X28
	0x037CBC70 BL 0x380C538
	0x037CBC74 LDR X8, [X29]
	0x037CBC78 MOV X28, X0
	0x037CBC7C LDR W9, [X8 + 0xE0]
	0x037CBC80 CBNZ W9, 0x37CBC8C
	0x037CBC84 MOV X0, X8
	0x037CBC88 BL 0x1C16DFC
	0x037CBC8C LDR W8, [X22 + 0x4]
	0x037CBC90 MOV X2, X27
	0x037CBC94 MOV X3, X31
	0x037CBC98 ADD X0, X8, X23
	0x037CBC9C ADD X1, X8, X28
	0x037CBCA0 BL 0x3BFF954
	0x037CBCA4 ADRP X29, 0x950000
	0x037CBCA8 ADRP X8, 0x953000
	0x037CBCAC LDR X29, [X29 + 0xD18]
	0x037CBCB0 LDR X8, [X8 + 0xFE0]
	0x037CBCB4 MOV X28, X19
	0x037CBCB8 MOV X19, X21
	0x037CBCBC LDR X8, [X8]
	0x037CBCC0 LDR X8, [X8 + 0xB8]
	0x037CBCC4 LDRB W8, [X8 + 0x1]
	0x037CBCC8 CBZ W8, 0x37CBD48
	0x037CBCCC CMP W27, W20
	0x037CBCD0 B.NE 0x37CBCF4
	0x037CBCD4 MOV X27, X23
	0x037CBCD8 TBZ X26, 0x0, 0x37CBCF8
	0x037CBCDC ADD X0, X31, 0x8
	0x037CBCE0 MOV W1, W24
	0x037CBCE4 MOV X2, X31
	0x037CBCE8 BL 0x380C538
	0x037CBCEC MOV X27, X0
	0x037CBCF0 B 0x37CBCF8
	0x037CBCF4 MOV X27, X23
	0x037CBCF8 LDR X8, [X28 + 0x78]
	0x037CBCFC CBZ X8, 0x37CBD94
	0x037CBD00 LDR W9, [X8 + 0x18]
	0x037CBD04 CMP W9, W24
	0x037CBD08 B.LS 0x37CBD98
	0x037CBD0C LDR X0, [X29]
	0x037CBD10 ADD X8, X8, W24, 0x3, SXTW
	0x037CBD14 LDR X24, [X8 + 0x20]
	0x037CBD18 LDR W9, [X0 + 0xE0]
	0x037CBD1C CBNZ W9, 0x37CBD24
	0x037CBD20 BL 0x1C16DFC
	0x037CBD24 CBZ X24, 0x37CBD94
	0x037CBD28 LDR W8, [X22 + 0x4]
	0x037CBD2C MOV X0, X24
	0x037CBD30 MOV X2, X19
	0x037CBD34 MOV W3, W20
	0x037CBD38 ADD X1, X8, X27
	0x037CBD3C MOV W4, W25
	0x037CBD40 MOV X5, X31
	0x037CBD44 BL 0x377B5C0
	0x037CBD48 LDR X0, [X29]
	0x037CBD4C LDR W8, [X0 + 0xE0]
	0x037CBD50 CBNZ W8, 0x37CBD58
	0x037CBD54 BL 0x1C16DFC
	0x037CBD58 LDR W8, [X22 + 0x4]
	0x037CBD5C ADD X9, X23, W25, UXTW
	0x037CBD60 MOV W2, W20
	0x037CBD64 MOV X1, X19
	0x037CBD68 ADD X0, X9, X8
	0x037CBD6C MOV X3, X31
	0x037CBD70 BL 0x3BFF954
	0x037CBD74 LDP X20, X19, [X31 + 0x60]
	0x037CBD78 LDP X22, X21, [X31 + 0x50]
	0x037CBD7C LDP X24, X23, [X31 + 0x40]
	0x037CBD80 LDP X26, X25, [X31 + 0x30]
	0x037CBD84 LDP X28, X27, [X31 + 0x20]
	0x037CBD88 LDP X29, X30, [X31 + 0x10]
	0x037CBD8C ADD X31, X31, 0x70
	0x037CBD90 RET
	0x037CBD94 BL 0x1C16F20
	0x037CBD98 BL 0x1C16F28
	0x037CBD9C SUB X31, X31, 0xB0
	0x037CBDA0 STP D9, D8, [X31 + 0x40]
	0x037CBDA4 STP X29, X30, [X31 + 0x50]
	0x037CBDA8 STP X28, X27, [X31 + 0x60]
	0x037CBDAC STP X26, X25, [X31 + 0x70]
	0x037CBDB0 STP X24, X23, [X31 + 0x80]
	0x037CBDB4 STP X22, X21, [X31 + 0x90]
	0x037CBDB8 STP X20, X19, [X31 + 0xA0]
	0x037CBDBC MRS X23, 0xC000
	0x037CBDC0 LDR X8, [X23 + 0x28]
	0x037CBDC4 ADRP X22, 0xC16000
	0x037CBDC8 MOV X19, X2
	0x037CBDCC MOV V8.16B, V0.16B
	0x037CBDD0 STR X8, [X31 + 0x38]
	0x037CBDD4 LDRB W8, [X22 + 0x20E]
	0x037CBDD8 MOV W20, W1
	0x037CBDDC MOV X21, X0
	0x037CBDE0 TBNZ X8, 0x0, 0x37CBE04
	0x037CBDE4 ADRP X0, 0x97D000
	0x037CBDE8 LDR X0, [X0 + 0x770]
	0x037CBDEC BL 0x1C16CF4
	0x037CBDF0 ADRP X0, 0x950000
	0x037CBDF4 LDR X0, [X0 + 0xEC8]
	0x037CBDF8 BL 0x1C16CF4
	0x037CBDFC MOVZ W8, 0x1
	0x037CBE00 STRB W8, [X22 + 0x20E]
	0x037CBE04 STP X31, X31, [X31 + 0x20]
	0x037CBE08 STR W31, [X31 + 0x30]
	0x037CBE0C LDR X8, [X21 + 0x490]
	0x037CBE10 CBZ X8, 0x37CC174
	0x037CBE14 LDR W9, [X8 + 0x18]
	0x037CBE18 STR X23, [X31 + 0x10]
	0x037CBE1C CMP W9, W20
	0x037CBE20 B.LS 0x37CC170
	0x037CBE24 ADRP X9, 0x950000
	0x037CBE28 LDR X9, [X9 + 0xEC8]
	0x037CBE2C ADD X0, X31, 0x18
	0x037CBE30 MOVZ W1, 0x46
	0x037CBE34 MOVZ W2, 0x41
	0x037CBE38 LDR X9, [X9]
	0x037CBE3C MOVZ W3, 0x4B
	0x037CBE40 MOVZ W4, 0x45
	0x037CBE44 MOV X5, X31
	0x037CBE48 LDR X9, [X9 + 0xB8]
	0x037CBE4C LDR V9, [X9 + 0x8]
	0x037CBE50 MOVZ W9, 0x38
	0x037CBE54 SMADDL X22, X20, X9, X8
	0x037CBE58 STR W31, [X31 + 0x18]
	0x037CBE5C BL 0x375AA28
	0x037CBE60 LDR W1, [X31 + 0x18]
	0x037CBE64 ADD X0, X31, 0x20
	0x037CBE68 MOVZ W2, 0x14
	0x037CBE6C MOVN W3, 0x0
	0x037CBE70 MOV V0.16B, V8.16B
	0x037CBE74 MOV X4, X31
	0x037CBE78 ADD X20, X31, 0x20
	0x037CBE7C BL 0x3800BC8
	0x037CBE80 CMP X19, 0x0
	0x037CBE84 CSEL X19, X20, X19, EQ
	0x037CBE88 MOV X0, X19
	0x037CBE8C MOV W1, W31
	0x037CBE90 MOV X2, X31
	0x037CBE94 BL 0x3801348
	0x037CBE98 LDR W8, [X22 + 0x48]!
	0x037CBE9C CMP W8, 0x1
	0x037CBEA0 B.LT 0x37CC138
	0x037CBEA4 ADRP X24, 0x97D000
	0x037CBEA8 LDR X24, [X24 + 0x770]
	0x037CBEAC MOV X23, X31
	0x037CBEB0 MOV X20, X31
	0x037CBEB4 SUB X21, X22, 0x18
	0x037CBEB8 SUB X29, X22, 0x20
	0x037CBEBC FSUB D8, D8, D9
	0x037CBEC0 MOV X0, X21
	0x037CBEC4 MOV W1, W20
	0x037CBEC8 MOV X2, X31
	0x037CBECC BL 0x37DA978
	0x037CBED0 TBZ X0, 0x0, 0x37CC034
	0x037CBED4 LDR X8, [X29]
	0x037CBED8 CBZ X8, 0x37CC174
	0x037CBEDC LDR W9, [X8 + 0x18]
	0x037CBEE0 CMP X20, X9
	0x037CBEE4 B.CS 0x37CC170
	0x037CBEE8 ADD X8, X8, X20, 0x5, LSL
	0x037CBEEC LDP X26, X25, [X8 + 0x20]
	0x037CBEF0 LDR X27, [X8 + 0x30]
	0x037CBEF4 MOV X0, X19
	0x037CBEF8 MOV X1, X31
	0x037CBEFC BL 0x3801854
	0x037CBF00 CBZ X25, 0x37CC04C
	0x037CBF04 LDR X8, [X25]
	0x037CBF08 LDR X1, [X24]
	0x037CBF0C MOV X28, X0
	0x037CBF10 LDRH W9, [X8 + 0x12E]
	0x037CBF14 CBZ X9, 0x37CBF38
	0x037CBF18 LDR X10, [X8 + 0xB0]
	0x037CBF1C ADD X10, X10, 0x8
	0x037CBF20 LDUR X11, [X10 - 0x8]
	0x037CBF24 CMP X11, X1
	0x037CBF28 B.EQ 0x37CBF48
	0x037CBF2C SUBS X9, X9, 0x1
	0x037CBF30 ADD X10, X10, 0x10
	0x037CBF34 B.NE 0x37CBF20
	0x037CBF38 MOV X0, X25
	0x037CBF3C MOV W2, W31
	0x037CBF40 BL 0x1C5C788
	0x037CBF44 B 0x37CBF54
	0x037CBF48 LDRSW X9, [X10]
	0x037CBF4C ADD X8, X8, X9, 0x4, LSL
	0x037CBF50 ADD X0, X8, 0x138
	0x037CBF54 LDP X8, X4, [X0]
	0x037CBF58 MOV X0, X25
	0x037CBF5C MOV X1, X26
	0x037CBF60 MOV V0.16B, V8.16B
	0x037CBF64 MOV X2, X28
	0x037CBF68 MOV X3, X27
	0x037CBF6C BLR X8
	0x037CBF70 MOV X0, X19
	0x037CBF74 MOV X1, X31
	0x037CBF78 BL 0x380133C
	0x037CBF7C TBZ X0, 0x0, 0x37CC024
	0x037CBF80 LDR X9, [X29]
	0x037CBF84 CBZ X9, 0x37CC174
	0x037CBF88 LDR W8, [X9 + 0x18]
	0x037CBF8C CMP X20, X8
	0x037CBF90 B.CS 0x37CC170
	0x037CBF94 LDRSW X8, [X22]
	0x037CBF98 ADD X10, X20, 0x1
	0x037CBF9C CMP X10, X8
	0x037CBFA0 B.GE 0x37CC014
	0x037CBFA4 ADD X10, X9, X20, 0x5, LSL
	0x037CBFA8 LDR W26, [X10 + 0x38]
	0x037CBFAC MOV X27, X23
	0x037CBFB0 MOV X28, X20
	0x037CBFB4 LDR W10, [X9 + 0x18]
	0x037CBFB8 ADD X11, X28, 0x1
	0x037CBFBC CMP X11, X10
	0x037CBFC0 B.CS 0x37CC170
	0x037CBFC4 ADD X9, X9, X27
	0x037CBFC8 LDR W10, [X9 + 0x58]
	0x037CBFCC CMP W10, W26
	0x037CBFD0 B.NE 0x37CBFF4
	0x037CBFD4 LDR X9, [X9 + 0x48]
	0x037CBFD8 CMP X9, X25
	0x037CBFDC B.NE 0x37CBFF4
	0x037CBFE0 ADD W1, W28, 0x1
	0x037CBFE4 MOV X0, X21
	0x037CBFE8 MOV X2, X31
	0x037CBFEC BL 0x37DA9E8
	0x037CBFF0 LDR W8, [X22]
	0x037CBFF4 ADD W9, W28, 0x2
	0x037CBFF8 CMP W9, W8
	0x037CBFFC B.GE 0x37CC014
	0x037CC000 LDR X9, [X29]
	0x037CC004 ADD X28, X28, 0x1
	0x037CC008 ADD X27, X27, 0x20
	0x037CC00C CBNZ X9, 0x37CBFB4
	0x037CC010 B 0x37CC174
	0x037CC014 MOV X0, X19
	0x037CC018 MOV W1, W31
	0x037CC01C MOV X2, X31
	0x037CC020 BL 0x3801348
	0x037CC024 MOV X0, X21
	0x037CC028 MOV W1, W20
	0x037CC02C MOV X2, X31
	0x037CC030 BL 0x37DA9E8
	0x037CC034 LDRSW X8, [X22]
	0x037CC038 ADD X20, X20, 0x1
	0x037CC03C ADD X23, X23, 0x20
	0x037CC040 CMP X20, X8
	0x037CC044 B.LT 0x37CBEC0
	0x037CC048 B 0x37CC138
	0x037CC04C BL 0x1C16F20
	0x037CC050 B 0x37CC198
	0x037CC054 B 0x37CC058
	0x037CC058 MOV X27, X0
	0x037CC05C CMP W1, 0x1
	0x037CC060 B.NE 0x37CC1A8
	0x037CC064 MOV X0, X27
	0x037CC068 BL 0x3EB1AD0
	0x037CC06C MOV X27, X0
	0x037CC070 ADRP X0, 0x927000
	0x037CC074 LDR X0, [X0 + 0x7D0]
	0x037CC078 BL 0x1C16D08
	0x037CC07C LDR X8, [X27]
	0x037CC080 LDR X1, [X8]
	0x037CC084 BL 0x1C17270
	0x037CC088 TBZ X0, 0x0, 0x37CC178
	0x037CC08C LDR X27, [X27]
	0x037CC090 BL 0x3EB1AE0
	0x037CC094 STR X27, [X31 + 0x8]
	0x037CC098 CBZ X27, 0x37CC174
	0x037CC09C LDR X0, [X31 + 0x8]
	0x037CC0A0 MOV X1, X31
	0x037CC0A4 BL 0x33B32AC
	0x037CC0A8 CBZ X0, 0x37CC174
	0x037CC0AC LDR X8, [X0]
	0x037CC0B0 LDP X9, X1, [X8 + 0x1A8]
	0x037CC0B4 BLR X9
	0x037CC0B8 CBZ X25, 0x37CC174
	0x037CC0BC MOV X28, X0
	0x037CC0C0 MOV X0, X25
	0x037CC0C4 MOV X1, X31
	0x037CC0C8 BL 0x33BE520
	0x037CC0CC CBZ X0, 0x37CC174
	0x037CC0D0 LDR X8, [X0]
	0x037CC0D4 LDP X9, X1, [X8 + 0x1A8]
	0x037CC0D8 BLR X9
	0x037CC0DC MOV X27, X0
	0x037CC0E0 ADRP X0, 0x97C000
	0x037CC0E4 LDR X0, [X0 + 0x798]
	0x037CC0E8 BL 0x1C16D08
	0x037CC0EC MOV X1, X28
	0x037CC0F0 MOV X2, X27
	0x037CC0F4 MOV X3, X26
	0x037CC0F8 MOV X4, X31
	0x037CC0FC BL 0x3227C18
	0x037CC100 MOV X26, X0
	0x037CC104 ADRP X0, 0x927000
	0x037CC108 LDR X0, [X0 + 0xA28]
	0x037CC10C BL 0x1C16D08
	0x037CC110 LDR W8, [X0 + 0xE0]
	0x037CC114 CBNZ W8, 0x37CC11C
	0x037CC118 BL 0x1C16DFC
	0x037CC11C MOV X0, X26
	0x037CC120 MOV X1, X31
	0x037CC124 BL 0x3C0649C
	0x037CC128 LDR X0, [X31 + 0x8]
	0x037CC12C MOV X1, X31
	0x037CC130 BL 0x3C02C84
	0x037CC134 B 0x37CBF70
	0x037CC138 LDR X8, [X31 + 0x10]
	0x037CC13C LDR X8, [X8 + 0x28]
	0x037CC140 LDR X9, [X31 + 0x38]
	0x037CC144 CMP X8, X9
	0x037CC148 B.NE 0x37CC198
	0x037CC14C LDP X20, X19, [X31 + 0xA0]
	0x037CC150 LDP X22, X21, [X31 + 0x90]
	0x037CC154 LDP X24, X23, [X31 + 0x80]
	0x037CC158 LDP X26, X25, [X31 + 0x70]
	0x037CC15C LDP X28, X27, [X31 + 0x60]
	0x037CC160 LDP X29, X30, [X31 + 0x50]
	0x037CC164 LDP D9, D8, [X31 + 0x40]
	0x037CC168 ADD X31, X31, 0xB0
	0x037CC16C RET
	0x037CC170 BL 0x1C16F28
	0x037CC174 BL 0x1C16F20
	0x037CC178 MOVZ W0, 0x8
	0x037CC17C BL 0x3EB1AF0
	0x037CC180 LDR X8, [X27]
	0x037CC184 STR X8, [X0]
	0x037CC188 ADRP X1, 0x6E8000
	0x037CC18C ADD X1, X1, 0xE58
	0x037CC190 MOV X2, X31
	0x037CC194 BL 0x3EB1B00
	0x037CC198 BL 0x3EB1B20
	0x037CC19C B 0x37CC1A0
	0x037CC1A0 MOV X27, X0
	0x037CC1A4 BL 0x3EB1AE0
	0x037CC1A8 MOV X0, X27
	0x037CC1AC BL 0x1D2C690
	0x037CC1B0 BL 0x1990590
	0x037CC1B4 STP X30, X25, [X31 - 0x40]!
	0x037CC1B8 STP X24, X23, [X31 + 0x10]
	0x037CC1BC STP X22, X21, [X31 + 0x20]
	0x037CC1C0 STP X20, X19, [X31 + 0x30]
	0x037CC1C4 ADRP X23, 0xC15000
	0x037CC1C8 LDRB W8, [X23 + 0x207]
	0x037CC1CC MOV W19, W4
	0x037CC1D0 MOV X20, X3
	0x037CC1D4 MOV X21, X2
	0x037CC1D8 MOV X22, X1
	0x037CC1DC MOV X24, X0
	0x037CC1E0 TBNZ X8, 0x0, 0x37CC204
	0x037CC1E4 ADRP X0, 0x97C000
	0x037CC1E8 LDR X0, [X0 + 0x7A0]
	0x037CC1EC BL 0x1C16CF4
	0x037CC1F0 ADRP X0, 0x97C000
	0x037CC1F4 LDR X0, [X0 + 0x7A8]
	0x037CC1F8 BL 0x1C16CF4
	0x037CC1FC MOVZ W8, 0x1
	0x037CC200 STRB W8, [X23 + 0x207]
	0x037CC204 CBZ X22, 0x37CC2E0
	0x037CC208 LDR X8, [X22 + 0x78]
	0x037CC20C CBZ X8, 0x37CC2E0
	0x037CC210 LDR X9, [X24 + 0x490]
	0x037CC214 LDRSW X25, [X8 + 0xE8]
	0x037CC218 ADD X23, X24, 0x490
	0x037CC21C CBZ X9, 0x37CC248
	0x037CC220 LDR W8, [X9 + 0x18]
	0x037CC224 CMP W25, W8
	0x037CC228 B.LT 0x37CC260
	0x037CC22C ADRP X8, 0x97C000
	0x037CC230 LDR W1, [X24 + 0x70]
	0x037CC234 LDR X8, [X8 + 0x7A0]
	0x037CC238 MOV X0, X23
	0x037CC23C LDR X2, [X8]
	0x037CC240 BL 0x2145958
	0x037CC244 B 0x37CC260
	0x037CC248 ADRP X8, 0x97C000
	0x037CC24C LDR W1, [X24 + 0x70]
	0x037CC250 LDR X8, [X8 + 0x7A8]
	0x037CC254 LDR X0, [X8]
	0x037CC258 BL 0x1C16D6C
	0x037CC25C STR X0, [X24 + 0x490]
	0x037CC260 LDRB W8, [X24 + 0x428]
	0x037CC264 CBNZ W8, 0x37CC29C
	0x037CC268 LDR X8, [X23]
	0x037CC26C CBZ X8, 0x37CC2E0
	0x037CC270 LDR W9, [X8 + 0x18]
	0x037CC274 CMP W25, W9
	0x037CC278 B.CS 0x37CC2E4
	0x037CC27C MOVZ W9, 0x38
	0x037CC280 MADD X9, X25, X9, X8
	0x037CC284 LDRB W9, [X9 + 0x51]
	0x037CC288 CBZ W9, 0x37CC29C
	0x037CC28C MOVZ W9, 0x38
	0x037CC290 MADD X8, X25, X9, X8
	0x037CC294 ADD X0, X8, 0x20
	0x037CC298 BL 0x37CC2E8
	0x037CC29C LDR X8, [X23]
	0x037CC2A0 CBZ X8, 0x37CC2E0
	0x037CC2A4 LDR W9, [X8 + 0x18]
	0x037CC2A8 CMP W25, W9
	0x037CC2AC B.CS 0x37CC2E4
	0x037CC2B0 MOV X1, X22
	0x037CC2B4 MOV X2, X21
	0x037CC2B8 MOV X3, X20
	0x037CC2BC MOV W4, W19
	0x037CC2C0 LDP X20, X19, [X31 + 0x30]
	0x037CC2C4 LDP X22, X21, [X31 + 0x20]
	0x037CC2C8 LDP X24, X23, [X31 + 0x10]
	0x037CC2CC MOVZ W9, 0x38
	0x037CC2D0 MADD X8, X25, X9, X8
	0x037CC2D4 ADD X0, X8, 0x20
	0x037CC2D8 LDP X30, X25, [X31], #0x40
	0x037CC2DC B 0x37CC34C
	0x037CC2E0 BL 0x1C16F20
	0x037CC2E4 BL 0x1C16F28
	0x037CC2E8 STR X30, [X31 - 0x20]!
	0x037CC2EC STP X20, X19, [X31 + 0x10]
	0x037CC2F0 LDR W8, [X0 + 0x28]
	0x037CC2F4 MOV X19, X0
	0x037CC2F8 SUBS W20, W8, 0x1
	0x037CC2FC B.MI 0x37CC334
	0x037CC300 LDR X8, [X19]
	0x037CC304 CBZ X8, 0x37CC344
	0x037CC308 LDR W9, [X8 + 0x18]
	0x037CC30C CMP W20, W9
	0x037CC310 B.CS 0x37CC348
	0x037CC314 ADD X8, X8, W20, 0x3, UXTW
	0x037CC318 LDR W8, [X8 + 0x24]
	0x037CC31C CBNZ W8, 0x37CC32C
	0x037CC320 MOV X0, X19
	0x037CC324 MOV W1, W20
	0x037CC328 BL 0x37CCC9C
	0x037CC32C SUBS W20, W20, 0x1
	0x037CC330 B.PL 0x37CC300
	0x037CC334 STRB W31, [X19 + 0x31]
	0x037CC338 LDP X20, X19, [X31 + 0x10]
	0x037CC33C LDR X30, [X31], #0x20
	0x037CC340 RET
	0x037CC344 BL 0x1C16F20
	0x037CC348 BL 0x1C16F28
	0x037CC34C SUB X31, X31, 0x70
	0x037CC350 STP X30, X25, [X31 + 0x30]
	0x037CC354 STP X24, X23, [X31 + 0x40]
	0x037CC358 STP X22, X21, [X31 + 0x50]
	0x037CC35C STP X20, X19, [X31 + 0x60]
	0x037CC360 ADRP X25, 0xC15000
	0x037CC364 ADRP X24, 0x97C000
	0x037CC368 LDRB W8, [X25 + 0x211]
	0x037CC36C LDR X24, [X24 + 0x7B0]
	0x037CC370 MOV W21, W4
	0x037CC374 MOV X22, X3
	0x037CC378 MOV X23, X2
	0x037CC37C MOV X20, X1
	0x037CC380 MOV X19, X0
	0x037CC384 TBNZ X8, 0x0, 0x37CC3B4
	0x037CC388 ADRP X0, 0x97C000
	0x037CC38C LDR X0, [X0 + 0x7B8]
	0x037CC390 BL 0x1C16CF4
	0x037CC394 ADRP X0, 0x97C000
	0x037CC398 LDR X0, [X0 + 0x7B0]
	0x037CC39C BL 0x1C16CF4
	0x037CC3A0 ADRP X0, 0x94F000
	0x037CC3A4 LDR X0, [X0 + 0xD18]
	0x037CC3A8 BL 0x1C16CF4
	0x037CC3AC MOVZ W8, 0x1
	0x037CC3B0 STRB W8, [X25 + 0x211]
	0x037CC3B4 LDR X4, [X24]
	0x037CC3B8 LDR W8, [X19 + 0x28]
	0x037CC3BC ADD X0, X19, 0x8

ISIL:
	001 Move [X31-128], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X29
	005 Move [X31+40], X30
	006 Move [X31+48], X28
	007 Move [X31+56], X27
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Subtract X31, X31, 688
	017 Move [X31+96], X2
	018 NotImplemented "Instruction MRS not yet implemented."
	019 Move X8, [X22+40]
	020 Move X19, 0xC17000
	021 Move W21, W1
	022 Move X20, X0
	023 Move [X31+680], X8
	024 Move W8, [X19+513]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {94}
	029 Move X0, 0x97E000
	030 Move X0, [X0+488]
	031 Call 0x1C17CF4
	032 Move X0, 0x97E000
	033 Move X0, [X0+1856]
	034 Call 0x1C17CF4
	035 Move X0, 0x929000
	036 Move X0, [X0+2600]
	037 Call 0x1C17CF4
	038 Move X0, 0x97D000
	039 Move X0, [X0+3368]
	040 Call 0x1C17CF4
	041 Move X0, 0x97E000
	042 Move X0, [X0+1864]
	043 Call 0x1C17CF4
	044 Move X0, 0x951000
	045 Move X0, [X0+3856]
	046 Call 0x1C17CF4
	047 Move X0, 0x951000
	048 Move X0, [X0+3864]
	049 Call 0x1C17CF4
	050 Move X0, 0x951000
	051 Move X0, [X0+3872]
	052 Call 0x1C17CF4
	053 Move X0, 0x97E000
	054 Move X0, [X0+512]
	055 Call 0x1C17CF4
	056 Move X0, 0x97E000
	057 Move X0, [X0+520]
	058 Call 0x1C17CF4
	059 Move X0, 0x951000
	060 Move X0, [X0+3792]
	061 Call 0x1C17CF4
	062 Move X0, 0x97C000
	063 Move X0, [X0+3176]
	064 Call 0x1C17CF4
	065 Move X0, 0x97E000
	066 Move X0, [X0+1872]
	067 Call 0x1C17CF4
	068 Move X0, 0x951000
	069 Move X0, [X0+3784]
	070 Call 0x1C17CF4
	071 Move X0, 0x951000
	072 Move X0, [X0+3352]
	073 Call 0x1C17CF4
	074 Move X0, 0x951000
	075 Move X0, [X0+624]
	076 Call 0x1C17CF4
	077 Move X0, 0x951000
	078 Move X0, [X0+3888]
	079 Call 0x1C17CF4
	080 Move X0, 0x931000
	081 Move X0, [X0+1800]
	082 Call 0x1C17CF4
	083 Move X0, 0x97D000
	084 Move X0, [X0+3392]
	085 Call 0x1C17CF4
	086 Move X0, 0x97E000
	087 Move X0, [X0+1880]
	088 Call 0x1C17CF4
	089 Move X0, 0x97E000
	090 Move X0, [X0+1888]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X19+513], W8
	094 NotImplemented "Instruction MOVI not yet implemented."
	095 Move [X31+240], X31
	096 Move [X31+248], X31
	097 Move [X31+256], X31
	098 Move [X31+224], X31
	099 Move [X31+232], X31
	100 Move [X31+208], X31
	101 Move [X31+216], X31
	102 Move [X31+176], V0
	103 Move [X31+184], V0
	104 Move [X31+10], V0
	105 Move W8, [X20+1064]
	106 Compare W8, 0
	107 JumpIfNotEqual {1115}
	108 Move W8, [X20+168]
	109 And W31, W8, W21
	110 Move W8, [X20+1128]
	111 Move X23, [X20+1088]
	112 Move [X31+80], X22
	113 Add W8, W8, 1
	114 Move [X20+1128], W8
	115 Compare X23, 0
	116 JumpIfEqual {1114}
	117 Move X25, 0x951000
	118 Move X8, [X23]
	119 Move X25, [X25+3792]
	120 Move X28, 0x951000
	121 Move X22, 0x951000
	122 NotImplemented "Instruction LDRH not yet implemented."
	123 Move X1, [X25]
	124 Move X28, [X28+3784]
	125 Move X22, [X22+3888]
	126 Add X19, X20, 952
	127 Compare X9, 0
	128 JumpIfEqual {135}
	129 Move X10, [X8+176]
	130 Add X10, X10, 8
	131 NotImplemented "Instruction LDUR not yet implemented."
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Subtract X9, X9, 1
	134 Add X10, X10, 16
	135 Move W2, 22
	136 Move X0, X23
	137 Call 0x1C5D788
	138 Move W9, [X10]
	139 Add W9, W9, 22
	140 Add X8, X8, W9
	141 Add X0, X8, 312
	142 Move X8, [X0]
	143 Move X1, [X0+8]
	144 Move X26, 0x951000
	145 Move X27, 0x951000
	146 Move X24, 0x951000
	147 Move X26, [X26+3864]
	148 Move X27, [X27+3872]
	149 Move X24, [X24+3856]
	150 Move X0, X23
	151 NotImplemented "Instruction BLR not yet implemented."
	152 Move X8, [X28]
	153 Add X0, X31, 112
	154 Move W1, W21
	155 Move X2, X31
	156 Move X8, [X8+184]
	157 Move [X8+8], D0
	158 Move V2, [X20+192]
	159 Move V0, [X20+208]
	160 Move V1, [X20+11]
	161 Move [X31+128], V2
	162 Move [X31+136], V0
	163 Move [X31+7], V1
	164 Call InputStateBuffers.SwitchTo, X0, X1
	165 Move W0, W21
	166 Move X1, X31
	167 Move [X20+172], W21
	168 Call InputUpdate.OnUpdate, X0
	169 Move X0, X20
	170 Call InputManager.get_devices, X0
	171 Move X9, [X22]
	172 Move [X31+224], X0
	173 Move [X31+232], X1
	174 Add X8, X31, 544
	175 Add X0, X31, 224
	176 Move X1, X9
	177 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	178 Move V0, [X31+34]
	179 Move X8, [X31+560]
	180 Move [X31+15], V0
	181 Move [X31+256], X8
	182 Move X1, [X26]
	183 Add X0, X31, 240
	184 Call Enumerator<Object>.MoveNext, X0
	185 Move TEMP, X0
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfNotEqual {192}
	189 Move X1, [X27]
	190 Add X0, X31, 240
	191 Call Enumerator<Object>.get_Current, X0
	192 Move X1, [X24]
	193 Add X0, X31, 240
	194 Call Enumerator<Object>.Dispose, X0
	195 Move W0, W21
	196 Move X1, X31
	197 Call InputUpdate.IsPlayerUpdate, X0
	198 Move X24, [X20+1088]
	199 Move [X31+76], W0
	200 Compare X24, 0
	201 JumpIfEqual {1114}
	202 Move X8, [X24]
	203 Move X1, [X25]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 NotImplemented "Instruction LDRH not yet implemented."
	206 Compare W9, 0
	207 JumpIfEqual {214}
	208 Move X10, [X8+176]
	209 Add X10, X10, 8
	210 NotImplemented "Instruction LDUR not yet implemented."
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Subtract X9, X9, 1
	213 Add X10, X10, 16
	214 Move W2, 20
	215 Compare W9, 0
	216 JumpIfEqual {223}
	217 Move X10, [X8+176]
	218 Add X10, X10, 8
	219 NotImplemented "Instruction LDUR not yet implemented."
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Subtract X9, X9, 1
	222 Add X10, X10, 16
	223 Move W2, 19
	224 Move X0, X24
	225 Call 0x1C5D788
	226 Move W9, [X10]
	227 Add W9, W9, 20
	228 Move W9, [X10]
	229 Add W9, W9, 19
	230 Add X8, X8, W9
	231 Add X0, X8, 312
	232 Move X8, [X0]
	233 Move X1, [X0+8]
	234 Move X0, X24
	235 NotImplemented "Instruction BLR not yet implemented."
	236 Move V8, V0
	237 NotImplemented "Instruction CMP not yet implemented."
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Move X8, 0x951000
	240 Move X8, [X8+624]
	241 Move X0, [X8]
	242 Move W8, [X0+224]
	243 Compare W8, 0
	244 JumpIfNotEqual {246}
	245 Call 0x1C17DFC
	246 Move X0, X31
	247 Call InputSystem.get_settings
	248 Compare X0, 0
	249 JumpIfEqual {1114}
	250 Move W8, [X0+32]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 NotImplemented "Instruction CSET not yet implemented."
	253 Move [X31+108], W8
	254 Move [X31+108], W31
	255 Move W8, [X20+946]
	256 Compare W8, 0
	257 JumpIfNotEqual {263}
	258 Move X8, [X20+1152]
	259 Compare X8, 0
	260 JumpIfEqual {1114}
	261 Move W8, [X8+48]
	262 NotImplemented "Instruction CMP not yet implemented."
	263 Move W22, W31
	264 Move X8, [X31+96]
	265 Move W8, [X8+24]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 NotImplemented "Instruction CSET not yet implemented."
	268 Or W8, W22, W8
	269 Compare W8, 0
	270 JumpIfEqual {286}
	271 Move W8, [X31+76]
	272 Move TEMP, X8
	273 And TEMP, TEMP, 1
	274 Compare TEMP, 1
	275 JumpIfNotEqual {278}
	276 Move X0, X20
	277 Call InputManager.ProcessStateChangeMonitorTimeouts, X0
	278 Move X0, X20
	279 Move W1, W21
	280 Call InputManager.InvokeAfterUpdateCallback, X0, X1
	281 Compare W22, 0
	282 JumpIfEqual {1079}
	283 Move X0, [X31+96]
	284 Move X1, X31
	285 Call InputEventBuffer.Reset, X0
	286 Move W9, [X20+946]
	287 Move X8, [X20+1152]
	288 Compare W9, 0
	289 JumpIfEqual {309}
	290 Compare X8, 0
	291 JumpIfNotEqual {313}
	292 Move X23, [X20+1088]
	293 Compare X23, 0
	294 JumpIfEqual {1114}
	295 Move X8, [X23]
	296 Move X1, [X25]
	297 NotImplemented "Instruction LDRH not yet implemented."
	298 Compare X9, 0
	299 JumpIfEqual {306}
	300 Move X10, [X8+176]
	301 Add X10, X10, 8
	302 NotImplemented "Instruction LDUR not yet implemented."
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Subtract X9, X9, 1
	305 Add X10, X10, 16
	306 Move W2, 23
	307 Move X0, X23
	308 Call 0x1C5D788
	309 Compare X8, 0
	310 JumpIfEqual {1114}
	311 Move W8, [X8+48]
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move X8, 0x931000
	314 Move X8, [X8+1800]
	315 Move X0, [X8]
	316 Move W8, [X0+224]
	317 Compare W8, 0
	318 JumpIfNotEqual {320}
	319 Call 0x1C17DFC
	320 Move X0, X31
	321 Call Stopwatch.GetTimestamp
	322 Move X8, [X20+1152]
	323 Move [X31+56], X0
	324 Compare X8, 0
	325 JumpIfEqual {1140}
	326 Move W2, [X8+40]
	327 NotImplemented "Instruction MOVI not yet implemented."
	328 Move [X31+656], X31
	329 Move [X31+624], V0
	330 Move [X31+632], V0
	331 Move [X31+592], V0
	332 Move [X31+600], V0
	333 Move [X31+560], V0
	334 Move [X31+568], V0
	335 Move [X31+34], V0
	336 Move X1, [X31+96]
	337 Add X0, X31, 544
	338 Move X3, X31
	339 Call InputEventStream..ctor, X0, X1, X2
	340 Add X1, X31, 544
	341 Move W2, 120
	342 Move X0, X19
	343 Call 0x3EB2AC0
	344 Add X8, X20, 160
	345 Move [X31+24], X8
	346 Move [X31+32], X31
	347 Add X8, X20, 152
	348 Add X9, X20, 624
	349 Move [X31+16], X8
	350 Add X8, X20, 224
	351 Move X29, X31
	352 Move [X31+92], W31
	353 Move [X31+40], X8
	354 Move [X31+48], X9
	355 Move D10, X31
	356 Move [X31+64], X29
	357 Move X0, X19
	358 Move X1, X31
	359 Call InputEventStream.get_remainingEventCount, X0
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Move X8, [X20+1152]
	362 Compare X8, 0
	363 JumpIfEqual {1113}
	364 Move W8, [X8+36]
	365 NotImplemented "Instruction CMP not yet implemented."
	366 Move W9, [X31+92]
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move X0, X19
	369 Move X1, X31
	370 Call InputEventStream.get_currentEventPtr, X0
	371 Move X27, X0
	372 NotImplemented "Instruction CMP not yet implemented."
	373 Move X26, X31
	374 Move X0, X19
	375 Move X1, X31
	376 Call InputEventStream.get_remainingEventCount, X0
	377 NotImplemented "Instruction CMP not yet implemented."
	378 Move X0, X27
	379 Move X1, X31
	380 Call InputEvent.get_deviceId, X0
	381 Move W1, W0
	382 Move X0, X20
	383 Call InputManager.TryGetDeviceById, X0, X1
	384 Move X26, X0
	385 Compare X0, 0
	386 JumpIfEqual {406}
	387 Move X0, X26
	388 Move X1, X31
	389 Call InputDevice.get_updateBeforeRender, X0
	390 Move TEMP, X0
	391 And TEMP, TEMP, 1
	392 Compare TEMP, 1
	393 JumpIfNotEqual {406}
	394 Move X0, X27
	395 Move X1, X31
	396 Call InputEvent.get_type, X0
	397 Move W8, 0x4154
	398 NotImplemented "Instruction MOVK not yet implemented."
	399 NotImplemented "Instruction CMP not yet implemented."
	400 Move X0, X27
	401 Move X1, X31
	402 Call InputEvent.get_type, X0
	403 Move W8, 0x5441
	404 NotImplemented "Instruction MOVK not yet implemented."
	405 NotImplemented "Instruction CMP not yet implemented."
	406 Move W1, 1
	407 Move X0, X19
	408 Move X2, X31
	409 Call InputEventStream.Advance, X0, X1
	410 Move X27, X0
	411 Move X26, X31
	412 Move X0, X19
	413 Move X1, X31
	414 Call InputEventStream.get_remainingEventCount, X0
	415 Compare W0, 0
	416 JumpIfEqual {1040}
	417 Move X0, X27
	418 Move X1, X31
	419 Call InputEvent.get_internalTime, X0
	420 Move V9, V0
	421 Move X0, X27
	422 Move X1, X31
	423 Call InputEvent.get_type, X0
	424 Move W8, [X31+108]
	425 Move X28, X0
	426 Compare W8, 0
	427 JumpIfEqual {433}
	428 NotImplemented "Instruction FCMP not yet implemented."
	429 Move W1, 1
	430 Move X0, X19
	431 Move X2, X31
	432 Call InputEventStream.Advance, X0, X1
	433 Compare X26, 0
	434 JumpIfNotEqual {444}
	435 Move X0, X27
	436 Move X1, X31
	437 Call InputEvent.get_deviceId, X0
	438 Move W1, W0
	439 Move X0, X20
	440 Call InputManager.TryGetDeviceById, X0, X1
	441 Move X26, X0
	442 Compare X0, 0
	443 JumpIfEqual {556}
	444 Move X0, X26
	445 Move X1, X31
	446 Call InputDevice.get_enabled, X0
	447 Move TEMP, X0
	448 And TEMP, TEMP, 1
	449 Compare TEMP, 1
	450 JumpIfEqual {463}
	451 Move W8, 0x4647
	452 NotImplemented "Instruction MOVK not yet implemented."
	453 NotImplemented "Instruction CMP not yet implemented."
	454 Move W8, 0x454D
	455 NotImplemented "Instruction MOVK not yet implemented."
	456 NotImplemented "Instruction CMP not yet implemented."
	457 NotImplemented "Instruction LDRH not yet implemented."
	458 And W31, W8, 384
	459 Move X0, X19
	460 Move W1, W31
	461 Move X2, X31
	462 Call InputEventStream.Advance, X0, X1
	463 Move X8, [X20+1152]
	464 Compare X8, 0
	465 JumpIfEqual {1133}
	466 Move W8, [X8+92]
	467 Compare W8, 0
	468 JumpIfNotEqual {560}
	469 Move X0, X26
	470 Move X1, X31
	471 Call InputDevice.get_hasEventMerger, X0
	472 Move X8, [X31+64]
	473 NotImplemented "Instruction CMP not yet implemented."
	474 Xor W8, W0, 1
	475 Move TEMP, X8
	476 And TEMP, TEMP, 1
	477 Compare TEMP, 1
	478 JumpIfEqual {560}
	479 Move X0, X19
	480 Move X1, X31
	481 Call InputEventStream.Peek, X0
	482 Move X29, X0
	483 Compare X0, 0
	484 JumpIfEqual {560}
	485 Move X0, X27
	486 Move X1, X31
	487 Call InputEvent.get_deviceId, X0
	488 Move W22, W0
	489 Move X0, X29
	490 Move X1, X31
	491 Call InputEvent.get_deviceId, X0
	492 NotImplemented "Instruction CMP not yet implemented."
	493 Move W8, [X31+108]
	494 Compare W8, 0
	495 JumpIfEqual {500}
	496 Move X0, X29
	497 Move X1, X31
	498 Call InputEvent.get_internalTime, X0
	499 NotImplemented "Instruction FCMP not yet implemented."
	500 Move X0, X27
	501 Move X1, X31
	502 Call InputEventPtr.op_Implicit, X0
	503 Move X24, X0
	504 Move X0, X29
	505 Move X1, X31
	506 Call InputEventPtr.op_Implicit, X0
	507 Move X8, 0x97E000
	508 Move X8, [X8+512]
	509 Move X25, X0
	510 Move X22, [X8]
	511 Move X0, X26
	512 Move X1, X22
	513 Call 0x1C17E00
	514 Compare X0, 0
	515 JumpIfEqual {1137}
	516 Move X8, 0x97E000
	517 Move X8, [X8+512]
	518 Move X22, [X8]
	519 Move X0, X26
	520 Move X1, X22
	521 Call 0x1C17E00
	522 Move X23, X0
	523 Compare X0, 0
	524 JumpIfEqual {1134}
	525 Move X8, [X23]
	526 NotImplemented "Instruction LDRH not yet implemented."
	527 Compare X9, 0
	528 JumpIfEqual {535}
	529 Move X10, [X8+176]
	530 Add X10, X10, 8
	531 NotImplemented "Instruction LDUR not yet implemented."
	532 NotImplemented "Instruction CMP not yet implemented."
	533 Subtract X9, X9, 1
	534 Add X10, X10, 16
	535 Move X0, X23
	536 Move X1, X22
	537 Move W2, W31
	538 Call 0x1C5D788
	539 NotImplemented "Instruction LDRSW not yet implemented."
	540 Add X8, X8, X9
	541 Add X0, X8, 312
	542 Move X8, [X0]
	543 Move X3, [X0+8]
	544 Move X0, X23
	545 Move X1, X24
	546 Move X2, X25
	547 NotImplemented "Instruction BLR not yet implemented."
	548 Move TEMP, X0
	549 And TEMP, TEMP, 1
	550 Compare TEMP, 1
	551 JumpIfNotEqual {561}
	552 Move X0, X19
	553 Move W1, W31
	554 Move X2, X31
	555 Call InputEventStream.Advance, X0, X1
	556 Move X0, X19
	557 Move W1, W31
	558 Move X2, X31
	559 Call InputEventStream.Advance, X0, X1
	560 Move X29, [X31+64]
	561 Move X0, X26
	562 Move X1, X31
	563 Call InputDevice.get_hasEventPreProcessor, X0
	564 Move TEMP, X0
	565 And TEMP, TEMP, 1
	566 Compare TEMP, 1
	567 JumpIfNotEqual {615}
	568 Move X0, X27
	569 Move X1, X31
	570 Call InputEventPtr.op_Implicit, X0
	571 Move X8, 0x97E000
	572 Move X8, [X8+520]
	573 Move X24, X0
	574 Move X22, [X8]
	575 Move X0, X26
	576 Move X1, X22
	577 Call 0x1C17E00
	578 Compare X0, 0
	579 JumpIfEqual {1144}
	580 Move X8, 0x97E000
	581 Move X8, [X8+520]
	582 Move X22, [X8]
	583 Move X0, X26
	584 Move X1, X22
	585 Call 0x1C17E00
	586 Move X23, X0
	587 Compare X0, 0
	588 JumpIfEqual {1141}
	589 Move X8, [X23]
	590 NotImplemented "Instruction LDRH not yet implemented."
	591 Compare X9, 0
	592 JumpIfEqual {599}
	593 Move X10, [X8+176]
	594 Add X10, X10, 8
	595 NotImplemented "Instruction LDUR not yet implemented."
	596 NotImplemented "Instruction CMP not yet implemented."
	597 Subtract X9, X9, 1
	598 Add X10, X10, 16
	599 Move X0, X23
	600 Move X1, X22
	601 Move W2, W31
	602 Call 0x1C5D788
	603 NotImplemented "Instruction LDRSW not yet implemented."
	604 Add X8, X8, X9
	605 Add X0, X8, 312
	606 Move X8, [X0]
	607 Move X2, [X0+8]
	608 Move X0, X23
	609 Move X1, X24
	610 NotImplemented "Instruction BLR not yet implemented."
	611 Move TEMP, X0
	612 And TEMP, TEMP, 1
	613 Compare TEMP, 1
	614 JumpIfNotEqual {644}
	615 Move X8, 0x97E000
	616 Move X8, [X8+1856]
	617 Move X1, [X8]
	618 Move X0, [X31+48]
	619 Call 0x28F240C, X0
	620 NotImplemented "Instruction CMP not yet implemented."
	621 Move X8, 0x97E000
	622 Move X8, [X8+1880]
	623 Move X3, [X8]
	624 Move X8, 0x97E000
	625 Move X8, [X8+1864]
	626 Move X5, [X8]
	627 Move X0, [X31+48]
	628 Move X1, X27
	629 Move X2, X26
	630 Move X4, X31
	631 Call 0x21AEB24, X0, X1, X2, X3, X4
	632 Move X0, X27
	633 Move X1, X31
	634 Call InputEvent.get_handled, X0
	635 Move TEMP, X0
	636 And TEMP, TEMP, 1
	637 Compare TEMP, 1
	638 JumpIfNotEqual {649}
	639 Move X0, X19
	640 Move W1, W31
	641 Move X2, X31
	642 Call InputEventStream.Advance, X0, X1
	643 Move [X31+64], X29
	644 Move X0, X19
	645 Move W1, W31
	646 Move X2, X31
	647 Call InputEventStream.Advance, X0, X1
	648 Move [X31+64], X29
	649 Move W8, [X20+1124]
	650 Move W22, [X20+1120]
	651 Subtract D0, D8, D9
	652 Add D0, D10, D0
	653 NotImplemented "Instruction FCMP not yet implemented."
	654 NotImplemented "Instruction FCSEL not yet implemented."
	655 Add W8, W8, 1
	656 Move [X20+1124], W8
	657 Move X0, X27
	658 Move X1, X31
	659 Call InputEvent.get_sizeInBytes, X0
	660 Move W9, 0x454D
	661 NotImplemented "Instruction MOVK not yet implemented."
	662 Add W8, W0, W22
	663 NotImplemented "Instruction CMP not yet implemented."
	664 Move [X20+1120], W8
	665 Move W8, 0x4553
	666 NotImplemented "Instruction MOVK not yet implemented."
	667 NotImplemented "Instruction CMP not yet implemented."
	668 Move W8, 0x5854
	669 NotImplemented "Instruction MOVK not yet implemented."
	670 NotImplemented "Instruction CMP not yet implemented."
	671 Move W8, 0x4154
	672 NotImplemented "Instruction MOVK not yet implemented."
	673 NotImplemented "Instruction CMP not yet implemented."
	674 Move W8, 0x4647
	675 NotImplemented "Instruction MOVK not yet implemented."
	676 NotImplemented "Instruction CMP not yet implemented."
	677 Move W8, 0x5441
	678 NotImplemented "Instruction MOVK not yet implemented."
	679 NotImplemented "Instruction CMP not yet implemented."
	680 Move W8, 0x454D
	681 NotImplemented "Instruction MOVK not yet implemented."
	682 NotImplemented "Instruction CMP not yet implemented."
	683 Move X0, X20
	684 Move X1, X26
	685 Move W2, W31
	686 Call InputManager.RemoveDevice, X0, X1, X2
	687 Move X0, X26
	688 Move X1, X31
	689 Call InputDevice.get_native, X0
	690 Move TEMP, X0
	691 And TEMP, TEMP, 1
	692 Compare TEMP, 1
	693 JumpIfNotEqual {1024}
	694 Move X8, [X26+288]
	695 Move V1, [X26+256]
	696 Move V0, [X26+272]
	697 Move V2, [X26+15]
	698 Move [X31+208], X8
	699 Move [X31+176], V1
	700 Move [X31+184], V0
	701 Move [X31+10], V2
	702 Add X0, X31, 160
	703 Move X1, X31
	704 Call InputDeviceDescription.get_empty, X0
	705 Move TEMP, X0
	706 And TEMP, TEMP, 1
	707 Compare TEMP, 1
	708 JumpIfEqual {1024}
	709 Move X8, 0x97E000
	710 Move X8, [X8+488]
	711 Move X4, [X8]
	712 Move X1, [X31+16]
	713 Move X0, [X31+24]
	714 Move W3, 10
	715 Move X2, X26
	716 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	717 Move X8, 0x97D000
	718 Move X8, [X8+3392]
	719 Move X3, [X8]
	720 Move X8, 0x97D000
	721 Move X8, [X8+3368]
	722 Move X5, [X8]
	723 Move X0, [X31+40]
	724 Move W2, 2
	725 Move X1, X26
	726 Move X4, X31
	727 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	728 Move W8, 0x5354
	729 NotImplemented "Instruction MOVK not yet implemented."
	730 NotImplemented "Instruction CMP not yet implemented."
	731 Move W8, 0x4553
	732 NotImplemented "Instruction MOVK not yet implemented."
	733 NotImplemented "Instruction CMP not yet implemented."
	734 Move X8, 0x97E000
	735 Move X8, [X8+1872]
	736 Move X1, [X8]
	737 Move X0, X26
	738 Call 0x1C17E00
	739 Move X8, [X31+32]
	740 NotImplemented "Instruction CMP not yet implemented."
	741 NotImplemented "Instruction CSEL not yet implemented."
	742 Compare X0, 0
	743 JumpIfEqual {1024}
	744 Compare X27, 0
	745 JumpIfEqual {1156}
	746 Add X1, X27, 20
	747 Add X0, X31, 408
	748 Move W2, 132
	749 Call 0x3EB2AC0
	750 Compare X24, 0
	751 JumpIfEqual {1155}
	752 Move X8, 0x97E000
	753 Move X8, [X8+1872]
	754 Add X0, X31, 272
	755 Add X1, X31, 408
	756 Move W2, 132
	757 Move X22, [X8]
	758 Call 0x3EB2AC0
	759 Move X8, [X24]
	760 NotImplemented "Instruction LDRH not yet implemented."
	761 Compare X9, 0
	762 JumpIfEqual {769}
	763 Move X10, [X8+176]
	764 Add X10, X10, 8
	765 NotImplemented "Instruction LDUR not yet implemented."
	766 NotImplemented "Instruction CMP not yet implemented."
	767 Subtract X9, X9, 1
	768 Add X10, X10, 16
	769 Move W2, 1
	770 Move X0, X24
	771 Move X1, X22
	772 Call 0x1C5D788
	773 Move X22, X0
	774 Move [X31+216], X27
	775 Move X0, X26
	776 Move X1, X31
	777 Call InputDevice.get_hasStateCallbacks, X0
	778 Move V0, [X26+296]
	779 NotImplemented "Instruction FCMP not yet implemented."
	780 Move TEMP, X0
	781 And TEMP, TEMP, 1
	782 Compare TEMP, 1
	783 JumpIfNotEqual {1024}
	784 Move X8, 0x951000
	785 Move X8, [X8+3352]
	786 Move W22, [X26+16]
	787 Move X0, [X8]
	788 Move W8, [X0+224]
	789 Compare W8, 0
	790 JumpIfNotEqual {792}
	791 Call 0x1C17DFC
	792 Add X0, X31, 216
	793 Move X1, X31
	794 Call InputEventPtr.get_stateFormat, X0
	795 NotImplemented "Instruction CMP not yet implemented."
	796 Move X0, X26
	797 Move X1, X31
	798 Call InputDevice.NotifyConfigurationChanged, X0
	799 Move W1, 7
	800 Move X0, X26
	801 Move X2, X31
	802 Call InputActionState.OnDeviceChange, X0, X1
	803 Move X8, 0x97D000
	804 Move X8, [X8+3392]
	805 Move X3, [X8]
	806 Move X8, 0x97D000
	807 Move X8, [X8+3368]
	808 Move X5, [X8]
	809 Move X0, [X31+40]
	810 Move W2, 7
	811 Move X1, X26
	812 Move X4, X31
	813 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	814 Move TEMP, X0
	815 And TEMP, TEMP, 1
	816 Compare TEMP, 1
	817 JumpIfNotEqual {889}
	818 Move W8, 1
	819 Move [X20+1160], W8
	820 Move X8, 0x97C000
	821 Move X24, [X31+216]
	822 Move X8, [X8+3176]
	823 Move X22, [X8]
	824 Move X0, X26
	825 Move X1, X22
	826 Call 0x1C17E00
	827 Compare X0, 0
	828 JumpIfEqual {1151}
	829 Move X8, 0x97C000
	830 Move X8, [X8+3176]
	831 Move X25, [X8]
	832 Move X0, X26
	833 Move X1, X25
	834 Call 0x1C17E00
	835 Move X23, X0
	836 Compare X0, 0
	837 JumpIfEqual {1148}
	838 Move X8, [X23]
	839 NotImplemented "Instruction LDRH not yet implemented."
	840 Compare X9, 0
	841 JumpIfEqual {848}
	842 Move X10, [X8+176]
	843 Add X10, X10, 8
	844 NotImplemented "Instruction LDUR not yet implemented."
	845 NotImplemented "Instruction CMP not yet implemented."
	846 Subtract X9, X9, 1
	847 Add X10, X10, 16
	848 Move W2, 1
	849 Move X0, X23
	850 Move X1, X25
	851 Call 0x1C5D788
	852 Move X8, 0x97E000
	853 Move X8, [X8+1872]
	854 Move X1, [X8]
	855 Move X0, X26
	856 Call 0x1C17E00
	857 Move X26, X0
	858 Compare X0, 0
	859 JumpIfEqual {1024}
	860 Compare X27, 0
	861 JumpIfEqual {1157}
	862 Move W27, [X27+20]
	863 NotImplemented "Instruction CMP not yet implemented."
	864 Move X8, [X26]
	865 Move X10, 0x97E000
	866 NotImplemented "Instruction LDRH not yet implemented."
	867 Move X10, [X10+1872]
	868 Move X1, [X10]
	869 Compare X9, 0
	870 JumpIfEqual {877}
	871 Move X10, [X8+176]
	872 Add X10, X10, 8
	873 NotImplemented "Instruction LDUR not yet implemented."
	874 NotImplemented "Instruction CMP not yet implemented."
	875 Subtract X9, X9, 1
	876 Add X10, X10, 16
	877 Move X0, X26
	878 Move W2, W31
	879 Call 0x1C5D788
	880 Compare X27, 0
	881 JumpIfEqual {1147}
	882 Move X3, [X31+8]
	883 Move W2, [X27+8]
	884 And X3, X3, 0xFFFFFFFF
	885 Move X0, X20
	886 Move X1, X26
	887 Move [X31+8], X3
	888 Call InputManager.ResetDevice, X0, X1, X2, X3
	889 Move X8, 0x951000
	890 Move X8, [X8+3352]
	891 Move W22, [X26+16]
	892 Move X0, [X8]
	893 Move W8, [X0+224]
	894 Compare W8, 0
	895 JumpIfNotEqual {897}
	896 Call 0x1C17DFC
	897 Add X0, X31, 216
	898 Move X1, X31
	899 Call InputEventPtr.get_stateFormat, X0
	900 NotImplemented "Instruction CMP not yet implemented."
	901 Move X0, [X31+216]
	902 Move X1, X31
	903 Call InputEventPtr.op_Implicit, X0
	904 Move X2, X0
	905 Move X0, X20
	906 Move X1, X26
	907 Move W3, W21
	908 Call InputManager.UpdateState, X0, X1, X2, X3
	909 Move W22, W0
	910 Move X8, [X26]
	911 Move X10, 0x97E000
	912 NotImplemented "Instruction LDRH not yet implemented."
	913 Move X10, [X10+1872]
	914 Move X1, [X10]
	915 Compare X9, 0
	916 JumpIfEqual {923}
	917 Move X10, [X8+176]
	918 Add X10, X10, 8
	919 NotImplemented "Instruction LDUR not yet implemented."
	920 NotImplemented "Instruction CMP not yet implemented."
	921 Subtract X9, X9, 1
	922 Add X10, X10, 16
	923 Move X0, X26
	924 Move W2, W31
	925 Call 0x1C5D788
	926 Move W9, [X10]
	927 Add W9, W9, 1
	928 Add X8, X8, W9
	929 Add X0, X8, 312
	930 Move X8, [X0]
	931 Move X2, [X0+8]
	932 Move X0, X23
	933 Move X1, X24
	934 NotImplemented "Instruction BLR not yet implemented."
	935 Move W8, [X20+1160]
	936 NotImplemented "Instruction CMP not yet implemented."
	937 NotImplemented "Instruction CSET not yet implemented."
	938 Add X0, X31, 216
	939 Move X1, X31
	940 Call InputEventPtr.get_sizeInBytes, X0
	941 Move V9, [X26+296]
	942 Move W23, W0
	943 Add X0, X31, 216
	944 Move X1, X31
	945 Call InputEventPtr.get_internalTime, X0
	946 NotImplemented "Instruction FCMP not yet implemented."
	947 Add X0, X31, 216
	948 Move X1, X31
	949 Call InputEventPtr.get_internalTime, X0
	950 Move [X26+296], D0
	951 Move W8, [X31+92]
	952 Add W8, W23, W8
	953 Move [X31+92], W8
	954 Move TEMP, X22
	955 And TEMP, TEMP, 1
	956 Compare TEMP, 1
	957 JumpIfNotEqual {1024}
	958 Move X8, [X26]
	959 Move X1, [X8+592]
	960 Move X9, [X8+584]
	961 Move X0, X26
	962 NotImplemented "Instruction BLR not yet implemented."
	963 Move W9, [X10]
	964 Add W9, W9, 1
	965 Add X8, X8, W9
	966 Add X22, X8, 312
	967 Move X23, [X22]
	968 Add X0, X31, 544
	969 Add X1, X31, 272
	970 Move W2, 132
	971 Call 0x3EB2AC0
	972 Move X2, [X22+8]
	973 Add X1, X31, 544
	974 Move X0, X24
	975 NotImplemented "Instruction BLR not yet implemented."
	976 Move [X31+32], X24
	977 NotImplemented "Instruction LDRSW not yet implemented."
	978 Add X8, X8, X9
	979 Add X0, X8, 312
	980 Move X8, [X0]
	981 Move X2, [X0+8]
	982 Move X0, X26
	983 Move W1, W27
	984 NotImplemented "Instruction BLR not yet implemented."
	985 NotImplemented "Instruction LDRSW not yet implemented."
	986 Add X8, X8, X9
	987 Add X0, X8, 312
	988 Move X8, [X0]
	989 Move X2, [X0+8]
	990 Add W9, W27, 0xF0000
	991 Move TEMP, 0x27FF
	992 Not TEMP
	993 Move W1, TEMP
	994 NotImplemented "Instruction BFM not yet implemented."
	995 Move X0, X26
	996 NotImplemented "Instruction BLR not yet implemented."
	997 Move X8, [X26]
	998 Move X10, 0x97E000
	999 NotImplemented "Instruction LDRH not yet implemented."
	1000 Move X10, [X10+1872]
	1001 Move X1, [X10]
	1002 Compare X9, 0
	1003 JumpIfEqual {1010}
	1004 Move X10, [X8+176]
	1005 Add X10, X10, 8
	1006 NotImplemented "Instruction LDUR not yet implemented."
	1007 NotImplemented "Instruction CMP not yet implemented."
	1008 Subtract X9, X9, 1
	1009 Add X10, X10, 16
	1010 Move X0, X26
	1011 Move W2, W31
	1012 Call 0x1C5D788
	1013 NotImplemented "Instruction LDRSW not yet implemented."
	1014 Add X8, X8, X9
	1015 Add X0, X8, 312
	1016 Move X8, [X0]
	1017 Move X2, [X0+8]
	1018 Move TEMP, 0x23FF
	1019 Not TEMP
	1020 Move W1, TEMP
	1021 NotImplemented "Instruction BFM not yet implemented."
	1022 Move X0, X26
	1023 NotImplemented "Instruction BLR not yet implemented."
	1024 Move X0, X19
	1025 Move W1, W31
	1026 Move X2, X31
	1027 Call InputEventStream.Advance, X0, X1
	1028 Move X8, 0x929000
	1029 Move X8, [X8+2600]
	1030 Move X0, [X8]
	1031 Move W8, [X0+224]
	1032 Compare W8, 0
	1033 JumpIfNotEqual {1035}
	1034 Call 0x1C17DFC
	1035 Move X8, 0x97E000
	1036 Move X8, [X8+1888]
	1037 Move X0, [X8]
	1038 Move X1, X31
	1039 Call Debug.LogError, X0
	1040 Move X8, 0x931000
	1041 Move X8, [X8+1800]
	1042 Move V8, [X20+1136]
	1043 Move X0, [X8]
	1044 Move W8, [X0+224]
	1045 Compare W8, 0
	1046 JumpIfNotEqual {1048}
	1047 Call 0x1C17DFC
	1048 Move X0, X31
	1049 Call Stopwatch.GetTimestamp
	1050 Move X8, 0x930000
	1051 Move X8, [X8+1800]
	1052 Move V0, [X20+1144]
	1053 Move X8, [X8]
	1054 Add D0, D10, D0
	1055 Move X8, [X8+184]
	1056 Move V1, [X8]
	1057 Move X8, [X31+56]
	1058 Move [X20+1144], D0
	1059 NotImplemented "Instruction SCVTF not yet implemented."
	1060 Subtract X8, X0, X8
	1061 NotImplemented "Instruction SCVTF not yet implemented."
	1062 NotImplemented "Instruction FDIV not yet implemented."
	1063 Add D1, D8, D1
	1064 Move [X20+1136], D1
	1065 Move X1, [X31+96]
	1066 Move X0, X19
	1067 Move X2, X31
	1068 Call InputEventStream.Close, X0, X1
	1069 Move W8, [X31+76]
	1070 Move TEMP, X8
	1071 And TEMP, TEMP, 1
	1072 Compare TEMP, 1
	1073 JumpIfNotEqual {1076}
	1074 Move X0, X20
	1075 Call InputManager.ProcessStateChangeMonitorTimeouts, X0
	1076 Move X0, X20
	1077 Move W1, W21
	1078 Call InputManager.InvokeAfterUpdateCallback, X0, X1
	1079 Move X22, [X31+80]
	1080 Move [X20+172], W31
	1081 Move X8, [X22+40]
	1082 Move X9, [X31+680]
	1083 NotImplemented "Instruction CMP not yet implemented."
	1084 Add X31, X31, 688
	1085 Move X20, [X31+112]
	1086 Move X19, [X31+120]
	1087 Move X22, [X31+96]
	1088 Move X21, [X31+104]
	1089 Move X24, [X31+80]
	1090 Move X23, [X31+88]
	1091 Move X26, [X31+64]
	1092 Move X25, [X31+72]
	1093 Move X28, [X31+48]
	1094 Move X27, [X31+56]
	1095 Move X29, [X31+32]
	1096 Move X30, [X31+40]
	1097 Move D9, [X31+16]
	1098 Move D8, [X31+24]
	1099 Move V10, [X31+128]
	1100 Return 
	1101 NotImplemented "Instruction CMP not yet implemented."
	1102 NotImplemented "Instruction CMP not yet implemented."
	1103 Move W9, [X10]
	1104 Add W9, W9, 23
	1105 Add X8, X8, W9
	1106 Add X0, X8, 312
	1107 Move X8, [X0]
	1108 Move X1, [X0+8]
	1109 Move X0, X23
	1110 NotImplemented "Instruction BLR not yet implemented."
	1111 NotImplemented "Instruction ORN not yet implemented."
	1112 And W22, W8, 1
	1113 Call 0x1C17F20
	1114 Call 0x1C17F20
	1115 Move X0, 0x928000
	1116 Move X0, [X0+1456]
	1117 Call 0x1C17D08
	1118 Call 0x1C17F10
	1119 Move X19, X0
	1120 Move X0, 0x97D000
	1121 Move X0, [X0+1896]
	1122 Call 0x1C17D08
	1123 Move X1, X0
	1124 Move X0, X19
	1125 Move X2, X31
	1126 Call InvalidOperationException..ctor, X0, X1
	1127 Move X0, 0x97D000
	1128 Move X0, [X0+1792]
	1129 Call 0x1C17D08
	1130 Move X1, X0
	1131 Move X0, X19
	1132 Call 0x1C17DEC
	1133 Call 0x1C17F20
	1134 Move X0, X26
	1135 Move X1, X22
	1136 Call 0x1C181E0
	1137 Move X0, X26
	1138 Move X1, X22
	1139 Call 0x1C181E0
	1140 Call 0x1C17F20
	1141 Move X0, X26
	1142 Move X1, X22
	1143 Call 0x1C181E0
	1144 Move X0, X26
	1145 Move X1, X22
	1146 Call 0x1C181E0
	1147 Call 0x1C17F20
	1148 Move X0, X26
	1149 Move X1, X25
	1150 Call 0x1C181E0
	1151 Move X0, X26
	1152 Move X1, X22
	1153 Call 0x1C181E0
	1154 Call 0x3EB2B20
	1155 Call 0x1C17F20
	1156 Call 0x1C17F20
	1157 Call 0x1C17F20
	1158 Move X23, X0
	1159 NotImplemented "Instruction CMP not yet implemented."
	1160 Move X0, X23
	1161 Call 0x3EB2AD0
	1162 Move X22, [X0]
	1163 Call 0x3EB2AE0
	1164 Move X1, [X24]
	1165 Add X0, X31, 240
	1166 Call Enumerator<Object>.Dispose, X0
	1167 Compare X22, 0
	1168 JumpIfEqual {195}
	1169 Move X0, X22
	1170 Call 0x1C17F18
	1171 Move X22, X31
	1172 Move X23, X0
	1173 Move X1, [X24]
	1174 Add X0, X31, 240
	1175 Call Enumerator<Object>.Dispose, X0
	1176 Compare X22, 0
	1177 JumpIfEqual {1212}
	1178 Move X0, X22
	1179 Call 0x1C17F18
	1180 Move X23, X0
	1181 NotImplemented "Instruction CMP not yet implemented."
	1182 Move X0, X23
	1183 Call 0x3EB2AD0
	1184 Move X20, X0
	1185 Move X0, 0x928000
	1186 Move X0, [X0+2000]
	1187 Call 0x1C17D08
	1188 Move X8, [X20]
	1189 Move X1, [X8]
	1190 Call 0x1C18270
	1191 Move TEMP, X0
	1192 And TEMP, TEMP, 1
	1193 Compare TEMP, 1
	1194 JumpIfNotEqual {1202}
	1195 Move X20, [X20]
	1196 Call 0x3EB2AE0
	1197 Move X0, X19
	1198 Move X1, X31
	1199 Call InputEventStream.CleanUpAfterException, X0
	1200 Move X0, X20
	1201 Call 0x1C17F18
	1202 Move W0, 8
	1203 Call 0x3EB2AF0
	1204 Move X8, [X20]
	1205 Move [X0], X8
	1206 Move X1, 0x6E9000
	1207 Add X1, X1, 3672
	1208 Move X2, X31
	1209 Call 0x3EB2B00
	1210 Move X23, X0
	1211 Call 0x3EB2AE0
	1212 Move X0, X23
	1213 Call 0x1D2D690
	1214 Call 0x1991590

Method: System.Void InvokeAfterUpdateCallback(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x037CC674 CMP X11, X1
	0x037CC678 B.EQ 0x37CC6F4
	0x037CC67C LDUR X12, [X10 - 0x8]
	0x037CC680 CMP X12, X8
	0x037CC684 B.NE 0x37CC694
	0x037CC688 LDR X12, [X10]
	0x037CC68C CMP X12, X2
	0x037CC690 B.EQ 0x37CC6AC
	0x037CC694 ADD X1, X1, 0x1
	0x037CC698 CMP X1, X9
	0x037CC69C ADD X10, X10, 0x20
	0x037CC6A0 B.LT 0x37CC674
	0x037CC6A4 LDP X30, X19, [X31], #0x10
	0x037CC6A8 RET
	0x037CC6AC TBZ X3, 0x0, 0x37CC6E8
	0x037CC6B0 MOVI V0.2D, 0x0
	0x037CC6B4 STP V0, V0, [X10 - 0x10]
	0x037CC6B8 LDR X8, [X19]
	0x037CC6BC CBZ X8, 0x37CC6F8
	0x037CC6C0 LDR W9, [X8 + 0x18]
	0x037CC6C4 CMP W1, W9
	0x037CC6C8 B.CS 0x37CC6F4
	0x037CC6CC ADD X8, X8, X1, 0x3, LSL
	0x037CC6D0 MOV X2, X31
	0x037CC6D4 STR X31, [X8 + 0x20]
	0x037CC6D8 BL 0x37DA9E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC16000
	006 Move W8, [X21+514]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x97D000
	014 Move X0, [X0+1920]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+514], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Return 
	024 Move X8, 0x97D000
	025 Move X8, [X8+1920]
	026 Add X0, X19, 784
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X2, X31
	030 Move X1, [X8]
	031 Move X3, X31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2
	035 Return 

Method: System.Void DontMakeCurrentlyUpdatingDeviceCurrent()

Disassembly:
	0x037CC84C BL 0x2DF4D8C
	0x037CC850 LDR W8, [X31 + 0x20]

ISIL:
	001 Move [X0+1160], W31
	002 Return 

Method: System.Boolean UpdateState(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x037CC6DC MOVZ W8, 0x1
	0x037CC6E0 STRB W8, [X19 + 0x31]
	0x037CC6E4 B 0x37CC6A4
	0x037CC6E8 MOV X0, X19
	0x037CC6EC LDP X30, X19, [X31], #0x10
	0x037CC6F0 B 0x37CCC9C
	0x037CC6F4 BL 0x1C16F28
	0x037CC6F8 BL 0x1C16F20
	0x037CC6FC SUB X31, X31, 0x80
	0x037CC700 STR D8, [X31 + 0x30]
	0x037CC704 STP X30, X25, [X31 + 0x40]
	0x037CC708 STP X24, X23, [X31 + 0x50]
	0x037CC70C STP X22, X21, [X31 + 0x60]
	0x037CC710 STP X20, X19, [X31 + 0x70]
	0x037CC714 ADRP X25, 0xC15000
	0x037CC718 ADRP X24, 0x97C000
	0x037CC71C LDRB W8, [X25 + 0x20A]
	0x037CC720 LDR X24, [X24 + 0x7C8]
	0x037CC724 MOV W19, W4
	0x037CC728 MOV X20, X3
	0x037CC72C MOV V8.16B, V0.16B
	0x037CC730 MOV X21, X2
	0x037CC734 MOV X22, X1
	0x037CC738 MOV X23, X0
	0x037CC73C TBNZ X8, 0x0, 0x37CC754
	0x037CC740 ADRP X0, 0x97C000
	0x037CC744 LDR X0, [X0 + 0x7C8]
	0x037CC748 BL 0x1C16CF4
	0x037CC74C MOVZ W8, 0x1
	0x037CC750 STRB W8, [X25 + 0x20A]
	0x037CC754 LDR X2, [X24]
	0x037CC758 ADD X0, X23, 0x498
	0x037CC75C ADD X1, X31, 0x8
	0x037CC760 STR X22, [X31 + 0x8]
	0x037CC764 STR D8, [X31 + 0x10]
	0x037CC768 STP X21, X20, [X31 + 0x18]
	0x037CC76C STP W19, W31, [X31 + 0x28]
	0x037CC770 BL 0x2DF5334
	0x037CC774 LDP X20, X19, [X31 + 0x70]
	0x037CC778 LDP X22, X21, [X31 + 0x60]
	0x037CC77C LDP X24, X23, [X31 + 0x50]
	0x037CC780 LDP X30, X25, [X31 + 0x40]
	0x037CC784 LDR V8, [X31 + 0x30]
	0x037CC788 ADD X31, X31, 0x80
	0x037CC78C RET
	0x037CC790 SUB X31, X31, 0x70
	0x037CC794 STP X30, X25, [X31 + 0x30]
	0x037CC798 STP X24, X23, [X31 + 0x40]
	0x037CC79C STP X22, X21, [X31 + 0x50]
	0x037CC7A0 STP X20, X19, [X31 + 0x60]
	0x037CC7A4 ADRP X22, 0xC15000
	0x037CC7A8 LDRB W8, [X22 + 0x20B]
	0x037CC7AC MOV W19, W3
	0x037CC7B0 MOV X20, X2
	0x037CC7B4 MOV X21, X1
	0x037CC7B8 MOV X23, X0
	0x037CC7BC TBNZ X8, 0x0, 0x37CC7E0
	0x037CC7C0 ADRP X0, 0x97C000
	0x037CC7C4 LDR X0, [X0 + 0x2B8]
	0x037CC7C8 BL 0x1C16CF4
	0x037CC7CC ADRP X0, 0x97C000
	0x037CC7D0 LDR X0, [X0 + 0x2C0]
	0x037CC7D4 BL 0x1C16CF4
	0x037CC7D8 MOVZ W8, 0x1
	0x037CC7DC STRB W8, [X22 + 0x20B]
	0x037CC7E0 LDR W24, [X23 + 0x498]
	0x037CC7E4 CMP W24, 0x1
	0x037CC7E8 B.LT 0x37CC868
	0x037CC7EC ADRP X25, 0x97C000
	0x037CC7F0 LDR X25, [X25 + 0x2B8]
	0x037CC7F4 MOV W22, W31
	0x037CC7F8 ADD X23, X23, 0x498
	0x037CC7FC LDR X2, [X25]
	0x037CC800 ADD X8, X31, 0x0
	0x037CC804 MOV X0, X23
	0x037CC808 MOV W1, W22
	0x037CC80C BL 0x2DF4D8C
	0x037CC810 LDR X8, [X31 + 0x10]
	0x037CC814 CMP X8, X21
	0x037CC818 B.NE 0x37CC85C
	0x037CC81C LDR X2, [X25]
	0x037CC820 ADD X8, X31, 0x0
	0x037CC824 MOV X0, X23
	0x037CC828 MOV W1, W22
	0x037CC82C BL 0x2DF4D8C
	0x037CC830 LDR X8, [X31 + 0x18]
	0x037CC834 CMP X8, X20
	0x037CC838 B.NE 0x37CC85C
	0x037CC83C LDR X2, [X25]
	0x037CC840 ADD X8, X31, 0x0
	0x037CC844 MOV X0, X23
	0x037CC848 MOV W1, W22

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0xC16000
	012 Move W8, [X23+515]
	013 Move W19, W3
	014 Move X22, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x950000
	022 Move X0, [X0+3352]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+515], W8
	026 Compare X20, 0
	027 JumpIfEqual {109}
	028 Move X8, 0x950000
	029 Move X8, [X8+3352]
	030 Move W23, [X20+28]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X22
	037 Move X1, X31
	038 Move W26, W23
	039 ShiftRight W26, 3
	040 And W26, W26, 0x7FFFFFFF
	041 Call InputEvent.get_type, X0
	042 Move W8, 0x4154
	043 NotImplemented "Instruction MOVK not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X22
	046 Move X1, X31
	047 Call StateEvent.get_stateSizeInBytes, X0
	048 Move W23, W0
	049 Move X0, X22
	050 Move X1, X31
	051 Call StateEvent.get_state, X0
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X24, X0
	054 Move W25, W31
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 Move X0, X22
	057 Move X1, X31
	058 Call DeltaStateEvent.get_deltaStateSizeInBytes, X0
	059 Move W23, W0
	060 Move X0, X22
	061 Move X1, X31
	062 Call DeltaStateEvent.get_deltaState, X0
	063 Compare X22, 0
	064 JumpIfEqual {109}
	065 Move W25, [X22+24]
	066 Move X24, X0
	067 Add W8, W25, W23
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Subtract W23, W26, W25
	070 Move X0, X22
	071 Move X1, X31
	072 Call InputEvent.get_internalTime, X0
	073 Move X0, X22
	074 Move X1, X31
	075 Move V8, V0
	076 Call InputEventPtr.op_Implicit, X0
	077 Move X6, X0
	078 Move X0, X21
	079 Move X1, X20
	080 Move W2, W19
	081 Move X3, X24
	082 Move W4, W25
	083 Move W5, W23
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X22, [X31+48]
	087 Move X21, [X31+56]
	088 Move X24, [X31+32]
	089 Move X23, [X31+40]
	090 Move X26, [X31+16]
	091 Move X25, [X31+24]
	092 Move X30, [X31+8]
	093 Move V0, V8
	094 Move V8, [X31+80]
	095 Call InputManager.UpdateState, X0, X1, X2, X3, X4, X5, V0, X6
	096 Return X0
	097 Move X20, [X31+64]
	098 Move X19, [X31+72]
	099 Move X22, [X31+48]
	100 Move X21, [X31+56]
	101 Move X24, [X31+32]
	102 Move X23, [X31+40]
	103 Move X26, [X31+16]
	104 Move X25, [X31+24]
	105 Move X30, [X31+8]
	106 Move W0, W31
	107 Move V8, [X31+80]
	108 Return X0
	109 Call 0x1C17F20

Method: System.Boolean UpdateState(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType, System.Void* statePtr, System.UInt32 stateOffsetInDevice, System.UInt32 stateSize, System.Double internalTime, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr = null)

Disassembly:
	0x037C7A44 MOV X0, X19
	0x037C7A48 LDR X1, [X8]
	0x037C7A4C BL 0x37C2744
	0x037C7A50 LDR X0, [X23]
	0x037C7A54 MOV X1, X31
	0x037C7A58 BL 0x338C698
	0x037C7A5C ADRP X8, 0x980000
	0x037C7A60 LDR X8, [X8 + 0x808]
	0x037C7A64 MOV X2, X0
	0x037C7A68 MOV X0, X19
	0x037C7A6C LDR X1, [X8]
	0x037C7A70 BL 0x37C2744
	0x037C7A74 LDR X0, [X23]
	0x037C7A78 MOV X1, X31
	0x037C7A7C BL 0x338C698
	0x037C7A80 ADRP X8, 0x980000
	0x037C7A84 LDR X8, [X8 + 0x7D8]
	0x037C7A88 MOV X2, X0
	0x037C7A8C MOV X0, X19
	0x037C7A90 LDR X1, [X8]
	0x037C7A94 BL 0x37C2744
	0x037C7A98 ADRP X8, 0x981000
	0x037C7A9C LDR X8, [X8 + 0x3C8]
	0x037C7AA0 MOV X1, X31
	0x037C7AA4 LDR X0, [X8]
	0x037C7AA8 BL 0x338C698
	0x037C7AAC ADRP X8, 0x95E000
	0x037C7AB0 LDR X8, [X8 + 0xF0]
	0x037C7AB4 MOV X2, X0
	0x037C7AB8 MOV X0, X19
	0x037C7ABC LDR X1, [X8]
	0x037C7AC0 BL 0x37C2744
	0x037C7AC4 ADRP X8, 0x981000
	0x037C7AC8 LDR X8, [X8 + 0x548]
	0x037C7ACC MOV X1, X31
	0x037C7AD0 LDR X0, [X8]
	0x037C7AD4 BL 0x338C698
	0x037C7AD8 ADRP X8, 0x980000
	0x037C7ADC LDR X8, [X8 + 0x800]
	0x037C7AE0 MOV X2, X0
	0x037C7AE4 MOV X0, X19
	0x037C7AE8 LDR X1, [X8]
	0x037C7AEC BL 0x37C2744
	0x037C7AF0 ADRP X8, 0x981000
	0x037C7AF4 LDR X8, [X8 + 0x558]
	0x037C7AF8 MOV X1, X31
	0x037C7AFC LDR X0, [X8]
	0x037C7B00 BL 0x338C698
	0x037C7B04 ADRP X8, 0x981000
	0x037C7B08 LDR X8, [X8 + 0x688]
	0x037C7B0C MOV X2, X0
	0x037C7B10 MOV X0, X19
	0x037C7B14 LDR X1, [X8]
	0x037C7B18 BL 0x37C2744
	0x037C7B1C ADRP X8, 0x981000
	0x037C7B20 LDR X8, [X8 + 0x3B8]
	0x037C7B24 MOV X1, X31
	0x037C7B28 LDR X0, [X8]
	0x037C7B2C BL 0x338C698
	0x037C7B30 ADRP X8, 0x980000
	0x037C7B34 LDR X8, [X8 + 0x7F8]
	0x037C7B38 MOV X2, X0
	0x037C7B3C MOV X0, X19
	0x037C7B40 LDR X1, [X8]
	0x037C7B44 BL 0x37C2744
	0x037C7B48 ADRP X8, 0x981000
	0x037C7B4C LDR X8, [X8 + 0x4C0]
	0x037C7B50 MOV X1, X31
	0x037C7B54 LDR X0, [X8]
	0x037C7B58 BL 0x338C698
	0x037C7B5C ADRP X8, 0x981000
	0x037C7B60 LDR X8, [X8 + 0x598]
	0x037C7B64 MOV X2, X0
	0x037C7B68 MOV X0, X19
	0x037C7B6C LDR X1, [X8]
	0x037C7B70 BL 0x37C2744
	0x037C7B74 ADRP X8, 0x981000
	0x037C7B78 LDR X8, [X8 + 0x4F8]
	0x037C7B7C MOV X1, X31
	0x037C7B80 LDR X0, [X8]
	0x037C7B84 BL 0x338C698
	0x037C7B88 ADRP X8, 0x981000
	0x037C7B8C LDR X8, [X8 + 0x5E0]
	0x037C7B90 MOV X2, X0
	0x037C7B94 MOV X0, X19
	0x037C7B98 LDR X1, [X8]
	0x037C7B9C BL 0x37C2744
	0x037C7BA0 ADRP X8, 0x981000
	0x037C7BA4 LDR X8, [X8 + 0x3D8]
	0x037C7BA8 MOV X1, X31
	0x037C7BAC LDR X0, [X8]
	0x037C7BB0 BL 0x338C698
	0x037C7BB4 ADRP X21, 0x981000
	0x037C7BB8 LDR X21, [X21 + 0x6C8]
	0x037C7BBC MOV X2, X0
	0x037C7BC0 MOV X0, X19
	0x037C7BC4 LDR X1, [X21]
	0x037C7BC8 BL 0x37C2744
	0x037C7BCC ADRP X8, 0x981000
	0x037C7BD0 LDR X8, [X8 + 0x3D0]
	0x037C7BD4 MOV X1, X31
	0x037C7BD8 LDR X0, [X8]
	0x037C7BDC BL 0x338C698
	0x037C7BE0 ADRP X8, 0x981000
	0x037C7BE4 LDR X8, [X8 + 0x638]
	0x037C7BE8 MOV X2, X0
	0x037C7BEC MOV X0, X19
	0x037C7BF0 LDR X1, [X8]
	0x037C7BF4 BL 0x37C2744
	0x037C7BF8 ADRP X8, 0x981000
	0x037C7BFC LDR X8, [X8 + 0x360]
	0x037C7C00 MOV X1, X31
	0x037C7C04 LDR X0, [X8]
	0x037C7C08 BL 0x338C698
	0x037C7C0C ADRP X8, 0x980000
	0x037C7C10 LDR X8, [X8 + 0x4A0]
	0x037C7C14 MOV X2, X0
	0x037C7C18 MOV X0, X19
	0x037C7C1C LDR X1, [X8]
	0x037C7C20 BL 0x37C2744
	0x037C7C24 ADRP X8, 0x981000
	0x037C7C28 LDR X8, [X8 + 0x510]
	0x037C7C2C MOV X1, X31
	0x037C7C30 LDR X0, [X8]
	0x037C7C34 BL 0x338C698
	0x037C7C38 ADRP X8, 0x980000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D8
	003 Move [X31+32], X29
	004 Move [X31+40], X30
	005 Move [X31+48], X28
	006 Move [X31+56], X27
	007 Move [X31+64], X26
	008 Move [X31+72], X25
	009 Move [X31+80], X24
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X25, 0xC1B000
	016 Move W8, [X25+516]
	017 Move X19, X6
	018 Move V8, V0
	019 Move W22, W5
	020 Move W24, W4
	021 Move X23, X3
	022 Move W26, W2
	023 Move X21, X1
	024 Move X20, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {43}
	029 Move X0, 0x982000
	030 Move X0, [X0+752]
	031 Call 0x1C17CF4
	032 Move X0, 0x955000
	033 Move X0, [X0+3352]
	034 Call 0x1C17CF4
	035 Move X0, 0x958000
	036 Move X0, [X0+4072]
	037 Call 0x1C17CF4
	038 Move X0, 0x982000
	039 Move X0, [X0+760]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X25+516], W8
	043 Move [X31+24], X19
	044 Compare X21, 0
	045 JumpIfEqual {151}
	046 Move W25, [X21+232]
	047 Move X19, 0x955000
	048 Move X19, [X19+3352]
	049 Move X1, X31
	050 Move W0, W25
	051 Add X27, X21, 16
	052 Call InputStateBuffers.GetFrontBufferForDevice, X0
	053 Move X29, X0
	054 Move X0, X20
	055 Move W1, W25
	056 Call InputManager.SortStateChangeMonitorsIfNecessary, X0, X1
	057 Move X0, [X19]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move W8, [X21+20]
	063 Move X0, X20
	064 Move W1, W25
	065 Move X2, X23
	066 Add X3, X8, X29
	067 Move W4, W22
	068 Move W5, W24
	069 Call InputManager.ProcessStateChangeMonitors, X0, X1, X2, X3, X4, X5
	070 Move W8, [X21+20]
	071 Move W28, W0
	072 Move X0, X21
	073 Move X1, X31
	074 Add W19, W8, W24
	075 Call InputControl.get_noisy, X0
	076 Move W8, W0
	077 Move X4, X31
	078 Add X0, X19, X29
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {89}
	083 Move X8, 0x958000
	084 Move X8, [X8+4072]
	085 Move X8, [X8]
	086 Move X8, [X8+184]
	087 Move X8, [X8+8]
	088 Add X4, X8, X19
	089 Move W3, W22
	090 ShiftRight W3, 29
	091 And W3, W3, 0xFFFFFFF
	092 Move X1, X23
	093 Move W2, W31
	094 Move X5, X31
	095 Call MemoryHelpers.MemCmpBitRegion, X0, X1, X2, X3, X4
	096 Move W29, W0
	097 Move X0, X20
	098 Move X1, X21
	099 Move W2, W26
	100 Call InputManager.FlipBuffersForDeviceIfNecessary, X0, X1, X2
	101 Move X1, [X20+216]
	102 And W7, W0, 1
	103 Move X0, X20
	104 Move W2, W25
	105 Move X3, X27
	106 Move W4, W24
	107 Move X5, X23
	108 Move W6, W22
	109 Call InputManager.WriteStateChange, X0, X1, X2, X3, X4, X5, X6, X7
	110 Move X8, 0x982000
	111 Move X8, [X8+760]
	112 Add X0, X20, 304
	113 Move X1, X21
	114 Move X4, X31
	115 Move X3, [X8]
	116 Move X8, 0x982000
	117 Move X8, [X8+752]
	118 Move X19, [X31+24]
	119 Move X5, [X8]
	120 Move X2, X19
	121 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3, X4
	122 Move TEMP, X28
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {134}
	126 Move X0, X19
	127 Move X1, X31
	128 Call InputEventPtr.op_Implicit, X0
	129 Move X2, X0
	130 Move X0, X20
	131 Move W1, W25
	132 Move V0, V8
	133 Call InputManager.FireStateChangeNotifications, X0, X1, V0, X2
	134 NotImplemented "Instruction ORN not yet implemented."
	135 Move X20, [X31+112]
	136 Move X19, [X31+120]
	137 Move X22, [X31+96]
	138 Move X21, [X31+104]
	139 Move X24, [X31+80]
	140 Move X23, [X31+88]
	141 Move X26, [X31+64]
	142 Move X25, [X31+72]
	143 Move X28, [X31+48]
	144 Move X27, [X31+56]
	145 Move X29, [X31+32]
	146 Move X30, [X31+40]
	147 Move V8, [X31+16]
	148 And W0, W8, 1
	149 Add X31, X31, 128
	150 Return X0
	151 Call 0x1C17F20

Method: System.Void WriteStateChange(UnityEngine.InputSystem.LowLevel.InputStateBuffers/DoubleBuffers buffers, System.Int32 deviceIndex, ref UnityEngine.InputSystem.LowLevel.InputStateBlock deviceStateBlock, System.UInt32 stateOffsetInDevice, System.Void* statePtr, System.UInt32 stateSizeInBytes, System.Boolean flippedBuffers)

Disassembly:
	0x037CCBA8 MOV V8.16B, V0.16B
	0x037CCBAC BL 0x217B288
	0x037CCBB0 LDR X8, [X21]
	0x037CCBB4 LDR W20, [X19 + 0x70]
	0x037CCBB8 MOV W21, W0
	0x037CCBBC LDR W9, [X8 + 0xE0]
	0x037CCBC0 CBNZ W9, 0x37CCBCC
	0x037CCBC4 MOV X0, X8
	0x037CCBC8 BL 0x1C16DFC
	0x037CCBCC MOV W0, W21
	0x037CCBD0 MOV W1, W20
	0x037CCBD4 MOV X2, X31
	0x037CCBD8 BL 0x337EE94
	0x037CCBDC CMP W0, 0x1
	0x037CCBE0 B.LT 0x37CCC0C
	0x037CCBE4 MOV W20, W0
	0x037CCBE8 MOV W21, W31
	0x037CCBEC MOV X0, X19
	0x037CCBF0 MOV W1, W21
	0x037CCBF4 MOV V0.16B, V8.16B
	0x037CCBF8 MOV X2, X31
	0x037CCBFC BL 0x37CBD9C
	0x037CCC00 ADD W21, W21, 0x1
	0x037CCC04 CMP W20, W21
	0x037CCC08 B.NE 0x37CCBEC
	0x037CCC0C LDP X20, X19, [X31 + 0x20]
	0x037CCC10 LDP X22, X21, [X31 + 0x10]
	0x037CCC14 LDR X30, [X31 + 0x8]
	0x037CCC18 LDR V8, [X31], #0x30
	0x037CCC1C RET
	0x037CCC20 BL 0x1C16F20
	0x037CCC24 LDR W0, [X0 + 0x28]
	0x037CCC28 RET
	0x037CCC2C MOV X1, X31
	0x037CCC30 B 0x33BDD8C
	0x037CCC34 STP X30, X21, [X31 - 0x20]!
	0x037CCC38 STP X20, X19, [X31 + 0x10]
	0x037CCC3C ADRP X21, 0xC15000
	0x037CCC40 LDRB W8, [X21 + 0x210]
	0x037CCC44 MOV X19, X1
	0x037CCC48 MOV X20, X0
	0x037CCC4C TBNZ X8, 0x0, 0x37CCC64
	0x037CCC50 ADRP X0, 0x97C000
	0x037CCC54 LDR X0, [X0 + 0x7E0]
	0x037CCC58 BL 0x1C16CF4
	0x037CCC5C MOVZ W8, 0x1
	0x037CCC60 STRB W8, [X21 + 0x210]
	0x037CCC64 LDR W1, [X20 + 0x438]
	0x037CCC68 CBZ W1, 0x37CCC8C
	0x037CCC6C ADRP X8, 0x97C000
	0x037CCC70 LDR X8, [X8 + 0x7E0]
	0x037CCC74 LDR X0, [X20 + 0x440]
	0x037CCC78 MOV X2, X19
	0x037CCC7C LDP X20, X19, [X31 + 0x10]
	0x037CCC80 LDR X3, [X8]
	0x037CCC84 LDP X30, X21, [X31], #0x20
	0x037CCC88 B 0x2208F68
	0x037CCC8C LDP X20, X19, [X31 + 0x10]
	0x037CCC90 MOVN X0, 0x0
	0x037CCC94 LDP X30, X21, [X31], #0x20
	0x037CCC98 RET
	0x037CCC9C SUB X31, X31, 0x40
	0x037CCCA0 STP X30, X23, [X31 + 0x10]
	0x037CCCA4 STP X22, X21, [X31 + 0x20]
	0x037CCCA8 STP X20, X19, [X31 + 0x30]
	0x037CCCAC ADRP X23, 0xC15000
	0x037CCCB0 ADRP X21, 0x97C000
	0x037CCCB4 ADRP X22, 0x97C000
	0x037CCCB8 LDRB W8, [X23 + 0x213]
	0x037CCCBC LDR X21, [X21 + 0x790]
	0x037CCCC0 LDR X22, [X22 + 0x788]
	0x037CCCC4 MOV W20, W1
	0x037CCCC8 MOV X19, X0
	0x037CCCCC TBNZ X8, 0x0, 0x37CCCF0
	0x037CCCD0 ADRP X0, 0x97C000
	0x037CCCD4 LDR X0, [X0 + 0x788]
	0x037CCCD8 BL 0x1C16CF4
	0x037CCCDC ADRP X0, 0x97C000
	0x037CCCE0 LDR X0, [X0 + 0x790]
	0x037CCCE4 BL 0x1C16CF4
	0x037CCCE8 MOVZ W8, 0x1
	0x037CCCEC STRB W8, [X23 + 0x213]
	0x037CCCF0 LDR W8, [X19 + 0x28]
	0x037CCCF4 LDR X3, [X21]
	0x037CCCF8 ADD X1, X31, 0xC
	0x037CCCFC MOV W2, W20
	0x037CCD00 STP W8, W8, [X31 + 0x8]
	0x037CCD04 LDR X0, [X19 + 0x8]
	0x037CCD08 ADD X21, X19, 0x10
	0x037CCD0C BL 0x21784F4
	0x037CCD10 LDR X0, [X19]
	0x037CCD14 LDR X3, [X22]
	0x037CCD18 ADD X1, X31, 0x8
	0x037CCD1C MOV W2, W20
	0x037CCD20 BL 0x2178850
	0x037CCD24 LDR W8, [X19 + 0x28]
	0x037CCD28 MOV X0, X21
	0x037CCD2C MOV X2, X31
	0x037CCD30 SUB W1, W8, 0x1
	0x037CCD34 BL 0x37DA854
	0x037CCD38 LDP X20, X19, [X31 + 0x30]
	0x037CCD3C LDP X22, X21, [X31 + 0x20]
	0x037CCD40 LDP X30, X23, [X31 + 0x10]
	0x037CCD44 ADD X31, X31, 0x40
	0x037CCD48 RET
	0x037CCD4C STR X30, [X31 - 0x20]!
	0x037CCD50 STP X20, X19, [X31 + 0x10]
	0x037CCD54 ADRP X19, 0xC15000
	0x037CCD58 ADRP X20, 0x97C000
	0x037CCD5C LDRB W8, [X19 + 0x215]
	0x037CCD60 LDR X20, [X20 + 0x288]
	0x037CCD64 TBNZ X8, 0x0, 0x37CCD7C
	0x037CCD68 ADRP X0, 0x97C000
	0x037CCD6C LDR X0, [X0 + 0x288]
	0x037CCD70 BL 0x1C16CF4
	0x037CCD74 MOVZ W8, 0x1
	0x037CCD78 STRB W8, [X19 + 0x215]
	0x037CCD7C LDR X0, [X20]
	0x037CCD80 BL 0x1C16F10
	0x037CCD84 MOV X1, X31
	0x037CCD88 MOV X19, X0
	0x037CCD8C BL 0x33BDD8C
	0x037CCD90 LDR X8, [X20]
	0x037CCD94 LDR X8, [X8 + 0xB8]
	0x037CCD98 STR X19, [X8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0xC16000
	015 Move [X31+8], X1
	016 Move X29, 0x950000
	017 Move W8, [X23+517]
	018 Move X29, [X29+3352]
	019 Move W26, W7
	020 Move W20, W6
	021 Move X19, X5
	022 Move W25, W4
	023 Move X22, X3
	024 Move W24, W2
	025 Move X28, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0x953000
	031 Move X0, [X0+4064]
	032 Call 0x1C17CF4
	033 Move X0, 0x950000
	034 Move X0, [X0+3352]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X23+517], W8
	038 Add X0, X31, 8
	039 Move W1, W24
	040 Move X2, X31
	041 Call DoubleBuffers.GetFrontBuffer, X0, X1
	042 Move X8, [X29]
	043 Move X23, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move W8, [X22+12]
	050 Move X27, X8
	051 ShiftRight X27, 3
	052 And X27, X27, 0x7FFFFFFF
	053 Move X8, 0x953000
	054 Move X8, [X8+4064]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move TEMP, X26
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {85}
	060 Add X0, X31, 8
	061 Move W1, W24
	062 Move X2, X31
	063 Move X21, X19
	064 Move X19, X28
	065 Call DoubleBuffers.GetBackBuffer, X0, X1
	066 Move X8, [X29]
	067 Move X28, X0
	068 Move W9, [X8+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {73}
	071 Move X0, X8
	072 Call 0x1C17DFC
	073 Move W8, [X22+4]
	074 Move X2, X27
	075 Move X3, X31
	076 Add X0, X8, X23
	077 Add X1, X8, X28
	078 Call UnsafeUtility.MemCpy, X0, X1, X2
	079 Move X29, 0x950000
	080 Move X8, 0x953000
	081 Move X29, [X29+3352]
	082 Move X8, [X8+4064]
	083 Move X28, X19
	084 Move X19, X21
	085 Move X8, [X8]
	086 Move X8, [X8+184]
	087 Move W8, [X8+1]
	088 Compare W8, 0
	089 JumpIfEqual {124}
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X27, X23
	092 Move TEMP, X26
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {102}
	096 Add X0, X31, 8
	097 Move W1, W24
	098 Move X2, X31
	099 Call DoubleBuffers.GetBackBuffer, X0, X1
	100 Move X27, X0
	101 Move X27, X23
	102 Move X8, [X28+120]
	103 Compare X8, 0
	104 JumpIfEqual {150}
	105 Move W9, [X8+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X0, [X29]
	108 Add X8, X8, W24
	109 Move X24, [X8+32]
	110 Move W9, [X0+224]
	111 Compare W9, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Compare X24, 0
	115 JumpIfEqual {150}
	116 Move W8, [X22+4]
	117 Move X0, X24
	118 Move X2, X19
	119 Move W3, W20
	120 Add X1, X8, X27
	121 Move W4, W25
	122 Move X5, X31
	123 Call InputDevice.WriteChangedControlStates, X0, X1, X2, X3, X4
	124 Move X0, [X29]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move W8, [X22+4]
	130 Add X9, X23, W25
	131 Move W2, W20
	132 Move X1, X19
	133 Add X0, X9, X8
	134 Move X3, X31
	135 Call UnsafeUtility.MemCpy, X0, X1, X2
	136 Move X20, [X31+96]
	137 Move X19, [X31+104]
	138 Move X22, [X31+80]
	139 Move X21, [X31+88]
	140 Move X24, [X31+64]
	141 Move X23, [X31+72]
	142 Move X26, [X31+48]
	143 Move X25, [X31+56]
	144 Move X28, [X31+32]
	145 Move X27, [X31+40]
	146 Move X29, [X31+16]
	147 Move X30, [X31+24]
	148 Add X31, X31, 112
	149 Return 
	150 Call 0x1C17F20
	151 Call 0x1C17F28

Method: System.Boolean FlipBuffersForDeviceIfNecessary(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x037CCB04 ADRP X0, 0x94F000
	0x037CCB08 LDR X0, [X0 + 0xED0]
	0x037CCB0C BL 0x1C16CF4
	0x037CCB10 ADRP X0, 0x927000
	0x037CCB14 LDR X0, [X0 + 0x5A8]
	0x037CCB18 BL 0x1C16CF4
	0x037CCB1C MOVZ W8, 0x1
	0x037CCB20 STRB W8, [X20 + 0x20C]
	0x037CCB24 LDR X20, [X19 + 0x440]
	0x037CCB28 CBZ X20, 0x37CCC20
	0x037CCB2C ADRP X10, 0x94F000
	0x037CCB30 LDR X8, [X20]
	0x037CCB34 LDR X10, [X10 + 0xED0]
	0x037CCB38 ADRP X22, 0x97B000
	0x037CCB3C ADRP X21, 0x927000
	0x037CCB40 LDRH W9, [X8 + 0x12E]
	0x037CCB44 LDR X1, [X10]
	0x037CCB48 LDR X22, [X22 + 0xD20]
	0x037CCB4C LDR X21, [X21 + 0x5A8]
	0x037CCB50 CBZ X9, 0x37CCB74
	0x037CCB54 LDR X10, [X8 + 0xB0]
	0x037CCB58 ADD X10, X10, 0x8
	0x037CCB5C LDUR X11, [X10 - 0x8]
	0x037CCB60 CMP X11, X1
	0x037CCB64 B.EQ 0x37CCB84
	0x037CCB68 SUBS X9, X9, 0x1
	0x037CCB6C ADD X10, X10, 0x10
	0x037CCB70 B.NE 0x37CCB5C
	0x037CCB74 MOVZ W2, 0x13
	0x037CCB78 MOV X0, X20
	0x037CCB7C BL 0x1C5C788
	0x037CCB80 B 0x37CCB94
	0x037CCB84 LDR W9, [X10]
	0x037CCB88 ADD W9, W9, 0x13
	0x037CCB8C ADD X8, X8, W9, 0x4, SXTW
	0x037CCB90 ADD X0, X8, 0x138
	0x037CCB94 LDP X8, X1, [X0]
	0x037CCB98 MOV X0, X20
	0x037CCB9C BLR X8
	0x037CCBA0 LDR X0, [X19 + 0x490]
	0x037CCBA4 LDR X1, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC16000
	007 Move W8, [X22+518]
	008 Move W21, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x979000
	016 Move X0, [X0+3984]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+518], W8
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Compare X19, 0
	022 JumpIfEqual {46}
	023 Move X21, 0x979000
	024 Move X21, [X21+3984]
	025 Move W9, [X19+304]
	026 Move X8, [X21]
	027 Move X8, [X8+184]
	028 Move W8, [X8]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W0, W31
	031 Move W1, [X19+232]
	032 Add X0, X20, 216
	033 Move X2, X31
	034 Call DoubleBuffers.SwapBuffers, X0, X1
	035 Move X8, [X21]
	036 Move W0, 1
	037 Move X8, [X8+184]
	038 Move W8, [X8]
	039 Move [X19+304], W8
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return X0
	046 Call 0x1C17F20

Method: System.Void AddStateChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.UInt32 groupIndex)

Disassembly:
	0x037CD1B4 STR W8, [X19 + 0x10]
	0x037CD1B8 ADRP X23, 0x979000
	0x037CD1BC LDR X23, [X23 + 0x6A0]
	0x037CD1C0 ADD X20, X22, 0x18
	0x037CD1C4 LDR X1, [X23]
	0x037CD1C8 ADD X0, X19, 0x50
	0x037CD1CC BL 0x2C01CA0
	0x037CD1D0 MOV W8, W0
	0x037CD1D4 LDR X0, [X31 + 0x88]
	0x037CD1D8 TBZ X8, 0x0, 0x37CD208
	0x037CD1DC CBZ X22, 0x37CD3FC
	0x037CD1E0 LDP X21, X19, [X0 + 0x60]
	0x037CD1E4 LDP X1, X2, [X0 + 0x40]
	0x037CD1E8 MOV X0, X20
	0x037CD1EC MOV X3, X21
	0x037CD1F0 MOV X4, X19
	0x037CD1F4 MOV X5, X31
	0x037CD1F8 BL 0x381909C
	0x037CD1FC TBNZ X0, 0x0, 0x37CD3CC
	0x037CD200 LDR X19, [X31 + 0x88]
	0x037CD204 B 0x37CD1C4
	0x037CD208 BL 0x37CD51C
	0x037CD20C LDR X8, [X31 + 0x88]
	0x037CD210 MOVI V0.2D, 0x0
	0x037CD214 STP V0, V0, [X8 + 0x60]
	0x037CD218 STR V0, [X8 + 0x5]
	0x037CD21C CBZ X22, 0x37CD410
	0x037CD220 LDR X0, [X22 + 0x20]
	0x037CD224 CBZ X0, 0x37CD414
	0x037CD228 ADRP X8, 0x97B000
	0x037CD22C LDR X8, [X8 + 0x7E8]
	0x037CD230 LDR X1, [X8]
	0x037CD234 ADD X8, X31, 0x0
	0x037CD238 BL 0x2A5ABD0
	0x037CD23C LDP V0, V1, [X31]
	0x037CD240 LDR V2, [X31 + 0x2]
	0x037CD244 LDR X19, [X31 + 0x88]
	0x037CD248 MOVN W8, 0x3
	0x037CD24C STP V0, V1, [X31 + 0x30]
	0x037CD250 STR V2, [X31 + 0x5]
	0x037CD254 STP V1, V2, [X19 + 0x90]
	0x037CD258 STR V0, [X19 + 0x8]
	0x037CD25C STR W8, [X19 + 0x10]
	0x037CD260 ADRP X23, 0x97B000
	0x037CD264 LDR X23, [X23 + 0x7F0]
	0x037CD268 ADD X20, X22, 0x18
	0x037CD26C LDR X1, [X23]
	0x037CD270 ADD X0, X19, 0x80
	0x037CD274 BL 0x2C01CA0
	0x037CD278 MOV W8, W0
	0x037CD27C LDR X0, [X31 + 0x88]
	0x037CD280 TBZ X8, 0x0, 0x37CD2B0
	0x037CD284 CBZ X22, 0x37CD3F8
	0x037CD288 LDP X21, X19, [X0 + 0x90]
	0x037CD28C LDP X1, X2, [X0 + 0x40]
	0x037CD290 MOV X0, X20
	0x037CD294 MOV X3, X21
	0x037CD298 MOV X4, X19
	0x037CD29C MOV X5, X31
	0x037CD2A0 BL 0x381909C
	0x037CD2A4 TBNZ X0, 0x0, 0x37CD394
	0x037CD2A8 LDR X19, [X31 + 0x88]
	0x037CD2AC B 0x37CD26C
	0x037CD2B0 BL 0x37CD56C
	0x037CD2B4 LDR X8, [X31 + 0x88]
	0x037CD2B8 MOVI V0.2D, 0x0
	0x037CD2BC STP V0, V0, [X8 + 0x90]
	0x037CD2C0 STR V0, [X8 + 0x8]
	0x037CD2C4 CBZ X22, 0x37CD400
	0x037CD2C8 LDR X0, [X22 + 0x28]
	0x037CD2CC CBZ X0, 0x37CD404
	0x037CD2D0 ADRP X8, 0x97A000
	0x037CD2D4 LDR X8, [X8 + 0xC58]
	0x037CD2D8 LDR X1, [X8]
	0x037CD2DC ADD X8, X31, 0x0
	0x037CD2E0 BL 0x2A5ABD0
	0x037CD2E4 LDP V0, V1, [X31]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0xC15000
	010 Move W8, [X23+519]
	011 Move W19, W4
	012 Move X20, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X24, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x97C000
	021 Move X0, [X0+1952]
	022 Call 0x1C17CF4
	023 Move X0, 0x97C000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+519], W8
	028 Compare X22, 0
	029 JumpIfEqual {91}
	030 Move X8, [X22+120]
	031 Compare X8, 0
	032 JumpIfEqual {91}
	033 Move X9, [X24+1168]
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Add X23, X24, 1168
	036 Compare X9, 0
	037 JumpIfEqual {46}
	038 Move W8, [X9+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, 0x97C000
	041 Move W1, [X24+112]
	042 Move X8, [X8+1952]
	043 Move X0, X23
	044 Move X2, [X8]
	045 Call Array.Resize, X0, X1
	046 Move X8, 0x97C000
	047 Move W1, [X24+112]
	048 Move X8, [X8+1960]
	049 Move X0, [X8]
	050 Call 0x1C17D6C
	051 Move [X24+1168], X0
	052 Move W8, [X24+1064]
	053 Compare W8, 0
	054 JumpIfNotEqual {69}
	055 Move X8, [X23]
	056 Compare X8, 0
	057 JumpIfEqual {91}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W9, 56
	061 NotImplemented "Instruction MADD not yet implemented."
	062 Move W9, [X9+81]
	063 Compare W9, 0
	064 JumpIfEqual {69}
	065 Move W9, 56
	066 NotImplemented "Instruction MADD not yet implemented."
	067 Add X0, X8, 32
	068 Call StateChangeMonitorsForDevice.CompactArrays, X0
	069 Move X8, [X23]
	070 Compare X8, 0
	071 JumpIfEqual {91}
	072 Move W9, [X8+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X1, X22
	075 Move X2, X21
	076 Move X3, X20
	077 Move W4, W19
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Move X22, [X31+32]
	081 Move X21, [X31+40]
	082 Move X24, [X31+16]
	083 Move X23, [X31+24]
	084 Move W9, 56
	085 NotImplemented "Instruction MADD not yet implemented."
	086 Add X0, X8, 32
	087 Move X30, [X31+64]
	088 Move X25, [X31+72]
	089 Call StateChangeMonitorsForDevice.Add, X0, X1, X2, X3, X4
	090 Return 
	091 Call 0x1C17F20
	092 Call 0x1C17F28

Method: System.Void RemoveStateChangeMonitors(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037C7304 ADRP X0, 0x981000
	0x037C7308 LDR X0, [X0 + 0x3B8]
	0x037C730C BL 0x1C16CF4
	0x037C7310 ADRP X0, 0x981000
	0x037C7314 LDR X0, [X0 + 0x348]
	0x037C7318 BL 0x1C16CF4
	0x037C731C ADRP X0, 0x981000
	0x037C7320 LDR X0, [X0 + 0x340]
	0x037C7324 BL 0x1C16CF4
	0x037C7328 ADRP X0, 0x981000
	0x037C732C LDR X0, [X0 + 0x3C0]
	0x037C7330 BL 0x1C16CF4
	0x037C7334 ADRP X0, 0x981000
	0x037C7338 LDR X0, [X0 + 0x3C8]
	0x037C733C BL 0x1C16CF4
	0x037C7340 ADRP X0, 0x981000
	0x037C7344 LDR X0, [X0 + 0x3D0]
	0x037C7348 BL 0x1C16CF4
	0x037C734C ADRP X0, 0x981000
	0x037C7350 LDR X0, [X0 + 0x3D8]
	0x037C7354 BL 0x1C16CF4
	0x037C7358 ADRP X0, 0x981000
	0x037C735C LDR X0, [X0 + 0x3E0]
	0x037C7360 BL 0x1C16CF4
	0x037C7364 ADRP X0, 0x981000
	0x037C7368 LDR X0, [X0 + 0x3E8]
	0x037C736C BL 0x1C16CF4
	0x037C7370 ADRP X0, 0x981000
	0x037C7374 LDR X0, [X0 + 0x3F0]
	0x037C7378 BL 0x1C16CF4
	0x037C737C ADRP X0, 0x981000
	0x037C7380 LDR X0, [X0 + 0x3F8]
	0x037C7384 BL 0x1C16CF4
	0x037C7388 ADRP X0, 0x981000
	0x037C738C LDR X0, [X0 + 0x400]
	0x037C7390 BL 0x1C16CF4
	0x037C7394 ADRP X0, 0x981000
	0x037C7398 LDR X0, [X0 + 0x408]
	0x037C739C BL 0x1C16CF4
	0x037C73A0 ADRP X0, 0x981000
	0x037C73A4 LDR X0, [X0 + 0x410]
	0x037C73A8 BL 0x1C16CF4
	0x037C73AC ADRP X0, 0x981000
	0x037C73B0 LDR X0, [X0 + 0x418]
	0x037C73B4 BL 0x1C16CF4
	0x037C73B8 ADRP X0, 0x981000
	0x037C73BC LDR X0, [X0 + 0x420]
	0x037C73C0 BL 0x1C16CF4
	0x037C73C4 ADRP X0, 0x981000
	0x037C73C8 LDR X0, [X0 + 0x428]
	0x037C73CC BL 0x1C16CF4
	0x037C73D0 ADRP X0, 0x981000
	0x037C73D4 LDR X0, [X0 + 0x430]
	0x037C73D8 BL 0x1C16CF4
	0x037C73DC ADRP X0, 0x981000
	0x037C73E0 LDR X0, [X0 + 0x438]
	0x037C73E4 BL 0x1C16CF4
	0x037C73E8 ADRP X0, 0x981000
	0x037C73EC LDR X0, [X0 + 0x440]
	0x037C73F0 BL 0x1C16CF4
	0x037C73F4 ADRP X0, 0x981000
	0x037C73F8 LDR X0, [X0 + 0x448]
	0x037C73FC BL 0x1C16CF4
	0x037C7400 ADRP X0, 0x981000
	0x037C7404 LDR X0, [X0 + 0x450]
	0x037C7408 BL 0x1C16CF4
	0x037C740C ADRP X0, 0x981000
	0x037C7410 LDR X0, [X0 + 0x458]
	0x037C7414 BL 0x1C16CF4
	0x037C7418 ADRP X0, 0x981000
	0x037C741C LDR X0, [X0 + 0x460]
	0x037C7420 BL 0x1C16CF4
	0x037C7424 ADRP X0, 0x981000
	0x037C7428 LDR X0, [X0 + 0x468]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X20, 0xC1B000
	010 Move W8, [X20+520]
	011 Move X19, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x982000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move X0, 0x982000
	021 Move X0, [X0+704]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+520], W8
	025 Move X8, [X21+1168]
	026 Compare X8, 0
	027 JumpIfEqual {73}
	028 Compare X19, 0
	029 JumpIfEqual {82}
	030 NotImplemented "Instruction LDRSW not yet implemented."
	031 Move W10, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W10, 56
	035 NotImplemented "Instruction MADD not yet implemented."
	036 Add X0, X8, 32
	037 Call StateChangeMonitorsForDevice.Clear, X0
	038 Move W8, [X21+1176]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X23, 0x982000
	041 Move X24, 0x982000
	042 Move X23, [X23+696]
	043 Move X24, [X24+704]
	044 Move W20, W31
	045 Move X22, X31
	046 Add X21, X21, 1176
	047 Move X2, [X23]
	048 Add X8, X31, 0
	049 Move X0, X21
	050 Move W1, W20
	051 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	052 Move X8, [X31]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CSEL not yet implemented."
	055 Compare X8, 0
	056 JumpIfEqual {60}
	057 Compare X22, 0
	058 JumpIfEqual {82}
	059 Move X8, [X22+120]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X3, [X24]
	062 NotImplemented "Instruction MOVI not yet implemented."
	063 Add X2, X31, 0
	064 Move X0, X21
	065 Move W1, W20
	066 Move [X31+32], X31
	067 Move [X31], V0
	068 Move [X31+8], V0
	069 Call InlinedArray`1<StateChangeMonitorTimeout>.set_Item, X0, X1, X2
	070 Move W8, [X21]
	071 Add W20, W20, 1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X20, [X31+96]
	074 Move X19, [X31+104]
	075 Move X22, [X31+80]
	076 Move X21, [X31+88]
	077 Move X24, [X31+64]
	078 Move X23, [X31+72]
	079 Move X30, [X31+48]
	080 Add X31, X31, 112
	081 Return 
	082 Call 0x1C17F20
	083 Call 0x1C17F28

Method: System.Void RemoveStateChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex)

Disassembly:
	0x037CD4F0 ADD X0, X8, 0x8
	0x037CD4F4 BL 0x1BD1A2C
	0x037CD4F8 MOV X0, X19
	0x037CD4FC BL 0x1C16F18
	0x037CD500 CBNZ X19, 0x37CD508
	0x037CD504 BL 0x1D2C690
	0x037CD508 LDR X0, [X31 + 0x88]
	0x037CD50C BL 0x37CCE14
	0x037CD510 MOV X0, X19
	0x037CD514 BL 0x1C16F18
	0x037CD518 BL 0x1990590
	0x037CD51C STP X30, X21, [X31 - 0x20]!
	0x037CD520 STP X20, X19, [X31 + 0x10]
	0x037CD524 ADRP X21, 0xC14000
	0x037CD528 ADRP X20, 0x979000
	0x037CD52C LDRB W8, [X21 + 0x218]
	0x037CD530 LDR X20, [X20 + 0x698]
	0x037CD534 MOV X19, X0
	0x037CD538 TBNZ X8, 0x0, 0x37CD550
	0x037CD53C ADRP X0, 0x979000
	0x037CD540 LDR X0, [X0 + 0x698]
	0x037CD544 BL 0x1C16CF4
	0x037CD548 MOVZ W8, 0x1
	0x037CD54C STRB W8, [X21 + 0x218]
	0x037CD550 MOVN W8, 0x0
	0x037CD554 STR W8, [X19 + 0x10]
	0x037CD558 LDR X1, [X20]
	0x037CD55C ADD X0, X19, 0x50
	0x037CD560 LDP X20, X19, [X31 + 0x10]
	0x037CD564 LDP X30, X21, [X31], #0x20
	0x037CD568 B 0x2C01DC8
	0x037CD56C STP X30, X21, [X31 - 0x20]!
	0x037CD570 STP X20, X19, [X31 + 0x10]
	0x037CD574 ADRP X21, 0xC14000
	0x037CD578 ADRP X20, 0x97B000
	0x037CD57C LDRB W8, [X21 + 0x219]
	0x037CD580 LDR X20, [X20 + 0x808]
	0x037CD584 MOV X19, X0
	0x037CD588 TBNZ X8, 0x0, 0x37CD5A0
	0x037CD58C ADRP X0, 0x97B000
	0x037CD590 LDR X0, [X0 + 0x808]
	0x037CD594 BL 0x1C16CF4
	0x037CD598 MOVZ W8, 0x1
	0x037CD59C STRB W8, [X21 + 0x219]
	0x037CD5A0 MOVN W8, 0x0
	0x037CD5A4 STR W8, [X19 + 0x10]
	0x037CD5A8 LDR X1, [X20]
	0x037CD5AC ADD X0, X19, 0x80
	0x037CD5B0 LDP X20, X19, [X31 + 0x10]
	0x037CD5B4 LDP X30, X21, [X31], #0x20
	0x037CD5B8 B 0x2C01DC8
	0x037CD5BC STP X30, X21, [X31 - 0x20]!
	0x037CD5C0 STP X20, X19, [X31 + 0x10]
	0x037CD5C4 ADRP X21, 0xC14000
	0x037CD5C8 ADRP X20, 0x97A000
	0x037CD5CC LDRB W8, [X21 + 0x21A]
	0x037CD5D0 LDR X20, [X20 + 0xC60]
	0x037CD5D4 MOV X19, X0
	0x037CD5D8 TBNZ X8, 0x0, 0x37CD5F0
	0x037CD5DC ADRP X0, 0x97A000
	0x037CD5E0 LDR X0, [X0 + 0xC60]
	0x037CD5E4 BL 0x1C16CF4
	0x037CD5E8 MOVZ W8, 0x1
	0x037CD5EC STRB W8, [X21 + 0x21A]
	0x037CD5F0 MOVN W8, 0x0
	0x037CD5F4 STR W8, [X19 + 0x10]
	0x037CD5F8 LDR X1, [X20]
	0x037CD5FC ADD X0, X19, 0xB0
	0x037CD600 LDP X20, X19, [X31 + 0x10]
	0x037CD604 LDP X30, X21, [X31], #0x20
	0x037CD608 B 0x2C01DC8
	0x037CD60C STP X30, X21, [X31 - 0x20]!
	0x037CD610 STP X20, X19, [X31 + 0x10]
	0x037CD614 ADRP X21, 0xC14000
	0x037CD618 ADRP X20, 0x979000
	0x037CD61C LDRB W8, [X21 + 0x21B]
	0x037CD620 LDR X20, [X20 + 0x698]
	0x037CD624 MOV X19, X0
	0x037CD628 TBNZ X8, 0x0, 0x37CD640
	0x037CD62C ADRP X0, 0x979000
	0x037CD630 LDR X0, [X0 + 0x698]
	0x037CD634 BL 0x1C16CF4
	0x037CD638 MOVZ W8, 0x1
	0x037CD63C STRB W8, [X21 + 0x21B]
	0x037CD640 MOVN W8, 0x0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X23, 0xC15000
	010 Move W8, [X23+521]
	011 Move X19, X3
	012 Move X20, X2
	013 Move X22, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x97C000
	020 Move X0, [X0+696]
	021 Call 0x1C17CF4
	022 Move X0, 0x97C000
	023 Move X0, [X0+704]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+521], W8
	027 Move X8, [X21+1168]
	028 Compare X8, 0
	029 JumpIfEqual {81}
	030 Compare X22, 0
	031 JumpIfEqual {90}
	032 Move X9, [X22+120]
	033 Compare X9, 0
	034 JumpIfEqual {90}
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 Add W31, W9, 1
	037 Move W10, [X8+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W3, [X21+1064]
	041 Move W10, 56
	042 NotImplemented "Instruction MADD not yet implemented."
	043 Add X0, X8, 32
	044 Move X1, X20
	045 Move X2, X19
	046 Call StateChangeMonitorsForDevice.Remove, X0, X1, X2, X3
	047 Move W8, [X21+1176]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X23, 0x97C000
	050 Move X24, 0x97C000
	051 Move X23, [X23+696]
	052 Move X24, [X24+704]
	053 Move W22, W31
	054 Add X21, X21, 1176
	055 Move X2, [X23]
	056 Add X8, X31, 0
	057 Move X0, X21
	058 Move W1, W22
	059 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	060 Move X8, [X31+16]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X2, [X23]
	063 Add X8, X31, 0
	064 Move X0, X21
	065 Move W1, W22
	066 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	067 Move X8, [X31+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X3, [X24]
	070 NotImplemented "Instruction MOVI not yet implemented."
	071 Add X2, X31, 0
	072 Move X0, X21
	073 Move W1, W22
	074 Move [X31+32], X31
	075 Move [X31], V0
	076 Move [X31+8], V0
	077 Call InlinedArray`1<StateChangeMonitorTimeout>.set_Item, X0, X1, X2
	078 Move W8, [X21]
	079 Add W22, W22, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X20, [X31+96]
	082 Move X19, [X31+104]
	083 Move X22, [X31+80]
	084 Move X21, [X31+88]
	085 Move X24, [X31+64]
	086 Move X23, [X31+72]
	087 Move X30, [X31+48]
	088 Add X31, X31, 112
	089 Return 
	090 Call 0x1C17F20
	091 Call 0x1C17F28

Method: System.Void AddStateChangeMonitorTimeout(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Double time, System.Int64 monitorIndex, System.Int32 timerIndex)

Disassembly:
	0x037CD6FC LDR X0, [X0 + 0x18]
	0x037CD700 RET
	0x037CD704 STP X30, X19, [X31 - 0x10]!
	0x037CD708 ADRP X0, 0x926000
	0x037CD70C LDR X0, [X0 + 0xB40]
	0x037CD710 BL 0x1C16D08
	0x037CD714 BL 0x1C16F10
	0x037CD718 MOV X1, X31
	0x037CD71C MOV X19, X0
	0x037CD720 BL 0x3380310
	0x037CD724 ADRP X0, 0x97B000
	0x037CD728 LDR X0, [X0 + 0x810]
	0x037CD72C BL 0x1C16D08
	0x037CD730 MOV X1, X0
	0x037CD734 MOV X0, X19
	0x037CD738 BL 0x1C16DEC
	0x037CD73C LDR X0, [X0 + 0x18]
	0x037CD740 RET
	0x037CD744 STR X30, [X31 - 0x20]!
	0x037CD748 STP X20, X19, [X31 + 0x10]
	0x037CD74C ADRP X20, 0xC14000
	0x037CD750 LDRB W8, [X20 + 0x21E]
	0x037CD754 MOV X19, X0
	0x037CD758 TBNZ X8, 0x0, 0x37CD770
	0x037CD75C ADRP X0, 0x97B000
	0x037CD760 LDR X0, [X0 + 0x258]
	0x037CD764 BL 0x1C16CF4
	0x037CD768 MOVZ W8, 0x1
	0x037CD76C STRB W8, [X20 + 0x21E]
	0x037CD770 LDR W8, [X19 + 0x10]
	0x037CD774 ADDS W31, W8, 0x2
	0x037CD778 B.NE 0x37CD79C
	0x037CD77C LDR W20, [X19 + 0x20]
	0x037CD780 MOV X0, X31
	0x037CD784 BL 0x33C151C
	0x037CD788 CMP W20, W0
	0x037CD78C B.NE 0x37CD79C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], D8
	003 Move [X31+64], X30
	004 Move [X31+72], X25
	005 Move [X31+80], X24
	006 Move [X31+88], X23
	007 Move [X31+96], X22
	008 Move [X31+104], X21
	009 Move [X31+112], X20
	010 Move [X31+120], X19
	011 Move X25, 0xC15000
	012 Move X24, 0x97C000
	013 Move W8, [X25+522]
	014 Move X24, [X24+1992]
	015 Move W19, W4
	016 Move X20, X3
	017 Move V8, V0
	018 Move X21, X2
	019 Move X22, X1
	020 Move X23, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x97C000
	026 Move X0, [X0+1992]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+522], W8
	030 Move X2, [X24]
	031 Add X0, X23, 1176
	032 Add X1, X31, 8
	033 Move [X31+8], X22
	034 Move [X31+16], D8
	035 Move [X31+24], X21
	036 Move [X31+32], X20
	037 Move [X31+40], W19
	038 Move [X31+44], W31
	039 Call InlinedArray`1<StateChangeMonitorTimeout>.Append, X0, X1
	040 Move X20, [X31+112]
	041 Move X19, [X31+120]
	042 Move X22, [X31+96]
	043 Move X21, [X31+104]
	044 Move X24, [X31+80]
	045 Move X23, [X31+88]
	046 Move X30, [X31+64]
	047 Move X25, [X31+72]
	048 Move V8, [X31+48]
	049 Add X31, X31, 128
	050 Return 

Method: System.Void RemoveStateChangeMonitorTimeout(UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.Int32 timerIndex)

Disassembly:
	0x037CD790 STR W31, [X19 + 0x10]
	0x037CD794 MOV X20, X19
	0x037CD798 B 0x37CD7D0
	0x037CD79C ADRP X8, 0x97B000
	0x037CD7A0 LDR X8, [X8 + 0x258]
	0x037CD7A4 LDR X0, [X8]
	0x037CD7A8 BL 0x1C16F10
	0x037CD7AC MOV X1, X31
	0x037CD7B0 MOV X20, X0
	0x037CD7B4 BL 0x33BDD8C
	0x037CD7B8 MOV X0, X31
	0x037CD7BC STR W31, [X20 + 0x10]
	0x037CD7C0 BL 0x33C151C
	0x037CD7C4 STR W0, [X20 + 0x20]
	0x037CD7C8 LDR X8, [X19 + 0x38]
	0x037CD7CC STR X8, [X20 + 0x38]
	0x037CD7D0 LDR X8, [X19 + 0x30]
	0x037CD7D4 MOV X0, X20
	0x037CD7D8 STR X8, [X20 + 0x28]
	0x037CD7DC LDP X20, X19, [X31 + 0x10]
	0x037CD7E0 LDR X30, [X31], #0x20
	0x037CD7E4 RET
	0x037CD7E8 B 0x37CD744
	0x037CD7EC LDR W0, [X0 + 0x20]
	0x037CD7F0 RET
	0x037CD7F4 LDR W8, [X0 + 0x20]
	0x037CD7F8 CMP W8, W1
	0x037CD7FC B.NE 0x37CD804
	0x037CD800 RET
	0x037CD804 STR W1, [X0 + 0x20]
	0x037CD808 B 0x37CD80C
	0x037CD80C STP X30, X21, [X31 - 0x20]!
	0x037CD810 STP X20, X19, [X31 + 0x10]
	0x037CD814 ADRP X20, 0xC14000
	0x037CD818 ADRP X21, 0x94E000
	0x037CD81C LDRB W8, [X20 + 0x23D]
	0x037CD820 LDR X21, [X21 + 0x270]
	0x037CD824 MOV X19, X0
	0x037CD828 TBNZ X8, 0x0, 0x37CD84C
	0x037CD82C ADRP X0, 0x94E000
	0x037CD830 LDR X0, [X0 + 0x270]
	0x037CD834 BL 0x1C16CF4
	0x037CD838 ADRP X0, 0x926000
	0x037CD83C LDR X0, [X0 + 0x598]
	0x037CD840 BL 0x1C16CF4
	0x037CD844 MOVZ W8, 0x1
	0x037CD848 STRB W8, [X20 + 0x23D]
	0x037CD84C LDR X0, [X21]
	0x037CD850 ADRP X20, 0x926000
	0x037CD854 LDR W8, [X0 + 0xE0]
	0x037CD858 LDR X20, [X20 + 0x598]
	0x037CD85C CBNZ W8, 0x37CD864
	0x037CD860 BL 0x1C16DFC
	0x037CD864 MOV X0, X31
	0x037CD868 BL 0x37701B0
	0x037CD86C LDR X8, [X20]
	0x037CD870 MOV X20, X0
	0x037CD874 LDR W9, [X8 + 0xE0]
	0x037CD878 CBNZ W9, 0x37CD884
	0x037CD87C MOV X0, X8
	0x037CD880 BL 0x1C16DFC
	0x037CD884 MOV X0, X20
	0x037CD888 MOV X1, X19
	0x037CD88C MOV X2, X31
	0x037CD890 BL 0x3C3883C
	0x037CD894 TBZ X0, 0x0, 0x37CD8C8
	0x037CD898 LDR X0, [X21]
	0x037CD89C LDR W8, [X0 + 0xE0]
	0x037CD8A0 CBNZ W8, 0x37CD8AC
	0x037CD8A4 BL 0x1C16DFC
	0x037CD8A8 LDR X0, [X21]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X22, 0xC15000
	011 Move W8, [X22+523]
	012 Move W19, W3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X23, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x97C000
	021 Move X0, [X0+696]
	022 Call 0x1C17CF4
	023 Move X0, 0x97C000
	024 Move X0, [X0+704]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+523], W8
	028 Move W24, [X23+1176]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X25, 0x97C000
	031 Move X25, [X25+696]
	032 Move W22, W31
	033 Add X23, X23, 1176
	034 Move X2, [X25]
	035 Add X8, X31, 0
	036 Move X0, X23
	037 Move W1, W22
	038 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	039 Move X8, [X31+16]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X2, [X25]
	042 Add X8, X31, 0
	043 Move X0, X23
	044 Move W1, W22
	045 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	046 Move X8, [X31+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X2, [X25]
	049 Add X8, X31, 0
	050 Move X0, X23
	051 Move W1, W22
	052 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	053 Move W8, [X31+32]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Add W22, W22, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X20, [X31+96]
	058 Move X19, [X31+104]
	059 Move X22, [X31+80]
	060 Move X21, [X31+88]
	061 Move X24, [X31+64]
	062 Move X23, [X31+72]
	063 Move X30, [X31+48]
	064 Move X25, [X31+56]
	065 Add X31, X31, 112
	066 Return 
	067 Move X8, 0x97C000
	068 Move X8, [X8+704]
	069 NotImplemented "Instruction MOVI not yet implemented."
	070 Add X2, X31, 0
	071 Move X0, X23
	072 Move X3, [X8]
	073 Move W1, W22
	074 Move [X31+32], X31
	075 Move [X31], V0
	076 Move [X31+8], V0
	077 Call InlinedArray`1<StateChangeMonitorTimeout>.set_Item, X0, X1, X2

Method: System.Void SortStateChangeMonitorsIfNecessary(System.Int32 deviceIndex)

Disassembly:
	0x037CC854 CMP W8, W19
	0x037CC858 B.EQ 0x37CC880
	0x037CC85C ADD W22, W22, 0x1
	0x037CC860 CMP W24, W22
	0x037CC864 B.NE 0x37CC7FC
	0x037CC868 LDP X20, X19, [X31 + 0x60]
	0x037CC86C LDP X22, X21, [X31 + 0x50]
	0x037CC870 LDP X24, X23, [X31 + 0x40]
	0x037CC874 LDP X30, X25, [X31 + 0x30]
	0x037CC878 ADD X31, X31, 0x70
	0x037CC87C RET
	0x037CC880 ADRP X8, 0x97C000
	0x037CC884 LDR X8, [X8 + 0x2C0]
	0x037CC888 MOVI V0.2D, 0x0
	0x037CC88C ADD X2, X31, 0x0
	0x037CC890 MOV X0, X23
	0x037CC894 LDR X3, [X8]
	0x037CC898 MOV W1, W22
	0x037CC89C STR X31, [X31 + 0x20]
	0x037CC8A0 STP V0, V0, [X31]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+1168]
	003 Compare X8, 0
	004 JumpIfEqual {19}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W9, 56
	008 NotImplemented "Instruction SMADDL not yet implemented."
	009 Move W9, [X9+80]
	010 Compare W9, 0
	011 JumpIfEqual {19}
	012 Move X9, W1
	013 Move W10, 56
	014 NotImplemented "Instruction MADD not yet implemented."
	015 Add X0, X8, 32
	016 Move X30, [X31+16]
	017 Call StateChangeMonitorsForDevice.SortMonitorsByIndex, X0
	018 Return 
	019 Move X30, [X31+16]
	020 Return 
	021 Call 0x1C17F28

Method: System.Void SignalStateChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor)

Disassembly:
	0x037CD9E8 RET
	0x037CD9EC LDR V1, [X0 + 0x50]
	0x037CD9F0 FCMP S1, S0
	0x037CD9F4 B.NE 0x37CD9FC
	0x037CD9F8 RET
	0x037CD9FC STR S0, [X0 + 0x50]
	0x037CDA00 B 0x37CD80C
	0x037CDA04 LDR V0, [X0 + 0x54]
	0x037CDA08 RET
	0x037CDA0C LDR V1, [X0 + 0x54]
	0x037CDA10 FCMP S1, S0
	0x037CDA14 B.NE 0x37CDA1C
	0x037CDA18 RET
	0x037CDA1C STR S0, [X0 + 0x54]
	0x037CDA20 B 0x37CD80C
	0x037CDA24 LDR V0, [X0 + 0x58]
	0x037CDA28 RET
	0x037CDA2C LDR V1, [X0 + 0x58]
	0x037CDA30 FCMP S1, S0
	0x037CDA34 B.NE 0x37CDA3C
	0x037CDA38 RET
	0x037CDA3C STR S0, [X0 + 0x58]
	0x037CDA40 B 0x37CD80C
	0x037CDA44 LDR W0, [X0 + 0x30]
	0x037CDA48 RET
	0x037CDA4C LDR W8, [X0 + 0x30]
	0x037CDA50 CMP W8, W1
	0x037CDA54 B.NE 0x37CDA5C
	0x037CDA58 RET
	0x037CDA5C STR W1, [X0 + 0x30]
	0x037CDA60 B 0x37CD80C
	0x037CDA64 LDR W0, [X0 + 0x34]
	0x037CDA68 RET
	0x037CDA6C LDR W8, [X0 + 0x34]
	0x037CDA70 CMP W8, W1
	0x037CDA74 B.NE 0x37CDA7C
	0x037CDA78 RET
	0x037CDA7C STR W1, [X0 + 0x34]
	0x037CDA80 B 0x37CD80C
	0x037CDA84 LDR W0, [X0 + 0x24]
	0x037CDA88 RET
	0x037CDA8C LDR W8, [X0 + 0x24]
	0x037CDA90 CMP W8, W1
	0x037CDA94 B.NE 0x37CDA9C
	0x037CDA98 RET
	0x037CDA9C STR W1, [X0 + 0x24]
	0x037CDAA0 B 0x37CD80C
	0x037CDAA4 LDR W0, [X0 + 0x28]
	0x037CDAA8 RET
	0x037CDAAC LDR W8, [X0 + 0x28]
	0x037CDAB0 CMP W8, W1
	0x037CDAB4 B.NE 0x37CDABC
	0x037CDAB8 RET
	0x037CDABC STR W1, [X0 + 0x28]
	0x037CDAC0 B 0x37CD80C
	0x037CDAC4 SUB X31, X31, 0x30
	0x037CDAC8 STP X30, X21, [X31 + 0x10]
	0x037CDACC STP X20, X19, [X31 + 0x20]
	0x037CDAD0 ADRP X21, 0xC14000
	0x037CDAD4 ADRP X20, 0x97B000

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Compare X1, 0
	011 JumpIfEqual {66}
	012 Move X9, [X1+120]
	013 Move X20, X1
	014 Compare X9, 0
	015 JumpIfEqual {66}
	016 Move X8, [X0+1168]
	017 Move X21, X0
	018 Compare X8, 0
	019 JumpIfEqual {66}
	020 NotImplemented "Instruction LDRSW not yet implemented."
	021 Move W10, [X8+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W10, 56
	024 NotImplemented "Instruction MADD not yet implemented."
	025 Add X24, X24, 72
	026 Move W10, [X24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W10, 56
	029 NotImplemented "Instruction MADD not yet implemented."
	030 Move X19, X2
	031 Move X25, X31
	032 Move X22, X31
	033 Subtract X23, X24, 24
	034 Add X26, X8, 40
	035 Move X0, X21
	036 Move W1, W22
	037 Call InputManager.SortStateChangeMonitorsIfNecessary, X0, X1
	038 Move X8, [X26]
	039 Compare X8, 0
	040 JumpIfEqual {66}
	041 Move W9, [X8+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add X8, X8, X25
	044 Move X9, [X8+32]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, [X8+40]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X23
	049 Move W1, W22
	050 Move X2, X31
	051 Call DynamicBitfield.SetBit, X0, X1
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Add X22, X22, 1
	054 Add X25, X25, 32
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, [X31+64]
	057 Move X19, [X31+72]
	058 Move X22, [X31+48]
	059 Move X21, [X31+56]
	060 Move X24, [X31+32]
	061 Move X23, [X31+40]
	062 Move X26, [X31+16]
	063 Move X25, [X31+24]
	064 Move X30, [X31+80]
	065 Return 
	066 Call 0x1C17F20
	067 Call 0x1C17F28

Method: System.Void FireStateChangeNotifications()

Disassembly:
	0x037CDAD8 LDRB W8, [X21 + 0x239]
	0x037CDADC LDR X20, [X20 + 0x820]
	0x037CDAE0 MOV X19, X0
	0x037CDAE4 TBNZ X8, 0x0, 0x37CDAFC
	0x037CDAE8 ADRP X0, 0x97B000
	0x037CDAEC LDR X0, [X0 + 0x820]
	0x037CDAF0 BL 0x1C16CF4
	0x037CDAF4 MOVZ W8, 0x1
	0x037CDAF8 STRB W8, [X21 + 0x239]
	0x037CDAFC LDR X1, [X19 + 0x18]
	0x037CDB00 LDR X2, [X20]
	0x037CDB04 ADD X0, X31, 0x0
	0x037CDB08 STP X31, X31, [X31]
	0x037CDB0C BL 0x24FD80C
	0x037CDB10 LDP X0, X1, [X31]
	0x037CDB14 LDP X20, X19, [X31 + 0x20]
	0x037CDB18 LDP X30, X21, [X31 + 0x10]
	0x037CDB1C ADD X31, X31, 0x30
	0x037CDB20 RET
	0x037CDB24 SUB X31, X31, 0x40
	0x037CDB28 STP X30, X23, [X31 + 0x10]
	0x037CDB2C STP X22, X21, [X31 + 0x20]
	0x037CDB30 STP X20, X19, [X31 + 0x30]
	0x037CDB34 ADRP X21, 0xC14000
	0x037CDB38 LDRB W8, [X21 + 0x23A]
	0x037CDB3C MOV X19, X0
	0x037CDB40 UBFM X20, X2, 0x20, 0x3F
	0x037CDB44 STP X1, X2, [X31]
	0x037CDB48 TBNZ X8, 0x0, 0x37CDB78
	0x037CDB4C ADRP X0, 0x97B000
	0x037CDB50 LDR X0, [X0 + 0x828]
	0x037CDB54 BL 0x1C16CF4
	0x037CDB58 ADRP X0, 0x97B000
	0x037CDB5C LDR X0, [X0 + 0x48]
	0x037CDB60 BL 0x1C16CF4
	0x037CDB64 ADRP X0, 0x97B000
	0x037CDB68 LDR X0, [X0 + 0x250]
	0x037CDB6C BL 0x1C16CF4
	0x037CDB70 MOVZ W8, 0x1
	0x037CDB74 STRB W8, [X21 + 0x23A]
	0x037CDB78 MOV X0, X19
	0x037CDB7C BL 0x37CDAC4
	0x037CDB80 UBFM X8, X1, 0x20, 0x3F
	0x037CDB84 CMP W20, W8
	0x037CDB88 B.NE 0x37CDC08
	0x037CDB8C MOV X0, X19
	0x037CDB90 BL 0x37CDAC4
	0x037CDB94 UBFM X8, X1, 0x20, 0x3F
	0x037CDB98 CMP W8, 0x1
	0x037CDB9C B.LT 0x37CDC2C
	0x037CDBA0 ADRP X23, 0x97B000
	0x037CDBA4 LDR X23, [X23 + 0x250]
	0x037CDBA8 MOV X20, X31
	0x037CDBAC LDR X8, [X19 + 0x18]
	0x037CDBB0 CBZ X8, 0x37CDC40
	0x037CDBB4 LDR W9, [X8 + 0x18]
	0x037CDBB8 CMP X20, X9
	0x037CDBBC B.CS 0x37CDC44
	0x037CDBC0 ADD X8, X8, X20, 0x3, LSL
	0x037CDBC4 LDR X2, [X23]
	0x037CDBC8 LDR X22, [X8 + 0x20]
	0x037CDBCC ADD X0, X31, 0x0
	0x037CDBD0 MOV W1, W20
	0x037CDBD4 ADD X21, X31, 0x0
	0x037CDBD8 BL 0x24FDB3C
	0x037CDBDC MOV X1, X0
	0x037CDBE0 MOV X0, X22
	0x037CDBE4 MOV X2, X31
	0x037CDBE8 BL 0x3226EF8
	0x037CDBEC TBNZ X0, 0x0, 0x37CDC0C
	0x037CDBF0 MOV X0, X19
	0x037CDBF4 ADD X20, X20, 0x1
	0x037CDBF8 BL 0x37CDAC4
	0x037CDBFC CMP X20, X1, ASR
	0x037CDC00 B.LT 0x37CDBAC
	0x037CDC04 B 0x37CDC2C
	0x037CDC08 ADD X21, X31, 0x0
	0x037CDC0C ADRP X8, 0x97B000
	0x037CDC10 LDR X8, [X8 + 0x828]
	0x037CDC14 MOV X0, X21
	0x037CDC18 LDR X1, [X8]
	0x037CDC1C BL 0x24FD838
	0x037CDC20 STR X0, [X19 + 0x18]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xC15000
	008 Move W8, [X20+524]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x97B000
	015 Move X0, [X0+3360]
	016 Call 0x1C17CF4
	017 Move X0, 0x94F000
	018 Move X0, [X0+3792]
	019 Call 0x1C17CF4
	020 Move X0, 0x927000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+524], W8
	025 Move X20, [X19+1088]
	026 Compare X20, 0
	027 JumpIfEqual {89}
	028 Move X10, 0x94F000
	029 Move X8, [X20]
	030 Move X10, [X10+3792]
	031 Move X22, 0x97B000
	032 Move X21, 0x927000
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Move X1, [X10]
	035 Move X22, [X22+3360]
	036 Move X21, [X21+1448]
	037 Compare X9, 0
	038 JumpIfEqual {45}
	039 Move X10, [X8+176]
	040 Add X10, X10, 8
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Subtract X9, X9, 1
	044 Add X10, X10, 16
	045 Move W2, 19
	046 Move X0, X20
	047 Call 0x1C5D788
	048 Move W9, [X10]
	049 Add W9, W9, 19
	050 Add X8, X8, W9
	051 Add X0, X8, 312
	052 Move X8, [X0]
	053 Move X1, [X0+8]
	054 Move X0, X20
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X0, [X19+1168]
	057 Move X1, [X22]
	058 Move V8, V0
	059 Call ArrayHelpers.LengthSafe, X0
	060 Move X8, [X21]
	061 Move W20, [X19+112]
	062 Move W21, W0
	063 Move W9, [X8+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Move W0, W21
	069 Move W1, W20
	070 Move X2, X31
	071 Call Math.Min, X0, X1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W20, W0
	074 Move W21, W31
	075 Move X0, X19
	076 Move W1, W21
	077 Move V0, V8
	078 Move X2, X31
	079 Call InputManager.FireStateChangeNotifications, X0, X1, V0, X2
	080 Add W21, W21, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+8]
	087 Move V8, [X31+48]
	088 Return 
	089 Call 0x1C17F20

Method: System.Boolean ProcessStateChangeMonitors(System.Int32 deviceIndex, System.Void* newStateFromEvent, System.Void* oldStateOfDevice, System.UInt32 newStateSizeInBytes, System.UInt32 newStateOffsetInBytes)

Disassembly:
	0x037CC8A4 BL 0x2DF4E38
	0x037CC8A8 B 0x37CC868
	0x037CC8AC STP X30, X27, [X31 - 0x50]!
	0x037CC8B0 STP X26, X25, [X31 + 0x10]
	0x037CC8B4 STP X24, X23, [X31 + 0x20]
	0x037CC8B8 STP X22, X21, [X31 + 0x30]
	0x037CC8BC STP X20, X19, [X31 + 0x40]
	0x037CC8C0 ADRP X20, 0xC15000
	0x037CC8C4 LDRB W8, [X20 + 0x214]
	0x037CC8C8 MOV X19, X0
	0x037CC8CC TBNZ X8, 0x0, 0x37CC8F0
	0x037CC8D0 ADRP X0, 0x97C000
	0x037CC8D4 LDR X0, [X0 + 0x7D0]
	0x037CC8D8 BL 0x1C16CF4
	0x037CC8DC ADRP X0, 0x97C000
	0x037CC8E0 LDR X0, [X0 + 0x7D8]
	0x037CC8E4 BL 0x1C16CF4
	0x037CC8E8 MOVZ W8, 0x1
	0x037CC8EC STRB W8, [X20 + 0x214]
	0x037CC8F0 LDR W8, [X19 + 0x28]
	0x037CC8F4 CMP W8, 0x2
	0x037CC8F8 B.LT 0x37CC9C4
	0x037CC8FC ADRP X23, 0x97C000
	0x037CC900 ADRP X24, 0x97C000
	0x037CC904 LDR X23, [X23 + 0x7D8]
	0x037CC908 LDR X24, [X24 + 0x7D0]
	0x037CC90C MOVZ W25, 0x1
	0x037CC910 MOVZ W26, 0x30
	0x037CC914 MOV X27, X26
	0x037CC918 MOV X20, X25
	0x037CC91C LDR X8, [X19 + 0x8]
	0x037CC920 CBZ X8, 0x37CC9E0
	0x037CC924 LDR W9, [X8 + 0x18]
	0x037CC928 SUB X21, X20, 0x1
	0x037CC92C CMP W21, W9
	0x037CC930 B.CS 0x37CC9E4
	0x037CC934 LDR X0, [X8, X27, LSL]
	0x037CC938 MOV X1, X31
	0x037CC93C BL 0x374E610
	0x037CC940 LDR X8, [X19 + 0x8]
	0x037CC944 CBZ X8, 0x37CC9E0
	0x037CC948 LDR W9, [X8 + 0x18]
	0x037CC94C CMP W20, W9
	0x037CC950 B.CS 0x37CC9E4
	0x037CC954 AND X9, X20, 0x0
	0x037CC958 ADD X8, X8, X9, 0x5, LSL
	0x037CC95C MOV W22, W0
	0x037CC960 LDR X0, [X8 + 0x30]
	0x037CC964 MOV X1, X31
	0x037CC968 BL 0x374E610
	0x037CC96C CMP W22, W0
	0x037CC970 B.GE 0x37CC9B0
	0x037CC974 LDR X0, [X19 + 0x8]
	0x037CC978 LDR X3, [X23]
	0x037CC97C MOV W1, W20
	0x037CC980 MOV W2, W21
	0x037CC984 BL 0x217C94C
	0x037CC988 LDR X0, [X19]
	0x037CC98C LDR X3, [X24]
	0x037CC990 MOV W1, W20
	0x037CC994 MOV W2, W21
	0x037CC998 BL 0x217C9C4
	0x037CC99C ADD X8, X21, 0x1
	0x037CC9A0 CMP X8, 0x1
	0x037CC9A4 SUB X27, X27, 0x20
	0x037CC9A8 MOV X20, X21
	0x037CC9AC B.GT 0x37CC91C
	0x037CC9B0 LDR W8, [X19 + 0x28]
	0x037CC9B4 ADD X25, X25, 0x1
	0x037CC9B8 ADD X26, X26, 0x20
	0x037CC9BC CMP W25, W8
	0x037CC9C0 B.LT 0x37CC914
	0x037CC9C4 STRB W31, [X19 + 0x30]
	0x037CC9C8 LDP X20, X19, [X31 + 0x40]
	0x037CC9CC LDP X22, X21, [X31 + 0x30]
	0x037CC9D0 LDP X24, X23, [X31 + 0x20]
	0x037CC9D4 LDP X26, X25, [X31 + 0x10]
	0x037CC9D8 LDP X30, X27, [X31], #0x50
	0x037CC9DC RET
	0x037CC9E0 BL 0x1C16F20
	0x037CC9E4 BL 0x1C16F28
	0x037CC9E8 STR X30, [X31 - 0x50]!
	0x037CC9EC STP X26, X25, [X31 + 0x10]
	0x037CC9F0 STP X24, X23, [X31 + 0x20]
	0x037CC9F4 STP X22, X21, [X31 + 0x30]
	0x037CC9F8 STP X20, X19, [X31 + 0x40]
	0x037CC9FC CBZ X1, 0x37CCAD0
	0x037CCA00 LDR X9, [X1 + 0x78]
	0x037CCA04 MOV X20, X1
	0x037CCA08 CBZ X9, 0x37CCAD0
	0x037CCA0C LDR X8, [X0 + 0x490]
	0x037CCA10 MOV X21, X0
	0x037CCA14 CBZ X8, 0x37CCAD0
	0x037CCA18 LDRSW X9, [X9 + 0xE8]
	0x037CCA1C LDR W10, [X8 + 0x18]
	0x037CCA20 CMP W9, W10
	0x037CCA24 B.CS 0x37CCAD4
	0x037CCA28 MOVZ W10, 0x38
	0x037CCA2C MADD X24, X9, X10, X8
	0x037CCA30 LDR W10, [X24 + 0x48]!
	0x037CCA34 CMP W10, 0x1
	0x037CCA38 B.LT 0x37CCAB8
	0x037CCA3C MOVZ W10, 0x38
	0x037CCA40 MADD X8, X9, X10, X8
	0x037CCA44 MOV X19, X2
	0x037CCA48 MOV X25, X31
	0x037CCA4C MOV X22, X31
	0x037CCA50 SUB X23, X24, 0x18
	0x037CCA54 ADD X26, X8, 0x28
	0x037CCA58 MOV X0, X21
	0x037CCA5C MOV W1, W22
	0x037CCA60 BL 0x37CB854
	0x037CCA64 LDR X8, [X26]
	0x037CCA68 CBZ X8, 0x37CCAD0
	0x037CCA6C LDR W9, [X8 + 0x18]
	0x037CCA70 CMP X22, X9
	0x037CCA74 B.CS 0x37CCAD4
	0x037CCA78 ADD X8, X8, X25
	0x037CCA7C LDR X9, [X8 + 0x20]
	0x037CCA80 CMP X9, X20
	0x037CCA84 B.NE 0x37CCAA4
	0x037CCA88 LDR X8, [X8 + 0x28]
	0x037CCA8C CMP X8, X19
	0x037CCA90 B.NE 0x37CCAA4
	0x037CCA94 MOV X0, X23
	0x037CCA98 MOV W1, W22
	0x037CCA9C MOV X2, X31
	0x037CCAA0 BL 0x37DA8E0
	0x037CCAA4 LDRSW X8, [X24]
	0x037CCAA8 ADD X22, X22, 0x1
	0x037CCAAC ADD X25, X25, 0x20
	0x037CCAB0 CMP X22, X8
	0x037CCAB4 B.LT 0x37CCA58
	0x037CCAB8 LDP X20, X19, [X31 + 0x40]
	0x037CCABC LDP X22, X21, [X31 + 0x30]
	0x037CCAC0 LDP X24, X23, [X31 + 0x20]
	0x037CCAC4 LDP X26, X25, [X31 + 0x10]
	0x037CCAC8 LDR X30, [X31], #0x50
	0x037CCACC RET
	0x037CCAD0 BL 0x1C16F20
	0x037CCAD4 BL 0x1C16F28
	0x037CCAD8 STR D8, [X31 - 0x30]!
	0x037CCADC STR X30, [X31 + 0x8]
	0x037CCAE0 STP X22, X21, [X31 + 0x10]
	0x037CCAE4 STP X20, X19, [X31 + 0x20]
	0x037CCAE8 ADRP X20, 0xC15000
	0x037CCAEC LDRB W8, [X20 + 0x20C]
	0x037CCAF0 MOV X19, X0
	0x037CCAF4 TBNZ X8, 0x0, 0x37CCB24
	0x037CCAF8 ADRP X0, 0x97B000
	0x037CCAFC LDR X0, [X0 + 0xD20]
	0x037CCB00 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X29
	003 Move [X31+104], X30
	004 Move [X31+112], X28
	005 Move [X31+120], X27
	006 Move [X31+128], X26
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X22, 0xC16000
	015 Move W8, [X22+525]
	016 Move W25, W5
	017 Move W24, W4
	018 Move X21, X3
	019 Move X26, X2
	020 Move W19, W1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x97D000
	027 Move X0, [X0+1928]
	028 Call 0x1C17CF4
	029 Move X0, 0x97D000
	030 Move X0, [X0+1936]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+525], W8
	034 NotImplemented "Instruction MOVI not yet implemented."
	035 Move [X31+48], X31
	036 Move [X31+56], X31
	037 Move [X31+40], X31
	038 Move [X31+64], V0
	039 Move [X31+72], V0
	040 Move X8, [X20+1168]
	041 Compare X8, 0
	042 JumpIfEqual {158}
	043 Move W9, [X8+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X27, W19
	047 Move W9, 56
	048 NotImplemented "Instruction MADD not yet implemented."
	049 Move X22, [X9+32]
	050 Compare X22, 0
	051 JumpIfEqual {158}
	052 Move W9, 56
	053 NotImplemented "Instruction MADD not yet implemented."
	054 Move V1, [X8+48]
	055 Move V0, [X8+64]
	056 Move W23, [X8+72]
	057 Move W3, W24
	058 ShiftRight W3, 29
	059 And W3, W3, 0xFFFFFFF
	060 Add X0, X31, 56
	061 Move W1, W25
	062 Move W2, W31
	063 Move X4, X31
	064 Move [X31+64], V1
	065 Move [X31+72], V0
	066 Call BitRegion..ctor, X0, X1, X2, X3
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract X25, X26, W25
	069 Move X26, 0x97D000
	070 Move X26, [X26+1928]
	071 Move W28, W31
	072 Move W29, W31
	073 Move W24, W31
	074 Move W8, [X22+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add X8, X22, W24
	077 Move X1, [X8+32]
	078 Move X8, X1
	079 ShiftRight X8, 32
	080 And X8, X8, 0x7FFFFFFF
	081 Compare X8, 0
	082 JumpIfNotEqual {111}
	083 Move [X31+40], W23
	084 Move [X31+44], W23
	085 Move X8, [X20+1168]
	086 Compare X8, 0
	087 JumpIfEqual {184}
	088 Move W9, [X8+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W9, 56
	091 NotImplemented "Instruction MADD not yet implemented."
	092 Move X0, [X8+40]
	093 Move X8, 0x97D000
	094 Move X8, [X8+1936]
	095 Add X1, X31, 44
	096 Move W2, W24
	097 Move X3, [X8]
	098 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	099 Move X3, [X26]
	100 Add X1, X31, 40
	101 Move X0, X22
	102 Move W2, W24
	103 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	104 Subtract W23, W23, 1
	105 Add X0, X31, 64
	106 Move W1, W23
	107 Move X2, X31
	108 Call DynamicBitfield.SetLength, X0, X1
	109 Subtract W24, W24, 1
	110 Move W29, 1
	111 Add X0, X31, 56
	112 Move X2, X31
	113 Call BitRegion.Overlap, X0, X1
	114 Move [X31+48], X0
	115 Add X0, X31, 48
	116 Move X1, X31
	117 Call BitRegion.get_isEmpty, X0
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfEqual {137}
	122 Move X2, [X31+48]
	123 Move X0, X21
	124 Move X1, X25
	125 Move X3, X31
	126 Call MemoryHelpers.Compare, X0, X1, X2
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {137}
	131 Add X0, X31, 64
	132 Move W1, W24
	133 Move X2, X31
	134 Call DynamicBitfield.SetBit, X0, X1
	135 Move W29, 1
	136 Move W28, 1
	137 Add W24, W24, 1
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move TEMP, X29
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {175}
	143 Move X8, [X20+1168]
	144 Compare X8, 0
	145 JumpIfEqual {184}
	146 Move V0, [X31+64]
	147 Move V1, [X31+80]
	148 Move [X31], V0
	149 Move [X31+8], V1
	150 Move W9, [X8+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move V1, [X31]
	153 Move V0, [X31+16]
	154 Move W9, 56
	155 NotImplemented "Instruction MADD not yet implemented."
	156 Move [X8+48], V1
	157 Move [X8+56], V0
	158 Move W28, W31
	159 And W0, W28, 1
	160 Move X20, [X31+176]
	161 Move X19, [X31+184]
	162 Move X22, [X31+160]
	163 Move X21, [X31+168]
	164 Move X24, [X31+144]
	165 Move X23, [X31+152]
	166 Move X26, [X31+128]
	167 Move X25, [X31+136]
	168 Move X28, [X31+112]
	169 Move X27, [X31+120]
	170 Move X29, [X31+96]
	171 Move X30, [X31+104]
	172 Add X31, X31, 192
	173 Return X0
	174 Move W28, W31
	175 Move X8, [X20+1168]
	176 Compare X8, 0
	177 JumpIfEqual {184}
	178 Move W9, [X8+24]
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move W9, 56
	181 NotImplemented "Instruction MADD not yet implemented."
	182 Move [X8+81], W31
	183 Call 0x1C17F28
	184 Call 0x1C17F20

Method: System.Void FireStateChangeNotifications(System.Int32 deviceIndex, System.Double internalTime, UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)

Disassembly:
	0x037CCD9C LDP X20, X19, [X31 + 0x10]
	0x037CCDA0 LDR X30, [X31], #0x20
	0x037CCDA4 RET
	0x037CCDA8 MOV X1, X31
	0x037CCDAC B 0x33BDD8C
	0x037CCDB0 STR X30, [X31 - 0x20]!
	0x037CCDB4 STP X20, X19, [X31 + 0x10]
	0x037CCDB8 ADRP X20, 0xC15000
	0x037CCDBC LDRB W8, [X20 + 0x216]
	0x037CCDC0 MOV X19, X1
	0x037CCDC4 TBNZ X8, 0x0, 0x37CCDDC
	0x037CCDC8 ADRP X0, 0x929000
	0x037CCDCC LDR X0, [X0 + 0x278]
	0x037CCDD0 BL 0x1C16CF4
	0x037CCDD4 MOVZ W8, 0x1
	0x037CCDD8 STRB W8, [X20 + 0x216]
	0x037CCDDC CBZ X19, 0x37CCDF4
	0x037CCDE0 MOV X0, X19
	0x037CCDE4 LDP X20, X19, [X31 + 0x10]
	0x037CCDE8 MOV X1, X31
	0x037CCDEC LDR X30, [X31], #0x20
	0x037CCDF0 B 0x3771E78
	0x037CCDF4 ADRP X8, 0x929000
	0x037CCDF8 LDR X8, [X8 + 0x278]
	0x037CCDFC LDP X20, X19, [X31 + 0x10]
	0x037CCE00 LDR X8, [X8]
	0x037CCE04 LDR X8, [X8 + 0xB8]
	0x037CCE08 LDR X0, [X8]
	0x037CCE0C LDR X30, [X31], #0x20
	0x037CCE10 RET
	0x037CCE14 LDR W8, [X0 + 0x10]
	0x037CCE18 ADD W8, W8, 0x8
	0x037CCE1C CMP W8, 0xE
	0x037CCE20 B.HI 0x37CCE54
	0x037CCE24 ADRP X9, 0xFFFFFFFFFD3CB000
	0x037CCE28 ADD X9, X9, 0x957
	0x037CCE2C ADR X10, 0x10
	0x037CCE30 LDRB W11, [X9, X8, LSL]
	0x037CCE34 ADD X10, X10, X11, 0x2, LSL
	0x037CCE38 BR X10
	0x037CCE3C B 0x37CD6AC
	0x037CCE40 B 0x37CD65C
	0x037CCE44 B 0x37CD60C
	0x037CCE48 B 0x37CD5BC
	0x037CCE4C B 0x37CD56C
	0x037CCE50 B 0x37CD51C
	0x037CCE54 RET
	0x037CCE58 SUB X31, X31, 0xC0
	0x037CCE5C STP X30, X23, [X31 + 0x90]
	0x037CCE60 STP X22, X21, [X31 + 0xA0]
	0x037CCE64 STP X20, X19, [X31 + 0xB0]
	0x037CCE68 ADRP X20, 0xC15000
	0x037CCE6C LDRB W8, [X20 + 0x217]
	0x037CCE70 MOV X19, X0
	0x037CCE74 STR X0, [X31 + 0x88]
	0x037CCE78 TBNZ X8, 0x0, 0x37CCF14
	0x037CCE7C ADRP X0, 0x97A000
	0x037CCE80 LDR X0, [X0 + 0x690]
	0x037CCE84 BL 0x1C16CF4
	0x037CCE88 ADRP X0, 0x97B000
	0x037CCE8C LDR X0, [X0 + 0xC58]
	0x037CCE90 BL 0x1C16CF4
	0x037CCE94 ADRP X0, 0x97C000
	0x037CCE98 LDR X0, [X0 + 0x7E8]
	0x037CCE9C BL 0x1C16CF4
	0x037CCEA0 ADRP X0, 0x97B000
	0x037CCEA4 LDR X0, [X0 + 0xC68]
	0x037CCEA8 BL 0x1C16CF4
	0x037CCEAC ADRP X0, 0x97A000
	0x037CCEB0 LDR X0, [X0 + 0x6A0]
	0x037CCEB4 BL 0x1C16CF4
	0x037CCEB8 ADRP X0, 0x97C000
	0x037CCEBC LDR X0, [X0 + 0x7F0]
	0x037CCEC0 BL 0x1C16CF4
	0x037CCEC4 ADRP X0, 0x97B000
	0x037CCEC8 LDR X0, [X0 + 0xC70]
	0x037CCECC BL 0x1C16CF4
	0x037CCED0 ADRP X0, 0x97A000
	0x037CCED4 LDR X0, [X0 + 0x6A8]
	0x037CCED8 BL 0x1C16CF4
	0x037CCEDC ADRP X0, 0x97C000
	0x037CCEE0 LDR X0, [X0 + 0x7F8]
	0x037CCEE4 BL 0x1C16CF4
	0x037CCEE8 ADRP X0, 0x97B000
	0x037CCEEC LDR X0, [X0 + 0xC78]
	0x037CCEF0 BL 0x1C16CF4
	0x037CCEF4 ADRP X0, 0x97C000
	0x037CCEF8 LDR X0, [X0 + 0x800]
	0x037CCEFC BL 0x1C16CF4
	0x037CCF00 ADRP X0, 0x97A000
	0x037CCF04 LDR X0, [X0 + 0x6B0]
	0x037CCF08 BL 0x1C16CF4
	0x037CCF0C MOVZ W8, 0x1
	0x037CCF10 STRB W8, [X20 + 0x217]
	0x037CCF14 ADD X8, X31, 0x88
	0x037CCF18 STP X31, X8, [X31 + 0x78]
	0x037CCF1C LDR W8, [X19 + 0x10]
	0x037CCF20 CMP W8, 0x6
	0x037CCF24 B.HI 0x37CD4E4
	0x037CCF28 LDR X22, [X19 + 0x38]
	0x037CCF2C ADRP X9, 0xFFFFFFFFFD3CB000
	0x037CCF30 ADD X9, X9, 0x966
	0x037CCF34 ADR X10, 0x10
	0x037CCF38 LDRB W11, [X9, X8, LSL]
	0x037CCF3C ADD X10, X10, X11, 0x2, LSL
	0x037CCF40 BR X10
	0x037CCF44 LDR X0, [X19 + 0x28]
	0x037CCF48 MOVN W8, 0x0
	0x037CCF4C STR W8, [X19 + 0x10]
	0x037CCF50 MOV X1, X31
	0x037CCF54 BL 0x32277A8
	0x037CCF58 TBZ X0, 0x0, 0x37CD150
	0x037CCF5C CBZ X22, 0x37CD420
	0x037CCF60 LDR X0, [X22 + 0x18]
	0x037CCF64 CBZ X0, 0x37CD424
	0x037CCF68 ADRP X8, 0x97A000
	0x037CCF6C LDR X8, [X8 + 0x690]
	0x037CCF70 LDR X1, [X8]
	0x037CCF74 ADD X8, X31, 0x0
	0x037CCF78 BL 0x2A5ABD0
	0x037CCF7C LDP V0, V1, [X31]
	0x037CCF80 LDR V2, [X31 + 0x2]
	0x037CCF84 LDR X19, [X31 + 0x88]
	0x037CCF88 MOVN W8, 0x5
	0x037CCF8C STP V0, V1, [X31 + 0x30]
	0x037CCF90 STR V2, [X31 + 0x5]
	0x037CCF94 STP V1, V2, [X19 + 0x60]
	0x037CCF98 STR V0, [X19 + 0x5]
	0x037CCF9C B 0x37CCFA4
	0x037CCFA0 MOVN W8, 0x5
	0x037CCFA4 STR W8, [X19 + 0x10]
	0x037CCFA8 ADRP X8, 0x97A000
	0x037CCFAC LDR X8, [X8 + 0x6A0]
	0x037CCFB0 ADD X0, X19, 0x50
	0x037CCFB4 LDR X1, [X8]
	0x037CCFB8 BL 0x2C01CA0
	0x037CCFBC MOV W8, W0
	0x037CCFC0 LDR X0, [X31 + 0x88]
	0x037CCFC4 TBZ X8, 0x0, 0x37CD00C
	0x037CCFC8 LDP X8, X1, [X0 + 0x60]
	0x037CCFCC MOV X0, X8
	0x037CCFD0 MOV X2, X31
	0x037CCFD4 BL 0x37577E0
	0x037CCFD8 LDR X8, [X31 + 0x88]
	0x037CCFDC MOVZ W9, 0x4
	0x037CCFE0 B 0x37CD3AC
	0x037CCFE4 MOVN W8, 0x3
	0x037CCFE8 B 0x37CD25C
	0x037CCFEC MOVN W8, 0x4
	0x037CCFF0 B 0x37CD304
	0x037CCFF4 MOVN W8, 0x2
	0x037CCFF8 B 0x37CD1B4
	0x037CCFFC MOVN W8, 0x6
	0x037CD000 B 0x37CD060
	0x037CD004 MOVN W8, 0x7
	0x037CD008 B 0x37CD0F4
	0x037CD00C BL 0x37CD60C
	0x037CD010 LDR X8, [X31 + 0x88]
	0x037CD014 MOVI V0.2D, 0x0
	0x037CD018 STP V0, V0, [X8 + 0x60]
	0x037CD01C STR V0, [X8 + 0x5]
	0x037CD020 CBZ X22, 0x37CD418
	0x037CD024 LDR X0, [X22 + 0x20]
	0x037CD028 CBZ X0, 0x37CD41C
	0x037CD02C ADRP X8, 0x97B000
	0x037CD030 LDR X8, [X8 + 0x7E8]
	0x037CD034 LDR X1, [X8]
	0x037CD038 ADD X8, X31, 0x0
	0x037CD03C BL 0x2A5ABD0
	0x037CD040 LDP V0, V1, [X31]
	0x037CD044 LDR V2, [X31 + 0x2]
	0x037CD048 LDR X19, [X31 + 0x88]
	0x037CD04C MOVN W8, 0x6
	0x037CD050 STP V0, V1, [X31 + 0x30]
	0x037CD054 STR V2, [X31 + 0x5]
	0x037CD058 STP V1, V2, [X19 + 0x90]
	0x037CD05C STR V0, [X19 + 0x8]
	0x037CD060 STR W8, [X19 + 0x10]
	0x037CD064 ADRP X8, 0x97B000
	0x037CD068 LDR X8, [X8 + 0x7F0]
	0x037CD06C ADD X0, X19, 0x80
	0x037CD070 LDR X1, [X8]
	0x037CD074 BL 0x2C01CA0
	0x037CD078 MOV W8, W0
	0x037CD07C LDR X0, [X31 + 0x88]
	0x037CD080 TBZ X8, 0x0, 0x37CD0A0
	0x037CD084 LDP X8, X1, [X0 + 0x90]
	0x037CD088 MOV X0, X8
	0x037CD08C MOV X2, X31
	0x037CD090 BL 0x37577E0
	0x037CD094 LDR X8, [X31 + 0x88]
	0x037CD098 MOVZ W9, 0x5
	0x037CD09C B 0x37CD3AC
	0x037CD0A0 BL 0x37CD65C
	0x037CD0A4 LDR X8, [X31 + 0x88]
	0x037CD0A8 MOVI V0.2D, 0x0
	0x037CD0AC STP V0, V0, [X8 + 0x90]
	0x037CD0B0 STR V0, [X8 + 0x8]
	0x037CD0B4 CBZ X22, 0x37CD408
	0x037CD0B8 LDR X0, [X22 + 0x28]
	0x037CD0BC CBZ X0, 0x37CD40C
	0x037CD0C0 ADRP X8, 0x97A000
	0x037CD0C4 LDR X8, [X8 + 0xC58]
	0x037CD0C8 LDR X1, [X8]
	0x037CD0CC ADD X8, X31, 0x0
	0x037CD0D0 BL 0x2A5ABD0
	0x037CD0D4 LDP V0, V1, [X31]
	0x037CD0D8 LDR V2, [X31 + 0x2]
	0x037CD0DC LDR X19, [X31 + 0x88]
	0x037CD0E0 MOVN W8, 0x7
	0x037CD0E4 STP V0, V1, [X31 + 0x30]
	0x037CD0E8 STR V2, [X31 + 0x5]
	0x037CD0EC STP V1, V2, [X19 + 0xC0]
	0x037CD0F0 STR V0, [X19 + 0xB]
	0x037CD0F4 STR W8, [X19 + 0x10]
	0x037CD0F8 ADRP X8, 0x97A000
	0x037CD0FC LDR X8, [X8 + 0xC68]
	0x037CD100 ADD X0, X19, 0xB0
	0x037CD104 LDR X1, [X8]
	0x037CD108 BL 0x2C01CA0
	0x037CD10C MOV W8, W0
	0x037CD110 LDR X0, [X31 + 0x88]
	0x037CD114 TBZ X8, 0x0, 0x37CD134
	0x037CD118 LDP X8, X1, [X0 + 0xC0]
	0x037CD11C MOV X0, X8
	0x037CD120 MOV X2, X31
	0x037CD124 BL 0x37577E0
	0x037CD128 LDR X8, [X31 + 0x88]
	0x037CD12C MOVZ W9, 0x6
	0x037CD130 B 0x37CD3AC
	0x037CD134 BL 0x37CD6AC
	0x037CD138 LDR X8, [X31 + 0x88]
	0x037CD13C MOVI V0.2D, 0x0
	0x037CD140 MOV W0, W31
	0x037CD144 STP V0, V0, [X8 + 0xC0]
	0x037CD148 STR V0, [X8 + 0xB]
	0x037CD14C B 0x37CD3B8
	0x037CD150 LDR X8, [X31 + 0x88]
	0x037CD154 LDR X1, [X8 + 0x28]
	0x037CD158 STP X31, X31, [X31 + 0x68]
	0x037CD15C ADD X0, X31, 0x68
	0x037CD160 MOV X2, X31
	0x037CD164 BL 0x3757420
	0x037CD168 LDR X8, [X31 + 0x88]
	0x037CD16C LDUR V0, [X31 + 0x68]
	0x037CD170 STR V0, [X8 + 0x4]
	0x037CD174 CBZ X22, 0x37CD428
	0x037CD178 LDR X0, [X22 + 0x18]
	0x037CD17C CBZ X0, 0x37CD42C
	0x037CD180 ADRP X8, 0x979000
	0x037CD184 LDR X8, [X8 + 0x690]
	0x037CD188 LDR X1, [X8]
	0x037CD18C ADD X8, X31, 0x0
	0x037CD190 BL 0x2A5ABD0
	0x037CD194 LDP V0, V1, [X31]
	0x037CD198 LDR V2, [X31 + 0x2]
	0x037CD19C LDR X19, [X31 + 0x88]
	0x037CD1A0 MOVN W8, 0x2
	0x037CD1A4 STP V0, V1, [X31 + 0x30]
	0x037CD1A8 STR V2, [X31 + 0x5]
	0x037CD1AC STP V1, V2, [X19 + 0x60]
	0x037CD1B0 STR V0, [X19 + 0x5]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+64], D9
	003 Move [X31+72], D8
	004 Move [X31+80], X29
	005 Move [X31+88], X30
	006 Move [X31+96], X28
	007 Move [X31+104], X27
	008 Move [X31+112], X26
	009 Move [X31+120], X25
	010 Move [X31+128], X24
	011 Move [X31+136], X23
	012 Move [X31+144], X22
	013 Move [X31+152], X21
	014 Move [X31+160], X20
	015 Move [X31+168], X19
	016 NotImplemented "Instruction MRS not yet implemented."
	017 Move X8, [X23+40]
	018 Move X22, 0xC16000
	019 Move X19, X2
	020 Move V8, V0
	021 Move [X31+56], X8
	022 Move W8, [X22+526]
	023 Move W20, W1
	024 Move X21, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {37}
	029 Move X0, 0x97D000
	030 Move X0, [X0+1904]
	031 Call 0x1C17CF4
	032 Move X0, 0x950000
	033 Move X0, [X0+3784]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X22+526], W8
	037 Move [X31+32], X31
	038 Move [X31+40], X31
	039 Move [X31+48], W31
	040 Move X8, [X21+1168]
	041 Compare X8, 0
	042 JumpIfEqual {272}
	043 Move W9, [X8+24]
	044 Move [X31+16], X23
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X9, 0x950000
	047 Move X9, [X9+3784]
	048 Add X0, X31, 24
	049 Move W1, 70
	050 Move W2, 65
	051 Move X9, [X9]
	052 Move W3, 75
	053 Move W4, 69
	054 Move X5, X31
	055 Move X9, [X9+184]
	056 Move V9, [X9+8]
	057 Move W9, 56
	058 NotImplemented "Instruction SMADDL not yet implemented."
	059 Move [X31+24], W31
	060 Call FourCC..ctor, X0, X1, X2, X3, X4
	061 Move W1, [X31+24]
	062 Add X0, X31, 32
	063 Move W2, 20
	064 Move TEMP, 0
	065 Not TEMP
	066 Move W3, TEMP
	067 Move V0, V8
	068 Move X4, X31
	069 Add X20, X31, 32
	070 Call InputEvent..ctor, X0, X1, X2, X3, V0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 Move X0, X19
	074 Move W1, W31
	075 Move X2, X31
	076 Call InputEvent.set_handled, X0, X1
	077 Add X22, X22, 72
	078 Move W8, [X22]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X24, 0x97D000
	081 Move X24, [X24+1904]
	082 Move X23, X31
	083 Move X20, X31
	084 Subtract X21, X22, 24
	085 Subtract X29, X22, 32
	086 Subtract D8, D8, D9
	087 Move X0, X21
	088 Move W1, W20
	089 Move X2, X31
	090 Call DynamicBitfield.TestBit, X0, X1
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {182}
	095 Move X8, [X29]
	096 Compare X8, 0
	097 JumpIfEqual {272}
	098 Move W9, [X8+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X8, X8, X20
	101 Move X26, [X8+32]
	102 Move X25, [X8+40]
	103 Move X27, [X8+48]
	104 Move X0, X19
	105 Move X1, X31
	106 Call InputEventPtr.op_Implicit, X0
	107 Compare X25, 0
	108 JumpIfEqual {186}
	109 Move X8, [X25]
	110 Move X1, [X24]
	111 Move X28, X0
	112 NotImplemented "Instruction LDRH not yet implemented."
	113 Compare X9, 0
	114 JumpIfEqual {121}
	115 Move X10, [X8+176]
	116 Add X10, X10, 8
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract X9, X9, 1
	120 Add X10, X10, 16
	121 Move X0, X25
	122 Move W2, W31
	123 Call 0x1C5D788
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Add X8, X8, X9
	126 Add X0, X8, 312
	127 Move X8, [X0]
	128 Move X4, [X0+8]
	129 Move X0, X25
	130 Move X1, X26
	131 Move V0, V8
	132 Move X2, X28
	133 Move X3, X27
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Move X0, X19
	136 Move X1, X31
	137 Call InputEvent.get_handled, X0
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {178}
	142 Move X9, [X29]
	143 Compare X9, 0
	144 JumpIfEqual {272}
	145 Move W8, [X9+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 NotImplemented "Instruction LDRSW not yet implemented."
	148 Add X10, X20, 1
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Add X10, X9, X20
	151 Move W26, [X10+56]
	152 Move X27, X23
	153 Move X28, X20
	154 Move W10, [X9+24]
	155 Add X11, X28, 1
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Add X9, X9, X27
	158 Move W10, [X9+88]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X9, [X9+72]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Add W1, W28, 1
	163 Move X0, X21
	164 Move X2, X31
	165 Call DynamicBitfield.ClearBit, X0, X1
	166 Move W8, [X22]
	167 Add W9, W28, 2
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X9, [X29]
	170 Add X28, X28, 1
	171 Add X27, X27, 32
	172 Compare X9, 0
	173 JumpIfNotEqual {154}
	174 Move X0, X19
	175 Move W1, W31
	176 Move X2, X31
	177 Call InputEvent.set_handled, X0, X1
	178 Move X0, X21
	179 Move W1, W20
	180 Move X2, X31
	181 Call DynamicBitfield.ClearBit, X0, X1
	182 NotImplemented "Instruction LDRSW not yet implemented."
	183 Add X20, X20, 1
	184 Add X23, X23, 32
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Call 0x1C17F20
	187 Move X27, X0
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X0, X27
	190 Call 0x3EB2AD0
	191 Move X27, X0
	192 Move X0, 0x927000
	193 Move X0, [X0+2000]
	194 Call 0x1C17D08
	195 Move X8, [X27]
	196 Move X1, [X8]
	197 Call 0x1C18270
	198 Move TEMP, X0
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfNotEqual {273}
	202 Move X27, [X27]
	203 Call 0x3EB2AE0
	204 Move [X31+8], X27
	205 Compare X27, 0
	206 JumpIfEqual {272}
	207 Move X0, [X31+8]
	208 Move X1, X31
	209 Call Exception.GetType, X0
	210 Compare X0, 0
	211 JumpIfEqual {272}
	212 Move X8, [X0]
	213 Move X9, [X8+424]
	214 Move X1, [X8+432]
	215 NotImplemented "Instruction BLR not yet implemented."
	216 Compare X25, 0
	217 JumpIfEqual {272}
	218 Move X28, X0
	219 Move X0, X25
	220 Move X1, X31
	221 Call "il2cpp_vm_object_is_inst", X0
	222 Compare X0, 0
	223 JumpIfEqual {272}
	224 Move X8, [X0]
	225 Move X9, [X8+424]
	226 Move X1, [X8+432]
	227 NotImplemented "Instruction BLR not yet implemented."
	228 Move X27, X0
	229 Move X0, 0x97C000
	230 Move X0, [X0+1944]
	231 Call 0x1C17D08
	232 Move X1, X28
	233 Move X2, X27
	234 Move X3, X26
	235 Move X4, X31
	236 Call String.Format, X0, X1, X2, X3
	237 Move X26, X0
	238 Move X0, 0x927000
	239 Move X0, [X0+2600]
	240 Call 0x1C17D08
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1C17DFC
	245 Move X0, X26
	246 Move X1, X31
	247 Call Debug.LogError, X0
	248 Move X0, [X31+8]
	249 Move X1, X31
	250 Call Debug.LogException, X0
	251 Move X8, [X31+16]
	252 Move X8, [X8+40]
	253 Move X9, [X31+56]
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move X20, [X31+160]
	256 Move X19, [X31+168]
	257 Move X22, [X31+144]
	258 Move X21, [X31+152]
	259 Move X24, [X31+128]
	260 Move X23, [X31+136]
	261 Move X26, [X31+112]
	262 Move X25, [X31+120]
	263 Move X28, [X31+96]
	264 Move X27, [X31+104]
	265 Move X29, [X31+80]
	266 Move X30, [X31+88]
	267 Move D9, [X31+64]
	268 Move D8, [X31+72]
	269 Add X31, X31, 176
	270 Return 
	271 Call 0x1C17F28
	272 Call 0x1C17F20
	273 Move W0, 8
	274 Call 0x3EB2AF0
	275 Move X8, [X27]
	276 Move [X0], X8
	277 Move X1, 0x6E8000
	278 Add X1, X1, 3672
	279 Move X2, X31
	280 Call 0x3EB2B00
	281 Call 0x3EB2B20
	282 Move X27, X0
	283 Call 0x3EB2AE0
	284 Move X0, X27
	285 Call 0x1D2D690
	286 Call 0x1991590

Method: System.Void ProcessStateChangeMonitorTimeouts()

Disassembly:
	0x037CC3C0 ADD X1, X31, 0xC
	0x037CC3C4 ADD X2, X31, 0x10
	0x037CC3C8 MOVZ W3, 0xA
	0x037CC3CC STP X20, X23, [X31 + 0x10]
	0x037CC3D0 STR X22, [X31 + 0x20]
	0x037CC3D4 STP W31, W8, [X31 + 0x8]
	0x037CC3D8 STP W21, W31, [X31 + 0x28]
	0x037CC3DC BL 0x217522C
	0x037CC3E0 CBZ X20, 0x37CC484
	0x037CC3E4 ADRP X8, 0x94F000
	0x037CC3E8 LDR X8, [X8 + 0xD18]
	0x037CC3EC LDR W9, [X19 + 0x28]
	0x037CC3F0 LDR X0, [X8]
	0x037CC3F4 STR W9, [X31 + 0x8]
	0x037CC3F8 LDR W8, [X0 + 0xE0]
	0x037CC3FC CBNZ W8, 0x37CC404
	0x037CC400 BL 0x1C16DFC
	0x037CC404 LDR X8, [X20 + 0x78]
	0x037CC408 CBZ X8, 0x37CC484
	0x037CC40C ADRP X21, 0x97C000
	0x037CC410 LDR X21, [X21 + 0x7B8]
	0x037CC414 LDR W8, [X8 + 0x14]
	0x037CC418 LDP W9, W2, [X20 + 0x14]
	0x037CC41C LDR W3, [X20 + 0x1C]
	0x037CC420 ADD X0, X31, 0x10
	0x037CC424 MOV X4, X31
	0x037CC428 SUB W1, W9, W8
	0x037CC42C ADD X20, X19, 0x10
	0x037CC430 STR X31, [X31 + 0x10]
	0x037CC434 BL 0x3762F60
	0x037CC438 LDR X2, [X31 + 0x10]
	0x037CC43C LDR X4, [X21]
	0x037CC440 ADD X1, X31, 0x8
	0x037CC444 MOVZ W3, 0xA
	0x037CC448 MOV X0, X19
	0x037CC44C BL 0x21756E4
	0x037CC450 LDR W8, [X19 + 0x28]
	0x037CC454 MOV X0, X20
	0x037CC458 MOV X2, X31
	0x037CC45C ADD W1, W8, 0x1
	0x037CC460 BL 0x37DA854
	0x037CC464 MOVZ W8, 0x1
	0x037CC468 STRB W8, [X19 + 0x30]
	0x037CC46C LDP X20, X19, [X31 + 0x60]
	0x037CC470 LDP X22, X21, [X31 + 0x50]
	0x037CC474 LDP X24, X23, [X31 + 0x40]
	0x037CC478 LDP X30, X25, [X31 + 0x30]
	0x037CC47C ADD X31, X31, 0x70
	0x037CC480 RET
	0x037CC484 BL 0x1C16F20
	0x037CC488 STP X30, X21, [X31 - 0x20]!
	0x037CC48C STP X20, X19, [X31 + 0x10]
	0x037CC490 ADRP X21, 0xC15000
	0x037CC494 ADRP X20, 0x97C000
	0x037CC498 LDRB W8, [X21 + 0x212]
	0x037CC49C LDR X20, [X20 + 0x7C0]
	0x037CC4A0 MOV X19, X0
	0x037CC4A4 TBNZ X8, 0x0, 0x37CC4BC
	0x037CC4A8 ADRP X0, 0x97C000
	0x037CC4AC LDR X0, [X0 + 0x7C0]
	0x037CC4B0 BL 0x1C16CF4
	0x037CC4B4 MOVZ W8, 0x1
	0x037CC4B8 STRB W8, [X21 + 0x212]
	0x037CC4BC LDR X0, [X19 + 0x8]
	0x037CC4C0 LDR W1, [X19 + 0x28]
	0x037CC4C4 LDR X2, [X20]
	0x037CC4C8 ADD X20, X19, 0x10
	0x037CC4CC BL 0x2175B88
	0x037CC4D0 MOV X0, X20
	0x037CC4D4 MOV W1, W31
	0x037CC4D8 MOV X2, X31
	0x037CC4DC BL 0x37DA854
	0x037CC4E0 STRB W31, [X19 + 0x31]
	0x037CC4E4 LDP X20, X19, [X31 + 0x10]
	0x037CC4E8 LDP X30, X21, [X31], #0x20
	0x037CC4EC RET
	0x037CC4F0 SUB X31, X31, 0x70
	0x037CC4F4 STR X30, [X31 + 0x30]
	0x037CC4F8 STP X24, X23, [X31 + 0x40]
	0x037CC4FC STP X22, X21, [X31 + 0x50]
	0x037CC500 STP X20, X19, [X31 + 0x60]
	0x037CC504 ADRP X23, 0xC15000
	0x037CC508 LDRB W8, [X23 + 0x209]
	0x037CC50C MOV X19, X3
	0x037CC510 MOV X20, X2
	0x037CC514 MOV X22, X1
	0x037CC518 MOV X21, X0
	0x037CC51C TBNZ X8, 0x0, 0x37CC540
	0x037CC520 ADRP X0, 0x97C000
	0x037CC524 LDR X0, [X0 + 0x2B8]
	0x037CC528 BL 0x1C16CF4
	0x037CC52C ADRP X0, 0x97C000
	0x037CC530 LDR X0, [X0 + 0x2C0]
	0x037CC534 BL 0x1C16CF4
	0x037CC538 MOVZ W8, 0x1
	0x037CC53C STRB W8, [X23 + 0x209]
	0x037CC540 LDR X8, [X21 + 0x490]
	0x037CC544 CBZ X8, 0x37CC624
	0x037CC548 CBZ X22, 0x37CC63C
	0x037CC54C LDR X9, [X22 + 0x78]
	0x037CC550 CBZ X9, 0x37CC63C
	0x037CC554 LDRSW X9, [X9 + 0xE8]
	0x037CC558 ADDS W31, W9, 0x1
	0x037CC55C B.EQ 0x37CC624
	0x037CC560 LDR W10, [X8 + 0x18]
	0x037CC564 CMP W9, W10
	0x037CC568 B.GE 0x37CC624
	0x037CC56C CMP W9, W10
	0x037CC570 B.CS 0x37CC640
	0x037CC574 LDRB W3, [X21 + 0x428]
	0x037CC578 MOVZ W10, 0x38
	0x037CC57C MADD X8, X9, X10, X8
	0x037CC580 ADD X0, X8, 0x20
	0x037CC584 MOV X1, X20
	0x037CC588 MOV X2, X19
	0x037CC58C BL 0x37CC644
	0x037CC590 LDR W8, [X21 + 0x498]
	0x037CC594 CMP W8, 0x1
	0x037CC598 B.LT 0x37CC624
	0x037CC59C ADRP X23, 0x97C000
	0x037CC5A0 ADRP X24, 0x97C000
	0x037CC5A4 LDR X23, [X23 + 0x2B8]
	0x037CC5A8 LDR X24, [X24 + 0x2C0]
	0x037CC5AC MOV W22, W31
	0x037CC5B0 ADD X21, X21, 0x498
	0x037CC5B4 LDR X2, [X23]
	0x037CC5B8 ADD X8, X31, 0x0
	0x037CC5BC MOV X0, X21
	0x037CC5C0 MOV W1, W22
	0x037CC5C4 BL 0x2DF4D8C
	0x037CC5C8 LDR X8, [X31 + 0x10]
	0x037CC5CC CMP X8, X20
	0x037CC5D0 B.NE 0x37CC614
	0x037CC5D4 LDR X2, [X23]
	0x037CC5D8 ADD X8, X31, 0x0
	0x037CC5DC MOV X0, X21
	0x037CC5E0 MOV W1, W22
	0x037CC5E4 BL 0x2DF4D8C
	0x037CC5E8 LDR X8, [X31 + 0x18]
	0x037CC5EC CMP X8, X19
	0x037CC5F0 B.NE 0x37CC614
	0x037CC5F4 LDR X3, [X24]
	0x037CC5F8 MOVI V0.2D, 0x0
	0x037CC5FC ADD X2, X31, 0x0
	0x037CC600 MOV X0, X21
	0x037CC604 MOV W1, W22
	0x037CC608 STR X31, [X31 + 0x20]
	0x037CC60C STP V0, V0, [X31]
	0x037CC610 BL 0x2DF4E38
	0x037CC614 LDR W8, [X21]
	0x037CC618 ADD W22, W22, 0x1
	0x037CC61C CMP W22, W8
	0x037CC620 B.LT 0x37CC5B4
	0x037CC624 LDP X20, X19, [X31 + 0x60]
	0x037CC628 LDP X22, X21, [X31 + 0x50]
	0x037CC62C LDP X24, X23, [X31 + 0x40]
	0x037CC630 LDR X30, [X31 + 0x30]
	0x037CC634 ADD X31, X31, 0x70
	0x037CC638 RET
	0x037CC63C BL 0x1C16F20
	0x037CC640 BL 0x1C16F28
	0x037CC644 STP X30, X19, [X31 - 0x10]!
	0x037CC648 LDR X10, [X0 + 0x8]
	0x037CC64C CBZ X10, 0x37CC6A4
	0x037CC650 LDRSW X9, [X0 + 0x28]
	0x037CC654 MOV X19, X0
	0x037CC658 CMP W9, 0x1
	0x037CC65C B.LT 0x37CC6A4
	0x037CC660 LDR W11, [X10 + 0x18]
	0x037CC664 MOV X8, X1
	0x037CC668 MOV X1, X31
	0x037CC66C ADD X0, X19, 0x10
	0x037CC670 ADD X10, X10, 0x30

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D8
	003 Move [X31+104], X30
	004 Move [X31+112], X28
	005 Move [X31+120], X27
	006 Move [X31+128], X26
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X20, 0xC16000
	015 Move W8, [X20+527]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x950000
	022 Move X0, [X0+3792]
	023 Call 0x1C17CF4
	024 Move X0, 0x97D000
	025 Move X0, [X0+1904]
	026 Call 0x1C17CF4
	027 Move X0, 0x97D000
	028 Move X0, [X0+1912]
	029 Call 0x1C17CF4
	030 Move X0, 0x97D000
	031 Move X0, [X0+696]
	032 Call 0x1C17CF4
	033 Move X0, 0x97D000
	034 Move X0, [X0+704]
	035 Call 0x1C17CF4
	036 Move X0, 0x950000
	037 Move X0, [X0+3784]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+527], W8
	041 Move W8, [X19+1176]
	042 Compare W8, 0
	043 JumpIfEqual {171}
	044 Move X20, [X19+1088]
	045 Compare X20, 0
	046 JumpIfEqual {185}
	047 Move X10, 0x950000
	048 Move X8, [X20]
	049 Move X10, [X10+3792]
	050 Add X19, X19, 1176
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 Move X1, [X10]
	053 Compare X9, 0
	054 JumpIfEqual {61}
	055 Move X10, [X8+176]
	056 Add X10, X10, 8
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Subtract X9, X9, 1
	060 Add X10, X10, 16
	061 Move W2, 19
	062 Move X0, X20
	063 Call 0x1C5D788
	064 Move W9, [X10]
	065 Add W9, W9, 19
	066 Add X8, X8, W9
	067 Add X0, X8, 312
	068 Move X8, [X0]
	069 Move X1, [X0+8]
	070 Move X0, X20
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move W8, [X19]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X8, 0x950000
	075 Move X8, [X8+3784]
	076 Move X26, 0x97D000
	077 Move X27, 0x97D000
	078 Move X28, 0x97D000
	079 Move X8, [X8]
	080 Move W20, W31
	081 Move W21, W31
	082 Move X8, [X8+184]
	083 Move V1, [X8+8]
	084 Move X26, [X26+696]
	085 Move X27, [X27+704]
	086 Move X28, [X28+1904]
	087 Subtract D8, D0, D1
	088 Move X2, [X26]
	089 Add X8, X31, 48
	090 Move X0, X19
	091 Move W1, W21
	092 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	093 Move X8, [X31+48]
	094 Compare X8, 0
	095 JumpIfEqual {161}
	096 Move X2, [X26]
	097 Add X8, X31, 48
	098 Move X0, X19
	099 Move W1, W21
	100 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	101 Move V0, [X31+56]
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X2, [X26]
	105 Add X8, X31, 48
	106 Move X0, X19
	107 Move W1, W21
	108 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	109 Move X8, [X31+80]
	110 Move V1, [X31+48]
	111 Move V0, [X31+64]
	112 Move X3, [X27]
	113 Add X2, X31, 48
	114 Move X0, X19
	115 Move W1, W20
	116 Move [X31+32], X8
	117 Move [X31], V1
	118 Move [X31+8], V0
	119 Move [X31+48], V1
	120 Move [X31+56], V0
	121 Move [X31+80], X8
	122 Call InlinedArray`1<StateChangeMonitorTimeout>.set_Item, X0, X1, X2
	123 Add W20, W20, 1
	124 Move X2, [X26]
	125 Add X8, X31, 48
	126 Move X0, X19
	127 Move W1, W21
	128 Call InlinedArray`1<StateChangeMonitorTimeout>.get_Item, X0, X1
	129 Move X22, [X31+64]
	130 Compare X22, 0
	131 JumpIfEqual {185}
	132 Move X8, [X22]
	133 Move X25, [X31+48]
	134 Move X24, [X31+72]
	135 Move W23, [X31+80]
	136 NotImplemented "Instruction LDRH not yet implemented."
	137 Move X1, [X28]
	138 Compare X9, 0
	139 JumpIfEqual {146}
	140 Move X10, [X8+176]
	141 Add X10, X10, 8
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Subtract X9, X9, 1
	145 Add X10, X10, 16
	146 Move W2, 1
	147 Move X0, X22
	148 Call 0x1C5D788
	149 Move W9, [X10]
	150 Add W9, W9, 1
	151 Add X8, X8, W9
	152 Add X0, X8, 312
	153 Move X8, [X0]
	154 Move X4, [X0+8]
	155 Move X0, X22
	156 Move X1, X25
	157 Move V0, V8
	158 Move X2, X24
	159 Move W3, W23
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move W8, [X19]
	162 Add W21, W21, 1
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W20, W31
	165 Move X8, 0x97D000
	166 Move X8, [X8+1912]
	167 Move X0, X19
	168 Move W1, W20
	169 Move X2, [X8]
	170 Call InlinedArray`1<StateChangeMonitorTimeout>.SetLength, X0, X1
	171 Move X20, [X31+176]
	172 Move X19, [X31+184]
	173 Move X22, [X31+160]
	174 Move X21, [X31+168]
	175 Move X24, [X31+144]
	176 Move X23, [X31+152]
	177 Move X26, [X31+128]
	178 Move X25, [X31+136]
	179 Move X28, [X31+112]
	180 Move X27, [X31+120]
	181 Move X30, [X31+104]
	182 Move V8, [X31+96]
	183 Add X31, X31, 192
	184 Return 
	185 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x037CDC2C LDP X20, X19, [X31 + 0x30]
	0x037CDC30 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Int64 <TryFindMatchingControlLayout>b__72_0(ref UnityEngine.InputSystem.LowLevel.InputDeviceCommand commandRef)

Disassembly:
	0x037CDC34 LDP X30, X23, [X31 + 0x10]
	0x037CDC38 ADD X31, X31, 0x40
	0x037CDC3C RET
	0x037CDC40 BL 0x1C16F20
	0x037CDC44 BL 0x1C16F28
	0x037CDC48 LDRB W0, [X0 + 0x5C]
	0x037CDC4C RET
	0x037CDC50 LDRB W9, [X0 + 0x5C]
	0x037CDC54 AND W8, W1, 0x1
	0x037CDC58 CMP W9, W8
	0x037CDC5C B.NE 0x37CDC64
	0x037CDC60 RET
	0x037CDC64 STRB W8, [X0 + 0x5C]
	0x037CDC68 B 0x37CD80C
	0x037CDC6C LDRB W0, [X0 + 0x5D]
	0x037CDC70 RET
	0x037CDC74 LDRB W9, [X0 + 0x5D]
	0x037CDC78 AND W8, W1, 0x1
	0x037CDC7C CMP W9, W8
	0x037CDC80 B.NE 0x37CDC88
	0x037CDC84 RET
	0x037CDC88 STRB W8, [X0 + 0x5D]
	0x037CDC8C B 0x37CD80C
	0x037CDC90 STR X30, [X31 - 0x30]!
	0x037CDC94 STP X22, X21, [X31 + 0x10]
	0x037CDC98 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC15000
	006 Move W8, [X21+528]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x97C000
	014 Move X0, [X0+2016]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+528], W8
	018 Move W1, [X20+1080]
	019 Compare W1, 0
	020 JumpIfEqual {32}
	021 Move X8, 0x97C000
	022 Move X8, [X8+2016]
	023 Move X0, [X20+1088]
	024 Move X2, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X3, [X8]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call InputRuntimeExtensions.DeviceCommand, X0, X1, X2
	031 Return X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move TEMP, 0
	035 Not TEMP
	036 Move X0, TEMP
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

