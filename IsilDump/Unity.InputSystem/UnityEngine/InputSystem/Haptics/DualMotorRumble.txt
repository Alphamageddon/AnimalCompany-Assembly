Type: UnityEngine.InputSystem.Haptics.DualMotorRumble

Method: System.Single get_lowFrequencyMotorSpeed()

Disassembly:
	0x037FF198 ADRP X0, 0x94A000
	0x037FF19C LDR X0, [X0 + 0xFE0]

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Void set_lowFrequencyMotorSpeed(System.Single value)

Disassembly:
	0x037FF1A0 BL 0x1C16D08
	0x037FF1A4 MOV X1, X0

ISIL:
	001 Move [X0], S0
	002 Return 

Method: System.Single get_highFrequencyMotorSpeed()

Disassembly:
	0x037FF1A8 MOV X0, X19
	0x037FF1AC BL 0x1C16DEC

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Void set_highFrequencyMotorSpeed(System.Single value)

Disassembly:
	0x037FF1B0 MOVZ W8, 0x100
	0x037FF1B4 STR W8, [X31 + 0xC]

ISIL:
	001 Move [X0+4], S0
	002 Return 

Method: System.Boolean get_isRumbling()

Disassembly:
	0x037FF1B8 ADRP X0, 0x8F4000
	0x037FF1BC LDR X0, [X0 + 0x758]
	0x037FF1C0 MOV X19, X1
	0x037FF1C4 BL 0x1C16D08
	0x037FF1C8 ADD X1, X31, 0xC
	0x037FF1CC BL 0x1C16E04
	0x037FF1D0 MOV X20, X0
	0x037FF1D4 ADRP X0, 0x94A000
	0x037FF1D8 LDR X0, [X0 + 0xFE8]
	0x037FF1DC BL 0x1C16D08
	0x037FF1E0 MOV X1, X19
	0x037FF1E4 MOV X2, X20
	0x037FF1E8 MOV X3, X31
	0x037FF1EC BL 0x3227BD4
	0x037FF1F0 MOV X19, X0
	0x037FF1F4 ADRP X0, 0x8FC000
	0x037FF1F8 LDR X0, [X0 + 0x578]
	0x037FF1FC BL 0x1C16D08
	0x037FF200 BL 0x1C16F10
	0x037FF204 MOV X20, X0
	0x037FF208 ADRP X0, 0x8FE000
	0x037FF20C LDR X0, [X0 + 0xEC8]
	0x037FF210 BL 0x1C16D08
	0x037FF214 MOV X2, X0
	0x037FF218 MOV X0, X20
	0x037FF21C MOV X1, X19
	0x037FF220 MOV X3, X31
	0x037FF224 BL 0x330E16C
	0x037FF228 ADRP X0, 0x94A000
	0x037FF22C LDR X0, [X0 + 0xFE0]
	0x037FF230 BL 0x1C16D08
	0x037FF234 MOV X1, X0
	0x037FF238 MOV X0, X20
	0x037FF23C BL 0x1C16DEC
	0x037FF240 STR X30, [X31 - 0x10]!
	0x037FF244 ADD X0, X31, 0x8
	0x037FF248 MOVZ W1, 0x50
	0x037FF24C MOVZ W2, 0x41
	0x037FF250 MOVZ W3, 0x43
	0x037FF254 MOVZ W4, 0x43
	0x037FF258 MOV X5, X31
	0x037FF25C STR W31, [X31 + 0x8]
	0x037FF260 BL 0x375AA28
	0x037FF264 LDR W0, [X31 + 0x8]
	0x037FF268 LDR X30, [X31], #0x10
	0x037FF26C RET

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBDB000
	006 Move W8, [X20+1450]
	007 Move V8, [X0]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x8FC000
	012 Move X0, [X0+1208]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1450], W8
	016 Move X8, 0x8FC000
	017 Move X8, [X8+1208]
	018 Move X9, -47267840
	019 Move V1, [X9+576]
	020 NotImplemented "Instruction FABS not yet implemented."
	021 Move X8, [X8]
	022 Move S0, W31
	023 Move S4, 8
	024 NotImplemented "Instruction FMAXNM not yet implemented."
	025 Move X8, [X8+184]
	026 Multiply S5, S2, S1
	027 Move V3, [X8]
	028 Multiply S2, S3, S4
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 NotImplemented "Instruction FCSEL not yet implemented."
	031 NotImplemented "Instruction FABD not yet implemented."
	032 NotImplemented "Instruction FCMP not yet implemented."
	033 Move V3, [X19+4]
	034 NotImplemented "Instruction FABS not yet implemented."
	035 NotImplemented "Instruction FMAXNM not yet implemented."
	036 Multiply S1, S4, S1
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCSEL not yet implemented."
	039 NotImplemented "Instruction FABD not yet implemented."
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 NotImplemented "Instruction CSET not yet implemented."
	042 Move W0, 1
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+8]
	046 Move V8, [X31+32]
	047 Return X0

Method: System.Void PauseHaptics(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037FF270 SUB X31, X31, 0x20
	0x037FF274 STP X30, X19, [X31 + 0x10]
	0x037FF278 ADD X0, X31, 0x8
	0x037FF27C MOVZ W1, 0x50
	0x037FF280 MOVZ W2, 0x41
	0x037FF284 MOVZ W3, 0x43
	0x037FF288 MOVZ W4, 0x43
	0x037FF28C MOV X5, X31
	0x037FF290 MOV X19, X8
	0x037FF294 STR W31, [X31 + 0x8]
	0x037FF298 BL 0x375AA28
	0x037FF29C LDR W8, [X31 + 0x8]
	0x037FF2A0 MOVZ X9, 0x410
	0x037FF2A4 MOVZ W2, 0x408
	0x037FF2A8 MOV W1, W31
	0x037FF2AC ORR X8, X8, X9, 0x0
	0x037FF2B0 STR X8, [X19], #0x8
	0x037FF2B4 MOV X0, X19
	0x037FF2B8 BL 0x3EB1B10
	0x037FF2BC LDP X30, X19, [X31 + 0x10]
	0x037FF2C0 ADD X31, X31, 0x20
	0x037FF2C4 RET
	0x037FF2C8 STR X30, [X31 - 0x10]!
	0x037FF2CC ADD X0, X31, 0x8
	0x037FF2D0 MOVZ W1, 0x53
	0x037FF2D4 MOVZ W2, 0x4D
	0x037FF2D8 MOVZ W3, 0x50
	0x037FF2DC MOVZ W4, 0x4C
	0x037FF2E0 MOV X5, X31
	0x037FF2E4 STR W31, [X31 + 0x8]
	0x037FF2E8 BL 0x375AA28
	0x037FF2EC LDR W0, [X31 + 0x8]
	0x037FF2F0 LDR X30, [X31], #0x10
	0x037FF2F4 RET
	0x037FF2F8 STR X30, [X31 - 0x10]!
	0x037FF2FC ADD X0, X31, 0x8
	0x037FF300 MOVZ W1, 0x53
	0x037FF304 MOVZ W2, 0x4D
	0x037FF308 MOVZ W3, 0x50
	0x037FF30C MOVZ W4, 0x4C
	0x037FF310 MOV X5, X31
	0x037FF314 STR W31, [X31 + 0x8]
	0x037FF318 BL 0x375AA28
	0x037FF31C LDR W0, [X31 + 0x8]
	0x037FF320 LDR X30, [X31], #0x10
	0x037FF324 RET
	0x037FF328 STR X30, [X31 - 0x10]!
	0x037FF32C ADD X0, X31, 0x8
	0x037FF330 MOVZ W1, 0x53
	0x037FF334 MOVZ W2, 0x4D
	0x037FF338 MOVZ W3, 0x50
	0x037FF33C MOVZ W4, 0x4C
	0x037FF340 MOV X5, X31
	0x037FF344 STR W31, [X31 + 0x8]
	0x037FF348 BL 0x375AA28
	0x037FF34C LDR W8, [X31 + 0x8]
	0x037FF350 MOV X1, X31
	0x037FF354 ORR X0, X8, 0xFFFFFFFFF
	0x037FF358 LDR X30, [X31], #0x10
	0x037FF35C RET
	0x037FF360 STR X30, [X31 - 0x10]!
	0x037FF364 ADD X0, X31, 0x8
	0x037FF368 MOVZ W1, 0x55
	0x037FF36C MOVZ W2, 0x53
	0x037FF370 MOVZ W3, 0x45
	0x037FF374 MOVZ W4, 0x52
	0x037FF378 MOV X5, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0xBE3000
	010 Move X19, X1
	011 Move X20, X0
	012 Move [X31+24], X8
	013 Move W8, [X22+1025]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x94B000
	019 Move X0, [X0+4000]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1025], W8
	023 Move [X31+8], X31
	024 Move [X31+16], X31
	025 Compare X19, 0
	026 JumpIfEqual {61}
	027 Move X0, X20
	028 Call DualMotorRumble.get_isRumbling, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {51}
	033 Add X0, X31, 0
	034 Move W1, 82
	035 Move W2, 77
	036 Move W3, 66
	037 Move W4, 76
	038 Move X5, X31
	039 Move [X31], W31
	040 Call FourCC..ctor, X0, X1, X2, X3, X4
	041 Move X9, 0x94B000
	042 Move W8, [X31]
	043 Move X9, [X9+4000]
	044 Add X1, X31, 8
	045 Move X0, X19
	046 Or X8, X8, 0x1FFFFFFFFF
	047 Move X2, [X9]
	048 Move [X31+8], X8
	049 Move [X31+16], X31
	050 Call InputDevice.ExecuteCommand, X0, X1
	051 Move X8, [X21+40]
	052 Move X9, [X31+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, [X31+64]
	055 Move X19, [X31+72]
	056 Move X22, [X31+48]
	057 Move X21, [X31+56]
	058 Move X30, [X31+32]
	059 Add X31, X31, 80
	060 Return 
	061 Move X0, 0x8FA000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0x91D000
	067 Move X0, [X0+3360]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Move X2, X31
	072 Call ArgumentNullException..ctor, X0, X1
	073 Move X0, 0x94B000
	074 Move X0, [X0+4008]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Call 0x1C17DEC
	079 Call 0x3EB2B20

Method: System.Void ResumeHaptics(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037FF3CC RET
	0x037FF3D0 SUB X31, X31, 0x20
	0x037FF3D4 STP X30, X19, [X31 + 0x10]
	0x037FF3D8 ADD X0, X31, 0x8
	0x037FF3DC MOVZ W1, 0x55
	0x037FF3E0 MOVZ W2, 0x53
	0x037FF3E4 MOVZ W3, 0x45
	0x037FF3E8 MOVZ W4, 0x52
	0x037FF3EC MOV X5, X31
	0x037FF3F0 MOV X19, X8
	0x037FF3F4 STR W31, [X31 + 0x8]
	0x037FF3F8 BL 0x375AA28
	0x037FF3FC LDR W8, [X31 + 0x8]
	0x037FF400 MOVZ X9, 0x208
	0x037FF404 MOVZ W2, 0x200
	0x037FF408 MOV W1, W31
	0x037FF40C ORR X8, X8, X9, 0x0
	0x037FF410 STR X8, [X19], #0x8
	0x037FF414 MOV X0, X19
	0x037FF418 BL 0x3EB1B10
	0x037FF41C LDP X30, X19, [X31 + 0x10]
	0x037FF420 ADD X31, X31, 0x20
	0x037FF424 RET
	0x037FF428 STR X30, [X31 - 0x10]!
	0x037FF42C ADD X0, X31, 0x8
	0x037FF430 MOVZ W1, 0x52
	0x037FF434 MOVZ W2, 0x53
	0x037FF438 MOVZ W3, 0x45
	0x037FF43C MOVZ W4, 0x54
	0x037FF440 MOV X5, X31
	0x037FF444 STR W31, [X31 + 0x8]
	0x037FF448 BL 0x375AA28
	0x037FF44C LDR W0, [X31 + 0x8]
	0x037FF450 LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {24}
	006 Move X19, X1
	007 Move X20, X0
	008 Call DualMotorRumble.get_isRumbling, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {20}
	013 Move S0, [X20]
	014 Move S1, [X20+4]
	015 Move X0, X20
	016 Move X1, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return 
	024 Move X0, 0x8FA000
	025 Move X0, [X0+1320]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Move X0, 0x91D000
	030 Move X0, [X0+3360]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Move X2, X31
	035 Call ArgumentNullException..ctor, X0, X1
	036 Move X0, 0x94B000
	037 Move X0, [X0+4016]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Call 0x1C17DEC

Method: System.Void ResetHaptics(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x037FF594 MOVZ W2, 0x4D
	0x037FF598 MOVZ W3, 0x45
	0x037FF59C MOVZ W4, 0x50
	0x037FF5A0 MOV X5, X31
	0x037FF5A4 STR W31, [X31 + 0x8]
	0x037FF5A8 BL 0x375AA28
	0x037FF5AC LDR W0, [X31 + 0x8]
	0x037FF5B0 LDR X30, [X31], #0x10
	0x037FF5B4 RET
	0x037FF5B8 STP D9, D8, [X31 - 0x20]!
	0x037FF5BC STR X30, [X31 + 0x10]
	0x037FF5C0 ADD X0, X31, 0x18
	0x037FF5C4 MOVZ W1, 0x49
	0x037FF5C8 MOVZ W2, 0x4D
	0x037FF5CC MOVZ W3, 0x45
	0x037FF5D0 MOVZ W4, 0x50
	0x037FF5D4 MOV X5, X31
	0x037FF5D8 MOV V8.16B, V1.16B
	0x037FF5DC MOV V9.16B, V0.16B
	0x037FF5E0 STR W31, [X31 + 0x18]
	0x037FF5E4 BL 0x375AA28
	0x037FF5E8 LDR W8, [X31 + 0x18]
	0x037FF5EC LDR X30, [X31 + 0x10]
	0x037FF5F0 FMOV W1, S9
	0x037FF5F4 FMOV W9, S8
	0x037FF5F8 ORR X0, X8, 0x1FFFFFFFFF
	0x037FF5FC BFM X1, X9, 0x20, 0x1F
	0x037FF600 LDP D9, D8, [X31], #0x20
	0x037FF604 RET
	0x037FF608 STR X30, [X31 - 0x10]!
	0x037FF60C ADD X0, X31, 0x8
	0x037FF610 MOVZ W1, 0x53
	0x037FF614 MOVZ W2, 0x53
	0x037FF618 MOVZ W3, 0x50
	0x037FF61C MOVZ W4, 0x4C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {26}
	006 Move X19, X1
	007 Move X20, X0
	008 Call DualMotorRumble.get_isRumbling, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {22}
	013 Move X0, X20
	014 Move X1, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move S0, W31
	018 Move S1, W31
	019 Move X30, [X31+32]
	020 Call DualMotorRumble.SetMotorSpeeds, X0, X1, V0, V1
	021 Return 
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return 
	026 Move X0, 0x8FA000
	027 Move X0, [X0+1320]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0x91D000
	032 Move X0, [X0+3360]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Move X2, X31
	037 Call ArgumentNullException..ctor, X0, X1
	038 Move X0, 0x94B000
	039 Move X0, [X0+4032]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Call 0x1C17DEC

Method: System.Void SetMotorSpeeds(UnityEngine.InputSystem.InputDevice device, System.Single lowFrequency, System.Single highFrequency)

Disassembly:
	0x037FF454 RET
	0x037FF458 STR X30, [X31 - 0x10]!
	0x037FF45C ADD X0, X31, 0x8
	0x037FF460 MOVZ W1, 0x52
	0x037FF464 MOVZ W2, 0x53
	0x037FF468 MOVZ W3, 0x45
	0x037FF46C MOVZ W4, 0x54
	0x037FF470 MOV X5, X31
	0x037FF474 STR W31, [X31 + 0x8]
	0x037FF478 BL 0x375AA28
	0x037FF47C LDR W0, [X31 + 0x8]
	0x037FF480 LDR X30, [X31], #0x10
	0x037FF484 RET
	0x037FF488 STR X30, [X31 - 0x10]!
	0x037FF48C ADD X0, X31, 0x8
	0x037FF490 MOVZ W1, 0x52
	0x037FF494 MOVZ W2, 0x53
	0x037FF498 MOVZ W3, 0x45
	0x037FF49C MOVZ W4, 0x54
	0x037FF4A0 MOV X5, X31
	0x037FF4A4 STR W31, [X31 + 0x8]
	0x037FF4A8 BL 0x375AA28
	0x037FF4AC LDR W8, [X31 + 0x8]
	0x037FF4B0 ORR X0, X8, 0xFFFFFFFFF
	0x037FF4B4 LDR X30, [X31], #0x10
	0x037FF4B8 RET
	0x037FF4BC STR X30, [X31 - 0x10]!
	0x037FF4C0 ADD X0, X31, 0x8
	0x037FF4C4 MOVZ W1, 0x53
	0x037FF4C8 MOVZ W2, 0x59
	0x037FF4CC MOVZ W3, 0x4E
	0x037FF4D0 MOVZ W4, 0x43
	0x037FF4D4 MOV X5, X31
	0x037FF4D8 STR W31, [X31 + 0x8]
	0x037FF4DC BL 0x375AA28
	0x037FF4E0 LDR W0, [X31 + 0x8]
	0x037FF4E4 LDR X30, [X31], #0x10
	0x037FF4E8 RET
	0x037FF4EC STR X30, [X31 - 0x10]!
	0x037FF4F0 ADD X0, X31, 0x8
	0x037FF4F4 MOVZ W1, 0x53
	0x037FF4F8 MOVZ W2, 0x59
	0x037FF4FC MOVZ W3, 0x4E
	0x037FF500 MOVZ W4, 0x43
	0x037FF504 MOV X5, X31
	0x037FF508 STR W31, [X31 + 0x8]
	0x037FF50C BL 0x375AA28
	0x037FF510 LDR W0, [X31 + 0x8]
	0x037FF514 LDR X30, [X31], #0x10
	0x037FF518 RET
	0x037FF51C STR X30, [X31 - 0x10]!
	0x037FF520 ADD X0, X31, 0x8
	0x037FF524 MOVZ W1, 0x53
	0x037FF528 MOVZ W2, 0x59
	0x037FF52C MOVZ W3, 0x4E
	0x037FF530 MOVZ W4, 0x43
	0x037FF534 MOV X5, X31
	0x037FF538 STR W31, [X31 + 0x8]
	0x037FF53C BL 0x375AA28
	0x037FF540 LDR W8, [X31 + 0x8]
	0x037FF544 ORR X0, X8, 0xFFFFFFFFF
	0x037FF548 LDR X30, [X31], #0x10
	0x037FF54C RET
	0x037FF550 STR X30, [X31 - 0x10]!
	0x037FF554 ADD X0, X31, 0x8
	0x037FF558 MOVZ W1, 0x49
	0x037FF55C MOVZ W2, 0x4D
	0x037FF560 MOVZ W3, 0x45
	0x037FF564 MOVZ W4, 0x50
	0x037FF568 MOV X5, X31
	0x037FF56C STR W31, [X31 + 0x8]
	0x037FF570 BL 0x375AA28
	0x037FF574 LDR W0, [X31 + 0x8]
	0x037FF578 LDR X30, [X31], #0x10
	0x037FF57C RET
	0x037FF580 LDP S0, S1, [X0 + 0x8]
	0x037FF584 RET
	0x037FF588 STR X30, [X31 - 0x10]!
	0x037FF58C ADD X0, X31, 0x8
	0x037FF590 MOVZ W1, 0x49

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 NotImplemented "Instruction MRS not yet implemented."
	010 Move X8, [X21+40]
	011 Move X22, 0xBE3000
	012 Move V8, V1
	013 Move V9, V0
	014 Move [X31+24], X8
	015 Move W8, [X22+1026]
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x94B000
	023 Move X0, [X0+4000]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1026], W8
	027 Move [X31+8], X31
	028 Move [X31+16], X31
	029 Compare X19, 0
	030 JumpIfEqual {74}
	031 Move X22, 0x94B000
	032 Move S0, 1
	033 Move X22, [X22+4000]
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move S1, W31
	036 NotImplemented "Instruction FMIN not yet implemented."
	037 NotImplemented "Instruction FMIN not yet implemented."
	038 NotImplemented "Instruction FCSEL not yet implemented."
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 NotImplemented "Instruction FCSEL not yet implemented."
	041 Add X0, X31, 0
	042 Move W1, 82
	043 Move W2, 77
	044 Move W3, 66
	045 Move W4, 76
	046 Move X5, X31
	047 Move [X20], S9
	048 Move [X20+8], S8
	049 Move [X31], W31
	050 Call FourCC..ctor, X0, X1, X2, X3, X4
	051 Move W8, [X31]
	052 Move X2, [X22]
	053 Move W9, S9
	054 Move W10, S8
	055 NotImplemented "Instruction BFM not yet implemented."
	056 Or X8, X8, 0x1FFFFFFFFF
	057 Add X1, X31, 8
	058 Move X0, X19
	059 Move [X31+8], X8
	060 Move [X31+16], X9
	061 Call InputDevice.ExecuteCommand, X0, X1
	062 Move X8, [X21+40]
	063 Move X9, [X31+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X20, [X31+80]
	066 Move X19, [X31+88]
	067 Move X22, [X31+64]
	068 Move X21, [X31+72]
	069 Move X30, [X31+48]
	070 Move D9, [X31+32]
	071 Move D8, [X31+40]
	072 Add X31, X31, 96
	073 Return 
	074 Move X0, 0x8FA000
	075 Move X0, [X0+1320]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X19, X0
	079 Move X0, 0x91D000
	080 Move X0, [X0+3360]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X19
	084 Move X2, X31
	085 Call ArgumentNullException..ctor, X0, X1
	086 Move X0, 0x94B000
	087 Move X0, [X0+4024]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC
	092 Call 0x3EB2B20

