Type: UnityEngine.InputSystem.InputActionRebindingExtensions/ParameterEnumerator

Method: System.Void .ctor(UnityEngine.InputSystem.InputActionState state, UnityEngine.InputSystem.InputActionRebindingExtensions/ParameterOverride parameter, System.Int32 mapIndex = -1)

Disassembly:
	0x03743318 MOV X0, X19
	0x0374331C BL 0x1C16DEC
	0x03743320 SUB X31, X31, 0x30
	0x03743324 STR X30, [X31 + 0x10]
	0x03743328 STP X20, X19, [X31 + 0x20]
	0x0374332C MOV X19, X1
	0x03743330 MOV X20, X0
	0x03743334 BL 0x37432C4
	0x03743338 ADD X0, X31, 0x0
	0x0374333C MOV X1, X19
	0x03743340 MOV X2, X31
	0x03743344 STP X31, X31, [X31]
	0x03743348 BL 0x3757420
	0x0374334C LDR V0, [X31]
	0x03743350 MOV X0, X20
	0x03743354 LDR X30, [X31 + 0x10]
	0x03743358 STR V0, [X20 + 0x8]
	0x0374335C LDP X20, X19, [X31 + 0x20]
	0x03743360 ADD X31, X31, 0x30
	0x03743364 RET
	0x03743368 STR X30, [X31 - 0x20]!
	0x0374336C STP X20, X19, [X31 + 0x10]
	0x03743370 MOV X20, X1
	0x03743374 MOV X19, X0
	0x03743378 BL 0x37432C4
	0x0374337C CBZ X20, 0x37433AC
	0x03743380 MOV X0, X20
	0x03743384 MOV X1, X31
	0x03743388 BL 0x3771F68
	0x0374338C MOV X20, X0
	0x03743390 MOV X0, X19
	0x03743394 BL 0x37432C4
	0x03743398 STR X20, [X19 + 0xC0]
	0x0374339C MOV X0, X19
	0x037433A0 LDP X20, X19, [X31 + 0x10]
	0x037433A4 LDR X30, [X31], #0x20
	0x037433A8 RET
	0x037433AC ADRP X0, 0x9B5000
	0x037433B0 LDR X0, [X0 + 0x528]
	0x037433B4 BL 0x1C16D08
	0x037433B8 BL 0x1C16F10
	0x037433BC MOV X19, X0
	0x037433C0 ADRP X0, 0x9D8000
	0x037433C4 LDR X0, [X0 + 0xD60]
	0x037433C8 BL 0x1C16D08
	0x037433CC MOV X1, X0
	0x037433D0 MOV X0, X19
	0x037433D4 MOV X2, X31
	0x037433D8 BL 0x330E100
	0x037433DC ADRP X0, 0xA02000
	0x037433E0 LDR X0, [X0 + 0x698]
	0x037433E4 BL 0x1C16D08
	0x037433E8 MOV X1, X0
	0x037433EC MOV X0, X19
	0x037433F0 BL 0x1C16DEC
	0x037433F4 STR X30, [X31 - 0x30]!
	0x037433F8 STP X22, X21, [X31 + 0x10]
	0x037433FC STP X20, X19, [X31 + 0x20]
	0x03743400 ADRP X22, 0xC9D000
	0x03743404 ADRP X21, 0x9B0000
	0x03743408 LDRB W8, [X22 + 0xD56]
	0x0374340C LDR X21, [X21 + 0x6C0]
	0x03743410 MOV X19, X1
	0x03743414 MOV X20, X0
	0x03743418 TBNZ X8, 0x0, 0x374343C
	0x0374341C ADRP X0, 0xA02000
	0x03743420 LDR X0, [X0 + 0x6A0]
	0x03743424 BL 0x1C16CF4
	0x03743428 ADRP X0, 0x9B0000
	0x0374342C LDR X0, [X0 + 0x6C0]
	0x03743430 BL 0x1C16CF4
	0x03743434 MOVZ W8, 0x1
	0x03743438 STRB W8, [X22 + 0xD56]
	0x0374343C MOV X0, X20
	0x03743440 BL 0x37432C4
	0x03743444 LDR X0, [X21]
	0x03743448 LDR W8, [X0 + 0xE0]
	0x0374344C CBNZ W8, 0x3743454
	0x03743450 BL 0x1C16DFC
	0x03743454 MOV X0, X19
	0x03743458 MOV X1, X31
	0x0374345C MOV X2, X31
	0x03743460 BL 0x3395F0C
	0x03743464 TBZ X0, 0x0, 0x37434AC
	0x03743468 ADRP X8, 0xA02000
	0x0374346C LDR X0, [X21]
	0x03743470 LDR X8, [X8 + 0x6A0]
	0x03743474 LDR W9, [X0 + 0xE0]
	0x03743478 LDR X21, [X8]
	0x0374347C CBNZ W9, 0x3743484
	0x03743480 BL 0x1C16DFC
	0x03743484 MOV X0, X21
	0x03743488 MOV X1, X31
	0x0374348C BL 0x338C698
	0x03743490 CBZ X0, 0x37434C4
	0x03743494 LDR X8, [X0]
	0x03743498 MOV X1, X19
	0x0374349C LDR X9, [X8 + 0x2A8]
	0x037434A0 LDR X2, [X8 + 0x2B0]
	0x037434A4 BLR X9
	0x037434A8 TBZ X0, 0x0, 0x37434C8
	0x037434AC STR X19, [X20 + 0x78]
	0x037434B0 MOV X0, X20
	0x037434B4 LDP X20, X19, [X31 + 0x20]
	0x037434B8 LDP X22, X21, [X31 + 0x10]
	0x037434BC LDR X30, [X31], #0x30
	0x037434C0 RET
	0x037434C4 BL 0x1C16F20
	0x037434C8 MOV X0, X19
	0x037434CC BL 0x19903C0
	0x037434D0 LDR X8, [X19]
	0x037434D4 MOV X0, X19
	0x037434D8 LDP X9, X1, [X8 + 0x1A8]
	0x037434DC BLR X9
	0x037434E0 MOV X19, X0
	0x037434E4 ADRP X0, 0x9D8000
	0x037434E8 LDR X0, [X0 + 0xCD0]
	0x037434EC BL 0x1C16D08
	0x037434F0 MOV X20, X0
	0x037434F4 ADRP X0, 0xA02000
	0x037434F8 LDR X0, [X0 + 0x6A8]
	0x037434FC BL 0x1C16D08
	0x03743500 MOV X2, X0
	0x03743504 MOV X0, X20
	0x03743508 MOV X1, X19
	0x0374350C MOV X3, X31
	0x03743510 BL 0x32274B8
	0x03743514 MOV X19, X0
	0x03743518 ADRP X0, 0x9B8000
	0x0374351C LDR X0, [X0 + 0x578]
	0x03743520 BL 0x1C16D08
	0x03743524 BL 0x1C16F10
	0x03743528 MOV X20, X0
	0x0374352C ADRP X0, 0x9B8000
	0x03743530 LDR X0, [X0 + 0x5E8]
	0x03743534 BL 0x1C16D08
	0x03743538 MOV X2, X0
	0x0374353C MOV X0, X20
	0x03743540 MOV X1, X19
	0x03743544 MOV X3, X31
	0x03743548 BL 0x330E16C
	0x0374354C ADRP X0, 0xA02000
	0x03743550 LDR X0, [X0 + 0x6B0]
	0x03743554 BL 0x1C16D08
	0x03743558 MOV X1, X0
	0x0374355C MOV X0, X20

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+144], X24
	004 Move [X31+152], X23
	005 Move [X31+160], X22
	006 Move [X31+168], X21
	007 Move [X31+176], X20
	008 Move [X31+184], X19
	009 Move X24, 0xC9E000
	010 Move X23, 0x9B1000
	011 Move W8, [X24+3403]
	012 Move X23, [X23+1728]
	013 Move W21, W3
	014 Move X20, X2
	015 Move X22, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x9D9000
	022 Move X0, [X0+3096]
	023 Call 0x1C17CF4
	024 Move X0, 0x9D9000
	025 Move X0, [X0+3104]
	026 Call 0x1C17CF4
	027 Move X0, 0x9D9000
	028 Move X0, [X0+3128]
	029 Call 0x1C17CF4
	030 Move X0, 0x9B1000
	031 Move X0, [X0+1728]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X24+3403], W8
	035 Add X0, X19, 8
	036 Move W2, 160
	037 Move W1, W31
	038 Call 0x3EB2B10
	039 Move [X19], X22
	040 Move X8, [X20+8]
	041 Move X0, X20
	042 Move [X19+8], W21
	043 Move [X19+136], X8
	044 Call ParameterOverride.get_objectType, X0
	045 Move [X19+128], X0
	046 Move X21, X0
	047 Move X0, [X23]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X21
	053 Move X1, X31
	054 Move X2, X31
	055 Call Type.op_Equality, X0, X1
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {61}
	060 Move W0, 1
	061 Move X8, 0x9D9000
	062 Move X0, [X23]
	063 Move X8, [X8+3104]
	064 Move W9, [X0+224]
	065 Move X21, [X8]
	066 Compare W9, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X21
	070 Move X1, X31
	071 Call Type.GetTypeFromHandle, X0
	072 Compare X0, 0
	073 JumpIfEqual {171}
	074 Move X8, [X0]
	075 Move X1, [X19+128]
	076 Move X9, [X8+680]
	077 Move X2, [X8+688]
	078 NotImplemented "Instruction BLR not yet implemented."
	079 And W8, W0, 1
	080 Move [X19+146], W8
	081 Move X0, [X23]
	082 Move X21, [X19+128]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X0, X21
	088 Move X1, X31
	089 Move X2, X31
	090 Call Type.op_Equality, X0, X1
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {96}
	095 Move W0, 1
	096 Move X8, 0x9D9000
	097 Move X0, [X23]
	098 Move X8, [X8+3128]
	099 Move W9, [X0+224]
	100 Move X21, [X8]
	101 Compare W9, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X0, X21
	105 Move X1, X31
	106 Call Type.GetTypeFromHandle, X0
	107 Compare X0, 0
	108 JumpIfEqual {171}
	109 Move X8, [X0]
	110 Move X1, [X19+128]
	111 Move X9, [X8+680]
	112 Move X2, [X8+688]
	113 NotImplemented "Instruction BLR not yet implemented."
	114 And W8, W0, 1
	115 Move [X19+145], W8
	116 Move X0, [X23]
	117 Move X21, [X19+128]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {122}
	121 Call 0x1C17DFC
	122 Move X0, X21
	123 Move X1, X31
	124 Move X2, X31
	125 Call Type.op_Equality, X0, X1
	126 Move TEMP, X0
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfNotEqual {131}
	130 Move W0, 1
	131 Move X8, 0x9D9000
	132 Move X0, [X23]
	133 Move X8, [X8+3096]
	134 Move W9, [X0+224]
	135 Move X21, [X8]
	136 Compare W9, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X21
	140 Move X1, X31
	141 Call Type.GetTypeFromHandle, X0
	142 Compare X0, 0
	143 JumpIfEqual {171}
	144 Move X8, [X0]
	145 Move X1, [X19+128]
	146 Move X9, [X8+680]
	147 Move X2, [X8+688]
	148 NotImplemented "Instruction BLR not yet implemented."
	149 And W8, W0, 1
	150 Add X0, X31, 8
	151 Move W2, 120
	152 Move X1, X20
	153 Move [X19+144], W8
	154 Add X21, X31, 8
	155 Call 0x3EB2AC0
	156 Add X1, X21, 16
	157 Add X0, X19, 40
	158 Move W2, 88
	159 Call 0x3EB2AC0
	160 Move X0, X19
	161 Move X20, [X31+176]
	162 Move X19, [X31+184]
	163 Move X22, [X31+160]
	164 Move X21, [X31+168]
	165 Move X24, [X31+144]
	166 Move X23, [X31+152]
	167 Move X30, [X31+128]
	168 Add X31, X31, 192
	169 Call ParameterEnumerator.Reset, X0
	170 Return 
	171 Call 0x1C17F20

Method: System.Boolean MoveToNextBinding()

Disassembly:
	0x03743850 LDP X30, X19, [X31], #0x10
	0x03743854 RET
	0x03743858 STR S0, [X0 + 0xF0]
	0x0374385C RET
	0x03743860 STR X1, [X0 + 0x118]
	0x03743864 RET
	0x03743868 STR X1, [X0 + 0x120]
	0x0374386C RET
	0x03743870 STR X1, [X0 + 0x128]
	0x03743874 RET
	0x03743878 STR X1, [X0 + 0x130]
	0x0374387C RET
	0x03743880 STR X1, [X0 + 0x138]
	0x03743884 RET
	0x03743888 STR X1, [X0 + 0x140]
	0x0374388C RET
	0x03743890 STR X30, [X31 - 0x20]!
	0x03743894 STP X20, X19, [X31 + 0x10]
	0x03743898 ADRP X20, 0xC9D000
	0x0374389C LDRB W8, [X20 + 0xD5B]
	0x037438A0 MOV X19, X0
	0x037438A4 TBNZ X8, 0x0, 0x37438BC
	0x037438A8 ADRP X0, 0x9D7000
	0x037438AC LDR X0, [X0 + 0xFE8]
	0x037438B0 BL 0x1C16CF4
	0x037438B4 MOVZ W8, 0x1
	0x037438B8 STRB W8, [X20 + 0xD5B]
	0x037438BC LDRB W8, [X19 + 0x168]
	0x037438C0 TBNZ X8, 0x0, 0x374393C
	0x037438C4 LDR X0, [X19 + 0x10]
	0x037438C8 CBZ X0, 0x37438E8
	0x037438CC BL 0x37345CC
	0x037438D0 UBFM X8, X1, 0x20, 0x3F
	0x037438D4 CBNZ X8, 0x37438E0
	0x037438D8 LDRB W8, [X19 + 0x169]
	0x037438DC TBZ X8, 0x0, 0x3743994
	0x037438E0 LDR X8, [X19 + 0x10]
	0x037438E4 CBNZ X8, 0x37438F0
	0x037438E8 LDR X8, [X19 + 0x140]
	0x037438EC CBZ X8, 0x374394C
	0x037438F0 MOV X0, X31
	0x037438F4 BL 0x37FC688
	0x037438F8 LDR V1, [X19 + 0xF4]
	0x037438FC STR D0, [X19 + 0xE8]
	0x03743900 FCMP S1, 0x0
	0x03743904 B.GT 0x3743914
	0x03743908 LDR V0, [X19 + 0xF0]
	0x0374390C FCMP S0, 0x0
	0x03743910 B.LE 0x3743924
	0x03743914 MOV X0, X19
	0x03743918 BL 0x37439EC
	0x0374391C MOVZ X8, 0xBFF00000
	0x03743920 STR X8, [X19 + 0xE0]
	0x03743924 MOV X0, X19
	0x03743928 BL 0x3743AAC
	0x0374392C LDR W8, [X19 + 0x168]
	0x03743930 AND W8, W8, 0xFFFFFFF8
	0x03743934 ORR W8, W8, 0x1
	0x03743938 STR W8, [X19 + 0x168]
	0x0374393C MOV X0, X19
	0x03743940 LDP X20, X19, [X31 + 0x10]
	0x03743944 LDR X30, [X31], #0x20
	0x03743948 RET
	0x0374394C ADRP X0, 0x9B0000
	0x03743950 LDR X0, [X0 + 0x5B0]
	0x03743954 BL 0x1C16D08
	0x03743958 BL 0x1C16F10
	0x0374395C MOV X19, X0
	0x03743960 ADRP X0, 0xA02000
	0x03743964 LDR X0, [X0 + 0x6D8]
	0x03743968 BL 0x1C16D08
	0x0374396C MOV X1, X0
	0x03743970 MOV X0, X19
	0x03743974 MOV X2, X31
	0x03743978 BL 0x337DF1C
	0x0374397C ADRP X0, 0xA02000
	0x03743980 LDR X0, [X0 + 0x6E0]
	0x03743984 BL 0x1C16D08
	0x03743988 MOV X1, X0
	0x0374398C MOV X0, X19
	0x03743990 BL 0x1C16DEC
	0x03743994 ADRP X0, 0xA02000
	0x03743998 LDR X19, [X19 + 0x10]
	0x0374399C LDR X0, [X0 + 0x6E8]
	0x037439A0 BL 0x1C16D08
	0x037439A4 MOV X1, X19
	0x037439A8 MOV X2, X31
	0x037439AC BL 0x321EFD0
	0x037439B0 MOV X19, X0
	0x037439B4 ADRP X0, 0x9B0000
	0x037439B8 LDR X0, [X0 + 0x5B0]
	0x037439BC BL 0x1C16D08
	0x037439C0 BL 0x1C16F10
	0x037439C4 MOV X1, X19
	0x037439C8 MOV X2, X31
	0x037439CC MOV X20, X0
	0x037439D0 BL 0x337DF1C
	0x037439D4 ADRP X0, 0xA02000
	0x037439D8 LDR X0, [X0 + 0x6E0]
	0x037439DC BL 0x1C16D08
	0x037439E0 MOV X1, X0
	0x037439E4 MOV X0, X20
	0x037439E8 BL 0x1C16DEC
	0x037439EC STP X30, X21, [X31 - 0x20]!
	0x037439F0 STP X20, X19, [X31 + 0x10]
	0x037439F4 ADRP X20, 0xC9D000
	0x037439F8 LDRB W8, [X20 + 0xD64]
	0x037439FC MOV X19, X0
	0x03743A00 TBNZ X8, 0x0, 0x3743A30
	0x03743A04 ADRP X0, 0x9B1000
	0x03743A08 LDR X0, [X0 + 0xE70]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W8, [X0+12]
	007 Move W9, [X0+16]
	008 Add W1, W8, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move [X0+12], W1
	011 Move X19, X0
	012 Add X21, X0, 40
	013 Move X0, [X19]
	014 Compare X0, 0
	015 JumpIfEqual {135}
	016 Move X2, X31
	017 Call InputActionState.GetBinding, X0, X1
	018 Move X8, [X19]
	019 Compare X8, 0
	020 JumpIfEqual {135}
	021 Move W1, [X19+12]
	022 Move X22, X0
	023 Move X0, X8
	024 Move X2, X31
	025 Call InputActionState.GetBindingState, X0, X1
	026 Move W8, [X0+2]
	027 Move X20, X0
	028 Compare W8, 0
	029 JumpIfNotEqual {40}
	030 Move W8, [X20+1]
	031 Compare W8, 0
	032 JumpIfNotEqual {40}
	033 Move X0, X22
	034 Move X1, X31
	035 Call InputBinding.get_isComposite, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {92}
	040 Move W8, [X19+146]
	041 Compare W8, 0
	042 JumpIfEqual {57}
	043 Move W8, [X19+145]
	044 Compare W8, 0
	045 JumpIfNotEqual {60}
	046 Move W8, [X19+144]
	047 Compare W8, 0
	048 JumpIfEqual {50}
	049 Move W8, 1
	050 Move X0, X22
	051 Move X1, X31
	052 Call InputBinding.get_isComposite, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {92}
	057 Move W8, [X19+145]
	058 Compare W8, 0
	059 JumpIfEqual {68}
	060 Move W8, [X19+146]
	061 Compare W8, 0
	062 JumpIfEqual {64}
	063 Move W8, W31
	064 Move W8, [X19+144]
	065 Compare W8, 0
	066 JumpIfEqual {80}
	067 Move W8, W31
	068 Move W8, 1
	069 Move W9, [X19+144]
	070 Compare W9, 0
	071 JumpIfEqual {83}
	072 Move W9, [X19+146]
	073 Compare W9, 0
	074 JumpIfNotEqual {83}
	075 Compare W8, 0
	076 JumpIfEqual {83}
	077 Move W8, [X20+1]
	078 Compare W8, 0
	079 JumpIfNotEqual {83}
	080 Move W8, [X20+2]
	081 Compare W8, 0
	082 JumpIfEqual {92}
	083 Move X0, X21
	084 Move X1, X22
	085 Move W2, W31
	086 Move X3, X31
	087 Call InputBinding.Matches, X0, X1, X2
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfEqual {98}
	092 Move W8, [X19+12]
	093 Move W9, [X19+16]
	094 Add W1, W8, 1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X19+12], W1
	097 Move W0, W31
	098 Move W8, [X19+146]
	099 Compare W8, 0
	100 JumpIfEqual {106}
	101 Move X0, X22
	102 Move X1, X31
	103 Call InputBinding.get_isComposite, X0
	104 And W8, W0, 1
	105 Move [X19+147], W8
	106 Move X0, X20
	107 Move X1, X31
	108 Call BindingState.get_processorStartIndex, X0
	109 Subtract W8, W0, 1
	110 Move X0, X20
	111 Move X1, X31
	112 Move [X19+28], W8
	113 Call BindingState.get_processorStartIndex, X0
	114 Move W8, [X20+2]
	115 Move X1, X31
	116 Add W8, W0, W8
	117 Move X0, X20
	118 Move [X19+32], W8
	119 Call BindingState.get_interactionStartIndex, X0
	120 Subtract W8, W0, 1
	121 Move X0, X20
	122 Move X1, X31
	123 Move [X19+20], W8
	124 Call BindingState.get_interactionStartIndex, X0
	125 Move W8, [X20+1]
	126 Add W8, W0, W8
	127 Move W0, 1
	128 Move [X19+24], W8
	129 Move X20, [X31+32]
	130 Move X19, [X31+40]
	131 Move X22, [X31+16]
	132 Move X21, [X31+24]
	133 Move X30, [X31+48]
	134 Return X0
	135 Call 0x1C17F20

Method: System.Boolean MoveToNextInteraction()

Disassembly:
	0x03743A0C BL 0x1C16CF4
	0x03743A10 ADRP X0, 0x9D8000
	0x03743A14 LDR X0, [X0 + 0x270]
	0x03743A18 BL 0x1C16CF4
	0x03743A1C ADRP X0, 0xA02000
	0x03743A20 LDR X0, [X0 + 0x6F0]
	0x03743A24 BL 0x1C16CF4
	0x03743A28 MOVZ W8, 0x1
	0x03743A2C STRB W8, [X20 + 0xD64]
	0x03743A30 LDRB W8, [X19 + 0x168]
	0x03743A34 TBNZ X8, 0x4, 0x3743AA0
	0x03743A38 ADRP X21, 0x9D8000
	0x03743A3C LDR X20, [X19 + 0x150]
	0x03743A40 LDR X21, [X21 + 0x270]
	0x03743A44 CBNZ X20, 0x3743A78
	0x03743A48 ADRP X8, 0x9B1000
	0x03743A4C LDR X8, [X8 + 0xE70]
	0x03743A50 LDR X0, [X8]
	0x03743A54 BL 0x1C16F10
	0x03743A58 ADRP X8, 0xA02000
	0x03743A5C LDR X8, [X8 + 0x6F0]
	0x03743A60 MOV X1, X19
	0x03743A64 MOV X3, X31
	0x03743A68 MOV X20, X0
	0x03743A6C LDR X2, [X8]
	0x03743A70 BL 0x3314368
	0x03743A74 STR X20, [X19 + 0x150]
	0x03743A78 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W8, [X19+20]
	005 Move W9, [X19+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add W8, W8, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move [X19+20], W8
	010 Move X9, [X19]
	011 Compare X9, 0
	012 JumpIfEqual {31}
	013 Move X9, [X9+32]
	014 Compare X9, 0
	015 JumpIfEqual {31}
	016 Move W10, [X9+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Add X8, X9, W8
	019 Move X1, [X8+32]
	020 Move X0, X19
	021 Call ParameterEnumerator.FindParameter, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {4}
	026 Move W0, 1
	027 Move W0, W31
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return X0
	031 Call 0x1C17F20
	032 Call 0x1C17F28

Method: System.Boolean MoveToNextProcessor()

Disassembly:
	0x03743B64 MOV X1, X31
	0x03743B68 BL 0x376F8E8
	0x03743B6C LDR W8, [X19 + 0x168]
	0x03743B70 ORR W8, W8, 0x8
	0x03743B74 STR W8, [X19 + 0x168]
	0x03743B78 LDP X20, X19, [X31 + 0x10]
	0x03743B7C LDP X30, X21, [X31], #0x20
	0x03743B80 RET
	0x03743B84 LDRB W8, [X0 + 0x168]
	0x03743B88 TBNZ X8, 0x0, 0x3743B90
	0x03743B8C RET
	0x03743B90 B 0x3743B94
	0x03743B94 STP X30, X19, [X31 - 0x10]!
	0x03743B98 LDR W9, [X0 + 0x168]
	0x03743B9C LDR X8, [X0 + 0x120]
	0x03743BA0 MOV X19, X0
	0x03743BA4 ORR W9, W9, 0x4
	0x03743BA8 STR W9, [X0 + 0x168]
	0x03743BAC CBZ X8, 0x3743BC4
	0x03743BB0 LDR X9, [X8 + 0x18]
	0x03743BB4 LDR X0, [X8 + 0x40]
	0x03743BB8 LDR X2, [X8 + 0x28]
	0x03743BBC MOV X1, X19
	0x03743BC0 BLR X9
	0x03743BC4 MOV X0, X19
	0x03743BC8 LDP X30, X19, [X31], #0x10
	0x03743BCC B 0x3744E6C
	0x03743BD0 LDRB W8, [X0 + 0x168]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W8, [X19+28]
	005 Move W9, [X19+32]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add W8, W8, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move [X19+28], W8
	010 Move X9, [X19]
	011 Compare X9, 0
	012 JumpIfEqual {31}
	013 Move X9, [X9+40]
	014 Compare X9, 0
	015 JumpIfEqual {31}
	016 Move W10, [X9+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Add X8, X9, W8
	019 Move X1, [X8+32]
	020 Move X0, X19
	021 Call ParameterEnumerator.FindParameter, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {4}
	026 Move W0, 1
	027 Move W0, W31
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return X0
	031 Call 0x1C17F20
	032 Call 0x1C17F28

Method: System.Boolean FindParameter(System.Object instance)

Disassembly:
	0x03743A7C LDR W8, [X0 + 0xE0]
	0x03743A80 CBNZ W8, 0x3743A88
	0x03743A84 BL 0x1C16DFC
	0x03743A88 MOV X0, X20
	0x03743A8C MOV X1, X31
	0x03743A90 BL 0x3770464
	0x03743A94 LDR W8, [X19 + 0x168]
	0x03743A98 ORR W8, W8, 0x10
	0x03743A9C STR W8, [X19 + 0x168]
	0x03743AA0 LDP X20, X19, [X31 + 0x10]
	0x03743AA4 LDP X30, X21, [X31], #0x20
	0x03743AA8 RET
	0x03743AAC STP X30, X21, [X31 - 0x20]!
	0x03743AB0 STP X20, X19, [X31 + 0x10]
	0x03743AB4 ADRP X20, 0xC9D000
	0x03743AB8 LDRB W8, [X20 + 0xD60]
	0x03743ABC MOV X19, X0
	0x03743AC0 TBNZ X8, 0x0, 0x3743AF0
	0x03743AC4 ADRP X0, 0xA02000
	0x03743AC8 LDR X0, [X0 + 0x6F8]
	0x03743ACC BL 0x1C16CF4
	0x03743AD0 ADRP X0, 0x9D8000
	0x03743AD4 LDR X0, [X0 + 0x270]
	0x03743AD8 BL 0x1C16CF4
	0x03743ADC ADRP X0, 0xA02000
	0x03743AE0 LDR X0, [X0 + 0x700]
	0x03743AE4 BL 0x1C16CF4
	0x03743AE8 MOVZ W8, 0x1
	0x03743AEC STRB W8, [X20 + 0xD60]
	0x03743AF0 LDRB W8, [X19 + 0x168]
	0x03743AF4 TBNZ X8, 0x3, 0x3743B78
	0x03743AF8 ADRP X21, 0x9D8000
	0x03743AFC LDR X8, [X19 + 0x148]
	0x03743B00 LDR X21, [X21 + 0x270]
	0x03743B04 CBNZ X8, 0x3743B38
	0x03743B08 ADRP X8, 0xA02000
	0x03743B0C LDR X8, [X8 + 0x6F8]
	0x03743B10 LDR X0, [X8]
	0x03743B14 BL 0x1C16F10
	0x03743B18 ADRP X8, 0xA02000
	0x03743B1C LDR X8, [X8 + 0x700]
	0x03743B20 MOV X1, X19
	0x03743B24 MOV X3, X31
	0x03743B28 MOV X20, X0
	0x03743B2C LDR X2, [X8]
	0x03743B30 BL 0x2A75DEC
	0x03743B34 STR X20, [X19 + 0x148]
	0x03743B38 LDR X0, [X21]
	0x03743B3C LDR W8, [X0 + 0xE0]
	0x03743B40 CBNZ W8, 0x3743B48
	0x03743B44 BL 0x1C16DFC
	0x03743B48 MOV X0, X31
	0x03743B4C BL 0x376F8E0
	0x03743B50 LDR X1, [X19 + 0x148]
	0x03743B54 AND X0, X0, 0xFF
	0x03743B58 MOV X2, X31
	0x03743B5C BL 0x37FC234
	0x03743B60 AND X0, X0, 0xFF

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC9E000
	007 Move X21, 0x9B1000
	008 Move W8, [X22+3404]
	009 Move X21, [X21+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9B1000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3404], W8
	021 Move X0, [X21]
	022 Move X21, [X20+128]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Type.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {47}
	035 Move X0, [X20+128]
	036 Compare X0, 0
	037 JumpIfEqual {78}
	038 Move X8, [X0]
	039 Move X1, X19
	040 Move X9, [X8+2152]
	041 Move X2, [X8+2160]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {68}
	047 Compare X19, 0
	048 JumpIfEqual {78}
	049 Move X0, X19
	050 Move X1, X31
	051 Call "il2cpp_vm_object_is_inst", X0
	052 Compare X0, 0
	053 JumpIfEqual {78}
	054 Move X8, [X0]
	055 Move X1, [X20+136]
	056 Move W2, 21
	057 Move X9, [X8+1656]
	058 Move X3, [X8+1664]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X1, X31
	061 Move X2, X31
	062 Move X21, X0
	063 Call FieldInfo.op_Equality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {69}
	068 Move W0, W31
	069 Move W0, 1
	070 Move [X20+152], X19
	071 Move [X20+160], X21
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Return X0
	078 Call 0x1C17F20

Method: System.Boolean MoveNext()

Disassembly:
	0x0373E140 BL 0x1C16D08
	0x0373E144 MOV X1, X0
	0x0373E148 MOV X0, X19
	0x0373E14C MOV X2, X31
	0x0373E150 BL 0x330E100
	0x0373E154 ADRP X0, 0xA07000
	0x0373E158 LDR X0, [X0 + 0x3C8]
	0x0373E15C BL 0x1C16D08
	0x0373E160 MOV X1, X0
	0x0373E164 MOV X0, X19
	0x0373E168 BL 0x1C16DEC
	0x0373E16C SUB X31, X31, 0xD0
	0x0373E170 STP X30, X19, [X31 + 0xC0]
	0x0373E174 CBZ X0, 0x373E1E0
	0x0373E178 MOV X3, X1
	0x0373E17C MOV X19, X0
	0x0373E180 ADD X8, X31, 0x60
	0x0373E184 MOVI V0.2D, 0x0
	0x0373E188 ADD X0, X31, 0x60
	0x0373E18C MOV X1, X2
	0x0373E190 MOV X2, X31
	0x0373E194 MOV X4, X31
	0x0373E198 MOV X5, X31
	0x0373E19C MOV X6, X31
	0x0373E1A0 MOV X7, X31
	0x0373E1A4 STR X31, [X31 + 0xB0]
	0x0373E1A8 STP V0, V0, [X8 + 0x30]
	0x0373E1AC STP V0, V0, [X31 + 0x70]
	0x0373E1B0 STR V0, [X31 + 0x6]
	0x0373E1B4 BL 0x37523DC
	0x0373E1B8 ADD X0, X31, 0x8
	0x0373E1BC ADD X1, X31, 0x60
	0x0373E1C0 MOVZ W2, 0x58
	0x0373E1C4 BL 0x3EB1AC0
	0x0373E1C8 ADD X1, X31, 0x8
	0x0373E1CC MOV X0, X19
	0x0373E1D0 BL 0x373DF4C
	0x0373E1D4 LDP X30, X19, [X31 + 0xC0]
	0x0373E1D8 ADD X31, X31, 0xD0
	0x0373E1DC RET
	0x0373E1E0 ADRP X0, 0x9BA000
	0x0373E1E4 LDR X0, [X0 + 0x528]
	0x0373E1E8 BL 0x1C16D08
	0x0373E1EC BL 0x1C16F10
	0x0373E1F0 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W8, [X19+144]
	005 Compare W8, 0
	006 JumpIfEqual {13}
	007 Move X0, X19
	008 Call ParameterEnumerator.MoveToNextInteraction, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {58}
	013 Move W8, [X19+145]
	014 Compare W8, 0
	015 JumpIfEqual {22}
	016 Move X0, X19
	017 Call ParameterEnumerator.MoveToNextProcessor, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {58}
	022 Move X0, X19
	023 Call ParameterEnumerator.MoveToNextBinding, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {59}
	028 Move W8, [X19+146]
	029 Compare W8, 0
	030 JumpIfEqual {4}
	031 Move W8, [X19+147]
	032 Compare W8, 0
	033 JumpIfEqual {4}
	034 Move X0, [X19]
	035 Compare X0, 0
	036 JumpIfEqual {63}
	037 Move W1, [X19+12]
	038 Move X2, X31
	039 Call InputActionState.GetBindingState, X0, X1
	040 Move X1, X31
	041 Call BindingState.get_compositeOrCompositeBindingIndex, X0
	042 Move X8, [X19]
	043 Compare X8, 0
	044 JumpIfEqual {63}
	045 Move X8, [X8+48]
	046 Compare X8, 0
	047 JumpIfEqual {63}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X8, X8, W0
	051 Move X1, [X8+32]
	052 Move X0, X19
	053 Call ParameterEnumerator.FindParameter, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {4}
	058 Move W0, 1
	059 Move W0, W31
	060 Move X30, [X31+16]
	061 Move X19, [X31+24]
	062 Return X0
	063 Call 0x1C17F20
	064 Call 0x1C17F28

Method: System.Void Reset()

Disassembly:
	0x03743784 MOV X19, X0
	0x03743788 BL 0x37432C4
	0x0374378C FCMP S8, 0x0
	0x03743790 B.MI 0x37437B0
	0x03743794 STR S8, [X19 + 0xC8]
	0x03743798 MOV X0, X19
	0x0374379C LDP X20, X19, [X31 + 0x20]
	0x037437A0 LDR X30, [X31 + 0x18]
	0x037437A4 LDR V8, [X31 + 0x10]
	0x037437A8 ADD X31, X31, 0x30
	0x037437AC RET
	0x037437B0 STR S8, [X31 + 0xC]
	0x037437B4 ADRP X0, 0x9B0000
	0x037437B8 LDR X0, [X0 + 0xA90]
	0x037437BC BL 0x1C16D08
	0x037437C0 ADD X1, X31, 0xC
	0x037437C4 BL 0x1C16E04
	0x037437C8 MOV X19, X0
	0x037437CC ADRP X0, 0xA02000
	0x037437D0 LDR X0, [X0 + 0x6C0]
	0x037437D4 BL 0x1C16D08
	0x037437D8 MOV X1, X19
	0x037437DC MOV X2, X31
	0x037437E0 BL 0x321EFD0
	0x037437E4 MOV X19, X0
	0x037437E8 ADRP X0, 0x9B8000
	0x037437EC LDR X0, [X0 + 0x578]
	0x037437F0 BL 0x1C16D08
	0x037437F4 BL 0x1C16F10
	0x037437F8 MOV X20, X0
	0x037437FC ADRP X0, 0xA02000
	0x03743800 LDR X0, [X0 + 0x6C8]
	0x03743804 BL 0x1C16D08
	0x03743808 MOV X2, X0
	0x0374380C MOV X0, X20
	0x03743810 MOV X1, X19
	0x03743814 MOV X3, X31
	0x03743818 BL 0x330E16C
	0x0374381C ADRP X0, 0xA02000
	0x03743820 LDR X0, [X0 + 0x6D0]
	0x03743824 BL 0x1C16D08
	0x03743828 MOV X1, X0
	0x0374382C MOV X0, X20
	0x03743830 BL 0x1C16DEC
	0x03743834 STP X30, X19, [X31 - 0x10]!
	0x03743838 MOV X19, X0
	0x0374383C BL 0x37432C4
	0x03743840 LDR W8, [X19 + 0x168]
	0x03743844 MOV X0, X19
	0x03743848 ORR W8, W8, 0x40
	0x0374384C STR W8, [X19 + 0x168]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+8]
	005 Move X19, X0
	006 Move [X0+147], W31
	007 Move [X0+28], X31
	008 Move [X0+20], X31
	009 Move [X0+152], X31
	010 Move [X0+160], X31
	011 Move TEMP, X8
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {51}
	015 Move X0, [X19]
	016 Compare X0, 0
	017 JumpIfEqual {65}
	018 Move X1, X31
	019 Call InputActionState.get_mapIndices, X0
	020 NotImplemented "Instruction LDRSW not yet implemented."
	021 Move W9, 48
	022 NotImplemented "Instruction MADD not yet implemented."
	023 Compare X8, 0
	024 JumpIfEqual {65}
	025 Move W8, [X8+16]
	026 Move X0, [X19]
	027 Subtract W8, W8, 1
	028 Move [X19+12], W8
	029 Compare X0, 0
	030 JumpIfEqual {65}
	031 Move X1, X31
	032 Call InputActionState.get_mapIndices, X0
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Move W9, 48
	035 NotImplemented "Instruction MADD not yet implemented."
	036 Compare X8, 0
	037 JumpIfEqual {65}
	038 Move X0, [X19]
	039 Compare X0, 0
	040 JumpIfEqual {65}
	041 Move W20, [X8+16]
	042 Move X1, X31
	043 Call InputActionState.get_mapIndices, X0
	044 NotImplemented "Instruction LDRSW not yet implemented."
	045 Move W9, 48
	046 NotImplemented "Instruction MADD not yet implemented."
	047 Compare X8, 0
	048 JumpIfEqual {65}
	049 Move W8, [X8+20]
	050 Add W0, W8, W20
	051 Move X0, [X19]
	052 Move TEMP, 0
	053 Not TEMP
	054 Move W8, TEMP
	055 Move [X19+12], W8
	056 Compare X0, 0
	057 JumpIfEqual {65}
	058 Move X1, X31
	059 Call InputActionState.get_totalBindingCount, X0
	060 Move [X19+16], W0
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Return 
	065 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/Parameter get_Current()

Disassembly:
	0x0373E12C BL 0x1C16D08
	0x0373E130 BL 0x1C16F10
	0x0373E134 MOV X19, X0
	0x0373E138 ADRP X0, 0x9DD000
	0x0373E13C LDR X0, [X0 + 0xC10]

ISIL:
	001 Move X9, [X0+152]
	002 Move X10, [X0+160]
	003 Move W11, [X0+12]
	004 Move [X8], X9
	005 Move [X8+8], X10
	006 Move [X8+16], W11
	007 Move [X8+20], W31
	008 Return X0

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x03743BD4 TBNZ X8, 0x0, 0x3743BDC
	0x03743BD8 RET
	0x03743BDC B 0x3743BE0
	0x03743BE0 SUB X31, X31, 0x130
	0x03743BE4 STP X29, X30, [X31 + 0x100]
	0x03743BE8 STP X22, X21, [X31 + 0x110]
	0x03743BEC STP X20, X19, [X31 + 0x120]
	0x03743BF0 ADRP X20, 0xC9D000
	0x03743BF4 LDRB W8, [X20 + 0xD66]
	0x03743BF8 MOV X19, X0
	0x03743BFC TBNZ X8, 0x0, 0x3743C44
	0x03743C00 ADRP X0, 0xA02000
	0x03743C04 LDR X0, [X0 + 0x678]
	0x03743C08 BL 0x1C16CF4
	0x03743C0C ADRP X0, 0xA02000
	0x03743C10 LDR X0, [X0 + 0x680]
	0x03743C14 BL 0x1C16CF4
	0x03743C18 ADRP X0, 0xA01000
	0x03743C1C LDR X0, [X0 + 0xF58]
	0x03743C20 BL 0x1C16CF4
	0x03743C24 ADRP X0, 0xA01000
	0x03743C28 LDR X0, [X0 + 0xF60]
	0x03743C2C BL 0x1C16CF4
	0x03743C30 ADRP X0, 0x9D7000
	0x03743C34 LDR X0, [X0 + 0xFE8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xC9E000
	007 Move X20, 0xA03000
	008 Move W8, [X21+3405]
	009 Move X20, [X20+1632]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA03000
	016 Move X0, [X0+1632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3405], W8
	020 Move X8, [X19+152]
	021 Move X9, [X19+160]
	022 Move W10, [X19+12]
	023 Move X0, [X20]
	024 Add X1, X31, 8
	025 Move [X31+8], X8
	026 Move [X31+16], X9
	027 Move [X31+24], W10
	028 Move [X31+28], W31
	029 Call 0x1C17E04
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Add X31, X31, 64
	035 Return X0

Method: System.Void Dispose()

Disassembly:
	0x03743C38 BL 0x1C16CF4

ISIL:
	001 Return 

