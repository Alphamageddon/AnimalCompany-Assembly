Type: UnityEngine.InputSystem.InputDevice

Method: UnityEngine.InputSystem.Layouts.InputDeviceDescription get_description()

Disassembly:
	0x0377B888 SBFM X9, X26, 0x10, 0x1F
	0x0377B88C ADD X9, X9, 0x1
	0x0377B890 CMP W9, W10
	0x0377B894 B.CS 0x377B984
	0x0377B898 LDR X0, [X25]
	0x0377B89C UBFM X10, X9, 0x3D, 0x3C
	0x0377B8A0 SUB X9, X10, X9

ISIL:
	001 Move X9, [X0+288]
	002 Move V1, [X0+256]
	003 Move V0, [X0+272]
	004 Move V2, [X0+15]
	005 Move [X8+48], X9
	006 Move [X8+16], V1
	007 Move [X8+24], V0
	008 Move [X8], V2
	009 Return X0

Method: System.Boolean get_enabled()

Disassembly:
	0x0377B8A4 ADD X8, X8, X9
	0x0377B8A8 LDRB W28, [X8 + 0x26]
	0x0377B8AC LDRH W19, [X8 + 0x24]
	0x0377B8B0 LDR W9, [X0 + 0xE0]
	0x0377B8B4 LDR W26, [X8 + 0x20]
	0x0377B8B8 CBNZ W9, 0x377B8C0
	0x0377B8BC BL 0x1C16DFC

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Move W9, 288
	003 And W31, W8, W9
	004 Move W0, W31
	005 Return X0

Method: System.Boolean get_canRunInBackground()

Disassembly:
	0x0377B960 B.NE 0x377B760
	0x0377B964 LDP X20, X19, [X31 + 0x70]
	0x0377B968 LDP X22, X21, [X31 + 0x60]
	0x0377B96C LDP X24, X23, [X31 + 0x50]
	0x0377B970 LDP X26, X25, [X31 + 0x40]
	0x0377B974 LDP X28, X27, [X31 + 0x30]
	0x0377B978 LDP X29, X30, [X31 + 0x20]
	0x0377B97C ADD X31, X31, 0x80
	0x0377B980 RET
	0x0377B984 BL 0x1C16F28
	0x0377B988 BL 0x1C16F20
	0x0377B98C SUB X31, X31, 0x70
	0x0377B990 STP X29, X30, [X31 + 0x10]
	0x0377B994 STP X28, X27, [X31 + 0x20]
	0x0377B998 STP X26, X25, [X31 + 0x30]
	0x0377B99C STP X24, X23, [X31 + 0x40]
	0x0377B9A0 STP X22, X21, [X31 + 0x50]
	0x0377B9A4 STP X20, X19, [X31 + 0x60]
	0x0377B9A8 STP W2, W5, [X31 + 0x8]
	0x0377B9AC ADRP X23, 0x9A0000
	0x0377B9B0 LDR X23, [X23 + 0xD18]
	0x0377B9B4 MOV X24, X4
	0x0377B9B8 MOV X19, X3
	0x0377B9BC MOV X21, X1
	0x0377B9C0 MOV X22, X0
	0x0377B9C4 ADRP X28, 0xC65000
	0x0377B9C8 MOVZ W29, 0x101
	0x0377B9CC LDRB W8, [X28 + 0xF71]
	0x0377B9D0 TBNZ X8, 0x0, 0x377B9E4
	0x0377B9D4 MOV X0, X23
	0x0377B9D8 BL 0x1C16CF4
	0x0377B9DC MOVZ W8, 0x1
	0x0377B9E0 STRB W8, [X28 + 0xF71]
	0x0377B9E4 LDR X8, [X22 + 0x160]
	0x0377B9E8 CBZ X8, 0x377BC08
	0x0377B9EC LDR W10, [X8 + 0x18]
	0x0377B9F0 SBFM X9, X24, 0x10, 0x1F
	0x0377B9F4 CMP W9, W10
	0x0377B9F8 B.CS 0x377BC0C
	0x0377B9FC UBFM X10, X9, 0x3D, 0x3C
	0x0377BA00 SUB X9, X10, X9
	0x0377BA04 ADD X8, X8, X9
	0x0377BA08 LDR W26, [X8 + 0x20]
	0x0377BA0C LDR W2, [X31 + 0xC]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xC66000
	006 Move W8, [X20+3931]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9CC000
	013 Move X0, [X0+3984]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3931], W8
	017 Move W8, [X19+220]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 4096
	020 Compare TEMP, 4096
	021 JumpIfEqual {47}
	022 Move X0, X31
	023 Call QueryCanRunInBackground.Create
	024 Move [X31], X0
	025 Move [X31+8], W1
	026 Move W8, [X19+220]
	027 Add X1, X31, 0
	028 Move X0, X19
	029 Or W8, W8, 4096
	030 Move [X19+220], W8
	031 Move X8, 0x9CC000
	032 Move X8, [X8+3984]
	033 Move X2, [X8]
	034 Call InputDevice.ExecuteCommand, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {44}
	039 Move W8, [X31+8]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {50}
	044 Move W8, [X19+220]
	045 Move W0, W31
	046 And W8, W8, 0xFFFFF7FF
	047 Move W0, W8
	048 ShiftRight W0, 11
	049 And W0, W0, 2047
	050 Move W8, [X19+220]
	051 Move W0, 1
	052 Or W8, W8, 2048
	053 Move [X19+220], W8
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Add X31, X31, 48
	058 Return X0

Method: System.Boolean get_added()

Disassembly:
	0x0376FE00 MOV W19, W1
	0x0376FE04 STR X8, [X31 + 0x38]
	0x0376FE08 LDRB W8, [X21 + 0xEF4]
	0x0376FE0C MOV X20, X0

ISIL:
	001 Move W8, [X0+232]
	002 Add W31, W8, 1
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_remote()

Disassembly:
	0x0377BA10 LDRB W27, [X8 + 0x26]
	0x0377BA14 LDRH W20, [X8 + 0x24]
	0x0377BA18 AND W25, W26, 0xFFFF

ISIL:
	001 Move W8, [X0+220]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: System.Boolean get_native()

Disassembly:
	0x0377BA1C SUB W8, W25, W2
	0x0377BA20 ADD W3, W8, 0x1
	0x0377BA24 MOV X0, X19

ISIL:
	001 Move W8, [X0+220]
	002 Move W0, W8
	003 ShiftRight W0, 4
	004 And W0, W0, 15
	005 Return X0

Method: System.Boolean get_updateBeforeRender()

Disassembly:
	0x0377BA28 MOV X1, X21
	0x0377BA2C BL 0x377C218
	0x0377BA30 TBZ X0, 0x0, 0x377BAF0

ISIL:
	001 Move W8, [X0+220]
	002 And W0, W8, 1
	003 Return X0

Method: System.Int32 get_deviceId()

Disassembly:
	0x0377BA34 BFM W20, W27, 0x10, 0x7
	0x0377BA38 BFM X26, X20, 0x20, 0x17

ISIL:
	001 Move W0, [X0+224]
	002 Return X0

Method: System.Double get_lastUpdateTime()

Disassembly:
	0x0377BA3C UBFM X8, X26, 0x30, 0x3F
	0x0377BA40 CBZ W8, 0x377BAC8
	0x0377BA44 UBFM X9, X26, 0x20, 0x3F
	0x0377BA48 ADD W28, W8, W9, UXTH
	0x0377BA4C UBFM X20, X26, 0x20, 0x2F
	0x0377BA50 LDR X8, [X22 + 0x168]
	0x0377BA54 CBZ X8, 0x377BC08
	0x0377BA58 LDR W9, [X8 + 0x18]
	0x0377BA5C CMP W20, W9
	0x0377BA60 B.CS 0x377BC0C
	0x0377BA64 LDR X9, [X22 + 0x150]
	0x0377BA68 CBZ X9, 0x377BC08
	0x0377BA6C ADD X8, X8, X20, 0x1, LSL
	0x0377BA70 LDRH W8, [X8 + 0x20]
	0x0377BA74 LDR W10, [X9 + 0x18]
	0x0377BA78 CMP W8, W10
	0x0377BA7C B.CS 0x377BC0C
	0x0377BA80 LDR X0, [X23]
	0x0377BA84 ADD X8, X9, X8, 0x3, LSL
	0x0377BA88 LDR X27, [X8 + 0x20]
	0x0377BA8C LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC66000
	006 Move X20, 0x9A1000
	007 Move W8, [X21+3932]
	008 Move X20, [X20+3784]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9A1000
	015 Move X0, [X0+3784]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3932], W8
	019 Move X8, [X20]
	020 Move V0, [X19+296]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+184]
	024 Move V1, [X8+8]
	025 Subtract D0, D0, D1
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return V0

Method: System.Boolean get_wasUpdatedThisFrame()

Disassembly:
	0x0377BA90 CBNZ W9, 0x377BA98
	0x0377BA94 BL 0x1C16DFC
	0x0377BA98 LDR W8, [X22 + 0x14]
	0x0377BA9C MOV X0, X27
	0x0377BAA0 MOV X3, X31
	0x0377BAA4 SUB X1, X19, X8
	0x0377BAA8 SUB X2, X21, X8
	0x0377BAAC BL 0x37740CC
	0x0377BAB0 TBNZ X0, 0x0, 0x377BABC
	0x0377BAB4 CBZ X27, 0x377BC08
	0x0377BAB8 STRH W29, [X27 + 0xA4]
	0x0377BABC ADD X20, X20, 0x1
	0x0377BAC0 CMP W20, W28
	0x0377BAC4 B.CC 0x377BA50
	0x0377BAC8 ORN W8, W31, W26, 0x0
	0x0377BACC ANDS X31, X8, 0xFFFFFFFF
	0x0377BAD0 ADRP X28, 0xC65000
	0x0377BAD4 B.EQ 0x377BAF0
	0x0377BAD8 LDP W2, W5, [X31 + 0x8]
	0x0377BADC MOV X0, X22
	0x0377BAE0 MOV X1, X21
	0x0377BAE4 MOV X3, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC66000
	006 Move X20, 0x9CA000
	007 Move W8, [X21+3933]
	008 Move X20, [X20+3984]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9CA000
	015 Move X0, [X0+3984]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3933], W8
	019 Move X8, [X20]
	020 Move W9, [X19+304]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X8, [X8+184]
	024 Move W8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControl> get_allControls()

Disassembly:
	0x0377BAE8 MOV X4, X26
	0x0377BAEC BL 0x377B98C
	0x0377BAF0 LDR X8, [X22 + 0x160]
	0x0377BAF4 CBZ X8, 0x377BC08
	0x0377BAF8 LDR W10, [X8 + 0x18]
	0x0377BAFC SBFM X9, X24, 0x10, 0x1F
	0x0377BB00 ADD X9, X9, 0x1
	0x0377BB04 CMP W9, W10
	0x0377BB08 B.CS 0x377BC0C
	0x0377BB0C UBFM X10, X9, 0x3D, 0x3C
	0x0377BB10 SUB X9, X10, X9
	0x0377BB14 ADD X8, X8, X9
	0x0377BB18 LDR W24, [X8 + 0x20]
	0x0377BB1C LDRB W26, [X8 + 0x26]
	0x0377BB20 LDRH W20, [X8 + 0x24]
	0x0377BB24 MOV W2, W25
	0x0377BB28 AND W8, W24, 0xFFFF
	0x0377BB2C SUB W8, W8, W25
	0x0377BB30 ADD W3, W8, 0x1
	0x0377BB34 MOV X0, X19
	0x0377BB38 MOV X1, X21
	0x0377BB3C STR W25, [X31 + 0xC]
	0x0377BB40 BL 0x377C218
	0x0377BB44 TBZ X0, 0x0, 0x377BBE8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC66000
	007 Move X20, 0x9CC000
	008 Move W8, [X21+3934]
	009 Move X20, [X20+3992]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9CC000
	016 Move X0, [X0+3992]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3934], W8
	020 Move X1, [X19+336]
	021 Move X2, [X20]
	022 Add X0, X31, 0
	023 Move [X31], X31
	024 Move [X31+8], X31
	025 Call ReadOnlyArray`1<Object>..ctor, X0, X1
	026 Move X0, [X31]
	027 Move X1, [X31+8]
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Type get_valueType()

Disassembly:
	0x0377BB48 BFM W20, W26, 0x10, 0x7
	0x0377BB4C BFM X24, X20, 0x20, 0x17
	0x0377BB50 UBFM X8, X24, 0x30, 0x3F
	0x0377BB54 CBZ W8, 0x377BBDC
	0x0377BB58 UBFM X9, X24, 0x20, 0x3F
	0x0377BB5C ADD W25, W8, W9, UXTH
	0x0377BB60 UBFM X20, X24, 0x20, 0x2F
	0x0377BB64 LDR X8, [X22 + 0x168]
	0x0377BB68 CBZ X8, 0x377BC08
	0x0377BB6C LDR W9, [X8 + 0x18]
	0x0377BB70 CMP W20, W9
	0x0377BB74 B.CS 0x377BC0C
	0x0377BB78 LDR X9, [X22 + 0x150]
	0x0377BB7C CBZ X9, 0x377BC08
	0x0377BB80 ADD X8, X8, X20, 0x1, LSL
	0x0377BB84 LDRH W8, [X8 + 0x20]
	0x0377BB88 LDR W10, [X9 + 0x18]
	0x0377BB8C CMP W8, W10
	0x0377BB90 B.CS 0x377BC0C
	0x0377BB94 LDR X0, [X23]
	0x0377BB98 ADD X8, X9, X8, 0x3, LSL
	0x0377BB9C LDR X26, [X8 + 0x20]
	0x0377BBA0 LDR W9, [X0 + 0xE0]
	0x0377BBA4 CBNZ W9, 0x377BBAC
	0x0377BBA8 BL 0x1C16DFC
	0x0377BBAC LDR W8, [X22 + 0x14]
	0x0377BBB0 MOV X0, X26

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC66000
	006 Move X19, 0x9AB000
	007 Move X20, 0x979000
	008 Move W8, [X21+3935]
	009 Move X19, [X19+280]
	010 Move X20, [X20+1728]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x9AB000
	016 Move X0, [X0+280]
	017 Call 0x1C17CF4
	018 Move X0, 0x979000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3935], W8
	023 Move X0, [X20]
	024 Move X19, [X19]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call Type.GetTypeFromHandle, X0
	036 Return X0

Method: System.Int32 get_valueSizeInBytes()

Disassembly:
	0x0377BBB4 MOV X3, X31
	0x0377BBB8 SUB X1, X19, X8
	0x0377BBBC SUB X2, X21, X8
	0x0377BBC0 BL 0x37740CC
	0x0377BBC4 TBNZ X0, 0x0, 0x377BBD0
	0x0377BBC8 CBZ X26, 0x377BC08
	0x0377BBCC STRH W29, [X26 + 0xA4]
	0x0377BBD0 ADD X20, X20, 0x1
	0x0377BBD4 CMP W20, W25
	0x0377BBD8 B.CC 0x377BB64
	0x0377BBDC ORN W8, W31, W24, 0x0
	0x0377BBE0 ANDS X31, X8, 0xFFFFFFFF
	0x0377BBE4 B.NE 0x377B9CC
	0x0377BBE8 LDP X20, X19, [X31 + 0x60]
	0x0377BBEC LDP X22, X21, [X31 + 0x50]
	0x0377BBF0 LDP X24, X23, [X31 + 0x40]
	0x0377BBF4 LDP X26, X25, [X31 + 0x30]
	0x0377BBF8 LDP X28, X27, [X31 + 0x20]
	0x0377BBFC LDP X29, X30, [X31 + 0x10]
	0x0377BC00 ADD X31, X31, 0x70
	0x0377BC04 RET
	0x0377BC08 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC66000
	006 Move X21, 0x9A1000
	007 Move W8, [X20+3936]
	008 Move X21, [X21+3352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9A1000
	015 Move X0, [X0+3352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3936], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add X0, X19, 16
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call InputStateBlock.get_alignedSizeInBytes, X0
	031 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice> get_all()

Disassembly:
	0x0377BC0C BL 0x1C16F28
	0x0377BC10 SUB X31, X31, 0x70
	0x0377BC14 STP X29, X30, [X31 + 0x10]
	0x0377BC18 STP X28, X27, [X31 + 0x20]
	0x0377BC1C STP X26, X25, [X31 + 0x30]
	0x0377BC20 STP X24, X23, [X31 + 0x40]
	0x0377BC24 STP X22, X21, [X31 + 0x50]
	0x0377BC28 STP X20, X19, [X31 + 0x60]
	0x0377BC2C ADRP X28, 0xC65000
	0x0377BC30 ADRP X26, 0x979000
	0x0377BC34 ADRP X25, 0x979000
	0x0377BC38 LDRB W8, [X28 + 0xF6F]
	0x0377BC3C LDR X26, [X26 + 0x1D0]
	0x0377BC40 LDR X25, [X25 + 0x1C0]
	0x0377BC44 MOV X19, X5
	0x0377BC48 MOV W20, W4
	0x0377BC4C MOV W21, W3
	0x0377BC50 MOV X24, X2
	0x0377BC54 MOV W22, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC66000
	005 Move X20, 0x9A1000
	006 Move W8, [X19+3937]
	007 Move X20, [X20+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9A1000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3937], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Call InputSystem.get_devices
	026 Return X0

Method: System.Void .ctor()

Disassembly:
	0x0377B868 MOV X0, X23
	0x0377B86C MOV W3, W20
	0x0377B870 MOV X5, X29
	0x0377B874 MOV W6, W28
	0x0377B878 BL 0x377B714
	0x0377B87C LDR X8, [X23 + 0x160]
	0x0377B880 CBZ X8, 0x377B988
	0x0377B884 LDR W10, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InputControl..ctor, X0
	005 Move TEMP, 0
	006 Not TEMP
	007 Move W8, TEMP
	008 Move [X19+224], X31
	009 Move [X19+232], W8
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Object ReadValueFromBufferAsObject(System.Void* buffer, System.Int32 bufferSize)

Disassembly:
	0x0377BC58 MOV X23, X0
	0x0377BC5C UBFM X27, X2, 0x30, 0x3F
	0x0377BC60 TBNZ X8, 0x0, 0x377BCF0
	0x0377BC64 ADRP X0, 0x97C000
	0x0377BC68 LDR X0, [X0 + 0x628]
	0x0377BC6C BL 0x1C16CF4
	0x0377BC70 ADRP X0, 0x978000
	0x0377BC74 LDR X0, [X0 + 0x758]
	0x0377BC78 BL 0x1C16CF4
	0x0377BC7C ADRP X0, 0x979000
	0x0377BC80 LDR X0, [X0 + 0x1B8]
	0x0377BC84 BL 0x1C16CF4
	0x0377BC88 ADRP X0, 0x979000
	0x0377BC8C LDR X0, [X0 + 0x1C0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x982000
	004 Move X0, [X0+1880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotImplementedException..ctor, X0
	010 Move X0, 0x9CC000
	011 Move X0, [X0+4000]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object ReadValueFromStateAsObject(System.Void* statePtr)

Disassembly:
	0x0377BC90 BL 0x1C16CF4
	0x0377BC94 ADRP X0, 0x979000
	0x0377BC98 LDR X0, [X0 + 0x1D0]
	0x0377BC9C BL 0x1C16CF4
	0x0377BCA0 ADRP X0, 0x978000
	0x0377BCA4 LDR X0, [X0 + 0x9D0]
	0x0377BCA8 BL 0x1C16CF4
	0x0377BCAC ADRP X0, 0x980000
	0x0377BCB0 LDR X0, [X0 + 0x720]
	0x0377BCB4 BL 0x1C16CF4
	0x0377BCB8 ADRP X0, 0x9CB000
	0x0377BCBC LDR X0, [X0 + 0xFF8]
	0x0377BCC0 BL 0x1C16CF4
	0x0377BCC4 ADRP X0, 0x978000
	0x0377BCC8 LDR X0, [X0 + 0x838]
	0x0377BCCC BL 0x1C16CF4
	0x0377BCD0 ADRP X0, 0x9CC000
	0x0377BCD4 LDR X0, [X0]
	0x0377BCD8 BL 0x1C16CF4
	0x0377BCDC ADRP X0, 0x978000
	0x0377BCE0 LDR X0, [X0 + 0x988]
	0x0377BCE4 BL 0x1C16CF4
	0x0377BCE8 MOVZ W8, 0x1
	0x0377BCEC STRB W8, [X28 + 0xF6F]
	0x0377BCF0 LDR X0, [X26]
	0x0377BCF4 ADRP X26, 0x979000
	0x0377BCF8 LDR X26, [X26 + 0x1B8]
	0x0377BCFC BL 0x1C16F10
	0x0377BD00 LDR X1, [X25]
	0x0377BD04 MOV X25, X0
	0x0377BD08 BL 0x301B7C4
	0x0377BD0C ANDS W8, W27, 0xFF
	0x0377BD10 B.EQ 0x377BDC0
	0x0377BD14 UBFM X27, X24, 0x20, 0x2F
	0x0377BD18 MOV W28, W8
	0x0377BD1C LDR X8, [X23 + 0x168]
	0x0377BD20 CBZ X8, 0x377C014
	0x0377BD24 LDR W9, [X8 + 0x18]
	0x0377BD28 CMP X27, X9
	0x0377BD2C B.CS 0x377C018
	0x0377BD30 LDR X9, [X23 + 0x150]
	0x0377BD34 CBZ X9, 0x377C014
	0x0377BD38 ADD X8, X8, X27, 0x1, LSL
	0x0377BD3C LDRH W8, [X8 + 0x20]
	0x0377BD40 LDR W10, [X9 + 0x18]
	0x0377BD44 CMP W8, W10
	0x0377BD48 B.CS 0x377C018
	0x0377BD4C ADD X8, X9, X8, 0x3, LSL
	0x0377BD50 LDR X0, [X8 + 0x20]
	0x0377BD54 CBZ X0, 0x377C014
	0x0377BD58 BL 0x3771F68
	0x0377BD5C CBZ X25, 0x377C014
	0x0377BD60 LDR W10, [X25 + 0x1C]
	0x0377BD64 LDR X8, [X25 + 0x10]
	0x0377BD68 LDR X9, [X26]
	0x0377BD6C ADD W10, W10, 0x1
	0x0377BD70 STR W10, [X25 + 0x1C]
	0x0377BD74 CBZ X8, 0x377C014
	0x0377BD78 LDRSW X10, [X25 + 0x18]
	0x0377BD7C LDR W11, [X8 + 0x18]
	0x0377BD80 MOV X1, X0
	0x0377BD84 CMP W10, W11
	0x0377BD88 B.CS 0x377BDA0
	0x0377BD8C ADD W9, W10, 0x1
	0x0377BD90 ADD X8, X8, X10, 0x3, LSL

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0xC66000
	010 Move W8, [X21+3938]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x979000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move X0, 0x9A1000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3938], W8
	025 Move W8, [X20+232]
	026 Add W31, W8, 1
	027 Move X24, 0x9A1000
	028 Move X24, [X24+3352]
	029 Move V0, [X20+1]
	030 Move X21, 0x979000
	031 Move X0, [X24]
	032 Move [X31], V0
	033 Move W8, [X0+224]
	034 Move X21, [X21+1560]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Add X0, X31, 0
	039 Move X1, X31
	040 Call InputStateBlock.get_alignedSizeInBytes, X0
	041 Move X8, [X21]
	042 Move W22, W0
	043 Move W1, W22
	044 Move X0, X8
	045 Call 0x1C17D6C
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfEqual {53}
	049 Move W8, [X21+24]
	050 Compare W8, 0
	051 JumpIfEqual {53}
	052 Add X23, X21, 32
	053 Move X23, X31
	054 Move X0, [X24]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move W8, [X20+20]
	060 Move W2, W22
	061 Move X0, X23
	062 Move X3, X31
	063 Add X1, X8, X19
	064 Call UnsafeUtility.MemCpy, X0, X1, X2
	065 Move X21, X31
	066 Move X0, X21
	067 Move X20, [X31+64]
	068 Move X19, [X31+72]
	069 Move X22, [X31+48]
	070 Move X21, [X31+56]
	071 Move X24, [X31+32]
	072 Move X23, [X31+40]
	073 Move X30, [X31+16]
	074 Add X31, X31, 80
	075 Return X0

Method: System.Void ReadValueFromStateIntoBuffer(System.Void* statePtr, System.Void* bufferPtr, System.Int32 bufferSize)

Disassembly:
	0x0377BD94 STR W9, [X25 + 0x18]
	0x0377BD98 STR X1, [X8 + 0x20]
	0x0377BD9C B 0x377BDB4
	0x0377BDA0 LDR X8, [X9 + 0x20]
	0x0377BDA4 MOV X0, X25
	0x0377BDA8 LDR X8, [X8 + 0xC0]
	0x0377BDAC LDR X2, [X8 + 0x70]
	0x0377BDB0 BL 0x301BF90
	0x0377BDB4 SUBS X28, X28, 0x1
	0x0377BDB8 ADD X27, X27, 0x1
	0x0377BDBC B.NE 0x377BD1C
	0x0377BDC0 ADRP X8, 0x978000
	0x0377BDC4 LDR X8, [X8 + 0x838]
	0x0377BDC8 ADRP X27, 0x978000
	0x0377BDCC ADRP X28, 0x978000
	0x0377BDD0 MOV X1, X25
	0x0377BDD4 LDR X0, [X8]
	0x0377BDD8 LDR X27, [X27 + 0x758]
	0x0377BDDC LDR X28, [X28 + 0x9D0]
	0x0377BDE0 MOV X2, X31
	0x0377BDE4 BL 0x32280D8
	0x0377BDE8 MOVZ W8, 0xFFFF
	0x0377BDEC CMP W8, W24, LSR
	0x0377BDF0 MOV X23, X0
	0x0377BDF4 B.EQ 0x377BE58
	0x0377BDF8 ADRP X9, 0x97C000
	0x0377BDFC LDR X9, [X9 + 0x628]
	0x0377BE00 ADRP X25, 0x9CB000
	0x0377BE04 UBFM X8, X24, 0x10, 0x3F
	0x0377BE08 ADD X1, X31, 0x8
	0x0377BE0C LDR X0, [X9]
	0x0377BE10 LDR X25, [X25 + 0xFF8]
	0x0377BE14 SXTH W29, W8
	0x0377BE18 STRH W8, [X31 + 0x8]
	0x0377BE1C BL 0x1C16E04
	0x0377BE20 MOV X24, X0
	0x0377BE24 LDR X0, [X27]
	0x0377BE28 ADD W8, W29, 0x1
	0x0377BE2C ADD X1, X31, 0xC
	0x0377BE30 STR W8, [X31 + 0xC]
	0x0377BE34 BL 0x1C16E04
	0x0377BE38 LDR X8, [X25]
	0x0377BE3C MOV X2, X0
	0x0377BE40 MOV X1, X24
	0x0377BE44 MOV X3, X31
	0x0377BE48 MOV X0, X8
	0x0377BE4C BL 0x3227BD4
	0x0377BE50 MOV X25, X0
	0x0377BE54 B 0x377BE64
	0x0377BE58 ADRP X8, 0x978000
	0x0377BE5C LDR X8, [X8 + 0x988]
	0x0377BE60 LDR X25, [X8]
	0x0377BE64 LDR X0, [X28]
	0x0377BE68 MOVZ W1, 0x5
	0x0377BE6C BL 0x1C16D6C
	0x0377BE70 MOV X24, X0
	0x0377BE74 LDR X0, [X27]
	0x0377BE78 ADD X1, X31, 0xC
	0x0377BE7C STR W22, [X31 + 0xC]
	0x0377BE80 BL 0x1C16E04
	0x0377BE84 CBZ X24, 0x377C014
	0x0377BE88 MOV X22, X0
	0x0377BE8C CBZ X0, 0x377BEA4
	0x0377BE90 LDR X8, [X24]
	0x0377BE94 MOV X0, X22
	0x0377BE98 LDR X1, [X8 + 0x40]
	0x0377BE9C BL 0x1C16E00
	0x0377BEA0 CBZ X0, 0x377C01C
	0x0377BEA4 LDR W8, [X24 + 0x18]
	0x0377BEA8 CBZ W8, 0x377C018
	0x0377BEAC ADRP X27, 0x980000
	0x0377BEB0 LDR X27, [X27 + 0x720]
	0x0377BEB4 STR X22, [X24 + 0x20]
	0x0377BEB8 ADD X1, X31, 0x8
	0x0377BEBC STR W21, [X31 + 0x8]
	0x0377BEC0 LDR X0, [X27]
	0x0377BEC4 BL 0x1C16E04
	0x0377BEC8 MOV X22, X0
	0x0377BECC CBZ X0, 0x377BEE4
	0x0377BED0 LDR X8, [X24]
	0x0377BED4 MOV X0, X22
	0x0377BED8 LDR X1, [X8 + 0x40]
	0x0377BEDC BL 0x1C16E00
	0x0377BEE0 CBZ X0, 0x377C01C
	0x0377BEE4 LDR W8, [X24 + 0x18]
	0x0377BEE8 CMP W8, 0x1
	0x0377BEEC B.LS 0x377C018
	0x0377BEF0 STR X22, [X24 + 0x28]
	0x0377BEF4 LDR X0, [X27]
	0x0377BEF8 ADD W8, W20, W21
	0x0377BEFC ADD X1, X31, 0x4
	0x0377BF00 STR W8, [X31 + 0x4]
	0x0377BF04 BL 0x1C16E04
	0x0377BF08 MOV X20, X0
	0x0377BF0C CBZ X0, 0x377BF24
	0x0377BF10 LDR X8, [X24]
	0x0377BF14 MOV X0, X20
	0x0377BF18 LDR X1, [X8 + 0x40]
	0x0377BF1C BL 0x1C16E00
	0x0377BF20 CBZ X0, 0x377C01C
	0x0377BF24 LDR W8, [X24 + 0x18]
	0x0377BF28 CMP W8, 0x2
	0x0377BF2C B.LS 0x377C018
	0x0377BF30 STR X20, [X24 + 0x30]
	0x0377BF34 CBZ X25, 0x377BF50
	0x0377BF38 LDR X8, [X24]
	0x0377BF3C MOV X0, X25
	0x0377BF40 LDR X1, [X8 + 0x40]
	0x0377BF44 BL 0x1C16E00
	0x0377BF48 CBZ X0, 0x377C01C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC66000
	009 Move W8, [X23+3939]
	010 Move W20, W3
	011 Move X19, X2
	012 Move X22, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9A1000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3939], W8
	023 Compare X22, 0
	024 JumpIfEqual {58}
	025 Compare X19, 0
	026 JumpIfEqual {65}
	027 Move X8, [X21]
	028 Move X0, X21
	029 Move X9, [X8+392]
	030 Move X1, [X8+400]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, 0x9A1000
	034 Move X8, [X8+3352]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move W8, [X21+20]
	041 Add X0, X21, 16
	042 Move X1, X31
	043 Add X20, X8, X22
	044 Call InputStateBlock.get_alignedSizeInBytes, X0
	045 Move W2, W0
	046 Move X0, X19
	047 Move X1, X20
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Move X30, [X31+16]
	053 Move X23, [X31+24]
	054 Move X3, X31
	055 Add X31, X31, 64
	056 Call UnsafeUtility.MemCpy, X0, X1, X2
	057 Return 
	058 Move X0, 0x97E000
	059 Move X0, [X0+1320]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X19, X0
	063 Move X0, 0x9A1000
	064 Move X0, [X0+3464]
	065 Move X0, 0x97E000
	066 Move X0, [X0+1320]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0x9A4000
	071 Move X0, [X0+4080]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Move X2, X31
	076 Call ArgumentNullException..ctor, X0, X1
	077 Move X0, 0x9CC000
	078 Move X0, [X0+4008]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Call 0x1C17DEC
	083 Move X8, [X21]
	084 Move X0, X21
	085 Move X9, [X8+392]
	086 Move X1, [X8+400]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Move [X31+12], W0
	089 Move X19, 0x979000
	090 Move X19, [X19+1880]
	091 Move X0, X19
	092 Call 0x1C17D08
	093 Add X1, X31, 12
	094 Call 0x1C17E04
	095 Move X21, X0
	096 Move X0, X19
	097 Move [X31+8], W20
	098 Call 0x1C17D08
	099 Add X1, X31, 8
	100 Call 0x1C17E04
	101 Move X19, X0
	102 Move X0, 0x9CC000
	103 Move X0, [X0+4016]
	104 Call 0x1C17D08
	105 Move X1, X21
	106 Move X2, X19
	107 Move X3, X31
	108 Call String.Format, X0, X1, X2
	109 Move X19, X0
	110 Move X0, 0x981000
	111 Move X0, [X0+1400]
	112 Call 0x1C17D08
	113 Call 0x1C17F10
	114 Move X1, X19
	115 Move X2, X31
	116 Move X20, X0
	117 Call ArgumentException..ctor, X0, X1
	118 Move X0, 0x9CC000
	119 Move X0, [X0+4008]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X20
	123 Call 0x1C17DEC

Method: System.Boolean CompareValue(System.Void* firstStatePtr, System.Void* secondStatePtr)

Disassembly:
	0x0377BF4C LDR W8, [X24 + 0x18]
	0x0377BF50 CMP W8, 0x3
	0x0377BF54 B.LS 0x377C018
	0x0377BF58 STR X25, [X24 + 0x38]
	0x0377BF5C CBZ X23, 0x377BF78
	0x0377BF60 LDR X8, [X24]
	0x0377BF64 MOV X0, X23
	0x0377BF68 LDR X1, [X8 + 0x40]
	0x0377BF6C BL 0x1C16E00
	0x0377BF70 CBZ X0, 0x377C01C
	0x0377BF74 LDR W8, [X24 + 0x18]
	0x0377BF78 CMP W8, 0x4
	0x0377BF7C B.LS 0x377C018
	0x0377BF80 ADRP X8, 0x9CC000
	0x0377BF84 LDR X8, [X8]
	0x0377BF88 STR X23, [X24 + 0x40]
	0x0377BF8C MOV X1, X24
	0x0377BF90 MOV X2, X31
	0x0377BF94 LDR X0, [X8]
	0x0377BF98 BL 0x3227C5C
	0x0377BF9C CBZ X19, 0x377C014
	0x0377BFA0 LDR W10, [X19 + 0x1C]
	0x0377BFA4 LDR X8, [X19 + 0x10]
	0x0377BFA8 LDR X9, [X26]
	0x0377BFAC ADD W10, W10, 0x1
	0x0377BFB0 STR W10, [X19 + 0x1C]
	0x0377BFB4 CBZ X8, 0x377C014
	0x0377BFB8 LDRSW X10, [X19 + 0x18]
	0x0377BFBC LDR W11, [X8 + 0x18]
	0x0377BFC0 MOV X1, X0
	0x0377BFC4 CMP W10, W11
	0x0377BFC8 B.CS 0x377BFE0
	0x0377BFCC ADD W9, W10, 0x1
	0x0377BFD0 ADD X8, X8, X10, 0x3, LSL
	0x0377BFD4 STR W9, [X19 + 0x18]
	0x0377BFD8 STR X1, [X8 + 0x20]
	0x0377BFDC B 0x377BFF4
	0x0377BFE0 LDR X8, [X9 + 0x20]
	0x0377BFE4 MOV X0, X19
	0x0377BFE8 LDR X8, [X8 + 0xC0]
	0x0377BFEC LDR X2, [X8 + 0x70]
	0x0377BFF0 BL 0x301BF90
	0x0377BFF4 LDP X20, X19, [X31 + 0x60]
	0x0377BFF8 LDP X22, X21, [X31 + 0x50]
	0x0377BFFC LDP X24, X23, [X31 + 0x40]
	0x0377C000 LDP X26, X25, [X31 + 0x30]
	0x0377C004 LDP X28, X27, [X31 + 0x20]
	0x0377C008 LDP X29, X30, [X31 + 0x10]
	0x0377C00C ADD X31, X31, 0x70
	0x0377C010 RET
	0x0377C014 BL 0x1C16F20
	0x0377C018 BL 0x1C16F28
	0x0377C01C BL 0x1C16F44
	0x0377C020 MOV X1, X31
	0x0377C024 BL 0x1C16DEC
	0x0377C028 STP X30, X27, [X31 - 0x50]!
	0x0377C02C STP X26, X25, [X31 + 0x10]
	0x0377C030 STP X24, X23, [X31 + 0x20]
	0x0377C034 STP X22, X21, [X31 + 0x30]
	0x0377C038 STP X20, X19, [X31 + 0x40]
	0x0377C03C MOV X19, X3
	0x0377C040 MOV W22, W2
	0x0377C044 MOV X21, X1
	0x0377C048 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC66000
	007 Move W8, [X22+3940]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9A1000
	016 Move X0, [X0+3352]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3940], W8
	020 Compare X19, 0
	021 JumpIfEqual {49}
	022 Compare X21, 0
	023 JumpIfEqual {56}
	024 Move X8, 0x9A1000
	025 Move X8, [X8+3352]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move W8, [X20+20]
	032 Add X0, X20, 16
	033 Move X1, X31
	034 Add X19, X8, X19
	035 Call InputStateBlock.get_alignedSizeInBytes, X0
	036 Move W2, W0
	037 Move X0, X19
	038 Move X1, X19
	039 Move X3, X31
	040 Call UnsafeUtility.MemCmp, X0, X1, X2
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move X30, [X31+48]
	048 Return X0
	049 Move X0, 0x97E000
	050 Move X0, [X0+1320]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0x9CC000
	055 Move X0, [X0+4024]
	056 Move X0, 0x97D000
	057 Move X0, [X0+1320]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0x9CB000
	062 Move X0, [X0+4032]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X19
	066 Move X2, X31
	067 Call ArgumentNullException..ctor, X0, X1
	068 Move X0, 0x9CB000
	069 Move X0, [X0+4040]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Call 0x1C17DEC

Method: System.Void NotifyConfigurationChanged()

Disassembly:
	0x0377C04C LDR X8, [X20 + 0x160]
	0x0377C050 CBZ X8, 0x377C148
	0x0377C054 LDR W10, [X8 + 0x18]
	0x0377C058 SBFM X9, X21, 0x10, 0x1F
	0x0377C05C CMP W9, W10
	0x0377C060 B.CS 0x377C144
	0x0377C064 MOV W11, W21
	0x0377C068 SBFM X11, X11, 0x10, 0x1F
	0x0377C06C ADD X23, X11, 0x1
	0x0377C070 CMP W23, W10
	0x0377C074 B.CS 0x377C144
	0x0377C078 UBFM X10, X9, 0x3D, 0x3C
	0x0377C07C UBFM X11, X23, 0x3D, 0x3C
	0x0377C080 SUB X9, X10, X9
	0x0377C084 SUB X10, X11, X23
	0x0377C088 ADD X9, X8, X9
	0x0377C08C ADD X8, X8, X10
	0x0377C090 LDRB W10, [X9 + 0x26]
	0x0377C094 LDRH W11, [X9 + 0x24]
	0x0377C098 LDR W25, [X9 + 0x20]
	0x0377C09C LDRB W12, [X8 + 0x26]
	0x0377C0A0 LDRH W13, [X8 + 0x24]
	0x0377C0A4 LDR W26, [X8 + 0x20]
	0x0377C0A8 BFM W11, W10, 0x10, 0x7
	0x0377C0AC BFM X25, X11, 0x20, 0x17
	0x0377C0B0 AND W24, W25, 0xFFFF
	0x0377C0B4 SBFM W1, W21, 0x10, 0x1F
	0x0377C0B8 BFM W13, W12, 0x10, 0x7
	0x0377C0BC MOV X21, X26
	0x0377C0C0 SUB W4, W24, W22
	0x0377C0C4 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+160]
	003 Move X8, [X0+336]
	004 And W9, W9, 0xFFFFFFFE
	005 Move [X0+160], W9
	006 Compare X8, 0
	007 JumpIfEqual {30}
	008 Move W9, [X8+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W10, W31
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X11, X8, W10
	013 Move X11, [X11+32]
	014 Compare X11, 0
	015 JumpIfEqual {30}
	016 Move W12, [X11+160]
	017 Add W10, W10, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 And W12, W12, 0xFFFFFFFE
	020 Move [X11+160], W12
	021 Move W8, [X0+220]
	022 Move X9, [X0]
	023 And W8, W8, 0xFFFFFFBF
	024 Move [X0+220], W8
	025 Move X2, [X9+632]
	026 Move X1, [X9+640]
	027 Move X30, [X31+16]
	028 CallNoReturn X2
	029 Call 0x1C17F28
	030 Call 0x1C17F20

Method: System.Void MakeCurrent()

Disassembly:
	0x0377B674 LDRB W8, [X9 + 0x26]

ISIL:
	001 Return 

Method: System.Void OnAdded()

Disassembly:
	0x0377C0C8 MOV X2, X25

ISIL:
	001 Return 

Method: System.Void OnRemoved()

Disassembly:
	0x0377C0CC MOV W3, W22

ISIL:
	001 Return 

Method: System.Void OnConfigurationChanged()

Disassembly:
	0x0377C0D0 MOV X5, X19

ISIL:
	001 Return 

Method: System.Int64 ExecuteCommand(ref TCommand command)

Disassembly:
	0x022052A8 MOV X1, X0
	0x022052AC MOV X0, X27
	0x022052B0 MOV X2, X31
	0x022052B4 BL 0x321B938
	0x022052B8 MOV X27, X0
	0x022052BC MOV X0, X25
	0x022052C0 BL 0x1C16D08
	0x022052C4 LDR W8, [X0 + 0xE0]
	0x022052C8 CBNZ W8, 0x22052D0
	0x022052CC BL 0x1C16DFC
	0x022052D0 MOV X0, X27
	0x022052D4 MOV X1, X31
	0x022052D8 BL 0x3C0649C
	0x022052DC MOV X0, X26
	0x022052E0 MOV X1, X31
	0x022052E4 BL 0x3C02C84
	0x022052E8 ADRP X26, 0x1F16000
	0x022052EC ADRP X27, 0x1F16000
	0x022052F0 ADRP X28, 0x1F16000
	0x022052F4 LDR X26, [X26 + 0xEA0]
	0x022052F8 LDR X27, [X27 + 0xE98]
	0x022052FC LDR X28, [X28 + 0xEB0]
	0x02205300 LDR X1, [X26]
	0x02205304 MOV X0, X21
	0x02205308 ADD W22, W22, 0x1
	0x0220530C BL 0x28F140C
	0x02205310 CMP W22, W0
	0x02205314 B.LT 0x22051E4
	0x02205318 ADRP X8, 0x1F16000
	0x0220531C LDR X8, [X8 + 0xE90]
	0x02205320 MOV X0, X21
	0x02205324 LDR X1, [X8]
	0x02205328 BL 0x28F17C8
	0x0220532C LDR X8, [X20]
	0x02205330 MOV X0, X20
	0x02205334 MOV X1, X19
	0x02205338 LDR X9, [X8 + 0x288]
	0x0220533C LDR X2, [X8 + 0x290]
	0x02205340 BLR X9
	0x02205344 LDP X20, X19, [X31 + 0x60]
	0x02205348 LDP X22, X21, [X31 + 0x50]
	0x0220534C LDP X24, X23, [X31 + 0x40]
	0x02205350 LDP X26, X25, [X31 + 0x30]
	0x02205354 LDP X28, X27, [X31 + 0x20]
	0x02205358 LDR X30, [X31 + 0x10]
	0x0220535C ADD X31, X31, 0x70
	0x02205360 RET
	0x02205364 BL 0x1C16F20
	0x02205368 MOVZ W0, 0x8
	0x0220536C BL 0x3EB1AF0
	0x02205370 LDR X8, [X26]
	0x02205374 STR X8, [X0]
	0x02205378 ADRP X1, 0x1CAF000
	0x0220537C ADD X1, X1, 0xE58
	0x02205380 MOV X2, X31
	0x02205384 BL 0x3EB1B00
	0x02205388 B 0x220538C
	0x0220538C MOV X26, X0
	0x02205390 BL 0x3EB1AE0
	0x02205394 MOV X0, X26
	0x02205398 BL 0x1D2C690
	0x0220539C BL 0x1990590
	0x022053A0 SUB X31, X31, 0x70
	0x022053A4 STR X30, [X31 + 0x10]
	0x022053A8 STP X28, X27, [X31 + 0x20]
	0x022053AC STP X26, X25, [X31 + 0x30]
	0x022053B0 STP X24, X23, [X31 + 0x40]
	0x022053B4 STP X22, X21, [X31 + 0x50]
	0x022053B8 STP X20, X19, [X31 + 0x60]
	0x022053BC ADRP X22, 0x21D4000
	0x022053C0 ADRP X21, 0x1F16000
	0x022053C4 LDRB W8, [X22 + 0x840]
	0x022053C8 LDR X21, [X21 + 0x270]
	0x022053CC MOV X19, X1
	0x022053D0 MOV X20, X0
	0x022053D4 TBNZ X8, 0x0, 0x2205434
	0x022053D8 ADRP X0, 0x1F16000
	0x022053DC LDR X0, [X0 + 0xE88]
	0x022053E0 BL 0x1C16CF4
	0x022053E4 ADRP X0, 0x1F16000
	0x022053E8 LDR X0, [X0 + 0xE90]
	0x022053EC BL 0x1C16CF4
	0x022053F0 ADRP X0, 0x1F16000
	0x022053F4 LDR X0, [X0 + 0xE98]
	0x022053F8 BL 0x1C16CF4
	0x022053FC ADRP X0, 0x1F16000
	0x02205400 LDR X0, [X0 + 0xEA0]
	0x02205404 BL 0x1C16CF4
	0x02205408 ADRP X0, 0x1F16000
	0x0220540C LDR X0, [X0 + 0x270]
	0x02205410 BL 0x1C16CF4
	0x02205414 ADRP X0, 0x1F16000
	0x02205418 LDR X0, [X0 + 0xEA8]
	0x0220541C BL 0x1C16CF4
	0x02205420 ADRP X0, 0x1F16000
	0x02205424 LDR X0, [X0 + 0xEB0]
	0x02205428 BL 0x1C16CF4
	0x0220542C MOVZ W8, 0x1
	0x02205430 STRB W8, [X22 + 0x840]
	0x02205434 LDR X0, [X21]
	0x02205438 STP X31, X31, [X31]
	0x0220543C LDR W8, [X0 + 0xE0]
	0x02205440 CBNZ W8, 0x220544C
	0x02205444 BL 0x1C16DFC
	0x02205448 LDR X0, [X21]
	0x0220544C LDR X8, [X0 + 0xB8]
	0x02205450 LDR X8, [X8]
	0x02205454 CBZ X8, 0x2205638
	0x02205458 ADRP X9, 0x1F16000
	0x0220545C LDR X9, [X9 + 0xE88]
	0x02205460 ADRP X26, 0x1F16000
	0x02205464 ADD X21, X8, 0x1D0
	0x02205468 MOV X0, X21
	0x0220546C LDR X1, [X9]
	0x02205470 LDR X26, [X26 + 0xEA0]
	0x02205474 BL 0x28F17BC
	0x02205478 LDR X1, [X26]
	0x0220547C MOV X0, X21
	0x02205480 BL 0x28F140C
	0x02205484 CMP W0, 0x1
	0x02205488 B.LT 0x22055EC
	0x0220548C ADRP X27, 0x1F16000
	0x02205490 ADRP X28, 0x1F16000
	0x02205494 ADRP X23, 0x1EEE000
	0x02205498 ADRP X24, 0x1F16000
	0x0220549C ADRP X25, 0x1EEE000
	0x022054A0 LDR X27, [X27 + 0xE98]
	0x022054A4 LDR X28, [X28 + 0xEB0]
	0x022054A8 LDR X23, [X23 + 0x7D0]
	0x022054AC LDR X24, [X24 + 0xEB8]
	0x022054B0 LDR X25, [X25 + 0xA28]
	0x022054B4 MOV W22, W31
	0x022054B8 LDR X2, [X27]
	0x022054BC MOV X0, X21
	0x022054C0 MOV W1, W22
	0x022054C4 BL 0x28F1414
	0x022054C8 CBZ X0, 0x2205504
	0x022054CC LDR X9, [X0 + 0x18]
	0x022054D0 LDR X8, [X0 + 0x40]
	0x022054D4 LDR X3, [X0 + 0x28]
	0x022054D8 MOV X0, X8
	0x022054DC MOV X1, X20
	0x022054E0 MOV X2, X19
	0x022054E4 BLR X9
	0x022054E8 ANDS W31, W0, 0xFF
	0x022054EC STP X0, X1, [X31]
	0x022054F0 B.EQ 0x22055D4
	0x022054F4 LDR X1, [X28]
	0x022054F8 ADD X0, X31, 0x0
	0x022054FC BL 0x24349A0
	0x02205500 B 0x2205618
	0x02205504 BL 0x1C16F20
	0x02205508 B 0x220565C
	0x0220550C B 0x2205518
	0x02205510 B 0x2205518
	0x02205514 B 0x2205518
	0x02205518 MOV X26, X0
	0x0220551C CMP W1, 0x1
	0x02205520 B.NE 0x2205668
	0x02205524 MOV X0, X26
	0x02205528 BL 0x3EB1AD0
	0x0220552C MOV X26, X0
	0x02205530 MOV X0, X23
	0x02205534 BL 0x1C16D08
	0x02205538 LDR X8, [X26]
	0x0220553C LDR X1, [X8]
	0x02205540 BL 0x1C17270
	0x02205544 TBZ X0, 0x0, 0x220563C
	0x02205548 LDR X26, [X26]
	0x0220554C BL 0x3EB1AE0
	0x02205550 CBZ X26, 0x2205638
	0x02205554 MOV X0, X26
	0x02205558 MOV X1, X31
	0x0220555C BL 0x33B32AC
	0x02205560 CBZ X0, 0x2205638
	0x02205564 LDR X8, [X0]
	0x02205568 LDP X9, X1, [X8 + 0x1A8]
	0x0220556C BLR X9
	0x02205570 MOV X27, X0
	0x02205574 MOV X0, X24
	0x02205578 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X22, 0x21D5000
	014 Move X21, 0x1F17000
	015 Move W8, [X22+2106]
	016 Move X21, [X21+624]
	017 Move X19, X1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0x1F17000
	024 Move X0, [X0+3720]
	025 Call 0x1C17CF4
	026 Move X0, 0x1F17000
	027 Move X0, [X0+3728]
	028 Call 0x1C17CF4
	029 Move X0, 0x1F17000
	030 Move X0, [X0+3736]
	031 Call 0x1C17CF4
	032 Move X0, 0x1F17000
	033 Move X0, [X0+3744]
	034 Call 0x1C17CF4
	035 Move X0, 0x1F17000
	036 Move X0, [X0+624]
	037 Call 0x1C17CF4
	038 Move X0, 0x1F17000
	039 Move X0, [X0+3752]
	040 Call 0x1C17CF4
	041 Move X0, 0x1F17000
	042 Move X0, [X0+3760]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X22+2106], W8
	046 Move X0, [X21]
	047 Move [X31], X31
	048 Move [X31+8], X31
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X21]
	054 Move X8, [X0+184]
	055 Move X8, [X8]
	056 Compare X8, 0
	057 JumpIfEqual {183}
	058 Move X9, 0x1F17000
	059 Move X9, [X9+3720]
	060 Move X26, 0x1F17000
	061 Add X21, X8, 464
	062 Move X0, X21
	063 Move X1, [X9]
	064 Move X26, [X26+3744]
	065 Call 0x28F27BC, X0
	066 Move X1, [X26]
	067 Move X0, X21
	068 Call 0x28F240C, X0
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X27, 0x1F17000
	071 Move X28, 0x1F17000
	072 Move X23, 0x1EEF000
	073 Move X24, 0x1F17000
	074 Move X25, 0x1EEF000
	075 Move X27, [X27+3736]
	076 Move X28, [X28+3760]
	077 Move X23, [X23+2000]
	078 Move X24, [X24+3768]
	079 Move X25, [X25+2600]
	080 Move W22, W31
	081 Move X2, [X27]
	082 Move X0, X21
	083 Move W1, W22
	084 Call 0x28F2414, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {100}
	087 Move X9, [X0+24]
	088 Move X8, [X0+64]
	089 Move X3, [X0+40]
	090 Move X0, X8
	091 Move X1, X20
	092 Move X2, X19
	093 NotImplemented "Instruction BLR not yet implemented."
	094 And W31, W0, 255
	095 Move [X31], X0
	096 Move [X31+8], X1
	097 Move X1, [X28]
	098 Add X0, X31, 0
	099 Call Nullable`1<Int64>.get_Value, X0
	100 Call 0x1C17F20
	101 Move X26, X0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X0, X26
	104 Call 0x3EB2AD0
	105 Move X26, X0
	106 Move X0, X23
	107 Call 0x1C17D08
	108 Move X8, [X26]
	109 Move X1, [X8]
	110 Call 0x1C18270
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {184}
	115 Move X26, [X26]
	116 Call 0x3EB2AE0
	117 Compare X26, 0
	118 JumpIfEqual {183}
	119 Move X0, X26
	120 Move X1, X31
	121 Call Exception.GetType, X0
	122 Compare X0, 0
	123 JumpIfEqual {183}
	124 Move X8, [X0]
	125 Move X9, [X8+424]
	126 Move X1, [X8+432]
	127 NotImplemented "Instruction BLR not yet implemented."
	128 Move X27, X0
	129 Move X0, X24
	130 Call 0x1C17D08
	131 Move X1, X0
	132 Move X0, X27
	133 Move X2, X31
	134 Call String.Concat, X0, X1
	135 Move X27, X0
	136 Move X0, X25
	137 Call 0x1C17D08
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X27
	143 Move X1, X31
	144 Call Debug.LogError, X0
	145 Move X0, X26
	146 Move X1, X31
	147 Call Debug.LogException, X0
	148 Move X26, 0x1F17000
	149 Move X27, 0x1F17000
	150 Move X28, 0x1F17000
	151 Move X26, [X26+3744]
	152 Move X27, [X27+3736]
	153 Move X28, [X28+3760]
	154 Move X1, [X26]
	155 Move X0, X21
	156 Add W22, W22, 1
	157 Call 0x28F240C, X0
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X8, 0x1F17000
	160 Move X8, [X8+3728]
	161 Move X0, X21
	162 Move X1, [X8]
	163 Call 0x28F27C8, X0
	164 Move X8, [X20]
	165 Move X0, X20
	166 Move X1, X19
	167 Move X9, [X8+648]
	168 Move X2, [X8+656]
	169 NotImplemented "Instruction BLR not yet implemented."
	170 Move X20, [X31+96]
	171 Move X19, [X31+104]
	172 Move X22, [X31+80]
	173 Move X21, [X31+88]
	174 Move X24, [X31+64]
	175 Move X23, [X31+72]
	176 Move X26, [X31+48]
	177 Move X25, [X31+56]
	178 Move X28, [X31+32]
	179 Move X27, [X31+40]
	180 Move X30, [X31+16]
	181 Add X31, X31, 112
	182 Return X0
	183 Call 0x1C17F20
	184 Move W0, 8
	185 Call 0x3EB2AF0
	186 Move X8, [X26]
	187 Move [X0], X8
	188 Move X1, 0x1CB0000
	189 Add X1, X1, 3672
	190 Move X2, X31
	191 Call 0x3EB2B00
	192 Move X26, X0
	193 Call 0x3EB2AE0
	194 Move X0, X26
	195 Call 0x1D2D690
	196 Call 0x1991590

Method: System.Int64 ExecuteCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommand* commandPtr)

Disassembly:
	0x0377C0D4 BFM X21, X13, 0x20, 0x17
	0x0377C0D8 ORN W27, W31, W25, 0x0
	0x0377C0DC BL 0x377BC10
	0x0377C0E0 AND W8, W26, 0xFFFF
	0x0377C0E4 SUB W4, W8, W25, UXTH
	0x0377C0E8 MOV X0, X20
	0x0377C0EC MOV W1, W23
	0x0377C0F0 MOV X2, X21
	0x0377C0F4 MOV W3, W24
	0x0377C0F8 MOV X5, X19
	0x0377C0FC BL 0x377BC10
	0x0377C100 ANDS X31, X27, 0xFFFFFFFF
	0x0377C104 B.EQ 0x377C11C
	0x0377C108 MOV X0, X20
	0x0377C10C MOV X1, X25
	0x0377C110 MOV W2, W22
	0x0377C114 MOV X3, X19
	0x0377C118 BL 0x377C028
	0x0377C11C ORN W8, W31, W21, 0x0
	0x0377C120 ANDS X31, X8, 0xFFFFFFFF
	0x0377C124 MOV W22, W24
	0x0377C128 B.NE 0x377C04C
	0x0377C12C LDP X20, X19, [X31 + 0x40]
	0x0377C130 LDP X22, X21, [X31 + 0x30]
	0x0377C134 LDP X24, X23, [X31 + 0x20]
	0x0377C138 LDP X26, X25, [X31 + 0x10]
	0x0377C13C LDP X30, X27, [X31], #0x50
	0x0377C140 RET
	0x0377C144 BL 0x1C16F28
	0x0377C148 BL 0x1C16F20
	0x0377C14C STR X30, [X31 - 0x30]!
	0x0377C150 STP X22, X21, [X31 + 0x10]
	0x0377C154 STP X20, X19, [X31 + 0x20]
	0x0377C158 ADRP X21, 0xC64000
	0x0377C15C ADRP X22, 0x978000
	0x0377C160 ADRP X20, 0x978000
	0x0377C164 LDRB W8, [X21 + 0xF70]
	0x0377C168 LDR X22, [X22 + 0x1D0]
	0x0377C16C LDR X20, [X20 + 0x1C0]
	0x0377C170 MOV X19, X0
	0x0377C174 TBNZ X8, 0x0, 0x377C1A4
	0x0377C178 ADRP X0, 0x978000
	0x0377C17C LDR X0, [X0 + 0x1C0]
	0x0377C180 BL 0x1C16CF4
	0x0377C184 ADRP X0, 0x978000
	0x0377C188 LDR X0, [X0 + 0x1D0]
	0x0377C18C BL 0x1C16CF4
	0x0377C190 ADRP X0, 0x978000
	0x0377C194 LDR X0, [X0 + 0xFE0]
	0x0377C198 BL 0x1C16CF4
	0x0377C19C MOVZ W8, 0x1
	0x0377C1A0 STRB W8, [X21 + 0xF70]
	0x0377C1A4 LDR X0, [X22]
	0x0377C1A8 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC65000
	007 Move X22, 0x9A0000
	008 Move W8, [X20+3941]
	009 Move X22, [X22+3784]
	010 Move X19, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x9A0000
	017 Move X0, [X0+3792]
	018 Call 0x1C17CF4
	019 Move X0, 0x9A0000
	020 Move X0, [X0+3784]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3941], W8
	024 Move X8, [X22]
	025 Move X8, [X8+184]
	026 Move X20, [X8]
	027 Compare X20, 0
	028 JumpIfEqual {61}
	029 Move X10, 0x9A0000
	030 Move X8, [X20]
	031 Move X10, [X10+3792]
	032 Move W21, [X21+224]
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Move X1, [X10]
	035 Compare X9, 0
	036 JumpIfEqual {43}
	037 Move X10, [X8+176]
	038 Add X10, X10, 8
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract X9, X9, 1
	042 Add X10, X10, 16
	043 Move W2, 3
	044 Move X0, X20
	045 Call 0x1C5D788
	046 Move W9, [X10]
	047 Add W9, W9, 3
	048 Add X8, X8, W9
	049 Add X0, X8, 312
	050 Move X4, [X0]
	051 Move X3, [X0+8]
	052 Move X0, X20
	053 Move W1, W21
	054 Move X2, X19
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 CallNoReturn X4
	061 Call 0x1C17F20

Method: System.Boolean QueryEnabledStateFromRuntime()

Disassembly:
	0x0377B8C0 BFM W19, W28, 0x10, 0x7
	0x0377B8C4 MOV W0, W20
	0x0377B8C8 MOV W1, W27
	0x0377B8CC MOV X2, X31
	0x0377B8D0 BFM X26, X19, 0x20, 0x17
	0x0377B8D4 BL 0x337EE48
	0x0377B8D8 MOV W19, W0
	0x0377B8DC AND W1, W26, 0xFFFF
	0x0377B8E0 MOV W0, W24
	0x0377B8E4 MOV X2, X31
	0x0377B8E8 BL 0x337EEEC
	0x0377B8EC CMP W19, W0
	0x0377B8F0 B.HI 0x377B964
	0x0377B8F4 UBFM X9, X26, 0x30, 0x3F
	0x0377B8F8 CBZ W9, 0x377B954
	0x0377B8FC LDR X10, [X23 + 0x168]
	0x0377B900 CBZ X10, 0x377B988
	0x0377B904 LDR W8, [X10 + 0x18]
	0x0377B908 UBFM X11, X26, 0x20, 0x3F
	0x0377B90C ADD W9, W9, W11, UXTH
	0x0377B910 ADD X10, X10, 0x20
	0x0377B914 UBFM X11, X26, 0x20, 0x2F
	0x0377B918 CMP W11, W8
	0x0377B91C B.CS 0x377B984
	0x0377B920 LDR X12, [X23 + 0x150]
	0x0377B924 CBZ X12, 0x377B988
	0x0377B928 LDRH W13, [X10, X11, LSL #1]
	0x0377B92C LDR W14, [X12 + 0x18]
	0x0377B930 CMP W13, W14
	0x0377B934 B.CS 0x377B984
	0x0377B938 ADD X12, X12, X13, 0x3, LSL
	0x0377B93C LDR X12, [X12 + 0x20]
	0x0377B940 CBZ X12, 0x377B988
	0x0377B944 ADD X11, X11, 0x1
	0x0377B948 CMP W11, W9
	0x0377B94C STRH W21, [X12 + 0xA4]
	0x0377B950 B.CC 0x377B918
	0x0377B954 ORN W8, W31, W26, 0x0
	0x0377B958 ANDS X31, X8, 0xFFFFFFFF
	0x0377B95C MOV W28, W27

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xC66000
	006 Move W8, [X20+3942]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9CC000
	013 Move X0, [X0+3976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3942], W8
	017 Move W8, [X19+220]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 64
	020 Compare TEMP, 64
	021 JumpIfEqual {47}
	022 Move X0, X31
	023 Call QueryEnabledStateCommand.Create
	024 Move X8, 0x9CC000
	025 Move X8, [X8+3976]
	026 Move [X31], X0
	027 Move [X31+8], W1
	028 Add X1, X31, 0
	029 Move X2, [X8]
	030 Move X0, X19
	031 Call InputDevice.ExecuteCommand, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {43}
	036 Move W9, [X31+8]
	037 Move W8, [X19+220]
	038 Move TEMP, X9
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {44}
	042 Or W8, W8, 128
	043 Move W8, [X19+220]
	044 And W8, W8, 0xFFFFFF7F
	045 Or W8, W8, 64
	046 Move [X19+220], W8
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 And W31, W8, 128
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Add X31, X31, 48
	053 Return X0

Method: System.Boolean get_disabledInFrontend()

Disassembly:
	0x0377C1AC LDR X1, [X20]
	0x0377C1B0 MOV X20, X0
	0x0377C1B4 BL 0x301B7C4

ISIL:
	001 Move W8, [X0+220]
	002 Move W0, W8
	003 ShiftRight W0, 5
	004 And W0, W0, 31
	005 Return X0

Method: System.Void set_disabledInFrontend(System.Boolean value)

Disassembly:
	0x0377C1B8 LDR X8, [X19 + 0x160]
	0x0377C1BC CBZ X8, 0x377C210
	0x0377C1C0 LDR W9, [X8 + 0x18]
	0x0377C1C4 CBZ W9, 0x377C214
	0x0377C1C8 LDRB W9, [X8 + 0x26]
	0x0377C1CC LDRH W10, [X8 + 0x24]
	0x0377C1D0 LDR W1, [X8 + 0x20]
	0x0377C1D4 ADRP X21, 0x978000

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 32
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFDF
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.Boolean get_disabledInRuntime()

Disassembly:
	0x0377C1D8 LDR X21, [X21 + 0xFE0]
	0x0377C1DC BFM W10, W9, 0x10, 0x7
	0x0377C1E0 BFM X1, X10, 0x20, 0x17

ISIL:
	001 Move W8, [X0+220]
	002 Move W0, W8
	003 ShiftRight W0, 7
	004 And W0, W0, 0x7FFFFFFF
	005 Return X0

Method: System.Void set_disabledInRuntime(System.Boolean value)

Disassembly:
	0x0377C1E4 MOV X0, X19
	0x0377C1E8 MOV W2, W31
	0x0377C1EC MOV X3, X20
	0x0377C1F0 BL 0x377C028
	0x0377C1F4 LDR X0, [X21]
	0x0377C1F8 MOV X1, X20
	0x0377C1FC LDP X20, X19, [X31 + 0x20]
	0x0377C200 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 128
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFF7F
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.Boolean get_disabledWhileInBackground()

Disassembly:
	0x0377C204 MOV X2, X31
	0x0377C208 LDR X30, [X31], #0x30
	0x0377C20C B 0x32280D8

ISIL:
	001 Move W8, [X0+221]
	002 And W0, W8, 1
	003 Return X0

Method: System.Void set_disabledWhileInBackground(System.Boolean value)

Disassembly:
	0x0377C210 BL 0x1C16F20
	0x0377C214 BL 0x1C16F28
	0x0377C218 STP X30, X21, [X31 - 0x20]!
	0x0377C21C STP X20, X19, [X31 + 0x10]
	0x0377C220 MOV W19, W2
	0x0377C224 MOV X20, X1
	0x0377C228 CMP W3, 0x1
	0x0377C22C B.NE 0x377C258

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 256
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFEFF
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.UInt32 EncodeStateOffsetToControlMapEntry(System.UInt32 controlIndex, System.UInt32 stateOffsetInBits, System.UInt32 stateSizeInBits)

Disassembly:
	0x0377C230 MOV W1, W19
	0x0377C234 MOV X2, X31
	0x0377C238 BL 0x37626D0

ISIL:
	001 Or W8, W0, W1
	002 Or W0, W8, W2
	003 Return X0

Method: System.Void DecodeStateOffsetToControlMapEntry(System.UInt32 entry, out System.UInt32 controlIndex, out System.UInt32 stateOffset, out System.UInt32 stateSize)

Disassembly:
	0x03777114 SUB X31, X31, 0x90
	0x03777118 STR X30, [X31 + 0x70]
	0x0377711C STP X20, X19, [X31 + 0x80]
	0x03777120 MOV X19, X1
	0x03777124 MOV X1, X31
	0x03777128 MOV X20, X0
	0x0377712C STP X31, X31, [X31 + 0x8]

ISIL:
	001 And W8, W0, 1023
	002 Move W9, W0
	003 ShiftRight W9, 19
	004 And W9, W9, 0x7FFFFFFF
	005 Move W10, W0
	006 ShiftRight W10, 10
	007 And W10, W10, 0x3FFFF
	008 Move [X1], W8
	009 Move [X2], W9
	010 Move [X3], W10
	011 Return 

Method: System.Boolean get_hasControlsWithDefaultState()

Disassembly:
	0x0377C23C MOV W21, W0
	0x0377C240 MOV X0, X20
	0x0377C244 MOV W1, W19

ISIL:
	001 Move W8, [X0+220]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Void set_hasControlsWithDefaultState(System.Boolean value)

Disassembly:
	0x037773C4 MOV X2, X31
	0x037773C8 ADD W1, W8, 0x1
	0x037773CC BL 0x3222A1C
	0x037773D0 AND W8, W0, 0xFFFF
	0x037773D4 MOV X22, X31
	0x037773D8 CMP W8, 0x28
	0x037773DC MOV X23, X31
	0x037773E0 B.NE 0x3777410

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 4
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFFB
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.Boolean get_hasDontResetControls()

Disassembly:
	0x0377C248 MOV X2, X31
	0x0377C24C BL 0x37626D0
	0x0377C250 EOR W8, W21, W0, 0x0

ISIL:
	001 Move W8, [X0+221]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Void set_hasDontResetControls(System.Boolean value)

Disassembly:
	0x037774C0 ADRP X21, 0xC69000
	0x037774C4 ADRP X24, 0x97E000
	0x037774C8 LDRB W8, [X21 + 0xF4B]
	0x037774CC LDR X24, [X24 + 0x278]
	0x037774D0 MOV X23, X4
	0x037774D4 MOV X20, X3
	0x037774D8 MOV X25, X1
	0x037774DC MOV X19, X0

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 1024
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFBFF
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.Boolean get_hasStateCallbacks()

Disassembly:
	0x03775978 LDR X0, [X0 + 0x8]
	0x0377597C RET
	0x03775980 STR D8, [X31 - 0x40]!

ISIL:
	001 Move W8, [X0+220]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

Method: System.Void set_hasStateCallbacks(System.Boolean value)

Disassembly:
	0x0377C254 B 0x377C270
	0x0377C258 MOV X1, X20
	0x0377C25C MOV W2, W19
	0x0377C260 MOV X4, X31
	0x0377C264 MOV X5, X31
	0x0377C268 BL 0x37626EC
	0x0377C26C EOR W8, W0, 0x1
	0x0377C270 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 2
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFFD
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.Boolean get_hasEventMerger()

Disassembly:
	0x0377C274 AND W0, W8, 0x1
	0x0377C278 LDP X30, X21, [X31], #0x20
	0x0377C27C RET

ISIL:
	001 Move W8, [X0+221]
	002 Move W0, W8
	003 ShiftRight W0, 5
	004 And W0, W0, 31
	005 Return X0

Method: System.Void set_hasEventMerger(System.Boolean value)

Disassembly:
	0x0377C280 MOVZ W8, 0xFFFF
	0x0377C284 STRB W31, [X0 + 0x6]
	0x0377C288 STRH W1, [X0]
	0x0377C28C STUR W8, [X0 + 0x2]
	0x0377C290 RET
	0x0377C294 LDR X0, [X0 + 0x170]
	0x0377C298 RET
	0x0377C29C STR X1, [X0 + 0x170]

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 0x2000
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFDFFF
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.Boolean get_hasEventPreProcessor()

Disassembly:
	0x0377C2A0 RET
	0x0377C2A4 LDR X0, [X0 + 0x178]
	0x0377C2A8 RET

ISIL:
	001 Move W8, [X0+221]
	002 Move W0, W8
	003 ShiftRight W0, 6
	004 And W0, W0, 63
	005 Return X0

Method: System.Void set_hasEventPreProcessor(System.Boolean value)

Disassembly:
	0x0377C2AC STR X1, [X0 + 0x178]
	0x0377C2B0 RET
	0x0377C2B4 LDR X0, [X0 + 0x180]
	0x0377C2B8 RET
	0x0377C2BC STR X1, [X0 + 0x180]
	0x0377C2C0 RET
	0x0377C2C4 LDR X0, [X0 + 0x188]
	0x0377C2C8 RET

ISIL:
	001 Move W8, [X0+220]
	002 And W31, W1, 1
	003 Move W9, 0x4000
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFBFFF
	006 Or W8, W8, W9
	007 Move [X0+220], W8
	008 Return 

Method: System.Void AddDeviceUsage(UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x0377C2CC STR X1, [X0 + 0x188]
	0x0377C2D0 RET
	0x0377C2D4 STR X30, [X31 - 0x20]!
	0x0377C2D8 STP X20, X19, [X31 + 0x10]
	0x0377C2DC ADRP X19, 0xC64000
	0x0377C2E0 ADRP X20, 0x9CB000
	0x0377C2E4 LDRB W8, [X19 + 0xF72]
	0x0377C2E8 LDR X20, [X20 + 0x8]
	0x0377C2EC TBNZ X8, 0x0, 0x377C304
	0x0377C2F0 ADRP X0, 0x9CB000
	0x0377C2F4 LDR X0, [X0 + 0x8]
	0x0377C2F8 BL 0x1C16CF4
	0x0377C2FC MOVZ W8, 0x1
	0x0377C300 STRB W8, [X19 + 0xF72]
	0x0377C304 LDR X8, [X20]
	0x0377C308 LDP X20, X19, [X31 + 0x10]
	0x0377C30C LDR X8, [X8 + 0xB8]
	0x0377C310 LDR X0, [X8]
	0x0377C314 LDR X30, [X31], #0x20
	0x0377C318 RET
	0x0377C31C STP X30, X21, [X31 - 0x20]!
	0x0377C320 STP X20, X19, [X31 + 0x10]
	0x0377C324 ADRP X20, 0xC64000
	0x0377C328 ADRP X21, 0x9CB000
	0x0377C32C LDRB W8, [X20 + 0xF73]
	0x0377C330 LDR X21, [X21 + 0x8]
	0x0377C334 MOV X19, X0
	0x0377C338 TBNZ X8, 0x0, 0x377C350
	0x0377C33C ADRP X0, 0x9CB000
	0x0377C340 LDR X0, [X0 + 0x8]
	0x0377C344 BL 0x1C16CF4
	0x0377C348 MOVZ W8, 0x1
	0x0377C34C STRB W8, [X20 + 0xF73]
	0x0377C350 LDR X8, [X21]
	0x0377C354 LDR X8, [X8 + 0xB8]
	0x0377C358 STR X19, [X8]
	0x0377C35C LDP X20, X19, [X31 + 0x10]
	0x0377C360 LDP X30, X21, [X31], #0x20
	0x0377C364 RET
	0x0377C368 SUB X31, X31, 0x30
	0x0377C36C STP X30, X21, [X31 + 0x10]
	0x0377C370 STP X20, X19, [X31 + 0x20]
	0x0377C374 ADRP X20, 0xC64000
	0x0377C378 ADRP X21, 0x9CB000
	0x0377C37C ADRP X19, 0x9CB000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC65000
	009 Move X22, 0x9A0000
	010 Move W8, [X23+3943]
	011 Move X22, [X22+3488]
	012 Move X20, X2
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x9CB000
	020 Move X0, [X0+4048]
	021 Call 0x1C17CF4
	022 Move X0, 0x9A0000
	023 Move X0, [X0+3488]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3943], W8
	027 Move X0, [X19+328]
	028 Move X1, [X22]
	029 Move X22, 0x9CB000
	030 Move X22, [X22+4048]
	031 Call ArrayHelpers.LengthSafe, X0
	032 Move W9, [X19+136]
	033 Add W8, W9, W0
	034 Move [X31+12], W8
	035 Compare W9, 0
	036 JumpIfNotEqual {38}
	037 Move [X19+140], W8
	038 Move X5, [X22]
	039 Add X0, X19, 320
	040 Add X1, X31, 12
	041 Move W4, 10
	042 Move X2, X21
	043 Move X3, X20
	044 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	045 Move W8, [X19+136]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X30, [X31+16]
	049 Move X23, [X31+24]
	050 Add W8, W8, 1
	051 Move [X19+136], W8
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Add X31, X31, 64
	055 Return 

Method: System.Void RemoveDeviceUsage(UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x0377C380 LDRB W8, [X20 + 0xF74]
	0x0377C384 LDR X21, [X21 + 0x8]
	0x0377C388 LDR X19, [X19 + 0x10]
	0x0377C38C TBNZ X8, 0x0, 0x377C3B0
	0x0377C390 ADRP X0, 0x9CB000
	0x0377C394 LDR X0, [X0 + 0x8]
	0x0377C398 BL 0x1C16CF4
	0x0377C39C ADRP X0, 0x9CB000
	0x0377C3A0 LDR X0, [X0 + 0x10]
	0x0377C3A4 BL 0x1C16CF4
	0x0377C3A8 MOVZ W8, 0x1
	0x0377C3AC STRB W8, [X20 + 0xF74]
	0x0377C3B0 LDR X8, [X21]
	0x0377C3B4 LDR X4, [X19]
	0x0377C3B8 ADD X0, X31, 0x0
	0x0377C3BC MOV W2, W31
	0x0377C3C0 LDR X8, [X8 + 0xB8]
	0x0377C3C4 LDR X1, [X8 + 0x10]
	0x0377C3C8 LDR W3, [X8 + 0x8]
	0x0377C3CC STP X31, X31, [X31]
	0x0377C3D0 BL 0x24FD82C
	0x0377C3D4 LDP X0, X1, [X31]
	0x0377C3D8 LDP X20, X19, [X31 + 0x20]
	0x0377C3DC LDP X30, X21, [X31 + 0x10]
	0x0377C3E0 ADD X31, X31, 0x30
	0x0377C3E4 RET
	0x0377C3E8 STR X30, [X31 - 0x60]!
	0x0377C3EC STP X28, X27, [X31 + 0x10]
	0x0377C3F0 STP X26, X25, [X31 + 0x20]
	0x0377C3F4 STP X24, X23, [X31 + 0x30]
	0x0377C3F8 STP X22, X21, [X31 + 0x40]
	0x0377C3FC STP X20, X19, [X31 + 0x50]
	0x0377C400 ADRP X26, 0xC64000
	0x0377C404 ADRP X27, 0x9CB000
	0x0377C408 ADRP X28, 0x9C8000
	0x0377C40C ADRP X24, 0x9CB000
	0x0377C410 ADRP X25, 0x9CA000
	0x0377C414 ADRP X22, 0x9CB000
	0x0377C418 ADRP X23, 0x9CB000
	0x0377C41C ADRP X20, 0x9CB000
	0x0377C420 ADRP X21, 0x9CB000
	0x0377C424 LDR X27, [X27 + 0x18]
	0x0377C428 LDR X28, [X28 + 0xE18]
	0x0377C42C LDR X24, [X24 + 0x20]
	0x0377C430 LDRB W8, [X26 + 0xF75]
	0x0377C434 LDR X25, [X25 + 0xF20]
	0x0377C438 LDR X22, [X22 + 0x28]
	0x0377C43C LDR X23, [X23 + 0x30]
	0x0377C440 LDR X20, [X20 + 0x38]
	0x0377C444 LDR X21, [X21 + 0x40]
	0x0377C448 MOV X19, X0
	0x0377C44C TBNZ X8, 0x0, 0x377C4B8
	0x0377C450 ADRP X0, 0x9C8000
	0x0377C454 LDR X0, [X0 + 0xE18]
	0x0377C458 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xC65000
	009 Move X23, 0x9A0000
	010 Move X22, 0x9CB000
	011 Move W8, [X24+3944]
	012 Move X23, [X23+3488]
	013 Move X22, [X22+4056]
	014 Move X20, X2
	015 Move X21, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x9CB000
	022 Move X0, [X0+4064]
	023 Call 0x1C17CF4
	024 Move X0, 0x9CB000
	025 Move X0, [X0+4056]
	026 Call 0x1C17CF4
	027 Move X0, 0x9A0000
	028 Move X0, [X0+3488]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X24+3944], W8
	032 Move X0, [X19+328]
	033 Move X1, [X23]
	034 Call ArrayHelpers.LengthSafe, X0
	035 Move W8, [X19+136]
	036 Move W3, [X19+140]
	037 Move X5, [X22]
	038 Move X1, X21
	039 Move X2, X20
	040 Add W4, W8, W0
	041 Move [X31+12], W4
	042 Move X0, [X19+320]
	043 Call 0x217ADA4, X0, X1, X2, X3
	044 Add W31, W0, 1
	045 Move X8, 0x9CB000
	046 Move X8, [X8+4064]
	047 Move W2, W0
	048 Move X0, [X19+320]
	049 Add X1, X31, 12
	050 Move X3, [X8]
	051 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	052 Move W8, [X19+136]
	053 Subtract W8, W8, 1
	054 Move [X19+136], W8
	055 Move [X19+140], W31
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move X30, [X31+64]
	063 Return 

Method: System.Void ClearDeviceUsages()

Disassembly:
	0x0377C45C ADRP X0, 0x9CA000
	0x0377C460 LDR X0, [X0 + 0xF20]
	0x0377C464 BL 0x1C16CF4
	0x0377C468 ADRP X0, 0x9CB000
	0x0377C46C LDR X0, [X0 + 0x30]
	0x0377C470 BL 0x1C16CF4
	0x0377C474 ADRP X0, 0x9CB000
	0x0377C478 LDR X0, [X0 + 0x40]
	0x0377C47C BL 0x1C16CF4
	0x0377C480 ADRP X0, 0x9CB000
	0x0377C484 LDR X0, [X0 + 0x38]
	0x0377C488 BL 0x1C16CF4
	0x0377C48C ADRP X0, 0x9CB000
	0x0377C490 LDR X0, [X0 + 0x28]
	0x0377C494 BL 0x1C16CF4
	0x0377C498 ADRP X0, 0x9CB000
	0x0377C49C LDR X0, [X0 + 0x18]
	0x0377C4A0 BL 0x1C16CF4
	0x0377C4A4 ADRP X0, 0x9CB000
	0x0377C4A8 LDR X0, [X0 + 0x20]
	0x0377C4AC BL 0x1C16CF4
	0x0377C4B0 MOVZ W8, 0x1
	0x0377C4B4 STRB W8, [X26 + 0xF75]
	0x0377C4B8 LDR X1, [X27]

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+136]
	003 Move W8, [X0+140]
	004 Move X8, W8
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X9, X8
	007 ShiftRight X9, 60
	008 And X9, X9, 0x7FFFFFF
	009 Add X9, X9, 32
	010 Move X10, [X0+320]
	011 Compare X10, 0
	012 JumpIfEqual {25}
	013 Move W11, [X10+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X10, X10, X9
	016 Move [X10], X31
	017 Move [X10+8], X31
	018 NotImplemented "Instruction LDRSW not yet implemented."
	019 Add X8, X8, 1
	020 Add X9, X9, 16
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move [X0+136], W31
	023 Move X30, [X31+16]
	024 Return 
	025 Call 0x1C17F20
	026 Call 0x1C17F28

Method: System.Boolean RequestSync()

Disassembly:
	0x0376FE10 TBNZ X8, 0x0, 0x376FE4C
	0x0376FE14 ADRP X0, 0x9AC000
	0x0376FE18 LDR X0, [X0 + 0xED0]
	0x0376FE1C BL 0x1C16CF4
	0x0376FE20 ADRP X0, 0x9D7000
	0x0376FE24 LDR X0, [X0 + 0x9A8]
	0x0376FE28 BL 0x1C16CF4
	0x0376FE2C ADRP X0, 0x9AC000
	0x0376FE30 LDR X0, [X0 + 0xEC8]
	0x0376FE34 BL 0x1C16CF4
	0x0376FE38 ADRP X0, 0x9AC000
	0x0376FE3C LDR X0, [X0 + 0x270]
	0x0376FE40 BL 0x1C16CF4
	0x0376FE44 MOVZ W8, 0x1
	0x0376FE48 STRB W8, [X21 + 0xEF4]
	0x0376FE4C STP X31, X31, [X31 + 0x20]
	0x0376FE50 STR X31, [X31 + 0x30]
	0x0376FE54 CBZ X20, 0x376FF7C
	0x0376FE58 LDR W0, [X20 + 0xE0]
	0x0376FE5C CBZ W0, 0x376FFB0
	0x0376FE60 ADRP X8, 0x9AC000
	0x0376FE64 LDR X8, [X8 + 0xEC8]
	0x0376FE68 FCMP D8, 0x0
	0x0376FE6C LDR X8, [X8]
	0x0376FE70 LDR X8, [X8 + 0xB8]
	0x0376FE74 B.PL 0x376FEC8
	0x0376FE78 LDR X21, [X8]
	0x0376FE7C CBZ X21, 0x376FF78
	0x0376FE80 ADRP X10, 0x9AC000
	0x0376FE84 LDR X8, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC72000
	005 Move W8, [X20+3945]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9D8000
	012 Move X0, [X0+2320]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3945], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call 0x3780584
	019 Move X0, X31
	020 Call RequestSyncCommand.Create
	021 Move [X31+8], X0
	022 Move X0, [X19+120]
	023 Compare X0, 0
	024 JumpIfEqual {38}
	025 Move X8, 0x9D8000
	026 Move X8, [X8+2320]
	027 Add X1, X31, 8
	028 Move X2, [X8]
	029 Call InputDevice.ExecuteCommand, X0, X1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X8, X0
	033 ShiftRight X8, 63
	034 And X8, X8, 0x7FFFFFFF
	035 Xor W0, W8, 1
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Boolean RequestReset()

Disassembly:
	0x0376FF5C B.NE 0x376FFF8
	0x0376FF60 LDP X20, X19, [X31 + 0x60]
	0x0376FF64 LDP X22, X21, [X31 + 0x50]
	0x0376FF68 LDR X30, [X31 + 0x48]
	0x0376FF6C LDR V8, [X31 + 0x40]
	0x0376FF70 ADD X31, X31, 0x70
	0x0376FF74 RET
	0x0376FF78 BL 0x1C16F20
	0x0376FF7C ADRP X0, 0x989000
	0x0376FF80 LDR X0, [X0 + 0x528]
	0x0376FF84 BL 0x1C16D08
	0x0376FF88 BL 0x1C16F10
	0x0376FF8C MOV X19, X0
	0x0376FF90 ADRP X0, 0x9AC000
	0x0376FF94 LDR X0, [X0 + 0xD20]
	0x0376FF98 BL 0x1C16D08
	0x0376FF9C MOV X1, X0
	0x0376FFA0 MOV X0, X19
	0x0376FFA4 MOV X2, X31
	0x0376FFA8 BL 0x330E100
	0x0376FFAC B 0x376FFE0
	0x0376FFB0 ADRP X0, 0x984000
	0x0376FFB4 LDR X0, [X0 + 0x5B0]
	0x0376FFB8 BL 0x1C16D08
	0x0376FFBC BL 0x1C16F10
	0x0376FFC0 MOV X19, X0
	0x0376FFC4 ADRP X0, 0x9D7000
	0x0376FFC8 LDR X0, [X0 + 0x998]
	0x0376FFCC BL 0x1C16D08
	0x0376FFD0 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC72000
	005 Move W8, [X20+3946]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9D8000
	012 Move X0, [X0+2336]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3946], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call 0x3780584
	019 Move X0, X31
	020 Call RequestResetCommand.Create
	021 Move [X31+8], X0
	022 Move X0, [X19+120]
	023 Compare X0, 0
	024 JumpIfEqual {38}
	025 Move X8, 0x9D8000
	026 Move X8, [X8+2336]
	027 Add X1, X31, 8
	028 Move X2, [X8]
	029 Call InputDevice.ExecuteCommand, X0, X1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X8, X0
	033 ShiftRight X8, 63
	034 And X8, X8, 0x7FFFFFFF
	035 Xor W0, W8, 1
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Boolean ExecuteEnableCommand()

Disassembly:
	0x0377C4BC LDR X2, [X28]
	0x0377C4C0 MOV X0, X19
	0x0377C4C4 BL 0x21FC754
	0x0377C4C8 STR X0, [X19 + 0x170]
	0x0377C4CC LDR X1, [X24]
	0x0377C4D0 LDR X2, [X25]
	0x0377C4D4 MOV X0, X19
	0x0377C4D8 BL 0x21FC754
	0x0377C4DC STR X0, [X19 + 0x178]
	0x0377C4E0 LDR X1, [X22]
	0x0377C4E4 LDR X2, [X23]
	0x0377C4E8 MOV X0, X19
	0x0377C4EC BL 0x21FC9B4
	0x0377C4F0 STR X0, [X19 + 0x180]
	0x0377C4F4 LDR X1, [X20]
	0x0377C4F8 LDR X2, [X21]
	0x0377C4FC MOV X0, X19
	0x0377C500 BL 0x21FC9B4
	0x0377C504 STR X0, [X19 + 0x188]
	0x0377C508 LDP X20, X19, [X31 + 0x50]
	0x0377C50C LDP X22, X21, [X31 + 0x40]
	0x0377C510 LDP X24, X23, [X31 + 0x30]
	0x0377C514 LDP X26, X25, [X31 + 0x20]
	0x0377C518 LDP X28, X27, [X31 + 0x10]
	0x0377C51C LDR X30, [X31], #0x60
	0x0377C520 RET
	0x0377C524 STR X30, [X31 - 0x20]!
	0x0377C528 STP X20, X19, [X31 + 0x10]
	0x0377C52C ADRP X20, 0xC64000
	0x0377C530 LDRB W8, [X20 + 0xF99]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC65000
	005 Move W8, [X20+3947]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9CB000
	012 Move X0, [X0+4072]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3947], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call 0x3780584
	019 Move X0, X31
	020 Call EnableDeviceCommand.Create
	021 Move [X31+8], X0
	022 Move X0, [X19+120]
	023 Compare X0, 0
	024 JumpIfEqual {38}
	025 Move X8, 0x9CB000
	026 Move X8, [X8+4072]
	027 Add X1, X31, 8
	028 Move X2, [X8]
	029 Call InputDevice.ExecuteCommand, X0, X1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X8, X0
	033 ShiftRight X8, 63
	034 And X8, X8, 0x7FFFFFFF
	035 Xor W0, W8, 1
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Boolean ExecuteDisableCommand()

Disassembly:
	0x0377C534 MOV X19, X0
	0x0377C538 CBNZ W8, 0x377C550
	0x0377C53C ADRP X0, 0x9CB000
	0x0377C540 LDR X0, [X0 + 0x8]
	0x0377C544 BL 0x1C16CF4
	0x0377C548 MOVZ W8, 0x1
	0x0377C54C STRB W8, [X20 + 0xF99]
	0x0377C550 ADRP X8, 0x9CB000
	0x0377C554 LDR X8, [X8 + 0x8]
	0x0377C558 LDR X8, [X8]
	0x0377C55C LDR X8, [X8 + 0xB8]
	0x0377C560 STR X19, [X8]
	0x0377C564 LDP X20, X19, [X31 + 0x10]
	0x0377C568 LDR X30, [X31], #0x20
	0x0377C56C RET
	0x0377C570 STR X30, [X31 - 0x30]!
	0x0377C574 STP X22, X21, [X31 + 0x10]
	0x0377C578 STP X20, X19, [X31 + 0x20]
	0x0377C57C ADRP X21, 0xC64000
	0x0377C580 ADRP X22, 0x9CB000
	0x0377C584 ADRP X20, 0x9CB000
	0x0377C588 LDRB W8, [X21 + 0xF76]
	0x0377C58C LDR X22, [X22 + 0x8]
	0x0377C590 LDR X20, [X20 + 0x48]
	0x0377C594 MOV X19, X0
	0x0377C598 TBNZ X8, 0x0, 0x377C5BC
	0x0377C59C ADRP X0, 0x9CB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC65000
	005 Move W8, [X20+3948]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9CB000
	012 Move X0, [X0+4080]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3948], W8
	016 Move X0, X31
	017 Call DisableDeviceCommand.Create
	018 Move [X31+8], X0
	019 Move X0, [X19+120]
	020 Compare X0, 0
	021 JumpIfEqual {35}
	022 Move X8, 0x9CB000
	023 Move X8, [X8+4080]
	024 Add X1, X31, 8
	025 Move X2, [X8]
	026 Call 0x22052A8, X0, X1
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, X0
	030 ShiftRight X8, 63
	031 And X8, X8, 0x7FFFFFFF
	032 Xor W0, W8, 1
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20

Method: System.Void NotifyAdded()

Disassembly:
	0x0377C5A0 LDR X0, [X0 + 0x48]
	0x0377C5A4 BL 0x1C16CF4
	0x0377C5A8 ADRP X0, 0x9CB000
	0x0377C5AC LDR X0, [X0 + 0x8]

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+600]
	003 Move X1, [X8+608]
	004 CallNoReturn X2

Method: System.Void NotifyRemoved()

Disassembly:
	0x0377C5B0 BL 0x1C16CF4
	0x0377C5B4 MOVZ W8, 0x1
	0x0377C5B8 STRB W8, [X21 + 0xF76]
	0x0377C5BC LDR X8, [X22]

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+616]
	003 Move X1, [X8+624]
	004 CallNoReturn X2

Method: TDevice Build(System.String layoutName = null, System.String layoutVariants = null, UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription = null, System.Boolean noPrecompiledLayouts = False)

Disassembly:
	0x02204D94 LDR X2, [X8 + 0x290]
	0x02204D98 BLR X9
	0x02204D9C LDP X20, X19, [X31 + 0x60]
	0x02204DA0 LDP X22, X21, [X31 + 0x50]
	0x02204DA4 LDP X24, X23, [X31 + 0x40]
	0x02204DA8 LDP X26, X25, [X31 + 0x30]
	0x02204DAC LDP X28, X27, [X31 + 0x20]
	0x02204DB0 LDR X30, [X31 + 0x10]
	0x02204DB4 ADD X31, X31, 0x70
	0x02204DB8 RET
	0x02204DBC BL 0x1C16F20
	0x02204DC0 MOVZ W0, 0x8
	0x02204DC4 BL 0x3EB1AF0
	0x02204DC8 LDR X8, [X26]
	0x02204DCC STR X8, [X0]
	0x02204DD0 ADRP X1, 0x1CB0000
	0x02204DD4 ADD X1, X1, 0xE58
	0x02204DD8 MOV X2, X31
	0x02204DDC BL 0x3EB1B00
	0x02204DE0 B 0x2204DE4
	0x02204DE4 MOV X26, X0
	0x02204DE8 BL 0x3EB1AE0
	0x02204DEC MOV X0, X26
	0x02204DF0 BL 0x1D2C690
	0x02204DF4 BL 0x1990590
	0x02204DF8 SUB X31, X31, 0x70
	0x02204DFC STR X30, [X31 + 0x10]
	0x02204E00 STP X28, X27, [X31 + 0x20]
	0x02204E04 STP X26, X25, [X31 + 0x30]
	0x02204E08 STP X24, X23, [X31 + 0x40]
	0x02204E0C STP X22, X21, [X31 + 0x50]
	0x02204E10 STP X20, X19, [X31 + 0x60]
	0x02204E14 ADRP X22, 0x21D5000
	0x02204E18 ADRP X21, 0x1F17000
	0x02204E1C LDRB W8, [X22 + 0x83E]
	0x02204E20 LDR X21, [X21 + 0x270]
	0x02204E24 MOV X19, X1
	0x02204E28 MOV X20, X0
	0x02204E2C TBNZ X8, 0x0, 0x2204E8C
	0x02204E30 ADRP X0, 0x1F17000
	0x02204E34 LDR X0, [X0 + 0xE88]
	0x02204E38 BL 0x1C16CF4
	0x02204E3C ADRP X0, 0x1F17000
	0x02204E40 LDR X0, [X0 + 0xE90]
	0x02204E44 BL 0x1C16CF4
	0x02204E48 ADRP X0, 0x1F17000
	0x02204E4C LDR X0, [X0 + 0xE98]
	0x02204E50 BL 0x1C16CF4
	0x02204E54 ADRP X0, 0x1F17000
	0x02204E58 LDR X0, [X0 + 0xEA0]
	0x02204E5C BL 0x1C16CF4
	0x02204E60 ADRP X0, 0x1F17000
	0x02204E64 LDR X0, [X0 + 0x270]
	0x02204E68 BL 0x1C16CF4
	0x02204E6C ADRP X0, 0x1F17000
	0x02204E70 LDR X0, [X0 + 0xEA8]
	0x02204E74 BL 0x1C16CF4
	0x02204E78 ADRP X0, 0x1F17000
	0x02204E7C LDR X0, [X0 + 0xEB0]
	0x02204E80 BL 0x1C16CF4
	0x02204E84 MOVZ W8, 0x1
	0x02204E88 STRB W8, [X22 + 0x83E]
	0x02204E8C LDR X0, [X21]
	0x02204E90 STP X31, X31, [X31]
	0x02204E94 LDR W8, [X0 + 0xE0]
	0x02204E98 CBNZ W8, 0x2204EA4
	0x02204E9C BL 0x1C16DFC
	0x02204EA0 LDR X0, [X21]
	0x02204EA4 LDR X8, [X0 + 0xB8]
	0x02204EA8 LDR X8, [X8]
	0x02204EAC CBZ X8, 0x2205090
	0x02204EB0 ADRP X9, 0x1F17000
	0x02204EB4 LDR X9, [X9 + 0xE88]
	0x02204EB8 ADRP X26, 0x1F17000
	0x02204EBC ADD X21, X8, 0x1D0
	0x02204EC0 MOV X0, X21
	0x02204EC4 LDR X1, [X9]
	0x02204EC8 LDR X26, [X26 + 0xEA0]
	0x02204ECC BL 0x28F17BC
	0x02204ED0 LDR X1, [X26]
	0x02204ED4 MOV X0, X21
	0x02204ED8 BL 0x28F140C
	0x02204EDC CMP W0, 0x1
	0x02204EE0 B.LT 0x2205044
	0x02204EE4 ADRP X27, 0x1F17000
	0x02204EE8 ADRP X28, 0x1F17000
	0x02204EEC ADRP X23, 0x1EEF000
	0x02204EF0 ADRP X24, 0x1F17000
	0x02204EF4 ADRP X25, 0x1EEF000
	0x02204EF8 LDR X27, [X27 + 0xE98]
	0x02204EFC LDR X28, [X28 + 0xEB0]
	0x02204F00 LDR X23, [X23 + 0x7D0]
	0x02204F04 LDR X24, [X24 + 0xEB8]
	0x02204F08 LDR X25, [X25 + 0xA28]
	0x02204F0C MOV W22, W31
	0x02204F10 LDR X2, [X27]
	0x02204F14 MOV X0, X21
	0x02204F18 MOV W1, W22
	0x02204F1C BL 0x28F1414
	0x02204F20 CBZ X0, 0x2204F5C
	0x02204F24 LDR X9, [X0 + 0x18]
	0x02204F28 LDR X8, [X0 + 0x40]
	0x02204F2C LDR X3, [X0 + 0x28]
	0x02204F30 MOV X0, X8
	0x02204F34 MOV X1, X20
	0x02204F38 MOV X2, X19
	0x02204F3C BLR X9
	0x02204F40 ANDS W31, W0, 0xFF
	0x02204F44 STP X0, X1, [X31]
	0x02204F48 B.EQ 0x220502C
	0x02204F4C LDR X1, [X28]
	0x02204F50 ADD X0, X31, 0x0
	0x02204F54 BL 0x24349A0
	0x02204F58 B 0x2205070
	0x02204F5C BL 0x1C16F20
	0x02204F60 B 0x22050B4
	0x02204F64 B 0x2204F70
	0x02204F68 B 0x2204F70
	0x02204F6C B 0x2204F70
	0x02204F70 MOV X26, X0
	0x02204F74 CMP W1, 0x1
	0x02204F78 B.NE 0x22050C0
	0x02204F7C MOV X0, X26
	0x02204F80 BL 0x3EB1AD0
	0x02204F84 MOV X26, X0
	0x02204F88 MOV X0, X23
	0x02204F8C BL 0x1C16D08
	0x02204F90 LDR X8, [X26]
	0x02204F94 LDR X1, [X8]
	0x02204F98 BL 0x1C17270
	0x02204F9C TBZ X0, 0x0, 0x2205094
	0x02204FA0 LDR X26, [X26]
	0x02204FA4 BL 0x3EB1AE0
	0x02204FA8 CBZ X26, 0x2205090
	0x02204FAC MOV X0, X26
	0x02204FB0 MOV X1, X31
	0x02204FB4 BL 0x33B32AC
	0x02204FB8 CBZ X0, 0x2205090
	0x02204FBC LDR X8, [X0]
	0x02204FC0 LDP X9, X1, [X8 + 0x1A8]
	0x02204FC4 BLR X9
	0x02204FC8 MOV X27, X0
	0x02204FCC MOV X0, X24
	0x02204FD0 BL 0x1C16D08
	0x02204FD4 MOV X1, X0
	0x02204FD8 MOV X0, X27
	0x02204FDC MOV X2, X31
	0x02204FE0 BL 0x321B938
	0x02204FE4 MOV X27, X0
	0x02204FE8 MOV X0, X25
	0x02204FEC BL 0x1C16D08
	0x02204FF0 LDR W8, [X0 + 0xE0]
	0x02204FF4 CBNZ W8, 0x2204FFC
	0x02204FF8 BL 0x1C16DFC
	0x02204FFC MOV X0, X27
	0x02205000 MOV X1, X31
	0x02205004 BL 0x3C0649C
	0x02205008 MOV X0, X26
	0x0220500C MOV X1, X31
	0x02205010 BL 0x3C02C84
	0x02205014 ADRP X26, 0x1F16000
	0x02205018 ADRP X27, 0x1F16000
	0x0220501C ADRP X28, 0x1F16000
	0x02205020 LDR X26, [X26 + 0xEA0]
	0x02205024 LDR X27, [X27 + 0xE98]
	0x02205028 LDR X28, [X28 + 0xEB0]
	0x0220502C LDR X1, [X26]
	0x02205030 MOV X0, X21
	0x02205034 ADD W22, W22, 0x1
	0x02205038 BL 0x28F140C
	0x0220503C CMP W22, W0
	0x02205040 B.LT 0x2204F10
	0x02205044 ADRP X8, 0x1F16000
	0x02205048 LDR X8, [X8 + 0xE90]
	0x0220504C MOV X0, X21
	0x02205050 LDR X1, [X8]
	0x02205054 BL 0x28F17C8
	0x02205058 LDR X8, [X20]
	0x0220505C MOV X0, X20
	0x02205060 MOV X1, X19
	0x02205064 LDR X9, [X8 + 0x288]
	0x02205068 LDR X2, [X8 + 0x290]
	0x0220506C BLR X9
	0x02205070 LDP X20, X19, [X31 + 0x60]
	0x02205074 LDP X22, X21, [X31 + 0x50]
	0x02205078 LDP X24, X23, [X31 + 0x40]
	0x0220507C LDP X26, X25, [X31 + 0x30]
	0x02205080 LDP X28, X27, [X31 + 0x20]
	0x02205084 LDR X30, [X31 + 0x10]
	0x02205088 ADD X31, X31, 0x70
	0x0220508C RET
	0x02205090 BL 0x1C16F20
	0x02205094 MOVZ W0, 0x8
	0x02205098 BL 0x3EB1AF0
	0x0220509C LDR X8, [X26]
	0x022050A0 STR X8, [X0]
	0x022050A4 ADRP X1, 0x1CAF000
	0x022050A8 ADD X1, X1, 0xE58
	0x022050AC MOV X2, X31
	0x022050B0 BL 0x3EB1B00
	0x022050B4 B 0x22050B8
	0x022050B8 MOV X26, X0
	0x022050BC BL 0x3EB1AE0
	0x022050C0 MOV X0, X26
	0x022050C4 BL 0x1D2C690
	0x022050C8 BL 0x1990590
	0x022050CC SUB X31, X31, 0x70
	0x022050D0 STR X30, [X31 + 0x10]
	0x022050D4 STP X28, X27, [X31 + 0x20]
	0x022050D8 STP X26, X25, [X31 + 0x30]
	0x022050DC STP X24, X23, [X31 + 0x40]
	0x022050E0 STP X22, X21, [X31 + 0x50]
	0x022050E4 STP X20, X19, [X31 + 0x60]
	0x022050E8 ADRP X22, 0x21D4000
	0x022050EC ADRP X21, 0x1F16000
	0x022050F0 LDRB W8, [X22 + 0x83F]
	0x022050F4 LDR X21, [X21 + 0x270]
	0x022050F8 MOV X19, X1
	0x022050FC MOV X20, X0
	0x02205100 TBNZ X8, 0x0, 0x2205160
	0x02205104 ADRP X0, 0x1F16000
	0x02205108 LDR X0, [X0 + 0xE88]
	0x0220510C BL 0x1C16CF4
	0x02205110 ADRP X0, 0x1F16000
	0x02205114 LDR X0, [X0 + 0xE90]
	0x02205118 BL 0x1C16CF4
	0x0220511C ADRP X0, 0x1F16000
	0x02205120 LDR X0, [X0 + 0xE98]
	0x02205124 BL 0x1C16CF4
	0x02205128 ADRP X0, 0x1F16000
	0x0220512C LDR X0, [X0 + 0xEA0]
	0x02205130 BL 0x1C16CF4
	0x02205134 ADRP X0, 0x1F16000
	0x02205138 LDR X0, [X0 + 0x270]
	0x0220513C BL 0x1C16CF4
	0x02205140 ADRP X0, 0x1F16000
	0x02205144 LDR X0, [X0 + 0xEA8]
	0x02205148 BL 0x1C16CF4
	0x0220514C ADRP X0, 0x1F16000
	0x02205150 LDR X0, [X0 + 0xEB0]
	0x02205154 BL 0x1C16CF4
	0x02205158 MOVZ W8, 0x1
	0x0220515C STRB W8, [X22 + 0x83F]
	0x02205160 LDR X0, [X21]
	0x02205164 STP X31, X31, [X31]
	0x02205168 LDR W8, [X0 + 0xE0]
	0x0220516C CBNZ W8, 0x2205178
	0x02205170 BL 0x1C16DFC
	0x02205174 LDR X0, [X21]
	0x02205178 LDR X8, [X0 + 0xB8]
	0x0220517C LDR X8, [X8]
	0x02205180 CBZ X8, 0x2205364
	0x02205184 ADRP X9, 0x1F16000
	0x02205188 LDR X9, [X9 + 0xE88]
	0x0220518C ADRP X26, 0x1F16000
	0x02205190 ADD X21, X8, 0x1D0
	0x02205194 MOV X0, X21
	0x02205198 LDR X1, [X9]
	0x0220519C LDR X26, [X26 + 0xEA0]
	0x022051A0 BL 0x28F17BC
	0x022051A4 LDR X1, [X26]
	0x022051A8 MOV X0, X21
	0x022051AC BL 0x28F140C
	0x022051B0 CMP W0, 0x1
	0x022051B4 B.LT 0x2205318
	0x022051B8 ADRP X27, 0x1F16000
	0x022051BC ADRP X28, 0x1F16000
	0x022051C0 ADRP X23, 0x1EEE000
	0x022051C4 ADRP X24, 0x1F16000
	0x022051C8 ADRP X25, 0x1EEE000
	0x022051CC LDR X27, [X27 + 0xE98]
	0x022051D0 LDR X28, [X28 + 0xEB0]
	0x022051D4 LDR X23, [X23 + 0x7D0]
	0x022051D8 LDR X24, [X24 + 0xEB8]
	0x022051DC LDR X25, [X25 + 0xA28]
	0x022051E0 MOV W22, W31
	0x022051E4 LDR X2, [X27]
	0x022051E8 MOV X0, X21
	0x022051EC MOV W1, W22
	0x022051F0 BL 0x28F1414
	0x022051F4 CBZ X0, 0x2205230
	0x022051F8 LDR X9, [X0 + 0x18]
	0x022051FC LDR X8, [X0 + 0x40]
	0x02205200 LDR X3, [X0 + 0x28]
	0x02205204 MOV X0, X8
	0x02205208 MOV X1, X20
	0x0220520C MOV X2, X19
	0x02205210 BLR X9
	0x02205214 ANDS W31, W0, 0xFF
	0x02205218 STP X0, X1, [X31]
	0x0220521C B.EQ 0x2205300
	0x02205220 LDR X1, [X28]
	0x02205224 ADD X0, X31, 0x0
	0x02205228 BL 0x24349A0
	0x0220522C B 0x2205344
	0x02205230 BL 0x1C16F20
	0x02205234 B 0x2205388
	0x02205238 B 0x2205244
	0x0220523C B 0x2205244
	0x02205240 B 0x2205244
	0x02205244 MOV X26, X0
	0x02205248 CMP W1, 0x1
	0x0220524C B.NE 0x2205394
	0x02205250 MOV X0, X26
	0x02205254 BL 0x3EB1AD0
	0x02205258 MOV X26, X0
	0x0220525C MOV X0, X23
	0x02205260 BL 0x1C16D08
	0x02205264 LDR X8, [X26]
	0x02205268 LDR X1, [X8]
	0x0220526C BL 0x1C17270
	0x02205270 TBZ X0, 0x0, 0x2205368
	0x02205274 LDR X26, [X26]
	0x02205278 BL 0x3EB1AE0
	0x0220527C CBZ X26, 0x2205364
	0x02205280 MOV X0, X26
	0x02205284 MOV X1, X31
	0x02205288 BL 0x33B32AC
	0x0220528C CBZ X0, 0x2205364
	0x02205290 LDR X8, [X0]
	0x02205294 LDP X9, X1, [X8 + 0x1A8]
	0x02205298 BLR X9
	0x0220529C MOV X27, X0
	0x022052A0 MOV X0, X24
	0x022052A4 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+112], X30
	003 Move [X31+120], X25
	004 Move [X31+128], X24
	005 Move [X31+136], X23
	006 Move [X31+144], X22
	007 Move [X31+152], X21
	008 Move [X31+160], X20
	009 Move [X31+168], X19
	010 Move X8, [X4+56]
	011 Move X19, X4
	012 Move W22, W3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X23, X0
	016 Compare X8, 0
	017 JumpIfNotEqual {32}
	018 Move X0, 0x1F18000
	019 Move X0, [X0+3680]
	020 Call 0x1C17CF4
	021 Move X0, 0x1F18000
	022 Move X0, [X0+3520]
	023 Call 0x1C17CF4
	024 Move X0, 0x1EF0000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move X8, [X19+56]
	028 Compare X8, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X19
	031 Call 0x1C5D6E0
	032 Add X0, X31, 96
	033 Move X1, X23
	034 Move X2, X31
	035 Move [X31+96], X31
	036 Move [X31+104], X31
	037 Move [X31+80], X31
	038 Move [X31+88], X31
	039 Move [X31+72], W31
	040 Call InternedString..ctor, X0, X1
	041 Add X0, X31, 96
	042 Move X1, X31
	043 Call InternedString.IsEmpty, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {102}
	048 Move X25, 0x1F18000
	049 Move X25, [X25+3520]
	050 Move X0, [X25]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X24, 0x1EF0000
	056 Move X24, [X24+1728]
	057 Move X8, [X19+56]
	058 Move X0, [X24]
	059 Move X23, [X8]
	060 Move W9, [X0+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X23
	065 Move X1, X31
	066 Call Type.GetTypeFromHandle, X0
	067 Move X8, [X25]
	068 Move X1, X0
	069 Move X2, X31
	070 Move X8, [X8+184]
	071 Add X0, X8, 16
	072 Call Collection.TryFindLayoutForType, X0, X1
	073 Move [X31+96], X0
	074 Move [X31+104], X1
	075 Add X0, X31, 96
	076 Move X1, X31
	077 Call InternedString.IsEmpty, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {102}
	082 Move X0, [X24]
	083 Move X8, [X19+56]
	084 Move W9, [X0+224]
	085 Move X23, [X8]
	086 Compare W9, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X23
	090 Move X1, X31
	091 Call Type.GetTypeFromHandle, X0
	092 Compare X0, 0
	093 JumpIfEqual {258}
	094 Move X8, [X0]
	095 Move X9, [X8+424]
	096 Move X1, [X8+432]
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move X1, X0
	099 Add X0, X31, 96
	100 Move X2, X31
	101 Call InternedString..ctor, X0, X1
	102 Move TEMP, X22
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfEqual {165}
	106 Move X0, X21
	107 Move X1, X31
	108 Call String.IsNullOrEmpty, X0
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {165}
	113 Move X22, 0x1F18000
	114 Move X22, [X22+3520]
	115 Move X0, [X22]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {121}
	119 Call 0x1C17DFC
	120 Move X0, [X22]
	121 Move X8, [X0+184]
	122 Move X0, [X8+64]
	123 Compare X0, 0
	124 JumpIfEqual {258}
	125 Move X8, 0x1F18000
	126 Move X1, [X31+96]
	127 Move X2, [X31+104]
	128 Move X8, [X8+3680]
	129 Add X3, X31, 80
	130 Move X4, [X8]
	131 Call Dictionary`2<InternedString, PrecompiledLayout>.TryGetValue, X0, X1, X2
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {165}
	136 Move X8, [X31+80]
	137 Compare X8, 0
	138 JumpIfEqual {258}
	139 Move X9, [X8+24]
	140 Move X0, [X8+64]
	141 Move X1, [X8+40]
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move X8, [X19+56]
	144 Move X20, X0
	145 Move X19, [X8+8]
	146 Move W8, [X19+309]
	147 Move TEMP, X8
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfEqual {154}
	151 Move X0, X19
	152 Call 0x1C5D684
	153 Move X19, X0
	154 Compare X20, 0
	155 JumpIfEqual {245}
	156 Move X0, X20
	157 Move X1, X19
	158 Call 0x1C17E00
	159 Move X23, X0
	160 Compare X0, 0
	161 JumpIfNotEqual {234}
	162 Move X0, X20
	163 Move X1, X19
	164 Call 0x1C181E0
	165 Move X0, X31
	166 Call InputDeviceBuilder.Ref
	167 Move [X31+72], W0
	168 Move X0, X31
	169 Call InputDeviceBuilder.get_instance
	170 Move X23, [X31+96]
	171 Move X24, [X31+104]
	172 Move X22, X0
	173 Move [X31+56], X31
	174 Move [X31+64], X31
	175 Add X0, X31, 56
	176 Move X1, X21
	177 Move X2, X31
	178 Call InternedString..ctor, X0, X1
	179 Move V0, [X20]
	180 Move V1, [X20+16]
	181 Move X8, [X20+48]
	182 Move V2, [X20+2]
	183 Move X3, [X31+56]
	184 Move X4, [X31+64]
	185 Move [X31], V0
	186 Move [X31+48], X8
	187 Move [X31+16], V1
	188 Move [X31+24], V2
	189 Add X5, X31, 0
	190 Move X0, X22
	191 Move X1, X23
	192 Move X2, X24
	193 Move X6, X31
	194 Call InputDeviceBuilder.Setup, X0, X1, X2, X3
	195 Move X0, X31
	196 Call InputDeviceBuilder.get_instance
	197 Move X1, X31
	198 Call InputDeviceBuilder.Finish, X0
	199 Move X8, [X19+56]
	200 Move X20, X0
	201 Move X1, [X8+8]
	202 Move W8, [X1+309]
	203 Move TEMP, X8
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfEqual {210}
	207 Move X0, X1
	208 Call 0x1C5D684
	209 Move X1, X0
	210 Move X0, X20
	211 Call 0x1C17E00
	212 Move X8, [X19+56]
	213 Move X21, X0
	214 Move X22, [X8+8]
	215 Move W8, [X22+309]
	216 Move TEMP, X8
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfEqual {223}
	220 Move X0, X22
	221 Call 0x1C5D684
	222 Move X22, X0
	223 Compare X21, 0
	224 JumpIfEqual {246}
	225 Move X0, X21
	226 Move X1, X22
	227 Call 0x1C17E00
	228 Move X23, X0
	229 Compare X0, 0
	230 JumpIfEqual {255}
	231 Add X0, X31, 72
	232 Move X1, X31
	233 Call RefInstance.Dispose, X0
	234 Move X0, X23
	235 Move X20, [X31+160]
	236 Move X19, [X31+168]
	237 Move X22, [X31+144]
	238 Move X21, [X31+152]
	239 Move X24, [X31+128]
	240 Move X23, [X31+136]
	241 Move X30, [X31+112]
	242 Move X25, [X31+120]
	243 Add X31, X31, 176
	244 Return X0
	245 Move X23, X31
	246 Move X0, 0x1EEF000
	247 Move X0, [X0+2760]
	248 Call 0x1C17D08
	249 Move W1, 5
	250 Call 0x1C17D6C
	251 Move X21, X0
	252 Compare X0, 0
	253 JumpIfNotEqual {259}
	254 Call 0x1C17F20
	255 Move X0, X21
	256 Move X1, X22
	257 Call 0x1C181E0
	258 Call 0x1C17F20
	259 Move X0, 0x1F17000
	260 Move X0, [X0+3688]
	261 Call 0x1C17D08
	262 Move W8, [X21+24]
	263 Compare W8, 0
	264 JumpIfNotEqual {266}
	265 Call 0x1C17F28
	266 Move [X21+32], X0
	267 Move X8, [X19+56]
	268 Move X22, [X8]
	269 Move X0, 0x1EEF000
	270 Move X0, [X0+1728]
	271 Call 0x1C17D08
	272 Move W8, [X0+224]
	273 Compare W8, 0
	274 JumpIfNotEqual {276}
	275 Call 0x1C17DFC
	276 Move X0, X22
	277 Move X1, X31
	278 Call Type.GetTypeFromHandle, X0
	279 Compare X0, 0
	280 JumpIfNotEqual {282}
	281 Call 0x1C17F20
	282 Move X8, [X0]
	283 Move X9, [X8+424]
	284 Move X1, [X8+432]
	285 NotImplemented "Instruction BLR not yet implemented."
	286 Move W8, [X21+24]
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Move [X21+40], X0
	289 Move X0, 0x1F17000
	290 Move X0, [X0+3696]
	291 Call 0x1C17D08
	292 Move W8, [X21+24]
	293 NotImplemented "Instruction CMP not yet implemented."
	294 Move [X21+48], X0
	295 Compare X20, 0
	296 JumpIfNotEqual {300}
	297 Call 0x1C17F20
	298 Call 0x1C17F28
	299 Call 0x1C17F28
	300 Move X0, X20
	301 Move X1, X31
	302 Call "il2cpp_vm_object_is_inst", X0
	303 Compare X0, 0
	304 JumpIfNotEqual {306}
	305 Call 0x1C17F20
	306 Move X8, [X0]
	307 Move X9, [X8+424]
	308 Move X1, [X8+432]
	309 NotImplemented "Instruction BLR not yet implemented."
	310 Move W8, [X21+24]
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Move [X21+56], X0
	313 Move X0, 0x1F17000
	314 Move X0, [X0+3704]
	315 Call 0x1C17D08
	316 Move W8, [X21+24]
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Move [X21+64], X0
	319 Move X0, X21
	320 Move X1, X31
	321 Call String.Concat, X0
	322 Move X20, X0
	323 Move X0, 0x1EF7000
	324 Move X0, [X0+1400]
	325 Call 0x1C17D08
	326 Call 0x1C17F10
	327 Move X21, X0
	328 Move X0, 0x1F17000
	329 Move X0, [X0+3712]
	330 Call 0x1C17D08
	331 Move X2, X0
	332 Move X0, X21
	333 Move X1, X20
	334 Move X3, X31
	335 Call ArgumentException..ctor, X0, X1, X2
	336 Move X0, X21
	337 Move X1, X19
	338 Call 0x1C17DEC
	339 Call 0x1C17F28
	340 Call 0x1C17F28
	341 Move X19, X0
	342 NotImplemented "Instruction CMP not yet implemented."
	343 Move X0, X19
	344 Call 0x3EB2AD0
	345 Move X20, [X0]
	346 Call 0x3EB2AE0
	347 Add X0, X31, 72
	348 Move X1, X31
	349 Call RefInstance.Dispose, X0
	350 Move X23, X31
	351 Compare X20, 0
	352 JumpIfEqual {234}
	353 Move X0, X20
	354 Call 0x1C17F18
	355 Move X20, X31
	356 Move X19, X0
	357 Add X0, X31, 72
	358 Move X1, X31
	359 Call RefInstance.Dispose, X0
	360 Compare X20, 0
	361 JumpIfNotEqual {364}
	362 Move X0, X19
	363 Call 0x1D2D690
	364 Move X0, X20
	365 Call 0x1C17F18
	366 Call 0x1991590

Method: System.Void WriteChangedControlStates(System.Byte* deviceStateBuffer, System.Void* statePtr, System.UInt32 stateSizeInBytes, System.UInt32 stateOffsetInDevice)

Disassembly:
	0x0377C5C0 LDR X4, [X20]
	0x0377C5C4 MOV X2, X19
	0x0377C5C8 LDP X20, X19, [X31 + 0x20]
	0x0377C5CC LDR X8, [X8 + 0xB8]
	0x0377C5D0 LDP X22, X21, [X31 + 0x10]
	0x0377C5D4 MOVZ W3, 0xA
	0x0377C5D8 ADD X0, X8, 0x10
	0x0377C5DC ADD X1, X8, 0x8
	0x0377C5E0 LDR X30, [X31], #0x30
	0x0377C5E4 B 0x2174728
	0x0377C5E8 STR X30, [X31 - 0x30]!
	0x0377C5EC STP X22, X21, [X31 + 0x10]
	0x0377C5F0 STP X20, X19, [X31 + 0x20]
	0x0377C5F4 ADRP X20, 0xC64000
	0x0377C5F8 LDRB W8, [X20 + 0xF77]
	0x0377C5FC MOV X19, X0
	0x0377C600 TBNZ X8, 0x0, 0x377C630
	0x0377C604 ADRP X0, 0x9CB000
	0x0377C608 LDR X0, [X0 + 0x50]
	0x0377C60C BL 0x1C16CF4
	0x0377C610 ADRP X0, 0x9CB000
	0x0377C614 LDR X0, [X0 + 0x58]
	0x0377C618 BL 0x1C16CF4
	0x0377C61C ADRP X0, 0x9CB000
	0x0377C620 LDR X0, [X0 + 0x8]
	0x0377C624 BL 0x1C16CF4
	0x0377C628 MOVZ W8, 0x1
	0x0377C62C STRB W8, [X20 + 0xF77]
	0x0377C630 ADRP X21, 0xC64000
	0x0377C634 ADRP X20, 0x9CB000
	0x0377C638 LDRB W8, [X21 + 0xF9A]
	0x0377C63C LDR X20, [X20 + 0x8]
	0x0377C640 CBNZ W8, 0x377C658
	0x0377C644 ADRP X0, 0x9CB000
	0x0377C648 LDR X0, [X0 + 0x8]
	0x0377C64C BL 0x1C16CF4
	0x0377C650 MOVZ W8, 0x1
	0x0377C654 STRB W8, [X21 + 0xF9A]
	0x0377C658 LDR X8, [X20]
	0x0377C65C ADRP X21, 0x9CB000
	0x0377C660 LDR X8, [X8 + 0xB8]
	0x0377C664 LDR X9, [X8]
	0x0377C668 LDR X21, [X21 + 0x58]
	0x0377C66C CMP X9, X19
	0x0377C670 B.NE 0x377C6A4
	0x0377C674 ADRP X22, 0xC64000
	0x0377C678 LDRB W9, [X22 + 0xF99]
	0x0377C67C CBNZ W9, 0x377C698
	0x0377C680 MOV X0, X20
	0x0377C684 BL 0x1C16CF4
	0x0377C688 LDR X8, [X20]
	0x0377C68C MOVZ W9, 0x1
	0x0377C690 STRB W9, [X22 + 0xF99]
	0x0377C694 LDR X8, [X8 + 0xB8]
	0x0377C698 STR X31, [X8]
	0x0377C69C LDR X8, [X20]
	0x0377C6A0 LDR X8, [X8 + 0xB8]
	0x0377C6A4 LDR X0, [X8 + 0x10]
	0x0377C6A8 LDR W2, [X8 + 0x8]
	0x0377C6AC LDR X3, [X21]
	0x0377C6B0 MOV X1, X19
	0x0377C6B4 BL 0x2179B8C
	0x0377C6B8 ADDS W31, W0, 0x1
	0x0377C6BC B.EQ 0x377C6F0
	0x0377C6C0 LDR X8, [X20]
	0x0377C6C4 ADRP X9, 0x9CB000
	0x0377C6C8 MOV W2, W0
	0x0377C6CC LDR X8, [X8 + 0xB8]
	0x0377C6D0 LDR X9, [X9 + 0x50]
	0x0377C6D4 LDP X20, X19, [X31 + 0x20]
	0x0377C6D8 LDP X22, X21, [X31 + 0x10]
	0x0377C6DC LDR X0, [X8 + 0x10]
	0x0377C6E0 LDR X3, [X9]
	0x0377C6E4 ADD X1, X8, 0x8
	0x0377C6E8 LDR X30, [X31], #0x30
	0x0377C6EC B 0x2177EC0
	0x0377C6F0 LDP X20, X19, [X31 + 0x20]
	0x0377C6F4 LDP X22, X21, [X31 + 0x10]
	0x0377C6F8 LDR X30, [X31], #0x30
	0x0377C6FC RET
	0x0377C700 STP X30, X19, [X31 - 0x10]!
	0x0377C704 MOV X19, X0
	0x0377C708 BL 0x377295C
	0x0377C70C MOVN W8, 0x0
	0x0377C710 STR X31, [X19 + 0xE0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xC65000
	009 Move W8, [X24+3949]
	010 Move W22, W4
	011 Move W23, W3
	012 Move X20, X2
	013 Move X19, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x9A0000
	020 Move X0, [X0+3352]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X24+3949], W8
	024 Move X9, [X21+352]
	025 Compare X9, 0
	026 JumpIfEqual {110}
	027 Move X8, [X9+24]
	028 Compare X8, 0
	029 JumpIfEqual {102}
	030 Move X8, 0x9A0000
	031 Move X8, [X8+3352]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfEqual {42}
	036 Move W2, [X21+28]
	037 Move W8, W23
	038 ShiftRight W8, 29
	039 And W8, W8, 0xFFFFFFF
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSET not yet implemented."
	042 Call 0x1C17DFC
	043 Move W2, [X21+28]
	044 Move X9, [X21+352]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Compare X9, 0
	048 JumpIfEqual {110}
	049 Move W8, W23
	050 ShiftRight W8, 29
	051 And W8, W8, 0xFFFFFFF
	052 Move W11, [X9+24]
	053 Compare W11, 0
	054 JumpIfEqual {111}
	055 NotImplemented "Instruction LDRH not yet implemented."
	056 Move TEMP, X10
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {80}
	060 Move W8, 0xFFFF
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W8, [X9+38]
	063 NotImplemented "Instruction LDRH not yet implemented."
	064 Move W4, [X9+32]
	065 Move X0, X21
	066 Move X1, X20
	067 Move X3, X19
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 NotImplemented "Instruction BFM not yet implemented."
	075 NotImplemented "Instruction BFM not yet implemented."
	076 Move W5, W31
	077 Move X30, [X31+64]
	078 Call InputDevice.WriteChangedControlStatesInternal, X0, X1, X2, X3, X4, X5
	079 Return 
	080 Move W10, 0xFFFF
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move W10, [X9+38]
	083 NotImplemented "Instruction LDRH not yet implemented."
	084 Move W5, [X9+32]
	085 Move W3, W22
	086 ShiftRight W3, 29
	087 And W3, W3, 0xFFFFFFF
	088 Move X0, X21
	089 Move X1, X20
	090 Move X4, X19
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X22, [X31+32]
	094 Move X21, [X31+40]
	095 Move X24, [X31+16]
	096 Move X23, [X31+24]
	097 NotImplemented "Instruction BFM not yet implemented."
	098 NotImplemented "Instruction BFM not yet implemented."
	099 Move W2, W8
	100 Move W6, W31
	101 Move X30, [X31+64]
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Move X22, [X31+32]
	105 Move X21, [X31+40]
	106 Move X24, [X31+16]
	107 Move X23, [X31+24]
	108 Move X30, [X31+64]
	109 Return 
	110 Call 0x1C17F20
	111 Call 0x1C17F28

Method: System.Void WritePartialChangedControlStatesInternal(System.Void* statePtr, System.UInt32 stateSizeInBits, System.UInt32 stateOffsetInDeviceInBits, System.Byte* deviceStatePtr, UnityEngine.InputSystem.InputDevice/ControlBitRangeNode parentNode, System.UInt32 startOffset)

Disassembly:
	0x0377C714 STR W8, [X19 + 0xE8]
	0x0377C718 LDP X30, X19, [X31], #0x10
	0x0377C71C RET
	0x0377C720 SUB X31, X31, 0x40
	0x0377C724 STP X30, X21, [X31 + 0x20]
	0x0377C728 STP X20, X19, [X31 + 0x30]
	0x0377C72C ADRP X21, 0xC64000
	0x0377C730 LDRB W8, [X21 + 0xF78]
	0x0377C734 MOV X19, X1
	0x0377C738 MOV X20, X0
	0x0377C73C TBNZ X8, 0x0, 0x377C760
	0x0377C740 ADRP X0, 0x9CB000
	0x0377C744 LDR X0, [X0 + 0x60]
	0x0377C748 BL 0x1C16CF4
	0x0377C74C ADRP X0, 0x9CB000
	0x0377C750 LDR X0, [X0 + 0x68]
	0x0377C754 BL 0x1C16CF4
	0x0377C758 MOVZ W8, 0x1
	0x0377C75C STRB W8, [X21 + 0xF78]
	0x0377C760 CBZ X19, 0x377C7BC
	0x0377C764 ADRP X8, 0x9CB000
	0x0377C768 LDR X8, [X8 + 0x68]
	0x0377C76C ADD X20, X20, 0x198
	0x0377C770 LDR X9, [X20 + 0x10]
	0x0377C774 LDR V0, [X20]
	0x0377C778 LDR X2, [X8]
	0x0377C77C ADD X0, X31, 0x0
	0x0377C780 MOV X1, X19
	0x0377C784 STR X9, [X31 + 0x10]
	0x0377C788 STR V0, [X31]
	0x0377C78C BL 0x21FACBC
	0x0377C790 TBNZ X0, 0x0, 0x377C7AC
	0x0377C794 ADRP X8, 0x9CB000
	0x0377C798 LDR X8, [X8 + 0x60]
	0x0377C79C MOV X0, X20
	0x0377C7A0 MOV X1, X19
	0x0377C7A4 LDR X2, [X8]
	0x0377C7A8 BL 0x2DEA7E8
	0x0377C7AC LDP X20, X19, [X31 + 0x30]
	0x0377C7B0 LDP X30, X21, [X31 + 0x20]
	0x0377C7B4 ADD X31, X31, 0x40
	0x0377C7B8 RET
	0x0377C7BC ADRP X0, 0x97C000
	0x0377C7C0 LDR X0, [X0 + 0x528]
	0x0377C7C4 BL 0x1C16D08
	0x0377C7C8 BL 0x1C16F10
	0x0377C7CC MOV X19, X0
	0x0377C7D0 ADRP X0, 0x981000
	0x0377C7D4 LDR X0, [X0 + 0xEC8]
	0x0377C7D8 BL 0x1C16D08
	0x0377C7DC MOV X1, X0
	0x0377C7E0 MOV X0, X19
	0x0377C7E4 MOV X2, X31
	0x0377C7E8 BL 0x330E100
	0x0377C7EC ADRP X0, 0x9CB000
	0x0377C7F0 LDR X0, [X0 + 0x70]
	0x0377C7F4 BL 0x1C16D08
	0x0377C7F8 MOV X1, X0
	0x0377C7FC MOV X0, X19
	0x0377C800 BL 0x1C16DEC
	0x0377C804 STR X30, [X31 - 0x30]!
	0x0377C808 STP X22, X21, [X31 + 0x10]
	0x0377C80C STP X20, X19, [X31 + 0x20]
	0x0377C810 ADRP X22, 0xC64000
	0x0377C814 ADRP X21, 0x9CB000
	0x0377C818 LDRB W8, [X22 + 0xF79]
	0x0377C81C LDR X21, [X21 + 0x78]
	0x0377C820 MOV X19, X1
	0x0377C824 MOV X20, X0
	0x0377C828 TBNZ X8, 0x0, 0x377C840
	0x0377C82C ADRP X0, 0x9CB000
	0x0377C830 LDR X0, [X0 + 0x78]
	0x0377C834 BL 0x1C16CF4
	0x0377C838 MOVZ W8, 0x1
	0x0377C83C STRB W8, [X22 + 0xF79]
	0x0377C840 LDR X2, [X21]
	0x0377C844 ADD X0, X20, 0x198
	0x0377C848 MOV X1, X19
	0x0377C84C LDP X20, X19, [X31 + 0x20]
	0x0377C850 LDP X22, X21, [X31 + 0x10]
	0x0377C854 LDR X30, [X31], #0x30
	0x0377C858 B 0x2DEAD38
	0x0377C85C SUB X31, X31, 0x40
	0x0377C860 STP X30, X21, [X31 + 0x20]
	0x0377C864 STP X20, X19, [X31 + 0x30]
	0x0377C868 ADRP X21, 0xC64000
	0x0377C86C LDRB W8, [X21 + 0xF7A]
	0x0377C870 MOV X19, X1
	0x0377C874 MOV X20, X0
	0x0377C878 TBNZ X8, 0x0, 0x377C89C
	0x0377C87C ADRP X0, 0x9CB000
	0x0377C880 LDR X0, [X0 + 0x80]
	0x0377C884 BL 0x1C16CF4
	0x0377C888 ADRP X0, 0x9CB000
	0x0377C88C LDR X0, [X0 + 0x88]
	0x0377C890 BL 0x1C16CF4
	0x0377C894 MOVZ W8, 0x1
	0x0377C898 STRB W8, [X21 + 0xF7A]
	0x0377C89C CBZ X19, 0x377C8F4
	0x0377C8A0 ADRP X8, 0x9CB000
	0x0377C8A4 LDR X8, [X8 + 0x88]
	0x0377C8A8 LDR X9, [X20 + 0x1D0]
	0x0377C8AC LDR V0, [X20 + 0x1C]
	0x0377C8B0 ADD X0, X31, 0x0
	0x0377C8B4 LDR X2, [X8]
	0x0377C8B8 MOV X1, X19
	0x0377C8BC STR X9, [X31 + 0x10]
	0x0377C8C0 STR V0, [X31]
	0x0377C8C4 BL 0x21FACBC
	0x0377C8C8 TBNZ X0, 0x0, 0x377C8E4
	0x0377C8CC ADRP X8, 0x9CB000
	0x0377C8D0 LDR X8, [X8 + 0x80]
	0x0377C8D4 ADD X0, X20, 0x1C0
	0x0377C8D8 MOV X1, X19
	0x0377C8DC LDR X2, [X8]
	0x0377C8E0 BL 0x2DEA7E8
	0x0377C8E4 LDP X20, X19, [X31 + 0x30]
	0x0377C8E8 LDP X30, X21, [X31 + 0x20]
	0x0377C8EC ADD X31, X31, 0x40
	0x0377C8F0 RET
	0x0377C8F4 ADRP X0, 0x97C000
	0x0377C8F8 LDR X0, [X0 + 0x528]
	0x0377C8FC BL 0x1C16D08
	0x0377C900 BL 0x1C16F10
	0x0377C904 MOV X19, X0
	0x0377C908 ADRP X0, 0x981000
	0x0377C90C LDR X0, [X0 + 0xEC8]
	0x0377C910 BL 0x1C16D08
	0x0377C914 MOV X1, X0
	0x0377C918 MOV X0, X19
	0x0377C91C MOV X2, X31
	0x0377C920 BL 0x330E100
	0x0377C924 ADRP X0, 0x9CB000
	0x0377C928 LDR X0, [X0 + 0x90]
	0x0377C92C BL 0x1C16D08
	0x0377C930 MOV X1, X0
	0x0377C934 MOV X0, X19
	0x0377C938 BL 0x1C16DEC
	0x0377C93C STR X30, [X31 - 0x30]!
	0x0377C940 STP X22, X21, [X31 + 0x10]
	0x0377C944 STP X20, X19, [X31 + 0x20]
	0x0377C948 ADRP X22, 0xC64000
	0x0377C94C ADRP X21, 0x9CB000
	0x0377C950 LDRB W8, [X22 + 0xF7B]
	0x0377C954 LDR X21, [X21 + 0x98]
	0x0377C958 MOV X19, X1
	0x0377C95C MOV X20, X0
	0x0377C960 TBNZ X8, 0x0, 0x377C978
	0x0377C964 ADRP X0, 0x9CB000
	0x0377C968 LDR X0, [X0 + 0x98]
	0x0377C96C BL 0x1C16CF4
	0x0377C970 MOVZ W8, 0x1
	0x0377C974 STRB W8, [X22 + 0xF7B]
	0x0377C978 LDR X2, [X21]
	0x0377C97C ADD X0, X20, 0x1C0
	0x0377C980 MOV X1, X19
	0x0377C984 LDP X20, X19, [X31 + 0x20]
	0x0377C988 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move [X31+24], X4
	015 Move [X31+8], X1
	016 Move [X31+20], W2
	017 Move X25, 0x978000
	018 Move X25, [X25+1448]
	019 Move W28, W6
	020 Move X26, X5
	021 Move W20, W3
	022 Move X23, X0
	023 Add W24, W3, W2
	024 Move X22, 0xC65000
	025 Move W21, 257
	026 Move W8, [X22+3950]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {35}
	031 Move X0, X25
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+3950], W8
	035 Move X8, [X23+352]
	036 Compare X8, 0
	037 JumpIfEqual {189}
	038 Move W10, [X8+24]
	039 NotImplemented "Instruction SBFM not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, [X25]
	042 Move X10, X9
	043 ShiftRight X10, 61
	044 And X10, X10, 0xFFFFFFF
	045 Subtract X9, X10, X9
	046 Add X8, X8, X9
	047 Move W27, [X8+38]
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move W9, [X0+224]
	050 Move W29, [X8+32]
	051 Compare W9, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 NotImplemented "Instruction BFM not yet implemented."
	055 Move W0, W20
	056 Move W1, W28
	057 Move X2, X31
	058 NotImplemented "Instruction BFM not yet implemented."
	059 Call Math.Max, X0, X1
	060 And W27, W29, 0xFFFF
	061 Move W19, W0
	062 Move W0, W24
	063 Move W1, W27
	064 Move X2, X31
	065 Call Math.Min, X0, X1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X9, X29
	068 ShiftRight X9, 48
	069 And X9, X9, 0x7FFFFFFF
	070 Compare W9, 0
	071 JumpIfEqual {98}
	072 Move X10, [X23+360]
	073 Compare X10, 0
	074 JumpIfEqual {189}
	075 Move W8, [X10+24]
	076 Move X11, X29
	077 ShiftRight X11, 32
	078 And X11, X11, 0x7FFFFFFF
	079 Add W9, W9, W11
	080 Add X10, X10, 32
	081 Move X11, X29
	082 ShiftRight X11, 32
	083 And X11, X11, 0x7FFF
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X12, [X23+336]
	086 Compare X12, 0
	087 JumpIfEqual {189}
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Move W14, [X12+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Add X12, X12, X13
	092 Move X12, [X12+32]
	093 Compare X12, 0
	094 JumpIfEqual {189}
	095 Add X11, X11, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction STRH not yet implemented."
	098 NotImplemented "Instruction ORN not yet implemented."
	099 And X31, X8, 0xFFFFFFFF
	100 Move X1, [X31+8]
	101 Move W2, [X31+20]
	102 Move X4, [X31+24]
	103 Move X0, X23
	104 Move W3, W20
	105 Move X5, X29
	106 Move W6, W28
	107 Call InputDevice.WritePartialChangedControlStatesInternal, X0, X1, X2, X3, X4, X5, X6
	108 Move X8, [X23+352]
	109 Compare X8, 0
	110 JumpIfEqual {189}
	111 Move W10, [X8+24]
	112 NotImplemented "Instruction SBFM not yet implemented."
	113 Add X9, X9, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X0, [X25]
	116 Move X10, X9
	117 ShiftRight X10, 61
	118 And X10, X10, 0xFFFFFFF
	119 Subtract X9, X10, X9
	120 Add X8, X8, X9
	121 Move W28, [X8+38]
	122 NotImplemented "Instruction LDRH not yet implemented."
	123 Move W9, [X0+224]
	124 Move W26, [X8+32]
	125 Compare W9, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 NotImplemented "Instruction BFM not yet implemented."
	129 Move W0, W20
	130 Move W1, W27
	131 Move X2, X31
	132 NotImplemented "Instruction BFM not yet implemented."
	133 Call Math.Max, X0, X1
	134 Move W19, W0
	135 And W1, W26, 0xFFFF
	136 Move W0, W24
	137 Move X2, X31
	138 Call Math.Min, X0, X1
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X9, X26
	141 ShiftRight X9, 48
	142 And X9, X9, 0x7FFFFFFF
	143 Compare W9, 0
	144 JumpIfEqual {171}
	145 Move X10, [X23+360]
	146 Compare X10, 0
	147 JumpIfEqual {189}
	148 Move W8, [X10+24]
	149 Move X11, X26
	150 ShiftRight X11, 32
	151 And X11, X11, 0x7FFFFFFF
	152 Add W9, W9, W11
	153 Add X10, X10, 32
	154 Move X11, X26
	155 ShiftRight X11, 32
	156 And X11, X11, 0x7FFF
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Move X12, [X23+336]
	159 Compare X12, 0
	160 JumpIfEqual {189}
	161 NotImplemented "Instruction LDRH not yet implemented."
	162 Move W14, [X12+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Add X12, X12, X13
	165 Move X12, [X12+32]
	166 Compare X12, 0
	167 JumpIfEqual {189}
	168 Add X11, X11, 1
	169 NotImplemented "Instruction CMP not yet implemented."
	170 NotImplemented "Instruction STRH not yet implemented."
	171 NotImplemented "Instruction ORN not yet implemented."
	172 And X31, X8, 0xFFFFFFFF
	173 Move W28, W27
	174 Move X20, [X31+112]
	175 Move X19, [X31+120]
	176 Move X22, [X31+96]
	177 Move X21, [X31+104]
	178 Move X24, [X31+80]
	179 Move X23, [X31+88]
	180 Move X26, [X31+64]
	181 Move X25, [X31+72]
	182 Move X28, [X31+48]
	183 Move X27, [X31+56]
	184 Move X29, [X31+32]
	185 Move X30, [X31+40]
	186 Add X31, X31, 128
	187 Return 
	188 Call 0x1C17F28
	189 Call 0x1C17F20

Method: System.Void DumpControlBitRangeNode(System.Int32 nodeIndex, UnityEngine.InputSystem.InputDevice/ControlBitRangeNode node, System.UInt32 startOffset, System.UInt32 sizeInBits, System.Collections.Generic.List`1<System.String> output)

Disassembly:
	0x0377CC10 MOVZ W1, 0x12
	0x0377CC14 B 0x377CB0C
	0x0377CC18 MOVZ W1, 0x13
	0x0377CC1C B 0x377CB0C
	0x0377CC20 MOVZ W1, 0x14
	0x0377CC24 B 0x377CB0C
	0x0377CC28 MOVZ W1, 0x15
	0x0377CC2C B 0x377CB0C
	0x0377CC30 MOVZ W1, 0x16
	0x0377CC34 B 0x377CB0C
	0x0377CC38 MOVZ W1, 0x17
	0x0377CC3C B 0x377CB0C
	0x0377CC40 MOVZ W1, 0x18
	0x0377CC44 B 0x377CB0C
	0x0377CC48 MOVZ W1, 0x19
	0x0377CC4C B 0x377CB0C
	0x0377CC50 MOVZ W1, 0x1A
	0x0377CC54 B 0x377CB0C
	0x0377CC58 MOVZ W1, 0x1B
	0x0377CC5C B 0x377CB0C
	0x0377CC60 MOVZ W1, 0x1C
	0x0377CC64 B 0x377CB0C
	0x0377CC68 MOVZ W1, 0x1D
	0x0377CC6C B 0x377CB0C
	0x0377CC70 MOVZ W1, 0x1E
	0x0377CC74 B 0x377CB0C
	0x0377CC78 MOVZ W1, 0x1F
	0x0377CC7C B 0x377CB0C
	0x0377CC80 MOVZ W1, 0x20
	0x0377CC84 B 0x377CB0C
	0x0377CC88 MOVZ W1, 0x21
	0x0377CC8C B 0x377CB0C
	0x0377CC90 MOVZ W1, 0x22
	0x0377CC94 B 0x377CB0C
	0x0377CC98 MOVZ W1, 0x23
	0x0377CC9C B 0x377CB0C
	0x0377CCA0 MOVZ W1, 0x24
	0x0377CCA4 B 0x377CB0C
	0x0377CCA8 MOVZ W1, 0x25
	0x0377CCAC B 0x377CB0C
	0x0377CCB0 MOVZ W1, 0x26
	0x0377CCB4 B 0x377CB0C
	0x0377CCB8 MOVZ W1, 0x27
	0x0377CCBC B 0x377CB0C
	0x0377CCC0 MOVZ W1, 0x28
	0x0377CCC4 B 0x377CB0C
	0x0377CCC8 MOVZ W1, 0x29
	0x0377CCCC B 0x377CB0C
	0x0377CCD0 MOVZ W1, 0x2A
	0x0377CCD4 B 0x377CB0C
	0x0377CCD8 MOVZ W1, 0x2B
	0x0377CCDC B 0x377CB0C
	0x0377CCE0 MOVZ W1, 0x2C
	0x0377CCE4 B 0x377CB0C
	0x0377CCE8 MOVZ W1, 0x2D
	0x0377CCEC B 0x377CB0C
	0x0377CCF0 MOVZ W1, 0x2E
	0x0377CCF4 B 0x377CB0C
	0x0377CCF8 MOVZ W1, 0x2F
	0x0377CCFC B 0x377CB0C
	0x0377CD00 MOVZ W1, 0x30
	0x0377CD04 B 0x377CB0C
	0x0377CD08 MOVZ W1, 0x31
	0x0377CD0C B 0x377CB0C
	0x0377CD10 MOVZ W1, 0x32
	0x0377CD14 B 0x377CB0C
	0x0377CD18 MOVZ W1, 0x33
	0x0377CD1C B 0x377CB0C
	0x0377CD20 MOVZ W1, 0x34
	0x0377CD24 B 0x377CB0C
	0x0377CD28 MOVZ W1, 0x35
	0x0377CD2C B 0x377CB0C
	0x0377CD30 MOVZ W1, 0x36
	0x0377CD34 B 0x377CB0C
	0x0377CD38 MOVZ W1, 0x37
	0x0377CD3C B 0x377CB0C
	0x0377CD40 MOVZ W1, 0x38
	0x0377CD44 B 0x377CB0C
	0x0377CD48 MOVZ W1, 0x39
	0x0377CD4C B 0x377CB0C
	0x0377CD50 MOVZ W1, 0x3A
	0x0377CD54 B 0x377CB0C
	0x0377CD58 MOVZ W1, 0x39
	0x0377CD5C B 0x377CB0C
	0x0377CD60 MOVZ W1, 0x3A
	0x0377CD64 B 0x377CB0C
	0x0377CD68 MOVZ W1, 0x39
	0x0377CD6C B 0x377CB0C
	0x0377CD70 MOVZ W1, 0x3A
	0x0377CD74 B 0x377CB0C
	0x0377CD78 MOVZ W1, 0x39
	0x0377CD7C B 0x377CB0C
	0x0377CD80 MOVZ W1, 0x3A
	0x0377CD84 B 0x377CB0C
	0x0377CD88 MOVZ W1, 0x3B
	0x0377CD8C B 0x377CB0C
	0x0377CD90 MOVZ W1, 0x3C
	0x0377CD94 B 0x377CB0C
	0x0377CD98 MOVZ W1, 0x3D
	0x0377CD9C B 0x377CB0C
	0x0377CDA0 MOVZ W1, 0x3E
	0x0377CDA4 B 0x377CB0C
	0x0377CDA8 MOVZ W1, 0x3F
	0x0377CDAC B 0x377CB0C
	0x0377CDB0 MOVZ W1, 0x40
	0x0377CDB4 B 0x377CB0C
	0x0377CDB8 MOVZ W1, 0x41
	0x0377CDBC B 0x377CB0C
	0x0377CDC0 MOVZ W1, 0x42
	0x0377CDC4 B 0x377CB0C
	0x0377CDC8 MOVZ W1, 0x43
	0x0377CDCC B 0x377CB0C
	0x0377CDD0 MOVZ W1, 0x44
	0x0377CDD4 B 0x377CB0C
	0x0377CDD8 MOVZ W1, 0x45
	0x0377CDDC B 0x377CB0C
	0x0377CDE0 MOVZ W1, 0x46
	0x0377CDE4 B 0x377CB0C
	0x0377CDE8 MOVZ W1, 0x47
	0x0377CDEC B 0x377CB0C
	0x0377CDF0 MOVZ W1, 0x48
	0x0377CDF4 B 0x377CB0C
	0x0377CDF8 MOVZ W1, 0x4B
	0x0377CDFC B 0x377CB0C
	0x0377CE00 MOVZ W1, 0x49
	0x0377CE04 B 0x377CB0C
	0x0377CE08 MOVZ W1, 0x4A
	0x0377CE0C B 0x377CB0C
	0x0377CE10 MOVZ W1, 0x4C
	0x0377CE14 B 0x377CB0C
	0x0377CE18 MOVZ W1, 0x4D
	0x0377CE1C B 0x377CB0C
	0x0377CE20 MOVZ W1, 0x4E
	0x0377CE24 B 0x377CB0C
	0x0377CE28 MOVZ W1, 0x4F
	0x0377CE2C B 0x377CB0C
	0x0377CE30 MOVZ W1, 0x51
	0x0377CE34 B 0x377CB0C
	0x0377CE38 MOVZ W1, 0x50
	0x0377CE3C B 0x377CB0C
	0x0377CE40 MOVZ W1, 0x52
	0x0377CE44 B 0x377CB0C
	0x0377CE48 MOVZ W1, 0x53
	0x0377CE4C B 0x377CB0C
	0x0377CE50 MOVZ W1, 0x54
	0x0377CE54 B 0x377CB0C
	0x0377CE58 MOVZ W1, 0x55
	0x0377CE5C B 0x377CB0C
	0x0377CE60 MOVZ W1, 0x56
	0x0377CE64 B 0x377CB0C
	0x0377CE68 MOVZ W1, 0x57
	0x0377CE6C B 0x377CB0C
	0x0377CE70 MOVZ W1, 0x58
	0x0377CE74 B 0x377CB0C
	0x0377CE78 MOVZ W1, 0x59
	0x0377CE7C B 0x377CB0C
	0x0377CE80 MOVZ W1, 0x5A
	0x0377CE84 B 0x377CB0C
	0x0377CE88 MOVZ W1, 0x5B
	0x0377CE8C B 0x377CB0C
	0x0377CE90 MOVZ W1, 0x5C
	0x0377CE94 B 0x377CB0C
	0x0377CE98 MOVZ W1, 0x5D
	0x0377CE9C B 0x377CB0C
	0x0377CEA0 MOVZ W1, 0x5E
	0x0377CEA4 B 0x377CB0C
	0x0377CEA8 MOVZ W1, 0x5F
	0x0377CEAC B 0x377CB0C
	0x0377CEB0 MOVZ W1, 0x60
	0x0377CEB4 B 0x377CB0C
	0x0377CEB8 MOVZ W1, 0x61
	0x0377CEBC B 0x377CB0C
	0x0377CEC0 MOVZ W1, 0x62
	0x0377CEC4 B 0x377CB0C
	0x0377CEC8 MOVZ W1, 0x63
	0x0377CECC B 0x377CB0C
	0x0377CED0 MOVZ W1, 0x64
	0x0377CED4 B 0x377CB0C
	0x0377CED8 MOVZ W1, 0x65
	0x0377CEDC B 0x377CB0C
	0x0377CEE0 MOVZ W1, 0x66
	0x0377CEE4 B 0x377CB0C
	0x0377CEE8 MOVZ W1, 0x67
	0x0377CEEC B 0x377CB0C
	0x0377CEF0 MOVZ W1, 0x68
	0x0377CEF4 B 0x377CB0C
	0x0377CEF8 MOVZ W1, 0x69
	0x0377CEFC B 0x377CB0C
	0x0377CF00 MOVZ W1, 0x6A
	0x0377CF04 B 0x377CB0C
	0x0377CF08 MOVZ W1, 0x6B
	0x0377CF0C B 0x377CB0C
	0x0377CF10 MOVZ W1, 0x6C
	0x0377CF14 B 0x377CB0C
	0x0377CF18 MOVZ W1, 0x6D
	0x0377CF1C B 0x377CB0C
	0x0377CF20 MOVZ W1, 0x6E
	0x0377CF24 B 0x377CB0C
	0x0377CF28 LDR X0, [X0 + 0x178]
	0x0377CF2C RET
	0x0377CF30 STR X1, [X0 + 0x178]
	0x0377CF34 RET
	0x0377CF38 LDR X0, [X0 + 0x180]
	0x0377CF3C RET
	0x0377CF40 STR X1, [X0 + 0x180]
	0x0377CF44 RET
	0x0377CF48 LDR X0, [X0 + 0x188]
	0x0377CF4C RET
	0x0377CF50 STR X1, [X0 + 0x188]
	0x0377CF54 RET
	0x0377CF58 LDR X0, [X0 + 0x190]
	0x0377CF5C RET
	0x0377CF60 STR X1, [X0 + 0x190]
	0x0377CF64 RET
	0x0377CF68 SUB X31, X31, 0x30
	0x0377CF6C STP X30, X21, [X31 + 0x10]
	0x0377CF70 STP X20, X19, [X31 + 0x20]
	0x0377CF74 ADRP X21, 0xC64000
	0x0377CF78 ADRP X20, 0x9CB000
	0x0377CF7C LDRB W8, [X21 + 0xF7E]
	0x0377CF80 LDR X20, [X20 + 0xB8]
	0x0377CF84 MOV X19, X0
	0x0377CF88 TBNZ X8, 0x0, 0x377CFA0
	0x0377CF8C ADRP X0, 0x9CB000
	0x0377CF90 LDR X0, [X0 + 0xB8]
	0x0377CF94 BL 0x1C16CF4
	0x0377CF98 MOVZ W8, 0x1
	0x0377CF9C STRB W8, [X21 + 0xF7E]
	0x0377CFA0 LDR X1, [X19 + 0x1B8]
	0x0377CFA4 LDR X2, [X20]
	0x0377CFA8 ADD X0, X31, 0x0
	0x0377CFAC STP X31, X31, [X31]
	0x0377CFB0 BL 0x24FD80C
	0x0377CFB4 LDP X0, X1, [X31]
	0x0377CFB8 LDP X20, X19, [X31 + 0x20]
	0x0377CFBC LDP X30, X21, [X31 + 0x10]
	0x0377CFC0 ADD X31, X31, 0x30
	0x0377CFC4 RET
	0x0377CFC8 STR X30, [X31 - 0x20]!
	0x0377CFCC STP X20, X19, [X31 + 0x10]
	0x0377CFD0 ADRP X19, 0xC64000
	0x0377CFD4 ADRP X20, 0x9CB000
	0x0377CFD8 LDRB W8, [X19 + 0xF7F]
	0x0377CFDC LDR X20, [X20 + 0xC0]
	0x0377CFE0 TBNZ X8, 0x0, 0x377CFF8
	0x0377CFE4 ADRP X0, 0x9CB000
	0x0377CFE8 LDR X0, [X0 + 0xC0]
	0x0377CFEC BL 0x1C16CF4
	0x0377CFF0 MOVZ W8, 0x1
	0x0377CFF4 STRB W8, [X19 + 0xF7F]
	0x0377CFF8 LDR X8, [X20]
	0x0377CFFC LDP X20, X19, [X31 + 0x10]
	0x0377D000 LDR X8, [X8 + 0xB8]
	0x0377D004 LDR X0, [X8]
	0x0377D008 LDR X30, [X31], #0x20
	0x0377D00C RET
	0x0377D010 STP X30, X21, [X31 - 0x20]!
	0x0377D014 STP X20, X19, [X31 + 0x10]
	0x0377D018 ADRP X20, 0xC63000
	0x0377D01C ADRP X21, 0x9CA000
	0x0377D020 LDRB W8, [X20 + 0xF80]
	0x0377D024 LDR X21, [X21 + 0xC0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X28, 0xC65000
	015 Move X26, 0x979000
	016 Move X25, 0x979000
	017 Move W8, [X28+3951]
	018 Move X26, [X26+464]
	019 Move X25, [X25+448]
	020 Move X19, X5
	021 Move W20, W4
	022 Move W21, W3
	023 Move X24, X2
	024 Move W22, W1
	025 Move X23, X0
	026 Move X27, X2
	027 ShiftRight X27, 48
	028 And X27, X27, 0x7FFFFFFF
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {68}
	033 Move X0, 0x97C000
	034 Move X0, [X0+1576]
	035 Call 0x1C17CF4
	036 Move X0, 0x978000
	037 Move X0, [X0+1880]
	038 Call 0x1C17CF4
	039 Move X0, 0x979000
	040 Move X0, [X0+440]
	041 Call 0x1C17CF4
	042 Move X0, 0x979000
	043 Move X0, [X0+448]
	044 Call 0x1C17CF4
	045 Move X0, 0x979000
	046 Move X0, [X0+464]
	047 Call 0x1C17CF4
	048 Move X0, 0x978000
	049 Move X0, [X0+2512]
	050 Call 0x1C17CF4
	051 Move X0, 0x980000
	052 Move X0, [X0+1824]
	053 Call 0x1C17CF4
	054 Move X0, 0x9CB000
	055 Move X0, [X0+4088]
	056 Call 0x1C17CF4
	057 Move X0, 0x978000
	058 Move X0, [X0+2104]
	059 Call 0x1C17CF4
	060 Move X0, 0x9CC000
	061 Move X0, [X0]
	062 Call 0x1C17CF4
	063 Move X0, 0x978000
	064 Move X0, [X0+2440]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X28+3951], W8
	068 Move X0, [X26]
	069 Move X26, 0x979000
	070 Move X26, [X26+440]
	071 Call 0x1C17F10
	072 Move X1, [X25]
	073 Move X25, X0
	074 Call List`1<Object>..ctor, X0
	075 And W8, W27, 255
	076 Move X27, X24
	077 ShiftRight X27, 32
	078 And X27, X27, 0x7FFF
	079 Move W28, W8
	080 Move X8, [X23+360]
	081 Compare X8, 0
	082 JumpIfEqual {284}
	083 Move W9, [X8+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X9, [X23+336]
	086 Compare X9, 0
	087 JumpIfEqual {284}
	088 Add X8, X8, X27
	089 NotImplemented "Instruction LDRH not yet implemented."
	090 Move W10, [X9+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add X8, X9, X8
	093 Move X0, [X8+32]
	094 Compare X0, 0
	095 JumpIfEqual {284}
	096 Call InputControl.get_path, X0
	097 Compare X25, 0
	098 JumpIfEqual {284}
	099 Move W10, [X25+28]
	100 Move X8, [X25+16]
	101 Move X9, [X26]
	102 Add W10, W10, 1
	103 Move [X25+28], W10
	104 Compare X8, 0
	105 JumpIfEqual {284}
	106 NotImplemented "Instruction LDRSW not yet implemented."
	107 Move W11, [X8+24]
	108 Move X1, X0
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Add W9, W10, 1
	111 Add X8, X8, X10
	112 Move [X25+24], W9
	113 Move [X8+32], X1
	114 Move X8, [X9+32]
	115 Move X0, X25
	116 Move X8, [X8+192]
	117 Move X2, [X8+112]
	118 Call List`1<Object>.AddWithResize, X0, X1
	119 Subtract X28, X28, 1
	120 Add X27, X27, 1
	121 Move X8, 0x978000
	122 Move X8, [X8+2104]
	123 Move X27, 0x978000
	124 Move X28, 0x978000
	125 Move X1, X25
	126 Move X0, [X8]
	127 Move X27, [X27+1880]
	128 Move X28, [X28+2512]
	129 Move X2, X31
	130 Call String.Join, X0, X1
	131 Move W8, 0xFFFF
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X23, X0
	134 Move X9, 0x97C000
	135 Move X9, [X9+1576]
	136 Move X25, 0x9CB000
	137 Move X8, X24
	138 ShiftRight X8, 16
	139 And X8, X8, 0x7FFFFFFF
	140 Add X1, X31, 8
	141 Move X0, [X9]
	142 Move X25, [X25+4088]
	143 NotImplemented "Instruction SXTH not yet implemented."
	144 NotImplemented "Instruction STRH not yet implemented."
	145 Call 0x1C17E04
	146 Move X24, X0
	147 Move X0, [X27]
	148 Add W8, W29, 1
	149 Add X1, X31, 12
	150 Move [X31+12], W8
	151 Call 0x1C17E04
	152 Move X8, [X25]
	153 Move X2, X0
	154 Move X1, X24
	155 Move X3, X31
	156 Move X0, X8
	157 Call String.Format, X0, X1, X2
	158 Move X25, X0
	159 Move X8, 0x978000
	160 Move X8, [X8+2440]
	161 Move X25, [X8]
	162 Move X0, [X28]
	163 Move W1, 5
	164 Call 0x1C17D6C
	165 Move X24, X0
	166 Move X0, [X27]
	167 Add X1, X31, 12
	168 Move [X31+12], W22
	169 Call 0x1C17E04
	170 Compare X24, 0
	171 JumpIfEqual {284}
	172 Move X22, X0
	173 Compare X0, 0
	174 JumpIfEqual {181}
	175 Move X8, [X24]
	176 Move X0, X22
	177 Move X1, [X8+64]
	178 Call 0x1C17E00
	179 Compare X0, 0
	180 JumpIfEqual {286}
	181 Move W8, [X24+24]
	182 Compare W8, 0
	183 JumpIfEqual {285}
	184 Move X27, 0x980000
	185 Move X27, [X27+1824]
	186 Move [X24+32], X22
	187 Add X1, X31, 8
	188 Move [X31+8], W21
	189 Move X0, [X27]
	190 Call 0x1C17E04
	191 Move X22, X0
	192 Compare X0, 0
	193 JumpIfEqual {200}
	194 Move X8, [X24]
	195 Move X0, X22
	196 Move X1, [X8+64]
	197 Call 0x1C17E00
	198 Compare X0, 0
	199 JumpIfEqual {286}
	200 Move W8, [X24+24]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move [X24+40], X22
	203 Move X0, [X27]
	204 Add W8, W20, W21
	205 Add X1, X31, 4
	206 Move [X31+4], W8
	207 Call 0x1C17E04
	208 Move X20, X0
	209 Compare X0, 0
	210 JumpIfEqual {217}
	211 Move X8, [X24]
	212 Move X0, X20
	213 Move X1, [X8+64]
	214 Call 0x1C17E00
	215 Compare X0, 0
	216 JumpIfEqual {286}
	217 Move W8, [X24+24]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move [X24+48], X20
	220 Compare X25, 0
	221 JumpIfEqual {229}
	222 Move X8, [X24]
	223 Move X0, X25
	224 Move X1, [X8+64]
	225 Call 0x1C17E00
	226 Compare X0, 0
	227 JumpIfEqual {286}
	228 Move W8, [X24+24]
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move [X24+56], X25
	231 Compare X23, 0
	232 JumpIfEqual {240}
	233 Move X8, [X24]
	234 Move X0, X23
	235 Move X1, [X8+64]
	236 Call 0x1C17E00
	237 Compare X0, 0
	238 JumpIfEqual {286}
	239 Move W8, [X24+24]
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Move X8, 0x9CC000
	242 Move X8, [X8]
	243 Move [X24+64], X23
	244 Move X1, X24
	245 Move X2, X31
	246 Move X0, [X8]
	247 Call String.Format, X0, X1
	248 Compare X19, 0
	249 JumpIfEqual {284}
	250 Move W10, [X19+28]
	251 Move X8, [X19+16]
	252 Move X9, [X26]
	253 Add W10, W10, 1
	254 Move [X19+28], W10
	255 Compare X8, 0
	256 JumpIfEqual {284}
	257 NotImplemented "Instruction LDRSW not yet implemented."
	258 Move W11, [X8+24]
	259 Move X1, X0
	260 NotImplemented "Instruction CMP not yet implemented."
	261 Add W9, W10, 1
	262 Add X8, X8, X10
	263 Move [X19+24], W9
	264 Move [X8+32], X1
	265 Move X8, [X9+32]
	266 Move X0, X19
	267 Move X8, [X8+192]
	268 Move X2, [X8+112]
	269 Call List`1<Object>.AddWithResize, X0, X1
	270 Move X20, [X31+96]
	271 Move X19, [X31+104]
	272 Move X22, [X31+80]
	273 Move X21, [X31+88]
	274 Move X24, [X31+64]
	275 Move X23, [X31+72]
	276 Move X26, [X31+48]
	277 Move X25, [X31+56]
	278 Move X28, [X31+32]
	279 Move X27, [X31+40]
	280 Move X29, [X31+16]
	281 Move X30, [X31+24]
	282 Add X31, X31, 112
	283 Return 
	284 Call 0x1C17F20
	285 Call 0x1C17F28
	286 Call 0x1C17F44
	287 Move X1, X31
	288 Call 0x1C17DEC

Method: System.Void DumpControlTree(UnityEngine.InputSystem.InputDevice/ControlBitRangeNode parentNode, System.UInt32 startOffset, System.Collections.Generic.List`1<System.String> output)

Disassembly:
	0x0377D028 MOV X19, X0
	0x0377D02C TBNZ X8, 0x0, 0x377D044
	0x0377D030 ADRP X0, 0x9CA000
	0x0377D034 LDR X0, [X0 + 0xC0]
	0x0377D038 BL 0x1C16CF4
	0x0377D03C MOVZ W8, 0x1
	0x0377D040 STRB W8, [X20 + 0xF80]
	0x0377D044 LDR X8, [X21]
	0x0377D048 LDR X8, [X8 + 0xB8]
	0x0377D04C STR X19, [X8]
	0x0377D050 LDP X20, X19, [X31 + 0x10]
	0x0377D054 LDP X30, X21, [X31], #0x20
	0x0377D058 RET
	0x0377D05C STR X30, [X31 - 0x20]!
	0x0377D060 STP X20, X19, [X31 + 0x10]
	0x0377D064 ADRP X20, 0xC63000
	0x0377D068 LDRB W8, [X20 + 0xF9B]
	0x0377D06C MOV X19, X0
	0x0377D070 CBNZ W8, 0x377D088
	0x0377D074 ADRP X0, 0x9CA000
	0x0377D078 LDR X0, [X0 + 0xC0]
	0x0377D07C BL 0x1C16CF4
	0x0377D080 MOVZ W8, 0x1
	0x0377D084 STRB W8, [X20 + 0xF9B]
	0x0377D088 ADRP X8, 0x9CA000
	0x0377D08C LDR X8, [X8 + 0xC0]
	0x0377D090 LDR X8, [X8]
	0x0377D094 LDR X8, [X8 + 0xB8]
	0x0377D098 STR X19, [X8]
	0x0377D09C LDP X20, X19, [X31 + 0x10]
	0x0377D0A0 LDR X30, [X31], #0x20
	0x0377D0A4 RET
	0x0377D0A8 STR X30, [X31 - 0x20]!
	0x0377D0AC STP X20, X19, [X31 + 0x10]
	0x0377D0B0 ADRP X19, 0xC63000
	0x0377D0B4 LDRB W8, [X19 + 0xF9C]
	0x0377D0B8 MOV X20, X0
	0x0377D0BC CBNZ W8, 0x377D0D4
	0x0377D0C0 ADRP X0, 0x9CA000
	0x0377D0C4 LDR X0, [X0 + 0xC0]
	0x0377D0C8 BL 0x1C16CF4
	0x0377D0CC MOVZ W8, 0x1
	0x0377D0D0 STRB W8, [X19 + 0xF9C]
	0x0377D0D4 ADRP X19, 0x9CA000
	0x0377D0D8 LDR X19, [X19 + 0xC0]
	0x0377D0DC LDR X8, [X19]
	0x0377D0E0 LDR X8, [X8 + 0xB8]
	0x0377D0E4 LDR X9, [X8]
	0x0377D0E8 CMP X9, X20
	0x0377D0EC B.NE 0x377D118
	0x0377D0F0 ADRP X20, 0xC63000
	0x0377D0F4 LDRB W9, [X20 + 0xF9B]
	0x0377D0F8 CBNZ W9, 0x377D114
	0x0377D0FC MOV X0, X19
	0x0377D100 BL 0x1C16CF4
	0x0377D104 LDR X8, [X19]
	0x0377D108 MOVZ W9, 0x1
	0x0377D10C STRB W9, [X20 + 0xF9B]
	0x0377D110 LDR X8, [X8 + 0xB8]
	0x0377D114 STR X31, [X8]
	0x0377D118 LDP X20, X19, [X31 + 0x10]
	0x0377D11C LDR X30, [X31], #0x20
	0x0377D120 RET
	0x0377D124 STP X30, X25, [X31 - 0x40]!
	0x0377D128 STP X24, X23, [X31 + 0x10]
	0x0377D12C STP X22, X21, [X31 + 0x20]
	0x0377D130 STP X20, X19, [X31 + 0x30]
	0x0377D134 ADRP X20, 0xC63000
	0x0377D138 ADRP X21, 0x976000
	0x0377D13C LDRB W8, [X20 + 0xF81]
	0x0377D140 LDR X21, [X21 + 0xAC8]
	0x0377D144 MOV X19, X0
	0x0377D148 TBNZ X8, 0x0, 0x377D6F4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, X3
	012 Move W22, W2
	013 Move X21, X1
	014 Move X20, X0
	015 Move X8, [X20+352]
	016 Compare X8, 0
	017 JumpIfEqual {84}
	018 Move W10, [X8+24]
	019 NotImplemented "Instruction SBFM not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W11, W21
	022 NotImplemented "Instruction SBFM not yet implemented."
	023 Add X23, X11, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X10, X9
	026 ShiftRight X10, 61
	027 And X10, X10, 0xFFFFFFF
	028 Move X11, X23
	029 ShiftRight X11, 61
	030 And X11, X11, 0xFFFFFFF
	031 Subtract X9, X10, X9
	032 Subtract X10, X11, X23
	033 Add X9, X8, X9
	034 Add X8, X8, X10
	035 Move W10, [X9+38]
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move W25, [X9+32]
	038 Move W12, [X8+38]
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move W26, [X8+32]
	041 NotImplemented "Instruction BFM not yet implemented."
	042 NotImplemented "Instruction BFM not yet implemented."
	043 And W24, W25, 0xFFFF
	044 NotImplemented "Instruction SBFM not yet implemented."
	045 NotImplemented "Instruction BFM not yet implemented."
	046 Move X21, X26
	047 Subtract W4, W24, W22
	048 Move X0, X20
	049 Move X2, X25
	050 Move W3, W22
	051 Move X5, X19
	052 NotImplemented "Instruction BFM not yet implemented."
	053 NotImplemented "Instruction ORN not yet implemented."
	054 Call InputDevice.DumpControlBitRangeNode, X0, X1, X2, X3, X4, X5
	055 And W8, W26, 0xFFFF
	056 Subtract W4, W8, W25
	057 Move X0, X20
	058 Move W1, W23
	059 Move X2, X21
	060 Move W3, W24
	061 Move X5, X19
	062 Call InputDevice.DumpControlBitRangeNode, X0, X1, X2, X3, X4, X5
	063 And X31, X27, 0xFFFFFFFF
	064 Move X0, X20
	065 Move X1, X25
	066 Move W2, W22
	067 Move X3, X19
	068 Call InputDevice.DumpControlTree, X0, X1, X2, X3
	069 NotImplemented "Instruction ORN not yet implemented."
	070 And X31, X8, 0xFFFFFFFF
	071 Move W22, W24
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X24, [X31+32]
	077 Move X23, [X31+40]
	078 Move X26, [X31+16]
	079 Move X25, [X31+24]
	080 Move X30, [X31+80]
	081 Move X27, [X31+88]
	082 Return 
	083 Call 0x1C17F28
	084 Call 0x1C17F20

Method: System.String DumpControlTree()

Disassembly:
	0x0377D14C ADRP X0, 0x9CA000
	0x0377D150 LDR X0, [X0 + 0xC8]
	0x0377D154 BL 0x1C16CF4
	0x0377D158 ADRP X0, 0x9C7000
	0x0377D15C LDR X0, [X0 + 0xE18]
	0x0377D160 BL 0x1C16CF4
	0x0377D164 ADRP X0, 0x9CA000
	0x0377D168 LDR X0, [X0 + 0xD0]
	0x0377D16C BL 0x1C16CF4
	0x0377D170 ADRP X0, 0x9CA000
	0x0377D174 LDR X0, [X0 + 0xD8]
	0x0377D178 BL 0x1C16CF4
	0x0377D17C ADRP X0, 0x976000
	0x0377D180 LDR X0, [X0 + 0xAC8]
	0x0377D184 BL 0x1C16CF4
	0x0377D188 ADRP X0, 0x9CA000
	0x0377D18C LDR X0, [X0 + 0xE0]
	0x0377D190 BL 0x1C16CF4
	0x0377D194 ADRP X0, 0x9CA000
	0x0377D198 LDR X0, [X0 + 0xE8]
	0x0377D19C BL 0x1C16CF4
	0x0377D1A0 ADRP X0, 0x9CA000
	0x0377D1A4 LDR X0, [X0 + 0xF0]
	0x0377D1A8 BL 0x1C16CF4
	0x0377D1AC ADRP X0, 0x9CA000
	0x0377D1B0 LDR X0, [X0 + 0xF8]
	0x0377D1B4 BL 0x1C16CF4
	0x0377D1B8 ADRP X0, 0x9CA000
	0x0377D1BC LDR X0, [X0 + 0x100]
	0x0377D1C0 BL 0x1C16CF4
	0x0377D1C4 ADRP X0, 0x99E000
	0x0377D1C8 LDR X0, [X0 + 0x780]
	0x0377D1CC BL 0x1C16CF4
	0x0377D1D0 ADRP X0, 0x9CA000
	0x0377D1D4 LDR X0, [X0 + 0x108]
	0x0377D1D8 BL 0x1C16CF4
	0x0377D1DC ADRP X0, 0x9A3000
	0x0377D1E0 LDR X0, [X0 + 0x3B0]
	0x0377D1E4 BL 0x1C16CF4
	0x0377D1E8 ADRP X0, 0x9C7000
	0x0377D1EC LDR X0, [X0 + 0xE98]
	0x0377D1F0 BL 0x1C16CF4
	0x0377D1F4 ADRP X0, 0x9CA000
	0x0377D1F8 LDR X0, [X0 + 0x110]
	0x0377D1FC BL 0x1C16CF4
	0x0377D200 ADRP X0, 0x9BB000
	0x0377D204 LDR X0, [X0 + 0x518]
	0x0377D208 BL 0x1C16CF4
	0x0377D20C ADRP X0, 0x9CA000
	0x0377D210 LDR X0, [X0 + 0x118]
	0x0377D214 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC64000
	007 Move X22, 0x978000
	008 Move X20, 0x978000
	009 Move W8, [X21+3952]
	010 Move X22, [X22+464]
	011 Move X20, [X20+448]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x978000
	018 Move X0, [X0+448]
	019 Call 0x1C17CF4
	020 Move X0, 0x978000
	021 Move X0, [X0+464]
	022 Call 0x1C17CF4
	023 Move X0, 0x978000
	024 Move X0, [X0+4064]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3952], W8
	028 Move X0, [X22]
	029 Call 0x1C17F10
	030 Move X1, [X20]
	031 Move X20, X0
	032 Call List`1<Object>..ctor, X0
	033 Move X8, [X19+352]
	034 Compare X8, 0
	035 JumpIfEqual {60}
	036 Move W9, [X8+24]
	037 Compare W9, 0
	038 JumpIfEqual {61}
	039 Move W9, [X8+38]
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Move W1, [X8+32]
	042 Move X21, 0x978000
	043 Move X21, [X21+4064]
	044 NotImplemented "Instruction BFM not yet implemented."
	045 NotImplemented "Instruction BFM not yet implemented."
	046 Move X0, X19
	047 Move W2, W31
	048 Move X3, X20
	049 Call InputDevice.DumpControlTree, X0, X1, X2, X3
	050 Move X0, [X21]
	051 Move X1, X20
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X2, X31
	057 Move X30, [X31+48]
	058 Call String.Join, X0, X1
	059 Return X0
	060 Call 0x1C17F20
	061 Call 0x1C17F28

Method: System.Void WriteChangedControlStatesInternal(System.Void* statePtr, System.UInt32 stateSizeInBits, System.Byte* deviceStatePtr, UnityEngine.InputSystem.InputDevice/ControlBitRangeNode parentNode, System.UInt32 startOffset)

Disassembly:
	0x0377C98C LDR X30, [X31], #0x30
	0x0377C990 B 0x2DEAD38
	0x0377C994 SUB X31, X31, 0x40
	0x0377C998 STR X30, [X31 + 0x10]
	0x0377C99C STP X22, X21, [X31 + 0x20]
	0x0377C9A0 STP X20, X19, [X31 + 0x30]
	0x0377C9A4 ADRP X22, 0xC64000
	0x0377C9A8 ADRP X21, 0x9CB000
	0x0377C9AC LDRB W8, [X22 + 0xF7C]
	0x0377C9B0 LDR X21, [X21 + 0xA0]
	0x0377C9B4 MOV W20, W1
	0x0377C9B8 MOV X19, X0
	0x0377C9BC TBNZ X8, 0x0, 0x377C9D4
	0x0377C9C0 ADRP X0, 0x9CB000
	0x0377C9C4 LDR X0, [X0 + 0xA0]
	0x0377C9C8 BL 0x1C16CF4
	0x0377C9CC MOVZ W8, 0x1
	0x0377C9D0 STRB W8, [X22 + 0xF7C]
	0x0377C9D4 AND W0, W20, 0x1
	0x0377C9D8 MOV X1, X31
	0x0377C9DC BL 0x37FE7C0
	0x0377C9E0 LDR X2, [X21]
	0x0377C9E4 STR X0, [X31]
	0x0377C9E8 STRB W1, [X31 + 0x8]
	0x0377C9EC ADD X1, X31, 0x0
	0x0377C9F0 MOV X0, X19
	0x0377C9F4 BL 0x2204B24
	0x0377C9F8 LDP X20, X19, [X31 + 0x30]
	0x0377C9FC LDP X22, X21, [X31 + 0x20]
	0x0377CA00 LDR X30, [X31 + 0x10]
	0x0377CA04 ADD X31, X31, 0x40
	0x0377CA08 RET
	0x0377CA0C SUB X31, X31, 0x60
	0x0377CA10 STP D9, D8, [X31 + 0x20]
	0x0377CA14 STR X30, [X31 + 0x30]
	0x0377CA18 STP X22, X21, [X31 + 0x40]
	0x0377CA1C STP X20, X19, [X31 + 0x50]
	0x0377CA20 MRS X20, 0xC000
	0x0377CA24 LDR X8, [X20 + 0x28]
	0x0377CA28 ADRP X22, 0xC64000
	0x0377CA2C ADRP X21, 0x9CB000
	0x0377CA30 MOV V8.16B, V1.16B
	0x0377CA34 STR X8, [X31 + 0x18]
	0x0377CA38 LDRB W8, [X22 + 0xF7D]
	0x0377CA3C LDR X21, [X21 + 0xA8]
	0x0377CA40 MOV V9.16B, V0.16B
	0x0377CA44 MOV X19, X0
	0x0377CA48 TBNZ X8, 0x0, 0x377CA60
	0x0377CA4C ADRP X0, 0x9CB000
	0x0377CA50 LDR X0, [X0 + 0xA8]
	0x0377CA54 BL 0x1C16CF4
	0x0377CA58 MOVZ W8, 0x1
	0x0377CA5C STRB W8, [X22 + 0xF7D]
	0x0377CA60 MOV V0.16B, V9.16B
	0x0377CA64 MOV V1.16B, V8.16B
	0x0377CA68 MOV X0, X31
	0x0377CA6C BL 0x37FF5B8
	0x0377CA70 LDR X2, [X21]
	0x0377CA74 STP X0, X1, [X31 + 0x8]
	0x0377CA78 ADD X1, X31, 0x8
	0x0377CA7C MOV X0, X19
	0x0377CA80 BL 0x2206FE8
	0x0377CA84 LDR X8, [X20 + 0x28]
	0x0377CA88 LDR X9, [X31 + 0x18]
	0x0377CA8C CMP X8, X9
	0x0377CA90 B.NE 0x377CAAC
	0x0377CA94 LDP X20, X19, [X31 + 0x50]
	0x0377CA98 LDP X22, X21, [X31 + 0x40]
	0x0377CA9C LDR X30, [X31 + 0x30]
	0x0377CAA0 LDP D9, D8, [X31 + 0x20]
	0x0377CAA4 ADD X31, X31, 0x60
	0x0377CAA8 RET
	0x0377CAAC BL 0x3EB1B20
	0x0377CAB0 STP X30, X19, [X31 - 0x10]!
	0x0377CAB4 LDRB W8, [X0 + 0xA0]
	0x0377CAB8 MOV X19, X0
	0x0377CABC TBNZ X8, 0x0, 0x377CAE0
	0x0377CAC0 LDR X8, [X19]
	0x0377CAC4 MOV X0, X19
	0x0377CAC8 LDR X9, [X8 + 0x218]
	0x0377CACC LDR X1, [X8 + 0x220]
	0x0377CAD0 BLR X9
	0x0377CAD4 LDR W8, [X19 + 0xA0]
	0x0377CAD8 ORR W8, W8, 0x1
	0x0377CADC STR W8, [X19 + 0xA0]
	0x0377CAE0 LDR X0, [X19 + 0x1B0]
	0x0377CAE4 LDP X30, X19, [X31], #0x10
	0x0377CAE8 RET
	0x0377CAEC STR X1, [X0 + 0x1B0]
	0x0377CAF0 RET
	0x0377CAF4 LDR X0, [X0 + 0x170]
	0x0377CAF8 RET
	0x0377CAFC STR X1, [X0 + 0x170]
	0x0377CB00 RET
	0x0377CB04 MOVZ W1, 0x1
	0x0377CB08 B 0x377CB0C
	0x0377CB0C STP X30, X19, [X31 - 0x10]!
	0x0377CB10 SUBS W8, W1, 0x1
	0x0377CB14 B.MI 0x377CB40
	0x0377CB18 LDR X9, [X0 + 0x1B8]
	0x0377CB1C CBZ X9, 0x377CB88
	0x0377CB20 LDR W10, [X9 + 0x18]
	0x0377CB24 CMP W8, W10
	0x0377CB28 B.GE 0x377CB40
	0x0377CB2C B.CS 0x377CB8C
	0x0377CB30 ADD X8, X9, W8, 0x3, UXTW
	0x0377CB34 LDR X0, [X8 + 0x20]
	0x0377CB38 LDP X30, X19, [X31], #0x10
	0x0377CB3C RET
	0x0377CB40 ADRP X0, 0x97F000
	0x0377CB44 LDR X0, [X0 + 0x760]
	0x0377CB48 BL 0x1C16D08
	0x0377CB4C BL 0x1C16F10
	0x0377CB50 MOV X19, X0
	0x0377CB54 ADRP X0, 0x9A1000
	0x0377CB58 LDR X0, [X0 + 0x70]
	0x0377CB5C BL 0x1C16D08
	0x0377CB60 MOV X1, X0
	0x0377CB64 MOV X0, X19
	0x0377CB68 MOV X2, X31
	0x0377CB6C BL 0x3316014
	0x0377CB70 ADRP X0, 0x9CB000
	0x0377CB74 LDR X0, [X0 + 0xB0]
	0x0377CB78 BL 0x1C16D08
	0x0377CB7C MOV X1, X0
	0x0377CB80 MOV X0, X19
	0x0377CB84 BL 0x1C16DEC
	0x0377CB88 BL 0x1C16F20
	0x0377CB8C BL 0x1C16F28
	0x0377CB90 MOVZ W1, 0x2
	0x0377CB94 B 0x377CB0C
	0x0377CB98 MOVZ W1, 0x3
	0x0377CB9C B 0x377CB0C
	0x0377CBA0 MOVZ W1, 0x4
	0x0377CBA4 B 0x377CB0C
	0x0377CBA8 MOVZ W1, 0x5
	0x0377CBAC B 0x377CB0C
	0x0377CBB0 MOVZ W1, 0x6
	0x0377CBB4 B 0x377CB0C
	0x0377CBB8 MOVZ W1, 0x7
	0x0377CBBC B 0x377CB0C
	0x0377CBC0 MOVZ W1, 0x8
	0x0377CBC4 B 0x377CB0C
	0x0377CBC8 MOVZ W1, 0x9
	0x0377CBCC B 0x377CB0C
	0x0377CBD0 MOVZ W1, 0xA
	0x0377CBD4 B 0x377CB0C
	0x0377CBD8 MOVZ W1, 0xB
	0x0377CBDC B 0x377CB0C
	0x0377CBE0 MOVZ W1, 0xC
	0x0377CBE4 B 0x377CB0C
	0x0377CBE8 MOVZ W1, 0xD
	0x0377CBEC B 0x377CB0C
	0x0377CBF0 MOVZ W1, 0xE
	0x0377CBF4 B 0x377CB0C
	0x0377CBF8 MOVZ W1, 0xF
	0x0377CBFC B 0x377CB0C
	0x0377CC00 MOVZ W1, 0x10
	0x0377CC04 B 0x377CB0C
	0x0377CC08 MOVZ W1, 0x11
	0x0377CC0C B 0x377CB0C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+8], W2
	015 Move [X31+12], W5
	016 Move X23, 0x9A0000
	017 Move X23, [X23+3352]
	018 Move X24, X4
	019 Move X19, X3
	020 Move X21, X1
	021 Move X22, X0
	022 Move X28, 0xC65000
	023 Move W29, 257
	024 Move W8, [X28+3953]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {33}
	029 Move X0, X23
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X28+3953], W8
	033 Move X8, [X22+352]
	034 Compare X8, 0
	035 JumpIfEqual {207}
	036 Move W10, [X8+24]
	037 NotImplemented "Instruction SBFM not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X10, X9
	040 ShiftRight X10, 61
	041 And X10, X10, 0xFFFFFFF
	042 Subtract X9, X10, X9
	043 Add X8, X8, X9
	044 Move W26, [X8+32]
	045 Move W2, [X31+12]
	046 Move W27, [X8+38]
	047 NotImplemented "Instruction LDRH not yet implemented."
	048 And W25, W26, 0xFFFF
	049 Subtract W8, W25, W2
	050 Add W3, W8, 1
	051 Move X0, X19
	052 Move X1, X21
	053 Call InputDevice.HasDataChangedInRange, X0, X1, X2, X3
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {116}
	058 NotImplemented "Instruction BFM not yet implemented."
	059 NotImplemented "Instruction BFM not yet implemented."
	060 Move X8, X26
	061 ShiftRight X8, 48
	062 And X8, X8, 0x7FFFFFFF
	063 Compare W8, 0
	064 JumpIfEqual {106}
	065 Move X9, X26
	066 ShiftRight X9, 32
	067 And X9, X9, 0x7FFFFFFF
	068 Add W28, W8, W9
	069 Move X20, X26
	070 ShiftRight X20, 32
	071 And X20, X20, 0x7FFF
	072 Move X8, [X22+360]
	073 Compare X8, 0
	074 JumpIfEqual {207}
	075 Move W9, [X8+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X9, [X22+336]
	078 Compare X9, 0
	079 JumpIfEqual {207}
	080 Add X8, X8, X20
	081 NotImplemented "Instruction LDRH not yet implemented."
	082 Move W10, [X9+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X0, [X23]
	085 Add X8, X9, X8
	086 Move X27, [X8+32]
	087 Move W9, [X0+224]
	088 Compare W9, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Move W8, [X22+20]
	092 Move X0, X27
	093 Move X3, X31
	094 Subtract X1, X19, X8
	095 Subtract X2, X21, X8
	096 Call InputControlExtensions.CompareState, X0, X1, X2, X3
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {104}
	101 Compare X27, 0
	102 JumpIfEqual {207}
	103 NotImplemented "Instruction STRH not yet implemented."
	104 Add X20, X20, 1
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction ORN not yet implemented."
	107 And X31, X8, 0xFFFFFFFF
	108 Move X28, 0xC65000
	109 Move W2, [X31+8]
	110 Move W5, [X31+12]
	111 Move X0, X22
	112 Move X1, X21
	113 Move X3, X19
	114 Move X4, X26
	115 Call InputDevice.WriteChangedControlStatesInternal, X0, X1, X2, X3, X4, X5
	116 Move X8, [X22+352]
	117 Compare X8, 0
	118 JumpIfEqual {207}
	119 Move W10, [X8+24]
	120 NotImplemented "Instruction SBFM not yet implemented."
	121 Add X9, X9, 1
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X10, X9
	124 ShiftRight X10, 61
	125 And X10, X10, 0xFFFFFFF
	126 Subtract X9, X10, X9
	127 Add X8, X8, X9
	128 Move W24, [X8+32]
	129 Move W26, [X8+38]
	130 NotImplemented "Instruction LDRH not yet implemented."
	131 Move W2, W25
	132 And W8, W24, 0xFFFF
	133 Subtract W8, W8, W25
	134 Add W3, W8, 1
	135 Move X0, X19
	136 Move X1, X21
	137 Move [X31+12], W25
	138 Call InputDevice.HasDataChangedInRange, X0, X1, X2, X3
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {193}
	143 NotImplemented "Instruction BFM not yet implemented."
	144 NotImplemented "Instruction BFM not yet implemented."
	145 Move X8, X24
	146 ShiftRight X8, 48
	147 And X8, X8, 0x7FFFFFFF
	148 Compare W8, 0
	149 JumpIfEqual {191}
	150 Move X9, X24
	151 ShiftRight X9, 32
	152 And X9, X9, 0x7FFFFFFF
	153 Add W25, W8, W9
	154 Move X20, X24
	155 ShiftRight X20, 32
	156 And X20, X20, 0x7FFF
	157 Move X8, [X22+360]
	158 Compare X8, 0
	159 JumpIfEqual {207}
	160 Move W9, [X8+24]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X9, [X22+336]
	163 Compare X9, 0
	164 JumpIfEqual {207}
	165 Add X8, X8, X20
	166 NotImplemented "Instruction LDRH not yet implemented."
	167 Move W10, [X9+24]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X0, [X23]
	170 Add X8, X9, X8
	171 Move X26, [X8+32]
	172 Move W9, [X0+224]
	173 Compare W9, 0
	174 JumpIfNotEqual {176}
	175 Call 0x1C17DFC
	176 Move W8, [X22+20]
	177 Move X0, X26
	178 Move X3, X31
	179 Subtract X1, X19, X8
	180 Subtract X2, X21, X8
	181 Call InputControlExtensions.CompareState, X0, X1, X2, X3
	182 Move TEMP, X0
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfEqual {189}
	186 Compare X26, 0
	187 JumpIfEqual {207}
	188 NotImplemented "Instruction STRH not yet implemented."
	189 Add X20, X20, 1
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction ORN not yet implemented."
	192 And X31, X8, 0xFFFFFFFF
	193 Move X20, [X31+96]
	194 Move X19, [X31+104]
	195 Move X22, [X31+80]
	196 Move X21, [X31+88]
	197 Move X24, [X31+64]
	198 Move X23, [X31+72]
	199 Move X26, [X31+48]
	200 Move X25, [X31+56]
	201 Move X28, [X31+32]
	202 Move X27, [X31+40]
	203 Move X29, [X31+16]
	204 Move X30, [X31+24]
	205 Add X31, X31, 112
	206 Return 
	207 Call 0x1C17F20
	208 Call 0x1C17F28

Method: System.Boolean HasDataChangedInRange(System.Byte* deviceStatePtr, System.Void* statePtr, System.UInt32 startOffset, System.UInt32 sizeInBits)

Disassembly:
	0x0377D218 ADRP X0, 0x9CA000
	0x0377D21C LDR X0, [X0 + 0x120]
	0x0377D220 BL 0x1C16CF4
	0x0377D224 ADRP X0, 0x9CA000
	0x0377D228 LDR X0, [X0 + 0x128]
	0x0377D22C BL 0x1C16CF4
	0x0377D230 ADRP X0, 0x9CA000
	0x0377D234 LDR X0, [X0 + 0x130]
	0x0377D238 BL 0x1C16CF4
	0x0377D23C ADRP X0, 0x987000
	0x0377D240 LDR X0, [X0 + 0x118]
	0x0377D244 BL 0x1C16CF4
	0x0377D248 ADRP X0, 0x9CA000
	0x0377D24C LDR X0, [X0 + 0x138]
	0x0377D250 BL 0x1C16CF4
	0x0377D254 ADRP X0, 0x9CA000
	0x0377D258 LDR X0, [X0 + 0x140]
	0x0377D25C BL 0x1C16CF4
	0x0377D260 ADRP X0, 0x987000
	0x0377D264 LDR X0, [X0 + 0x338]
	0x0377D268 BL 0x1C16CF4
	0x0377D26C ADRP X0, 0x9CA000
	0x0377D270 LDR X0, [X0 + 0x148]
	0x0377D274 BL 0x1C16CF4
	0x0377D278 ADRP X0, 0x987000
	0x0377D27C LDR X0, [X0 + 0x9A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W2
	006 Move X20, X1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W1, W19
	009 Move X2, X31
	010 Call MemoryHelpers.ReadSingleBit, X0, X1
	011 Move W21, W0
	012 Move X0, X20
	013 Move W1, W19
	014 Move X2, X31
	015 Call MemoryHelpers.ReadSingleBit, X0, X1
	016 Xor W8, W21, W0
	017 Move X1, X20
	018 Move W2, W19
	019 Move X4, X31
	020 Move X5, X31
	021 Call MemoryHelpers.MemCmpBitRegion, X0, X1, X2, X3, X4
	022 Xor W8, W0, 1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 And W0, W8, 1
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return X0

