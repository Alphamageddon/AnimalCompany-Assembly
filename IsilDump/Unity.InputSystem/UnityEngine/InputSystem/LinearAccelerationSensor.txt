Type: UnityEngine.InputSystem.LinearAccelerationSensor

Method: UnityEngine.InputSystem.Controls.Vector3Control get_acceleration()

Disassembly:
	0x037BFA48 RET
	0x037BFA4C LDR X0, [X0 + 0x1A8]

ISIL:
	001 Move X0, [X0+368]
	002 Return X0

Method: System.Void set_acceleration(UnityEngine.InputSystem.Controls.Vector3Control value)

Disassembly:
	0x037BFA50 RET
	0x037BFA54 SUB X31, X31, 0x40

ISIL:
	001 Move [X0+368], X1
	002 Return 

Method: UnityEngine.InputSystem.LinearAccelerationSensor get_current()

Disassembly:
	0x037BFA58 STR X30, [X31 + 0x10]
	0x037BFA5C STP X22, X21, [X31 + 0x20]
	0x037BFA60 STP X20, X19, [X31 + 0x30]
	0x037BFA64 ADRP X22, 0xC22000
	0x037BFA68 ADRP X21, 0x988000
	0x037BFA6C LDRB W8, [X22 + 0x1AD]
	0x037BFA70 LDR X21, [X21 + 0xFA0]
	0x037BFA74 MOV X20, X1
	0x037BFA78 MOV X19, X0
	0x037BFA7C TBNZ X8, 0x0, 0x37BFA94
	0x037BFA80 ADRP X0, 0x988000
	0x037BFA84 LDR X0, [X0 + 0xFA0]
	0x037BFA88 BL 0x1C16CF4
	0x037BFA8C MOVZ W8, 0x1
	0x037BFA90 STRB W8, [X22 + 0x1AD]
	0x037BFA94 LDR X2, [X21]
	0x037BFA98 ADD X0, X31, 0x0
	0x037BFA9C MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC23000
	005 Move X20, 0x989000
	006 Move W8, [X19+405]
	007 Move X20, [X20+3888]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x989000
	013 Move X0, [X0+3888]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+405], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_current(UnityEngine.InputSystem.LinearAccelerationSensor value)

Disassembly:
	0x037BFAA0 STP X31, X31, [X31]
	0x037BFAA4 BL 0x24FD80C
	0x037BFAA8 LDR V0, [X31]
	0x037BFAAC ADD X8, X19, 0x1A8
	0x037BFAB0 LDP X20, X19, [X31 + 0x30]
	0x037BFAB4 LDP X22, X21, [X31 + 0x20]
	0x037BFAB8 LDR X30, [X31 + 0x10]
	0x037BFABC STR V0, [X8]
	0x037BFAC0 ADD X31, X31, 0x40
	0x037BFAC4 RET
	0x037BFAC8 STR X30, [X31 - 0x20]!
	0x037BFACC STP X20, X19, [X31 + 0x10]
	0x037BFAD0 ADRP X19, 0xC22000
	0x037BFAD4 ADRP X20, 0x987000
	0x037BFAD8 LDRB W8, [X19 + 0x1AE]
	0x037BFADC LDR X20, [X20 + 0xD58]
	0x037BFAE0 TBNZ X8, 0x0, 0x37BFAF8
	0x037BFAE4 ADRP X0, 0x987000
	0x037BFAE8 LDR X0, [X0 + 0xD58]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC23000
	006 Move X21, 0x989000
	007 Move W8, [X20+406]
	008 Move X21, [X21+3888]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x989000
	015 Move X0, [X0+3888]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+406], W8
	019 Move X8, [X21]
	020 Move X8, [X8+184]
	021 Move [X8], X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 

Method: System.Void MakeCurrent()

Disassembly:
	0x037BFAEC BL 0x1C16CF4
	0x037BFAF0 MOVZ W8, 0x1
	0x037BFAF4 STRB W8, [X19 + 0x1AE]
	0x037BFAF8 LDR X8, [X20]
	0x037BFAFC LDP X20, X19, [X31 + 0x10]
	0x037BFB00 LDR X8, [X8 + 0xB8]
	0x037BFB04 LDR X0, [X8]
	0x037BFB08 LDR X30, [X31], #0x20
	0x037BFB0C RET
	0x037BFB10 STP X30, X21, [X31 - 0x20]!
	0x037BFB14 STP X20, X19, [X31 + 0x10]
	0x037BFB18 ADRP X20, 0xC22000
	0x037BFB1C ADRP X21, 0x987000
	0x037BFB20 LDRB W8, [X20 + 0x1AF]
	0x037BFB24 LDR X21, [X21 + 0xD58]
	0x037BFB28 MOV X19, X0
	0x037BFB2C TBNZ X8, 0x0, 0x37BFB44
	0x037BFB30 ADRP X0, 0x987000
	0x037BFB34 LDR X0, [X0 + 0xD58]
	0x037BFB38 BL 0x1C16CF4
	0x037BFB3C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call InputDevice.MakeCurrent, X0
	007 Move X20, 0xC23000
	008 Move W8, [X20+551]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x989000
	012 Move X0, [X0+3888]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+551], W8
	016 Move X8, 0x989000
	017 Move X8, [X8+3888]
	018 Move X8, [X8]
	019 Move X8, [X8+184]
	020 Move [X8], X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void OnRemoved()

Disassembly:
	0x037BFB40 STRB W8, [X20 + 0x1AF]
	0x037BFB44 LDR X8, [X21]
	0x037BFB48 LDR X8, [X8 + 0xB8]
	0x037BFB4C STR X19, [X8]
	0x037BFB50 LDP X20, X19, [X31 + 0x10]
	0x037BFB54 LDP X30, X21, [X31], #0x20
	0x037BFB58 RET
	0x037BFB5C STR X30, [X31 - 0x20]!
	0x037BFB60 STP X20, X19, [X31 + 0x10]
	0x037BFB64 MOV X1, X31
	0x037BFB68 MOV X19, X0
	0x037BFB6C BL 0x377E7B0
	0x037BFB70 ADRP X20, 0xC22000
	0x037BFB74 LDRB W8, [X20 + 0x237]
	0x037BFB78 CBNZ W8, 0x37BFB90
	0x037BFB7C ADRP X0, 0x987000
	0x037BFB80 LDR X0, [X0 + 0xD58]
	0x037BFB84 BL 0x1C16CF4
	0x037BFB88 MOVZ W8, 0x1
	0x037BFB8C STRB W8, [X20 + 0x237]
	0x037BFB90 ADRP X8, 0x987000
	0x037BFB94 LDR X8, [X8 + 0xD58]
	0x037BFB98 LDR X8, [X8]
	0x037BFB9C LDR X8, [X8 + 0xB8]
	0x037BFBA0 STR X19, [X8]
	0x037BFBA4 LDP X20, X19, [X31 + 0x10]
	0x037BFBA8 LDR X30, [X31], #0x20
	0x037BFBAC RET
	0x037BFBB0 STR X30, [X31 - 0x20]!
	0x037BFBB4 STP X20, X19, [X31 + 0x10]
	0x037BFBB8 MOV X1, X31
	0x037BFBBC MOV X19, X0
	0x037BFBC0 BL 0x377E8D8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call InputDevice.OnRemoved, X0
	007 Move X20, 0xC23000
	008 Move W8, [X20+552]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x989000
	012 Move X0, [X0+3888]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+552], W8
	016 Move X20, 0x989000
	017 Move X20, [X20+3888]
	018 Move X8, [X20]
	019 Move X8, [X8+184]
	020 Move X9, [X8]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X19, 0xC23000
	023 Move W9, [X19+551]
	024 Compare W9, 0
	025 JumpIfNotEqual {32}
	026 Move X0, X20
	027 Call 0x1C17CF4
	028 Move X8, [X20]
	029 Move W9, 1
	030 Move [X19+551], W9
	031 Move X8, [X8+184]
	032 Move [X8], X31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x037BFBC4 ADRP X20, 0xC22000
	0x037BFBC8 LDRB W8, [X20 + 0x238]
	0x037BFBCC CBNZ W8, 0x37BFBE4
	0x037BFBD0 ADRP X0, 0x987000
	0x037BFBD4 LDR X0, [X0 + 0xD58]
	0x037BFBD8 BL 0x1C16CF4
	0x037BFBDC MOVZ W8, 0x1
	0x037BFBE0 STRB W8, [X20 + 0x238]
	0x037BFBE4 ADRP X20, 0x987000
	0x037BFBE8 LDR X20, [X20 + 0xD58]
	0x037BFBEC LDR X8, [X20]
	0x037BFBF0 LDR X8, [X8 + 0xB8]
	0x037BFBF4 LDR X9, [X8]
	0x037BFBF8 CMP X9, X19
	0x037BFBFC B.NE 0x37BFC28
	0x037BFC00 ADRP X19, 0xC22000
	0x037BFC04 LDRB W9, [X19 + 0x237]
	0x037BFC08 CBNZ W9, 0x37BFC24
	0x037BFC0C MOV X0, X20
	0x037BFC10 BL 0x1C16CF4
	0x037BFC14 LDR X8, [X20]
	0x037BFC18 MOVZ W9, 0x1
	0x037BFC1C STRB W9, [X19 + 0x237]
	0x037BFC20 LDR X8, [X8 + 0xB8]
	0x037BFC24 STR X31, [X8]
	0x037BFC28 LDP X20, X19, [X31 + 0x10]
	0x037BFC2C LDR X30, [X31], #0x20
	0x037BFC30 RET
	0x037BFC34 SUB X31, X31, 0xB0
	0x037BFC38 STP X29, X30, [X31 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC23000
	007 Move X21, 0x989000
	008 Move X22, 0x986000
	009 Move W8, [X20+407]
	010 Move X21, [X21+3832]
	011 Move X22, [X22+3536]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x986000
	018 Move X0, [X0+3536]
	019 Call 0x1C17CF4
	020 Move X0, 0x989000
	021 Move X0, [X0+3832]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+407], W8
	025 Move X1, [X21]
	026 Move X2, [X22]
	027 Move X0, X19
	028 Call 0x21FD754, X0, X1
	029 Move [X19+368], X0
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+48]
	037 Call InputControl.FinishSetup, X0
	038 Return 

Method: System.Void .ctor()

Disassembly:
	0x037BFC3C STP X28, X27, [X31 + 0x60]
	0x037BFC40 STP X26, X25, [X31 + 0x70]

ISIL:
	001 Move X1, X31
	002 Call InputDevice..ctor, X0
	003 Return 

