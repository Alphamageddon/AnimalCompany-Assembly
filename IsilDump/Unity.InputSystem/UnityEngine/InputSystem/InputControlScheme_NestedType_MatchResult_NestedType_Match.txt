Type: UnityEngine.InputSystem.InputControlScheme/MatchResult/Match

Method: UnityEngine.InputSystem.InputControl get_control()

Disassembly:
	0x0376CC8C ADD X31, X31, 0x40
	0x0376CC90 RET
	0x0376CC94 BL 0x1C16F20
	0x0376CC98 ADRP X0, 0x98C000
	0x0376CC9C LDR X0, [X0 + 0x528]
	0x0376CCA0 BL 0x1C16D08
	0x0376CCA4 BL 0x1C16F10
	0x0376CCA8 MOV X19, X0
	0x0376CCAC ADRP X0, 0x98F000
	0x0376CCB0 LDR X0, [X0 + 0x5E8]
	0x0376CCB4 BL 0x1C16D08
	0x0376CCB8 MOV X1, X0
	0x0376CCBC MOV X0, X19
	0x0376CCC0 MOV X2, X31
	0x0376CCC4 BL 0x330E100
	0x0376CCC8 ADRP X0, 0x9DA000
	0x0376CCCC LDR X0, [X0 + 0x7E8]
	0x0376CCD0 BL 0x1C16D08
	0x0376CCD4 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC75000
	006 Move X20, 0x9DA000
	007 Move W8, [X21+3762]
	008 Move X20, [X20+1664]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9DA000
	015 Move X0, [X0+1664]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3762], W8
	019 Move W1, [X19+16]
	020 Move X2, [X20]
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call 0x2DFB48C, X0, X1
	027 Return X0

Method: UnityEngine.InputSystem.InputDevice get_device()

Disassembly:
	0x0376CCD8 MOV X0, X19
	0x0376CCDC BL 0x1C16DEC
	0x0376CCE0 SUB X31, X31, 0x40
	0x0376CCE4 STP X30, X23, [X31 + 0x10]
	0x0376CCE8 STP X22, X21, [X31 + 0x20]
	0x0376CCEC STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Call Match.get_control, X0
	003 Compare X0, 0
	004 JumpIfEqual {6}
	005 Move X0, [X0+120]
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Int32 get_requirementIndex()

Disassembly:
	0x0376CCF0 ADRP X23, 0xC74000
	0x0376CCF4 STP X2, X3, [X31]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: UnityEngine.InputSystem.InputControlScheme/DeviceRequirement get_requirement()

Disassembly:
	0x0376CCF8 ADRP X22, 0x9AF000
	0x0376CCFC LDRB W8, [X23 + 0xEC0]
	0x0376CD00 LDR X22, [X22 + 0x270]
	0x0376CD04 MOV X20, X2
	0x0376CD08 MOV X19, X1
	0x0376CD0C MOV X21, X0
	0x0376CD10 TBNZ X8, 0x0, 0x376CD40
	0x0376CD14 ADRP X0, 0x9AF000
	0x0376CD18 LDR X0, [X0 + 0x270]
	0x0376CD1C BL 0x1C16CF4
	0x0376CD20 ADRP X0, 0x9DA000
	0x0376CD24 LDR X0, [X0 + 0x7D8]
	0x0376CD28 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+8]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X8, X9
	009 Move X0, [X8+32]
	010 Move X1, [X8+40]
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20
	014 Call 0x1C17F28

Method: System.Boolean get_isOptional()

Disassembly:
	0x0376CD2C ADRP X0, 0x9DA000
	0x0376CD30 LDR X0, [X0 + 0x7E0]
	0x0376CD34 BL 0x1C16CF4
	0x0376CD38 MOVZ W8, 0x1
	0x0376CD3C STRB W8, [X23 + 0xEC0]

ISIL:
	001 Move [X31-16], X30
	002 Call Match.get_requirement, X0
	003 And W0, W1, 1
	004 Move X30, [X31+16]
	005 Return X0

