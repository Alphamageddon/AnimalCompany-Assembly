Type: UnityEngine.InputSystem.Layouts.InputControlLayoutAttribute

Method: System.Type get_stateType()

Disassembly:
	0x0381A828 MOV X19, X0
	0x0381A82C ADD X0, X31, 0x31C

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_stateType(System.Type value)

Disassembly:
	0x0381A830 MOV X1, X31
	0x0381A834 BL 0x337B6E0

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_stateFormat()

Disassembly:
	0x0381A838 MOV X1, X0
	0x0381A83C MOV X0, X19

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_stateFormat(System.String value)

Disassembly:
	0x0381A840 MOV X2, X31
	0x0381A844 BL 0x321B938

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String[] get_commonUsages()

Disassembly:
	0x0381A848 MOV X19, X0
	0x0381A84C LDR V0, [X20 + 0xA]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_commonUsages(System.String[] value)

Disassembly:
	0x0381A850 LDP X0, X8, [X31 + 0x60]
	0x0381A854 ADD X1, X31, 0x358

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_variants()

Disassembly:
	0x0381A858 MOVZ W2, 0x68
	0x0381A85C STR V0, [X8]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_variants(System.String value)

Disassembly:
	0x0381A860 BL 0x3EB1AC0
	0x0381A864 LDP V0, V1, [X20]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Boolean get_isNoisy()

Disassembly:
	0x0381A868 LDR V2, [X20 + 0x2]
	0x0381A86C LDP X5, X9, [X31 + 0x80]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_isNoisy(System.Boolean value)

Disassembly:
	0x0381A870 LDP X1, X8, [X31 + 0x70]
	0x0381A874 STP V0, V1, [X21]
	0x0381A878 STR V2, [X21 + 0x2]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.Boolean get_canRunInBackground()

Disassembly:
	0x0381A87C ADD X6, X31, 0x178
	0x0381A880 STP X9, X8, [X31 + 0x198]
	0x0381A884 LDR W8, [X31 + 0x94]
	0x0381A888 MOV X0, X26
	0x0381A88C MOV X2, X27
	0x0381A890 MOV X3, X23
	0x0381A894 MOV X4, X28
	0x0381A898 MOV W7, W29
	0x0381A89C STP X25, X24, [X31 + 0x178]
	0x0381A8A0 STR W8, [X31 + 0x210]
	0x0381A8A4 STR W22, [X31 + 0x214]
	0x0381A8A8 STR X19, [X31]
	0x0381A8AC BL 0x381B828
	0x0381A8B0 CBZ X0, 0x381AB04
	0x0381A8B4 ADRP X8, 0x901000
	0x0381A8B8 LDR X8, [X8 + 0xD18]
	0x0381A8BC MOV X19, X0
	0x0381A8C0 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBC8000
	006 Move X20, 0x8DE000
	007 Move W8, [X21+1295]
	008 Move X20, [X20+3064]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x8DE000
	015 Move X0, [X0+3064]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1295], W8
	019 Move X1, [X20]
	020 Add X0, X19, 49
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call Nullable`1<Boolean>.get_Value, X0
	026 Return X0

Method: System.Void set_canRunInBackground(System.Boolean value)

Disassembly:
	0x0381A8C4 LDR W8, [X0 + 0xE0]
	0x0381A8C8 CBNZ W8, 0x381A8D0
	0x0381A8CC BL 0x1C16DFC
	0x0381A8D0 LDR W24, [X19 + 0x14]
	0x0381A8D4 ADDS W31, W24, 0x1
	0x0381A8D8 B.EQ 0x381A91C
	0x0381A8DC ADRP X8, 0x901000
	0x0381A8E0 LDR X8, [X8 + 0xD18]
	0x0381A8E4 MOV X20, X26
	0x0381A8E8 LDR X0, [X8]
	0x0381A8EC LDR W8, [X0 + 0xE0]
	0x0381A8F0 CBNZ W8, 0x381A8FC
	0x0381A8F4 BL 0x1C16DFC
	0x0381A8F8 LDR W24, [X19 + 0x14]
	0x0381A8FC LDR W25, [X31 + 0x31C]
	0x0381A900 ADD X0, X19, 0x10
	0x0381A904 MOV X1, X31
	0x0381A908 BL 0x3800B6C
	0x0381A90C MADD W8, W0, W25, W24
	0x0381A910 MOV X26, X20
	0x0381A914 ADD X20, X31, 0x320
	0x0381A918 STR W8, [X19 + 0x14]
	0x0381A91C LDR W8, [X31 + 0x31C]
	0x0381A920 ADD W29, W29, 0x1
	0x0381A924 ADD W8, W8, 0x1
	0x0381A928 CMP W8, W22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBC8000
	007 Move X21, 0x8DE000
	008 Move W8, [X22+1296]
	009 Move X21, [X21+4056]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x8DE000
	017 Move X0, [X0+4056]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1296], W8
	021 Move X2, [X21]
	022 And W1, W20, 1
	023 Add X0, X31, 12
	024 NotImplemented "Instruction STRH not yet implemented."
	025 Call Nullable`1<Boolean>..ctor, X0, X1
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 NotImplemented "Instruction STURH not yet implemented."
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+48]
	033 Return 

Method: System.Boolean get_updateBeforeRender()

Disassembly:
	0x0381A92C STR W8, [X31 + 0x31C]
	0x0381A930 B.LT 0x381A814
	0x0381A934 B 0x381A9AC
	0x0381A938 LDR V0, [X20 + 0xA]
	0x0381A93C LDP X0, X8, [X31 + 0x30]
	0x0381A940 ADD X1, X31, 0x358
	0x0381A944 MOVZ W2, 0x68
	0x0381A948 STR V0, [X8]
	0x0381A94C BL 0x3EB1AC0
	0x0381A950 LDP V0, V1, [X20]
	0x0381A954 LDR V2, [X20 + 0x2]
	0x0381A958 LDR X8, [X31 + 0x28]
	0x0381A95C LDR X9, [X31 + 0x98]
	0x0381A960 LDR X1, [X31 + 0x70]
	0x0381A964 LDR X5, [X31 + 0x80]
	0x0381A968 STP V0, V1, [X8]
	0x0381A96C STR V2, [X8 + 0x2]
	0x0381A970 LDR X8, [X31 + 0xA0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBC8000
	006 Move X20, 0x8DE000
	007 Move W8, [X21+1297]
	008 Move X20, [X20+3064]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x8DE000
	015 Move X0, [X0+3064]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1297], W8
	019 Move X1, [X20]
	020 Add X0, X19, 51
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call Nullable`1<Boolean>.get_Value, X0
	026 Return X0

Method: System.Void set_updateBeforeRender(System.Boolean value)

Disassembly:
	0x0381A974 ADD X6, X31, 0xA8
	0x0381A978 MOV X0, X26
	0x0381A97C MOV X2, X27
	0x0381A980 STP X9, X8, [X31 + 0xA8]
	0x0381A984 LDR W8, [X31 + 0x94]
	0x0381A988 MOV X3, X23
	0x0381A98C MOV X4, X28
	0x0381A990 MOV W7, W29
	0x0381A994 STP X25, X24, [X31 + 0xC8]
	0x0381A998 STR W8, [X31 + 0x140]
	0x0381A99C STR W31, [X31 + 0x144]
	0x0381A9A0 STR X31, [X31]
	0x0381A9A4 BL 0x381B828
	0x0381A9A8 ADD W29, W29, 0x1
	0x0381A9AC LDP X11, X8, [X31 + 0x48]
	0x0381A9B0 LDR W8, [X8 + 0x18]
	0x0381A9B4 ADD X11, X11, 0x1
	0x0381A9B8 CMP X11, W8, SXTW
	0x0381A9BC B.LT 0x381A71C
	0x0381A9C0 ADRP X29, 0x8E2000
	0x0381A9C4 LDR X29, [X29 + 0x848]
	0x0381A9C8 CBZ X28, 0x381AB04
	0x0381A9CC LDR W10, [X31 + 0x44]
	0x0381A9D0 CMP W8, 0x1
	0x0381A9D4 CSET W9, LT
	0x0381A9D8 LDR W11, [X31 + 0x5C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBC8000
	007 Move X21, 0x8DE000
	008 Move W8, [X22+1298]
	009 Move X21, [X21+4056]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x8DE000
	017 Move X0, [X0+4056]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1298], W8
	021 Move X2, [X21]
	022 And W1, W20, 1
	023 Add X0, X31, 12
	024 NotImplemented "Instruction STRH not yet implemented."
	025 Call Nullable`1<Boolean>..ctor, X0, X1
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 NotImplemented "Instruction STURH not yet implemented."
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+48]
	033 Return 

Method: System.Boolean get_isGenericTypeOfDevice()

Disassembly:
	0x0381A9DC ORN W9, W9, W10, 0x0
	0x0381A9E0 LDR W10, [X31 + 0x24]

ISIL:
	001 Move W0, [X0+53]
	002 Return X0

Method: System.Void set_isGenericTypeOfDevice(System.Boolean value)

Disassembly:
	0x0381A9E4 LDR X24, [X31 + 0x50]
	0x0381A9E8 STP W11, W10, [X28 + 0x98]
	0x0381A9EC TBNZ X9, 0x0, 0x381AAE0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+53], W8
	003 Return 

Method: System.String get_displayName()

Disassembly:
	0x0381A9F0 MOV X21, X31
	0x0381A9F4 ADD X22, X24, 0x48

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_displayName(System.String value)

Disassembly:
	0x0381A9F8 CMP X21, W8, UXTW
	0x0381A9FC B.CS 0x381AB00

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_description()

Disassembly:
	0x0381AA00 SUB X1, X22, 0x28
	0x0381AA04 ADD X0, X31, 0x248

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_description(System.String value)

Disassembly:
	0x0381AA08 MOVZ W2, 0xD0
	0x0381AA0C BL 0x3EB1AC0

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Boolean get_hideInUI()

Disassembly:
	0x0381AA10 LDRB W8, [X31 + 0x2E0]
	0x0381AA14 TBZ X8, 0x0, 0x381AAB8

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_hideInUI(System.Boolean value)

Disassembly:
	0x0381AA18 ADD X8, X31, 0x169
	0x0381AA1C LDUR V0, [X8 + 0xFF]
	0x0381AA20 ADD X0, X31, 0x3D0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+72], W8
	003 Return 

Method: System.Void .ctor()

Disassembly:
	0x0381AA24 MOV X1, X31
	0x0381AA28 STR V0, [X20 + 0xB]

ISIL:
	001 Move X1, X31
	002 Call Attribute..ctor, X0
	003 Return 

