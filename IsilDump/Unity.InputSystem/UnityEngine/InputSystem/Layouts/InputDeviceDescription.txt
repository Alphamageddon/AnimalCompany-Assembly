Type: UnityEngine.InputSystem.Layouts.InputDeviceDescription

Method: System.String get_interfaceName()

Disassembly:
	0x0381EABC CSEL X10, X10, X12, EQ
	0x0381EAC0 MOVZ W12, 0xB0B3

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_interfaceName(System.String value)

Disassembly:
	0x0381EAC4 MOVK W11, 0xFE310000
	0x0381EAC8 MOVK W12, 0xE1330000

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.String get_deviceClass()

Disassembly:
	0x0381EACC ANDS X31, X0, 0x1FFFFFFFF
	0x0381EAD0 CSEL W11, W12, W11, EQ

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: System.Void set_deviceClass(System.String value)

Disassembly:
	0x0381EAD4 MOVZ X12, 0xD63F
	0x0381EAD8 ORR X10, X8, X10, 0x0

ISIL:
	001 Move [X0+8], X1
	002 Return 

Method: System.String get_manufacturer()

Disassembly:
	0x0381EADC ADD W8, W8, W11
	0x0381EAE0 MOVZ X11, 0xCA39

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_manufacturer(System.String value)

Disassembly:
	0x0381EAE4 MOVK X12, 0x565E0000
	0x0381EAE8 MOVK X11, 0x49420000

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_product()

Disassembly:
	0x0381EAEC AND X9, X9, 0xFFFFFFFFFFFFFFFF
	0x0381EAF0 ANDS X31, X0, 0x1FFFFFFFFFFFFFF

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_product(System.String value)

Disassembly:
	0x0381EAF4 ADD X9, X10, X9
	0x0381EAF8 MOVZ W10, 0xC62D

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_serial()

Disassembly:
	0x0381EAFC CSEL X11, X11, X12, EQ
	0x0381EB00 MOVZ W12, 0xA59B

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_serial(System.String value)

Disassembly:
	0x0381EB04 MOVK W10, 0xB40E0000
	0x0381EB08 MOVK W12, 0x9D770000

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_version()

Disassembly:
	0x0381EB0C ANDS X31, X0, 0x1FFFFFFFFFFFF
	0x0381EB10 AND X9, X9, 0x0

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_version(System.String value)

Disassembly:
	0x0381EB14 CSEL W10, W12, W10, EQ
	0x0381EB18 ADD X9, X11, X9

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_capabilities()

Disassembly:
	0x0381EB1C ADD W8, W8, W10
	0x0381EB20 UBFM X9, X9, 0x20, 0x3F

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_capabilities(System.String value)

Disassembly:
	0x0381EB24 ADD W0, W9, W8
	0x0381EB28 RET

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean get_empty()

Disassembly:
	0x0381EB2C MOVZ W8, 0xB01
	0x0381EB30 MOVZ W9, 0xC2B
	0x0381EB34 ANDS X31, X0, 0x1
	0x0381EB38 MOVK W8, 0x6E050000
	0x0381EB3C MOVK W9, 0x93C30000
	0x0381EB40 MOVZ X10, 0xDBF5
	0x0381EB44 MOVZ X11, 0x351
	0x0381EB48 MOVK X10, 0x750F0000
	0x0381EB4C MOVK X11, 0xDCAF0000
	0x0381EB50 MOVZ X12, 0xE729
	0x0381EB54 CSEL X8, X9, X8, EQ
	0x0381EB58 MOVZ X9, 0xAEBB
	0x0381EB5C ANDS X31, X0, 0x1FF
	0x0381EB60 MOVK X12, 0x83B50000
	0x0381EB64 MOVK X9, 0x52EA0000
	0x0381EB68 CSEL X10, X11, X10, EQ
	0x0381EB6C ANDS X31, X0, 0x1FFFFFF
	0x0381EB70 MOVZ W11, 0xC793
	0x0381EB74 CSEL X9, X9, X12, EQ
	0x0381EB78 MOVZ W12, 0xD499
	0x0381EB7C MOVK W11, 0x45990000
	0x0381EB80 MOVK W12, 0x7F3D0000
	0x0381EB84 ANDS X31, X0, 0x1FFFF
	0x0381EB88 ORR X10, X10, X8, 0x0
	0x0381EB8C CSEL X11, X12, X11, EQ
	0x0381EB90 MOVZ X12, 0x7D6D
	0x0381EB94 ADD X9, X10, X9
	0x0381EB98 MOVZ X10, 0x9149
	0x0381EB9C MOVK X12, 0x822A0000
	0x0381EBA0 MOVK X10, 0x67BC0000
	0x0381EBA4 ANDS X31, X0, 0x1FFFFFFFFFF
	0x0381EBA8 ADD X8, X11, X8
	0x0381EBAC MOVZ W11, 0x5EC1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0]
	005 Move X1, X31
	006 Call String.IsNullOrEmpty, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {52}
	011 Move X0, [X19+8]
	012 Move X1, X31
	013 Call String.IsNullOrEmpty, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {52}
	018 Move X0, [X19+16]
	019 Move X1, X31
	020 Call String.IsNullOrEmpty, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {52}
	025 Move X0, [X19+24]
	026 Move X1, X31
	027 Call String.IsNullOrEmpty, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {52}
	032 Move X0, [X19+32]
	033 Move X1, X31
	034 Call String.IsNullOrEmpty, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {52}
	039 Move X0, [X19+40]
	040 Move X1, X31
	041 Call String.IsNullOrEmpty, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {52}
	046 Move X0, [X19+48]
	047 Move X1, X31
	048 Move X30, [X31+16]
	049 Move X19, [X31+24]
	050 Call String.IsNullOrEmpty, X0
	051 Return X0
	052 Move W0, W31
	053 Move X30, [X31+16]
	054 Move X19, [X31+24]
	055 Return X0

Method: System.String ToString()

Disassembly:
	0x0381EBB0 CSEL X10, X10, X12, EQ
	0x0381EBB4 MOVZ W12, 0x163F
	0x0381EBB8 MOVK W11, 0xAD7C0000
	0x0381EBBC MOVK W12, 0xC2670000
	0x0381EBC0 ANDS X31, X0, 0x1FFFFFFFF
	0x0381EBC4 CSEL W11, W12, W11, EQ
	0x0381EBC8 MOVZ X12, 0xC89D
	0x0381EBCC ORR X10, X8, X10, 0x0
	0x0381EBD0 ADD W8, W8, W11
	0x0381EBD4 MOVZ X11, 0x20E3
	0x0381EBD8 MOVK X12, 0xE16B0000
	0x0381EBDC MOVK X11, 0xD3720000
	0x0381EBE0 AND X9, X9, 0xFFFFFFFFFFFFFFFF
	0x0381EBE4 ANDS X31, X0, 0x1FFFFFFFFFFFFFF
	0x0381EBE8 ADD X9, X10, X9
	0x0381EBEC MOVZ W10, 0xC2BD
	0x0381EBF0 CSEL X11, X11, X12, EQ
	0x0381EBF4 MOVZ W12, 0xBF15
	0x0381EBF8 MOVK W10, 0x7AA20000
	0x0381EBFC MOVK W12, 0xB4920000
	0x0381EC00 ANDS X31, X0, 0x1FFFFFFFFFFFF
	0x0381EC04 AND X9, X9, 0x0
	0x0381EC08 CSEL W10, W12, W10, EQ
	0x0381EC0C ADD W8, W8, W10
	0x0381EC10 ADD X9, X11, X9
	0x0381EC14 ORR X0, X9, X8, 0x0
	0x0381EC18 RET
	0x0381EC1C ANDS W31, W2, 0x1
	0x0381EC20 MOVZ W8, 0x10000
	0x0381EC24 CSEL X8, X8, X31, NE
	0x0381EC28 ANDS W31, W1, 0x1
	0x0381EC2C MOVZ W9, 0x100
	0x0381EC30 CSEL X9, X9, X31, NE
	0x0381EC34 BFM X9, X0, 0x0, 0x0
	0x0381EC38 ORR X0, X9, X8, 0x0
	0x0381EC3C RET
	0x0381EC40 UBFM X8, X1, 0x8, 0x3F
	0x0381EC44 AND X0, X0, 0x1
	0x0381EC48 BFM X0, X1, 0x38, 0x0
	0x0381EC4C BFM X0, X8, 0x30, 0x0
	0x0381EC50 RET
	0x0381EC54 ANDS W31, W1, 0x1
	0x0381EC58 MOVZ W8, 0x10000
	0x0381EC5C MOVZ W9, 0x101
	0x0381EC60 CSEL X8, X8, X31, NE
	0x0381EC64 AND X9, X0, X9, 0x0
	0x0381EC68 ORR X0, X9, X8, 0x0
	0x0381EC6C RET
	0x0381EC70 MOVZ W8, 0x101
	0x0381EC74 MOVK W8, 0x10000
	0x0381EC78 AND X0, X0, X8, 0x0
	0x0381EC7C RET
	0x0381EC80 MOVZ W8, 0x100
	0x0381EC84 ANDS W31, W0, 0x1
	0x0381EC88 MOVK W8, 0x10000
	0x0381EC8C CSEL X8, X8, X31, NE
	0x0381EC90 BFM X8, X0, 0x0, 0x0
	0x0381EC94 MOV X0, X8
	0x0381EC98 RET
	0x0381EC9C MOVZ W8, 0x6615
	0x0381ECA0 MOVZ W9, 0x2D39
	0x0381ECA4 ANDS X31, X0, 0x1
	0x0381ECA8 MOVK W8, 0xAF810000
	0x0381ECAC MOVK W9, 0xA1E90000
	0x0381ECB0 MOVZ W10, 0xD62D
	0x0381ECB4 CSEL W8, W9, W8, EQ
	0x0381ECB8 MOVZ W9, 0xC801
	0x0381ECBC MOVK W10, 0x9AF80000
	0x0381ECC0 MOVK W9, 0x45830000
	0x0381ECC4 ANDS X31, X0, 0x1FF
	0x0381ECC8 CSEL W9, W9, W10, EQ
	0x0381ECCC MOVZ W10, 0x729
	0x0381ECD0 MOVZ W11, 0xA0F5
	0x0381ECD4 MOVK W10, 0xE3600000
	0x0381ECD8 ANDS X31, X0, 0x1FFFF
	0x0381ECDC MOVK W11, 0x95360000
	0x0381ECE0 CSEL W10, W11, W10, EQ
	0x0381ECE4 ADD W8, W9, W8
	0x0381ECE8 ADD W0, W8, W10
	0x0381ECEC RET
	0x0381ECF0 MOVZ W8, 0x1389
	0x0381ECF4 MOVZ W9, 0x300D
	0x0381ECF8 ANDS X31, X0, 0x1
	0x0381ECFC MOVK W8, 0xAE130000
	0x0381ED00 MOVK W9, 0x5F170000
	0x0381ED04 MOVZ X10, 0x165B
	0x0381ED08 CSEL X8, X9, X8, EQ
	0x0381ED0C MOVZ X9, 0x6809
	0x0381ED10 MOVK X10, 0x5D1B0000
	0x0381ED14 MOVK X9, 0x670D0000
	0x0381ED18 ANDS X31, X0, 0x1FF
	0x0381ED1C CSEL X9, X9, X10, EQ
	0x0381ED20 MOVZ W10, 0x6CD7
	0x0381ED24 MOVZ W11, 0x2C49
	0x0381ED28 MOVK W10, 0x87090000
	0x0381ED2C ANDS X31, X0, 0x1FFFF
	0x0381ED30 MOVK W11, 0x7AF30000
	0x0381ED34 CSEL X1, X11, X10, EQ
	0x0381ED38 ORR X0, X9, X8, 0x0
	0x0381ED3C RET
	0x0381ED40 AND X0, X0, 0xFFFFFF
	0x0381ED44 AND X1, X1, 0xFFFFFF
	0x0381ED48 MOV X3, X31
	0x0381ED4C B 0x384A7C8
	0x0381ED50 STR X30, [X31 - 0x30]!
	0x0381ED54 STP X22, X21, [X31 + 0x10]
	0x0381ED58 STP X20, X19, [X31 + 0x20]
	0x0381ED5C AND X20, X0, 0xFFFFFF
	0x0381ED60 AND X21, X1, 0xFFFFFF
	0x0381ED64 MOV W19, W3
	0x0381ED68 MOV X0, X20
	0x0381ED6C MOV X1, X21
	0x0381ED70 MOV X3, X31
	0x0381ED74 BL 0x384A7C8
	0x0381ED78 MOV W22, W0
	0x0381ED7C MOV X0, X20
	0x0381ED80 MOV X1, X21
	0x0381ED84 MOV W2, W19
	0x0381ED88 MOV X3, X31
	0x0381ED8C BL 0x384A7C8
	0x0381ED90 ANDS W31, W0, 0x1
	0x0381ED94 MOVZ W8, 0x100
	0x0381ED98 CSEL X0, X8, X31, NE
	0x0381ED9C BFM X0, X22, 0x0, 0x0
	0x0381EDA0 LDP X20, X19, [X31 + 0x20]
	0x0381EDA4 LDP X22, X21, [X31 + 0x10]
	0x0381EDA8 LDR X30, [X31], #0x30
	0x0381EDAC RET
	0x0381EDB0 STP X30, X23, [X31 - 0x30]!
	0x0381EDB4 STP X22, X21, [X31 + 0x10]
	0x0381EDB8 STP X20, X19, [X31 + 0x20]
	0x0381EDBC AND X21, X0, 0xFFFFFF
	0x0381EDC0 AND X22, X1, 0xFFFFFF
	0x0381EDC4 MOV W20, W3
	0x0381EDC8 MOV X0, X21
	0x0381EDCC MOV X1, X22
	0x0381EDD0 MOV X3, X31
	0x0381EDD4 MOV W19, W4
	0x0381EDD8 BL 0x384A7C8
	0x0381EDDC MOV W23, W0
	0x0381EDE0 MOV X0, X21
	0x0381EDE4 MOV X1, X22
	0x0381EDE8 MOV W2, W20
	0x0381EDEC MOV X3, X31
	0x0381EDF0 BL 0x384A7C8
	0x0381EDF4 MOV W20, W0
	0x0381EDF8 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBC4000
	007 Move W8, [X20+1322]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0x8D6000
	014 Move X0, [X0+2760]
	015 Call 0x1C17CF4
	016 Move X0, 0x8D6000
	017 Move X0, [X0+3544]
	018 Call 0x1C17CF4
	019 Move X0, 0x92D000
	020 Move X0, [X0+3200]
	021 Call 0x1C17CF4
	022 Move X0, 0x8D7000
	023 Move X0, [X0+1544]
	024 Call 0x1C17CF4
	025 Move X0, 0x8D7000
	026 Move X0, [X0+1552]
	027 Call 0x1C17CF4
	028 Move X0, 0x901000
	029 Move X0, [X0+1528]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+1322], W8
	033 Move X0, [X19+24]
	034 Move X1, X31
	035 Call String.IsNullOrEmpty, X0
	036 Move X8, [X19+16]
	037 Move W21, W0
	038 Move X1, X31
	039 Move X0, X8
	040 Call String.IsNullOrEmpty, X0
	041 Move X8, [X19]
	042 Move W22, W0
	043 Move X1, X31
	044 Move X0, X8
	045 Call String.IsNullOrEmpty, X0
	046 Move W20, W0
	047 Move TEMP, X21
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {72}
	051 Move TEMP, X22
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {72}
	055 Move TEMP, X20
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {97}
	059 Move X8, 0x8D6000
	060 Move X0, [X19+16]
	061 Move X2, [X19+24]
	062 Move X8, [X8+3544]
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X3, X31
	068 Move X1, [X8]
	069 Move X30, [X31+48]
	070 Call String.Concat, X0, X1, X2
	071 Return X0
	072 Move TEMP, X21
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {138}
	076 Move X0, [X19+8]
	077 Move X1, X31
	078 Call String.IsNullOrEmpty, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {139}
	083 Move X0, [X19+48]
	084 Move X1, X31
	085 Call String.IsNullOrEmpty, X0
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {165}
	090 Move TEMP, X20
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {179}
	094 Move X8, 0x92D000
	095 Move X8, [X8+3200]
	096 Move X0, [X8]
	097 Move X8, 0x8D6000
	098 Move X8, [X8+2760]
	099 Move W1, 6
	100 Move X0, [X8]
	101 Call 0x1C17D6C
	102 Compare X0, 0
	103 JumpIfEqual {181}
	104 Move W8, [X0+24]
	105 Compare W8, 0
	106 JumpIfEqual {180}
	107 Move X9, [X19+16]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move [X0+32], X9
	110 Move X9, 0x8D6000
	111 Move X9, [X9+3544]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X9, [X9]
	114 Move [X0+40], X9
	115 Move X9, [X19+24]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move [X0+48], X9
	118 Move X9, 0x8D7000
	119 Move X9, [X9+1552]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X9, [X9]
	122 Move [X0+56], X9
	123 Move X9, [X19]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move [X0+64], X9
	126 Move X8, 0x8D7000
	127 Move X8, [X8+1544]
	128 Move X20, [X31+32]
	129 Move X19, [X31+40]
	130 Move X22, [X31+16]
	131 Move X21, [X31+24]
	132 Move X1, X31
	133 Move X8, [X8]
	134 Move [X0+72], X8
	135 Move X30, [X31+48]
	136 Call String.Concat, X0
	137 Return X0
	138 Move X0, [X19+24]
	139 Move X0, [X19+8]
	140 Move TEMP, X20
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {150}
	144 Move X20, [X31+32]
	145 Move X19, [X31+40]
	146 Move X22, [X31+16]
	147 Move X21, [X31+24]
	148 Move X30, [X31+48]
	149 Return X0
	150 Move X8, 0x8D7000
	151 Move X9, 0x8D7000
	152 Move X2, [X19]
	153 Move X8, [X8+1552]
	154 Move X9, [X9+1544]
	155 Move X20, [X31+32]
	156 Move X19, [X31+40]
	157 Move X22, [X31+16]
	158 Move X21, [X31+24]
	159 Move X1, [X8]
	160 Move X3, [X9]
	161 Move X4, X31
	162 Move X30, [X31+48]
	163 Call String.Concat, X0, X1, X2, X3
	164 Return X0
	165 Move X0, [X19+48]
	166 Compare X0, 0
	167 JumpIfEqual {181}
	168 Move W8, [X0+16]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move W2, 40
	171 Move W1, W31
	172 Move X3, X31
	173 Call String.Substring, X0, X1, X2
	174 Move X8, 0x901000
	175 Move X8, [X8+1528]
	176 Move X2, X31
	177 Move X1, [X8]
	178 Call String.Concat, X0, X1
	179 Move X0, [X19]
	180 Call 0x1C17F28
	181 Call 0x1C17F20

Method: System.Boolean Equals(UnityEngine.InputSystem.Layouts.InputDeviceDescription other)

Disassembly:
	0x0381EDFC MOV X1, X22
	0x0381EE00 MOV W2, W19
	0x0381EE04 MOV X3, X31
	0x0381EE08 BL 0x384A7C8
	0x0381EE0C ANDS W31, W0, 0x1
	0x0381EE10 MOVZ W8, 0x10000
	0x0381EE14 CSEL X8, X8, X31, NE
	0x0381EE18 ANDS W31, W20, 0x1
	0x0381EE1C MOVZ W9, 0x100
	0x0381EE20 LDP X20, X19, [X31 + 0x20]
	0x0381EE24 LDP X22, X21, [X31 + 0x10]
	0x0381EE28 CSEL X9, X9, X31, NE
	0x0381EE2C BFM X9, X23, 0x0, 0x0
	0x0381EE30 ORR X0, X9, X8, 0x0
	0x0381EE34 LDP X30, X23, [X31], #0x30
	0x0381EE38 RET
	0x0381EE3C STR X30, [X31 - 0x40]!
	0x0381EE40 STP X24, X23, [X31 + 0x10]
	0x0381EE44 STP X22, X21, [X31 + 0x20]
	0x0381EE48 STP X20, X19, [X31 + 0x30]
	0x0381EE4C AND X22, X0, 0xFFFFFF
	0x0381EE50 AND X23, X1, 0xFFFFFF
	0x0381EE54 MOV W21, W3
	0x0381EE58 MOV X0, X22
	0x0381EE5C MOV X1, X23
	0x0381EE60 MOV X3, X31
	0x0381EE64 MOV W19, W5
	0x0381EE68 MOV W20, W4
	0x0381EE6C BL 0x384A7C8
	0x0381EE70 MOV W24, W0
	0x0381EE74 MOV X0, X22
	0x0381EE78 MOV X1, X23
	0x0381EE7C MOV W2, W21
	0x0381EE80 MOV X3, X31
	0x0381EE84 BL 0x384A7C8
	0x0381EE88 MOV W21, W0
	0x0381EE8C MOV X0, X22
	0x0381EE90 MOV X1, X23
	0x0381EE94 MOV W2, W20
	0x0381EE98 MOV X3, X31
	0x0381EE9C BL 0x384A7C8
	0x0381EEA0 MOV W20, W0
	0x0381EEA4 MOV X0, X22
	0x0381EEA8 MOV X1, X23

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Move X0, [X0]
	007 Move X1, [X1]
	008 Move X2, X31
	009 Call StringHelpers.InvariantEqualsIgnoreCase, X0, X1
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {62}
	014 Move X0, [X20+8]
	015 Move X1, [X19+8]
	016 Move X2, X31
	017 Call StringHelpers.InvariantEqualsIgnoreCase, X0, X1
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {62}
	022 Move X0, [X20+16]
	023 Move X1, [X19+16]
	024 Move X2, X31
	025 Call StringHelpers.InvariantEqualsIgnoreCase, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {62}
	030 Move X0, [X20+24]
	031 Move X1, [X19+24]
	032 Move X2, X31
	033 Call StringHelpers.InvariantEqualsIgnoreCase, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {62}
	038 Move X0, [X20+32]
	039 Move X1, [X19+32]
	040 Move X2, X31
	041 Call StringHelpers.InvariantEqualsIgnoreCase, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {62}
	046 Move X0, [X20+40]
	047 Move X1, [X19+40]
	048 Move X2, X31
	049 Call StringHelpers.InvariantEqualsIgnoreCase, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {62}
	054 Move X0, [X20+48]
	055 Move X1, [X19+48]
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X2, X31
	059 Move X30, [X31+32]
	060 Call StringHelpers.InvariantEqualsIgnoreCase, X0, X1
	061 Return X0
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move W0, W31
	065 Move X30, [X31+32]
	066 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0381EEAC MOV W2, W19
	0x0381EEB0 MOV X3, X31
	0x0381EEB4 BL 0x384A7C8
	0x0381EEB8 ANDS W31, W0, 0x1
	0x0381EEBC MOVZ W8, 0x1000000
	0x0381EEC0 MOVZ W9, 0x10000
	0x0381EEC4 CSEL X8, X8, X31, NE
	0x0381EEC8 ANDS W31, W20, 0x1
	0x0381EECC CSEL X9, X9, X31, NE
	0x0381EED0 ANDS W31, W21, 0x1
	0x0381EED4 MOVZ W10, 0x100
	0x0381EED8 CSEL X10, X10, X31, NE
	0x0381EEDC BFM X10, X24, 0x0, 0x0
	0x0381EEE0 LDP X20, X19, [X31 + 0x30]
	0x0381EEE4 LDP X22, X21, [X31 + 0x20]
	0x0381EEE8 LDP X24, X23, [X31 + 0x10]
	0x0381EEEC ORR X9, X10, X9, 0x0
	0x0381EEF0 ORR X0, X9, X8, 0x0
	0x0381EEF4 LDR X30, [X31], #0x40
	0x0381EEF8 RET
	0x0381EEFC AND W8, W2, 0xFF
	0x0381EF00 CMP W8, 0x6
	0x0381EF04 B.HI 0x381EF5C
	0x0381EF08 ADRP X9, 0xFFFFFFFFFD379000
	0x0381EF0C AND X8, X2, 0xFF
	0x0381EF10 ADD X9, X9, 0x9D6
	0x0381EF14 ADR X10, 0x10
	0x0381EF18 LDRB W11, [X9, X8, LSL]
	0x0381EF1C ADD X10, X10, X11, 0x2, LSL
	0x0381EF20 BR X10
	0x0381EF24 AND X8, X0, 0x1
	0x0381EF28 B 0x381EF50
	0x0381EF2C AND X8, X0, 0x1FF
	0x0381EF30 B 0x381EF50
	0x0381EF34 AND X8, X0, 0x1FFFF
	0x0381EF38 B 0x381EF50
	0x0381EF3C AND X8, X1, 0x1
	0x0381EF40 B 0x381EF50

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0xBC4000
	007 Move W8, [X21+1323]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x901000
	015 Move X0, [X0+1264]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1323], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x901000
	022 Move X8, [X8+1264]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X8, [X0+48]
	030 Move V2, [X0+16]
	031 Move V0, [X0+32]
	032 Move V1, [X0]
	033 Add X1, X31, 0
	034 Move X0, X19
	035 Move [X31+48], X8
	036 Move [X31+16], V2
	037 Move [X31+24], V0
	038 Move [X31], V1
	039 Call InputDeviceDescription.Equals, X0, X1
	040 Move X20, [X31+80]
	041 Move X19, [X31+88]
	042 Move X30, [X31+64]
	043 Move X21, [X31+72]
	044 And W0, W0, 1
	045 Add X31, X31, 96
	046 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0381EF44 AND X8, X1, 0x1FF
	0x0381EF48 B 0x381EF50
	0x0381EF4C AND X8, X1, 0x1FFFF
	0x0381EF50 CMP X8, 0x0
	0x0381EF54 CSET W0, NE
	0x0381EF58 RET
	0x0381EF5C SUB X31, X31, 0x40
	0x0381EF60 STR X30, [X31 + 0x20]
	0x0381EF64 STP X20, X19, [X31 + 0x30]
	0x0381EF68 ADRP X0, 0x92C000
	0x0381EF6C LDR X0, [X0 + 0xCA0]
	0x0381EF70 MOV X19, X2
	0x0381EF74 BL 0x1C16D08
	0x0381EF78 MOVN X8, 0x0
	0x0381EF7C STP X0, X8, [X31 + 0x8]
	0x0381EF80 ADD X0, X31, 0x8
	0x0381EF84 MOV X1, X31
	0x0381EF88 STRB W19, [X31 + 0x18]
	0x0381EF8C BL 0x33B162C
	0x0381EF90 MOV X19, X0
	0x0381EF94 ADRP X0, 0x92C000
	0x0381EF98 LDR X0, [X0 + 0xCA8]
	0x0381EF9C BL 0x1C16D08
	0x0381EFA0 MOV X1, X19
	0x0381EFA4 MOV X2, X31
	0x0381EFA8 BL 0x321B938
	0x0381EFAC MOV X19, X0
	0x0381EFB0 ADRP X0, 0x8DD000
	0x0381EFB4 LDR X0, [X0 + 0x578]
	0x0381EFB8 BL 0x1C16D08
	0x0381EFBC BL 0x1C16F10
	0x0381EFC0 MOV X1, X19
	0x0381EFC4 MOV X2, X31
	0x0381EFC8 MOV X20, X0
	0x0381EFCC BL 0x3314A68
	0x0381EFD0 ADRP X0, 0x92C000
	0x0381EFD4 LDR X0, [X0 + 0xCB8]
	0x0381EFD8 BL 0x1C16D08
	0x0381EFDC MOV X1, X0
	0x0381EFE0 MOV X0, X20
	0x0381EFE4 BL 0x1C16DEC
	0x0381EFE8 AND X0, X0, 0xFFFFFF
	0x0381EFEC BFM X0, X1, 0x28, 0x17
	0x0381EFF0 RET
	0x0381EFF4 ANDS W31, W5, 0x1
	0x0381EFF8 MOVZ X8, 0x100
	0x0381EFFC CSEL X8, X8, X31, NE
	0x0381F000 ANDS W31, W3, 0x1
	0x0381F004 MOVZ X9, 0x1
	0x0381F008 CSEL X9, X9, X31, NE
	0x0381F00C ANDS W31, W1, 0x1
	0x0381F010 MOVZ W10, 0x1000000
	0x0381F014 CSEL X10, X10, X31, NE
	0x0381F018 ANDS W31, W4, 0x1
	0x0381F01C MOVZ W11, 0x10000
	0x0381F020 CSEL X11, X11, X31, NE
	0x0381F024 ANDS W31, W2, 0x1
	0x0381F028 MOVZ W12, 0x100
	0x0381F02C CSEL X12, X12, X31, NE
	0x0381F030 BFM X10, X0, 0x0, 0x0
	0x0381F034 ORR X10, X10, X12, 0x0
	0x0381F038 ORR X9, X10, X9, 0x0
	0x0381F03C ORR X9, X9, X11, 0x0
	0x0381F040 ORR X0, X9, X8, 0x0
	0x0381F044 RET
	0x0381F048 MOVZ W8, 0x100
	0x0381F04C ANDS W31, W0, 0x1
	0x0381F050 MOVK W8, 0x10000
	0x0381F054 CSEL X8, X8, X31, NE
	0x0381F058 BFM X8, X0, 0x0, 0x0
	0x0381F05C MOV X0, X8
	0x0381F060 RET
	0x0381F064 MOVZ X10, 0x1
	0x0381F068 MOVK X10, 0x100
	0x0381F06C UBFM X8, X0, 0x10, 0x3F
	0x0381F070 UBFM X9, X0, 0x18, 0x3F

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, X0
	010 Move X0, [X0]
	011 Compare X0, 0
	012 JumpIfEqual {19}
	013 Move X8, [X0]
	014 Move X9, [X8+344]
	015 Move X1, [X8+352]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move W8, 397
	018 Multiply W25, W0, W8
	019 Move W25, W31
	020 Move X0, [X19+8]
	021 Compare X0, 0
	022 JumpIfEqual {28}
	023 Move X8, [X0]
	024 Move X9, [X8+344]
	025 Move X1, [X8+352]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move W20, W0
	028 Move W20, W31
	029 Move X0, [X19+16]
	030 Compare X0, 0
	031 JumpIfEqual {37}
	032 Move X8, [X0]
	033 Move X9, [X8+344]
	034 Move X1, [X8+352]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move W21, W0
	037 Move W21, W31
	038 Move X0, [X19+24]
	039 Compare X0, 0
	040 JumpIfEqual {46}
	041 Move X8, [X0]
	042 Move X9, [X8+344]
	043 Move X1, [X8+352]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move W22, W0
	046 Move W22, W31
	047 Move X0, [X19+32]
	048 Compare X0, 0
	049 JumpIfEqual {55}
	050 Move X8, [X0]
	051 Move X9, [X8+344]
	052 Move X1, [X8+352]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move W23, W0
	055 Move W23, W31
	056 Move X0, [X19+40]
	057 Compare X0, 0
	058 JumpIfEqual {64}
	059 Move X8, [X0]
	060 Move X9, [X8+344]
	061 Move X1, [X8+352]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move W24, W0
	064 Move W24, W31
	065 Move X0, [X19+48]
	066 Compare X0, 0
	067 JumpIfEqual {72}
	068 Move X8, [X0]
	069 Move X9, [X8+344]
	070 Move X1, [X8+352]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Xor W8, W20, W25
	073 Move W9, 397
	074 Multiply W8, W8, W9
	075 Xor W8, W21, W8
	076 Multiply W8, W8, W9
	077 Xor W8, W22, W8
	078 Multiply W8, W8, W9
	079 Xor W8, W23, W8
	080 Multiply W8, W8, W9
	081 Xor W8, W24, W8
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Move X24, [X31+16]
	087 Move X23, [X31+24]
	088 Multiply W8, W8, W9
	089 Xor W0, W0, W8
	090 Move X30, [X31+64]
	091 Move X25, [X31+72]
	092 Return X0

Method: System.Boolean op_Equality(UnityEngine.InputSystem.Layouts.InputDeviceDescription left, UnityEngine.InputSystem.Layouts.InputDeviceDescription right)

Disassembly:
	0x0381F074 AND X10, X0, X10, 0x0
	0x0381F078 AND X11, X8, 0x1FF
	0x0381F07C AND X9, X9, 0x1FF
	0x0381F080 BFM X10, X8, 0x20, 0x0
	0x0381F084 BFM X9, X0, 0x8, 0x8
	0x0381F088 ORR X8, X10, X11, 0x0
	0x0381F08C ORR X0, X8, X9, 0x10
	0x0381F090 RET
	0x0381F094 MOVZ W8, 0x187D
	0x0381F098 MOVZ W9, 0x823
	0x0381F09C ANDS X31, X0, 0x1
	0x0381F0A0 MOVK W8, 0xA88D0000
	0x0381F0A4 MOVK W9, 0x9C9F0000
	0x0381F0A8 MOVZ X10, 0xBA1D

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move X8, [X1+48]
	004 Move V1, [X1+16]
	005 Move V0, [X1+32]
	006 Move V2, [X1]
	007 Add X1, X31, 0
	008 Move [X31+48], X8
	009 Move [X31+16], V1
	010 Move [X31+24], V0
	011 Move [X31], V2
	012 Call InputDeviceDescription.Equals, X0, X1
	013 Move X30, [X31+64]
	014 And W0, W0, 1
	015 Add X31, X31, 80
	016 Return X0

Method: System.Boolean op_Inequality(UnityEngine.InputSystem.Layouts.InputDeviceDescription left, UnityEngine.InputSystem.Layouts.InputDeviceDescription right)

Disassembly:
	0x0381F0AC MOVZ X11, 0xA13B
	0x0381F0B0 MOVK X10, 0xCF6E0000
	0x0381F0B4 MOVK X11, 0x5A9C0000
	0x0381F0B8 MOVZ X12, 0x290B
	0x0381F0BC CSEL X8, X9, X8, EQ
	0x0381F0C0 MOVZ X9, 0x9D7B
	0x0381F0C4 ANDS X31, X0, 0x1FF
	0x0381F0C8 MOVK X12, 0xFD800000
	0x0381F0CC MOVK X9, 0x747A0000
	0x0381F0D0 CSEL X10, X11, X10, EQ
	0x0381F0D4 ANDS X31, X0, 0x1FFFFFFFF
	0x0381F0D8 MOVZ W11, 0x5AF1
	0x0381F0DC CSEL X9, X9, X12, EQ
	0x0381F0E0 MOVZ W12, 0x775
	0x0381F0E4 MOVK W11, 0xB5F00000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move X8, [X1+48]
	004 Move V1, [X1+16]
	005 Move V0, [X1+32]
	006 Move V2, [X1]
	007 Add X1, X31, 0
	008 Move [X31+48], X8
	009 Move [X31+16], V1
	010 Move [X31+24], V0
	011 Move [X31], V2
	012 Call InputDeviceDescription.Equals, X0, X1
	013 Move X30, [X31+64]
	014 NotImplemented "Instruction ORN not yet implemented."
	015 And W0, W8, 1
	016 Add X31, X31, 80
	017 Return X0

Method: System.String ToJson()

Disassembly:
	0x0381F0E8 MOVK W12, 0xEADF0000
	0x0381F0EC ANDS X31, X0, 0x1FFFFFF
	0x0381F0F0 ORR X10, X10, X8, 0x0
	0x0381F0F4 CSEL W11, W12, W11, EQ
	0x0381F0F8 MOVZ W12, 0xE5A1
	0x0381F0FC ADD X9, X10, X9
	0x0381F100 MOVZ W10, 0xD5EF
	0x0381F104 MOVK W12, 0x9D880000
	0x0381F108 MOVK W10, 0xAFCD0000
	0x0381F10C ANDS X31, X0, 0x1FFFF
	0x0381F110 ADD W8, W11, W8
	0x0381F114 MOVZ W11, 0xADB7
	0x0381F118 CSEL W10, W10, W12, EQ
	0x0381F11C MOVZ W12, 0xF799
	0x0381F120 MOVK W11, 0x8B650000
	0x0381F124 MOVK W12, 0x41110000
	0x0381F128 ANDS X31, X0, 0x1FFFFFFFFFF
	0x0381F12C CSEL W11, W12, W11, EQ
	0x0381F130 ADD W10, W11, W10
	0x0381F134 UBFM X9, X9, 0x20, 0x3F
	0x0381F138 ADD W8, W10, W8
	0x0381F13C ADD W0, W8, W9
	0x0381F140 RET
	0x0381F144 MOVZ W8, 0xD6F3
	0x0381F148 MOVZ W9, 0xF563
	0x0381F14C ANDS X31, X0, 0x1
	0x0381F150 MOVK W8, 0xE99E0000
	0x0381F154 MOVK W9, 0xDFF40000
	0x0381F158 MOVZ X10, 0x5549
	0x0381F15C MOVZ X11, 0x770D
	0x0381F160 MOVK X10, 0x48120000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0xBC3000
	007 Move X20, 0x92C000
	008 Move W8, [X21+1324]
	009 Move X20, [X20+3208]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x92C000
	016 Move X0, [X0+3208]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1324], W8
	020 Move V0, [X19]
	021 Move X8, [X19+16]
	022 NotImplemented "Instruction LDUR not yet implemented."
	023 Move X9, [X19+40]
	024 Move X10, [X19+48]
	025 Move X0, [X20]
	026 Add X1, X31, 0
	027 Move [X31], V0
	028 Move [X31+8], V1
	029 Move [X31+32], X9
	030 Move [X31+40], X8
	031 Move [X31+48], X10
	032 Call 0x1C17E04
	033 Move W1, 1
	034 Move X2, X31
	035 Call JsonUtility.ToJson, X0, X1
	036 Move X20, [X31+80]
	037 Move X19, [X31+88]
	038 Move X30, [X31+64]
	039 Move X21, [X31+72]
	040 Add X31, X31, 96
	041 Return X0

Method: UnityEngine.InputSystem.Layouts.InputDeviceDescription FromJson(System.String json)

Disassembly:
	0x0381F164 MOVK X11, 0x70690000
	0x0381F168 MOVZ X12, 0x1269
	0x0381F16C CSEL X8, X9, X8, EQ
	0x0381F170 MOVZ X9, 0xF8BF
	0x0381F174 ANDS X31, X0, 0x1FF
	0x0381F178 MOVK X12, 0xB4500000
	0x0381F17C MOVK X9, 0xCE1C0000
	0x0381F180 CSEL X10, X11, X10, EQ
	0x0381F184 ANDS X31, X0, 0x1FFFFFFFF
	0x0381F188 MOVZ W11, 0x913F
	0x0381F18C CSEL X9, X9, X12, EQ
	0x0381F190 MOVZ W12, 0x9FE5
	0x0381F194 MOVK W11, 0xFAB90000
	0x0381F198 MOVK W12, 0xE3AD0000
	0x0381F19C ANDS X31, X0, 0x1FFFFFF
	0x0381F1A0 ORR X10, X10, X8, 0x0
	0x0381F1A4 CSEL W11, W12, W11, EQ
	0x0381F1A8 MOVZ W12, 0x123B
	0x0381F1AC ADD X9, X10, X9
	0x0381F1B0 MOVZ W10, 0x4537
	0x0381F1B4 MOVK W12, 0xEEE20000
	0x0381F1B8 MOVK W10, 0xD1220000
	0x0381F1BC ANDS X31, X0, 0x1FFFF
	0x0381F1C0 ADD W8, W11, W8
	0x0381F1C4 MOVZ W11, 0x89FD
	0x0381F1C8 CSEL W10, W10, W12, EQ
	0x0381F1CC MOVZ W12, 0x9F3B
	0x0381F1D0 MOVK W11, 0xE04B0000
	0x0381F1D4 MOVK W12, 0x7BE30000
	0x0381F1D8 ANDS X31, X0, 0x1FFFFFFFFFF
	0x0381F1DC AND X9, X9, 0xFFFFFFFFFFFFFFFF
	0x0381F1E0 CSEL W11, W12, W11, EQ
	0x0381F1E4 ADD W1, W11, W10
	0x0381F1E8 ORR X0, X9, X8, 0x0
	0x0381F1EC RET
	0x0381F1F0 STRH W0, [X31 - 0x10]!
	0x0381F1F4 UBFM X8, X0, 0x10, 0x1F
	0x0381F1F8 UBFM X9, X1, 0x10, 0x1F
	0x0381F1FC STURH W1, [X31 + 0x3]
	0x0381F200 STRB W8, [X31 + 0x2]
	0x0381F204 STRB W9, [X31 + 0x5]
	0x0381F208 STRH W2, [X31 + 0x6]
	0x0381F20C LDR X0, [X31]
	0x0381F210 UBFM X8, X2, 0x10, 0x1F
	0x0381F214 UBFM X1, X2, 0x10, 0x17
	0x0381F218 STRB W8, [X31 + 0x8]
	0x0381F21C ADD X31, X31, 0x10
	0x0381F220 RET
	0x0381F224 ANDS W31, W5, 0x1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0xBC3000
	007 Move W9, [X21+1325]
	008 Move X20, X0
	009 Move X19, X8
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x92C000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1325], W8
	019 Compare X20, 0
	020 JumpIfEqual {43}
	021 Move X8, 0x92C000
	022 Move X8, [X8+3216]
	023 Move X0, X20
	024 Move X1, [X8]
	025 Add X8, X31, 0
	026 Call JsonUtility.FromJson, X0
	027 Move V0, [X31]
	028 Move V1, [X31+16]
	029 Move X8, [X31+32]
	030 Move X9, [X31+40]
	031 Move X10, [X31+48]
	032 Move X30, [X31+64]
	033 Move X21, [X31+72]
	034 Move [X19], V0
	035 Move [X19+16], X9
	036 Move [X19+24], V1
	037 Move [X19+40], X8
	038 Move [X19+48], X10
	039 Move X20, [X31+80]
	040 Move X19, [X31+88]
	041 Add X31, X31, 96
	042 Return X0
	043 Move X0, 0x8DA000
	044 Move X0, [X0+1320]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0x927000
	049 Move X0, [X0+216]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Move X2, X31
	054 Call ArgumentNullException..ctor, X0, X1
	055 Move X0, 0x92C000
	056 Move X0, [X0+3224]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC

Method: System.Boolean ComparePropertyToDeviceDescriptor(System.String propertyName, System.String propertyValue, System.String deviceDescriptor)

Disassembly:
	0x0381F228 MOVZ X8, 0x1000000
	0x0381F22C CSEL X8, X8, X31, NE
	0x0381F230 ANDS W31, W2, 0x1
	0x0381F234 MOVZ X9, 0x10000
	0x0381F238 CSEL X9, X9, X31, NE
	0x0381F23C ANDS W31, W7, 0x1
	0x0381F240 MOVZ X10, 0x100
	0x0381F244 CSEL X10, X10, X31, NE
	0x0381F248 ANDS W31, W4, 0x1
	0x0381F24C MOVZ X11, 0x1
	0x0381F250 CSEL X11, X11, X31, NE
	0x0381F254 ANDS W31, W1, 0x1
	0x0381F258 MOVZ W12, 0x1000000
	0x0381F25C CSEL X12, X12, X31, NE
	0x0381F260 ANDS W31, W6, 0x1
	0x0381F264 MOVZ W13, 0x10000
	0x0381F268 CSEL X13, X13, X31, NE
	0x0381F26C ANDS W31, W3, 0x1
	0x0381F270 MOVZ W14, 0x100
	0x0381F274 BFM X12, X0, 0x0, 0x0
	0x0381F278 CSEL X14, X14, X31, NE
	0x0381F27C ORR X9, X12, X9, 0x0
	0x0381F280 LDRB W15, [X31]
	0x0381F284 ORR X9, X9, X14, 0x0
	0x0381F288 ORR X9, X9, X11, 0x0
	0x0381F28C ORR X8, X9, X8, 0x0
	0x0381F290 ORR X8, X8, X13, 0x0
	0x0381F294 ORR X0, X8, X10, 0x0
	0x0381F298 AND X1, X15, 0x1
	0x0381F29C RET
	0x0381F2A0 MOVZ W9, 0x100
	0x0381F2A4 ANDS W8, W0, 0x1
	0x0381F2A8 MOVK W9, 0x10000
	0x0381F2AC CSEL X9, X9, X31, NE
	0x0381F2B0 ORR W8, W9, W8, 0x0
	0x0381F2B4 STRH W8, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+168], X31
	003 Move [X31+176], X30
	004 Move [X31+192], X20
	005 Move [X31+200], X19
	006 Move X19, X1
	007 Move X20, X0
	008 Add X0, X31, 152
	009 Move X1, X2
	010 Move X2, X31
	011 Move [X31+152], X31
	012 Move [X31+160], X31
	013 Call JsonParser..ctor, X0, X1
	014 Add X0, X31, 152
	015 Move X1, X20
	016 Move X2, X31
	017 Call JsonParser.NavigateToProperty, X0, X1
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {34}
	022 Add X8, X31, 80
	023 Move X0, X19
	024 Move X1, X31
	025 Call JsonValue.op_Implicit, X0
	026 Add X0, X31, 8
	027 Add X1, X31, 80
	028 Move W2, 72
	029 Call 0x3EB2AC0
	030 Add X0, X31, 152
	031 Add X1, X31, 8
	032 Move X2, X31
	033 Call JsonParser.CurrentPropertyHasValueEqualTo, X0, X1
	034 Move X0, X19
	035 Move X1, X31
	036 Call String.IsNullOrEmpty, X0
	037 Move X20, [X31+192]
	038 Move X19, [X31+200]
	039 Move X30, [X31+176]
	040 And W0, W0, 1
	041 Add X31, X31, 208
	042 Return X0

