Type: UnityEngine.InputSystem.UI.VirtualMouseInput

Method: UnityEngine.RectTransform get_cursorTransform()

Disassembly:
	0x037EDFC8 LDR X22, [X22 + 0x4B8]
	0x037EDFCC ADRP X9, 0xFFFFFFFFFD2FD000

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_cursorTransform(UnityEngine.RectTransform value)

Disassembly:
	0x037EDFD0 LDR V11, [X9 + 0x240]
	0x037EDFD4 FABS S1, S8

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Single get_cursorSpeed()

Disassembly:
	0x037EDFD8 LDR X8, [X22]
	0x037EDFDC FMOV S3, 8

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_cursorSpeed(System.Single value)

Disassembly:
	0x037EDFE0 FMUL S2, S1, S11
	0x037EDFE4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X0+56], S0
	002 Return 

Method: UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode get_cursorMode()

Disassembly:
	0x037EDFE8 LDR V0, [X8]
	0x037EDFEC FMUL S0, S0, S3

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_cursorMode(UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode value)

Disassembly:
	0x037EDFF0 FCMP S2, S0
	0x037EDFF4 FCSEL S2, S2, S0, GT
	0x037EDFF8 FCMP S1, S2
	0x037EDFFC B.PL 0x37EE020
	0x037EE000 FABS S1, S9
	0x037EE004 FMUL S2, S1, S11
	0x037EE008 FCMP S2, S0
	0x037EE00C FCSEL S0, S2, S0, GT
	0x037EE010 FCMP S1, S0
	0x037EE014 B.PL 0x37EE020
	0x037EE018 STP X31, X31, [X19 + 0x110]
	0x037EE01C B 0x37EE224
	0x037EE020 MOV X0, X31
	0x037EE024 BL 0x37FC688
	0x037EE028 LDRB W8, [X20 + 0x5AA]
	0x037EE02C LDR V12, [X19 + 0x118]
	0x037EE030 MOV V10.16B, V0.16B
	0x037EE034 CBNZ W8, 0x37EE04C
	0x037EE038 ADRP X0, 0x90C000
	0x037EE03C LDR X0, [X0 + 0x4B8]
	0x037EE040 BL 0x1C16CF4
	0x037EE044 MOVZ W8, 0x1
	0x037EE048 STRB W8, [X20 + 0x5AA]
	0x037EE04C LDR X8, [X22]
	0x037EE050 FABS S1, S12
	0x037EE054 FMOV S3, 8
	0x037EE058 FMUL S2, S1, S11
	0x037EE05C LDR X8, [X8 + 0xB8]
	0x037EE060 LDR V0, [X8]
	0x037EE064 FMUL S0, S0, S3
	0x037EE068 FCMP S2, S0
	0x037EE06C FCSEL S2, S2, S0, GT
	0x037EE070 FCMP S1, S2
	0x037EE074 B.PL 0x37EE098
	0x037EE078 LDR V1, [X19 + 0x11C]
	0x037EE07C FABS S1, S1
	0x037EE080 FMUL S2, S1, S11
	0x037EE084 FCMP S2, S0
	0x037EE088 FCSEL S0, S2, S0, GT
	0x037EE08C FCMP S1, S0
	0x037EE090 B.PL 0x37EE098
	0x037EE094 STR D10, [X19 + 0x110]
	0x037EE098 LDR X8, [X19 + 0xF0]
	0x037EE09C CBZ X8, 0x37EE2A8
	0x037EE0A0 LDR X0, [X8 + 0x170]
	0x037EE0A4 CBZ X0, 0x37EE2A8
	0x037EE0A8 ADRP X8, 0x95B000
	0x037EE0AC LDR V0, [X19 + 0x110]
	0x037EE0B0 LDR V1, [X19 + 0x38]
	0x037EE0B4 LDR X8, [X8 + 0x2F8]
	0x037EE0B8 FSUB D0, D10, D0
	0x037EE0BC FMUL S2, S8, S1
	0x037EE0C0 LDR X1, [X8]
	0x037EE0C4 FMUL S1, S9, S1
	0x00000000 INVALID
	0x037EE0CC FMUL S14, S2, S0
	0x037EE0D0 FMUL S13, S1, S0
	0x037EE0D4 BL 0x2E094B0
	0x037EE0D8 ADRP X22, 0x905000
	0x037EE0DC LDR X22, [X22 + 0x598]
	0x037EE0E0 MOV X8, X0
	0x037EE0E4 LDP S11, S12, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBF5000
	006 Move W8, [X21+851]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x92E000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move X0, 0x906000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+851], W8
	021 Move W8, [X19+32]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return 
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X21, [X19+248]
	030 Compare X21, 0
	031 JumpIfEqual {43}
	032 Move X8, 0x92E000
	033 Move X8, [X8+624]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X21
	040 Move X1, X31
	041 Call InputSystem.EnableDevice, X0
	042 Move [X19+248], X31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X19+32], W20
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Move X8, 0x906000
	051 Move X8, [X8+1432]
	052 Move X20, [X19+40]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X20
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {23}
	066 Move X0, [X19+40]
	067 Compare X0, 0
	068 JumpIfEqual {77}
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move W1, 1
	072 Move X2, X31
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Call Behaviour.set_enabled, X0, X1
	076 Return 
	077 Call 0x1C17F20

Method: UnityEngine.UI.Graphic get_cursorGraphic()

Disassembly:
	0x037EE300 LDR X0, [X0 + 0x610]
	0x037EE304 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_cursorGraphic(UnityEngine.UI.Graphic value)

Disassembly:
	0x037EE308 ADRP X0, 0x95B000
	0x037EE30C LDR X0, [X0 + 0x618]

ISIL:
	001 Move [X0+40], X1

Method: System.Single get_scrollSpeed()

Disassembly:
	0x037EE364 BL 0x3745120
	0x037EE368 CMP X20, X0

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_scrollSpeed(System.Single value)

Disassembly:
	0x037EE36C B.EQ 0x37EE3BC
	0x037EE370 ADD X0, X19, 0x70

ISIL:
	001 Move [X0+60], S0
	002 Return 

Method: UnityEngine.InputSystem.Mouse get_virtualMouse()

Disassembly:
	0x037EE374 MOV X1, X31
	0x037EE378 BL 0x3745120

ISIL:
	001 Move X0, [X0+240]
	002 Return X0

Method: UnityEngine.InputSystem.InputActionProperty get_stickAction()

Disassembly:
	0x037EE37C CMP X20, X0
	0x037EE380 B.EQ 0x37EE3C4
	0x037EE384 ADD X0, X19, 0xA0
	0x037EE388 MOV X1, X31
	0x037EE38C BL 0x3745120

ISIL:
	001 Move X9, [X0+80]
	002 Move V0, [X0+4]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_stickAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE390 CMP X20, X0
	0x037EE394 B.EQ 0x37EE3CC
	0x037EE398 ADD X0, X19, 0xB8
	0x037EE39C MOV X1, X31
	0x037EE3A0 BL 0x3745120
	0x037EE3A4 CMP X20, X0
	0x037EE3A8 B.NE 0x37EE3E4
	0x037EE3AC MOVZ W1, 0x4
	0x037EE3B0 B 0x37EE3D0
	0x037EE3B4 MOV W1, W31
	0x037EE3B8 B 0x37EE3D0
	0x037EE3BC MOVZ W1, 0x1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X0, X0, 64
	006 Add X1, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call VirtualMouseInput.SetAction, X0, X1
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_leftButtonAction()

Disassembly:
	0x037EE4E8 MOVZ W8, 0x1
	0x037EE4EC STRB W8, [X20 + 0x35B]
	0x037EE4F0 LDR X1, [X21]
	0x037EE4F4 MOV X0, X19
	0x037EE4F8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X9, [X0+104]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_leftButtonAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE4FC FMOV S0, W31
	0x037EE500 LDP X30, X21, [X31], #0x20
	0x037EE504 B 0x222E7E8
	0x037EE508 STP X30, X21, [X31 - 0x20]!
	0x037EE50C STP X20, X19, [X31 + 0x10]
	0x037EE510 ADRP X20, 0xBF3000
	0x037EE514 ADRP X21, 0x95B000
	0x037EE518 LDRB W8, [X20 + 0x35C]
	0x037EE51C LDR X21, [X21 + 0x620]
	0x037EE520 MOV X19, X0
	0x037EE524 TBNZ X8, 0x0, 0x37EE53C
	0x037EE528 ADRP X0, 0x95B000
	0x037EE52C LDR X0, [X0 + 0x620]
	0x037EE530 BL 0x1C16CF4
	0x037EE534 MOVZ W8, 0x1
	0x037EE538 STRB W8, [X20 + 0x35C]
	0x037EE53C LDR X1, [X21]
	0x037EE540 MOV X0, X19
	0x037EE544 LDP X20, X19, [X31 + 0x10]
	0x037EE548 FMOV S0, 1
	0x037EE54C LDP X30, X21, [X31], #0x20
	0x037EE550 B 0x222E7E8
	0x037EE554 LDR X0, [X0 + 0x38]
	0x037EE558 RET
	0x037EE55C STR X1, [X0 + 0x38]
	0x037EE560 RET
	0x037EE564 MOV X1, X31
	0x037EE568 B 0x3C36C30
	0x037EE56C MOV X1, X31
	0x037EE570 B 0x3C36C30
	0x037EE574 LDR X8, [X0]
	0x037EE578 LDP X2, X1, [X8 + 0x178]
	0x037EE57C BR X2
	0x037EE580 STP X30, X19, [X31 - 0x10]!
	0x037EE584 LDR X8, [X0]
	0x037EE588 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X8, [X0+264]
	006 Move X19, X0
	007 Move X20, X1
	008 Compare X8, 0
	009 JumpIfEqual {18}
	010 Move X9, [X19+104]
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Add X0, X31, 64
	013 Move X1, X8
	014 Move W2, W31
	015 Move [X31+80], X9
	016 Move [X31+4], V0
	017 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	018 Move X8, [X20+16]
	019 Move V0, [X20]
	020 Add X20, X19, 88
	021 Add X1, X31, 32
	022 Move X0, X20
	023 Move [X31+48], X8
	024 Move [X31+2], V0
	025 Call VirtualMouseInput.SetAction, X0, X1
	026 Move X1, [X19+264]
	027 Compare X1, 0
	028 JumpIfEqual {36}
	029 Move X8, [X20+16]
	030 Move V0, [X20]
	031 Add X0, X31, 0
	032 Move W2, 1
	033 Move [X31+16], X8
	034 Move [X31], V0
	035 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	036 Move X20, [X31+112]
	037 Move X19, [X31+120]
	038 Move X30, [X31+96]
	039 Add X31, X31, 128
	040 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_rightButtonAction()

Disassembly:
	0x037EE5FC BL 0x1C16CF4
	0x037EE600 ADRP X0, 0x95B000
	0x037EE604 LDR X0, [X0 + 0x638]
	0x037EE608 BL 0x1C16CF4
	0x037EE60C ADRP X0, 0x95B000

ISIL:
	001 Move X9, [X0+152]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_rightButtonAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE610 LDR X0, [X0 + 0x640]
	0x037EE614 BL 0x1C16CF4
	0x037EE618 ADRP X0, 0x92D000
	0x037EE61C LDR X0, [X0 + 0x270]
	0x037EE620 BL 0x1C16CF4
	0x037EE624 ADRP X0, 0x905000
	0x037EE628 LDR X0, [X0 + 0x598]
	0x037EE62C BL 0x1C16CF4
	0x037EE630 ADRP X0, 0x95B000
	0x037EE634 LDR X0, [X0 + 0x648]
	0x037EE638 BL 0x1C16CF4
	0x037EE63C ADRP X0, 0x905000
	0x037EE640 LDR X0, [X0 + 0xAC8]
	0x037EE644 BL 0x1C16CF4
	0x037EE648 ADRP X0, 0x90D000
	0x037EE64C LDR X0, [X0 + 0x9B0]
	0x037EE650 BL 0x1C16CF4
	0x037EE654 ADRP X0, 0x95B000
	0x037EE658 LDR X0, [X0 + 0x650]
	0x037EE65C BL 0x1C16CF4
	0x037EE660 ADRP X0, 0x95B000
	0x037EE664 LDR X0, [X0 + 0x658]
	0x037EE668 BL 0x1C16CF4
	0x037EE66C ADRP X0, 0x95B000
	0x037EE670 LDR X0, [X0 + 0x660]
	0x037EE674 BL 0x1C16CF4
	0x037EE678 ADRP X0, 0x95B000
	0x037EE67C LDR X0, [X0 + 0x668]
	0x037EE680 BL 0x1C16CF4
	0x037EE684 ADRP X0, 0x95B000
	0x037EE688 LDR X0, [X0 + 0x670]
	0x037EE68C BL 0x1C16CF4
	0x037EE690 ADRP X0, 0x95B000
	0x037EE694 LDR X0, [X0 + 0x678]
	0x037EE698 BL 0x1C16CF4
	0x037EE69C ADRP X0, 0x95B000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X8, [X0+264]
	006 Move X19, X0
	007 Move X20, X1
	008 Compare X8, 0
	009 JumpIfEqual {18}
	010 Move X9, [X19+152]
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Add X0, X31, 64
	013 Move X1, X8
	014 Move W2, W31
	015 Move [X31+80], X9
	016 Move [X31+4], V0
	017 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	018 Move X8, [X20+16]
	019 Move V0, [X20]
	020 Add X20, X19, 136
	021 Add X1, X31, 32
	022 Move X0, X20
	023 Move [X31+48], X8
	024 Move [X31+2], V0
	025 Call VirtualMouseInput.SetAction, X0, X1
	026 Move X1, [X19+264]
	027 Compare X1, 0
	028 JumpIfEqual {36}
	029 Move X8, [X20+16]
	030 Move V0, [X20]
	031 Add X0, X31, 0
	032 Move W2, 1
	033 Move [X31+16], X8
	034 Move [X31], V0
	035 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	036 Move X20, [X31+112]
	037 Move X19, [X31+120]
	038 Move X30, [X31+96]
	039 Add X31, X31, 128
	040 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_middleButtonAction()

Disassembly:
	0x037EE6A0 LDR X0, [X0 + 0x680]
	0x037EE6A4 BL 0x1C16CF4
	0x037EE6A8 MOVZ W8, 0x1
	0x037EE6AC STRB W8, [X20 + 0x35D]
	0x037EE6B0 MOVI V0.2D, 0x0

ISIL:
	001 Move X9, [X0+128]
	002 Move V0, [X0+7]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_middleButtonAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE6B4 STP X31, X31, [X31 + 0x30]
	0x037EE6B8 STR X31, [X31 + 0x78]
	0x037EE6BC STR X31, [X31 + 0x20]
	0x037EE6C0 STP V0, V0, [X31]
	0x037EE6C4 LDR X8, [X19]
	0x037EE6C8 MOV X0, X19
	0x037EE6CC LDP X9, X1, [X8 + 0x178]
	0x037EE6D0 BLR X9
	0x037EE6D4 MOV X1, X31
	0x037EE6D8 MOV X22, X0
	0x037EE6DC BL 0x32277A8
	0x037EE6E0 TBNZ X0, 0x0, 0x37EEB54
	0x037EE6E4 MOV X0, X22
	0x037EE6E8 MOV X1, X31
	0x037EE6EC BL 0x3777DD8
	0x037EE6F0 CBZ X0, 0x37EE820
	0x037EE6F4 MOV X20, X0
	0x037EE6F8 ADD X0, X31, 0x30
	0x037EE6FC MOV X1, X20
	0x037EE700 MOV X2, X31
	0x037EE704 BL 0x3757420
	0x037EE708 ADRP X24, 0x95B000
	0x037EE70C LDR X24, [X24 + 0x648]
	0x037EE710 LDR X8, [X24]
	0x037EE714 LDR X0, [X8 + 0xB8]
	0x037EE718 LDR W8, [X0]
	0x037EE71C CMP W8, 0x1
	0x037EE720 B.LT 0x37EE774
	0x037EE724 ADRP X23, 0x95B000
	0x037EE728 LDR X23, [X23 + 0x638]
	0x037EE72C MOV W21, W31
	0x037EE730 LDR X2, [X23]
	0x037EE734 ADD X8, X31, 0x40
	0x037EE738 MOV W1, W21
	0x037EE73C BL 0x2DF7EF0
	0x037EE740 LDR X8, [X31 + 0x58]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X8, [X0+264]
	006 Move X19, X0
	007 Move X20, X1
	008 Compare X8, 0
	009 JumpIfEqual {18}
	010 Move X9, [X19+128]
	011 Move V0, [X19+7]
	012 Add X0, X31, 64
	013 Move X1, X8
	014 Move W2, W31
	015 Move [X31+80], X9
	016 Move [X31+4], V0
	017 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	018 Move X8, [X20+16]
	019 Move V0, [X20]
	020 Add X20, X19, 112
	021 Add X1, X31, 32
	022 Move X0, X20
	023 Move [X31+48], X8
	024 Move [X31+2], V0
	025 Call VirtualMouseInput.SetAction, X0, X1
	026 Move X1, [X19+264]
	027 Compare X1, 0
	028 JumpIfEqual {36}
	029 Move X8, [X20+16]
	030 Move V0, [X20]
	031 Add X0, X31, 0
	032 Move W2, 1
	033 Move [X31+16], X8
	034 Move [X31], V0
	035 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	036 Move X20, [X31+112]
	037 Move X19, [X31+120]
	038 Move X30, [X31+96]
	039 Add X31, X31, 128
	040 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_forwardButtonAction()

Disassembly:
	0x037EE744 CBZ X8, 0x37EEC94
	0x037EE748 LDP X0, X1, [X8 + 0x58]
	0x037EE74C LDP X2, X3, [X31 + 0x30]
	0x037EE750 MOV X4, X31
	0x037EE754 BL 0x37564A4

ISIL:
	001 Move X9, [X0+176]
	002 Move V0, [X0+10]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_forwardButtonAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE758 TBNZ X0, 0x0, 0x37EE8FC
	0x037EE75C LDR X8, [X24]
	0x037EE760 ADD W21, W21, 0x1
	0x037EE764 LDR X0, [X8 + 0xB8]
	0x037EE768 LDR W8, [X0]
	0x037EE76C CMP W21, W8
	0x037EE770 B.LT 0x37EE730
	0x037EE774 ADRP X21, 0x92D000
	0x037EE778 LDR X21, [X21 + 0x270]
	0x037EE77C LDR X0, [X21]
	0x037EE780 LDR W8, [X0 + 0xE0]
	0x037EE784 CBNZ W8, 0x37EE78C
	0x037EE788 BL 0x1C16DFC
	0x037EE78C MOV X0, X20
	0x037EE790 MOV X1, X31
	0x037EE794 MOV X2, X31
	0x037EE798 MOV X3, X31
	0x037EE79C BL 0x376E4CC
	0x037EE7A0 MOV X23, X0
	0x037EE7A4 LDR X0, [X21]
	0x037EE7A8 LDR W8, [X0 + 0xE0]
	0x037EE7AC CBNZ W8, 0x37EE7B4
	0x037EE7B0 BL 0x1C16DFC
	0x037EE7B4 ADRP X8, 0x95B000
	0x037EE7B8 LDR X8, [X8 + 0x650]
	0x037EE7BC MOV X0, X23
	0x037EE7C0 MOV X2, X31
	0x037EE7C4 LDR X1, [X8]
	0x037EE7C8 BL 0x376F468
	0x037EE7CC ADD X1, X31, 0x78
	0x037EE7D0 MOVZ W2, 0x4
	0x037EE7D4 MOV X0, X23
	0x037EE7D8 MOV X3, X31
	0x037EE7DC BL 0x38072B0
	0x037EE7E0 STP X23, X31, [X31 + 0x18]
	0x037EE7E4 LDR X8, [X31 + 0x78]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X8, [X0+264]
	006 Move X19, X0
	007 Move X20, X1
	008 Compare X8, 0
	009 JumpIfEqual {18}
	010 Move X9, [X19+176]
	011 Move V0, [X19+10]
	012 Add X0, X31, 64
	013 Move X1, X8
	014 Move W2, W31
	015 Move [X31+80], X9
	016 Move [X31+4], V0
	017 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	018 Move X8, [X20+16]
	019 Move V0, [X20]
	020 Add X20, X19, 160
	021 Add X1, X31, 32
	022 Move X0, X20
	023 Move [X31+48], X8
	024 Move [X31+2], V0
	025 Call VirtualMouseInput.SetAction, X0, X1
	026 Move X1, [X19+264]
	027 Compare X1, 0
	028 JumpIfEqual {36}
	029 Move X8, [X20+16]
	030 Move V0, [X20]
	031 Add X0, X31, 0
	032 Move W2, 1
	033 Move [X31+16], X8
	034 Move [X31], V0
	035 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	036 Move X20, [X31+112]
	037 Move X19, [X31+120]
	038 Move X30, [X31+96]
	039 Add X31, X31, 128
	040 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_backButtonAction()

Disassembly:
	0x037EE7E8 STR X1, [X31 + 0x10]
	0x037EE7EC ADRP X10, 0x95B000
	0x037EE7F0 LDR X9, [X24]
	0x037EE7F4 LDR X10, [X10 + 0x628]
	0x037EE7F8 STP X8, X0, [X31]

ISIL:
	001 Move X9, [X0+200]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_backButtonAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE7FC LDP V0, V1, [X31]
	0x037EE800 LDR X0, [X9 + 0xB8]
	0x037EE804 LDR X2, [X10]
	0x037EE808 ADD X1, X31, 0x40
	0x037EE80C STP V0, V1, [X31 + 0x40]
	0x037EE810 STR X31, [X31 + 0x60]
	0x037EE814 BL 0x2DF8498
	0x037EE818 MOV W21, W0
	0x037EE81C B 0x37EE918
	0x037EE820 ADRP X8, 0x905000
	0x037EE824 LDR X8, [X8 + 0xAC8]
	0x037EE828 MOVZ W1, 0x5
	0x037EE82C LDR X0, [X8]
	0x037EE830 BL 0x1C16D6C
	0x037EE834 CBZ X0, 0x37EEC94
	0x037EE838 LDR W8, [X0 + 0x18]
	0x037EE83C MOV X20, X0
	0x037EE840 CBZ W8, 0x37EEC98
	0x037EE844 ADRP X9, 0x95B000
	0x037EE848 LDR X9, [X9 + 0x678]
	0x037EE84C CMP W8, 0x1
	0x037EE850 LDR X9, [X9]
	0x037EE854 STR X9, [X20 + 0x20]
	0x037EE858 B.EQ 0x37EEC98
	0x037EE85C CMP W8, 0x2
	0x037EE860 STR X22, [X20 + 0x28]
	0x037EE864 B.LS 0x37EEC98
	0x037EE868 ADRP X8, 0x95B000
	0x037EE86C LDR X8, [X8 + 0x668]
	0x037EE870 MOV X0, X19
	0x037EE874 MOV X1, X31
	0x037EE878 LDR X8, [X8]
	0x037EE87C STR X8, [X20 + 0x30]
	0x037EE880 BL 0x33BE520
	0x037EE884 CBZ X0, 0x37EEC94
	0x037EE888 LDR X8, [X0]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X8, [X0+264]
	006 Move X19, X0
	007 Move X20, X1
	008 Compare X8, 0
	009 JumpIfEqual {18}
	010 Move X9, [X19+200]
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Add X0, X31, 64
	013 Move X1, X8
	014 Move W2, W31
	015 Move [X31+80], X9
	016 Move [X31+4], V0
	017 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	018 Move X8, [X20+16]
	019 Move V0, [X20]
	020 Add X20, X19, 184
	021 Add X1, X31, 32
	022 Move X0, X20
	023 Move [X31+48], X8
	024 Move [X31+2], V0
	025 Call VirtualMouseInput.SetAction, X0, X1
	026 Move X1, [X19+264]
	027 Compare X1, 0
	028 JumpIfEqual {36}
	029 Move X8, [X20+16]
	030 Move V0, [X20]
	031 Add X0, X31, 0
	032 Move W2, 1
	033 Move [X31+16], X8
	034 Move [X31], V0
	035 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	036 Move X20, [X31+112]
	037 Move X19, [X31+120]
	038 Move X30, [X31+96]
	039 Add X31, X31, 128
	040 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_scrollWheelAction()

Disassembly:
	0x037EE88C LDP X9, X1, [X8 + 0x1A8]
	0x037EE890 BLR X9
	0x037EE894 LDR W8, [X20 + 0x18]
	0x037EE898 CMP W8, 0x3
	0x037EE89C B.LS 0x37EEC98

ISIL:
	001 Move X9, [X0+224]
	002 Move V0, [X0+13]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_scrollWheelAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE8A0 CMP W8, 0x4
	0x037EE8A4 STR X0, [X20 + 0x38]
	0x037EE8A8 B.EQ 0x37EEC98
	0x037EE8AC ADRP X8, 0x95B000
	0x037EE8B0 LDR X8, [X8 + 0x680]
	0x037EE8B4 MOV X0, X20
	0x037EE8B8 MOV X1, X31
	0x037EE8BC LDR X8, [X8]
	0x037EE8C0 STR X8, [X20 + 0x40]
	0x037EE8C4 BL 0x32278CC
	0x037EE8C8 ADRP X8, 0x905000
	0x037EE8CC LDR X8, [X8 + 0xA28]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X0, X0, 208
	006 Add X1, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call VirtualMouseInput.SetAction, X0, X1
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: System.Void OnEnable()

Disassembly:
	0x037EE8D0 MOV X20, X0
	0x037EE8D4 LDR X8, [X8]
	0x037EE8D8 LDR W9, [X8 + 0xE0]
	0x037EE8DC CBNZ W9, 0x37EE8E8
	0x037EE8E0 MOV X0, X8
	0x037EE8E4 BL 0x1C16DFC
	0x037EE8E8 MOV X0, X20
	0x037EE8EC MOV X1, X19
	0x037EE8F0 MOV X2, X31
	0x037EE8F4 BL 0x3C065A4
	0x037EE8F8 B 0x37EEB54
	0x037EE8FC LDR X8, [X24]
	0x037EE900 LDR X2, [X23]
	0x037EE904 MOV W1, W21
	0x037EE908 LDR X0, [X8 + 0xB8]
	0x037EE90C ADD X8, X31, 0x40
	0x037EE910 BL 0x2DF7EF0
	0x037EE914 LDR X23, [X31 + 0x58]
	0x037EE918 MOV X0, X23
	0x037EE91C MOV X1, X22
	0x037EE920 MOV W2, W31
	0x037EE924 MOV X3, X31
	0x037EE928 BL 0x376B4E8
	0x037EE92C STR X0, [X19 + 0x20]
	0x037EE930 CBZ X0, 0x37EE9BC
	0x037EE934 ADRP X20, 0x95B000
	0x037EE938 LDR X8, [X24]
	0x037EE93C LDR X20, [X20 + 0x638]
	0x037EE940 MOV W1, W21
	0x037EE944 LDR X0, [X8 + 0xB8]
	0x037EE948 LDR X2, [X20]
	0x037EE94C ADD X8, X31, 0x40
	0x037EE950 BL 0x2DF7EF0
	0x037EE954 LDR X8, [X31 + 0x40]
	0x037EE958 MOV W1, W21
	0x037EE95C STR X8, [X19 + 0x30]
	0x037EE960 LDR X8, [X24]
	0x037EE964 LDR X2, [X20]
	0x037EE968 LDR X0, [X8 + 0xB8]
	0x037EE96C ADD X8, X31, 0x40
	0x037EE970 BL 0x2DF7EF0
	0x037EE974 LDR X8, [X31 + 0x60]
	0x037EE978 LDP V0, V1, [X31 + 0x40]
	0x037EE97C ADD X2, X31, 0x40
	0x037EE980 MOV W1, W21
	0x037EE984 STR X8, [X31 + 0x20]
	0x037EE988 STP V0, V1, [X31]
	0x037EE98C STR X8, [X19 + 0x28]
	0x037EE990 ADRP X8, 0x95B000
	0x037EE994 LDR X8, [X8 + 0x640]
	0x037EE998 LDR X9, [X24]
	0x037EE99C STR X19, [X31 + 0x20]
	0x037EE9A0 LDP V0, V1, [X31]
	0x037EE9A4 LDR X3, [X8]
	0x037EE9A8 LDR X0, [X9 + 0xB8]
	0x037EE9AC STR X19, [X31 + 0x60]
	0x037EE9B0 STP V0, V1, [X31 + 0x40]
	0x037EE9B4 BL 0x2DF7F9C
	0x037EE9B8 B 0x37EEB54
	0x037EE9BC ADRP X8, 0x905000
	0x037EE9C0 LDR X8, [X8 + 0xAC8]
	0x037EE9C4 MOVZ W1, 0x7
	0x037EE9C8 LDR X0, [X8]
	0x037EE9CC BL 0x1C16D6C
	0x037EE9D0 CBZ X0, 0x37EEC94
	0x037EE9D4 LDR W8, [X0 + 0x18]
	0x037EE9D8 MOV X23, X0
	0x037EE9DC CBZ W8, 0x37EEC98
	0x037EE9E0 ADRP X9, 0x95B000
	0x037EE9E4 LDR X9, [X9 + 0x660]
	0x037EE9E8 CMP W8, 0x1
	0x037EE9EC LDR X9, [X9]
	0x037EE9F0 STR X9, [X23 + 0x20]
	0x037EE9F4 B.EQ 0x37EEC98
	0x037EE9F8 CMP W8, 0x2
	0x037EE9FC STR X22, [X23 + 0x28]
	0x037EEA00 B.LS 0x37EEC98
	0x037EEA04 ADRP X9, 0x95B000
	0x037EEA08 LDR X9, [X9 + 0x670]
	0x037EEA0C CMP W8, 0x3
	0x037EEA10 LDR X9, [X9]
	0x037EEA14 STR X9, [X23 + 0x30]
	0x037EEA18 B.EQ 0x37EEC98
	0x037EEA1C CMP W8, 0x4
	0x037EEA20 STR X20, [X23 + 0x38]
	0x037EEA24 B.LS 0x37EEC98
	0x037EEA28 ADRP X8, 0x95B000
	0x037EEA2C LDR X8, [X8 + 0x658]
	0x037EEA30 MOV X0, X19
	0x037EEA34 MOV X1, X31
	0x037EEA38 LDR X8, [X8]
	0x037EEA3C STR X8, [X23 + 0x40]
	0x037EEA40 BL 0x33BE520
	0x037EEA44 CBZ X0, 0x37EEC94
	0x037EEA48 LDR X8, [X0]
	0x037EEA4C LDP X9, X1, [X8 + 0x1A8]
	0x037EEA50 BLR X9
	0x037EEA54 LDR W8, [X23 + 0x18]
	0x037EEA58 CMP W8, 0x5
	0x037EEA5C B.LS 0x37EEC98
	0x037EEA60 CMP W8, 0x6
	0x037EEA64 STR X0, [X23 + 0x48]
	0x037EEA68 B.EQ 0x37EEC98
	0x037EEA6C ADRP X8, 0x90D000
	0x037EEA70 LDR X8, [X8 + 0x9B0]
	0x037EEA74 MOV X0, X23
	0x037EEA78 MOV X1, X31
	0x037EEA7C LDR X8, [X8]
	0x037EEA80 STR X8, [X23 + 0x50]
	0x037EEA84 BL 0x32278CC
	0x037EEA88 ADRP X8, 0x905000
	0x037EEA8C LDR X8, [X8 + 0xA28]
	0x037EEA90 MOV X20, X0
	0x037EEA94 LDR X8, [X8]
	0x037EEA98 LDR W9, [X8 + 0xE0]
	0x037EEA9C CBNZ W9, 0x37EEAA8
	0x037EEAA0 MOV X0, X8
	0x037EEAA4 BL 0x1C16DFC
	0x037EEAA8 MOV X0, X20
	0x037EEAAC MOV X1, X19
	0x037EEAB0 MOV X2, X31
	0x037EEAB4 BL 0x3C065A4
	0x037EEAB8 ADRP X20, 0x95B000
	0x037EEABC LDR X8, [X24]
	0x037EEAC0 LDR X20, [X20 + 0x638]
	0x037EEAC4 MOV W1, W21
	0x037EEAC8 LDR X0, [X8 + 0xB8]
	0x037EEACC LDR X2, [X20]
	0x037EEAD0 ADD X8, X31, 0x40
	0x037EEAD4 BL 0x2DF7EF0
	0x037EEAD8 ADRP X8, 0x905000
	0x037EEADC LDR X8, [X8 + 0x598]
	0x037EEAE0 LDR X19, [X31 + 0x60]
	0x037EEAE4 LDR X0, [X8]
	0x037EEAE8 LDR W8, [X0 + 0xE0]
	0x037EEAEC CBNZ W8, 0x37EEAF4
	0x037EEAF0 BL 0x1C16DFC
	0x037EEAF4 MOV X0, X19
	0x037EEAF8 MOV X1, X31
	0x037EEAFC MOV X2, X31
	0x037EEB00 BL 0x3C3883C
	0x037EEB04 TBZ X0, 0x0, 0x37EEB54
	0x037EEB08 LDR X8, [X24]
	0x037EEB0C LDR X2, [X20]
	0x037EEB10 MOV W1, W21
	0x037EEB14 LDR X0, [X8 + 0xB8]
	0x037EEB18 ADD X8, X31, 0x40
	0x037EEB1C BL 0x2DF7EF0
	0x037EEB20 LDP V0, V1, [X31 + 0x40]
	0x037EEB24 LDR X8, [X31 + 0x60]
	0x037EEB28 ADD X0, X31, 0x0
	0x037EEB2C STP V0, V1, [X31]
	0x037EEB30 STR X8, [X31 + 0x20]
	0x037EEB34 BL 0x37EECD8
	0x037EEB38 ADRP X9, 0x95B000
	0x037EEB3C LDR X8, [X24]
	0x037EEB40 LDR X9, [X9 + 0x630]
	0x037EEB44 MOV W1, W21
	0x037EEB48 LDR X0, [X8 + 0xB8]
	0x037EEB4C LDR X2, [X9]
	0x037EEB50 BL 0x2DF8E2C
	0x037EEB54 LDP X20, X19, [X31 + 0xA0]
	0x037EEB58 LDP X22, X21, [X31 + 0x90]
	0x037EEB5C LDP X24, X23, [X31 + 0x80]
	0x037EEB60 LDR X30, [X31 + 0x70]
	0x037EEB64 ADD X31, X31, 0xB0
	0x037EEB68 RET
	0x037EEB6C B 0x37EEB70
	0x037EEB70 MOV X21, X0
	0x037EEB74 CMP W1, 0x1
	0x037EEB78 B.NE 0x37EECC4
	0x037EEB7C MOV X0, X21
	0x037EEB80 BL 0x3EB1AD0
	0x037EEB84 MOV X21, X0
	0x037EEB88 ADRP X0, 0x905000
	0x037EEB8C LDR X0, [X0 + 0x7D0]
	0x037EEB90 BL 0x1C16D08
	0x037EEB94 LDR X8, [X21]
	0x037EEB98 LDR X1, [X8]
	0x037EEB9C BL 0x1C17270
	0x037EEBA0 TBZ X0, 0x0, 0x37EEC9C
	0x037EEBA4 LDR X21, [X21]
	0x037EEBA8 BL 0x3EB1AE0
	0x037EEBAC ADRP X0, 0x905000
	0x037EEBB0 LDR X0, [X0 + 0xAC8]
	0x037EEBB4 BL 0x1C16D08
	0x037EEBB8 MOVZ W1, 0x5
	0x037EEBBC BL 0x1C16D6C
	0x037EEBC0 CBZ X0, 0x37EEC94
	0x037EEBC4 MOV X22, X0
	0x037EEBC8 ADRP X0, 0x95B000
	0x037EEBCC LDR X0, [X0 + 0x688]
	0x037EEBD0 BL 0x1C16D08
	0x037EEBD4 LDR W8, [X22 + 0x18]
	0x037EEBD8 CBZ W8, 0x37EEC98
	0x037EEBDC CMP W8, 0x1
	0x037EEBE0 STR X0, [X22 + 0x20]
	0x037EEBE4 B.EQ 0x37EEC98
	0x037EEBE8 STR X20, [X22 + 0x28]
	0x037EEBEC ADRP X0, 0x95B000
	0x037EEBF0 LDR X0, [X0 + 0x690]
	0x037EEBF4 BL 0x1C16D08
	0x037EEBF8 LDR W8, [X22 + 0x18]
	0x037EEBFC CMP W8, 0x2
	0x037EEC00 B.LS 0x37EEC98
	0x037EEC04 STR X0, [X22 + 0x30]
	0x037EEC08 MOV X0, X19
	0x037EEC0C MOV X1, X31
	0x037EEC10 BL 0x33BE520
	0x037EEC14 CBZ X0, 0x37EEC94
	0x037EEC18 LDR X8, [X0]
	0x037EEC1C LDP X9, X1, [X8 + 0x1A8]
	0x037EEC20 BLR X9
	0x037EEC24 LDR W8, [X22 + 0x18]
	0x037EEC28 CMP W8, 0x3
	0x037EEC2C B.LS 0x37EEC98
	0x037EEC30 STR X0, [X22 + 0x38]
	0x037EEC34 ADRP X0, 0x95B000
	0x037EEC38 LDR X0, [X0 + 0x698]
	0x037EEC3C BL 0x1C16D08
	0x037EEC40 LDR W8, [X22 + 0x18]
	0x037EEC44 CMP W8, 0x4
	0x037EEC48 B.LS 0x37EEC98
	0x037EEC4C STR X0, [X22 + 0x40]
	0x037EEC50 MOV X0, X22
	0x037EEC54 MOV X1, X31
	0x037EEC58 BL 0x32278CC
	0x037EEC5C MOV X19, X0
	0x037EEC60 ADRP X0, 0x905000
	0x037EEC64 LDR X0, [X0 + 0xA28]
	0x037EEC68 BL 0x1C16D08
	0x037EEC6C LDR W8, [X0 + 0xE0]
	0x037EEC70 CBNZ W8, 0x37EEC78
	0x037EEC74 BL 0x1C16DFC
	0x037EEC78 MOV X0, X19
	0x037EEC7C MOV X1, X31
	0x037EEC80 BL 0x3C0649C
	0x037EEC84 MOV X0, X21
	0x037EEC88 MOV X1, X31
	0x037EEC8C BL 0x3C02C84
	0x037EEC90 B 0x37EEB54
	0x037EEC94 BL 0x1C16F20
	0x037EEC98 BL 0x1C16F28
	0x037EEC9C MOVZ W0, 0x8
	0x037EECA0 BL 0x3EB1AF0
	0x037EECA4 LDR X8, [X21]
	0x037EECA8 STR X8, [X0]
	0x037EECAC ADRP X1, 0x6C6000
	0x037EECB0 ADD X1, X1, 0xE58
	0x037EECB4 MOV X2, X31
	0x037EECB8 BL 0x3EB1B00
	0x037EECBC MOV X21, X0
	0x037EECC0 BL 0x3EB1AE0
	0x037EECC4 MOV X0, X21
	0x037EECC8 BL 0x1D2C690
	0x037EECCC BL 0x1990590
	0x037EECD0 LDR X0, [X0 + 0x20]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+160], D9
	003 Move [X31+168], D8
	004 Move [X31+176], X30
	005 Move [X31+192], X22
	006 Move [X31+200], X21
	007 Move [X31+208], X20
	008 Move [X31+216], X19
	009 Move X20, 0xBF4000
	010 Move W8, [X20+852]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {45}
	016 Move X0, 0x90A000
	017 Move X0, [X0+984]
	018 Call 0x1C17CF4
	019 Move X0, 0x907000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x95A000
	023 Move X0, [X0+1032]
	024 Call 0x1C17CF4
	025 Move X0, 0x92E000
	026 Move X0, [X0+624]
	027 Call 0x1C17CF4
	028 Move X0, 0x92E000
	029 Move X0, [X0+1320]
	030 Call 0x1C17CF4
	031 Move X0, 0x906000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0x95C000
	035 Move X0, [X0+1504]
	036 Call 0x1C17CF4
	037 Move X0, 0x95C000
	038 Move X0, [X0+1512]
	039 Call 0x1C17CF4
	040 Move X0, 0x95C000
	041 Move X0, [X0+1520]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X20+852], W8
	045 Move W8, [X19+32]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, X19
	048 Call VirtualMouseInput.TryEnableHardwareCursor, X0
	049 Move X21, 0x92E000
	050 Move X0, [X19+240]
	051 Move X21, [X21+624]
	052 Compare X0, 0
	053 JumpIfEqual {69}
	054 Move X1, X31
	055 Call InputDevice.get_added, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {103}
	060 Move X0, [X21]
	061 Move X20, [X19+240]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X20
	067 Move X1, X31
	068 Call InputSystem.AddDevice, X0
	069 Move X0, [X21]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move X8, 0x95C000
	075 Move X8, [X8+1520]
	076 Move X1, X31
	077 Move X2, X31
	078 Move X3, X31
	079 Move X0, [X8]
	080 Call InputSystem.AddDevice, X0, X1, X2
	081 Compare X0, 0
	082 JumpIfEqual {102}
	083 Move X8, 0x92E000
	084 Move X8, [X8+1320]
	085 Move X9, [X0]
	086 Move X1, [X8]
	087 Move W10, [X9+304]
	088 Move W8, [X1+304]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X10, [X9+200]
	091 Subtract X9, X8, 1
	092 Move X10, [X10]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move [X19+240], X0
	095 Move X10, [X0]
	096 Move W11, [X10+304]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X8, [X10+200]
	099 Move X8, [X8]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Call 0x1C181E0
	102 Move [X19+240], X0
	103 Move X8, 0x906000
	104 Move X8, [X8+1432]
	105 Move X20, [X19+48]
	106 Move X0, [X8]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1C17DFC
	111 Move X0, X20
	112 Move X1, X31
	113 Move X2, X31
	114 Call Object.op_Inequality, X0, X1
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {143}
	119 Move X0, [X19+48]
	120 Compare X0, 0
	121 JumpIfEqual {284}
	122 Move X1, X31
	123 Call RectTransform.get_anchoredPosition, X0
	124 Move X8, [X19+240]
	125 Compare X8, 0
	126 JumpIfEqual {284}
	127 Move X0, [X8+368]
	128 Move X8, 0x95A000
	129 Move X8, [X8+1032]
	130 Move W1, W31
	131 Move X2, X31
	132 Move V8, V0
	133 Move X3, [X8]
	134 Move V9, V1
	135 Call InputState.Change, X0, X1, X2, X3
	136 Move X0, [X19+248]
	137 Compare X0, 0
	138 JumpIfEqual {143}
	139 Move V0, V8
	140 Move V1, V9
	141 Move X1, X31
	142 Call Mouse.WarpCursorPosition, X0, X1
	143 Move X20, [X19+256]
	144 Compare X20, 0
	145 JumpIfNotEqual {158}
	146 Move X8, 0x907000
	147 Move X8, [X8+3696]
	148 Move X0, [X8]
	149 Call 0x1C17F10
	150 Move X8, 0x95C000
	151 Move X8, [X8+1504]
	152 Move X1, X19
	153 Move X3, X31
	154 Move X20, X0
	155 Move X2, [X8]
	156 Call Action..ctor, X0, X1, X2
	157 Move [X19+256], X20
	158 Move X0, [X21]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X0, X20
	164 Move X1, X31
	165 Call InputSystem.add_onAfterUpdate, X0
	166 Move X20, [X19+264]
	167 Compare X20, 0
	168 JumpIfNotEqual {181}
	169 Move X8, 0x90A000
	170 Move X8, [X8+984]
	171 Move X0, [X8]
	172 Call 0x1C17F10
	173 Move X8, 0x95C000
	174 Move X8, [X8+1512]
	175 Move X1, X19
	176 Move X3, X31
	177 Move X20, X0
	178 Move X2, [X8]
	179 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	180 Move [X19+264], X20
	181 Move X8, [X19+104]
	182 NotImplemented "Instruction LDUR not yet implemented."
	183 Add X0, X31, 128
	184 Move W2, 1
	185 Move X1, X20
	186 Add X21, X19, 88
	187 Move [X31+144], X8
	188 Move [X31+8], V0
	189 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	190 Move X8, [X19+152]
	191 NotImplemented "Instruction LDUR not yet implemented."
	192 Add X0, X31, 96
	193 Move W2, 1
	194 Move [X31+112], X8
	195 Move [X31+6], V0
	196 Move X1, [X19+264]
	197 Add X20, X19, 136
	198 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	199 Move X8, [X19+128]
	200 Move V0, [X19+7]
	201 Add X0, X31, 64
	202 Move W2, 1
	203 Move [X31+80], X8
	204 Move [X31+4], V0
	205 Move X1, [X19+264]
	206 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	207 Move X8, [X19+176]
	208 Move V0, [X19+10]
	209 Add X0, X31, 32
	210 Move W2, 1
	211 Move [X31+48], X8
	212 Move [X31+2], V0
	213 Move X1, [X19+264]
	214 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	215 Move X8, [X19+200]
	216 NotImplemented "Instruction LDUR not yet implemented."
	217 Add X0, X31, 0
	218 Move W2, 1
	219 Move [X31+16], X8
	220 Move [X31], V0
	221 Move X1, [X19+264]
	222 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	223 Add X0, X19, 64
	224 Move X1, X31
	225 Call InputActionProperty.get_action, X0
	226 Compare X0, 0
	227 JumpIfEqual {230}
	228 Move X1, X31
	229 Call InputAction.Enable, X0
	230 Move X0, X21
	231 Move X1, X31
	232 Add X22, X19, 112
	233 Call InputActionProperty.get_action, X0
	234 Compare X0, 0
	235 JumpIfEqual {238}
	236 Move X1, X31
	237 Call InputAction.Enable, X0
	238 Move X0, X20
	239 Move X1, X31
	240 Add X21, X19, 160
	241 Call InputActionProperty.get_action, X0
	242 Compare X0, 0
	243 JumpIfEqual {246}
	244 Move X1, X31
	245 Call InputAction.Enable, X0
	246 Move X0, X22
	247 Move X1, X31
	248 Add X20, X19, 184
	249 Call InputActionProperty.get_action, X0
	250 Compare X0, 0
	251 JumpIfEqual {254}
	252 Move X1, X31
	253 Call InputAction.Enable, X0
	254 Move X0, X21
	255 Move X1, X31
	256 Call InputActionProperty.get_action, X0
	257 Compare X0, 0
	258 JumpIfEqual {261}
	259 Move X1, X31
	260 Call InputAction.Enable, X0
	261 Move X0, X20
	262 Move X1, X31
	263 Call InputActionProperty.get_action, X0
	264 Compare X0, 0
	265 JumpIfEqual {268}
	266 Move X1, X31
	267 Call InputAction.Enable, X0
	268 Add X0, X19, 208
	269 Move X1, X31
	270 Call InputActionProperty.get_action, X0
	271 Compare X0, 0
	272 JumpIfEqual {275}
	273 Move X1, X31
	274 Call InputAction.Enable, X0
	275 Move X20, [X31+208]
	276 Move X19, [X31+216]
	277 Move X22, [X31+192]
	278 Move X21, [X31+200]
	279 Move X30, [X31+176]
	280 Move D9, [X31+160]
	281 Move D8, [X31+168]
	282 Add X31, X31, 224
	283 Return 
	284 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x037EECD4 RET
	0x037EECD8 STR X30, [X31 - 0x20]!
	0x037EECDC STP X20, X19, [X31 + 0x10]
	0x037EECE0 ADRP X19, 0xBF3000
	0x037EECE4 LDRB W8, [X19 + 0x361]
	0x037EECE8 MOV X20, X0
	0x037EECEC TBNZ X8, 0x0, 0x37EED1C
	0x037EECF0 ADRP X0, 0x92D000
	0x037EECF4 LDR X0, [X0 + 0x270]
	0x037EECF8 BL 0x1C16CF4
	0x037EECFC ADRP X0, 0x92D000
	0x037EED00 LDR X0, [X0 + 0xD68]
	0x037EED04 BL 0x1C16CF4
	0x037EED08 ADRP X0, 0x95B000
	0x037EED0C LDR X0, [X0 + 0x6A0]
	0x037EED10 BL 0x1C16CF4
	0x037EED14 MOVZ W8, 0x1
	0x037EED18 STRB W8, [X19 + 0x361]
	0x037EED1C MOV X19, X20
	0x037EED20 LDR X8, [X19 + 0x8]!
	0x037EED24 CBZ X8, 0x37EED3C
	0x037EED28 ADRP X8, 0x92D000
	0x037EED2C LDR X8, [X8 + 0xD68]
	0x037EED30 MOV X0, X19
	0x037EED34 LDR X1, [X8]
	0x037EED38 BL 0x23C9DBC
	0x037EED3C LDR X20, [X20 + 0x18]
	0x037EED40 CBZ X20, 0x37EED68
	0x037EED44 ADRP X8, 0x92D000
	0x037EED48 LDR X8, [X8 + 0x270]
	0x037EED4C LDR X0, [X8]
	0x037EED50 LDR W8, [X0 + 0xE0]
	0x037EED54 CBNZ W8, 0x37EED5C
	0x037EED58 BL 0x1C16DFC
	0x037EED5C MOV X0, X20
	0x037EED60 MOV X1, X31
	0x037EED64 BL 0x376E798
	0x037EED68 STP X31, X31, [X19]
	0x037EED6C STR X31, [X19 + 0x10]
	0x037EED70 LDP X20, X19, [X31 + 0x10]
	0x037EED74 LDR X30, [X31], #0x20
	0x037EED78 RET
	0x037EED7C STR X30, [X31 - 0x10]!
	0x037EED80 CBZ X1, 0x37EEDA4
	0x037EED84 LDR X9, [X0 + 0x20]
	0x037EED88 STR X9, [X1 + 0x28]
	0x037EED8C LDP V1, V0, [X0]
	0x037EED90 STR X1, [X0 + 0x20]
	0x037EED94 STR X1, [X8 + 0x20]
	0x037EED98 STP V1, V0, [X8]
	0x037EED9C LDR X30, [X31], #0x10
	0x037EEDA0 RET
	0x037EEDA4 BL 0x1C16F20
	0x037EEDA8 STR X30, [X31 - 0x30]!
	0x037EEDAC STP X22, X21, [X31 + 0x10]
	0x037EEDB0 STP X20, X19, [X31 + 0x20]
	0x037EEDB4 ADRP X20, 0xBF3000
	0x037EEDB8 LDRB W8, [X20 + 0x35E]
	0x037EEDBC MOV X19, X0
	0x037EEDC0 TBNZ X8, 0x0, 0x37EEDF0
	0x037EEDC4 ADRP X0, 0x92D000
	0x037EEDC8 LDR X0, [X0 + 0xED0]
	0x037EEDCC BL 0x1C16CF4
	0x037EEDD0 ADRP X0, 0x92D000
	0x037EEDD4 LDR X0, [X0 + 0xEC8]
	0x037EEDD8 BL 0x1C16CF4
	0x037EEDDC ADRP X0, 0x92D000
	0x037EEDE0 LDR X0, [X0 + 0x270]
	0x037EEDE4 BL 0x1C16CF4
	0x037EEDE8 MOVZ W8, 0x1
	0x037EEDEC STRB W8, [X20 + 0x35E]
	0x037EEDF0 LDR X8, [X19 + 0x20]
	0x037EEDF4 CBZ X8, 0x37EEE64
	0x037EEDF8 ADRP X8, 0x92D000
	0x037EEDFC LDR X8, [X8 + 0xEC8]
	0x037EEE00 LDR X8, [X8]
	0x037EEE04 LDR X8, [X8 + 0xB8]
	0x037EEE08 LDR X20, [X8]
	0x037EEE0C CBZ X20, 0x37EEED8
	0x037EEE10 ADRP X10, 0x92D000
	0x037EEE14 LDR X8, [X20]
	0x037EEE18 LDR X10, [X10 + 0xED0]
	0x037EEE1C ADRP X22, 0x92D000
	0x037EEE20 ADD X21, X19, 0x30
	0x037EEE24 LDRH W9, [X8 + 0x12E]
	0x037EEE28 LDR X1, [X10]
	0x037EEE2C LDR X22, [X22 + 0x270]
	0x037EEE30 CBZ X9, 0x37EEE54
	0x037EEE34 LDR X10, [X8 + 0xB0]
	0x037EEE38 ADD X10, X10, 0x8
	0x037EEE3C LDUR X11, [X10 - 0x8]
	0x037EEE40 CMP X11, X1
	0x037EEE44 B.EQ 0x37EEE74
	0x037EEE48 SUBS X9, X9, 0x1
	0x037EEE4C ADD X10, X10, 0x10
	0x037EEE50 B.NE 0x37EEE3C
	0x037EEE54 MOVZ W2, 0x13
	0x037EEE58 MOV X0, X20
	0x037EEE5C BL 0x1C5C788
	0x037EEE60 B 0x37EEE84
	0x037EEE64 LDP X20, X19, [X31 + 0x20]
	0x037EEE68 LDP X22, X21, [X31 + 0x10]
	0x037EEE6C LDR X30, [X31], #0x30
	0x037EEE70 RET
	0x037EEE74 LDR W9, [X10]
	0x037EEE78 ADD W9, W9, 0x13
	0x037EEE7C ADD X8, X8, W9, 0x4, SXTW
	0x037EEE80 ADD X0, X8, 0x138
	0x037EEE84 LDP X8, X1, [X0]
	0x037EEE88 MOV X0, X20
	0x037EEE8C BLR X8
	0x037EEE90 MOV X0, X21
	0x037EEE94 MOV X1, X31
	0x037EEE98 BL 0x380289C
	0x037EEE9C LDR X0, [X19 + 0x20]
	0x037EEEA0 LDR X1, [X19 + 0x30]
	0x037EEEA4 MOV X2, X31
	0x037EEEA8 BL 0x3774984
	0x037EEEAC LDR X0, [X22]
	0x037EEEB0 LDR X19, [X19 + 0x30]
	0x037EEEB4 LDR W8, [X0 + 0xE0]
	0x037EEEB8 CBNZ W8, 0x37EEEC0
	0x037EEEBC BL 0x1C16DFC
	0x037EEEC0 MOV X0, X19
	0x037EEEC4 LDP X20, X19, [X31 + 0x20]
	0x037EEEC8 LDP X22, X21, [X31 + 0x10]
	0x037EEECC MOV X1, X31
	0x037EEED0 LDR X30, [X31], #0x30
	0x037EEED4 B 0x376FAF0
	0x037EEED8 BL 0x1C16F20
	0x037EEEDC B 0x37EE5B8
	0x037EEEE0 SUB X31, X31, 0xB0
	0x037EEEE4 STP X30, X23, [X31 + 0x80]
	0x037EEEE8 STP X22, X21, [X31 + 0x90]
	0x037EEEEC STP X20, X19, [X31 + 0xA0]
	0x037EEEF0 ADRP X20, 0xBF3000
	0x037EEEF4 LDRB W8, [X20 + 0x35F]
	0x037EEEF8 MOV X19, X0
	0x037EEEFC TBNZ X8, 0x0, 0x37EEF44
	0x037EEF00 ADRP X0, 0x95B000
	0x037EEF04 LDR X0, [X0 + 0x630]
	0x037EEF08 BL 0x1C16CF4
	0x037EEF0C ADRP X0, 0x95B000

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+160], X30
	003 Move [X31+176], X24
	004 Move [X31+184], X23
	005 Move [X31+192], X22
	006 Move [X31+200], X21
	007 Move [X31+208], X20
	008 Move [X31+216], X19
	009 Move X20, 0xBF4000
	010 Move W8, [X20+853]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x92E000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+853], W8
	021 Move X21, 0x92E000
	022 Move X0, [X19+240]
	023 Move X21, [X21+624]
	024 Compare X0, 0
	025 JumpIfEqual {41}
	026 Move X1, X31
	027 Call InputDevice.get_added, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {41}
	032 Move X0, [X21]
	033 Move X20, [X19+240]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Call InputSystem.RemoveDevice, X0
	041 Move X20, [X19+248]
	042 Compare X20, 0
	043 JumpIfEqual {53}
	044 Move X0, [X21]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Call InputSystem.EnableDevice, X0
	052 Move [X19+248], X31
	053 Move X20, [X19+256]
	054 Compare X20, 0
	055 JumpIfEqual {64}
	056 Move X0, [X21]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X31
	063 Call InputSystem.remove_onAfterUpdate, X0
	064 Add X0, X19, 64
	065 Move X1, X31
	066 Call InputActionProperty.get_action, X0
	067 Compare X0, 0
	068 JumpIfEqual {71}
	069 Move X1, X31
	070 Call InputAction.Disable, X0
	071 Add X20, X19, 88
	072 Move X0, X20
	073 Move X1, X31
	074 Call InputActionProperty.get_action, X0
	075 Compare X0, 0
	076 JumpIfEqual {79}
	077 Move X1, X31
	078 Call InputAction.Disable, X0
	079 Add X21, X19, 136
	080 Move X0, X21
	081 Move X1, X31
	082 Call InputActionProperty.get_action, X0
	083 Compare X0, 0
	084 JumpIfEqual {87}
	085 Move X1, X31
	086 Call InputAction.Disable, X0
	087 Add X22, X19, 112
	088 Move X0, X22
	089 Move X1, X31
	090 Call InputActionProperty.get_action, X0
	091 Compare X0, 0
	092 JumpIfEqual {95}
	093 Move X1, X31
	094 Call InputAction.Disable, X0
	095 Add X23, X19, 160
	096 Move X0, X23
	097 Move X1, X31
	098 Call InputActionProperty.get_action, X0
	099 Compare X0, 0
	100 JumpIfEqual {103}
	101 Move X1, X31
	102 Call InputAction.Disable, X0
	103 Add X24, X19, 184
	104 Move X0, X24
	105 Move X1, X31
	106 Call InputActionProperty.get_action, X0
	107 Compare X0, 0
	108 JumpIfEqual {111}
	109 Move X1, X31
	110 Call InputAction.Disable, X0
	111 Add X0, X19, 208
	112 Move X1, X31
	113 Call InputActionProperty.get_action, X0
	114 Compare X0, 0
	115 JumpIfEqual {118}
	116 Move X1, X31
	117 Call InputAction.Disable, X0
	118 Move X1, [X19+264]
	119 Compare X1, 0
	120 JumpIfEqual {160}
	121 Move X8, [X20+16]
	122 Move V0, [X20]
	123 Add X0, X31, 128
	124 Move W2, W31
	125 Move [X31+144], X8
	126 Move [X31+8], V0
	127 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	128 Move X8, [X21+16]
	129 Move V0, [X21]
	130 Add X0, X31, 96
	131 Move W2, W31
	132 Move [X31+112], X8
	133 Move [X31+6], V0
	134 Move X1, [X19+264]
	135 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	136 Move X8, [X22+16]
	137 Move V0, [X22]
	138 Add X0, X31, 64
	139 Move W2, W31
	140 Move [X31+80], X8
	141 Move [X31+4], V0
	142 Move X1, [X19+264]
	143 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	144 Move X8, [X23+16]
	145 Move V0, [X23]
	146 Add X0, X31, 32
	147 Move W2, W31
	148 Move [X31+48], X8
	149 Move [X31+2], V0
	150 Move X1, [X19+264]
	151 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	152 Move X8, [X24+16]
	153 Move V0, [X24]
	154 Add X0, X31, 0
	155 Move W2, W31
	156 Move [X31+16], X8
	157 Move [X31], V0
	158 Move X1, [X19+264]
	159 Call VirtualMouseInput.SetActionCallback, X0, X1, X2
	160 Move [X19+272], X31
	161 Move [X19+280], X31
	162 Move X20, [X31+208]
	163 Move X19, [X31+216]
	164 Move X22, [X31+192]
	165 Move X21, [X31+200]
	166 Move X24, [X31+176]
	167 Move X23, [X31+184]
	168 Move X30, [X31+160]
	169 Add X31, X31, 224
	170 Return 

Method: System.Void TryFindCanvas()

Disassembly:
	0x037EE310 BL 0x1C16CF4
	0x037EE314 MOVZ W8, 0x1
	0x037EE318 STRB W8, [X20 + 0x359]
	0x037EE31C STR X31, [X31 + 0x8]
	0x037EE320 STP X31, X31, [X31 + 0x20]
	0x037EE324 STUR X31, [X31 + 0x36]
	0x037EE328 STR X31, [X31 + 0x30]
	0x037EE32C LDR X8, [X19 + 0xF0]
	0x037EE330 CBZ X8, 0x37EE480
	0x037EE334 ADD X0, X31, 0x10
	0x037EE338 MOV X1, X31
	0x037EE33C BL 0x3735E5C
	0x037EE340 MOV X20, X0
	0x037EE344 ADD X0, X19, 0x58
	0x037EE348 MOV X1, X31
	0x037EE34C STR X31, [X31 + 0x8]
	0x037EE350 BL 0x3745120
	0x037EE354 CMP X20, X0
	0x037EE358 B.EQ 0x37EE3B4
	0x037EE35C ADD X0, X19, 0x88
	0x037EE360 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBF4000
	005 Move W8, [X20+854]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x95C000
	012 Move X0, [X0+1496]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+854], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {23}
	019 Move X8, 0x95C000
	020 Move X8, [X8+1496]
	021 Move X1, [X8]
	022 Call 0x21A4F50, X0
	023 Move [X19+232], X0
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return 

Method: System.Void TryEnableHardwareCursor()

Disassembly:
	0x037EE0E8 LDR X20, [X19 + 0xE8]
	0x037EE0EC LDR X0, [X22]
	0x037EE0F0 LDR W8, [X0 + 0xE0]
	0x037EE0F4 CBNZ W8, 0x37EE0FC
	0x037EE0F8 BL 0x1C16DFC
	0x037EE0FC MOV X0, X20
	0x037EE100 MOV X1, X31
	0x037EE104 MOV X2, X31
	0x037EE108 FADD S11, S14, S11
	0x037EE10C FADD S12, S13, S12
	0x037EE110 BL 0x3C354F8
	0x037EE114 TBZ X0, 0x0, 0x37EE158
	0x037EE118 LDR X0, [X19 + 0xE8]
	0x037EE11C CBZ X0, 0x37EE2A8
	0x037EE120 MOV X1, X31
	0x037EE124 BL 0x3E24578
	0x037EE128 FADD S2, S2, S0
	0x037EE12C FCMP S11, S2
	0x037EE130 FCSEL S2, S2, S11, GT
	0x037EE134 FCMP S11, S0
	0x037EE138 FCSEL S11, S2, S0, PL
	0x037EE13C FCMP S12, S1
	0x037EE140 B.MI 0x37EE154
	0x037EE144 FADD S0, S3, S1
	0x037EE148 FCMP S12, S0
	0x037EE14C FCSEL S12, S0, S12, GT
	0x037EE150 B 0x37EE158
	0x037EE154 MOV V12.16B, V1.16B
	0x037EE158 LDR X8, [X19 + 0xF0]
	0x037EE15C CBZ X8, 0x37EE2A8
	0x037EE160 ADRP X20, 0x959000
	0x037EE164 LDR X0, [X8 + 0x170]
	0x037EE168 LDR X20, [X20 + 0x408]
	0x037EE16C MOV V0.16B, V11.16B
	0x037EE170 MOV V1.16B, V12.16B
	0x037EE174 MOV W1, W31
	0x037EE178 LDR X3, [X20]
	0x037EE17C MOV X2, X31
	0x037EE180 BL 0x2209FB4
	0x037EE184 LDR X8, [X19 + 0xF0]
	0x037EE188 CBZ X8, 0x37EE2A8
	0x037EE18C LDR X0, [X8 + 0x178]
	0x037EE190 LDR X3, [X20]
	0x037EE194 MOV V0.16B, V14.16B
	0x037EE198 MOV V1.16B, V13.16B
	0x037EE19C MOV W1, W31
	0x037EE1A0 MOV X2, X31
	0x037EE1A4 BL 0x2209FB4
	0x037EE1A8 LDR X0, [X22]
	0x037EE1AC LDR X20, [X19 + 0x30]
	0x037EE1B0 LDR W8, [X0 + 0xE0]
	0x037EE1B4 CBNZ W8, 0x37EE1BC
	0x037EE1B8 BL 0x1C16DFC
	0x037EE1BC MOV X0, X20
	0x037EE1C0 MOV X1, X31
	0x037EE1C4 MOV X2, X31
	0x037EE1C8 BL 0x3C354F8
	0x037EE1CC TBZ X0, 0x0, 0x37EE200
	0x037EE1D0 LDR W8, [X19 + 0x20]
	0x037EE1D4 CBZ W8, 0x37EE1E8
	0x037EE1D8 CMP W8, 0x1
	0x037EE1DC B.NE 0x37EE200
	0x037EE1E0 LDR X8, [X19 + 0xF8]
	0x037EE1E4 CBNZ X8, 0x37EE200
	0x037EE1E8 LDR X0, [X19 + 0x30]
	0x037EE1EC CBZ X0, 0x37EE2A8
	0x037EE1F0 MOV V0.16B, V11.16B
	0x037EE1F4 MOV V1.16B, V12.16B
	0x037EE1F8 MOV X1, X31
	0x037EE1FC BL 0x3C3E880
	0x037EE200 LDR X0, [X19 + 0xF8]
	0x037EE204 STR S8, [X19 + 0x118]
	0x037EE208 STR S9, [X19 + 0x11C]
	0x037EE20C STR D10, [X19 + 0x110]
	0x037EE210 CBZ X0, 0x37EE224
	0x037EE214 MOV V0.16B, V11.16B
	0x037EE218 MOV V1.16B, V12.16B
	0x037EE21C MOV X1, X31
	0x037EE220 BL 0x377E954
	0x037EE224 ADD X0, X19, 0xD0
	0x037EE228 MOV X1, X31
	0x037EE22C BL 0x3745120
	0x037EE230 CBZ X0, 0x37EE288
	0x037EE234 LDR X1, [X21]
	0x037EE238 BL 0x21F5E68
	0x037EE23C LDR X8, [X19 + 0xF0]
	0x037EE240 CBZ X8, 0x37EE2A8
	0x037EE244 LDR X0, [X8 + 0x1A0]
	0x037EE248 ADRP X8, 0x959000
	0x037EE24C LDR V2, [X19 + 0x3C]
	0x037EE250 LDR X8, [X8 + 0x408]
	0x037EE254 LDP X20, X19, [X31 + 0x50]
	0x037EE258 LDP X22, X21, [X31 + 0x40]
	0x037EE25C LDR X30, [X31 + 0x38]
	0x037EE260 LDR X3, [X8]
	0x037EE264 LDP D9, D8, [X31 + 0x28]
	0x037EE268 LDP D11, D10, [X31 + 0x18]
	0x037EE26C LDP D13, D12, [X31 + 0x8]
	0x037EE270 FMUL S1, S1, S2
	0x037EE274 FMUL S0, S0, S2
	0x037EE278 MOV W1, W31
	0x037EE27C MOV X2, X31
	0x037EE280 LDR V14, [X31], #0x60
	0x037EE284 B 0x2209FB4
	0x037EE288 LDP X20, X19, [X31 + 0x50]
	0x037EE28C LDP X22, X21, [X31 + 0x40]
	0x037EE290 LDR X30, [X31 + 0x38]
	0x037EE294 LDP D9, D8, [X31 + 0x28]
	0x037EE298 LDP D11, D10, [X31 + 0x18]
	0x037EE29C LDP D13, D12, [X31 + 0x8]
	0x037EE2A0 LDR V14, [X31], #0x60
	0x037EE2A4 RET
	0x037EE2A8 BL 0x1C16F20
	0x037EE2AC SUB X31, X31, 0x90
	0x037EE2B0 STP X30, X21, [X31 + 0x70]
	0x037EE2B4 STP X20, X19, [X31 + 0x80]
	0x037EE2B8 MRS X21, 0xC000
	0x037EE2BC LDR X8, [X21 + 0x28]
	0x037EE2C0 ADRP X20, 0xBF3000
	0x037EE2C4 MOV X19, X0
	0x037EE2C8 STR X8, [X31 + 0x68]
	0x037EE2CC LDRB W8, [X20 + 0x359]
	0x037EE2D0 STP X1, X2, [X31 + 0x10]
	0x037EE2D4 TBNZ X8, 0x0, 0x37EE31C
	0x037EE2D8 ADRP X0, 0x95B000
	0x037EE2DC LDR X0, [X0 + 0x5F8]
	0x037EE2E0 BL 0x1C16CF4
	0x037EE2E4 ADRP X0, 0x95B000
	0x037EE2E8 LDR X0, [X0 + 0x600]
	0x037EE2EC BL 0x1C16CF4
	0x037EE2F0 ADRP X0, 0x95B000
	0x037EE2F4 LDR X0, [X0 + 0x608]
	0x037EE2F8 BL 0x1C16CF4
	0x037EE2FC ADRP X0, 0x95B000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X20, 0xBF4000
	010 Move X22, 0x92E000
	011 Move W8, [X20+855]
	012 Move X22, [X22+624]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x95C000
	019 Move X0, [X0+760]
	020 Call 0x1C17CF4
	021 Move X0, 0x92E000
	022 Move X0, [X0+624]
	023 Call 0x1C17CF4
	024 Move X0, 0x92E000
	025 Move X0, [X0+1320]
	026 Call 0x1C17CF4
	027 Move X0, 0x906000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move X0, 0x958000
	031 Move X0, [X0+112]
	032 Call 0x1C17CF4
	033 Move X0, 0x958000
	034 Move X0, [X0+3608]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+855], W8
	038 Move X0, [X22]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X31
	044 Call InputSystem.get_devices
	045 Move X8, X1
	046 ShiftRight X8, 32
	047 And X8, X8, 0x7FFFFFFF
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move [X31], X0
	050 Move [X31+8], X1
	051 Move X23, 0x958000
	052 Move X24, 0x92E000
	053 Move X23, [X23+3608]
	054 Move X24, [X24+1320]
	055 Move W20, W31
	056 Move X2, [X23]
	057 Add X0, X31, 0
	058 Move W1, W20
	059 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	060 Compare X0, 0
	061 JumpIfEqual {161}
	062 Move X1, X31
	063 Move X21, X0
	064 Call InputDevice.get_native, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {78}
	069 Move X9, [X21]
	070 Move X8, [X24]
	071 Move W11, [X9+304]
	072 Move W10, [X8+304]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X9, [X9+200]
	075 Add X9, X9, X10
	076 NotImplemented "Instruction LDUR not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W8, [X31+12]
	079 Add W20, W20, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X19+248], X21
	082 Move X21, 0x906000
	083 Move X20, [X19+248]
	084 Move X21, [X21+1432]
	085 Compare X20, 0
	086 JumpIfEqual {132}
	087 Move X0, [X22]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X20
	093 Move W1, W31
	094 Move X2, X31
	095 Call InputSystem.DisableDevice, X0, X1
	096 Move X8, [X19+240]
	097 Compare X8, 0
	098 JumpIfEqual {114}
	099 Move X0, [X8+368]
	100 Compare X0, 0
	101 JumpIfEqual {161}
	102 Move X8, 0x95C000
	103 Move X20, [X19+248]
	104 Move X8, [X8+760]
	105 Move X1, [X8]
	106 Call InputControl`1<Vector2>.get_value, X0
	107 Compare X20, 0
	108 JumpIfEqual {161}
	109 Move S0, [X0]
	110 Move S1, [X0+4]
	111 Move X0, X20
	112 Move X1, X31
	113 Call Mouse.WarpCursorPosition, X0, X1
	114 Move X0, [X21]
	115 Move X20, [X19+40]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X0, X20
	121 Move X1, X31
	122 Move X2, X31
	123 Call Object.op_Inequality, X0, X1
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {152}
	128 Move X0, [X19+40]
	129 Compare X0, 0
	130 JumpIfEqual {161}
	131 Move W1, W31
	132 Move X0, [X21]
	133 Move X20, [X19+40]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X0, X20
	139 Move X1, X31
	140 Move X2, X31
	141 Call Object.op_Inequality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {152}
	146 Move X0, [X19+40]
	147 Compare X0, 0
	148 JumpIfEqual {161}
	149 Move W1, 1
	150 Move X2, X31
	151 Call Behaviour.set_enabled, X0, X1
	152 Move X20, [X31+64]
	153 Move X19, [X31+72]
	154 Move X22, [X31+48]
	155 Move X21, [X31+56]
	156 Move X24, [X31+32]
	157 Move X23, [X31+40]
	158 Move X30, [X31+16]
	159 Add X31, X31, 80
	160 Return 
	161 Call 0x1C17F20

Method: System.Void UpdateMotion()

Disassembly:
	0x037EEF10 LDR X0, [X0 + 0x638]
	0x037EEF14 BL 0x1C16CF4
	0x037EEF18 ADRP X0, 0x95B000
	0x037EEF1C LDR X0, [X0 + 0x640]
	0x037EEF20 BL 0x1C16CF4
	0x037EEF24 ADRP X0, 0x905000
	0x037EEF28 LDR X0, [X0 + 0x598]
	0x037EEF2C BL 0x1C16CF4
	0x037EEF30 ADRP X0, 0x95B000
	0x037EEF34 LDR X0, [X0 + 0x648]
	0x037EEF38 BL 0x1C16CF4
	0x037EEF3C MOVZ W8, 0x1
	0x037EEF40 STRB W8, [X20 + 0x35F]
	0x037EEF44 MOVI V0.2D, 0x0
	0x037EEF48 STR X31, [X31 + 0x20]
	0x037EEF4C STP V0, V0, [X31]
	0x037EEF50 LDR X8, [X19 + 0x20]
	0x037EEF54 CBZ X8, 0x37EF0C8
	0x037EEF58 ADRP X22, 0x95B000
	0x037EEF5C LDR X22, [X22 + 0x648]
	0x037EEF60 LDR X9, [X22]
	0x037EEF64 LDR X0, [X9 + 0xB8]
	0x037EEF68 LDR W9, [X0]
	0x037EEF6C CMP W9, 0x1
	0x037EEF70 B.LT 0x37EF0C8
	0x037EEF74 ADRP X23, 0x95B000
	0x037EEF78 LDR X21, [X8 + 0x78]
	0x037EEF7C LDR X23, [X23 + 0x638]
	0x037EEF80 MOV W20, W31
	0x037EEF84 LDR X2, [X23]
	0x037EEF88 ADD X8, X31, 0x50
	0x037EEF8C MOV W1, W20
	0x037EEF90 BL 0x2DF7EF0
	0x037EEF94 LDR X8, [X31 + 0x68]
	0x037EEF98 CMP X8, X21
	0x037EEF9C B.EQ 0x37EEFBC
	0x037EEFA0 LDR X8, [X22]
	0x037EEFA4 ADD W20, W20, 0x1
	0x037EEFA8 LDR X0, [X8 + 0xB8]
	0x037EEFAC LDR W8, [X0]
	0x037EEFB0 CMP W20, W8
	0x037EEFB4 B.LT 0x37EEF84
	0x037EEFB8 B 0x37EF0C8
	0x037EEFBC LDR X8, [X22]
	0x037EEFC0 LDR X2, [X23]
	0x037EEFC4 MOV W1, W20
	0x037EEFC8 LDR X0, [X8 + 0xB8]
	0x037EEFCC ADD X8, X31, 0x50
	0x037EEFD0 BL 0x2DF7EF0
	0x037EEFD4 LDR X8, [X31 + 0x70]
	0x037EEFD8 LDP V0, V1, [X31 + 0x50]
	0x037EEFDC ADD X0, X31, 0x0
	0x037EEFE0 MOV X1, X19
	0x037EEFE4 STR X8, [X31 + 0x20]
	0x037EEFE8 ADD X8, X31, 0x50
	0x037EEFEC STP V0, V1, [X31]
	0x037EEFF0 BL 0x37EF0DC
	0x037EEFF4 ADRP X8, 0x905000
	0x037EEFF8 LDP V0, V1, [X31 + 0x50]
	0x037EEFFC LDR X8, [X8 + 0x598]
	0x037EF000 LDR X21, [X31 + 0x70]
	0x037EF004 STP V0, V1, [X31 + 0x30]
	0x037EF008 LDR X0, [X8]
	0x037EF00C LDR W8, [X0 + 0xE0]
	0x037EF010 CBNZ W8, 0x37EF018
	0x037EF014 BL 0x1C16DFC
	0x037EF018 MOV X0, X21
	0x037EF01C MOV X1, X31
	0x037EF020 MOV X2, X31
	0x037EF024 BL 0x3C3883C
	0x037EF028 TBZ X0, 0x0, 0x37EF07C
	0x037EF02C LDR X8, [X22]
	0x037EF030 LDR X2, [X23]
	0x037EF034 MOV W1, W20
	0x037EF038 LDR X0, [X8 + 0xB8]
	0x037EF03C ADD X8, X31, 0x50
	0x037EF040 BL 0x2DF7EF0
	0x037EF044 LDP V0, V1, [X31 + 0x50]
	0x037EF048 LDR X8, [X31 + 0x70]
	0x037EF04C ADD X0, X31, 0x0
	0x037EF050 STP V0, V1, [X31]
	0x037EF054 STR X8, [X31 + 0x20]
	0x037EF058 BL 0x37EECD8
	0x037EF05C ADRP X9, 0x95A000
	0x037EF060 LDR X8, [X22]
	0x037EF064 LDR X9, [X9 + 0x630]
	0x037EF068 MOV W1, W20
	0x037EF06C LDR X0, [X8 + 0xB8]
	0x037EF070 LDR X2, [X9]
	0x037EF074 BL 0x2DF8E2C
	0x037EF078 B 0x37EF0C0
	0x037EF07C ADRP X9, 0x95A000
	0x037EF080 LDR X8, [X22]
	0x037EF084 LDR X9, [X9 + 0x640]
	0x037EF088 LDP V0, V1, [X31 + 0x30]
	0x037EF08C ADD X2, X31, 0x50
	0x037EF090 LDR X0, [X8 + 0xB8]
	0x037EF094 LDR X3, [X9]
	0x037EF098 MOV W1, W20
	0x037EF09C STP V0, V1, [X31 + 0x50]
	0x037EF0A0 STR X21, [X31 + 0x70]
	0x037EF0A4 BL 0x2DF7F9C
	0x037EF0A8 LDR X0, [X19 + 0x20]
	0x037EF0AC MOV X1, X31
	0x037EF0B0 BL 0x377394C
	0x037EF0B4 TBNZ X0, 0x0, 0x37EF0C0
	0x037EF0B8 MOV X0, X19
	0x037EF0BC BL 0x37EEDA8
	0x037EF0C0 STR X31, [X19 + 0x20]
	0x037EF0C4 STR X31, [X19 + 0x30]
	0x037EF0C8 LDP X20, X19, [X31 + 0xA0]
	0x037EF0CC LDP X22, X21, [X31 + 0x90]
	0x037EF0D0 LDP X30, X23, [X31 + 0x80]
	0x037EF0D4 ADD X31, X31, 0xB0
	0x037EF0D8 RET
	0x037EF0DC STR X30, [X31 - 0x40]!
	0x037EF0E0 STP X24, X23, [X31 + 0x10]
	0x037EF0E4 STP X22, X21, [X31 + 0x20]
	0x037EF0E8 STP X20, X19, [X31 + 0x30]
	0x037EF0EC ADRP X22, 0xBF2000
	0x037EF0F0 ADRP X23, 0x904000
	0x037EF0F4 MOV X19, X8
	0x037EF0F8 LDRB W8, [X22 + 0x360]
	0x037EF0FC LDR X23, [X23 + 0x598]
	0x037EF100 MOV X21, X1
	0x037EF104 MOV X20, X0
	0x037EF108 TBNZ X8, 0x0, 0x37EF120
	0x037EF10C ADRP X0, 0x904000
	0x037EF110 LDR X0, [X0 + 0x598]
	0x037EF114 BL 0x1C16CF4
	0x037EF118 MOVZ W8, 0x1
	0x037EF11C STRB W8, [X22 + 0x360]
	0x037EF120 LDR X0, [X23]
	0x037EF124 LDR X22, [X20 + 0x20]
	0x037EF128 LDR W8, [X0 + 0xE0]
	0x037EF12C CBNZ W8, 0x37EF134
	0x037EF130 BL 0x1C16DFC
	0x037EF134 MOV X0, X22
	0x037EF138 MOV X1, X21
	0x037EF13C MOV X2, X31
	0x037EF140 BL 0x3C3883C
	0x037EF144 TBZ X0, 0x0, 0x37EF158
	0x037EF148 CBZ X21, 0x37EF1E8
	0x037EF14C LDR X8, [X21 + 0x28]
	0x037EF150 STR X8, [X20 + 0x20]
	0x037EF154 B 0x37EF1C0
	0x037EF158 LDR X22, [X20 + 0x20]
	0x037EF15C CBZ X22, 0x37EF1E8
	0x037EF160 LDR X0, [X23]
	0x037EF164 MOV X24, X22
	0x037EF168 LDR X22, [X22 + 0x28]
	0x037EF16C LDR W8, [X0 + 0xE0]
	0x037EF170 CBNZ W8, 0x37EF178
	0x037EF174 BL 0x1C16DFC
	0x037EF178 MOV X0, X22
	0x037EF17C MOV X1, X31
	0x037EF180 MOV X2, X31
	0x037EF184 BL 0x3C354F8
	0x037EF188 TBZ X0, 0x0, 0x37EF1BC
	0x037EF18C LDR X0, [X23]
	0x037EF190 LDR W8, [X0 + 0xE0]
	0x037EF194 CBNZ W8, 0x37EF19C
	0x037EF198 BL 0x1C16DFC
	0x037EF19C MOV X0, X22
	0x037EF1A0 MOV X1, X21
	0x037EF1A4 MOV X2, X31
	0x037EF1A8 BL 0x3C354F8
	0x037EF1AC CBZ X22, 0x37EF1E8
	0x037EF1B0 TBNZ X0, 0x0, 0x37EF160
	0x037EF1B4 LDR X8, [X22 + 0x28]
	0x037EF1B8 STR X8, [X24 + 0x28]
	0x037EF1BC CBZ X21, 0x37EF1E8
	0x037EF1C0 STR X31, [X21 + 0x28]
	0x037EF1C4 LDR X8, [X20 + 0x20]
	0x037EF1C8 LDP V1, V0, [X20]
	0x037EF1CC LDP X22, X21, [X31 + 0x20]
	0x037EF1D0 LDP X24, X23, [X31 + 0x10]
	0x037EF1D4 STR X8, [X19 + 0x20]
	0x037EF1D8 STP V1, V0, [X19]
	0x037EF1DC LDP X20, X19, [X31 + 0x30]
	0x037EF1E0 LDR X30, [X31], #0x40
	0x037EF1E4 RET
	0x037EF1E8 BL 0x1C16F20
	0x037EF1EC STP D9, D8, [X31 - 0x20]!
	0x037EF1F0 STP X30, X19, [X31 + 0x10]
	0x037EF1F4 LDRB W8, [X0 + 0x4C]
	0x037EF1F8 CBZ W8, 0x37EF208
	0x037EF1FC LDP X30, X19, [X31 + 0x10]
	0x037EF200 LDP D9, D8, [X31], #0x20
	0x037EF204 RET
	0x037EF208 CBZ X1, 0x37EF240
	0x037EF20C LDR V8, [X1 + 0x104]
	0x037EF210 LDR V9, [X1 + 0x108]
	0x037EF214 MOV X19, X0
	0x037EF218 MOV X0, X1
	0x037EF21C MOV X1, X31
	0x037EF220 BL 0x3E4F314
	0x037EF224 MOV X1, X0
	0x037EF228 MOV X0, X19
	0x037EF22C LDP X30, X19, [X31 + 0x10]
	0x037EF230 MOV V0.16B, V8.16B
	0x037EF234 MOV V1.16B, V9.16B
	0x037EF238 LDP D9, D8, [X31], #0x20
	0x037EF23C B 0x37EF288
	0x037EF240 ADRP X0, 0x909000
	0x037EF244 LDR X0, [X0 + 0x528]
	0x037EF248 BL 0x1C16D08
	0x037EF24C BL 0x1C16F10
	0x037EF250 MOV X19, X0
	0x037EF254 ADRP X0, 0x95A000
	0x037EF258 LDR X0, [X0 + 0x348]
	0x037EF25C BL 0x1C16D08
	0x037EF260 MOV X1, X0
	0x037EF264 MOV X0, X19
	0x037EF268 MOV X2, X31
	0x037EF26C BL 0x330E100
	0x037EF270 ADRP X0, 0x95A000
	0x037EF274 LDR X0, [X0 + 0x6A8]
	0x037EF278 BL 0x1C16D08
	0x037EF27C MOV X1, X0
	0x037EF280 MOV X0, X19
	0x037EF284 BL 0x1C16DEC
	0x037EF288 STP D9, D8, [X31 - 0x40]!
	0x037EF28C STR X30, [X31 + 0x10]
	0x037EF290 STP X22, X21, [X31 + 0x20]
	0x037EF294 STP X20, X19, [X31 + 0x30]
	0x037EF298 ADRP X21, 0xBF2000
	0x037EF29C LDRB W8, [X21 + 0x363]
	0x037EF2A0 MOV X20, X1
	0x037EF2A4 MOV V8.16B, V1.16B
	0x037EF2A8 MOV V9.16B, V0.16B

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0xBF4000
	014 Move W8, [X20+856]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x92E000
	021 Move X0, [X0+960]
	022 Call 0x1C17CF4
	023 Move X0, 0x95C000
	024 Move X0, [X0+760]
	025 Call 0x1C17CF4
	026 Move X0, 0x95A000
	027 Move X0, [X0+1032]
	028 Call 0x1C17CF4
	029 Move X0, 0x906000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+856], W8
	034 Move X8, [X19+240]
	035 Compare X8, 0
	036 JumpIfEqual {254}
	037 Add X0, X19, 64
	038 Move X1, X31
	039 Call InputActionProperty.get_action, X0
	040 Compare X0, 0
	041 JumpIfEqual {254}
	042 Move X21, 0x92E000
	043 Move X21, [X21+960]
	044 Move X1, [X21]
	045 Call InputAction.ReadValue, X0
	046 Move X20, 0xBEC000
	047 Move W8, [X20+1450]
	048 Move V8, V0
	049 Move V9, V1
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x90D000
	053 Move X0, [X0+1208]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+1450], W8
	057 Move X22, 0x90D000
	058 Move X22, [X22+1208]
	059 Move X9, -47198208
	060 Move V11, [X9+576]
	061 NotImplemented "Instruction FABS not yet implemented."
	062 Move X8, [X22]
	063 Move S3, 8
	064 Multiply S2, S1, S11
	065 Move X8, [X8+184]
	066 Move V0, [X8]
	067 Multiply S0, S0, S3
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 NotImplemented "Instruction FCSEL not yet implemented."
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 NotImplemented "Instruction FABS not yet implemented."
	072 Multiply S2, S1, S11
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 NotImplemented "Instruction FCSEL not yet implemented."
	075 NotImplemented "Instruction FCMP not yet implemented."
	076 Move [X19+272], X31
	077 Move [X19+280], X31
	078 Move X0, X31
	079 Call InputState.get_currentTime
	080 Move W8, [X20+1450]
	081 Move V12, [X19+280]
	082 Move V10, V0
	083 Compare W8, 0
	084 JumpIfNotEqual {90}
	085 Move X0, 0x90C000
	086 Move X0, [X0+1208]
	087 Call 0x1C17CF4
	088 Move W8, 1
	089 Move [X20+1450], W8
	090 Move X8, [X22]
	091 NotImplemented "Instruction FABS not yet implemented."
	092 Move S3, 8
	093 Multiply S2, S1, S11
	094 Move X8, [X8+184]
	095 Move V0, [X8]
	096 Multiply S0, S0, S3
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 NotImplemented "Instruction FCSEL not yet implemented."
	099 NotImplemented "Instruction FCMP not yet implemented."
	100 Move V1, [X19+284]
	101 NotImplemented "Instruction FABS not yet implemented."
	102 Multiply S2, S1, S11
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 NotImplemented "Instruction FCSEL not yet implemented."
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 Move [X19+272], D10
	107 Move X8, [X19+240]
	108 Compare X8, 0
	109 JumpIfEqual {267}
	110 Move X0, [X8+368]
	111 Compare X0, 0
	112 JumpIfEqual {267}
	113 Move X8, 0x95B000
	114 Move V0, [X19+272]
	115 Move V1, [X19+56]
	116 Move X8, [X8+760]
	117 Subtract D0, D10, D0
	118 Multiply S2, S8, S1
	119 Move X1, [X8]
	120 Multiply S1, S9, S1
	121 NotImplemented "Instruction INVALID not yet implemented."
	122 Multiply S14, S2, S0
	123 Multiply S13, S1, S0
	124 Call InputControl`1<Vector2>.get_value, X0
	125 Move X22, 0x905000
	126 Move X22, [X22+1432]
	127 Move X8, X0
	128 Move S11, [X8]
	129 Move S12, [X8+4]
	130 Move X20, [X19+232]
	131 Move X0, [X22]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Move X0, X20
	137 Move X1, X31
	138 Move X2, X31
	139 Add S11, S14, S11
	140 Add S12, S13, S12
	141 Call Object.op_Inequality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {161}
	146 Move X0, [X19+232]
	147 Compare X0, 0
	148 JumpIfEqual {267}
	149 Move X1, X31
	150 Call Canvas.get_pixelRect, X0
	151 Add S2, S2, S0
	152 NotImplemented "Instruction FCMP not yet implemented."
	153 NotImplemented "Instruction FCSEL not yet implemented."
	154 NotImplemented "Instruction FCMP not yet implemented."
	155 NotImplemented "Instruction FCSEL not yet implemented."
	156 NotImplemented "Instruction FCMP not yet implemented."
	157 Add S0, S3, S1
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 NotImplemented "Instruction FCSEL not yet implemented."
	160 Move V12, V1
	161 Move X8, [X19+240]
	162 Compare X8, 0
	163 JumpIfEqual {267}
	164 Move X20, 0x959000
	165 Move X0, [X8+368]
	166 Move X20, [X20+1032]
	167 Move V0, V11
	168 Move V1, V12
	169 Move W1, W31
	170 Move X3, [X20]
	171 Move X2, X31
	172 Call InputState.Change, X0, X1, X2, X3
	173 Move X8, [X19+240]
	174 Compare X8, 0
	175 JumpIfEqual {267}
	176 Move X0, [X8+376]
	177 Move X3, [X20]
	178 Move V0, V14
	179 Move V1, V13
	180 Move W1, W31
	181 Move X2, X31
	182 Call InputState.Change, X0, X1, X2, X3
	183 Move X0, [X22]
	184 Move X20, [X19+48]
	185 Move W8, [X0+224]
	186 Compare W8, 0
	187 JumpIfNotEqual {189}
	188 Call 0x1C17DFC
	189 Move X0, X20
	190 Move X1, X31
	191 Move X2, X31
	192 Call Object.op_Inequality, X0, X1
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfNotEqual {211}
	197 Move W8, [X19+32]
	198 Compare W8, 0
	199 JumpIfEqual {204}
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move X8, [X19+248]
	202 Compare X8, 0
	203 JumpIfNotEqual {211}
	204 Move X0, [X19+48]
	205 Compare X0, 0
	206 JumpIfEqual {267}
	207 Move V0, V11
	208 Move V1, V12
	209 Move X1, X31
	210 Call RectTransform.set_anchoredPosition, X0, X1
	211 Move X0, [X19+248]
	212 Move [X19+280], S8
	213 Move [X19+284], S9
	214 Move [X19+272], D10
	215 Compare X0, 0
	216 JumpIfEqual {221}
	217 Move V0, V11
	218 Move V1, V12
	219 Move X1, X31
	220 Call Mouse.WarpCursorPosition, X0, X1
	221 Add X0, X19, 208
	222 Move X1, X31
	223 Call InputActionProperty.get_action, X0
	224 Compare X0, 0
	225 JumpIfEqual {254}
	226 Move X1, [X21]
	227 Call InputAction.ReadValue, X0
	228 Move X8, [X19+240]
	229 Compare X8, 0
	230 JumpIfEqual {267}
	231 Move X0, [X8+416]
	232 Move X8, 0x959000
	233 Move V2, [X19+60]
	234 Move X8, [X8+1032]
	235 Move X20, [X31+80]
	236 Move X19, [X31+88]
	237 Move X22, [X31+64]
	238 Move X21, [X31+72]
	239 Move X30, [X31+56]
	240 Move X3, [X8]
	241 Move D9, [X31+40]
	242 Move D8, [X31+48]
	243 Move D11, [X31+24]
	244 Move D10, [X31+32]
	245 Move D13, [X31+8]
	246 Move D12, [X31+16]
	247 Multiply S1, S1, S2
	248 Multiply S0, S0, S2
	249 Move W1, W31
	250 Move X2, X31
	251 Move V14, [X31+96]
	252 Call InputState.Change, X0, X1, X2, X3
	253 Return 
	254 Move X20, [X31+80]
	255 Move X19, [X31+88]
	256 Move X22, [X31+64]
	257 Move X21, [X31+72]
	258 Move X30, [X31+56]
	259 Move D9, [X31+40]
	260 Move D8, [X31+48]
	261 Move D11, [X31+24]
	262 Move D10, [X31+32]
	263 Move D13, [X31+8]
	264 Move D12, [X31+16]
	265 Move V14, [X31+96]
	266 Return 
	267 Call 0x1C17F20

Method: System.Void OnButtonActionTriggered(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EF2AC MOV X19, X0
	0x037EF2B0 TBNZ X8, 0x0, 0x37EF304
	0x037EF2B4 ADRP X0, 0x95A000
	0x037EF2B8 LDR X0, [X0 + 0x6B0]
	0x037EF2BC BL 0x1C16CF4
	0x037EF2C0 ADRP X0, 0x904000
	0x037EF2C4 LDR X0, [X0 + 0xA28]
	0x037EF2C8 BL 0x1C16CF4
	0x037EF2CC ADRP X0, 0x904000
	0x037EF2D0 LDR X0, [X0 + 0x598]
	0x037EF2D4 BL 0x1C16CF4
	0x037EF2D8 ADRP X0, 0x95A000
	0x037EF2DC LDR X0, [X0 + 0x6B8]
	0x037EF2E0 BL 0x1C16CF4
	0x037EF2E4 ADRP X0, 0x92B000
	0x037EF2E8 LDR X0, [X0 + 0xC70]
	0x037EF2EC BL 0x1C16CF4
	0x037EF2F0 ADRP X0, 0x95A000
	0x037EF2F4 LDR X0, [X0 + 0x6C0]
	0x037EF2F8 BL 0x1C16CF4
	0x037EF2FC MOVZ W8, 0x1
	0x037EF300 STRB W8, [X21 + 0x363]
	0x037EF304 MOV X0, X19
	0x037EF308 MOV X1, X31
	0x037EF30C STR X31, [X31 + 0x18]
	0x037EF310 BL 0x3C32E90
	0x037EF314 CBZ X0, 0x37EF4C8
	0x037EF318 ADRP X22, 0x904000
	0x037EF31C LDR X22, [X22 + 0x598]
	0x037EF320 MOV X1, X31
	0x037EF324 BL 0x3C3F49C
	0x037EF328 CBZ X0, 0x37EF344
	0x037EF32C ADRP X8, 0x95A000
	0x037EF330 LDR X8, [X8 + 0x6B0]
	0x037EF334 LDR X1, [X8]
	0x037EF338 BL 0x21A3F50
	0x037EF33C MOV X21, X0
	0x037EF340 B 0x37EF348
	0x037EF344 MOV X21, X31
	0x037EF348 LDR X0, [X22]
	0x037EF34C LDR W8, [X0 + 0xE0]
	0x037EF350 CBNZ W8, 0x37EF358
	0x037EF354 BL 0x1C16DFC
	0x037EF358 MOV X0, X21
	0x037EF35C MOV X1, X31
	0x037EF360 MOV X2, X31
	0x037EF364 BL 0x3C3883C
	0x037EF368 TBZ X0, 0x0, 0x37EF39C
	0x037EF36C ADRP X8, 0x904000
	0x037EF370 LDR X8, [X8 + 0xA28]
	0x037EF374 LDR X0, [X8]
	0x037EF378 LDR W8, [X0 + 0xE0]
	0x037EF37C CBNZ W8, 0x37EF384
	0x037EF380 BL 0x1C16DFC
	0x037EF384 ADRP X8, 0x95A000
	0x037EF388 LDR X8, [X8 + 0x6C0]
	0x037EF38C MOV X1, X31
	0x037EF390 LDR X0, [X8]
	0x037EF394 BL 0x3C0649C
	0x037EF398 B 0x37EF4B4
	0x037EF39C LDR W8, [X19 + 0x48]
	0x037EF3A0 CMP W8, 0x2
	0x037EF3A4 B.EQ 0x37EF3F0
	0x037EF3A8 CMP W8, 0x1
	0x037EF3AC B.EQ 0x37EF468
	0x037EF3B0 CBNZ W8, 0x37EF4B4
	0x037EF3B4 ADRP X8, 0x95A000
	0x037EF3B8 LDR X8, [X8 + 0x6B8]
	0x037EF3BC ADD X19, X19, 0x6C
	0x037EF3C0 LDR X0, [X8]
	0x037EF3C4 LDR W8, [X0 + 0xE0]
	0x037EF3C8 CBNZ W8, 0x37EF3D0
	0x037EF3CC BL 0x1C16DFC
	0x037EF3D0 MOV X0, X21
	0x037EF3D4 MOV V0.16B, V9.16B
	0x037EF3D8 MOV V1.16B, V8.16B
	0x037EF3DC MOV X1, X20
	0x037EF3E0 MOV X2, X19
	0x037EF3E4 MOV X3, X31
	0x037EF3E8 BL 0x3E23A98
	0x037EF3EC B 0x37EF4B4
	0x037EF3F0 ADRP X8, 0x95A000
	0x037EF3F4 LDR X8, [X8 + 0x6B8]
	0x037EF3F8 LDR X0, [X8]
	0x037EF3FC LDR W8, [X0 + 0xE0]
	0x037EF400 CBNZ W8, 0x37EF408
	0x037EF404 BL 0x1C16DFC
	0x037EF408 ADD X2, X31, 0x18
	0x037EF40C MOV X0, X21
	0x037EF410 MOV V0.16B, V9.16B
	0x037EF414 MOV V1.16B, V8.16B
	0x037EF418 MOV X1, X20
	0x037EF41C MOV X3, X31
	0x037EF420 BL 0x3E23A98
	0x037EF424 MOV X0, X19
	0x037EF428 MOV X1, X31
	0x037EF42C BL 0x3C32E90
	0x037EF430 CBZ X0, 0x37EF4C8
	0x037EF434 ADRP X8, 0x92B000
	0x037EF438 LDR X8, [X8 + 0xC70]
	0x037EF43C LDR X1, [X8]
	0x037EF440 LDR X8, [X0]
	0x037EF444 CMP X8, X1
	0x037EF448 B.NE 0x37EF4CC
	0x037EF44C LDP S8, S9, [X31 + 0x18]
	0x037EF450 MOV X1, X31
	0x037EF454 MOV V0.16B, V8.16B
	0x037EF458 MOV V1.16B, V9.16B
	0x037EF45C BL 0x3C3E880
	0x037EF460 STP S8, S9, [X19 + 0x6C]
	0x037EF464 B 0x37EF4B4
	0x037EF468 ADRP X8, 0x95A000
	0x037EF46C LDR X8, [X8 + 0x6B8]
	0x037EF470 ADD X22, X19, 0x6C
	0x037EF474 LDR X0, [X8]
	0x037EF478 LDR W8, [X0 + 0xE0]
	0x037EF47C CBNZ W8, 0x37EF484
	0x037EF480 BL 0x1C16DFC
	0x037EF484 MOV X0, X21
	0x037EF488 MOV V0.16B, V9.16B
	0x037EF48C MOV V1.16B, V8.16B
	0x037EF490 MOV X1, X20
	0x037EF494 MOV X2, X22
	0x037EF498 MOV X3, X31
	0x037EF49C BL 0x3E23A98
	0x037EF4A0 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+112], X30
	003 Move [X31+120], X21
	004 Move [X31+128], X20
	005 Move [X31+136], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X21+40]
	008 Move X20, 0xBF3000
	009 Move X19, X0
	010 Move [X31+104], X8
	011 Move W8, [X20+857]
	012 Move [X31+16], X1
	013 Move [X31+24], X2
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x95B000
	019 Move X0, [X0+1528]
	020 Call 0x1C17CF4
	021 Move X0, 0x95B000
	022 Move X0, [X0+1536]
	023 Call 0x1C17CF4
	024 Move X0, 0x95B000
	025 Move X0, [X0+1544]
	026 Call 0x1C17CF4
	027 Move X0, 0x95B000
	028 Move X0, [X0+1552]
	029 Call 0x1C17CF4
	030 Move X0, 0x95B000
	031 Move X0, [X0+1560]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+857], W8
	035 Move [X31+8], X31
	036 Move [X31+32], X31
	037 Move [X31+40], X31
	038 Move [X31+54], X31
	039 Move [X31+48], X31
	040 Move X8, [X19+240]
	041 Compare X8, 0
	042 JumpIfEqual {118}
	043 Add X0, X31, 16
	044 Move X1, X31
	045 Call CallbackContext.get_action, X0
	046 Move X20, X0
	047 Add X0, X19, 88
	048 Move X1, X31
	049 Move [X31+8], X31
	050 Call InputActionProperty.get_action, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X0, X19, 136
	053 Move X1, X31
	054 Call InputActionProperty.get_action, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X0, X19, 112
	057 Move X1, X31
	058 Call InputActionProperty.get_action, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Add X0, X19, 160
	061 Move X1, X31
	062 Call InputActionProperty.get_action, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Add X0, X19, 184
	065 Move X1, X31
	066 Call InputActionProperty.get_action, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W1, 4
	069 Move W1, W31
	070 Move W1, 1
	071 Move W1, 2
	072 Move W1, 3
	073 Move X8, 0x95B000
	074 Move X8, [X8+1544]
	075 Add X0, X31, 8
	076 Move X2, [X8]
	077 Call Nullable`1<Int32Enum>..ctor, X0, X1
	078 Move W8, [X31+8]
	079 Compare W8, 0
	080 JumpIfEqual {118}
	081 Add X0, X31, 16
	082 Move X1, X31
	083 Call CallbackContext.get_control, X0
	084 Move S0, W31
	085 Move X1, X31
	086 Call InputControlExtensions.IsPressed, X0, V0
	087 Move X9, 0x95B000
	088 Move X8, [X19+240]
	089 Move X9, [X9+1528]
	090 Move W20, W0
	091 Add X1, X31, 32
	092 Move X0, X8
	093 Move X2, [X9]
	094 Call 0x21FDC4C, X0, X1
	095 Move X8, 0x95B000
	096 Move X8, [X8+1560]
	097 Add X0, X31, 8
	098 Move X1, [X8]
	099 Call Nullable`1<Int32Enum>.get_Value, X0
	100 Move W1, W0
	101 And W2, W20, 1
	102 Add X8, X31, 64
	103 Add X0, X31, 32
	104 Move X3, X31
	105 Call MouseState.WithButton, X0, X1, X2
	106 Move X8, 0x95B000
	107 Move X0, [X19+240]
	108 Move X8, [X8+1536]
	109 Move V0, [X31+2]
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 Add X1, X31, 64
	112 Move X4, [X8]
	113 Move W2, W31
	114 Move X3, X31
	115 Move [X31+4], V0
	116 Move [X31+78], V1
	117 Call InputState.Change, X0, X1, X2, X3
	118 Move X8, [X21+40]
	119 Move X9, [X31+104]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X20, [X31+128]
	122 Move X19, [X31+136]
	123 Move X30, [X31+112]
	124 Move X21, [X31+120]
	125 Add X31, X31, 144
	126 Return 
	127 Call 0x3EB2B20

Method: System.Void SetActionCallback(UnityEngine.InputSystem.InputActionProperty field, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> callback, System.Boolean install = True)

Disassembly:
	0x037EE58C LDP X9, X2, [X8 + 0x188]
	0x037EE590 BLR X9
	0x037EE594 MOV X0, X19
	0x037EE598 MOV X1, X31
	0x037EE59C BL 0x3C32454
	0x037EE5A0 TBZ X0, 0x0, 0x37EE5B0
	0x037EE5A4 MOV X0, X19
	0x037EE5A8 LDP X30, X19, [X31], #0x10
	0x037EE5AC B 0x37EE5B8
	0x037EE5B0 LDP X30, X19, [X31], #0x10
	0x037EE5B4 RET
	0x037EE5B8 SUB X31, X31, 0xB0
	0x037EE5BC STR X30, [X31 + 0x70]
	0x037EE5C0 STP X24, X23, [X31 + 0x80]
	0x037EE5C4 STP X22, X21, [X31 + 0x90]
	0x037EE5C8 STP X20, X19, [X31 + 0xA0]
	0x037EE5CC ADRP X20, 0xBF3000
	0x037EE5D0 LDRB W8, [X20 + 0x35D]
	0x037EE5D4 MOV X19, X0
	0x037EE5D8 TBNZ X8, 0x0, 0x37EE6B0
	0x037EE5DC ADRP X0, 0x905000
	0x037EE5E0 LDR X0, [X0 + 0xA28]
	0x037EE5E4 BL 0x1C16CF4
	0x037EE5E8 ADRP X0, 0x95B000
	0x037EE5EC LDR X0, [X0 + 0x628]
	0x037EE5F0 BL 0x1C16CF4
	0x037EE5F4 ADRP X0, 0x95B000
	0x037EE5F8 LDR X0, [X0 + 0x630]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move W21, W2
	008 Call InputActionProperty.get_action, X0
	009 Compare X0, 0
	010 JumpIfEqual {28}
	011 Move X20, X0
	012 Move X1, X19
	013 Move X2, X31
	014 Move TEMP, X21
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {33}
	018 Call InputAction.add_started, X0, X1
	019 Move X0, X20
	020 Move X1, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X2, X31
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call InputAction.add_canceled, X0, X1
	027 Return 
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 
	033 Call InputAction.remove_started, X0, X1
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, X31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call InputAction.remove_canceled, X0, X1
	042 Return 

Method: System.Void SetAction(ref UnityEngine.InputSystem.InputActionProperty field, UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037EE3C0 B 0x37EE3D0
	0x037EE3C4 MOVZ W1, 0x2
	0x037EE3C8 B 0x37EE3D0
	0x037EE3CC MOVZ W1, 0x3
	0x037EE3D0 ADRP X8, 0x95B000
	0x037EE3D4 LDR X8, [X8 + 0x608]
	0x037EE3D8 ADD X0, X31, 0x8
	0x037EE3DC LDR X2, [X8]
	0x037EE3E0 BL 0x24345B8
	0x037EE3E4 LDRB W8, [X31 + 0x8]
	0x037EE3E8 CBZ W8, 0x37EE480
	0x037EE3EC ADD X0, X31, 0x10
	0x037EE3F0 MOV X1, X31
	0x037EE3F4 BL 0x3735E8C
	0x037EE3F8 FMOV S0, W31
	0x037EE3FC MOV X1, X31
	0x037EE400 BL 0x377373C
	0x037EE404 ADRP X9, 0x95B000
	0x037EE408 LDR X8, [X19 + 0xF0]
	0x037EE40C LDR X9, [X9 + 0x5F8]
	0x037EE410 MOV W20, W0
	0x037EE414 ADD X1, X31, 0x20
	0x037EE418 MOV X0, X8
	0x037EE41C LDR X2, [X9]
	0x037EE420 BL 0x21FCC4C
	0x037EE424 ADRP X8, 0x95B000
	0x037EE428 LDR X8, [X8 + 0x618]
	0x037EE42C ADD X0, X31, 0x8
	0x037EE430 LDR X1, [X8]
	0x037EE434 BL 0x24345D0
	0x037EE438 MOV W1, W0
	0x037EE43C AND W2, W20, 0x1
	0x037EE440 ADD X8, X31, 0x40
	0x037EE444 ADD X0, X31, 0x20
	0x037EE448 MOV X3, X31
	0x037EE44C BL 0x37FFB88
	0x037EE450 ADRP X8, 0x95B000
	0x037EE454 LDR X0, [X19 + 0xF0]
	0x037EE458 LDR X8, [X8 + 0x600]
	0x037EE45C LDR V0, [X31 + 0x2]
	0x037EE460 LDUR V1, [X31 + 0x2E]
	0x037EE464 ADD X1, X31, 0x40
	0x037EE468 LDR X4, [X8]
	0x037EE46C MOV W2, W31
	0x037EE470 MOV X3, X31
	0x037EE474 STR V0, [X31 + 0x4]
	0x037EE478 STUR V1, [X31 + 0x4E]
	0x037EE47C BL 0x2209894
	0x037EE480 LDR X8, [X21 + 0x28]
	0x037EE484 LDR X9, [X31 + 0x68]
	0x037EE488 CMP X8, X9
	0x037EE48C B.NE 0x37EE4A0
	0x037EE490 LDP X20, X19, [X31 + 0x80]
	0x037EE494 LDP X30, X21, [X31 + 0x70]
	0x037EE498 ADD X31, X31, 0x90
	0x037EE49C RET
	0x037EE4A0 BL 0x3EB1B20
	0x037EE4A4 B 0x37EDF10
	0x037EE4A8 ADRP X8, 0xFFFFFFFFFD2FF000
	0x037EE4AC LDR V0, [X8 + 0xAE8]
	0x037EE4B0 MOV X1, X31
	0x037EE4B4 STR D0, [X0 + 0x38]
	0x037EE4B8 B 0x3C36C30
	0x037EE4BC STP X30, X21, [X31 - 0x20]!
	0x037EE4C0 STP X20, X19, [X31 + 0x10]
	0x037EE4C4 ADRP X20, 0xBF3000
	0x037EE4C8 ADRP X21, 0x95B000
	0x037EE4CC LDRB W8, [X20 + 0x35B]
	0x037EE4D0 LDR X21, [X21 + 0x620]
	0x037EE4D4 MOV X19, X0
	0x037EE4D8 TBNZ X8, 0x0, 0x37EE4F0
	0x037EE4DC ADRP X0, 0x95B000
	0x037EE4E0 LDR X0, [X0 + 0x620]
	0x037EE4E4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0xBF4000
	008 Move X21, 0x906000
	009 Move W8, [X22+858]
	010 Move X21, [X21+1432]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x906000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+858], W8
	022 Move X8, [X20+16]
	023 Move V0, [X20]
	024 Add X0, X31, 0
	025 Move X1, X31
	026 Move [X31+16], X8
	027 Move [X31], V0
	028 Move X8, [X19+16]
	029 Move V0, [X19]
	030 Move [X20+16], X8
	031 Move [X20], V0
	032 Call InputActionProperty.get_reference, X0
	033 Move X8, [X21]
	034 Move X20, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {88}
	048 Add X0, X31, 0
	049 Move X1, X31
	050 Call InputActionProperty.get_action, X0
	051 Compare X0, 0
	052 JumpIfEqual {88}
	053 Move X1, X31
	054 Move X20, X0
	055 Call InputAction.get_enabled, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {88}
	060 Move X0, X20
	061 Move X1, X31
	062 Call InputAction.Disable, X0
	063 Move X0, X19
	064 Move X1, X31
	065 Call InputActionProperty.get_reference, X0
	066 Move X8, [X21]
	067 Move X20, X0
	068 Move W9, [X8+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {73}
	071 Move X0, X8
	072 Call 0x1C17DFC
	073 Move X0, X20
	074 Move X1, X31
	075 Move X2, X31
	076 Call Object.op_Equality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {88}
	081 Move X0, X19
	082 Move X1, X31
	083 Call InputActionProperty.get_action, X0
	084 Compare X0, 0
	085 JumpIfEqual {88}
	086 Move X1, X31
	087 Call InputAction.Enable, X0
	088 Move X20, [X31+64]
	089 Move X19, [X31+72]
	090 Move X22, [X31+48]
	091 Move X21, [X31+56]
	092 Move X30, [X31+32]
	093 Add X31, X31, 80
	094 Return 

Method: System.Void OnAfterInputUpdate()

Disassembly:
	0x037EF4A4 MOV V0.16B, V9.16B

ISIL:
	001 Call VirtualMouseInput.UpdateMotion, X0
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x037EF4A8 MOV V1.16B, V8.16B
	0x037EF4AC MOV X1, X20
	0x037EF4B0 BL 0x37EF56C
	0x037EF4B4 LDP X20, X19, [X31 + 0x30]
	0x037EF4B8 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move X8, -47190016
	002 Move V0, [X8+2792]
	003 Move X1, X31
	004 Move [X0+56], D0
	005 Call MonoBehaviour..ctor, X0
	006 Return 

