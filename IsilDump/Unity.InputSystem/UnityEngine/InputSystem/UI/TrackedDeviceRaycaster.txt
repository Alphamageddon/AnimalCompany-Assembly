Type: UnityEngine.InputSystem.UI.TrackedDeviceRaycaster

Method: UnityEngine.Camera get_eventCamera()

Disassembly:
	0x037ED268 MOV X1, X31
	0x037ED26C BL 0x377E954
	0x037ED270 LDR X0, [X21]
	0x037ED274 LDR X20, [X19 + 0x28]
	0x037ED278 LDR W8, [X0 + 0xE0]
	0x037ED27C CBNZ W8, 0x37ED284
	0x037ED280 BL 0x1C16DFC
	0x037ED284 MOV X0, X20
	0x037ED288 MOV X1, X31
	0x037ED28C MOV X2, X31
	0x037ED290 BL 0x3C354F8
	0x037ED294 TBZ X0, 0x0, 0x37ED2E4
	0x037ED298 LDR X0, [X19 + 0x28]
	0x037ED29C CBZ X0, 0x37ED2FC
	0x037ED2A0 MOV W1, W31
	0x037ED2A4 B 0x37ED2DC
	0x037ED2A8 LDR X0, [X21]
	0x037ED2AC LDR X20, [X19 + 0x28]
	0x037ED2B0 LDR W8, [X0 + 0xE0]
	0x037ED2B4 CBNZ W8, 0x37ED2BC
	0x037ED2B8 BL 0x1C16DFC
	0x037ED2BC MOV X0, X20
	0x037ED2C0 MOV X1, X31
	0x037ED2C4 MOV X2, X31
	0x037ED2C8 BL 0x3C354F8
	0x037ED2CC TBZ X0, 0x0, 0x37ED2E4
	0x037ED2D0 LDR X0, [X19 + 0x28]
	0x037ED2D4 CBZ X0, 0x37ED2FC
	0x037ED2D8 MOVZ W1, 0x1
	0x037ED2DC MOV X2, X31
	0x037ED2E0 BL 0x3C32410
	0x037ED2E4 LDP X20, X19, [X31 + 0x40]
	0x037ED2E8 LDP X22, X21, [X31 + 0x30]
	0x037ED2EC LDP X24, X23, [X31 + 0x20]
	0x037ED2F0 LDR X30, [X31 + 0x10]
	0x037ED2F4 ADD X31, X31, 0x50
	0x037ED2F8 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBF5000
	006 Move X20, 0x907000
	007 Move W8, [X21+840]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x907000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+840], W8
	019 Move X0, X19
	020 Call TrackedDeviceRaycaster.get_canvas, X0
	021 Move X8, [X20]
	022 Move X19, X0
	023 Move W9, [X8+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X8
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {46}
	036 Compare X19, 0
	037 JumpIfEqual {52}
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X1, X31
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call Canvas.get_worldCamera, X0
	045 Return X0
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X0, X31
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: UnityEngine.LayerMask get_blockingMask()

Disassembly:
	0x037ED390 SUB X31, X31, 0x30
	0x037ED394 STR X30, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_blockingMask(UnityEngine.LayerMask value)

Disassembly:
	0x037ED398 LDR X8, [X1 + 0x10]
	0x037ED39C LDR V0, [X1]

ISIL:
	001 Move [X0+56], W1
	002 Return 

Method: System.Boolean get_checkFor3DOcclusion()

Disassembly:
	0x037ED3A0 ADD X0, X0, 0x40
	0x037ED3A4 ADD X1, X31, 0x0

ISIL:
	001 Move W0, [X0+50]
	002 Return X0

Method: System.Void set_checkFor3DOcclusion(System.Boolean value)

Disassembly:
	0x037ED3A8 STR X8, [X31 + 0x10]
	0x037ED3AC STR V0, [X31]
	0x037ED3B0 BL 0x37ED3C0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+50], W8
	003 Return 

Method: System.Boolean get_checkFor2DOcclusion()

Disassembly:
	0x037ED3B4 LDR X30, [X31 + 0x20]
	0x037ED3B8 ADD X31, X31, 0x30

ISIL:
	001 Move W0, [X0+49]
	002 Return X0

Method: System.Void set_checkFor2DOcclusion(System.Boolean value)

Disassembly:
	0x037ED3BC RET
	0x037ED3C0 SUB X31, X31, 0x50
	0x037ED3C4 STR X30, [X31 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+49], W8
	003 Return 

Method: System.Boolean get_ignoreReversedGraphics()

Disassembly:
	0x037ED3C8 STP X22, X21, [X31 + 0x30]
	0x037ED3CC STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_ignoreReversedGraphics(System.Boolean value)

Disassembly:
	0x037ED3D0 ADRP X22, 0xBF4000
	0x037ED3D4 ADRP X21, 0x906000
	0x037ED3D8 LDRB W8, [X22 + 0x35A]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.Single get_maxDistance()

Disassembly:
	0x037ED3DC LDR X21, [X21 + 0x598]
	0x037ED3E0 MOV X19, X1

ISIL:
	001 Move V0, [X0+52]
	002 Return V0

Method: System.Void set_maxDistance(System.Single value)

Disassembly:
	0x037ED3E4 MOV X20, X0
	0x037ED3E8 TBNZ X8, 0x0, 0x37ED400

ISIL:
	001 Move [X0+52], S0
	002 Return 

Method: System.Void OnEnable()

Disassembly:
	0x037ED3EC ADRP X0, 0x906000
	0x037ED3F0 LDR X0, [X0 + 0x598]
	0x037ED3F4 BL 0x1C16CF4
	0x037ED3F8 MOVZ W8, 0x1
	0x037ED3FC STRB W8, [X22 + 0x35A]
	0x037ED400 LDR X8, [X20 + 0x10]
	0x037ED404 LDR V0, [X20]
	0x037ED408 ADD X0, X31, 0x0
	0x037ED40C MOV X1, X31
	0x037ED410 STR X8, [X31 + 0x10]
	0x037ED414 STR V0, [X31]
	0x037ED418 LDR X8, [X19 + 0x10]
	0x037ED41C LDR V0, [X19]
	0x037ED420 STR X8, [X20 + 0x10]
	0x037ED424 STR V0, [X20]
	0x037ED428 BL 0x3745260
	0x037ED42C LDR X8, [X21]
	0x037ED430 MOV X20, X0
	0x037ED434 LDR W9, [X8 + 0xE0]
	0x037ED438 CBNZ W9, 0x37ED444
	0x037ED43C MOV X0, X8
	0x037ED440 BL 0x1C16DFC
	0x037ED444 MOV X0, X20
	0x037ED448 MOV X1, X31
	0x037ED44C MOV X2, X31
	0x037ED450 BL 0x3C3883C
	0x037ED454 TBZ X0, 0x0, 0x37ED4D4
	0x037ED458 ADD X0, X31, 0x0
	0x037ED45C MOV X1, X31
	0x037ED460 BL 0x3745120
	0x037ED464 CBZ X0, 0x37ED4D4
	0x037ED468 MOV X1, X31
	0x037ED46C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBF5000
	006 Move X20, 0x95D000
	007 Move W8, [X21+841]
	008 Move X20, [X20+832]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x95D000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move X0, 0x95D000
	018 Move X0, [X0+832]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+841], W8
	022 Move X21, 0x95D000
	023 Move X21, [X21+1384]
	024 Move X0, X19
	025 Move X1, X31
	026 Call BaseRaycaster.OnEnable, X0
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X0, [X0+184]
	034 Move X3, [X21]
	035 Move X1, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move W2, 10
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call InlinedArray`1<Object>.AppendWithCapacity, X0, X1, X2
	042 Return 

Method: System.Void OnDisable()

Disassembly:
	0x037ED470 BL 0x373485C
	0x037ED474 TBZ X0, 0x0, 0x37ED4D4
	0x037ED478 MOV X0, X20
	0x037ED47C MOV X1, X31
	0x037ED480 BL 0x3735150
	0x037ED484 MOV X0, X19
	0x037ED488 MOV X1, X31
	0x037ED48C BL 0x3745260
	0x037ED490 LDR X8, [X21]
	0x037ED494 MOV X20, X0
	0x037ED498 LDR W9, [X8 + 0xE0]
	0x037ED49C CBNZ W9, 0x37ED4A8
	0x037ED4A0 MOV X0, X8
	0x037ED4A4 BL 0x1C16DFC
	0x037ED4A8 MOV X0, X20
	0x037ED4AC MOV X1, X31
	0x037ED4B0 MOV X2, X31
	0x037ED4B4 BL 0x3C3883C
	0x037ED4B8 TBZ X0, 0x0, 0x37ED4D4
	0x037ED4BC MOV X0, X19
	0x037ED4C0 MOV X1, X31
	0x037ED4C4 BL 0x3745120
	0x037ED4C8 CBZ X0, 0x37ED4D4
	0x037ED4CC MOV X1, X31
	0x037ED4D0 BL 0x37350C8
	0x037ED4D4 LDP X20, X19, [X31 + 0x40]
	0x037ED4D8 LDP X22, X21, [X31 + 0x30]
	0x037ED4DC LDR X30, [X31 + 0x20]
	0x037ED4E0 ADD X31, X31, 0x50
	0x037ED4E4 RET
	0x037ED4E8 LDR X9, [X0 + 0x68]
	0x037ED4EC LDUR V0, [X0 + 0x58]
	0x037ED4F0 STR X9, [X8 + 0x10]
	0x037ED4F4 STR V0, [X8]
	0x037ED4F8 RET
	0x037ED4FC SUB X31, X31, 0x80
	0x037ED500 STR X30, [X31 + 0x60]
	0x037ED504 STP X20, X19, [X31 + 0x70]
	0x037ED508 LDR X8, [X0 + 0x108]
	0x037ED50C MOV X19, X0
	0x037ED510 MOV X20, X1
	0x037ED514 CBZ X8, 0x37ED538
	0x037ED518 LDR X9, [X19 + 0x68]
	0x037ED51C LDUR V0, [X19 + 0x58]
	0x037ED520 ADD X0, X31, 0x40
	0x037ED524 MOV X1, X8
	0x037ED528 MOV W2, W31
	0x037ED52C STR X9, [X31 + 0x50]
	0x037ED530 STR V0, [X31 + 0x4]
	0x037ED534 BL 0x37ED58C
	0x037ED538 LDR X8, [X20 + 0x10]
	0x037ED53C LDR V0, [X20]
	0x037ED540 ADD X20, X19, 0x58
	0x037ED544 ADD X1, X31, 0x20
	0x037ED548 MOV X0, X20
	0x037ED54C STR X8, [X31 + 0x30]
	0x037ED550 STR V0, [X31 + 0x2]
	0x037ED554 BL 0x37ED3C0
	0x037ED558 LDR X1, [X19 + 0x108]
	0x037ED55C CBZ X1, 0x37ED57C
	0x037ED560 LDR X8, [X20 + 0x10]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X20, 0xBF5000
	008 Move X21, 0x95D000
	009 Move W8, [X20+842]
	010 Move X21, [X21+832]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x95D000
	017 Move X0, [X0+1392]
	018 Call 0x1C17CF4
	019 Move X0, 0x95D000
	020 Move X0, [X0+1400]
	021 Call 0x1C17CF4
	022 Move X0, 0x95D000
	023 Move X0, [X0+832]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+842], W8
	027 Move X0, [X21]
	028 Move X20, 0x95D000
	029 Move W8, [X0+224]
	030 Move X20, [X20+1400]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move X8, [X0+184]
	036 Move X2, [X20]
	037 Add X0, X31, 32
	038 Move X1, X19
	039 Move X9, [X8+16]
	040 Move V0, [X8]
	041 Move [X31+16], X9
	042 Move [X31], V0
	043 Move [X31+2], V0
	044 Move [X31+48], X9
	045 Call 0x21FC010, X0, X1
	046 Add W31, W0, 1
	047 Move W20, W0
	048 Move X0, [X21]
	049 Move X22, 0x95D000
	050 Move W8, [X0+224]
	051 Move X22, [X22+1392]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X21]
	056 Move X0, [X0+184]
	057 Move X2, [X22]
	058 Move W1, W20
	059 Call InlinedArray`1<Object>.RemoveAtByMovingTailWithCapacity, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Call BaseRaycaster.OnDisable, X0
	063 Move X20, [X31+96]
	064 Move X19, [X31+104]
	065 Move X22, [X31+80]
	066 Move X21, [X31+88]
	067 Move X30, [X31+64]
	068 Add X31, X31, 112
	069 Return 

Method: System.Void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)

Disassembly:
	0x037ED564 LDR V0, [X20]
	0x037ED568 ADD X0, X31, 0x0
	0x037ED56C MOVZ W2, 0x1
	0x037ED570 STR X8, [X31 + 0x10]
	0x037ED574 STR V0, [X31]
	0x037ED578 BL 0x37ED58C
	0x037ED57C LDP X20, X19, [X31 + 0x70]
	0x037ED580 LDR X30, [X31 + 0x60]
	0x037ED584 ADD X31, X31, 0x80
	0x037ED588 RET
	0x037ED58C STP X30, X21, [X31 - 0x20]!
	0x037ED590 STP X20, X19, [X31 + 0x10]
	0x037ED594 MOV X19, X1
	0x037ED598 MOV X1, X31
	0x037ED59C MOV W21, W2
	0x037ED5A0 BL 0x3745120
	0x037ED5A4 CBZ X0, 0x37ED5D4
	0x037ED5A8 MOV X20, X0
	0x037ED5AC MOV X1, X19
	0x037ED5B0 MOV X2, X31
	0x037ED5B4 TBZ X21, 0x0, 0x37ED5E0
	0x037ED5B8 BL 0x37348A4
	0x037ED5BC MOV X0, X20
	0x037ED5C0 MOV X1, X19
	0x037ED5C4 LDP X20, X19, [X31 + 0x10]
	0x037ED5C8 MOV X2, X31
	0x037ED5CC LDP X30, X21, [X31], #0x20
	0x037ED5D0 B 0x3734954
	0x037ED5D4 LDP X20, X19, [X31 + 0x10]
	0x037ED5D8 LDP X30, X21, [X31], #0x20
	0x037ED5DC RET
	0x037ED5E0 BL 0x37348FC
	0x037ED5E4 MOV X0, X20
	0x037ED5E8 MOV X1, X19
	0x037ED5EC LDP X20, X19, [X31 + 0x10]
	0x037ED5F0 MOV X2, X31
	0x037ED5F4 LDP X30, X21, [X31], #0x20
	0x037ED5F8 B 0x37349AC
	0x037ED5FC LDR X9, [X0 + 0x98]
	0x037ED600 LDUR V0, [X0 + 0x88]
	0x037ED604 STR X9, [X8 + 0x10]
	0x037ED608 STR V0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBF5000
	007 Move W8, [X22+843]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x95D000
	016 Move X0, [X0+1288]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+843], W8
	020 Compare X21, 0
	021 JumpIfEqual {47}
	022 Move X8, 0x95D000
	023 Move X8, [X8+1288]
	024 Move X9, [X21]
	025 Move X8, [X8]
	026 Move W11, [X9+304]
	027 Move W10, [X8+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, [X9+200]
	030 Add X9, X9, X10
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSEL not yet implemented."
	034 Compare X1, 0
	035 JumpIfEqual {47}
	036 Move W8, [X1+404]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X20
	039 Move X2, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Call TrackedDeviceRaycaster.PerformRaycast, X0, X1, X2
	046 Return 
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return 

Method: System.Void PerformRaycast(UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)

Disassembly:
	0x037E6DFC LDR W8, [X0 + 0xE0]
	0x037E6E00 CBNZ W8, 0x37E6E0C
	0x037E6E04 BL 0x1C16DFC
	0x037E6E08 LDR X0, [X26]
	0x037E6E0C ADRP X9, 0x963000
	0x037E6E10 LDR X8, [X0 + 0xB8]
	0x037E6E14 LDR X9, [X9 + 0x398]
	0x037E6E18 MOV X0, X22
	0x037E6E1C MOV X1, X19
	0x037E6E20 LDR X2, [X8 + 0x30]
	0x037E6E24 LDR X3, [X9]
	0x037E6E28 BL 0x21DD088
	0x037E6E2C LDR W8, [X20 + 0x4]
	0x037E6E30 SUB W8, W8, 0x1
	0x037E6E34 CMP W8, 0x1
	0x037E6E38 B.HI 0x37E7170
	0x037E6E3C ADRP X24, 0x935000
	0x037E6E40 LDR X24, [X24 + 0x9F8]
	0x037E6E44 LDR X0, [X24]
	0x037E6E48 LDR W8, [X0 + 0xE0]
	0x037E6E4C CBNZ W8, 0x37E6E54
	0x037E6E50 BL 0x1C16DFC
	0x037E6E54 ADRP X8, 0x963000
	0x037E6E58 LDR X8, [X8 + 0x3B8]
	0x037E6E5C MOV X0, X21
	0x037E6E60 LDR X1, [X8]
	0x037E6E64 BL 0x21DDB64
	0x037E6E68 LDR X8, [X25]
	0x037E6E6C LDR X23, [X19 + 0x28]
	0x037E6E70 MOV X22, X0
	0x037E6E74 LDR W9, [X8 + 0xE0]
	0x037E6E78 CBNZ W9, 0x37E6E84
	0x037E6E7C MOV X0, X8
	0x037E6E80 BL 0x1C16DFC
	0x037E6E84 MOV X0, X23
	0x037E6E88 MOV X1, X22
	0x037E6E8C MOV X2, X31
	0x037E6E90 BL 0x3C3883C
	0x037E6E94 TBZ X0, 0x0, 0x37E6EB4
	0x037E6E98 LDRB W8, [X19 + 0xF8]
	0x037E6E9C CBZ W8, 0x37E6EB4
	0x037E6EA0 LDRB W8, [X20 + 0x91]
	0x037E6EA4 CBZ W8, 0x37E6EBC
	0x037E6EA8 LDR W8, [X19 + 0x138]
	0x037E6EAC ADD W8, W8, 0x1
	0x037E6EB0 B 0x37E6EC0
	0x037E6EB4 MOVZ W23, 0x1
	0x037E6EB8 B 0x37E6F48
	0x037E6EBC MOVZ W8, 0x1
	0x037E6EC0 STR W8, [X19 + 0x138]
	0x037E6EC4 ADRP X8, 0x935000
	0x037E6EC8 LDR X8, [X8 + 0xEC8]
	0x037E6ECC LDR X8, [X8]
	0x037E6ED0 LDR X8, [X8 + 0xB8]
	0x037E6ED4 LDR X22, [X8]
	0x037E6ED8 CBZ X22, 0x37E7190
	0x037E6EDC ADRP X10, 0x935000
	0x037E6EE0 LDR X8, [X22]
	0x037E6EE4 LDR X10, [X10 + 0xED0]
	0x037E6EE8 LDRH W9, [X8 + 0x12E]
	0x037E6EEC LDR X1, [X10]
	0x037E6EF0 CBZ X9, 0x37E6F14
	0x037E6EF4 LDR X10, [X8 + 0xB0]
	0x037E6EF8 ADD X10, X10, 0x8
	0x037E6EFC LDUR X11, [X10 - 0x8]
	0x037E6F00 CMP X11, X1
	0x037E6F04 B.EQ 0x37E6F24
	0x037E6F08 SUBS X9, X9, 0x1
	0x037E6F0C ADD X10, X10, 0x10
	0x037E6F10 B.NE 0x37E6EFC
	0x037E6F14 MOVZ W2, 0x15
	0x037E6F18 MOV X0, X22
	0x037E6F1C BL 0x1C5C788
	0x037E6F20 B 0x37E6F34
	0x037E6F24 LDR W9, [X10]
	0x037E6F28 ADD W9, W9, 0x15
	0x037E6F2C ADD X8, X8, W9, 0x4, SXTW
	0x037E6F30 ADD X0, X8, 0x138
	0x037E6F34 LDP X8, X1, [X0]
	0x037E6F38 MOV X0, X22
	0x037E6F3C BLR X8
	0x037E6F40 MOV W23, W31
	0x037E6F44 STR S0, [X19 + 0x134]
	0x037E6F48 LDR X0, [X24]
	0x037E6F4C LDR X22, [X19 + 0x28]
	0x037E6F50 LDR W8, [X0 + 0xE0]
	0x037E6F54 CBNZ W8, 0x37E6F5C
	0x037E6F58 BL 0x1C16DFC
	0x037E6F5C ADRP X26, 0xBFB000
	0x037E6F60 LDRB W8, [X26 + 0x388]
	0x037E6F64 CBNZ W8, 0x37E6F7C
	0x037E6F68 ADRP X0, 0x935000
	0x037E6F6C LDR X0, [X0 + 0x9F8]
	0x037E6F70 BL 0x1C16CF4
	0x037E6F74 MOVZ W8, 0x1
	0x037E6F78 STRB W8, [X26 + 0x388]
	0x037E6F7C LDR X0, [X24]
	0x037E6F80 LDR W8, [X0 + 0xE0]
	0x037E6F84 CBNZ W8, 0x37E6F90
	0x037E6F88 BL 0x1C16DFC
	0x037E6F8C LDR X0, [X24]
	0x037E6F90 ADRP X9, 0x963000
	0x037E6F94 LDR X8, [X0 + 0xB8]
	0x037E6F98 LDR X9, [X9 + 0x3A8]
	0x037E6F9C MOV X0, X22
	0x037E6FA0 MOV X1, X19
	0x037E6FA4 LDR X2, [X8 + 0x20]
	0x037E6FA8 LDR X3, [X9]
	0x037E6FAC BL 0x21DD088
	0x037E6FB0 TBZ X23, 0x0, 0x37E704C
	0x037E6FB4 LDRB W8, [X19 + 0x145]
	0x037E6FB8 CBZ W8, 0x37E70B4
	0x037E6FBC LDR X0, [X25]
	0x037E6FC0 LDR X22, [X19 + 0x40]
	0x037E6FC4 LDR W8, [X0 + 0xE0]
	0x037E6FC8 CBNZ W8, 0x37E6FD0
	0x037E6FCC BL 0x1C16DFC
	0x037E6FD0 MOV X0, X22
	0x037E6FD4 MOV X1, X31
	0x037E6FD8 MOV X2, X31
	0x037E6FDC BL 0x3C354F8
	0x037E6FE0 TBZ X0, 0x0, 0x37E70B4
	0x037E6FE4 LDR X0, [X24]
	0x037E6FE8 LDR W8, [X0 + 0xE0]
	0x037E6FEC CBNZ W8, 0x37E6FF4
	0x037E6FF0 BL 0x1C16DFC
	0x037E6FF4 ADRP X22, 0xBFB000
	0x037E6FF8 LDRB W8, [X22 + 0x38A]
	0x037E6FFC CBNZ W8, 0x37E7014
	0x037E7000 ADRP X0, 0x934000
	0x037E7004 LDR X0, [X0 + 0x9F8]
	0x037E7008 BL 0x1C16CF4
	0x037E700C MOVZ W8, 0x1
	0x037E7010 STRB W8, [X22 + 0x38A]
	0x037E7014 LDR X0, [X24]
	0x037E7018 LDR W8, [X0 + 0xE0]
	0x037E701C CBNZ W8, 0x37E7028
	0x037E7020 BL 0x1C16DFC
	0x037E7024 LDR X0, [X24]
	0x037E7028 ADRP X9, 0x962000
	0x037E702C LDR X8, [X0 + 0xB8]
	0x037E7030 LDR X9, [X9 + 0x380]
	0x037E7034 MOV X0, X21
	0x037E7038 MOV X1, X19
	0x037E703C LDR X2, [X8 + 0x50]
	0x037E7040 LDR X3, [X9]
	0x037E7044 BL 0x21DD8A8
	0x037E7048 B 0x37E70B4
	0x037E704C LDR X0, [X24]
	0x037E7050 LDR X21, [X19 + 0x28]
	0x037E7054 LDR W8, [X0 + 0xE0]
	0x037E7058 CBNZ W8, 0x37E7060
	0x037E705C BL 0x1C16DFC
	0x037E7060 ADRP X22, 0xBFA000
	0x037E7064 LDRB W8, [X22 + 0x389]
	0x037E7068 CBNZ W8, 0x37E7080
	0x037E706C ADRP X0, 0x934000
	0x037E7070 LDR X0, [X0 + 0x9F8]
	0x037E7074 BL 0x1C16CF4
	0x037E7078 MOVZ W8, 0x1
	0x037E707C STRB W8, [X22 + 0x389]
	0x037E7080 LDR X0, [X24]
	0x037E7084 LDR W8, [X0 + 0xE0]
	0x037E7088 CBNZ W8, 0x37E7094
	0x037E708C BL 0x1C16DFC
	0x037E7090 LDR X0, [X24]
	0x037E7094 ADRP X9, 0x962000
	0x037E7098 LDR X8, [X0 + 0xB8]
	0x037E709C LDR X9, [X9 + 0x3A0]
	0x037E70A0 MOV X0, X21
	0x037E70A4 MOV X1, X19
	0x037E70A8 LDR X2, [X8 + 0x28]
	0x037E70AC LDR X3, [X9]
	0x037E70B0 BL 0x21DD088
	0x037E70B4 MOV X0, X19
	0x037E70B8 MOV X1, X31
	0x037E70BC MOV X2, X31
	0x037E70C0 STRB W31, [X19 + 0xF8]
	0x037E70C4 BL 0x3E4F3AC
	0x037E70C8 LDRB W8, [X19 + 0x145]
	0x037E70CC STR X31, [X19 + 0x38]
	0x037E70D0 CBZ W8, 0x37E7164
	0x037E70D4 LDR X0, [X25]
	0x037E70D8 LDR X21, [X19 + 0x40]
	0x037E70DC LDR W8, [X0 + 0xE0]
	0x037E70E0 CBNZ W8, 0x37E70E8
	0x037E70E4 BL 0x1C16DFC
	0x037E70E8 MOV X0, X21
	0x037E70EC MOV X1, X31
	0x037E70F0 MOV X2, X31
	0x037E70F4 BL 0x3C354F8
	0x037E70F8 TBZ X0, 0x0, 0x37E7164
	0x037E70FC LDR X0, [X24]
	0x037E7100 LDR X21, [X19 + 0x40]
	0x037E7104 LDR W8, [X0 + 0xE0]
	0x037E7108 CBNZ W8, 0x37E7110
	0x037E710C BL 0x1C16DFC
	0x037E7110 ADRP X22, 0xBFA000
	0x037E7114 LDRB W8, [X22 + 0x38B]
	0x037E7118 CBNZ W8, 0x37E7130
	0x037E711C ADRP X0, 0x934000
	0x037E7120 LDR X0, [X0 + 0x9F8]
	0x037E7124 BL 0x1C16CF4
	0x037E7128 MOVZ W8, 0x1
	0x037E712C STRB W8, [X22 + 0x38B]
	0x037E7130 LDR X0, [X24]
	0x037E7134 LDR W8, [X0 + 0xE0]
	0x037E7138 CBNZ W8, 0x37E7144
	0x037E713C BL 0x1C16DFC
	0x037E7140 LDR X0, [X24]
	0x037E7144 ADRP X9, 0x962000
	0x037E7148 LDR X8, [X0 + 0xB8]
	0x037E714C LDR X9, [X9 + 0x390]
	0x037E7150 MOV X0, X21
	0x037E7154 MOV X1, X19
	0x037E7158 LDR X2, [X8 + 0x48]
	0x037E715C LDR X3, [X9]
	0x037E7160 BL 0x21DD088
	0x037E7164 STRB W31, [X19 + 0x145]
	0x037E7168 STR X31, [X19 + 0x40]
	0x037E716C STRB W31, [X20 + 0x92]
	0x037E7170 MOV X0, X20
	0x037E7174 MOV X1, X19
	0x037E7178 LDP X20, X19, [X31 + 0x40]
	0x037E717C LDP X22, X21, [X31 + 0x30]
	0x037E7180 LDP X24, X23, [X31 + 0x20]
	0x037E7184 LDP X26, X25, [X31 + 0x10]
	0x037E7188 LDR X30, [X31], #0x50
	0x037E718C B 0x37E7DCC
	0x037E7190 BL 0x1C16F20
	0x037E7194 STR X30, [X31 - 0x40]!
	0x037E7198 STP X24, X23, [X31 + 0x10]
	0x037E719C STP X22, X21, [X31 + 0x20]
	0x037E71A0 STP X20, X19, [X31 + 0x30]
	0x037E71A4 ADRP X22, 0xBFA000
	0x037E71A8 LDRB W8, [X22 + 0x322]
	0x037E71AC MOV X19, X2
	0x037E71B0 MOV X20, X1
	0x037E71B4 MOV X21, X0
	0x037E71B8 TBNZ X8, 0x0, 0x37E7200
	0x037E71BC ADRP X0, 0x962000
	0x037E71C0 LDR X0, [X0 + 0x3C8]
	0x037E71C4 BL 0x1C16CF4
	0x037E71C8 ADRP X0, 0x962000
	0x037E71CC LDR X0, [X0 + 0x3D0]
	0x037E71D0 BL 0x1C16CF4
	0x037E71D4 ADRP X0, 0x962000
	0x037E71D8 LDR X0, [X0 + 0x3A8]
	0x037E71DC BL 0x1C16CF4
	0x037E71E0 ADRP X0, 0x934000
	0x037E71E4 LDR X0, [X0 + 0x9F8]
	0x037E71E8 BL 0x1C16CF4
	0x037E71EC ADRP X0, 0x90C000
	0x037E71F0 LDR X0, [X0 + 0x598]
	0x037E71F4 BL 0x1C16CF4
	0x037E71F8 MOVZ W8, 0x1
	0x037E71FC STRB W8, [X22 + 0x322]
	0x037E7200 CBZ X19, 0x37E749C
	0x037E7204 MOV X0, X19
	0x037E7208 MOV X1, X31
	0x037E720C BL 0x3E4F244
	0x037E7210 TBZ X0, 0x0, 0x37E7260
	0x037E7214 LDR W8, [X19 + 0x194]
	0x037E7218 CMP W8, 0x1
	0x037E721C B.NE 0x37E7230
	0x037E7220 MOV X0, X31
	0x037E7224 BL 0x3C246D4
	0x037E7228 CMP W0, 0x1
	0x037E722C B.EQ 0x37E7260
	0x037E7230 ADRP X23, 0x90C000
	0x037E7234 LDR X23, [X23 + 0x598]
	0x037E7238 LDR X22, [X19 + 0x40]
	0x037E723C LDR X0, [X23]
	0x037E7240 LDR W8, [X0 + 0xE0]
	0x037E7244 CBNZ W8, 0x37E724C
	0x037E7248 BL 0x1C16DFC
	0x037E724C MOV X0, X22
	0x037E7250 MOV X1, X31
	0x037E7254 MOV X2, X31
	0x037E7258 BL 0x3C3883C
	0x037E725C TBZ X0, 0x0, 0x37E7274
	0x037E7260 LDP X20, X19, [X31 + 0x30]
	0x037E7264 LDP X22, X21, [X31 + 0x20]
	0x037E7268 LDP X24, X23, [X31 + 0x10]
	0x037E726C LDR X30, [X31], #0x40
	0x037E7270 RET
	0x037E7274 LDRB W8, [X19 + 0x145]
	0x037E7278 CBNZ W8, 0x37E735C
	0x037E727C LDRB W8, [X19 + 0x144]
	0x037E7280 CBZ W8, 0x37E72E4
	0x037E7284 LDR X8, [X21 + 0x38]
	0x037E7288 CBZ X8, 0x37E749C
	0x037E728C LDR V0, [X19 + 0x114]
	0x037E7290 LDR V1, [X19 + 0x118]
	0x037E7294 LDR V2, [X19 + 0x104]
	0x037E7298 LDR V3, [X19 + 0x108]
	0x037E729C LDR W8, [X8 + 0x3C]
	0x037E72A0 LDR W9, [X19 + 0x194]
	0x037E72A4 FSUB S0, S0, S2
	0x037E72A8 FSUB S1, S1, S3
	0x037E72AC FMUL S3, S0, S0
	0x037E72B0 FMUL S1, S1, S1
	0x037E72B4 SCVTF D2, W8
	0x037E72B8 FADD S1, S3, S1
	0x037E72BC CMP W9, 0x3
	0x037E72C0 FMUL D0, D2, D2
	0x037E72C4 FCVT S1, S1
	0x037E72C8 FMOV D2, 1
	0x037E72CC B.NE 0x37E72D8
	0x037E72D0 LDR V2, [X21 + 0x60]
	0x037E72D4 FCVT S2, S2
	0x037E72D8 FMUL D0, D0, D2
	0x037E72DC FCMP D0, D1
	0x037E72E0 B.HI 0x37E7260
	0x037E72E4 ADRP X22, 0x934000
	0x037E72E8 LDR X22, [X22 + 0x9F8]
	0x037E72EC LDR X21, [X19 + 0x40]
	0x037E72F0 LDR X0, [X22]
	0x037E72F4 LDR W8, [X0 + 0xE0]
	0x037E72F8 CBNZ W8, 0x37E7300
	0x037E72FC BL 0x1C16DFC
	0x037E7300 ADRP X24, 0xBFA000
	0x037E7304 LDRB W8, [X24 + 0x38C]
	0x037E7308 CBNZ W8, 0x37E7320
	0x037E730C ADRP X0, 0x934000
	0x037E7310 LDR X0, [X0 + 0x9F8]
	0x037E7314 BL 0x1C16CF4
	0x037E7318 MOVZ W8, 0x1
	0x037E731C STRB W8, [X24 + 0x38C]
	0x037E7320 LDR X0, [X22]
	0x037E7324 LDR W8, [X0 + 0xE0]
	0x037E7328 CBNZ W8, 0x37E7334
	0x037E732C BL 0x1C16DFC
	0x037E7330 LDR X0, [X22]
	0x037E7334 ADRP X9, 0x962000
	0x037E7338 LDR X8, [X0 + 0xB8]
	0x037E733C LDR X9, [X9 + 0x3C8]
	0x037E7340 MOV X0, X21
	0x037E7344 MOV X1, X19
	0x037E7348 LDR X2, [X8 + 0x38]
	0x037E734C LDR X3, [X9]
	0x037E7350 BL 0x21DD088
	0x037E7354 MOVZ W8, 0x1
	0x037E7358 STRB W8, [X19 + 0x145]
	0x037E735C LDR X0, [X23]
	0x037E7360 LDR X21, [X19 + 0x28]
	0x037E7364 LDR X22, [X19 + 0x40]
	0x037E7368 LDR W8, [X0 + 0xE0]
	0x037E736C CBNZ W8, 0x37E7374
	0x037E7370 BL 0x1C16DFC
	0x037E7374 MOV X0, X21
	0x037E7378 MOV X1, X22
	0x037E737C MOV X2, X31
	0x037E7380 BL 0x3C354F8
	0x037E7384 TBZ X0, 0x0, 0x37E7410
	0x037E7388 ADRP X22, 0x934000
	0x037E738C LDR X22, [X22 + 0x9F8]
	0x037E7390 LDR X21, [X19 + 0x28]
	0x037E7394 LDR X0, [X22]
	0x037E7398 LDR W8, [X0 + 0xE0]
	0x037E739C CBNZ W8, 0x37E73A4
	0x037E73A0 BL 0x1C16DFC
	0x037E73A4 ADRP X23, 0xBFA000
	0x037E73A8 LDRB W8, [X23 + 0x388]
	0x037E73AC CBNZ W8, 0x37E73C4
	0x037E73B0 ADRP X0, 0x934000
	0x037E73B4 LDR X0, [X0 + 0x9F8]
	0x037E73B8 BL 0x1C16CF4
	0x037E73BC MOVZ W8, 0x1
	0x037E73C0 STRB W8, [X23 + 0x388]
	0x037E73C4 LDR X0, [X22]
	0x037E73C8 LDR W8, [X0 + 0xE0]
	0x037E73CC CBNZ W8, 0x37E73D8
	0x037E73D0 BL 0x1C16DFC
	0x037E73D4 LDR X0, [X22]
	0x037E73D8 ADRP X9, 0x962000
	0x037E73DC LDR X8, [X0 + 0xB8]
	0x037E73E0 LDR X9, [X9 + 0x3A8]
	0x037E73E4 MOV X0, X21
	0x037E73E8 MOV X1, X19
	0x037E73EC LDR X2, [X8 + 0x20]
	0x037E73F0 LDR X3, [X9]
	0x037E73F4 BL 0x21DD088
	0x037E73F8 MOV X0, X19
	0x037E73FC MOV X1, X31
	0x037E7400 MOV X2, X31
	0x037E7404 STRB W31, [X19 + 0xF8]
	0x037E7408 BL 0x3E4F3AC
	0x037E740C STR X31, [X19 + 0x38]
	0x037E7410 ADRP X22, 0x934000
	0x037E7414 LDR X22, [X22 + 0x9F8]
	0x037E7418 LDR X21, [X19 + 0x40]
	0x037E741C LDR X0, [X22]
	0x037E7420 LDR W8, [X0 + 0xE0]
	0x037E7424 CBNZ W8, 0x37E742C
	0x037E7428 BL 0x1C16DFC
	0x037E742C ADRP X23, 0xBFA000
	0x037E7430 LDRB W8, [X23 + 0x38D]
	0x037E7434 CBNZ W8, 0x37E744C
	0x037E7438 ADRP X0, 0x934000
	0x037E743C LDR X0, [X0 + 0x9F8]
	0x037E7440 BL 0x1C16CF4
	0x037E7444 MOVZ W8, 0x1
	0x037E7448 STRB W8, [X23 + 0x38D]
	0x037E744C LDR X0, [X22]
	0x037E7450 LDR W8, [X0 + 0xE0]
	0x037E7454 CBNZ W8, 0x37E7460
	0x037E7458 BL 0x1C16DFC
	0x037E745C LDR X0, [X22]
	0x037E7460 ADRP X9, 0x962000
	0x037E7464 LDR X8, [X0 + 0xB8]
	0x037E7468 LDR X9, [X9 + 0x3D0]
	0x037E746C MOV X0, X21
	0x037E7470 MOV X1, X19
	0x037E7474 LDR X2, [X8 + 0x40]
	0x037E7478 LDR X3, [X9]
	0x037E747C BL 0x21DD088

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 352
	022 Move X22, 0xBFC000
	023 Move X23, 0x90E000
	024 Move W8, [X22+844]
	025 Move X23, [X23+1432]
	026 Move X19, X2
	027 Move X21, X1
	028 Move X20, X0
	029 Add X25, X31, 192
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {60}
	034 Move X0, 0x964000
	035 Move X0, [X0+856]
	036 Call 0x1C17CF4
	037 Move X0, 0x964000
	038 Move X0, [X0+864]
	039 Call 0x1C17CF4
	040 Move X0, 0x964000
	041 Move X0, [X0+872]
	042 Call 0x1C17CF4
	043 Move X0, 0x964000
	044 Move X0, [X0+816]
	045 Call 0x1C17CF4
	046 Move X0, 0x964000
	047 Move X0, [X0+880]
	048 Call 0x1C17CF4
	049 Move X0, 0x90E000
	050 Move X0, [X0+1432]
	051 Call 0x1C17CF4
	052 Move X0, 0x915000
	053 Move X0, [X0+3168]
	054 Call 0x1C17CF4
	055 Move X0, 0x90E000
	056 Move X0, [X0+1528]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X22+844], W8
	060 NotImplemented "Instruction MOVI not yet implemented."
	061 Move X0, X20
	062 Move [X31+176], W31
	063 Move [X31+128], X31
	064 Move [X31+136], X31
	065 Move [X31+112], X31
	066 Move [X25+28], V0
	067 Move [X25], V0
	068 Move [X25+8], V0
	069 Move [X31+144], V0
	070 Move [X31+152], V0
	071 Move [X31+120], W31
	072 Call TrackedDeviceRaycaster.get_canvas, X0
	073 Move X8, [X23]
	074 Move X22, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X0, X22
	081 Move X1, X31
	082 Move X2, X31
	083 Call Object.op_Equality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {108}
	088 Move X8, [X20]
	089 Move X0, X20
	090 Move X9, [X8+600]
	091 Move X1, [X8+608]
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move X8, [X23]
	094 Move X22, X0
	095 Move W9, [X8+224]
	096 Compare W9, 0
	097 JumpIfNotEqual {100}
	098 Move X0, X8
	099 Call 0x1C17DFC
	100 Move X0, X22
	101 Move X1, X31
	102 Move X2, X31
	103 Call Object.op_Equality, X0, X1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {130}
	108 Add X31, X31, 352
	109 Move X20, [X31+144]
	110 Move X19, [X31+152]
	111 Move X22, [X31+128]
	112 Move X21, [X31+136]
	113 Move X24, [X31+112]
	114 Move X23, [X31+120]
	115 Move X26, [X31+96]
	116 Move X25, [X31+104]
	117 Move X28, [X31+80]
	118 Move X27, [X31+88]
	119 Move X29, [X31+64]
	120 Move X30, [X31+72]
	121 Move D9, [X31+48]
	122 Move D8, [X31+56]
	123 Move D11, [X31+32]
	124 Move D10, [X31+40]
	125 Move D13, [X31+16]
	126 Move D12, [X31+24]
	127 Move D15, [X31+160]
	128 Move D14, [X31+168]
	129 Return 
	130 Compare X21, 0
	131 JumpIfEqual {495}
	132 Move X8, 0xBF3000
	133 Move V12, [X21+412]
	134 Move V13, [X21+416]
	135 Move V14, [X21+420]
	136 Move V8, [X21+424]
	137 Move V9, [X21+428]
	138 Move V10, [X21+432]
	139 Move W8, [X8+2591]
	140 Move V11, [X21+436]
	141 Compare W8, 0
	142 JumpIfNotEqual {149}
	143 Move X0, 0x90E000
	144 Move X0, [X0+1440]
	145 Call 0x1C17CF4
	146 Move W8, 1
	147 Move X9, 0xBF3000
	148 Move [X9+2591], W8
	149 Move X21, 0x90E000
	150 Move X21, [X21+1440]
	151 Move V0, V8
	152 Move V1, V9
	153 Move V2, V10
	154 Move X8, [X21]
	155 Move V3, V11
	156 Move X0, X31
	157 Move X8, [X8+184]
	158 Move S4, [X8+72]
	159 Move S5, [X8+76]
	160 Move V6, [X8+80]
	161 Call Quaternion.op_Multiply, X0, X1
	162 Move X22, 0xBF3000
	163 Move W8, [X22+1925]
	164 Move V8, V0
	165 Move V9, V1
	166 Move V10, V2
	167 Compare W8, 0
	168 JumpIfNotEqual {174}
	169 Move X0, 0x90D000
	170 Move X0, [X0+1448]
	171 Call 0x1C17CF4
	172 Move W8, 1
	173 Move [X22+1925], W8
	174 Move X8, 0x90D000
	175 Move X8, [X8+1448]
	176 Move X0, [X8]
	177 Move W8, [X0+224]
	178 Compare W8, 0
	179 JumpIfNotEqual {181}
	180 Call 0x1C17DFC
	181 Multiply S0, S8, S8
	182 Multiply S1, S9, S9
	183 Move X8, -47169536
	184 Add S0, S0, S1
	185 Move V1, [X8+380]
	186 Multiply S2, S10, S10
	187 Add S0, S2, S0
	188 NotImplemented "Instruction FSQRT not yet implemented."
	189 NotImplemented "Instruction FCMP not yet implemented."
	190 NotImplemented "Instruction FDIV not yet implemented."
	191 NotImplemented "Instruction FDIV not yet implemented."
	192 Move [X31+28], S1
	193 Move [X31+36], S2
	194 NotImplemented "Instruction FDIV not yet implemented."
	195 Move X22, 0xBF2000
	196 Move W8, [X22+1923]
	197 Compare W8, 0
	198 JumpIfNotEqual {204}
	199 Move X0, 0x90D000
	200 Move X0, [X0+1440]
	201 Call 0x1C17CF4
	202 Move W8, 1
	203 Move [X22+1923], W8
	204 Move X8, [X21]
	205 Move X8, [X8+184]
	206 Move V1, [X8]
	207 Move V0, [X8+4]
	208 Move [X31+28], S0
	209 Move [X31+36], S1
	210 Move V0, [X8+8]
	211 Move [X31+24], S0
	212 Move W8, [X20+50]
	213 Move V0, [X20+52]
	214 Move [X31+36], S0
	215 Compare W8, 0
	216 JumpIfEqual {252}
	217 Move W0, [X20+56]
	218 Move X1, X31
	219 Call LayerMask.op_Implicit, X0
	220 Move X8, 0x90D000
	221 Move X8, [X8+1528]
	222 Move W22, W0
	223 Move X8, [X8]
	224 Move W9, [X8+224]
	225 Compare W9, 0
	226 JumpIfNotEqual {229}
	227 Move X0, X8
	228 Call 0x1C17DFC
	229 Move V0, [X31+32]
	230 Move V1, [X31+28]
	231 Add X0, X31, 88
	232 Add X1, X31, 192
	233 Move [X31+96], S14
	234 Move [X31+104], S0
	235 Move V0, [X31+24]
	236 Move W2, W22
	237 Move X3, X31
	238 Move [X31+88], S12
	239 Move [X31+96], S13
	240 Move [X31+104], S1
	241 Move [X31+112], S0
	242 Move V0, [X31+36]
	243 Call Physics.Raycast, X0, X1, V0, X2
	244 Move TEMP, X0
	245 And TEMP, TEMP, 1
	246 Compare TEMP, 1
	247 JumpIfNotEqual {252}
	248 Add X0, X31, 192
	249 Move X1, X31
	250 Call RaycastHit.get_distance, X0
	251 Move [X31+36], S0
	252 Move W8, [X20+49]
	253 Compare W8, 0
	254 JumpIfEqual {310}
	255 Move W0, [X20+56]
	256 Move X1, X31
	257 Call LayerMask.op_Implicit, X0
	258 Move X8, 0x914000
	259 Move X8, [X8+3168]
	260 Move W22, W0
	261 Move X8, [X8]
	262 Move W9, [X8+224]
	263 Compare W9, 0
	264 JumpIfNotEqual {267}
	265 Move X0, X8
	266 Call 0x1C17DFC
	267 Move V0, [X31+32]
	268 Move V1, [X31+28]
	269 Add X8, X31, 272
	270 Add X0, X31, 64
	271 Move [X31+72], S14
	272 Move [X31+80], S0
	273 Move V0, [X31+24]
	274 Move W1, W22
	275 Move X2, X31
	276 Move [X31+64], S12
	277 Move [X31+72], S13
	278 Move [X31+80], S1
	279 Move [X31+88], S0
	280 Move V0, [X31+36]
	281 Call Physics2D.GetRayIntersection, X0, V0, X1
	282 Move V0, [X25+80]
	283 Move V1, [X25+96]
	284 Move W8, [X31+304]
	285 Add X0, X31, 144
	286 Move X1, X31
	287 Move [X31+144], V0
	288 Move [X31+152], V1
	289 Move [X31+176], W8
	290 Call RaycastHit2D.get_collider, X0
	291 Move X8, [X23]
	292 Move X22, X0
	293 Move W9, [X8+224]
	294 Compare W9, 0
	295 JumpIfNotEqual {298}
	296 Move X0, X8
	297 Call 0x1C17DFC
	298 Move X0, X22
	299 Move X1, X31
	300 Move X2, X31
	301 Call Object.op_Inequality, X0, X1
	302 Move TEMP, X0
	303 And TEMP, TEMP, 1
	304 Compare TEMP, 1
	305 JumpIfNotEqual {310}
	306 Add X0, X31, 144
	307 Move X1, X31
	308 Call RaycastHit2D.get_distance, X0
	309 Move [X31+36], S0
	310 Move X8, [X20+40]
	311 Compare X8, 0
	312 JumpIfEqual {495}
	313 Move W2, [X8+24]
	314 Move W9, [X8+28]
	315 Add W9, W9, 1
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Move [X8+24], W31
	318 Move [X8+28], W9
	319 Move X0, [X8+16]
	320 Move W1, W31
	321 Move X3, X31
	322 Call Array.Clear, X0, X1, X2
	323 Move X0, X20
	324 Call TrackedDeviceRaycaster.get_canvas, X0
	325 Move V0, [X31+32]
	326 Move X3, [X20+40]
	327 Move V1, [X31+28]
	328 Move X1, X0
	329 Move [X31+48], S14
	330 Move [X31+56], S0
	331 Move V0, [X31+24]
	332 Add X2, X31, 40
	333 Move X0, X20
	334 Move [X31+40], S12
	335 Move [X31+48], S13
	336 Move [X31+56], S1
	337 Move [X31+64], S0
	338 Call TrackedDeviceRaycaster.SortedRaycastGraphics, X0, X1, X2, X3
	339 Move X0, [X20+40]
	340 Compare X0, 0
	341 JumpIfEqual {495}
	342 Move X27, 0x963000
	343 Move X28, 0x963000
	344 Move X27, [X27+880]
	345 Move X28, [X28+856]
	346 Add X8, X31, 272
	347 Move W22, W31
	348 Add X29, X8, 28
	349 Add X26, X8, 56
	350 Move W8, [X0+24]
	351 NotImplemented "Instruction CMP not yet implemented."
	352 Move X2, [X27]
	353 Add X8, X31, 272
	354 Move W1, W22
	355 Call List`1<RaycastHitData>.get_Item, X0, X1
	356 Move X24, [X31+272]
	357 Compare X24, 0
	358 JumpIfEqual {495}
	359 Move V13, [X31+280]
	360 Move V12, [X31+284]
	361 Move V8, [X31+288]
	362 Move V11, [X31+292]
	363 Move V10, [X31+296]
	364 Move V14, [X31+300]
	365 Move X0, X24
	366 Move X1, X31
	367 Call Component.get_gameObject, X0
	368 Move W8, [X20+48]
	369 Move X23, X0
	370 Compare W8, 0
	371 JumpIfEqual {415}
	372 Compare X23, 0
	373 JumpIfEqual {495}
	374 Move X0, X23
	375 Move X1, X31
	376 Call GameObject.get_transform, X0
	377 Compare X0, 0
	378 JumpIfEqual {495}
	379 Move X1, X31
	380 Call Transform.get_rotation, X0
	381 Move X8, 0xBF2000
	382 Move W8, [X8+2591]
	383 Move V15, V1
	384 Move V9, V3
	385 Compare W8, 0
	386 JumpIfNotEqual {396}
	387 Move X0, X21
	388 Move [X31+16], S2
	389 Move [X31+24], S0
	390 Call 0x1C17CF4
	391 Move S2, [X31+16]
	392 Move S0, [X31+20]
	393 Move X8, 0xBF2000
	394 Move W9, 1
	395 Move [X8+2591], W9
	396 Move X8, [X21]
	397 Move V1, V15
	398 Move V3, V9
	399 Move X0, X31
	400 Move X8, [X8+184]
	401 Move S4, [X8+72]
	402 Move S5, [X8+76]
	403 Move V6, [X8+80]
	404 Call Quaternion.op_Multiply, X0, X1
	405 Move V3, [X31+32]
	406 Multiply S0, S3, S0
	407 Move V3, [X31+28]
	408 Multiply S1, S3, S1
	409 Add S0, S0, S1
	410 Move V1, [X31+24]
	411 Multiply S1, S1, S2
	412 Add S0, S1, S0
	413 NotImplemented "Instruction FCMP not yet implemented."
	414 NotImplemented "Instruction CSET not yet implemented."
	415 Move W8, 1
	416 Move V0, [X31+36]
	417 NotImplemented "Instruction FCMP not yet implemented."
	418 Compare W8, 0
	419 JumpIfEqual {491}
	420 Move [X31+128], X31
	421 Move [X31+136], X31
	422 Move [X31+112], X31
	423 Move [X31+120], W31
	424 Compare X19, 0
	425 JumpIfEqual {495}
	426 Move V9, [X19+24]
	427 Move X0, X24
	428 Move X1, X31
	429 Call Graphic.get_depth, X0
	430 Move V0, [X31+8]
	431 Move X8, [X31+112]
	432 Move W9, [X31+120]
	433 Move [X25+4], V0
	434 Move [X31+240], X8
	435 Move [X31+248], W9
	436 Move W10, [X19+28]
	437 Move X8, [X19+16]
	438 Move X9, [X28]
	439 Add W10, W10, 1
	440 Move [X19+28], W10
	441 Compare X8, 0
	442 JumpIfEqual {495}
	443 NotImplemented "Instruction LDRSW not yet implemented."
	444 Move W11, [X8+24]
	445 NotImplemented "Instruction SCVTF not yet implemented."
	446 NotImplemented "Instruction CMP not yet implemented."
	447 Move W11, 80
	448 Add W9, W10, 1
	449 NotImplemented "Instruction MADD not yet implemented."
	450 Move [X19+24], W9
	451 Move [X8+32], X23
	452 Move [X8+40], X20
	453 Move [X8+48], S14
	454 Move [X8+56], S0
	455 Move [X8+56], W0
	456 Move V0, [X25+4]
	457 Move [X8+76], S13
	458 Move [X8+84], S12
	459 Move [X8+84], S8
	460 Move [X8+60], V0
	461 Move W9, [X31+248]
	462 Move X10, [X31+240]
	463 Move [X8+100], S11
	464 Move [X8+108], S10
	465 Move [X8+108], W31
	466 Move [X8+96], W9
	467 Move [X8+88], X10
	468 Move X8, [X9+32]
	469 Move V1, [X25+4]
	470 Move X9, [X31+240]
	471 Add X1, X31, 272
	472 Move X8, [X8+192]
	473 Move X2, [X8+112]
	474 Move W8, [X31+248]
	475 Move [X31+296], W0
	476 Move X0, X19
	477 Move [X31+272], X23
	478 Move [X31+280], X20
	479 Move [X31+288], S14
	480 Move [X31+292], S0
	481 Move [X29], V1
	482 Move [X31+316], S13
	483 Move [X31+320], S12
	484 Move [X31+324], S8
	485 Move [X26+8], W8
	486 Move [X26], X9
	487 Move [X31+340], S11
	488 Move [X31+344], S10
	489 Move [X31+348], W31
	490 Call List`1<RaycastResult>.AddWithResize, X0, X1
	491 Move X0, [X20+40]
	492 Add W22, W22, 1
	493 Compare X0, 0
	494 JumpIfNotEqual {350}
	495 Call 0x1C17F20

Method: System.Void SortedRaycastGraphics(UnityEngine.Canvas canvas, UnityEngine.Ray ray, System.Collections.Generic.List`1<UnityEngine.InputSystem.UI.TrackedDeviceRaycaster/RaycastHitData> results)

Disassembly:
	0x037ED60C RET
	0x037ED610 SUB X31, X31, 0x80
	0x037ED614 STR X30, [X31 + 0x60]
	0x037ED618 STP X20, X19, [X31 + 0x70]
	0x037ED61C LDR X8, [X0 + 0x108]
	0x037ED620 MOV X19, X0
	0x037ED624 MOV X20, X1
	0x037ED628 CBZ X8, 0x37ED64C
	0x037ED62C LDR X9, [X19 + 0x98]
	0x037ED630 LDUR V0, [X19 + 0x88]
	0x037ED634 ADD X0, X31, 0x40
	0x037ED638 MOV X1, X8
	0x037ED63C MOV W2, W31
	0x037ED640 STR X9, [X31 + 0x50]
	0x037ED644 STR V0, [X31 + 0x4]
	0x037ED648 BL 0x37ED58C
	0x037ED64C LDR X8, [X20 + 0x10]
	0x037ED650 LDR V0, [X20]
	0x037ED654 ADD X20, X19, 0x88
	0x037ED658 ADD X1, X31, 0x20
	0x037ED65C MOV X0, X20
	0x037ED660 STR X8, [X31 + 0x30]
	0x037ED664 STR V0, [X31 + 0x2]
	0x037ED668 BL 0x37ED3C0
	0x037ED66C LDR X1, [X19 + 0x108]
	0x037ED670 CBZ X1, 0x37ED690
	0x037ED674 LDR X8, [X20 + 0x10]
	0x037ED678 LDR V0, [X20]
	0x037ED67C ADD X0, X31, 0x0
	0x037ED680 MOVZ W2, 0x1
	0x037ED684 STR X8, [X31 + 0x10]
	0x037ED688 STR V0, [X31]
	0x037ED68C BL 0x37ED58C
	0x037ED690 LDP X20, X19, [X31 + 0x70]
	0x037ED694 LDR X30, [X31 + 0x60]
	0x037ED698 ADD X31, X31, 0x80
	0x037ED69C RET
	0x037ED6A0 LDR X9, [X0 + 0x80]
	0x037ED6A4 LDR V0, [X0 + 0x7]
	0x037ED6A8 STR X9, [X8 + 0x10]
	0x037ED6AC STR V0, [X8]
	0x037ED6B0 RET
	0x037ED6B4 SUB X31, X31, 0x80
	0x037ED6B8 STR X30, [X31 + 0x60]
	0x037ED6BC STP X20, X19, [X31 + 0x70]
	0x037ED6C0 LDR X8, [X0 + 0x108]
	0x037ED6C4 MOV X19, X0
	0x037ED6C8 MOV X20, X1
	0x037ED6CC CBZ X8, 0x37ED6F0
	0x037ED6D0 LDR X9, [X19 + 0x80]
	0x037ED6D4 LDR V0, [X19 + 0x7]
	0x037ED6D8 ADD X0, X31, 0x40
	0x037ED6DC MOV X1, X8
	0x037ED6E0 MOV W2, W31
	0x037ED6E4 STR X9, [X31 + 0x50]
	0x037ED6E8 STR V0, [X31 + 0x4]
	0x037ED6EC BL 0x37ED58C
	0x037ED6F0 LDR X8, [X20 + 0x10]
	0x037ED6F4 LDR V0, [X20]
	0x037ED6F8 ADD X20, X19, 0x70
	0x037ED6FC ADD X1, X31, 0x20
	0x037ED700 MOV X0, X20
	0x037ED704 STR X8, [X31 + 0x30]
	0x037ED708 STR V0, [X31 + 0x2]
	0x037ED70C BL 0x37ED3C0
	0x037ED710 LDR X1, [X19 + 0x108]
	0x037ED714 CBZ X1, 0x37ED734
	0x037ED718 LDR X8, [X20 + 0x10]
	0x037ED71C LDR V0, [X20]
	0x037ED720 ADD X0, X31, 0x0
	0x037ED724 MOVZ W2, 0x1
	0x037ED728 STR X8, [X31 + 0x10]
	0x037ED72C STR V0, [X31]
	0x037ED730 BL 0x37ED58C
	0x037ED734 LDP X20, X19, [X31 + 0x70]
	0x037ED738 LDR X30, [X31 + 0x60]
	0x037ED73C ADD X31, X31, 0x80
	0x037ED740 RET
	0x037ED744 LDR X9, [X0 + 0xB0]
	0x037ED748 LDR V0, [X0 + 0xA]
	0x037ED74C STR X9, [X8 + 0x10]
	0x037ED750 STR V0, [X8]
	0x037ED754 RET
	0x037ED758 SUB X31, X31, 0x80
	0x037ED75C STR X30, [X31 + 0x60]
	0x037ED760 STP X20, X19, [X31 + 0x70]
	0x037ED764 LDR X8, [X0 + 0x108]
	0x037ED768 MOV X19, X0
	0x037ED76C MOV X20, X1
	0x037ED770 CBZ X8, 0x37ED794
	0x037ED774 LDR X9, [X19 + 0xB0]
	0x037ED778 LDR V0, [X19 + 0xA]
	0x037ED77C ADD X0, X31, 0x40
	0x037ED780 MOV X1, X8
	0x037ED784 MOV W2, W31
	0x037ED788 STR X9, [X31 + 0x50]
	0x037ED78C STR V0, [X31 + 0x4]
	0x037ED790 BL 0x37ED58C
	0x037ED794 LDR X8, [X20 + 0x10]
	0x037ED798 LDR V0, [X20]
	0x037ED79C ADD X20, X19, 0xA0
	0x037ED7A0 ADD X1, X31, 0x20
	0x037ED7A4 MOV X0, X20
	0x037ED7A8 STR X8, [X31 + 0x30]
	0x037ED7AC STR V0, [X31 + 0x2]
	0x037ED7B0 BL 0x37ED3C0
	0x037ED7B4 LDR X1, [X19 + 0x108]
	0x037ED7B8 CBZ X1, 0x37ED7D8
	0x037ED7BC LDR X8, [X20 + 0x10]
	0x037ED7C0 LDR V0, [X20]
	0x037ED7C4 ADD X0, X31, 0x0
	0x037ED7C8 MOVZ W2, 0x1
	0x037ED7CC STR X8, [X31 + 0x10]
	0x037ED7D0 STR V0, [X31]
	0x037ED7D4 BL 0x37ED58C
	0x037ED7D8 LDP X20, X19, [X31 + 0x70]
	0x037ED7DC LDR X30, [X31 + 0x60]
	0x037ED7E0 ADD X31, X31, 0x80
	0x037ED7E4 RET
	0x037ED7E8 LDR X9, [X0 + 0xC8]
	0x037ED7EC LDUR V0, [X0 + 0xB8]
	0x037ED7F0 STR X9, [X8 + 0x10]
	0x037ED7F4 STR V0, [X8]
	0x037ED7F8 RET
	0x037ED7FC SUB X31, X31, 0x80
	0x037ED800 STR X30, [X31 + 0x60]
	0x037ED804 STP X20, X19, [X31 + 0x70]
	0x037ED808 LDR X8, [X0 + 0x108]
	0x037ED80C MOV X19, X0
	0x037ED810 MOV X20, X1
	0x037ED814 CBZ X8, 0x37ED838
	0x037ED818 LDR X9, [X19 + 0xC8]
	0x037ED81C LDUR V0, [X19 + 0xB8]
	0x037ED820 ADD X0, X31, 0x40
	0x037ED824 MOV X1, X8
	0x037ED828 MOV W2, W31
	0x037ED82C STR X9, [X31 + 0x50]
	0x037ED830 STR V0, [X31 + 0x4]
	0x037ED834 BL 0x37ED58C
	0x037ED838 LDR X8, [X20 + 0x10]
	0x037ED83C LDR V0, [X20]
	0x037ED840 ADD X20, X19, 0xB8
	0x037ED844 ADD X1, X31, 0x20
	0x037ED848 MOV X0, X20
	0x037ED84C STR X8, [X31 + 0x30]
	0x037ED850 STR V0, [X31 + 0x2]
	0x037ED854 BL 0x37ED3C0
	0x037ED858 LDR X1, [X19 + 0x108]
	0x037ED85C CBZ X1, 0x37ED87C
	0x037ED860 LDR X8, [X20 + 0x10]
	0x037ED864 LDR V0, [X20]
	0x037ED868 ADD X0, X31, 0x0
	0x037ED86C MOVZ W2, 0x1
	0x037ED870 STR X8, [X31 + 0x10]
	0x037ED874 STR V0, [X31]
	0x037ED878 BL 0x37ED58C
	0x037ED87C LDP X20, X19, [X31 + 0x70]
	0x037ED880 LDR X30, [X31 + 0x60]
	0x037ED884 ADD X31, X31, 0x80
	0x037ED888 RET
	0x037ED88C LDR X9, [X0 + 0xE0]
	0x037ED890 LDR V0, [X0 + 0xD]
	0x037ED894 STR X9, [X8 + 0x10]
	0x037ED898 STR V0, [X8]
	0x037ED89C RET
	0x037ED8A0 SUB X31, X31, 0x30
	0x037ED8A4 STR X30, [X31 + 0x20]
	0x037ED8A8 LDR X8, [X1 + 0x10]
	0x037ED8AC LDR V0, [X1]
	0x037ED8B0 ADD X0, X0, 0xD0
	0x037ED8B4 ADD X1, X31, 0x0
	0x037ED8B8 STR X8, [X31 + 0x10]
	0x037ED8BC STR V0, [X31]
	0x037ED8C0 BL 0x37ED3C0
	0x037ED8C4 LDR X30, [X31 + 0x20]
	0x037ED8C8 ADD X31, X31, 0x30
	0x037ED8CC RET
	0x037ED8D0 SUB X31, X31, 0xE0
	0x037ED8D4 STP D9, D8, [X31 + 0xA0]
	0x037ED8D8 STR X30, [X31 + 0xB0]
	0x037ED8DC STP X22, X21, [X31 + 0xC0]
	0x037ED8E0 STP X20, X19, [X31 + 0xD0]
	0x037ED8E4 ADRP X20, 0xBF4000
	0x037ED8E8 LDRB W8, [X20 + 0x354]
	0x037ED8EC MOV X19, X0
	0x037ED8F0 TBNZ X8, 0x0, 0x37ED968
	0x037ED8F4 ADRP X0, 0x90A000
	0x037ED8F8 LDR X0, [X0 + 0x3D8]
	0x037ED8FC BL 0x1C16CF4
	0x037ED900 ADRP X0, 0x907000
	0x037ED904 LDR X0, [X0 + 0xE70]
	0x037ED908 BL 0x1C16CF4
	0x037ED90C ADRP X0, 0x95A000
	0x037ED910 LDR X0, [X0 + 0x408]
	0x037ED914 BL 0x1C16CF4
	0x037ED918 ADRP X0, 0x92E000
	0x037ED91C LDR X0, [X0 + 0x270]
	0x037ED920 BL 0x1C16CF4
	0x037ED924 ADRP X0, 0x92E000
	0x037ED928 LDR X0, [X0 + 0x528]
	0x037ED92C BL 0x1C16CF4
	0x037ED930 ADRP X0, 0x906000
	0x037ED934 LDR X0, [X0 + 0x598]
	0x037ED938 BL 0x1C16CF4
	0x037ED93C ADRP X0, 0x95C000
	0x037ED940 LDR X0, [X0 + 0x5E0]
	0x037ED944 BL 0x1C16CF4
	0x037ED948 ADRP X0, 0x95C000
	0x037ED94C LDR X0, [X0 + 0x5E8]
	0x037ED950 BL 0x1C16CF4
	0x037ED954 ADRP X0, 0x95C000
	0x037ED958 LDR X0, [X0 + 0x5F0]
	0x037ED95C BL 0x1C16CF4
	0x037ED960 MOVZ W8, 0x1
	0x037ED964 STRB W8, [X20 + 0x354]
	0x037ED968 LDR W8, [X19 + 0x20]
	0x037ED96C CMP W8, 0x1
	0x037ED970 B.NE 0x37ED97C
	0x037ED974 MOV X0, X19
	0x037ED978 BL 0x37ED0E8
	0x037ED97C ADRP X21, 0x92E000
	0x037ED980 LDR X0, [X19 + 0xF0]
	0x037ED984 LDR X21, [X21 + 0x270]
	0x037ED988 CBZ X0, 0x37ED9BC
	0x037ED98C MOV X1, X31
	0x037ED990 BL 0x376EE00
	0x037ED994 TBNZ X0, 0x0, 0x37EDA4C
	0x037ED998 LDR X0, [X21]
	0x037ED99C LDR X20, [X19 + 0xF0]
	0x037ED9A0 LDR W8, [X0 + 0xE0]
	0x037ED9A4 CBNZ W8, 0x37ED9AC
	0x037ED9A8 BL 0x1C16DFC
	0x037ED9AC MOV X0, X20
	0x037ED9B0 MOV X1, X31
	0x037ED9B4 BL 0x376E6E0
	0x037ED9B8 B 0x37EDA4C
	0x037ED9BC LDR X0, [X21]
	0x037ED9C0 LDR W8, [X0 + 0xE0]
	0x037ED9C4 CBNZ W8, 0x37ED9CC
	0x037ED9C8 BL 0x1C16DFC
	0x037ED9CC ADRP X8, 0x95C000
	0x037ED9D0 LDR X8, [X8 + 0x5F0]
	0x037ED9D4 MOV X1, X31
	0x037ED9D8 MOV X2, X31
	0x037ED9DC MOV X3, X31
	0x037ED9E0 LDR X0, [X8]
	0x037ED9E4 BL 0x376E4CC
	0x037ED9E8 CBZ X0, 0x37EDA48
	0x037ED9EC ADRP X8, 0x92E000
	0x037ED9F0 LDR X8, [X8 + 0x528]
	0x037ED9F4 LDR X9, [X0]
	0x037ED9F8 LDR X1, [X8]
	0x037ED9FC LDRB W10, [X9 + 0x130]
	0x037EDA00 LDRB W8, [X1 + 0x130]
	0x037EDA04 CMP W10, W8
	0x037EDA08 B.CC 0x37EDA44
	0x037EDA0C LDR X10, [X9 + 0xC8]
	0x037EDA10 SUB X9, X8, 0x1
	0x037EDA14 LDR X10, [X10, X9, LSL #3]
	0x037EDA18 CMP X10, X1
	0x037EDA1C B.NE 0x37EDA44
	0x037EDA20 STR X0, [X19 + 0xF0]
	0x037EDA24 LDR X10, [X0]
	0x037EDA28 LDRB W11, [X10 + 0x130]
	0x037EDA2C CMP W11, W8
	0x037EDA30 B.CC 0x37EDA44
	0x037EDA34 LDR X8, [X10 + 0xC8]
	0x037EDA38 LDR X8, [X8, X9, LSL #3]
	0x037EDA3C CMP X8, X1
	0x037EDA40 B.EQ 0x37EDA4C
	0x037EDA44 BL 0x1C171E0
	0x037EDA48 STR X0, [X19 + 0xF0]
	0x037EDA4C ADRP X8, 0x906000
	0x037EDA50 LDR X8, [X8 + 0x598]
	0x037EDA54 LDR X20, [X19 + 0x30]
	0x037EDA58 LDR X0, [X8]
	0x037EDA5C LDR W8, [X0 + 0xE0]
	0x037EDA60 CBNZ W8, 0x37EDA68
	0x037EDA64 BL 0x1C16DFC
	0x037EDA68 MOV X0, X20
	0x037EDA6C MOV X1, X31
	0x037EDA70 MOV X2, X31
	0x037EDA74 BL 0x3C354F8
	0x037EDA78 TBZ X0, 0x0, 0x37EDAD0
	0x037EDA7C LDR X0, [X19 + 0x30]
	0x037EDA80 CBZ X0, 0x37EDCD0
	0x037EDA84 MOV X1, X31
	0x037EDA88 BL 0x3C3E7F0
	0x037EDA8C LDR X8, [X19 + 0xF0]
	0x037EDA90 CBZ X8, 0x37EDCD0
	0x037EDA94 LDR X0, [X8 + 0x170]
	0x037EDA98 ADRP X8, 0x95A000
	0x037EDA9C LDR X8, [X8 + 0x408]
	0x037EDAA0 MOV W1, W31
	0x037EDAA4 MOV X2, X31
	0x037EDAA8 MOV V8.16B, V0.16B
	0x037EDAAC LDR X3, [X8]
	0x037EDAB0 MOV V9.16B, V1.16B
	0x037EDAB4 BL 0x2209FB4
	0x037EDAB8 LDR X0, [X19 + 0xF8]
	0x037EDABC CBZ X0, 0x37EDAD0
	0x037EDAC0 MOV V0.16B, V8.16B
	0x037EDAC4 MOV V1.16B, V9.16B
	0x037EDAC8 MOV X1, X31
	0x037EDACC BL 0x377E954
	0x037EDAD0 LDR X20, [X19 + 0x100]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+80], D12
	003 Move [X31+96], D11
	004 Move [X31+104], D10
	005 Move [X31+112], D9
	006 Move [X31+120], D8
	007 Move [X31+128], X29
	008 Move [X31+136], X30
	009 Move [X31+144], X28
	010 Move [X31+152], X27
	011 Move [X31+160], X26
	012 Move [X31+168], X25
	013 Move [X31+176], X24
	014 Move [X31+184], X23
	015 Move [X31+192], X22
	016 Move [X31+200], X21
	017 Move [X31+208], X20
	018 Move [X31+216], X19
	019 Move X24, 0xBF5000
	020 Move X23, 0x95D000
	021 Move W8, [X24+845]
	022 Move X23, [X23+1408]
	023 Move X19, X3
	024 Move X20, X2
	025 Move X22, X1
	026 Move X21, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {66}
	031 Move X0, 0x95D000
	032 Move X0, [X0+1416]
	033 Call 0x1C17CF4
	034 Move X0, 0x95D000
	035 Move X0, [X0+1408]
	036 Call 0x1C17CF4
	037 Move X0, 0x95D000
	038 Move X0, [X0+1424]
	039 Call 0x1C17CF4
	040 Move X0, 0x95D000
	041 Move X0, [X0+1432]
	042 Call 0x1C17CF4
	043 Move X0, 0x95D000
	044 Move X0, [X0+1440]
	045 Call 0x1C17CF4
	046 Move X0, 0x95D000
	047 Move X0, [X0+1448]
	048 Call 0x1C17CF4
	049 Move X0, 0x95D000
	050 Move X0, [X0+864]
	051 Call 0x1C17CF4
	052 Move X0, 0x95D000
	053 Move X0, [X0+1456]
	054 Call 0x1C17CF4
	055 Move X0, 0x95D000
	056 Move X0, [X0+832]
	057 Call 0x1C17CF4
	058 Move X0, 0x95D000
	059 Move X0, [X0+1464]
	060 Call 0x1C17CF4
	061 Move X0, 0x95D000
	062 Move X0, [X0+1472]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X24+845], W8
	066 Move X0, [X23]
	067 Move [X31+40], W31
	068 Move [X31+32], X31
	069 Move [X31+92], W31
	070 Move X26, 0x95D000
	071 Move W8, [X0+224]
	072 Move X26, [X26+832]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X22
	077 Move X1, X31
	078 Call GraphicRegistry.GetGraphicsForCanvas, X0
	079 Move X8, [X26]
	080 Move X22, X0
	081 Move W9, [X8+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {87}
	084 Move X0, X8
	085 Call 0x1C17DFC
	086 Move X8, [X26]
	087 Move X8, [X8+184]
	088 Move X8, [X8+24]
	089 Compare X8, 0
	090 JumpIfEqual {349}
	091 Move W2, [X8+24]
	092 Move W9, [X8+28]
	093 Add W9, W9, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move [X8+24], W31
	096 Move [X8+28], W9
	097 Move X0, [X8+16]
	098 Move W1, W31
	099 Move X3, X31
	100 Call Array.Clear, X0, X1, X2
	101 Compare X22, 0
	102 JumpIfEqual {349}
	103 Move X27, 0x95D000
	104 Move X28, 0x95D000
	105 Move X29, 0x95D000
	106 Move X27, [X27+1424]
	107 Move X28, [X28+1432]
	108 Move X29, [X29+1448]
	109 Move W23, W31
	110 Move X8, [X22]
	111 Move X1, [X27]
	112 NotImplemented "Instruction LDRH not yet implemented."
	113 Compare X9, 0
	114 JumpIfEqual {121}
	115 Move X10, [X8+176]
	116 Add X10, X10, 8
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract X9, X9, 1
	120 Add X10, X10, 16
	121 Move X0, X22
	122 Move W2, W31
	123 Call 0x1C5D788
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Add X8, X8, X9
	126 Add X0, X8, 312
	127 Move X8, [X0]
	128 Move X1, [X0+8]
	129 Move X0, X22
	130 NotImplemented "Instruction BLR not yet implemented."
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X8, [X22]
	133 Move X1, [X28]
	134 NotImplemented "Instruction LDRH not yet implemented."
	135 Compare X9, 0
	136 JumpIfEqual {143}
	137 Move X10, [X8+176]
	138 Add X10, X10, 8
	139 NotImplemented "Instruction LDUR not yet implemented."
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Subtract X9, X9, 1
	142 Add X10, X10, 16
	143 Move X0, X22
	144 Move W2, W31
	145 Call 0x1C5D788
	146 NotImplemented "Instruction LDRSW not yet implemented."
	147 Add X8, X8, X9
	148 Add X0, X8, 312
	149 Move X8, [X0]
	150 Move X2, [X0+8]
	151 Move X0, X22
	152 Move W1, W23
	153 NotImplemented "Instruction BLR not yet implemented."
	154 Compare X0, 0
	155 JumpIfEqual {349}
	156 Move X1, X31
	157 Move X24, X0
	158 Call Graphic.get_depth, X0
	159 Add W31, W0, 1
	160 Move X0, X24
	161 Move X1, X31
	162 Call Graphic.get_rectTransform, X0
	163 Move X9, [X20+16]
	164 Move V0, [X20]
	165 Move X8, [X26]
	166 Move X25, X0
	167 Move [X31+64], X9
	168 Move [X31+3], V0
	169 Move W9, [X8+224]
	170 Compare W9, 0
	171 JumpIfNotEqual {174}
	172 Move X0, X8
	173 Call 0x1C17DFC
	174 Move V0, [X31+3]
	175 Move X8, [X31+64]
	176 Add X1, X31, 0
	177 Add X2, X31, 32
	178 Add X3, X31, 92
	179 Move X0, X25
	180 Move [X31], V0
	181 Move [X31+16], X8
	182 Call TrackedDeviceRaycaster.RayIntersectsRectTransform, X0, X1, X2, X3
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {264}
	187 Move X8, [X21]
	188 Move X0, X21
	189 Move X9, [X8+600]
	190 Move X1, [X8+608]
	191 NotImplemented "Instruction BLR not yet implemented."
	192 Compare X0, 0
	193 JumpIfEqual {349}
	194 Move S10, [X31+32]
	195 Move S9, [X31+36]
	196 Move V8, [X31+40]
	197 Move X1, X31
	198 Move V0, V10
	199 Move V1, V9
	200 Move V2, V8
	201 Call Camera.WorldToScreenPoint, X0, X1
	202 Move X8, [X21]
	203 Move X0, X21
	204 Move V11, V0
	205 Move V12, V1
	206 Move X9, [X8+600]
	207 Move X1, [X8+608]
	208 NotImplemented "Instruction BLR not yet implemented."
	209 Move X8, [X24]
	210 Move X1, X0
	211 Move X0, X24
	212 Move V0, V11
	213 Move X9, [X8+1048]
	214 Move X2, [X8+1056]
	215 Move V1, V12
	216 NotImplemented "Instruction BLR not yet implemented."
	217 Move TEMP, X0
	218 And TEMP, TEMP, 1
	219 Compare TEMP, 1
	220 JumpIfNotEqual {264}
	221 Move X0, [X26]
	222 Move W8, [X0+224]
	223 Compare W8, 0
	224 JumpIfNotEqual {227}
	225 Call 0x1C17DFC
	226 Move X0, [X26]
	227 Move X8, [X0+184]
	228 Move X0, [X8+24]
	229 Compare X0, 0
	230 JumpIfEqual {349}
	231 Move W10, [X0+28]
	232 Move V0, [X31+92]
	233 Move X8, [X0+16]
	234 Move X9, [X29]
	235 Add W10, W10, 1
	236 Move [X0+28], W10
	237 Compare X8, 0
	238 JumpIfEqual {349}
	239 NotImplemented "Instruction LDRSW not yet implemented."
	240 Move W11, [X8+24]
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Add W9, W10, 1
	243 Add X8, X8, X10
	244 Move [X0+24], W9
	245 Move [X8+32], X24
	246 Move [X8+40], S10
	247 Move [X8+48], S9
	248 Move [X8+48], S8
	249 Move [X8+56], S11
	250 Move [X8+56], S12
	251 Move [X8+64], S0
	252 Move X8, [X9+32]
	253 Add X1, X31, 48
	254 Move X8, [X8+192]
	255 Move X2, [X8+112]
	256 Move [X31+48], X24
	257 Move [X31+56], S10
	258 Move [X31+64], S9
	259 Move [X31+64], S8
	260 Move [X31+72], S11
	261 Move [X31+72], S12
	262 Move [X31+80], S0
	263 Call List`1<RaycastHitData>.AddWithResize, X0, X1
	264 Add W23, W23, 1
	265 Move X8, [X26]
	266 Move W9, [X8+224]
	267 Compare W9, 0
	268 JumpIfNotEqual {272}
	269 Move X0, X8
	270 Call 0x1C17DFC
	271 Move X8, [X26]
	272 Move X23, 0x95D000
	273 Move X23, [X23+1472]
	274 Move X8, [X8+184]
	275 Move X0, [X23]
	276 Move X20, [X8+24]
	277 Move W9, [X0+224]
	278 Compare W9, 0
	279 JumpIfNotEqual {282}
	280 Call 0x1C17DFC
	281 Move X0, [X23]
	282 Move X8, [X0+184]
	283 Move X21, [X8+8]
	284 Compare X21, 0
	285 JumpIfNotEqual {307}
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {291}
	289 Call 0x1C17DFC
	290 Move X0, [X23]
	291 Move X9, 0x95D000
	292 Move X8, [X0+184]
	293 Move X9, [X9+1416]
	294 Move X22, [X8]
	295 Move X0, [X9]
	296 Call 0x1C17F10
	297 Move X8, 0x95D000
	298 Move X8, [X8+1464]
	299 Move X1, X22
	300 Move X3, X31
	301 Move X21, X0
	302 Move X2, [X8]
	303 Call Comparison`1<RaycastHitData>..ctor, X0, X1, X2
	304 Move X8, [X23]
	305 Move X8, [X8+184]
	306 Move [X8+8], X21
	307 Compare X20, 0
	308 JumpIfEqual {349}
	309 Move X8, 0x95D000
	310 Move X8, [X8+1456]
	311 Move X0, X20
	312 Move X1, X21
	313 Move X2, [X8]
	314 Call List`1<RaycastHitData>.Sort, X0, X1
	315 Move X0, [X26]
	316 Move W8, [X0+224]
	317 Compare W8, 0
	318 JumpIfNotEqual {320}
	319 Call 0x1C17DFC
	320 Compare X19, 0
	321 JumpIfEqual {349}
	322 Move X8, [X26]
	323 Move X0, X19
	324 Move X8, [X8+184]
	325 Move X1, [X8+24]
	326 Move X8, 0x95D000
	327 Move X8, [X8+1440]
	328 Move X2, [X8]
	329 Call List`1<RaycastHitData>.AddRange, X0, X1
	330 Move X20, [X31+208]
	331 Move X19, [X31+216]
	332 Move X22, [X31+192]
	333 Move X21, [X31+200]
	334 Move X24, [X31+176]
	335 Move X23, [X31+184]
	336 Move X26, [X31+160]
	337 Move X25, [X31+168]
	338 Move X28, [X31+144]
	339 Move X27, [X31+152]
	340 Move X29, [X31+128]
	341 Move X30, [X31+136]
	342 Move D9, [X31+112]
	343 Move D8, [X31+120]
	344 Move D11, [X31+96]
	345 Move D10, [X31+104]
	346 Move V12, [X31+80]
	347 Add X31, X31, 224
	348 Return 
	349 Call 0x1C17F20

Method: System.Boolean RayIntersectsRectTransform(UnityEngine.RectTransform transform, UnityEngine.Ray ray, out UnityEngine.Vector3 worldPosition, out System.Single distance)

Disassembly:
	0x037EDAD4 CBNZ X20, 0x37EDB08
	0x037EDAD8 ADRP X8, 0x907000
	0x037EDADC LDR X8, [X8 + 0xE70]
	0x037EDAE0 LDR X0, [X8]
	0x037EDAE4 BL 0x1C16F10
	0x037EDAE8 ADRP X8, 0x95C000
	0x037EDAEC LDR X8, [X8 + 0x5E0]
	0x037EDAF0 MOV X1, X19
	0x037EDAF4 MOV X3, X31
	0x037EDAF8 MOV X20, X0
	0x037EDAFC LDR X2, [X8]
	0x037EDB00 BL 0x3314368
	0x037EDB04 STR X20, [X19 + 0x100]
	0x037EDB08 LDR X0, [X21]
	0x037EDB0C LDR W8, [X0 + 0xE0]
	0x037EDB10 CBNZ W8, 0x37EDB18
	0x037EDB14 BL 0x1C16DFC
	0x037EDB18 MOV X0, X20
	0x037EDB1C MOV X1, X31
	0x037EDB20 BL 0x3770464
	0x037EDB24 LDR X20, [X19 + 0x108]
	0x037EDB28 CBNZ X20, 0x37EDB5C
	0x037EDB2C ADRP X8, 0x90A000
	0x037EDB30 LDR X8, [X8 + 0x3D8]
	0x037EDB34 LDR X0, [X8]
	0x037EDB38 BL 0x1C16F10
	0x037EDB3C ADRP X8, 0x95C000
	0x037EDB40 LDR X8, [X8 + 0x5E8]
	0x037EDB44 MOV X1, X19
	0x037EDB48 MOV X3, X31
	0x037EDB4C MOV X20, X0
	0x037EDB50 LDR X2, [X8]
	0x037EDB54 BL 0x2A719B8
	0x037EDB58 STR X20, [X19 + 0x108]
	0x037EDB5C LDR X8, [X19 + 0x68]
	0x037EDB60 LDUR V0, [X19 + 0x58]
	0x037EDB64 ADD X0, X31, 0x80
	0x037EDB68 MOVZ W2, 0x1
	0x037EDB6C MOV X1, X20
	0x037EDB70 ADD X21, X19, 0x58
	0x037EDB74 STR X8, [X31 + 0x90]
	0x037EDB78 STR V0, [X31 + 0x8]
	0x037EDB7C BL 0x37ED58C
	0x037EDB80 LDR X8, [X19 + 0x98]
	0x037EDB84 LDUR V0, [X19 + 0x88]
	0x037EDB88 ADD X0, X31, 0x60
	0x037EDB8C MOVZ W2, 0x1
	0x037EDB90 STR X8, [X31 + 0x70]
	0x037EDB94 STR V0, [X31 + 0x6]
	0x037EDB98 LDR X1, [X19 + 0x108]
	0x037EDB9C ADD X20, X19, 0x88
	0x037EDBA0 BL 0x37ED58C
	0x037EDBA4 LDR X8, [X19 + 0x80]
	0x037EDBA8 LDR V0, [X19 + 0x7]
	0x037EDBAC ADD X0, X31, 0x40
	0x037EDBB0 MOVZ W2, 0x1
	0x037EDBB4 STR X8, [X31 + 0x50]
	0x037EDBB8 STR V0, [X31 + 0x4]
	0x037EDBBC LDR X1, [X19 + 0x108]
	0x037EDBC0 BL 0x37ED58C
	0x037EDBC4 LDR X8, [X19 + 0xB0]
	0x037EDBC8 LDR V0, [X19 + 0xA]
	0x037EDBCC ADD X0, X31, 0x20
	0x037EDBD0 MOVZ W2, 0x1
	0x037EDBD4 STR X8, [X31 + 0x30]
	0x037EDBD8 STR V0, [X31 + 0x2]
	0x037EDBDC LDR X1, [X19 + 0x108]
	0x037EDBE0 BL 0x37ED58C
	0x037EDBE4 LDR X8, [X19 + 0xC8]
	0x037EDBE8 LDUR V0, [X19 + 0xB8]
	0x037EDBEC ADD X0, X31, 0x0
	0x037EDBF0 MOVZ W2, 0x1
	0x037EDBF4 STR X8, [X31 + 0x10]
	0x037EDBF8 STR V0, [X31]
	0x037EDBFC LDR X1, [X19 + 0x108]
	0x037EDC00 BL 0x37ED58C
	0x037EDC04 ADD X0, X19, 0x40
	0x037EDC08 MOV X1, X31
	0x037EDC0C BL 0x3745120
	0x037EDC10 CBZ X0, 0x37EDC1C
	0x037EDC14 MOV X1, X31
	0x037EDC18 BL 0x37350C8
	0x037EDC1C MOV X0, X21
	0x037EDC20 MOV X1, X31
	0x037EDC24 ADD X22, X19, 0x70
	0x037EDC28 BL 0x3745120
	0x037EDC2C CBZ X0, 0x37EDC38
	0x037EDC30 MOV X1, X31
	0x037EDC34 BL 0x37350C8
	0x037EDC38 MOV X0, X20
	0x037EDC3C MOV X1, X31
	0x037EDC40 ADD X21, X19, 0xA0
	0x037EDC44 BL 0x3745120
	0x037EDC48 CBZ X0, 0x37EDC54
	0x037EDC4C MOV X1, X31
	0x037EDC50 BL 0x37350C8
	0x037EDC54 MOV X0, X22
	0x037EDC58 MOV X1, X31
	0x037EDC5C ADD X20, X19, 0xB8
	0x037EDC60 BL 0x3745120
	0x037EDC64 CBZ X0, 0x37EDC70
	0x037EDC68 MOV X1, X31
	0x037EDC6C BL 0x37350C8
	0x037EDC70 MOV X0, X21
	0x037EDC74 MOV X1, X31
	0x037EDC78 BL 0x3745120
	0x037EDC7C CBZ X0, 0x37EDC88
	0x037EDC80 MOV X1, X31
	0x037EDC84 BL 0x37350C8
	0x037EDC88 MOV X0, X20
	0x037EDC8C MOV X1, X31
	0x037EDC90 BL 0x3745120
	0x037EDC94 CBZ X0, 0x37EDCA0
	0x037EDC98 MOV X1, X31
	0x037EDC9C BL 0x37350C8
	0x037EDCA0 ADD X0, X19, 0xD0
	0x037EDCA4 MOV X1, X31
	0x037EDCA8 BL 0x3745120
	0x037EDCAC CBZ X0, 0x37EDCB8
	0x037EDCB0 MOV X1, X31
	0x037EDCB4 BL 0x37350C8
	0x037EDCB8 LDP X20, X19, [X31 + 0xD0]
	0x037EDCBC LDP X22, X21, [X31 + 0xC0]
	0x037EDCC0 LDR X30, [X31 + 0xB0]
	0x037EDCC4 LDP D9, D8, [X31 + 0xA0]
	0x037EDCC8 ADD X31, X31, 0xE0
	0x037EDCCC RET
	0x037EDCD0 BL 0x1C16F20
	0x037EDCD4 SUB X31, X31, 0xE0
	0x037EDCD8 STR X30, [X31 + 0xA0]
	0x037EDCDC STP X24, X23, [X31 + 0xB0]
	0x037EDCE0 STP X22, X21, [X31 + 0xC0]
	0x037EDCE4 STP X20, X19, [X31 + 0xD0]
	0x037EDCE8 ADRP X20, 0xBF4000
	0x037EDCEC LDRB W8, [X20 + 0x355]
	0x037EDCF0 MOV X19, X0
	0x037EDCF4 TBNZ X8, 0x0, 0x37EDD0C
	0x037EDCF8 ADRP X0, 0x92E000
	0x037EDCFC LDR X0, [X0 + 0x270]
	0x037EDD00 BL 0x1C16CF4
	0x037EDD04 MOVZ W8, 0x1
	0x037EDD08 STRB W8, [X20 + 0x355]
	0x037EDD0C ADRP X21, 0x92E000
	0x037EDD10 LDR X0, [X19 + 0xF0]
	0x037EDD14 LDR X21, [X21 + 0x270]
	0x037EDD18 CBZ X0, 0x37EDD48
	0x037EDD1C MOV X1, X31
	0x037EDD20 BL 0x376EE00
	0x037EDD24 TBZ X0, 0x0, 0x37EDD48
	0x037EDD28 LDR X0, [X21]
	0x037EDD2C LDR X20, [X19 + 0xF0]
	0x037EDD30 LDR W8, [X0 + 0xE0]
	0x037EDD34 CBNZ W8, 0x37EDD3C
	0x037EDD38 BL 0x1C16DFC
	0x037EDD3C MOV X0, X20
	0x037EDD40 MOV X1, X31
	0x037EDD44 BL 0x376E798
	0x037EDD48 LDR X20, [X19 + 0xF8]
	0x037EDD4C CBZ X20, 0x37EDD70
	0x037EDD50 LDR X0, [X21]
	0x037EDD54 LDR W8, [X0 + 0xE0]
	0x037EDD58 CBNZ W8, 0x37EDD60
	0x037EDD5C BL 0x1C16DFC
	0x037EDD60 MOV X0, X20
	0x037EDD64 MOV X1, X31
	0x037EDD68 BL 0x376EC44
	0x037EDD6C STR X31, [X19 + 0xF8]
	0x037EDD70 LDR X20, [X19 + 0x100]
	0x037EDD74 CBZ X20, 0x37EDD94
	0x037EDD78 LDR X0, [X21]
	0x037EDD7C LDR W8, [X0 + 0xE0]
	0x037EDD80 CBNZ W8, 0x37EDD88
	0x037EDD84 BL 0x1C16DFC
	0x037EDD88 MOV X0, X20
	0x037EDD8C MOV X1, X31
	0x037EDD90 BL 0x377058C
	0x037EDD94 ADD X0, X19, 0x40
	0x037EDD98 MOV X1, X31
	0x037EDD9C BL 0x3745120
	0x037EDDA0 CBZ X0, 0x37EDDAC
	0x037EDDA4 MOV X1, X31
	0x037EDDA8 BL 0x3735150
	0x037EDDAC ADD X20, X19, 0x58
	0x037EDDB0 MOV X0, X20
	0x037EDDB4 MOV X1, X31
	0x037EDDB8 BL 0x3745120
	0x037EDDBC CBZ X0, 0x37EDDC8
	0x037EDDC0 MOV X1, X31
	0x037EDDC4 BL 0x3735150
	0x037EDDC8 ADD X21, X19, 0x88

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+112], X24
	012 Move [X31+120], X23
	013 Move [X31+128], X22
	014 Move [X31+136], X21
	015 Move [X31+144], X20
	016 Move [X31+152], X19
	017 Move X24, 0xBF5000
	018 Move X21, 0x909000
	019 Move W8, [X24+846]
	020 Move X21, [X21+2480]
	021 Move X19, X3
	022 Move X20, X2
	023 Move X22, X1
	024 Move X23, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {34}
	029 Move X0, 0x909000
	030 Move X0, [X0+2480]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X24+846], W8
	034 Move X0, [X21]
	035 Move W1, 4
	036 Move [X31+16], X31
	037 Move [X31+24], X31
	038 Call 0x1C17D6C
	039 Compare X23, 0
	040 JumpIfEqual {217}
	041 Move X21, X0
	042 Move X0, X23
	043 Move X1, X21
	044 Move X2, X31
	045 Call RectTransform.GetWorldCorners, X0, X1
	046 Compare X21, 0
	047 JumpIfEqual {217}
	048 Move W8, [X21+24]
	049 Compare W8, 0
	050 JumpIfEqual {216}
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move S0, [X21+32]
	054 Move S1, [X21+36]
	055 Move S4, [X21+48]
	056 Move S5, [X21+52]
	057 Move S2, [X21+40]
	058 Move S3, [X21+44]
	059 Move X8, [X21+56]
	060 Move V6, [X21+64]
	061 Add X0, X31, 16
	062 Move X1, X31
	063 Move [X31], X8
	064 Move [X31+8], S6
	065 Call 0x37F7094
	066 Move S8, [X22+8]
	067 Move S0, [X22+12]
	068 Move S1, [X22+16]
	069 Move S2, [X22+20]
	070 Move S12, [X31+16]
	071 Move S13, [X31+20]
	072 Move S11, [X31+24]
	073 Move S14, [X31+28]
	074 Move X23, 0xBED000
	075 Move S9, [X22]
	076 Move S10, [X22+4]
	077 Move W8, [X23+1450]
	078 Multiply S0, S0, S12
	079 Multiply S1, S1, S13
	080 Add S0, S0, S1
	081 Multiply S1, S2, S11
	082 Add S15, S1, S0
	083 Compare W8, 0
	084 JumpIfNotEqual {90}
	085 Move X0, 0x90E000
	086 Move X0, [X0+1208]
	087 Call 0x1C17CF4
	088 Move W8, 1
	089 Move [X23+1450], W8
	090 Move X8, 0x90E000
	091 Move X8, [X8+1208]
	092 Move X9, -47194112
	093 Move V0, [X9+576]
	094 NotImplemented "Instruction FABS not yet implemented."
	095 Move X8, [X8]
	096 Move S2, W31
	097 NotImplemented "Instruction FMAXNM not yet implemented."
	098 Multiply S0, S1, S0
	099 Move X8, [X8+184]
	100 Move S1, 8
	101 Move V3, [X8]
	102 Multiply S1, S3, S1
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 NotImplemented "Instruction FCSEL not yet implemented."
	105 NotImplemented "Instruction FABD not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Multiply S0, S9, S12
	108 Multiply S1, S10, S13
	109 Add S0, S0, S1
	110 Multiply S1, S8, S11
	111 Add S0, S1, S0
	112 NotImplemented "Instruction FNEG not yet implemented."
	113 Subtract S0, S0, S14
	114 NotImplemented "Instruction FDIV not yet implemented."
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 Move X0, X22
	117 Move V0, V8
	118 Move X1, X31
	119 Call Ray.GetPoint, X0, V0
	120 Move W8, [X21+24]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move S3, [X21+68]
	123 Move S4, [X21+72]
	124 Move S7, [X21+36]
	125 Move S6, [X21+40]
	126 Move V17, [X21+32]
	127 Move V5, [X21+76]
	128 Subtract S19, S4, S7
	129 Subtract S20, S3, S17
	130 Subtract S21, S0, S17
	131 Subtract S22, S1, S7
	132 Subtract S18, S5, S6
	133 Subtract S16, S2, S6
	134 Multiply S20, S21, S20
	135 Multiply S19, S22, S19
	136 Add S19, S20, S19
	137 Multiply S18, S16, S18
	138 Add S18, S18, S19
	139 NotImplemented "Instruction FCMP not yet implemented."
	140 Move S18, [X21+44]
	141 Move S19, [X21+48]
	142 Move V20, [X21+52]
	143 Subtract S17, S18, S17
	144 Subtract S7, S19, S7
	145 Subtract S6, S20, S6
	146 Multiply S17, S21, S17
	147 Multiply S7, S22, S7
	148 Add S7, S17, S7
	149 Multiply S6, S16, S6
	150 Add S6, S6, S7
	151 NotImplemented "Instruction FCMP not yet implemented."
	152 Move S6, [X21+56]
	153 Move S7, [X21+60]
	154 Move V16, [X21+64]
	155 Subtract S21, S18, S6
	156 Subtract S22, S19, S7
	157 Subtract S18, S0, S6
	158 Subtract S19, S1, S7
	159 Subtract S20, S20, S16
	160 Subtract S17, S2, S16
	161 Multiply S21, S18, S21
	162 Multiply S22, S19, S22
	163 Add S21, S21, S22
	164 Multiply S20, S17, S20
	165 Add S20, S20, S21
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 Subtract S3, S3, S6
	168 Subtract S4, S4, S7
	169 Subtract S5, S5, S16
	170 Multiply S3, S18, S3
	171 Multiply S4, S19, S4
	172 Add S3, S3, S4
	173 Multiply S4, S17, S5
	174 Add S3, S4, S3
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 Move W0, 1
	177 Move X21, 0xBEC000
	178 Move W8, [X21+1923]
	179 Compare W8, 0
	180 JumpIfNotEqual {186}
	181 Move X0, 0x907000
	182 Move X0, [X0+1440]
	183 Call 0x1C17CF4
	184 Move W8, 1
	185 Move [X21+1923], W8
	186 Move X8, 0x907000
	187 Move X8, [X8+1440]
	188 Move W0, W31
	189 Move S8, W31
	190 Move X8, [X8]
	191 Move X8, [X8+184]
	192 Move S0, [X8]
	193 Move S1, [X8+4]
	194 Move V2, [X8+8]
	195 Move [X20], S0
	196 Move [X20+8], S1
	197 Move [X20+8], S2
	198 Move [X19], S8
	199 Move X20, [X31+144]
	200 Move X19, [X31+152]
	201 Move X22, [X31+128]
	202 Move X21, [X31+136]
	203 Move X24, [X31+112]
	204 Move X23, [X31+120]
	205 Move X30, [X31+96]
	206 Move D9, [X31+80]
	207 Move D8, [X31+88]
	208 Move D11, [X31+64]
	209 Move D10, [X31+72]
	210 Move D13, [X31+48]
	211 Move D12, [X31+56]
	212 Move D15, [X31+32]
	213 Move D14, [X31+40]
	214 Add X31, X31, 160
	215 Return X0
	216 Call 0x1C17F28
	217 Call 0x1C17F20

Method: UnityEngine.Canvas get_canvas()

Disassembly:
	0x037ED2FC BL 0x1C16F20
	0x037ED300 LDR X0, [X0 + 0x28]
	0x037ED304 RET
	0x037ED308 STR X1, [X0 + 0x28]
	0x037ED30C B 0x37ED310
	0x037ED310 STR X30, [X31 - 0x20]!
	0x037ED314 STP X20, X19, [X31 + 0x10]
	0x037ED318 ADRP X20, 0xBF4000
	0x037ED31C LDRB W8, [X20 + 0x356]
	0x037ED320 MOV X19, X0
	0x037ED324 TBNZ X8, 0x0, 0x37ED33C
	0x037ED328 ADRP X0, 0x95C000
	0x037ED32C LDR X0, [X0 + 0x5D8]
	0x037ED330 BL 0x1C16CF4
	0x037ED334 MOVZ W8, 0x1
	0x037ED338 STRB W8, [X20 + 0x356]
	0x037ED33C LDR X0, [X19 + 0x28]
	0x037ED340 CBZ X0, 0x37ED354
	0x037ED344 ADRP X8, 0x95C000
	0x037ED348 LDR X8, [X8 + 0x5D8]
	0x037ED34C LDR X1, [X8]
	0x037ED350 BL 0x21A3F50
	0x037ED354 STR X0, [X19 + 0xE8]
	0x037ED358 LDP X20, X19, [X31 + 0x10]
	0x037ED35C LDR X30, [X31], #0x20
	0x037ED360 RET
	0x037ED364 LDR V0, [X0 + 0x3C]
	0x037ED368 RET
	0x037ED36C STR S0, [X0 + 0x3C]
	0x037ED370 RET
	0x037ED374 LDR X0, [X0 + 0xF0]
	0x037ED378 RET
	0x037ED37C LDR X9, [X0 + 0x50]
	0x037ED380 LDR V0, [X0 + 0x4]
	0x037ED384 STR X9, [X8 + 0x10]
	0x037ED388 STR V0, [X8]
	0x037ED38C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBF5000
	006 Move X20, 0x907000
	007 Move W8, [X21+847]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x95D000
	015 Move X0, [X0+1376]
	016 Call 0x1C17CF4
	017 Move X0, 0x907000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+847], W8
	022 Move X0, [X20]
	023 Move X20, [X19+64]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move X0, [X19+64]
	037 Move X8, 0x95D000
	038 Move X8, [X8+1376]
	039 Move X0, X19
	040 Move X1, [X8]
	041 Call 0x21A4894, X0
	042 Move [X19+64], X0
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Void .ctor()

Disassembly:
	0x037EDDE0 BL 0x3735150
	0x037EDDE4 ADD X22, X19, 0x70
	0x037EDDE8 MOV X0, X22
	0x037EDDEC MOV X1, X31
	0x037EDDF0 BL 0x3745120
	0x037EDDF4 CBZ X0, 0x37EDE00
	0x037EDDF8 MOV X1, X31
	0x037EDDFC BL 0x3735150
	0x037EDE00 ADD X23, X19, 0xA0
	0x037EDE04 MOV X0, X23
	0x037EDE08 MOV X1, X31
	0x037EDE0C BL 0x3745120
	0x037EDE10 CBZ X0, 0x37EDE1C
	0x037EDE14 MOV X1, X31
	0x037EDE18 BL 0x3735150
	0x037EDE1C ADD X24, X19, 0xB8
	0x037EDE20 MOV X0, X24
	0x037EDE24 MOV X1, X31
	0x037EDE28 BL 0x3745120
	0x037EDE2C CBZ X0, 0x37EDE38
	0x037EDE30 MOV X1, X31
	0x037EDE34 BL 0x3735150
	0x037EDE38 ADD X0, X19, 0xD0
	0x037EDE3C MOV X1, X31
	0x037EDE40 BL 0x3745120
	0x037EDE44 CBZ X0, 0x37EDE50
	0x037EDE48 MOV X1, X31
	0x037EDE4C BL 0x3735150
	0x037EDE50 LDR X1, [X19 + 0x108]
	0x037EDE54 CBZ X1, 0x37EDEF4
	0x037EDE58 LDR X8, [X20 + 0x10]
	0x037EDE5C LDR V0, [X20]
	0x037EDE60 ADD X0, X31, 0x80

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBF5000
	007 Move X22, 0x95D000
	008 Move X20, 0x95D000
	009 Move W8, [X21+848]
	010 Move X22, [X22+1480]
	011 Move X20, [X20+1488]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x95D000
	018 Move X0, [X0+1488]
	019 Call 0x1C17CF4
	020 Move X0, 0x95D000
	021 Move X0, [X0+1480]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+848], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call List`1<RaycastHitData>..ctor, X0
	030 Move W8, 0x447A0000
	031 Move [X19+40], X20
	032 Move [X19+52], W8
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+48]
	040 Call BaseRaycaster..ctor, X0
	041 Return 

Method: System.Void .cctor()

Disassembly:
	0x037EDE64 MOV W2, W31
	0x037EDE68 STR X8, [X31 + 0x90]
	0x037EDE6C STR V0, [X31 + 0x8]
	0x037EDE70 BL 0x37ED58C
	0x037EDE74 LDR X8, [X21 + 0x10]
	0x037EDE78 LDR V0, [X21]
	0x037EDE7C ADD X0, X31, 0x60
	0x037EDE80 MOV W2, W31
	0x037EDE84 STR X8, [X31 + 0x70]
	0x037EDE88 STR V0, [X31 + 0x6]
	0x037EDE8C LDR X1, [X19 + 0x108]
	0x037EDE90 BL 0x37ED58C
	0x037EDE94 LDR X8, [X22 + 0x10]
	0x037EDE98 LDR V0, [X22]
	0x037EDE9C ADD X0, X31, 0x40
	0x037EDEA0 MOV W2, W31
	0x037EDEA4 STR X8, [X31 + 0x50]
	0x037EDEA8 STR V0, [X31 + 0x4]
	0x037EDEAC LDR X1, [X19 + 0x108]
	0x037EDEB0 BL 0x37ED58C
	0x037EDEB4 LDR X8, [X23 + 0x10]
	0x037EDEB8 LDR V0, [X23]
	0x037EDEBC ADD X0, X31, 0x20
	0x037EDEC0 MOV W2, W31
	0x037EDEC4 STR X8, [X31 + 0x30]
	0x037EDEC8 STR V0, [X31 + 0x2]
	0x037EDECC LDR X1, [X19 + 0x108]
	0x037EDED0 BL 0x37ED58C
	0x037EDED4 LDR X8, [X24 + 0x10]
	0x037EDED8 LDR V0, [X24]
	0x037EDEDC ADD X0, X31, 0x0
	0x037EDEE0 MOV W2, W31
	0x037EDEE4 STR X8, [X31 + 0x10]
	0x037EDEE8 STR V0, [X31]
	0x037EDEEC LDR X1, [X19 + 0x108]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBF5000
	007 Move X22, 0x95D000
	008 Move X19, 0x95D000
	009 Move X20, 0x95D000
	010 Move W8, [X21+849]
	011 Move X22, [X22+1480]
	012 Move X19, [X19+1488]
	013 Move X20, [X20+832]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x95D000
	019 Move X0, [X0+1488]
	020 Call 0x1C17CF4
	021 Move X0, 0x95D000
	022 Move X0, [X0+1480]
	023 Call 0x1C17CF4
	024 Move X0, 0x95D000
	025 Move X0, [X0+832]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+849], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call List`1<RaycastHitData>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8+24], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

