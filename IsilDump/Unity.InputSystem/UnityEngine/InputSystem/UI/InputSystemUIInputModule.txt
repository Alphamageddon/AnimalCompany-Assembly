Type: UnityEngine.InputSystem.UI.InputSystemUIInputModule

Method: System.Boolean get_deselectOnBackgroundClick()

Disassembly:
	0x037E6768 BL 0x37E74A0
	0x037E676C ADD X22, X20, 0xA0

ISIL:
	001 Move W0, [X0+200]
	002 Return X0

Method: System.Void set_deselectOnBackgroundClick(System.Boolean value)

Disassembly:
	0x037E6770 MOVZ W8, 0x1
	0x037E6774 MOV X0, X22
	0x037E6778 MOV X1, X21

ISIL:
	001 And W8, W1, 1
	002 Move [X0+200], W8
	003 Return 

Method: UnityEngine.InputSystem.UI.UIPointerBehavior get_pointerBehavior()

Disassembly:
	0x037E677C STR W8, [X21 + 0x148]
	0x037E6780 BL 0x37E6850

ISIL:
	001 Move W0, [X0+204]
	002 Return X0

Method: System.Void set_pointerBehavior(UnityEngine.InputSystem.UI.UIPointerBehavior value)

Disassembly:
	0x037E6784 MOV X0, X19
	0x037E6788 MOV X1, X22

ISIL:
	001 Move [X0+204], W1
	002 Return 

Method: UnityEngine.InputSystem.UI.InputSystemUIInputModule/CursorLockBehavior get_cursorLockBehavior()

Disassembly:
	0x037E678C MOV X2, X21
	0x037E6790 BL 0x37E6964

ISIL:
	001 Move W0, [X0+208]
	002 Return X0

Method: System.Void set_cursorLockBehavior(UnityEngine.InputSystem.UI.InputSystemUIInputModule/CursorLockBehavior value)

Disassembly:
	0x037E6794 MOV X0, X19
	0x037E6798 MOV X1, X22

ISIL:
	001 Move [X0+208], W1
	002 Return 

Method: UnityEngine.GameObject get_localMultiPlayerRoot()

Disassembly:
	0x037E679C MOV X2, X21
	0x037E67A0 BL 0x37E7194

ISIL:
	001 Move X0, [X0+936]
	002 Return X0

Method: System.Void set_localMultiPlayerRoot(UnityEngine.GameObject value)

Disassembly:
	0x037E67A4 ADD X20, X20, 0x138
	0x037E67A8 MOVZ W8, 0x2

ISIL:
	001 Move [X0+936], X1
	002 Return 

Method: System.Void ActivateModule()

Disassembly:
	0x037E67AC MOV X0, X20
	0x037E67B0 MOV X1, X21
	0x037E67B4 STR W8, [X21 + 0x148]
	0x037E67B8 BL 0x37E6850
	0x037E67BC MOV X0, X19
	0x037E67C0 MOV X1, X20
	0x037E67C4 MOV X2, X21
	0x037E67C8 BL 0x37E6964
	0x037E67CC MOV X0, X19
	0x037E67D0 MOV X1, X20
	0x037E67D4 MOV X2, X21
	0x037E67D8 BL 0x37E7194
	0x037E67DC B 0x37E6824
	0x037E67E0 ADRP X8, 0x90D000
	0x037E67E4 LDR X8, [X8 + 0x598]
	0x037E67E8 LDR X23, [X19 + 0x68]
	0x037E67EC LDR X0, [X8]
	0x037E67F0 LDR W8, [X0 + 0xE0]
	0x037E67F4 CBNZ W8, 0x37E67FC
	0x037E67F8 BL 0x1C16DFC
	0x037E67FC MOV X0, X23
	0x037E6800 MOV X1, X31
	0x037E6804 MOV X2, X31
	0x037E6808 BL 0x3C3883C
	0x037E680C TBNZ X0, 0x0, 0x37E6824
	0x037E6810 LDR X8, [X20 + 0x1D0]
	0x037E6814 CBZ X8, 0x37E684C
	0x037E6818 LDR W8, [X8 + 0x194]
	0x037E681C CMP W8, 0x3
	0x037E6820 B.EQ 0x37E6728
	0x037E6824 LDP X20, X19, [X31 + 0x110]
	0x037E6828 LDP X22, X21, [X31 + 0x100]
	0x037E682C LDP X24, X23, [X31 + 0xF0]
	0x037E6830 LDP X29, X30, [X31 + 0xE0]
	0x037E6834 LDP D9, D8, [X31 + 0xD0]
	0x037E6838 LDP D11, D10, [X31 + 0xC0]
	0x037E683C LDP D13, D12, [X31 + 0xB0]
	0x037E6840 LDR V14, [X31 + 0xA0]
	0x037E6844 ADD X31, X31, 0x120
	0x037E6848 RET
	0x037E684C BL 0x1C16F20
	0x037E6850 SUB X31, X31, 0x70
	0x037E6854 STR X30, [X31 + 0x50]
	0x037E6858 STP X20, X19, [X31 + 0x60]
	0x037E685C MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBFC000
	006 Move W8, [X20+794]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x90E000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+794], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call BaseInputModule.ActivateModule, X0
	020 Move X8, [X19+56]
	021 Compare X8, 0
	022 JumpIfEqual {60}
	023 Move X9, 0x90E000
	024 Move X9, [X9+1432]
	025 Move X20, [X8+64]
	026 Move X0, [X9]
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move X21, [X19+56]
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {43}
	040 Compare X21, 0
	041 JumpIfEqual {60}
	042 Move X20, [X21+48]
	043 Move X8, [X19]
	044 Move X0, X19
	045 Move X9, [X8+616]
	046 Move X1, [X8+624]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Compare X21, 0
	049 JumpIfEqual {60}
	050 Move X1, X20
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X2, X0
	054 Move X0, X21
	055 Move X3, X31
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call EventSystem.SetSelectedGameObject, X0, X1, X2
	059 Return 
	060 Call 0x1C17F20

Method: System.Boolean IsPointerOverGameObject(System.Int32 pointerOrTouchId)

Disassembly:
	0x037E6860 MOV X20, X0
	0x037E6864 ADD X1, X0, 0x10
	0x037E6868 ADD X0, X31, 0x0
	0x037E686C MOVZ W2, 0x50
	0x037E6870 BL 0x3EB1AC0
	0x037E6874 CBZ X19, 0x37E68F8
	0x037E6878 ADD X0, X19, 0xA0
	0x037E687C ADD X1, X31, 0x0
	0x037E6880 MOVZ W2, 0x50
	0x037E6884 BL 0x3EB1AC0
	0x037E6888 LDR V0, [X20 + 0x80]
	0x037E688C ADD X8, X19, 0x114
	0x037E6890 MOV X0, X19
	0x037E6894 MOV X2, X31
	0x037E6898 STR D0, [X8]
	0x037E689C LDR W8, [X20 + 0x8C]
	0x037E68A0 STR W8, [X19 + 0x138]
	0x037E68A4 LDR V0, [X20 + 0x88]
	0x037E68A8 STR S0, [X19 + 0x134]
	0x037E68AC LDR X1, [X20 + 0x70]
	0x037E68B0 BL 0x3E4F3AC
	0x037E68B4 LDR X1, [X20 + 0x60]
	0x037E68B8 MOV X0, X19
	0x037E68BC MOV X2, X31
	0x037E68C0 BL 0x3E4F3AC
	0x037E68C4 LDR X8, [X20 + 0x68]
	0x037E68C8 STR X8, [X19 + 0x38]
	0x037E68CC LDR X8, [X20 + 0x78]
	0x037E68D0 STR X8, [X19 + 0x40]
	0x037E68D4 LDRB W8, [X20 + 0x90]
	0x037E68D8 STRB W8, [X19 + 0x145]
	0x037E68DC LDRB W8, [X20 + 0x92]
	0x037E68E0 CBZ W8, 0x37E68E8
	0x037E68E4 STRB W31, [X19 + 0xF8]
	0x037E68E8 LDP X20, X19, [X31 + 0x60]
	0x037E68EC LDR X30, [X31 + 0x50]
	0x037E68F0 ADD X31, X31, 0x70
	0x037E68F4 RET
	0x037E68F8 BL 0x1C16F20
	0x037E68FC STR X30, [X31 - 0x10]!
	0x037E6900 CBZ X2, 0x37E6944
	0x037E6904 LDR W8, [X2 + 0x194]
	0x037E6908 CMP W8, 0x2
	0x037E690C B.NE 0x37E6928
	0x037E6910 LDRB W8, [X1 + 0x8]
	0x037E6914 CBNZ W8, 0x37E6928
	0x037E6918 LDR W8, [X1 + 0xC]
	0x037E691C SUB W8, W8, 0x1
	0x037E6920 CMP W8, 0x1
	0x037E6924 B.HI 0x37E693C
	0x037E6928 LDR X8, [X2 + 0x50]
	0x037E692C MOV X1, X2
	0x037E6930 MOV X2, X8
	0x037E6934 LDR X30, [X31], #0x10
	0x037E6938 B 0x37E7734
	0x037E693C MOV X8, X31
	0x037E6940 B 0x37E692C
	0x037E6944 BL 0x1C16F20
	0x037E6948 STR X30, [X31 - 0x10]!
	0x037E694C LDR X8, [X0 + 0x1D0]
	0x037E6950 CBZ X8, 0x37E6960
	0x037E6954 LDR W0, [X8 + 0x194]
	0x037E6958 LDR X30, [X31], #0x10
	0x037E695C RET
	0x037E6960 BL 0x1C16F20
	0x037E6964 STR X30, [X31 - 0x50]!
	0x037E6968 STP X26, X25, [X31 + 0x10]
	0x037E696C STP X24, X23, [X31 + 0x20]
	0x037E6970 STP X22, X21, [X31 + 0x30]
	0x037E6974 STP X20, X19, [X31 + 0x40]
	0x037E6978 ADRP X21, 0xBFB000
	0x037E697C LDRB W8, [X21 + 0x321]
	0x037E6980 MOV X19, X2
	0x037E6984 MOV X20, X1
	0x037E6988 MOV X22, X0
	0x037E698C TBNZ X8, 0x0, 0x37E6A34
	0x037E6990 ADRP X0, 0x963000
	0x037E6994 LDR X0, [X0 + 0x380]
	0x037E6998 BL 0x1C16CF4
	0x037E699C ADRP X0, 0x963000
	0x037E69A0 LDR X0, [X0 + 0x388]
	0x037E69A4 BL 0x1C16CF4
	0x037E69A8 ADRP X0, 0x963000
	0x037E69AC LDR X0, [X0 + 0x390]
	0x037E69B0 BL 0x1C16CF4
	0x037E69B4 ADRP X0, 0x963000
	0x037E69B8 LDR X0, [X0 + 0x398]
	0x037E69BC BL 0x1C16CF4
	0x037E69C0 ADRP X0, 0x963000
	0x037E69C4 LDR X0, [X0 + 0x3A0]

ISIL:
	001 Move [X31-48], X29
	002 Move [X31-40], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract X31, X31, 544
	008 Move X21, 0xBFC000
	009 Move X22, 0x936000
	010 Move W8, [X21+795]
	011 Move X22, [X22+624]
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x90E000
	019 Move X0, [X0+2600]
	020 Call 0x1C17CF4
	021 Move X0, 0x964000
	022 Move X0, [X0+776]
	023 Call 0x1C17CF4
	024 Move X0, 0x936000
	025 Move X0, [X0+624]
	026 Call 0x1C17CF4
	027 Move X0, 0x90E000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move X0, 0x964000
	031 Move X0, [X0+784]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+795], W8
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X31
	041 Call InputSystem.get_isProcessingEvents
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {58}
	046 Move X8, 0x90E000
	047 Move X8, [X8+2600]
	048 Move X21, 0x964000
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Move X21, [X21+784]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, [X21]
	056 Move X1, X31
	057 Call Debug.LogWarning, X0
	058 Move TEMP, X20
	059 And TEMP, TEMP, -2147483648
	060 Compare TEMP, -2147483648
	061 JumpIfEqual {66}
	062 Move X0, X19
	063 Move W1, W20
	064 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	065 Move W1, W0
	066 Move W8, [X19+288]
	067 Add W31, W8, 1
	068 Move W1, [X19+292]
	069 Move W8, [X19+344]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CSINV not yet implemented."
	072 Add W31, W1, 1
	073 Move X8, 0x964000
	074 Move X8, [X8+776]
	075 Add X0, X19, 344
	076 Move X2, [X8]
	077 Add X8, X31, 0
	078 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	079 Move X8, [X31+464]
	080 Compare X8, 0
	081 JumpIfEqual {104}
	082 Move X9, 0x90E000
	083 Move X9, [X9+1432]
	084 Move X19, [X8+32]
	085 Move X0, [X9]
	086 Move W9, [X0+224]
	087 Compare W9, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X19
	091 Move X1, X31
	092 Move X2, X31
	093 Call Object.op_Inequality, X0, X1
	094 Move W0, W31
	095 And W0, W0, 1
	096 Add X31, X31, 544
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X29, [X31+48]
	102 Move X30, [X31+56]
	103 Return X0
	104 Call 0x1C17F20

Method: UnityEngine.EventSystems.RaycastResult GetLastRaycastResult(System.Int32 pointerOrTouchId)

Disassembly:
	0x037E6AF8 B.NE 0x37E6AE4
	0x037E6AFC MOVZ W2, 0x15
	0x037E6B00 MOV X0, X23
	0x037E6B04 BL 0x1C5C788
	0x037E6B08 B 0x37E6B1C
	0x037E6B0C LDR W9, [X10]
	0x037E6B10 ADD W9, W9, 0x15
	0x037E6B14 ADD X8, X8, W9, 0x4, SXTW
	0x037E6B18 ADD X0, X8, 0x138
	0x037E6B1C LDP X8, X1, [X0]
	0x037E6B20 MOV X0, X23
	0x037E6B24 ADD X24, X19, 0x104
	0x037E6B28 BLR X8
	0x037E6B2C STR S0, [X20 + 0x8]
	0x037E6B30 ADRP X23, 0xBF3000
	0x037E6B34 LDRB W8, [X23 + 0x78F]
	0x037E6B38 CBNZ W8, 0x37E6B50
	0x037E6B3C ADRP X0, 0x915000
	0x037E6B40 LDR X0, [X0 + 0xF08]
	0x037E6B44 BL 0x1C16CF4
	0x037E6B48 MOVZ W8, 0x1
	0x037E6B4C STRB W8, [X23 + 0x78F]
	0x037E6B50 ADRP X8, 0x915000
	0x037E6B54 LDR X8, [X8 + 0xF08]
	0x037E6B58 ADD X1, X19, 0x50
	0x037E6B5C ADD X0, X19, 0xA0
	0x037E6B60 MOVZ W2, 0x50
	0x037E6B64 LDR X8, [X8]
	0x037E6B68 LDR X8, [X8 + 0xB8]
	0x037E6B6C LDR V1, [X8]
	0x037E6B70 STRB W31, [X19 + 0x145]
	0x037E6B74 LDR V0, [X24]
	0x037E6B78 STP D1, D0, [X24 + 0x8]
	0x037E6B7C BL 0x3EB1AC0
	0x037E6B80 MOVZ W8, 0x1
	0x037E6B84 STRB W8, [X19 + 0xF8]
	0x037E6B88 STRB W8, [X19 + 0x144]
	0x037E6B8C ADRP X26, 0x935000
	0x037E6B90 LDR X26, [X26 + 0x9F8]
	0x037E6B94 LDR X0, [X26]
	0x037E6B98 LDR W8, [X0 + 0xE0]
	0x037E6B9C CBNZ W8, 0x37E6BA4
	0x037E6BA0 BL 0x1C16DFC
	0x037E6BA4 ADRP X8, 0x963000

ISIL:
	001 Move [X31-48], X29
	002 Move [X31-40], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract X31, X31, 544
	008 Move X22, 0xBFC000
	009 Move W9, [X22+796]
	010 Move W21, W1
	011 Move X20, X0
	012 Move X19, X8
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x964000
	018 Move X0, [X0+776]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+796], W8
	022 Move X0, X20
	023 Move W1, W21
	024 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	025 Add W31, W0, 1
	026 Move X8, 0x964000
	027 Move X8, [X8+776]
	028 Move W1, W0
	029 Add X0, X20, 344
	030 Move X2, [X8]
	031 Add X8, X31, 0
	032 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	033 Move X8, [X31+464]
	034 Compare X8, 0
	035 JumpIfEqual {54}
	036 Add X1, X8, 80
	037 Move W2, 80
	038 Move X0, X19
	039 Call 0x3EB2AC0
	040 NotImplemented "Instruction MOVI not yet implemented."
	041 Move [X19+48], V0
	042 Move [X19+56], V0
	043 Move [X19+16], V0
	044 Move [X19+24], V0
	045 Move [X19], V0
	046 Add X31, X31, 544
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X29, [X31+48]
	052 Move X30, [X31+56]
	053 Return X0
	054 Call 0x1C17F20

Method: UnityEngine.EventSystems.RaycastResult PerformRaycast(UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData)

Disassembly:
	0x037E6BA8 LDR X8, [X8 + 0x3C0]
	0x037E6BAC MOV X0, X21
	0x037E6BB0 LDR X1, [X8]
	0x037E6BB4 BL 0x21DDB64
	0x037E6BB8 LDR X8, [X22 + 0x38]
	0x037E6BBC CBZ X8, 0x37E7190
	0x037E6BC0 MOV X23, X0
	0x037E6BC4 LDR X0, [X25]
	0x037E6BC8 LDR X24, [X8 + 0x40]
	0x037E6BCC LDR W9, [X0 + 0xE0]
	0x037E6BD0 CBNZ W9, 0x37E6BD8
	0x037E6BD4 BL 0x1C16DFC
	0x037E6BD8 MOV X0, X23
	0x037E6BDC MOV X1, X24
	0x037E6BE0 MOV X2, X31
	0x037E6BE4 BL 0x3C354F8
	0x037E6BE8 TBZ X0, 0x0, 0x37E6C30
	0x037E6BEC LDR X0, [X25]
	0x037E6BF0 LDR W8, [X0 + 0xE0]
	0x037E6BF4 CBNZ W8, 0x37E6BFC
	0x037E6BF8 BL 0x1C16DFC
	0x037E6BFC MOV X0, X23
	0x037E6C00 MOV X1, X31
	0x037E6C04 MOV X2, X31
	0x037E6C08 BL 0x3C354F8
	0x037E6C0C TBNZ X0, 0x0, 0x37E6C18
	0x037E6C10 LDRB W8, [X22 + 0xC8]
	0x037E6C14 CBZ W8, 0x37E6C30
	0x037E6C18 LDR X0, [X22 + 0x38]
	0x037E6C1C CBZ X0, 0x37E7190
	0x037E6C20 MOV X1, X31
	0x037E6C24 MOV X2, X19
	0x037E6C28 MOV X3, X31
	0x037E6C2C BL 0x3E4EC58
	0x037E6C30 LDR X0, [X26]
	0x037E6C34 LDR W8, [X0 + 0xE0]
	0x037E6C38 CBNZ W8, 0x37E6C40
	0x037E6C3C BL 0x1C16DFC
	0x037E6C40 ADRP X22, 0xBFB000
	0x037E6C44 LDRB W8, [X22 + 0x386]
	0x037E6C48 CBNZ W8, 0x37E6C60
	0x037E6C4C ADRP X0, 0x935000
	0x037E6C50 LDR X0, [X0 + 0x9F8]
	0x037E6C54 BL 0x1C16CF4
	0x037E6C58 MOVZ W8, 0x1
	0x037E6C5C STRB W8, [X22 + 0x386]
	0x037E6C60 LDR X0, [X26]
	0x037E6C64 LDR W8, [X0 + 0xE0]
	0x037E6C68 CBNZ W8, 0x37E6C74
	0x037E6C6C BL 0x1C16DFC
	0x037E6C70 LDR X0, [X26]
	0x037E6C74 ADRP X9, 0x963000
	0x037E6C78 LDR X8, [X0 + 0xB8]
	0x037E6C7C LDR X9, [X9 + 0x388]
	0x037E6C80 MOV X0, X21
	0x037E6C84 MOV X1, X19
	0x037E6C88 LDR X2, [X8 + 0x18]
	0x037E6C8C LDR X3, [X9]
	0x037E6C90 BL 0x21DD8A8
	0x037E6C94 LDR X8, [X25]
	0x037E6C98 MOV X22, X0
	0x037E6C9C LDR W9, [X8 + 0xE0]
	0x037E6CA0 CBNZ W9, 0x37E6CAC
	0x037E6CA4 MOV X0, X8
	0x037E6CA8 BL 0x1C16DFC
	0x037E6CAC MOV X0, X22
	0x037E6CB0 MOV X1, X31
	0x037E6CB4 MOV X2, X31
	0x037E6CB8 BL 0x3C3883C
	0x037E6CBC TBZ X0, 0x0, 0x37E6CE8
	0x037E6CC0 LDR X0, [X26]
	0x037E6CC4 LDR W8, [X0 + 0xE0]
	0x037E6CC8 CBNZ W8, 0x37E6CD0
	0x037E6CCC BL 0x1C16DFC
	0x037E6CD0 ADRP X8, 0x963000
	0x037E6CD4 LDR X8, [X8 + 0x3B8]
	0x037E6CD8 MOV X0, X21
	0x037E6CDC LDR X1, [X8]
	0x037E6CE0 BL 0x21DDB64
	0x037E6CE4 MOV X22, X0
	0x037E6CE8 LDR X0, [X25]
	0x037E6CEC LDR X23, [X19 + 0x30]
	0x037E6CF0 LDR W8, [X0 + 0xE0]
	0x037E6CF4 CBNZ W8, 0x37E6CFC
	0x037E6CF8 BL 0x1C16DFC
	0x037E6CFC MOV X0, X22
	0x037E6D00 MOV X1, X23
	0x037E6D04 MOV X2, X31
	0x037E6D08 BL 0x3C3883C
	0x037E6D0C TBZ X0, 0x0, 0x37E6D48
	0x037E6D10 LDR V1, [X20 + 0x8]
	0x037E6D14 LDR V2, [X19 + 0x134]
	0x037E6D18 ADRP X8, 0xFFFFFFFFFD304000
	0x037E6D1C LDR V0, [X8 + 0x44C]
	0x037E6D20 FSUB S1, S1, S2
	0x037E6D24 FCMP S1, S0
	0x037E6D28 CSET W8, LS
	0x037E6D2C STRB W8, [X20 + 0x91]
	0x037E6D30 LDR W8, [X19 + 0x138]
	0x037E6D34 CMP W8, 0x1
	0x037E6D38 B.LT 0x37E6D60
	0x037E6D3C FCMP S1, S0
	0x037E6D40 B.HI 0x37E6D58
	0x037E6D44 B 0x37E6D60
	0x037E6D48 STRB W31, [X20 + 0x91]
	0x037E6D4C LDR W8, [X19 + 0x138]
	0x037E6D50 CMP W8, 0x1
	0x037E6D54 B.LT 0x37E6D60
	0x037E6D58 ADD X8, X19, 0x134
	0x037E6D5C STR X31, [X8]
	0x037E6D60 MOV X0, X19
	0x037E6D64 MOV X1, X22
	0x037E6D68 MOV X2, X31
	0x037E6D6C BL 0x3E4F3AC
	0x037E6D70 STR X21, [X19 + 0x38]
	0x037E6D74 LDR X0, [X26]
	0x037E6D78 LDR W8, [X0 + 0xE0]
	0x037E6D7C CBNZ W8, 0x37E6D84
	0x037E6D80 BL 0x1C16DFC
	0x037E6D84 ADRP X8, 0x963000
	0x037E6D88 LDR X8, [X8 + 0x3B0]
	0x037E6D8C MOV X0, X21
	0x037E6D90 LDR X1, [X8]
	0x037E6D94 BL 0x21DDB64
	0x037E6D98 STR X0, [X19 + 0x40]
	0x037E6D9C MOV X22, X0
	0x037E6DA0 LDR X0, [X25]
	0x037E6DA4 LDR W8, [X0 + 0xE0]
	0x037E6DA8 CBNZ W8, 0x37E6DB0
	0x037E6DAC BL 0x1C16DFC
	0x037E6DB0 MOV X0, X22
	0x037E6DB4 MOV X1, X31
	0x037E6DB8 MOV X2, X31
	0x037E6DBC BL 0x3C354F8
	0x037E6DC0 TBZ X0, 0x0, 0x37E6E2C
	0x037E6DC4 LDR X0, [X26]
	0x037E6DC8 LDR X22, [X19 + 0x40]
	0x037E6DCC LDR W8, [X0 + 0xE0]
	0x037E6DD0 CBNZ W8, 0x37E6DD8
	0x037E6DD4 BL 0x1C16DFC
	0x037E6DD8 ADRP X23, 0xBFB000
	0x037E6DDC LDRB W8, [X23 + 0x387]
	0x037E6DE0 CBNZ W8, 0x37E6DF8
	0x037E6DE4 ADRP X0, 0x935000
	0x037E6DE8 LDR X0, [X0 + 0x9F8]
	0x037E6DEC BL 0x1C16CF4
	0x037E6DF0 MOVZ W8, 0x1
	0x037E6DF4 STRB W8, [X23 + 0x387]
	0x037E6DF8 LDR X0, [X26]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+80], X30
	003 Move [X31+88], X25
	004 Move [X31+96], X24
	005 Move [X31+104], X23
	006 Move [X31+112], X22
	007 Move [X31+120], X21
	008 Move [X31+128], X20
	009 Move [X31+136], X19
	010 Move X22, 0xBFC000
	011 Move W9, [X22+797]
	012 Move X21, X1
	013 Move X19, X0
	014 Move X20, X8
	015 Move TEMP, X9
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0x964000
	020 Move X0, [X0+800]
	021 Call 0x1C17CF4
	022 Move X0, 0x964000
	023 Move X0, [X0+808]
	024 Call 0x1C17CF4
	025 Move X0, 0x964000
	026 Move X0, [X0+816]
	027 Call 0x1C17CF4
	028 Move X0, 0x964000
	029 Move X0, [X0+824]
	030 Call 0x1C17CF4
	031 Move X0, 0x964000
	032 Move X0, [X0+832]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+797], W8
	036 Compare X21, 0
	037 JumpIfEqual {149}
	038 Move W8, [X21+404]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X24, 0x964000
	041 Move X24, [X24+832]
	042 Move X0, [X24]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X24]
	048 Move X8, [X0+184]
	049 Move W8, [X8]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X25, 0x964000
	052 Move X25, [X25+800]
	053 Move W22, W31
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {59}
	057 Call 0x1C17DFC
	058 Move X0, [X24]
	059 Move X8, [X0+184]
	060 Move W8, [X8]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X24]
	067 Move X0, [X0+184]
	068 Move X2, [X25]
	069 Move W1, W22
	070 Call InlinedArray`1<Object>.get_Item, X0, X1
	071 Move X8, [X19+32]
	072 Compare X8, 0
	073 JumpIfEqual {148}
	074 Move W2, [X8+24]
	075 Move W9, [X8+28]
	076 Move X23, X0
	077 Add W9, W9, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X8+24], W31
	080 Move [X8+28], W9
	081 Move X0, [X8+16]
	082 Move W1, W31
	083 Move X3, X31
	084 Call Array.Clear, X0, X1, X2
	085 Compare X23, 0
	086 JumpIfEqual {148}
	087 Move X2, [X19+32]
	088 Move X0, X23
	089 Move X1, X21
	090 Call TrackedDeviceRaycaster.PerformRaycast, X0, X1, X2
	091 Move X0, [X19+32]
	092 Compare X0, 0
	093 JumpIfEqual {148}
	094 Move W8, [X0+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X0, [X24]
	097 Add W22, W22, 1
	098 Move X0, [X19+56]
	099 Compare X0, 0
	100 JumpIfEqual {148}
	101 Move X2, [X19+32]
	102 Move X1, X21
	103 Move X3, X31
	104 Call EventSystem.RaycastAll, X0, X1, X2
	105 Move X0, [X19+32]
	106 Add X8, X31, 0
	107 Move X1, X31
	108 Call BaseInputModule.FindFirstRaycast, X0
	109 Add X1, X31, 0
	110 Move W2, 80
	111 Move X0, X20
	112 Call 0x3EB2AC0
	113 Move X8, [X19+32]
	114 Compare X8, 0
	115 JumpIfEqual {148}
	116 Move W2, [X8+24]
	117 Move W9, [X8+28]
	118 Add W9, W9, 1
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move [X8+24], W31
	121 Move [X8+28], W9
	122 Move X0, [X8+16]
	123 Move W1, W31
	124 Move X3, X31
	125 Call Array.Clear, X0, X1, X2
	126 NotImplemented "Instruction MOVI not yet implemented."
	127 Move [X20+48], V0
	128 Move [X20+56], V0
	129 Move [X20+16], V0
	130 Move [X20+24], V0
	131 Move [X20], V0
	132 Move X20, [X31+128]
	133 Move X19, [X31+136]
	134 Move X22, [X31+112]
	135 Move X21, [X31+120]
	136 Move X24, [X31+96]
	137 Move X23, [X31+104]
	138 Move X30, [X31+80]
	139 Move X25, [X31+88]
	140 Add X31, X31, 144
	141 Return X0
	142 Move X8, 0x964000
	143 Move X8, [X8+824]
	144 Move W1, W31
	145 Move X2, [X8]
	146 Add X8, X31, 0
	147 Call List`1<RaycastResult>.get_Item, X0, X1
	148 Call 0x1C17F20
	149 Move X0, 0x913000
	150 Move X0, [X0+1320]
	151 Call 0x1C17D08
	152 Call 0x1C17F10
	153 Move X19, X0
	154 Move X0, 0x964000
	155 Move X0, [X0+840]
	156 Call 0x1C17D08
	157 Move X1, X0
	158 Move X0, X19
	159 Move X2, X31
	160 Call ArgumentNullException..ctor, X0, X1
	161 Move X0, 0x964000
	162 Move X0, [X0+848]
	163 Call 0x1C17D08
	164 Move X1, X0
	165 Move X0, X19
	166 Call 0x1C17DEC

Method: System.Void ProcessPointer(ref UnityEngine.InputSystem.UI.PointerModel state)

Disassembly:
	0x037E7480 MOV X0, X20
	0x037E7484 MOV X1, X19
	0x037E7488 LDP X20, X19, [X31 + 0x30]
	0x037E748C LDP X22, X21, [X31 + 0x20]
	0x037E7490 LDP X24, X23, [X31 + 0x10]
	0x037E7494 LDR X30, [X31], #0x40
	0x037E7498 B 0x37E7DCC
	0x037E749C BL 0x1C16F20
	0x037E74A0 STR D10, [X31 - 0x40]!
	0x037E74A4 STP D9, D8, [X31 + 0x8]
	0x037E74A8 STR X30, [X31 + 0x18]
	0x037E74AC STP X22, X21, [X31 + 0x20]
	0x037E74B0 STP X20, X19, [X31 + 0x30]
	0x037E74B4 ADRP X21, 0xBFA000
	0x037E74B8 LDRB W8, [X21 + 0x323]
	0x037E74BC MOV X19, X1
	0x037E74C0 MOV X20, X0
	0x037E74C4 TBNZ X8, 0x0, 0x37E74F4
	0x037E74C8 ADRP X0, 0x962000
	0x037E74CC LDR X0, [X0 + 0x3D8]
	0x037E74D0 BL 0x1C16CF4
	0x037E74D4 ADRP X0, 0x962000
	0x037E74D8 LDR X0, [X0 + 0x3E0]
	0x037E74DC BL 0x1C16CF4
	0x037E74E0 ADRP X0, 0x934000
	0x037E74E4 LDR X0, [X0 + 0x9F8]
	0x037E74E8 BL 0x1C16CF4
	0x037E74EC MOVZ W8, 0x1
	0x037E74F0 STRB W8, [X21 + 0x323]
	0x037E74F4 LDR V8, [X20 + 0x1E0]
	0x037E74F8 LDR V9, [X20 + 0x1E4]
	0x037E74FC ADRP X20, 0xBF2000
	0x037E7500 LDRB W8, [X20 + 0x5AA]
	0x037E7504 FMUL S0, S8, S8
	0x037E7508 FMUL S1, S9, S9
	0x037E750C FADD S10, S0, S1
	0x037E7510 CBNZ W8, 0x37E7528
	0x037E7514 ADRP X0, 0x913000
	0x037E7518 LDR X0, [X0 + 0x4B8]
	0x037E751C BL 0x1C16CF4
	0x037E7520 MOVZ W8, 0x1
	0x037E7524 STRB W8, [X20 + 0x5AA]
	0x037E7528 ADRP X8, 0x913000
	0x037E752C LDR X8, [X8 + 0x4B8]
	0x037E7530 ADRP X9, 0xFFFFFFFFFD303000
	0x037E7534 LDR V0, [X9 + 0x240]
	0x037E7538 FABS S1, S10
	0x037E753C LDR X8, [X8]
	0x037E7540 FMOV S2, W31
	0x037E7544 FMAXNM S1, S1, S2
	0x037E7548 FMUL S0, S1, S0
	0x037E754C LDR X8, [X8 + 0xB8]
	0x037E7550 FMOV S1, 8
	0x037E7554 LDR V3, [X8]
	0x037E7558 FMUL S1, S3, S1
	0x037E755C FCMP S0, S1
	0x037E7560 FCSEL S0, S0, S1, GT
	0x037E7564 FABD S1, S2, S2
	0x037E7568 FCMP S1, S0
	0x037E756C B.MI 0x37E7618
	0x037E7570 CBZ X19, 0x37E7630
	0x037E7574 STR S8, [X19 + 0x13C]
	0x037E7578 STR S9, [X19 + 0x140]
	0x037E757C ADRP X21, 0x934000
	0x037E7580 LDR X21, [X21 + 0x9F8]
	0x037E7584 LDR X20, [X19 + 0x20]
	0x037E7588 LDR X0, [X21]
	0x037E758C LDR W8, [X0 + 0xE0]
	0x037E7590 CBNZ W8, 0x37E7598
	0x037E7594 BL 0x1C16DFC
	0x037E7598 ADRP X8, 0x962000
	0x037E759C LDR X8, [X8 + 0x3E0]
	0x037E75A0 MOV X0, X20
	0x037E75A4 LDR X1, [X8]
	0x037E75A8 BL 0x21DDB64
	0x037E75AC ADRP X22, 0xBFA000
	0x037E75B0 LDRB W8, [X22 + 0x38E]
	0x037E75B4 MOV X20, X0
	0x037E75B8 CBNZ W8, 0x37E75D0
	0x037E75BC ADRP X0, 0x934000
	0x037E75C0 LDR X0, [X0 + 0x9F8]
	0x037E75C4 BL 0x1C16CF4
	0x037E75C8 MOVZ W8, 0x1
	0x037E75CC STRB W8, [X22 + 0x38E]
	0x037E75D0 LDR X0, [X21]
	0x037E75D4 LDR W8, [X0 + 0xE0]
	0x037E75D8 CBNZ W8, 0x37E75E4
	0x037E75DC BL 0x1C16DFC
	0x037E75E0 LDR X0, [X21]
	0x037E75E4 ADRP X9, 0x962000
	0x037E75E8 LDR X8, [X0 + 0xB8]
	0x037E75EC LDR X9, [X9 + 0x3D8]
	0x037E75F0 MOV X0, X20
	0x037E75F4 MOV X1, X19
	0x037E75F8 LDR X2, [X8 + 0x58]
	0x037E75FC LDR X3, [X9]
	0x037E7600 LDP X20, X19, [X31 + 0x30]
	0x037E7604 LDP X22, X21, [X31 + 0x20]
	0x037E7608 LDR X30, [X31 + 0x18]
	0x037E760C LDP D9, D8, [X31 + 0x8]
	0x037E7610 LDR V10, [X31], #0x40
	0x037E7614 B 0x21DD8A8
	0x037E7618 LDP X20, X19, [X31 + 0x30]
	0x037E761C LDP X22, X21, [X31 + 0x20]
	0x037E7620 LDR X30, [X31 + 0x18]
	0x037E7624 LDP D9, D8, [X31 + 0x8]
	0x037E7628 LDR V10, [X31], #0x40
	0x037E762C RET
	0x037E7630 BL 0x1C16F20
	0x037E7634 STP X30, X21, [X31 - 0x20]!
	0x037E7638 STP X20, X19, [X31 + 0x10]
	0x037E763C ADRP X21, 0xBFA000
	0x037E7640 LDRB W8, [X21 + 0x31F]
	0x037E7644 MOV X19, X1
	0x037E7648 MOV X20, X0
	0x037E764C TBNZ X8, 0x0, 0x37E7670
	0x037E7650 ADRP X0, 0x962000
	0x037E7654 LDR X0, [X0 + 0x3E8]
	0x037E7658 BL 0x1C16CF4
	0x037E765C ADRP X0, 0x90C000
	0x037E7660 LDR X0, [X0 + 0x598]
	0x037E7664 BL 0x1C16CF4
	0x037E7668 MOVZ W8, 0x1
	0x037E766C STRB W8, [X21 + 0x31F]
	0x037E7670 LDR X21, [X20 + 0x38]
	0x037E7674 CBZ X21, 0x37E7704
	0x037E7678 ADRP X8, 0x962000
	0x037E767C LDR X8, [X8 + 0x3E8]
	0x037E7680 LDR X9, [X21]
	0x037E7684 LDR X8, [X8]
	0x037E7688 LDRB W11, [X9 + 0x130]
	0x037E768C LDRB W10, [X8 + 0x130]
	0x037E7690 CMP W11, W10
	0x037E7694 B.CC 0x37E7704
	0x037E7698 LDR X9, [X9 + 0xC8]
	0x037E769C ADD X9, X9, X10, 0x3, LSL
	0x037E76A0 LDUR X9, [X9 - 0x8]
	0x037E76A4 CMP X9, X8
	0x037E76A8 B.NE 0x37E7704
	0x037E76AC ADRP X8, 0x90C000
	0x037E76B0 LDR X8, [X8 + 0x598]
	0x037E76B4 LDR X20, [X21 + 0x60]
	0x037E76B8 LDR X0, [X8]
	0x037E76BC LDR W8, [X0 + 0xE0]
	0x037E76C0 CBNZ W8, 0x37E76C8
	0x037E76C4 BL 0x1C16DFC
	0x037E76C8 MOV X0, X20
	0x037E76CC MOV X1, X31
	0x037E76D0 MOV X2, X31
	0x037E76D4 BL 0x3C354F8
	0x037E76D8 TBZ X0, 0x0, 0x37E7704
	0x037E76DC LDR X0, [X21 + 0x60]
	0x037E76E0 CBZ X0, 0x37E771C
	0x037E76E4 MOV X1, X31
	0x037E76E8 BL 0x3C356F8
	0x037E76EC CBZ X19, 0x37E771C
	0x037E76F0 MOV X1, X0
	0x037E76F4 MOV X0, X19
	0x037E76F8 MOV X2, X31
	0x037E76FC BL 0x3C40F48
	0x037E7700 TBZ X0, 0x0, 0x37E7714
	0x037E7704 MOV W0, W31
	0x037E7708 LDP X20, X19, [X31 + 0x10]
	0x037E770C LDP X30, X21, [X31], #0x20
	0x037E7710 RET
	0x037E7714 MOVZ W0, 0x1
	0x037E7718 B 0x37E7708
	0x037E771C BL 0x1C16F20
	0x037E7720 LDR W8, [X0 + 0x4]
	0x037E7724 SUB W8, W8, 0x1
	0x037E7728 CMP W8, 0x2
	0x037E772C CSET W0, CC
	0x037E7730 RET
	0x037E7734 SUB X31, X31, 0x70
	0x037E7738 STP X29, X30, [X31 + 0x10]
	0x037E773C STP X28, X27, [X31 + 0x20]
	0x037E7740 STP X26, X25, [X31 + 0x30]
	0x037E7744 STP X24, X23, [X31 + 0x40]
	0x037E7748 STP X22, X21, [X31 + 0x50]
	0x037E774C STP X20, X19, [X31 + 0x60]
	0x037E7750 ADRP X20, 0xBFA000
	0x037E7754 LDRB W8, [X20 + 0x320]
	0x037E7758 MOV X23, X2
	0x037E775C MOV X19, X1
	0x037E7760 STR X0, [X31 + 0x8]
	0x037E7764 TBNZ X8, 0x0, 0x37E77E8
	0x037E7768 ADRP X0, 0x962000
	0x037E776C LDR X0, [X0 + 0x3F0]
	0x037E7770 BL 0x1C16CF4
	0x037E7774 ADRP X0, 0x962000
	0x037E7778 LDR X0, [X0 + 0x3F8]
	0x037E777C BL 0x1C16CF4
	0x037E7780 ADRP X0, 0x962000
	0x037E7784 LDR X0, [X0 + 0x400]
	0x037E7788 BL 0x1C16CF4
	0x037E778C ADRP X0, 0x934000
	0x037E7790 LDR X0, [X0 + 0x9F8]
	0x037E7794 BL 0x1C16CF4
	0x037E7798 ADRP X0, 0x912000
	0x037E779C LDR X0, [X0 + 0x570]
	0x037E77A0 BL 0x1C16CF4
	0x037E77A4 ADRP X0, 0x962000
	0x037E77A8 LDR X0, [X0 + 0x408]
	0x037E77AC BL 0x1C16CF4
	0x037E77B0 ADRP X0, 0x962000
	0x037E77B4 LDR X0, [X0 + 0x410]
	0x037E77B8 BL 0x1C16CF4
	0x037E77BC ADRP X0, 0x912000
	0x037E77C0 LDR X0, [X0 + 0xCA0]
	0x037E77C4 BL 0x1C16CF4
	0x037E77C8 ADRP X0, 0x912000
	0x037E77CC LDR X0, [X0 + 0xCA8]
	0x037E77D0 BL 0x1C16CF4
	0x037E77D4 ADRP X0, 0x90C000
	0x037E77D8 LDR X0, [X0 + 0x598]
	0x037E77DC BL 0x1C16CF4
	0x037E77E0 MOVZ W8, 0x1
	0x037E77E4 STRB W8, [X20 + 0x320]
	0x037E77E8 CBZ X19, 0x37E7DB8
	0x037E77EC ADRP X26, 0x912000
	0x037E77F0 ADRP X21, 0x934000
	0x037E77F4 LDR X26, [X26 + 0xCA8]
	0x037E77F8 LDR X21, [X21 + 0x9F8]
	0x037E77FC MOV X0, X19
	0x037E7800 MOV X1, X31
	0x037E7804 BL 0x3E4F244
	0x037E7808 MOV W22, W0
	0x037E780C TBZ X0, 0x0, 0x37E78AC
	0x037E7810 LDR X0, [X19 + 0xF0]
	0x037E7814 CBZ X0, 0x37E7DB8
	0x037E7818 ADRP X28, 0x962000
	0x037E781C LDR X28, [X28 + 0x400]
	0x037E7820 MOV W24, W31
	0x037E7824 ADRP X20, 0xBFA000
	0x037E7828 MOVZ W27, 0x1
	0x037E782C LDR W8, [X0 + 0x18]
	0x037E7830 CMP W24, W8
	0x037E7834 B.GE 0x37E78AC
	0x037E7838 LDR X2, [X26]
	0x037E783C MOV W1, W24
	0x037E7840 BL 0x301BCCC
	0x037E7844 LDR X8, [X21]
	0x037E7848 MOV X25, X0
	0x037E784C LDR W9, [X8 + 0xE0]

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+160], D14
	003 Move [X31+176], D13
	004 Move [X31+184], D12
	005 Move [X31+192], D11
	006 Move [X31+200], D10
	007 Move [X31+208], D9
	008 Move [X31+216], D8
	009 Move [X31+224], X29
	010 Move [X31+232], X30
	011 Move [X31+240], X24
	012 Move [X31+248], X23
	013 Move [X31+256], X22
	014 Move [X31+264], X21
	015 Move [X31+272], X20
	016 Move [X31+280], X19
	017 Move X21, 0xBFB000
	018 Move W8, [X21+798]
	019 Move X20, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0x963000
	026 Move X0, [X0+888]
	027 Call 0x1C17CF4
	028 Move X0, 0x90D000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+798], W8
	033 NotImplemented "Instruction MOVI not yet implemented."
	034 Move [X31+128], V0
	035 Move [X31+136], V0
	036 Move [X31+96], V0
	037 Move [X31+104], V0
	038 Move [X31+5], V0
	039 Move X21, [X20+464]
	040 Compare X21, 0
	041 JumpIfEqual {273}
	042 Move W24, [X21+404]
	043 Add X23, X21, 260
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X31
	047 Call Cursor.get_lockState
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W8, [X19+208]
	050 Compare W8, 0
	051 JumpIfEqual {142}
	052 Move X0, X31
	053 Call Screen.get_width
	054 Move W22, W0
	055 Move X0, X31
	056 Call Screen.get_height
	057 Move S0, W22
	058 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	059 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	060 NotImplemented "Instruction MOVI not yet implemented."
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 Move V0, [X20+472]
	063 Move V1, [X23]
	064 Subtract V0, V0, V1
	065 Move [X23+8], D0
	066 Move V0, [X20+472]
	067 Move [X23], D0
	068 Move X8, 0x90D000
	069 Move V9, [X20+488]
	070 Move V8, [X20+492]
	071 Move V10, [X20+496]
	072 Move V11, [X20+500]
	073 Move X8, [X8+1432]
	074 Move V14, [X20+504]
	075 Move V13, [X20+508]
	076 Move V12, [X20+512]
	077 Move X0, [X8]
	078 Move X22, [X19+104]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X0, X22
	084 Move X1, X31
	085 Move X2, X31
	086 Call Object.op_Inequality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {135}
	091 Move X0, [X19+104]
	092 Compare X0, 0
	093 JumpIfEqual {273}
	094 Move V0, V9
	095 Move V1, V8
	096 Move V2, V10
	097 Move X1, X31
	098 Call Transform.TransformPoint, X0, X1
	099 Move X0, [X19+104]
	100 Compare X0, 0
	101 JumpIfEqual {273}
	102 Move X1, X31
	103 Move V9, V0
	104 Move V8, V1
	105 Move V10, V2
	106 Call Transform.get_rotation, X0
	107 Multiply S4, S11, S3
	108 Multiply S5, S12, S0
	109 Multiply S16, S14, S3
	110 Multiply S17, S12, S1
	111 Multiply S19, S13, S0
	112 Multiply S20, S14, S0
	113 Multiply S0, S11, S0
	114 Multiply S22, S13, S3
	115 Multiply S3, S12, S3
	116 Multiply S23, S12, S2
	117 Multiply S6, S13, S1
	118 Multiply S18, S11, S2
	119 Multiply S21, S11, S1
	120 Multiply S1, S14, S1
	121 Add S4, S4, S5
	122 Add S5, S16, S17
	123 Add S16, S22, S23
	124 Subtract S0, S3, S0
	125 Multiply S7, S14, S2
	126 Multiply S2, S13, S2
	127 Add S3, S6, S4
	128 Add S4, S18, S5
	129 Add S5, S20, S16
	130 Subtract S0, S0, S1
	131 Subtract S11, S3, S7
	132 Subtract S14, S4, S19
	133 Subtract S13, S5, S21
	134 Subtract S12, S0, S2
	135 Move [X21+424], S11
	136 Move [X21+428], S14
	137 Move [X21+432], S13
	138 Move [X21+436], S12
	139 Move [X21+412], S9
	140 Move [X21+416], S8
	141 Move [X21+420], S10
	142 Move V0, 0
	143 Move [X23], D0
	144 Move [X23+8], X31
	145 Move X22, X21
	146 Move X8, [X22+80]
	147 Move X0, X21
	148 Move X9, [X8+376]
	149 Move X1, [X8+384]
	150 NotImplemented "Instruction BLR not yet implemented."
	151 Add X8, X31, 0
	152 Move X0, X19
	153 Move X1, X21
	154 Call InputSystemUIInputModule.PerformRaycast, X0, X1
	155 Add X1, X31, 0
	156 Move W2, 80
	157 Move X0, X22
	158 Call 0x3EB2AC0
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Add X0, X31, 80
	161 Move W2, 80
	162 Move X1, X22
	163 Call 0x3EB2AC0
	164 Add X0, X31, 80
	165 Move X1, X31
	166 Call RaycastResult.get_isValid, X0
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {177}
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 Move V1, [X23]
	173 Add X8, X21, 260
	174 Subtract V1, V0, V1
	175 Move [X23+8], D1
	176 Move [X8], D0
	177 Add X22, X20, 8
	178 Move X0, X22
	179 Move X1, X21
	180 Move [X21+328], W31
	181 Call ButtonState.CopyPressStateTo, X0, X1
	182 Move X0, X19
	183 Move X1, X20
	184 Move X2, X21
	185 Call InputSystemUIInputModule.ProcessPointerMovement, X0, X1, X2
	186 Move W8, [X20]
	187 Compare W8, 0
	188 JumpIfEqual {235}
	189 Move X23, 0x963000
	190 Move X23, [X23+888]
	191 Move X0, X19
	192 Move X1, X22
	193 Move X2, X21
	194 Call InputSystemUIInputModule.ProcessPointerButton, X0, X1, X2
	195 Move X0, X19
	196 Move X1, X22
	197 Move X2, X21
	198 Call InputSystemUIInputModule.ProcessPointerButtonDrag, X0, X1, X2
	199 Move X0, [X23]
	200 Move W8, [X0+224]
	201 Compare W8, 0
	202 JumpIfNotEqual {204}
	203 Call 0x1C17DFC
	204 Move X0, X20
	205 Move X1, X21
	206 Call InputSystemUIInputModule.ProcessPointerScroll, X0, X1
	207 Add X22, X20, 160
	208 Move W8, 1
	209 Move X0, X22
	210 Move X1, X21
	211 Move [X21+328], W8
	212 Call ButtonState.CopyPressStateTo, X0, X1
	213 Move X0, X19
	214 Move X1, X22
	215 Move X2, X21
	216 Call InputSystemUIInputModule.ProcessPointerButton, X0, X1, X2
	217 Move X0, X19
	218 Move X1, X22
	219 Move X2, X21
	220 Call InputSystemUIInputModule.ProcessPointerButtonDrag, X0, X1, X2
	221 Add X20, X20, 312
	222 Move W8, 2
	223 Move X0, X20
	224 Move X1, X21
	225 Move [X21+328], W8
	226 Call ButtonState.CopyPressStateTo, X0, X1
	227 Move X0, X19
	228 Move X1, X20
	229 Move X2, X21
	230 Call InputSystemUIInputModule.ProcessPointerButton, X0, X1, X2
	231 Move X0, X19
	232 Move X1, X20
	233 Move X2, X21
	234 Call InputSystemUIInputModule.ProcessPointerButtonDrag, X0, X1, X2
	235 Move X8, 0x90D000
	236 Move X8, [X8+1432]
	237 Move X23, [X19+104]
	238 Move X0, [X8]
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {243}
	242 Call 0x1C17DFC
	243 Move X0, X23
	244 Move X1, X31
	245 Move X2, X31
	246 Call Object.op_Equality, X0, X1
	247 Move TEMP, X0
	248 And TEMP, TEMP, 1
	249 Compare TEMP, 1
	250 JumpIfEqual {256}
	251 Move X8, [X20+464]
	252 Compare X8, 0
	253 JumpIfEqual {273}
	254 Move W8, [X8+404]
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Move X20, [X31+272]
	257 Move X19, [X31+280]
	258 Move X22, [X31+256]
	259 Move X21, [X31+264]
	260 Move X24, [X31+240]
	261 Move X23, [X31+248]
	262 Move X29, [X31+224]
	263 Move X30, [X31+232]
	264 Move D9, [X31+208]
	265 Move D8, [X31+216]
	266 Move D11, [X31+192]
	267 Move D10, [X31+200]
	268 Move D13, [X31+176]
	269 Move D12, [X31+184]
	270 Move V14, [X31+160]
	271 Add X31, X31, 288
	272 Return 
	273 Call 0x1C17F20

Method: System.Boolean PointerShouldIgnoreTransform(UnityEngine.Transform t)

Disassembly:
	0x037E8634 LDR X8, [X19 + 0x3A8]
	0x037E8638 CBZ X8, 0x37E866C
	0x037E863C MOV X19, X0
	0x037E8640 MOV X0, X8
	0x037E8644 MOV X1, X31
	0x037E8648 BL 0x3C356F8
	0x037E864C CBZ X19, 0x37E866C
	0x037E8650 MOV X1, X0
	0x037E8654 MOV X0, X19
	0x037E8658 LDP X20, X19, [X31 + 0x20]
	0x037E865C LDP X22, X21, [X31 + 0x10]
	0x037E8660 MOV X2, X31
	0x037E8664 LDR X30, [X31], #0x30
	0x037E8668 B 0x3C40F48
	0x037E866C BL 0x1C16F20
	0x037E8670 LDR V0, [X0 + 0x58]
	0x037E8674 RET
	0x037E8678 STR S0, [X0 + 0x58]
	0x037E867C RET
	0x037E8680 LDR V0, [X0 + 0x5C]
	0x037E8684 RET
	0x037E8688 STR S0, [X0 + 0x5C]
	0x037E868C RET
	0x037E8690 STR X30, [X31 - 0x20]!
	0x037E8694 STP X20, X19, [X31 + 0x10]
	0x037E8698 ADRP X19, 0xBF9000
	0x037E869C ADRP X20, 0x933000
	0x037E86A0 LDRB W8, [X19 + 0x326]
	0x037E86A4 LDR X20, [X20 + 0x270]
	0x037E86A8 TBNZ X8, 0x0, 0x37E86C0
	0x037E86AC ADRP X0, 0x933000
	0x037E86B0 LDR X0, [X0 + 0x270]
	0x037E86B4 BL 0x1C16CF4
	0x037E86B8 MOVZ W8, 0x1
	0x037E86BC STRB W8, [X19 + 0x326]
	0x037E86C0 LDR X0, [X20]
	0x037E86C4 LDR W8, [X0 + 0xE0]
	0x037E86C8 CBNZ W8, 0x37E86D0
	0x037E86CC BL 0x1C16DFC
	0x037E86D0 MOV X0, X31
	0x037E86D4 BL 0x37701B0
	0x037E86D8 CBZ X0, 0x37E86F4
	0x037E86DC LDR W8, [X0 + 0x30]
	0x037E86E0 LDP X20, X19, [X31 + 0x10]
	0x037E86E4 CMP W8, 0x2
	0x037E86E8 CSET W0, EQ
	0x037E86EC LDR X30, [X31], #0x20
	0x037E86F0 RET
	0x037E86F4 BL 0x1C16F20
	0x037E86F8 STP X30, X19, [X31 - 0x10]!
	0x037E86FC ADRP X19, 0xBF9000
	0x037E8700 LDRB W8, [X19 + 0x327]
	0x037E8704 TBNZ X8, 0x0, 0x37E8728
	0x037E8708 ADRP X0, 0x933000
	0x037E870C LDR X0, [X0 + 0xED0]
	0x037E8710 BL 0x1C16CF4
	0x037E8714 ADRP X0, 0x933000
	0x037E8718 LDR X0, [X0 + 0xEC8]
	0x037E871C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBFA000
	006 Move W8, [X21+799]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x962000
	014 Move X0, [X0+1000]
	015 Call 0x1C17CF4
	016 Move X0, 0x90C000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+799], W8
	021 Move X21, [X20+56]
	022 Compare X21, 0
	023 JumpIfEqual {66}
	024 Move X8, 0x962000
	025 Move X8, [X8+1000]
	026 Move X9, [X21]
	027 Move X8, [X8]
	028 Move W11, [X9+304]
	029 Move W10, [X8+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, 0x90C000
	036 Move X8, [X8+1432]
	037 Move X20, [X21+96]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {66}
	051 Move X0, [X21+96]
	052 Compare X0, 0
	053 JumpIfEqual {73}
	054 Move X1, X31
	055 Call GameObject.get_transform, X0
	056 Compare X19, 0
	057 JumpIfEqual {73}
	058 Move X1, X0
	059 Move X0, X19
	060 Move X2, X31
	061 Call Transform.IsChildOf, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {72}
	066 Move W0, W31
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return X0
	072 Move W0, 1
	073 Call 0x1C17F20

Method: System.Void ProcessPointerMovement(ref UnityEngine.InputSystem.UI.PointerModel pointer, UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData)

Disassembly:
	0x037E78FC MOV X2, X31
	0x037E7900 BL 0x3C3883C
	0x037E7904 TBZ X0, 0x0, 0x37E79EC
	0x037E7908 LDR X0, [X19 + 0xF0]
	0x037E790C CBZ X0, 0x37E7DB8
	0x037E7910 MOV W24, W31
	0x037E7914 ADRP X20, 0xBFA000
	0x037E7918 MOVZ W29, 0x1
	0x037E791C LDR W2, [X0 + 0x18]
	0x037E7920 CMP W24, W2
	0x037E7924 B.GE 0x37E799C
	0x037E7928 LDR X2, [X26]
	0x037E792C MOV W1, W24
	0x037E7930 BL 0x301BCCC
	0x037E7934 LDR X8, [X21]
	0x037E7938 MOV X25, X0
	0x037E793C LDR W9, [X8 + 0xE0]
	0x037E7940 CBNZ W9, 0x37E794C
	0x037E7944 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Compare X2, 0
	003 JumpIfEqual {19}
	004 Move W8, [X2+404]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W8, [X1+8]
	007 Compare W8, 0
	008 JumpIfNotEqual {12}
	009 Move W8, [X1+12]
	010 Subtract W8, W8, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X8, [X2+80]
	013 Move X1, X2
	014 Move X2, X8
	015 Move X30, [X31+16]
	016 Call InputSystemUIInputModule.ProcessPointerMovement, X0, X1, X2
	017 Return 
	018 Move X8, X31
	019 Call 0x1C17F20

Method: System.Void ProcessPointerMovement(UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData, UnityEngine.GameObject currentPointerTarget)

Disassembly:
	0x037E8734 LDP X30, X19, [X31], #0x10
	0x037E8738 RET
	0x037E873C ADRP X8, 0x933000
	0x037E8740 LDR X8, [X8 + 0xEC8]
	0x037E8744 LDR X8, [X8]
	0x037E8748 LDR X8, [X8 + 0xB8]
	0x037E874C LDR X19, [X8]
	0x037E8750 CBZ X19, 0x37E87BC
	0x037E8754 ADRP X10, 0x933000
	0x037E8758 LDR X8, [X19]
	0x037E875C LDR X10, [X10 + 0xED0]
	0x037E8760 LDRH W9, [X8 + 0x12E]
	0x037E8764 LDR X1, [X10]
	0x037E8768 CBZ X9, 0x37E878C
	0x037E876C LDR X10, [X8 + 0xB0]
	0x037E8770 ADD X10, X10, 0x8
	0x037E8774 LDUR X11, [X10 - 0x8]
	0x037E8778 CMP X11, X1
	0x037E877C B.EQ 0x37E879C
	0x037E8780 SUBS X9, X9, 0x1
	0x037E8784 ADD X10, X10, 0x10
	0x037E8788 B.NE 0x37E8774
	0x037E878C MOVZ W2, 0x17
	0x037E8790 MOV X0, X19
	0x037E8794 BL 0x1C5C788
	0x037E8798 B 0x37E87AC
	0x037E879C LDR W9, [X10]
	0x037E87A0 ADD W9, W9, 0x17
	0x037E87A4 ADD X8, X8, W9, 0x4, SXTW
	0x037E87A8 ADD X0, X8, 0x138
	0x037E87AC LDP X2, X1, [X0]
	0x037E87B0 MOV X0, X19
	0x037E87B4 LDP X30, X19, [X31], #0x10
	0x037E87B8 BR X2
	0x037E87BC BL 0x1C16F20
	0x037E87C0 LDR V0, [X0 + 0x5C]
	0x037E87C4 RET
	0x037E87C8 STR S0, [X0 + 0x5C]
	0x037E87CC RET
	0x037E87D0 LDR V0, [X0 + 0x58]
	0x037E87D4 RET
	0x037E87D8 STR S0, [X0 + 0x58]
	0x037E87DC RET
	0x037E87E0 LDR X0, [X0 + 0x68]
	0x037E87E4 RET
	0x037E87E8 STR X1, [X0 + 0x68]
	0x037E87EC RET
	0x037E87F0 LDR V0, [X0 + 0x60]
	0x037E87F4 RET
	0x037E87F8 STR S0, [X0 + 0x60]
	0x037E87FC RET
	0x037E8800 STR X30, [X31 - 0x50]!
	0x037E8804 STP X26, X25, [X31 + 0x10]
	0x037E8808 STP X24, X23, [X31 + 0x20]
	0x037E880C STP X22, X21, [X31 + 0x30]
	0x037E8810 STP X20, X19, [X31 + 0x40]
	0x037E8814 ADRP X24, 0xBF9000
	0x037E8818 ADRP X25, 0x90B000
	0x037E881C LDRB W8, [X24 + 0x328]
	0x037E8820 LDR X25, [X25 + 0x598]
	0x037E8824 MOV X22, X4
	0x037E8828 MOV W23, W3
	0x037E882C MOV X20, X2
	0x037E8830 MOV X19, X1
	0x037E8834 MOV X21, X0
	0x037E8838 TBNZ X8, 0x0, 0x37E8850
	0x037E883C ADRP X0, 0x90B000
	0x037E8840 LDR X0, [X0 + 0x598]
	0x037E8844 BL 0x1C16CF4
	0x037E8848 MOVZ W8, 0x1
	0x037E884C STRB W8, [X24 + 0x328]
	0x037E8850 LDR X0, [X25]
	0x037E8854 LDR X24, [X19]
	0x037E8858 LDR W8, [X0 + 0xE0]
	0x037E885C CBNZ W8, 0x37E8864
	0x037E8860 BL 0x1C16DFC
	0x037E8864 MOV X0, X24
	0x037E8868 MOV X1, X20
	0x037E886C MOV X2, X31
	0x037E8870 BL 0x3C3883C
	0x037E8874 TBZ X0, 0x0, 0x37E8890
	0x037E8878 LDP X20, X19, [X31 + 0x40]
	0x037E887C LDP X22, X21, [X31 + 0x30]
	0x037E8880 LDP X24, X23, [X31 + 0x20]
	0x037E8884 LDP X26, X25, [X31 + 0x10]
	0x037E8888 LDR X30, [X31], #0x50
	0x037E888C RET
	0x037E8890 LDR X0, [X25]
	0x037E8894 LDR X24, [X19]
	0x037E8898 LDR W8, [X0 + 0xE0]
	0x037E889C CBNZ W8, 0x37E88A4
	0x037E88A0 BL 0x1C16DFC
	0x037E88A4 MOV X0, X24
	0x037E88A8 MOV X1, X31
	0x037E88AC MOV X2, X31
	0x037E88B0 BL 0x3C354F8
	0x037E88B4 TBZ X0, 0x0, 0x37E8908
	0x037E88B8 LDR X0, [X25]
	0x037E88BC LDR W8, [X0 + 0xE0]
	0x037E88C0 CBNZ W8, 0x37E88C8
	0x037E88C4 BL 0x1C16DFC
	0x037E88C8 MOV X0, X20
	0x037E88CC MOV X1, X31
	0x037E88D0 MOV X2, X31
	0x037E88D4 BL 0x3C354F8
	0x037E88D8 TBZ X0, 0x0, 0x37E8908
	0x037E88DC LDR X0, [X19]
	0x037E88E0 CBZ X0, 0x37E8AB4
	0x037E88E4 MOV X1, X31
	0x037E88E8 BL 0x37451B4
	0x037E88EC CBZ X20, 0x37E8AB4
	0x037E88F0 MOV X24, X0
	0x037E88F4 MOV X0, X20
	0x037E88F8 MOV X1, X31
	0x037E88FC BL 0x37451B4
	0x037E8900 CMP X24, X0
	0x037E8904 B.EQ 0x37E8878
	0x037E8908 LDR X0, [X25]
	0x037E890C LDR X24, [X19]
	0x037E8910 LDR W8, [X0 + 0xE0]
	0x037E8914 CBNZ W8, 0x37E891C
	0x037E8918 BL 0x1C16DFC
	0x037E891C MOV X0, X24
	0x037E8920 MOV X1, X31
	0x037E8924 MOV X2, X31
	0x037E8928 BL 0x3C354F8
	0x037E892C CMP X22, 0x0
	0x037E8930 CSET W25, NE
	0x037E8934 ANDS W31, W0, 0x1
	0x037E8938 CSEL W8, W25, W31, NE
	0x037E893C AND W24, W23, 0x1
	0x037E8940 ANDS W31, W8, W24, 0x0
	0x037E8944 B.EQ 0x37E8988
	0x037E8948 LDR X0, [X19]
	0x037E894C CBZ X0, 0x37E8AB4
	0x037E8950 MOV X1, X31
	0x037E8954 BL 0x37451B4
	0x037E8958 CBZ X0, 0x37E8AB4
	0x037E895C MOV X1, X22
	0x037E8960 MOV X2, X31
	0x037E8964 BL 0x3734A5C
	0x037E8968 LDR X0, [X19]
	0x037E896C CBZ X0, 0x37E8AB4
	0x037E8970 MOV X1, X31
	0x037E8974 BL 0x37451B4
	0x037E8978 CBZ X0, 0x37E8AB4
	0x037E897C MOV X1, X22
	0x037E8980 MOV X2, X31
	0x037E8984 BL 0x37349AC
	0x037E8988 LDR X0, [X19]
	0x037E898C CBZ X0, 0x37E89E4
	0x037E8990 MOV X1, X31
	0x037E8994 BL 0x37451B4
	0x037E8998 LDR X8, [X19]
	0x037E899C CMP X0, 0x0
	0x037E89A0 CSET W23, EQ
	0x037E89A4 CBZ X8, 0x37E89DC
	0x037E89A8 MOV X0, X8
	0x037E89AC MOV X1, X31
	0x037E89B0 BL 0x37451B4
	0x037E89B4 CBZ X0, 0x37E89DC
	0x037E89B8 LDR X0, [X19]
	0x037E89BC CBZ X0, 0x37E8AB4
	0x037E89C0 MOV X1, X31
	0x037E89C4 BL 0x37451B4
	0x037E89C8 CBZ X0, 0x37E8AB4
	0x037E89CC MOV X1, X31
	0x037E89D0 BL 0x373485C
	0x037E89D4 AND W26, W0, 0x1
	0x037E89D8 B 0x37E89EC
	0x037E89DC MOV W26, W31
	0x037E89E0 B 0x37E89EC
	0x037E89E4 MOV W26, W31
	0x037E89E8 MOVZ W23, 0x1
	0x037E89EC LDR X1, [X19]
	0x037E89F0 MOV X0, X21
	0x037E89F4 MOV W2, W31
	0x037E89F8 BL 0x37E8AB8
	0x037E89FC STR X20, [X19]
	0x037E8A00 CBZ X20, 0x37E8A1C
	0x037E8A04 MOV X0, X20
	0x037E8A08 MOV X1, X31
	0x037E8A0C BL 0x37451B4
	0x037E8A10 CMP X0, 0x0
	0x037E8A14 CSEL W8, W31, W25, EQ
	0x037E8A18 B 0x37E8A20
	0x037E8A1C MOV W8, W31
	0x037E8A20 ANDS W31, W8, W24, 0x0
	0x037E8A24 B.EQ 0x37E8A68
	0x037E8A28 LDR X0, [X19]
	0x037E8A2C CBZ X0, 0x37E8AB4
	0x037E8A30 MOV X1, X31
	0x037E8A34 BL 0x37451B4
	0x037E8A38 CBZ X0, 0x37E8AB4
	0x037E8A3C MOV X1, X22
	0x037E8A40 MOV X2, X31
	0x037E8A44 BL 0x3734A04
	0x037E8A48 LDR X0, [X19]
	0x037E8A4C CBZ X0, 0x37E8AB4
	0x037E8A50 MOV X1, X31
	0x037E8A54 BL 0x37451B4
	0x037E8A58 CBZ X0, 0x37E8AB4
	0x037E8A5C MOV X1, X22
	0x037E8A60 MOV X2, X31
	0x037E8A64 BL 0x3734954
	0x037E8A68 MOV X0, X21
	0x037E8A6C MOV X1, X31
	0x037E8A70 BL 0x3C32454
	0x037E8A74 TBZ X0, 0x0, 0x37E8878
	0x037E8A78 CBZ X20, 0x37E8878
	0x037E8A7C CBZ X20, 0x37E8AB4
	0x037E8A80 MOV X0, X20
	0x037E8A84 MOV X1, X31
	0x037E8A88 BL 0x37451B4
	0x037E8A8C CBZ X0, 0x37E8878
	0x037E8A90 ORR W8, W26, W23, 0x0
	0x037E8A94 CBZ W8, 0x37E8878
	0x037E8A98 LDR X1, [X19]
	0x037E8A9C LDP X20, X19, [X31 + 0x40]
	0x037E8AA0 LDP X22, X21, [X31 + 0x30]
	0x037E8AA4 LDP X24, X23, [X31 + 0x20]
	0x037E8AA8 LDP X26, X25, [X31 + 0x10]
	0x037E8AAC LDR X30, [X31], #0x50
	0x037E8AB0 B 0x37E8C30
	0x037E8AB4 BL 0x1C16F20
	0x037E8AB8 STR X30, [X31 - 0x30]!
	0x037E8ABC STP X22, X21, [X31 + 0x10]
	0x037E8AC0 STP X20, X19, [X31 + 0x20]
	0x037E8AC4 ADRP X22, 0xBF9000
	0x037E8AC8 LDRB W8, [X22 + 0x32E]
	0x037E8ACC MOV W20, W2
	0x037E8AD0 MOV X19, X1
	0x037E8AD4 MOV X21, X0
	0x037E8AD8 TBNZ X8, 0x0, 0x37E8B14
	0x037E8ADC ADRP X0, 0x961000
	0x037E8AE0 LDR X0, [X0 + 0x448]
	0x037E8AE4 BL 0x1C16CF4
	0x037E8AE8 ADRP X0, 0x961000
	0x037E8AEC LDR X0, [X0 + 0x450]
	0x037E8AF0 BL 0x1C16CF4
	0x037E8AF4 ADRP X0, 0x961000
	0x037E8AF8 LDR X0, [X0 + 0x458]
	0x037E8AFC BL 0x1C16CF4
	0x037E8B00 ADRP X0, 0x961000
	0x037E8B04 LDR X0, [X0 + 0x378]
	0x037E8B08 BL 0x1C16CF4
	0x037E8B0C MOVZ W8, 0x1
	0x037E8B10 STRB W8, [X22 + 0x32E]
	0x037E8B14 STR X31, [X31 + 0x8]
	0x037E8B18 CBZ X19, 0x37E8BD8
	0x037E8B1C MOV X0, X19
	0x037E8B20 MOV X1, X31
	0x037E8B24 BL 0x37451B4
	0x037E8B28 CBZ X0, 0x37E8BD8
	0x037E8B2C MOV X19, X0
	0x037E8B30 MOV X0, X21
	0x037E8B34 MOV X1, X31
	0x037E8B38 BL 0x3C32454
	0x037E8B3C TBNZ X0, 0x0, 0x37E8B44
	0x037E8B40 TBZ X20, 0x0, 0x37E8BD8
	0x037E8B44 ADRP X20, 0x961000
	0x037E8B48 LDR X20, [X20 + 0x378]
	0x037E8B4C LDR X0, [X20]
	0x037E8B50 LDR W8, [X0 + 0xE0]
	0x037E8B54 CBNZ W8, 0x37E8B60
	0x037E8B58 BL 0x1C16DFC
	0x037E8B5C LDR X0, [X20]
	0x037E8B60 LDR X8, [X0 + 0xB8]
	0x037E8B64 LDR X0, [X8]
	0x037E8B68 CBZ X0, 0x37E8C2C
	0x037E8B6C ADRP X8, 0x961000
	0x037E8B70 LDR X8, [X8 + 0x450]
	0x037E8B74 ADD X2, X31, 0x8
	0x037E8B78 MOV X1, X19
	0x037E8B7C LDR X3, [X8]
	0x037E8B80 BL 0x2ACF11C
	0x037E8B84 TBZ X0, 0x0, 0x37E8BD8
	0x037E8B88 LDR W8, [X31 + 0x8]
	0x037E8B8C SUBS W8, W8, 0x1
	0x037E8B90 B.NE 0x37E8B9C
	0x037E8B94 LDRB W9, [X31 + 0xC]
	0x037E8B98 TBNZ X9, 0x0, 0x37E8BE8
	0x037E8B9C LDR X0, [X20]
	0x037E8BA0 STR W8, [X31 + 0x8]
	0x037E8BA4 LDR W8, [X0 + 0xE0]
	0x037E8BA8 CBNZ W8, 0x37E8BB4
	0x037E8BAC BL 0x1C16DFC
	0x037E8BB0 LDR X0, [X20]
	0x037E8BB4 LDR X8, [X0 + 0xB8]
	0x037E8BB8 LDR X0, [X8]
	0x037E8BBC CBZ X0, 0x37E8C2C
	0x037E8BC0 ADRP X8, 0x961000
	0x037E8BC4 LDR X2, [X31 + 0x8]
	0x037E8BC8 LDR X8, [X8 + 0x458]
	0x037E8BCC MOV X1, X19
	0x037E8BD0 LDR X3, [X8]
	0x037E8BD4 BL 0x2ACD6B8
	0x037E8BD8 LDP X20, X19, [X31 + 0x20]
	0x037E8BDC LDP X22, X21, [X31 + 0x10]
	0x037E8BE0 LDR X30, [X31], #0x30
	0x037E8BE4 RET
	0x037E8BE8 MOV X0, X19
	0x037E8BEC MOV X1, X31
	0x037E8BF0 BL 0x3735150
	0x037E8BF4 LDR X0, [X20]
	0x037E8BF8 LDR W8, [X0 + 0xE0]
	0x037E8BFC CBNZ W8, 0x37E8C08
	0x037E8C00 BL 0x1C16DFC
	0x037E8C04 LDR X0, [X20]
	0x037E8C08 LDR X8, [X0 + 0xB8]
	0x037E8C0C LDR X0, [X8]
	0x037E8C10 CBZ X0, 0x37E8C2C
	0x037E8C14 ADRP X8, 0x961000
	0x037E8C18 LDR X8, [X8 + 0x448]
	0x037E8C1C MOV X1, X19
	0x037E8C20 LDR X2, [X8]
	0x037E8C24 BL 0x2ACEAE8
	0x037E8C28 B 0x37E8BD8
	0x037E8C2C BL 0x1C16F20
	0x037E8C30 STR X30, [X31 - 0x20]!
	0x037E8C34 STP X20, X19, [X31 + 0x10]
	0x037E8C38 ADRP X20, 0xBF9000
	0x037E8C3C LDRB W8, [X20 + 0x32D]
	0x037E8C40 MOV X19, X1
	0x037E8C44 TBNZ X8, 0x0, 0x37E8C80
	0x037E8C48 ADRP X0, 0x961000
	0x037E8C4C LDR X0, [X0 + 0x460]
	0x037E8C50 BL 0x1C16CF4
	0x037E8C54 ADRP X0, 0x961000
	0x037E8C58 LDR X0, [X0 + 0x450]
	0x037E8C5C BL 0x1C16CF4
	0x037E8C60 ADRP X0, 0x961000
	0x037E8C64 LDR X0, [X0 + 0x458]
	0x037E8C68 BL 0x1C16CF4
	0x037E8C6C ADRP X0, 0x961000
	0x037E8C70 LDR X0, [X0 + 0x378]
	0x037E8C74 BL 0x1C16CF4
	0x037E8C78 MOVZ W8, 0x1
	0x037E8C7C STRB W8, [X20 + 0x32D]
	0x037E8C80 STR X31, [X31 + 0x8]
	0x037E8C84 CBZ X19, 0x37E8D88
	0x037E8C88 MOV X0, X19
	0x037E8C8C MOV X1, X31
	0x037E8C90 BL 0x37451B4
	0x037E8C94 CBZ X0, 0x37E8D88
	0x037E8C98 ADRP X20, 0x961000
	0x037E8C9C LDR X20, [X20 + 0x378]
	0x037E8CA0 MOV X19, X0
	0x037E8CA4 LDR X0, [X20]
	0x037E8CA8 LDR W8, [X0 + 0xE0]
	0x037E8CAC CBNZ W8, 0x37E8CB8
	0x037E8CB0 BL 0x1C16DFC
	0x037E8CB4 LDR X0, [X20]
	0x037E8CB8 LDR X8, [X0 + 0xB8]
	0x037E8CBC LDR X0, [X8]
	0x037E8CC0 CBZ X0, 0x37E8D94
	0x037E8CC4 ADRP X8, 0x961000
	0x037E8CC8 LDR X8, [X8 + 0x450]
	0x037E8CCC ADD X2, X31, 0x8
	0x037E8CD0 MOV X1, X19
	0x037E8CD4 LDR X3, [X8]
	0x037E8CD8 BL 0x2ACF11C
	0x037E8CDC TBZ X0, 0x0, 0x37E8D28
	0x037E8CE0 LDR W8, [X31 + 0x8]
	0x037E8CE4 LDR X0, [X20]
	0x037E8CE8 ADD W8, W8, 0x1
	0x037E8CEC STR W8, [X31 + 0x8]
	0x037E8CF0 LDR W8, [X0 + 0xE0]
	0x037E8CF4 CBNZ W8, 0x37E8D00
	0x037E8CF8 BL 0x1C16DFC
	0x037E8CFC LDR X0, [X20]
	0x037E8D00 LDR X8, [X0 + 0xB8]
	0x037E8D04 LDR X0, [X8]
	0x037E8D08 CBZ X0, 0x37E8D94
	0x037E8D0C ADRP X8, 0x961000
	0x037E8D10 LDR X2, [X31 + 0x8]
	0x037E8D14 LDR X8, [X8 + 0x458]
	0x037E8D18 MOV X1, X19
	0x037E8D1C LDR X3, [X8]
	0x037E8D20 BL 0x2ACD6B8
	0x037E8D24 B 0x37E8D7C
	0x037E8D28 MOV X0, X19
	0x037E8D2C MOV X1, X31
	0x037E8D30 BL 0x373485C
	0x037E8D34 ANDS W31, W0, 0x1
	0x037E8D38 LDR X0, [X20]
	0x037E8D3C ORR X8, X31, 0x100000001
	0x037E8D40 CSINC X8, X8, X31, EQ
	0x037E8D44 STR X8, [X31 + 0x8]
	0x037E8D48 LDR W8, [X0 + 0xE0]
	0x037E8D4C CBNZ W8, 0x37E8D58
	0x037E8D50 BL 0x1C16DFC
	0x037E8D54 LDR X0, [X20]
	0x037E8D58 LDR X8, [X0 + 0xB8]
	0x037E8D5C LDR X0, [X8]
	0x037E8D60 CBZ X0, 0x37E8D94
	0x037E8D64 ADRP X8, 0x961000
	0x037E8D68 LDR X2, [X31 + 0x8]
	0x037E8D6C LDR X8, [X8 + 0x460]
	0x037E8D70 MOV X1, X19
	0x037E8D74 LDR X3, [X8]
	0x037E8D78 BL 0x2ACD6CC
	0x037E8D7C MOV X0, X19
	0x037E8D80 MOV X1, X31
	0x037E8D84 BL 0x37350C8
	0x037E8D88 LDP X20, X19, [X31 + 0x10]
	0x037E8D8C LDR X30, [X31], #0x20
	0x037E8D90 RET
	0x037E8D94 BL 0x1C16F20
	0x037E8D98 LDR X0, [X0 + 0x78]
	0x037E8D9C RET
	0x037E8DA0 LDRB W3, [X0 + 0xD4]
	0x037E8DA4 LDR X4, [X0 + 0xD8]
	0x037E8DA8 ADD X8, X0, 0x78
	0x037E8DAC MOV X2, X1
	0x037E8DB0 MOV X1, X8
	0x037E8DB4 B 0x37E8800
	0x037E8DB8 LDR X0, [X0 + 0xB0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0xBFA000
	015 Move W8, [X20+800]
	016 Move X23, X2
	017 Move X19, X1
	018 Move [X31+8], X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {55}
	023 Move X0, 0x962000
	024 Move X0, [X0+1008]
	025 Call 0x1C17CF4
	026 Move X0, 0x962000
	027 Move X0, [X0+1016]
	028 Call 0x1C17CF4
	029 Move X0, 0x962000
	030 Move X0, [X0+1024]
	031 Call 0x1C17CF4
	032 Move X0, 0x934000
	033 Move X0, [X0+2552]
	034 Call 0x1C17CF4
	035 Move X0, 0x912000
	036 Move X0, [X0+1392]
	037 Call 0x1C17CF4
	038 Move X0, 0x962000
	039 Move X0, [X0+1032]
	040 Call 0x1C17CF4
	041 Move X0, 0x962000
	042 Move X0, [X0+1040]
	043 Call 0x1C17CF4
	044 Move X0, 0x912000
	045 Move X0, [X0+3232]
	046 Call 0x1C17CF4
	047 Move X0, 0x912000
	048 Move X0, [X0+3240]
	049 Call 0x1C17CF4
	050 Move X0, 0x90C000
	051 Move X0, [X0+1432]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X20+800], W8
	055 Compare X19, 0
	056 JumpIfEqual {504}
	057 Move X26, 0x912000
	058 Move X21, 0x934000
	059 Move X26, [X26+3240]
	060 Move X21, [X21+2552]
	061 Move X0, X19
	062 Move X1, X31
	063 Call PointerEventData.IsPointerMoving, X0
	064 Move W22, W0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {111}
	069 Move X0, [X19+240]
	070 Compare X0, 0
	071 JumpIfEqual {504}
	072 Move X28, 0x962000
	073 Move X28, [X28+1024]
	074 Move W24, W31
	075 Move X20, 0xBFA000
	076 Move W27, 1
	077 Move W8, [X0+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X2, [X26]
	080 Move W1, W24
	081 Call List`1<Object>.get_Item, X0, X1
	082 Move X8, [X21]
	083 Move X25, X0
	084 Move W9, [X8+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {89}
	087 Move X0, X8
	088 Call 0x1C17DFC
	089 Move W8, [X20+899]
	090 Compare W8, 0
	091 JumpIfNotEqual {95}
	092 Move X0, X21
	093 Call 0x1C17CF4
	094 Move [X20+899], W27
	095 Move X0, [X21]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {101}
	099 Call 0x1C17DFC
	100 Move X0, [X21]
	101 Move X8, [X0+184]
	102 Move X3, [X28]
	103 Move X0, X25
	104 Move X1, X19
	105 Move X2, [X8]
	106 Call 0x21DE088, X0, X1, X2
	107 Move X0, [X19+240]
	108 Add W24, W24, 1
	109 Compare X0, 0
	110 JumpIfNotEqual {77}
	111 Move X27, 0x90C000
	112 Move X27, [X27+1432]
	113 Move X0, [X27]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X28, 0x962000
	119 Move X28, [X28+1016]
	120 Move X0, X23
	121 Move X1, X31
	122 Move X2, X31
	123 Call Object.op_Equality, X0, X1
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {142}
	128 Move X0, [X27]
	129 Move X24, [X19+32]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move X0, X24
	135 Move X1, X31
	136 Move X2, X31
	137 Call Object.op_Equality, X0, X1
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {205}
	142 Move X0, [X19+240]
	143 Compare X0, 0
	144 JumpIfEqual {504}
	145 Move W24, W31
	146 Move X20, 0xBFA000
	147 Move W29, 1
	148 Move W2, [X0+24]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X2, [X26]
	151 Move W1, W24
	152 Call List`1<Object>.get_Item, X0, X1
	153 Move X8, [X21]
	154 Move X25, X0
	155 Move W9, [X8+224]
	156 Compare W9, 0
	157 JumpIfNotEqual {160}
	158 Move X0, X8
	159 Call 0x1C17DFC
	160 Move W8, [X20+900]
	161 Compare W8, 0
	162 JumpIfNotEqual {166}
	163 Move X0, X21
	164 Call 0x1C17CF4
	165 Move [X20+900], W29
	166 Move X0, [X21]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {172}
	170 Call 0x1C17DFC
	171 Move X0, [X21]
	172 Move X8, [X0+184]
	173 Move X3, [X28]
	174 Move X0, X25
	175 Move X1, X19
	176 Move X2, [X8+16]
	177 Call 0x21DE088, X0, X1, X2
	178 Move X0, [X19+240]
	179 Add W24, W24, 1
	180 Compare X0, 0
	181 JumpIfNotEqual {148}
	182 Move W8, [X0+28]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Add W8, W8, 1
	185 Move [X0+24], W31
	186 Move [X0+28], W8
	187 Move X0, [X0+16]
	188 Move W1, W31
	189 Move X3, X31
	190 Call Array.Clear, X0, X1, X2
	191 Move X0, [X27]
	192 Move W8, [X0+224]
	193 Compare W8, 0
	194 JumpIfNotEqual {196}
	195 Call 0x1C17DFC
	196 Move X0, X23
	197 Move X1, X31
	198 Move X2, X31
	199 Call Object.op_Equality, X0, X1
	200 Move TEMP, X0
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfNotEqual {205}
	204 Move [X19+32], X31
	205 Move X0, [X27]
	206 Move X24, [X19+32]
	207 Move W8, [X0+224]
	208 Compare W8, 0
	209 JumpIfNotEqual {211}
	210 Call 0x1C17DFC
	211 Move X0, X24
	212 Move X1, X23
	213 Move X2, X31
	214 Call Object.op_Equality, X0, X1
	215 Move TEMP, X0
	216 And TEMP, TEMP, 1
	217 Compare TEMP, 1
	218 JumpIfNotEqual {231}
	219 Move X0, [X27]
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {224}
	223 Call 0x1C17DFC
	224 Move X0, X23
	225 Move X1, X31
	226 Call Object.op_Implicit, X0
	227 Move TEMP, X0
	228 And TEMP, TEMP, 1
	229 Compare TEMP, 1
	230 JumpIfEqual {490}
	231 Move X0, [X19+32]
	232 Move X1, X23
	233 Move X2, X31
	234 Call BaseInputModule.FindCommonRoot, X0, X1
	235 Compare X0, 0
	236 JumpIfEqual {240}
	237 Move X1, X31
	238 Call GameObject.get_transform, X0
	239 Move X24, X0
	240 Move X24, X31
	241 Move X0, [X27]
	242 Move X25, [X19+32]
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {247}
	246 Call 0x1C17DFC
	247 Move X0, X25
	248 Move X1, X31
	249 Move X2, X31
	250 Call Object.op_Inequality, X0, X1
	251 Move TEMP, X0
	252 And TEMP, TEMP, 1
	253 Compare TEMP, 1
	254 JumpIfNotEqual {335}
	255 Move X0, [X19+32]
	256 Compare X0, 0
	257 JumpIfEqual {504}
	258 Move X1, X31
	259 Call GameObject.get_transform, X0
	260 Move X20, 0x962000
	261 Move X20, [X20+1040]
	262 Move X25, X0
	263 Move X29, 0xBFA000
	264 Move X0, [X27]
	265 Move W8, [X0+224]
	266 Compare W8, 0
	267 JumpIfNotEqual {269}
	268 Call 0x1C17DFC
	269 Move X0, X25
	270 Move X1, X31
	271 Move X2, X31
	272 Call Object.op_Inequality, X0, X1
	273 Move TEMP, X0
	274 And TEMP, TEMP, 1
	275 Compare TEMP, 1
	276 JumpIfNotEqual {335}
	277 Move X0, [X27]
	278 Move W8, [X0+224]
	279 Compare W8, 0
	280 JumpIfNotEqual {282}
	281 Call 0x1C17DFC
	282 Move X0, X25
	283 Move X1, X24
	284 Move X2, X31
	285 Call Object.op_Inequality, X0, X1
	286 Move TEMP, X0
	287 And TEMP, TEMP, 1
	288 Compare TEMP, 1
	289 JumpIfNotEqual {335}
	290 Compare X25, 0
	291 JumpIfEqual {504}
	292 Move X0, X25
	293 Move X1, X31
	294 Call Component.get_gameObject, X0
	295 Move X8, [X21]
	296 Move X26, X0
	297 Move W9, [X8+224]
	298 Compare W9, 0
	299 JumpIfNotEqual {302}
	300 Move X0, X8
	301 Call 0x1C17DFC
	302 Move W8, [X29+900]
	303 Compare W8, 0
	304 JumpIfNotEqual {309}
	305 Move X0, X21
	306 Call 0x1C17CF4
	307 Move W8, 1
	308 Move [X29+900], W8
	309 Move X0, [X21]
	310 Move W8, [X0+224]
	311 Compare W8, 0
	312 JumpIfNotEqual {315}
	313 Call 0x1C17DFC
	314 Move X0, [X21]
	315 Move X8, [X0+184]
	316 Move X3, [X28]
	317 Move X0, X26
	318 Move X1, X19
	319 Move X2, [X8+16]
	320 Call 0x21DE088, X0, X1, X2
	321 Move X26, [X19+240]
	322 Move X0, X25
	323 Move X1, X31
	324 Call Component.get_gameObject, X0
	325 Compare X26, 0
	326 JumpIfEqual {504}
	327 Move X2, [X20]
	328 Move X1, X0
	329 Move X0, X26
	330 Call List`1<Object>.Remove, X0, X1
	331 Move X0, X25
	332 Move X1, X31
	333 Call Transform.get_parent, X0
	334 Move X25, X0
	335 Move [X19+32], X23
	336 Move X0, [X27]
	337 Move W8, [X0+224]
	338 Compare W8, 0
	339 JumpIfNotEqual {341}
	340 Call 0x1C17DFC
	341 Move X0, X23
	342 Move X1, X31
	343 Move X2, X31
	344 Call Object.op_Inequality, X0, X1
	345 Move TEMP, X0
	346 And TEMP, TEMP, 1
	347 Compare TEMP, 1
	348 JumpIfNotEqual {490}
	349 Compare X23, 0
	350 JumpIfEqual {504}
	351 Move X0, X23
	352 Move X1, X31
	353 Call GameObject.get_transform, X0
	354 Move X29, 0x962000
	355 Move X28, 0x912000
	356 Move X29, [X29+1008]
	357 Move X28, [X28+1392]
	358 Move X23, X0
	359 Move X26, 0xBFA000
	360 Move W20, 1
	361 Move X0, [X27]
	362 Move W8, [X0+224]
	363 Compare W8, 0
	364 JumpIfNotEqual {366}
	365 Call 0x1C17DFC
	366 Move X0, X23
	367 Move X1, X31
	368 Move X2, X31
	369 Call Object.op_Inequality, X0, X1
	370 Move TEMP, X0
	371 And TEMP, TEMP, 1
	372 Compare TEMP, 1
	373 JumpIfNotEqual {490}
	374 Move X0, [X27]
	375 Move W8, [X0+224]
	376 Compare W8, 0
	377 JumpIfNotEqual {379}
	378 Call 0x1C17DFC
	379 Move X0, X23
	380 Move X1, X24
	381 Move X2, X31
	382 Call Object.op_Inequality, X0, X1
	383 Move TEMP, X0
	384 And TEMP, TEMP, 1
	385 Compare TEMP, 1
	386 JumpIfNotEqual {490}
	387 Move X0, [X31+8]
	388 Move X1, X23
	389 Call InputSystemUIInputModule.PointerShouldIgnoreTransform, X0, X1
	390 Move TEMP, X0
	391 And TEMP, TEMP, 1
	392 Compare TEMP, 1
	393 JumpIfEqual {490}
	394 Compare X23, 0
	395 JumpIfEqual {504}
	396 Move X0, X23
	397 Move X1, X31
	398 Call Component.get_gameObject, X0
	399 Move X8, [X21]
	400 Move X25, X0
	401 Move W9, [X8+224]
	402 Compare W9, 0
	403 JumpIfNotEqual {406}
	404 Move X0, X8
	405 Call 0x1C17DFC
	406 Move W8, [X26+901]
	407 Compare W8, 0
	408 JumpIfNotEqual {412}
	409 Move X0, X21
	410 Call 0x1C17CF4
	411 Move [X26+901], W20
	412 Move X0, [X21]
	413 Move W8, [X0+224]
	414 Compare W8, 0
	415 JumpIfNotEqual {418}
	416 Call 0x1C17DFC
	417 Move X0, [X21]
	418 Move X8, [X0+184]
	419 Move X3, [X29]
	420 Move X0, X25
	421 Move X1, X19
	422 Move X2, [X8+8]
	423 Call 0x21DE088, X0, X1, X2
	424 Move TEMP, X22
	425 And TEMP, TEMP, 1
	426 Compare TEMP, 1
	427 JumpIfNotEqual {460}
	428 Move X0, X23
	429 Move X1, X31
	430 Call Component.get_gameObject, X0
	431 Move X8, [X21]
	432 Move X25, X0
	433 Move W9, [X8+224]
	434 Compare W9, 0
	435 JumpIfNotEqual {438}
	436 Move X0, X8
	437 Call 0x1C17DFC
	438 Move X8, 0xBFA000
	439 Move W8, [X8+899]
	440 Compare W8, 0
	441 JumpIfNotEqual {446}
	442 Move X0, X21
	443 Call 0x1C17CF4
	444 Move X8, 0xBFA000
	445 Move [X8+899], W20
	446 Move X0, [X21]
	447 Move W8, [X0+224]
	448 Compare W8, 0
	449 JumpIfNotEqual {452}
	450 Call 0x1C17DFC
	451 Move X0, [X21]
	452 Move X8, [X0+184]
	453 Move X0, X25
	454 Move X1, X19
	455 Move X2, [X8]
	456 Move X8, 0x962000
	457 Move X8, [X8+1024]
	458 Move X3, [X8]
	459 Call 0x21DE088, X0, X1, X2
	460 Move X25, [X19+240]
	461 Move X0, X23
	462 Move X1, X31
	463 Call Component.get_gameObject, X0
	464 Compare X25, 0
	465 JumpIfEqual {504}
	466 Move W10, [X25+28]
	467 Move X8, [X25+16]
	468 Move X9, [X28]
	469 Add W10, W10, 1
	470 Move [X25+28], W10
	471 Compare X8, 0
	472 JumpIfEqual {504}
	473 NotImplemented "Instruction LDRSW not yet implemented."
	474 Move W11, [X8+24]
	475 Move X1, X0
	476 NotImplemented "Instruction CMP not yet implemented."
	477 Add W9, W10, 1
	478 Add X8, X8, X10
	479 Move [X25+24], W9
	480 Move [X8+32], X1
	481 Move X8, [X9+32]
	482 Move X0, X25
	483 Move X8, [X8+192]
	484 Move X2, [X8+112]
	485 Call List`1<Object>.AddWithResize, X0, X1
	486 Move X0, X23
	487 Move X1, X31
	488 Call Transform.get_parent, X0
	489 Move X23, X0
	490 Move X20, [X31+96]
	491 Move X19, [X31+104]
	492 Move X22, [X31+80]
	493 Move X21, [X31+88]
	494 Move X24, [X31+64]
	495 Move X23, [X31+72]
	496 Move X26, [X31+48]
	497 Move X25, [X31+56]
	498 Move X28, [X31+32]
	499 Move X27, [X31+40]
	500 Move X29, [X31+16]
	501 Move X30, [X31+24]
	502 Add X31, X31, 112
	503 Return 
	504 Call 0x1C17F20

Method: System.Void ProcessPointerButton(ref UnityEngine.InputSystem.UI.PointerModel/ButtonState button, UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x037E7964 LDR W8, [X0 + 0xE0]
	0x037E7968 CBNZ W8, 0x37E7974
	0x037E796C BL 0x1C16DFC
	0x037E7970 LDR X0, [X21]
	0x037E7974 LDR X8, [X0 + 0xB8]
	0x037E7978 LDR X3, [X28]
	0x037E797C MOV X0, X25
	0x037E7980 MOV X1, X19
	0x037E7984 LDR X2, [X8 + 0x10]
	0x037E7988 BL 0x21DD088
	0x037E798C LDR X0, [X19 + 0xF0]
	0x037E7990 ADD W24, W24, 0x1
	0x037E7994 CBNZ X0, 0x37E791C
	0x037E7998 B 0x37E7DB8
	0x037E799C LDR W8, [X0 + 0x1C]
	0x037E79A0 CMP W2, 0x1
	0x037E79A4 ADD W8, W8, 0x1
	0x037E79A8 STP W31, W8, [X0 + 0x18]
	0x037E79AC B.LT 0x37E79C0
	0x037E79B0 LDR X0, [X0 + 0x10]
	0x037E79B4 MOV W1, W31
	0x037E79B8 MOV X3, X31
	0x037E79BC BL 0x339FA34
	0x037E79C0 LDR X0, [X27]
	0x037E79C4 LDR W8, [X0 + 0xE0]
	0x037E79C8 CBNZ W8, 0x37E79D0
	0x037E79CC BL 0x1C16DFC
	0x037E79D0 MOV X0, X23
	0x037E79D4 MOV X1, X31
	0x037E79D8 MOV X2, X31
	0x037E79DC BL 0x3C3883C
	0x037E79E0 TBZ X0, 0x0, 0x37E79EC
	0x037E79E4 STR X31, [X19 + 0x20]
	0x037E79E8 B 0x37E7D98
	0x037E79EC LDR X0, [X27]
	0x037E79F0 LDR X24, [X19 + 0x20]
	0x037E79F4 LDR W8, [X0 + 0xE0]
	0x037E79F8 CBNZ W8, 0x37E7A00
	0x037E79FC BL 0x1C16DFC
	0x037E7A00 MOV X0, X24
	0x037E7A04 MOV X1, X23
	0x037E7A08 MOV X2, X31
	0x037E7A0C BL 0x3C3883C
	0x037E7A10 TBZ X0, 0x0, 0x37E7A34
	0x037E7A14 LDR X0, [X27]
	0x037E7A18 LDR W8, [X0 + 0xE0]
	0x037E7A1C CBNZ W8, 0x37E7A24
	0x037E7A20 BL 0x1C16DFC
	0x037E7A24 MOV X0, X23
	0x037E7A28 MOV X1, X31
	0x037E7A2C BL 0x3C38948
	0x037E7A30 TBNZ X0, 0x0, 0x37E7D98
	0x037E7A34 LDR X0, [X19 + 0x20]
	0x037E7A38 MOV X1, X23
	0x037E7A3C MOV X2, X31
	0x037E7A40 BL 0x3E543B0
	0x037E7A44 CBZ X0, 0x37E7A58
	0x037E7A48 MOV X1, X31
	0x037E7A4C BL 0x3C356F8
	0x037E7A50 MOV X24, X0
	0x037E7A54 B 0x37E7A5C
	0x037E7A58 MOV X24, X31
	0x037E7A5C LDR X0, [X27]
	0x037E7A60 LDR X25, [X19 + 0x20]
	0x037E7A64 LDR W8, [X0 + 0xE0]
	0x037E7A68 CBNZ W8, 0x37E7A70
	0x037E7A6C BL 0x1C16DFC
	0x037E7A70 MOV X0, X25
	0x037E7A74 MOV X1, X31
	0x037E7A78 MOV X2, X31
	0x037E7A7C BL 0x3C354F8
	0x037E7A80 TBZ X0, 0x0, 0x37E7B90
	0x037E7A84 LDR X0, [X19 + 0x20]
	0x037E7A88 CBZ X0, 0x37E7DB8
	0x037E7A8C MOV X1, X31
	0x037E7A90 BL 0x3C356F8
	0x037E7A94 ADRP X20, 0x962000
	0x037E7A98 LDR X20, [X20 + 0x410]
	0x037E7A9C MOV X25, X0
	0x037E7AA0 ADRP X29, 0xBFA000
	0x037E7AA4 LDR X0, [X27]
	0x037E7AA8 LDR W8, [X0 + 0xE0]
	0x037E7AAC CBNZ W8, 0x37E7AB4
	0x037E7AB0 BL 0x1C16DFC
	0x037E7AB4 MOV X0, X25
	0x037E7AB8 MOV X1, X31
	0x037E7ABC MOV X2, X31
	0x037E7AC0 BL 0x3C354F8
	0x037E7AC4 TBZ X0, 0x0, 0x37E7B90
	0x037E7AC8 LDR X0, [X27]
	0x037E7ACC LDR W8, [X0 + 0xE0]
	0x037E7AD0 CBNZ W8, 0x37E7AD8
	0x037E7AD4 BL 0x1C16DFC
	0x037E7AD8 MOV X0, X25
	0x037E7ADC MOV X1, X24
	0x037E7AE0 MOV X2, X31
	0x037E7AE4 BL 0x3C354F8
	0x037E7AE8 TBZ X0, 0x0, 0x37E7B90
	0x037E7AEC CBZ X25, 0x37E7DB8
	0x037E7AF0 MOV X0, X25
	0x037E7AF4 MOV X1, X31
	0x037E7AF8 BL 0x3C32ECC
	0x037E7AFC LDR X8, [X21]
	0x037E7B00 MOV X26, X0
	0x037E7B04 LDR W9, [X8 + 0xE0]
	0x037E7B08 CBNZ W9, 0x37E7B14
	0x037E7B0C MOV X0, X8
	0x037E7B10 BL 0x1C16DFC
	0x037E7B14 LDRB W8, [X29 + 0x384]
	0x037E7B18 CBNZ W8, 0x37E7B2C
	0x037E7B1C MOV X0, X21
	0x037E7B20 BL 0x1C16CF4
	0x037E7B24 MOVZ W8, 0x1
	0x037E7B28 STRB W8, [X29 + 0x384]
	0x037E7B2C LDR X0, [X21]
	0x037E7B30 LDR W8, [X0 + 0xE0]
	0x037E7B34 CBNZ W8, 0x37E7B40
	0x037E7B38 BL 0x1C16DFC
	0x037E7B3C LDR X0, [X21]
	0x037E7B40 LDR X8, [X0 + 0xB8]
	0x037E7B44 LDR X3, [X28]
	0x037E7B48 MOV X0, X26
	0x037E7B4C MOV X1, X19
	0x037E7B50 LDR X2, [X8 + 0x10]
	0x037E7B54 BL 0x21DD088
	0x037E7B58 LDR X26, [X19 + 0xF0]
	0x037E7B5C MOV X0, X25
	0x037E7B60 MOV X1, X31
	0x037E7B64 BL 0x3C32ECC
	0x037E7B68 CBZ X26, 0x37E7DB8
	0x037E7B6C LDR X2, [X20]
	0x037E7B70 MOV X1, X0
	0x037E7B74 MOV X0, X26
	0x037E7B78 BL 0x301D7A8
	0x037E7B7C MOV X0, X25
	0x037E7B80 MOV X1, X31
	0x037E7B84 BL 0x3C3F49C
	0x037E7B88 MOV X25, X0
	0x037E7B8C B 0x37E7AA4
	0x037E7B90 STR X23, [X19 + 0x20]
	0x037E7B94 LDR X0, [X27]
	0x037E7B98 LDR W8, [X0 + 0xE0]
	0x037E7B9C CBNZ W8, 0x37E7BA4
	0x037E7BA0 BL 0x1C16DFC
	0x037E7BA4 MOV X0, X23
	0x037E7BA8 MOV X1, X31
	0x037E7BAC MOV X2, X31
	0x037E7BB0 BL 0x3C354F8
	0x037E7BB4 TBZ X0, 0x0, 0x37E7D98
	0x037E7BB8 CBZ X23, 0x37E7DB8
	0x037E7BBC MOV X0, X23
	0x037E7BC0 MOV X1, X31
	0x037E7BC4 BL 0x3C356F8
	0x037E7BC8 ADRP X29, 0x962000
	0x037E7BCC ADRP X28, 0x912000
	0x037E7BD0 LDR X29, [X29 + 0x3F0]
	0x037E7BD4 LDR X28, [X28 + 0x570]
	0x037E7BD8 MOV X23, X0
	0x037E7BDC ADRP X26, 0xBFA000
	0x037E7BE0 MOVZ W20, 0x1
	0x037E7BE4 LDR X0, [X27]
	0x037E7BE8 LDR W8, [X0 + 0xE0]
	0x037E7BEC CBNZ W8, 0x37E7BF4
	0x037E7BF0 BL 0x1C16DFC
	0x037E7BF4 MOV X0, X23
	0x037E7BF8 MOV X1, X31
	0x037E7BFC MOV X2, X31
	0x037E7C00 BL 0x3C354F8
	0x037E7C04 TBZ X0, 0x0, 0x37E7D98
	0x037E7C08 LDR X0, [X27]
	0x037E7C0C LDR W8, [X0 + 0xE0]
	0x037E7C10 CBNZ W8, 0x37E7C18
	0x037E7C14 BL 0x1C16DFC
	0x037E7C18 MOV X0, X23
	0x037E7C1C MOV X1, X24
	0x037E7C20 MOV X2, X31
	0x037E7C24 BL 0x3C354F8
	0x037E7C28 TBZ X0, 0x0, 0x37E7D98
	0x037E7C2C LDR X0, [X31 + 0x8]
	0x037E7C30 MOV X1, X23
	0x037E7C34 BL 0x37E7634
	0x037E7C38 TBNZ X0, 0x0, 0x37E7D98
	0x037E7C3C CBZ X23, 0x37E7DB8
	0x037E7C40 MOV X0, X23
	0x037E7C44 MOV X1, X31
	0x037E7C48 BL 0x3C32ECC
	0x037E7C4C LDR X8, [X21]
	0x037E7C50 MOV X25, X0
	0x037E7C54 LDR W9, [X8 + 0xE0]
	0x037E7C58 CBNZ W9, 0x37E7C64
	0x037E7C5C MOV X0, X8
	0x037E7C60 BL 0x1C16DFC
	0x037E7C64 LDRB W8, [X26 + 0x385]
	0x037E7C68 CBNZ W8, 0x37E7C78
	0x037E7C6C MOV X0, X21
	0x037E7C70 BL 0x1C16CF4
	0x037E7C74 STRB W20, [X26 + 0x385]
	0x037E7C78 LDR X0, [X21]
	0x037E7C7C LDR W8, [X0 + 0xE0]
	0x037E7C80 CBNZ W8, 0x37E7C8C
	0x037E7C84 BL 0x1C16DFC
	0x037E7C88 LDR X0, [X21]
	0x037E7C8C LDR X8, [X0 + 0xB8]
	0x037E7C90 LDR X3, [X29]
	0x037E7C94 MOV X0, X25
	0x037E7C98 MOV X1, X19
	0x037E7C9C LDR X2, [X8 + 0x8]
	0x037E7CA0 BL 0x21DD088
	0x037E7CA4 TBZ X22, 0x0, 0x37E7D1C
	0x037E7CA8 MOV X0, X23
	0x037E7CAC MOV X1, X31
	0x037E7CB0 BL 0x3C32ECC
	0x037E7CB4 LDR X8, [X21]
	0x037E7CB8 MOV X25, X0
	0x037E7CBC LDR W9, [X8 + 0xE0]
	0x037E7CC0 CBNZ W9, 0x37E7CCC
	0x037E7CC4 MOV X0, X8
	0x037E7CC8 BL 0x1C16DFC
	0x037E7CCC ADRP X8, 0xBFA000
	0x037E7CD0 LDRB W8, [X8 + 0x383]
	0x037E7CD4 CBNZ W8, 0x37E7CE8
	0x037E7CD8 MOV X0, X21
	0x037E7CDC BL 0x1C16CF4
	0x037E7CE0 ADRP X8, 0xBFA000
	0x037E7CE4 STRB W20, [X8 + 0x383]
	0x037E7CE8 LDR X0, [X21]
	0x037E7CEC LDR W8, [X0 + 0xE0]
	0x037E7CF0 CBNZ W8, 0x37E7CFC
	0x037E7CF4 BL 0x1C16DFC
	0x037E7CF8 LDR X0, [X21]
	0x037E7CFC LDR X8, [X0 + 0xB8]
	0x037E7D00 MOV X0, X25
	0x037E7D04 MOV X1, X19
	0x037E7D08 LDR X2, [X8]
	0x037E7D0C ADRP X8, 0x962000
	0x037E7D10 LDR X8, [X8 + 0x400]
	0x037E7D14 LDR X3, [X8]
	0x037E7D18 BL 0x21DD088
	0x037E7D1C LDR X25, [X19 + 0xF0]
	0x037E7D20 MOV X0, X23
	0x037E7D24 MOV X1, X31
	0x037E7D28 BL 0x3C32ECC
	0x037E7D2C CBZ X25, 0x37E7DB8
	0x037E7D30 LDR W10, [X25 + 0x1C]
	0x037E7D34 LDR X8, [X25 + 0x10]
	0x037E7D38 LDR X9, [X28]
	0x037E7D3C ADD W10, W10, 0x1
	0x037E7D40 STR W10, [X25 + 0x1C]
	0x037E7D44 CBZ X8, 0x37E7DB8
	0x037E7D48 LDRSW X10, [X25 + 0x18]
	0x037E7D4C LDR W11, [X8 + 0x18]
	0x037E7D50 MOV X1, X0
	0x037E7D54 CMP W10, W11
	0x037E7D58 B.CS 0x37E7D70
	0x037E7D5C ADD W9, W10, 0x1
	0x037E7D60 ADD X8, X8, X10, 0x3, LSL
	0x037E7D64 STR W9, [X25 + 0x18]
	0x037E7D68 STR X1, [X8 + 0x20]
	0x037E7D6C B 0x37E7D84
	0x037E7D70 LDR X8, [X9 + 0x20]
	0x037E7D74 MOV X0, X25
	0x037E7D78 LDR X8, [X8 + 0xC0]
	0x037E7D7C LDR X2, [X8 + 0x70]
	0x037E7D80 BL 0x301BF90
	0x037E7D84 MOV X0, X23
	0x037E7D88 MOV X1, X31
	0x037E7D8C BL 0x3C3F49C
	0x037E7D90 MOV X23, X0
	0x037E7D94 B 0x37E7BE4
	0x037E7D98 LDP X20, X19, [X31 + 0x60]
	0x037E7D9C LDP X22, X21, [X31 + 0x50]
	0x037E7DA0 LDP X24, X23, [X31 + 0x40]
	0x037E7DA4 LDP X26, X25, [X31 + 0x30]
	0x037E7DA8 LDP X28, X27, [X31 + 0x20]
	0x037E7DAC LDP X29, X30, [X31 + 0x10]
	0x037E7DB0 ADD X31, X31, 0x70
	0x037E7DB4 RET
	0x037E7DB8 BL 0x1C16F20
	0x037E7DBC LDR W8, [X0 + 0x4]
	0x037E7DC0 ANDS W31, W8, 0xFFFFFFFD
	0x037E7DC4 CSET W0, EQ
	0x037E7DC8 RET
	0x037E7DCC STR X30, [X31 - 0x20]!
	0x037E7DD0 STP X20, X19, [X31 + 0x10]
	0x037E7DD4 CBZ X1, 0x37E7E3C
	0x037E7DD8 MOV X20, X1
	0x037E7DDC MOV X19, X0
	0x037E7DE0 ADD X1, X1, 0xA0
	0x037E7DE4 ADD X0, X0, 0x10
	0x037E7DE8 MOVZ W2, 0x50
	0x037E7DEC BL 0x3EB1B30
	0x037E7DF0 LDR X8, [X20 + 0x28]
	0x037E7DF4 STR X8, [X19 + 0x60]
	0x037E7DF8 LDR V0, [X20 + 0x3]
	0x037E7DFC ADD X8, X20, 0x114
	0x037E7E00 UNIMPLEMENTED
	0x037E7E04 STUR V0, [X19 + 0x68]
	0x037E7E08 LDR V0, [X8]
	0x037E7E0C STR D0, [X19 + 0x80]
	0x037E7E10 LDR V0, [X20 + 0x134]
	0x037E7E14 STR S0, [X19 + 0x88]
	0x037E7E18 LDR W8, [X20 + 0x138]
	0x037E7E1C STR W8, [X19 + 0x8C]
	0x037E7E20 LDR X8, [X20 + 0x40]
	0x037E7E24 STR X8, [X19 + 0x78]
	0x037E7E28 LDRB W8, [X20 + 0x145]
	0x037E7E2C STRB W8, [X19 + 0x90]
	0x037E7E30 LDP X20, X19, [X31 + 0x10]
	0x037E7E34 LDR X30, [X31], #0x20
	0x037E7E38 RET
	0x037E7E3C BL 0x1C16F20
	0x037E7E40 STR D10, [X31 - 0x60]!
	0x037E7E44 STP D9, D8, [X31 + 0x10]
	0x037E7E48 STP X30, X25, [X31 + 0x20]
	0x037E7E4C STP X24, X23, [X31 + 0x30]
	0x037E7E50 STP X22, X21, [X31 + 0x40]
	0x037E7E54 STP X20, X19, [X31 + 0x50]
	0x037E7E58 ADRP X21, 0xBFA000
	0x037E7E5C LDRB W8, [X21 + 0x324]
	0x037E7E60 MOV X20, X1
	0x037E7E64 MOV X19, X0
	0x037E7E68 TBNZ X8, 0x0, 0x37E7EE0
	0x037E7E6C ADRP X0, 0x962000
	0x037E7E70 LDR X0, [X0 + 0x418]
	0x037E7E74 BL 0x1C16CF4
	0x037E7E78 ADRP X0, 0x962000
	0x037E7E7C LDR X0, [X0 + 0x420]
	0x037E7E80 BL 0x1C16CF4
	0x037E7E84 ADRP X0, 0x962000
	0x037E7E88 LDR X0, [X0 + 0x428]
	0x037E7E8C BL 0x1C16CF4
	0x037E7E90 ADRP X0, 0x962000
	0x037E7E94 LDR X0, [X0 + 0x430]
	0x037E7E98 BL 0x1C16CF4
	0x037E7E9C ADRP X0, 0x934000
	0x037E7EA0 LDR X0, [X0 + 0x9F8]
	0x037E7EA4 BL 0x1C16CF4
	0x037E7EA8 ADRP X0, 0x962000
	0x037E7EAC LDR X0, [X0 + 0x438]
	0x037E7EB0 BL 0x1C16CF4
	0x037E7EB4 ADRP X0, 0x934000
	0x037E7EB8 LDR X0, [X0 + 0xED0]
	0x037E7EBC BL 0x1C16CF4
	0x037E7EC0 ADRP X0, 0x934000
	0x037E7EC4 LDR X0, [X0 + 0xEC8]
	0x037E7EC8 BL 0x1C16CF4
	0x037E7ECC ADRP X0, 0x90C000
	0x037E7ED0 LDR X0, [X0 + 0x598]
	0x037E7ED4 BL 0x1C16CF4
	0x037E7ED8 MOVZ W8, 0x1
	0x037E7EDC STRB W8, [X21 + 0x324]
	0x037E7EE0 LDR X8, [X19 + 0x38]
	0x037E7EE4 CBZ X8, 0x37E8474
	0x037E7EE8 ADRP X23, 0x90C000
	0x037E7EEC LDR X23, [X23 + 0x598]
	0x037E7EF0 LDR X21, [X8 + 0x40]
	0x037E7EF4 LDR X0, [X23]
	0x037E7EF8 LDR W9, [X0 + 0xE0]
	0x037E7EFC CBNZ W9, 0x37E7F04
	0x037E7F00 BL 0x1C16DFC
	0x037E7F04 MOV X0, X21
	0x037E7F08 MOV X1, X31
	0x037E7F0C MOV X2, X31
	0x037E7F10 BL 0x3C354F8
	0x037E7F14 TBZ X0, 0x0, 0x37E7FC0
	0x037E7F18 LDR X8, [X19]
	0x037E7F1C MOV X0, X19
	0x037E7F20 LDR X9, [X8 + 0x268]
	0x037E7F24 LDR X1, [X8 + 0x270]
	0x037E7F28 BLR X9
	0x037E7F2C LDR X8, [X19 + 0x38]
	0x037E7F30 CBZ X8, 0x37E8474
	0x037E7F34 ADRP X24, 0x934000
	0x037E7F38 LDR X24, [X24 + 0x9F8]
	0x037E7F3C MOV X21, X0
	0x037E7F40 LDR X22, [X8 + 0x40]
	0x037E7F44 LDR X0, [X24]
	0x037E7F48 LDR W9, [X0 + 0xE0]
	0x037E7F4C CBNZ W9, 0x37E7F54
	0x037E7F50 BL 0x1C16DFC
	0x037E7F54 ADRP X25, 0xBFA000
	0x037E7F58 LDRB W8, [X25 + 0x38F]
	0x037E7F5C CBNZ W8, 0x37E7F74
	0x037E7F60 ADRP X0, 0x934000
	0x037E7F64 LDR X0, [X0 + 0x9F8]
	0x037E7F68 BL 0x1C16CF4
	0x037E7F6C MOVZ W8, 0x1
	0x037E7F70 STRB W8, [X25 + 0x38F]
	0x037E7F74 LDR X0, [X24]
	0x037E7F78 LDR W8, [X0 + 0xE0]
	0x037E7F7C CBNZ W8, 0x37E7F88
	0x037E7F80 BL 0x1C16DFC
	0x037E7F84 LDR X0, [X24]
	0x037E7F88 ADRP X9, 0x962000
	0x037E7F8C LDR X8, [X0 + 0xB8]
	0x037E7F90 LDR X9, [X9 + 0x430]
	0x037E7F94 MOV X0, X22
	0x037E7F98 MOV X1, X21
	0x037E7F9C LDR X2, [X8 + 0x60]
	0x037E7FA0 LDR X3, [X9]
	0x037E7FA4 BL 0x21DD088
	0x037E7FA8 CBZ X21, 0x37E8474
	0x037E7FAC LDR X8, [X21]
	0x037E7FB0 MOV X0, X21
	0x037E7FB4 LDP X9, X1, [X8 + 0x198]
	0x037E7FB8 BLR X9
	0x037E7FBC B 0x37E7FC4
	0x037E7FC0 MOV W0, W31
	0x037E7FC4 LDR X8, [X19 + 0x38]
	0x037E7FC8 CBZ X8, 0x37E8474
	0x037E7FCC LDRB W8, [X8 + 0x38]
	0x037E7FD0 CBZ W8, 0x37E8448
	0x037E7FD4 TBZ X0, 0x0, 0x37E7FE0
	0x037E7FD8 STR W31, [X19 + 0x390]
	0x037E7FDC B 0x37E8448
	0x037E7FE0 ADRP X21, 0xBF2000
	0x037E7FE4 LDRB W8, [X21 + 0x5AA]
	0x037E7FE8 LDP S9, S8, [X20]
	0x037E7FEC CBNZ W8, 0x37E8004
	0x037E7FF0 ADRP X0, 0x913000
	0x037E7FF4 LDR X0, [X0 + 0x4B8]
	0x037E7FF8 BL 0x1C16CF4
	0x037E7FFC MOVZ W8, 0x1
	0x037E8000 STRB W8, [X21 + 0x5AA]
	0x037E8004 ADRP X8, 0x912000
	0x037E8008 LDR X8, [X8 + 0x4B8]
	0x037E800C ADRP X9, 0xFFFFFFFFFD302000
	0x037E8010 LDR V1, [X9 + 0x240]
	0x037E8014 FABS S2, S9
	0x037E8018 LDR X8, [X8]
	0x037E801C FMOV S0, W31
	0x037E8020 FMOV S4, 8
	0x037E8024 FMAXNM S2, S2, S0
	0x037E8028 LDR X8, [X8 + 0xB8]
	0x037E802C FMUL S5, S2, S1
	0x037E8030 LDR V3, [X8]
	0x037E8034 FMUL S2, S3, S4
	0x037E8038 FCMP S5, S2
	0x037E803C FCSEL S3, S5, S2, GT
	0x037E8040 FABD S4, S0, S0
	0x037E8044 FCMP S4, S3
	0x037E8048 B.PL 0x37E806C
	0x037E804C FABS S3, S8
	0x037E8050 FMAXNM S3, S3, S0
	0x037E8054 FMUL S1, S3, S1
	0x037E8058 FCMP S1, S2
	0x037E805C FCSEL S1, S1, S2, GT
	0x037E8060 FABD S0, S0, S0
	0x037E8064 FCMP S0, S1
	0x037E8068 B.MI 0x37E8144
	0x037E806C ADRP X8, 0x933000
	0x037E8070 LDR X8, [X8 + 0xEC8]
	0x037E8074 LDR X8, [X8]
	0x037E8078 LDR X8, [X8 + 0xB8]
	0x037E807C LDR X21, [X8]
	0x037E8080 CBZ X21, 0x37E8474
	0x037E8084 ADRP X10, 0x933000
	0x037E8088 LDR X8, [X21]
	0x037E808C LDR X10, [X10 + 0xED0]
	0x037E8090 LDRH W9, [X8 + 0x12E]
	0x037E8094 LDR X1, [X10]
	0x037E8098 CBZ X9, 0x37E80BC
	0x037E809C LDR X10, [X8 + 0xB0]
	0x037E80A0 ADD X10, X10, 0x8
	0x037E80A4 LDUR X11, [X10 - 0x8]
	0x037E80A8 CMP X11, X1
	0x037E80AC B.EQ 0x37E80CC
	0x037E80B0 SUBS X9, X9, 0x1
	0x037E80B4 ADD X10, X10, 0x10
	0x037E80B8 B.NE 0x37E80A4
	0x037E80BC MOVZ W2, 0x15
	0x037E80C0 MOV X0, X21
	0x037E80C4 BL 0x1C5C788
	0x037E80C8 B 0x37E80DC
	0x037E80CC LDR W9, [X10]
	0x037E80D0 ADD W9, W9, 0x15
	0x037E80D4 ADD X8, X8, W9, 0x4, SXTW
	0x037E80D8 ADD X0, X8, 0x138
	0x037E80DC LDP X8, X1, [X0]
	0x037E80E0 MOV X0, X21
	0x037E80E4 BLR X8
	0x037E80E8 LDP S9, S10, [X20]
	0x037E80EC MOV V8.16B, V0.16B
	0x037E80F0 FMUL S1, S9, S9
	0x037E80F4 FMUL S2, S10, S10
	0x037E80F8 FADD S1, S1, S2
	0x037E80FC FCMP S1, 0x0
	0x037E8100 B.LE 0x37E8128
	0x037E8104 FABS S0, S9
	0x037E8108 FABS S1, S10
	0x037E810C MOV W8, W31
	0x037E8110 FCMP S0, S1
	0x037E8114 B.LE 0x37E81AC
	0x037E8118 FCMP S9, 0x0
	0x037E811C B.LE 0x37E8464
	0x037E8120 MOVZ W22, 0x2
	0x037E8124 B 0x37E8130
	0x037E8128 MOVZ W22, 0x4
	0x037E812C MOVZ W8, 0x1
	0x037E8130 LDR W9, [X19 + 0x394]
	0x037E8134 CMP W22, W9
	0x037E8138 B.EQ 0x37E8140
	0x037E813C STR W31, [X19 + 0x390]
	0x037E8140 TBZ X8, 0x0, 0x37E8190
	0x037E8144 STR W31, [X19 + 0x390]
	0x037E8148 LDR X8, [X19 + 0x38]
	0x037E814C CBZ X8, 0x37E8474
	0x037E8150 LDR X0, [X23]
	0x037E8154 LDR X20, [X8 + 0x40]
	0x037E8158 LDR W9, [X0 + 0xE0]
	0x037E815C CBNZ W9, 0x37E8164
	0x037E8160 BL 0x1C16DFC
	0x037E8164 MOV X0, X20
	0x037E8168 MOV X1, X31
	0x037E816C MOV X2, X31
	0x037E8170 BL 0x3C354F8
	0x037E8174 TBZ X0, 0x0, 0x37E8448
	0x037E8178 LDR X0, [X19 + 0x88]
	0x037E817C CBZ X0, 0x37E81BC
	0x037E8180 MOV X1, X31
	0x037E8184 BL 0x37451B4
	0x037E8188 MOV X21, X0
	0x037E818C B 0x37E81C0
	0x037E8190 LDR W8, [X19 + 0x390]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xBFB000
	011 Move W8, [X21+801]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {60}
	019 Move X0, 0x963000
	020 Move X0, [X0+896]
	021 Call 0x1C17CF4
	022 Move X0, 0x963000
	023 Move X0, [X0+904]
	024 Call 0x1C17CF4
	025 Move X0, 0x963000
	026 Move X0, [X0+912]
	027 Call 0x1C17CF4
	028 Move X0, 0x963000
	029 Move X0, [X0+920]
	030 Call 0x1C17CF4
	031 Move X0, 0x963000
	032 Move X0, [X0+928]
	033 Call 0x1C17CF4
	034 Move X0, 0x963000
	035 Move X0, [X0+936]
	036 Call 0x1C17CF4
	037 Move X0, 0x963000
	038 Move X0, [X0+944]
	039 Call 0x1C17CF4
	040 Move X0, 0x963000
	041 Move X0, [X0+952]
	042 Call 0x1C17CF4
	043 Move X0, 0x963000
	044 Move X0, [X0+960]
	045 Call 0x1C17CF4
	046 Move X0, 0x935000
	047 Move X0, [X0+2552]
	048 Call 0x1C17CF4
	049 Move X0, 0x935000
	050 Move X0, [X0+3792]
	051 Call 0x1C17CF4
	052 Move X0, 0x935000
	053 Move X0, [X0+3784]
	054 Call 0x1C17CF4
	055 Move X0, 0x90D000
	056 Move X0, [X0+1432]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X21+801], W8
	060 Compare X19, 0
	061 JumpIfEqual {606}
	062 Move X25, 0x90D000
	063 Move X25, [X25+1432]
	064 Move X21, [X19+80]
	065 Move X0, [X25]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X21
	071 Move X1, X31
	072 Move X2, X31
	073 Call Object.op_Inequality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {100}
	078 Compare X21, 0
	079 JumpIfEqual {606}
	080 Move X0, X21
	081 Move X1, X31
	082 Call GameObject.get_transform, X0
	083 Move X1, X0
	084 Move X0, X22
	085 Call InputSystemUIInputModule.PointerShouldIgnoreTransform, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {100}
	090 Move X20, [X31+64]
	091 Move X19, [X31+72]
	092 Move X22, [X31+48]
	093 Move X21, [X31+56]
	094 Move X24, [X31+32]
	095 Move X23, [X31+40]
	096 Move X26, [X31+16]
	097 Move X25, [X31+24]
	098 Move X30, [X31+80]
	099 Return 
	100 Move W8, [X20+4]
	101 And W31, W8, 0xFFFFFFFD
	102 Move X8, 0x935000
	103 Move X8, [X8+3784]
	104 Move X8, [X8]
	105 Move X8, [X8+184]
	106 Move X23, [X8]
	107 Compare X23, 0
	108 JumpIfEqual {606}
	109 Move X10, 0x935000
	110 Move X8, [X23]
	111 Move X10, [X10+3792]
	112 NotImplemented "Instruction LDRH not yet implemented."
	113 Move X1, [X10]
	114 Compare X9, 0
	115 JumpIfEqual {122}
	116 Move X10, [X8+176]
	117 Add X10, X10, 8
	118 NotImplemented "Instruction LDUR not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Subtract X9, X9, 1
	121 Add X10, X10, 16
	122 Move W2, 21
	123 Move X0, X23
	124 Call 0x1C5D788
	125 Move W9, [X10]
	126 Add W9, W9, 21
	127 Add X8, X8, W9
	128 Add X0, X8, 312
	129 Move X8, [X0]
	130 Move X1, [X0+8]
	131 Move X0, X23
	132 Add X24, X19, 260
	133 NotImplemented "Instruction BLR not yet implemented."
	134 Move [X20+8], S0
	135 Move X23, 0xBF3000
	136 Move W8, [X23+1935]
	137 Compare W8, 0
	138 JumpIfNotEqual {144}
	139 Move X0, 0x915000
	140 Move X0, [X0+3848]
	141 Call 0x1C17CF4
	142 Move W8, 1
	143 Move [X23+1935], W8
	144 Move X8, 0x915000
	145 Move X8, [X8+3848]
	146 Add X1, X19, 80
	147 Add X0, X19, 160
	148 Move W2, 80
	149 Move X8, [X8]
	150 Move X8, [X8+184]
	151 Move V1, [X8]
	152 Move [X19+325], W31
	153 Move V0, [X24]
	154 Move [X24+8], D1
	155 Move [X24+16], D0
	156 Call 0x3EB2AC0
	157 Move W8, 1
	158 Move [X19+248], W8
	159 Move [X19+324], W8
	160 Move X26, 0x935000
	161 Move X26, [X26+2552]
	162 Move X0, [X26]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move X8, 0x963000
	168 Move X8, [X8+960]
	169 Move X0, X21
	170 Move X1, [X8]
	171 Call 0x21DEB64, X0
	172 Move X8, [X22+56]
	173 Compare X8, 0
	174 JumpIfEqual {606}
	175 Move X23, X0
	176 Move X0, [X25]
	177 Move X24, [X8+64]
	178 Move W9, [X0+224]
	179 Compare W9, 0
	180 JumpIfNotEqual {182}
	181 Call 0x1C17DFC
	182 Move X0, X23
	183 Move X1, X24
	184 Move X2, X31
	185 Call Object.op_Inequality, X0, X1
	186 Move TEMP, X0
	187 And TEMP, TEMP, 1
	188 Compare TEMP, 1
	189 JumpIfNotEqual {213}
	190 Move X0, [X25]
	191 Move W8, [X0+224]
	192 Compare W8, 0
	193 JumpIfNotEqual {195}
	194 Call 0x1C17DFC
	195 Move X0, X23
	196 Move X1, X31
	197 Move X2, X31
	198 Call Object.op_Inequality, X0, X1
	199 Move TEMP, X0
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfEqual {206}
	203 Move W8, [X22+200]
	204 Compare W8, 0
	205 JumpIfEqual {213}
	206 Move X0, [X22+56]
	207 Compare X0, 0
	208 JumpIfEqual {606}
	209 Move X1, X31
	210 Move X2, X19
	211 Move X3, X31
	212 Call EventSystem.SetSelectedGameObject, X0, X1, X2
	213 Move X0, [X26]
	214 Move W8, [X0+224]
	215 Compare W8, 0
	216 JumpIfNotEqual {218}
	217 Call 0x1C17DFC
	218 Move X22, 0xBFB000
	219 Move W8, [X22+902]
	220 Compare W8, 0
	221 JumpIfNotEqual {227}
	222 Move X0, 0x935000
	223 Move X0, [X0+2552]
	224 Call 0x1C17CF4
	225 Move W8, 1
	226 Move [X22+902], W8
	227 Move X0, [X26]
	228 Move W8, [X0+224]
	229 Compare W8, 0
	230 JumpIfNotEqual {233}
	231 Call 0x1C17DFC
	232 Move X0, [X26]
	233 Move X9, 0x963000
	234 Move X8, [X0+184]
	235 Move X9, [X9+904]
	236 Move X0, X21
	237 Move X1, X19
	238 Move X2, [X8+24]
	239 Move X3, [X9]
	240 Call 0x21DE8A8, X0, X1, X2
	241 Move X8, [X25]
	242 Move X22, X0
	243 Move W9, [X8+224]
	244 Compare W9, 0
	245 JumpIfNotEqual {248}
	246 Move X0, X8
	247 Call 0x1C17DFC
	248 Move X0, X22
	249 Move X1, X31
	250 Move X2, X31
	251 Call Object.op_Equality, X0, X1
	252 Move TEMP, X0
	253 And TEMP, TEMP, 1
	254 Compare TEMP, 1
	255 JumpIfNotEqual {267}
	256 Move X0, [X26]
	257 Move W8, [X0+224]
	258 Compare W8, 0
	259 JumpIfNotEqual {261}
	260 Call 0x1C17DFC
	261 Move X8, 0x963000
	262 Move X8, [X8+952]
	263 Move X0, X21
	264 Move X1, [X8]
	265 Call 0x21DEB64, X0
	266 Move X22, X0
	267 Move X0, [X25]
	268 Move X23, [X19+48]
	269 Move W8, [X0+224]
	270 Compare W8, 0
	271 JumpIfNotEqual {273}
	272 Call 0x1C17DFC
	273 Move X0, X22
	274 Move X1, X23
	275 Move X2, X31
	276 Call Object.op_Equality, X0, X1
	277 Move TEMP, X0
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfNotEqual {292}
	281 Move V1, [X20+8]
	282 Move V2, [X19+308]
	283 Move X8, -47169536
	284 Move V0, [X8+1100]
	285 Subtract S1, S1, S2
	286 NotImplemented "Instruction FCMP not yet implemented."
	287 NotImplemented "Instruction CSET not yet implemented."
	288 Move [X20+145], W8
	289 Move W8, [X19+312]
	290 NotImplemented "Instruction CMP not yet implemented."
	291 NotImplemented "Instruction FCMP not yet implemented."
	292 Move [X20+145], W31
	293 Move W8, [X19+312]
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Add X8, X19, 308
	296 Move [X8], X31
	297 Move X0, X19
	298 Move X1, X22
	299 Move X2, X31
	300 Call PointerEventData.set_pointerPress, X0, X1
	301 Move [X19+56], X21
	302 Move X0, [X26]
	303 Move W8, [X0+224]
	304 Compare W8, 0
	305 JumpIfNotEqual {307}
	306 Call 0x1C17DFC
	307 Move X8, 0x963000
	308 Move X8, [X8+944]
	309 Move X0, X21
	310 Move X1, [X8]
	311 Call 0x21DEB64, X0
	312 Move [X19+64], X0
	313 Move X22, X0
	314 Move X0, [X25]
	315 Move W8, [X0+224]
	316 Compare W8, 0
	317 JumpIfNotEqual {319}
	318 Call 0x1C17DFC
	319 Move X0, X22
	320 Move X1, X31
	321 Move X2, X31
	322 Call Object.op_Inequality, X0, X1
	323 Move TEMP, X0
	324 And TEMP, TEMP, 1
	325 Compare TEMP, 1
	326 JumpIfNotEqual {356}
	327 Move X0, [X26]
	328 Move X22, [X19+64]
	329 Move W8, [X0+224]
	330 Compare W8, 0
	331 JumpIfNotEqual {333}
	332 Call 0x1C17DFC
	333 Move X23, 0xBFB000
	334 Move W8, [X23+903]
	335 Compare W8, 0
	336 JumpIfNotEqual {342}
	337 Move X0, 0x935000
	338 Move X0, [X0+2552]
	339 Call 0x1C17CF4
	340 Move W8, 1
	341 Move [X23+903], W8
	342 Move X0, [X26]
	343 Move W8, [X0+224]
	344 Compare W8, 0
	345 JumpIfNotEqual {348}
	346 Call 0x1C17DFC
	347 Move X0, [X26]
	348 Move X9, 0x963000
	349 Move X8, [X0+184]
	350 Move X9, [X9+920]
	351 Move X0, X22
	352 Move X1, X19
	353 Move X2, [X8+48]
	354 Move X3, [X9]
	355 Call 0x21DE088, X0, X1, X2
	356 Move W8, [X20+4]
	357 Subtract W8, W8, 1
	358 NotImplemented "Instruction CMP not yet implemented."
	359 Move X24, 0x935000
	360 Move X24, [X24+2552]
	361 Move X0, [X24]
	362 Move W8, [X0+224]
	363 Compare W8, 0
	364 JumpIfNotEqual {366}
	365 Call 0x1C17DFC
	366 Move X8, 0x963000
	367 Move X8, [X8+952]
	368 Move X0, X21
	369 Move X1, [X8]
	370 Call 0x21DEB64, X0
	371 Move X8, [X25]
	372 Move X23, [X19+40]
	373 Move X22, X0
	374 Move W9, [X8+224]
	375 Compare W9, 0
	376 JumpIfNotEqual {379}
	377 Move X0, X8
	378 Call 0x1C17DFC
	379 Move X0, X23
	380 Move X1, X22
	381 Move X2, X31
	382 Call Object.op_Equality, X0, X1
	383 Move TEMP, X0
	384 And TEMP, TEMP, 1
	385 Compare TEMP, 1
	386 JumpIfNotEqual {395}
	387 Move W8, [X19+248]
	388 Compare W8, 0
	389 JumpIfEqual {395}
	390 Move W8, [X20+145]
	391 Compare W8, 0
	392 JumpIfEqual {396}
	393 Move W8, [X19+312]
	394 Add W8, W8, 1
	395 Move W23, 1
	396 Move W8, 1
	397 Move [X19+312], W8
	398 Move X8, 0x935000
	399 Move X8, [X8+3784]
	400 Move X8, [X8]
	401 Move X8, [X8+184]
	402 Move X22, [X8]
	403 Compare X22, 0
	404 JumpIfEqual {606}
	405 Move X10, 0x935000
	406 Move X8, [X22]
	407 Move X10, [X10+3792]
	408 NotImplemented "Instruction LDRH not yet implemented."
	409 Move X1, [X10]
	410 Compare X9, 0
	411 JumpIfEqual {418}
	412 Move X10, [X8+176]
	413 Add X10, X10, 8
	414 NotImplemented "Instruction LDUR not yet implemented."
	415 NotImplemented "Instruction CMP not yet implemented."
	416 Subtract X9, X9, 1
	417 Add X10, X10, 16
	418 Move W2, 21
	419 Move X0, X22
	420 Call 0x1C5D788
	421 Move W9, [X10]
	422 Add W9, W9, 21
	423 Add X8, X8, W9
	424 Add X0, X8, 312
	425 Move X8, [X0]
	426 Move X1, [X0+8]
	427 Move X0, X22
	428 NotImplemented "Instruction BLR not yet implemented."
	429 Move W23, W31
	430 Move [X19+308], S0
	431 Move X0, [X24]
	432 Move X22, [X19+40]
	433 Move W8, [X0+224]
	434 Compare W8, 0
	435 JumpIfNotEqual {437}
	436 Call 0x1C17DFC
	437 Move X26, 0xBFB000
	438 Move W8, [X26+904]
	439 Compare W8, 0
	440 JumpIfNotEqual {446}
	441 Move X0, 0x935000
	442 Move X0, [X0+2552]
	443 Call 0x1C17CF4
	444 Move W8, 1
	445 Move [X26+904], W8
	446 Move X0, [X24]
	447 Move W8, [X0+224]
	448 Compare W8, 0
	449 JumpIfNotEqual {452}
	450 Call 0x1C17DFC
	451 Move X0, [X24]
	452 Move X9, 0x963000
	453 Move X8, [X0+184]
	454 Move X9, [X9+936]
	455 Move X0, X22
	456 Move X1, X19
	457 Move X2, [X8+32]
	458 Move X3, [X9]
	459 Call 0x21DE088, X0, X1, X2
	460 Move TEMP, X23
	461 And TEMP, TEMP, 1
	462 Compare TEMP, 1
	463 JumpIfNotEqual {509}
	464 Move W8, [X19+325]
	465 Compare W8, 0
	466 JumpIfEqual {538}
	467 Move X0, [X25]
	468 Move X22, [X19+64]
	469 Move W8, [X0+224]
	470 Compare W8, 0
	471 JumpIfNotEqual {473}
	472 Call 0x1C17DFC
	473 Move X0, X22
	474 Move X1, X31
	475 Move X2, X31
	476 Call Object.op_Inequality, X0, X1
	477 Move TEMP, X0
	478 And TEMP, TEMP, 1
	479 Compare TEMP, 1
	480 JumpIfNotEqual {538}
	481 Move X0, [X24]
	482 Move W8, [X0+224]
	483 Compare W8, 0
	484 JumpIfNotEqual {486}
	485 Call 0x1C17DFC
	486 Move X22, 0xBFB000
	487 Move W8, [X22+906]
	488 Compare W8, 0
	489 JumpIfNotEqual {495}
	490 Move X0, 0x934000
	491 Move X0, [X0+2552]
	492 Call 0x1C17CF4
	493 Move W8, 1
	494 Move [X22+906], W8
	495 Move X0, [X24]
	496 Move W8, [X0+224]
	497 Compare W8, 0
	498 JumpIfNotEqual {501}
	499 Call 0x1C17DFC
	500 Move X0, [X24]
	501 Move X9, 0x962000
	502 Move X8, [X0+184]
	503 Move X9, [X9+896]
	504 Move X0, X21
	505 Move X1, X19
	506 Move X2, [X8+80]
	507 Move X3, [X9]
	508 Call 0x21DE8A8, X0, X1, X2
	509 Move X0, [X24]
	510 Move X21, [X19+40]
	511 Move W8, [X0+224]
	512 Compare W8, 0
	513 JumpIfNotEqual {515}
	514 Call 0x1C17DFC
	515 Move X22, 0xBFA000
	516 Move W8, [X22+905]
	517 Compare W8, 0
	518 JumpIfNotEqual {524}
	519 Move X0, 0x934000
	520 Move X0, [X0+2552]
	521 Call 0x1C17CF4
	522 Move W8, 1
	523 Move [X22+905], W8
	524 Move X0, [X24]
	525 Move W8, [X0+224]
	526 Compare W8, 0
	527 JumpIfNotEqual {530}
	528 Call 0x1C17DFC
	529 Move X0, [X24]
	530 Move X9, 0x962000
	531 Move X8, [X0+184]
	532 Move X9, [X9+928]
	533 Move X0, X21
	534 Move X1, X19
	535 Move X2, [X8+40]
	536 Move X3, [X9]
	537 Call 0x21DE088, X0, X1, X2
	538 Move X0, X19
	539 Move X1, X31
	540 Move X2, X31
	541 Move [X19+248], W31
	542 Call PointerEventData.set_pointerPress, X0, X1
	543 Move W8, [X19+325]
	544 Move [X19+56], X31
	545 Compare W8, 0
	546 JumpIfEqual {590}
	547 Move X0, [X25]
	548 Move X21, [X19+64]
	549 Move W8, [X0+224]
	550 Compare W8, 0
	551 JumpIfNotEqual {553}
	552 Call 0x1C17DFC
	553 Move X0, X21
	554 Move X1, X31
	555 Move X2, X31
	556 Call Object.op_Inequality, X0, X1
	557 Move TEMP, X0
	558 And TEMP, TEMP, 1
	559 Compare TEMP, 1
	560 JumpIfNotEqual {590}
	561 Move X0, [X24]
	562 Move X21, [X19+64]
	563 Move W8, [X0+224]
	564 Compare W8, 0
	565 JumpIfNotEqual {567}
	566 Call 0x1C17DFC
	567 Move X22, 0xBFA000
	568 Move W8, [X22+907]
	569 Compare W8, 0
	570 JumpIfNotEqual {576}
	571 Move X0, 0x934000
	572 Move X0, [X0+2552]
	573 Call 0x1C17CF4
	574 Move W8, 1
	575 Move [X22+907], W8
	576 Move X0, [X24]
	577 Move W8, [X0+224]
	578 Compare W8, 0
	579 JumpIfNotEqual {582}
	580 Call 0x1C17DFC
	581 Move X0, [X24]
	582 Move X9, 0x962000
	583 Move X8, [X0+184]
	584 Move X9, [X9+912]
	585 Move X0, X21
	586 Move X1, X19
	587 Move X2, [X8+72]
	588 Move X3, [X9]
	589 Call 0x21DE088, X0, X1, X2
	590 Move [X19+325], W31
	591 Move [X19+64], X31
	592 Move [X20+146], W31
	593 Move X0, X20
	594 Move X1, X19
	595 Move X20, [X31+64]
	596 Move X19, [X31+72]
	597 Move X22, [X31+48]
	598 Move X21, [X31+56]
	599 Move X24, [X31+32]
	600 Move X23, [X31+40]
	601 Move X26, [X31+16]
	602 Move X25, [X31+24]
	603 Move X30, [X31+80]
	604 Call ButtonState.CopyPressStateFrom, X0, X1
	605 Return 
	606 Call 0x1C17F20

Method: System.Void ProcessPointerButtonDrag(ref UnityEngine.InputSystem.UI.PointerModel/ButtonState button, UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData)

Disassembly:
	0x037E8194 CBZ W8, 0x37E834C
	0x037E8198 LDR V0, [X19 + 0x398]
	0x037E819C CMP W8, 0x1
	0x037E81A0 B.GT 0x37E833C
	0x037E81A4 LDR V1, [X19 + 0x58]
	0x037E81A8 B 0x37E8340
	0x037E81AC FCMP S10, 0x0
	0x037E81B0 B.LE 0x37E846C
	0x037E81B4 MOVZ W22, 0x1
	0x037E81B8 B 0x37E8130
	0x037E81BC MOV X21, X31
	0x037E81C0 LDR X0, [X19 + 0x90]
	0x037E81C4 CBZ X0, 0x37E81D8
	0x037E81C8 MOV X1, X31
	0x037E81CC BL 0x37451B4
	0x037E81D0 MOV X22, X0
	0x037E81D4 B 0x37E81DC
	0x037E81D8 MOV X22, X31
	0x037E81DC LDR X8, [X19]
	0x037E81E0 MOV X0, X19
	0x037E81E4 LDR X9, [X8 + 0x268]
	0x037E81E8 LDR X1, [X8 + 0x270]
	0x037E81EC BLR X9
	0x037E81F0 MOV X20, X0
	0x037E81F4 CBZ X22, 0x37E8280
	0x037E81F8 MOV X0, X22
	0x037E81FC MOV X1, X31
	0x037E8200 BL 0x3735488
	0x037E8204 TBZ X0, 0x0, 0x37E8280
	0x037E8208 LDR X8, [X19 + 0x38]
	0x037E820C CBZ X8, 0x37E8474
	0x037E8210 ADRP X23, 0x933000
	0x037E8214 LDR X23, [X23 + 0x9F8]
	0x037E8218 LDR X22, [X8 + 0x40]
	0x037E821C LDR X0, [X23]
	0x037E8220 LDR W9, [X0 + 0xE0]
	0x037E8224 CBNZ W9, 0x37E822C
	0x037E8228 BL 0x1C16DFC
	0x037E822C ADRP X24, 0xBF9000
	0x037E8230 LDRB W8, [X24 + 0x391]
	0x037E8234 CBNZ W8, 0x37E824C
	0x037E8238 ADRP X0, 0x933000
	0x037E823C LDR X0, [X0 + 0x9F8]
	0x037E8240 BL 0x1C16CF4
	0x037E8244 MOVZ W8, 0x1
	0x037E8248 STRB W8, [X24 + 0x391]
	0x037E824C LDR X0, [X23]
	0x037E8250 LDR W8, [X0 + 0xE0]
	0x037E8254 CBNZ W8, 0x37E8260
	0x037E8258 BL 0x1C16DFC
	0x037E825C LDR X0, [X23]
	0x037E8260 ADRP X9, 0x961000
	0x037E8264 LDR X8, [X0 + 0xB8]
	0x037E8268 LDR X9, [X9 + 0x418]
	0x037E826C MOV X0, X22
	0x037E8270 MOV X1, X20
	0x037E8274 LDR X2, [X8 + 0x88]
	0x037E8278 LDR X3, [X9]
	0x037E827C BL 0x21DD088
	0x037E8280 CBZ X20, 0x37E8474
	0x037E8284 LDR X8, [X20]
	0x037E8288 MOV X0, X20
	0x037E828C LDP X9, X1, [X8 + 0x198]
	0x037E8290 BLR X9
	0x037E8294 CBZ X21, 0x37E8448
	0x037E8298 TBNZ X0, 0x0, 0x37E8448
	0x037E829C MOV X0, X21
	0x037E82A0 MOV X1, X31
	0x037E82A4 BL 0x3735488
	0x037E82A8 TBZ X0, 0x0, 0x37E8448
	0x037E82AC LDR X8, [X19 + 0x38]
	0x037E82B0 CBZ X8, 0x37E8474
	0x037E82B4 ADRP X21, 0x933000
	0x037E82B8 LDR X21, [X21 + 0x9F8]
	0x037E82BC LDR X19, [X8 + 0x40]
	0x037E82C0 LDR X0, [X21]
	0x037E82C4 LDR W9, [X0 + 0xE0]
	0x037E82C8 CBNZ W9, 0x37E82D0
	0x037E82CC BL 0x1C16DFC
	0x037E82D0 ADRP X22, 0xBF9000
	0x037E82D4 LDRB W8, [X22 + 0x392]
	0x037E82D8 CBNZ W8, 0x37E82F0
	0x037E82DC ADRP X0, 0x933000
	0x037E82E0 LDR X0, [X0 + 0x9F8]
	0x037E82E4 BL 0x1C16CF4
	0x037E82E8 MOVZ W8, 0x1
	0x037E82EC STRB W8, [X22 + 0x392]
	0x037E82F0 LDR X0, [X21]
	0x037E82F4 LDR W8, [X0 + 0xE0]
	0x037E82F8 CBNZ W8, 0x37E8304
	0x037E82FC BL 0x1C16DFC
	0x037E8300 LDR X0, [X21]
	0x037E8304 ADRP X9, 0x961000
	0x037E8308 LDR X8, [X0 + 0xB8]
	0x037E830C LDR X9, [X9 + 0x428]
	0x037E8310 MOV X0, X19
	0x037E8314 MOV X1, X20
	0x037E8318 LDR X2, [X8 + 0x80]
	0x037E831C LDR X3, [X9]
	0x037E8320 LDP X20, X19, [X31 + 0x50]
	0x037E8324 LDP X22, X21, [X31 + 0x40]
	0x037E8328 LDP X24, X23, [X31 + 0x30]
	0x037E832C LDP X30, X25, [X31 + 0x20]
	0x037E8330 LDP D9, D8, [X31 + 0x10]
	0x037E8334 LDR V10, [X31], #0x60
	0x037E8338 B 0x21DD088
	0x037E833C LDR V1, [X19 + 0x5C]
	0x037E8340 FADD S0, S0, S1
	0x037E8344 FCMP S8, S0
	0x037E8348 B.LE 0x37E8148
	0x037E834C LDR X20, [X19 + 0x3A0]
	0x037E8350 CBNZ X20, 0x37E8380
	0x037E8354 ADRP X8, 0x961000
	0x037E8358 LDR X21, [X19 + 0x38]
	0x037E835C LDR X8, [X8 + 0x438]
	0x037E8360 LDR X0, [X8]
	0x037E8364 BL 0x1C16F10
	0x037E8368 MOV X1, X21
	0x037E836C MOV X2, X31
	0x037E8370 MOV X20, X0
	0x037E8374 BL 0x3E4EB50
	0x037E8378 STR X20, [X19 + 0x3A0]
	0x037E837C CBZ X20, 0x37E8474
	0x037E8380 LDR X8, [X20]
	0x037E8384 MOV X0, X20
	0x037E8388 LDP X9, X1, [X8 + 0x178]
	0x037E838C BLR X9
	0x037E8390 MOV X0, X19
	0x037E8394 MOV X1, X20
	0x037E8398 STP S9, S10, [X20 + 0x20]
	0x037E839C STR W22, [X20 + 0x28]
	0x037E83A0 BL 0x37E8478
	0x037E83A4 TBZ X0, 0x0, 0x37E8148
	0x037E83A8 LDR X8, [X19 + 0x38]
	0x037E83AC CBZ X8, 0x37E8474
	0x037E83B0 ADRP X24, 0x933000
	0x037E83B4 LDR X24, [X24 + 0x9F8]
	0x037E83B8 LDR X21, [X8 + 0x40]
	0x037E83BC LDR X0, [X24]
	0x037E83C0 LDR W9, [X0 + 0xE0]
	0x037E83C4 CBNZ W9, 0x37E83CC
	0x037E83C8 BL 0x1C16DFC
	0x037E83CC ADRP X25, 0xBF9000
	0x037E83D0 LDRB W8, [X25 + 0x390]
	0x037E83D4 CBNZ W8, 0x37E83EC
	0x037E83D8 ADRP X0, 0x933000
	0x037E83DC LDR X0, [X0 + 0x9F8]
	0x037E83E0 BL 0x1C16CF4
	0x037E83E4 MOVZ W8, 0x1
	0x037E83E8 STRB W8, [X25 + 0x390]
	0x037E83EC LDR X0, [X24]
	0x037E83F0 LDR W8, [X0 + 0xE0]
	0x037E83F4 CBNZ W8, 0x37E8400
	0x037E83F8 BL 0x1C16DFC
	0x037E83FC LDR X0, [X24]
	0x037E8400 ADRP X9, 0x961000
	0x037E8404 LDR X8, [X0 + 0xB8]
	0x037E8408 LDR X9, [X9 + 0x420]
	0x037E840C MOV X0, X21
	0x037E8410 MOV X1, X20
	0x037E8414 LDR X2, [X8 + 0x78]
	0x037E8418 LDR X3, [X9]
	0x037E841C BL 0x21DD088
	0x037E8420 LDR X8, [X20]
	0x037E8424 MOV X0, X20
	0x037E8428 LDP X9, X1, [X8 + 0x198]
	0x037E842C BLR X9
	0x037E8430 LDR W8, [X19 + 0x390]
	0x037E8434 STR S8, [X19 + 0x398]
	0x037E8438 STR W22, [X19 + 0x394]
	0x037E843C ADD W8, W8, 0x1
	0x037E8440 STR W8, [X19 + 0x390]
	0x037E8444 TBZ X0, 0x0, 0x37E8148
	0x037E8448 LDP X20, X19, [X31 + 0x50]
	0x037E844C LDP X22, X21, [X31 + 0x40]
	0x037E8450 LDP X24, X23, [X31 + 0x30]
	0x037E8454 LDP X30, X25, [X31 + 0x20]
	0x037E8458 LDP D9, D8, [X31 + 0x10]
	0x037E845C LDR V10, [X31], #0x60
	0x037E8460 RET
	0x037E8464 MOV W22, W31
	0x037E8468 B 0x37E8130
	0x037E846C MOVZ W22, 0x3
	0x037E8470 B 0x37E8130
	0x037E8474 BL 0x1C16F20
	0x037E8478 STR X30, [X31 - 0x30]!
	0x037E847C STP X22, X21, [X31 + 0x10]
	0x037E8480 STP X20, X19, [X31 + 0x20]
	0x037E8484 ADRP X21, 0xBF9000
	0x037E8488 ADRP X22, 0x90B000
	0x037E848C LDRB W8, [X21 + 0x325]
	0x037E8490 LDR X22, [X22 + 0x598]
	0x037E8494 MOV X20, X1
	0x037E8498 MOV X19, X0
	0x037E849C TBNZ X8, 0x0, 0x37E84C0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xBFA000
	009 Move W8, [X22+802]
	010 Move X19, X2
	011 Move X20, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x962000
	018 Move X0, [X0+968]
	019 Call 0x1C17CF4
	020 Move X0, 0x962000
	021 Move X0, [X0+976]
	022 Call 0x1C17CF4
	023 Move X0, 0x962000
	024 Move X0, [X0+936]
	025 Call 0x1C17CF4
	026 Move X0, 0x934000
	027 Move X0, [X0+2552]
	028 Call 0x1C17CF4
	029 Move X0, 0x90C000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+802], W8
	034 Compare X19, 0
	035 JumpIfEqual {228}
	036 Move X0, X19
	037 Move X1, X31
	038 Call PointerEventData.IsPointerMoving, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {64}
	043 Move W8, [X19+404]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X31
	046 Call Cursor.get_lockState
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X23, 0x90C000
	049 Move X23, [X23+1432]
	050 Move X22, [X19+64]
	051 Move X0, [X23]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X22
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {72}
	064 Move X20, [X31+48]
	065 Move X19, [X31+56]
	066 Move X22, [X31+32]
	067 Move X21, [X31+40]
	068 Move X24, [X31+16]
	069 Move X23, [X31+24]
	070 Move X30, [X31+64]
	071 Return 
	072 Move W8, [X19+325]
	073 Compare W8, 0
	074 JumpIfNotEqual {134}
	075 Move W8, [X19+324]
	076 Compare W8, 0
	077 JumpIfEqual {101}
	078 Move X8, [X21+56]
	079 Compare X8, 0
	080 JumpIfEqual {228}
	081 Move V0, [X19+276]
	082 Move V1, [X19+280]
	083 Move V2, [X19+260]
	084 Move V3, [X19+264]
	085 Move W8, [X8+60]
	086 Move W9, [X19+404]
	087 Subtract S0, S0, S2
	088 Subtract S1, S1, S3
	089 Multiply S3, S0, S0
	090 Multiply S1, S1, S1
	091 NotImplemented "Instruction SCVTF not yet implemented."
	092 Add S1, S3, S1
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Multiply D0, D2, D2
	095 NotImplemented "Instruction FCVT not yet implemented."
	096 Move D2, 1
	097 Move V2, [X21+96]
	098 NotImplemented "Instruction FCVT not yet implemented."
	099 Multiply D0, D0, D2
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 Move X22, 0x934000
	102 Move X22, [X22+2552]
	103 Move X21, [X19+64]
	104 Move X0, [X22]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X24, 0xBFA000
	110 Move W8, [X24+908]
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x934000
	114 Move X0, [X0+2552]
	115 Call 0x1C17CF4
	116 Move W8, 1
	117 Move [X24+908], W8
	118 Move X0, [X22]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {124}
	122 Call 0x1C17DFC
	123 Move X0, [X22]
	124 Move X9, 0x962000
	125 Move X8, [X0+184]
	126 Move X9, [X9+968]
	127 Move X0, X21
	128 Move X1, X19
	129 Move X2, [X8+56]
	130 Move X3, [X9]
	131 Call 0x21DE088, X0, X1, X2
	132 Move W8, 1
	133 Move [X19+325], W8
	134 Move X0, [X23]
	135 Move X21, [X19+40]
	136 Move X22, [X19+64]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move X0, X21
	142 Move X1, X22
	143 Move X2, X31
	144 Call Object.op_Inequality, X0, X1
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {186}
	149 Move X22, 0x934000
	150 Move X22, [X22+2552]
	151 Move X21, [X19+40]
	152 Move X0, [X22]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X23, 0xBFA000
	158 Move W8, [X23+904]
	159 Compare W8, 0
	160 JumpIfNotEqual {166}
	161 Move X0, 0x934000
	162 Move X0, [X0+2552]
	163 Call 0x1C17CF4
	164 Move W8, 1
	165 Move [X23+904], W8
	166 Move X0, [X22]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {172}
	170 Call 0x1C17DFC
	171 Move X0, [X22]
	172 Move X9, 0x962000
	173 Move X8, [X0+184]
	174 Move X9, [X9+936]
	175 Move X0, X21
	176 Move X1, X19
	177 Move X2, [X8+32]
	178 Move X3, [X9]
	179 Call 0x21DE088, X0, X1, X2
	180 Move X0, X19
	181 Move X1, X31
	182 Move X2, X31
	183 Move [X19+248], W31
	184 Call PointerEventData.set_pointerPress, X0, X1
	185 Move [X19+56], X31
	186 Move X22, 0x934000
	187 Move X22, [X22+2552]
	188 Move X21, [X19+64]
	189 Move X0, [X22]
	190 Move W8, [X0+224]
	191 Compare W8, 0
	192 JumpIfNotEqual {194}
	193 Call 0x1C17DFC
	194 Move X23, 0xBFA000
	195 Move W8, [X23+909]
	196 Compare W8, 0
	197 JumpIfNotEqual {203}
	198 Move X0, 0x934000
	199 Move X0, [X0+2552]
	200 Call 0x1C17CF4
	201 Move W8, 1
	202 Move [X23+909], W8
	203 Move X0, [X22]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {209}
	207 Call 0x1C17DFC
	208 Move X0, [X22]
	209 Move X9, 0x962000
	210 Move X8, [X0+184]
	211 Move X9, [X9+976]
	212 Move X0, X21
	213 Move X1, X19
	214 Move X2, [X8+64]
	215 Move X3, [X9]
	216 Call 0x21DE088, X0, X1, X2
	217 Move X0, X20
	218 Move X1, X19
	219 Move X20, [X31+48]
	220 Move X19, [X31+56]
	221 Move X22, [X31+32]
	222 Move X21, [X31+40]
	223 Move X24, [X31+16]
	224 Move X23, [X31+24]
	225 Move X30, [X31+64]
	226 Call ButtonState.CopyPressStateFrom, X0, X1
	227 Return 
	228 Call 0x1C17F20

Method: System.Void ProcessPointerScroll(ref UnityEngine.InputSystem.UI.PointerModel pointer, UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x037E84A0 ADRP X0, 0x961000
	0x037E84A4 LDR X0, [X0 + 0x440]
	0x037E84A8 BL 0x1C16CF4
	0x037E84AC ADRP X0, 0x90B000
	0x037E84B0 LDR X0, [X0 + 0x598]
	0x037E84B4 BL 0x1C16CF4
	0x037E84B8 MOVZ W8, 0x1
	0x037E84BC STRB W8, [X21 + 0x325]
	0x037E84C0 LDR X0, [X22]
	0x037E84C4 LDR X21, [X19 + 0x3A8]
	0x037E84C8 LDR W8, [X0 + 0xE0]
	0x037E84CC CBNZ W8, 0x37E84D4
	0x037E84D0 BL 0x1C16DFC
	0x037E84D4 MOV X0, X21
	0x037E84D8 MOV X1, X31
	0x037E84DC MOV X2, X31
	0x037E84E0 BL 0x3C3883C
	0x037E84E4 TBNZ X0, 0x0, 0x37E8610
	0x037E84E8 LDR X8, [X19 + 0x38]
	0x037E84EC CBZ X8, 0x37E866C
	0x037E84F0 LDR X0, [X22]
	0x037E84F4 LDR X21, [X8 + 0x40]
	0x037E84F8 LDR W9, [X0 + 0xE0]
	0x037E84FC CBNZ W9, 0x37E8504
	0x037E8500 BL 0x1C16DFC
	0x037E8504 MOV X0, X21
	0x037E8508 MOV X1, X31
	0x037E850C MOV X2, X31
	0x037E8510 BL 0x3C3883C
	0x037E8514 TBNZ X0, 0x0, 0x37E8610
	0x037E8518 LDR X8, [X19 + 0x38]
	0x037E851C CBZ X8, 0x37E866C
	0x037E8520 LDR X0, [X8 + 0x40]
	0x037E8524 CBZ X0, 0x37E866C
	0x037E8528 ADRP X8, 0x961000
	0x037E852C LDR X8, [X8 + 0x440]
	0x037E8530 LDR X1, [X8]
	0x037E8534 BL 0x21E52E4
	0x037E8538 LDR X8, [X22]
	0x037E853C MOV X21, X0
	0x037E8540 LDR W9, [X8 + 0xE0]
	0x037E8544 CBNZ W9, 0x37E8550
	0x037E8548 MOV X0, X8
	0x037E854C BL 0x1C16DFC
	0x037E8550 MOV X0, X21
	0x037E8554 MOV X1, X31
	0x037E8558 MOV X2, X31
	0x037E855C BL 0x3C3883C
	0x037E8560 TBNZ X0, 0x0, 0x37E8610
	0x037E8564 CBZ X20, 0x37E866C
	0x037E8568 LDR W8, [X20 + 0x28]
	0x037E856C CMP W8, 0x3
	0x037E8570 B.HI 0x37E85A0
	0x037E8574 ADRP X9, 0xFFFFFFFFFD3AF000
	0x037E8578 ADD X9, X9, 0x99D
	0x037E857C ADR X10, 0x10
	0x037E8580 LDRB W11, [X9, X8, LSL]
	0x037E8584 ADD X10, X10, X11, 0x2, LSL
	0x037E8588 BR X10
	0x037E858C CBZ X21, 0x37E866C
	0x037E8590 LDR X8, [X21]
	0x037E8594 LDR X9, [X8 + 0x2E8]
	0x037E8598 LDR X1, [X8 + 0x2F0]
	0x037E859C B 0x37E85E0
	0x037E85A0 MOV X20, X31
	0x037E85A4 B 0x37E85EC
	0x037E85A8 CBZ X21, 0x37E866C
	0x037E85AC LDR X8, [X21]
	0x037E85B0 LDR X9, [X8 + 0x308]
	0x037E85B4 LDR X1, [X8 + 0x310]
	0x037E85B8 B 0x37E85E0
	0x037E85BC CBZ X21, 0x37E866C
	0x037E85C0 LDR X8, [X21]
	0x037E85C4 LDR X9, [X8 + 0x2F8]
	0x037E85C8 LDR X1, [X8 + 0x300]
	0x037E85CC B 0x37E85E0
	0x037E85D0 CBZ X21, 0x37E866C
	0x037E85D4 LDR X8, [X21]
	0x037E85D8 LDR X9, [X8 + 0x318]
	0x037E85DC LDR X1, [X8 + 0x320]
	0x037E85E0 MOV X0, X21
	0x037E85E4 BLR X9
	0x037E85E8 MOV X20, X0
	0x037E85EC LDR X0, [X22]
	0x037E85F0 LDR W8, [X0 + 0xE0]
	0x037E85F4 CBNZ W8, 0x37E85FC
	0x037E85F8 BL 0x1C16DFC
	0x037E85FC MOV X0, X20
	0x037E8600 MOV X1, X31
	0x037E8604 MOV X2, X31
	0x037E8608 BL 0x3C3883C
	0x037E860C TBZ X0, 0x0, 0x37E8624
	0x037E8610 LDP X20, X19, [X31 + 0x20]
	0x037E8614 LDP X22, X21, [X31 + 0x10]
	0x037E8618 MOVZ W0, 0x1
	0x037E861C LDR X30, [X31], #0x30
	0x037E8620 RET
	0x037E8624 CBZ X20, 0x37E866C
	0x037E8628 MOV X0, X20
	0x037E862C MOV X1, X31
	0x037E8630 BL 0x3C32E90

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xBFA000
	010 Move W8, [X21+803]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x962000
	018 Move X0, [X0+984]
	019 Call 0x1C17CF4
	020 Move X0, 0x962000
	021 Move X0, [X0+992]
	022 Call 0x1C17CF4
	023 Move X0, 0x934000
	024 Move X0, [X0+2552]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+803], W8
	028 Move V8, [X20+480]
	029 Move V9, [X20+484]
	030 Move X20, 0xBF2000
	031 Move W8, [X20+1450]
	032 Multiply S0, S8, S8
	033 Multiply S1, S9, S9
	034 Add S10, S0, S1
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x913000
	038 Move X0, [X0+1208]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1450], W8
	042 Move X8, 0x913000
	043 Move X8, [X8+1208]
	044 Move X9, -47173632
	045 Move V0, [X9+576]
	046 NotImplemented "Instruction FABS not yet implemented."
	047 Move X8, [X8]
	048 Move S2, W31
	049 NotImplemented "Instruction FMAXNM not yet implemented."
	050 Multiply S0, S1, S0
	051 Move X8, [X8+184]
	052 Move S1, 8
	053 Move V3, [X8]
	054 Multiply S1, S3, S1
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 NotImplemented "Instruction FCSEL not yet implemented."
	057 NotImplemented "Instruction FABD not yet implemented."
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 Compare X19, 0
	060 JumpIfEqual {118}
	061 Move [X19+316], S8
	062 Move [X19+320], S9
	063 Move X21, 0x934000
	064 Move X21, [X21+2552]
	065 Move X20, [X19+32]
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X8, 0x962000
	072 Move X8, [X8+992]
	073 Move X0, X20
	074 Move X1, [X8]
	075 Call 0x21DEB64, X0
	076 Move X22, 0xBFA000
	077 Move W8, [X22+910]
	078 Move X20, X0
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x934000
	082 Move X0, [X0+2552]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X22+910], W8
	086 Move X0, [X21]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {92}
	090 Call 0x1C17DFC
	091 Move X0, [X21]
	092 Move X9, 0x962000
	093 Move X8, [X0+184]
	094 Move X9, [X9+984]
	095 Move X0, X20
	096 Move X1, X19
	097 Move X2, [X8+88]
	098 Move X3, [X9]
	099 Move X20, [X31+48]
	100 Move X19, [X31+56]
	101 Move X22, [X31+32]
	102 Move X21, [X31+40]
	103 Move X30, [X31+24]
	104 Move D9, [X31+8]
	105 Move D8, [X31+16]
	106 Move V10, [X31+64]
	107 Call 0x21DE8A8, X0, X1, X2
	108 Return 
	109 Move X20, [X31+48]
	110 Move X19, [X31+56]
	111 Move X22, [X31+32]
	112 Move X21, [X31+40]
	113 Move X30, [X31+24]
	114 Move D9, [X31+8]
	115 Move D8, [X31+16]
	116 Move V10, [X31+64]
	117 Return 
	118 Call 0x1C17F20

Method: System.Void ProcessNavigation(ref UnityEngine.InputSystem.UI.NavigationModel navigationState)

Disassembly:
	0x037E8E40 LDRB W3, [X0 + 0xD4]
	0x037E8E44 LDR X4, [X0 + 0xE0]
	0x037E8E48 ADD X8, X0, 0x80
	0x037E8E4C MOV X2, X1
	0x037E8E50 MOV X1, X8
	0x037E8E54 B 0x37E8800
	0x037E8E58 LDR X0, [X0 + 0x88]
	0x037E8E5C RET
	0x037E8E60 LDRB W3, [X0 + 0xD4]
	0x037E8E64 ADD X8, X0, 0x88
	0x037E8E68 MOV X2, X1
	0x037E8E6C MOV X1, X8
	0x037E8E70 MOV X4, X31
	0x037E8E74 B 0x37E8800
	0x037E8E78 LDR X0, [X0 + 0x90]
	0x037E8E7C RET
	0x037E8E80 LDRB W3, [X0 + 0xD4]
	0x037E8E84 ADD X8, X0, 0x90
	0x037E8E88 MOV X2, X1
	0x037E8E8C MOV X1, X8
	0x037E8E90 MOV X4, X31
	0x037E8E94 B 0x37E8800
	0x037E8E98 LDR X0, [X0 + 0xC0]
	0x037E8E9C RET
	0x037E8EA0 LDRB W3, [X0 + 0xD4]
	0x037E8EA4 LDR X4, [X0 + 0x110]
	0x037E8EA8 ADD X8, X0, 0xC0
	0x037E8EAC MOV X2, X1
	0x037E8EB0 MOV X1, X8
	0x037E8EB4 B 0x37E8800
	0x037E8EB8 LDR X0, [X0 + 0xB8]
	0x037E8EBC RET
	0x037E8EC0 LDRB W3, [X0 + 0xD4]
	0x037E8EC4 LDR X4, [X0 + 0x108]
	0x037E8EC8 ADD X8, X0, 0xB8
	0x037E8ECC MOV X2, X1
	0x037E8ED0 MOV X1, X8
	0x037E8ED4 B 0x37E8800
	0x037E8ED8 SUB X31, X31, 0x30
	0x037E8EDC STP X30, X21, [X31 + 0x10]
	0x037E8EE0 STP X20, X19, [X31 + 0x20]
	0x037E8EE4 ADRP X20, 0xBF9000
	0x037E8EE8 ADRP X21, 0x961000
	0x037E8EEC LDRB W8, [X20 + 0x329]
	0x037E8EF0 LDR X21, [X21 + 0x468]
	0x037E8EF4 MOV X19, X0
	0x037E8EF8 TBNZ X8, 0x0, 0x37E8F10
	0x037E8EFC ADRP X0, 0x961000
	0x037E8F00 LDR X0, [X0 + 0x468]
	0x037E8F04 BL 0x1C16CF4
	0x037E8F08 MOVZ W8, 0x1
	0x037E8F0C STRB W8, [X20 + 0x329]
	0x037E8F10 LDR X0, [X21]
	0x037E8F14 BL 0x1C16F10
	0x037E8F18 MOV X1, X31
	0x037E8F1C MOV X20, X0
	0x037E8F20 BL 0x37CDF6C
	0x037E8F24 CBZ X20, 0x37E919C
	0x037E8F28 LDR X1, [X20 + 0x10]
	0x037E8F2C MOV X0, X19
	0x037E8F30 BL 0x37E91A0
	0x037E8F34 MOV X0, X20
	0x037E8F38 MOV X1, X31
	0x037E8F3C BL 0x37CE56C
	0x037E8F40 STR X0, [X31 + 0x8]
	0x037E8F44 ADD X0, X31, 0x8
	0x037E8F48 MOV X1, X31
	0x037E8F4C BL 0x37CF538
	0x037E8F50 MOV X1, X31
	0x037E8F54 BL 0x3745D90
	0x037E8F58 LDRB W3, [X19 + 0xD4]
	0x037E8F5C MOV X2, X0
	0x037E8F60 ADD X1, X19, 0x90
	0x037E8F64 MOV X0, X19
	0x037E8F68 MOV X4, X31
	0x037E8F6C BL 0x37E8800
	0x037E8F70 MOV X0, X20
	0x037E8F74 MOV X1, X31
	0x037E8F78 BL 0x37CE56C
	0x037E8F7C STR X0, [X31 + 0x8]
	0x037E8F80 ADD X0, X31, 0x8
	0x037E8F84 MOV X1, X31
	0x037E8F88 BL 0x37CF51C
	0x037E8F8C MOV X1, X31
	0x037E8F90 BL 0x3745D90
	0x037E8F94 LDRB W3, [X19 + 0xD4]
	0x037E8F98 MOV X2, X0
	0x037E8F9C ADD X1, X19, 0x88
	0x037E8FA0 MOV X0, X19
	0x037E8FA4 MOV X4, X31
	0x037E8FA8 BL 0x37E8800
	0x037E8FAC MOV X0, X20
	0x037E8FB0 MOV X1, X31
	0x037E8FB4 BL 0x37CE56C
	0x037E8FB8 STR X0, [X31 + 0x8]
	0x037E8FBC ADD X0, X31, 0x8
	0x037E8FC0 MOV X1, X31
	0x037E8FC4 BL 0x37CF500
	0x037E8FC8 MOV X1, X31
	0x037E8FCC BL 0x3745D90
	0x037E8FD0 LDRB W3, [X19 + 0xD4]
	0x037E8FD4 LDR X4, [X19 + 0xE0]
	0x037E8FD8 MOV X2, X0
	0x037E8FDC ADD X1, X19, 0x80
	0x037E8FE0 MOV X0, X19
	0x037E8FE4 BL 0x37E8800
	0x037E8FE8 MOV X0, X20
	0x037E8FEC MOV X1, X31
	0x037E8FF0 BL 0x37CE56C
	0x037E8FF4 STR X0, [X31 + 0x8]
	0x037E8FF8 ADD X0, X31, 0x8
	0x037E8FFC MOV X1, X31
	0x037E9000 BL 0x37CF570
	0x037E9004 MOV X1, X31
	0x037E9008 BL 0x3745D90
	0x037E900C LDRB W3, [X19 + 0xD4]
	0x037E9010 LDR X4, [X19 + 0xE8]
	0x037E9014 MOV X2, X0
	0x037E9018 ADD X1, X19, 0x98
	0x037E901C MOV X0, X19
	0x037E9020 BL 0x37E8800
	0x037E9024 MOV X0, X20
	0x037E9028 MOV X1, X31
	0x037E902C BL 0x37CE56C
	0x037E9030 STR X0, [X31 + 0x8]
	0x037E9034 ADD X0, X31, 0x8
	0x037E9038 MOV X1, X31
	0x037E903C BL 0x37CF5C4
	0x037E9040 MOV X1, X31
	0x037E9044 BL 0x3745D90
	0x037E9048 LDRB W3, [X19 + 0xD4]
	0x037E904C LDR X4, [X19 + 0xF0]
	0x037E9050 MOV X2, X0
	0x037E9054 ADD X1, X19, 0xA8
	0x037E9058 MOV X0, X19
	0x037E905C BL 0x37E8800
	0x037E9060 MOV X0, X20
	0x037E9064 MOV X1, X31
	0x037E9068 BL 0x37CE56C
	0x037E906C STR X0, [X31 + 0x8]
	0x037E9070 ADD X0, X31, 0x8
	0x037E9074 MOV X1, X31
	0x037E9078 BL 0x37CF5A8
	0x037E907C MOV X1, X31
	0x037E9080 BL 0x3745D90
	0x037E9084 LDRB W3, [X19 + 0xD4]
	0x037E9088 LDR X4, [X19 + 0xF8]
	0x037E908C MOV X2, X0
	0x037E9090 ADD X1, X19, 0xA0
	0x037E9094 MOV X0, X19
	0x037E9098 BL 0x37E8800
	0x037E909C MOV X0, X20
	0x037E90A0 MOV X1, X31
	0x037E90A4 BL 0x37CE56C
	0x037E90A8 STR X0, [X31 + 0x8]
	0x037E90AC ADD X0, X31, 0x8
	0x037E90B0 MOV X1, X31
	0x037E90B4 BL 0x37CF554
	0x037E90B8 MOV X1, X31
	0x037E90BC BL 0x3745D90
	0x037E90C0 LDRB W3, [X19 + 0xD4]
	0x037E90C4 LDR X4, [X19 + 0xD8]
	0x037E90C8 MOV X2, X0
	0x037E90CC ADD X1, X19, 0x78
	0x037E90D0 MOV X0, X19
	0x037E90D4 BL 0x37E8800
	0x037E90D8 MOV X0, X20
	0x037E90DC MOV X1, X31
	0x037E90E0 BL 0x37CE56C
	0x037E90E4 STR X0, [X31 + 0x8]
	0x037E90E8 ADD X0, X31, 0x8
	0x037E90EC MOV X1, X31
	0x037E90F0 BL 0x37CF58C
	0x037E90F4 MOV X1, X31
	0x037E90F8 BL 0x3745D90
	0x037E90FC LDRB W3, [X19 + 0xD4]
	0x037E9100 LDR X4, [X19 + 0x100]
	0x037E9104 MOV X2, X0
	0x037E9108 ADD X1, X19, 0xB0
	0x037E910C MOV X0, X19
	0x037E9110 BL 0x37E8800
	0x037E9114 MOV X0, X20
	0x037E9118 MOV X1, X31
	0x037E911C BL 0x37CE56C
	0x037E9120 STR X0, [X31 + 0x8]
	0x037E9124 ADD X0, X31, 0x8
	0x037E9128 MOV X1, X31
	0x037E912C BL 0x37CF5FC
	0x037E9130 MOV X1, X31
	0x037E9134 BL 0x3745D90
	0x037E9138 LDRB W3, [X19 + 0xD4]
	0x037E913C LDR X4, [X19 + 0x110]
	0x037E9140 MOV X2, X0
	0x037E9144 ADD X1, X19, 0xC0
	0x037E9148 MOV X0, X19
	0x037E914C BL 0x37E8800
	0x037E9150 MOV X0, X20
	0x037E9154 MOV X1, X31
	0x037E9158 BL 0x37CE56C
	0x037E915C STR X0, [X31 + 0x8]
	0x037E9160 ADD X0, X31, 0x8
	0x037E9164 MOV X1, X31
	0x037E9168 BL 0x37CF5E0
	0x037E916C MOV X1, X31
	0x037E9170 BL 0x3745D90
	0x037E9174 LDRB W3, [X19 + 0xD4]
	0x037E9178 LDR X4, [X19 + 0x108]
	0x037E917C MOV X2, X0
	0x037E9180 ADD X1, X19, 0xB8
	0x037E9184 MOV X0, X19
	0x037E9188 BL 0x37E8800
	0x037E918C LDP X20, X19, [X31 + 0x20]
	0x037E9190 LDP X30, X21, [X31 + 0x10]
	0x037E9194 ADD X31, X31, 0x30
	0x037E9198 RET
	0x037E919C BL 0x1C16F20
	0x037E91A0 STR X30, [X31 - 0x30]!
	0x037E91A4 STP X22, X21, [X31 + 0x10]
	0x037E91A8 STP X20, X19, [X31 + 0x20]
	0x037E91AC ADRP X22, 0xBF8000
	0x037E91B0 ADRP X21, 0x90A000
	0x037E91B4 LDRB W8, [X22 + 0x343]
	0x037E91B8 LDR X21, [X21 + 0x598]
	0x037E91BC MOV X20, X1
	0x037E91C0 MOV X19, X0
	0x037E91C4 TBNZ X8, 0x0, 0x37E91DC
	0x037E91C8 ADRP X0, 0x90A000
	0x037E91CC LDR X0, [X0 + 0x598]
	0x037E91D0 BL 0x1C16CF4
	0x037E91D4 MOVZ W8, 0x1
	0x037E91D8 STRB W8, [X22 + 0x343]
	0x037E91DC LDR X0, [X21]
	0x037E91E0 LDR X21, [X19 + 0x70]
	0x037E91E4 LDR W8, [X0 + 0xE0]
	0x037E91E8 CBNZ W8, 0x37E91F0
	0x037E91EC BL 0x1C16DFC
	0x037E91F0 MOV X0, X20
	0x037E91F4 MOV X1, X21
	0x037E91F8 MOV X2, X31
	0x037E91FC BL 0x3C354F8
	0x037E9200 TBZ X0, 0x0, 0x37E93C0
	0x037E9204 LDRB W8, [X19 + 0xD4]
	0x037E9208 CBZ W8, 0x37E9218
	0x037E920C MOV X0, X19
	0x037E9210 MOV W1, W31
	0x037E9214 BL 0x37EBB88
	0x037E9218 STR X20, [X19 + 0x70]
	0x037E921C MOV X20, X19
	0x037E9220 LDR X1, [X20 + 0x78]!
	0x037E9224 MOV X0, X19
	0x037E9228 BL 0x37EBD54
	0x037E922C LDRB W3, [X19 + 0xD4]
	0x037E9230 LDR X4, [X19 + 0xD8]
	0x037E9234 MOV X2, X0
	0x037E9238 MOV X0, X19
	0x037E923C MOV X1, X20
	0x037E9240 BL 0x37E8800
	0x037E9244 MOV X20, X19
	0x037E9248 LDR X1, [X20 + 0x80]!
	0x037E924C MOV X0, X19
	0x037E9250 BL 0x37EBD54
	0x037E9254 LDRB W3, [X19 + 0xD4]
	0x037E9258 LDR X4, [X19 + 0xE0]
	0x037E925C MOV X2, X0
	0x037E9260 MOV X0, X19
	0x037E9264 MOV X1, X20
	0x037E9268 BL 0x37E8800
	0x037E926C MOV X20, X19
	0x037E9270 LDR X1, [X20 + 0x98]!
	0x037E9274 MOV X0, X19
	0x037E9278 BL 0x37EBD54
	0x037E927C LDRB W3, [X19 + 0xD4]
	0x037E9280 LDR X4, [X19 + 0xE8]
	0x037E9284 MOV X2, X0
	0x037E9288 MOV X0, X19
	0x037E928C MOV X1, X20
	0x037E9290 BL 0x37E8800
	0x037E9294 MOV X20, X19
	0x037E9298 LDR X1, [X20 + 0xA8]!
	0x037E929C MOV X0, X19
	0x037E92A0 BL 0x37EBD54
	0x037E92A4 LDRB W3, [X19 + 0xD4]
	0x037E92A8 LDR X4, [X19 + 0xF0]
	0x037E92AC MOV X2, X0
	0x037E92B0 MOV X0, X19
	0x037E92B4 MOV X1, X20
	0x037E92B8 BL 0x37E8800
	0x037E92BC MOV X20, X19
	0x037E92C0 LDR X1, [X20 + 0xA0]!
	0x037E92C4 MOV X0, X19
	0x037E92C8 BL 0x37EBD54
	0x037E92CC LDRB W3, [X19 + 0xD4]
	0x037E92D0 LDR X4, [X19 + 0xF8]
	0x037E92D4 MOV X2, X0
	0x037E92D8 MOV X0, X19
	0x037E92DC MOV X1, X20
	0x037E92E0 BL 0x37E8800
	0x037E92E4 MOV X20, X19
	0x037E92E8 LDR X1, [X20 + 0xB0]!
	0x037E92EC MOV X0, X19
	0x037E92F0 BL 0x37EBD54
	0x037E92F4 LDRB W3, [X19 + 0xD4]
	0x037E92F8 LDR X4, [X19 + 0x100]
	0x037E92FC MOV X2, X0
	0x037E9300 MOV X0, X19
	0x037E9304 MOV X1, X20
	0x037E9308 BL 0x37E8800
	0x037E930C MOV X20, X19
	0x037E9310 LDR X1, [X20 + 0x88]!
	0x037E9314 MOV X0, X19
	0x037E9318 BL 0x37EBD54
	0x037E931C LDRB W3, [X19 + 0xD4]
	0x037E9320 MOV X2, X0
	0x037E9324 MOV X0, X19
	0x037E9328 MOV X1, X20
	0x037E932C MOV X4, X31
	0x037E9330 BL 0x37E8800
	0x037E9334 MOV X20, X19
	0x037E9338 LDR X1, [X20 + 0x90]!
	0x037E933C MOV X0, X19
	0x037E9340 BL 0x37EBD54
	0x037E9344 LDRB W3, [X19 + 0xD4]
	0x037E9348 MOV X2, X0
	0x037E934C MOV X0, X19
	0x037E9350 MOV X1, X20
	0x037E9354 MOV X4, X31
	0x037E9358 BL 0x37E8800
	0x037E935C MOV X20, X19
	0x037E9360 LDR X1, [X20 + 0xC0]!
	0x037E9364 MOV X0, X19
	0x037E9368 BL 0x37EBD54
	0x037E936C LDRB W3, [X19 + 0xD4]
	0x037E9370 LDR X4, [X19 + 0x110]
	0x037E9374 MOV X2, X0
	0x037E9378 MOV X0, X19
	0x037E937C MOV X1, X20
	0x037E9380 BL 0x37E8800
	0x037E9384 MOV X20, X19
	0x037E9388 LDR X1, [X20 + 0xB8]!
	0x037E938C MOV X0, X19
	0x037E9390 BL 0x37EBD54
	0x037E9394 LDRB W3, [X19 + 0xD4]
	0x037E9398 LDR X4, [X19 + 0x108]
	0x037E939C MOV X2, X0
	0x037E93A0 MOV X0, X19
	0x037E93A4 MOV X1, X20
	0x037E93A8 BL 0x37E8800
	0x037E93AC MOV X0, X19
	0x037E93B0 LDP X20, X19, [X31 + 0x20]
	0x037E93B4 LDP X22, X21, [X31 + 0x10]
	0x037E93B8 LDR X30, [X31], #0x30
	0x037E93BC B 0x37E989C
	0x037E93C0 LDP X20, X19, [X31 + 0x20]
	0x037E93C4 LDP X22, X21, [X31 + 0x10]
	0x037E93C8 LDR X30, [X31], #0x30
	0x037E93CC RET
	0x037E93D0 STP X30, X19, [X31 - 0x10]!
	0x037E93D4 MOV X1, X31
	0x037E93D8 MOV X19, X0
	0x037E93DC BL 0x37E91A0
	0x037E93E0 LDRB W3, [X19 + 0xD4]
	0x037E93E4 ADD X1, X19, 0x90
	0x037E93E8 MOV X0, X19
	0x037E93EC MOV X2, X31
	0x037E93F0 MOV X4, X31
	0x037E93F4 BL 0x37E8800
	0x037E93F8 LDRB W3, [X19 + 0xD4]
	0x037E93FC ADD X1, X19, 0x88
	0x037E9400 MOV X0, X19
	0x037E9404 MOV X2, X31
	0x037E9408 MOV X4, X31
	0x037E940C BL 0x37E8800
	0x037E9410 LDRB W3, [X19 + 0xD4]
	0x037E9414 LDR X4, [X19 + 0xE0]
	0x037E9418 ADD X1, X19, 0x80
	0x037E941C MOV X0, X19
	0x037E9420 MOV X2, X31
	0x037E9424 BL 0x37E8800
	0x037E9428 LDRB W3, [X19 + 0xD4]
	0x037E942C LDR X4, [X19 + 0xE8]
	0x037E9430 ADD X1, X19, 0x98
	0x037E9434 MOV X0, X19
	0x037E9438 MOV X2, X31
	0x037E943C BL 0x37E8800
	0x037E9440 LDRB W3, [X19 + 0xD4]
	0x037E9444 LDR X4, [X19 + 0xF0]
	0x037E9448 ADD X1, X19, 0xA8
	0x037E944C MOV X0, X19
	0x037E9450 MOV X2, X31
	0x037E9454 BL 0x37E8800
	0x037E9458 LDRB W3, [X19 + 0xD4]
	0x037E945C LDR X4, [X19 + 0xF8]
	0x037E9460 ADD X1, X19, 0xA0
	0x037E9464 MOV X0, X19
	0x037E9468 MOV X2, X31
	0x037E946C BL 0x37E8800
	0x037E9470 LDRB W3, [X19 + 0xD4]
	0x037E9474 LDR X4, [X19 + 0xD8]

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0xBFA000
	013 Move W8, [X21+804]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {49}
	020 Move X0, 0x962000
	021 Move X0, [X0+1048]
	022 Call 0x1C17CF4
	023 Move X0, 0x962000
	024 Move X0, [X0+1056]
	025 Call 0x1C17CF4
	026 Move X0, 0x962000
	027 Move X0, [X0+1064]
	028 Call 0x1C17CF4
	029 Move X0, 0x962000
	030 Move X0, [X0+1072]
	031 Call 0x1C17CF4
	032 Move X0, 0x934000
	033 Move X0, [X0+2552]
	034 Call 0x1C17CF4
	035 Move X0, 0x962000
	036 Move X0, [X0+1080]
	037 Call 0x1C17CF4
	038 Move X0, 0x934000
	039 Move X0, [X0+3792]
	040 Call 0x1C17CF4
	041 Move X0, 0x934000
	042 Move X0, [X0+3784]
	043 Call 0x1C17CF4
	044 Move X0, 0x90C000
	045 Move X0, [X0+1432]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X21+804], W8
	049 Move X8, [X19+56]
	050 Compare X8, 0
	051 JumpIfEqual {465}
	052 Move X23, 0x90C000
	053 Move X23, [X23+1432]
	054 Move X21, [X8+64]
	055 Move X0, [X23]
	056 Move W9, [X0+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X21
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {115}
	068 Move X8, [X19]
	069 Move X0, X19
	070 Move X9, [X8+616]
	071 Move X1, [X8+624]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move X8, [X19+56]
	074 Compare X8, 0
	075 JumpIfEqual {465}
	076 Move X24, 0x934000
	077 Move X24, [X24+2552]
	078 Move X21, X0
	079 Move X22, [X8+64]
	080 Move X0, [X24]
	081 Move W9, [X0+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move X25, 0xBFA000
	086 Move W8, [X25+911]
	087 Compare W8, 0
	088 JumpIfNotEqual {94}
	089 Move X0, 0x934000
	090 Move X0, [X0+2552]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X25+911], W8
	094 Move X0, [X24]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {100}
	098 Call 0x1C17DFC
	099 Move X0, [X24]
	100 Move X9, 0x962000
	101 Move X8, [X0+184]
	102 Move X9, [X9+1072]
	103 Move X0, X22
	104 Move X1, X21
	105 Move X2, [X8+96]
	106 Move X3, [X9]
	107 Call 0x21DE088, X0, X1, X2
	108 Compare X21, 0
	109 JumpIfEqual {465}
	110 Move X8, [X21]
	111 Move X0, X21
	112 Move X9, [X8+408]
	113 Move X1, [X8+416]
	114 NotImplemented "Instruction BLR not yet implemented."
	115 Move W0, W31
	116 Move X8, [X19+56]
	117 Compare X8, 0
	118 JumpIfEqual {465}
	119 Move W8, [X8+56]
	120 Compare W8, 0
	121 JumpIfEqual {451}
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {127}
	126 Move [X19+912], W31
	127 Move X21, 0xBF2000
	128 Move W8, [X21+1450]
	129 Move S9, [X20]
	130 Move S8, [X20+4]
	131 Compare W8, 0
	132 JumpIfNotEqual {138}
	133 Move X0, 0x913000
	134 Move X0, [X0+1208]
	135 Call 0x1C17CF4
	136 Move W8, 1
	137 Move [X21+1450], W8
	138 Move X8, 0x912000
	139 Move X8, [X8+1208]
	140 Move X9, -47177728
	141 Move V1, [X9+576]
	142 NotImplemented "Instruction FABS not yet implemented."
	143 Move X8, [X8]
	144 Move S0, W31
	145 Move S4, 8
	146 NotImplemented "Instruction FMAXNM not yet implemented."
	147 Move X8, [X8+184]
	148 Multiply S5, S2, S1
	149 Move V3, [X8]
	150 Multiply S2, S3, S4
	151 NotImplemented "Instruction FCMP not yet implemented."
	152 NotImplemented "Instruction FCSEL not yet implemented."
	153 NotImplemented "Instruction FABD not yet implemented."
	154 NotImplemented "Instruction FCMP not yet implemented."
	155 NotImplemented "Instruction FABS not yet implemented."
	156 NotImplemented "Instruction FMAXNM not yet implemented."
	157 Multiply S1, S3, S1
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 NotImplemented "Instruction FCSEL not yet implemented."
	160 NotImplemented "Instruction FABD not yet implemented."
	161 NotImplemented "Instruction FCMP not yet implemented."
	162 Move X8, 0x933000
	163 Move X8, [X8+3784]
	164 Move X8, [X8]
	165 Move X8, [X8+184]
	166 Move X21, [X8]
	167 Compare X21, 0
	168 JumpIfEqual {465}
	169 Move X10, 0x933000
	170 Move X8, [X21]
	171 Move X10, [X10+3792]
	172 NotImplemented "Instruction LDRH not yet implemented."
	173 Move X1, [X10]
	174 Compare X9, 0
	175 JumpIfEqual {182}
	176 Move X10, [X8+176]
	177 Add X10, X10, 8
	178 NotImplemented "Instruction LDUR not yet implemented."
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Subtract X9, X9, 1
	181 Add X10, X10, 16
	182 Move W2, 21
	183 Move X0, X21
	184 Call 0x1C5D788
	185 Move W9, [X10]
	186 Add W9, W9, 21
	187 Add X8, X8, W9
	188 Add X0, X8, 312
	189 Move X8, [X0]
	190 Move X1, [X0+8]
	191 Move X0, X21
	192 NotImplemented "Instruction BLR not yet implemented."
	193 Move S9, [X20]
	194 Move S10, [X20+4]
	195 Move V8, V0
	196 Multiply S1, S9, S9
	197 Multiply S2, S10, S10
	198 Add S1, S1, S2
	199 NotImplemented "Instruction FCMP not yet implemented."
	200 NotImplemented "Instruction FABS not yet implemented."
	201 NotImplemented "Instruction FABS not yet implemented."
	202 Move W8, W31
	203 NotImplemented "Instruction FCMP not yet implemented."
	204 NotImplemented "Instruction FCMP not yet implemented."
	205 Move W22, 2
	206 Move W22, 4
	207 Move W8, 1
	208 Move W9, [X19+916]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move [X19+912], W31
	211 Move TEMP, X8
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfNotEqual {239}
	215 Move [X19+912], W31
	216 Move X8, [X19+56]
	217 Compare X8, 0
	218 JumpIfEqual {465}
	219 Move X0, [X23]
	220 Move X20, [X8+64]
	221 Move W9, [X0+224]
	222 Compare W9, 0
	223 JumpIfNotEqual {225}
	224 Call 0x1C17DFC
	225 Move X0, X20
	226 Move X1, X31
	227 Move X2, X31
	228 Call Object.op_Inequality, X0, X1
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfNotEqual {451}
	233 Move X0, [X19+136]
	234 Compare X0, 0
	235 JumpIfEqual {247}
	236 Move X1, X31
	237 Call InputActionReference.get_action, X0
	238 Move X21, X0
	239 Move W8, [X19+912]
	240 Compare W8, 0
	241 JumpIfEqual {373}
	242 Move V0, [X19+920]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move V1, [X19+88]
	245 NotImplemented "Instruction FCMP not yet implemented."
	246 Move W22, 1
	247 Move X21, X31
	248 Move X0, [X19+144]
	249 Compare X0, 0
	250 JumpIfEqual {254}
	251 Move X1, X31
	252 Call InputActionReference.get_action, X0
	253 Move X22, X0
	254 Move X22, X31
	255 Move X8, [X19]
	256 Move X0, X19
	257 Move X9, [X8+616]
	258 Move X1, [X8+624]
	259 NotImplemented "Instruction BLR not yet implemented."
	260 Move X20, X0
	261 Compare X22, 0
	262 JumpIfEqual {304}
	263 Move X0, X22
	264 Move X1, X31
	265 Call InputAction.WasPressedThisFrame, X0
	266 Move TEMP, X0
	267 And TEMP, TEMP, 1
	268 Compare TEMP, 1
	269 JumpIfNotEqual {304}
	270 Move X8, [X19+56]
	271 Compare X8, 0
	272 JumpIfEqual {465}
	273 Move X23, 0x933000
	274 Move X23, [X23+2552]
	275 Move X22, [X8+64]
	276 Move X0, [X23]
	277 Move W9, [X0+224]
	278 Compare W9, 0
	279 JumpIfNotEqual {281}
	280 Call 0x1C17DFC
	281 Move X24, 0xBF9000
	282 Move W8, [X24+913]
	283 Compare W8, 0
	284 JumpIfNotEqual {290}
	285 Move X0, 0x933000
	286 Move X0, [X0+2552]
	287 Call 0x1C17CF4
	288 Move W8, 1
	289 Move [X24+913], W8
	290 Move X0, [X23]
	291 Move W8, [X0+224]
	292 Compare W8, 0
	293 JumpIfNotEqual {296}
	294 Call 0x1C17DFC
	295 Move X0, [X23]
	296 Move X9, 0x961000
	297 Move X8, [X0+184]
	298 Move X9, [X9+1048]
	299 Move X0, X22
	300 Move X1, X20
	301 Move X2, [X8+136]
	302 Move X3, [X9]
	303 Call 0x21DE088, X0, X1, X2
	304 Compare X20, 0
	305 JumpIfEqual {465}
	306 Move X8, [X20]
	307 Move X0, X20
	308 Move X9, [X8+408]
	309 Move X1, [X8+416]
	310 NotImplemented "Instruction BLR not yet implemented."
	311 Compare X21, 0
	312 JumpIfEqual {451}
	313 Move TEMP, X0
	314 And TEMP, TEMP, 1
	315 Compare TEMP, 1
	316 JumpIfEqual {451}
	317 Move X0, X21
	318 Move X1, X31
	319 Call InputAction.WasPressedThisFrame, X0
	320 Move TEMP, X0
	321 And TEMP, TEMP, 1
	322 Compare TEMP, 1
	323 JumpIfNotEqual {451}
	324 Move X8, [X19+56]
	325 Compare X8, 0
	326 JumpIfEqual {465}
	327 Move X21, 0x933000
	328 Move X21, [X21+2552]
	329 Move X19, [X8+64]
	330 Move X0, [X21]
	331 Move W9, [X0+224]
	332 Compare W9, 0
	333 JumpIfNotEqual {335}
	334 Call 0x1C17DFC
	335 Move X22, 0xBF9000
	336 Move W8, [X22+914]
	337 Compare W8, 0
	338 JumpIfNotEqual {344}
	339 Move X0, 0x933000
	340 Move X0, [X0+2552]
	341 Call 0x1C17CF4
	342 Move W8, 1
	343 Move [X22+914], W8
	344 Move X0, [X21]
	345 Move W8, [X0+224]
	346 Compare W8, 0
	347 JumpIfNotEqual {350}
	348 Call 0x1C17DFC
	349 Move X0, [X21]
	350 Move X9, 0x961000
	351 Move X8, [X0+184]
	352 Move X9, [X9+1064]
	353 Move X0, X19
	354 Move X1, X20
	355 Move X2, [X8+128]
	356 Move X3, [X9]
	357 Move X20, [X31+80]
	358 Move X19, [X31+88]
	359 Move X22, [X31+64]
	360 Move X21, [X31+72]
	361 Move X24, [X31+48]
	362 Move X23, [X31+56]
	363 Move X30, [X31+32]
	364 Move X25, [X31+40]
	365 Move D9, [X31+16]
	366 Move D8, [X31+24]
	367 Move V10, [X31+96]
	368 Call 0x21DE088, X0, X1, X2
	369 Return 
	370 Move V1, [X19+92]
	371 Add S0, S0, S1
	372 NotImplemented "Instruction FCMP not yet implemented."
	373 Move X20, [X19+928]
	374 Compare X20, 0
	375 JumpIfNotEqual {388}
	376 Move X8, 0x961000
	377 Move X21, [X19+56]
	378 Move X8, [X8+1080]
	379 Move X0, [X8]
	380 Call 0x1C17F10
	381 Move X1, X21
	382 Move X2, X31
	383 Move X20, X0
	384 Call AxisEventData..ctor, X0, X1
	385 Move [X19+928], X20
	386 Compare X20, 0
	387 JumpIfEqual {465}
	388 Move X8, [X20]
	389 Move X0, X20
	390 Move X9, [X8+376]
	391 Move X1, [X8+384]
	392 NotImplemented "Instruction BLR not yet implemented."
	393 Move X0, X19
	394 Move X1, X20
	395 Move [X20+32], S9
	396 Move [X20+40], S10
	397 Move [X20+40], W22
	398 Call InputSystemUIInputModule.IsMoveAllowed, X0, X1
	399 Move TEMP, X0
	400 And TEMP, TEMP, 1
	401 Compare TEMP, 1
	402 JumpIfNotEqual {216}
	403 Move X8, [X19+56]
	404 Compare X8, 0
	405 JumpIfEqual {465}
	406 Move X24, 0x933000
	407 Move X24, [X24+2552]
	408 Move X21, [X8+64]
	409 Move X0, [X24]
	410 Move W9, [X0+224]
	411 Compare W9, 0
	412 JumpIfNotEqual {414}
	413 Call 0x1C17DFC
	414 Move X25, 0xBF9000
	415 Move W8, [X25+912]
	416 Compare W8, 0
	417 JumpIfNotEqual {423}
	418 Move X0, 0x933000
	419 Move X0, [X0+2552]
	420 Call 0x1C17CF4
	421 Move W8, 1
	422 Move [X25+912], W8
	423 Move X0, [X24]
	424 Move W8, [X0+224]
	425 Compare W8, 0
	426 JumpIfNotEqual {429}
	427 Call 0x1C17DFC
	428 Move X0, [X24]
	429 Move X9, 0x961000
	430 Move X8, [X0+184]
	431 Move X9, [X9+1056]
	432 Move X0, X21
	433 Move X1, X20
	434 Move X2, [X8+120]
	435 Move X3, [X9]
	436 Call 0x21DE088, X0, X1, X2
	437 Move X8, [X20]
	438 Move X0, X20
	439 Move X9, [X8+408]
	440 Move X1, [X8+416]
	441 NotImplemented "Instruction BLR not yet implemented."
	442 Move W8, [X19+912]
	443 Move [X19+920], S8
	444 Move [X19+916], W22
	445 Add W8, W8, 1
	446 Move [X19+912], W8
	447 Move TEMP, X0
	448 And TEMP, TEMP, 1
	449 Compare TEMP, 1
	450 JumpIfNotEqual {216}
	451 Move X20, [X31+80]
	452 Move X19, [X31+88]
	453 Move X22, [X31+64]
	454 Move X21, [X31+72]
	455 Move X24, [X31+48]
	456 Move X23, [X31+56]
	457 Move X30, [X31+32]
	458 Move X25, [X31+40]
	459 Move D9, [X31+16]
	460 Move D8, [X31+24]
	461 Move V10, [X31+96]
	462 Return 
	463 Move W22, W31
	464 Move W22, 3
	465 Call 0x1C17F20

Method: System.Boolean IsMoveAllowed(UnityEngine.EventSystems.AxisEventData eventData)

Disassembly:
	0x037E9478 ADD X1, X19, 0x78
	0x037E947C MOV X0, X19
	0x037E9480 MOV X2, X31
	0x037E9484 BL 0x37E8800
	0x037E9488 LDRB W3, [X19 + 0xD4]
	0x037E948C LDR X4, [X19 + 0x100]
	0x037E9490 ADD X1, X19, 0xB0
	0x037E9494 MOV X0, X19
	0x037E9498 MOV X2, X31
	0x037E949C BL 0x37E8800
	0x037E94A0 LDRB W3, [X19 + 0xD4]
	0x037E94A4 LDR X4, [X19 + 0x110]
	0x037E94A8 ADD X1, X19, 0xC0
	0x037E94AC MOV X0, X19
	0x037E94B0 MOV X2, X31
	0x037E94B4 BL 0x37E8800
	0x037E94B8 LDRB W3, [X19 + 0xD4]
	0x037E94BC LDR X4, [X19 + 0x108]
	0x037E94C0 ADD X1, X19, 0xB8
	0x037E94C4 MOV X0, X19
	0x037E94C8 MOV X2, X31
	0x037E94CC LDP X30, X19, [X31], #0x10
	0x037E94D0 B 0x37E8800
	0x037E94D4 STP X30, X19, [X31 - 0x10]!
	0x037E94D8 ADRP X0, 0x90A000
	0x037E94DC LDR X0, [X0 + 0x5B0]
	0x037E94E0 BL 0x1C16D08
	0x037E94E4 BL 0x1C16F10
	0x037E94E8 MOV X1, X31
	0x037E94EC MOV X19, X0
	0x037E94F0 BL 0x337DEC0
	0x037E94F4 ADRP X0, 0x960000
	0x037E94F8 LDR X0, [X0 + 0x470]
	0x037E94FC BL 0x1C16D08
	0x037E9500 MOV X1, X0
	0x037E9504 MOV X0, X19
	0x037E9508 BL 0x1C16DEC
	0x037E950C STP X30, X19, [X31 - 0x10]!
	0x037E9510 ADRP X0, 0x90A000
	0x037E9514 LDR X0, [X0 + 0x5B0]
	0x037E9518 BL 0x1C16D08
	0x037E951C BL 0x1C16F10
	0x037E9520 MOV X1, X31
	0x037E9524 MOV X19, X0
	0x037E9528 BL 0x337DEC0
	0x037E952C ADRP X0, 0x960000
	0x037E9530 LDR X0, [X0 + 0x478]
	0x037E9534 BL 0x1C16D08
	0x037E9538 MOV X1, X0
	0x037E953C MOV X0, X19
	0x037E9540 BL 0x1C16DEC
	0x037E9544 STR X30, [X31 - 0x20]!
	0x037E9548 STP X20, X19, [X31 + 0x10]
	0x037E954C MOV X1, X31
	0x037E9550 MOV X19, X0
	0x037E9554 BL 0x3E5AD80
	0x037E9558 ADRP X20, 0xBF0000
	0x037E955C LDRB W8, [X20 + 0x78F]
	0x037E9560 CBNZ W8, 0x37E9578
	0x037E9564 ADRP X0, 0x912000
	0x037E9568 LDR X0, [X0 + 0xF08]
	0x037E956C BL 0x1C16CF4
	0x037E9570 MOVZ W8, 0x1
	0x037E9574 STRB W8, [X20 + 0x78F]
	0x037E9578 ADRP X8, 0x912000
	0x037E957C LDR X8, [X8 + 0xF08]
	0x037E9580 LDR X8, [X8]
	0x037E9584 LDR X8, [X8 + 0xB8]
	0x037E9588 LDR V0, [X8]
	0x037E958C STR D0, [X19 + 0x388]
	0x037E9590 LDP X20, X19, [X31 + 0x10]
	0x037E9594 LDR X30, [X31], #0x20
	0x037E9598 RET
	0x037E959C STR X30, [X31 - 0x20]!
	0x037E95A0 STP X20, X19, [X31 + 0x10]
	0x037E95A4 ADRP X20, 0xBF0000
	0x037E95A8 LDRB W8, [X20 + 0x78F]
	0x037E95AC MOV X19, X0
	0x037E95B0 CBNZ W8, 0x37E95C8
	0x037E95B4 ADRP X0, 0x912000
	0x037E95B8 LDR X0, [X0 + 0xF08]
	0x037E95BC BL 0x1C16CF4
	0x037E95C0 MOVZ W8, 0x1
	0x037E95C4 STRB W8, [X20 + 0x78F]
	0x037E95C8 ADRP X8, 0x912000
	0x037E95CC LDR X8, [X8 + 0xF08]
	0x037E95D0 LDR X8, [X8]
	0x037E95D4 LDR X8, [X8 + 0xB8]
	0x037E95D8 LDR V0, [X8]
	0x037E95DC STR D0, [X19]
	0x037E95E0 LDP X20, X19, [X31 + 0x10]
	0x037E95E4 LDR X30, [X31], #0x20
	0x037E95E8 RET
	0x037E95EC STP X30, X19, [X31 - 0x10]!
	0x037E95F0 MOV X1, X31
	0x037E95F4 MOV X19, X0
	0x037E95F8 BL 0x3E5AD84
	0x037E95FC LDRB W8, [X19 + 0xD4]
	0x037E9600 CBZ W8, 0x37E9614
	0x037E9604 MOV X0, X19
	0x037E9608 MOV W1, W31
	0x037E960C LDP X30, X19, [X31], #0x10
	0x037E9610 B 0x37EBB88
	0x037E9614 LDP X30, X19, [X31], #0x10
	0x037E9618 RET
	0x037E961C LDRB W8, [X0 + 0xD4]
	0x037E9620 CBZ W8, 0x37E962C
	0x037E9624 MOV W1, W31
	0x037E9628 B 0x37EBB88
	0x037E962C RET
	0x037E9630 STR X30, [X31 - 0x30]!
	0x037E9634 STP X22, X21, [X31 + 0x10]
	0x037E9638 STP X20, X19, [X31 + 0x20]
	0x037E963C ADRP X20, 0xBF8000
	0x037E9640 LDRB W8, [X20 + 0x32A]
	0x037E9644 MOV X19, X0
	0x037E9648 TBNZ X8, 0x0, 0x37E9684
	0x037E964C ADRP X0, 0x934000
	0x037E9650 LDR X0, [X0 + 0xE48]
	0x037E9654 BL 0x1C16CF4
	0x037E9658 ADRP X0, 0x960000
	0x037E965C LDR X0, [X0 + 0x480]
	0x037E9660 BL 0x1C16CF4
	0x037E9664 ADRP X0, 0x95C000
	0x037E9668 LDR X0, [X0 + 0x2D8]
	0x037E966C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBF9000
	007 Move X22, 0x90B000
	008 Move W8, [X21+805]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x961000
	017 Move X0, [X0+1088]
	018 Call 0x1C17CF4
	019 Move X0, 0x90B000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+805], W8
	024 Move X0, [X22]
	025 Move X21, [X19+936]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {127}
	038 Move X8, [X19+56]
	039 Compare X8, 0
	040 JumpIfEqual {158}
	041 Move X0, [X22]
	042 Move X21, [X8+64]
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {127}
	055 Move X8, [X19+56]
	056 Compare X8, 0
	057 JumpIfEqual {158}
	058 Move X0, [X8+64]
	059 Compare X0, 0
	060 JumpIfEqual {158}
	061 Move X8, 0x961000
	062 Move X8, [X8+1088]
	063 Move X1, [X8]
	064 Call 0x21E62E4, X0
	065 Move X8, [X22]
	066 Move X21, X0
	067 Move W9, [X8+224]
	068 Compare W9, 0
	069 JumpIfNotEqual {72}
	070 Move X0, X8
	071 Call 0x1C17DFC
	072 Move X0, X21
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Equality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {127}
	080 Compare X20, 0
	081 JumpIfEqual {158}
	082 Move W8, [X20+40]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X9, -46469120
	085 Add X9, X9, 2461
	086 NotImplemented "Instruction ADR not yet implemented."
	087 Move W11, [X9]
	088 Add X10, X10, X11
	089 CallNoReturn X10
	090 Compare X21, 0
	091 JumpIfEqual {158}
	092 Move X8, [X21]
	093 Move X9, [X8+744]
	094 Move X1, [X8+752]
	095 Move X20, X31
	096 Compare X21, 0
	097 JumpIfEqual {158}
	098 Move X8, [X21]
	099 Move X9, [X8+776]
	100 Move X1, [X8+784]
	101 Compare X21, 0
	102 JumpIfEqual {158}
	103 Move X8, [X21]
	104 Move X9, [X8+760]
	105 Move X1, [X8+768]
	106 Compare X21, 0
	107 JumpIfEqual {158}
	108 Move X8, [X21]
	109 Move X9, [X8+792]
	110 Move X1, [X8+800]
	111 Move X0, X21
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Move X20, X0
	114 Move X0, [X22]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X0, X20
	120 Move X1, X31
	121 Move X2, X31
	122 Call Object.op_Equality, X0, X1
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {134}
	127 Move X20, [X31+32]
	128 Move X19, [X31+40]
	129 Move X22, [X31+16]
	130 Move X21, [X31+24]
	131 Move W0, 1
	132 Move X30, [X31+48]
	133 Return X0
	134 Compare X20, 0
	135 JumpIfEqual {158}
	136 Move X0, X20
	137 Move X1, X31
	138 Call Component.get_transform, X0
	139 Move X8, [X19+936]
	140 Compare X8, 0
	141 JumpIfEqual {158}
	142 Move X19, X0
	143 Move X0, X8
	144 Move X1, X31
	145 Call GameObject.get_transform, X0
	146 Compare X19, 0
	147 JumpIfEqual {158}
	148 Move X1, X0
	149 Move X0, X19
	150 Move X20, [X31+32]
	151 Move X19, [X31+40]
	152 Move X22, [X31+16]
	153 Move X21, [X31+24]
	154 Move X2, X31
	155 Move X30, [X31+48]
	156 Call Transform.IsChildOf, X0, X1
	157 Return X0
	158 Call 0x1C17F20

Method: System.Single get_moveRepeatDelay()

Disassembly:
	0x037E9670 ADRP X0, 0x960000
	0x037E9674 LDR X0, [X0 + 0x488]

ISIL:
	001 Move V0, [X0+88]
	002 Return V0

Method: System.Void set_moveRepeatDelay(System.Single value)

Disassembly:
	0x037E9678 BL 0x1C16CF4
	0x037E967C MOVZ W8, 0x1

ISIL:
	001 Move [X0+88], S0
	002 Return 

Method: System.Single get_moveRepeatRate()

Disassembly:
	0x037E9680 STRB W8, [X20 + 0x32A]
	0x037E9684 ADRP X22, 0x95C000

ISIL:
	001 Move V0, [X0+92]
	002 Return V0

Method: System.Void set_moveRepeatRate(System.Single value)

Disassembly:
	0x037E9688 ADRP X21, 0x960000
	0x037E968C LDR X22, [X22 + 0x2D8]

ISIL:
	001 Move [X0+92], S0
	002 Return 

Method: System.Boolean get_explictlyIgnoreFocus()

Disassembly:
	0x037E9690 LDR X21, [X21 + 0x480]
	0x037E9694 MOV X0, X19
	0x037E9698 MOV X1, X31
	0x037E969C BL 0x3E54188
	0x037E96A0 LDR X20, [X19 + 0x118]
	0x037E96A4 CBNZ X20, 0x37E96D8
	0x037E96A8 ADRP X8, 0x934000
	0x037E96AC LDR X8, [X8 + 0xE48]
	0x037E96B0 LDR X0, [X8]
	0x037E96B4 BL 0x1C16F10
	0x037E96B8 ADRP X8, 0x960000
	0x037E96BC LDR X8, [X8 + 0x488]
	0x037E96C0 MOV X1, X19
	0x037E96C4 MOV X3, X31
	0x037E96C8 MOV X20, X0
	0x037E96CC LDR X2, [X8]
	0x037E96D0 BL 0x2A6B948
	0x037E96D4 STR X20, [X19 + 0x118]
	0x037E96D8 LDR X8, [X22]
	0x037E96DC LDR X2, [X21]
	0x037E96E0 MOV X1, X20
	0x037E96E4 LDR X8, [X8 + 0xB8]
	0x037E96E8 ADD X0, X8, 0x68
	0x037E96EC BL 0x28F14E0
	0x037E96F0 MOV X0, X19
	0x037E96F4 BL 0x37E9728

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBF9000
	005 Move X20, 0x933000
	006 Move W8, [X19+806]
	007 Move X20, [X20+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x933000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+806], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X0, X31
	023 Call InputSystem.get_settings
	024 Compare X0, 0
	025 JumpIfEqual {33}
	026 Move W8, [X0+48]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Move X30, [X31+32]
	032 Return X0
	033 Call 0x1C17F20

Method: System.Boolean get_shouldIgnoreFocus()

Disassembly:
	0x037E96F8 TBZ X0, 0x0, 0x37E9704
	0x037E96FC MOV X0, X19
	0x037E9700 BL 0x37E8ED8
	0x037E9704 MOV X0, X19
	0x037E9708 BL 0x37E9858
	0x037E970C MOV X0, X19
	0x037E9710 BL 0x37E989C
	0x037E9714 MOV X0, X19
	0x037E9718 LDP X20, X19, [X31 + 0x20]
	0x037E971C LDP X22, X21, [X31 + 0x10]
	0x037E9720 LDR X30, [X31], #0x30
	0x037E9724 B 0x37E9B10
	0x037E9728 STP X30, X21, [X31 - 0x20]!
	0x037E972C STP X20, X19, [X31 + 0x10]
	0x037E9730 ADRP X21, 0xBF8000
	0x037E9734 ADRP X20, 0x90A000
	0x037E9738 LDRB W8, [X21 + 0x32C]
	0x037E973C LDR X20, [X20 + 0x598]
	0x037E9740 MOV X19, X0
	0x037E9744 TBNZ X8, 0x0, 0x37E975C
	0x037E9748 ADRP X0, 0x90A000
	0x037E974C LDR X0, [X0 + 0x598]
	0x037E9750 BL 0x1C16CF4
	0x037E9754 MOVZ W8, 0x1
	0x037E9758 STRB W8, [X21 + 0x32C]
	0x037E975C LDR X0, [X20]
	0x037E9760 LDR X20, [X19 + 0x70]
	0x037E9764 LDR W8, [X0 + 0xE0]
	0x037E9768 CBNZ W8, 0x37E9770
	0x037E976C BL 0x1C16DFC
	0x037E9770 MOV X0, X20
	0x037E9774 MOV X1, X31
	0x037E9778 MOV X2, X31
	0x037E977C BL 0x3C354F8
	0x037E9780 TBNZ X0, 0x0, 0x37E9824
	0x037E9784 LDR X0, [X19 + 0x78]
	0x037E9788 CBZ X0, 0x37E9798
	0x037E978C MOV X1, X31
	0x037E9790 BL 0x37451B4
	0x037E9794 CBNZ X0, 0x37E9824
	0x037E9798 LDR X0, [X19 + 0x98]
	0x037E979C CBZ X0, 0x37E97AC
	0x037E97A0 MOV X1, X31
	0x037E97A4 BL 0x37451B4
	0x037E97A8 CBNZ X0, 0x37E9824
	0x037E97AC LDR X0, [X19 + 0xA8]
	0x037E97B0 CBZ X0, 0x37E97C0
	0x037E97B4 MOV X1, X31
	0x037E97B8 BL 0x37451B4
	0x037E97BC CBNZ X0, 0x37E9824

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0xBF9000
	004 Move W8, [X19+807]
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {17}
	009 Move X0, 0x933000
	010 Move X0, [X0+3792]
	011 Call 0x1C17CF4
	012 Move X0, 0x933000
	013 Move X0, [X0+3784]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+807], W8
	017 Call InputSystemUIInputModule.get_explictlyIgnoreFocus, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {26}
	022 Move W0, 1
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return X0
	026 Move X8, 0x933000
	027 Move X8, [X8+3784]
	028 Move X8, [X8]
	029 Move X8, [X8+184]
	030 Move X19, [X8]
	031 Compare X19, 0
	032 JumpIfEqual {59}
	033 Move X10, 0x933000
	034 Move X8, [X19]
	035 Move X10, [X10+3792]
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move X1, [X10]
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 23
	047 Move X0, X19
	048 Call 0x1C5D788
	049 Move W9, [X10]
	050 Add W9, W9, 23
	051 Add X8, X8, W9
	052 Add X0, X8, 312
	053 Move X2, [X0]
	054 Move X1, [X0+8]
	055 Move X0, X19
	056 Move X30, [X31+16]
	057 Move X19, [X31+24]
	058 CallNoReturn X2
	059 Call 0x1C17F20

Method: System.Single get_repeatRate()

Disassembly:
	0x037E97C0 LDR X0, [X19 + 0xA0]
	0x037E97C4 CBZ X0, 0x37E97D4

ISIL:
	001 Move V0, [X0+92]
	002 Return V0

Method: System.Void set_repeatRate(System.Single value)

Disassembly:
	0x037E97C8 MOV X1, X31
	0x037E97CC BL 0x37451B4

ISIL:
	001 Move [X0+92], S0
	002 Return 

Method: System.Single get_repeatDelay()

Disassembly:
	0x037E97D0 CBNZ X0, 0x37E9824
	0x037E97D4 LDR X0, [X19 + 0x88]

ISIL:
	001 Move V0, [X0+88]
	002 Return V0

Method: System.Void set_repeatDelay(System.Single value)

Disassembly:
	0x037E97D8 CBZ X0, 0x37E97E8
	0x037E97DC MOV X1, X31

ISIL:
	001 Move [X0+88], S0
	002 Return 

Method: UnityEngine.Transform get_xrTrackingOrigin()

Disassembly:
	0x037E97E0 BL 0x37451B4
	0x037E97E4 CBNZ X0, 0x37E9824

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_xrTrackingOrigin(UnityEngine.Transform value)

Disassembly:
	0x037E97E8 LDR X0, [X19 + 0x90]
	0x037E97EC CBZ X0, 0x37E97FC

ISIL:
	001 Move [X0+104], X1
	002 Return 

Method: System.Single get_trackedDeviceDragThresholdMultiplier()

Disassembly:
	0x037E97F0 MOV X1, X31
	0x037E97F4 BL 0x37451B4

ISIL:
	001 Move V0, [X0+96]
	002 Return V0

Method: System.Void set_trackedDeviceDragThresholdMultiplier(System.Single value)

Disassembly:
	0x037E97F8 CBNZ X0, 0x37E9824
	0x037E97FC LDR X0, [X19 + 0xB0]

ISIL:
	001 Move [X0+96], S0
	002 Return 

Method: System.Void SwapAction(ref UnityEngine.InputSystem.InputActionReference property, UnityEngine.InputSystem.InputActionReference newValue, System.Boolean actionsHooked, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> actionCallback)

Disassembly:
	0x037E9800 CBZ X0, 0x37E9810
	0x037E9804 MOV X1, X31
	0x037E9808 BL 0x37451B4
	0x037E980C CBNZ X0, 0x37E9824
	0x037E9810 LDR X0, [X19 + 0xC0]
	0x037E9814 CBZ X0, 0x37E9834
	0x037E9818 MOV X1, X31
	0x037E981C BL 0x37451B4
	0x037E9820 CBZ X0, 0x37E9834
	0x037E9824 MOV W0, W31
	0x037E9828 LDP X20, X19, [X31 + 0x10]
	0x037E982C LDP X30, X21, [X31], #0x20
	0x037E9830 RET
	0x037E9834 LDR X0, [X19 + 0xB8]
	0x037E9838 CBZ X0, 0x37E9850
	0x037E983C MOV X1, X31
	0x037E9840 BL 0x37451B4
	0x037E9844 CMP X0, 0x0
	0x037E9848 CSET W0, EQ
	0x037E984C B 0x37E9828
	0x037E9850 MOVZ W0, 0x1
	0x037E9854 B 0x37E9828
	0x037E9858 STR X30, [X31 - 0x20]!
	0x037E985C STP X20, X19, [X31 + 0x10]
	0x037E9860 LDR W20, [X0 + 0x158]
	0x037E9864 MOV X19, X0
	0x037E9868 CMP W20, 0x1
	0x037E986C B.LT 0x37E9884
	0x037E9870 MOV X0, X19
	0x037E9874 MOV W1, W31
	0x037E9878 BL 0x37E9CB4
	0x037E987C SUBS W20, W20, 0x1
	0x037E9880 B.NE 0x37E9870
	0x037E9884 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x037E9888 STR D0, [X19 + 0x120]
	0x037E988C STR W31, [X19 + 0x128]
	0x037E9890 LDP X20, X19, [X31 + 0x10]
	0x037E9894 LDR X30, [X31], #0x20
	0x037E9898 RET
	0x037E989C STR X30, [X31 - 0x20]!
	0x037E98A0 STP X20, X19, [X31 + 0x10]
	0x037E98A4 ADRP X20, 0xBF8000
	0x037E98A8 LDRB W8, [X20 + 0x340]
	0x037E98AC MOV X19, X0
	0x037E98B0 TBNZ X8, 0x0, 0x37E9928
	0x037E98B4 ADRP X0, 0x90E000
	0x037E98B8 LDR X0, [X0 + 0x3D8]
	0x037E98BC BL 0x1C16CF4
	0x037E98C0 ADRP X0, 0x960000
	0x037E98C4 LDR X0, [X0 + 0x490]
	0x037E98C8 BL 0x1C16CF4
	0x037E98CC ADRP X0, 0x960000
	0x037E98D0 LDR X0, [X0 + 0x498]
	0x037E98D4 BL 0x1C16CF4
	0x037E98D8 ADRP X0, 0x960000
	0x037E98DC LDR X0, [X0 + 0x4A0]
	0x037E98E0 BL 0x1C16CF4
	0x037E98E4 ADRP X0, 0x960000
	0x037E98E8 LDR X0, [X0 + 0x4A8]
	0x037E98EC BL 0x1C16CF4
	0x037E98F0 ADRP X0, 0x960000
	0x037E98F4 LDR X0, [X0 + 0x4B0]
	0x037E98F8 BL 0x1C16CF4
	0x037E98FC ADRP X0, 0x960000
	0x037E9900 LDR X0, [X0 + 0x4B8]
	0x037E9904 BL 0x1C16CF4
	0x037E9908 ADRP X0, 0x960000
	0x037E990C LDR X0, [X0 + 0x4C0]
	0x037E9910 BL 0x1C16CF4
	0x037E9914 ADRP X0, 0x960000
	0x037E9918 LDR X0, [X0 + 0x4C8]
	0x037E991C BL 0x1C16CF4
	0x037E9920 MOVZ W8, 0x1
	0x037E9924 STRB W8, [X20 + 0x340]
	0x037E9928 LDRB W8, [X19 + 0xD4]
	0x037E992C CBZ W8, 0x37E993C
	0x037E9930 LDP X20, X19, [X31 + 0x10]
	0x037E9934 LDR X30, [X31], #0x20
	0x037E9938 RET
	0x037E993C LDR X8, [X19 + 0xD8]
	0x037E9940 CBNZ X8, 0x37E9974
	0x037E9944 ADRP X8, 0x90E000
	0x037E9948 LDR X8, [X8 + 0x3D8]
	0x037E994C LDR X0, [X8]
	0x037E9950 BL 0x1C16F10
	0x037E9954 ADRP X8, 0x960000
	0x037E9958 LDR X8, [X8 + 0x4A8]
	0x037E995C MOV X1, X19
	0x037E9960 MOV X3, X31
	0x037E9964 MOV X20, X0
	0x037E9968 LDR X2, [X8]
	0x037E996C BL 0x2A719B8
	0x037E9970 STR X20, [X19 + 0xD8]
	0x037E9974 LDR X8, [X19 + 0xE8]
	0x037E9978 CBNZ X8, 0x37E99AC
	0x037E997C ADRP X8, 0x90E000
	0x037E9980 LDR X8, [X8 + 0x3D8]
	0x037E9984 LDR X0, [X8]
	0x037E9988 BL 0x1C16F10
	0x037E998C ADRP X8, 0x960000
	0x037E9990 LDR X8, [X8 + 0x490]
	0x037E9994 MOV X1, X19
	0x037E9998 MOV X3, X31
	0x037E999C MOV X20, X0
	0x037E99A0 LDR X2, [X8]
	0x037E99A4 BL 0x2A719B8
	0x037E99A8 STR X20, [X19 + 0xE8]
	0x037E99AC LDR X8, [X19 + 0xF0]
	0x037E99B0 CBNZ X8, 0x37E99E4
	0x037E99B4 ADRP X8, 0x90E000
	0x037E99B8 LDR X8, [X8 + 0x3D8]
	0x037E99BC LDR X0, [X8]
	0x037E99C0 BL 0x1C16F10
	0x037E99C4 ADRP X8, 0x960000
	0x037E99C8 LDR X8, [X8 + 0x4B0]
	0x037E99CC MOV X1, X19
	0x037E99D0 MOV X3, X31
	0x037E99D4 MOV X20, X0
	0x037E99D8 LDR X2, [X8]
	0x037E99DC BL 0x2A719B8
	0x037E99E0 STR X20, [X19 + 0xF0]
	0x037E99E4 LDR X8, [X19 + 0xF8]
	0x037E99E8 CBNZ X8, 0x37E9A1C
	0x037E99EC ADRP X8, 0x90E000
	0x037E99F0 LDR X8, [X8 + 0x3D8]
	0x037E99F4 LDR X0, [X8]
	0x037E99F8 BL 0x1C16F10
	0x037E99FC ADRP X8, 0x960000
	0x037E9A00 LDR X8, [X8 + 0x498]
	0x037E9A04 MOV X1, X19
	0x037E9A08 MOV X3, X31
	0x037E9A0C MOV X20, X0
	0x037E9A10 LDR X2, [X8]
	0x037E9A14 BL 0x2A719B8
	0x037E9A18 STR X20, [X19 + 0xF8]
	0x037E9A1C LDR X8, [X19 + 0x100]
	0x037E9A20 CBNZ X8, 0x37E9A54
	0x037E9A24 ADRP X8, 0x90E000
	0x037E9A28 LDR X8, [X8 + 0x3D8]
	0x037E9A2C LDR X0, [X8]
	0x037E9A30 BL 0x1C16F10
	0x037E9A34 ADRP X8, 0x960000
	0x037E9A38 LDR X8, [X8 + 0x4B8]
	0x037E9A3C MOV X1, X19
	0x037E9A40 MOV X3, X31
	0x037E9A44 MOV X20, X0
	0x037E9A48 LDR X2, [X8]
	0x037E9A4C BL 0x2A719B8
	0x037E9A50 STR X20, [X19 + 0x100]
	0x037E9A54 LDR X8, [X19 + 0xE0]
	0x037E9A58 CBNZ X8, 0x37E9A8C
	0x037E9A5C ADRP X8, 0x90E000
	0x037E9A60 LDR X8, [X8 + 0x3D8]
	0x037E9A64 LDR X0, [X8]
	0x037E9A68 BL 0x1C16F10
	0x037E9A6C ADRP X8, 0x960000
	0x037E9A70 LDR X8, [X8 + 0x4A0]
	0x037E9A74 MOV X1, X19
	0x037E9A78 MOV X3, X31
	0x037E9A7C MOV X20, X0
	0x037E9A80 LDR X2, [X8]
	0x037E9A84 BL 0x2A719B8
	0x037E9A88 STR X20, [X19 + 0xE0]
	0x037E9A8C LDR X8, [X19 + 0x110]
	0x037E9A90 CBNZ X8, 0x37E9AC4
	0x037E9A94 ADRP X8, 0x90E000
	0x037E9A98 LDR X8, [X8 + 0x3D8]
	0x037E9A9C LDR X0, [X8]
	0x037E9AA0 BL 0x1C16F10
	0x037E9AA4 ADRP X8, 0x960000
	0x037E9AA8 LDR X8, [X8 + 0x4C0]
	0x037E9AAC MOV X1, X19
	0x037E9AB0 MOV X3, X31
	0x037E9AB4 MOV X20, X0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0xBF9000
	011 Move X25, 0x90B000
	012 Move W8, [X24+808]
	013 Move X25, [X25+1432]
	014 Move X22, X4
	015 Move W23, W3
	016 Move X20, X2
	017 Move X19, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x90B000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+808], W8
	028 Move X0, [X25]
	029 Move X24, [X19]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X24
	035 Move X1, X20
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {52}
	042 Move X20, [X31+64]
	043 Move X19, [X31+72]
	044 Move X22, [X31+48]
	045 Move X21, [X31+56]
	046 Move X24, [X31+32]
	047 Move X23, [X31+40]
	048 Move X26, [X31+16]
	049 Move X25, [X31+24]
	050 Move X30, [X31+80]
	051 Return 
	052 Move X0, [X25]
	053 Move X24, [X19]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X24
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {91}
	066 Move X0, [X25]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X20
	072 Move X1, X31
	073 Move X2, X31
	074 Call Object.op_Inequality, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {91}
	079 Move X0, [X19]
	080 Compare X0, 0
	081 JumpIfEqual {220}
	082 Move X1, X31
	083 Call InputActionReference.get_action, X0
	084 Compare X20, 0
	085 JumpIfEqual {220}
	086 Move X24, X0
	087 Move X0, X20
	088 Move X1, X31
	089 Call InputActionReference.get_action, X0
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X0, [X25]
	092 Move X24, [X19]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X24
	098 Move X1, X31
	099 Move X2, X31
	100 Call Object.op_Inequality, X0, X1
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CSET not yet implemented."
	103 And W31, W0, 1
	104 NotImplemented "Instruction CSEL not yet implemented."
	105 And W24, W23, 1
	106 And W31, W8, W24
	107 Move X0, [X19]
	108 Compare X0, 0
	109 JumpIfEqual {220}
	110 Move X1, X31
	111 Call InputActionReference.get_action, X0
	112 Compare X0, 0
	113 JumpIfEqual {220}
	114 Move X1, X22
	115 Move X2, X31
	116 Call InputAction.remove_performed, X0, X1
	117 Move X0, [X19]
	118 Compare X0, 0
	119 JumpIfEqual {220}
	120 Move X1, X31
	121 Call InputActionReference.get_action, X0
	122 Compare X0, 0
	123 JumpIfEqual {220}
	124 Move X1, X22
	125 Move X2, X31
	126 Call InputAction.remove_canceled, X0, X1
	127 Move X0, [X19]
	128 Compare X0, 0
	129 JumpIfEqual {153}
	130 Move X1, X31
	131 Call InputActionReference.get_action, X0
	132 Move X8, [X19]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 NotImplemented "Instruction CSET not yet implemented."
	135 Compare X8, 0
	136 JumpIfEqual {152}
	137 Move X0, X8
	138 Move X1, X31
	139 Call InputActionReference.get_action, X0
	140 Compare X0, 0
	141 JumpIfEqual {152}
	142 Move X0, [X19]
	143 Compare X0, 0
	144 JumpIfEqual {220}
	145 Move X1, X31
	146 Call InputActionReference.get_action, X0
	147 Compare X0, 0
	148 JumpIfEqual {220}
	149 Move X1, X31
	150 Call InputAction.get_enabled, X0
	151 And W26, W0, 1
	152 Move W26, W31
	153 Move W26, W31
	154 Move W23, 1
	155 Move X1, [X19]
	156 Move X0, X21
	157 Move W2, W31
	158 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	159 Move [X19], X20
	160 Compare X20, 0
	161 JumpIfEqual {167}
	162 Move X0, X20
	163 Move X1, X31
	164 Call InputActionReference.get_action, X0
	165 NotImplemented "Instruction CMP not yet implemented."
	166 NotImplemented "Instruction CSEL not yet implemented."
	167 Move W8, W31
	168 And W31, W8, W24
	169 Move X0, [X19]
	170 Compare X0, 0
	171 JumpIfEqual {220}
	172 Move X1, X31
	173 Call InputActionReference.get_action, X0
	174 Compare X0, 0
	175 JumpIfEqual {220}
	176 Move X1, X22
	177 Move X2, X31
	178 Call InputAction.add_performed, X0, X1
	179 Move X0, [X19]
	180 Compare X0, 0
	181 JumpIfEqual {220}
	182 Move X1, X31
	183 Call InputActionReference.get_action, X0
	184 Compare X0, 0
	185 JumpIfEqual {220}
	186 Move X1, X22
	187 Move X2, X31
	188 Call InputAction.add_canceled, X0, X1
	189 Move X0, X21
	190 Move X1, X31
	191 Call Behaviour.get_isActiveAndEnabled, X0
	192 Move TEMP, X0
	193 And TEMP, TEMP, 1
	194 Compare TEMP, 1
	195 JumpIfNotEqual {42}
	196 Compare X20, 0
	197 JumpIfEqual {42}
	198 Compare X20, 0
	199 JumpIfEqual {220}
	200 Move X0, X20
	201 Move X1, X31
	202 Call InputActionReference.get_action, X0
	203 Compare X0, 0
	204 JumpIfEqual {42}
	205 Or W8, W26, W23
	206 Compare W8, 0
	207 JumpIfEqual {42}
	208 Move X1, [X19]
	209 Move X20, [X31+64]
	210 Move X19, [X31+72]
	211 Move X22, [X31+48]
	212 Move X21, [X31+56]
	213 Move X24, [X31+32]
	214 Move X23, [X31+40]
	215 Move X26, [X31+16]
	216 Move X25, [X31+24]
	217 Move X30, [X31+80]
	218 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	219 Return 
	220 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionReference get_point()

Disassembly:
	0x037E9D98 CMP W9, W10
	0x037E9D9C B.CS 0x37E9DC0

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.Void set_point(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9DA0 MOVZ W10, 0x220
	0x037E9DA4 SMADDL X8, X9, X10, X8
	0x037E9DA8 ADD X0, X8, 0x20
	0x037E9DAC B 0x37E9DB4
	0x037E9DB0 ADD X0, X0, 0x160
	0x037E9DB4 LDR X30, [X31], #0x10

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+216]
	003 Add X8, X0, 120
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_scrollWheel()

Disassembly:
	0x037E9DB8 RET
	0x037E9DBC BL 0x1C16F20

ISIL:
	001 Move X0, [X0+176]
	002 Return X0

Method: System.Void set_scrollWheel(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9DC0 BL 0x1C16F28
	0x037E9DC4 STR X30, [X31 - 0x20]!
	0x037E9DC8 STP X20, X19, [X31 + 0x10]
	0x037E9DCC ADRP X20, 0xBF8000
	0x037E9DD0 LDRB W8, [X20 + 0x330]
	0x037E9DD4 MOV X19, X1

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+256]
	003 Add X8, X0, 176
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_leftClick()

Disassembly:
	0x037E9DD8 TBNZ X8, 0x0, 0x37E9DFC
	0x037E9DDC ADRP X0, 0x960000

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: System.Void set_leftClick(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9DE0 LDR X0, [X0 + 0x2F0]
	0x037E9DE4 BL 0x1C16CF4
	0x037E9DE8 ADRP X0, 0x95E000
	0x037E9DEC LDR X0, [X0 + 0x3C0]
	0x037E9DF0 BL 0x1C16CF4
	0x037E9DF4 MOVZ W8, 0x1

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+232]
	003 Add X8, X0, 152
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_middleClick()

Disassembly:
	0x037E9DF8 STRB W8, [X20 + 0x330]
	0x037E9DFC CBZ X19, 0x37E9E6C

ISIL:
	001 Move X0, [X0+160]
	002 Return X0

Method: System.Void set_middleClick(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9E00 LDR X8, [X19 + 0x78]
	0x037E9E04 CBZ X8, 0x37E9E3C
	0x037E9E08 ADRP X9, 0x95E000
	0x037E9E0C LDR X9, [X9 + 0x3C0]
	0x037E9E10 LDR X10, [X8]
	0x037E9E14 LDR X9, [X9]

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+248]
	003 Add X8, X0, 160
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_rightClick()

Disassembly:
	0x037E9E18 LDRB W12, [X10 + 0x130]
	0x037E9E1C LDRB W11, [X9 + 0x130]

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: System.Void set_rightClick(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9E20 CMP W12, W11
	0x037E9E24 B.CC 0x37E9E3C
	0x037E9E28 LDR X10, [X10 + 0xC8]
	0x037E9E2C ADD X10, X10, X11, 0x3, LSL
	0x037E9E30 LDUR X10, [X10 - 0x8]
	0x037E9E34 CMP X10, X9

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+240]
	003 Add X8, X0, 168
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_move()

Disassembly:
	0x037E9E38 B.EQ 0x37E9E4C
	0x037E9E3C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_move(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9E40 MOV W0, W31
	0x037E9E44 LDR X30, [X31], #0x20
	0x037E9E48 RET
	0x037E9E4C LDR X0, [X8 + 0x198]
	0x037E9E50 CBZ X0, 0x37E9E6C
	0x037E9E54 ADRP X8, 0x960000

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+224]
	003 Add X8, X0, 128
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_submit()

Disassembly:
	0x037E9E58 LDR X8, [X8 + 0x2F0]
	0x037E9E5C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+136]
	002 Return X0

Method: System.Void set_submit(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9E60 LDR X1, [X8]
	0x037E9E64 LDR X30, [X31], #0x20
	0x037E9E68 B 0x2E00A18
	0x037E9E6C BL 0x1C16F20
	0x037E9E70 STP X30, X21, [X31 - 0x20]!
	0x037E9E74 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W3, [X0+212]
	002 Add X8, X0, 136
	003 Move X2, X1
	004 Move X1, X8
	005 Move X4, X31
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_cancel()

Disassembly:
	0x037E9E78 MOV X20, X1
	0x037E9E7C MOV X19, X0

ISIL:
	001 Move X0, [X0+144]
	002 Return X0

Method: System.Void set_cancel(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9E80 BL 0x37E9ED0
	0x037E9E84 TBZ X0, 0x0, 0x37E9E98
	0x037E9E88 LDP X20, X19, [X31 + 0x10]
	0x037E9E8C MOVN W0, 0x0
	0x037E9E90 LDP X30, X21, [X31], #0x20
	0x037E9E94 RET

ISIL:
	001 Move W3, [X0+212]
	002 Add X8, X0, 144
	003 Move X2, X1
	004 Move X1, X8
	005 Move X4, X31
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_trackedDeviceOrientation()

Disassembly:
	0x037E9E98 MOV X0, X20
	0x037E9E9C MOV X1, X31

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: System.Void set_trackedDeviceOrientation(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9EA0 BL 0x3735D84
	0x037E9EA4 MOV W21, W0
	0x037E9EA8 MOV X0, X20
	0x037E9EAC MOV X1, X31
	0x037E9EB0 BL 0x3735E8C
	0x037E9EB4 MOV X1, X0

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+272]
	003 Add X8, X0, 192
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: UnityEngine.InputSystem.InputActionReference get_trackedDevicePosition()

Disassembly:
	0x037E9EB8 MOV X0, X19
	0x037E9EBC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+184]
	002 Return X0

Method: System.Void set_trackedDevicePosition(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037E9EC0 CMP W21, 0x4
	0x037E9EC4 CSET W2, NE
	0x037E9EC8 LDP X30, X21, [X31], #0x20
	0x037E9ECC B 0x37E9F34
	0x037E9ED0 STR X30, [X31 - 0x20]!
	0x037E9ED4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W3, [X0+212]
	002 Move X4, [X0+264]
	003 Add X8, X0, 184
	004 Move X2, X1
	005 Move X1, X8
	006 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	007 Return 

Method: System.Void AssignDefaultActions()

Disassembly:
	0x037E9ED8 MOV X20, X1
	0x037E9EDC MOV X19, X0
	0x037E9EE0 MOV X0, X1
	0x037E9EE4 MOV X1, X31
	0x037E9EE8 BL 0x3735E24
	0x037E9EEC TBZ X0, 0x0, 0x37E9F14
	0x037E9EF0 MOV X0, X20
	0x037E9EF4 MOV X1, X31
	0x037E9EF8 BL 0x3735E8C
	0x037E9EFC CBZ X0, 0x37E9F30
	0x037E9F00 LDR X0, [X0 + 0x78]
	0x037E9F04 CBZ X0, 0x37E9F30
	0x037E9F08 MOV X1, X31
	0x037E9F0C BL 0x376EE00
	0x037E9F10 TBZ X0, 0x0, 0x37E9F1C
	0x037E9F14 MOV W0, W31
	0x037E9F18 B 0x37E9F24
	0x037E9F1C MOVZ W0, 0x1
	0x037E9F20 STRB W0, [X19 + 0xD5]
	0x037E9F24 LDP X20, X19, [X31 + 0x10]
	0x037E9F28 LDR X30, [X31], #0x20
	0x037E9F2C RET
	0x037E9F30 BL 0x1C16F20
	0x037E9F34 STR D8, [X31 - 0x70]!
	0x037E9F38 STP X29, X30, [X31 + 0x10]
	0x037E9F3C STP X28, X27, [X31 + 0x20]
	0x037E9F40 STP X26, X25, [X31 + 0x30]
	0x037E9F44 STP X24, X23, [X31 + 0x40]
	0x037E9F48 STP X22, X21, [X31 + 0x50]
	0x037E9F4C STP X20, X19, [X31 + 0x60]
	0x037E9F50 SUB X31, X31, 0x2C0
	0x037E9F54 ADRP X20, 0xBF8000
	0x037E9F58 LDRB W8, [X20 + 0x331]
	0x037E9F5C MOV W24, W2
	0x037E9F60 MOV X21, X1
	0x037E9F64 MOV X19, X0
	0x037E9F68 TBNZ X8, 0x0, 0x37EA010
	0x037E9F6C ADRP X0, 0x960000
	0x037E9F70 LDR X0, [X0 + 0x308]
	0x037E9F74 BL 0x1C16CF4
	0x037E9F78 ADRP X0, 0x960000
	0x037E9F7C LDR X0, [X0 + 0x318]
	0x037E9F80 BL 0x1C16CF4
	0x037E9F84 ADRP X0, 0x960000
	0x037E9F88 LDR X0, [X0 + 0x4D8]
	0x037E9F8C BL 0x1C16CF4
	0x037E9F90 ADRP X0, 0x960000
	0x037E9F94 LDR X0, [X0 + 0x2F8]
	0x037E9F98 BL 0x1C16CF4
	0x037E9F9C ADRP X0, 0x960000
	0x037E9FA0 LDR X0, [X0 + 0x4E0]
	0x037E9FA4 BL 0x1C16CF4
	0x037E9FA8 ADRP X0, 0x960000
	0x037E9FAC LDR X0, [X0 + 0x378]
	0x037E9FB0 BL 0x1C16CF4
	0x037E9FB4 ADRP X0, 0x960000
	0x037E9FB8 LDR X0, [X0 + 0x4E8]
	0x037E9FBC BL 0x1C16CF4
	0x037E9FC0 ADRP X0, 0x960000
	0x037E9FC4 LDR X0, [X0 + 0x4F0]
	0x037E9FC8 BL 0x1C16CF4
	0x037E9FCC ADRP X0, 0x960000
	0x037E9FD0 LDR X0, [X0 + 0x4F8]
	0x037E9FD4 BL 0x1C16CF4
	0x037E9FD8 ADRP X0, 0x932000
	0x037E9FDC LDR X0, [X0 + 0xD40]
	0x037E9FE0 BL 0x1C16CF4
	0x037E9FE4 ADRP X0, 0x932000
	0x037E9FE8 LDR X0, [X0 + 0xD48]
	0x037E9FEC BL 0x1C16CF4
	0x037E9FF0 ADRP X0, 0x95E000
	0x037E9FF4 LDR X0, [X0 + 0x960]
	0x037E9FF8 BL 0x1C16CF4
	0x037E9FFC ADRP X0, 0x95D000
	0x037EA000 LDR X0, [X0 + 0xD58]
	0x037EA004 BL 0x1C16CF4
	0x037EA008 MOVZ W8, 0x1
	0x037EA00C STRB W8, [X20 + 0x331]
	0x037EA010 STR X31, [X31 + 0x2A8]
	0x037EA014 STR X31, [X31 + 0x2A0]
	0x037EA018 STR X31, [X31 + 0x2B0]
	0x037EA01C STR X31, [X31 + 0x298]
	0x037EA020 STR X31, [X31 + 0x290]
	0x037EA024 STR X31, [X31 + 0x278]
	0x037EA028 STR X31, [X31 + 0x270]
	0x037EA02C STR X31, [X31 + 0x280]
	0x037EA030 STR X31, [X31 + 0x258]
	0x037EA034 STR X31, [X31 + 0x250]
	0x037EA038 STR X31, [X31 + 0x260]
	0x037EA03C STR X31, [X31 + 0x238]
	0x037EA040 STR X31, [X31 + 0x230]
	0x037EA044 STR X31, [X31 + 0x240]
	0x037EA048 CBZ X21, 0x37EA73C
	0x037EA04C ADRP X8, 0x95F000
	0x037EA050 LDR X8, [X8 + 0x4D8]
	0x037EA054 LDP X22, X25, [X21 + 0x78]
	0x037EA058 LDR X9, [X19 + 0x150]
	0x037EA05C LDR V0, [X19 + 0x14]
	0x037EA060 LDR X2, [X8]
	0x037EA064 ADRP X28, 0x95F000
	0x037EA068 LDR X28, [X28 + 0x318]
	0x037EA06C ADD X0, X31, 0x10
	0x037EA070 MOV X1, X25
	0x037EA074 STR X9, [X31 + 0x20]
	0x037EA078 STR V0, [X31 + 0x1]
	0x037EA07C BL 0x21FB010
	0x037EA080 ADDS W31, W0, 0x1
	0x037EA084 B.EQ 0x37EA0B0
	0x037EA088 LDR X2, [X28]
	0x037EA08C MOV W26, W0
	0x037EA090 ADD X0, X19, 0x130
	0x037EA094 MOV W1, W26
	0x037EA098 BL 0x2DE77E8
	0x037EA09C MOVZ W8, 0x2
	0x037EA0A0 STR W0, [X19 + 0x120]
	0x037EA0A4 STR W26, [X19 + 0x124]
	0x037EA0A8 STR W8, [X19 + 0x128]
	0x037EA0AC B 0x37EA714
	0x037EA0B0 CBZ X22, 0x37EA73C
	0x037EA0B4 ADRP X23, 0xBEF000
	0x037EA0B8 LDRB W8, [X23 + 0x78F]
	0x037EA0BC LDR W20, [X22 + 0xE0]
	0x037EA0C0 CBNZ W8, 0x37EA0D8
	0x037EA0C4 ADRP X0, 0x911000
	0x037EA0C8 LDR X0, [X0 + 0xF08]
	0x037EA0CC BL 0x1C16CF4
	0x037EA0D0 MOVZ W8, 0x1
	0x037EA0D4 STRB W8, [X23 + 0x78F]
	0x037EA0D8 ADRP X8, 0x911000
	0x037EA0DC LDR X8, [X8 + 0xF08]
	0x037EA0E0 LDR X8, [X8]
	0x037EA0E4 LDR X8, [X8 + 0xB8]
	0x037EA0E8 LDR V8, [X8]
	0x037EA0EC CBZ X25, 0x37EA150
	0x037EA0F0 ADRP X9, 0x95D000
	0x037EA0F4 LDR X9, [X9 + 0x960]
	0x037EA0F8 LDR X8, [X25]
	0x037EA0FC LDR X10, [X9]
	0x037EA100 LDRB W9, [X8 + 0x130]
	0x037EA104 LDRB W11, [X10 + 0x130]
	0x037EA108 CMP W9, W11
	0x037EA10C B.CC 0x37EA124
	0x037EA110 LDR X12, [X8 + 0xC8]
	0x037EA114 ADD X11, X12, X11, 0x3, LSL
	0x037EA118 LDUR X11, [X11 - 0x8]
	0x037EA11C CMP X11, X10
	0x037EA120 B.EQ 0x37EA230
	0x037EA124 ADRP X10, 0x95C000
	0x037EA128 LDR X10, [X10 + 0xD58]
	0x037EA12C LDR X10, [X10]
	0x037EA130 LDRB W11, [X10 + 0x130]
	0x037EA134 CMP W9, W11
	0x037EA138 B.CC 0x37EA150
	0x037EA13C LDR X8, [X8 + 0xC8]
	0x037EA140 ADD X8, X8, X11, 0x3, LSL
	0x037EA144 LDUR X8, [X8 - 0x8]
	0x037EA148 CMP X8, X10
	0x037EA14C B.EQ 0x37EA254
	0x037EA150 MOV X1, X21
	0x037EA154 BL 0x37E9DC4
	0x037EA158 MOV W23, W0
	0x037EA15C LDR W8, [X19 + 0x120]
	0x037EA160 CMP W8, W20
	0x037EA164 B.NE 0x37EA170
	0x037EA168 LDR W26, [X19 + 0x124]
	0x037EA16C B 0x37EA714
	0x037EA170 LDR W8, [X19 + 0x130]
	0x037EA174 CMP W8, 0x1
	0x037EA178 B.LT 0x37EA1AC
	0x037EA17C MOV W26, W31
	0x037EA180 ADD X27, X19, 0x130
	0x037EA184 LDR X2, [X28]
	0x037EA188 MOV X0, X27
	0x037EA18C MOV W1, W26
	0x037EA190 BL 0x2DE77E8
	0x037EA194 CMP W0, W20
	0x037EA198 B.EQ 0x37EA1FC
	0x037EA19C LDR W8, [X27]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF9000
	007 Move X21, 0x961000
	008 Move W8, [X20+809]
	009 Move X21, [X21+1128]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x961000
	016 Move X0, [X0+1128]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+809], W8
	020 Move X0, [X21]
	021 Call 0x1C17F10
	022 Move X1, X31
	023 Move X20, X0
	024 Call DefaultInputActions..ctor, X0
	025 Compare X20, 0
	026 JumpIfEqual {186}
	027 Move X1, [X20+16]
	028 Move X0, X19
	029 Call InputSystemUIInputModule.set_actionsAsset, X0, X1
	030 Move X0, X20
	031 Move X1, X31
	032 Call DefaultInputActions.get_UI, X0
	033 Move [X31+8], X0
	034 Add X0, X31, 8
	035 Move X1, X31
	036 Call UIActions.get_Cancel, X0
	037 Move X1, X31
	038 Call InputActionReference.Create, X0
	039 Move W3, [X19+212]
	040 Move X2, X0
	041 Add X1, X19, 144
	042 Move X0, X19
	043 Move X4, X31
	044 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	045 Move X0, X20
	046 Move X1, X31
	047 Call DefaultInputActions.get_UI, X0
	048 Move [X31+8], X0
	049 Add X0, X31, 8
	050 Move X1, X31
	051 Call UIActions.get_Submit, X0
	052 Move X1, X31
	053 Call InputActionReference.Create, X0
	054 Move W3, [X19+212]
	055 Move X2, X0
	056 Add X1, X19, 136
	057 Move X0, X19
	058 Move X4, X31
	059 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	060 Move X0, X20
	061 Move X1, X31
	062 Call DefaultInputActions.get_UI, X0
	063 Move [X31+8], X0
	064 Add X0, X31, 8
	065 Move X1, X31
	066 Call UIActions.get_Navigate, X0
	067 Move X1, X31
	068 Call InputActionReference.Create, X0
	069 Move W3, [X19+212]
	070 Move X4, [X19+224]
	071 Move X2, X0
	072 Add X1, X19, 128
	073 Move X0, X19
	074 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	075 Move X0, X20
	076 Move X1, X31
	077 Call DefaultInputActions.get_UI, X0
	078 Move [X31+8], X0
	079 Add X0, X31, 8
	080 Move X1, X31
	081 Call UIActions.get_Click, X0
	082 Move X1, X31
	083 Call InputActionReference.Create, X0
	084 Move W3, [X19+212]
	085 Move X4, [X19+232]
	086 Move X2, X0
	087 Add X1, X19, 152
	088 Move X0, X19
	089 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	090 Move X0, X20
	091 Move X1, X31
	092 Call DefaultInputActions.get_UI, X0
	093 Move [X31+8], X0
	094 Add X0, X31, 8
	095 Move X1, X31
	096 Call UIActions.get_RightClick, X0
	097 Move X1, X31
	098 Call InputActionReference.Create, X0
	099 Move W3, [X19+212]
	100 Move X4, [X19+240]
	101 Move X2, X0
	102 Add X1, X19, 168
	103 Move X0, X19
	104 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	105 Move X0, X20
	106 Move X1, X31
	107 Call DefaultInputActions.get_UI, X0
	108 Move [X31+8], X0
	109 Add X0, X31, 8
	110 Move X1, X31
	111 Call UIActions.get_MiddleClick, X0
	112 Move X1, X31
	113 Call InputActionReference.Create, X0
	114 Move W3, [X19+212]
	115 Move X4, [X19+248]
	116 Move X2, X0
	117 Add X1, X19, 160
	118 Move X0, X19
	119 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	120 Move X0, X20
	121 Move X1, X31
	122 Call DefaultInputActions.get_UI, X0
	123 Move [X31+8], X0
	124 Add X0, X31, 8
	125 Move X1, X31
	126 Call UIActions.get_Point, X0
	127 Move X1, X31
	128 Call InputActionReference.Create, X0
	129 Move W3, [X19+212]
	130 Move X4, [X19+216]
	131 Move X2, X0
	132 Add X1, X19, 120
	133 Move X0, X19
	134 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	135 Move X0, X20
	136 Move X1, X31
	137 Call DefaultInputActions.get_UI, X0
	138 Move [X31+8], X0
	139 Add X0, X31, 8
	140 Move X1, X31
	141 Call UIActions.get_ScrollWheel, X0
	142 Move X1, X31
	143 Call InputActionReference.Create, X0
	144 Move W3, [X19+212]
	145 Move X4, [X19+256]
	146 Move X2, X0
	147 Add X1, X19, 176
	148 Move X0, X19
	149 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	150 Move X0, X20
	151 Move X1, X31
	152 Call DefaultInputActions.get_UI, X0
	153 Move [X31+8], X0
	154 Add X0, X31, 8
	155 Move X1, X31
	156 Call UIActions.get_TrackedDeviceOrientation, X0
	157 Move X1, X31
	158 Call InputActionReference.Create, X0
	159 Move W3, [X19+212]
	160 Move X4, [X19+272]
	161 Move X2, X0
	162 Add X1, X19, 192
	163 Move X0, X19
	164 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	165 Move X0, X20
	166 Move X1, X31
	167 Call DefaultInputActions.get_UI, X0
	168 Move [X31+8], X0
	169 Add X0, X31, 8
	170 Move X1, X31
	171 Call UIActions.get_TrackedDevicePosition, X0
	172 Move X1, X31
	173 Call InputActionReference.Create, X0
	174 Move W3, [X19+212]
	175 Move X4, [X19+264]
	176 Move X2, X0
	177 Add X1, X19, 184
	178 Move X0, X19
	179 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	180 Move X20, [X31+32]
	181 Move X19, [X31+40]
	182 Move X30, [X31+16]
	183 Move X21, [X31+24]
	184 Add X31, X31, 48
	185 Return 
	186 Call 0x1C17F20

Method: System.Void UnassignActions()

Disassembly:
	0x037EA3D0 STP X21, X22, [X8 + 0x180]
	0x037EA3D4 STR W24, [X8 + 0x194]
	0x037EA3D8 STR W26, [X8 + 0x190]
	0x037EA3DC STP W23, W20, [X8 + 0xFC]
	0x037EA3E0 ADD X8, X8, 0x19C
	0x037EA3E4 STP X31, X31, [X8 + 0x8]
	0x037EA3E8 STR X31, [X8]
	0x037EA3EC STR W31, [X8 + 0x18]
	0x037EA3F0 B 0x37EA448
	0x037EA3F4 CMP W8, 0x0
	0x037EA3F8 CSEL X7, X31, X25, NE
	0x037EA3FC CSEL W3, W31, W26, NE
	0x037EA400 MOV X0, X19
	0x037EA404 MOV W1, W20
	0x037EA408 MOV W2, W23
	0x037EA40C MOV W4, W24
	0x037EA410 MOV X5, X21
	0x037EA414 MOV X6, X22
	0x037EA418 B 0x37EA6C4
	0x037EA41C CMP W8, 0x0
	0x037EA420 CSEL X7, X31, X25, NE
	0x037EA424 CSEL W3, W31, W26, NE
	0x037EA428 MOV X0, X19
	0x037EA42C MOV W1, W20
	0x037EA430 MOV W2, W23
	0x037EA434 MOV W4, W24
	0x037EA438 MOV X5, X21
	0x037EA43C MOV X6, X22
	0x037EA440 BL 0x37EA80C
	0x037EA444 STR W0, [X19 + 0x124]
	0x037EA448 CBZ W27, 0x37EA484
	0x037EA44C LDR W1, [X19 + 0x124]
	0x037EA450 MOV X0, X19
	0x037EA454 BL 0x37E9D80
	0x037EA458 LDR V0, [X0 + 0x1D8]
	0x037EA45C ADRP X8, 0xFFFFFFFFFD2FF000
	0x037EA460 LDR V1, [X8 + 0xF20]
	0x037EA464 FSUB V0.2S, V0.2S, V8.2S
	0x00000000 INVALID
	0x037EA46C FADDP S0, V0.2S
	0x037EA470 FCMP S0, S1
	0x037EA474 B.MI 0x37EA484
	0x037EA478 MOVZ W8, 0x1
	0x037EA47C STR D8, [X0 + 0x1D8]
	0x037EA480 STRB W8, [X0]
	0x037EA484 LDR W26, [X19 + 0x124]
	0x037EA488 STR W20, [X19 + 0x120]
	0x037EA48C B 0x37EA710
	0x037EA490 STR X31, [X31 + 0x258]
	0x037EA494 STR X31, [X31 + 0x250]
	0x037EA498 STR X31, [X31 + 0x260]
	0x037EA49C LDR V0, [X31 + 0x25]
	0x037EA4A0 LDR X8, [X31 + 0x260]
	0x037EA4A4 STR V0, [X31 + 0x2A]
	0x037EA4A8 LDRB W9, [X31 + 0x2A0]
	0x037EA4AC STR X8, [X31 + 0x2B0]
	0x037EA4B0 CBZ W9, 0x37EA57C
	0x037EA4B4 ADRP X26, 0x95F000
	0x037EA4B8 LDR X26, [X26 + 0x4F8]
	0x037EA4BC ADD X0, X31, 0x2A0
	0x037EA4C0 LDR X1, [X26]
	0x037EA4C4 BL 0x242CC48
	0x037EA4C8 UBFM X8, X1, 0x20, 0x3F
	0x037EA4CC CMP W8, 0x1
	0x037EA4D0 STR X0, [X31 + 0x290]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call InputSystemUIInputModule.set_actionsAsset, X0, X1
	006 Move W3, [X19+212]
	007 Add X1, X19, 144
	008 Move X0, X19
	009 Move X2, X31
	010 Move X4, X31
	011 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	012 Move W3, [X19+212]
	013 Add X1, X19, 136
	014 Move X0, X19
	015 Move X2, X31
	016 Move X4, X31
	017 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	018 Move W3, [X19+212]
	019 Move X4, [X19+224]
	020 Add X1, X19, 128
	021 Move X0, X19
	022 Move X2, X31
	023 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	024 Move W3, [X19+212]
	025 Move X4, [X19+232]
	026 Add X1, X19, 152
	027 Move X0, X19
	028 Move X2, X31
	029 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	030 Move W3, [X19+212]
	031 Move X4, [X19+240]
	032 Add X1, X19, 168
	033 Move X0, X19
	034 Move X2, X31
	035 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	036 Move W3, [X19+212]
	037 Move X4, [X19+248]
	038 Add X1, X19, 160
	039 Move X0, X19
	040 Move X2, X31
	041 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	042 Move W3, [X19+212]
	043 Move X4, [X19+216]
	044 Add X1, X19, 120
	045 Move X0, X19
	046 Move X2, X31
	047 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	048 Move W3, [X19+212]
	049 Move X4, [X19+256]
	050 Add X1, X19, 176
	051 Move X0, X19
	052 Move X2, X31
	053 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	054 Move W3, [X19+212]
	055 Move X4, [X19+272]
	056 Add X1, X19, 192
	057 Move X0, X19
	058 Move X2, X31
	059 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	060 Move W3, [X19+212]
	061 Move X4, [X19+264]
	062 Add X1, X19, 184
	063 Move X0, X19
	064 Move X2, X31
	065 Move X30, [X31+16]
	066 Move X19, [X31+24]
	067 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	068 Return 

Method: UnityEngine.InputSystem.InputActionReference get_trackedDeviceSelect()

Disassembly:
	0x037EA4D4 STR X1, [X31 + 0x298]
	0x037EA4D8 B.LT 0x37EA57C
	0x037EA4DC LDR X1, [X26]
	0x037EA4E0 ADD X0, X31, 0x2A0
	0x037EA4E4 BL 0x242CC48
	0x037EA4E8 ADRP X28, 0x931000
	0x037EA4EC LDR X28, [X28 + 0xD48]
	0x037EA4F0 STR X0, [X31 + 0x290]
	0x037EA4F4 STR X1, [X31 + 0x298]
	0x037EA4F8 ADD X0, X31, 0x290
	0x037EA4FC LDR X2, [X28]
	0x037EA500 MOV W1, W31
	0x037EA504 BL 0x24FDB3C
	0x037EA508 CBZ X0, 0x37EA73C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x90A000
	004 Move X0, [X0+1456]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call InvalidOperationException..ctor, X0
	010 Move X0, 0x960000
	011 Move X0, [X0+1136]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Void set_trackedDeviceSelect(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x037EA50C LDR X25, [X0 + 0x78]
	0x037EA510 CBZ X25, 0x37EA57C
	0x037EA514 ADRP X8, 0x95C000
	0x037EA518 LDR X8, [X8 + 0xD58]
	0x037EA51C LDR X9, [X25]
	0x037EA520 LDR X8, [X8]
	0x037EA524 LDRB W11, [X9 + 0x130]
	0x037EA528 LDRB W10, [X8 + 0x130]
	0x037EA52C CMP W11, W10
	0x037EA530 B.CC 0x37EA548
	0x037EA534 LDR X9, [X9 + 0xC8]
	0x037EA538 ADD X9, X9, X10, 0x3, LSL
	0x037EA53C LDUR X9, [X9 - 0x8]
	0x037EA540 CMP X9, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x90A000
	004 Move X0, [X0+1456]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call InvalidOperationException..ctor, X0
	010 Move X0, 0x960000
	011 Move X0, [X0+1144]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Void Awake()

Disassembly:
	0x037EA544 B.EQ 0x37EA57C
	0x037EA548 LDR X1, [X26]
	0x037EA54C LDR W21, [X25 + 0xE0]
	0x037EA550 ADD X0, X31, 0x2A0
	0x037EA554 BL 0x242CC48
	0x037EA558 LDR X2, [X28]
	0x037EA55C STR X0, [X31 + 0x290]
	0x037EA560 STR X1, [X31 + 0x298]
	0x037EA564 ADD X0, X31, 0x290
	0x037EA568 MOV W1, W31
	0x037EA56C BL 0x24FDB3C
	0x037EA570 MOV X5, X0
	0x037EA574 MOVZ W4, 0x1
	0x037EA578 B 0x37EA68C
	0x037EA57C LDR X0, [X19 + 0xB8]
	0x037EA580 CBZ X0, 0x37EA5D8
	0x037EA584 MOV X1, X31
	0x037EA588 BL 0x37451B4
	0x037EA58C CBZ X0, 0x37EA5D8
	0x037EA590 MOV X1, X31
	0x037EA594 BL 0x373467C
	0x037EA598 ADRP X8, 0x95F000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call UIBehaviour.Awake, X0
	007 Move X20, 0xBF0000
	008 Move W8, [X20+1935]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x912000
	012 Move X0, [X0+3848]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1935], W8
	016 Move X8, 0x912000
	017 Move X8, [X8+3848]
	018 Move X8, [X8]
	019 Move X8, [X8+184]
	020 Move V0, [X8]
	021 Move [X19+904], D0
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x037EA5EC STR V0, [X31 + 0x27]
	0x037EA5F0 LDRB W9, [X31 + 0x270]
	0x037EA5F4 STR X8, [X31 + 0x280]
	0x037EA5F8 CBZ W9, 0x37EA6A4
	0x037EA5FC ADRP X26, 0x95F000
	0x037EA600 LDR X26, [X26 + 0x4F8]
	0x037EA604 ADD X0, X31, 0x270
	0x037EA608 LDR X1, [X26]
	0x037EA60C BL 0x242CC48
	0x037EA610 UBFM X8, X1, 0x20, 0x3F
	0x037EA614 CMP W8, 0x1
	0x037EA618 STR X0, [X31 + 0x290]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call UIBehaviour.OnDestroy, X0
	006 Move W8, [X19+212]
	007 Compare W8, 0
	008 JumpIfEqual {15}
	009 Move X0, X19
	010 Move W1, W31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call InputSystemUIInputModule.SetActionCallbacks, X0, X1
	014 Return 
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void OnEnable()

Disassembly:
	0x037EA630 ADRP X28, 0x931000
	0x037EA634 LDR X28, [X28 + 0xD48]
	0x037EA638 STR X0, [X31 + 0x290]
	0x037EA63C STR X1, [X31 + 0x298]
	0x037EA640 ADD X0, X31, 0x290
	0x037EA644 LDR X2, [X28]
	0x037EA648 MOV W1, W31
	0x037EA64C BL 0x24FDB3C
	0x037EA650 CBZ X0, 0x37EA73C
	0x037EA654 LDR X25, [X0 + 0x78]
	0x037EA658 CBZ X25, 0x37EA6A4
	0x037EA65C LDR X1, [X26]
	0x037EA660 LDR W21, [X25 + 0xE0]
	0x037EA664 ADD X0, X31, 0x270
	0x037EA668 BL 0x242CC48
	0x037EA66C LDR X2, [X28]
	0x037EA670 STR X0, [X31 + 0x290]
	0x037EA674 STR X1, [X31 + 0x298]
	0x037EA678 ADD X0, X31, 0x290
	0x037EA67C MOV W1, W31
	0x037EA680 BL 0x24FDB3C
	0x037EA684 MOV X5, X0
	0x037EA688 MOVZ W4, 0x3
	0x037EA68C MOV X0, X19
	0x037EA690 MOV W1, W21
	0x037EA694 MOV W2, W23
	0x037EA698 MOV W3, W31
	0x037EA69C MOV X6, X25
	0x037EA6A0 B 0x37EA6C0
	0x037EA6A4 MOV X0, X19
	0x037EA6A8 MOV W1, W20
	0x037EA6AC MOV W2, W23
	0x037EA6B0 MOV W3, W31
	0x037EA6B4 MOV W4, W31
	0x037EA6B8 MOV X5, X21
	0x037EA6BC MOV X6, X22
	0x037EA6C0 MOV X7, X31
	0x037EA6C4 BL 0x37EA80C
	0x037EA6C8 MOV W26, W0
	0x037EA6CC CBZ W27, 0x37EA708
	0x037EA6D0 MOV X0, X19
	0x037EA6D4 MOV W1, W26
	0x037EA6D8 BL 0x37E9D80
	0x037EA6DC LDR V0, [X0 + 0x1D8]
	0x037EA6E0 ADRP X8, 0xFFFFFFFFFD2FF000
	0x037EA6E4 LDR V1, [X8 + 0xF20]
	0x037EA6E8 FSUB V0.2S, V0.2S, V8.2S
	0x00000000 INVALID
	0x037EA6F0 FADDP S0, V0.2S
	0x037EA6F4 FCMP S0, S1
	0x037EA6F8 B.MI 0x37EA708
	0x037EA6FC MOVZ W8, 0x1
	0x037EA700 STR D8, [X0 + 0x1D8]
	0x037EA704 STRB W8, [X0]
	0x037EA708 STR W20, [X19 + 0x120]
	0x037EA70C STR W26, [X19 + 0x124]
	0x037EA710 STR W24, [X19 + 0x128]
	0x037EA714 MOV W0, W26
	0x037EA718 ADD X31, X31, 0x2C0
	0x037EA71C LDP X20, X19, [X31 + 0x60]
	0x037EA720 LDP X22, X21, [X31 + 0x50]
	0x037EA724 LDP X24, X23, [X31 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF8000
	007 Move W8, [X20+810]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x934000
	014 Move X0, [X0+3656]
	015 Call 0x1C17CF4
	016 Move X0, 0x960000
	017 Move X0, [X0+1152]
	018 Call 0x1C17CF4
	019 Move X0, 0x95C000
	020 Move X0, [X0+728]
	021 Call 0x1C17CF4
	022 Move X0, 0x960000
	023 Move X0, [X0+1160]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+810], W8
	027 Move X22, 0x95C000
	028 Move X21, 0x960000
	029 Move X22, [X22+728]
	030 Move X21, [X21+1152]
	031 Move X0, X19
	032 Move X1, X31
	033 Call BaseInputModule.OnEnable, X0
	034 Move X20, [X19+280]
	035 Compare X20, 0
	036 JumpIfNotEqual {49}
	037 Move X8, 0x934000
	038 Move X8, [X8+3656]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move X8, 0x960000
	042 Move X8, [X8+1160]
	043 Move X1, X19
	044 Move X3, X31
	045 Move X20, X0
	046 Move X2, [X8]
	047 Call Action`1<Object>..ctor, X0, X1, X2
	048 Move [X19+280], X20
	049 Move X8, [X22]
	050 Move X2, [X21]
	051 Move X1, X20
	052 Move X8, [X8+184]
	053 Add X0, X8, 104
	054 Call 0x28F24E0, X0, X1
	055 Move X0, X19
	056 Call InputSystemUIInputModule.HasNoActions, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {63}
	061 Move X0, X19
	062 Call InputSystemUIInputModule.AssignDefaultActions, X0
	063 Move X0, X19
	064 Call InputSystemUIInputModule.ResetPointers, X0
	065 Move X0, X19
	066 Call InputSystemUIInputModule.HookActions, X0
	067 Move X0, X19
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Call InputSystemUIInputModule.EnableAllActions, X0
	074 Return 

Method: System.Void OnDisable()

Disassembly:
	0x037EAB6C CMP W8, W22
	0x037EAB70 B.NE 0x37EAB84
	0x037EAB74 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x037EAB78 STR D0, [X19 + 0x120]
	0x037EAB7C STR W31, [X19 + 0x128]
	0x037EAB80 B 0x37EAB98
	0x037EAB84 LDR W9, [X19 + 0x130]
	0x037EAB88 SUB W9, W9, 0x1
	0x037EAB8C CMP W8, W9
	0x037EAB90 B.NE 0x37EAB98
	0x037EAB94 STR W22, [X19 + 0x124]
	0x037EAB98 LDR X2, [X25]
	0x037EAB9C ADD X0, X19, 0x130
	0x037EABA0 MOV W1, W22
	0x037EABA4 BL 0x2DE8554
	0x037EABA8 LDR X2, [X24]
	0x037EABAC ADD X0, X19, 0x140
	0x037EABB0 MOV W1, W22
	0x037EABB4 BL 0x2DEB168
	0x037EABB8 LDR X2, [X23]
	0x037EABBC MOV X0, X21
	0x037EABC0 MOV W1, W22
	0x037EABC4 BL 0x2DECBC0
	0x037EABC8 CBZ X20, 0x37EAC90
	0x037EABCC LDR X8, [X20 + 0xF0]
	0x037EABD0 CBZ X8, 0x37EAC90
	0x037EABD4 LDP W2, W9, [X8 + 0x18]
	0x037EABD8 ADD W9, W9, 0x1
	0x037EABDC CMP W2, 0x1
	0x037EABE0 STP W31, W9, [X8 + 0x18]
	0x037EABE4 B.LT 0x37EABF8
	0x037EABE8 LDR X0, [X8 + 0x10]
	0x037EABEC MOV W1, W31
	0x037EABF0 MOV X3, X31
	0x037EABF4 BL 0x339FA34
	0x037EABF8 MOVI V0.2D, 0x0
	0x037EABFC MOV X0, X20
	0x037EAC00 MOV X1, X31
	0x037EAC04 MOV X2, X31
	0x037EAC08 STR X31, [X20 + 0x188]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBF8000
	007 Move X21, 0x95C000
	008 Move X20, 0x960000
	009 Move W8, [X22+811]
	010 Move X21, [X21+728]
	011 Move X20, [X20+1232]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x960000
	018 Move X0, [X0+1232]
	019 Call 0x1C17CF4
	020 Move X0, 0x95C000
	021 Move X0, [X0+728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+811], W8
	025 Move X0, X19
	026 Call InputSystemUIInputModule.ResetPointers, X0
	027 Move X8, [X21]
	028 Move X1, [X19+280]
	029 Move X2, [X20]
	030 Move X8, [X8+184]
	031 Add X0, X8, 104
	032 Call 0x28F2650, X0, X1
	033 Move X0, X19
	034 Call InputSystemUIInputModule.DisableAllActions, X0
	035 Move W8, [X19+212]
	036 Compare W8, 0
	037 JumpIfEqual {41}
	038 Move X0, X19
	039 Move W1, W31
	040 Call InputSystemUIInputModule.SetActionCallbacks, X0, X1
	041 Move X0, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+48]
	048 Call BaseInputModule.OnDisable, X0
	049 Return 

Method: System.Void ResetPointers()

Disassembly:
	0x037EA858 TBNZ X8, 0x0, 0x37EA8A0
	0x037EA85C ADRP X0, 0x95F000
	0x037EA860 LDR X0, [X0 + 0x508]
	0x037EA864 BL 0x1C16CF4
	0x037EA868 ADRP X0, 0x95F000
	0x037EA86C LDR X0, [X0 + 0x510]
	0x037EA870 BL 0x1C16CF4
	0x037EA874 ADRP X0, 0x95F000
	0x037EA878 LDR X0, [X0 + 0x518]
	0x037EA87C BL 0x1C16CF4
	0x037EA880 ADRP X0, 0x95F000
	0x037EA884 LDR X0, [X0 + 0x520]
	0x037EA888 BL 0x1C16CF4
	0x037EA88C ADRP X0, 0x95F000
	0x037EA890 LDR X0, [X0 + 0x500]
	0x037EA894 BL 0x1C16CF4
	0x037EA898 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+344]
	005 Move X19, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, X19
	008 Move W1, W31
	009 Call InputSystemUIInputModule.SendPointerExitEventsAndRemovePointer, X0, X1
	010 Subtract W20, W20, 1
	011 NotImplemented "Instruction MOVI not yet implemented."
	012 Move [X19+288], D0
	013 Move [X19+296], W31
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return 

Method: System.Boolean HasNoActions()

Disassembly:
	0x037EA728 LDP X26, X25, [X31 + 0x30]
	0x037EA72C LDP X28, X27, [X31 + 0x20]
	0x037EA730 LDP X29, X30, [X31 + 0x10]
	0x037EA734 LDR V8, [X31], #0x70
	0x037EA738 RET
	0x037EA73C BL 0x1C16F20
	0x037EA740 SUB X31, X31, 0x30
	0x037EA744 STP X30, X21, [X31 + 0x10]
	0x037EA748 STP X20, X19, [X31 + 0x20]
	0x037EA74C ADRP X21, 0xBF7000
	0x037EA750 LDRB W8, [X21 + 0x336]
	0x037EA754 MOV X20, X1
	0x037EA758 MOV X19, X0
	0x037EA75C TBNZ X8, 0x0, 0x37EA780
	0x037EA760 ADRP X0, 0x931000
	0x037EA764 LDR X0, [X0 + 0xD40]
	0x037EA768 BL 0x1C16CF4
	0x037EA76C ADRP X0, 0x931000
	0x037EA770 LDR X0, [X0 + 0xD48]
	0x037EA774 BL 0x1C16CF4
	0x037EA778 MOVZ W8, 0x1
	0x037EA77C STRB W8, [X21 + 0x336]
	0x037EA780 CBZ X20, 0x37EA7F4
	0x037EA784 MOV X0, X20
	0x037EA788 MOV X1, X31
	0x037EA78C BL 0x37451B4
	0x037EA790 CBZ X0, 0x37EA7F8
	0x037EA794 MOV X1, X31
	0x037EA798 BL 0x373467C
	0x037EA79C UBFM X8, X1, 0x20, 0x3F
	0x037EA7A0 CMP W8, 0x1
	0x037EA7A4 STP X0, X1, [X31]
	0x037EA7A8 B.LT 0x37EA7F4
	0x037EA7AC ADRP X21, 0x931000
	0x037EA7B0 LDR X21, [X21 + 0xD48]
	0x037EA7B4 MOV W20, W31
	0x037EA7B8 LDR X2, [X21]
	0x037EA7BC ADD X0, X31, 0x0
	0x037EA7C0 MOV W1, W20
	0x037EA7C4 BL 0x24FDB3C
	0x037EA7C8 CBZ X0, 0x37EA808
	0x037EA7CC LDR X8, [X0 + 0x78]
	0x037EA7D0 LDR W9, [X31 + 0xC]
	0x037EA7D4 ADD W20, W20, 0x1
	0x037EA7D8 CMP X8, X19
	0x037EA7DC CSET W0, EQ
	0x037EA7E0 CMP W20, W9
	0x037EA7E4 B.GE 0x37EA7F8
	0x037EA7E8 CMP X8, X19
	0x037EA7EC B.NE 0x37EA7B8
	0x037EA7F0 B 0x37EA7F8
	0x037EA7F4 MOV W0, W31
	0x037EA7F8 LDP X20, X19, [X31 + 0x20]
	0x037EA7FC LDP X30, X21, [X31 + 0x10]
	0x037EA800 ADD X31, X31, 0x30
	0x037EA804 RET
	0x037EA808 BL 0x1C16F20
	0x037EA80C STP X29, X30, [X31 - 0x60]!
	0x037EA810 STP X28, X27, [X31 + 0x10]
	0x037EA814 STP X26, X25, [X31 + 0x20]
	0x037EA818 STP X24, X23, [X31 + 0x30]
	0x037EA81C STP X22, X21, [X31 + 0x40]
	0x037EA820 STP X20, X19, [X31 + 0x50]
	0x037EA824 SUB X31, X31, 0x230
	0x037EA828 ADRP X28, 0xBF7000
	0x037EA82C ADRP X19, 0x95F000
	0x037EA830 LDRB W8, [X28 + 0x332]
	0x037EA834 LDR X19, [X19 + 0x500]
	0x037EA838 MOV X20, X7
	0x037EA83C MOV X23, X6
	0x037EA840 MOV X24, X5
	0x037EA844 MOV W25, W4
	0x037EA848 MOV W26, W3
	0x037EA84C MOV W27, W2
	0x037EA850 MOV W22, W1
	0x037EA854 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBF8000
	006 Move X20, 0x90A000
	007 Move W8, [X21+812]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x90A000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+812], W8
	019 Move X0, [X20]
	020 Move X20, [X19+112]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {89}
	033 Move X0, [X19+120]
	034 Compare X0, 0
	035 JumpIfEqual {40}
	036 Move X1, X31
	037 Call InputActionReference.get_action, X0
	038 Compare X0, 0
	039 JumpIfNotEqual {89}
	040 Move X0, [X19+152]
	041 Compare X0, 0
	042 JumpIfEqual {47}
	043 Move X1, X31
	044 Call InputActionReference.get_action, X0
	045 Compare X0, 0
	046 JumpIfNotEqual {89}
	047 Move X0, [X19+168]
	048 Compare X0, 0
	049 JumpIfEqual {54}
	050 Move X1, X31
	051 Call InputActionReference.get_action, X0
	052 Compare X0, 0
	053 JumpIfNotEqual {89}
	054 Move X0, [X19+160]
	055 Compare X0, 0
	056 JumpIfEqual {61}
	057 Move X1, X31
	058 Call InputActionReference.get_action, X0
	059 Compare X0, 0
	060 JumpIfNotEqual {89}
	061 Move X0, [X19+136]
	062 Compare X0, 0
	063 JumpIfEqual {68}
	064 Move X1, X31
	065 Call InputActionReference.get_action, X0
	066 Compare X0, 0
	067 JumpIfNotEqual {89}
	068 Move X0, [X19+144]
	069 Compare X0, 0
	070 JumpIfEqual {75}
	071 Move X1, X31
	072 Call InputActionReference.get_action, X0
	073 Compare X0, 0
	074 JumpIfNotEqual {89}
	075 Move X0, [X19+176]
	076 Compare X0, 0
	077 JumpIfEqual {82}
	078 Move X1, X31
	079 Call InputActionReference.get_action, X0
	080 Compare X0, 0
	081 JumpIfNotEqual {89}
	082 Move X0, [X19+192]
	083 Compare X0, 0
	084 JumpIfEqual {95}
	085 Move X1, X31
	086 Call InputActionReference.get_action, X0
	087 Compare X0, 0
	088 JumpIfEqual {95}
	089 Move W0, W31
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Return X0
	095 Move X0, [X19+184]
	096 Compare X0, 0
	097 JumpIfEqual {102}
	098 Move X1, X31
	099 Call InputActionReference.get_action, X0
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CSET not yet implemented."
	102 Move W0, 1

Method: System.Void EnableAllActions()

Disassembly:
	0x037EAB10 BL 0x1C16CF4
	0x037EAB14 ADRP X0, 0x95F000
	0x037EAB18 LDR X0, [X0 + 0x308]
	0x037EAB1C BL 0x1C16CF4
	0x037EAB20 ADRP X0, 0x95F000
	0x037EAB24 LDR X0, [X0 + 0x408]
	0x037EAB28 BL 0x1C16CF4
	0x037EAB2C MOVZ W8, 0x1
	0x037EAB30 STRB W8, [X21 + 0x334]
	0x037EAB34 ADRP X25, 0x95F000
	0x037EAB38 LDR X25, [X25 + 0x530]
	0x037EAB3C LDR X2, [X20]
	0x037EAB40 ADRP X24, 0x95F000
	0x037EAB44 ADRP X23, 0x95F000
	0x037EAB48 LDR X24, [X24 + 0x528]
	0x037EAB4C LDR X23, [X23 + 0x538]
	0x037EAB50 ADD X21, X19, 0x158
	0x037EAB54 ADD X8, X31, 0x0
	0x037EAB58 MOV X0, X21
	0x037EAB5C MOV W1, W22
	0x037EAB60 BL 0x2DEBA18
	0x037EAB64 LDR W8, [X19 + 0x124]
	0x037EAB68 LDR X20, [X31 + 0x1D0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+120]
	004 Move X19, X0
	005 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	006 Move X1, [X19+152]
	007 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	008 Move X1, [X19+168]
	009 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	010 Move X1, [X19+160]
	011 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	012 Move X1, [X19+128]
	013 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	014 Move X1, [X19+136]
	015 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	016 Move X1, [X19+144]
	017 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	018 Move X1, [X19+176]
	019 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	020 Move X1, [X19+192]
	021 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	022 Move X1, [X19+184]
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call InputSystemUIInputModule.EnableInputAction, X0, X1
	026 Return 

Method: System.Void DisableAllActions()

Disassembly:
	0x037EAC0C STP V0, V0, [X20 + 0x50]
	0x037EAC10 STP V0, V0, [X20 + 0x70]
	0x037EAC14 STP V0, V0, [X20 + 0x90]
	0x037EAC18 STP V0, V0, [X20 + 0xB0]
	0x037EAC1C STP V0, V0, [X20 + 0xD0]
	0x037EAC20 BL 0x3E4F3AC
	0x037EAC24 MOV X0, X20
	0x037EAC28 MOV X1, X31
	0x037EAC2C MOV X2, X31
	0x037EAC30 BL 0x3E4F3AC
	0x037EAC34 STR X31, [X20 + 0x20]
	0x037EAC38 STP X31, X31, [X20 + 0x38]
	0x037EAC3C LDR W9, [X21]
	0x037EAC40 CBZ W9, 0x37EAC6C
	0x037EAC44 LDR X8, [X19 + 0x380]
	0x037EAC48 CBZ X8, 0x37EAC90
	0x037EAC4C LDR W10, [X8 + 0x18]
	0x037EAC50 SUB W9, W9, 0x1
	0x037EAC54 CMP W9, W10
	0x037EAC58 B.CS 0x37EAC94
	0x037EAC5C MOVZ W10, 0x220
	0x037EAC60 SMADDL X8, X9, X10, X8
	0x037EAC64 ADD X8, X8, 0x1F0
	0x037EAC68 B 0x37EAC70
	0x037EAC6C ADD X8, X19, 0x330
	0x037EAC70 STR X20, [X8]
	0x037EAC74 ADD X31, X31, 0x220
	0x037EAC78 LDP X20, X19, [X31 + 0x40]
	0x037EAC7C LDP X22, X21, [X31 + 0x30]
	0x037EAC80 LDP X24, X23, [X31 + 0x20]
	0x037EAC84 LDP X30, X25, [X31 + 0x10]
	0x037EAC88 LDR X29, [X31], #0x50
	0x037EAC8C RET
	0x037EAC90 BL 0x1C16F20
	0x037EAC94 BL 0x1C16F28
	0x037EAC98 STP X30, X23, [X31 - 0x30]!
	0x037EAC9C STP X22, X21, [X31 + 0x10]
	0x037EACA0 STP X20, X19, [X31 + 0x20]
	0x037EACA4 ADRP X20, 0xBF7000
	0x037EACA8 LDRB W8, [X20 + 0x335]
	0x037EACAC MOV X19, X0
	0x037EACB0 TBNZ X8, 0x0, 0x37EACC8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+120]
	004 Move W2, 1
	005 Move X19, X0
	006 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	007 Move X1, [X19+152]
	008 Move W2, 1
	009 Move X0, X19
	010 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	011 Move X1, [X19+168]
	012 Move W2, 1
	013 Move X0, X19
	014 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	015 Move X1, [X19+160]
	016 Move W2, 1
	017 Move X0, X19
	018 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	019 Move X1, [X19+128]
	020 Move W2, 1
	021 Move X0, X19
	022 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	023 Move X1, [X19+136]
	024 Move W2, 1
	025 Move X0, X19
	026 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	027 Move X1, [X19+144]
	028 Move W2, 1
	029 Move X0, X19
	030 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	031 Move X1, [X19+176]
	032 Move W2, 1
	033 Move X0, X19
	034 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	035 Move X1, [X19+192]
	036 Move W2, 1
	037 Move X0, X19
	038 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	039 Move X1, [X19+184]
	040 Move W2, 1
	041 Move X0, X19
	042 Move X30, [X31+16]
	043 Move X19, [X31+24]
	044 Call InputSystemUIInputModule.TryDisableInputAction, X0, X1, X2
	045 Return 

Method: System.Void EnableInputAction(UnityEngine.InputSystem.InputActionReference inputActionReference)

Disassembly:
	0x037E9C30 LDR X1, [X19 + 0xA8]
	0x037E9C34 MOVZ W2, 0x1
	0x037E9C38 MOV X0, X19
	0x037E9C3C BL 0x37E8AB8
	0x037E9C40 LDR X1, [X19 + 0xA0]
	0x037E9C44 MOVZ W2, 0x1
	0x037E9C48 MOV X0, X19
	0x037E9C4C BL 0x37E8AB8
	0x037E9C50 LDR X1, [X19 + 0x80]
	0x037E9C54 MOVZ W2, 0x1
	0x037E9C58 MOV X0, X19
	0x037E9C5C BL 0x37E8AB8
	0x037E9C60 LDR X1, [X19 + 0x88]
	0x037E9C64 MOVZ W2, 0x1
	0x037E9C68 MOV X0, X19
	0x037E9C6C BL 0x37E8AB8
	0x037E9C70 LDR X1, [X19 + 0x90]
	0x037E9C74 MOVZ W2, 0x1
	0x037E9C78 MOV X0, X19
	0x037E9C7C BL 0x37E8AB8
	0x037E9C80 LDR X1, [X19 + 0xB0]
	0x037E9C84 MOVZ W2, 0x1
	0x037E9C88 MOV X0, X19
	0x037E9C8C BL 0x37E8AB8
	0x037E9C90 LDR X1, [X19 + 0xC0]
	0x037E9C94 MOVZ W2, 0x1
	0x037E9C98 MOV X0, X19
	0x037E9C9C BL 0x37E8AB8
	0x037E9CA0 LDR X1, [X19 + 0xB8]
	0x037E9CA4 MOVZ W2, 0x1
	0x037E9CA8 MOV X0, X19
	0x037E9CAC LDP X30, X19, [X31], #0x10
	0x037E9CB0 B 0x37E8AB8
	0x037E9CB4 STP X29, X30, [X31 - 0x30]!
	0x037E9CB8 STP X22, X21, [X31 + 0x10]
	0x037E9CBC STP X20, X19, [X31 + 0x20]
	0x037E9CC0 SUB X31, X31, 0x220
	0x037E9CC4 ADRP X22, 0xBF8000
	0x037E9CC8 ADRP X21, 0x960000
	0x037E9CCC LDRB W8, [X22 + 0x333]
	0x037E9CD0 LDR X21, [X21 + 0x308]
	0x037E9CD4 MOV W19, W1
	0x037E9CD8 MOV X20, X0
	0x037E9CDC TBNZ X8, 0x0, 0x37E9D00
	0x037E9CE0 ADRP X0, 0x960000
	0x037E9CE4 LDR X0, [X0 + 0x308]
	0x037E9CE8 BL 0x1C16CF4
	0x037E9CEC ADRP X0, 0x90A000
	0x037E9CF0 LDR X0, [X0 + 0x598]
	0x037E9CF4 BL 0x1C16CF4
	0x037E9CF8 MOVZ W8, 0x1
	0x037E9CFC STRB W8, [X22 + 0x333]
	0x037E9D00 LDR X2, [X21]
	0x037E9D04 ADD X0, X20, 0x158
	0x037E9D08 ADD X8, X31, 0x0
	0x037E9D0C MOV W1, W19
	0x037E9D10 BL 0x2DEBA18
	0x037E9D14 LDR X21, [X31 + 0x1D0]
	0x037E9D18 CBZ X21, 0x37E9D7C
	0x037E9D1C ADRP X8, 0x90A000
	0x037E9D20 LDR X8, [X8 + 0x598]
	0x037E9D24 LDR X22, [X21 + 0x20]
	0x037E9D28 LDR X0, [X8]
	0x037E9D2C LDR W8, [X0 + 0xE0]
	0x037E9D30 CBNZ W8, 0x37E9D38
	0x037E9D34 BL 0x1C16DFC
	0x037E9D38 MOV X0, X22
	0x037E9D3C MOV X1, X31
	0x037E9D40 MOV X2, X31
	0x037E9D44 BL 0x3C354F8
	0x037E9D48 TBZ X0, 0x0, 0x37E9D5C
	0x037E9D4C MOV X0, X20
	0x037E9D50 MOV X1, X21
	0x037E9D54 MOV X2, X31
	0x037E9D58 BL 0x37E7734
	0x037E9D5C MOV X0, X20
	0x037E9D60 MOV W1, W19
	0x037E9D64 BL 0x37EAABC
	0x037E9D68 ADD X31, X31, 0x220
	0x037E9D6C LDP X20, X19, [X31 + 0x20]
	0x037E9D70 LDP X22, X21, [X31 + 0x10]
	0x037E9D74 LDP X29, X30, [X31], #0x30
	0x037E9D78 RET
	0x037E9D7C BL 0x1C16F20
	0x037E9D80 STR X30, [X31 - 0x10]!
	0x037E9D84 CBZ W1, 0x37E9DB0
	0x037E9D88 LDR X8, [X0 + 0x380]
	0x037E9D8C CBZ X8, 0x37E9DBC
	0x037E9D90 LDR W10, [X8 + 0x18]
	0x037E9D94 SUB W9, W1, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBF9000
	005 Move W8, [X20+813]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {25}
	011 Move X0, 0x961000
	012 Move X0, [X0+1120]
	013 Call 0x1C17CF4
	014 Move X0, 0x961000
	015 Move X0, [X0+1104]
	016 Call 0x1C17CF4
	017 Move X0, 0x961000
	018 Move X0, [X0+1112]
	019 Call 0x1C17CF4
	020 Move X0, 0x961000
	021 Move X0, [X0+888]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+813], W8
	025 Move [X31+8], X31
	026 Compare X19, 0
	027 JumpIfEqual {101}
	028 Move X0, X19
	029 Move X1, X31
	030 Call InputActionReference.get_action, X0
	031 Compare X0, 0
	032 JumpIfEqual {101}
	033 Move X20, 0x961000
	034 Move X20, [X20+888]
	035 Move X19, X0
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X20]
	042 Move X8, [X0+184]
	043 Move X0, [X8]
	044 Compare X0, 0
	045 JumpIfEqual {105}
	046 Move X8, 0x961000
	047 Move X8, [X8+1104]
	048 Add X2, X31, 8
	049 Move X1, X19
	050 Move X3, [X8]
	051 Call Dictionary`2<Object, InputActionReferenceState>.TryGetValue, X0, X1, X2
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {75}
	056 Move W8, [X31+8]
	057 Move X0, [X20]
	058 Add W8, W8, 1
	059 Move [X31+8], W8
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {65}
	063 Call 0x1C17DFC
	064 Move X0, [X20]
	065 Move X8, [X0+184]
	066 Move X0, [X8]
	067 Compare X0, 0
	068 JumpIfEqual {105}
	069 Move X8, 0x961000
	070 Move X2, [X31+8]
	071 Move X8, [X8+1112]
	072 Move X1, X19
	073 Move X3, [X8]
	074 Call Dictionary`2<Object, InputActionReferenceState>.set_Item, X0, X1, X2
	075 Move X0, X19
	076 Move X1, X31
	077 Call InputAction.get_enabled, X0
	078 And W31, W0, 1
	079 Move X0, [X20]
	080 Or X8, X31, 0x100000001
	081 NotImplemented "Instruction CSINC not yet implemented."
	082 Move [X31+8], X8
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {88}
	086 Call 0x1C17DFC
	087 Move X0, [X20]
	088 Move X8, [X0+184]
	089 Move X0, [X8]
	090 Compare X0, 0
	091 JumpIfEqual {105}
	092 Move X8, 0x961000
	093 Move X2, [X31+8]
	094 Move X8, [X8+1120]
	095 Move X1, X19
	096 Move X3, [X8]
	097 Call Dictionary`2<Object, InputActionReferenceState>.Add, X0, X1, X2
	098 Move X0, X19
	099 Move X1, X31
	100 Call InputAction.Enable, X0
	101 Move X20, [X31+16]
	102 Move X19, [X31+24]
	103 Move X30, [X31+32]
	104 Return 
	105 Call 0x1C17F20

Method: System.Void TryDisableInputAction(UnityEngine.InputSystem.InputActionReference inputActionReference, System.Boolean isComponentDisabling = False)

Disassembly:
	0x037E9AB8 LDR X2, [X8]
	0x037E9ABC BL 0x2A719B8
	0x037E9AC0 STR X20, [X19 + 0x110]
	0x037E9AC4 LDR X8, [X19 + 0x108]
	0x037E9AC8 CBNZ X8, 0x37E9AFC
	0x037E9ACC ADRP X8, 0x90E000
	0x037E9AD0 LDR X8, [X8 + 0x3D8]
	0x037E9AD4 LDR X0, [X8]
	0x037E9AD8 BL 0x1C16F10
	0x037E9ADC ADRP X8, 0x960000
	0x037E9AE0 LDR X8, [X8 + 0x4C8]
	0x037E9AE4 MOV X1, X19
	0x037E9AE8 MOV X3, X31
	0x037E9AEC MOV X20, X0
	0x037E9AF0 LDR X2, [X8]
	0x037E9AF4 BL 0x2A719B8
	0x037E9AF8 STR X20, [X19 + 0x108]
	0x037E9AFC MOV X0, X19
	0x037E9B00 LDP X20, X19, [X31 + 0x10]
	0x037E9B04 MOVZ W1, 0x1
	0x037E9B08 LDR X30, [X31], #0x20
	0x037E9B0C B 0x37EBB88
	0x037E9B10 STP X30, X19, [X31 - 0x10]!
	0x037E9B14 LDR X1, [X0 + 0x78]
	0x037E9B18 MOV X19, X0
	0x037E9B1C BL 0x37E8C30
	0x037E9B20 LDR X1, [X19 + 0x98]
	0x037E9B24 BL 0x37E8C30
	0x037E9B28 LDR X1, [X19 + 0xA8]
	0x037E9B2C BL 0x37E8C30
	0x037E9B30 LDR X1, [X19 + 0xA0]
	0x037E9B34 BL 0x37E8C30
	0x037E9B38 LDR X1, [X19 + 0x80]
	0x037E9B3C BL 0x37E8C30
	0x037E9B40 LDR X1, [X19 + 0x88]
	0x037E9B44 BL 0x37E8C30
	0x037E9B48 LDR X1, [X19 + 0x90]
	0x037E9B4C BL 0x37E8C30
	0x037E9B50 LDR X1, [X19 + 0xB0]
	0x037E9B54 BL 0x37E8C30
	0x037E9B58 LDR X1, [X19 + 0xC0]
	0x037E9B5C BL 0x37E8C30
	0x037E9B60 LDR X1, [X19 + 0xB8]
	0x037E9B64 LDP X30, X19, [X31], #0x10
	0x037E9B68 B 0x37E8C30
	0x037E9B6C STR X30, [X31 - 0x30]!
	0x037E9B70 STP X22, X21, [X31 + 0x10]
	0x037E9B74 STP X20, X19, [X31 + 0x20]
	0x037E9B78 ADRP X22, 0xBF8000
	0x037E9B7C ADRP X21, 0x95C000
	0x037E9B80 ADRP X20, 0x960000
	0x037E9B84 LDRB W8, [X22 + 0x32B]
	0x037E9B88 LDR X21, [X21 + 0x2D8]
	0x037E9B8C LDR X20, [X20 + 0x4D0]
	0x037E9B90 MOV X19, X0
	0x037E9B94 TBNZ X8, 0x0, 0x37E9BB8
	0x037E9B98 ADRP X0, 0x960000
	0x037E9B9C LDR X0, [X0 + 0x4D0]
	0x037E9BA0 BL 0x1C16CF4
	0x037E9BA4 ADRP X0, 0x95C000
	0x037E9BA8 LDR X0, [X0 + 0x2D8]
	0x037E9BAC BL 0x1C16CF4
	0x037E9BB0 MOVZ W8, 0x1
	0x037E9BB4 STRB W8, [X22 + 0x32B]
	0x037E9BB8 MOV X0, X19
	0x037E9BBC BL 0x37E9858
	0x037E9BC0 LDR X8, [X21]
	0x037E9BC4 LDR X1, [X19 + 0x118]
	0x037E9BC8 LDR X2, [X20]
	0x037E9BCC LDR X8, [X8 + 0xB8]
	0x037E9BD0 ADD X0, X8, 0x68
	0x037E9BD4 BL 0x28F1650
	0x037E9BD8 MOV X0, X19
	0x037E9BDC BL 0x37E9C0C
	0x037E9BE0 LDRB W8, [X19 + 0xD4]
	0x037E9BE4 CBZ W8, 0x37E9BF4
	0x037E9BE8 MOV X0, X19
	0x037E9BEC MOV W1, W31
	0x037E9BF0 BL 0x37EBB88
	0x037E9BF4 MOV X0, X19
	0x037E9BF8 LDP X20, X19, [X31 + 0x20]
	0x037E9BFC LDP X22, X21, [X31 + 0x10]
	0x037E9C00 MOV X1, X31
	0x037E9C04 LDR X30, [X31], #0x30
	0x037E9C08 B 0x3E541E0
	0x037E9C0C STP X30, X19, [X31 - 0x10]!
	0x037E9C10 LDR X1, [X0 + 0x78]
	0x037E9C14 MOVZ W2, 0x1
	0x037E9C18 MOV X19, X0
	0x037E9C1C BL 0x37E8AB8
	0x037E9C20 LDR X1, [X19 + 0x98]
	0x037E9C24 MOVZ W2, 0x1
	0x037E9C28 MOV X0, X19
	0x037E9C2C BL 0x37E8AB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBF9000
	007 Move W8, [X22+814]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x961000
	016 Move X0, [X0+1096]
	017 Call 0x1C17CF4
	018 Move X0, 0x961000
	019 Move X0, [X0+1104]
	020 Call 0x1C17CF4
	021 Move X0, 0x961000
	022 Move X0, [X0+1112]
	023 Call 0x1C17CF4
	024 Move X0, 0x961000
	025 Move X0, [X0+888]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+814], W8
	029 Move [X31+8], X31
	030 Compare X19, 0
	031 JumpIfEqual {95}
	032 Move X0, X19
	033 Move X1, X31
	034 Call InputActionReference.get_action, X0
	035 Compare X0, 0
	036 JumpIfEqual {95}
	037 Move X19, X0
	038 Move X0, X21
	039 Move X1, X31
	040 Call Behaviour.get_isActiveAndEnabled, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {49}
	045 Move TEMP, X20
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {95}
	049 Move X20, 0x961000
	050 Move X20, [X20+888]
	051 Move X0, [X20]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {57}
	055 Call 0x1C17DFC
	056 Move X0, [X20]
	057 Move X8, [X0+184]
	058 Move X0, [X8]
	059 Compare X0, 0
	060 JumpIfEqual {119}
	061 Move X8, 0x961000
	062 Move X8, [X8+1104]
	063 Add X2, X31, 8
	064 Move X1, X19
	065 Move X3, [X8]
	066 Call Dictionary`2<Object, InputActionReferenceState>.TryGetValue, X0, X1, X2
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {95}
	071 Move W8, [X31+8]
	072 Subtract W8, W8, 1
	073 Move W9, [X31+12]
	074 Move TEMP, X9
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {101}
	078 Move X0, [X20]
	079 Move [X31+8], W8
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X20]
	085 Move X8, [X0+184]
	086 Move X0, [X8]
	087 Compare X0, 0
	088 JumpIfEqual {119}
	089 Move X8, 0x961000
	090 Move X2, [X31+8]
	091 Move X8, [X8+1112]
	092 Move X1, X19
	093 Move X3, [X8]
	094 Call Dictionary`2<Object, InputActionReferenceState>.set_Item, X0, X1, X2
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X22, [X31+16]
	098 Move X21, [X31+24]
	099 Move X30, [X31+48]
	100 Return 
	101 Move X0, X19
	102 Move X1, X31
	103 Call InputAction.Disable, X0
	104 Move X0, [X20]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {110}
	108 Call 0x1C17DFC
	109 Move X0, [X20]
	110 Move X8, [X0+184]
	111 Move X0, [X8]
	112 Compare X0, 0
	113 JumpIfEqual {119}
	114 Move X8, 0x961000
	115 Move X8, [X8+1096]
	116 Move X1, X19
	117 Move X2, [X8]
	118 Call Dictionary`2<Object, InputActionReferenceState>.Remove, X0, X1
	119 Call 0x1C17F20

Method: System.Int32 GetPointerStateIndexFor(System.Int32 pointerOrTouchId)

Disassembly:
	0x037E69C8 BL 0x1C16CF4
	0x037E69CC ADRP X0, 0x963000
	0x037E69D0 LDR X0, [X0 + 0x3A8]
	0x037E69D4 BL 0x1C16CF4
	0x037E69D8 ADRP X0, 0x963000
	0x037E69DC LDR X0, [X0 + 0x3B0]
	0x037E69E0 BL 0x1C16CF4
	0x037E69E4 ADRP X0, 0x963000
	0x037E69E8 LDR X0, [X0 + 0x3B8]
	0x037E69EC BL 0x1C16CF4
	0x037E69F0 ADRP X0, 0x963000
	0x037E69F4 LDR X0, [X0 + 0x3C0]
	0x037E69F8 BL 0x1C16CF4
	0x037E69FC ADRP X0, 0x935000
	0x037E6A00 LDR X0, [X0 + 0x9F8]
	0x037E6A04 BL 0x1C16CF4
	0x037E6A08 ADRP X0, 0x935000
	0x037E6A0C LDR X0, [X0 + 0xED0]
	0x037E6A10 BL 0x1C16CF4
	0x037E6A14 ADRP X0, 0x935000
	0x037E6A18 LDR X0, [X0 + 0xEC8]
	0x037E6A1C BL 0x1C16CF4
	0x037E6A20 ADRP X0, 0x90D000
	0x037E6A24 LDR X0, [X0 + 0x598]
	0x037E6A28 BL 0x1C16CF4
	0x037E6A2C MOVZ W8, 0x1
	0x037E6A30 STRB W8, [X21 + 0x321]
	0x037E6A34 CBZ X19, 0x37E7190
	0x037E6A38 ADRP X25, 0x90D000
	0x037E6A3C LDR X25, [X25 + 0x598]
	0x037E6A40 LDR X21, [X19 + 0x50]
	0x037E6A44 LDR X0, [X25]
	0x037E6A48 LDR W8, [X0 + 0xE0]
	0x037E6A4C CBNZ W8, 0x37E6A54
	0x037E6A50 BL 0x1C16DFC
	0x037E6A54 MOV X0, X21
	0x037E6A58 MOV X1, X31
	0x037E6A5C MOV X2, X31
	0x037E6A60 BL 0x3C354F8
	0x037E6A64 TBZ X0, 0x0, 0x37E6AA0
	0x037E6A68 CBZ X21, 0x37E7190
	0x037E6A6C MOV X0, X21
	0x037E6A70 MOV X1, X31
	0x037E6A74 BL 0x3C356F8
	0x037E6A78 MOV X1, X0
	0x037E6A7C MOV X0, X22
	0x037E6A80 BL 0x37E7634
	0x037E6A84 TBZ X0, 0x0, 0x37E6AA0
	0x037E6A88 LDP X20, X19, [X31 + 0x40]
	0x037E6A8C LDP X22, X21, [X31 + 0x30]
	0x037E6A90 LDP X24, X23, [X31 + 0x20]
	0x037E6A94 LDP X26, X25, [X31 + 0x10]
	0x037E6A98 LDR X30, [X31], #0x50
	0x037E6A9C RET
	0x037E6AA0 LDR W8, [X20 + 0x4]
	0x037E6AA4 ANDS W31, W8, 0xFFFFFFFD
	0x037E6AA8 B.NE 0x37E6E2C
	0x037E6AAC ADRP X8, 0x935000
	0x037E6AB0 LDR X8, [X8 + 0xEC8]
	0x037E6AB4 LDR X8, [X8]
	0x037E6AB8 LDR X8, [X8 + 0xB8]
	0x037E6ABC LDR X23, [X8]
	0x037E6AC0 CBZ X23, 0x37E7190
	0x037E6AC4 ADRP X10, 0x935000
	0x037E6AC8 LDR X8, [X23]
	0x037E6ACC LDR X10, [X10 + 0xED0]
	0x037E6AD0 LDRH W9, [X8 + 0x12E]
	0x037E6AD4 LDR X1, [X10]
	0x037E6AD8 CBZ X9, 0x37E6AFC
	0x037E6ADC LDR X10, [X8 + 0xB0]
	0x037E6AE0 ADD X10, X10, 0x8
	0x037E6AE4 LDUR X11, [X10 - 0x8]
	0x037E6AE8 CMP X11, X1
	0x037E6AEC B.EQ 0x37E6B0C
	0x037E6AF0 SUBS X9, X9, 0x1
	0x037E6AF4 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-64], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Subtract X31, X31, 544
	009 Move X20, 0xBFC000
	010 Move W8, [X20+815]
	011 Move W19, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x964000
	018 Move X0, [X0+776]
	019 Call 0x1C17CF4
	020 Move X0, 0x964000
	021 Move X0, [X0+792]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+815], W8
	025 Move W8, [X21+288]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W20, [X21+292]
	028 Move W8, [X21+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X23, 0x964000
	031 Move X23, [X23+792]
	032 Move W20, W31
	033 Add X22, X21, 304
	034 Move X2, [X23]
	035 Move X0, X22
	036 Move W1, W20
	037 Call InlinedArray`1<Int32>.get_Item, X0, X1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W8, [X22]
	040 Add W20, W20, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W8, [X21+344]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X22, 0x964000
	045 Move X22, [X22+776]
	046 Move W20, W31
	047 Add X21, X21, 344
	048 Move X2, [X22]
	049 Add X8, X31, 0
	050 Move X0, X21
	051 Move W1, W20
	052 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	053 Move X8, [X31+464]
	054 Compare X8, 0
	055 JumpIfEqual {81}
	056 Move W9, [X8+400]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Compare W9, 0
	059 JumpIfEqual {65}
	060 Move X8, [X8+392]
	061 Compare X8, 0
	062 JumpIfEqual {81}
	063 Move W8, [X8+224]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W8, [X21]
	066 Add W20, W20, 1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move TEMP, 0
	069 Not TEMP
	070 Move W20, TEMP
	071 Move W0, W20
	072 Add X31, X31, 544
	073 Move X20, [X31+48]
	074 Move X19, [X31+56]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X30, [X31+16]
	078 Move X23, [X31+24]
	079 Move X29, [X31+64]
	080 Return X0
	081 Call 0x1C17F20

Method: UnityEngine.InputSystem.UI.PointerModel GetPointerStateForIndex(System.Int32 index)

Disassembly:
	0x037EAD80 BL 0x37E9CB4
	0x037EAD84 SUB W20, W20, 0x1
	0x037EAD88 LDR W8, [X19 + 0x158]
	0x037EAD8C ADD W20, W20, 0x1
	0x037EAD90 CMP W20, W8
	0x037EAD94 B.LT 0x37EACE0
	0x037EAD98 STRB W31, [X19 + 0xD5]
	0x037EAD9C LDP X20, X19, [X31 + 0x20]
	0x037EADA0 LDP X22, X21, [X31 + 0x10]
	0x037EADA4 LDP X30, X23, [X31], #0x30
	0x037EADA8 RET
	0x037EADAC BL 0x1C16F20
	0x037EADB0 SUB X31, X31, 0x30
	0x037EADB4 STP X2, X30, [X31 + 0x8]
	0x037EADB8 STP X20, X19, [X31 + 0x20]
	0x037EADBC ADRP X20, 0xBF7000
	0x037EADC0 LDRB W8, [X20 + 0x337]

ISIL:
	001 Move [X31-16], X30
	002 Compare W1, 0
	003 JumpIfEqual {13}
	004 Move X8, [X0+896]
	005 Compare X8, 0
	006 JumpIfEqual {16}
	007 Move W10, [X8+24]
	008 Subtract W9, W1, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W10, 544
	011 NotImplemented "Instruction SMADDL not yet implemented."
	012 Add X0, X8, 32
	013 Add X0, X0, 352
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20
	017 Call 0x1C17F28

Method: System.Int32 GetDisplayIndexFor(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x037EADC4 MOV X19, X0
	0x037EADC8 STR X1, [X31]
	0x037EADCC TBNZ X8, 0x0, 0x37EADE4
	0x037EADD0 ADRP X0, 0x95F000
	0x037EADD4 LDR X0, [X0 + 0x540]
	0x037EADD8 BL 0x1C16CF4
	0x037EADDC MOVZ W8, 0x1
	0x037EADE0 STRB W8, [X20 + 0x337]
	0x037EADE4 ADD X1, X31, 0x0
	0x037EADE8 MOV X0, X19
	0x037EADEC BL 0x37E9ED0
	0x037EADF0 TBNZ X0, 0x0, 0x37EAEA8
	0x037EADF4 ADD X0, X31, 0x0
	0x037EADF8 MOV X1, X31
	0x037EADFC BL 0x3735E24
	0x037EAE00 TBNZ X0, 0x0, 0x37EAEA8
	0x037EAE04 ADD X0, X31, 0x0
	0x037EAE08 MOV X1, X31
	0x037EAE0C BL 0x3735E8C
	0x037EAE10 MOV X1, X0
	0x037EAE14 MOVZ W2, 0x1
	0x037EAE18 MOV X0, X19
	0x037EAE1C BL 0x37E9F34
	0x037EAE20 ADDS W31, W0, 0x1
	0x037EAE24 B.EQ 0x37EAEA8
	0x037EAE28 MOV W1, W0
	0x037EAE2C MOV X0, X19
	0x037EAE30 BL 0x37E9D80
	0x037EAE34 ADRP X8, 0x95F000
	0x037EAE38 LDR X8, [X8 + 0x540]
	0x037EAE3C MOV X19, X0
	0x037EAE40 ADD X0, X31, 0x0
	0x037EAE44 LDR X1, [X8]
	0x037EAE48 BL 0x22B4CFC
	0x037EAE4C LDR V2, [X19 + 0x1D8]
	0x037EAE50 LDR V3, [X19 + 0x1DC]
	0x037EAE54 ADRP X8, 0xFFFFFFFFFD2FF000
	0x037EAE58 LDR V4, [X8 + 0xF20]
	0x037EAE5C FSUB S2, S2, S0
	0x037EAE60 FSUB S3, S3, S1
	0x037EAE64 FMUL S2, S2, S2
	0x037EAE68 FMUL S3, S3, S3
	0x037EAE6C FADD S2, S2, S3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBF8000
	005 Move W8, [X20+816]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x960000
	012 Move X0, [X0+752]
	013 Call 0x1C17CF4
	014 Move X0, 0x95E000
	015 Move X0, [X0+960]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+816], W8
	019 Compare X19, 0
	020 JumpIfEqual {51}
	021 Move X8, [X19+120]
	022 Compare X8, 0
	023 JumpIfEqual {35}
	024 Move X9, 0x95E000
	025 Move X9, [X9+960]
	026 Move X10, [X8]
	027 Move X9, [X9]
	028 Move W12, [X10+304]
	029 Move W11, [X9+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X10, [X10+200]
	032 Add X10, X10, X11
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move W0, W31
	038 Move X30, [X31+32]
	039 Return X0
	040 Move X0, [X8+408]
	041 Compare X0, 0
	042 JumpIfEqual {51}
	043 Move X8, 0x960000
	044 Move X8, [X8+752]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, [X8]
	048 Move X30, [X31+32]
	049 Call InputControl`1<Int32>.ReadValue, X0
	050 Return X0
	051 Call 0x1C17F20

Method: System.Int32 GetPointerStateIndexFor(ref UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EAE70 FCMP S2, S4
	0x037EAE74 B.MI 0x37EAE88
	0x037EAE78 MOVZ W8, 0x1
	0x037EAE7C STR S0, [X19 + 0x1D8]
	0x037EAE80 STR S1, [X19 + 0x1DC]
	0x037EAE84 STRB W8, [X19]
	0x037EAE88 LDR X19, [X19 + 0x1D0]
	0x037EAE8C ADD X0, X31, 0x0
	0x037EAE90 MOV X1, X31
	0x037EAE94 BL 0x3735E8C
	0x037EAE98 MOV X1, X0
	0x037EAE9C BL 0x37E9DC4
	0x037EAEA0 CBZ X19, 0x37EAEB8
	0x037EAEA4 STR W0, [X19 + 0xFC]
	0x037EAEA8 LDP X20, X19, [X31 + 0x20]
	0x037EAEAC LDR X30, [X31 + 0x10]
	0x037EAEB0 ADD X31, X31, 0x30
	0x037EAEB4 RET
	0x037EAEB8 BL 0x1C16F20
	0x037EAEBC STP X30, X21, [X31 - 0x20]!
	0x037EAEC0 STP X20, X19, [X31 + 0x10]
	0x037EAEC4 ADRP X21, 0xBF7000
	0x037EAEC8 LDRB W8, [X21 + 0x338]
	0x037EAECC MOV W19, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X19, X0
	007 Call InputSystemUIInputModule.CheckForRemovedDevice, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {20}
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move TEMP, 0
	015 Not TEMP
	016 Move W0, TEMP
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return X0
	020 Move X0, X20
	021 Move X1, X31
	022 Call CallbackContext.get_phase, X0
	023 Move W21, W0
	024 Move X0, X20
	025 Move X1, X31
	026 Call CallbackContext.get_control, X0
	027 Move X1, X0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1, X2
	036 Return X0

Method: System.Int32 GetPointerStateIndexFor(UnityEngine.InputSystem.InputControl control, System.Boolean createIfNotExists = True)

Disassembly:
	0x037EAF34 LDR X8, [X21]
	0x037EAF38 LDR X10, [X10 + 0xED0]
	0x037EAF3C LDRH W9, [X8 + 0x12E]
	0x037EAF40 LDR X1, [X10]
	0x037EAF44 CBZ X9, 0x37EAF68
	0x037EAF48 LDR X10, [X8 + 0xB0]
	0x037EAF4C ADD X10, X10, 0x8
	0x037EAF50 LDUR X11, [X10 - 0x8]
	0x037EAF54 CMP X11, X1
	0x037EAF58 B.EQ 0x37EAF78
	0x037EAF5C SUBS X9, X9, 0x1
	0x037EAF60 ADD X10, X10, 0x10
	0x037EAF64 B.NE 0x37EAF50
	0x037EAF68 MOVZ W2, 0xE
	0x037EAF6C MOV X0, X21
	0x037EAF70 BL 0x1C5C788
	0x037EAF74 B 0x37EAF88
	0x037EAF78 LDR W9, [X10]
	0x037EAF7C ADD W9, W9, 0xE
	0x037EAF80 ADD X8, X8, W9, 0x4, SXTW
	0x037EAF84 ADD X0, X8, 0x138
	0x037EAF88 LDP X8, X1, [X0]
	0x037EAF8C MOV X0, X21
	0x037EAF90 BLR X8
	0x037EAF94 TBZ X0, 0x0, 0x37EAFA0
	0x037EAF98 MOV W8, W31
	0x037EAF9C B 0x37EAFC8
	0x037EAFA0 MOV X0, X20
	0x037EAFA4 MOV X1, X31
	0x037EAFA8 BL 0x3735E8C
	0x037EAFAC CBZ X0, 0x37EAFDC
	0x037EAFB0 LDR X0, [X0 + 0x78]
	0x037EAFB4 CBZ X0, 0x37EAFDC
	0x037EAFB8 MOV X1, X31
	0x037EAFBC BL 0x377A960
	0x037EAFC0 ORN W8, W31, W0, 0x0
	0x037EAFC4 AND W8, W8, 0x1
	0x037EAFC8 ANDS W31, W19, W8, 0x0
	0x037EAFCC CSET W0, NE
	0x037EAFD0 LDP X20, X19, [X31 + 0x10]
	0x037EAFD4 LDP X30, X21, [X31], #0x20
	0x037EAFD8 RET
	0x037EAFDC BL 0x1C16F20
	0x037EAFE0 SUB X31, X31, 0x30
	0x037EAFE4 STP X2, X30, [X31 + 0x8]
	0x037EAFE8 STP X20, X19, [X31 + 0x20]
	0x037EAFEC STR X1, [X31]
	0x037EAFF0 ADD X1, X31, 0x0
	0x037EAFF4 MOV X19, X0
	0x037EAFF8 BL 0x37E9E70
	0x037EAFFC ADDS W31, W0, 0x1
	0x037EB000 B.EQ 0x37EB0B4
	0x037EB004 MOV W1, W0
	0x037EB008 MOV X0, X19
	0x037EB00C BL 0x37E9D80
	0x037EB010 LDRB W20, [X0 + 0x8]
	0x037EB014 MOV X19, X0
	0x037EB018 ADD X0, X31, 0x0
	0x037EB01C MOV X1, X31
	0x037EB020 BL 0x3736260
	0x037EB024 LDRB W9, [X19 + 0x8]
	0x037EB028 AND W8, W0, 0x1
	0x037EB02C CMP W9, W8
	0x037EB030 B.EQ 0x37EB074
	0x037EB034 LDR W9, [X19 + 0xC]
	0x037EB038 STRB W8, [X19 + 0x8]
	0x037EB03C CBZ W8, 0x37EB050
	0x037EB040 CMP W9, 0x3
	0x037EB044 B.NE 0x37EB050
	0x037EB048 STR W31, [X19 + 0xC]
	0x037EB04C B 0x37EB074
	0x037EB050 TBNZ X8, 0x0, 0x37EB064
	0x037EB054 CMP W9, 0x3
	0x037EB058 B.NE 0x37EB064
	0x037EB05C MOVZ W8, 0x1
	0x037EB060 B 0x37EB070
	0x037EB064 TBNZ X8, 0x0, 0x37EB074
	0x037EB068 CBNZ W9, 0x37EB074
	0x037EB06C MOVZ W8, 0x2
	0x037EB070 STR W8, [X19 + 0xC]
	0x037EB074 CMP W20, 0x0
	0x037EB078 MOVZ W20, 0x1
	0x037EB07C CSET W2, NE
	0x037EB080 ADD X1, X31, 0x0
	0x037EB084 STRB W20, [X19]
	0x037EB088 BL 0x37EAEBC
	0x037EB08C TBZ X0, 0x0, 0x37EB094
	0x037EB090 STRB W20, [X19 + 0x9A]
	0x037EB094 LDR X19, [X19 + 0x1D0]
	0x037EB098 ADD X0, X31, 0x0
	0x037EB09C MOV X1, X31
	0x037EB0A0 BL 0x3735E8C
	0x037EB0A4 MOV X1, X0
	0x037EB0A8 BL 0x37E9DC4
	0x037EB0AC CBZ X19, 0x37EB0C4
	0x037EB0B0 STR W0, [X19 + 0xFC]
	0x037EB0B4 LDP X20, X19, [X31 + 0x20]
	0x037EB0B8 LDR X30, [X31 + 0x10]
	0x037EB0BC ADD X31, X31, 0x30
	0x037EB0C0 RET
	0x037EB0C4 BL 0x1C16F20
	0x037EB0C8 LDRB W8, [X0]
	0x037EB0CC AND W9, W1, 0x1
	0x037EB0D0 CMP W8, W9
	0x037EB0D4 B.EQ 0x37EB118
	0x037EB0D8 LDR W8, [X0 + 0x4]
	0x037EB0DC STRB W9, [X0]
	0x037EB0E0 CMP W8, 0x3
	0x037EB0E4 B.NE 0x37EB0F4
	0x037EB0E8 TBZ X1, 0x0, 0x37EB0F4
	0x037EB0EC STR W31, [X0 + 0x4]
	0x037EB0F0 RET
	0x037EB0F4 CMP W8, 0x3
	0x037EB0F8 B.NE 0x37EB108
	0x037EB0FC TBNZ X1, 0x0, 0x37EB108
	0x037EB100 MOVZ W8, 0x1
	0x037EB104 B 0x37EB114
	0x037EB108 CBNZ W8, 0x37EB118
	0x037EB10C TBNZ X1, 0x0, 0x37EB118
	0x037EB110 MOVZ W8, 0x2
	0x037EB114 STR W8, [X0 + 0x4]
	0x037EB118 RET
	0x037EB11C SUB X31, X31, 0x30
	0x037EB120 STP X2, X30, [X31 + 0x8]
	0x037EB124 STP X20, X19, [X31 + 0x20]
	0x037EB128 STR X1, [X31]
	0x037EB12C ADD X1, X31, 0x0
	0x037EB130 MOV X19, X0
	0x037EB134 BL 0x37E9E70
	0x037EB138 ADDS W31, W0, 0x1
	0x037EB13C B.EQ 0x37EB1F0
	0x037EB140 MOV W1, W0
	0x037EB144 MOV X0, X19
	0x037EB148 BL 0x37E9D80
	0x037EB14C LDRB W20, [X0 + 0xA0]
	0x037EB150 MOV X19, X0
	0x037EB154 ADD X0, X31, 0x0
	0x037EB158 MOV X1, X31
	0x037EB15C BL 0x3736260
	0x037EB160 LDRB W9, [X19 + 0xA0]
	0x037EB164 AND W8, W0, 0x1
	0x037EB168 CMP W9, W8
	0x037EB16C B.EQ 0x37EB1B0
	0x037EB170 LDR W9, [X19 + 0xA4]
	0x037EB174 STRB W8, [X19 + 0xA0]
	0x037EB178 CBZ W8, 0x37EB18C
	0x037EB17C CMP W9, 0x3
	0x037EB180 B.NE 0x37EB18C
	0x037EB184 STR W31, [X19 + 0xA4]
	0x037EB188 B 0x37EB1B0
	0x037EB18C TBNZ X8, 0x0, 0x37EB1A0
	0x037EB190 CMP W9, 0x3
	0x037EB194 B.NE 0x37EB1A0
	0x037EB198 MOVZ W8, 0x1
	0x037EB19C B 0x37EB1AC
	0x037EB1A0 TBNZ X8, 0x0, 0x37EB1B0
	0x037EB1A4 CBNZ W9, 0x37EB1B0
	0x037EB1A8 MOVZ W8, 0x2
	0x037EB1AC STR W8, [X19 + 0xA4]
	0x037EB1B0 CMP W20, 0x0
	0x037EB1B4 MOVZ W20, 0x1
	0x037EB1B8 CSET W2, NE
	0x037EB1BC ADD X1, X31, 0x0
	0x037EB1C0 STRB W20, [X19]
	0x037EB1C4 BL 0x37EAEBC
	0x037EB1C8 TBZ X0, 0x0, 0x37EB1D0
	0x037EB1CC STRB W20, [X19 + 0x132]
	0x037EB1D0 LDR X19, [X19 + 0x1D0]
	0x037EB1D4 ADD X0, X31, 0x0
	0x037EB1D8 MOV X1, X31
	0x037EB1DC BL 0x3735E8C
	0x037EB1E0 MOV X1, X0
	0x037EB1E4 BL 0x37E9DC4
	0x037EB1E8 CBZ X19, 0x37EB200
	0x037EB1EC STR W0, [X19 + 0xFC]
	0x037EB1F0 LDP X20, X19, [X31 + 0x20]
	0x037EB1F4 LDR X30, [X31 + 0x10]
	0x037EB1F8 ADD X31, X31, 0x30
	0x037EB1FC RET
	0x037EB200 BL 0x1C16F20
	0x037EB204 SUB X31, X31, 0x30
	0x037EB208 STP X2, X30, [X31 + 0x8]
	0x037EB20C STP X20, X19, [X31 + 0x20]
	0x037EB210 STR X1, [X31]
	0x037EB214 ADD X1, X31, 0x0
	0x037EB218 MOV X19, X0
	0x037EB21C BL 0x37E9E70
	0x037EB220 ADDS W31, W0, 0x1
	0x037EB224 B.EQ 0x37EB2D8
	0x037EB228 MOV W1, W0
	0x037EB22C MOV X0, X19
	0x037EB230 BL 0x37E9D80
	0x037EB234 LDRB W20, [X0 + 0x138]
	0x037EB238 MOV X19, X0
	0x037EB23C ADD X0, X31, 0x0
	0x037EB240 MOV X1, X31
	0x037EB244 BL 0x3736260
	0x037EB248 LDRB W9, [X19 + 0x138]
	0x037EB24C AND W8, W0, 0x1
	0x037EB250 CMP W9, W8
	0x037EB254 B.EQ 0x37EB298
	0x037EB258 LDR W9, [X19 + 0x13C]
	0x037EB25C STRB W8, [X19 + 0x138]
	0x037EB260 CBZ W8, 0x37EB274
	0x037EB264 CMP W9, 0x3
	0x037EB268 B.NE 0x37EB274
	0x037EB26C STR W31, [X19 + 0x13C]
	0x037EB270 B 0x37EB298
	0x037EB274 TBNZ X8, 0x0, 0x37EB288
	0x037EB278 CMP W9, 0x3
	0x037EB27C B.NE 0x37EB288
	0x037EB280 MOVZ W8, 0x1
	0x037EB284 B 0x37EB294
	0x037EB288 TBNZ X8, 0x0, 0x37EB298
	0x037EB28C CBNZ W9, 0x37EB298
	0x037EB290 MOVZ W8, 0x2
	0x037EB294 STR W8, [X19 + 0x13C]
	0x037EB298 CMP W20, 0x0
	0x037EB29C MOVZ W20, 0x1
	0x037EB2A0 CSET W2, NE
	0x037EB2A4 ADD X1, X31, 0x0
	0x037EB2A8 STRB W20, [X19]
	0x037EB2AC BL 0x37EAEBC
	0x037EB2B0 TBZ X0, 0x0, 0x37EB2B8
	0x037EB2B4 STRB W20, [X19 + 0x1CA]
	0x037EB2B8 LDR X19, [X19 + 0x1D0]
	0x037EB2BC ADD X0, X31, 0x0
	0x037EB2C0 MOV X1, X31
	0x037EB2C4 BL 0x3735E8C
	0x037EB2C8 MOV X1, X0
	0x037EB2CC BL 0x37E9DC4
	0x037EB2D0 CBZ X19, 0x37EB2E8
	0x037EB2D4 STR W0, [X19 + 0xFC]
	0x037EB2D8 LDP X20, X19, [X31 + 0x20]
	0x037EB2DC LDR X30, [X31 + 0x10]
	0x037EB2E0 ADD X31, X31, 0x30
	0x037EB2E4 RET
	0x037EB2E8 BL 0x1C16F20
	0x037EB2EC SUB X31, X31, 0x30
	0x037EB2F0 STP X2, X30, [X31 + 0x8]
	0x037EB2F4 STP X20, X19, [X31 + 0x20]
	0x037EB2F8 ADRP X20, 0xBF6000
	0x037EB2FC LDRB W8, [X20 + 0x339]
	0x037EB300 MOV X19, X0
	0x037EB304 STR X1, [X31]
	0x037EB308 TBNZ X8, 0x0, 0x37EB320
	0x037EB30C ADRP X0, 0x95E000
	0x037EB310 LDR X0, [X0 + 0x540]
	0x037EB314 BL 0x1C16CF4
	0x037EB318 MOVZ W8, 0x1
	0x037EB31C STRB W8, [X20 + 0x339]
	0x037EB320 ADD X1, X31, 0x0
	0x037EB324 MOV X0, X19
	0x037EB328 BL 0x37E9E70
	0x037EB32C ADDS W31, W0, 0x1
	0x037EB330 B.EQ 0x37EB3C4
	0x037EB334 ADRP X20, 0x95E000
	0x037EB338 LDR X20, [X20 + 0x540]
	0x037EB33C MOV W1, W0
	0x037EB340 MOV X0, X19
	0x037EB344 BL 0x37E9D80
	0x037EB348 LDR X1, [X20]
	0x037EB34C MOV X19, X0
	0x037EB350 ADD X0, X31, 0x0
	0x037EB354 BL 0x22B4CFC
	0x037EB358 ADRP X8, 0xFFFFFFFFFD2FF000
	0x037EB35C LDR V3, [X8 + 0x200]
	0x037EB360 LDR V4, [X19 + 0x1E0]
	0x037EB364 LDR V5, [X19 + 0x1E4]
	0x037EB368 ADRP X8, 0xFFFFFFFFFD2FE000
	0x037EB36C FMUL S2, S0, S3
	0x037EB370 FMUL S0, S1, S3
	0x037EB374 LDR V1, [X8 + 0xF20]
	0x037EB378 FSUB S3, S4, S2
	0x037EB37C FSUB S4, S5, S0
	0x037EB380 FMUL S3, S3, S3
	0x037EB384 FMUL S4, S4, S4
	0x037EB388 FADD S3, S3, S4
	0x037EB38C FCMP S3, S1
	0x037EB390 B.MI 0x37EB3A4
	0x037EB394 MOVZ W8, 0x1
	0x037EB398 STR S2, [X19 + 0x1E0]
	0x037EB39C STRB W8, [X19]
	0x037EB3A0 STR S0, [X19 + 0x1E4]
	0x037EB3A4 LDR X19, [X19 + 0x1D0]
	0x037EB3A8 ADD X0, X31, 0x0
	0x037EB3AC MOV X1, X31
	0x037EB3B0 BL 0x3735E8C
	0x037EB3B4 MOV X1, X0
	0x037EB3B8 BL 0x37E9DC4
	0x037EB3BC CBZ X19, 0x37EB3D4
	0x037EB3C0 STR W0, [X19 + 0xFC]
	0x037EB3C4 LDP X20, X19, [X31 + 0x20]
	0x037EB3C8 LDR X30, [X31 + 0x10]
	0x037EB3CC ADD X31, X31, 0x30
	0x037EB3D0 RET
	0x037EB3D4 BL 0x1C16F20
	0x037EB3D8 LDR V2, [X0 + 0x1E0]
	0x037EB3DC LDR V3, [X0 + 0x1E4]
	0x037EB3E0 ADRP X8, 0xFFFFFFFFFD2FE000
	0x037EB3E4 LDR V4, [X8 + 0xF20]
	0x037EB3E8 FSUB S2, S2, S0
	0x037EB3EC FSUB S3, S3, S1
	0x037EB3F0 FMUL S2, S2, S2
	0x037EB3F4 FMUL S3, S3, S3
	0x037EB3F8 FADD S2, S2, S3
	0x037EB3FC FCMP S2, S4
	0x037EB400 B.MI 0x37EB414
	0x037EB404 MOVZ W8, 0x1
	0x037EB408 STR S0, [X0 + 0x1E0]
	0x037EB40C STRB W8, [X0]
	0x037EB410 STR S1, [X0 + 0x1E4]
	0x037EB414 RET
	0x037EB418 SUB X31, X31, 0x30
	0x037EB41C STP X30, X21, [X31 + 0x10]
	0x037EB420 STP X20, X19, [X31 + 0x20]
	0x037EB424 ADRP X20, 0xBF6000
	0x037EB428 STP X1, X2, [X31]
	0x037EB42C ADRP X21, 0x95E000
	0x037EB430 LDRB W8, [X20 + 0x33A]
	0x037EB434 LDR X21, [X21 + 0x540]
	0x037EB438 MOV X19, X0
	0x037EB43C TBNZ X8, 0x0, 0x37EB454
	0x037EB440 ADRP X0, 0x95E000
	0x037EB444 LDR X0, [X0 + 0x540]
	0x037EB448 BL 0x1C16CF4
	0x037EB44C MOVZ W8, 0x1
	0x037EB450 STRB W8, [X20 + 0x33A]
	0x037EB454 LDR X1, [X21]
	0x037EB458 ADD X0, X31, 0x0
	0x037EB45C BL 0x22B4CFC
	0x037EB460 STR S0, [X19 + 0x388]
	0x037EB464 STR S1, [X19 + 0x38C]
	0x037EB468 LDP X20, X19, [X31 + 0x20]
	0x037EB46C LDP X30, X21, [X31 + 0x10]
	0x037EB470 ADD X31, X31, 0x30
	0x037EB474 RET
	0x037EB478 SUB X31, X31, 0x30
	0x037EB47C STP X2, X30, [X31 + 0x8]
	0x037EB480 STP X20, X19, [X31 + 0x20]
	0x037EB484 ADRP X20, 0xBF6000
	0x037EB488 LDRB W8, [X20 + 0x33B]
	0x037EB48C MOV X19, X0
	0x037EB490 STR X1, [X31]
	0x037EB494 TBNZ X8, 0x0, 0x37EB4AC
	0x037EB498 ADRP X0, 0x95D000
	0x037EB49C LDR X0, [X0 + 0xDD0]
	0x037EB4A0 BL 0x1C16CF4
	0x037EB4A4 MOVZ W8, 0x1
	0x037EB4A8 STRB W8, [X20 + 0x33B]
	0x037EB4AC ADD X1, X31, 0x0
	0x037EB4B0 MOV X0, X19
	0x037EB4B4 BL 0x37E9E70
	0x037EB4B8 ADDS W31, W0, 0x1
	0x037EB4BC B.EQ 0x37EB50C
	0x037EB4C0 ADRP X20, 0x95D000
	0x037EB4C4 LDR X20, [X20 + 0xDD0]
	0x037EB4C8 MOV W1, W0
	0x037EB4CC MOV X0, X19
	0x037EB4D0 BL 0x37E9D80
	0x037EB4D4 LDR X1, [X20]
	0x037EB4D8 MOV X19, X0
	0x037EB4DC ADD X0, X31, 0x0
	0x037EB4E0 BL 0x22B4B44
	0x037EB4E4 MOV X0, X19
	0x037EB4E8 BL 0x37EB520
	0x037EB4EC LDR X19, [X19 + 0x1D0]
	0x037EB4F0 ADD X0, X31, 0x0
	0x037EB4F4 MOV X1, X31
	0x037EB4F8 BL 0x3735E8C
	0x037EB4FC MOV X1, X0
	0x037EB500 BL 0x37E9DC4
	0x037EB504 CBZ X19, 0x37EB51C
	0x037EB508 STR W0, [X19 + 0xFC]
	0x037EB50C LDP X20, X19, [X31 + 0x20]
	0x037EB510 LDR X30, [X31 + 0x10]
	0x037EB514 ADD X31, X31, 0x30
	0x037EB518 RET
	0x037EB51C BL 0x1C16F20
	0x037EB520 LDR V4, [X0 + 0x1F4]
	0x037EB524 LDR V5, [X0 + 0x1F8]
	0x037EB528 LDR V6, [X0 + 0x1FC]
	0x037EB52C LDR V7, [X0 + 0x200]
	0x037EB530 ADRP X8, 0xFFFFFFFFFD2FF000
	0x037EB534 FMUL S4, S0, S4
	0x037EB538 FMUL S5, S1, S5
	0x037EB53C FADD S4, S4, S5
	0x037EB540 LDR V5, [X8 + 0x1B4]
	0x037EB544 FMUL S6, S2, S6
	0x037EB548 FADD S4, S6, S4
	0x037EB54C FMUL S6, S3, S7
	0x037EB550 FADD S4, S6, S4
	0x037EB554 FCMP S4, S5
	0x037EB558 B.GT 0x37EB574
	0x037EB55C MOVZ W8, 0x1
	0x037EB560 STR S0, [X0 + 0x1F4]
	0x037EB564 STR S1, [X0 + 0x1F8]
	0x037EB568 STR S2, [X0 + 0x1FC]
	0x037EB56C STR S3, [X0 + 0x200]
	0x037EB570 STRB W8, [X0]
	0x037EB574 RET
	0x037EB578 SUB X31, X31, 0x30
	0x037EB57C STP X2, X30, [X31 + 0x8]
	0x037EB580 STP X20, X19, [X31 + 0x20]
	0x037EB584 ADRP X20, 0xBF6000
	0x037EB588 LDRB W8, [X20 + 0x33C]
	0x037EB58C MOV X19, X0
	0x037EB590 STR X1, [X31]
	0x037EB594 TBNZ X8, 0x0, 0x37EB5AC
	0x037EB598 ADRP X0, 0x95D000
	0x037EB59C LDR X0, [X0 + 0xDC8]
	0x037EB5A0 BL 0x1C16CF4
	0x037EB5A4 MOVZ W8, 0x1
	0x037EB5A8 STRB W8, [X20 + 0x33C]
	0x037EB5AC ADD X1, X31, 0x0
	0x037EB5B0 MOV X0, X19
	0x037EB5B4 BL 0x37E9E70
	0x037EB5B8 ADDS W31, W0, 0x1
	0x037EB5BC B.EQ 0x37EB60C
	0x037EB5C0 ADRP X20, 0x95D000
	0x037EB5C4 LDR X20, [X20 + 0xDC8]
	0x037EB5C8 MOV W1, W0
	0x037EB5CC MOV X0, X19
	0x037EB5D0 BL 0x37E9D80
	0x037EB5D4 LDR X1, [X20]
	0x037EB5D8 MOV X19, X0
	0x037EB5DC ADD X0, X31, 0x0
	0x037EB5E0 BL 0x22B4DCC
	0x037EB5E4 MOV X0, X19
	0x037EB5E8 BL 0x37EB620
	0x037EB5EC LDR X19, [X19 + 0x1D0]
	0x037EB5F0 ADD X0, X31, 0x0
	0x037EB5F4 MOV X1, X31
	0x037EB5F8 BL 0x3735E8C
	0x037EB5FC MOV X1, X0
	0x037EB600 BL 0x37E9DC4
	0x037EB604 CBZ X19, 0x37EB61C
	0x037EB608 STR W0, [X19 + 0xFC]
	0x037EB60C LDP X20, X19, [X31 + 0x20]
	0x037EB610 LDR X30, [X31 + 0x10]
	0x037EB614 ADD X31, X31, 0x30
	0x037EB618 RET
	0x037EB61C BL 0x1C16F20
	0x037EB620 LDR V3, [X0 + 0x1E8]
	0x037EB624 LDR V4, [X0 + 0x1EC]
	0x037EB628 LDR V5, [X0 + 0x1F0]
	0x037EB62C ADRP X8, 0xFFFFFFFFFD2FE000
	0x037EB630 FSUB S3, S3, S0
	0x037EB634 FSUB S4, S4, S1
	0x037EB638 FMUL S3, S3, S3
	0x037EB63C FMUL S4, S4, S4
	0x037EB640 FADD S3, S3, S4
	0x037EB644 LDR V4, [X8 + 0xF20]
	0x037EB648 FSUB S5, S5, S2
	0x037EB64C FMUL S5, S5, S5
	0x037EB650 FADD S3, S5, S3
	0x037EB654 FCMP S3, S4
	0x037EB658 B.MI 0x37EB670
	0x037EB65C MOVZ W8, 0x1
	0x037EB660 STR S0, [X0 + 0x1E8]
	0x037EB664 STR S1, [X0 + 0x1EC]
	0x037EB668 STR S2, [X0 + 0x1F0]
	0x037EB66C STRB W8, [X0]
	0x037EB670 RET
	0x037EB674 MOVZ W8, 0x1
	0x037EB678 STRB W8, [X0 + 0xD5]
	0x037EB67C RET
	0x037EB680 STR X29, [X31 - 0x40]!
	0x037EB684 STP X30, X23, [X31 + 0x10]
	0x037EB688 STP X22, X21, [X31 + 0x20]
	0x037EB68C STP X20, X19, [X31 + 0x30]
	0x037EB690 SUB X31, X31, 0x220
	0x037EB694 ADRP X20, 0xBF6000
	0x037EB698 LDRB W8, [X20 + 0x33D]
	0x037EB69C MOV X19, X0
	0x037EB6A0 TBNZ X8, 0x0, 0x37EB6B8
	0x037EB6A4 ADRP X0, 0x95E000
	0x037EB6A8 LDR X0, [X0 + 0x308]
	0x037EB6AC BL 0x1C16CF4
	0x037EB6B0 MOVZ W8, 0x1
	0x037EB6B4 STRB W8, [X20 + 0x33D]
	0x037EB6B8 LDR W8, [X19 + 0x158]
	0x037EB6BC CMP W8, 0x1
	0x037EB6C0 B.LT 0x37EB7F0
	0x037EB6C4 MOV W23, W31
	0x037EB6C8 MOV W21, W31
	0x037EB6CC ADD X20, X19, 0x158
	0x037EB6D0 MOV X0, X19
	0x037EB6D4 MOV W1, W21
	0x037EB6D8 BL 0x37E9D80
	0x037EB6DC MOV X22, X0
	0x037EB6E0 LDR X0, [X0 + 0x1D0]
	0x037EB6E4 CBZ X0, 0x37EB808
	0x037EB6E8 BL 0x37E5168
	0x037EB6EC LDR X1, [X22 + 0x1D0]
	0x037EB6F0 MOV X0, X22
	0x037EB6F4 BL 0x37EB80C
	0x037EB6F8 CBNZ W23, 0x37EB710
	0x037EB6FC LDRB W8, [X22]
	0x037EB700 CBZ W8, 0x37EB710
	0x037EB704 LDR X8, [X22 + 0x1D0]
	0x037EB708 CBZ X8, 0x37EB808
	0x037EB70C LDR W23, [X8 + 0x194]
	0x037EB710 LDR W8, [X20]
	0x037EB714 ADD W21, W21, 0x1
	0x037EB718 CMP W21, W8
	0x037EB71C B.LT 0x37EB6D0
	0x037EB720 CBZ W23, 0x37EB7F0
	0x037EB724 LDR W9, [X19 + 0xCC]
	0x037EB728 CBNZ W9, 0x37EB7F0
	0x037EB72C CMP W23, 0x1
	0x037EB730 B.NE 0x37EB794
	0x037EB734 CMP W8, 0x1
	0x037EB738 B.LT 0x37EB7F0
	0x037EB73C ADRP X22, 0x95E000

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Subtract X31, X31, 704
	015 Move X20, 0xBF8000
	016 Move W8, [X20+817]
	017 Move W24, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {65}
	024 Move X0, 0x960000
	025 Move X0, [X0+776]
	026 Call 0x1C17CF4
	027 Move X0, 0x960000
	028 Move X0, [X0+792]
	029 Call 0x1C17CF4
	030 Move X0, 0x960000
	031 Move X0, [X0+1240]
	032 Call 0x1C17CF4
	033 Move X0, 0x960000
	034 Move X0, [X0+760]
	035 Call 0x1C17CF4
	036 Move X0, 0x960000
	037 Move X0, [X0+1248]
	038 Call 0x1C17CF4
	039 Move X0, 0x960000
	040 Move X0, [X0+888]
	041 Call 0x1C17CF4
	042 Move X0, 0x960000
	043 Move X0, [X0+1256]
	044 Call 0x1C17CF4
	045 Move X0, 0x960000
	046 Move X0, [X0+1264]
	047 Call 0x1C17CF4
	048 Move X0, 0x960000
	049 Move X0, [X0+1272]
	050 Call 0x1C17CF4
	051 Move X0, 0x932000
	052 Move X0, [X0+3392]
	053 Call 0x1C17CF4
	054 Move X0, 0x932000
	055 Move X0, [X0+3400]
	056 Call 0x1C17CF4
	057 Move X0, 0x95E000
	058 Move X0, [X0+2400]
	059 Call 0x1C17CF4
	060 Move X0, 0x95D000
	061 Move X0, [X0+3416]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X20+817], W8
	065 Move [X31+680], X31
	066 Move [X31+672], X31
	067 Move [X31+688], X31
	068 Move [X31+664], X31
	069 Move [X31+656], X31
	070 Move [X31+632], X31
	071 Move [X31+624], X31
	072 Move [X31+640], X31
	073 Move [X31+600], X31
	074 Move [X31+592], X31
	075 Move [X31+608], X31
	076 Move [X31+568], X31
	077 Move [X31+560], X31
	078 Move [X31+576], X31
	079 Compare X21, 0
	080 JumpIfEqual {555}
	081 Move X8, 0x95F000
	082 Move X8, [X8+1240]
	083 Move X22, [X21+120]
	084 Move X25, [X21+128]
	085 Move X9, [X19+336]
	086 Move V0, [X19+20]
	087 Move X2, [X8]
	088 Move X28, 0x95F000
	089 Move X28, [X28+792]
	090 Add X0, X31, 16
	091 Move X1, X25
	092 Move [X31+32], X9
	093 Move [X31+1], V0
	094 Call 0x21FC010, X0, X1
	095 Add W31, W0, 1
	096 Move X2, [X28]
	097 Move W26, W0
	098 Add X0, X19, 304
	099 Move W1, W26
	100 Call InlinedArray`1<Int32>.get_Item, X0, X1
	101 Move W8, 2
	102 Move [X19+288], W0
	103 Move [X19+292], W26
	104 Move [X19+296], W8
	105 Compare X22, 0
	106 JumpIfEqual {555}
	107 Move X23, 0xBEF000
	108 Move W8, [X23+1935]
	109 Move W20, [X22+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {117}
	112 Move X0, 0x911000
	113 Move X0, [X0+3848]
	114 Call 0x1C17CF4
	115 Move W8, 1
	116 Move [X23+1935], W8
	117 Move X8, 0x911000
	118 Move X8, [X8+3848]
	119 Move X8, [X8]
	120 Move X8, [X8+184]
	121 Move V8, [X8]
	122 Compare X25, 0
	123 JumpIfEqual {144}
	124 Move X9, 0x95D000
	125 Move X9, [X9+2400]
	126 Move X8, [X25]
	127 Move X10, [X9]
	128 Move W9, [X8+304]
	129 Move W11, [X10+304]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X12, [X8+200]
	132 Add X11, X12, X11
	133 NotImplemented "Instruction LDUR not yet implemented."
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X10, 0x95C000
	136 Move X10, [X10+3416]
	137 Move X10, [X10]
	138 Move W11, [X10+304]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X8, [X8+200]
	141 Add X8, X8, X11
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X1, X21
	145 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	146 Move W23, W0
	147 Move W8, [X19+288]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move W26, [X19+292]
	150 Move W8, [X19+304]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move W26, W31
	153 Add X27, X19, 304
	154 Move X2, [X28]
	155 Move X0, X27
	156 Move W1, W26
	157 Call InlinedArray`1<Int32>.get_Item, X0, X1
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move W8, [X27]
	160 Add W26, W26, 1
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move TEMP, X24
	163 And TEMP, TEMP, 1
	164 Compare TEMP, 1
	165 JumpIfNotEqual {251}
	166 Move X26, 0x95F000
	167 Move X26, [X26+888]
	168 Move X24, [X19+120]
	169 Add X28, X19, 288
	170 Move X0, [X26]
	171 Move W8, [X0+224]
	172 Compare W8, 0
	173 JumpIfNotEqual {175}
	174 Call 0x1C17DFC
	175 Move X0, X22
	176 Move X1, X24
	177 Call InputSystemUIInputModule.HaveControlForDevice, X0, X1
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {254}
	182 Move W26, W31
	183 Move W9, W31
	184 Move W27, W31
	185 Move W10, W31
	186 Move W8, 1
	187 Move W24, 1
	188 Move [X19+288], W20
	189 Move [X19+292], W26
	190 Move X8, 0x95F000
	191 Move X8, [X8+776]
	192 Add X0, X19, 344
	193 Move W1, W26
	194 Move X2, [X8]
	195 Add X8, X31, 16
	196 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	197 Move X8, [X31+480]
	198 Compare X8, 0
	199 JumpIfEqual {555}
	200 Move W8, [X8+404]
	201 Move X0, [X25+384]
	202 Compare X0, 0
	203 JumpIfEqual {555}
	204 Move X8, 0x95F000
	205 Move X8, [X8+1248]
	206 Move X1, [X8]
	207 Call InputControl`1<Int32>.get_value, X0
	208 Move X8, [X25+392]
	209 Compare X8, 0
	210 JumpIfNotEqual {227}
	211 Move X8, [X25+416]
	212 Compare X8, 0
	213 JumpIfEqual {555}
	214 Move X0, [X8+384]
	215 Compare X0, 0
	216 JumpIfEqual {555}
	217 Move X8, 0x95F000
	218 Move X8, [X8+1248]
	219 Move X1, [X8]
	220 Call InputControl`1<Int32>.get_value, X0
	221 Move X8, [X25+416]
	222 Compare X8, 0
	223 JumpIfEqual {555}
	224 Move X8, [X8+392]
	225 Compare X8, 0
	226 JumpIfEqual {555}
	227 Move X9, 0x95F000
	228 Move W26, [X0]
	229 Move X9, [X9+760]
	230 Move X0, X8
	231 Move X1, [X9]
	232 Call InputControl`1<Vector2>.get_value, X0
	233 Move V8, [X0]
	234 Move X1, X21
	235 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	236 Move W23, W0
	237 Compare W26, 0
	238 JumpIfEqual {147}
	239 Move W8, [X19+288]
	240 Add W20, W26, W20
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move TEMP, X24
	243 And TEMP, TEMP, 1
	244 Compare TEMP, 1
	245 JumpIfNotEqual {251}
	246 Move W8, W31
	247 Move W9, W31
	248 Add X28, X19, 288
	249 Move W24, 2
	250 Move W27, 1
	251 Move TEMP, 0
	252 Not TEMP
	253 Move W26, TEMP
	254 Move X0, [X26]
	255 Move X24, [X19+184]
	256 Move W8, [X0+224]
	257 Compare W8, 0
	258 JumpIfNotEqual {260}
	259 Call 0x1C17DFC
	260 Move X0, X22
	261 Move X1, X24
	262 Call InputSystemUIInputModule.HaveControlForDevice, X0, X1
	263 And W31, W0, 1
	264 Move W10, 3
	265 Move W26, W31
	266 Move W27, W31
	267 Xor W9, W0, 1
	268 Move W8, 1
	269 NotImplemented "Instruction CSEL not yet implemented."
	270 Move W10, 1
	271 Move W11, [X19+204]
	272 NotImplemented "Instruction CMP not yet implemented."
	273 NotImplemented "Instruction CSET not yet implemented."
	274 NotImplemented "Instruction CMP not yet implemented."
	275 NotImplemented "Instruction BIC not yet implemented."
	276 NotImplemented "Instruction CSET not yet implemented."
	277 Move TEMP, X12
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfEqual {317}
	281 Or W10, W10, W11
	282 Move TEMP, X10
	283 And TEMP, TEMP, 1
	284 Compare TEMP, 1
	285 JumpIfNotEqual {317}
	286 Move TEMP, X9
	287 And TEMP, TEMP, 1
	288 Compare TEMP, 1
	289 JumpIfNotEqual {335}
	290 Move W8, [X28]
	291 Add W31, W8, 1
	292 Move X0, [X19+120]
	293 Compare X0, 0
	294 JumpIfEqual {372}
	295 Move X1, X31
	296 Call InputActionReference.get_action, X0
	297 Compare X0, 0
	298 JumpIfEqual {372}
	299 Move X1, X31
	300 Call InputAction.get_controls, X0
	301 Move X8, 0x95F000
	302 Move X8, [X8+1256]
	303 Move X2, X0
	304 Move X4, X1
	305 Add X0, X31, 16
	306 Move X3, [X8]
	307 Move X1, X2
	308 Move X2, X4
	309 Move [X31+16], X31
	310 Move [X31+24], X31
	311 Move [X31+32], X31
	312 Call Nullable`1<ReadOnlyArray`1<Object>>..ctor, X0, X1
	313 Move V0, [X31+1]
	314 Move X8, [X31+32]
	315 Move [X31+37], V0
	316 Move [X31+608], X8
	317 Move W1, [X19+292]
	318 Add W31, W1, 1
	319 Move X0, X19
	320 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	321 Move X8, [X0+464]
	322 Compare X8, 0
	323 JumpIfEqual {555}
	324 Move [X8+384], X21
	325 Move [X8+392], X22
	326 Move [X8+404], W24
	327 Move [X8+400], W26
	328 Move [X8+252], W23
	329 Move [X8+256], W20
	330 Add X8, X8, 412
	331 Move [X8+8], X31
	332 Move [X8+16], X31
	333 Move [X8], X31
	334 Move [X8+24], W31
	335 NotImplemented "Instruction CMP not yet implemented."
	336 NotImplemented "Instruction CSEL not yet implemented."
	337 NotImplemented "Instruction CSEL not yet implemented."
	338 Move X0, X19
	339 Move W1, W20
	340 Move W2, W23
	341 Move W4, W24
	342 Move X5, X21
	343 Move X6, X22
	344 NotImplemented "Instruction CMP not yet implemented."
	345 NotImplemented "Instruction CSEL not yet implemented."
	346 NotImplemented "Instruction CSEL not yet implemented."
	347 Move X0, X19
	348 Move W1, W20
	349 Move W2, W23
	350 Move W4, W24
	351 Move X5, X21
	352 Move X6, X22
	353 Call InputSystemUIInputModule.AllocatePointer, X0, X1, X2, X3, X4, X5, X6, X7
	354 Move [X19+292], W0
	355 Compare W27, 0
	356 JumpIfEqual {370}
	357 Move W1, [X19+292]
	358 Move X0, X19
	359 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	360 Move V0, [X0+472]
	361 Move X8, -47190016
	362 Move V1, [X8+3872]
	363 Subtract V0, V0, V8
	364 NotImplemented "Instruction INVALID not yet implemented."
	365 NotImplemented "Instruction FADDP not yet implemented."
	366 NotImplemented "Instruction FCMP not yet implemented."
	367 Move W8, 1
	368 Move [X0+472], D8
	369 Move [X0], W8
	370 Move W26, [X19+292]
	371 Move [X19+288], W20
	372 Move [X31+600], X31
	373 Move [X31+592], X31
	374 Move [X31+608], X31
	375 Move V0, [X31+37]
	376 Move X8, [X31+608]
	377 Move [X31+42], V0
	378 Move W9, [X31+672]
	379 Move [X31+688], X8
	380 Compare W9, 0
	381 JumpIfEqual {432}
	382 Move X26, 0x95F000
	383 Move X26, [X26+1272]
	384 Add X0, X31, 672
	385 Move X1, [X26]
	386 Call Nullable`1<ReadOnlyArray`1<Object>>.get_Value, X0
	387 Move X8, X1
	388 ShiftRight X8, 32
	389 And X8, X8, 0x7FFFFFFF
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move [X31+656], X0
	392 Move [X31+664], X1
	393 Move X1, [X26]
	394 Add X0, X31, 672
	395 Call Nullable`1<ReadOnlyArray`1<Object>>.get_Value, X0
	396 Move X28, 0x931000
	397 Move X28, [X28+3400]
	398 Move [X31+656], X0
	399 Move [X31+664], X1
	400 Add X0, X31, 656
	401 Move X2, [X28]
	402 Move W1, W31
	403 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	404 Compare X0, 0
	405 JumpIfEqual {555}
	406 Move X25, [X0+120]
	407 Compare X25, 0
	408 JumpIfEqual {432}
	409 Move X8, 0x95C000
	410 Move X8, [X8+3416]
	411 Move X9, [X25]
	412 Move X8, [X8]
	413 Move W11, [X9+304]
	414 Move W10, [X8+304]
	415 NotImplemented "Instruction CMP not yet implemented."
	416 Move X9, [X9+200]
	417 Add X9, X9, X10
	418 NotImplemented "Instruction LDUR not yet implemented."
	419 NotImplemented "Instruction CMP not yet implemented."
	420 Move X1, [X26]
	421 Move W21, [X25+224]
	422 Add X0, X31, 672
	423 Call Nullable`1<ReadOnlyArray`1<Object>>.get_Value, X0
	424 Move X2, [X28]
	425 Move [X31+656], X0
	426 Move [X31+664], X1
	427 Add X0, X31, 656
	428 Move W1, W31
	429 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	430 Move X5, X0
	431 Move W4, 1
	432 Move X0, [X19+184]
	433 Compare X0, 0
	434 JumpIfEqual {457}
	435 Move X1, X31
	436 Call InputActionReference.get_action, X0
	437 Compare X0, 0
	438 JumpIfEqual {457}
	439 Move X1, X31
	440 Call InputAction.get_controls, X0
	441 Move X8, 0x95F000
	442 Move X8, [X8+1256]
	443 Move X2, X0
	444 Move X4, X1
	445 Add X0, X31, 16
	446 Move X3, [X8]
	447 Move X1, X2
	448 Move X2, X4
	449 Move [X31+16], X31
	450 Move [X31+24], X31
	451 Move [X31+32], X31
	452 Call Nullable`1<ReadOnlyArray`1<Object>>..ctor, X0, X1
	453 Move V0, [X31+1]
	454 Move X8, [X31+32]
	455 Move [X31+35], V0
	456 Move [X31+576], X8
	457 Move [X31+568], X31
	458 Move [X31+560], X31
	459 Move [X31+576], X31
	460 Move V0, [X31+35]
	461 Move X8, [X31+576]
	462 Move [X31+39], V0
	463 Move W9, [X31+624]
	464 Move [X31+640], X8
	465 Compare W9, 0
	466 JumpIfEqual {511}
	467 Move X26, 0x95F000
	468 Move X26, [X26+1272]
	469 Add X0, X31, 624
	470 Move X1, [X26]
	471 Call Nullable`1<ReadOnlyArray`1<Object>>.get_Value, X0
	472 Move X8, X1
	473 ShiftRight X8, 32
	474 And X8, X8, 0x7FFFFFFF
	475 NotImplemented "Instruction CMP not yet implemented."
	476 Move [X31+656], X0
	477 Move [X31+664], X1
	478 Move X1, [X26]
	479 Add X0, X31, 624
	480 Call Nullable`1<ReadOnlyArray`1<Object>>.get_Value, X0
	481 Move X28, 0x931000
	482 Move X28, [X28+3400]
	483 Move [X31+656], X0
	484 Move [X31+664], X1
	485 Add X0, X31, 656
	486 Move X2, [X28]
	487 Move W1, W31
	488 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	489 Compare X0, 0
	490 JumpIfEqual {555}
	491 Move X25, [X0+120]
	492 Compare X25, 0
	493 JumpIfEqual {511}
	494 Move X1, [X26]
	495 Move W21, [X25+224]
	496 Add X0, X31, 624
	497 Call Nullable`1<ReadOnlyArray`1<Object>>.get_Value, X0
	498 Move X2, [X28]
	499 Move [X31+656], X0
	500 Move [X31+664], X1
	501 Add X0, X31, 656
	502 Move W1, W31
	503 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	504 Move X5, X0
	505 Move W4, 3
	506 Move X0, X19
	507 Move W1, W21
	508 Move W2, W23
	509 Move W3, W31
	510 Move X6, X25
	511 Move X0, X19
	512 Move W1, W20
	513 Move W2, W23
	514 Move W3, W31
	515 Move W4, W31
	516 Move X5, X21
	517 Move X6, X22
	518 Move X7, X31
	519 Call InputSystemUIInputModule.AllocatePointer, X0, X1, X2, X3, X4, X5, X6, X7
	520 Move W26, W0
	521 Compare W27, 0
	522 JumpIfEqual {536}
	523 Move X0, X19
	524 Move W1, W26
	525 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	526 Move V0, [X0+472]
	527 Move X8, -47190016
	528 Move V1, [X8+3872]
	529 Subtract V0, V0, V8
	530 NotImplemented "Instruction INVALID not yet implemented."
	531 NotImplemented "Instruction FADDP not yet implemented."
	532 NotImplemented "Instruction FCMP not yet implemented."
	533 Move W8, 1
	534 Move [X0+472], D8
	535 Move [X0], W8
	536 Move [X19+288], W20
	537 Move [X19+292], W26
	538 Move [X19+296], W24
	539 Move W0, W26
	540 Add X31, X31, 704
	541 Move X20, [X31+96]
	542 Move X19, [X31+104]
	543 Move X22, [X31+80]
	544 Move X21, [X31+88]
	545 Move X24, [X31+64]
	546 Move X23, [X31+72]
	547 Move X26, [X31+48]
	548 Move X25, [X31+56]
	549 Move X28, [X31+32]
	550 Move X27, [X31+40]
	551 Move X29, [X31+16]
	552 Move X30, [X31+24]
	553 Move V8, [X31+112]
	554 Return X0
	555 Call 0x1C17F20

Method: System.Int32 AllocatePointer(System.Int32 pointerId, System.Int32 displayIndex, System.Int32 touchId, UnityEngine.InputSystem.UI.UIPointerType pointerType, UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.InputControl touchControl = null)

Disassembly:
	0x037EB80C STR X30, [X31 - 0x10]!
	0x037EB810 CBZ X1, 0x37EB8D0
	0x037EB814 LDR V0, [X1 + 0x14C]
	0x037EB818 LDR V1, [X0 + 0x204]
	0x037EB81C FCMP S1, S0
	0x037EB820 B.EQ 0x37EB830
	0x037EB824 MOVZ W8, 0x1
	0x037EB828 STRB W8, [X0]
	0x037EB82C STR S0, [X0 + 0x204]
	0x037EB830 LDR V0, [X1 + 0x158]
	0x037EB834 LDR V1, [X0 + 0x208]
	0x037EB838 FCMP S1, S0
	0x037EB83C B.EQ 0x37EB84C
	0x037EB840 MOVZ W8, 0x1
	0x037EB844 STRB W8, [X0]
	0x037EB848 STR S0, [X0 + 0x208]
	0x037EB84C LDR V0, [X1 + 0x154]
	0x037EB850 LDR V1, [X0 + 0x20C]
	0x037EB854 FCMP S1, S0
	0x037EB858 B.EQ 0x37EB868
	0x037EB85C MOVZ W8, 0x1
	0x037EB860 STRB W8, [X0]
	0x037EB864 STR S0, [X0 + 0x20C]
	0x037EB868 LDR V0, [X1 + 0x15C]
	0x037EB86C LDR V1, [X0 + 0x210]
	0x037EB870 FCMP S1, S0
	0x037EB874 B.EQ 0x37EB884
	0x037EB878 MOVZ W8, 0x1
	0x037EB87C STRB W8, [X0]
	0x037EB880 STR S0, [X0 + 0x210]
	0x037EB884 LDR V0, [X1 + 0x16C]
	0x037EB888 LDR V1, [X1 + 0x170]
	0x037EB88C LDR V2, [X0 + 0x214]
	0x037EB890 LDR V3, [X0 + 0x218]
	0x037EB894 ADRP X8, 0xFFFFFFFFFD2FE000
	0x037EB898 LDR V4, [X8 + 0xF20]
	0x037EB89C FSUB S2, S2, S0
	0x037EB8A0 FSUB S3, S3, S1
	0x037EB8A4 FMUL S2, S2, S2
	0x037EB8A8 FMUL S3, S3, S3
	0x037EB8AC FADD S2, S2, S3
	0x037EB8B0 FCMP S2, S4
	0x037EB8B4 B.MI 0x37EB8C8
	0x037EB8B8 MOVZ W8, 0x1
	0x037EB8BC STR S0, [X0 + 0x214]
	0x037EB8C0 STRB W8, [X0]
	0x037EB8C4 STR S1, [X0 + 0x218]
	0x037EB8C8 LDR X30, [X31], #0x10
	0x037EB8CC RET
	0x037EB8D0 BL 0x1C16F20
	0x037EB8D4 STR D8, [X31 - 0x40]!
	0x037EB8D8 STR X29, [X31 + 0x8]
	0x037EB8DC STP X30, X23, [X31 + 0x10]
	0x037EB8E0 STP X22, X21, [X31 + 0x20]
	0x037EB8E4 STP X20, X19, [X31 + 0x30]
	0x037EB8E8 SUB X31, X31, 0x220
	0x037EB8EC ADRP X20, 0xBF6000
	0x037EB8F0 LDRB W8, [X20 + 0x33E]
	0x037EB8F4 MOV X19, X0
	0x037EB8F8 TBNZ X8, 0x0, 0x37EB910
	0x037EB8FC ADRP X0, 0x95E000
	0x037EB900 LDR X0, [X0 + 0x308]
	0x037EB904 BL 0x1C16CF4
	0x037EB908 MOVZ W8, 0x1
	0x037EB90C STRB W8, [X20 + 0x33E]
	0x037EB910 LDRB W8, [X19 + 0xD5]
	0x037EB914 CBZ W8, 0x37EB920
	0x037EB918 MOV X0, X19
	0x037EB91C BL 0x37EAC98
	0x037EB920 LDR X8, [X19 + 0x38]
	0x037EB924 CBZ X8, 0x37EBA6C
	0x037EB928 LDRB W8, [X8 + 0x48]
	0x037EB92C CBNZ W8, 0x37EB938
	0x037EB930 BL 0x37E86F8
	0x037EB934 TBZ X0, 0x0, 0x37EBA10
	0x037EB938 ADD X1, X19, 0x388
	0x037EB93C MOV X0, X19
	0x037EB940 BL 0x37E7E40
	0x037EB944 MOV X0, X19
	0x037EB948 BL 0x37EB680
	0x037EB94C LDR W8, [X19 + 0x158]
	0x037EB950 CMP W8, 0x1
	0x037EB954 B.LT 0x37EBA50
	0x037EB958 ADRP X8, 0xFFFFFFFFFD2FE000
	0x037EB95C LDR V8, [X8 + 0xF20]
	0x037EB960 MOV W20, W31
	0x037EB964 MOVZ W22, 0x1
	0x037EB968 MOVZ W23, 0x3
	0x037EB96C MOV X0, X19
	0x037EB970 MOV W1, W20
	0x037EB974 BL 0x37E9D80
	0x037EB978 MOV X21, X0
	0x037EB97C MOV X0, X19
	0x037EB980 MOV X1, X21
	0x037EB984 BL 0x37E6480
	0x037EB988 LDR X8, [X21 + 0x1D0]
	0x037EB98C CBZ X8, 0x37EBA6C
	0x037EB990 LDR W8, [X8 + 0x194]
	0x037EB994 CMP W8, 0x2
	0x037EB998 B.NE 0x37EB9B4
	0x037EB99C LDRB W8, [X21 + 0x8]
	0x037EB9A0 CBNZ W8, 0x37EB9B4
	0x037EB9A4 LDR W8, [X21 + 0xC]
	0x037EB9A8 SUB W8, W8, 0x1
	0x037EB9AC CMP W8, 0x2
	0x037EB9B0 B.CS 0x37EB9FC
	0x037EB9B4 LDR V0, [X21 + 0x1E0]
	0x037EB9B8 LDR V1, [X21 + 0x1E4]
	0x037EB9BC STRB W31, [X21]
	0x037EB9C0 FMUL S0, S0, S0
	0x037EB9C4 FMUL S1, S1, S1
	0x037EB9C8 FADD S0, S0, S1
	0x037EB9CC FCMP S0, S8
	0x037EB9D0 B.MI 0x37EB9DC
	0x037EB9D4 STRB W22, [X21]
	0x037EB9D8 STR X31, [X21 + 0x1E0]
	0x037EB9DC STR W23, [X21 + 0xC]
	0x037EB9E0 STR W23, [X21 + 0xA4]
	0x037EB9E4 STR W23, [X21 + 0x13C]
	0x037EB9E8 LDR W8, [X19 + 0x158]
	0x037EB9EC ADD W20, W20, 0x1
	0x037EB9F0 CMP W20, W8
	0x037EB9F4 B.LT 0x37EB96C
	0x037EB9F8 B 0x37EBA50
	0x037EB9FC MOV X0, X19
	0x037EBA00 MOV W1, W20
	0x037EBA04 BL 0x37EAABC
	0x037EBA08 SUB W20, W20, 0x1

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 560
	014 Move X28, 0xBF7000
	015 Move X19, 0x95F000
	016 Move W8, [X28+818]
	017 Move X19, [X19+1280]
	018 Move X20, X7
	019 Move X23, X6
	020 Move X24, X5
	021 Move W25, W4
	022 Move W26, W3
	023 Move W27, W2
	024 Move W22, W1
	025 Move X21, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {47}
	030 Move X0, 0x95F000
	031 Move X0, [X0+1288]
	032 Call 0x1C17CF4
	033 Move X0, 0x95F000
	034 Move X0, [X0+1296]
	035 Call 0x1C17CF4
	036 Move X0, 0x95F000
	037 Move X0, [X0+1304]
	038 Call 0x1C17CF4
	039 Move X0, 0x95F000
	040 Move X0, [X0+1312]
	041 Call 0x1C17CF4
	042 Move X0, 0x95F000
	043 Move X0, [X0+1280]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X28+818], W8
	047 Move X1, [X19]
	048 Add X19, X21, 344
	049 Move X0, X19
	050 Call InlinedArray`1<PointerModel>.get_Capacity, X0
	051 Move W8, [X21+344]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Compare W8, 0
	054 JumpIfEqual {64}
	055 Move X9, [X21+896]
	056 Compare X9, 0
	057 JumpIfEqual {148}
	058 Move W10, [X9+24]
	059 Subtract W8, W8, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W10, 544
	062 NotImplemented "Instruction SMADDL not yet implemented."
	063 Add X8, X8, 496
	064 Add X8, X21, 816
	065 Move X28, [X8]
	066 Compare X28, 0
	067 JumpIfNotEqual {79}
	068 Move X8, 0x95F000
	069 Move X8, [X8+1288]
	070 Move X29, [X21+56]
	071 Move X0, [X8]
	072 Call 0x1C17F10
	073 Move X1, X29
	074 Move X2, X31
	075 Move X28, X0
	076 Call PointerEventData..ctor, X0, X1
	077 Compare X28, 0
	078 JumpIfEqual {148}
	079 Move X8, 0x95F000
	080 Move X8, [X8+1296]
	081 Move [X28+252], W27
	082 Move [X28+256], W22
	083 Move [X28+400], W26
	084 Move [X28+404], W25
	085 Move [X28+384], X24
	086 Move [X28+392], X23
	087 Move X3, [X8]
	088 Move X23, 0x95F000
	089 Move X24, 0x95F000
	090 Move X23, [X23+1304]
	091 Move X24, [X24+1312]
	092 Add X0, X21, 304
	093 Move W2, 10
	094 Move W1, W22
	095 Call InlinedArray`1<Int32>.AppendWithCapacity, X0, X1, X2
	096 Move X3, [X23]
	097 Add X0, X21, 320
	098 Move W2, 10
	099 Move X1, X20
	100 Call InlinedArray`1<Object>.AppendWithCapacity, X0, X1, X2
	101 Move X20, [X24]
	102 Add X21, X31, 16
	103 Move X8, 3
	104 Add X0, X21, 16
	105 Move W2, 148
	106 Move W1, W31
	107 Move [X31+16], X31
	108 Move [X31+24], X8
	109 Call 0x3EB2B10
	110 Move W22, 3
	111 Add X0, X21, 168
	112 Move W2, 148
	113 Move W1, W31
	114 Move [X31+180], W22
	115 Call 0x3EB2B10
	116 Add X0, X21, 320
	117 Move W2, 144
	118 Move W1, W31
	119 Move [X31+332], W22
	120 Call 0x3EB2B10
	121 Add X8, X21, 472
	122 NotImplemented "Instruction MOVI not yet implemented."
	123 Add X1, X31, 16
	124 Move W2, 10
	125 Move X0, X19
	126 Move X3, X20
	127 Move [X31+480], X28
	128 Move [X8], V0
	129 Move [X8+8], V0
	130 Move [X8+32], V0
	131 Move [X8+40], V0
	132 Move [X8+64], X31
	133 Call InlinedArray`1<PointerModel>.AppendWithCapacity, X0, X1, X2
	134 Add X31, X31, 560
	135 Move X20, [X31+80]
	136 Move X19, [X31+88]
	137 Move X22, [X31+64]
	138 Move X21, [X31+72]
	139 Move X24, [X31+48]
	140 Move X23, [X31+56]
	141 Move X26, [X31+32]
	142 Move X25, [X31+40]
	143 Move X28, [X31+16]
	144 Move X27, [X31+24]
	145 Move X29, [X31+96]
	146 Move X30, [X31+104]
	147 Return X0
	148 Call 0x1C17F20
	149 Call 0x1C17F28

Method: System.Void SendPointerExitEventsAndRemovePointer(System.Int32 index)

Disassembly:
	0x037EACB4 ADRP X0, 0x95F000
	0x037EACB8 LDR X0, [X0 + 0x378]
	0x037EACBC BL 0x1C16CF4
	0x037EACC0 MOVZ W8, 0x1
	0x037EACC4 STRB W8, [X20 + 0x335]
	0x037EACC8 LDR W8, [X19 + 0x158]
	0x037EACCC CMP W8, 0x1
	0x037EACD0 B.LT 0x37EAD98
	0x037EACD4 ADRP X23, 0x95F000
	0x037EACD8 LDR X23, [X23 + 0x378]
	0x037EACDC MOV W20, W31
	0x037EACE0 MOV X0, X19
	0x037EACE4 MOV W1, W20
	0x037EACE8 BL 0x37E9D80
	0x037EACEC LDR X8, [X0 + 0x1D0]
	0x037EACF0 CBZ X8, 0x37EADAC
	0x037EACF4 LDR X21, [X8 + 0x188]
	0x037EACF8 CBZ X21, 0x37EADAC
	0x037EACFC MOV X0, X21
	0x037EAD00 MOV X1, X31
	0x037EAD04 BL 0x376EE00
	0x037EAD08 TBZ X0, 0x0, 0x37EAD78
	0x037EAD0C LDR X0, [X23]
	0x037EAD10 LDR X22, [X19 + 0x78]
	0x037EAD14 LDR W8, [X0 + 0xE0]
	0x037EAD18 CBNZ W8, 0x37EAD20
	0x037EAD1C BL 0x1C16DFC
	0x037EAD20 MOV X0, X21
	0x037EAD24 MOV X1, X22
	0x037EAD28 BL 0x37EA740
	0x037EAD2C TBNZ X0, 0x0, 0x37EAD88
	0x037EAD30 LDR X0, [X23]
	0x037EAD34 LDR X22, [X19 + 0xB8]
	0x037EAD38 LDR W8, [X0 + 0xE0]
	0x037EAD3C CBNZ W8, 0x37EAD44
	0x037EAD40 BL 0x1C16DFC
	0x037EAD44 MOV X0, X21
	0x037EAD48 MOV X1, X22
	0x037EAD4C BL 0x37EA740
	0x037EAD50 TBNZ X0, 0x0, 0x37EAD88
	0x037EAD54 LDR X0, [X23]
	0x037EAD58 LDR X22, [X19 + 0xC0]
	0x037EAD5C LDR W8, [X0 + 0xE0]
	0x037EAD60 CBNZ W8, 0x37EAD68
	0x037EAD64 BL 0x1C16DFC
	0x037EAD68 MOV X0, X21
	0x037EAD6C MOV X1, X22
	0x037EAD70 BL 0x37EA740
	0x037EAD74 TBNZ X0, 0x0, 0x37EAD88
	0x037EAD78 MOV X0, X19
	0x037EAD7C MOV W1, W20

ISIL:
	001 Move [X31-48], X29
	002 Move [X31-40], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract X31, X31, 544
	008 Move X22, 0xBF8000
	009 Move X21, 0x960000
	010 Move W8, [X22+819]
	011 Move X21, [X21+776]
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x960000
	019 Move X0, [X0+776]
	020 Call 0x1C17CF4
	021 Move X0, 0x90A000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+819], W8
	026 Move X2, [X21]
	027 Add X0, X20, 344
	028 Add X8, X31, 0
	029 Move W1, W19
	030 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	031 Move X21, [X31+464]
	032 Compare X21, 0
	033 JumpIfEqual {65}
	034 Move X8, 0x90A000
	035 Move X8, [X8+1432]
	036 Move X22, [X21+32]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {54}
	050 Move X0, X20
	051 Move X1, X21
	052 Move X2, X31
	053 Call InputSystemUIInputModule.ProcessPointerMovement, X0, X1, X2
	054 Move X0, X20
	055 Move W1, W19
	056 Call InputSystemUIInputModule.RemovePointerAtIndex, X0, X1
	057 Add X31, X31, 544
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X29, [X31+48]
	063 Move X30, [X31+56]
	064 Return 
	065 Call 0x1C17F20

Method: System.Void RemovePointerAtIndex(System.Int32 index)

Disassembly:
	0x037EBABC STP X20, X19, [X31 + 0x10]
	0x037EBAC0 ADRP X21, 0xBF6000
	0x037EBAC4 LDRB W8, [X21 + 0x33F]
	0x037EBAC8 MOV X19, X1
	0x037EBACC MOV X20, X0
	0x037EBAD0 TBNZ X8, 0x0, 0x37EBAF4
	0x037EBAD4 ADRP X0, 0x95E000
	0x037EBAD8 LDR X0, [X0 + 0x508]
	0x037EBADC BL 0x1C16CF4
	0x037EBAE0 ADRP X0, 0x931000
	0x037EBAE4 LDR X0, [X0 + 0xE50]
	0x037EBAE8 BL 0x1C16CF4
	0x037EBAEC MOVZ W8, 0x1
	0x037EBAF0 STRB W8, [X21 + 0x33F]
	0x037EBAF4 LDR W8, [X20 + 0xCC]
	0x037EBAF8 CMP W8, 0x1
	0x037EBAFC B.NE 0x37EBB30
	0x037EBB00 ADRP X19, 0x931000
	0x037EBB04 LDR X19, [X19 + 0xE50]
	0x037EBB08 LDR X0, [X19]
	0x037EBB0C LDR W8, [X0 + 0xE0]
	0x037EBB10 CBNZ W8, 0x37EBB1C
	0x037EBB14 BL 0x1C16DFC
	0x037EBB18 LDR X0, [X19]
	0x037EBB1C LDR X8, [X0 + 0xB8]
	0x037EBB20 LDR W0, [X8 + 0x8]
	0x037EBB24 LDP X20, X19, [X31 + 0x10]
	0x037EBB28 LDP X30, X21, [X31], #0x20
	0x037EBB2C RET
	0x037EBB30 CBZ X19, 0x37EBB68
	0x037EBB34 ADRP X8, 0x95E000
	0x037EBB38 LDR X8, [X8 + 0x508]
	0x037EBB3C LDR X9, [X19]
	0x037EBB40 LDR X8, [X8]
	0x037EBB44 LDRB W11, [X9 + 0x130]
	0x037EBB48 LDRB W10, [X8 + 0x130]
	0x037EBB4C CMP W11, W10
	0x037EBB50 B.CC 0x37EBB68
	0x037EBB54 LDR X9, [X9 + 0xC8]
	0x037EBB58 ADD X9, X9, X10, 0x3, LSL
	0x037EBB5C LDUR X9, [X9 - 0x8]
	0x037EBB60 CMP X9, X8
	0x037EBB64 B.EQ 0x37EBB80
	0x037EBB68 MOV X0, X20
	0x037EBB6C MOV X1, X19
	0x037EBB70 LDP X20, X19, [X31 + 0x10]
	0x037EBB74 MOV X2, X31
	0x037EBB78 LDP X30, X21, [X31], #0x20
	0x037EBB7C B 0x3E55180
	0x037EBB80 LDR W0, [X19 + 0x198]
	0x037EBB84 B 0x37EBB24
	0x037EBB88 STR X30, [X31 - 0x30]!
	0x037EBB8C STP X22, X21, [X31 + 0x10]
	0x037EBB90 STP X20, X19, [X31 + 0x20]
	0x037EBB94 ADRP X22, 0xBF6000
	0x037EBB98 ADRP X21, 0x95E000
	0x037EBB9C LDRB W8, [X22 + 0x341]
	0x037EBBA0 LDR X21, [X21 + 0x378]
	0x037EBBA4 MOV W20, W1
	0x037EBBA8 MOV X19, X0
	0x037EBBAC TBNZ X8, 0x0, 0x37EBBC4
	0x037EBBB0 ADRP X0, 0x95E000
	0x037EBBB4 LDR X0, [X0 + 0x378]
	0x037EBBB8 BL 0x1C16CF4
	0x037EBBBC MOVZ W8, 0x1
	0x037EBBC0 STRB W8, [X22 + 0x341]
	0x037EBBC4 AND W20, W20, 0x1
	0x037EBBC8 STRB W20, [X19 + 0xD4]
	0x037EBBCC LDR X0, [X21]
	0x037EBBD0 LDR X21, [X19 + 0x78]
	0x037EBBD4 LDR X22, [X19 + 0xD8]
	0x037EBBD8 LDR W8, [X0 + 0xE0]
	0x037EBBDC CBNZ W8, 0x37EBBE4
	0x037EBBE0 BL 0x1C16DFC
	0x037EBBE4 MOV X0, X21
	0x037EBBE8 MOV X1, X22
	0x037EBBEC MOV W2, W20
	0x037EBBF0 BL 0x37EBC70
	0x037EBBF4 LDR X0, [X19 + 0x80]
	0x037EBBF8 LDR X1, [X19 + 0xE0]
	0x037EBBFC MOV W2, W20
	0x037EBC00 BL 0x37EBC70
	0x037EBC04 LDR X0, [X19 + 0x98]
	0x037EBC08 LDR X1, [X19 + 0xE8]
	0x037EBC0C MOV W2, W20
	0x037EBC10 BL 0x37EBC70
	0x037EBC14 LDR X0, [X19 + 0xA8]
	0x037EBC18 LDR X1, [X19 + 0xF0]
	0x037EBC1C MOV W2, W20
	0x037EBC20 BL 0x37EBC70
	0x037EBC24 LDR X0, [X19 + 0xA0]
	0x037EBC28 LDR X1, [X19 + 0xF8]
	0x037EBC2C MOV W2, W20
	0x037EBC30 BL 0x37EBC70
	0x037EBC34 LDR X0, [X19 + 0xB0]
	0x037EBC38 LDR X1, [X19 + 0x100]
	0x037EBC3C MOV W2, W20
	0x037EBC40 BL 0x37EBC70
	0x037EBC44 LDR X0, [X19 + 0xC0]
	0x037EBC48 LDR X1, [X19 + 0x110]
	0x037EBC4C MOV W2, W20
	0x037EBC50 BL 0x37EBC70
	0x037EBC54 LDR X0, [X19 + 0xB8]
	0x037EBC58 LDR X1, [X19 + 0x108]
	0x037EBC5C MOV W2, W20
	0x037EBC60 LDP X20, X19, [X31 + 0x20]
	0x037EBC64 LDP X22, X21, [X31 + 0x10]
	0x037EBC68 LDR X30, [X31], #0x30
	0x037EBC6C B 0x37EBC70
	0x037EBC70 STR X30, [X31 - 0x30]!
	0x037EBC74 STP X22, X21, [X31 + 0x10]
	0x037EBC78 STP X20, X19, [X31 + 0x20]
	0x037EBC7C ADRP X22, 0xBF6000
	0x037EBC80 LDRB W8, [X22 + 0x342]
	0x037EBC84 MOV W20, W2
	0x037EBC88 MOV X19, X1
	0x037EBC8C MOV X21, X0
	0x037EBC90 TBNZ X8, 0x0, 0x37EBCA8
	0x037EBC94 ADRP X0, 0x908000

ISIL:
	001 Move [X31-80], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Subtract X31, X31, 544
	011 Move X21, 0xBF7000
	012 Move X20, 0x95F000
	013 Move W8, [X21+820]
	014 Move X20, [X20+776]
	015 Move W22, W1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0x95F000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move X0, 0x95F000
	025 Move X0, [X0+1328]
	026 Call 0x1C17CF4
	027 Move X0, 0x95F000
	028 Move X0, [X0+1336]
	029 Call 0x1C17CF4
	030 Move X0, 0x95F000
	031 Move X0, [X0+776]
	032 Call 0x1C17CF4
	033 Move X0, 0x95F000
	034 Move X0, [X0+1032]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+820], W8
	038 Move X25, 0x95F000
	039 Move X25, [X25+1328]
	040 Move X2, [X20]
	041 Move X24, 0x95F000
	042 Move X23, 0x95F000
	043 Move X24, [X24+1320]
	044 Move X23, [X23+1336]
	045 Add X21, X19, 344
	046 Add X8, X31, 0
	047 Move X0, X21
	048 Move W1, W22
	049 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	050 Move W8, [X19+292]
	051 Move X20, [X31+464]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction MOVI not yet implemented."
	054 Move [X19+288], D0
	055 Move [X19+296], W31
	056 Move W9, [X19+304]
	057 Subtract W9, W9, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move [X19+292], W22
	060 Move X2, [X25]
	061 Add X0, X19, 304
	062 Move W1, W22
	063 Call InlinedArray`1<Int32>.RemoveAtByMovingTailWithCapacity, X0, X1
	064 Move X2, [X24]
	065 Add X0, X19, 320
	066 Move W1, W22
	067 Call InlinedArray`1<Object>.RemoveAtByMovingTailWithCapacity, X0, X1
	068 Move X2, [X23]
	069 Move X0, X21
	070 Move W1, W22
	071 Call InlinedArray`1<PointerModel>.RemoveAtByMovingTailWithCapacity, X0, X1
	072 Compare X20, 0
	073 JumpIfEqual {135}
	074 Move X8, [X20+240]
	075 Compare X8, 0
	076 JumpIfEqual {135}
	077 Move W2, [X8+24]
	078 Move W9, [X8+28]
	079 Add W9, W9, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X8+24], W31
	082 Move [X8+28], W9
	083 Move X0, [X8+16]
	084 Move W1, W31
	085 Move X3, X31
	086 Call Array.Clear, X0, X1, X2
	087 NotImplemented "Instruction MOVI not yet implemented."
	088 Move X0, X20
	089 Move X1, X31
	090 Move X2, X31
	091 Move [X20+392], X31
	092 Move [X20+80], V0
	093 Move [X20+88], V0
	094 Move [X20+112], V0
	095 Move [X20+120], V0
	096 Move [X20+144], V0
	097 Move [X20+152], V0
	098 Move [X20+176], V0
	099 Move [X20+184], V0
	100 Move [X20+208], V0
	101 Move [X20+216], V0
	102 Call PointerEventData.set_pointerPress, X0, X1
	103 Move X0, X20
	104 Move X1, X31
	105 Move X2, X31
	106 Call PointerEventData.set_pointerPress, X0, X1
	107 Move [X20+32], X31
	108 Move [X20+56], X31
	109 Move [X20+64], X31
	110 Move W9, [X21]
	111 Compare W9, 0
	112 JumpIfEqual {122}
	113 Move X8, [X19+896]
	114 Compare X8, 0
	115 JumpIfEqual {135}
	116 Move W10, [X8+24]
	117 Subtract W9, W9, 1
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W10, 544
	120 NotImplemented "Instruction SMADDL not yet implemented."
	121 Add X8, X8, 496
	122 Add X8, X19, 816
	123 Move [X8], X20
	124 Add X31, X31, 544
	125 Move X20, [X31+64]
	126 Move X19, [X31+72]
	127 Move X22, [X31+48]
	128 Move X21, [X31+56]
	129 Move X24, [X31+32]
	130 Move X23, [X31+40]
	131 Move X30, [X31+16]
	132 Move X25, [X31+24]
	133 Move X29, [X31+80]
	134 Return 
	135 Call 0x1C17F20
	136 Call 0x1C17F28

Method: System.Void PurgeStalePointers()

Disassembly:
	0x037EBC98 LDR X0, [X0 + 0x598]
	0x037EBC9C BL 0x1C16CF4
	0x037EBCA0 MOVZ W8, 0x1
	0x037EBCA4 STRB W8, [X22 + 0x342]
	0x037EBCA8 CBNZ X19, 0x37EBCB0
	0x037EBCAC TBZ X20, 0x0, 0x37EBD20
	0x037EBCB0 ADRP X8, 0x908000
	0x037EBCB4 LDR X8, [X8 + 0x598]
	0x037EBCB8 LDR X0, [X8]
	0x037EBCBC LDR W8, [X0 + 0xE0]
	0x037EBCC0 CBNZ W8, 0x37EBCC8
	0x037EBCC4 BL 0x1C16DFC
	0x037EBCC8 MOV X0, X21
	0x037EBCCC MOV X1, X31
	0x037EBCD0 MOV X2, X31
	0x037EBCD4 BL 0x3C3883C
	0x037EBCD8 TBNZ X0, 0x0, 0x37EBD20
	0x037EBCDC CBZ X21, 0x37EBD50
	0x037EBCE0 MOV X0, X21
	0x037EBCE4 MOV X1, X31
	0x037EBCE8 BL 0x37451B4
	0x037EBCEC CBZ X0, 0x37EBD20
	0x037EBCF0 MOV X21, X0
	0x037EBCF4 MOV X1, X19
	0x037EBCF8 MOV X2, X31
	0x037EBCFC TBZ X20, 0x0, 0x37EBD30
	0x037EBD00 BL 0x3734A04
	0x037EBD04 MOV X0, X21
	0x037EBD08 MOV X1, X19
	0x037EBD0C LDP X20, X19, [X31 + 0x20]
	0x037EBD10 LDP X22, X21, [X31 + 0x10]
	0x037EBD14 MOV X2, X31
	0x037EBD18 LDR X30, [X31], #0x30
	0x037EBD1C B 0x3734954
	0x037EBD20 LDP X20, X19, [X31 + 0x20]
	0x037EBD24 LDP X22, X21, [X31 + 0x10]
	0x037EBD28 LDR X30, [X31], #0x30
	0x037EBD2C RET
	0x037EBD30 BL 0x3734A5C
	0x037EBD34 MOV X0, X21
	0x037EBD38 MOV X1, X19
	0x037EBD3C LDP X20, X19, [X31 + 0x20]
	0x037EBD40 LDP X22, X21, [X31 + 0x10]
	0x037EBD44 MOV X2, X31
	0x037EBD48 LDR X30, [X31], #0x30
	0x037EBD4C B 0x37349AC
	0x037EBD50 BL 0x1C16F20
	0x037EBD54 STR X30, [X31 - 0x20]!
	0x037EBD58 STP X20, X19, [X31 + 0x10]
	0x037EBD5C CBZ X1, 0x37EBDC8
	0x037EBD60 MOV X20, X0
	0x037EBD64 MOV X0, X1
	0x037EBD68 MOV X1, X31
	0x037EBD6C BL 0x37451B4
	0x037EBD70 CBZ X0, 0x37EBDC8
	0x037EBD74 MOV X1, X31
	0x037EBD78 MOV X19, X0
	0x037EBD7C BL 0x37342D8
	0x037EBD80 LDR X8, [X20 + 0x70]
	0x037EBD84 CBZ X8, 0x37EBDC8
	0x037EBD88 CBZ X0, 0x37EBDD8
	0x037EBD8C LDR X1, [X0 + 0x10]
	0x037EBD90 MOV X0, X8
	0x037EBD94 MOV W2, W31
	0x037EBD98 MOV X3, X31
	0x037EBD9C BL 0x373798C
	0x037EBDA0 CBZ X0, 0x37EBDC8
	0x037EBDA4 LDR X1, [X19 + 0x10]
	0x037EBDA8 MOV W2, W31
	0x037EBDAC MOV X3, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xBF7000
	008 Move W8, [X20+821]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x95F000
	015 Move X0, [X0+888]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+821], W8
	019 Move W8, [X19+344]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X23, 0x95F000
	022 Move X23, [X23+888]
	023 Move W20, W31
	024 Move X0, X19
	025 Move W1, W20
	026 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	027 Move X8, [X0+464]
	028 Compare X8, 0
	029 JumpIfEqual {94}
	030 Move X21, [X8+392]
	031 Compare X21, 0
	032 JumpIfEqual {94}
	033 Move X0, X21
	034 Move X1, X31
	035 Call InputDevice.get_added, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {79}
	040 Move X0, [X23]
	041 Move X22, [X19+120]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X22
	048 Call InputSystemUIInputModule.HaveControlForDevice, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {83}
	053 Move X0, [X23]
	054 Move X22, [X19+184]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X21
	060 Move X1, X22
	061 Call InputSystemUIInputModule.HaveControlForDevice, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {83}
	066 Move X0, [X23]
	067 Move X22, [X19+192]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X21
	073 Move X1, X22
	074 Call InputSystemUIInputModule.HaveControlForDevice, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {83}
	079 Move X0, X19
	080 Move W1, W20
	081 Call InputSystemUIInputModule.SendPointerExitEventsAndRemovePointer, X0, X1
	082 Subtract W20, W20, 1
	083 Move W8, [X19+344]
	084 Add W20, W20, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move [X19+213], W31
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 Move X23, [X31+56]
	093 Return 
	094 Call 0x1C17F20

Method: System.Boolean HaveControlForDevice(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.InputActionReference actionReference)

Disassembly:
	0x037EB740 LDR X22, [X22 + 0x308]
	0x037EB744 MOV W21, W31
	0x037EB748 LDR X2, [X22]
	0x037EB74C ADD X8, X31, 0x0
	0x037EB750 MOV X0, X20
	0x037EB754 MOV W1, W21
	0x037EB758 BL 0x2DEBA18
	0x037EB75C LDR X8, [X31 + 0x1D0]
	0x037EB760 CBZ X8, 0x37EB808
	0x037EB764 LDR W8, [X8 + 0x194]
	0x037EB768 CMP W8, 0x1
	0x037EB76C B.EQ 0x37EB780
	0x037EB770 MOV X0, X19
	0x037EB774 MOV W1, W21
	0x037EB778 BL 0x37E9CB4
	0x037EB77C SUB W21, W21, 0x1
	0x037EB780 LDR W8, [X20]
	0x037EB784 ADD W21, W21, 0x1
	0x037EB788 CMP W21, W8
	0x037EB78C B.LT 0x37EB748
	0x037EB790 B 0x37EB7F0
	0x037EB794 CMP W8, 0x1
	0x037EB798 B.LT 0x37EB7F0
	0x037EB79C ADRP X22, 0x95E000
	0x037EB7A0 LDR X22, [X22 + 0x308]
	0x037EB7A4 MOV W21, W31
	0x037EB7A8 LDR X2, [X22]
	0x037EB7AC ADD X8, X31, 0x0
	0x037EB7B0 MOV X0, X20
	0x037EB7B4 MOV W1, W21
	0x037EB7B8 BL 0x2DEBA18
	0x037EB7BC LDR X8, [X31 + 0x1D0]
	0x037EB7C0 CBZ X8, 0x37EB808
	0x037EB7C4 LDR W8, [X8 + 0x194]
	0x037EB7C8 CMP W8, 0x1
	0x037EB7CC B.NE 0x37EB7E0
	0x037EB7D0 MOV X0, X19
	0x037EB7D4 MOV W1, W21
	0x037EB7D8 BL 0x37E9CB4
	0x037EB7DC SUB W21, W21, 0x1
	0x037EB7E0 LDR W8, [X20]
	0x037EB7E4 ADD W21, W21, 0x1
	0x037EB7E8 CMP W21, W8
	0x037EB7EC B.LT 0x37EB7A8
	0x037EB7F0 ADD X31, X31, 0x220
	0x037EB7F4 LDP X20, X19, [X31 + 0x30]
	0x037EB7F8 LDP X22, X21, [X31 + 0x20]
	0x037EB7FC LDP X30, X23, [X31 + 0x10]
	0x037EB800 LDR X29, [X31], #0x40
	0x037EB804 RET
	0x037EB808 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBF7000
	007 Move W8, [X21+822]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x931000
	015 Move X0, [X0+3392]
	016 Call 0x1C17CF4
	017 Move X0, 0x931000
	018 Move X0, [X0+3400]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+822], W8
	022 Compare X20, 0
	023 JumpIfEqual {53}
	024 Move X0, X20
	025 Move X1, X31
	026 Call InputActionReference.get_action, X0
	027 Compare X0, 0
	028 JumpIfEqual {54}
	029 Move X1, X31
	030 Call InputAction.get_controls, X0
	031 Move X8, X1
	032 ShiftRight X8, 32
	033 And X8, X8, 0x7FFFFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X31], X0
	036 Move [X31+8], X1
	037 Move X21, 0x931000
	038 Move X21, [X21+3400]
	039 Move W20, W31
	040 Move X2, [X21]
	041 Add X0, X31, 0
	042 Move W1, W20
	043 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	044 Compare X0, 0
	045 JumpIfEqual {60}
	046 Move X8, [X0+120]
	047 Move W9, [X31+12]
	048 Add W20, W20, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W0, W31
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Move X21, [X31+24]
	058 Add X31, X31, 48
	059 Return X0
	060 Call 0x1C17F20

Method: System.Void OnPointCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EBDB0 BL 0x37376AC
	0x037EBDB4 CBZ X0, 0x37EBDC8
	0x037EBDB8 LDP X20, X19, [X31 + 0x10]
	0x037EBDBC MOV X1, X31
	0x037EBDC0 LDR X30, [X31], #0x20
	0x037EBDC4 B 0x3745D90
	0x037EBDC8 LDP X20, X19, [X31 + 0x10]
	0x037EBDCC MOV X0, X31
	0x037EBDD0 LDR X30, [X31], #0x20
	0x037EBDD4 RET
	0x037EBDD8 BL 0x1C16F20
	0x037EBDDC LDR X0, [X0 + 0x70]
	0x037EBDE0 RET
	0x037EBDE4 ADRP X8, 0xFFFFFFFFFD302000
	0x037EBDE8 LDR V0, [X8 + 0xC58]
	0x037EBDEC MOVZ W9, 0x40000000
	0x037EBDF0 MOVZ W10, 0x1
	0x037EBDF4 MOVI V1.2D, 0xFFFFFFFFFFFFFFFF
	0x037EBDF8 MOV X1, X31
	0x037EBDFC STR W9, [X0 + 0x60]
	0x037EBE00 STRB W10, [X0 + 0xC8]
	0x037EBE04 STR D0, [X0 + 0x58]
	0x037EBE08 STR D1, [X0 + 0x120]
	0x037EBE0C B 0x3E551FC
	0x037EBE10 STR X30, [X31 - 0x30]!
	0x037EBE14 STP X22, X21, [X31 + 0x10]
	0x037EBE18 STP X20, X19, [X31 + 0x20]
	0x037EBE1C ADRP X21, 0xBF6000
	0x037EBE20 ADRP X22, 0x95E000
	0x037EBE24 ADRP X19, 0x95E000
	0x037EBE28 ADRP X20, 0x95E000
	0x037EBE2C LDRB W8, [X21 + 0x344]
	0x037EBE30 LDR X22, [X22 + 0x548]
	0x037EBE34 LDR X19, [X19 + 0x550]
	0x037EBE38 LDR X20, [X20 + 0x378]
	0x037EBE3C TBNZ X8, 0x0, 0x37EBE6C
	0x037EBE40 ADRP X0, 0x95E000
	0x037EBE44 LDR X0, [X0 + 0x550]
	0x037EBE48 BL 0x1C16CF4
	0x037EBE4C ADRP X0, 0x95E000
	0x037EBE50 LDR X0, [X0 + 0x548]
	0x037EBE54 BL 0x1C16CF4
	0x037EBE58 ADRP X0, 0x95E000
	0x037EBE5C LDR X0, [X0 + 0x378]
	0x037EBE60 BL 0x1C16CF4
	0x037EBE64 MOVZ W8, 0x1
	0x037EBE68 STRB W8, [X21 + 0x344]
	0x037EBE6C LDR X0, [X22]
	0x037EBE70 BL 0x1C16F10
	0x037EBE74 LDR X1, [X19]
	0x037EBE78 MOV X19, X0
	0x037EBE7C BL 0x2ACCE38
	0x037EBE80 LDR X8, [X20]
	0x037EBE84 LDP X22, X21, [X31 + 0x10]
	0x037EBE88 LDR X8, [X8 + 0xB8]
	0x037EBE8C STR X19, [X8]
	0x037EBE90 LDP X20, X19, [X31 + 0x20]
	0x037EBE94 LDR X30, [X31], #0x30
	0x037EBE98 RET
	0x037EBE9C LDR X0, [X0 + 0x60]
	0x037EBEA0 RET
	0x037EBEA4 STR X1, [X0 + 0x60]
	0x037EBEA8 B 0x37EBEAC
	0x037EBEAC STP X30, X21, [X31 - 0x20]!
	0x037EBEB0 STP X20, X19, [X31 + 0x10]
	0x037EBEB4 ADRP X20, 0xBF6000
	0x037EBEB8 ADRP X21, 0x908000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF7000
	007 Move W8, [X20+823]
	008 Move X19, X0
	009 Move [X31], X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x95F000
	015 Move X0, [X0+1344]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+823], W8
	019 Add X1, X31, 0
	020 Move X0, X19
	021 Call InputSystemUIInputModule.CheckForRemovedDevice, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {73}
	026 Add X0, X31, 0
	027 Move X1, X31
	028 Call CallbackContext.get_canceled, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {73}
	033 Add X0, X31, 0
	034 Move X1, X31
	035 Call CallbackContext.get_control, X0
	036 Move X1, X0
	037 Move W2, 1
	038 Move X0, X19
	039 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1, X2
	040 Add W31, W0, 1
	041 Move W1, W0
	042 Move X0, X19
	043 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	044 Move X8, 0x95F000
	045 Move X8, [X8+1344]
	046 Move X19, X0
	047 Add X0, X31, 0
	048 Move X1, [X8]
	049 Call CallbackContext.ReadValue, X0
	050 Move V2, [X19+472]
	051 Move V3, [X19+476]
	052 Move X8, -47190016
	053 Move V4, [X8+3872]
	054 Subtract S2, S2, S0
	055 Subtract S3, S3, S1
	056 Multiply S2, S2, S2
	057 Multiply S3, S3, S3
	058 Add S2, S2, S3
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move W8, 1
	061 Move [X19+472], S0
	062 Move [X19+476], S1
	063 Move [X19], W8
	064 Move X19, [X19+464]
	065 Add X0, X31, 0
	066 Move X1, X31
	067 Call CallbackContext.get_control, X0
	068 Move X1, X0
	069 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	070 Compare X19, 0
	071 JumpIfEqual {78}
	072 Move [X19+252], W0
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X30, [X31+16]
	076 Add X31, X31, 48
	077 Return 
	078 Call 0x1C17F20

Method: System.Boolean IgnoreNextClick(ref UnityEngine.InputSystem.InputAction/CallbackContext context, System.Boolean wasPressed)

Disassembly:
	0x037EBEBC LDRB W8, [X20 + 0x345]
	0x037EBEC0 LDR X21, [X21 + 0x598]
	0x037EBEC4 MOV X19, X0
	0x037EBEC8 TBNZ X8, 0x0, 0x37EBEEC
	0x037EBECC ADRP X0, 0x95E000
	0x037EBED0 LDR X0, [X0 + 0x558]
	0x037EBED4 BL 0x1C16CF4
	0x037EBED8 ADRP X0, 0x908000
	0x037EBEDC LDR X0, [X0 + 0x598]
	0x037EBEE0 BL 0x1C16CF4
	0x037EBEE4 MOVZ W8, 0x1
	0x037EBEE8 STRB W8, [X20 + 0x345]
	0x037EBEEC LDR X0, [X21]
	0x037EBEF0 LDR X20, [X19 + 0x60]
	0x037EBEF4 LDR W8, [X0 + 0xE0]
	0x037EBEF8 CBNZ W8, 0x37EBF00
	0x037EBEFC BL 0x1C16DFC
	0x037EBF00 MOV X0, X20
	0x037EBF04 MOV X1, X31
	0x037EBF08 MOV X2, X31
	0x037EBF0C BL 0x3C3883C
	0x037EBF10 TBNZ X0, 0x0, 0x37EBF60
	0x037EBF14 ADRP X8, 0x95E000
	0x037EBF18 LDR X8, [X8 + 0x558]
	0x037EBF1C MOV X0, X19
	0x037EBF20 LDR X1, [X8]
	0x037EBF24 BL 0x21A3894
	0x037EBF28 LDR X8, [X21]
	0x037EBF2C MOV X20, X0
	0x037EBF30 LDR W9, [X8 + 0xE0]
	0x037EBF34 CBNZ W9, 0x37EBF40
	0x037EBF38 MOV X0, X8
	0x037EBF3C BL 0x1C16DFC
	0x037EBF40 MOV X0, X20
	0x037EBF44 MOV X1, X31
	0x037EBF48 MOV X2, X31
	0x037EBF4C BL 0x3C354F8
	0x037EBF50 TBZ X0, 0x0, 0x37EBF60
	0x037EBF54 CBZ X20, 0x37EBF6C
	0x037EBF58 LDR X8, [X19 + 0x60]
	0x037EBF5C STR X8, [X20 + 0x3A8]
	0x037EBF60 LDP X20, X19, [X31 + 0x10]
	0x037EBF64 LDP X30, X21, [X31], #0x20
	0x037EBF68 RET
	0x037EBF6C BL 0x1C16F20
	0x037EBF70 STP X30, X19, [X31 - 0x10]!
	0x037EBF74 MOV X1, X31
	0x037EBF78 MOV X19, X0
	0x037EBF7C BL 0x3E51490
	0x037EBF80 MOV X0, X19
	0x037EBF84 LDP X30, X19, [X31], #0x10
	0x037EBF88 B 0x37EBEAC
	0x037EBF8C MOV X1, X31
	0x037EBF90 B 0x3E515B4
	0x037EBF94 STR X30, [X31 - 0x30]!
	0x037EBF98 STP X22, X21, [X31 + 0x10]
	0x037EBF9C STP X20, X19, [X31 + 0x20]
	0x037EBFA0 ADRP X19, 0xBF6000
	0x037EBFA4 ADRP X22, 0x92F000
	0x037EBFA8 LDRB W8, [X19 + 0x346]
	0x037EBFAC LDR X22, [X22 + 0xDF8]
	0x037EBFB0 MOV X20, X0
	0x037EBFB4 TBNZ X8, 0x0, 0x37EBFCC
	0x037EBFB8 ADRP X0, 0x92F000
	0x037EBFBC LDR X0, [X0 + 0xDF8]
	0x037EBFC0 BL 0x1C16CF4
	0x037EBFC4 MOVZ W8, 0x1
	0x037EBFC8 STRB W8, [X19 + 0x346]
	0x037EBFCC LDR X0, [X22]
	0x037EBFD0 LDR W8, [X0 + 0xE0]
	0x037EBFD4 CBNZ W8, 0x37EBFDC
	0x037EBFD8 BL 0x1C16DFC
	0x037EBFDC MOV X0, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBF7000
	006 Move W8, [X21+824]
	007 Move W19, W2
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x931000
	014 Move X0, [X0+3792]
	015 Call 0x1C17CF4
	016 Move X0, 0x931000
	017 Move X0, [X0+3784]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+824], W8
	021 Call InputSystemUIInputModule.get_explictlyIgnoreFocus, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {27}
	026 Move W0, W31
	027 Move X0, X20
	028 Move X1, X31
	029 Call CallbackContext.get_canceled, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {69}
	034 Move X8, 0x931000
	035 Move X8, [X8+3784]
	036 Move X8, [X8]
	037 Move X8, [X8+184]
	038 Move X21, [X8]
	039 Compare X21, 0
	040 JumpIfEqual {89}
	041 Move X10, 0x931000
	042 Move X8, [X21]
	043 Move X10, [X10+3792]
	044 NotImplemented "Instruction LDRH not yet implemented."
	045 Move X1, [X10]
	046 Compare X9, 0
	047 JumpIfEqual {54}
	048 Move X10, [X8+176]
	049 Add X10, X10, 8
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Subtract X9, X9, 1
	053 Add X10, X10, 16
	054 Move W2, 14
	055 Move X0, X21
	056 Call 0x1C5D788
	057 Move W9, [X10]
	058 Add W9, W9, 14
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X8, [X0]
	062 Move X1, [X0+8]
	063 Move X0, X21
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {70}
	069 Move W8, W31
	070 Move X0, X20
	071 Move X1, X31
	072 Call CallbackContext.get_control, X0
	073 Compare X0, 0
	074 JumpIfEqual {89}
	075 Move X0, [X0+120]
	076 Compare X0, 0
	077 JumpIfEqual {89}
	078 Move X1, X31
	079 Call InputDevice.get_canRunInBackground, X0
	080 NotImplemented "Instruction ORN not yet implemented."
	081 And W8, W8, 1
	082 And W31, W19, W8
	083 NotImplemented "Instruction CSET not yet implemented."
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Return X0
	089 Call 0x1C17F20

Method: System.Void OnLeftClickCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EBFE0 BL 0x3E4FF90
	0x037EBFE4 MOV X19, X0
	0x037EBFE8 MOV X0, X20
	0x037EBFEC MOV X1, X31
	0x037EBFF0 BL 0x3E50054
	0x037EBFF4 MOV X0, X20
	0x037EBFF8 MOV X1, X31
	0x037EBFFC BL 0x3E517D8
	0x037EC000 MOV X20, X31
	0x037EC004 LDR X0, [X22]
	0x037EC008 LDR W8, [X0 + 0xE0]
	0x037EC00C CBNZ W8, 0x37EC014
	0x037EC010 BL 0x1C16DFC
	0x037EC014 MOV X0, X19
	0x037EC018 MOV X1, X31
	0x037EC01C BL 0x3E50054
	0x037EC020 CBNZ X20, 0x37EC034
	0x037EC024 LDP X20, X19, [X31 + 0x20]
	0x037EC028 LDP X22, X21, [X31 + 0x10]
	0x037EC02C LDR X30, [X31], #0x30
	0x037EC030 RET
	0x037EC034 MOV X0, X20
	0x037EC038 BL 0x1C16F18
	0x037EC03C CMP W1, 0x1
	0x037EC040 MOV X21, X0
	0x037EC044 B.NE 0x37EC05C
	0x037EC048 MOV X0, X21
	0x037EC04C BL 0x3EB1AD0
	0x037EC050 LDR X20, [X0]
	0x037EC054 BL 0x3EB1AE0
	0x037EC058 B 0x37EC004
	0x037EC05C MOV X20, X31
	0x037EC060 B 0x37EC068
	0x037EC064 MOV X21, X0
	0x037EC068 LDR X0, [X22]
	0x037EC06C LDR W8, [X0 + 0xE0]
	0x037EC070 CBNZ W8, 0x37EC078
	0x037EC074 BL 0x1C16DFC
	0x037EC078 MOV X0, X19
	0x037EC07C MOV X1, X31
	0x037EC080 BL 0x3E50054
	0x037EC084 CBNZ X20, 0x37EC090
	0x037EC088 MOV X0, X21
	0x037EC08C BL 0x1D2C690
	0x037EC090 MOV X0, X20
	0x037EC094 BL 0x1C16F18
	0x037EC098 BL 0x1990590
	0x037EC09C STP X30, X21, [X31 - 0x20]!
	0x037EC0A0 STP X20, X19, [X31 + 0x10]
	0x037EC0A4 ADRP X20, 0xBF5000
	0x037EC0A8 ADRP X21, 0x92E000
	0x037EC0AC LDRB W8, [X20 + 0x347]
	0x037EC0B0 LDR X21, [X21 + 0xDF8]
	0x037EC0B4 MOV X19, X0
	0x037EC0B8 TBNZ X8, 0x0, 0x37EC0D0
	0x037EC0BC ADRP X0, 0x92E000
	0x037EC0C0 LDR X0, [X0 + 0xDF8]
	0x037EC0C4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31], X1
	007 Add X1, X31, 0
	008 Move X19, X0
	009 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	010 Add W31, W0, 1
	011 Move W1, W0
	012 Move X0, X19
	013 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	014 Move W20, [X0+8]
	015 Move X19, X0
	016 Add X0, X31, 0
	017 Move X1, X31
	018 Call CallbackContext.ReadValueAsButton, X0
	019 Move W9, [X19+8]
	020 And W8, W0, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W9, [X19+12]
	023 Move [X19+8], W8
	024 Compare W8, 0
	025 JumpIfEqual {28}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move [X19+12], W31
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {34}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, 1
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {42}
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move W8, 2
	041 Move [X19+12], W8
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W20, 1
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Add X1, X31, 0
	046 Move [X19], W20
	047 Call InputSystemUIInputModule.IgnoreNextClick, X0, X1, X2
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {53}
	052 Move [X19+154], W20
	053 Move X19, [X19+464]
	054 Add X0, X31, 0
	055 Move X1, X31
	056 Call CallbackContext.get_control, X0
	057 Move X1, X0
	058 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	059 Compare X19, 0
	060 JumpIfEqual {67}
	061 Move [X19+252], W0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Add X31, X31, 48
	066 Return 
	067 Call 0x1C17F20

Method: System.Void OnRightClickCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EC11C LDR V3, [X0 + 0x200]
	0x037EC120 RET
	0x037EC124 LDR V0, [X0 + 0x1E0]
	0x037EC128 LDR V1, [X0 + 0x1E4]
	0x037EC12C RET
	0x037EC130 LDR V0, [X0 + 0x204]
	0x037EC134 RET
	0x037EC138 LDR V1, [X0 + 0x204]
	0x037EC13C FCMP S1, S0
	0x037EC140 B.NE 0x37EC148
	0x037EC144 RET
	0x037EC148 MOVZ W8, 0x1
	0x037EC14C STRB W8, [X0]
	0x037EC150 STR S0, [X0 + 0x204]
	0x037EC154 RET
	0x037EC158 LDR V0, [X0 + 0x208]
	0x037EC15C RET
	0x037EC160 LDR V1, [X0 + 0x208]
	0x037EC164 FCMP S1, S0
	0x037EC168 B.NE 0x37EC170
	0x037EC16C RET
	0x037EC170 MOVZ W8, 0x1
	0x037EC174 STRB W8, [X0]
	0x037EC178 STR S0, [X0 + 0x208]
	0x037EC17C RET
	0x037EC180 LDR V0, [X0 + 0x20C]
	0x037EC184 RET
	0x037EC188 LDR V1, [X0 + 0x20C]
	0x037EC18C FCMP S1, S0
	0x037EC190 B.NE 0x37EC198
	0x037EC194 RET
	0x037EC198 MOVZ W8, 0x1
	0x037EC19C STRB W8, [X0]
	0x037EC1A0 STR S0, [X0 + 0x20C]
	0x037EC1A4 RET
	0x037EC1A8 LDR V0, [X0 + 0x210]
	0x037EC1AC RET
	0x037EC1B0 LDR V1, [X0 + 0x210]
	0x037EC1B4 FCMP S1, S0
	0x037EC1B8 B.NE 0x37EC1C0
	0x037EC1BC RET
	0x037EC1C0 MOVZ W8, 0x1
	0x037EC1C4 STRB W8, [X0]
	0x037EC1C8 STR S0, [X0 + 0x210]
	0x037EC1CC RET
	0x037EC1D0 LDR V0, [X0 + 0x214]
	0x037EC1D4 LDR V1, [X0 + 0x218]
	0x037EC1D8 RET
	0x037EC1DC LDR V2, [X0 + 0x214]
	0x037EC1E0 LDR V3, [X0 + 0x218]
	0x037EC1E4 ADRP X8, 0xFFFFFFFFFD2FD000
	0x037EC1E8 LDR V4, [X8 + 0xF20]
	0x037EC1EC FSUB S2, S2, S0
	0x037EC1F0 FSUB S3, S3, S1
	0x037EC1F4 FMUL S2, S2, S2
	0x037EC1F8 FMUL S3, S3, S3
	0x037EC1FC FADD S2, S2, S3
	0x037EC200 FCMP S2, S4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31], X1
	007 Add X1, X31, 0
	008 Move X19, X0
	009 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	010 Add W31, W0, 1
	011 Move W1, W0
	012 Move X0, X19
	013 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	014 Move W20, [X0+160]
	015 Move X19, X0
	016 Add X0, X31, 0
	017 Move X1, X31
	018 Call CallbackContext.ReadValueAsButton, X0
	019 Move W9, [X19+160]
	020 And W8, W0, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W9, [X19+164]
	023 Move [X19+160], W8
	024 Compare W8, 0
	025 JumpIfEqual {28}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move [X19+164], W31
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {34}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, 1
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {42}
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move W8, 2
	041 Move [X19+164], W8
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W20, 1
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Add X1, X31, 0
	046 Move [X19], W20
	047 Call InputSystemUIInputModule.IgnoreNextClick, X0, X1, X2
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {53}
	052 Move [X19+306], W20
	053 Move X19, [X19+464]
	054 Add X0, X31, 0
	055 Move X1, X31
	056 Call CallbackContext.get_control, X0
	057 Move X1, X0
	058 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	059 Compare X19, 0
	060 JumpIfEqual {67}
	061 Move [X19+252], W0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Add X31, X31, 48
	066 Return 
	067 Call 0x1C17F20

Method: System.Void OnMiddleClickCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EC204 B.MI 0x37EC218
	0x037EC208 MOVZ W8, 0x1
	0x037EC20C STR S0, [X0 + 0x214]
	0x037EC210 STRB W8, [X0]
	0x037EC214 STR S1, [X0 + 0x218]
	0x037EC218 RET
	0x037EC21C MOVZ W8, 0x3
	0x037EC220 STR W8, [X0 + 0x4]
	0x037EC224 RET
	0x037EC228 LDRB W0, [X0]
	0x037EC22C RET
	0x037EC230 LDRB W0, [X0 + 0x92]
	0x037EC234 RET
	0x037EC238 AND W8, W1, 0x1
	0x037EC23C STRB W8, [X0 + 0x92]
	0x037EC240 RET
	0x037EC244 LDR V0, [X0 + 0x8]
	0x037EC248 RET
	0x037EC24C STR S0, [X0 + 0x8]
	0x037EC250 RET
	0x037EC254 LDRB W0, [X0 + 0x91]
	0x037EC258 RET
	0x037EC25C AND W8, W1, 0x1
	0x037EC260 STRB W8, [X0 + 0x91]
	0x037EC264 RET
	0x037EC268 STP X30, X21, [X31 - 0x20]!
	0x037EC26C STP X20, X19, [X31 + 0x10]
	0x037EC270 ADRP X21, 0xBF5000
	0x037EC274 ADRP X20, 0x907000
	0x037EC278 LDRB W8, [X21 + 0x348]
	0x037EC27C LDR X20, [X20 + 0x598]
	0x037EC280 MOV X19, X0
	0x037EC284 TBNZ X8, 0x0, 0x37EC29C
	0x037EC288 ADRP X0, 0x907000
	0x037EC28C LDR X0, [X0 + 0x598]
	0x037EC290 BL 0x1C16CF4
	0x037EC294 MOVZ W8, 0x1
	0x037EC298 STRB W8, [X21 + 0x348]
	0x037EC29C MOV X0, X19
	0x037EC2A0 BL 0x37EC2FC
	0x037EC2A4 LDR X8, [X20]
	0x037EC2A8 MOV X19, X0
	0x037EC2AC LDR W9, [X8 + 0xE0]
	0x037EC2B0 CBNZ W9, 0x37EC2BC
	0x037EC2B4 MOV X0, X8
	0x037EC2B8 BL 0x1C16DFC
	0x037EC2BC MOV X0, X19
	0x037EC2C0 MOV X1, X31
	0x037EC2C4 MOV X2, X31
	0x037EC2C8 BL 0x3C354F8
	0x037EC2CC TBZ X0, 0x0, 0x37EC2E8
	0x037EC2D0 CBZ X19, 0x37EC2F8
	0x037EC2D4 MOV X0, X19
	0x037EC2D8 LDP X20, X19, [X31 + 0x10]
	0x037EC2DC MOV X1, X31
	0x037EC2E0 LDP X30, X21, [X31], #0x20
	0x037EC2E4 B 0x3E24E68
	0x037EC2E8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31], X1
	007 Add X1, X31, 0
	008 Move X19, X0
	009 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	010 Add W31, W0, 1
	011 Move W1, W0
	012 Move X0, X19
	013 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	014 Move W20, [X0+312]
	015 Move X19, X0
	016 Add X0, X31, 0
	017 Move X1, X31
	018 Call CallbackContext.ReadValueAsButton, X0
	019 Move W9, [X19+312]
	020 And W8, W0, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W9, [X19+316]
	023 Move [X19+312], W8
	024 Compare W8, 0
	025 JumpIfEqual {28}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move [X19+316], W31
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {34}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, 1
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {42}
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move W8, 2
	041 Move [X19+316], W8
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W20, 1
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Add X1, X31, 0
	046 Move [X19], W20
	047 Call InputSystemUIInputModule.IgnoreNextClick, X0, X1, X2
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {53}
	052 Move [X19+458], W20
	053 Move X19, [X19+464]
	054 Add X0, X31, 0
	055 Move X1, X31
	056 Call CallbackContext.get_control, X0
	057 Move X1, X0
	058 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	059 Compare X19, 0
	060 JumpIfEqual {67}
	061 Move [X19+252], W0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Add X31, X31, 48
	066 Return 
	067 Call 0x1C17F20

Method: System.Boolean CheckForRemovedDevice(ref UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EAED0 MOV X20, X1
	0x037EAED4 TBNZ X8, 0x0, 0x37EAEF8
	0x037EAED8 ADRP X0, 0x931000
	0x037EAEDC LDR X0, [X0 + 0xED0]
	0x037EAEE0 BL 0x1C16CF4
	0x037EAEE4 ADRP X0, 0x931000
	0x037EAEE8 LDR X0, [X0 + 0xEC8]
	0x037EAEEC BL 0x1C16CF4
	0x037EAEF0 MOVZ W8, 0x1
	0x037EAEF4 STRB W8, [X21 + 0x338]
	0x037EAEF8 BL 0x37E8690
	0x037EAEFC TBZ X0, 0x0, 0x37EAF08
	0x037EAF00 MOV W0, W31
	0x037EAF04 B 0x37EAFD0
	0x037EAF08 MOV X0, X20
	0x037EAF0C MOV X1, X31
	0x037EAF10 BL 0x3735E24
	0x037EAF14 TBZ X0, 0x0, 0x37EAF98
	0x037EAF18 ADRP X8, 0x931000
	0x037EAF1C LDR X8, [X8 + 0xEC8]
	0x037EAF20 LDR X8, [X8]
	0x037EAF24 LDR X8, [X8 + 0xB8]
	0x037EAF28 LDR X21, [X8]
	0x037EAF2C CBZ X21, 0x37EAFDC
	0x037EAF30 ADRP X10, 0x931000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call CallbackContext.get_canceled, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {27}
	013 Move X0, X20
	014 Move X1, X31
	015 Call CallbackContext.get_control, X0
	016 Compare X0, 0
	017 JumpIfEqual {34}
	018 Move X0, [X0+120]
	019 Compare X0, 0
	020 JumpIfEqual {34}
	021 Move X1, X31
	022 Call InputDevice.get_added, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {28}
	027 Move W0, W31
	028 Move W0, 1
	029 Move [X19+213], W0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return X0
	034 Call 0x1C17F20

Method: System.Void OnScrollCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EC2EC MOV X0, X31
	0x037EC2F0 LDP X30, X21, [X31], #0x20
	0x037EC2F4 RET
	0x037EC2F8 BL 0x1C16F20
	0x037EC2FC STP X30, X21, [X31 - 0x20]!
	0x037EC300 STP X20, X19, [X31 + 0x10]
	0x037EC304 ADRP X21, 0xBF5000
	0x037EC308 ADRP X20, 0x907000
	0x037EC30C LDRB W8, [X21 + 0x34F]
	0x037EC310 LDR X20, [X20 + 0x598]
	0x037EC314 MOV X19, X0
	0x037EC318 TBNZ X8, 0x0, 0x37EC33C
	0x037EC31C ADRP X0, 0x95D000
	0x037EC320 LDR X0, [X0 + 0x560]
	0x037EC324 BL 0x1C16CF4
	0x037EC328 ADRP X0, 0x907000
	0x037EC32C LDR X0, [X0 + 0x598]
	0x037EC330 BL 0x1C16CF4
	0x037EC334 MOVZ W8, 0x1
	0x037EC338 STRB W8, [X21 + 0x34F]
	0x037EC33C LDR X0, [X20]
	0x037EC340 LDR X20, [X19 + 0x40]
	0x037EC344 LDR W8, [X0 + 0xE0]
	0x037EC348 CBNZ W8, 0x37EC350
	0x037EC34C BL 0x1C16DFC
	0x037EC350 MOV X0, X20
	0x037EC354 MOV X1, X31
	0x037EC358 MOV X2, X31
	0x037EC35C BL 0x3C354F8
	0x037EC360 TBZ X0, 0x0, 0x37EC36C
	0x037EC364 LDR X0, [X19 + 0x40]
	0x037EC368 B 0x37EC384
	0x037EC36C ADRP X8, 0x95D000
	0x037EC370 LDR X8, [X8 + 0x560]
	0x037EC374 MOV X0, X19
	0x037EC378 LDR X1, [X8]
	0x037EC37C BL 0x21A3894
	0x037EC380 STR X0, [X19 + 0x40]
	0x037EC384 LDP X20, X19, [X31 + 0x10]
	0x037EC388 LDP X30, X21, [X31], #0x20
	0x037EC38C RET
	0x037EC390 LDR W0, [X0 + 0x38]
	0x037EC394 RET
	0x037EC398 STR W1, [X0 + 0x38]
	0x037EC39C RET
	0x037EC3A0 LDRB W0, [X0 + 0x32]
	0x037EC3A4 RET
	0x037EC3A8 AND W8, W1, 0x1
	0x037EC3AC STRB W8, [X0 + 0x32]
	0x037EC3B0 RET
	0x037EC3B4 LDRB W0, [X0 + 0x31]
	0x037EC3B8 RET
	0x037EC3BC AND W8, W1, 0x1
	0x037EC3C0 STRB W8, [X0 + 0x31]
	0x037EC3C4 RET
	0x037EC3C8 LDRB W0, [X0 + 0x30]
	0x037EC3CC RET
	0x037EC3D0 AND W8, W1, 0x1
	0x037EC3D4 STRB W8, [X0 + 0x30]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF6000
	007 Move W8, [X20+825]
	008 Move X19, X0
	009 Move [X31], X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x95E000
	015 Move X0, [X0+1344]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+825], W8
	019 Add X1, X31, 0
	020 Move X0, X19
	021 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	022 Add W31, W0, 1
	023 Move X20, 0x95E000
	024 Move X20, [X20+1344]
	025 Move W1, W0
	026 Move X0, X19
	027 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	028 Move X1, [X20]
	029 Move X19, X0
	030 Add X0, X31, 0
	031 Call CallbackContext.ReadValue, X0
	032 Move X8, -47190016
	033 Move V3, [X8+512]
	034 Move V4, [X19+480]
	035 Move V5, [X19+484]
	036 Move X8, -47194112
	037 Multiply S2, S0, S3
	038 Multiply S0, S1, S3
	039 Move V1, [X8+3872]
	040 Subtract S3, S4, S2
	041 Subtract S4, S5, S0
	042 Multiply S3, S3, S3
	043 Multiply S4, S4, S4
	044 Add S3, S3, S4
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move W8, 1
	047 Move [X19+480], S2
	048 Move [X19], W8
	049 Move [X19+484], S0
	050 Move X19, [X19+464]
	051 Add X0, X31, 0
	052 Move X1, X31
	053 Call CallbackContext.get_control, X0
	054 Move X1, X0
	055 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	056 Compare X19, 0
	057 JumpIfEqual {64}
	058 Move [X19+252], W0
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X30, [X31+16]
	062 Add X31, X31, 48
	063 Return 
	064 Call 0x1C17F20

Method: System.Void OnMoveCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EC418 ADRP X0, 0x95D000
	0x037EC41C LDR X0, [X0 + 0x340]
	0x037EC420 BL 0x1C16CF4
	0x037EC424 MOVZ W8, 0x1
	0x037EC428 STRB W8, [X21 + 0x349]
	0x037EC42C ADRP X21, 0x95D000
	0x037EC430 LDR X21, [X21 + 0x568]
	0x037EC434 MOV X0, X19
	0x037EC438 MOV X1, X31
	0x037EC43C BL 0x3E59A1C
	0x037EC440 LDR X0, [X20]
	0x037EC444 LDR W8, [X0 + 0xE0]
	0x037EC448 CBNZ W8, 0x37EC454
	0x037EC44C BL 0x1C16DFC
	0x037EC450 LDR X0, [X20]
	0x037EC454 LDR X0, [X0 + 0xB8]
	0x037EC458 LDR X3, [X21]
	0x037EC45C MOV X1, X19
	0x037EC460 LDP X20, X19, [X31 + 0x10]
	0x037EC464 MOVZ W2, 0xA
	0x037EC468 LDP X30, X21, [X31], #0x20
	0x037EC46C B 0x2DEA8C8
	0x037EC470 SUB X31, X31, 0x70
	0x037EC474 STR X30, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF6000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x95E000
	010 Move W8, [X20+826]
	011 Move X21, [X21+1344]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x95E000
	018 Move X0, [X0+1344]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+826], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+904], S0
	026 Move [X19+908], S1
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return 

Method: System.Void OnTrackedDeviceOrientationCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EC478 STP X22, X21, [X31 + 0x50]
	0x037EC47C STP X20, X19, [X31 + 0x60]
	0x037EC480 ADRP X20, 0xBF5000
	0x037EC484 ADRP X21, 0x95D000
	0x037EC488 LDRB W8, [X20 + 0x34A]
	0x037EC48C LDR X21, [X21 + 0x340]
	0x037EC490 MOV X19, X0
	0x037EC494 TBNZ X8, 0x0, 0x37EC4C4
	0x037EC498 ADRP X0, 0x95D000
	0x037EC49C LDR X0, [X0 + 0x570]
	0x037EC4A0 BL 0x1C16CF4
	0x037EC4A4 ADRP X0, 0x95D000
	0x037EC4A8 LDR X0, [X0 + 0x578]
	0x037EC4AC BL 0x1C16CF4
	0x037EC4B0 ADRP X0, 0x95D000
	0x037EC4B4 LDR X0, [X0 + 0x340]
	0x037EC4B8 BL 0x1C16CF4
	0x037EC4BC MOVZ W8, 0x1
	0x037EC4C0 STRB W8, [X20 + 0x34A]
	0x037EC4C4 LDR X0, [X21]
	0x037EC4C8 ADRP X20, 0x95D000
	0x037EC4CC LDR W8, [X0 + 0xE0]
	0x037EC4D0 LDR X20, [X20 + 0x578]
	0x037EC4D4 CBNZ W8, 0x37EC4E0
	0x037EC4D8 BL 0x1C16DFC
	0x037EC4DC LDR X0, [X21]
	0x037EC4E0 LDR X8, [X0 + 0xB8]
	0x037EC4E4 LDR X2, [X20]
	0x037EC4E8 ADD X0, X31, 0x20
	0x037EC4EC MOV X1, X19
	0x037EC4F0 LDR X9, [X8 + 0x10]
	0x037EC4F4 LDR V0, [X8]
	0x037EC4F8 STR X9, [X31 + 0x10]
	0x037EC4FC STR V0, [X31]
	0x037EC500 STR V0, [X31 + 0x2]
	0x037EC504 STR X9, [X31 + 0x30]
	0x037EC508 BL 0x21FB010
	0x037EC50C ADDS W31, W0, 0x1
	0x037EC510 B.EQ 0x37EC544
	0x037EC514 MOV W20, W0
	0x037EC518 LDR X0, [X21]
	0x037EC51C ADRP X22, 0x95D000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF6000
	007 Move W8, [X20+827]
	008 Move X19, X0
	009 Move [X31], X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x95D000
	015 Move X0, [X0+3536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+827], W8
	019 Add X1, X31, 0
	020 Move X0, X19
	021 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	022 Add W31, W0, 1
	023 Move X20, 0x95D000
	024 Move X20, [X20+3536]
	025 Move W1, W0
	026 Move X0, X19
	027 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	028 Move X1, [X20]
	029 Move X19, X0
	030 Add X0, X31, 0
	031 Call CallbackContext.ReadValue, X0
	032 Move X0, X19
	033 Call PointerModel.set_worldOrientation, X0, X1
	034 Move X19, [X19+464]
	035 Add X0, X31, 0
	036 Move X1, X31
	037 Call CallbackContext.get_control, X0
	038 Move X1, X0
	039 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	040 Compare X19, 0
	041 JumpIfEqual {48}
	042 Move [X19+252], W0
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 48
	047 Return 
	048 Call 0x1C17F20

Method: System.Void OnTrackedDevicePositionCallback(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037EC578 MOV X19, X2
	0x037EC57C MOV X21, X1
	0x037EC580 MOV X20, X0
	0x037EC584 TBNZ X8, 0x0, 0x37EC59C
	0x037EC588 ADRP X0, 0x95D000
	0x037EC58C LDR X0, [X0 + 0x508]
	0x037EC590 BL 0x1C16CF4
	0x037EC594 MOVZ W8, 0x1
	0x037EC598 STRB W8, [X22 + 0x34B]
	0x037EC59C CBZ X21, 0x37EC5FC
	0x037EC5A0 ADRP X8, 0x95D000
	0x037EC5A4 LDR X8, [X8 + 0x508]
	0x037EC5A8 LDR X9, [X21]
	0x037EC5AC LDR X8, [X8]
	0x037EC5B0 LDRB W11, [X9 + 0x130]
	0x037EC5B4 LDRB W10, [X8 + 0x130]
	0x037EC5B8 CMP W11, W10
	0x037EC5BC B.CC 0x37EC5FC
	0x037EC5C0 LDR X9, [X9 + 0xC8]
	0x037EC5C4 ADD X9, X9, X10, 0x3, LSL
	0x037EC5C8 LDUR X9, [X9 - 0x8]
	0x037EC5CC CMP X9, X8
	0x037EC5D0 CSEL X1, X21, X31, EQ
	0x037EC5D4 CBZ X1, 0x37EC5FC
	0x037EC5D8 LDR W8, [X1 + 0x194]
	0x037EC5DC CMP W8, 0x3
	0x037EC5E0 B.NE 0x37EC5FC
	0x037EC5E4 MOV X0, X20
	0x037EC5E8 MOV X2, X19
	0x037EC5EC LDP X20, X19, [X31 + 0x20]
	0x037EC5F0 LDP X22, X21, [X31 + 0x10]
	0x037EC5F4 LDR X30, [X31], #0x30
	0x037EC5F8 B 0x37E5DFC
	0x037EC5FC LDP X20, X19, [X31 + 0x20]
	0x037EC600 LDP X22, X21, [X31 + 0x10]
	0x037EC604 LDR X30, [X31], #0x30
	0x037EC608 RET
	0x037EC60C SUB X31, X31, 0xE0
	0x037EC610 STR D12, [X31 + 0x50]
	0x037EC614 STP D11, D10, [X31 + 0x60]
	0x037EC618 STP D9, D8, [X31 + 0x70]
	0x037EC61C STP X29, X30, [X31 + 0x80]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF6000
	007 Move W8, [X20+828]
	008 Move X19, X0
	009 Move [X31], X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x95D000
	015 Move X0, [X0+3528]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+828], W8
	019 Add X1, X31, 0
	020 Move X0, X19
	021 Call InputSystemUIInputModule.GetPointerStateIndexFor, X0, X1
	022 Add W31, W0, 1
	023 Move X20, 0x95D000
	024 Move X20, [X20+3528]
	025 Move W1, W0
	026 Move X0, X19
	027 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	028 Move X1, [X20]
	029 Move X19, X0
	030 Add X0, X31, 0
	031 Call CallbackContext.ReadValue, X0
	032 Move X0, X19
	033 Call PointerModel.set_worldPosition, X0, X1
	034 Move X19, [X19+464]
	035 Add X0, X31, 0
	036 Move X1, X31
	037 Call CallbackContext.get_control, X0
	038 Move X1, X0
	039 Call InputSystemUIInputModule.GetDisplayIndexFor, X0, X1
	040 Compare X19, 0
	041 JumpIfEqual {48}
	042 Move [X19+252], W0
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 48
	047 Return 
	048 Call 0x1C17F20

Method: System.Void OnControlsChanged(System.Object obj)

Disassembly:
	0x037EC674 LDR X0, [X0 + 0x590]
	0x037EC678 BL 0x1C16CF4
	0x037EC67C ADRP X0, 0x95D000

ISIL:
	001 Move W8, 1
	002 Move [X0+213], W8
	003 Return 

Method: System.Void FilterPointerStatesByType()

Disassembly:
	0x037EC680 LDR X0, [X0 + 0x598]
	0x037EC684 BL 0x1C16CF4
	0x037EC688 ADRP X0, 0x95D000
	0x037EC68C LDR X0, [X0 + 0x5A0]
	0x037EC690 BL 0x1C16CF4
	0x037EC694 ADRP X0, 0x95D000
	0x037EC698 LDR X0, [X0 + 0x5A8]
	0x037EC69C BL 0x1C16CF4
	0x037EC6A0 ADRP X0, 0x95D000
	0x037EC6A4 LDR X0, [X0 + 0x360]
	0x037EC6A8 BL 0x1C16CF4
	0x037EC6AC ADRP X0, 0x95D000
	0x037EC6B0 LDR X0, [X0 + 0x5B0]
	0x037EC6B4 BL 0x1C16CF4
	0x037EC6B8 ADRP X0, 0x95D000
	0x037EC6BC LDR X0, [X0 + 0x340]
	0x037EC6C0 BL 0x1C16CF4
	0x037EC6C4 ADRP X0, 0x95D000
	0x037EC6C8 LDR X0, [X0 + 0x5B8]
	0x037EC6CC BL 0x1C16CF4
	0x037EC6D0 ADRP X0, 0x95D000
	0x037EC6D4 LDR X0, [X0 + 0x5C0]
	0x037EC6D8 BL 0x1C16CF4
	0x037EC6DC MOVZ W8, 0x1
	0x037EC6E0 STRB W8, [X24 + 0x34D]
	0x037EC6E4 LDR X0, [X23]
	0x037EC6E8 STR W31, [X31 + 0x28]
	0x037EC6EC STR X31, [X31 + 0x20]
	0x037EC6F0 STR W31, [X31 + 0x5C]
	0x037EC6F4 ADRP X26, 0x95D000
	0x037EC6F8 LDR W8, [X0 + 0xE0]
	0x037EC6FC LDR X26, [X26 + 0x340]
	0x037EC700 CBNZ W8, 0x37EC708
	0x037EC704 BL 0x1C16DFC
	0x037EC708 MOV X0, X22
	0x037EC70C MOV X1, X31
	0x037EC710 BL 0x3CDFBC4
	0x037EC714 LDR X8, [X26]
	0x037EC718 MOV X22, X0
	0x037EC71C LDR W9, [X8 + 0xE0]
	0x037EC720 CBNZ W9, 0x37EC730
	0x037EC724 MOV X0, X8
	0x037EC728 BL 0x1C16DFC
	0x037EC72C LDR X8, [X26]
	0x037EC730 LDR X8, [X8 + 0xB8]
	0x037EC734 LDR X8, [X8 + 0x18]
	0x037EC738 CBZ X8, 0x37ECAD0
	0x037EC73C LDP W2, W9, [X8 + 0x18]
	0x037EC740 ADD W9, W9, 0x1
	0x037EC744 CMP W2, 0x1
	0x037EC748 STP W31, W9, [X8 + 0x18]
	0x037EC74C B.LT 0x37EC760
	0x037EC750 LDR X0, [X8 + 0x10]
	0x037EC754 MOV W1, W31
	0x037EC758 MOV X3, X31
	0x037EC75C BL 0x339FA34
	0x037EC760 CBZ X22, 0x37ECAD0
	0x037EC764 ADRP X27, 0x95D000
	0x037EC768 ADRP X28, 0x95D000
	0x037EC76C ADRP X29, 0x95D000
	0x037EC770 LDR X27, [X27 + 0x590]
	0x037EC774 LDR X28, [X28 + 0x598]
	0x037EC778 LDR X29, [X29 + 0x5A8]
	0x037EC77C MOV W23, W31
	0x037EC780 LDR X8, [X22]
	0x037EC784 LDR X1, [X27]
	0x037EC788 LDRH W9, [X8 + 0x12E]
	0x037EC78C CBZ X9, 0x37EC7B0
	0x037EC790 LDR X10, [X8 + 0xB0]
	0x037EC794 ADD X10, X10, 0x8
	0x037EC798 LDUR X11, [X10 - 0x8]
	0x037EC79C CMP X11, X1
	0x037EC7A0 B.EQ 0x37EC7C0
	0x037EC7A4 SUBS X9, X9, 0x1
	0x037EC7A8 ADD X10, X10, 0x10
	0x037EC7AC B.NE 0x37EC798
	0x037EC7B0 MOV X0, X22
	0x037EC7B4 MOV W2, W31
	0x037EC7B8 BL 0x1C5C788
	0x037EC7BC B 0x37EC7CC
	0x037EC7C0 LDRSW X9, [X10]
	0x037EC7C4 ADD X8, X8, X9, 0x4, LSL
	0x037EC7C8 ADD X0, X8, 0x138
	0x037EC7CC LDP X8, X1, [X0]
	0x037EC7D0 MOV X0, X22
	0x037EC7D4 BLR X8
	0x037EC7D8 CMP W23, W0
	0x037EC7DC B.GE 0x37EC9BC
	0x037EC7E0 LDR X8, [X22]
	0x037EC7E4 LDR X1, [X28]
	0x037EC7E8 LDRH W9, [X8 + 0x12E]
	0x037EC7EC CBZ X9, 0x37EC810
	0x037EC7F0 LDR X10, [X8 + 0xB0]
	0x037EC7F4 ADD X10, X10, 0x8
	0x037EC7F8 LDUR X11, [X10 - 0x8]
	0x037EC7FC CMP X11, X1
	0x037EC800 B.EQ 0x37EC820
	0x037EC804 SUBS X9, X9, 0x1
	0x037EC808 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-64], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Subtract X31, X31, 544
	009 Move X20, 0xBF6000
	010 Move W8, [X20+829]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x95E000
	017 Move X0, [X0+776]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+829], W8
	021 Move W8, [X19+344]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W23, W31
	024 Move W21, W31
	025 Add X20, X19, 344
	026 Move X0, X19
	027 Move W1, W21
	028 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	029 Move X22, X0
	030 Move X0, [X0+464]
	031 Compare X0, 0
	032 JumpIfEqual {106}
	033 Call ExtendedPointerEventData.ReadDeviceState, X0
	034 Move X1, [X22+464]
	035 Move X0, X22
	036 Call PointerModel.CopyTouchOrPenStateFrom, X0, X1
	037 Compare W23, 0
	038 JumpIfNotEqual {46}
	039 Move W8, [X22]
	040 Compare W8, 0
	041 JumpIfEqual {46}
	042 Move X8, [X22+464]
	043 Compare X8, 0
	044 JumpIfEqual {106}
	045 Move W23, [X8+404]
	046 Move W8, [X20]
	047 Add W21, W21, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Compare W23, 0
	050 JumpIfEqual {97}
	051 Move W9, [X19+204]
	052 Compare W9, 0
	053 JumpIfNotEqual {97}
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X22, 0x95E000
	057 Move X22, [X22+776]
	058 Move W21, W31
	059 Move X2, [X22]
	060 Add X8, X31, 0
	061 Move X0, X20
	062 Move W1, W21
	063 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	064 Move X8, [X31+464]
	065 Compare X8, 0
	066 JumpIfEqual {106}
	067 Move W8, [X8+404]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, X19
	070 Move W1, W21
	071 Call InputSystemUIInputModule.SendPointerExitEventsAndRemovePointer, X0, X1
	072 Subtract W21, W21, 1
	073 Move W8, [X20]
	074 Add W21, W21, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X22, 0x95E000
	078 Move X22, [X22+776]
	079 Move W21, W31
	080 Move X2, [X22]
	081 Add X8, X31, 0
	082 Move X0, X20
	083 Move W1, W21
	084 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	085 Move X8, [X31+464]
	086 Compare X8, 0
	087 JumpIfEqual {106}
	088 Move W8, [X8+404]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X0, X19
	091 Move W1, W21
	092 Call InputSystemUIInputModule.SendPointerExitEventsAndRemovePointer, X0, X1
	093 Subtract W21, W21, 1
	094 Move W8, [X20]
	095 Add W21, W21, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Add X31, X31, 544
	098 Move X20, [X31+48]
	099 Move X19, [X31+56]
	100 Move X22, [X31+32]
	101 Move X21, [X31+40]
	102 Move X30, [X31+16]
	103 Move X23, [X31+24]
	104 Move X29, [X31+64]
	105 Return 
	106 Call 0x1C17F20

Method: System.Void Process()

Disassembly:
	0x037EC8D4 MOV V0.16B, V10.16B
	0x037EC8D8 MOV V1.16B, V9.16B
	0x037EC8DC MOV V2.16B, V8.16B
	0x037EC8E0 BL 0x3C045DC
	0x037EC8E4 LDR X8, [X21]
	0x037EC8E8 MOV X0, X21
	0x037EC8EC MOV V11.16B, V0.16B
	0x037EC8F0 MOV V12.16B, V1.16B
	0x037EC8F4 LDR X9, [X8 + 0x258]
	0x037EC8F8 LDR X1, [X8 + 0x260]
	0x037EC8FC BLR X9
	0x037EC900 LDR X8, [X24]
	0x037EC904 MOV X1, X0
	0x037EC908 MOV X0, X24
	0x037EC90C MOV V0.16B, V11.16B
	0x037EC910 LDR X9, [X8 + 0x418]
	0x037EC914 LDR X2, [X8 + 0x420]
	0x037EC918 MOV V1.16B, V12.16B
	0x037EC91C BLR X9
	0x037EC920 TBZ X0, 0x0, 0x37EC9B4
	0x037EC924 LDR X0, [X26]
	0x037EC928 LDR W8, [X0 + 0xE0]
	0x037EC92C CBNZ W8, 0x37EC938
	0x037EC930 BL 0x1C16DFC
	0x037EC934 LDR X0, [X26]
	0x037EC938 LDR X8, [X0 + 0xB8]
	0x037EC93C LDR X0, [X8 + 0x18]
	0x037EC940 CBZ X0, 0x37ECAD0
	0x037EC944 LDR W10, [X0 + 0x1C]
	0x037EC948 LDR V0, [X31 + 0x5C]
	0x037EC94C LDR X8, [X0 + 0x10]
	0x037EC950 LDR X9, [X29]
	0x037EC954 ADD W10, W10, 0x1
	0x037EC958 STR W10, [X0 + 0x1C]
	0x037EC95C CBZ X8, 0x37ECAD0
	0x037EC960 LDRSW X10, [X0 + 0x18]
	0x037EC964 LDR W11, [X8 + 0x18]
	0x037EC968 CMP W10, W11
	0x037EC96C B.CS 0x37EC990
	0x037EC970 ADD W9, W10, 0x1
	0x037EC974 ADD X8, X8, X10, 0x5, LSL
	0x037EC978 STR W9, [X0 + 0x18]
	0x037EC97C STR X24, [X8 + 0x20]
	0x037EC980 STP S10, S9, [X8 + 0x28]
	0x037EC984 STP S8, S11, [X8 + 0x30]
	0x037EC988 STP S12, S0, [X8 + 0x38]
	0x037EC98C B 0x37EC9B4
	0x037EC990 LDR X8, [X9 + 0x20]
	0x037EC994 ADD X1, X31, 0x30
	0x037EC998 LDR X8, [X8 + 0xC0]
	0x037EC99C LDR X2, [X8 + 0x70]
	0x037EC9A0 STR X24, [X31 + 0x30]
	0x037EC9A4 STP S10, S9, [X31 + 0x38]
	0x037EC9A8 STP S8, S11, [X31 + 0x40]
	0x037EC9AC STP S12, S0, [X31 + 0x48]
	0x037EC9B0 BL 0x31558B8
	0x037EC9B4 ADD W23, W23, 0x1
	0x037EC9B8 B 0x37EC780
	0x037EC9BC LDR X8, [X26]
	0x037EC9C0 LDR W9, [X8 + 0xE0]
	0x037EC9C4 CBNZ W9, 0x37EC9D4
	0x037EC9C8 MOV X0, X8
	0x037EC9CC BL 0x1C16DFC
	0x037EC9D0 LDR X8, [X26]
	0x037EC9D4 ADRP X23, 0x95D000
	0x037EC9D8 LDR X23, [X23 + 0x5C0]
	0x037EC9DC LDR X8, [X8 + 0xB8]
	0x037EC9E0 LDR X0, [X23]
	0x037EC9E4 LDR X20, [X8 + 0x18]
	0x037EC9E8 LDR W9, [X0 + 0xE0]
	0x037EC9EC CBNZ W9, 0x37EC9F8
	0x037EC9F0 BL 0x1C16DFC
	0x037EC9F4 LDR X0, [X23]
	0x037EC9F8 LDR X8, [X0 + 0xB8]
	0x037EC9FC LDR X21, [X8 + 0x8]
	0x037ECA00 CBNZ X21, 0x37ECA54
	0x037ECA04 LDR W8, [X0 + 0xE0]
	0x037ECA08 CBNZ W8, 0x37ECA14
	0x037ECA0C BL 0x1C16DFC
	0x037ECA10 LDR X0, [X23]
	0x037ECA14 ADRP X9, 0x95D000
	0x037ECA18 LDR X8, [X0 + 0xB8]
	0x037ECA1C LDR X9, [X9 + 0x588]
	0x037ECA20 LDR X22, [X8]
	0x037ECA24 LDR X0, [X9]
	0x037ECA28 BL 0x1C16F10
	0x037ECA2C ADRP X8, 0x95D000
	0x037ECA30 LDR X8, [X8 + 0x5B8]
	0x037ECA34 MOV X1, X22
	0x037ECA38 MOV X3, X31
	0x037ECA3C MOV X21, X0
	0x037ECA40 LDR X2, [X8]
	0x037ECA44 BL 0x295E704
	0x037ECA48 LDR X8, [X23]
	0x037ECA4C LDR X8, [X8 + 0xB8]
	0x037ECA50 STR X21, [X8 + 0x8]
	0x037ECA54 CBZ X20, 0x37ECAD0
	0x037ECA58 ADRP X8, 0x95D000
	0x037ECA5C LDR X8, [X8 + 0x5B0]
	0x037ECA60 MOV X0, X20
	0x037ECA64 MOV X1, X21
	0x037ECA68 LDR X2, [X8]
	0x037ECA6C BL 0x31579B0

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X29
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract X31, X31, 544
	010 Move X20, 0xBF6000
	011 Move W8, [X20+830]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x95E000
	018 Move X0, [X0+776]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+830], W8
	022 Move W8, [X19+213]
	023 Compare W8, 0
	024 JumpIfEqual {27}
	025 Move X0, X19
	026 Call InputSystemUIInputModule.PurgeStalePointers, X0
	027 Move X8, [X19+56]
	028 Compare X8, 0
	029 JumpIfEqual {111}
	030 Move W8, [X8+72]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Call InputSystemUIInputModule.get_shouldIgnoreFocus, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {87}
	038 Add X1, X19, 904
	039 Move X0, X19
	040 Call InputSystemUIInputModule.ProcessNavigation, X0, X1
	041 Move X0, X19
	042 Call InputSystemUIInputModule.FilterPointerStatesByType, X0
	043 Move W8, [X19+344]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, -47194112
	046 Move V8, [X8+3872]
	047 Move W20, W31
	048 Move W22, 1
	049 Move W23, 3
	050 Move X0, X19
	051 Move W1, W20
	052 Call InputSystemUIInputModule.GetPointerStateForIndex, X0, X1
	053 Move X21, X0
	054 Move X0, X19
	055 Move X1, X21
	056 Call InputSystemUIInputModule.ProcessPointer, X0, X1
	057 Move X8, [X21+464]
	058 Compare X8, 0
	059 JumpIfEqual {111}
	060 Move W8, [X8+404]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W8, [X21+8]
	063 Compare W8, 0
	064 JumpIfNotEqual {68}
	065 Move W8, [X21+12]
	066 Subtract W8, W8, 1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move V0, [X21+480]
	069 Move V1, [X21+484]
	070 Move [X21], W31
	071 Multiply S0, S0, S0
	072 Multiply S1, S1, S1
	073 Add S0, S0, S1
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 Move [X21], W22
	076 Move [X21+480], X31
	077 Move [X21+12], W23
	078 Move [X21+164], W23
	079 Move [X21+316], W23
	080 Move W8, [X19+344]
	081 Add W20, W20, 1
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X0, X19
	084 Move W1, W20
	085 Call InputSystemUIInputModule.RemovePointerAtIndex, X0, X1
	086 Subtract W20, W20, 1
	087 Move W8, [X19+344]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X21, 0x95E000
	090 Move X21, [X21+776]
	091 Move W20, W31
	092 Add X19, X19, 344
	093 Move X2, [X21]
	094 Add X8, X31, 0
	095 Move X0, X19
	096 Move W1, W20
	097 Call InlinedArray`1<PointerModel>.get_Item, X0, X1
	098 Move W8, [X19]
	099 Add W20, W20, 1
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Add X31, X31, 544
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Move X22, [X31+32]
	105 Move X21, [X31+40]
	106 Move X30, [X31+16]
	107 Move X23, [X31+24]
	108 Move X29, [X31+8]
	109 Move V8, [X31+64]
	110 Return 
	111 Call 0x1C17F20

Method: System.Int32 ConvertUIToolkitPointerId(UnityEngine.EventSystems.PointerEventData sourcePointerData)

Disassembly:
	0x037ECAB8 LDP X29, X30, [X31 + 0x80]
	0x037ECABC LDP D9, D8, [X31 + 0x70]
	0x037ECAC0 LDP D11, D10, [X31 + 0x60]
	0x037ECAC4 LDR V12, [X31 + 0x50]
	0x037ECAC8 ADD X31, X31, 0xE0
	0x037ECACC RET
	0x037ECAD0 BL 0x1C16F20
	0x037ECAD4 SUB X31, X31, 0xA0
	0x037ECAD8 STP D15, D14, [X31 + 0x20]
	0x037ECADC STP D13, D12, [X31 + 0x30]
	0x037ECAE0 STP D11, D10, [X31 + 0x40]
	0x037ECAE4 STP D9, D8, [X31 + 0x50]
	0x037ECAE8 STR X30, [X31 + 0x60]
	0x037ECAEC STP X24, X23, [X31 + 0x70]
	0x037ECAF0 STP X22, X21, [X31 + 0x80]
	0x037ECAF4 STP X20, X19, [X31 + 0x90]
	0x037ECAF8 ADRP X24, 0xBF5000
	0x037ECAFC ADRP X21, 0x909000
	0x037ECB00 LDRB W8, [X24 + 0x34E]
	0x037ECB04 LDR X21, [X21 + 0x9B0]
	0x037ECB08 MOV X19, X3
	0x037ECB0C MOV X20, X2
	0x037ECB10 MOV X22, X1
	0x037ECB14 MOV X23, X0
	0x037ECB18 TBNZ X8, 0x0, 0x37ECB30
	0x037ECB1C ADRP X0, 0x909000
	0x037ECB20 LDR X0, [X0 + 0x9B0]
	0x037ECB24 BL 0x1C16CF4
	0x037ECB28 MOVZ W8, 0x1
	0x037ECB2C STRB W8, [X24 + 0x34E]
	0x037ECB30 LDR X0, [X21]
	0x037ECB34 MOVZ W1, 0x4
	0x037ECB38 STP X31, X31, [X31 + 0x10]
	0x037ECB3C BL 0x1C16D6C
	0x037ECB40 CBZ X23, 0x37ECDC8
	0x037ECB44 MOV X21, X0
	0x037ECB48 MOV X0, X23
	0x037ECB4C MOV X1, X21
	0x037ECB50 MOV X2, X31
	0x037ECB54 BL 0x3C3F058
	0x037ECB58 CBZ X21, 0x37ECDC8
	0x037ECB5C LDR W8, [X21 + 0x18]
	0x037ECB60 CBZ W8, 0x37ECDC4
	0x037ECB64 CMP W8, 0x1
	0x037ECB68 B.EQ 0x37ECDC4
	0x037ECB6C CMP W8, 0x2
	0x037ECB70 B.LS 0x37ECDC4
	0x037ECB74 LDP S0, S1, [X21 + 0x20]
	0x037ECB78 LDP S4, S5, [X21 + 0x30]
	0x037ECB7C LDP S2, S3, [X21 + 0x28]
	0x037ECB80 LDR X8, [X21 + 0x38]
	0x037ECB84 LDR V6, [X21 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBF6000
	006 Move W8, [X21+831]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x95E000
	014 Move X0, [X0+1288]
	015 Call 0x1C17CF4
	016 Move X0, 0x931000
	017 Move X0, [X0+3664]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+831], W8
	021 Move W8, [X20+204]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X19, 0x931000
	024 Move X19, [X19+3664]
	025 Move X0, [X19]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X19]
	031 Move X8, [X0+184]
	032 Move W0, [X8+8]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0
	038 Compare X19, 0
	039 JumpIfEqual {51}
	040 Move X8, 0x95E000
	041 Move X8, [X8+1288]
	042 Move X9, [X19]
	043 Move X8, [X8]
	044 Move W11, [X9+304]
	045 Move W10, [X8+304]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X9, [X9+200]
	048 Add X9, X9, X10
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, X20
	052 Move X1, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X2, X31
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call BaseInputModule.ConvertUIToolkitPointerId, X0, X1
	059 Return X0
	060 Move W0, [X19+408]

Method: System.Void HookActions()

Disassembly:
	0x037EA89C STRB W8, [X28 + 0x332]
	0x037EA8A0 LDR X1, [X19]
	0x037EA8A4 ADD X19, X21, 0x158
	0x037EA8A8 MOV X0, X19
	0x037EA8AC BL 0x2DEB578
	0x037EA8B0 LDR W8, [X21 + 0x158]
	0x037EA8B4 CMP W0, W8
	0x037EA8B8 B.LE 0x37EA8F4
	0x037EA8BC CBZ W8, 0x37EA8E8
	0x037EA8C0 LDR X9, [X21 + 0x380]
	0x037EA8C4 CBZ X9, 0x37EAA04
	0x037EA8C8 LDR W10, [X9 + 0x18]
	0x037EA8CC SUB W8, W8, 0x1
	0x037EA8D0 CMP W8, W10
	0x037EA8D4 B.CS 0x37EAA08
	0x037EA8D8 MOVZ W10, 0x220
	0x037EA8DC SMADDL X8, X8, X10, X9
	0x037EA8E0 ADD X8, X8, 0x1F0
	0x037EA8E4 B 0x37EA8EC
	0x037EA8E8 ADD X8, X21, 0x330
	0x037EA8EC LDR X28, [X8]
	0x037EA8F0 CBNZ X28, 0x37EA91C
	0x037EA8F4 ADRP X8, 0x95F000
	0x037EA8F8 LDR X8, [X8 + 0x508]
	0x037EA8FC LDR X29, [X21 + 0x38]
	0x037EA900 LDR X0, [X8]
	0x037EA904 BL 0x1C16F10
	0x037EA908 MOV X1, X29
	0x037EA90C MOV X2, X31
	0x037EA910 MOV X28, X0
	0x037EA914 BL 0x3E4F118
	0x037EA918 CBZ X28, 0x37EAA04
	0x037EA91C ADRP X8, 0x95F000
	0x037EA920 LDR X8, [X8 + 0x510]
	0x037EA924 STP W27, W22, [X28 + 0xFC]
	0x037EA928 STR W26, [X28 + 0x190]
	0x037EA92C STR W25, [X28 + 0x194]
	0x037EA930 STP X24, X23, [X28 + 0x180]
	0x037EA934 LDR X3, [X8]
	0x037EA938 ADRP X23, 0x95F000
	0x037EA93C ADRP X24, 0x95F000
	0x037EA940 LDR X23, [X23 + 0x518]
	0x037EA944 LDR X24, [X24 + 0x520]
	0x037EA948 ADD X0, X21, 0x130
	0x037EA94C MOVZ W2, 0xA
	0x037EA950 MOV W1, W22
	0x037EA954 BL 0x2DE7CAC
	0x037EA958 LDR X3, [X23]
	0x037EA95C ADD X0, X21, 0x140
	0x037EA960 MOVZ W2, 0xA
	0x037EA964 MOV X1, X20
	0x037EA968 BL 0x2DEA8C8
	0x037EA96C LDR X20, [X24]
	0x037EA970 ADD X21, X31, 0x10
	0x037EA974 MOVZ X8, 0x3
	0x037EA978 ADD X0, X21, 0x10
	0x037EA97C MOVZ W2, 0x94
	0x037EA980 MOV W1, W31
	0x037EA984 STP X31, X8, [X31 + 0x10]
	0x037EA988 BL 0x3EB1B10
	0x037EA98C MOVZ W22, 0x3
	0x037EA990 ADD X0, X21, 0xA8
	0x037EA994 MOVZ W2, 0x94
	0x037EA998 MOV W1, W31
	0x037EA99C STR W22, [X31 + 0xB4]
	0x037EA9A0 BL 0x3EB1B10
	0x037EA9A4 ADD X0, X21, 0x140
	0x037EA9A8 MOVZ W2, 0x90
	0x037EA9AC MOV W1, W31
	0x037EA9B0 STR W22, [X31 + 0x14C]
	0x037EA9B4 BL 0x3EB1B10
	0x037EA9B8 ADD X8, X21, 0x1D8
	0x037EA9BC MOVI V0.2D, 0x0
	0x037EA9C0 ADD X1, X31, 0x10
	0x037EA9C4 MOVZ W2, 0xA
	0x037EA9C8 MOV X0, X19
	0x037EA9CC MOV X3, X20
	0x037EA9D0 STR X28, [X31 + 0x1E0]
	0x037EA9D4 STP V0, V0, [X8]
	0x037EA9D8 STP V0, V0, [X8 + 0x20]
	0x037EA9DC STR X31, [X8 + 0x40]
	0x037EA9E0 BL 0x2DEC15C
	0x037EA9E4 ADD X31, X31, 0x230
	0x037EA9E8 LDP X20, X19, [X31 + 0x50]
	0x037EA9EC LDP X22, X21, [X31 + 0x40]
	0x037EA9F0 LDP X24, X23, [X31 + 0x30]
	0x037EA9F4 LDP X26, X25, [X31 + 0x20]
	0x037EA9F8 LDP X28, X27, [X31 + 0x10]
	0x037EA9FC LDP X29, X30, [X31], #0x60
	0x037EAA00 RET
	0x037EAA04 BL 0x1C16F20
	0x037EAA08 BL 0x1C16F28
	0x037EAA0C LDR V2, [X0 + 0x1D8]
	0x037EAA10 LDR V3, [X0 + 0x1DC]
	0x037EAA14 ADRP X8, 0xFFFFFFFFFD2FF000
	0x037EAA18 LDR V4, [X8 + 0xF20]
	0x037EAA1C FSUB S2, S2, S0
	0x037EAA20 FSUB S3, S3, S1
	0x037EAA24 FMUL S2, S2, S2
	0x037EAA28 FMUL S3, S3, S3
	0x037EAA2C FADD S2, S2, S3
	0x037EAA30 FCMP S2, S4
	0x037EAA34 B.MI 0x37EAA48
	0x037EAA38 MOVZ W8, 0x1
	0x037EAA3C STR S0, [X0 + 0x1D8]
	0x037EAA40 STR S1, [X0 + 0x1DC]
	0x037EAA44 STRB W8, [X0]
	0x037EAA48 RET
	0x037EAA4C STR X30, [X31 - 0x20]!
	0x037EAA50 STP X20, X19, [X31 + 0x10]
	0x037EAA54 MOV X19, X0
	0x037EAA58 STR X1, [X0 + 0x1D0]
	0x037EAA5C STRB W31, [X0], #0x8
	0x037EAA60 MOVZ W2, 0x98
	0x037EAA64 MOV W1, W31
	0x037EAA68 BL 0x3EB1B10
	0x037EAA6C MOVZ W20, 0x3
	0x037EAA70 ADD X0, X19, 0xA0
	0x037EAA74 MOVZ W2, 0x98
	0x037EAA78 MOV W1, W31
	0x037EAA7C STR W20, [X19 + 0xC]
	0x037EAA80 BL 0x3EB1B10
	0x037EAA84 ADD X0, X19, 0x138
	0x037EAA88 MOVZ W2, 0x98
	0x037EAA8C MOV W1, W31
	0x037EAA90 STR W20, [X19 + 0xA4]
	0x037EAA94 BL 0x3EB1B10
	0x037EAA98 STR W20, [X19 + 0x13C]
	0x037EAA9C ADD X8, X19, 0x1D8
	0x037EAAA0 LDP X20, X19, [X31 + 0x10]
	0x037EAAA4 MOVI V0.2D, 0x0
	0x037EAAA8 STP V0, V0, [X8]
	0x037EAAAC STP V0, V0, [X8 + 0x20]
	0x037EAAB0 STR W31, [X8 + 0x40]
	0x037EAAB4 LDR X30, [X31], #0x20
	0x037EAAB8 RET
	0x037EAABC STR X29, [X31 - 0x50]!
	0x037EAAC0 STP X30, X25, [X31 + 0x10]
	0x037EAAC4 STP X24, X23, [X31 + 0x20]
	0x037EAAC8 STP X22, X21, [X31 + 0x30]
	0x037EAACC STP X20, X19, [X31 + 0x40]
	0x037EAAD0 SUB X31, X31, 0x220
	0x037EAAD4 ADRP X21, 0xBF7000
	0x037EAAD8 ADRP X20, 0x95F000
	0x037EAADC LDRB W8, [X21 + 0x334]
	0x037EAAE0 LDR X20, [X20 + 0x308]
	0x037EAAE4 MOV W22, W1
	0x037EAAE8 MOV X19, X0
	0x037EAAEC TBNZ X8, 0x0, 0x37EAB34
	0x037EAAF0 ADRP X0, 0x95F000
	0x037EAAF4 LDR X0, [X0 + 0x528]
	0x037EAAF8 BL 0x1C16CF4
	0x037EAAFC ADRP X0, 0x95F000
	0x037EAB00 LDR X0, [X0 + 0x530]
	0x037EAB04 BL 0x1C16CF4
	0x037EAB08 ADRP X0, 0x95F000
	0x037EAB0C LDR X0, [X0 + 0x538]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBF8000
	005 Move W8, [X20+832]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {40}
	011 Move X0, 0x90E000
	012 Move X0, [X0+984]
	013 Call 0x1C17CF4
	014 Move X0, 0x960000
	015 Move X0, [X0+1168]
	016 Call 0x1C17CF4
	017 Move X0, 0x960000
	018 Move X0, [X0+1176]
	019 Call 0x1C17CF4
	020 Move X0, 0x960000
	021 Move X0, [X0+1184]
	022 Call 0x1C17CF4
	023 Move X0, 0x960000
	024 Move X0, [X0+1192]
	025 Call 0x1C17CF4
	026 Move X0, 0x960000
	027 Move X0, [X0+1200]
	028 Call 0x1C17CF4
	029 Move X0, 0x960000
	030 Move X0, [X0+1208]
	031 Call 0x1C17CF4
	032 Move X0, 0x960000
	033 Move X0, [X0+1216]
	034 Call 0x1C17CF4
	035 Move X0, 0x960000
	036 Move X0, [X0+1224]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+832], W8
	040 Move W8, [X19+212]
	041 Compare W8, 0
	042 JumpIfEqual {47}
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 
	047 Move X8, [X19+216]
	048 Compare X8, 0
	049 JumpIfNotEqual {62}
	050 Move X8, 0x90E000
	051 Move X8, [X8+984]
	052 Move X0, [X8]
	053 Call 0x1C17F10
	054 Move X8, 0x960000
	055 Move X8, [X8+1192]
	056 Move X1, X19
	057 Move X3, X31
	058 Move X20, X0
	059 Move X2, [X8]
	060 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	061 Move [X19+216], X20
	062 Move X8, [X19+232]
	063 Compare X8, 0
	064 JumpIfNotEqual {77}
	065 Move X8, 0x90E000
	066 Move X8, [X8+984]
	067 Move X0, [X8]
	068 Call 0x1C17F10
	069 Move X8, 0x960000
	070 Move X8, [X8+1168]
	071 Move X1, X19
	072 Move X3, X31
	073 Move X20, X0
	074 Move X2, [X8]
	075 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	076 Move [X19+232], X20
	077 Move X8, [X19+240]
	078 Compare X8, 0
	079 JumpIfNotEqual {92}
	080 Move X8, 0x90E000
	081 Move X8, [X8+984]
	082 Move X0, [X8]
	083 Call 0x1C17F10
	084 Move X8, 0x960000
	085 Move X8, [X8+1200]
	086 Move X1, X19
	087 Move X3, X31
	088 Move X20, X0
	089 Move X2, [X8]
	090 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	091 Move [X19+240], X20
	092 Move X8, [X19+248]
	093 Compare X8, 0
	094 JumpIfNotEqual {107}
	095 Move X8, 0x90E000
	096 Move X8, [X8+984]
	097 Move X0, [X8]
	098 Call 0x1C17F10
	099 Move X8, 0x960000
	100 Move X8, [X8+1176]
	101 Move X1, X19
	102 Move X3, X31
	103 Move X20, X0
	104 Move X2, [X8]
	105 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	106 Move [X19+248], X20
	107 Move X8, [X19+256]
	108 Compare X8, 0
	109 JumpIfNotEqual {122}
	110 Move X8, 0x90E000
	111 Move X8, [X8+984]
	112 Move X0, [X8]
	113 Call 0x1C17F10
	114 Move X8, 0x960000
	115 Move X8, [X8+1208]
	116 Move X1, X19
	117 Move X3, X31
	118 Move X20, X0
	119 Move X2, [X8]
	120 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	121 Move [X19+256], X20
	122 Move X8, [X19+224]
	123 Compare X8, 0
	124 JumpIfNotEqual {137}
	125 Move X8, 0x90E000
	126 Move X8, [X8+984]
	127 Move X0, [X8]
	128 Call 0x1C17F10
	129 Move X8, 0x960000
	130 Move X8, [X8+1184]
	131 Move X1, X19
	132 Move X3, X31
	133 Move X20, X0
	134 Move X2, [X8]
	135 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	136 Move [X19+224], X20
	137 Move X8, [X19+272]
	138 Compare X8, 0
	139 JumpIfNotEqual {152}
	140 Move X8, 0x90E000
	141 Move X8, [X8+984]
	142 Move X0, [X8]
	143 Call 0x1C17F10
	144 Move X8, 0x960000
	145 Move X8, [X8+1216]
	146 Move X1, X19
	147 Move X3, X31
	148 Move X20, X0
	149 Move X2, [X8]
	150 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	151 Move [X19+272], X20
	152 Move X8, [X19+264]
	153 Compare X8, 0
	154 JumpIfNotEqual {167}
	155 Move X8, 0x90E000
	156 Move X8, [X8+984]
	157 Move X0, [X8]
	158 Call 0x1C17F10
	159 Move X8, 0x960000
	160 Move X8, [X8+1224]
	161 Move X1, X19
	162 Move X3, X31
	163 Move X20, X0
	164 Move X2, [X8]
	165 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	166 Move [X19+264], X20
	167 Move X0, X19
	168 Move X20, [X31+16]
	169 Move X19, [X31+24]
	170 Move W1, 1
	171 Move X30, [X31+32]
	172 Call InputSystemUIInputModule.SetActionCallbacks, X0, X1
	173 Return 

Method: System.Void UnhookActions()

Disassembly:
	0x037EA61C STR X1, [X31 + 0x298]
	0x037EA620 B.LT 0x37EA6A4
	0x037EA624 LDR X1, [X26]
	0x037EA628 ADD X0, X31, 0x270
	0x037EA62C BL 0x242CC48

ISIL:
	001 Move W8, [X0+212]
	002 Compare W8, 0
	003 JumpIfEqual {7}
	004 Move W1, W31
	005 Call InputSystemUIInputModule.SetActionCallbacks, X0, X1
	006 Return 
	007 Return 

Method: System.Void SetActionCallbacks(System.Boolean install)

Disassembly:
	0x037ECB88 ADD X0, X31, 0x10
	0x037ECB8C MOV X1, X31
	0x037ECB90 STR X8, [X31]
	0x037ECB94 STR S6, [X31 + 0x8]
	0x037ECB98 BL 0x37F6094
	0x037ECB9C LDP S8, S0, [X22 + 0x8]
	0x037ECBA0 LDP S1, S2, [X22 + 0x10]
	0x037ECBA4 LDP S12, S13, [X31 + 0x10]
	0x037ECBA8 LDP S11, S14, [X31 + 0x18]
	0x037ECBAC ADRP X23, 0xBED000
	0x037ECBB0 LDP S9, S10, [X22]
	0x037ECBB4 LDRB W8, [X23 + 0x5AA]
	0x037ECBB8 FMUL S0, S0, S12
	0x037ECBBC FMUL S1, S1, S13
	0x037ECBC0 FADD S0, S0, S1
	0x037ECBC4 FMUL S1, S2, S11
	0x037ECBC8 FADD S15, S1, S0
	0x037ECBCC CBNZ W8, 0x37ECBE4
	0x037ECBD0 ADRP X0, 0x90E000
	0x037ECBD4 LDR X0, [X0 + 0x4B8]
	0x037ECBD8 BL 0x1C16CF4
	0x037ECBDC MOVZ W8, 0x1
	0x037ECBE0 STRB W8, [X23 + 0x5AA]
	0x037ECBE4 ADRP X8, 0x90E000
	0x037ECBE8 LDR X8, [X8 + 0x4B8]
	0x037ECBEC ADRP X9, 0xFFFFFFFFFD2FE000
	0x037ECBF0 LDR V0, [X9 + 0x240]
	0x037ECBF4 FABS S1, S15
	0x037ECBF8 LDR X8, [X8]
	0x037ECBFC FMOV S2, W31
	0x037ECC00 FMAXNM S1, S1, S2
	0x037ECC04 FMUL S0, S1, S0
	0x037ECC08 LDR X8, [X8 + 0xB8]
	0x037ECC0C FMOV S1, 8
	0x037ECC10 LDR V3, [X8]
	0x037ECC14 FMUL S1, S3, S1
	0x037ECC18 FCMP S0, S1
	0x037ECC1C FCSEL S0, S0, S1, GT
	0x037ECC20 FABD S1, S2, S2
	0x037ECC24 FCMP S1, S0
	0x037ECC28 B.MI 0x37ECD50
	0x037ECC2C FMUL S0, S9, S12
	0x037ECC30 FMUL S1, S10, S13
	0x037ECC34 FADD S0, S0, S1
	0x037ECC38 FMUL S1, S8, S11
	0x037ECC3C FADD S0, S1, S0
	0x037ECC40 FNEG S0, S0
	0x037ECC44 FSUB S0, S0, S14
	0x037ECC48 FDIV S8, S0, S15
	0x037ECC4C FCMP S8, 0x0
	0x037ECC50 B.LE 0x37ECD50
	0x037ECC54 MOV X0, X22
	0x037ECC58 MOV V0.16B, V8.16B
	0x037ECC5C MOV X1, X31
	0x037ECC60 BL 0x3C0B1B4
	0x037ECC64 LDR W8, [X21 + 0x18]
	0x037ECC68 CMP W8, 0x3
	0x037ECC6C B.LS 0x37ECDC4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBF6000
	007 Move X21, 0x95E000
	008 Move W8, [X22+833]
	009 Move X21, [X21+888]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x95E000
	017 Move X0, [X0+888]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+833], W8
	021 And W20, W20, 1
	022 Move [X19+212], W20
	023 Move X0, [X21]
	024 Move X21, [X19+120]
	025 Move X22, [X19+216]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X22
	032 Move W2, W20
	033 Call InputSystemUIInputModule.SetActionCallback, X0, X1, X2
	034 Move X0, [X19+128]
	035 Move X1, [X19+224]
	036 Move W2, W20
	037 Call InputSystemUIInputModule.SetActionCallback, X0, X1, X2
	038 Move X0, [X19+152]
	039 Move X1, [X19+232]
	040 Move W2, W20
	041 Call InputSystemUIInputModule.SetActionCallback, X0, X1, X2
	042 Move X0, [X19+168]
	043 Move X1, [X19+240]
	044 Move W2, W20
	045 Call InputSystemUIInputModule.SetActionCallback, X0, X1, X2
	046 Move X0, [X19+160]
	047 Move X1, [X19+248]
	048 Move W2, W20
	049 Call InputSystemUIInputModule.SetActionCallback, X0, X1, X2
	050 Move X0, [X19+176]
	051 Move X1, [X19+256]
	052 Move W2, W20
	053 Call InputSystemUIInputModule.SetActionCallback, X0, X1, X2
	054 Move X0, [X19+192]
	055 Move X1, [X19+272]
	056 Move W2, W20
	057 Call InputSystemUIInputModule.SetActionCallback, X0, X1, X2
	058 Move X0, [X19+184]
	059 Move X1, [X19+264]
	060 Move W2, W20
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]

Method: System.Void SetActionCallback(UnityEngine.InputSystem.InputActionReference actionReference, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> callback, System.Boolean install)

Disassembly:
	0x037ECC70 LDP S3, S4, [X21 + 0x44]
	0x037ECC74 LDP S7, S6, [X21 + 0x24]
	0x037ECC78 LDR V17, [X21 + 0x20]
	0x037ECC7C LDR V5, [X21 + 0x4C]
	0x037ECC80 FSUB S19, S4, S7
	0x037ECC84 FSUB S20, S3, S17
	0x037ECC88 FSUB S21, S0, S17
	0x037ECC8C FSUB S22, S1, S7
	0x037ECC90 FSUB S18, S5, S6
	0x037ECC94 FSUB S16, S2, S6
	0x037ECC98 FMUL S20, S21, S20
	0x037ECC9C FMUL S19, S22, S19
	0x037ECCA0 FADD S19, S20, S19
	0x037ECCA4 FMUL S18, S16, S18
	0x037ECCA8 FADD S18, S18, S19
	0x037ECCAC FCMP S18, 0x0
	0x037ECCB0 B.LT 0x37ECD50
	0x037ECCB4 LDP S18, S19, [X21 + 0x2C]
	0x037ECCB8 LDR V20, [X21 + 0x34]
	0x037ECCBC FSUB S17, S18, S17
	0x037ECCC0 FSUB S7, S19, S7
	0x037ECCC4 FSUB S6, S20, S6
	0x037ECCC8 FMUL S17, S21, S17
	0x037ECCCC FMUL S7, S22, S7
	0x037ECCD0 FADD S7, S17, S7
	0x037ECCD4 FMUL S6, S16, S6
	0x037ECCD8 FADD S6, S6, S7
	0x037ECCDC FCMP S6, 0x0
	0x037ECCE0 B.LT 0x37ECD50
	0x037ECCE4 LDP S6, S7, [X21 + 0x38]
	0x037ECCE8 LDR V16, [X21 + 0x40]
	0x037ECCEC FSUB S21, S18, S6
	0x037ECCF0 FSUB S22, S19, S7
	0x037ECCF4 FSUB S18, S0, S6
	0x037ECCF8 FSUB S19, S1, S7
	0x037ECCFC FSUB S20, S20, S16
	0x037ECD00 FSUB S17, S2, S16
	0x037ECD04 FMUL S21, S18, S21
	0x037ECD08 FMUL S22, S19, S22
	0x037ECD0C FADD S21, S21, S22
	0x037ECD10 FMUL S20, S17, S20
	0x037ECD14 FADD S20, S20, S21
	0x037ECD18 FCMP S20, 0x0
	0x037ECD1C B.LT 0x37ECD50
	0x037ECD20 FSUB S3, S3, S6
	0x037ECD24 FSUB S4, S4, S7
	0x037ECD28 FSUB S5, S5, S16
	0x037ECD2C FMUL S3, S18, S3
	0x037ECD30 FMUL S4, S19, S4
	0x037ECD34 FADD S3, S3, S4
	0x037ECD38 FMUL S4, S17, S5
	0x037ECD3C FADD S3, S4, S3
	0x037ECD40 FCMP S3, 0x0
	0x037ECD44 B.LT 0x37ECD50
	0x037ECD48 MOVZ W0, 0x1
	0x037ECD4C B 0x37ECD90
	0x037ECD50 ADRP X21, 0xBEC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBF6000
	007 Move W8, [X22+834]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x908000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+834], W8
	020 Compare X19, 0
	021 JumpIfNotEqual {26}
	022 Move TEMP, X20
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {66}
	026 Move X8, 0x908000
	027 Move X8, [X8+1432]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {66}
	041 Compare X21, 0
	042 JumpIfEqual {83}
	043 Move X0, X21
	044 Move X1, X31
	045 Call InputActionReference.get_action, X0
	046 Compare X0, 0
	047 JumpIfEqual {66}
	048 Move X21, X0
	049 Move X1, X19
	050 Move X2, X31
	051 Move TEMP, X20
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {72}
	055 Call InputAction.add_performed, X0, X1
	056 Move X0, X21
	057 Move X1, X19
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X2, X31
	063 Move X30, [X31+48]
	064 Call InputAction.add_canceled, X0, X1
	065 Return 
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return 
	072 Call InputAction.remove_performed, X0, X1
	073 Move X0, X21
	074 Move X1, X19
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X2, X31
	080 Move X30, [X31+48]
	081 Call InputAction.remove_canceled, X0, X1
	082 Return 
	083 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionReference UpdateReferenceForNewAsset(UnityEngine.InputSystem.InputActionReference actionReference)

Disassembly:
	0x037ECD54 LDRB W8, [X21 + 0x783]
	0x037ECD58 CBNZ W8, 0x37ECD70
	0x037ECD5C ADRP X0, 0x907000
	0x037ECD60 LDR X0, [X0 + 0x5A0]
	0x037ECD64 BL 0x1C16CF4
	0x037ECD68 MOVZ W8, 0x1
	0x037ECD6C STRB W8, [X21 + 0x783]
	0x037ECD70 ADRP X8, 0x907000
	0x037ECD74 LDR X8, [X8 + 0x5A0]
	0x037ECD78 MOV W0, W31
	0x037ECD7C FMOV S8, W31
	0x037ECD80 LDR X8, [X8]
	0x037ECD84 LDR X8, [X8 + 0xB8]
	0x037ECD88 LDP S0, S1, [X8]
	0x037ECD8C LDR V2, [X8 + 0x8]
	0x037ECD90 STP S0, S1, [X20]
	0x037ECD94 STR S2, [X20 + 0x8]
	0x037ECD98 STR S8, [X19]
	0x037ECD9C LDP X20, X19, [X31 + 0x90]
	0x037ECDA0 LDP X22, X21, [X31 + 0x80]
	0x037ECDA4 LDP X24, X23, [X31 + 0x70]
	0x037ECDA8 LDR X30, [X31 + 0x60]
	0x037ECDAC LDP D9, D8, [X31 + 0x50]
	0x037ECDB0 LDP D11, D10, [X31 + 0x40]
	0x037ECDB4 LDP D13, D12, [X31 + 0x30]
	0x037ECDB8 LDP D15, D14, [X31 + 0x20]
	0x037ECDBC ADD X31, X31, 0xA0
	0x037ECDC0 RET
	0x037ECDC4 BL 0x1C16F28
	0x037ECDC8 BL 0x1C16F20
	0x037ECDCC STR X1, [X0]
	0x037ECDD0 STP S0, S1, [X0 + 0x8]
	0x037ECDD4 STP S2, S3, [X0 + 0x10]
	0x037ECDD8 STP S4, S5, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {39}
	006 Move X20, X0
	007 Move X0, X1
	008 Move X1, X31
	009 Call InputActionReference.get_action, X0
	010 Compare X0, 0
	011 JumpIfEqual {39}
	012 Move X1, X31
	013 Move X19, X0
	014 Call InputAction.get_actionMap, X0
	015 Move X8, [X20+112]
	016 Compare X8, 0
	017 JumpIfEqual {39}
	018 Compare X0, 0
	019 JumpIfEqual {44}
	020 Move X1, [X0+16]
	021 Move X0, X8
	022 Move W2, W31
	023 Move X3, X31
	024 Call InputActionAsset.FindActionMap, X0, X1, X2
	025 Compare X0, 0
	026 JumpIfEqual {39}
	027 Move X1, [X19+16]
	028 Move W2, W31
	029 Move X3, X31
	030 Call InputActionMap.FindAction, X0, X1, X2
	031 Compare X0, 0
	032 JumpIfEqual {39}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+32]
	037 Call InputActionReference.Create, X0
	038 Return X0
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X0, X31
	042 Move X30, [X31+32]
	043 Return X0
	044 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionAsset get_actionsAsset()

Disassembly:
	0x037ECDDC RET
	0x037ECDE0 STR X30, [X31 - 0x30]!

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.Void set_actionsAsset(UnityEngine.InputSystem.InputActionAsset value)

Disassembly:
	0x037EA1A0 ADD W26, W26, 0x1
	0x037EA1A4 CMP W26, W8
	0x037EA1A8 B.LT 0x37EA184
	0x037EA1AC TBZ X24, 0x0, 0x37EA2DC
	0x037EA1B0 ADRP X26, 0x95F000
	0x037EA1B4 LDR X26, [X26 + 0x378]
	0x037EA1B8 LDR X24, [X19 + 0x78]
	0x037EA1BC ADD X28, X19, 0x120
	0x037EA1C0 LDR X0, [X26]
	0x037EA1C4 LDR W8, [X0 + 0xE0]
	0x037EA1C8 CBNZ W8, 0x37EA1D0
	0x037EA1CC BL 0x1C16DFC
	0x037EA1D0 MOV X0, X22
	0x037EA1D4 MOV X1, X24
	0x037EA1D8 BL 0x37EA740
	0x037EA1DC TBZ X0, 0x0, 0x37EA2E4
	0x037EA1E0 MOV W26, W31
	0x037EA1E4 MOV W9, W31
	0x037EA1E8 MOV W27, W31
	0x037EA1EC MOV W10, W31
	0x037EA1F0 MOVZ W8, 0x1
	0x037EA1F4 MOVZ W24, 0x1
	0x037EA1F8 B 0x37EA324
	0x037EA1FC STR W20, [X19 + 0x120]
	0x037EA200 STR W26, [X19 + 0x124]
	0x037EA204 ADRP X8, 0x95F000
	0x037EA208 LDR X8, [X8 + 0x308]
	0x037EA20C ADD X0, X19, 0x158
	0x037EA210 MOV W1, W26
	0x037EA214 LDR X2, [X8]
	0x037EA218 ADD X8, X31, 0x10
	0x037EA21C BL 0x2DEBA18
	0x037EA220 LDR X8, [X31 + 0x1E0]
	0x037EA224 CBZ X8, 0x37EA73C
	0x037EA228 LDR W8, [X8 + 0x194]
	0x037EA22C B 0x37EA0A8
	0x037EA230 LDR X0, [X25 + 0x180]
	0x037EA234 CBZ X0, 0x37EA73C
	0x037EA238 ADRP X8, 0x95F000
	0x037EA23C LDR X8, [X8 + 0x4E0]
	0x037EA240 LDR X1, [X8]
	0x037EA244 BL 0x2E00878
	0x037EA248 LDR X8, [X25 + 0x188]
	0x037EA24C CBNZ X8, 0x37EA284
	0x037EA250 B 0x37EA73C
	0x037EA254 LDR X8, [X25 + 0x1A0]
	0x037EA258 CBZ X8, 0x37EA73C
	0x037EA25C LDR X0, [X8 + 0x180]
	0x037EA260 CBZ X0, 0x37EA73C
	0x037EA264 ADRP X8, 0x95F000
	0x037EA268 LDR X8, [X8 + 0x4E0]
	0x037EA26C LDR X1, [X8]
	0x037EA270 BL 0x2E00878
	0x037EA274 LDR X8, [X25 + 0x1A0]
	0x037EA278 CBZ X8, 0x37EA73C
	0x037EA27C LDR X8, [X8 + 0x188]
	0x037EA280 CBZ X8, 0x37EA73C
	0x037EA284 ADRP X9, 0x95F000
	0x037EA288 LDR W26, [X0]
	0x037EA28C LDR X9, [X9 + 0x2F8]
	0x037EA290 MOV X0, X8
	0x037EA294 LDR X1, [X9]
	0x037EA298 BL 0x2E094B0
	0x037EA29C LDR V8, [X0]
	0x037EA2A0 MOV X1, X21
	0x037EA2A4 BL 0x37E9DC4
	0x037EA2A8 MOV W23, W0
	0x037EA2AC CBZ W26, 0x37EA15C
	0x037EA2B0 LDR W8, [X19 + 0x120]
	0x037EA2B4 ADD W20, W26, W20, 0x18, LSL
	0x037EA2B8 CMP W8, W20
	0x037EA2BC B.EQ 0x37EA168
	0x037EA2C0 TBZ X24, 0x0, 0x37EA2DC
	0x037EA2C4 MOV W8, W31
	0x037EA2C8 MOV W9, W31
	0x037EA2CC ADD X28, X19, 0x120
	0x037EA2D0 MOVZ W24, 0x2
	0x037EA2D4 MOVZ W27, 0x1
	0x037EA2D8 B 0x37EA320
	0x037EA2DC MOVN W26, 0x0
	0x037EA2E0 B 0x37EA714
	0x037EA2E4 LDR X0, [X26]
	0x037EA2E8 LDR X24, [X19 + 0xB8]
	0x037EA2EC LDR W8, [X0 + 0xE0]
	0x037EA2F0 CBNZ W8, 0x37EA2F8
	0x037EA2F4 BL 0x1C16DFC
	0x037EA2F8 MOV X0, X22
	0x037EA2FC MOV X1, X24
	0x037EA300 BL 0x37EA740
	0x037EA304 ANDS W31, W0, 0x1
	0x037EA308 MOVZ W10, 0x3
	0x037EA30C MOV W26, W31
	0x037EA310 MOV W27, W31
	0x037EA314 EOR W9, W0, 0x1
	0x037EA318 MOVZ W8, 0x1
	0x037EA31C CSEL W24, W10, W31, NE
	0x037EA320 MOVZ W10, 0x1
	0x037EA324 LDR W11, [X19 + 0xCC]
	0x037EA328 CMP W11, 0x1
	0x037EA32C CSET W12, EQ
	0x037EA330 CMP W11, 0x0
	0x037EA334 BIC W12, W12, W9, 0x0
	0x037EA338 CSET W11, NE
	0x037EA33C TBNZ X12, 0x0, 0x37EA3B4
	0x037EA340 ORR W10, W10, W11, 0x0
	0x037EA344 TBZ X10, 0x0, 0x37EA3B4
	0x037EA348 TBZ X9, 0x0, 0x37EA3F4
	0x037EA34C LDR W8, [X28]
	0x037EA350 ADDS W31, W8, 0x1
	0x037EA354 B.NE 0x37EA168
	0x037EA358 LDR X0, [X19 + 0x78]
	0x037EA35C CBZ X0, 0x37EA490
	0x037EA360 MOV X1, X31
	0x037EA364 BL 0x37451B4
	0x037EA368 CBZ X0, 0x37EA490
	0x037EA36C MOV X1, X31
	0x037EA370 BL 0x373467C
	0x037EA374 ADRP X8, 0x95F000
	0x037EA378 LDR X8, [X8 + 0x4E8]
	0x037EA37C MOV X2, X0
	0x037EA380 MOV X4, X1
	0x037EA384 ADD X0, X31, 0x10
	0x037EA388 LDR X3, [X8]
	0x037EA38C MOV X1, X2
	0x037EA390 MOV X2, X4
	0x037EA394 STP X31, X31, [X31 + 0x10]
	0x037EA398 STR X31, [X31 + 0x20]
	0x037EA39C BL 0x242CC30
	0x037EA3A0 LDR V0, [X31 + 0x1]
	0x037EA3A4 LDR X8, [X31 + 0x20]
	0x037EA3A8 STR V0, [X31 + 0x25]
	0x037EA3AC STR X8, [X31 + 0x260]
	0x037EA3B0 B 0x37EA49C
	0x037EA3B4 LDR W1, [X19 + 0x124]
	0x037EA3B8 ADDS W31, W1, 0x1
	0x037EA3BC B.EQ 0x37EA41C
	0x037EA3C0 MOV X0, X19
	0x037EA3C4 BL 0x37E9D80
	0x037EA3C8 LDR X8, [X0 + 0x1D0]
	0x037EA3CC CBZ X8, 0x37EA73C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBF8000
	007 Move X21, 0x90A000
	008 Move W8, [X22+835]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x90A000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+835], W8
	021 Move X0, [X21]
	022 Move X21, [X19+112]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X21
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {160}
	035 Move W8, [X19+212]
	036 Compare W8, 0
	037 JumpIfEqual {41}
	038 Move X0, X19
	039 Move W1, W31
	040 Call InputSystemUIInputModule.SetActionCallbacks, X0, X1
	041 Move [X19+112], X20
	042 Move X20, X19
	043 Add X20, X20, 120
	044 Move X1, [X20]
	045 Move X0, X19
	046 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	047 Move W3, [X19+212]
	048 Move X4, [X19+216]
	049 Move X2, X0
	050 Move X0, X19
	051 Move X1, X20
	052 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	053 Move X20, X19
	054 Add X20, X20, 128
	055 Move X1, [X20]
	056 Move X0, X19
	057 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	058 Move W3, [X19+212]
	059 Move X4, [X19+224]
	060 Move X2, X0
	061 Move X0, X19
	062 Move X1, X20
	063 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	064 Move X20, X19
	065 Add X20, X20, 152
	066 Move X1, [X20]
	067 Move X0, X19
	068 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	069 Move W3, [X19+212]
	070 Move X4, [X19+232]
	071 Move X2, X0
	072 Move X0, X19
	073 Move X1, X20
	074 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	075 Move X20, X19
	076 Add X20, X20, 168
	077 Move X1, [X20]
	078 Move X0, X19
	079 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	080 Move W3, [X19+212]
	081 Move X4, [X19+240]
	082 Move X2, X0
	083 Move X0, X19
	084 Move X1, X20
	085 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	086 Move X20, X19
	087 Add X20, X20, 160
	088 Move X1, [X20]
	089 Move X0, X19
	090 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	091 Move W3, [X19+212]
	092 Move X4, [X19+248]
	093 Move X2, X0
	094 Move X0, X19
	095 Move X1, X20
	096 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	097 Move X20, X19
	098 Add X20, X20, 176
	099 Move X1, [X20]
	100 Move X0, X19
	101 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	102 Move W3, [X19+212]
	103 Move X4, [X19+256]
	104 Move X2, X0
	105 Move X0, X19
	106 Move X1, X20
	107 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	108 Move X20, X19
	109 Add X20, X20, 136
	110 Move X1, [X20]
	111 Move X0, X19
	112 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	113 Move W3, [X19+212]
	114 Move X2, X0
	115 Move X0, X19
	116 Move X1, X20
	117 Move X4, X31
	118 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	119 Move X20, X19
	120 Add X20, X20, 144
	121 Move X1, [X20]
	122 Move X0, X19
	123 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	124 Move W3, [X19+212]
	125 Move X2, X0
	126 Move X0, X19
	127 Move X1, X20
	128 Move X4, X31
	129 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	130 Move X20, X19
	131 Add X20, X20, 192
	132 Move X1, [X20]
	133 Move X0, X19
	134 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	135 Move W3, [X19+212]
	136 Move X4, [X19+272]
	137 Move X2, X0
	138 Move X0, X19
	139 Move X1, X20
	140 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	141 Move X20, X19
	142 Add X20, X20, 184
	143 Move X1, [X20]
	144 Move X0, X19
	145 Call InputSystemUIInputModule.UpdateReferenceForNewAsset, X0, X1
	146 Move W3, [X19+212]
	147 Move X4, [X19+264]
	148 Move X2, X0
	149 Move X0, X19
	150 Move X1, X20
	151 Call InputSystemUIInputModule.SwapAction, X0, X1, X2, X3, X4
	152 Move X0, X19
	153 Move X20, [X31+32]
	154 Move X19, [X31+40]
	155 Move X22, [X31+16]
	156 Move X21, [X31+24]
	157 Move X30, [X31+48]
	158 Call InputSystemUIInputModule.HookActions, X0
	159 Return 
	160 Move X20, [X31+32]
	161 Move X19, [X31+40]
	162 Move X22, [X31+16]
	163 Move X21, [X31+24]
	164 Move X30, [X31+48]
	165 Return 

Method: System.Void .ctor()

Disassembly:
	0x037ECDE4 STP X22, X21, [X31 + 0x10]
	0x037ECDE8 STP X20, X19, [X31 + 0x20]
	0x037ECDEC ADRP X21, 0xBF5000
	0x037ECDF0 ADRP X22, 0x95D000
	0x037ECDF4 ADRP X20, 0x95D000
	0x037ECDF8 LDRB W8, [X21 + 0x350]
	0x037ECDFC LDR X22, [X22 + 0x5C8]
	0x037ECE00 LDR X20, [X20 + 0x5D0]
	0x037ECE04 MOV X19, X0
	0x037ECE08 TBNZ X8, 0x0, 0x37ECE2C
	0x037ECE0C ADRP X0, 0x95D000

ISIL:
	001 Move X8, -47177728
	002 Move V0, [X8+3160]
	003 Move W9, 0x40000000
	004 Move W10, 1
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Move X1, X31
	007 Move [X0+96], W9
	008 Move [X0+200], W10
	009 Move [X0+88], D0
	010 Move [X0+288], D1
	011 Call BaseInputModule..ctor, X0
	012 Return 

Method: System.Void .cctor()

Disassembly:
	0x037ECE10 LDR X0, [X0 + 0x5D0]
	0x037ECE14 BL 0x1C16CF4
	0x037ECE18 ADRP X0, 0x95D000
	0x037ECE1C LDR X0, [X0 + 0x5C8]
	0x037ECE20 BL 0x1C16CF4
	0x037ECE24 MOVZ W8, 0x1
	0x037ECE28 STRB W8, [X21 + 0x350]
	0x037ECE2C LDR X0, [X22]
	0x037ECE30 BL 0x1C16F10
	0x037ECE34 LDR X1, [X20]
	0x037ECE38 MOV X20, X0
	0x037ECE3C BL 0x315505C
	0x037ECE40 MOVZ W8, 0x447A0000
	0x037ECE44 STR X20, [X19 + 0x28]
	0x037ECE48 STR W8, [X19 + 0x34]
	0x037ECE4C MOV X0, X19
	0x037ECE50 LDP X20, X19, [X31 + 0x20]
	0x037ECE54 LDP X22, X21, [X31 + 0x10]
	0x037ECE58 MOV X1, X31
	0x037ECE5C LDR X30, [X31], #0x30
	0x037ECE60 B 0x3E4EB28
	0x037ECE64 STR X30, [X31 - 0x30]!
	0x037ECE68 STP X22, X21, [X31 + 0x10]
	0x037ECE6C STP X20, X19, [X31 + 0x20]
	0x037ECE70 ADRP X21, 0xBF5000
	0x037ECE74 ADRP X22, 0x95D000
	0x037ECE78 ADRP X19, 0x95D000
	0x037ECE7C ADRP X20, 0x95D000
	0x037ECE80 LDRB W8, [X21 + 0x351]
	0x037ECE84 LDR X22, [X22 + 0x5C8]
	0x037ECE88 LDR X19, [X19 + 0x5D0]
	0x037ECE8C LDR X20, [X20 + 0x340]
	0x037ECE90 TBNZ X8, 0x0, 0x37ECEC0
	0x037ECE94 ADRP X0, 0x95D000
	0x037ECE98 LDR X0, [X0 + 0x5D0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBF6000
	007 Move X22, 0x95E000
	008 Move X19, 0x95E000
	009 Move X20, 0x95E000
	010 Move W8, [X21+836]
	011 Move X22, [X22+1352]
	012 Move X19, [X19+1360]
	013 Move X20, [X20+888]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x95E000
	019 Move X0, [X0+1360]
	020 Call 0x1C17CF4
	021 Move X0, 0x95E000
	022 Move X0, [X0+1352]
	023 Call 0x1C17CF4
	024 Move X0, 0x95E000
	025 Move X0, [X0+888]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+836], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call Dictionary`2<Object, InputActionReferenceState>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

