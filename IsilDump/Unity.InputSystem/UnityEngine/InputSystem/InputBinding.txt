Type: UnityEngine.InputSystem.InputBinding

Method: System.String get_name()

Disassembly:
	0x037532DC MOV X1, X0
	0x037532E0 MOV X0, X19

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_name(System.String value)

Disassembly:
	0x037532E4 MOV X2, X31
	0x037532E8 BL 0x330E100

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Guid get_id()

Disassembly:
	0x037532EC ADRP X0, 0x9F2000
	0x037532F0 LDR X0, [X0 + 0xD88]
	0x037532F4 BL 0x1C16D08
	0x037532F8 MOV X1, X0
	0x037532FC MOV X0, X19
	0x03753300 BL 0x1C16DEC
	0x03753304 BL 0x1C16F20
	0x03753308 STP X30, X21, [X31 - 0x20]!
	0x0375330C STP X20, X19, [X31 + 0x10]
	0x03753310 ADRP X20, 0xC8D000
	0x03753314 ADRP X21, 0x9F2000
	0x03753318 LDRB W8, [X20 + 0xDC1]
	0x0375331C LDR X21, [X21 + 0xD90]
	0x03753320 MOV X19, X0
	0x03753324 TBNZ X8, 0x0, 0x375333C
	0x03753328 ADRP X0, 0x9F2000
	0x0375332C LDR X0, [X0 + 0xD90]
	0x03753330 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+8]
	006 Move X1, X31
	007 Call String.IsNullOrEmpty, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {14}
	012 Move [X31], X31
	013 Move [X31+8], X31
	014 Move X1, [X19+8]
	015 Add X0, X31, 0
	016 Move X2, X31
	017 Move [X31], X31
	018 Move [X31+8], X31
	019 Call Guid..ctor, X0, X1
	020 Move X0, [X31]
	021 Move X1, [X31+8]
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Add X31, X31, 32
	025 Return X0

Method: System.Void set_id(System.Guid value)

Disassembly:
	0x037489EC ADD X0, X31, 0x20
	0x037489F0 STR X31, [X31 + 0x20]
	0x037489F4 STUR V0, [X31 + 0x50]
	0x037489F8 LDUR V0, [X31 + 0x4C]
	0x037489FC STUR X8, [X31 + 0x60]
	0x03748A00 MOVN W8, 0x0
	0x03748A04 STR W8, [X31 + 0x28]
	0x03748A08 STUR V0, [X31 + 0x2C]
	0x03748A0C LDUR V0, [X31 + 0x58]
	0x03748A10 STUR V0, [X31 + 0x38]
	0x03748A14 BL 0x374A53C

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move [X31], X1
	006 Move [X31+8], X2
	007 Add X0, X31, 0
	008 Move X1, X31
	009 Call Guid.ToString, X0
	010 Move [X19+8], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Add X31, X31, 32
	014 Return 

Method: System.String get_path()

Disassembly:
	0x03753334 MOVZ W8, 0x1
	0x03753338 STRB W8, [X20 + 0xDC1]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_path(System.String value)

Disassembly:
	0x0375333C LDR X0, [X21]
	0x03753340 BL 0x1C16F10

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_overridePath()

Disassembly:
	0x03753344 MOV X1, X31
	0x03753348 MOV X20, X0

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_overridePath(System.String value)

Disassembly:
	0x0375334C BL 0x33BDD8C
	0x03753350 MOVN W8, 0x1

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.String get_interactions()

Disassembly:
	0x03753354 MOV X0, X31
	0x03753358 STR W8, [X20 + 0x10]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_interactions(System.String value)

Disassembly:
	0x0375335C BL 0x33C151C
	0x03753360 STR W0, [X20 + 0x20]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_overrideInteractions()

Disassembly:
	0x03753364 STR X19, [X20 + 0x30]
	0x03753368 MOV X0, X20

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_overrideInteractions(System.String value)

Disassembly:
	0x0375336C LDP X20, X19, [X31 + 0x10]
	0x03753370 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String get_processors()

Disassembly:
	0x03753374 RET
	0x03753378 STR X30, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_processors(System.String value)

Disassembly:
	0x0375337C STP X20, X19, [X31 + 0x10]
	0x03753380 MOV W19, W1

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_overrideProcessors()

Disassembly:
	0x03753384 MOV X1, X31
	0x03753388 MOV X20, X0

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_overrideProcessors(System.String value)

Disassembly:
	0x0375338C BL 0x33BDD8C
	0x03753390 MOV X0, X31

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: System.String get_groups()

Disassembly:
	0x03753394 STR W19, [X20 + 0x10]
	0x03753398 BL 0x33C151C

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_groups(System.String value)

Disassembly:
	0x0375339C STR W0, [X20 + 0x20]
	0x037533A0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_action()

Disassembly:
	0x037533A4 LDR X30, [X31], #0x20
	0x037533A8 RET

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_action(System.String value)

Disassembly:
	0x037533AC STR X30, [X31 - 0x20]!
	0x037533B0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean get_isComposite()

Disassembly:
	0x03748CF4 LDR X0, [X0 + 0x5B0]
	0x03748CF8 BL 0x1C16D08
	0x03748CFC BL 0x1C16F10

ISIL:
	001 Move W8, [X0+56]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Void set_isComposite(System.Boolean value)

Disassembly:
	0x0374853C MRS X20, 0xC000
	0x03748540 MOV X19, X8
	0x03748544 LDR X8, [X20 + 0x28]
	0x03748548 STR X8, [X31 + 0x88]
	0x0374854C STR W31, [X31 + 0x6C]
	0x03748550 LDR V0, [X0]
	0x03748554 LDR X8, [X0 + 0x10]
	0x03748558 ADD X0, X31, 0x40

ISIL:
	001 Move W8, [X0+56]
	002 And W31, W1, 1
	003 Move W9, 4
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFFB
	006 Or W8, W8, W9
	007 Move [X0+56], W8
	008 Return 

Method: System.Boolean get_isPartOfComposite()

Disassembly:
	0x0374AFA8 LDR X2, [X22]
	0x0374AFAC BL 0x2DE6188
	0x0374AFB0 STR X0, [X31 + 0x8]

ISIL:
	001 Move W8, [X0+56]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: System.Void set_isPartOfComposite(System.Boolean value)

Disassembly:
	0x0374B2A8 MOV X19, X1
	0x0374B2AC MOV X20, X0
	0x0374B2B0 TBNZ X8, 0x0, 0x374B2EC
	0x0374B2B4 ADRP X0, 0x9FA000
	0x0374B2B8 LDR X0, [X0 + 0xB58]
	0x0374B2BC BL 0x1C16CF4
	0x0374B2C0 ADRP X0, 0x9F9000
	0x0374B2C4 LDR X0, [X0 + 0xFB8]

ISIL:
	001 Move W8, [X0+56]
	002 And W31, W1, 1
	003 Move W9, 8
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFF7
	006 Or W8, W8, W9
	007 Move [X0+56], W8
	008 Return 

Method: System.Boolean get_hasOverrides()

Disassembly:
	0x037533B4 ADRP X20, 0xC8D000
	0x037533B8 LDRB W8, [X20 + 0xDC2]
	0x037533BC MOV X19, X0
	0x037533C0 TBNZ X8, 0x0, 0x37533F0
	0x037533C4 ADRP X0, 0x9F2000
	0x037533C8 LDR X0, [X0 + 0xD98]
	0x037533CC BL 0x1C16CF4
	0x037533D0 ADRP X0, 0x9C8000
	0x037533D4 LDR X0, [X0 + 0xC28]
	0x037533D8 BL 0x1C16CF4

ISIL:
	001 Move X8, [X0+64]
	002 Compare X8, 0
	003 JumpIfNotEqual {7}
	004 Move X8, [X0+80]
	005 Compare X8, 0
	006 JumpIfEqual {9}
	007 Move W0, 1
	008 Return X0
	009 Move X8, [X0+72]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Return X0

Method: System.Void .ctor(System.String path, System.String action = null, System.String groups = null, System.String processors = null, System.String interactions = null, System.String name = null)

Disassembly:
	0x037533DC ADRP X0, 0x9A0000
	0x037533E0 LDR X0, [X0 + 0x6C0]
	0x037533E4 BL 0x1C16CF4
	0x037533E8 MOVZ W8, 0x1
	0x037533EC STRB W8, [X20 + 0xDC2]
	0x037533F0 MOV X0, X19
	0x037533F4 MOV X1, X31
	0x037533F8 BL 0x32277A8

ISIL:
	001 Move [X0+40], X3
	002 Move [X0+48], X2
	003 Move [X0+24], X5
	004 Move [X0+32], X4
	005 Move [X0+8], X31
	006 Move [X0+16], X1
	007 Move [X0], X6
	008 Move [X0+56], W31
	009 Move [X0+72], X31
	010 Move [X0+80], X31
	011 Move [X0+64], X31
	012 Return 

Method: System.String GetNameOfComposite()

Disassembly:
	0x037533FC TBNZ X0, 0x0, 0x3753480
	0x03753400 ADRP X8, 0x9C8000
	0x03753404 LDR X8, [X8 + 0xC28]
	0x03753408 ADRP X20, 0x9A0000
	0x0375340C MOV X1, X19
	0x03753410 MOV X2, X31
	0x03753414 LDR X8, [X8]
	0x03753418 LDR X0, [X8 + 0xB8]
	0x0375341C LDR X20, [X20 + 0x6C0]
	0x03753420 BL 0x3769CEC
	0x03753424 LDR X8, [X20]
	0x03753428 MOV X19, X0
	0x0375342C LDR W9, [X8 + 0xE0]
	0x03753430 CBNZ W9, 0x375343C
	0x03753434 MOV X0, X8
	0x03753438 BL 0x1C16DFC
	0x0375343C MOV X0, X19

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move W9, [X0+56]
	004 Move TEMP, X9
	005 And TEMP, TEMP, 4
	006 Compare TEMP, 4
	007 JumpIfEqual {9}
	008 Move X0, X31
	009 Move X8, X0
	010 Move X0, [X0+64]
	011 Compare X0, 0
	012 JumpIfNotEqual {14}
	013 Move X0, [X8+16]
	014 Add X8, X31, 8
	015 Move X1, X31
	016 Call NameAndParameters.Parse, X0
	017 Move X0, [X31+8]
	018 Move X30, [X31+32]
	019 Add X31, X31, 48
	020 Return X0

Method: System.Void GenerateId()

Disassembly:
	0x03748568 STUR X8, [X31 + 0x80]
	0x0374856C MOVN W8, 0x0
	0x03748570 STR W8, [X31 + 0x48]
	0x03748574 STUR V0, [X31 + 0x4C]
	0x03748578 LDUR V0, [X31 + 0x78]
	0x0374857C ADD X8, X31, 0x18
	0x03748580 STUR V0, [X31 + 0x58]
	0x03748584 BL 0x37485FC
	0x03748588 LDR X8, [X31 + 0x38]
	0x0374858C LDUR V0, [X31 + 0x18]
	0x03748590 LDUR V1, [X31 + 0x28]
	0x03748594 ADD X0, X31, 0x40
	0x03748598 STR X8, [X31 + 0x60]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, X31
	006 Call Guid.NewGuid
	007 Move [X31], X0
	008 Move [X31+8], X1
	009 Add X0, X31, 0
	010 Move X1, X31
	011 Call Guid.ToString, X0
	012 Move [X19+8], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Add X31, X31, 32
	016 Return 

Method: System.Void RemoveOverrides()

Disassembly:
	0x03753440 MOV X1, X31
	0x03753444 MOV X2, X31
	0x03753448 BL 0x3395194

ISIL:
	001 Move [X0+64], X31
	002 Move [X0+72], X31
	003 Move [X0+80], X31
	004 Return 

Method: UnityEngine.InputSystem.InputBinding MaskByGroup(System.String group)

Disassembly:
	0x0375344C MOV W8, W0
	0x03753450 MOV X0, X31
	0x03753454 TBNZ X8, 0x0, 0x3753474
	0x03753458 ADRP X8, 0x9F2000
	0x0375345C LDR X8, [X8 + 0xD98]
	0x03753460 MOV X0, X19

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X8+32], X31
	003 Move [X8+40], X0
	004 Move [X8], V0
	005 Move [X8+8], V0
	006 Move [X8+48], V0
	007 Move [X8+56], V0
	008 Move [X8+80], X31
	009 Return X0

Method: UnityEngine.InputSystem.InputBinding MaskByGroups(System.String[] groups)

Disassembly:
	0x03753464 LDR X1, [X8]
	0x03753468 BL 0x21A891C
	0x0375346C CBZ X0, 0x3753474
	0x03753470 LDR X0, [X0 + 0x10]
	0x03753474 LDP X20, X19, [X31 + 0x10]
	0x03753478 LDR X30, [X31], #0x20
	0x0375347C RET
	0x03753480 ADRP X0, 0x9A5000
	0x03753484 LDR X0, [X0 + 0x528]
	0x03753488 BL 0x1C16D08
	0x0375348C BL 0x1C16F10
	0x03753490 MOV X19, X0
	0x03753494 ADRP X0, 0x9F2000
	0x03753498 LDR X0, [X0 + 0x940]
	0x0375349C BL 0x1C16D08
	0x037534A0 MOV X1, X0
	0x037534A4 MOV X0, X19
	0x037534A8 MOV X2, X31
	0x037534AC BL 0x330E100
	0x037534B0 ADRP X0, 0x9F2000
	0x037534B4 LDR X0, [X0 + 0xDA0]
	0x037534B8 BL 0x1C16D08
	0x037534BC MOV X1, X0
	0x037534C0 MOV X0, X19
	0x037534C4 BL 0x1C16DEC
	0x037534C8 MOV X1, X31
	0x037534CC B 0x33BDD8C
	0x037534D0 RET
	0x037534D4 STR X30, [X31 - 0x20]!
	0x037534D8 STP X20, X19, [X31 + 0x10]
	0x037534DC ADRP X20, 0xC8D000
	0x037534E0 LDRB W8, [X20 + 0xDC3]
	0x037534E4 MOV X19, X0
	0x037534E8 TBNZ X8, 0x0, 0x3753518
	0x037534EC ADRP X0, 0x9F2000
	0x037534F0 LDR X0, [X0 + 0xDA8]
	0x037534F4 BL 0x1C16CF4
	0x037534F8 ADRP X0, 0x9C8000
	0x037534FC LDR X0, [X0 + 0xC28]
	0x03753500 BL 0x1C16CF4
	0x03753504 ADRP X0, 0x9A0000
	0x03753508 LDR X0, [X0 + 0x6C0]
	0x0375350C BL 0x1C16CF4
	0x03753510 MOVZ W8, 0x1
	0x03753514 STRB W8, [X20 + 0xDC3]
	0x03753518 LDR W8, [X19 + 0x10]
	0x0375351C CMP W8, 0x1
	0x03753520 B.EQ 0x3753598
	0x03753524 CBNZ W8, 0x3753590
	0x03753528 LDR X0, [X19 + 0x28]
	0x0375352C MOVN W8, 0x0
	0x03753530 MOV X1, X31
	0x03753534 STR W8, [X19 + 0x10]
	0x03753538 BL 0x32277A8
	0x0375353C TBNZ X0, 0x0, 0x37535D0
	0x03753540 ADRP X8, 0x9C8000
	0x03753544 LDR X8, [X8 + 0xC28]
	0x03753548 LDR X1, [X19 + 0x28]
	0x0375354C MOV X2, X31
	0x03753550 LDR X8, [X8]
	0x03753554 LDR X0, [X8 + 0xB8]
	0x03753558 BL 0x3769CEC
	0x0375355C ADRP X8, 0x9A0000
	0x03753560 LDR X8, [X8 + 0x6C0]
	0x03753564 MOV X20, X0
	0x03753568 LDR X8, [X8]
	0x0375356C LDR W9, [X8 + 0xE0]
	0x03753570 CBNZ W9, 0x375357C
	0x03753574 MOV X0, X8
	0x03753578 BL 0x1C16DFC
	0x0375357C MOV X0, X20
	0x03753580 MOV X1, X31
	0x03753584 MOV X2, X31
	0x03753588 BL 0x3395194
	0x0375358C TBZ X0, 0x0, 0x37535A4
	0x03753590 MOV W0, W31
	0x03753594 B 0x3753688
	0x03753598 MOVN W8, 0x0
	0x0375359C STR W8, [X19 + 0x10]
	0x037535A0 B 0x375363C
	0x037535A4 CBZ X20, 0x3753694
	0x037535A8 LDR X8, [X20]
	0x037535AC MOVZ W1, 0x14
	0x037535B0 MOV X0, X20
	0x037535B4 LDR X9, [X8 + 0x688]
	0x037535B8 LDR X2, [X8 + 0x690]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], X30
	003 Move [X31+104], X25
	004 Move [X31+112], X24
	005 Move [X31+120], X23
	006 Move [X31+128], X22
	007 Move [X31+136], X21
	008 Move [X31+144], X20
	009 Move [X31+152], X19
	010 Move X21, 0xC8E000
	011 Move X24, 0x9F3000
	012 Move X19, X8
	013 Move W8, [X21+3514]
	014 Move X24, [X24+3392]
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x9A2000
	021 Move X0, [X0+3232]
	022 Call 0x1C17CF4
	023 Move X0, 0x9A2000
	024 Move X0, [X0+3064]
	025 Call 0x1C17CF4
	026 Move X0, 0x9F3000
	027 Move X0, [X0+3400]
	028 Call 0x1C17CF4
	029 Move X0, 0x9F3000
	030 Move X0, [X0+3392]
	031 Call 0x1C17CF4
	032 Move X0, 0x9AA000
	033 Move X0, [X0+2120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+3514], W8
	037 Move X0, [X24]
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X31+80], X31
	040 Move [X31+48], V0
	041 Move [X31+56], V0
	042 Move [X31+16], V0
	043 Move [X31+24], V0
	044 Move [X31], V0
	045 Move X21, 0x9AA000
	046 Move W8, [X0+224]
	047 Move X21, [X21+2120]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X24]
	052 Move X8, [X0+184]
	053 Move X25, 0x9A2000
	054 Move X21, [X21]
	055 Move X22, [X8+8]
	056 Move X25, [X25+3232]
	057 Compare X22, 0
	058 JumpIfNotEqual {80}
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X24]
	064 Move X9, 0x9A2000
	065 Move X8, [X0+184]
	066 Move X9, [X9+3064]
	067 Move X23, [X8]
	068 Move X0, [X9]
	069 Call 0x1C17F10
	070 Move X8, 0x9F3000
	071 Move X8, [X8+3400]
	072 Move X1, X23
	073 Move X3, X31
	074 Move X22, X0
	075 Move X2, [X8]
	076 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	077 Move X8, [X24]
	078 Move X8, [X8+184]
	079 Move [X8+8], X22
	080 Move X2, [X25]
	081 Move X0, X20
	082 Move X1, X22
	083 Call Enumerable.Where, X0, X1
	084 Move X1, X0
	085 Move X0, X21
	086 Move X2, X31
	087 Call String.Join, X0, X1
	088 Move [X31+40], X0
	089 Add X1, X31, 0
	090 Move W2, 88
	091 Move X0, X19
	092 Call 0x3EB2AC0
	093 Move X20, [X31+144]
	094 Move X19, [X31+152]
	095 Move X22, [X31+128]
	096 Move X21, [X31+136]
	097 Move X24, [X31+112]
	098 Move X23, [X31+120]
	099 Move X30, [X31+96]
	100 Move X25, [X31+104]
	101 Add X31, X31, 160
	102 Return X0

Method: System.String get_effectivePath()

Disassembly:
	0x0374C644 LDR V0, [X27 + 0x20]
	0x0374C648 STR S0, [X24 + 0x20]
	0x0374C64C LDR V0, [X27 + 0x24]
	0x0374C650 STR S0, [X24 + 0x24]
	0x0374C654 LDRB W8, [X28 + 0x1]
	0x0374C658 ADD W26, W26, 0x1

ISIL:
	001 Move X8, X0
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {6}
	005 Return X0
	006 Move X0, [X8+16]
	007 Return X0

Method: System.String get_effectiveInteractions()

Disassembly:
	0x037535BC BLR X9
	0x037535C0 MOV W8, W31
	0x037535C4 STR X0, [X19 + 0x38]
	0x037535C8 STR W31, [X19 + 0x40]
	0x037535CC B 0x375364C
	0x037535D0 ADRP X0, 0x9A5000

ISIL:
	001 Move X8, X0
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {6}
	005 Return X0
	006 Move X0, [X8+24]
	007 Return X0

Method: System.String get_effectiveProcessors()

Disassembly:
	0x037535D4 LDR X0, [X0 + 0x528]
	0x037535D8 BL 0x1C16D08
	0x037535DC BL 0x1C16F10
	0x037535E0 MOV X19, X0
	0x037535E4 ADRP X0, 0x9F2000
	0x037535E8 LDR X0, [X0 + 0x940]

ISIL:
	001 Move X8, X0
	002 Move X0, [X0+80]
	003 Compare X0, 0
	004 JumpIfEqual {6}
	005 Return X0
	006 Move X0, [X8+32]
	007 Return X0

Method: System.Boolean get_isEmpty()

Disassembly:
	0x037535EC BL 0x1C16D08
	0x037535F0 MOV X1, X0
	0x037535F4 MOV X0, X19
	0x037535F8 MOV X2, X31
	0x037535FC BL 0x330E100
	0x03753600 ADRP X0, 0x9F2000
	0x03753604 LDR X0, [X0 + 0xDB0]
	0x03753608 BL 0x1C16D08
	0x0375360C MOV X1, X0
	0x03753610 MOV X0, X19
	0x03753614 BL 0x1C16DEC
	0x03753618 B.CS 0x3753698
	0x0375361C ADRP X9, 0x9F2000
	0x03753620 LDR X9, [X9 + 0xDA8]
	0x03753624 ADD X8, X0, W8, 0x3, SXTW
	0x03753628 LDR X20, [X8 + 0x20]
	0x0375362C LDR X1, [X9]
	0x03753630 MOV X0, X20
	0x03753634 BL 0x21A891C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfNotEqual {8}
	007 Move X0, [X19+16]
	008 Move X1, X31
	009 Call String.IsNullOrEmpty, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {27}
	014 Move X0, [X19+48]
	015 Move X1, X31
	016 Call String.IsNullOrEmpty, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {27}
	021 Move X0, [X19+40]
	022 Move X1, X31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call String.IsNullOrEmpty, X0
	026 Return X0
	027 Move W0, W31
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return X0

Method: System.Boolean Equals(UnityEngine.InputSystem.InputBinding other)

Disassembly:
	0x03753638 CBNZ X0, 0x3753668
	0x0375363C LDR W8, [X19 + 0x40]
	0x03753640 LDR X0, [X19 + 0x38]
	0x03753644 ADD W8, W8, 0x1
	0x03753648 STR W8, [X19 + 0x40]
	0x0375364C CBZ X0, 0x3753694
	0x03753650 LDR W9, [X0 + 0x18]
	0x03753654 CMP W8, W9
	0x03753658 B.LT 0x3753618
	0x0375365C MOV W0, W31
	0x03753660 STR X31, [X19 + 0x38]
	0x03753664 B 0x3753688
	0x03753668 CBZ X20, 0x3753694
	0x0375366C LDR X8, [X20]
	0x03753670 MOV X0, X20
	0x03753674 LDP X9, X1, [X8 + 0x1A8]
	0x03753678 BLR X9
	0x0375367C STR X0, [X19 + 0x18]
	0x03753680 MOVZ W0, 0x1
	0x03753684 STR W0, [X19 + 0x10]
	0x03753688 LDP X20, X19, [X31 + 0x10]
	0x0375368C LDR X30, [X31], #0x20
	0x03753690 RET
	0x03753694 BL 0x1C16F20
	0x03753698 BL 0x1C16F28
	0x0375369C LDR X0, [X0 + 0x18]
	0x037536A0 RET
	0x037536A4 STP X30, X19, [X31 - 0x10]!
	0x037536A8 ADRP X0, 0x9A0000
	0x037536AC LDR X0, [X0 + 0xB40]
	0x037536B0 BL 0x1C16D08
	0x037536B4 BL 0x1C16F10
	0x037536B8 MOV X1, X31
	0x037536BC MOV X19, X0
	0x037536C0 BL 0x3380310
	0x037536C4 ADRP X0, 0x9F2000
	0x037536C8 LDR X0, [X0 + 0xDB8]
	0x037536CC BL 0x1C16D08
	0x037536D0 MOV X1, X0
	0x037536D4 MOV X0, X19
	0x037536D8 BL 0x1C16DEC
	0x037536DC LDR X0, [X0 + 0x18]
	0x037536E0 RET
	0x037536E4 STR X30, [X31 - 0x20]!
	0x037536E8 STP X20, X19, [X31 + 0x10]
	0x037536EC ADRP X20, 0xC8D000
	0x037536F0 LDRB W8, [X20 + 0xDC4]
	0x037536F4 MOV X19, X0
	0x037536F8 TBNZ X8, 0x0, 0x3753710
	0x037536FC ADRP X0, 0x9F2000
	0x03753700 LDR X0, [X0 + 0xD90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+64]
	006 Move X20, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {10}
	009 Move X0, [X19+16]
	010 Move X1, [X20+64]
	011 Compare X1, 0
	012 JumpIfNotEqual {14}
	013 Move X1, [X20+16]
	014 Move W2, 3
	015 Move X3, X31
	016 Call String.Equals, X0, X1, X2
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {69}
	021 Move X0, [X19+72]
	022 Compare X0, 0
	023 JumpIfNotEqual {25}
	024 Move X0, [X19+24]
	025 Move X1, [X20+72]
	026 Compare X1, 0
	027 JumpIfNotEqual {29}
	028 Move X1, [X20+24]
	029 Move W2, 3
	030 Move X3, X31
	031 Call String.Equals, X0, X1, X2
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {69}
	036 Move X0, [X19+80]
	037 Compare X0, 0
	038 JumpIfNotEqual {40}
	039 Move X0, [X19+32]
	040 Move X1, [X20+80]
	041 Compare X1, 0
	042 JumpIfNotEqual {44}
	043 Move X1, [X20+32]
	044 Move W2, 3
	045 Move X3, X31
	046 Call String.Equals, X0, X1, X2
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {69}
	051 Move X0, [X19+40]
	052 Move X1, [X20+40]
	053 Move W2, 3
	054 Move X3, X31
	055 Call String.Equals, X0, X1, X2
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {69}
	060 Move X0, [X19+48]
	061 Move X1, [X20+48]
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move W2, 3
	065 Move X3, X31
	066 Move X30, [X31+32]
	067 Call String.Equals, X0, X1, X2
	068 Return X0
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move W0, W31
	072 Move X30, [X31+32]
	073 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03753704 BL 0x1C16CF4
	0x03753708 MOVZ W8, 0x1
	0x0375370C STRB W8, [X20 + 0xDC4]
	0x03753710 LDR W8, [X19 + 0x10]
	0x03753714 ADDS W31, W8, 0x2
	0x03753718 B.NE 0x375373C
	0x0375371C LDR W20, [X19 + 0x20]
	0x03753720 MOV X0, X31
	0x03753724 BL 0x33C151C
	0x03753728 CMP W20, W0
	0x0375372C B.NE 0x375373C
	0x03753730 STR W31, [X19 + 0x10]
	0x03753734 MOV X20, X19
	0x03753738 B 0x3753768
	0x0375373C ADRP X8, 0x9F2000
	0x03753740 LDR X8, [X8 + 0xD90]
	0x03753744 LDR X0, [X8]
	0x03753748 BL 0x1C16F10
	0x0375374C MOV X1, X31
	0x03753750 MOV X20, X0
	0x03753754 BL 0x33BDD8C
	0x03753758 MOV X0, X31
	0x0375375C STR W31, [X20 + 0x10]
	0x03753760 BL 0x33C151C
	0x03753764 STR W0, [X20 + 0x20]
	0x03753768 LDR X8, [X19 + 0x30]
	0x0375376C MOV X0, X20
	0x03753770 STR X8, [X20 + 0x28]
	0x03753774 LDP X20, X19, [X31 + 0x10]
	0x03753778 LDR X30, [X31], #0x20
	0x0375377C RET
	0x03753780 B 0x37536E4
	0x03753784 STP X30, X21, [X31 - 0x20]!
	0x03753788 STP X20, X19, [X31 + 0x10]
	0x0375378C ADRP X20, 0xC8D000
	0x03753790 ADRP X21, 0x9F2000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move X21, 0xC8E000
	007 Move W8, [X21+3515]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9CC000
	015 Move X0, [X0+1248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3515], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x9CC000
	022 Move X8, [X8+1248]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X1, X0
	030 Add X0, X31, 8
	031 Move W2, 88
	032 Call 0x3EB2AC0
	033 Add X1, X31, 8
	034 Move X0, X19
	035 Call InputBinding.Equals, X0, X1
	036 Move X20, [X31+112]
	037 Move X19, [X31+120]
	038 Move X30, [X31+96]
	039 Move X21, [X31+104]
	040 And W0, W0, 1
	041 Add X31, X31, 128
	042 Return X0

Method: System.Boolean op_Equality(UnityEngine.InputSystem.InputBinding left, UnityEngine.InputSystem.InputBinding right)

Disassembly:
	0x0374B774 LDR X30, [X31 + 0x10]
	0x0374B778 ADD X31, X31, 0x40
	0x0374B77C RET
	0x0374B780 BL 0x1C16F20
	0x0374B784 BL 0x1C16F28
	0x0374B788 LDRB W8, [X0 + 0x4]
	0x0374B78C UBFM W0, W8, 0x2, 0x2
	0x0374B790 RET
	0x0374B794 LDR X8, [X0]
	0x0374B798 LDP X3, X2, [X8 + 0x1C8]
	0x0374B79C BR X3
	0x0374B7A0 SUB X31, X31, 0xD0
	0x0374B7A4 STP X29, X30, [X31 + 0x70]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+96], X30
	003 Move [X31+104], X19
	004 Move X19, X0
	005 Add X0, X31, 8
	006 Move W2, 88
	007 Call 0x3EB2AC0
	008 Add X1, X31, 8
	009 Move X0, X19
	010 Call InputBinding.Equals, X0, X1
	011 Move X30, [X31+96]
	012 Move X19, [X31+104]
	013 And W0, W0, 1
	014 Add X31, X31, 112
	015 Return X0

Method: System.Boolean op_Inequality(UnityEngine.InputSystem.InputBinding left, UnityEngine.InputSystem.InputBinding right)

Disassembly:
	0x03753794 LDRB W8, [X20 + 0xDC5]
	0x03753798 LDR X21, [X21 + 0xDC0]
	0x0375379C MOV X19, X0
	0x037537A0 TBNZ X8, 0x0, 0x37537B8
	0x037537A4 ADRP X0, 0x9F2000
	0x037537A8 LDR X0, [X0 + 0xDC0]
	0x037537AC BL 0x1C16CF4
	0x037537B0 MOVZ W8, 0x1
	0x037537B4 STRB W8, [X20 + 0xDC5]
	0x037537B8 LDR X0, [X21]
	0x037537BC BL 0x1C16F10
	0x037537C0 MOV X1, X31
	0x037537C4 MOV X20, X0
	0x037537C8 BL 0x33BDD8C
	0x037537CC MOVN W8, 0x1
	0x037537D0 MOV X0, X31
	0x037537D4 STR W8, [X20 + 0x10]
	0x037537D8 BL 0x33C151C
	0x037537DC STR W0, [X20 + 0x28]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+176], X30
	003 Move [X31+184], X19
	004 Move X19, X1
	005 Move X1, X0
	006 Add X0, X31, 0
	007 Move W2, 88
	008 Call 0x3EB2AC0
	009 Add X0, X31, 88
	010 Move W2, 88
	011 Move X1, X19
	012 Call 0x3EB2AC0
	013 Add X0, X31, 0
	014 Add X1, X31, 88
	015 Call InputBinding.Equals, X0, X1
	016 Move X30, [X31+176]
	017 Move X19, [X31+184]
	018 NotImplemented "Instruction ORN not yet implemented."
	019 And W0, W8, 1
	020 Add X31, X31, 192
	021 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x037537E0 LDR V0, [X19]
	0x037537E4 MOV X0, X20
	0x037537E8 STR V0, [X20 + 0x4]
	0x037537EC LDP X20, X19, [X31 + 0x10]
	0x037537F0 LDP X30, X21, [X31], #0x20
	0x037537F4 RET
	0x037537F8 STR X30, [X31 - 0x20]!
	0x037537FC STP X20, X19, [X31 + 0x10]
	0x03753800 MOV W19, W1
	0x03753804 MOV X1, X31
	0x03753808 MOV X20, X0
	0x0375380C BL 0x33BDD8C
	0x03753810 MOV X0, X31
	0x03753814 STR W19, [X20 + 0x10]
	0x03753818 BL 0x33C151C
	0x0375381C STR W0, [X20 + 0x28]
	0x03753820 LDP X20, X19, [X31 + 0x10]
	0x03753824 LDR X30, [X31], #0x20
	0x03753828 RET
	0x0375382C STR X30, [X31 - 0x10]!
	0x03753830 LDR X8, [X0]
	0x03753834 CBZ X8, 0x375384C
	0x03753838 MOV W2, W1
	0x0375383C LDR W1, [X0 + 0x8]
	0x03753840 MOV X0, X8
	0x03753844 LDR X30, [X31], #0x10
	0x03753848 B 0x37501D8
	0x0375384C BL 0x1C16F20
	0x03753850 SUB X31, X31, 0x30
	0x03753854 STP X30, X21, [X31 + 0x10]
	0x03753858 STP X20, X19, [X31 + 0x20]
	0x0375385C ADRP X21, 0xC8D000
	0x03753860 LDRB W8, [X21 + 0xDC6]
	0x03753864 MOV W19, W1
	0x03753868 MOV X20, X0
	0x0375386C TBNZ X8, 0x0, 0x3753884
	0x03753870 ADRP X0, 0x9F2000
	0x03753874 LDR X0, [X0 + 0xDC8]
	0x03753878 BL 0x1C16CF4
	0x0375387C MOVZ W8, 0x1
	0x03753880 STRB W8, [X21 + 0xDC6]
	0x03753884 STR W31, [X31 + 0x8]
	0x03753888 LDR X0, [X20]
	0x0375388C CBZ X0, 0x37538C4
	0x03753890 ADRP X8, 0x9F2000
	0x03753894 LDR X8, [X8 + 0xDC8]
	0x03753898 STRB W31, [X31 + 0xC]
	0x0375389C LDR W1, [X20 + 0x8]
	0x037538A0 ADD X3, X31, 0xC
	0x037538A4 LDR X6, [X8]
	0x037538A8 ADD X4, X31, 0x8
	0x037538AC MOV W2, W19
	0x037538B0 MOV X5, X31
	0x037538B4 BL 0x21F7F1C
	0x037538B8 LDRB W8, [X31 + 0xC]
	0x037538BC CMP W8, 0x0
	0x037538C0 CSET W0, NE
	0x037538C4 LDP X20, X19, [X31 + 0x20]
	0x037538C8 LDP X30, X21, [X31 + 0x10]
	0x037538CC ADD X31, X31, 0x30
	0x037538D0 RET
	0x037538D4 MOV X8, X0
	0x037538D8 LDR X0, [X0]
	0x037538DC CBZ X0, 0x37538F4
	0x037538E0 MOV W4, W3

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, [X0+64]
	008 Compare X0, 0
	009 JumpIfNotEqual {13}
	010 Move X0, [X19+16]
	011 Compare X0, 0
	012 JumpIfEqual {75}
	013 Move X8, [X0]
	014 Move X9, [X8+344]
	015 Move X1, [X8+352]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move W8, 397
	018 Multiply W20, W0, W8
	019 Move X0, [X19+72]
	020 Compare X0, 0
	021 JumpIfNotEqual {25}
	022 Move X0, [X19+24]
	023 Compare X0, 0
	024 JumpIfEqual {76}
	025 Move X8, [X0]
	026 Move X9, [X8+344]
	027 Move X1, [X8+352]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move W8, W0
	030 Move X0, [X19+80]
	031 Compare X0, 0
	032 JumpIfEqual {36}
	033 Xor W8, W8, W20
	034 Move W9, 397
	035 Multiply W22, W8, W9
	036 Move X0, [X19+32]
	037 Xor W8, W8, W20
	038 Move W9, 397
	039 Multiply W22, W8, W9
	040 Compare X0, 0
	041 JumpIfEqual {77}
	042 Move X8, [X0]
	043 Move X9, [X8+344]
	044 Move X1, [X8+352]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move W20, W0
	047 Move X0, [X19+40]
	048 Compare X0, 0
	049 JumpIfEqual {55}
	050 Move X8, [X0]
	051 Move X9, [X8+344]
	052 Move X1, [X8+352]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move W21, W0
	055 Move W21, W31
	056 Move X0, [X19+48]
	057 Compare X0, 0
	058 JumpIfEqual {63}
	059 Move X8, [X0]
	060 Move X9, [X8+344]
	061 Move X1, [X8+352]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Xor W8, W20, W22
	064 Move W9, 397
	065 Multiply W8, W8, W9
	066 Xor W8, W21, W8
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Multiply W8, W8, W9
	072 Xor W0, W0, W8
	073 Move X30, [X31+48]
	074 Return X0
	075 Move W20, W31
	076 Move W8, W31
	077 Move W20, W31

Method: System.String ToString()

Disassembly:
	0x037538E4 MOV X3, X2
	0x037538E8 MOV W2, W1
	0x037538EC LDR W1, [X8 + 0x8]
	0x037538F0 B 0x375032C
	0x037538F4 RET
	0x037538F8 STR X30, [X31 - 0x10]!
	0x037538FC LDR X8, [X0]
	0x03753900 CBZ X8, 0x3753918
	0x03753904 MOV W2, W1
	0x03753908 LDR W1, [X0 + 0x8]
	0x0375390C MOV X0, X8
	0x03753910 LDR X30, [X31], #0x10
	0x03753914 B 0x3750440
	0x03753918 BL 0x1C16F20
	0x0375391C STR X30, [X31 - 0x10]!
	0x03753920 LDR X8, [X0]
	0x03753924 CBZ X8, 0x375393C
	0x03753928 MOV W2, W1
	0x0375392C LDR W1, [X0 + 0x8]
	0x03753930 MOV X0, X8
	0x03753934 LDR X30, [X31], #0x10
	0x03753938 B 0x37502AC
	0x0375393C BL 0x1C16F20
	0x03753940 LDR W0, [X0]
	0x03753944 RET
	0x03753948 STR W1, [X0]
	0x0375394C RET
	0x03753950 LDR X0, [X0 + 0x8]
	0x03753954 RET
	0x03753958 STR X1, [X0 + 0x8]
	0x0375395C RET
	0x03753960 RET
	0x03753964 STR X30, [X31 - 0x10]!
	0x03753968 LDR W8, [X0 + 0x10]
	0x0375396C CMP W8, 0x1
	0x03753970 B.EQ 0x375399C
	0x03753974 CBNZ W8, 0x3753A08
	0x03753978 LDR X8, [X0 + 0x30]
	0x0375397C MOVN W9, 0x0
	0x03753980 STR W9, [X0 + 0x10]
	0x03753984 CBZ X8, 0x3753A50
	0x03753988 LDR W10, [X0 + 0x38]
	0x0375398C LDR W9, [X8 + 0x54]
	0x03753990 ADD W8, W10, 0x1
	0x03753994 STR W9, [X0 + 0x50]
	0x03753998 B 0x37539FC
	0x0375399C LDR W8, [X0 + 0x7C]
	0x037539A0 MOVN W9, 0x0
	0x037539A4 STR W9, [X0 + 0x10]
	0x037539A8 ADD W8, W8, 0x1
	0x037539AC STR W8, [X0 + 0x7C]
	0x037539B0 B 0x37539E8
	0x037539B4 LDR X9, [X0 + 0x30]
	0x037539B8 CBZ X9, 0x3753A5C
	0x037539BC LDR X9, [X9 + 0x68]
	0x037539C0 SXTW X8, W8
	0x037539C4 ADD X8, X9, X8, 0x5, LSL
	0x037539C8 LDP V0, V1, [X8]
	0x037539CC STUR V0, [X0 + 0x58]
	0x037539D0 LDRB W8, [X0 + 0x5C]
	0x037539D4 STUR V1, [X0 + 0x68]
	0x037539D8 TBZ X8, 0x3, 0x3753A08
	0x037539DC LDRH W9, [X0 + 0x66]
	0x037539E0 MOV W8, W31
	0x037539E4 STP W9, W31, [X0 + 0x78]
	0x037539E8 LDRB W9, [X0 + 0x58]
	0x037539EC CMP W8, W9
	0x037539F0 B.LT 0x3753A10
	0x037539F4 LDP W9, W8, [X0 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xC8E000
	006 Move X21, 0x9A1000
	007 Move W8, [X19+3516]
	008 Move X21, [X21+2288]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9A1000
	015 Move X0, [X0+2288]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3516], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X19, X0
	023 Call StringBuilder..ctor, X0
	024 Move X0, [X20+48]
	025 Move X1, X31
	026 Call String.IsNullOrEmpty, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {41}
	031 Compare X19, 0
	032 JumpIfEqual {90}
	033 Move X1, [X20+48]
	034 Move X0, X19
	035 Move X2, X31
	036 Call StringBuilder.Append, X0, X1
	037 Move W1, 58
	038 Move X0, X19
	039 Move X2, X31
	040 Call StringBuilder.Append, X0, X1
	041 Move X21, [X20+64]
	042 Compare X21, 0
	043 JumpIfNotEqual {45}
	044 Move X21, [X20+16]
	045 Move X0, X21
	046 Move X1, X31
	047 Call String.IsNullOrEmpty, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {58}
	052 Compare X19, 0
	053 JumpIfEqual {90}
	054 Move X0, X19
	055 Move X1, X21
	056 Move X2, X31
	057 Call StringBuilder.Append, X0, X1
	058 Move X0, [X20+40]
	059 Move X1, X31
	060 Call String.IsNullOrEmpty, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {67}
	065 Compare X19, 0
	066 JumpIfNotEqual {81}
	067 Compare X19, 0
	068 JumpIfEqual {90}
	069 Move W1, 91
	070 Move X0, X19
	071 Move X2, X31
	072 Call StringBuilder.Append, X0, X1
	073 Move X1, [X20+40]
	074 Move X0, X19
	075 Move X2, X31
	076 Call StringBuilder.Append, X0, X1
	077 Move W1, 93
	078 Move X0, X19
	079 Move X2, X31
	080 Call StringBuilder.Append, X0, X1
	081 Move X8, [X19]
	082 Move X0, X19
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X2, [X8+360]
	086 Move X1, [X8+368]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 CallNoReturn X2
	090 Call 0x1C17F20

Method: System.String ToDisplayString(UnityEngine.InputSystem.InputBinding/DisplayStringOptions options = 0, UnityEngine.InputSystem.InputControl control = null)

Disassembly:
	0x037539F8 ADD W8, W8, 0x1
	0x037539FC CMP W8, W9
	0x03753A00 STR W8, [X0 + 0x54]
	0x03753A04 B.LT 0x37539B4
	0x03753A08 MOV W8, W31
	0x03753A0C B 0x3753A50
	0x03753A10 LDR X9, [X0 + 0x30]
	0x03753A14 CBZ X9, 0x3753A5C
	0x03753A18 LDR X9, [X9 + 0x18]
	0x03753A1C CBZ X9, 0x3753A5C
	0x03753A20 LDR W10, [X0 + 0x78]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X31
	004 Move X4, X2
	005 Move W3, W1
	006 Add X1, X31, 24
	007 Add X2, X31, 8
	008 Move [X31+8], X31
	009 Call InputBinding.ToDisplayString, X0, X1, X2, X3, X4
	010 Move X30, [X31+16]
	011 Add X31, X31, 32
	012 Return X0

Method: System.String ToDisplayString(out System.String deviceLayoutName, out System.String controlPath, UnityEngine.InputSystem.InputBinding/DisplayStringOptions options = 0, UnityEngine.InputSystem.InputControl control = null)

Disassembly:
	0x03753A24 LDR W11, [X9 + 0x18]
	0x03753A28 ADD W8, W10, W8
	0x03753A2C CMP W8, W11
	0x03753A30 B.CS 0x3753A60
	0x03753A34 ADD X8, X9, W8, 0x3, SXTW
	0x03753A38 LDRB W10, [X0 + 0x5D]
	0x03753A3C LDR X9, [X8 + 0x20]
	0x03753A40 MOVZ W8, 0x1
	0x03753A44 STR W8, [X0 + 0x10]
	0x03753A48 STP W10, W31, [X0 + 0x18]
	0x03753A4C STR X9, [X0 + 0x20]
	0x03753A50 MOV W0, W8
	0x03753A54 LDR X30, [X31], #0x10
	0x03753A58 RET
	0x03753A5C BL 0x1C16F20
	0x03753A60 BL 0x1C16F28
	0x03753A64 LDP X8, X1, [X0 + 0x18]
	0x03753A68 MOV X0, X8
	0x03753A6C RET
	0x03753A70 STP X30, X19, [X31 - 0x10]!
	0x03753A74 ADRP X0, 0x9A0000
	0x03753A78 LDR X0, [X0 + 0xB40]
	0x03753A7C BL 0x1C16D08
	0x03753A80 BL 0x1C16F10
	0x03753A84 MOV X1, X31
	0x03753A88 MOV X19, X0
	0x03753A8C BL 0x3380310
	0x03753A90 ADRP X0, 0x9F2000
	0x03753A94 LDR X0, [X0 + 0xDD0]
	0x03753A98 BL 0x1C16D08
	0x03753A9C MOV X1, X0
	0x03753AA0 MOV X0, X19
	0x03753AA4 BL 0x1C16DEC
	0x03753AA8 SUB X31, X31, 0x30
	0x03753AAC STP X30, X21, [X31 + 0x10]
	0x03753AB0 STP X20, X19, [X31 + 0x20]
	0x03753AB4 ADRP X21, 0xC8D000
	0x03753AB8 ADRP X20, 0x9F2000
	0x03753ABC LDRB W8, [X21 + 0xDC7]
	0x03753AC0 LDR X20, [X20 + 0xDD8]
	0x03753AC4 MOV X19, X0
	0x03753AC8 TBNZ X8, 0x0, 0x3753AE0
	0x03753ACC ADRP X0, 0x9F2000
	0x03753AD0 LDR X0, [X0 + 0xDD8]
	0x03753AD4 BL 0x1C16CF4
	0x03753AD8 MOVZ W8, 0x1
	0x03753ADC STRB W8, [X21 + 0xDC7]
	0x03753AE0 LDUR V0, [X19 + 0x18]
	0x03753AE4 LDR X0, [X20]
	0x03753AE8 ADD X1, X31, 0x0
	0x03753AEC STR V0, [X31]
	0x03753AF0 BL 0x1C16E04
	0x03753AF4 LDP X20, X19, [X31 + 0x20]
	0x03753AF8 LDP X30, X21, [X31 + 0x10]
	0x03753AFC ADD X31, X31, 0x30
	0x03753B00 RET
	0x03753B04 SUB X31, X31, 0x30
	0x03753B08 STR X30, [X31 + 0x10]
	0x03753B0C STP X20, X19, [X31 + 0x20]
	0x03753B10 ADRP X20, 0xC8D000
	0x03753B14 LDRB W8, [X20 + 0xDC8]
	0x03753B18 MOV X19, X0
	0x03753B1C TBNZ X8, 0x0, 0x3753B34
	0x03753B20 ADRP X0, 0x9F2000
	0x03753B24 LDR X0, [X0 + 0xDC0]
	0x03753B28 BL 0x1C16CF4
	0x03753B2C MOVZ W8, 0x1
	0x03753B30 STRB W8, [X20 + 0xDC8]
	0x03753B34 LDR W8, [X19 + 0x10]
	0x03753B38 ADDS W31, W8, 0x2
	0x03753B3C B.NE 0x3753B60
	0x03753B40 LDR W20, [X19 + 0x28]
	0x03753B44 MOV X0, X31
	0x03753B48 BL 0x33C151C
	0x03753B4C CMP W20, W0
	0x03753B50 B.NE 0x3753B60
	0x03753B54 STR W31, [X19 + 0x10]
	0x03753B58 MOV X20, X19
	0x03753B5C B 0x3753B8C
	0x03753B60 ADRP X8, 0x9F2000
	0x03753B64 LDR X8, [X8 + 0xDC0]
	0x03753B68 LDR X0, [X8]
	0x03753B6C BL 0x1C16F10
	0x03753B70 MOV X1, X31
	0x03753B74 MOV X20, X0
	0x03753B78 BL 0x33BDD8C
	0x03753B7C MOV X0, X31
	0x03753B80 STR W31, [X20 + 0x10]
	0x03753B84 BL 0x33C151C
	0x03753B88 STR W0, [X20 + 0x28]
	0x03753B8C LDR V0, [X19 + 0x4]
	0x03753B90 MOV X0, X20
	0x03753B94 LDR X30, [X31 + 0x10]
	0x03753B98 STR V0, [X31]
	0x03753B9C STR V0, [X20 + 0x3]
	0x03753BA0 LDP X20, X19, [X31 + 0x20]
	0x03753BA4 ADD X31, X31, 0x30
	0x03753BA8 RET
	0x03753BAC B 0x3753B04
	0x03753BB0 LDR W0, [X0 + 0x28]
	0x03753BB4 RET
	0x03753BB8 LDR W0, [X0 + 0x2C]
	0x03753BBC RET
	0x03753BC0 LDR W0, [X0 + 0x34]
	0x03753BC4 RET
	0x03753BC8 LDR W0, [X0 + 0x38]
	0x03753BCC RET
	0x03753BD0 STR X30, [X31 - 0x20]!
	0x03753BD4 STP X20, X19, [X31 + 0x10]
	0x03753BD8 MOV X20, X0
	0x03753BDC MOV X19, X0
	0x03753BE0 LDR X0, [X20 + 0x20]!
	0x03753BE4 CBZ X0, 0x3753C0C
	0x03753BE8 MOVZ W1, 0x4
	0x03753BEC MOV X2, X31
	0x03753BF0 BL 0x3C00054
	0x03753BF4 MOVI V0.2D, 0x0
	0x03753BF8 STR X31, [X19 + 0x98]
	0x03753BFC STR X31, [X20 + 0x40]
	0x03753C00 STP V0, V0, [X20 + 0x20]
	0x03753C04 STP V0, V0, [X20]
	0x03753C08 STP V0, V0, [X19 + 0x70]
	0x03753C0C LDP X20, X19, [X31 + 0x10]
	0x03753C10 LDR X30, [X31], #0x20
	0x03753C14 RET
	0x03753C18 STP X30, X21, [X31 - 0x20]!
	0x03753C1C STP X20, X19, [X31 + 0x10]
	0x03753C20 ORN W8, W31, W2, 0x0
	0x03753C24 AND W8, W8, 0x1
	0x03753C28 STRB W8, [X0 + 0x118]
	0x03753C2C CBZ X1, 0x3753CFC
	0x03753C30 MOV X21, X1
	0x03753C34 LDR X8, [X21 + 0x10]!
	0x03753C38 MOV X20, X0
	0x03753C3C MOV X19, X1
	0x03753C40 STR X8, [X0 + 0x10]
	0x03753C44 LDR X0, [X21 + 0x10]
	0x03753C48 STR X0, [X20 + 0xA0]
	0x03753C4C LDR X9, [X21 + 0x18]
	0x03753C50 STR X9, [X20 + 0xA8]
	0x03753C54 LDR X9, [X21 + 0x20]
	0x03753C58 STR X9, [X20 + 0xB0]
	0x03753C5C LDR X9, [X21 + 0x8]
	0x03753C60 STR X9, [X20 + 0x18]
	0x03753C64 TBZ X2, 0x0, 0x3753CCC
	0x03753C68 CBZ X8, 0x3753C84
	0x03753C6C LDR W2, [X19 + 0x48]
	0x03753C70 MOV X0, X8
	0x03753C74 MOV W1, W31
	0x03753C78 MOV X3, X31
	0x03753C7C BL 0x339FA34
	0x03753C80 LDR X0, [X20 + 0xA0]
	0x03753C84 CBZ X0, 0x3753C98
	0x03753C88 LDR W2, [X19 + 0x50]
	0x03753C8C MOV W1, W31
	0x03753C90 MOV X3, X31
	0x03753C94 BL 0x339FA34
	0x03753C98 LDR X0, [X20 + 0xA8]
	0x03753C9C CBZ X0, 0x3753CB0
	0x03753CA0 LDR W2, [X19 + 0x38]
	0x03753CA4 MOV W1, W31
	0x03753CA8 MOV X3, X31
	0x03753CAC BL 0x339FA34
	0x03753CB0 LDR X0, [X20 + 0xB0]
	0x03753CB4 CBZ X0, 0x3753CC8
	0x03753CB8 LDR W2, [X19 + 0x5C]
	0x03753CBC MOV W1, W31
	0x03753CC0 MOV X3, X31
	0x03753CC4 BL 0x339FA34
	0x03753CC8 LDR X9, [X20 + 0x18]
	0x03753CCC CBZ X9, 0x3753CE4
	0x03753CD0 LDR W2, [X19 + 0x58]
	0x03753CD4 MOV X0, X9
	0x03753CD8 MOV W1, W31
	0x03753CDC MOV X3, X31
	0x03753CE0 BL 0x339FA34
	0x03753CE4 LDP X20, X19, [X31 + 0x10]
	0x03753CE8 MOVI V0.2D, 0x0
	0x03753CEC STR X31, [X21 + 0x20]
	0x03753CF0 STP V0, V0, [X21]
	0x03753CF4 LDP X30, X21, [X31], #0x20
	0x03753CF8 RET
	0x03753CFC BL 0x1C16F20
	0x03753D00 STP X29, X30, [X31 - 0x60]!
	0x03753D04 STP X28, X27, [X31 + 0x10]
	0x03753D08 STP X26, X25, [X31 + 0x20]
	0x03753D0C STP X24, X23, [X31 + 0x30]
	0x03753D10 STP X22, X21, [X31 + 0x40]
	0x03753D14 STP X20, X19, [X31 + 0x50]
	0x03753D18 SUB X31, X31, 0x4F0
	0x03753D1C STR X0, [X31 + 0xD0]
	0x03753D20 MRS X8, 0xC000
	0x03753D24 STR X8, [X31 + 0x20]
	0x03753D28 LDR X8, [X8 + 0x28]
	0x03753D2C ADRP X19, 0xC8D000
	0x03753D30 MOV X24, X1
	0x03753D34 STR X8, [X31 + 0x4E8]
	0x03753D38 LDRB W8, [X19 + 0xDC9]
	0x03753D3C TBNZ X8, 0x0, 0x3753E2C
	0x03753D40 ADRP X0, 0x9F2000
	0x03753D44 LDR X0, [X0 + 0xDE0]
	0x03753D48 BL 0x1C16CF4
	0x03753D4C ADRP X0, 0x9F2000
	0x03753D50 LDR X0, [X0 + 0xDE8]
	0x03753D54 BL 0x1C16CF4
	0x03753D58 ADRP X0, 0x9F2000
	0x03753D5C LDR X0, [X0 + 0xDF0]
	0x03753D60 BL 0x1C16CF4
	0x03753D64 ADRP X0, 0x9F2000
	0x03753D68 LDR X0, [X0 + 0xDF8]
	0x03753D6C BL 0x1C16CF4
	0x03753D70 ADRP X0, 0x9F2000
	0x03753D74 LDR X0, [X0 + 0xE00]
	0x03753D78 BL 0x1C16CF4
	0x03753D7C ADRP X0, 0x9C8000
	0x03753D80 LDR X0, [X0 + 0xE58]
	0x03753D84 BL 0x1C16CF4
	0x03753D88 ADRP X0, 0x9C8000
	0x03753D8C LDR X0, [X0 + 0xE50]
	0x03753D90 BL 0x1C16CF4
	0x03753D94 ADRP X0, 0x9F2000
	0x03753D98 LDR X0, [X0 + 0x678]
	0x03753D9C BL 0x1C16CF4
	0x03753DA0 ADRP X0, 0x9F2000
	0x03753DA4 LDR X0, [X0 + 0xE08]
	0x03753DA8 BL 0x1C16CF4
	0x03753DAC ADRP X0, 0x9C8000
	0x03753DB0 LDR X0, [X0 + 0xC30]
	0x03753DB4 BL 0x1C16CF4
	0x03753DB8 ADRP X0, 0x9C8000
	0x03753DBC LDR X0, [X0 + 0xC40]
	0x03753DC0 BL 0x1C16CF4
	0x03753DC4 ADRP X0, 0x9F2000
	0x03753DC8 LDR X0, [X0 + 0xE10]
	0x03753DCC BL 0x1C16CF4
	0x03753DD0 ADRP X0, 0x9C8000
	0x03753DD4 LDR X0, [X0 + 0x270]
	0x03753DD8 BL 0x1C16CF4
	0x03753DDC ADRP X0, 0x9F1000
	0x03753DE0 LDR X0, [X0 + 0xFB8]
	0x03753DE4 BL 0x1C16CF4
	0x03753DE8 ADRP X0, 0x9F1000
	0x03753DEC LDR X0, [X0 + 0xF58]
	0x03753DF0 BL 0x1C16CF4
	0x03753DF4 ADRP X0, 0x9F1000
	0x03753DF8 LDR X0, [X0 + 0xF60]
	0x03753DFC BL 0x1C16CF4
	0x03753E00 ADRP X0, 0x9F1000
	0x03753E04 LDR X0, [X0 + 0xFC0]
	0x03753E08 BL 0x1C16CF4
	0x03753E0C ADRP X0, 0x9F2000
	0x03753E10 LDR X0, [X0 + 0x70]
	0x03753E14 BL 0x1C16CF4
	0x03753E18 ADRP X0, 0x9F2000
	0x03753E1C LDR X0, [X0 + 0xE18]
	0x03753E20 BL 0x1C16CF4
	0x03753E24 MOVZ W8, 0x1
	0x03753E28 STRB W8, [X19 + 0xDC9]
	0x03753E2C STR W31, [X31 + 0x40C]
	0x03753E30 STR X31, [X31 + 0x388]
	0x03753E34 STR X31, [X31 + 0x380]
	0x03753E38 STR X31, [X31 + 0x390]
	0x03753E3C STR X31, [X31 + 0x358]
	0x03753E40 STR X31, [X31 + 0x350]
	0x03753E44 STR X31, [X31 + 0x2F8]
	0x03753E48 STR X31, [X31 + 0x2F0]
	0x03753E4C ADRP X8, 0x9C8000
	0x03753E50 LDR X8, [X8 + 0x270]
	0x03753E54 MOVI V0.2D, 0x0
	0x03753E58 STR V0, [X31 + 0x48]
	0x03753E5C STR V0, [X31 + 0x47]
	0x03753E60 LDR X0, [X8]
	0x03753E64 STR V0, [X31 + 0x46]
	0x03753E68 STR V0, [X31 + 0x45]
	0x03753E6C STR V0, [X31 + 0x44]
	0x03753E70 STR V0, [X31 + 0x43]
	0x03753E74 STR V0, [X31 + 0x42]
	0x03753E78 STR V0, [X31 + 0x41]
	0x03753E7C STP V0, V0, [X31 + 0x3E0]
	0x03753E80 STP V0, V0, [X31 + 0x3C0]
	0x03753E84 STP V0, V0, [X31 + 0x3A0]
	0x03753E88 STP V0, V0, [X31 + 0x360]
	0x03753E8C STP V0, V0, [X31 + 0x330]
	0x03753E90 STP V0, V0, [X31 + 0x310]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X24, 0xC8E000
	012 Move W8, [X24+3517]
	013 Move X19, X4
	014 Move W21, W3
	015 Move X22, X2
	016 Move X23, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {45}
	022 Move X0, 0x9A1000
	023 Move X0, [X0+3584]
	024 Call 0x1C17CF4
	025 Move X0, 0x9F3000
	026 Move X0, [X0+3408]
	027 Call 0x1C17CF4
	028 Move X0, 0x9F3000
	029 Move X0, [X0+3416]
	030 Call 0x1C17CF4
	031 Move X0, 0x9A1000
	032 Move X0, [X0+3608]
	033 Call 0x1C17CF4
	034 Move X0, 0x9A3000
	035 Move X0, [X0+632]
	036 Call 0x1C17CF4
	037 Move X0, 0x9A1000
	038 Move X0, [X0+3544]
	039 Call 0x1C17CF4
	040 Move X0, 0x9F3000
	041 Move X0, [X0+3424]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X24+3517], W8
	045 Move W8, [X20+56]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 4
	048 Compare TEMP, 4
	049 JumpIfEqual {112}
	050 NotImplemented "Instruction RBIT not yet implemented."
	051 Move W9, 6
	052 NotImplemented "Instruction BIC not yet implemented."
	053 Move TEMP, X21
	054 And TEMP, TEMP, 8
	055 Compare TEMP, 8
	056 JumpIfEqual {60}
	057 Move X0, [X20+64]
	058 Compare X0, 0
	059 JumpIfNotEqual {61}
	060 Move X0, [X20+16]
	061 Move X1, X23
	062 Move X2, X22
	063 Move X4, X19
	064 Move X5, X31
	065 Call InputControlPath.ToHumanReadableString, X0, X1, X2, X3, X4
	066 Move X8, [X20+72]
	067 Move X19, X0
	068 Compare X8, 0
	069 JumpIfNotEqual {71}
	070 Move X8, [X20+24]
	071 Move X0, X8
	072 Move X1, X31
	073 Call String.IsNullOrEmpty, X0
	074 Move TEMP, X21
	075 And TEMP, TEMP, 4
	076 Compare TEMP, 4
	077 JumpIfEqual {119}
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {119}
	082 Move X8, 0x9A3000
	083 Move X8, [X8+632]
	084 Move X0, [X20+72]
	085 Move X8, [X8]
	086 Move X8, [X8+184]
	087 Compare X0, 0
	088 JumpIfNotEqual {90}
	089 Move X0, [X20+24]
	090 Move X23, [X8]
	091 Move X1, X31
	092 Call NameAndParameters.ParseMultiple, X0
	093 Compare X0, 0
	094 JumpIfEqual {268}
	095 Move X10, 0x9F3000
	096 Move X8, [X0]
	097 Move X10, [X10+3408]
	098 Move X20, X0
	099 NotImplemented "Instruction LDRH not yet implemented."
	100 Move X1, [X10]
	101 Compare X9, 0
	102 JumpIfEqual {109}
	103 Move X10, [X8+176]
	104 Add X10, X10, 8
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Subtract X9, X9, 1
	108 Add X10, X10, 16
	109 Move X0, X20
	110 Move W2, W31
	111 Call 0x1C5D788
	112 Move [X23], X31
	113 Move [X22], X31
	114 Move X8, 0x9A3000
	115 Move X8, [X8+632]
	116 Move X8, [X8]
	117 Move X8, [X8+184]
	118 Move X19, [X8]
	119 Move X0, X19
	120 Move X20, [X31+96]
	121 Move X19, [X31+104]
	122 Move X22, [X31+80]
	123 Move X21, [X31+88]
	124 Move X24, [X31+64]
	125 Move X23, [X31+72]
	126 Move X26, [X31+48]
	127 Move X25, [X31+56]
	128 Move X30, [X31+32]
	129 Add X31, X31, 112
	130 Return X0
	131 NotImplemented "Instruction LDRSW not yet implemented."
	132 Add X8, X8, X9
	133 Add X0, X8, 312
	134 Move X8, [X0]
	135 Move X1, [X0+8]
	136 Move X0, X20
	137 NotImplemented "Instruction BLR not yet implemented."
	138 Move X24, 0x9A1000
	139 Move X25, 0x9F3000
	140 Move X26, 0x9F3000
	141 Move X24, [X24+3608]
	142 Move X25, [X25+3416]
	143 Move X26, [X26+3424]
	144 Move X20, X0
	145 Move X22, X23
	146 Move X21, X22
	147 Compare X20, 0
	148 JumpIfEqual {266}
	149 Move X8, [X20]
	150 Move X1, [X24]
	151 NotImplemented "Instruction LDRH not yet implemented."
	152 Compare X9, 0
	153 JumpIfEqual {160}
	154 Move X10, [X8+176]
	155 Add X10, X10, 8
	156 NotImplemented "Instruction LDUR not yet implemented."
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Subtract X9, X9, 1
	159 Add X10, X10, 16
	160 Move X0, X20
	161 Move W2, W31
	162 Call 0x1C5D788
	163 NotImplemented "Instruction LDRSW not yet implemented."
	164 Add X8, X8, X9
	165 Add X0, X8, 312
	166 Move X8, [X0]
	167 Move X1, [X0+8]
	168 Move X0, X20
	169 NotImplemented "Instruction BLR not yet implemented."
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {219}
	174 Move X8, [X20]
	175 Move X1, [X25]
	176 NotImplemented "Instruction LDRH not yet implemented."
	177 Compare X9, 0
	178 JumpIfEqual {185}
	179 Move X10, [X8+176]
	180 Add X10, X10, 8
	181 NotImplemented "Instruction LDUR not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Subtract X9, X9, 1
	184 Add X10, X10, 16
	185 Move X0, X20
	186 Move W2, W31
	187 Call 0x1C5D788
	188 NotImplemented "Instruction LDRSW not yet implemented."
	189 Add X8, X8, X9
	190 Add X0, X8, 312
	191 Move X9, [X0]
	192 Move X1, [X0+8]
	193 Add X8, X31, 8
	194 Move X0, X20
	195 NotImplemented "Instruction BLR not yet implemented."
	196 Move X0, [X31+8]
	197 Move X1, X31
	198 Call InputInteraction.GetDisplayName, X0
	199 Move X22, X0
	200 Move X1, X31
	201 Call String.IsNullOrEmpty, X0
	202 Move TEMP, X0
	203 And TEMP, TEMP, 1
	204 Compare TEMP, 1
	205 JumpIfEqual {147}
	206 Move X0, X21
	207 Move X1, X31
	208 Call String.IsNullOrEmpty, X0
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfEqual {146}
	213 Move X1, [X26]
	214 Move X0, X21
	215 Move X2, X22
	216 Move X3, X31
	217 Call String.Concat, X0, X1, X2
	218 Move X22, X0
	219 Move X22, X31
	220 Move W23, 11
	221 Compare X20, 0
	222 JumpIfEqual {246}
	223 Move X10, 0x9A1000
	224 Move X8, [X20]
	225 Move X10, [X10+3584]
	226 NotImplemented "Instruction LDRH not yet implemented."
	227 Move X1, [X10]
	228 Compare X9, 0
	229 JumpIfEqual {236}
	230 Move X10, [X8+176]
	231 Add X10, X10, 8
	232 NotImplemented "Instruction LDUR not yet implemented."
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Subtract X9, X9, 1
	235 Add X10, X10, 16
	236 Move X0, X20
	237 Move W2, W31
	238 Call 0x1C5D788
	239 NotImplemented "Instruction LDRSW not yet implemented."
	240 Add X8, X8, X9
	241 Add X0, X8, 312
	242 Move X8, [X0]
	243 Move X1, [X0+8]
	244 Move X0, X20
	245 NotImplemented "Instruction BLR not yet implemented."
	246 Compare X22, 0
	247 JumpIfNotEqual {269}
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Compare W23, 0
	250 JumpIfNotEqual {119}
	251 Move X0, X21
	252 Move X1, X31
	253 Call String.IsNullOrEmpty, X0
	254 Move TEMP, X0
	255 And TEMP, TEMP, 1
	256 Compare TEMP, 1
	257 JumpIfEqual {119}
	258 Move X8, 0x9A1000
	259 Move X8, [X8+3544]
	260 Move X0, X21
	261 Move X2, X19
	262 Move X3, X31
	263 Move X1, [X8]
	264 Call String.Concat, X0, X1, X2
	265 Move X19, X0
	266 Move X21, X23
	267 Call 0x1C17F20
	268 Call 0x1C17F20
	269 Move X0, X22
	270 Call 0x1C17F18
	271 Move X23, X0
	272 NotImplemented "Instruction CMP not yet implemented."
	273 Move X0, X23
	274 Call 0x3EB2AD0
	275 Move X22, [X0]
	276 Call 0x3EB2AE0
	277 Move W23, W31
	278 Compare X20, 0
	279 JumpIfNotEqual {223}
	280 Move X22, X31
	281 Move X23, X0
	282 Compare X20, 0
	283 JumpIfEqual {307}
	284 Move X10, 0x9A1000
	285 Move X8, [X20]
	286 Move X10, [X10+3584]
	287 NotImplemented "Instruction LDRH not yet implemented."
	288 Move X1, [X10]
	289 Compare X9, 0
	290 JumpIfEqual {297}
	291 Move X10, [X8+176]
	292 Add X10, X10, 8
	293 NotImplemented "Instruction LDUR not yet implemented."
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Subtract X9, X9, 1
	296 Add X10, X10, 16
	297 Move X0, X20
	298 Move W2, W31
	299 Call 0x1C5D788
	300 NotImplemented "Instruction LDRSW not yet implemented."
	301 Add X8, X8, X9
	302 Add X0, X8, 312
	303 Move X8, [X0]
	304 Move X1, [X0+8]
	305 Move X0, X20
	306 NotImplemented "Instruction BLR not yet implemented."
	307 Compare X22, 0
	308 JumpIfNotEqual {311}
	309 Move X0, X23
	310 Call 0x1D2D690
	311 Move X0, X22
	312 Call 0x1C17F18
	313 Call 0x1991590

Method: System.Boolean TriggersAction(UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x03748D00 MOV X19, X0
	0x03748D04 ADRP X0, 0x9FD000
	0x03748D08 LDR X0, [X0 + 0xA18]
	0x03748D0C BL 0x1C16D08
	0x03748D10 MOV X1, X0
	0x03748D14 MOV X0, X19
	0x03748D18 MOV X2, X31
	0x03748D1C BL 0x337DF1C
	0x03748D20 ADRP X0, 0x9FD000
	0x03748D24 LDR X0, [X0 + 0xA20]
	0x03748D28 BL 0x1C16D08
	0x03748D2C MOV X1, X0
	0x03748D30 MOV X0, X19
	0x03748D34 BL 0x1C16DEC
	0x03748D38 BL 0x1C16F28
	0x03748D3C STP X30, X21, [X31 - 0x20]!
	0x03748D40 STP X20, X19, [X31 + 0x10]
	0x03748D44 MOV X21, X1
	0x03748D48 MOV X20, X0
	0x03748D4C MOV X19, X8
	0x03748D50 BL 0x3748BF0
	0x03748D54 TBZ X0, 0x0, 0x3748DAC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {28}
	006 Move X20, X0
	007 Move X19, X1
	008 Move X0, [X1+16]
	009 Move X1, [X20+48]
	010 Move W2, 3
	011 Move X3, X31
	012 Call String.Compare, X0, X1, X2
	013 Compare W0, 0
	014 JumpIfEqual {23}
	015 Move X0, [X20+48]
	016 Move X1, [X19+40]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X2, X31
	020 Move X30, [X31+32]
	021 Call String.op_Equality, X0, X1
	022 Return X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move W0, 1
	026 Move X30, [X31+32]
	027 Return X0
	028 Call 0x1C17F20

Method: System.Boolean Matches(UnityEngine.InputSystem.InputBinding binding)

Disassembly:
	0x03753E94 STR V0, [X31 + 0x30]
	0x03753E98 STR V0, [X31 + 0x4D]

ISIL:
	001 Move W2, W31

Method: System.Boolean Matches(ref UnityEngine.InputSystem.InputBinding binding, UnityEngine.InputSystem.InputBinding/MatchOptions options = 0)

Disassembly:
	0x03753E9C STR V0, [X31 + 0x4C]
	0x03753EA0 STP V0, V0, [X31 + 0x2D0]
	0x03753EA4 STP V0, V0, [X31 + 0x2B0]
	0x03753EA8 STP V0, V0, [X31 + 0x290]
	0x03753EAC STP V0, V0, [X31 + 0x270]
	0x03753EB0 STR V0, [X31 + 0x4B]
	0x03753EB4 STR V0, [X31 + 0x4A]
	0x03753EB8 STR V0, [X31 + 0x49]
	0x03753EBC STR W31, [X31 + 0x268]
	0x03753EC0 LDR W8, [X0 + 0xE0]
	0x03753EC4 CBNZ W8, 0x3753ECC
	0x03753EC8 BL 0x1C16DFC
	0x03753ECC MOV X0, X31
	0x03753ED0 BL 0x377158C
	0x03753ED4 CBZ X24, 0x37550B0
	0x03753ED8 LDP X9, X10, [X24 + 0x28]
	0x03753EDC CBZ X10, 0x3753EEC
	0x03753EE0 LDR W8, [X10 + 0x18]
	0x03753EE4 STR W8, [X31 + 0x9C]
	0x03753EE8 B 0x3753EF0
	0x03753EEC STR W31, [X31 + 0x9C]
	0x03753EF0 STR X9, [X31 + 0xA0]
	0x03753EF4 STR X10, [X31 + 0xE0]
	0x03753EF8 CBZ X9, 0x3753F00
	0x03753EFC LDR W9, [X9 + 0x18]
	0x03753F00 ADRP X19, 0x9C8000
	0x03753F04 LDR X19, [X19 + 0xE50]
	0x03753F08 LDR X25, [X31 + 0xD0]
	0x03753F0C MOVI V0.2D, 0x0
	0x03753F10 ADD X0, X31, 0x410
	0x03753F14 MOV X12, X25
	0x03753F18 LDP W8, W11, [X25 + 0x28]
	0x03753F1C LDP W10, W4, [X25 + 0x34]
	0x03753F20 LDR W5, [X12 + 0x8]!
	0x03753F24 MOV X13, X25
	0x03753F28 ADD W1, W8, 0x1
	0x03753F2C ADD W2, W11, W9
	0x03753F30 STR X12, [X31 + 0x48]
	0x03753F34 LDR W12, [X25]
	0x03753F38 STR W12, [X31 + 0x14]
	0x03753F3C LDR W6, [X13 + 0x4]!
	0x03753F40 STR X8, [X31 + 0x88]
	0x03753F44 LDR W8, [X31 + 0x9C]
	0x03753F48 STR V0, [X31 + 0x48]
	0x03753F4C STR X13, [X31 + 0x28]
	0x03753F50 STR V0, [X31 + 0x47]
	0x03753F54 ADD W3, W10, W8
	0x03753F58 STR V0, [X31 + 0x46]
	0x03753F5C STR V0, [X31 + 0x45]
	0x03753F60 STR V0, [X31 + 0x44]
	0x03753F64 STR V0, [X31 + 0x43]
	0x03753F68 STR V0, [X31 + 0x42]
	0x03753F6C STR V0, [X31 + 0x41]
	0x03753F70 STR W9, [X31 + 0x94]
	0x03753F74 STR W11, [X31 + 0xBC]
	0x03753F78 STR W10, [X31 + 0xDC]
	0x03753F7C STP W4, W6, [X31 + 0x18]
	0x03753F80 STR W5, [X31 + 0x10]
	0x03753F84 BL 0x3751F74
	0x03753F88 LDR X8, [X25 + 0x20]!
	0x03753F8C CBZ X8, 0x3753FAC
	0x03753F90 ADD X0, X31, 0x1D8
	0x03753F94 MOVZ W2, 0x80
	0x03753F98 MOV X1, X25
	0x03753F9C BL 0x3EB1AC0
	0x03753FA0 ADD X0, X31, 0x410

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0]
	007 Move W21, W2
	008 Move X20, X1
	009 Compare X0, 0
	010 JumpIfEqual {21}
	011 Move X1, [X20]
	012 Compare X1, 0
	013 JumpIfEqual {93}
	014 Move W2, 59
	015 Move X3, X31
	016 Call StringHelpers.CharacterSeparatedListsHaveAtLeastOneCommonElement, X0, X1, X2
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {93}
	021 Move X0, [X19+16]
	022 Compare X0, 0
	023 JumpIfEqual {34}
	024 Move X1, [X20+16]
	025 Compare X1, 0
	026 JumpIfEqual {93}
	027 Move W2, 59
	028 Move X3, X31
	029 Call StringHelpers.CharacterSeparatedListsHaveAtLeastOneCommonElement, X0, X1, X2
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {93}
	034 Move X0, [X19+48]
	035 Compare X0, 0
	036 JumpIfEqual {47}
	037 Move X1, [X20+48]
	038 Compare X1, 0
	039 JumpIfEqual {93}
	040 Move W2, 59
	041 Move X3, X31
	042 Call StringHelpers.CharacterSeparatedListsHaveAtLeastOneCommonElement, X0, X1, X2
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {93}
	047 Move X8, [X19+40]
	048 Compare X8, 0
	049 JumpIfEqual {70}
	050 Move X0, [X20+40]
	051 Move X1, X31
	052 Call String.IsNullOrEmpty, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {61}
	057 Move TEMP, X21
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {70}
	061 Move X0, [X19+40]
	062 Move X1, [X20+40]
	063 Move W2, 59
	064 Move X3, X31
	065 Call StringHelpers.CharacterSeparatedListsHaveAtLeastOneCommonElement, X0, X1, X2
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {93}
	070 Move X0, [X19+8]
	071 Move X1, X31
	072 Call String.IsNullOrEmpty, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {99}
	077 Move X0, X20
	078 Call InputBinding.get_id, X0
	079 Move X20, X0
	080 Move X0, X19
	081 Move X21, X1
	082 Call InputBinding.get_id, X0
	083 Move X2, X0
	084 Move X3, X1
	085 Move X0, X20
	086 Move X1, X21
	087 Move X4, X31
	088 Call Guid.op_Inequality, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {99}
	093 Move W0, W31
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Return X0
	099 Move W0, 1

