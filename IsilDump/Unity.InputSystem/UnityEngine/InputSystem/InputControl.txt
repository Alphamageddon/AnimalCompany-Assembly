Type: UnityEngine.InputSystem.InputControl

Method: System.String get_name()

Disassembly:
	0x03772E78 LDR X21, [X21 + 0xFE0]
	0x03772E7C MOV X19, X0
	0x03772E80 TBNZ X8, 0x0, 0x3772E98
	0x03772E84 ADRP X0, 0x9AC000

ISIL:
	001 Move X8, [X0+32]
	002 Move X1, [X0+40]
	003 Move X2, X31
	004 Move X0, X8
	005 Call InternedString.op_Implicit, X0
	006 Return X0

Method: System.String get_displayName()

Disassembly:
	0x03772E88 LDR X0, [X0 + 0xFE0]
	0x03772E8C BL 0x1C16CF4
	0x03772E90 MOVZ W8, 0x1
	0x03772E94 STRB W8, [X20 + 0xF1B]
	0x03772E98 LDR X8, [X21]
	0x03772E9C LDR X8, [X8 + 0xB8]
	0x03772EA0 LDRB W8, [X8]
	0x03772EA4 CBZ W8, 0x3772EC0
	0x03772EA8 LDR X8, [X19]
	0x03772EAC MOV X0, X19
	0x03772EB0 LDR X9, [X8 + 0x228]
	0x03772EB4 LDR X1, [X8 + 0x230]
	0x03772EB8 BLR X9
	0x03772EBC B 0x3772EC8
	0x03772EC0 CBZ X19, 0x3772ED8
	0x03772EC4 MOV W0, W31
	0x03772EC8 STR W0, [X19 + 0xD8]
	0x03772ECC LDP X20, X19, [X31 + 0x10]
	0x03772ED0 LDP X30, X21, [X31], #0x20
	0x03772ED4 RET
	0x03772ED8 BL 0x1C16F20
	0x03772EDC SUB X31, X31, 0x60

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+160]
	004 Move X19, X0
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {17}
	009 Move X8, [X19]
	010 Move X0, X19
	011 Move X9, [X8+536]
	012 Move X1, [X8+544]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move W8, [X19+160]
	015 Or W8, W8, 1
	016 Move [X19+160], W8
	017 Move X0, [X19+56]
	018 Compare X0, 0
	019 JumpIfNotEqual {23}
	020 Move X0, [X19+64]
	021 Compare X0, 0
	022 JumpIfEqual {26}
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return X0
	026 Move X0, [X19+32]
	027 Move X1, [X19+40]
	028 Move X2, X31
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Call InternedString.op_Implicit, X0
	032 Return X0

Method: System.Void set_displayName(System.String value)

Disassembly:
	0x03772F14 ADRP X0, 0x9AD000
	0x03772F18 LDR X0, [X0 + 0x58]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_shortDisplayName()

Disassembly:
	0x03772F1C BL 0x1C16CF4
	0x03772F20 ADRP X0, 0x9AD000
	0x03772F24 LDR X0, [X0 + 0x60]
	0x03772F28 BL 0x1C16CF4
	0x03772F2C MOVZ W8, 0x1
	0x03772F30 STRB W8, [X20 + 0xF1C]
	0x03772F34 STP X31, X31, [X31 + 0x18]
	0x03772F38 STR X31, [X31 + 0x28]
	0x03772F3C STP X31, X31, [X31 + 0x8]
	0x03772F40 LDR W8, [X19 + 0x98]
	0x03772F44 CMP W8, 0x1
	0x03772F48 B.LT 0x3772FC4
	0x03772F4C ADRP X23, 0x9AD000
	0x03772F50 ADRP X21, 0x9AD000
	0x03772F54 ADRP X22, 0x9AD000
	0x03772F58 ADRP X20, 0x9AD000
	0x03772F5C LDR X23, [X23 + 0x60]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+160]
	004 Move X19, X0
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {17}
	009 Move X8, [X19]
	010 Move X0, X19
	011 Move X9, [X8+536]
	012 Move X1, [X8+544]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move W8, [X19+160]
	015 Or W8, W8, 1
	016 Move [X19+160], W8
	017 Move X0, [X19+72]
	018 Compare X0, 0
	019 JumpIfNotEqual {21}
	020 Move X0, [X19+80]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return X0

Method: System.Void set_shortDisplayName(System.String value)

Disassembly:
	0x03772F60 LDR X21, [X21 + 0x50]
	0x03772F64 LDR X22, [X22 + 0x58]

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String get_path()

Disassembly:
	0x03772F68 LDR X20, [X20 + 0x48]
	0x03772F6C MOV X0, X19
	0x03772F70 BL 0x37720C4
	0x03772F74 LDR X9, [X23]
	0x03772F78 STP X0, X1, [X31 + 0x8]
	0x03772F7C ADD X8, X31, 0x18
	0x03772F80 ADD X0, X31, 0x8
	0x03772F84 MOV X1, X9
	0x03772F88 BL 0x24FD990
	0x03772F8C LDR X1, [X21]
	0x03772F90 ADD X0, X31, 0x18
	0x03772F94 BL 0x2BC496C
	0x03772F98 TBZ X0, 0x0, 0x3772FB8
	0x03772F9C LDR X1, [X22]
	0x03772FA0 ADD X0, X31, 0x18
	0x03772FA4 BL 0x2BC4998

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+48]
	006 Compare X0, 0
	007 JumpIfNotEqual {17}
	008 Move X0, [X19+32]
	009 Move X1, [X19+40]
	010 Move X20, [X19+128]
	011 Move X2, X31
	012 Call InternedString.op_Implicit, X0
	013 Move X1, X0
	014 Move X0, X20
	015 Call InputControlPath.Combine, X0, X1
	016 Move [X19+48], X0
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return X0

Method: System.String get_layout()

Disassembly:
	0x03773094 LDR X1, [X8]
	0x03773098 ADD X0, X31, 0x18
	0x0377309C BL 0x2BC4968
	0x037730A0 CBNZ X21, 0x37730AC

ISIL:
	001 Move X8, [X0+88]
	002 Move X1, [X0+96]
	003 Move X2, X31
	004 Move X0, X8
	005 Call InternedString.op_Implicit, X0
	006 Return X0

Method: System.String get_variants()

Disassembly:
	0x037730A4 MOV X0, X20
	0x037730A8 BL 0x1D2C690
	0x037730AC MOV X0, X21
	0x037730B0 BL 0x1C16F18

ISIL:
	001 Move X8, [X0+104]
	002 Move X1, [X0+112]
	003 Move X2, X31
	004 Move X0, X8
	005 Call InternedString.op_Implicit, X0
	006 Return X0

Method: UnityEngine.InputSystem.InputDevice get_device()

Disassembly:
	0x037730B4 BL 0x1990590
	0x037730B8 SUB X31, X31, 0x70

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: UnityEngine.InputSystem.InputControl get_parent()

Disassembly:
	0x037730BC STP X30, X23, [X31 + 0x40]
	0x037730C0 STP X22, X21, [X31 + 0x50]

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControl> get_children()

Disassembly:
	0x037730C4 STP X20, X19, [X31 + 0x60]
	0x037730C8 ADRP X21, 0xC6D000
	0x037730CC ADRP X20, 0x9AB000
	0x037730D0 LDRB W8, [X21 + 0xF1D]
	0x037730D4 LDR X20, [X20 + 0xFE0]
	0x037730D8 MOV X19, X0
	0x037730DC TBNZ X8, 0x0, 0x3773184
	0x037730E0 ADRP X0, 0x980000
	0x037730E4 LDR X0, [X0 + 0xA28]
	0x037730E8 BL 0x1C16CF4
	0x037730EC ADRP X0, 0x9AC000
	0x037730F0 LDR X0, [X0 + 0x48]
	0x037730F4 BL 0x1C16CF4
	0x037730F8 ADRP X0, 0x9AC000
	0x037730FC LDR X0, [X0 + 0x50]
	0x03773100 BL 0x1C16CF4
	0x03773104 ADRP X0, 0x9AC000
	0x03773108 LDR X0, [X0 + 0x58]
	0x0377310C BL 0x1C16CF4
	0x03773110 ADRP X0, 0x9A8000
	0x03773114 LDR X0, [X0 + 0xD28]
	0x03773118 BL 0x1C16CF4
	0x0377311C ADRP X0, 0x9AB000
	0x03773120 LDR X0, [X0 + 0xFE0]
	0x03773124 BL 0x1C16CF4
	0x03773128 ADRP X0, 0x9AC000
	0x0377312C LDR X0, [X0 + 0x60]
	0x03773130 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xC6E000
	006 Move W8, [X20+3857]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9D2000
	013 Move X0, [X0+3960]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3857], W8
	017 Move X8, [X19+120]
	018 Compare X8, 0
	019 JumpIfEqual {37}
	020 Move X9, 0x9D2000
	021 Move X9, [X9+3960]
	022 Move X1, [X8+336]
	023 Move W3, [X19+152]
	024 Move W2, [X19+156]
	025 Add X0, X31, 0
	026 Move X4, [X9]
	027 Move [X31], X31
	028 Move [X31+8], X31
	029 Call ReadOnlyArray`1<Object>..ctor, X0, X1, X2, X3
	030 Move X0, [X31]
	031 Move X1, [X31+8]
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Add X31, X31, 48
	036 Return X0
	037 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Utilities.InternedString> get_usages()

Disassembly:
	0x03773134 ADRP X0, 0x980000
	0x03773138 LDR X0, [X0 + 0xAC8]
	0x0377313C BL 0x1C16CF4
	0x03773140 ADRP X0, 0x9D3000
	0x03773144 LDR X0, [X0 + 0xBB0]
	0x03773148 BL 0x1C16CF4
	0x0377314C ADRP X0, 0x9D3000
	0x03773150 LDR X0, [X0 + 0xBB8]
	0x03773154 BL 0x1C16CF4
	0x03773158 ADRP X0, 0x9D3000
	0x0377315C LDR X0, [X0 + 0xBC0]
	0x03773160 BL 0x1C16CF4
	0x03773164 ADRP X0, 0x9D3000
	0x03773168 LDR X0, [X0 + 0xBC8]
	0x0377316C BL 0x1C16CF4
	0x03773170 ADRP X0, 0x9D3000
	0x03773174 LDR X0, [X0 + 0xBD0]
	0x03773178 BL 0x1C16CF4
	0x0377317C MOVZ W8, 0x1
	0x03773180 STRB W8, [X21 + 0xF1D]
	0x03773184 LDR X8, [X20]
	0x03773188 STP X31, X31, [X31 + 0x28]
	0x0377318C STR X31, [X31 + 0x38]
	0x03773190 STP X31, X31, [X31 + 0x18]
	0x03773194 LDR X8, [X8 + 0xB8]
	0x03773198 LDRB W8, [X8]
	0x0377319C CBZ W8, 0x3773388
	0x037731A0 LDR X8, [X19]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xC6E000
	006 Move W8, [X20+3858]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9D4000
	013 Move X0, [X0+2864]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3858], W8
	017 Move X8, [X19+120]
	018 Compare X8, 0
	019 JumpIfEqual {37}
	020 Move X9, 0x9D4000
	021 Move X9, [X9+2864]
	022 Move X1, [X8+320]
	023 Move W3, [X19+136]
	024 Move W2, [X19+140]
	025 Add X0, X31, 0
	026 Move X4, [X9]
	027 Move [X31], X31
	028 Move [X31+8], X31
	029 Call ReadOnlyArray`1<InternedString>..ctor, X0, X1, X2, X3
	030 Move X0, [X31]
	031 Move X1, [X31+8]
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Add X31, X31, 48
	036 Return X0
	037 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Utilities.InternedString> get_aliases()

Disassembly:
	0x037731A4 MOV X0, X19
	0x037731A8 LDR X9, [X8 + 0x228]
	0x037731AC LDR X1, [X8 + 0x230]
	0x037731B0 BLR X9
	0x037731B4 LDR W8, [X19 + 0xD8]
	0x037731B8 MOV X20, X0
	0x037731BC CMP W8, W20
	0x037731C0 B.EQ 0x3773310
	0x037731C4 ADRP X8, 0x980000
	0x037731C8 LDR X8, [X8 + 0xAC8]
	0x037731CC MOVZ W1, 0x7
	0x037731D0 LDR X0, [X8]
	0x037731D4 BL 0x1C16D6C
	0x037731D8 CBZ X0, 0x37733A0
	0x037731DC LDR W8, [X0 + 0x18]
	0x037731E0 MOV X21, X0
	0x037731E4 CBZ W8, 0x377339C
	0x037731E8 ADRP X8, 0x9D3000
	0x037731EC LDR X8, [X8 + 0xBB0]
	0x037731F0 MOV X2, X31
	0x037731F4 LDR X8, [X8]
	0x037731F8 STR X8, [X21 + 0x20]
	0x037731FC LDP X0, X1, [X19 + 0x20]
	0x03773200 BL 0x37577E0
	0x03773204 LDR W8, [X21 + 0x18]
	0x03773208 CMP W8, 0x1
	0x0377320C B.LS 0x377339C
	0x03773210 CMP W8, 0x2

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xC6E000
	006 Move W8, [X20+3859]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9D4000
	013 Move X0, [X0+2864]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3859], W8
	017 Move X8, [X19+120]
	018 Compare X8, 0
	019 JumpIfEqual {37}
	020 Move X9, 0x9D4000
	021 Move X9, [X9+2864]
	022 Move X1, [X8+312]
	023 Move W3, [X19+144]
	024 Move W2, [X19+148]
	025 Add X0, X31, 0
	026 Move X4, [X9]
	027 Move [X31], X31
	028 Move [X31+8], X31
	029 Call ReadOnlyArray`1<InternedString>..ctor, X0, X1, X2, X3
	030 Move X0, [X31]
	031 Move X1, [X31+8]
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Add X31, X31, 48
	036 Return X0
	037 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputStateBlock get_stateBlock()

Disassembly:
	0x03773214 STR X0, [X21 + 0x28]
	0x03773218 B.EQ 0x377339C
	0x0377321C ADRP X8, 0x9D3000

ISIL:
	001 Move X8, [X0+16]
	002 Move X1, [X0+24]
	003 Move X0, X8
	004 Return X0

Method: System.Boolean get_noisy()

Disassembly:
	0x03773220 LDR X8, [X8 + 0xBC0]
	0x03773224 MOV X0, X19
	0x03773228 LDR X8, [X8]

ISIL:
	001 Move W8, [X0+160]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

Method: System.Void set_noisy(System.Boolean value)

Disassembly:
	0x0377322C STR X8, [X21 + 0x30]
	0x03773230 BL 0x3771F68
	0x03773234 LDR W8, [X21 + 0x18]
	0x03773238 CMP W8, 0x3
	0x0377323C B.LS 0x377339C
	0x03773240 CMP W8, 0x4
	0x03773244 STR X0, [X21 + 0x38]
	0x03773248 B.EQ 0x377339C
	0x0377324C ADRP X8, 0x9D3000
	0x03773250 LDR X8, [X8 + 0xBC8]
	0x03773254 ADRP X23, 0x9A8000
	0x03773258 ADD X1, X31, 0x10
	0x0377325C LDR X8, [X8]
	0x03773260 STR X8, [X21 + 0x40]
	0x03773264 LDR W8, [X19 + 0xD8]
	0x03773268 LDR X23, [X23 + 0xD28]
	0x0377326C STR W8, [X31 + 0x10]
	0x03773270 LDR X0, [X23]
	0x03773274 BL 0x1C16E04
	0x03773278 MOV X22, X0
	0x0377327C LDR X0, [X23]
	0x03773280 ADD X1, X31, 0x8
	0x03773284 STR W20, [X31 + 0x8]
	0x03773288 BL 0x1C16E04
	0x0377328C ADRP X8, 0x9D3000
	0x03773290 LDR X8, [X8 + 0xBB8]
	0x03773294 MOV X2, X0
	0x03773298 MOV X1, X22
	0x0377329C MOV X3, X31
	0x037732A0 LDR X8, [X8]
	0x037732A4 MOV X0, X8
	0x037732A8 BL 0x3227BD4
	0x037732AC LDR W8, [X21 + 0x18]
	0x037732B0 CMP W8, 0x5
	0x037732B4 B.LS 0x377339C
	0x037732B8 CMP W8, 0x6
	0x037732BC STR X0, [X21 + 0x48]
	0x037732C0 B.EQ 0x377339C
	0x037732C4 ADRP X8, 0x9D3000
	0x037732C8 LDR X8, [X8 + 0xBD0]
	0x037732CC MOV X0, X21
	0x037732D0 MOV X1, X31
	0x037732D4 LDR X8, [X8]
	0x037732D8 STR X8, [X21 + 0x50]
	0x037732DC BL 0x32278CC
	0x037732E0 ADRP X8, 0x980000
	0x037732E4 LDR X8, [X8 + 0xA28]
	0x037732E8 MOV X21, X0
	0x037732EC LDR X8, [X8]
	0x037732F0 LDR W9, [X8 + 0xE0]
	0x037732F4 CBNZ W9, 0x3773300
	0x037732F8 MOV X0, X8
	0x037732FC BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC6E000
	007 Move W8, [X21+3860]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x9A9000
	015 Move X0, [X0+3392]
	016 Call 0x1C17CF4
	017 Move X0, 0x9A9000
	018 Move X0, [X0+3400]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3860], W8
	022 Move W8, [X19+160]
	023 Move TEMP, X20
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {57}
	027 Or W8, W8, 2
	028 Move X0, X19
	029 Move [X19+160], W8
	030 Call InputControl.get_children, X0
	031 Move X8, X1
	032 ShiftRight X8, 32
	033 And X8, X8, 0x7FFFFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X31], X0
	036 Move [X31+8], X1
	037 Move X20, 0x9A9000
	038 Move X20, [X20+3400]
	039 Move W19, W31
	040 Move X2, [X20]
	041 Add X0, X31, 0
	042 Move W1, W19
	043 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	044 Compare X0, 0
	045 JumpIfEqual {54}
	046 Move X2, [X20]
	047 Add X0, X31, 0
	048 Move W1, W19
	049 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {65}
	052 Move W1, 1
	053 Call InputControl.set_noisy, X0, X1
	054 Move W8, [X31+12]
	055 Add W19, W19, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 And W8, W8, 0xFFFFFFFD
	058 Move [X19+160], W8
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X30, [X31+16]
	062 Move X21, [X31+24]
	063 Add X31, X31, 48
	064 Return 
	065 Call 0x1C17F20

Method: System.Boolean get_synthetic()

Disassembly:
	0x03773300 MOV X0, X21
	0x03773304 MOV X1, X31
	0x03773308 BL 0x3C0649C

ISIL:
	001 Move W8, [X0+160]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Void set_synthetic(System.Boolean value)

Disassembly:
	0x0377330C STR W20, [X19 + 0xD8]
	0x03773310 LDR W8, [X19 + 0x98]
	0x03773314 CMP W8, 0x1
	0x03773318 B.LT 0x3773388
	0x0377331C MOV X0, X19
	0x03773320 BL 0x37720C4
	0x03773324 ADRP X8, 0x9AC000
	0x03773328 LDR X8, [X8 + 0x60]

ISIL:
	001 Move W8, [X0+160]
	002 And W31, W1, 1
	003 Move W9, 4
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFFB
	006 Or W8, W8, W9
	007 Move [X0+160], W8
	008 Return 

Method: UnityEngine.InputSystem.InputControl get_Item(System.String path)

Disassembly:
	0x0377332C STP X0, X1, [X31 + 0x18]
	0x03773330 ADD X0, X31, 0x18
	0x03773334 LDR X9, [X8]
	0x03773338 ADD X8, X31, 0x28
	0x0377333C MOV X1, X9
	0x03773340 BL 0x24FD990
	0x03773344 ADRP X19, 0x9AC000
	0x03773348 ADRP X20, 0x9AC000
	0x0377334C LDR X19, [X19 + 0x50]
	0x03773350 LDR X20, [X20 + 0x58]
	0x03773354 LDR X1, [X19]
	0x03773358 ADD X0, X31, 0x28
	0x0377335C BL 0x2BC496C
	0x03773360 TBZ X0, 0x0, 0x3773374
	0x03773364 LDR X1, [X20]
	0x03773368 ADD X0, X31, 0x28
	0x0377336C BL 0x2BC4998
	0x03773370 B 0x3773354
	0x03773374 ADRP X8, 0x9AC000
	0x03773378 LDR X8, [X8 + 0x48]
	0x0377337C ADD X0, X31, 0x28
	0x03773380 LDR X1, [X8]
	0x03773384 BL 0x2BC4968
	0x03773388 LDP X20, X19, [X31 + 0x60]
	0x0377338C LDP X22, X21, [X31 + 0x50]
	0x03773390 LDP X30, X23, [X31 + 0x40]
	0x03773394 ADD X31, X31, 0x70
	0x03773398 RET
	0x0377339C BL 0x1C16F28
	0x037733A0 BL 0x1C16F20
	0x037733A4 B 0x37733A8
	0x037733A8 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W2, W31
	005 Move X20, X1
	006 Move X19, X0
	007 Call InputControlPath.TryFindChild, X0, X1, X2
	008 Compare X0, 0
	009 JumpIfEqual {14}
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Return X0
	014 Move X0, 0x9D4000
	015 Move X0, [X0+2872]
	016 Call 0x1C17D08
	017 Move X1, X20
	018 Move X2, X19
	019 Move X3, X31
	020 Call String.Format, X0, X1, X2
	021 Move X19, X0
	022 Move X0, 0x984000
	023 Move X0, [X0+120]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X1, X19
	027 Move X2, X31
	028 Move X20, X0
	029 Call KeyNotFoundException..ctor, X0, X1
	030 Move X0, 0x9D4000
	031 Move X0, [X0+2880]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X20
	035 Call 0x1C17DEC

Method: System.Type get_valueType()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 get_valueSizeInBytes()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Single get_magnitude()

Disassembly:
	0x0377340C BL 0x1D2C690

ISIL:
No ISIL was generated
Method: System.String ToString()

Disassembly:
	0x0377343C ORR W8, W8, W9, 0x0
	0x03773440 STR W8, [X0 + 0xA0]
	0x03773444 RET
	0x03773448 LDRB W8, [X0 + 0xA0]
	0x0377344C UBFM W0, W8, 0x3, 0x3
	0x03773450 RET
	0x03773454 LDR W8, [X0 + 0xA0]
	0x03773458 ANDS W31, W1, 0x1
	0x0377345C MOVZ W9, 0x8
	0x03773460 CSEL W9, W9, W31, NE
	0x03773464 AND W8, W8, 0xFFFFFFF7
	0x03773468 ORR W8, W8, W9, 0x0
	0x0377346C STR W8, [X0 + 0xA0]
	0x03773470 RET
	0x03773474 LDRB W8, [X0 + 0xA0]
	0x03773478 UBFM W0, W8, 0x4, 0x4
	0x0377347C RET
	0x03773480 LDR W8, [X0 + 0xA0]
	0x03773484 ANDS W31, W1, 0x1
	0x03773488 MOVZ W9, 0x10
	0x0377348C CSEL W9, W9, W31, NE
	0x03773490 AND W8, W8, 0xFFFFFFEF
	0x03773494 ORR W8, W8, W9, 0x0
	0x03773498 STR W8, [X0 + 0xA0]
	0x0377349C RET
	0x037734A0 LDRB W8, [X0 + 0xA0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC6E000
	006 Move X21, 0x98A000
	007 Move W8, [X20+3861]
	008 Move X21, [X21+2440]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x98A000
	015 Move X0, [X0+2440]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3861], W8
	019 Move X0, [X19+88]
	020 Move X1, [X19+96]
	021 Move X2, X31
	022 Call InternedString.op_Implicit, X0
	023 Move X20, X0
	024 Move X0, X19
	025 Call InputControl.get_path, X0
	026 Move X1, [X21]
	027 Move X2, X0
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X3, X31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call String.Concat, X0, X1, X2
	035 Return X0

Method: System.String DebuggerDisplay()

Disassembly:
	0x037734A4 UBFM W0, W8, 0x6, 0x6
	0x037734A8 RET
	0x037734AC LDR W8, [X0 + 0xA0]
	0x037734B0 ANDS W31, W1, 0x1
	0x037734B4 MOVZ W9, 0x40
	0x037734B8 CSEL W9, W9, W31, NE
	0x037734BC AND W8, W8, 0xFFFFFFBF
	0x037734C0 ORR W8, W8, W9, 0x0
	0x037734C4 STR W8, [X0 + 0xA0]
	0x037734C8 RET
	0x037734CC STR X30, [X31 - 0x10]!
	0x037734D0 ADD X0, X0, 0xA8
	0x037734D4 MOV X1, X31
	0x037734D8 BL 0x3758800
	0x037734DC ORN W8, W31, W0, 0x0
	0x037734E0 AND W0, W8, 0x1
	0x037734E4 LDR X30, [X31], #0x10
	0x037734E8 RET
	0x037734EC SUB X31, X31, 0x30
	0x037734F0 STP X30, X21, [X31 + 0x10]
	0x037734F4 STP X20, X19, [X31 + 0x20]
	0x037734F8 ADRP X20, 0xC6D000
	0x037734FC LDRB W8, [X20 + 0xF1E]
	0x03773500 MOV X19, X0
	0x03773504 TBNZ X8, 0x0, 0x3773528
	0x03773508 ADRP X0, 0x9A8000
	0x0377350C LDR X0, [X0 + 0xD40]
	0x03773510 BL 0x1C16CF4
	0x03773514 ADRP X0, 0x9A8000
	0x03773518 LDR X0, [X0 + 0xD48]
	0x0377351C BL 0x1C16CF4
	0x03773520 MOVZ W8, 0x1
	0x03773524 STRB W8, [X20 + 0xF1E]
	0x03773528 MOV X0, X19
	0x0377352C BL 0x37720C4
	0x03773530 UBFM X8, X1, 0x20, 0x3F
	0x03773534 CMP W8, 0x1
	0x03773538 STP X0, X1, [X31]
	0x0377353C B.LT 0x3773574
	0x03773540 ADRP X21, 0x9A8000
	0x03773544 LDR X21, [X21 + 0xD48]
	0x03773548 MOV W20, W31
	0x0377354C LDR X2, [X21]
	0x03773550 ADD X0, X31, 0x0
	0x03773554 MOV W1, W20
	0x03773558 BL 0x24FDB3C
	0x0377355C CBZ X0, 0x37735A4
	0x03773560 BL 0x37734EC
	0x03773564 LDR W8, [X31 + 0xC]
	0x03773568 ADD W20, W20, 0x1
	0x0377356C CMP W20, W8
	0x03773570 B.LT 0x377354C
	0x03773574 LDR X8, [X19]
	0x03773578 MOV X0, X19
	0x0377357C LDR X9, [X8 + 0x208]
	0x03773580 LDR X1, [X8 + 0x210]
	0x03773584 BLR X9
	0x03773588 MOV X0, X19
	0x0377358C MOV X1, X31
	0x03773590 BL 0x377F584
	0x03773594 LDP X20, X19, [X31 + 0x20]
	0x03773598 LDP X30, X21, [X31 + 0x10]
	0x0377359C ADD X31, X31, 0x30
	0x037735A0 RET
	0x037735A4 BL 0x1C16F20
	0x037735A8 SUB X31, X31, 0x40
	0x037735AC STR X30, [X31 + 0x10]
	0x037735B0 STP X22, X21, [X31 + 0x20]
	0x037735B4 STP X20, X19, [X31 + 0x30]
	0x037735B8 ADRP X21, 0xC6D000
	0x037735BC ADRP X22, 0x9A8000
	0x037735C0 LDRB W8, [X21 + 0xF20]
	0x037735C4 LDR X22, [X22 + 0xD18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC6E000
	006 Move W8, [X20+3862]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9D4000
	013 Move X0, [X0+2896]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3862], W8
	017 Move X8, [X19+120]
	018 Compare X8, 0
	019 JumpIfEqual {45}
	020 Move W8, [X8+232]
	021 Add W31, W8, 1
	022 Move X0, [X19+88]
	023 Move X1, [X19+96]
	024 Move X2, X31
	025 Call InternedString.op_Implicit, X0
	026 Move X20, X0
	027 Move X0, X19
	028 Call InputControl.get_path, X0
	029 Move X21, X0
	030 Move X0, X19
	031 Call InputControlExtensions.ReadValueAsObject, X0
	032 Move X8, 0x9D4000
	033 Move X8, [X8+2896]
	034 Move X3, X0
	035 Move X0, [X8]
	036 Move X1, X20
	037 Move X2, X21
	038 Move X4, X31
	039 Call String.Format, X0, X1, X2, X3
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Call 0x1C17F20
	046 Move X20, X0
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X20
	049 Call 0x3EB2AD0
	050 Move X20, X0
	051 Move X0, 0x981000
	052 Move X0, [X0+2000]
	053 Call 0x1C17D08
	054 Move X8, [X20]
	055 Move X1, [X8]
	056 Call 0x1C18270
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {71}
	061 Call 0x3EB2AE0
	062 Move X8, [X19]
	063 Move X0, X19
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X2, [X8+360]
	067 Move X1, [X8+368]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 CallNoReturn X2
	071 Move W0, 8
	072 Call 0x3EB2AF0
	073 Move X8, [X20]
	074 Move [X0], X8
	075 Move X1, 0x742000
	076 Add X1, X1, 3672
	077 Move X2, X31
	078 Call 0x3EB2B00
	079 Move X20, X0
	080 Call 0x3EB2AE0
	081 Move X0, X20
	082 Call 0x1D2D690
	083 Call 0x1991590

Method: System.Single EvaluateMagnitude()

Disassembly:
	0x03773410 MOV X0, X19
	0x03773414 BL 0x1C16F18
	0x03773418 BL 0x1990590
	0x0377341C LDRB W8, [X0 + 0xA0]
	0x03773420 UBFM W0, W8, 0x5, 0x5
	0x03773424 RET
	0x03773428 LDR W8, [X0 + 0xA0]
	0x0377342C ANDS W31, W1, 0x1
	0x03773430 MOVZ W9, 0x20
	0x03773434 CSEL W9, W9, W31, NE
	0x03773438 AND W8, W8, 0xFFFFFFDF

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InputControl.GetDeviceIndex, X0
	005 Move X1, X31
	006 Call InputStateBuffers.GetFrontBufferForDevice, X0
	007 Move X8, [X19]
	008 Move X1, X0
	009 Move X0, X19
	010 Move X3, [X8+408]
	011 Move X2, [X8+416]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 CallNoReturn X3

Method: System.Single EvaluateMagnitude(System.Void* statePtr)

Disassembly:
	0x03773654 MOV W1, W19
	0x03773658 BL 0x37735A8

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Object ReadValueFromBufferAsObject(System.Void* buffer, System.Int32 bufferSize)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Object ReadValueFromStateAsObject(System.Void* statePtr)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void ReadValueFromStateIntoBuffer(System.Void* statePtr, System.Void* bufferPtr, System.Int32 bufferSize)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void WriteValueFromBufferIntoState(System.Void* bufferPtr, System.Int32 bufferSize, System.Void* statePtr)

Disassembly:
	0x0377365C LDR W8, [X31 + 0xC]
	0x03773660 ADD W20, W20, 0x1
	0x03773664 CMP W20, W8
	0x03773668 B.LT 0x3773640
	0x0377366C LDP X20, X19, [X31 + 0x30]
	0x03773670 LDP X22, X21, [X31 + 0x20]
	0x03773674 LDR X30, [X31 + 0x10]
	0x03773678 ADD X31, X31, 0x40
	0x0377367C RET
	0x03773680 BL 0x1C16F20
	0x03773684 STR D8, [X31 - 0x30]!
	0x03773688 STP X30, X21, [X31 + 0x10]
	0x0377368C STP X20, X19, [X31 + 0x20]
	0x03773690 ADRP X21, 0xC6D000
	0x03773694 ADRP X20, 0x9A8000
	0x03773698 LDRB W8, [X21 + 0xF21]
	0x0377369C LDR X20, [X20 + 0xC90]
	0x037736A0 MOV V8.16B, V0.16B
	0x037736A4 MOV X19, X0
	0x037736A8 TBNZ X8, 0x0, 0x37736C0
	0x037736AC ADRP X0, 0x9A8000
	0x037736B0 LDR X0, [X0 + 0xC90]
	0x037736B4 BL 0x1C16CF4
	0x037736B8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, 0x9AD000
	006 Move X0, [X0]
	007 Call 0x1C17D08
	008 Move X1, X19
	009 Move X2, X31
	010 Call String.Format, X0, X1
	011 Move X19, X0
	012 Move X0, 0x981000
	013 Move X0, [X0+2880]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X1, X19
	017 Move X2, X31
	018 Move X20, X0
	019 Call NotSupportedException..ctor, X0, X1
	020 Move X0, 0x9D4000
	021 Move X0, [X0+2912]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X20
	025 Call 0x1C17DEC

Method: System.Void WriteValueFromObjectIntoState(System.Object value, System.Void* statePtr)

Disassembly:
	0x037736BC STRB W8, [X21 + 0xF21]
	0x037736C0 LDRB W8, [X19 + 0xA0]
	0x037736C4 LDR X1, [X20]
	0x037736C8 TBNZ X8, 0x3, 0x37736D8
	0x037736CC LDR X8, [X1 + 0xB8]
	0x037736D0 LDR V0, [X8]
	0x037736D4 B 0x377370C
	0x037736D8 LDR X8, [X19]
	0x037736DC LDRB W9, [X1 + 0x130]
	0x037736E0 LDRB W10, [X8 + 0x130]
	0x037736E4 CMP W10, W9
	0x037736E8 B.CC 0x3773724
	0x037736EC LDR X8, [X8 + 0xC8]
	0x037736F0 ADD X8, X8, X9, 0x3, LSL
	0x037736F4 LDUR X8, [X8 - 0x8]
	0x037736F8 CMP X8, X1
	0x037736FC B.NE 0x3773724
	0x03773700 MOV X0, X19
	0x03773704 MOV X1, X31
	0x03773708 BL 0x3758994
	0x0377370C LDP X20, X19, [X31 + 0x20]
	0x03773710 LDP X30, X21, [X31 + 0x10]
	0x03773714 FCMP S0, S8
	0x03773718 CSET W0, LS

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, 0x9AD000
	006 Move X0, [X0]
	007 Call 0x1C17D08
	008 Move X1, X19
	009 Move X2, X31
	010 Call String.Format, X0, X1
	011 Move X19, X0
	012 Move X0, 0x981000
	013 Move X0, [X0+2880]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X1, X19
	017 Move X2, X31
	018 Move X20, X0
	019 Call NotSupportedException..ctor, X0, X1
	020 Move X0, 0x9D4000
	021 Move X0, [X0+2920]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X20
	025 Call 0x1C17DEC

Method: System.Boolean CompareValue(System.Void* firstStatePtr, System.Void* secondStatePtr)

Disassembly:
	

ISIL:
No ISIL was generated
Method: UnityEngine.InputSystem.InputControl TryGetChildControl(System.String path)

Disassembly:
	0x0377371C LDR V8, [X31], #0x30
	0x03773720 RET
	0x03773724 MOV X0, X19
	0x03773728 BL 0x1C171E0
	0x0377372C RET
	0x03773730 MOVZ W8, 0x101
	0x03773734 STRH W8, [X0 + 0xA4]
	0x03773738 RET
	0x0377373C STR D8, [X31 - 0x20]!
	0x03773740 STR X30, [X31 + 0x8]
	0x03773744 STP X20, X19, [X31 + 0x10]
	0x03773748 ADRP X20, 0xC6D000
	0x0377374C LDRB W8, [X20 + 0xF23]
	0x03773750 MOV V8.16B, V0.16B
	0x03773754 MOV X19, X0
	0x03773758 TBNZ X8, 0x0, 0x3773770
	0x0377375C ADRP X0, 0x9A8000
	0x03773760 LDR X0, [X0 + 0xC90]
	0x03773764 BL 0x1C16CF4
	0x03773768 MOVZ W8, 0x1
	0x0377376C STRB W8, [X20 + 0xF23]
	0x03773770 CBZ X19, 0x3773838
	0x03773774 ADRP X20, 0xC66000
	0x03773778 LDRB W8, [X20 + 0x5AA]
	0x0377377C CBNZ W8, 0x3773794
	0x03773780 ADRP X0, 0x987000
	0x03773784 LDR X0, [X0 + 0x4B8]
	0x03773788 BL 0x1C16CF4
	0x0377378C MOVZ W8, 0x1
	0x03773790 STRB W8, [X20 + 0x5AA]
	0x03773794 ADRP X8, 0x987000
	0x03773798 LDR X8, [X8 + 0x4B8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call String.IsNullOrEmpty, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, X20
	014 Move X1, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W2, W31
	018 Move X30, [X31+32]
	019 Call InputControlPath.TryFindChild, X0, X1, X2
	020 Return X0
	021 Move X0, 0x986000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0x98C000
	027 Move X0, [X0+288]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0x9D4000
	034 Move X0, [X0+2928]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: TControl TryGetChildControl(System.String path)

Disassembly:
	0x021FD9B4 MOV X19, X0
	0x021FD9B8 ADRP X0, 0x1F1E000
	0x021FD9BC LDR X0, [X0 + 0xD60]
	0x021FD9C0 BL 0x1C16D08
	0x021FD9C4 MOV X1, X0
	0x021FD9C8 MOV X0, X19
	0x021FD9CC MOV X2, X31
	0x021FD9D0 BL 0x330E100
	0x021FD9D4 MOV X0, X19
	0x021FD9D8 MOV X1, X20
	0x021FD9DC BL 0x1C16DEC
	0x021FD9E0 STR X30, [X31 - 0x30]!
	0x021FD9E4 STP X22, X21, [X31 + 0x10]
	0x021FD9E8 STP X20, X19, [X31 + 0x20]
	0x021FD9EC LDR X8, [X3 + 0x38]
	0x021FD9F0 MOV X20, X3
	0x021FD9F4 MOV X19, X2
	0x021FD9F8 MOV X21, X1
	0x021FD9FC MOV X22, X0
	0x021FDA00 CBNZ X8, 0x21FDA0C
	0x021FDA04 MOV X0, X20
	0x021FDA08 BL 0x1C5C6E0
	0x021FDA0C CBZ X22, 0x21FDA70
	0x021FDA10 MOV X0, X22
	0x021FDA14 MOV X1, X21
	0x021FDA18 MOV X2, X31
	0x021FDA1C BL 0x3773B98
	0x021FDA20 MOV X21, X0
	0x021FDA24 CBZ X0, 0x21FDA44
	0x021FDA28 LDR X8, [X22]
	0x021FDA2C MOV X0, X22
	0x021FDA30 MOV X1, X21
	0x021FDA34 LDR X9, [X8 + 0x248]
	0x021FDA38 LDR X2, [X8 + 0x250]
	0x021FDA3C BLR X9
	0x021FDA40 B 0x21FDA54
	0x021FDA44 LDR X8, [X20 + 0x38]
	0x021FDA48 MOV X0, X22
	0x021FDA4C LDR X1, [X8 + 0x10]
	0x021FDA50 BL 0x2E09658
	0x021FDA54 CMP X21, 0x0
	0x021FDA58 STP S0, S1, [X19]
	0x021FDA5C LDP X20, X19, [X31 + 0x20]
	0x021FDA60 LDP X22, X21, [X31 + 0x10]
	0x021FDA64 CSET W0, NE
	0x021FDA68 LDR X30, [X31], #0x30
	0x021FDA6C RET
	0x021FDA70 ADRP X0, 0x1EFB000
	0x021FDA74 LDR X0, [X0 + 0x528]
	0x021FDA78 BL 0x1C16D08
	0x021FDA7C BL 0x1C16F10
	0x021FDA80 MOV X19, X0
	0x021FDA84 ADRP X0, 0x1F1E000
	0x021FDA88 LDR X0, [X0 + 0xD60]
	0x021FDA8C BL 0x1C16D08
	0x021FDA90 MOV X1, X0
	0x021FDA94 MOV X0, X19
	0x021FDA98 MOV X2, X31
	0x021FDA9C BL 0x330E100
	0x021FDAA0 MOV X0, X19
	0x021FDAA4 MOV X1, X20
	0x021FDAA8 BL 0x1C16DEC
	0x021FDAAC STP X29, X30, [X31 - 0x50]!
	0x021FDAB0 STR X25, [X31 + 0x10]
	0x021FDAB4 STP X24, X23, [X31 + 0x20]
	0x021FDAB8 STP X22, X21, [X31 + 0x30]
	0x021FDABC STP X20, X19, [X31 + 0x40]
	0x021FDAC0 ADD X29, X31, 0x0
	0x021FDAC4 SUB X31, X31, 0x20
	0x021FDAC8 MRS X25, 0xC000
	0x021FDACC LDR X8, [X25 + 0x28]
	0x021FDAD0 MOV X19, X3
	0x021FDAD4 MOV X20, X2
	0x021FDAD8 MOV X24, X1
	0x021FDADC STUR X8, [X29 - 0x8]
	0x021FDAE0 LDR X8, [X3 + 0x38]
	0x021FDAE4 MOV X21, X0
	0x021FDAE8 CBNZ X8, 0x21FDAF8
	0x021FDAEC MOV X0, X19
	0x021FDAF0 BL 0x1C5C6E0
	0x021FDAF4 LDR X8, [X19 + 0x38]
	0x021FDAF8 LDR X8, [X8 + 0x18]
	0x021FDAFC LDR W22, [X8 + 0xFC]
	0x021FDB00 ADD X8, X31, 0x0
	0x021FDB04 ADD X9, X22, 0xF
	0x021FDB08 AND X9, X9, 0x1FFFFFFFF
	0x021FDB0C SUB X23, X8, X9
	0x021FDB10 ADD X31, X23, 0x0
	0x021FDB14 CBZ X21, 0x21FDBF0
	0x021FDB18 MOV X0, X21
	0x021FDB1C MOV X1, X24
	0x021FDB20 MOV X2, X31
	0x021FDB24 BL 0x3773B98
	0x021FDB28 CBZ X0, 0x21FDB78
	0x021FDB2C LDR X8, [X21]
	0x021FDB30 STP X0, X23, [X29 - 0x18]
	0x021FDB34 SUB X3, X29, 0x18
	0x021FDB38 MOV X2, X21
	0x021FDB3C LDR X1, [X8 + 0x250]
	0x021FDB40 MOV X4, X23
	0x021FDB44 LDP X0, X8, [X1 + 0x8]
	0x021FDB48 BLR X8
	0x021FDB4C MOV X0, X20
	0x021FDB50 MOV X1, X23
	0x021FDB54 MOV X2, X22
	0x021FDB58 BL 0x3EB1AC0
	0x021FDB5C LDR X8, [X19 + 0x38]
	0x021FDB60 LDR X0, [X8 + 0x18]
	0x021FDB64 LDRB W8, [X0 + 0x135]
	0x021FDB68 TBNZ X8, 0x0, 0x21FDB70
	0x021FDB6C BL 0x1C5C684
	0x021FDB70 MOVZ W0, 0x1
	0x021FDB74 B 0x21FDBC4
	0x021FDB78 LDR X8, [X19 + 0x38]
	0x021FDB7C SUB X3, X29, 0x18
	0x021FDB80 MOV X2, X21
	0x021FDB84 MOV X4, X23
	0x021FDB88 LDR X1, [X8 + 0x10]
	0x021FDB8C LDR X0, [X1]
	0x021FDB90 STUR X23, [X29 - 0x18]
	0x021FDB94 LDR X8, [X1 + 0x10]
	0x021FDB98 BLR X8
	0x021FDB9C MOV X0, X20
	0x021FDBA0 MOV X1, X23
	0x021FDBA4 MOV X2, X22
	0x021FDBA8 BL 0x3EB1AC0
	0x021FDBAC LDR X8, [X19 + 0x38]
	0x021FDBB0 LDR X0, [X8 + 0x18]
	0x021FDBB4 LDRB W8, [X0 + 0x135]
	0x021FDBB8 TBNZ X8, 0x0, 0x21FDBC0
	0x021FDBBC BL 0x1C5C684
	0x021FDBC0 MOV W0, W31
	0x021FDBC4 LDR X8, [X25 + 0x28]
	0x021FDBC8 LDUR X9, [X29 - 0x8]
	0x021FDBCC CMP X8, X9
	0x021FDBD0 B.NE 0x21FDC2C
	0x021FDBD4 ADD X31, X29, 0x0
	0x021FDBD8 LDP X20, X19, [X31 + 0x40]
	0x021FDBDC LDP X22, X21, [X31 + 0x30]
	0x021FDBE0 LDP X24, X23, [X31 + 0x20]
	0x021FDBE4 LDR X25, [X31 + 0x10]
	0x021FDBE8 LDP X29, X30, [X31], #0x50
	0x021FDBEC RET
	0x021FDBF0 ADRP X0, 0x1EFB000
	0x021FDBF4 LDR X0, [X0 + 0x528]
	0x021FDBF8 BL 0x1C16D08
	0x021FDBFC BL 0x1C16F10
	0x021FDC00 MOV X20, X0
	0x021FDC04 ADRP X0, 0x1F1E000
	0x021FDC08 LDR X0, [X0 + 0xD60]
	0x021FDC0C BL 0x1C16D08
	0x021FDC10 MOV X1, X0
	0x021FDC14 MOV X0, X20
	0x021FDC18 MOV X2, X31
	0x021FDC1C BL 0x330E100
	0x021FDC20 MOV X0, X20
	0x021FDC24 MOV X1, X19
	0x021FDC28 BL 0x1C16DEC
	0x021FDC2C BL 0x3EB1B20
	0x021FDC30 STP X29, X30, [X31 - 0x60]!
	0x021FDC34 STP X28, X27, [X31 + 0x10]
	0x021FDC38 STP X26, X25, [X31 + 0x20]
	0x021FDC3C STP X24, X23, [X31 + 0x30]
	0x021FDC40 STP X22, X21, [X31 + 0x40]
	0x021FDC44 STP X20, X19, [X31 + 0x50]
	0x021FDC48 ADD X29, X31, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+56]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X19
	014 Call 0x1C5D6E0
	015 Move X0, X21
	016 Move X1, X31
	017 Call String.IsNullOrEmpty, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {66}
	022 Move X0, X20
	023 Move X1, X21
	024 Move X2, X31
	025 Call InputControl.TryGetChildControl, X0, X1
	026 Compare X0, 0
	027 JumpIfEqual {59}
	028 Move X8, [X19+56]
	029 Move X20, X0
	030 Move X1, [X8]
	031 Move W8, [X1+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {39}
	036 Move X0, X1
	037 Call 0x1C5D684
	038 Move X1, X0
	039 Move X0, X20
	040 Call 0x1C17E00
	041 Move X8, [X19+56]
	042 Move X23, X0
	043 Move X22, [X8]
	044 Move W8, [X22+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {52}
	049 Move X0, X22
	050 Call 0x1C5D684
	051 Move X22, X0
	052 Compare X23, 0
	053 JumpIfEqual {79}
	054 Move X0, X23
	055 Move X1, X22
	056 Call 0x1C17E00
	057 Compare X0, 0
	058 JumpIfEqual {184}
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Move X23, [X31+56]
	065 Return X0
	066 Move X0, 0x1EFC000
	067 Move X0, [X0+1320]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X20, X0
	071 Move X0, 0x1F02000
	072 Move X0, [X0+288]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X20
	076 Move X2, X31
	077 Call ArgumentNullException..ctor, X0, X1
	078 Move X0, X20
	079 Move X0, 0x1EF7000
	080 Move X0, [X0+2760]
	081 Call 0x1C17D08
	082 Move W1, 7
	083 Call 0x1C17D6C
	084 Move X22, X21
	085 Move X21, X0
	086 Call 0x19913C0
	087 Move X0, 0x1F1F000
	088 Move X0, [X0+3320]
	089 Call 0x1C17D08
	090 Move X2, X0
	091 Move X0, X21
	092 Move X1, X31
	093 Call 0x1994444
	094 Move X0, X21
	095 Call 0x19913C0
	096 Move W1, 1
	097 Move X0, X21
	098 Move X2, X22
	099 Call 0x1994444
	100 Move X0, X21
	101 Call 0x19913C0
	102 Move X0, 0x1F1F000
	103 Move X0, [X0+3328]
	104 Call 0x1C17D08
	105 Move X2, X0
	106 Move W1, 2
	107 Move X0, X21
	108 Call 0x1994444
	109 Move X8, [X19+56]
	110 Move X0, 0x1EF7000
	111 Move X22, [X8+8]
	112 Move X0, [X0+1728]
	113 Call 0x1C17D08
	114 Call 0x19913D0
	115 Move X0, X22
	116 Move X1, X31
	117 Call Type.GetTypeFromHandle, X0
	118 Move X22, X0
	119 Call 0x19913C0
	120 Move X8, [X22]
	121 Move X0, X22
	122 Move X9, [X8+424]
	123 Move X1, [X8+432]
	124 NotImplemented "Instruction BLR not yet implemented."
	125 Move X22, X0
	126 Move X0, X21
	127 Call 0x19913C0
	128 Move W1, 3
	129 Move X0, X21
	130 Move X2, X22
	131 Call 0x1994444
	132 Move X0, X21
	133 Call 0x19913C0
	134 Move X0, 0x1F1F000
	135 Move X0, [X0+3336]
	136 Call 0x1C17D08
	137 Move X2, X0
	138 Move W1, 4
	139 Move X0, X21
	140 Call 0x1994444
	141 Move X0, X20
	142 Call 0x19913C0
	143 Move X0, X20
	144 Move X1, X31
	145 Call "il2cpp_vm_object_is_inst", X0
	146 Move X20, X0
	147 Call 0x19913C0
	148 Move X8, [X20]
	149 Move X0, X20
	150 Move X9, [X8+424]
	151 Move X1, [X8+432]
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Move X20, X0
	154 Move X0, X21
	155 Call 0x19913C0
	156 Move W1, 5
	157 Move X0, X21
	158 Move X2, X20
	159 Call 0x1994444
	160 Move X0, X21
	161 Call 0x19913C0
	162 Move X0, 0x1F1F000
	163 Move X0, [X0+3344]
	164 Call 0x1C17D08
	165 Move X2, X0
	166 Move W1, 6
	167 Move X0, X21
	168 Call 0x1994444
	169 Move X0, X21
	170 Move X1, X31
	171 Call String.Concat, X0
	172 Move X20, X0
	173 Move X0, 0x1EF7000
	174 Move X0, [X0+1456]
	175 Call 0x1C17D08
	176 Call 0x1C17F10
	177 Move X1, X20
	178 Move X2, X31
	179 Move X21, X0
	180 Call InvalidOperationException..ctor, X0, X1
	181 Move X0, X21
	182 Move X1, X19
	183 Call 0x1C17DEC
	184 Move X0, X23
	185 Move X1, X22
	186 Call 0x1C181E0

Method: UnityEngine.InputSystem.InputControl GetChildControl(System.String path)

Disassembly:
	0x0377379C ADRP X9, 0xFFFFFFFFFD377000
	0x037737A0 LDR V0, [X9 + 0x240]
	0x037737A4 FABS S2, S8
	0x037737A8 LDR X8, [X8]
	0x037737AC FMOV S3, 8
	0x037737B0 FMUL S0, S2, S0
	0x037737B4 LDR X8, [X8 + 0xB8]
	0x037737B8 LDR V1, [X8]
	0x037737BC FMUL S1, S1, S3
	0x037737C0 FCMP S0, S1
	0x037737C4 FCSEL S0, S0, S1, GT
	0x037737C8 FCMP S2, S0
	0x037737CC B.PL 0x377380C
	0x037737D0 ADRP X8, 0x9A8000
	0x037737D4 LDR X8, [X8 + 0xC90]
	0x037737D8 LDR X9, [X19]
	0x037737DC LDR X8, [X8]
	0x037737E0 LDRB W11, [X9 + 0x130]
	0x037737E4 LDRB W10, [X8 + 0x130]
	0x037737E8 CMP W11, W10
	0x037737EC B.CC 0x3773804
	0x037737F0 LDR X9, [X9 + 0xC8]
	0x037737F4 ADD X9, X9, X10, 0x3, LSL
	0x037737F8 LDUR X9, [X9 - 0x8]
	0x037737FC CMP X9, X8
	0x03773800 B.EQ 0x3773824
	0x03773804 LDR X8, [X8 + 0xB8]
	0x03773808 LDR V8, [X8]
	0x0377380C MOV X0, X19
	0x03773810 LDP X20, X19, [X31 + 0x10]
	0x03773814 LDR X30, [X31 + 0x8]
	0x03773818 MOV V0.16B, V8.16B
	0x0377381C LDR V8, [X31], #0x20
	0x03773820 B 0x3773880
	0x03773824 MOV X0, X19
	0x03773828 MOV X1, X31
	0x0377382C BL 0x3758994
	0x03773830 MOV V8.16B, V0.16B
	0x03773834 B 0x377380C
	0x03773838 ADRP X0, 0x985000
	0x0377383C LDR X0, [X0 + 0x528]
	0x03773840 BL 0x1C16D08
	0x03773844 BL 0x1C16F10
	0x03773848 MOV X19, X0
	0x0377384C ADRP X0, 0x9A8000
	0x03773850 LDR X0, [X0 + 0xD60]
	0x03773854 BL 0x1C16D08
	0x03773858 MOV X1, X0
	0x0377385C MOV X0, X19
	0x03773860 MOV X2, X31
	0x03773864 BL 0x330E100
	0x03773868 ADRP X0, 0x9D3000
	0x0377386C LDR X0, [X0 + 0xBD8]
	0x03773870 BL 0x1C16D08
	0x03773874 MOV X1, X0
	0x03773878 MOV X0, X19
	0x0377387C BL 0x1C16DEC
	0x03773880 STP D9, D8, [X31 - 0x20]!
	0x03773884 STP X30, X19, [X31 + 0x10]
	0x03773888 MOV V8.16B, V0.16B
	0x0377388C MOV X19, X0
	0x03773890 BL 0x377394C
	0x03773894 TBZ X0, 0x0, 0x37738A0
	0x03773898 MOV W0, W31
	0x0377389C B 0x377393C
	0x037738A0 CBZ X19, 0x3773948
	0x037738A4 MOV X0, X19
	0x037738A8 BL 0x3772410
	0x037738AC ADRP X19, 0xC66000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call String.IsNullOrEmpty, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {22}
	013 Move X0, X20
	014 Move X1, X19
	015 Call InputControl.TryGetChildControl, X0, X1
	016 Compare X0, 0
	017 JumpIfEqual {40}
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X0, 0x986000
	023 Move X0, [X0+1320]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X19, X0
	027 Move X0, 0x98C000
	028 Move X0, [X0+288]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Move X2, X31
	033 Call ArgumentNullException..ctor, X0, X1
	034 Move X0, 0x9D4000
	035 Move X0, [X0+2936]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Call 0x1C17DEC
	040 Move X0, X20
	041 Move X1, X19
	042 Call InputControl.MakeChildPath, X0, X1
	043 Move X19, X0
	044 Move X0, 0x9D4000
	045 Move X0, [X0+2944]
	046 Call 0x1C17D08
	047 Move X20, X0
	048 Move X0, 0x989000
	049 Move X0, [X0+2480]
	050 Call 0x1C17D08
	051 Move X2, X0
	052 Move X0, X20
	053 Move X1, X19
	054 Move X3, X31
	055 Call String.Concat, X0, X1, X2
	056 Move X19, X0
	057 Move X0, 0x989000
	058 Move X0, [X0+1400]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X20, X0
	062 Move X0, 0x98C000
	063 Move X0, [X0+288]
	064 Call 0x1C17D08
	065 Move X2, X0
	066 Move X0, X20
	067 Move X1, X19
	068 Move X3, X31
	069 Call ArgumentException..ctor, X0, X1, X2
	070 Move X0, 0x9D4000
	071 Move X0, [X0+2936]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X20
	075 Call 0x1C17DEC

Method: TControl GetChildControl(System.String path)

Disassembly:
	0x021FD754 B 0x21FD75C
	0x021FD758 B 0x21FD75C
	0x021FD75C MOV X19, X0
	0x021FD760 CMP W1, 0x1
	0x021FD764 B.NE 0x21FD798
	0x021FD768 MOV X0, X19
	0x021FD76C BL 0x3EB1AD0
	0x021FD770 LDR X20, [X0]
	0x021FD774 BL 0x3EB1AE0
	0x021FD778 ADRP X8, 0x1F1E000
	0x021FD77C LDR X8, [X8 + 0xD68]
	0x021FD780 SUB X0, X29, 0x50
	0x021FD784 LDR X1, [X8]
	0x021FD788 BL 0x23C9DBC
	0x021FD78C CBZ X20, 0x21FD6E8
	0x021FD790 MOV X0, X20
	0x021FD794 BL 0x1C16F18
	0x021FD798 MOV X20, X31
	0x021FD79C B 0x21FD7A4
	0x021FD7A0 MOV X19, X0
	0x021FD7A4 ADRP X8, 0x1F1E000
	0x021FD7A8 LDR X8, [X8 + 0xD68]
	0x021FD7AC LDR X1, [X8]
	0x021FD7B0 SUB X0, X29, 0x50
	0x021FD7B4 BL 0x23C9DBC
	0x021FD7B8 CBNZ X20, 0x21FD7C4
	0x021FD7BC MOV X0, X19
	0x021FD7C0 BL 0x1D2C690
	0x021FD7C4 MOV X0, X20
	0x021FD7C8 BL 0x1C16F18
	0x021FD7CC BL 0x1990590
	0x021FD7D0 STP X29, X30, [X31 - 0x60]!
	0x021FD7D4 STR X27, [X31 + 0x10]
	0x021FD7D8 STP X26, X25, [X31 + 0x20]
	0x021FD7DC STP X24, X23, [X31 + 0x30]
	0x021FD7E0 STP X22, X21, [X31 + 0x40]
	0x021FD7E4 STP X20, X19, [X31 + 0x50]
	0x021FD7E8 ADD X29, X31, 0x0
	0x021FD7EC SUB X31, X31, 0x10
	0x021FD7F0 MRS X26, 0xC000
	0x021FD7F4 LDR X8, [X26 + 0x28]
	0x021FD7F8 MOV X19, X3
	0x021FD7FC MOV X20, X2
	0x021FD800 MOV X21, X1
	0x021FD804 STUR X8, [X29 - 0x8]
	0x021FD808 LDR X27, [X3 + 0x38]
	0x021FD80C MOV X22, X0
	0x021FD810 CBNZ X27, 0x21FD820
	0x021FD814 MOV X0, X19
	0x021FD818 BL 0x1C5C6E0
	0x021FD81C LDR X27, [X19 + 0x38]
	0x021FD820 LDR X8, [X27 + 0x8]
	0x021FD824 LDR W23, [X8 + 0xFC]
	0x021FD828 ADD X8, X31, 0x0
	0x021FD82C ADD X9, X23, 0xF
	0x021FD830 AND X9, X9, 0x1FFFFFFFF
	0x021FD834 SUB X24, X8, X9
	0x021FD838 ADD X31, X24, 0x0
	0x021FD83C ADD X8, X31, 0x0
	0x021FD840 SUB X25, X8, X9
	0x021FD844 ADD X31, X25, 0x0
	0x021FD848 MOV X0, X25
	0x021FD84C MOV W1, W31
	0x021FD850 MOV X2, X23
	0x021FD854 BL 0x3EB1B10
	0x021FD858 CBZ X22, 0x21FD8D4
	0x021FD85C MOV X0, X25
	0x021FD860 MOV W1, W31
	0x021FD864 MOV X2, X23
	0x021FD868 BL 0x3EB1B10
	0x021FD86C LDR X3, [X27 + 0x10]
	0x021FD870 MOV X0, X22
	0x021FD874 MOV X1, X21
	0x021FD878 MOV X2, X25
	0x021FD87C LDR X8, [X3]
	0x021FD880 BLR X8
	0x021FD884 MOV X0, X24
	0x021FD888 MOV X1, X25
	0x021FD88C MOV X2, X23
	0x021FD890 BL 0x3EB1AC0
	0x021FD894 MOV X0, X20
	0x021FD898 MOV X1, X24
	0x021FD89C MOV X2, X23
	0x021FD8A0 BL 0x3EB1AC0
	0x021FD8A4 LDR X8, [X26 + 0x28]
	0x021FD8A8 LDUR X9, [X29 - 0x8]
	0x021FD8AC CMP X8, X9
	0x021FD8B0 B.NE 0x21FD910
	0x021FD8B4 ADD X31, X29, 0x0
	0x021FD8B8 LDP X20, X19, [X31 + 0x50]
	0x021FD8BC LDP X22, X21, [X31 + 0x40]
	0x021FD8C0 LDP X24, X23, [X31 + 0x30]
	0x021FD8C4 LDP X26, X25, [X31 + 0x20]
	0x021FD8C8 LDR X27, [X31 + 0x10]
	0x021FD8CC LDP X29, X30, [X31], #0x60
	0x021FD8D0 RET
	0x021FD8D4 ADRP X0, 0x1EFB000
	0x021FD8D8 LDR X0, [X0 + 0x528]
	0x021FD8DC BL 0x1C16D08
	0x021FD8E0 BL 0x1C16F10
	0x021FD8E4 MOV X20, X0
	0x021FD8E8 ADRP X0, 0x1F1E000
	0x021FD8EC LDR X0, [X0 + 0xD60]
	0x021FD8F0 BL 0x1C16D08
	0x021FD8F4 MOV X1, X0
	0x021FD8F8 MOV X0, X20
	0x021FD8FC MOV X2, X31
	0x021FD900 BL 0x330E100
	0x021FD904 MOV X0, X20
	0x021FD908 MOV X1, X19
	0x021FD90C BL 0x1C16DEC
	0x021FD910 BL 0x3EB1B20
	0x021FD914 STR X30, [X31 - 0x30]!
	0x021FD918 STP X22, X21, [X31 + 0x10]
	0x021FD91C STP X20, X19, [X31 + 0x20]
	0x021FD920 LDR X8, [X3 + 0x38]
	0x021FD924 MOV X20, X3
	0x021FD928 MOV X19, X2
	0x021FD92C MOV X22, X1
	0x021FD930 MOV X21, X0
	0x021FD934 CBNZ X8, 0x21FD940
	0x021FD938 MOV X0, X20
	0x021FD93C BL 0x1C5C6E0
	0x021FD940 CBZ X21, 0x21FD9A4
	0x021FD944 MOV X0, X21
	0x021FD948 MOV X1, X22
	0x021FD94C MOV X2, X31
	0x021FD950 BL 0x3773B98
	0x021FD954 MOV X22, X0
	0x021FD958 CBZ X0, 0x21FD978
	0x021FD95C LDR X8, [X21]
	0x021FD960 MOV X0, X21
	0x021FD964 MOV X1, X22
	0x021FD968 LDR X9, [X8 + 0x248]
	0x021FD96C LDR X2, [X8 + 0x250]
	0x021FD970 BLR X9
	0x021FD974 B 0x21FD988
	0x021FD978 LDR X8, [X20 + 0x38]
	0x021FD97C MOV X0, X21
	0x021FD980 LDR X1, [X8 + 0x10]
	0x021FD984 BL 0x2E05C20
	0x021FD988 CMP X22, 0x0
	0x021FD98C STR S0, [X19]
	0x021FD990 LDP X20, X19, [X31 + 0x20]
	0x021FD994 LDP X22, X21, [X31 + 0x10]
	0x021FD998 CSET W0, NE
	0x021FD99C LDR X30, [X31], #0x30
	0x021FD9A0 RET
	0x021FD9A4 ADRP X0, 0x1EFB000
	0x021FD9A8 LDR X0, [X0 + 0x528]
	0x021FD9AC BL 0x1C16D08
	0x021FD9B0 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+56]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X19
	014 Call 0x1C5D6E0
	015 Move X0, X20
	016 Move X1, X21
	017 Move X2, X31
	018 Call InputControl.GetChildControl, X0, X1
	019 Move X8, [X19+56]
	020 Move X20, X0
	021 Move X1, [X8]
	022 Move W8, [X1+309]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {30}
	027 Move X0, X1
	028 Call 0x1C5D684
	029 Move X1, X0
	030 Move X0, X20
	031 Call 0x1C17E00
	032 Move X8, [X19+56]
	033 Move X23, X0
	034 Move X22, [X8]
	035 Move W8, [X22+309]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {43}
	040 Move X0, X22
	041 Call 0x1C5D684
	042 Move X22, X0
	043 Compare X23, 0
	044 JumpIfEqual {57}
	045 Move X0, X23
	046 Move X1, X22
	047 Call 0x1C17E00
	048 Compare X0, 0
	049 JumpIfEqual {167}
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Return X0
	057 Move X0, 0x1EF7000
	058 Move X0, [X0+2760]
	059 Call 0x1C17D08
	060 Move W1, 7
	061 Call 0x1C17D6C
	062 Move X22, X21
	063 Move X21, X0
	064 Call 0x19913C0
	065 Move X0, 0x1F1F000
	066 Move X0, [X0+3320]
	067 Call 0x1C17D08
	068 Move X2, X0
	069 Move X0, X21
	070 Move X1, X31
	071 Call 0x1994444
	072 Move X0, X21
	073 Call 0x19913C0
	074 Move W1, 1
	075 Move X0, X21
	076 Move X2, X22
	077 Call 0x1994444
	078 Move X0, X21
	079 Call 0x19913C0
	080 Move X0, 0x1F1F000
	081 Move X0, [X0+3328]
	082 Call 0x1C17D08
	083 Move X2, X0
	084 Move W1, 2
	085 Move X0, X21
	086 Call 0x1994444
	087 Move X8, [X19+56]
	088 Move X0, 0x1EF7000
	089 Move X22, [X8+8]
	090 Move X0, [X0+1728]
	091 Call 0x1C17D08
	092 Call 0x19913D0
	093 Move X0, X22
	094 Move X1, X31
	095 Call Type.GetTypeFromHandle, X0
	096 Move X22, X0
	097 Call 0x19913C0
	098 Move X8, [X22]
	099 Move X0, X22
	100 Move X9, [X8+424]
	101 Move X1, [X8+432]
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Move X22, X0
	104 Move X0, X21
	105 Call 0x19913C0
	106 Move W1, 3
	107 Move X0, X21
	108 Move X2, X22
	109 Call 0x1994444
	110 Move X0, X21
	111 Call 0x19913C0
	112 Move X0, 0x1F1F000
	113 Move X0, [X0+3336]
	114 Call 0x1C17D08
	115 Move X2, X0
	116 Move W1, 4
	117 Move X0, X21
	118 Call 0x1994444
	119 Move X0, X20
	120 Call 0x19913C0
	121 Move X0, X20
	122 Move X1, X31
	123 Call "il2cpp_vm_object_is_inst", X0
	124 Move X20, X0
	125 Call 0x19913C0
	126 Move X8, [X20]
	127 Move X0, X20
	128 Move X9, [X8+424]
	129 Move X1, [X8+432]
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Move X20, X0
	132 Move X0, X21
	133 Call 0x19913C0
	134 Move W1, 5
	135 Move X0, X21
	136 Move X2, X20
	137 Call 0x1994444
	138 Move X0, X21
	139 Call 0x19913C0
	140 Move X0, 0x1F1F000
	141 Move X0, [X0+3344]
	142 Call 0x1C17D08
	143 Move X2, X0
	144 Move W1, 6
	145 Move X0, X21
	146 Call 0x1994444
	147 Move X0, X21
	148 Move X1, X31
	149 Call String.Concat, X0
	150 Move X20, X0
	151 Move X0, 0x1EFF000
	152 Move X0, [X0+1400]
	153 Call 0x1C17D08
	154 Call 0x1C17F10
	155 Move X21, X0
	156 Move X0, 0x1F02000
	157 Move X0, [X0+288]
	158 Call 0x1C17D08
	159 Move X2, X0
	160 Move X0, X21
	161 Move X1, X20
	162 Move X3, X31
	163 Call ArgumentException..ctor, X0, X1, X2
	164 Move X0, X21
	165 Move X1, X19
	166 Call 0x1C17DEC
	167 Move X0, X23
	168 Move X1, X22
	169 Call 0x1C181E0

Method: System.Void .ctor()

Disassembly:
	0x0377395C MOV X1, X31
	0x03773960 BL 0x380C47C
	0x03773964 MOV X1, X0
	0x03773968 MOV X0, X19
	0x0377396C MOV X2, X31
	0x03773970 LDP X30, X19, [X31], #0x10
	0x03773974 B 0x3773FF4
	0x03773978 ADRP X0, 0x985000
	0x0377397C LDR X0, [X0 + 0x528]
	0x03773980 BL 0x1C16D08
	0x03773984 BL 0x1C16F10
	0x03773988 MOV X19, X0
	0x0377398C ADRP X0, 0x9A8000
	0x03773990 LDR X0, [X0 + 0xD60]
	0x03773994 BL 0x1C16D08
	0x03773998 MOV X1, X0
	0x0377399C MOV X0, X19
	0x037739A0 MOV X2, X31
	0x037739A4 BL 0x330E100
	0x037739A8 ADRP X0, 0x9D3000
	0x037739AC LDR X0, [X0 + 0xBE0]
	0x037739B0 BL 0x1C16D08
	0x037739B4 MOV X1, X0
	0x037739B8 MOV X0, X19
	0x037739BC BL 0x1C16DEC
	0x037739C0 STP X30, X21, [X31 - 0x20]!
	0x037739C4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC6E000
	006 Move X20, 0x9A9000
	007 Move W8, [X21+3863]
	008 Move X20, [X20+3352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9A9000
	015 Move X0, [X0+3352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3863], W8
	019 Move W8, 257
	020 Move X0, X19
	021 Move X1, X31
	022 NotImplemented "Instruction STRH not yet implemented."
	023 Call Object..ctor, X0
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move TEMP, 1
	030 Not TEMP
	031 Move W8, TEMP
	032 Move [X19+20], W8
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x037739C8 CBZ X0, 0x3773A0C

ISIL:
	001 Return 

Method: System.Void RefreshConfigurationIfNeeded()

Disassembly:
	0x03772EE0 STP X30, X23, [X31 + 0x30]
	0x03772EE4 STP X22, X21, [X31 + 0x40]
	0x03772EE8 STP X20, X19, [X31 + 0x50]
	0x03772EEC ADRP X20, 0xC6E000
	0x03772EF0 LDRB W8, [X20 + 0xF1C]
	0x03772EF4 MOV X19, X0
	0x03772EF8 TBNZ X8, 0x0, 0x3772F34
	0x03772EFC ADRP X0, 0x9AD000
	0x03772F00 LDR X0, [X0 + 0x48]
	0x03772F04 BL 0x1C16CF4
	0x03772F08 ADRP X0, 0x9AD000
	0x03772F0C LDR X0, [X0 + 0x50]
	0x03772F10 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+160]
	004 Move TEMP, X8
	005 And TEMP, TEMP, 1
	006 Compare TEMP, 1
	007 JumpIfEqual {16}
	008 Move X8, [X0]
	009 Move X19, X0
	010 Move X9, [X8+536]
	011 Move X1, [X8+544]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move W8, [X19+160]
	014 Or W8, W8, 1
	015 Move [X19+160], W8
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: System.Void RefreshConfiguration()

Disassembly:
	0x037739E8 LDR X8, [X21]

ISIL:
	001 Return 

Method: System.Void* get_currentStatePtr()

Disassembly:
	0x03773640 LDR X2, [X21]
	0x03773644 ADD X0, X31, 0x0
	0x03773648 MOV W1, W20
	0x0377364C BL 0x24FDB3C
	0x03773650 CBZ X0, 0x3773680

ISIL:
	001 Move [X31-16], X30
	002 Call InputControl.GetDeviceIndex, X0
	003 Move X1, X31
	004 Move X30, [X31+16]
	005 Call InputStateBuffers.GetFrontBufferForDevice, X0
	006 Return X0

Method: System.Void* get_previousFrameStatePtr()

Disassembly:
	0x03773B40 BR X3
	0x03773B44 MOV X0, X19
	0x03773B48 LDP X30, X19, [X31], #0x10
	0x03773B4C B 0x3773A74
	0x03773B50 ADRP X0, 0x985000

ISIL:
	001 Move [X31-16], X30
	002 Call InputControl.GetDeviceIndex, X0
	003 Move X1, X31
	004 Move X30, [X31+16]
	005 Call InputStateBuffers.GetBackBufferForDevice, X0
	006 Return X0

Method: System.Void* get_defaultStatePtr()

Disassembly:
	0x03773B54 LDR X0, [X0 + 0x528]
	0x03773B58 BL 0x1C16D08
	0x03773B5C BL 0x1C16F10
	0x03773B60 MOV X19, X0
	0x03773B64 ADRP X0, 0x9A8000
	0x03773B68 LDR X0, [X0 + 0xD60]
	0x03773B6C BL 0x1C16D08
	0x03773B70 MOV X1, X0
	0x03773B74 MOV X0, X19
	0x03773B78 MOV X2, X31
	0x03773B7C BL 0x330E100
	0x03773B80 ADRP X0, 0x9D3000
	0x03773B84 LDR X0, [X0 + 0xBF8]
	0x03773B88 BL 0x1C16D08
	0x03773B8C MOV X1, X0
	0x03773B90 MOV X0, X19
	0x03773B94 BL 0x1C16DEC
	0x03773B98 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC6E000
	005 Move X20, 0x9AC000
	006 Move W8, [X19+3864]
	007 Move X20, [X20+4072]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AC000
	013 Move X0, [X0+4072]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3864], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void* get_noiseMaskPtr()

Disassembly:
	0x03773B9C STP X20, X19, [X31 + 0x10]
	0x03773BA0 STR X1, [X31 + 0x8]
	0x03773BA4 CBZ X0, 0x3773BE8
	0x03773BA8 MOV X19, X0
	0x03773BAC ADD X0, X31, 0x8
	0x03773BB0 MOV X1, X31
	0x03773BB4 BL 0x37F80A4
	0x03773BB8 TBZ X0, 0x0, 0x3773C08
	0x03773BBC LDR X20, [X31 + 0x8]
	0x03773BC0 ADD X0, X31, 0x8
	0x03773BC4 MOV X1, X31
	0x03773BC8 BL 0x37F80B4
	0x03773BCC AND X2, X0, 0x0
	0x03773BD0 MOV X0, X19
	0x03773BD4 MOV X1, X20
	0x03773BD8 BL 0x3774680
	0x03773BDC LDP X20, X19, [X31 + 0x10]
	0x03773BE0 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC6E000
	005 Move X20, 0x9AC000
	006 Move W8, [X19+3865]
	007 Move X20, [X20+4072]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AC000
	013 Move X0, [X0+4072]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3865], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8+8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.UInt32 get_stateOffsetRelativeToDeviceRoot()

Disassembly:
	0x03773BE4 RET
	0x03773BE8 ADRP X0, 0x985000
	0x03773BEC LDR X0, [X0 + 0x528]
	0x03773BF0 BL 0x1C16D08
	0x03773BF4 BL 0x1C16F10
	0x03773BF8 MOV X19, X0
	0x03773BFC ADRP X0, 0x9A8000
	0x03773C00 LDR X0, [X0 + 0xD60]
	0x03773C04 B 0x3773C24
	0x03773C08 ADRP X0, 0x985000
	0x03773C0C LDR X0, [X0 + 0x528]
	0x03773C10 BL 0x1C16D08
	0x03773C14 BL 0x1C16F10
	0x03773C18 MOV X19, X0
	0x03773C1C ADRP X0, 0x9A8000
	0x03773C20 LDR X0, [X0 + 0xD70]
	0x03773C24 BL 0x1C16D08
	0x03773C28 MOV X1, X0
	0x03773C2C MOV X0, X19
	0x03773C30 MOV X2, X31
	0x03773C34 BL 0x330E100
	0x03773C38 ADRP X0, 0x9D3000
	0x03773C3C LDR X0, [X0 + 0xC00]
	0x03773C40 BL 0x1C16D08
	0x03773C44 MOV X1, X0
	0x03773C48 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC6E000
	005 Move W8, [X20+3866]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9A9000
	012 Move X0, [X0+3352]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3866], W8
	016 Move X20, [X19+120]
	017 Compare X20, 0
	018 JumpIfEqual {33}
	019 Move X8, 0x9A9000
	020 Move X8, [X8+3352]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W8, [X20+20]
	027 Move W9, [X19+20]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Subtract W0, W9, W8
	031 Move X30, [X31+32]
	032 Return X0
	033 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.FourCC get_optimizedControlDataType()

Disassembly:
	0x03773C4C BL 0x1C16DEC
	0x03773C50 STR X30, [X31 - 0x20]!

ISIL:
	001 Move W0, [X0+216]
	002 Return X0

Method: UnityEngine.InputSystem.Utilities.FourCC CalculateOptimizedControlDataType()

Disassembly:
	0x03773C54 STP X20, X19, [X31 + 0x10]
	0x03773C58 CBZ X0, 0x3773C98

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void ApplyParameterChanges()

Disassembly:
	0x03773C5C MOV X19, X2
	0x03773C60 MOV X20, X0
	0x03773C64 BL 0x3773B98
	0x03773C68 CBZ X0, 0x3773C8C
	0x03773C6C LDR X8, [X20]
	0x03773C70 MOV X2, X0
	0x03773C74 MOV X0, X20
	0x03773C78 MOV X1, X19
	0x03773C7C LDP X4, X3, [X8 + 0x1E8]
	0x03773C80 LDP X20, X19, [X31 + 0x10]
	0x03773C84 LDR X30, [X31], #0x20
	0x03773C88 BR X4
	0x03773C8C LDP X20, X19, [X31 + 0x10]
	0x03773C90 LDR X30, [X31], #0x20
	0x03773C94 RET
	0x03773C98 ADRP X0, 0x985000
	0x03773C9C LDR X0, [X0 + 0x528]
	0x03773CA0 BL 0x1C16D08
	0x03773CA4 BL 0x1C16F10
	0x03773CA8 MOV X19, X0
	0x03773CAC ADRP X0, 0x9A8000
	0x03773CB0 LDR X0, [X0 + 0xD60]
	0x03773CB4 BL 0x1C16D08
	0x03773CB8 MOV X1, X0
	0x03773CBC MOV X0, X19
	0x03773CC0 MOV X2, X31
	0x03773CC4 BL 0x330E100
	0x03773CC8 ADRP X0, 0x9D3000
	0x03773CCC LDR X0, [X0 + 0xC08]
	0x03773CD0 BL 0x1C16D08
	0x03773CD4 MOV X1, X0
	0x03773CD8 MOV X0, X19
	0x03773CDC BL 0x1C16DEC
	0x03773CE0 STR X30, [X31 - 0x30]!
	0x03773CE4 STP X22, X21, [X31 + 0x10]
	0x03773CE8 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X1, X31
	008 Move X19, X0
	009 Call 0x3780584
	010 Move X20, [X19+128]
	011 Compare X20, 0
	012 JumpIfEqual {38}
	013 Move X21, 0x9AC000
	014 Move X21, [X21+4064]
	015 Move X22, 0xC6E000
	016 Move W23, 1
	017 Move W8, [X22+3988]
	018 Compare W8, 0
	019 JumpIfNotEqual {23}
	020 Move X0, X21
	021 Call 0x1C17CF4
	022 Move [X22+3988], W23
	023 Move X8, [X21]
	024 Move X8, [X8+184]
	025 Move W8, [X8]
	026 Compare W8, 0
	027 JumpIfEqual {33}
	028 Move X8, [X20]
	029 Move X0, X20
	030 Move X9, [X8+552]
	031 Move X1, [X8+560]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move W0, W31
	034 Move [X20+216], W0
	035 Move X20, [X20+128]
	036 Compare X20, 0
	037 JumpIfNotEqual {17}
	038 Move X0, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]

Method: System.Void SetOptimizedControlDataType()

Disassembly:
	0x03773E64 BL 0x1D2C690
	0x03773E68 MOV X0, X21
	0x03773E6C BL 0x1C16F18
	0x03773E70 BL 0x1990590
	0x03773E74 SUB X31, X31, 0x40
	0x03773E78 STR X30, [X31 + 0x10]
	0x03773E7C STP X22, X21, [X31 + 0x20]
	0x03773E80 STP X20, X19, [X31 + 0x30]
	0x03773E84 ADRP X22, 0xC6D000
	0x03773E88 LDRB W8, [X22 + 0xF24]
	0x03773E8C MOV W21, W2
	0x03773E90 MOV X19, X1
	0x03773E94 MOV X20, X0
	0x03773E98 TBNZ X8, 0x0, 0x3773EBC
	0x03773E9C ADRP X0, 0x9A8000
	0x03773EA0 LDR X0, [X0 + 0xD18]
	0x03773EA4 BL 0x1C16CF4
	0x03773EA8 ADRP X0, 0x980000
	0x03773EAC LDR X0, [X0 + 0x5A8]
	0x03773EB0 BL 0x1C16CF4
	0x03773EB4 MOVZ W8, 0x1
	0x03773EB8 STRB W8, [X22 + 0xF24]
	0x03773EBC CBZ X20, 0x3773F64
	0x03773EC0 CMP W21, 0x0
	0x03773EC4 B.LE 0x3773F98
	0x03773EC8 ADRP X8, 0x9A8000
	0x03773ECC LDR X8, [X8 + 0xD18]
	0x03773ED0 LDR V0, [X20 + 0x1]
	0x03773ED4 ADRP X22, 0x980000
	0x03773ED8 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC6E000
	006 Move X21, 0x9AC000
	007 Move W8, [X20+3867]
	008 Move X21, [X21+4064]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AC000
	015 Move X0, [X0+4064]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3867], W8
	019 Move X8, [X21]
	020 Move X8, [X8+184]
	021 Move W8, [X8]
	022 Compare W8, 0
	023 JumpIfEqual {29}
	024 Move X8, [X19]
	025 Move X0, X19
	026 Move X9, [X8+552]
	027 Move X1, [X8+560]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Compare X19, 0
	030 JumpIfEqual {38}
	031 Move W0, W31
	032 Move [X19+216], W0
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Call 0x1C17F20

Method: System.Void SetOptimizedControlDataTypeRecursively()

Disassembly:
	0x03773EDC STR V0, [X31]
	0x03773EE0 LDR W8, [X0 + 0xE0]
	0x03773EE4 LDR X22, [X22 + 0x5A8]
	0x03773EE8 CBNZ W8, 0x3773EF0
	0x03773EEC BL 0x1C16DFC
	0x03773EF0 ADD X0, X31, 0x0
	0x03773EF4 MOV X1, X31
	0x03773EF8 BL 0x3800B6C
	0x03773EFC LDR X8, [X22]
	0x03773F00 MOV W22, W0
	0x03773F04 LDR W9, [X8 + 0xE0]
	0x03773F08 CBNZ W9, 0x3773F14
	0x03773F0C MOV X0, X8
	0x03773F10 BL 0x1C16DFC
	0x03773F14 MOV W0, W21
	0x03773F18 MOV W1, W22
	0x03773F1C MOV X2, X31
	0x03773F20 BL 0x337EEA0
	0x03773F24 MOV X21, X0
	0x03773F28 MOV X0, X20
	0x03773F2C BL 0x37729EC
	0x03773F30 MOV X1, X31
	0x03773F34 BL 0x380C47C
	0x03773F38 LDR W8, [X31 + 0x4]
	0x03773F3C MOV X2, X21
	0x03773F40 MOV X3, X31
	0x03773F44 ADD X1, X8, X0
	0x03773F48 MOV X0, X19
	0x03773F4C BL 0x3BFF954
	0x03773F50 LDP X20, X19, [X31 + 0x30]
	0x03773F54 LDP X22, X21, [X31 + 0x20]
	0x03773F58 LDR X30, [X31 + 0x10]
	0x03773F5C ADD X31, X31, 0x40
	0x03773F60 RET
	0x03773F64 ADRP X0, 0x985000
	0x03773F68 LDR X0, [X0 + 0x528]
	0x03773F6C BL 0x1C16D08
	0x03773F70 BL 0x1C16F10
	0x03773F74 MOV X19, X0
	0x03773F78 ADRP X0, 0x9A8000
	0x03773F7C LDR X0, [X0 + 0xD20]
	0x03773F80 BL 0x1C16D08
	0x03773F84 MOV X1, X0
	0x03773F88 MOV X0, X19
	0x03773F8C MOV X2, X31
	0x03773F90 BL 0x330E100
	0x03773F94 B 0x3773FDC
	0x03773F98 ADRP X0, 0x988000
	0x03773F9C LDR X0, [X0 + 0x578]
	0x03773FA0 BL 0x1C16D08
	0x03773FA4 BL 0x1C16F10
	0x03773FA8 MOV X19, X0
	0x03773FAC ADRP X0, 0x9D3000
	0x03773FB0 LDR X0, [X0 + 0xC18]
	0x03773FB4 BL 0x1C16D08
	0x03773FB8 MOV X20, X0
	0x03773FBC ADRP X0, 0x9D3000
	0x03773FC0 LDR X0, [X0 + 0xC20]
	0x03773FC4 BL 0x1C16D08
	0x03773FC8 MOV X2, X0
	0x03773FCC MOV X0, X19
	0x03773FD0 MOV X1, X20
	0x03773FD4 MOV X3, X31
	0x03773FD8 BL 0x330E16C
	0x03773FDC ADRP X0, 0x9D3000
	0x03773FE0 LDR X0, [X0 + 0xC28]
	0x03773FE4 BL 0x1C16D08
	0x03773FE8 MOV X1, X0
	0x03773FEC MOV X0, X19
	0x03773FF0 BL 0x1C16DEC
	0x03773FF4 STR X30, [X31 - 0x30]!
	0x03773FF8 STP X22, X21, [X31 + 0x10]
	0x03773FFC STP X20, X19, [X31 + 0x20]
	0x03774000 CBZ X0, 0x3774064
	0x03774004 MOV X20, X1
	0x03774008 CBZ X1, 0x3774084
	0x0377400C ADRP X22, 0xC67000
	0x03774010 LDRB W8, [X22 + 0xA03]
	0x03774014 MOV X19, X2
	0x03774018 MOV X21, X0
	0x0377401C CBNZ W8, 0x3774034
	0x03774020 ADRP X0, 0x9AA000
	0x03774024 LDR X0, [X0 + 0xFE8]
	0x03774028 BL 0x1C16CF4
	0x0377402C MOVZ W8, 0x1
	0x03774030 STRB W8, [X22 + 0xA03]
	0x03774034 ADRP X8, 0x9AA000
	0x03774038 LDR X8, [X8 + 0xFE8]
	0x0377403C MOV X0, X21
	0x03774040 MOV X1, X20
	0x03774044 MOV X3, X19
	0x03774048 LDR X8, [X8]
	0x0377404C LDP X20, X19, [X31 + 0x20]
	0x03774050 LDP X22, X21, [X31 + 0x10]
	0x03774054 LDR X8, [X8 + 0xB8]
	0x03774058 LDR X2, [X8]
	0x0377405C LDR X30, [X31], #0x30
	0x03774060 B 0x37740CC
	0x03774064 ADRP X0, 0x984000
	0x03774068 LDR X0, [X0 + 0x528]
	0x0377406C BL 0x1C16D08
	0x03774070 BL 0x1C16F10
	0x03774074 MOV X19, X0
	0x03774078 ADRP X0, 0x9A7000
	0x0377407C LDR X0, [X0 + 0xD60]
	0x03774080 B 0x37740A0
	0x03774084 ADRP X0, 0x984000
	0x03774088 LDR X0, [X0 + 0x528]
	0x0377408C BL 0x1C16D08
	0x03774090 BL 0x1C16F10
	0x03774094 MOV X19, X0
	0x03774098 ADRP X0, 0x9A7000
	0x0377409C LDR X0, [X0 + 0xD88]
	0x037740A0 BL 0x1C16D08
	0x037740A4 MOV X1, X0
	0x037740A8 MOV X0, X19
	0x037740AC MOV X2, X31
	0x037740B0 BL 0x330E100
	0x037740B4 ADRP X0, 0x9D2000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X20, 0xC6E000
	009 Move W8, [X20+3868]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x9AD000
	016 Move X0, [X0+72]
	017 Call 0x1C17CF4
	018 Move X0, 0x9AD000
	019 Move X0, [X0+80]
	020 Call 0x1C17CF4
	021 Move X0, 0x9AD000
	022 Move X0, [X0+88]
	023 Call 0x1C17CF4
	024 Move X0, 0x9AD000
	025 Move X0, [X0+96]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3868], W8
	029 Move [X31+24], X31
	030 Move [X31+32], X31
	031 Move [X31+40], X31
	032 Move [X31+8], X31
	033 Move [X31+16], X31
	034 Move W8, [X19+152]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X23, 0x9AD000
	037 Move X21, 0x9AD000
	038 Move X22, 0x9AD000
	039 Move X20, 0x9AD000
	040 Move X23, [X23+96]
	041 Move X21, [X21+80]
	042 Move X22, [X22+88]
	043 Move X20, [X20+72]
	044 Move X0, X19
	045 Call InputControl.get_children, X0
	046 Move X9, [X23]
	047 Move [X31+8], X0
	048 Move [X31+16], X1
	049 Add X8, X31, 24
	050 Add X0, X31, 8
	051 Move X1, X9
	052 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	053 Move X1, [X21]
	054 Add X0, X31, 24
	055 Call Enumerator<Object>.MoveNext, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {67}
	060 Move X1, [X22]
	061 Add X0, X31, 24
	062 Call Enumerator<Object>.get_Current, X0
	063 Compare X0, 0
	064 JumpIfEqual {103}
	065 Move X1, X31
	066 Call 0x3780584
	067 Move X1, [X20]
	068 Add X0, X31, 24
	069 Call Enumerator<Object>.Dispose, X0
	070 Move X20, 0xC6E000
	071 Move W8, [X20+3988]
	072 Compare W8, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x9AC000
	075 Move X0, [X0+4064]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X20+3988], W8
	079 Move X8, 0x9AC000
	080 Move X8, [X8+4064]
	081 Move X8, [X8]
	082 Move X8, [X8+184]
	083 Move W8, [X8]
	084 Compare W8, 0
	085 JumpIfEqual {91}
	086 Move X8, [X19]
	087 Move X0, X19
	088 Move X9, [X8+552]
	089 Move X1, [X8+560]
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Compare X19, 0
	092 JumpIfEqual {104}
	093 Move W0, W31
	094 Move [X19+216], W0
	095 Move X20, [X31+80]
	096 Move X19, [X31+88]
	097 Move X22, [X31+64]
	098 Move X21, [X31+72]
	099 Move X30, [X31+48]
	100 Move X23, [X31+56]
	101 Add X31, X31, 96
	102 Return 
	103 Call 0x1C17F20
	104 Call 0x1C17F20
	105 Move X20, X0
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X0, X20
	108 Call 0x3EB2AD0
	109 Move X21, [X0]
	110 Call 0x3EB2AE0
	111 Move X8, 0x9AC000
	112 Move X8, [X8+72]
	113 Add X0, X31, 24
	114 Move X1, [X8]
	115 Call Enumerator<Object>.Dispose, X0
	116 Compare X21, 0
	117 JumpIfEqual {70}
	118 Move X0, X21
	119 Call 0x1C17F18
	120 Move X21, X31
	121 Move X20, X0
	122 Move X8, 0x9AC000
	123 Move X8, [X8+72]
	124 Move X1, [X8]
	125 Add X0, X31, 24
	126 Call Enumerator<Object>.Dispose, X0
	127 Compare X21, 0
	128 JumpIfNotEqual {131}
	129 Move X0, X20
	130 Call 0x1D2D690
	131 Move X0, X21
	132 Call 0x1C17F18
	133 Call 0x1991590

Method: System.Void EnsureOptimizationTypeHasNotChanged()

Disassembly:
	0x037740B8 LDR X0, [X0 + 0xC30]
	0x037740BC BL 0x1C16D08
	0x037740C0 MOV X1, X0
	0x037740C4 MOV X0, X19
	0x037740C8 BL 0x1C16DEC
	0x037740CC STR X30, [X31 - 0x40]!
	0x037740D0 STP X24, X23, [X31 + 0x10]
	0x037740D4 STP X22, X21, [X31 + 0x20]
	0x037740D8 STP X20, X19, [X31 + 0x30]
	0x037740DC ADRP X23, 0xC6C000
	0x037740E0 LDRB W8, [X23 + 0xF26]
	0x037740E4 MOV X22, X3
	0x037740E8 MOV X21, X2
	0x037740EC MOV X20, X1
	0x037740F0 MOV X19, X0
	0x037740F4 TBNZ X8, 0x0, 0x377410C
	0x037740F8 ADRP X0, 0x9A7000
	0x037740FC LDR X0, [X0 + 0xD18]
	0x03774100 BL 0x1C16CF4
	0x03774104 MOVZ W8, 0x1
	0x03774108 STRB W8, [X23 + 0xF26]
	0x0377410C CBZ X19, 0x3774230
	0x03774110 ADRP X23, 0x9A7000
	0x03774114 LDR X23, [X23 + 0xD18]
	0x03774118 LDR X0, [X23]
	0x0377411C LDR W8, [X0 + 0xE0]
	0x03774120 CBNZ W8, 0x3774128
	0x03774124 BL 0x1C16DFC
	0x03774128 LDRSW X24, [X19 + 0x14]
	0x0377412C CBZ X22, 0x377414C
	0x03774130 LDR X0, [X23]
	0x03774134 MOV X8, X24
	0x03774138 LDR W9, [X0 + 0xE0]
	0x0377413C CBNZ W9, 0x3774148
	0x03774140 BL 0x1C16DFC
	0x03774144 LDRSW X8, [X19 + 0x14]
	0x03774148 ADD X22, X8, X22
	0x0377414C LDR X0, [X23]
	0x03774150 ADD X20, X24, X20
	0x03774154 ADD X21, X24, X21
	0x03774158 LDR W8, [X0 + 0xE0]
	0x0377415C CBNZ W8, 0x3774164
	0x03774160 BL 0x1C16DFC
	0x03774164 LDR W3, [X19 + 0x1C]
	0x03774168 CMP W3, 0x1
	0x0377416C B.NE 0x37741A0
	0x03774170 CBZ X22, 0x37741DC
	0x03774174 LDR X0, [X23]
	0x03774178 LDR W8, [X0 + 0xE0]
	0x0377417C CBNZ W8, 0x3774184
	0x03774180 BL 0x1C16DFC
	0x03774184 LDR W1, [X19 + 0x18]
	0x03774188 MOV X0, X22
	0x0377418C MOV X2, X31
	0x03774190 BL 0x37626D0
	0x03774194 TBZ X0, 0x0, 0x37741DC
	0x03774198 MOVZ W8, 0x1
	0x0377419C B 0x3774218
	0x037741A0 LDR X0, [X23]
	0x037741A4 LDR W8, [X0 + 0xE0]
	0x037741A8 CBNZ W8, 0x37741B4
	0x037741AC BL 0x1C16DFC
	0x037741B0 LDR W3, [X19 + 0x1C]
	0x037741B4 LDR W2, [X19 + 0x18]
	0x037741B8 MOV X0, X20
	0x037741BC MOV X1, X21
	0x037741C0 MOV X4, X22
	0x037741C4 LDP X20, X19, [X31 + 0x30]
	0x037741C8 LDP X22, X21, [X31 + 0x20]
	0x037741CC LDP X24, X23, [X31 + 0x10]
	0x037741D0 MOV X5, X31
	0x037741D4 LDR X30, [X31], #0x40
	0x037741D8 B 0x37626EC
	0x037741DC LDR X0, [X23]
	0x037741E0 LDR W8, [X0 + 0xE0]
	0x037741E4 CBNZ W8, 0x37741EC
	0x037741E8 BL 0x1C16DFC
	0x037741EC LDR W1, [X19 + 0x18]
	0x037741F0 MOV X0, X21
	0x037741F4 MOV X2, X31
	0x037741F8 BL 0x37626D0
	0x037741FC LDR W1, [X19 + 0x18]
	0x03774200 MOV W19, W0
	0x03774204 MOV X0, X20
	0x03774208 MOV X2, X31
	0x0377420C BL 0x37626D0
	0x03774210 EOR W8, W19, W0, 0x0
	0x03774214 EOR W8, W8, 0x1
	0x03774218 LDP X20, X19, [X31 + 0x30]
	0x0377421C LDP X22, X21, [X31 + 0x20]
	0x03774220 LDP X24, X23, [X31 + 0x10]
	0x03774224 AND W0, W8, 0x1
	0x03774228 LDR X30, [X31], #0x40
	0x0377422C RET
	0x03774230 BL 0x1C16F20
	0x03774234 STP X30, X19, [X31 - 0x10]!
	0x03774238 CBZ X0, 0x377425C
	0x0377423C MOV X19, X0
	0x03774240 BL 0x37729EC
	0x03774244 MOV X1, X31
	0x03774248 BL 0x380C47C
	0x0377424C MOV X1, X0
	0x03774250 MOV X0, X19
	0x03774254 LDP X30, X19, [X31], #0x10
	0x03774258 B 0x37742A4
	0x0377425C ADRP X0, 0x984000
	0x03774260 LDR X0, [X0 + 0x528]
	0x03774264 BL 0x1C16D08
	0x03774268 BL 0x1C16F10
	0x0377426C MOV X19, X0
	0x03774270 ADRP X0, 0x9A7000
	0x03774274 LDR X0, [X0 + 0xD60]
	0x03774278 BL 0x1C16D08
	0x0377427C MOV X1, X0
	0x03774280 MOV X0, X19
	0x03774284 MOV X2, X31
	0x03774288 BL 0x330E100
	0x0377428C ADRP X0, 0x9D2000
	0x03774290 LDR X0, [X0 + 0xC38]
	0x03774294 BL 0x1C16D08
	0x03774298 MOV X1, X0
	0x0377429C MOV X0, X19
	0x037742A0 BL 0x1C16DEC
	0x037742A4 STP X30, X21, [X31 - 0x20]!
	0x037742A8 STP X20, X19, [X31 + 0x10]
	0x037742AC ADRP X21, 0xC6C000
	0x037742B0 LDRB W8, [X21 + 0xF25]
	0x037742B4 MOV X19, X1
	0x037742B8 MOV X20, X0
	0x037742BC TBNZ X8, 0x0, 0x37742D4
	0x037742C0 ADRP X0, 0x9AA000
	0x037742C4 LDR X0, [X0 + 0xFE8]
	0x037742C8 BL 0x1C16CF4
	0x037742CC MOVZ W8, 0x1
	0x037742D0 STRB W8, [X21 + 0xF25]
	0x037742D4 CBZ X20, 0x3774304
	0x037742D8 CBZ X19, 0x3774324
	0x037742DC ADRP X8, 0x9AA000
	0x037742E0 LDR X8, [X8 + 0xFE8]
	0x037742E4 MOV X0, X20
	0x037742E8 MOV X1, X19
	0x037742EC LDP X20, X19, [X31 + 0x10]
	0x037742F0 LDR X8, [X8]
	0x037742F4 LDR X8, [X8 + 0xB8]
	0x037742F8 LDR X2, [X8 + 0x8]
	0x037742FC LDP X30, X21, [X31], #0x20
	0x03774300 B 0x3773FF4
	0x03774304 ADRP X0, 0x984000
	0x03774308 LDR X0, [X0 + 0x528]
	0x0377430C BL 0x1C16D08
	0x03774310 BL 0x1C16F10
	0x03774314 MOV X19, X0
	0x03774318 ADRP X0, 0x9A7000
	0x0377431C LDR X0, [X0 + 0xD60]
	0x03774320 B 0x3774340
	0x03774324 ADRP X0, 0x984000
	0x03774328 LDR X0, [X0 + 0x528]
	0x0377432C BL 0x1C16D08
	0x03774330 BL 0x1C16F10
	0x03774334 MOV X19, X0
	0x03774338 ADRP X0, 0x9A7000
	0x0377433C LDR X0, [X0 + 0xD88]
	0x03774340 BL 0x1C16D08
	0x03774344 MOV X1, X0
	0x03774348 MOV X0, X19
	0x0377434C MOV X2, X31
	0x03774350 BL 0x330E100
	0x03774354 ADRP X0, 0x9D2000
	0x03774358 LDR X0, [X0 + 0xC40]
	0x0377435C BL 0x1C16D08
	0x03774360 MOV X1, X0
	0x03774364 MOV X0, X19
	0x03774368 BL 0x1C16DEC
	0x0377436C STR X30, [X31 - 0x30]!
	0x03774370 STP X22, X21, [X31 + 0x10]
	0x03774374 STP X20, X19, [X31 + 0x20]
	0x03774378 CBZ X0, 0x37743E8
	0x0377437C MOV X19, X1
	0x03774380 CBZ X1, 0x3774408
	0x03774384 MOV X20, X0
	0x03774388 BL 0x37729EC
	0x0377438C MOV X1, X31
	0x03774390 BL 0x380C47C
	0x03774394 ADRP X22, 0xC6C000
	0x03774398 LDRB W8, [X22 + 0xF95]
	0x0377439C MOV X21, X0
	0x037743A0 CBNZ W8, 0x37743B8
	0x037743A4 ADRP X0, 0x9AA000
	0x037743A8 LDR X0, [X0 + 0xFE8]
	0x037743AC BL 0x1C16CF4
	0x037743B0 MOVZ W8, 0x1
	0x037743B4 STRB W8, [X22 + 0xF95]
	0x037743B8 ADRP X8, 0x9AA000
	0x037743BC LDR X8, [X8 + 0xFE8]
	0x037743C0 MOV X0, X20
	0x037743C4 MOV X1, X21
	0x037743C8 MOV X2, X19
	0x037743CC LDR X8, [X8]
	0x037743D0 LDP X20, X19, [X31 + 0x20]
	0x037743D4 LDP X22, X21, [X31 + 0x10]
	0x037743D8 LDR X8, [X8 + 0xB8]
	0x037743DC LDR X3, [X8 + 0x8]
	0x037743E0 LDR X30, [X31], #0x30
	0x037743E4 B 0x37740CC
	0x037743E8 ADRP X0, 0x984000
	0x037743EC LDR X0, [X0 + 0x528]
	0x037743F0 BL 0x1C16D08
	0x037743F4 BL 0x1C16F10
	0x037743F8 MOV X19, X0
	0x037743FC ADRP X0, 0x9A7000
	0x03774400 LDR X0, [X0 + 0xD60]
	0x03774404 B 0x3774424
	0x03774408 ADRP X0, 0x984000
	0x0377440C LDR X0, [X0 + 0x528]
	0x03774410 BL 0x1C16D08
	0x03774414 BL 0x1C16F10
	0x03774418 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X21, 0xC6D000
	009 Move X20, 0x9AB000
	010 Move W8, [X21+3869]
	011 Move X20, [X20+4064]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {58}
	017 Move X0, 0x980000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0x9AC000
	021 Move X0, [X0+72]
	022 Call 0x1C17CF4
	023 Move X0, 0x9AC000
	024 Move X0, [X0+80]
	025 Call 0x1C17CF4
	026 Move X0, 0x9AC000
	027 Move X0, [X0+88]
	028 Call 0x1C17CF4
	029 Move X0, 0x9A8000
	030 Move X0, [X0+3368]
	031 Call 0x1C17CF4
	032 Move X0, 0x9AB000
	033 Move X0, [X0+4064]
	034 Call 0x1C17CF4
	035 Move X0, 0x9AC000
	036 Move X0, [X0+96]
	037 Call 0x1C17CF4
	038 Move X0, 0x980000
	039 Move X0, [X0+2760]
	040 Call 0x1C17CF4
	041 Move X0, 0x9D3000
	042 Move X0, [X0+2992]
	043 Call 0x1C17CF4
	044 Move X0, 0x9D3000
	045 Move X0, [X0+3000]
	046 Call 0x1C17CF4
	047 Move X0, 0x9D3000
	048 Move X0, [X0+3008]
	049 Call 0x1C17CF4
	050 Move X0, 0x9D3000
	051 Move X0, [X0+3016]
	052 Call 0x1C17CF4
	053 Move X0, 0x9D3000
	054 Move X0, [X0+3024]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X21+3869], W8
	058 Move X8, [X20]
	059 Move [X31+40], X31
	060 Move [X31+48], X31
	061 Move [X31+56], X31
	062 Move [X31+24], X31
	063 Move [X31+32], X31
	064 Move X8, [X8+184]
	065 Move W8, [X8]
	066 Compare W8, 0
	067 JumpIfEqual {189}
	068 Move X8, [X19]
	069 Move X0, X19
	070 Move X9, [X8+552]
	071 Move X1, [X8+560]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move W8, [X19+216]
	074 Move X20, X0
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, 0x980000
	077 Move X8, [X8+2760]
	078 Move W1, 7
	079 Move X0, [X8]
	080 Call 0x1C17D6C
	081 Compare X0, 0
	082 JumpIfEqual {198}
	083 Move W8, [X0+24]
	084 Move X21, X0
	085 Compare W8, 0
	086 JumpIfEqual {197}
	087 Move X8, 0x9D3000
	088 Move X8, [X8+2992]
	089 Move X2, X31
	090 Move X8, [X8]
	091 Move [X21+32], X8
	092 Move X0, [X19+32]
	093 Move X1, [X19+40]
	094 Call InternedString.op_Implicit, X0
	095 Move W8, [X21+24]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move [X21+40], X0
	099 Move X8, 0x9D3000
	100 Move X8, [X8+3008]
	101 Move X0, X19
	102 Move X8, [X8]
	103 Move [X21+48], X8
	104 Call InputControl.get_path, X0
	105 Move W8, [X21+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move [X21+56], X0
	109 Move X8, 0x9D3000
	110 Move X8, [X8+3016]
	111 Move X23, 0x9A8000
	112 Add X1, X31, 16
	113 Move X8, [X8]
	114 Move [X21+64], X8
	115 Move W8, [X19+216]
	116 Move X23, [X23+3368]
	117 Move [X31+16], W8
	118 Move X0, [X23]
	119 Call 0x1C17E04
	120 Move X22, X0
	121 Move X0, [X23]
	122 Add X1, X31, 8
	123 Move [X31+8], W20
	124 Call 0x1C17E04
	125 Move X8, 0x9D3000
	126 Move X8, [X8+3000]
	127 Move X2, X0
	128 Move X1, X22
	129 Move X3, X31
	130 Move X8, [X8]
	131 Move X0, X8
	132 Call String.Format, X0, X1, X2
	133 Move W8, [X21+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move [X21+72], X0
	137 Move X8, 0x9D3000
	138 Move X8, [X8+3024]
	139 Move X0, X21
	140 Move X1, X31
	141 Move X8, [X8]
	142 Move [X21+80], X8
	143 Call String.Concat, X0
	144 Move X8, 0x980000
	145 Move X8, [X8+2600]
	146 Move X21, X0
	147 Move X8, [X8]
	148 Move W9, [X8+224]
	149 Compare W9, 0
	150 JumpIfNotEqual {153}
	151 Move X0, X8
	152 Call 0x1C17DFC
	153 Move X0, X21
	154 Move X1, X31
	155 Call Debug.LogError, X0
	156 Move [X19+216], W20
	157 Move W8, [X19+152]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X0, X19
	160 Call InputControl.get_children, X0
	161 Move X8, 0x9AC000
	162 Move X8, [X8+96]
	163 Move [X31+24], X0
	164 Move [X31+32], X1
	165 Add X0, X31, 24
	166 Move X9, [X8]
	167 Add X8, X31, 40
	168 Move X1, X9
	169 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	170 Move X19, 0x9AC000
	171 Move X20, 0x9AC000
	172 Move X19, [X19+80]
	173 Move X20, [X20+88]
	174 Move X1, [X19]
	175 Add X0, X31, 40
	176 Call Enumerator<Object>.MoveNext, X0
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {184}
	181 Move X1, [X20]
	182 Add X0, X31, 40
	183 Call Enumerator<Object>.get_Current, X0
	184 Move X8, 0x9AC000
	185 Move X8, [X8+72]
	186 Add X0, X31, 40
	187 Move X1, [X8]
	188 Call Enumerator<Object>.Dispose, X0
	189 Move X20, [X31+96]
	190 Move X19, [X31+104]
	191 Move X22, [X31+80]
	192 Move X21, [X31+88]
	193 Move X30, [X31+64]
	194 Move X23, [X31+72]
	195 Add X31, X31, 112
	196 Return 
	197 Call 0x1C17F28
	198 Call 0x1C17F20
	199 Move X20, X0
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move X0, X20
	202 Call 0x3EB2AD0
	203 Move X19, [X0]
	204 Call 0x3EB2AE0
	205 Move X8, 0x9AC000
	206 Move X8, [X8+72]
	207 Add X0, X31, 40
	208 Move X1, [X8]
	209 Call Enumerator<Object>.Dispose, X0
	210 Compare X19, 0
	211 JumpIfEqual {189}
	212 Move X0, X19
	213 Call 0x1C17F18
	214 Move X19, X31
	215 Move X20, X0
	216 Move X8, 0x9AC000
	217 Move X8, [X8+72]
	218 Move X1, [X8]
	219 Add X0, X31, 40
	220 Call Enumerator<Object>.Dispose, X0
	221 Compare X19, 0
	222 JumpIfNotEqual {225}
	223 Move X0, X20
	224 Call 0x1D2D690
	225 Move X0, X19
	226 Call 0x1C17F18
	227 Call 0x1991590

Method: System.Boolean get_isSetupFinished()

Disassembly:
	0x0377441C ADRP X0, 0x9A7000
	0x03774420 LDR X0, [X0 + 0xD88]
	0x03774424 BL 0x1C16D08

ISIL:
	001 Move W8, [X0+160]
	002 Move W0, W8
	003 ShiftRight W0, 5
	004 And W0, W0, 31
	005 Return X0

Method: System.Void set_isSetupFinished(System.Boolean value)

Disassembly:
	0x03774428 MOV X1, X0
	0x0377442C MOV X0, X19
	0x03774430 MOV X2, X31
	0x03774434 BL 0x330E100
	0x03774438 ADRP X0, 0x9D2000
	0x0377443C LDR X0, [X0 + 0xC48]
	0x03774440 BL 0x1C16D08
	0x03774444 MOV X1, X0

ISIL:
	001 Move W8, [X0+160]
	002 And W31, W1, 1
	003 Move W9, 32
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFDF
	006 Or W8, W8, W9
	007 Move [X0+160], W8
	008 Return 

Method: System.Boolean get_isButton()

Disassembly:
	0x03774448 MOV X0, X19
	0x0377444C BL 0x1C16DEC
	0x03774450 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move W8, [X0+160]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: System.Void set_isButton(System.Boolean value)

Disassembly:
	0x03774454 STP X20, X19, [X31 + 0x10]
	0x03774458 CBZ X0, 0x3774494
	0x0377445C MOV X20, X1
	0x03774460 CBZ X1, 0x37744B4
	0x03774464 MOV X19, X2
	0x03774468 MOV X21, X0
	0x0377446C BL 0x37729EC
	0x03774470 MOV X1, X31

ISIL:
	001 Move W8, [X0+160]
	002 And W31, W1, 1
	003 Move W9, 8
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFF7
	006 Or W8, W8, W9
	007 Move [X0+160], W8
	008 Return 

Method: System.Boolean get_isConfigUpToDate()

Disassembly:
	0x037739CC MOV X20, X1
	0x037739D0 CBZ X1, 0x3773A2C
	0x037739D4 MOV W19, W2

ISIL:
	001 Move W8, [X0+160]
	002 And W0, W8, 1
	003 Return X0

Method: System.Void set_isConfigUpToDate(System.Boolean value)

Disassembly:
	0x037739D8 MOV X21, X0
	0x037739DC BL 0x37729EC
	0x037739E0 MOV X1, X31
	0x037739E4 BL 0x380C47C

ISIL:
	001 Move W8, [X0+160]
	002 NotImplemented "Instruction BFM not yet implemented."
	003 Move [X0+160], W8
	004 Return 

Method: System.Boolean get_dontReset()

Disassembly:
	0x03774474 BL 0x380C47C
	0x03774478 MOV X2, X20
	0x0377447C MOV X3, X19

ISIL:
	001 Move W8, [X0+160]
	002 Move W0, W8
	003 ShiftRight W0, 4
	004 And W0, W0, 15
	005 Return X0

Method: System.Void set_dontReset(System.Boolean value)

Disassembly:
	0x03774480 LDP X20, X19, [X31 + 0x10]
	0x03774484 MOV X1, X0
	0x03774488 MOV X0, X21
	0x0377448C LDP X30, X21, [X31], #0x20
	0x03774490 B 0x37740CC
	0x03774494 ADRP X0, 0x984000
	0x03774498 LDR X0, [X0 + 0x528]
	0x0377449C BL 0x1C16D08

ISIL:
	001 Move W8, [X0+160]
	002 And W31, W1, 1
	003 Move W9, 16
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFEF
	006 Or W8, W8, W9
	007 Move [X0+160], W8
	008 Return 

Method: System.Boolean get_usesStateFromOtherControl()

Disassembly:
	0x037744A0 BL 0x1C16F10
	0x037744A4 MOV X19, X0
	0x037744A8 ADRP X0, 0x9A7000

ISIL:
	001 Move W8, [X0+160]
	002 Move W0, W8
	003 ShiftRight W0, 6
	004 And W0, W0, 63
	005 Return X0

Method: System.Void set_usesStateFromOtherControl(System.Boolean value)

Disassembly:
	0x037744AC LDR X0, [X0 + 0xD60]
	0x037744B0 B 0x37744D0
	0x037744B4 ADRP X0, 0x984000
	0x037744B8 LDR X0, [X0 + 0x528]
	0x037744BC BL 0x1C16D08
	0x037744C0 BL 0x1C16F10
	0x037744C4 MOV X19, X0
	0x037744C8 ADRP X0, 0x9A7000

ISIL:
	001 Move W8, [X0+160]
	002 And W31, W1, 1
	003 Move W9, 64
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFBF
	006 Or W8, W8, W9
	007 Move [X0+160], W8
	008 Return 

Method: System.Boolean get_hasDefaultState()

Disassembly:
	0x037744CC LDR X0, [X0 + 0xD88]
	0x037744D0 BL 0x1C16D08
	0x037744D4 MOV X1, X0
	0x037744D8 MOV X0, X19
	0x037744DC MOV X2, X31
	0x037744E0 BL 0x330E100
	0x037744E4 ADRP X0, 0x9D2000
	0x037744E8 LDR X0, [X0 + 0xC50]

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 168
	003 Move X1, X31
	004 Call PrimitiveValue.get_isEmpty, X0
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W0, W8, 1
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void CallFinishSetupRecursive()

Disassembly:
	0x037744EC BL 0x1C16D08
	0x037744F0 MOV X1, X0
	0x037744F4 MOV X0, X19
	0x037744F8 BL 0x1C16DEC
	0x037744FC STR X30, [X31 - 0x20]!
	0x03774500 STP X20, X19, [X31 + 0x10]
	0x03774504 CBZ X0, 0x3774540
	0x03774508 MOV X19, X1
	0x0377450C CBZ X1, 0x3774560
	0x03774510 MOV X20, X0
	0x03774514 BL 0x37729EC
	0x03774518 MOV X1, X31
	0x0377451C BL 0x380C47C
	0x03774520 LDR X8, [X20]
	0x03774524 MOV X1, X0
	0x03774528 MOV X0, X20
	0x0377452C MOV X2, X19
	0x03774530 LDP X4, X3, [X8 + 0x1F8]
	0x03774534 LDP X20, X19, [X31 + 0x10]
	0x03774538 LDR X30, [X31], #0x20
	0x0377453C BR X4
	0x03774540 ADRP X0, 0x984000
	0x03774544 LDR X0, [X0 + 0x528]
	0x03774548 BL 0x1C16D08
	0x0377454C BL 0x1C16F10
	0x03774550 MOV X19, X0
	0x03774554 ADRP X0, 0x9A7000
	0x03774558 LDR X0, [X0 + 0xD60]
	0x0377455C B 0x377457C
	0x03774560 ADRP X0, 0x984000
	0x03774564 LDR X0, [X0 + 0x528]
	0x03774568 BL 0x1C16D08
	0x0377456C BL 0x1C16F10
	0x03774570 MOV X19, X0
	0x03774574 ADRP X0, 0x9A7000
	0x03774578 LDR X0, [X0 + 0xD88]
	0x0377457C BL 0x1C16D08
	0x03774580 MOV X1, X0
	0x03774584 MOV X0, X19
	0x03774588 MOV X2, X31
	0x0377458C BL 0x330E100
	0x03774590 ADRP X0, 0x9D2000
	0x03774594 LDR X0, [X0 + 0xC58]
	0x03774598 BL 0x1C16D08
	0x0377459C MOV X1, X0
	0x037745A0 MOV X0, X19
	0x037745A4 BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC6D000
	007 Move W8, [X20+3870]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x9A8000
	014 Move X0, [X0+3392]
	015 Call 0x1C17CF4
	016 Move X0, 0x9A8000
	017 Move X0, [X0+3400]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3870], W8
	021 Move X0, X19
	022 Call InputControl.get_children, X0
	023 Move X8, X1
	024 ShiftRight X8, 32
	025 And X8, X8, 0x7FFFFFFF
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move [X31], X0
	028 Move [X31+8], X1
	029 Move X21, 0x9A8000
	030 Move X21, [X21+3400]
	031 Move W20, W31
	032 Move X2, [X21]
	033 Add X0, X31, 0
	034 Move W1, W20
	035 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Call InputControl.CallFinishSetupRecursive, X0
	039 Move W8, [X31+12]
	040 Add W20, W20, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, [X19]
	043 Move X0, X19
	044 Move X9, [X8+520]
	045 Move X1, [X8+528]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X0, X19
	048 Move X1, X31
	049 Call 0x3780584
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+16]
	053 Move X21, [X31+24]
	054 Add X31, X31, 48
	055 Return 
	056 Call 0x1C17F20

Method: System.String MakeChildPath(System.String path)

Disassembly:
	0x037738B0 LDRB W8, [X19 + 0x5AA]
	0x037738B4 MOV V9.16B, V0.16B
	0x037738B8 CBNZ W8, 0x37738D0
	0x037738BC ADRP X0, 0x987000
	0x037738C0 LDR X0, [X0 + 0x4B8]
	0x037738C4 BL 0x1C16CF4
	0x037738C8 MOVZ W8, 0x1
	0x037738CC STRB W8, [X19 + 0x5AA]
	0x037738D0 ADRP X8, 0x987000
	0x037738D4 LDR X8, [X8 + 0x4B8]
	0x037738D8 ADRP X9, 0xFFFFFFFFFD377000
	0x037738DC LDR V0, [X9 + 0x240]
	0x037738E0 FABS S1, S8
	0x037738E4 LDR X8, [X8]
	0x037738E8 FMOV S2, W31
	0x037738EC FMAXNM S1, S1, S2
	0x037738F0 FMOV S4, 8
	0x037738F4 LDR X8, [X8 + 0xB8]
	0x037738F8 FMUL S1, S1, S0
	0x037738FC FABD S0, S2, S2
	0x03773900 LDR V3, [X8]
	0x03773904 FMUL S2, S3, S4
	0x03773908 FCMP S1, S2
	0x0377390C FCSEL S1, S1, S2, GT
	0x03773910 FCMP S0, S1
	0x03773914 CSET W0, MI
	0x03773918 FCMP S9, 0x0
	0x0377391C B.MI 0x377393C
	0x03773920 FCMP S0, S1
	0x03773924 B.PL 0x3773934
	0x03773928 FCMP S9, 0x0
	0x0377392C CSET W0, GT
	0x03773930 B 0x377393C
	0x03773934 FCMP S9, S8
	0x03773938 CSET W0, GE
	0x0377393C LDP X30, X19, [X31 + 0x10]
	0x03773940 LDP D9, D8, [X31], #0x20
	0x03773944 RET
	0x03773948 BL 0x1C16F20
	0x0377394C STP X30, X19, [X31 - 0x10]!
	0x03773950 CBZ X0, 0x3773978
	0x03773954 MOV X19, X0
	0x03773958 BL 0x37729EC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC6E000
	006 Move W8, [X21+3871]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x9D4000
	014 Move X0, [X0+2952]
	015 Call 0x1C17CF4
	016 Move X0, 0x982000
	017 Move X0, [X0+3784]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3871], W8
	021 Compare X20, 0
	022 JumpIfEqual {34}
	023 Move X8, 0x9D4000
	024 Move X8, [X8+2952]
	025 Move X9, [X20]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X21, 0x982000
	035 Move X21, [X21+3784]
	036 Move X0, X20
	037 Call InputControl.get_path, X0
	038 Move X1, [X21]
	039 Move X2, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X3, X31
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call String.Concat, X0, X1, X2
	046 Return X0
	047 Move X0, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0

Method: System.Void BakeOffsetIntoStateBlockRecursive(System.UInt32 offset)

Disassembly:
	0x037745A8 STR X30, [X31 - 0x20]!
	0x037745AC STP X20, X19, [X31 + 0x10]
	0x037745B0 STR X1, [X31 + 0x8]
	0x037745B4 CBZ X0, 0x3774618
	0x037745B8 MOV X19, X0
	0x037745BC ADD X0, X31, 0x8
	0x037745C0 MOV X1, X31
	0x037745C4 BL 0x37F80A4
	0x037745C8 TBZ X0, 0x0, 0x3774638
	0x037745CC LDR X1, [X31 + 0x8]
	0x037745D0 MOV X0, X19
	0x037745D4 BL 0x3773B98
	0x037745D8 CBZ X0, 0x3774608
	0x037745DC MOV X20, X0
	0x037745E0 MOV X0, X19
	0x037745E4 BL 0x37729EC
	0x037745E8 MOV X1, X31
	0x037745EC BL 0x380C47C
	0x037745F0 LDR X8, [X19]
	0x037745F4 MOV X1, X0
	0x037745F8 MOV X0, X19
	0x037745FC MOV X2, X20
	0x03774600 LDP X9, X3, [X8 + 0x1F8]
	0x03774604 BLR X9
	0x03774608 LDP X20, X19, [X31 + 0x10]
	0x0377460C AND W0, W0, 0x1
	0x03774610 LDR X30, [X31], #0x20
	0x03774614 RET
	0x03774618 ADRP X0, 0x984000
	0x0377461C LDR X0, [X0 + 0x528]
	0x03774620 BL 0x1C16D08
	0x03774624 BL 0x1C16F10
	0x03774628 MOV X19, X0
	0x0377462C ADRP X0, 0x9A7000
	0x03774630 LDR X0, [X0 + 0xD60]
	0x03774634 B 0x3774654
	0x03774638 ADRP X0, 0x984000
	0x0377463C LDR X0, [X0 + 0x528]
	0x03774640 BL 0x1C16D08
	0x03774644 BL 0x1C16F10
	0x03774648 MOV X19, X0
	0x0377464C ADRP X0, 0x9A7000
	0x03774650 LDR X0, [X0 + 0xD70]
	0x03774654 BL 0x1C16D08
	0x03774658 MOV X1, X0
	0x0377465C MOV X0, X19
	0x03774660 MOV X2, X31
	0x03774664 BL 0x330E100
	0x03774668 ADRP X0, 0x9D2000
	0x0377466C LDR X0, [X0 + 0xC60]
	0x03774670 BL 0x1C16D08
	0x03774674 MOV X1, X0
	0x03774678 MOV X0, X19
	0x0377467C BL 0x1C16DEC
	0x03774680 STR X30, [X31 - 0x50]!

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0xC6D000
	008 Move X22, 0x9A8000
	009 Move W8, [X21+3872]
	010 Move X22, [X22+3352]
	011 Move W19, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x9A8000
	018 Move X0, [X0+3352]
	019 Call 0x1C17CF4
	020 Move X0, 0x9A8000
	021 Move X0, [X0+3392]
	022 Call 0x1C17CF4
	023 Move X0, 0x9A8000
	024 Move X0, [X0+3400]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3872], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move W8, [X20+20]
	034 Move X0, X20
	035 Add W8, W8, W19
	036 Move [X20+20], W8
	037 Call InputControl.get_children, X0
	038 Move X8, X1
	039 ShiftRight X8, 32
	040 And X8, X8, 0x7FFFFFFF
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move [X31], X0
	043 Move [X31+8], X1
	044 Move X21, 0x9A8000
	045 Move X21, [X21+3400]
	046 Move W20, W31
	047 Move X2, [X21]
	048 Add X0, X31, 0
	049 Move W1, W20
	050 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {65}
	053 Move W1, W19
	054 Call InputControl.BakeOffsetIntoStateBlockRecursive, X0, X1
	055 Move W8, [X31+12]
	056 Add W20, W20, 1
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X30, [X31+16]
	063 Add X31, X31, 64
	064 Return 
	065 Call 0x1C17F20

Method: System.Int32 GetDeviceIndex()

Disassembly:
	0x037739EC MOV X2, X20
	0x037739F0 MOV W3, W19
	0x037739F4 LDP X20, X19, [X31 + 0x10]
	0x037739F8 LDP X5, X4, [X8 + 0x1C8]
	0x037739FC MOV X1, X0
	0x03773A00 MOV X0, X21
	0x03773A04 LDP X30, X21, [X31], #0x20
	0x03773A08 BR X5
	0x03773A0C ADRP X0, 0x985000
	0x03773A10 LDR X0, [X0 + 0x528]
	0x03773A14 BL 0x1C16D08
	0x03773A18 BL 0x1C16F10
	0x03773A1C MOV X19, X0
	0x03773A20 ADRP X0, 0x9A8000
	0x03773A24 LDR X0, [X0 + 0xD60]
	0x03773A28 B 0x3773A48
	0x03773A2C ADRP X0, 0x985000
	0x03773A30 LDR X0, [X0 + 0x528]
	0x03773A34 BL 0x1C16D08
	0x03773A38 BL 0x1C16F10
	0x03773A3C MOV X19, X0
	0x03773A40 ADRP X0, 0x9AB000
	0x03773A44 LDR X0, [X0 + 0xF48]
	0x03773A48 BL 0x1C16D08
	0x03773A4C MOV X1, X0
	0x03773A50 MOV X0, X19
	0x03773A54 MOV X2, X31
	0x03773A58 BL 0x330E100
	0x03773A5C ADRP X0, 0x9D3000
	0x03773A60 LDR X0, [X0 + 0xBE8]
	0x03773A64 BL 0x1C16D08
	0x03773A68 MOV X1, X0
	0x03773A6C MOV X0, X19
	0x03773A70 BL 0x1C16DEC
	0x03773A74 STR X30, [X31 - 0x20]!
	0x03773A78 STP X20, X19, [X31 + 0x10]
	0x03773A7C CBZ X0, 0x3773AD0
	0x03773A80 ADRP X20, 0xC68000
	0x03773A84 LDRB W8, [X20 + 0xA03]
	0x03773A88 MOV X19, X0
	0x03773A8C CBNZ W8, 0x3773AA4
	0x03773A90 ADRP X0, 0x9AB000
	0x03773A94 LDR X0, [X0 + 0xFE8]
	0x03773A98 BL 0x1C16CF4
	0x03773A9C MOVZ W8, 0x1
	0x03773AA0 STRB W8, [X20 + 0xA03]
	0x03773AA4 ADRP X8, 0x9AB000
	0x03773AA8 LDR X8, [X8 + 0xFE8]
	0x03773AAC LDR X9, [X19]
	0x03773AB0 MOV X0, X19
	0x03773AB4 LDP X20, X19, [X31 + 0x10]
	0x03773AB8 LDR X8, [X8]
	0x03773ABC LDP X3, X2, [X9 + 0x1B8]
	0x03773AC0 LDR X8, [X8 + 0xB8]
	0x03773AC4 LDR X1, [X8]
	0x03773AC8 LDR X30, [X31], #0x20
	0x03773ACC BR X3
	0x03773AD0 ADRP X0, 0x985000
	0x03773AD4 LDR X0, [X0 + 0x528]
	0x03773AD8 BL 0x1C16D08
	0x03773ADC BL 0x1C16F10
	0x03773AE0 MOV X19, X0
	0x03773AE4 ADRP X0, 0x9A8000
	0x03773AE8 LDR X0, [X0 + 0xD60]
	0x03773AEC BL 0x1C16D08
	0x03773AF0 MOV X1, X0
	0x03773AF4 MOV X0, X19
	0x03773AF8 MOV X2, X31
	0x03773AFC BL 0x330E100
	0x03773B00 ADRP X0, 0x9D3000
	0x03773B04 LDR X0, [X0 + 0xBF0]
	0x03773B08 BL 0x1C16D08
	0x03773B0C MOV X1, X0
	0x03773B10 MOV X0, X19
	0x03773B14 BL 0x1C16DEC
	0x03773B18 STP X30, X19, [X31 - 0x10]!
	0x03773B1C CBZ X0, 0x3773B50
	0x03773B20 MOV X19, X0
	0x03773B24 BL 0x3773B98
	0x03773B28 CBZ X0, 0x3773B44
	0x03773B2C LDR X8, [X19]
	0x03773B30 MOV X1, X0
	0x03773B34 MOV X0, X19
	0x03773B38 LDP X3, X2, [X8 + 0x1B8]
	0x03773B3C LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+120]
	006 Compare X8, 0
	007 JumpIfEqual {16}
	008 Move W8, [X8+232]
	009 Add W31, W8, 1
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move W0, W8
	013 Move X30, [X31+32]
	014 Move X21, [X31+40]
	015 Return X0
	016 Call 0x1C17F20
	017 Move X8, 0x981000
	018 Move X8, [X8+2760]
	019 Move X20, X0
	020 Move X0, X8
	021 Call 0x1C17D08
	022 Move W1, 5
	023 Call 0x1C17D6C
	024 Move X19, X0
	025 Call 0x19913C0
	026 Move X0, 0x9D4000
	027 Move X0, [X0+2960]
	028 Call 0x1C17D08
	029 Move X2, X0
	030 Move X0, X19
	031 Move X1, X31
	032 Call 0x1994444
	033 Move X0, X20
	034 Call InputControl.get_path, X0
	035 Move X21, X0
	036 Move X0, X19
	037 Call 0x19913C0
	038 Move W1, 1
	039 Move X0, X19
	040 Move X2, X21
	041 Call 0x1994444
	042 Move X0, X19
	043 Call 0x19913C0
	044 Move X0, 0x9D4000
	045 Move X0, [X0+2968]
	046 Call 0x1C17D08
	047 Move X2, X0
	048 Move W1, 2
	049 Move X0, X19
	050 Call 0x1994444
	051 Move X20, [X20+120]
	052 Move X0, X20
	053 Call 0x19913C0
	054 Move X0, X20
	055 Call InputControl.get_name, X0
	056 Move X20, X0
	057 Move X0, X19
	058 Call 0x19913C0
	059 Move W1, 3
	060 Move X0, X19
	061 Move X2, X20
	062 Call 0x1994444
	063 Move X0, X19
	064 Call 0x19913C0
	065 Move X0, 0x9D4000
	066 Move X0, [X0+2976]
	067 Call 0x1C17D08
	068 Move X2, X0
	069 Move W1, 4
	070 Move X0, X19
	071 Call 0x1994444
	072 Move X0, X19
	073 Move X1, X31
	074 Call String.Concat, X0
	075 Move X19, X0
	076 Move X0, 0x981000
	077 Move X0, [X0+1456]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X1, X19
	081 Move X2, X31
	082 Move X20, X0
	083 Call InvalidOperationException..ctor, X0, X1
	084 Move X0, 0x9D4000
	085 Move X0, [X0+2984]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Call 0x1C17DEC

Method: System.Boolean IsValueConsideredPressed(System.Single value)

Disassembly:
	0x03774684 STP X26, X25, [X31 + 0x10]
	0x03774688 STP X24, X23, [X31 + 0x20]
	0x0377468C STP X22, X21, [X31 + 0x30]
	0x03774690 STP X20, X19, [X31 + 0x40]
	0x03774694 ADRP X22, 0xC6C000
	0x03774698 LDRB W8, [X22 + 0xF27]
	0x0377469C MOV X21, X2
	0x037746A0 MOV X20, X1
	0x037746A4 MOV X19, X0
	0x037746A8 TBNZ X8, 0x0, 0x37746CC
	0x037746AC ADRP X0, 0x9D2000
	0x037746B0 LDR X0, [X0 + 0xC68]
	0x037746B4 BL 0x1C16CF4
	0x037746B8 ADRP X0, 0x9A7000
	0x037746BC LDR X0, [X0 + 0xD18]
	0x037746C0 BL 0x1C16CF4
	0x037746C4 MOVZ W8, 0x1
	0x037746C8 STRB W8, [X22 + 0xF27]
	0x037746CC MOVZ W8, 0x5441
	0x037746D0 MOVK W8, 0x444C0000
	0x037746D4 CMP W21, W8
	0x037746D8 STR W31, [X31 + 0xC]
	0x037746DC B.EQ 0x3774730
	0x037746E0 MOVZ W8, 0x4154
	0x037746E4 MOVK W8, 0x53540000
	0x037746E8 CMP W21, W8
	0x037746EC B.NE 0x37748DC
	0x037746F0 MOV X0, X20
	0x037746F4 MOV X1, X31
	0x037746F8 BL 0x38029AC
	0x037746FC STR W31, [X31 + 0xC]
	0x03774700 CBZ X0, 0x37748D8
	0x03774704 LDR W25, [X0 + 0x14]
	0x03774708 MOV X1, X31
	0x0377470C MOV X22, X0
	0x03774710 BL 0x3802C74
	0x03774714 MOV W21, W0
	0x03774718 MOV X0, X22
	0x0377471C MOV X1, X31
	0x03774720 BL 0x3807298
	0x03774724 MOV X22, X0
	0x03774728 MOV W24, W31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC6D000
	007 Move X20, 0x9A8000
	008 Move W8, [X21+3873]
	009 Move X20, [X20+3216]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9A8000
	017 Move X0, [X0+3216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3873], W8
	021 Move W8, [X19+160]
	022 Move X1, [X20]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 8
	025 Compare TEMP, 8
	026 JumpIfEqual {29}
	027 Move X8, [X1+184]
	028 Move V0, [X8]
	029 Move X8, [X19]
	030 Move W9, [X1+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X8+200]
	034 Add X8, X8, X9
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X1, X31
	039 Call ButtonControl.get_pressPointOrDefault, X0
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Move X21, [X31+24]
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Move V8, [X31+48]
	047 Return X0
	048 Move X0, X19
	049 Call 0x1C181E0

Method: System.Void AddProcessor(System.Object first)

Disassembly:
	0x0377472C B 0x3774768

ISIL:
	001 Return 

Method: System.Void MarkAsStale()

Disassembly:
	0x03774730 MOV X0, X20
	0x03774734 MOV X1, X31
	0x03774738 BL 0x3800804

ISIL:
	001 Move W8, 257
	002 NotImplemented "Instruction STRH not yet implemented."
	003 Return 

Method: System.Void MarkAsStaleRecursively()

Disassembly:
	0x03773CEC CBZ X0, 0x3773D88
	0x03773CF0 MOV X20, X1
	0x03773CF4 CBZ X1, 0x3773DA8
	0x03773CF8 LDR X8, [X0]
	0x03773CFC MOV X21, X0
	0x03773D00 LDP X9, X1, [X8 + 0x188]
	0x03773D04 BLR X9
	0x03773D08 MOV W22, W0
	0x03773D0C SXTW X0, W22
	0x03773D10 MOVZ W1, 0x8
	0x03773D14 MOVZ W2, 0x2
	0x03773D18 MOV X3, X31
	0x03773D1C BL 0x3C00000
	0x03773D20 MOV X19, X0
	0x03773D24 MOV X0, X21
	0x03773D28 BL 0x37729EC
	0x03773D2C MOV X1, X31
	0x03773D30 BL 0x380C47C
	0x03773D34 MOV X1, X0
	0x03773D38 LDR X8, [X21]
	0x03773D3C LDP X9, X4, [X8 + 0x1C8]
	0x03773D40 MOV X0, X21
	0x03773D44 MOV X2, X19
	0x03773D48 MOV W3, W22
	0x03773D4C BLR X9
	0x03773D50 LDR X8, [X21]
	0x03773D54 LDP X9, X4, [X8 + 0x1D8]
	0x03773D58 MOV X0, X21
	0x03773D5C MOV X1, X19
	0x03773D60 MOV W2, W22
	0x03773D64 MOV X3, X20
	0x03773D68 BLR X9
	0x03773D6C MOV X0, X19
	0x03773D70 LDP X20, X19, [X31 + 0x20]
	0x03773D74 LDP X22, X21, [X31 + 0x10]
	0x03773D78 MOVZ W1, 0x2
	0x03773D7C MOV X2, X31
	0x03773D80 LDR X30, [X31], #0x30
	0x03773D84 B 0x3C00054
	0x03773D88 ADRP X0, 0x985000
	0x03773D8C LDR X0, [X0 + 0x528]
	0x03773D90 BL 0x1C16D08
	0x03773D94 BL 0x1C16F10
	0x03773D98 MOV X19, X0
	0x03773D9C ADRP X0, 0x9A8000
	0x03773DA0 LDR X0, [X0 + 0xD60]
	0x03773DA4 B 0x3773DC4
	0x03773DA8 ADRP X0, 0x985000
	0x03773DAC LDR X0, [X0 + 0x528]
	0x03773DB0 BL 0x1C16D08
	0x03773DB4 BL 0x1C16F10
	0x03773DB8 MOV X19, X0
	0x03773DBC ADRP X0, 0x9A8000
	0x03773DC0 LDR X0, [X0 + 0xD88]
	0x03773DC4 BL 0x1C16D08
	0x03773DC8 MOV X1, X0
	0x03773DCC MOV X0, X19
	0x03773DD0 MOV X2, X31
	0x03773DD4 BL 0x330E100
	0x03773DD8 ADRP X0, 0x9D3000
	0x03773DDC LDR X0, [X0 + 0xC10]
	0x03773DE0 BL 0x1C16D08
	0x03773DE4 MOV X1, X0
	0x03773DE8 MOV X0, X19
	0x03773DEC BL 0x1C16DEC
	0x03773DF0 B 0x3773DF8
	0x03773DF4 B 0x3773DF8
	0x03773DF8 MOV X20, X0
	0x03773DFC CMP W1, 0x1
	0x03773E00 B.NE 0x3773E38
	0x03773E04 MOV X0, X20
	0x03773E08 BL 0x3EB1AD0
	0x03773E0C LDR X21, [X0]
	0x03773E10 BL 0x3EB1AE0
	0x03773E14 MOVZ W1, 0x2
	0x03773E18 MOV X0, X19
	0x03773E1C MOV X2, X31
	0x03773E20 BL 0x3C00054
	0x03773E24 CBNZ X21, 0x3773E40
	0x03773E28 LDP X20, X19, [X31 + 0x20]
	0x03773E2C LDP X22, X21, [X31 + 0x10]
	0x03773E30 LDR X30, [X31], #0x30
	0x03773E34 RET
	0x03773E38 MOV X21, X31
	0x03773E3C B 0x3773E4C
	0x03773E40 MOV X0, X21
	0x03773E44 BL 0x1C16F18
	0x03773E48 MOV X20, X0
	0x03773E4C MOVZ W1, 0x2
	0x03773E50 MOV X0, X19
	0x03773E54 MOV X2, X31
	0x03773E58 BL 0x3C00054
	0x03773E5C CBNZ X21, 0x3773E68
	0x03773E60 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X20, 0xC6E000
	010 Move X24, 0x9AD000
	011 Move W8, [X20+3874]
	012 Move X24, [X24+96]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x9AD000
	019 Move X0, [X0+72]
	020 Call 0x1C17CF4
	021 Move X0, 0x9AD000
	022 Move X0, [X0+80]
	023 Call 0x1C17CF4
	024 Move X0, 0x9AD000
	025 Move X0, [X0+88]
	026 Call 0x1C17CF4
	027 Move X0, 0x9AD000
	028 Move X0, [X0+96]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3874], W8
	032 Move X21, 0x9AD000
	033 Move X22, 0x9AD000
	034 Move X20, 0x9AD000
	035 Move X21, [X21+80]
	036 Move X22, [X22+88]
	037 Move X20, [X20+72]
	038 Move W23, 257
	039 Move X0, X19
	040 Move [X31+24], X31
	041 Move [X31+32], X31
	042 Move [X31+40], X31
	043 NotImplemented "Instruction STRH not yet implemented."
	044 Call InputControl.get_children, X0
	045 Move X9, [X24]
	046 Move [X31+8], X0
	047 Move [X31+16], X1
	048 Add X8, X31, 24
	049 Add X0, X31, 8
	050 Move X1, X9
	051 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	052 Move X1, [X21]
	053 Add X0, X31, 24
	054 Call Enumerator<Object>.MoveNext, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {65}
	059 Move X1, [X22]
	060 Add X0, X31, 24
	061 Call Enumerator<Object>.get_Current, X0
	062 Compare X0, 0
	063 JumpIfEqual {77}
	064 NotImplemented "Instruction STRH not yet implemented."
	065 Move X1, [X20]
	066 Add X0, X31, 24
	067 Call Enumerator<Object>.Dispose, X0
	068 Move X20, [X31+96]
	069 Move X19, [X31+104]
	070 Move X22, [X31+80]
	071 Move X21, [X31+88]
	072 Move X24, [X31+64]
	073 Move X23, [X31+72]
	074 Move X30, [X31+48]
	075 Add X31, X31, 112
	076 Return 
	077 Call 0x1C17F20
	078 Move X19, X0
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, X19
	081 Call 0x3EB2AD0
	082 Move X20, [X0]
	083 Call 0x3EB2AE0
	084 Move X8, 0x9AD000
	085 Move X8, [X8+72]
	086 Add X0, X31, 24
	087 Move X1, [X8]
	088 Call Enumerator<Object>.Dispose, X0
	089 Compare X20, 0
	090 JumpIfEqual {68}
	091 Move X0, X20
	092 Call 0x1C17F18
	093 Move X20, X31
	094 Move X19, X0
	095 Move X8, 0x9AD000
	096 Move X8, [X8+72]
	097 Move X1, [X8]
	098 Add X0, X31, 24
	099 Call Enumerator<Object>.Dispose, X0
	100 Compare X20, 0
	101 JumpIfNotEqual {104}
	102 Move X0, X19
	103 Call 0x1D2D690
	104 Move X0, X20
	105 Call 0x1C17F18
	106 Call 0x1991590

