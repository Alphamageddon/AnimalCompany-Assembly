Type: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation

Method: UnityEngine.InputSystem.InputAction get_action()

Disassembly:
	0x0374410C BL 0x217C6AC
	0x03744110 LDR X3, [X26]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Nullable`1<UnityEngine.InputSystem.InputBinding> get_bindingMask()

Disassembly:
	0x03744114 MOV X0, X20
	0x03744118 MOV W1, W22
	0x0374411C MOV W2, W21
	0x03744120 BL 0x2DFB700

ISIL:
	001 Add X1, X0, 24
	002 Move W2, 96
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> get_candidates()

Disassembly:
	0x03744124 LDR X0, [X19 + 0xD8]
	0x03744128 LDR X3, [X25]
	0x0374412C MOV W1, W22
	0x03744130 MOV W2, W21
	0x03744134 BL 0x217C6AC

ISIL:
	001 Add X9, X0, 248
	002 Move V0, [X9+1]
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 Move [X8], V1
	005 Move [X8+8], V0
	006 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<System.Single> get_scores()

Disassembly:
	0x03744138 ADD X8, X21, 0x1
	0x0374413C SUB X21, X21, 0x1
	0x03744140 CMP X8, 0x2
	0x03744144 B.GE 0x37440C4
	0x03744148 ADD X27, X27, 0x1
	0x0374414C CMP X27, X23
	0x03744150 ADD X24, X24, 0x1
	0x03744154 B.NE 0x37440C0
	0x03744158 LDP X20, X19, [X31 + 0x40]
	0x0374415C LDP X22, X21, [X31 + 0x30]
	0x03744160 LDP X24, X23, [X31 + 0x20]
	0x03744164 LDP X26, X25, [X31 + 0x10]
	0x03744168 LDP X30, X27, [X31], #0x50
	0x0374416C RET
	0x03744170 BL 0x1C16F28
	0x03744174 BL 0x1C16F20
	0x03744178 STR X30, [X31 - 0x30]!
	0x0374417C STP X22, X21, [X31 + 0x10]
	0x03744180 STP X20, X19, [X31 + 0x20]
	0x03744184 ADRP X21, 0xC9C000
	0x03744188 LDRB W8, [X21 + 0xD5D]
	0x0374418C MOV X20, X1
	0x03744190 MOV X19, X0
	0x03744194 TBNZ X8, 0x0, 0x37441D0
	0x03744198 ADRP X0, 0xA01000
	0x0374419C LDR X0, [X0 + 0x740]
	0x037441A0 BL 0x1C16CF4
	0x037441A4 ADRP X0, 0xA01000
	0x037441A8 LDR X0, [X0 + 0x720]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC9D000
	007 Move X20, 0xA02000
	008 Move W8, [X21+3410]
	009 Move X20, [X20+1648]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xA02000
	016 Move X0, [X0+1656]
	017 Call 0x1C17CF4
	018 Move X0, 0xA02000
	019 Move X0, [X0+1648]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3410], W8
	023 Move X1, [X19+208]
	024 Move W3, [X19+248]
	025 Move X4, [X20]
	026 Add X0, X31, 0
	027 Move W2, W31
	028 Move [X31], X31
	029 Move [X31+8], X31
	030 Call ReadOnlyArray`1<Single>..ctor, X0, X1, X2, X3
	031 Move X0, [X31]
	032 Move X1, [X31+8]
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Add X31, X31, 48
	038 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<System.Single> get_magnitudes()

Disassembly:
	0x037441AC BL 0x1C16CF4
	0x037441B0 ADRP X0, 0xA01000
	0x037441B4 LDR X0, [X0 + 0x748]
	0x037441B8 BL 0x1C16CF4
	0x037441BC ADRP X0, 0xA01000
	0x037441C0 LDR X0, [X0 + 0x678]
	0x037441C4 BL 0x1C16CF4
	0x037441C8 MOVZ W8, 0x1
	0x037441CC STRB W8, [X21 + 0xD5D]
	0x037441D0 CBZ X20, 0x3744248
	0x037441D4 ADRP X8, 0xA01000
	0x037441D8 LDR X8, [X8 + 0x720]
	0x037441DC ADD X21, X19, 0xF8
	0x037441E0 MOV X0, X21
	0x037441E4 MOV X1, X20
	0x037441E8 LDR X2, [X8]
	0x037441EC BL 0x2DFB45C
	0x037441F0 ADDS W31, W0, 0x1
	0x037441F4 B.EQ 0x3744238
	0x037441F8 ADRP X8, 0xA01000
	0x037441FC LDR X8, [X8 + 0x748]
	0x03744200 LDR W9, [X19 + 0xF8]
	0x03744204 ADRP X22, 0xA01000
	0x03744208 MOV W20, W0
	0x0374420C LDR X2, [X8]
	0x03744210 LDR X22, [X22 + 0x740]
	0x03744214 MOV X0, X21
	0x03744218 MOV W1, W20
	0x0374421C STR W9, [X31 + 0xC]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC9D000
	007 Move X20, 0xA02000
	008 Move W8, [X21+3411]
	009 Move X20, [X20+1648]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xA02000
	016 Move X0, [X0+1656]
	017 Call 0x1C17CF4
	018 Move X0, 0xA02000
	019 Move X0, [X0+1648]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3411], W8
	023 Move X1, [X19+216]
	024 Move W3, [X19+248]
	025 Move X4, [X20]
	026 Add X0, X31, 0
	027 Move W2, W31
	028 Move [X31], X31
	029 Move [X31+8], X31
	030 Call ReadOnlyArray`1<Single>..ctor, X0, X1, X2, X3
	031 Move X0, [X31]
	032 Move X1, [X31+8]
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Add X31, X31, 48
	038 Return X0

Method: UnityEngine.InputSystem.InputControl get_selectedControl()

Disassembly:
	0x03744220 BL 0x2DFB31C
	0x03744224 LDR X0, [X19 + 0xD0]
	0x03744228 LDR X3, [X22]
	0x0374422C ADD X1, X31, 0xC
	0x03744230 MOV W2, W20
	0x03744234 BL 0x2177FF8
	0x03744238 LDP X20, X19, [X31 + 0x20]
	0x0374423C LDP X22, X21, [X31 + 0x10]
	0x03744240 LDR X30, [X31], #0x30
	0x03744244 RET
	0x03744248 ADRP X0, 0x9B4000
	0x0374424C LDR X0, [X0 + 0x528]
	0x03744250 BL 0x1C16D08
	0x03744254 BL 0x1C16F10
	0x03744258 MOV X19, X0
	0x0374425C ADRP X0, 0x9D7000
	0x03744260 LDR X0, [X0 + 0xD60]
	0x03744264 BL 0x1C16D08
	0x03744268 MOV X1, X0
	0x0374426C MOV X0, X19
	0x03744270 MOV X2, X31
	0x03744274 BL 0x330E100
	0x03744278 ADRP X0, 0xA01000
	0x0374427C LDR X0, [X0 + 0x750]
	0x03744280 BL 0x1C16D08
	0x03744284 MOV X1, X0
	0x03744288 MOV X0, X19
	0x0374428C BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC9D000
	005 Move W8, [X20+3412]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xA02000
	012 Move X0, [X0+1656]
	013 Call 0x1C17CF4
	014 Move X0, 0xA02000
	015 Move X0, [X0+1664]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3412], W8
	019 Add X19, X19, 248
	020 Move W8, [X19]
	021 Compare W8, 0
	022 JumpIfEqual {33}
	023 Move X8, 0xA02000
	024 Move X8, [X8+1664]
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W1, W31
	029 Move X2, [X8]
	030 Move X30, [X31+32]
	031 Call 0x2DFB48C, X0, X1
	032 Return X0
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X0, X31
	036 Move X30, [X31+32]
	037 Return X0

Method: System.Boolean get_started()

Disassembly:
	0x03744290 STP X30, X21, [X31 - 0x20]!
	0x03744294 STP X20, X19, [X31 + 0x10]
	0x03744298 ADRP X21, 0xC9C000

ISIL:
	001 Move W8, [X0+360]
	002 And W0, W8, 1
	003 Return X0

Method: System.Boolean get_completed()

Disassembly:
	0x0374429C ADRP X20, 0x9D7000
	0x037442A0 LDRB W8, [X21 + 0xD5E]
	0x037442A4 LDR X20, [X20 + 0xE58]

ISIL:
	001 Move W8, [X0+360]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

Method: System.Boolean get_canceled()

Disassembly:
	0x037442A8 MOV X19, X0
	0x037442AC TBNZ X8, 0x0, 0x37442C4
	0x037442B0 ADRP X0, 0x9D7000

ISIL:
	001 Move W8, [X0+360]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Double get_startTime()

Disassembly:
	0x037442B4 LDR X0, [X0 + 0xE58]
	0x037442B8 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+232]
	002 Return V0

Method: System.Single get_timeout()

Disassembly:
	0x037442BC MOVZ W8, 0x1
	0x037442C0 STRB W8, [X21 + 0xD5E]

ISIL:
	001 Move V0, [X0+240]
	002 Return V0

Method: System.String get_expectedControlType()

Disassembly:
	0x03742D5C MOV X1, X20
	0x03742D60 MOV X3, X31
	0x03742D64 BL 0x3226C60
	0x03742D68 TBZ X0, 0x0, 0x3742E44

ISIL:
	001 Move X8, [X0+128]
	002 Move X1, [X0+136]
	003 Move X2, X31
	004 Move X0, X8
	005 Call InternedString.op_Implicit, X0
	006 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithAction(UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x03742A68 MOV W0, W31
	0x03742A6C LDP X30, X19, [X31], #0x10
	0x03742A70 RET
	0x03742A74 BL 0x1C16F20
	0x03742A78 BL 0x1C16F28
	0x03742A7C STR X30, [X31 - 0x30]!
	0x03742A80 STP X22, X21, [X31 + 0x10]
	0x03742A84 STP X20, X19, [X31 + 0x20]
	0x03742A88 ADRP X22, 0xC9E000
	0x03742A8C ADRP X21, 0x9B1000
	0x03742A90 LDRB W8, [X22 + 0xD4C]
	0x03742A94 LDR X21, [X21 + 0x6C0]
	0x03742A98 MOV X19, X1
	0x03742A9C MOV X20, X0
	0x03742AA0 TBNZ X8, 0x0, 0x3742AB8
	0x03742AA4 ADRP X0, 0x9B1000
	0x03742AA8 LDR X0, [X0 + 0x6C0]
	0x03742AAC BL 0x1C16CF4
	0x03742AB0 MOVZ W8, 0x1
	0x03742AB4 STRB W8, [X22 + 0xD4C]
	0x03742AB8 LDR X0, [X21]
	0x03742ABC LDR X21, [X20 + 0x80]
	0x03742AC0 LDR W8, [X0 + 0xE0]
	0x03742AC4 CBNZ W8, 0x3742ACC
	0x03742AC8 BL 0x1C16DFC
	0x03742ACC MOV X0, X21
	0x03742AD0 MOV X1, X31
	0x03742AD4 MOV X2, X31
	0x03742AD8 BL 0x3395F0C
	0x03742ADC TBZ X0, 0x0, 0x3742B00
	0x03742AE0 LDR X0, [X20 + 0x80]
	0x03742AE4 CBZ X0, 0x3742B60
	0x03742AE8 LDR X8, [X0]
	0x03742AEC MOV X1, X19
	0x03742AF0 LDR X9, [X8 + 0x868]
	0x03742AF4 LDR X2, [X8 + 0x870]
	0x03742AF8 BLR X9
	0x03742AFC TBZ X0, 0x0, 0x3742B40
	0x03742B00 CBZ X19, 0x3742B60
	0x03742B04 MOV X0, X19
	0x03742B08 MOV X1, X31
	0x03742B0C BL 0x33BE520
	0x03742B10 CBZ X0, 0x3742B60
	0x03742B14 LDR X8, [X0]
	0x03742B18 LDR X1, [X20 + 0x88]
	0x03742B1C MOVZ W2, 0x15
	0x03742B20 LDR X9, [X8 + 0x678]
	0x03742B24 LDR X3, [X8 + 0x680]
	0x03742B28 BLR X9
	0x03742B2C MOV X1, X31
	0x03742B30 MOV X2, X31
	0x03742B34 MOV X21, X0
	0x03742B38 BL 0x32CCEA8
	0x03742B3C TBZ X0, 0x0, 0x3742B48
	0x03742B40 MOV W0, W31
	0x03742B44 B 0x3742B50
	0x03742B48 MOVZ W0, 0x1
	0x03742B4C STP X19, X21, [X20 + 0x98]
	0x03742B50 LDP X20, X19, [X31 + 0x20]
	0x03742B54 LDP X22, X21, [X31 + 0x10]
	0x03742B58 LDR X30, [X31], #0x30
	0x03742B5C RET
	0x03742B60 BL 0x1C16F20
	0x03742B64 STP X30, X19, [X31 - 0x10]!
	0x03742B68 MOV X19, X0
	0x03742B6C LDP W8, W9, [X19 + 0x1C]
	0x03742B70 CMP W8, W9
	0x03742B74 B.GE 0x3742BC0
	0x03742B78 ADD W8, W8, 0x1
	0x03742B7C CMP W8, W9
	0x03742B80 STR W8, [X19 + 0x1C]
	0x03742B84 B.EQ 0x3742BC0
	0x03742B88 LDR X9, [X19]
	0x03742B8C CBZ X9, 0x3742BCC
	0x03742B90 LDR X9, [X9 + 0x28]
	0x03742B94 CBZ X9, 0x3742BCC
	0x03742B98 LDR W10, [X9 + 0x18]
	0x03742B9C CMP W8, W10
	0x03742BA0 B.CS 0x3742BD0
	0x03742BA4 ADD X8, X9, W8, 0x3, SXTW
	0x03742BA8 LDR X1, [X8 + 0x20]
	0x03742BAC MOV X0, X19
	0x03742BB0 BL 0x3742A7C
	0x03742BB4 TBZ X0, 0x0, 0x3742B6C
	0x03742BB8 MOVZ W0, 0x1
	0x03742BBC B 0x3742BC4
	0x03742BC0 MOV W0, W31
	0x03742BC4 LDP X30, X19, [X31], #0x10
	0x03742BC8 RET
	0x03742BCC BL 0x1C16F20
	0x03742BD0 BL 0x1C16F28
	0x03742BD4 SUB X31, X31, 0x40
	0x03742BD8 STP X30, X21, [X31 + 0x20]
	0x03742BDC STP X20, X19, [X31 + 0x30]
	0x03742BE0 ADRP X21, 0xC9E000
	0x03742BE4 ADRP X20, 0xA03000
	0x03742BE8 LDRB W8, [X21 + 0xD4D]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0xC9F000
	010 Move X20, X1
	011 Move X19, X0
	012 Move [X31+56], X8
	013 Move W8, [X22+3413]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xA04000
	019 Move X0, [X0+848]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3413], W8
	023 Move X0, X19
	024 Call RebindingOperation.ThrowIfRebindInProgress, X0
	025 Compare X20, 0
	026 JumpIfEqual {68}
	027 Add X8, X31, 8
	028 Move X0, X20
	029 Call InputAction.get_currentState, X0
	030 Move W8, [X31+8]
	031 Compare W8, 0
	032 JumpIfNotEqual {86}
	033 Move [X19+16], X20
	034 Move X0, [X20+32]
	035 Move X1, X31
	036 Call String.IsNullOrEmpty, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {46}
	041 Move W8, [X20+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, 0xA04000
	044 Move X8, [X8+848]
	045 Move X20, [X8]
	046 Move X20, [X20+32]
	047 Move X0, X19
	048 Call RebindingOperation.ThrowIfRebindInProgress, X0
	049 Add X0, X31, 8
	050 Move X1, X20
	051 Move X2, X31
	052 Move [X31+8], X31
	053 Move [X31+16], X31
	054 Call InternedString..ctor, X0, X1
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 Move [X19+8], V0
	057 Move X8, [X21+40]
	058 Move X9, [X31+56]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X19
	061 Move X20, [X31+96]
	062 Move X19, [X31+104]
	063 Move X22, [X31+80]
	064 Move X21, [X31+88]
	065 Move X30, [X31+64]
	066 Add X31, X31, 112
	067 Return X0
	068 Move X0, 0x9B7000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0x9DA000
	074 Move X0, [X0+3064]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0xA04000
	081 Move X0, [X0+1512]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC
	086 Move X0, 0xA04000
	087 Move X0, [X0+1520]
	088 Call 0x1C17D08
	089 Move X1, X20
	090 Move X2, X31
	091 Call String.Format, X0, X1
	092 Move X19, X0
	093 Move X0, 0x9B2000
	094 Move X0, [X0+1456]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X1, X19
	098 Move X2, X31
	099 Move X20, X0
	100 Call InvalidOperationException..ctor, X0, X1
	101 Move X0, 0xA04000
	102 Move X0, [X0+1512]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X20
	106 Call 0x1C17DEC
	107 Call 0x3EB2B20

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithMatchingEventsBeingSuppressed(System.Boolean value = True)

Disassembly:
	0x03742D1C MOV X0, X21
	0x03742D20 MOV X3, X31
	0x03742D24 BL 0x3226C60
	0x03742D28 TBZ X0, 0x0, 0x3742E44
	0x03742D2C ADD X0, X31, 0x378
	0x03742D30 MOVZ W2, 0x58
	0x03742D34 MOV X1, X22
	0x03742D38 BL 0x3EB1AC0
	0x03742D3C ADD X1, X31, 0x378
	0x03742D40 MOV X0, X24
	0x03742D44 MOV X2, X31
	0x03742D48 BL 0x3752E94
	0x03742D4C TBZ X0, 0x0, 0x3742E44
	0x03742D50 LDUR X0, [X24 - 0x10]
	0x03742D54 CBZ X0, 0x3742D6C
	0x03742D58 MOVZ W2, 0x5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call RebindingOperation.ThrowIfRebindInProgress, X0
	007 Move W8, [X20+360]
	008 And W31, W19, 1
	009 Move W9, 512
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 And W8, W8, 0xFFFFFDFF
	012 Or W8, W8, W9
	013 Move [X20+360], W8
	014 Move X0, X20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithCancelingThrough(System.String binding)

Disassembly:
	0x03742D6C LDRB W8, [X31 + 0x3D0]
	0x03742D70 CBZ W8, 0x3742E10
	0x03742D74 ADD X0, X31, 0x280
	0x03742D78 ADD X1, X31, 0x3D0
	0x03742D7C MOVZ W2, 0x80
	0x03742D80 BL 0x3EB1AC0
	0x03742D84 SUB X1, X24, 0x10
	0x03742D88 ADD X0, X31, 0x188
	0x03742D8C MOVZ W2, 0x78
	0x03742D90 BL 0x3EB1AC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call RebindingOperation.ThrowIfRebindInProgress, X0
	007 Move [X20+192], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithCancelingThrough(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x03744368 AND W8, W8, 0xFFFFFFF7
	0x0374436C STR W8, [X19 + 0x168]
	0x03744370 LDP X20, X19, [X31 + 0x10]
	0x03744374 LDR X30, [X31], #0x20
	0x03744378 RET
	0x0374437C STR X30, [X31 - 0x20]!
	0x03744380 STP X20, X19, [X31 + 0x10]
	0x03744384 ADRP X20, 0xC9C000
	0x03744388 LDRB W8, [X20 + 0xD65]
	0x0374438C MOV X19, X0
	0x03744390 TBNZ X8, 0x0, 0x37443A8
	0x03744394 ADRP X0, 0x9D7000
	0x03744398 LDR X0, [X0 + 0x270]
	0x0374439C BL 0x1C16CF4
	0x037443A0 MOVZ W8, 0x1
	0x037443A4 STRB W8, [X20 + 0xD65]
	0x037443A8 LDRB W8, [X19 + 0x168]
	0x037443AC TBZ X8, 0x4, 0x37443E4
	0x037443B0 ADRP X8, 0x9D7000
	0x037443B4 LDR X8, [X8 + 0x270]
	0x037443B8 LDR X20, [X19 + 0x150]
	0x037443BC LDR X0, [X8]
	0x037443C0 LDR W8, [X0 + 0xE0]
	0x037443C4 CBNZ W8, 0x37443CC
	0x037443C8 BL 0x1C16DFC
	0x037443CC MOV X0, X20
	0x037443D0 MOV X1, X31
	0x037443D4 BL 0x377058C
	0x037443D8 LDR W8, [X19 + 0x168]
	0x037443DC AND W8, W8, 0xFFFFFFEF
	0x037443E0 STR W8, [X19 + 0x168]
	0x037443E4 LDP X20, X19, [X31 + 0x10]
	0x037443E8 LDR X30, [X31], #0x20
	0x037443EC RET
	0x037443F0 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call RebindingOperation.ThrowIfRebindInProgress, X0
	007 Compare X20, 0
	008 JumpIfEqual {21}
	009 Move X0, X20
	010 Move X1, X31
	011 Call InputControl.get_path, X0
	012 Move X20, X0
	013 Move X0, X19
	014 Call RebindingOperation.ThrowIfRebindInProgress, X0
	015 Move [X19+192], X20
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return X0
	021 Move X0, 0x9B5000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0x9D8000
	027 Move X0, [X0+3424]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xA02000
	034 Move X0, [X0+1688]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithExpectedControlType(System.String layoutName)

Disassembly:
	0x03744320 LDRB W8, [X19 + 0x168]
	0x03744324 TBZ X8, 0x3, 0x3744370
	0x03744328 ADRP X8, 0x9D7000
	0x0374432C LDR X8, [X8 + 0x270]
	0x03744330 LDR X0, [X8]
	0x03744334 LDR W8, [X0 + 0xE0]
	0x03744338 CBNZ W8, 0x3744340
	0x0374433C BL 0x1C16DFC
	0x03744340 MOV X0, X31
	0x03744344 BL 0x376F8E0
	0x03744348 LDR X1, [X19 + 0x148]
	0x0374434C AND X0, X0, 0xFF
	0x03744350 MOV X2, X31
	0x03744354 BL 0x37FC510
	0x03744358 AND X0, X0, 0xFF
	0x0374435C MOV X1, X31
	0x03744360 BL 0x376F8E8
	0x03744364 LDR W8, [X19 + 0x168]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X19, X1
	006 Move X20, X0
	007 Call RebindingOperation.ThrowIfRebindInProgress, X0
	008 Add X0, X31, 0
	009 Move X1, X19
	010 Move X2, X31
	011 Move [X31], X31
	012 Move [X31+8], X31
	013 Call InternedString..ctor, X0, X1
	014 Move V0, [X31]
	015 Move X0, X20
	016 Move X30, [X31+16]
	017 Move [X20+8], V0
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Add X31, X31, 48
	021 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithExpectedControlType(System.Type type)

Disassembly:
	0x037443F4 STP X20, X19, [X31 + 0x10]
	0x037443F8 MOV X19, X0
	0x037443FC BL 0x3744290
	0x03744400 MOV X0, X19
	0x03744404 LDP X20, X19, [X31 + 0x10]
	0x03744408 MOV X1, X31
	0x0374440C LDP X30, X21, [X31], #0x20
	0x03744410 B 0x33CB4DC
	0x03744414 CMP W1, 0x1
	0x03744418 MOV X21, X0
	0x0374441C B.NE 0x374444C
	0x03744420 MOV X0, X21
	0x03744424 BL 0x3EB1AD0
	0x03744428 LDR X20, [X0]
	0x0374442C BL 0x3EB1AE0
	0x03744430 MOV X0, X19
	0x03744434 MOV X1, X31
	0x03744438 BL 0x33CB4DC
	0x0374443C CBNZ X20, 0x3744454
	0x03744440 LDP X20, X19, [X31 + 0x10]
	0x03744444 LDP X30, X21, [X31], #0x20
	0x03744448 RET
	0x0374444C MOV X20, X31
	0x03744450 B 0x3744460
	0x03744454 MOV X0, X20
	0x03744458 BL 0x1C16F18
	0x0374445C MOV X21, X0
	0x03744460 MOV X0, X19
	0x03744464 MOV X1, X31
	0x03744468 BL 0x33CB4DC
	0x0374446C CBNZ X20, 0x3744478
	0x03744470 MOV X0, X21
	0x03744474 BL 0x1D2C690
	0x03744478 MOV X0, X20
	0x0374447C BL 0x1C16F18
	0x03744480 BL 0x1990590
	0x03744484 STR X30, [X31 - 0x20]!
	0x03744488 STP X20, X19, [X31 + 0x10]
	0x0374448C ADRP X20, 0xC9C000
	0x03744490 LDRB W8, [X20 + 0xD5F]
	0x03744494 MOV X19, X0
	0x03744498 TBNZ X8, 0x0, 0x37444B0
	0x0374449C ADRP X0, 0xA01000
	0x037444A0 LDR X0, [X0 + 0x758]
	0x037444A4 BL 0x1C16CF4
	0x037444A8 MOVZ W8, 0x1
	0x037444AC STRB W8, [X20 + 0xD5F]
	0x037444B0 LDRB W8, [X19 + 0x168]
	0x037444B4 TBZ X8, 0x0, 0x37444C0
	0x037444B8 MOV X0, X19
	0x037444BC BL 0x3743B94
	0x037444C0 ADD X0, X19, 0x10
	0x037444C4 MOVZ W2, 0x84
	0x037444C8 MOV W1, W31
	0x037444CC STR W31, [X19 + 0xA0]
	0x037444D0 BL 0x3EB1B10
	0x037444D4 LDR X0, [X19 + 0x170]
	0x037444D8 MOVZ W9, 0xCCCD
	0x037444DC MOVN W8, 0x0
	0x037444E0 MOVK W9, 0x3E4C0000
	0x037444E4 STP X31, X31, [X19 + 0xB8]
	0x037444E8 STR W8, [X19 + 0xB0]
	0x037444EC STR W9, [X19 + 0xC8]
	0x037444F0 STR X31, [X19 + 0xF0]
	0x037444F4 STR W31, [X19 + 0x168]
	0x037444F8 CBZ X0, 0x374450C
	0x037444FC ADRP X8, 0xA01000
	0x03744500 LDR X8, [X8 + 0x758]
	0x03744504 LDR X1, [X8]
	0x03744508 BL 0x2AB4C18
	0x0374450C MOV X0, X19
	0x03744510 LDP X20, X19, [X31 + 0x10]
	0x03744514 LDR X30, [X31], #0x20
	0x03744518 RET
	0x0374451C SUB X31, X31, 0x1A0
	0x03744520 STR D10, [X31 + 0x120]
	0x03744524 STP D9, D8, [X31 + 0x130]
	0x03744528 STP X29, X30, [X31 + 0x140]
	0x0374452C STP X28, X27, [X31 + 0x150]
	0x03744530 STP X26, X25, [X31 + 0x160]
	0x03744534 STP X24, X23, [X31 + 0x170]
	0x03744538 STP X22, X21, [X31 + 0x180]
	0x0374453C STP X20, X19, [X31 + 0x190]
	0x03744540 ADRP X20, 0xC9C000
	0x03744544 LDRB W8, [X20 + 0xD62]
	0x03744548 MOV X21, X2
	0x0374454C MOV X19, X0
	0x03744550 STR X1, [X31 + 0x128]
	0x03744554 TBNZ X8, 0x0, 0x37445D8
	0x03744558 ADRP X0, 0xA01000
	0x0374455C LDR X0, [X0 + 0x718]
	0x03744560 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC9D000
	007 Move X21, 0x9B0000
	008 Move W8, [X22+3414]
	009 Move X21, [X21+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xA02000
	017 Move X0, [X0+1696]
	018 Call 0x1C17CF4
	019 Move X0, 0x9B0000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3414], W8
	024 Move X0, X20
	025 Call RebindingOperation.ThrowIfRebindInProgress, X0
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X1, X31
	033 Move X2, X31
	034 Call Type.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {61}
	039 Move X8, 0xA02000
	040 Move X0, [X21]
	041 Move X8, [X8+1696]
	042 Move W9, [X0+224]
	043 Move X21, [X8]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Call Type.GetTypeFromHandle, X0
	050 Compare X0, 0
	051 JumpIfEqual {69}
	052 Move X8, [X0]
	053 Move X1, X19
	054 Move X9, [X8+680]
	055 Move X2, [X8+688]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {70}
	061 Move [X20+120], X19
	062 Move X0, X20
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Return X0
	069 Call 0x1C17F20
	070 Move X0, X19
	071 Call 0x19913C0
	072 Move X8, [X19]
	073 Move X0, X19
	074 Move X9, [X8+424]
	075 Move X1, [X8+432]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X19, X0
	078 Move X0, 0x9D8000
	079 Move X0, [X0+3280]
	080 Call 0x1C17D08
	081 Move X20, X0
	082 Move X0, 0xA02000
	083 Move X0, [X0+1704]
	084 Call 0x1C17D08
	085 Move X2, X0
	086 Move X0, X20
	087 Move X1, X19
	088 Move X3, X31
	089 Call String.Concat, X0, X1, X2
	090 Move X19, X0
	091 Move X0, 0x9B8000
	092 Move X0, [X0+1400]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X20, X0
	096 Move X0, 0x9B8000
	097 Move X0, [X0+1512]
	098 Call 0x1C17D08
	099 Move X2, X0
	100 Move X0, X20
	101 Move X1, X19
	102 Move X3, X31
	103 Call ArgumentException..ctor, X0, X1, X2
	104 Move X0, 0xA02000
	105 Move X0, [X0+1712]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X20
	109 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithExpectedControlType()

Disassembly:
	0x022B60B4 LDR W8, [X22 + 0x18]
	0x022B60B8 ADD W9, W27, 0x1
	0x022B60BC CMP W9, W8
	0x022B60C0 B.CS 0x22B6108
	0x022B60C4 SXTW X8, W9
	0x022B60C8 CMP W25, W20
	0x022B60CC ADD X25, X25, 0x1
	0x022B60D0 ADD X8, X22, X8, 0x4, LSL
	0x022B60D4 ADD W21, W21, 0x1
	0x022B60D8 STP S8, S9, [X8 + 0x20]
	0x022B60DC STP S10, S11, [X8 + 0x28]
	0x022B60E0 B.NE 0x22B6000
	0x022B60E4 LDP X20, X19, [X31 + 0x70]
	0x022B60E8 LDP X22, X21, [X31 + 0x60]
	0x022B60EC LDP X24, X23, [X31 + 0x50]
	0x022B60F0 LDP X26, X25, [X31 + 0x40]
	0x022B60F4 LDP X28, X27, [X31 + 0x30]
	0x022B60F8 LDP X29, X30, [X31 + 0x20]
	0x022B60FC LDP D9, D8, [X31 + 0x10]
	0x022B6100 LDP D11, D10, [X31], #0x80
	0x022B6104 RET
	0x022B6108 BL 0x1C16F28
	0x022B610C BL 0x1C16F20
	0x022B6110 STP X29, X30, [X31 - 0x60]!
	0x022B6114 STP X28, X27, [X31 + 0x10]
	0x022B6118 STP X26, X25, [X31 + 0x20]
	0x022B611C STP X24, X23, [X31 + 0x30]
	0x022B6120 STP X22, X21, [X31 + 0x40]
	0x022B6124 STP X20, X19, [X31 + 0x50]
	0x022B6128 ADD X29, X31, 0x0
	0x022B612C SUB X31, X31, 0x40
	0x022B6130 MRS X8, 0xC000
	0x022B6134 STUR X8, [X29 - 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X20, X1
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {17}
	009 Move X0, 0x1E3E000
	010 Move X0, [X0+1728]
	011 Call 0x1C17CF4
	012 Move X8, [X20+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X20
	016 Call 0x1C5D6E0
	017 Move X0, X19
	018 Move X1, X31
	019 Call RebindingOperation.ThrowIfRebindInProgress, X0
	020 Move X8, 0x1E3E000
	021 Move X8, [X8+1728]
	022 Move X0, [X8]
	023 Move X8, [X20+56]
	024 Move W9, [X0+224]
	025 Move X20, [X8]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Call Type.GetTypeFromHandle, X0
	032 Move X1, X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X2, X31
	037 Move X30, [X31+32]
	038 Call RebindingOperation.WithExpectedControlType, X0, X1
	039 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithTargetBinding(System.Int32 bindingIndex)

Disassembly:
	0x03742D94 LDR X25, [X28]
	0x03742D98 MOVI V0.2D, 0x0
	0x03742D9C ADD X0, X31, 0x108
	0x03742DA0 ADD X1, X31, 0x188
	0x03742DA4 MOVZ W2, 0x78
	0x03742DA8 STP V0, V0, [X26 + 0x60]
	0x03742DAC STP V0, V0, [X26 + 0x40]
	0x03742DB0 STP V0, V0, [X26 + 0x20]
	0x03742DB4 STP V0, V0, [X26]
	0x03742DB8 BL 0x3EB1AC0
	0x03742DBC ADD X0, X31, 0x200
	0x03742DC0 ADD X1, X31, 0x108
	0x03742DC4 MOV X2, X25
	0x03742DC8 BL 0x243DCC4
	0x03742DCC ADD X0, X31, 0x88
	0x03742DD0 ADD X1, X31, 0x280
	0x03742DD4 MOVZ W2, 0x80
	0x03742DD8 BL 0x3EB1AC0
	0x03742DDC ADD X0, X31, 0x8
	0x03742DE0 ADD X1, X31, 0x200
	0x03742DE4 MOVZ W2, 0x80
	0x03742DE8 BL 0x3EB1AC0
	0x03742DEC ADD X8, X31, 0x108
	0x03742DF0 ADD X0, X31, 0x88
	0x03742DF4 ADD X1, X31, 0x8
	0x03742DF8 BL 0x3742E8C
	0x03742DFC ADD X0, X31, 0x3D0
	0x03742E00 ADD X1, X31, 0x108
	0x03742E04 MOVZ W2, 0x80
	0x03742E08 BL 0x3EB1AC0
	0x03742E0C B 0x3742E44
	0x03742E10 SUB X1, X24, 0x10
	0x03742E14 ADD X0, X31, 0x300
	0x03742E18 MOVZ W2, 0x78
	0x03742E1C BL 0x3EB1AC0
	0x03742E20 LDR X25, [X28]
	0x03742E24 ADD X0, X31, 0x280
	0x03742E28 ADD X1, X31, 0x300
	0x03742E2C MOVZ W2, 0x78
	0x03742E30 BL 0x3EB1AC0
	0x03742E34 ADD X0, X31, 0x3D0
	0x03742E38 ADD X1, X31, 0x280
	0x03742E3C MOV X2, X25
	0x03742E40 BL 0x243DCC4
	0x03742E44 ADD X27, X27, 0x1
	0x03742E48 CMP X29, X27
	0x03742E4C ADD X24, X24, 0x78
	0x03742E50 B.NE 0x3742D08
	0x03742E54 ADD X1, X31, 0x3D0
	0x03742E58 MOVZ W2, 0x80
	0x03742E5C MOV X0, X19
	0x03742E60 BL 0x3EB1AC0
	0x03742E64 ADD X31, X31, 0x450
	0x03742E68 LDP X20, X19, [X31 + 0x50]
	0x03742E6C LDP X22, X21, [X31 + 0x40]
	0x03742E70 LDP X24, X23, [X31 + 0x30]
	0x03742E74 LDP X26, X25, [X31 + 0x20]
	0x03742E78 LDP X28, X27, [X31 + 0x10]
	0x03742E7C LDP X29, X30, [X31], #0x60
	0x03742E80 RET
	0x03742E84 BL 0x1C16F28
	0x03742E88 BL 0x1C16F20
	0x03742E8C SUB X31, X31, 0x140
	0x03742E90 STR X29, [X31 + 0x100]
	0x03742E94 STP X30, X23, [X31 + 0x110]
	0x03742E98 STP X22, X21, [X31 + 0x120]
	0x03742E9C STP X20, X19, [X31 + 0x130]
	0x03742EA0 ADRP X23, 0xC9E000
	0x03742EA4 MOV X19, X8
	0x03742EA8 LDRB W8, [X23 + 0xD51]
	0x03742EAC MOV X21, X1
	0x03742EB0 MOV X20, X0
	0x03742EB4 ADD X22, X31, 0x80
	0x03742EB8 TBNZ X8, 0x0, 0x3742EDC
	0x03742EBC ADRP X0, 0xA03000
	0x03742EC0 LDR X0, [X0 + 0x398]
	0x03742EC4 BL 0x1C16CF4
	0x03742EC8 ADRP X0, 0xA03000
	0x03742ECC LDR X0, [X0 + 0x3A0]
	0x03742ED0 BL 0x1C16CF4
	0x03742ED4 MOVZ W8, 0x1
	0x03742ED8 STRB W8, [X23 + 0xD51]
	0x03742EDC MOVI V0.2D, 0x0
	0x03742EE0 STR X31, [X31 + 0xF0]
	0x03742EE4 STP V0, V0, [X22 + 0x50]
	0x03742EE8 STP V0, V0, [X22 + 0x30]
	0x03742EEC STP V0, V0, [X22 + 0x10]
	0x03742EF0 STR V0, [X31 + 0x8]
	0x03742EF4 LDRB W8, [X20]
	0x03742EF8 CBZ W8, 0x37430E4
	0x03742EFC LDRB W8, [X21]
	0x03742F00 CBZ W8, 0x37430D4
	0x03742F04 ADRP X23, 0xA03000
	0x03742F08 LDR X23, [X23 + 0x3A0]
	0x03742F0C ADD X8, X31, 0x8
	0x03742F10 MOV X0, X20
	0x03742F14 LDR X1, [X23]
	0x03742F18 BL 0x243DCF0
	0x03742F1C LDR X8, [X31 + 0x8]
	0x03742F20 CBZ X8, 0x3742F3C
	0x03742F24 LDR X1, [X23]
	0x03742F28 ADD X8, X31, 0x8
	0x03742F2C MOV X0, X21
	0x03742F30 BL 0x243DCF0
	0x03742F34 LDR X8, [X31 + 0x8]
	0x03742F38 CBZ X8, 0x37430D4
	0x03742F3C LDR X1, [X23]
	0x03742F40 ADD X8, X31, 0x8
	0x03742F44 MOV X0, X21
	0x03742F48 BL 0x243DCF0
	0x03742F4C LDR X8, [X31 + 0x8]
	0x03742F50 CBZ X8, 0x3742F6C
	0x03742F54 LDR X1, [X23]
	0x03742F58 ADD X8, X31, 0x8
	0x03742F5C MOV X0, X20
	0x03742F60 BL 0x243DCF0
	0x03742F64 LDR X8, [X31 + 0x8]
	0x03742F68 CBZ X8, 0x37430E4
	0x03742F6C LDR X1, [X23]
	0x03742F70 ADD X8, X31, 0x8
	0x03742F74 MOV X0, X20
	0x03742F78 BL 0x243DCF0
	0x03742F7C ADD X0, X31, 0x80
	0x03742F80 ADD X1, X31, 0x8
	0x03742F84 MOVZ W2, 0x78
	0x03742F88 ADD X22, X31, 0x80
	0x03742F8C BL 0x3EB1AC0
	0x03742F90 ADD X22, X22, 0x10
	0x03742F94 MOV X0, X22
	0x03742F98 MOV X1, X31
	0x03742F9C BL 0x374B644
	0x03742FA0 CBZ X0, 0x3742FD4
	0x03742FA4 LDR X1, [X23]
	0x03742FA8 ADD X8, X31, 0x8
	0x03742FAC MOV X0, X21
	0x03742FB0 BL 0x243DCF0
	0x03742FB4 ADD X0, X31, 0x80
	0x03742FB8 ADD X1, X31, 0x8
	0x03742FBC MOVZ W2, 0x78
	0x03742FC0 BL 0x3EB1AC0
	0x03742FC4 MOV X0, X22
	0x03742FC8 MOV X1, X31
	0x03742FCC BL 0x374B644
	0x03742FD0 CBZ X0, 0x37430D4
	0x03742FD4 LDR X1, [X23]
	0x03742FD8 ADD X8, X31, 0x8
	0x03742FDC MOV X0, X21
	0x03742FE0 BL 0x243DCF0
	0x03742FE4 ADD X0, X31, 0x80
	0x03742FE8 ADD X1, X31, 0x8
	0x03742FEC MOVZ W2, 0x78
	0x03742FF0 BL 0x3EB1AC0
	0x03742FF4 MOV X0, X22
	0x03742FF8 MOV X1, X31
	0x03742FFC BL 0x374B644
	0x03743000 CBZ X0, 0x3743034
	0x03743004 LDR X1, [X23]
	0x03743008 ADD X8, X31, 0x8
	0x0374300C MOV X0, X20
	0x03743010 BL 0x243DCF0
	0x03743014 ADD X0, X31, 0x80
	0x03743018 ADD X1, X31, 0x8
	0x0374301C MOVZ W2, 0x78
	0x03743020 BL 0x3EB1AC0
	0x03743024 MOV X0, X22
	0x03743028 MOV X1, X31
	0x0374302C BL 0x374B644
	0x03743030 CBZ X0, 0x37430E4
	0x03743034 LDR X1, [X23]
	0x03743038 ADD X8, X31, 0x8
	0x0374303C MOV X0, X20
	0x03743040 BL 0x243DCF0
	0x03743044 ADD X0, X31, 0x80
	0x03743048 ADD X1, X31, 0x8
	0x0374304C MOVZ W2, 0x78
	0x03743050 BL 0x3EB1AC0
	0x03743054 LDR X8, [X31 + 0xC0]
	0x03743058 CBZ X8, 0x3743084
	0x0374305C LDR X1, [X23]
	0x03743060 ADD X8, X31, 0x8
	0x03743064 MOV X0, X21
	0x03743068 BL 0x243DCF0
	0x0374306C ADD X0, X31, 0x80
	0x03743070 ADD X1, X31, 0x8
	0x03743074 MOVZ W2, 0x78
	0x03743078 BL 0x3EB1AC0
	0x0374307C LDR X8, [X31 + 0xC0]
	0x03743080 CBZ X8, 0x37430D4
	0x03743084 LDR X1, [X23]
	0x03743088 ADD X8, X31, 0x8
	0x0374308C MOV X0, X21
	0x03743090 BL 0x243DCF0
	0x03743094 ADD X0, X31, 0x80
	0x03743098 ADD X1, X31, 0x8
	0x0374309C MOVZ W2, 0x78
	0x037430A0 BL 0x3EB1AC0
	0x037430A4 LDR X8, [X31 + 0xC0]
	0x037430A8 CBZ X8, 0x37430D4
	0x037430AC LDR X1, [X23]
	0x037430B0 ADD X8, X31, 0x8
	0x037430B4 MOV X0, X20
	0x037430B8 BL 0x243DCF0
	0x037430BC ADD X0, X31, 0x80
	0x037430C0 ADD X1, X31, 0x8
	0x037430C4 MOVZ W2, 0x78
	0x037430C8 BL 0x3EB1AC0
	0x037430CC LDR X8, [X31 + 0xC0]
	0x037430D0 CBZ X8, 0x37430E4
	0x037430D4 MOVZ W2, 0x80
	0x037430D8 MOV X0, X19
	0x037430DC MOV X1, X20
	0x037430E0 B 0x37430F0
	0x037430E4 MOVZ W2, 0x80
	0x037430E8 MOV X0, X19
	0x037430EC MOV X1, X21
	0x037430F0 BL 0x3EB1AC0
	0x037430F4 LDP X20, X19, [X31 + 0x130]
	0x037430F8 LDP X22, X21, [X31 + 0x120]
	0x037430FC LDP X30, X23, [X31 + 0x110]
	0x03743100 LDR X29, [X31 + 0x100]
	0x03743104 ADD X31, X31, 0x140
	0x03743108 RET
	0x0374310C LDR X0, [X0 + 0x10]
	0x03743110 RET
	0x03743114 ADD X1, X0, 0x18
	0x03743118 MOVZ W2, 0x60
	0x0374311C MOV X0, X8
	0x03743120 B 0x3EB1AC0
	0x03743124 ADD X9, X0, 0xF8
	0x03743128 LDR V0, [X9 + 0x1]
	0x0374312C LDUR V1, [X0 + 0xF8]
	0x03743130 STP V1, V0, [X8]
	0x03743134 RET
	0x03743138 SUB X31, X31, 0x30
	0x0374313C STP X30, X21, [X31 + 0x10]
	0x03743140 STP X20, X19, [X31 + 0x20]
	0x03743144 ADRP X21, 0xC9D000
	0x03743148 ADRP X20, 0xA02000
	0x0374314C LDRB W8, [X21 + 0xD52]
	0x03743150 LDR X20, [X20 + 0x670]
	0x03743154 MOV X19, X0
	0x03743158 TBNZ X8, 0x0, 0x374317C
	0x0374315C ADRP X0, 0xA02000
	0x03743160 LDR X0, [X0 + 0x678]
	0x03743164 BL 0x1C16CF4
	0x03743168 ADRP X0, 0xA02000
	0x0374316C LDR X0, [X0 + 0x670]
	0x03743170 BL 0x1C16CF4
	0x03743174 MOVZ W8, 0x1
	0x03743178 STRB W8, [X21 + 0xD52]
	0x0374317C LDR X1, [X19 + 0xD0]
	0x03743180 LDR W3, [X19 + 0xF8]
	0x03743184 LDR X4, [X20]
	0x03743188 ADD X0, X31, 0x0
	0x0374318C MOV W2, W31
	0x03743190 STP X31, X31, [X31]
	0x03743194 BL 0x24FDC0C
	0x03743198 LDP X0, X1, [X31]
	0x0374319C LDP X20, X19, [X31 + 0x20]
	0x037431A0 LDP X30, X21, [X31 + 0x10]
	0x037431A4 ADD X31, X31, 0x30
	0x037431A8 RET
	0x037431AC SUB X31, X31, 0x30
	0x037431B0 STP X30, X21, [X31 + 0x10]
	0x037431B4 STP X20, X19, [X31 + 0x20]
	0x037431B8 ADRP X21, 0xC9D000
	0x037431BC ADRP X20, 0xA02000
	0x037431C0 LDRB W8, [X21 + 0xD53]
	0x037431C4 LDR X20, [X20 + 0x670]
	0x037431C8 MOV X19, X0
	0x037431CC TBNZ X8, 0x0, 0x37431F0
	0x037431D0 ADRP X0, 0xA02000
	0x037431D4 LDR X0, [X0 + 0x678]
	0x037431D8 BL 0x1C16CF4
	0x037431DC ADRP X0, 0xA02000
	0x037431E0 LDR X0, [X0 + 0x670]
	0x037431E4 BL 0x1C16CF4
	0x037431E8 MOVZ W8, 0x1
	0x037431EC STRB W8, [X21 + 0xD53]
	0x037431F0 LDR X1, [X19 + 0xD8]
	0x037431F4 LDR W3, [X19 + 0xF8]
	0x037431F8 LDR X4, [X20]
	0x037431FC ADD X0, X31, 0x0
	0x03743200 MOV W2, W31
	0x03743204 STP X31, X31, [X31]
	0x03743208 BL 0x24FDC0C
	0x0374320C LDP X0, X1, [X31]
	0x03743210 LDP X20, X19, [X31 + 0x20]
	0x03743214 LDP X30, X21, [X31 + 0x10]
	0x03743218 ADD X31, X31, 0x30
	0x0374321C RET
	0x03743220 STR X30, [X31 - 0x20]!
	0x03743224 STP X20, X19, [X31 + 0x10]
	0x03743228 ADRP X20, 0xC9D000
	0x0374322C LDRB W8, [X20 + 0xD54]
	0x03743230 MOV X19, X0
	0x03743234 TBNZ X8, 0x0, 0x3743258
	0x03743238 ADRP X0, 0xA02000
	0x0374323C LDR X0, [X0 + 0x678]
	0x03743240 BL 0x1C16CF4
	0x03743244 ADRP X0, 0xA02000
	0x03743248 LDR X0, [X0 + 0x680]
	0x0374324C BL 0x1C16CF4
	0x03743250 MOVZ W8, 0x1
	0x03743254 STRB W8, [X20 + 0xD54]
	0x03743258 LDR W8, [X19 + 0xF8]!
	0x0374325C CBZ W8, 0x3743280
	0x03743260 ADRP X8, 0xA02000
	0x03743264 LDR X8, [X8 + 0x680]
	0x03743268 MOV X0, X19
	0x0374326C LDP X20, X19, [X31 + 0x10]
	0x03743270 MOV W1, W31
	0x03743274 LDR X2, [X8]
	0x03743278 LDR X30, [X31], #0x20
	0x0374327C B 0x2DFA48C
	0x03743280 LDP X20, X19, [X31 + 0x10]
	0x03743284 MOV X0, X31
	0x03743288 LDR X30, [X31], #0x20
	0x0374328C RET
	0x03743290 LDR W8, [X0 + 0x168]
	0x03743294 AND W0, W8, 0x1
	0x03743298 RET
	0x0374329C LDRB W8, [X0 + 0x168]
	0x037432A0 UBFM W0, W8, 0x1, 0x1
	0x037432A4 RET
	0x037432A8 LDRB W8, [X0 + 0x168]
	0x037432AC UBFM W0, W8, 0x2, 0x2
	0x037432B0 RET
	0x037432B4 LDR V0, [X0 + 0xE8]
	0x037432B8 RET
	0x037432BC LDR V0, [X0 + 0xF0]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 432
	014 Move X21, 0xC9F000
	015 Move W8, [X21+3415]
	016 Move W20, W1
	017 Move X19, X0
	018 Add X24, X31, 160
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {61}
	023 Move X0, 0xA04000
	024 Move X0, [X0+1544]
	025 Call 0x1C17CF4
	026 Move X0, 0xA04000
	027 Move X0, [X0+1552]
	028 Call 0x1C17CF4
	029 Move X0, 0xA04000
	030 Move X0, [X0+1560]
	031 Call 0x1C17CF4
	032 Move X0, 0x9B2000
	033 Move X0, [X0+1432]
	034 Call 0x1C17CF4
	035 Move X0, 0xA04000
	036 Move X0, [X0+1568]
	037 Call 0x1C17CF4
	038 Move X0, 0xA04000
	039 Move X0, [X0+1576]
	040 Call 0x1C17CF4
	041 Move X0, 0xA04000
	042 Move X0, [X0+1584]
	043 Call 0x1C17CF4
	044 Move X0, 0x9D9000
	045 Move X0, [X0+4072]
	046 Call 0x1C17CF4
	047 Move X0, 0xA04000
	048 Move X0, [X0+1592]
	049 Call 0x1C17CF4
	050 Move X0, 0xA04000
	051 Move X0, [X0+264]
	052 Call 0x1C17CF4
	053 Move X0, 0xA04000
	054 Move X0, [X0+1600]
	055 Call 0x1C17CF4
	056 Move X0, 0xA04000
	057 Move X0, [X0+1608]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X21+3415], W8
	061 NotImplemented "Instruction MOVI not yet implemented."
	062 Move [X31+416], X31
	063 Move [X31+424], X31
	064 Move [X31+400], X31
	065 Move [X31+288], X31
	066 Move [X31+296], X31
	067 Move [X31+304], X31
	068 Move [X31+272], X31
	069 Move [X31+160], X31
	070 Move [X31+168], X31
	071 Move [X31+176], X31
	072 Move [X31+144], X31
	073 Move [X31+152], X31
	074 Move [X31+112], X31
	075 Move [X31+120], X31
	076 Move [X31+128], X31
	077 Move [X24+208], V0
	078 Move [X24+216], V0
	079 Move [X24+176], V0
	080 Move [X24+184], V0
	081 Move [X24+10], V0
	082 Move [X24+80], V0
	083 Move [X24+88], V0
	084 Move [X24+48], V0
	085 Move [X24+56], V0
	086 Move [X24+2], V0
	087 Move [X31+96], X31
	088 Move [X31+104], X31
	089 Move TEMP, X20
	090 And TEMP, TEMP, -2147483648
	091 Compare TEMP, -2147483648
	092 JumpIfEqual {348}
	093 Move X0, [X19+16]
	094 Move [X19+176], W20
	095 Compare X0, 0
	096 JumpIfEqual {331}
	097 Call InputAction.get_bindings, X0
	098 Move X8, X1
	099 ShiftRight X8, 32
	100 And X8, X8, 0x7FFFFFFF
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X0, [X19+16]
	103 Compare X0, 0
	104 JumpIfEqual {346}
	105 Call InputAction.get_bindings, X0
	106 Move X8, 0xA04000
	107 Move X8, [X8+264]
	108 Move [X31+416], X0
	109 Move [X31+424], X1
	110 Add X0, X31, 416
	111 Move W1, W20
	112 Move X2, [X8]
	113 Add X8, X31, 8
	114 Call 0x24FD334, X0, X1
	115 Add X0, X31, 320
	116 Add X1, X31, 8
	117 Move W2, 88
	118 Call 0x3EB2AC0
	119 Add X0, X31, 320
	120 Move X1, X31
	121 Call InputBinding.get_isPartOfComposite, X0
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {175}
	126 Move X0, [X19+16]
	127 Add X8, X31, 8
	128 Move W1, W20
	129 Move X2, X31
	130 Call InputActionSetupExtensions.ChangeBinding, X0, X1
	131 Move X8, [X31+24]
	132 NotImplemented "Instruction LDUR not yet implemented."
	133 Add X0, X31, 288
	134 Move X1, X31
	135 Move [X31+304], X8
	136 Add X8, X31, 8
	137 Move X2, X31
	138 Move [X24+8], V0
	139 Call BindingSyntax.PreviousCompositeBinding, X0, X1
	140 Move X8, [X31+24]
	141 NotImplemented "Instruction LDUR not yet implemented."
	142 Add X0, X31, 288
	143 Move X1, X31
	144 Move [X31+304], X8
	145 Add X8, X31, 8
	146 Move [X24+8], V0
	147 Call BindingSyntax.get_binding, X0
	148 Add X0, X31, 192
	149 Add X1, X31, 8
	150 Move W2, 88
	151 Call 0x3EB2AC0
	152 Add X0, X31, 192
	153 Move X1, X31
	154 Call InputBinding.GetNameOfComposite, X0
	155 Move X1, [X31+320]
	156 Move X2, X31
	157 Call InputBindingComposite.GetExpectedControlLayoutName, X0, X1
	158 Move X1, X31
	159 Move X20, X0
	160 Call String.IsNullOrEmpty, X0
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfEqual {175}
	165 Move X0, X19
	166 Call RebindingOperation.ThrowIfRebindInProgress, X0
	167 Add X0, X31, 8
	168 Move X1, X20
	169 Move X2, X31
	170 Move [X31+8], X31
	171 Move [X31+16], X31
	172 Call InternedString..ctor, X0, X1
	173 NotImplemented "Instruction LDUR not yet implemented."
	174 Move [X19+8], V0
	175 Move X8, [X19+16]
	176 Compare X8, 0
	177 JumpIfEqual {346}
	178 Move X9, [X8+200]
	179 Compare X9, 0
	180 JumpIfEqual {184}
	181 Move X10, [X9+80]
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move X20, [X9+32]
	184 Move X20, X31
	185 Move X8, 0x9B2000
	186 Move X8, [X8+1432]
	187 Move X0, [X8]
	188 Move W8, [X0+224]
	189 Compare W8, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 Move X0, X20
	193 Move X1, X31
	194 Move X2, X31
	195 Call Object.op_Inequality, X0, X1
	196 Move TEMP, X0
	197 And TEMP, TEMP, 1
	198 Compare TEMP, 1
	199 JumpIfNotEqual {331}
	200 Move X0, [X31+360]
	201 Move X1, X31
	202 Call String.IsNullOrEmpty, X0
	203 Move TEMP, X0
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfEqual {331}
	207 Move X0, [X31+360]
	208 Compare X0, 0
	209 JumpIfEqual {346}
	210 Move W1, 59
	211 Move W2, W31
	212 Move X3, X31
	213 Call String.Split, X0, X1, X2
	214 Compare X0, 0
	215 JumpIfEqual {346}
	216 Move W8, [X0+24]
	217 Move X21, X0
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X29, 0xA03000
	220 Move X26, 0xA03000
	221 Move X27, 0xA03000
	222 Move X28, 0xA03000
	223 Move X29, [X29+1600]
	224 Move X26, [X26+1584]
	225 Move X27, [X27+1552]
	226 Move X28, [X28+1560]
	227 Move X25, X31
	228 Move X8, 0xA03000
	229 Move X8, [X8+1608]
	230 Move X0, [X8]
	231 Call 0x1C17F10
	232 Move X1, X31
	233 Move X22, X0
	234 Call Object..ctor, X0
	235 Move W8, [X21+24]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Compare X22, 0
	238 JumpIfEqual {346}
	239 Add X8, X21, X25
	240 Move X8, [X8+32]
	241 Move [X22+16], X8
	242 Compare X20, 0
	243 JumpIfEqual {346}
	244 Move X0, X20
	245 Call InputActionAsset.get_controlSchemes, X0
	246 Move X8, 0xA03000
	247 Move X8, [X8+1568]
	248 Move [X31+144], X0
	249 Move [X31+152], X1
	250 Move X8, [X8]
	251 Move X0, X8
	252 Call 0x1C17F10
	253 Move X2, [X29]
	254 Move X1, X22
	255 Move X3, X31
	256 Move X23, X0
	257 Call Predicate`1<InputControlScheme>..ctor, X0, X1, X2
	258 Move X2, [X26]
	259 Add X0, X31, 144
	260 Move X1, X23
	261 Call ReadOnlyArray`1<InputControlScheme>.IndexOf, X0, X1
	262 Add W31, W0, 1
	263 Move W22, W0
	264 Move X0, X20
	265 Call InputActionAsset.get_controlSchemes, X0
	266 Move X8, 0xA03000
	267 Move X8, [X8+1592]
	268 Move [X31+144], X0
	269 Move [X31+152], X1
	270 Add X0, X31, 144
	271 Move W1, W22
	272 Move X2, [X8]
	273 Add X8, X31, 8
	274 Call ReadOnlyArray`1<InputControlScheme>.get_Item, X0, X1
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 Move X8, [X31+24]
	277 Add X0, X31, 160
	278 Move X1, X31
	279 Move [X24], V0
	280 Move [X31+176], X8
	281 Call InputControlScheme.get_deviceRequirements, X0
	282 Move X8, 0xA03000
	283 Move X8, [X8+1576]
	284 Move [X31+96], X0
	285 Move [X31+104], X1
	286 Add X0, X31, 96
	287 Move X9, [X8]
	288 Add X8, X31, 8
	289 Move X1, X9
	290 Call ReadOnlyArray`1<DeviceRequirement>.GetEnumerator, X0
	291 NotImplemented "Instruction LDUR not yet implemented."
	292 Move X8, [X31+24]
	293 Move [X31+7], V0
	294 Move [X31+128], X8
	295 Move X1, [X27]
	296 Add X0, X31, 112
	297 Call Enumerator<DeviceRequirement>.MoveNext, X0
	298 Move TEMP, X0
	299 And TEMP, TEMP, 1
	300 Compare TEMP, 1
	301 JumpIfNotEqual {308}
	302 Move X1, [X28]
	303 Add X0, X31, 112
	304 Call Enumerator<DeviceRequirement>.get_Current, X0
	305 Move X1, X0
	306 Move X0, X19
	307 Call RebindingOperation.WithControlsHavingToMatchPath, X0, X1
	308 Move X8, 0xA03000
	309 Move X8, [X8+1544]
	310 Add X0, X31, 112
	311 Move X1, [X8]
	312 Call Enumerator<DeviceRequirement>.Dispose, X0
	313 NotImplemented "Instruction LDRSW not yet implemented."
	314 Add X25, X25, 1
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Move X22, X0
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Move X0, X22
	319 Call 0x3EB2AD0
	320 Move X23, [X0]
	321 Call 0x3EB2AE0
	322 Move X8, 0xA03000
	323 Move X8, [X8+1544]
	324 Add X0, X31, 112
	325 Move X1, [X8]
	326 Call Enumerator<DeviceRequirement>.Dispose, X0
	327 Compare X23, 0
	328 JumpIfEqual {313}
	329 Move X0, X23
	330 Call 0x1C17F18
	331 Move X0, X19
	332 Add X31, X31, 432
	333 Move X20, [X31+80]
	334 Move X19, [X31+88]
	335 Move X22, [X31+64]
	336 Move X21, [X31+72]
	337 Move X24, [X31+48]
	338 Move X23, [X31+56]
	339 Move X26, [X31+32]
	340 Move X25, [X31+40]
	341 Move X28, [X31+16]
	342 Move X27, [X31+24]
	343 Move X29, [X31+96]
	344 Move X30, [X31+104]
	345 Return X0
	346 Call 0x1C17F20
	347 Call 0x1C17F28
	348 Move X0, 0x9B9000
	349 Move X0, [X0+1888]
	350 Call 0x1C17D08
	351 Call 0x1C17F10
	352 Move X19, X0
	353 Move X0, 0xA03000
	354 Move X0, [X0+888]
	355 Call 0x1C17D08
	356 Move X1, X0
	357 Move X0, X19
	358 Move X2, X31
	359 Call ArgumentOutOfRangeException..ctor, X0, X1
	360 Move X0, 0xA03000
	361 Move X0, [X0+1616]
	362 Call 0x1C17D08
	363 Move X1, X0
	364 Move X0, X19
	365 Call 0x1C17DEC
	366 Move X23, X31
	367 Move X22, X0
	368 Move X8, 0xA03000
	369 Move X8, [X8+1544]
	370 Move X1, [X8]
	371 Add X0, X31, 112
	372 Call Enumerator<DeviceRequirement>.Dispose, X0
	373 Compare X23, 0
	374 JumpIfNotEqual {377}
	375 Move X0, X22
	376 Call 0x1D2D690
	377 Move X0, X23
	378 Call 0x1C17F18
	379 Call 0x1991590

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithBindingMask(System.Nullable`1<UnityEngine.InputSystem.InputBinding> bindingMask)

Disassembly:
	0x03744694 MOV W29, W31
	0x03744698 MOV W28, W31
	0x0374469C ADD X21, X19, 0x80
	0x037446A0 ADD X22, X19, 0xF8
	0x037446A4 ADD X23, X19, 0xD0
	0x037446A8 ADD X8, X19, 0xD8
	0x037446AC FMOV S10, 1
	0x037446B0 STR X8, [X31 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Add X0, X0, 24
	005 Move W2, 96
	006 Call 0x3EB2B30
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithBindingGroup(System.String group)

Disassembly:
	0x037446B4 ADD X0, X31, 0xB0
	0x037446B8 MOV X1, X31
	0x037446BC BL 0x3775274
	0x037446C0 TBZ X0, 0x0, 0x3744A48
	0x037446C4 LDR X25, [X31 + 0xF8]
	0x037446C8 LDR X1, [X31 + 0x128]
	0x037446CC MOV X0, X25
	0x037446D0 MOV X2, X20
	0x037446D4 MOV X3, X31
	0x037446D8 BL 0x3774680
	0x037446DC MOV X26, X0
	0x037446E0 LDR X0, [X19 + 0xC0]
	0x037446E4 MOV X1, X31
	0x037446E8 BL 0x32277A8
	0x037446EC TBNZ X0, 0x0, 0x3744718
	0x037446F0 LDR X0, [X19 + 0xC0]
	0x037446F4 MOV X1, X25
	0x037446F8 MOV X2, X31
	0x037446FC BL 0x3777114
	0x03744700 TBZ X0, 0x0, 0x3744718
	0x03744704 MOV X0, X25
	0x03744708 MOV X1, X26
	0x0374470C MOV X2, X31
	0x03744710 BL 0x37744FC
	0x03744714 TBNZ X0, 0x0, 0x3744A40
	0x03744718 LDR W2, [X19 + 0xA0]
	0x0374471C CMP W2, 0x1
	0x03744720 B.LT 0x3744734
	0x03744724 LDR X1, [X19 + 0xA8]
	0x03744728 MOV X0, X25
	0x0374472C BL 0x3744C34
	0x03744730 TBNZ X0, 0x0, 0x37446B4
	0x03744734 LDR W2, [X19 + 0x90]
	0x03744738 CMP W2, 0x1
	0x0374473C B.LT 0x3744750
	0x03744740 LDR X1, [X19 + 0x98]
	0x03744744 MOV X0, X25
	0x03744748 BL 0x3744C34

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+192], X30
	003 Move [X31+208], X22
	004 Move [X31+216], X21
	005 Move [X31+224], X20
	006 Move [X31+232], X19
	007 Move X22, 0xC9D000
	008 Move X21, 0xA01000
	009 Move W8, [X22+3416]
	010 Move X21, [X21+3920]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xA01000
	018 Move X0, [X0+3920]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3416], W8
	022 Move X2, [X21]
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Add X0, X31, 0
	025 Add X1, X31, 96
	026 Move [X31+128], X31
	027 Move [X31+136], X20
	028 Move [X31+64], V0
	029 Move [X31+72], V0
	030 Move [X31+32], V0
	031 Move [X31+40], V0
	032 Move [X31], V0
	033 Move [X31+8], V0
	034 Move [X31+96], V0
	035 Move [X31+104], V0
	036 Move [X31+144], V0
	037 Move [X31+152], V0
	038 Move [X31+176], X31
	039 Call Nullable`1<InputBinding>..ctor, X0, X1
	040 Add X0, X19, 24
	041 Add X1, X31, 0
	042 Move W2, 96
	043 Call 0x3EB2AC0
	044 Move X0, X19
	045 Move X20, [X31+224]
	046 Move X19, [X31+232]
	047 Move X22, [X31+208]
	048 Move X21, [X31+216]
	049 Move X30, [X31+192]
	050 Add X31, X31, 240
	051 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithoutGeneralizingPathOfSelectedControl()

Disassembly:
	0x0374474C TBZ X0, 0x0, 0x37446B4
	0x03744750 LDR X0, [X24]
	0x03744754 LDR X27, [X19 + 0x78]
	0x03744758 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W8, [X0+360]
	002 Or W8, W8, 128
	003 Move [X0+360], W8
	004 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithRebindAddingNewBinding(System.String group = null)

Disassembly:
	0x0374475C CBNZ W8, 0x3744764
	0x03744760 BL 0x1C16DFC
	0x03744764 MOV X0, X27
	0x03744768 MOV X1, X31
	0x0374476C MOV X2, X31

ISIL:
	001 Move W8, [X0+360]
	002 Move [X0+184], X1
	003 Or W8, W8, 256
	004 Move [X0+360], W8
	005 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithMagnitudeHavingToBeGreaterThan(System.Single magnitude)

Disassembly:
	0x03744770 BL 0x3395F0C
	0x03744774 TBZ X0, 0x0, 0x3744798
	0x03744778 LDR X0, [X19 + 0x78]
	0x0374477C CBZ X0, 0x3744AF0
	0x03744780 LDR X8, [X0]
	0x03744784 LDR X9, [X8 + 0x868]
	0x03744788 LDR X2, [X8 + 0x870]
	0x0374478C MOV X1, X25
	0x03744790 BLR X9
	0x03744794 TBZ X0, 0x0, 0x37446B4
	0x03744798 MOV X0, X21
	0x0374479C MOV X1, X31
	0x037447A0 BL 0x375F7A0
	0x037447A4 TBNZ X0, 0x0, 0x3744800
	0x037447A8 CBZ X25, 0x3744AF4
	0x037447AC LDP X0, X1, [X19 + 0x80]
	0x037447B0 LDP X2, X3, [X25 + 0x58]
	0x037447B4 MOV X4, X31
	0x037447B8 BL 0x3757138
	0x037447BC TBZ X0, 0x0, 0x3744800
	0x037447C0 ADRP X8, 0x9D7000
	0x037447C4 LDR X8, [X8 + 0xDC0]
	0x037447C8 LDR X0, [X8]
	0x037447CC LDR W8, [X0 + 0xE0]
	0x037447D0 CBNZ W8, 0x37447E4
	0x037447D4 BL 0x1C16DFC
	0x037447D8 ADRP X8, 0x9D7000
	0x037447DC LDR X8, [X8 + 0xDC0]
	0x037447E0 LDR X0, [X8]
	0x037447E4 LDR X8, [X0 + 0xB8]
	0x037447E8 LDP X1, X2, [X19 + 0x80]
	0x037447EC LDP X3, X4, [X25 + 0x58]
	0x037447F0 ADD X0, X8, 0x10
	0x037447F4 MOV X5, X31
	0x037447F8 BL 0x381909C
	0x037447FC TBZ X0, 0x0, 0x37446B4
	0x03744800 MOV X0, X25
	0x03744804 MOV X1, X26
	0x03744808 MOV X2, X31
	0x0374480C MOV X3, X31
	0x03744810 BL 0x3773FF4
	0x03744814 TBZ X0, 0x0, 0x374487C
	0x03744818 LDR X0, [X19 + 0x170]
	0x0374481C CBZ X0, 0x3744B00
	0x03744820 ADRP X8, 0xA01000
	0x03744824 LDR X8, [X8 + 0x768]
	0x03744828 LDR X2, [X8]
	0x0374482C MOV X1, X25
	0x03744830 BL 0x2AB4C84

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move V8, V0
	007 Move X19, X0
	008 Call RebindingOperation.ThrowIfRebindInProgress, X0
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move [X19+200], S8
	011 Move X0, X19
	012 Move X20, [X31+32]
	013 Move X19, [X31+40]
	014 Move X30, [X31+24]
	015 Move V8, [X31+16]
	016 Add X31, X31, 48
	017 Return X0
	018 Move [X31+12], S8
	019 Move X0, 0x9B0000
	020 Move X0, [X0+2704]
	021 Call 0x1C17D08
	022 Add X1, X31, 12
	023 Call 0x1C17E04
	024 Move X19, X0
	025 Move X0, 0xA02000
	026 Move X0, [X0+1728]
	027 Call 0x1C17D08
	028 Move X1, X19
	029 Move X2, X31
	030 Call String.Format, X0, X1
	031 Move X19, X0
	032 Move X0, 0x9B8000
	033 Move X0, [X0+1400]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Move X0, 0xA02000
	038 Move X0, [X0+1736]
	039 Call 0x1C17D08
	040 Move X2, X0
	041 Move X0, X20
	042 Move X1, X19
	043 Move X3, X31
	044 Call ArgumentException..ctor, X0, X1, X2
	045 Move X0, 0xA02000
	046 Move X0, [X0+1744]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X20
	050 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithoutIgnoringNoisyControls()

Disassembly:
	0x03744834 TBNZ X0, 0x0, 0x3744858
	0x03744838 LDR X0, [X19 + 0x170]
	0x0374483C CBZ X0, 0x3744B04
	0x03744840 ADRP X8, 0xA01000
	0x03744844 LDR X8, [X8 + 0x760]
	0x03744848 LDR X2, [X8]
	0x0374484C FMOV S0, W31
	0x03744850 MOV X1, X25
	0x03744854 BL 0x2AB4A88

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call RebindingOperation.ThrowIfRebindInProgress, X0
	005 Move W8, [X19+360]
	006 Move X0, X19
	007 Or W8, W8, 64
	008 Move [X19+360], W8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithControlsHavingToMatchPath(System.String path)

Disassembly:
	0x0374456C BL 0x1C16CF4
	0x03744570 ADRP X0, 0xA01000
	0x03744574 LDR X0, [X0 + 0x768]
	0x03744578 BL 0x1C16CF4
	0x0374457C ADRP X0, 0xA01000
	0x03744580 LDR X0, [X0 + 0x770]
	0x03744584 BL 0x1C16CF4
	0x03744588 ADRP X0, 0xA01000
	0x0374458C LDR X0, [X0 + 0x778]
	0x03744590 BL 0x1C16CF4
	0x03744594 ADRP X0, 0x9D7000
	0x03744598 LDR X0, [X0 + 0xDC0]
	0x0374459C BL 0x1C16CF4
	0x037445A0 ADRP X0, 0x9D7000
	0x037445A4 LDR X0, [X0 + 0xE40]
	0x037445A8 BL 0x1C16CF4
	0x037445AC ADRP X0, 0xA01000
	0x037445B0 LDR X0, [X0 + 0x720]
	0x037445B4 BL 0x1C16CF4
	0x037445B8 ADRP X0, 0xA01000
	0x037445BC LDR X0, [X0 + 0x678]
	0x037445C0 BL 0x1C16CF4
	0x037445C4 ADRP X0, 0x9AF000
	0x037445C8 LDR X0, [X0 + 0x6C0]
	0x037445CC BL 0x1C16CF4
	0x037445D0 MOVZ W8, 0x1
	0x037445D4 STRB W8, [X20 + 0xD62]
	0x037445D8 MOVI V0.2D, 0x0
	0x037445DC ADD X0, X31, 0x128
	0x037445E0 MOV X1, X31
	0x037445E4 STP X31, X31, [X31 + 0x90]
	0x037445E8 STR X31, [X31 + 0xA0]
	0x037445EC STR X31, [X31 + 0x88]
	0x037445F0 STP V0, V0, [X31 + 0x100]
	0x037445F4 STP V0, V0, [X31 + 0xE0]
	0x037445F8 STP V0, V0, [X31 + 0xC0]
	0x037445FC STR V0, [X31 + 0xB]
	0x03744600 STR W31, [X31 + 0x84]
	0x03744604 BL 0x37F80B4
	0x03744608 MOVZ W8, 0x4154
	0x0374460C MOVK W8, 0x53540000
	0x03744610 CMP W0, W8
	0x03744614 B.EQ 0x3744628
	0x03744618 MOVZ W8, 0x5441
	0x0374461C MOVK W8, 0x444C0000
	0x03744620 CMP W0, W8
	0x03744624 B.NE 0x3744AC8
	0x03744628 ADRP X24, 0x9AF000
	0x0374462C LDR X24, [X24 + 0x6C0]
	0x03744630 LDR W8, [X19 + 0x168]
	0x03744634 LDR X9, [X31 + 0x128]
	0x03744638 MOVZ W10, 0x1C
	0x0374463C MOVZ W11, 0x14
	0x03744640 ANDS W31, W8, 0x40
	0x03744644 CSEL W1, W11, W10, EQ
	0x03744648 AND X20, X0, 0x0
	0x0374464C ADD X8, X31, 0x10
	0x03744650 FMOV S0, W31
	0x03744654 MOV X0, X9
	0x03744658 MOV X2, X21
	0x0374465C MOV X3, X31
	0x03744660 BL 0x3775004
	0x03744664 LDR X8, [X31 + 0x20]
	0x03744668 LDR V0, [X31 + 0x1]
	0x0374466C ADD X0, X31, 0x90
	0x03744670 MOV X1, X31
	0x03744674 STR X8, [X31 + 0xA0]
	0x03744678 ADD X8, X31, 0x10
	0x0374467C STR V0, [X31 + 0x9]
	0x03744680 BL 0x377524C
	0x03744684 ADD X0, X31, 0xB0
	0x03744688 ADD X1, X31, 0x10
	0x0374468C MOVZ W2, 0x70
	0x03744690 BL 0x3EB1AC0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xC9D000
	008 Move W8, [X21+3417]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA02000
	016 Move X0, [X0+1528]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3417], W8
	020 Move X0, X19
	021 Call RebindingOperation.ThrowIfRebindInProgress, X0
	022 Move X0, X20
	023 Move X1, X31
	024 Call String.IsNullOrEmpty, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {69}
	029 Move X21, X19
	030 Add X21, X21, 144
	031 Move W8, [X21]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X22, X21, 8
	034 Move X23, X31
	035 Move X8, [X22]
	036 Compare X8, 0
	037 JumpIfEqual {67}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X8, X8, X23
	041 Move X0, [X8+32]
	042 Move W2, 3
	043 Move X1, X20
	044 Move X3, X31
	045 Call String.Compare, X0, X1, X2
	046 Compare W0, 0
	047 JumpIfEqual {59}
	048 NotImplemented "Instruction LDRSW not yet implemented."
	049 Add X23, X23, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X8, 0xA02000
	052 Move X8, [X8+1528]
	053 Move W3, 10
	054 Move X0, X22
	055 Move X1, X21
	056 Move X4, [X8]
	057 Move X2, X20
	058 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	059 Move X0, X19
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return X0
	067 Call 0x1C17F20
	068 Call 0x1C17F28
	069 Move X0, 0x9B5000
	070 Move X0, [X0+1320]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0x9BB000
	075 Move X0, [X0+288]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Move X2, X31
	080 Call ArgumentNullException..ctor, X0, X1
	081 Move X0, 0xA02000
	082 Move X0, [X0+1720]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithControlsExcluding(System.String path)

Disassembly:
	0x03742BF4 TBNZ X8, 0x0, 0x3742C0C
	0x03742BF8 ADRP X0, 0xA03000
	0x03742BFC LDR X0, [X0 + 0x660]
	0x03742C00 BL 0x1C16CF4
	0x03742C04 MOVZ W8, 0x1
	0x03742C08 STRB W8, [X21 + 0xD4D]
	0x03742C0C LDP X8, X9, [X19 + 0x98]
	0x03742C10 LDR W10, [X19 + 0xC]
	0x03742C14 LDR X0, [X20]
	0x03742C18 ADD X1, X31, 0x8
	0x03742C1C STP X8, X9, [X31 + 0x8]
	0x03742C20 STP W10, W31, [X31 + 0x18]
	0x03742C24 BL 0x1C16E04
	0x03742C28 LDP X20, X19, [X31 + 0x30]
	0x03742C2C LDP X30, X21, [X31 + 0x20]
	0x03742C30 ADD X31, X31, 0x40
	0x03742C34 RET
	0x03742C38 RET
	0x03742C3C STP X30, X21, [X31 - 0x20]!
	0x03742C40 STP X20, X19, [X31 + 0x10]
	0x03742C44 MOV X21, X0
	0x03742C48 STP X1, X2, [X0], #0x10
	0x03742C4C MOVZ W2, 0x58
	0x03742C50 MOV X1, X3
	0x03742C54 MOV X19, X5
	0x03742C58 MOV X20, X4
	0x03742C5C BL 0x3EB1B30
	0x03742C60 STP X20, X19, [X21 + 0x68]
	0x03742C64 LDP X20, X19, [X31 + 0x10]
	0x03742C68 LDP X30, X21, [X31], #0x20
	0x03742C6C RET
	0x03742C70 STP X29, X30, [X31 - 0x60]!
	0x03742C74 STP X28, X27, [X31 + 0x10]
	0x03742C78 STP X26, X25, [X31 + 0x20]
	0x03742C7C STP X24, X23, [X31 + 0x30]
	0x03742C80 STP X22, X21, [X31 + 0x40]
	0x03742C84 STP X20, X19, [X31 + 0x50]
	0x03742C88 SUB X31, X31, 0x450
	0x03742C8C ADRP X25, 0xC9E000
	0x03742C90 MOV X19, X8
	0x03742C94 LDRB W8, [X25 + 0xD50]
	0x03742C98 MOV X20, X4
	0x03742C9C MOV X21, X3
	0x03742CA0 MOV X22, X2
	0x03742CA4 MOV W24, W1
	0x03742CA8 MOV X23, X0
	0x03742CAC ADD X26, X31, 0x200
	0x03742CB0 TBNZ X8, 0x0, 0x3742CD4
	0x03742CB4 ADRP X0, 0xA03000
	0x03742CB8 LDR X0, [X0 + 0x668]
	0x03742CBC BL 0x1C16CF4
	0x03742CC0 ADRP X0, 0xA03000
	0x03742CC4 LDR X0, [X0 + 0x398]
	0x03742CC8 BL 0x1C16CF4
	0x03742CCC MOVZ W8, 0x1
	0x03742CD0 STRB W8, [X25 + 0xD50]
	0x03742CD4 MOVI V0.2D, 0x0
	0x03742CD8 CMP W24, 0x1
	0x03742CDC STP V0, V0, [X26 + 0x230]
	0x03742CE0 STP V0, V0, [X26 + 0x210]
	0x03742CE4 STP V0, V0, [X26 + 0x1F0]
	0x03742CE8 STP V0, V0, [X26 + 0x1D0]
	0x03742CEC B.LT 0x3742E54
	0x03742CF0 CBZ X23, 0x3742E88
	0x03742CF4 ADRP X28, 0xA03000
	0x03742CF8 LDR X28, [X28 + 0x668]
	0x03742CFC MOV X27, X31
	0x03742D00 MOV W29, W24
	0x03742D04 ADD X24, X23, 0x30
	0x03742D08 LDR W8, [X23 + 0x18]
	0x03742D0C CMP X27, X8
	0x03742D10 B.CS 0x3742E84
	0x03742D14 LDUR X1, [X24 - 0x8]
	0x03742D18 MOVZ W2, 0x5

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xC9F000
	008 Move W8, [X21+3418]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA04000
	016 Move X0, [X0+1528]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3418], W8
	020 Move X0, X19
	021 Call RebindingOperation.ThrowIfRebindInProgress, X0
	022 Move X0, X20
	023 Move X1, X31
	024 Call String.IsNullOrEmpty, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {69}
	029 Move X21, X19
	030 Add X21, X21, 160
	031 Move W8, [X21]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X22, X21, 8
	034 Move X23, X31
	035 Move X8, [X22]
	036 Compare X8, 0
	037 JumpIfEqual {67}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X8, X8, X23
	041 Move X0, [X8+32]
	042 Move W2, 3
	043 Move X1, X20
	044 Move X3, X31
	045 Call String.Compare, X0, X1, X2
	046 Compare W0, 0
	047 JumpIfEqual {59}
	048 NotImplemented "Instruction LDRSW not yet implemented."
	049 Add X23, X23, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X8, 0xA04000
	052 Move X8, [X8+1528]
	053 Move W3, 10
	054 Move X0, X22
	055 Move X1, X21
	056 Move X4, [X8]
	057 Move X2, X20
	058 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	059 Move X0, X19
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return X0
	067 Call 0x1C17F20
	068 Call 0x1C17F28
	069 Move X0, 0x9B7000
	070 Move X0, [X0+1320]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0x9BD000
	075 Move X0, [X0+288]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Move X2, X31
	080 Call ArgumentNullException..ctor, X0, X1
	081 Move X0, 0xA04000
	082 Move X0, [X0+1536]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation WithTimeout(System.Single timeInSeconds)

Disassembly:
	0x03744858 LDR X0, [X19 + 0x170]
	0x0374485C CBZ X0, 0x3744AFC

ISIL:
	001 Move [X0+240], S0
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation OnComplete(System.Action`1<UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation> callback)

Disassembly:
	0x03744860 ADRP X8, 0xA01000
	0x03744864 LDR X8, [X8 + 0x778]

ISIL:
	001 Move [X0+280], X1
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation OnCancel(System.Action`1<UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation> callback)

Disassembly:
	0x03744868 LDR X2, [X8]
	0x0374486C FMOV S0, W31

ISIL:
	001 Move [X0+288], X1
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation OnPotentialMatch(System.Action`1<UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation> callback)

Disassembly:
	0x03744870 MOV X1, X25
	0x03744874 BL 0x2AB4A74

ISIL:
	001 Move [X0+296], X1
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation OnGeneratePath(System.Func`2<UnityEngine.InputSystem.InputControl, System.String> callback)

Disassembly:
	0x03744878 B 0x37446B4
	0x0374487C CBZ X25, 0x3744AF8

ISIL:
	001 Move [X0+304], X1
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation OnComputeScore(System.Func`3<UnityEngine.InputSystem.InputControl, UnityEngine.InputSystem.LowLevel.InputEventPtr, System.Single> callback)

Disassembly:
	0x03744880 LDR X8, [X25]
	0x03744884 LDP X9, X2, [X8 + 0x198]

ISIL:
	001 Move [X0+312], X1
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation OnApplyBinding(System.Action`2<UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation, System.String> callback)

Disassembly:
	0x03744888 MOV X0, X25
	0x0374488C MOV X1, X26

ISIL:
	001 Move [X0+320], X1
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation OnMatchWaitForAnother(System.Single seconds)

Disassembly:
	0x03742BEC LDR X20, [X20 + 0x660]
	0x03742BF0 MOV X19, X0

ISIL:
	001 Move [X0+244], S0
	002 Return X0

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation Start()

Disassembly:
	0x03744890 BLR X9
	0x03744894 MOV V8.16B, V0.16B
	0x03744898 FCMP S0, 0x0
	0x0374489C B.LT 0x3744908
	0x037448A0 LDR X0, [X19 + 0x170]
	0x037448A4 CBZ X0, 0x3744B08
	0x037448A8 ADRP X8, 0xA01000
	0x037448AC LDR X8, [X8 + 0x770]
	0x037448B0 LDR X3, [X8]
	0x037448B4 ADD X2, X31, 0x8C
	0x037448B8 MOV X1, X25
	0x037448BC BL 0x2AB64B4
	0x037448C0 TBNZ X0, 0x0, 0x37448F0
	0x037448C4 MOV X0, X25
	0x037448C8 MOV X1, X31
	0x037448CC BL 0x377240C
	0x037448D0 STR S0, [X31 + 0x8C]
	0x037448D4 LDR X0, [X19 + 0x170]
	0x037448D8 CBZ X0, 0x3744B14
	0x037448DC ADRP X8, 0xA01000
	0x037448E0 LDR X8, [X8 + 0x760]
	0x037448E4 LDR X2, [X8]
	0x037448E8 MOV X1, X25
	0x037448EC BL 0x2AB4A88
	0x037448F0 LDR V0, [X31 + 0x8C]
	0x037448F4 LDR V1, [X19 + 0xC8]
	0x037448F8 MOVZ W29, 0x1
	0x037448FC FABD S0, S0, S0
	0x03744900 FCMP S0, S1
	0x03744904 B.MI 0x37446B4
	0x03744908 LDR X8, [X19 + 0x138]
	0x0374490C CBZ X8, 0x3744938
	0x03744910 LDR X0, [X8 + 0x40]
	0x03744914 LDR X2, [X31 + 0x128]
	0x03744918 LDR X9, [X8 + 0x18]
	0x0374491C LDR X3, [X8 + 0x28]
	0x03744920 MOV X1, X25
	0x03744924 BLR X9
	0x03744928 ADRP X26, 0xA01000
	0x0374492C LDR X26, [X26 + 0x718]
	0x03744930 MOV V9.16B, V0.16B
	0x03744934 B 0x3744958
	0x03744938 MOV X0, X25
	0x0374493C MOV X1, X31
	0x03744940 BL 0x3772300
	0x03744944 ADRP X26, 0xA01000
	0x03744948 LDR X26, [X26 + 0x718]
	0x0374494C FADD S0, S8, S10
	0x03744950 ANDS W31, W0, 0x1
	0x03744954 FCSEL S9, S8, S0, NE
	0x03744958 ADRP X8, 0xA01000
	0x0374495C LDR X8, [X8 + 0x720]
	0x03744960 LDR X2, [X8]
	0x03744964 MOV X0, X22
	0x03744968 MOV X1, X25
	0x0374496C BL 0x2DFB45C
	0x03744970 ADDS W31, W0, 0x1
	0x03744974 B.EQ 0x37449C4
	0x03744978 LDR X8, [X23]
	0x0374497C CBZ X8, 0x3744B0C
	0x03744980 LDR W9, [X8 + 0x18]
	0x03744984 CMP W0, W9
	0x03744988 B.CS 0x3744B10
	0x0374498C ADD X8, X8, W0, 0x2, SXTW
	0x03744990 LDR V0, [X8 + 0x20]!
	0x03744994 MOVZ W29, 0x1
	0x03744998 FCMP S0, S9
	0x0374499C B.PL 0x37446B4
	0x037449A0 STR S9, [X8]
	0x037449A4 LDR V0, [X19 + 0xF4]
	0x037449A8 MOVZ W29, 0x1
	0x037449AC MOVZ W28, 0x1
	0x037449B0 FCMP S0, 0x0
	0x037449B4 B.LE 0x37446B4
	0x037449B8 MOV X0, X31
	0x037449BC BL 0x37FC688
	0x037449C0 B 0x3744A30
	0x037449C4 ADRP X9, 0x9D7000
	0x037449C8 LDR W8, [X22]
	0x037449CC LDR X9, [X9 + 0xE40]
	0x037449D0 STP W8, W8, [X31 + 0x84]
	0x037449D4 LDR X2, [X9]
	0x037449D8 MOV X0, X22
	0x037449DC MOV X1, X25
	0x037449E0 BL 0x2DFACEC
	0x037449E4 LDR X3, [X26]
	0x037449E8 ADD X1, X31, 0x88

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC9D000
	005 Move W8, [X20+3419]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9D7000
	012 Move X0, [X0+4072]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3419], W8
	016 Move W8, [X19+360]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {58}
	021 Move X0, [X19+16]
	022 Compare X0, 0
	023 JumpIfEqual {38}
	024 Call InputAction.get_bindings, X0
	025 Move X8, X1
	026 ShiftRight X8, 32
	027 And X8, X8, 0x7FFFFFFF
	028 Compare X8, 0
	029 JumpIfNotEqual {35}
	030 Move W8, [X19+361]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {81}
	035 Move X8, [X19+16]
	036 Compare X8, 0
	037 JumpIfNotEqual {41}
	038 Move X8, [X19+320]
	039 Compare X8, 0
	040 JumpIfEqual {63}
	041 Move X0, X31
	042 Call InputState.get_currentTime
	043 Move V1, [X19+244]
	044 Move [X19+232], D0
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move V0, [X19+240]
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move X0, X19
	049 Call RebindingOperation.HookOnAfterUpdate, X0
	050 Move X8, 0xBFF00000
	051 Move [X19+224], X8
	052 Move X0, X19
	053 Call RebindingOperation.HookOnEvent, X0
	054 Move W8, [X19+360]
	055 And W8, W8, 0xFFFFFFF8
	056 Or W8, W8, 1
	057 Move [X19+360], W8
	058 Move X0, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Return X0
	063 Move X0, 0x9B0000
	064 Move X0, [X0+1456]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0xA02000
	069 Move X0, [X0+1752]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call InvalidOperationException..ctor, X0, X1
	075 Move X0, 0xA02000
	076 Move X0, [X0+1760]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC
	081 Move X0, 0xA02000
	082 Move X19, [X19+16]
	083 Move X0, [X0+1768]
	084 Call 0x1C17D08
	085 Move X1, X19
	086 Move X2, X31
	087 Call String.Format, X0, X1
	088 Move X19, X0
	089 Move X0, 0x9B0000
	090 Move X0, [X0+1456]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X1, X19
	094 Move X2, X31
	095 Move X20, X0
	096 Call InvalidOperationException..ctor, X0, X1
	097 Move X0, 0xA02000
	098 Move X0, [X0+1760]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X20
	102 Call 0x1C17DEC

Method: System.Void Cancel()

Disassembly:
	0x03744B84 B 0x3744B8C
	0x03744B88 B 0x3744BD0
	0x03744B8C MOV X20, X0
	0x03744B90 MOVZ W29, 0x1

ISIL:
	001 Move W8, [X0+360]
	002 Move TEMP, X8
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 Invalid "Jump target not found in method."
	006 Return 

Method: System.Void Complete()

Disassembly:
	0x03744BD0 MOV X20, X0
	0x03744BD4 CMP W1, 0x1
	0x03744BD8 B.NE 0x3744C04
	0x03744BDC MOV X0, X20

ISIL:
	001 Move W8, [X0+360]
	002 Move TEMP, X8
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 Invalid "Jump target not found in method."
	006 Return 

Method: System.Void AddCandidate(UnityEngine.InputSystem.InputControl control, System.Single score, System.Single magnitude = -1)

Disassembly:
	0x03744ED4 ADD X20, X19, 0xF8
	0x03744ED8 MOV X0, X20
	0x03744EDC BL 0x2DFB640
	0x03744EE0 LDR X2, [X21]
	0x03744EE4 MOV X0, X20
	0x03744EE8 MOV W1, W31
	0x03744EEC BL 0x2DFA384
	0x03744EF0 LDR X0, [X19 + 0x170]
	0x03744EF4 MOVZ X8, 0xBFF00000
	0x03744EF8 STR X8, [X19 + 0xE8]
	0x03744EFC CBZ X0, 0x3744F2C
	0x03744F00 ADRP X8, 0xA01000
	0x03744F04 LDR X8, [X8 + 0x758]
	0x03744F08 LDR X1, [X8]
	0x03744F0C BL 0x2AB4C18
	0x03744F10 MOV X0, X19
	0x03744F14 BL 0x37442F4
	0x03744F18 MOV X0, X19
	0x03744F1C LDP X20, X19, [X31 + 0x20]
	0x03744F20 LDP X22, X21, [X31 + 0x10]
	0x03744F24 LDR X30, [X31], #0x30
	0x03744F28 B 0x374437C
	0x03744F2C BL 0x1C16F20
	0x03744F30 STR X30, [X31 - 0x10]!
	0x03744F34 LDR X0, [X0 + 0x10]
	0x03744F38 CBZ X0, 0x3744F50
	0x03744F3C LDR X1, [X1 + 0x8]
	0x03744F40 MOVZ W2, 0x3
	0x03744F44 MOV X3, X31
	0x03744F48 LDR X30, [X31], #0x10
	0x03744F4C B 0x322697C
	0x03744F50 BL 0x1C16F20
	0x03744F54 STR X30, [X31 - 0x20]!
	0x03744F58 STP X20, X19, [X31 + 0x10]
	0x03744F5C ADRP X19, 0xC9C000
	0x03744F60 ADRP X20, 0xA00000
	0x03744F64 LDRB W8, [X19 + 0xD6B]
	0x03744F68 LDR X20, [X20 + 0xF68]
	0x03744F6C TBNZ X8, 0x0, 0x3744F84
	0x03744F70 ADRP X0, 0xA00000
	0x03744F74 LDR X0, [X0 + 0xF68]
	0x03744F78 BL 0x1C16CF4
	0x03744F7C MOVZ W8, 0x1
	0x03744F80 STRB W8, [X19 + 0xD6B]
	0x03744F84 LDR X8, [X20]
	0x03744F88 LDR X9, [X8 + 0xB8]
	0x03744F8C LDR W8, [X9]
	0x03744F90 SUBS W10, W8, 0x1
	0x03744F94 B.LT 0x3744FA0
	0x03744F98 MOV W8, W10
	0x03744F9C STR W10, [X9]
	0x03744FA0 CBZ W8, 0x3744FB0
	0x03744FA4 LDP X20, X19, [X31 + 0x10]
	0x03744FA8 LDR X30, [X31], #0x20
	0x03744FAC RET
	0x03744FB0 LDP X20, X19, [X31 + 0x10]
	0x03744FB4 MOV X0, X31
	0x03744FB8 LDR X30, [X31], #0x20
	0x03744FBC B 0x375137C
	0x03744FC0 SUB X31, X31, 0xA0
	0x03744FC4 STP X30, X25, [X31 + 0x60]
	0x03744FC8 STP X24, X23, [X31 + 0x70]
	0x03744FCC STP X22, X21, [X31 + 0x80]
	0x03744FD0 STP X20, X19, [X31 + 0x90]
	0x03744FD4 ADRP X21, 0xC9C000
	0x03744FD8 ADRP X22, 0x9B1000
	0x03744FDC LDRB W8, [X21 + 0xD6C]
	0x03744FE0 LDR X22, [X22 + 0x278]
	0x03744FE4 MOV X19, X1
	0x03744FE8 MOV X20, X0
	0x03744FEC TBNZ X8, 0x0, 0x3745028
	0x03744FF0 ADRP X0, 0xA01000
	0x03744FF4 LDR X0, [X0 + 0x108]
	0x03744FF8 BL 0x1C16CF4
	0x03744FFC ADRP X0, 0x9B1000
	0x03745000 LDR X0, [X0 + 0x278]
	0x03745004 BL 0x1C16CF4
	0x03745008 ADRP X0, 0x9AE000
	0x0374500C LDR X0, [X0 + 0xDD8]
	0x03745010 BL 0x1C16CF4
	0x03745014 ADRP X0, 0xA00000
	0x03745018 LDR X0, [X0 + 0x790]
	0x0374501C BL 0x1C16CF4
	0x03745020 MOVZ W8, 0x1
	0x03745024 STRB W8, [X21 + 0xD6C]
	0x03745028 LDR X8, [X22]
	0x0374502C LDR W9, [X20 + 0x30]
	0x03745030 LDR X8, [X8 + 0xB8]
	0x03745034 CMP W9, 0x1
	0x03745038 LDR X21, [X8]
	0x0374503C B.LT 0x37450E0
	0x03745040 ADRP X24, 0xA00000
	0x03745044 ADRP X25, 0xA00000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xC9D000
	009 Move W8, [X21+3420]
	010 Move V9, V1
	011 Move V8, V0
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0xA02000
	019 Move X0, [X0+1816]
	020 Call 0x1C17CF4
	021 Move X0, 0x9D8000
	022 Move X0, [X0+3648]
	023 Call 0x1C17CF4
	024 Move X0, 0xA02000
	025 Move X0, [X0+1824]
	026 Call 0x1C17CF4
	027 Move X0, 0xA02000
	028 Move X0, [X0+1656]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+3420], W8
	032 Move [X31+8], X31
	033 Compare X20, 0
	034 JumpIfEqual {83}
	035 Move X8, 0xA02000
	036 Move X8, [X8+1824]
	037 Add X21, X19, 248
	038 Move X0, X21
	039 Move X1, X20
	040 Move X2, [X8]
	041 Call 0x2DFC45C, X0, X1
	042 Add W31, W0, 1
	043 Move X8, [X19+208]
	044 Compare X8, 0
	045 JumpIfEqual {101}
	046 Move W9, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add X8, X8, W0
	049 Move [X8+32], S8
	050 Move X9, 0x9D8000
	051 Move W8, [X19+248]
	052 Move X9, [X9+3648]
	053 Move X0, X21
	054 Move X1, X20
	055 Move [X31+8], W8
	056 Move [X31+12], W8
	057 Move X2, [X9]
	058 Call 0x2DFBCEC, X0, X1
	059 Move X20, 0xA02000
	060 Move X20, [X20+1816]
	061 Add X0, X19, 208
	062 Add X1, X31, 12
	063 Move W2, 10
	064 Move X3, [X20]
	065 Move V0, V8
	066 Call ArrayHelpers.AppendWithCapacity, X0, X1, V0, X2
	067 Move X3, [X20]
	068 Add X0, X19, 216
	069 Add X1, X31, 8
	070 Move W2, 10
	071 Move V0, V9
	072 Call ArrayHelpers.AppendWithCapacity, X0, X1, V0, X2
	073 Move X0, X19
	074 Call RebindingOperation.SortCandidatesByScore, X0
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Move D9, [X31+16]
	080 Move D8, [X31+24]
	081 Add X31, X31, 64
	082 Return 
	083 Move X0, 0x9B5000
	084 Move X0, [X0+1320]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0x9D7000
	089 Move X0, [X0+3424]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ArgumentNullException..ctor, X0, X1
	095 Move X0, 0xA01000
	096 Move X0, [X0+1832]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Call 0x1C17DEC
	101 Call 0x1C17F20
	102 Call 0x1C17F28

Method: System.Void RemoveCandidate(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x03745178 MOV X2, X31
	0x0374517C BL 0x3C354F8
	0x03745180 MOV W8, W0
	0x03745184 MOV X0, X31
	0x03745188 TBZ X8, 0x0, 0x37451A4
	0x0374518C LDR X0, [X19 + 0x10]
	0x03745190 CBZ X0, 0x37451B0
	0x03745194 LDP X20, X19, [X31 + 0x10]
	0x03745198 LDR X30, [X31], #0x20
	0x0374519C B 0x37451B4
	0x037451A0 LDR X0, [X19 + 0x8]
	0x037451A4 LDP X20, X19, [X31 + 0x10]
	0x037451A8 LDR X30, [X31], #0x20
	0x037451AC RET
	0x037451B0 BL 0x1C16F20
	0x037451B4 SUB X31, X31, 0x30
	0x037451B8 STR X30, [X31 + 0x10]
	0x037451BC STP X20, X19, [X31 + 0x20]
	0x037451C0 ADRP X20, 0xC9B000
	0x037451C4 LDRB W8, [X20 + 0xD72]
	0x037451C8 MOV X19, X0
	0x037451CC TBNZ X8, 0x0, 0x37451E4
	0x037451D0 ADRP X0, 0x9AE000
	0x037451D4 LDR X0, [X0 + 0x598]
	0x037451D8 BL 0x1C16CF4
	0x037451DC MOVZ W8, 0x1
	0x037451E0 STRB W8, [X20 + 0xD72]
	0x037451E4 LDR X0, [X19 + 0x28]
	0x037451E8 CBNZ X0, 0x374524C
	0x037451EC ADRP X8, 0x9AE000
	0x037451F0 LDR X8, [X8 + 0x598]
	0x037451F4 LDR X20, [X19 + 0x18]
	0x037451F8 LDR X0, [X8]
	0x037451FC LDR W8, [X0 + 0xE0]
	0x03745200 CBNZ W8, 0x3745208
	0x03745204 BL 0x1C16DFC
	0x03745208 MOV X0, X20
	0x0374520C MOV X1, X31
	0x03745210 MOV X2, X31
	0x03745214 BL 0x3C3883C
	0x03745218 MOV W8, W0
	0x0374521C MOV X0, X31
	0x03745220 TBNZ X8, 0x0, 0x374524C
	0x03745224 LDP X20, X1, [X19 + 0x18]
	0x03745228 ADD X0, X31, 0x0
	0x0374522C MOV X2, X31
	0x03745230 STP X31, X31, [X31]
	0x03745234 BL 0x3376AD0
	0x03745238 CBZ X20, 0x374525C
	0x0374523C LDP X1, X2, [X31]
	0x03745240 MOV X0, X20
	0x03745244 BL 0x3737C20
	0x03745248 STR X0, [X19 + 0x28]
	0x0374524C LDP X20, X19, [X31 + 0x20]
	0x03745250 LDR X30, [X31 + 0x10]
	0x03745254 ADD X31, X31, 0x30
	0x03745258 RET
	0x0374525C BL 0x1C16F20
	0x03745260 LDRB W8, [X0]
	0x03745264 CBZ W8, 0x3745270
	0x03745268 LDR X0, [X0 + 0x10]
	0x0374526C RET
	0x03745270 MOV X0, X31
	0x03745274 RET
	0x03745278 LDR X0, [X0 + 0x8]
	0x0374527C RET
	0x03745280 LDR X0, [X0 + 0x10]
	0x03745284 RET
	0x03745288 STRB W31, [X0]
	0x0374528C STP X1, X31, [X0 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC9C000
	007 Move W8, [X21+3421]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xA01000
	015 Move X0, [X0+1856]
	016 Call 0x1C17CF4
	017 Move X0, 0xA01000
	018 Move X0, [X0+1824]
	019 Call 0x1C17CF4
	020 Move X0, 0xA01000
	021 Move X0, [X0+1864]
	022 Call 0x1C17CF4
	023 Move X0, 0xA01000
	024 Move X0, [X0+1656]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3421], W8
	028 Compare X20, 0
	029 JumpIfEqual {60}
	030 Move X8, 0xA01000
	031 Move X8, [X8+1824]
	032 Add X21, X19, 248
	033 Move X0, X21
	034 Move X1, X20
	035 Move X2, [X8]
	036 Call 0x2DFC45C, X0, X1
	037 Add W31, W0, 1
	038 Move X8, 0xA01000
	039 Move X8, [X8+1864]
	040 Move W9, [X19+248]
	041 Move X22, 0xA01000
	042 Move W20, W0
	043 Move X2, [X8]
	044 Move X22, [X22+1856]
	045 Move X0, X21
	046 Move W1, W20
	047 Move [X31+12], W9
	048 Call 0x2DFC31C, X0, X1
	049 Move X0, [X19+208]
	050 Move X3, [X22]
	051 Add X1, X31, 12
	052 Move W2, W20
	053 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return 
	060 Move X0, 0x9B4000
	061 Move X0, [X0+1320]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0x9D7000
	066 Move X0, [X0+3424]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Move X2, X31
	071 Call ArgumentNullException..ctor, X0, X1
	072 Move X0, 0xA01000
	073 Move X0, [X0+1872]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Call 0x1C17DEC

Method: System.Void Dispose()

Disassembly:
	0x03745290 RET
	0x03745294 MOVZ W8, 0x1
	0x03745298 STRB W8, [X0]
	0x0374529C STP X31, X1, [X0 + 0x8]
	0x037452A0 RET
	0x037452A4 STR X30, [X31 - 0x30]!
	0x037452A8 STP X22, X21, [X31 + 0x10]
	0x037452AC STP X20, X19, [X31 + 0x20]
	0x037452B0 ADRP X22, 0xC9B000
	0x037452B4 ADRP X21, 0x9AE000
	0x037452B8 LDRB W8, [X22 + 0xD6E]
	0x037452BC LDR X21, [X21 + 0x598]
	0x037452C0 MOV X19, X1
	0x037452C4 MOV X20, X0
	0x037452C8 TBNZ X8, 0x0, 0x37452E0
	0x037452CC ADRP X0, 0x9AE000
	0x037452D0 LDR X0, [X0 + 0x598]
	0x037452D4 BL 0x1C16CF4
	0x037452D8 MOVZ W8, 0x1
	0x037452DC STRB W8, [X22 + 0xD6E]
	0x037452E0 LDR X0, [X21]
	0x037452E4 LDR X21, [X20 + 0x10]
	0x037452E8 LDR X22, [X19 + 0x10]
	0x037452EC LDR W8, [X0 + 0xE0]
	0x037452F0 CBNZ W8, 0x37452F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC9C000
	006 Move X20, 0x9D7000
	007 Move W8, [X21+3422]
	008 Move X20, [X20+3672]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9D7000
	015 Move X0, [X0+3672]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3422], W8
	019 Move X0, X19
	020 Call RebindingOperation.UnhookOnEvent, X0
	021 Move X0, X19
	022 Call RebindingOperation.UnhookOnAfterUpdate, X0
	023 Move X1, [X20]
	024 Add X0, X19, 248
	025 Call 0x2DFC98C, X0
	026 Add X0, X19, 344
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Cache.Clear, X0
	033 Return 

Method: System.Void Finalize()

Disassembly:
	0x037453F0 LDR X0, [X0 + 0x798]
	0x037453F4 BL 0x1C16CF4
	0x037453F8 ADRP X0, 0x9B2000
	0x037453FC LDR X0, [X0 + 0x3E0]
	0x03745400 BL 0x1C16CF4
	0x03745404 MOVZ W8, 0x1
	0x03745408 STRB W8, [X21 + 0xD70]
	0x0374540C LDRB W8, [X19]
	0x03745410 CBZ W8, 0x3745440
	0x03745414 CBZ X20, 0x3745438
	0x03745418 ADRP X8, 0xA00000
	0x0374541C LDR X8, [X8 + 0x798]
	0x03745420 LDR X9, [X20]
	0x03745424 LDR X8, [X8]
	0x03745428 LDRB W11, [X9 + 0x130]
	0x0374542C LDRB W10, [X8 + 0x130]
	0x03745430 CMP W11, W10
	0x03745434 B.CS 0x3745478
	0x03745438 MOV X1, X31
	0x0374543C B 0x374548C
	0x03745440 CBZ X20, 0x374545C
	0x03745444 ADRP X8, 0x9B2000
	0x03745448 LDR X8, [X8 + 0x3E0]
	0x0374544C LDR X9, [X20]
	0x03745450 LDR X8, [X8]
	0x03745454 CMP X9, X8
	0x03745458 CSEL X20, X20, X31, EQ
	0x0374545C MOV X0, X19
	0x03745460 BL 0x3745120
	0x03745464 CMP X0, X20
	0x03745468 LDP X20, X19, [X31 + 0x10]
	0x0374546C CSET W0, EQ
	0x03745470 LDP X30, X21, [X31], #0x20
	0x03745474 RET
	0x03745478 LDR X9, [X9 + 0xC8]
	0x0374547C ADD X9, X9, X10, 0x3, LSL
	0x03745480 LDUR X9, [X9 - 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call RebindingOperation.Dispose, X0
	007 Move X0, X19
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X1, X31
	011 Move X30, [X31+32]
	012 Move X21, [X31+40]
	013 Call Object.Finalize, X0
	014 Return 
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X21, X0
	017 Move X0, X21
	018 Call 0x3EB2AD0
	019 Move X20, [X0]
	020 Call 0x3EB2AE0
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object.Finalize, X0
	024 Compare X20, 0
	025 JumpIfNotEqual {32}
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Move X20, X31
	032 Move X0, X20
	033 Call 0x1C17F18
	034 Move X21, X0
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object.Finalize, X0
	038 Compare X20, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X21
	041 Call 0x1D2D690
	042 Move X0, X20
	043 Call 0x1C17F18
	044 Call 0x1991590

Method: UnityEngine.InputSystem.InputActionRebindingExtensions/RebindingOperation Reset()

Disassembly:
	0x03745484 CMP X9, X8
	0x03745488 CSEL X1, X20, X31, EQ
	0x0374548C MOV X0, X19
	0x03745490 LDP X20, X19, [X31 + 0x10]
	0x03745494 LDP X30, X21, [X31], #0x20
	0x03745498 B 0x3745364
	0x0374549C STR X30, [X31 - 0x20]!
	0x037454A0 STP X20, X19, [X31 + 0x10]
	0x037454A4 ADRP X20, 0xC9B000
	0x037454A8 LDRB W8, [X20 + 0xD71]
	0x037454AC MOV X19, X0
	0x037454B0 TBNZ X8, 0x0, 0x37454C8
	0x037454B4 ADRP X0, 0x9AE000
	0x037454B8 LDR X0, [X0 + 0x598]
	0x037454BC BL 0x1C16CF4
	0x037454C0 MOVZ W8, 0x1
	0x037454C4 STRB W8, [X20 + 0xD71]
	0x037454C8 LDRB W8, [X19]
	0x037454CC CBZ W8, 0x374550C
	0x037454D0 ADRP X8, 0x9AE000
	0x037454D4 LDR X8, [X8 + 0x598]
	0x037454D8 LDR X20, [X19 + 0x10]
	0x037454DC LDR X0, [X8]
	0x037454E0 LDR W8, [X0 + 0xE0]
	0x037454E4 CBNZ W8, 0x37454EC
	0x037454E8 BL 0x1C16DFC
	0x037454EC MOV X0, X20
	0x037454F0 MOV X1, X31
	0x037454F4 MOV X2, X31
	0x037454F8 BL 0x3C354F8
	0x037454FC TBZ X0, 0x0, 0x3745528
	0x03745500 LDR X0, [X19 + 0x10]
	0x03745504 CBNZ X0, 0x3745514
	0x03745508 BL 0x1C16F20
	0x0374550C LDR X0, [X19 + 0x8]
	0x03745510 CBZ X0, 0x3745528
	0x03745514 LDR X8, [X0]
	0x03745518 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC9C000
	005 Move W8, [X20+3423]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA01000
	012 Move X0, [X0+1880]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3423], W8
	016 Move W8, [X19+360]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {23}
	021 Move X0, X19
	022 Call RebindingOperation.OnCancel, X0
	023 Add X0, X19, 16
	024 Move W2, 132
	025 Move W1, W31
	026 Move [X19+160], W31
	027 Call 0x3EB2B10
	028 Move X0, [X19+368]
	029 Move W9, 0xCCCD
	030 Move TEMP, 0
	031 Not TEMP
	032 Move W8, TEMP
	033 NotImplemented "Instruction MOVK not yet implemented."
	034 Move [X19+184], X31
	035 Move [X19+192], X31
	036 Move [X19+176], W8
	037 Move [X19+200], W9
	038 Move [X19+240], X31
	039 Move [X19+360], W31
	040 Compare X0, 0
	041 JumpIfEqual {46}
	042 Move X8, 0xA01000
	043 Move X8, [X8+1880]
	044 Move X1, [X8]
	045 Call Dictionary`2<Object, Single>.Clear, X0
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return X0

Method: System.Void HookOnEvent()

Disassembly:
	0x03744AAC LDR V0, [X19 + 0xF4]
	0x03744AB0 MOV X0, X19
	0x03744AB4 FCMP S0, 0x0
	0x03744AB8 B.LS 0x3744AC4
	0x03744ABC BL 0x3744048
	0x03744AC0 B 0x3744AC8
	0x03744AC4 BL 0x3743BE0
	0x03744AC8 LDP X20, X19, [X31 + 0x190]
	0x03744ACC LDP X22, X21, [X31 + 0x180]
	0x03744AD0 LDP X24, X23, [X31 + 0x170]
	0x03744AD4 LDP X26, X25, [X31 + 0x160]
	0x03744AD8 LDP X28, X27, [X31 + 0x150]
	0x03744ADC LDP X29, X30, [X31 + 0x140]
	0x03744AE0 LDP D9, D8, [X31 + 0x130]
	0x03744AE4 LDR V10, [X31 + 0x120]
	0x03744AE8 ADD X31, X31, 0x1A0
	0x03744AEC RET
	0x03744AF0 BL 0x1C16F20
	0x03744AF4 BL 0x1C16F20
	0x03744AF8 BL 0x1C16F20
	0x03744AFC BL 0x1C16F20
	0x03744B00 BL 0x1C16F20
	0x03744B04 BL 0x1C16F20
	0x03744B08 BL 0x1C16F20
	0x03744B0C BL 0x1C16F20
	0x03744B10 BL 0x1C16F28
	0x03744B14 BL 0x1C16F20
	0x03744B18 BL 0x1C16F20
	0x03744B1C B 0x3744BD0
	0x03744B20 B 0x3744B24
	0x03744B24 MOV X20, X0
	0x03744B28 MOVZ W29, 0x1
	0x03744B2C MOVZ W28, 0x1
	0x03744B30 B 0x3744BD4
	0x03744B34 B 0x3744BD0
	0x03744B38 B 0x3744B8C
	0x03744B3C B 0x3744B8C
	0x03744B40 B 0x3744B8C
	0x03744B44 B 0x3744B8C
	0x03744B48 B 0x3744B8C
	0x03744B4C B 0x3744B8C
	0x03744B50 B 0x3744B8C
	0x03744B54 B 0x3744B8C
	0x03744B58 B 0x3744B8C
	0x03744B5C B 0x3744B8C
	0x03744B60 B 0x3744B8C
	0x03744B64 B 0x3744BD0
	0x03744B68 B 0x3744BD0
	0x03744B6C B 0x3744B8C
	0x03744B70 B 0x3744BD0
	0x03744B74 B 0x3744B8C
	0x03744B78 B 0x3744BD0
	0x03744B7C B 0x3744BD0
	0x03744B80 B 0x3744BD0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC9D000
	006 Move W8, [X20+3424]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xA02000
	013 Move X0, [X0+1784]
	014 Call 0x1C17CF4
	015 Move X0, 0x9D8000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move X0, 0xA02000
	019 Move X0, [X0+1792]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3424], W8
	023 Move W8, [X19+360]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 8
	026 Compare TEMP, 8
	027 JumpIfEqual {62}
	028 Move X21, 0x9D8000
	029 Move X8, [X19+328]
	030 Move X21, [X21+624]
	031 Compare X8, 0
	032 JumpIfNotEqual {45}
	033 Move X8, 0xA02000
	034 Move X8, [X8+1784]
	035 Move X0, [X8]
	036 Call 0x1C17F10
	037 Move X8, 0xA02000
	038 Move X8, [X8+1792]
	039 Move X1, X19
	040 Move X3, X31
	041 Move X20, X0
	042 Move X2, [X8]
	043 Call Action`2<InputEventPtr, Object>..ctor, X0, X1, X2
	044 Move [X19+328], X20
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X31
	051 Call InputSystem.get_onEvent
	052 Move X1, [X19+328]
	053 And X0, X0, 255
	054 Move X2, X31
	055 Call InputEventListener.op_Addition, X0, X1
	056 And X0, X0, 255
	057 Move X1, X31
	058 Call InputSystem.set_onEvent, X0
	059 Move W8, [X19+360]
	060 Or W8, W8, 8
	061 Move [X19+360], W8
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return 

Method: System.Void UnhookOnEvent()

Disassembly:
	0x037452F4 BL 0x1C16DFC
	0x037452F8 MOV X0, X21
	0x037452FC MOV X1, X22
	0x03745300 MOV X2, X31
	0x03745304 BL 0x3C3883C
	0x03745308 TBZ X0, 0x0, 0x3745334
	0x0374530C LDRB W8, [X19]
	0x03745310 LDRB W9, [X20]
	0x03745314 AND W8, W8, 0x1
	0x03745318 CMP W9, W8
	0x0374531C B.NE 0x3745334
	0x03745320 LDR X8, [X20 + 0x8]
	0x03745324 LDR X9, [X19 + 0x8]
	0x03745328 CMP X8, X9
	0x0374532C CSET W0, EQ
	0x03745330 B 0x3745338
	0x03745334 MOV W0, W31
	0x03745338 LDP X20, X19, [X31 + 0x20]
	0x0374533C LDP X22, X21, [X31 + 0x10]
	0x03745340 LDR X30, [X31], #0x30
	0x03745344 RET
	0x03745348 STP X30, X19, [X31 - 0x10]!
	0x0374534C MOV X19, X1
	0x03745350 BL 0x3745120
	0x03745354 CMP X0, X19
	0x03745358 CSET W0, EQ
	0x0374535C LDP X30, X19, [X31], #0x10
	0x03745360 RET
	0x03745364 STR X30, [X31 - 0x30]!
	0x03745368 STP X22, X21, [X31 + 0x10]
	0x0374536C STP X20, X19, [X31 + 0x20]
	0x03745370 ADRP X22, 0xC9B000
	0x03745374 ADRP X21, 0x9AE000
	0x03745378 LDRB W8, [X22 + 0xD6F]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC9C000
	005 Move W8, [X20+3425]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9D7000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3425], W8
	016 Move W8, [X19+360]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 8
	019 Compare TEMP, 8
	020 JumpIfNotEqual {40}
	021 Move X8, 0x9D7000
	022 Move X8, [X8+624]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Call InputSystem.get_onEvent
	030 Move X1, [X19+328]
	031 And X0, X0, 255
	032 Move X2, X31
	033 Call InputEventListener.op_Subtraction, X0, X1
	034 And X0, X0, 255
	035 Move X1, X31
	036 Call InputSystem.set_onEvent, X0
	037 Move W8, [X19+360]
	038 And W8, W8, 0xFFFFFFF7
	039 Move [X19+360], W8
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return 

Method: System.Void OnEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x0374551C LDP X2, X1, [X8 + 0x158]
	0x03745520 LDR X30, [X31], #0x20
	0x03745524 BR X2
	0x03745528 LDP X20, X19, [X31 + 0x10]
	0x0374552C MOV W0, W31
	0x03745530 LDR X30, [X31], #0x20
	0x03745534 RET
	0x03745538 SUB X31, X31, 0x30
	0x0374553C STR X30, [X31 + 0x20]
	0x03745540 LDR X8, [X1 + 0x10]
	0x03745544 LDR V0, [X1]
	0x03745548 ADD X1, X31, 0x0
	0x0374554C STR X8, [X31 + 0x10]
	0x03745550 STR V0, [X31]
	0x03745554 BL 0x37452A4
	0x03745558 LDR X30, [X31 + 0x20]
	0x0374555C AND W0, W0, 0x1
	0x03745560 ADD X31, X31, 0x30
	0x03745564 RET
	0x03745568 SUB X31, X31, 0x30
	0x0374556C STR X30, [X31 + 0x20]
	0x03745570 LDR X8, [X1 + 0x10]
	0x03745574 LDR V0, [X1]
	0x03745578 ADD X1, X31, 0x0
	0x0374557C STR X8, [X31 + 0x10]
	0x03745580 STR V0, [X31]
	0x03745584 BL 0x37452A4
	0x03745588 LDR X30, [X31 + 0x20]
	0x0374558C ORN W8, W31, W0, 0x0
	0x03745590 AND W0, W8, 0x1
	0x03745594 ADD X31, X31, 0x30
	0x03745598 RET
	0x0374559C LDR X0, [X0 + 0x18]
	0x037455A0 RET
	0x037455A4 STR X30, [X31 - 0x30]!
	0x037455A8 STP X22, X21, [X31 + 0x10]
	0x037455AC STP X20, X19, [X31 + 0x20]
	0x037455B0 ADRP X21, 0xC9B000
	0x037455B4 LDRB W8, [X21 + 0xD73]
	0x037455B8 MOV X19, X1
	0x037455BC MOV X20, X0
	0x037455C0 TBNZ X8, 0x0, 0x37455D8
	0x037455C4 ADRP X0, 0x9AE000
	0x037455C8 LDR X0, [X0 + 0x598]
	0x037455CC BL 0x1C16CF4
	0x037455D0 MOVZ W8, 0x1
	0x037455D4 STRB W8, [X21 + 0xD73]
	0x037455D8 CBZ X19, 0x374563C
	0x037455DC LDR X22, [X19 + 0xC8]
	0x037455E0 CBZ X22, 0x3745650
	0x037455E4 LDR X8, [X22 + 0x50]
	0x037455E8 CMP X8, X19
	0x037455EC B.EQ 0x3745650
	0x037455F0 ADRP X8, 0x9AE000
	0x037455F4 LDR X8, [X8 + 0x598]
	0x037455F8 LDR X21, [X22 + 0x20]
	0x037455FC LDR X0, [X8]
	0x03745600 LDR W8, [X0 + 0xE0]
	0x03745604 CBNZ W8, 0x374560C
	0x03745608 BL 0x1C16DFC
	0x0374560C MOV X0, X21
	0x03745610 MOV X1, X31
	0x03745614 MOV X2, X31
	0x03745618 BL 0x3C3883C
	0x0374561C TBNZ X0, 0x0, 0x3745650
	0x03745620 LDR X1, [X22 + 0x20]
	0x03745624 MOV X0, X20
	0x03745628 MOV X2, X19
	0x0374562C LDP X20, X19, [X31 + 0x20]
	0x03745630 LDP X22, X21, [X31 + 0x10]
	0x03745634 LDR X30, [X31], #0x30
	0x03745638 B 0x37456A4
	0x0374563C STP X31, X31, [X20 + 0x18]
	0x03745640 LDP X20, X19, [X31 + 0x20]
	0x03745644 LDP X22, X21, [X31 + 0x10]
	0x03745648 LDR X30, [X31], #0x30
	0x0374564C RET
	0x03745650 ADRP X0, 0xA00000
	0x03745654 LDR X0, [X0 + 0x7A0]
	0x03745658 BL 0x1C16D08
	0x0374565C MOV X1, X19
	0x03745660 MOV X2, X31
	0x03745664 BL 0x321EFD0
	0x03745668 MOV X19, X0
	0x0374566C ADRP X0, 0x9AE000
	0x03745670 LDR X0, [X0 + 0x5B0]
	0x03745674 BL 0x1C16D08
	0x03745678 BL 0x1C16F10
	0x0374567C MOV X1, X19
	0x03745680 MOV X2, X31
	0x03745684 MOV X20, X0
	0x03745688 BL 0x337DF1C
	0x0374568C ADRP X0, 0xA00000
	0x03745690 LDR X0, [X0 + 0x7A8]
	0x03745694 BL 0x1C16D08
	0x03745698 MOV X1, X0
	0x0374569C MOV X0, X20
	0x037456A0 BL 0x1C16DEC
	0x037456A4 SUB X31, X31, 0x60
	0x037456A8 STR X30, [X31 + 0x20]
	0x037456AC STP X24, X23, [X31 + 0x30]
	0x037456B0 STP X22, X21, [X31 + 0x40]
	0x037456B4 STP X20, X19, [X31 + 0x50]
	0x037456B8 ADRP X22, 0xC9B000
	0x037456BC LDRB W8, [X22 + 0xD75]
	0x037456C0 MOV X19, X2
	0x037456C4 MOV X21, X1
	0x037456C8 MOV X20, X0
	0x037456CC TBNZ X8, 0x0, 0x37456F0
	0x037456D0 ADRP X0, 0xA00000
	0x037456D4 LDR X0, [X0 + 0x7B0]
	0x037456D8 BL 0x1C16CF4
	0x037456DC ADRP X0, 0xA00000
	0x037456E0 LDR X0, [X0 + 0x7B8]
	0x037456E4 BL 0x1C16CF4
	0x037456E8 MOVZ W8, 0x1
	0x037456EC STRB W8, [X22 + 0xD75]
	0x037456F0 STP X31, X31, [X31 + 0x10]
	0x037456F4 CBZ X19, 0x37457A4
	0x037456F8 LDR X8, [X19 + 0xC8]
	0x037456FC CBZ X8, 0x374579C
	0x03745700 LDR X9, [X8 + 0x50]
	0x03745704 CMP X9, X19
	0x03745708 CSEL X22, X31, X8, EQ
	0x0374570C CBZ X21, 0x37457A4
	0x03745710 ADRP X23, 0xA00000
	0x03745714 ADRP X24, 0xA00000
	0x03745718 LDR X23, [X23 + 0x7B8]
	0x0374571C LDR X24, [X24 + 0x7B0]
	0x03745720 MOV X0, X21
	0x03745724 BL 0x3736750
	0x03745728 LDR X8, [X23]
	0x0374572C STP X0, X1, [X31]
	0x03745730 ADD X1, X31, 0x0
	0x03745734 MOV X0, X8
	0x03745738 BL 0x1C16E04
	0x0374573C LDR X2, [X24]
	0x03745740 MOV X1, X22
	0x03745744 BL 0x21BA5B0
	0x03745748 TBZ X0, 0x0, 0x37457A8
	0x0374574C MOV X0, X19
	0x03745750 STR X21, [X20 + 0x18]
	0x03745754 BL 0x37341F0
	0x03745758 STP X0, X1, [X31 + 0x10]
	0x0374575C ADD X0, X31, 0x10
	0x03745760 MOV X1, X31
	0x03745764 BL 0x337866C
	0x03745768 STR X0, [X20 + 0x20]
	0x0374576C MOV X0, X19
	0x03745770 BL 0x3745A24
	0x03745774 MOV X1, X0
	0x03745778 MOV X0, X20
	0x0374577C MOV X2, X31
	0x03745780 BL 0x3C38A84
	0x03745784 LDP X20, X19, [X31 + 0x50]
	0x03745788 LDP X22, X21, [X31 + 0x40]
	0x0374578C LDP X24, X23, [X31 + 0x30]
	0x03745790 LDR X30, [X31 + 0x20]
	0x03745794 ADD X31, X31, 0x60
	0x03745798 RET
	0x0374579C MOV X22, X31
	0x037457A0 CBNZ X21, 0x3745710
	0x037457A4 BL 0x1C16F20
	0x037457A8 ADRP X0, 0xA00000
	0x037457AC LDR X0, [X0 + 0x7C0]
	0x037457B0 BL 0x1C16D08
	0x037457B4 MOV X1, X19
	0x037457B8 MOV X2, X21
	0x037457BC MOV X3, X31
	0x037457C0 BL 0x3227BD4
	0x037457C4 MOV X19, X0
	0x037457C8 ADRP X0, 0x9B6000
	0x037457CC LDR X0, [X0 + 0x578]
	0x037457D0 BL 0x1C16D08
	0x037457D4 BL 0x1C16F10
	0x037457D8 MOV X20, X0
	0x037457DC ADRP X0, 0x9D6000
	0x037457E0 LDR X0, [X0 + 0xBF8]
	0x037457E4 BL 0x1C16D08
	0x037457E8 MOV X2, X0
	0x037457EC MOV X0, X20
	0x037457F0 MOV X1, X19
	0x037457F4 MOV X3, X31
	0x037457F8 BL 0x330E16C
	0x037457FC ADRP X0, 0xA00000
	0x03745800 LDR X0, [X0 + 0x7C8]
	0x03745804 BL 0x1C16D08
	0x03745808 MOV X1, X0
	0x0374580C MOV X0, X20
	0x03745810 BL 0x1C16DEC
	0x03745814 STR X30, [X31 - 0x40]!
	0x03745818 STP X24, X23, [X31 + 0x10]
	0x0374581C STP X22, X21, [X31 + 0x20]
	0x03745820 STP X20, X19, [X31 + 0x30]
	0x03745824 ADRP X23, 0xC9B000
	0x03745828 ADRP X24, 0x9AE000
	0x0374582C LDRB W8, [X23 + 0xD74]
	0x03745830 LDR X24, [X24 + 0x598]
	0x03745834 MOV X21, X3
	0x03745838 MOV X20, X2
	0x0374583C MOV X19, X1
	0x03745840 MOV X22, X0
	0x03745844 TBNZ X8, 0x0, 0x374585C
	0x03745848 ADRP X0, 0x9AE000
	0x0374584C LDR X0, [X0 + 0x598]
	0x03745850 BL 0x1C16CF4
	0x03745854 MOVZ W8, 0x1
	0x03745858 STRB W8, [X23 + 0xD74]
	0x0374585C LDR X0, [X24]
	0x03745860 LDR W8, [X0 + 0xE0]
	0x03745864 CBNZ W8, 0x374586C
	0x03745868 BL 0x1C16DFC
	0x0374586C MOV X0, X19
	0x03745870 MOV X1, X31
	0x03745874 MOV X2, X31
	0x03745878 BL 0x3C3883C
	0x0374587C TBNZ X0, 0x0, 0x37458E8
	0x03745880 MOV X0, X20
	0x03745884 MOV X1, X31
	0x03745888 BL 0x32277A8
	0x0374588C TBNZ X0, 0x0, 0x3745908
	0x03745890 MOV X0, X21
	0x03745894 MOV X1, X31
	0x03745898 BL 0x32277A8
	0x0374589C TBNZ X0, 0x0, 0x3745928
	0x037458A0 CBZ X19, 0x3745970
	0x037458A4 MOV X0, X19
	0x037458A8 MOV X1, X20
	0x037458AC MOV W2, W31
	0x037458B0 BL 0x373798C
	0x037458B4 CBZ X0, 0x3745974
	0x037458B8 MOV X1, X21
	0x037458BC MOV W2, W31
	0x037458C0 BL 0x37376AC
	0x037458C4 CBZ X0, 0x37459B4
	0x037458C8 MOV X2, X0
	0x037458CC MOV X0, X22
	0x037458D0 MOV X1, X19
	0x037458D4 LDP X20, X19, [X31 + 0x30]
	0x037458D8 LDP X22, X21, [X31 + 0x20]
	0x037458DC LDP X24, X23, [X31 + 0x10]
	0x037458E0 LDR X30, [X31], #0x40
	0x037458E4 B 0x37456A4
	0x037458E8 ADRP X0, 0x9B3000
	0x037458EC LDR X0, [X0 + 0x528]
	0x037458F0 BL 0x1C16D08
	0x037458F4 BL 0x1C16F10
	0x037458F8 MOV X19, X0
	0x037458FC ADRP X0, 0x9D6000
	0x03745900 LDR X0, [X0 + 0xC08]
	0x03745904 B 0x3745944
	0x03745908 ADRP X0, 0x9B3000
	0x0374590C LDR X0, [X0 + 0x528]
	0x03745910 BL 0x1C16D08
	0x03745914 BL 0x1C16F10
	0x03745918 MOV X19, X0
	0x0374591C ADRP X0, 0xA00000
	0x03745920 LDR X0, [X0 + 0x7D0]
	0x03745924 B 0x3745944
	0x03745928 ADRP X0, 0x9B3000
	0x0374592C LDR X0, [X0 + 0x528]
	0x03745930 BL 0x1C16D08
	0x03745934 BL 0x1C16F10
	0x03745938 MOV X19, X0
	0x0374593C ADRP X0, 0xA00000
	0x03745940 LDR X0, [X0 + 0x7D8]
	0x03745944 BL 0x1C16D08
	0x03745948 MOV X1, X0
	0x0374594C MOV X0, X19
	0x03745950 MOV X2, X31
	0x03745954 BL 0x330E100
	0x03745958 ADRP X0, 0xA00000
	0x0374595C LDR X0, [X0 + 0x7E0]
	0x03745960 BL 0x1C16D08
	0x03745964 MOV X1, X0
	0x03745968 MOV X0, X19
	0x0374596C BL 0x1C16DEC
	0x03745970 BL 0x1C16F20
	0x03745974 ADRP X0, 0xA00000
	0x03745978 LDR X0, [X0 + 0x7E8]
	0x0374597C BL 0x1C16D08
	0x03745980 MOV X1, X20
	0x03745984 MOV X2, X19
	0x03745988 MOV X3, X31
	0x0374598C BL 0x3227BD4
	0x03745990 MOV X19, X0
	0x03745994 ADRP X0, 0x9B6000
	0x03745998 LDR X0, [X0 + 0x578]
	0x0374599C BL 0x1C16D08
	0x037459A0 BL 0x1C16F10
	0x037459A4 MOV X20, X0
	0x037459A8 ADRP X0, 0xA00000
	0x037459AC LDR X0, [X0 + 0x7D0]
	0x037459B0 B 0x37459F4
	0x037459B4 ADRP X0, 0xA00000
	0x037459B8 LDR X0, [X0 + 0x7F0]
	0x037459BC BL 0x1C16D08
	0x037459C0 MOV X1, X21
	0x037459C4 MOV X2, X20
	0x037459C8 MOV X3, X19
	0x037459CC MOV X4, X31
	0x037459D0 BL 0x3227C18
	0x037459D4 MOV X19, X0
	0x037459D8 ADRP X0, 0x9B6000
	0x037459DC LDR X0, [X0 + 0x578]
	0x037459E0 BL 0x1C16D08
	0x037459E4 BL 0x1C16F10
	0x037459E8 MOV X20, X0
	0x037459EC ADRP X0, 0xA00000
	0x037459F0 LDR X0, [X0 + 0x7D8]
	0x037459F4 BL 0x1C16D08
	0x037459F8 MOV X2, X0
	0x037459FC MOV X0, X20
	0x03745A00 MOV X1, X19
	0x03745A04 MOV X3, X31
	0x03745A08 BL 0x330E16C
	0x03745A0C ADRP X0, 0xA00000
	0x03745A10 LDR X0, [X0 + 0x7E0]
	0x03745A14 BL 0x1C16D08
	0x03745A18 MOV X1, X0
	0x03745A1C MOV X0, X20
	0x03745A20 BL 0x1C16DEC
	0x03745A24 STR X30, [X31 - 0x20]!
	0x03745A28 STP X20, X19, [X31 + 0x10]
	0x03745A2C ADRP X20, 0xC9B000
	0x03745A30 LDRB W8, [X20 + 0xD77]
	0x03745A34 MOV X19, X0
	0x03745A38 TBNZ X8, 0x0, 0x3745A50
	0x03745A3C ADRP X0, 0x9AF000
	0x03745A40 LDR X0, [X0 + 0xEC8]
	0x03745A44 BL 0x1C16CF4
	0x03745A48 MOVZ W8, 0x1
	0x03745A4C STRB W8, [X20 + 0xD77]
	0x03745A50 CBZ X19, 0x3745A8C
	0x03745A54 LDR X8, [X19 + 0xC8]
	0x03745A58 CBZ X8, 0x3745A70
	0x03745A5C LDR X9, [X8 + 0x50]
	0x03745A60 CMP X9, X19
	0x03745A64 B.EQ 0x3745A70
	0x03745A68 LDR X0, [X8 + 0x10]
	0x03745A6C B 0x3745A74
	0x03745A70 MOV X0, X31
	0x03745A74 MOV X1, X31
	0x03745A78 BL 0x32277A8
	0x03745A7C TBZ X0, 0x0, 0x3745AA8
	0x03745A80 CBZ X19, 0x3745AEC
	0x03745A84 LDR X0, [X19 + 0x10]
	0x03745A88 B 0x3745AF0
	0x03745A8C MOV X0, X31
	0x03745A90 MOV X1, X31
	0x03745A94 BL 0x32277A8
	0x03745A98 MOV W8, W0
	0x03745A9C MOV X0, X31
	0x03745AA0 TBNZ X8, 0x0, 0x3745AF0
	0x03745AA4 B 0x3745AFC
	0x03745AA8 CBZ X19, 0x3745AFC
	0x03745AAC LDR X8, [X19 + 0xC8]
	0x03745AB0 CBZ X8, 0x3745AC8
	0x03745AB4 LDR X9, [X8 + 0x50]
	0x03745AB8 CMP X9, X19
	0x03745ABC B.EQ 0x3745AC8
	0x03745AC0 LDR X0, [X8 + 0x10]
	0x03745AC4 B 0x3745ACC
	0x03745AC8 MOV X0, X31
	0x03745ACC ADRP X8, 0x9AF000
	0x03745AD0 LDR X2, [X19 + 0x10]
	0x03745AD4 LDR X8, [X8 + 0xEC8]
	0x03745AD8 LDP X20, X19, [X31 + 0x10]
	0x03745ADC MOV X3, X31
	0x03745AE0 LDR X1, [X8]
	0x03745AE4 LDR X30, [X31], #0x20
	0x03745AE8 B 0x32274B8
	0x03745AEC MOV X0, X31
	0x03745AF0 LDP X20, X19, [X31 + 0x10]
	0x03745AF4 LDR X30, [X31], #0x20
	0x03745AF8 RET
	0x03745AFC BL 0x1C16F20
	0x03745B00 STP X30, X21, [X31 - 0x20]!
	0x03745B04 STP X20, X19, [X31 + 0x10]
	0x03745B08 ADRP X20, 0xC9B000
	0x03745B0C LDRB W8, [X20 + 0xD76]
	0x03745B10 MOV X19, X0
	0x03745B14 TBNZ X8, 0x0, 0x3745B44
	0x03745B18 ADRP X0, 0x9AE000
	0x03745B1C LDR X0, [X0 + 0xAC8]
	0x03745B20 BL 0x1C16CF4
	0x03745B24 ADRP X0, 0x9AF000
	0x03745B28 LDR X0, [X0 + 0xEC8]
	0x03745B2C BL 0x1C16CF4
	0x03745B30 ADRP X0, 0x9B7000
	0x03745B34 LDR X0, [X0 + 0x988]
	0x03745B38 BL 0x1C16CF4
	0x03745B3C MOVZ W8, 0x1
	0x03745B40 STRB W8, [X20 + 0xD76]
	0x03745B44 MOV X0, X19
	0x03745B48 BL 0x37451B4
	0x03745B4C ADRP X8, 0x9AE000
	0x03745B50 LDR X8, [X8 + 0xAC8]
	0x03745B54 MOV X20, X0
	0x03745B58 LDR X0, [X8]
	0x03745B5C MOVZ W1, 0x5
	0x03745B60 BL 0x1C16D6C
	0x03745B64 MOV X21, X0
	0x03745B68 LDR X0, [X19 + 0x18]
	0x03745B6C CBZ X0, 0x3745C0C
	0x03745B70 MOV X1, X31
	0x03745B74 BL 0x3C389D4
	0x03745B78 CBZ X21, 0x3745C10
	0x03745B7C LDR W8, [X21 + 0x18]
	0x03745B80 CBZ W8, 0x3745C14
	0x03745B84 CMP W8, 0x1
	0x03745B88 STR X0, [X21 + 0x20]
	0x03745B8C B.EQ 0x3745C18
	0x03745B90 ADRP X9, 0x9B7000
	0x03745B94 LDR X9, [X9 + 0x988]
	0x03745B98 LDR X9, [X9]
	0x03745B9C STR X9, [X21 + 0x28]
	0x03745BA0 CBZ X20, 0x3745C1C
	0x03745BA4 LDR X9, [X20 + 0xC8]
	0x03745BA8 CBZ X9, 0x3745C08
	0x03745BAC LDR X10, [X9 + 0x50]
	0x03745BB0 CMP X10, X20
	0x03745BB4 B.EQ 0x3745C08
	0x03745BB8 CMP W8, 0x2
	0x03745BBC B.LS 0x3745C20
	0x03745BC0 LDR X9, [X9 + 0x10]
	0x03745BC4 CMP W8, 0x3
	0x03745BC8 STR X9, [X21 + 0x30]
	0x03745BCC B.EQ 0x3745C24
	0x03745BD0 ADRP X9, 0x9AF000
	0x03745BD4 LDR X9, [X9 + 0xEC8]
	0x03745BD8 CMP W8, 0x4
	0x03745BDC LDR X9, [X9]
	0x03745BE0 STR X9, [X21 + 0x38]
	0x03745BE4 B.LS 0x3745C28
	0x03745BE8 LDR X8, [X20 + 0x10]
	0x03745BEC STR X8, [X21 + 0x40]
	0x03745BF0 MOV X0, X21
	0x03745BF4 MOV X1, X31
	0x03745BF8 BL 0x32278CC
	0x03745BFC LDP X20, X19, [X31 + 0x10]
	0x03745C00 LDP X30, X21, [X31], #0x20
	0x03745C04 RET
	0x03745C08 BL 0x1C16F20
	0x03745C0C BL 0x1C16F20
	0x03745C10 BL 0x1C16F20
	0x03745C14 BL 0x1C16F28
	0x03745C18 BL 0x1C16F28
	0x03745C1C BL 0x1C16F20
	0x03745C20 BL 0x1C16F28
	0x03745C24 BL 0x1C16F28
	0x03745C28 BL 0x1C16F28
	0x03745C2C B 0x3745C54
	0x03745C30 B 0x3745C54

ISIL:
	001 Subtract X31, X31, 416
	002 Move [X31+288], D10
	003 Move [X31+304], D9
	004 Move [X31+312], D8
	005 Move [X31+320], X29
	006 Move [X31+328], X30
	007 Move [X31+336], X28
	008 Move [X31+344], X27
	009 Move [X31+352], X26
	010 Move [X31+360], X25
	011 Move [X31+368], X24
	012 Move [X31+376], X23
	013 Move [X31+384], X22
	014 Move [X31+392], X21
	015 Move [X31+400], X20
	016 Move [X31+408], X19
	017 Move X20, 0xC9C000
	018 Move W8, [X20+3426]
	019 Move X21, X2
	020 Move X19, X0
	021 Move [X31+296], X1
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {58}
	026 Move X0, 0xA01000
	027 Move X0, [X0+1816]
	028 Call 0x1C17CF4
	029 Move X0, 0xA01000
	030 Move X0, [X0+1888]
	031 Call 0x1C17CF4
	032 Move X0, 0xA01000
	033 Move X0, [X0+1896]
	034 Call 0x1C17CF4
	035 Move X0, 0xA01000
	036 Move X0, [X0+1904]
	037 Call 0x1C17CF4
	038 Move X0, 0xA01000
	039 Move X0, [X0+1912]
	040 Call 0x1C17CF4
	041 Move X0, 0x9D7000
	042 Move X0, [X0+3520]
	043 Call 0x1C17CF4
	044 Move X0, 0x9D7000
	045 Move X0, [X0+3648]
	046 Call 0x1C17CF4
	047 Move X0, 0xA01000
	048 Move X0, [X0+1824]
	049 Call 0x1C17CF4
	050 Move X0, 0xA01000
	051 Move X0, [X0+1656]
	052 Call 0x1C17CF4
	053 Move X0, 0x9AF000
	054 Move X0, [X0+1728]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+3426], W8
	058 NotImplemented "Instruction MOVI not yet implemented."
	059 Add X0, X31, 296
	060 Move X1, X31
	061 Move [X31+144], X31
	062 Move [X31+152], X31
	063 Move [X31+160], X31
	064 Move [X31+136], X31
	065 Move [X31+256], V0
	066 Move [X31+264], V0
	067 Move [X31+224], V0
	068 Move [X31+232], V0
	069 Move [X31+192], V0
	070 Move [X31+200], V0
	071 Move [X31+11], V0
	072 Move [X31+132], W31
	073 Call InputEventPtr.get_type, X0
	074 Move W8, 0x4154
	075 NotImplemented "Instruction MOVK not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W8, 0x5441
	078 NotImplemented "Instruction MOVK not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X24, 0x9AF000
	081 Move X24, [X24+1728]
	082 Move W8, [X19+360]
	083 Move X9, [X31+296]
	084 Move W10, 28
	085 Move W11, 20
	086 And W31, W8, 64
	087 NotImplemented "Instruction CSEL not yet implemented."
	088 And X20, X0, 0
	089 Add X8, X31, 16
	090 Move S0, W31
	091 Move X0, X9
	092 Move X2, X21
	093 Move X3, X31
	094 Call InputControlExtensions.EnumerateControls, X0, X1, X2, V0
	095 Move X8, [X31+32]
	096 Move V0, [X31+1]
	097 Add X0, X31, 144
	098 Move X1, X31
	099 Move [X31+160], X8
	100 Add X8, X31, 16
	101 Move [X31+9], V0
	102 Call InputEventControlCollection.GetEnumerator, X0
	103 Add X0, X31, 176
	104 Add X1, X31, 16
	105 Move W2, 112
	106 Call 0x3EB2AC0
	107 Move W29, W31
	108 Move W28, W31
	109 Add X21, X19, 128
	110 Add X22, X19, 248
	111 Add X23, X19, 208
	112 Add X8, X19, 216
	113 Move S10, 1
	114 Move [X31+8], X8
	115 Add X0, X31, 176
	116 Move X1, X31
	117 Call InputEventControlEnumerator.MoveNext, X0
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {392}
	122 Move X25, [X31+248]
	123 Move X1, [X31+296]
	124 Move X0, X25
	125 Move X2, X20
	126 Move X3, X31
	127 Call InputControlExtensions.GetStatePtrFromStateEventUnchecked, X0, X1, X2
	128 Move X26, X0
	129 Move X0, [X19+192]
	130 Move X1, X31
	131 Call String.IsNullOrEmpty, X0
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfEqual {152}
	136 Move X0, [X19+192]
	137 Move X1, X25
	138 Move X2, X31
	139 Call InputControlPath.Matches, X0, X1
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {152}
	144 Move X0, X25
	145 Move X1, X26
	146 Move X2, X31
	147 Call InputControlExtensions.HasValueChangeInState, X0, X1
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfEqual {390}
	152 Move W2, [X19+160]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X1, [X19+168]
	155 Move X0, X25
	156 Call RebindingOperation.HavePathMatch, X0, X1, X2
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfEqual {115}
	161 Move W2, [X19+144]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X1, [X19+152]
	164 Move X0, X25
	165 Call RebindingOperation.HavePathMatch, X0, X1, X2
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {115}
	170 Move X0, [X24]
	171 Move X27, [X19+120]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {176}
	175 Call 0x1C17DFC
	176 Move X0, X27
	177 Move X1, X31
	178 Move X2, X31
	179 Call Type.op_Inequality, X0, X1
	180 Move TEMP, X0
	181 And TEMP, TEMP, 1
	182 Compare TEMP, 1
	183 JumpIfNotEqual {196}
	184 Move X0, [X19+120]
	185 Compare X0, 0
	186 JumpIfEqual {452}
	187 Move X8, [X0]
	188 Move X9, [X8+2152]
	189 Move X2, [X8+2160]
	190 Move X1, X25
	191 NotImplemented "Instruction BLR not yet implemented."
	192 Move TEMP, X0
	193 And TEMP, TEMP, 1
	194 Compare TEMP, 1
	195 JumpIfNotEqual {115}
	196 Move X0, X21
	197 Move X1, X31
	198 Call InternedString.IsEmpty, X0
	199 Move TEMP, X0
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfEqual {237}
	203 Compare X25, 0
	204 JumpIfEqual {453}
	205 Move X0, [X19+128]
	206 Move X1, [X19+136]
	207 Move X2, [X25+88]
	208 Move X3, [X25+96]
	209 Move X4, X31
	210 Call InternedString.op_Inequality, X0, X1
	211 Move TEMP, X0
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfNotEqual {237}
	215 Move X8, 0x9D7000
	216 Move X8, [X8+3520]
	217 Move X0, [X8]
	218 Move W8, [X0+224]
	219 Compare W8, 0
	220 JumpIfNotEqual {225}
	221 Call 0x1C17DFC
	222 Move X8, 0x9D7000
	223 Move X8, [X8+3520]
	224 Move X0, [X8]
	225 Move X8, [X0+184]
	226 Move X1, [X19+128]
	227 Move X2, [X19+136]
	228 Move X3, [X25+88]
	229 Move X4, [X25+96]
	230 Add X0, X8, 16
	231 Move X5, X31
	232 Call Collection.IsBasedOn, X0, X1, X2
	233 Move TEMP, X0
	234 And TEMP, TEMP, 1
	235 Compare TEMP, 1
	236 JumpIfNotEqual {115}
	237 Move X0, X25
	238 Move X1, X26
	239 Move X2, X31
	240 Move X3, X31
	241 Call InputControlExtensions.CheckStateIsAtDefault, X0, X1, X2
	242 Move TEMP, X0
	243 And TEMP, TEMP, 1
	244 Compare TEMP, 1
	245 JumpIfNotEqual {276}
	246 Move X0, [X19+368]
	247 Compare X0, 0
	248 JumpIfEqual {456}
	249 Move X8, 0xA01000
	250 Move X8, [X8+1896]
	251 Move X2, [X8]
	252 Move X1, X25
	253 Call Dictionary`2<Object, Single>.ContainsKey, X0, X1
	254 Move TEMP, X0
	255 And TEMP, TEMP, 1
	256 Compare TEMP, 1
	257 JumpIfEqual {267}
	258 Move X0, [X19+368]
	259 Compare X0, 0
	260 JumpIfEqual {457}
	261 Move X8, 0xA01000
	262 Move X8, [X8+1888]
	263 Move X2, [X8]
	264 Move S0, W31
	265 Move X1, X25
	266 Call Dictionary`2<Object, Single>.Add, X0, X1, V0
	267 Move X0, [X19+368]
	268 Compare X0, 0
	269 JumpIfEqual {455}
	270 Move X8, 0xA01000
	271 Move X8, [X8+1912]
	272 Move X2, [X8]
	273 Move S0, W31
	274 Move X1, X25
	275 Call Dictionary`2<Object, Single>.set_Item, X0, X1, V0
	276 Compare X25, 0
	277 JumpIfEqual {454}
	278 Move X8, [X25]
	279 Move X9, [X8+408]
	280 Move X2, [X8+416]
	281 Move X0, X25
	282 Move X1, X26
	283 NotImplemented "Instruction BLR not yet implemented."
	284 Move V8, V0
	285 NotImplemented "Instruction FCMP not yet implemented."
	286 Move X0, [X19+368]
	287 Compare X0, 0
	288 JumpIfEqual {458}
	289 Move X8, 0xA01000
	290 Move X8, [X8+1904]
	291 Move X3, [X8]
	292 Add X2, X31, 140
	293 Move X1, X25
	294 Call Dictionary`2<Object, Single>.TryGetValue, X0, X1, X2
	295 Move TEMP, X0
	296 And TEMP, TEMP, 1
	297 Compare TEMP, 1
	298 JumpIfEqual {311}
	299 Move X0, X25
	300 Move X1, X31
	301 Call InputControl.get_magnitude, X0
	302 Move [X31+140], S0
	303 Move X0, [X19+368]
	304 Compare X0, 0
	305 JumpIfEqual {461}
	306 Move X8, 0xA01000
	307 Move X8, [X8+1888]
	308 Move X2, [X8]
	309 Move X1, X25
	310 Call Dictionary`2<Object, Single>.Add, X0, X1, V0
	311 Move V0, [X31+140]
	312 Move V1, [X19+200]
	313 Move W29, 1
	314 NotImplemented "Instruction FABD not yet implemented."
	315 NotImplemented "Instruction FCMP not yet implemented."
	316 Move X8, [X19+312]
	317 Compare X8, 0
	318 JumpIfEqual {328}
	319 Move X0, [X8+64]
	320 Move X2, [X31+296]
	321 Move X9, [X8+24]
	322 Move X3, [X8+40]
	323 Move X1, X25
	324 NotImplemented "Instruction BLR not yet implemented."
	325 Move X26, 0xA01000
	326 Move X26, [X26+1816]
	327 Move V9, V0
	328 Move X0, X25
	329 Move X1, X31
	330 Call InputControl.get_synthetic, X0
	331 Move X26, 0xA01000
	332 Move X26, [X26+1816]
	333 Add S0, S8, S10
	334 And W31, W0, 1
	335 NotImplemented "Instruction FCSEL not yet implemented."
	336 Move X8, 0xA01000
	337 Move X8, [X8+1824]
	338 Move X2, [X8]
	339 Move X0, X22
	340 Move X1, X25
	341 Call 0x2DFC45C, X0, X1
	342 Add W31, W0, 1
	343 Move X8, [X23]
	344 Compare X8, 0
	345 JumpIfEqual {459}
	346 Move W9, [X8+24]
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Add X8, X8, W0
	349 Add X8, X8, 32
	350 Move V0, [X8]
	351 Move W29, 1
	352 NotImplemented "Instruction FCMP not yet implemented."
	353 Move [X8], S9
	354 Move V0, [X19+244]
	355 Move W29, 1
	356 Move W28, 1
	357 NotImplemented "Instruction FCMP not yet implemented."
	358 Move X0, X31
	359 Call InputState.get_currentTime
	360 Move X9, 0x9D7000
	361 Move W8, [X22]
	362 Move X9, [X9+3648]
	363 Move [X31+132], W8
	364 Move [X31+136], W8
	365 Move X2, [X9]
	366 Move X0, X22
	367 Move X1, X25
	368 Call 0x2DFBCEC, X0, X1
	369 Move X3, [X26]
	370 Add X1, X31, 136
	371 Move W2, 10
	372 Move X0, X23
	373 Move V0, V9
	374 Call ArrayHelpers.AppendWithCapacity, X0, X1, V0, X2
	375 Move X3, [X26]
	376 Move X0, [X31+8]
	377 Add X1, X31, 132
	378 Move W2, 10
	379 Move V0, V8
	380 Call ArrayHelpers.AppendWithCapacity, X0, X1, V0, X2
	381 Move V0, [X19+244]
	382 Move W29, 1
	383 Move W28, 1
	384 NotImplemented "Instruction FCMP not yet implemented."
	385 Move X0, X31
	386 Call InputState.get_currentTime
	387 Move [X19+224], D0
	388 Move W29, 1
	389 Move W28, 1
	390 Move X0, X19
	391 Call RebindingOperation.OnCancel, X0
	392 Add X0, X31, 176
	393 Move X1, X31
	394 Call InputEventControlEnumerator.Dispose, X0
	395 Move TEMP, X29
	396 And TEMP, TEMP, 1
	397 Compare TEMP, 1
	398 JumpIfNotEqual {408}
	399 Move W8, [X19+361]
	400 Move TEMP, X8
	401 And TEMP, TEMP, 2
	402 Compare TEMP, 2
	403 JumpIfNotEqual {408}
	404 Add X0, X31, 296
	405 Move W1, 1
	406 Move X2, X31
	407 Call InputEventPtr.set_handled, X0, X1
	408 Move TEMP, X28
	409 And TEMP, TEMP, 1
	410 Compare TEMP, 1
	411 JumpIfNotEqual {435}
	412 Move W8, [X19+360]
	413 Move TEMP, X8
	414 And TEMP, TEMP, 4
	415 Compare TEMP, 4
	416 JumpIfEqual {435}
	417 Move X8, [X19+296]
	418 Compare X8, 0
	419 JumpIfEqual {430}
	420 Move X0, X19
	421 Call RebindingOperation.SortCandidatesByScore, X0
	422 Move X8, [X19+296]
	423 Compare X8, 0
	424 JumpIfEqual {462}
	425 Move X9, [X8+24]
	426 Move X0, [X8+64]
	427 Move X2, [X8+40]
	428 Move X1, X19
	429 NotImplemented "Instruction BLR not yet implemented."
	430 Move V0, [X19+244]
	431 Move X0, X19
	432 NotImplemented "Instruction FCMP not yet implemented."
	433 Call RebindingOperation.SortCandidatesByScore, X0
	434 Call RebindingOperation.OnComplete, X0
	435 Move X20, [X31+400]
	436 Move X19, [X31+408]
	437 Move X22, [X31+384]
	438 Move X21, [X31+392]
	439 Move X24, [X31+368]
	440 Move X23, [X31+376]
	441 Move X26, [X31+352]
	442 Move X25, [X31+360]
	443 Move X28, [X31+336]
	444 Move X27, [X31+344]
	445 Move X29, [X31+320]
	446 Move X30, [X31+328]
	447 Move D9, [X31+304]
	448 Move D8, [X31+312]
	449 Move V10, [X31+288]
	450 Add X31, X31, 416
	451 Return 
	452 Call 0x1C17F20
	453 Call 0x1C17F20
	454 Call 0x1C17F20
	455 Call 0x1C17F20
	456 Call 0x1C17F20
	457 Call 0x1C17F20
	458 Call 0x1C17F20
	459 Call 0x1C17F20
	460 Call 0x1C17F28
	461 Call 0x1C17F20
	462 Call 0x1C17F20
	463 Move X20, X0
	464 Move W29, 1
	465 Move W28, 1
	466 Move X20, X0
	467 Move W29, 1
	468 Move X20, X0
	469 NotImplemented "Instruction CMP not yet implemented."
	470 Move X0, X20
	471 Call 0x3EB2AD0
	472 Move X21, [X0]
	473 Call 0x3EB2AE0
	474 Add X0, X31, 176
	475 Move X1, X31
	476 Call InputEventControlEnumerator.Dispose, X0
	477 Compare X21, 0
	478 JumpIfEqual {395}
	479 Move X0, X21
	480 Call 0x1C17F18
	481 Move X21, X31
	482 Move X20, X0
	483 Add X0, X31, 176
	484 Move X1, X31
	485 Call InputEventControlEnumerator.Dispose, X0
	486 Compare X21, 0
	487 JumpIfNotEqual {490}
	488 Move X0, X20
	489 Call 0x1D2D690
	490 Move X0, X21
	491 Call 0x1C17F18
	492 Call 0x1991590

Method: System.Void SortCandidatesByScore()

Disassembly:
	0x03745048 LDR X24, [X24 + 0x108]
	0x0374504C LDR X25, [X25 + 0x790]
	0x03745050 MOV X23, X31
	0x03745054 ADD X22, X20, 0x10
	0x03745058 LDR W8, [X20 + 0x20]
	0x0374505C LDR X2, [X24]
	0x03745060 MOV X0, X22
	0x03745064 ADD W1, W23, W8
	0x03745068 ADD X8, X31, 0x8
	0x0374506C BL 0x24FC334
	0x03745070 LDR X0, [X31 + 0x8]
	0x03745074 MOVZ W2, 0x3
	0x03745078 MOV X1, X19
	0x0374507C MOV X3, X31
	0x03745080 BL 0x3226C60
	0x03745084 TBZ X0, 0x0, 0x37450D0
	0x03745088 MOV X0, X21
	0x0374508C MOV X1, X31
	0x03745090 BL 0x32277A8
	0x03745094 LDR X8, [X20 + 0x28]
	0x03745098 CBZ X8, 0x3745118
	0x0374509C LDR W9, [X8 + 0x18]
	0x037450A0 CMP X23, X9
	0x037450A4 B.CS 0x374511C
	0x037450A8 ADD X8, X8, X23, 0x3, LSL
	0x037450AC LDR X2, [X8 + 0x20]
	0x037450B0 TBZ X0, 0x0, 0x37450BC
	0x037450B4 MOV X21, X2
	0x037450B8 B 0x37450D0
	0x037450BC LDR X1, [X25]
	0x037450C0 MOV X0, X21
	0x037450C4 MOV X3, X31
	0x037450C8 BL 0x32274B8
	0x037450CC MOV X21, X0
	0x037450D0 LDRSW X8, [X20 + 0x30]
	0x037450D4 ADD X23, X23, 0x1
	0x037450D8 CMP X23, X8
	0x037450DC B.LT 0x3745058
	0x037450E0 ADRP X19, 0x9AE000
	0x037450E4 LDR X19, [X19 + 0xDD8]
	0x037450E8 MOV X0, X21
	0x037450EC MOV X1, X31
	0x037450F0 BL 0x32277A8
	0x037450F4 LDR X8, [X19]
	0x037450F8 ANDS W31, W0, 0x1
	0x037450FC LDP X20, X19, [X31 + 0x90]
	0x03745100 LDP X24, X23, [X31 + 0x70]
	0x03745104 CSEL X0, X8, X21, NE
	0x03745108 LDP X22, X21, [X31 + 0x80]
	0x0374510C LDP X30, X25, [X31 + 0x60]
	0x03745110 ADD X31, X31, 0xA0
	0x03745114 RET
	0x03745118 BL 0x1C16F20
	0x0374511C BL 0x1C16F28
	0x03745120 STR X30, [X31 - 0x20]!
	0x03745124 STP X20, X19, [X31 + 0x10]
	0x03745128 ADRP X20, 0xC9B000
	0x0374512C LDRB W8, [X20 + 0xD6D]
	0x03745130 MOV X19, X0
	0x03745134 TBNZ X8, 0x0, 0x374514C
	0x03745138 ADRP X0, 0x9AE000
	0x0374513C LDR X0, [X0 + 0x598]
	0x03745140 BL 0x1C16CF4
	0x03745144 MOVZ W8, 0x1
	0x03745148 STRB W8, [X20 + 0xD6D]
	0x0374514C LDRB W8, [X19]
	0x03745150 CBZ W8, 0x37451A0
	0x03745154 ADRP X8, 0x9AE000
	0x03745158 LDR X8, [X8 + 0x598]
	0x0374515C LDR X20, [X19 + 0x10]
	0x03745160 LDR X0, [X8]
	0x03745164 LDR W8, [X0 + 0xE0]
	0x03745168 CBNZ W8, 0x3745170
	0x0374516C BL 0x1C16DFC
	0x03745170 MOV X0, X20
	0x03745174 MOV X1, X31

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xC9C000
	012 Move W8, [X20+3427]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xA01000
	019 Move X0, [X0+1840]
	020 Call 0x1C17CF4
	021 Move X0, 0xA01000
	022 Move X0, [X0+1848]
	023 Call 0x1C17CF4
	024 Move X0, 0xA01000
	025 Move X0, [X0+1656]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3427], W8
	029 Move X20, X19
	030 Add X20, X20, 248
	031 Move W23, [X20]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X25, 0xA01000
	034 Move X26, 0xA01000
	035 Move X25, [X25+1840]
	036 Move X26, [X26+1848]
	037 Move X24, X31
	038 Move W27, 1
	039 Move X21, X24
	040 Move X0, [X19+208]
	041 Compare X0, 0
	042 JumpIfEqual {85}
	043 Move W8, [X0+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X22, X21, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X8, X21, 1
	048 Add X9, X0, X21
	049 Add X8, X0, W8
	050 Move V0, [X9+32]
	051 Move V1, [X8+32]
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move X3, [X25]
	054 Move W1, W22
	055 Move W2, W21
	056 Call ArrayHelpers.SwapElements, X0, X1, X2
	057 Move X3, [X26]
	058 Move X0, X20
	059 Move W1, W22
	060 Move W2, W21
	061 Call 0x2DFC700, X0, X1, X2
	062 Move X0, [X19+216]
	063 Move X3, [X25]
	064 Move W1, W22
	065 Move W2, W21
	066 Call ArrayHelpers.SwapElements, X0, X1, X2
	067 Add X8, X21, 1
	068 Subtract X21, X21, 1
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add X27, X27, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add X24, X24, 1
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X22, [X31+48]
	076 Move X21, [X31+56]
	077 Move X24, [X31+32]
	078 Move X23, [X31+40]
	079 Move X26, [X31+16]
	080 Move X25, [X31+24]
	081 Move X30, [X31+80]
	082 Move X27, [X31+88]
	083 Return 
	084 Call 0x1C17F28
	085 Call 0x1C17F20

Method: System.Boolean HavePathMatch(UnityEngine.InputSystem.InputControl control, System.String[] paths, System.Int32 pathCount)

Disassembly:
	0x03745C34 B 0x3745C54
	0x03745C38 B 0x3745C54
	0x03745C3C B 0x3745C54
	0x03745C40 B 0x3745C54
	0x03745C44 B 0x3745C54
	0x03745C48 B 0x3745C54
	0x03745C4C B 0x3745C54
	0x03745C50 B 0x3745C54
	0x03745C54 MOV X20, X0
	0x03745C58 CMP W1, 0x1
	0x03745C5C B.NE 0x3745D3C
	0x03745C60 MOV X0, X20
	0x03745C64 BL 0x3EB1AD0
	0x03745C68 MOV X20, X0
	0x03745C6C ADRP X0, 0x9B4000
	0x03745C70 LDR X0, [X0 + 0xCC0]
	0x03745C74 BL 0x1C16D08
	0x03745C78 LDR X8, [X20]
	0x03745C7C LDR X1, [X8]
	0x03745C80 BL 0x1C17270
	0x03745C84 TBZ X0, 0x0, 0x3745D10
	0x03745C88 BL 0x3EB1AE0
	0x03745C8C ADRP X0, 0x9AE000
	0x03745C90 LDR X20, [X19 + 0x18]
	0x03745C94 LDR X0, [X0 + 0x598]
	0x03745C98 BL 0x1C16D08
	0x03745C9C LDR W8, [X0 + 0xE0]
	0x03745CA0 CBNZ W8, 0x3745CA8
	0x03745CA4 BL 0x1C16DFC
	0x03745CA8 MOV X0, X20
	0x03745CAC MOV X1, X31
	0x03745CB0 MOV X2, X31
	0x03745CB4 BL 0x3C354F8
	0x03745CB8 TBZ X0, 0x0, 0x3745CFC
	0x03745CBC LDR X0, [X19 + 0x18]
	0x03745CC0 CBZ X0, 0x3745D30

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X19, X1
	010 Compare X1, 0
	011 JumpIfEqual {42}
	012 Move X20, X0
	013 Move X21, X31
	014 Move W22, W2
	015 Add X23, X19, 32
	016 Move W24, 1
	017 Move W8, [X19+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X0, [X23]
	020 Move X1, X20
	021 Move X2, X31
	022 Call InputControlPath.MatchesPrefix, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Add X21, X21, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W24, W31
	032 And W0, W24, 1
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 Move X30, [X31+64]
	040 Return X0
	041 Call 0x1C17F28
	042 Call 0x1C17F20

Method: System.Void HookOnAfterUpdate()

Disassembly:
	0x037449EC MOVZ W2, 0xA
	0x037449F0 MOV X0, X23
	0x037449F4 MOV V0.16B, V9.16B
	0x037449F8 BL 0x2174958
	0x037449FC LDR X3, [X26]
	0x03744A00 LDR X0, [X31 + 0x8]
	0x03744A04 ADD X1, X31, 0x84
	0x03744A08 MOVZ W2, 0xA
	0x03744A0C MOV V0.16B, V8.16B
	0x03744A10 BL 0x2174958
	0x03744A14 LDR V0, [X19 + 0xF4]
	0x03744A18 MOVZ W29, 0x1
	0x03744A1C MOVZ W28, 0x1
	0x03744A20 FCMP S0, 0x0
	0x03744A24 B.LE 0x37446B4
	0x03744A28 MOV X0, X31
	0x03744A2C BL 0x37FC688
	0x03744A30 STR D0, [X19 + 0xE0]
	0x03744A34 MOVZ W29, 0x1
	0x03744A38 MOVZ W28, 0x1
	0x03744A3C B 0x37446B4
	0x03744A40 MOV X0, X19
	0x03744A44 BL 0x3743B94
	0x03744A48 ADD X0, X31, 0xB0
	0x03744A4C MOV X1, X31
	0x03744A50 BL 0x3776130
	0x03744A54 TBZ X29, 0x0, 0x3744A70
	0x03744A58 LDRB W8, [X19 + 0x169]
	0x03744A5C TBZ X8, 0x1, 0x3744A70
	0x03744A60 ADD X0, X31, 0x128
	0x03744A64 MOVZ W1, 0x1
	0x03744A68 MOV X2, X31
	0x03744A6C BL 0x37FBCE0
	0x03744A70 TBZ X28, 0x0, 0x3744AC8
	0x03744A74 LDRB W8, [X19 + 0x168]
	0x03744A78 TBNZ X8, 0x2, 0x3744AC8
	0x03744A7C LDR X8, [X19 + 0x128]
	0x03744A80 CBZ X8, 0x3744AAC
	0x03744A84 MOV X0, X19
	0x03744A88 BL 0x3744048
	0x03744A8C LDR X8, [X19 + 0x128]
	0x03744A90 CBZ X8, 0x3744B18
	0x03744A94 LDR X9, [X8 + 0x18]
	0x03744A98 LDR X0, [X8 + 0x40]
	0x03744A9C LDR X2, [X8 + 0x28]
	0x03744AA0 MOV X1, X19
	0x03744AA4 BLR X9
	0x03744AA8 B 0x3744AC8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC9D000
	006 Move W8, [X20+3428]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x9B1000
	013 Move X0, [X0+3696]
	014 Call 0x1C17CF4
	015 Move X0, 0x9D8000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move X0, 0xA02000
	019 Move X0, [X0+1776]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3428], W8
	023 Move W8, [X19+360]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 16
	026 Compare TEMP, 16
	027 JumpIfEqual {56}
	028 Move X21, 0x9D8000
	029 Move X20, [X19+336]
	030 Move X21, [X21+624]
	031 Compare X20, 0
	032 JumpIfNotEqual {45}
	033 Move X8, 0x9B1000
	034 Move X8, [X8+3696]
	035 Move X0, [X8]
	036 Call 0x1C17F10
	037 Move X8, 0xA02000
	038 Move X8, [X8+1776]
	039 Move X1, X19
	040 Move X3, X31
	041 Move X20, X0
	042 Move X2, [X8]
	043 Call Action..ctor, X0, X1, X2
	044 Move [X19+336], X20
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X20
	051 Move X1, X31
	052 Call InputSystem.add_onAfterUpdate, X0
	053 Move W8, [X19+360]
	054 Or W8, W8, 16
	055 Move [X19+360], W8
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return 

Method: System.Void UnhookOnAfterUpdate()

Disassembly:
	0x0374537C LDR X21, [X21 + 0x598]
	0x03745380 MOV X19, X1
	0x03745384 MOV X20, X0
	0x03745388 TBNZ X8, 0x0, 0x37453A0
	0x0374538C ADRP X0, 0x9AE000
	0x03745390 LDR X0, [X0 + 0x598]
	0x03745394 BL 0x1C16CF4
	0x03745398 MOVZ W8, 0x1
	0x0374539C STRB W8, [X22 + 0xD6F]
	0x037453A0 LDR X0, [X21]
	0x037453A4 LDR X20, [X20 + 0x10]
	0x037453A8 LDR W8, [X0 + 0xE0]
	0x037453AC CBNZ W8, 0x37453B4
	0x037453B0 BL 0x1C16DFC
	0x037453B4 MOV X0, X20
	0x037453B8 MOV X1, X19
	0x037453BC LDP X20, X19, [X31 + 0x20]
	0x037453C0 LDP X22, X21, [X31 + 0x10]
	0x037453C4 MOV X2, X31
	0x037453C8 LDR X30, [X31], #0x30
	0x037453CC B 0x3C3883C
	0x037453D0 STP X30, X21, [X31 - 0x20]!
	0x037453D4 STP X20, X19, [X31 + 0x10]
	0x037453D8 ADRP X21, 0xC9B000
	0x037453DC LDRB W8, [X21 + 0xD70]
	0x037453E0 MOV X20, X1
	0x037453E4 MOV X19, X0
	0x037453E8 TBNZ X8, 0x0, 0x374540C
	0x037453EC ADRP X0, 0xA00000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC9C000
	005 Move W8, [X20+3429]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9D7000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3429], W8
	016 Move W8, [X19+360]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 16
	019 Compare TEMP, 16
	020 JumpIfNotEqual {35}
	021 Move X8, 0x9D7000
	022 Move X8, [X8+624]
	023 Move X20, [X19+336]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Call InputSystem.remove_onAfterUpdate, X0
	032 Move W8, [X19+360]
	033 And W8, W8, 0xFFFFFFEF
	034 Move [X19+360], W8
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 

Method: System.Void OnAfterUpdate()

Disassembly:
	0x03745CC4 MOV X1, X31
	0x03745CC8 BL 0x3C389D4
	0x03745CCC MOV X20, X0
	0x03745CD0 ADRP X0, 0x9B7000
	0x03745CD4 LDR X19, [X19 + 0x20]
	0x03745CD8 LDR X0, [X0 + 0x988]
	0x03745CDC BL 0x1C16D08
	0x03745CE0 MOV X1, X0
	0x03745CE4 MOV X0, X20
	0x03745CE8 MOV X2, X19
	0x03745CEC LDP X20, X19, [X31 + 0x10]
	0x03745CF0 MOV X3, X31
	0x03745CF4 LDP X30, X21, [X31], #0x20
	0x03745CF8 B 0x32274B8
	0x03745CFC MOV X0, X19
	0x03745D00 LDP X20, X19, [X31 + 0x10]
	0x03745D04 MOV X1, X31
	0x03745D08 LDP X30, X21, [X31], #0x20
	0x03745D0C B 0x3C39884
	0x03745D10 MOVZ W0, 0x8
	0x03745D14 BL 0x3EB1AF0
	0x03745D18 LDR X8, [X20]
	0x03745D1C STR X8, [X0]
	0x03745D20 ADRP X1, 0x76F000
	0x03745D24 ADD X1, X1, 0xE58
	0x03745D28 MOV X2, X31
	0x03745D2C BL 0x3EB1B00
	0x03745D30 BL 0x1C16F20
	0x03745D34 MOV X20, X0
	0x03745D38 BL 0x3EB1AE0
	0x03745D3C MOV X0, X20
	0x03745D40 BL 0x1D2C690
	0x03745D44 BL 0x1990590
	0x03745D48 STP X30, X19, [X31 - 0x10]!
	0x03745D4C MOV X1, X31
	0x03745D50 MOV X19, X0
	0x03745D54 BL 0x3C389D4
	0x03745D58 MOV X1, X31
	0x03745D5C BL 0x32277A8
	0x03745D60 TBZ X0, 0x0, 0x3745D74
	0x03745D64 MOV X0, X19
	0x03745D68 BL 0x37451B4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V0, [X0+224]
	004 Move X19, X0
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move V0, [X19+240]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move X0, X31
	009 Call InputState.get_currentTime
	010 Move V1, [X19+232]
	011 Move V2, [X19+240]
	012 Subtract D0, D0, D1
	013 NotImplemented "Instruction FCVT not yet implemented."
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move W8, [X19+360]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {41}
	020 Move X0, X19
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call RebindingOperation.OnCancel, X0
	024 Return 
	025 Move V0, [X19+244]
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Move V0, [X19+224]
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 Move X0, X31
	030 Call InputState.get_currentTime
	031 Move V1, [X19+244]
	032 Move V2, [X19+224]
	033 NotImplemented "Instruction FCVT not yet implemented."
	034 Add D1, D2, D1
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move W8, [X19+360]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {44}
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 Return 
	044 Move X0, X19
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 Call RebindingOperation.OnComplete, X0
	048 Return 

Method: System.Void OnComplete()

Disassembly:
	0x03744BE0 BL 0x3EB1AD0
	0x03744BE4 LDR X21, [X0]
	0x03744BE8 BL 0x3EB1AE0
	0x03744BEC ADD X0, X31, 0xB0
	0x03744BF0 MOV X1, X31
	0x03744BF4 BL 0x3776130
	0x03744BF8 CBZ X21, 0x3744A54
	0x03744BFC MOV X0, X21
	0x03744C00 BL 0x1C16F18
	0x03744C04 MOV X21, X31
	0x03744C08 B 0x3744C10
	0x03744C0C MOV X20, X0
	0x03744C10 ADD X0, X31, 0xB0
	0x03744C14 MOV X1, X31
	0x03744C18 BL 0x3776130
	0x03744C1C CBNZ X21, 0x3744C28
	0x03744C20 MOV X0, X20
	0x03744C24 BL 0x1D2C690
	0x03744C28 MOV X0, X21
	0x03744C2C BL 0x1C16F18
	0x03744C30 BL 0x1990590
	0x03744C34 STR X30, [X31 - 0x40]!
	0x03744C38 STP X24, X23, [X31 + 0x10]
	0x03744C3C STP X22, X21, [X31 + 0x20]
	0x03744C40 STP X20, X19, [X31 + 0x30]
	0x03744C44 CMP W2, 0x1
	0x03744C48 B.LT 0x3744CA0
	0x03744C4C MOV X19, X1
	0x03744C50 CBZ X1, 0x3744CC0
	0x03744C54 MOV X20, X0
	0x03744C58 MOV X21, X31
	0x03744C5C MOV W22, W2
	0x03744C60 ADD X23, X19, 0x20
	0x03744C64 MOVZ W24, 0x1
	0x03744C68 LDR W8, [X19 + 0x18]
	0x03744C6C CMP X21, X8
	0x03744C70 B.CS 0x3744CBC
	0x03744C74 LDR X0, [X23, X21, LSL #3]
	0x03744C78 MOV X1, X20
	0x03744C7C MOV X2, X31
	0x03744C80 BL 0x3778EF8
	0x03744C84 TBNZ X0, 0x0, 0x3744CA4
	0x03744C88 ADD X21, X21, 0x1
	0x03744C8C CMP X21, X22
	0x03744C90 CSET W24, CC
	0x03744C94 CMP X22, X21
	0x03744C98 B.NE 0x3744C68
	0x03744C9C B 0x3744CA4
	0x03744CA0 MOV W24, W31
	0x03744CA4 AND W0, W24, 0x1
	0x03744CA8 LDP X20, X19, [X31 + 0x30]
	0x03744CAC LDP X22, X21, [X31 + 0x20]
	0x03744CB0 LDP X24, X23, [X31 + 0x10]
	0x03744CB4 LDR X30, [X31], #0x40
	0x03744CB8 RET
	0x03744CBC BL 0x1C16F28
	0x03744CC0 BL 0x1C16F20
	0x03744CC4 STP X30, X19, [X31 - 0x10]!
	0x03744CC8 LDR V0, [X0 + 0xE0]
	0x03744CCC MOV X19, X0
	0x03744CD0 FCMP D0, 0x0
	0x03744CD4 B.PL 0x3744D18
	0x03744CD8 LDR V0, [X19 + 0xF0]
	0x03744CDC FCMP S0, 0x0
	0x03744CE0 B.LE 0x3744D18
	0x03744CE4 MOV X0, X31
	0x03744CE8 BL 0x37FC688
	0x03744CEC LDR V1, [X19 + 0xE8]
	0x03744CF0 LDR V2, [X19 + 0xF0]
	0x03744CF4 FSUB D0, D0, D1
	0x03744CF8 FCVT S1, S2
	0x03744CFC FCMP D0, D1
	0x03744D00 B.LE 0x3744D18
	0x03744D04 LDRB W8, [X19 + 0x168]
	0x03744D08 TBZ X8, 0x0, 0x3744D58
	0x03744D0C MOV X0, X19
	0x03744D10 LDP X30, X19, [X31], #0x10
	0x03744D14 B 0x3743B94
	0x03744D18 LDR V0, [X19 + 0xF4]
	0x03744D1C FCMP S0, 0x0
	0x03744D20 B.LS 0x3744D58
	0x03744D24 LDR V0, [X19 + 0xE0]
	0x03744D28 FCMP D0, 0x0
	0x03744D2C B.MI 0x3744D58
	0x03744D30 MOV X0, X31
	0x03744D34 BL 0x37FC688
	0x03744D38 LDR V1, [X19 + 0xF4]
	0x03744D3C LDR V2, [X19 + 0xE0]
	0x03744D40 FCVT S1, S1
	0x03744D44 FADD D1, D2, D1
	0x03744D48 FCMP D0, D1
	0x03744D4C B.LT 0x3744D58
	0x03744D50 LDRB W8, [X19 + 0x168]
	0x03744D54 TBNZ X8, 0x0, 0x3744D60
	0x03744D58 LDP X30, X19, [X31], #0x10
	0x03744D5C RET
	0x03744D60 MOV X0, X19
	0x03744D64 LDP X30, X19, [X31], #0x10
	0x03744D68 B 0x3743BE0
	0x03744D6C STP X30, X23, [X31 - 0x30]!
	0x03744D70 STP X22, X21, [X31 + 0x10]
	0x03744D74 STP X20, X19, [X31 + 0x20]
	0x03744D78 ADRP X21, 0xC9C000
	0x03744D7C LDRB W8, [X21 + 0xD68]
	0x03744D80 MOV X20, X1
	0x03744D84 MOV X19, X0
	0x03744D88 TBNZ X8, 0x0, 0x3744DAC
	0x03744D8C ADRP X0, 0x9D7000
	0x03744D90 LDR X0, [X0 + 0xDC0]
	0x03744D94 BL 0x1C16CF4
	0x03744D98 ADRP X0, 0x9AF000
	0x03744D9C LDR X0, [X0 + 0x8F0]
	0x03744DA0 BL 0x1C16CF4
	0x03744DA4 MOVZ W8, 0x1
	0x03744DA8 STRB W8, [X21 + 0xD68]
	0x03744DAC CBZ X20, 0x3744E68
	0x03744DB0 ADRP X21, 0x9D7000
	0x03744DB4 LDR X21, [X21 + 0xDC0]
	0x03744DB8 LDR X0, [X21]
	0x03744DBC LDR W8, [X0 + 0xE0]
	0x03744DC0 CBNZ W8, 0x3744DCC
	0x03744DC4 BL 0x1C16DFC
	0x03744DC8 LDR X0, [X21]
	0x03744DCC LDR X8, [X0 + 0xB8]
	0x03744DD0 LDR X2, [X19 + 0x158]
	0x03744DD4 MOV X1, X20
	0x03744DD8 MOV X3, X31
	0x03744DDC ADD X0, X8, 0x10
	0x03744DE0 BL 0x3818AD4
	0x03744DE4 MOV X21, X0
	0x03744DE8 LDR X0, [X19 + 0x160]
	0x03744DEC MOV X22, X1
	0x03744DF0 CBZ X0, 0x3744E04
	0x03744DF4 MOV W1, W31
	0x03744DF8 MOV X2, X31
	0x03744DFC BL 0x3232ADC
	0x03744E00 B 0x3744E24
	0x03744E04 ADRP X8, 0x9AF000
	0x03744E08 LDR X8, [X8 + 0x8F0]
	0x03744E0C LDR X0, [X8]
	0x03744E10 BL 0x1C16F10
	0x03744E14 MOV X1, X31
	0x03744E18 MOV X23, X0
	0x03744E1C BL 0x3231AC4
	0x03744E20 STR X23, [X19 + 0x160]
	0x03744E24 MOV X0, X21
	0x03744E28 MOV X1, X22
	0x03744E2C MOV X2, X31
	0x03744E30 BL 0x37577E0
	0x03744E34 LDR X2, [X19 + 0x160]
	0x03744E38 MOV X1, X0
	0x03744E3C MOV X0, X20
	0x03744E40 MOV X3, X31
	0x03744E44 BL 0x3774D34
	0x03744E48 LDR X0, [X19 + 0x160]
	0x03744E4C CBZ X0, 0x3744E68
	0x03744E50 LDR X8, [X0]
	0x03744E54 LDP X20, X19, [X31 + 0x20]
	0x03744E58 LDP X22, X21, [X31 + 0x10]
	0x03744E5C LDP X2, X1, [X8 + 0x168]
	0x03744E60 LDP X30, X23, [X31], #0x30
	0x03744E64 BR X2
	0x03744E68 BL 0x1C16F20
	0x03744E6C STR X30, [X31 - 0x30]!
	0x03744E70 STP X22, X21, [X31 + 0x10]
	0x03744E74 STP X20, X19, [X31 + 0x20]
	0x03744E78 ADRP X22, 0xC9C000
	0x03744E7C ADRP X20, 0xA01000
	0x03744E80 ADRP X21, 0xA01000
	0x03744E84 LDRB W8, [X22 + 0xD67]
	0x03744E88 LDR X20, [X20 + 0x780]
	0x03744E8C LDR X21, [X21 + 0x788]
	0x03744E90 MOV X19, X0
	0x03744E94 TBNZ X8, 0x0, 0x3744EC4
	0x03744E98 ADRP X0, 0xA01000
	0x03744E9C LDR X0, [X0 + 0x758]
	0x03744EA0 BL 0x1C16CF4
	0x03744EA4 ADRP X0, 0xA01000
	0x03744EA8 LDR X0, [X0 + 0x780]
	0x03744EAC BL 0x1C16CF4
	0x03744EB0 ADRP X0, 0xA01000
	0x03744EB4 LDR X0, [X0 + 0x788]
	0x03744EB8 BL 0x1C16CF4
	0x03744EBC MOVZ W8, 0x1
	0x03744EC0 STRB W8, [X22 + 0xD67]
	0x03744EC4 LDR W8, [X19 + 0x168]
	0x03744EC8 AND W8, W8, 0xFFFFFFFE
	0x03744ECC STR W8, [X19 + 0x168]
	0x03744ED0 LDR X1, [X20]

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+256], X29
	003 Move [X31+264], X30
	004 Move [X31+272], X22
	005 Move [X31+280], X21
	006 Move [X31+288], X20
	007 Move [X31+296], X19
	008 Move X20, 0xC9D000
	009 Move W8, [X20+3430]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xA02000
	016 Move X0, [X0+1656]
	017 Call 0x1C17CF4
	018 Move X0, 0xA02000
	019 Move X0, [X0+1664]
	020 Call 0x1C17CF4
	021 Move X0, 0xA01000
	022 Move X0, [X0+3928]
	023 Call 0x1C17CF4
	024 Move X0, 0xA01000
	025 Move X0, [X0+3936]
	026 Call 0x1C17CF4
	027 Move X0, 0x9D7000
	028 Move X0, [X0+4072]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3430], W8
	032 Move X0, X19
	033 Call RebindingOperation.SortCandidatesByScore, X0
	034 Move X0, X19
	035 Add X0, X0, 248
	036 Move W8, [X0]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, 0xA02000
	039 Move X8, [X8+1664]
	040 Move W1, W31
	041 Move X2, [X8]
	042 Call 0x2DFB48C, X0, X1
	043 Compare X0, 0
	044 JumpIfEqual {170}
	045 Move X1, X31
	046 Move X21, X0
	047 Call InputControl.get_path, X0
	048 Move X8, [X19+304]
	049 Move X22, X0
	050 Compare X8, 0
	051 JumpIfEqual {64}
	052 Move X9, [X8+24]
	053 Move X0, [X8+64]
	054 Move X2, [X8+40]
	055 Move X1, X21
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X1, X31
	058 Move X20, X0
	059 Call String.IsNullOrEmpty, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {74}
	064 Move W8, [X19+360]
	065 Move X20, X22
	066 Move TEMP, X8
	067 And TEMP, TEMP, 128
	068 Compare TEMP, 128
	069 JumpIfEqual {74}
	070 Move X0, X19
	071 Move X1, X21
	072 Call RebindingOperation.GeneratePathForControl, X0, X1
	073 Move X20, X0
	074 Move X8, [X19+320]
	075 Compare X8, 0
	076 JumpIfEqual {83}
	077 Move X9, [X8+24]
	078 Move X0, [X8+64]
	079 Move X3, [X8+40]
	080 Move X1, X19
	081 Move X2, X20
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Move W8, [X19+361]
	084 Move TEMP, X8
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {105}
	088 Move W21, [X19+176]
	089 Move TEMP, X21
	090 And TEMP, TEMP, -2147483648
	091 Compare TEMP, -2147483648
	092 JumpIfEqual {134}
	093 Move X0, [X19+16]
	094 Compare X0, 0
	095 JumpIfEqual {170}
	096 Call InputAction.get_bindings, X0
	097 Move X8, X1
	098 ShiftRight X8, 32
	099 And X8, X8, 0x7FFFFFFF
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, [X19+16]
	102 Move W1, [X19+176]
	103 Move X2, X20
	104 Call InputActionRebindingExtensions.ApplyBindingOverride, X0, X1, X2
	105 Move X0, [X19+16]
	106 Move X4, [X19+184]
	107 Add X8, X31, 88
	108 Move X1, X20
	109 Move X2, X31
	110 Move X3, X31
	111 Move X5, X31
	112 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	113 Move W9, [X19+360]
	114 Move X8, [X19+280]
	115 Or W9, W9, 2
	116 Move [X19+360], W9
	117 Compare X8, 0
	118 JumpIfEqual {124}
	119 Move X9, [X8+24]
	120 Move X0, [X8+64]
	121 Move X2, [X8+40]
	122 Move X1, X19
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X0, X19
	125 Call RebindingOperation.ResetAfterMatchCompleted, X0
	126 Move X20, [X31+288]
	127 Move X19, [X31+296]
	128 Move X22, [X31+272]
	129 Move X21, [X31+280]
	130 Move X29, [X31+256]
	131 Move X30, [X31+264]
	132 Add X31, X31, 304
	133 Return 
	134 Move X0, X19
	135 Add X0, X0, 24
	136 Move W8, [X0]
	137 Compare W8, 0
	138 JumpIfEqual {165}
	139 Move X8, 0xA01000
	140 Move X8, [X8+3936]
	141 Add X21, X31, 88
	142 Move X1, [X8]
	143 Add X8, X31, 88
	144 Call Nullable`1<InputBinding>.get_Value, X0
	145 Move V0, [X21+3]
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 NotImplemented "Instruction LDUR not yet implemented."
	150 Move [X31+224], V1
	151 Move [X31+232], V0
	152 Add X1, X31, 0
	153 Move [X31+192], V2
	154 Move [X31+200], V3
	155 Move [X31+11], V4
	156 Move X0, [X19+16]
	157 Move V4, [X31+11]
	158 Move [X31], V2
	159 Move [X31+8], V3
	160 Move [X31+32], V1
	161 Move [X31+40], V0
	162 Move [X31+64], X20
	163 Move [X31+72], V4
	164 Call InputActionRebindingExtensions.ApplyBindingOverride, X0, X1
	165 Move X0, [X19+16]
	166 Move X1, X20
	167 Move X2, X31
	168 Move X3, X31
	169 Call InputActionRebindingExtensions.ApplyBindingOverride, X0, X1, X2, X3
	170 Call 0x1C17F20
	171 Move W8, [X19+176]
	172 Move X20, 0x9B0000
	173 Move [X31+88], W8
	174 Move X20, [X20+1880]
	175 Move X0, X20
	176 Call 0x1C17D08
	177 Add X1, X31, 88
	178 Call 0x1C17E04
	179 Move X19, [X19+16]
	180 Move X21, X0
	181 Move X0, X19
	182 Call 0x19913C0
	183 Move X0, X19
	184 Call InputAction.get_bindings, X0
	185 Move X0, 0x9D7000
	186 Move X0, [X0+4072]
	187 Move X22, X1
	188 Call 0x1C17D08
	189 Move X8, X22
	190 ShiftRight X8, 32
	191 And X8, X8, 0x7FFFFFFF
	192 Move X0, X20
	193 Move [X31+192], W8
	194 Call 0x1C17D08
	195 Add X1, X31, 192
	196 Call 0x1C17E04
	197 Move X20, X0
	198 Move X0, 0xA02000
	199 Move X0, [X0+1800]
	200 Call 0x1C17D08
	201 Move X1, X21
	202 Move X2, X19
	203 Move X3, X20
	204 Move X4, X31
	205 Call String.Format, X0, X1, X2, X3
	206 Move X19, X0
	207 Move X0, 0x9B0000
	208 Move X0, [X0+1456]
	209 Call 0x1C17D08
	210 Call 0x1C17F10
	211 Move X1, X19
	212 Move X2, X31
	213 Move X20, X0
	214 Call InvalidOperationException..ctor, X0, X1
	215 Move X0, 0xA02000
	216 Move X0, [X0+1808]
	217 Call 0x1C17D08
	218 Move X1, X0
	219 Move X0, X20
	220 Call 0x1C17DEC

Method: System.Void OnCancel()

Disassembly:
	0x03744B94 B 0x3744BD4
	0x03744B98 B 0x3744BD0
	0x03744B9C B 0x3744BD0
	0x03744BA0 B 0x3744BD0
	0x03744BA4 B 0x3744BD0
	0x03744BA8 B 0x3744BD0
	0x03744BAC B 0x3744BD0
	0x03744BB0 B 0x3744BD0
	0x03744BB4 B 0x3744BD0
	0x03744BB8 B 0x3744BD0
	0x03744BBC B 0x3744BD0
	0x03744BC0 B 0x3744BD0
	0x03744BC4 B 0x3744BD0
	0x03744BC8 B 0x3744BD0
	0x03744BCC B 0x3744BD0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+360]
	004 Move X8, [X0+288]
	005 Move X19, X0
	006 Or W9, W9, 4
	007 Move [X0+360], W9
	008 Compare X8, 0
	009 JumpIfEqual {15}
	010 Move X9, [X8+24]
	011 Move X0, [X8+64]
	012 Move X2, [X8+40]
	013 Move X1, X19
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call RebindingOperation.ResetAfterMatchCompleted, X0
	019 Return 

Method: System.Void ResetAfterMatchCompleted()

Disassembly:
	0x03745E6C STR W31, [X19 + 0x1C]
	0x03745E70 LDP X20, X19, [X31 + 0x10]
	0x03745E74 LDP X30, X21, [X31], #0x20
	0x03745E78 RET
	0x03745E7C MOV X1, X31
	0x03745E80 B 0x33BDD8C
	0x03745E84 STR X30, [X31 - 0x30]!
	0x03745E88 STP X22, X21, [X31 + 0x10]
	0x03745E8C STP X20, X19, [X31 + 0x20]
	0x03745E90 ADRP X21, 0xC9B000
	0x03745E94 ADRP X22, 0x9AE000
	0x03745E98 LDRB W8, [X21 + 0xD7B]
	0x03745E9C LDR X22, [X22 + 0x598]
	0x03745EA0 MOV X19, X1
	0x03745EA4 MOV X20, X0
	0x03745EA8 TBNZ X8, 0x0, 0x3745ECC
	0x03745EAC ADRP X0, 0x9FF000
	0x03745EB0 LDR X0, [X0 + 0xF68]
	0x03745EB4 BL 0x1C16CF4
	0x03745EB8 ADRP X0, 0x9AE000
	0x03745EBC LDR X0, [X0 + 0x598]
	0x03745EC0 BL 0x1C16CF4
	0x03745EC4 MOVZ W8, 0x1
	0x03745EC8 STRB W8, [X21 + 0xD7B]
	0x03745ECC LDR X0, [X22]
	0x03745ED0 LDR W8, [X0 + 0xE0]
	0x03745ED4 CBNZ W8, 0x3745EDC
	0x03745ED8 BL 0x1C16DFC
	0x03745EDC MOV X0, X20
	0x03745EE0 MOV X1, X31
	0x03745EE4 MOV X2, X31
	0x03745EE8 BL 0x3C3883C
	0x03745EEC TBNZ X0, 0x0, 0x3745F70
	0x03745EF0 MOV X0, X19
	0x03745EF4 MOV X1, X31
	0x03745EF8 BL 0x32277A8
	0x03745EFC TBNZ X0, 0x0, 0x3745F90
	0x03745F00 CBZ X20, 0x3745F6C
	0x03745F04 MOV X0, X20
	0x03745F08 MOV X1, X19
	0x03745F0C MOV W2, W31
	0x03745F10 MOV X3, X31
	0x03745F14 BL 0x373798C
	0x03745F18 CBNZ X0, 0x3745FD8
	0x03745F1C ADRP X8, 0x9FF000
	0x03745F20 LDR X8, [X8 + 0xF68]
	0x03745F24 LDR X0, [X8]
	0x03745F28 BL 0x1C16F10
	0x03745F2C MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC9C000
	007 Move X20, 0xA01000
	008 Move X21, 0xA01000
	009 Move W8, [X22+3431]
	010 Move X20, [X20+1920]
	011 Move X21, [X21+1928]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xA01000
	018 Move X0, [X0+1880]
	019 Call 0x1C17CF4
	020 Move X0, 0xA01000
	021 Move X0, [X0+1920]
	022 Call 0x1C17CF4
	023 Move X0, 0xA01000
	024 Move X0, [X0+1928]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+3431], W8
	028 Move W8, [X19+360]
	029 And W8, W8, 0xFFFFFFFE
	030 Move [X19+360], W8
	031 Move X1, [X20]
	032 Add X20, X19, 248
	033 Move X0, X20
	034 Call 0x2DFC640, X0
	035 Move X2, [X21]
	036 Move X0, X20
	037 Move W1, W31
	038 Call 0x2DFB384, X0, X1
	039 Move X0, [X19+368]
	040 Move X8, 0xBFF00000
	041 Move [X19+232], X8
	042 Compare X0, 0
	043 JumpIfEqual {58}
	044 Move X8, 0xA01000
	045 Move X8, [X8+1880]
	046 Move X1, [X8]
	047 Call Dictionary`2<Object, Single>.Clear, X0
	048 Move X0, X19
	049 Call RebindingOperation.UnhookOnEvent, X0
	050 Move X0, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Call RebindingOperation.UnhookOnAfterUpdate, X0
	057 Return 
	058 Call 0x1C17F20

Method: System.Void ThrowIfRebindInProgress()

Disassembly:
	0x037442C4 MOV X0, X19
	0x037442C8 BL 0x37442F4
	0x037442CC MOV X0, X19
	0x037442D0 BL 0x374437C
	0x037442D4 LDR X1, [X20]
	0x037442D8 ADD X0, X19, 0xF8
	0x037442DC BL 0x2DFB98C
	0x037442E0 ADD X0, X19, 0x158
	0x037442E4 LDP X20, X19, [X31 + 0x10]
	0x037442E8 MOV X1, X31
	0x037442EC LDP X30, X21, [X31], #0x20
	0x037442F0 B 0x38196AC
	0x037442F4 STR X30, [X31 - 0x20]!
	0x037442F8 STP X20, X19, [X31 + 0x10]
	0x037442FC ADRP X20, 0xC9C000
	0x03744300 LDRB W8, [X20 + 0xD61]
	0x03744304 MOV X19, X0
	0x03744308 TBNZ X8, 0x0, 0x3744320
	0x0374430C ADRP X0, 0x9D7000
	0x03744310 LDR X0, [X0 + 0x270]
	0x03744314 BL 0x1C16CF4
	0x03744318 MOVZ W8, 0x1
	0x0374431C STRB W8, [X20 + 0xD61]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+360]
	004 Move TEMP, X8
	005 And TEMP, TEMP, 1
	006 Compare TEMP, 1
	007 JumpIfEqual {11}
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x9B0000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0xA02000
	017 Move X0, [X0+1672]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0xA02000
	024 Move X0, [X0+1680]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.String GeneratePathForControl(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x03745D6C LDP X30, X19, [X31], #0x10
	0x03745D70 B 0x3745A24
	0x03745D74 MOV X0, X19
	0x03745D78 MOV X1, X31
	0x03745D7C LDP X30, X19, [X31], #0x10
	0x03745D80 B 0x3C389D4
	0x03745D84 CBZ X0, 0x3745D8C
	0x03745D88 B 0x37451B4
	0x03745D8C RET
	0x03745D90 STR X30, [X31 - 0x20]!
	0x03745D94 STP X20, X19, [X31 + 0x10]
	0x03745D98 ADRP X20, 0xC9B000
	0x03745D9C LDRB W8, [X20 + 0xD78]
	0x03745DA0 MOV X19, X0
	0x03745DA4 TBNZ X8, 0x0, 0x3745DBC
	0x03745DA8 ADRP X0, 0xA00000
	0x03745DAC LDR X0, [X0 + 0x7F8]
	0x03745DB0 BL 0x1C16CF4
	0x03745DB4 MOVZ W8, 0x1
	0x03745DB8 STRB W8, [X20 + 0xD78]
	0x03745DBC CBZ X19, 0x3745DE4
	0x03745DC0 ADRP X8, 0xA00000
	0x03745DC4 LDR X8, [X8 + 0x7F8]
	0x03745DC8 LDR X0, [X8]
	0x03745DCC BL 0x22537A0
	0x03745DD0 CBZ X0, 0x3745DF8
	0x03745DD4 MOV X1, X19
	0x03745DD8 MOV X20, X0
	0x03745DDC BL 0x37455A4
	0x03745DE0 B 0x3745DE8
	0x03745DE4 MOV X20, X31
	0x03745DE8 MOV X0, X20
	0x03745DEC LDP X20, X19, [X31 + 0x10]
	0x03745DF0 LDR X30, [X31], #0x20
	0x03745DF4 RET
	0x03745DF8 BL 0x1C16F20
	0x03745DFC B 0x37451B4
	0x03745E00 MOV X1, X31
	0x03745E04 B 0x3C36D2C
	0x03745E08 STP X30, X21, [X31 - 0x20]!
	0x03745E0C STP X20, X19, [X31 + 0x10]
	0x03745E10 ADRP X21, 0xC9B000
	0x03745E14 ADRP X20, 0x9AE000
	0x03745E18 MOV X19, X8
	0x03745E1C LDRB W8, [X21 + 0xD79]
	0x03745E20 LDR X20, [X20 + 0x618]
	0x03745E24 TBNZ X8, 0x0, 0x3745E3C
	0x03745E28 ADRP X0, 0x9AE000
	0x03745E2C LDR X0, [X0 + 0x618]
	0x03745E30 BL 0x1C16CF4
	0x03745E34 MOVZ W8, 0x1
	0x03745E38 STRB W8, [X21 + 0xD79]
	0x03745E3C LDR X0, [X20]
	0x03745E40 MOV W1, W31
	0x03745E44 BL 0x1C16D6C
	0x03745E48 LDR X8, [X20]
	0x03745E4C MOV X20, X0
	0x03745E50 MOV W1, W31
	0x03745E54 MOV X0, X8
	0x03745E58 BL 0x1C16D6C
	0x03745E5C STP X20, X0, [X19]
	0x03745E60 STR X31, [X19 + 0x10]
	0x03745E64 STRB W31, [X19 + 0x18]
	0x03745E68 STUR W31, [X19 + 0x19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xC9C000
	008 Move W8, [X21+3432]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x9D7000
	016 Move X0, [X0+3520]
	017 Call 0x1C17CF4
	018 Move X0, 0x9AF000
	019 Move X0, [X0+2288]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3432], W8
	023 Compare X20, 0
	024 JumpIfEqual {77}
	025 Move X21, 0x9D7000
	026 Move X21, [X21+3520]
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X21]
	033 Move X8, [X0+184]
	034 Move X2, [X19+344]
	035 Move X1, X20
	036 Move X3, X31
	037 Add X0, X8, 16
	038 Call Collection.FindLayoutThatIntroducesControl, X0, X1, X2
	039 Move X21, X0
	040 Move X0, [X19+352]
	041 Move X22, X1
	042 Compare X0, 0
	043 JumpIfEqual {47}
	044 Move W1, W31
	045 Move X2, X31
	046 Call StringBuilder.set_Length, X0, X1
	047 Move X8, 0x9AF000
	048 Move X8, [X8+2288]
	049 Move X0, [X8]
	050 Call 0x1C17F10
	051 Move X1, X31
	052 Move X23, X0
	053 Call StringBuilder..ctor, X0
	054 Move [X19+352], X23
	055 Move X0, X21
	056 Move X1, X22
	057 Move X2, X31
	058 Call InternedString.op_Implicit, X0
	059 Move X2, [X19+352]
	060 Move X1, X0
	061 Move X0, X20
	062 Move X3, X31
	063 Call InputControlExtensions.BuildPath, X0, X1, X2
	064 Move X0, [X19+352]
	065 Compare X0, 0
	066 JumpIfEqual {77}
	067 Move X8, [X0]
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X2, [X8+360]
	073 Move X1, [X8+368]
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 CallNoReturn X2
	077 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x037429D8 MOV X0, X20
	0x037429DC MOV X1, X31
	0x037429E0 STR W8, [X19 + 0x14]
	0x037429E4 BL 0x374BDB0
	0x037429E8 LDRB W8, [X20 + 0x1]
	0x037429EC ADD W8, W0, W8
	0x037429F0 MOVZ W0, 0x1
	0x037429F4 STR W8, [X19 + 0x18]
	0x037429F8 LDP X20, X19, [X31 + 0x20]
	0x037429FC LDP X22, X21, [X31 + 0x10]
	0x03742A00 LDR X30, [X31], #0x30
	0x03742A04 RET
	0x03742A08 BL 0x1C16F20
	0x03742A0C STP X30, X19, [X31 - 0x10]!
	0x03742A10 MOV X19, X0
	0x03742A14 LDP W8, W9, [X19 + 0x14]
	0x03742A18 CMP W8, W9
	0x03742A1C B.GE 0x3742A68
	0x03742A20 ADD W8, W8, 0x1
	0x03742A24 CMP W8, W9
	0x03742A28 STR W8, [X19 + 0x14]
	0x03742A2C B.EQ 0x3742A68
	0x03742A30 LDR X9, [X19]
	0x03742A34 CBZ X9, 0x3742A74
	0x03742A38 LDR X9, [X9 + 0x20]
	0x03742A3C CBZ X9, 0x3742A74
	0x03742A40 LDR W10, [X9 + 0x18]
	0x03742A44 CMP W8, W10
	0x03742A48 B.CS 0x3742A78
	0x03742A4C ADD X8, X9, W8, 0x3, SXTW
	0x03742A50 LDR X1, [X8 + 0x20]
	0x03742A54 MOV X0, X19
	0x03742A58 BL 0x3742A7C
	0x03742A5C TBZ X0, 0x0, 0x3742A14
	0x03742A60 MOVZ W0, 0x1
	0x03742A64 B 0x3742A6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC9F000
	007 Move X21, 0xA04000
	008 Move X20, 0xA04000
	009 Move W8, [X22+3433]
	010 Move X21, [X21+1496]
	011 Move X20, [X20+1504]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xA04000
	018 Move X0, [X0+1504]
	019 Call 0x1C17CF4
	020 Move X0, 0xA04000
	021 Move X0, [X0+1496]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3433], W8
	025 Move W9, 0xCCCD
	026 Move TEMP, 0
	027 Not TEMP
	028 Move W8, TEMP
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 Move [X19+176], W8
	031 Move [X19+200], W9
	032 Move X0, [X21]
	033 Call 0x1C17F10
	034 Move X1, [X20]
	035 Move X20, X0
	036 Call Dictionary`2<Object, Single>..ctor, X0
	037 Move [X19+368], X20
	038 Move X0, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X1, X31
	044 Move X30, [X31+48]
	045 Call Object..ctor, X0
	046 Return 

