Type: UnityEngine.InputSystem.InputBindingComposite

Method: System.Type get_valueType()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 get_valueSizeInBytes()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context, System.Void* buffer, System.Int32 bufferSize)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Object ReadValueAsObject(ref UnityEngine.InputSystem.InputBindingCompositeContext context)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Single EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context)

Disassembly:
	0x03754028 ADD X10, X8, 0xA8
	0x0375402C ADD X9, X8, 0xA0

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Void FinishSetup(ref UnityEngine.InputSystem.InputBindingCompositeContext context)

Disassembly:
	0x03754030 ADD X8, X8, 0xB0

ISIL:
	001 Return 

Method: System.Void CallFinishSetup(ref UnityEngine.InputSystem.InputBindingCompositeContext context)

Disassembly:
	0x0374C794 CBZ X0, 0x374C7D8
	0x0374C798 MOV X0, X20
	0x0374C79C MOV X1, X31

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+456]
	003 Move X2, [X8+464]
	004 CallNoReturn X3

Method: System.Type GetValueType(System.String composite)

Disassembly:
	0x03754034 STR X8, [X31 + 0x40]
	0x03754038 LDR W8, [X31 + 0x9C]
	0x0375403C STP X9, X10, [X31 + 0x30]
	0x03754040 MOV W8, W8
	0x03754044 STR X8, [X31 + 0x78]
	0x03754048 MOVN W8, 0x0
	0x0375404C STP X31, X8, [X31 + 0xF0]
	0x03754050 MOVN W8, 0x0
	0x03754054 STR W8, [X31 + 0x98]
	0x03754058 MOVN W8, 0x0
	0x0375405C STR W8, [X31 + 0xEC]
	0x03754060 LDR X9, [X31 + 0xE0]
	0x03754064 LDR W8, [X9 + 0x18]
	0x03754068 CMP X19, X8
	0x0375406C B.CS 0x37550A4
	0x03754070 LDR X8, [X31 + 0x438]
	0x03754074 STR X8, [X31 + 0xC8]
	0x03754078 MOVZ W8, 0x58
	0x0375407C MADD X25, X19, X8, X9
	0x03754080 LDR W21, [X25 + 0x58]!
	0x03754084 LDR X8, [X31 + 0xF8]
	0x03754088 AND W27, W21, 0xC
	0x0375408C CMP W27, 0x8
	0x03754090 CSET W22, EQ
	0x03754094 ADDS W31, W8, 0x1
	0x03754098 SUB X28, X25, 0x38
	0x0375409C B.NE 0x37540A4
	0x037540A0 TBNZ X22, 0x0, 0x3754868
	0x037540A4 LDR X29, [X31 + 0xF0]
	0x037540A8 LDR W24, [X31 + 0xEC]
	0x037540AC CMP W27, 0x8
	0x037540B0 B.EQ 0x375412C
	0x037540B4 LDR X8, [X31 + 0x58]
	0x037540B8 CBZ X8, 0x37540E0
	0x037540BC MOV W24, W31
	0x037540C0 LDR X9, [X31 + 0xA0]
	0x037540C4 CBZ X9, 0x37548EC
	0x037540C8 LDR W8, [X9 + 0x18]
	0x037540CC CMP W24, W8
	0x037540D0 B.CS 0x37548F4
	0x037540D4 ADD X8, X9, W24, 0x3, SXTW
	0x037540D8 LDR X29, [X8 + 0x20]
	0x037540DC B 0x375412C
	0x037540E0 LDR X8, [X31 + 0xE0]
	0x037540E4 MOVZ W9, 0x58
	0x037540E8 MADD X8, X19, X9, X8
	0x037540EC LDR X20, [X8 + 0x50]
	0x037540F0 MOV X0, X20
	0x037540F4 MOV X1, X31
	0x037540F8 BL 0x32277A8
	0x037540FC TBZ X0, 0x0, 0x375410C
	0x03754100 MOV X29, X31
	0x03754104 MOVN W24, 0x0
	0x03754108 B 0x375412C
	0x0375410C LDR X0, [X31 + 0xB0]
	0x03754110 MOV X1, X20
	0x03754114 MOV X2, X31
	0x03754118 BL 0x373A53C
	0x0375411C MOV W24, W0
	0x03754120 ADDS W31, W0, 0x1
	0x03754124 B.NE 0x37540C0
	0x03754128 MOV X29, X31
	0x0375412C LDR W8, [X31 + 0xDC]
	0x03754130 MOVZ W9, 0x58
	0x03754134 ANDS W23, W21, 0x4
	0x03754138 STR W22, [X31 + 0x84]
	0x0375413C ADD W10, W8, W19
	0x03754140 LDR X8, [X31 + 0xE0]
	0x03754144 STR X10, [X31 + 0xC0]
	0x03754148 NOP
	0x0375414C MADD X8, X19, X9, X8
	0x03754150 LDR X20, [X8 + 0x60]
	0x03754154 LDR X8, [X31 + 0xF0]
	0x03754158 CSEL X26, X29, X8, NE
	0x0375415C LDR W8, [X31 + 0xEC]
	0x03754160 CSEL W22, W24, W8, NE
	0x03754164 LDR X8, [X31 + 0xF8]
	0x03754168 CSEL W21, W10, W8, NE
	0x0375416C CBNZ X20, 0x3754180
	0x03754170 LDR X8, [X31 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC8D000
	005 Move W8, [X20+3519]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x9F2000
	012 Move X0, [X0+3432]
	013 Call 0x1C17CF4
	014 Move X0, 0x9C8000
	015 Move X0, [X0+3112]
	016 Call 0x1C17CF4
	017 Move X0, 0x9A0000
	018 Move X0, [X0+1728]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3519], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call String.IsNullOrEmpty, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {78}
	029 Move X8, 0x9C8000
	030 Move X8, [X8+3112]
	031 Move X20, 0x9A0000
	032 Move X1, X19
	033 Move X2, X31
	034 Move X8, [X8]
	035 Move X0, [X8+184]
	036 Move X20, [X20+1728]
	037 Call TypeTable.LookupTypeRegistration, X0, X1
	038 Move X8, [X20]
	039 Move X19, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X19
	046 Move X1, X31
	047 Move X2, X31
	048 Call Type.op_Equality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {58}
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X0, X31
	056 Move X30, [X31+32]
	057 Return X0
	058 Move X8, 0x9F2000
	059 Move X0, [X20]
	060 Move X8, [X8+3432]
	061 Move W9, [X0+224]
	062 Move X20, [X8]
	063 Compare W9, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X20
	067 Move X1, X31
	068 Call Type.GetTypeFromHandle, X0
	069 Move X1, X0
	070 Move X0, X19
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move W2, W31
	074 Move X3, X31
	075 Move X30, [X31+32]
	076 Call TypeHelpers.GetGenericTypeArgumentFromHierarchy, X0, X1, X2
	077 Return X0
	078 Move X0, 0x9A5000
	079 Move X0, [X0+1320]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X19, X0
	083 Move X0, 0x9F2000
	084 Move X0, [X0+2368]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Move X2, X31
	089 Call ArgumentNullException..ctor, X0, X1
	090 Move X0, 0x9F2000
	091 Move X0, [X0+3440]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Call 0x1C17DEC

Method: System.String GetExpectedControlLayoutName(System.String composite, System.String part)

Disassembly:
	0x03754174 MOVZ W9, 0x58
	0x03754178 MADD X8, X19, X9, X8
	0x0375417C LDR X20, [X8 + 0x30]
	0x03754180 MOV X0, X20
	0x03754184 MOV X1, X31
	0x03754188 BL 0x32277A8
	0x0375418C STR X28, [X31 + 0xA8]
	0x03754190 TBZ X0, 0x0, 0x37541BC
	0x03754194 MOV X11, X26
	0x03754198 MOV W10, W22
	0x0375419C MOV W9, W21
	0x037541A0 STR W31, [X31 + 0xD8]
	0x037541A4 MOV W28, W31
	0x037541A8 MOV W21, W31
	0x037541AC MOV W26, W31
	0x037541B0 MOVN W20, 0x0
	0x037541B4 MOVN W27, 0x0
	0x037541B8 B 0x3754734
	0x037541BC CMP X29, 0x0
	0x037541C0 STR W27, [X31 + 0x74]
	0x037541C4 CSET W27, EQ
	0x037541C8 CBNZ W23, 0x37542A8
	0x037541CC CBZ X29, 0x37542A8
	0x037541D0 LDR X8, [X31 + 0x50]
	0x037541D4 LDRB W8, [X8]
	0x037541D8 CBZ W8, 0x3754218
	0x037541DC ADRP X8, 0x9F0000
	0x037541E0 LDR X8, [X8 + 0xF60]
	0x037541E4 LDR X1, [X8]
	0x037541E8 LDR X0, [X31 + 0x50]
	0x037541EC ADD X8, X31, 0x180
	0x037541F0 BL 0x2432510
	0x037541F4 ADD X0, X31, 0x300
	0x037541F8 ADD X1, X31, 0x180
	0x037541FC MOVZ W2, 0x58
	0x03754200 BL 0x3EB1AC0
	0x03754204 ADD X0, X31, 0x300
	0x03754208 MOVZ W2, 0x1
	0x0375420C MOV X1, X28
	0x03754210 BL 0x3752E9C
	0x03754214 TBZ X0, 0x0, 0x3754194
	0x03754218 LDRB W8, [X31 + 0x3A0]
	0x0375421C CBZ W8, 0x375425C
	0x03754220 ADRP X8, 0x9F0000
	0x03754224 LDR X8, [X8 + 0xF60]
	0x03754228 LDR X1, [X8]
	0x0375422C ADD X8, X31, 0x180
	0x03754230 ADD X0, X31, 0x3A0
	0x03754234 BL 0x2432510
	0x03754238 ADD X0, X31, 0x300
	0x0375423C ADD X1, X31, 0x180
	0x03754240 MOVZ W2, 0x58
	0x03754244 BL 0x3EB1AC0
	0x03754248 ADD X0, X31, 0x300
	0x0375424C MOVZ W2, 0x1
	0x03754250 MOV X1, X28
	0x03754254 BL 0x3752E9C
	0x03754258 TBZ X0, 0x0, 0x3754194
	0x0375425C MOV X0, X29
	0x03754260 LDRB W8, [X0 + 0x50]!
	0x03754264 CBZ W8, 0x37542A4
	0x03754268 ADRP X8, 0x9F0000
	0x0375426C LDR X8, [X8 + 0xF60]
	0x03754270 LDR X1, [X8]
	0x03754274 ADD X8, X31, 0x180
	0x03754278 BL 0x2432510
	0x0375427C ADD X0, X31, 0x300
	0x03754280 ADD X1, X31, 0x180
	0x03754284 MOVZ W2, 0x58
	0x03754288 BL 0x3EB1AC0
	0x0375428C ADD X0, X31, 0x300
	0x03754290 MOVZ W2, 0x1
	0x03754294 MOV X1, X28
	0x03754298 BL 0x3752E9C
	0x0375429C EOR W27, W0, 0x1
	0x037542A0 B 0x37542A8
	0x037542A4 MOV W27, W31
	0x037542A8 STR X26, [X31 + 0x60]
	0x037542AC STP W22, W21, [X31 + 0x6C]
	0x037542B0 MOV W26, W31
	0x037542B4 MOV W21, W31
	0x037542B8 CBNZ W23, 0x37543B4
	0x037542BC TBNZ X27, 0x0, 0x37543B4
	0x037542C0 LDR X8, [X31 + 0xD0]
	0x037542C4 LDR W9, [X31 + 0x360]
	0x037542C8 LDRB W10, [X31 + 0x380]
	0x037542CC LDR W8, [X8 + 0x38]
	0x037542D0 ADD W21, W9, W8
	0x037542D4 CBZ W10, 0x3754378
	0x037542D8 ADRP X8, 0x9F0000
	0x037542DC LDR X8, [X8 + 0xFC0]
	0x037542E0 LDR X1, [X8]
	0x037542E4 ADD X0, X31, 0x380
	0x037542E8 BL 0x242CC48
	0x037542EC UBFM X8, X1, 0x20, 0x3F
	0x037542F0 CMP W8, 0x1
	0x037542F4 STR X0, [X31 + 0x2F0]
	0x037542F8 STR X1, [X31 + 0x2F8]
	0x037542FC B.LT 0x37543B0
	0x03754300 STR W21, [X31 + 0xD8]
	0x03754304 MOV W26, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC8D000
	006 Move W8, [X21+3520]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x9F2000
	014 Move X0, [X0+3448]
	015 Call 0x1C17CF4
	016 Move X0, 0x9C8000
	017 Move X0, [X0+3112]
	018 Call 0x1C17CF4
	019 Move X0, 0x9A0000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3520], W8
	024 Move X0, X20
	025 Move X1, X31
	026 Call String.IsNullOrEmpty, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {97}
	031 Move X0, X19
	032 Move X1, X31
	033 Call String.IsNullOrEmpty, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {104}
	038 Move X8, 0x9C8000
	039 Move X8, [X8+3112]
	040 Move X21, 0x9A0000
	041 Move X1, X20
	042 Move X2, X31
	043 Move X8, [X8]
	044 Move X0, [X8+184]
	045 Move X21, [X21+1728]
	046 Call TypeTable.LookupTypeRegistration, X0, X1
	047 Move X8, [X21]
	048 Move X20, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Type.op_Equality, X0, X1
	058 Move W8, W0
	059 Move X0, X31
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {92}
	064 Compare X20, 0
	065 JumpIfEqual {122}
	066 Move X8, [X20]
	067 Move W2, 21
	068 Move X0, X20
	069 Move X1, X19
	070 Move X9, [X8+1656]
	071 Move X3, [X8+1664]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move X1, X31
	074 Move X2, X31
	075 Move X19, X0
	076 Call FieldInfo.op_Equality, X0, X1
	077 Move W8, W0
	078 Move X0, X31
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {92}
	083 Move X8, 0x9F2000
	084 Move X8, [X8+3448]
	085 Move X0, X19
	086 Move W1, W31
	087 Move X2, [X8]
	088 Call 0x21A99DC, X0, X1
	089 Compare X0, 0
	090 JumpIfEqual {92}
	091 Move X0, [X0+24]
	092 Move X20, [X31+16]
	093 Move X19, [X31+24]
	094 Move X30, [X31+32]
	095 Move X21, [X31+40]
	096 Return X0
	097 Move X0, 0x9A5000
	098 Move X0, [X0+1320]
	099 Call 0x1C17D08
	100 Call 0x1C17F10
	101 Move X19, X0
	102 Move X0, 0x9F2000
	103 Move X0, [X0+2368]
	104 Move X0, 0x9A5000
	105 Move X0, [X0+1320]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0x9F2000
	110 Move X0, [X0+3456]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call ArgumentNullException..ctor, X0, X1
	116 Move X0, 0x9F2000
	117 Move X0, [X0+3464]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC
	122 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<System.String> GetPartNames(System.String composite)

Disassembly:
	0x03754308 MOV W21, W31
	0x0375430C ADRP X8, 0x9F1000
	0x03754310 LDR X8, [X8 + 0xE18]
	0x03754314 LDR X2, [X8]
	0x03754318 ADD X0, X31, 0x2F0
	0x0375431C MOV W1, W21
	0x03754320 BL 0x24FDB3C
	0x03754324 MOV X22, X0
	0x03754328 CBZ X0, 0x3754860
	0x0375432C MOV X0, X22
	0x03754330 MOV X1, X31
	0x03754334 BL 0x376EE00
	0x03754338 TBZ X0, 0x0, 0x3754360
	0x0375433C ADRP X8, 0x9F1000
	0x03754340 LDR X8, [X8 + 0xE08]
	0x03754344 LDR X4, [X8]
	0x03754348 ADD X3, X31, 0x360
	0x0375434C MOV X0, X22
	0x03754350 MOV X1, X20
	0x03754354 MOV W2, W31
	0x03754358 BL 0x21FFC70
	0x0375435C ADD W26, W0, W26
	0x03754360 LDR W8, [X31 + 0x2FC]
	0x03754364 ADD W21, W21, 0x1
	0x03754368 CMP W21, W8
	0x0375436C B.LT 0x375430C
	0x03754370 LDR W21, [X31 + 0xD8]
	0x03754374 B 0x37543B4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC8D000
	006 Move X21, 0x9F2000
	007 Move W8, [X20+3521]
	008 Move X21, [X21+3472]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9F2000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3521], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move TEMP, 1
	025 Not TEMP
	026 Move W8, TEMP
	027 Move X0, X31
	028 Move [X20+16], W8
	029 Call Environment.get_CurrentManagedThreadId
	030 Move [X20+32], W0
	031 Move [X20+48], X19
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0

Method: System.String GetDisplayFormatString(System.String composite)

Disassembly:
	0x037543AC B 0x37543B4
	0x037543B0 MOV W26, W31
	0x037543B4 STR W21, [X31 + 0xD8]
	0x037543B8 TBZ X27, 0x0, 0x37543E4
	0x037543BC LDR X8, [X31 + 0x60]
	0x037543C0 MOV W21, W31
	0x037543C4 MOV W28, W31
	0x037543C8 MOVN W27, 0x0
	0x037543CC STR X8, [X31 + 0xF0]
	0x037543D0 LDR W8, [X31 + 0x6C]
	0x037543D4 MOVN W20, 0x0
	0x037543D8 STR W8, [X31 + 0xEC]
	0x037543DC LDR W8, [X31 + 0x70]
	0x037543E0 B 0x3754650
	0x037543E4 LDR X8, [X31 + 0xE0]
	0x037543E8 MOVZ W9, 0x58
	0x037543EC MADD X8, X19, X9, X8
	0x037543F0 LDR X20, [X8 + 0x70]
	0x037543F4 CBNZ X20, 0x3754408
	0x037543F8 LDR X8, [X31 + 0xE0]
	0x037543FC MOVZ W9, 0x58
	0x03754400 MADD X8, X19, X9, X8
	0x03754404 LDR X20, [X8 + 0x40]
	0x03754408 MOV X0, X20
	0x0375440C MOV X1, X31
	0x03754410 BL 0x32277A8
	0x03754414 TBZ X0, 0x0, 0x3754428
	0x03754418 MOV W21, W31
	0x0375441C MOVN W27, 0x0
	0x03754420 CBNZ X29, 0x3754480
	0x03754424 B 0x375458C
	0x03754428 ADRP X8, 0x9C7000
	0x0375442C LDR X8, [X8 + 0xC40]
	0x03754430 LDR X8, [X8]
	0x03754434 LDR X8, [X8 + 0xB8]
	0x03754438 LDR X1, [X8]
	0x0375443C ADRP X8, 0x9F1000
	0x03754440 LDR X8, [X8 + 0xE00]
	0x03754444 LDR X7, [X8]
	0x03754448 LDR X0, [X31 + 0xD0]
	0x0375444C LDR X3, [X31 + 0x38]
	0x03754450 LDR X5, [X31 + 0xB0]
	0x03754454 MOV X2, X20
	0x03754458 MOV X4, X0
	0x0375445C MOV X6, X28
	0x03754460 BL 0x21FBC3C
	0x03754464 MOV W27, W0
	0x03754468 ADDS W31, W0, 0x1
	0x0375446C B.EQ 0x3754584
	0x03754470 LDR X8, [X31 + 0xD0]
	0x03754474 LDR W8, [X8]
	0x03754478 SUB W21, W8, W27
	0x0375447C CBZ X29, 0x375458C
	0x03754480 LDR X0, [X29 + 0x30]
	0x03754484 MOV X1, X31
	0x03754488 BL 0x32277A8
	0x0375448C TBNZ X0, 0x0, 0x37544EC
	0x03754490 ADRP X8, 0x9C7000
	0x03754494 LDR X8, [X8 + 0xC40]
	0x03754498 LDR X2, [X29 + 0x30]
	0x0375449C LDR X8, [X8]
	0x037544A0 LDR X8, [X8 + 0xB8]
	0x037544A4 LDR X1, [X8]
	0x037544A8 ADRP X8, 0x9F1000
	0x037544AC LDR X8, [X8 + 0xE00]
	0x037544B0 LDR X7, [X8]
	0x037544B4 LDR X0, [X31 + 0xD0]
	0x037544B8 LDR X3, [X31 + 0x38]
	0x037544BC LDR X5, [X31 + 0xB0]
	0x037544C0 MOV X6, X28
	0x037544C4 MOV X4, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC8D000
	005 Move W8, [X20+3522]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x9F2000
	012 Move X0, [X0+3480]
	013 Call 0x1C17CF4
	014 Move X0, 0x9C8000
	015 Move X0, [X0+3112]
	016 Call 0x1C17CF4
	017 Move X0, 0x9A0000
	018 Move X0, [X0+1728]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3522], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call String.IsNullOrEmpty, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {67}
	029 Move X8, 0x9C8000
	030 Move X8, [X8+3112]
	031 Move X20, 0x9A0000
	032 Move X1, X19
	033 Move X2, X31
	034 Move X8, [X8]
	035 Move X0, [X8+184]
	036 Move X20, [X20+1728]
	037 Call TypeTable.LookupTypeRegistration, X0, X1
	038 Move X8, [X20]
	039 Move X19, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X19
	046 Move X1, X31
	047 Move X2, X31
	048 Call Type.op_Equality, X0, X1
	049 Move W8, W0
	050 Move X0, X31
	051 Move TEMP, X8
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {63}
	055 Move X8, 0x9F2000
	056 Move X8, [X8+3480]
	057 Move X0, X19
	058 Move X1, [X8]
	059 Call 0x21A991C, X0
	060 Compare X0, 0
	061 JumpIfEqual {63}
	062 Move X0, [X0+16]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Return X0
	067 Move X0, 0x9A5000
	068 Move X0, [X0+1320]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X19, X0
	072 Move X0, 0x9F2000
	073 Move X0, [X0+2368]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Move X2, X31
	078 Call ArgumentNullException..ctor, X0, X1
	079 Move X0, 0x9F2000
	080 Move X0, [X0+3488]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X19
	084 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x037544C8 BL 0x21FBC3C
	0x037544CC ADDS W31, W0, 0x1

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

