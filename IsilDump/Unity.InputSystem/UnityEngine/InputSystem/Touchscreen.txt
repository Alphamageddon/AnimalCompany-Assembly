Type: UnityEngine.InputSystem.Touchscreen

Method: UnityEngine.InputSystem.Controls.TouchControl get_primaryTouch()

Disassembly:
	0x037C0A28 LDP X22, X21, [X31 + 0x10]
	0x037C0A2C MOV W1, W31

ISIL:
	001 Move X0, [X0+416]
	002 Return X0

Method: System.Void set_primaryTouch(UnityEngine.InputSystem.Controls.TouchControl value)

Disassembly:
	0x037C0A30 MOV X2, X31
	0x037C0A34 LDP X30, X23, [X31], #0x30

ISIL:
	001 Move [X0+416], X1
	002 Return 

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Controls.TouchControl> get_touches()

Disassembly:
	0x037C0A38 B 0x37FFFB8
	0x037C0A3C B 0x37BFFF8
	0x037C0A40 B 0x37C0314

ISIL:
	001 Move X8, [X0+424]
	002 Move X1, [X0+432]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_touches(UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Controls.TouchControl> value)

Disassembly:
	0x037C0A44 SUB X31, X31, 0x70
	0x037C0A48 STP X30, X2, [X31 + 0x10]

ISIL:
	001 Move [X0+424], X1
	002 Move [X0+432], X2
	003 Return 

Method: UnityEngine.InputSystem.Controls.TouchControl[] get_touchControlArray()

Disassembly:
	0x037C0A4C STP X28, X27, [X31 + 0x20]
	0x037C0A50 STP X26, X25, [X31 + 0x30]

ISIL:
	001 Move X0, [X0+424]
	002 Return X0

Method: System.Void set_touchControlArray(UnityEngine.InputSystem.Controls.TouchControl[] value)

Disassembly:
	0x037C0A54 STP X24, X23, [X31 + 0x40]
	0x037C0A58 STP X22, X21, [X31 + 0x50]
	0x037C0A5C STP X20, X19, [X31 + 0x60]
	0x037C0A60 ADRP X23, 0xC21000
	0x037C0A64 ADRP X22, 0x986000
	0x037C0A68 LDRB W8, [X23 + 0x1B3]
	0x037C0A6C LDR X22, [X22 + 0xD50]
	0x037C0A70 MOV X19, X3
	0x037C0A74 MOV X21, X1
	0x037C0A78 MOV X20, X0
	0x037C0A7C TBNZ X8, 0x0, 0x37C0AD0
	0x037C0A80 ADRP X0, 0x987000
	0x037C0A84 LDR X0, [X0 + 0xFD0]
	0x037C0A88 BL 0x1C16CF4
	0x037C0A8C ADRP X0, 0x986000
	0x037C0A90 LDR X0, [X0 + 0xD50]
	0x037C0A94 BL 0x1C16CF4
	0x037C0A98 ADRP X0, 0x95B000
	0x037C0A9C LDR X0, [X0 + 0xD18]
	0x037C0AA0 BL 0x1C16CF4
	0x037C0AA4 ADRP X0, 0x987000
	0x037C0AA8 LDR X0, [X0 + 0xFB8]
	0x037C0AAC BL 0x1C16CF4
	0x037C0AB0 ADRP X0, 0x987000
	0x037C0AB4 LDR X0, [X0 + 0xFC0]
	0x037C0AB8 BL 0x1C16CF4
	0x037C0ABC ADRP X0, 0x986000
	0x037C0AC0 LDR X0, [X0 + 0xC8]
	0x037C0AC4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xC22000
	008 Move X21, 0x988000
	009 Move W8, [X22+429]
	010 Move X21, [X21+4000]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x988000
	018 Move X0, [X0+4000]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+429], W8
	022 Move X2, [X21]
	023 Add X0, X31, 0
	024 Move X1, X20
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Call ReadOnlyArray`1<Object>..ctor, X0, X1
	028 Move V0, [X31]
	029 Add X8, X19, 424
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 Move [X8], V0
	036 Add X31, X31, 64
	037 Return 

Method: UnityEngine.InputSystem.Touchscreen get_current()

Disassembly:
	0x037C0AC8 MOVZ W8, 0x1
	0x037C0ACC STRB W8, [X23 + 0x1B3]
	0x037C0AD0 LDR X1, [X22]
	0x037C0AD4 ADD X0, X31, 0x18
	0x037C0AD8 STP X31, X31, [X31]
	0x037C0ADC BL 0x2208050
	0x037C0AE0 TBZ X0, 0x0, 0x37C0C4C
	0x037C0AE4 LDR X0, [X31 + 0x18]
	0x037C0AE8 MOV X1, X31
	0x037C0AEC BL 0x38029AC
	0x037C0AF0 CBZ X0, 0x37C0CC0
	0x037C0AF4 LDR W23, [X0 + 0x14]
	0x037C0AF8 MOV X22, X0
	0x037C0AFC MOV X0, X31
	0x037C0B00 BL 0x37FFEC0
	0x037C0B04 CMP W23, W0
	0x037C0B08 B.NE 0x37C0C4C
	0x037C0B0C CBZ X21, 0x37C0B6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC22000
	005 Move X20, 0x987000
	006 Move W8, [X19+430]
	007 Move X20, [X20+3416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x987000
	013 Move X0, [X0+3416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+430], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_current(UnityEngine.InputSystem.Touchscreen value)

Disassembly:
	0x037C0B10 ADRP X8, 0x987000
	0x037C0B14 LDR X8, [X8 + 0xFD0]
	0x037C0B18 MOV X0, X21
	0x037C0B1C LDR X1, [X8]
	0x037C0B20 BL 0x21FD4C0
	0x037C0B24 CBZ X0, 0x37C0C50
	0x037C0B28 LDR X8, [X0 + 0x80]
	0x037C0B2C CMP X8, X20
	0x037C0B30 B.NE 0x37C0C4C
	0x037C0B34 LDR X8, [X20 + 0x1A0]
	0x037C0B38 CMP X8, X0
	0x037C0B3C B.NE 0x37C0C4C
	0x037C0B40 ADRP X8, 0x95B000
	0x037C0B44 LDR X8, [X8 + 0xD18]
	0x037C0B48 LDR W21, [X0 + 0x14]
	0x037C0B4C LDR X8, [X8]
	0x037C0B50 LDR W9, [X8 + 0xE0]
	0x037C0B54 CBNZ W9, 0x37C0B60
	0x037C0B58 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC22000
	006 Move X21, 0x987000
	007 Move W8, [X20+431]
	008 Move X21, [X21+3416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x987000
	015 Move X0, [X0+3416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+431], W8
	019 Move X8, [X21]
	020 Move X8, [X8+184]
	021 Move [X8], X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 

Method: System.Void MakeCurrent()

Disassembly:
	0x037C0B5C BL 0x1C16DFC
	0x037C0B60 LDR W8, [X20 + 0x14]
	0x037C0B64 SUB W8, W21, W8
	0x037C0B68 B 0x37C0CB4
	0x037C0B6C MOV X0, X20
	0x037C0B70 MOV X1, X31
	0x037C0B74 BL 0x3772640
	0x037C0B78 ADD X8, X20, 0x1A8
	0x037C0B7C LDR V0, [X8]
	0x037C0B80 ADRP X8, 0x987000
	0x037C0B84 LDR X8, [X8 + 0xFC0]
	0x037C0B88 MOV X21, X0
	0x037C0B8C ADD X0, X31, 0x0
	0x037C0B90 MOV W1, W31
	0x037C0B94 LDR X2, [X8]
	0x037C0B98 STR V0, [X31]
	0x037C0B9C BL 0x24FDB3C
	0x037C0BA0 CBZ X0, 0x37C0CC0
	0x037C0BA4 ADRP X23, 0x95B000
	0x037C0BA8 LDR X23, [X23 + 0xD18]
	0x037C0BAC LDR W27, [X0 + 0x14]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call Pointer.MakeCurrent, X0
	007 Move X20, 0xC22000
	008 Move W8, [X20+567]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x987000
	012 Move X0, [X0+3416]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+567], W8
	016 Move X8, 0x987000
	017 Move X8, [X8+3416]
	018 Move X8, [X8]
	019 Move X8, [X8+184]
	020 Move [X8], X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void OnRemoved()

Disassembly:
	0x037C0BB0 LDR X8, [X23]
	0x037C0BB4 LDR W9, [X8 + 0xE0]
	0x037C0BB8 CBNZ W9, 0x37C0BC4
	0x037C0BBC MOV X0, X8
	0x037C0BC0 BL 0x1C16DFC
	0x037C0BC4 MOV X0, X22
	0x037C0BC8 MOV X1, X31
	0x037C0BCC BL 0x3807298
	0x037C0BD0 CBZ X0, 0x37C0CC0
	0x037C0BD4 LDP X9, X8, [X20 + 0x1A8]
	0x037C0BD8 LDR W24, [X0]
	0x037C0BDC LDRB W25, [X0 + 0x20]
	0x037C0BE0 UBFM X26, X8, 0x20, 0x3F
	0x037C0BE4 CMP W26, 0x1
	0x037C0BE8 STP X9, X8, [X31]
	0x037C0BEC B.LT 0x37C0C4C
	0x037C0BF0 MOV W22, W31
	0x037C0BF4 ADD X21, X21, X27
	0x037C0BF8 MOVZ W27, 0x1
	0x037C0BFC MOVZ W28, 0x26
	0x037C0C00 CBZ X21, 0x37C0CC0
	0x037C0C04 LDR W8, [X21]
	0x037C0C08 CMP W8, W24
	0x037C0C0C B.EQ 0x37C0C70
	0x037C0C10 MOV X0, X21
	0x037C0C14 MOV X1, X31
	0x037C0C18 BL 0x37FFF1C
	0x037C0C1C TBNZ X0, 0x0, 0x37C0C34
	0x037C0C20 CMP W25, 0x5
	0x037C0C24 B.HI 0x37C0C34
	0x037C0C28 LSLV W8, W27, W25
	0x037C0C2C ANDS W31, W8, W28, 0x0
	0x037C0C30 B.NE 0x37C0C70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call Pointer.OnRemoved, X0
	007 Move X20, 0xC22000
	008 Move W8, [X20+568]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x987000
	012 Move X0, [X0+3416]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+568], W8
	016 Move X20, 0x987000
	017 Move X20, [X20+3416]
	018 Move X8, [X20]
	019 Move X8, [X8+184]
	020 Move X9, [X8]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X19, 0xC22000
	023 Move W9, [X19+567]
	024 Compare W9, 0
	025 JumpIfNotEqual {32}
	026 Move X0, X20
	027 Call 0x1C17CF4
	028 Move X8, [X20]
	029 Move W9, 1
	030 Move [X19+567], W9
	031 Move X8, [X8+184]
	032 Move [X8], X31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x037C0C34 MOV W0, W31
	0x037C0C38 SUB W22, W22, 0x38
	0x037C0C3C SUBS X26, X26, 0x1
	0x037C0C40 ADD X21, X21, 0x38
	0x037C0C44 B.NE 0x37C0C00
	0x037C0C48 B 0x37C0C50
	0x037C0C4C MOV W0, W31
	0x037C0C50 LDP X20, X19, [X31 + 0x60]
	0x037C0C54 LDP X22, X21, [X31 + 0x50]
	0x037C0C58 LDP X24, X23, [X31 + 0x40]
	0x037C0C5C LDP X26, X25, [X31 + 0x30]
	0x037C0C60 LDP X28, X27, [X31 + 0x20]
	0x037C0C64 LDR X30, [X31 + 0x10]
	0x037C0C68 ADD X31, X31, 0x70
	0x037C0C6C RET
	0x037C0C70 LDR X21, [X20 + 0x1A0]
	0x037C0C74 CBZ X21, 0x37C0CC0
	0x037C0C78 LDR X0, [X23]
	0x037C0C7C MOV X8, X21
	0x037C0C80 LDR W9, [X0 + 0xE0]
	0x037C0C84 CBNZ W9, 0x37C0C94
	0x037C0C88 BL 0x1C16DFC
	0x037C0C8C LDR X8, [X20 + 0x1A0]
	0x037C0C90 CBZ X8, 0x37C0CC0
	0x037C0C94 LDR W21, [X21 + 0x14]
	0x037C0C98 ADD X0, X8, 0x10
	0x037C0C9C MOV X1, X31
	0x037C0CA0 BL 0x3800B6C
	0x037C0CA4 LDR W8, [X20 + 0x14]
	0x037C0CA8 ADD W9, W0, W21
	0x037C0CAC SUB W8, W9, W8
	0x037C0CB0 SUB W8, W8, W22
	0x037C0CB4 MOVZ W0, 0x1
	0x037C0CB8 STR W8, [X19]
	0x037C0CBC B 0x37C0C50
	0x037C0CC0 BL 0x1C16F20
	0x037C0CC4 SUB W8, W0, 0x1
	0x037C0CC8 CMP W8, 0x2
	0x037C0CCC CSET W8, CC
	0x037C0CD0 CMP W0, 0x5
	0x037C0CD4 CSET W9, EQ
	0x037C0CD8 ORR W0, W9, W8, 0x0
	0x037C0CDC RET
	0x037C0CE0 SUB X31, X31, 0xA0
	0x037C0CE4 STP X29, X30, [X31 + 0x40]
	0x037C0CE8 STP X28, X27, [X31 + 0x50]
	0x037C0CEC STP X26, X25, [X31 + 0x60]
	0x037C0CF0 STP X24, X23, [X31 + 0x70]
	0x037C0CF4 STP X22, X21, [X31 + 0x80]
	0x037C0CF8 STP X20, X19, [X31 + 0x90]
	0x037C0CFC MRS X23, 0xC000
	0x037C0D00 LDR X8, [X23 + 0x28]
	0x037C0D04 ADRP X24, 0xC21000
	0x037C0D08 ADRP X21, 0x987000
	0x037C0D0C ADRP X22, 0x987000
	0x037C0D10 STR X8, [X31 + 0x38]
	0x037C0D14 ADRP X19, 0x987000
	0x037C0D18 LDRB W8, [X24 + 0x1B4]
	0x037C0D1C LDR X21, [X21 + 0xFD8]
	0x037C0D20 LDR X22, [X22 + 0xFE0]
	0x037C0D24 LDR X19, [X19 + 0xFE8]
	0x037C0D28 MOV X20, X0
	0x037C0D2C TBNZ X8, 0x0, 0x37C0DA4
	0x037C0D30 ADRP X0, 0x95B000
	0x037C0D34 LDR X0, [X0 + 0xD18]
	0x037C0D38 BL 0x1C16CF4
	0x037C0D3C ADRP X0, 0x987000
	0x037C0D40 LDR X0, [X0 + 0xFF0]
	0x037C0D44 BL 0x1C16CF4
	0x037C0D48 ADRP X0, 0x987000
	0x037C0D4C LDR X0, [X0 + 0xFE8]
	0x037C0D50 BL 0x1C16CF4
	0x037C0D54 ADRP X0, 0x95B000
	0x037C0D58 LDR X0, [X0 + 0xD68]
	0x037C0D5C BL 0x1C16CF4
	0x037C0D60 ADRP X0, 0x987000
	0x037C0D64 LDR X0, [X0 + 0xFE0]
	0x037C0D68 BL 0x1C16CF4
	0x037C0D6C ADRP X0, 0x987000
	0x037C0D70 LDR X0, [X0 + 0xFB8]
	0x037C0D74 BL 0x1C16CF4
	0x037C0D78 ADRP X0, 0x987000
	0x037C0D7C LDR X0, [X0 + 0xFC0]
	0x037C0D80 BL 0x1C16CF4
	0x037C0D84 ADRP X0, 0x987000
	0x037C0D88 LDR X0, [X0 + 0xFD8]
	0x037C0D8C BL 0x1C16CF4
	0x037C0D90 ADRP X0, 0x986000
	0x037C0D94 LDR X0, [X0 + 0xC8]
	0x037C0D98 BL 0x1C16CF4
	0x037C0D9C MOVZ W8, 0x1
	0x037C0DA0 STRB W8, [X24 + 0x1B4]
	0x037C0DA4 ADRP X24, 0x95B000
	0x037C0DA8 LDR X24, [X24 + 0xD68]
	0x037C0DAC MOV X0, X20
	0x037C0DB0 MOV X1, X31
	0x037C0DB4 STP X31, X31, [X31 + 0x10]
	0x037C0DB8 STP X31, X31, [X31]
	0x037C0DBC BL 0x3772640
	0x037C0DC0 LDR X8, [X21]
	0x037C0DC4 MOV X21, X0
	0x037C0DC8 MOV X0, X8
	0x037C0DCC BL 0x225A48C
	0x037C0DD0 LDR X4, [X22]
	0x037C0DD4 MOV W1, W0
	0x037C0DD8 ADD X0, X31, 0x10
	0x037C0DDC MOVZ W2, 0x2
	0x037C0DE0 MOVZ W3, 0x1
	0x037C0DE4 BL 0x23C9B94
	0x037C0DE8 LDP X0, X1, [X31 + 0x10]
	0x037C0DEC LDR X2, [X19]
	0x037C0DF0 BL 0x2222688
	0x037C0DF4 LDR W2, [X31 + 0x18]
	0x037C0DF8 LDR W3, [X20 + 0xE0]
	0x037C0DFC MOV X19, X0
	0x037C0E00 STP X31, X31, [X31 + 0x20]
	0x037C0E04 STR W31, [X31 + 0x30]
	0x037C0E08 MOVZ W1, 0x4154
	0x037C0E0C ADD X0, X31, 0x20
	0x037C0E10 FMOV D0, -1
	0x037C0E14 MOVK W1, 0x53540000
	0x037C0E18 MOV X4, X31
	0x037C0E1C BL 0x3800BC8
	0x037C0E20 CBZ X19, 0x37C100C
	0x037C0E24 LDR W8, [X31 + 0x30]
	0x037C0E28 LDR V0, [X31 + 0x2]
	0x037C0E2C STR W8, [X19 + 0x10]
	0x037C0E30 STR V0, [X19]
	0x037C0E34 LDR X8, [X20 + 0x1A0]
	0x037C0E38 CBZ X8, 0x37C1010
	0x037C0E3C ADRP X27, 0x95B000
	0x037C0E40 LDR X27, [X27 + 0xD18]
	0x037C0E44 LDR W22, [X8 + 0x14]
	0x037C0E48 LDR X0, [X27]
	0x037C0E4C LDR W9, [X0 + 0xE0]
	0x037C0E50 CBNZ W9, 0x37C0E58
	0x037C0E54 BL 0x1C16DFC
	0x037C0E58 ADD X22, X22, X21
	0x037C0E5C LDRB W8, [X22 + 0x20]
	0x037C0E60 ADRP X25, 0x987000
	0x037C0E64 LDR X25, [X25 + 0xFF0]
	0x037C0E68 CMP W8, 0x5
	0x037C0E6C B.HI 0x37C0ED8
	0x037C0E70 MOVZ W9, 0x1
	0x037C0E74 LSLV W8, W9, W8
	0x037C0E78 MOVZ W9, 0x26
	0x037C0E7C ANDS W31, W8, W9, 0x0
	0x037C0E80 B.EQ 0x37C0ED8
	0x037C0E84 MOV X0, X19
	0x037C0E88 MOV X1, X31
	0x037C0E8C BL 0x3807298
	0x037C0E90 MOVZ W2, 0x38
	0x037C0E94 MOV X1, X22
	0x037C0E98 MOV X3, X31
	0x037C0E9C BL 0x3BFF954
	0x037C0EA0 MOV X0, X19
	0x037C0EA4 MOV X1, X31
	0x037C0EA8 BL 0x3807298
	0x037C0EAC MOVZ W1, 0x4
	0x037C0EB0 MOV X2, X31
	0x037C0EB4 BL 0x37FA840
	0x037C0EB8 LDR X8, [X20 + 0x1A0]
	0x037C0EBC CBZ X8, 0x37C1018
	0x037C0EC0 LDR X0, [X8 + 0x1A8]
	0x037C0EC4 LDR X4, [X25]
	0x037C0EC8 MOVZ W1, 0x4
	0x037C0ECC MOV W2, W31
	0x037C0ED0 MOV X3, X19
	0x037C0ED4 BL 0x2209500
	0x037C0ED8 ADRP X22, 0x987000
	0x037C0EDC LDR X22, [X22 + 0xFC0]
	0x037C0EE0 ADD X26, X20, 0x1A8
	0x037C0EE4 LDR V0, [X26]
	0x037C0EE8 LDR X2, [X22]
	0x037C0EEC STR V0, [X31]
	0x037C0EF0 ADD X0, X31, 0x0
	0x037C0EF4 MOV W1, W31
	0x037C0EF8 BL 0x24FDB3C
	0x037C0EFC CBZ X0, 0x37C1014
	0x037C0F00 LDR X8, [X27]
	0x037C0F04 LDR W28, [X0 + 0x14]
	0x037C0F08 LDR W9, [X8 + 0xE0]
	0x037C0F0C CBNZ W9, 0x37C0F18
	0x037C0F10 MOV X0, X8
	0x037C0F14 BL 0x1C16DFC
	0x037C0F18 LDP X9, X8, [X20 + 0x1A8]
	0x037C0F1C UBFM X27, X8, 0x20, 0x3F
	0x037C0F20 CMP W27, 0x1
	0x037C0F24 STP X9, X8, [X31]
	0x037C0F28 B.LT 0x37C0FCC
	0x037C0F2C MOV X20, X31
	0x037C0F30 ADD X21, X21, X28
	0x037C0F34 MOVZ W28, 0x1
	0x037C0F38 MOVZ W29, 0x26
	0x037C0F3C LDRB W8, [X21 + 0x20]
	0x037C0F40 CMP W8, 0x5
	0x037C0F44 B.HI 0x37C0FBC
	0x037C0F48 LSLV W8, W28, W8
	0x037C0F4C ANDS W31, W8, W29, 0x0
	0x037C0F50 B.EQ 0x37C0FBC
	0x037C0F54 MOV X0, X19
	0x037C0F58 MOV X1, X31
	0x037C0F5C BL 0x3807298
	0x037C0F60 MOVZ W2, 0x38
	0x037C0F64 MOV X1, X21
	0x037C0F68 MOV X3, X31
	0x037C0F6C BL 0x3BFF954
	0x037C0F70 MOV X0, X19
	0x037C0F74 MOV X1, X31
	0x037C0F78 BL 0x3807298
	0x037C0F7C MOVZ W1, 0x4
	0x037C0F80 MOV X2, X31
	0x037C0F84 BL 0x37FA840
	0x037C0F88 LDR V0, [X26]
	0x037C0F8C LDR X2, [X22]
	0x037C0F90 STR V0, [X31]
	0x037C0F94 ADD X0, X31, 0x0
	0x037C0F98 MOV W1, W20
	0x037C0F9C BL 0x24FDB3C
	0x037C0FA0 CBZ X0, 0x37C1008
	0x037C0FA4 LDR X0, [X0 + 0x1A8]
	0x037C0FA8 LDR X4, [X25]
	0x037C0FAC MOVZ W1, 0x4
	0x037C0FB0 MOV W2, W31
	0x037C0FB4 MOV X3, X19
	0x037C0FB8 BL 0x2209500
	0x037C0FBC ADD X20, X20, 0x1
	0x037C0FC0 CMP X27, X20
	0x037C0FC4 ADD X21, X21, 0x38
	0x037C0FC8 B.NE 0x37C0F3C
	0x037C0FCC LDR X1, [X24]
	0x037C0FD0 ADD X0, X31, 0x10
	0x037C0FD4 BL 0x23C9DBC
	0x037C0FD8 LDR X8, [X23 + 0x28]
	0x037C0FDC LDR X9, [X31 + 0x38]
	0x037C0FE0 CMP X8, X9
	0x037C0FE4 B.NE 0x37C101C
	0x037C0FE8 LDP X20, X19, [X31 + 0x90]
	0x037C0FEC LDP X22, X21, [X31 + 0x80]
	0x037C0FF0 LDP X24, X23, [X31 + 0x70]
	0x037C0FF4 LDP X26, X25, [X31 + 0x60]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X29
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move X22, 0xC22000
	015 Move X20, 0x988000
	016 Move X21, 0x988000
	017 Move W8, [X22+432]
	018 Move X20, [X20+2416]
	019 Move X21, [X21+4008]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {54}
	025 Move X0, 0x960000
	026 Move X0, [X0+72]
	027 Call 0x1C17CF4
	028 Move X0, 0x960000
	029 Move X0, [X0+80]
	030 Call 0x1C17CF4
	031 Move X0, 0x960000
	032 Move X0, [X0+88]
	033 Call 0x1C17CF4
	034 Move X0, 0x988000
	035 Move X0, [X0+4008]
	036 Call 0x1C17CF4
	037 Move X0, 0x960000
	038 Move X0, [X0+96]
	039 Call 0x1C17CF4
	040 Move X0, 0x988000
	041 Move X0, [X0+4000]
	042 Call 0x1C17CF4
	043 Move X0, 0x988000
	044 Move X0, [X0+2336]
	045 Call 0x1C17CF4
	046 Move X0, 0x988000
	047 Move X0, [X0+2400]
	048 Call 0x1C17CF4
	049 Move X0, 0x988000
	050 Move X0, [X0+2416]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X22+432], W8
	054 Move X0, X19
	055 Move X1, X31
	056 Move [X31+48], X31
	057 Move [X31+56], X31
	058 Move [X31+64], X31
	059 Call Pointer.FinishSetup, X0
	060 Move X1, [X20]
	061 Move X2, [X21]
	062 Move X0, X19
	063 Call 0x21FD754, X0, X1
	064 Move [X19+416], X0
	065 Compare X0, 0
	066 JumpIfEqual {207}
	067 Move X27, 0x960000
	068 Move X22, 0x960000
	069 Move X24, 0x960000
	070 Move X25, 0x988000
	071 Move X27, [X27+96]
	072 Move X22, [X22+80]
	073 Move X24, [X24+88]
	074 Move X25, [X25+2400]
	075 Move X8, [X0+376]
	076 Move X28, 0x988000
	077 Move X23, 0x988000
	078 Move X26, 0x960000
	079 Move X28, [X28+2336]
	080 Move X23, [X23+4000]
	081 Move X26, [X26+72]
	082 Move X0, X19
	083 Move X1, X31
	084 Move [X19+408], X8
	085 Call InputControl.get_children, X0
	086 Move X9, [X27]
	087 Move [X31+32], X0
	088 Move [X31+40], X1
	089 Add X8, X31, 0
	090 Add X0, X31, 32
	091 Move X1, X9
	092 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	093 Move V0, [X31]
	094 Move X8, [X31+16]
	095 Move W29, W31
	096 Move [X31+3], V0
	097 Move [X31+64], X8
	098 Move X1, [X22]
	099 Add X0, X31, 48
	100 Call Enumerator<Object>.MoveNext, X0
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {120}
	105 Move X1, [X24]
	106 Add X0, X31, 48
	107 Call Enumerator<Object>.get_Current, X0
	108 Compare X0, 0
	109 JumpIfEqual {98}
	110 Move X9, [X0]
	111 Move X8, [X25]
	112 Move W11, [X9+304]
	113 Move W10, [X8+304]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X9, [X9+200]
	116 Add X9, X9, X10
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Add W29, W29, 1
	120 Move X1, [X26]
	121 Add X0, X31, 48
	122 Call Enumerator<Object>.Dispose, X0
	123 Move X0, [X28]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction CSET not yet implemented."
	126 Subtract W1, W29, W8
	127 Call 0x1C17D6C
	128 Move X20, X0
	129 Move X0, X19
	130 Move X1, X31
	131 Call InputControl.get_children, X0
	132 Move X9, [X27]
	133 Move [X31+32], X0
	134 Move [X31+40], X1
	135 Add X8, X31, 0
	136 Add X0, X31, 32
	137 Move X1, X9
	138 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	139 Move V0, [X31]
	140 Move X8, [X31+16]
	141 Move W27, W31
	142 Move [X31+3], V0
	143 Move [X31+64], X8
	144 Move X1, [X22]
	145 Add X0, X31, 48
	146 Call Enumerator<Object>.MoveNext, X0
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {181}
	151 Move X1, [X24]
	152 Add X0, X31, 48
	153 Call Enumerator<Object>.get_Current, X0
	154 Move X8, [X19+416]
	155 Move X21, X0
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Compare X21, 0
	158 JumpIfEqual {144}
	159 Move X9, [X21]
	160 Move X8, [X25]
	161 Move W11, [X9+304]
	162 Move W10, [X8+304]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X9, [X9+200]
	165 Add X9, X9, X10
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Compare X20, 0
	169 JumpIfEqual {209}
	170 Move X8, [X20]
	171 Move X1, [X8+64]
	172 Move X0, X21
	173 Call 0x1C17E00
	174 Compare X0, 0
	175 JumpIfEqual {210}
	176 Move W8, [X20+24]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Add X8, X20, W27
	179 Add W27, W27, 1
	180 Move [X8+32], X21
	181 Move X1, [X26]
	182 Add X0, X31, 48
	183 Call Enumerator<Object>.Dispose, X0
	184 Move X2, [X23]
	185 Add X0, X31, 0
	186 Move X1, X20
	187 Move [X31], X31
	188 Move [X31+8], X31
	189 Call ReadOnlyArray`1<Object>..ctor, X0, X1
	190 Move V0, [X31]
	191 Add X8, X19, 424
	192 Move X20, [X31+160]
	193 Move X19, [X31+168]
	194 Move X22, [X31+144]
	195 Move X21, [X31+152]
	196 Move X24, [X31+128]
	197 Move X23, [X31+136]
	198 Move X26, [X31+112]
	199 Move X25, [X31+120]
	200 Move X28, [X31+96]
	201 Move X27, [X31+104]
	202 Move X29, [X31+80]
	203 Move X30, [X31+88]
	204 Move [X8], V0
	205 Add X31, X31, 176
	206 Return 
	207 Call 0x1C17F20
	208 Call 0x1C17F28
	209 Call 0x1C17F20
	210 Call 0x1C17F44
	211 Move X1, X31
	212 Call 0x1C17DEC
	213 Move X21, X0
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X0, X21
	216 Call 0x3EB2AD0
	217 Move X22, [X0]
	218 Call 0x3EB2AE0
	219 Move X1, [X26]
	220 Add X0, X31, 48
	221 Call Enumerator<Object>.Dispose, X0
	222 Compare X22, 0
	223 JumpIfEqual {184}
	224 Move X0, X22
	225 Call 0x1C17F18
	226 Move X22, X31
	227 Move X21, X0
	228 Move X1, [X26]
	229 Add X0, X31, 48
	230 Call Enumerator<Object>.Dispose, X0
	231 Compare X22, 0
	232 JumpIfEqual {255}
	233 Move X0, X22
	234 Call 0x1C17F18
	235 Move X21, X0
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X0, X21
	238 Call 0x3EB2AD0
	239 Move X20, [X0]
	240 Call 0x3EB2AE0
	241 Move X1, [X26]
	242 Add X0, X31, 48
	243 Call Enumerator<Object>.Dispose, X0
	244 Compare X20, 0
	245 JumpIfEqual {123}
	246 Move X0, X20
	247 Call 0x1C17F18
	248 Move X20, X31
	249 Move X21, X0
	250 Move X1, [X26]
	251 Add X0, X31, 48
	252 Call Enumerator<Object>.Dispose, X0
	253 Compare X20, 0
	254 JumpIfNotEqual {257}
	255 Move X0, X21
	256 Call 0x1D2D690
	257 Move X0, X20
	258 Call 0x1C17F18
	259 Call 0x1991590

Method: System.Void OnNextUpdate()

Disassembly:
	0x037C0FF8 LDP X28, X27, [X31 + 0x50]
	0x037C0FFC LDP X29, X30, [X31 + 0x40]
	0x037C1000 ADD X31, X31, 0xA0
	0x037C1004 RET
	0x037C1008 BL 0x1C16F20
	0x037C100C BL 0x1C16F20
	0x037C1010 BL 0x1C16F20
	0x037C1014 BL 0x1C16F20
	0x037C1018 BL 0x1C16F20
	0x037C101C BL 0x3EB1B20
	0x037C1020 B 0x37C1060
	0x037C1024 B 0x37C1060
	0x037C1028 B 0x37C1060
	0x037C102C B 0x37C1060
	0x037C1030 B 0x37C1060
	0x037C1034 B 0x37C1060
	0x037C1038 B 0x37C1060
	0x037C103C B 0x37C1060
	0x037C1040 B 0x37C1060
	0x037C1044 B 0x37C1060
	0x037C1048 B 0x37C1060
	0x037C104C B 0x37C1060
	0x037C1050 B 0x37C1060
	0x037C1054 B 0x37C1060
	0x037C1058 B 0x37C1060
	0x037C105C B 0x37C1060
	0x037C1060 MOV X19, X0
	0x037C1064 CMP W1, 0x1
	0x037C1068 B.NE 0x37C1094
	0x037C106C MOV X0, X19
	0x037C1070 BL 0x3EB1AD0
	0x037C1074 LDR X20, [X0]
	0x037C1078 BL 0x3EB1AE0
	0x037C107C LDR X1, [X24]
	0x037C1080 ADD X0, X31, 0x10
	0x037C1084 BL 0x23C9DBC
	0x037C1088 CBZ X20, 0x37C0FD8
	0x037C108C MOV X0, X20
	0x037C1090 BL 0x1C16F18
	0x037C1094 MOV X20, X31
	0x037C1098 B 0x37C10A0
	0x037C109C MOV X19, X0
	0x037C10A0 LDR X1, [X24]
	0x037C10A4 ADD X0, X31, 0x10
	0x037C10A8 BL 0x23C9DBC
	0x037C10AC CBNZ X20, 0x37C10B8
	0x037C10B0 MOV X0, X19
	0x037C10B4 BL 0x1D2C690
	0x037C10B8 MOV X0, X20
	0x037C10BC BL 0x1C16F18
	0x037C10C0 BL 0x1990590
	0x037C10C4 SUB X31, X31, 0x30
	0x037C10C8 STP X30, X21, [X31 + 0x10]
	0x037C10CC STP X20, X19, [X31 + 0x20]
	0x037C10D0 MOVZ W19, 0x4154
	0x037C10D4 STP X1, X0, [X31]
	0x037C10D8 ADD X0, X31, 0x8
	0x037C10DC MOV X1, X31
	0x037C10E0 MOVK W19, 0x53540000
	0x037C10E4 BL 0x37F80B4
	0x037C10E8 CMP W0, W19
	0x037C10EC B.NE 0x37C11C4
	0x037C10F0 ADD X0, X31, 0x0
	0x037C10F4 MOV X1, X31
	0x037C10F8 BL 0x37F80B4
	0x037C10FC CMP W0, W19
	0x037C1100 B.NE 0x37C11C4
	0x037C1104 LDR X0, [X31 + 0x8]
	0x037C1108 MOV X1, X31
	0x037C110C BL 0x38029AC
	0x037C1110 LDR X8, [X31]
	0x037C1114 MOV X20, X0
	0x037C1118 MOV X1, X31
	0x037C111C MOV X0, X8
	0x037C1120 BL 0x38029AC
	0x037C1124 CBZ X20, 0x37C11D8
	0x037C1128 LDR W21, [X20 + 0x14]
	0x037C112C MOV X19, X0
	0x037C1130 MOV X0, X31
	0x037C1134 BL 0x37FFEC0
	0x037C1138 CMP W21, W0
	0x037C113C B.NE 0x37C11C4
	0x037C1140 CBZ X19, 0x37C11D8
	0x037C1144 LDR W21, [X19 + 0x14]
	0x037C1148 MOV X0, X31
	0x037C114C BL 0x37FFEC0
	0x037C1150 CMP W21, W0
	0x037C1154 B.NE 0x37C11C4
	0x037C1158 MOV X0, X20
	0x037C115C MOV X1, X31
	0x037C1160 BL 0x3807298
	0x037C1164 MOV X20, X0
	0x037C1168 MOV X0, X19
	0x037C116C MOV X1, X31
	0x037C1170 BL 0x3807298
	0x037C1174 CBZ X20, 0x37C11D8
	0x037C1178 CBZ X0, 0x37C11D8
	0x037C117C LDR W8, [X20]
	0x037C1180 LDR W9, [X0]
	0x037C1184 CMP W8, W9
	0x037C1188 B.NE 0x37C11C4
	0x037C118C LDRB W8, [X20 + 0x20]
	0x037C1190 LDRB W9, [X0 + 0x20]
	0x037C1194 CMP W8, W9
	0x037C1198 B.NE 0x37C11C4
	0x037C119C LDRB W8, [X20 + 0x23]
	0x037C11A0 LDRB W9, [X0 + 0x23]
	0x037C11A4 CMP W8, W9
	0x037C11A8 B.NE 0x37C11C4
	0x037C11AC LDUR V0, [X0 + 0xC]
	0x037C11B0 LDUR V1, [X20 + 0xC]
	0x037C11B4 FADD V0.2S, V0.2S, V1.2S
	0x037C11B8 STUR D0, [X0 + 0xC]
	0x037C11BC MOVZ W0, 0x1
	0x037C11C0 B 0x37C11C8
	0x037C11C4 MOV W0, W31
	0x037C11C8 LDP X20, X19, [X31 + 0x20]
	0x037C11CC LDP X30, X21, [X31 + 0x10]
	0x037C11D0 ADD X31, X31, 0x30
	0x037C11D4 RET
	0x037C11D8 BL 0x1C16F20
	0x037C11DC MOV X0, X1
	0x037C11E0 MOV X1, X2
	0x037C11E4 B 0x37C10C4
	0x037C11E8 MOV X1, X31
	0x037C11EC B 0x377EF34
	0x037C11F0 LDR X0, [X0 + 0x170]
	0x037C11F4 RET
	0x037C11F8 STR X1, [X0 + 0x170]
	0x037C11FC RET
	0x037C1200 LDR X0, [X0 + 0x178]
	0x037C1204 RET
	0x037C1208 STR X1, [X0 + 0x178]
	0x037C120C RET
	0x037C1210 LDR X0, [X0 + 0x180]
	0x037C1214 RET
	0x037C1218 STR X1, [X0 + 0x180]
	0x037C121C RET
	0x037C1220 LDR X0, [X0 + 0x188]
	0x037C1224 RET
	0x037C1228 STR X1, [X0 + 0x188]
	0x037C122C RET
	0x037C1230 STR X30, [X31 - 0x60]!
	0x037C1234 STP X28, X27, [X31 + 0x10]
	0x037C1238 STP X26, X25, [X31 + 0x20]
	0x037C123C STP X24, X23, [X31 + 0x30]
	0x037C1240 STP X22, X21, [X31 + 0x40]
	0x037C1244 STP X20, X19, [X31 + 0x50]
	0x037C1248 ADRP X28, 0xC20000
	0x037C124C ADRP X26, 0x986000
	0x037C1250 ADRP X27, 0x985000
	0x037C1254 ADRP X24, 0x987000
	0x037C1258 ADRP X25, 0x983000
	0x037C125C ADRP X22, 0x987000
	0x037C1260 ADRP X23, 0x983000
	0x037C1264 ADRP X20, 0x987000
	0x037C1268 ADRP X21, 0x983000
	0x037C126C LDR X26, [X26 + 0xFF8]
	0x037C1270 LDR X27, [X27 + 0x58]
	0x037C1274 LDR X24, [X24]
	0x037C1278 LDRB W8, [X28 + 0x1B6]
	0x037C127C LDR X25, [X25 + 0xE18]
	0x037C1280 LDR X22, [X22 + 0x8]
	0x037C1284 LDR X23, [X23 + 0xDD0]
	0x037C1288 LDR X20, [X20 + 0x10]
	0x037C128C LDR X21, [X21 + 0xED8]
	0x037C1290 MOV X19, X0
	0x037C1294 TBNZ X8, 0x0, 0x37C1300
	0x037C1298 ADRP X0, 0x983000
	0x037C129C LDR X0, [X0 + 0xE18]
	0x037C12A0 BL 0x1C16CF4
	0x037C12A4 ADRP X0, 0x985000
	0x037C12A8 LDR X0, [X0 + 0x58]
	0x037C12AC BL 0x1C16CF4
	0x037C12B0 ADRP X0, 0x983000
	0x037C12B4 LDR X0, [X0 + 0xED8]
	0x037C12B8 BL 0x1C16CF4
	0x037C12BC ADRP X0, 0x983000
	0x037C12C0 LDR X0, [X0 + 0xDD0]
	0x037C12C4 BL 0x1C16CF4
	0x037C12C8 ADRP X0, 0x987000
	0x037C12CC LDR X0, [X0]
	0x037C12D0 BL 0x1C16CF4
	0x037C12D4 ADRP X0, 0x987000
	0x037C12D8 LDR X0, [X0 + 0x8]
	0x037C12DC BL 0x1C16CF4
	0x037C12E0 ADRP X0, 0x987000
	0x037C12E4 LDR X0, [X0 + 0x10]
	0x037C12E8 BL 0x1C16CF4
	0x037C12EC ADRP X0, 0x986000
	0x037C12F0 LDR X0, [X0 + 0xFF8]
	0x037C12F4 BL 0x1C16CF4
	0x037C12F8 MOVZ W8, 0x1
	0x037C12FC STRB W8, [X28 + 0x1B6]
	0x037C1300 MOV X0, X19
	0x037C1304 MOV X1, X31
	0x037C1308 BL 0x37729C8
	0x037C130C LDR X1, [X26]
	0x037C1310 LDR X2, [X27]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D8
	003 Move [X31+32], X29
	004 Move [X31+40], X30
	005 Move [X31+48], X28
	006 Move [X31+56], X27
	007 Move [X31+64], X26
	008 Move [X31+72], X25
	009 Move [X31+80], X24
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X20, 0xC21000
	016 Move X21, 0x95B000
	017 Move W8, [X20+433]
	018 Move X21, [X21+3352]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x95B000
	025 Move X0, [X0+3352]
	026 Call 0x1C17CF4
	027 Move X0, 0x987000
	028 Move X0, [X0+4016]
	029 Call 0x1C17CF4
	030 Move X0, 0x987000
	031 Move X0, [X0+1032]
	032 Call 0x1C17CF4
	033 Move X0, 0x987000
	034 Move X0, [X0+4024]
	035 Call 0x1C17CF4
	036 Move X0, 0x987000
	037 Move X0, [X0+4032]
	038 Call 0x1C17CF4
	039 Move X0, 0x986000
	040 Move X0, [X0+3416]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+433], W8
	044 Move X0, X19
	045 Move X1, X31
	046 Call InputControl.get_currentStatePtr, X0
	047 Move X8, [X21]
	048 Move W21, [X19+20]
	049 Move [X31+24], X0
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X25, 0x986000
	056 Move X27, 0x987000
	057 Move X25, [X25+3416]
	058 Move X27, [X27+1032]
	059 Move X8, [X19+424]
	060 Move X9, [X19+432]
	061 Move X20, 0x93B000
	062 Move X28, 0xC19000
	063 Move [X31], X8
	064 Move [X31+8], X9
	065 Move X20, [X20+3848]
	066 Move X10, X9
	067 ShiftRight X10, 32
	068 And X10, X10, 0x7FFFFFFF
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X26, 0x987000
	071 Move X10, -47017984
	072 Move X26, [X26+4032]
	073 Move V8, [X10+3872]
	074 Move X10, [X31+24]
	075 Move W22, W31
	076 Add X29, X19, 424
	077 Move W24, 1
	078 Add X10, X10, X21
	079 Add X21, X10, 56
	080 Compare X21, 0
	081 JumpIfEqual {233}
	082 Move S0, [X21+12]
	083 Move S1, [X21+16]
	084 Multiply S0, S0, S0
	085 Multiply S1, S1, S1
	086 Add S0, S0, S1
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 Move X2, [X26]
	089 Add X0, X31, 0
	090 Move W1, W22
	091 Move [X31], X8
	092 Move [X31+8], X9
	093 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	094 Compare X0, 0
	095 JumpIfEqual {233}
	096 Move W8, [X28+1935]
	097 Move X23, [X0+400]
	098 Compare W8, 0
	099 JumpIfNotEqual {103}
	100 Move X0, X20
	101 Call 0x1C17CF4
	102 Move [X28+1935], W24
	103 Move X8, [X20]
	104 Move X3, [X27]
	105 Move X0, X23
	106 Move W1, W31
	107 Move X8, [X8+184]
	108 Move X2, X31
	109 Move S0, [X8]
	110 Move S1, [X8+4]
	111 Call InputState.Change, X0, X1, X2, X3
	112 Move W8, [X21+33]
	113 Compare W8, 0
	114 JumpIfEqual {143}
	115 Move X0, X31
	116 Call InputState.get_currentTime
	117 Move X8, [X25]
	118 Move V2, [X21+40]
	119 Move X8, [X8+184]
	120 Move S1, [X8+8]
	121 Move S3, [X8+12]
	122 NotImplemented "Instruction FCVT not yet implemented."
	123 Add D1, D2, D1
	124 NotImplemented "Instruction FCVT not yet implemented."
	125 Add D1, D1, D2
	126 NotImplemented "Instruction FCMP not yet implemented."
	127 Move V0, [X29]
	128 Move X2, [X26]
	129 Add X0, X31, 0
	130 Move W1, W22
	131 Move [X31], V0
	132 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	133 Compare X0, 0
	134 JumpIfEqual {233}
	135 Move X8, 0x987000
	136 Move X0, [X0+448]
	137 Move X8, [X8+4016]
	138 Move W1, W31
	139 Move W2, W31
	140 Move X3, X31
	141 Move X4, [X8]
	142 Call 0x220A16C, X0, X1, X2, X3
	143 Move X8, [X19+424]
	144 Move X9, [X19+432]
	145 Add W22, W22, 1
	146 Add X21, X21, 56
	147 Move X10, X9
	148 ShiftRight X10, 32
	149 And X10, X10, 0x7FFFFFFF
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move [X31], X8
	152 Move [X31+8], X9
	153 Move X8, 0x95B000
	154 Move X8, [X8+3352]
	155 Move W21, [X19+20]
	156 Move X0, [X8]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move X8, [X31+24]
	162 Add X22, X21, X8
	163 Move S0, [X22+12]
	164 Move S1, [X22+16]
	165 Move X8, -47017984
	166 Move V2, [X8+3872]
	167 Multiply S0, S0, S0
	168 Multiply S1, S1, S1
	169 Add S0, S0, S1
	170 NotImplemented "Instruction FCMP not yet implemented."
	171 Move X8, [X19+416]
	172 Compare X8, 0
	173 JumpIfEqual {233}
	174 Move W9, [X28+1935]
	175 Move X21, [X8+400]
	176 Compare W9, 0
	177 JumpIfNotEqual {183}
	178 Move X0, 0x93B000
	179 Move X0, [X0+3848]
	180 Call 0x1C17CF4
	181 Move W8, 1
	182 Move [X28+1935], W8
	183 Move X8, [X20]
	184 Move X3, [X27]
	185 Move X0, X21
	186 Move W1, W31
	187 Move X8, [X8+184]
	188 Move X2, X31
	189 Move S0, [X8]
	190 Move S1, [X8+4]
	191 Call InputState.Change, X0, X1, X2, X3
	192 Move W8, [X22+33]
	193 Compare W8, 0
	194 JumpIfEqual {218}
	195 Move X0, X31
	196 Call InputState.get_currentTime
	197 Move X8, [X25]
	198 Move V2, [X22+40]
	199 Move X8, [X8+184]
	200 Move S1, [X8+8]
	201 Move S3, [X8+12]
	202 NotImplemented "Instruction FCVT not yet implemented."
	203 Add D1, D2, D1
	204 NotImplemented "Instruction FCVT not yet implemented."
	205 Add D1, D1, D2
	206 NotImplemented "Instruction FCMP not yet implemented."
	207 Move X8, [X19+416]
	208 Compare X8, 0
	209 JumpIfEqual {233}
	210 Move X0, [X8+448]
	211 Move X8, 0x987000
	212 Move X8, [X8+4016]
	213 Move W1, W31
	214 Move W2, W31
	215 Move X3, X31
	216 Move X4, [X8]
	217 Call 0x220A16C, X0, X1, X2, X3
	218 Move X20, [X31+112]
	219 Move X19, [X31+120]
	220 Move X22, [X31+96]
	221 Move X21, [X31+104]
	222 Move X24, [X31+80]
	223 Move X23, [X31+88]
	224 Move X26, [X31+64]
	225 Move X25, [X31+72]
	226 Move X28, [X31+48]
	227 Move X27, [X31+56]
	228 Move X29, [X31+32]
	229 Move X30, [X31+40]
	230 Move V8, [X31+16]
	231 Add X31, X31, 128
	232 Return 
	233 Call 0x1C17F20

Method: System.Void OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x037C1314 MOV X0, X19
	0x037C1318 BL 0x21FC754
	0x037C131C STR X0, [X19 + 0x170]
	0x037C1320 LDR X1, [X24]
	0x037C1324 LDR X2, [X25]
	0x037C1328 MOV X0, X19
	0x037C132C BL 0x21FC754
	0x037C1330 STR X0, [X19 + 0x178]
	0x037C1334 LDR X1, [X22]
	0x037C1338 LDR X2, [X23]
	0x037C133C MOV X0, X19
	0x037C1340 BL 0x21FC754
	0x037C1344 STR X0, [X19 + 0x180]
	0x037C1348 LDR X1, [X20]
	0x037C134C LDR X2, [X21]
	0x037C1350 MOV X0, X19
	0x037C1354 BL 0x21FC754
	0x037C1358 STR X0, [X19 + 0x188]
	0x037C135C LDP X20, X19, [X31 + 0x50]
	0x037C1360 LDP X22, X21, [X31 + 0x40]
	0x037C1364 LDP X24, X23, [X31 + 0x30]
	0x037C1368 LDP X26, X25, [X31 + 0x20]
	0x037C136C LDP X28, X27, [X31 + 0x10]
	0x037C1370 LDR X30, [X31], #0x60
	0x037C1374 RET
	0x037C1378 MOV X1, X31
	0x037C137C B 0x377A868
	0x037C1380 AND W8, W0, 0xFFFFFFFE
	0x037C1384 CMP W8, 0x2
	0x037C1388 CSET W0, EQ
	0x037C138C RET
	0x037C1390 SUB W8, W0, 0x3
	0x037C1394 CMP W8, 0x2
	0x037C1398 CSET W0, CC
	0x037C139C RET
	0x037C13A0 SUB W8, W0, 0x33
	0x037C13A4 CMP W8, 0x8
	0x037C13A8 CSET W0, CC
	0x037C13AC RET
	0x037C13B0 CMP W0, 0x4
	0x037C13B4 B.CC 0x37C13D4
	0x037C13B8 SUB W8, W0, 0x33
	0x037C13BC CMP W8, 0x1B
	0x037C13C0 B.CC 0x37C13D4
	0x037C13C4 SUB W8, W0, 0x5E
	0x037C13C8 CMP W8, 0x11
	0x037C13CC CSET W0, HI
	0x037C13D0 RET
	0x037C13D4 MOV W0, W31
	0x037C13D8 RET
	0x037C13DC LDR X0, [X0 + 0x58]
	0x037C13E0 RET
	0x037C13E4 LDR X0, [X0 + 0x60]
	0x037C13E8 RET
	0x037C13EC LDR X0, [X0 + 0x68]
	0x037C13F0 RET
	0x037C13F4 SUB X31, X31, 0x70
	0x037C13F8 STP X30, X27, [X31 + 0x20]
	0x037C13FC STP X26, X25, [X31 + 0x30]
	0x037C1400 STP X24, X23, [X31 + 0x40]
	0x037C1404 STP X22, X21, [X31 + 0x50]
	0x037C1408 STP X20, X19, [X31 + 0x60]
	0x037C140C ADRP X21, 0xC20000
	0x037C1410 LDRB W9, [X21 + 0x1B8]
	0x037C1414 MOV X20, X0
	0x037C1418 MOV X19, X8
	0x037C141C TBNZ X9, 0x0, 0x37C1464
	0x037C1420 ADRP X0, 0x987000
	0x037C1424 LDR X0, [X0 + 0x18]
	0x037C1428 BL 0x1C16CF4
	0x037C142C ADRP X0, 0x987000
	0x037C1430 LDR X0, [X0 + 0x20]
	0x037C1434 BL 0x1C16CF4
	0x037C1438 ADRP X0, 0x987000
	0x037C143C LDR X0, [X0 + 0x28]
	0x037C1440 BL 0x1C16CF4
	0x037C1444 ADRP X0, 0x987000
	0x037C1448 LDR X0, [X0 + 0x30]
	0x037C144C BL 0x1C16CF4
	0x037C1450 ADRP X0, 0x95A000
	0x037C1454 LDR X0, [X0 + 0xD40]
	0x037C1458 BL 0x1C16CF4
	0x037C145C MOVZ W8, 0x1
	0x037C1460 STRB W8, [X21 + 0x1B8]
	0x037C1464 LDR V0, [X20 + 0x47]
	0x037C1468 LDR V1, [X20 + 0x46]
	0x037C146C LDR W25, [X20 + 0x448]
	0x037C1470 LDR W23, [X20 + 0x450]
	0x037C1474 STP V1, V0, [X31]
	0x037C1478 LDR W26, [X20 + 0x70]
	0x037C147C LDR W24, [X20 + 0xB4]
	0x037C1480 CMP W26, 0x1
	0x037C1484 MOV W27, W26
	0x037C1488 B.LT 0x37C14D4
	0x037C148C MOV X21, X31
	0x037C1490 MOV W27, W26
	0x037C1494 LDR X8, [X20 + 0x78]
	0x037C1498 CBZ X8, 0x37C1588
	0x037C149C LDR W9, [X8 + 0x18]
	0x037C14A0 CMP W21, W9
	0x037C14A4 B.CS 0x37C158C
	0x037C14A8 ADD X8, X8, X21, 0x3, LSL
	0x037C14AC LDR X0, [X8 + 0x20]
	0x037C14B0 CBZ X0, 0x37C1588
	0x037C14B4 MOV X1, X31
	0x037C14B8 BL 0x377AAE8
	0x037C14BC LDR W8, [X20 + 0x70]
	0x037C14C0 UBFM X9, X1, 0x20, 0x3F
	0x037C14C4 ADD X21, X21, 0x1
	0x037C14C8 ADD W27, W27, W9
	0x037C14CC CMP W21, W8
	0x037C14D0 B.LT 0x37C1494
	0x037C14D4 LDR X0, [X20 + 0x18]
	0x037C14D8 CBZ X0, 0x37C1588
	0x037C14DC ADRP X8, 0x987000
	0x037C14E0 LDR X8, [X8 + 0x30]
	0x037C14E4 LDR X1, [X8]
	0x037C14E8 BL 0x2A5A528
	0x037C14EC LDR X8, [X20 + 0x20]
	0x037C14F0 CBZ X8, 0x37C1588
	0x037C14F4 ADRP X9, 0x987000
	0x037C14F8 LDR X9, [X9 + 0x28]
	0x037C14FC MOV W21, W0
	0x037C1500 MOV X0, X8
	0x037C1504 LDR X1, [X9]
	0x037C1508 BL 0x2A5A528
	0x037C150C LDR X8, [X20 + 0x28]
	0x037C1510 CBZ X8, 0x37C1588
	0x037C1514 ADRP X9, 0x987000
	0x037C1518 LDR X9, [X9 + 0x20]
	0x037C151C MOV W22, W0
	0x037C1520 MOV X0, X8
	0x037C1524 LDR X1, [X9]
	0x037C1528 BL 0x2A5A528
	0x037C152C LDR X8, [X20 + 0x38]
	0x037C1530 CBZ X8, 0x37C1588
	0x037C1534 ADRP X9, 0x987000
	0x037C1538 LDR X9, [X9 + 0x18]
	0x037C153C LDR X1, [X9]
	0x037C1540 ADD W9, W22, W21
	0x037C1544 ADD W20, W9, W0
	0x037C1548 MOV X0, X8
	0x037C154C BL 0x2A5A528
	0x037C1550 LDP V1, V0, [X31]
	0x037C1554 ADD W8, W20, W0
	0x037C1558 STP W25, W26, [X19]
	0x037C155C STP W23, W24, [X19 + 0x8]
	0x037C1560 STP W27, W8, [X19 + 0x10]
	0x037C1564 STUR V1, [X19 + 0x18]
	0x037C1568 STUR V0, [X19 + 0x28]
	0x037C156C LDP X20, X19, [X31 + 0x60]
	0x037C1570 LDP X22, X21, [X31 + 0x50]
	0x037C1574 LDP X24, X23, [X31 + 0x40]
	0x037C1578 LDP X26, X25, [X31 + 0x30]
	0x037C157C LDP X30, X27, [X31 + 0x20]
	0x037C1580 ADD X31, X31, 0x70
	0x037C1584 RET
	0x037C1588 BL 0x1C16F20
	0x037C158C BL 0x1C16F28
	0x037C1590 LDR X0, [X0 + 0x480]
	0x037C1594 RET
	0x037C1598 STR X30, [X31 - 0x30]!
	0x037C159C STP X22, X21, [X31 + 0x10]
	0x037C15A0 STP X20, X19, [X31 + 0x20]
	0x037C15A4 ADRP X22, 0xC20000
	0x037C15A8 ADRP X21, 0x932000
	0x037C15AC LDRB W8, [X22 + 0x1B9]
	0x037C15B0 LDR X21, [X21 + 0x598]
	0x037C15B4 MOV X20, X1
	0x037C15B8 MOV X19, X0
	0x037C15BC TBNZ X8, 0x0, 0x37C15D4
	0x037C15C0 ADRP X0, 0x932000
	0x037C15C4 LDR X0, [X0 + 0x598]
	0x037C15C8 BL 0x1C16CF4
	0x037C15CC MOVZ W8, 0x1
	0x037C15D0 STRB W8, [X22 + 0x1B9]
	0x037C15D4 LDR X0, [X21]
	0x037C15D8 LDR W8, [X0 + 0xE0]
	0x037C15DC CBNZ W8, 0x37C15E4
	0x037C15E0 BL 0x1C16DFC
	0x037C15E4 MOV X0, X20
	0x037C15E8 MOV X1, X31
	0x037C15EC MOV X2, X31
	0x037C15F0 BL 0x3C3883C
	0x037C15F4 TBNZ X0, 0x0, 0x37C1648
	0x037C15F8 LDR X0, [X21]
	0x037C15FC LDR X21, [X19 + 0x480]
	0x037C1600 LDR W8, [X0 + 0xE0]
	0x037C1604 CBNZ W8, 0x37C160C
	0x037C1608 BL 0x1C16DFC
	0x037C160C MOV X0, X21
	0x037C1610 MOV X1, X20
	0x037C1614 MOV X2, X31
	0x037C1618 BL 0x3C3883C
	0x037C161C TBZ X0, 0x0, 0x37C1630
	0x037C1620 LDP X20, X19, [X31 + 0x20]
	0x037C1624 LDP X22, X21, [X31 + 0x10]
	0x037C1628 LDR X30, [X31], #0x30
	0x037C162C RET
	0x037C1630 STR X20, [X19 + 0x480]
	0x037C1634 MOV X0, X19
	0x037C1638 LDP X20, X19, [X31 + 0x20]
	0x037C163C LDP X22, X21, [X31 + 0x10]
	0x037C1640 LDR X30, [X31], #0x30
	0x037C1644 B 0x37C1690
	0x037C1648 ADRP X0, 0x937000
	0x037C164C LDR X0, [X0 + 0x528]
	0x037C1650 BL 0x1C16D08
	0x037C1654 BL 0x1C16F10
	0x037C1658 MOV X19, X0
	0x037C165C ADRP X0, 0x93C000
	0x037C1660 LDR X0, [X0 + 0xEC8]
	0x037C1664 BL 0x1C16D08
	0x037C1668 MOV X1, X0
	0x037C166C MOV X0, X19
	0x037C1670 MOV X2, X31
	0x037C1674 BL 0x330E100
	0x037C1678 ADRP X0, 0x987000
	0x037C167C LDR X0, [X0 + 0x38]
	0x037C1680 BL 0x1C16D08
	0x037C1684 MOV X1, X0
	0x037C1688 MOV X0, X19
	0x037C168C BL 0x1C16DEC
	0x037C1690 SUB X31, X31, 0xB0
	0x037C1694 STR X30, [X31 + 0x60]
	0x037C1698 STP X26, X25, [X31 + 0x70]
	0x037C169C STP X24, X23, [X31 + 0x80]
	0x037C16A0 STP X22, X21, [X31 + 0x90]
	0x037C16A4 STP X20, X19, [X31 + 0xA0]
	0x037C16A8 ADRP X20, 0xC20000
	0x037C16AC LDRB W8, [X20 + 0x1FE]
	0x037C16B0 MOV X19, X0
	0x037C16B4 TBNZ X8, 0x0, 0x37C1750
	0x037C16B8 ADRP X0, 0x95A000
	0x037C16BC LDR X0, [X0 + 0xC90]
	0x037C16C0 BL 0x1C16CF4
	0x037C16C4 ADRP X0, 0x932000
	0x037C16C8 LDR X0, [X0 + 0xA28]
	0x037C16CC BL 0x1C16CF4
	0x037C16D0 ADRP X0, 0x95A000
	0x037C16D4 LDR X0, [X0 + 0xF10]
	0x037C16D8 BL 0x1C16CF4
	0x037C16DC ADRP X0, 0x95A000
	0x037C16E0 LDR X0, [X0 + 0xF18]
	0x037C16E4 BL 0x1C16CF4
	0x037C16E8 ADRP X0, 0x95A000
	0x037C16EC LDR X0, [X0 + 0xF20]
	0x037C16F0 BL 0x1C16CF4
	0x037C16F4 ADRP X0, 0x987000
	0x037C16F8 LDR X0, [X0 + 0x40]
	0x037C16FC BL 0x1C16CF4
	0x037C1700 ADRP X0, 0x95A000
	0x037C1704 LDR X0, [X0 + 0xF30]
	0x037C1708 BL 0x1C16CF4
	0x037C170C ADRP X0, 0x987000
	0x037C1710 LDR X0, [X0 + 0x48]
	0x037C1714 BL 0x1C16CF4
	0x037C1718 ADRP X0, 0x985000
	0x037C171C LDR X0, [X0 + 0xD58]
	0x037C1720 BL 0x1C16CF4
	0x037C1724 ADRP X0, 0x987000
	0x037C1728 LDR X0, [X0 + 0x50]
	0x037C172C BL 0x1C16CF4
	0x037C1730 ADRP X0, 0x987000
	0x037C1734 LDR X0, [X0 + 0x58]
	0x037C1738 BL 0x1C16CF4
	0x037C173C ADRP X0, 0x987000
	0x037C1740 LDR X0, [X0 + 0x60]
	0x037C1744 BL 0x1C16CF4
	0x037C1748 MOVZ W8, 0x1
	0x037C174C STRB W8, [X20 + 0x1FE]
	0x037C1750 STRB W31, [X31 + 0x58]
	0x037C1754 STR X31, [X31 + 0x50]
	0x037C1758 STP X31, X31, [X31 + 0x30]
	0x037C175C STR X31, [X31 + 0x40]
	0x037C1760 STP X31, X31, [X31 + 0x20]
	0x037C1764 LDR X20, [X19 + 0x480]
	0x037C1768 CBZ X20, 0x37C1ACC
	0x037C176C LDR W8, [X20 + 0x20]
	0x037C1770 LDR W21, [X19 + 0xA8]
	0x037C1774 CBNZ W8, 0x37C1790
	0x037C1778 MOVZ W1, 0x1
	0x037C177C MOV X0, X20
	0x037C1780 MOV X2, X31
	0x037C1784 BL 0x37CD7F4
	0x037C1788 LDR X20, [X19 + 0x480]
	0x037C178C CBZ X20, 0x37C1ACC
	0x037C1790 LDR W8, [X20 + 0x20]
	0x037C1794 SUB W8, W8, 0x1
	0x037C1798 CMP W8, 0x3
	0x037C179C B.CS 0x37C1AD8
	0x037C17A0 ADRP X9, 0xFFFFFFFFFD3D6000
	0x037C17A4 ADD X9, X9, 0x970
	0x037C17A8 LDR W8, [X9, W8, SXTW]
	0x037C17AC LDR W9, [X19 + 0xA8]
	0x037C17B0 AND W10, W21, 0x4
	0x037C17B4 ORR W8, W10, W8, 0x0
	0x037C17B8 CMP W9, W8
	0x037C17BC B.EQ 0x37C17D8
	0x037C17C0 LDR W9, [X19 + 0x70]
	0x037C17C4 STR W8, [X19 + 0xA8]
	0x037C17C8 CMP W9, 0x1
	0x037C17CC B.LT 0x37C17D8
	0x037C17D0 MOV X0, X19
	0x037C17D4 BL 0x37C1C54
	0x037C17D8 MOV X0, X19
	0x037C17DC BL 0x37C20EC
	0x037C17E0 LDR X0, [X19 + 0x480]
	0x037C17E4 CBZ X0, 0x37C1ACC
	0x037C17E8 MOV X1, X31
	0x037C17EC BL 0x37CDAC4
	0x037C17F0 UBFM X8, X1, 0x20, 0x3F
	0x037C17F4 CMP W8, 0x1
	0x037C17F8 B.LT 0x37C18AC
	0x037C17FC LDR W8, [X19 + 0x70]
	0x037C1800 CMP W8, 0x1
	0x037C1804 B.LT 0x37C18AC
	0x037C1808 MOV W21, W31
	0x037C180C LDR X8, [X19 + 0x78]
	0x037C1810 CBZ X8, 0x37C1ACC
	0x037C1814 LDR W9, [X8 + 0x18]
	0x037C1818 CMP W21, W9
	0x037C181C B.CS 0x37C1AC8
	0x037C1820 ADD X8, X8, W21, 0x3, SXTW
	0x037C1824 LDR X20, [X8 + 0x20]
	0x037C1828 CBZ X20, 0x37C1ACC
	0x037C182C LDR W8, [X19 + 0x88]
	0x037C1830 CMP W8, 0x1
	0x037C1834 B.LT 0x37C189C
	0x037C1838 LDR X11, [X19 + 0x90]
	0x037C183C CBZ X11, 0x37C1ACC
	0x037C1840 LDP X1, X2, [X20 + 0x58]
	0x037C1844 LDR W10, [X11 + 0x18]
	0x037C1848 MOV W9, W31
	0x037C184C ADD X11, X11, 0x58
	0x037C1850 CMP W9, W10
	0x037C1854 B.CS 0x37C1AC8
	0x037C1858 LDR W12, [X11]
	0x037C185C LDR W13, [X20 + 0xE0]
	0x037C1860 CMP W12, W13
	0x037C1864 B.EQ 0x37C187C
	0x037C1868 ADD W9, W9, 0x1
	0x037C186C CMP W9, W8
	0x037C1870 ADD X11, X11, 0x40
	0x037C1874 B.LT 0x37C1850
	0x037C1878 B 0x37C189C
	0x037C187C MOV X0, X19
	0x037C1880 BL 0x37C516C
	0x037C1884 TBNZ X0, 0x0, 0x37C189C
	0x037C1888 MOVZ W2, 0x1
	0x037C188C MOV X0, X19
	0x037C1890 MOV X1, X20
	0x037C1894 BL 0x37BC210
	0x037C1898 SUB W21, W21, 0x1
	0x037C189C LDR W8, [X19 + 0x70]
	0x037C18A0 ADD W21, W21, 0x1
	0x037C18A4 CMP W21, W8
	0x037C18A8 B.LT 0x37C180C
	0x037C18AC LDR X0, [X19 + 0x480]
	0x037C18B0 CBZ X0, 0x37C1ACC
	0x037C18B4 LDR X8, [X0 + 0x60]
	0x037C18B8 CBZ X8, 0x37C1930
	0x037C18BC ADRP X8, 0x987000
	0x037C18C0 LDR X8, [X8 + 0x60]
	0x037C18C4 MOV X2, X31
	0x037C18C8 LDR X1, [X8]
	0x037C18CC BL 0x37CDEA4
	0x037C18D0 TBZ X0, 0x0, 0x37C1930
	0x037C18D4 MOVZ W0, 0x1
	0x037C18D8 MOV X1, X31
	0x037C18DC BL 0x37FF714
	0x037C18E0 ADRP X8, 0x987000
	0x037C18E4 LDR X8, [X8 + 0x40]
	0x037C18E8 STR X0, [X31 + 0x50]
	0x037C18EC STRB W1, [X31 + 0x58]
	0x037C18F0 ADD X1, X31, 0x50
	0x037C18F4 LDR X2, [X8]
	0x037C18F8 MOV X0, X19
	0x037C18FC BL 0x2208408
	0x037C1900 TBZ X0, 0x0, 0x37C1930
	0x037C1904 ADRP X8, 0x932000
	0x037C1908 LDR X8, [X8 + 0xA28]
	0x037C190C LDR X0, [X8]
	0x037C1910 LDR W8, [X0 + 0xE0]
	0x037C1914 CBNZ W8, 0x37C191C
	0x037C1918 BL 0x1C16DFC
	0x037C191C ADRP X8, 0x987000
	0x037C1920 LDR X8, [X8 + 0x58]
	0x037C1924 MOV X1, X31
	0x037C1928 LDR X0, [X8]
	0x037C192C BL 0x3C0649C
	0x037C1930 LDR X8, [X19 + 0x480]
	0x037C1934 CBZ X8, 0x37C1ACC
	0x037C1938 ADRP X9, 0x985000
	0x037C193C LDR X9, [X9 + 0xD58]
	0x037C1940 LDR V0, [X8 + 0x48]
	0x037C1944 ADRP X10, 0x95A000
	0x037C1948 ADRP X26, 0x95A000
	0x037C194C LDR X9, [X9]
	0x037C1950 ADRP X24, 0x95A000
	0x037C1954 MOVN W11, 0x80800000
	0x037C1958 FMOV S2, W11
	0x037C195C LDR X9, [X9 + 0xB8]
	0x037C1960 ADRP X25, 0x95A000
	0x037C1964 ADRP X23, 0x987000
	0x037C1968 ADRP X22, 0x95A000
	0x037C196C STR S0, [X9 + 0x8]

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+160], X30
	003 Move [X31+176], X28
	004 Move [X31+184], X27
	005 Move [X31+192], X26
	006 Move [X31+200], X25
	007 Move [X31+208], X24
	008 Move [X31+216], X23
	009 Move [X31+224], X22
	010 Move [X31+232], X21
	011 Move [X31+240], X20
	012 Move [X31+248], X19
	013 NotImplemented "Instruction MRS not yet implemented."
	014 Move X8, [X25+40]
	015 Move X20, 0xC21000
	016 Move X19, X0
	017 Move [X31+152], X8
	018 Move W8, [X20+434]
	019 Move [X31+24], X1
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {47}
	024 Move X0, 0x95B000
	025 Move X0, [X0+3352]
	026 Call 0x1C17CF4
	027 Move X0, 0x987000
	028 Move X0, [X0+4016]
	029 Call 0x1C17CF4
	030 Move X0, 0x987000
	031 Move X0, [X0+4040]
	032 Call 0x1C17CF4
	033 Move X0, 0x984000
	034 Move X0, [X0+3984]
	035 Call 0x1C17CF4
	036 Move X0, 0x987000
	037 Move X0, [X0+4024]
	038 Call 0x1C17CF4
	039 Move X0, 0x987000
	040 Move X0, [X0+4032]
	041 Call 0x1C17CF4
	042 Move X0, 0x986000
	043 Move X0, [X0+3416]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+434], W8
	047 NotImplemented "Instruction MOVI not yet implemented."
	048 Add X0, X31, 24
	049 Move X1, X31
	050 Move [X31+144], X31
	051 Move [X31], X31
	052 Move [X31+8], X31
	053 Move [X31+80], X31
	054 Move [X31+112], V0
	055 Move [X31+120], V0
	056 Move [X31+6], V0
	057 Move [X31+48], V0
	058 Move [X31+56], V0
	059 Move [X31+2], V0
	060 Call InputEventPtr.get_type, X0
	061 Move W8, 0x5441
	062 NotImplemented "Instruction MOVK not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, [X31+24]
	065 Move X1, X31
	066 Call StateEvent.FromUnchecked, X0
	067 Compare X0, 0
	068 JumpIfEqual {449}
	069 Move W20, [X0+20]
	070 Move X22, X0
	071 Move X0, X31
	072 Call TouchState.get_Format
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, X19
	075 Move X1, X31
	076 Call InputControl.get_currentStatePtr, X0
	077 Add X27, X19, 424
	078 Move X26, 0x987000
	079 Move V0, [X27]
	080 Move X26, [X26+4032]
	081 Move X21, X0
	082 Add X0, X31, 0
	083 Move W1, W31
	084 Move X2, [X26]
	085 Move [X31], V0
	086 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	087 Compare X0, 0
	088 JumpIfEqual {449}
	089 Move X8, 0x95B000
	090 Move X8, [X8+3352]
	091 Move W20, [X0+20]
	092 Move X8, [X8]
	093 Move W9, [X8+224]
	094 Compare W9, 0
	095 JumpIfNotEqual {98}
	096 Move X0, X8
	097 Call 0x1C17DFC
	098 Move X8, [X19+416]
	099 Compare X8, 0
	100 JumpIfEqual {449}
	101 Move W8, [X8+20]
	102 Move X9, [X19+424]
	103 Move X10, [X19+432]
	104 Move X0, X22
	105 Move X1, X31
	106 Add X20, X20, X21
	107 Add X21, X8, X21
	108 Move [X31], X9
	109 Move [X31+8], X10
	110 Move X28, X10
	111 ShiftRight X28, 32
	112 And X28, X28, 0x7FFFFFFF
	113 Call StateEvent.get_stateSizeInBytes, X0
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X0, X22
	116 Move X1, X31
	117 Call StateEvent.get_state, X0
	118 Move X8, [X0+48]
	119 Move V2, [X0+16]
	120 Move V0, [X0+32]
	121 Move V1, [X0]
	122 Move [X31+144], X8
	123 Move [X31+112], V2
	124 Move [X31+120], V0
	125 Move [X31+6], V1
	126 Move X1, [X31+24]
	127 Move X0, X19
	128 Move W2, W31
	129 Move X3, X31
	130 Call InputState.Change, X0, X1, X2
	131 Move X8, [X25+40]
	132 Move X9, [X31+152]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X20, [X31+240]
	135 Move X19, [X31+248]
	136 Move X22, [X31+224]
	137 Move X21, [X31+232]
	138 Move X24, [X31+208]
	139 Move X23, [X31+216]
	140 Move X26, [X31+192]
	141 Move X25, [X31+200]
	142 Move X28, [X31+176]
	143 Move X27, [X31+184]
	144 Move X30, [X31+160]
	145 Add X31, X31, 256
	146 Return 
	147 NotImplemented "Instruction MOVI not yet implemented."
	148 Move X0, X22
	149 Move X1, X31
	150 Move [X31+144], X31
	151 Move [X31+112], V0
	152 Move [X31+120], V0
	153 Move [X31+6], V0
	154 Call StateEvent.get_state, X0
	155 Move X23, X0
	156 Move X0, X22
	157 Move X1, X31
	158 Call StateEvent.get_stateSizeInBytes, X0
	159 Move W2, W0
	160 Add X0, X31, 96
	161 Move X1, X23
	162 Move X3, X31
	163 Call UnsafeUtility.MemCpy, X0, X1, X2
	164 Add X0, X31, 96
	165 Move W1, W31
	166 Move X2, X31
	167 Move [X31+129], W31
	168 Call TouchState.set_isTapPress, X0, X1
	169 Add X0, X31, 96
	170 Move W1, W31
	171 Move X2, X31
	172 Call TouchState.set_isTapRelease, X0, X1
	173 Move X8, 0x984000
	174 Move X8, [X8+3984]
	175 Move W9, [X31+128]
	176 Move X8, [X8]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X8, [X8+184]
	179 Move W8, [X8]
	180 Move [X31+132], W8
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W22, W31
	183 Move X0, X20
	184 Move X1, X31
	185 Call TouchState.get_isNoneEndedOrCanceled, X0
	186 Move TEMP, X0
	187 And TEMP, TEMP, 1
	188 Compare TEMP, 1
	189 JumpIfEqual {204}
	190 Add W22, W22, 1
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Add X20, X20, 56
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move W8, [X31+96]
	195 Move X22, X31
	196 Move X24, X20
	197 Compare X24, 0
	198 JumpIfEqual {449}
	199 Move W9, [X24]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Add X22, X22, 1
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Add X24, X24, 56
	204 Move X23, 0xC19000
	205 Move W8, [X23+1935]
	206 Compare W8, 0
	207 JumpIfNotEqual {213}
	208 Move X0, 0x93B000
	209 Move X0, [X0+3848]
	210 Call 0x1C17CF4
	211 Move W8, 1
	212 Move [X23+1935], W8
	213 Move X8, 0x93B000
	214 Move X8, [X8+3848]
	215 Add X0, X31, 24
	216 Move X1, X31
	217 Move X8, [X8]
	218 Move X8, [X8+184]
	219 Move V0, [X8]
	220 Move [X31+108], D0
	221 Call InputEventPtr.get_time, X0
	222 NotImplemented "Instruction LDUR not yet implemented."
	223 Add X0, X31, 96
	224 Move W1, W31
	225 Move X2, X31
	226 Move [X31+136], D0
	227 Move [X31+144], X8
	228 Call TouchState.set_isPrimaryTouch, X0, X1
	229 Add X0, X31, 96
	230 Move W1, W31
	231 Move X2, X31
	232 Call TouchState.set_isOrphanedPrimaryTouch, X0, X1
	233 Add X0, X31, 96
	234 Move W1, W31
	235 Move X2, X31
	236 Call TouchState.set_isTap, X0, X1
	237 Compare X20, 0
	238 JumpIfEqual {449}
	239 Move W8, [X20+33]
	240 Move X0, X21
	241 Move X1, X31
	242 Move [X31+129], W8
	243 Call TouchState.get_isNoneEndedOrCanceled, X0
	244 Move TEMP, X0
	245 And TEMP, TEMP, 1
	246 Compare TEMP, 1
	247 JumpIfNotEqual {260}
	248 Add X0, X31, 96
	249 Move W1, 1
	250 Move X2, X31
	251 Call TouchState.set_isPrimaryTouch, X0, X1
	252 Move X8, 0x987000
	253 Move X0, [X19+416]
	254 Move X3, [X31+24]
	255 Move X8, [X8+4040]
	256 Add X1, X31, 96
	257 Move W2, W31
	258 Move X4, [X8]
	259 Call InputState.Change, X0, X1, X2, X3
	260 Move V0, [X27]
	261 Move X2, [X26]
	262 Add X0, X31, 0
	263 Move W1, W22
	264 Move [X31], V0
	265 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	266 Move X3, [X31+24]
	267 Move X0, X24
	268 Move X1, X31
	269 Call TouchState.get_isPrimaryTouch, X0
	270 Move W23, W0
	271 And W1, W0, 1
	272 Add X0, X31, 96
	273 Move X2, X31
	274 Call TouchState.set_isPrimaryTouch, X0, X1
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 Move X8, -47017984
	277 Move V1, [X8+3872]
	278 NotImplemented "Instruction INVALID not yet implemented."
	279 NotImplemented "Instruction FADDP not yet implemented."
	280 NotImplemented "Instruction FCMP not yet implemented."
	281 NotImplemented "Instruction LDUR not yet implemented."
	282 NotImplemented "Instruction LDUR not yet implemented."
	283 Subtract V0, V0, V1
	284 Move [X31+108], D0
	285 NotImplemented "Instruction LDUR not yet implemented."
	286 Add X0, X31, 96
	287 Move X1, X31
	288 Add V0, V0, V1
	289 Move [X31+108], D0
	290 Move V0, [X24+40]
	291 Move [X31+136], D0
	292 Move X8, [X24+48]
	293 Move [X31+144], X8
	294 Call TouchState.get_isNoneEndedOrCanceled, X0
	295 Move TEMP, X0
	296 And TEMP, TEMP, 1
	297 Compare TEMP, 1
	298 JumpIfNotEqual {311}
	299 Add X0, X31, 24
	300 Move X1, X31
	301 Call InputEventPtr.get_time, X0
	302 Move X8, 0x986000
	303 Move X8, [X8+3416]
	304 Move V1, [X31+136]
	305 Move X8, [X8]
	306 Subtract D0, D0, D1
	307 Move X8, [X8+184]
	308 Move V2, [X8+8]
	309 NotImplemented "Instruction FCVT not yet implemented."
	310 NotImplemented "Instruction FCMP not yet implemented."
	311 Move W8, [X24+33]
	312 Move W24, 1
	313 Add X0, X31, 96
	314 Move X1, X31
	315 Move [X31+129], W8
	316 Call TouchState.get_isNoneEndedOrCanceled, X0
	317 Move TEMP, X23
	318 And TEMP, TEMP, 1
	319 Compare TEMP, 1
	320 JumpIfNotEqual {351}
	321 Move TEMP, X0
	322 And TEMP, TEMP, 1
	323 Compare TEMP, 1
	324 JumpIfNotEqual {400}
	325 Add X0, X31, 96
	326 Move W1, W31
	327 Move X2, X31
	328 Call TouchState.set_isPrimaryTouch, X0, X1
	329 And X21, X22, 0
	330 Compare X21, 0
	331 JumpIfEqual {339}
	332 Move X0, X20
	333 Move X1, X31
	334 Call TouchState.get_isInProgress, X0
	335 Move TEMP, X0
	336 And TEMP, TEMP, 1
	337 Compare TEMP, 1
	338 JumpIfEqual {405}
	339 Subtract X21, X21, 1
	340 Subtract X28, X28, 1
	341 Add X20, X20, 56
	342 Move X0, [X19+416]
	343 Move X3, [X31+24]
	344 Move TEMP, X24
	345 And TEMP, TEMP, 1
	346 Compare TEMP, 1
	347 JumpIfEqual {402}
	348 Add X1, X31, 96
	349 Move X2, X3
	350 Call Touchscreen.TriggerTap, X0, X1, X2
	351 Move TEMP, X0
	352 And TEMP, TEMP, 1
	353 Compare TEMP, 1
	354 JumpIfNotEqual {429}
	355 Move X0, X21
	356 Move X1, X31
	357 Call TouchState.get_isOrphanedPrimaryTouch, X0
	358 Move TEMP, X0
	359 And TEMP, TEMP, 1
	360 Compare TEMP, 1
	361 JumpIfNotEqual {429}
	362 And X23, X22, 0
	363 Compare X23, 0
	364 JumpIfEqual {372}
	365 Move X0, X20
	366 Move X1, X31
	367 Call TouchState.get_isInProgress, X0
	368 Move TEMP, X0
	369 And TEMP, TEMP, 1
	370 Compare TEMP, 1
	371 JumpIfEqual {429}
	372 Subtract X23, X23, 1
	373 Subtract X28, X28, 1
	374 Add X20, X20, 56
	375 Move X0, X21
	376 Move W1, W31
	377 Move X2, X31
	378 Call TouchState.set_isOrphanedPrimaryTouch, X0, X1
	379 Move X8, [X19+416]
	380 Compare X8, 0
	381 JumpIfEqual {449}
	382 Move X0, [X8+424]
	383 Move X8, 0x987000
	384 Move X8, [X8+4016]
	385 Move W1, 3
	386 Move W2, W31
	387 Move X3, X31
	388 Move X4, [X8]
	389 Call 0x220A16C, X0, X1, X2, X3
	390 NotImplemented "Instruction LDUR not yet implemented."
	391 Move V1, [X31+144]
	392 Move V2, [X8+16]
	393 Move W8, [X24+33]
	394 Subtract V0, V0, V1
	395 NotImplemented "Instruction INVALID not yet implemented."
	396 NotImplemented "Instruction FADDP not yet implemented."
	397 NotImplemented "Instruction FCMP not yet implemented."
	398 Move W24, W31
	399 Add W8, W8, 1
	400 Move X0, [X19+416]
	401 Move X3, [X31+24]
	402 Move X8, 0x987000
	403 Move X8, [X8+4040]
	404 Add X1, X31, 96
	405 Move V0, [X31+96]
	406 Move V1, [X31+112]
	407 Move V2, [X31+8]
	408 Move X8, [X31+144]
	409 Add X0, X31, 32
	410 Move W1, 2
	411 Move X2, X31
	412 Move [X31+32], V0
	413 Move [X31+40], V1
	414 Move [X31+4], V2
	415 Move [X31+80], X8
	416 Call TouchState.set_phase, X0, X1
	417 Add X0, X31, 32
	418 Move W1, 1
	419 Move X2, X31
	420 Call TouchState.set_isOrphanedPrimaryTouch, X0, X1
	421 Move X8, 0x987000
	422 Move X0, [X19+416]
	423 Move X3, [X31+24]
	424 Move X8, [X8+4040]
	425 Add X1, X31, 32
	426 Move X4, [X8]
	427 Move W2, W31
	428 Call InputState.Change, X0, X1, X2, X3
	429 Move V0, [X27]
	430 Move X2, [X26]
	431 Add X0, X31, 0
	432 Move W1, W22
	433 Move [X31], V0
	434 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	435 Move X3, [X31+24]
	436 Move TEMP, X24
	437 And TEMP, TEMP, 1
	438 Compare TEMP, 1
	439 JumpIfNotEqual {446}
	440 Move X8, 0x987000
	441 Move X8, [X8+4040]
	442 Add X1, X31, 96
	443 Move W2, W31
	444 Move X4, [X8]
	445 Call InputState.Change, X0, X1, X2, X3
	446 Add X1, X31, 96
	447 Move X2, X3
	448 Call Touchscreen.TriggerTap, X0, X1, X2
	449 Call 0x1C17F20
	450 Call 0x3EB2B20

Method: System.Void UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnNextUpdate()

Disassembly:
	0x037C1A3C STP X0, X1, [X31 + 0x20]

ISIL:
	001 Call Touchscreen.OnNextUpdate, X0
	002 Return 

Method: System.Void UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x037C1A40 ADD X8, X31, 0x8

ISIL:
	001 Call Touchscreen.OnStateEvent, X0, X1
	002 Return 

Method: System.Boolean UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.GetStateOffsetForEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, ref System.UInt32 offset)

Disassembly:
	0x037C1A44 ADD X0, X31, 0x20
	0x037C1A48 MOV X1, X9
	0x037C1A4C BL 0x24FD990
	0x037C1A50 LDUR V0, [X31 + 0x8]
	0x037C1A54 LDR X8, [X31 + 0x18]
	0x037C1A58 STR V0, [X31 + 0x3]
	0x037C1A5C STR X8, [X31 + 0x40]
	0x037C1A60 LDR X1, [X24]
	0x037C1A64 ADD X0, X31, 0x30
	0x037C1A68 BL 0x2BC496C
	0x037C1A6C TBZ X0, 0x0, 0x37C1A8C
	0x037C1A70 LDR X1, [X25]
	0x037C1A74 ADD X0, X31, 0x30
	0x037C1A78 BL 0x2BC4998
	0x037C1A7C CBZ X0, 0x37C1AD4
	0x037C1A80 MOV X1, X31
	0x037C1A84 BL 0x3772CEC
	0x037C1A88 B 0x37C1A60
	0x037C1A8C LDR X1, [X22]
	0x037C1A90 ADD X0, X31, 0x30
	0x037C1A94 BL 0x2BC4968
	0x037C1A98 LDR X1, [X23]
	0x037C1A9C ADD X0, X19, 0x360
	0x037C1AA0 MOV X2, X31
	0x037C1AA4 MOV X3, X31
	0x037C1AA8 BL 0x375EFDC
	0x037C1AAC LDP X20, X19, [X31 + 0xA0]
	0x037C1AB0 LDP X22, X21, [X31 + 0x90]
	0x037C1AB4 LDP X24, X23, [X31 + 0x80]
	0x037C1AB8 LDP X26, X25, [X31 + 0x70]
	0x037C1ABC LDR X30, [X31 + 0x60]
	0x037C1AC0 ADD X31, X31, 0xB0
	0x037C1AC4 RET
	0x037C1AC8 BL 0x1C16F28
	0x037C1ACC BL 0x1C16F20
	0x037C1AD0 BL 0x1C16F20
	0x037C1AD4 BL 0x1C16F20
	0x037C1AD8 MOV X0, X20
	0x037C1ADC BL 0x19903C0
	0x037C1AE0 ADRP X0, 0x985000
	0x037C1AE4 LDR W19, [X20 + 0x20]
	0x037C1AE8 LDR X0, [X0 + 0x9C0]
	0x037C1AEC BL 0x1C16D08
	0x037C1AF0 MOVN X8, 0x0
	0x037C1AF4 STP X0, X8, [X31 + 0x8]
	0x037C1AF8 ADD X0, X31, 0x8
	0x037C1AFC MOV X1, X31
	0x037C1B00 STR W19, [X31 + 0x18]
	0x037C1B04 BL 0x33B162C
	0x037C1B08 MOV X19, X0
	0x037C1B0C ADRP X0, 0x987000
	0x037C1B10 LDR X0, [X0 + 0x68]
	0x037C1B14 BL 0x1C16D08
	0x037C1B18 MOV X1, X19
	0x037C1B1C MOV X2, X31
	0x037C1B20 BL 0x321B938
	0x037C1B24 MOV X19, X0
	0x037C1B28 ADRP X0, 0x932000
	0x037C1B2C LDR X0, [X0 + 0xB40]
	0x037C1B30 BL 0x1C16D08
	0x037C1B34 BL 0x1C16F10
	0x037C1B38 MOV X1, X19
	0x037C1B3C MOV X2, X31
	0x037C1B40 MOV X20, X0
	0x037C1B44 BL 0x3379A44
	0x037C1B48 ADRP X0, 0x987000
	0x037C1B4C LDR X0, [X0 + 0x70]
	0x037C1B50 BL 0x1C16D08
	0x037C1B54 MOV X1, X0
	0x037C1B58 MOV X0, X20
	0x037C1B5C BL 0x1C16DEC
	0x037C1B60 B 0x37C1B70
	0x037C1B64 B 0x37C1BC4
	0x037C1B68 B 0x37C1B70
	0x037C1B6C B 0x37C1BC4
	0x037C1B70 MOV X20, X0
	0x037C1B74 CMP W1, 0x1
	0x037C1B78 B.NE 0x37C1BA0
	0x037C1B7C MOV X0, X20
	0x037C1B80 BL 0x3EB1AD0
	0x037C1B84 LDR X21, [X0]
	0x037C1B88 BL 0x3EB1AE0
	0x037C1B8C LDR X1, [X22]
	0x037C1B90 ADD X0, X31, 0x30
	0x037C1B94 BL 0x2BC4968
	0x037C1B98 CBZ X21, 0x37C1A98
	0x037C1B9C B 0x37C1BF0
	0x037C1BA0 MOV X21, X31
	0x037C1BA4 B 0x37C1BAC
	0x037C1BA8 MOV X20, X0
	0x037C1BAC LDR X1, [X22]
	0x037C1BB0 ADD X0, X31, 0x30
	0x037C1BB4 BL 0x2BC4968
	0x037C1BB8 CBZ X21, 0x37C1C14
	0x037C1BBC MOV X0, X21
	0x037C1BC0 BL 0x1C16F18
	0x037C1BC4 MOV X20, X0
	0x037C1BC8 CMP W1, 0x1
	0x037C1BCC B.NE 0x37C1BF8
	0x037C1BD0 MOV X0, X20
	0x037C1BD4 BL 0x3EB1AD0
	0x037C1BD8 LDR X21, [X0]
	0x037C1BDC BL 0x3EB1AE0
	0x037C1BE0 LDR X1, [X22]
	0x037C1BE4 ADD X0, X31, 0x30
	0x037C1BE8 BL 0x2BC4968
	0x037C1BEC CBZ X21, 0x37C1A30
	0x037C1BF0 MOV X0, X21
	0x037C1BF4 BL 0x1C16F18
	0x037C1BF8 MOV X21, X31
	0x037C1BFC B 0x37C1C04
	0x037C1C00 MOV X20, X0
	0x037C1C04 LDR X1, [X22]
	0x037C1C08 ADD X0, X31, 0x30
	0x037C1C0C BL 0x2BC4968
	0x037C1C10 CBNZ X21, 0x37C1C1C
	0x037C1C14 MOV X0, X20
	0x037C1C18 BL 0x1D2C690
	0x037C1C1C MOV X0, X21
	0x037C1C20 BL 0x1C16F18
	0x037C1C24 BL 0x1990590
	0x037C1C28 LDR W0, [X0 + 0xA8]
	0x037C1C2C RET
	0x037C1C30 LDR W8, [X0 + 0xA8]
	0x037C1C34 CMP W8, W1
	0x037C1C38 B.EQ 0x37C1C50
	0x037C1C3C LDR W8, [X0 + 0x70]
	0x037C1C40 STR W1, [X0 + 0xA8]
	0x037C1C44 CMP W8, 0x1
	0x037C1C48 B.LT 0x37C1C50
	0x037C1C4C B 0x37C1C54
	0x037C1C50 RET
	0x037C1C54 SUB X31, X31, 0x150
	0x037C1C58 STP X29, X30, [X31 + 0x120]
	0x037C1C5C STP X22, X21, [X31 + 0x130]
	0x037C1C60 STP X20, X19, [X31 + 0x140]
	0x037C1C64 ADRP X22, 0xC20000
	0x037C1C68 ADRP X21, 0x95D000
	0x037C1C6C ADRP X20, 0x983000
	0x037C1C70 LDRB W8, [X22 + 0x1F7]
	0x037C1C74 LDR X21, [X21 + 0xFE8]
	0x037C1C78 LDR X20, [X20 + 0xF90]
	0x037C1C7C MOV X19, X0
	0x037C1C80 TBNZ X8, 0x0, 0x37C1CA4
	0x037C1C84 ADRP X0, 0x95D000
	0x037C1C88 LDR X0, [X0 + 0xFE8]
	0x037C1C8C BL 0x1C16CF4
	0x037C1C90 ADRP X0, 0x983000
	0x037C1C94 LDR X0, [X0 + 0xF90]
	0x037C1C98 BL 0x1C16CF4
	0x037C1C9C MOVZ W8, 0x1
	0x037C1CA0 STRB W8, [X22 + 0x1F7]
	0x037C1CA4 LDP V0, V1, [X19 + 0xB0]
	0x037C1CA8 LDR V2, [X19 + 0xD]
	0x037C1CAC MOVI V3.2D, 0x0
	0x037C1CB0 STP V3, V3, [X31 + 0xC0]
	0x037C1CB4 STP V3, V0, [X31 + 0xE0]
	0x037C1CB8 STP V1, V2, [X31 + 0x100]
	0x037C1CBC LDR X1, [X19 + 0x78]
	0x037C1CC0 LDR W2, [X19 + 0x70]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+24], X2
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0xC21000
	015 Move X22, 0x986000
	016 Move W8, [X23+435]
	017 Move X22, [X22+3408]
	018 Move X19, X3
	019 Move X21, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {45}
	025 Move X0, 0x987000
	026 Move X0, [X0+4048]
	027 Call 0x1C17CF4
	028 Move X0, 0x986000
	029 Move X0, [X0+3408]
	030 Call 0x1C17CF4
	031 Move X0, 0x95B000
	032 Move X0, [X0+3352]
	033 Call 0x1C17CF4
	034 Move X0, 0x987000
	035 Move X0, [X0+4024]
	036 Call 0x1C17CF4
	037 Move X0, 0x987000
	038 Move X0, [X0+4032]
	039 Call 0x1C17CF4
	040 Move X0, 0x986000
	041 Move X0, [X0+200]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X23+435], W8
	045 Move X1, [X22]
	046 Add X0, X31, 24
	047 Move [X31], X31
	048 Move [X31+8], X31
	049 Call InputEventPtr.IsA, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {149}
	054 Move X0, [X31+24]
	055 Move X1, X31
	056 Call StateEvent.FromUnchecked, X0
	057 Compare X0, 0
	058 JumpIfEqual {185}
	059 Move W23, [X0+20]
	060 Move X22, X0
	061 Move X0, X31
	062 Call TouchState.get_Format
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Compare X21, 0
	065 JumpIfEqual {88}
	066 Move X8, 0x987000
	067 Move X8, [X8+4048]
	068 Move X0, X21
	069 Move X1, [X8]
	070 Call 0x21FE4C0, X0
	071 Compare X0, 0
	072 JumpIfEqual {150}
	073 Move X8, [X0+128]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X8, [X20+416]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X8, 0x95B000
	078 Move X8, [X8+3352]
	079 Move W21, [X0+20]
	080 Move X8, [X8]
	081 Move W9, [X8+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {86}
	084 Move X0, X8
	085 Call 0x1C17DFC
	086 Move W8, [X20+20]
	087 Subtract W8, W21, W8
	088 Move X0, X20
	089 Move X1, X31
	090 Call InputControl.get_currentStatePtr, X0
	091 Add X8, X20, 424
	092 Move V0, [X8]
	093 Move X8, 0x987000
	094 Move X8, [X8+4032]
	095 Move X21, X0
	096 Add X0, X31, 0
	097 Move W1, W31
	098 Move X2, [X8]
	099 Move [X31], V0
	100 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	101 Compare X0, 0
	102 JumpIfEqual {185}
	103 Move X23, 0x95B000
	104 Move X23, [X23+3352]
	105 Move W27, [X0+20]
	106 Move X8, [X23]
	107 Move W9, [X8+224]
	108 Compare W9, 0
	109 JumpIfNotEqual {112}
	110 Move X0, X8
	111 Call 0x1C17DFC
	112 Move X0, X22
	113 Move X1, X31
	114 Call StateEvent.get_state, X0
	115 Compare X0, 0
	116 JumpIfEqual {185}
	117 Move X9, [X20+424]
	118 Move X8, [X20+432]
	119 Move W24, [X0]
	120 Move W25, [X0+32]
	121 Move X26, X8
	122 ShiftRight X26, 32
	123 And X26, X26, 0x7FFFFFFF
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move [X31], X9
	126 Move [X31+8], X8
	127 Move W22, W31
	128 Add X21, X21, X27
	129 Move W27, 1
	130 Move W28, 38
	131 Compare X21, 0
	132 JumpIfEqual {185}
	133 Move W8, [X21]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X0, X21
	136 Move X1, X31
	137 Call TouchState.get_isInProgress, X0
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfEqual {145}
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction LSLV not yet implemented."
	144 And W31, W8, W28
	145 Move W0, W31
	146 Subtract W22, W22, 56
	147 Subtract X26, X26, 1
	148 Add X21, X21, 56
	149 Move W0, W31
	150 Move X20, [X31+96]
	151 Move X19, [X31+104]
	152 Move X22, [X31+80]
	153 Move X21, [X31+88]
	154 Move X24, [X31+64]
	155 Move X23, [X31+72]
	156 Move X26, [X31+48]
	157 Move X25, [X31+56]
	158 Move X28, [X31+32]
	159 Move X27, [X31+40]
	160 Move X30, [X31+16]
	161 Add X31, X31, 112
	162 Return X0
	163 Move X21, [X20+416]
	164 Compare X21, 0
	165 JumpIfEqual {185}
	166 Move X0, [X23]
	167 Move X8, X21
	168 Move W9, [X0+224]
	169 Compare W9, 0
	170 JumpIfNotEqual {175}
	171 Call 0x1C17DFC
	172 Move X8, [X20+416]
	173 Compare X8, 0
	174 JumpIfEqual {185}
	175 Move W21, [X21+20]
	176 Add X0, X8, 16
	177 Move X1, X31
	178 Call InputStateBlock.get_alignedSizeInBytes, X0
	179 Move W8, [X20+20]
	180 Add W9, W0, W21
	181 Subtract W8, W9, W8
	182 Subtract W8, W8, W22
	183 Move W0, 1
	184 Move [X19], W8
	185 Call 0x1C17F20

Method: System.Void UnityEngine.InputSystem.LowLevel.ICustomDeviceReset.Reset()

Disassembly:
	0x037C1CE0 ADD X0, X31, 0xC0
	0x037C1CE4 ADD X3, X31, 0x30
	0x037C1CE8 MOV X4, X31
	0x037C1CEC STP V0, V1, [X31 + 0x30]
	0x037C1CF0 STR V2, [X31 + 0x5]
	0x037C1CF4 BL 0x380C814
	0x037C1CF8 ADD X0, X31, 0xF0
	0x037C1CFC MOV X1, X31
	0x037C1D00 BL 0x380C754
	0x037C1D04 LDP V1, V0, [X31 + 0xD0]
	0x037C1D08 LDR V2, [X31 + 0xC]
	0x037C1D0C STP V1, V0, [X19 + 0xC0]
	0x037C1D10 STR V2, [X19 + 0xB]
	0x037C1D14 LDR X8, [X21]
	0x037C1D18 LDR X9, [X31 + 0xC8]
	0x037C1D1C LDR X8, [X8 + 0xB8]
	0x037C1D20 STR X9, [X8]
	0x037C1D24 LDR X8, [X21]
	0x037C1D28 LDR X9, [X31 + 0xD0]
	0x037C1D2C LDR X8, [X8 + 0xB8]
	0x037C1D30 STR X9, [X8 + 0x8]
	0x037C1D34 LDR X9, [X31 + 0xD8]
	0x037C1D38 STR X9, [X8 + 0x10]
	0x037C1D3C LDP V1, V0, [X19 + 0xC0]
	0x037C1D40 LDR V2, [X19 + 0xB]
	0x037C1D44 LDR X8, [X20]
	0x037C1D48 STP V1, V0, [X31 + 0x70]
	0x037C1D4C STR V2, [X31 + 0x6]
	0x037C1D50 LDR X8, [X8 + 0xB8]
	0x037C1D54 LDR W1, [X8 + 0x4]
	0x037C1D58 CBZ W1, 0x37C1D74
	0x037C1D5C LDP V0, V1, [X31 + 0x60]
	0x037C1D60 LDR V2, [X31 + 0x8]
	0x037C1D64 ADD X19, X31, 0x90
	0x037C1D68 STP V0, V1, [X31 + 0x90]
	0x037C1D6C STR V2, [X31 + 0xB]
	0x037C1D70 B 0x37C1DA8
	0x037C1D74 LDP V0, V1, [X31 + 0x60]
	0x037C1D78 LDR V2, [X31 + 0x8]
	0x037C1D7C STP V0, V1, [X31 + 0x90]
	0x037C1D80 STR V2, [X31 + 0xB]
	0x037C1D84 LDR W1, [X19 + 0xAC]
	0x037C1D88 CBZ W1, 0x37C1D94
	0x037C1D8C ADD X19, X31, 0x90
	0x037C1D90 B 0x37C1DA8
	0x037C1D94 LDR W0, [X19 + 0xA8]
	0x037C1D98 MOV X1, X31
	0x037C1D9C ADD X19, X31, 0x90
	0x037C1DA0 BL 0x3807CA8
	0x037C1DA4 MOV W1, W0
	0x037C1DA8 LDP V1, V0, [X19 + 0x10]
	0x037C1DAC LDR V2, [X19]
	0x037C1DB0 ADD X0, X31, 0x0
	0x037C1DB4 MOV X2, X31
	0x037C1DB8 STP V1, V0, [X31 + 0x70]
	0x037C1DBC STR V2, [X31 + 0x6]
	0x037C1DC0 STP V2, V1, [X31]
	0x037C1DC4 STR V0, [X31 + 0x2]
	0x037C1DC8 BL 0x380C54C
	0x037C1DCC LDP X20, X19, [X31 + 0x140]
	0x037C1DD0 LDP X22, X21, [X31 + 0x130]
	0x037C1DD4 LDP X29, X30, [X31 + 0x120]
	0x037C1DD8 ADD X31, X31, 0x150
	0x037C1DDC RET
	0x037C1DE0 LDR W8, [X0 + 0xAC]
	0x037C1DE4 CBZ W8, 0x37C1DF0
	0x037C1DE8 MOV W0, W8
	0x037C1DEC RET
	0x037C1DF0 LDR W0, [X0 + 0xA8]
	0x037C1DF4 MOV X1, X31
	0x037C1DF8 B 0x3807CA8
	0x037C1DFC LDR V0, [X0 + 0x14]
	0x037C1E00 RET
	0x037C1E04 STR D8, [X31 - 0x20]!
	0x037C1E08 STR X30, [X31 + 0x8]
	0x037C1E0C STP X20, X19, [X31 + 0x10]
	0x037C1E10 ADRP X19, 0xC20000
	0x037C1E14 LDRB W8, [X19 + 0x1BA]
	0x037C1E18 MOV V8.16B, V0.16B
	0x037C1E1C MOV X20, X0
	0x037C1E20 TBNZ X8, 0x0, 0x37C1E38
	0x037C1E24 ADRP X0, 0x95A000
	0x037C1E28 LDR X0, [X0 + 0xED0]
	0x037C1E2C BL 0x1C16CF4
	0x037C1E30 MOVZ W8, 0x1
	0x037C1E34 STRB W8, [X19 + 0x1BA]
	0x037C1E38 FCMP S8, 0x0
	0x037C1E3C B.LS 0x37C1ED0
	0x037C1E40 LDR X19, [X20 + 0x440]
	0x037C1E44 STR S8, [X20 + 0x14]
	0x037C1E48 CBZ X19, 0x37C1E94
	0x037C1E4C ADRP X10, 0x95A000
	0x037C1E50 LDR X8, [X19]
	0x037C1E54 LDR X10, [X10 + 0xED0]
	0x037C1E58 LDRH W9, [X8 + 0x12E]
	0x037C1E5C LDR X1, [X10]
	0x037C1E60 CBZ X9, 0x37C1E84
	0x037C1E64 LDR X10, [X8 + 0xB0]
	0x037C1E68 ADD X10, X10, 0x8
	0x037C1E6C LDUR X11, [X10 - 0x8]
	0x037C1E70 CMP X11, X1
	0x037C1E74 B.EQ 0x37C1EA4
	0x037C1E78 SUBS X9, X9, 0x1
	0x037C1E7C ADD X10, X10, 0x10
	0x037C1E80 B.NE 0x37C1E6C
	0x037C1E84 MOVZ W2, 0x12
	0x037C1E88 MOV X0, X19
	0x037C1E8C BL 0x1C5C788
	0x037C1E90 B 0x37C1EB4
	0x037C1E94 LDP X20, X19, [X31 + 0x10]
	0x037C1E98 LDR X30, [X31 + 0x8]
	0x037C1E9C LDR V8, [X31], #0x20
	0x037C1EA0 RET
	0x037C1EA4 LDR W9, [X10]
	0x037C1EA8 ADD W9, W9, 0x12
	0x037C1EAC ADD X8, X8, W9, 0x4, SXTW
	0x037C1EB0 ADD X0, X8, 0x138
	0x037C1EB4 LDP X2, X1, [X0]
	0x037C1EB8 MOV X0, X19
	0x037C1EBC LDP X20, X19, [X31 + 0x10]
	0x037C1EC0 LDR X30, [X31 + 0x8]
	0x037C1EC4 MOV V0.16B, V8.16B
	0x037C1EC8 LDR V8, [X31], #0x20
	0x037C1ECC BR X2
	0x037C1ED0 ADRP X0, 0x93A000
	0x037C1ED4 LDR X0, [X0 + 0x578]
	0x037C1ED8 BL 0x1C16D08
	0x037C1EDC BL 0x1C16F10
	0x037C1EE0 MOV X19, X0
	0x037C1EE4 ADRP X0, 0x987000
	0x037C1EE8 LDR X0, [X0 + 0x78]
	0x037C1EEC BL 0x1C16D08
	0x037C1EF0 MOV X20, X0
	0x037C1EF4 ADRP X0, 0x93C000
	0x037C1EF8 LDR X0, [X0 + 0xEC8]
	0x037C1EFC BL 0x1C16D08
	0x037C1F00 MOV X2, X0
	0x037C1F04 MOV X0, X19
	0x037C1F08 MOV X1, X20
	0x037C1F0C MOV X3, X31
	0x037C1F10 BL 0x330E16C
	0x037C1F14 ADRP X0, 0x987000
	0x037C1F18 LDR X0, [X0 + 0x80]
	0x037C1F1C BL 0x1C16D08
	0x037C1F20 MOV X1, X0
	0x037C1F24 MOV X0, X19
	0x037C1F28 BL 0x1C16DEC
	0x037C1F2C STR X30, [X31 - 0x30]!
	0x037C1F30 STP X22, X21, [X31 + 0x10]
	0x037C1F34 STP X20, X19, [X31 + 0x20]
	0x037C1F38 ADRP X22, 0xC20000
	0x037C1F3C ADRP X21, 0x987000
	0x037C1F40 LDRB W8, [X22 + 0x1BD]
	0x037C1F44 LDR X21, [X21 + 0x88]
	0x037C1F48 MOV X19, X1
	0x037C1F4C MOV X20, X0
	0x037C1F50 TBNZ X8, 0x0, 0x37C1F68
	0x037C1F54 ADRP X0, 0x987000
	0x037C1F58 LDR X0, [X0 + 0x88]
	0x037C1F5C BL 0x1C16CF4
	0x037C1F60 MOVZ W8, 0x1
	0x037C1F64 STRB W8, [X22 + 0x1BD]
	0x037C1F68 LDR X2, [X21]
	0x037C1F6C ADD X0, X20, 0x130
	0x037C1F70 MOV X1, X19
	0x037C1F74 LDP X20, X19, [X31 + 0x20]
	0x037C1F78 LDP X22, X21, [X31 + 0x10]
	0x037C1F7C LDR X30, [X31], #0x30
	0x037C1F80 B 0x28F14E0
	0x037C1F84 STR X30, [X31 - 0x30]!
	0x037C1F88 STP X22, X21, [X31 + 0x10]
	0x037C1F8C STP X20, X19, [X31 + 0x20]
	0x037C1F90 ADRP X22, 0xC20000
	0x037C1F94 ADRP X21, 0x987000
	0x037C1F98 LDRB W8, [X22 + 0x1BE]
	0x037C1F9C LDR X21, [X21 + 0x90]
	0x037C1FA0 MOV X19, X1
	0x037C1FA4 MOV X20, X0
	0x037C1FA8 TBNZ X8, 0x0, 0x37C1FC0
	0x037C1FAC ADRP X0, 0x987000
	0x037C1FB0 LDR X0, [X0 + 0x90]
	0x037C1FB4 BL 0x1C16CF4
	0x037C1FB8 MOVZ W8, 0x1
	0x037C1FBC STRB W8, [X22 + 0x1BE]
	0x037C1FC0 LDR X2, [X21]
	0x037C1FC4 ADD X0, X20, 0x130
	0x037C1FC8 MOV X1, X19
	0x037C1FCC LDP X20, X19, [X31 + 0x20]
	0x037C1FD0 LDP X22, X21, [X31 + 0x10]
	0x037C1FD4 LDR X30, [X31], #0x30
	0x037C1FD8 B 0x28F1650
	0x037C1FDC STR X30, [X31 - 0x30]!
	0x037C1FE0 STP X22, X21, [X31 + 0x10]
	0x037C1FE4 STP X20, X19, [X31 + 0x20]
	0x037C1FE8 ADRP X22, 0xC20000
	0x037C1FEC ADRP X21, 0x987000
	0x037C1FF0 LDRB W8, [X22 + 0x1BF]
	0x037C1FF4 LDR X21, [X21 + 0x98]
	0x037C1FF8 MOV X19, X1
	0x037C1FFC MOV X20, X0
	0x037C2000 TBNZ X8, 0x0, 0x37C2018
	0x037C2004 ADRP X0, 0x986000
	0x037C2008 LDR X0, [X0 + 0x98]
	0x037C200C BL 0x1C16CF4
	0x037C2010 MOVZ W8, 0x1
	0x037C2014 STRB W8, [X22 + 0x1BF]
	0x037C2018 LDR X2, [X21]
	0x037C201C ADD X0, X20, 0x1D0
	0x037C2020 MOV X1, X19
	0x037C2024 LDP X20, X19, [X31 + 0x20]
	0x037C2028 LDP X22, X21, [X31 + 0x10]
	0x037C202C LDR X30, [X31], #0x30
	0x037C2030 B 0x28F14E0
	0x037C2034 STR X30, [X31 - 0x30]!
	0x037C2038 STP X22, X21, [X31 + 0x10]
	0x037C203C STP X20, X19, [X31 + 0x20]
	0x037C2040 ADRP X22, 0xC1F000
	0x037C2044 ADRP X21, 0x986000
	0x037C2048 LDRB W8, [X22 + 0x1C0]
	0x037C204C LDR X21, [X21 + 0xA0]
	0x037C2050 MOV X19, X1
	0x037C2054 MOV X20, X0
	0x037C2058 TBNZ X8, 0x0, 0x37C2070
	0x037C205C ADRP X0, 0x986000
	0x037C2060 LDR X0, [X0 + 0xA0]
	0x037C2064 BL 0x1C16CF4
	0x037C2068 MOVZ W8, 0x1
	0x037C206C STRB W8, [X22 + 0x1C0]
	0x037C2070 LDR X2, [X21]
	0x037C2074 ADD X0, X20, 0x1D0
	0x037C2078 MOV X1, X19
	0x037C207C LDP X20, X19, [X31 + 0x20]
	0x037C2080 LDP X22, X21, [X31 + 0x10]
	0x037C2084 LDR X30, [X31], #0x30
	0x037C2088 B 0x28F1650
	0x037C208C STR X30, [X31 - 0x30]!
	0x037C2090 STP X22, X21, [X31 + 0x10]
	0x037C2094 STP X20, X19, [X31 + 0x20]
	0x037C2098 ADRP X22, 0xC1F000
	0x037C209C ADRP X21, 0x986000
	0x037C20A0 LDRB W8, [X22 + 0x1C1]
	0x037C20A4 LDR X21, [X21 + 0xA8]
	0x037C20A8 MOV X20, X1
	0x037C20AC MOV X19, X0
	0x037C20B0 TBNZ X8, 0x0, 0x37C20C8
	0x037C20B4 ADRP X0, 0x986000
	0x037C20B8 LDR X0, [X0 + 0xA8]
	0x037C20BC BL 0x1C16CF4
	0x037C20C0 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X23+40]
	016 Move X24, 0xC21000
	017 Move X21, 0x987000
	018 Move X22, 0x987000
	019 Move [X31+56], X8
	020 Move X19, 0x987000
	021 Move W8, [X24+436]
	022 Move X21, [X21+4056]
	023 Move X22, [X22+4064]
	024 Move X19, [X19+4072]
	025 Move X20, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {59}
	030 Move X0, 0x95B000
	031 Move X0, [X0+3352]
	032 Call 0x1C17CF4
	033 Move X0, 0x987000
	034 Move X0, [X0+4080]
	035 Call 0x1C17CF4
	036 Move X0, 0x987000
	037 Move X0, [X0+4072]
	038 Call 0x1C17CF4
	039 Move X0, 0x95B000
	040 Move X0, [X0+3432]
	041 Call 0x1C17CF4
	042 Move X0, 0x987000
	043 Move X0, [X0+4064]
	044 Call 0x1C17CF4
	045 Move X0, 0x987000
	046 Move X0, [X0+4024]
	047 Call 0x1C17CF4
	048 Move X0, 0x987000
	049 Move X0, [X0+4032]
	050 Call 0x1C17CF4
	051 Move X0, 0x987000
	052 Move X0, [X0+4056]
	053 Call 0x1C17CF4
	054 Move X0, 0x986000
	055 Move X0, [X0+200]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X24+436], W8
	059 Move X24, 0x95B000
	060 Move X24, [X24+3432]
	061 Move X0, X20
	062 Move X1, X31
	063 Move [X31+16], X31
	064 Move [X31+24], X31
	065 Move [X31], X31
	066 Move [X31+8], X31
	067 Call InputControl.get_currentStatePtr, X0
	068 Move X8, [X21]
	069 Move X21, X0
	070 Move X0, X8
	071 Call 0x225B48C
	072 Move X4, [X22]
	073 Move W1, W0
	074 Add X0, X31, 16
	075 Move W2, 2
	076 Move W3, 1
	077 Call NativeArray`1<Byte>..ctor, X0, X1, X2, X3
	078 Move X0, [X31+16]
	079 Move X1, [X31+24]
	080 Move X2, [X19]
	081 Call 0x2223688, X0
	082 Move W2, [X31+24]
	083 Move W3, [X20+224]
	084 Move X19, X0
	085 Move [X31+32], X31
	086 Move [X31+40], X31
	087 Move [X31+48], W31
	088 Move W1, 0x4154
	089 Add X0, X31, 32
	090 Move D0, -1
	091 NotImplemented "Instruction MOVK not yet implemented."
	092 Move X4, X31
	093 Call InputEvent..ctor, X0, X1, X2, X3, V0
	094 Compare X19, 0
	095 JumpIfEqual {227}
	096 Move W8, [X31+48]
	097 Move V0, [X31+2]
	098 Move [X19+16], W8
	099 Move [X19], V0
	100 Move X8, [X20+416]
	101 Compare X8, 0
	102 JumpIfEqual {228}
	103 Move X27, 0x95B000
	104 Move X27, [X27+3352]
	105 Move W22, [X8+20]
	106 Move X0, [X27]
	107 Move W9, [X0+224]
	108 Compare W9, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1C17DFC
	111 Add X22, X22, X21
	112 Move W8, [X22+32]
	113 Move X25, 0x987000
	114 Move X25, [X25+4080]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move W9, 1
	117 NotImplemented "Instruction LSLV not yet implemented."
	118 Move W9, 38
	119 And W31, W8, W9
	120 Move X0, X19
	121 Move X1, X31
	122 Call StateEvent.get_state, X0
	123 Move W2, 56
	124 Move X1, X22
	125 Move X3, X31
	126 Call UnsafeUtility.MemCpy, X0, X1, X2
	127 Move X0, X19
	128 Move X1, X31
	129 Call StateEvent.get_state, X0
	130 Move W1, 4
	131 Move X2, X31
	132 Call TouchState.set_phase, X0, X1
	133 Move X8, [X20+416]
	134 Compare X8, 0
	135 JumpIfEqual {230}
	136 Move X0, [X8+424]
	137 Move X4, [X25]
	138 Move W1, 4
	139 Move W2, W31
	140 Move X3, X19
	141 Call InputState.Change, X0, X1, X2, X3
	142 Move X22, 0x987000
	143 Move X22, [X22+4032]
	144 Add X26, X20, 424
	145 Move V0, [X26]
	146 Move X2, [X22]
	147 Move [X31], V0
	148 Add X0, X31, 0
	149 Move W1, W31
	150 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	151 Compare X0, 0
	152 JumpIfEqual {229}
	153 Move X8, [X27]
	154 Move W28, [X0+20]
	155 Move W9, [X8+224]
	156 Compare W9, 0
	157 JumpIfNotEqual {160}
	158 Move X0, X8
	159 Call 0x1C17DFC
	160 Move X9, [X20+424]
	161 Move X8, [X20+432]
	162 Move X27, X8
	163 ShiftRight X27, 32
	164 And X27, X27, 0x7FFFFFFF
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move [X31], X9
	167 Move [X31+8], X8
	168 Move X20, X31
	169 Add X21, X21, X28
	170 Move W28, 1
	171 Move W29, 38
	172 Move W8, [X21+32]
	173 NotImplemented "Instruction CMP not yet implemented."
	174 NotImplemented "Instruction LSLV not yet implemented."
	175 And W31, W8, W29
	176 Move X0, X19
	177 Move X1, X31
	178 Call StateEvent.get_state, X0
	179 Move W2, 56
	180 Move X1, X21
	181 Move X3, X31
	182 Call UnsafeUtility.MemCpy, X0, X1, X2
	183 Move X0, X19
	184 Move X1, X31
	185 Call StateEvent.get_state, X0
	186 Move W1, 4
	187 Move X2, X31
	188 Call TouchState.set_phase, X0, X1
	189 Move V0, [X26]
	190 Move X2, [X22]
	191 Move [X31], V0
	192 Add X0, X31, 0
	193 Move W1, W20
	194 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	195 Compare X0, 0
	196 JumpIfEqual {226}
	197 Move X0, [X0+424]
	198 Move X4, [X25]
	199 Move W1, 4
	200 Move W2, W31
	201 Move X3, X19
	202 Call InputState.Change, X0, X1, X2, X3
	203 Add X20, X20, 1
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Add X21, X21, 56
	206 Move X1, [X24]
	207 Add X0, X31, 16
	208 Call NativeArray`1<Byte>.Dispose, X0
	209 Move X8, [X23+40]
	210 Move X9, [X31+56]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move X20, [X31+144]
	213 Move X19, [X31+152]
	214 Move X22, [X31+128]
	215 Move X21, [X31+136]
	216 Move X24, [X31+112]
	217 Move X23, [X31+120]
	218 Move X26, [X31+96]
	219 Move X25, [X31+104]
	220 Move X28, [X31+80]
	221 Move X27, [X31+88]
	222 Move X29, [X31+64]
	223 Move X30, [X31+72]
	224 Add X31, X31, 160
	225 Return 
	226 Call 0x1C17F20
	227 Call 0x1C17F20
	228 Call 0x1C17F20
	229 Call 0x1C17F20
	230 Call 0x1C17F20
	231 Call 0x3EB2B20
	232 Move X19, X0
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move X0, X19
	235 Call 0x3EB2AD0
	236 Move X20, [X0]
	237 Call 0x3EB2AE0
	238 Move X1, [X24]
	239 Add X0, X31, 16
	240 Call NativeArray`1<Byte>.Dispose, X0
	241 Compare X20, 0
	242 JumpIfEqual {209}
	243 Move X0, X20
	244 Call 0x1C17F18
	245 Move X20, X31
	246 Move X19, X0
	247 Move X1, [X24]
	248 Add X0, X31, 16
	249 Call NativeArray`1<Byte>.Dispose, X0
	250 Compare X20, 0
	251 JumpIfNotEqual {254}
	252 Move X0, X19
	253 Call 0x1D2D690
	254 Move X0, X20
	255 Call 0x1C17F18
	256 Call 0x1991590

Method: System.Boolean MergeForward(UnityEngine.InputSystem.LowLevel.InputEventPtr currentEventPtr, UnityEngine.InputSystem.LowLevel.InputEventPtr nextEventPtr)

Disassembly:
	0x037C20C4 STRB W8, [X22 + 0x1C1]
	0x037C20C8 LDR X2, [X21]
	0x037C20CC ADD X0, X19, 0x180
	0x037C20D0 MOV X1, X20
	0x037C20D4 BL 0x28F14E0
	0x037C20D8 MOV X0, X19
	0x037C20DC LDP X20, X19, [X31 + 0x20]
	0x037C20E0 LDP X22, X21, [X31 + 0x10]
	0x037C20E4 LDR X30, [X31], #0x30
	0x037C20E8 B 0x37C20EC
	0x037C20EC SUB X31, X31, 0x190
	0x037C20F0 STP X29, X30, [X31 + 0x150]
	0x037C20F4 STP X24, X23, [X31 + 0x160]
	0x037C20F8 STP X22, X21, [X31 + 0x170]
	0x037C20FC STP X20, X19, [X31 + 0x180]
	0x037C2100 ADRP X20, 0xC1F000
	0x037C2104 LDRB W8, [X20 + 0x1FF]
	0x037C2108 MOV X19, X0
	0x037C210C TBNZ X8, 0x0, 0x37C2124
	0x037C2110 ADRP X0, 0x986000
	0x037C2114 LDR X0, [X0 + 0xB0]
	0x037C2118 BL 0x1C16CF4
	0x037C211C MOVZ W8, 0x1
	0x037C2120 STRB W8, [X20 + 0x1FF]
	0x037C2124 STP X31, X31, [X31 + 0x140]
	0x037C2128 STR X31, [X31 + 0x138]
	0x037C212C LDR W8, [X19 + 0x88]
	0x037C2130 CMP W8, 0x1
	0x037C2134 B.LT 0x37C2318
	0x037C2138 ADRP X24, 0x986000
	0x037C213C ADRP X20, 0x931000
	0x037C2140 LDR X24, [X24 + 0xB0]
	0x037C2144 LDR X20, [X20 + 0x7D0]
	0x037C2148 MOV X22, X31
	0x037C214C MOV X23, X31
	0x037C2150 LDR X8, [X19 + 0x90]
	0x037C2154 CBZ X8, 0x37C2334
	0x037C2158 LDR W9, [X8 + 0x18]
	0x037C215C CMP X23, X9
	0x037C2160 B.CS 0x37C2330
	0x037C2164 ADD X8, X8, X22
	0x037C2168 LDR W21, [X8 + 0x58]
	0x037C216C MOV X0, X19
	0x037C2170 MOV W1, W21
	0x037C2174 BL 0x37BC094
	0x037C2178 CBNZ X0, 0x37C22B0
	0x037C217C LDR X8, [X19 + 0x90]
	0x037C2180 CBZ X8, 0x37C2334
	0x037C2184 LDR W9, [X8 + 0x18]
	0x037C2188 CMP X23, X9
	0x037C218C B.CS 0x37C2330
	0x037C2190 ADD X8, X8, X22
	0x037C2194 ADD X1, X8, 0x20
	0x037C2198 MOV X0, X19
	0x037C219C MOV W2, W21
	0x037C21A0 BL 0x37C419C
	0x037C21A4 MOV X8, X0
	0x037C21A8 MOV X2, X1
	0x037C21AC STP X0, X1, [X31 + 0x140]
	0x037C21B0 MOV X0, X19
	0x037C21B4 MOV X1, X8
	0x037C21B8 BL 0x37C516C
	0x037C21BC TBZ X0, 0x0, 0x37C22B0
	0x037C21C0 ADD X0, X31, 0x140
	0x037C21C4 MOV X1, X31
	0x037C21C8 BL 0x375F7A0
	0x037C21CC TBZ X0, 0x0, 0x37C21F8
	0x037C21D0 CBZ W21, 0x37C22B0
	0x037C21D4 MOV X0, X31
	0x037C21D8 BL 0x37FE680

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, 0x4154
	007 Move [X31], X1
	008 Move [X31+8], X0
	009 Add X0, X31, 8
	010 Move X1, X31
	011 NotImplemented "Instruction MOVK not yet implemented."
	012 Call InputEventPtr.get_type, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Add X0, X31, 0
	015 Move X1, X31
	016 Call InputEventPtr.get_type, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, [X31+8]
	019 Move X1, X31
	020 Call StateEvent.FromUnchecked, X0
	021 Move X8, [X31]
	022 Move X20, X0
	023 Move X1, X31
	024 Move X0, X8
	025 Call StateEvent.FromUnchecked, X0
	026 Compare X20, 0
	027 JumpIfEqual {71}
	028 Move W21, [X20+20]
	029 Move X19, X0
	030 Move X0, X31
	031 Call TouchState.get_Format
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Compare X19, 0
	034 JumpIfEqual {71}
	035 Move W21, [X19+20]
	036 Move X0, X31
	037 Call TouchState.get_Format
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, X20
	040 Move X1, X31
	041 Call StateEvent.get_state, X0
	042 Move X20, X0
	043 Move X0, X19
	044 Move X1, X31
	045 Call StateEvent.get_state, X0
	046 Compare X20, 0
	047 JumpIfEqual {71}
	048 Compare X0, 0
	049 JumpIfEqual {71}
	050 Move W8, [X20]
	051 Move W9, [X0]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, [X20+32]
	054 Move W9, [X0+32]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W8, [X20+35]
	057 Move W9, [X0+35]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 Add V0, V0, V1
	062 Move [X0+12], D0
	063 Move W0, 1
	064 Move W0, W31
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X30, [X31+16]
	068 Move X21, [X31+24]
	069 Add X31, X31, 48
	070 Return X0
	071 Call 0x1C17F20

Method: System.Boolean UnityEngine.InputSystem.LowLevel.IEventMerger.MergeForward(UnityEngine.InputSystem.LowLevel.InputEventPtr currentEventPtr, UnityEngine.InputSystem.LowLevel.InputEventPtr nextEventPtr)

Disassembly:
	0x037C21DC STR X0, [X31 + 0x138]
	0x037C21E0 LDR X0, [X19 + 0x440]
	0x037C21E4 LDR X3, [X24]

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call Touchscreen.MergeForward, X0, X1
	004 Return X0

Method: System.Void TriggerTap(UnityEngine.InputSystem.Controls.TouchControl control, ref UnityEngine.InputSystem.LowLevel.TouchState state, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x037C1970 LDR V0, [X8 + 0x58]
	0x037C1974 MOV X0, X19
	0x037C1978 STR S0, [X9 + 0xC]
	0x037C197C LDR V0, [X8 + 0x54]
	0x037C1980 LDR X10, [X10 + 0xC90]
	0x037C1984 LDR X26, [X26 + 0xF30]
	0x037C1988 FMUL S0, S0, S0
	0x037C198C STR S0, [X9 + 0x10]
	0x037C1990 LDR X9, [X10]
	0x037C1994 ADRP X10, 0xFFFFFFFFFD328000
	0x037C1998 LDR V0, [X8 + 0x40]
	0x037C199C LDR V1, [X10 + 0xF28]
	0x037C19A0 LDR X24, [X24 + 0xF18]
	0x037C19A4 LDR X9, [X9 + 0xB8]
	0x037C19A8 FMIN S2, S0, S2
	0x037C19AC FCMP S0, S1
	0x037C19B0 FCSEL S0, S2, S1, PL
	0x037C19B4 STR S0, [X9]
	0x037C19B8 LDR V0, [X8 + 0x44]
	0x037C19BC LDR X25, [X25 + 0xF20]
	0x037C19C0 LDR X23, [X23 + 0x50]
	0x037C19C4 LDR X22, [X22 + 0xF10]
	0x037C19C8 STR S0, [X9 + 0x4]
	0x037C19CC BL 0x37BB5A0
	0x037C19D0 LDR X9, [X26]
	0x037C19D4 STP X0, X1, [X31 + 0x20]
	0x037C19D8 ADD X8, X31, 0x8
	0x037C19DC ADD X0, X31, 0x20
	0x037C19E0 MOV X1, X9
	0x037C19E4 BL 0x24FD990
	0x037C19E8 LDUR V0, [X31 + 0x8]
	0x037C19EC LDR X8, [X31 + 0x18]
	0x037C19F0 STR V0, [X31 + 0x3]
	0x037C19F4 STR X8, [X31 + 0x40]
	0x037C19F8 LDR X1, [X24]
	0x037C19FC ADD X0, X31, 0x30
	0x037C1A00 BL 0x2BC496C
	0x037C1A04 TBZ X0, 0x0, 0x37C1A24
	0x037C1A08 LDR X1, [X25]
	0x037C1A0C ADD X0, X31, 0x30
	0x037C1A10 BL 0x2BC4998
	0x037C1A14 CBZ X0, 0x37C1AD0
	0x037C1A18 MOV X1, X31
	0x037C1A1C BL 0x377F584
	0x037C1A20 B 0x37C19F8
	0x037C1A24 LDR X1, [X22]
	0x037C1A28 ADD X0, X31, 0x30
	0x037C1A2C BL 0x2BC4968
	0x037C1A30 MOV X0, X19
	0x037C1A34 BL 0x37BB5A0
	0x037C1A38 LDR X9, [X26]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xC21000
	008 Move X22, 0x987000
	009 Move W8, [X23+437]
	010 Move X22, [X22+4040]
	011 Move X20, X2
	012 Move X19, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x987000
	019 Move X0, [X0+4040]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+437], W8
	023 Move W1, 1
	024 Move X0, X19
	025 Move X2, X31
	026 Call TouchState.set_isTapPress, X0, X1
	027 Move X0, X19
	028 Move W1, W31
	029 Move X2, X31
	030 Call TouchState.set_isTapRelease, X0, X1
	031 Move X4, [X22]
	032 Move X0, X21
	033 Move X1, X19
	034 Move W2, W31
	035 Move X3, X20
	036 Call InputState.Change, X0, X1, X2, X3
	037 Move X0, X19
	038 Move W1, W31
	039 Move X2, X31
	040 Call TouchState.set_isTapPress, X0, X1
	041 Move W1, 1
	042 Move X0, X19
	043 Move X2, X31
	044 Call TouchState.set_isTapRelease, X0, X1
	045 Move X4, [X22]
	046 Move X0, X21
	047 Move X1, X19
	048 Move W2, W31
	049 Move X3, X20
	050 Call InputState.Change, X0, X1, X2, X3
	051 Move X0, X19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move W1, W31
	057 Move X2, X31
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Call TouchState.set_isTapRelease, X0, X1
	061 Return 

Method: System.Void .ctor()

Disassembly:
	0x037C21E8 ADD X2, X31, 0x138
	0x037C21EC MOV W1, W21

ISIL:
	001 Move X1, X31
	002 Call Pointer..ctor, X0
	003 Return 

