Type: UnityEngine.InputSystem.LowLevel.InputStateHistory/Record

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* get_header()

Disassembly:
	0x0380FBC4 FCSEL S1, S1, S3, EQ
	0x0380FBC8 RET
	0x0380FBCC STR X30, [X31 - 0x30]!
	0x0380FBD0 STP X22, X21, [X31 + 0x10]
	0x0380FBD4 STP X20, X19, [X31 + 0x20]
	0x0380FBD8 ADRP X20, 0xBD2000
	0x0380FBDC ADRP X22, 0x8E4000
	0x0380FBE0 ADRP X21, 0x93B000
	0x0380FBE4 LDRB W8, [X20 + 0x4B1]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0]
	004 Compare X0, 0
	005 JumpIfEqual {11}
	006 Move W8, [X8+8]
	007 Subtract W1, W8, 1
	008 Move X30, [X31+16]
	009 Call InputStateHistory.GetRecord, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 get_recordIndex()

Disassembly:
	0x0380FBE8 LDR X22, [X22 + 0xB58]
	0x0380FBEC LDR X21, [X21 + 0x6B0]
	0x0380FBF0 MOV X19, X0

ISIL:
	001 Move W8, [X0+8]
	002 Subtract W0, W8, 1
	003 Return X0

Method: System.UInt32 get_version()

Disassembly:
	0x0380FBF4 TBNZ X8, 0x0, 0x380FC18
	0x0380FBF8 ADRP X0, 0x8E4000

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.Boolean get_valid()

Disassembly:
	0x0380FBFC LDR X0, [X0 + 0xB58]
	0x0380FC00 BL 0x1C16CF4
	0x0380FC04 ADRP X0, 0x93B000
	0x0380FC08 LDR X0, [X0 + 0x6B0]
	0x0380FC0C BL 0x1C16CF4
	0x0380FC10 MOVZ W8, 0x1
	0x0380FC14 STRB W8, [X20 + 0x4B1]
	0x0380FC18 LDRB W8, [X19 + 0x10]
	0x0380FC1C LDR X0, [X22]
	0x0380FC20 ADD X1, X31, 0xC
	0x0380FC24 STRB W8, [X31 + 0xC]
	0x0380FC28 BL 0x1C16E04
	0x0380FC2C MOV X20, X0
	0x0380FC30 LDRB W8, [X19 + 0x11]
	0x0380FC34 LDR X0, [X22]
	0x0380FC38 ADD X1, X31, 0x8
	0x0380FC3C STRB W8, [X31 + 0x8]
	0x0380FC40 BL 0x1C16E04

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {18}
	006 Move W8, [X0+8]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfEqual {18}
	010 Move X0, X19
	011 Call Record.get_header, X0
	012 Compare X0, 0
	013 JumpIfEqual {22}
	014 Move W8, [X0+8]
	015 Move W9, [X19+12]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSET not yet implemented."
	018 Move W0, W31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return X0
	022 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory get_owner()

Disassembly:
	0x0380FC44 LDR X8, [X21]
	0x0380FC48 MOV X2, X0

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Int32 get_index()

Disassembly:
	0x0380FC4C MOV X1, X20
	0x0380FC50 MOV X3, X31
	0x0380FC54 MOV X0, X8
	0x0380FC58 BL 0x3227BD4
	0x0380FC5C LDP X20, X19, [X31 + 0x20]
	0x0380FC60 LDP X22, X21, [X31 + 0x10]
	0x0380FC64 LDR X30, [X31], #0x30
	0x0380FC68 RET
	0x0380FC6C STP X30, X21, [X31 - 0x20]!
	0x0380FC70 STP X20, X19, [X31 + 0x10]
	0x0380FC74 ADRP X21, 0xBD2000
	0x0380FC78 ADRP X20, 0x93B000
	0x0380FC7C LDRB W8, [X21 + 0x4B2]
	0x0380FC80 LDR X20, [X20 + 0x6B8]
	0x0380FC84 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Record.CheckValid, X0
	005 Move X8, [X19]
	006 Compare X8, 0
	007 JumpIfEqual {17}
	008 Move W9, [X19+8]
	009 Move W10, [X8+80]
	010 Subtract W9, W9, 1
	011 Subtract W0, W9, W10
	012 Move W8, [X8+72]
	013 Add W0, W0, W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0
	017 Call 0x1C17F20

Method: System.Double get_time()

Disassembly:
	0x0380FD30 LDR X0, [X0 + 0x6C0]
	0x0380FD34 BL 0x1C16CF4
	0x0380FD38 MOVZ W8, 0x1
	0x0380FD3C STRB W8, [X20 + 0x4B3]
	0x0380FD40 LDRB W8, [X19 + 0x10]
	0x0380FD44 LDR X0, [X23]
	0x0380FD48 ADD X1, X31, 0xC
	0x0380FD4C STRB W8, [X31 + 0xC]
	0x0380FD50 BL 0x1C16E04
	0x0380FD54 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Record.CheckValid, X0
	005 Move X0, X19
	006 Call Record.get_header, X0
	007 Compare X0, 0
	008 JumpIfEqual {13}
	009 Move V0, [X0]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return V0
	013 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputControl get_control()

Disassembly:
	0x0380FD58 LDRB W8, [X19 + 0x11]
	0x0380FD5C LDR X0, [X23]
	0x0380FD60 ADD X1, X31, 0x8
	0x0380FD64 STRB W8, [X31 + 0x8]
	0x0380FD68 BL 0x1C16E04
	0x0380FD6C MOV X21, X0
	0x0380FD70 LDRB W8, [X19 + 0x12]
	0x0380FD74 LDR X0, [X23]
	0x0380FD78 ADD X1, X31, 0x4
	0x0380FD7C STRB W8, [X31 + 0x4]
	0x0380FD80 BL 0x1C16E04
	0x0380FD84 LDR X8, [X22]
	0x0380FD88 MOV X3, X0
	0x0380FD8C MOV X1, X20
	0x0380FD90 MOV X2, X21
	0x0380FD94 MOV X0, X8
	0x0380FD98 MOV X4, X31
	0x0380FD9C BL 0x3227C18
	0x0380FDA0 LDP X20, X19, [X31 + 0x30]
	0x0380FDA4 LDP X22, X21, [X31 + 0x20]
	0x0380FDA8 LDP X30, X23, [X31 + 0x10]
	0x0380FDAC ADD X31, X31, 0x40
	0x0380FDB0 RET
	0x0380FDB4 STP X30, X21, [X31 - 0x20]!
	0x0380FDB8 STP X20, X19, [X31 + 0x10]
	0x0380FDBC ADRP X21, 0xBD2000
	0x0380FDC0 ADRP X20, 0x93B000
	0x0380FDC4 LDRB W8, [X21 + 0x4B4]
	0x0380FDC8 LDR X20, [X20 + 0x690]
	0x0380FDCC MOV X19, X0
	0x0380FDD0 TBNZ X8, 0x0, 0x380FDE8
	0x0380FDD4 ADRP X0, 0x93B000
	0x0380FDD8 LDR X0, [X0 + 0x690]
	0x0380FDDC BL 0x1C16CF4
	0x0380FDE0 MOVZ W8, 0x1
	0x0380FDE4 STRB W8, [X21 + 0x4B4]
	0x0380FDE8 MOVZ W8, 0x101
	0x0380FDEC MOVZ W9, 0x1
	0x0380FDF0 STRH W8, [X19 + 0x10]
	0x0380FDF4 STRB W9, [X19 + 0x12]
	0x0380FDF8 LDR X1, [X20]
	0x0380FDFC MOV X0, X19
	0x0380FE00 LDP X20, X19, [X31 + 0x10]
	0x0380FE04 LDP X30, X21, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xBD3000
	006 Move W8, [X20+1182]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x90D000
	013 Move X0, [X0+3392]
	014 Call 0x1C17CF4
	015 Move X0, 0x90D000
	016 Move X0, [X0+3400]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1182], W8
	020 Move X0, X19
	021 Call Record.CheckValid, X0
	022 Move X0, [X19]
	023 Compare X0, 0
	024 JumpIfEqual {54}
	025 Call InputStateHistory.get_controls, X0
	026 Move X8, X1
	027 ShiftRight X8, 32
	028 And X8, X8, 0x7FFFFFFF
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move [X31], X0
	031 Move [X31+8], X1
	032 Move X8, [X19]
	033 Compare X8, 0
	034 JumpIfEqual {54}
	035 Move W8, [X8+96]
	036 Compare W8, 0
	037 JumpIfEqual {53}
	038 Move X0, X19
	039 Call Record.get_header, X0
	040 Compare X0, 0
	041 JumpIfEqual {54}
	042 Move W1, [X0+12]
	043 Move X8, 0x90D000
	044 Move X8, [X8+3400]
	045 Add X0, X31, 0
	046 Move X2, [X8]
	047 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X30, [X31+16]
	051 Add X31, X31, 48
	052 Return X0
	053 Move W1, W31
	054 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/Record get_next()

Disassembly:
	0x0380FE08 B 0x2E11398
	0x0380FE0C LDP S1, S2, [X0 + 0x10]
	0x0380FE10 LDR V3, [X0 + 0x18]
	0x0380FE14 B 0x380FE18
	0x0380FE18 STP D11, D10, [X31 - 0x30]!
	0x0380FE1C STP D9, D8, [X31 + 0x10]
	0x0380FE20 STP X30, X19, [X31 + 0x20]
	0x0380FE24 ADRP X19, 0xBCA000
	0x0380FE28 LDRB W8, [X19 + 0x5AA]
	0x0380FE2C FCMP S3, S1
	0x0380FE30 MOV V9.16B, V2.16B
	0x0380FE34 MOV V8.16B, V1.16B
	0x0380FE38 MOV V10.16B, V0.16B
	0x0380FE3C FCSEL S11, S1, S3, MI
	0x0380FE40 CBNZ W8, 0x380FE58
	0x0380FE44 ADRP X0, 0x8EB000
	0x0380FE48 LDR X0, [X0 + 0x4B8]
	0x0380FE4C BL 0x1C16CF4
	0x0380FE50 MOVZ W8, 0x1
	0x0380FE54 STRB W8, [X19 + 0x5AA]
	0x0380FE58 ADRP X8, 0x8EB000
	0x0380FE5C LDR X8, [X8 + 0x4B8]
	0x0380FE60 ADRP X9, 0xFFFFFFFFFD2DB000
	0x0380FE64 LDR V0, [X9 + 0x240]
	0x0380FE68 FABS S1, S10
	0x0380FE6C LDR X8, [X8]
	0x0380FE70 FABS S2, S8
	0x0380FE74 FCMP S1, S2
	0x0380FE78 FCSEL S1, S1, S2, GT
	0x0380FE7C LDR X8, [X8 + 0xB8]
	0x0380FE80 FMUL S0, S1, S0
	0x0380FE84 FMOV S1, 8
	0x0380FE88 LDR V3, [X8]
	0x0380FE8C FMUL S1, S3, S1
	0x0380FE90 FCMP S0, S1
	0x0380FE94 FCSEL S0, S0, S1, GT

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Call Record.CheckValid, X0
	006 Move X19, [X20]
	007 Compare X19, 0
	008 JumpIfEqual {37}
	009 Move W9, [X20+8]
	010 Move W8, [X19+80]
	011 Subtract W9, W9, 1
	012 Subtract W9, W9, W8
	013 Move W10, [X19+72]
	014 Add W9, W9, W10
	015 Move W10, [X19+68]
	016 Add W9, W9, 1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W10, [X19+72]
	019 Add W8, W9, W8
	020 Move X0, X19
	021 NotImplemented "Instruction SDIV not yet implemented."
	022 NotImplemented "Instruction MSUB not yet implemented."
	023 Move W1, W20
	024 Call InputStateHistory.GetRecord, X0, X1
	025 Compare X0, 0
	026 JumpIfEqual {37}
	027 Move W8, [X0+8]
	028 Add W1, W20, 1
	029 NotImplemented "Instruction BFM not yet implemented."
	030 Move X19, X31
	031 Move X1, X31
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/Record get_previous()

Disassembly:
	0x0380FE98 FABD S1, S8, S8
	0x0380FE9C FCMP S1, S0
	0x0380FEA0 B.PL 0x380FEB8
	0x0380FEA4 FCMP S11, S8
	0x0380FEA8 FMOV S0, -1
	0x0380FEAC FMOV S1, W31
	0x0380FEB0 FCSEL S0, S1, S0, LE
	0x0380FEB4 B 0x380FED8
	0x0380FEB8 FSUB S0, S10, S8
	0x0380FEBC FSUB S1, S9, S8
	0x0380FEC0 FDIV S0, S0, S1
	0x0380FEC4 FMOV S2, -1
	0x0380FEC8 FADD S1, S0, S0
	0x0380FECC FADD S1, S1, S2
	0x0380FED0 FCMP S11, S8
	0x0380FED4 FCSEL S0, S1, S0, GT
	0x0380FED8 LDP X30, X19, [X31 + 0x20]
	0x0380FEDC LDP D9, D8, [X31 + 0x10]
	0x0380FEE0 LDP D11, D10, [X31], #0x30
	0x0380FEE4 RET
	0x0380FEE8 FCMP S3, S1
	0x0380FEEC FCSEL S3, S1, S3, MI
	0x0380FEF0 FCMP S3, S1
	0x0380FEF4 B.LE 0x380FF10
	0x0380FEF8 FCMP S0, 0x0
	0x0380FEFC B.PL 0x380FF20
	0x0380FF00 FSUB S2, S3, S1
	0x0380FF04 FMUL S0, S2, S0
	0x0380FF08 FSUB S0, S1, S0
	0x0380FF0C RET
	0x0380FF10 FSUB S2, S2, S1
	0x0380FF14 FMUL S0, S2, S0
	0x0380FF18 FADD S0, S0, S1
	0x0380FF1C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Call Record.CheckValid, X0
	006 Move X19, [X20]
	007 Compare X19, 0
	008 JumpIfEqual {35}
	009 Move W9, [X20+8]
	010 Move W8, [X19+80]
	011 Subtract W9, W9, 1
	012 Subtract W9, W9, W8
	013 Move W10, [X19+72]
	014 Add W9, W9, W10
	015 Subtract W9, W9, 1
	016 Move W10, [X19+72]
	017 Add W8, W9, W8
	018 Move X0, X19
	019 NotImplemented "Instruction SDIV not yet implemented."
	020 NotImplemented "Instruction MSUB not yet implemented."
	021 Move W1, W20
	022 Call InputStateHistory.GetRecord, X0, X1
	023 Compare X0, 0
	024 JumpIfEqual {35}
	025 Move W8, [X0+8]
	026 Add W1, W20, 1
	027 NotImplemented "Instruction BFM not yet implemented."
	028 Move X19, X31
	029 Move X1, X31
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20

Method: System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputStateHistory owner, System.Int32 index, UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* header)

Disassembly:
	0x0380E27C STR V0, [X31]
	0x0380E280 LDR W8, [X0 + 0xE0]
	0x0380E284 CBNZ W8, 0x380E28C
	0x0380E288 BL 0x1C16DFC
	0x0380E28C ADD X0, X31, 0x0
	0x0380E290 MOV X1, X31
	0x0380E294 BL 0x3800B6C
	0x0380E298 LDRSW X8, [X19 + 0x40]
	0x0380E29C MOV W9, W0
	0x0380E2A0 CMP X9, X8

ISIL:
	001 Move [X31-16], X30
	002 Add W8, W2, 1
	003 Move [X0], X1
	004 Move [X0+8], W8
	005 Compare X3, 0
	006 JumpIfEqual {11}
	007 Move W8, [X3+8]
	008 Move [X0+12], W8
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: TValue ReadValue()

Disassembly:
	0x022B6BE8 ADD X31, X31, 0x60
	0x022B6BEC RET
	0x022B6BF0 BL 0x1C16F28
	0x022B6BF4 BL 0x1C16F20
	0x022B6BF8 STP D11, D10, [X31 - 0x60]!
	0x022B6BFC STP D9, D8, [X31 + 0x10]
	0x022B6C00 STR X30, [X31 + 0x20]
	0x022B6C04 STP X24, X23, [X31 + 0x30]
	0x022B6C08 STP X22, X21, [X31 + 0x40]
	0x022B6C0C STP X20, X19, [X31 + 0x50]
	0x022B6C10 LDR X8, [X4 + 0x38]
	0x022B6C14 MOV X20, X3
	0x022B6C18 MOV W19, W2
	0x022B6C1C MOV W22, W1
	0x022B6C20 MOV X21, X0
	0x022B6C24 CBNZ X8, 0x22B6C38
	0x022B6C28 MOV X0, X4
	0x022B6C2C MOV X23, X4
	0x022B6C30 BL 0x1C5C6E0
	0x022B6C34 LDR X8, [X23 + 0x38]
	0x022B6C38 SUB W9, W19, W22
	0x022B6C3C LDR X5, [X8 + 0x10]
	0x022B6C40 CMP W9, 0x0
	0x022B6C44 CINC W8, W9, LT
	0x022B6C48 ADD W2, W22, W8, 0x1, ASR
	0x022B6C4C MOV X0, X21
	0x022B6C50 MOV W1, W22
	0x022B6C54 MOV W3, W19
	0x022B6C58 MOV X4, X20
	0x022B6C5C BL 0x22B6520
	0x022B6C60 CBZ X21, 0x22B6D98
	0x022B6C64 LDR W8, [X21 + 0x18]
	0x022B6C68 CMP W8, W22
	0x022B6C6C B.LS 0x22B6D74
	0x022B6C70 MOV V8.16B, V0.16B
	0x022B6C74 MOV V9.16B, V1.16B
	0x022B6C78 MOV V10.16B, V2.16B
	0x022B6C7C MOV V11.16B, V3.16B
	0x022B6C80 CBZ X20, 0x22B6D98
	0x022B6C84 SXTW X23, W22
	0x022B6C88 ADD X8, X21, W22, 0x4, SXTW
	0x022B6C8C ADD X22, X8, 0x20
	0x022B6C90 ADD X8, X21, X23, 0x4, LSL
	0x022B6C94 LDR X9, [X20 + 0x18]
	0x022B6C98 LDR X0, [X20 + 0x40]
	0x022B6C9C LDP S2, S3, [X8 + 0x28]
	0x022B6CA0 LDR V1, [X8 + 0x24]
	0x022B6CA4 LDR V0, [X22]
	0x022B6CA8 LDR X1, [X20 + 0x28]
	0x022B6CAC MOV V4.16B, V8.16B
	0x022B6CB0 MOV V5.16B, V9.16B
	0x022B6CB4 MOV V6.16B, V10.16B
	0x022B6CB8 MOV V7.16B, V11.16B
	0x022B6CBC BLR X9
	0x022B6CC0 TBZ X0, 0x1F, 0x22B6CD8
	0x022B6CC4 LDR W8, [X21 + 0x18]
	0x022B6CC8 ADD W22, W23, 0x1
	0x022B6CCC CMP W22, W8
	0x022B6CD0 B.CC 0x22B6C80
	0x022B6CD4 B 0x22B6D74

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Add X29, X31, 0
	011 Subtract X31, X31, 32
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X25+40]
	014 Move X20, X2
	015 Move X19, X1
	016 Move X23, X0
	017 Move [X29-8], X8
	018 Move X8, [X2+56]
	019 Compare X8, 0
	020 JumpIfNotEqual {24}
	021 Move X0, X20
	022 Call 0x1C5D6E0
	023 Move X8, [X20+56]
	024 Move X8, [X8+8]
	025 Move W21, [X8+252]
	026 Add X8, X31, 0
	027 Add X9, X21, 15
	028 And X9, X9, 0x1FFFFFFFF
	029 Subtract X22, X8, X9
	030 Add X31, X22, 0
	031 Move X0, X23
	032 Move X1, X31
	033 Call Record.CheckValid, X0
	034 Move X24, [X23]
	035 Move X0, X23
	036 Move X1, X31
	037 Call Record.get_header, X0
	038 Compare X24, 0
	039 JumpIfEqual {69}
	040 Move X8, [X20+56]
	041 Subtract X3, X29, 24
	042 Move X2, X24
	043 Move X4, X22
	044 Move X1, [X8]
	045 Move X8, [X1]
	046 Move [X29-24], X0
	047 Move [X29-16], X22
	048 Move X9, [X1+16]
	049 Move X0, X8
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X0, X19
	052 Move X1, X22
	053 Move X2, X21
	054 Call 0x3EB2AC0
	055 Move X8, [X25+40]
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X31, X29, 0
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X22, [X31+48]
	062 Move X21, [X31+56]
	063 Move X24, [X31+32]
	064 Move X23, [X31+40]
	065 Move X25, [X31+16]
	066 Move X29, [X31+80]
	067 Move X30, [X31+88]
	068 Return X0
	069 Call 0x1C17F20
	070 Call 0x3EB2B20

Method: System.Object ReadValueAsObject()

Disassembly:
	0x0380FF20 FSUB S1, S2, S3
	0x0380FF24 FMUL S0, S1, S0
	0x0380FF28 FADD S0, S3, S0
	0x0380FF2C RET
	0x0380FF30 SUB X31, X31, 0x40
	0x0380FF34 STP X30, X23, [X31 + 0x10]
	0x0380FF38 STP X22, X21, [X31 + 0x20]
	0x0380FF3C STP X20, X19, [X31 + 0x30]
	0x0380FF40 ADRP X20, 0xBD2000
	0x0380FF44 ADRP X23, 0x8E4000
	0x0380FF48 ADRP X22, 0x93B000
	0x0380FF4C LDRB W8, [X20 + 0x4B5]
	0x0380FF50 LDR X23, [X23 + 0xA90]
	0x0380FF54 LDR X22, [X22 + 0x6C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Call Record.CheckValid, X0
	006 Move X19, [X20]
	007 Move X0, X20
	008 Call Record.get_header, X0
	009 Compare X19, 0
	010 JumpIfEqual {18}
	011 Move X1, X0
	012 Move X0, X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Call InputStateHistory.ReadValueAsObject, X0, X1
	017 Return X0
	018 Call 0x1C17F20

Method: System.Void* GetUnsafeMemoryPtr()

Disassembly:
	0x0380FF58 MOV X19, X0
	0x0380FF5C TBNZ X8, 0x0, 0x380FF80
	0x0380FF60 ADRP X0, 0x8E4000
	0x0380FF64 LDR X0, [X0 + 0xA90]
	0x0380FF68 BL 0x1C16CF4
	0x0380FF6C ADRP X0, 0x93B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Record.CheckValid, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]

Method: System.Void* GetUnsafeMemoryPtrUnchecked()

Disassembly:
	0x0380FF70 LDR X0, [X0 + 0x6C8]
	0x0380FF74 BL 0x1C16CF4
	0x0380FF78 MOVZ W8, 0x1
	0x0380FF7C STRB W8, [X20 + 0x4B5]
	0x0380FF80 LDR V0, [X19 + 0x10]
	0x0380FF84 LDR X0, [X23]
	0x0380FF88 ADD X1, X31, 0xC
	0x0380FF8C STR S0, [X31 + 0xC]
	0x0380FF90 BL 0x1C16E04
	0x0380FF94 MOV X20, X0
	0x0380FF98 LDR V0, [X19 + 0x14]
	0x0380FF9C LDR X0, [X23]
	0x0380FFA0 ADD X1, X31, 0x8
	0x0380FFA4 STR S0, [X31 + 0x8]
	0x0380FFA8 BL 0x1C16E04
	0x0380FFAC MOV X21, X0
	0x0380FFB0 LDR V0, [X19 + 0x18]
	0x0380FFB4 LDR X0, [X23]
	0x0380FFB8 ADD X1, X31, 0x4
	0x0380FFBC STR S0, [X31 + 0x4]
	0x0380FFC0 BL 0x1C16E04
	0x0380FFC4 LDR X8, [X22]
	0x0380FFC8 MOV X3, X0
	0x0380FFCC MOV X1, X20
	0x0380FFD0 MOV X2, X21
	0x0380FFD4 MOV X0, X8
	0x0380FFD8 MOV X4, X31
	0x0380FFDC BL 0x3227C18
	0x0380FFE0 LDP X20, X19, [X31 + 0x30]
	0x0380FFE4 LDP X22, X21, [X31 + 0x20]
	0x0380FFE8 LDP X30, X23, [X31 + 0x10]
	0x0380FFEC ADD X31, X31, 0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBD3000
	005 Move W8, [X20+1183]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x90D000
	012 Move X0, [X0+3392]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1183], W8
	016 Move X0, [X19]
	017 Compare X0, 0
	018 JumpIfEqual {40}
	019 Call InputStateHistory.get_controls, X0
	020 Move X8, X1
	021 ShiftRight X8, 32
	022 And X8, X8, 0x7FFFFFFF
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, [X19]
	025 Compare X8, 0
	026 JumpIfEqual {40}
	027 Move W8, [X8+96]
	028 Compare W8, 0
	029 JumpIfEqual {37}
	030 Move X0, X19
	031 Call Record.get_header, X0
	032 Add X0, X0, 16
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Move X0, X19
	038 Call Record.get_header, X0
	039 Add X0, X0, 12
	040 Call 0x1C17F20

Method: System.Void* GetUnsafeExtraMemoryPtr()

Disassembly:
	0x0380FFF0 RET
	0x0380FFF4 STP X30, X21, [X31 - 0x20]!
	0x0380FFF8 STP X20, X19, [X31 + 0x10]
	0x0380FFFC ADRP X20, 0xBD2000
	0x03810000 ADRP X21, 0x93A000
	0x03810004 LDRB W8, [X20 + 0x4B6]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Record.CheckValid, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]

Method: System.Void* GetUnsafeExtraMemoryPtrUnchecked()

Disassembly:
	0x03810008 B 0x3EB16D4
	0x0381000C MOV X19, X0
	0x03810010 TBNZ X8, 0x0, 0x3810028
	0x03810014 ADRP X0, 0x93A000
	0x03810018 LDR X0, [X0 + 0x678]
	0x0381001C BL 0x1C16CF4
	0x03810020 MOVZ W8, 0x1
	0x03810024 STRB W8, [X20 + 0x4B6]
	0x03810028 LDR X1, [X21]
	0x0381002C MOV X0, X19
	0x03810030 LDP X20, X19, [X31 + 0x10]
	0x03810034 LDP X30, X21, [X31], #0x20
	0x03810038 B 0x2E10570
	0x0381003C STP D9, D8, [X31 - 0x20]!
	0x03810040 STP X30, X19, [X31 + 0x10]
	0x03810044 ADRP X19, 0xBC9000
	0x03810048 LDRB W8, [X19 + 0x818]
	0x0381004C MOV V8.16B, V1.16B
	0x03810050 MOV V9.16B, V0.16B
	0x03810054 CBNZ W8, 0x381006C
	0x03810058 ADRP X0, 0x8E3000
	0x0381005C LDR X0, [X0 + 0x5A8]
	0x03810060 BL 0x1C16CF4
	0x03810064 MOVZ W8, 0x1
	0x03810068 STRB W8, [X19 + 0x818]
	0x0381006C ADRP X8, 0x8E3000
	0x03810070 LDR X8, [X8 + 0x5A8]
	0x03810074 LDR X0, [X8]
	0x03810078 LDR W8, [X0 + 0xE0]
	0x0381007C CBNZ W8, 0x3810084
	0x03810080 BL 0x1C16DFC
	0x03810084 ADRP X8, 0xFFFFFFFFFD2DA000
	0x03810088 LDR V2, [X8 + 0x17C]
	0x0381008C FMUL S0, S9, S9
	0x03810090 FMUL S1, S8, S8
	0x03810094 FADD S0, S0, S1
	0x03810098 FSQRT S1, S0
	0x0381009C FCMP S1, S2
	0x038100A0 B.LE 0x38100B0
	0x038100A4 FDIV S0, S9, S1
	0x038100A8 FDIV S1, S8, S1
	0x038100AC B 0x38100E4
	0x038100B0 ADRP X19, 0xBC9000
	0x038100B4 LDRB W8, [X19 + 0x78F]
	0x038100B8 CBNZ W8, 0x38100D0
	0x038100BC ADRP X0, 0x8EB000
	0x038100C0 LDR X0, [X0 + 0xF08]
	0x038100C4 BL 0x1C16CF4
	0x038100C8 MOVZ W8, 0x1
	0x038100CC STRB W8, [X19 + 0x78F]
	0x038100D0 ADRP X8, 0x8EB000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {37}
	006 Move W8, [X8+76]
	007 Compare W8, 0
	008 JumpIfEqual {38}
	009 Move X19, X0
	010 Call Record.get_header, X0
	011 Move X10, [X19]
	012 Compare X10, 0
	013 JumpIfEqual {37}
	014 Move W11, [X10+40]
	015 Move W9, [X10+64]
	016 NotImplemented "Instruction LDRSW not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W11, 16
	019 Move W10, [X10+96]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W10, 12
	022 NotImplemented "Instruction CSEL not yet implemented."
	023 Add W9, W8, W9
	024 Add W9, W9, W11
	025 Add W10, W9, 3
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 And W10, W10, 0xFFFFFFFC
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Add W10, W10, 4
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Subtract X8, X0, X8
	033 Add X0, X8, W9
	034 Move X30, [X31+16]
	035 Move X19, [X31+24]
	036 Return X0
	037 Call 0x1C17F20
	038 Move X0, 0x8E4000
	039 Move X0, [X0+1456]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X19, X0
	043 Move X0, 0x90E000
	044 Move X0, [X0+160]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Move X2, X31
	049 Call InvalidOperationException..ctor, X0, X1
	050 Move X0, 0x93B000
	051 Move X0, [X0+1640]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Call 0x1C17DEC

Method: System.Void CopyFrom(UnityEngine.InputSystem.LowLevel.InputStateHistory/Record record)

Disassembly:
	0x0380E3D4 ADRP X0, 0x8ED000
	0x0380E3D8 LDR X0, [X0 + 0x578]
	0x0380E3DC BL 0x1C16D08
	0x0380E3E0 BL 0x1C16F10
	0x0380E3E4 MOV X20, X0
	0x0380E3E8 ADRP X0, 0x90D000
	0x0380E3EC LDR X0, [X0 + 0xD60]
	0x0380E3F0 BL 0x1C16D08
	0x0380E3F4 MOV X2, X0
	0x0380E3F8 MOV X0, X20
	0x0380E3FC MOV X1, X19
	0x0380E400 MOV X3, X31
	0x0380E404 BL 0x330E16C
	0x0380E408 B 0x380E468
	0x0380E40C STR W8, [X31 + 0x18]
	0x0380E410 ADRP X0, 0x8E5000
	0x0380E414 LDR X0, [X0 + 0x758]
	0x0380E418 BL 0x1C16D08
	0x0380E41C ADD X1, X31, 0x18
	0x0380E420 BL 0x1C16E04
	0x0380E424 MOV X19, X0
	0x0380E428 ADRP X0, 0x93C000
	0x0380E42C LDR X0, [X0 + 0x648]
	0x0380E430 BL 0x1C16D08
	0x0380E434 MOV X1, X20
	0x0380E438 MOV X2, X19
	0x0380E43C MOV X3, X31
	0x0380E440 BL 0x3227BD4
	0x0380E444 MOV X19, X0
	0x0380E448 ADRP X0, 0x8E5000
	0x0380E44C LDR X0, [X0 + 0x5B0]
	0x0380E450 BL 0x1C16D08
	0x0380E454 BL 0x1C16F10
	0x0380E458 MOV X1, X19
	0x0380E45C MOV X2, X31
	0x0380E460 MOV X20, X0
	0x0380E464 BL 0x337DF1C
	0x0380E468 ADRP X0, 0x93C000
	0x0380E46C LDR X0, [X0 + 0x650]
	0x0380E470 BL 0x1C16D08
	0x0380E474 MOV X1, X0
	0x0380E478 MOV X0, X20
	0x0380E47C BL 0x1C16DEC
	0x0380E480 ADD X0, X0, 0xC
	0x0380E484 RET
	0x0380E488 ADD X0, X0, 0x10
	0x0380E48C RET
	0x0380E490 SUB X31, X31, 0x30
	0x0380E494 STP X30, X21, [X31 + 0x10]
	0x0380E498 STP X20, X19, [X31 + 0x20]
	0x0380E49C ADRP X21, 0xBD3000
	0x0380E4A0 ADRP X20, 0x93C000
	0x0380E4A4 LDRB W8, [X21 + 0x495]
	0x0380E4A8 LDR X20, [X20 + 0x658]
	0x0380E4AC MOV X19, X0
	0x0380E4B0 TBNZ X8, 0x0, 0x380E4C8
	0x0380E4B4 ADRP X0, 0x93C000
	0x0380E4B8 LDR X0, [X0 + 0x658]
	0x0380E4BC BL 0x1C16CF4
	0x0380E4C0 MOVZ W8, 0x1
	0x0380E4C4 STRB W8, [X21 + 0x495]
	0x0380E4C8 LDR X0, [X20]
	0x0380E4CC MOVI D0, 0xFFFFFFFF
	0x0380E4D0 ADD X1, X31, 0x0
	0x0380E4D4 STR X19, [X31]
	0x0380E4D8 STR D0, [X31 + 0x8]
	0x0380E4DC BL 0x1C16E04
	0x0380E4E0 LDP X20, X19, [X31 + 0x20]
	0x0380E4E4 LDP X30, X21, [X31 + 0x10]
	0x0380E4E8 ADD X31, X31, 0x30
	0x0380E4EC RET
	0x0380E4F0 MOVN W8, 0x0
	0x0380E4F4 STR X1, [X0]
	0x0380E4F8 STR W8, [X0 + 0x8]
	0x0380E4FC RET
	0x0380E500 B 0x380E490
	0x0380E504 STR X30, [X31 - 0x20]!
	0x0380E508 STP X20, X19, [X31 + 0x10]
	0x0380E50C ADRP X20, 0xBD3000
	0x0380E510 LDRB W8, [X20 + 0x497]
	0x0380E514 MOV X19, X0
	0x0380E518 TBNZ X8, 0x0, 0x380E53C
	0x0380E51C ADRP X0, 0x90D000
	0x0380E520 LDR X0, [X0 + 0xD68]
	0x0380E524 BL 0x1C16CF4
	0x0380E528 ADRP X0, 0x93B000
	0x0380E52C LDR X0, [X0 + 0x6A0]
	0x0380E530 BL 0x1C16CF4
	0x0380E534 MOVZ W8, 0x1
	0x0380E538 STRB W8, [X20 + 0x497]
	0x0380E53C LDR X8, [X19 + 0x30]!
	0x0380E540 CBZ X8, 0x380E55C
	0x0380E544 ADRP X8, 0x90D000
	0x0380E548 LDR X8, [X8 + 0xD68]
	0x0380E54C MOV X0, X19
	0x0380E550 LDR X1, [X8]
	0x0380E554 BL 0x23C9DBC
	0x0380E558 STP X31, X31, [X19]
	0x0380E55C LDP X20, X19, [X31 + 0x10]
	0x0380E560 LDR X30, [X31], #0x20
	0x0380E564 RET
	0x0380E568 SUB X31, X31, 0xA0
	0x0380E56C STP X30, X25, [X31 + 0x60]
	0x0380E570 STP X24, X23, [X31 + 0x70]
	0x0380E574 STP X22, X21, [X31 + 0x80]
	0x0380E578 STP X20, X19, [X31 + 0x90]
	0x0380E57C ADRP X20, 0xBD3000
	0x0380E580 LDRB W8, [X20 + 0x498]
	0x0380E584 MOV X19, X0
	0x0380E588 TBNZ X8, 0x0, 0x380E5E8
	0x0380E58C ADRP X0, 0x911000
	0x0380E590 LDR X0, [X0 + 0x48]
	0x0380E594 BL 0x1C16CF4
	0x0380E598 ADRP X0, 0x911000
	0x0380E59C LDR X0, [X0 + 0x50]
	0x0380E5A0 BL 0x1C16CF4
	0x0380E5A4 ADRP X0, 0x911000
	0x0380E5A8 LDR X0, [X0 + 0x58]
	0x0380E5AC BL 0x1C16CF4
	0x0380E5B0 ADRP X0, 0x90D000
	0x0380E5B4 LDR X0, [X0 + 0xD18]
	0x0380E5B8 BL 0x1C16CF4
	0x0380E5BC ADRP X0, 0x8E5000
	0x0380E5C0 LDR X0, [X0 + 0x5A8]
	0x0380E5C4 BL 0x1C16CF4
	0x0380E5C8 ADRP X0, 0x939000
	0x0380E5CC LDR X0, [X0 + 0xFE0]
	0x0380E5D0 BL 0x1C16CF4
	0x0380E5D4 ADRP X0, 0x911000
	0x0380E5D8 LDR X0, [X0 + 0x60]
	0x0380E5DC BL 0x1C16CF4
	0x0380E5E0 MOVZ W8, 0x1
	0x0380E5E4 STRB W8, [X20 + 0x498]
	0x0380E5E8 STP X31, X31, [X31 + 0x40]
	0x0380E5EC STR X31, [X31 + 0x50]
	0x0380E5F0 STP X31, X31, [X31 + 0x30]
	0x0380E5F4 STP X31, X31, [X31 + 0x20]
	0x0380E5F8 LDRB W8, [X19 + 0x60]
	0x0380E5FC CBNZ W8, 0x380E6E4
	0x0380E600 MOV X0, X19
	0x0380E604 STR W31, [X19 + 0x40]
	0x0380E608 BL 0x380D014
	0x0380E60C ADRP X8, 0x911000
	0x0380E610 LDR X8, [X8 + 0x60]
	0x0380E614 STP X0, X1, [X31 + 0x30]
	0x0380E618 ADD X0, X31, 0x30
	0x0380E61C LDR X9, [X8]
	0x0380E620 ADD X8, X31, 0x8
	0x0380E624 MOV X1, X9
	0x0380E628 BL 0x24FD990
	0x0380E62C LDUR V0, [X31 + 0x8]
	0x0380E630 LDR X8, [X31 + 0x18]
	0x0380E634 ADRP X22, 0x911000
	0x0380E638 ADRP X23, 0x911000
	0x0380E63C ADRP X24, 0x90D000
	0x0380E640 LDR X22, [X22 + 0x50]
	0x0380E644 LDR X23, [X23 + 0x58]
	0x0380E648 LDR X24, [X24 + 0xD18]
	0x0380E64C STR V0, [X31 + 0x4]
	0x0380E650 STR X8, [X31 + 0x50]
	0x0380E654 ADRP X25, 0x8E5000
	0x0380E658 LDR X25, [X25 + 0x5A8]
	0x0380E65C LDR X1, [X22]
	0x0380E660 ADD X0, X31, 0x40
	0x0380E664 BL 0x2BC496C
	0x0380E668 TBZ X0, 0x0, 0x380E6D0
	0x0380E66C LDR X1, [X23]
	0x0380E670 ADD X0, X31, 0x40
	0x0380E674 BL 0x2BC4998
	0x0380E678 CBZ X0, 0x380E778
	0x0380E67C LDR V0, [X0 + 0x1]
	0x0380E680 LDR X0, [X24]
	0x0380E684 LDR W20, [X19 + 0x40]
	0x0380E688 STR V0, [X31 + 0x2]
	0x0380E68C LDR W8, [X0 + 0xE0]
	0x0380E690 CBNZ W8, 0x380E698
	0x0380E694 BL 0x1C16DFC
	0x0380E698 ADD X0, X31, 0x20
	0x0380E69C MOV X1, X31
	0x0380E6A0 BL 0x3800B6C
	0x0380E6A4 MOV W21, W0
	0x0380E6A8 LDR X0, [X25]
	0x0380E6AC LDR W8, [X0 + 0xE0]
	0x0380E6B0 CBNZ W8, 0x380E6B8
	0x0380E6B4 BL 0x1C16DFC
	0x0380E6B8 MOV W0, W20
	0x0380E6BC MOV W1, W21
	0x0380E6C0 MOV X2, X31
	0x0380E6C4 BL 0x337EE48
	0x0380E6C8 STR W0, [X19 + 0x40]
	0x0380E6CC B 0x380E65C
	0x0380E6D0 ADRP X8, 0x911000
	0x0380E6D4 LDR X8, [X8 + 0x48]
	0x0380E6D8 ADD X0, X31, 0x40
	0x0380E6DC LDR X1, [X8]
	0x0380E6E0 BL 0x2BC4968
	0x0380E6E4 LDR W9, [X19 + 0x28]
	0x0380E6E8 ADRP X8, 0x939000
	0x0380E6EC LDR W10, [X19 + 0x40]
	0x0380E6F0 LDR W11, [X19 + 0x4C]
	0x0380E6F4 LDR X8, [X8 + 0xFE0]
	0x0380E6F8 CMP W9, 0x1
	0x0380E6FC MOVZ W9, 0x10
	0x0380E700 B.NE 0x380E714
	0x0380E704 LDRB W12, [X19 + 0x60]
	0x0380E708 CMP W12, 0x0
	0x0380E70C MOVZ W12, 0xC
	0x0380E710 CSEL W9, W12, W9, EQ
	0x0380E714 ADD W10, W11, W10
	0x0380E718 LDR X4, [X8]
	0x0380E71C ADD W8, W10, W9
	0x0380E720 ADD W9, W8, 0x3
	0x0380E724 CMP W8, 0x0
	0x0380E728 LDR W11, [X19 + 0x48]
	0x0380E72C CSEL W9, W9, W8, LT
	0x0380E730 AND W9, W9, 0xFFFFFFFC
	0x0380E734 CMP W8, W9
	0x0380E738 ADD W9, W9, 0x4
	0x0380E73C CSEL W8, W8, W9, EQ
	0x0380E740 MUL W1, W8, W11
	0x0380E744 ADD X0, X31, 0x8

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xBD4000
	011 Move W8, [X21+1184]
	012 Move X20, X1
	013 Move X19, X0
	014 Move [X31], X1
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x93C000
	020 Move X0, [X0+3072]
	021 Call 0x1C17CF4
	022 Move X0, 0x93D000
	023 Move X0, [X0+1520]
	024 Call 0x1C17CF4
	025 Move X0, 0x90E000
	026 Move X0, [X0+3392]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1184], W8
	030 Add X0, X31, 0
	031 Call Record.get_valid, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {174}
	036 Move X0, X19
	037 Call Record.CheckValid, X0
	038 Add X0, X31, 0
	039 Call Record.get_control, X0
	040 Move X8, [X19]
	041 Compare X8, 0
	042 JumpIfEqual {173}
	043 Move X21, 0x93D000
	044 Move X21, [X21+1520]
	045 Move X22, X0
	046 Move X0, X8
	047 Call InputStateHistory.get_controls, X0
	048 Move X3, [X21]
	049 Move X2, X22
	050 Call 0x223D9C8, X0, X1
	051 Move W21, W0
	052 Add W31, W0, 1
	053 Move X8, [X19]
	054 Compare X8, 0
	055 JumpIfEqual {173}
	056 Move W9, [X8+96]
	057 Compare W9, 0
	058 JumpIfEqual {221}
	059 Move X9, 0x93C000
	060 Move X9, [X9+3072]
	061 Add X0, X8, 32
	062 Add X1, X8, 40
	063 Move W3, 10
	064 Move X4, [X9]
	065 Move X2, X22
	066 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	067 Move W21, W0
	068 Move X8, [X19]
	069 Compare X8, 0
	070 JumpIfEqual {173}
	071 Compare X20, 0
	072 JumpIfEqual {173}
	073 Move W24, [X8+64]
	074 Move W8, [X20+64]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, X19
	077 Call Record.get_header, X0
	078 Move X23, X0
	079 Add X0, X31, 0
	080 Call Record.get_header, X0
	081 Move X22, X0
	082 Move W2, 12
	083 Move X0, X23
	084 Move X1, X22
	085 Move X3, X31
	086 Call UnsafeUtility.MemCpy, X0, X1, X2
	087 Move X9, [X19]
	088 Compare X9, 0
	089 JumpIfEqual {173}
	090 Move W8, [X9+84]
	091 Add W8, W8, 1
	092 Move [X9+84], W8
	093 Compare X23, 0
	094 JumpIfEqual {173}
	095 Move [X23+8], W8
	096 Move X0, [X19]
	097 Move [X19+12], W8
	098 Compare X0, 0
	099 JumpIfEqual {173}
	100 Call InputStateHistory.get_controls, X0
	101 Move X8, X1
	102 ShiftRight X8, 32
	103 And X8, X8, 0x7FFFFFFF
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, [X19]
	106 Compare X8, 0
	107 JumpIfEqual {173}
	108 Move W8, [X8+96]
	109 Compare W8, 0
	110 JumpIfEqual {172}
	111 Add X0, X23, 16
	112 Move [X23+12], W21
	113 Move W8, [X20+40]
	114 Move X2, W24
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move W8, [X20+96]
	117 Compare W8, 0
	118 JumpIfEqual {171}
	119 Add X1, X22, 16
	120 Move X3, X31
	121 Call UnsafeUtility.MemCpy, X0, X1, X2
	122 Move X1, [X19]
	123 Compare X1, 0
	124 JumpIfEqual {173}
	125 Move W21, [X1+76]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W8, [X20+76]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X0, X19
	130 Call Record.CheckValid, X0
	131 Move X0, X19
	132 Call Record.GetUnsafeExtraMemoryPtrUnchecked, X0
	133 Move X20, X0
	134 Add X0, X31, 0
	135 Call Record.CheckValid, X0
	136 Add X0, X31, 0
	137 Call Record.GetUnsafeExtraMemoryPtrUnchecked, X0
	138 Move X1, X0
	139 Move X0, X20
	140 Move X2, X21
	141 Move X3, X31
	142 Call UnsafeUtility.MemCpy, X0, X1, X2
	143 Move X1, [X19]
	144 Compare X1, 0
	145 JumpIfEqual {173}
	146 Move X8, [X1+16]
	147 Compare X8, 0
	148 JumpIfEqual {162}
	149 Move X2, [X19+8]
	150 Move X4, [X8+24]
	151 Move X0, [X8+64]
	152 Move X3, [X8+40]
	153 Move X20, [X31+64]
	154 Move X19, [X31+72]
	155 Move X22, [X31+48]
	156 Move X21, [X31+56]
	157 Move X24, [X31+32]
	158 Move X23, [X31+40]
	159 Move X30, [X31+16]
	160 Add X31, X31, 80
	161 CallNoReturn X4
	162 Move X20, [X31+64]
	163 Move X19, [X31+72]
	164 Move X22, [X31+48]
	165 Move X21, [X31+56]
	166 Move X24, [X31+32]
	167 Move X23, [X31+40]
	168 Move X30, [X31+16]
	169 Add X31, X31, 80
	170 Return 
	171 Add X1, X22, 12
	172 Add X0, X23, 12
	173 Call 0x1C17F20
	174 Move X0, 0x8EE000
	175 Move X0, [X0+1400]
	176 Call 0x1C17D08
	177 Call 0x1C17F10
	178 Move X19, X0
	179 Move X0, 0x910000
	180 Move X0, [X0+168]
	181 Call 0x1C17D08
	182 Move X20, X0
	183 Move X0, 0x910000
	184 Move X0, [X0+176]
	185 Call 0x1C17D08
	186 Move X2, X0
	187 Move X0, X19
	188 Move X1, X20
	189 Move X3, X31
	190 Call ArgumentException..ctor, X0, X1, X2
	191 Move X0, 0x93D000
	192 Move X0, [X0+1528]
	193 Call 0x1C17D08
	194 Move X1, X0
	195 Move X0, X19
	196 Call 0x1C17DEC
	197 Move X0, X20
	198 Call 0x19913C0
	199 Move W8, [X20+64]
	200 Move X19, 0x8E6000
	201 Move [X31+28], W8
	202 Move X19, [X19+1880]
	203 Move X0, X19
	204 Call 0x1C17D08
	205 Add X1, X31, 28
	206 Call 0x1C17E04
	207 Move X20, X0
	208 Move X0, X19
	209 Move [X31+24], W24
	210 Call 0x1C17D08
	211 Add X1, X31, 24
	212 Call 0x1C17E04
	213 Move X19, X0
	214 Move X0, 0x93D000
	215 Move X0, [X0+1536]
	216 Call 0x1C17D08
	217 Move X1, X20
	218 Move X2, X19
	219 Move X3, X31
	220 Call String.Format, X0, X1, X2
	221 Add X0, X31, 0
	222 Call Record.get_control, X0
	223 Move X19, X0
	224 Move X0, 0x93D000
	225 Move X0, [X0+1544]
	226 Call 0x1C17D08
	227 Move X1, X19
	228 Move X2, X31
	229 Call String.Format, X0, X1
	230 Move X19, X0
	231 Move X0, 0x8E6000
	232 Move X0, [X0+1456]
	233 Call 0x1C17D08
	234 Call 0x1C17F10
	235 Move X1, X19
	236 Move X2, X31
	237 Move X20, X0
	238 Call InvalidOperationException..ctor, X0, X1
	239 Move X0, 0x93D000
	240 Move X0, [X0+1528]
	241 Call 0x1C17D08
	242 Move X1, X0
	243 Move X0, X20
	244 Call 0x1C17DEC

Method: System.Void CheckValid()

Disassembly:
	0x0380FC88 TBNZ X8, 0x0, 0x380FCA0
	0x0380FC8C ADRP X0, 0x93B000
	0x0380FC90 LDR X0, [X0 + 0x6B8]
	0x0380FC94 BL 0x1C16CF4
	0x0380FC98 MOVZ W8, 0x1
	0x0380FC9C STRB W8, [X21 + 0x4B2]
	0x0380FCA0 MOVZ W8, 0x101
	0x0380FCA4 STRH W8, [X19 + 0x10]
	0x0380FCA8 LDR X1, [X20]
	0x0380FCAC MOV X0, X19
	0x0380FCB0 LDP X20, X19, [X31 + 0x10]
	0x0380FCB4 LDP X30, X21, [X31], #0x20
	0x0380FCB8 B 0x2E11034
	0x0380FCBC LDRB W8, [X0 + 0x10]
	0x0380FCC0 LDRB W9, [X0 + 0x12]
	0x0380FCC4 FNEG S3, S0
	0x0380FCC8 CMP W8, 0x0
	0x0380FCCC LDRB W8, [X0 + 0x11]
	0x0380FCD0 FCSEL S0, S0, S3, EQ
	0x0380FCD4 FNEG S3, S1
	0x0380FCD8 CMP W8, 0x0
	0x0380FCDC FCSEL S1, S1, S3, EQ
	0x0380FCE0 FNEG S3, S2
	0x0380FCE4 CMP W9, 0x0
	0x0380FCE8 FCSEL S2, S2, S3, EQ
	0x0380FCEC RET
	0x0380FCF0 SUB X31, X31, 0x40
	0x0380FCF4 STP X30, X23, [X31 + 0x10]
	0x0380FCF8 STP X22, X21, [X31 + 0x20]
	0x0380FCFC STP X20, X19, [X31 + 0x30]
	0x0380FD00 ADRP X20, 0xBD2000
	0x0380FD04 ADRP X23, 0x8E4000
	0x0380FD08 ADRP X22, 0x93B000
	0x0380FD0C LDRB W8, [X20 + 0x4B3]
	0x0380FD10 LDR X23, [X23 + 0xB58]
	0x0380FD14 LDR X22, [X22 + 0x6C0]
	0x0380FD18 MOV X19, X0
	0x0380FD1C TBNZ X8, 0x0, 0x380FD40
	0x0380FD20 ADRP X0, 0x8E4000
	0x0380FD24 LDR X0, [X0 + 0xB58]
	0x0380FD28 BL 0x1C16CF4
	0x0380FD2C ADRP X0, 0x93B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {20}
	006 Move W8, [X0+8]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfEqual {20}
	010 Move X0, X19
	011 Call Record.get_header, X0
	012 Compare X0, 0
	013 JumpIfEqual {27}
	014 Move W8, [X0+8]
	015 Move W9, [X19+12]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Move X0, 0x8E5000
	021 Move X0, [X0+1456]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X19, X0
	025 Move X0, 0x90F000
	026 Move X0, [X0+184]
	027 Call 0x1C17F20
	028 Move X0, 0x8E5000
	029 Move X0, [X0+1456]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0x90F000
	034 Move X0, [X0+192]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Move X2, X31
	039 Call InvalidOperationException..ctor, X0, X1
	040 Move X0, 0x93C000
	041 Move X0, [X0+1632]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call 0x1C17DEC

Method: System.Boolean Equals(UnityEngine.InputSystem.LowLevel.InputStateHistory/Record other)

Disassembly:
	0x038100D4 LDR X8, [X8 + 0xF08]
	0x038100D8 LDR X8, [X8]
	0x038100DC LDR X8, [X8 + 0xB8]
	0x038100E0 LDP S0, S1, [X8]
	0x038100E4 LDP X30, X19, [X31 + 0x10]
	0x038100E8 LDP D9, D8, [X31], #0x20
	0x038100EC RET
	0x038100F0 STR X30, [X31 - 0x20]!
	0x038100F4 STP X20, X19, [X31 + 0x10]
	0x038100F8 ADRP X19, 0xBD1000
	0x038100FC ADRP X20, 0x93A000
	0x03810100 LDRB W8, [X19 + 0x4B7]
	0x03810104 LDR X20, [X20 + 0x6D0]

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+8]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W8, [X0+12]
	006 Move X9, X2
	007 ShiftRight X9, 32
	008 And X9, X9, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0
	012 Move W0, W31
	013 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03810108 TBNZ X8, 0x0, 0x3810120
	0x0381010C ADRP X0, 0x93A000
	0x03810110 LDR X0, [X0 + 0x6D0]
	0x03810114 BL 0x1C16CF4
	0x03810118 MOVZ W8, 0x1
	0x0381011C STRB W8, [X19 + 0x4B7]
	0x03810120 LDR X0, [X20]
	0x03810124 LDP X20, X19, [X31 + 0x10]
	0x03810128 LDR X30, [X31], #0x20
	0x0381012C RET
	0x03810130 STP X30, X21, [X31 - 0x20]!
	0x03810134 STP X20, X19, [X31 + 0x10]
	0x03810138 ADRP X20, 0xBD1000
	0x0381013C ADRP X21, 0x93A000
	0x03810140 LDRB W8, [X20 + 0x4B8]
	0x03810144 LDR X21, [X21 + 0x6B8]
	0x03810148 MOV X19, X0
	0x0381014C TBNZ X8, 0x0, 0x3810164
	0x03810150 ADRP X0, 0x93A000
	0x03810154 LDR X0, [X0 + 0x6B8]
	0x03810158 BL 0x1C16CF4
	0x0381015C MOVZ W8, 0x1
	0x03810160 STRB W8, [X20 + 0x4B8]
	0x03810164 LDR X1, [X21]
	0x03810168 MOV X0, X19
	0x0381016C LDP X20, X19, [X31 + 0x10]
	0x03810170 LDP X30, X21, [X31], #0x20
	0x03810174 B 0x2E11034
	0x03810178 STR D10, [X31 - 0x30]!
	0x0381017C STP D9, D8, [X31 + 0x10]
	0x03810180 STP X30, X19, [X31 + 0x20]
	0x03810184 ADRP X19, 0xBC8000
	0x03810188 LDRB W8, [X19 + 0x785]
	0x0381018C MOV V8.16B, V2.16B
	0x03810190 MOV V9.16B, V1.16B
	0x03810194 MOV V10.16B, V0.16B
	0x03810198 CBNZ W8, 0x38101B0
	0x0381019C ADRP X0, 0x8E3000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD2000
	006 Move W8, [X21+1185]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x90F000
	014 Move X0, [X0+2224]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1185], W8
	018 Compare X20, 0
	019 JumpIfEqual {39}
	020 Move X8, 0x90F000
	021 Move X8, [X8+2224]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call 0x1C17E08
	027 Move X8, [X0]
	028 Move X9, [X19]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X0+8]
	031 Move W9, [X19+8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W9, [X19+12]
	034 Move X8, X8
	035 ShiftRight X8, 32
	036 And X8, X8, 0x7FFFFFFF
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move W0, W31
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x038101A0 LDR X0, [X0 + 0x5A8]
	0x038101A4 BL 0x1C16CF4
	0x038101A8 MOVZ W8, 0x1
	0x038101AC STRB W8, [X19 + 0x785]
	0x038101B0 ADRP X8, 0x8E3000
	0x038101B4 LDR X8, [X8 + 0x5A8]
	0x038101B8 LDR X0, [X8]
	0x038101BC LDR W8, [X0 + 0xE0]
	0x038101C0 CBNZ W8, 0x38101C8
	0x038101C4 BL 0x1C16DFC
	0x038101C8 FMUL S0, S10, S10
	0x038101CC FMUL S1, S9, S9
	0x038101D0 ADRP X8, 0xFFFFFFFFFD2DA000
	0x038101D4 FADD S0, S0, S1
	0x038101D8 LDR V1, [X8 + 0x17C]
	0x038101DC FMUL S2, S8, S8
	0x038101E0 FADD S0, S2, S0
	0x038101E4 FSQRT S2, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X8, [X0]
	008 Move X9, [X8+344]
	009 Move X1, [X8+352]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move W8, 397
	012 Multiply W8, W0, W8
	013 Move W8, W31
	014 Move W9, [X19+8]
	015 Move W10, [X19+12]
	016 Xor W8, W9, W8
	017 Move W9, 397
	018 Multiply W8, W8, W9
	019 Xor W0, W8, W10
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return X0

Method: System.String ToString()

Disassembly:
	0x038101E8 FCMP S2, S1
	0x038101EC B.LE 0x3810200
	0x038101F0 FDIV S0, S10, S2
	0x038101F4 FDIV S1, S9, S2
	0x038101F8 FDIV S2, S8, S2
	0x038101FC B 0x3810238
	0x03810200 ADRP X19, 0xBC8000
	0x03810204 LDRB W8, [X19 + 0x783]
	0x03810208 CBNZ W8, 0x3810220
	0x0381020C ADRP X0, 0x8E3000
	0x03810210 LDR X0, [X0 + 0x5A0]
	0x03810214 BL 0x1C16CF4
	0x03810218 MOVZ W8, 0x1
	0x0381021C STRB W8, [X19 + 0x783]
	0x03810220 ADRP X8, 0x8E3000
	0x03810224 LDR X8, [X8 + 0x5A0]
	0x03810228 LDR X8, [X8]
	0x0381022C LDR X8, [X8 + 0xB8]
	0x03810230 LDP S0, S1, [X8]
	0x03810234 LDR V2, [X8 + 0x8]
	0x03810238 LDP X30, X19, [X31 + 0x20]
	0x0381023C LDP D9, D8, [X31 + 0x10]
	0x03810240 LDR V10, [X31], #0x30
	0x03810244 RET
	0x03810248 STR X30, [X31 - 0x20]!
	0x0381024C STP X20, X19, [X31 + 0x10]
	0x03810250 ADRP X19, 0xBD1000
	0x03810254 ADRP X20, 0x93A000
	0x03810258 LDRB W8, [X19 + 0x4B9]
	0x0381025C LDR X20, [X20 + 0x6D8]
	0x03810260 TBNZ X8, 0x0, 0x3810278
	0x03810264 ADRP X0, 0x93A000
	0x03810268 LDR X0, [X0 + 0x6D8]
	0x0381026C BL 0x1C16CF4
	0x03810270 MOVZ W8, 0x1
	0x03810274 STRB W8, [X19 + 0x4B9]
	0x03810278 LDR X0, [X20]
	0x0381027C LDP X20, X19, [X31 + 0x10]
	0x03810280 LDR X30, [X31], #0x20
	0x03810284 RET
	0x03810288 STP X30, X21, [X31 - 0x20]!
	0x0381028C STP X20, X19, [X31 + 0x10]
	0x03810290 ADRP X20, 0xBD1000
	0x03810294 ADRP X21, 0x93A000
	0x03810298 LDRB W8, [X20 + 0x4BA]
	0x0381029C LDR X21, [X21 + 0x690]
	0x038102A0 MOV X19, X0
	0x038102A4 TBNZ X8, 0x0, 0x38102BC
	0x038102A8 ADRP X0, 0x93A000
	0x038102AC LDR X0, [X0 + 0x690]
	0x038102B0 BL 0x1C16CF4
	0x038102B4 MOVZ W8, 0x1
	0x038102B8 STRB W8, [X20 + 0x4BA]
	0x038102BC LDR X1, [X21]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xBD2000
	009 Move W8, [X20+1186]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x8E7000
	016 Move X0, [X0+2424]
	017 Call 0x1C17CF4
	018 Move X0, 0x90E000
	019 Move X0, [X0+200]
	020 Call 0x1C17CF4
	021 Move X0, 0x90B000
	022 Move X0, [X0+1280]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1186], W8
	026 Move X0, X19
	027 Call Record.get_valid, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {55}
	032 Move X22, 0x8E7000
	033 Move X23, 0x90E000
	034 Move X22, [X22+2424]
	035 Move X23, [X23+200]
	036 Move X0, X19
	037 Call Record.get_control, X0
	038 Move X20, X0
	039 Move X0, X19
	040 Call Record.ReadValueAsObject, X0
	041 Move X21, X0
	042 Move X0, X19
	043 Call Record.get_time, X0
	044 Move X0, [X22]
	045 Add X1, X31, 8
	046 Move [X31+8], D0
	047 Call 0x1C17E04
	048 Move X8, [X23]
	049 Move X3, X0
	050 Move X1, X20
	051 Move X2, X21
	052 Move X0, X8
	053 Move X4, X31
	054 Call String.Format, X0, X1, X2, X3
	055 Move X8, 0x90B000
	056 Move X8, [X8+1280]
	057 Move X0, [X8]
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X30, [X31+16]
	063 Move X23, [X31+24]
	064 Add X31, X31, 64
	065 Return X0

