Type: UnityEngine.InputSystem.LowLevel.InputEventPtr

Method: System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)

Disassembly:
	0x0380369C CBNZ X20, 0x3803678
	0x038036A0 ADRP X0, 0x8F5000

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Boolean get_valid()

Disassembly:
	0x037F90A4 LDR X0, [X0 + 0xBF0]
	0x037F90A8 BL 0x1C16D08
	0x037F90AC MOV X1, X0
	0x037F90B0 MOV X0, X19

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_handled()

Disassembly:
	0x038036A4 LDR X0, [X0 + 0x528]
	0x038036A8 BL 0x1C16D08
	0x038036AC BL 0x1C16F10
	0x038036B0 MOV X19, X0
	0x038036B4 ADRP X0, 0x918000
	0x038036B8 LDR X0, [X0 + 0xD20]
	0x038036BC BL 0x1C16D08

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {9}
	004 Move W8, [X8+16]
	005 Move W0, W8
	006 ShiftRight W0, 31
	007 And W0, W0, 0x7FFFFFFF
	008 Return X0
	009 Move W0, W31
	010 Return X0

Method: System.Void set_handled(System.Boolean value)

Disassembly:
	0x037FCCE0 LDR X0, [X0 + 0xE98]
	0x037FCCE4 BL 0x1C16CF4
	0x037FCCE8 ADRP X0, 0x94D000
	0x037FCCEC LDR X0, [X0 + 0xEA0]
	0x037FCCF0 BL 0x1C16CF4
	0x037FCCF4 ADRP X0, 0x94D000
	0x037FCCF8 LDR X0, [X0 + 0xEA8]
	0x037FCCFC BL 0x1C16CF4
	0x037FCD00 ADRP X0, 0x94D000
	0x037FCD04 LDR X0, [X0 + 0xEB0]
	0x037FCD08 BL 0x1C16CF4
	0x037FCD0C ADRP X0, 0x94D000
	0x037FCD10 LDR X0, [X0 + 0xEB8]
	0x037FCD14 BL 0x1C16CF4
	0x037FCD18 ADRP X0, 0x91F000
	0x037FCD1C LDR X0, [X0 + 0x270]
	0x037FCD20 BL 0x1C16CF4
	0x037FCD24 ADRP X0, 0x94C000
	0x037FCD28 LDR X0, [X0 + 0xFB0]
	0x037FCD2C BL 0x1C16CF4
	0x037FCD30 ADRP X0, 0x94D000
	0x037FCD34 LDR X0, [X0 + 0xEC0]
	0x037FCD38 BL 0x1C16CF4
	0x037FCD3C ADRP X0, 0x923000
	0x037FCD40 LDR X0, [X0 + 0xE30]
	0x037FCD44 BL 0x1C16CF4
	0x037FCD48 ADRP X0, 0x94D000
	0x037FCD4C LDR X0, [X0 + 0xEC8]
	0x037FCD50 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {15}
	006 Move W9, [X8+16]
	007 And W31, W1, 1
	008 Move W10, 0x80000000
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 NotImplemented "Instruction BFM not yet implemented."
	011 Move [X8+16], W10
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Move X0, 0x8F8000
	016 Move X0, [X0+1456]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0x94E000
	021 Move X0, [X0+3488]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Move X2, X31
	026 Call InvalidOperationException..ctor, X0, X1
	027 Move X0, 0x94E000
	028 Move X0, [X0+3496]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call 0x1C17DEC

Method: System.Int32 get_id()

Disassembly:
	0x038036C0 MOV X1, X0
	0x038036C4 MOV X0, X19
	0x038036C8 MOV X2, X31
	0x038036CC BL 0x330E100
	0x038036D0 ADRP X0, 0x947000
	0x038036D4 LDR X0, [X0 + 0x210]
	0x038036D8 BL 0x1C16D08

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {7}
	004 Move W8, [X8+16]
	005 And W0, W8, 0x7FFFFFFF
	006 Return X0
	007 Move W0, W31
	008 Return X0

Method: System.Void set_id(System.Int32 value)

Disassembly:
	0x038036DC MOV X1, X0
	0x038036E0 MOV X0, X19
	0x038036E4 BL 0x1C16DEC
	0x038036E8 STP X30, X23, [X31 - 0x30]!
	0x038036EC STP X22, X21, [X31 + 0x10]
	0x038036F0 STP X20, X19, [X31 + 0x20]
	0x038036F4 MOV X23, X1
	0x038036F8 MOV X1, X31
	0x038036FC MOV X20, X4
	0x03803700 MOV X21, X3
	0x03803704 MOV W22, W2
	0x03803708 MOV X19, X0
	0x0380370C BL 0x33BDD8C
	0x03803710 AND X8, X23, 0x0
	0x03803714 STR X8, [X19 + 0x78]
	0x03803718 TBZ X22, 0x0, 0x3803738
	0x0380371C CMP X21, 0x0
	0x03803720 MOVZ W8, 0x10000000
	0x03803724 CSEL X8, X21, X8, GE
	0x03803728 STR X8, [X19 + 0x80]
	0x0380372C TBNZ X20, 0x0, 0x3803740
	0x03803730 STR X20, [X19 + 0x88]
	0x03803734 B 0x3803748
	0x03803738 STR X8, [X19 + 0x80]
	0x0380373C B 0x3803748
	0x03803740 MOVZ W8, 0x100000
	0x03803744 STR X8, [X19 + 0x88]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {13}
	006 Move W9, [X8+16]
	007 And W9, W9, 0x80000000
	008 Or W9, W9, W1
	009 Move [X8+16], W9
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Move X0, 0x8F1000
	014 Move X0, [X0+1456]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x947000
	019 Move X0, [X0+3488]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call InvalidOperationException..ctor, X0, X1
	025 Move X0, 0x948000
	026 Move X0, [X0+392]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: UnityEngine.InputSystem.Utilities.FourCC get_type()

Disassembly:
	0x037F90B4 BL 0x1C16DEC
	0x037F90B8 BL 0x1C16F20
	0x037F90BC SUB X31, X31, 0x30
	0x037F90C0 STR X30, [X31 + 0x10]
	0x037F90C4 STP X20, X19, [X31 + 0x20]
	0x037F90C8 ADRP X20, 0xBE8000

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move W0, [X8]
	005 Return X0
	006 Move X0, X31
	007 Return X0

Method: System.UInt32 get_sizeInBytes()

Disassembly:
	0x03803748 LDP X20, X19, [X31 + 0x20]
	0x0380374C LDP X22, X21, [X31 + 0x10]
	0x03803750 LDP X30, X23, [X31], #0x30
	0x03803754 RET
	0x03803758 STR X30, [X31 - 0x30]!
	0x0380375C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 NotImplemented "Instruction LDRH not yet implemented."
	005 Return X0
	006 Move W0, W31
	007 Return X0

Method: System.Int32 get_deviceId()

Disassembly:
	0x03803760 STP X20, X19, [X31 + 0x20]
	0x03803764 ADRP X21, 0xBDE000
	0x03803768 LDRB W8, [X21 + 0x42D]
	0x0380376C MOV X19, X1
	0x03803770 MOV X20, X0
	0x03803774 TBNZ X8, 0x0, 0x380378C

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 NotImplemented "Instruction LDRH not yet implemented."
	005 Return X0
	006 Move W0, W31
	007 Return X0

Method: System.Void set_deviceId(System.Int32 value)

Disassembly:
	0x03803778 ADRP X0, 0x8F0000
	0x0380377C LDR X0, [X0 + 0xE00]
	0x03803780 BL 0x1C16CF4
	0x03803784 MOVZ W8, 0x1
	0x03803788 STRB W8, [X21 + 0x42D]
	0x0380378C MOV X0, X19
	0x03803790 MOV X1, X31
	0x03803794 BL 0x32277A8
	0x03803798 TBNZ X0, 0x0, 0x3803834
	0x0380379C ADRP X22, 0x8F0000
	0x038037A0 LDR X22, [X22 + 0xE00]
	0x038037A4 MOV X0, X19
	0x038037A8 MOV X1, X31
	0x038037AC BL 0x32ED248
	0x038037B0 MOV X19, X0
	0x038037B4 MOV X0, X20
	0x038037B8 MOV X1, X19
	0x038037BC BL 0x3803924
	0x038037C0 MOV X20, X31
	0x038037C4 CBZ X19, 0x3803820
	0x038037C8 LDR X8, [X19]
	0x038037CC LDR X1, [X22]
	0x038037D0 LDRH W9, [X8 + 0x12E]
	0x038037D4 CBZ X9, 0x38037F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 NotImplemented "Instruction STRH not yet implemented."
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x8F1000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x947000
	016 Move X0, [X0+3488]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x948000
	023 Move X0, [X0+400]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Double get_time()

Disassembly:
	0x037FD758 CBZ X20, 0x37FD798
	0x037FD75C ADRP X8, 0x94C000
	0x037FD760 LDR X8, [X8 + 0xF10]
	0x037FD764 MOV X0, X20
	0x037FD768 LDR X1, [X8]
	0x037FD76C ADD X8, X31, 0x8
	0x037FD770 BL 0x2211088
	0x037FD774 LDR X8, [X31 + 0x28]
	0x037FD778 LDUR V0, [X31 + 0x18]
	0x037FD77C LDUR V1, [X31 + 0x8]
	0x037FD780 LDP X30, X21, [X31 + 0x30]
	0x037FD784 STR X8, [X19 + 0x20]
	0x037FD788 STP V1, V0, [X19]
	0x037FD78C LDP X20, X19, [X31 + 0x40]
	0x037FD790 ADD X31, X31, 0x50
	0x037FD794 RET
	0x037FD798 ADRP X0, 0x8FB000
	0x037FD79C LDR X0, [X0 + 0x528]
	0x037FD7A0 BL 0x1C16D08
	0x037FD7A4 BL 0x1C16F10
	0x037FD7A8 MOV X19, X0
	0x037FD7AC ADRP X0, 0x948000
	0x037FD7B0 LDR X0, [X0 + 0xD8]
	0x037FD7B4 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, [X0]
	006 Compare X19, 0
	007 JumpIfEqual {26}
	008 Move X21, 0xBE5000
	009 Move X20, 0x91F000
	010 Move W8, [X21+1035]
	011 Move X20, [X20+3784]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x91F000
	017 Move X0, [X0+3784]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1035], W8
	021 Move X8, [X20]
	022 Move V0, [X19+8]
	023 Move X8, [X8+184]
	024 Move V1, [X8+8]
	025 Subtract D0, D0, D1
	026 Move D0, X31
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return V0

Method: System.Void set_time(System.Double value)

Disassembly:
	0x038037D8 LDR X10, [X8 + 0xB0]
	0x038037DC ADD X10, X10, 0x8
	0x038037E0 LDUR X11, [X10 - 0x8]
	0x038037E4 CMP X11, X1
	0x038037E8 B.EQ 0x3803808
	0x038037EC SUBS X9, X9, 0x1
	0x038037F0 ADD X10, X10, 0x10
	0x038037F4 B.NE 0x38037E0
	0x038037F8 MOV X0, X19
	0x038037FC MOV W2, W31
	0x03803800 BL 0x1C5C788
	0x03803804 B 0x3803814
	0x03803808 LDRSW X9, [X10]
	0x0380380C ADD X8, X8, X9, 0x4, LSL
	0x03803810 ADD X0, X8, 0x138
	0x03803814 LDP X8, X1, [X0]
	0x03803818 MOV X0, X19
	0x0380381C BLR X8
	0x03803820 CBNZ X20, 0x380387C
	0x03803824 LDP X20, X19, [X31 + 0x20]
	0x03803828 LDP X22, X21, [X31 + 0x10]
	0x0380382C LDR X30, [X31], #0x30
	0x03803830 RET
	0x03803834 ADRP X0, 0x8F5000
	0x03803838 LDR X0, [X0 + 0x528]
	0x0380383C BL 0x1C16D08
	0x03803840 BL 0x1C16F10
	0x03803844 MOV X19, X0
	0x03803848 ADRP X0, 0x947000
	0x0380384C LDR X0, [X0 + 0x218]
	0x03803850 BL 0x1C16D08
	0x03803854 MOV X1, X0
	0x03803858 MOV X0, X19
	0x0380385C MOV X2, X31
	0x03803860 BL 0x330E100
	0x03803864 ADRP X0, 0x947000
	0x03803868 LDR X0, [X0 + 0x220]
	0x0380386C BL 0x1C16D08
	0x03803870 MOV X1, X0
	0x03803874 MOV X0, X19
	0x03803878 BL 0x1C16DEC
	0x0380387C MOV X0, X20
	0x03803880 BL 0x1C16F18

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0]
	007 Compare X19, 0
	008 JumpIfEqual {34}
	009 Move X20, 0xBDF000
	010 Move X21, 0x919000
	011 Move W8, [X20+1036]
	012 Move X21, [X21+3784]
	013 Move V8, V0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x919000
	019 Move X0, [X0+3784]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1036], W8
	023 Move X8, [X21]
	024 Move X30, [X31+16]
	025 Move X21, [X31+24]
	026 Move X8, [X8+184]
	027 Move V0, [X8+8]
	028 Add D0, D0, D8
	029 Move [X19+8], D0
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move V8, [X31+48]
	033 Return 
	034 Move X0, 0x8F1000
	035 Move X0, [X0+1456]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0x947000
	040 Move X0, [X0+3488]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X19
	044 Move X2, X31
	045 Call InvalidOperationException..ctor, X0, X1
	046 Move X0, 0x948000
	047 Move X0, [X0+408]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call 0x1C17DEC

Method: System.Double get_internalTime()

Disassembly:
	0x03803884 CMP W1, 0x1
	0x03803888 MOV X21, X0
	0x0380388C B.NE 0x38038A4
	0x03803890 MOV X0, X21
	0x03803894 BL 0x3EB1AD0
	0x03803898 LDR X20, [X0]

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move V0, [X8+8]
	005 Return V0
	006 Move D0, X31
	007 Return V0

Method: System.Void set_internalTime(System.Double value)

Disassembly:
	0x0380389C BL 0x3EB1AE0
	0x038038A0 B 0x38037C4
	0x038038A4 MOV X20, X31
	0x038038A8 B 0x38038B0
	0x038038AC MOV X21, X0
	0x038038B0 CBZ X19, 0x380390C
	0x038038B4 LDR X8, [X19]
	0x038038B8 LDR X1, [X22]
	0x038038BC LDRH W9, [X8 + 0x12E]
	0x038038C0 CBZ X9, 0x38038E4
	0x038038C4 LDR X10, [X8 + 0xB0]
	0x038038C8 ADD X10, X10, 0x8
	0x038038CC LDUR X11, [X10 - 0x8]
	0x038038D0 CMP X11, X1
	0x038038D4 B.EQ 0x38038F4
	0x038038D8 SUBS X9, X9, 0x1
	0x038038DC ADD X10, X10, 0x10
	0x038038E0 B.NE 0x38038CC
	0x038038E4 MOV X0, X19
	0x038038E8 MOV W2, W31
	0x038038EC BL 0x1C5C788
	0x038038F0 B 0x3803900
	0x038038F4 LDRSW X9, [X10]
	0x038038F8 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], D0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x8F1000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x947000
	016 Move X0, [X0+3488]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x948000
	023 Move X0, [X0+416]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.InputEvent* get_data()

Disassembly:
	0x038038FC ADD X0, X8, 0x138
	0x03803900 LDP X8, X1, [X0]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: UnityEngine.InputSystem.Utilities.FourCC get_stateFormat()

Disassembly:
	0x03803904 MOV X0, X19
	0x03803908 BLR X8
	0x0380390C CBNZ X20, 0x3803918
	0x03803910 MOV X0, X21
	0x03803914 BL 0x1D2C690
	0x03803918 MOV X0, X20
	0x0380391C BL 0x1C16F18
	0x03803920 BL 0x1990590
	0x03803924 SUB X31, X31, 0x70
	0x03803928 STP X29, X30, [X31 + 0x10]
	0x0380392C STP X28, X27, [X31 + 0x20]
	0x03803930 STP X26, X25, [X31 + 0x30]
	0x03803934 STP X24, X23, [X31 + 0x40]
	0x03803938 STP X22, X21, [X31 + 0x50]
	0x0380393C STP X20, X19, [X31 + 0x60]
	0x03803940 ADRP X21, 0xBDE000
	0x03803944 LDRB W8, [X21 + 0x42E]
	0x03803948 MOV X19, X1
	0x0380394C MOV X20, X0
	0x03803950 TBNZ X8, 0x0, 0x38039D4
	0x03803954 ADRP X0, 0x8F0000
	0x03803958 LDR X0, [X0 + 0x970]
	0x0380395C BL 0x1C16CF4
	0x03803960 ADRP X0, 0x947000
	0x03803964 LDR X0, [X0 + 0x228]
	0x03803968 BL 0x1C16CF4
	0x0380396C ADRP X0, 0x922000
	0x03803970 LDR X0, [X0 + 0x260]
	0x03803974 BL 0x1C16CF4
	0x03803978 ADRP X0, 0x8F0000
	0x0380397C LDR X0, [X0 + 0x618]
	0x03803980 BL 0x1C16CF4
	0x03803984 ADRP X0, 0x8F0000
	0x03803988 LDR X0, [X0 + 0xE00]
	0x0380398C BL 0x1C16CF4
	0x03803990 ADRP X0, 0x947000
	0x03803994 LDR X0, [X0 + 0x230]
	0x03803998 BL 0x1C16CF4
	0x0380399C ADRP X0, 0x8F0000
	0x038039A0 LDR X0, [X0 + 0xE18]
	0x038039A4 BL 0x1C16CF4
	0x038039A8 ADRP X0, 0x947000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Compare X8, 0
	006 JumpIfEqual {19}
	007 Move W9, [X8]
	008 Move W10, 0x5441
	009 NotImplemented "Instruction MOVK not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W10, 0x4154
	012 NotImplemented "Instruction MOVK not yet implemented."
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W0, [X8+20]
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return X0
	019 Add X0, X31, 8
	020 Move [X31+8], X8
	021 Call InputEventPtr.ToString, X0
	022 Move X19, X0
	023 Move X0, 0x948000
	024 Move X0, [X0+424]
	025 Call 0x1C17D08
	026 Move X1, X19
	027 Move X2, X31
	028 Call String.Concat, X0, X1
	029 Move X19, X0
	030 Move X0, 0x8F1000
	031 Move X0, [X0+1456]
	032 Call 0x1C17D08
	033 Call 0x1C17F10
	034 Move X1, X19
	035 Move X2, X31
	036 Move X20, X0
	037 Call InvalidOperationException..ctor, X0, X1
	038 Move X0, 0x948000
	039 Move X0, [X0+432]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X20
	043 Call 0x1C17DEC

Method: System.UInt32 get_stateSizeInBytes()

Disassembly:
	0x03803A40 CMP W9, 0x2
	0x03803A44 CSET W22, EQ
	0x03803A48 LDR W10, [X8 + 0xE0]
	0x03803A4C CBNZ W10, 0x3803A58
	0x03803A50 MOV X0, X8
	0x03803A54 BL 0x1C16DFC
	0x03803A58 ADD X0, X31, 0x8
	0x03803A5C MOVZ W1, 0x49
	0x03803A60 MOVZ W2, 0x45
	0x03803A64 MOVZ W3, 0x56
	0x03803A68 MOVZ W4, 0x54
	0x03803A6C MOV X5, X31
	0x03803A70 STR W31, [X31 + 0x8]
	0x03803A74 BL 0x375AA28
	0x03803A78 CBZ X21, 0x3803E94
	0x03803A7C LDR X8, [X21]
	0x03803A80 LDR W1, [X31 + 0x8]
	0x03803A84 ADRP X24, 0x8F0000
	0x03803A88 MOV X0, X21
	0x03803A8C LDR X9, [X8 + 0x248]
	0x03803A90 LDR X2, [X8 + 0x250]
	0x03803A94 LDR X24, [X24 + 0x970]
	0x03803A98 BLR X9
	0x03803A9C LDR X8, [X23]
	0x03803AA0 LDR X9, [X21]
	0x03803AA4 MOV X0, X21
	0x03803AA8 LDR X8, [X8 + 0xB8]
	0x03803AAC LDR X10, [X9 + 0x248]
	0x03803AB0 LDR X2, [X9 + 0x250]
	0x03803AB4 LDR W1, [X8]
	0x03803AB8 BLR X10
	0x03803ABC LDR X8, [X21]
	0x03803AC0 MOV X0, X21
	0x03803AC4 MOV W1, W22
	0x03803AC8 LDR X9, [X8 + 0x248]
	0x03803ACC LDR X2, [X8 + 0x250]
	0x03803AD0 BLR X9
	0x03803AD4 LDR X0, [X24]
	0x03803AD8 LDR W8, [X0 + 0xE0]
	0x03803ADC CBNZ W8, 0x3803AE4
	0x03803AE0 BL 0x1C16DFC
	0x03803AE4 ADRP X26, 0x8F0000
	0x03803AE8 LDR X26, [X26 + 0xE00]
	0x03803AEC MOV X0, X31
	0x03803AF0 BL 0x3C01AB0
	0x03803AF4 LDR X8, [X21]
	0x03803AF8 MOV W1, W0
	0x03803AFC MOV X0, X21
	0x03803B00 LDR X9, [X8 + 0x248]
	0x03803B04 LDR X2, [X8 + 0x250]
	0x03803B08 BLR X9
	0x03803B0C LDR X8, [X21]
	0x03803B10 LDR X1, [X20 + 0x90]
	0x03803B14 MOV X0, X21
	0x03803B18 LDR X9, [X8 + 0x278]
	0x03803B1C LDR X2, [X8 + 0x280]
	0x03803B20 BLR X9
	0x03803B24 LDR X8, [X21]
	0x03803B28 LDR X1, [X20 + 0x98]
	0x03803B2C MOV X0, X21
	0x03803B30 LDR X9, [X8 + 0x278]
	0x03803B34 LDR X2, [X8 + 0x280]
	0x03803B38 BLR X9
	0x03803B3C MOV X0, X20
	0x03803B40 BL 0x3804028
	0x03803B44 MOV X22, X0
	0x03803B48 CBZ X0, 0x3803F2C
	0x03803B4C ADRP X27, 0x8F0000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBDF000
	007 Move X21, 0x944000
	008 Move W8, [X20+1056]
	009 Move X21, [X21+3408]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x948000
	016 Move X0, [X0+104]
	017 Call 0x1C17CF4
	018 Move X0, 0x944000
	019 Move X0, [X0+3408]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1056], W8
	023 Move X1, [X21]
	024 Move X0, X19
	025 Call InputEventPtr.IsA, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {36}
	030 Move X0, [X19]
	031 Call StateEvent.From, X0
	032 Add X8, X0, 4
	033 Move TEMP, 23
	034 Not TEMP
	035 Move W9, TEMP
	036 Move X8, 0x948000
	037 Move X8, [X8+104]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call InputEventPtr.IsA, X0
	041 Move X8, [X19]
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {60}
	046 Move X0, X8
	047 Call DeltaStateEvent.From, X0
	048 Add X8, X0, 4
	049 Move TEMP, 27
	050 Not TEMP
	051 Move W9, TEMP
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+16]
	056 Move X21, [X31+24]
	057 Add W0, W9, W8
	058 Add X31, X31, 48
	059 Return X0
	060 Add X0, X31, 8
	061 Move [X31+8], X8
	062 Call InputEventPtr.ToString, X0
	063 Move X19, X0
	064 Move X0, 0x948000
	065 Move X0, [X0+424]
	066 Call 0x1C17D08
	067 Move X1, X19
	068 Move X2, X31
	069 Call String.Concat, X0, X1
	070 Move X19, X0
	071 Move X0, 0x8F1000
	072 Move X0, [X0+1456]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X1, X19
	076 Move X2, X31
	077 Move X20, X0
	078 Call InvalidOperationException..ctor, X0, X1
	079 Move X0, 0x948000
	080 Move X0, [X0+440]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X20
	084 Call 0x1C17DEC

Method: System.UInt32 get_stateOffset()

Disassembly:
	0x03803C80 B 0x3803C84
	0x03803C84 CMP W1, 0x1
	0x03803C88 B.NE 0x3803F54
	0x03803C8C BL 0x3EB1AD0
	0x03803C90 LDR X23, [X0]
	0x03803C94 BL 0x3EB1AE0
	0x03803C98 CBZ X23, 0x3803B64
	0x03803C9C MOV X0, X23
	0x03803CA0 BL 0x1C16F18
	0x03803CA4 MOV X23, X31
	0x03803CA8 MOVZ W24, 0xE
	0x03803CAC CBZ X22, 0x3803D08
	0x03803CB0 LDR X8, [X22]
	0x03803CB4 LDR X1, [X26]
	0x03803CB8 LDRH W9, [X8 + 0x12E]
	0x03803CBC CBZ X9, 0x3803CE0
	0x03803CC0 LDR X10, [X8 + 0xB0]
	0x03803CC4 ADD X10, X10, 0x8
	0x03803CC8 LDUR X11, [X10 - 0x8]
	0x03803CCC CMP X11, X1
	0x03803CD0 B.EQ 0x3803CF0
	0x03803CD4 SUBS X9, X9, 0x1
	0x03803CD8 ADD X10, X10, 0x10
	0x03803CDC B.NE 0x3803CC8
	0x03803CE0 MOV X0, X22
	0x03803CE4 MOV W2, W31
	0x03803CE8 BL 0x1C5C788
	0x03803CEC B 0x3803CFC
	0x03803CF0 LDRSW X9, [X10]
	0x03803CF4 ADD X8, X8, X9, 0x4, LSL
	0x03803CF8 ADD X0, X8, 0x138
	0x03803CFC LDP X8, X1, [X0]
	0x03803D00 MOV X0, X22
	0x03803D04 BLR X8
	0x03803D08 CBNZ X23, 0x3803F30
	0x03803D0C CMP W24, 0xE
	0x03803D10 B.EQ 0x3803D18
	0x03803D14 CBNZ W24, 0x3803E74
	0x03803D18 LDR X8, [X21]
	0x03803D1C ADRP X22, 0x947000
	0x03803D20 MOV X0, X21
	0x03803D24 LDP X9, X1, [X8 + 0x1A8]
	0x03803D28 LDR X22, [X22 + 0x228]
	0x03803D2C BLR X9
	0x03803D30 LDR X8, [X19]
	0x03803D34 MOV X0, X19
	0x03803D38 LDP X9, X1, [X8 + 0x1F8]
	0x03803D3C BLR X9
	0x03803D40 LDR X8, [X20 + 0xC0]
	0x03803D44 LDR X1, [X22]
	0x03803D48 MOV X22, X0
	0x03803D4C MOV X0, X8
	0x03803D50 BL 0x217B27C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBDF000
	007 Move X21, 0x948000
	008 Move W8, [X20+1057]
	009 Move X21, [X21+104]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x948000
	016 Move X0, [X0+104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1057], W8
	020 Move X1, [X21]
	021 Move X0, X19
	022 Call InputEventPtr.IsA, X0
	023 Move X8, [X19]
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {39}
	028 Move X0, X8
	029 Call DeltaStateEvent.From, X0
	030 Compare X0, 0
	031 JumpIfEqual {64}
	032 Move W0, [X0+24]
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Add X31, X31, 48
	038 Return X0
	039 Add X0, X31, 8
	040 Move [X31+8], X8
	041 Call InputEventPtr.ToString, X0
	042 Move X19, X0
	043 Move X0, 0x948000
	044 Move X0, [X0+464]
	045 Call 0x1C17D08
	046 Move X1, X19
	047 Move X2, X31
	048 Call String.Concat, X0, X1
	049 Move X19, X0
	050 Move X0, 0x8F1000
	051 Move X0, [X0+1456]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X1, X19
	055 Move X2, X31
	056 Move X20, X0
	057 Call InvalidOperationException..ctor, X0, X1
	058 Move X0, 0x948000
	059 Move X0, [X0+472]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X20
	063 Call 0x1C17DEC
	064 Call 0x1C17F20

Method: System.Boolean IsA()

Disassembly:
	0x02208F38 BL 0x1C16F10
	0x02208F3C MOV X19, X0
	0x02208F40 ADRP X0, 0x1F13000
	0x02208F44 LDR X0, [X0 + 0xEE8]
	0x02208F48 BL 0x1C16D08
	0x02208F4C MOV X1, X0
	0x02208F50 MOV X0, X19
	0x02208F54 MOV X2, X31
	0x02208F58 BL 0x330E100
	0x02208F5C MOV X0, X19
	0x02208F60 MOV X1, X22
	0x02208F64 BL 0x1C16DEC
	0x02208F68 STP X30, X23, [X31 - 0x30]!
	0x02208F6C STP X22, X21, [X31 + 0x10]
	0x02208F70 STP X20, X19, [X31 + 0x20]
	0x02208F74 ADRP X23, 0x21D1000
	0x02208F78 LDRB W8, [X23 + 0x851]
	0x02208F7C MOV X22, X3
	0x02208F80 MOV X19, X2
	0x02208F84 MOV W20, W1
	0x02208F88 MOV X21, X0
	0x02208F8C TBNZ X8, 0x0, 0x2208FA4
	0x02208F90 ADRP X0, 0x1F13000
	0x02208F94 LDR X0, [X0 + 0xED0]
	0x02208F98 BL 0x1C16CF4
	0x02208F9C MOVZ W8, 0x1
	0x02208FA0 STRB W8, [X23 + 0x851]
	0x02208FA4 CBZ X21, 0x2209020
	0x02208FA8 ADRP X10, 0x1F13000
	0x02208FAC LDR X8, [X21]
	0x02208FB0 LDR X10, [X10 + 0xED0]
	0x02208FB4 LDRH W9, [X8 + 0x12E]
	0x02208FB8 LDR X1, [X10]
	0x02208FBC CBZ X9, 0x2208FE0
	0x02208FC0 LDR X10, [X8 + 0xB0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X21+40]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31+40], X8
	011 Move X8, [X1+56]
	012 Compare X8, 0
	013 JumpIfNotEqual {16}
	014 Move X0, X19
	015 Call 0x1C5D6E0
	016 Move X0, [X20]
	017 Compare X0, 0
	018 JumpIfEqual {32}
	019 NotImplemented "Instruction MOVI not yet implemented."
	020 Move X1, X31
	021 Move [X31+29], X31
	022 Move [X31], V0
	023 Move [X31+8], V0
	024 Call InputEvent.get_type, X0
	025 Move X8, [X19+56]
	026 Move X19, X0
	027 Add X0, X31, 0
	028 Move X1, [X8+8]
	029 Call ActionEvent.get_typeStatic, X0
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X8, [X21+40]
	033 Move X9, [X31+40]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X20, [X31+64]
	036 Move X19, [X31+72]
	037 Move X30, [X31+48]
	038 Move X21, [X31+56]
	039 Add X31, X31, 80
	040 Return X0
	041 Call 0x3EB2B20

Method: UnityEngine.InputSystem.LowLevel.InputEventPtr Next()

Disassembly:
	0x03803D54 LDR X8, [X21]
	0x03803D58 MOV W23, W0
	0x03803D5C MOV X0, X21
	0x03803D60 MOV W1, W23
	0x03803D64 LDR X9, [X8 + 0x248]
	0x03803D68 LDR X2, [X8 + 0x250]
	0x03803D6C BLR X9
	0x03803D70 CMP W23, 0x1
	0x03803D74 B.LT 0x3803E3C
	0x03803D78 ADRP X26, 0x8F2000
	0x03803D7C LDR X26, [X26 + 0x278]

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {11}
	004 NotImplemented "Instruction LDRH not yet implemented."
	005 And W10, W9, 0xFFFC
	006 Add W10, W10, 4
	007 And W31, W9, 3
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Add X0, X9, X8
	010 Return X0
	011 Move X0, X31
	012 Return X0

Method: System.String ToString()

Disassembly:
	0x038039B0 BL 0x1C16CF4
	0x038039B4 ADRP X0, 0x918000
	0x038039B8 LDR X0, [X0 + 0x270]
	0x038039BC BL 0x1C16CF4
	0x038039C0 ADRP X0, 0x8F2000
	0x038039C4 LDR X0, [X0 + 0x278]
	0x038039C8 BL 0x1C16CF4
	0x038039CC MOVZ W8, 0x1
	0x038039D0 STRB W8, [X21 + 0x42E]
	0x038039D4 CBZ X19, 0x3803E9C
	0x038039D8 LDR X8, [X19]
	0x038039DC MOV X0, X19
	0x038039E0 LDP X9, X1, [X8 + 0x1B8]
	0x038039E4 BLR X9
	0x038039E8 TBZ X0, 0x0, 0x3803ED0
	0x038039EC ADRP X8, 0x922000
	0x038039F0 LDR X8, [X8 + 0x260]
	0x038039F4 ADRP X22, 0x918000
	0x038039F8 LDR X0, [X8]
	0x038039FC LDR X22, [X22 + 0x270]
	0x03803A00 BL 0x1C16F10
	0x03803A04 MOV X1, X19
	0x03803A08 MOV X2, X31
	0x03803A0C MOV X21, X0
	0x03803A10 BL 0x32F68D8
	0x03803A14 LDR X0, [X22]
	0x03803A18 LDR W8, [X0 + 0xE0]
	0x03803A1C CBNZ W8, 0x3803A24
	0x03803A20 BL 0x1C16DFC
	0x03803A24 MOV X0, X31
	0x03803A28 BL 0x37701B0
	0x03803A2C CBZ X0, 0x3803E94
	0x03803A30 ADRP X23, 0x947000
	0x03803A34 LDR X23, [X23 + 0x238]
	0x03803A38 LDR W9, [X0 + 0x20]
	0x03803A3C LDR X8, [X23]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X20+40]
	008 Move X21, 0xBDF000
	009 Move X19, X0
	010 Move [X31+24], X8
	011 Move W8, [X21+1058]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x8F1000
	017 Move X0, [X0+2096]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1058], W8
	021 Move X8, [X19]
	022 Compare X8, 0
	023 JumpIfEqual {30}
	024 Move W9, [X8+16]
	025 Move V0, [X8]
	026 Add X0, X31, 0
	027 Move [X31+16], W9
	028 Move [X31], V0
	029 Call InputEvent.ToString, X0
	030 Move X8, 0x8F1000
	031 Move X8, [X8+2096]
	032 Move X0, [X8]
	033 Move X8, [X20+40]
	034 Move X9, [X31+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Add X31, X31, 64
	041 Return X0
	042 Call 0x3EB2B20

Method: UnityEngine.InputSystem.LowLevel.InputEvent* ToPointer()

Disassembly:
	0x03803D80 MOV X24, X31
	0x03803D84 MOV W23, W23

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Boolean Equals(UnityEngine.InputSystem.LowLevel.InputEventPtr other)

Disassembly:
	0x03803D88 MOVZ W25, 0x20
	0x03803D8C LDR X8, [X20 + 0xC0]
	0x03803D90 CBZ X8, 0x3803E94
	0x03803D94 LDR W9, [X8 + 0x18]
	0x03803D98 CMP X24, X9
	0x03803D9C B.CS 0x3803E98

ISIL:
	001 Move X0, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W0, 1
	004 Return X0
	005 Call InputEvent.Equals, X0, X1
	006 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03803DA0 LDR X9, [X21]
	0x03803DA4 ADD X27, X8, X25
	0x03803DA8 LDR W1, [X27]
	0x03803DAC MOV X0, X21
	0x03803DB0 LDR X8, [X9 + 0x248]
	0x03803DB4 LDR X2, [X9 + 0x250]
	0x03803DB8 BLR X8
	0x03803DBC LDR X8, [X21]
	0x03803DC0 LDR X1, [X27 + 0x8]
	0x03803DC4 MOV X0, X21
	0x03803DC8 LDR X9, [X8 + 0x298]
	0x03803DCC LDR X2, [X8 + 0x2A0]
	0x03803DD0 BLR X9
	0x03803DD4 LDR X8, [X21]
	0x03803DD8 LDR W1, [X27 + 0x10]
	0x03803DDC MOV X0, X21
	0x03803DE0 LDR X9, [X8 + 0x248]
	0x03803DE4 LDR X2, [X8 + 0x250]
	0x03803DE8 BLR X9
	0x03803DEC LDR X8, [X21]
	0x03803DF0 LDR W1, [X27 + 0x14]
	0x03803DF4 MOV X0, X21
	0x03803DF8 LDR X9, [X8 + 0x248]
	0x03803DFC LDR X2, [X8 + 0x250]
	0x03803E00 BLR X9
	0x03803E04 LDR X1, [X27 + 0x18]
	0x03803E08 CBNZ X1, 0x3803E18
	0x03803E0C LDR X8, [X26]
	0x03803E10 LDR X8, [X8 + 0xB8]
	0x03803E14 LDR X1, [X8]
	0x03803E18 LDR X8, [X21]
	0x03803E1C MOV X0, X21
	0x03803E20 LDR X9, [X8 + 0x298]
	0x03803E24 LDR X2, [X8 + 0x2A0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBDF000
	006 Move W8, [X21+1059]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x91C000
	014 Move X0, [X0+1272]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1059], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x91C000
	021 Move X8, [X8+1272]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move X1, [X0]
	034 Move X0, [X19]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call InputEvent.Equals, X0, X1
	041 Return X0
	042 Move W0, 1

Method: System.Int32 GetHashCode()

Disassembly:
	0x03803E28 BLR X9
	0x03803E2C ADD X24, X24, 0x1

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Boolean op_Equality(UnityEngine.InputSystem.LowLevel.InputEventPtr left, UnityEngine.InputSystem.LowLevel.InputEventPtr right)

Disassembly:
	0x03803E30 CMP X23, X24
	0x03803E34 ADD X25, X25, 0x20
	0x03803E38 B.NE 0x3803D8C

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean op_Inequality(UnityEngine.InputSystem.LowLevel.InputEventPtr left, UnityEngine.InputSystem.LowLevel.InputEventPtr right)

Disassembly:
	0x03803E3C LDR X8, [X21]
	0x03803E40 MOV X0, X21
	0x03803E44 LDP X9, X1, [X8 + 0x1A8]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputEventPtr op_Implicit(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)

Disassembly:
	0x03802854 LDR X0, [X0 + 0xDA0]

ISIL:
	001 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputEventPtr From(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)

Disassembly:
	0x03803E48 BLR X9

ISIL:
	001 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputEvent* op_Implicit(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x038031A8 MOV X0, X22

ISIL:
	001 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputEvent* FromInputEventPtr(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x03803E4C LDR X8, [X19]

ISIL:
	001 Return X0

