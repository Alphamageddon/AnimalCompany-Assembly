Type: UnityEngine.InputSystem.LowLevel.ActionEvent

Method: UnityEngine.InputSystem.Utilities.FourCC get_Type()

Disassembly:
	0x03801334 STR D0, [X0 + 0x8]
	0x03801338 RET
	0x0380133C LDR W8, [X0 + 0x10]
	0x03801340 UBFM W0, W8, 0x1F, 0x1F
	0x03801344 RET
	0x03801348 LDR W8, [X0 + 0x10]
	0x0380134C ANDS W31, W1, 0x1
	0x03801350 MOVZ W9, 0x80000000
	0x03801354 CSEL W9, W9, W31, NE
	0x03801358 BFM W9, W8, 0x0, 0x1E
	0x0380135C STR W9, [X0 + 0x10]
	0x03801360 RET

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 65
	004 Move W2, 67
	005 Move W3, 84
	006 Move W4, 78
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: System.Double get_startTime()

Disassembly:
	0x03801364 SUB X31, X31, 0x50
	0x03801368 STP X30, X23, [X31 + 0x20]

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 Return V0

Method: System.Void set_startTime(System.Double value)

Disassembly:
	0x0380136C STP X22, X21, [X31 + 0x30]
	0x03801370 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X0+28], D0
	002 Return 

Method: UnityEngine.InputSystem.InputActionPhase get_phase()

Disassembly:
	0x03801374 ADRP X20, 0xBE0000
	0x03801378 ADRP X21, 0x8F2000

ISIL:
	001 Move W0, [X0+27]
	002 Return X0

Method: System.Void set_phase(UnityEngine.InputSystem.InputActionPhase value)

Disassembly:
	0x0380137C ADRP X22, 0x8F2000
	0x03801380 LDRB W8, [X20 + 0x40E]

ISIL:
	001 Move [X0+27], W1
	002 Return 

Method: System.Byte* get_valueData()

Disassembly:
	0x03801384 LDR X21, [X21 + 0x9D0]
	0x03801388 LDR X22, [X22 + 0x758]

ISIL:
	001 Add X0, X0, 36
	002 Return X0

Method: System.Int32 get_valueSizeInBytes()

Disassembly:
	0x0380138C MOV X19, X0
	0x03801390 TBNZ X8, 0x0, 0x38013E4
	0x03801394 ADRP X0, 0x8F5000

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Subtract W0, W8, 36
	003 Return X0

Method: System.Int32 get_stateIndex()

Disassembly:
	0x038013A0 ADRP X0, 0x91A000
	0x038013A4 LDR X0, [X0 + 0xD28]

ISIL:
	001 Move W0, [X0+26]
	002 Return X0

Method: System.Void set_stateIndex(System.Int32 value)

Disassembly:
	0x038013A8 BL 0x1C16CF4
	0x038013AC ADRP X0, 0x8F2000
	0x038013B0 LDR X0, [X0 + 0x758]
	0x038013B4 BL 0x1C16CF4
	0x038013B8 ADRP X0, 0x8F2000
	0x038013BC LDR X0, [X0 + 0x9D0]
	0x038013C0 BL 0x1C16CF4
	0x038013C4 ADRP X0, 0x8FA000
	0x038013C8 LDR X0, [X0 + 0x720]
	0x038013CC BL 0x1C16CF4
	0x038013D0 ADRP X0, 0x949000
	0x038013D4 LDR X0, [X0 + 0xB0]
	0x038013D8 BL 0x1C16CF4
	0x038013DC MOVZ W8, 0x1
	0x038013E0 STRB W8, [X20 + 0x40E]
	0x038013E4 LDR X0, [X21]
	0x038013E8 MOVZ W1, 0x5
	0x038013EC BL 0x1C16D6C
	0x038013F0 LDR W8, [X19 + 0x10]
	0x038013F4 MOV X20, X0
	0x038013F8 LDR X0, [X22]
	0x038013FC ADD X1, X31, 0x1C
	0x03801400 AND W8, W8, 0x7FFFFFFF
	0x03801404 STR W8, [X31 + 0x1C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move [X0+26], W1
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X0, 0x8F3000
	009 Move X0, [X0+2880]
	010 Call 0x1C17D08
	011 Call 0x1C17F10
	012 Move X19, X0
	013 Move X0, 0x94A000
	014 Move X0, [X0+16]
	015 Call 0x1C17D08
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Call NotSupportedException..ctor, X0, X1
	020 Move X0, 0x94A000
	021 Move X0, [X0+24]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17DEC

Method: System.Int32 get_controlIndex()

Disassembly:
	0x03801408 BL 0x1C16E04
	0x0380140C CBZ X20, 0x38015C4

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Return X0

Method: System.Void set_controlIndex(System.Int32 value)

Disassembly:
	0x03801410 MOV X21, X0
	0x03801414 CBZ X0, 0x380142C
	0x03801418 LDR X8, [X20]
	0x0380141C MOV X0, X21
	0x03801420 LDR X1, [X8 + 0x40]
	0x03801424 BL 0x1C16E00
	0x03801428 CBZ X0, 0x38015B8
	0x0380142C LDR W8, [X20 + 0x18]
	0x03801430 CBZ W8, 0x38015B4
	0x03801434 ADRP X8, 0x91A000
	0x03801438 LDR X8, [X8 + 0xD28]
	0x0380143C STR X21, [X20 + 0x20]
	0x03801440 LDR W9, [X19]
	0x03801444 ADD X1, X31, 0x18
	0x03801448 LDR X0, [X8]
	0x0380144C STR W9, [X31 + 0x18]
	0x03801450 BL 0x1C16E04
	0x03801454 MOV X21, X0
	0x03801458 CBZ X0, 0x3801470
	0x0380145C LDR X8, [X20]
	0x03801460 MOV X0, X21
	0x03801464 LDR X1, [X8 + 0x40]
	0x03801468 BL 0x1C16E00
	0x0380146C CBZ X0, 0x38015B8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction STRH not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X0, 0x8F3000
	009 Move X0, [X0+2880]
	010 Call 0x1C17D08
	011 Call 0x1C17F10
	012 Move X19, X0
	013 Move X0, 0x94A000
	014 Move X0, [X0+32]
	015 Call 0x1C17D08
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Call NotSupportedException..ctor, X0, X1
	020 Move X0, 0x94A000
	021 Move X0, [X0+40]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17DEC

Method: System.Int32 get_bindingIndex()

Disassembly:
	0x03801470 LDR W8, [X20 + 0x18]
	0x03801474 CMP W8, 0x1

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Return X0

Method: System.Void set_bindingIndex(System.Int32 value)

Disassembly:
	0x03801478 B.LS 0x38015B4
	0x0380147C STR X21, [X20 + 0x28]
	0x03801480 LDRH W8, [X19 + 0x6]
	0x03801484 LDR X0, [X22]
	0x03801488 ADD X1, X31, 0x14
	0x0380148C STR W8, [X31 + 0x14]
	0x03801490 BL 0x1C16E04
	0x03801494 MOV X21, X0
	0x03801498 CBZ X0, 0x38014B0
	0x0380149C LDR X8, [X20]
	0x038014A0 MOV X0, X21
	0x038014A4 LDR X1, [X8 + 0x40]
	0x038014A8 BL 0x1C16E00
	0x038014AC CBZ X0, 0x38015B8
	0x038014B0 LDR W8, [X20 + 0x18]
	0x038014B4 CMP W8, 0x2
	0x038014B8 B.LS 0x38015B4
	0x038014BC ADRP X8, 0x8FA000
	0x038014C0 LDR X8, [X8 + 0x720]
	0x038014C4 STR X21, [X20 + 0x30]
	0x038014C8 LDRH W9, [X19 + 0x4]
	0x038014CC ADD X1, X31, 0x10
	0x038014D0 LDR X0, [X8]
	0x038014D4 STR W9, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction STRH not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X0, 0x8F3000
	009 Move X0, [X0+2880]
	010 Call 0x1C17D08
	011 Call 0x1C17F10
	012 Move X19, X0
	013 Move X0, 0x94A000
	014 Move X0, [X0+48]
	015 Call 0x1C17D08
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Call NotSupportedException..ctor, X0, X1
	020 Move X0, 0x94A000
	021 Move X0, [X0+56]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17DEC

Method: System.Int32 get_interactionIndex()

Disassembly:
	0x038014D8 BL 0x1C16E04
	0x038014DC MOV X21, X0
	0x038014E0 CBZ X0, 0x38014F8
	0x038014E4 LDR X8, [X20]
	0x038014E8 MOV X0, X21

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Move W9, 0xFFFF
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSINV not yet implemented."
	005 Return X0

Method: System.Void set_interactionIndex(System.Int32 value)

Disassembly:
	0x038014EC LDR X1, [X8 + 0x40]
	0x038014F0 BL 0x1C16E00
	0x038014F4 CBZ X0, 0x38015B8
	0x038014F8 LDR W8, [X20 + 0x18]
	0x038014FC CMP W8, 0x3
	0x03801500 B.LS 0x38015B4
	0x03801504 STR X21, [X20 + 0x38]
	0x03801508 ADRP X23, 0xBE0000
	0x0380150C ADRP X21, 0x8F5000
	0x03801510 ADRP X22, 0x91A000
	0x03801514 LDRB W8, [X23 + 0x40B]
	0x03801518 LDR X21, [X21 + 0x978]
	0x0380151C LDR X22, [X22 + 0xEC8]
	0x03801520 TBNZ X8, 0x0, 0x3801538
	0x03801524 ADRP X0, 0x91A000
	0x03801528 LDR X0, [X0 + 0xEC8]
	0x0380152C BL 0x1C16CF4
	0x03801530 MOVZ W8, 0x1
	0x03801534 STRB W8, [X23 + 0x40B]
	0x03801538 LDR X8, [X22]
	0x0380153C LDR V0, [X19 + 0x8]
	0x03801540 LDR X0, [X21]
	0x03801544 ADD X1, X31, 0x8
	0x03801548 LDR X8, [X8 + 0xB8]
	0x0380154C LDR V1, [X8 + 0x8]
	0x03801550 FSUB D0, D0, D1
	0x03801554 STR D0, [X31 + 0x8]
	0x03801558 BL 0x1C16E04

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Add W31, W1, 1
	004 Move W8, 0xFFFF
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W8, W1
	007 NotImplemented "Instruction STRH not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x8F3000
	012 Move X0, [X0+2880]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x94A000
	017 Move X0, [X0+64]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call NotSupportedException..ctor, X0, X1
	023 Move X0, 0x94A000
	024 Move X0, [X0+72]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr()

Disassembly:
	0x0380155C MOV X19, X0

ISIL:
	001 Return X0

Method: UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()

Disassembly:
	0x03801560 CBZ X0, 0x3801578
	0x03801564 LDR X8, [X20]
	0x03801568 MOV X0, X19
	0x0380156C LDR X1, [X8 + 0x40]
	0x03801570 BL 0x1C16E00
	0x03801574 CBZ X0, 0x38015B8
	0x03801578 LDR W8, [X20 + 0x18]
	0x0380157C CMP W8, 0x4
	0x03801580 B.LS 0x38015B4
	0x03801584 ADRP X8, 0x949000
	0x03801588 LDR X8, [X8 + 0xB0]
	0x0380158C STR X19, [X20 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 65
	004 Move W2, 67
	005 Move W3, 84
	006 Move W4, 78
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: System.Int32 GetEventSizeWithValueSize(System.Int32 valueSizeInBytes)

Disassembly:
	0x03801590 MOV X1, X20
	0x03801594 MOV X2, X31

ISIL:
	001 Add W0, W0, 36
	002 Return X0

Method: UnityEngine.InputSystem.LowLevel.ActionEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)

Disassembly:
	0x03801598 LDR X0, [X8]
	0x0380159C BL 0x3227C5C
	0x038015A0 LDP X20, X19, [X31 + 0x40]
	0x038015A4 LDP X22, X21, [X31 + 0x30]
	0x038015A8 LDP X30, X23, [X31 + 0x20]
	0x038015AC ADD X31, X31, 0x50
	0x038015B0 RET
	0x038015B4 BL 0x1C16F28
	0x038015B8 BL 0x1C16F44
	0x038015BC MOV X1, X31
	0x038015C0 BL 0x1C16DEC
	0x038015C4 BL 0x1C16F20
	0x038015C8 LDRH W8, [X0 + 0x4]
	0x038015CC AND W9, W8, 0xFFFC
	0x038015D0 ADD W9, W9, 0x4
	0x038015D4 ANDS W31, W8, 0x3
	0x038015D8 CSEL W8, W8, W9, EQ
	0x038015DC ADD X0, X8, X0
	0x038015E0 RET
	0x038015E4 SUB X31, X31, 0x30
	0x038015E8 STP X30, X21, [X31 + 0x10]
	0x038015EC STP X20, X19, [X31 + 0x20]
	0x038015F0 LDRH W8, [X0 + 0x4]
	0x038015F4 MOV X19, X1
	0x038015F8 MOV X20, X0
	0x038015FC AND W9, W8, 0xFFFC
	0x03801600 ADD W9, W9, 0x4
	0x03801604 ANDS W31, W8, 0x3
	0x03801608 CSEL W8, W8, W9, EQ
	0x0380160C ADD X21, X8, X0
	0x03801610 MOV X0, X1
	0x03801614 MOV X1, X21
	0x03801618 BL 0x38016C8
	0x0380161C TBZ X0, 0x0, 0x3801634
	0x03801620 MOV X0, X21
	0x03801624 LDP X20, X19, [X31 + 0x20]
	0x03801628 LDP X30, X21, [X31 + 0x10]
	0x0380162C ADD X31, X31, 0x30
	0x03801630 RET
	0x03801634 STR X20, [X31 + 0x8]
	0x03801638 ADRP X0, 0x91D000
	0x0380163C LDR X0, [X0 + 0x4F8]
	0x03801640 BL 0x1C16D08
	0x03801644 ADD X1, X31, 0x8
	0x03801648 BL 0x1C16E04
	0x0380164C LDR X8, [X19 + 0x10]
	0x03801650 MOV X20, X0
	0x03801654 ADRP X0, 0x8F4000
	0x03801658 STR X8, [X31]
	0x0380165C LDR X0, [X0 + 0xA60]
	0x03801660 BL 0x1C16D08
	0x03801664 ADD X1, X31, 0x0
	0x03801668 BL 0x1C16E04
	0x0380166C MOV X19, X0
	0x03801670 ADRP X0, 0x949000
	0x03801674 LDR X0, [X0 + 0xB8]
	0x03801678 BL 0x1C16D08
	0x0380167C MOV X1, X20
	0x03801680 MOV X2, X19
	0x03801684 MOV X3, X31
	0x03801688 BL 0x3227BD4
	0x0380168C MOV X19, X0
	0x03801690 ADRP X0, 0x8F2000
	0x03801694 LDR X0, [X0 + 0x5B0]
	0x03801698 BL 0x1C16D08
	0x0380169C BL 0x1C16F10
	0x038016A0 MOV X1, X19
	0x038016A4 MOV X2, X31
	0x038016A8 MOV X20, X0
	0x038016AC BL 0x337DF1C
	0x038016B0 ADRP X0, 0x949000
	0x038016B4 LDR X0, [X0 + 0xC0]
	0x038016B8 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X0
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBE1000
	007 Move W8, [X20+1030]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x94A000
	014 Move X0, [X0+80]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1030], W8
	018 Compare X19, 0
	019 JumpIfEqual {36}
	020 Move X8, 0x94A000
	021 Move X8, [X8+80]
	022 Add X0, X31, 24
	023 Move X1, [X8]
	024 Call 0x2208F38, X0
	025 Move X8, [X31+24]
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {54}
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X0, X8
	034 Add X31, X31, 48
	035 Return X0
	036 Move X0, 0x8F8000
	037 Move X0, [X0+1320]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0x922000
	042 Move X0, [X0+576]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call ArgumentNullException..ctor, X0, X1
	048 Move X0, 0x94A000
	049 Move X0, [X0+88]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Compare X8, 0
	055 JumpIfEqual {57}
	056 Move W8, [X8]
	057 Move [X31+8], W8
	058 Move X0, 0x91B000
	059 Move X0, [X0+3368]
	060 Call 0x1C17D08
	061 Add X1, X31, 8
	062 Call 0x1C17E04
	063 Move X19, X0
	064 Move X0, 0x94A000
	065 Move X0, [X0+96]
	066 Call 0x1C17D08
	067 Move X1, X19
	068 Move X2, X31
	069 Call String.Format, X0, X1
	070 Move X19, X0
	071 Move X0, 0x8FB000
	072 Move X0, [X0+3080]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X1, X19
	076 Move X2, X31
	077 Move X20, X0
	078 Call InvalidCastException..ctor, X0, X1
	079 Move X0, 0x94A000
	080 Move X0, [X0+88]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X20
	084 Call 0x1C17DEC

