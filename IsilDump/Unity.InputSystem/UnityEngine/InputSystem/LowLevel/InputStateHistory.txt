Type: UnityEngine.InputSystem.LowLevel.InputStateHistory

Method: System.Int32 get_Count()

Disassembly:
	0x0380DD08 CMP W8, 0x1
	0x0380DD0C MOVZ W8, 0x10

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: System.UInt32 get_version()

Disassembly:
	0x0380DD10 B.NE 0x380DD24
	0x0380DD14 LDRB W11, [X20 + 0x60]

ISIL:
	001 Move W0, [X0+84]
	002 Return X0

Method: System.Int32 get_historyDepth()

Disassembly:
	0x0380DD18 CMP W11, 0x0
	0x0380DD1C MOVZ W11, 0xC

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_historyDepth(System.Int32 value)

Disassembly:
	0x0380DD20 CSEL W8, W11, W8, EQ
	0x0380DD24 ADD W9, W10, W9
	0x0380DD28 ADD W8, W9, W8
	0x0380DD2C ADD W9, W8, 0x3
	0x0380DD30 CMP W8, 0x0
	0x0380DD34 LDR W10, [X19]
	0x0380DD38 CSEL W9, W9, W8, LT
	0x0380DD3C AND W9, W9, 0xFFFFFFFC
	0x0380DD40 CMP W8, W9
	0x0380DD44 ADD W9, W9, 0x4
	0x0380DD48 LDP X20, X19, [X31 + 0x10]
	0x0380DD4C CSEL W8, W8, W9, EQ
	0x0380DD50 MUL W8, W8, W10
	0x0380DD54 ADD X0, X0, W8, SXTW
	0x0380DD58 LDP X30, X21, [X31], #0x20
	0x0380DD5C RET
	0x0380DD60 SUB X31, X31, 0x60
	0x0380DD64 STP X30, X23, [X31 + 0x30]
	0x0380DD68 STP X22, X21, [X31 + 0x40]
	0x0380DD6C STP X20, X19, [X31 + 0x50]
	0x0380DD70 ADRP X20, 0xBD4000
	0x0380DD74 ADRP X23, 0x912000
	0x0380DD78 LDRB W8, [X20 + 0x491]
	0x0380DD7C LDR X23, [X23 + 0x60]
	0x0380DD80 MOV X19, X0
	0x0380DD84 TBNZ X8, 0x0, 0x380DDC0
	0x0380DD88 ADRP X0, 0x912000
	0x0380DD8C LDR X0, [X0 + 0x48]
	0x0380DD90 BL 0x1C16CF4
	0x0380DD94 ADRP X0, 0x912000
	0x0380DD98 LDR X0, [X0 + 0x50]
	0x0380DD9C BL 0x1C16CF4
	0x0380DDA0 ADRP X0, 0x912000
	0x0380DDA4 LDR X0, [X0 + 0x58]
	0x0380DDA8 BL 0x1C16CF4
	0x0380DDAC ADRP X0, 0x912000
	0x0380DDB0 LDR X0, [X0 + 0x60]
	0x0380DDB4 BL 0x1C16CF4
	0x0380DDB8 MOVZ W8, 0x1
	0x0380DDBC STRB W8, [X20 + 0x491]
	0x0380DDC0 ADRP X20, 0x912000
	0x0380DDC4 ADRP X22, 0x912000
	0x0380DDC8 ADRP X21, 0x912000
	0x0380DDCC LDR X20, [X20 + 0x50]
	0x0380DDD0 LDR X22, [X22 + 0x58]
	0x0380DDD4 LDR X21, [X21 + 0x48]
	0x0380DDD8 MOV X0, X19
	0x0380DDDC STP X31, X31, [X31 + 0x18]
	0x0380DDE0 STR X31, [X31 + 0x28]
	0x0380DDE4 BL 0x380D014

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD5000
	006 Move W8, [X21+1161]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x93D000
	014 Move X0, [X0+1696]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1161], W8
	018 Move TEMP, X19
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {31}
	022 Move X8, [X20+48]
	023 Compare X8, 0
	024 JumpIfNotEqual {48}
	025 Move [X20+72], W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Move X0, 0x8EF000
	032 Move X0, [X0+1400]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0x93E000
	037 Move X0, [X0+1416]
	038 Call 0x1C17D08
	039 Move X20, X0
	040 Move X0, 0x8F1000
	041 Move X0, [X0+3784]
	042 Call 0x1C17D08
	043 Move X2, X0
	044 Move X0, X19
	045 Move X1, X20
	046 Move X3, X31
	047 Call ArgumentException..ctor, X0, X1, X2
	048 Move X0, 0x8F0000
	049 Move X0, [X0+1880]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X1, X31
	053 Move X19, X0
	054 Call NotImplementedException..ctor, X0
	055 Move X0, 0x93E000
	056 Move X0, [X0+1424]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC

Method: System.Int32 get_extraMemoryPerRecord()

Disassembly:
	0x0380DDE8 LDR X9, [X23]
	0x0380DDEC STP X0, X1, [X31 + 0x8]

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_extraMemoryPerRecord(System.Int32 value)

Disassembly:
	0x0380DDF0 ADD X8, X31, 0x18
	0x0380DDF4 ADD X0, X31, 0x8
	0x0380DDF8 MOV X1, X9
	0x0380DDFC BL 0x24FD990
	0x0380DE00 LDR X1, [X20]
	0x0380DE04 ADD X0, X31, 0x18
	0x0380DE08 BL 0x2BC496C
	0x0380DE0C TBZ X0, 0x0, 0x380DE34
	0x0380DE10 LDR X1, [X22]
	0x0380DE14 ADD X0, X31, 0x18
	0x0380DE18 BL 0x2BC4998
	0x0380DE1C MOVN X2, 0x0
	0x0380DE20 MOV X1, X19
	0x0380DE24 MOV W3, W31
	0x0380DE28 MOV X4, X31
	0x0380DE2C BL 0x3808FE4
	0x0380DE30 B 0x380DE00
	0x0380DE34 LDR X1, [X21]
	0x0380DE38 ADD X0, X31, 0x18
	0x0380DE3C BL 0x2BC4968
	0x0380DE40 LDP X20, X19, [X31 + 0x50]
	0x0380DE44 LDP X22, X21, [X31 + 0x40]
	0x0380DE48 LDP X30, X23, [X31 + 0x30]
	0x0380DE4C ADD X31, X31, 0x60
	0x0380DE50 RET
	0x0380DE54 B 0x380DE58
	0x0380DE58 MOV X20, X0
	0x0380DE5C CMP W1, 0x1
	0x0380DE60 B.NE 0x380DE8C
	0x0380DE64 MOV X0, X20
	0x0380DE68 BL 0x3EB1AD0
	0x0380DE6C LDR X19, [X0]
	0x0380DE70 BL 0x3EB1AE0
	0x0380DE74 LDR X1, [X21]
	0x0380DE78 ADD X0, X31, 0x18
	0x0380DE7C BL 0x2BC4968
	0x0380DE80 CBZ X19, 0x380DE40
	0x0380DE84 MOV X0, X19
	0x0380DE88 BL 0x1C16F18
	0x0380DE8C MOV X19, X31
	0x0380DE90 B 0x380DE98
	0x0380DE94 MOV X20, X0
	0x0380DE98 LDR X1, [X21]
	0x0380DE9C ADD X0, X31, 0x18
	0x0380DEA0 BL 0x2BC4968
	0x0380DEA4 CBNZ X19, 0x380DEB0
	0x0380DEA8 MOV X0, X20
	0x0380DEAC BL 0x1D2C690
	0x0380DEB0 MOV X0, X19
	0x0380DEB4 BL 0x1C16F18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD5000
	006 Move W8, [X21+1162]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x93D000
	014 Move X0, [X0+1696]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1162], W8
	018 Move TEMP, X19
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {31}
	022 Move X8, [X20+48]
	023 Compare X8, 0
	024 JumpIfNotEqual {48}
	025 Move [X20+76], W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Move X0, 0x8EF000
	032 Move X0, [X0+1400]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0x93E000
	037 Move X0, [X0+1432]
	038 Call 0x1C17D08
	039 Move X20, X0
	040 Move X0, 0x8F1000
	041 Move X0, [X0+3784]
	042 Call 0x1C17D08
	043 Move X2, X0
	044 Move X0, X19
	045 Move X1, X20
	046 Move X3, X31
	047 Call ArgumentException..ctor, X0, X1, X2
	048 Move X0, 0x8F0000
	049 Move X0, [X0+1880]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X1, X31
	053 Move X19, X0
	054 Call NotImplementedException..ctor, X0
	055 Move X0, 0x93E000
	056 Move X0, [X0+1440]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.InputUpdateType get_updateMask()

Disassembly:
	0x0380DEB8 BL 0x1990590
	0x0380DEBC SUB X31, X31, 0x60
	0x0380DEC0 STP X30, X23, [X31 + 0x30]
	0x0380DEC4 STP X22, X21, [X31 + 0x40]
	0x0380DEC8 STP X20, X19, [X31 + 0x50]
	0x0380DECC ADRP X20, 0xBD4000
	0x0380DED0 ADRP X23, 0x912000
	0x0380DED4 LDRB W8, [X20 + 0x492]
	0x0380DED8 LDR X23, [X23 + 0x60]
	0x0380DEDC MOV X19, X0
	0x0380DEE0 TBNZ X8, 0x0, 0x380DF1C
	0x0380DEE4 ADRP X0, 0x912000
	0x0380DEE8 LDR X0, [X0 + 0x48]
	0x0380DEEC BL 0x1C16CF4
	0x0380DEF0 ADRP X0, 0x912000
	0x0380DEF4 LDR X0, [X0 + 0x50]
	0x0380DEF8 BL 0x1C16CF4
	0x0380DEFC ADRP X0, 0x912000
	0x0380DF00 LDR X0, [X0 + 0x58]
	0x0380DF04 BL 0x1C16CF4
	0x0380DF08 ADRP X0, 0x912000
	0x0380DF0C LDR X0, [X0 + 0x60]
	0x0380DF10 BL 0x1C16CF4
	0x0380DF14 MOVZ W8, 0x1
	0x0380DF18 STRB W8, [X20 + 0x492]
	0x0380DF1C ADRP X20, 0x912000
	0x0380DF20 ADRP X22, 0x912000
	0x0380DF24 ADRP X21, 0x912000
	0x0380DF28 LDR X20, [X20 + 0x50]
	0x0380DF2C LDR X22, [X22 + 0x58]
	0x0380DF30 LDR X21, [X21 + 0x48]
	0x0380DF34 MOV X0, X19
	0x0380DF38 STP X31, X31, [X31 + 0x18]
	0x0380DF3C STR X31, [X31 + 0x28]
	0x0380DF40 BL 0x380D014
	0x0380DF44 LDR X9, [X23]
	0x0380DF48 STP X0, X1, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBD5000
	005 Move W8, [X20+1163]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x90F000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move X0, 0x93E000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move X0, 0x93E000
	018 Move X0, [X0+1456]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1163], W8
	022 Move W8, [X19+88]
	023 Compare W8, 0
	024 JumpIfEqual {26}
	025 Move W0, [X19+92]
	026 Move X19, 0x90F000
	027 Move X19, [X19+624]
	028 Move X0, [X19]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X19]
	034 Move X8, [X0+184]
	035 Move X8, [X8]
	036 Compare X8, 0
	037 JumpIfEqual {44}
	038 Move W8, [X8+168]
	039 And W0, W8, 0xFFFFFFF7
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return X0
	044 Call 0x1C17F20

Method: System.Void set_updateMask(UnityEngine.InputSystem.LowLevel.InputUpdateType value)

Disassembly:
	0x0380DF4C ADD X8, X31, 0x18
	0x0380DF50 ADD X0, X31, 0x8
	0x0380DF54 MOV X1, X9
	0x0380DF58 BL 0x24FD990
	0x0380DF5C LDR X1, [X20]
	0x0380DF60 ADD X0, X31, 0x18
	0x0380DF64 BL 0x2BC496C
	0x0380DF68 TBZ X0, 0x0, 0x380DF8C
	0x0380DF6C LDR X1, [X22]
	0x0380DF70 ADD X0, X31, 0x18
	0x0380DF74 BL 0x2BC4998
	0x0380DF78 MOVN X2, 0x0
	0x0380DF7C MOV X1, X19
	0x0380DF80 MOV X3, X31
	0x0380DF84 BL 0x3809228
	0x0380DF88 B 0x380DF5C
	0x0380DF8C LDR X1, [X21]
	0x0380DF90 ADD X0, X31, 0x18
	0x0380DF94 BL 0x2BC4968
	0x0380DF98 LDP X20, X19, [X31 + 0x50]
	0x0380DF9C LDP X22, X21, [X31 + 0x40]
	0x0380DFA0 LDP X30, X23, [X31 + 0x30]
	0x0380DFA4 ADD X31, X31, 0x60
	0x0380DFA8 RET
	0x0380DFAC B 0x380DFB0
	0x0380DFB0 MOV X20, X0
	0x0380DFB4 CMP W1, 0x1
	0x0380DFB8 B.NE 0x380DFE4
	0x0380DFBC MOV X0, X20
	0x0380DFC0 BL 0x3EB1AD0
	0x0380DFC4 LDR X19, [X0]
	0x0380DFC8 BL 0x3EB1AE0
	0x0380DFCC LDR X1, [X21]
	0x0380DFD0 ADD X0, X31, 0x18
	0x0380DFD4 BL 0x2BC4968
	0x0380DFD8 CBZ X19, 0x380DF98
	0x0380DFDC MOV X0, X19
	0x0380DFE0 BL 0x1C16F18
	0x0380DFE4 MOV X19, X31
	0x0380DFE8 B 0x380DFF0
	0x0380DFEC MOV X20, X0
	0x0380DFF0 LDR X1, [X21]
	0x0380DFF4 ADD X0, X31, 0x18
	0x0380DFF8 BL 0x2BC4968
	0x0380DFFC CBNZ X19, 0x380E008
	0x0380E000 MOV X0, X20
	0x0380E004 BL 0x1D2C690
	0x0380E008 MOV X0, X19
	0x0380E00C BL 0x1C16F18
	0x0380E010 BL 0x1990590

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBD5000
	007 Move W8, [X21+1164]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x93E000
	015 Move X0, [X0+1464]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1164], W8
	019 Compare W20, 0
	020 JumpIfEqual {36}
	021 Move X8, 0x93E000
	022 Move X8, [X8+1464]
	023 Add X0, X31, 8
	024 Move W1, W20
	025 Move [X31+8], X31
	026 Move X2, [X8]
	027 Call Nullable`1<Int32Enum>..ctor, X0, X1
	028 Move X8, [X31+8]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Move [X19+88], X8
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Add X31, X31, 48
	035 Return 
	036 Move X0, 0x8EF000
	037 Move X0, [X0+1400]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0x93E000
	042 Move X0, [X0+1472]
	043 Call 0x1C17D08
	044 Move X20, X0
	045 Move X0, 0x8F1000
	046 Move X0, [X0+3784]
	047 Call 0x1C17D08
	048 Move X2, X0
	049 Move X0, X19
	050 Move X1, X20
	051 Move X3, X31
	052 Call ArgumentException..ctor, X0, X1, X2
	053 Move X0, 0x93E000
	054 Move X0, [X0+1480]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Call 0x1C17DEC

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControl> get_controls()

Disassembly:
	0x0380E014 SUB X31, X31, 0x40
	0x0380E018 STP X30, X2, [X31 + 0x10]
	0x0380E01C STP X22, X21, [X31 + 0x20]
	0x0380E020 STP X20, X19, [X31 + 0x30]
	0x0380E024 ADRP X21, 0xBD3000
	0x0380E028 ADRP X22, 0x93C000
	0x0380E02C LDRB W8, [X21 + 0x493]
	0x0380E030 LDR X22, [X22 + 0x68]
	0x0380E034 MOV X19, X1
	0x0380E038 MOV X20, X0
	0x0380E03C TBNZ X8, 0x0, 0x380E06C
	0x0380E040 ADRP X0, 0x93C000
	0x0380E044 LDR X0, [X0 + 0x68]
	0x0380E048 BL 0x1C16CF4
	0x0380E04C ADRP X0, 0x938000
	0x0380E050 LDR X0, [X0 + 0xD50]
	0x0380E054 BL 0x1C16CF4
	0x0380E058 ADRP X0, 0x90D000
	0x0380E05C LDR X0, [X0 + 0xD18]
	0x0380E060 BL 0x1C16CF4
	0x0380E064 MOVZ W8, 0x1
	0x0380E068 STRB W8, [X21 + 0x493]
	0x0380E06C LDR X1, [X22]
	0x0380E070 ADD X0, X31, 0x18
	0x0380E074 BL 0x2207FC4
	0x0380E078 TBNZ X0, 0x0, 0x380E110

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBD4000
	007 Move X20, 0x937000
	008 Move W8, [X21+1165]
	009 Move X20, [X20+3960]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x937000
	016 Move X0, [X0+3960]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1165], W8
	020 Move X1, [X19+32]
	021 Move W3, [X19+40]
	022 Move X4, [X20]
	023 Add X0, X31, 0
	024 Move W2, W31
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Call ReadOnlyArray`1<Object>..ctor, X0, X1, X2, X3
	028 Move X0, [X31]
	029 Move X1, [X31+8]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Add X31, X31, 48
	035 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/Record get_Item(System.Int32 index)

Disassembly:
	0x0380E07C ADRP X8, 0x938000
	0x0380E080 LDR X8, [X8 + 0xD50]
	0x0380E084 ADD X0, X31, 0x18
	0x0380E088 LDR X1, [X8]
	0x0380E08C BL 0x2208050
	0x0380E090 LDR X8, [X31 + 0x18]
	0x0380E094 TBZ X0, 0x0, 0x380E144
	0x0380E098 MOV X0, X8
	0x0380E09C MOV X1, X31
	0x0380E0A0 BL 0x3802B50
	0x0380E0A4 MOV X1, X31
	0x0380E0A8 BL 0x3807298
	0x0380E0AC CBZ X19, 0x380E10C
	0x0380E0B0 LDR X8, [X19 + 0x78]
	0x0380E0B4 CBZ X8, 0x380E10C
	0x0380E0B8 ADRP X9, 0x90D000
	0x0380E0BC LDR X9, [X9 + 0xD18]
	0x0380E0C0 MOV X21, X0
	0x0380E0C4 LDR X22, [X8 + 0x10]
	0x0380E0C8 LDR X0, [X9]
	0x0380E0CC LDR W9, [X0 + 0xE0]
	0x0380E0D0 CBNZ W9, 0x380E0D8
	0x0380E0D4 BL 0x1C16DFC
	0x0380E0D8 ADD X0, X31, 0x18
	0x0380E0DC MOV X1, X31
	0x0380E0E0 SUB X21, X21, X22, 0x20, LSR
	0x0380E0E4 BL 0x37FC758
	0x0380E0E8 MOV X0, X20
	0x0380E0EC MOV X1, X19
	0x0380E0F0 MOV X2, X21
	0x0380E0F4 BL 0x380E1C8
	0x0380E0F8 LDP X20, X19, [X31 + 0x30]
	0x0380E0FC LDP X22, X21, [X31 + 0x20]
	0x0380E100 LDR X30, [X31 + 0x10]
	0x0380E104 ADD X31, X31, 0x40
	0x0380E108 RET
	0x0380E10C BL 0x1C16F20
	0x0380E110 ADRP X0, 0x8EE000
	0x0380E114 LDR X0, [X0 + 0x758]
	0x0380E118 BL 0x1C16D08
	0x0380E11C BL 0x1C16F10
	0x0380E120 MOV X1, X31
	0x0380E124 MOV X19, X0
	0x0380E128 BL 0x3380288
	0x0380E12C ADRP X0, 0x93C000
	0x0380E130 LDR X0, [X0 + 0x630]
	0x0380E134 BL 0x1C16D08
	0x0380E138 MOV X1, X0
	0x0380E13C MOV X0, X19
	0x0380E140 BL 0x1C16DEC
	0x0380E144 STR X8, [X31 + 0x8]
	0x0380E148 ADRP X0, 0x910000
	0x0380E14C LDR X0, [X0 + 0x4F8]
	0x0380E150 BL 0x1C16D08
	0x0380E154 ADD X1, X31, 0x8
	0x0380E158 BL 0x1C16E04
	0x0380E15C MOV X19, X0
	0x0380E160 ADRP X0, 0x93C000
	0x0380E164 LDR X0, [X0 + 0x638]
	0x0380E168 BL 0x1C16D08
	0x0380E16C MOV X1, X19
	0x0380E170 MOV X2, X31
	0x0380E174 BL 0x321EFD0
	0x0380E178 MOV X19, X0
	0x0380E17C ADRP X0, 0x8ED000
	0x0380E180 LDR X0, [X0 + 0x578]
	0x0380E184 BL 0x1C16D08
	0x0380E188 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move TEMP, X1
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {33}
	011 Move W8, [X19+68]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W8, [X19+80]
	014 Move W9, [X19+72]
	015 Move X0, X19
	016 Add W8, W8, W1
	017 NotImplemented "Instruction SDIV not yet implemented."
	018 NotImplemented "Instruction MSUB not yet implemented."
	019 Move W1, W20
	020 Call InputStateHistory.GetRecord, X0, X1
	021 Compare X0, 0
	022 JumpIfEqual {75}
	023 Move W8, [X0+8]
	024 Add W1, W20, 1
	025 Move X0, X19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 NotImplemented "Instruction BFM not yet implemented."
	031 Add X31, X31, 48
	032 Return X0
	033 Move [X31+12], W1
	034 Move X20, 0x8E6000
	035 Move X20, [X20+1880]
	036 Move X0, X20
	037 Call 0x1C17D08
	038 Add X1, X31, 12
	039 Call 0x1C17E04
	040 Move W8, [X19+68]
	041 Move X21, X0
	042 Move X0, X20
	043 Move [X31+8], W8
	044 Call 0x1C17D08
	045 Add X1, X31, 8
	046 Call 0x1C17E04
	047 Move X19, X0
	048 Move X0, 0x912000
	049 Move X0, [X0+112]
	050 Call 0x1C17D08
	051 Move X1, X21
	052 Move X2, X19
	053 Move X3, X31
	054 Call String.Format, X0, X1, X2
	055 Move X19, X0
	056 Move X0, 0x8EE000
	057 Move X0, [X0+1888]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X20, X0
	061 Move X0, 0x8F1000
	062 Move X0, [X0+304]
	063 Call 0x1C17D08
	064 Move X2, X0
	065 Move X0, X20
	066 Move X1, X19
	067 Move X3, X31
	068 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	069 Move X0, 0x93D000
	070 Move X0, [X0+1488]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Call 0x1C17DEC
	075 Call 0x1C17F20

Method: System.Void set_Item(System.Int32 index, UnityEngine.InputSystem.LowLevel.InputStateHistory/Record value)

Disassembly:
	0x0380E2A4 B.GT 0x380E40C
	0x0380E2A8 ADRP X8, 0x93B000
	0x0380E2AC LDR X8, [X8 + 0xC00]
	0x0380E2B0 MOVZ W3, 0xA
	0x0380E2B4 MOV X0, X23
	0x0380E2B8 MOV X1, X22
	0x0380E2BC LDR X4, [X8]
	0x0380E2C0 MOV X2, X20
	0x0380E2C4 BL 0x2174728
	0x0380E2C8 MOV W24, W0
	0x0380E2CC ADD X1, X31, 0x1C
	0x0380E2D0 MOV X0, X19
	0x0380E2D4 BL 0x380DC58
	0x0380E2D8 CBZ X0, 0x380E3B4
	0x0380E2DC STR D8, [X0]
	0x0380E2E0 LDR W8, [X19 + 0x54]
	0x0380E2E4 MOV X22, X0
	0x0380E2E8 ADD W8, W8, 0x1
	0x0380E2EC STR W8, [X19 + 0x54]
	0x0380E2F0 STR W8, [X0 + 0x8]
	0x0380E2F4 LDR W8, [X19 + 0x28]
	0x0380E2F8 CMP W8, 0x1
	0x0380E2FC B.GT 0x380E308
	0x0380E300 LDRB W8, [X19 + 0x60]
	0x0380E304 CBZ W8, 0x380E3AC
	0x0380E308 ADD X23, X22, 0x10
	0x0380E30C STR W24, [X22 + 0xC]
	0x0380E310 CBZ X20, 0x380E3B4
	0x0380E314 LDR V0, [X20 + 0x1]
	0x0380E318 LDR X0, [X25]
	0x0380E31C STR V0, [X31]
	0x0380E320 LDR W8, [X0 + 0xE0]
	0x0380E324 CBNZ W8, 0x380E32C
	0x0380E328 BL 0x1C16DFC
	0x0380E32C ADD X0, X31, 0x0
	0x0380E330 MOV X1, X31
	0x0380E334 BL 0x3800B6C
	0x0380E338 LDR V0, [X20 + 0x1]
	0x0380E33C MOV W2, W0
	0x0380E340 MOV X0, X23
	0x0380E344 MOV X3, X31
	0x0380E348 FMOV X8, D0
	0x0380E34C ADD X1, X21, X8, 0x20, LSR
	0x0380E350 STR V0, [X31]
	0x0380E354 BL 0x3BFF954
	0x0380E358 LDR W9, [X31 + 0x1C]
	0x0380E35C LDR W10, [X22 + 0x8]
	0x0380E360 LDR X8, [X19 + 0x10]
	0x0380E364 ADD W20, W9, 0x1
	0x0380E368 BFM X20, X10, 0x20, 0x1F
	0x0380E36C CBZ X8, 0x380E388
	0x0380E370 LDR X9, [X8 + 0x18]
	0x0380E374 LDR X0, [X8 + 0x40]
	0x0380E378 LDR X3, [X8 + 0x28]
	0x0380E37C MOV X1, X19
	0x0380E380 MOV X2, X20
	0x0380E384 BLR X9
	0x0380E388 MOV X0, X19
	0x0380E38C MOV X1, X20
	0x0380E390 LDP X20, X19, [X31 + 0x50]
	0x0380E394 LDP X22, X21, [X31 + 0x40]
	0x0380E398 LDP X24, X23, [X31 + 0x30]
	0x0380E39C LDP X30, X25, [X31 + 0x20]
	0x0380E3A0 LDR V8, [X31 + 0x10]
	0x0380E3A4 ADD X31, X31, 0x60
	0x0380E3A8 RET
	0x0380E3AC ADD X23, X22, 0xC
	0x0380E3B0 CBNZ X20, 0x380E314
	0x0380E3B4 BL 0x1C16F20
	0x0380E3B8 ADRP X0, 0x93C000
	0x0380E3BC LDR X0, [X0 + 0x640]
	0x0380E3C0 BL 0x1C16D08
	0x0380E3C4 MOV X1, X20
	0x0380E3C8 MOV X2, X31
	0x0380E3CC BL 0x321EFD0
	0x0380E3D0 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X19, X0
	008 Move TEMP, X1
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {42}
	012 Move W8, [X19+68]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W8, [X19+80]
	015 Move W9, [X19+72]
	016 Move X0, X19
	017 Move X20, X3
	018 Add W8, W8, W1
	019 NotImplemented "Instruction SDIV not yet implemented."
	020 NotImplemented "Instruction MSUB not yet implemented."
	021 Move W1, W22
	022 Move X21, X2
	023 Call InputStateHistory.GetRecord, X0, X1
	024 Compare X0, 0
	025 JumpIfEqual {84}
	026 Move W8, [X0+8]
	027 Add W9, W22, 1
	028 Add X0, X31, 0
	029 Move X1, X21
	030 Move X2, X20
	031 Move [X31], X19
	032 Move [X31+8], W9
	033 Move [X31+12], W8
	034 Call Record.CopyFrom, X0, X1
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X22, [X31+32]
	038 Move X21, [X31+40]
	039 Move X30, [X31+16]
	040 Add X31, X31, 64
	041 Return 
	042 Move [X31], W1
	043 Move X20, 0x8E6000
	044 Move X20, [X20+1880]
	045 Move X0, X20
	046 Call 0x1C17D08
	047 Add X1, X31, 0
	048 Call 0x1C17E04
	049 Move W8, [X19+68]
	050 Move X21, X0
	051 Move X0, X20
	052 Move [X31+28], W8
	053 Call 0x1C17D08
	054 Add X1, X31, 28
	055 Call 0x1C17E04
	056 Move X19, X0
	057 Move X0, 0x912000
	058 Move X0, [X0+112]
	059 Call 0x1C17D08
	060 Move X1, X21
	061 Move X2, X19
	062 Move X3, X31
	063 Call String.Format, X0, X1, X2
	064 Move X19, X0
	065 Move X0, 0x8EE000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X20, X0
	070 Move X0, 0x8F1000
	071 Move X0, [X0+304]
	072 Call 0x1C17D08
	073 Move X2, X0
	074 Move X0, X20
	075 Move X1, X19
	076 Move X3, X31
	077 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	078 Move X0, 0x93D000
	079 Move X0, [X0+1512]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X20
	083 Call 0x1C17DEC
	084 Call 0x1C17F20

Method: System.Action`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/Record> get_onRecordAdded()

Disassembly:
	0x0380E748 MOVZ W2, 0x4
	0x0380E74C MOV W3, W31

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_onRecordAdded(System.Action`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/Record> value)

Disassembly:
	0x0380E750 STP X31, X31, [X31 + 0x8]
	0x0380E754 BL 0x23C9B94

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Func`4<UnityEngine.InputSystem.InputControl, System.Double, UnityEngine.InputSystem.LowLevel.InputEventPtr, System.Boolean> get_onShouldRecordStateChange()

Disassembly:
	0x0380E758 LDUR V0, [X31 + 0x8]
	0x0380E75C LDP X22, X21, [X31 + 0x80]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_onShouldRecordStateChange(System.Func`4<UnityEngine.InputSystem.InputControl, System.Double, UnityEngine.InputSystem.LowLevel.InputEventPtr, System.Boolean> value)

Disassembly:
	0x0380E760 LDP X24, X23, [X31 + 0x70]
	0x0380E764 LDP X30, X25, [X31 + 0x60]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Void .ctor(System.Int32 maxStateSizeInBytes)

Disassembly:
	0x0380E768 STR V0, [X19 + 0x3]
	0x0380E76C LDP X20, X19, [X31 + 0x90]
	0x0380E770 ADD X31, X31, 0xA0
	0x0380E774 RET
	0x0380E778 BL 0x1C16F20
	0x0380E77C B 0x380E790
	0x0380E780 B 0x380E790
	0x0380E784 B 0x380E790
	0x0380E788 B 0x380E790
	0x0380E78C B 0x380E790
	0x0380E790 MOV X20, X0
	0x0380E794 CMP W1, 0x1
	0x0380E798 B.NE 0x380E7CC
	0x0380E79C MOV X0, X20
	0x0380E7A0 BL 0x3EB1AD0
	0x0380E7A4 LDR X21, [X0]
	0x0380E7A8 BL 0x3EB1AE0
	0x0380E7AC ADRP X8, 0x911000
	0x0380E7B0 LDR X8, [X8 + 0x48]
	0x0380E7B4 ADD X0, X31, 0x40
	0x0380E7B8 LDR X1, [X8]
	0x0380E7BC BL 0x2BC4968
	0x0380E7C0 CBZ X21, 0x380E6E4
	0x0380E7C4 MOV X0, X21
	0x0380E7C8 BL 0x1C16F18
	0x0380E7CC MOV X21, X31
	0x0380E7D0 B 0x380E7D8
	0x0380E7D4 MOV X20, X0
	0x0380E7D8 ADRP X8, 0x911000
	0x0380E7DC LDR X8, [X8 + 0x48]
	0x0380E7E0 LDR X1, [X8]
	0x0380E7E4 ADD X0, X31, 0x40
	0x0380E7E8 BL 0x2BC4968
	0x0380E7EC CBNZ X21, 0x380E7F8
	0x0380E7F0 MOV X0, X20
	0x0380E7F4 BL 0x1D2C690
	0x0380E7F8 MOV X0, X21
	0x0380E7FC BL 0x1C16F18
	0x0380E800 BL 0x1990590
	0x0380E804 LDR W10, [X0 + 0x28]
	0x0380E808 LDR W8, [X0 + 0x40]
	0x0380E80C LDR W9, [X0 + 0x4C]
	0x0380E810 CMP W10, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move W8, 128
	006 Move X1, X31
	007 Move X19, X0
	008 Move [X0+72], W8
	009 Call Object..ctor, X0
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W8, 1
	012 Add W9, W20, 4
	013 Move [X19+96], W8
	014 And W8, W9, 0xFFFFFFFC
	015 And W31, W20, 3
	016 NotImplemented "Instruction CSEL not yet implemented."
	017 Move [X19+64], W8
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return 
	022 Move X0, 0x8EE000
	023 Move X0, [X0+1400]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X19, X0
	027 Move X0, 0x93D000
	028 Move X0, [X0+1552]
	029 Call 0x1C17D08
	030 Move X20, X0
	031 Move X0, 0x912000
	032 Move X0, [X0+64]
	033 Call 0x1C17D08
	034 Move X2, X0
	035 Move X0, X19
	036 Move X1, X20
	037 Move X3, X31
	038 Call ArgumentException..ctor, X0, X1, X2
	039 Move X0, 0x93D000
	040 Move X0, [X0+1560]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X19
	044 Call 0x1C17DEC

Method: System.Void .ctor(System.String path)

Disassembly:
	0x0380E814 MOVZ W10, 0x10
	0x0380E818 B.NE 0x380E82C
	0x0380E81C LDRB W11, [X0 + 0x60]
	0x0380E820 CMP W11, 0x0
	0x0380E824 MOVZ W11, 0xC
	0x0380E828 CSEL W10, W11, W10, EQ
	0x0380E82C ADD W8, W9, W8
	0x0380E830 ADD W8, W8, W10
	0x0380E834 ADD W9, W8, 0x3
	0x0380E838 CMP W8, 0x0
	0x0380E83C CSEL W9, W9, W8, LT
	0x0380E840 AND W9, W9, 0xFFFFFFFC
	0x0380E844 CMP W8, W9
	0x0380E848 ADD W9, W9, 0x4
	0x0380E84C CSEL W0, W8, W9, EQ
	0x0380E850 RET
	0x0380E854 LDR W8, [X0 + 0x50]
	0x0380E858 CMP W8, W1
	0x0380E85C B.LE 0x380E870
	0x0380E860 LDR W9, [X0 + 0x48]
	0x0380E864 SUB W8, W1, W8
	0x0380E868 ADD W0, W8, W9
	0x0380E86C RET
	0x0380E870 SUB W0, W1, W8
	0x0380E874 RET
	0x0380E878 STR X30, [X31 - 0x30]!
	0x0380E87C STP X22, X21, [X31 + 0x10]
	0x0380E880 STP X20, X19, [X31 + 0x20]
	0x0380E884 ADRP X22, 0xBD3000
	0x0380E888 ADRP X21, 0x939000
	0x0380E88C LDRB W8, [X22 + 0x49A]
	0x0380E890 LDR X21, [X21 + 0xFE8]
	0x0380E894 MOV W19, W1
	0x0380E898 MOV X20, X0
	0x0380E89C TBNZ X8, 0x0, 0x380E8B4
	0x0380E8A0 ADRP X0, 0x939000
	0x0380E8A4 LDR X0, [X0 + 0xFE8]
	0x0380E8A8 BL 0x1C16CF4
	0x0380E8AC MOVZ W8, 0x1
	0x0380E8B0 STRB W8, [X22 + 0x49A]
	0x0380E8B4 LDP X0, X1, [X20 + 0x30]
	0x0380E8B8 LDR X2, [X21]
	0x0380E8BC BL 0x2222688
	0x0380E8C0 LDR W10, [X20 + 0x28]
	0x0380E8C4 LDR W8, [X20 + 0x40]
	0x0380E8C8 LDR W9, [X20 + 0x4C]
	0x0380E8CC CMP W10, 0x1
	0x0380E8D0 MOVZ W10, 0x10
	0x0380E8D4 B.NE 0x380E8E8
	0x0380E8D8 LDRB W11, [X20 + 0x60]
	0x0380E8DC CMP W11, 0x0
	0x0380E8E0 MOVZ W11, 0xC
	0x0380E8E4 CSEL W10, W11, W10, EQ
	0x0380E8E8 ADD W8, W9, W8
	0x0380E8EC ADD W8, W8, W10
	0x0380E8F0 ADD W9, W8, 0x3
	0x0380E8F4 CMP W8, 0x0
	0x0380E8F8 CSEL W9, W9, W8, LT
	0x0380E8FC AND W9, W9, 0xFFFFFFFC
	0x0380E900 CMP W8, W9
	0x0380E904 ADD W9, W9, 0x4
	0x0380E908 CSEL W8, W8, W9, EQ
	0x0380E90C MUL W8, W8, W19
	0x0380E910 LDP X20, X19, [X31 + 0x20]
	0x0380E914 LDP X22, X21, [X31 + 0x10]
	0x0380E918 ADD X0, X0, W8, SXTW
	0x0380E91C LDR X30, [X31], #0x30
	0x0380E920 RET
	0x0380E924 SUB X31, X31, 0x30
	0x0380E928 STP X30, X21, [X31 + 0x10]
	0x0380E92C STP X20, X19, [X31 + 0x20]
	0x0380E930 ADRP X21, 0xBD3000
	0x0380E934 LDRB W8, [X21 + 0x49C]
	0x0380E938 MOV X19, X1
	0x0380E93C MOV X20, X0
	0x0380E940 TBNZ X8, 0x0, 0x380E964
	0x0380E944 ADRP X0, 0x90D000
	0x0380E948 LDR X0, [X0 + 0xD18]
	0x0380E94C BL 0x1C16CF4
	0x0380E950 ADRP X0, 0x90D000
	0x0380E954 LDR X0, [X0 + 0xD48]
	0x0380E958 BL 0x1C16CF4
	0x0380E95C MOVZ W8, 0x1
	0x0380E960 STRB W8, [X21 + 0x49C]
	0x0380E964 STP X31, X31, [X31]
	0x0380E968 LDR W8, [X20 + 0x28]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0xBD4000
	008 Move X21, 0x90E000
	009 Move W8, [X22+1166]
	010 Move X21, [X21+624]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x90E000
	018 Move X0, [X0+3672]
	019 Call 0x1C17CF4
	020 Move X0, 0x939000
	021 Move X0, [X0+3640]
	022 Call 0x1C17CF4
	023 Move X0, 0x90E000
	024 Move X0, [X0+624]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1166], W8
	028 Move X22, 0x939000
	029 Move X22, [X22+3640]
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move W8, 128
	032 Move X0, X19
	033 Move X1, X31
	034 Move [X31+32], V0
	035 Move [X31+40], V0
	036 Move [X19+72], W8
	037 Call Object..ctor, X0
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X21, 0x90E000
	044 Move X21, [X21+3672]
	045 Add X8, X31, 0
	046 Move X0, X20
	047 Move X1, X31
	048 Call InputSystem.FindControls, X0
	049 Move V0, [X31]
	050 Move V1, [X31+16]
	051 Move X2, [X22]
	052 Move [X31+32], V0
	053 Move [X31+40], V1
	054 Add X0, X31, 32
	055 Move W1, W31
	056 Call 0x2DFC7F4, X0, X1
	057 Move [X19+32], X0
	058 Compare X0, 0
	059 JumpIfEqual {72}
	060 Move X8, [X0+24]
	061 Add X0, X31, 32
	062 Move [X19+40], W8
	063 Move X1, [X21]
	064 Call 0x2DFC98C, X0
	065 Move X20, [X31+96]
	066 Move X19, [X31+104]
	067 Move X22, [X31+80]
	068 Move X21, [X31+88]
	069 Move X30, [X31+64]
	070 Add X31, X31, 112
	071 Return 
	072 Call 0x1C17F20
	073 Move X20, X0
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, X20
	076 Call 0x3EB2AD0
	077 Move X19, [X0]
	078 Call 0x3EB2AE0
	079 Move X1, [X21]
	080 Add X0, X31, 32
	081 Call 0x2DFC98C, X0
	082 Compare X19, 0
	083 JumpIfEqual {65}
	084 Move X0, X19
	085 Call 0x1C17F18
	086 Move X19, X31
	087 Move X20, X0
	088 Move X1, [X21]
	089 Add X0, X31, 32
	090 Call 0x2DFC98C, X0
	091 Compare X19, 0
	092 JumpIfNotEqual {95}
	093 Move X0, X20
	094 Call 0x1D2D690
	095 Move X0, X19
	096 Call 0x1C17F18
	097 Call 0x1991590

Method: System.Void .ctor(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x0380E96C ADRP X21, 0x90D000
	0x0380E970 LDR X21, [X21 + 0xD48]
	0x0380E974 CMP W8, 0x1
	0x0380E978 B.NE 0x380E984
	0x0380E97C LDRB W8, [X20 + 0x60]
	0x0380E980 CBZ W8, 0x380E9F0
	0x0380E984 MOV X0, X20
	0x0380E988 BL 0x380D014
	0x0380E98C STP X0, X1, [X31]
	0x0380E990 CBZ X19, 0x380EA18
	0x0380E994 LDR W1, [X19 + 0xC]
	0x0380E998 LDR X2, [X21]
	0x0380E99C ADD X0, X31, 0x0
	0x0380E9A0 BL 0x24FDB3C
	0x0380E9A4 MOV X20, X0
	0x0380E9A8 ADD X19, X19, 0x10
	0x0380E9AC CBZ X20, 0x380EA18
	0x0380E9B0 ADRP X8, 0x90D000
	0x0380E9B4 LDR X8, [X8 + 0xD18]
	0x0380E9B8 LDR X21, [X20 + 0x10]
	0x0380E9BC LDR X0, [X8]
	0x0380E9C0 LDR W8, [X0 + 0xE0]
	0x0380E9C4 CBNZ W8, 0x380E9CC
	0x0380E9C8 BL 0x1C16DFC
	0x0380E9CC LDR X8, [X20]
	0x0380E9D0 SUB X1, X19, X21, 0x20, LSR
	0x0380E9D4 MOV X0, X20
	0x0380E9D8 LDP X9, X2, [X8 + 0x1B8]
	0x0380E9DC BLR X9
	0x0380E9E0 LDP X20, X19, [X31 + 0x20]
	0x0380E9E4 LDP X30, X21, [X31 + 0x10]
	0x0380E9E8 ADD X31, X31, 0x30
	0x0380E9EC RET
	0x0380E9F0 MOV X0, X20
	0x0380E9F4 BL 0x380D014
	0x0380E9F8 LDR X2, [X21]
	0x0380E9FC STP X0, X1, [X31]
	0x0380EA00 ADD X0, X31, 0x0
	0x0380EA04 MOV W1, W31
	0x0380EA08 BL 0x24FDB3C
	0x0380EA0C MOV X20, X0
	0x0380EA10 ADD X19, X19, 0xC
	0x0380EA14 CBNZ X20, 0x380E9B0
	0x0380EA18 BL 0x1C16F20
	0x0380EA1C STR D8, [X31 - 0x30]!
	0x0380EA20 STR X30, [X31 + 0x8]
	0x0380EA24 STP X22, X21, [X31 + 0x10]
	0x0380EA28 STP X20, X19, [X31 + 0x20]
	0x0380EA2C ADRP X22, 0xBD2000
	0x0380EA30 LDRB W8, [X22 + 0xDCD]
	0x0380EA34 MOV X21, X2
	0x0380EA38 MOV V8.16B, V0.16B
	0x0380EA3C MOV X19, X1
	0x0380EA40 MOV X20, X0
	0x0380EA44 CBNZ W8, 0x380EA5C
	0x0380EA48 ADRP X0, 0x936000
	0x0380EA4C LDR X0, [X0 + 0xF90]
	0x0380EA50 BL 0x1C16CF4
	0x0380EA54 MOVZ W8, 0x1
	0x0380EA58 STRB W8, [X22 + 0xDCD]
	0x0380EA5C ADRP X8, 0x936000
	0x0380EA60 LDR X8, [X8 + 0xF90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD4000
	006 Move W8, [X21+1167]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x938000
	014 Move X0, [X0+720]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1167], W8
	018 Move W8, 128
	019 Move X0, X20
	020 Move X1, X31
	021 Move [X20+72], W8
	022 Call Object..ctor, X0
	023 Compare X19, 0
	024 JumpIfEqual {51}
	025 Move X8, 0x938000
	026 Move X8, [X8+720]
	027 Move W1, 1
	028 Move X0, [X8]
	029 Call 0x1C17D6C
	030 Compare X0, 0
	031 JumpIfEqual {69}
	032 Move X8, [X0]
	033 Move X21, X0
	034 Move X0, X19
	035 Move X1, [X8+64]
	036 Call 0x1C17E00
	037 Compare X0, 0
	038 JumpIfEqual {70}
	039 Move W8, [X21+24]
	040 Compare W8, 0
	041 JumpIfEqual {73}
	042 Move W8, 1
	043 Move [X21+32], X19
	044 Move [X20+32], X21
	045 Move [X20+40], W8
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return 
	051 Move X0, 0x8EB000
	052 Move X0, [X0+1320]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0x90E000
	057 Move X0, [X0+3424]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Move X2, X31
	062 Call ArgumentNullException..ctor, X0, X1
	063 Move X0, 0x93D000
	064 Move X0, [X0+1568]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Call 0x1C17DEC
	069 Call 0x1C17F20
	070 Call 0x1C17F44
	071 Move X1, X31
	072 Call 0x1C17DEC
	073 Call 0x1C17F28

Method: System.Void .ctor(System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.InputControl> controls)

Disassembly:
	0x0380EA64 MOV X0, X20
	0x0380EA68 LDR X8, [X8]
	0x0380EA6C LDR X8, [X8 + 0xB8]
	0x0380EA70 LDR W22, [X8 + 0x4]
	0x0380EA74 BL 0x380CEB8
	0x0380EA78 ANDS W31, W0, W22, 0x0
	0x0380EA7C B.EQ 0x380EADC
	0x0380EA80 LDR X8, [X20 + 0x18]
	0x0380EA84 CBZ X8, 0x380EAA8
	0x0380EA88 LDR X9, [X8 + 0x18]
	0x0380EA8C LDR X0, [X8 + 0x40]
	0x0380EA90 LDR X3, [X8 + 0x28]
	0x0380EA94 MOV X1, X19
	0x0380EA98 MOV V0.16B, V8.16B
	0x0380EA9C MOV X2, X21
	0x0380EAA0 BLR X9
	0x0380EAA4 TBZ X0, 0x0, 0x380EADC
	0x0380EAA8 CBZ X19, 0x380EAF0
	0x0380EAAC MOV X0, X19
	0x0380EAB0 MOV X1, X31
	0x0380EAB4 BL 0x3772640
	0x0380EAB8 MOV X2, X0
	0x0380EABC MOV X0, X20
	0x0380EAC0 MOV X1, X19
	0x0380EAC4 LDP X20, X19, [X31 + 0x20]
	0x0380EAC8 LDP X22, X21, [X31 + 0x10]
	0x0380EACC LDR X30, [X31 + 0x8]
	0x0380EAD0 MOV V0.16B, V8.16B
	0x0380EAD4 LDR V8, [X31], #0x30
	0x0380EAD8 B 0x380E1C8
	0x0380EADC LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD4000
	006 Move W8, [X21+1168]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x93D000
	014 Move X0, [X0+1576]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1168], W8
	018 Move W8, 128
	019 Move X0, X19
	020 Move X1, X31
	021 Move [X19+72], W8
	022 Call Object..ctor, X0
	023 Compare X20, 0
	024 JumpIfEqual {35}
	025 Move X8, 0x93D000
	026 Move X8, [X8+1576]
	027 Move X0, X20
	028 Move X1, [X8]
	029 Call Enumerable.ToArray, X0
	030 Move [X19+32], X0
	031 Compare X0, 0
	032 JumpIfEqual {40}
	033 Move X8, [X0+24]
	034 Move [X19+40], W8
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 
	040 Call 0x1C17F20

Method: System.Void Finalize()

Disassembly:
	0x0380EAE0 LDP X22, X21, [X31 + 0x10]
	0x0380EAE4 LDR X30, [X31 + 0x8]
	0x0380EAE8 LDR V8, [X31], #0x30
	0x0380EAEC RET
	0x0380EAF0 BL 0x1C16F20
	0x0380EAF4 RET
	0x0380EAF8 STR X30, [X31 - 0x10]!
	0x0380EAFC LDR X8, [X0]
	0x0380EB00 CBZ X8, 0x380EB2C
	0x0380EB04 LDR W9, [X0 + 0x8]
	0x0380EB08 LDR W8, [X8 + 0x44]
	0x0380EB0C ADD W9, W9, 0x1
	0x0380EB10 CMP W9, W8
	0x0380EB14 B.GE 0x380EB1C
	0x0380EB18 STR W9, [X0 + 0x8]
	0x0380EB1C CMP W9, W8
	0x0380EB20 CSET W0, LT
	0x0380EB24 LDR X30, [X31], #0x10
	0x0380EB28 RET
	0x0380EB2C BL 0x1C16F20
	0x0380EB30 MOVN W8, 0x0
	0x0380EB34 STR W8, [X0 + 0x8]
	0x0380EB38 RET
	0x0380EB3C STR X30, [X31 - 0x10]!
	0x0380EB40 LDR X8, [X0]
	0x0380EB44 CBZ X8, 0x380EB58
	0x0380EB48 LDR W1, [X0 + 0x8]
	0x0380EB4C MOV X0, X8
	0x0380EB50 LDR X30, [X31], #0x10
	0x0380EB54 B 0x380D07C
	0x0380EB58 BL 0x1C16F20
	0x0380EB5C SUB X31, X31, 0x30
	0x0380EB60 STP X30, X21, [X31 + 0x10]
	0x0380EB64 STP X20, X19, [X31 + 0x20]
	0x0380EB68 ADRP X21, 0xBD3000
	0x0380EB6C ADRP X20, 0x910000
	0x0380EB70 LDRB W8, [X21 + 0x49D]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call InputStateHistory.Dispose, X0
	007 Move X0, X19
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X1, X31
	011 Move X30, [X31+32]
	012 Move X21, [X31+40]
	013 Call Object.Finalize, X0
	014 Return 
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X21, X0
	017 Move X0, X21
	018 Call 0x3EB2AD0
	019 Move X20, [X0]
	020 Call 0x3EB2AE0
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object.Finalize, X0
	024 Compare X20, 0
	025 JumpIfNotEqual {32}
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Move X20, X31
	032 Move X0, X20
	033 Call 0x1C17F18
	034 Move X21, X0
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object.Finalize, X0
	038 Compare X20, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X21
	041 Call 0x1D2D690
	042 Move X0, X20
	043 Call 0x1C17F18
	044 Call 0x1991590

Method: System.Void Clear()

Disassembly:
	0x0380EBDC LDR X30, [X31], #0x10
	0x0380EBE0 B 0x380D1A4
	0x0380EBE4 BL 0x1C16F20
	0x0380EBE8 LDR W8, [X0 + 0x8]
	0x0380EBEC SUB W0, W8, 0x1

ISIL:
	001 Move W8, [X0+84]
	002 Move [X0+68], W31
	003 Add W8, W8, 1
	004 Move [X0+80], W31
	005 Move [X0+84], W8
	006 Return 

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/Record AddRecord(UnityEngine.InputSystem.LowLevel.InputStateHistory/Record record)

Disassembly:
	0x0380EBF0 RET
	0x0380EBF4 LDR W0, [X0 + 0xC]
	0x0380EBF8 RET
	0x0380EBFC STP X30, X19, [X31 - 0x10]!
	0x0380EC00 LDR X8, [X0]
	0x0380EC04 CBZ X8, 0x380EC34
	0x0380EC08 LDR W8, [X0 + 0x8]
	0x0380EC0C MOV X19, X0
	0x0380EC10 CBZ W8, 0x380EC34
	0x0380EC14 MOV X0, X19
	0x0380EC18 BL 0x380EBC4
	0x0380EC1C CBZ X0, 0x380EC40
	0x0380EC20 LDR W8, [X0 + 0x8]
	0x0380EC24 LDR W9, [X19 + 0xC]
	0x0380EC28 CMP W8, W9
	0x0380EC2C CSET W0, EQ
	0x0380EC30 B 0x380EC38
	0x0380EC34 MOV W0, W31
	0x0380EC38 LDP X30, X19, [X31], #0x10
	0x0380EC3C RET
	0x0380EC40 BL 0x1C16F20
	0x0380EC44 LDR X0, [X0]
	0x0380EC48 RET
	0x0380EC4C STP X30, X19, [X31 - 0x10]!
	0x0380EC50 MOV X19, X0
	0x0380EC54 BL 0x380EC88

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X20, X1
	007 Add X1, X31, 28
	008 Move X19, X2
	009 Move X21, X0
	010 Move [X31+28], W31
	011 Call InputStateHistory.AllocateRecord, X0, X1
	012 Move W8, [X31+28]
	013 Move [X31+8], X21
	014 Add W8, W8, 1
	015 Move [X31+16], W8
	016 Compare X0, 0
	017 JumpIfEqual {32}
	018 Move W8, [X0+8]
	019 Add X0, X31, 8
	020 Move X1, X20
	021 Move X2, X19
	022 Move [X31+20], W8
	023 Call Record.CopyFrom, X0, X1
	024 Move X0, [X31+8]
	025 Move X1, [X31+16]
	026 Move X20, [X31+48]
	027 Move X19, [X31+56]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Add X31, X31, 64
	031 Return X0
	032 Call 0x1C17F20

Method: System.Void StartRecording()

Disassembly:
	0x0380ED60 STP X20, X19, [X31 + 0x20]
	0x0380ED64 ADRP X20, 0xBD3000
	0x0380ED68 LDRB W8, [X20 + 0x49E]
	0x0380ED6C MOV X19, X0
	0x0380ED70 TBNZ X8, 0x0, 0x380ED94
	0x0380ED74 ADRP X0, 0x90D000
	0x0380ED78 LDR X0, [X0 + 0xD40]
	0x0380ED7C BL 0x1C16CF4
	0x0380ED80 ADRP X0, 0x90D000
	0x0380ED84 LDR X0, [X0 + 0xD48]
	0x0380ED88 BL 0x1C16CF4
	0x0380ED8C MOVZ W8, 0x1
	0x0380ED90 STRB W8, [X20 + 0x49E]
	0x0380ED94 MOV X0, X19
	0x0380ED98 BL 0x380EC88
	0x0380ED9C LDR X0, [X19]
	0x0380EDA0 CBZ X0, 0x380EE04
	0x0380EDA4 BL 0x380D014
	0x0380EDA8 UBFM X8, X1, 0x20, 0x3F
	0x0380EDAC CMP X8, 0x1
	0x0380EDB0 STP X0, X1, [X31]
	0x0380EDB4 B.NE 0x380EDC8
	0x0380EDB8 LDR X8, [X19]
	0x0380EDBC CBZ X8, 0x380EE04
	0x0380EDC0 LDRB W8, [X8 + 0x60]
	0x0380EDC4 CBZ W8, 0x380EDFC
	0x0380EDC8 MOV X0, X19
	0x0380EDCC BL 0x380EBC4
	0x0380EDD0 CBZ X0, 0x380EE04
	0x0380EDD4 LDR W1, [X0 + 0xC]
	0x0380EDD8 ADRP X8, 0x90D000
	0x0380EDDC LDR X8, [X8 + 0xD48]
	0x0380EDE0 ADD X0, X31, 0x0
	0x0380EDE4 LDR X2, [X8]
	0x0380EDE8 BL 0x24FDB3C
	0x0380EDEC LDP X20, X19, [X31 + 0x20]
	0x0380EDF0 LDR X30, [X31 + 0x10]
	0x0380EDF4 ADD X31, X31, 0x30
	0x0380EDF8 RET
	0x0380EDFC MOV W1, W31
	0x0380EE00 B 0x380EDD8
	0x0380EE04 BL 0x1C16F20
	0x0380EE08 STR X30, [X31 - 0x20]!
	0x0380EE0C STP X20, X19, [X31 + 0x10]
	0x0380EE10 MOV X20, X0
	0x0380EE14 BL 0x380EC88
	0x0380EE18 LDR X19, [X20]
	0x0380EE1C CBZ X19, 0x380EE94
	0x0380EE20 LDR W9, [X20 + 0x8]
	0x0380EE24 LDR W8, [X19 + 0x50]
	0x0380EE28 SUB W9, W9, 0x1
	0x0380EE2C SUBS W9, W9, W8
	0x0380EE30 B.GE 0x380EE3C
	0x0380EE34 LDR W10, [X19 + 0x48]
	0x0380EE38 ADD W9, W9, W10
	0x0380EE3C LDR W10, [X19 + 0x44]
	0x0380EE40 ADD W9, W9, 0x1
	0x0380EE44 CMP W9, W10
	0x0380EE48 B.GE 0x380EE7C
	0x0380EE4C LDR W10, [X19 + 0x48]
	0x0380EE50 ADD W8, W9, W8
	0x0380EE54 MOV X0, X19
	0x0380EE58 SDIV W9, W8, W10
	0x0380EE5C MSUB W20, W9, W10, W8
	0x0380EE60 MOV W1, W20
	0x0380EE64 BL 0x380D1A4
	0x0380EE68 CBZ X0, 0x380EE94
	0x0380EE6C LDR W8, [X0 + 0x8]
	0x0380EE70 ADD W1, W20, 0x1
	0x0380EE74 BFM X1, X8, 0x20, 0x1F
	0x0380EE78 B 0x380EE84
	0x0380EE7C MOV X19, X31
	0x0380EE80 MOV X1, X31
	0x0380EE84 MOV X0, X19
	0x0380EE88 LDP X20, X19, [X31 + 0x10]
	0x0380EE8C LDR X30, [X31], #0x20
	0x0380EE90 RET
	0x0380EE94 BL 0x1C16F20
	0x0380EE98 STR X30, [X31 - 0x20]!
	0x0380EE9C STP X20, X19, [X31 + 0x10]
	0x0380EEA0 MOV X20, X0
	0x0380EEA4 BL 0x380EC88
	0x0380EEA8 LDR X19, [X20]
	0x0380EEAC CBZ X19, 0x380EF1C
	0x0380EEB0 LDR W9, [X20 + 0x8]
	0x0380EEB4 LDR W8, [X19 + 0x50]
	0x0380EEB8 SUB W9, W9, 0x1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X20, 0xBD4000
	009 Move X23, 0x912000
	010 Move W8, [X20+1169]
	011 Move X23, [X23+96]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x912000
	018 Move X0, [X0+72]
	019 Call 0x1C17CF4
	020 Move X0, 0x912000
	021 Move X0, [X0+80]
	022 Call 0x1C17CF4
	023 Move X0, 0x912000
	024 Move X0, [X0+88]
	025 Call 0x1C17CF4
	026 Move X0, 0x912000
	027 Move X0, [X0+96]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1169], W8
	031 Move X20, 0x912000
	032 Move X22, 0x912000
	033 Move X21, 0x912000
	034 Move X20, [X20+80]
	035 Move X22, [X22+88]
	036 Move X21, [X21+72]
	037 Move X0, X19
	038 Move [X31+24], X31
	039 Move [X31+32], X31
	040 Move [X31+40], X31
	041 Call InputStateHistory.get_controls, X0
	042 Move X9, [X23]
	043 Move [X31+8], X0
	044 Move [X31+16], X1
	045 Add X8, X31, 24
	046 Add X0, X31, 8
	047 Move X1, X9
	048 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	049 Move X1, [X20]
	050 Add X0, X31, 24
	051 Call Enumerator<Object>.MoveNext, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {66}
	056 Move X1, [X22]
	057 Add X0, X31, 24
	058 Call Enumerator<Object>.get_Current, X0
	059 Move TEMP, 0
	060 Not TEMP
	061 Move X2, TEMP
	062 Move X1, X19
	063 Move W3, W31
	064 Move X4, X31
	065 Call InputState.AddChangeMonitor, X0, X1, X2, X3
	066 Move X1, [X21]
	067 Add X0, X31, 24
	068 Call Enumerator<Object>.Dispose, X0
	069 Move X20, [X31+80]
	070 Move X19, [X31+88]
	071 Move X22, [X31+64]
	072 Move X21, [X31+72]
	073 Move X30, [X31+48]
	074 Move X23, [X31+56]
	075 Add X31, X31, 96
	076 Return 
	077 Move X20, X0
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, X20
	080 Call 0x3EB2AD0
	081 Move X19, [X0]
	082 Call 0x3EB2AE0
	083 Move X1, [X21]
	084 Add X0, X31, 24
	085 Call Enumerator<Object>.Dispose, X0
	086 Compare X19, 0
	087 JumpIfEqual {69}
	088 Move X0, X19
	089 Call 0x1C17F18
	090 Move X19, X31
	091 Move X20, X0
	092 Move X1, [X21]
	093 Add X0, X31, 24
	094 Call Enumerator<Object>.Dispose, X0
	095 Compare X19, 0
	096 JumpIfNotEqual {99}
	097 Move X0, X20
	098 Call 0x1D2D690
	099 Move X0, X19
	100 Call 0x1C17F18
	101 Call 0x1991590

Method: System.Void StopRecording()

Disassembly:
	0x0380EEBC SUBS W9, W9, W8
	0x0380EEC0 B.GE 0x380EECC
	0x0380EEC4 LDR W10, [X19 + 0x48]
	0x0380EEC8 ADD W9, W9, W10
	0x0380EECC SUBS W9, W9, 0x1
	0x0380EED0 B.MI 0x380EF04
	0x0380EED4 LDR W10, [X19 + 0x48]
	0x0380EED8 ADD W8, W9, W8
	0x0380EEDC MOV X0, X19
	0x0380EEE0 SDIV W9, W8, W10
	0x0380EEE4 MSUB W20, W9, W10, W8
	0x0380EEE8 MOV W1, W20
	0x0380EEEC BL 0x380D1A4
	0x0380EEF0 CBZ X0, 0x380EF1C
	0x0380EEF4 LDR W8, [X0 + 0x8]
	0x0380EEF8 ADD W1, W20, 0x1
	0x0380EEFC BFM X1, X8, 0x20, 0x1F
	0x0380EF00 B 0x380EF0C
	0x0380EF04 MOV X19, X31
	0x0380EF08 MOV X1, X31
	0x0380EF0C MOV X0, X19
	0x0380EF10 LDP X20, X19, [X31 + 0x10]
	0x0380EF14 LDR X30, [X31], #0x20
	0x0380EF18 RET
	0x0380EF1C BL 0x1C16F20
	0x0380EF20 STR X30, [X31 - 0x20]!
	0x0380EF24 STP X20, X19, [X31 + 0x10]
	0x0380EF28 MOV X20, X0
	0x0380EF2C BL 0x380EC88
	0x0380EF30 LDR X19, [X20]
	0x0380EF34 MOV X0, X20
	0x0380EF38 BL 0x380EBC4
	0x0380EF3C CBZ X19, 0x380EF54
	0x0380EF40 MOV X1, X0
	0x0380EF44 MOV X0, X19
	0x0380EF48 LDP X20, X19, [X31 + 0x10]
	0x0380EF4C LDR X30, [X31], #0x20
	0x0380EF50 B 0x380E924
	0x0380EF54 BL 0x1C16F20
	0x0380EF58 STP X30, X19, [X31 - 0x10]!
	0x0380EF5C MOV X19, X0
	0x0380EF60 BL 0x380EC88
	0x0380EF64 MOV X0, X19
	0x0380EF68 LDP X30, X19, [X31], #0x10
	0x0380EF6C B 0x380EF70
	0x0380EF70 STR X30, [X31 - 0x20]!
	0x0380EF74 STP X20, X19, [X31 + 0x10]
	0x0380EF78 ADRP X20, 0xBD3000
	0x0380EF7C LDRB W8, [X20 + 0x49F]
	0x0380EF80 MOV X19, X0
	0x0380EF84 TBNZ X8, 0x0, 0x380EF9C
	0x0380EF88 ADRP X0, 0x90D000
	0x0380EF8C LDR X0, [X0 + 0xD40]
	0x0380EF90 BL 0x1C16CF4
	0x0380EF94 MOVZ W8, 0x1
	0x0380EF98 STRB W8, [X20 + 0x49F]
	0x0380EF9C LDR X0, [X19]
	0x0380EFA0 CBZ X0, 0x380EFEC
	0x0380EFA4 BL 0x380D014
	0x0380EFA8 UBFM X8, X1, 0x20, 0x3F
	0x0380EFAC CMP X8, 0x1
	0x0380EFB0 B.NE 0x380EFC4
	0x0380EFB4 LDR X8, [X19]
	0x0380EFB8 CBZ X8, 0x380EFEC
	0x0380EFBC LDRB W8, [X8 + 0x60]
	0x0380EFC0 CBZ W8, 0x380EFDC
	0x0380EFC4 MOV X0, X19
	0x0380EFC8 BL 0x380EBC4
	0x0380EFCC ADD X0, X0, 0x10
	0x0380EFD0 LDP X20, X19, [X31 + 0x10]
	0x0380EFD4 LDR X30, [X31], #0x20
	0x0380EFD8 RET
	0x0380EFDC MOV X0, X19
	0x0380EFE0 BL 0x380EBC4
	0x0380EFE4 ADD X0, X0, 0xC
	0x0380EFE8 B 0x380EFD0
	0x0380EFEC BL 0x1C16F20
	0x0380EFF0 STP X30, X19, [X31 - 0x10]!
	0x0380EFF4 MOV X19, X0
	0x0380EFF8 BL 0x380EC88
	0x0380EFFC MOV X0, X19
	0x0380F000 LDP X30, X19, [X31], #0x10
	0x0380F004 B 0x380F008
	0x0380F008 STP X30, X19, [X31 - 0x10]!
	0x0380F00C LDR X8, [X0]
	0x0380F010 CBZ X8, 0x380F088

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X20, 0xBD4000
	009 Move X23, 0x912000
	010 Move W8, [X20+1170]
	011 Move X23, [X23+96]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x912000
	018 Move X0, [X0+72]
	019 Call 0x1C17CF4
	020 Move X0, 0x912000
	021 Move X0, [X0+80]
	022 Call 0x1C17CF4
	023 Move X0, 0x912000
	024 Move X0, [X0+88]
	025 Call 0x1C17CF4
	026 Move X0, 0x912000
	027 Move X0, [X0+96]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1170], W8
	031 Move X20, 0x912000
	032 Move X22, 0x912000
	033 Move X21, 0x912000
	034 Move X20, [X20+80]
	035 Move X22, [X22+88]
	036 Move X21, [X21+72]
	037 Move X0, X19
	038 Move [X31+24], X31
	039 Move [X31+32], X31
	040 Move [X31+40], X31
	041 Call InputStateHistory.get_controls, X0
	042 Move X9, [X23]
	043 Move [X31+8], X0
	044 Move [X31+16], X1
	045 Add X8, X31, 24
	046 Add X0, X31, 8
	047 Move X1, X9
	048 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	049 Move X1, [X20]
	050 Add X0, X31, 24
	051 Call Enumerator<Object>.MoveNext, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {65}
	056 Move X1, [X22]
	057 Add X0, X31, 24
	058 Call Enumerator<Object>.get_Current, X0
	059 Move TEMP, 0
	060 Not TEMP
	061 Move X2, TEMP
	062 Move X1, X19
	063 Move X3, X31
	064 Call InputState.RemoveChangeMonitor, X0, X1, X2
	065 Move X1, [X21]
	066 Add X0, X31, 24
	067 Call Enumerator<Object>.Dispose, X0
	068 Move X20, [X31+80]
	069 Move X19, [X31+88]
	070 Move X22, [X31+64]
	071 Move X21, [X31+72]
	072 Move X30, [X31+48]
	073 Move X23, [X31+56]
	074 Add X31, X31, 96
	075 Return 
	076 Move X20, X0
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, X20
	079 Call 0x3EB2AD0
	080 Move X19, [X0]
	081 Call 0x3EB2AE0
	082 Move X1, [X21]
	083 Add X0, X31, 24
	084 Call Enumerator<Object>.Dispose, X0
	085 Compare X19, 0
	086 JumpIfEqual {68}
	087 Move X0, X19
	088 Call 0x1C17F18
	089 Move X19, X31
	090 Move X20, X0
	091 Move X1, [X21]
	092 Add X0, X31, 24
	093 Call Enumerator<Object>.Dispose, X0
	094 Compare X19, 0
	095 JumpIfNotEqual {98}
	096 Move X0, X20
	097 Call 0x1D2D690
	098 Move X0, X19
	099 Call 0x1C17F18
	100 Call 0x1991590

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/Record RecordStateChange(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x0380F014 LDR W8, [X8 + 0x4C]
	0x0380F018 CBZ W8, 0x380F08C
	0x0380F01C MOV X19, X0
	0x0380F020 BL 0x380EBC4
	0x0380F024 LDR X10, [X19]
	0x0380F028 CBZ X10, 0x380F088
	0x0380F02C LDR W11, [X10 + 0x28]
	0x0380F030 LDR W9, [X10 + 0x40]
	0x0380F034 LDRSW X8, [X10 + 0x4C]
	0x0380F038 CMP W11, 0x1
	0x0380F03C MOVZ W11, 0x10
	0x0380F040 B.NE 0x380F054
	0x0380F044 LDRB W10, [X10 + 0x60]
	0x0380F048 CMP W10, 0x0
	0x0380F04C MOVZ W10, 0xC
	0x0380F050 CSEL W11, W10, W11, EQ
	0x0380F054 ADD W9, W8, W9
	0x0380F058 ADD W9, W9, W11
	0x0380F05C ADD W10, W9, 0x3
	0x0380F060 CMP W9, 0x0
	0x0380F064 CSEL W10, W10, W9, LT
	0x0380F068 AND W10, W10, 0xFFFFFFFC
	0x0380F06C CMP W9, W10
	0x0380F070 ADD W10, W10, 0x4
	0x0380F074 CSEL W9, W9, W10, EQ
	0x0380F078 SUB X8, X0, X8
	0x0380F07C ADD X0, X8, W9, SXTW
	0x0380F080 LDP X30, X19, [X31], #0x10
	0x0380F084 RET
	0x0380F088 BL 0x1C16F20
	0x0380F08C ADRP X0, 0x8E4000
	0x0380F090 LDR X0, [X0 + 0x5B0]
	0x0380F094 BL 0x1C16D08
	0x0380F098 BL 0x1C16F10
	0x0380F09C MOV X19, X0
	0x0380F0A0 ADRP X0, 0x90E000
	0x0380F0A4 LDR X0, [X0 + 0xA0]
	0x0380F0A8 BL 0x1C16D08
	0x0380F0AC MOV X1, X0
	0x0380F0B0 MOV X0, X19
	0x0380F0B4 MOV X2, X31
	0x0380F0B8 BL 0x337DF1C
	0x0380F0BC ADRP X0, 0x93B000
	0x0380F0C0 LDR X0, [X0 + 0x668]
	0x0380F0C4 BL 0x1C16D08
	0x0380F0C8 MOV X1, X0
	0x0380F0CC MOV X0, X19
	0x0380F0D0 BL 0x1C16DEC
	0x0380F0D4 LDR X8, [X0]
	0x0380F0D8 CMP X8, X1
	0x0380F0DC B.NE 0x380F100
	0x0380F0E0 LDR W8, [X0 + 0x8]
	0x0380F0E4 CMP W8, W2
	0x0380F0E8 B.NE 0x380F100
	0x0380F0EC LDR W8, [X0 + 0xC]
	0x0380F0F0 UBFM X9, X2, 0x20, 0x3F
	0x0380F0F4 CMP W8, W9
	0x0380F0F8 CSET W0, EQ
	0x0380F0FC RET
	0x0380F100 MOV W0, W31
	0x0380F104 RET
	0x0380F108 STP X30, X21, [X31 - 0x20]!
	0x0380F10C STP X20, X19, [X31 + 0x10]
	0x0380F110 ADRP X21, 0xBD2000
	0x0380F114 LDRB W8, [X21 + 0x4A1]
	0x0380F118 MOV X20, X1
	0x0380F11C MOV X19, X0
	0x0380F120 TBNZ X8, 0x0, 0x380F138
	0x0380F124 ADRP X0, 0x90F000
	0x0380F128 LDR X0, [X0 + 0x8B0]
	0x0380F12C BL 0x1C16CF4
	0x0380F130 MOVZ W8, 0x1
	0x0380F134 STRB W8, [X21 + 0x4A1]
	0x0380F138 CBZ X20, 0x380F190
	0x0380F13C ADRP X8, 0x90F000
	0x0380F140 LDR X8, [X8 + 0x8B0]
	0x0380F144 LDR X9, [X20]
	0x0380F148 LDR X8, [X8]
	0x0380F14C CMP X9, X8
	0x0380F150 B.NE 0x380F190
	0x0380F154 MOV X0, X20
	0x0380F158 BL 0x1C16E08
	0x0380F15C LDR X8, [X0]
	0x0380F160 LDR X9, [X19]
	0x0380F164 CMP X9, X8
	0x0380F168 B.NE 0x380F190
	0x0380F16C LDR X8, [X0 + 0x8]
	0x0380F170 LDR W9, [X19 + 0x8]
	0x0380F174 CMP W9, W8
	0x0380F178 B.NE 0x380F190
	0x0380F17C LDR W9, [X19 + 0xC]
	0x0380F180 UBFM X8, X8, 0x20, 0x3F
	0x0380F184 CMP W9, W8
	0x0380F188 CSET W0, EQ
	0x0380F18C B 0x380F194
	0x0380F190 MOV W0, W31
	0x0380F194 LDP X20, X19, [X31 + 0x10]
	0x0380F198 LDP X30, X21, [X31], #0x20
	0x0380F19C RET
	0x0380F1A0 STP X30, X19, [X31 - 0x10]!
	0x0380F1A4 MOV X19, X0
	0x0380F1A8 LDR X0, [X0]
	0x0380F1AC CBZ X0, 0x380F1C8
	0x0380F1B0 LDR X8, [X0]
	0x0380F1B4 LDP X9, X1, [X8 + 0x158]
	0x0380F1B8 BLR X9
	0x0380F1BC MOVZ W8, 0x18D
	0x0380F1C0 MUL W8, W0, W8
	0x0380F1C4 B 0x380F1CC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X2
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xBD3000
	009 Move X22, 0x93C000
	010 Move W8, [X21+1171]
	011 Move X22, [X22+104]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x93C000
	019 Move X0, [X0+104]
	020 Call 0x1C17CF4
	021 Move X0, 0x938000
	022 Move X0, [X0+3408]
	023 Call 0x1C17CF4
	024 Move X0, 0x90D000
	025 Move X0, [X0+3352]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1171], W8
	029 Move X1, [X22]
	030 Add X0, X31, 24
	031 Call InputEventPtr.IsA, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {81}
	036 Move X8, 0x938000
	037 Move X8, [X8+3408]
	038 Add X0, X31, 24
	039 Move X1, [X8]
	040 Call InputEventPtr.IsA, X0
	041 Move X8, [X31+24]
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {94}
	046 Move X0, X8
	047 Move X1, X31
	048 Call StateEvent.From, X0
	049 Move X1, X31
	050 Call StateEvent.get_state, X0
	051 Compare X19, 0
	052 JumpIfEqual {80}
	053 Move X8, [X19+120]
	054 Compare X8, 0
	055 JumpIfEqual {80}
	056 Move X9, 0x90D000
	057 Move X9, [X9+3352]
	058 Move X21, X0
	059 Move X22, [X8+16]
	060 Move X0, [X9]
	061 Move W9, [X0+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Add X0, X31, 24
	066 Move X1, X31
	067 Subtract X21, X21, X22
	068 Call InputEventPtr.get_time, X0
	069 Move X0, X20
	070 Move X1, X19
	071 Move X2, X21
	072 Call InputStateHistory.RecordStateChange, X0, X1, X2, V0
	073 Move X20, [X31+48]
	074 Move X19, [X31+56]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X30, [X31+16]
	078 Add X31, X31, 64
	079 Return X0
	080 Call 0x1C17F20
	081 Move X0, 0x8EE000
	082 Move X0, [X0+1880]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X1, X31
	086 Move X19, X0
	087 Call NotImplementedException..ctor, X0
	088 Move X0, 0x93C000
	089 Move X0, [X0+1584]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Call 0x1C17DEC
	094 Move [X31+8], X8
	095 Move X0, 0x910000
	096 Move X0, [X0+1272]
	097 Call 0x1C17D08
	098 Add X1, X31, 8
	099 Call 0x1C17E04
	100 Move X19, X0
	101 Move X0, 0x93C000
	102 Move X0, [X0+1592]
	103 Call 0x1C17D08
	104 Move X1, X19
	105 Move X2, X31
	106 Call String.Format, X0, X1
	107 Move X19, X0
	108 Move X0, 0x8ED000
	109 Move X0, [X0+1400]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X20, X0
	113 Move X0, 0x90D000
	114 Move X0, [X0+3440]
	115 Call 0x1C17D08
	116 Move X2, X0
	117 Move X0, X20
	118 Move X1, X19
	119 Move X3, X31
	120 Call ArgumentException..ctor, X0, X1, X2
	121 Move X0, 0x93C000
	122 Move X0, [X0+1584]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X20
	126 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/Record RecordStateChange(UnityEngine.InputSystem.InputControl control, System.Void* statePtr, System.Double time)

Disassembly:
	0x0380F1C8 MOV W8, W31
	0x0380F1CC LDP W9, W10, [X19 + 0x8]
	0x0380F1D0 EOR W8, W9, W8, 0x0
	0x0380F1D4 MOVZ W9, 0x18D
	0x0380F1D8 MUL W8, W8, W9
	0x0380F1DC EOR W0, W8, W10, 0x0
	0x0380F1E0 LDP X30, X19, [X31], #0x10
	0x0380F1E4 RET
	0x0380F1E8 SUB X31, X31, 0x40
	0x0380F1EC STP X30, X23, [X31 + 0x10]
	0x0380F1F0 STP X22, X21, [X31 + 0x20]
	0x0380F1F4 STP X20, X19, [X31 + 0x30]
	0x0380F1F8 ADRP X20, 0xBD2000
	0x0380F1FC LDRB W8, [X20 + 0x4A2]
	0x0380F200 MOV X19, X0
	0x0380F204 TBNZ X8, 0x0, 0x380F234
	0x0380F208 ADRP X0, 0x8E7000
	0x0380F20C LDR X0, [X0 + 0x978]
	0x0380F210 BL 0x1C16CF4
	0x0380F214 ADRP X0, 0x90E000
	0x0380F218 LDR X0, [X0 + 0xC8]
	0x0380F21C BL 0x1C16CF4
	0x0380F220 ADRP X0, 0x90B000
	0x0380F224 LDR X0, [X0 + 0x500]
	0x0380F228 BL 0x1C16CF4
	0x0380F22C MOVZ W8, 0x1
	0x0380F230 STRB W8, [X20 + 0x4A2]
	0x0380F234 MOV X0, X19
	0x0380F238 BL 0x380EBFC
	0x0380F23C TBZ X0, 0x0, 0x380F2A0
	0x0380F240 ADRP X22, 0x8E7000
	0x0380F244 ADRP X23, 0x90E000
	0x0380F248 LDR X22, [X22 + 0x978]
	0x0380F24C LDR X23, [X23 + 0xC8]
	0x0380F250 MOV X0, X19
	0x0380F254 BL 0x380ED58
	0x0380F258 MOV X20, X0
	0x0380F25C MOV X0, X19
	0x0380F260 BL 0x380EF20
	0x0380F264 MOV X21, X0
	0x0380F268 MOV X0, X19
	0x0380F26C BL 0x380ED30
	0x0380F270 LDR X0, [X22]
	0x0380F274 ADD X1, X31, 0x8
	0x0380F278 STR D0, [X31 + 0x8]
	0x0380F27C BL 0x1C16E04
	0x0380F280 LDR X8, [X23]
	0x0380F284 MOV X3, X0
	0x0380F288 MOV X1, X20
	0x0380F28C MOV X2, X21
	0x0380F290 MOV X0, X8
	0x0380F294 MOV X4, X31
	0x0380F298 BL 0x3227C18
	0x0380F29C B 0x380F2AC
	0x0380F2A0 ADRP X8, 0x90B000
	0x0380F2A4 LDR X8, [X8 + 0x500]
	0x0380F2A8 LDR X0, [X8]
	0x0380F2AC LDP X20, X19, [X31 + 0x30]
	0x0380F2B0 LDP X22, X21, [X31 + 0x20]
	0x0380F2B4 LDP X30, X23, [X31 + 0x10]
	0x0380F2B8 ADD X31, X31, 0x40
	0x0380F2BC RET
	0x0380F2C0 STR X30, [X31 - 0x20]!
	0x0380F2C4 STP X20, X19, [X31 + 0x10]
	0x0380F2C8 ADRP X20, 0xBD2000
	0x0380F2CC LDRB W8, [X20 + 0x4A3]
	0x0380F2D0 MOV X19, X0
	0x0380F2D4 TBNZ X8, 0x0, 0x380F2EC
	0x0380F2D8 ADRP X0, 0x90C000
	0x0380F2DC LDR X0, [X0 + 0x270]
	0x0380F2E0 BL 0x1C16CF4
	0x0380F2E4 MOVZ W8, 0x1
	0x0380F2E8 STRB W8, [X20 + 0x4A3]
	0x0380F2EC LDR V0, [X19 + 0x10]
	0x0380F2F0 FCMP S0, 0x0
	0x0380F2F4 B.NE 0x380F320
	0x0380F2F8 ADRP X8, 0x90C000
	0x0380F2FC LDR X8, [X8 + 0x270]
	0x0380F300 LDR X0, [X8]
	0x0380F304 LDR W8, [X0 + 0xE0]
	0x0380F308 CBNZ W8, 0x380F310
	0x0380F30C BL 0x1C16DFC
	0x0380F310 MOV X0, X31
	0x0380F314 BL 0x37701B0
	0x0380F318 CBZ X0, 0x380F32C
	0x0380F31C LDR V0, [X0 + 0x38]
	0x0380F320 LDP X20, X19, [X31 + 0x10]
	0x0380F324 LDR X30, [X31], #0x20
	0x0380F328 RET
	0x0380F32C BL 0x1C16F20
	0x0380F330 STR X30, [X31 - 0x20]!
	0x0380F334 STP X20, X19, [X31 + 0x10]
	0x0380F338 ADRP X20, 0xBD2000
	0x0380F33C LDRB W8, [X20 + 0x4A4]
	0x0380F340 MOV X19, X0
	0x0380F344 TBNZ X8, 0x0, 0x380F35C
	0x0380F348 ADRP X0, 0x90C000
	0x0380F34C LDR X0, [X0 + 0x270]
	0x0380F350 BL 0x1C16CF4
	0x0380F354 MOVZ W8, 0x1
	0x0380F358 STRB W8, [X20 + 0x4A4]
	0x0380F35C LDR V0, [X19 + 0x14]
	0x0380F360 FCMP S0, 0x0
	0x0380F364 B.NE 0x380F390
	0x0380F368 ADRP X8, 0x90C000
	0x0380F36C LDR X8, [X8 + 0x270]
	0x0380F370 LDR X0, [X8]
	0x0380F374 LDR W8, [X0 + 0xE0]
	0x0380F378 CBNZ W8, 0x380F380
	0x0380F37C BL 0x1C16DFC
	0x0380F380 MOV X0, X31
	0x0380F384 BL 0x37701B0
	0x0380F388 CBZ X0, 0x380F39C
	0x0380F38C LDR V0, [X0 + 0x3C]
	0x0380F390 LDP X20, X19, [X31 + 0x10]
	0x0380F394 LDR X30, [X31], #0x20
	0x0380F398 RET
	0x0380F39C BL 0x1C16F20
	0x0380F3A0 STP D9, D8, [X31 - 0x20]!
	0x0380F3A4 STP X30, X19, [X31 + 0x10]
	0x0380F3A8 MOV V9.16B, V0.16B
	0x0380F3AC MOV X19, X0
	0x0380F3B0 BL 0x380F2C0
	0x0380F3B4 MOV X0, X19
	0x0380F3B8 MOV V8.16B, V0.16B
	0x0380F3BC BL 0x380F330
	0x0380F3C0 FABS S2, S9
	0x0380F3C4 MOV V1.16B, V0.16B
	0x0380F3C8 FCMP S2, S8
	0x0380F3CC FMOV S0, W31
	0x0380F3D0 B.MI 0x380F3FC
	0x0380F3D4 FCMP S9, 0x0
	0x0380F3D8 FMOV S0, -1
	0x0380F3DC FMOV S3, 1
	0x0380F3E0 FCSEL S0, S3, S0, GE
	0x0380F3E4 FCMP S2, S1
	0x0380F3E8 B.GT 0x380F3FC
	0x0380F3EC FSUB S2, S2, S8
	0x0380F3F0 FSUB S1, S1, S8
	0x0380F3F4 FDIV S1, S2, S1
	0x0380F3F8 FMUL S0, S0, S1
	0x0380F3FC LDP X30, X19, [X31 + 0x10]
	0x0380F400 LDP D9, D8, [X31], #0x20
	0x0380F404 RET
	0x0380F408 STR X30, [X31 - 0x30]!
	0x0380F40C STP X22, X21, [X31 + 0x10]
	0x0380F410 STP X20, X19, [X31 + 0x20]
	0x0380F414 ADRP X20, 0xBD2000
	0x0380F418 ADRP X22, 0x8E4000
	0x0380F41C ADRP X21, 0x93B000
	0x0380F420 LDRB W8, [X20 + 0x4A5]
	0x0380F424 LDR X22, [X22 + 0xA90]
	0x0380F428 LDR X21, [X21 + 0x670]
	0x0380F42C MOV X19, X0
	0x0380F430 TBNZ X8, 0x0, 0x380F454
	0x0380F434 ADRP X0, 0x8E4000
	0x0380F438 LDR X0, [X0 + 0xA90]
	0x0380F43C BL 0x1C16CF4
	0x0380F440 ADRP X0, 0x93B000
	0x0380F444 LDR X0, [X0 + 0x670]
	0x0380F448 BL 0x1C16CF4
	0x0380F44C MOVZ W8, 0x1
	0x0380F450 STRB W8, [X20 + 0x4A5]
	0x0380F454 MOV X0, X19
	0x0380F458 BL 0x380F2C0
	0x0380F45C LDR X0, [X22]
	0x0380F460 ADD X1, X31, 0xC
	0x0380F464 STR S0, [X31 + 0xC]
	0x0380F468 BL 0x1C16E04
	0x0380F46C MOV X20, X0
	0x0380F470 MOV X0, X19
	0x0380F474 BL 0x380F330
	0x0380F478 LDR X0, [X22]
	0x0380F47C ADD X1, X31, 0x8

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D8
	003 Move [X31+32], X30
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X22, 0xBD3000
	012 Move X24, 0x910000
	013 Move W8, [X22+1172]
	014 Move X24, [X24+4056]
	015 Move V8, V0
	016 Move X21, X2
	017 Move X20, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0x93B000
	024 Move X0, [X0+3072]
	025 Call 0x1C17CF4
	026 Move X0, 0x910000
	027 Move X0, [X0+4056]
	028 Call 0x1C17CF4
	029 Move X0, 0x90D000
	030 Move X0, [X0+3352]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+1172], W8
	034 Move [X31+28], W31
	035 Move [X31], X31
	036 Move [X31+8], X31
	037 Move X22, X19
	038 Add X22, X22, 40
	039 Move W2, [X22]
	040 Move X25, 0x90D000
	041 Move X1, X20
	042 Move X23, X22
	043 Add X23, X23, -8
	044 Move X0, [X23]
	045 Move X3, [X24]
	046 Move X25, [X25+3352]
	047 Call 0x217AB8C, X0, X1, X2
	048 Move W24, W0
	049 Add W31, W0, 1
	050 Move W8, [X19+96]
	051 Compare W8, 0
	052 JumpIfEqual {145}
	053 Compare X20, 0
	054 JumpIfEqual {144}
	055 Move V0, [X20+1]
	056 Move X0, [X25]
	057 Move [X31], V0
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Add X0, X31, 0
	063 Move X1, X31
	064 Call InputStateBlock.get_alignedSizeInBytes, X0
	065 NotImplemented "Instruction LDRSW not yet implemented."
	066 Move W9, W0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X8, 0x93B000
	069 Move X8, [X8+3072]
	070 Move W3, 10
	071 Move X0, X23
	072 Move X1, X22
	073 Move X4, [X8]
	074 Move X2, X20
	075 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	076 Move W24, W0
	077 Add X1, X31, 28
	078 Move X0, X19
	079 Call InputStateHistory.AllocateRecord, X0, X1
	080 Compare X0, 0
	081 JumpIfEqual {144}
	082 Move [X0], D8
	083 Move W8, [X19+84]
	084 Move X22, X0
	085 Add W8, W8, 1
	086 Move [X19+84], W8
	087 Move [X0+8], W8
	088 Move W8, [X19+40]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W8, [X19+96]
	091 Compare W8, 0
	092 JumpIfEqual {141}
	093 Add X23, X22, 16
	094 Move [X22+12], W24
	095 Compare X20, 0
	096 JumpIfEqual {144}
	097 Move V0, [X20+1]
	098 Move X0, [X25]
	099 Move [X31], V0
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Add X0, X31, 0
	105 Move X1, X31
	106 Call InputStateBlock.get_alignedSizeInBytes, X0
	107 Move V0, [X20+1]
	108 Move W2, W0
	109 Move X0, X23
	110 Move X3, X31
	111 Move X8, D0
	112 Add X1, X21, X8
	113 Move [X31], V0
	114 Call UnsafeUtility.MemCpy, X0, X1, X2
	115 Move W9, [X31+28]
	116 Move W10, [X22+8]
	117 Move X8, [X19+16]
	118 Add W20, W9, 1
	119 NotImplemented "Instruction BFM not yet implemented."
	120 Compare X8, 0
	121 JumpIfEqual {128}
	122 Move X9, [X8+24]
	123 Move X0, [X8+64]
	124 Move X3, [X8+40]
	125 Move X1, X19
	126 Move X2, X20
	127 NotImplemented "Instruction BLR not yet implemented."
	128 Move X0, X19
	129 Move X1, X20
	130 Move X20, [X31+80]
	131 Move X19, [X31+88]
	132 Move X22, [X31+64]
	133 Move X21, [X31+72]
	134 Move X24, [X31+48]
	135 Move X23, [X31+56]
	136 Move X30, [X31+32]
	137 Move X25, [X31+40]
	138 Move V8, [X31+16]
	139 Add X31, X31, 96
	140 Return X0
	141 Add X23, X22, 12
	142 Compare X20, 0
	143 JumpIfNotEqual {97}
	144 Call 0x1C17F20
	145 Move X0, 0x93C000
	146 Move X0, [X0+1600]
	147 Call 0x1C17D08
	148 Move X1, X20
	149 Move X2, X31
	150 Call String.Format, X0, X1
	151 Move X19, X0
	152 Move X0, 0x8ED000
	153 Move X0, [X0+1400]
	154 Call 0x1C17D08
	155 Call 0x1C17F10
	156 Move X20, X0
	157 Move X0, 0x90D000
	158 Move X0, [X0+3424]
	159 Call 0x1C17D08
	160 Move X2, X0
	161 Move X0, X20
	162 Move X1, X19
	163 Move X3, X31
	164 Call ArgumentException..ctor, X0, X1, X2
	165 Move [X31+24], W8
	166 Move X0, 0x8E5000
	167 Move X0, [X0+1880]
	168 Call 0x1C17D08
	169 Add X1, X31, 24
	170 Call 0x1C17E04
	171 Move X19, X0
	172 Move X0, 0x93C000
	173 Move X0, [X0+1608]
	174 Call 0x1C17D08
	175 Move X1, X20
	176 Move X2, X19
	177 Move X3, X31
	178 Call String.Format, X0, X1, X2
	179 Move X19, X0
	180 Move X0, 0x8E5000
	181 Move X0, [X0+1456]
	182 Call 0x1C17D08
	183 Call 0x1C17F10
	184 Move X1, X19
	185 Move X2, X31
	186 Move X20, X0
	187 Call InvalidOperationException..ctor, X0, X1
	188 Move X0, 0x93C000
	189 Move X0, [X0+1616]
	190 Call 0x1C17D08
	191 Move X1, X0
	192 Move X0, X20
	193 Call 0x1C17DEC

Method: System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/Record> GetEnumerator()

Disassembly:
	0x0380F490 MOV X1, X20
	0x0380F494 MOV X3, X31
	0x0380F498 MOV X0, X8
	0x0380F49C BL 0x3227BD4
	0x0380F4A0 LDP X20, X19, [X31 + 0x20]
	0x0380F4A4 LDP X22, X21, [X31 + 0x10]
	0x0380F4A8 LDR X30, [X31], #0x30
	0x0380F4AC RET
	0x0380F4B0 STP X30, X21, [X31 - 0x20]!
	0x0380F4B4 STP X20, X19, [X31 + 0x10]
	0x0380F4B8 ADRP X20, 0xBD2000
	0x0380F4BC ADRP X21, 0x93B000
	0x0380F4C0 LDRB W8, [X20 + 0x4A6]
	0x0380F4C4 LDR X21, [X21 + 0x678]
	0x0380F4C8 MOV X19, X0
	0x0380F4CC TBNZ X8, 0x0, 0x380F4E4
	0x0380F4D0 ADRP X0, 0x93B000
	0x0380F4D4 LDR X0, [X0 + 0x678]
	0x0380F4D8 BL 0x1C16CF4
	0x0380F4DC MOVZ W8, 0x1
	0x0380F4E0 STRB W8, [X20 + 0x4A6]
	0x0380F4E4 LDR X1, [X21]
	0x0380F4E8 MOV X0, X19
	0x0380F4EC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBD3000
	007 Move X20, 0x93C000
	008 Move W8, [X21+1173]
	009 Move X20, [X20+1624]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x93C000
	016 Move X0, [X0+1624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1173], W8
	020 Move X0, [X20]
	021 NotImplemented "Instruction MOVI not yet implemented."
	022 Add X1, X31, 0
	023 Move [X31], X19
	024 Move [X31+8], D0
	025 Call 0x1C17E04
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Add X31, X31, 48
	031 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0380F500 FCSEL S1, S1, S0, MI

ISIL:
	001 Call InputStateHistory.GetEnumerator, X0
	002 Return X0

Method: System.Void Dispose()

Disassembly:
	0x0380EB74 LDR X20, [X20 + 0x8B0]
	0x0380EB78 MOV X19, X0
	0x0380EB7C TBNZ X8, 0x0, 0x380EB94
	0x0380EB80 ADRP X0, 0x910000
	0x0380EB84 LDR X0, [X0 + 0x8B0]
	0x0380EB88 BL 0x1C16CF4
	0x0380EB8C MOVZ W8, 0x1
	0x0380EB90 STRB W8, [X21 + 0x49D]
	0x0380EB94 MOV X0, X19
	0x0380EB98 BL 0x380EB3C
	0x0380EB9C LDR X8, [X20]
	0x0380EBA0 STP X0, X1, [X31]
	0x0380EBA4 ADD X1, X31, 0x0
	0x0380EBA8 MOV X0, X8
	0x0380EBAC BL 0x1C16E04
	0x0380EBB0 LDP X20, X19, [X31 + 0x20]
	0x0380EBB4 LDP X30, X21, [X31 + 0x10]
	0x0380EBB8 ADD X31, X31, 0x30
	0x0380EBBC RET
	0x0380EBC0 RET
	0x0380EBC4 STR X30, [X31 - 0x10]!
	0x0380EBC8 MOV X8, X0
	0x0380EBCC LDR X0, [X0]
	0x0380EBD0 CBZ X0, 0x380EBE4
	0x0380EBD4 LDR W8, [X8 + 0x8]
	0x0380EBD8 SUB W1, W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD4000
	006 Move X20, 0x8ED000
	007 Move W8, [X21+1174]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x8ED000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1174], W8
	019 Move X0, X19
	020 Call InputStateHistory.StopRecording, X0
	021 Move X0, X19
	022 Call InputStateHistory.Destroy, X0
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X1, X31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call GC.SuppressFinalize, X0
	035 Return 

Method: System.Void Destroy()

Disassembly:
	0x0380F504 FCMP S2, S0
	0x0380F508 FCSEL S0, S1, S2, LE
	0x0380F50C RET
	0x0380F510 STR X30, [X31 - 0x30]!
	0x0380F514 STP X22, X21, [X31 + 0x10]
	0x0380F518 STP X20, X19, [X31 + 0x20]
	0x0380F51C ADRP X20, 0xBD2000
	0x0380F520 ADRP X22, 0x8E4000
	0x0380F524 ADRP X21, 0x93B000
	0x0380F528 LDRB W8, [X20 + 0x4A7]
	0x0380F52C LDR X22, [X22 + 0xA90]
	0x0380F530 LDR X21, [X21 + 0x680]
	0x0380F534 MOV X19, X0
	0x0380F538 TBNZ X8, 0x0, 0x380F55C
	0x0380F53C ADRP X0, 0x8E4000
	0x0380F540 LDR X0, [X0 + 0xA90]
	0x0380F544 BL 0x1C16CF4
	0x0380F548 ADRP X0, 0x93B000
	0x0380F54C LDR X0, [X0 + 0x680]
	0x0380F550 BL 0x1C16CF4
	0x0380F554 MOVZ W8, 0x1
	0x0380F558 STRB W8, [X20 + 0x4A7]
	0x0380F55C LDR V0, [X19 + 0x10]
	0x0380F560 LDR X0, [X22]
	0x0380F564 ADD X1, X31, 0xC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBD3000
	005 Move W8, [X20+1175]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x90D000
	012 Move X0, [X0+3432]
	013 Call 0x1C17CF4
	014 Move X0, 0x93B000
	015 Move X0, [X0+1696]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1175], W8
	019 Add X19, X19, 48
	020 Move X8, [X19]
	021 Compare X8, 0
	022 JumpIfEqual {30}
	023 Move X8, 0x90D000
	024 Move X8, [X8+3432]
	025 Move X0, X19
	026 Move X1, [X8]
	027 Call NativeArray`1<Byte>.Dispose, X0
	028 Move [X19], X31
	029 Move [X19+8], X31
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 

Method: System.Void Allocate()

Disassembly:
	0x0380F568 STR S0, [X31 + 0xC]
	0x0380F56C BL 0x1C16E04
	0x0380F570 MOV X20, X0
	0x0380F574 LDR V0, [X19 + 0x14]
	0x0380F578 LDR X0, [X22]
	0x0380F57C ADD X1, X31, 0x8
	0x0380F580 STR S0, [X31 + 0x8]
	0x0380F584 BL 0x1C16E04
	0x0380F588 LDR X8, [X21]
	0x0380F58C MOV X2, X0
	0x0380F590 MOV X1, X20
	0x0380F594 MOV X3, X31
	0x0380F598 MOV X0, X8
	0x0380F59C BL 0x3227BD4
	0x0380F5A0 LDP X20, X19, [X31 + 0x20]
	0x0380F5A4 LDP X22, X21, [X31 + 0x10]
	0x0380F5A8 LDR X30, [X31], #0x30
	0x0380F5AC RET
	0x0380F5B0 STP X30, X21, [X31 - 0x20]!
	0x0380F5B4 STP X20, X19, [X31 + 0x10]
	0x0380F5B8 ADRP X20, 0xBD2000
	0x0380F5BC ADRP X21, 0x93B000
	0x0380F5C0 LDRB W8, [X20 + 0x4A8]
	0x0380F5C4 LDR X21, [X21 + 0x678]
	0x0380F5C8 MOV X19, X0
	0x0380F5CC TBNZ X8, 0x0, 0x380F5E4
	0x0380F5D0 ADRP X0, 0x93B000
	0x0380F5D4 LDR X0, [X0 + 0x678]
	0x0380F5D8 BL 0x1C16CF4
	0x0380F5DC MOVZ W8, 0x1
	0x0380F5E0 STRB W8, [X20 + 0x4A8]
	0x0380F5E4 LDR X1, [X21]
	0x0380F5E8 MOV X0, X19
	0x0380F5EC LDP X20, X19, [X31 + 0x10]
	0x0380F5F0 LDP X30, X21, [X31], #0x20
	0x0380F5F4 B 0x2E10570
	0x0380F5F8 STR D14, [X31 - 0x50]!
	0x0380F5FC STP D13, D12, [X31 + 0x8]
	0x0380F600 STP D11, D10, [X31 + 0x18]
	0x0380F604 STP D9, D8, [X31 + 0x28]
	0x0380F608 STR X30, [X31 + 0x38]
	0x0380F60C STP X20, X19, [X31 + 0x40]
	0x0380F610 ADRP X19, 0xBD2000
	0x0380F614 ADRP X20, 0x90C000
	0x0380F618 LDRB W8, [X19 + 0x4A9]
	0x0380F61C LDR X20, [X20 + 0x270]
	0x0380F620 MOV V8.16B, V2.16B
	0x0380F624 MOV V9.16B, V1.16B
	0x0380F628 MOV V10.16B, V0.16B
	0x0380F62C TBNZ X8, 0x0, 0x380F65C
	0x0380F630 ADRP X0, 0x90C000
	0x0380F634 LDR X0, [X0 + 0xED0]
	0x0380F638 BL 0x1C16CF4
	0x0380F63C ADRP X0, 0x90C000
	0x0380F640 LDR X0, [X0 + 0xEC8]
	0x0380F644 BL 0x1C16CF4
	0x0380F648 ADRP X0, 0x90C000
	0x0380F64C LDR X0, [X0 + 0x270]
	0x0380F650 BL 0x1C16CF4
	0x0380F654 MOVZ W8, 0x1
	0x0380F658 STRB W8, [X19 + 0x4A9]
	0x0380F65C LDR X0, [X20]
	0x0380F660 LDR W8, [X0 + 0xE0]
	0x0380F664 CBNZ W8, 0x380F66C
	0x0380F668 BL 0x1C16DFC
	0x0380F66C MOV X0, X31
	0x0380F670 BL 0x37701B0
	0x0380F674 CBZ X0, 0x380F7E4
	0x0380F678 LDRB W8, [X0 + 0x2C]
	0x0380F67C CBZ W8, 0x380F7BC
	0x0380F680 ADRP X20, 0xBC9000
	0x0380F684 ADRP X19, 0x90C000
	0x0380F688 LDRB W8, [X20 + 0x793]
	0x0380F68C LDR X19, [X19 + 0xEC8]
	0x0380F690 CBNZ W8, 0x380F6A8
	0x0380F694 ADRP X0, 0x8E5000
	0x0380F698 LDR X0, [X0 + 0x5A8]
	0x0380F69C BL 0x1C16CF4
	0x0380F6A0 MOVZ W8, 0x1
	0x0380F6A4 STRB W8, [X20 + 0x793]
	0x0380F6A8 LDR X8, [X19]
	0x0380F6AC LDR X8, [X8 + 0xB8]
	0x0380F6B0 LDR X19, [X8]
	0x0380F6B4 CBZ X19, 0x380F7E4
	0x0380F6B8 ADRP X8, 0x8E5000
	0x0380F6BC LDR X8, [X8 + 0x5A8]
	0x0380F6C0 ADRP X11, 0x90C000
	0x0380F6C4 LDR X9, [X8]
	0x0380F6C8 LDR X8, [X19]
	0x0380F6CC LDR X10, [X9 + 0xB8]
	0x0380F6D0 LDR X11, [X11 + 0xED0]
	0x0380F6D4 LDRH W9, [X8 + 0x12E]
	0x0380F6D8 LDP S11, S12, [X10]
	0x0380F6DC LDP S13, S14, [X10 + 0x8]
	0x0380F6E0 LDR X1, [X11]
	0x0380F6E4 CBZ X9, 0x380F708
	0x0380F6E8 LDR X10, [X8 + 0xB0]
	0x0380F6EC ADD X10, X10, 0x8
	0x0380F6F0 LDUR X11, [X10 - 0x8]
	0x0380F6F4 CMP X11, X1
	0x0380F6F8 B.EQ 0x380F718
	0x0380F6FC SUBS X9, X9, 0x1
	0x0380F700 ADD X10, X10, 0x10
	0x0380F704 B.NE 0x380F6F0
	0x0380F708 MOVZ W2, 0x1A
	0x0380F70C MOV X0, X19
	0x0380F710 BL 0x1C5C788
	0x0380F714 B 0x380F728
	0x0380F718 LDR W9, [X10]
	0x0380F71C ADD W9, W9, 0x1A
	0x0380F720 ADD X8, X8, W9, 0x4, SXTW
	0x0380F724 ADD X0, X8, 0x138
	0x0380F728 LDP X8, X1, [X0]
	0x0380F72C MOV X0, X19
	0x0380F730 BLR X8
	0x0380F734 CMP W0, 0x2
	0x0380F738 B.EQ 0x380F758
	0x0380F73C CMP W0, 0x4
	0x0380F740 B.EQ 0x380F764
	0x0380F744 CMP W0, 0x3
	0x0380F748 B.NE 0x380F78C
	0x0380F74C ADRP X8, 0xFFFFFFFFFD2DB000
	0x0380F750 LDR V2, [X8 + 0x180]
	0x0380F754 B 0x380F76C
	0x0380F758 ADRP X8, 0xFFFFFFFFFD2DA000
	0x0380F75C LDR V2, [X8 + 0xF4C]
	0x0380F760 B 0x380F76C
	0x0380F764 ADRP X8, 0xFFFFFFFFFD2DB000
	0x0380F768 LDR V2, [X8 + 0x208]
	0x0380F76C FMOV S0, W31
	0x0380F770 MOV V1.16B, V0.16B
	0x0380F774 MOV X0, X31
	0x0380F778 BL 0x3C2A574
	0x0380F77C MOV V11.16B, V0.16B
	0x0380F780 MOV V12.16B, V1.16B
	0x0380F784 MOV V13.16B, V2.16B
	0x0380F788 MOV V14.16B, V3.16B
	0x0380F78C MOV V0.16B, V11.16B
	0x0380F790 MOV V1.16B, V12.16B
	0x0380F794 MOV V2.16B, V13.16B
	0x0380F798 MOV V3.16B, V14.16B
	0x0380F79C MOV V4.16B, V10.16B
	0x0380F7A0 MOV V5.16B, V9.16B
	0x0380F7A4 MOV V6.16B, V8.16B
	0x0380F7A8 MOV X0, X31
	0x0380F7AC BL 0x3C2A9FC
	0x0380F7B0 MOV V10.16B, V0.16B
	0x0380F7B4 MOV V9.16B, V1.16B
	0x0380F7B8 MOV V8.16B, V2.16B
	0x0380F7BC MOV V0.16B, V10.16B
	0x0380F7C0 MOV V1.16B, V9.16B
	0x0380F7C4 MOV V2.16B, V8.16B
	0x0380F7C8 LDP X20, X19, [X31 + 0x40]
	0x0380F7CC LDR X30, [X31 + 0x38]
	0x0380F7D0 LDP D9, D8, [X31 + 0x28]
	0x0380F7D4 LDP D11, D10, [X31 + 0x18]
	0x0380F7D8 LDP D13, D12, [X31 + 0x8]
	0x0380F7DC LDR V14, [X31], #0x50
	0x0380F7E0 RET
	0x0380F7E4 BL 0x1C16F20
	0x0380F7E8 STR X30, [X31 - 0x20]!
	0x0380F7EC STP X20, X19, [X31 + 0x10]
	0x0380F7F0 ADRP X19, 0xBD2000
	0x0380F7F4 ADRP X20, 0x93B000
	0x0380F7F8 LDRB W8, [X19 + 0x4AA]
	0x0380F7FC LDR X20, [X20 + 0x688]
	0x0380F800 TBNZ X8, 0x0, 0x380F818

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], X30
	003 Move [X31+104], X25
	004 Move [X31+112], X24
	005 Move [X31+120], X23
	006 Move [X31+128], X22
	007 Move [X31+136], X21
	008 Move [X31+144], X20
	009 Move [X31+152], X19
	010 Move X20, 0xBD3000
	011 Move W8, [X20+1176]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {40}
	017 Move X0, 0x911000
	018 Move X0, [X0+72]
	019 Call 0x1C17CF4
	020 Move X0, 0x911000
	021 Move X0, [X0+80]
	022 Call 0x1C17CF4
	023 Move X0, 0x911000
	024 Move X0, [X0+88]
	025 Call 0x1C17CF4
	026 Move X0, 0x90D000
	027 Move X0, [X0+3352]
	028 Call 0x1C17CF4
	029 Move X0, 0x8E5000
	030 Move X0, [X0+1448]
	031 Call 0x1C17CF4
	032 Move X0, 0x939000
	033 Move X0, [X0+4064]
	034 Call 0x1C17CF4
	035 Move X0, 0x911000
	036 Move X0, [X0+96]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+1176], W8
	040 Move [X31+64], X31
	041 Move [X31+72], X31
	042 Move [X31+80], X31
	043 Move [X31+48], X31
	044 Move [X31+56], X31
	045 Move [X31+32], X31
	046 Move [X31+40], X31
	047 Move W8, [X19+96]
	048 Compare W8, 0
	049 JumpIfNotEqual {113}
	050 Move X0, X19
	051 Move [X19+64], W31
	052 Call InputStateHistory.get_controls, X0
	053 Move X8, 0x911000
	054 Move X8, [X8+96]
	055 Move [X31+48], X0
	056 Move [X31+56], X1
	057 Add X0, X31, 48
	058 Move X9, [X8]
	059 Add X8, X31, 8
	060 Move X1, X9
	061 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 Move X8, [X31+24]
	064 Move X22, 0x911000
	065 Move X23, 0x911000
	066 Move X24, 0x90D000
	067 Move X22, [X22+80]
	068 Move X23, [X23+88]
	069 Move X24, [X24+3352]
	070 Move [X31+4], V0
	071 Move [X31+80], X8
	072 Move X25, 0x8E5000
	073 Move X25, [X25+1448]
	074 Move X1, [X22]
	075 Add X0, X31, 64
	076 Call Enumerator<Object>.MoveNext, X0
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {108}
	081 Move X1, [X23]
	082 Add X0, X31, 64
	083 Call Enumerator<Object>.get_Current, X0
	084 Compare X0, 0
	085 JumpIfEqual {154}
	086 Move V0, [X0+1]
	087 Move X0, [X24]
	088 Move W20, [X19+64]
	089 Move [X31+2], V0
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Add X0, X31, 32
	095 Move X1, X31
	096 Call InputStateBlock.get_alignedSizeInBytes, X0
	097 Move W21, W0
	098 Move X0, [X25]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move W0, W20
	104 Move W1, W21
	105 Move X2, X31
	106 Call Math.Max, X0, X1
	107 Move [X19+64], W0
	108 Move X8, 0x911000
	109 Move X8, [X8+72]
	110 Add X0, X31, 64
	111 Move X1, [X8]
	112 Call Enumerator<Object>.Dispose, X0
	113 Move W9, [X19+40]
	114 Move X8, 0x939000
	115 Move W10, [X19+64]
	116 Move W11, [X19+76]
	117 Move X8, [X8+4064]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W9, 16
	120 Move W12, [X19+96]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move W12, 12
	123 NotImplemented "Instruction CSEL not yet implemented."
	124 Add W10, W11, W10
	125 Move X4, [X8]
	126 Add W8, W10, W9
	127 Add W9, W8, 3
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move W11, [X19+72]
	130 NotImplemented "Instruction CSEL not yet implemented."
	131 And W9, W9, 0xFFFFFFFC
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Add W9, W9, 4
	134 NotImplemented "Instruction CSEL not yet implemented."
	135 Multiply W1, W8, W11
	136 Add X0, X31, 8
	137 Move W2, 4
	138 Move W3, W31
	139 Move [X31+8], X31
	140 Move [X31+16], X31
	141 Call NativeArray`1<Byte>..ctor, X0, X1, X2, X3
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 Move X22, [X31+128]
	144 Move X21, [X31+136]
	145 Move X24, [X31+112]
	146 Move X23, [X31+120]
	147 Move X30, [X31+96]
	148 Move X25, [X31+104]
	149 Move [X19+3], V0
	150 Move X20, [X31+144]
	151 Move X19, [X31+152]
	152 Add X31, X31, 160
	153 Return 
	154 Call 0x1C17F20
	155 Move X20, X0
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X0, X20
	158 Call 0x3EB2AD0
	159 Move X21, [X0]
	160 Call 0x3EB2AE0
	161 Move X8, 0x911000
	162 Move X8, [X8+72]
	163 Add X0, X31, 64
	164 Move X1, [X8]
	165 Call Enumerator<Object>.Dispose, X0
	166 Compare X21, 0
	167 JumpIfEqual {113}
	168 Move X0, X21
	169 Call 0x1C17F18
	170 Move X21, X31
	171 Move X20, X0
	172 Move X8, 0x911000
	173 Move X8, [X8+72]
	174 Move X1, [X8]
	175 Add X0, X31, 64
	176 Call Enumerator<Object>.Dispose, X0
	177 Compare X21, 0
	178 JumpIfNotEqual {181}
	179 Move X0, X20
	180 Call 0x1D2D690
	181 Move X0, X21
	182 Call 0x1C17F18
	183 Call 0x1991590

Method: System.Int32 RecordIndexToUserIndex(System.Int32 index)

Disassembly:
	0x0380F854 LDR X0, [X0 + 0x690]
	0x0380F858 BL 0x1C16CF4
	0x0380F85C MOVZ W8, 0x1
	0x0380F860 STRB W8, [X20 + 0x4AB]
	0x0380F864 LDR X1, [X21]
	0x0380F868 MOV X0, X19
	0x0380F86C LDP X20, X19, [X31 + 0x10]
	0x0380F870 LDP X30, X21, [X31], #0x20
	0x0380F874 B 0x2E11398

ISIL:
	001 Move W8, [X0+80]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W9, [X0+72]
	004 Subtract W8, W1, W8
	005 Add W0, W8, W9
	006 Return X0
	007 Subtract W0, W1, W8
	008 Return X0

Method: System.Int32 UserIndexToRecordIndex(System.Int32 index)

Disassembly:
	0x0380E18C MOV X20, X0
	0x0380E190 ADRP X0, 0x90D000
	0x0380E194 LDR X0, [X0 + 0xD70]
	0x0380E198 BL 0x1C16D08
	0x0380E19C MOV X2, X0
	0x0380E1A0 MOV X0, X20

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+72]
	003 Add W8, W8, W1
	004 NotImplemented "Instruction SDIV not yet implemented."
	005 NotImplemented "Instruction MSUB not yet implemented."
	006 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* GetRecord(System.Int32 index)

Disassembly:
	0x0380E1A4 MOV X1, X19
	0x0380E1A8 MOV X3, X31
	0x0380E1AC BL 0x330E16C
	0x0380E1B0 ADRP X0, 0x93C000
	0x0380E1B4 LDR X0, [X0 + 0x630]
	0x0380E1B8 BL 0x1C16D08
	0x0380E1BC MOV X1, X0
	0x0380E1C0 MOV X0, X20
	0x0380E1C4 BL 0x1C16DEC
	0x0380E1C8 SUB X31, X31, 0x60
	0x0380E1CC STR D8, [X31 + 0x10]
	0x0380E1D0 STP X30, X25, [X31 + 0x20]
	0x0380E1D4 STP X24, X23, [X31 + 0x30]
	0x0380E1D8 STP X22, X21, [X31 + 0x40]
	0x0380E1DC STP X20, X19, [X31 + 0x50]
	0x0380E1E0 ADRP X22, 0xBD3000
	0x0380E1E4 ADRP X24, 0x910000
	0x0380E1E8 LDRB W8, [X22 + 0x494]
	0x0380E1EC LDR X24, [X24 + 0xFD8]
	0x0380E1F0 MOV V8.16B, V0.16B
	0x0380E1F4 MOV X21, X2
	0x0380E1F8 MOV X20, X1
	0x0380E1FC MOV X19, X0
	0x0380E200 TBNZ X8, 0x0, 0x380E230
	0x0380E204 ADRP X0, 0x93B000
	0x0380E208 LDR X0, [X0 + 0xC00]
	0x0380E20C BL 0x1C16CF4
	0x0380E210 ADRP X0, 0x910000
	0x0380E214 LDR X0, [X0 + 0xFD8]
	0x0380E218 BL 0x1C16CF4
	0x0380E21C ADRP X0, 0x90D000
	0x0380E220 LDR X0, [X0 + 0xD18]
	0x0380E224 BL 0x1C16CF4
	0x0380E228 MOVZ W8, 0x1
	0x0380E22C STRB W8, [X22 + 0x494]
	0x0380E230 STR W31, [X31 + 0x1C]
	0x0380E234 STP X31, X31, [X31]
	0x0380E238 MOV X22, X19
	0x0380E23C LDR W2, [X22 + 0x28]!
	0x0380E240 ADRP X25, 0x90D000
	0x0380E244 MOV X1, X20
	0x0380E248 MOV X23, X22
	0x0380E24C LDR X0, [X23 - 0x8]!
	0x0380E250 LDR X3, [X24]
	0x0380E254 LDR X25, [X25 + 0xD18]
	0x0380E258 BL 0x2179B8C
	0x0380E25C MOV W24, W0
	0x0380E260 ADDS W31, W0, 0x1
	0x0380E264 B.NE 0x380E2CC
	0x0380E268 LDRB W8, [X19 + 0x60]
	0x0380E26C CBZ W8, 0x380E3B8
	0x0380E270 CBZ X20, 0x380E3B4
	0x0380E274 LDR V0, [X20 + 0x1]
	0x0380E278 LDR X0, [X25]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD4000
	006 Move W8, [X21+1177]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x93C000
	014 Move X0, [X0+1696]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1177], W8
	018 Move X8, [X20+48]
	019 Compare X8, 0
	020 JumpIfEqual {47}
	021 Move TEMP, X19
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {35}
	025 Move W8, [X20+72]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X20
	028 Move W1, W19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call InputStateHistory.GetRecordUnchecked, X0, X1
	034 Return X0
	035 Move X0, 0x8EE000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0x8F1000
	041 Move X0, [X0+304]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call ArgumentOutOfRangeException..ctor, X0, X1
	047 Move X0, 0x8E6000
	048 Move X0, [X0+1456]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0x93D000
	053 Move X0, [X0+1496]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call InvalidOperationException..ctor, X0, X1
	059 Move X0, 0x93D000
	060 Move X0, [X0+1504]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* GetRecordUnchecked(System.Int32 index)

Disassembly:
	0x0380F878 STP D15, D14, [X31 - 0x60]!
	0x0380F87C STP D13, D12, [X31 + 0x10]
	0x0380F880 STP D11, D10, [X31 + 0x20]
	0x0380F884 STP D9, D8, [X31 + 0x30]
	0x0380F888 STR X30, [X31 + 0x40]
	0x0380F88C STP X20, X19, [X31 + 0x50]
	0x0380F890 ADRP X19, 0xBD2000
	0x0380F894 ADRP X20, 0x90C000
	0x0380F898 LDRB W8, [X19 + 0x4AC]
	0x0380F89C LDR X20, [X20 + 0x270]
	0x0380F8A0 MOV V8.16B, V3.16B
	0x0380F8A4 MOV V9.16B, V2.16B
	0x0380F8A8 MOV V10.16B, V1.16B
	0x0380F8AC MOV V11.16B, V0.16B
	0x0380F8B0 TBNZ X8, 0x0, 0x380F8E0
	0x0380F8B4 ADRP X0, 0x90C000
	0x0380F8B8 LDR X0, [X0 + 0xED0]
	0x0380F8BC BL 0x1C16CF4
	0x0380F8C0 ADRP X0, 0x90C000
	0x0380F8C4 LDR X0, [X0 + 0xEC8]
	0x0380F8C8 BL 0x1C16CF4
	0x0380F8CC ADRP X0, 0x90C000
	0x0380F8D0 LDR X0, [X0 + 0x270]
	0x0380F8D4 BL 0x1C16CF4
	0x0380F8D8 MOVZ W8, 0x1
	0x0380F8DC STRB W8, [X19 + 0x4AC]
	0x0380F8E0 LDR X0, [X20]
	0x0380F8E4 LDR W8, [X0 + 0xE0]
	0x0380F8E8 CBNZ W8, 0x380F8F0
	0x0380F8EC BL 0x1C16DFC
	0x0380F8F0 MOV X0, X31
	0x0380F8F4 BL 0x37701B0
	0x0380F8F8 CBZ X0, 0x380FA84
	0x0380F8FC LDRB W8, [X0 + 0x2C]
	0x0380F900 CBZ W8, 0x380F99C
	0x0380F904 ADRP X20, 0xBC9000
	0x0380F908 ADRP X19, 0x90C000
	0x0380F90C LDRB W8, [X20 + 0x793]
	0x0380F910 LDR X19, [X19 + 0xEC8]
	0x0380F914 CBNZ W8, 0x380F92C
	0x0380F918 ADRP X0, 0x8E5000
	0x0380F91C LDR X0, [X0 + 0x5A8]
	0x0380F920 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBD3000
	007 Move X21, 0x939000
	008 Move W8, [X22+1178]
	009 Move X21, [X21+4072]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x939000
	017 Move X0, [X0+4072]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1178], W8
	021 Move X0, [X20+48]
	022 Move X1, [X20+56]
	023 Move X2, [X21]
	024 Call 0x2223688, X0
	025 Move W10, [X20+40]
	026 Move W8, [X20+64]
	027 Move W9, [X20+76]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W10, 16
	030 Move W11, [X20+96]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W11, 12
	033 NotImplemented "Instruction CSEL not yet implemented."
	034 Add W8, W9, W8
	035 Add W8, W8, W10
	036 Add W9, W8, 3
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 And W9, W9, 0xFFFFFFFC
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Add W9, W9, 4
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Multiply W8, W8, W19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Add X0, X0, W8
	049 Move X30, [X31+48]
	050 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* AllocateRecord(out System.Int32 index)

Disassembly:
	0x0380EC58 LDR X8, [X19]
	0x0380EC5C CBZ X8, 0x380EC84
	0x0380EC60 LDR W9, [X19 + 0x8]
	0x0380EC64 LDR W10, [X8 + 0x50]
	0x0380EC68 SUB W9, W9, 0x1
	0x0380EC6C SUBS W0, W9, W10
	0x0380EC70 B.GE 0x380EC7C
	0x0380EC74 LDR W8, [X8 + 0x48]
	0x0380EC78 ADD W0, W0, W8
	0x0380EC7C LDP X30, X19, [X31], #0x10
	0x0380EC80 RET
	0x0380EC84 BL 0x1C16F20
	0x0380EC88 STP X30, X19, [X31 - 0x10]!
	0x0380EC8C LDR X8, [X0]
	0x0380EC90 CBZ X8, 0x380ECC4
	0x0380EC94 LDR W8, [X0 + 0x8]
	0x0380EC98 MOV X19, X0
	0x0380EC9C CBZ W8, 0x380ECC4
	0x0380ECA0 MOV X0, X19
	0x0380ECA4 BL 0x380EBC4
	0x0380ECA8 CBZ X0, 0x380ECE4
	0x0380ECAC LDR W8, [X0 + 0x8]
	0x0380ECB0 LDR W9, [X19 + 0xC]
	0x0380ECB4 CMP W8, W9
	0x0380ECB8 B.NE 0x380ECE8
	0x0380ECBC LDP X30, X19, [X31], #0x10
	0x0380ECC0 RET
	0x0380ECC4 ADRP X0, 0x8E5000
	0x0380ECC8 LDR X0, [X0 + 0x5B0]
	0x0380ECCC BL 0x1C16D08
	0x0380ECD0 BL 0x1C16F10
	0x0380ECD4 MOV X19, X0
	0x0380ECD8 ADRP X0, 0x90F000
	0x0380ECDC LDR X0, [X0 + 0xB8]
	0x0380ECE0 B 0x380ED04
	0x0380ECE4 BL 0x1C16F20
	0x0380ECE8 ADRP X0, 0x8E5000
	0x0380ECEC LDR X0, [X0 + 0x5B0]
	0x0380ECF0 BL 0x1C16D08
	0x0380ECF4 BL 0x1C16F10
	0x0380ECF8 MOV X19, X0
	0x0380ECFC ADRP X0, 0x90F000
	0x0380ED00 LDR X0, [X0 + 0xC0]
	0x0380ED04 BL 0x1C16D08
	0x0380ED08 MOV X1, X0
	0x0380ED0C MOV X0, X19
	0x0380ED10 MOV X2, X31
	0x0380ED14 BL 0x337DF1C
	0x0380ED18 ADRP X0, 0x93C000
	0x0380ED1C LDR X0, [X0 + 0x660]
	0x0380ED20 BL 0x1C16D08
	0x0380ED24 MOV X1, X0
	0x0380ED28 MOV X0, X19
	0x0380ED2C BL 0x1C16DEC
	0x0380ED30 STP X30, X19, [X31 - 0x10]!
	0x0380ED34 MOV X19, X0
	0x0380ED38 BL 0x380EC88
	0x0380ED3C MOV X0, X19
	0x0380ED40 BL 0x380EBC4
	0x0380ED44 CBZ X0, 0x380ED54
	0x0380ED48 LDR V0, [X0]
	0x0380ED4C LDP X30, X19, [X31], #0x10
	0x0380ED50 RET
	0x0380ED54 BL 0x1C16F20
	0x0380ED58 SUB X31, X31, 0x30
	0x0380ED5C STR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD4000
	006 Move W8, [X21+1179]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x93A000
	014 Move X0, [X0+4072]
	015 Call 0x1C17CF4
	016 Move X0, 0x93C000
	017 Move X0, [X0+1696]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1179], W8
	021 Move X8, [X20+48]
	022 Compare X8, 0
	023 JumpIfNotEqual {26}
	024 Move X0, X20
	025 Call InputStateHistory.Allocate, X0
	026 Move W8, [X20+80]
	027 Move W9, [X20+68]
	028 Move W10, [X20+72]
	029 Add W8, W9, W8
	030 NotImplemented "Instruction SDIV not yet implemented."
	031 NotImplemented "Instruction MSUB not yet implemented."
	032 Move [X19], W8
	033 Move W9, [X20+68]
	034 Move W8, [X20+72]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, 0x93A000
	037 Move X8, [X8+4072]
	038 Move W10, [X20+80]
	039 Add W10, W10, 1
	040 NotImplemented "Instruction SDIV not yet implemented."
	041 NotImplemented "Instruction MSUB not yet implemented."
	042 Move [X20+80], W9
	043 Add W9, W9, 1
	044 Move [X20+68], W9
	045 Move X0, [X20+48]
	046 Move X1, [X20+56]
	047 Move X2, [X8]
	048 Call 0x2223688, X0
	049 Move W8, [X20+40]
	050 Move W9, [X20+64]
	051 Move W10, [X20+76]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, 16
	054 Move W11, [X20+96]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W11, 12
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Add W9, W10, W9
	059 Add W8, W9, W8
	060 Add W9, W8, 3
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W10, [X19]
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 And W9, W9, 0xFFFFFFFC
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W9, 4
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 Multiply W8, W8, W10
	071 Add X0, X0, W8
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return X0

Method: TValue ReadValue(UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* data)

Disassembly:
	0x0220BE2C MOV X0, X20
	0x0220BE30 MOV X1, X31
	0x0220BE34 BL 0x338C698
	0x0220BE38 MOV X20, X0
	0x0220BE3C BL 0x19903C0
	0x0220BE40 LDR X8, [X20]
	0x0220BE44 MOV X0, X20
	0x0220BE48 LDP X9, X1, [X8 + 0x1A8]
	0x0220BE4C BLR X9
	0x0220BE50 MOVZ W8, 0x200
	0x0220BE54 MOV X20, X0
	0x0220BE58 STR W8, [X31 + 0x28]
	0x0220BE5C ADRP X0, 0x1EE8000
	0x0220BE60 LDR X0, [X0 + 0x758]
	0x0220BE64 BL 0x1C16D08
	0x0220BE68 ADD X1, X31, 0x28
	0x0220BE6C BL 0x1C16E04
	0x0220BE70 MOV X21, X0
	0x0220BE74 ADRP X0, 0x1F10000
	0x0220BE78 LDR X0, [X0 + 0xF58]
	0x0220BE7C BL 0x1C16D08
	0x0220BE80 MOV X1, X20
	0x0220BE84 MOV X2, X21
	0x0220BE88 MOV X3, X31
	0x0220BE8C BL 0x3227BD4
	0x0220BE90 B 0x220BFF8
	0x0220BE94 ADRP X0, 0x1EE8000
	0x0220BE98 LDR X0, [X0 + 0x9D0]
	0x0220BE9C BL 0x1C16D08
	0x0220BEA0 MOVZ W1, 0x4
	0x0220BEA4 BL 0x1C16D6C
	0x0220BEA8 STR W24, [X31 + 0x28]
	0x0220BEAC ADRP X22, 0x1EF0000
	0x0220BEB0 LDR X22, [X22 + 0x720]
	0x0220BEB4 MOV X21, X0
	0x0220BEB8 MOV X0, X22
	0x0220BEBC BL 0x1C16D08
	0x0220BEC0 ADD X1, X31, 0x28
	0x0220BEC4 BL 0x1C16E04
	0x0220BEC8 MOV X23, X0
	0x0220BECC MOV X0, X21
	0x0220BED0 BL 0x19903C0
	0x0220BED4 MOV X0, X21
	0x0220BED8 MOV X1, X23
	0x0220BEDC BL 0x19980B4
	0x0220BEE0 MOV X0, X21
	0x0220BEE4 MOV X1, X31
	0x0220BEE8 MOV X2, X23
	0x0220BEEC BL 0x1993444
	0x0220BEF0 LDR X8, [X19 + 0x38]
	0x0220BEF4 ADRP X0, 0x1EE8000
	0x0220BEF8 LDR X23, [X8 + 0x8]
	0x0220BEFC LDR X0, [X0 + 0x6C0]
	0x0220BF00 BL 0x1C16D08
	0x0220BF04 BL 0x19903D0
	0x0220BF08 MOV X0, X23
	0x0220BF0C MOV X1, X31
	0x0220BF10 BL 0x338C698
	0x0220BF14 MOV X23, X0
	0x0220BF18 BL 0x19903C0
	0x0220BF1C LDR X8, [X23]
	0x0220BF20 MOV X0, X23
	0x0220BF24 LDP X9, X1, [X8 + 0x1A8]
	0x0220BF28 BLR X9
	0x0220BF2C MOV X23, X0
	0x0220BF30 MOV X0, X21
	0x0220BF34 BL 0x19903C0
	0x0220BF38 MOV X0, X21
	0x0220BF3C MOV X1, X23
	0x0220BF40 BL 0x19980B4
	0x0220BF44 MOVZ W1, 0x1
	0x0220BF48 MOV X0, X21
	0x0220BF4C MOV X2, X23
	0x0220BF50 BL 0x1993444
	0x0220BF54 MOV X0, X21
	0x0220BF58 BL 0x19903C0
	0x0220BF5C MOV X0, X21
	0x0220BF60 MOV X1, X20
	0x0220BF64 BL 0x19980B4
	0x0220BF68 MOVZ W1, 0x2
	0x0220BF6C MOV X0, X21
	0x0220BF70 MOV X2, X20
	0x0220BF74 BL 0x1993444
	0x0220BF78 MOV X0, X20
	0x0220BF7C BL 0x19903C0
	0x0220BF80 LDR V0, [X20 + 0x1]
	0x0220BF84 ADRP X0, 0x1F10000
	0x0220BF88 STR V0, [X31 + 0x1]
	0x0220BF8C LDR X0, [X0 + 0xD18]
	0x0220BF90 BL 0x1C16D08
	0x0220BF94 BL 0x19903D0
	0x0220BF98 ADD X0, X31, 0x10
	0x0220BF9C MOV X1, X31
	0x0220BFA0 BL 0x3800B6C
	0x0220BFA4 STR W0, [X31 + 0xC]
	0x0220BFA8 MOV X0, X22
	0x0220BFAC BL 0x1C16D08
	0x0220BFB0 ADD X1, X31, 0xC
	0x0220BFB4 BL 0x1C16E04
	0x0220BFB8 MOV X20, X0
	0x0220BFBC MOV X0, X21
	0x0220BFC0 BL 0x19903C0
	0x0220BFC4 MOV X0, X21
	0x0220BFC8 MOV X1, X20
	0x0220BFCC BL 0x19980B4
	0x0220BFD0 MOVZ W1, 0x3
	0x0220BFD4 MOV X0, X21
	0x0220BFD8 MOV X2, X20
	0x0220BFDC BL 0x1993444
	0x0220BFE0 ADRP X0, 0x1F10000
	0x0220BFE4 LDR X0, [X0 + 0xF60]
	0x0220BFE8 BL 0x1C16D08
	0x0220BFEC MOV X1, X21
	0x0220BFF0 MOV X2, X31
	0x0220BFF4 BL 0x3227C5C
	0x0220BFF8 MOV X20, X0
	0x0220BFFC ADRP X0, 0x1EF0000
	0x0220C000 LDR X0, [X0 + 0x578]
	0x0220C004 BL 0x1C16D08
	0x0220C008 BL 0x1C16F10
	0x0220C00C MOV X21, X0
	0x0220C010 ADRP X0, 0x1F0F000
	0x0220C014 LDR X0, [X0 + 0xF68]
	0x0220C018 BL 0x1C16D08
	0x0220C01C MOV X2, X0
	0x0220C020 MOV X0, X21
	0x0220C024 MOV X1, X20
	0x0220C028 MOV X3, X31
	0x0220C02C BL 0x330E16C
	0x0220C030 MOV X0, X21
	0x0220C034 MOV X1, X19
	0x0220C038 BL 0x1C16DEC
	0x0220C03C BL 0x3EB1B20
	0x0220C040 STP X30, X21, [X31 - 0x20]!
	0x0220C044 STP X20, X19, [X31 + 0x10]
	0x0220C048 LDR X8, [X1 + 0x38]
	0x0220C04C MOV X20, X1
	0x0220C050 MOV X19, X0
	0x0220C054 CBNZ X8, 0x220C074
	0x0220C058 ADRP X0, 0x1F0F000
	0x0220C05C LDR X0, [X0 + 0x270]
	0x0220C060 BL 0x1C16CF4
	0x0220C064 LDR X8, [X20 + 0x38]
	0x0220C068 CBNZ X8, 0x220C074
	0x0220C06C MOV X0, X20
	0x0220C070 BL 0x1C5C6E0
	0x0220C074 ADRP X21, 0x1F0F000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+80], X30
	003 Move [X31+88], X25
	004 Move [X31+96], X24
	005 Move [X31+104], X23
	006 Move [X31+112], X22
	007 Move [X31+120], X21
	008 Move [X31+128], X20
	009 Move [X31+136], X19
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X9, [X23+40]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X22, X0
	015 Move [X31+72], X9
	016 Move X9, [X2+56]
	017 Move X20, X8
	018 Compare X9, 0
	019 JumpIfNotEqual {31}
	020 Move X0, 0x1F11000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move X0, 0x1F11000
	024 Move X0, [X0+3400]
	025 Call 0x1C17CF4
	026 Move X8, [X19+56]
	027 Compare X8, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X19
	030 Call 0x1C5D6E0
	031 Move W8, [X22+40]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, [X22+96]
	034 Compare W8, 0
	035 JumpIfEqual {118}
	036 Move W24, W31
	037 Move W25, 1
	038 Move X0, X22
	039 Move X1, X31
	040 Call InputStateHistory.get_controls, X0
	041 Move [X31], X0
	042 Move [X31+8], X1
	043 Compare W25, 0
	044 JumpIfEqual {49}
	045 Compare X21, 0
	046 JumpIfEqual {162}
	047 Move W1, [X21+12]
	048 Move W24, W31
	049 Move W1, W31
	050 Move X8, 0x1F11000
	051 Move X8, [X8+3400]
	052 Add X0, X31, 0
	053 Move X2, [X8]
	054 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	055 Move X8, [X19+56]
	056 Move X22, X0
	057 Move X8, [X8]
	058 Move W9, [X8+309]
	059 Move TEMP, X9
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {66}
	063 Move X0, X8
	064 Call 0x1C5D684
	065 Move X8, X0
	066 Compare X22, 0
	067 JumpIfEqual {120}
	068 Move X9, [X22]
	069 Move W10, [X8+304]
	070 Move W11, [X9+304]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X9, [X9+200]
	073 Add X9, X9, X10
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, X21
	077 Move X1, X31
	078 Compare W24, 0
	079 JumpIfEqual {81}
	080 Call RecordHeader.get_statePtrWithoutControlIndex, X0
	081 Call RecordHeader.get_statePtrWithControlIndex, X0
	082 Move X8, 0x1F11000
	083 Move X8, [X8+3352]
	084 Move X21, X0
	085 Move X24, [X22+16]
	086 Move X0, [X8]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Move X8, [X19+56]
	092 Subtract X1, X21, X24
	093 Move X0, X22
	094 Move X2, [X8+16]
	095 Add X8, X31, 16
	096 Call InputControl`1<TouchState>.ReadValueFromState, X0, X1
	097 Move X8, [X31+64]
	098 Move V1, [X31+32]
	099 Move V0, [X31+48]
	100 Move V2, [X31+1]
	101 Move [X20+48], X8
	102 Move [X20+16], V1
	103 Move [X20+24], V0
	104 Move [X20], V2
	105 Move X8, [X23+40]
	106 Move X9, [X31+72]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X20, [X31+128]
	109 Move X19, [X31+136]
	110 Move X22, [X31+112]
	111 Move X21, [X31+120]
	112 Move X24, [X31+96]
	113 Move X23, [X31+104]
	114 Move X30, [X31+80]
	115 Move X25, [X31+88]
	116 Add X31, X31, 144
	117 Return X0
	118 Move W25, W31
	119 Move W24, 1
	120 Move X8, [X19+56]
	121 Move X0, 0x1EE9000
	122 Move X20, [X8+8]
	123 Move X0, [X0+1728]
	124 Call 0x1C17D08
	125 Call 0x19913D0
	126 Move X0, X20
	127 Move X1, X31
	128 Call Type.GetTypeFromHandle, X0
	129 Move X1, X31
	130 Call TypeHelpers.GetNiceTypeName, X0
	131 Move X20, X0
	132 Move X0, X22
	133 Call 0x19913C0
	134 Move X8, [X22]
	135 Move X0, X22
	136 Move X9, [X8+376]
	137 Move X1, [X8+384]
	138 NotImplemented "Instruction BLR not yet implemented."
	139 Move X1, X31
	140 Call TypeHelpers.GetNiceTypeName, X0
	141 Move X21, X0
	142 Move X0, 0x1F10000
	143 Move X0, [X0+3832]
	144 Call 0x1C17D08
	145 Move X1, X20
	146 Move X2, X22
	147 Move X3, X21
	148 Move X4, X31
	149 Call String.Format, X0, X1, X2, X3
	150 Move X20, X0
	151 Move X0, 0x1EE8000
	152 Move X0, [X0+1456]
	153 Call 0x1C17D08
	154 Call 0x1C17F10
	155 Move X1, X20
	156 Move X2, X31
	157 Move X21, X0
	158 Call InvalidOperationException..ctor, X0, X1
	159 Move X0, X21
	160 Move X1, X19
	161 Call 0x1C17DEC
	162 Call 0x1C17F20
	163 Call 0x3EB2B20

Method: System.Object ReadValueAsObject(UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* data)

Disassembly:
	0x0380F924 MOVZ W8, 0x1
	0x0380F928 STRB W8, [X20 + 0x793]
	0x0380F92C LDR X8, [X19]
	0x0380F930 LDR X8, [X8 + 0xB8]
	0x0380F934 LDR X19, [X8]
	0x0380F938 CBZ X19, 0x380FA84
	0x0380F93C ADRP X8, 0x8E5000
	0x0380F940 LDR X8, [X8 + 0x5A8]
	0x0380F944 ADRP X11, 0x90C000
	0x0380F948 LDR X9, [X8]
	0x0380F94C LDR X8, [X19]
	0x0380F950 LDR X10, [X9 + 0xB8]
	0x0380F954 LDR X11, [X11 + 0xED0]
	0x0380F958 LDRH W9, [X8 + 0x12E]
	0x0380F95C LDP S14, S15, [X10]
	0x0380F960 LDP S12, S13, [X10 + 0x8]
	0x0380F964 LDR X1, [X11]
	0x0380F968 CBZ X9, 0x380F98C
	0x0380F96C LDR X10, [X8 + 0xB0]
	0x0380F970 ADD X10, X10, 0x8
	0x0380F974 LDUR X11, [X10 - 0x8]
	0x0380F978 CMP X11, X1
	0x0380F97C B.EQ 0x380F9AC
	0x0380F980 SUBS X9, X9, 0x1
	0x0380F984 ADD X10, X10, 0x10
	0x0380F988 B.NE 0x380F974
	0x0380F98C MOVZ W2, 0x1A
	0x0380F990 MOV X0, X19
	0x0380F994 BL 0x1C5C788
	0x0380F998 B 0x380F9BC
	0x0380F99C MOV V0.16B, V11.16B
	0x0380F9A0 MOV V1.16B, V10.16B
	0x0380F9A4 MOV V2.16B, V9.16B
	0x0380F9A8 B 0x380FA64
	0x0380F9AC LDR W9, [X10]
	0x0380F9B0 ADD W9, W9, 0x1A
	0x0380F9B4 ADD X8, X8, W9, 0x4, SXTW
	0x0380F9B8 ADD X0, X8, 0x138
	0x0380F9BC LDP X8, X1, [X0]
	0x0380F9C0 MOV X0, X19
	0x0380F9C4 BLR X8
	0x0380F9C8 SUB W8, W0, 0x2
	0x0380F9CC CMP W8, 0x2
	0x0380F9D0 B.HI 0x380F9F4
	0x0380F9D4 ADRP X9, 0xFFFFFFFFFD388000
	0x0380F9D8 ADRP X10, 0xFFFFFFFFFD388000
	0x0380F9DC ADD X9, X9, 0x9B8
	0x0380F9E0 ADD X10, X10, 0x9C4
	0x0380F9E4 LDR V12, [X9, W8, SXTW]
	0x0380F9E8 LDR V13, [X10, W8, SXTW]
	0x0380F9EC FMOV S14, W31
	0x0380F9F0 FMOV S15, W31
	0x0380F9F4 FMUL S0, S8, S14
	0x0380F9F8 FMUL S1, S11, S13
	0x0380F9FC FMUL S4, S8, S15
	0x0380FA00 FMUL S5, S10, S13
	0x0380FA04 FMUL S17, S11, S14
	0x0380FA08 FMUL S20, S8, S12
	0x0380FA0C FMUL S21, S8, S13
	0x0380FA10 FMUL S22, S9, S13
	0x0380FA14 FMUL S2, S10, S12
	0x0380FA18 FMUL S6, S9, S14

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBD3000
	007 Move W8, [X21+1180]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x90D000
	015 Move X0, [X0+3352]
	016 Call 0x1C17CF4
	017 Move X0, 0x90D000
	018 Move X0, [X0+3400]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1180], W8
	022 Move [X31], X31
	023 Move [X31+8], X31
	024 Move W8, [X20+40]
	025 Move X21, 0x90D000
	026 Move X21, [X21+3400]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W8, [X20+96]
	029 Compare W8, 0
	030 JumpIfEqual {65}
	031 Move X0, X20
	032 Call InputStateHistory.get_controls, X0
	033 Move [X31], X0
	034 Move [X31+8], X1
	035 Compare X19, 0
	036 JumpIfEqual {77}
	037 Move W1, [X19+12]
	038 Move X2, [X21]
	039 Add X0, X31, 0
	040 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	041 Move X20, X0
	042 Add X19, X19, 16
	043 Compare X20, 0
	044 JumpIfEqual {77}
	045 Move X8, 0x90D000
	046 Move X8, [X8+3352]
	047 Move X21, [X20+16]
	048 Move X0, [X8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X8, [X20]
	054 Subtract X1, X19, X21
	055 Move X0, X20
	056 Move X9, [X8+440]
	057 Move X2, [X8+448]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X30, [X31+16]
	062 Move X21, [X31+24]
	063 Add X31, X31, 48
	064 Return X0
	065 Move X0, X20
	066 Call InputStateHistory.get_controls, X0
	067 Move X2, [X21]
	068 Move [X31], X0
	069 Move [X31+8], X1
	070 Add X0, X31, 0
	071 Move W1, W31
	072 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	073 Move X20, X0
	074 Add X19, X19, 12
	075 Compare X20, 0
	076 JumpIfNotEqual {45}
	077 Call 0x1C17F20

Method: System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged(UnityEngine.InputSystem.InputControl control, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, System.Int64 monitorIndex)

Disassembly:
	0x0380FA1C FMUL S16, S11, S15
	0x0380FA20 FMUL S19, S10, S15
	0x0380FA24 FADD S0, S0, S1
	0x0380FA28 FADD S1, S4, S5
	0x0380FA2C FADD S4, S20, S22
	0x0380FA30 FSUB S5, S21, S17
	0x0380FA34 FMUL S3, S9, S15
	0x0380FA38 FMUL S7, S11, S12
	0x0380FA3C FMUL S18, S10, S14
	0x0380FA40 FMUL S23, S9, S12
	0x0380FA44 FADD S0, S2, S0
	0x0380FA48 FADD S1, S6, S1
	0x0380FA4C FADD S2, S16, S4
	0x0380FA50 FSUB S4, S5, S19
	0x0380FA54 FSUB S0, S0, S3
	0x0380FA58 FSUB S1, S1, S7
	0x0380FA5C FSUB S2, S2, S18
	0x0380FA60 FSUB S8, S4, S23
	0x0380FA64 MOV V3.16B, V8.16B
	0x0380FA68 LDP X20, X19, [X31 + 0x50]
	0x0380FA6C LDR X30, [X31 + 0x40]
	0x0380FA70 LDP D9, D8, [X31 + 0x30]
	0x0380FA74 LDP D11, D10, [X31 + 0x20]
	0x0380FA78 LDP D13, D12, [X31 + 0x10]
	0x0380FA7C LDP D15, D14, [X31], #0x60
	0x0380FA80 RET
	0x0380FA84 BL 0x1C16F20
	0x0380FA88 STR X30, [X31 - 0x20]!
	0x0380FA8C STP X20, X19, [X31 + 0x10]
	0x0380FA90 ADRP X19, 0xBD2000
	0x0380FA94 ADRP X20, 0x93B000
	0x0380FA98 LDRB W8, [X19 + 0x4AD]
	0x0380FA9C LDR X20, [X20 + 0x698]
	0x0380FAA0 TBNZ X8, 0x0, 0x380FAB8
	0x0380FAA4 ADRP X0, 0x93B000
	0x0380FAA8 LDR X0, [X0 + 0x698]
	0x0380FAAC BL 0x1C16CF4
	0x0380FAB0 MOVZ W8, 0x1
	0x0380FAB4 STRB W8, [X19 + 0x4AD]
	0x0380FAB8 LDR X0, [X20]
	0x0380FABC LDP X20, X19, [X31 + 0x10]
	0x0380FAC0 LDR X30, [X31], #0x20
	0x0380FAC4 RET
	0x0380FAC8 MOVZ W0, 0x1
	0x0380FACC RET
	0x0380FAD0 STP X30, X21, [X31 - 0x20]!
	0x0380FAD4 STP X20, X19, [X31 + 0x10]
	0x0380FAD8 ADRP X20, 0xBD2000
	0x0380FADC ADRP X21, 0x93B000
	0x0380FAE0 LDRB W8, [X20 + 0x4AE]
	0x0380FAE4 LDR X21, [X21 + 0x6A0]
	0x0380FAE8 MOV X19, X0
	0x0380FAEC TBNZ X8, 0x0, 0x380FB04
	0x0380FAF0 ADRP X0, 0x93B000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xBD2000
	008 Move W8, [X22+3533]
	009 Move X21, X2
	010 Move V8, V0
	011 Move X19, X1
	012 Move X20, X0
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x936000
	016 Move X0, [X0+3984]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3533], W8
	020 Move X8, 0x936000
	021 Move X8, [X8+3984]
	022 Move X0, X20
	023 Move X8, [X8]
	024 Move X8, [X8+184]
	025 Move W22, [X8+4]
	026 Call InputStateHistory.get_updateMask, X0
	027 And W31, W0, W22
	028 Move X8, [X20+24]
	029 Compare X8, 0
	030 JumpIfEqual {42}
	031 Move X9, [X8+24]
	032 Move X0, [X8+64]
	033 Move X3, [X8+40]
	034 Move X1, X19
	035 Move V0, V8
	036 Move X2, X21
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {59}
	042 Compare X19, 0
	043 JumpIfEqual {66}
	044 Move X0, X19
	045 Move X1, X31
	046 Call InputControl.get_currentStatePtr, X0
	047 Move X2, X0
	048 Move X0, X20
	049 Move X1, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+8]
	055 Move V0, V8
	056 Move V8, [X31+48]
	057 Call InputStateHistory.RecordStateChange, X0, X1, X2, V0
	058 Return 
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+8]
	064 Move V8, [X31+48]
	065 Return 
	066 Call 0x1C17F20

Method: System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired(UnityEngine.InputSystem.InputControl control, System.Double time, System.Int64 monitorIndex, System.Int32 timerIndex)

Disassembly:
	0x0380FAF4 LDR X0, [X0 + 0x6A0]

ISIL:
	001 Return 

Method: System.Int32 get_bytesPerRecord()

Disassembly:
	0x0380F804 ADRP X0, 0x93B000
	0x0380F808 LDR X0, [X0 + 0x688]
	0x0380F80C BL 0x1C16CF4
	0x0380F810 MOVZ W8, 0x1
	0x0380F814 STRB W8, [X19 + 0x4AA]
	0x0380F818 LDR X0, [X20]
	0x0380F81C LDP X20, X19, [X31 + 0x10]
	0x0380F820 LDR X30, [X31], #0x20
	0x0380F824 RET
	0x0380F828 MOVZ W0, 0x1
	0x0380F82C RET
	0x0380F830 STP X30, X21, [X31 - 0x20]!
	0x0380F834 STP X20, X19, [X31 + 0x10]
	0x0380F838 ADRP X20, 0xBD2000
	0x0380F83C ADRP X21, 0x93B000
	0x0380F840 LDRB W8, [X20 + 0x4AB]
	0x0380F844 LDR X21, [X21 + 0x690]
	0x0380F848 MOV X19, X0
	0x0380F84C TBNZ X8, 0x0, 0x380F864
	0x0380F850 ADRP X0, 0x93B000

ISIL:
	001 Move W10, [X0+40]
	002 Move W8, [X0+64]
	003 Move W9, [X0+76]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W10, 16
	006 Move W11, [X0+96]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W11, 12
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Add W8, W9, W8
	011 Add W8, W8, W10
	012 Add W9, W8, 3
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSEL not yet implemented."
	015 And W9, W9, 0xFFFFFFFC
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add W9, W9, 4
	018 NotImplemented "Instruction CSEL not yet implemented."
	019 Return X0

