Type: UnityEngine.InputSystem.LowLevel.InputEventListener

Method: UnityEngine.InputSystem.LowLevel.InputEventListener op_Addition(UnityEngine.InputSystem.LowLevel.InputEventListener _, System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr, UnityEngine.InputSystem.InputDevice> callback)

Disassembly:
	0x037FD234 LDR X3, [X8]
	0x037FD238 BL 0x220C738
	0x037FD23C LDR X1, [X25]
	0x037FD240 ADD X0, X31, 0xE8
	0x037FD244 MOVZ W2, 0x1
	0x037FD248 MOV X3, X31
	0x037FD24C STR X31, [X31 + 0xE8]
	0x037FD250 BL 0x3755CF8
	0x037FD254 LDR X1, [X26]
	0x037FD258 STR X0, [X31 + 0xE8]
	0x037FD25C ADD X0, X31, 0xE8
	0x037FD260 MOVZ W2, 0x1
	0x037FD264 MOV X3, X31
	0x037FD268 BL 0x3755F7C
	0x037FD26C LDR X1, [X23]
	0x037FD270 LDR X3, [X24]
	0x037FD274 STR X0, [X31 + 0xE8]
	0x037FD278 ADD X0, X31, 0xE8
	0x037FD27C MOVZ W2, 0xA
	0x037FD280 BL 0x2207CC0
	0x037FD284 LDR X2, [X19]
	0x037FD288 MOV X1, X0
	0x037FD28C ADD X0, X31, 0x48
	0x037FD290 STP X31, X31, [X31 + 0x48]
	0x037FD294 BL 0x243321C
	0x037FD298 ADRP X8, 0x94C000
	0x037FD29C LDP X1, X2, [X31 + 0x48]
	0x037FD2A0 LDR X8, [X8 + 0xE68]
	0x037FD2A4 MOV X0, X31
	0x037FD2A8 LDR X3, [X8]
	0x037FD2AC BL 0x220C738
	0x037FD2B0 LDR X1, [X25]
	0x037FD2B4 ADD X0, X31, 0xE8
	0x037FD2B8 MOVZ W2, 0x1
	0x037FD2BC MOV X3, X31
	0x037FD2C0 STR X31, [X31 + 0xE8]
	0x037FD2C4 BL 0x3755CF8
	0x037FD2C8 LDR X1, [X26]
	0x037FD2CC STR X0, [X31 + 0xE8]
	0x037FD2D0 ADD X0, X31, 0xE8
	0x037FD2D4 MOVZ W2, 0x1
	0x037FD2D8 MOV X3, X31
	0x037FD2DC BL 0x3755F7C
	0x037FD2E0 LDR X1, [X23]
	0x037FD2E4 LDR X3, [X24]
	0x037FD2E8 STR X0, [X31 + 0xE8]
	0x037FD2EC ADD X0, X31, 0xE8
	0x037FD2F0 MOVZ W2, 0xB
	0x037FD2F4 BL 0x2207CC0
	0x037FD2F8 LDR X2, [X19]
	0x037FD2FC MOV X1, X0
	0x037FD300 ADD X0, X31, 0x38
	0x037FD304 STP X31, X31, [X31 + 0x38]
	0x037FD308 BL 0x243321C
	0x037FD30C ADRP X8, 0x94C000
	0x037FD310 LDP X1, X2, [X31 + 0x38]
	0x037FD314 LDR X8, [X8 + 0xE90]
	0x037FD318 MOV X0, X31
	0x037FD31C LDR X3, [X8]
	0x037FD320 BL 0x220C738
	0x037FD324 LDR X1, [X25]
	0x037FD328 ADD X0, X31, 0xE8
	0x037FD32C MOVZ W2, 0x1
	0x037FD330 MOV X3, X31
	0x037FD334 STR X31, [X31 + 0xE8]
	0x037FD338 BL 0x3755CF8
	0x037FD33C LDR X1, [X26]
	0x037FD340 STR X0, [X31 + 0xE8]
	0x037FD344 ADD X0, X31, 0xE8
	0x037FD348 MOVZ W2, 0x1
	0x037FD34C MOV X3, X31
	0x037FD350 BL 0x3755F7C
	0x037FD354 LDR X1, [X23]
	0x037FD358 LDR X3, [X24]
	0x037FD35C STR X0, [X31 + 0xE8]
	0x037FD360 ADD X0, X31, 0xE8
	0x037FD364 MOVZ W2, 0xC
	0x037FD368 BL 0x2207CC0
	0x037FD36C LDR X2, [X19]
	0x037FD370 MOV X1, X0
	0x037FD374 ADD X0, X31, 0x28
	0x037FD378 STP X31, X31, [X31 + 0x28]
	0x037FD37C BL 0x243321C
	0x037FD380 ADRP X8, 0x94C000
	0x037FD384 LDP X1, X2, [X31 + 0x28]
	0x037FD388 LDR X8, [X8 + 0xE88]
	0x037FD38C MOV X0, X31
	0x037FD390 LDR X3, [X8]
	0x037FD394 BL 0x220C738
	0x037FD398 LDR X1, [X25]
	0x037FD39C ADD X0, X31, 0xE8
	0x037FD3A0 MOVZ W2, 0x1
	0x037FD3A4 MOV X3, X31
	0x037FD3A8 STR X31, [X31 + 0xE8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xBE5000
	007 Move W8, [X19+1050]
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x91F000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1050], W8
	018 Compare X20, 0
	019 JumpIfEqual {64}
	020 Move X21, 0x91F000
	021 Move X21, [X21+624]
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X19, [X8]
	030 Move [X31+12], W31
	031 Add X1, X31, 12
	032 Move X0, X19
	033 Move X2, X31
	034 Call Monitor.Enter, X0, X1
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move X0, [X8]
	043 Compare X0, 0
	044 JumpIfEqual {84}
	045 Move X1, X20
	046 Move X2, X31
	047 Call InputManager.add_onEvent, X0, X1
	048 Move X20, X31
	049 Move W8, [X31+12]
	050 Compare W8, 0
	051 JumpIfEqual {55}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Monitor.Exit, X0
	055 Compare X20, 0
	056 JumpIfNotEqual {82}
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+16]
	060 Move X21, [X31+24]
	061 Move X0, X31
	062 Add X31, X31, 48
	063 Return X0
	064 Move X0, 0x8FC000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0x930000
	070 Move X0, [X0+3880]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Move X2, X31
	075 Call ArgumentNullException..ctor, X0, X1
	076 Move X0, 0x94D000
	077 Move X0, [X0+3544]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Call 0x1C17DEC
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1C17F20
	085 Move X21, X0
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, X21
	088 Call 0x3EB2AD0
	089 Move X20, [X0]
	090 Call 0x3EB2AE0
	091 Move X20, X31
	092 Move X21, X0
	093 Move W8, [X31+12]
	094 Compare W8, 0
	095 JumpIfEqual {99}
	096 Move X0, X19
	097 Move X1, X31
	098 Call Monitor.Exit, X0
	099 Compare X20, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X21
	102 Call 0x1D2D690
	103 Move X0, X20
	104 Call 0x1C17F18
	105 Call 0x1991590

Method: UnityEngine.InputSystem.LowLevel.InputEventListener op_Subtraction(UnityEngine.InputSystem.LowLevel.InputEventListener _, System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr, UnityEngine.InputSystem.InputDevice> callback)

Disassembly:
	0x037FD510 ADRP X0, 0x94C000
	0x037FD514 LDR X0, [X0 + 0xEE8]
	0x037FD518 BL 0x1C16CF4
	0x037FD51C ADRP X0, 0x94C000
	0x037FD520 LDR X0, [X0 + 0xEC0]
	0x037FD524 BL 0x1C16CF4
	0x037FD528 ADRP X0, 0x922000
	0x037FD52C LDR X0, [X0 + 0xE30]
	0x037FD530 BL 0x1C16CF4
	0x037FD534 ADRP X0, 0x94C000
	0x037FD538 LDR X0, [X0 + 0xEF0]
	0x037FD53C BL 0x1C16CF4
	0x037FD540 ADRP X0, 0x94C000
	0x037FD544 LDR X0, [X0 + 0xEF8]
	0x037FD548 BL 0x1C16CF4
	0x037FD54C ADRP X0, 0x94C000
	0x037FD550 LDR X0, [X0 + 0xF00]
	0x037FD554 BL 0x1C16CF4
	0x037FD558 ADRP X0, 0x94C000
	0x037FD55C LDR X0, [X0 + 0xF08]
	0x037FD560 BL 0x1C16CF4
	0x037FD564 MOVZ W8, 0x1
	0x037FD568 STRB W8, [X21 + 0x3F3]
	0x037FD56C MOV X0, X20
	0x037FD570 MOV X1, X31
	0x037FD574 BL 0x32277A8
	0x037FD578 TBNZ X0, 0x0, 0x37FD5BC
	0x037FD57C ADRP X8, 0x94C000
	0x037FD580 LDR X8, [X8 + 0xEE8]
	0x037FD584 MOV X0, X20
	0x037FD588 MOV X2, X31
	0x037FD58C LDR X1, [X8]
	0x037FD590 BL 0x3226EF8
	0x037FD594 TBZ X0, 0x0, 0x37FD5BC
	0x037FD598 ADRP X8, 0x94C000
	0x037FD59C LDR X8, [X8 + 0xEF0]
	0x037FD5A0 MOV X0, X20
	0x037FD5A4 MOV X2, X31
	0x037FD5A8 LDR X1, [X8]
	0x037FD5AC BL 0x3226EF8
	0x037FD5B0 MOV W8, W0
	0x037FD5B4 MOV X0, X31
	0x037FD5B8 TBNZ X8, 0x0, 0x37FD708
	0x037FD5BC ADRP X8, 0x922000
	0x037FD5C0 LDR X8, [X8 + 0xE30]
	0x037FD5C4 LDR X0, [X19]
	0x037FD5C8 MOV X2, X31
	0x037FD5CC LDR X1, [X8]
	0x037FD5D0 BL 0x3226EF8
	0x037FD5D4 MOV W8, W0
	0x037FD5D8 MOV X0, X31
	0x037FD5DC TBNZ X8, 0x0, 0x37FD708
	0x037FD5E0 LDR X0, [X19 + 0x30]
	0x037FD5E4 MOV X1, X31
	0x037FD5E8 BL 0x32277A8
	0x037FD5EC MOV W8, W0
	0x037FD5F0 MOV X0, X31
	0x037FD5F4 TBNZ X8, 0x0, 0x37FD708
	0x037FD5F8 ADRP X8, 0x94C000
	0x037FD5FC LDR X0, [X19 + 0x8]
	0x037FD600 LDR X8, [X8 + 0xEC0]
	0x037FD604 MOV X2, X31
	0x037FD608 LDR X1, [X8]
	0x037FD60C BL 0x321BA08
	0x037FD610 MOV W8, W0
	0x037FD614 MOV X0, X31
	0x037FD618 TBZ X8, 0x0, 0x37FD708
	0x037FD61C LDR X0, [X19 + 0x30]
	0x037FD620 ADD X8, X31, 0x8
	0x037FD624 BL 0x37FD724
	0x037FD628 LDR W8, [X31 + 0x28]
	0x037FD62C MOVZ W9, 0x401
	0x037FD630 ORN W8, W31, W8, 0x0
	0x037FD634 ANDS X31, X8, X9, 0x0
	0x037FD638 B.NE 0x37FD6BC
	0x037FD63C LDR X19, [X31 + 0x20]
	0x037FD640 CBZ X19, 0x37FD6FC
	0x037FD644 ADRP X20, 0x94C000
	0x037FD648 LDR W21, [X31 + 0x14]
	0x037FD64C LDR X20, [X20 + 0xED8]
	0x037FD650 MOVZ W1, 0xB
	0x037FD654 MOV X0, X19
	0x037FD658 LDR X2, [X20]
	0x037FD65C BL 0x21BA4B4
	0x037FD660 TBZ X0, 0x0, 0x37FD6C8
	0x037FD664 LDR X2, [X20]
	0x037FD668 MOVZ W1, 0xE
	0x037FD66C MOV X0, X19
	0x037FD670 BL 0x21BA4B4
	0x037FD674 TBZ X0, 0x0, 0x37FD6C8
	0x037FD678 LDR X2, [X20]
	0x037FD67C MOVZ W1, 0xF
	0x037FD680 MOV X0, X19
	0x037FD684 BL 0x21BA4B4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xBE5000
	007 Move W8, [X19+1051]
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x91F000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1051], W8
	018 Compare X20, 0
	019 JumpIfEqual {64}
	020 Move X21, 0x91F000
	021 Move X21, [X21+624]
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X19, [X8]
	030 Move [X31+12], W31
	031 Add X1, X31, 12
	032 Move X0, X19
	033 Move X2, X31
	034 Call Monitor.Enter, X0, X1
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move X0, [X8]
	043 Compare X0, 0
	044 JumpIfEqual {84}
	045 Move X1, X20
	046 Move X2, X31
	047 Call InputManager.remove_onEvent, X0, X1
	048 Move X20, X31
	049 Move W8, [X31+12]
	050 Compare W8, 0
	051 JumpIfEqual {55}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Monitor.Exit, X0
	055 Compare X20, 0
	056 JumpIfNotEqual {82}
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+16]
	060 Move X21, [X31+24]
	061 Move X0, X31
	062 Add X31, X31, 48
	063 Return X0
	064 Move X0, 0x8FC000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0x930000
	070 Move X0, [X0+3880]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Move X2, X31
	075 Call ArgumentNullException..ctor, X0, X1
	076 Move X0, 0x94D000
	077 Move X0, [X0+3568]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Call 0x1C17DEC
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1C17F20
	085 Move X21, X0
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, X21
	088 Call 0x3EB2AD0
	089 Move X20, [X0]
	090 Call 0x3EB2AE0
	091 Move X20, X31
	092 Move X21, X0
	093 Move W8, [X31+12]
	094 Compare W8, 0
	095 JumpIfEqual {99}
	096 Move X0, X19
	097 Move X1, X31
	098 Call Monitor.Exit, X0
	099 Compare X20, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X21
	102 Call 0x1D2D690
	103 Move X0, X20
	104 Call 0x1C17F18
	105 Call 0x1991590

Method: System.IDisposable Subscribe(System.IObserver`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> observer)

Disassembly:
	0x03803288 LDP X22, X21, [X31 + 0x20]
	0x0380328C LDP X30, X23, [X31 + 0x10]
	0x03803290 ADD X31, X31, 0x40
	0x03803294 RET
	0x03803298 STR X30, [X31 - 0x20]!
	0x0380329C STP X20, X19, [X31 + 0x10]
	0x038032A0 MOV X4, X0
	0x038032A4 LDR W8, [X4 + 0x30]!
	0x038032A8 MOV X19, X0
	0x038032AC CMP W8, 0x0
	0x038032B0 B.LE 0x38032DC
	0x038032B4 ADD X20, X19, 0x20
	0x038032B8 ADD X2, X19, 0x28
	0x038032BC ADD X3, X19, 0x6C
	0x038032C0 AND W5, W1, 0x1
	0x038032C4 MOV X1, X20
	0x038032C8 BL 0x3801EA0
	0x038032CC LDR W8, [X19 + 0x30]
	0x038032D0 CMP W8, 0x0
	0x038032D4 B.GT 0x3803324
	0x038032D8 B 0x3803314
	0x038032DC LDR W9, [X19 + 0x68]
	0x038032E0 CMP W9, 0x1
	0x038032E4 B.LT 0x3803314
	0x038032E8 LDR X8, [X19 + 0x58]
	0x038032EC SUBS W9, W9, 0x1
	0x038032F0 B.EQ 0x380330C
	0x038032F4 LDRH W10, [X8 + 0x4]
	0x038032F8 AND W11, W10, 0xFFFC
	0x038032FC ADD W11, W11, 0x4
	0x03803300 ANDS W31, W10, 0x3
	0x03803304 CSEL W10, W10, W11, EQ
	0x03803308 ADD X8, X8, X10
	0x0380330C STR X8, [X19 + 0x58]
	0x03803310 STR W9, [X19 + 0x68]
	0x03803314 LDR W8, [X19 + 0x68]
	0x03803318 CMP W8, 0x1
	0x0380331C B.LT 0x380332C
	0x03803320 ADD X20, X19, 0x58
	0x03803324 LDR X0, [X20]
	0x03803328 B 0x3803330
	0x0380332C MOV X0, X31
	0x03803330 LDP X20, X19, [X31 + 0x10]
	0x03803334 LDR X30, [X31], #0x20
	0x03803338 RET
	0x0380333C LDR W9, [X0 + 0x30]
	0x03803340 CMP W9, 0x2
	0x03803344 B.GE 0x3803364
	0x03803348 LDR W8, [X0 + 0x68]
	0x0380334C CMP W9, 0x1
	0x03803350 B.NE 0x380336C
	0x03803354 CMP W8, 0x1
	0x03803358 B.LT 0x3803374
	0x0380335C LDR X0, [X0 + 0x58]
	0x03803360 RET
	0x03803364 LDR X8, [X0 + 0x20]
	0x03803368 B 0x3803380
	0x0380336C CMP W8, 0x2
	0x03803370 B.GE 0x380337C
	0x03803374 MOV X0, X31
	0x03803378 RET
	0x0380337C LDR X8, [X0 + 0x58]
	0x03803380 LDRH W9, [X8 + 0x4]
	0x03803384 AND W10, W9, 0xFFFC
	0x03803388 ADD W10, W10, 0x4
	0x0380338C ANDS W31, W9, 0x3
	0x03803390 CSEL W9, W9, W10, EQ
	0x03803394 ADD X0, X9, X8
	0x03803398 RET
	0x0380339C STR X30, [X31 - 0x10]!
	0x038033A0 ADD X0, X31, 0x8
	0x038033A4 MOVZ W1, 0x46
	0x038033A8 MOVZ W2, 0x52
	0x038033AC MOVZ W3, 0x4D
	0x038033B0 MOVZ W4, 0x45
	0x038033B4 MOV X5, X31
	0x038033B8 STR W31, [X31 + 0x8]
	0x038033BC BL 0x375AA28
	0x038033C0 LDR W0, [X31 + 0x8]
	0x038033C4 LDR X30, [X31], #0x10
	0x038033C8 RET
	0x038033CC LDR W0, [X0 + 0x20]
	0x038033D0 RET
	0x038033D4 STR W1, [X0 + 0x20]
	0x038033D8 RET
	0x038033DC LDRB W0, [X0 + 0x14]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBDF000
	006 Move X21, 0x944000
	007 Move W8, [X20+1052]
	008 Move X21, [X21+2384]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x948000
	015 Move X0, [X0+336]
	016 Call 0x1C17CF4
	017 Move X0, 0x948000
	018 Move X0, [X0+344]
	019 Call 0x1C17CF4
	020 Move X0, 0x944000
	021 Move X0, [X0+2384]
	022 Call 0x1C17CF4
	023 Move X0, 0x919000
	024 Move X0, [X0+624]
	025 Call 0x1C17CF4
	026 Move X0, 0x948000
	027 Move X0, [X0+352]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1052], W8
	031 Move X8, [X21]
	032 Move X8, [X8+184]
	033 Move X8, [X8]
	034 Compare X8, 0
	035 JumpIfNotEqual {50}
	036 Move X8, 0x948000
	037 Move X8, [X8+352]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X20, X0
	041 Call ObserverState..ctor, X0
	042 Move X8, [X21]
	043 Move X8, [X8+184]
	044 Move [X8], X20
	045 Move X8, [X21]
	046 Move X8, [X8+184]
	047 Move X8, [X8]
	048 Compare X8, 0
	049 JumpIfEqual {101}
	050 Move W9, [X8+16]
	051 Compare W9, 0
	052 JumpIfNotEqual {78}
	053 Move X20, 0x919000
	054 Move X20, [X20+624]
	055 Move X0, [X20]
	056 Move W9, [X0+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {66}
	059 Call 0x1C17DFC
	060 Move X8, [X21]
	061 Move X8, [X8+184]
	062 Move X8, [X8]
	063 Compare X8, 0
	064 JumpIfEqual {101}
	065 Move X0, [X20]
	066 Move X9, [X0+184]
	067 Move X0, [X9]
	068 Compare X0, 0
	069 JumpIfEqual {101}
	070 Move X1, [X8+40]
	071 Move X2, X31
	072 Call InputManager.add_onEvent, X0, X1
	073 Move X8, [X21]
	074 Move X8, [X8+184]
	075 Move X8, [X8]
	076 Compare X8, 0
	077 JumpIfEqual {101}
	078 Move X9, 0x948000
	079 Move X9, [X9+344]
	080 Move X20, 0x948000
	081 Add X0, X8, 16
	082 Move W2, 10
	083 Move X3, [X9]
	084 Move X20, [X20+336]
	085 Move X1, X19
	086 Call InlinedArray`1<Object>.AppendWithCapacity, X0, X1, X2
	087 Move X0, [X20]
	088 Call 0x1C17F10
	089 Move X1, X31
	090 Move X20, X0
	091 Call Object..ctor, X0
	092 Compare X20, 0
	093 JumpIfEqual {101}
	094 Move [X20+16], X19
	095 Move X0, X20
	096 Move X20, [X31+16]
	097 Move X19, [X31+24]
	098 Move X30, [X31+32]
	099 Move X21, [X31+40]
	100 Return X0
	101 Call 0x1C17F20

