Type: UnityEngine.InputSystem.LowLevel.StateEvent

Method: System.UInt32 get_stateSizeInBytes()

Disassembly:
	0x03803C74 MOV X1, X24
	0x03803C78 BLR X9
	0x03803C7C B 0x3803B64

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Subtract W0, W8, 24
	003 Return X0

Method: System.Void* get_state()

Disassembly:
	0x03808298 CBNZ W8, 0x38082A0
	0x0380829C BL 0x1C16DFC

ISIL:
	001 Add X0, X0, 24
	002 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr()

Disassembly:
	0x038082A0 MOV X0, X19

ISIL:
	001 Return X0

Method: UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()

Disassembly:
	0x038082A4 LDP X20, X19, [X31 + 0x10]
	0x038082A8 MOV X1, X31
	0x038082AC LDP X30, X21, [X31], #0x20

ISIL:
	001 Move W0, 0x4154
	002 NotImplemented "Instruction MOVK not yet implemented."
	003 Return X0

Method: TState GetState()

Disassembly:
	0x0225B4D8 SUBS X9, X9, 0x1
	0x0225B4DC ADD X10, X10, 0x10
	0x0225B4E0 B.NE 0x225B4CC
	0x0225B4E4 MOVZ W2, 0x1
	0x0225B4E8 MOV X0, X22
	0x0225B4EC BL 0x1C5C788
	0x0225B4F0 B 0x225B504
	0x0225B4F4 LDR W9, [X10]
	0x0225B4F8 ADD W9, W9, 0x1
	0x0225B4FC ADD X8, X8, W9, 0x4, SXTW
	0x0225B500 ADD X0, X8, 0x138
	0x0225B504 LDP X8, X1, [X0]
	0x0225B508 MOV X0, X22
	0x0225B50C BLR X8
	0x0225B510 MOV X22, X0
	0x0225B514 ADRP X0, 0x1EC1000
	0x0225B518 LDR X0, [X0 + 0x5D0]
	0x0225B51C BL 0x1C16D08
	0x0225B520 MOV X1, X22
	0x0225B524 MOV X2, X31
	0x0225B528 BL 0x321B938
	0x0225B52C STR X0, [X31 + 0x10]
	0x0225B530 ADRP X0, 0x1E98000
	0x0225B534 LDR X0, [X0 + 0x720]
	0x0225B538 BL 0x1C16D08
	0x0225B53C BL 0x1C16F10
	0x0225B540 STR X0, [X31 + 0x20]
	0x0225B544 ADRP X0, 0x1E98000
	0x0225B548 LDR X0, [X0 + 0x718]
	0x0225B54C BL 0x1C16D08
	0x0225B550 MOV X1, X0
	0x0225B554 LDR X0, [X31 + 0x20]
	0x0225B558 BL 0x2AA4804
	0x0225B55C CBZ X23, 0x225B9F4
	0x0225B560 LDR X8, [X23]
	0x0225B564 LDP X9, X1, [X8 + 0x168]
	0x0225B568 MOV X0, X23
	0x0225B56C BLR X9
	0x0225B570 LDR X8, [X31 + 0x20]
	0x0225B574 CBZ X8, 0x225B9F8
	0x0225B578 MOV X22, X0
	0x0225B57C ADRP X0, 0x1EC1000
	0x0225B580 LDR X0, [X0 + 0x5D8]
	0x0225B584 BL 0x1C16D08
	0x0225B588 STR X0, [X31 + 0x18]
	0x0225B58C ADRP X0, 0x1E98000
	0x0225B590 LDR X0, [X0 + 0x710]
	0x0225B594 BL 0x1C16D08
	0x0225B598 MOV X3, X0
	0x0225B59C LDP X1, X0, [X31 + 0x18]
	0x0225B5A0 MOV X2, X22
	0x0225B5A4 BL 0x2AA5098
	0x0225B5A8 LDR X8, [X28 + 0x40]
	0x0225B5AC CBZ X8, 0x225B9FC
	0x0225B5B0 MOV X22, X8
	0x0225B5B4 ADRP X0, 0x1E99000
	0x0225B5B8 LDR X0, [X0 + 0x1B0]
	0x0225B5BC BL 0x1C16D08
	0x0225B5C0 MOV X1, X0
	0x0225B5C4 LDR X8, [X22]
	0x0225B5C8 LDRH W9, [X8 + 0x12E]
	0x0225B5CC CBZ X9, 0x225B5F0
	0x0225B5D0 LDR X10, [X8 + 0xB0]
	0x0225B5D4 ADD X10, X10, 0x8
	0x0225B5D8 LDUR X11, [X10 - 0x8]
	0x0225B5DC CMP X11, X1
	0x0225B5E0 B.EQ 0x225B600
	0x0225B5E4 SUBS X9, X9, 0x1
	0x0225B5E8 ADD X10, X10, 0x10
	0x0225B5EC B.NE 0x225B5D8
	0x0225B5F0 MOVZ W2, 0x1
	0x0225B5F4 MOV X0, X22
	0x0225B5F8 BL 0x1C5C788
	0x0225B5FC B 0x225B610
	0x0225B600 LDR W9, [X10]
	0x0225B604 ADD W9, W9, 0x1
	0x0225B608 ADD X8, X8, W9, 0x4, SXTW
	0x0225B60C ADD X0, X8, 0x138
	0x0225B610 LDP X8, X1, [X0]
	0x0225B614 MOV X0, X22
	0x0225B618 BLR X8
	0x0225B61C MOV X22, X0
	0x0225B620 CBZ X0, 0x225B638
	0x0225B624 ADRP X0, 0x1EC1000
	0x0225B628 LDR X0, [X0 + 0x5E0]
	0x0225B62C BL 0x1C16D08
	0x0225B630 STR X0, [X31 + 0x18]
	0x0225B634 B 0x225B658
	0x0225B638 ADRP X0, 0x1EC1000
	0x0225B63C LDR X0, [X0 + 0x5E0]
	0x0225B640 BL 0x1C16D08
	0x0225B644 STR X0, [X31 + 0x18]
	0x0225B648 ADRP X0, 0x1E98000
	0x0225B64C LDR X0, [X0 + 0x988]
	0x0225B650 BL 0x1C16D08
	0x0225B654 MOV X22, X0
	0x0225B658 ADRP X0, 0x1E98000
	0x0225B65C LDR X0, [X0 + 0x710]
	0x0225B660 BL 0x1C16D08
	0x0225B664 MOV X3, X0
	0x0225B668 LDP X1, X0, [X31 + 0x18]
	0x0225B66C MOV X2, X22
	0x0225B670 BL 0x2AA5098
	0x0225B674 LDR X0, [X28 + 0x10]
	0x0225B678 CBZ X0, 0x225BA00
	0x0225B67C MOV X1, X31
	0x0225B680 BL 0x33C4268
	0x0225B684 CBZ X0, 0x225BA04
	0x0225B688 LDR X8, [X0]
	0x0225B68C LDP X9, X1, [X8 + 0x1C8]
	0x0225B690 BLR X9
	0x0225B694 CBZ X0, 0x225BA08
	0x0225B698 LDR X8, [X0]
	0x0225B69C LDR X1, [X8 + 0x2F0]
	0x0225B6A0 LDR X9, [X8 + 0x2E8]
	0x0225B6A4 BLR X9
	0x0225B6A8 MOV X22, X0
	0x0225B6AC LDR X0, [X28 + 0x10]
	0x0225B6B0 CBZ X0, 0x225BA0C
	0x0225B6B4 MOV X1, X31
	0x0225B6B8 BL 0x33C4268
	0x0225B6BC CBZ X0, 0x225BA10
	0x0225B6C0 LDR X8, [X0]
	0x0225B6C4 LDP X9, X1, [X8 + 0x1A8]
	0x0225B6C8 BLR X9
	0x0225B6CC MOV X28, X0
	0x0225B6D0 ADRP X0, 0x1EA1000
	0x0225B6D4 LDR X0, [X0 + 0x790]
	0x0225B6D8 BL 0x1C16D08
	0x0225B6DC MOV X1, X0
	0x0225B6E0 MOV X0, X22
	0x0225B6E4 MOV X2, X28
	0x0225B6E8 MOV X3, X31
	0x0225B6EC BL 0x32274B8
	0x0225B6F0 MOV X22, X0
	0x0225B6F4 ADRP X0, 0x1EC1000
	0x0225B6F8 LDR X0, [X0 + 0x5E8]
	0x0225B6FC BL 0x1C16D08
	0x0225B700 MOV X28, X0
	0x0225B704 ADRP X0, 0x1E98000
	0x0225B708 LDR X0, [X0 + 0x710]
	0x0225B70C BL 0x1C16D08
	0x0225B710 MOV X3, X0
	0x0225B714 LDR X0, [X31 + 0x20]
	0x0225B718 MOV X1, X28
	0x0225B71C MOV X2, X22
	0x0225B720 BL 0x2AA5098
	0x0225B724 LDR X8, [X31 + 0x28]
	0x0225B728 CBZ X8, 0x225BA14
	0x0225B72C ADRP X0, 0x1EC1000
	0x0225B730 LDR X0, [X0 + 0x5F0]
	0x0225B734 BL 0x1C16D08
	0x0225B738 MOV X28, X0
	0x0225B73C ADRP X0, 0x1EC1000
	0x0225B740 LDR X0, [X0 + 0x5F8]
	0x0225B744 BL 0x1C16D08
	0x0225B748 STR X0, [X31 + 0x18]
	0x0225B74C ADRP X0, 0x1EC1000
	0x0225B750 LDR X0, [X0 + 0x600]
	0x0225B754 BL 0x1C16D08
	0x0225B758 STR X0, [X31 + 0x8]
	0x0225B75C LDR X8, [X31 + 0x28]
	0x0225B760 LDR X8, [X8]
	0x0225B764 LDRH W9, [X8 + 0x12E]
	0x0225B768 CBZ X9, 0x225B78C
	0x0225B76C LDR X10, [X8 + 0xB0]
	0x0225B770 ADD X10, X10, 0x8
	0x0225B774 LDUR X11, [X10 - 0x8]
	0x0225B778 CMP X11, X28
	0x0225B77C B.EQ 0x225B7A0
	0x0225B780 SUBS X9, X9, 0x1
	0x0225B784 ADD X10, X10, 0x10
	0x0225B788 B.NE 0x225B774
	0x0225B78C LDR X0, [X31 + 0x28]
	0x0225B790 MOVZ W2, 0x6
	0x0225B794 MOV X1, X28
	0x0225B798 BL 0x1C5C788
	0x0225B79C B 0x225B7B0
	0x0225B7A0 LDR W9, [X10]
	0x0225B7A4 ADD W9, W9, 0x6
	0x0225B7A8 ADD X8, X8, W9, 0x4, SXTW
	0x0225B7AC ADD X0, X8, 0x138
	0x0225B7B0 LDP X8, X7, [X0]
	0x0225B7B4 LDP X3, X0, [X31 + 0x20]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 32
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X27+40]
	017 Move X19, X2
	018 Move X21, X0
	019 Move X20, X1
	020 Move [X29-8], X8
	021 Move X28, [X2+56]
	022 Move [X29-32], X1
	023 Compare X28, 0
	024 JumpIfNotEqual {34}
	025 Move X0, 0x1E99000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move X28, [X19+56]
	029 Compare X28, 0
	030 JumpIfNotEqual {34}
	031 Move X0, X19
	032 Call 0x1C5D6E0
	033 Move X28, [X19+56]
	034 Move X0, [X28]
	035 Add X8, X0, 309
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move W22, [X0+252]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {49}
	042 Call 0x1C5D684
	043 Move X28, [X19+56]
	044 Move X8, X0
	045 Move W9, [X8+252]
	046 Move X0, [X28]
	047 Add X8, X0, 309
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move W9, W22
	050 Add W9, W9, 16
	051 Add X9, X9, 15
	052 Add X10, X31, 0
	053 And X9, X9, 0x1FFFFFFFF
	054 Subtract X25, X10, X9
	055 Add X31, X25, 0
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {62}
	060 Call 0x1C5D684
	061 Move X28, [X19+56]
	062 Move W8, [X0+252]
	063 Add X9, X31, 0
	064 Add W8, W8, 16
	065 Add X8, X8, 15
	066 And X8, X8, 0x1FFFFFFFF
	067 Subtract X26, X9, X8
	068 Add X31, X26, 0
	069 Add X9, X22, 15
	070 Add X8, X31, 0
	071 And X9, X9, 0x1FFFFFFFF
	072 Subtract X24, X8, X9
	073 Add X31, X24, 0
	074 Add X8, X31, 0
	075 Subtract X23, X8, X9
	076 Add X31, X23, 0
	077 Move X0, X23
	078 Move W1, W31
	079 Move X2, X22
	080 Call 0x3EB2B10
	081 Move X0, X23
	082 Move W1, W31
	083 Move X2, X22
	084 Call 0x3EB2B10
	085 Move X0, [X28]
	086 Move W20, [X21+20]
	087 Move W8, [X0+309]
	088 Move TEMP, X8
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfEqual {94}
	092 Call 0x1C5D684
	093 Move X28, [X19+56]
	094 Move X1, [X28+8]
	095 Subtract X5, X29, 16
	096 Move X2, X25
	097 Move X3, X23
	098 Move X4, X31
	099 Call 0x1C18728
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 Move X0, [X19+56]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X1, [X0+16]
	104 Move X0, X23
	105 Move X8, [X1]
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move X25, X0
	108 Move X0, X21
	109 Move X1, X31
	110 Call StateEvent.get_state, X0
	111 Move X26, X0
	112 Move X0, X21
	113 Move X1, X31
	114 Call StateEvent.get_stateSizeInBytes, X0
	115 Move X8, [X19+56]
	116 Move W19, W0
	117 Move X8, [X8+32]
	118 Move X9, [X8]
	119 Move X0, X8
	120 NotImplemented "Instruction BLR not yet implemented."
	121 Move X8, 0x1E99000
	122 Move X8, [X8+1448]
	123 Move W21, W0
	124 Move X8, [X8]
	125 Move W9, [X8+224]
	126 Compare W9, 0
	127 JumpIfNotEqual {130}
	128 Move X0, X8
	129 Call 0x1C17DFC
	130 Move W0, W19
	131 Move X1, W21
	132 Move X2, X31
	133 Call Math.Min, X0, X1
	134 Move X2, X0
	135 Move X0, X25
	136 Move X1, X26
	137 Move X3, X31
	138 Call UnsafeUtility.MemCpy, X0, X1, X2
	139 Move X0, X24
	140 Move X1, X23
	141 Move X2, X22
	142 Call 0x3EB2AC0
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 Move X1, X24
	145 Move X2, X22
	146 Call 0x3EB2AC0
	147 Move X8, [X27+40]
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Add X31, X29, 0
	151 Move X20, [X31+80]
	152 Move X19, [X31+88]
	153 Move X22, [X31+64]
	154 Move X21, [X31+72]
	155 Move X24, [X31+48]
	156 Move X23, [X31+56]
	157 Move X26, [X31+32]
	158 Move X25, [X31+40]
	159 Move X28, [X31+16]
	160 Move X27, [X31+24]
	161 Move X29, [X31+96]
	162 Move X30, [X31+104]
	163 Return X0
	164 Move W1, W31
	165 Call 0x199C988
	166 Move X8, [X19+56]
	167 Move X2, X26
	168 Move X3, X23
	169 Move X1, [X8+8]
	170 Call 0x199DD38
	171 Move [X29-16], W0
	172 Move X20, 0x1EC1000
	173 Move X20, [X20+3368]
	174 Move X0, X20
	175 Call 0x1C17D08
	176 Subtract X1, X29, 16
	177 Call 0x1C17E04
	178 Move W8, [X21+20]
	179 Move X22, X0
	180 Move X0, X20
	181 Move [X29-24], W8
	182 Call 0x1C17D08
	183 Subtract X1, X29, 24
	184 Call 0x1C17E04
	185 Move X20, X0
	186 Move X0, 0x1EC2000
	187 Move X0, [X0+1328]
	188 Call 0x1C17D08
	189 Move X1, X22
	190 Move X2, X20
	191 Move X3, X31
	192 Call String.Format, X0, X1, X2
	193 Move X20, X0
	194 Move X0, 0x1E99000
	195 Move X0, [X0+1456]
	196 Call 0x1C17D08
	197 Call 0x1C17F10
	198 Move X1, X20
	199 Move X2, X31
	200 Move X21, X0
	201 Call InvalidOperationException..ctor, X0, X1
	202 Move X0, X21
	203 Move X1, X19
	204 Call 0x1C17DEC
	205 Call 0x3EB2B20

Method: TState GetState(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)

Disassembly:
	0x0225B7B8 LDP X1, X4, [X31 + 0x10]
	0x0225B7BC LDR X5, [X31 + 0x8]
	0x0225B7C0 LDR X22, [X31 + 0x40]
	0x0225B7C4 MOVZ W6, 0x199
	0x0225B7C8 MOV X2, X21
	0x0225B7CC BLR X8
	0x0225B7D0 B 0x225B3B4
	0x0225B7D4 MOV X23, X31
	0x0225B7D8 MOVZ W21, 0x19
	0x0225B7DC LDR X0, [X25]
	0x0225B7E0 LDR W8, [X0 + 0xE0]
	0x0225B7E4 CBNZ W8, 0x225B7EC
	0x0225B7E8 BL 0x1C16DFC
	0x0225B7EC ADRP X8, 0x1EC1000
	0x0225B7F0 LDR X8, [X8 + 0x550]
	0x0225B7F4 ADD X0, X31, 0x70
	0x0225B7F8 LDR X1, [X8]
	0x0225B7FC BL 0x2BC5018
	0x0225B800 CBNZ X23, 0x225B9D8
	0x0225B804 CMP W21, 0x19
	0x0225B808 B.EQ 0x225B810
	0x0225B80C CBNZ W21, 0x225B8E8
	0x0225B810 LDR W8, [X31 + 0x34]
	0x0225B814 MOV X0, X20
	0x0225B818 MOV X1, X22
	0x0225B81C MOV X2, X31
	0x0225B820 STRB W8, [X20 + 0x60]
	0x0225B824 LDR W8, [X31 + 0x38]
	0x0225B828 STRB W8, [X20 + 0x10]
	0x0225B82C BL 0x35C7B40
	0x0225B830 LDR W8, [X31 + 0x3C]
	0x0225B834 AND W8, W8, 0xFF
	0x0225B838 CMP W8, 0x6
	0x0225B83C B.NE 0x225B8E8
	0x0225B840 LDR X0, [X31 + 0xB8]
	0x0225B844 CBZ X0, 0x225B920
	0x0225B848 ADRP X8, 0x1EC1000
	0x0225B84C LDR X8, [X8 + 0x590]
	0x0225B850 LDR X1, [X8]
	0x0225B854 ADD X8, X31, 0x48
	0x0225B858 BL 0x2DBE924
	0x0225B85C LDUR V0, [X31 + 0x48]
	0x0225B860 LDR X8, [X31 + 0x58]
	0x0225B864 ADRP X21, 0x1EC1000
	0x0225B868 STR V0, [X31 + 0xA]
	0x0225B86C STR X8, [X31 + 0xB0]
	0x0225B870 LDR X21, [X21 + 0x598]
	0x0225B874 LDR X1, [X29]
	0x0225B878 ADD X0, X31, 0xA0
	0x0225B87C BL 0x2BC3C64
	0x0225B880 TBZ X0, 0x0, 0x225B8B8
	0x0225B884 LDR X22, [X31 + 0xB0]

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Add X29, X31, 0
	010 Subtract X31, X31, 16
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X8, [X24+40]
	013 Move X20, X2
	014 Move X19, X1
	015 Move X21, X0
	016 Move [X29-8], X8
	017 Move X8, [X2+56]
	018 Compare X8, 0
	019 JumpIfNotEqual {23}
	020 Move X0, X20
	021 Call 0x1C5D6E0
	022 Move X8, [X20+56]
	023 Move X8, [X8+8]
	024 Move W22, [X8+252]
	025 Add X8, X31, 0
	026 Add X9, X22, 15
	027 And X9, X9, 0x1FFFFFFFF
	028 Subtract X23, X8, X9
	029 Add X31, X23, 0
	030 Move X0, X21
	031 Move X1, X31
	032 Call StateEvent.From, X0
	033 Move X8, [X20+56]
	034 Move X2, X0
	035 Subtract X3, X29, 16
	036 Move X4, X23
	037 Move X1, [X8]
	038 Move X8, [X1]
	039 Move [X29-16], X23
	040 Move X9, [X1+16]
	041 Move X0, X8
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X0, X19
	044 Move X1, X23
	045 Move X2, X22
	046 Call 0x3EB2AC0
	047 Move X8, [X24+40]
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X31, X29, 0
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X22, [X31+32]
	054 Move X21, [X31+40]
	055 Move X24, [X31+16]
	056 Move X23, [X31+24]
	057 Move X29, [X31+64]
	058 Move X30, [X31+72]
	059 Return X0
	060 Call 0x3EB2B20

Method: System.Int32 GetEventSizeWithPayload()

Disassembly:
	0x0225B48C LDR X22, [X31 + 0x40]
	0x0225B490 CMP X8, 0x0
	0x0225B494 CSEL X9, X9, X8, EQ
	0x0225B498 STR X9, [X31 + 0x28]
	0x0225B49C CBZ X8, 0x225B3B4
	0x0225B4A0 LDR X22, [X28 + 0x40]
	0x0225B4A4 CBZ X22, 0x225B9F0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfNotEqual {6}
	005 Call 0x1C5D6E0
	006 Move W0, 80
	007 Move X30, [X31+16]
	008 Return X0

Method: UnityEngine.InputSystem.LowLevel.StateEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)

Disassembly:
	0x03803B50 ADRP X28, 0x947000
	0x03803B54 ADRP X29, 0x8F0000
	0x03803B58 LDR X27, [X27 + 0xE18]
	0x03803B5C LDR X28, [X28 + 0x230]
	0x03803B60 LDR X29, [X29 + 0x618]
	0x03803B64 LDR X8, [X22]
	0x03803B68 LDR X1, [X27]
	0x03803B6C LDRH W9, [X8 + 0x12E]
	0x03803B70 CBZ X9, 0x3803B94
	0x03803B74 LDR X10, [X8 + 0xB0]
	0x03803B78 ADD X10, X10, 0x8
	0x03803B7C LDUR X11, [X10 - 0x8]
	0x03803B80 CMP X11, X1
	0x03803B84 B.EQ 0x3803BA4
	0x03803B88 SUBS X9, X9, 0x1
	0x03803B8C ADD X10, X10, 0x10
	0x03803B90 B.NE 0x3803B7C
	0x03803B94 MOV X0, X22
	0x03803B98 MOV W2, W31
	0x03803B9C BL 0x1C5C788
	0x03803BA0 B 0x3803BB0
	0x03803BA4 LDRSW X9, [X10]
	0x03803BA8 ADD X8, X8, X9, 0x4, LSL
	0x03803BAC ADD X0, X8, 0x138
	0x03803BB0 LDP X8, X1, [X0]
	0x03803BB4 MOV X0, X22
	0x03803BB8 BLR X8
	0x03803BBC TBZ X0, 0x0, 0x3803CA4
	0x03803BC0 LDR X8, [X22]
	0x03803BC4 LDR X1, [X28]
	0x03803BC8 LDRH W9, [X8 + 0x12E]
	0x03803BCC CBZ X9, 0x3803BF0
	0x03803BD0 LDR X10, [X8 + 0xB0]
	0x03803BD4 ADD X10, X10, 0x8
	0x03803BD8 LDUR X11, [X10 - 0x8]
	0x03803BDC CMP X11, X1
	0x03803BE0 B.EQ 0x3803C00
	0x03803BE4 SUBS X9, X9, 0x1
	0x03803BE8 ADD X10, X10, 0x10
	0x03803BEC B.NE 0x3803BD8
	0x03803BF0 MOV X0, X22
	0x03803BF4 MOV W2, W31
	0x03803BF8 BL 0x1C5C788
	0x03803BFC B 0x3803C0C
	0x03803C00 LDRSW X9, [X10]
	0x03803C04 ADD X8, X8, X9, 0x4, LSL
	0x03803C08 ADD X0, X8, 0x138
	0x03803C0C LDP X8, X1, [X0]
	0x03803C10 MOV X0, X22
	0x03803C14 BLR X8
	0x03803C18 MOV X23, X0
	0x03803C1C CBZ X0, 0x3803C28
	0x03803C20 LDRH W25, [X23 + 0x4]
	0x03803C24 B 0x3803C2C
	0x03803C28 MOV W25, W31
	0x03803C2C LDR X0, [X29]
	0x03803C30 MOV W1, W25
	0x03803C34 BL 0x1C16D6C
	0x03803C38 MOV X24, X0
	0x03803C3C CBZ X0, 0x3803C54
	0x03803C40 LDR W8, [X24 + 0x18]
	0x03803C44 ADD X9, X24, 0x20
	0x03803C48 CMP W8, 0x0
	0x03803C4C CSEL X0, X31, X9, EQ
	0x03803C50 B 0x3803C58
	0x03803C54 MOV X0, X31
	0x03803C58 MOV W2, W25
	0x03803C5C MOV X1, X23
	0x03803C60 MOV X3, X31
	0x03803C64 BL 0x3BFF954
	0x03803C68 LDR X8, [X21]
	0x03803C6C LDP X9, X2, [X8 + 0x1D8]
	0x03803C70 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X0
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBDF000
	007 Move W8, [X20+1094]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x944000
	014 Move X0, [X0+3408]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1094], W8
	018 Compare X19, 0
	019 JumpIfEqual {36}
	020 Move X8, 0x944000
	021 Move X8, [X8+3408]
	022 Add X0, X31, 24
	023 Move X1, [X8]
	024 Call InputEventPtr.IsA, X0
	025 Move X8, [X31+24]
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {54}
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X0, X8
	034 Add X31, X31, 48
	035 Return X0
	036 Move X0, 0x8F6000
	037 Move X0, [X0+1320]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0x920000
	042 Move X0, [X0+576]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call ArgumentNullException..ctor, X0, X1
	048 Move X0, 0x948000
	049 Move X0, [X0+448]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Compare X8, 0
	055 JumpIfEqual {57}
	056 Move W8, [X8]
	057 Move [X31+8], W8
	058 Move X0, 0x919000
	059 Move X0, [X0+3368]
	060 Call 0x1C17D08
	061 Add X1, X31, 8
	062 Call 0x1C17E04
	063 Move X19, X0
	064 Move X0, 0x948000
	065 Move X0, [X0+456]
	066 Call 0x1C17D08
	067 Move X1, X19
	068 Move X2, X31
	069 Call String.Format, X0, X1
	070 Move X19, X0
	071 Move X0, 0x8F9000
	072 Move X0, [X0+3080]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X1, X19
	076 Move X2, X31
	077 Move X20, X0
	078 Call InvalidCastException..ctor, X0, X1
	079 Move X0, 0x948000
	080 Move X0, [X0+448]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X20
	084 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.StateEvent* FromUnchecked(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)

Disassembly:
	0x038039AC LDR X0, [X0 + 0x238]

ISIL:
	001 Return X0

Method: Unity.Collections.NativeArray`1<System.Byte> From(UnityEngine.InputSystem.InputDevice device, out UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, Unity.Collections.Allocator allocator = 2)

Disassembly:
	0x038082B0 B 0x3C866DC
	0x038082B4 LDR X0, [X0 + 0x18]

ISIL:
	001 Move W3, W31

Method: Unity.Collections.NativeArray`1<System.Byte> FromDefaultStateFor(UnityEngine.InputSystem.InputDevice device, out UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, Unity.Collections.Allocator allocator = 2)

Disassembly:
	0x038085E8 STR X30, [X31 + 0x8]
	0x038085EC MOV X0, X31

ISIL:
	001 Move W3, 1
	002 Call StateEvent.From, X0, X1, X2, X3
	003 Return X0

Method: Unity.Collections.NativeArray`1<System.Byte> From(UnityEngine.InputSystem.InputDevice device, out UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, Unity.Collections.Allocator allocator, System.Boolean useDefaultState)

Disassembly:
	0x038082B8 RET
	0x038082BC STP X30, X21, [X31 - 0x20]!
	0x038082C0 STP X20, X19, [X31 + 0x10]
	0x038082C4 ADRP X21, 0xBD9000
	0x038082C8 LDRB W8, [X21 + 0x457]
	0x038082CC MOV X19, X1
	0x038082D0 MOV X20, X0
	0x038082D4 TBNZ X8, 0x0, 0x3808304
	0x038082D8 ADRP X0, 0x8EC000
	0x038082DC LDR X0, [X0 + 0xE70]
	0x038082E0 BL 0x1C16CF4
	0x038082E4 ADRP X0, 0x8EB000
	0x038082E8 LDR X0, [X0 + 0x970]
	0x038082EC BL 0x1C16CF4
	0x038082F0 ADRP X0, 0x942000
	0x038082F4 LDR X0, [X0 + 0x480]
	0x038082F8 BL 0x1C16CF4
	0x038082FC MOVZ W8, 0x1
	0x03808300 STRB W8, [X21 + 0x457]
	0x03808304 CBZ X19, 0x3808364
	0x03808308 LDR X8, [X20 + 0x18]
	0x0380830C CBNZ X8, 0x38083B4
	0x03808310 ADRP X8, 0x8EC000
	0x03808314 LDR X8, [X8 + 0xE70]
	0x03808318 LDR X0, [X8]
	0x0380831C BL 0x1C16F10
	0x03808320 ADRP X8, 0x942000
	0x03808324 LDR X8, [X8 + 0x480]
	0x03808328 MOV X1, X20
	0x0380832C MOV X3, X31
	0x03808330 MOV X21, X0
	0x03808334 LDR X2, [X8]
	0x03808338 BL 0x3314368
	0x0380833C ADRP X8, 0x8EB000
	0x03808340 LDR X8, [X8 + 0x970]
	0x03808344 LDR X0, [X8]
	0x03808348 LDR W8, [X0 + 0xE0]
	0x0380834C CBNZ W8, 0x3808354
	0x03808350 BL 0x1C16DFC
	0x03808354 MOV X0, X21
	0x03808358 MOV X1, X31
	0x0380835C BL 0x3C028D0
	0x03808360 B 0x38083B4
	0x03808364 ADRP X8, 0x8EC000
	0x03808368 LDR X8, [X8 + 0xE70]
	0x0380836C LDR X0, [X8]
	0x03808370 BL 0x1C16F10
	0x03808374 ADRP X8, 0x942000
	0x03808378 LDR X8, [X8 + 0x480]
	0x0380837C MOV X1, X20
	0x03808380 MOV X3, X31
	0x03808384 MOV X21, X0
	0x03808388 LDR X2, [X8]
	0x0380838C BL 0x3314368
	0x03808390 ADRP X8, 0x8EB000
	0x03808394 LDR X8, [X8 + 0x970]
	0x03808398 LDR X0, [X8]
	0x0380839C LDR W8, [X0 + 0xE0]
	0x038083A0 CBNZ W8, 0x38083A8
	0x038083A4 BL 0x1C16DFC
	0x038083A8 MOV X0, X21
	0x038083AC MOV X1, X31
	0x038083B0 BL 0x3C029AC
	0x038083B4 STR X19, [X20 + 0x18]
	0x038083B8 LDP X20, X19, [X31 + 0x10]
	0x038083BC LDP X30, X21, [X31], #0x20
	0x038083C0 RET
	0x038083C4 LDR X0, [X0 + 0x40]
	0x038083C8 RET
	0x038083CC STP X30, X21, [X31 - 0x20]!
	0x038083D0 STP X20, X19, [X31 + 0x10]
	0x038083D4 ADRP X21, 0xBD9000
	0x038083D8 LDRB W8, [X21 + 0x458]
	0x038083DC MOV X19, X1
	0x038083E0 MOV X20, X0
	0x038083E4 TBNZ X8, 0x0, 0x3808414
	0x038083E8 ADRP X0, 0x8EB000
	0x038083EC LDR X0, [X0 + 0xD28]
	0x038083F0 BL 0x1C16CF4
	0x038083F4 ADRP X0, 0x8EB000
	0x038083F8 LDR X0, [X0 + 0x970]
	0x038083FC BL 0x1C16CF4
	0x03808400 ADRP X0, 0x942000
	0x03808404 LDR X0, [X0 + 0x488]
	0x03808408 BL 0x1C16CF4
	0x0380840C MOVZ W8, 0x1
	0x03808410 STRB W8, [X21 + 0x458]
	0x03808414 CBZ X19, 0x3808474
	0x03808418 LDR X8, [X20 + 0x40]
	0x0380841C CBNZ X8, 0x38084C4
	0x03808420 ADRP X8, 0x8EB000
	0x03808424 LDR X8, [X8 + 0xD28]
	0x03808428 LDR X0, [X8]
	0x0380842C BL 0x1C16F10
	0x03808430 ADRP X8, 0x942000
	0x03808434 LDR X8, [X8 + 0x488]
	0x03808438 MOV X1, X20
	0x0380843C MOV X3, X31
	0x03808440 MOV X21, X0
	0x03808444 LDR X2, [X8]
	0x03808448 BL 0x29818C8
	0x0380844C ADRP X8, 0x8EB000
	0x03808450 LDR X8, [X8 + 0x970]
	0x03808454 LDR X0, [X8]
	0x03808458 LDR W8, [X0 + 0xE0]
	0x0380845C CBNZ W8, 0x3808464
	0x03808460 BL 0x1C16DFC
	0x03808464 MOV X0, X21
	0x03808468 MOV X1, X31
	0x0380846C BL 0x3C026E8
	0x03808470 B 0x38084C4
	0x03808474 ADRP X8, 0x8EB000
	0x03808478 LDR X8, [X8 + 0xD28]
	0x0380847C LDR X0, [X8]
	0x03808480 BL 0x1C16F10
	0x03808484 ADRP X8, 0x942000
	0x03808488 LDR X8, [X8 + 0x488]
	0x0380848C MOV X1, X20
	0x03808490 MOV X3, X31
	0x03808494 MOV X21, X0
	0x03808498 LDR X2, [X8]
	0x0380849C BL 0x29818C8
	0x038084A0 ADRP X8, 0x8EB000
	0x038084A4 LDR X8, [X8 + 0x970]
	0x038084A8 LDR X0, [X8]
	0x038084AC LDR W8, [X0 + 0xE0]
	0x038084B0 CBNZ W8, 0x38084B8
	0x038084B4 BL 0x1C16DFC
	0x038084B8 MOV X0, X21
	0x038084BC MOV X1, X31
	0x038084C0 BL 0x3C027DC
	0x038084C4 STR X19, [X20 + 0x40]
	0x038084C8 LDP X20, X19, [X31 + 0x10]
	0x038084CC LDP X30, X21, [X31], #0x20
	0x038084D0 RET
	0x038084D4 STR X30, [X31 - 0x20]!
	0x038084D8 STP X20, X19, [X31 + 0x10]
	0x038084DC ADRP X19, 0xBD9000
	0x038084E0 ADRP X20, 0x8EB000
	0x038084E4 LDRB W8, [X19 + 0x459]
	0x038084E8 LDR X20, [X20 + 0x970]
	0x038084EC TBNZ X8, 0x0, 0x3808504
	0x038084F0 ADRP X0, 0x8EB000
	0x038084F4 LDR X0, [X0 + 0x970]
	0x038084F8 BL 0x1C16CF4
	0x038084FC MOVZ W8, 0x1
	0x03808500 STRB W8, [X19 + 0x459]
	0x03808504 LDR X0, [X20]
	0x03808508 LDR W8, [X0 + 0xE0]
	0x0380850C CBNZ W8, 0x3808514
	0x03808510 BL 0x1C16DFC
	0x03808514 LDP X20, X19, [X31 + 0x10]
	0x03808518 MOV X0, X31
	0x0380851C LDR X30, [X31], #0x20
	0x03808520 B 0x3C0190C
	0x03808524 LDR V0, [X0 + 0x38]
	0x03808528 RET
	0x0380852C STR D8, [X31 - 0x30]!
	0x03808530 STP X30, X21, [X31 + 0x10]
	0x03808534 STP X20, X19, [X31 + 0x20]
	0x03808538 ADRP X21, 0xBD9000
	0x0380853C ADRP X20, 0x942000
	0x03808540 LDRB W8, [X21 + 0x45A]
	0x03808544 LDR X20, [X20 + 0x420]
	0x03808548 MOV V8.16B, V0.16B
	0x0380854C MOV X19, X0
	0x03808550 TBNZ X8, 0x0, 0x3808568
	0x03808554 ADRP X0, 0x942000
	0x03808558 LDR X0, [X0 + 0x420]
	0x0380855C BL 0x1C16CF4
	0x03808560 MOVZ W8, 0x1
	0x03808564 STRB W8, [X21 + 0x45A]
	0x03808568 STR S8, [X19 + 0x38]
	0x0380856C LDR X0, [X20]
	0x03808570 LDR W8, [X0 + 0xE0]
	0x03808574 CBNZ W8, 0x380857C
	0x03808578 BL 0x1C16DFC
	0x0380857C LDP X20, X19, [X31 + 0x20]
	0x03808580 LDP X30, X21, [X31 + 0x10]
	0x03808584 MOV V0.16B, V8.16B
	0x03808588 MOV X0, X31
	0x0380858C LDR V8, [X31], #0x30
	0x03808590 B 0x3C86B14
	0x03808594 STR X30, [X31 - 0x20]!
	0x03808598 STP X20, X19, [X31 + 0x10]
	0x0380859C ADRP X19, 0xBD9000
	0x038085A0 ADRP X20, 0x942000
	0x038085A4 LDRB W8, [X19 + 0x45B]
	0x038085A8 LDR X20, [X20 + 0x420]
	0x038085AC TBNZ X8, 0x0, 0x38085C4
	0x038085B0 ADRP X0, 0x942000
	0x038085B4 LDR X0, [X0 + 0x420]
	0x038085B8 BL 0x1C16CF4
	0x038085BC MOVZ W8, 0x1
	0x038085C0 STRB W8, [X19 + 0x45B]
	0x038085C4 LDR X0, [X20]
	0x038085C8 LDR W8, [X0 + 0xE0]
	0x038085CC CBNZ W8, 0x38085D4
	0x038085D0 BL 0x1C16DFC
	0x038085D4 LDP X20, X19, [X31 + 0x10]
	0x038085D8 MOV X0, X31
	0x038085DC LDR X30, [X31], #0x20
	0x038085E0 B 0x3C86A04
	0x038085E4 STR D8, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X28+40]
	016 Move X19, 0xBDA000
	017 Move W22, W3
	018 Move W23, W2
	019 Move [X31+56], X8
	020 Move W8, [X19+1095]
	021 Move X20, X1
	022 Move X21, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {44}
	027 Move X0, 0x914000
	028 Move X0, [X0+3792]
	029 Call 0x1C17CF4
	030 Move X0, 0x914000
	031 Move X0, [X0+3784]
	032 Call 0x1C17CF4
	033 Move X0, 0x914000
	034 Move X0, [X0+3352]
	035 Call 0x1C17CF4
	036 Move X0, 0x940000
	037 Move X0, [X0+4072]
	038 Call 0x1C17CF4
	039 Move X0, 0x940000
	040 Move X0, [X0+4064]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X19+1095], W8
	044 Compare X21, 0
	045 JumpIfEqual {187}
	046 Move X0, X21
	047 Move X1, X31
	048 Call InputDevice.get_added, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {205}
	053 Move [X31+8], X20
	054 Move X8, 0x914000
	055 Move X8, [X8+3352]
	056 Add X20, X21, 16
	057 Move X0, [X8]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X24, 0x940000
	063 Move X27, 0x940000
	064 Move X26, 0x914000
	065 Move W29, [X21+16]
	066 Move X24, [X24+4064]
	067 Move X27, [X27+4072]
	068 Move X26, [X26+3784]
	069 Move X0, X20
	070 Call InputStateBlock.get_alignedSizeInBytes, X0
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 Move W20, W0
	073 Move TEMP, X22
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {91}
	077 Move X22, 0xBD4000
	078 Move W8, [X22+2563]
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x917000
	082 Move X0, [X0+4072]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X22+2563], W8
	086 Move X8, 0x917000
	087 Move X8, [X8+4072]
	088 Move X8, [X8]
	089 Move X8, [X8+184]
	090 Move X22, [X8]
	091 Move X0, X21
	092 Move X1, X31
	093 Call InputControl.get_currentStatePtr, X0
	094 Move X22, X0
	095 Move X4, [X24]
	096 Add W8, W20, 28
	097 Add W25, W20, 24
	098 And W31, W20, 3
	099 And W8, W8, 0xFFFFFFFC
	100 NotImplemented "Instruction CSEL not yet implemented."
	101 Add X0, X31, 16
	102 Move W3, 1
	103 Move W2, W23
	104 Move [X31+16], X31
	105 Move [X31+24], X31
	106 Call NativeArray`1<Byte>..ctor, X0, X1, X2, X3
	107 Move X23, [X31+16]
	108 Move X24, [X31+24]
	109 Move X2, [X27]
	110 Move X0, X23
	111 Move X1, X24
	112 Call 0x2223688, X0
	113 Move X8, [X26]
	114 Move X8, [X8+184]
	115 Move X27, [X8]
	116 Compare X27, 0
	117 JumpIfEqual {186}
	118 Move X10, 0x914000
	119 Move X8, [X27]
	120 Move X10, [X10+3792]
	121 Move W21, [X21+224]
	122 Move X26, X0
	123 NotImplemented "Instruction LDRH not yet implemented."
	124 Move X1, [X10]
	125 Compare X9, 0
	126 JumpIfEqual {133}
	127 Move X10, [X8+176]
	128 Add X10, X10, 8
	129 NotImplemented "Instruction LDUR not yet implemented."
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Subtract X9, X9, 1
	132 Add X10, X10, 16
	133 Move W2, 19
	134 Move X0, X27
	135 Call 0x1C5D788
	136 Move W9, [X10]
	137 Add W9, W9, 19
	138 Add X8, X8, W9
	139 Add X0, X8, 312
	140 Move X8, [X0]
	141 Move X1, [X0+8]
	142 Move X0, X27
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move W1, 0x4154
	145 Add X0, X31, 32
	146 NotImplemented "Instruction MOVK not yet implemented."
	147 Move W2, W25
	148 Move W3, W21
	149 Move [X31+32], X31
	150 Move [X31+40], X31
	151 Move [X31+48], W31
	152 Call InputEvent..ctor, X0, X1, X2, X3, V0
	153 Compare X26, 0
	154 JumpIfEqual {186}
	155 Move V0, [X31+2]
	156 Move W8, [X31+48]
	157 Add X1, X22, X19
	158 Add X0, X26, 24
	159 Move W2, W20
	160 Move X3, X31
	161 Move [X26], V0
	162 Move [X26+16], W8
	163 Move [X26+20], W29
	164 Call UnsafeUtility.MemCpy, X0, X1, X2
	165 Move X8, [X31+8]
	166 Move [X8], X26
	167 Move X8, [X28+40]
	168 Move X9, [X31+56]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move X0, X23
	171 Move X1, X24
	172 Move X20, [X31+144]
	173 Move X19, [X31+152]
	174 Move X22, [X31+128]
	175 Move X21, [X31+136]
	176 Move X24, [X31+112]
	177 Move X23, [X31+120]
	178 Move X26, [X31+96]
	179 Move X25, [X31+104]
	180 Move X28, [X31+80]
	181 Move X27, [X31+88]
	182 Move X29, [X31+64]
	183 Move X30, [X31+72]
	184 Add X31, X31, 160
	185 Return X0
	186 Call 0x1C17F20
	187 Move X0, 0x8F1000
	188 Move X0, [X0+1320]
	189 Call 0x1C17D08
	190 Call 0x1C17F10
	191 Move X19, X0
	192 Move X0, 0x914000
	193 Move X0, [X0+3360]
	194 Call 0x1C17D08
	195 Move X1, X0
	196 Move X0, X19
	197 Move X2, X31
	198 Call ArgumentNullException..ctor, X0, X1
	199 Move X0, 0x943000
	200 Move X0, [X0+1016]
	201 Call 0x1C17D08
	202 Move X1, X0
	203 Move X0, X19
	204 Call 0x1C17DEC
	205 Move X0, 0x943000
	206 Move X0, [X0+1024]
	207 Call 0x1C17D08
	208 Move X1, X21
	209 Move X2, X31
	210 Call String.Format, X0, X1
	211 Move X19, X0
	212 Move X0, 0x8F4000
	213 Move X0, [X0+1400]
	214 Call 0x1C17D08
	215 Call 0x1C17F10
	216 Move X20, X0
	217 Move X0, 0x914000
	218 Move X0, [X0+3360]
	219 Call 0x1C17D08
	220 Move X2, X0
	221 Move X0, X20
	222 Move X1, X19
	223 Move X3, X31
	224 Call ArgumentException..ctor, X0, X1, X2
	225 Move X0, 0x943000
	226 Move X0, [X0+1016]
	227 Call 0x1C17D08
	228 Move X1, X0
	229 Move X0, X20
	230 Call 0x1C17DEC
	231 Call 0x3EB2B20

