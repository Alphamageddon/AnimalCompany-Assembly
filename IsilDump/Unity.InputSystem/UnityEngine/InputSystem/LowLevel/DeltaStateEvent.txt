Type: UnityEngine.InputSystem.LowLevel.DeltaStateEvent

Method: System.UInt32 get_deltaStateSizeInBytes()

Disassembly:
	0x038016BC MOV X1, X0
	0x038016C0 MOV X0, X20
	0x038016C4 BL 0x1C16DEC

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Subtract W0, W8, 28
	003 Return X0

Method: System.Void* get_deltaState()

Disassembly:
	0x038016C8 STP X30, X21, [X31 - 0x20]!
	0x038016CC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Add X0, X0, 28
	002 Return X0

Method: UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()

Disassembly:
	0x038016D0 ADRP X21, 0xBE0000
	0x038016D4 LDRB W8, [X21 + 0x414]
	0x038016D8 MOV X19, X1

ISIL:
	001 Move W0, 0x5441
	002 NotImplemented "Instruction MOVK not yet implemented."
	003 Return X0

Method: UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr()

Disassembly:
	0x038016DC MOV X20, X0

ISIL:
	001 Return X0

Method: UnityEngine.InputSystem.LowLevel.DeltaStateEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)

Disassembly:
	0x038016E0 TBNZ X8, 0x0, 0x38016F8
	0x038016E4 ADRP X0, 0x949000
	0x038016E8 LDR X0, [X0 + 0xC8]
	0x038016EC BL 0x1C16CF4
	0x038016F0 MOVZ W8, 0x1
	0x038016F4 STRB W8, [X21 + 0x414]
	0x038016F8 CBZ X19, 0x3801720
	0x038016FC LDR X8, [X20 + 0x10]
	0x03801700 CBZ X8, 0x3801720
	0x03801704 ADRP X8, 0x949000
	0x03801708 LDP X0, X1, [X20]
	0x0380170C LDR X8, [X8 + 0xC8]
	0x03801710 LDR X2, [X8]
	0x03801714 BL 0x2222670
	0x03801718 CMP X0, X19
	0x0380171C B.LS 0x3801728
	0x03801720 MOV W0, W31
	0x03801724 B 0x3801744
	0x03801728 LDR X8, [X20 + 0x10]
	0x0380172C ADDS X31, X8, 0x1
	0x03801730 ADD X8, X8, X0
	0x03801734 CSET W9, EQ
	0x03801738 CMP X8, X19
	0x0380173C CSET W8, HI
	0x03801740 ORR W0, W9, W8, 0x0
	0x03801744 LDP X20, X19, [X31 + 0x10]
	0x03801748 LDP X30, X21, [X31], #0x20
	0x0380174C RET
	0x03801750 STR X30, [X31 - 0x10]!
	0x03801754 CMP X0, X1
	0x03801758 B.EQ 0x380178C
	0x0380175C MOV W8, W31
	0x03801760 CBZ X0, 0x3801798
	0x03801764 CBZ X1, 0x3801798
	0x03801768 LDRH W2, [X0 + 0x4]
	0x0380176C LDRH W8, [X1 + 0x4]
	0x03801770 CMP W2, W8
	0x03801774 B.NE 0x3801794
	0x03801778 MOV X3, X31
	0x0380177C BL 0x3C001FC
	0x03801780 CMP W0, 0x0
	0x03801784 CSET W8, EQ
	0x03801788 B 0x3801798
	0x0380178C MOVZ W8, 0x1
	0x03801790 B 0x3801798
	0x03801794 MOV W8, W31
	0x03801798 MOV W0, W8
	0x0380179C LDR X30, [X31], #0x10
	0x038017A0 RET
	0x038017A4 LDR W0, [X0 + 0x18]
	0x038017A8 RET
	0x038017AC LDR X0, [X0 + 0x10]
	0x038017B0 RET
	0x038017B4 STR X30, [X31 - 0x20]!
	0x038017B8 STP X20, X19, [X31 + 0x10]
	0x038017BC ADRP X20, 0xBE0000
	0x038017C0 LDRB W8, [X20 + 0x40F]
	0x038017C4 MOV X19, X0
	0x038017C8 TBNZ X8, 0x0, 0x38017E0
	0x038017CC ADRP X0, 0x948000
	0x038017D0 LDR X0, [X0 + 0x6A0]
	0x038017D4 BL 0x1C16CF4
	0x038017D8 MOVZ W8, 0x1
	0x038017DC STRB W8, [X20 + 0x40F]
	0x038017E0 LDR X8, [X19]
	0x038017E4 CBZ X8, 0x38017F0
	0x038017E8 LDRSW X0, [X19 + 0x8]
	0x038017EC B 0x38017F4
	0x038017F0 MOV X0, X31
	0x038017F4 LDP X20, X19, [X31 + 0x10]
	0x038017F8 LDR X30, [X31], #0x20
	0x038017FC RET
	0x03801800 LDP X8, X1, [X0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X0
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBE1000
	007 Move W8, [X20+1031]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x94A000
	014 Move X0, [X0+104]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1031], W8
	018 Compare X19, 0
	019 JumpIfEqual {36}
	020 Move X8, 0x94A000
	021 Move X8, [X8+104]
	022 Add X0, X31, 24
	023 Move X1, [X8]
	024 Call InputEventPtr.IsA, X0
	025 Move X8, [X31+24]
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {54}
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X0, X8
	034 Add X31, X31, 48
	035 Return X0
	036 Move X0, 0x8F8000
	037 Move X0, [X0+1320]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0x922000
	042 Move X0, [X0+576]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call ArgumentNullException..ctor, X0, X1
	048 Move X0, 0x94A000
	049 Move X0, [X0+112]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Compare X8, 0
	055 JumpIfEqual {57}
	056 Move W8, [X8]
	057 Move [X31+8], W8
	058 Move X0, 0x91B000
	059 Move X0, [X0+3368]
	060 Call 0x1C17D08
	061 Add X1, X31, 8
	062 Call 0x1C17E04
	063 Move X19, X0
	064 Move X0, 0x94A000
	065 Move X0, [X0+120]
	066 Call 0x1C17D08
	067 Move X1, X19
	068 Move X2, X31
	069 Call String.Format, X0, X1
	070 Move X19, X0
	071 Move X0, 0x8FB000
	072 Move X0, [X0+3080]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X1, X19
	076 Move X2, X31
	077 Move X20, X0
	078 Call InvalidCastException..ctor, X0, X1
	079 Move X0, 0x94A000
	080 Move X0, [X0+112]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X20
	084 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.DeltaStateEvent* FromUnchecked(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)

Disassembly:
	0x03801804 MOV X0, X8

ISIL:
	001 Return X0

Method: Unity.Collections.NativeArray`1<System.Byte> From(UnityEngine.InputSystem.InputControl control, out UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, Unity.Collections.Allocator allocator = 2)

Disassembly:
	0x03801808 RET
	0x0380180C STP X30, X21, [X31 - 0x20]!
	0x03801810 STP X20, X19, [X31 + 0x10]
	0x03801814 ADRP X21, 0xBE0000
	0x03801818 ADRP X20, 0x949000
	0x0380181C LDRB W8, [X21 + 0x410]
	0x03801820 LDR X20, [X20 + 0xC8]
	0x03801824 MOV X19, X0
	0x03801828 TBNZ X8, 0x0, 0x3801840
	0x0380182C ADRP X0, 0x949000
	0x03801830 LDR X0, [X0 + 0xC8]
	0x03801834 BL 0x1C16CF4
	0x03801838 MOVZ W8, 0x1
	0x0380183C STRB W8, [X21 + 0x410]
	0x03801840 LDP X0, X1, [X19]
	0x03801844 LDR X2, [X20]
	0x03801848 LDP X20, X19, [X31 + 0x10]
	0x0380184C LDP X30, X21, [X31], #0x20
	0x03801850 B 0x2222670
	0x03801854 RET
	0x03801858 STR X30, [X31 - 0x40]!
	0x0380185C STP X24, X23, [X31 + 0x10]
	0x03801860 STP X22, X21, [X31 + 0x20]
	0x03801864 STP X20, X19, [X31 + 0x30]
	0x03801868 ADRP X24, 0xBE0000
	0x0380186C LDRB W8, [X24 + 0x411]
	0x03801870 MOV W23, W4
	0x03801874 MOV W19, W3
	0x03801878 MOV W20, W2
	0x0380187C MOV X22, X1
	0x03801880 MOV X21, X0
	0x03801884 TBNZ X8, 0x0, 0x380189C
	0x03801888 ADRP X0, 0x949000
	0x0380188C LDR X0, [X0 + 0xD0]
	0x03801890 BL 0x1C16CF4
	0x03801894 MOVZ W8, 0x1
	0x03801898 STRB W8, [X24 + 0x411]
	0x0380189C MOVI V0.2D, 0x0
	0x038018A0 STP V0, V0, [X21]
	0x038018A4 CBZ W20, 0x38018AC
	0x038018A8 CBZ X22, 0x3801910
	0x038018AC CBZ W23, 0x38018B8
	0x038018B0 CMP W23, W19
	0x038018B4 B.LT 0x380196C
	0x038018B8 CBZ X22, 0x38018FC
	0x038018BC ADRP X8, 0x949000
	0x038018C0 LDR X8, [X8 + 0xD0]
	0x038018C4 CMP W23, 0x0
	0x038018C8 MOVZ W2, 0x1
	0x038018CC MOV X0, X22
	0x038018D0 LDR X3, [X8]
	0x038018D4 CSEL W8, W23, W19, GE
	0x038018D8 BIC W1, W8, W8, 0x1F
	0x038018DC BL 0x2222394
	0x038018E0 CMP W19, 0x0
	0x038018E4 CSINV W8, W19, W31, GE
	0x038018E8 SXTW X8, W8
	0x038018EC STP X0, X1, [X21]
	0x038018F0 STR W20, [X21 + 0x18]
	0x038018F4 STR X8, [X21 + 0x10]
	0x038018F8 STRB W31, [X21 + 0x1C]
	0x038018FC LDP X20, X19, [X31 + 0x30]
	0x03801900 LDP X22, X21, [X31 + 0x20]
	0x03801904 LDP X24, X23, [X31 + 0x10]
	0x03801908 LDR X30, [X31], #0x40
	0x0380190C RET
	0x03801910 ADRP X0, 0x8FA000
	0x03801914 LDR X0, [X0 + 0x578]
	0x03801918 BL 0x1C16D08
	0x0380191C BL 0x1C16F10
	0x03801920 MOV X19, X0
	0x03801924 ADRP X0, 0x949000
	0x03801928 LDR X0, [X0 + 0xD8]
	0x0380192C BL 0x1C16D08
	0x03801930 MOV X20, X0
	0x03801934 ADRP X0, 0x949000
	0x03801938 LDR X0, [X0 + 0xE0]
	0x0380193C BL 0x1C16D08
	0x03801940 MOV X2, X0
	0x03801944 MOV X0, X19
	0x03801948 MOV X1, X20
	0x0380194C MOV X3, X31
	0x03801950 BL 0x330E16C
	0x03801954 ADRP X0, 0x949000
	0x03801958 LDR X0, [X0 + 0xE8]
	0x0380195C BL 0x1C16D08
	0x03801960 MOV X1, X0
	0x03801964 MOV X0, X19
	0x03801968 BL 0x1C16DEC
	0x0380196C STR W23, [X31 + 0xC]
	0x03801970 ADRP X20, 0x8F2000
	0x03801974 LDR X20, [X20 + 0x758]
	0x03801978 MOV X0, X20
	0x0380197C BL 0x1C16D08
	0x03801980 ADD X1, X31, 0xC
	0x03801984 BL 0x1C16E04
	0x03801988 MOV X21, X0
	0x0380198C MOV X0, X20
	0x03801990 STR W19, [X31 + 0x8]
	0x03801994 BL 0x1C16D08
	0x03801998 ADD X1, X31, 0x8
	0x0380199C BL 0x1C16E04
	0x038019A0 MOV X19, X0
	0x038019A4 ADRP X0, 0x949000
	0x038019A8 LDR X0, [X0 + 0xF0]
	0x038019AC BL 0x1C16D08
	0x038019B0 MOV X1, X21
	0x038019B4 MOV X2, X19
	0x038019B8 MOV X3, X31
	0x038019BC BL 0x3227BD4
	0x038019C0 MOV X19, X0
	0x038019C4 ADRP X0, 0x8FA000
	0x038019C8 LDR X0, [X0 + 0x578]
	0x038019CC BL 0x1C16D08
	0x038019D0 BL 0x1C16F10
	0x038019D4 MOV X20, X0
	0x038019D8 ADRP X0, 0x949000
	0x038019DC LDR X0, [X0 + 0xF8]
	0x038019E0 BL 0x1C16D08
	0x038019E4 MOV X2, X0
	0x038019E8 MOV X0, X20
	0x038019EC MOV X1, X19
	0x038019F0 MOV X3, X31
	0x038019F4 BL 0x330E16C
	0x038019F8 ADRP X0, 0x949000
	0x038019FC LDR X0, [X0 + 0xE8]
	0x03801A00 BL 0x1C16D08
	0x03801A04 MOV X1, X0
	0x03801A08 MOV X0, X20
	0x03801A0C BL 0x1C16DEC
	0x03801A10 STP X30, X25, [X31 - 0x40]!
	0x03801A14 STP X24, X23, [X31 + 0x10]
	0x03801A18 STP X22, X21, [X31 + 0x20]
	0x03801A1C STP X20, X19, [X31 + 0x30]
	0x03801A20 ADRP X25, 0xBE0000
	0x03801A24 LDRB W8, [X25 + 0x412]
	0x03801A28 MOV W23, W5
	0x03801A2C MOV W20, W4
	0x03801A30 MOV W19, W3
	0x03801A34 MOV X21, X2
	0x03801A38 MOV X24, X1
	0x03801A3C MOV X22, X0
	0x03801A40 TBNZ X8, 0x0, 0x3801A58
	0x03801A44 ADRP X0, 0x948000
	0x03801A48 LDR X0, [X0 + 0x6A0]
	0x03801A4C BL 0x1C16CF4
	0x03801A50 MOVZ W8, 0x1
	0x03801A54 STRB W8, [X25 + 0x412]
	0x03801A58 CMP W19, 0x1
	0x03801A5C B.LT 0x3801A64
	0x03801A60 CBZ X24, 0x3801AA0
	0x03801A64 CMP W21, W20
	0x03801A68 B.LT 0x3801AE8
	0x03801A6C AND W8, W23, 0x1
	0x03801A70 CMP W20, 0x0
	0x03801A74 STRB W8, [X22 + 0x1C]
	0x03801A78 CSEL W8, W20, W21, GE
	0x03801A7C SXTW X8, W8
	0x03801A80 STP X24, X21, [X22]
	0x03801A84 STR X8, [X22 + 0x10]
	0x03801A88 STR W19, [X22 + 0x18]
	0x03801A8C LDP X20, X19, [X31 + 0x30]
	0x03801A90 LDP X22, X21, [X31 + 0x20]
	0x03801A94 LDP X24, X23, [X31 + 0x10]
	0x03801A98 LDP X30, X25, [X31], #0x40
	0x03801A9C RET
	0x03801AA0 ADRP X0, 0x8FA000
	0x03801AA4 LDR X0, [X0 + 0x578]
	0x03801AA8 BL 0x1C16D08
	0x03801AAC BL 0x1C16F10
	0x03801AB0 MOV X19, X0
	0x03801AB4 ADRP X0, 0x949000
	0x03801AB8 LDR X0, [X0 + 0x100]
	0x03801ABC BL 0x1C16D08
	0x03801AC0 MOV X20, X0
	0x03801AC4 ADRP X0, 0x949000
	0x03801AC8 LDR X0, [X0 + 0xE0]
	0x03801ACC BL 0x1C16D08
	0x03801AD0 MOV X2, X0
	0x03801AD4 MOV X0, X19
	0x03801AD8 MOV X1, X20
	0x03801ADC MOV X3, X31
	0x03801AE0 BL 0x330E16C
	0x03801AE4 B 0x3801B18
	0x03801AE8 ADRP X0, 0x8FA000
	0x03801AEC LDR X0, [X0 + 0x760]
	0x03801AF0 BL 0x1C16D08
	0x03801AF4 BL 0x1C16F10
	0x03801AF8 MOV X19, X0
	0x03801AFC ADRP X0, 0x949000
	0x03801B00 LDR X0, [X0 + 0x108]
	0x03801B04 BL 0x1C16D08
	0x03801B08 MOV X1, X0
	0x03801B0C MOV X0, X19
	0x03801B10 MOV X2, X31
	0x03801B14 BL 0x3316014
	0x03801B18 ADRP X0, 0x949000
	0x03801B1C LDR X0, [X0 + 0x110]
	0x03801B20 BL 0x1C16D08
	0x03801B24 MOV X1, X0
	0x03801B28 MOV X0, X19
	0x03801B2C BL 0x1C16DEC
	0x03801B30 STR X30, [X31 - 0x20]!
	0x03801B34 STP X20, X19, [X31 + 0x10]
	0x03801B38 CBZ X1, 0x3801B64
	0x03801B3C LDRH W20, [X1 + 0x4]
	0x03801B40 MOV X19, X1
	0x03801B44 MOV W1, W20
	0x03801B48 BL 0x3801BAC
	0x03801B4C MOV X1, X19
	0x03801B50 MOV X2, X20
	0x03801B54 LDP X20, X19, [X31 + 0x10]
	0x03801B58 MOV X3, X31
	0x03801B5C LDR X30, [X31], #0x20
	0x03801B60 B 0x3BFF954
	0x03801B64 ADRP X0, 0x8F7000
	0x03801B68 LDR X0, [X0 + 0x528]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X29
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X25+40]
	016 Move X19, 0xBE1000
	017 Move W23, W2
	018 Move X24, X1
	019 Move [X31+72], X8
	020 Move W8, [X19+1032]
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0x91B000
	027 Move X0, [X0+3792]
	028 Call 0x1C17CF4
	029 Move X0, 0x91B000
	030 Move X0, [X0+3784]
	031 Call 0x1C17CF4
	032 Move X0, 0x91B000
	033 Move X0, [X0+3352]
	034 Call 0x1C17CF4
	035 Move X0, 0x947000
	036 Move X0, [X0+4072]
	037 Call 0x1C17CF4
	038 Move X0, 0x947000
	039 Move X0, [X0+4064]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X19+1032], W8
	043 Compare X20, 0
	044 JumpIfEqual {205}
	045 Move X21, [X20+120]
	046 Compare X21, 0
	047 JumpIfEqual {204}
	048 Move X0, X21
	049 Move X1, X31
	050 Call InputDevice.get_added, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {223}
	055 Move X19, 0x91B000
	056 Move X19, [X19+3352]
	057 Move [X31+16], X25
	058 Move [X31+24], X24
	059 Move X0, [X19]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfEqual {75}
	063 Move W8, [X20+24]
	064 Move W9, [X21+16]
	065 Move [X31+12], W9
	066 Compare W8, 0
	067 JumpIfEqual {85}
	068 Move W8, [X20+24]
	069 Move W9, [X20+28]
	070 Add W8, W8, W9
	071 Add W8, W8, 7
	072 Move W22, W8
	073 ShiftRight W22, 3
	074 And W22, W22, 0x7FFFFFFF
	075 Call 0x1C17DFC
	076 Move X0, [X19]
	077 Move W9, [X21+16]
	078 Move W22, [X20+24]
	079 Move W8, [X0+224]
	080 Move [X31+12], W9
	081 Compare W8, 0
	082 JumpIfEqual {201}
	083 Compare W22, 0
	084 JumpIfNotEqual {68}
	085 Add X0, X20, 16
	086 Call InputStateBlock.get_alignedSizeInBytes, X0
	087 Move W22, W0
	088 Move X0, [X19]
	089 Move X24, 0x947000
	090 Move X28, 0x947000
	091 Move X27, 0x91B000
	092 Move W8, [X0+224]
	093 Move X24, [X24+4064]
	094 Move X28, [X28+4072]
	095 Move X27, [X27+3784]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 NotImplemented "Instruction LDRSW not yet implemented."
	100 Move X0, X20
	101 Move X1, X31
	102 Call InputControl.get_currentStatePtr, X0
	103 Move X4, [X24]
	104 Add W8, W22, 32
	105 Add W26, W22, 28
	106 And W31, W22, 3
	107 And W8, W8, 0xFFFFFFFC
	108 Move X25, X0
	109 NotImplemented "Instruction CSEL not yet implemented."
	110 Add X0, X31, 32
	111 Move W3, 1
	112 Move W2, W23
	113 Move [X31+32], X31
	114 Move [X31+40], X31
	115 Call NativeArray`1<Byte>..ctor, X0, X1, X2, X3
	116 Move X23, [X31+32]
	117 Move X24, [X31+40]
	118 Move X2, [X28]
	119 Move X0, X23
	120 Move X1, X24
	121 Call 0x2223688, X0
	122 Move X8, [X27]
	123 Move X8, [X8+184]
	124 Move X29, [X8]
	125 Compare X29, 0
	126 JumpIfEqual {204}
	127 Move X10, 0x91B000
	128 Move X8, [X29]
	129 Move X10, [X10+3792]
	130 Move W28, [X21+224]
	131 Move X27, X0
	132 NotImplemented "Instruction LDRH not yet implemented."
	133 Move X1, [X10]
	134 Compare X9, 0
	135 JumpIfEqual {142}
	136 Move X10, [X8+176]
	137 Add X10, X10, 8
	138 NotImplemented "Instruction LDUR not yet implemented."
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Subtract X9, X9, 1
	141 Add X10, X10, 16
	142 Move W2, 19
	143 Move X0, X29
	144 Call 0x1C5D788
	145 Move W9, [X10]
	146 Add W9, W9, 19
	147 Add X8, X8, W9
	148 Add X0, X8, 312
	149 Move X8, [X0]
	150 Move X1, [X0+8]
	151 Move X0, X29
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Move W1, 0x5441
	154 Add X0, X31, 48
	155 NotImplemented "Instruction MOVK not yet implemented."
	156 Move W2, W26
	157 Move W3, W28
	158 Move [X31+48], X31
	159 Move [X31+56], X31
	160 Move [X31+64], W31
	161 Call InputEvent..ctor, X0, X1, X2, X3, V0
	162 Compare X27, 0
	163 JumpIfEqual {204}
	164 Move V0, [X31+3]
	165 Move W9, [X31+64]
	166 Move W8, [X31+12]
	167 Add X1, X25, X19
	168 Move [X27], V0
	169 Add X0, X27, 28
	170 Move [X27+16], W9
	171 Move [X27+20], W8
	172 Move W8, [X20+20]
	173 Move W9, [X21+20]
	174 Move W2, W22
	175 Move X3, X31
	176 Subtract W8, W8, W9
	177 Move [X27+24], W8
	178 Call UnsafeUtility.MemCpy, X0, X1, X2
	179 Move X8, [X31+24]
	180 Move [X8], X27
	181 Move X8, [X31+16]
	182 Move X8, [X8+40]
	183 Move X9, [X31+72]
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X0, X23
	186 Move X1, X24
	187 Move X20, [X31+160]
	188 Move X19, [X31+168]
	189 Move X22, [X31+144]
	190 Move X21, [X31+152]
	191 Move X24, [X31+128]
	192 Move X23, [X31+136]
	193 Move X26, [X31+112]
	194 Move X25, [X31+120]
	195 Move X28, [X31+96]
	196 Move X27, [X31+104]
	197 Move X29, [X31+80]
	198 Move X30, [X31+88]
	199 Add X31, X31, 176
	200 Return X0
	201 Call 0x1C17DFC
	202 Compare W22, 0
	203 JumpIfNotEqual {68}
	204 Call 0x1C17F20
	205 Move X0, 0x8F8000
	206 Move X0, [X0+1320]
	207 Call 0x1C17D08
	208 Call 0x1C17F10
	209 Move X19, X0
	210 Move X0, 0x91B000
	211 Move X0, [X0+3424]
	212 Call 0x1C17D08
	213 Move X1, X0
	214 Move X0, X19
	215 Move X2, X31
	216 Call ArgumentNullException..ctor, X0, X1
	217 Move X0, 0x94A000
	218 Move X0, [X0+128]
	219 Call 0x1C17D08
	220 Move X1, X0
	221 Move X0, X19
	222 Call 0x1C17DEC
	223 Move X0, 0x94A000
	224 Move X0, [X0+136]
	225 Call 0x1C17D08
	226 Move X1, X20
	227 Move X2, X31
	228 Call String.Format, X0, X1
	229 Move X19, X0
	230 Move X0, 0x8FB000
	231 Move X0, [X0+1400]
	232 Call 0x1C17D08
	233 Call 0x1C17F10
	234 Move X20, X0
	235 Move X0, 0x91B000
	236 Move X0, [X0+3424]
	237 Call 0x1C17D08
	238 Move X2, X0
	239 Move X0, X20
	240 Move X1, X19
	241 Move X3, X31
	242 Call ArgumentException..ctor, X0, X1, X2
	243 Move X0, 0x94A000
	244 Move X0, [X0+128]
	245 Call 0x1C17D08
	246 Move X1, X0
	247 Move X0, X20
	248 Call 0x1C17DEC
	249 Call 0x3EB2B20

