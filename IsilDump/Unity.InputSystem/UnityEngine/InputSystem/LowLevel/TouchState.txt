Type: UnityEngine.InputSystem.LowLevel.TouchState

Method: UnityEngine.InputSystem.Utilities.FourCC get_Format()

Disassembly:
	0x03800EC0 MOVZ W2, 0x84
	0x03800EC4 MOV W1, W31
	0x03800EC8 STR V0, [X31 + 0xA]
	0x03800ECC STR W8, [X31 + 0xB0]
	0x03800ED0 BL 0x3EB1B10
	0x03800ED4 ADD X0, X31, 0x0
	0x03800ED8 MOV X1, X19
	0x03800EDC BL 0x3800F2C
	0x03800EE0 ADD X8, X31, 0xA0
	0x03800EE4 ADD X0, X8, 0x14
	0x03800EE8 ADD X1, X31, 0x0
	0x03800EEC MOVZ W2, 0x84

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 84
	004 Move W2, 79
	005 Move W3, 85
	006 Move W4, 67
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: UnityEngine.InputSystem.TouchPhase get_phase()

Disassembly:
	0x03800EF0 BL 0x3EB1AC0
	0x03800EF4 ADD X1, X31, 0xA0

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_phase(UnityEngine.InputSystem.TouchPhase value)

Disassembly:
	0x037FB840 STP X31, X31, [X31 + 0x80]
	0x037FB844 STR X31, [X31 + 0x90]

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Boolean get_isNoneEndedOrCanceled()

Disassembly:
	0x03800EF8 MOVZ W2, 0x98
	0x03800EFC MOV X0, X20
	0x03800F00 BL 0x3EB1AC0
	0x03800F04 LDR X8, [X21 + 0x28]
	0x03800F08 LDR X9, [X31 + 0x138]
	0x03800F0C CMP X8, X9
	0x03800F10 B.NE 0x3800F28
	0x03800F14 LDP X20, X19, [X31 + 0x160]
	0x03800F18 LDP X30, X21, [X31 + 0x150]

ISIL:
	001 Move W8, [X0+32]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W9, 25
	004 NotImplemented "Instruction LSRV not yet implemented."
	005 And W0, W8, 1
	006 Return X0
	007 Move W0, W31
	008 Return X0

Method: System.Boolean get_isInProgress()

Disassembly:
	0x03800F1C LDR X29, [X31 + 0x140]
	0x03800F20 ADD X31, X31, 0x170
	0x03800F24 RET
	0x03800F28 BL 0x3EB1B20
	0x03800F2C STR X30, [X31 - 0x30]!
	0x03800F30 STP X22, X21, [X31 + 0x10]
	0x03800F34 STP X20, X19, [X31 + 0x20]
	0x03800F38 MOV X20, X1
	0x03800F3C MOV X19, X0
	0x03800F40 MOV X0, X1

ISIL:
	001 Move W8, [X0+32]
	002 Subtract W8, W8, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, 19
	005 NotImplemented "Instruction LSRV not yet implemented."
	006 And W0, W8, 1
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Boolean get_isPrimaryTouch()

Disassembly:
	0x037FD7D8 MOV X0, X19
	0x037FD7DC BL 0x1C16DEC
	0x037FD7E0 MOV X1, X31

ISIL:
	001 Move W8, [X0+35]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: System.Void set_isPrimaryTouch(System.Boolean value)

Disassembly:
	0x037FD7B8 MOV X1, X0
	0x037FD7BC MOV X0, X19
	0x037FD7C0 MOV X2, X31
	0x037FD7C4 BL 0x330E100
	0x037FD7C8 ADRP X0, 0x94C000
	0x037FD7CC LDR X0, [X0 + 0xF18]
	0x037FD7D0 BL 0x1C16D08
	0x037FD7D4 MOV X1, X0

ISIL:
	001 Move W8, [X0+35]
	002 And W31, W1, 1
	003 Move W9, 8
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFF7
	006 Or W8, W8, W9
	007 Move [X0+35], W8
	008 Return 

Method: System.Boolean get_isOrphanedPrimaryTouch()

Disassembly:
	0x03800F44 MOV X1, X31
	0x03800F48 BL 0x32277A8
	0x03800F4C TBZ X0, 0x0, 0x3800F58

ISIL:
	001 Move W8, [X0+35]
	002 Move W0, W8
	003 ShiftRight W0, 6
	004 And W0, W0, 63
	005 Return X0

Method: System.Void set_isOrphanedPrimaryTouch(System.Boolean value)

Disassembly:
	0x03800F50 STR W31, [X19]
	0x03800F54 B 0x3800F98
	0x03800F58 CBZ X20, 0x3800FA8
	0x03800F5C LDR W8, [X20 + 0x10]
	0x03800F60 CMP W8, 0x1
	0x03800F64 STR W8, [X19]
	0x03800F68 B.LT 0x3800F98
	0x03800F6C MOV X21, X31

ISIL:
	001 Move W8, [X0+35]
	002 And W31, W1, 1
	003 Move W9, 64
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFBF
	006 Or W8, W8, W9
	007 Move [X0+35], W8
	008 Return 

Method: System.Boolean get_isIndirectTouch()

Disassembly:
	0x03800F70 ADD X22, X19, 0x4
	0x03800F74 MOV X0, X20
	0x03800F78 MOV W1, W21

ISIL:
	001 Move W8, [X0+35]
	002 And W0, W8, 1
	003 Return X0

Method: System.Void set_isIndirectTouch(System.Boolean value)

Disassembly:
	0x03800F7C MOV X2, X31
	0x03800F80 BL 0x3222A1C
	0x03800F84 STRH W0, [X22], #0x2
	0x03800F88 LDRSW X8, [X19]

ISIL:
	001 Move W8, [X0+35]
	002 NotImplemented "Instruction BFM not yet implemented."
	003 Move [X0+35], W8
	004 Return 

Method: System.Boolean get_isTap()

Disassembly:
	0x037F9F04 ADRP X22, 0x8FA000
	0x037F9F08 MOVZ W1, 0x6
	0x037F9F0C LDR X0, [X8]

ISIL:
	001 Move W8, [X0+35]
	002 Move W0, W8
	003 ShiftRight W0, 4
	004 And W0, W0, 15
	005 Return X0

Method: System.Void set_isTap(System.Boolean value)

Disassembly:
	0x037FD7E4 B 0x33BDD8C
	0x037FD7E8 STR X30, [X31 - 0x20]!
	0x037FD7EC STP X20, X19, [X31 + 0x10]
	0x037FD7F0 ADRP X20, 0xBE4000
	0x037FD7F4 ADRP X19, 0x94C000
	0x037FD7F8 LDRB W8, [X20 + 0x3F4]
	0x037FD7FC LDR X19, [X19 + 0xF20]
	0x037FD800 TBNZ X8, 0x0, 0x37FD818

ISIL:
	001 Move W8, [X0+35]
	002 And W31, W1, 1
	003 Move W9, 16
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFEF
	006 Or W8, W8, W9
	007 Move [X0+35], W8
	008 Return 

Method: System.Boolean get_isTapPress()

Disassembly:
	0x03800F8C ADD X21, X21, 0x1
	0x03800F90 CMP X21, X8
	0x03800F94 B.LT 0x3800F74

ISIL:
	001 Move W8, [X0+35]
	002 Move W0, W8
	003 ShiftRight W0, 4
	004 And W0, W0, 15
	005 Return X0

Method: System.Void set_isTapPress(System.Boolean value)

Disassembly:
	0x03800F98 LDP X20, X19, [X31 + 0x20]
	0x03800F9C LDP X22, X21, [X31 + 0x10]
	0x03800FA0 LDR X30, [X31], #0x30
	0x03800FA4 RET
	0x03800FA8 BL 0x1C16F20
	0x03800FAC LDR W0, [X0]
	0x03800FB0 RET
	0x03800FB4 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move W8, [X0+35]
	002 And W31, W1, 1
	003 Move W9, 16
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFEF
	006 Or W8, W8, W9
	007 Move [X0+35], W8
	008 Return 

Method: System.Boolean get_isTapRelease()

Disassembly:
	0x037F90CC ADRP X19, 0x922000
	0x037F90D0 LDRB W8, [X20 + 0x3C6]
	0x037F90D4 LDR X19, [X19 + 0x628]

ISIL:
	001 Move W8, [X0+35]
	002 Move W0, W8
	003 ShiftRight W0, 5
	004 And W0, W0, 31
	005 Return X0

Method: System.Void set_isTapRelease(System.Boolean value)

Disassembly:
	0x03800FB8 TBNZ X1, 0x1F, 0x3800FD8
	0x03800FBC LDR W8, [X0]
	0x03800FC0 CMP W8, W1
	0x03800FC4 B.LE 0x3800FD8
	0x03800FC8 ADD X8, X0, W1, 0x1, UXTW
	0x03800FCC LDRH W0, [X8 + 0x4]
	0x03800FD0 LDP X30, X19, [X31], #0x10
	0x03800FD4 RET

ISIL:
	001 Move W8, [X0+35]
	002 And W31, W1, 1
	003 Move W9, 32
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFDF
	006 Or W8, W8, W9
	007 Move [X0+35], W8
	008 Return 

Method: System.Boolean get_beganInSameFrame()

Disassembly:
	0x037F9364 MOV X1, X31
	0x037F9368 BL 0x380E804
	0x037F936C CMP W22, 0x1

ISIL:
	001 Move W8, [X0+35]
	002 Move W0, W8
	003 ShiftRight W0, 7
	004 And W0, W0, 0x7FFFFFFF
	005 Return X0

Method: System.Void set_beganInSameFrame(System.Boolean value)

Disassembly:
	0x037F9370 B.LT 0x37F96A0
	0x037F9374 LDR X8, [X31 + 0x20]
	0x037F9378 MOV W20, W31
	0x037F937C MOV W24, W31
	0x037F9380 SXTW X9, W0
	0x037F9384 LDR W8, [X8 + 0x4C]
	0x037F9388 STR X31, [X31 + 0x60]

ISIL:
	001 Move W8, [X0+35]
	002 And W31, W1, 1
	003 Move TEMP, 127
	004 Not TEMP
	005 Move W9, TEMP
	006 NotImplemented "Instruction CSEL not yet implemented."
	007 NotImplemented "Instruction BFM not yet implemented."
	008 Move [X0+35], W9
	009 Return 

Method: UnityEngine.InputSystem.Utilities.FourCC get_format()

Disassembly:
	0x03800FD8 ADRP X0, 0x8FB000
	0x03800FDC LDR X0, [X0 + 0x760]
	0x03800FE0 BL 0x1C16D08
	0x03800FE4 BL 0x1C16F10
	0x03800FE8 MOV X19, X0
	0x03800FEC ADRP X0, 0x8FE000
	0x03800FF0 LDR X0, [X0 + 0x130]
	0x03800FF4 BL 0x1C16D08
	0x03800FF8 MOV X1, X0
	0x03800FFC MOV X0, X19
	0x03801000 MOV X2, X31
	0x03801004 BL 0x3316014

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 84
	004 Move W2, 79
	005 Move W3, 85
	006 Move W4, 67
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: System.String ToString()

Disassembly:
	0x03801008 ADRP X0, 0x949000
	0x0380100C LDR X0, [X0 + 0x90]
	0x03801010 BL 0x1C16D08
	0x03801014 MOV X1, X0
	0x03801018 MOV X0, X19
	0x0380101C BL 0x1C16DEC
	0x03801020 MOV X1, X0
	0x03801024 LDR W3, [X1], #0x4
	0x03801028 MOV X0, X31
	0x0380102C MOV W2, W31
	0x03801030 MOV X4, X31
	0x03801034 B 0x322EAD4
	0x03801038 SUB X31, X31, 0xD0
	0x0380103C STR X30, [X31 + 0xA0]
	0x03801040 STP X22, X21, [X31 + 0xB0]
	0x03801044 STP X20, X19, [X31 + 0xC0]
	0x03801048 MRS X20, 0xC000
	0x0380104C LDR X8, [X20 + 0x28]
	0x03801050 ADRP X22, 0xBE0000
	0x03801054 ADRP X21, 0x949000
	0x03801058 MOV X19, X0
	0x0380105C STR X8, [X31 + 0x98]
	0x03801060 LDRB W8, [X22 + 0x409]
	0x03801064 LDR X21, [X21 + 0x98]
	0x03801068 TBNZ X8, 0x0, 0x3801080
	0x0380106C ADRP X0, 0x949000
	0x03801070 LDR X0, [X0 + 0x98]
	0x03801074 BL 0x1C16CF4
	0x03801078 MOVZ W8, 0x1
	0x0380107C STRB W8, [X22 + 0x409]
	0x03801080 ADD X0, X31, 0x8
	0x03801084 MOVZ W2, 0x84
	0x03801088 MOV X1, X19
	0x0380108C BL 0x3EB1AC0
	0x03801090 LDR X0, [X21]
	0x03801094 MOV X8, INVALID
	0x03801098 ADD X1, X31, 0x8
	0x0380109C STUR X8, [X31 + 0x8C]
	0x038010A0 BL 0x1C16E04
	0x038010A4 LDR X8, [X20 + 0x28]
	0x038010A8 LDR X9, [X31 + 0x98]
	0x038010AC CMP X8, X9
	0x038010B0 B.NE 0x38010C8
	0x038010B4 LDP X20, X19, [X31 + 0xC0]
	0x038010B8 LDP X22, X21, [X31 + 0xB0]
	0x038010BC LDR X30, [X31 + 0xA0]
	0x038010C0 ADD X31, X31, 0xD0
	0x038010C4 RET
	0x038010C8 BL 0x3EB1B20
	0x038010CC STP X30, X19, [X31 - 0x10]!
	0x038010D0 MOVZ W2, 0x84
	0x038010D4 MOV X19, X0
	0x038010D8 BL 0x3EB1B30
	0x038010DC MOVN W8, 0x0
	0x038010E0 STRH W31, [X19 + 0x84]
	0x038010E4 STR W8, [X19 + 0x88]
	0x038010E8 LDP X30, X19, [X31], #0x10
	0x038010EC RET
	0x038010F0 B 0x3801038
	0x038010F4 LDR W9, [X0 + 0x88]
	0x038010F8 LDR W8, [X0]
	0x038010FC ADD W9, W9, 0x1
	0x03801100 CMP W9, W8
	0x03801104 STR W9, [X0 + 0x88]
	0x03801108 B.EQ 0x3801118
	0x0380110C ADD X10, X0, W9, 0x1, SXTW
	0x03801110 LDRH W10, [X10 + 0x4]
	0x03801114 STRH W10, [X0 + 0x84]
	0x03801118 CMP W9, W8
	0x0380111C CSET W0, NE
	0x03801120 RET
	0x03801124 MOVN W8, 0x0
	0x03801128 STR W8, [X0 + 0x88]
	0x0380112C RET
	0x03801130 RET
	0x03801134 LDRH W0, [X0 + 0x84]
	0x03801138 RET
	0x0380113C SUB X31, X31, 0x30
	0x03801140 STP X30, X21, [X31 + 0x10]
	0x03801144 STP X20, X19, [X31 + 0x20]
	0x03801148 ADRP X21, 0xBE0000
	0x0380114C ADRP X20, 0x8F4000
	0x03801150 LDRB W8, [X21 + 0x40A]
	0x03801154 LDR X20, [X20 + 0x170]
	0x03801158 MOV X19, X0
	0x0380115C TBNZ X8, 0x0, 0x3801174
	0x03801160 ADRP X0, 0x8F4000
	0x03801164 LDR X0, [X0 + 0x170]
	0x03801168 BL 0x1C16CF4
	0x0380116C MOVZ W8, 0x1
	0x03801170 STRB W8, [X21 + 0x40A]
	0x03801174 LDRH W8, [X19 + 0x84]
	0x03801178 LDR X0, [X20]
	0x0380117C ADD X1, X31, 0xC
	0x03801180 STRH W8, [X31 + 0xC]
	0x03801184 BL 0x1C16E04
	0x03801188 LDP X20, X19, [X31 + 0x20]
	0x0380118C LDP X30, X21, [X31 + 0x10]
	0x03801190 ADD X31, X31, 0x30
	0x03801194 RET
	0x03801198 LDR W0, [X0]
	0x0380119C RET
	0x038011A0 STR W1, [X0]
	0x038011A4 RET
	0x038011A8 STR X30, [X31 - 0x20]!
	0x038011AC STP X20, X19, [X31 + 0x10]
	0x038011B0 CMP W1, 0x10000
	0x038011B4 B.CS 0x38011C8
	0x038011B8 LDP X20, X19, [X31 + 0x10]
	0x038011BC STRH W1, [X0 + 0x4]
	0x038011C0 LDR X30, [X31], #0x20
	0x038011C4 RET
	0x038011C8 MOVZ W8, 0xFFFF
	0x038011CC ADD X0, X31, 0xC
	0x038011D0 MOV X1, X31
	0x038011D4 STRH W8, [X31 + 0xC]
	0x038011D8 BL 0x3398CE4
	0x038011DC MOV X19, X0
	0x038011E0 ADRP X0, 0x949000
	0x038011E4 LDR X0, [X0 + 0xA0]
	0x038011E8 BL 0x1C16D08
	0x038011EC MOV X1, X19
	0x038011F0 MOV X2, X31
	0x038011F4 BL 0x321B938
	0x038011F8 MOV X19, X0
	0x038011FC ADRP X0, 0x8FA000
	0x03801200 LDR X0, [X0 + 0x578]
	0x03801204 BL 0x1C16D08
	0x03801208 BL 0x1C16F10
	0x0380120C MOV X20, X0
	0x03801210 ADRP X0, 0x8FC000
	0x03801214 LDR X0, [X0 + 0xEC8]
	0x03801218 BL 0x1C16D08
	0x0380121C MOV X2, X0
	0x03801220 MOV X0, X20
	0x03801224 MOV X1, X19
	0x03801228 MOV X3, X31
	0x0380122C BL 0x330E16C
	0x03801230 ADRP X0, 0x949000
	0x03801234 LDR X0, [X0 + 0xA8]
	0x03801238 BL 0x1C16D08
	0x0380123C MOV X1, X0
	0x03801240 MOV X0, X20
	0x03801244 BL 0x1C16DEC
	0x03801248 LDR W8, [X0 + 0x10]
	0x0380124C AND W0, W8, 0x7FFFFFFF
	0x03801250 RET
	0x03801254 LDR W8, [X0 + 0x10]
	0x03801258 AND W8, W8, 0x80000000
	0x0380125C ORR W8, W8, W1, 0x0
	0x03801260 STR W8, [X0 + 0x10]
	0x03801264 RET
	0x03801268 LDRH W0, [X0 + 0x6]
	0x0380126C RET
	0x03801270 STRH W1, [X0 + 0x6]
	0x03801274 RET
	0x03801278 STP X30, X21, [X31 - 0x20]!
	0x0380127C STP X20, X19, [X31 + 0x10]
	0x03801280 ADRP X21, 0xBE0000
	0x03801284 ADRP X20, 0x91A000
	0x03801288 LDRB W8, [X21 + 0x40B]
	0x0380128C LDR X20, [X20 + 0xEC8]
	0x03801290 MOV X19, X0
	0x03801294 TBNZ X8, 0x0, 0x38012AC
	0x03801298 ADRP X0, 0x91A000
	0x0380129C LDR X0, [X0 + 0xEC8]
	0x038012A0 BL 0x1C16CF4
	0x038012A4 MOVZ W8, 0x1
	0x038012A8 STRB W8, [X21 + 0x40B]
	0x038012AC LDR X8, [X20]
	0x038012B0 LDR V0, [X19 + 0x8]
	0x038012B4 LDP X20, X19, [X31 + 0x10]
	0x038012B8 LDR X8, [X8 + 0xB8]
	0x038012BC LDR V1, [X8 + 0x8]
	0x038012C0 FSUB D0, D0, D1
	0x038012C4 LDP X30, X21, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X20, 0xBE1000
	008 Move X22, 0x8F3000
	009 Move X21, 0x8F3000
	010 Move W8, [X20+1029]
	011 Move X22, [X22+2512]
	012 Move X21, [X21+1880]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0x8F3000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0x8F3000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0x8F3000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move X0, 0x8F3000
	028 Move X0, [X0+2704]
	029 Call 0x1C17CF4
	030 Move X0, 0x949000
	031 Move X0, [X0+3200]
	032 Call 0x1C17CF4
	033 Move X0, 0x8FB000
	034 Move X0, [X0+3848]
	035 Call 0x1C17CF4
	036 Move X0, 0x94A000
	037 Move X0, [X0+8]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+1029], W8
	041 Move X0, [X22]
	042 Move W1, 7
	043 Call 0x1C17D6C
	044 Move X20, X0
	045 Move W8, [X19]
	046 Move X0, [X21]
	047 Add X1, X31, 60
	048 Move [X31+60], W8
	049 Call 0x1C17E04
	050 Compare X20, 0
	051 JumpIfEqual {195}
	052 Move X21, X0
	053 Compare X0, 0
	054 JumpIfEqual {61}
	055 Move X8, [X20]
	056 Move X0, X21
	057 Move X1, [X8+64]
	058 Call 0x1C17E00
	059 Compare X0, 0
	060 JumpIfEqual {192}
	061 Move W8, [X20+24]
	062 Compare W8, 0
	063 JumpIfEqual {191}
	064 Move X8, 0x949000
	065 Move X8, [X8+3200]
	066 Move [X20+32], X21
	067 Move W9, [X19+32]
	068 Add X1, X31, 56
	069 Move X0, [X8]
	070 Move [X31+56], W9
	071 Call 0x1C17E04
	072 Move X21, X0
	073 Compare X0, 0
	074 JumpIfEqual {81}
	075 Move X8, [X20]
	076 Move X0, X21
	077 Move X1, [X8+64]
	078 Call 0x1C17E00
	079 Compare X0, 0
	080 JumpIfEqual {192}
	081 Move W8, [X20+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X22, 0x8FB000
	084 Move X22, [X22+3848]
	085 Move [X20+40], X21
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 Add X1, X31, 40
	088 Move X0, [X22]
	089 Move [X31+40], X8
	090 Call 0x1C17E04
	091 Move X21, X0
	092 Compare X0, 0
	093 JumpIfEqual {100}
	094 Move X8, [X20]
	095 Move X0, X21
	096 Move X1, [X8+64]
	097 Call 0x1C17E00
	098 Compare X0, 0
	099 JumpIfEqual {192}
	100 Move W8, [X20+24]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move [X20+48], X21
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Move X0, [X22]
	105 Add X1, X31, 32
	106 Move [X31+32], X8
	107 Call 0x1C17E04
	108 Move X21, X0
	109 Compare X0, 0
	110 JumpIfEqual {117}
	111 Move X8, [X20]
	112 Move X0, X21
	113 Move X1, [X8+64]
	114 Call 0x1C17E00
	115 Compare X0, 0
	116 JumpIfEqual {192}
	117 Move W8, [X20+24]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X8, 0x8F3000
	120 Move X8, [X8+2704]
	121 Move [X20+56], X21
	122 Move V0, [X19+20]
	123 Add X1, X31, 28
	124 Move X0, [X8]
	125 Move [X31+28], S0
	126 Call 0x1C17E04
	127 Move X21, X0
	128 Compare X0, 0
	129 JumpIfEqual {136}
	130 Move X8, [X20]
	131 Move X0, X21
	132 Move X1, [X8+64]
	133 Call 0x1C17E00
	134 Compare X0, 0
	135 JumpIfEqual {192}
	136 Move W8, [X20+24]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move [X20+64], X21
	139 Move X8, [X19+24]
	140 Move X0, [X22]
	141 Add X1, X31, 16
	142 Move [X31+16], X8
	143 Call 0x1C17E04
	144 Move X21, X0
	145 Compare X0, 0
	146 JumpIfEqual {153}
	147 Move X8, [X20]
	148 Move X0, X21
	149 Move X1, [X8+64]
	150 Call 0x1C17E00
	151 Compare X0, 0
	152 JumpIfEqual {192}
	153 Move W8, [X20+24]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move [X20+72], X21
	156 Move X9, 0x8F3000
	157 Move W8, [X19+35]
	158 Move X9, [X9+2904]
	159 Add X1, X31, 12
	160 Move W8, W8
	161 ShiftRight W8, 3
	162 And W8, W8, 7
	163 Move X0, [X9]
	164 Move [X31+12], W8
	165 Call 0x1C17E04
	166 Move X19, X0
	167 Compare X0, 0
	168 JumpIfEqual {175}
	169 Move X8, [X20]
	170 Move X0, X19
	171 Move X1, [X8+64]
	172 Call 0x1C17E00
	173 Compare X0, 0
	174 JumpIfEqual {192}
	175 Move W8, [X20+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X8, 0x94A000
	178 Move X8, [X8+8]
	179 Move [X20+80], X19
	180 Move X1, X20
	181 Move X2, X31
	182 Move X0, [X8]
	183 Call String.Format, X0, X1
	184 Move X20, [X31+80]
	185 Move X19, [X31+88]
	186 Move X22, [X31+64]
	187 Move X21, [X31+72]
	188 Move X30, [X31+48]
	189 Add X31, X31, 96
	190 Return X0
	191 Call 0x1C17F28
	192 Call 0x1C17F44
	193 Move X1, X31
	194 Call 0x1C17DEC
	195 Call 0x1C17F20

