Type: UnityEngine.InputSystem.LowLevel.InputState

Method: UnityEngine.InputSystem.LowLevel.InputUpdateType get_currentUpdateType()

Disassembly:
	0x03809AAC MOV X1, X31
	0x03809AB0 BL 0x338C698
	0x03809AB4 CMP X0, X19
	0x03809AB8 B.EQ 0x3809CB8
	0x03809ABC ADRP X8, 0x8F2000
	0x03809AC0 LDR X0, [X21]
	0x03809AC4 LDR X8, [X8 + 0xEA0]
	0x03809AC8 LDR W9, [X0 + 0xE0]
	0x03809ACC LDR X20, [X8]
	0x03809AD0 CBNZ W9, 0x3809AD8
	0x03809AD4 BL 0x1C16DFC
	0x03809AD8 MOV X0, X20
	0x03809ADC MOV X1, X31
	0x03809AE0 BL 0x338C698
	0x03809AE4 CMP X0, X19
	0x03809AE8 B.EQ 0x3809CDC
	0x03809AEC ADRP X8, 0x8F2000
	0x03809AF0 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x93C000
	006 Move W8, [X19+1121]
	007 Move X20, [X20+3984]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x93C000
	013 Move X0, [X0+3984]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1121], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move W0, [X8+4]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.UInt32 get_updateCount()

Disassembly:
	0x03809AF4 LDR X8, [X8 + 0xEF8]
	0x03809AF8 LDR W9, [X0 + 0xE0]
	0x03809AFC LDR X20, [X8]
	0x03809B00 CBNZ W9, 0x3809B08
	0x03809B04 BL 0x1C16DFC
	0x03809B08 MOV X0, X20
	0x03809B0C MOV X1, X31
	0x03809B10 BL 0x338C698
	0x03809B14 CMP X0, X19
	0x03809B18 B.EQ 0x3809D00
	0x03809B1C ADRP X8, 0x8F2000
	0x03809B20 LDR X0, [X21]
	0x03809B24 LDR X8, [X8 + 0xEE8]
	0x03809B28 LDR W9, [X0 + 0xE0]
	0x03809B2C LDR X20, [X8]
	0x03809B30 CBNZ W9, 0x3809B38
	0x03809B34 BL 0x1C16DFC
	0x03809B38 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x93C000
	006 Move W8, [X19+1122]
	007 Move X20, [X20+3984]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x93C000
	013 Move X0, [X0+3984]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1122], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move W0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Double get_currentTime()

Disassembly:
	0x037FD688 TBZ X0, 0x0, 0x37FD6C8
	0x037FD68C LDR X2, [X20]
	0x037FD690 MOVZ W1, 0x10
	0x037FD694 MOV X0, X19
	0x037FD698 BL 0x21BA4B4
	0x037FD69C TBZ X0, 0x0, 0x37FD6C8
	0x037FD6A0 CMP W21, 0x54C
	0x037FD6A4 B.EQ 0x37FD718
	0x037FD6A8 CMP W21, 0x45E
	0x037FD6AC B.NE 0x37FD6C8
	0x037FD6B0 ADRP X8, 0x94C000
	0x037FD6B4 LDR X8, [X8 + 0xF08]
	0x037FD6B8 B 0x37FD704
	0x037FD6BC ADRP X8, 0x94C000
	0x037FD6C0 LDR X8, [X8 + 0xEF0]
	0x037FD6C4 B 0x37FD704
	0x037FD6C8 LDR X2, [X20]
	0x037FD6CC MOVZ W1, 0xF
	0x037FD6D0 MOV X0, X19
	0x037FD6D4 BL 0x21BA4B4
	0x037FD6D8 TBZ X0, 0x0, 0x37FD6FC
	0x037FD6DC LDR X2, [X20]
	0x037FD6E0 MOVZ W1, 0x10
	0x037FD6E4 MOV X0, X19
	0x037FD6E8 BL 0x21BA4B4
	0x037FD6EC TBZ X0, 0x0, 0x37FD6FC
	0x037FD6F0 ADRP X8, 0x94C000
	0x037FD6F4 LDR X8, [X8 + 0xF00]
	0x037FD6F8 B 0x37FD704
	0x037FD6FC ADRP X8, 0x94C000
	0x037FD700 LDR X8, [X8 + 0xEF8]
	0x037FD704 LDR X0, [X8]
	0x037FD708 LDP X20, X19, [X31 + 0x40]
	0x037FD70C LDP X30, X21, [X31 + 0x30]
	0x037FD710 ADD X31, X31, 0x50
	0x037FD714 RET
	0x037FD718 ADRP X8, 0x94C000
	0x037FD71C LDR X8, [X8 + 0xEE0]
	0x037FD720 B 0x37FD704
	0x037FD724 SUB X31, X31, 0x50
	0x037FD728 STP X30, X21, [X31 + 0x30]
	0x037FD72C STP X20, X19, [X31 + 0x40]
	0x037FD730 ADRP X21, 0xBE4000
	0x037FD734 LDRB W9, [X21 + 0x3F8]
	0x037FD738 MOV X20, X0
	0x037FD73C MOV X19, X8
	0x037FD740 TBNZ X9, 0x0, 0x37FD758
	0x037FD744 ADRP X0, 0x94C000
	0x037FD748 LDR X0, [X0 + 0xF10]
	0x037FD74C BL 0x1C16CF4
	0x037FD750 MOVZ W8, 0x1
	0x037FD754 STRB W8, [X21 + 0x3F8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBE5000
	005 Move X20, 0x91F000
	006 Move W8, [X19+1123]
	007 Move X20, [X20+3784]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x91F000
	013 Move X0, [X0+3792]
	014 Call 0x1C17CF4
	015 Move X0, 0x91F000
	016 Move X0, [X0+3784]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1123], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8]
	023 Compare X19, 0
	024 JumpIfEqual {57}
	025 Move X10, 0x91F000
	026 Move X8, [X19]
	027 Move X10, [X10+3792]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Move X1, [X10]
	030 Compare X9, 0
	031 JumpIfEqual {38}
	032 Move X10, [X8+176]
	033 Add X10, X10, 8
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Subtract X9, X9, 1
	037 Add X10, X10, 16
	038 Move W2, 19
	039 Move X0, X19
	040 Call 0x1C5D788
	041 Move W9, [X10]
	042 Add W9, W9, 19
	043 Add X8, X8, W9
	044 Add X0, X8, 312
	045 Move X8, [X0]
	046 Move X1, [X0+8]
	047 Move X0, X19
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X8, [X20]
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X8, [X8+184]
	053 Move V1, [X8+8]
	054 Subtract D0, D0, D1
	055 Move X30, [X31+32]
	056 Return V0
	057 Call 0x1C17F20

Method: System.Void add_onChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.LowLevel.InputEventPtr> value)

Disassembly:
	0x03809B3C MOV X1, X31
	0x03809B40 BL 0x338C698
	0x03809B44 CMP X0, X19
	0x03809B48 MOV X0, X31
	0x03809B4C B.NE 0x3809D28
	0x03809B50 ADRP X19, 0x912000
	0x03809B54 LDR X19, [X19 + 0xD18]
	0x03809B58 LDR X0, [X19]
	0x03809B5C LDR W8, [X0 + 0xE0]
	0x03809B60 CBNZ W8, 0x3809B6C
	0x03809B64 BL 0x1C16DFC
	0x03809B68 LDR X0, [X19]
	0x03809B6C MOVZ W8, 0x3C
	0x03809B70 B 0x3809D20
	0x03809B74 ADRP X19, 0x912000
	0x03809B78 LDR X19, [X19 + 0xD18]
	0x03809B7C LDR X0, [X19]
	0x03809B80 LDR W8, [X0 + 0xE0]
	0x03809B84 CBNZ W8, 0x3809B90
	0x03809B88 BL 0x1C16DFC
	0x03809B8C LDR X0, [X19]
	0x03809B90 MOVZ W8, 0xC
	0x03809B94 B 0x3809D20
	0x03809B98 ADRP X19, 0x912000
	0x03809B9C LDR X19, [X19 + 0xD18]
	0x03809BA0 LDR X0, [X19]
	0x03809BA4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD9000
	006 Move X20, 0x913000
	007 Move W8, [X21+1124]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x913000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1124], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.add_onDeviceStateChange, X0, X1
	036 Return 
	037 Call 0x1C17F20

Method: System.Void remove_onChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.LowLevel.InputEventPtr> value)

Disassembly:
	0x03809BA8 CBNZ W8, 0x3809BB4
	0x03809BAC BL 0x1C16DFC
	0x03809BB0 LDR X0, [X19]
	0x03809BB4 MOVZ W8, 0x10
	0x03809BB8 B 0x3809D20
	0x03809BBC ADRP X19, 0x912000
	0x03809BC0 LDR X19, [X19 + 0xD18]
	0x03809BC4 LDR X0, [X19]
	0x03809BC8 LDR W8, [X0 + 0xE0]
	0x03809BCC CBNZ W8, 0x3809BD8
	0x03809BD0 BL 0x1C16DFC
	0x03809BD4 LDR X0, [X19]
	0x03809BD8 MOVZ W8, 0x14
	0x03809BDC B 0x3809D20
	0x03809BE0 ADRP X19, 0x912000
	0x03809BE4 LDR X19, [X19 + 0xD18]
	0x03809BE8 LDR X0, [X19]
	0x03809BEC LDR W8, [X0 + 0xE0]
	0x03809BF0 CBNZ W8, 0x3809BFC
	0x03809BF4 BL 0x1C16DFC
	0x03809BF8 LDR X0, [X19]
	0x03809BFC MOVZ W8, 0x18
	0x03809C00 B 0x3809D20
	0x03809C04 ADRP X19, 0x912000
	0x03809C08 LDR X19, [X19 + 0xD18]
	0x03809C0C LDR X0, [X19]
	0x03809C10 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD9000
	006 Move X20, 0x913000
	007 Move W8, [X21+1125]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x913000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1125], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.remove_onDeviceStateChange, X0, X1
	036 Return 
	037 Call 0x1C17F20

Method: System.Void Change(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType = 0)

Disassembly:
	0x03809C14 CBNZ W8, 0x3809C20
	0x03809C18 BL 0x1C16DFC
	0x03809C1C LDR X0, [X19]
	0x03809C20 MOVZ W8, 0x1C
	0x03809C24 B 0x3809D20
	0x03809C28 ADRP X19, 0x912000
	0x03809C2C LDR X19, [X19 + 0xD18]
	0x03809C30 LDR X0, [X19]
	0x03809C34 LDR W8, [X0 + 0xE0]
	0x03809C38 CBNZ W8, 0x3809C44
	0x03809C3C BL 0x1C16DFC
	0x03809C40 LDR X0, [X19]
	0x03809C44 MOVZ W8, 0x20
	0x03809C48 B 0x3809D20
	0x03809C4C ADRP X19, 0x912000
	0x03809C50 LDR X19, [X19 + 0xD18]
	0x03809C54 LDR X0, [X19]
	0x03809C58 LDR W8, [X0 + 0xE0]
	0x03809C5C CBNZ W8, 0x3809C68
	0x03809C60 BL 0x1C16DFC
	0x03809C64 LDR X0, [X19]
	0x03809C68 MOVZ W8, 0x24
	0x03809C6C B 0x3809D20
	0x03809C70 ADRP X19, 0x912000
	0x03809C74 LDR X19, [X19 + 0xD18]
	0x03809C78 LDR X0, [X19]
	0x03809C7C LDR W8, [X0 + 0xE0]
	0x03809C80 CBNZ W8, 0x3809C8C
	0x03809C84 BL 0x1C16DFC
	0x03809C88 LDR X0, [X19]
	0x03809C8C MOVZ W8, 0x28
	0x03809C90 B 0x3809D20
	0x03809C94 ADRP X19, 0x912000
	0x03809C98 LDR X19, [X19 + 0xD18]
	0x03809C9C LDR X0, [X19]
	0x03809CA0 LDR W8, [X0 + 0xE0]
	0x03809CA4 CBNZ W8, 0x3809CB0
	0x03809CA8 BL 0x1C16DFC
	0x03809CAC LDR X0, [X19]
	0x03809CB0 MOVZ W8, 0x2C
	0x03809CB4 B 0x3809D20
	0x03809CB8 ADRP X19, 0x912000
	0x03809CBC LDR X19, [X19 + 0xD18]
	0x03809CC0 LDR X0, [X19]
	0x03809CC4 LDR W8, [X0 + 0xE0]
	0x03809CC8 CBNZ W8, 0x3809CD4
	0x03809CCC BL 0x1C16DFC
	0x03809CD0 LDR X0, [X19]
	0x03809CD4 MOVZ W8, 0x30
	0x03809CD8 B 0x3809D20
	0x03809CDC ADRP X19, 0x912000
	0x03809CE0 LDR X19, [X19 + 0xD18]
	0x03809CE4 LDR X0, [X19]
	0x03809CE8 LDR W8, [X0 + 0xE0]
	0x03809CEC CBNZ W8, 0x3809CF8
	0x03809CF0 BL 0x1C16DFC
	0x03809CF4 LDR X0, [X19]
	0x03809CF8 MOVZ W8, 0x34
	0x03809CFC B 0x3809D20
	0x03809D00 ADRP X19, 0x912000
	0x03809D04 LDR X19, [X19 + 0xD18]
	0x03809D08 LDR X0, [X19]
	0x03809D0C LDR W8, [X0 + 0xE0]
	0x03809D10 CBNZ W8, 0x3809D1C
	0x03809D14 BL 0x1C16DFC
	0x03809D18 LDR X0, [X19]
	0x03809D1C MOVZ W8, 0x38
	0x03809D20 LDR X9, [X0 + 0xB8]
	0x03809D24 LDR W0, [X9, X8, LSL]
	0x03809D28 LDP X20, X19, [X31 + 0x20]
	0x03809D2C LDP X22, X21, [X31 + 0x10]
	0x03809D30 LDR X30, [X31], #0x30
	0x03809D34 RET
	0x03809D38 LDR W0, [X0]
	0x03809D3C RET
	0x03809D40 STR W1, [X0]
	0x03809D44 RET
	0x03809D48 LDR W0, [X0 + 0x4]
	0x03809D4C RET
	0x03809D50 STR W1, [X0 + 0x4]
	0x03809D54 RET
	0x03809D58 LDR W0, [X0 + 0x8]
	0x03809D5C RET
	0x03809D60 STR W1, [X0 + 0x8]
	0x03809D64 RET
	0x03809D68 LDR W0, [X0 + 0xC]
	0x03809D6C RET
	0x03809D70 STR W1, [X0 + 0xC]
	0x03809D74 RET
	0x03809D78 STP X30, X21, [X31 - 0x20]!
	0x03809D7C STP X20, X19, [X31 + 0x10]
	0x03809D80 ADRP X20, 0xBD8000
	0x03809D84 ADRP X21, 0x912000
	0x03809D88 LDRB W8, [X20 + 0x470]
	0x03809D8C LDR X21, [X21 + 0xD18]
	0x03809D90 MOV X19, X0
	0x03809D94 TBNZ X8, 0x0, 0x3809DAC
	0x03809D98 ADRP X0, 0x912000
	0x03809D9C LDR X0, [X0 + 0xD18]
	0x03809DA0 BL 0x1C16CF4
	0x03809DA4 MOVZ W8, 0x1
	0x03809DA8 STRB W8, [X20 + 0x470]
	0x03809DAC LDR X0, [X21]
	0x03809DB0 LDR W8, [X0 + 0xE0]
	0x03809DB4 CBNZ W8, 0x3809DBC
	0x03809DB8 BL 0x1C16DFC
	0x03809DBC LDP W8, W9, [X19 + 0x4]
	0x03809DC0 LDP X20, X19, [X31 + 0x10]
	0x03809DC4 ADD W0, W8, W9, 0x3, LSR
	0x03809DC8 LDP X30, X21, [X31], #0x20
	0x03809DCC RET
	0x03809DD0 STP X30, X21, [X31 - 0x20]!
	0x03809DD4 STP X20, X19, [X31 + 0x10]
	0x03809DD8 ADRP X20, 0xBD8000
	0x03809DDC ADRP X21, 0x912000
	0x03809DE0 LDRB W8, [X20 + 0x471]
	0x03809DE4 LDR X21, [X21 + 0xD18]
	0x03809DE8 MOV X19, X0
	0x03809DEC TBNZ X8, 0x0, 0x3809E04
	0x03809DF0 ADRP X0, 0x912000
	0x03809DF4 LDR X0, [X0 + 0xD18]
	0x03809DF8 BL 0x1C16CF4
	0x03809DFC MOVZ W8, 0x1
	0x03809E00 STRB W8, [X20 + 0x471]
	0x03809E04 LDR X0, [X21]
	0x03809E08 LDR W8, [X0 + 0xE0]
	0x03809E0C CBNZ W8, 0x3809E14
	0x03809E10 BL 0x1C16DFC
	0x03809E14 LDP W8, W9, [X19 + 0x4]
	0x03809E18 LDP X20, X19, [X31 + 0x10]
	0x03809E1C ADD W0, W9, W8, 0x3, LSL
	0x03809E20 LDP X30, X21, [X31], #0x20
	0x03809E24 RET
	0x03809E28 STR X30, [X31 - 0x30]!
	0x03809E2C STP X22, X21, [X31 + 0x10]
	0x03809E30 STP X20, X19, [X31 + 0x20]
	0x03809E34 ADRP X22, 0xBD8000
	0x03809E38 ADRP X21, 0x912000
	0x03809E3C LDRB W8, [X22 + 0x472]
	0x03809E40 LDR X21, [X21 + 0xD18]
	0x03809E44 MOV X19, X1
	0x03809E48 MOV X20, X0
	0x03809E4C TBNZ X8, 0x0, 0x3809E64
	0x03809E50 ADRP X0, 0x912000
	0x03809E54 LDR X0, [X0 + 0xD18]
	0x03809E58 BL 0x1C16CF4
	0x03809E5C MOVZ W8, 0x1
	0x03809E60 STRB W8, [X22 + 0x472]
	0x03809E64 LDR X0, [X21]
	0x03809E68 LDR W8, [X0 + 0xE0]
	0x03809E6C CBNZ W8, 0x3809E74
	0x03809E70 BL 0x1C16DFC
	0x03809E74 LDP W8, W9, [X20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xBD9000
	009 Move W8, [X22+1126]
	010 Move W21, W2
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x913000
	018 Move X0, [X0+3352]
	019 Call 0x1C17CF4
	020 Move X0, 0x913000
	021 Move X0, [X0+624]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1126], W8
	025 Compare X19, 0
	026 JumpIfEqual {96}
	027 Compare X20, 0
	028 JumpIfEqual {103}
	029 Move W8, [X20]
	030 Move W9, 0x5441
	031 NotImplemented "Instruction MOVK not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W9, 0x4154
	034 NotImplemented "Instruction MOVK not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, 0x913000
	037 Move X8, [X8+3352]
	038 Move W22, [X20+20]
	039 Move W23, [X19+16]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X23, 0x913000
	047 Move X23, [X23+624]
	048 Move X0, [X23]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X23]
	054 Move X8, [X0+184]
	055 Move X22, [X8]
	056 Compare W21, 0
	057 JumpIfNotEqual {72}
	058 Move W9, [X0+224]
	059 Move X8, X22
	060 Compare W9, 0
	061 JumpIfNotEqual {66}
	062 Call 0x1C17DFC
	063 Move X8, [X23]
	064 Move X8, [X8+184]
	065 Move X8, [X8]
	066 Compare X8, 0
	067 JumpIfEqual {121}
	068 Move X0, X8
	069 Move X1, X31
	070 Call InputManager.get_defaultUpdateType, X0
	071 Move W21, W0
	072 Compare X22, 0
	073 JumpIfEqual {121}
	074 Move X0, X22
	075 Move X1, X19
	076 Move X2, X20
	077 Move W3, W21
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Move X22, [X31+32]
	081 Move X21, [X31+40]
	082 Move X30, [X31+16]
	083 Move X23, [X31+24]
	084 Move X4, X31
	085 Add X31, X31, 64
	086 Call InputManager.UpdateState, X0, X1, X2, X3
	087 Return 
	088 Move X20, [X31+48]
	089 Move X19, [X31+56]
	090 Move X22, [X31+32]
	091 Move X21, [X31+40]
	092 Move X30, [X31+16]
	093 Move X23, [X31+24]
	094 Add X31, X31, 64
	095 Return 
	096 Move X0, 0x8F0000
	097 Move X0, [X0+1320]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0x913000
	102 Move X0, [X0+3360]
	103 Move X0, 0x8F0000
	104 Move X0, [X0+1320]
	105 Call 0x1C17D08
	106 Call 0x1C17F10
	107 Move X19, X0
	108 Move X0, 0x913000
	109 Move X0, [X0+3440]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Move X2, X31
	114 Call ArgumentNullException..ctor, X0, X1
	115 Move X0, 0x942000
	116 Move X0, [X0+1184]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Call 0x1C17DEC
	121 Call 0x1C17F20
	122 Move [X31+8], W22
	123 Move X20, 0x913000
	124 Move X20, [X20+3368]
	125 Move X0, X20
	126 Call 0x1C17D08
	127 Add X1, X31, 8
	128 Call 0x1C17E04
	129 Move X21, X0
	130 Move X0, X19
	131 Call 0x19913C0
	132 Move X0, 0x913000
	133 Move X22, [X19+16]
	134 Move X0, [X0+3352]
	135 Call 0x1C17D08
	136 Call 0x19913D0
	137 Move X0, X20
	138 Move [X31], W22
	139 Call 0x1C17D08
	140 Add X1, X31, 0
	141 Call 0x1C17E04
	142 Move X20, X0
	143 Move X0, 0x942000
	144 Move X0, [X0+1192]
	145 Call 0x1C17D08
	146 Move X1, X21
	147 Move X2, X20
	148 Move X3, X19
	149 Move X4, X31
	150 Call String.Format, X0, X1, X2, X3
	151 Move X19, X0
	152 Move X0, 0x8F3000
	153 Move X0, [X0+1400]
	154 Call 0x1C17D08
	155 Call 0x1C17F10
	156 Move X20, X0
	157 Move X0, 0x913000
	158 Move X0, [X0+3440]
	159 Call 0x1C17D08
	160 Move X2, X0
	161 Move X0, X20
	162 Move X1, X19
	163 Move X3, X31
	164 Call ArgumentException..ctor, X0, X1, X2
	165 Move X0, 0x942000
	166 Move X0, [X0+1184]
	167 Call 0x1C17D08
	168 Move X1, X0
	169 Move X0, X20
	170 Call 0x1C17DEC

Method: System.Void Change(UnityEngine.InputSystem.InputControl control, TState state, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType = 0, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr = null)

Disassembly:
	0x0220A16C BL 0x1C16DFC
	0x0220A170 LDR X8, [X20]
	0x0220A174 LDR X8, [X8 + 0xB8]
	0x0220A178 LDR X8, [X8]
	0x0220A17C CBZ X8, 0x220A2B0
	0x0220A180 MOV X0, X8
	0x0220A184 MOV X1, X31
	0x0220A188 BL 0x37C1DE0
	0x0220A18C MOV W19, W0
	0x0220A190 ADD X0, X31, 0x8
	0x0220A194 MOV X1, X31
	0x0220A198 SUB W24, W23, W24
	0x0220A19C BL 0x37F80A4
	0x0220A1A0 ANDS W8, W0, 0x1
	0x0220A1A4 CSEL X26, X31, X25, NE
	0x0220A1A8 CSEL X27, X31, X21, NE
	0x0220A1AC CSEL W28, W31, W19, NE
	0x0220A1B0 CSEL X23, X31, X29, NE
	0x0220A1B4 CSEL W20, W31, W24, NE
	0x0220A1B8 CSEL W12, W31, W22, NE
	0x0220A1BC CBZ W8, 0x220A1D8
	0x0220A1C0 ADD X0, X31, 0x8
	0x0220A1C4 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31+12], W1
	007 Move X8, [X4+56]
	008 Move X19, X3
	009 Move W20, W2
	010 Move X21, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {17}
	013 Move X0, X4
	014 Move X22, X4
	015 Call 0x1C5D6E0
	016 Move X8, [X22+56]
	017 Move X4, [X8+8]
	018 Add X1, X31, 12
	019 Move X0, X21
	020 Move W2, W20
	021 Move X3, X19
	022 Call 0x220A1C8, X0, X1, X2, X3
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+48]
	028 Return 

Method: System.Void Change(UnityEngine.InputSystem.InputControl control, ref TState state, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType = 0, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr = null)

Disassembly:
	0x0220A1C8 BL 0x3802884
	0x0220A1CC MOV X23, X29
	0x0220A1D0 MOV W20, W24
	0x0220A1D4 B 0x220A268
	0x0220A1D8 ADRP X8, 0x1F11000
	0x0220A1DC LDR X8, [X8 + 0xEC8]
	0x0220A1E0 LDR X8, [X8]
	0x0220A1E4 LDR X8, [X8 + 0xB8]
	0x0220A1E8 LDR X19, [X8]
	0x0220A1EC CBZ X19, 0x220A2B0
	0x0220A1F0 ADRP X10, 0x1F11000
	0x0220A1F4 LDR X8, [X19]
	0x0220A1F8 LDR X10, [X10 + 0xED0]
	0x0220A1FC LDRH W9, [X8 + 0x12E]
	0x0220A200 LDR X1, [X10]
	0x0220A204 CBZ X9, 0x220A228
	0x0220A208 LDR X10, [X8 + 0xB0]
	0x0220A20C ADD X10, X10, 0x8
	0x0220A210 LDUR X11, [X10 - 0x8]
	0x0220A214 CMP X11, X1
	0x0220A218 B.EQ 0x220A23C
	0x0220A21C SUBS X9, X9, 0x1
	0x0220A220 ADD X10, X10, 0x10
	0x0220A224 B.NE 0x220A210
	0x0220A228 MOVZ W2, 0x13
	0x0220A22C MOV X0, X19
	0x0220A230 MOV W22, W12
	0x0220A234 BL 0x1C5C788
	0x0220A238 B 0x220A250
	0x0220A23C LDR W9, [X10]
	0x0220A240 MOV W22, W12
	0x0220A244 ADD W9, W9, 0x13
	0x0220A248 ADD X8, X8, W9, 0x4, SXTW
	0x0220A24C ADD X0, X8, 0x138
	0x0220A250 LDP X8, X1, [X0]
	0x0220A254 MOV X0, X19
	0x0220A258 BLR X8
	0x0220A25C MOV X25, X26
	0x0220A260 MOV X21, X27
	0x0220A264 MOV W19, W28
	0x0220A268 CBZ X25, 0x220A2B0
	0x0220A26C LDR X6, [X31 + 0x8]
	0x0220A270 MOV X0, X25
	0x0220A274 MOV X1, X21
	0x0220A278 MOV W2, W19
	0x0220A27C MOV X3, X23
	0x0220A280 MOV W4, W20
	0x0220A284 MOV W5, W22
	0x0220A288 MOV X7, X31
	0x0220A28C BL 0x37C6A44
	0x0220A290 LDP X20, X19, [X31 + 0x60]
	0x0220A294 LDP X22, X21, [X31 + 0x50]
	0x0220A298 LDP X24, X23, [X31 + 0x40]
	0x0220A29C LDP X26, X25, [X31 + 0x30]
	0x0220A2A0 LDP X28, X27, [X31 + 0x20]
	0x0220A2A4 LDP X29, X30, [X31 + 0x10]
	0x0220A2A8 ADD X31, X31, 0x70
	0x0220A2AC RET
	0x0220A2B0 BL 0x1C16F20
	0x0220A2B4 ADRP X0, 0x1F11000
	0x0220A2B8 LDR X0, [X0 + 0xEF0]
	0x0220A2BC BL 0x1C16D08
	0x0220A2C0 MOV X1, X22
	0x0220A2C4 MOV X2, X31
	0x0220A2C8 BL 0x321EFD0
	0x0220A2CC MOV X19, X0
	0x0220A2D0 ADRP X0, 0x1EF1000
	0x0220A2D4 LDR X0, [X0 + 0x578]
	0x0220A2D8 BL 0x1C16D08
	0x0220A2DC BL 0x1C16F10
	0x0220A2E0 MOV X20, X0
	0x0220A2E4 ADRP X0, 0x1F11000
	0x0220A2E8 LDR X0, [X0 + 0xD60]
	0x0220A2EC BL 0x1C16D08
	0x0220A2F0 MOV X2, X0
	0x0220A2F4 MOV X0, X20
	0x0220A2F8 MOV X1, X19
	0x0220A2FC MOV X3, X31
	0x0220A300 BL 0x330E16C
	0x0220A304 MOV X0, X20
	0x0220A308 B 0x220A340
	0x0220A30C ADRP X0, 0x1EEE000
	0x0220A310 LDR X0, [X0 + 0x528]
	0x0220A314 BL 0x1C16D08
	0x0220A318 BL 0x1C16F10
	0x0220A31C MOV X19, X0
	0x0220A320 ADRP X0, 0x1F11000
	0x0220A324 LDR X0, [X0 + 0xD60]
	0x0220A328 BL 0x1C16D08
	0x0220A32C MOV X1, X0
	0x0220A330 MOV X0, X19
	0x0220A334 MOV X2, X31
	0x0220A338 BL 0x330E100
	0x0220A33C MOV X0, X19
	0x0220A340 MOV X1, X21
	0x0220A344 BL 0x1C16DEC
	0x0220A348 STP X30, X23, [X31 - 0x30]!
	0x0220A34C STP X22, X21, [X31 + 0x10]
	0x0220A350 STP X20, X19, [X31 + 0x20]
	0x0220A354 LDR X8, [X4 + 0x38]
	0x0220A358 MOV X19, X3
	0x0220A35C MOV W20, W2
	0x0220A360 MOV X21, X1
	0x0220A364 MOV X22, X0
	0x0220A368 CBNZ X8, 0x220A37C
	0x0220A36C MOV X0, X4
	0x0220A370 MOV X23, X4
	0x0220A374 BL 0x1C5C6E0
	0x0220A378 LDR X8, [X23 + 0x38]
	0x0220A37C LDR X4, [X8 + 0x8]
	0x0220A380 MOV X0, X22
	0x0220A384 MOV X1, X21
	0x0220A388 MOV W2, W20
	0x0220A38C MOV X3, X19
	0x0220A390 LDP X20, X19, [X31 + 0x20]
	0x0220A394 LDP X22, X21, [X31 + 0x10]
	0x0220A398 LDP X30, X23, [X31], #0x30
	0x0220A39C B 0x220A3A0
	0x0220A3A0 SUB X31, X31, 0x70
	0x0220A3A4 STP X29, X30, [X31 + 0x10]
	0x0220A3A8 STP X28, X27, [X31 + 0x20]
	0x0220A3AC STP X26, X25, [X31 + 0x30]
	0x0220A3B0 STP X24, X23, [X31 + 0x40]
	0x0220A3B4 STP X22, X21, [X31 + 0x50]
	0x0220A3B8 STP X20, X19, [X31 + 0x60]
	0x0220A3BC STR X3, [X31 + 0x8]
	0x0220A3C0 LDR X8, [X4 + 0x38]
	0x0220A3C4 MOV X21, X4
	0x0220A3C8 MOV W19, W2
	0x0220A3CC MOV X29, X1
	0x0220A3D0 MOV X22, X0
	0x0220A3D4 CBNZ X8, 0x220A424
	0x0220A3D8 ADRP X0, 0x1F11000
	0x0220A3DC LDR X0, [X0 + 0xED0]
	0x0220A3E0 BL 0x1C16CF4
	0x0220A3E4 ADRP X0, 0x1F11000
	0x0220A3E8 LDR X0, [X0 + 0xEC8]
	0x0220A3EC BL 0x1C16CF4
	0x0220A3F0 ADRP X0, 0x1F11000
	0x0220A3F4 LDR X0, [X0 + 0xD18]
	0x0220A3F8 BL 0x1C16CF4
	0x0220A3FC ADRP X0, 0x1F11000
	0x0220A400 LDR X0, [X0 + 0x270]
	0x0220A404 BL 0x1C16CF4
	0x0220A408 ADRP X0, 0x1EE9000
	0x0220A40C LDR X0, [X0 + 0x5A8]
	0x0220A410 BL 0x1C16CF4
	0x0220A414 LDR X8, [X21 + 0x38]
	0x0220A418 CBNZ X8, 0x220A424
	0x0220A41C MOV X0, X21
	0x0220A420 BL 0x1C5C6E0
	0x0220A424 CBZ X22, 0x220A69C
	0x0220A428 ADRP X20, 0x1F11000
	0x0220A42C LDR X20, [X20 + 0xD18]
	0x0220A430 LDR X23, [X22 + 0x18]
	0x0220A434 LDR X0, [X20]
	0x0220A438 LDR W8, [X0 + 0xE0]
	0x0220A43C CBNZ W8, 0x220A444
	0x0220A440 BL 0x1C16DFC
	0x0220A444 CBNZ W23, 0x220A644
	0x0220A448 LDR X0, [X20]
	0x0220A44C LDR X23, [X22 + 0x18]
	0x0220A450 LDR W8, [X0 + 0xE0]
	0x0220A454 CBNZ W8, 0x220A45C
	0x0220A458 BL 0x1C16DFC
	0x0220A45C ANDS X31, X23, 0x7FFFFFFFF
	0x0220A460 B.NE 0x220A644
	0x0220A464 LDR X0, [X20]
	0x0220A468 LDR X21, [X22 + 0x78]
	0x0220A46C ADD X23, X22, 0x10
	0x0220A470 LDR W8, [X0 + 0xE0]
	0x0220A474 CBNZ W8, 0x220A47C
	0x0220A478 BL 0x1C16DFC
	0x0220A47C MOV X0, X23
	0x0220A480 MOV X1, X31
	0x0220A484 BL 0x3800B6C
	0x0220A488 ADRP X8, 0x1EE9000
	0x0220A48C LDR X8, [X8 + 0x5A8]
	0x0220A490 MOV W22, W0
	0x0220A494 LDR X8, [X8]
	0x0220A498 LDR W9, [X8 + 0xE0]
	0x0220A49C CBNZ W9, 0x220A4A8
	0x0220A4A0 MOV X0, X8
	0x0220A4A4 BL 0x1C16DFC
	0x0220A4A8 MOV W1, W22
	0x0220A4AC MOVZ W0, 0x3F
	0x0220A4B0 MOV X2, X31
	0x0220A4B4 BL 0x337EEA0
	0x0220A4B8 CBZ X21, 0x220A640
	0x0220A4BC ADRP X20, 0x1F11000
	0x0220A4C0 LDR X20, [X20 + 0x270]
	0x0220A4C4 MOV X22, X0
	0x0220A4C8 LDR W23, [X23 + 0x4]
	0x0220A4CC LDR W24, [X21 + 0x14]
	0x0220A4D0 LDR X0, [X20]
	0x0220A4D4 LDR W8, [X0 + 0xE0]
	0x0220A4D8 CBNZ W8, 0x220A4E4
	0x0220A4DC BL 0x1C16DFC
	0x0220A4E0 LDR X0, [X20]
	0x0220A4E4 LDR X8, [X0 + 0xB8]
	0x0220A4E8 LDR X25, [X8]
	0x0220A4EC CBNZ W19, 0x220A520
	0x0220A4F0 LDR W9, [X0 + 0xE0]
	0x0220A4F4 MOV X8, X25
	0x0220A4F8 CBNZ W9, 0x220A50C
	0x0220A4FC BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+8], X3
	015 Move X8, [X4+56]
	016 Move X21, X4
	017 Move W20, W2
	018 Move X19, X1
	019 Move X22, X0
	020 Compare X8, 0
	021 JumpIfNotEqual {42}
	022 Move X0, 0x1F12000
	023 Move X0, [X0+3792]
	024 Call 0x1C17CF4
	025 Move X0, 0x1F12000
	026 Move X0, [X0+3784]
	027 Call 0x1C17CF4
	028 Move X0, 0x1F12000
	029 Move X0, [X0+3352]
	030 Call 0x1C17CF4
	031 Move X0, 0x1F12000
	032 Move X0, [X0+624]
	033 Call 0x1C17CF4
	034 Move X0, 0x1EEA000
	035 Move X0, [X0+1448]
	036 Call 0x1C17CF4
	037 Move X8, [X21+56]
	038 Compare X8, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X21
	041 Call 0x1C5D6E0
	042 Compare X22, 0
	043 JumpIfEqual {216}
	044 Move X23, 0x1F12000
	045 Move X23, [X23+3352]
	046 Move X24, [X22+24]
	047 Move X0, [X23]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Compare W24, 0
	053 JumpIfNotEqual {195}
	054 Move X0, [X23]
	055 Move X24, [X22+24]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 And X31, X24, 0x7FFFFFFFF
	061 Move X0, [X23]
	062 Move X21, [X22+120]
	063 Add X23, X22, 16
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X23
	069 Move X1, X31
	070 Call InputStateBlock.get_alignedSizeInBytes, X0
	071 Move X8, 0x1EEA000
	072 Move X8, [X8+1448]
	073 Move W22, W0
	074 Move X8, [X8]
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move W1, W22
	081 Move W0, 1
	082 Move X2, X31
	083 Call Math.Min, X0, X1
	084 Compare X21, 0
	085 JumpIfEqual {194}
	086 Move X26, 0x1F12000
	087 Move X26, [X26+624]
	088 Move X22, X0
	089 Move W23, [X23+4]
	090 Move W25, [X21+20]
	091 Move X0, [X26]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {97}
	095 Call 0x1C17DFC
	096 Move X0, [X26]
	097 Move X8, [X0+184]
	098 Move X24, [X8]
	099 Compare W20, 0
	100 JumpIfNotEqual {115}
	101 Move W9, [X0+224]
	102 Move X8, X24
	103 Compare W9, 0
	104 JumpIfNotEqual {109}
	105 Call 0x1C17DFC
	106 Move X8, [X26]
	107 Move X8, [X8+184]
	108 Move X8, [X8]
	109 Compare X8, 0
	110 JumpIfEqual {194}
	111 Move X0, X8
	112 Move X1, X31
	113 Call InputManager.get_defaultUpdateType, X0
	114 Move W20, W0
	115 Add X0, X31, 8
	116 Move X1, X31
	117 Subtract W23, W23, W25
	118 Call InputEventPtr.get_valid, X0
	119 And W8, W0, 1
	120 NotImplemented "Instruction CSEL not yet implemented."
	121 NotImplemented "Instruction CSEL not yet implemented."
	122 NotImplemented "Instruction CSEL not yet implemented."
	123 NotImplemented "Instruction CSEL not yet implemented."
	124 NotImplemented "Instruction CSEL not yet implemented."
	125 NotImplemented "Instruction CSEL not yet implemented."
	126 Compare W8, 0
	127 JumpIfEqual {132}
	128 Add X0, X31, 8
	129 Move X1, X31
	130 Call InputEventPtr.get_internalTime, X0
	131 Move W29, W23
	132 Move X8, 0x1F12000
	133 Move X8, [X8+3784]
	134 Move X8, [X8]
	135 Move X8, [X8+184]
	136 Move X19, [X8]
	137 Compare X19, 0
	138 JumpIfEqual {194}
	139 Move X10, 0x1F12000
	140 Move X8, [X19]
	141 Move X10, [X10+3792]
	142 NotImplemented "Instruction LDRH not yet implemented."
	143 Move X1, [X10]
	144 Compare X9, 0
	145 JumpIfEqual {152}
	146 Move X10, [X8+176]
	147 Add X10, X10, 8
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Subtract X9, X9, 1
	151 Add X10, X10, 16
	152 Move W2, 19
	153 Move X0, X19
	154 Move W22, W12
	155 Call 0x1C5D788
	156 Move W9, [X10]
	157 Move W22, W12
	158 Add W9, W9, 19
	159 Add X8, X8, W9
	160 Add X0, X8, 312
	161 Move X8, [X0]
	162 Move X1, [X0+8]
	163 Move X0, X19
	164 NotImplemented "Instruction BLR not yet implemented."
	165 Move X24, X25
	166 Move X21, X26
	167 Move W20, W27
	168 Move X19, X28
	169 Compare X24, 0
	170 JumpIfEqual {194}
	171 Move X6, [X31+8]
	172 Move X0, X24
	173 Move X1, X21
	174 Move W2, W20
	175 Move X3, X19
	176 Move W4, W29
	177 Move W5, W22
	178 Move X7, X31
	179 Call InputManager.UpdateState, X0, X1, X2, X3, X4, X5, V0, X6
	180 Move X20, [X31+96]
	181 Move X19, [X31+104]
	182 Move X22, [X31+80]
	183 Move X21, [X31+88]
	184 Move X24, [X31+64]
	185 Move X23, [X31+72]
	186 Move X26, [X31+48]
	187 Move X25, [X31+56]
	188 Move X28, [X31+32]
	189 Move X27, [X31+40]
	190 Move X29, [X31+16]
	191 Move X30, [X31+24]
	192 Add X31, X31, 112
	193 Return 
	194 Call 0x1C17F20
	195 Move X0, 0x1F12000
	196 Move X0, [X0+3824]
	197 Call 0x1C17D08
	198 Move X1, X22
	199 Move X2, X31
	200 Call String.Format, X0, X1
	201 Move X19, X0
	202 Move X0, 0x1EF2000
	203 Move X0, [X0+1400]
	204 Call 0x1C17D08
	205 Call 0x1C17F10
	206 Move X20, X0
	207 Move X0, 0x1F12000
	208 Move X0, [X0+3424]
	209 Call 0x1C17D08
	210 Move X2, X0
	211 Move X0, X20
	212 Move X1, X19
	213 Move X3, X31
	214 Call ArgumentException..ctor, X0, X1, X2
	215 Move X0, X20
	216 Move X0, 0x1EEF000
	217 Move X0, [X0+1320]
	218 Call 0x1C17D08
	219 Call 0x1C17F10
	220 Move X19, X0
	221 Move X0, 0x1F12000
	222 Move X0, [X0+3424]
	223 Call 0x1C17D08
	224 Move X1, X0
	225 Move X0, X19
	226 Move X2, X31
	227 Call ArgumentNullException..ctor, X0, X1
	228 Move X0, X19
	229 Move X1, X21
	230 Call 0x1C17DEC

Method: System.Boolean IsIntegerFormat(UnityEngine.InputSystem.Utilities.FourCC format)

Disassembly:
	0x03809E78 MOVZ W10, 0x4954
	0x03809E7C SXTW X9, W9
	0x03809E80 MOVK W10, 0x53420000
	0x03809E84 CMP W8, W10
	0x03809E88 ADD X19, X9, X19
	0x03809E8C B.LE 0x3809EC8
	0x03809E90 MOVZ W9, 0x5254
	0x03809E94 MOVK W9, 0x53480000
	0x03809E98 CMP W8, W9
	0x03809E9C B.LE 0x3809F34
	0x03809EA0 MOVZ W9, 0x4E54
	0x03809EA4 MOVK W9, 0x55490000
	0x03809EA8 CMP W8, W9
	0x03809EAC B.EQ 0x3809F84
	0x03809EB0 MOVZ W9, 0x4854
	0x03809EB4 MOVK W9, 0x55530000
	0x03809EB8 CMP W8, W9
	0x03809EBC B.NE 0x380A05C
	0x03809EC0 LDRH W0, [X19]
	0x03809EC4 B 0x3809FC4
	0x03809EC8 MOVZ W9, 0x5445
	0x03809ECC MOVK W9, 0x42590000
	0x03809ED0 CMP W8, W9
	0x03809ED4 B.LE 0x3809F5C
	0x03809ED8 MOVZ W9, 0x5420
	0x03809EDC MOVK W9, 0x494E0000
	0x03809EE0 CMP W8, W9
	0x03809EE4 B.EQ 0x3809F84
	0x03809EE8 MOVZ W9, 0x4954
	0x03809EEC MOVK W9, 0x53420000
	0x03809EF0 CMP W8, W9
	0x03809EF4 B.NE 0x380A05C
	0x03809EF8 LDR X0, [X21]
	0x03809EFC LDR W8, [X0 + 0xE0]
	0x03809F00 CBZ W8, 0x3809FD4
	0x03809F04 LDR W8, [X20 + 0xC]!
	0x03809F08 LDUR W1, [X20 - 0x4]
	0x03809F0C CMP W8, 0x1
	0x03809F10 MOV X21, X20
	0x03809F14 B.NE 0x3809FFC
	0x03809F18 MOV X0, X19
	0x03809F1C MOV X2, X31
	0x03809F20 BL 0x37626D0
	0x03809F24 ANDS W31, W0, 0x1
	0x03809F28 MOVZ W8, 0x1
	0x03809F2C CSNEG W0, W8, W8, NE
	0x03809F30 B 0x3809FC4
	0x03809F34 MOVZ W9, 0x5954
	0x03809F38 MOVK W9, 0x53420000
	0x03809F3C CMP W8, W9
	0x03809F40 B.EQ 0x3809F8C
	0x03809F44 MOVZ W9, 0x5254
	0x03809F48 MOVK W9, 0x53480000
	0x03809F4C CMP W8, W9
	0x03809F50 B.NE 0x380A05C
	0x03809F54 LDRSH W0, [X19]
	0x03809F58 B 0x3809FC4
	0x03809F5C MOVZ W9, 0x5420
	0x03809F60 MOVK W9, 0x42490000
	0x03809F64 CMP W8, W9
	0x03809F68 B.EQ 0x3809F94
	0x03809F6C MOVZ W9, 0x5445
	0x03809F70 MOVK W9, 0x42590000
	0x03809F74 CMP W8, W9
	0x03809F78 B.NE 0x380A05C
	0x03809F7C LDRB W0, [X19]
	0x03809F80 B 0x3809FC4
	0x03809F84 LDR W0, [X19]
	0x03809F88 B 0x3809FC4
	0x00000000 INVALID
	0x03809F90 B 0x3809FC4
	0x03809F94 LDR X0, [X21]
	0x03809F98 LDR W8, [X0 + 0xE0]
	0x03809F9C CBZ W8, 0x380A018
	0x03809FA0 LDR W8, [X20 + 0xC]!
	0x03809FA4 LDUR W1, [X20 - 0x4]
	0x03809FA8 CMP W8, 0x1
	0x03809FAC MOV X21, X20
	0x03809FB0 B.NE 0x380A040
	0x03809FB4 MOV X0, X19
	0x03809FB8 MOV X2, X31
	0x03809FBC BL 0x37626D0
	0x03809FC0 AND W0, W0, 0x1
	0x03809FC4 LDP X20, X19, [X31 + 0x20]
	0x03809FC8 LDP X22, X21, [X31 + 0x10]
	0x03809FCC LDR X30, [X31], #0x30
	0x03809FD0 RET
	0x03809FD4 BL 0x1C16DFC
	0x03809FD8 LDR X0, [X21]
	0x03809FDC MOV X21, X20
	0x03809FE0 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD9000
	006 Move X20, 0x913000
	007 Move W8, [X21+1127]
	008 Move X20, [X20+3352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x913000
	015 Move X0, [X0+3352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1127], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W9, [X8+4]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W9, [X0+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {34}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X8, [X0+184]
	034 Move W9, [X8+12]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W9, [X0+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {42}
	039 Call 0x1C17DFC
	040 Move X0, [X20]
	041 Move X8, [X0+184]
	042 Move W9, [X8+28]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W9, [X0+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {50}
	047 Call 0x1C17DFC
	048 Move X0, [X20]
	049 Move X8, [X0+184]
	050 Move W9, [X8+20]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W9, [X0+224]
	053 Compare W9, 0
	054 JumpIfNotEqual {58}
	055 Call 0x1C17DFC
	056 Move X0, [X20]
	057 Move X8, [X0+184]
	058 Move W9, [X8+8]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W9, [X0+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Call 0x1C17DFC
	064 Move X0, [X20]
	065 Move X8, [X0+184]
	066 Move W9, [X8+16]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W9, [X0+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {74}
	071 Call 0x1C17DFC
	072 Move X0, [X20]
	073 Move X8, [X0+184]
	074 Move W9, [X8+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W9, [X0+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {82}
	079 Call 0x1C17DFC
	080 Move X0, [X20]
	081 Move X8, [X0+184]
	082 Move W9, [X8+36]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W0, 1
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Return X0
	090 Move W9, [X0+224]
	091 Compare W9, 0
	092 JumpIfNotEqual {96}
	093 Call 0x1C17DFC
	094 Move X8, [X20]
	095 Move X8, [X8+184]
	096 Move W8, [X8+40]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CSET not yet implemented."

Method: System.Void AddChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex = -1, System.UInt32 groupIndex = 0)

Disassembly:
	0x03809FE4 LDR W22, [X21 + 0xC]!
	0x03809FE8 CBNZ W8, 0x3809FF0
	0x03809FEC BL 0x1C16DFC
	0x03809FF0 LDR W1, [X20 + 0x8]
	0x03809FF4 CMP W22, 0x1
	0x03809FF8 B.EQ 0x3809F18
	0x03809FFC LDR W2, [X21]
	0x0380A000 MOV X0, X19
	0x0380A004 LDP X20, X19, [X31 + 0x20]
	0x0380A008 LDP X22, X21, [X31 + 0x10]
	0x0380A00C MOV X3, X31
	0x0380A010 LDR X30, [X31], #0x30
	0x0380A014 B 0x3762C30
	0x0380A018 BL 0x1C16DFC
	0x0380A01C LDR X0, [X21]
	0x0380A020 MOV X21, X20
	0x0380A024 LDR W8, [X0 + 0xE0]
	0x0380A028 LDR W22, [X21 + 0xC]!
	0x0380A02C CBNZ W8, 0x380A034
	0x0380A030 BL 0x1C16DFC
	0x0380A034 LDR W1, [X20 + 0x8]
	0x0380A038 CMP W22, 0x1
	0x0380A03C B.EQ 0x3809FB4
	0x0380A040 LDR W2, [X21]
	0x0380A044 MOV X0, X19
	0x0380A048 LDP X20, X19, [X31 + 0x20]
	0x0380A04C LDP X22, X21, [X31 + 0x10]
	0x0380A050 MOV X3, X31
	0x0380A054 LDR X30, [X31], #0x30
	0x0380A058 B 0x375B20C
	0x0380A05C ADRP X0, 0x911000
	0x0380A060 LDR X0, [X0 + 0xD18]
	0x0380A064 BL 0x1C16D08
	0x0380A068 BL 0x19903D0
	0x0380A06C LDR W8, [X20]
	0x0380A070 ADRP X0, 0x911000
	0x0380A074 STR W8, [X31 + 0x8]
	0x0380A078 LDR X0, [X0 + 0xD28]
	0x0380A07C BL 0x1C16D08
	0x0380A080 ADD X1, X31, 0x8
	0x0380A084 BL 0x1C16E04
	0x0380A088 MOV X19, X0
	0x0380A08C ADRP X0, 0x940000
	0x0380A090 LDR X0, [X0 + 0x4F0]
	0x0380A094 BL 0x1C16D08
	0x0380A098 MOV X1, X19
	0x0380A09C MOV X2, X31
	0x0380A0A0 BL 0x321EFD0
	0x0380A0A4 MOV X19, X0
	0x0380A0A8 ADRP X0, 0x8E9000
	0x0380A0AC LDR X0, [X0 + 0x5B0]
	0x0380A0B0 BL 0x1C16D08
	0x0380A0B4 BL 0x1C16F10
	0x0380A0B8 MOV X1, X19
	0x0380A0BC MOV X2, X31
	0x0380A0C0 MOV X20, X0
	0x0380A0C4 BL 0x337DF1C
	0x0380A0C8 ADRP X0, 0x940000
	0x0380A0CC LDR X0, [X0 + 0x4F8]
	0x0380A0D0 BL 0x1C16D08
	0x0380A0D4 MOV X1, X0
	0x0380A0D8 MOV X0, X20
	0x0380A0DC BL 0x1C16DEC
	0x0380A0E0 SUB X31, X31, 0x40
	0x0380A0E4 STP X30, X23, [X31 + 0x10]
	0x0380A0E8 STP X22, X21, [X31 + 0x20]
	0x0380A0EC STP X20, X19, [X31 + 0x30]
	0x0380A0F0 ADRP X23, 0xBD7000
	0x0380A0F4 ADRP X22, 0x911000
	0x0380A0F8 LDRB W8, [X23 + 0x473]
	0x0380A0FC LDR X22, [X22 + 0xD18]
	0x0380A100 MOV W19, W2
	0x0380A104 MOV X20, X1
	0x0380A108 MOV X21, X0
	0x0380A10C TBNZ X8, 0x0, 0x380A124
	0x0380A110 ADRP X0, 0x911000
	0x0380A114 LDR X0, [X0 + 0xD18]
	0x0380A118 BL 0x1C16CF4
	0x0380A11C MOVZ W8, 0x1
	0x0380A120 STRB W8, [X23 + 0x473]
	0x0380A124 LDR X0, [X22]
	0x0380A128 LDR W8, [X0 + 0xE0]
	0x0380A12C CBNZ W8, 0x380A134
	0x0380A130 BL 0x1C16DFC
	0x0380A134 LDP W8, W9, [X21]
	0x0380A138 MOVZ W10, 0x4954
	0x0380A13C SXTW X9, W9
	0x0380A140 MOVK W10, 0x53420000
	0x0380A144 CMP W8, W10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xBD9000
	008 Move W8, [X23+1128]
	009 Move W20, W3
	010 Move X21, X2
	011 Move X22, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x912000
	018 Move X0, [X0+624]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1128], W8
	022 Compare X19, 0
	023 JumpIfEqual {61}
	024 Compare X22, 0
	025 JumpIfEqual {68}
	026 Move X0, [X19+120]
	027 Compare X0, 0
	028 JumpIfEqual {60}
	029 Move X1, X31
	030 Call InputDevice.get_added, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {86}
	035 Move X23, 0x912000
	036 Move X23, [X23+624]
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X23]
	043 Move X8, [X0+184]
	044 Move X0, [X8]
	045 Compare X0, 0
	046 JumpIfEqual {60}
	047 Move X1, X19
	048 Move X2, X22
	049 Move X3, X21
	050 Move W4, W20
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X5, X31
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Call InputManager.AddStateChangeMonitor, X0, X1, X2, X3, X4
	059 Return 
	060 Call 0x1C17F20
	061 Move X0, 0x8EF000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0x912000
	067 Move X0, [X0+3424]
	068 Move X0, 0x8EF000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0x941000
	074 Move X0, [X0+1200]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0x941000
	081 Move X0, [X0+1208]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC
	086 Move X0, 0x941000
	087 Move X0, [X0+136]
	088 Call 0x1C17D08
	089 Move X1, X19
	090 Move X2, X31
	091 Call String.Format, X0, X1
	092 Move X19, X0
	093 Move X0, 0x8F2000
	094 Move X0, [X0+1400]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X1, X19
	098 Move X2, X31
	099 Move X20, X0
	100 Call ArgumentException..ctor, X0, X1
	101 Move X0, 0x941000
	102 Move X0, [X0+1208]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X20
	106 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor AddChangeMonitor(UnityEngine.InputSystem.InputControl control, System.Action`4<UnityEngine.InputSystem.InputControl, System.Double, UnityEngine.InputSystem.LowLevel.InputEventPtr, System.Int64> valueChangeCallback, System.Int32 monitorIndex = -1, System.Action`4<UnityEngine.InputSystem.InputControl, System.Double, System.Int64, System.Int32> timerExpiredCallback = null)

Disassembly:
	0x0380A148 ADD X20, X9, X20
	0x0380A14C B.LE 0x380A17C
	0x0380A150 MOVZ W9, 0x5254
	0x0380A154 MOVK W9, 0x53480000
	0x0380A158 CMP W8, W9
	0x0380A15C B.LE 0x380A1D8
	0x0380A160 MOVZ W9, 0x4E54
	0x0380A164 MOVK W9, 0x55490000
	0x0380A168 CMP W8, W9
	0x0380A16C B.EQ 0x380A228
	0x0380A170 MOVZ W9, 0x4854
	0x0380A174 MOVK W9, 0x55530000
	0x0380A178 B 0x380A1F0
	0x0380A17C MOVZ W9, 0x5445
	0x0380A180 MOVK W9, 0x42590000
	0x0380A184 CMP W8, W9
	0x0380A188 B.LE 0x380A200
	0x0380A18C MOVZ W9, 0x5420
	0x0380A190 MOVK W9, 0x494E0000
	0x0380A194 CMP W8, W9
	0x0380A198 B.EQ 0x380A228
	0x0380A19C MOVZ W9, 0x4954
	0x0380A1A0 MOVK W9, 0x53420000
	0x0380A1A4 CMP W8, W9
	0x0380A1A8 B.NE 0x380A31C
	0x0380A1AC LDR X0, [X22]
	0x0380A1B0 LDR W8, [X0 + 0xE0]
	0x0380A1B4 CBZ W8, 0x380A2D0
	0x0380A1B8 LDR W8, [X21 + 0xC]!
	0x0380A1BC LDUR W1, [X21 - 0x4]
	0x0380A1C0 CMP W8, 0x1
	0x0380A1C4 MOV X22, X21
	0x0380A1C8 B.NE 0x380A2F8
	0x0380A1CC CMP W19, 0x0
	0x0380A1D0 CSET W2, GT
	0x0380A1D4 B 0x380A268
	0x0380A1D8 MOVZ W9, 0x5954
	0x0380A1DC MOVK W9, 0x53420000
	0x0380A1E0 CMP W8, W9
	0x0380A1E4 B.EQ 0x380A220
	0x0380A1E8 MOVZ W9, 0x5254
	0x0380A1EC MOVK W9, 0x53480000
	0x0380A1F0 CMP W8, W9
	0x0380A1F4 B.NE 0x380A31C
	0x0380A1F8 STRH W19, [X20]
	0x0380A1FC B 0x380A22C
	0x0380A200 MOVZ W9, 0x5420
	0x0380A204 MOVK W9, 0x42490000
	0x0380A208 CMP W8, W9
	0x0380A20C B.EQ 0x380A240
	0x0380A210 MOVZ W9, 0x5445
	0x0380A214 MOVK W9, 0x42590000
	0x0380A218 CMP W8, W9
	0x0380A21C B.NE 0x380A31C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xBD8000
	008 Move W8, [X23+1129]
	009 Move X20, X3
	010 Move W19, W2
	011 Move X22, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x941000
	018 Move X0, [X0+1216]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1129], W8
	022 Compare X22, 0
	023 JumpIfEqual {48}
	024 Move X8, 0x941000
	025 Move X8, [X8+1216]
	026 Move X0, [X8]
	027 Call 0x1C17F10
	028 Move X1, X31
	029 Move X23, X0
	030 Call Object..ctor, X0
	031 Compare X23, 0
	032 JumpIfEqual {66}
	033 Move X2, W19
	034 Move X0, X21
	035 Move X1, X23
	036 Move W3, W31
	037 Move [X23+16], X22
	038 Move [X23+24], X20
	039 Call InputState.AddChangeMonitor, X0, X1, X2, X3
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X0, X23
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return X0
	048 Move X0, 0x8EF000
	049 Move X0, [X0+1320]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0x941000
	054 Move X0, [X0+1224]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Move X2, X31
	059 Call ArgumentNullException..ctor, X0, X1
	060 Move X0, 0x941000
	061 Move X0, [X0+1232]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Call 0x1C17DEC
	066 Call 0x1C17F20

Method: System.Void RemoveChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex = -1)

Disassembly:
	0x0380A228 STR W19, [X20]
	0x0380A22C LDP X20, X19, [X31 + 0x30]
	0x0380A230 LDP X22, X21, [X31 + 0x20]
	0x0380A234 LDP X30, X23, [X31 + 0x10]
	0x0380A238 ADD X31, X31, 0x40
	0x0380A23C RET
	0x0380A240 LDR X0, [X22]
	0x0380A244 LDR W8, [X0 + 0xE0]
	0x0380A248 CBZ W8, 0x380A284
	0x0380A24C LDR W8, [X21 + 0xC]!
	0x0380A250 LDUR W1, [X21 - 0x4]
	0x0380A254 CMP W8, 0x1
	0x0380A258 MOV X22, X21
	0x0380A25C B.NE 0x380A2AC
	0x0380A260 CMP W19, 0x0
	0x0380A264 CSET W2, NE
	0x0380A268 MOV X0, X20
	0x0380A26C LDP X20, X19, [X31 + 0x30]
	0x0380A270 LDP X22, X21, [X31 + 0x20]
	0x0380A274 LDP X30, X23, [X31 + 0x10]
	0x0380A278 MOV X3, X31
	0x0380A27C ADD X31, X31, 0x40
	0x0380A280 B 0x3762844
	0x0380A284 BL 0x1C16DFC
	0x0380A288 LDR X0, [X22]
	0x0380A28C MOV X22, X21
	0x0380A290 LDR W8, [X0 + 0xE0]
	0x0380A294 LDR W23, [X22 + 0xC]!
	0x0380A298 CBNZ W8, 0x380A2A0
	0x0380A29C BL 0x1C16DFC
	0x0380A2A0 LDR W1, [X21 + 0x8]
	0x0380A2A4 CMP W23, 0x1
	0x0380A2A8 B.EQ 0x380A260
	0x0380A2AC LDR W2, [X22]
	0x0380A2B0 MOV X0, X20
	0x0380A2B4 MOV W3, W19
	0x0380A2B8 LDP X20, X19, [X31 + 0x30]
	0x0380A2BC LDP X22, X21, [X31 + 0x20]
	0x0380A2C0 LDP X30, X23, [X31 + 0x10]
	0x0380A2C4 MOV X4, X31
	0x0380A2C8 ADD X31, X31, 0x40
	0x0380A2CC B 0x3762A84
	0x0380A2D0 BL 0x1C16DFC
	0x0380A2D4 LDR X0, [X22]
	0x0380A2D8 MOV X22, X21
	0x0380A2DC LDR W8, [X0 + 0xE0]
	0x0380A2E0 LDR W23, [X22 + 0xC]!
	0x0380A2E4 CBNZ W8, 0x380A2EC
	0x0380A2E8 BL 0x1C16DFC
	0x0380A2EC LDR W1, [X21 + 0x8]
	0x0380A2F0 CMP W23, 0x1
	0x0380A2F4 B.EQ 0x380A1CC
	0x0380A2F8 LDR W2, [X22]
	0x0380A2FC MOV X0, X20
	0x0380A300 MOV W3, W19
	0x0380A304 LDP X20, X19, [X31 + 0x30]
	0x0380A308 LDP X22, X21, [X31 + 0x20]
	0x0380A30C LDP X30, X23, [X31 + 0x10]
	0x0380A310 MOV X4, X31
	0x0380A314 ADD X31, X31, 0x40
	0x0380A318 B 0x3762C54

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBD8000
	007 Move W8, [X22+1130]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x912000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1130], W8
	020 Compare X21, 0
	021 JumpIfEqual {47}
	022 Compare X20, 0
	023 JumpIfEqual {54}
	024 Move X22, 0x912000
	025 Move X22, [X22+624]
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X22]
	032 Move X8, [X0+184]
	033 Move X0, [X8]
	034 Compare X0, 0
	035 JumpIfEqual {72}
	036 Move X1, X21
	037 Move X2, X20
	038 Move X3, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X4, X31
	044 Move X30, [X31+48]
	045 Call InputManager.RemoveStateChangeMonitor, X0, X1, X2, X3
	046 Return 
	047 Move X0, 0x8EF000
	048 Move X0, [X0+1320]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0x912000
	053 Move X0, [X0+3424]
	054 Move X0, 0x8EF000
	055 Move X0, [X0+1320]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0x941000
	060 Move X0, [X0+1200]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call ArgumentNullException..ctor, X0, X1
	066 Move X0, 0x941000
	067 Move X0, [X0+1240]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC
	072 Call 0x1C17F20

Method: System.Void AddChangeMonitorTimeout(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Double time, System.Int64 monitorIndex = -1, System.Int32 timerIndex = -1)

Disassembly:
	0x0380A31C ADRP X0, 0x911000
	0x0380A320 LDR X0, [X0 + 0xD18]
	0x0380A324 BL 0x1C16D08
	0x0380A328 BL 0x19903D0
	0x0380A32C LDR W8, [X21]
	0x0380A330 ADRP X0, 0x911000
	0x0380A334 STR W8, [X31 + 0x8]
	0x0380A338 LDR X0, [X0 + 0xD28]
	0x0380A33C BL 0x1C16D08
	0x0380A340 ADD X1, X31, 0x8
	0x0380A344 BL 0x1C16E04
	0x0380A348 MOV X19, X0
	0x0380A34C ADRP X0, 0x940000
	0x0380A350 LDR X0, [X0 + 0x4F0]
	0x0380A354 BL 0x1C16D08
	0x0380A358 MOV X1, X19
	0x0380A35C MOV X2, X31
	0x0380A360 BL 0x321EFD0
	0x0380A364 MOV X19, X0
	0x0380A368 ADRP X0, 0x8E9000
	0x0380A36C LDR X0, [X0 + 0x7D0]
	0x0380A370 BL 0x1C16D08
	0x0380A374 BL 0x1C16F10
	0x0380A378 MOV X1, X19
	0x0380A37C MOV X2, X31
	0x0380A380 MOV X20, X0
	0x0380A384 BL 0x33B2C70
	0x0380A388 ADRP X0, 0x940000
	0x0380A38C LDR X0, [X0 + 0x500]
	0x0380A390 BL 0x1C16D08
	0x0380A394 MOV X1, X0
	0x0380A398 MOV X0, X20
	0x0380A39C BL 0x1C16DEC
	0x0380A3A0 STR X30, [X31 - 0x30]!
	0x0380A3A4 STP X22, X21, [X31 + 0x10]
	0x0380A3A8 STP X20, X19, [X31 + 0x20]
	0x0380A3AC ADRP X22, 0xBD7000
	0x0380A3B0 ADRP X21, 0x911000
	0x0380A3B4 LDRB W8, [X22 + 0x474]
	0x0380A3B8 LDR X21, [X21 + 0xD18]
	0x0380A3BC MOV X19, X1
	0x0380A3C0 MOV X20, X0
	0x0380A3C4 TBNZ X8, 0x0, 0x380A3DC
	0x0380A3C8 ADRP X0, 0x911000
	0x0380A3CC LDR X0, [X0 + 0xD18]
	0x0380A3D0 BL 0x1C16CF4
	0x0380A3D4 MOVZ W8, 0x1
	0x0380A3D8 STRB W8, [X22 + 0x474]
	0x0380A3DC LDR X0, [X21]
	0x0380A3E0 LDR W8, [X0 + 0xE0]
	0x0380A3E4 CBNZ W8, 0x380A3EC
	0x0380A3E8 BL 0x1C16DFC
	0x0380A3EC LDP W8, W9, [X20]
	0x0380A3F0 MOVZ W10, 0x5420
	0x0380A3F4 SXTW X9, W9
	0x0380A3F8 MOVK W10, 0x494E0000
	0x0380A3FC CMP W8, W10
	0x0380A400 ADD X19, X9, X19

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xBD8000
	009 Move W8, [X23+1131]
	010 Move W19, W3
	011 Move X20, X2
	012 Move V8, V0
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x912000
	020 Move X0, [X0+624]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+1131], W8
	024 Compare X21, 0
	025 JumpIfEqual {53}
	026 Move X23, 0x912000
	027 Move X23, [X23+624]
	028 Move X0, [X23]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X23]
	034 Move X8, [X0+184]
	035 Move X0, [X8]
	036 Compare X0, 0
	037 JumpIfEqual {71}
	038 Move X1, X22
	039 Move X2, X21
	040 Move X3, X20
	041 Move W4, W19
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X22, [X31+32]
	045 Move X21, [X31+40]
	046 Move X30, [X31+16]
	047 Move X23, [X31+24]
	048 Move V0, V8
	049 Move X5, X31
	050 Move V8, [X31+64]
	051 Call InputManager.AddStateChangeMonitorTimeout, X0, X1, X2, V0, X3, X4
	052 Return 
	053 Move X0, 0x8EF000
	054 Move X0, [X0+1320]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X19, X0
	058 Move X0, 0x941000
	059 Move X0, [X0+1200]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Move X2, X31
	064 Call ArgumentNullException..ctor, X0, X1
	065 Move X0, 0x941000
	066 Move X0, [X0+1248]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Call 0x1C17DEC
	071 Call 0x1C17F20

Method: System.Void RemoveChangeMonitorTimeout(UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex = -1, System.Int32 timerIndex = -1)

Disassembly:
	0x0380A404 B.LE 0x380A468
	0x0380A408 MOVZ W9, 0x5954
	0x0380A40C MOVK W9, 0x53420000
	0x0380A410 CMP W8, W9
	0x0380A414 B.LE 0x380A4D4
	0x0380A418 MOVZ W9, 0x5254
	0x0380A41C MOVK W9, 0x53480000
	0x0380A420 CMP W8, W9
	0x0380A424 B.EQ 0x380A5D4
	0x0380A428 MOVZ W9, 0x4E54
	0x0380A42C MOVK W9, 0x55490000
	0x0380A430 CMP W8, W9
	0x0380A434 B.EQ 0x380A618
	0x0380A438 MOVZ W9, 0x4854
	0x0380A43C MOVK W9, 0x55530000
	0x0380A440 CMP W8, W9
	0x0380A444 B.NE 0x380A704
	0x0380A448 LDRH W8, [X19]
	0x0380A44C CBZ W8, 0x380A65C
	0x0380A450 MOVZ W9, 0xFFFF
	0x0380A454 CMP W8, W9
	0x0380A458 B.EQ 0x380A640
	0x0380A45C ADRP X9, 0xFFFFFFFFFD2E4000
	0x0380A460 LDR V0, [X9 + 0x168]
	0x0380A464 B 0x380A634
	0x0380A468 MOVZ W9, 0x5445
	0x0380A46C MOVK W9, 0x42590000
	0x0380A470 CMP W8, W9
	0x0380A474 B.LE 0x380A520
	0x0380A478 MOVZ W9, 0x4C20
	0x0380A47C MOVK W9, 0x44420000
	0x0380A480 CMP W8, W9
	0x0380A484 B.EQ 0x380A648
	0x0380A488 MOVZ W9, 0x5420
	0x0380A48C MOVK W9, 0x464C0000
	0x0380A490 CMP W8, W9
	0x0380A494 B.EQ 0x380A654
	0x0380A498 MOVZ W9, 0x5420
	0x0380A49C MOVK W9, 0x494E0000
	0x0380A4A0 CMP W8, W9
	0x0380A4A4 B.NE 0x380A704
	0x0380A4A8 LDR W8, [X19]
	0x0380A4AC MOVZ W9, 0x80000000
	0x0380A4B0 CMP W8, W9
	0x0380A4B4 B.EQ 0x380A6FC
	0x0380A4B8 MOVN W9, 0x80000000
	0x0380A4BC CMP W8, W9
	0x0380A4C0 B.EQ 0x380A640
	0x0380A4C4 ADRP X9, 0xFFFFFFFFFD2E3000
	0x0380A4C8 LDR V0, [X9 + 0x718]
	0x0380A4CC MOVZ X9, 0x41E00000
	0x0380A4D0 B 0x380A600

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBD8000
	007 Move W8, [X22+1132]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x912000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1132], W8
	020 Compare X21, 0
	021 JumpIfEqual {45}
	022 Move X22, 0x912000
	023 Move X22, [X22+624]
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X22]
	030 Move X8, [X0+184]
	031 Move X0, [X8]
	032 Compare X0, 0
	033 JumpIfEqual {63}
	034 Move X1, X21
	035 Move X2, X20
	036 Move W3, W19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X4, X31
	042 Move X30, [X31+48]
	043 Call InputManager.RemoveStateChangeMonitorTimeout, X0, X1, X2, X3
	044 Return 
	045 Move X0, 0x8EF000
	046 Move X0, [X0+1320]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X19, X0
	050 Move X0, 0x941000
	051 Move X0, [X0+1200]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Move X2, X31
	056 Call ArgumentNullException..ctor, X0, X1
	057 Move X0, 0x941000
	058 Move X0, [X0+1256]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC
	063 Call 0x1C17F20

