Type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/Record

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* get_header()

Disassembly:
	0x025C24B4 MOV X0, X8
	0x025C24B8 LDR X10, [X0 + 0xC0]
	0x025C24BC LDR X10, [X10 + 0x28]
	0x025C24C0 LDR X21, [X10]
	0x025C24C4 TBNZ X9, 0x0, 0x25C24D4
	0x025C24C8 MOV X0, X8
	0x025C24CC BL 0x1C5C684
	0x025C24D0 MOV X8, X0
	0x025C24D4 LDR X8, [X8 + 0xC0]
	0x025C24D8 MOV X0, X19
	0x025C24DC LDR X1, [X8 + 0x28]
	0x025C24E0 BLR X21
	0x025C24E4 LDR X8, [X20 + 0x20]
	0x025C24E8 ADD X9, X8, 0x135
	0x025C24EC LDRH W9, [X9]
	0x025C24F0 TBNZ X9, 0x0, 0x25C250C
	0x025C24F4 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X1+32]
	006 Move X20, [X19]
	007 Move W8, [X0+309]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {13}
	012 Call 0x1C5D684
	013 Compare X20, 0
	014 JumpIfEqual {24}
	015 Move W8, [X19+8]
	016 Move X0, X20
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X2, X31
	020 Subtract W1, W8, 1
	021 Move X30, [X31+32]
	022 Call InputStateHistory.GetRecord, X0, X1
	023 Return X0
	024 Call 0x1C17F20

Method: System.Int32 get_recordIndex()

Disassembly:
	0x025C24F8 BL 0x1C5C684
	0x025C24FC LDR X8, [X20 + 0x20]
	0x025C2500 ADD X9, X8, 0x135

ISIL:
	001 Move W8, [X0+8]
	002 Subtract W0, W8, 1
	003 Return X0

Method: System.Boolean get_valid()

Disassembly:
	0x025C2504 LDRH W9, [X9]
	0x025C2508 B 0x25C2510
	0x025C250C MOV X0, X8
	0x025C2510 LDR X10, [X0 + 0xC0]
	0x025C2514 LDR X10, [X10 + 0x20]
	0x025C2518 LDR X20, [X10]
	0x025C251C TBNZ X9, 0x0, 0x25C252C
	0x025C2520 MOV X0, X8
	0x025C2524 BL 0x1C5C684
	0x025C2528 MOV X8, X0
	0x025C252C LDR X8, [X8 + 0xC0]
	0x025C2530 MOV X0, X19
	0x025C2534 LDR X1, [X8 + 0x20]
	0x025C2538 BLR X20
	0x025C253C CBZ X0, 0x25C2550
	0x025C2540 LDR V0, [X0]
	0x025C2544 LDP X20, X19, [X31 + 0x10]
	0x025C2548 LDP X30, X21, [X31], #0x20
	0x025C254C RET
	0x025C2550 BL 0x1C16F20
	0x025C2554 SUB X31, X31, 0x40
	0x025C2558 STR X30, [X31 + 0x10]
	0x025C255C STP X22, X21, [X31 + 0x20]
	0x025C2560 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Compare X8, 0
	005 JumpIfEqual {27}
	006 Move W8, [X0+8]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfEqual {27}
	010 Move X0, [X1+32]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move X8, [X0+192]
	018 Move X0, X19
	019 Move X1, [X8+32]
	020 Call 0x25C24B4, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move W8, [X0+8]
	024 Move W9, [X19+12]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move W0, W31
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return X0
	031 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> get_owner()

Disassembly:
	0x025C2564 ADRP X21, 0x1E17000
	0x025C2568 LDRB W8, [X21 + 0xF2D]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Int32 get_index()

Disassembly:
	0x025C256C MOV X19, X1
	0x025C2570 MOV X20, X0
	0x025C2574 TBNZ X8, 0x0, 0x25C2598
	0x025C2578 ADRP X0, 0x1B59000
	0x025C257C LDR X0, [X0 + 0xD40]
	0x025C2580 BL 0x1C16CF4
	0x025C2584 ADRP X0, 0x1B59000
	0x025C2588 LDR X0, [X0 + 0xD48]
	0x025C258C BL 0x1C16CF4
	0x025C2590 MOVZ W8, 0x1
	0x025C2594 STRB W8, [X21 + 0xF2D]
	0x025C2598 STP X31, X31, [X31]
	0x025C259C LDR X8, [X19 + 0x20]
	0x025C25A0 ADD X9, X8, 0x135
	0x025C25A4 LDRH W9, [X9]
	0x025C25A8 TBNZ X9, 0x0, 0x25C25C4
	0x025C25AC MOV X0, X8
	0x025C25B0 BL 0x1C5C684
	0x025C25B4 LDR X8, [X19 + 0x20]
	0x025C25B8 ADD X9, X8, 0x135
	0x025C25BC LDRH W9, [X9]
	0x025C25C0 B 0x25C25C8
	0x025C25C4 MOV X0, X8
	0x025C25C8 LDR X10, [X0 + 0xC0]
	0x025C25CC LDR X10, [X10 + 0x28]
	0x025C25D0 LDR X21, [X10]
	0x025C25D4 TBNZ X9, 0x0, 0x25C25E4
	0x025C25D8 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, X19
	017 Move X1, [X8+40]
	018 Call 0x25C2E78, X0
	019 Move X0, [X20+32]
	020 Move X20, [X19]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Compare X20, 0
	028 JumpIfEqual {38}
	029 Move W8, [X19+8]
	030 Move X0, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X2, X31
	034 Subtract W1, W8, 1
	035 Move X30, [X31+32]
	036 Call InputStateHistory.RecordIndexToUserIndex, X0, X1
	037 Return X0
	038 Call 0x1C17F20

Method: System.Double get_time()

Disassembly:
	0x025C25DC BL 0x1C5C684
	0x025C25E0 MOV X8, X0
	0x025C25E4 LDR X8, [X8 + 0xC0]
	0x025C25E8 MOV X0, X20
	0x025C25EC LDR X1, [X8 + 0x28]
	0x025C25F0 BLR X21
	0x025C25F4 LDR X0, [X20]
	0x025C25F8 CBZ X0, 0x25C2724
	0x025C25FC ADRP X21, 0x1B59000
	0x025C2600 LDR X21, [X21 + 0xD48]
	0x025C2604 MOV X1, X31
	0x025C2608 BL 0x380D014
	0x025C260C UBFM X8, X1, 0x20, 0x3F
	0x025C2610 CMP X8, 0x1
	0x025C2614 STP X0, X1, [X31]
	0x025C2618 B.NE 0x25C262C
	0x025C261C LDR X8, [X20]
	0x025C2620 CBZ X8, 0x25C2724
	0x025C2624 LDRB W8, [X8 + 0x60]
	0x025C2628 CBZ W8, 0x25C2714
	0x025C262C LDR X8, [X19 + 0x20]
	0x025C2630 ADD X9, X8, 0x135
	0x025C2634 LDRH W9, [X9]
	0x025C2638 TBNZ X9, 0x0, 0x25C2654
	0x025C263C MOV X0, X8
	0x025C2640 BL 0x1C5C684
	0x025C2644 LDR X8, [X19 + 0x20]
	0x025C2648 ADD X9, X8, 0x135

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, X19
	017 Move X1, [X8+40]
	018 Call 0x25C2E78, X0
	019 Move X0, [X20+32]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move X8, [X0+192]
	027 Move X0, X19
	028 Move X1, [X8+32]
	029 Call 0x25C24B4, X0
	030 Compare X0, 0
	031 JumpIfEqual {37}
	032 Move V0, [X0]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return V0
	037 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputControl`1<TValue> get_control()

Disassembly:
	0x025C264C LDRH W9, [X9]
	0x025C2650 B 0x25C2658
	0x025C2654 MOV X0, X8
	0x025C2658 LDR X10, [X0 + 0xC0]
	0x025C265C LDR X10, [X10 + 0x20]
	0x025C2660 LDR X22, [X10]
	0x025C2664 TBNZ X9, 0x0, 0x25C2674
	0x025C2668 MOV X0, X8
	0x025C266C BL 0x1C5C684
	0x025C2670 MOV X8, X0
	0x025C2674 LDR X8, [X8 + 0xC0]
	0x025C2678 MOV X0, X20
	0x025C267C LDR X1, [X8 + 0x20]
	0x025C2680 BLR X22
	0x025C2684 CBZ X0, 0x25C2724
	0x025C2688 LDR W1, [X0 + 0xC]
	0x025C268C LDR X2, [X21]
	0x025C2690 ADD X0, X31, 0x0
	0x025C2694 BL 0x24FDB3C
	0x025C2698 LDR X8, [X19 + 0x20]
	0x025C269C MOV X19, X0
	0x025C26A0 LDRB W9, [X8 + 0x135]
	0x025C26A4 TBNZ X9, 0x0, 0x25C26B4
	0x025C26A8 MOV X0, X8
	0x025C26AC BL 0x1C5C684
	0x025C26B0 MOV X8, X0
	0x025C26B4 LDR X8, [X8 + 0xC0]
	0x025C26B8 LDR X1, [X8 + 0x30]
	0x025C26BC LDRB W8, [X1 + 0x135]
	0x025C26C0 TBNZ X8, 0x0, 0x25C26D0
	0x025C26C4 MOV X0, X1
	0x025C26C8 BL 0x1C5C684
	0x025C26CC MOV X1, X0
	0x025C26D0 CBZ X19, 0x25C26FC
	0x025C26D4 LDR X8, [X19]
	0x025C26D8 LDRB W9, [X1 + 0x130]
	0x025C26DC LDRB W10, [X8 + 0x130]
	0x025C26E0 CMP W10, W9
	0x025C26E4 B.CC 0x25C2728
	0x025C26E8 LDR X8, [X8 + 0xC8]
	0x025C26EC ADD X8, X8, X9, 0x3, LSL
	0x025C26F0 LDUR X8, [X8 - 0x8]
	0x025C26F4 CMP X8, X1
	0x025C26F8 B.NE 0x25C2728
	0x025C26FC MOV X0, X19
	0x025C2700 LDP X20, X19, [X31 + 0x30]
	0x025C2704 LDP X22, X21, [X31 + 0x20]
	0x025C2708 LDR X30, [X31 + 0x10]
	0x025C270C ADD X31, X31, 0x40
	0x025C2710 RET
	0x025C2714 LDR X2, [X21]
	0x025C2718 ADD X0, X31, 0x0
	0x025C271C MOV W1, W31
	0x025C2720 B 0x25C2694
	0x025C2724 BL 0x1C16F20
	0x025C2728 MOV X0, X19
	0x025C272C BL 0x1C171E0
	0x025C2730 STR X30, [X31 - 0x30]!
	0x025C2734 STP X22, X21, [X31 + 0x10]
	0x025C2738 STP X20, X19, [X31 + 0x20]
	0x025C273C LDR X8, [X1 + 0x20]
	0x025C2740 MOV X19, X1
	0x025C2744 MOV X20, X0
	0x025C2748 ADD X9, X8, 0x135
	0x025C274C LDRH W9, [X9]
	0x025C2750 TBNZ X9, 0x0, 0x25C276C
	0x025C2754 MOV X0, X8
	0x025C2758 BL 0x1C5C684
	0x025C275C LDR X8, [X19 + 0x20]
	0x025C2760 ADD X9, X8, 0x135
	0x025C2764 LDRH W9, [X9]
	0x025C2768 B 0x25C2770
	0x025C276C MOV X0, X8
	0x025C2770 LDR X10, [X0 + 0xC0]
	0x025C2774 LDR X10, [X10 + 0x28]
	0x025C2778 LDR X21, [X10]
	0x025C277C TBNZ X9, 0x0, 0x25C278C
	0x025C2780 MOV X0, X8
	0x025C2784 BL 0x1C5C684
	0x025C2788 MOV X8, X0
	0x025C278C LDR X8, [X8 + 0xC0]
	0x025C2790 MOV X0, X20
	0x025C2794 LDR X1, [X8 + 0x28]
	0x025C2798 BLR X21
	0x025C279C LDR X8, [X19 + 0x20]
	0x025C27A0 LDR X21, [X20]
	0x025C27A4 ADD X9, X8, 0x135
	0x025C27A8 LDRH W9, [X9]
	0x025C27AC TBNZ X9, 0x0, 0x25C27C8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1E18000
	007 Move W8, [X21+3882]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x1B5A000
	015 Move X0, [X0+3392]
	016 Call 0x1C17CF4
	017 Move X0, 0x1B5A000
	018 Move X0, [X0+3400]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3882], W8
	022 Move [X31], X31
	023 Move [X31+8], X31
	024 Move X0, [X19+32]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Move X8, [X0+192]
	032 Move X0, X20
	033 Move X1, [X8+40]
	034 Call 0x25C2E78, X0
	035 Move X0, [X20]
	036 Compare X0, 0
	037 JumpIfEqual {111}
	038 Move X21, 0x1B5A000
	039 Move X21, [X21+3400]
	040 Move X1, X31
	041 Call InputStateHistory.get_controls, X0
	042 Move X8, X1
	043 ShiftRight X8, 32
	044 And X8, X8, 0x7FFFFFFF
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X31], X0
	047 Move [X31+8], X1
	048 Move X8, [X20]
	049 Compare X8, 0
	050 JumpIfEqual {111}
	051 Move W8, [X8+96]
	052 Compare W8, 0
	053 JumpIfEqual {108}
	054 Move X0, [X19+32]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move X8, [X0+192]
	062 Move X0, X20
	063 Move X1, [X8+32]
	064 Call 0x25C24B4, X0
	065 Compare X0, 0
	066 JumpIfEqual {111}
	067 Move W1, [X0+12]
	068 Move X2, [X21]
	069 Add X0, X31, 0
	070 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	071 Move X8, [X19+32]
	072 Move X19, X0
	073 Move W9, [X8+309]
	074 Move TEMP, X9
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {81}
	078 Move X0, X8
	079 Call 0x1C5D684
	080 Move X8, X0
	081 Move X8, [X8+192]
	082 Move X1, [X8+48]
	083 Move W8, [X1+309]
	084 Move TEMP, X8
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {91}
	088 Move X0, X1
	089 Call 0x1C5D684
	090 Move X1, X0
	091 Compare X19, 0
	092 JumpIfEqual {101}
	093 Move X8, [X19]
	094 Move W9, [X1+304]
	095 Move W10, [X8+304]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X8, [X8+200]
	098 Add X8, X8, X9
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, X19
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X30, [X31+16]
	105 Move X21, [X31+24]
	106 Add X31, X31, 48
	107 Return X0
	108 Move X2, [X21]
	109 Add X0, X31, 0
	110 Move W1, W31
	111 Call 0x1C17F20
	112 Move X0, X19
	113 Call 0x1C181E0

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/Record<TValue> get_next()

Disassembly:
	0x025C27B0 MOV X0, X8
	0x025C27B4 BL 0x1C5C684
	0x025C27B8 LDR X8, [X19 + 0x20]
	0x025C27BC ADD X9, X8, 0x135
	0x025C27C0 LDRH W9, [X9]
	0x025C27C4 B 0x25C27CC
	0x025C27C8 MOV X0, X8
	0x025C27CC LDR X10, [X0 + 0xC0]
	0x025C27D0 LDR X10, [X10 + 0x10]
	0x025C27D4 LDR X22, [X10]
	0x025C27D8 TBNZ X9, 0x0, 0x25C27E8
	0x025C27DC MOV X0, X8
	0x025C27E0 BL 0x1C5C684
	0x025C27E4 MOV X8, X0
	0x025C27E8 LDR X8, [X8 + 0xC0]
	0x025C27EC MOV X0, X20
	0x025C27F0 LDR X1, [X8 + 0x10]
	0x025C27F4 BLR X22
	0x025C27F8 CBZ X21, 0x25C2894
	0x025C27FC MOV W1, W0
	0x025C2800 MOV X0, X21
	0x025C2804 MOV X2, X31
	0x025C2808 BL 0x380E854
	0x025C280C LDR X8, [X20]
	0x025C2810 CBZ X8, 0x25C2894
	0x025C2814 LDR W9, [X8 + 0x44]
	0x025C2818 ADD W1, W0, 0x1
	0x025C281C CMP W1, W9
	0x025C2820 B.GE 0x25C2878
	0x025C2824 MOV X0, X8
	0x025C2828 MOV X2, X31
	0x025C282C BL 0x380D18C
	0x025C2830 LDR X20, [X20]
	0x025C2834 CBZ X20, 0x25C2894
	0x025C2838 MOV W21, W0
	0x025C283C MOV X0, X20
	0x025C2840 MOV W1, W21
	0x025C2844 MOV X2, X31
	0x025C2848 BL 0x380D1A4
	0x025C284C LDR X8, [X19 + 0x20]
	0x025C2850 MOV X19, X0
	0x025C2854 LDRB W9, [X8 + 0x135]
	0x025C2858 TBNZ X9, 0x0, 0x25C2864
	0x025C285C MOV X0, X8
	0x025C2860 BL 0x1C5C684
	0x025C2864 CBZ X19, 0x25C2894
	0x025C2868 LDR W8, [X19 + 0x8]
	0x025C286C ADD W1, W21, 0x1
	0x025C2870 BFM X1, X8, 0x20, 0x1F
	0x025C2874 B 0x25C2880
	0x025C2878 MOV X20, X31
	0x025C287C MOV X1, X31
	0x025C2880 MOV X0, X20
	0x025C2884 LDP X20, X19, [X31 + 0x20]
	0x025C2888 LDP X22, X21, [X31 + 0x10]
	0x025C288C LDR X30, [X31], #0x30
	0x025C2890 RET
	0x025C2894 BL 0x1C16F20
	0x025C2898 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, X20
	018 Move X1, [X8+40]
	019 Call 0x25C2E78, X0
	020 Move X0, [X19+32]
	021 Move X21, [X20]
	022 Move W8, [X0+309]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {28}
	027 Call 0x1C5D684
	028 Compare X21, 0
	029 JumpIfEqual {74}
	030 Move W8, [X20+8]
	031 Move X0, X21
	032 Move X2, X31
	033 Subtract W1, W8, 1
	034 Call InputStateHistory.RecordIndexToUserIndex, X0, X1
	035 Move X8, [X20]
	036 Compare X8, 0
	037 JumpIfEqual {74}
	038 Move W9, [X8+68]
	039 Add W1, W0, 1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X8
	042 Move X2, X31
	043 Call InputStateHistory.UserIndexToRecordIndex, X0, X1
	044 Move X20, [X20]
	045 Compare X20, 0
	046 JumpIfEqual {74}
	047 Move W21, W0
	048 Move X0, X20
	049 Move W1, W21
	050 Move X2, X31
	051 Call InputStateHistory.GetRecord, X0, X1
	052 Move X8, [X19+32]
	053 Move X19, X0
	054 Move W9, [X8+309]
	055 Move TEMP, X9
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {61}
	059 Move X0, X8
	060 Call 0x1C5D684
	061 Compare X19, 0
	062 JumpIfEqual {74}
	063 Move W8, [X19+8]
	064 Add W1, W21, 1
	065 NotImplemented "Instruction BFM not yet implemented."
	066 Move X20, X31
	067 Move X1, X31
	068 Move X0, X20
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return X0
	074 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/Record<TValue> get_previous()

Disassembly:
	0x025C289C STP X22, X21, [X31 + 0x10]
	0x025C28A0 STP X20, X19, [X31 + 0x20]
	0x025C28A4 LDR X8, [X1 + 0x20]
	0x025C28A8 MOV X19, X1
	0x025C28AC MOV X20, X0
	0x025C28B0 ADD X9, X8, 0x135
	0x025C28B4 LDRH W9, [X9]
	0x025C28B8 TBNZ X9, 0x0, 0x25C28D4
	0x025C28BC MOV X0, X8
	0x025C28C0 BL 0x1C5C684
	0x025C28C4 LDR X8, [X19 + 0x20]
	0x025C28C8 ADD X9, X8, 0x135
	0x025C28CC LDRH W9, [X9]
	0x025C28D0 B 0x25C28D8
	0x025C28D4 MOV X0, X8
	0x025C28D8 LDR X10, [X0 + 0xC0]
	0x025C28DC LDR X10, [X10 + 0x28]
	0x025C28E0 LDR X21, [X10]
	0x025C28E4 TBNZ X9, 0x0, 0x25C28F4
	0x025C28E8 MOV X0, X8
	0x025C28EC BL 0x1C5C684
	0x025C28F0 MOV X8, X0
	0x025C28F4 LDR X8, [X8 + 0xC0]
	0x025C28F8 MOV X0, X20
	0x025C28FC LDR X1, [X8 + 0x28]
	0x025C2900 BLR X21
	0x025C2904 LDR X8, [X19 + 0x20]
	0x025C2908 LDR X21, [X20]
	0x025C290C ADD X9, X8, 0x135
	0x025C2910 LDRH W9, [X9]
	0x025C2914 TBNZ X9, 0x0, 0x25C2930
	0x025C2918 MOV X0, X8
	0x025C291C BL 0x1C5C684
	0x025C2920 LDR X8, [X19 + 0x20]
	0x025C2924 ADD X9, X8, 0x135
	0x025C2928 LDRH W9, [X9]
	0x025C292C B 0x25C2934
	0x025C2930 MOV X0, X8
	0x025C2934 LDR X10, [X0 + 0xC0]
	0x025C2938 LDR X10, [X10 + 0x10]
	0x025C293C LDR X22, [X10]
	0x025C2940 TBNZ X9, 0x0, 0x25C2950
	0x025C2944 MOV X0, X8
	0x025C2948 BL 0x1C5C684
	0x025C294C MOV X8, X0
	0x025C2950 LDR X8, [X8 + 0xC0]
	0x025C2954 MOV X0, X20
	0x025C2958 LDR X1, [X8 + 0x10]
	0x025C295C BLR X22
	0x025C2960 CBZ X21, 0x25C29F0
	0x025C2964 MOV W1, W0
	0x025C2968 MOV X0, X21
	0x025C296C MOV X2, X31
	0x025C2970 BL 0x380E854
	0x025C2974 SUBS W1, W0, 0x1
	0x025C2978 B.MI 0x25C29D4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, X20
	018 Move X1, [X8+40]
	019 Call 0x25C2E78, X0
	020 Move X0, [X19+32]
	021 Move X21, [X20]
	022 Move W8, [X0+309]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {28}
	027 Call 0x1C5D684
	028 Compare X21, 0
	029 JumpIfEqual {71}
	030 Move W8, [X20+8]
	031 Move X0, X21
	032 Move X2, X31
	033 Subtract W1, W8, 1
	034 Call InputStateHistory.RecordIndexToUserIndex, X0, X1
	035 Subtract W1, W0, 1
	036 Move X0, [X20]
	037 Compare X0, 0
	038 JumpIfEqual {71}
	039 Move X2, X31
	040 Call InputStateHistory.UserIndexToRecordIndex, X0, X1
	041 Move X20, [X20]
	042 Compare X20, 0
	043 JumpIfEqual {71}
	044 Move W21, W0
	045 Move X0, X20
	046 Move W1, W21
	047 Move X2, X31
	048 Call InputStateHistory.GetRecord, X0, X1
	049 Move X8, [X19+32]
	050 Move X19, X0
	051 Move W9, [X8+309]
	052 Move TEMP, X9
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {58}
	056 Move X0, X8
	057 Call 0x1C5D684
	058 Compare X19, 0
	059 JumpIfEqual {71}
	060 Move W8, [X19+8]
	061 Add W1, W21, 1
	062 NotImplemented "Instruction BFM not yet implemented."
	063 Move X20, X31
	064 Move X1, X31
	065 Move X0, X20
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return X0
	071 Call 0x1C17F20

Method: System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> owner, System.Int32 index, UnityEngine.InputSystem.LowLevel.InputStateHistory/RecordHeader* header)

Disassembly:
	0x025C297C LDR X0, [X20]
	0x025C2980 CBZ X0, 0x25C29F0
	0x025C2984 MOV X2, X31
	0x025C2988 BL 0x380D18C
	0x025C298C LDR X20, [X20]
	0x025C2990 CBZ X20, 0x25C29F0
	0x025C2994 MOV W21, W0
	0x025C2998 MOV X0, X20
	0x025C299C MOV W1, W21
	0x025C29A0 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Add W8, W2, 1
	003 Move [X0], X1
	004 Move [X0+8], W8
	005 Compare X3, 0
	006 JumpIfEqual {11}
	007 Move W8, [X3+8]
	008 Move [X0+12], W8
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> owner, System.Int32 index)

Disassembly:
	0x025C29A4 BL 0x380D1A4
	0x025C29A8 LDR X8, [X19 + 0x20]
	0x025C29AC MOV X19, X0
	0x025C29B0 LDRB W9, [X8 + 0x135]

ISIL:
	001 Add W8, W2, 1
	002 Move [X0], X1
	003 Move [X0+8], W8
	004 Move [X0+12], W31
	005 Return 

Method: TValue ReadValue()

Disassembly:
	0x025C29B4 TBNZ X9, 0x0, 0x25C29C0
	0x025C29B8 MOV X0, X8
	0x025C29BC BL 0x1C5C684
	0x025C29C0 CBZ X19, 0x25C29F0
	0x025C29C4 LDR W8, [X19 + 0x8]
	0x025C29C8 ADD W1, W21, 0x1
	0x025C29CC BFM X1, X8, 0x20, 0x1F
	0x025C29D0 B 0x25C29DC
	0x025C29D4 MOV X20, X31
	0x025C29D8 MOV X1, X31
	0x025C29DC MOV X0, X20
	0x025C29E0 LDP X20, X19, [X31 + 0x20]
	0x025C29E4 LDP X22, X21, [X31 + 0x10]
	0x025C29E8 LDR X30, [X31], #0x30
	0x025C29EC RET
	0x025C29F0 BL 0x1C16F20
	0x025C29F4 STR X30, [X31 - 0x10]!
	0x025C29F8 ADD W8, W2, 0x1
	0x025C29FC STR X1, [X0]
	0x025C2A00 STR W8, [X0 + 0x8]
	0x025C2A04 CBZ X3, 0x25C2A18
	0x025C2A08 LDR W8, [X3 + 0x8]
	0x025C2A0C STR W8, [X0 + 0xC]
	0x025C2A10 LDR X30, [X31], #0x10
	0x025C2A14 RET
	0x025C2A18 BL 0x1C16F20
	0x025C2A1C ADD W8, W2, 0x1
	0x025C2A20 STR X1, [X0]
	0x025C2A24 STP W8, W31, [X0 + 0x8]
	0x025C2A28 RET
	0x025C2A2C STP X29, X30, [X31 - 0x50]!
	0x025C2A30 STP X26, X25, [X31 + 0x10]
	0x025C2A34 STP X24, X23, [X31 + 0x20]
	0x025C2A38 STP X22, X21, [X31 + 0x30]
	0x025C2A3C STP X20, X19, [X31 + 0x40]
	0x025C2A40 ADD X29, X31, 0x0
	0x025C2A44 SUB X31, X31, 0x20
	0x025C2A48 MRS X25, 0xC000
	0x025C2A4C LDR X8, [X25 + 0x28]
	0x025C2A50 MOV X22, X2
	0x025C2A54 MOV X19, X1
	0x025C2A58 MOV X23, X0
	0x025C2A5C STUR X8, [X29 - 0x8]
	0x025C2A60 LDR X8, [X2 + 0x20]
	0x025C2A64 ADD X9, X8, 0x135
	0x025C2A68 LDRH W9, [X9]
	0x025C2A6C TBNZ X9, 0x0, 0x25C2A88
	0x025C2A70 MOV X0, X8
	0x025C2A74 BL 0x1C5C684
	0x025C2A78 LDR X8, [X22 + 0x20]
	0x025C2A7C ADD X9, X8, 0x135
	0x025C2A80 LDRH W9, [X9]
	0x025C2A84 B 0x25C2A8C
	0x025C2A88 MOV X0, X8
	0x025C2A8C LDR X10, [X0 + 0xC0]
	0x025C2A90 LDR X10, [X10 + 0x48]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X9, [X23+40]
	010 Move X21, X0
	011 Move X20, X1
	012 Move X19, X8
	013 Move [X31+56], X9
	014 Move X0, [X1+32]
	015 Move W9, [X0+309]
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move X8, [X0+192]
	022 Move X0, X21
	023 Move X1, [X8+40]
	024 Call 0x25C2E78, X0
	025 Move X0, [X20+32]
	026 Move X22, [X21]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move X8, [X0+192]
	034 Move X0, X21
	035 Move X1, [X8+32]
	036 Call 0x25C24B4, X0
	037 Compare X22, 0
	038 JumpIfEqual {72}
	039 Move X21, X0
	040 Move X0, [X20+32]
	041 Move W8, [X0+309]
	042 Move TEMP, X8
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {47}
	046 Call 0x1C5D684
	047 Move X8, [X0+192]
	048 Move X0, X22
	049 Move X1, X21
	050 Move X2, [X8+64]
	051 Add X8, X31, 0
	052 Call 0x220BE2C, X0, X1
	053 Move X8, [X31+48]
	054 Move V1, [X31+16]
	055 Move V0, [X31+32]
	056 Move V2, [X31]
	057 Move [X19+48], X8
	058 Move [X19+16], V1
	059 Move [X19+24], V0
	060 Move [X19], V2
	061 Move X8, [X23+40]
	062 Move X9, [X31+56]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X20, [X31+96]
	065 Move X19, [X31+104]
	066 Move X22, [X31+80]
	067 Move X21, [X31+88]
	068 Move X30, [X31+64]
	069 Move X23, [X31+72]
	070 Add X31, X31, 112
	071 Return X0
	072 Call 0x1C17F20
	073 Call 0x3EB2B20

Method: System.Void* GetUnsafeMemoryPtr()

Disassembly:
	0x025C2A94 LDR W20, [X10 + 0xFC]
	0x025C2A98 ADD X10, X31, 0x0
	0x025C2A9C ADD X11, X20, 0xF
	0x025C2AA0 AND X11, X11, 0x1FFFFFFFF
	0x025C2AA4 SUB X21, X10, X11
	0x025C2AA8 ADD X31, X21, 0x0
	0x025C2AAC TBNZ X9, 0x0, 0x25C2AC8
	0x025C2AB0 MOV X0, X8
	0x025C2AB4 BL 0x1C5C684
	0x025C2AB8 LDR X8, [X22 + 0x20]
	0x025C2ABC ADD X9, X8, 0x135
	0x025C2AC0 LDRH W9, [X9]
	0x025C2AC4 B 0x25C2ACC
	0x025C2AC8 MOV X0, X8
	0x025C2ACC LDR X10, [X0 + 0xC0]
	0x025C2AD0 LDR X10, [X10 + 0x28]
	0x025C2AD4 LDR X24, [X10]
	0x025C2AD8 TBNZ X9, 0x0, 0x25C2AE8
	0x025C2ADC MOV X0, X8
	0x025C2AE0 BL 0x1C5C684
	0x025C2AE4 MOV X8, X0
	0x025C2AE8 LDR X8, [X8 + 0xC0]
	0x025C2AEC MOV X0, X23
	0x025C2AF0 LDR X1, [X8 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, X19
	017 Move X1, [X8+40]
	018 Call 0x25C2E78, X0
	019 Move X0, [X20+32]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move X8, [X0+192]
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, [X8+80]
	031 Move X30, [X31+32]

Method: System.Void* GetUnsafeMemoryPtrUnchecked()

Disassembly:
	0x025C2AF4 BLR X24
	0x025C2AF8 LDR X8, [X22 + 0x20]
	0x025C2AFC LDR X24, [X23]
	0x025C2B00 ADD X9, X8, 0x135
	0x025C2B04 LDRH W9, [X9]
	0x025C2B08 TBNZ X9, 0x0, 0x25C2B24
	0x025C2B0C MOV X0, X8
	0x025C2B10 BL 0x1C5C684
	0x025C2B14 LDR X8, [X22 + 0x20]
	0x025C2B18 ADD X9, X8, 0x135
	0x025C2B1C LDRH W9, [X9]
	0x025C2B20 B 0x25C2B28
	0x025C2B24 MOV X0, X8
	0x025C2B28 LDR X10, [X0 + 0xC0]
	0x025C2B2C LDR X10, [X10 + 0x20]
	0x025C2B30 LDR X26, [X10]
	0x025C2B34 TBNZ X9, 0x0, 0x25C2B44
	0x025C2B38 MOV X0, X8
	0x025C2B3C BL 0x1C5C684
	0x025C2B40 MOV X8, X0
	0x025C2B44 LDR X8, [X8 + 0xC0]
	0x025C2B48 MOV X0, X23
	0x025C2B4C LDR X1, [X8 + 0x20]
	0x025C2B50 BLR X26
	0x025C2B54 CBZ X24, 0x25C2C04
	0x025C2B58 LDR X8, [X22 + 0x20]
	0x025C2B5C MOV X23, X0
	0x025C2B60 ADD X9, X8, 0x135
	0x025C2B64 LDRH W9, [X9]
	0x025C2B68 TBNZ X9, 0x0, 0x25C2B84
	0x025C2B6C MOV X0, X8
	0x025C2B70 BL 0x1C5C684
	0x025C2B74 LDR X8, [X22 + 0x20]
	0x025C2B78 ADD X9, X8, 0x135
	0x025C2B7C LDRH W9, [X9]
	0x025C2B80 B 0x25C2B88
	0x025C2B84 MOV X0, X8
	0x025C2B88 LDR X10, [X0 + 0xC0]
	0x025C2B8C LDR X10, [X10 + 0x40]
	0x025C2B90 LDR X22, [X10]
	0x025C2B94 TBNZ X9, 0x0, 0x25C2BA4
	0x025C2B98 MOV X0, X8
	0x025C2B9C BL 0x1C5C684
	0x025C2BA0 MOV X8, X0
	0x025C2BA4 LDR X8, [X8 + 0xC0]
	0x025C2BA8 SUB X3, X29, 0x18
	0x025C2BAC MOV X0, X22
	0x025C2BB0 MOV X2, X24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1E18000
	006 Move W8, [X21+3883]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1B5A000
	014 Move X0, [X0+3392]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3883], W8
	018 Move X0, [X19]
	019 Compare X0, 0
	020 JumpIfEqual {69}
	021 Move X1, X31
	022 Call InputStateHistory.get_controls, X0
	023 Move X8, X1
	024 ShiftRight X8, 32
	025 And X8, X8, 0x7FFFFFFF
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X19]
	028 Compare X8, 0
	029 JumpIfEqual {69}
	030 Move W8, [X8+96]
	031 Compare W8, 0
	032 JumpIfEqual {51}
	033 Move X0, [X20+32]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X0+192]
	041 Move X0, X19
	042 Move X1, [X8+32]
	043 Call 0x25C24B4, X0
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call RecordHeader.get_statePtrWithControlIndex, X0
	050 Return X0
	051 Move X0, [X20+32]
	052 Move W8, [X0+309]
	053 Move TEMP, X8
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {58}
	057 Call 0x1C5D684
	058 Move X8, [X0+192]
	059 Move X0, X19
	060 Move X1, [X8+32]
	061 Call 0x25C24B4, X0
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X1, X31
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Call RecordHeader.get_statePtrWithoutControlIndex, X0
	068 Return X0
	069 Call 0x1C17F20

Method: System.Void* GetUnsafeExtraMemoryPtr()

Disassembly:
	0x025C2BB4 LDR X1, [X8 + 0x40]
	0x025C2BB8 STP X23, X21, [X29 - 0x18]
	0x025C2BBC MOV X4, X21
	0x025C2BC0 LDR X8, [X1 + 0x10]
	0x025C2BC4 BLR X8
	0x025C2BC8 MOV X0, X19
	0x025C2BCC MOV X1, X21
	0x025C2BD0 MOV X2, X20
	0x025C2BD4 BL 0x3EB1AC0
	0x025C2BD8 LDR X8, [X25 + 0x28]
	0x025C2BDC LDUR X9, [X29 - 0x8]
	0x025C2BE0 CMP X8, X9
	0x025C2BE4 B.NE 0x25C2C08
	0x025C2BE8 ADD X31, X29, 0x0
	0x025C2BEC LDP X20, X19, [X31 + 0x40]
	0x025C2BF0 LDP X22, X21, [X31 + 0x30]
	0x025C2BF4 LDP X24, X23, [X31 + 0x20]
	0x025C2BF8 LDP X26, X25, [X31 + 0x10]
	0x025C2BFC LDP X29, X30, [X31], #0x50
	0x025C2C00 RET
	0x025C2C04 BL 0x1C16F20
	0x025C2C08 BL 0x3EB1B20
	0x025C2C0C SUB X31, X31, 0x30
	0x025C2C10 STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, X19
	017 Move X1, [X8+40]
	018 Call 0x25C2E78, X0
	019 Move X0, [X20+32]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move X8, [X0+192]
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, [X8+88]
	031 Move X30, [X31+32]

Method: System.Void* GetUnsafeExtraMemoryPtrUnchecked()

Disassembly:
	0x025C2C14 STP X20, X19, [X31 + 0x20]
	0x025C2C18 LDR X8, [X1 + 0x20]
	0x025C2C1C MOV X20, X1
	0x025C2C20 MOV X19, X0
	0x025C2C24 ADD X9, X8, 0x135
	0x025C2C28 LDRH W9, [X9]
	0x025C2C2C TBNZ X9, 0x0, 0x25C2C48
	0x025C2C30 MOV X0, X8
	0x025C2C34 BL 0x1C5C684
	0x025C2C38 LDR X8, [X20 + 0x20]
	0x025C2C3C ADD X9, X8, 0x135
	0x025C2C40 LDRH W9, [X9]
	0x025C2C44 B 0x25C2C4C
	0x025C2C48 MOV X0, X8
	0x025C2C4C LDR X10, [X0 + 0xC0]
	0x025C2C50 LDR X10, [X10 + 0x28]
	0x025C2C54 LDR X21, [X10]
	0x025C2C58 TBNZ X9, 0x0, 0x25C2C68
	0x025C2C5C MOV X0, X8
	0x025C2C60 BL 0x1C5C684
	0x025C2C64 MOV X8, X0
	0x025C2C68 LDR X8, [X8 + 0xC0]
	0x025C2C6C MOV X0, X19
	0x025C2C70 LDR X1, [X8 + 0x28]
	0x025C2C74 BLR X21
	0x025C2C78 LDR X8, [X20 + 0x20]
	0x025C2C7C ADD X9, X8, 0x135
	0x025C2C80 LDRH W9, [X9]
	0x025C2C84 TBNZ X9, 0x0, 0x25C2CA0
	0x025C2C88 MOV X0, X8
	0x025C2C8C BL 0x1C5C684
	0x025C2C90 LDR X8, [X20 + 0x20]
	0x025C2C94 ADD X9, X8, 0x135
	0x025C2C98 LDRH W9, [X9]
	0x025C2C9C B 0x25C2CA4
	0x025C2CA0 MOV X0, X8
	0x025C2CA4 LDR X10, [X0 + 0xC0]
	0x025C2CA8 LDR X10, [X10 + 0x50]
	0x025C2CAC LDR X2, [X10]
	0x025C2CB0 TBNZ X9, 0x0, 0x25C2CC8
	0x025C2CB4 MOV X0, X8
	0x025C2CB8 STR X2, [X31 + 0x8]
	0x025C2CBC BL 0x1C5C684
	0x025C2CC0 LDR X2, [X31 + 0x8]
	0x025C2CC4 MOV X8, X0
	0x025C2CC8 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Compare X8, 0
	006 JumpIfEqual {39}
	007 Move W8, [X8+76]
	008 Compare W8, 0
	009 JumpIfEqual {40}
	010 Move X19, X0
	011 Move X0, [X1+32]
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, [X0+192]
	019 Move X0, X19
	020 Move X1, [X8+32]
	021 Call 0x25C24B4, X0
	022 Move X8, [X19]
	023 Compare X8, 0
	024 JumpIfEqual {39}
	025 Move X20, X0
	026 Move X0, X8
	027 Move X1, X31
	028 Call InputStateHistory.get_bytesPerRecord, X0
	029 Move X8, [X19]
	030 Compare X8, 0
	031 JumpIfEqual {39}
	032 NotImplemented "Instruction LDRSW not yet implemented."
	033 Add X9, X20, W0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Subtract X0, X9, X8
	037 Move X30, [X31+32]
	038 Return X0
	039 Call 0x1C17F20
	040 Move X0, 0x1B32000
	041 Move X0, [X0+1456]
	042 Move X19, X1
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X20, X0
	046 Move X0, 0x1B5C000
	047 Move X0, [X0+160]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X20
	051 Move X2, X31
	052 Call InvalidOperationException..ctor, X0, X1
	053 Move X0, X20
	054 Move X1, X19
	055 Call 0x1C17DEC

Method: System.Void CopyFrom(UnityEngine.InputSystem.LowLevel.InputStateHistory`1/Record<TValue> record)

Disassembly:
	0x025C2CCC MOV X0, X19
	0x025C2CD0 LDP X20, X19, [X31 + 0x20]
	0x025C2CD4 LDP X30, X21, [X31 + 0x10]
	0x025C2CD8 LDR X1, [X8 + 0x50]
	0x025C2CDC ADD X31, X31, 0x30
	0x025C2CE0 BR X2
	0x025C2CE4 STP X30, X21, [X31 - 0x20]!
	0x025C2CE8 STP X20, X19, [X31 + 0x10]
	0x025C2CEC ADRP X21, 0x1E17000
	0x025C2CF0 LDRB W8, [X21 + 0xF2E]
	0x025C2CF4 MOV X20, X1
	0x025C2CF8 MOV X19, X0
	0x025C2CFC TBNZ X8, 0x0, 0x25C2D14
	0x025C2D00 ADRP X0, 0x1B59000
	0x025C2D04 LDR X0, [X0 + 0xD40]
	0x025C2D08 BL 0x1C16CF4
	0x025C2D0C MOVZ W8, 0x1
	0x025C2D10 STRB W8, [X21 + 0xF2E]
	0x025C2D14 LDR X0, [X19]
	0x025C2D18 CBZ X0, 0x25C2E10
	0x025C2D1C MOV X1, X31
	0x025C2D20 BL 0x380D014
	0x025C2D24 UBFM X8, X1, 0x20, 0x3F
	0x025C2D28 CMP X8, 0x1
	0x025C2D2C B.NE 0x25C2D40
	0x025C2D30 LDR X8, [X19]
	0x025C2D34 CBZ X8, 0x25C2E10
	0x025C2D38 LDRB W8, [X8 + 0x60]
	0x025C2D3C CBZ W8, 0x25C2DA8
	0x025C2D40 LDR X8, [X20 + 0x20]
	0x025C2D44 ADD X9, X8, 0x135
	0x025C2D48 LDRH W9, [X9]
	0x025C2D4C TBNZ X9, 0x0, 0x25C2D68
	0x025C2D50 MOV X0, X8
	0x025C2D54 BL 0x1C5C684
	0x025C2D58 LDR X8, [X20 + 0x20]
	0x025C2D5C ADD X9, X8, 0x135
	0x025C2D60 LDRH W9, [X9]
	0x025C2D64 B 0x25C2D6C
	0x025C2D68 MOV X0, X8
	0x025C2D6C LDR X10, [X0 + 0xC0]
	0x025C2D70 LDR X10, [X10 + 0x20]
	0x025C2D74 LDR X20, [X10]
	0x025C2D78 TBNZ X9, 0x0, 0x25C2D88
	0x025C2D7C MOV X0, X8
	0x025C2D80 BL 0x1C5C684
	0x025C2D84 MOV X8, X0
	0x025C2D88 LDR X8, [X8 + 0xC0]
	0x025C2D8C MOV X0, X19
	0x025C2D90 LDR X1, [X8 + 0x20]
	0x025C2D94 BLR X20
	0x025C2D98 LDP X20, X19, [X31 + 0x10]
	0x025C2D9C MOV X1, X31
	0x025C2DA0 LDP X30, X21, [X31], #0x20
	0x025C2DA4 B 0x380E488
	0x025C2DA8 LDR X8, [X20 + 0x20]
	0x025C2DAC ADD X9, X8, 0x135
	0x025C2DB0 LDRH W9, [X9]
	0x025C2DB4 TBNZ X9, 0x0, 0x25C2DD0
	0x025C2DB8 MOV X0, X8
	0x025C2DBC BL 0x1C5C684
	0x025C2DC0 LDR X8, [X20 + 0x20]
	0x025C2DC4 ADD X9, X8, 0x135
	0x025C2DC8 LDRH W9, [X9]
	0x025C2DCC B 0x25C2DD4
	0x025C2DD0 MOV X0, X8
	0x025C2DD4 LDR X10, [X0 + 0xC0]
	0x025C2DD8 LDR X10, [X10 + 0x20]
	0x025C2DDC LDR X20, [X10]
	0x025C2DE0 TBNZ X9, 0x0, 0x25C2DF0
	0x025C2DE4 MOV X0, X8
	0x025C2DE8 BL 0x1C5C684
	0x025C2DEC MOV X8, X0
	0x025C2DF0 LDR X8, [X8 + 0xC0]
	0x025C2DF4 MOV X0, X19
	0x025C2DF8 LDR X1, [X8 + 0x20]
	0x025C2DFC BLR X20
	0x025C2E00 LDP X20, X19, [X31 + 0x10]
	0x025C2E04 MOV X1, X31
	0x025C2E08 LDP X30, X21, [X31], #0x20
	0x025C2E0C B 0x380E480
	0x025C2E10 BL 0x1C16F20
	0x025C2E14 SUB X31, X31, 0x30
	0x025C2E18 STP X30, X21, [X31 + 0x10]
	0x025C2E1C STP X20, X19, [X31 + 0x20]
	0x025C2E20 LDR X8, [X1 + 0x20]
	0x025C2E24 MOV X20, X1
	0x025C2E28 MOV X19, X0
	0x025C2E2C ADD X9, X8, 0x135
	0x025C2E30 LDRH W9, [X9]
	0x025C2E34 TBNZ X9, 0x0, 0x25C2E50
	0x025C2E38 MOV X0, X8
	0x025C2E3C BL 0x1C5C684
	0x025C2E40 LDR X8, [X20 + 0x20]
	0x025C2E44 ADD X9, X8, 0x135
	0x025C2E48 LDRH W9, [X9]
	0x025C2E4C B 0x25C2E54
	0x025C2E50 MOV X0, X8
	0x025C2E54 LDR X10, [X0 + 0xC0]
	0x025C2E58 LDR X10, [X10 + 0x28]
	0x025C2E5C LDR X21, [X10]
	0x025C2E60 TBNZ X9, 0x0, 0x25C2E70
	0x025C2E64 MOV X0, X8
	0x025C2E68 BL 0x1C5C684
	0x025C2E6C MOV X8, X0
	0x025C2E70 LDR X8, [X8 + 0xC0]
	0x025C2E74 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+40], X2
	003 Move [X31+48], X30
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move [X31+24], X31
	011 Move [X31+32], X1
	012 Move [X31+16], X31
	013 Move X8, [X3+32]
	014 Move X21, X3
	015 Move X22, X2
	016 Move X20, X1
	017 Move W9, [X8+309]
	018 Move X19, X0
	019 Move TEMP, X9
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {26}
	023 Move X0, X8
	024 Call 0x1C5D684
	025 Move X8, X0
	026 Move X8, [X8+192]
	027 Move X0, X19
	028 Move X1, [X8+40]
	029 Call 0x25C2E78, X0
	030 Move X0, [X21+32]
	031 Move W8, [X0+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {37}
	036 Call 0x1C5D684
	037 Move X8, [X0+192]
	038 Add X0, X31, 32
	039 Move X1, [X8+96]
	040 Call 0x25C2504, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {119}
	045 Move X0, [X21+32]
	046 Move X23, [X19]
	047 Add X8, X0, 309
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {57}
	053 Call 0x1C5D684
	054 Move X0, [X21+32]
	055 Add X8, X0, 309
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Move W9, [X19+8]
	058 Subtract W24, W9, 1
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Move X8, [X0+192]
	065 Move X0, X19
	066 Move X1, [X8+32]
	067 Call 0x25C24B4, X0
	068 Move X3, X0
	069 Add X0, X31, 16
	070 Move X1, X23
	071 Move W2, W24
	072 Move X4, X31
	073 Call Record..ctor, X0, X1, X2, X3
	074 Move X0, [X21+32]
	075 Add X8, X0, 309
	076 NotImplemented "Instruction LDRH not yet implemented."
	077 Move TEMP, X8
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {85}
	081 Call 0x1C5D684
	082 Move X0, [X21+32]
	083 Add X8, X0, 309
	084 NotImplemented "Instruction LDRH not yet implemented."
	085 Move TEMP, X8
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfEqual {90}
	089 Call 0x1C5D684
	090 Move X8, [X0+192]
	091 Add X0, X31, 32
	092 Subtract W21, W22, 1
	093 Move X1, [X8+32]
	094 Call 0x25C24B4, X0
	095 Move X3, X0
	096 Add X0, X31, 0
	097 Move X1, X20
	098 Move W2, W21
	099 Move X4, X31
	100 Move [X31], X31
	101 Move [X31+8], X31
	102 Call Record..ctor, X0, X1, X2, X3
	103 Move X1, [X31]
	104 Move X2, [X31+8]
	105 Add X0, X31, 16
	106 Move X3, X31
	107 Call Record.CopyFrom, X0, X1
	108 Move W8, [X31+28]
	109 Move X22, [X31+80]
	110 Move X21, [X31+88]
	111 Move X24, [X31+64]
	112 Move X23, [X31+72]
	113 Move X30, [X31+48]
	114 Move [X19+12], W8
	115 Move X20, [X31+96]
	116 Move X19, [X31+104]
	117 Add X31, X31, 112
	118 Return 
	119 Move X0, 0x1B3A000
	120 Move X0, [X0+1400]
	121 Call 0x1C17D08
	122 Call 0x1C17F10
	123 Move X19, X0
	124 Move X0, 0x1B5C000
	125 Move X0, [X0+168]
	126 Call 0x1C17D08
	127 Move X20, X0
	128 Move X0, 0x1B5C000
	129 Move X0, [X0+176]
	130 Call 0x1C17D08
	131 Move X2, X0
	132 Move X0, X19
	133 Move X1, X20
	134 Move X3, X31
	135 Call ArgumentException..ctor, X0, X1, X2
	136 Move X0, X19
	137 Move X1, X21
	138 Call 0x1C17DEC

Method: System.Void CheckValid()

Disassembly:
	0x025C2E78 LDR X1, [X8 + 0x28]
	0x025C2E7C BLR X21
	0x025C2E80 LDR X8, [X20 + 0x20]
	0x025C2E84 ADD X9, X8, 0x135
	0x025C2E88 LDRH W9, [X9]
	0x025C2E8C TBNZ X9, 0x0, 0x25C2EA8
	0x025C2E90 MOV X0, X8
	0x025C2E94 BL 0x1C5C684
	0x025C2E98 LDR X8, [X20 + 0x20]
	0x025C2E9C ADD X9, X8, 0x135
	0x025C2EA0 LDRH W9, [X9]
	0x025C2EA4 B 0x25C2EAC
	0x025C2EA8 MOV X0, X8
	0x025C2EAC LDR X10, [X0 + 0xC0]
	0x025C2EB0 LDR X10, [X10 + 0x58]
	0x025C2EB4 LDR X2, [X10]
	0x025C2EB8 TBNZ X9, 0x0, 0x25C2ED0
	0x025C2EBC MOV X0, X8
	0x025C2EC0 STR X2, [X31 + 0x8]
	0x025C2EC4 BL 0x1C5C684
	0x025C2EC8 LDR X2, [X31 + 0x8]
	0x025C2ECC MOV X8, X0
	0x025C2ED0 LDR X8, [X8 + 0xC0]
	0x025C2ED4 MOV X0, X19
	0x025C2ED8 LDP X20, X19, [X31 + 0x20]
	0x025C2EDC LDP X30, X21, [X31 + 0x10]
	0x025C2EE0 LDR X1, [X8 + 0x58]
	0x025C2EE4 ADD X31, X31, 0x30
	0x025C2EE8 BR X2
	0x025C2EEC STR X30, [X31 - 0x20]!
	0x025C2EF0 STP X20, X19, [X31 + 0x10]
	0x025C2EF4 LDR X8, [X0]
	0x025C2EF8 CBZ X8, 0x25C2F9C
	0x025C2EFC LDR W8, [X8 + 0x4C]
	0x025C2F00 MOV X20, X1
	0x025C2F04 CBZ W8, 0x25C2FA0
	0x025C2F08 LDR X8, [X20 + 0x20]
	0x025C2F0C MOV X19, X0
	0x025C2F10 ADD X9, X8, 0x135
	0x025C2F14 LDRH W9, [X9]
	0x025C2F18 TBNZ X9, 0x0, 0x25C2F34
	0x025C2F1C MOV X0, X8
	0x025C2F20 BL 0x1C5C684
	0x025C2F24 LDR X8, [X20 + 0x20]
	0x025C2F28 ADD X9, X8, 0x135
	0x025C2F2C LDRH W9, [X9]
	0x025C2F30 B 0x25C2F38
	0x025C2F34 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X19, X1
	006 Compare X8, 0
	007 JumpIfEqual {32}
	008 Move W8, [X0+8]
	009 Move X20, X0
	010 Compare W8, 0
	011 JumpIfEqual {32}
	012 Move X0, [X19+32]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Move X8, [X0+192]
	020 Move X0, X20
	021 Move X1, [X8+32]
	022 Call 0x25C24B4, X0
	023 Compare X0, 0
	024 JumpIfEqual {39}
	025 Move W8, [X0+8]
	026 Move W9, [X20+12]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 
	032 Move X0, 0x1B32000
	033 Move X0, [X0+1456]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Move X0, 0x1B5C000
	038 Move X0, [X0+184]
	039 Call 0x1C17F20
	040 Move X0, 0x1B32000
	041 Move X0, [X0+1456]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X20, X0
	045 Move X0, 0x1B5C000
	046 Move X0, [X0+192]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X20
	050 Move X2, X31
	051 Call InvalidOperationException..ctor, X0, X1
	052 Move X0, X20
	053 Move X1, X19
	054 Call 0x1C17DEC

Method: System.Boolean Equals(UnityEngine.InputSystem.LowLevel.InputStateHistory`1/Record<TValue> other)

Disassembly:
	0x025C2F38 LDR X10, [X0 + 0xC0]
	0x025C2F3C LDR X10, [X10 + 0x20]
	0x025C2F40 LDR X20, [X10]
	0x025C2F44 TBNZ X9, 0x0, 0x25C2F54
	0x025C2F48 MOV X0, X8
	0x025C2F4C BL 0x1C5C684
	0x025C2F50 MOV X8, X0
	0x025C2F54 LDR X8, [X8 + 0xC0]
	0x025C2F58 MOV X0, X19
	0x025C2F5C LDR X1, [X8 + 0x20]
	0x025C2F60 BLR X20
	0x025C2F64 LDR X8, [X19]
	0x025C2F68 CBZ X8, 0x25C2F9C

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+8]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W8, [X0+12]
	006 Move X9, X2
	007 ShiftRight X9, 32
	008 And X9, X9, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0
	012 Move W0, W31
	013 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x025C2F6C MOV X20, X0
	0x025C2F70 MOV X0, X8
	0x025C2F74 MOV X1, X31
	0x025C2F78 BL 0x380E804
	0x025C2F7C LDR X8, [X19]
	0x025C2F80 CBZ X8, 0x25C2F9C
	0x025C2F84 LDRSW X8, [X8 + 0x4C]
	0x025C2F88 ADD X9, X20, W0, SXTW
	0x025C2F8C LDP X20, X19, [X31 + 0x10]
	0x025C2F90 SUB X0, X9, X8
	0x025C2F94 LDR X30, [X31], #0x20
	0x025C2F98 RET
	0x025C2F9C BL 0x1C16F20
	0x025C2FA0 ADRP X0, 0x1B31000
	0x025C2FA4 LDR X0, [X0 + 0x5B0]
	0x025C2FA8 BL 0x1C16D08
	0x025C2FAC BL 0x1C16F10
	0x025C2FB0 MOV X19, X0
	0x025C2FB4 ADRP X0, 0x1B5B000
	0x025C2FB8 LDR X0, [X0 + 0xA0]
	0x025C2FBC BL 0x1C16D08
	0x025C2FC0 MOV X1, X0
	0x025C2FC4 MOV X0, X19
	0x025C2FC8 MOV X2, X31
	0x025C2FCC BL 0x337DF1C
	0x025C2FD0 MOV X0, X19
	0x025C2FD4 MOV X1, X20
	0x025C2FD8 BL 0x1C16DEC
	0x025C2FDC SUB X31, X31, 0x60
	0x025C2FE0 STP X30, X23, [X31 + 0x30]
	0x025C2FE4 STP X22, X21, [X31 + 0x40]
	0x025C2FE8 STP X20, X19, [X31 + 0x50]
	0x025C2FEC STP X1, X2, [X31 + 0x20]
	0x025C2FF0 STP X31, X31, [X31 + 0x10]
	0x025C2FF4 LDR X8, [X3 + 0x20]
	0x025C2FF8 MOV X20, X3
	0x025C2FFC MOV X19, X0
	0x025C3000 ADD X9, X8, 0x135
	0x025C3004 LDRH W9, [X9]
	0x025C3008 TBNZ X9, 0x0, 0x25C3024
	0x025C300C MOV X0, X8
	0x025C3010 BL 0x1C5C684
	0x025C3014 LDR X8, [X20 + 0x20]
	0x025C3018 ADD X9, X8, 0x135
	0x025C301C LDRH W9, [X9]
	0x025C3020 B 0x25C3028
	0x025C3024 MOV X0, X8
	0x025C3028 LDR X10, [X0 + 0xC0]
	0x025C302C LDR X10, [X10 + 0x28]
	0x025C3030 LDR X21, [X10]
	0x025C3034 TBNZ X9, 0x0, 0x25C3044
	0x025C3038 MOV X0, X8
	0x025C303C BL 0x1C5C684
	0x025C3040 MOV X8, X0
	0x025C3044 LDR X8, [X8 + 0xC0]
	0x025C3048 MOV X0, X19
	0x025C304C LDR X1, [X8 + 0x28]
	0x025C3050 BLR X21
	0x025C3054 LDR X8, [X20 + 0x20]
	0x025C3058 ADD X9, X8, 0x135

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X20, X2
	007 Move X21, X1
	008 Move X19, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Compare X21, 0
	026 JumpIfEqual {72}
	027 Move X8, [X21]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, [X20+32]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+192]
	037 Move X1, [X8]
	038 Move W8, [X1+309]
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {46}
	043 Move X0, X1
	044 Call 0x1C5D684
	045 Move X1, X0
	046 Move X8, [X21]
	047 Move X9, [X1+64]
	048 Move X0, X21
	049 Move X8, [X8+64]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Call 0x1C17E08
	052 Move X8, X0
	053 Move X0, [X20+32]
	054 Move X21, [X8]
	055 Move X20, [X8+8]
	056 Move W9, [X0+309]
	057 Move TEMP, X9
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {62}
	061 Call 0x1C5D684
	062 Move X8, [X19]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, [X19+8]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move W8, [X19+12]
	067 Move X9, X20
	068 ShiftRight X9, 32
	069 And X9, X9, 0x7FFFFFFF
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CSET not yet implemented."
	072 Move W0, W31
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Return X0
	078 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x025C305C LDRH W9, [X9]
	0x025C3060 TBNZ X9, 0x0, 0x25C307C
	0x025C3064 MOV X0, X8
	0x025C3068 BL 0x1C5C684
	0x025C306C LDR X8, [X20 + 0x20]
	0x025C3070 ADD X9, X8, 0x135
	0x025C3074 LDRH W9, [X9]
	0x025C3078 B 0x25C3080
	0x025C307C MOV X0, X8
	0x025C3080 LDR X10, [X0 + 0xC0]
	0x025C3084 LDR X10, [X10 + 0x60]
	0x025C3088 LDR X21, [X10]
	0x025C308C TBNZ X9, 0x0, 0x25C309C
	0x025C3090 MOV X0, X8
	0x025C3094 BL 0x1C5C684
	0x025C3098 MOV X8, X0
	0x025C309C LDR X8, [X8 + 0xC0]
	0x025C30A0 ADD X0, X31, 0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X8, [X0]
	008 Move X9, [X8+344]
	009 Move X1, [X8+352]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move W8, 397
	012 Multiply W8, W0, W8
	013 Move W8, W31
	014 Move W9, [X19+8]
	015 Move W10, [X19+12]
	016 Xor W8, W9, W8
	017 Move W9, 397
	018 Multiply W8, W8, W9
	019 Xor W0, W8, W10
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return X0

Method: System.String ToString()

Disassembly:
	0x025C30A4 LDR X1, [X8 + 0x60]
	0x025C30A8 BLR X21
	0x025C30AC TBZ X0, 0x0, 0x25C3280
	0x025C30B0 LDR X8, [X20 + 0x20]
	0x025C30B4 LDR X21, [X19]
	0x025C30B8 ADD X9, X8, 0x135
	0x025C30BC LDRH W9, [X9]
	0x025C30C0 TBNZ X9, 0x0, 0x25C30DC
	0x025C30C4 MOV X0, X8
	0x025C30C8 BL 0x1C5C684
	0x025C30CC LDR X8, [X20 + 0x20]
	0x025C30D0 ADD X9, X8, 0x135
	0x025C30D4 LDRH W9, [X9]
	0x025C30D8 B 0x25C30E0
	0x025C30DC MOV X0, X8
	0x025C30E0 LDR X10, [X0 + 0xC0]
	0x025C30E4 LDR X10, [X10 + 0x10]
	0x025C30E8 LDR X22, [X10]
	0x025C30EC TBNZ X9, 0x0, 0x25C30FC
	0x025C30F0 MOV X0, X8
	0x025C30F4 BL 0x1C5C684
	0x025C30F8 MOV X8, X0
	0x025C30FC LDR X8, [X8 + 0xC0]
	0x025C3100 MOV X0, X19
	0x025C3104 LDR X1, [X8 + 0x10]
	0x025C3108 BLR X22
	0x025C310C LDR X8, [X20 + 0x20]
	0x025C3110 MOV W22, W0
	0x025C3114 ADD X9, X8, 0x135
	0x025C3118 LDRH W9, [X9]
	0x025C311C TBNZ X9, 0x0, 0x25C3138
	0x025C3120 MOV X0, X8
	0x025C3124 BL 0x1C5C684
	0x025C3128 LDR X8, [X20 + 0x20]
	0x025C312C ADD X9, X8, 0x135
	0x025C3130 LDRH W9, [X9]
	0x025C3134 B 0x25C313C
	0x025C3138 MOV X0, X8
	0x025C313C LDR X10, [X0 + 0xC0]
	0x025C3140 LDR X10, [X10 + 0x20]
	0x025C3144 LDR X23, [X10]
	0x025C3148 TBNZ X9, 0x0, 0x25C3158
	0x025C314C MOV X0, X8
	0x025C3150 BL 0x1C5C684
	0x025C3154 MOV X8, X0
	0x025C3158 LDR X8, [X8 + 0xC0]
	0x025C315C MOV X0, X19
	0x025C3160 LDR X1, [X8 + 0x20]
	0x025C3164 BLR X23
	0x025C3168 MOV X3, X0
	0x025C316C ADD X0, X31, 0x10
	0x025C3170 MOV X1, X21
	0x025C3174 MOV W2, W22
	0x025C3178 MOV X4, X31
	0x025C317C BL 0x380D27C
	0x025C3180 LDR X8, [X20 + 0x20]
	0x025C3184 LDR X21, [X31 + 0x20]
	0x025C3188 ADD X9, X8, 0x135
	0x025C318C LDRH W9, [X9]
	0x025C3190 TBNZ X9, 0x0, 0x25C31AC
	0x025C3194 MOV X0, X8
	0x025C3198 BL 0x1C5C684
	0x025C319C LDR X8, [X20 + 0x20]
	0x025C31A0 ADD X9, X8, 0x135
	0x025C31A4 LDRH W9, [X9]
	0x025C31A8 B 0x25C31B0
	0x025C31AC MOV X0, X8
	0x025C31B0 LDR X10, [X0 + 0xC0]
	0x025C31B4 LDR X10, [X10 + 0x10]
	0x025C31B8 LDR X22, [X10]
	0x025C31BC TBNZ X9, 0x0, 0x25C31CC
	0x025C31C0 MOV X0, X8
	0x025C31C4 BL 0x1C5C684
	0x025C31C8 MOV X8, X0
	0x025C31CC LDR X8, [X8 + 0xC0]
	0x025C31D0 ADD X0, X31, 0x20
	0x025C31D4 LDR X1, [X8 + 0x10]
	0x025C31D8 BLR X22
	0x025C31DC LDR X8, [X20 + 0x20]
	0x025C31E0 MOV W22, W0
	0x025C31E4 ADD X9, X8, 0x135
	0x025C31E8 LDRH W9, [X9]
	0x025C31EC TBNZ X9, 0x0, 0x25C3208
	0x025C31F0 MOV X0, X8
	0x025C31F4 BL 0x1C5C684
	0x025C31F8 LDR X8, [X20 + 0x20]
	0x025C31FC ADD X9, X8, 0x135
	0x025C3200 LDRH W9, [X9]
	0x025C3204 B 0x25C320C
	0x025C3208 MOV X0, X8
	0x025C320C LDR X10, [X0 + 0xC0]
	0x025C3210 LDR X10, [X10 + 0x20]
	0x025C3214 LDR X20, [X10]
	0x025C3218 TBNZ X9, 0x0, 0x25C3228
	0x025C321C MOV X0, X8
	0x025C3220 BL 0x1C5C684
	0x025C3224 MOV X8, X0
	0x025C3228 LDR X8, [X8 + 0xC0]
	0x025C322C ADD X0, X31, 0x20
	0x025C3230 LDR X1, [X8 + 0x20]
	0x025C3234 BLR X20
	0x025C3238 MOV X3, X0
	0x025C323C ADD X0, X31, 0x0
	0x025C3240 MOV X1, X21
	0x025C3244 MOV W2, W22
	0x025C3248 MOV X4, X31
	0x025C324C STP X31, X31, [X31]
	0x025C3250 BL 0x380D27C

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+144], X30
	003 Move [X31+160], X24
	004 Move [X31+168], X23
	005 Move [X31+176], X22
	006 Move [X31+184], X21
	007 Move [X31+192], X20
	008 Move [X31+200], X19
	009 NotImplemented "Instruction MRS not yet implemented."
	010 Move X8, [X22+40]
	011 Move X21, 0x1E17000
	012 Move X20, X1
	013 Move X19, X0
	014 Move [X31+136], X8
	015 Move W8, [X21+3884]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x1B34000
	021 Move X0, [X0+2424]
	022 Call 0x1C17CF4
	023 Move X0, 0x1B5B000
	024 Move X0, [X0+200]
	025 Call 0x1C17CF4
	026 Move X0, 0x1B58000
	027 Move X0, [X0+1280]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3884], W8
	031 Move X0, [X20+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X8, [X0+192]
	039 Move X0, X19
	040 Move X1, [X8+96]
	041 Call 0x25C2504, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {120}
	046 Move X0, [X20+32]
	047 Move W8, [X0+309]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {53}
	052 Call 0x1C5D684
	053 Move X8, [X0+192]
	054 Move X0, X19
	055 Move X1, [X8+112]
	056 Call 0x25C264C, X0
	057 Move X8, [X20+32]
	058 Move X21, X0
	059 Move W9, [X8+309]
	060 Move TEMP, X9
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {67}
	064 Move X0, X8
	065 Call 0x1C5D684
	066 Move X8, X0
	067 Move X8, [X8+192]
	068 Move X0, X19
	069 Move X1, [X8+120]
	070 Add X8, X31, 80
	071 Call 0x25C29B4, X0
	072 Move X8, [X31+128]
	073 Move V1, [X31+96]
	074 Move V0, [X31+112]
	075 Move V2, [X31+5]
	076 Move [X31+64], X8
	077 Move [X31+32], V1
	078 Move [X31+40], V0
	079 Move [X31+1], V2
	080 Move X0, [X20+32]
	081 Move W8, [X0+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {87}
	086 Call 0x1C5D684
	087 Move X8, [X0+192]
	088 Move X24, 0x1B34000
	089 Move X23, 0x1B5B000
	090 Add X1, X31, 16
	091 Move X0, [X8+72]
	092 Move X24, [X24+2424]
	093 Move X23, [X23+200]
	094 Call 0x1C17E04
	095 Move X8, [X20+32]
	096 Move X20, X0
	097 Move W9, [X8+309]
	098 Move TEMP, X9
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {105}
	102 Move X0, X8
	103 Call 0x1C5D684
	104 Move X8, X0
	105 Move X8, [X8+192]
	106 Move X0, X19
	107 Move X1, [X8+128]
	108 Call 0x25C25DC, X0
	109 Move X0, [X24]
	110 Add X1, X31, 8
	111 Move [X31+8], D0
	112 Call 0x1C17E04
	113 Move X8, [X23]
	114 Move X3, X0
	115 Move X1, X21
	116 Move X2, X20
	117 Move X0, X8
	118 Move X4, X31
	119 Call String.Format, X0, X1, X2, X3
	120 Move X8, 0x1B58000
	121 Move X8, [X8+1280]
	122 Move X0, [X8]
	123 Move X8, [X22+40]
	124 Move X9, [X31+136]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X20, [X31+192]
	127 Move X19, [X31+200]
	128 Move X22, [X31+176]
	129 Move X21, [X31+184]
	130 Move X24, [X31+160]
	131 Move X23, [X31+168]
	132 Move X30, [X31+144]
	133 Add X31, X31, 208
	134 Return X0
	135 Call 0x3EB2B20

