Type: UnityEngine.InputSystem.LowLevel.NativeInputRuntime

Method: System.Int32 AllocateDeviceId()

Disassembly:
	0x03808CE4 BL 0x1C16DFC
	0x03808CE8 LDR X8, [X23]
	0x03808CEC LDR X8, [X8 + 0xB8]
	0x03808CF0 LDR X8, [X8]
	0x03808CF4 CBZ X8, 0x3808DB0
	0x03808CF8 MOV X0, X8
	0x03808CFC MOV X1, X31
	0x03808D00 BL 0x37C1DE0
	0x03808D04 MOV W21, W0
	0x03808D08 CBZ X22, 0x3808DB0
	0x03808D0C MOV X0, X22
	0x03808D10 MOV X1, X19
	0x03808D14 MOV X2, X20
	0x03808D18 MOV W3, W21
	0x03808D1C LDP X20, X19, [X31 + 0x30]
	0x03808D20 LDP X22, X21, [X31 + 0x20]
	0x03808D24 LDP X30, X23, [X31 + 0x10]
	0x03808D28 MOV X4, X31
	0x03808D2C ADD X31, X31, 0x40
	0x03808D30 B 0x37CB6DC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBDA000
	005 Move X20, 0x943000
	006 Move W8, [X19+1102]
	007 Move X20, [X20+1056]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x943000
	013 Move X0, [X0+1056]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1102], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call NativeInputSystem.AllocateDeviceId
	027 Return X0

Method: System.Void Update(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x03808D34 LDP X20, X19, [X31 + 0x30]
	0x03808D38 LDP X22, X21, [X31 + 0x20]
	0x03808D3C LDP X30, X23, [X31 + 0x10]
	0x03808D40 ADD X31, X31, 0x40
	0x03808D44 RET
	0x03808D48 ADRP X0, 0x8F0000
	0x03808D4C LDR X0, [X0 + 0x528]
	0x03808D50 BL 0x1C16D08
	0x03808D54 BL 0x1C16F10
	0x03808D58 MOV X19, X0
	0x03808D5C ADRP X0, 0x913000
	0x03808D60 LDR X0, [X0 + 0xD20]
	0x03808D64 B 0x3808D84
	0x03808D68 ADRP X0, 0x8F0000
	0x03808D6C LDR X0, [X0 + 0x528]
	0x03808D70 BL 0x1C16D08
	0x03808D74 BL 0x1C16F10
	0x03808D78 MOV X19, X0
	0x03808D7C ADRP X0, 0x913000
	0x03808D80 LDR X0, [X0 + 0xD70]
	0x03808D84 BL 0x1C16D08
	0x03808D88 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBDA000
	006 Move X21, 0x943000
	007 Move W8, [X20+1103]
	008 Move X21, [X21+1056]
	009 Move W19, W1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x943000
	015 Move X0, [X0+1056]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1103], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call NativeInputSystem.Update, X0
	031 Return 

Method: System.Void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEvent* ptr)

Disassembly:
	0x03808D8C MOV X0, X19
	0x03808D90 MOV X2, X31
	0x03808D94 BL 0x330E100
	0x03808D98 ADRP X0, 0x942000
	0x03808D9C LDR X0, [X0 + 0x4A0]
	0x03808DA0 BL 0x1C16D08
	0x03808DA4 MOV X1, X0
	0x03808DA8 MOV X0, X19
	0x03808DAC BL 0x1C16DEC
	0x03808DB0 BL 0x1C16F20
	0x03808DB4 STR W22, [X31 + 0x8]
	0x03808DB8 ADRP X20, 0x913000
	0x03808DBC LDR X20, [X20 + 0xD28]
	0x03808DC0 MOV X0, X20
	0x03808DC4 BL 0x1C16D08
	0x03808DC8 ADD X1, X31, 0x8
	0x03808DCC BL 0x1C16E04
	0x03808DD0 MOV X21, X0
	0x03808DD4 MOV X0, X19
	0x03808DD8 BL 0x19903C0
	0x03808DDC ADRP X0, 0x913000
	0x03808DE0 LDR X22, [X19 + 0x10]
	0x03808DE4 LDR X0, [X0 + 0xD18]
	0x03808DE8 BL 0x1C16D08
	0x03808DEC BL 0x19903D0
	0x03808DF0 MOV X0, X20
	0x03808DF4 STR W22, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBDA000
	006 Move X20, 0x943000
	007 Move W8, [X21+1104]
	008 Move X20, [X20+1056]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x943000
	015 Move X0, [X0+1056]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1104], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call IntPtr.op_Explicit, X0
	022 Move X8, [X20]
	023 Move X19, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call NativeInputSystem.QueueInputEvent, X0
	036 Return 

Method: System.Int64 DeviceCommand(System.Int32 deviceId, UnityEngine.InputSystem.LowLevel.InputDeviceCommand* commandPtr)

Disassembly:
	0x03808DF8 BL 0x1C16D08
	0x03808DFC ADD X1, X31, 0x0
	0x03808E00 BL 0x1C16E04
	0x03808E04 MOV X20, X0
	0x03808E08 ADRP X0, 0x942000
	0x03808E0C LDR X0, [X0 + 0x4A8]
	0x03808E10 BL 0x1C16D08
	0x03808E14 MOV X1, X21
	0x03808E18 MOV X2, X20
	0x03808E1C MOV X3, X19
	0x03808E20 MOV X4, X31
	0x03808E24 BL 0x3227C18
	0x03808E28 MOV X19, X0
	0x03808E2C ADRP X0, 0x8F3000
	0x03808E30 LDR X0, [X0 + 0x578]
	0x03808E34 BL 0x1C16D08
	0x03808E38 BL 0x1C16F10
	0x03808E3C MOV X20, X0
	0x03808E40 ADRP X0, 0x913000
	0x03808E44 LDR X0, [X0 + 0xD70]
	0x03808E48 BL 0x1C16D08
	0x03808E4C MOV X2, X0
	0x03808E50 MOV X0, X20
	0x03808E54 MOV X1, X19
	0x03808E58 MOV X3, X31
	0x03808E5C BL 0x330E16C
	0x03808E60 ADRP X0, 0x942000
	0x03808E64 LDR X0, [X0 + 0x4A0]
	0x03808E68 BL 0x1C16D08
	0x03808E6C MOV X1, X0
	0x03808E70 MOV X0, X20
	0x03808E74 BL 0x1C16DEC
	0x03808E78 STP X30, X21, [X31 - 0x20]!
	0x03808E7C STP X20, X19, [X31 + 0x10]
	0x03808E80 ADRP X21, 0xBD9000
	0x03808E84 ADRP X20, 0x913000
	0x03808E88 LDRB W8, [X21 + 0x467]
	0x03808E8C LDR X20, [X20 + 0xD18]
	0x03808E90 MOV X19, X0
	0x03808E94 TBNZ X8, 0x0, 0x3808EAC
	0x03808E98 ADRP X0, 0x913000
	0x03808E9C LDR X0, [X0 + 0xD18]
	0x03808EA0 BL 0x1C16CF4
	0x03808EA4 MOVZ W8, 0x1
	0x03808EA8 STRB W8, [X21 + 0x467]
	0x03808EAC LDR X0, [X20]
	0x03808EB0 LDR W8, [X0 + 0xE0]
	0x03808EB4 CBNZ W8, 0x3808EC0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBDA000
	007 Move W8, [X21+1105]
	008 Move X19, X2
	009 Move W20, W1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x943000
	015 Move X0, [X0+1056]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1105], W8
	019 Compare X19, 0
	020 JumpIfEqual {42}
	021 Move X8, 0x943000
	022 Move X8, [X8+1056]
	023 Move W21, [X19]
	024 Move W22, [X19+4]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Subtract W3, W22, 8
	031 Add X2, X19, 8
	032 Move W0, W20
	033 Move W1, W21
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X4, X31
	039 Move X30, [X31+48]
	040 Call NativeInputSystem.IOCTL, X0, X1, X2, X3
	041 Return X0
	042 Move X0, 0x8F1000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x943000
	048 Move X0, [X0+1064]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x943000
	055 Move X0, [X0+1072]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: UnityEngine.InputSystem.LowLevel.InputUpdateDelegate get_onUpdate()

Disassembly:
	0x03808EB8 BL 0x1C16DFC
	0x03808EBC LDR X0, [X20]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_onUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateDelegate value)

Disassembly:
	0x03808EC0 LDR X8, [X0 + 0xB8]
	0x03808EC4 LDR W9, [X8 + 0x4]
	0x03808EC8 CMP W9, W19
	0x03808ECC B.EQ 0x3808FB0
	0x03808ED0 LDR W9, [X0 + 0xE0]
	0x03808ED4 CBNZ W9, 0x3808EE4
	0x03808ED8 BL 0x1C16DFC
	0x03808EDC LDR X0, [X20]
	0x03808EE0 LDR X8, [X0 + 0xB8]
	0x03808EE4 LDR W9, [X8 + 0xC]
	0x03808EE8 CMP W9, W19
	0x03808EEC B.EQ 0x3808FB0
	0x03808EF0 LDR W9, [X0 + 0xE0]
	0x03808EF4 CBNZ W9, 0x3808F04
	0x03808EF8 BL 0x1C16DFC
	0x03808EFC LDR X0, [X20]
	0x03808F00 LDR X8, [X0 + 0xB8]
	0x03808F04 LDR W9, [X8 + 0x1C]
	0x03808F08 CMP W9, W19
	0x03808F0C B.EQ 0x3808FB0
	0x03808F10 LDR W9, [X0 + 0xE0]
	0x03808F14 CBNZ W9, 0x3808F24
	0x03808F18 BL 0x1C16DFC
	0x03808F1C LDR X0, [X20]
	0x03808F20 LDR X8, [X0 + 0xB8]
	0x03808F24 LDR W9, [X8 + 0x14]
	0x03808F28 CMP W9, W19
	0x03808F2C B.EQ 0x3808FB0
	0x03808F30 LDR W9, [X0 + 0xE0]
	0x03808F34 CBNZ W9, 0x3808F44
	0x03808F38 BL 0x1C16DFC
	0x03808F3C LDR X0, [X20]
	0x03808F40 LDR X8, [X0 + 0xB8]
	0x03808F44 LDR W9, [X8 + 0x8]
	0x03808F48 CMP W9, W19
	0x03808F4C B.EQ 0x3808FB0
	0x03808F50 LDR W9, [X0 + 0xE0]
	0x03808F54 CBNZ W9, 0x3808F64
	0x03808F58 BL 0x1C16DFC
	0x03808F5C LDR X0, [X20]
	0x03808F60 LDR X8, [X0 + 0xB8]
	0x03808F64 LDR W9, [X8 + 0x10]
	0x03808F68 CMP W9, W19
	0x03808F6C B.EQ 0x3808FB0
	0x03808F70 LDR W9, [X0 + 0xE0]
	0x03808F74 CBNZ W9, 0x3808F84
	0x03808F78 BL 0x1C16DFC
	0x03808F7C LDR X0, [X20]
	0x03808F80 LDR X8, [X0 + 0xB8]
	0x03808F84 LDR W9, [X8 + 0x18]
	0x03808F88 CMP W9, W19
	0x03808F8C B.EQ 0x3808FB0
	0x03808F90 LDR W9, [X0 + 0xE0]
	0x03808F94 CBNZ W9, 0x3808FA4
	0x03808F98 BL 0x1C16DFC
	0x03808F9C LDR X0, [X20]
	0x03808FA0 LDR X8, [X0 + 0xB8]
	0x03808FA4 LDR W9, [X8 + 0x24]
	0x03808FA8 CMP W9, W19
	0x03808FAC B.NE 0x3808FC0
	0x03808FB0 MOVZ W0, 0x1
	0x03808FB4 LDP X20, X19, [X31 + 0x10]
	0x03808FB8 LDP X30, X21, [X31], #0x20
	0x03808FBC RET
	0x03808FC0 LDR W9, [X0 + 0xE0]
	0x03808FC4 CBNZ W9, 0x3808FD4
	0x03808FC8 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBDA000
	007 Move X22, 0x943000
	008 Move W8, [X20+1106]
	009 Move X22, [X22+1080]
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x943000
	017 Move X0, [X0+1056]
	018 Call 0x1C17CF4
	019 Move X0, 0x943000
	020 Move X0, [X0+1088]
	021 Call 0x1C17CF4
	022 Move X0, 0x943000
	023 Move X0, [X0+1096]
	024 Call 0x1C17CF4
	025 Move X0, 0x943000
	026 Move X0, [X0+1080]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1106], W8
	030 Move X0, [X22]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X20, X0
	034 Call Object..ctor, X0
	035 Compare X20, 0
	036 JumpIfEqual {77}
	037 Move X22, 0x943000
	038 Move X22, [X22+1056]
	039 Move [X20+16], X21
	040 Compare X21, 0
	041 JumpIfEqual {61}
	042 Move X8, 0x943000
	043 Move X8, [X8+1088]
	044 Move X21, 0x943000
	045 Move X0, [X8]
	046 Move X21, [X21+1096]
	047 Call 0x1C17F10
	048 Move X2, [X21]
	049 Move X1, X20
	050 Move X3, X31
	051 Move X21, X0
	052 Call NativeUpdateCallback..ctor, X0, X1, X2
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {59}
	057 Call 0x1C17DFC
	058 Move X0, [X22]
	059 Move X8, [X0+184]
	060 Move [X8], X21
	061 Move X0, [X22]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X22]
	067 Move X8, [X0+184]
	068 Move [X8], X31
	069 Move X8, [X20+16]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move [X19+32], X8
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X30, [X31+48]
	076 Return 
	077 Call 0x1C17F20

Method: System.Action`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> get_onBeforeUpdate()

Disassembly:
	0x03808FD4 LDR W8, [X8 + 0x28]
	0x03808FD8 CMP W8, W19

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_onBeforeUpdate(System.Action`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> value)

Disassembly:
	0x03808FDC CSET W0, EQ
	0x03808FE0 B 0x3808FB4
	0x03808FE4 STP X30, X23, [X31 - 0x30]!
	0x03808FE8 STP X22, X21, [X31 + 0x10]
	0x03808FEC STP X20, X19, [X31 + 0x20]
	0x03808FF0 ADRP X23, 0xBD9000
	0x03808FF4 LDRB W8, [X23 + 0x468]
	0x03808FF8 MOV W20, W3
	0x03808FFC MOV X21, X2
	0x03809000 MOV X22, X1
	0x03809004 MOV X19, X0
	0x03809008 TBNZ X8, 0x0, 0x3809020
	0x0380900C ADRP X0, 0x912000
	0x03809010 LDR X0, [X0 + 0x270]
	0x03809014 BL 0x1C16CF4
	0x03809018 MOVZ W8, 0x1
	0x0380901C STRB W8, [X23 + 0x468]
	0x03809020 CBZ X19, 0x380908C
	0x03809024 CBZ X22, 0x38090AC
	0x03809028 LDR X0, [X19 + 0x78]
	0x0380902C CBZ X0, 0x3809088
	0x03809030 MOV X1, X31
	0x03809034 BL 0x376EE00
	0x03809038 TBZ X0, 0x0, 0x38090F4
	0x0380903C ADRP X23, 0x912000
	0x03809040 LDR X23, [X23 + 0x270]
	0x03809044 LDR X0, [X23]
	0x03809048 LDR W8, [X0 + 0xE0]
	0x0380904C CBNZ W8, 0x3809058
	0x03809050 BL 0x1C16DFC
	0x03809054 LDR X0, [X23]
	0x03809058 LDR X8, [X0 + 0xB8]
	0x0380905C LDR X0, [X8]
	0x03809060 CBZ X0, 0x3809088
	0x03809064 MOV X1, X19
	0x03809068 MOV X2, X22
	0x0380906C MOV X3, X21
	0x03809070 MOV W4, W20
	0x03809074 LDP X20, X19, [X31 + 0x20]
	0x03809078 LDP X22, X21, [X31 + 0x10]
	0x0380907C MOV X5, X31
	0x03809080 LDP X30, X23, [X31], #0x30
	0x03809084 B 0x37CC1B4
	0x03809088 BL 0x1C16F20
	0x0380908C ADRP X0, 0x8EF000
	0x03809090 LDR X0, [X0 + 0x528]
	0x03809094 BL 0x1C16D08
	0x03809098 BL 0x1C16F10
	0x0380909C MOV X19, X0
	0x038090A0 ADRP X0, 0x912000
	0x038090A4 LDR X0, [X0 + 0xD60]
	0x038090A8 B 0x38090C8
	0x038090AC ADRP X0, 0x8EF000
	0x038090B0 LDR X0, [X0 + 0x528]
	0x038090B4 BL 0x1C16D08
	0x038090B8 BL 0x1C16F10
	0x038090BC MOV X19, X0
	0x038090C0 ADRP X0, 0x941000
	0x038090C4 LDR X0, [X0 + 0x4B0]
	0x038090C8 BL 0x1C16D08
	0x038090CC MOV X1, X0
	0x038090D0 MOV X0, X19
	0x038090D4 MOV X2, X31
	0x038090D8 BL 0x330E100
	0x038090DC ADRP X0, 0x941000
	0x038090E0 LDR X0, [X0 + 0x4B8]
	0x038090E4 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBDA000
	007 Move X22, 0x943000
	008 Move W8, [X20+1107]
	009 Move X22, [X22+1104]
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x942000
	017 Move X0, [X0+1112]
	018 Call 0x1C17CF4
	019 Move X0, 0x942000
	020 Move X0, [X0+1056]
	021 Call 0x1C17CF4
	022 Move X0, 0x942000
	023 Move X0, [X0+1120]
	024 Call 0x1C17CF4
	025 Move X0, 0x942000
	026 Move X0, [X0+1104]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1107], W8
	030 Move X0, [X22]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X20, X0
	034 Call Object..ctor, X0
	035 Compare X20, 0
	036 JumpIfEqual {77}
	037 Move X22, 0x942000
	038 Move X22, [X22+1056]
	039 Move [X20+16], X21
	040 Compare X21, 0
	041 JumpIfEqual {61}
	042 Move X8, 0x942000
	043 Move X8, [X8+1112]
	044 Move X21, 0x942000
	045 Move X0, [X8]
	046 Move X21, [X21+1120]
	047 Call 0x1C17F10
	048 Move X2, [X21]
	049 Move X1, X20
	050 Move X3, X31
	051 Move X21, X0
	052 Call Action`1<Int32Enum>..ctor, X0, X1, X2
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {59}
	057 Call 0x1C17DFC
	058 Move X0, [X22]
	059 Move X8, [X0+184]
	060 Move [X8+8], X21
	061 Move X0, [X22]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X22]
	067 Move X8, [X0+184]
	068 Move [X8+8], X31
	069 Move X8, [X20+16]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move [X19+40], X8
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X30, [X31+48]
	076 Return 
	077 Call 0x1C17F20

Method: System.Func`2<UnityEngine.InputSystem.LowLevel.InputUpdateType, System.Boolean> get_onShouldRunUpdate()

Disassembly:
	0x038090F0 BL 0x1C16DEC
	0x038090F4 ADRP X0, 0x941000

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_onShouldRunUpdate(System.Func`2<UnityEngine.InputSystem.LowLevel.InputUpdateType, System.Boolean> value)

Disassembly:
	0x038090F8 LDR X0, [X0 + 0x88]
	0x038090FC BL 0x1C16D08
	0x03809100 MOV X1, X19
	0x03809104 MOV X2, X31
	0x03809108 BL 0x321EFD0
	0x0380910C MOV X19, X0
	0x03809110 ADRP X0, 0x8F2000
	0x03809114 LDR X0, [X0 + 0x578]
	0x03809118 BL 0x1C16D08
	0x0380911C BL 0x1C16F10
	0x03809120 MOV X1, X19
	0x03809124 MOV X2, X31
	0x03809128 MOV X20, X0
	0x0380912C BL 0x3314A68
	0x03809130 ADRP X0, 0x941000
	0x03809134 LDR X0, [X0 + 0x4B8]
	0x03809138 BL 0x1C16D08
	0x0380913C MOV X1, X0
	0x03809140 MOV X0, X20
	0x03809144 BL 0x1C16DEC
	0x03809148 STP X30, X23, [X31 - 0x30]!
	0x0380914C STP X22, X21, [X31 + 0x10]
	0x03809150 STP X20, X19, [X31 + 0x20]
	0x03809154 ADRP X23, 0xBD8000
	0x03809158 LDRB W8, [X23 + 0x469]
	0x0380915C MOV X20, X3
	0x03809160 MOV W19, W2
	0x03809164 MOV X22, X1
	0x03809168 MOV X21, X0
	0x0380916C TBNZ X8, 0x0, 0x3809184
	0x03809170 ADRP X0, 0x941000
	0x03809174 LDR X0, [X0 + 0x4C0]
	0x03809178 BL 0x1C16CF4
	0x0380917C MOVZ W8, 0x1
	0x03809180 STRB W8, [X23 + 0x469]
	0x03809184 CBZ X22, 0x38091D4
	0x03809188 ADRP X8, 0x941000
	0x0380918C LDR X8, [X8 + 0x4C0]
	0x03809190 LDR X0, [X8]
	0x03809194 BL 0x1C16F10
	0x03809198 MOV X1, X31
	0x0380919C MOV X23, X0
	0x038091A0 BL 0x33BDD8C
	0x038091A4 CBZ X23, 0x380921C
	0x038091A8 SXTW X2, W19
	0x038091AC MOV X0, X21
	0x038091B0 MOV X1, X23
	0x038091B4 MOV W3, W31
	0x038091B8 STP X22, X20, [X23 + 0x10]
	0x038091BC BL 0x3808FE4
	0x038091C0 LDP X20, X19, [X31 + 0x20]
	0x038091C4 LDP X22, X21, [X31 + 0x10]
	0x038091C8 MOV X0, X23
	0x038091CC LDP X30, X23, [X31], #0x30
	0x038091D0 RET
	0x038091D4 ADRP X0, 0x8EF000
	0x038091D8 LDR X0, [X0 + 0x528]
	0x038091DC BL 0x1C16D08
	0x038091E0 BL 0x1C16F10
	0x038091E4 MOV X19, X0
	0x038091E8 ADRP X0, 0x941000
	0x038091EC LDR X0, [X0 + 0x4C8]
	0x038091F0 BL 0x1C16D08
	0x038091F4 MOV X1, X0
	0x038091F8 MOV X0, X19
	0x038091FC MOV X2, X31
	0x03809200 BL 0x330E100

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBD9000
	007 Move X22, 0x942000
	008 Move W8, [X20+1108]
	009 Move X22, [X22+1128]
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x942000
	017 Move X0, [X0+1136]
	018 Call 0x1C17CF4
	019 Move X0, 0x942000
	020 Move X0, [X0+1056]
	021 Call 0x1C17CF4
	022 Move X0, 0x942000
	023 Move X0, [X0+1144]
	024 Call 0x1C17CF4
	025 Move X0, 0x942000
	026 Move X0, [X0+1128]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1108], W8
	030 Move X0, [X22]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X20, X0
	034 Call Object..ctor, X0
	035 Compare X20, 0
	036 JumpIfEqual {77}
	037 Move X22, 0x942000
	038 Move X22, [X22+1056]
	039 Move [X20+16], X21
	040 Compare X21, 0
	041 JumpIfEqual {61}
	042 Move X8, 0x942000
	043 Move X8, [X8+1136]
	044 Move X21, 0x942000
	045 Move X0, [X8]
	046 Move X21, [X21+1144]
	047 Call 0x1C17F10
	048 Move X2, [X21]
	049 Move X1, X20
	050 Move X3, X31
	051 Move X21, X0
	052 Call Func`2<Int32Enum, Boolean>..ctor, X0, X1, X2
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {59}
	057 Call 0x1C17DFC
	058 Move X0, [X22]
	059 Move X8, [X0+184]
	060 Move [X8+16], X21
	061 Move X0, [X22]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X22]
	067 Move X8, [X0+184]
	068 Move [X8+16], X31
	069 Move X8, [X20+16]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move [X19+48], X8
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X30, [X31+48]
	076 Return 
	077 Call 0x1C17F20

Method: System.Action`2<System.Int32, System.String> get_onDeviceDiscovered()

Disassembly:
	0x0380920C BL 0x1C16D08
	0x03809210 MOV X1, X0
	0x03809214 MOV X0, X19
	0x03809218 BL 0x1C16DEC
	0x0380921C BL 0x1C16F20
	0x03809220 MOV X1, X31
	0x03809224 B 0x33BDD8C
	0x03809228 STR X30, [X31 - 0x30]!
	0x0380922C STP X22, X21, [X31 + 0x10]
	0x03809230 STP X20, X19, [X31 + 0x20]
	0x03809234 ADRP X22, 0xBD8000
	0x03809238 LDRB W8, [X22 + 0x46A]
	0x0380923C MOV X19, X2
	0x03809240 MOV X20, X1
	0x03809244 MOV X21, X0
	0x03809248 TBNZ X8, 0x0, 0x3809260
	0x0380924C ADRP X0, 0x912000
	0x03809250 LDR X0, [X0 + 0x270]
	0x03809254 BL 0x1C16CF4
	0x03809258 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x942000
	006 Move W8, [X19+1109]
	007 Move X20, [X20+1056]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x942000
	013 Move X0, [X0+1056]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1109], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call NativeInputSystem.get_onDeviceDiscovered
	027 Return X0

Method: System.Void set_onDeviceDiscovered(System.Action`2<System.Int32, System.String> value)

Disassembly:
	0x0380925C STRB W8, [X22 + 0x46A]
	0x03809260 CBZ X21, 0x38092B0
	0x03809264 CBZ X20, 0x38092D0
	0x03809268 ADRP X22, 0x912000
	0x0380926C LDR X22, [X22 + 0x270]
	0x03809270 LDR X0, [X22]
	0x03809274 LDR W8, [X0 + 0xE0]
	0x03809278 CBNZ W8, 0x3809284
	0x0380927C BL 0x1C16DFC
	0x03809280 LDR X0, [X22]
	0x03809284 LDR X8, [X0 + 0xB8]
	0x03809288 LDR X0, [X8]
	0x0380928C CBZ X0, 0x3809318
	0x03809290 MOV X1, X21
	0x03809294 MOV X2, X20
	0x03809298 MOV X3, X19
	0x0380929C LDP X20, X19, [X31 + 0x20]
	0x038092A0 LDP X22, X21, [X31 + 0x10]
	0x038092A4 MOV X4, X31
	0x038092A8 LDR X30, [X31], #0x30
	0x038092AC B 0x37CC4F0
	0x038092B0 ADRP X0, 0x8EF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBD9000
	006 Move X21, 0x942000
	007 Move W8, [X20+1110]
	008 Move X21, [X21+1056]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x942000
	015 Move X0, [X0+1056]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1110], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call NativeInputSystem.set_onDeviceDiscovered, X0
	031 Return 

Method: System.Action get_onShutdown()

Disassembly:
	0x038092B4 LDR X0, [X0 + 0x528]
	0x038092B8 BL 0x1C16D08

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_onShutdown(System.Action value)

Disassembly:
	0x038092BC BL 0x1C16F10
	0x038092C0 MOV X19, X0
	0x038092C4 ADRP X0, 0x912000
	0x038092C8 LDR X0, [X0 + 0xD60]
	0x038092CC B 0x38092EC
	0x038092D0 ADRP X0, 0x8EF000
	0x038092D4 LDR X0, [X0 + 0x528]
	0x038092D8 BL 0x1C16D08
	0x038092DC BL 0x1C16F10
	0x038092E0 MOV X19, X0
	0x038092E4 ADRP X0, 0x941000
	0x038092E8 LDR X0, [X0 + 0x4B0]
	0x038092EC BL 0x1C16D08
	0x038092F0 MOV X1, X0
	0x038092F4 MOV X0, X19
	0x038092F8 MOV X2, X31
	0x038092FC BL 0x330E100
	0x03809300 ADRP X0, 0x941000
	0x03809304 LDR X0, [X0 + 0x4D8]
	0x03809308 BL 0x1C16D08
	0x0380930C MOV X1, X0
	0x03809310 MOV X0, X19
	0x03809314 BL 0x1C16DEC
	0x03809318 BL 0x1C16F20
	0x0380931C STR D8, [X31 - 0x40]!
	0x03809320 STP X30, X23, [X31 + 0x10]
	0x03809324 STP X22, X21, [X31 + 0x20]
	0x03809328 STP X20, X19, [X31 + 0x30]
	0x0380932C ADRP X23, 0xBD8000
	0x03809330 LDRB W8, [X23 + 0x46B]
	0x03809334 MOV W19, W3
	0x03809338 MOV X20, X2
	0x0380933C MOV V8.16B, V0.16B
	0x03809340 MOV X21, X1
	0x03809344 MOV X22, X0
	0x03809348 TBNZ X8, 0x0, 0x3809360
	0x0380934C ADRP X0, 0x912000
	0x03809350 LDR X0, [X0 + 0x270]
	0x03809354 BL 0x1C16CF4
	0x03809358 MOVZ W8, 0x1
	0x0380935C STRB W8, [X23 + 0x46B]
	0x03809360 CBZ X21, 0x38093B8
	0x03809364 ADRP X23, 0x912000
	0x03809368 LDR X23, [X23 + 0x270]
	0x0380936C LDR X0, [X23]
	0x03809370 LDR W8, [X0 + 0xE0]
	0x03809374 CBNZ W8, 0x3809380
	0x03809378 BL 0x1C16DFC
	0x0380937C LDR X0, [X23]
	0x03809380 LDR X8, [X0 + 0xB8]
	0x03809384 LDR X0, [X8]
	0x03809388 CBZ X0, 0x3809400
	0x0380938C MOV X1, X22
	0x03809390 MOV X2, X21
	0x03809394 MOV X3, X20
	0x03809398 MOV W4, W19
	0x0380939C LDP X20, X19, [X31 + 0x30]
	0x038093A0 LDP X22, X21, [X31 + 0x20]
	0x038093A4 LDP X30, X23, [X31 + 0x10]
	0x038093A8 MOV V0.16B, V8.16B
	0x038093AC MOV X5, X31
	0x038093B0 LDR V8, [X31], #0x40
	0x038093B4 B 0x37CC6FC
	0x038093B8 ADRP X0, 0x8EF000
	0x038093BC LDR X0, [X0 + 0x528]
	0x038093C0 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD9000
	006 Move W8, [X21+1111]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x8EC000
	014 Move X0, [X0+3696]
	015 Call 0x1C17CF4
	016 Move X0, 0x8EB000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x942000
	020 Move X0, [X0+1152]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1111], W8
	024 Compare X19, 0
	025 JumpIfEqual {50}
	026 Move X8, [X20+24]
	027 Compare X8, 0
	028 JumpIfNotEqual {71}
	029 Move X8, 0x8EC000
	030 Move X8, [X8+3696]
	031 Move X0, [X8]
	032 Call 0x1C17F10
	033 Move X8, 0x942000
	034 Move X8, [X8+1152]
	035 Move X1, X20
	036 Move X3, X31
	037 Move X21, X0
	038 Move X2, [X8]
	039 Call Action..ctor, X0, X1, X2
	040 Move X8, 0x8EB000
	041 Move X8, [X8+2416]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Call Application.add_quitting, X0
	050 Move X8, 0x8EC000
	051 Move X8, [X8+3696]
	052 Move X0, [X8]
	053 Call 0x1C17F10
	054 Move X8, 0x942000
	055 Move X8, [X8+1152]
	056 Move X1, X20
	057 Move X3, X31
	058 Move X21, X0
	059 Move X2, [X8]
	060 Call Action..ctor, X0, X1, X2
	061 Move X8, 0x8EB000
	062 Move X8, [X8+2416]
	063 Move X0, [X8]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X21
	069 Move X1, X31
	070 Call Application.remove_quitting, X0
	071 Move [X20+24], X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Return 

Method: System.Action`1<System.Boolean> get_onPlayerFocusChanged()

Disassembly:
	0x038093C4 BL 0x1C16F10
	0x038093C8 MOV X19, X0

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_onPlayerFocusChanged(System.Action`1<System.Boolean> value)

Disassembly:
	0x038093CC ADRP X0, 0x941000
	0x038093D0 LDR X0, [X0 + 0x4B0]
	0x038093D4 BL 0x1C16D08
	0x038093D8 MOV X1, X0
	0x038093DC MOV X0, X19
	0x038093E0 MOV X2, X31
	0x038093E4 BL 0x330E100
	0x038093E8 ADRP X0, 0x941000
	0x038093EC LDR X0, [X0 + 0x4E0]
	0x038093F0 BL 0x1C16D08
	0x038093F4 MOV X1, X0
	0x038093F8 MOV X0, X19
	0x038093FC BL 0x1C16DEC
	0x03809400 BL 0x1C16F20
	0x03809404 STR X30, [X31 - 0x30]!
	0x03809408 STP X22, X21, [X31 + 0x10]
	0x0380940C STP X20, X19, [X31 + 0x20]
	0x03809410 ADRP X22, 0xBD8000
	0x03809414 LDRB W8, [X22 + 0x46C]
	0x03809418 MOV W19, W2
	0x0380941C MOV X20, X1
	0x03809420 MOV X21, X0
	0x03809424 TBNZ X8, 0x0, 0x380943C
	0x03809428 ADRP X0, 0x912000
	0x0380942C LDR X0, [X0 + 0x270]
	0x03809430 BL 0x1C16CF4
	0x03809434 MOVZ W8, 0x1
	0x03809438 STRB W8, [X22 + 0x46C]
	0x0380943C CBZ X21, 0x3809488
	0x03809440 ADRP X22, 0x912000
	0x03809444 LDR X22, [X22 + 0x270]
	0x03809448 LDR X0, [X22]
	0x0380944C LDR W8, [X0 + 0xE0]
	0x03809450 CBNZ W8, 0x380945C
	0x03809454 BL 0x1C16DFC
	0x03809458 LDR X0, [X22]
	0x0380945C LDR X8, [X0 + 0xB8]
	0x03809460 LDR X0, [X8]
	0x03809464 CBZ X0, 0x38094D0
	0x03809468 MOV X1, X21
	0x0380946C MOV X2, X20
	0x03809470 MOV W3, W19
	0x03809474 LDP X20, X19, [X31 + 0x20]
	0x03809478 LDP X22, X21, [X31 + 0x10]
	0x0380947C MOV X4, X31
	0x03809480 LDR X30, [X31], #0x30
	0x03809484 B 0x37CC790
	0x03809488 ADRP X0, 0x8EF000
	0x0380948C LDR X0, [X0 + 0x528]
	0x03809490 BL 0x1C16D08
	0x03809494 BL 0x1C16F10
	0x03809498 MOV X19, X0
	0x0380949C ADRP X0, 0x941000
	0x038094A0 LDR X0, [X0 + 0x4B0]
	0x038094A4 BL 0x1C16D08
	0x038094A8 MOV X1, X0
	0x038094AC MOV X0, X19
	0x038094B0 MOV X2, X31
	0x038094B4 BL 0x330E100
	0x038094B8 ADRP X0, 0x941000
	0x038094BC LDR X0, [X0 + 0x4E8]
	0x038094C0 BL 0x1C16D08
	0x038094C4 MOV X1, X0
	0x038094C8 MOV X0, X19
	0x038094CC BL 0x1C16DEC
	0x038094D0 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBD9000
	006 Move W8, [X21+1112]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x8EB000
	014 Move X0, [X0+3368]
	015 Call 0x1C17CF4
	016 Move X0, 0x8EB000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x942000
	020 Move X0, [X0+1160]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1112], W8
	024 Compare X19, 0
	025 JumpIfEqual {50}
	026 Move X8, [X20+64]
	027 Compare X8, 0
	028 JumpIfNotEqual {71}
	029 Move X8, 0x8EB000
	030 Move X8, [X8+3368]
	031 Move X0, [X8]
	032 Call 0x1C17F10
	033 Move X8, 0x942000
	034 Move X8, [X8+1160]
	035 Move X1, X20
	036 Move X3, X31
	037 Move X21, X0
	038 Move X2, [X8]
	039 Call Action`1<Boolean>..ctor, X0, X1, X2
	040 Move X8, 0x8EB000
	041 Move X8, [X8+2416]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Call Application.add_focusChanged, X0
	050 Move X8, 0x8EB000
	051 Move X8, [X8+3368]
	052 Move X0, [X8]
	053 Call 0x1C17F10
	054 Move X8, 0x942000
	055 Move X8, [X8+1160]
	056 Move X1, X20
	057 Move X3, X31
	058 Move X21, X0
	059 Move X2, [X8]
	060 Call Action`1<Boolean>..ctor, X0, X1, X2
	061 Move X8, 0x8EB000
	062 Move X8, [X8+2416]
	063 Move X0, [X8]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X21
	069 Move X1, X31
	070 Call Application.remove_focusChanged, X0
	071 Move [X20+64], X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Return 

Method: System.Boolean get_isPlayerFocused()

Disassembly:
	0x038094D4 STR X30, [X31 - 0x10]!
	0x038094D8 LDR X8, [X0 + 0x10]
	0x038094DC CBZ X8, 0x38094F4
	0x038094E0 LDR X5, [X8 + 0x18]
	0x038094E4 LDR X0, [X8 + 0x40]
	0x038094E8 LDR X4, [X8 + 0x28]
	0x038094EC LDR X30, [X31], #0x10
	0x038094F0 BR X5
	0x038094F4 BL 0x1C16F20
	0x038094F8 LDR X8, [X0 + 0x18]
	0x038094FC CBZ X8, 0x3809510
	0x03809500 LDR X5, [X8 + 0x18]
	0x03809504 LDR X0, [X8 + 0x40]
	0x03809508 LDR X4, [X8 + 0x28]
	0x0380950C BR X5
	0x03809510 RET
	0x03809514 STP X30, X21, [X31 - 0x20]!
	0x03809518 STP X20, X19, [X31 + 0x10]
	0x0380951C ADRP X21, 0xBD8000
	0x03809520 ADRP X20, 0x912000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x8EB000
	006 Move W8, [X19+1113]
	007 Move X20, [X20+2416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x8EB000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1113], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call Application.get_isFocused
	027 Return X0

Method: System.Single get_pollingFrequency()

Disassembly:
	0x03809524 LDRB W8, [X21 + 0x46D]
	0x03809528 LDR X20, [X20 + 0xD18]

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_pollingFrequency(System.Single value)

Disassembly:
	0x0380952C MOV X19, X0
	0x03809530 TBNZ X8, 0x0, 0x3809548
	0x03809534 ADRP X0, 0x912000
	0x03809538 LDR X0, [X0 + 0xD18]
	0x0380953C BL 0x1C16CF4
	0x03809540 MOVZ W8, 0x1
	0x03809544 STRB W8, [X21 + 0x46D]
	0x03809548 LDR X0, [X20]
	0x0380954C LDR W8, [X0 + 0xE0]
	0x03809550 CBNZ W8, 0x380955C
	0x03809554 BL 0x1C16DFC
	0x03809558 LDR X0, [X20]
	0x0380955C LDR X8, [X0 + 0xB8]
	0x03809560 LDR W9, [X8 + 0x4]
	0x03809564 CMP W9, W19
	0x03809568 B.EQ 0x380958C
	0x0380956C LDR W9, [X0 + 0xE0]
	0x03809570 CBNZ W9, 0x3809580
	0x03809574 BL 0x1C16DFC
	0x03809578 LDR X0, [X20]
	0x0380957C LDR X8, [X0 + 0xB8]
	0x03809580 LDR W9, [X8 + 0x8]
	0x03809584 CMP W9, W19
	0x03809588 B.NE 0x3809594
	0x0380958C MOVZ W0, 0x1
	0x03809590 B 0x38095D8

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xBD9000
	007 Move X20, 0x942000
	008 Move W8, [X21+1114]
	009 Move X20, [X20+1056]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x942000
	017 Move X0, [X0+1056]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1114], W8
	021 Move [X19+56], S8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Move V0, V8
	032 Move X0, X31
	033 Move V8, [X31+48]
	034 Call NativeInputSystem.SetPollingFrequency, V0
	035 Return 

Method: System.Double get_currentTime()

Disassembly:
	0x03809594 LDR W9, [X0 + 0xE0]
	0x03809598 CBNZ W9, 0x38095A8
	0x0380959C BL 0x1C16DFC
	0x038095A0 LDR X0, [X20]
	0x038095A4 LDR X8, [X0 + 0xB8]
	0x038095A8 LDR W9, [X8 + 0xC]
	0x038095AC CMP W9, W19
	0x038095B0 B.EQ 0x38095D4
	0x038095B4 LDR W9, [X0 + 0xE0]
	0x038095B8 CBNZ W9, 0x38095C8
	0x038095BC BL 0x1C16DFC
	0x038095C0 LDR X0, [X20]
	0x038095C4 LDR X8, [X0 + 0xB8]
	0x038095C8 LDR W9, [X8 + 0x10]
	0x038095CC CMP W9, W19
	0x038095D0 B.NE 0x38095E4
	0x038095D4 MOVZ W0, 0x20
	0x038095D8 LDP X20, X19, [X31 + 0x10]
	0x038095DC LDP X30, X21, [X31], #0x20
	0x038095E0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x942000
	006 Move W8, [X19+1115]
	007 Move X20, [X20+1056]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x942000
	013 Move X0, [X0+1056]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1115], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call NativeInputSystem.get_currentTime
	027 Return V0

Method: System.Double get_currentTimeForFixedUpdate()

Disassembly:
	0x038095E4 LDR W9, [X0 + 0xE0]
	0x038095E8 CBNZ W9, 0x38095F8
	0x038095EC BL 0x1C16DFC
	0x038095F0 LDR X0, [X20]
	0x038095F4 LDR X8, [X0 + 0xB8]
	0x038095F8 LDR W9, [X8 + 0x14]
	0x038095FC CMP W9, W19
	0x03809600 B.EQ 0x3809624
	0x03809604 LDR W9, [X0 + 0xE0]
	0x03809608 CBNZ W9, 0x3809618
	0x0380960C BL 0x1C16DFC

ISIL:
	001 Move [X31-16], D8
	002 Move [X31+8], X30
	003 Move X0, X31
	004 Call Time.get_fixedUnscaledTime
	005 Move V8, V0
	006 Call NativeInputRuntime.get_currentTimeOffsetToRealtimeSinceStartup, X0
	007 Move X30, [X31+8]
	008 NotImplemented "Instruction FCVT not yet implemented."
	009 Add D0, D0, D1
	010 Move V8, [X31+16]
	011 Return V0

Method: System.Double get_currentTimeOffsetToRealtimeSinceStartup()

Disassembly:
	0x03809610 LDR X0, [X20]
	0x03809614 LDR X8, [X0 + 0xB8]
	0x03809618 LDR W9, [X8 + 0x18]
	0x0380961C CMP W9, W19
	0x03809620 B.NE 0x380962C
	0x03809624 MOVZ W0, 0x10
	0x03809628 B 0x38095D8
	0x0380962C LDR W9, [X0 + 0xE0]
	0x03809630 CBNZ W9, 0x3809640
	0x03809634 BL 0x1C16DFC
	0x03809638 LDR X0, [X20]
	0x0380963C LDR X8, [X0 + 0xB8]
	0x03809640 LDR W9, [X8 + 0x1C]
	0x03809644 CMP W9, W19
	0x03809648 B.EQ 0x380966C
	0x0380964C LDR W9, [X0 + 0xE0]
	0x03809650 CBNZ W9, 0x3809660
	0x03809654 BL 0x1C16DFC
	0x03809658 LDR X0, [X20]
	0x0380965C LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x942000
	006 Move W8, [X19+1116]
	007 Move X20, [X20+1056]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x942000
	013 Move X0, [X0+1056]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1116], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call NativeInputSystem.get_currentTimeOffsetToRealtimeSinceStartup
	027 Return V0

Method: System.Single get_unscaledGameTime()

Disassembly:
	0x03809660 LDR W9, [X8 + 0x20]
	0x03809664 CMP W9, W19

ISIL:
	001 Move X0, X31
	002 Call Time.get_unscaledTime
	003 Return V0

Method: System.Boolean get_runInBackground()

Disassembly:
	0x03809668 B.NE 0x3809674
	0x0380966C MOVZ W0, 0x8
	0x03809670 B 0x38095D8
	0x03809674 LDR W9, [X0 + 0xE0]
	0x03809678 CBNZ W9, 0x3809688
	0x0380967C BL 0x1C16DFC
	0x03809680 LDR X0, [X20]
	0x03809684 LDR X8, [X0 + 0xB8]
	0x03809688 LDR W9, [X8 + 0x24]
	0x0380968C CMP W9, W19
	0x03809690 B.EQ 0x38096B4
	0x03809694 LDR W9, [X0 + 0xE0]
	0x03809698 CBNZ W9, 0x38096A8
	0x0380969C BL 0x1C16DFC
	0x038096A0 LDR X0, [X20]
	0x038096A4 LDR X8, [X0 + 0xB8]
	0x038096A8 LDR W9, [X8 + 0x28]
	0x038096AC CMP W9, W19
	0x038096B0 B.NE 0x38096BC
	0x038096B4 MOVZ W0, 0x40
	0x038096B8 B 0x38095D8
	0x038096BC LDR W9, [X0 + 0xE0]
	0x038096C0 CBNZ W9, 0x38096D0
	0x038096C4 BL 0x1C16DFC
	0x038096C8 LDR X0, [X20]
	0x038096CC LDR X8, [X0 + 0xB8]
	0x038096D0 LDR W9, [X8 + 0x2C]
	0x038096D4 CMP W9, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBD9000
	006 Move X21, 0x8EB000
	007 Move W8, [X20+1117]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x8EB000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1117], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_runInBackground
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {31}
	030 Move W0, 1
	031 Move W8, [X19+16]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSET not yet implemented."
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0

Method: System.Void set_runInBackground(System.Boolean value)

Disassembly:
	0x038096D8 B.EQ 0x38095D4
	0x038096DC LDR W9, [X0 + 0xE0]
	0x038096E0 CBNZ W9, 0x38096F0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Void OnShutdown()

Disassembly:
	0x038096E4 BL 0x1C16DFC
	0x038096E8 LDR X0, [X20]
	0x038096EC LDR X8, [X0 + 0xB8]
	0x038096F0 LDR W9, [X8 + 0x30]
	0x038096F4 CMP W9, W19
	0x038096F8 B.EQ 0x38096B4
	0x038096FC LDR W9, [X0 + 0xE0]
	0x03809700 CBNZ W9, 0x3809710
	0x03809704 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move X2, [X8+24]
	006 Move X0, [X8+64]
	007 Move X1, [X8+40]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean OnWantsToShutdown()

Disassembly:
	0x03809708 LDR X0, [X20]
	0x0380970C LDR X8, [X0 + 0xB8]
	0x03809710 LDR W9, [X8 + 0x34]
	0x03809714 CMP W9, W19
	0x03809718 B.EQ 0x38096B4
	0x0380971C LDR W9, [X0 + 0xE0]
	0x03809720 CBNZ W9, 0x3809730
	0x03809724 BL 0x1C16DFC
	0x03809728 LDR X0, [X20]
	0x0380972C LDR X8, [X0 + 0xB8]
	0x03809730 LDR W9, [X8 + 0x38]
	0x03809734 CMP W9, W19
	0x03809738 B.NE 0x3809744
	0x0380973C MOVZ W0, 0x60
	0x03809740 B 0x38095D8
	0x03809744 LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+60]
	004 Compare W8, 0
	005 JumpIfNotEqual {16}
	006 Move X8, [X0+24]
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfEqual {20}
	010 Move X9, [X8+24]
	011 Move X0, [X8+64]
	012 Move X1, [X8+40]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move W8, 1
	015 Move [X19+60], W8
	016 Move W0, 1
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return X0
	020 Call 0x1C17F20

Method: System.Void OnFocusChanged(System.Boolean focus)

Disassembly:
	0x03809748 CBNZ W9, 0x3809758
	0x0380974C BL 0x1C16DFC
	0x03809750 LDR X0, [X20]
	0x03809754 LDR X8, [X0 + 0xB8]
	0x03809758 LDR W9, [X8 + 0x3C]
	0x0380975C CMP W9, W19
	0x03809760 B.NE 0x380976C
	0x03809764 MOVZ W0, 0x80
	0x03809768 B 0x38095D8
	0x0380976C LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move X3, [X8+24]
	006 Move X0, [X8+64]
	007 Move X2, [X8+40]
	008 And W1, W1, 1
	009 Move X30, [X31+16]
	010 CallNoReturn X3
	011 Call 0x1C17F20

Method: UnityEngine.Vector2 get_screenSize()

Disassembly:
	0x03809770 CBNZ W9, 0x3809780
	0x03809774 BL 0x1C16DFC
	0x03809778 LDR X0, [X20]
	0x0380977C LDR X8, [X0 + 0xB8]
	0x03809780 LDR W9, [X8 + 0x40]
	0x03809784 CMP W9, W19
	0x03809788 B.EQ 0x38095D4
	0x0380978C LDR W9, [X0 + 0xE0]
	0x03809790 CBNZ W9, 0x38097A0
	0x03809794 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, X31
	004 Call Screen.get_width
	005 Move W19, W0
	006 Move X0, X31
	007 Call Screen.get_height
	008 NotImplemented "Instruction SCVTF not yet implemented."
	009 NotImplemented "Instruction SCVTF not yet implemented."
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: UnityEngine.ScreenOrientation get_screenOrientation()

Disassembly:
	0x03809798 LDR X0, [X20]
	0x0380979C LDR X8, [X0 + 0xB8]

ISIL:
	001 Move X0, X31
	002 Call Screen.get_orientation
	003 Return X0

Method: System.Boolean get_isInBatchMode()

Disassembly:
	0x038097A0 LDR W9, [X8 + 0x44]
	0x038097A4 CMP W9, W19
	0x038097A8 B.NE 0x38097B4
	0x038097AC MOVZ W0, 0x30
	0x038097B0 B 0x38095D8
	0x038097B4 LDR W9, [X0 + 0xE0]
	0x038097B8 CBNZ W9, 0x38097C8
	0x038097BC BL 0x1C16DFC
	0x038097C0 LDR X0, [X20]
	0x038097C4 LDR X8, [X0 + 0xB8]
	0x038097C8 LDR W9, [X8 + 0x48]
	0x038097CC CMP W9, W19
	0x038097D0 B.EQ 0x3809624
	0x038097D4 LDR W9, [X0 + 0xE0]
	0x038097D8 CBNZ W9, 0x38097E8
	0x038097DC BL 0x1C16DFC
	0x038097E0 LDR X8, [X20]
	0x038097E4 LDR X8, [X8 + 0xB8]
	0x038097E8 LDR W8, [X8 + 0x4C]
	0x038097EC CMP W8, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x8EB000
	006 Move W8, [X19+1118]
	007 Move X20, [X20+2416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x8EB000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1118], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call Application.get_isBatchMode
	027 Return X0

Method: System.Void RegisterAnalyticsEvent(System.String name, System.Int32 maxPerHour, System.Int32 maxPropertiesPerEvent)

Disassembly:
	0x038097F0 MOVZ W8, 0x18

ISIL:
	001 Return 

Method: System.Void SendAnalyticsEvent(System.String name, System.Object data)

Disassembly:
	0x038097F4 CSINV W0, W8, W31, EQ

ISIL:
	001 Return 

Method: System.Void .ctor()

Disassembly:
	0x038097F8 B 0x38095D8
	0x038097FC STR X30, [X31 - 0x30]!
	0x03809800 STP X22, X21, [X31 + 0x10]
	0x03809804 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W8, 0x42700000
	002 Move X1, X31
	003 Move [X0+56], W8
	004 Call Object..ctor, X0
	005 Return 

Method: System.Void .cctor()

Disassembly:
	0x03809808 ADRP X22, 0xBD8000
	0x0380980C ADRP X20, 0x911000
	0x03809810 ADRP X21, 0x8EA000
	0x03809814 LDRB W8, [X22 + 0x46E]
	0x03809818 LDR X20, [X20 + 0xD80]
	0x0380981C LDR X21, [X21 + 0x6C0]
	0x03809820 MOV X19, X0
	0x03809824 TBNZ X8, 0x0, 0x38098E4
	0x03809828 ADRP X0, 0x911000
	0x0380982C LDR X0, [X0 + 0xD68]
	0x03809830 BL 0x1C16CF4
	0x03809834 ADRP X0, 0x912000
	0x03809838 LDR X0, [X0 + 0xA78]
	0x0380983C BL 0x1C16CF4
	0x03809840 ADRP X0, 0x912000
	0x03809844 LDR X0, [X0 + 0xD18]
	0x03809848 BL 0x1C16CF4
	0x0380984C ADRP X0, 0x911000
	0x03809850 LDR X0, [X0 + 0xD78]
	0x03809854 BL 0x1C16CF4
	0x03809858 ADRP X0, 0x911000
	0x0380985C LDR X0, [X0 + 0xD80]
	0x03809860 BL 0x1C16CF4
	0x03809864 ADRP X0, 0x911000
	0x03809868 LDR X0, [X0 + 0xD88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD9000
	005 Move X20, 0x93E000
	006 Move W8, [X19+1119]
	007 Move X20, [X20+2632]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x93E000
	013 Move X0, [X0+2632]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1119], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move W8, 0x42700000
	020 Move X1, X31
	021 Move X19, X0
	022 Move [X0+56], W8
	023 Call Object..ctor, X0
	024 Move X8, [X20]
	025 Move X8, [X8+184]
	026 Move [X8], X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return 

