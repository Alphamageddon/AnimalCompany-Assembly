Type: UnityEngine.InputSystem.InputControl`1

Method: System.Type get_valueType()

Disassembly:
	0x02DFCDA8 LDR X1, [X23]
	0x02DFCDAC LDRH W9, [X8 + 0x12E]
	0x02DFCDB0 CBZ X9, 0x2DFCDD4
	0x02DFCDB4 LDR X10, [X8 + 0xB0]
	0x02DFCDB8 ADD X10, X10, 0x8
	0x02DFCDBC LDUR X11, [X10 - 0x8]
	0x02DFCDC0 CMP X11, X1
	0x02DFCDC4 B.EQ 0x2DFCDE4
	0x02DFCDC8 SUBS X9, X9, 0x1
	0x02DFCDCC ADD X10, X10, 0x10
	0x02DFCDD0 B.NE 0x2DFCDBC
	0x02DFCDD4 MOV X0, X19
	0x02DFCDD8 MOV W2, W31
	0x02DFCDDC BL 0x1C5C788
	0x02DFCDE0 B 0x2DFCDF0
	0x02DFCDE4 LDRSW X9, [X10]
	0x02DFCDE8 ADD X8, X8, X9, 0x4, LSL
	0x02DFCDEC ADD X0, X8, 0x138
	0x02DFCDF0 LDP X8, X1, [X0]
	0x02DFCDF4 MOV X0, X19
	0x02DFCDF8 BLR X8
	0x02DFCDFC TBZ X0, 0x0, 0x2DFCE94
	0x02DFCE00 LDR X8, [X21 + 0x20]
	0x02DFCE04 LDR X8, [X8 + 0xC0]
	0x02DFCE08 LDR X1, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x15E0000
	006 Move X20, 0x12F8000
	007 Move W8, [X21+2533]
	008 Move X20, [X20+1728]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x12F8000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2533], W8
	019 Move X8, [X19+32]
	020 Move X0, [X20]
	021 Move X8, [X8+192]
	022 Move W9, [X0+224]
	023 Move X19, [X8]
	024 Compare W9, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Type.GetTypeFromHandle, X0
	034 Return X0

Method: System.Int32 get_valueSizeInBytes()

Disassembly:
	0x02DFCE0C LDRB W8, [X1 + 0x135]
	0x02DFCE10 TBNZ X8, 0x0, 0x2DFCE20

ISIL:
	001 Move W0, 32
	002 Return X0

Method: TValue get_value()

Disassembly:
	0x02DFCE14 MOV X0, X1
	0x02DFCE18 BL 0x1C5C684
	0x02DFCE1C MOV X1, X0
	0x02DFCE20 LDR X8, [X19]
	0x02DFCE24 LDRH W9, [X8 + 0x12E]
	0x02DFCE28 CBZ X9, 0x2DFCE4C
	0x02DFCE2C LDR X10, [X8 + 0xB0]
	0x02DFCE30 ADD X10, X10, 0x8
	0x02DFCE34 LDUR X11, [X10 - 0x8]
	0x02DFCE38 CMP X11, X1
	0x02DFCE3C B.EQ 0x2DFCE5C
	0x02DFCE40 SUBS X9, X9, 0x1
	0x02DFCE44 ADD X10, X10, 0x10
	0x02DFCE48 B.NE 0x2DFCE34
	0x02DFCE4C MOV X0, X19
	0x02DFCE50 MOV W2, W31
	0x02DFCE54 BL 0x1C5C788
	0x02DFCE58 B 0x2DFCE68
	0x02DFCE5C LDRSW X9, [X10]
	0x02DFCE60 ADD X8, X8, X9, 0x4, LSL
	0x02DFCE64 ADD X0, X8, 0x138
	0x02DFCE68 LDP X8, X1, [X0]
	0x02DFCE6C MOV X0, X19
	0x02DFCE70 BLR X8
	0x02DFCE74 CBZ X0, 0x2DFCF18
	0x02DFCE78 LDR X8, [X0]
	0x02DFCE7C LDP X9, X1, [X8 + 0x198]
	0x02DFCE80 BLR X9
	0x02DFCE84 CMP W0, 0x1
	0x02DFCE88 B.NE 0x2DFCDA4
	0x02DFCE8C STRB W24, [X20 + 0x138]
	0x02DFCE90 B 0x2DFCDA4
	0x02DFCE94 MOV X21, X31
	0x02DFCE98 CBZ X19, 0x2DFCEF4
	0x02DFCE9C LDR X8, [X19]
	0x02DFCEA0 LDR X1, [X22]
	0x02DFCEA4 LDRH W9, [X8 + 0x12E]
	0x02DFCEA8 CBZ X9, 0x2DFCECC
	0x02DFCEAC LDR X10, [X8 + 0xB0]
	0x02DFCEB0 ADD X10, X10, 0x8
	0x02DFCEB4 LDUR X11, [X10 - 0x8]
	0x02DFCEB8 CMP X11, X1
	0x02DFCEBC B.EQ 0x2DFCEDC
	0x02DFCEC0 SUBS X9, X9, 0x1
	0x02DFCEC4 ADD X10, X10, 0x10
	0x02DFCEC8 B.NE 0x2DFCEB4
	0x02DFCECC MOV X0, X19
	0x02DFCED0 MOV W2, W31
	0x02DFCED4 BL 0x1C5C788
	0x02DFCED8 B 0x2DFCEE8
	0x02DFCEDC LDRSW X9, [X10]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X21, 0x15E0000
	008 Move X22, 0x1323000
	009 Move W8, [X21+2534]
	010 Move X22, [X22+4064]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x1323000
	018 Move X0, [X0+4064]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2534], W8
	022 Move X8, [X22]
	023 Move X8, [X8+184]
	024 Move W8, [X8+1]
	025 Compare W8, 0
	026 JumpIfEqual {33}
	027 Move W8, [X19+164]
	028 Compare W8, 0
	029 JumpIfNotEqual {33}
	030 Move W8, [X19+312]
	031 Compare W8, 0
	032 JumpIfEqual {60}
	033 Move X0, X19
	034 Call 0x2DFCEE0, X0
	035 Move V1, [X0]
	036 Move V0, [X0+16]
	037 Add X1, X31, 64
	038 Move X0, X19
	039 Move [X31], V1
	040 Move [X31+8], V0
	041 Move X8, [X20+32]
	042 Move V0, [X31]
	043 Move V1, [X31+16]
	044 Move X8, [X8+192]
	045 Move X8, [X8+48]
	046 Move [X31+64], V0
	047 Move [X31+72], V1
	048 Move X8, [X8+32]
	049 Move X8, [X8+192]
	050 Move X2, [X8+120]
	051 Call 0x2E03F5C
	052 Move V1, [X31+64]
	053 Move V0, [X31+80]
	054 Add X8, X19, 248
	055 Move [X31+32], V1
	056 Move [X31+40], V0
	057 Move [X8+1], V0
	058 Move [X19+248], V1
	059 Move [X19+164], W31
	060 Add X0, X19, 248
	061 Move X20, [X31+128]
	062 Move X19, [X31+136]
	063 Move X22, [X31+112]
	064 Move X21, [X31+120]
	065 Move X30, [X31+96]
	066 Add X31, X31, 144
	067 Return X0

Method: TValue get_unprocessedValue()

Disassembly:
	0x02DFCEE0 ADD X8, X8, X9, 0x4, LSL
	0x02DFCEE4 ADD X0, X8, 0x138
	0x02DFCEE8 LDP X8, X1, [X0]
	0x02DFCEEC MOV X0, X19
	0x02DFCEF0 BLR X8
	0x02DFCEF4 CBNZ X21, 0x2DFCF20
	0x02DFCEF8 CBZ X20, 0x2DFCF28
	0x02DFCEFC MOV X0, X20
	0x02DFCF00 LDP X20, X19, [X31 + 0x30]
	0x02DFCF04 LDP X22, X21, [X31 + 0x20]
	0x02DFCF08 LDP X24, X23, [X31 + 0x10]
	0x02DFCF0C MOV X1, X31
	0x02DFCF10 LDR X30, [X31], #0x40
	0x02DFCF14 B 0x37729C8
	0x02DFCF18 BL 0x1C16F20
	0x02DFCF1C BL 0x1C16F20
	0x02DFCF20 MOV X0, X21
	0x02DFCF24 BL 0x1C16F18
	0x02DFCF28 BL 0x1C16F20
	0x02DFCF2C B 0x2DFCF3C
	0x02DFCF30 B 0x2DFCF3C
	0x02DFCF34 B 0x2DFCF3C
	0x02DFCF38 B 0x2DFCF3C
	0x02DFCF3C CMP W1, 0x1
	0x02DFCF40 B.NE 0x2DFCF54
	0x02DFCF44 BL 0x3EB1AD0
	0x02DFCF48 LDR X21, [X0]
	0x02DFCF4C BL 0x3EB1AE0
	0x02DFCF50 B 0x2DFCE98
	0x02DFCF54 MOV X20, X0
	0x02DFCF58 MOV X21, X31
	0x02DFCF5C B 0x2DFCF64
	0x02DFCF60 MOV X20, X0
	0x02DFCF64 CBZ X19, 0x2DFCFC0
	0x02DFCF68 LDR X8, [X19]
	0x02DFCF6C LDR X1, [X22]
	0x02DFCF70 LDRH W9, [X8 + 0x12E]
	0x02DFCF74 CBZ X9, 0x2DFCF98
	0x02DFCF78 LDR X10, [X8 + 0xB0]
	0x02DFCF7C ADD X10, X10, 0x8
	0x02DFCF80 LDUR X11, [X10 - 0x8]
	0x02DFCF84 CMP X11, X1
	0x02DFCF88 B.EQ 0x2DFCFA8

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X20, 0x15E0000
	007 Move X21, 0x1323000
	008 Move W8, [X20+2535]
	009 Move X21, [X21+4064]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x1323000
	016 Move X0, [X0+4064]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2535], W8
	020 Move X8, [X21]
	021 Move X8, [X8+184]
	022 Move W8, [X8+1]
	023 Compare W8, 0
	024 JumpIfEqual {28}
	025 Move W8, [X19+165]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Compare X19, 0
	029 JumpIfEqual {55}
	030 Move X0, X19
	031 Move X1, X31
	032 Call InputControl.get_currentStatePtr, X0
	033 Move X8, [X19]
	034 Move X1, X0
	035 Move X0, X19
	036 Move X9, [X8+584]
	037 Move X2, [X8+592]
	038 Add X8, X31, 0
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move V1, [X31]
	041 Move V0, [X31+16]
	042 Add X8, X19, 280
	043 Move [X31+32], V1
	044 Move [X31+40], V0
	045 Move [X8], V1
	046 Move [X8+8], V0
	047 Move [X19+165], W31
	048 Add X0, X19, 280
	049 Move X20, [X31+80]
	050 Move X19, [X31+88]
	051 Move X30, [X31+64]
	052 Move X21, [X31+72]
	053 Add X31, X31, 96
	054 Return X0
	055 Call 0x1C17F20

Method: TValue ReadValue()

Disassembly:
	0x02DFCF8C SUBS X9, X9, 0x1
	0x02DFCF90 ADD X10, X10, 0x10
	0x02DFCF94 B.NE 0x2DFCF80
	0x02DFCF98 MOV X0, X19
	0x02DFCF9C MOV W2, W31
	0x02DFCFA0 BL 0x1C5C788
	0x02DFCFA4 B 0x2DFCFB4
	0x02DFCFA8 LDRSW X9, [X10]
	0x02DFCFAC ADD X8, X8, X9, 0x4, LSL
	0x02DFCFB0 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X9, [X1+32]
	004 Move X19, X8
	005 Move X9, [X9+192]
	006 Move X1, [X9+64]
	007 Call 0x2DFCE14, X0
	008 Move V0, [X0]
	009 Move V1, [X0+16]
	010 Move [X19], V0
	011 Move [X19+8], V1
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return X0

Method: TValue ReadValueFromPreviousFrame()

Disassembly:
	0x02DFCFB4 LDP X8, X1, [X0]
	0x02DFCFB8 MOV X0, X19
	0x02DFCFBC BLR X8
	0x02DFCFC0 CBNZ X21, 0x2DFCFCC
	0x02DFCFC4 MOV X0, X20
	0x02DFCFC8 BL 0x1D2C690
	0x02DFCFCC MOV X0, X21
	0x02DFCFD0 BL 0x1C16F18
	0x02DFCFD4 BL 0x1990590
	0x02DFCFD8 LDR X8, [X1 + 0x20]
	0x02DFCFDC ADD X0, X0, 0xE0
	0x02DFCFE0 LDR X8, [X8 + 0xC0]
	0x02DFCFE4 LDR X1, [X8 + 0xC8]
	0x02DFCFE8 B 0x2DEA6C4
	0x02DFCFEC MOV X1, X31
	0x02DFCFF0 B 0x377295C
	0x02DFCFF4 STP X30, X21, [X31 - 0x20]!
	0x02DFCFF8 STP X20, X19, [X31 + 0x10]
	0x02DFCFFC ADRP X21, 0x15DF000
	0x02DFD000 ADRP X20, 0x12F6000
	0x02DFD004 LDRB W8, [X21 + 0x9EA]
	0x02DFD008 B 0x3EB15EC
	0x02DFD00C MOV X19, X1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Compare X0, 0
	007 JumpIfEqual {30}
	008 Move X21, X1
	009 Move X1, X31
	010 Move X20, X0
	011 Move X19, X8
	012 Call InputControl.get_previousFrameStatePtr, X0
	013 Move X8, [X21+32]
	014 Move X1, X0
	015 Move X0, X20
	016 Move X8, [X8+192]
	017 Move X2, [X8+72]
	018 Add X8, X31, 0
	019 Call 0x2DFD09C, X0, X1
	020 Move V1, [X31]
	021 Move V0, [X31+16]
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Move [X19], V1
	025 Move [X19+8], V0
	026 Move X20, [X31+48]
	027 Move X19, [X31+56]
	028 Add X31, X31, 64
	029 Return X0
	030 Call 0x1C17F20

Method: TValue ReadDefaultValue()

Disassembly:
	0x02DFD010 TBNZ X8, 0x0, 0x2DFD028
	0x02DFD014 ADRP X0, 0x12F6000
	0x02DFD018 LDR X0, [X0 + 0x6C0]
	0x02DFD01C BL 0x1C16CF4
	0x02DFD020 MOVZ W8, 0x1
	0x02DFD024 STRB W8, [X21 + 0x9EA]
	0x02DFD028 LDR X8, [X19 + 0x20]
	0x02DFD02C LDR X0, [X20]
	0x02DFD030 LDR X8, [X8 + 0xC0]
	0x02DFD034 LDR W9, [X0 + 0xE0]
	0x02DFD038 LDR X19, [X8]
	0x02DFD03C CBNZ W9, 0x2DFD044
	0x02DFD040 BL 0x1C16DFC
	0x02DFD044 MOV X0, X19
	0x02DFD048 LDP X20, X19, [X31 + 0x10]
	0x02DFD04C MOV X1, X31
	0x02DFD050 LDP X30, X21, [X31], #0x20
	0x02DFD054 B 0x338C698
	0x02DFD058 MOVZ W0, 0x1
	0x02DFD05C RET
	0x02DFD060 STP X30, X21, [X31 - 0x20]!
	0x02DFD064 STP X20, X19, [X31 + 0x10]
	0x02DFD068 ADRP X20, 0x15DE000
	0x02DFD06C ADRP X21, 0x1321000
	0x02DFD070 LDRB W8, [X20 + 0x9EB]
	0x02DFD074 LDR X21, [X21 + 0xFE0]
	0x02DFD078 MOV X19, X0
	0x02DFD07C TBNZ X8, 0x0, 0x2DFD094
	0x02DFD080 ADRP X0, 0x1321000
	0x02DFD084 LDR X0, [X0 + 0xFE0]
	0x02DFD088 BL 0x1C16CF4
	0x02DFD08C MOVZ W8, 0x1
	0x02DFD090 STRB W8, [X20 + 0x9EB]
	0x02DFD094 LDR X8, [X21]
	0x02DFD098 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Compare X0, 0
	008 JumpIfEqual {43}
	009 Move X22, 0x15DF000
	010 Move X19, X8
	011 Move W8, [X22+2563]
	012 Move X21, X1
	013 Move X20, X0
	014 Compare W8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, 0x1322000
	017 Move X0, [X0+4072]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2563], W8
	021 Move X8, 0x1322000
	022 Move X8, [X8+4072]
	023 Move X9, [X21+32]
	024 Move X0, X20
	025 Move X8, [X8]
	026 Move X9, [X9+192]
	027 Move X8, [X8+184]
	028 Move X2, [X9+72]
	029 Move X1, [X8]
	030 Add X8, X31, 0
	031 Call 0x2DFD09C, X0, X1
	032 Move V1, [X31]
	033 Move V0, [X31+16]
	034 Move X22, [X31+48]
	035 Move X21, [X31+56]
	036 Move X30, [X31+32]
	037 Move [X19], V1
	038 Move [X19+8], V0
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Add X31, X31, 80
	042 Return X0
	043 Call 0x1C17F20

Method: TValue ReadValueFromState(System.Void* statePtr)

Disassembly:
	0x02DFD09C LDRB W8, [X8 + 0x1]
	0x02DFD0A0 CBZ W8, 0x2DFD0B4
	0x02DFD0A4 LDRB W8, [X19 + 0xA4]
	0x02DFD0A8 CBNZ W8, 0x2DFD0B4
	0x02DFD0AC LDRB W8, [X19 + 0xFA]
	0x02DFD0B0 CBZ W8, 0x2DFD168
	0x02DFD0B4 MOV X0, X19
	0x02DFD0B8 BL 0x2DFD17C
	0x02DFD0BC LDR W9, [X19 + 0xE0]
	0x02DFD0C0 LDRB W8, [X0]
	0x02DFD0C4 CMP W9, 0x1
	0x02DFD0C8 B.LT 0x2DFD160
	0x02DFD0CC LDR X0, [X19 + 0xE8]
	0x02DFD0D0 CBZ X0, 0x2DFD15C
	0x02DFD0D4 LDR X9, [X0]
	0x02DFD0D8 CMP W8, 0x0
	0x02DFD0DC CSET W1, NE
	0x02DFD0E0 MOV X2, X19
	0x02DFD0E4 LDP X10, X3, [X9 + 0x1A8]
	0x02DFD0E8 BLR X10
	0x02DFD0EC LDR X9, [X19 + 0xF0]
	0x02DFD0F0 AND W8, W0, 0x1
	0x02DFD0F4 CBZ X9, 0x2DFD160
	0x02DFD0F8 LDR W10, [X19 + 0xE0]
	0x02DFD0FC SUB W10, W10, 0x1
	0x02DFD100 CMP W10, 0x1
	0x02DFD104 B.LT 0x2DFD160
	0x02DFD108 MOV W20, W31
	0x02DFD10C LDR W10, [X9 + 0x18]
	0x02DFD110 CMP W20, W10
	0x02DFD114 B.CS 0x2DFD178
	0x02DFD118 ADD X9, X9, W20, 0x3, SXTW
	0x02DFD11C LDR X0, [X9 + 0x20]
	0x02DFD120 CBZ X0, 0x2DFD15C
	0x02DFD124 LDR X9, [X0]
	0x02DFD128 ANDS W31, W8, 0xFF
	0x02DFD12C CSET W1, NE
	0x02DFD130 MOV X2, X19
	0x02DFD134 LDP X10, X3, [X9 + 0x1A8]
	0x02DFD138 BLR X10
	0x02DFD13C LDR W8, [X19 + 0xE0]
	0x02DFD140 ADD W20, W20, 0x1
	0x02DFD144 SUB W8, W8, 0x1
	0x02DFD148 CMP W20, W8
	0x02DFD14C AND W8, W0, 0x1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X19, X2
	007 Compare X1, 0
	008 JumpIfEqual {41}
	009 Move X20, X8
	010 Move X8, [X0]
	011 Move X21, X0
	012 Move X9, [X8+584]
	013 Move X2, [X8+592]
	014 Add X8, X31, 32
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move V1, [X31+32]
	017 Move V0, [X31+48]
	018 Add X1, X31, 32
	019 Move X0, X21
	020 Move [X31], V1
	021 Move [X31+8], V0
	022 Move X8, [X19+32]
	023 Move X8, [X8+192]
	024 Move X8, [X8+48]
	025 Move [X31+32], V1
	026 Move [X31+40], V0
	027 Move X8, [X8+32]
	028 Move X8, [X8+192]
	029 Move X2, [X8+120]
	030 Call 0x2E03F5C
	031 Move V1, [X31+32]
	032 Move V0, [X31+48]
	033 Move X30, [X31+64]
	034 Move X21, [X31+72]
	035 Move [X20], V1
	036 Move [X20+8], V0
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Add X31, X31, 96
	040 Return X0
	041 Move X0, 0x12FC000
	042 Move X0, [X0+1320]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X20, X0
	046 Move X0, 0x131F000
	047 Move X0, [X0+3464]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X20
	051 Move X2, X31
	052 Call ArgumentNullException..ctor, X0, X1
	053 Move X0, X20
	054 Move X1, X19
	055 Call 0x1C17DEC

Method: TValue ReadValueFromStateWithCaching(System.Void* statePtr)

Disassembly:
	0x02DFD150 B.GE 0x2DFD160
	0x02DFD154 LDR X9, [X19 + 0xF0]
	0x02DFD158 CBNZ X9, 0x2DFD10C
	0x02DFD15C BL 0x1C16F20
	0x02DFD160 STRB W8, [X19 + 0xF8]
	0x02DFD164 STRB W31, [X19 + 0xA4]
	0x02DFD168 ADD X0, X19, 0xF8
	0x02DFD16C LDP X20, X19, [X31 + 0x10]
	0x02DFD170 LDP X30, X21, [X31], #0x20
	0x02DFD174 RET
	0x02DFD178 BL 0x1C16F28
	0x02DFD17C STP X30, X21, [X31 - 0x20]!
	0x02DFD180 STP X20, X19, [X31 + 0x10]
	0x02DFD184 ADRP X20, 0x15DE000
	0x02DFD188 ADRP X21, 0x1321000
	0x02DFD18C LDRB W8, [X20 + 0x9EC]
	0x02DFD190 LDR X21, [X21 + 0xFE0]
	0x02DFD194 MOV X19, X0
	0x02DFD198 TBNZ X8, 0x0, 0x2DFD1B0
	0x02DFD19C ADRP X0, 0x1321000
	0x02DFD1A0 LDR X0, [X0 + 0xFE0]
	0x02DFD1A4 BL 0x1C16CF4
	0x02DFD1A8 MOVZ W8, 0x1
	0x02DFD1AC STRB W8, [X20 + 0x9EC]
	0x02DFD1B0 LDR X8, [X21]
	0x02DFD1B4 LDR X8, [X8 + 0xB8]
	0x02DFD1B8 LDRB W8, [X8 + 0x1]
	0x02DFD1BC CBZ W8, 0x2DFD1CC
	0x02DFD1C0 LDRB W8, [X19 + 0xA5]
	0x02DFD1C4 CBNZ W8, 0x2DFD1D0
	0x02DFD1C8 B 0x2DFD200
	0x02DFD1CC CBZ X19, 0x2DFD210
	0x02DFD1D0 MOV X0, X19
	0x02DFD1D4 MOV X1, X31
	0x02DFD1D8 BL 0x3772640
	0x02DFD1DC LDR X8, [X19]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Compare X0, 0
	008 JumpIfEqual {43}
	009 Move X21, X1
	010 Move X1, X31
	011 Move X22, X2
	012 Move X20, X0
	013 Move X19, X8
	014 Call InputControl.get_currentStatePtr, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X8, [X22+32]
	017 Move X0, X20
	018 Move X1, X21
	019 Move X8, [X8+192]
	020 Move X2, [X8+72]
	021 Add X8, X31, 0
	022 Call 0x2DFD09C, X0, X1
	023 Move V1, [X31]
	024 Move V0, [X31+16]
	025 Move [X19], V1
	026 Move [X19+8], V0
	027 Move X8, [X22+32]
	028 Move X0, X20
	029 Move X8, [X8+192]
	030 Move X1, [X8+64]
	031 Call 0x2DFCE14, X0
	032 Move V0, [X0]
	033 Move V1, [X0+16]
	034 Move [X19], V0
	035 Move [X19+8], V1
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Move X22, [X31+48]
	039 Move X21, [X31+56]
	040 Move X30, [X31+32]
	041 Add X31, X31, 80
	042 Return X0
	043 Call 0x1C17F20

Method: TValue ReadUnprocessedValueFromStateWithCaching(System.Void* statePtr)

Disassembly:
	0x02DFD1E0 MOV X1, X0
	0x02DFD1E4 MOV X0, X19
	0x02DFD1E8 LDR X9, [X8 + 0x248]
	0x02DFD1EC LDR X2, [X8 + 0x250]
	0x02DFD1F0 BLR X9
	0x02DFD1F4 AND W8, W0, 0x1
	0x02DFD1F8 STRB W8, [X19 + 0xF9]
	0x02DFD1FC STRB W31, [X19 + 0xA5]
	0x02DFD200 ADD X0, X19, 0xF9
	0x02DFD204 LDP X20, X19, [X31 + 0x10]
	0x02DFD208 LDP X30, X21, [X31], #0x20
	0x02DFD20C RET
	0x02DFD210 BL 0x1C16F20
	0x02DFD214 STR X30, [X31 - 0x10]!
	0x02DFD218 LDR X8, [X1 + 0x20]
	0x02DFD21C LDR X8, [X8 + 0xC0]
	0x02DFD220 LDR X1, [X8 + 0x40]
	0x02DFD224 BL 0x2DFD060
	0x02DFD228 LDRB W0, [X0]
	0x02DFD22C LDR X30, [X31], #0x10
	0x02DFD230 RET
	0x02DFD234 STR X30, [X31 - 0x20]!
	0x02DFD238 STP X20, X19, [X31 + 0x10]
	0x02DFD23C CBZ X0, 0x2DFD270
	0x02DFD240 MOV X20, X1
	0x02DFD244 MOV X1, X31
	0x02DFD248 MOV X19, X0
	0x02DFD24C BL 0x3772B40
	0x02DFD250 LDR X8, [X20 + 0x20]
	0x02DFD254 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Compare X0, 0
	007 JumpIfEqual {37}
	008 Move X21, X1
	009 Move X1, X31
	010 Move X20, X0
	011 Move X19, X8
	012 Call InputControl.get_currentStatePtr, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X20]
	015 Move X0, X20
	016 Move X1, X21
	017 Move X9, [X8+584]
	018 Move X2, [X8+592]
	019 Add X8, X31, 0
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move V1, [X31]
	022 Move V0, [X31+16]
	023 Move [X19], V1
	024 Move [X19+8], V0
	025 Move X0, X20
	026 Call 0x2DFCEE0, X0
	027 Move V0, [X0]
	028 Move V1, [X0+16]
	029 Move [X19], V0
	030 Move [X19+8], V1
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Add X31, X31, 64
	036 Return X0
	037 Call 0x1C17F20

Method: TValue ReadUnprocessedValue()

Disassembly:
	0x02DFD258 MOV X0, X19
	0x02DFD25C LDP X20, X19, [X31 + 0x10]
	0x02DFD260 LDR X8, [X8 + 0xC0]
	0x02DFD264 LDR X2, [X8 + 0x48]
	0x02DFD268 LDR X30, [X31], #0x20
	0x02DFD26C B 0x2DFD2DC
	0x02DFD270 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X8
	004 Call 0x2DFCEE0, X0
	005 Move V0, [X0]
	006 Move V1, [X0+16]
	007 Move [X19], V0
	008 Move [X19+8], V1
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0

Method: TValue ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Object ReadValueFromStateAsObject(System.Void* statePtr)

Disassembly:
	0x02DFD274 STP X30, X21, [X31 - 0x20]!
	0x02DFD278 STP X20, X19, [X31 + 0x10]
	0x02DFD27C CBZ X0, 0x2DFD2D8
	0x02DFD280 ADRP X21, 0x15DE000
	0x02DFD284 LDRB W8, [X21 + 0xA03]
	0x02DFD288 MOV X20, X1
	0x02DFD28C MOV X19, X0
	0x02DFD290 CBNZ W8, 0x2DFD2A8
	0x02DFD294 ADRP X0, 0x1321000
	0x02DFD298 LDR X0, [X0 + 0xFE8]
	0x02DFD29C BL 0x1C16CF4
	0x02DFD2A0 MOVZ W8, 0x1
	0x02DFD2A4 STRB W8, [X21 + 0xA03]
	0x02DFD2A8 ADRP X8, 0x1321000
	0x02DFD2AC LDR X8, [X8 + 0xFE8]
	0x02DFD2B0 LDR X9, [X20 + 0x20]
	0x02DFD2B4 MOV X0, X19
	0x02DFD2B8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X8, [X2+32]
	005 Move X19, X2
	006 Move X8, [X8+192]
	007 Move X2, [X8+72]
	008 Add X8, X31, 32
	009 Call 0x2DFD09C, X0, X1
	010 Move V0, [X31+32]
	011 Move V1, [X31+48]
	012 Add X1, X31, 0
	013 Move [X31], V0
	014 Move [X31+8], V1
	015 Move X8, [X19+32]
	016 Move X8, [X8+192]
	017 Move X0, [X8+40]
	018 Call 0x1C17E04
	019 Move X30, [X31+64]
	020 Move X19, [X31+72]
	021 Add X31, X31, 80
	022 Return X0

Method: System.Void ReadValueFromStateIntoBuffer(System.Void* statePtr, System.Void* bufferPtr, System.Int32 bufferSize)

Disassembly:
	0x02DFD2BC LDR X8, [X8]
	0x02DFD2C0 LDR X9, [X9 + 0xC0]
	0x02DFD2C4 LDR X8, [X8 + 0xB8]
	0x02DFD2C8 LDR X2, [X9 + 0x48]
	0x02DFD2CC LDR X1, [X8]
	0x02DFD2D0 LDP X30, X21, [X31], #0x20
	0x02DFD2D4 B 0x2DFD2DC
	0x02DFD2D8 BL 0x1C16F20
	0x02DFD2DC STR X30, [X31 - 0x20]!
	0x02DFD2E0 STP X20, X19, [X31 + 0x10]
	0x02DFD2E4 CBZ X1, 0x2DFD3AC
	0x02DFD2E8 LDR X8, [X0]
	0x02DFD2EC MOV X19, X0
	0x02DFD2F0 LDR X9, [X8 + 0x248]
	0x02DFD2F4 LDR X2, [X8 + 0x250]
	0x02DFD2F8 BLR X9
	0x02DFD2FC LDR W8, [X19 + 0xE0]
	0x02DFD300 AND W1, W0, 0x1
	0x02DFD304 CMP W8, 0x1
	0x02DFD308 B.LT 0x2DFD398
	0x02DFD30C LDR X0, [X19 + 0xE8]
	0x02DFD310 CBZ X0, 0x2DFD394
	0x02DFD314 LDR X8, [X0]
	0x02DFD318 MOV X2, X19
	0x02DFD31C LDP X9, X3, [X8 + 0x1A8]
	0x02DFD320 BLR X9
	0x02DFD324 LDR X8, [X19 + 0xF0]
	0x02DFD328 AND W1, W0, 0x1
	0x02DFD32C CBZ X8, 0x2DFD398
	0x02DFD330 LDR W9, [X19 + 0xE0]
	0x02DFD334 SUB W9, W9, 0x1
	0x02DFD338 CMP W9, 0x1
	0x02DFD33C B.LT 0x2DFD398
	0x02DFD340 MOV W20, W31
	0x02DFD344 LDR W9, [X8 + 0x18]
	0x02DFD348 CMP W20, W9
	0x02DFD34C B.CS 0x2DFD3A8
	0x02DFD350 ADD X8, X8, W20, 0x3, SXTW
	0x02DFD354 LDR X0, [X8 + 0x20]
	0x02DFD358 CBZ X0, 0x2DFD394
	0x02DFD35C LDR X8, [X0]
	0x02DFD360 ANDS W31, W1, 0xFF
	0x02DFD364 CSET W1, NE
	0x02DFD368 MOV X2, X19
	0x02DFD36C LDP X9, X3, [X8 + 0x1A8]
	0x02DFD370 BLR X9
	0x02DFD374 LDR W8, [X19 + 0xE0]
	0x02DFD378 ADD W20, W20, 0x1
	0x02DFD37C AND W1, W0, 0x1
	0x02DFD380 SUB W8, W8, 0x1
	0x02DFD384 CMP W20, W8
	0x02DFD388 B.GE 0x2DFD398
	0x02DFD38C LDR X8, [X19 + 0xF0]
	0x02DFD390 CBNZ X8, 0x2DFD344
	0x02DFD394 BL 0x1C16F20
	0x02DFD398 LDP X20, X19, [X31 + 0x10]
	0x02DFD39C MOV W0, W1
	0x02DFD3A0 LDR X30, [X31], #0x20
	0x02DFD3A4 RET
	0x02DFD3A8 BL 0x1C16F28
	0x02DFD3AC ADRP X0, 0x12FB000
	0x02DFD3B0 LDR X0, [X0 + 0x528]
	0x02DFD3B4 MOV X19, X2
	0x02DFD3B8 BL 0x1C16D08
	0x02DFD3BC BL 0x1C16F10
	0x02DFD3C0 MOV X20, X0
	0x02DFD3C4 ADRP X0, 0x131E000
	0x02DFD3C8 LDR X0, [X0 + 0xD88]
	0x02DFD3CC BL 0x1C16D08
	0x02DFD3D0 MOV X1, X0
	0x02DFD3D4 MOV X0, X20
	0x02DFD3D8 MOV X2, X31
	0x02DFD3DC BL 0x330E100
	0x02DFD3E0 MOV X0, X20
	0x02DFD3E4 MOV X1, X19
	0x02DFD3E8 BL 0x1C16DEC
	0x02DFD3EC STP X30, X21, [X31 - 0x20]!
	0x02DFD3F0 STP X20, X19, [X31 + 0x10]
	0x02DFD3F4 CBZ X0, 0x2DFD450
	0x02DFD3F8 MOV X20, X1
	0x02DFD3FC MOV X1, X31
	0x02DFD400 MOV X21, X2
	0x02DFD404 MOV X19, X0
	0x02DFD408 BL 0x3772640
	0x02DFD40C LDR X8, [X21 + 0x20]
	0x02DFD410 CMP X0, X20
	0x02DFD414 LDR X8, [X8 + 0xC0]
	0x02DFD418 B.EQ 0x2DFD434

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Move [X31+16], V0
	008 Move [X31+24], V0
	009 Compare X1, 0
	010 JumpIfEqual {31}
	011 Move X19, X2
	012 Compare X2, 0
	013 JumpIfEqual {39}
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X8, [X4+32]
	016 Move X8, [X8+192]
	017 Move X2, [X8+72]
	018 Add X8, X31, 16
	019 Call 0x2DFD09C, X0, X1
	020 Add X1, X31, 16
	021 Move W2, 32
	022 Move X0, X19
	023 Move X3, X31
	024 Call UnsafeUtility.MemCpy, X0, X1, X2
	025 Move X20, [X31+64]
	026 Move X19, [X31+72]
	027 Move X30, [X31+48]
	028 Move X21, [X31+56]
	029 Add X31, X31, 80
	030 Return 
	031 Move X0, 0x12FC000
	032 Move X0, [X0+1320]
	033 Move X19, X4
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Move X0, 0x131F000
	038 Move X0, [X0+3464]
	039 Move X0, 0x12FC000
	040 Move X0, [X0+1320]
	041 Move X19, X4
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X20, X0
	045 Move X0, 0x1322000
	046 Move X0, [X0+4080]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X20
	050 Move X2, X31
	051 Call ArgumentNullException..ctor, X0, X1
	052 Move X0, X20
	053 Move [X31+12], W3
	054 Move X20, 0x12F7000
	055 Move X20, [X20+1880]
	056 Move X19, X4
	057 Move X0, X20
	058 Call 0x1C17D08
	059 Add X1, X31, 12
	060 Call 0x1C17E04
	061 Move X21, X0
	062 Move W8, 32
	063 Move X0, X20
	064 Move [X31+8], W8
	065 Call 0x1C17D08
	066 Add X1, X31, 8
	067 Call 0x1C17E04
	068 Move X20, X0
	069 Move X0, 0x1322000
	070 Move X0, [X0+4088]
	071 Call 0x1C17D08
	072 Move X1, X21
	073 Move X2, X20
	074 Move X3, X31
	075 Call String.Format, X0, X1, X2
	076 Move X20, X0
	077 Move X0, 0x12FF000
	078 Move X0, [X0+1400]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X21, X0
	082 Move X0, 0x1322000
	083 Move X0, [X0+3928]
	084 Call 0x1C17D08
	085 Move X2, X0
	086 Move X0, X21
	087 Move X1, X20
	088 Move X3, X31
	089 Call ArgumentException..ctor, X0, X1, X2
	090 Move X0, X21
	091 Move X1, X19
	092 Call 0x1C17DEC

Method: System.Void WriteValueFromBufferIntoState(System.Void* bufferPtr, System.Int32 bufferSize, System.Void* statePtr)

Disassembly:
	0x02DFD41C LDR X2, [X8 + 0x48]
	0x02DFD420 MOV X0, X19
	0x02DFD424 MOV X1, X20
	0x02DFD428 LDP X20, X19, [X31 + 0x10]
	0x02DFD42C LDP X30, X21, [X31], #0x20
	0x02DFD430 B 0x2DFD2DC
	0x02DFD434 LDR X1, [X8 + 0x40]
	0x02DFD438 MOV X0, X19
	0x02DFD43C BL 0x2DFD060
	0x02DFD440 LDRB W0, [X0]
	0x02DFD444 LDP X20, X19, [X31 + 0x10]
	0x02DFD448 LDP X30, X21, [X31], #0x20
	0x02DFD44C RET
	0x02DFD450 BL 0x1C16F20
	0x02DFD454 STR X30, [X31 - 0x20]!
	0x02DFD458 STP X20, X19, [X31 + 0x10]
	0x02DFD45C CBZ X0, 0x2DFD4B0
	0x02DFD460 MOV X20, X1
	0x02DFD464 MOV X1, X31
	0x02DFD468 MOV X19, X0
	0x02DFD46C BL 0x3772640
	0x02DFD470 CMP X0, X20
	0x02DFD474 B.EQ 0x2DFD498
	0x02DFD478 LDR X8, [X19]
	0x02DFD47C MOV X0, X19
	0x02DFD480 MOV X1, X20
	0x02DFD484 LDP X20, X19, [X31 + 0x10]
	0x02DFD488 LDR X3, [X8 + 0x248]
	0x02DFD48C LDR X2, [X8 + 0x250]
	0x02DFD490 LDR X30, [X31], #0x20
	0x02DFD494 BR X3
	0x02DFD498 MOV X0, X19
	0x02DFD49C BL 0x2DFD17C
	0x02DFD4A0 LDRB W0, [X0]
	0x02DFD4A4 LDP X20, X19, [X31 + 0x10]
	0x02DFD4A8 LDR X30, [X31], #0x20
	0x02DFD4AC RET
	0x02DFD4B0 BL 0x1C16F20
	0x02DFD4B4 STR X30, [X31 - 0x10]!
	0x02DFD4B8 BL 0x2DFD17C
	0x02DFD4BC LDRB W0, [X0]
	0x02DFD4C0 LDR X30, [X31], #0x10
	0x02DFD4C4 RET
	0x02DFD4C8 SUB X31, X31, 0x20
	0x02DFD4CC STP X30, X19, [X31 + 0x10]
	0x02DFD4D0 LDR X8, [X2 + 0x20]
	0x02DFD4D4 MOV X19, X2
	0x02DFD4D8 LDR X8, [X8 + 0xC0]
	0x02DFD4DC LDR X2, [X8 + 0x48]
	0x02DFD4E0 BL 0x2DFD2DC
	0x02DFD4E4 AND W8, W0, 0x1
	0x02DFD4E8 STRB W8, [X31 + 0xC]
	0x02DFD4EC LDR X8, [X19 + 0x20]
	0x02DFD4F0 ADD X1, X31, 0xC
	0x02DFD4F4 LDR X8, [X8 + 0xC0]
	0x02DFD4F8 LDR X0, [X8 + 0x28]
	0x02DFD4FC BL 0x1C16E04
	0x02DFD500 LDP X30, X19, [X31 + 0x10]
	0x02DFD504 ADD X31, X31, 0x20
	0x02DFD508 RET
	0x02DFD50C SUB X31, X31, 0x30
	0x02DFD510 STP X30, X21, [X31 + 0x10]
	0x02DFD514 STP X20, X19, [X31 + 0x20]
	0x02DFD518 STRB W31, [X31 + 0xC]
	0x02DFD51C CBZ X1, 0x2DFD56C
	0x02DFD520 MOV X19, X2
	0x02DFD524 CBZ X2, 0x2DFD590
	0x02DFD528 CMP W3, 0x0
	0x02DFD52C B.LE 0x2DFD5CC
	0x02DFD530 LDR X8, [X4 + 0x20]
	0x02DFD534 LDR X8, [X8 + 0xC0]
	0x02DFD538 LDR X2, [X8 + 0x48]
	0x02DFD53C BL 0x2DFD2DC
	0x02DFD540 AND W8, W0, 0x1
	0x02DFD544 ADD X1, X31, 0xC
	0x02DFD548 MOVZ W2, 0x1
	0x02DFD54C MOV X0, X19
	0x02DFD550 MOV X3, X31
	0x02DFD554 STRB W8, [X31 + 0xC]
	0x02DFD558 BL 0x3BFF954
	0x02DFD55C LDP X20, X19, [X31 + 0x20]
	0x02DFD560 LDP X30, X21, [X31 + 0x10]
	0x02DFD564 ADD X31, X31, 0x30
	0x02DFD568 RET
	0x02DFD56C ADRP X0, 0x12FB000
	0x02DFD570 LDR X0, [X0 + 0x528]
	0x02DFD574 MOV X19, X4
	0x02DFD578 BL 0x1C16D08
	0x02DFD57C BL 0x1C16F10
	0x02DFD580 MOV X20, X0
	0x02DFD584 ADRP X0, 0x131E000
	0x02DFD588 LDR X0, [X0 + 0xD88]
	0x02DFD58C B 0x2DFD5B0
	0x02DFD590 ADRP X0, 0x12FB000
	0x02DFD594 LDR X0, [X0 + 0x528]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+112], X30
	003 Move [X31+120], X21
	004 Move [X31+128], X20
	005 Move [X31+136], X19
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Move [X31+48], V0
	008 Move [X31+56], V0
	009 Compare X1, 0
	010 JumpIfEqual {42}
	011 Move X19, X3
	012 Compare X3, 0
	013 JumpIfEqual {50}
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X20, X0
	016 NotImplemented "Instruction MOVI not yet implemented."
	017 Add X0, X31, 48
	018 Move W2, 32
	019 Move X3, X31
	020 Move [X31+48], V0
	021 Move [X31+56], V0
	022 Call UnsafeUtility.MemCpy, X0, X1, X2
	023 Move V1, [X31+48]
	024 Move V0, [X31+64]
	025 Add X1, X31, 80
	026 Move X0, X20
	027 Move X2, X19
	028 Move [X31], V1
	029 Move [X31+8], V0
	030 Move X8, [X20]
	031 Move X9, [X8+600]
	032 Move [X31+80], V1
	033 Move [X31+88], V0
	034 Move X3, [X8+608]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X20, [X31+128]
	037 Move X19, [X31+136]
	038 Move X30, [X31+112]
	039 Move X21, [X31+120]
	040 Add X31, X31, 144
	041 Return 
	042 Move X0, 0x12FC000
	043 Move X0, [X0+1320]
	044 Move X19, X4
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X20, X0
	048 Move X0, 0x1322000
	049 Move X0, [X0+4080]
	050 Move X0, 0x12FC000
	051 Move X0, [X0+1320]
	052 Move X19, X4
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X20, X0
	056 Move X0, 0x131F000
	057 Move X0, [X0+3464]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X20
	061 Move X2, X31
	062 Call ArgumentNullException..ctor, X0, X1
	063 Move X0, X20
	064 Move [X31+80], W2
	065 Move X20, 0x12F7000
	066 Move X20, [X20+1880]
	067 Move X19, X4
	068 Move X0, X20
	069 Call 0x1C17D08
	070 Add X1, X31, 80
	071 Call 0x1C17E04
	072 Move X21, X0
	073 Move W8, 32
	074 Move X0, X20
	075 Move [X31+44], W8
	076 Call 0x1C17D08
	077 Add X1, X31, 44
	078 Call 0x1C17E04
	079 Move X20, X0
	080 Move X0, 0x1322000
	081 Move X0, [X0+4088]
	082 Call 0x1C17D08
	083 Move X1, X21
	084 Move X2, X20
	085 Move X3, X31
	086 Call String.Format, X0, X1, X2
	087 Move X20, X0
	088 Move X0, 0x12FF000
	089 Move X0, [X0+1400]
	090 Call 0x1C17D08
	091 Call 0x1C17F10
	092 Move X21, X0
	093 Move X0, 0x1322000
	094 Move X0, [X0+3928]
	095 Call 0x1C17D08
	096 Move X2, X0
	097 Move X0, X21
	098 Move X1, X20
	099 Move X3, X31
	100 Call ArgumentException..ctor, X0, X1, X2
	101 Move X0, X21
	102 Move X1, X19
	103 Call 0x1C17DEC

Method: System.Void WriteValueFromObjectIntoState(System.Object value, System.Void* statePtr)

Disassembly:
	0x02DFD598 MOV X19, X4
	0x02DFD59C BL 0x1C16D08
	0x02DFD5A0 BL 0x1C16F10
	0x02DFD5A4 MOV X20, X0
	0x02DFD5A8 ADRP X0, 0x1321000
	0x02DFD5AC LDR X0, [X0 + 0xFF0]
	0x02DFD5B0 BL 0x1C16D08
	0x02DFD5B4 MOV X1, X0
	0x02DFD5B8 MOV X0, X20
	0x02DFD5BC MOV X2, X31
	0x02DFD5C0 BL 0x330E100
	0x02DFD5C4 MOV X0, X20
	0x02DFD5C8 B 0x2DFD664
	0x02DFD5CC STR W3, [X31 + 0x8]
	0x02DFD5D0 ADRP X20, 0x12F6000
	0x02DFD5D4 LDR X20, [X20 + 0x758]
	0x02DFD5D8 MOV X19, X4
	0x02DFD5DC MOV X0, X20
	0x02DFD5E0 BL 0x1C16D08
	0x02DFD5E4 ADD X1, X31, 0x8
	0x02DFD5E8 BL 0x1C16E04
	0x02DFD5EC MOV X21, X0
	0x02DFD5F0 MOVZ W8, 0x1
	0x02DFD5F4 MOV X0, X20
	0x02DFD5F8 STR W8, [X31 + 0x4]
	0x02DFD5FC BL 0x1C16D08
	0x02DFD600 ADD X1, X31, 0x4
	0x02DFD604 BL 0x1C16E04
	0x02DFD608 MOV X20, X0
	0x02DFD60C ADRP X0, 0x1321000
	0x02DFD610 LDR X0, [X0 + 0xFF8]
	0x02DFD614 BL 0x1C16D08
	0x02DFD618 MOV X1, X21
	0x02DFD61C MOV X2, X20
	0x02DFD620 MOV X3, X31
	0x02DFD624 BL 0x3227BD4
	0x02DFD628 MOV X20, X0
	0x02DFD62C ADRP X0, 0x12FE000
	0x02DFD630 LDR X0, [X0 + 0x578]
	0x02DFD634 BL 0x1C16D08
	0x02DFD638 BL 0x1C16F10
	0x02DFD63C MOV X21, X0
	0x02DFD640 ADRP X0, 0x1321000
	0x02DFD644 LDR X0, [X0 + 0xF58]
	0x02DFD648 BL 0x1C16D08
	0x02DFD64C MOV X2, X0
	0x02DFD650 MOV X0, X21
	0x02DFD654 MOV X1, X20
	0x02DFD658 MOV X3, X31
	0x02DFD65C BL 0x330E16C
	0x02DFD660 MOV X0, X21
	0x02DFD664 MOV X1, X19
	0x02DFD668 BL 0x1C16DEC
	0x02DFD66C SUB X31, X31, 0x30
	0x02DFD670 STP X30, X21, [X31 + 0x10]
	0x02DFD674 STP X20, X19, [X31 + 0x20]
	0x02DFD678 STRB W31, [X31 + 0xC]
	0x02DFD67C CBZ X1, 0x2DFD6D4
	0x02DFD680 MOV X19, X3
	0x02DFD684 CBZ X3, 0x2DFD6F8
	0x02DFD688 CMP W2, 0x0
	0x02DFD68C B.LE 0x2DFD734
	0x02DFD690 MOV X20, X0
	0x02DFD694 ADD X0, X31, 0xC
	0x02DFD698 MOVZ W2, 0x1
	0x02DFD69C MOV X3, X31
	0x02DFD6A0 STRB W31, [X31 + 0xC]
	0x02DFD6A4 BL 0x3BFF954
	0x02DFD6A8 LDR X8, [X20]
	0x02DFD6AC LDRB W1, [X31 + 0xC]
	0x02DFD6B0 MOV X0, X20
	0x02DFD6B4 MOV X2, X19
	0x02DFD6B8 LDR X9, [X8 + 0x258]
	0x02DFD6BC LDR X3, [X8 + 0x260]
	0x02DFD6C0 BLR X9
	0x02DFD6C4 LDP X20, X19, [X31 + 0x20]
	0x02DFD6C8 LDP X30, X21, [X31 + 0x10]
	0x02DFD6CC ADD X31, X31, 0x30
	0x02DFD6D0 RET
	0x02DFD6D4 ADRP X0, 0x12FB000
	0x02DFD6D8 LDR X0, [X0 + 0x528]
	0x02DFD6DC MOV X19, X4
	0x02DFD6E0 BL 0x1C16D08
	0x02DFD6E4 BL 0x1C16F10
	0x02DFD6E8 MOV X20, X0
	0x02DFD6EC ADRP X0, 0x1321000
	0x02DFD6F0 LDR X0, [X0 + 0xFF0]
	0x02DFD6F4 B 0x2DFD718
	0x02DFD6F8 ADRP X0, 0x12FB000
	0x02DFD6FC LDR X0, [X0 + 0x528]
	0x02DFD700 MOV X19, X4
	0x02DFD704 BL 0x1C16D08
	0x02DFD708 BL 0x1C16F10
	0x02DFD70C MOV X20, X0
	0x02DFD710 ADRP X0, 0x131E000
	0x02DFD714 LDR X0, [X0 + 0xD88]
	0x02DFD718 BL 0x1C16D08
	0x02DFD71C MOV X1, X0
	0x02DFD720 MOV X0, X20
	0x02DFD724 MOV X2, X31
	0x02DFD728 BL 0x330E100
	0x02DFD72C MOV X0, X20
	0x02DFD730 B 0x2DFD7CC
	0x02DFD734 STR W2, [X31 + 0x8]
	0x02DFD738 ADRP X20, 0x12F6000
	0x02DFD73C LDR X20, [X20 + 0x758]
	0x02DFD740 MOV X19, X4
	0x02DFD744 MOV X0, X20
	0x02DFD748 BL 0x1C16D08
	0x02DFD74C ADD X1, X31, 0x8
	0x02DFD750 BL 0x1C16E04
	0x02DFD754 MOV X21, X0
	0x02DFD758 MOVZ W8, 0x1
	0x02DFD75C MOV X0, X20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X23, 0x15DF000
	009 Move W8, [X23+2536]
	010 Move X19, X3
	011 Move X20, X2
	012 Move X22, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x1300000
	019 Move X0, [X0+2536]
	020 Call 0x1C17CF4
	021 Move X0, 0x12F7000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2536], W8
	026 Compare X20, 0
	027 JumpIfEqual {114}
	028 Compare X22, 0
	029 JumpIfEqual {121}
	030 Move X8, [X19+32]
	031 Move X8, [X8+192]
	032 Move X1, [X8+40]
	033 Move W8, [X1+309]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {41}
	038 Move X0, X1
	039 Call 0x1C5D684
	040 Move X1, X0
	041 Move X0, X22
	042 Call 0x1C17E00
	043 Compare X0, 0
	044 JumpIfNotEqual {72}
	045 Move X9, 0x12F7000
	046 Move X8, [X19+32]
	047 Move X9, [X9+1728]
	048 Move X8, [X8+192]
	049 Move X0, [X9]
	050 Move X23, [X8]
	051 Move W9, [X0+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X23
	056 Move X1, X31
	057 Call Type.GetTypeFromHandle, X0
	058 Move X8, 0x1300000
	059 Move X8, [X8+2536]
	060 Move X23, X0
	061 Move X8, [X8]
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, X22
	068 Move X1, X23
	069 Move X2, X31
	070 Call Convert.ChangeType, X0, X1
	071 Move X22, X0
	072 Move X8, [X19+32]
	073 Move X8, [X8+192]
	074 Move X1, [X8+40]
	075 Move W8, [X1+309]
	076 Move TEMP, X8
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {83}
	080 Move X0, X1
	081 Call 0x1C5D684
	082 Move X1, X0
	083 Compare X22, 0
	084 JumpIfEqual {136}
	085 Move X8, [X22]
	086 Move X9, [X1+64]
	087 Move X0, X22
	088 Move X8, [X8+64]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Call 0x1C17E08
	091 Move V1, [X0]
	092 Move V0, [X0+16]
	093 Add X1, X31, 32
	094 Move X0, X21
	095 Move X2, X20
	096 Move [X31], V1
	097 Move [X31+8], V0
	098 Move X8, [X21]
	099 Move V0, [X31]
	100 Move V1, [X31+16]
	101 Move X9, [X8+600]
	102 Move [X31+32], V0
	103 Move [X31+40], V1
	104 Move X3, [X8+608]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Move X20, [X31+96]
	107 Move X19, [X31+104]
	108 Move X22, [X31+80]
	109 Move X21, [X31+88]
	110 Move X30, [X31+64]
	111 Move X23, [X31+72]
	112 Add X31, X31, 112
	113 Return 
	114 Move X0, 0x12FC000
	115 Move X0, [X0+1320]
	116 Call 0x1C17D08
	117 Call 0x1C17F10
	118 Move X20, X0
	119 Move X0, 0x131F000
	120 Move X0, [X0+3464]
	121 Move X0, 0x12FC000
	122 Move X0, [X0+1320]
	123 Call 0x1C17D08
	124 Call 0x1C17F10
	125 Move X20, X0
	126 Move X0, 0x1301000
	127 Move X0, [X0+3784]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Move X2, X31
	132 Call ArgumentNullException..ctor, X0, X1
	133 Move X0, X20
	134 Move X1, X19
	135 Call 0x1C17DEC
	136 Call 0x1C17F20
	137 Call 0x1C181E0

Method: System.Void WriteValueIntoState(TValue value, System.Void* statePtr)

Disassembly:
	0x02DFD760 STR W8, [X31 + 0x4]
	0x02DFD764 BL 0x1C16D08
	0x02DFD768 ADD X1, X31, 0x4
	0x02DFD76C BL 0x1C16E04
	0x02DFD770 MOV X20, X0
	0x02DFD774 ADRP X0, 0x1321000
	0x02DFD778 LDR X0, [X0 + 0xFF8]
	0x02DFD77C BL 0x1C16D08
	0x02DFD780 MOV X1, X21
	0x02DFD784 MOV X2, X20
	0x02DFD788 MOV X3, X31
	0x02DFD78C BL 0x3227BD4
	0x02DFD790 MOV X20, X0
	0x02DFD794 ADRP X0, 0x12FE000
	0x02DFD798 LDR X0, [X0 + 0x578]
	0x02DFD79C BL 0x1C16D08
	0x02DFD7A0 BL 0x1C16F10
	0x02DFD7A4 MOV X21, X0
	0x02DFD7A8 ADRP X0, 0x1321000
	0x02DFD7AC LDR X0, [X0 + 0xF58]
	0x02DFD7B0 BL 0x1C16D08
	0x02DFD7B4 MOV X2, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X0
	006 Move X0, 0x1323000
	007 Move X0, [X0]
	008 Move X19, X3
	009 Call 0x1C17D08
	010 Move X1, X20
	011 Move X2, X31
	012 Call String.Format, X0, X1
	013 Move X20, X0
	014 Move X0, 0x12F7000
	015 Move X0, [X0+2880]
	016 Call 0x1C17D08
	017 Call 0x1C17F10
	018 Move X1, X20
	019 Move X2, X31
	020 Move X21, X0
	021 Call NotSupportedException..ctor, X0, X1
	022 Move X0, X21
	023 Move X1, X19
	024 Call 0x1C17DEC

Method: System.Object ReadValueFromBufferAsObject(System.Void* buffer, System.Int32 bufferSize)

Disassembly:
	0x02DFD7B8 MOV X0, X21
	0x02DFD7BC MOV X1, X20
	0x02DFD7C0 MOV X3, X31
	0x02DFD7C4 BL 0x330E16C
	0x02DFD7C8 MOV X0, X21
	0x02DFD7CC MOV X1, X19
	0x02DFD7D0 BL 0x1C16DEC
	0x02DFD7D4 STP X30, X23, [X31 - 0x30]!
	0x02DFD7D8 STP X22, X21, [X31 + 0x10]
	0x02DFD7DC STP X20, X19, [X31 + 0x20]
	0x02DFD7E0 ADRP X23, 0x15DE000
	0x02DFD7E4 LDRB W8, [X23 + 0x9ED]
	0x02DFD7E8 MOV X19, X3
	0x02DFD7EC MOV X20, X2
	0x02DFD7F0 MOV X22, X1
	0x02DFD7F4 MOV X21, X0
	0x02DFD7F8 TBNZ X8, 0x0, 0x2DFD81C
	0x02DFD7FC ADRP X0, 0x12FF000
	0x02DFD800 LDR X0, [X0 + 0x9E8]
	0x02DFD804 BL 0x1C16CF4
	0x02DFD808 ADRP X0, 0x12F6000
	0x02DFD80C LDR X0, [X0 + 0x6C0]
	0x02DFD810 BL 0x1C16CF4
	0x02DFD814 MOVZ W8, 0x1
	0x02DFD818 STRB W8, [X23 + 0x9ED]
	0x02DFD81C CBZ X20, 0x2DFD91C
	0x02DFD820 CBZ X22, 0x2DFD93C
	0x02DFD824 LDR X8, [X19 + 0x20]
	0x02DFD828 LDR X8, [X8 + 0xC0]
	0x02DFD82C LDR X1, [X8 + 0x28]
	0x02DFD830 LDRB W8, [X1 + 0x135]
	0x02DFD834 TBNZ X8, 0x0, 0x2DFD844
	0x02DFD838 MOV X0, X1
	0x02DFD83C BL 0x1C5C684
	0x02DFD840 MOV X1, X0
	0x02DFD844 MOV X0, X22
	0x02DFD848 BL 0x1C16E00
	0x02DFD84C CBNZ X0, 0x2DFD8B4
	0x02DFD850 ADRP X9, 0x12F6000
	0x02DFD854 LDR X8, [X19 + 0x20]
	0x02DFD858 LDR X9, [X9 + 0x6C0]
	0x02DFD85C LDR X8, [X8 + 0xC0]
	0x02DFD860 LDR X0, [X9]
	0x02DFD864 LDR X23, [X8]
	0x02DFD868 LDR W9, [X0 + 0xE0]
	0x02DFD86C CBNZ W9, 0x2DFD874
	0x02DFD870 BL 0x1C16DFC
	0x02DFD874 MOV X0, X23
	0x02DFD878 MOV X1, X31
	0x02DFD87C BL 0x338C698
	0x02DFD880 ADRP X8, 0x12FF000
	0x02DFD884 LDR X8, [X8 + 0x9E8]
	0x02DFD888 MOV X23, X0
	0x02DFD88C LDR X8, [X8]
	0x02DFD890 LDR W9, [X8 + 0xE0]
	0x02DFD894 CBNZ W9, 0x2DFD8A0
	0x02DFD898 MOV X0, X8
	0x02DFD89C BL 0x1C16DFC
	0x02DFD8A0 MOV X0, X22
	0x02DFD8A4 MOV X1, X23
	0x02DFD8A8 MOV X2, X31
	0x02DFD8AC BL 0x331D250
	0x02DFD8B0 MOV X22, X0
	0x02DFD8B4 LDR X8, [X19 + 0x20]
	0x02DFD8B8 LDR X8, [X8 + 0xC0]
	0x02DFD8BC LDR X1, [X8 + 0x28]
	0x02DFD8C0 LDRB W8, [X1 + 0x135]
	0x02DFD8C4 TBNZ X8, 0x0, 0x2DFD8D4
	0x02DFD8C8 MOV X0, X1
	0x02DFD8CC BL 0x1C5C684
	0x02DFD8D0 MOV X1, X0
	0x02DFD8D4 CBZ X22, 0x2DFD978
	0x02DFD8D8 LDR X8, [X22]
	0x02DFD8DC LDR X9, [X1 + 0x40]
	0x02DFD8E0 MOV X0, X22
	0x02DFD8E4 LDR X8, [X8 + 0x40]
	0x02DFD8E8 CMP X8, X9
	0x02DFD8EC B.NE 0x2DFD97C
	0x02DFD8F0 BL 0x1C16E08
	0x02DFD8F4 LDR X8, [X21]
	0x02DFD8F8 LDRB W1, [X0]
	0x02DFD8FC MOV X0, X21
	0x02DFD900 MOV X2, X20
	0x02DFD904 LDR X4, [X8 + 0x258]
	0x02DFD908 LDR X3, [X8 + 0x260]
	0x02DFD90C LDP X20, X19, [X31 + 0x20]
	0x02DFD910 LDP X22, X21, [X31 + 0x10]
	0x02DFD914 LDP X30, X23, [X31], #0x30
	0x02DFD918 BR X4
	0x02DFD91C ADRP X0, 0x12FB000
	0x02DFD920 LDR X0, [X0 + 0x528]
	0x02DFD924 BL 0x1C16D08
	0x02DFD928 BL 0x1C16F10
	0x02DFD92C MOV X20, X0
	0x02DFD930 ADRP X0, 0x131E000
	0x02DFD934 LDR X0, [X0 + 0xD88]
	0x02DFD938 B 0x2DFD958
	0x02DFD93C ADRP X0, 0x12FB000
	0x02DFD940 LDR X0, [X0 + 0x528]
	0x02DFD944 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+88], X23
	004 Move [X31+96], X22
	005 Move [X31+104], X21
	006 Move [X31+112], X20
	007 Move [X31+120], X19
	008 Move X19, X3
	009 NotImplemented "Instruction MOVI not yet implemented."
	010 Move [X31+48], V0
	011 Move [X31+56], V0
	012 Compare X1, 0
	013 JumpIfEqual {39}
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction MOVI not yet implemented."
	016 Add X0, X31, 48
	017 Move W2, 32
	018 Move X3, X31
	019 Move [X31+48], V0
	020 Move [X31+56], V0
	021 Call UnsafeUtility.MemCpy, X0, X1, X2
	022 Move V0, [X31+48]
	023 Move V1, [X31+64]
	024 Add X1, X31, 0
	025 Move [X31], V0
	026 Move [X31+8], V1
	027 Move X8, [X19+32]
	028 Move X8, [X8+192]
	029 Move X0, [X8+40]
	030 Call 0x1C17E04
	031 Move X20, [X31+112]
	032 Move X19, [X31+120]
	033 Move X22, [X31+96]
	034 Move X21, [X31+104]
	035 Move X30, [X31+80]
	036 Move X23, [X31+88]
	037 Add X31, X31, 128
	038 Return X0
	039 Move X0, 0x12FC000
	040 Move X0, [X0+1320]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X20, X0
	044 Move X0, 0x1322000
	045 Move X0, [X0+3912]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X20
	049 Move X2, X31
	050 Call ArgumentNullException..ctor, X0, X1
	051 Move X0, X20
	052 Move W8, 32
	053 Move [X31], W8
	054 Move X20, 0x12F7000
	055 Move X20, [X20+1880]
	056 Move W23, W2
	057 Move X0, X20
	058 Call 0x1C17D08
	059 Add X1, X31, 0
	060 Call 0x1C17E04
	061 Move X8, [X19+32]
	062 Move X22, X0
	063 Move X0, 0x12F7000
	064 Move X8, [X8+192]
	065 Move X21, [X8]
	066 Move X0, [X0+1728]
	067 Call 0x1C17D08
	068 Call 0x19913D0
	069 Move X0, X21
	070 Move X1, X31
	071 Call Type.GetTypeFromHandle, X0
	072 Move X21, X0
	073 Call 0x19913C0
	074 Move X8, [X21]
	075 Move X0, X21
	076 Move X9, [X8+424]
	077 Move X1, [X8+432]
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X21, X0
	080 Move X0, X20
	081 Move [X31+44], W23
	082 Call 0x1C17D08
	083 Add X1, X31, 44
	084 Call 0x1C17E04
	085 Move X20, X0
	086 Move X0, 0x1323000
	087 Move X0, [X0+8]
	088 Call 0x1C17D08
	089 Move X1, X22
	090 Move X2, X21
	091 Move X3, X20
	092 Move X4, X31
	093 Call String.Format, X0, X1, X2, X3
	094 Move X20, X0
	095 Move X0, 0x12FF000
	096 Move X0, [X0+1400]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X21, X0
	100 Move X0, 0x1322000
	101 Move X0, [X0+3928]
	102 Call 0x1C17D08
	103 Move X2, X0
	104 Move X0, X21
	105 Move X1, X20
	106 Move X3, X31
	107 Call ArgumentException..ctor, X0, X1, X2
	108 Move X0, X21
	109 Move X1, X19
	110 Call 0x1C17DEC

Method: System.Boolean CompareValue(ref TValue firstValue, ref TValue secondValue)

Disassembly:
	0x02DFD948 BL 0x1C16F10
	0x02DFD94C MOV X20, X0
	0x02DFD950 ADRP X0, 0x1300000
	0x02DFD954 LDR X0, [X0 + 0xEC8]
	0x02DFD958 BL 0x1C16D08
	0x02DFD95C MOV X1, X0
	0x02DFD960 MOV X0, X20
	0x02DFD964 MOV X2, X31
	0x02DFD968 BL 0x330E100
	0x02DFD96C MOV X0, X20
	0x02DFD970 MOV X1, X19
	0x02DFD974 BL 0x1C16DEC
	0x02DFD978 BL 0x1C16F20
	0x02DFD97C BL 0x1C171E0
	0x02DFD980 STP X30, X21, [X31 - 0x20]!
	0x02DFD984 STP X20, X19, [X31 + 0x10]
	0x02DFD988 MOV X20, X0
	0x02DFD98C ADRP X0, 0x1322000
	0x02DFD990 LDR X0, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move X19, X1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {14}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move W2, 32
	015 Move X0, X20
	016 Move X1, X19
	017 Move X3, X31
	018 Call UnsafeUtility.MemCmp, X0, X1, X2
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSET not yet implemented."
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Boolean CompareValue(System.Void* firstStatePtr, System.Void* secondStatePtr)

Disassembly:
	0x02DFD994 MOV X19, X3
	0x02DFD998 BL 0x1C16D08
	0x02DFD99C MOV X1, X20
	0x02DFD9A0 MOV X2, X31
	0x02DFD9A4 BL 0x321EFD0
	0x02DFD9A8 MOV X20, X0
	0x02DFD9AC ADRP X0, 0x12F6000
	0x02DFD9B0 LDR X0, [X0 + 0xB40]
	0x02DFD9B4 BL 0x1C16D08
	0x02DFD9B8 BL 0x1C16F10
	0x02DFD9BC MOV X1, X20
	0x02DFD9C0 MOV X2, X31
	0x02DFD9C4 MOV X21, X0
	0x02DFD9C8 BL 0x3379A44
	0x02DFD9CC MOV X0, X21
	0x02DFD9D0 MOV X1, X19
	0x02DFD9D4 BL 0x1C16DEC
	0x02DFD9D8 SUB X31, X31, 0x40
	0x02DFD9DC STP X30, X23, [X31 + 0x10]
	0x02DFD9E0 STP X22, X21, [X31 + 0x20]
	0x02DFD9E4 STP X20, X19, [X31 + 0x30]
	0x02DFD9E8 MOV X19, X3
	0x02DFD9EC STRB W31, [X31 + 0xC]
	0x02DFD9F0 CBZ X1, 0x2DFDA40
	0x02DFD9F4 CMP W2, 0x0
	0x02DFD9F8 B.LE 0x2DFDA78
	0x02DFD9FC ADD X0, X31, 0xC
	0x02DFDA00 MOVZ W2, 0x1
	0x02DFDA04 MOV X3, X31
	0x02DFDA08 STRB W31, [X31 + 0xC]
	0x02DFDA0C BL 0x3BFF954
	0x02DFDA10 LDRB W8, [X31 + 0xC]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Move [X31+32], V0
	008 Move [X31+40], V0
	009 Move [X31], V0
	010 Move [X31+8], V0
	011 Move X8, [X3+32]
	012 Move X20, X2
	013 Move X19, X3
	014 Move X21, X0
	015 Move X8, [X8+192]
	016 Move X2, [X8+72]
	017 Add X8, X31, 32
	018 Call 0x2DFD09C, X0, X1
	019 Move X8, [X19+32]
	020 Move X0, X21
	021 Move X1, X20
	022 Move X8, [X8+192]
	023 Move X2, [X8+72]
	024 Add X8, X31, 0
	025 Call 0x2DFD09C, X0, X1
	026 Move X8, [X19+32]
	027 Add X0, X31, 32
	028 Add X1, X31, 0
	029 Move X8, [X8+192]
	030 Move X2, [X8+104]
	031 Call 0x2DFD948, X0, X1
	032 Move X20, [X31+80]
	033 Move X19, [X31+88]
	034 Move X30, [X31+64]
	035 Move X21, [X31+72]
	036 And W0, W0, 1
	037 Add X31, X31, 96
	038 Return X0

Method: TValue ProcessValue(TValue value)

Disassembly:
	0x02DFDA14 ADD X1, X31, 0x0
	0x02DFDA18 STRB W8, [X31]
	0x02DFDA1C LDR X8, [X19 + 0x20]
	0x02DFDA20 LDR X8, [X8 + 0xC0]
	0x02DFDA24 LDR X0, [X8 + 0x28]
	0x02DFDA28 BL 0x1C16E04
	0x02DFDA2C LDP X20, X19, [X31 + 0x30]
	0x02DFDA30 LDP X22, X21, [X31 + 0x20]
	0x02DFDA34 LDP X30, X23, [X31 + 0x10]
	0x02DFDA38 ADD X31, X31, 0x40
	0x02DFDA3C RET
	0x02DFDA40 ADRP X0, 0x12FB000
	0x02DFDA44 LDR X0, [X0 + 0x528]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X9, [X2+32]
	005 Move X19, X1
	006 Move X20, X8
	007 Move X9, [X9+192]
	008 Move X2, [X9+120]
	009 Call 0x2E03F5C
	010 Move V1, [X19]
	011 Move V0, [X19+16]
	012 Move [X20], V1
	013 Move [X20+8], V0
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return X0

Method: System.Void ProcessValue(ref TValue value)

Disassembly:
	0x02DFDA48 BL 0x1C16D08
	0x02DFDA4C BL 0x1C16F10
	0x02DFDA50 MOV X20, X0
	0x02DFDA54 ADRP X0, 0x1321000
	0x02DFDA58 LDR X0, [X0 + 0xF48]
	0x02DFDA5C BL 0x1C16D08
	0x02DFDA60 MOV X1, X0
	0x02DFDA64 MOV X0, X20
	0x02DFDA68 MOV X2, X31
	0x02DFDA6C BL 0x330E100
	0x02DFDA70 MOV X0, X20
	0x02DFDA74 B 0x2DFDB58
	0x02DFDA78 MOVZ W8, 0x1
	0x02DFDA7C STR W8, [X31 + 0x8]
	0x02DFDA80 ADRP X20, 0x12F6000
	0x02DFDA84 LDR X20, [X20 + 0x758]
	0x02DFDA88 MOV W23, W2
	0x02DFDA8C MOV X0, X20
	0x02DFDA90 BL 0x1C16D08
	0x02DFDA94 ADD X1, X31, 0x8
	0x02DFDA98 BL 0x1C16E04
	0x02DFDA9C LDR X8, [X19 + 0x20]
	0x02DFDAA0 MOV X22, X0
	0x02DFDAA4 ADRP X0, 0x12F6000
	0x02DFDAA8 LDR X8, [X8 + 0xC0]
	0x02DFDAAC LDR X21, [X8]
	0x02DFDAB0 LDR X0, [X0 + 0x6C0]
	0x02DFDAB4 BL 0x1C16D08
	0x02DFDAB8 BL 0x19903D0
	0x02DFDABC MOV X0, X21
	0x02DFDAC0 MOV X1, X31
	0x02DFDAC4 BL 0x338C698
	0x02DFDAC8 MOV X21, X0
	0x02DFDACC BL 0x19903C0
	0x02DFDAD0 LDR X8, [X21]
	0x02DFDAD4 MOV X0, X21
	0x02DFDAD8 LDP X9, X1, [X8 + 0x1A8]
	0x02DFDADC BLR X9
	0x02DFDAE0 MOV X21, X0
	0x02DFDAE4 MOV X0, X20
	0x02DFDAE8 STR W23, [X31 + 0x4]
	0x02DFDAEC BL 0x1C16D08
	0x02DFDAF0 ADD X1, X31, 0x4
	0x02DFDAF4 BL 0x1C16E04
	0x02DFDAF8 MOV X20, X0
	0x02DFDAFC ADRP X0, 0x1322000
	0x02DFDB00 LDR X0, [X0 + 0x8]
	0x02DFDB04 BL 0x1C16D08
	0x02DFDB08 MOV X1, X22
	0x02DFDB0C MOV X2, X21
	0x02DFDB10 MOV X3, X20
	0x02DFDB14 MOV X4, X31
	0x02DFDB18 BL 0x3227C18
	0x02DFDB1C MOV X20, X0
	0x02DFDB20 ADRP X0, 0x12FE000
	0x02DFDB24 LDR X0, [X0 + 0x578]
	0x02DFDB28 BL 0x1C16D08
	0x02DFDB2C BL 0x1C16F10
	0x02DFDB30 MOV X21, X0
	0x02DFDB34 ADRP X0, 0x1321000
	0x02DFDB38 LDR X0, [X0 + 0xF58]
	0x02DFDB3C BL 0x1C16D08
	0x02DFDB40 MOV X2, X0
	0x02DFDB44 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move W8, [X0+224]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move V0, [X1]
	010 Move V1, [X1+16]
	011 Move X0, [X0+232]
	012 Move X20, X1
	013 Move [X31+32], V0
	014 Move [X31+40], V1
	015 Compare X0, 0
	016 JumpIfEqual {75}
	017 Move X8, [X0]
	018 Move V0, [X31+32]
	019 Move V1, [X31+48]
	020 Add X1, X31, 64
	021 Move X2, X19
	022 Move X9, [X8+424]
	023 Move [X31+64], V0
	024 Move [X31+72], V1
	025 Move X3, [X8+432]
	026 Add X8, X31, 0
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move V1, [X31]
	029 Move V0, [X31+16]
	030 Move [X31+64], V1
	031 Move [X31+72], V0
	032 Move [X20], V1
	033 Move [X20+8], V0
	034 Move X8, [X19+240]
	035 Compare X8, 0
	036 JumpIfEqual {76}
	037 Move W9, [X19+224]
	038 Subtract W9, W9, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W21, W31
	041 Move W9, [X8+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add X8, X8, W21
	044 Move V0, [X20]
	045 Move V1, [X20+16]
	046 Move X0, [X8+32]
	047 Move [X31+32], V0
	048 Move [X31+40], V1
	049 Compare X0, 0
	050 JumpIfEqual {75}
	051 Move X8, [X0]
	052 Move V0, [X31+32]
	053 Move V1, [X31+48]
	054 Add X1, X31, 64
	055 Move X2, X19
	056 Move X9, [X8+424]
	057 Move [X31+64], V0
	058 Move [X31+72], V1
	059 Move X3, [X8+432]
	060 Add X8, X31, 0
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move V1, [X31]
	063 Move V0, [X31+16]
	064 Add W21, W21, 1
	065 Move [X31+64], V1
	066 Move [X31+72], V0
	067 Move [X20], V1
	068 Move [X20+8], V0
	069 Move W8, [X19+224]
	070 Subtract W8, W8, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X8, [X19+240]
	073 Compare X8, 0
	074 JumpIfNotEqual {41}
	075 Call 0x1C17F20
	076 Move X20, [X31+112]
	077 Move X19, [X31+120]
	078 Move X30, [X31+96]
	079 Move X21, [X31+104]
	080 Add X31, X31, 128
	081 Return 
	082 Call 0x1C17F28

Method: TProcessor TryGetProcessor()

Disassembly:
	0x02131658 BL 0x2FE1458
	0x0213165C LDR W8, [X20 + 0x18]
	0x02131660 CMP W8, 0x1
	0x02131664 B.LT 0x21316CC
	0x02131668 CBZ X21, 0x2131708
	0x0213166C MOVZ W22, 0x4
	0x02131670 LDR X8, [X20 + 0x10]
	0x02131674 CBZ X8, 0x2131708
	0x02131678 LDR W9, [X8 + 0x18]
	0x0213167C SUB X23, X22, 0x4
	0x02131680 CMP X23, X9
	0x02131684 B.CS 0x213170C
	0x02131688 CBZ X19, 0x2131708
	0x0213168C LDR X1, [X8, X22, LSL #3]
	0x02131690 LDR X8, [X19 + 0x18]
	0x02131694 LDR X0, [X19 + 0x40]
	0x02131698 LDR X2, [X19 + 0x28]
	0x0213169C LDR X24, [X21 + 0x10]
	0x021316A0 BLR X8
	0x021316A4 CBZ X24, 0x2131708
	0x021316A8 LDR W8, [X24 + 0x18]
	0x021316AC CMP X23, X8
	0x021316B0 B.CS 0x213170C
	0x021316B4 STR X0, [X24, X22, LSL #3]
	0x021316B8 LDRSW X8, [X20 + 0x18]
	0x021316BC SUB X9, X22, 0x3
	0x021316C0 ADD X22, X22, 0x1
	0x021316C4 CMP X9, X8
	0x021316C8 B.LT 0x2131670
	0x021316CC CBZ X21, 0x2131708
	0x021316D0 STR W8, [X21 + 0x18]
	0x021316D4 MOV X0, X21
	0x021316D8 LDP X20, X19, [X31 + 0x30]
	0x021316DC LDP X22, X21, [X31 + 0x20]
	0x021316E0 LDP X24, X23, [X31 + 0x10]
	0x021316E4 LDR X30, [X31], #0x40
	0x021316E8 RET
	0x021316EC MOV X0, X21
	0x021316F0 BL 0x1C5C6E0
	0x021316F4 CBNZ X19, 0x213162C
	0x021316F8 MOVZ W0, 0x9
	0x021316FC MOV X1, X31
	0x02131700 BL 0x338F3E0
	0x02131704 B 0x213162C
	0x02131708 BL 0x1C16F20
	0x0213170C BL 0x1C16F28
	0x02131710 STR X30, [X31 - 0x40]!
	0x02131714 STP X24, X23, [X31 + 0x10]
	0x02131718 STP X22, X21, [X31 + 0x20]
	0x0213171C STP X20, X19, [X31 + 0x30]
	0x02131720 LDR X8, [X2 + 0x38]
	0x02131724 MOV X21, X2
	0x02131728 MOV X19, X1
	0x0213172C MOV X20, X0
	0x02131730 CBZ X8, 0x21317F8
	0x02131734 CBZ X19, 0x2131804
	0x02131738 LDR X8, [X21 + 0x38]
	0x0213173C LDR W22, [X20 + 0x18]
	0x02131740 LDR X0, [X8 + 0x8]
	0x02131744 LDRB W8, [X0 + 0x135]
	0x02131748 TBNZ X8, 0x0, 0x2131750
	0x0213174C BL 0x1C5C684
	0x02131750 BL 0x1C16F10
	0x02131754 LDR X8, [X21 + 0x38]
	0x02131758 MOV W1, W22
	0x0213175C MOV X21, X0
	0x02131760 LDR X2, [X8 + 0x10]
	0x02131764 BL 0x301B830
	0x02131768 LDR W8, [X20 + 0x18]
	0x0213176C CMP W8, 0x1
	0x02131770 B.LT 0x21317D8
	0x02131774 CBZ X21, 0x2131814
	0x02131778 MOVZ W22, 0x4
	0x0213177C LDR X8, [X20 + 0x10]
	0x02131780 CBZ X8, 0x2131814
	0x02131784 LDR W9, [X8 + 0x18]
	0x02131788 SUB X23, X22, 0x4
	0x0213178C CMP X23, X9
	0x02131790 B.CS 0x2131818
	0x02131794 CBZ X19, 0x2131814
	0x02131798 LDR X1, [X8, X22, LSL #3]
	0x0213179C LDR X8, [X19 + 0x18]
	0x021317A0 LDR X0, [X19 + 0x40]
	0x021317A4 LDR X2, [X19 + 0x28]
	0x021317A8 LDR X24, [X21 + 0x10]
	0x021317AC BLR X8
	0x021317B0 CBZ X24, 0x2131814
	0x021317B4 LDR W8, [X24 + 0x18]
	0x021317B8 CMP X23, X8
	0x021317BC B.CS 0x2131818
	0x021317C0 STR X0, [X24, X22, LSL #3]
	0x021317C4 LDRSW X8, [X20 + 0x18]
	0x021317C8 SUB X9, X22, 0x3
	0x021317CC ADD X22, X22, 0x1
	0x021317D0 CMP X9, X8
	0x021317D4 B.LT 0x213177C
	0x021317D8 CBZ X21, 0x2131814
	0x021317DC STR W8, [X21 + 0x18]
	0x021317E0 MOV X0, X21
	0x021317E4 LDP X20, X19, [X31 + 0x30]
	0x021317E8 LDP X22, X21, [X31 + 0x20]
	0x021317EC LDP X24, X23, [X31 + 0x10]
	0x021317F0 LDR X30, [X31], #0x40
	0x021317F4 RET
	0x021317F8 MOV X0, X21
	0x021317FC BL 0x1C5C6E0
	0x02131800 CBNZ X19, 0x2131738
	0x02131804 MOVZ W0, 0x9
	0x02131808 MOV X1, X31
	0x0213180C BL 0x338F3E0
	0x02131810 B 0x2131738
	0x02131814 BL 0x1C16F20
	0x02131818 BL 0x1C16F28
	0x0213181C STR X30, [X31 - 0x40]!
	0x02131820 STP X24, X23, [X31 + 0x10]
	0x02131824 STP X22, X21, [X31 + 0x20]
	0x02131828 STP X20, X19, [X31 + 0x30]
	0x0213182C LDR X8, [X2 + 0x38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X1+56]
	008 Move X19, X1
	009 Move X20, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X19
	013 Call 0x1C5D6E0
	014 Move X8, [X19+32]
	015 Move X0, X20
	016 Move X8, [X8+192]
	017 Move X8, [X8+16]
	018 Move X1, [X8+128]
	019 Call 0x1C17D18
	020 Move W8, [X0]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, [X19+32]
	023 Move X0, X20
	024 Move X8, [X8+192]
	025 Move X8, [X8+16]
	026 Move X1, [X8+128]
	027 Call 0x1C17D18
	028 Move X8, [X19+56]
	029 Move X21, [X0+8]
	030 Move X1, [X8]
	031 Move W8, [X1+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {39}
	036 Move X0, X1
	037 Call 0x1C5D684
	038 Move X1, X0
	039 Move X0, X21
	040 Call 0x1C17E00
	041 Move X8, [X19+56]
	042 Move X22, X0
	043 Move X21, [X8]
	044 Move W8, [X21+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {52}
	049 Move X0, X21
	050 Call 0x1C5D684
	051 Move X21, X0
	052 Compare X22, 0
	053 JumpIfEqual {62}
	054 Move X0, X22
	055 Move X1, X21
	056 Call 0x1C17E00
	057 Compare X0, 0
	058 JumpIfNotEqual {130}
	059 Move X0, X22
	060 Move X1, X21
	061 Call 0x1C181E0
	062 Move X8, [X19+32]
	063 Move X0, X20
	064 Move X8, [X8+192]
	065 Move X8, [X8+16]
	066 Move X1, [X8+128]
	067 Call 0x1C17D18
	068 Move X8, [X0+16]
	069 Compare X8, 0
	070 JumpIfEqual {129}
	071 Move X8, [X19+32]
	072 Move X0, X20
	073 Move X8, [X8+192]
	074 Move X8, [X8+16]
	075 Move X1, [X8+128]
	076 Call 0x1C17D18
	077 Move W8, [X0]
	078 Subtract W8, W8, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X23, X31
	081 Move X8, [X19+32]
	082 Move X0, X20
	083 Move X8, [X8+192]
	084 Move X8, [X8+16]
	085 Move X1, [X8+128]
	086 Call 0x1C17D18
	087 Move X8, [X0+16]
	088 Compare X8, 0
	089 JumpIfEqual {137}
	090 Move W9, [X8+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X9, [X19+56]
	093 Add X8, X8, X23
	094 Move X21, [X8+32]
	095 Move X1, [X9]
	096 Move W9, [X1+309]
	097 Move TEMP, X9
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {104}
	101 Move X0, X1
	102 Call 0x1C5D684
	103 Move X1, X0
	104 Move X0, X21
	105 Call 0x1C17E00
	106 Move X8, [X19+56]
	107 Move X22, X0
	108 Move X21, [X8]
	109 Move W8, [X21+309]
	110 Move TEMP, X8
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {117}
	114 Move X0, X21
	115 Call 0x1C5D684
	116 Move X21, X0
	117 Compare X22, 0
	118 JumpIfNotEqual {54}
	119 Move X8, [X19+32]
	120 Move X0, X20
	121 Add X23, X23, 1
	122 Move X8, [X8+192]
	123 Move X8, [X8+16]
	124 Move X1, [X8+128]
	125 Call 0x1C17D18
	126 Move W8, [X0]
	127 Subtract W8, W8, 1
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X0, X31
	130 Move X20, [X31+32]
	131 Move X19, [X31+40]
	132 Move X22, [X31+16]
	133 Move X21, [X31+24]
	134 Move X30, [X31+48]
	135 Move X23, [X31+56]
	136 Return X0
	137 Call 0x1C17F20
	138 Call 0x1C17F28

Method: System.Void AddProcessor(System.Object processor)

Disassembly:
	0x02DFDB48 MOV X1, X20
	0x02DFDB4C MOV X3, X31
	0x02DFDB50 BL 0x330E16C
	0x02DFDB54 MOV X0, X21
	0x02DFDB58 MOV X1, X19
	0x02DFDB5C BL 0x1C16DEC
	0x02DFDB60 STR X30, [X31 - 0x20]!
	0x02DFDB64 STP X20, X19, [X31 + 0x10]
	0x02DFDB68 LDR X8, [X2 + 0x20]
	0x02DFDB6C MOV X19, X1
	0x02DFDB70 MOV X20, X0
	0x02DFDB74 LDRB W9, [X8 + 0x135]
	0x02DFDB78 TBNZ X9, 0x0, 0x2DFDB84
	0x02DFDB7C MOV X0, X8
	0x02DFDB80 BL 0x1C5C684
	0x02DFDB84 MOVZ W2, 0x1
	0x02DFDB88 MOV X0, X20
	0x02DFDB8C MOV X1, X19
	0x02DFDB90 MOV X3, X31
	0x02DFDB94 BL 0x3C001FC
	0x02DFDB98 LDP X20, X19, [X31 + 0x10]
	0x02DFDB9C CMP W0, 0x0
	0x02DFDBA0 CSET W0, NE
	0x02DFDBA4 LDR X30, [X31], #0x20
	0x02DFDBA8 RET
	0x02DFDBAC SUB X31, X31, 0x30
	0x02DFDBB0 STP X30, X21, [X31 + 0x10]
	0x02DFDBB4 STP X20, X19, [X31 + 0x20]
	0x02DFDBB8 LDR X8, [X3 + 0x20]
	0x02DFDBBC MOV X20, X2
	0x02DFDBC0 MOV X19, X3
	0x02DFDBC4 MOV X21, X0
	0x02DFDBC8 LDR X8, [X8 + 0xC0]
	0x02DFDBCC LDR X2, [X8 + 0x48]
	0x02DFDBD0 BL 0x2DFD2DC
	0x02DFDBD4 AND W8, W0, 0x1
	0x02DFDBD8 STRB W8, [X31 + 0xC]
	0x02DFDBDC LDR X8, [X19 + 0x20]
	0x02DFDBE0 MOV X0, X21
	0x02DFDBE4 MOV X1, X20
	0x02DFDBE8 LDR X8, [X8 + 0xC0]
	0x02DFDBEC LDR X2, [X8 + 0x48]
	0x02DFDBF0 BL 0x2DFD2DC
	0x02DFDBF4 AND W8, W0, 0x1
	0x02DFDBF8 STRB W8, [X31 + 0x8]
	0x02DFDBFC LDR X8, [X19 + 0x20]
	0x02DFDC00 ADD X0, X31, 0xC
	0x02DFDC04 ADD X1, X31, 0x8
	0x02DFDC08 LDR X8, [X8 + 0xC0]
	0x02DFDC0C LDR X2, [X8 + 0x68]
	0x02DFDC10 BL 0x2DFDB60
	0x02DFDC14 LDP X20, X19, [X31 + 0x20]
	0x02DFDC18 LDP X30, X21, [X31 + 0x10]
	0x02DFDC1C AND W0, W0, 0x1
	0x02DFDC20 ADD X31, X31, 0x30
	0x02DFDC24 RET
	0x02DFDC28 STR X30, [X31 - 0x20]!
	0x02DFDC2C STP X20, X19, [X31 + 0x10]
	0x02DFDC30 LDR W8, [X0 + 0xE0]
	0x02DFDC34 CMP W8, 0x1
	0x02DFDC38 B.LT 0x2DFDCD4
	0x02DFDC3C MOV X19, X0
	0x02DFDC40 LDR X0, [X0 + 0xE8]
	0x02DFDC44 CBZ X0, 0x2DFDCD0
	0x02DFDC48 LDR X8, [X0]
	0x02DFDC4C AND W1, W1, 0x1
	0x02DFDC50 MOV X2, X19
	0x02DFDC54 LDP X9, X3, [X8 + 0x1A8]
	0x02DFDC58 BLR X9
	0x02DFDC5C LDR X8, [X19 + 0xF0]
	0x02DFDC60 AND W0, W0, 0x1
	0x02DFDC64 CBZ X8, 0x2DFDCD8
	0x02DFDC68 LDR W9, [X19 + 0xE0]
	0x02DFDC6C SUB W9, W9, 0x1
	0x02DFDC70 CMP W9, 0x1
	0x02DFDC74 B.LT 0x2DFDCD8
	0x02DFDC78 MOV X20, X31
	0x02DFDC7C LDR W9, [X8 + 0x18]
	0x02DFDC80 CMP W20, W9
	0x02DFDC84 B.CS 0x2DFDCE4
	0x02DFDC88 ADD X8, X8, X20, 0x3, LSL
	0x02DFDC8C LDR X8, [X8 + 0x20]
	0x02DFDC90 CBZ X8, 0x2DFDCD0
	0x02DFDC94 LDR X9, [X8]
	0x02DFDC98 ANDS W31, W0, 0xFF
	0x02DFDC9C CSET W1, NE
	0x02DFDCA0 MOV X0, X8
	0x02DFDCA4 LDP X10, X3, [X9 + 0x1A8]
	0x02DFDCA8 MOV X2, X19
	0x02DFDCAC BLR X10
	0x02DFDCB0 LDR W8, [X19 + 0xE0]
	0x02DFDCB4 ADD X20, X20, 0x1
	0x02DFDCB8 AND W0, W0, 0x1
	0x02DFDCBC SUB W8, W8, 0x1
	0x02DFDCC0 CMP W20, W8
	0x02DFDCC4 B.GE 0x2DFDCD8
	0x02DFDCC8 LDR X8, [X19 + 0xF0]
	0x02DFDCCC CBNZ X8, 0x2DFDC7C
	0x02DFDCD0 BL 0x1C16F20
	0x02DFDCD4 AND W0, W1, 0x1
	0x02DFDCD8 LDP X20, X19, [X31 + 0x10]
	0x02DFDCDC LDR X30, [X31], #0x20
	0x02DFDCE0 RET
	0x02DFDCE4 BL 0x1C16F28
	0x02DFDCE8 STP X30, X21, [X31 - 0x20]!
	0x02DFDCEC STP X20, X19, [X31 + 0x10]
	0x02DFDCF0 LDR W8, [X0 + 0xE0]
	0x02DFDCF4 CMP W8, 0x1
	0x02DFDCF8 B.LT 0x2DFDD9C
	0x02DFDCFC MOV X19, X0
	0x02DFDD00 LDR X0, [X0 + 0xE8]
	0x02DFDD04 CBZ X0, 0x2DFDD98
	0x02DFDD08 LDR X8, [X0]
	0x02DFDD0C MOV X20, X1
	0x02DFDD10 LDRB W1, [X1]
	0x02DFDD14 MOV X2, X19
	0x02DFDD18 LDP X9, X3, [X8 + 0x1A8]
	0x02DFDD1C BLR X9
	0x02DFDD20 AND W8, W0, 0x1
	0x02DFDD24 STRB W8, [X20]
	0x02DFDD28 LDR X9, [X19 + 0xF0]
	0x02DFDD2C CBZ X9, 0x2DFDD9C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X19, X2
	008 Move X22, X1
	009 Move X20, X0
	010 Move X8, [X8+192]
	011 Move X8, [X8+136]
	012 Move W9, [X8+309]
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {20}
	017 Move X0, X8
	018 Call 0x1C5D684
	019 Move X8, X0
	020 Compare X22, 0
	021 JumpIfEqual {42}
	022 Move X9, [X22]
	023 Move W10, [X8+304]
	024 Move W11, [X9+304]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X9, [X9+200]
	027 Add X9, X9, X10
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X19+32]
	031 Add X0, X20, 224
	032 Move X1, X22
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X8, [X8+192]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X2, [X8+160]
	039 Move X30, [X31+48]
	040 Call InlinedArray`1<Object>.Append, X0, X1
	041 Return 
	042 Move X0, 0x12F7000
	043 Move X0, [X0+2760]
	044 Call 0x1C17D08
	045 Move W1, 5
	046 Call 0x1C17D6C
	047 Move X21, X0
	048 Call 0x19913C0
	049 Move X0, 0x1323000
	050 Move X0, [X0+16]
	051 Call 0x1C17D08
	052 Move X2, X0
	053 Move X0, X21
	054 Move X1, X31
	055 Call 0x1994444
	056 Move X0, X22
	057 Call 0x19913C0
	058 Move X0, X22
	059 Move X1, X31
	060 Call "il2cpp_vm_object_is_inst", X0
	061 Move X22, X0
	062 Call 0x19913C0
	063 Move X8, [X22]
	064 Move X0, X22
	065 Move X9, [X8+424]
	066 Move X1, [X8+432]
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X22, X0
	069 Move X0, X21
	070 Call 0x19913C0
	071 Move W1, 1
	072 Move X0, X21
	073 Move X2, X22
	074 Call 0x1994444
	075 Move X0, X21
	076 Call 0x19913C0
	077 Move X0, 0x1323000
	078 Move X0, [X0+24]
	079 Call 0x1C17D08
	080 Move X2, X0
	081 Move W1, 2
	082 Move X0, X21
	083 Call 0x1994444
	084 Move X0, X20
	085 Call 0x19913C0
	086 Move X0, X20
	087 Move X1, X31
	088 Call "il2cpp_vm_object_is_inst", X0
	089 Move X20, X0
	090 Call 0x19913C0
	091 Move X8, [X20]
	092 Move X0, X20
	093 Move X9, [X8+424]
	094 Move X1, [X8+432]
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Move X20, X0
	097 Move X0, X21
	098 Call 0x19913C0
	099 Move W1, 3
	100 Move X0, X21
	101 Move X2, X20
	102 Call 0x1994444
	103 Move X0, X21
	104 Call 0x19913C0
	105 Move X0, 0x12FF000
	106 Move X0, [X0+2480]
	107 Call 0x1C17D08
	108 Move X2, X0
	109 Move W1, 4
	110 Move X0, X21
	111 Call 0x1994444
	112 Move X0, X21
	113 Move X1, X31
	114 Call String.Concat, X0
	115 Move X20, X0
	116 Move X0, 0x12FF000
	117 Move X0, [X0+1400]
	118 Call 0x1C17D08
	119 Call 0x1C17F10
	120 Move X21, X0
	121 Move X0, 0x1323000
	122 Move X0, [X0+32]
	123 Call 0x1C17D08
	124 Move X2, X0
	125 Move X0, X21
	126 Move X1, X20
	127 Move X3, X31
	128 Call ArgumentException..ctor, X0, X1, X2
	129 Move X0, X21
	130 Move X1, X19
	131 Call 0x1C17DEC

Method: System.Void FinishSetup()

Disassembly:
	0x02DFDD30 LDR W10, [X19 + 0xE0]
	0x02DFDD34 SUB W10, W10, 0x1
	0x02DFDD38 CMP W10, 0x1
	0x02DFDD3C B.LT 0x2DFDD9C
	0x02DFDD40 MOV W21, W31
	0x02DFDD44 LDR W10, [X9 + 0x18]
	0x02DFDD48 CMP W21, W10
	0x02DFDD4C B.CS 0x2DFDDA8
	0x02DFDD50 ADD X9, X9, W21, 0x3, SXTW
	0x02DFDD54 LDR X0, [X9 + 0x20]
	0x02DFDD58 CBZ X0, 0x2DFDD98
	0x02DFDD5C LDR X9, [X0]
	0x02DFDD60 ANDS W31, W8, 0xFF
	0x02DFDD64 CSET W1, NE
	0x02DFDD68 MOV X2, X19
	0x02DFDD6C LDP X10, X3, [X9 + 0x1A8]
	0x02DFDD70 BLR X10
	0x02DFDD74 AND W8, W0, 0x1
	0x02DFDD78 STRB W8, [X20]
	0x02DFDD7C LDR W9, [X19 + 0xE0]
	0x02DFDD80 ADD W21, W21, 0x1
	0x02DFDD84 SUB W9, W9, 0x1
	0x02DFDD88 CMP W21, W9
	0x02DFDD8C B.GE 0x2DFDD9C
	0x02DFDD90 LDR X9, [X19 + 0xF0]
	0x02DFDD94 CBNZ X9, 0x2DFDD44
	0x02DFDD98 BL 0x1C16F20
	0x02DFDD9C LDP X20, X19, [X31 + 0x10]
	0x02DFDDA0 LDP X30, X21, [X31], #0x20
	0x02DFDDA4 RET
	0x02DFDDA8 BL 0x1C16F28
	0x02DFDDAC STR X30, [X31 - 0x30]!
	0x02DFDDB0 STP X22, X21, [X31 + 0x10]
	0x02DFDDB4 STP X20, X19, [X31 + 0x20]
	0x02DFDDB8 LDR X8, [X2 + 0x20]
	0x02DFDDBC MOV X19, X2
	0x02DFDDC0 MOV X22, X1
	0x02DFDDC4 MOV X20, X0
	0x02DFDDC8 LDR X8, [X8 + 0xC0]
	0x02DFDDCC LDR X8, [X8 + 0x88]
	0x02DFDDD0 LDRB W9, [X8 + 0x135]
	0x02DFDDD4 TBNZ X9, 0x0, 0x2DFDDE4
	0x02DFDDD8 MOV X0, X8
	0x02DFDDDC BL 0x1C5C684
	0x02DFDDE0 MOV X8, X0
	0x02DFDDE4 CBZ X22, 0x2DFDE34
	0x02DFDDE8 LDR X9, [X22]
	0x02DFDDEC LDRB W10, [X8 + 0x130]
	0x02DFDDF0 LDRB W11, [X9 + 0x130]
	0x02DFDDF4 CMP W11, W10
	0x02DFDDF8 B.CC 0x2DFDE34
	0x02DFDDFC LDR X9, [X9 + 0xC8]
	0x02DFDE00 ADD X9, X9, X10, 0x3, LSL
	0x02DFDE04 LDUR X9, [X9 - 0x8]
	0x02DFDE08 CMP X9, X8
	0x02DFDE0C B.NE 0x2DFDE34
	0x02DFDE10 LDR X8, [X19 + 0x20]
	0x02DFDE14 ADD X0, X20, 0xE0
	0x02DFDE18 MOV X1, X22
	0x02DFDE1C LDP X20, X19, [X31 + 0x20]
	0x02DFDE20 LDR X8, [X8 + 0xC0]
	0x02DFDE24 LDP X22, X21, [X31 + 0x10]
	0x02DFDE28 LDR X2, [X8 + 0xA0]
	0x02DFDE2C LDR X30, [X31], #0x30
	0x02DFDE30 B 0x2DEA7E8
	0x02DFDE34 ADRP X0, 0x12F6000
	0x02DFDE38 LDR X0, [X0 + 0xAC8]
	0x02DFDE3C BL 0x1C16D08
	0x02DFDE40 MOVZ W1, 0x5
	0x02DFDE44 BL 0x1C16D6C
	0x02DFDE48 MOV X21, X0
	0x02DFDE4C BL 0x19903C0
	0x02DFDE50 ADRP X0, 0x1322000
	0x02DFDE54 LDR X0, [X0 + 0x10]
	0x02DFDE58 BL 0x1C16D08
	0x02DFDE5C MOV X2, X0
	0x02DFDE60 MOV X0, X21
	0x02DFDE64 MOV X1, X31
	0x02DFDE68 BL 0x1993444
	0x02DFDE6C MOV X0, X22
	0x02DFDE70 BL 0x19903C0
	0x02DFDE74 MOV X0, X22
	0x02DFDE78 MOV X1, X31
	0x02DFDE7C BL 0x33BE520
	0x02DFDE80 MOV X22, X0
	0x02DFDE84 BL 0x19903C0
	0x02DFDE88 LDR X8, [X22]
	0x02DFDE8C MOV X0, X22
	0x02DFDE90 LDP X9, X1, [X8 + 0x1A8]
	0x02DFDE94 BLR X9
	0x02DFDE98 MOV X22, X0
	0x02DFDE9C MOV X0, X21
	0x02DFDEA0 BL 0x19903C0
	0x02DFDEA4 MOVZ W1, 0x1
	0x02DFDEA8 MOV X0, X21
	0x02DFDEAC MOV X2, X22
	0x02DFDEB0 BL 0x1993444
	0x02DFDEB4 MOV X0, X21
	0x02DFDEB8 BL 0x19903C0
	0x02DFDEBC ADRP X0, 0x1322000
	0x02DFDEC0 LDR X0, [X0 + 0x18]
	0x02DFDEC4 BL 0x1C16D08
	0x02DFDEC8 MOV X2, X0
	0x02DFDECC MOVZ W1, 0x2
	0x02DFDED0 MOV X0, X21
	0x02DFDED4 BL 0x1993444
	0x02DFDED8 MOV X0, X20
	0x02DFDEDC BL 0x19903C0
	0x02DFDEE0 MOV X0, X20
	0x02DFDEE4 MOV X1, X31
	0x02DFDEE8 BL 0x33BE520
	0x02DFDEEC MOV X20, X0
	0x02DFDEF0 BL 0x19903C0
	0x02DFDEF4 LDR X8, [X20]
	0x02DFDEF8 MOV X0, X20
	0x02DFDEFC LDP X9, X1, [X8 + 0x1A8]
	0x02DFDF00 BLR X9
	0x02DFDF04 MOV X20, X0
	0x02DFDF08 MOV X0, X21
	0x02DFDF0C BL 0x19903C0
	0x02DFDF10 MOVZ W1, 0x3
	0x02DFDF14 MOV X0, X21
	0x02DFDF18 MOV X2, X20
	0x02DFDF1C BL 0x1993444
	0x02DFDF20 MOV X0, X21
	0x02DFDF24 BL 0x19903C0
	0x02DFDF28 ADRP X0, 0x12FE000
	0x02DFDF2C LDR X0, [X0 + 0x9B0]
	0x02DFDF30 BL 0x1C16D08
	0x02DFDF34 MOV X2, X0
	0x02DFDF38 MOVZ W1, 0x4
	0x02DFDF3C MOV X0, X21
	0x02DFDF40 BL 0x1993444
	0x02DFDF44 MOV X0, X21
	0x02DFDF48 MOV X1, X31
	0x02DFDF4C BL 0x32278CC
	0x02DFDF50 MOV X20, X0
	0x02DFDF54 ADRP X0, 0x12FE000
	0x02DFDF58 LDR X0, [X0 + 0x578]
	0x02DFDF5C BL 0x1C16D08
	0x02DFDF60 BL 0x1C16F10
	0x02DFDF64 MOV X21, X0
	0x02DFDF68 ADRP X0, 0x1322000
	0x02DFDF6C LDR X0, [X0 + 0x20]
	0x02DFDF70 BL 0x1C16D08
	0x02DFDF74 MOV X2, X0
	0x02DFDF78 MOV X0, X21
	0x02DFDF7C MOV X1, X20
	0x02DFDF80 MOV X3, X31
	0x02DFDF84 BL 0x330E16C
	0x02DFDF88 MOV X0, X21
	0x02DFDF8C MOV X1, X19
	0x02DFDF90 BL 0x1C16DEC
	0x02DFDF94 STR X30, [X31 - 0x40]!
	0x02DFDF98 STP X24, X23, [X31 + 0x10]
	0x02DFDF9C STP X22, X21, [X31 + 0x20]
	0x02DFDFA0 STP X20, X19, [X31 + 0x30]
	0x02DFDFA4 ADRP X19, 0x15DE000
	0x02DFDFA8 LDRB W8, [X19 + 0x9EE]
	0x02DFDFAC MOV X21, X1
	0x02DFDFB0 MOV X20, X0
	0x02DFDFB4 TBNZ X8, 0x0, 0x2DFDFD8
	0x02DFDFB8 ADRP X0, 0x12F6000
	0x02DFDFBC LDR X0, [X0 + 0xE00]
	0x02DFDFC0 BL 0x1C16CF4
	0x02DFDFC4 ADRP X0, 0x12F6000
	0x02DFDFC8 LDR X0, [X0 + 0xE18]
	0x02DFDFCC BL 0x1C16CF4
	0x02DFDFD0 MOVZ W8, 0x1
	0x02DFDFD4 STRB W8, [X19 + 0x9EE]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x15DF000
	009 Move W8, [X19+2537]
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x12F7000
	017 Move X0, [X0+3584]
	018 Call 0x1C17CF4
	019 Move X0, 0x12F7000
	020 Move X0, [X0+3608]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X19+2537], W8
	024 Move X8, [X21+32]
	025 Move X22, 0x12F7000
	026 Add X0, X20, 224
	027 Move X8, [X8+192]
	028 Move X1, [X8+176]
	029 Move X22, [X22+3584]
	030 Call InlinedArray`1<Object>.GetEnumerator, X0
	031 Move X19, X0
	032 Compare X0, 0
	033 JumpIfEqual {141}
	034 Move X23, 0x12F7000
	035 Move X23, [X23+3608]
	036 Move W24, 1
	037 Move X8, [X19]
	038 Move X1, [X23]
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Compare X9, 0
	041 JumpIfEqual {48}
	042 Move X10, [X8+176]
	043 Add X10, X10, 8
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Subtract X9, X9, 1
	047 Add X10, X10, 16
	048 Move X0, X19
	049 Move W2, W31
	050 Call 0x1C5D788
	051 NotImplemented "Instruction LDRSW not yet implemented."
	052 Add X8, X8, X9
	053 Add X0, X8, 312
	054 Move X8, [X0]
	055 Move X1, [X0+8]
	056 Move X0, X19
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {101}
	062 Move X8, [X21+32]
	063 Move X8, [X8+192]
	064 Move X1, [X8+184]
	065 Move W8, [X1+309]
	066 Move TEMP, X8
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {73}
	070 Move X0, X1
	071 Call 0x1C5D684
	072 Move X1, X0
	073 Move X8, [X19]
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Compare X9, 0
	076 JumpIfEqual {83}
	077 Move X10, [X8+176]
	078 Add X10, X10, 8
	079 NotImplemented "Instruction LDUR not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Subtract X9, X9, 1
	082 Add X10, X10, 16
	083 Move X0, X19
	084 Move W2, W31
	085 Call 0x1C5D788
	086 NotImplemented "Instruction LDRSW not yet implemented."
	087 Add X8, X8, X9
	088 Add X0, X8, 312
	089 Move X8, [X0]
	090 Move X1, [X0+8]
	091 Move X0, X19
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Compare X0, 0
	094 JumpIfEqual {140}
	095 Move X8, [X0]
	096 Move X9, [X8+408]
	097 Move X1, [X8+416]
	098 NotImplemented "Instruction BLR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move [X20+312], W24
	101 Move X21, X31
	102 Compare X19, 0
	103 JumpIfEqual {125}
	104 Move X8, [X19]
	105 Move X1, [X22]
	106 NotImplemented "Instruction LDRH not yet implemented."
	107 Compare X9, 0
	108 JumpIfEqual {115}
	109 Move X10, [X8+176]
	110 Add X10, X10, 8
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Subtract X9, X9, 1
	114 Add X10, X10, 16
	115 Move X0, X19
	116 Move W2, W31
	117 Call 0x1C5D788
	118 NotImplemented "Instruction LDRSW not yet implemented."
	119 Add X8, X8, X9
	120 Add X0, X8, 312
	121 Move X8, [X0]
	122 Move X1, [X0+8]
	123 Move X0, X19
	124 NotImplemented "Instruction BLR not yet implemented."
	125 Compare X21, 0
	126 JumpIfNotEqual {142}
	127 Compare X20, 0
	128 JumpIfEqual {144}
	129 Move X0, X20
	130 Move X20, [X31+48]
	131 Move X19, [X31+56]
	132 Move X22, [X31+32]
	133 Move X21, [X31+40]
	134 Move X24, [X31+16]
	135 Move X23, [X31+24]
	136 Move X1, X31
	137 Move X30, [X31+64]
	138 Call InputControl.FinishSetup, X0
	139 Return 
	140 Call 0x1C17F20
	141 Call 0x1C17F20
	142 Move X0, X21
	143 Call 0x1C17F18
	144 Call 0x1C17F20
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Call 0x3EB2AD0
	147 Move X21, [X0]
	148 Call 0x3EB2AE0
	149 Move X20, X0
	150 Move X21, X31
	151 Move X20, X0
	152 Compare X19, 0
	153 JumpIfEqual {175}
	154 Move X8, [X19]
	155 Move X1, [X22]
	156 NotImplemented "Instruction LDRH not yet implemented."
	157 Compare X9, 0
	158 JumpIfEqual {165}
	159 Move X10, [X8+176]
	160 Add X10, X10, 8
	161 NotImplemented "Instruction LDUR not yet implemented."
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Subtract X9, X9, 1
	164 Add X10, X10, 16
	165 Move X0, X19
	166 Move W2, W31
	167 Call 0x1C5D788
	168 NotImplemented "Instruction LDRSW not yet implemented."
	169 Add X8, X8, X9
	170 Add X0, X8, 312
	171 Move X8, [X0]
	172 Move X1, [X0+8]
	173 Move X0, X19
	174 NotImplemented "Instruction BLR not yet implemented."
	175 Compare X21, 0
	176 JumpIfNotEqual {179}
	177 Move X0, X20
	178 Call 0x1D2D690
	179 Move X0, X21
	180 Call 0x1C17F18
	181 Call 0x1991590

Method: UnityEngine.InputSystem.InputProcessor`1<TValue>[] get_processors()

Disassembly:
	0x02DFDFD8 LDR X8, [X21 + 0x20]
	0x02DFDFDC ADRP X22, 0x12F6000
	0x02DFDFE0 ADD X0, X20, 0xE0
	0x02DFDFE4 LDR X8, [X8 + 0xC0]
	0x02DFDFE8 LDR X1, [X8 + 0xB0]

ISIL:
	001 Move X8, [X1+32]
	002 Add X0, X0, 224
	003 Move X8, [X8+192]
	004 Move X1, [X8+200]
	005 Call InlinedArray`1<Object>.ToArray, X0
	006 Return X0

Method: System.Void .ctor()

Disassembly:
	0x02DFDFEC LDR X22, [X22 + 0xE00]
	0x02DFDFF0 BL 0x2DEB4F8

ISIL:
	001 Move X1, X31
	002 Call InputControl..ctor, X0
	003 Return 

