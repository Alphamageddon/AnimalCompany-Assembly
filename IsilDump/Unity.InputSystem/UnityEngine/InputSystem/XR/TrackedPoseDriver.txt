Type: UnityEngine.InputSystem.XR.TrackedPoseDriver

Method: UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType get_trackingType()

Disassembly:
	0x037DC978 ADRP X20, 0x96C000
	0x037DC97C ADRP X21, 0x93F000

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_trackingType(UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType value)

Disassembly:
	0x037DC980 LDRB W8, [X22 + 0x2B9]
	0x037DC984 LDR X23, [X23 + 0xE70]

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType get_updateType()

Disassembly:
	0x037DC988 LDR X20, [X20 + 0xDE8]
	0x037DC98C LDR X21, [X21 + 0x270]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_updateType(UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType value)

Disassembly:
	0x037DC990 MOV X19, X0
	0x037DC994 TBNZ X8, 0x0, 0x37DC9C4

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: System.Boolean get_ignoreTrackingState()

Disassembly:
	0x037DC998 ADRP X0, 0x918000
	0x037DC99C LDR X0, [X0 + 0xE70]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_ignoreTrackingState(System.Boolean value)

Disassembly:
	0x037DC9A0 BL 0x1C16CF4
	0x037DC9A4 ADRP X0, 0x93F000
	0x037DC9A8 LDR X0, [X0 + 0x270]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+40], W8
	003 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_positionInput()

Disassembly:
	0x037DC9AC BL 0x1C16CF4
	0x037DC9B0 ADRP X0, 0x96C000
	0x037DC9B4 LDR X0, [X0 + 0xDE8]
	0x037DC9B8 BL 0x1C16CF4
	0x037DC9BC MOVZ W8, 0x1

ISIL:
	001 Move X9, [X0+64]
	002 Move V0, [X0+3]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_positionInput(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037DC9C0 STRB W8, [X22 + 0x2B9]
	0x037DC9C4 LDR X0, [X23]
	0x037DC9C8 BL 0x1C16F10
	0x037DC9CC LDR X2, [X20]
	0x037DC9D0 MOV X1, X19
	0x037DC9D4 MOV X3, X31
	0x037DC9D8 MOV X20, X0
	0x037DC9DC BL 0x3314368
	0x037DC9E0 LDR X0, [X21]
	0x037DC9E4 LDR W8, [X0 + 0xE0]
	0x037DC9E8 CBNZ W8, 0x37DC9F0
	0x037DC9EC BL 0x1C16DFC
	0x037DC9F0 MOV X0, X20
	0x037DC9F4 MOV X1, X31
	0x037DC9F8 BL 0x3770464
	0x037DC9FC MOV X0, X19
	0x037DCA00 BL 0x37DC4D4
	0x037DCA04 MOVZ W8, 0x1
	0x037DCA08 STRB W8, [X19 + 0x9B]
	0x037DCA0C LDP X20, X19, [X31 + 0x20]
	0x037DCA10 LDP X22, X21, [X31 + 0x10]
	0x037DCA14 LDP X30, X23, [X31], #0x30
	0x037DCA18 RET
	0x037DCA1C STP X30, X23, [X31 - 0x30]!
	0x037DCA20 STP X22, X21, [X31 + 0x10]
	0x037DCA24 STP X20, X19, [X31 + 0x20]
	0x037DCA28 ADRP X23, 0xC05000
	0x037DCA2C ADRP X22, 0x918000
	0x037DCA30 ADRP X20, 0x96C000
	0x037DCA34 ADRP X21, 0x93F000
	0x037DCA38 LDRB W8, [X23 + 0x2BA]
	0x037DCA3C LDR X22, [X22 + 0xE70]
	0x037DCA40 LDR X20, [X20 + 0xDE8]
	0x037DCA44 LDR X21, [X21 + 0x270]
	0x037DCA48 MOV X19, X0
	0x037DCA4C TBNZ X8, 0x0, 0x37DCA7C
	0x037DCA50 ADRP X0, 0x918000
	0x037DCA54 LDR X0, [X0 + 0xE70]
	0x037DCA58 BL 0x1C16CF4
	0x037DCA5C ADRP X0, 0x93F000
	0x037DCA60 LDR X0, [X0 + 0x270]
	0x037DCA64 BL 0x1C16CF4
	0x037DCA68 ADRP X0, 0x96C000
	0x037DCA6C LDR X0, [X0 + 0xDE8]
	0x037DCA70 BL 0x1C16CF4
	0x037DCA74 MOVZ W8, 0x1
	0x037DCA78 STRB W8, [X23 + 0x2BA]
	0x037DCA7C MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC06000
	007 Move X21, 0x918000
	008 Move W8, [X22+684]
	009 Move X21, [X21+2416]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x918000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+684], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Call Application.get_isPlaying
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {34}
	032 Move X0, X19
	033 Call TrackedPoseDriver.UnbindPosition, X0
	034 Move X8, [X20+16]
	035 Move V0, [X20]
	036 Move [X19+64], X8
	037 Move [X19+3], V0
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X31
	044 Call Application.get_isPlaying
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {64}
	049 Move X0, X19
	050 Move X1, X31
	051 Call Behaviour.get_isActiveAndEnabled, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {64}
	056 Move X0, X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Call TrackedPoseDriver.BindPosition, X0
	063 Return 
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_rotationInput()

Disassembly:
	0x037DCD64 RET
	0x037DCD68 LDR W8, [X0 + 0x24]
	0x037DCD6C ORR W8, W8, 0x2
	0x037DCD70 CMP W8, 0x2
	0x037DCD74 B.NE 0x37DCD84

ISIL:
	001 Move X9, [X0+88]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_rotationInput(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037DCD78 LDR X8, [X0]
	0x037DCD7C LDP X2, X1, [X8 + 0x1D8]
	0x037DCD80 BR X2
	0x037DCD84 RET
	0x037DCD88 LDR X8, [X0]
	0x037DCD8C LDP S0, S1, [X0 + 0x78]
	0x037DCD90 LDP S2, S3, [X0 + 0x80]
	0x037DCD94 LDP S4, S5, [X0 + 0x88]
	0x037DCD98 LDR V6, [X0 + 0x90]
	0x037DCD9C LDP X2, X1, [X8 + 0x1E8]
	0x037DCDA0 BR X2
	0x037DCDA4 STR D14, [X31 - 0x50]!
	0x037DCDA8 STP D13, D12, [X31 + 0x8]
	0x037DCDAC STP D11, D10, [X31 + 0x18]
	0x037DCDB0 STP D9, D8, [X31 + 0x28]
	0x037DCDB4 STR X30, [X31 + 0x38]
	0x037DCDB8 STP X20, X19, [X31 + 0x40]
	0x037DCDBC LDRB W8, [X0 + 0x28]
	0x037DCDC0 MOV V11.16B, V6.16B
	0x037DCDC4 MOV V12.16B, V5.16B
	0x037DCDC8 MOV V13.16B, V4.16B
	0x037DCDCC MOV V14.16B, V3.16B
	0x037DCDD0 MOV V8.16B, V2.16B
	0x037DCDD4 MOV V9.16B, V1.16B
	0x037DCDD8 MOV X19, X0
	0x037DCDDC MOV V10.16B, V0.16B
	0x037DCDE0 CBZ W8, 0x37DCDF4
	0x037DCDE4 MOV W20, W31
	0x037DCDE8 MOVZ W8, 0x1
	0x037DCDEC MOVZ W9, 0x1
	0x037DCDF0 B 0x37DCE08
	0x037DCDF4 LDR W9, [X19 + 0x94]
	0x037DCDF8 MOVZ W10, 0x9
	0x037DCDFC ANDS W8, W9, 0x1
	0x037DCE00 UBFM W9, W9, 0x1, 0x1
	0x037DCE04 CSEL W20, W10, W31, EQ
	0x037DCE08 LDR W10, [X19 + 0x20]
	0x037DCE0C AND W8, W9, W8, 0x0
	0x037DCE10 CMP W10, 0x0
	0x037DCE14 CSET W11, EQ
	0x037DCE18 ANDS W31, W8, W11, 0x0
	0x037DCE1C B.EQ 0x37DCE6C
	0x037DCE20 MOV X0, X19
	0x037DCE24 MOV X1, X31
	0x037DCE28 BL 0x3C32E90
	0x037DCE2C CBZ X0, 0x37DCF0C
	0x037DCE30 MOV V0.16B, V10.16B
	0x037DCE34 MOV V1.16B, V9.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC06000
	007 Move X21, 0x918000
	008 Move W8, [X22+685]
	009 Move X21, [X21+2416]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x918000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+685], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Call Application.get_isPlaying
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {34}
	032 Move X0, X19
	033 Call TrackedPoseDriver.UnbindRotation, X0
	034 Move X8, [X20+16]
	035 Move V0, [X20]
	036 Move [X19+88], X8
	037 Move [X19+72], V0
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X31
	044 Call Application.get_isPlaying
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {64}
	049 Move X0, X19
	050 Move X1, X31
	051 Call Behaviour.get_isActiveAndEnabled, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {64}
	056 Move X0, X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Call TrackedPoseDriver.BindRotation, X0
	063 Return 
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_trackingStateInput()

Disassembly:
	0x037DD11C BR X11
	0x037DD120 RET
	0x037DD124 MOV W0, W31
	0x037DD128 RET
	0x037DD12C LDR W0, [X8 + 0x14]

ISIL:
	001 Move X9, [X0+112]
	002 Move V0, [X0+6]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_trackingStateInput(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x037DD130 RET
	0x037DD134 MOVZ W0, 0x1
	0x037DD138 RET
	0x037DD13C MOVZ W0, 0x8
	0x037DD140 RET
	0x037DD144 MOVZ W0, 0xC
	0x037DD148 RET
	0x037DD14C MOVZ W0, 0x10
	0x037DD150 RET
	0x037DD154 MOVZ W0, 0x68
	0x037DD158 RET
	0x037DD15C MOVZ W0, 0x4C
	0x037DD160 RET
	0x037DD164 MOVZ W0, 0x20
	0x037DD168 RET
	0x037DD16C STP X30, X25, [X31 - 0x40]!
	0x037DD170 STP X24, X23, [X31 + 0x10]
	0x037DD174 STP X22, X21, [X31 + 0x20]
	0x037DD178 STP X20, X19, [X31 + 0x30]
	0x037DD17C ADRP X21, 0xC04000
	0x037DD180 LDRB W8, [X21 + 0x2BE]
	0x037DD184 MOV W19, W1
	0x037DD188 MOV X20, X0
	0x037DD18C TBNZ X8, 0x0, 0x37DD1B0
	0x037DD190 ADRP X0, 0x918000
	0x037DD194 LDR X0, [X0 + 0x170]
	0x037DD198 BL 0x1C16CF4
	0x037DD19C ADRP X0, 0x916000
	0x037DD1A0 LDR X0, [X0 + 0x8F0]
	0x037DD1A4 BL 0x1C16CF4
	0x037DD1A8 MOVZ W8, 0x1
	0x037DD1AC STRB W8, [X21 + 0x2BE]
	0x037DD1B0 CBZ X20, 0x37DD2C4
	0x037DD1B4 ADRP X8, 0x916000
	0x037DD1B8 LDR X8, [X8 + 0x8F0]
	0x037DD1BC LDR W22, [X20 + 0x10]
	0x037DD1C0 LDR X0, [X8]
	0x037DD1C4 BL 0x1C16F10
	0x037DD1C8 MOV W1, W22
	0x037DD1CC MOV X2, X31
	0x037DD1D0 MOV X21, X0
	0x037DD1D4 BL 0x3231B28
	0x037DD1D8 CMP W22, 0x1
	0x037DD1DC B.LT 0x37DD2A0
	0x037DD1E0 ADRP X25, 0x918000
	0x037DD1E4 LDR X25, [X25 + 0x170]
	0x037DD1E8 MOV W23, W31
	0x037DD1EC MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC05000
	007 Move X21, 0x917000
	008 Move W8, [X22+686]
	009 Move X21, [X21+2416]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x917000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+686], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Call Application.get_isPlaying
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {34}
	032 Move X0, X19
	033 Call TrackedPoseDriver.UnbindTrackingState, X0
	034 Move X8, [X20+16]
	035 Move V0, [X20]
	036 Move [X19+112], X8
	037 Move [X19+6], V0
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X31
	044 Call Application.get_isPlaying
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {64}
	049 Move X0, X19
	050 Move X1, X31
	051 Call Behaviour.get_isActiveAndEnabled, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {64}
	056 Move X0, X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Call TrackedPoseDriver.BindTrackingState, X0
	063 Return 
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 

Method: System.Void BindActions()

Disassembly:
	0x037DD4D4 BL 0x1C16DFC
	0x037DD4D8 MOV X0, X24
	0x037DD4DC MOV W1, W31
	0x037DD4E0 BL 0x37DD16C
	0x037DD4E4 CBZ X23, 0x37DD600
	0x037DD4E8 LDR W8, [X23 + 0x18]
	0x037DD4EC CBZ W8, 0x37DD604
	0x037DD4F0 CMP W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TrackedPoseDriver.BindPosition, X0
	005 Move X0, X19
	006 Call TrackedPoseDriver.BindRotation, X0
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call TrackedPoseDriver.BindTrackingState, X0
	011 Return 

Method: System.Void UnbindActions()

Disassembly:
	0x037DD4F4 STR X0, [X23 + 0x20]
	0x037DD4F8 B.EQ 0x37DD604
	0x037DD4FC ADRP X24, 0x923000
	0x037DD500 LDR X24, [X24 + 0x998]
	0x037DD504 MOV W1, W31
	0x037DD508 LDR X8, [X24]
	0x037DD50C STR X8, [X23 + 0x28]
	0x037DD510 LDR X0, [X20 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TrackedPoseDriver.UnbindPosition, X0
	005 Move X0, X19
	006 Call TrackedPoseDriver.UnbindRotation, X0
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call TrackedPoseDriver.UnbindTrackingState, X0
	011 Return 

Method: System.Void BindPosition()

Disassembly:
	0x037DCBC4 ADRP X0, 0x968000
	0x037DCBC8 LDR X0, [X0 + 0xF90]
	0x037DCBCC BL 0x1C16CF4
	0x037DCBD0 MOVZ W8, 0x1
	0x037DCBD4 STRB W8, [X20 + 0xDCD]
	0x037DCBD8 ADRP X8, 0x968000
	0x037DCBDC LDR X8, [X8 + 0xF90]
	0x037DCBE0 LDR X8, [X8]
	0x037DCBE4 LDR X8, [X8 + 0xB8]
	0x037DCBE8 LDR W9, [X8 + 0x4]
	0x037DCBEC LDR X8, [X19]
	0x037DCBF0 CMP W9, 0x4
	0x037DCBF4 B.NE 0x37DCC00
	0x037DCBF8 LDP X2, X1, [X8 + 0x1C8]
	0x037DCBFC B 0x37DCC04
	0x037DCC00 LDP X2, X1, [X8 + 0x1B8]
	0x037DCC04 MOV X0, X19
	0x037DCC08 LDP X20, X19, [X31 + 0x10]
	0x037DCC0C LDR X30, [X31], #0x20
	0x037DCC10 BR X2
	0x037DCC14 BL 0x1C16F20
	0x037DCC18 STP X30, X25, [X31 - 0x40]!
	0x037DCC1C STP X24, X23, [X31 + 0x10]
	0x037DCC20 STP X22, X21, [X31 + 0x20]
	0x037DCC24 STP X20, X19, [X31 + 0x30]
	0x037DCC28 ADRP X20, 0xC05000
	0x037DCC2C LDRB W8, [X20 + 0x2BC]
	0x037DCC30 MOV X19, X0
	0x037DCC34 TBNZ X8, 0x0, 0x37DCC4C
	0x037DCC38 ADRP X0, 0x93F000
	0x037DCC3C LDR X0, [X0 + 0x70]
	0x037DCC40 BL 0x1C16CF4
	0x037DCC44 MOVZ W8, 0x1
	0x037DCC48 STRB W8, [X20 + 0x2BC]
	0x037DCC4C ADD X0, X19, 0x60
	0x037DCC50 MOV X1, X31
	0x037DCC54 BL 0x3745120
	0x037DCC58 CBZ X0, 0x37DCD08
	0x037DCC5C MOV X1, X31
	0x037DCC60 MOV X20, X0
	0x037DCC64 BL 0x373485C
	0x037DCC68 TBZ X0, 0x0, 0x37DCD14
	0x037DCC6C LDR W8, [X20 + 0xB4]
	0x037DCC70 CBZ W8, 0x37DCD08
	0x037DCC74 MOV X0, X20
	0x037DCC78 MOV X1, X31
	0x037DCC7C BL 0x37344FC
	0x037DCC80 CBZ X0, 0x37DCD48
	0x037DCC84 MOV X1, X31
	0x037DCC88 MOV X21, X0
	0x037DCC8C BL 0x37346C0
	0x037DCC90 LDR X21, [X21 + 0x60]
	0x037DCC94 CBZ X21, 0x37DCD18
	0x037DCC98 LDR W23, [X20 + 0xC0]
	0x037DCC9C MOV X0, X21
	0x037DCCA0 MOV X1, X31
	0x037DCCA4 BL 0x374A7C0
	0x037DCCA8 CMP W0, 0x1
	0x037DCCAC B.LT 0x37DCD18
	0x037DCCB0 MOV W8, W0
	0x037DCCB4 MOV X24, X31
	0x037DCCB8 UBFM X25, X8, 0x3B, 0x3A
	0x037DCCBC MOV X0, X21
	0x037DCCC0 MOV X1, X31
	0x037DCCC4 BL 0x374A7E8
	0x037DCCC8 ADD X22, X24, X0
	0x037DCCCC MOV X0, X22
	0x037DCCD0 MOV X1, X31
	0x037DCCD4 BL 0x374C89C
	0x037DCCD8 CMP W0, W23
	0x037DCCDC B.NE 0x37DCCF8
	0x037DCCE0 MOV X0, X22
	0x037DCCE4 MOV X1, X31
	0x037DCCE8 BL 0x374B788
	0x037DCCEC TBNZ X0, 0x0, 0x37DCCF8
	0x037DCCF0 LDRB W8, [X22]
	0x037DCCF4 CBNZ W8, 0x37DCD2C
	0x037DCCF8 ADD X24, X24, 0x20
	0x037DCCFC CMP X25, X24
	0x037DCD00 B.NE 0x37DCCBC
	0x037DCD04 B 0x37DCD18
	0x037DCD08 MOVZ W8, 0x3
	0x037DCD0C STR W8, [X19 + 0x94]
	0x037DCD10 B 0x37DCD18
	0x037DCD14 STR W31, [X19 + 0x94]
	0x037DCD18 LDP X20, X19, [X31 + 0x30]
	0x037DCD1C LDP X22, X21, [X31 + 0x20]
	0x037DCD20 LDP X24, X23, [X31 + 0x10]
	0x037DCD24 LDP X30, X25, [X31], #0x40
	0x037DCD28 RET
	0x037DCD2C ADRP X8, 0x93F000
	0x037DCD30 LDR X8, [X8 + 0x70]
	0x037DCD34 MOV X0, X20
	0x037DCD38 LDR X1, [X8]
	0x037DCD3C BL 0x21F5BCC
	0x037DCD40 STR W0, [X19 + 0x94]
	0x037DCD44 B 0x37DCD18
	0x037DCD48 BL 0x1C16F20
	0x037DCD4C LDR W8, [X0 + 0x24]
	0x037DCD50 CMP W8, 0x1
	0x037DCD54 B.HI 0x37DCD64
	0x037DCD58 LDR X8, [X0]
	0x037DCD5C LDP X2, X1, [X8 + 0x1D8]
	0x037DCD60 BR X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xC06000
	008 Move W8, [X20+687]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x91C000
	015 Move X0, [X0+984]
	016 Call 0x1C17CF4
	017 Move X0, 0x918000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x96D000
	021 Move X0, [X0+3456]
	022 Call 0x1C17CF4
	023 Move X0, 0x96D000
	024 Move X0, [X0+3464]
	025 Call 0x1C17CF4
	026 Move X0, 0x96D000
	027 Move X0, [X0+3472]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+687], W8
	031 Move W8, [X19+153]
	032 Compare W8, 0
	033 JumpIfEqual {41}
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X23, [X31+56]
	040 Return 
	041 Add X21, X19, 48
	042 Move X0, X21
	043 Move X1, X31
	044 Call InputActionProperty.get_action, X0
	045 Compare X0, 0
	046 JumpIfEqual {34}
	047 Move X23, 0x91C000
	048 Move X23, [X23+984]
	049 Move X20, X0
	050 Move X0, [X23]
	051 Call 0x1C17F10
	052 Move X8, 0x96D000
	053 Move X8, [X8+3464]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X22, X0
	057 Move X2, [X8]
	058 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	059 Move X0, X20
	060 Move X1, X22
	061 Move X2, X31
	062 Call InputAction.add_performed, X0, X1
	063 Move X0, [X23]
	064 Call 0x1C17F10
	065 Move X8, 0x96D000
	066 Move X8, [X8+3456]
	067 Move X1, X19
	068 Move X3, X31
	069 Move X22, X0
	070 Move X2, [X8]
	071 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	072 Move X0, X20
	073 Move X1, X22
	074 Move X2, X31
	075 Call InputAction.add_canceled, X0, X1
	076 Move W8, 1
	077 Move X0, X21
	078 Move X1, X31
	079 Move [X19+153], W8
	080 Call InputActionProperty.get_reference, X0
	081 Move X8, 0x918000
	082 Move X8, [X8+1432]
	083 Move X21, X0
	084 Move X8, [X8]
	085 Move W9, [X8+224]
	086 Compare W9, 0
	087 JumpIfNotEqual {90}
	088 Move X0, X8
	089 Call 0x1C17DFC
	090 Move X0, X21
	091 Move X1, X31
	092 Move X2, X31
	093 Call Object.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {34}
	098 Move X0, X19
	099 Move X1, X31
	100 Call Component.get_gameObject, X0
	101 Compare X0, 0
	102 JumpIfEqual {124}
	103 Move X1, X31
	104 Call Object.get_name, X0
	105 Move X8, 0x96D000
	106 Move X8, [X8+3472]
	107 Move X2, X31
	108 Move X1, [X8]
	109 Call String.Concat, X0, X1
	110 Move X1, X0
	111 Move X0, X20
	112 Move X2, X31
	113 Call InputActionSetupExtensions.Rename, X0, X1
	114 Move X0, X20
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X22, [X31+16]
	118 Move X21, [X31+24]
	119 Move X1, X31
	120 Move X30, [X31+48]
	121 Move X23, [X31+56]
	122 Call InputAction.Enable, X0
	123 Return 
	124 Call 0x1C17F20

Method: System.Void BindRotation()

Disassembly:
	0x037DCF7C ADD X0, X31, 0x18
	0x037DCF80 MOV X2, X31
	0x037DCF84 STP X31, X31, [X31 + 0x18]
	0x037DCF88 STR X31, [X31 + 0x28]
	0x037DCF8C BL 0x3745288
	0x037DCF90 LDUR V0, [X31 + 0x18]
	0x037DCF94 LDR X8, [X31 + 0x28]
	0x037DCF98 ADD X1, X31, 0x0
	0x037DCF9C MOV X0, X19
	0x037DCFA0 STR V0, [X31]
	0x037DCFA4 STR X8, [X31 + 0x10]
	0x037DCFA8 BL 0x37DBD78
	0x037DCFAC LDP X30, X19, [X31 + 0x30]
	0x037DCFB0 ADD X31, X31, 0x40
	0x037DCFB4 RET
	0x037DCFB8 RET
	0x037DCFBC SUB X31, X31, 0x30
	0x037DCFC0 STP X30, X19, [X31 + 0x20]
	0x037DCFC4 LDR X8, [X0 + 0x40]
	0x037DCFC8 MOV X19, X0
	0x037DCFCC CBNZ X8, 0x37DD004
	0x037DCFD0 LDR X8, [X19 + 0x38]
	0x037DCFD4 CBNZ X8, 0x37DD004
	0x037DCFD8 LDR X1, [X19 + 0xA0]
	0x037DCFDC CBZ X1, 0x37DD004
	0x037DCFE0 ADD X0, X31, 0x8
	0x037DCFE4 MOV X2, X31
	0x037DCFE8 STP X31, X31, [X31 + 0x8]
	0x037DCFEC STR X31, [X31 + 0x18]
	0x037DCFF0 BL 0x3745288
	0x037DCFF4 LDR X8, [X31 + 0x18]
	0x037DCFF8 LDUR V0, [X31 + 0x8]
	0x037DCFFC STR X8, [X19 + 0x40]
	0x037DD000 STR V0, [X19 + 0x3]
	0x037DD004 LDR X8, [X19 + 0x58]
	0x037DD008 CBNZ X8, 0x37DD040
	0x037DD00C LDR X8, [X19 + 0x50]
	0x037DD010 CBNZ X8, 0x37DD040
	0x037DD014 LDR X1, [X19 + 0xA8]
	0x037DD018 CBZ X1, 0x37DD040
	0x037DD01C ADD X0, X31, 0x8
	0x037DD020 MOV X2, X31
	0x037DD024 STP X31, X31, [X31 + 0x8]
	0x037DD028 STR X31, [X31 + 0x18]
	0x037DD02C BL 0x3745288
	0x037DD030 LDR X8, [X31 + 0x18]
	0x037DD034 LDUR V0, [X31 + 0x8]
	0x037DD038 STR X8, [X19 + 0x58]
	0x037DD03C STUR V0, [X19 + 0x48]
	0x037DD040 LDP X30, X19, [X31 + 0x20]
	0x037DD044 ADD X31, X31, 0x30
	0x037DD048 RET
	0x037DD04C STR X30, [X31 - 0x20]!
	0x037DD050 STP X20, X19, [X31 + 0x10]
	0x037DD054 ADRP X20, 0xBFB000
	0x037DD058 LDRB W8, [X20 + 0x783]
	0x037DD05C MOV X19, X0
	0x037DD060 CBNZ W8, 0x37DD078
	0x037DD064 ADRP X0, 0x916000
	0x037DD068 LDR X0, [X0 + 0x5A0]
	0x037DD06C BL 0x1C16CF4
	0x037DD070 MOVZ W8, 0x1
	0x037DD074 STRB W8, [X20 + 0x783]
	0x037DD078 ADRP X8, 0x916000
	0x037DD07C LDR X8, [X8 + 0x5A0]
	0x037DD080 ADRP X20, 0xBFB000
	0x037DD084 LDR X8, [X8]
	0x037DD088 LDR X8, [X8 + 0xB8]
	0x037DD08C LDR V0, [X8]
	0x037DD090 LDR V1, [X8 + 0x8]
	0x037DD094 STR D0, [X19 + 0x78]
	0x037DD098 STR S1, [X19 + 0x80]
	0x037DD09C LDRB W8, [X20 + 0x793]
	0x037DD0A0 CBNZ W8, 0x37DD0B8
	0x037DD0A4 ADRP X0, 0x917000
	0x037DD0A8 LDR X0, [X0 + 0x5A8]
	0x037DD0AC BL 0x1C16CF4
	0x037DD0B0 MOVZ W8, 0x1
	0x037DD0B4 STRB W8, [X20 + 0x793]
	0x037DD0B8 ADRP X8, 0x917000
	0x037DD0BC LDR X8, [X8 + 0x5A8]
	0x037DD0C0 MOVZ W9, 0x1
	0x037DD0C4 MOV X0, X19
	0x037DD0C8 MOV X1, X31
	0x037DD0CC LDR X8, [X8]
	0x037DD0D0 LDR X8, [X8 + 0xB8]
	0x037DD0D4 LDR V0, [X8]
	0x037DD0D8 MOVZ W8, 0x3
	0x037DD0DC STR W8, [X19 + 0x94]
	0x037DD0E0 STRB W9, [X19 + 0x9B]
	0x037DD0E4 STUR V0, [X19 + 0x84]
	0x037DD0E8 LDP X20, X19, [X31 + 0x10]
	0x037DD0EC LDR X30, [X31], #0x20
	0x037DD0F0 B 0x3C36C30
	0x037DD0F4 LDR W9, [X0 + 0x10]
	0x037DD0F8 CMP W9, 0x9
	0x037DD0FC B.HI 0x37DD124
	0x037DD100 ADRP X10, 0xFFFFFFFFFD3BA000
	0x037DD104 ADD X10, X10, 0x980
	0x037DD108 ADR X11, 0x18
	0x037DD10C LDRB W12, [X10, X9, LSL]
	0x037DD110 ADD X11, X11, X12, 0x2, LSL
	0x037DD114 MOV X8, X0
	0x037DD118 MOVZ W0, 0x4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xC06000
	008 Move W8, [X20+688]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x91C000
	015 Move X0, [X0+984]
	016 Call 0x1C17CF4
	017 Move X0, 0x918000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x96D000
	021 Move X0, [X0+3480]
	022 Call 0x1C17CF4
	023 Move X0, 0x96D000
	024 Move X0, [X0+3488]
	025 Call 0x1C17CF4
	026 Move X0, 0x96D000
	027 Move X0, [X0+3496]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+688], W8
	031 Move W8, [X19+152]
	032 Compare W8, 0
	033 JumpIfEqual {41}
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X23, [X31+56]
	040 Return 
	041 Add X21, X19, 72
	042 Move X0, X21
	043 Move X1, X31
	044 Call InputActionProperty.get_action, X0
	045 Compare X0, 0
	046 JumpIfEqual {34}
	047 Move X23, 0x91B000
	048 Move X23, [X23+984]
	049 Move X20, X0
	050 Move X0, [X23]
	051 Call 0x1C17F10
	052 Move X8, 0x96C000
	053 Move X8, [X8+3488]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X22, X0
	057 Move X2, [X8]
	058 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	059 Move X0, X20
	060 Move X1, X22
	061 Move X2, X31
	062 Call InputAction.add_performed, X0, X1
	063 Move X0, [X23]
	064 Call 0x1C17F10
	065 Move X8, 0x96C000
	066 Move X8, [X8+3480]
	067 Move X1, X19
	068 Move X3, X31
	069 Move X22, X0
	070 Move X2, [X8]
	071 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	072 Move X0, X20
	073 Move X1, X22
	074 Move X2, X31
	075 Call InputAction.add_canceled, X0, X1
	076 Move W8, 1
	077 Move X0, X21
	078 Move X1, X31
	079 Move [X19+152], W8
	080 Call InputActionProperty.get_reference, X0
	081 Move X8, 0x917000
	082 Move X8, [X8+1432]
	083 Move X21, X0
	084 Move X8, [X8]
	085 Move W9, [X8+224]
	086 Compare W9, 0
	087 JumpIfNotEqual {90}
	088 Move X0, X8
	089 Call 0x1C17DFC
	090 Move X0, X21
	091 Move X1, X31
	092 Move X2, X31
	093 Call Object.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {34}
	098 Move X0, X19
	099 Move X1, X31
	100 Call Component.get_gameObject, X0
	101 Compare X0, 0
	102 JumpIfEqual {124}
	103 Move X1, X31
	104 Call Object.get_name, X0
	105 Move X8, 0x96C000
	106 Move X8, [X8+3496]
	107 Move X2, X31
	108 Move X1, [X8]
	109 Call String.Concat, X0, X1
	110 Move X1, X0
	111 Move X0, X20
	112 Move X2, X31
	113 Call InputActionSetupExtensions.Rename, X0, X1
	114 Move X0, X20
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X22, [X31+16]
	118 Move X21, [X31+24]
	119 Move X1, X31
	120 Move X30, [X31+48]
	121 Move X23, [X31+56]
	122 Call InputAction.Enable, X0
	123 Return 
	124 Call 0x1C17F20

Method: System.Void BindTrackingState()

Disassembly:
	0x037DD334 BL 0x1C16CF4
	0x037DD338 ADRP X0, 0x96B000
	0x037DD33C LDR X0, [X0 + 0xE20]
	0x037DD340 BL 0x1C16CF4
	0x037DD344 ADRP X0, 0x923000
	0x037DD348 LDR X0, [X0 + 0x998]
	0x037DD34C BL 0x1C16CF4
	0x037DD350 ADRP X0, 0x96B000
	0x037DD354 LDR X0, [X0 + 0xE08]
	0x037DD358 BL 0x1C16CF4
	0x037DD35C ADRP X0, 0x96B000
	0x037DD360 LDR X0, [X0 + 0xE28]
	0x037DD364 BL 0x1C16CF4
	0x037DD368 ADRP X0, 0x96B000
	0x037DD36C LDR X0, [X0 + 0xE30]
	0x037DD370 BL 0x1C16CF4
	0x037DD374 ADRP X0, 0x96B000
	0x037DD378 LDR X0, [X0 + 0xE38]
	0x037DD37C BL 0x1C16CF4
	0x037DD380 MOVZ W8, 0x1
	0x037DD384 STRB W8, [X21 + 0x2BF]
	0x037DD388 LDR X0, [X23]
	0x037DD38C BL 0x1C16F10
	0x037DD390 MOV X1, X31
	0x037DD394 MOV X21, X0
	0x037DD398 BL 0x33BDD8C
	0x037DD39C LDR X0, [X20]
	0x037DD3A0 LDR X1, [X22]
	0x037DD3A4 MOV X2, X31
	0x037DD3A8 BL 0x3226EF8
	0x037DD3AC TBZ X0, 0x0, 0x37DD3D0
	0x037DD3B0 ADRP X8, 0x96B000
	0x037DD3B4 LDR X8, [X8 + 0xE28]
	0x037DD3B8 LDR X0, [X20]
	0x037DD3BC MOV X2, X31
	0x037DD3C0 LDR X1, [X8]
	0x037DD3C4 BL 0x3226EF8
	0x037DD3C8 MOV X23, X31
	0x037DD3CC TBNZ X0, 0x0, 0x37DD644
	0x037DD3D0 LDR X0, [X20 + 0x30]
	0x037DD3D4 MOV X1, X31
	0x037DD3D8 BL 0x32277A8
	0x037DD3DC MOV X23, X31
	0x037DD3E0 TBNZ X0, 0x0, 0x37DD644
	0x037DD3E4 LDR X0, [X20 + 0x30]
	0x037DD3E8 BL 0x37DB7F8
	0x037DD3EC MOV X22, X0
	0x037DD3F0 CBZ X0, 0x37DD640
	0x037DD3F4 MOV X0, X19
	0x037DD3F8 MOV X1, X31
	0x037DD3FC BL 0x32277A8
	0x037DD400 TBZ X0, 0x0, 0x37DD434
	0x037DD404 LDR W8, [X22 + 0x28]
	0x037DD408 TBNZ X8, 0x0, 0x37DD428
	0x037DD40C ADRP X9, 0x96B000
	0x037DD410 LDR X9, [X9 + 0xE38]
	0x037DD414 MOVZ W10, 0x44
	0x037DD418 BICS W31, W10, W8, 0x0
	0x037DD41C LDR X9, [X9]
	0x037DD420 CSEL X19, X9, X19, EQ
	0x037DD424 B 0x37DD434
	0x037DD428 ADRP X8, 0x96B000
	0x037DD42C LDR X8, [X8 + 0xE30]
	0x037DD430 LDR X19, [X8]
	0x037DD434 LDR X0, [X20 + 0x10]
	0x037DD438 MOV X1, X31
	0x037DD43C BL 0x32277A8
	0x037DD440 TBZ X0, 0x0, 0x37DD4A0
	0x037DD444 ADRP X8, 0x96B000
	0x037DD448 LDR X8, [X8 + 0xE20]
	0x037DD44C LDR X23, [X20]
	0x037DD450 LDR X0, [X8]
	0x037DD454 LDR W8, [X0 + 0xE0]
	0x037DD458 CBNZ W8, 0x37DD460
	0x037DD45C BL 0x1C16DFC
	0x037DD460 MOV X0, X23
	0x037DD464 MOV W1, W31
	0x037DD468 BL 0x37DD16C
	0x037DD46C LDR X8, [X20 + 0x18]
	0x037DD470 MOV X23, X0
	0x037DD474 MOV W1, W31
	0x037DD478 MOV X0, X8
	0x037DD47C BL 0x37DD16C
	0x037DD480 ADRP X8, 0x923000
	0x037DD484 LDR X8, [X8 + 0x998]
	0x037DD488 MOV X2, X0
	0x037DD48C MOV X0, X23
	0x037DD490 MOV X3, X31
	0x037DD494 LDR X1, [X8]
	0x037DD498 BL 0x32274B8
	0x037DD49C B 0x37DD560
	0x037DD4A0 ADRP X8, 0x916000
	0x037DD4A4 LDR X8, [X8 + 0xAC8]
	0x037DD4A8 MOVZ W1, 0x5
	0x037DD4AC LDR X0, [X8]
	0x037DD4B0 BL 0x1C16D6C
	0x037DD4B4 ADRP X8, 0x96B000
	0x037DD4B8 LDR X8, [X8 + 0xE20]
	0x037DD4BC LDR X24, [X20]
	0x037DD4C0 MOV X23, X0
	0x037DD4C4 LDR X8, [X8]
	0x037DD4C8 LDR W9, [X8 + 0xE0]
	0x037DD4CC CBNZ W9, 0x37DD4D8
	0x037DD4D0 MOV X0, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xC05000
	008 Move W8, [X20+689]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x91B000
	015 Move X0, [X0+984]
	016 Call 0x1C17CF4
	017 Move X0, 0x917000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x96C000
	021 Move X0, [X0+3504]
	022 Call 0x1C17CF4
	023 Move X0, 0x96C000
	024 Move X0, [X0+3512]
	025 Call 0x1C17CF4
	026 Move X0, 0x96C000
	027 Move X0, [X0+3520]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+689], W8
	031 Move W8, [X19+154]
	032 Compare W8, 0
	033 JumpIfEqual {41}
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X23, [X31+56]
	040 Return 
	041 Add X21, X19, 96
	042 Move X0, X21
	043 Move X1, X31
	044 Call InputActionProperty.get_action, X0
	045 Compare X0, 0
	046 JumpIfEqual {34}
	047 Move X23, 0x91B000
	048 Move X23, [X23+984]
	049 Move X20, X0
	050 Move X0, [X23]
	051 Call 0x1C17F10
	052 Move X8, 0x96C000
	053 Move X8, [X8+3512]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X22, X0
	057 Move X2, [X8]
	058 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	059 Move X0, X20
	060 Move X1, X22
	061 Move X2, X31
	062 Call InputAction.add_performed, X0, X1
	063 Move X0, [X23]
	064 Call 0x1C17F10
	065 Move X8, 0x96C000
	066 Move X8, [X8+3504]
	067 Move X1, X19
	068 Move X3, X31
	069 Move X22, X0
	070 Move X2, [X8]
	071 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	072 Move X0, X20
	073 Move X1, X22
	074 Move X2, X31
	075 Call InputAction.add_canceled, X0, X1
	076 Move W8, 1
	077 Move X0, X21
	078 Move X1, X31
	079 Move [X19+154], W8
	080 Call InputActionProperty.get_reference, X0
	081 Move X8, 0x917000
	082 Move X8, [X8+1432]
	083 Move X21, X0
	084 Move X8, [X8]
	085 Move W9, [X8+224]
	086 Compare W9, 0
	087 JumpIfNotEqual {90}
	088 Move X0, X8
	089 Call 0x1C17DFC
	090 Move X0, X21
	091 Move X1, X31
	092 Move X2, X31
	093 Call Object.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {34}
	098 Move X0, X19
	099 Move X1, X31
	100 Call Component.get_gameObject, X0
	101 Compare X0, 0
	102 JumpIfEqual {124}
	103 Move X1, X31
	104 Call Object.get_name, X0
	105 Move X8, 0x96C000
	106 Move X8, [X8+3520]
	107 Move X2, X31
	108 Move X1, [X8]
	109 Call String.Concat, X0, X1
	110 Move X1, X0
	111 Move X0, X20
	112 Move X2, X31
	113 Call InputActionSetupExtensions.Rename, X0, X1
	114 Move X0, X20
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X22, [X31+16]
	118 Move X21, [X31+24]
	119 Move X1, X31
	120 Move X30, [X31+48]
	121 Move X23, [X31+56]
	122 Call InputAction.Enable, X0
	123 Return 
	124 Call 0x1C17F20

Method: System.Void UnbindPosition()

Disassembly:
	0x037DCA80 BL 0x37DC4F4
	0x037DCA84 LDR X0, [X22]
	0x037DCA88 BL 0x1C16F10
	0x037DCA8C LDR X2, [X20]
	0x037DCA90 MOV X1, X19
	0x037DCA94 MOV X3, X31
	0x037DCA98 MOV X20, X0
	0x037DCA9C BL 0x3314368
	0x037DCAA0 LDR X0, [X21]
	0x037DCAA4 LDR W8, [X0 + 0xE0]
	0x037DCAA8 CBNZ W8, 0x37DCAB0
	0x037DCAAC BL 0x1C16DFC
	0x037DCAB0 MOV X0, X20
	0x037DCAB4 LDP X20, X19, [X31 + 0x20]
	0x037DCAB8 LDP X22, X21, [X31 + 0x10]
	0x037DCABC MOV X1, X31
	0x037DCAC0 LDP X30, X23, [X31], #0x30
	0x037DCAC4 B 0x377058C
	0x037DCAC8 STR X30, [X31 - 0x10]!
	0x037DCACC ADD X1, X31, 0x8
	0x037DCAD0 STR X31, [X31 + 0x8]
	0x037DCAD4 BL 0x37DC8E0
	0x037DCAD8 TBZ X0, 0x0, 0x37DCAEC
	0x037DCADC LDR X0, [X31 + 0x8]
	0x037DCAE0 MOV W1, W31
	0x037DCAE4 MOV X2, X31
	0x037DCAE8 BL 0x3E625A8
	0x037DCAEC LDR X30, [X31], #0x10
	0x037DCAF0 RET
	0x037DCAF4 STR X30, [X31 - 0x20]!
	0x037DCAF8 STP X20, X19, [X31 + 0x10]
	0x037DCAFC ADRP X20, 0xC05000
	0x037DCB00 LDRB W8, [X20 + 0x2BB]
	0x037DCB04 MOV X19, X0
	0x037DCB08 TBNZ X8, 0x0, 0x37DCB2C
	0x037DCB0C ADRP X0, 0x96C000
	0x037DCB10 LDR X0, [X0 + 0xDF0]
	0x037DCB14 BL 0x1C16CF4
	0x037DCB18 ADRP X0, 0x96C000
	0x037DCB1C LDR X0, [X0 + 0xDF8]
	0x037DCB20 BL 0x1C16CF4
	0x037DCB24 MOVZ W8, 0x1
	0x037DCB28 STRB W8, [X20 + 0x2BB]
	0x037DCB2C LDRB W8, [X19 + 0x9B]
	0x037DCB30 CBZ W8, 0x37DCBB8
	0x037DCB34 ADD X20, X19, 0x30
	0x037DCB38 MOV X0, X20
	0x037DCB3C MOV X1, X31
	0x037DCB40 BL 0x3745120
	0x037DCB44 CBZ X0, 0x37DCB70
	0x037DCB48 MOV X0, X20
	0x037DCB4C MOV X1, X31
	0x037DCB50 BL 0x3745120
	0x037DCB54 CBZ X0, 0x37DCC14
	0x037DCB58 ADRP X8, 0x96C000
	0x037DCB5C LDR X8, [X8 + 0xDF8]
	0x037DCB60 LDR X1, [X8]
	0x037DCB64 BL 0x21F5F3C
	0x037DCB68 STP S0, S1, [X19 + 0x78]
	0x037DCB6C STR S2, [X19 + 0x80]
	0x037DCB70 ADD X20, X19, 0x48
	0x037DCB74 MOV X0, X20
	0x037DCB78 MOV X1, X31
	0x037DCB7C BL 0x3745120
	0x037DCB80 CBZ X0, 0x37DCBAC
	0x037DCB84 MOV X0, X20
	0x037DCB88 MOV X1, X31
	0x037DCB8C BL 0x3745120
	0x037DCB90 CBZ X0, 0x37DCC14
	0x037DCB94 ADRP X8, 0x96C000
	0x037DCB98 LDR X8, [X8 + 0xDF0]
	0x037DCB9C LDR X1, [X8]
	0x037DCBA0 BL 0x21F5CA8
	0x037DCBA4 STP S0, S1, [X19 + 0x84]
	0x037DCBA8 STP S2, S3, [X19 + 0x8C]
	0x037DCBAC MOV X0, X19
	0x037DCBB0 BL 0x37DCC18
	0x037DCBB4 STRB W31, [X19 + 0x9B]
	0x037DCBB8 ADRP X20, 0xC04000
	0x037DCBBC LDRB W8, [X20 + 0xDCD]
	0x037DCBC0 CBNZ W8, 0x37DCBD8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC06000
	007 Move W8, [X20+690]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x91C000
	014 Move X0, [X0+984]
	015 Call 0x1C17CF4
	016 Move X0, 0x918000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x96D000
	020 Move X0, [X0+3456]
	021 Call 0x1C17CF4
	022 Move X0, 0x96D000
	023 Move X0, [X0+3464]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+690], W8
	027 Move W8, [X19+153]
	028 Compare W8, 0
	029 JumpIfEqual {89}
	030 Add X21, X19, 48
	031 Move X0, X21
	032 Move X1, X31
	033 Call InputActionProperty.get_action, X0
	034 Compare X0, 0
	035 JumpIfEqual {89}
	036 Move X20, X0
	037 Move X0, X21
	038 Move X1, X31
	039 Call InputActionProperty.get_reference, X0
	040 Move X8, 0x918000
	041 Move X8, [X8+1432]
	042 Move X21, X0
	043 Move X8, [X8]
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {60}
	057 Move X0, X20
	058 Move X1, X31
	059 Call InputAction.Disable, X0
	060 Move X22, 0x91C000
	061 Move X22, [X22+984]
	062 Move X0, [X22]
	063 Call 0x1C17F10
	064 Move X8, 0x96D000
	065 Move X8, [X8+3464]
	066 Move X1, X19
	067 Move X3, X31
	068 Move X21, X0
	069 Move X2, [X8]
	070 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	071 Move X0, X20
	072 Move X1, X21
	073 Move X2, X31
	074 Call InputAction.remove_performed, X0, X1
	075 Move X0, [X22]
	076 Call 0x1C17F10
	077 Move X8, 0x96D000
	078 Move X8, [X8+3456]
	079 Move X1, X19
	080 Move X3, X31
	081 Move X21, X0
	082 Move X2, [X8]
	083 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	084 Move X0, X20
	085 Move X1, X21
	086 Move X2, X31
	087 Call InputAction.remove_canceled, X0, X1
	088 Move [X19+153], W31
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Return 

Method: System.Void UnbindRotation()

Disassembly:
	0x037DCE38 MOV V2.16B, V8.16B
	0x037DCE3C MOV V4.16B, V13.16B
	0x037DCE40 MOV V5.16B, V12.16B
	0x037DCE44 MOV V6.16B, V11.16B
	0x037DCE48 LDP X20, X19, [X31 + 0x40]
	0x037DCE4C LDR X30, [X31 + 0x38]
	0x037DCE50 LDP D9, D8, [X31 + 0x28]
	0x037DCE54 LDP D11, D10, [X31 + 0x18]
	0x037DCE58 LDP D13, D12, [X31 + 0x8]
	0x037DCE5C MOV V3.16B, V14.16B
	0x037DCE60 MOV X1, X31
	0x037DCE64 LDR V14, [X31], #0x50
	0x037DCE68 B 0x3C400B4
	0x037DCE6C CBZ W9, 0x37DCEA0
	0x037DCE70 CMP W10, 0x1
	0x037DCE74 B.HI 0x37DCEA0
	0x037DCE78 MOV X0, X19
	0x037DCE7C MOV X1, X31
	0x037DCE80 BL 0x3C32E90
	0x037DCE84 CBZ X0, 0x37DCF0C
	0x037DCE88 MOV V0.16B, V14.16B
	0x037DCE8C MOV V1.16B, V13.16B
	0x037DCE90 MOV V2.16B, V12.16B
	0x037DCE94 MOV V3.16B, V11.16B
	0x037DCE98 MOV X1, X31
	0x037DCE9C BL 0x3C3F8B8
	0x037DCEA0 CBZ W20, 0x37DCEC0
	0x037DCEA4 LDP X20, X19, [X31 + 0x40]
	0x037DCEA8 LDR X30, [X31 + 0x38]
	0x037DCEAC LDP D9, D8, [X31 + 0x28]
	0x037DCEB0 LDP D11, D10, [X31 + 0x18]
	0x037DCEB4 LDP D13, D12, [X31 + 0x8]
	0x037DCEB8 LDR V14, [X31], #0x50
	0x037DCEBC RET
	0x037DCEC0 LDR W8, [X19 + 0x20]
	0x037DCEC4 ORR W8, W8, 0x2
	0x037DCEC8 CMP W8, 0x2
	0x037DCECC B.NE 0x37DCEA4
	0x037DCED0 MOV X0, X19
	0x037DCED4 MOV X1, X31
	0x037DCED8 BL 0x3C32E90
	0x037DCEDC CBZ X0, 0x37DCF0C
	0x037DCEE0 MOV V0.16B, V10.16B
	0x037DCEE4 MOV V1.16B, V9.16B
	0x037DCEE8 MOV V2.16B, V8.16B
	0x037DCEEC LDP X20, X19, [X31 + 0x40]
	0x037DCEF0 LDR X30, [X31 + 0x38]
	0x037DCEF4 LDP D9, D8, [X31 + 0x28]
	0x037DCEF8 LDP D11, D10, [X31 + 0x18]
	0x037DCEFC LDP D13, D12, [X31 + 0x8]
	0x037DCF00 MOV X1, X31
	0x037DCF04 LDR V14, [X31], #0x50
	0x037DCF08 B 0x3C3EC04
	0x037DCF0C BL 0x1C16F20
	0x037DCF10 ADD X0, X0, 0x30
	0x037DCF14 MOV X1, X31
	0x037DCF18 B 0x3745120
	0x037DCF1C SUB X31, X31, 0x40
	0x037DCF20 STP X30, X19, [X31 + 0x30]
	0x037DCF24 MOV X19, X0
	0x037DCF28 ADD X0, X31, 0x18
	0x037DCF2C MOV X2, X31
	0x037DCF30 STP X31, X31, [X31 + 0x18]
	0x037DCF34 STR X31, [X31 + 0x28]
	0x037DCF38 BL 0x3745288
	0x037DCF3C LDUR V0, [X31 + 0x18]
	0x037DCF40 LDR X8, [X31 + 0x28]
	0x037DCF44 ADD X1, X31, 0x0
	0x037DCF48 MOV X0, X19
	0x037DCF4C STR V0, [X31]
	0x037DCF50 STR X8, [X31 + 0x10]
	0x037DCF54 BL 0x37DB9C0
	0x037DCF58 LDP X30, X19, [X31 + 0x30]
	0x037DCF5C ADD X31, X31, 0x40
	0x037DCF60 RET
	0x037DCF64 ADD X0, X0, 0x48
	0x037DCF68 MOV X1, X31
	0x037DCF6C B 0x3745120
	0x037DCF70 SUB X31, X31, 0x40
	0x037DCF74 STP X30, X19, [X31 + 0x30]
	0x037DCF78 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC06000
	007 Move W8, [X20+691]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x91C000
	014 Move X0, [X0+984]
	015 Call 0x1C17CF4
	016 Move X0, 0x918000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x96D000
	020 Move X0, [X0+3480]
	021 Call 0x1C17CF4
	022 Move X0, 0x96D000
	023 Move X0, [X0+3488]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+691], W8
	027 Move W8, [X19+152]
	028 Compare W8, 0
	029 JumpIfEqual {89}
	030 Add X21, X19, 72
	031 Move X0, X21
	032 Move X1, X31
	033 Call InputActionProperty.get_action, X0
	034 Compare X0, 0
	035 JumpIfEqual {89}
	036 Move X20, X0
	037 Move X0, X21
	038 Move X1, X31
	039 Call InputActionProperty.get_reference, X0
	040 Move X8, 0x918000
	041 Move X8, [X8+1432]
	042 Move X21, X0
	043 Move X8, [X8]
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {60}
	057 Move X0, X20
	058 Move X1, X31
	059 Call InputAction.Disable, X0
	060 Move X22, 0x91C000
	061 Move X22, [X22+984]
	062 Move X0, [X22]
	063 Call 0x1C17F10
	064 Move X8, 0x96D000
	065 Move X8, [X8+3488]
	066 Move X1, X19
	067 Move X3, X31
	068 Move X21, X0
	069 Move X2, [X8]
	070 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	071 Move X0, X20
	072 Move X1, X21
	073 Move X2, X31
	074 Call InputAction.remove_performed, X0, X1
	075 Move X0, [X22]
	076 Call 0x1C17F10
	077 Move X8, 0x96D000
	078 Move X8, [X8+3480]
	079 Move X1, X19
	080 Move X3, X31
	081 Move X21, X0
	082 Move X2, [X8]
	083 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	084 Move X0, X20
	085 Move X1, X21
	086 Move X2, X31
	087 Call InputAction.remove_canceled, X0, X1
	088 Move [X19+152], W31
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Return 

Method: System.Void UnbindTrackingState()

Disassembly:
	0x037DD1F0 MOV W1, W23
	0x037DD1F4 MOV X2, X31
	0x037DD1F8 BL 0x3222A1C
	0x037DD1FC LDR X8, [X25]
	0x037DD200 MOV W24, W0
	0x037DD204 LDR W9, [X8 + 0xE0]
	0x037DD208 CBNZ W9, 0x37DD214
	0x037DD20C MOV X0, X8
	0x037DD210 BL 0x1C16DFC
	0x037DD214 MOV W0, W24
	0x037DD218 MOV X1, X31
	0x037DD21C BL 0x331A99C
	0x037DD220 TBNZ X0, 0x0, 0x37DD280
	0x037DD224 LDR X0, [X25]
	0x037DD228 LDR W8, [X0 + 0xE0]
	0x037DD22C CBNZ W8, 0x37DD234
	0x037DD230 BL 0x1C16DFC
	0x037DD234 MOV W0, W24
	0x037DD238 MOV X1, X31
	0x037DD23C BL 0x331AA58
	0x037DD240 TBNZ X0, 0x0, 0x37DD280
	0x037DD244 LDR X0, [X25]
	0x037DD248 LDR W8, [X0 + 0xE0]
	0x037DD24C CBNZ W8, 0x37DD254
	0x037DD250 BL 0x1C16DFC
	0x037DD254 MOV W0, W24
	0x037DD258 MOV X1, X31
	0x037DD25C BL 0x33141B4
	0x037DD260 AND W8, W24, 0xFFFF
	0x037DD264 CMP W8, 0x2F
	0x037DD268 CSET W9, EQ
	0x037DD26C AND W9, W9, W19, 0x0
	0x037DD270 TBNZ X9, 0x0, 0x37DD280
	0x037DD274 CMP W8, 0x5F
	0x037DD278 B.EQ 0x37DD280
	0x037DD27C TBZ X0, 0x0, 0x37DD294
	0x037DD280 CBZ X21, 0x37DD2C4
	0x037DD284 MOV X0, X21
	0x037DD288 MOV W1, W24
	0x037DD28C MOV X2, X31
	0x037DD290 BL 0x3233D30
	0x037DD294 ADD W23, W23, 0x1
	0x037DD298 CMP W22, W23
	0x037DD29C B.NE 0x37DD1EC
	0x037DD2A0 CBZ X21, 0x37DD2C4
	0x037DD2A4 LDR X8, [X21]
	0x037DD2A8 MOV X0, X21
	0x037DD2AC LDP X20, X19, [X31 + 0x30]
	0x037DD2B0 LDP X22, X21, [X31 + 0x20]
	0x037DD2B4 LDP X2, X1, [X8 + 0x168]
	0x037DD2B8 LDP X24, X23, [X31 + 0x10]
	0x037DD2BC LDP X30, X25, [X31], #0x40
	0x037DD2C0 BR X2
	0x037DD2C4 BL 0x1C16F20
	0x037DD2C8 STR X30, [X31 - 0x40]!
	0x037DD2CC STP X24, X23, [X31 + 0x10]
	0x037DD2D0 STP X22, X21, [X31 + 0x20]
	0x037DD2D4 STP X20, X19, [X31 + 0x30]
	0x037DD2D8 ADRP X21, 0xC04000
	0x037DD2DC ADRP X23, 0x96B000
	0x037DD2E0 ADRP X22, 0x96B000
	0x037DD2E4 LDRB W8, [X21 + 0x2BF]
	0x037DD2E8 LDR X23, [X23 + 0xE00]
	0x037DD2EC LDR X22, [X22 + 0xE08]
	0x037DD2F0 MOV X19, X1
	0x037DD2F4 MOV X20, X0
	0x037DD2F8 TBNZ X8, 0x0, 0x37DD388
	0x037DD2FC ADRP X0, 0x96B000
	0x037DD300 LDR X0, [X0 + 0xE10]
	0x037DD304 BL 0x1C16CF4
	0x037DD308 ADRP X0, 0x93E000
	0x037DD30C LDR X0, [X0 + 0x270]
	0x037DD310 BL 0x1C16CF4
	0x037DD314 ADRP X0, 0x916000
	0x037DD318 LDR X0, [X0 + 0xAC8]
	0x037DD31C BL 0x1C16CF4
	0x037DD320 ADRP X0, 0x96B000
	0x037DD324 LDR X0, [X0 + 0xE18]
	0x037DD328 BL 0x1C16CF4
	0x037DD32C ADRP X0, 0x96B000
	0x037DD330 LDR X0, [X0 + 0xE00]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC05000
	007 Move W8, [X20+692]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x91B000
	014 Move X0, [X0+984]
	015 Call 0x1C17CF4
	016 Move X0, 0x917000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x96C000
	020 Move X0, [X0+3504]
	021 Call 0x1C17CF4
	022 Move X0, 0x96C000
	023 Move X0, [X0+3512]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+692], W8
	027 Move W8, [X19+154]
	028 Compare W8, 0
	029 JumpIfEqual {89}
	030 Add X21, X19, 96
	031 Move X0, X21
	032 Move X1, X31
	033 Call InputActionProperty.get_action, X0
	034 Compare X0, 0
	035 JumpIfEqual {89}
	036 Move X20, X0
	037 Move X0, X21
	038 Move X1, X31
	039 Call InputActionProperty.get_reference, X0
	040 Move X8, 0x917000
	041 Move X8, [X8+1432]
	042 Move X21, X0
	043 Move X8, [X8]
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {60}
	057 Move X0, X20
	058 Move X1, X31
	059 Call InputAction.Disable, X0
	060 Move X22, 0x91B000
	061 Move X22, [X22+984]
	062 Move X0, [X22]
	063 Call 0x1C17F10
	064 Move X8, 0x96C000
	065 Move X8, [X8+3512]
	066 Move X1, X19
	067 Move X3, X31
	068 Move X21, X0
	069 Move X2, [X8]
	070 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	071 Move X0, X20
	072 Move X1, X21
	073 Move X2, X31
	074 Call InputAction.remove_performed, X0, X1
	075 Move X0, [X22]
	076 Call 0x1C17F10
	077 Move X8, 0x96C000
	078 Move X8, [X8+3504]
	079 Move X1, X19
	080 Move X3, X31
	081 Move X21, X0
	082 Move X2, [X8]
	083 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	084 Move X0, X20
	085 Move X1, X21
	086 Move X2, X31
	087 Call InputAction.remove_canceled, X0, X1
	088 Move [X19+154], W31
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Return 

Method: System.Void OnPositionPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037DD514 BL 0x37DD16C
	0x037DD518 LDR W8, [X23 + 0x18]
	0x037DD51C CMP W8, 0x2
	0x037DD520 B.LS 0x37DD604
	0x037DD524 CMP W8, 0x3
	0x037DD528 STR X0, [X23 + 0x30]
	0x037DD52C B.EQ 0x37DD604
	0x037DD530 LDR X8, [X24]
	0x037DD534 MOV W1, W31
	0x037DD538 STR X8, [X23 + 0x38]
	0x037DD53C LDR X0, [X20 + 0x18]
	0x037DD540 BL 0x37DD16C
	0x037DD544 LDR W8, [X23 + 0x18]
	0x037DD548 CMP W8, 0x4
	0x037DD54C B.LS 0x37DD604
	0x037DD550 STR X0, [X23 + 0x40]
	0x037DD554 MOV X0, X23
	0x037DD558 MOV X1, X31
	0x037DD55C BL 0x32278CC
	0x037DD560 ADRP X8, 0x96B000
	0x037DD564 LDR X8, [X8 + 0xE20]
	0x037DD568 MOV X23, X0
	0x037DD56C LDR X0, [X8]
	0x037DD570 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC05000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x96C000
	010 Move W8, [X20+693]
	011 Move X21, [X21+3528]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x96C000
	018 Move X0, [X0+3528]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+693], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+120], S0
	026 Move [X19+128], S1
	027 Move [X19+128], S2
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return 

Method: System.Void OnPositionCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037DD574 MOV X1, X31
	0x037DD578 MOV X24, X0
	0x037DD57C BL 0x33BDD8C
	0x037DD580 CBZ X24, 0x37DD600
	0x037DD584 STR X22, [X24 + 0x20]
	0x037DD588 STR X19, [X24 + 0x10]
	0x037DD58C LDR X8, [X20]
	0x037DD590 STR X8, [X24 + 0x18]
	0x037DD594 CBZ X21, 0x37DD600
	0x037DD598 STR X24, [X21 + 0x10]
	0x037DD59C ADRP X8, 0x96B000
	0x037DD5A0 LDR X8, [X8 + 0xE10]
	0x037DD5A4 LDR X0, [X8]
	0x037DD5A8 BL 0x1C16F10
	0x037DD5AC ADRP X8, 0x96B000
	0x037DD5B0 LDR X8, [X8 + 0xE18]
	0x037DD5B4 MOV X1, X21
	0x037DD5B8 MOV X3, X31
	0x037DD5BC MOV X20, X0
	0x037DD5C0 LDR X2, [X8]
	0x037DD5C4 BL 0x2D27AA8
	0x037DD5C8 ADRP X8, 0x93E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBFC000
	005 Move W8, [X20+1923]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x917000
	010 Move X0, [X0+1440]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1923], W8
	014 Move X8, 0x917000
	015 Move X8, [X8+1440]
	016 Move X8, [X8]
	017 Move X8, [X8+184]
	018 Move V0, [X8]
	019 Move V1, [X8+8]
	020 Move [X19+120], D0
	021 Move [X19+128], S1
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return 

Method: System.Void OnRotationPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037DD5CC LDR X8, [X8 + 0x270]
	0x037DD5D0 LDR X0, [X8]
	0x037DD5D4 LDR W8, [X0 + 0xE0]
	0x037DD5D8 CBNZ W8, 0x37DD5E0
	0x037DD5DC BL 0x1C16DFC
	0x037DD5E0 MOV X0, X20
	0x037DD5E4 MOV X1, X23
	0x037DD5E8 MOV X2, X19
	0x037DD5EC MOV X3, X31
	0x037DD5F0 MOV X4, X31
	0x037DD5F4 MOV X5, X31
	0x037DD5F8 BL 0x376CED8
	0x037DD5FC B 0x37DD644
	0x037DD600 BL 0x1C16F20
	0x037DD604 BL 0x1C16F28
	0x037DD608 CMP W1, 0x1
	0x037DD60C MOV X19, X0
	0x037DD610 B.NE 0x37DD684
	0x037DD614 MOV X0, X19
	0x037DD618 BL 0x3EB1AD0
	0x037DD61C MOV X19, X0
	0x037DD620 ADRP X0, 0x916000
	0x037DD624 LDR X0, [X0 + 0x7D0]
	0x037DD628 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC05000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x96C000
	010 Move W8, [X20+694]
	011 Move X21, [X21+3536]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x96C000
	018 Move X0, [X0+3536]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+694], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+132], S0
	026 Move [X19+140], S1
	027 Move [X19+140], S2
	028 Move [X19+148], S3
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Add X31, X31, 48
	034 Return 

Method: System.Void OnRotationCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037DD62C LDR X8, [X19]
	0x037DD630 LDR X1, [X8]
	0x037DD634 BL 0x1C17270
	0x037DD638 TBZ X0, 0x0, 0x37DD65C
	0x037DD63C BL 0x3EB1AE0
	0x037DD640 MOV X23, X31
	0x037DD644 MOV X0, X23
	0x037DD648 LDP X20, X19, [X31 + 0x30]
	0x037DD64C LDP X22, X21, [X31 + 0x20]
	0x037DD650 LDP X24, X23, [X31 + 0x10]
	0x037DD654 LDR X30, [X31], #0x40
	0x037DD658 RET
	0x037DD65C MOVZ W0, 0x8
	0x037DD660 BL 0x3EB1AF0
	0x037DD664 LDR X8, [X19]
	0x037DD668 STR X8, [X0]
	0x037DD66C ADRP X1, 0x6D7000
	0x037DD670 ADD X1, X1, 0xE58
	0x037DD674 MOV X2, X31
	0x037DD678 BL 0x3EB1B00

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBFC000
	005 Move W8, [X20+1939]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x918000
	010 Move X0, [X0+1448]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1939], W8
	014 Move X8, 0x918000
	015 Move X8, [X8+1448]
	016 Move X8, [X8]
	017 Move X8, [X8+184]
	018 Move V0, [X8]
	019 Move [X19+132], V0
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return 

Method: System.Void OnTrackingStatePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037DD67C MOV X19, X0
	0x037DD680 BL 0x3EB1AE0
	0x037DD684 MOV X0, X19
	0x037DD688 BL 0x1D2C690
	0x037DD68C BL 0x1990590
	0x037DD690 MOV X1, X31
	0x037DD694 B 0x33BDD8C
	0x037DD698 MOV X1, X31
	0x037DD69C B 0x33BDD8C
	0x037DD6A0 SUB X31, X31, 0x160
	0x037DD6A4 STP X29, X30, [X31 + 0x110]
	0x037DD6A8 STP X26, X25, [X31 + 0x120]
	0x037DD6AC STP X24, X23, [X31 + 0x130]
	0x037DD6B0 STP X22, X21, [X31 + 0x140]
	0x037DD6B4 STP X20, X19, [X31 + 0x150]
	0x037DD6B8 ADRP X21, 0xC04000
	0x037DD6BC LDRB W8, [X21 + 0x2C0]
	0x037DD6C0 MOV X19, X1
	0x037DD6C4 MOV X20, X0
	0x037DD6C8 TBNZ X8, 0x0, 0x37DD704
	0x037DD6CC ADRP X0, 0x93E000
	0x037DD6D0 LDR X0, [X0 + 0xDC8]
	0x037DD6D4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC05000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x96C000
	010 Move W8, [X20+695]
	011 Move X21, [X21+3544]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x96C000
	018 Move X0, [X0+3544]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+695], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call 0x22B5A6C, X0
	025 Move [X19+148], W0
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Add X31, X31, 48
	031 Return 

Method: System.Void OnTrackingStateCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x037DD6D8 ADRP X0, 0x969000
	0x037DD6DC LDR X0, [X0 + 0xE30]

ISIL:
	001 Move [X0+148], W31
	002 Return 

Method: System.Void Reset()

Disassembly:
	0x037DD6E0 BL 0x1C16CF4
	0x037DD6E4 ADRP X0, 0x93E000
	0x037DD6E8 LDR X0, [X0 + 0xDD0]
	0x037DD6EC BL 0x1C16CF4
	0x037DD6F0 ADRP X0, 0x96B000
	0x037DD6F4 LDR X0, [X0 + 0xE40]
	0x037DD6F8 BL 0x1C16CF4
	0x037DD6FC MOVZ W8, 0x1
	0x037DD700 STRB W8, [X21 + 0x2C0]
	0x037DD704 ADD X0, X31, 0x100
	0x037DD708 MOV X1, X19
	0x037DD70C MOV X2, X31
	0x037DD710 STP X31, X31, [X31 + 0x100]
	0x037DD714 STP X31, X31, [X31 + 0xF0]
	0x037DD718 STP X31, X31, [X31 + 0xE0]
	0x037DD71C STP X31, X31, [X31 + 0xD0]
	0x037DD720 BL 0x3757420
	0x037DD724 CBZ X20, 0x37DD818
	0x037DD728 MOV X0, X20
	0x037DD72C MOV X1, X31
	0x037DD730 BL 0x3810DB0
	0x037DD734 UBFM X8, X1, 0x20, 0x3F
	0x037DD738 CMP W8, 0x1
	0x037DD73C STP X0, X1, [X31 + 0xF0]
	0x037DD740 B.LT 0x37DD7F8
	0x037DD744 ADRP X24, 0x96B000
	0x037DD748 ADRP X25, 0x93E000
	0x037DD74C LDR X24, [X24 + 0xE40]
	0x037DD750 LDR X25, [X25 + 0xDD0]
	0x037DD754 MOV W20, W31
	0x037DD758 LDR X2, [X24]
	0x037DD75C ADD X8, X31, 0x0
	0x037DD760 ADD X0, X31, 0xF0
	0x037DD764 MOV W1, W20
	0x037DD768 BL 0x24FF148
	0x037DD76C LDP X21, X22, [X31]
	0x037DD770 LDP X2, X3, [X31 + 0x100]
	0x037DD774 LDP X23, X26, [X31 + 0x58]
	0x037DD778 MOV X4, X31
	0x037DD77C MOV X0, X21
	0x037DD780 MOV X1, X22
	0x037DD784 BL 0x37564A4
	0x037DD788 TBNZ X0, 0x0, 0x37DD7F8
	0x037DD78C UBFM X8, X26, 0x20, 0x3F
	0x037DD790 CMP W8, 0x1
	0x037DD794 STP X23, X26, [X31 + 0xE0]
	0x037DD798 B.LT 0x37DD7D0
	0x037DD79C MOV W23, W31
	0x037DD7A0 LDR X2, [X25]
	0x037DD7A4 ADD X0, X31, 0xE0
	0x037DD7A8 MOV W1, W23
	0x037DD7AC BL 0x24FCF28
	0x037DD7B0 MOV X2, X19
	0x037DD7B4 MOV X3, X31
	0x037DD7B8 BL 0x375F908
	0x037DD7BC TBNZ X0, 0x0, 0x37DD7E4
	0x037DD7C0 LDR W8, [X31 + 0xEC]
	0x037DD7C4 ADD W23, W23, 0x1
	0x037DD7C8 CMP W23, W8
	0x037DD7CC B.LT 0x37DD7A0
	0x037DD7D0 LDR W8, [X31 + 0xFC]
	0x037DD7D4 ADD W20, W20, 0x1
	0x037DD7D8 CMP W20, W8
	0x037DD7DC B.LT 0x37DD758
	0x037DD7E0 B 0x37DD7F8
	0x037DD7E4 ADD X0, X31, 0xD0
	0x037DD7E8 MOV X1, X31
	0x037DD7EC STP X21, X22, [X31 + 0xD0]
	0x037DD7F0 BL 0x37565F4
	0x037DD7F4 MOV X19, X0
	0x037DD7F8 MOV X0, X19
	0x037DD7FC LDP X20, X19, [X31 + 0x150]
	0x037DD800 LDP X22, X21, [X31 + 0x140]
	0x037DD804 LDP X24, X23, [X31 + 0x130]
	0x037DD808 LDP X26, X25, [X31 + 0x120]
	0x037DD80C LDP X29, X30, [X31 + 0x110]
	0x037DD810 ADD X31, X31, 0x160
	0x037DD814 RET
	0x037DD818 BL 0x1C16F20
	0x037DD81C CBZ X1, 0x37DD830
	0x037DD820 MOV X0, X1
	0x037DD824 MOVZ W1, 0x2F
	0x037DD828 MOV X2, X31
	0x037DD82C B 0x322BD74
	0x037DD830 STR X30, [X31 - 0x10]!
	0x037DD834 BL 0x1C16F20
	0x037DD838 STP X30, X19, [X31 - 0x10]!
	0x037DD83C CBZ X1, 0x37DD86C
	0x037DD840 MOV X19, X1
	0x037DD844 MOVZ W1, 0x2F
	0x037DD848 MOV X0, X19
	0x037DD84C MOV X2, X31
	0x037DD850 BL 0x322BD98
	0x037DD854 MOV W2, W0
	0x037DD858 MOV X0, X19
	0x037DD85C MOV W1, W31
	0x037DD860 MOV X3, X31
	0x037DD864 LDP X30, X19, [X31], #0x10
	0x037DD868 B 0x3228DE4
	0x037DD86C BL 0x1C16F20
	0x037DD870 SUB X31, X31, 0x60
	0x037DD874 STP X30, X25, [X31 + 0x20]
	0x037DD878 STP X24, X23, [X31 + 0x30]
	0x037DD87C STP X22, X21, [X31 + 0x40]
	0x037DD880 STP X20, X19, [X31 + 0x50]
	0x037DD884 ADRP X21, 0xC04000
	0x037DD888 LDRB W8, [X21 + 0x2C1]
	0x037DD88C MOV W20, W2
	0x037DD890 MOV X19, X1
	0x037DD894 TBNZ X8, 0x0, 0x37DD8B8
	0x037DD898 ADRP X0, 0x96B000
	0x037DD89C LDR X0, [X0 + 0xE48]
	0x037DD8A0 BL 0x1C16CF4
	0x037DD8A4 ADRP X0, 0x96B000
	0x037DD8A8 LDR X0, [X0 + 0xE20]
	0x037DD8AC BL 0x1C16CF4
	0x037DD8B0 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+80], X30
	003 Move [X31+88], X27
	004 Move [X31+96], X26
	005 Move [X31+104], X25
	006 Move [X31+112], X24
	007 Move [X31+120], X23
	008 Move [X31+128], X22
	009 Move [X31+136], X21
	010 Move [X31+144], X20
	011 Move [X31+152], X19
	012 Move X27, 0xC05000
	013 Move X23, 0x91B000
	014 Move X20, 0x91B000
	015 Move X26, 0x96C000
	016 Move X24, 0x923000
	017 Move X25, 0x96C000
	018 Move X21, 0x96C000
	019 Move X22, 0x96B000
	020 Move X23, [X23+992]
	021 Move X20, [X20+1128]
	022 Move W8, [X27+696]
	023 Move X26, [X26+1672]
	024 Move X24, [X24+184]
	025 Move X25, [X25+1432]
	026 Move X21, [X21+3552]
	027 Move X22, [X22+2056]
	028 Move X19, X0
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {56}
	033 Move X0, 0x91B000
	034 Move X0, [X0+992]
	035 Call 0x1C17CF4
	036 Move X0, 0x96C000
	037 Move X0, [X0+1432]
	038 Call 0x1C17CF4
	039 Move X0, 0x91B000
	040 Move X0, [X0+1128]
	041 Call 0x1C17CF4
	042 Move X0, 0x96C000
	043 Move X0, [X0+3552]
	044 Call 0x1C17CF4
	045 Move X0, 0x923000
	046 Move X0, [X0+184]
	047 Call 0x1C17CF4
	048 Move X0, 0x96C000
	049 Move X0, [X0+1672]
	050 Call 0x1C17CF4
	051 Move X0, 0x96B000
	052 Move X0, [X0+2056]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X27+696], W8
	056 Move X0, [X23]
	057 Call 0x1C17F10
	058 Move X1, [X20]
	059 Move X6, [X26]
	060 Move W2, W31
	061 Move X3, X31
	062 Move X4, X31
	063 Move X5, X31
	064 Move X7, X31
	065 Move X20, X0
	066 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	067 Add X0, X31, 56
	068 Move X1, X20
	069 Move X2, X31
	070 Move [X31+56], X31
	071 Move [X31+64], X31
	072 Move [X31+72], X31
	073 Call InputActionProperty..ctor, X0, X1
	074 Move X8, [X31+72]
	075 NotImplemented "Instruction LDUR not yet implemented."
	076 Move [X19+64], X8
	077 Move [X19+3], V0
	078 Move X0, [X23]
	079 Call 0x1C17F10
	080 Move X1, [X24]
	081 Move X6, [X25]
	082 Move W2, W31
	083 Move X3, X31
	084 Move X4, X31
	085 Move X5, X31
	086 Move X7, X31
	087 Move X20, X0
	088 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	089 Add X0, X31, 32
	090 Move X1, X20
	091 Move X2, X31
	092 Move [X31+32], X31
	093 Move [X31+40], X31
	094 Move [X31+48], X31
	095 Call InputActionProperty..ctor, X0, X1
	096 Move X8, [X31+48]
	097 Move V0, [X31+2]
	098 Move [X19+88], X8
	099 Move [X19+72], V0
	100 Move X0, [X23]
	101 Call 0x1C17F10
	102 Move X1, [X21]
	103 Move X6, [X22]
	104 Move W2, W31
	105 Move X3, X31
	106 Move X4, X31
	107 Move X5, X31
	108 Move X7, X31
	109 Move X20, X0
	110 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	111 Add X0, X31, 8
	112 Move X1, X20
	113 Move X2, X31
	114 Move [X31+8], X31
	115 Move [X31+16], X31
	116 Move [X31+24], X31
	117 Call InputActionProperty..ctor, X0, X1
	118 Move X8, [X31+24]
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 Move X22, [X31+128]
	121 Move X21, [X31+136]
	122 Move X24, [X31+112]
	123 Move X23, [X31+120]
	124 Move [X19+112], X8
	125 Move [X19+6], V0
	126 Move X20, [X31+144]
	127 Move X19, [X31+152]
	128 Move X26, [X31+96]
	129 Move X25, [X31+104]
	130 Move X30, [X31+80]
	131 Move X27, [X31+88]
	132 Add X31, X31, 160
	133 Return 

Method: System.Void Awake()

Disassembly:
	0x037DD8B4 STRB W8, [X21 + 0x2C1]
	0x037DD8B8 CBZ X19, 0x37DD9BC
	0x037DD8BC ADRP X23, 0x96B000
	0x037DD8C0 ADRP X24, 0x96B000
	0x037DD8C4 LDR X23, [X23 + 0xE48]
	0x037DD8C8 LDR X24, [X24 + 0xE20]
	0x037DD8CC MOV X22, X31
	0x037DD8D0 MOV W25, W20
	0x037DD8D4 LDR X2, [X23]
	0x037DD8D8 ADD X20, X25, X22
	0x037DD8DC ADD X8, X31, 0x8

ISIL:
	001 Move [X31-16], X30
	002 Add X1, X31, 8
	003 Move [X31+8], X31
	004 Call TrackedPoseDriver.HasStereoCamera, X0, X1
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {13}
	009 Move X0, [X31+8]
	010 Move W1, 1
	011 Move X2, X31
	012 Call XRDevice.DisableAutoXRCameraTracking, X0, X1
	013 Move X30, [X31+16]
	014 Return 

Method: System.Void OnEnable()

Disassembly:
	0x037DD964 LDR X8, [X0 + 0xB8]
	0x037DD968 LDR X8, [X8 + 0x8]
	0x037DD96C CBZ X8, 0x37DD9BC
	0x037DD970 LDR W9, [X8 + 0x18]
	0x037DD974 CMP W22, W9
	0x037DD978 B.CS 0x37DD9C0
	0x037DD97C ADD X8, X8, X22, 0x2, LSL
	0x037DD980 LDR W8, [X8 + 0x20]
	0x037DD984 CMP W20, W8
	0x037DD988 B.NE 0x37DD9A0
	0x037DD98C ADD X22, X22, 0x1
	0x037DD990 CMP W22, 0x6
	0x037DD994 B.NE 0x37DD8D4
	0x037DD998 MOVZ W0, 0x1
	0x037DD99C B 0x37DD9A4
	0x037DD9A0 MOV W0, W31
	0x037DD9A4 LDP X20, X19, [X31 + 0x50]
	0x037DD9A8 LDP X22, X21, [X31 + 0x40]
	0x037DD9AC LDP X24, X23, [X31 + 0x30]
	0x037DD9B0 LDP X30, X25, [X31 + 0x20]
	0x037DD9B4 ADD X31, X31, 0x60
	0x037DD9B8 RET
	0x037DD9BC BL 0x1C16F20
	0x037DD9C0 BL 0x1C16F28
	0x037DD9C4 SUB X31, X31, 0xD0
	0x037DD9C8 STP X29, X30, [X31 + 0x70]
	0x037DD9CC STP X28, X27, [X31 + 0x80]
	0x037DD9D0 STP X26, X25, [X31 + 0x90]
	0x037DD9D4 STP X24, X23, [X31 + 0xA0]
	0x037DD9D8 STP X22, X21, [X31 + 0xB0]
	0x037DD9DC STP X20, X19, [X31 + 0xC0]
	0x037DD9E0 ADRP X21, 0xC04000
	0x037DD9E4 ADRP X20, 0x96B000
	0x037DD9E8 LDRB W8, [X21 + 0x2C2]
	0x037DD9EC LDR X20, [X20 + 0xE50]
	0x037DD9F0 MOV X19, X0
	0x037DD9F4 TBNZ X8, 0x0, 0x37DDB50
	0x037DD9F8 ADRP X0, 0x96B000
	0x037DD9FC LDR X0, [X0 + 0xE50]
	0x037DDA00 BL 0x1C16CF4
	0x037DDA04 ADRP X0, 0x96B000
	0x037DDA08 LDR X0, [X0 + 0xE58]
	0x037DDA0C BL 0x1C16CF4
	0x037DDA10 ADRP X0, 0x96B000
	0x037DDA14 LDR X0, [X0 + 0xE60]
	0x037DDA18 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xC05000
	008 Move X23, 0x918000
	009 Move X20, 0x96C000
	010 Move X21, 0x93F000
	011 Move W8, [X22+697]
	012 Move X23, [X23+3696]
	013 Move X20, [X20+3560]
	014 Move X21, [X21+624]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x918000
	021 Move X0, [X0+3696]
	022 Call 0x1C17CF4
	023 Move X0, 0x93F000
	024 Move X0, [X0+624]
	025 Call 0x1C17CF4
	026 Move X0, 0x96C000
	027 Move X0, [X0+3560]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+697], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call Action..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Call InputSystem.add_onAfterUpdate, X0
	046 Move X0, X19
	047 Call TrackedPoseDriver.BindActions, X0
	048 Move W8, 1
	049 Move [X19+155], W8
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Return 

Method: System.Void OnDisable()

Disassembly:
	0x037DDA1C ADRP X0, 0x96B000
	0x037DDA20 LDR X0, [X0 + 0xE68]
	0x037DDA24 BL 0x1C16CF4
	0x037DDA28 ADRP X0, 0x93E000
	0x037DDA2C LDR X0, [X0 + 0xD18]
	0x037DDA30 BL 0x1C16CF4
	0x037DDA34 ADRP X0, 0x93E000
	0x037DDA38 LDR X0, [X0 + 0x270]
	0x037DDA3C BL 0x1C16CF4
	0x037DDA40 ADRP X0, 0x917000
	0x037DDA44 LDR X0, [X0 + 0x1B8]
	0x037DDA48 BL 0x1C16CF4
	0x037DDA4C ADRP X0, 0x93E000
	0x037DDA50 LDR X0, [X0 + 0xB78]
	0x037DDA54 BL 0x1C16CF4
	0x037DDA58 ADRP X0, 0x91F000
	0x037DDA5C LDR X0, [X0 + 0x110]
	0x037DDA60 BL 0x1C16CF4
	0x037DDA64 ADRP X0, 0x96B000
	0x037DDA68 LDR X0, [X0 + 0xE70]
	0x037DDA6C BL 0x1C16CF4
	0x037DDA70 ADRP X0, 0x917000
	0x037DDA74 LDR X0, [X0 + 0x1C0]
	0x037DDA78 BL 0x1C16CF4
	0x037DDA7C ADRP X0, 0x96B000
	0x037DDA80 LDR X0, [X0 + 0xE78]
	0x037DDA84 BL 0x1C16CF4
	0x037DDA88 ADRP X0, 0x96B000
	0x037DDA8C LDR X0, [X0 + 0xE48]
	0x037DDA90 BL 0x1C16CF4
	0x037DDA94 ADRP X0, 0x917000
	0x037DDA98 LDR X0, [X0 + 0x1D0]
	0x037DDA9C BL 0x1C16CF4
	0x037DDAA0 ADRP X0, 0x91A000
	0x037DDAA4 LDR X0, [X0 + 0xFD8]
	0x037DDAA8 BL 0x1C16CF4
	0x037DDAAC ADRP X0, 0x96B000
	0x037DDAB0 LDR X0, [X0 + 0xE20]
	0x037DDAB4 BL 0x1C16CF4
	0x037DDAB8 ADRP X0, 0x96B000
	0x037DDABC LDR X0, [X0 + 0xE80]
	0x037DDAC0 BL 0x1C16CF4
	0x037DDAC4 ADRP X0, 0x96A000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xC05000
	008 Move X22, 0x918000
	009 Move X20, 0x96C000
	010 Move X21, 0x93F000
	011 Move W8, [X23+698]
	012 Move X22, [X22+3696]
	013 Move X20, [X20+3560]
	014 Move X21, [X21+624]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x918000
	021 Move X0, [X0+3696]
	022 Call 0x1C17CF4
	023 Move X0, 0x93F000
	024 Move X0, [X0+624]
	025 Call 0x1C17CF4
	026 Move X0, 0x96C000
	027 Move X0, [X0+3560]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+698], W8
	031 Move X0, X19
	032 Call TrackedPoseDriver.UnbindActions, X0
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X3, X31
	038 Move X20, X0
	039 Call Action..ctor, X0, X1, X2
	040 Move X0, [X21]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X1, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call InputSystem.remove_onAfterUpdate, X0
	054 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x037DDAC8 LDR X0, [X0 + 0x940]
	0x037DDACC BL 0x1C16CF4
	0x037DDAD0 ADRP X0, 0x93E000
	0x037DDAD4 LDR X0, [X0 + 0x28]
	0x037DDAD8 BL 0x1C16CF4
	0x037DDADC ADRP X0, 0x96B000
	0x037DDAE0 LDR X0, [X0 + 0x598]
	0x037DDAE4 BL 0x1C16CF4
	0x037DDAE8 ADRP X0, 0x96B000
	0x037DDAEC LDR X0, [X0 + 0xE88]
	0x037DDAF0 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Add X1, X31, 8
	003 Move [X31+8], X31
	004 Call TrackedPoseDriver.HasStereoCamera, X0, X1
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {13}
	009 Move X0, [X31+8]
	010 Move W1, W31
	011 Move X2, X31
	012 Call XRDevice.DisableAutoXRCameraTracking, X0, X1
	013 Move X30, [X31+16]
	014 Return 

Method: System.Void UpdateCallback()

Disassembly:
	0x037DDAF4 ADRP X0, 0x96B000
	0x037DDAF8 LDR X0, [X0 + 0xE90]
	0x037DDAFC BL 0x1C16CF4
	0x037DDB00 ADRP X0, 0x96B000
	0x037DDB04 LDR X0, [X0 + 0xE98]
	0x037DDB08 BL 0x1C16CF4
	0x037DDB0C ADRP X0, 0x96B000
	0x037DDB10 LDR X0, [X0 + 0xE28]
	0x037DDB14 BL 0x1C16CF4
	0x037DDB18 ADRP X0, 0x96B000
	0x037DDB1C LDR X0, [X0 + 0x5E0]
	0x037DDB20 BL 0x1C16CF4
	0x037DDB24 ADRP X0, 0x968000
	0x037DDB28 LDR X0, [X0 + 0x350]
	0x037DDB2C BL 0x1C16CF4
	0x037DDB30 ADRP X0, 0x96B000
	0x037DDB34 LDR X0, [X0 + 0x688]
	0x037DDB38 BL 0x1C16CF4
	0x037DDB3C ADRP X0, 0x96A000
	0x037DDB40 LDR X0, [X0 + 0x808]
	0x037DDB44 BL 0x1C16CF4
	0x037DDB48 MOVZ W8, 0x1
	0x037DDB4C STRB W8, [X21 + 0x2C2]
	0x037DDB50 LDR X0, [X20]
	0x037DDB54 STP X31, X31, [X31 + 0x50]
	0x037DDB58 STR X31, [X31 + 0x60]
	0x037DDB5C STP X31, X31, [X31 + 0x40]
	0x037DDB60 BL 0x1C16F10
	0x037DDB64 MOV X1, X31
	0x037DDB68 MOV X22, X0
	0x037DDB6C BL 0x38164D0
	0x037DDB70 ADD X0, X31, 0x20
	0x037DDB74 MOVZ W1, 0x58
	0x037DDB78 MOVZ W2, 0x52
	0x037DDB7C MOVZ W3, 0x53
	0x037DDB80 MOVZ W4, 0x30
	0x037DDB84 MOV X5, X31
	0x037DDB88 STR W31, [X31 + 0x20]
	0x037DDB8C BL 0x375AA28
	0x037DDB90 CBZ X22, 0x37DE454
	0x037DDB94 LDR W8, [X31 + 0x20]
	0x037DDB98 ADRP X21, 0x91A000
	0x037DDB9C ADRP X23, 0x917000
	0x037DDBA0 ADRP X20, 0x917000
	0x037DDBA4 STR W8, [X22 + 0x28]
	0x037DDBA8 LDR X1, [X19 + 0x10]
	0x037DDBAC LDR X21, [X21 + 0xFD8]
	0x037DDBB0 LDR X23, [X23 + 0x1D0]
	0x037DDBB4 LDR X20, [X20 + 0x1C0]
	0x037DDBB8 MOV X0, X22
	0x037DDBBC MOV X2, X31
	0x037DDBC0 BL 0x3815FC8
	0x037DDBC4 LDR X2, [X21]
	0x037DDBC8 ADD X0, X31, 0x3C
	0x037DDBCC MOVZ W1, 0x1
	0x037DDBD0 STRH W31, [X31 + 0x3C]
	0x037DDBD4 BL 0x242D570
	0x037DDBD8 LDRH W8, [X31 + 0x3C]
	0x037DDBDC MOV X1, X31
	0x037DDBE0 STRH W8, [X22 + 0x38]
	0x037DDBE4 LDR X0, [X19 + 0x10]
	0x037DDBE8 BL 0x32277A8
	0x037DDBEC STR X31, [X31 + 0x18]
	0x037DDBF0 TBNZ X0, 0x0, 0x37DDC20
	0x037DDBF4 ADRP X8, 0x93E000
	0x037DDBF8 LDR X8, [X8 + 0x270]
	0x037DDBFC LDR X21, [X19 + 0x10]
	0x037DDC00 LDR X0, [X8]
	0x037DDC04 LDR W8, [X0 + 0xE0]
	0x037DDC08 CBNZ W8, 0x37DDC10
	0x037DDC0C BL 0x1C16DFC
	0x037DDC10 MOV X0, X21
	0x037DDC14 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC05000
	005 Move W8, [X20+699]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x96C000
	012 Move X0, [X0+3568]
	013 Call 0x1C17CF4
	014 Move X0, 0x96C000
	015 Move X0, [X0+3576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+699], W8
	019 Move W8, [X19+155]
	020 Compare W8, 0
	021 JumpIfEqual {62}
	022 Add X20, X19, 48
	023 Move X0, X20
	024 Move X1, X31
	025 Call InputActionProperty.get_action, X0
	026 Compare X0, 0
	027 JumpIfEqual {40}
	028 Move X0, X20
	029 Move X1, X31
	030 Call InputActionProperty.get_action, X0
	031 Compare X0, 0
	032 JumpIfEqual {87}
	033 Move X8, 0x96C000
	034 Move X8, [X8+3576]
	035 Move X1, [X8]
	036 Call InputAction.ReadValue, X0
	037 Move [X19+120], S0
	038 Move [X19+128], S1
	039 Move [X19+128], S2
	040 Add X20, X19, 72
	041 Move X0, X20
	042 Move X1, X31
	043 Call InputActionProperty.get_action, X0
	044 Compare X0, 0
	045 JumpIfEqual {59}
	046 Move X0, X20
	047 Move X1, X31
	048 Call InputActionProperty.get_action, X0
	049 Compare X0, 0
	050 JumpIfEqual {87}
	051 Move X8, 0x96C000
	052 Move X8, [X8+3568]
	053 Move X1, [X8]
	054 Call InputAction.ReadValue, X0
	055 Move [X19+132], S0
	056 Move [X19+140], S1
	057 Move [X19+140], S2
	058 Move [X19+148], S3
	059 Move X0, X19
	060 Call TrackedPoseDriver.ReadTrackingState, X0
	061 Move [X19+155], W31
	062 Move X20, 0xC04000
	063 Move W8, [X20+3533]
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x968000
	067 Move X0, [X0+3984]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X20+3533], W8
	071 Move X8, 0x968000
	072 Move X8, [X8+3984]
	073 Move X8, [X8]
	074 Move X8, [X8+184]
	075 Move W9, [X8+4]
	076 Move X8, [X19]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X2, [X8+456]
	079 Move X1, [X8+464]
	080 Move X2, [X8+440]
	081 Move X1, [X8+448]
	082 Move X0, X19
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X30, [X31+32]
	086 CallNoReturn X2
	087 Call 0x1C17F20

Method: System.Void ReadTrackingState()

Disassembly:
	0x037DDC18 BL 0x376D264
	0x037DDC1C STR X0, [X31 + 0x18]
	0x037DDC20 LDR X0, [X23]
	0x037DDC24 STR X22, [X31 + 0x10]
	0x037DDC28 BL 0x1C16F10
	0x037DDC2C LDR X1, [X20]
	0x037DDC30 STR X0, [X31 + 0x8]
	0x037DDC34 BL 0x301B7C4
	0x037DDC38 LDR X0, [X23]
	0x037DDC3C BL 0x1C16F10
	0x037DDC40 LDR X1, [X20]
	0x037DDC44 MOV X23, X0
	0x037DDC48 BL 0x301B7C4
	0x037DDC4C LDR X8, [X19 + 0x20]
	0x037DDC50 CBZ X8, 0x37DE454
	0x037DDC54 ADRP X29, 0x917000
	0x037DDC58 ADRP X21, 0x93E000
	0x037DDC5C ADRP X28, 0x96B000
	0x037DDC60 LDR X29, [X29 + 0x1B8]
	0x037DDC64 LDR X21, [X21 + 0xD18]
	0x037DDC68 LDR X28, [X28 + 0xE60]
	0x037DDC6C MOV W25, W31
	0x037DDC70 MOV W24, W31
	0x037DDC74 LDR X0, [X8 + 0x30]
	0x037DDC78 CBZ X0, 0x37DE454
	0x037DDC7C LDR W8, [X0 + 0x18]
	0x037DDC80 CMP W24, W8
	0x037DDC84 B.GE 0x37DE428
	0x037DDC88 ADRP X8, 0x96B000
	0x037DDC8C LDR X8, [X8 + 0xE48]
	0x037DDC90 MOV W1, W24
	0x037DDC94 LDR X2, [X8]
	0x037DDC98 ADD X8, X31, 0x20
	0x037DDC9C BL 0x30D9A00
	0x037DDCA0 CBZ X23, 0x37DE454
	0x037DDCA4 LDP W2, W8, [X23 + 0x18]
	0x037DDCA8 LDP X26, X27, [X31 + 0x20]
	0x037DDCAC LDP W20, W22, [X31 + 0x30]
	0x037DDCB0 ADD W8, W8, 0x1
	0x037DDCB4 CMP W2, 0x1
	0x037DDCB8 STP W31, W8, [X23 + 0x18]
	0x037DDCBC B.LT 0x37DDCD0
	0x037DDCC0 LDR X0, [X23 + 0x10]
	0x037DDCC4 MOV W1, W31
	0x037DDCC8 MOV X3, X31
	0x037DDCCC BL 0x339FA34
	0x037DDCD0 CBZ X27, 0x37DDD8C
	0x037DDCD4 ADRP X8, 0x96B000
	0x037DDCD8 LDR X8, [X8 + 0xE70]
	0x037DDCDC MOV X0, X27
	0x037DDCE0 LDR X1, [X8]
	0x037DDCE4 ADD X8, X31, 0x20
	0x037DDCE8 BL 0x30C7738
	0x037DDCEC LDR V0, [X31 + 0x2]
	0x037DDCF0 LDR X8, [X31 + 0x30]
	0x037DDCF4 STR V0, [X31 + 0x5]
	0x037DDCF8 STR X8, [X31 + 0x60]
	0x037DDCFC LDR X1, [X28]
	0x037DDD00 ADD X0, X31, 0x50
	0x037DDD04 BL 0x2BCFE44
	0x037DDD08 TBZ X0, 0x0, 0x37DDD78
	0x037DDD0C LDR X27, [X31 + 0x60]
	0x037DDD10 MOV X0, X27
	0x037DDD14 MOV X1, X31
	0x037DDD18 BL 0x32277A8
	0x037DDD1C TBNZ X0, 0x0, 0x37DDCFC
	0x037DDD20 LDR W10, [X23 + 0x1C]
	0x037DDD24 LDR X8, [X23 + 0x10]
	0x037DDD28 LDR X9, [X29]
	0x037DDD2C ADD W10, W10, 0x1
	0x037DDD30 STR W10, [X23 + 0x1C]
	0x037DDD34 CBZ X8, 0x37DE3E0
	0x037DDD38 LDRSW X10, [X23 + 0x18]
	0x037DDD3C LDR W11, [X8 + 0x18]
	0x037DDD40 CMP W10, W11
	0x037DDD44 B.CS 0x37DDD5C
	0x037DDD48 ADD W9, W10, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xC05000
	010 Move W8, [X20+700]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x93F000
	017 Move X0, [X0+112]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+700], W8
	021 Add X0, X19, 96
	022 Move X1, X31
	023 Call InputActionProperty.get_action, X0
	024 Compare X0, 0
	025 JumpIfEqual {77}
	026 Move X1, X31
	027 Move X20, X0
	028 Call InputAction.get_enabled, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {79}
	033 Move W8, [X20+180]
	034 Compare W8, 0
	035 JumpIfEqual {77}
	036 Move X0, X20
	037 Move X1, X31
	038 Call InputAction.GetOrCreateActionMap, X0
	039 Compare X0, 0
	040 JumpIfEqual {95}
	041 Move X1, X31
	042 Move X21, X0
	043 Call InputActionMap.ResolveBindingsIfNecessary, X0
	044 Move X21, [X21+96]
	045 Compare X21, 0
	046 JumpIfEqual {80}
	047 Move W23, [X20+192]
	048 Move X0, X21
	049 Move X1, X31
	050 Call InputActionState.get_totalBindingCount, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W8, W0
	053 Move X24, X31
	054 Move X25, X8
	055 ShiftRight X25, 59
	056 And X25, X25, 0x3FFFFFF
	057 Move X0, X21
	058 Move X1, X31
	059 Call InputActionState.get_bindingStates, X0
	060 Add X22, X24, X0
	061 Move X0, X22
	062 Move X1, X31
	063 Call BindingState.get_actionIndex, X0
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X22
	066 Move X1, X31
	067 Call BindingState.get_isComposite, X0
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {75}
	072 Move W8, [X22]
	073 Compare W8, 0
	074 JumpIfNotEqual {89}
	075 Add X24, X24, 32
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W8, 3
	078 Move [X19+148], W8
	079 Move [X19+148], W31
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X24, [X31+16]
	085 Move X23, [X31+24]
	086 Move X30, [X31+64]
	087 Move X25, [X31+72]
	088 Return 
	089 Move X8, 0x93F000
	090 Move X8, [X8+112]
	091 Move X0, X20
	092 Move X1, [X8]
	093 Call 0x21F6BCC, X0
	094 Move [X19+148], W0
	095 Call 0x1C17F20

Method: System.Void OnUpdate()

Disassembly:
	0x037DDD4C ADD X8, X8, X10, 0x3, LSL
	0x037DDD50 STR W9, [X23 + 0x18]
	0x037DDD54 STR X27, [X8 + 0x20]
	0x037DDD58 B 0x37DDCFC
	0x037DDD5C LDR X8, [X9 + 0x20]
	0x037DDD60 LDR X8, [X8 + 0xC0]
	0x037DDD64 LDR X2, [X8 + 0x70]

ISIL:
	001 Move W8, [X0+36]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X8, [X0]
	004 Move X2, [X8+472]
	005 Move X1, [X8+480]
	006 CallNoReturn X2
	007 Return 

Method: System.Void OnBeforeRender()

Disassembly:
	0x037DDD68 MOV X0, X23
	0x037DDD6C MOV X1, X27
	0x037DDD70 BL 0x301BF90
	0x037DDD74 B 0x37DDCFC
	0x037DDD78 ADRP X8, 0x96B000
	0x037DDD7C LDR X8, [X8 + 0xE58]
	0x037DDD80 ADD X0, X31, 0x50
	0x037DDD84 LDR X1, [X8]

ISIL:
	001 Move W8, [X0+36]
	002 Or W8, W8, 2
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X8, [X0]
	005 Move X2, [X8+472]
	006 Move X1, [X8+480]
	007 CallNoReturn X2
	008 Return 

Method: System.Void PerformUpdate()

Disassembly:
	0x037DDD88 BL 0x2BCFE40
	0x037DDD8C ADRP X8, 0x96B000
	0x037DDD90 LDR X8, [X8 + 0xE20]
	0x037DDD94 LDR X0, [X8]
	0x037DDD98 LDR W8, [X0 + 0xE0]
	0x037DDD9C CBNZ W8, 0x37DDDA4
	0x037DDDA0 BL 0x1C16DFC

ISIL:
	001 Move X8, [X0]
	002 Move S0, [X0+120]
	003 Move S1, [X0+124]
	004 Move S2, [X0+128]
	005 Move S3, [X0+132]
	006 Move S4, [X0+136]
	007 Move S5, [X0+140]
	008 Move V6, [X0+144]
	009 Move X2, [X8+488]
	010 Move X1, [X8+496]
	011 CallNoReturn X2

Method: System.Void SetLocalTransform(UnityEngine.Vector3 newPosition, UnityEngine.Quaternion newRotation)

Disassembly:
	0x037DDDA4 MOVZ W1, 0x1
	0x037DDDA8 MOV X0, X26
	0x037DDDAC BL 0x37DD16C
	0x037DDDB0 LDR X8, [X31 + 0x18]
	0x037DDDB4 MOV X26, X0
	0x037DDDB8 CBZ X8, 0x37DDDE4
	0x037DDDBC ADRP X8, 0x96B000
	0x037DDDC0 LDR X8, [X8 + 0xE20]
	0x037DDDC4 LDR X0, [X8]
	0x037DDDC8 LDR W8, [X0 + 0xE0]
	0x037DDDCC CBNZ W8, 0x37DDDD4
	0x037DDDD0 BL 0x1C16DFC
	0x037DDDD4 LDR X0, [X31 + 0x18]
	0x037DDDD8 MOV X1, X26
	0x037DDDDC BL 0x37DD6A0
	0x037DDDE0 MOV X26, X0
	0x037DDDE4 CBZ X26, 0x37DE454
	0x037DDDE8 MOV X0, X26
	0x037DDDEC MOV X1, X31
	0x037DDDF0 BL 0x322B5E4
	0x037DDDF4 CBZ X0, 0x37DE454
	0x037DDDF8 MOVZ W1, 0x2F
	0x037DDDFC MOV X2, X31
	0x037DDE00 MOV X26, X0
	0x037DDE04 BL 0x322BD74
	0x037DDE08 TBZ X0, 0x0, 0x37DDEE8
	0x037DDE0C MOV X1, X26
	0x037DDE10 BL 0x37DD838
	0x037DDE14 MOV X27, X0
	0x037DDE18 LDR X0, [X31 + 0x8]
	0x037DDE1C CBZ X0, 0x37DE454
	0x037DDE20 ADRP X8, 0x91F000
	0x037DDE24 LDR X8, [X8 + 0x110]
	0x037DDE28 MOV X1, X27
	0x037DDE2C LDR X2, [X8]
	0x037DDE30 BL 0x301C318
	0x037DDE34 TBNZ X0, 0x0, 0x37DDEE8
	0x037DDE38 LDR X8, [X19 + 0x20]
	0x037DDE3C CBZ X8, 0x37DE454
	0x037DDE40 LDR X1, [X8 + 0x30]
	0x037DDE44 MOV W2, W24
	0x037DDE48 BL 0x37DD870
	0x037DDE4C TBZ X0, 0x0, 0x37DDEE8
	0x037DDE50 LDR X0, [X31 + 0x10]
	0x037DDE54 MOV X1, X27
	0x037DDE58 MOV X2, X31
	0x037DDE5C BL 0x3816074
	0x037DDE60 ADRP X8, 0x93E000
	0x037DDE64 LDR X8, [X8 + 0x28]
	0x037DDE68 STP X0, X1, [X31 + 0x40]
	0x037DDE6C ADD X0, X31, 0x40
	0x037DDE70 MOV X2, X31
	0x037DDE74 LDR X8, [X8]
	0x037DDE78 MOV X1, X8
	0x037DDE7C BL 0x3816520
	0x037DDE80 STP X0, X1, [X31 + 0x40]
	0x037DDE84 ADD X0, X31, 0x40
	0x037DDE88 MOV W1, W31
	0x037DDE8C MOV X2, X31
	0x037DDE90 BL 0x3816684
	0x037DDE94 LDR X0, [X31 + 0x8]
	0x037DDE98 LDR X9, [X29]
	0x037DDE9C LDR W10, [X0 + 0x1C]
	0x037DDEA0 LDR X8, [X0 + 0x10]
	0x037DDEA4 ADD W10, W10, 0x1
	0x037DDEA8 STR W10, [X0 + 0x1C]
	0x037DDEAC CBZ X8, 0x37DE454
	0x037DDEB0 LDRSW X10, [X0 + 0x18]
	0x037DDEB4 LDR W11, [X8 + 0x18]
	0x037DDEB8 CMP W10, W11
	0x037DDEBC B.CS 0x37DDED4
	0x037DDEC0 ADD W9, W10, 0x1
	0x037DDEC4 ADD X8, X8, X10, 0x3, LSL
	0x037DDEC8 STR W9, [X0 + 0x18]
	0x037DDECC STR X27, [X8 + 0x20]
	0x037DDED0 B 0x37DDEE8
	0x037DDED4 LDR X8, [X9 + 0x20]
	0x037DDED8 MOV X1, X27
	0x037DDEDC LDR X8, [X8 + 0xC0]
	0x037DDEE0 LDR X2, [X8 + 0x70]
	0x037DDEE4 BL 0x301BF90
	0x037DDEE8 ADRP X8, 0x96B000
	0x037DDEEC LDR X8, [X8 + 0xE20]
	0x037DDEF0 LDR X0, [X8]
	0x037DDEF4 LDR W8, [X0 + 0xE0]
	0x037DDEF8 CBNZ W8, 0x37DDF00
	0x037DDEFC BL 0x1C16DFC
	0x037DDF00 CMP W20, 0x9
	0x037DDF04 B.HI 0x37DDF60
	0x037DDF08 ADRP X11, 0xFFFFFFFFFD3BA000
	0x037DDF0C MOV W8, W20

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move W8, [X0+40]
	012 Move V11, V6
	013 Move V12, V5
	014 Move V13, V4
	015 Move V14, V3
	016 Move V8, V2
	017 Move V9, V1
	018 Move X19, X0
	019 Move V10, V0
	020 Compare W8, 0
	021 JumpIfEqual {25}
	022 Move W20, W31
	023 Move W8, 1
	024 Move W9, 1
	025 Move W9, [X19+148]
	026 Move W10, 9
	027 And W8, W9, 1
	028 Move W9, W9
	029 ShiftRight W9, 1
	030 And W9, W9, 1
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move W10, [X19+32]
	033 And W8, W9, W8
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 And W31, W8, W11
	037 Move X0, X19
	038 Move X1, X31
	039 Call Component.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {113}
	042 Move V0, V10
	043 Move V1, V9
	044 Move V2, V8
	045 Move V4, V13
	046 Move V5, V12
	047 Move V6, V11
	048 Move X20, [X31+64]
	049 Move X19, [X31+72]
	050 Move X30, [X31+56]
	051 Move D9, [X31+40]
	052 Move D8, [X31+48]
	053 Move D11, [X31+24]
	054 Move D10, [X31+32]
	055 Move D13, [X31+8]
	056 Move D12, [X31+16]
	057 Move V3, V14
	058 Move X1, X31
	059 Move V14, [X31+80]
	060 Call Transform.SetLocalPositionAndRotation, X0, X1, X2
	061 Return 
	062 Compare W9, 0
	063 JumpIfEqual {76}
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X19
	066 Move X1, X31
	067 Call Component.get_transform, X0
	068 Compare X0, 0
	069 JumpIfEqual {113}
	070 Move V0, V14
	071 Move V1, V13
	072 Move V2, V12
	073 Move V3, V11
	074 Move X1, X31
	075 Call Transform.set_localRotation, X0, X1
	076 Compare W20, 0
	077 JumpIfEqual {89}
	078 Move X20, [X31+64]
	079 Move X19, [X31+72]
	080 Move X30, [X31+56]
	081 Move D9, [X31+40]
	082 Move D8, [X31+48]
	083 Move D11, [X31+24]
	084 Move D10, [X31+32]
	085 Move D13, [X31+8]
	086 Move D12, [X31+16]
	087 Move V14, [X31+80]
	088 Return 
	089 Move W8, [X19+32]
	090 Or W8, W8, 2
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X0, X19
	093 Move X1, X31
	094 Call Component.get_transform, X0
	095 Compare X0, 0
	096 JumpIfEqual {113}
	097 Move V0, V10
	098 Move V1, V9
	099 Move V2, V8
	100 Move X20, [X31+64]
	101 Move X19, [X31+72]
	102 Move X30, [X31+56]
	103 Move D9, [X31+40]
	104 Move D8, [X31+48]
	105 Move D11, [X31+24]
	106 Move D10, [X31+32]
	107 Move D13, [X31+8]
	108 Move D12, [X31+16]
	109 Move X1, X31
	110 Move V14, [X31+80]
	111 Call Transform.set_localPosition, X0, X1
	112 Return 
	113 Call 0x1C17F20

Method: System.Boolean HasStereoCamera(out UnityEngine.Camera cameraComponent)

Disassembly:
	0x037DD8E0 MOV X0, X19
	0x037DD8E4 MOV W1, W20
	0x037DD8E8 BL 0x30D9A00
	0x037DD8EC LDR X0, [X24]
	0x037DD8F0 LDR X21, [X31 + 0x8]
	0x037DD8F4 LDR W8, [X0 + 0xE0]
	0x037DD8F8 CBNZ W8, 0x37DD904
	0x037DD8FC BL 0x1C16DFC
	0x037DD900 LDR X0, [X24]
	0x037DD904 LDR X8, [X0 + 0xB8]
	0x037DD908 LDR X8, [X8]
	0x037DD90C CBZ X8, 0x37DD9BC
	0x037DD910 LDR W9, [X8 + 0x18]
	0x037DD914 CMP W22, W9
	0x037DD918 B.CS 0x37DD9C0
	0x037DD91C CBZ X21, 0x37DD9BC
	0x037DD920 ADD X8, X8, X22, 0x3, LSL
	0x037DD924 LDR X1, [X8 + 0x20]
	0x037DD928 MOV X0, X21
	0x037DD92C MOV X2, X31
	0x037DD930 BL 0x3226588
	0x037DD934 TBZ X0, 0x0, 0x37DD9A0
	0x037DD938 LDR X2, [X23]
	0x037DD93C ADD X8, X31, 0x8
	0x037DD940 MOV X0, X19
	0x037DD944 MOV W1, W20
	0x037DD948 BL 0x30D9A00
	0x037DD94C LDR X0, [X24]
	0x037DD950 LDR W20, [X31 + 0x18]
	0x037DD954 LDR W8, [X0 + 0xE0]
	0x037DD958 CBNZ W8, 0x37DD964
	0x037DD95C BL 0x1C16DFC
	0x037DD960 LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC05000
	007 Move X22, 0x93F000
	008 Move W8, [X21+701]
	009 Move X22, [X22+608]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x93F000
	017 Move X0, [X0+608]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+701], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move X1, X19
	024 Call 0x21A5990, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {40}
	029 Move X0, [X19]
	030 Compare X0, 0
	031 JumpIfEqual {47}
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call Camera.get_stereoEnabled, X0
	039 Return X0
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move W0, W31
	045 Move X30, [X31+48]
	046 Return X0
	047 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputAction get_positionAction()

Disassembly:
	0x037DDF10 ADD X11, X11, 0x98A
	0x037DDF14 ADR X9, 0x14
	0x037DDF18 LDRB W10, [X11, X8, LSL]

ISIL:
	001 Add X0, X0, 48
	002 Move X1, X31
	003 Call InputActionProperty.get_action, X0
	004 Return X0

Method: System.Void set_positionAction(UnityEngine.InputSystem.InputAction value)

Disassembly:
	0x037DDF1C ADD X9, X9, X10, 0x2, LSL
	0x037DDF20 MOVZ W27, 0x4
	0x037DDF24 BR X9
	0x037DDF28 MOV W27, W22
	0x037DDF2C B 0x37DDF6C
	0x037DDF30 MOVZ W27, 0x8
	0x037DDF34 B 0x37DDF6C
	0x037DDF38 MOVZ W27, 0x4C
	0x037DDF3C B 0x37DDF6C
	0x037DDF40 MOVZ W27, 0x1
	0x037DDF44 B 0x37DDF6C
	0x037DDF48 MOVZ W27, 0x68
	0x037DDF4C B 0x37DDF6C
	0x037DDF50 MOVZ W27, 0xC
	0x037DDF54 B 0x37DDF6C
	0x037DDF58 MOVZ W27, 0x10
	0x037DDF5C B 0x37DDF6C
	0x037DDF60 MOV W27, W31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 Move X19, X0
	005 Add X0, X31, 24
	006 Move X2, X31
	007 Move [X31+24], X31
	008 Move [X31+32], X31
	009 Move [X31+40], X31
	010 Call InputActionProperty..ctor, X0, X1
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Move X8, [X31+40]
	013 Add X1, X31, 0
	014 Move X0, X19
	015 Move [X31], V0
	016 Move [X31+16], X8
	017 Call TrackedPoseDriver.set_positionInput, X0, X1
	018 Move X30, [X31+48]
	019 Move X19, [X31+56]
	020 Add X31, X31, 64
	021 Return 

Method: UnityEngine.InputSystem.InputAction get_rotationAction()

Disassembly:
	0x037DDF64 B 0x37DDF6C
	0x037DDF68 MOVZ W27, 0x20
	0x037DDF6C ADRP X8, 0x96B000

ISIL:
	001 Add X0, X0, 72
	002 Move X1, X31
	003 Call InputActionProperty.get_action, X0
	004 Return X0

Method: System.Void set_rotationAction(UnityEngine.InputSystem.InputAction value)

Disassembly:
	0x037DDF70 LDR X0, [X19 + 0x18]
	0x037DDF74 LDR X8, [X8 + 0xE28]
	0x037DDF78 MOV X2, X31
	0x037DDF7C LDR X1, [X8]
	0x037DDF80 BL 0x321BA08
	0x037DDF84 CMP W27, 0x4
	0x037DDF88 TBZ X0, 0x0, 0x37DDF98
	0x037DDF8C MOVZ W8, 0x4
	0x037DDF90 CSEL W27, W27, W8, HI
	0x037DDF94 B 0x37DDFAC
	0x037DDF98 B.CC 0x37DDFAC
	0x037DDF9C AND W8, W25, 0x3
	0x037DDFA0 CBZ W8, 0x37DDFAC
	0x037DDFA4 ADD W8, W25, 0x4
	0x037DDFA8 AND W25, W8, 0xFFFFFFFC
	0x037DDFAC SUB W8, W20, 0x1
	0x037DDFB0 CMP W8, 0x8
	0x037DDFB4 B.HI 0x37DE3CC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 Move X19, X0
	005 Add X0, X31, 24
	006 Move X2, X31
	007 Move [X31+24], X31
	008 Move [X31+32], X31
	009 Move [X31+40], X31
	010 Call InputActionProperty..ctor, X0, X1
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Move X8, [X31+40]
	013 Add X1, X31, 0
	014 Move X0, X19
	015 Move [X31], V0
	016 Move [X31+16], X8
	017 Call TrackedPoseDriver.set_rotationInput, X0, X1
	018 Move X30, [X31+48]
	019 Move X19, [X31+56]
	020 Add X31, X31, 64
	021 Return 

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()

Disassembly:
	0x037DDFB8 ADRP X11, 0xFFFFFFFFFD3BA000

ISIL:
	001 Return 

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()

Disassembly:
	0x037DDFBC ADD X11, X11, 0x994
	0x037DDFC0 ADR X9, 0x10
	0x037DDFC4 LDRB W10, [X11, X8, LSL]
	0x037DDFC8 ADD X9, X9, X10, 0x2, LSL
	0x037DDFCC BR X9
	0x037DDFD0 LDR X0, [X31 + 0x10]
	0x037DDFD4 MOV X1, X26
	0x037DDFD8 MOV X2, X31
	0x037DDFDC BL 0x3816074
	0x037DDFE0 ADRP X8, 0x968000
	0x037DDFE4 LDR X8, [X8 + 0x350]
	0x037DDFE8 STP X0, X1, [X31 + 0x40]
	0x037DDFEC ADD X0, X31, 0x40
	0x037DDFF0 MOV X2, X31
	0x037DDFF4 LDR X8, [X8]
	0x037DDFF8 MOV X1, X8
	0x037DDFFC BL 0x3816520
	0x037DE000 STP X0, X1, [X31 + 0x40]
	0x037DE004 ADD X0, X31, 0x40
	0x037DE008 MOV W1, W25
	0x037DE00C MOV X2, X31
	0x037DE010 BL 0x3816684
	0x037DE014 MOV X8, X0
	0x037DE018 LDR X0, [X21]
	0x037DE01C STP X8, X1, [X31 + 0x40]
	0x037DE020 LDR W8, [X0 + 0xE0]
	0x037DE024 CBNZ W8, 0x37DE030
	0x037DE028 BL 0x1C16DFC
	0x037DE02C LDR X0, [X21]
	0x037DE030 LDR X8, [X0 + 0xB8]
	0x037DE034 LDR W1, [X8 + 0x4]
	0x037DE038 B 0x37DE3AC
	0x037DE03C LDR X0, [X31 + 0x10]
	0x037DE040 MOV X1, X26
	0x037DE044 MOV X2, X31
	0x037DE048 BL 0x3816074

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X8, [X0+64]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {24}
	008 Move X8, [X19+56]
	009 Compare X8, 0
	010 JumpIfNotEqual {24}
	011 Move X1, [X19+160]
	012 Compare X1, 0
	013 JumpIfEqual {24}
	014 Add X0, X31, 8
	015 Move X2, X31
	016 Move [X31+8], X31
	017 Move [X31+16], X31
	018 Move [X31+24], X31
	019 Call InputActionProperty..ctor, X0, X1
	020 Move X8, [X31+24]
	021 NotImplemented "Instruction LDUR not yet implemented."
	022 Move [X19+64], X8
	023 Move [X19+3], V0
	024 Move X8, [X19+88]
	025 Compare X8, 0
	026 JumpIfNotEqual {43}
	027 Move X8, [X19+80]
	028 Compare X8, 0
	029 JumpIfNotEqual {43}
	030 Move X1, [X19+168]
	031 Compare X1, 0
	032 JumpIfEqual {43}
	033 Add X0, X31, 8
	034 Move X2, X31
	035 Move [X31+8], X31
	036 Move [X31+16], X31
	037 Move [X31+24], X31
	038 Call InputActionProperty..ctor, X0, X1
	039 Move X8, [X31+24]
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 Move [X19+88], X8
	042 Move [X19+72], V0
	043 Move X30, [X31+32]
	044 Move X19, [X31+40]
	045 Add X31, X31, 48
	046 Return 

Method: System.Void .ctor()

Disassembly:
	0x037DE04C ADRP X8, 0x96A000
	0x037DE050 LDR X8, [X8 + 0x598]
	0x037DE054 STP X0, X1, [X31 + 0x40]
	0x037DE058 ADD X0, X31, 0x40
	0x037DE05C MOV X2, X31
	0x037DE060 LDR X8, [X8]
	0x037DE064 MOV X1, X8
	0x037DE068 BL 0x3816520
	0x037DE06C STP X0, X1, [X31 + 0x40]
	0x037DE070 ADD X0, X31, 0x40
	0x037DE074 MOV W1, W25
	0x037DE078 MOV X2, X31
	0x037DE07C BL 0x3816684
	0x037DE080 MOV X8, X0
	0x037DE084 LDR X0, [X21]
	0x037DE088 STP X8, X1, [X31 + 0x40]
	0x037DE08C LDR W8, [X0 + 0xE0]
	0x037DE090 CBNZ W8, 0x37DE09C
	0x037DE094 BL 0x1C16DFC
	0x037DE098 LDR X0, [X21]
	0x037DE09C LDR X8, [X0 + 0xB8]
	0x037DE0A0 LDR W1, [X8 + 0x3C]
	0x037DE0A4 B 0x37DE3AC
	0x037DE0A8 LDR X0, [X31 + 0x10]
	0x037DE0AC MOV X1, X26
	0x037DE0B0 MOV X2, X31
	0x037DE0B4 BL 0x3816074
	0x037DE0B8 ADRP X8, 0x969000
	0x037DE0BC LDR X8, [X8 + 0x808]
	0x037DE0C0 STP X0, X1, [X31 + 0x40]
	0x037DE0C4 ADD X0, X31, 0x40
	0x037DE0C8 MOV X2, X31
	0x037DE0CC LDR X8, [X8]
	0x037DE0D0 MOV X1, X8
	0x037DE0D4 BL 0x3816520
	0x037DE0D8 STP X0, X1, [X31 + 0x40]
	0x037DE0DC ADD X0, X31, 0x40
	0x037DE0E0 MOV W1, W25
	0x037DE0E4 MOV X2, X31
	0x037DE0E8 BL 0x3816684
	0x037DE0EC MOV X8, X0
	0x037DE0F0 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBFB000
	005 Move W8, [X20+1923]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x916000
	010 Move X0, [X0+1440]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1923], W8
	014 Move X8, 0x916000
	015 Move X8, [X8+1440]
	016 Move X20, 0xBFB000
	017 Move X8, [X8]
	018 Move X8, [X8+184]
	019 Move V0, [X8]
	020 Move V1, [X8+8]
	021 Move [X19+120], D0
	022 Move [X19+128], S1
	023 Move W8, [X20+1939]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x917000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1939], W8
	031 Move X8, 0x917000
	032 Move X8, [X8+1448]
	033 Move W9, 1
	034 Move X0, X19
	035 Move X1, X31
	036 Move X8, [X8]
	037 Move X8, [X8+184]
	038 Move V0, [X8]
	039 Move W8, 3
	040 Move [X19+148], W8
	041 Move [X19+155], W9
	042 Move [X19+132], V0
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Call MonoBehaviour..ctor, X0
	047 Return 

