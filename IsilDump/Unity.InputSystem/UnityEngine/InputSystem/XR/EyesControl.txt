Type: UnityEngine.InputSystem.XR.EyesControl

Method: UnityEngine.InputSystem.Controls.Vector3Control get_leftEyePosition()

Disassembly:
	0x037DFA30 MOV X20, X0
	0x037DFA34 ADD X0, X31, 0x8

ISIL:
	001 Move X0, [X0+408]
	002 Return X0

Method: System.Void set_leftEyePosition(UnityEngine.InputSystem.Controls.Vector3Control value)

Disassembly:
	0x037DFA38 MOVZ W2, 0x410
	0x037DFA3C MOV W1, W31

ISIL:
	001 Move [X0+408], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.QuaternionControl get_leftEyeRotation()

Disassembly:
	0x037DFA40 STR X8, [X31 + 0x418]
	0x037DFA44 ADD X21, X31, 0x8

ISIL:
	001 Move X0, [X0+416]
	002 Return X0

Method: System.Void set_leftEyeRotation(UnityEngine.InputSystem.Controls.QuaternionControl value)

Disassembly:
	0x037DFA48 BL 0x3EB1B10
	0x037DFA4C CBZ X20, 0x37DFB24

ISIL:
	001 Move [X0+416], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.Vector3Control get_rightEyePosition()

Disassembly:
	0x037DFA50 LDR W24, [X20 + 0x18]
	0x037DFA54 MOVZ W8, 0x400

ISIL:
	001 Move X0, [X0+424]
	002 Return X0

Method: System.Void set_rightEyePosition(UnityEngine.InputSystem.Controls.Vector3Control value)

Disassembly:
	0x037DFA58 ADD X0, X31, 0x0
	0x037DFA5C MOVZ W1, 0x58

ISIL:
	001 Move [X0+424], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.QuaternionControl get_rightEyeRotation()

Disassembly:
	0x037DFA60 CMP W24, 0x400
	0x037DFA64 MOVZ W2, 0x48

ISIL:
	001 Move X0, [X0+432]
	002 Return X0

Method: System.Void set_rightEyeRotation(UnityEngine.InputSystem.Controls.QuaternionControl value)

Disassembly:
	0x037DFA68 MOVZ W3, 0x55
	0x037DFA6C MOVZ W4, 0x30

ISIL:
	001 Move [X0+432], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.Vector3Control get_fixationPoint()

Disassembly:
	0x037DFA70 MOV X5, X31
	0x037DFA74 CSEL W23, W24, W8, LT

ISIL:
	001 Move X0, [X0+440]
	002 Return X0

Method: System.Void set_fixationPoint(UnityEngine.InputSystem.Controls.Vector3Control value)

Disassembly:
	0x037DFA78 STR W31, [X31]
	0x037DFA7C BL 0x375AA28

ISIL:
	001 Move [X0+440], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_leftEyeOpenAmount()

Disassembly:
	0x037DFA80 LDR W1, [X31]
	0x037DFA84 ADD X0, X31, 0x0

ISIL:
	001 Move X0, [X0+448]
	002 Return X0

Method: System.Void set_leftEyeOpenAmount(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x037DFA88 MOVZ W2, 0x410
	0x037DFA8C MOV X3, X31

ISIL:
	001 Move [X0+448], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_rightEyeOpenAmount()

Disassembly:
	0x037DFA90 STR X31, [X31]
	0x037DFA94 BL 0x37FE6B4

ISIL:
	001 Move X0, [X0+456]
	002 Return X0

Method: System.Void set_rightEyeOpenAmount(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x037DFA98 LDR X25, [X31]
	0x037DFA9C ADD X21, X21, 0x10

ISIL:
	001 Move [X0+456], X1
	002 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x037DFAA0 MOVZ W2, 0x400
	0x037DFAA4 MOV X0, X21
	0x037DFAA8 MOV W1, W31
	0x037DFAAC BL 0x3EB1B10
	0x037DFAB0 STR X25, [X31 + 0x8]
	0x037DFAB4 STP W31, W23, [X31 + 0x10]
	0x037DFAB8 LDR W8, [X20 + 0x18]
	0x037DFABC ADD X9, X20, 0x20
	0x037DFAC0 CMP W8, 0x0
	0x037DFAC4 CSEL X8, X31, X9, EQ
	0x037DFAC8 CMP W24, 0x1
	0x037DFACC B.LT 0x37DFAE8
	0x037DFAD0 CMP W23, 0x1
	0x037DFAD4 CSINC W9, W23, W31, GT
	0x037DFAD8 LDRB W10, [X8], #0x1
	0x037DFADC SUBS X9, X9, 0x1
	0x037DFAE0 STRB W10, [X21], #0x1
	0x037DFAE4 B.NE 0x37DFAD8
	0x037DFAE8 ADD X1, X31, 0x8
	0x037DFAEC MOVZ W2, 0x410
	0x037DFAF0 MOV X0, X19
	0x037DFAF4 BL 0x3EB1AC0
	0x037DFAF8 LDR X8, [X22 + 0x28]
	0x037DFAFC LDR X9, [X31 + 0x418]
	0x037DFB00 CMP X8, X9
	0x037DFB04 B.NE 0x37DFB6C
	0x037DFB08 ADD X31, X31, 0x420
	0x037DFB0C LDP X20, X19, [X31 + 0x40]
	0x037DFB10 LDP X22, X21, [X31 + 0x30]
	0x037DFB14 LDP X24, X23, [X31 + 0x20]
	0x037DFB18 LDP X30, X25, [X31 + 0x10]
	0x037DFB1C LDR X29, [X31], #0x50
	0x037DFB20 RET
	0x037DFB24 ADRP X0, 0x919000
	0x037DFB28 LDR X0, [X0 + 0x528]
	0x037DFB2C BL 0x1C16D08
	0x037DFB30 BL 0x1C16F10
	0x037DFB34 MOV X19, X0
	0x037DFB38 ADRP X0, 0x96A000
	0x037DFB3C LDR X0, [X0 + 0x48]
	0x037DFB40 BL 0x1C16D08
	0x037DFB44 MOV X1, X0
	0x037DFB48 MOV X0, X19
	0x037DFB4C MOV X2, X31
	0x037DFB50 BL 0x330E100
	0x037DFB54 ADRP X0, 0x96A000
	0x037DFB58 LDR X0, [X0 + 0x50]
	0x037DFB5C BL 0x1C16D08
	0x037DFB60 MOV X1, X0
	0x037DFB64 MOV X0, X19
	0x037DFB68 BL 0x1C16DEC
	0x037DFB6C BL 0x3EB1B20
	0x037DFB70 STP W1, W2, [X0]
	0x037DFB74 RET
	0x037DFB78 LDR W0, [X0]
	0x037DFB7C RET
	0x037DFB80 STR W1, [X0]
	0x037DFB84 RET
	0x037DFB88 LDR W0, [X0 + 0x4]
	0x037DFB8C RET
	0x037DFB90 STR W1, [X0 + 0x4]
	0x037DFB94 RET
	0x037DFB98 STR X30, [X31 - 0x10]!
	0x037DFB9C ADD X0, X31, 0x8
	0x037DFBA0 MOVZ W1, 0x58
	0x037DFBA4 MOVZ W2, 0x48
	0x037DFBA8 MOVZ W3, 0x53
	0x037DFBAC MOVZ W4, 0x30
	0x037DFBB0 MOV X5, X31
	0x037DFBB4 STR W31, [X31 + 0x8]
	0x037DFBB8 BL 0x375AA28
	0x037DFBBC LDR W0, [X31 + 0x8]
	0x037DFBC0 LDR X30, [X31], #0x10
	0x037DFBC4 RET
	0x037DFBC8 STR X30, [X31 - 0x10]!
	0x037DFBCC ADD X0, X31, 0x8
	0x037DFBD0 MOVZ W1, 0x58
	0x037DFBD4 MOVZ W2, 0x48
	0x037DFBD8 MOVZ W3, 0x53
	0x037DFBDC MOVZ W4, 0x30
	0x037DFBE0 MOV X5, X31
	0x037DFBE4 STR W31, [X31 + 0x8]
	0x037DFBE8 BL 0x375AA28
	0x037DFBEC LDR W0, [X31 + 0x8]
	0x037DFBF0 LDR X30, [X31], #0x10
	0x037DFBF4 RET
	0x037DFBF8 LDR X0, [X0 + 0x8]
	0x037DFBFC RET
	0x037DFC00 SUB X31, X31, 0x20
	0x037DFC04 STR X30, [X31 + 0x10]
	0x037DFC08 ADD X0, X31, 0x18
	0x037DFC0C MOVZ W1, 0x58
	0x037DFC10 MOVZ W2, 0x48
	0x037DFC14 MOVZ W3, 0x53
	0x037DFC18 MOVZ W4, 0x30
	0x037DFC1C MOV X5, X31
	0x037DFC20 STR W31, [X31 + 0x18]
	0x037DFC24 BL 0x375AA28
	0x037DFC28 LDR W1, [X31 + 0x18]
	0x037DFC2C ADD X0, X31, 0x8
	0x037DFC30 MOVZ W2, 0x10
	0x037DFC34 MOV X3, X31
	0x037DFC38 STR X31, [X31 + 0x8]
	0x037DFC3C BL 0x37FE6B4
	0x037DFC40 LDP X0, X30, [X31 + 0x8]
	0x037DFC44 MOV X1, X31
	0x037DFC48 ADD X31, X31, 0x20
	0x037DFC4C RET
	0x037DFC50 STP W1, W2, [X0]
	0x037DFC54 STR W3, [X0 + 0x8]
	0x037DFC58 RET

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0xC03000
	014 Move X22, 0x96A000
	015 Move X24, 0x966000
	016 Move X29, 0x96A000
	017 Move X26, 0x966000
	018 Move X28, 0x96A000
	019 Move X27, 0x96A000
	020 Move X25, 0x96A000
	021 Move X23, 0x96A000
	022 Move X21, 0x966000
	023 Move X22, [X22+3400]
	024 Move X24, [X24+3536]
	025 Move X29, [X29+3408]
	026 Move X26, [X26+3800]
	027 Move X28, [X28+3416]
	028 Move X27, [X27+3424]
	029 Move W8, [X20+712]
	030 Move X25, [X25+3832]
	031 Move X23, [X23+3840]
	032 Move X21, [X21+3632]
	033 Move X19, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {73}
	038 Move X0, 0x96A000
	039 Move X0, [X0+3848]
	040 Call 0x1C17CF4
	041 Move X0, 0x966000
	042 Move X0, [X0+3632]
	043 Call 0x1C17CF4
	044 Move X0, 0x966000
	045 Move X0, [X0+3800]
	046 Call 0x1C17CF4
	047 Move X0, 0x966000
	048 Move X0, [X0+3536]
	049 Call 0x1C17CF4
	050 Move X0, 0x96A000
	051 Move X0, [X0+3832]
	052 Call 0x1C17CF4
	053 Move X0, 0x96A000
	054 Move X0, [X0+3416]
	055 Call 0x1C17CF4
	056 Move X0, 0x96A000
	057 Move X0, [X0+3400]
	058 Call 0x1C17CF4
	059 Move X0, 0x96A000
	060 Move X0, [X0+3856]
	061 Call 0x1C17CF4
	062 Move X0, 0x96A000
	063 Move X0, [X0+3840]
	064 Call 0x1C17CF4
	065 Move X0, 0x96A000
	066 Move X0, [X0+3424]
	067 Call 0x1C17CF4
	068 Move X0, 0x96A000
	069 Move X0, [X0+3408]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X20+712], W8
	073 Move X1, [X22]
	074 Move X2, [X24]
	075 Move X0, X19
	076 Call 0x21FD754, X0, X1
	077 Move [X19+408], X0
	078 Move X1, [X29]
	079 Move X2, [X26]
	080 Move X0, X19
	081 Call 0x21FD754, X0, X1
	082 Move [X19+416], X0
	083 Move X1, [X28]
	084 Move X2, [X24]
	085 Move X0, X19
	086 Call 0x21FD754, X0, X1
	087 Move [X19+424], X0
	088 Move X1, [X27]
	089 Move X2, [X26]
	090 Move X0, X19
	091 Call 0x21FD754, X0, X1
	092 Move [X19+432], X0
	093 Move X1, [X25]
	094 Move X2, [X24]
	095 Move X0, X19
	096 Call 0x21FD754, X0, X1
	097 Move [X19+440], X0
	098 Move X1, [X23]
	099 Move X2, [X21]
	100 Move X0, X19
	101 Call 0x21FD754, X0, X1
	102 Move [X19+448], X0
	103 Move X8, 0x96A000
	104 Move X8, [X8+3856]
	105 Move X2, [X21]
	106 Move X0, X19
	107 Move X1, [X8]
	108 Call 0x21FD754, X0, X1
	109 Move [X19+456], X0
	110 Move X8, 0x96A000
	111 Move X8, [X8+3848]
	112 Move X0, X19
	113 Move X20, [X31+80]
	114 Move X19, [X31+88]
	115 Move X22, [X31+64]
	116 Move X21, [X31+72]
	117 Move X1, [X8]
	118 Move X24, [X31+48]
	119 Move X23, [X31+56]
	120 Move X26, [X31+32]
	121 Move X25, [X31+40]
	122 Move X28, [X31+16]
	123 Move X27, [X31+24]
	124 Move X29, [X31+96]
	125 Move X30, [X31+104]
	126 Call InputControl`1<Eyes>.FinishSetup, X0
	127 Return 

Method: UnityEngine.InputSystem.XR.Eyes ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x037DFC5C LDR W0, [X0]
	0x037DFC60 RET
	0x037DFC64 STR W1, [X0]
	0x037DFC68 RET
	0x037DFC6C LDR W0, [X0 + 0x4]
	0x037DFC70 RET
	0x037DFC74 STR W1, [X0 + 0x4]
	0x037DFC78 RET
	0x037DFC7C LDR W0, [X0 + 0x8]
	0x037DFC80 RET
	0x037DFC84 STR W1, [X0 + 0x8]
	0x037DFC88 RET
	0x037DFC8C STR X30, [X31 - 0x10]!
	0x037DFC90 ADD X0, X31, 0x8
	0x037DFC94 MOVZ W1, 0x58
	0x037DFC98 MOVZ W2, 0x48
	0x037DFC9C MOVZ W3, 0x43
	0x037DFCA0 MOVZ W4, 0x30
	0x037DFCA4 MOV X5, X31
	0x037DFCA8 STR W31, [X31 + 0x8]
	0x037DFCAC BL 0x375AA28
	0x037DFCB0 LDR W0, [X31 + 0x8]
	0x037DFCB4 LDR X30, [X31], #0x10
	0x037DFCB8 RET
	0x037DFCBC STR X30, [X31 - 0x10]!
	0x037DFCC0 ADD X0, X31, 0x8
	0x037DFCC4 MOVZ W1, 0x58
	0x037DFCC8 MOVZ W2, 0x48
	0x037DFCCC MOVZ W3, 0x43
	0x037DFCD0 MOVZ W4, 0x30
	0x037DFCD4 MOV X5, X31
	0x037DFCD8 STR W31, [X31 + 0x8]
	0x037DFCDC BL 0x375AA28
	0x037DFCE0 LDR W0, [X31 + 0x8]
	0x037DFCE4 LDR X30, [X31], #0x10
	0x037DFCE8 RET
	0x037DFCEC STR X30, [X31 - 0x10]!
	0x037DFCF0 ADD X0, X31, 0x8
	0x037DFCF4 MOVZ W1, 0x58
	0x037DFCF8 MOVZ W2, 0x48
	0x037DFCFC MOVZ W3, 0x55
	0x037DFD00 MOVZ W4, 0x30
	0x037DFD04 MOV X5, X31
	0x037DFD08 STR W31, [X31 + 0x8]
	0x037DFD0C BL 0x375AA28
	0x037DFD10 LDR W0, [X31 + 0x8]
	0x037DFD14 LDR X30, [X31], #0x10
	0x037DFD18 RET
	0x037DFD1C STR X30, [X31 - 0x10]!
	0x037DFD20 ADD X0, X31, 0x8
	0x037DFD24 MOVZ W1, 0x58
	0x037DFD28 MOVZ W2, 0x48
	0x037DFD2C MOVZ W3, 0x55
	0x037DFD30 MOVZ W4, 0x30
	0x037DFD34 MOV X5, X31
	0x037DFD38 STR W31, [X31 + 0x8]
	0x037DFD3C BL 0x375AA28
	0x037DFD40 LDR W0, [X31 + 0x8]
	0x037DFD44 LDR X30, [X31], #0x10
	0x037DFD48 RET
	0x037DFD4C STR X30, [X31 - 0x10]!
	0x037DFD50 ADD X0, X31, 0x8
	0x037DFD54 MOVZ W1, 0x58
	0x037DFD58 MOVZ W2, 0x48
	0x037DFD5C MOVZ W3, 0x49
	0x037DFD60 MOVZ W4, 0x30
	0x037DFD64 MOV X5, X31
	0x037DFD68 STR W31, [X31 + 0x8]
	0x037DFD6C BL 0x375AA28
	0x037DFD70 LDR W0, [X31 + 0x8]
	0x037DFD74 LDR X30, [X31], #0x10
	0x037DFD78 RET
	0x037DFD7C STR X30, [X31 - 0x10]!
	0x037DFD80 ADD X0, X31, 0x8
	0x037DFD84 MOVZ W1, 0x58
	0x037DFD88 MOVZ W2, 0x48
	0x037DFD8C MOVZ W3, 0x49
	0x037DFD90 MOVZ W4, 0x30
	0x037DFD94 MOV X5, X31
	0x037DFD98 STR W31, [X31 + 0x8]
	0x037DFD9C BL 0x375AA28
	0x037DFDA0 LDR W0, [X31 + 0x8]
	0x037DFDA4 LDR X30, [X31], #0x10
	0x037DFDA8 RET
	0x037DFDAC LDR X0, [X0 + 0x1F0]
	0x037DFDB0 RET
	0x037DFDB4 STR X1, [X0 + 0x1F0]
	0x037DFDB8 RET
	0x037DFDBC LDR X0, [X0 + 0x1F8]
	0x037DFDC0 RET
	0x037DFDC4 STR X1, [X0 + 0x1F8]
	0x037DFDC8 RET
	0x037DFDCC STP X30, X19, [X31 - 0x10]!
	0x037DFDD0 LDRB W8, [X0 + 0x200]
	0x037DFDD4 MOV X19, X0
	0x037DFDD8 CBNZ W8, 0x37DFDE4
	0x037DFDDC MOV X0, X19
	0x037DFDE0 BL 0x37DFDF0
	0x037DFDE4 LDR W0, [X19 + 0x204]
	0x037DFDE8 LDP X30, X19, [X31], #0x10
	0x037DFDEC RET
	0x037DFDF0 STR X30, [X31 - 0x20]!
	0x037DFDF4 STP X20, X19, [X31 + 0x10]
	0x037DFDF8 ADRP X20, 0xC02000
	0x037DFDFC LDRB W8, [X20 + 0x2CE]
	0x037DFE00 MOV X19, X0
	0x037DFE04 TBNZ X8, 0x0, 0x37DFE1C
	0x037DFE08 ADRP X0, 0x96A000
	0x037DFE0C LDR X0, [X0 + 0x58]
	0x037DFE10 BL 0x1C16CF4
	0x037DFE14 MOVZ W8, 0x1
	0x037DFE18 STRB W8, [X20 + 0x2CE]
	0x037DFE1C LDR X0, [X19 + 0x120]
	0x037DFE20 MOV X1, X31
	0x037DFE24 BL 0x32277A8

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X23
	012 Move [X31+128], X22
	013 Move [X31+136], X21
	014 Move [X31+144], X20
	015 Move [X31+152], X19
	016 Move X22, 0xC03000
	017 Move W9, [X22+713]
	018 Move X20, X1
	019 Move X21, X0
	020 Move X19, X8
	021 Move TEMP, X9
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0x96A000
	026 Move X0, [X0+3344]
	027 Call 0x1C17CF4
	028 Move X0, 0x96A000
	029 Move X0, [X0+3360]
	030 Call 0x1C17CF4
	031 Move X0, 0x968000
	032 Move X0, [X0+40]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+713], W8
	036 Move X0, [X21+408]
	037 Compare X0, 0
	038 JumpIfEqual {153}
	039 Move X22, 0x96A000
	040 Move X22, [X22+3344]
	041 Move X1, X20
	042 Move X2, [X22]
	043 Call InputControl`1<Vector3>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	044 Move X0, [X21+416]
	045 Compare X0, 0
	046 JumpIfEqual {153}
	047 Move X23, 0x96A000
	048 Move X23, [X23+3360]
	049 Move X1, X20
	050 Move V8, V0
	051 Move V9, V1
	052 Move X2, [X23]
	053 Move V10, V2
	054 Call InputControl`1<Quaternion>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	055 Move X0, [X21+424]
	056 Compare X0, 0
	057 JumpIfEqual {153}
	058 Move X2, [X22]
	059 Move X1, X20
	060 Move V11, V0
	061 Move V12, V1
	062 Move V13, V2
	063 Move V14, V3
	064 Call InputControl`1<Vector3>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	065 Move X0, [X21+432]
	066 Compare X0, 0
	067 JumpIfEqual {153}
	068 Move X2, [X23]
	069 Move X1, X20
	070 Move [X31+16], S2
	071 Move [X31+24], S1
	072 Move [X31+24], S0
	073 Move [X31+32], S14
	074 Move [X31+32], S13
	075 Move [X31+40], S12
	076 Move [X31+40], S11
	077 Move [X31+48], S10
	078 Call InputControl`1<Quaternion>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	079 Move X0, [X21+440]
	080 Move [X31+8], S1
	081 Move [X31+16], S0
	082 Compare X0, 0
	083 JumpIfEqual {153}
	084 Move X2, [X22]
	085 Move X1, X20
	086 Move V12, V2
	087 Move V13, V3
	088 Move V11, V9
	089 Call InputControl`1<Vector3>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	090 Move X0, [X21+448]
	091 Compare X0, 0
	092 JumpIfEqual {153}
	093 Move X22, 0x968000
	094 Move X22, [X22+40]
	095 Move X1, X20
	096 Move V14, V0
	097 Move V10, V1
	098 Move X2, [X22]
	099 Move V15, V2
	100 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	101 Move X0, [X21+456]
	102 Compare X0, 0
	103 JumpIfEqual {153}
	104 Move X2, [X22]
	105 Move X1, X20
	106 Move V9, V0
	107 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	108 Move V2, [X31+44]
	109 Move V1, [X31+40]
	110 Move [X19], S8
	111 Move [X19+8], S11
	112 Move [X19+48], S12
	113 Move [X19+56], S13
	114 Move [X19+56], S14
	115 Move [X19+64], S10
	116 Move [X19+8], S2
	117 Move [X19+16], S1
	118 Move V2, [X31+36]
	119 Move V1, [X31+32]
	120 Move [X19+64], S15
	121 Move [X19+72], S9
	122 Move [X19+72], S0
	123 Move X22, [X31+128]
	124 Move X21, [X31+136]
	125 Move [X19+16], S2
	126 Move [X19+24], S1
	127 Move V2, [X31+28]
	128 Move V1, [X31+24]
	129 Move X30, [X31+112]
	130 Move X23, [X31+120]
	131 Move D9, [X31+96]
	132 Move D8, [X31+104]
	133 Move D11, [X31+80]
	134 Move D10, [X31+88]
	135 Move [X19+24], S2
	136 Move [X19+32], S1
	137 Move V2, [X31+20]
	138 Move V1, [X31+16]
	139 Move D13, [X31+64]
	140 Move D12, [X31+72]
	141 Move D15, [X31+48]
	142 Move D14, [X31+56]
	143 Move [X19+32], S2
	144 Move [X19+40], S1
	145 Move V2, [X31+12]
	146 Move V1, [X31+8]
	147 Move [X19+40], S2
	148 Move [X19+48], S1
	149 Move X20, [X31+144]
	150 Move X19, [X31+152]
	151 Add X31, X31, 160
	152 Return X0
	153 Call 0x1C17F20

Method: System.Void WriteValueIntoState(UnityEngine.InputSystem.XR.Eyes value, System.Void* statePtr)

Disassembly:
	0x037DFE28 TBNZ X0, 0x0, 0x37DFE4C
	0x037DFE2C ADRP X8, 0x96A000
	0x037DFE30 LDR X8, [X8 + 0x58]
	0x037DFE34 LDR X0, [X19 + 0x120]
	0x037DFE38 LDR X1, [X8]
	0x037DFE3C BL 0x2211BD4
	0x037DFE40 UBFM X8, X0, 0x20, 0x3F
	0x037DFE44 STR W8, [X19 + 0x204]
	0x037DFE48 STR W1, [X19 + 0x208]
	0x037DFE4C MOVZ W8, 0x1
	0x037DFE50 STRB W8, [X19 + 0x200]
	0x037DFE54 LDP X20, X19, [X31 + 0x10]
	0x037DFE58 LDR X30, [X31], #0x20
	0x037DFE5C RET
	0x037DFE60 STP X30, X19, [X31 - 0x10]!
	0x037DFE64 LDRB W8, [X0 + 0x200]
	0x037DFE68 MOV X19, X0
	0x037DFE6C CBNZ W8, 0x37DFE78
	0x037DFE70 MOV X0, X19
	0x037DFE74 BL 0x37DFDF0
	0x037DFE78 LDR W0, [X19 + 0x208]
	0x037DFE7C LDP X30, X19, [X31], #0x10
	0x037DFE80 RET
	0x037DFE84 STP X30, X19, [X31 - 0x10]!
	0x037DFE88 MOV X1, X31
	0x037DFE8C MOV X19, X0
	0x037DFE90 BL 0x377A348
	0x037DFE94 LDR V0, [X19 + 0x1A]
	0x037DFE98 STR V0, [X19 + 0x1F]
	0x037DFE9C LDP X30, X19, [X31], #0x10
	0x037DFEA0 RET
	0x037DFEA4 MOV X1, X31
	0x037DFEA8 B 0x377A848
	0x037DFEAC STR X30, [X31 - 0x20]!
	0x037DFEB0 STP X20, X19, [X31 + 0x10]
	0x037DFEB4 ADRP X20, 0xC02000
	0x037DFEB8 ADRP X19, 0x93C000
	0x037DFEBC LDRB W8, [X20 + 0x2CF]
	0x037DFEC0 LDR X19, [X19 + 0x270]
	0x037DFEC4 TBNZ X8, 0x0, 0x37DFEE8
	0x037DFEC8 ADRP X0, 0x96A000
	0x037DFECC LDR X0, [X0 + 0x60]
	0x037DFED0 BL 0x1C16CF4
	0x037DFED4 ADRP X0, 0x93C000
	0x037DFED8 LDR X0, [X0 + 0x270]
	0x037DFEDC BL 0x1C16CF4
	0x037DFEE0 MOVZ W8, 0x1
	0x037DFEE4 STRB W8, [X20 + 0x2CF]
	0x037DFEE8 LDR X0, [X19]
	0x037DFEEC ADRP X19, 0x96A000
	0x037DFEF0 LDR W8, [X0 + 0xE0]
	0x037DFEF4 LDR X19, [X19 + 0x60]
	0x037DFEF8 CBNZ W8, 0x37DFF00
	0x037DFEFC BL 0x1C16DFC
	0x037DFF00 LDR X3, [X19]
	0x037DFF04 LDP X20, X19, [X31 + 0x10]
	0x037DFF08 MOV X0, X31
	0x037DFF0C MOV X1, X31
	0x037DFF10 MOV X2, X31
	0x037DFF14 LDR X30, [X31], #0x20
	0x037DFF18 B 0x220C738
	0x037DFF1C STR X30, [X31 - 0x20]!
	0x037DFF20 STP X20, X19, [X31 + 0x10]
	0x037DFF24 MOV X19, X0
	0x037DFF28 LDR W0, [X0]
	0x037DFF2C CBZ W0, 0x37DFF48
	0x037DFF30 BL 0x37E0004
	0x037DFF34 ADDS W31, W0, 0x1
	0x037DFF38 B.EQ 0x37DFF90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+408]
	007 Compare X0, 0
	008 JumpIfEqual {87}
	009 Move X8, [X0]
	010 Move X19, X2
	011 Move S1, [X1+4]
	012 Move S2, [X1+8]
	013 Move V0, [X1]
	014 Move X9, [X8+600]
	015 Move X2, [X8+608]
	016 Move X20, X1
	017 Move X1, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X0, [X21+416]
	020 Compare X0, 0
	021 JumpIfEqual {87}
	022 Move X8, [X0]
	023 Move S2, [X20+20]
	024 Move S3, [X20+24]
	025 Move S0, [X20+12]
	026 Move S1, [X20+16]
	027 Move X1, X19
	028 Move X9, [X8+600]
	029 Move X2, [X8+608]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move X0, [X21+424]
	032 Compare X0, 0
	033 JumpIfEqual {87}
	034 Move X8, [X0]
	035 Move S1, [X20+32]
	036 Move S2, [X20+36]
	037 Move V0, [X20+28]
	038 Move X1, X19
	039 Move X9, [X8+600]
	040 Move X2, [X8+608]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X0, [X21+432]
	043 Compare X0, 0
	044 JumpIfEqual {87}
	045 Move X8, [X0]
	046 Move S2, [X20+48]
	047 Move S3, [X20+52]
	048 Move S0, [X20+40]
	049 Move S1, [X20+44]
	050 Move X1, X19
	051 Move X9, [X8+600]
	052 Move X2, [X8+608]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move X0, [X21+440]
	055 Compare X0, 0
	056 JumpIfEqual {87}
	057 Move X8, [X0]
	058 Move S1, [X20+60]
	059 Move S2, [X20+64]
	060 Move V0, [X20+56]
	061 Move X1, X19
	062 Move X9, [X8+600]
	063 Move X2, [X8+608]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move X0, [X21+448]
	066 Compare X0, 0
	067 JumpIfEqual {87}
	068 Move X8, [X0]
	069 Move V0, [X20+68]
	070 Move X1, X19
	071 Move X9, [X8+600]
	072 Move X2, [X8+608]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X0, [X21+456]
	075 Compare X0, 0
	076 JumpIfEqual {87}
	077 Move X8, [X0]
	078 Move V0, [X20+72]
	079 Move X1, X19
	080 Move X20, [X31+16]
	081 Move X19, [X31+24]
	082 Move X3, [X8+600]
	083 Move X2, [X8+608]
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 CallNoReturn X3
	087 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x037DFF3C LDP X20, X19, [X31 + 0x10]
	0x037DFF40 LDR X30, [X31], #0x20
	0x037DFF44 RET
	0x037DFF48 ADRP X0, 0x914000
	0x037DFF4C LDR X0, [X0 + 0x5B0]
	0x037DFF50 BL 0x1C16D08
	0x037DFF54 BL 0x1C16F10
	0x037DFF58 MOV X19, X0
	0x037DFF5C ADRP X0, 0x969000
	0x037DFF60 LDR X0, [X0 + 0xAA8]
	0x037DFF64 BL 0x1C16D08
	0x037DFF68 MOV X1, X0
	0x037DFF6C MOV X0, X19
	0x037DFF70 MOV X2, X31
	0x037DFF74 BL 0x337DF1C
	0x037DFF78 ADRP X0, 0x96A000
	0x037DFF7C LDR X0, [X0 + 0x68]
	0x037DFF80 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC03000
	006 Move X21, 0x96A000
	007 Move W8, [X20+714]
	008 Move X21, [X21+3864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x96A000
	015 Move X0, [X0+3864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+714], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call InputControl`1<Eyes>..ctor, X0
	026 Return 

