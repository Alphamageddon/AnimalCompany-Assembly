Type: UnityEngine.InputSystem.XR.Haptics.GetCurrentHapticStateCommand

Method: UnityEngine.InputSystem.Utilities.FourCC get_Type()

Disassembly:
	0x037E0B98 LDUR X11, [X10 - 0x8]
	0x037E0B9C CMP X11, X21
	0x037E0BA0 B.EQ 0x37E0C6C
	0x037E0BA4 SUBS X9, X9, 0x1
	0x037E0BA8 ADD X10, X10, 0x10
	0x037E0BAC B.NE 0x37E0B98
	0x037E0BB0 MOVZ W2, 0x1
	0x037E0BB4 MOV X0, X20
	0x037E0BB8 MOV X1, X21
	0x037E0BBC BL 0x1C5C788
	0x037E0BC0 MOV X21, X0
	0x037E0BC4 B 0x37E0C7C

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 88
	004 Move W2, 72
	005 Move W3, 83
	006 Move W4, 48
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()

Disassembly:
	0x037E0BC8 LDR W9, [X10]
	0x037E0BCC ADD W9, W9, 0x1
	0x037E0BD0 ADD X8, X8, W9, 0x4, SXTW
	0x037E0BD4 ADD X21, X8, 0x138
	0x037E0BD8 LDR X22, [X21]
	0x037E0BDC ADD X0, X31, 0x170
	0x037E0BE0 ADD X1, X31, 0xC0
	0x037E0BE4 MOVZ W2, 0x60
	0x037E0BE8 BL 0x3EB1AC0
	0x037E0BEC LDR X2, [X21 + 0x8]
	0x037E0BF0 ADD X1, X31, 0x170
	0x037E0BF4 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 88
	004 Move W2, 72
	005 Move W3, 83
	006 Move W4, 48
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: UnityEngine.InputSystem.XR.Haptics.HapticState get_currentState()

Disassembly:
	0x037E0BF8 BLR X22
	0x037E0BFC LDR X8, [X23]

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: UnityEngine.InputSystem.XR.Haptics.GetCurrentHapticStateCommand Create()

Disassembly:
	0x037E0C00 LDR X8, [X8 + 0xB8]
	0x037E0C04 LDR X8, [X8 + 0x20]
	0x037E0C08 CBZ X8, 0x37E0D00
	0x037E0C0C LDR W9, [X8 + 0x18]
	0x037E0C10 CMP W9, W19
	0x037E0C14 B.LS 0x37E0D04
	0x037E0C18 MOVZ W9, 0xB8
	0x037E0C1C MADD X8, X24, X9, X8
	0x037E0C20 ADD X0, X8, 0x78
	0x037E0C24 MOV X1, X31
	0x037E0C28 BL 0x376BC1C
	0x037E0C2C LDR X8, [X23]
	0x037E0C30 LDR X8, [X8 + 0xB8]
	0x037E0C34 LDR X8, [X8 + 0x20]
	0x037E0C38 CBZ X8, 0x37E0D00
	0x037E0C3C LDR W9, [X8 + 0x18]
	0x037E0C40 CMP W9, W19
	0x037E0C44 B.LS 0x37E0D04
	0x037E0C48 MOVZ W9, 0xB8
	0x037E0C4C MOVI V0.2D, 0x0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Add X0, X31, 24
	004 Move W1, 88
	005 Move W2, 72
	006 Move W3, 83
	007 Move W4, 48
	008 Move X5, X31
	009 Move [X31+24], W31
	010 Call FourCC..ctor, X0, X1, X2, X3, X4
	011 Move W1, [X31+24]
	012 Add X0, X31, 8
	013 Move W2, 16
	014 Move X3, X31
	015 Move [X31+8], X31
	016 Call InputDeviceCommand..ctor, X0, X1, X2
	017 Move X0, [X31+8]
	018 Move X30, [X31+16]
	019 Move X1, X31
	020 Add X31, X31, 32
	021 Return X0

