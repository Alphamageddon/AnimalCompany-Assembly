Type: UnityEngine.InputSystem.XR.Haptics.SendBufferedHapticCommand

Method: UnityEngine.InputSystem.Utilities.FourCC get_Type()

Disassembly:
	0x037E0CEC LDP X20, X19, [X31 + 0x30]
	0x037E0CF0 LDP X22, X21, [X31 + 0x20]
	0x037E0CF4 LDP X24, X23, [X31 + 0x10]
	0x037E0CF8 LDP X29, X30, [X31], #0x40
	0x037E0CFC RET
	0x037E0D00 BL 0x1C16F20
	0x037E0D04 BL 0x1C16F28
	0x037E0D08 SUB X31, X31, 0x80
	0x037E0D0C STP X30, X23, [X31 + 0x50]
	0x037E0D10 STP X22, X21, [X31 + 0x60]
	0x037E0D14 STP X20, X19, [X31 + 0x70]
	0x037E0D18 ADRP X22, 0xC01000

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 88
	004 Move W2, 72
	005 Move W3, 85
	006 Move W4, 48
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()

Disassembly:
	0x037E0D1C LDRB W8, [X22 + 0x2E5]
	0x037E0D20 MOV X20, X2
	0x037E0D24 MOV X19, X1
	0x037E0D28 MOV X21, X0
	0x037E0D2C TBNZ X8, 0x0, 0x37E0D68
	0x037E0D30 ADRP X0, 0x968000
	0x037E0D34 LDR X0, [X0 + 0xAC8]
	0x037E0D38 BL 0x1C16CF4
	0x037E0D3C ADRP X0, 0x968000
	0x037E0D40 LDR X0, [X0 + 0x948]
	0x037E0D44 BL 0x1C16CF4
	0x037E0D48 ADRP X0, 0x965000

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move W1, 88
	004 Move W2, 72
	005 Move W3, 85
	006 Move W4, 48
	007 Move X5, X31
	008 Move [X31+8], W31
	009 Call FourCC..ctor, X0, X1, X2, X3, X4
	010 Move W0, [X31+8]
	011 Move X30, [X31+16]
	012 Return X0

Method: UnityEngine.InputSystem.XR.Haptics.SendBufferedHapticCommand Create(System.Byte[] rumbleBuffer)

Disassembly:
	0x037E0A0C LDR X8, [X8 + 0xB8]
	0x037E0A10 LDR X20, [X8 + 0x20]
	0x037E0A14 CBZ X20, 0x37E0D00
	0x037E0A18 MOV W22, W0
	0x037E0A1C TBZ X0, 0x0, 0x37E0A44
	0x037E0A20 LDR W8, [X20 + 0x18]
	0x037E0A24 CMP W8, W19
	0x037E0A28 B.LS 0x37E0D04
	0x037E0A2C MOVZ W8, 0xB8
	0x037E0A30 MOVI V0.2D, 0x0
	0x037E0A34 SMADDL X8, X19, X8, X20
	0x037E0A38 STUR V0, [X8 + 0x68]
	0x037E0A3C STUR V0, [X8 + 0x58]
	0x037E0A40 B 0x37E0A9C
	0x037E0A44 ADRP X9, 0x93B000
	0x037E0A48 LDR V0, [X21]
	0x037E0A4C LDR X8, [X21 + 0x10]
	0x037E0A50 LDR X9, [X9 + 0xDE8]
	0x037E0A54 MOVI V1.2D, 0x0
	0x037E0A58 ADD X0, X31, 0x170
	0x037E0A5C ADD X1, X31, 0x60
	0x037E0A60 LDR X2, [X9]
	0x037E0A64 STP V1, V1, [X31 + 0x170]
	0x037E0A68 STR X8, [X31 + 0x130]
	0x037E0A6C STR V0, [X31 + 0x12]
	0x037E0A70 STR V0, [X31 + 0x6]
	0x037E0A74 STR X8, [X31 + 0x70]
	0x037E0A78 BL 0x2432978
	0x037E0A7C LDR W8, [X20 + 0x18]
	0x037E0A80 CMP W8, W19
	0x037E0A84 B.LS 0x37E0D04
	0x037E0A88 LDP V1, V0, [X31 + 0x170]
	0x037E0A8C MOVZ W8, 0xB8
	0x037E0A90 SMADDL X8, X19, X8, X20
	0x037E0A94 STUR V0, [X8 + 0x68]
	0x037E0A98 STUR V1, [X8 + 0x58]
	0x037E0A9C LDR X8, [X23]
	0x037E0AA0 LDR X8, [X8 + 0xB8]
	0x037E0AA4 LDR X8, [X8 + 0x20]
	0x037E0AA8 CBZ X8, 0x37E0D00
	0x037E0AAC LDR W9, [X8 + 0x18]
	0x037E0AB0 CMP W9, W19
	0x037E0AB4 B.LS 0x37E0D04
	0x037E0AB8 SXTW X24, W19
	0x037E0ABC MOVZ W9, 0xB8
	0x037E0AC0 MADD X8, X24, X9, X8
	0x037E0AC4 LDR X20, [X8 + 0x50]
	0x037E0AC8 CBZ X20, 0x37E0CE8
	0x037E0ACC TBZ X22, 0x0, 0x37E0B2C
	0x037E0AD0 MOVI V0.2D, 0x0
	0x037E0AD4 STP V0, V0, [X31 + 0x100]
	0x037E0AD8 STP V0, V0, [X31 + 0xE0]
	0x037E0ADC STP V0, V0, [X31 + 0xC0]
	0x037E0AE0 ADRP X10, 0x968000
	0x037E0AE4 LDR X8, [X20]
	0x037E0AE8 LDR X10, [X10 + 0xAC8]
	0x037E0AEC LDRH W9, [X8 + 0x12E]
	0x037E0AF0 LDR X1, [X10]
	0x037E0AF4 CBZ X9, 0x37E0B18
	0x037E0AF8 LDR X10, [X8 + 0xB0]
	0x037E0AFC ADD X10, X10, 0x8
	0x037E0B00 LDUR X11, [X10 - 0x8]
	0x037E0B04 CMP X11, X1
	0x037E0B08 B.EQ 0x37E0BC8
	0x037E0B0C SUBS X9, X9, 0x1
	0x037E0B10 ADD X10, X10, 0x10
	0x037E0B14 B.NE 0x37E0B00
	0x037E0B18 MOVZ W2, 0x1
	0x037E0B1C MOV X0, X20
	0x037E0B20 BL 0x1C5C788
	0x037E0B24 MOV X21, X0
	0x037E0B28 B 0x37E0BD8
	0x037E0B2C ADRP X9, 0x964000
	0x037E0B30 LDR X8, [X21 + 0x8]
	0x037E0B34 LDR X9, [X9 + 0xF50]
	0x037E0B38 MOVI V0.2D, 0x0
	0x037E0B3C ADD X0, X31, 0x60
	0x037E0B40 ADD X1, X31, 0x170
	0x037E0B44 LDR X2, [X9]
	0x037E0B48 STP V0, V0, [X31 + 0xA0]
	0x037E0B4C STP V0, V0, [X31 + 0x80]
	0x037E0B50 STP V0, V0, [X31 + 0x60]
	0x037E0B54 STP V0, V0, [X31 + 0x170]
	0x037E0B58 STP V0, V0, [X31 + 0x1A0]
	0x037E0B5C STP X31, X8, [X31 + 0x190]
	0x037E0B60 STR X31, [X31 + 0x1C0]
	0x037E0B64 BL 0x24324E4
	0x037E0B68 ADRP X8, 0x968000
	0x037E0B6C LDR X8, [X8 + 0xAC8]

ISIL:
	001 Move [X31-80], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Subtract X31, X31, 1056
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X19, X8
	013 Move X8, [X22+40]
	014 Move X20, X0
	015 Add X0, X31, 8
	016 Move W2, 1040
	017 Move W1, W31
	018 Move [X31+1048], X8
	019 Add X21, X31, 8
	020 Call 0x3EB2B10
	021 Compare X20, 0
	022 JumpIfEqual {78}
	023 Move W24, [X20+24]
	024 Move W8, 1024
	025 Add X0, X31, 0
	026 Move W1, 88
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W2, 72
	029 Move W3, 85
	030 Move W4, 48
	031 Move X5, X31
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 Move [X31], W31
	034 Call FourCC..ctor, X0, X1, X2, X3, X4
	035 Move W1, [X31]
	036 Add X0, X31, 0
	037 Move W2, 1040
	038 Move X3, X31
	039 Move [X31], X31
	040 Call InputDeviceCommand..ctor, X0, X1, X2
	041 Move X25, [X31]
	042 Add X21, X21, 16
	043 Move W2, 1024
	044 Move X0, X21
	045 Move W1, W31
	046 Call 0x3EB2B10
	047 Move [X31+8], X25
	048 Move [X31+16], W31
	049 Move [X31+20], W23
	050 Move W8, [X20+24]
	051 Add X9, X20, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSINC not yet implemented."
	057 Move W10, [X8+1]
	058 Subtract X9, X9, 1
	059 Move [X21+1], W10
	060 Add X1, X31, 8
	061 Move W2, 1040
	062 Move X0, X19
	063 Call 0x3EB2AC0
	064 Move X8, [X22+40]
	065 Move X9, [X31+1048]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X31, X31, 1056
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X22, [X31+48]
	071 Move X21, [X31+56]
	072 Move X24, [X31+32]
	073 Move X23, [X31+40]
	074 Move X30, [X31+16]
	075 Move X25, [X31+24]
	076 Move X29, [X31+80]
	077 Return X0
	078 Move X0, 0x919000
	079 Move X0, [X0+1320]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X19, X0
	083 Move X0, 0x96A000
	084 Move X0, [X0+72]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Move X2, X31
	089 Call ArgumentNullException..ctor, X0, X1
	090 Move X0, 0x96A000
	091 Move X0, [X0+80]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Call 0x1C17DEC
	096 Call 0x3EB2B20

