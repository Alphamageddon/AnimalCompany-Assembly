Type: UnityEngine.InputSystem.XR.BoneControl

Method: UnityEngine.InputSystem.Controls.IntegerControl get_parentBoneIndex()

Disassembly:
	0x037DF730 LDP X1, X2, [X31 + 0x18]
	0x037DF734 LDR X3, [X26]

ISIL:
	001 Move X0, [X0+320]
	002 Return X0

Method: System.Void set_parentBoneIndex(UnityEngine.InputSystem.Controls.IntegerControl value)

Disassembly:
	0x037DF738 MOV X0, X31
	0x037DF73C BL 0x220C738

ISIL:
	001 Move [X0+320], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.Vector3Control get_position()

Disassembly:
	0x037DF740 LDR X1, [X22]
	0x037DF744 ADD X0, X31, 0xC8

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_position(UnityEngine.InputSystem.Controls.Vector3Control value)

Disassembly:
	0x037DF748 MOVZ W2, 0x1
	0x037DF74C MOV X3, X31

ISIL:
	001 Move [X0+328], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.QuaternionControl get_rotation()

Disassembly:
	0x037DF750 STR X31, [X31 + 0xC8]
	0x037DF754 BL 0x3755CF8

ISIL:
	001 Move X0, [X0+336]
	002 Return X0

Method: System.Void set_rotation(UnityEngine.InputSystem.Controls.QuaternionControl value)

Disassembly:
	0x037DF758 LDR X1, [X19]
	0x037DF75C STR X0, [X31 + 0xC8]

ISIL:
	001 Move [X0+336], X1
	002 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x037DF760 ADD X0, X31, 0xC8
	0x037DF764 MOVZ W2, 0x1
	0x037DF768 MOV X3, X31
	0x037DF76C BL 0x3755FF4
	0x037DF770 ADRP X8, 0x96A000
	0x037DF774 LDR X8, [X8 + 0x10]
	0x037DF778 STR X0, [X31 + 0xC8]
	0x037DF77C ADD X0, X31, 0xC8
	0x037DF780 MOVZ W2, 0x1
	0x037DF784 LDR X1, [X8]
	0x037DF788 MOV X3, X31
	0x037DF78C BL 0x375606C
	0x037DF790 LDR X2, [X20]
	0x037DF794 MOV X1, X0
	0x037DF798 ADD X0, X31, 0x8
	0x037DF79C STP X31, X31, [X31 + 0x8]
	0x037DF7A0 BL 0x243321C
	0x037DF7A4 ADRP X8, 0x969000
	0x037DF7A8 LDP X1, X2, [X31 + 0x8]
	0x037DF7AC LDR X8, [X8 + 0xF78]
	0x037DF7B0 MOV X0, X31
	0x037DF7B4 LDR X3, [X8]
	0x037DF7B8 BL 0x220C738
	0x037DF7BC LDP X20, X19, [X31 + 0x120]
	0x037DF7C0 LDP X22, X21, [X31 + 0x110]
	0x037DF7C4 LDP X24, X23, [X31 + 0x100]
	0x037DF7C8 LDP X26, X25, [X31 + 0xF0]
	0x037DF7CC LDP X28, X27, [X31 + 0xE0]
	0x037DF7D0 LDP X29, X30, [X31 + 0xD0]
	0x037DF7D4 ADD X31, X31, 0x130
	0x037DF7D8 RET
	0x037DF7DC LDR X8, [X0]
	0x037DF7E0 LDR W1, [X0 + 0x8]
	0x037DF7E4 MOV X0, X8
	0x037DF7E8 RET
	0x037DF7EC STR X1, [X0]
	0x037DF7F0 STR W2, [X0 + 0x8]
	0x037DF7F4 RET
	0x037DF7F8 LDR X0, [X0 + 0x10]
	0x037DF7FC RET
	0x037DF800 STR X1, [X0 + 0x10]
	0x037DF804 RET
	0x037DF808 SUB X31, X31, 0x50
	0x037DF80C STR X30, [X31 + 0x20]
	0x037DF810 STP X22, X21, [X31 + 0x30]
	0x037DF814 STP X20, X19, [X31 + 0x40]
	0x037DF818 MRS X21, 0xC000
	0x037DF81C LDR X8, [X21 + 0x28]
	0x037DF820 ADRP X22, 0xC02000
	0x037DF824 MOV X20, X1
	0x037DF828 MOV X19, X0
	0x037DF82C STR X8, [X31 + 0x18]
	0x037DF830 LDRB W8, [X22 + 0x2CC]
	0x037DF834 TBNZ X8, 0x0, 0x37DF84C
	0x037DF838 ADRP X0, 0x96A000
	0x037DF83C LDR X0, [X0 + 0x30]
	0x037DF840 BL 0x1C16CF4
	0x037DF844 MOVZ W8, 0x1
	0x037DF848 STRB W8, [X22 + 0x2CC]
	0x037DF84C STP X31, X31, [X31]
	0x037DF850 STR W31, [X31 + 0x10]
	0x037DF854 CBZ X20, 0x37DF8B0
	0x037DF858 ADRP X22, 0x96A000
	0x037DF85C LDR X22, [X22 + 0x30]
	0x037DF860 ADD X8, X31, 0x0
	0x037DF864 STR X20, [X19 + 0x10]
	0x037DF868 BL 0x37DF8FC
	0x037DF86C LDR X2, [X22]
	0x037DF870 ADD X1, X31, 0x0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X25, 0xC03000
	012 Move X26, 0x96A000
	013 Move X27, 0x968000
	014 Move X23, 0x920000
	015 Move X24, 0x966000
	016 Move X21, 0x96A000
	017 Move X22, 0x966000
	018 Move X20, 0x96A000
	019 Move X26, [X26+3808]
	020 Move X27, [X27+88]
	021 Move W8, [X25+709]
	022 Move X23, [X23+696]
	023 Move X24, [X24+3536]
	024 Move X21, [X21+3320]
	025 Move X22, [X22+3800]
	026 Move X20, [X20+3816]
	027 Move X19, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {55}
	032 Move X0, 0x96A000
	033 Move X0, [X0+3816]
	034 Call 0x1C17CF4
	035 Move X0, 0x968000
	036 Move X0, [X0+88]
	037 Call 0x1C17CF4
	038 Move X0, 0x966000
	039 Move X0, [X0+3800]
	040 Call 0x1C17CF4
	041 Move X0, 0x966000
	042 Move X0, [X0+3536]
	043 Call 0x1C17CF4
	044 Move X0, 0x96A000
	045 Move X0, [X0+3320]
	046 Call 0x1C17CF4
	047 Move X0, 0x96A000
	048 Move X0, [X0+3808]
	049 Call 0x1C17CF4
	050 Move X0, 0x920000
	051 Move X0, [X0+696]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X25+709], W8
	055 Move X1, [X26]
	056 Move X2, [X27]
	057 Move X0, X19
	058 Call 0x21FD754, X0, X1
	059 Move [X19+320], X0
	060 Move X1, [X23]
	061 Move X2, [X24]
	062 Move X0, X19
	063 Call 0x21FD754, X0, X1
	064 Move [X19+328], X0
	065 Move X1, [X21]
	066 Move X2, [X22]
	067 Move X0, X19
	068 Call 0x21FD754, X0, X1
	069 Move [X19+336], X0
	070 Move X1, [X20]
	071 Move X0, X19
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X24, [X31+32]
	077 Move X23, [X31+40]
	078 Move X26, [X31+16]
	079 Move X25, [X31+24]
	080 Move X30, [X31+80]
	081 Move X27, [X31+88]
	082 Call 0x2DFDD30, X0
	083 Return 

Method: UnityEngine.InputSystem.XR.Bone ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x037DF874 MOV X0, X20
	0x037DF878 BL 0x2204DF8
	0x037DF87C LDR X8, [X31 + 0x8]
	0x037DF880 LDR W9, [X31 + 0x10]
	0x037DF884 STR X8, [X19]
	0x037DF888 STR W9, [X19 + 0x8]
	0x037DF88C LDR X8, [X21 + 0x28]
	0x037DF890 LDR X9, [X31 + 0x18]
	0x037DF894 CMP X8, X9
	0x037DF898 B.NE 0x37DF8F8
	0x037DF89C LDP X20, X19, [X31 + 0x40]
	0x037DF8A0 LDP X22, X21, [X31 + 0x30]
	0x037DF8A4 LDR X30, [X31 + 0x20]
	0x037DF8A8 ADD X31, X31, 0x50
	0x037DF8AC RET
	0x037DF8B0 ADRP X0, 0x919000
	0x037DF8B4 LDR X0, [X0 + 0x528]
	0x037DF8B8 BL 0x1C16D08
	0x037DF8BC BL 0x1C16F10
	0x037DF8C0 MOV X19, X0
	0x037DF8C4 ADRP X0, 0x93C000
	0x037DF8C8 LDR X0, [X0 + 0xD20]
	0x037DF8CC BL 0x1C16D08
	0x037DF8D0 MOV X1, X0
	0x037DF8D4 MOV X0, X19
	0x037DF8D8 MOV X2, X31
	0x037DF8DC BL 0x330E100
	0x037DF8E0 ADRP X0, 0x96A000
	0x037DF8E4 LDR X0, [X0 + 0x38]
	0x037DF8E8 BL 0x1C16D08
	0x037DF8EC MOV X1, X0
	0x037DF8F0 MOV X0, X19
	0x037DF8F4 BL 0x1C16DEC
	0x037DF8F8 BL 0x3EB1B20
	0x037DF8FC SUB X31, X31, 0x20
	0x037DF900 STP X30, X19, [X31 + 0x10]
	0x037DF904 ADD X0, X31, 0x8
	0x037DF908 MOVZ W1, 0x58
	0x037DF90C MOVZ W2, 0x48
	0x037DF910 MOVZ W3, 0x43
	0x037DF914 MOVZ W4, 0x30
	0x037DF918 MOV X5, X31
	0x037DF91C MOV X19, X8
	0x037DF920 STR W31, [X31 + 0x8]
	0x037DF924 BL 0x375AA28
	0x037DF928 LDR W1, [X31 + 0x8]
	0x037DF92C ADD X0, X31, 0x0
	0x037DF930 MOVZ W2, 0x14
	0x037DF934 MOV X3, X31
	0x037DF938 STR X31, [X31]
	0x037DF93C BL 0x37FE6B4
	0x037DF940 LDR X8, [X31]
	0x037DF944 STR W31, [X19 + 0x10]
	0x037DF948 STP X8, X31, [X19]
	0x037DF94C LDP X30, X19, [X31 + 0x10]
	0x037DF950 ADD X31, X31, 0x20
	0x037DF954 RET
	0x037DF958 LDR W1, [X0 + 0x10]
	0x037DF95C LDR X0, [X0 + 0x8]
	0x037DF960 RET

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0xC03000
	010 Move W9, [X22+710]
	011 Move X20, X1
	012 Move X21, X0
	013 Move X19, X8
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x96A000
	019 Move X0, [X0+3344]
	020 Call 0x1C17CF4
	021 Move X0, 0x96A000
	022 Move X0, [X0+3352]
	023 Call 0x1C17CF4
	024 Move X0, 0x96A000
	025 Move X0, [X0+3360]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+710], W8
	029 Move X0, [X21+320]
	030 Compare X0, 0
	031 JumpIfEqual {75}
	032 Move X8, 0x96A000
	033 Move X8, [X8+3352]
	034 Move X1, X20
	035 Move X2, [X8]
	036 Call InputControl`1<Int32>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	037 Move X8, [X21+328]
	038 Compare X8, 0
	039 JumpIfEqual {75}
	040 Move X9, 0x96A000
	041 Move X9, [X9+3344]
	042 Move W22, W0
	043 Move X0, X8
	044 Move X1, X20
	045 Move X2, [X9]
	046 Call InputControl`1<Vector3>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	047 Move X0, [X21+336]
	048 Compare X0, 0
	049 JumpIfEqual {75}
	050 Move X8, 0x96A000
	051 Move X8, [X8+3360]
	052 Move X1, X20
	053 Move V8, V0
	054 Move V9, V1
	055 Move X2, [X8]
	056 Move V10, V2
	057 Call InputControl`1<Quaternion>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	058 Move [X19], W22
	059 Move [X19+4], S8
	060 Move [X19+12], S9
	061 Move [X19+12], S10
	062 Move [X19+20], S0
	063 Move [X19+20], S1
	064 Move [X19+28], S2
	065 Move [X19+28], S3
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X30, [X31+24]
	071 Move D9, [X31+8]
	072 Move D8, [X31+16]
	073 Move V10, [X31+64]
	074 Return X0
	075 Call 0x1C17F20

Method: System.Void WriteValueIntoState(UnityEngine.InputSystem.XR.Bone value, System.Void* statePtr)

Disassembly:
	0x037DF964 STP X29, X30, [X31 - 0x30]!
	0x037DF968 STP X22, X21, [X31 + 0x10]
	0x037DF96C STP X20, X19, [X31 + 0x20]
	0x037DF970 SUB X31, X31, 0x420
	0x037DF974 MRS X21, 0xC000
	0x037DF978 LDR X8, [X21 + 0x28]
	0x037DF97C ADRP X22, 0xC02000
	0x037DF980 MOV X19, X1
	0x037DF984 MOV X20, X0
	0x037DF988 STR X8, [X31 + 0x418]
	0x037DF98C LDRB W8, [X22 + 0x2CD]
	0x037DF990 TBNZ X8, 0x0, 0x37DF9A8
	0x037DF994 ADRP X0, 0x96A000
	0x037DF998 LDR X0, [X0 + 0x40]
	0x037DF99C BL 0x1C16CF4
	0x037DF9A0 MOVZ W8, 0x1
	0x037DF9A4 STRB W8, [X22 + 0x2CD]
	0x037DF9A8 ADD X0, X31, 0x8
	0x037DF9AC MOVZ W2, 0x410
	0x037DF9B0 MOV W1, W31
	0x037DF9B4 BL 0x3EB1B10
	0x037DF9B8 ADD X8, X31, 0x8
	0x037DF9BC MOV X0, X19
	0x037DF9C0 BL 0x37DFA0C
	0x037DF9C4 LDR X0, [X20 + 0x10]
	0x037DF9C8 CBZ X0, 0x37DFA04
	0x037DF9CC ADRP X8, 0x96A000
	0x037DF9D0 LDR X8, [X8 + 0x40]
	0x037DF9D4 ADD X1, X31, 0x8
	0x037DF9D8 LDR X2, [X8]
	0x037DF9DC BL 0x2206A40
	0x037DF9E0 LDR X8, [X21 + 0x28]
	0x037DF9E4 LDR X9, [X31 + 0x418]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+320]
	007 Compare X0, 0
	008 JumpIfEqual {43}
	009 Move X8, [X0]
	010 Move X20, X1
	011 Move W1, [X1]
	012 Move X19, X2
	013 Move X9, [X8+600]
	014 Move X3, [X8+608]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X0, [X21+328]
	017 Compare X0, 0
	018 JumpIfEqual {43}
	019 Move X8, [X0]
	020 Move S1, [X20+8]
	021 Move S2, [X20+12]
	022 Move V0, [X20+4]
	023 Move X1, X19
	024 Move X9, [X8+600]
	025 Move X2, [X8+608]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, [X21+336]
	028 Compare X0, 0
	029 JumpIfEqual {43}
	030 Move X8, [X0]
	031 Move S2, [X20+24]
	032 Move S3, [X20+28]
	033 Move S0, [X20+16]
	034 Move S1, [X20+20]
	035 Move X1, X19
	036 Move X3, [X8+600]
	037 Move X2, [X8+608]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X3
	043 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x037DF9E8 CMP X8, X9
	0x037DF9EC B.NE 0x37DFA08
	0x037DF9F0 ADD X31, X31, 0x420
	0x037DF9F4 LDP X20, X19, [X31 + 0x20]
	0x037DF9F8 LDP X22, X21, [X31 + 0x10]
	0x037DF9FC LDP X29, X30, [X31], #0x30
	0x037DFA00 RET
	0x037DFA04 BL 0x1C16F20
	0x037DFA08 BL 0x3EB1B20
	0x037DFA0C STR X29, [X31 - 0x50]!
	0x037DFA10 STP X30, X25, [X31 + 0x10]
	0x037DFA14 STP X24, X23, [X31 + 0x20]
	0x037DFA18 STP X22, X21, [X31 + 0x30]
	0x037DFA1C STP X20, X19, [X31 + 0x40]
	0x037DFA20 SUB X31, X31, 0x420
	0x037DFA24 MRS X22, 0xC000
	0x037DFA28 MOV X19, X8
	0x037DFA2C LDR X8, [X22 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC03000
	006 Move X21, 0x96A000
	007 Move W8, [X20+711]
	008 Move X21, [X21+3824]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x96A000
	015 Move X0, [X0+3824]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+711], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x2DFDFEC, X0
	026 Return 

