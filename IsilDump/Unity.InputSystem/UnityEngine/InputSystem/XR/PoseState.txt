Type: UnityEngine.InputSystem.XR.PoseState

Method: UnityEngine.InputSystem.Utilities.FourCC get_format()

Disassembly:
	0x037DBA80 STR X30, [X31 - 0x30]!
	0x037DBA84 STP X22, X21, [X31 + 0x10]
	0x037DBA88 STP X20, X19, [X31 + 0x20]
	0x037DBA8C ADRP X20, 0xC06000
	0x037DBA90 LDRB W8, [X20 + 0x2B2]
	0x037DBA94 MOV X19, X0
	0x037DBA98 TBNZ X8, 0x0, 0x37DBAD4
	0x037DBA9C ADRP X0, 0x91C000
	0x037DBAA0 LDR X0, [X0 + 0x3D8]
	0x037DBAA4 BL 0x1C16CF4
	0x037DBAA8 ADRP X0, 0x918000
	0x037DBAAC LDR X0, [X0 + 0x598]
	0x037DBAB0 BL 0x1C16CF4
	0x037DBAB4 ADRP X0, 0x96D000
	0x037DBAB8 LDR X0, [X0 + 0xD80]
	0x037DBABC BL 0x1C16CF4
	0x037DBAC0 ADRP X0, 0x96D000
	0x037DBAC4 LDR X0, [X0 + 0xD88]
	0x037DBAC8 BL 0x1C16CF4
	0x037DBACC MOVZ W8, 0x1
	0x037DBAD0 STRB W8, [X20 + 0x2B2]
	0x037DBAD4 LDRB W8, [X19 + 0x99]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC07000
	005 Move X19, 0x96E000
	006 Move W8, [X20+672]
	007 Move X19, [X19+3304]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x96E000
	013 Move X0, [X0+3304]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+672], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor(System.Boolean isTracked, UnityEngine.XR.InputTrackingState trackingState, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity)

Disassembly:
	0x037DBAD8 CBZ W8, 0x37DBBB4
	0x037DBADC ADD X21, X19, 0x30
	0x037DBAE0 MOV X0, X21
	0x037DBAE4 MOV X1, X31
	0x037DBAE8 BL 0x3745120
	0x037DBAEC CBZ X0, 0x37DBBB4
	0x037DBAF0 MOV X20, X0
	0x037DBAF4 MOV X0, X21
	0x037DBAF8 MOV X1, X31
	0x037DBAFC BL 0x3745260
	0x037DBB00 ADRP X8, 0x918000
	0x037DBB04 LDR X8, [X8 + 0x598]
	0x037DBB08 MOV X21, X0
	0x037DBB0C LDR X8, [X8]
	0x037DBB10 LDR W9, [X8 + 0xE0]
	0x037DBB14 CBNZ W9, 0x37DBB20

ISIL:
	001 Move V7, [X31+24]
	002 Move X8, [X31+16]
	003 Move V16, [X31+8]
	004 Move X9, [X31]
	005 And W10, W1, 1
	006 Move [X0+4], W2
	007 Move [X0+8], S0
	008 Move [X0+16], S1
	009 Move [X0+16], S2
	010 Move [X0+24], S3
	011 Move [X0+24], S4
	012 Move [X0+32], S5
	013 Move [X0+32], S6
	014 Move [X0], W10
	015 Move [X0+36], X9
	016 Move [X0+44], S16
	017 Move [X0+48], X8
	018 Move [X0+56], S7
	019 Return 

Method: System.Void .cctor()

Disassembly:
	0x037DBB18 MOV X0, X8
	0x037DBB1C BL 0x1C16DFC
	0x037DBB20 MOV X0, X21
	0x037DBB24 MOV X1, X31
	0x037DBB28 MOV X2, X31
	0x037DBB2C BL 0x3C3883C
	0x037DBB30 TBZ X0, 0x0, 0x37DBB40
	0x037DBB34 MOV X0, X20
	0x037DBB38 MOV X1, X31
	0x037DBB3C BL 0x3735150
	0x037DBB40 ADRP X22, 0x91C000
	0x037DBB44 LDR X22, [X22 + 0x3D8]
	0x037DBB48 LDR X0, [X22]
	0x037DBB4C BL 0x1C16F10
	0x037DBB50 ADRP X8, 0x96D000
	0x037DBB54 LDR X8, [X8 + 0xD88]
	0x037DBB58 MOV X1, X19
	0x037DBB5C MOV X3, X31
	0x037DBB60 MOV X21, X0
	0x037DBB64 LDR X2, [X8]
	0x037DBB68 BL 0x2A719B8
	0x037DBB6C MOV X0, X20
	0x037DBB70 MOV X1, X21
	0x037DBB74 MOV X2, X31
	0x037DBB78 BL 0x3734A5C
	0x037DBB7C LDR X0, [X22]
	0x037DBB80 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC07000
	005 Move X19, 0x96E000
	006 Move W8, [X20+673]
	007 Move X19, [X19+3304]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x96E000
	013 Move X0, [X0+3304]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+673], W8
	017 Add X0, X31, 8
	018 Move W1, 80
	019 Move W2, 111
	020 Move W3, 115
	021 Move W4, 101
	022 Move X5, X31
	023 Move [X31+8], W31
	024 Call FourCC..ctor, X0, X1, X2, X3, X4
	025 Move X8, [X19]
	026 Move W9, [X31+8]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], W9
	031 Move X30, [X31+32]
	032 Return 

