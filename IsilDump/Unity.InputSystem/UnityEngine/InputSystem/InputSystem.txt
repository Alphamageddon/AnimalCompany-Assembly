Type: UnityEngine.InputSystem.InputSystem

Method: System.Void add_onLayoutChange(System.Action`2<System.String, UnityEngine.InputSystem.InputControlLayoutChange> value)

Disassembly:
	0x0376D8F0 ADRP X0, 0x9D9000
	0x0376D8F4 LDR X0, [X0 + 0x890]
	0x0376D8F8 BL 0x1C16D08
	0x0376D8FC MOV X1, X0
	0x0376D900 MOV X0, X19
	0x0376D904 BL 0x1C16DEC
	0x0376D908 B 0x376D920
	0x0376D90C B 0x376D920
	0x0376D910 B 0x376D920
	0x0376D914 B 0x376D920
	0x0376D918 B 0x376D920
	0x0376D91C B 0x376D920
	0x0376D920 MOV X21, X0
	0x0376D924 CMP W1, 0x1
	0x0376D928 B.NE 0x376D954
	0x0376D92C MOV X0, X21
	0x0376D930 BL 0x3EB1AD0
	0x0376D934 LDR X22, [X0]
	0x0376D938 BL 0x3EB1AE0
	0x0376D93C LDR X1, [X25]
	0x0376D940 ADD X0, X31, 0x20
	0x0376D944 BL 0x2BBF6BC
	0x0376D948 CBZ X22, 0x376D858
	0x0376D94C MOV X0, X22
	0x0376D950 BL 0x1C16F18
	0x0376D954 MOV X22, X31
	0x0376D958 B 0x376D960
	0x0376D95C MOV X21, X0
	0x0376D960 LDR X1, [X25]
	0x0376D964 ADD X0, X31, 0x20
	0x0376D968 BL 0x2BBF6BC
	0x0376D96C CBNZ X22, 0x376D978
	0x0376D970 MOV X0, X21
	0x0376D974 BL 0x1D2C690
	0x0376D978 MOV X0, X22
	0x0376D97C BL 0x1C16F18
	0x0376D980 BL 0x1990590
	0x0376D984 STR X30, [X31 - 0x20]!
	0x0376D988 STP X20, X19, [X31 + 0x10]
	0x0376D98C ADRP X20, 0xC73000
	0x0376D990 LDRB W8, [X20 + 0xECC]
	0x0376D994 MOV X19, X0
	0x0376D998 TBNZ X8, 0x0, 0x376D9B0
	0x0376D99C ADRP X0, 0x9AE000
	0x0376D9A0 LDR X0, [X0 + 0x270]
	0x0376D9A4 BL 0x1C16CF4
	0x0376D9A8 MOVZ W8, 0x1
	0x0376D9AC STRB W8, [X20 + 0xECC]
	0x0376D9B0 MOV X0, X19
	0x0376D9B4 MOV X1, X31
	0x0376D9B8 STR X31, [X31 + 0x8]
	0x0376D9BC BL 0x32277A8
	0x0376D9C0 TBNZ X0, 0x0, 0x376DA10
	0x0376D9C4 ADRP X20, 0x9AE000
	0x0376D9C8 LDR X20, [X20 + 0x270]
	0x0376D9CC LDR X0, [X20]
	0x0376D9D0 LDR W8, [X0 + 0xE0]
	0x0376D9D4 CBNZ W8, 0x376D9E0
	0x0376D9D8 BL 0x1C16DFC
	0x0376D9DC LDR X0, [X20]
	0x0376D9E0 LDR X8, [X0 + 0xB8]
	0x0376D9E4 LDR X8, [X8]
	0x0376D9E8 CBZ X8, 0x376DA58
	0x0376D9EC LDR X8, [X8 + 0x58]
	0x0376D9F0 ADD X0, X31, 0x8
	0x0376D9F4 MOV X1, X19
	0x0376D9F8 MOV X2, X31
	0x0376D9FC STR X8, [X31 + 0x8]
	0x0376DA00 BL 0x3769CEC
	0x0376DA04 LDP X20, X19, [X31 + 0x10]
	0x0376DA08 LDR X30, [X31], #0x20
	0x0376DA0C RET
	0x0376DA10 ADRP X0, 0x98B000
	0x0376DA14 LDR X0, [X0 + 0x528]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC74000
	007 Move X21, 0x9AF000
	008 Move W8, [X19+3773]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AF000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3773], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.add_onLayoutChange, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: System.Void remove_onLayoutChange(System.Action`2<System.String, UnityEngine.InputSystem.InputControlLayoutChange> value)

Disassembly:
	0x0376DA18 BL 0x1C16D08
	0x0376DA1C BL 0x1C16F10
	0x0376DA20 MOV X19, X0
	0x0376DA24 ADRP X0, 0x98E000
	0x0376DA28 LDR X0, [X0 + 0x588]
	0x0376DA2C BL 0x1C16D08
	0x0376DA30 MOV X1, X0
	0x0376DA34 MOV X0, X19
	0x0376DA38 MOV X2, X31
	0x0376DA3C BL 0x330E100
	0x0376DA40 ADRP X0, 0x9D9000
	0x0376DA44 LDR X0, [X0 + 0x898]
	0x0376DA48 BL 0x1C16D08
	0x0376DA4C MOV X1, X0
	0x0376DA50 MOV X0, X19
	0x0376DA54 BL 0x1C16DEC
	0x0376DA58 BL 0x1C16F20
	0x0376DA5C STR X30, [X31 - 0x20]!
	0x0376DA60 STP X20, X19, [X31 + 0x10]
	0x0376DA64 ADRP X20, 0xC73000
	0x0376DA68 ADRP X19, 0x9AE000
	0x0376DA6C LDRB W8, [X20 + 0xECD]
	0x0376DA70 LDR X19, [X19 + 0x270]
	0x0376DA74 TBNZ X8, 0x0, 0x376DA8C
	0x0376DA78 ADRP X0, 0x9AE000
	0x0376DA7C LDR X0, [X0 + 0x270]
	0x0376DA80 BL 0x1C16CF4
	0x0376DA84 MOVZ W8, 0x1
	0x0376DA88 STRB W8, [X20 + 0xECD]
	0x0376DA8C LDR X0, [X19]
	0x0376DA90 STR X31, [X31 + 0x8]
	0x0376DA94 LDR W8, [X0 + 0xE0]
	0x0376DA98 CBNZ W8, 0x376DAA4
	0x0376DA9C BL 0x1C16DFC
	0x0376DAA0 LDR X0, [X19]
	0x0376DAA4 LDR X8, [X0 + 0xB8]
	0x0376DAA8 LDR X8, [X8]
	0x0376DAAC CBZ X8, 0x376DAD0
	0x0376DAB0 LDR X8, [X8 + 0x58]
	0x0376DAB4 ADD X0, X31, 0x8
	0x0376DAB8 MOV X1, X31
	0x0376DABC STR X8, [X31 + 0x8]
	0x0376DAC0 BL 0x3769788
	0x0376DAC4 LDP X20, X19, [X31 + 0x10]
	0x0376DAC8 LDR X30, [X31], #0x20
	0x0376DACC RET
	0x0376DAD0 BL 0x1C16F20
	0x0376DAD4 STR X30, [X31 - 0x20]!
	0x0376DAD8 STP X20, X19, [X31 + 0x10]
	0x0376DADC ADRP X20, 0xC73000
	0x0376DAE0 ADRP X19, 0x9AE000
	0x0376DAE4 LDRB W8, [X20 + 0xECE]
	0x0376DAE8 LDR X19, [X19 + 0x270]
	0x0376DAEC TBNZ X8, 0x0, 0x376DB04
	0x0376DAF0 ADRP X0, 0x9AE000
	0x0376DAF4 LDR X0, [X0 + 0x270]
	0x0376DAF8 BL 0x1C16CF4
	0x0376DAFC MOVZ W8, 0x1
	0x0376DB00 STRB W8, [X20 + 0xECE]
	0x0376DB04 LDR X0, [X19]
	0x0376DB08 LDR W8, [X0 + 0xE0]
	0x0376DB0C CBNZ W8, 0x376DB18
	0x0376DB10 BL 0x1C16DFC
	0x0376DB14 LDR X0, [X19]
	0x0376DB18 LDR X8, [X0 + 0xB8]
	0x0376DB1C LDR X0, [X8]
	0x0376DB20 CBZ X0, 0x376DB34
	0x0376DB24 LDP X20, X19, [X31 + 0x10]
	0x0376DB28 MOV X1, X31
	0x0376DB2C LDR X30, [X31], #0x20
	0x0376DB30 B 0x37BB5A0
	0x0376DB34 BL 0x1C16F20
	0x0376DB38 SUB X31, X31, 0x30
	0x0376DB3C STR X30, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC74000
	007 Move X21, 0x9AF000
	008 Move W8, [X19+3774]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AF000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3774], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.remove_onLayoutChange, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: System.Void RegisterLayout(System.Type type, System.String name = null, System.Nullable`1<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = null)

Disassembly:
	0x0376DB40 STP X20, X19, [X31 + 0x20]
	0x0376DB44 ADRP X20, 0xC73000
	0x0376DB48 ADRP X19, 0x9AE000
	0x0376DB4C LDRB W8, [X20 + 0xECF]
	0x0376DB50 LDR X19, [X19 + 0x270]
	0x0376DB54 TBNZ X8, 0x0, 0x376DB78
	0x0376DB58 ADRP X0, 0x9AE000
	0x0376DB5C LDR X0, [X0 + 0x270]
	0x0376DB60 BL 0x1C16CF4
	0x0376DB64 ADRP X0, 0x9D8000
	0x0376DB68 LDR X0, [X0 + 0x50]
	0x0376DB6C BL 0x1C16CF4
	0x0376DB70 MOVZ W8, 0x1
	0x0376DB74 STRB W8, [X20 + 0xECF]
	0x0376DB78 LDR X0, [X19]
	0x0376DB7C LDR W8, [X0 + 0xE0]
	0x0376DB80 CBNZ W8, 0x376DB8C
	0x0376DB84 BL 0x1C16DFC
	0x0376DB88 LDR X0, [X19]
	0x0376DB8C LDR X8, [X0 + 0xB8]
	0x0376DB90 LDR X8, [X8]
	0x0376DB94 CBZ X8, 0x376DBD0
	0x0376DB98 ADRP X9, 0x9D8000
	0x0376DB9C LDR X9, [X9 + 0x50]
	0x0376DBA0 LDR X1, [X8 + 0xA0]
	0x0376DBA4 LDR W3, [X8 + 0x98]
	0x0376DBA8 ADD X0, X31, 0x0
	0x0376DBAC LDR X4, [X9]
	0x0376DBB0 MOV W2, W31
	0x0376DBB4 STP X31, X31, [X31]
	0x0376DBB8 BL 0x24FD82C
	0x0376DBBC LDP X0, X1, [X31]
	0x0376DBC0 LDP X20, X19, [X31 + 0x20]
	0x0376DBC4 LDR X30, [X31 + 0x10]
	0x0376DBC8 ADD X31, X31, 0x30
	0x0376DBCC RET
	0x0376DBD0 BL 0x1C16F20
	0x0376DBD4 SUB X31, X31, 0x30
	0x0376DBD8 STP X30, X21, [X31 + 0x10]
	0x0376DBDC STP X20, X19, [X31 + 0x20]
	0x0376DBE0 ADRP X19, 0xC73000
	0x0376DBE4 LDRB W8, [X19 + 0xED0]
	0x0376DBE8 MOV X20, X0
	0x0376DBEC TBNZ X8, 0x0, 0x376DC04
	0x0376DBF0 ADRP X0, 0x9AE000
	0x0376DBF4 LDR X0, [X0 + 0x270]
	0x0376DBF8 BL 0x1C16CF4
	0x0376DBFC MOVZ W8, 0x1
	0x0376DC00 STRB W8, [X19 + 0xED0]
	0x0376DC04 CBZ X20, 0x376DC98
	0x0376DC08 ADRP X21, 0x9AE000
	0x0376DC0C LDR X21, [X21 + 0x270]
	0x0376DC10 LDR X0, [X21]
	0x0376DC14 LDR W8, [X0 + 0xE0]
	0x0376DC18 CBNZ W8, 0x376DC24
	0x0376DC1C BL 0x1C16DFC
	0x0376DC20 LDR X0, [X21]
	0x0376DC24 LDR X8, [X0 + 0xB8]
	0x0376DC28 LDR X19, [X8]
	0x0376DC2C STRB W31, [X31 + 0xC]
	0x0376DC30 ADD X1, X31, 0xC
	0x0376DC34 MOV X0, X19
	0x0376DC38 MOV X2, X31
	0x0376DC3C BL 0x33DE64C
	0x0376DC40 LDR X0, [X21]
	0x0376DC44 LDR W8, [X0 + 0xE0]
	0x0376DC48 CBNZ W8, 0x376DC54
	0x0376DC4C BL 0x1C16DFC
	0x0376DC50 LDR X0, [X21]
	0x0376DC54 LDR X8, [X0 + 0xB8]
	0x0376DC58 LDR X0, [X8]
	0x0376DC5C CBZ X0, 0x376DCE8
	0x0376DC60 MOV X1, X20
	0x0376DC64 MOV X2, X31
	0x0376DC68 BL 0x37B9F38
	0x0376DC6C MOV X20, X31
	0x0376DC70 LDRB W8, [X31 + 0xC]
	0x0376DC74 CBZ W8, 0x376DC84
	0x0376DC78 MOV X0, X19
	0x0376DC7C MOV X1, X31
	0x0376DC80 BL 0x33E14E4
	0x0376DC84 CBNZ X20, 0x376DCE0
	0x0376DC88 LDP X20, X19, [X31 + 0x20]
	0x0376DC8C LDP X30, X21, [X31 + 0x10]
	0x0376DC90 ADD X31, X31, 0x30
	0x0376DC94 RET
	0x0376DC98 ADRP X0, 0x98B000
	0x0376DC9C LDR X0, [X0 + 0x528]
	0x0376DCA0 BL 0x1C16D08
	0x0376DCA4 BL 0x1C16F10
	0x0376DCA8 MOV X19, X0
	0x0376DCAC ADRP X0, 0x990000
	0x0376DCB0 LDR X0, [X0 + 0xEC8]
	0x0376DCB4 BL 0x1C16D08
	0x0376DCB8 MOV X1, X0
	0x0376DCBC MOV X0, X19
	0x0376DCC0 MOV X2, X31
	0x0376DCC4 BL 0x330E100
	0x0376DCC8 ADRP X0, 0x9D9000
	0x0376DCCC LDR X0, [X0 + 0x8A0]
	0x0376DCD0 BL 0x1C16D08
	0x0376DCD4 MOV X1, X0
	0x0376DCD8 MOV X0, X19
	0x0376DCDC BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xC74000
	009 Move [X31], X2
	010 Move [X31+8], X3
	011 Move X23, 0x987000
	012 Move W8, [X22+3775]
	013 Move X23, [X23+1728]
	014 Move X20, X2
	015 Move X19, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x9AF000
	022 Move X0, [X0+624]
	023 Call 0x1C17CF4
	024 Move X0, 0x9DA000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move X0, 0x9DA000
	028 Move X0, [X0+2016]
	029 Call 0x1C17CF4
	030 Move X0, 0x987000
	031 Move X0, [X0+1728]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+3775], W8
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Move X2, X31
	043 Call Type.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {109}
	048 Move X0, X19
	049 Move X1, X31
	050 Call String.IsNullOrEmpty, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {63}
	055 Compare X21, 0
	056 JumpIfEqual {108}
	057 Move X8, [X21]
	058 Move X0, X21
	059 Move X9, [X8+424]
	060 Move X1, [X8+432]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move X19, X0
	063 Move X22, 0x9AF000
	064 Move X22, [X22+624]
	065 Move X0, [X22]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X22]
	071 Move X8, [X0+184]
	072 Move X0, [X8]
	073 Compare X0, 0
	074 JumpIfEqual {108}
	075 Move X1, X19
	076 Move X2, X21
	077 Move X3, X31
	078 Call InputManager.RegisterControlLayout, X0, X1, X2
	079 And W31, W20, 255
	080 Move X0, [X22]
	081 Move X21, 0x9DA000
	082 Move W8, [X0+224]
	083 Move X21, [X21+2016]
	084 Compare W8, 0
	085 JumpIfNotEqual {88}
	086 Call 0x1C17DFC
	087 Move X0, [X22]
	088 Move X8, [X0+184]
	089 Move X1, [X21]
	090 Add X0, X31, 0
	091 Move X20, [X8]
	092 Call Nullable`1<InputDeviceMatcher>.get_Value, X0
	093 Compare X20, 0
	094 JumpIfEqual {108}
	095 Move X2, X0
	096 Move X0, X20
	097 Move X1, X19
	098 Move X3, X31
	099 Call InputManager.RegisterControlLayoutMatcher, X0, X1, X2
	100 Move X20, [X31+48]
	101 Move X19, [X31+56]
	102 Move X22, [X31+32]
	103 Move X21, [X31+40]
	104 Move X30, [X31+16]
	105 Move X23, [X31+24]
	106 Add X31, X31, 64
	107 Return 
	108 Call 0x1C17F20
	109 Move X0, 0x98C000
	110 Move X0, [X0+1320]
	111 Call 0x1C17D08
	112 Call 0x1C17F10
	113 Move X19, X0
	114 Move X0, 0x98F000
	115 Move X0, [X0+1512]
	116 Call 0x1C17D08
	117 Move X1, X0
	118 Move X0, X19
	119 Move X2, X31
	120 Call ArgumentNullException..ctor, X0, X1
	121 Move X0, 0x9DA000
	122 Move X0, [X0+2024]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X19
	126 Call 0x1C17DEC

Method: System.Void RegisterLayout(System.String name = null, System.Nullable`1<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = null)

Disassembly:
	0x0220D738 MOV W19, W1
	0x0220D73C MOV X20, X0
	0x0220D740 CBNZ X8, 0x220D750
	0x0220D744 MOV X0, X21
	0x0220D748 BL 0x1C5C6E0
	0x0220D74C LDR X8, [X21 + 0x38]
	0x0220D750 LDR X0, [X8]
	0x0220D754 LDRB W8, [X0 + 0x135]
	0x0220D758 TBNZ X8, 0x0, 0x220D760
	0x0220D75C BL 0x1C5C684
	0x0220D760 BL 0x1C16F10
	0x0220D764 LDR X8, [X21 + 0x38]
	0x0220D768 MOV X21, X0
	0x0220D76C LDR X1, [X8 + 0x8]
	0x0220D770 LDR X8, [X1]
	0x0220D774 BLR X8
	0x0220D778 CBZ X21, 0x220D798
	0x0220D77C AND W1, W19, 0x1
	0x0220D780 STR X20, [X21 + 0x10]
	0x0220D784 LDP X20, X19, [X31 + 0x10]
	0x0220D788 MOV X0, X21
	0x0220D78C MOV X2, X31
	0x0220D790 LDP X30, X21, [X31], #0x20
	0x0220D794 B 0x3C86C28
	0x0220D798 BL 0x1C16F20
	0x0220D79C SUB X31, X31, 0x30
	0x0220D7A0 STR X30, [X31 + 0x10]
	0x0220D7A4 STP X20, X19, [X31 + 0x20]
	0x0220D7A8 LDR X8, [X1 + 0x38]
	0x0220D7AC MOV X19, X0
	0x0220D7B0 CBNZ X8, 0x220D7C4
	0x0220D7B4 MOV X0, X1
	0x0220D7B8 MOV X20, X1
	0x0220D7BC BL 0x1C5C6E0
	0x0220D7C0 LDR X8, [X20 + 0x38]
	0x0220D7C4 LDR X1, [X8]
	0x0220D7C8 ADD X3, X31, 0x8
	0x0220D7CC ADD X4, X31, 0x18
	0x0220D7D0 MOV X2, X31
	0x0220D7D4 LDR X0, [X1]
	0x0220D7D8 STR X19, [X31 + 0x8]
	0x0220D7DC LDR X8, [X1 + 0x10]
	0x0220D7E0 BLR X8
	0x0220D7E4 LDR X8, [X31 + 0x18]
	0x0220D7E8 CBZ X8, 0x220D800
	0x0220D7EC LDR X0, [X8 + 0x10]
	0x0220D7F0 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X19, X2
	008 Move X20, X1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {25}
	012 Move X0, 0x1F0F000
	013 Move X0, [X0+624]
	014 Move X22, X3
	015 Call 0x1C17CF4
	016 Move X0, 0x1EE7000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move X8, [X22+56]
	020 Compare X8, 0
	021 JumpIfNotEqual {25}
	022 Move X0, X22
	023 Call 0x1C5D6E0
	024 Move X8, [X22+56]
	025 Move X9, 0x1EE7000
	026 Move X9, [X9+1728]
	027 Move X22, [X8]
	028 Move X0, [X9]
	029 Move W9, [X0+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X22
	034 Move X1, X31
	035 Call Type.GetTypeFromHandle, X0
	036 Move X8, 0x1F0F000
	037 Move X8, [X8+624]
	038 Move X22, X0
	039 Move X8, [X8]
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X22
	046 Move X1, X21
	047 Move X2, X20
	048 Move X3, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X4, X31
	054 Move X30, [X31+48]
	055 Call InputSystem.RegisterLayout, X0, X1, X2
	056 Return 

Method: System.Void RegisterLayout(System.String json, System.String name = null, System.Nullable`1<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = null)

Disassembly:
	0x0376DCE0 MOV X0, X20
	0x0376DCE4 BL 0x1C16F18
	0x0376DCE8 BL 0x1C16F20
	0x0376DCEC B 0x376DCF0
	0x0376DCF0 MOV X21, X0
	0x0376DCF4 CMP W1, 0x1
	0x0376DCF8 B.NE 0x376DD10
	0x0376DCFC MOV X0, X21
	0x0376DD00 BL 0x3EB1AD0
	0x0376DD04 LDR X20, [X0]
	0x0376DD08 BL 0x3EB1AE0
	0x0376DD0C B 0x376DC70
	0x0376DD10 MOV X20, X31
	0x0376DD14 B 0x376DD1C
	0x0376DD18 MOV X21, X0
	0x0376DD1C LDRB W8, [X31 + 0xC]
	0x0376DD20 CBZ W8, 0x376DD30
	0x0376DD24 MOV X0, X19
	0x0376DD28 MOV X1, X31
	0x0376DD2C BL 0x33E14E4
	0x0376DD30 CBNZ X20, 0x376DD3C
	0x0376DD34 MOV X0, X21
	0x0376DD38 BL 0x1D2C690
	0x0376DD3C MOV X0, X20
	0x0376DD40 BL 0x1C16F18
	0x0376DD44 BL 0x1990590
	0x0376DD48 SUB X31, X31, 0x30
	0x0376DD4C STP X30, X21, [X31 + 0x10]
	0x0376DD50 STP X20, X19, [X31 + 0x20]
	0x0376DD54 ADRP X19, 0xC73000
	0x0376DD58 LDRB W8, [X19 + 0xED1]
	0x0376DD5C MOV X20, X0
	0x0376DD60 TBNZ X8, 0x0, 0x376DD78
	0x0376DD64 ADRP X0, 0x9AE000
	0x0376DD68 LDR X0, [X0 + 0x270]
	0x0376DD6C BL 0x1C16CF4
	0x0376DD70 MOVZ W8, 0x1
	0x0376DD74 STRB W8, [X19 + 0xED1]
	0x0376DD78 CBZ X20, 0x376DE0C
	0x0376DD7C ADRP X21, 0x9AE000
	0x0376DD80 LDR X21, [X21 + 0x270]
	0x0376DD84 LDR X0, [X21]
	0x0376DD88 LDR W8, [X0 + 0xE0]
	0x0376DD8C CBNZ W8, 0x376DD98
	0x0376DD90 BL 0x1C16DFC
	0x0376DD94 LDR X0, [X21]
	0x0376DD98 LDR X8, [X0 + 0xB8]
	0x0376DD9C LDR X19, [X8]
	0x0376DDA0 STRB W31, [X31 + 0xC]
	0x0376DDA4 ADD X1, X31, 0xC
	0x0376DDA8 MOV X0, X19
	0x0376DDAC MOV X2, X31
	0x0376DDB0 BL 0x33DE64C
	0x0376DDB4 LDR X0, [X21]
	0x0376DDB8 LDR W8, [X0 + 0xE0]
	0x0376DDBC CBNZ W8, 0x376DDC8
	0x0376DDC0 BL 0x1C16DFC
	0x0376DDC4 LDR X0, [X21]
	0x0376DDC8 LDR X8, [X0 + 0xB8]
	0x0376DDCC LDR X0, [X8]
	0x0376DDD0 CBZ X0, 0x376DE5C
	0x0376DDD4 MOV X1, X20
	0x0376DDD8 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC74000
	009 Move [X31], X2
	010 Move [X31+8], X3
	011 Move X22, 0x9AF000
	012 Move W8, [X23+3776]
	013 Move X22, [X22+624]
	014 Move X20, X2
	015 Move X19, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x9AF000
	022 Move X0, [X0+624]
	023 Call 0x1C17CF4
	024 Move X0, 0x9DA000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move X0, 0x9DA000
	028 Move X0, [X0+2016]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+3776], W8
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X0, [X8]
	040 Compare X0, 0
	041 JumpIfEqual {76}
	042 Move X1, X21
	043 Move X2, X19
	044 Move W3, W31
	045 Move X4, X31
	046 Call InputManager.RegisterControlLayout, X0, X1, X2, X3
	047 And W31, W20, 255
	048 Move X0, [X22]
	049 Move X21, 0x9DA000
	050 Move W8, [X0+224]
	051 Move X21, [X21+2016]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X22]
	056 Move X8, [X0+184]
	057 Move X1, [X21]
	058 Add X0, X31, 0
	059 Move X20, [X8]
	060 Call Nullable`1<InputDeviceMatcher>.get_Value, X0
	061 Compare X20, 0
	062 JumpIfEqual {76}
	063 Move X2, X0
	064 Move X0, X20
	065 Move X1, X19
	066 Move X3, X31
	067 Call InputManager.RegisterControlLayoutMatcher, X0, X1, X2
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X30, [X31+16]
	073 Move X23, [X31+24]
	074 Add X31, X31, 64
	075 Return 
	076 Call 0x1C17F20

Method: System.Void RegisterLayoutOverride(System.String json, System.String name = null)

Disassembly:
	0x0376DDDC BL 0x37BA1A4
	0x0376DDE0 MOV X20, X31
	0x0376DDE4 LDRB W8, [X31 + 0xC]
	0x0376DDE8 CBZ W8, 0x376DDF8
	0x0376DDEC MOV X0, X19
	0x0376DDF0 MOV X1, X31
	0x0376DDF4 BL 0x33E14E4
	0x0376DDF8 CBNZ X20, 0x376DE54
	0x0376DDFC LDP X20, X19, [X31 + 0x20]
	0x0376DE00 LDP X30, X21, [X31 + 0x10]
	0x0376DE04 ADD X31, X31, 0x30
	0x0376DE08 RET
	0x0376DE0C ADRP X0, 0x98B000
	0x0376DE10 LDR X0, [X0 + 0x528]
	0x0376DE14 BL 0x1C16D08
	0x0376DE18 BL 0x1C16F10
	0x0376DE1C MOV X19, X0
	0x0376DE20 ADRP X0, 0x990000
	0x0376DE24 LDR X0, [X0 + 0xEC8]
	0x0376DE28 BL 0x1C16D08
	0x0376DE2C MOV X1, X0
	0x0376DE30 MOV X0, X19
	0x0376DE34 MOV X2, X31
	0x0376DE38 BL 0x330E100
	0x0376DE3C ADRP X0, 0x9D9000
	0x0376DE40 LDR X0, [X0 + 0x8A8]
	0x0376DE44 BL 0x1C16D08
	0x0376DE48 MOV X1, X0
	0x0376DE4C MOV X0, X19
	0x0376DE50 BL 0x1C16DEC
	0x0376DE54 MOV X0, X20
	0x0376DE58 BL 0x1C16F18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC74000
	007 Move X21, 0x9AF000
	008 Move W8, [X22+3777]
	009 Move X21, [X21+624]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9AF000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3777], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 Move X1, X20
	032 Move X2, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W3, 1
	038 Move X4, X31
	039 Move X30, [X31+48]
	040 Call InputManager.RegisterControlLayout, X0, X1, X2, X3
	041 Return 
	042 Call 0x1C17F20

Method: System.Void RegisterLayoutMatcher(System.String layoutName, UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher)

Disassembly:
	0x0376DE5C BL 0x1C16F20
	0x0376DE60 B 0x376DE64
	0x0376DE64 MOV X21, X0
	0x0376DE68 CMP W1, 0x1
	0x0376DE6C B.NE 0x376DE84
	0x0376DE70 MOV X0, X21
	0x0376DE74 BL 0x3EB1AD0
	0x0376DE78 LDR X20, [X0]
	0x0376DE7C BL 0x3EB1AE0
	0x0376DE80 B 0x376DDE4
	0x0376DE84 MOV X20, X31
	0x0376DE88 B 0x376DE90
	0x0376DE8C MOV X21, X0
	0x0376DE90 LDRB W8, [X31 + 0xC]
	0x0376DE94 CBZ W8, 0x376DEA4
	0x0376DE98 MOV X0, X19
	0x0376DE9C MOV X1, X31
	0x0376DEA0 BL 0x33E14E4
	0x0376DEA4 CBNZ X20, 0x376DEB0
	0x0376DEA8 MOV X0, X21
	0x0376DEAC BL 0x1D2C690
	0x0376DEB0 MOV X0, X20
	0x0376DEB4 BL 0x1C16F18
	0x0376DEB8 BL 0x1990590
	0x0376DEBC SUB X31, X31, 0x30
	0x0376DEC0 STP X30, X21, [X31 + 0x10]
	0x0376DEC4 STP X20, X19, [X31 + 0x20]
	0x0376DEC8 ADRP X19, 0xC73000
	0x0376DECC LDRB W8, [X19 + 0xED2]
	0x0376DED0 MOV X20, X0
	0x0376DED4 TBNZ X8, 0x0, 0x376DEEC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC74000
	007 Move X21, 0x9AF000
	008 Move W8, [X22+3778]
	009 Move X21, [X21+624]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9AF000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3778], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Compare X0, 0
	030 JumpIfEqual {41}
	031 Move X1, X20
	032 Move X2, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X3, X31
	038 Move X30, [X31+48]
	039 Call InputManager.RegisterControlLayoutMatcher, X0, X1, X2
	040 Return 
	041 Call 0x1C17F20

Method: System.Void RegisterLayoutMatcher(UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher)

Disassembly:
	0x0220D7F4 LDR X30, [X31 + 0x10]
	0x0220D7F8 ADD X31, X31, 0x30
	0x0220D7FC RET
	0x0220D800 BL 0x1C16F20
	0x0220D804 STP X29, X30, [X31 - 0x60]!
	0x0220D808 STP X28, X27, [X31 + 0x10]
	0x0220D80C STP X26, X25, [X31 + 0x20]
	0x0220D810 STP X24, X23, [X31 + 0x30]
	0x0220D814 STP X22, X21, [X31 + 0x40]
	0x0220D818 STP X20, X19, [X31 + 0x50]
	0x0220D81C LDR X8, [X1 + 0x38]
	0x0220D820 MOV X21, X1
	0x0220D824 MOV X20, X0
	0x0220D828 CBNZ X8, 0x220D888
	0x0220D82C ADRP X0, 0x1F0E000
	0x0220D830 LDR X0, [X0 + 0xFC0]
	0x0220D834 BL 0x1C16CF4
	0x0220D838 ADRP X0, 0x1F0E000
	0x0220D83C LDR X0, [X0 + 0xFC8]
	0x0220D840 BL 0x1C16CF4
	0x0220D844 ADRP X0, 0x1EE6000
	0x0220D848 LDR X0, [X0 + 0xE00]
	0x0220D84C BL 0x1C16CF4
	0x0220D850 ADRP X0, 0x1EE6000
	0x0220D854 LDR X0, [X0 + 0xE18]
	0x0220D858 BL 0x1C16CF4
	0x0220D85C ADRP X0, 0x1F0E000
	0x0220D860 LDR X0, [X0 + 0xFD0]
	0x0220D864 BL 0x1C16CF4
	0x0220D868 ADRP X0, 0x1EE6000
	0x0220D86C LDR X0, [X0 + 0x6C0]
	0x0220D870 BL 0x1C16CF4
	0x0220D874 LDR X8, [X21 + 0x38]
	0x0220D878 CBNZ X8, 0x220D888
	0x0220D87C MOV X0, X21
	0x0220D880 BL 0x1C5C6E0
	0x0220D884 LDR X8, [X21 + 0x38]
	0x0220D888 LDR X0, [X8]
	0x0220D88C LDRB W8, [X0 + 0x135]
	0x0220D890 TBNZ X8, 0x0, 0x220D898
	0x0220D894 BL 0x1C5C684
	0x0220D898 BL 0x1C16F10
	0x0220D89C LDR X8, [X21 + 0x38]
	0x0220D8A0 MOV X19, X0
	0x0220D8A4 LDR X1, [X8 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X20, X1
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {21}
	010 Move X0, 0x1F0F000
	011 Move X0, [X0+624]
	012 Call 0x1C17CF4
	013 Move X0, 0x1EE7000
	014 Move X0, [X0+1728]
	015 Call 0x1C17CF4
	016 Move X8, [X20+56]
	017 Compare X8, 0
	018 JumpIfNotEqual {21}
	019 Move X0, X20
	020 Call 0x1C5D6E0
	021 Move X21, 0x1F0F000
	022 Move X21, [X21+624]
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X21]
	029 Move X9, 0x1EE7000
	030 Move X8, [X0+184]
	031 Move X9, [X9+1728]
	032 Move X0, [X9]
	033 Move X9, [X20+56]
	034 Move X20, [X8]
	035 Move W8, [X0+224]
	036 Move X21, [X9]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Call Type.GetTypeFromHandle, X0
	043 Compare X20, 0
	044 JumpIfEqual {55}
	045 Move X1, X0
	046 Move X0, X20
	047 Move X2, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X3, X31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Call InputManager.RegisterControlLayoutMatcher, X0, X1, X2
	054 Return 
	055 Call 0x1C17F20

Method: System.Void RegisterLayoutBuilder(System.Func`1<UnityEngine.InputSystem.Layouts.InputControlLayout> buildMethod, System.String name, System.String baseLayout = null, System.Nullable`1<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = null)

Disassembly:
	0x0376DED8 ADRP X0, 0x9AE000
	0x0376DEDC LDR X0, [X0 + 0x270]
	0x0376DEE0 BL 0x1C16CF4
	0x0376DEE4 MOVZ W8, 0x1
	0x0376DEE8 STRB W8, [X19 + 0xED2]
	0x0376DEEC CBZ X20, 0x376DF80
	0x0376DEF0 ADRP X21, 0x9AE000
	0x0376DEF4 LDR X21, [X21 + 0x270]
	0x0376DEF8 LDR X0, [X21]
	0x0376DEFC LDR W8, [X0 + 0xE0]
	0x0376DF00 CBNZ W8, 0x376DF0C
	0x0376DF04 BL 0x1C16DFC
	0x0376DF08 LDR X0, [X21]
	0x0376DF0C LDR X8, [X0 + 0xB8]
	0x0376DF10 LDR X19, [X8]
	0x0376DF14 STRB W31, [X31 + 0xC]
	0x0376DF18 ADD X1, X31, 0xC
	0x0376DF1C MOV X0, X19
	0x0376DF20 MOV X2, X31
	0x0376DF24 BL 0x33DE64C
	0x0376DF28 LDR X0, [X21]
	0x0376DF2C LDR W8, [X0 + 0xE0]
	0x0376DF30 CBNZ W8, 0x376DF3C
	0x0376DF34 BL 0x1C16DFC
	0x0376DF38 LDR X0, [X21]
	0x0376DF3C LDR X8, [X0 + 0xB8]
	0x0376DF40 LDR X0, [X8]
	0x0376DF44 CBZ X0, 0x376DFD0
	0x0376DF48 MOV X1, X20
	0x0376DF4C MOV X2, X31
	0x0376DF50 BL 0x37C1FDC
	0x0376DF54 MOV X20, X31
	0x0376DF58 LDRB W8, [X31 + 0xC]
	0x0376DF5C CBZ W8, 0x376DF6C
	0x0376DF60 MOV X0, X19
	0x0376DF64 MOV X1, X31
	0x0376DF68 BL 0x33E14E4
	0x0376DF6C CBNZ X20, 0x376DFC8
	0x0376DF70 LDP X20, X19, [X31 + 0x20]
	0x0376DF74 LDP X30, X21, [X31 + 0x10]
	0x0376DF78 ADD X31, X31, 0x30
	0x0376DF7C RET
	0x0376DF80 ADRP X0, 0x98B000
	0x0376DF84 LDR X0, [X0 + 0x528]
	0x0376DF88 BL 0x1C16D08
	0x0376DF8C BL 0x1C16F10
	0x0376DF90 MOV X19, X0
	0x0376DF94 ADRP X0, 0x990000
	0x0376DF98 LDR X0, [X0 + 0xEC8]
	0x0376DF9C BL 0x1C16D08
	0x0376DFA0 MOV X1, X0
	0x0376DFA4 MOV X0, X19
	0x0376DFA8 MOV X2, X31
	0x0376DFAC BL 0x330E100
	0x0376DFB0 ADRP X0, 0x9D9000
	0x0376DFB4 LDR X0, [X0 + 0x8B0]
	0x0376DFB8 BL 0x1C16D08
	0x0376DFBC MOV X1, X0
	0x0376DFC0 MOV X0, X19
	0x0376DFC4 BL 0x1C16DEC
	0x0376DFC8 MOV X0, X20
	0x0376DFCC BL 0x1C16F18
	0x0376DFD0 BL 0x1C16F20
	0x0376DFD4 B 0x376DFD8
	0x0376DFD8 MOV X21, X0
	0x0376DFDC CMP W1, 0x1
	0x0376DFE0 B.NE 0x376DFF8
	0x0376DFE4 MOV X0, X21
	0x0376DFE8 BL 0x3EB1AD0
	0x0376DFEC LDR X20, [X0]
	0x0376DFF0 BL 0x3EB1AE0
	0x0376DFF4 B 0x376DF58
	0x0376DFF8 MOV X20, X31
	0x0376DFFC B 0x376E004
	0x0376E000 MOV X21, X0
	0x0376E004 LDRB W8, [X31 + 0xC]
	0x0376E008 CBZ W8, 0x376E018
	0x0376E00C MOV X0, X19
	0x0376E010 MOV X1, X31
	0x0376E014 BL 0x33E14E4
	0x0376E018 CBNZ X20, 0x376E024
	0x0376E01C MOV X0, X21
	0x0376E020 BL 0x1D2C690
	0x0376E024 MOV X0, X20
	0x0376E028 BL 0x1C16F18
	0x0376E02C BL 0x1990590
	0x0376E030 SUB X31, X31, 0x30
	0x0376E034 STP X30, X21, [X31 + 0x10]
	0x0376E038 STP X20, X19, [X31 + 0x20]
	0x0376E03C ADRP X19, 0xC72000
	0x0376E040 LDRB W8, [X19 + 0xED3]
	0x0376E044 MOV X20, X0
	0x0376E048 TBNZ X8, 0x0, 0x376E060
	0x0376E04C ADRP X0, 0x9AD000
	0x0376E050 LDR X0, [X0 + 0x270]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC74000
	009 Move W8, [X23+3779]
	010 Move X20, X3
	011 Move X21, X2
	012 Move X19, X1
	013 Move X22, X0
	014 Move [X31], X3
	015 Move [X31+8], X4
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x9AF000
	021 Move X0, [X0+624]
	022 Call 0x1C17CF4
	023 Move X0, 0x9DA000
	024 Move X0, [X0+2008]
	025 Call 0x1C17CF4
	026 Move X0, 0x9DA000
	027 Move X0, [X0+2016]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3779], W8
	031 Compare X22, 0
	032 JumpIfEqual {87}
	033 Move X0, X19
	034 Move X1, X31
	035 Call String.IsNullOrEmpty, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {94}
	040 Move X23, 0x9AF000
	041 Move X23, [X23+624]
	042 Move X0, [X23]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X23]
	048 Move X8, [X0+184]
	049 Move X0, [X8]
	050 Compare X0, 0
	051 JumpIfEqual {86}
	052 Move X1, X22
	053 Move X2, X19
	054 Move X3, X21
	055 Move X4, X31
	056 Call InputManager.RegisterControlLayoutBuilder, X0, X1, X2, X3
	057 And W31, W20, 255
	058 Move X0, [X23]
	059 Move X21, 0x9DA000
	060 Move W8, [X0+224]
	061 Move X21, [X21+2016]
	062 Compare W8, 0
	063 JumpIfNotEqual {66}
	064 Call 0x1C17DFC
	065 Move X0, [X23]
	066 Move X8, [X0+184]
	067 Move X1, [X21]
	068 Add X0, X31, 0
	069 Move X20, [X8]
	070 Call Nullable`1<InputDeviceMatcher>.get_Value, X0
	071 Compare X20, 0
	072 JumpIfEqual {86}
	073 Move X2, X0
	074 Move X0, X20
	075 Move X1, X19
	076 Move X3, X31
	077 Call InputManager.RegisterControlLayoutMatcher, X0, X1, X2
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Move X22, [X31+32]
	081 Move X21, [X31+40]
	082 Move X30, [X31+16]
	083 Move X23, [X31+24]
	084 Add X31, X31, 64
	085 Return 
	086 Call 0x1C17F20
	087 Move X0, 0x98C000
	088 Move X0, [X0+1320]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X19, X0
	092 Move X0, 0x9D9000
	093 Move X0, [X0+2032]
	094 Move X0, 0x98B000
	095 Move X0, [X0+1320]
	096 Call 0x1C17D08
	097 Call 0x1C17F10
	098 Move X19, X0
	099 Move X0, 0x98E000
	100 Move X0, [X0+1416]
	101 Call 0x1C17D08
	102 Move X1, X0
	103 Move X0, X19
	104 Move X2, X31
	105 Call ArgumentNullException..ctor, X0, X1
	106 Move X0, 0x9D9000
	107 Move X0, [X0+2040]
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X19
	111 Call 0x1C17DEC

Method: System.Void RegisterPrecompiledLayout(System.String metadata)

Disassembly:
	0x0220D8A8 BL 0x2AA4804
	0x0220D8AC CBZ X20, 0x220DBD0
	0x0220D8B0 LDR X8, [X21 + 0x38]
	0x0220D8B4 LDR X1, [X8 + 0x10]
	0x0220D8B8 LDRB W8, [X1 + 0x135]
	0x0220D8BC TBNZ X8, 0x0, 0x220D8CC
	0x0220D8C0 MOV X0, X1
	0x0220D8C4 BL 0x1C5C684
	0x0220D8C8 MOV X1, X0
	0x0220D8CC LDR X8, [X20]
	0x0220D8D0 LDRH W9, [X8 + 0x12E]
	0x0220D8D4 CBZ X9, 0x220D8F8
	0x0220D8D8 LDR X10, [X8 + 0xB0]
	0x0220D8DC ADD X10, X10, 0x8
	0x0220D8E0 LDUR X11, [X10 - 0x8]
	0x0220D8E4 CMP X11, X1
	0x0220D8E8 B.EQ 0x220D908
	0x0220D8EC SUBS X9, X9, 0x1
	0x0220D8F0 ADD X10, X10, 0x10
	0x0220D8F4 B.NE 0x220D8E0
	0x0220D8F8 MOV X0, X20
	0x0220D8FC MOV W2, W31
	0x0220D900 BL 0x1C5C788
	0x0220D904 B 0x220D914
	0x0220D908 LDRSW X9, [X10]
	0x0220D90C ADD X8, X8, X9, 0x4, LSL
	0x0220D910 ADD X0, X8, 0x138
	0x0220D914 LDP X8, X1, [X0]
	0x0220D918 MOV X0, X20
	0x0220D91C BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X20, X1
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {18}
	010 Move X0, 0x1F0F000
	011 Move X0, [X0+624]
	012 Call 0x1C17CF4
	013 Move X8, [X20+56]
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X20
	017 Call 0x1C5D6E0
	018 Move X21, 0x1F0F000
	019 Move X21, [X21+624]
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X0, [X8]
	028 Compare X0, 0
	029 JumpIfEqual {39}
	030 Move X8, [X20+56]
	031 Move X1, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call 0x22096E8, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Void RemoveLayout(System.String name)

Disassembly:
	0x0376E054 BL 0x1C16CF4
	0x0376E058 MOVZ W8, 0x1
	0x0376E05C STRB W8, [X19 + 0xED3]
	0x0376E060 CBZ X20, 0x376E0F4
	0x0376E064 ADRP X21, 0x9AD000
	0x0376E068 LDR X21, [X21 + 0x270]
	0x0376E06C LDR X0, [X21]
	0x0376E070 LDR W8, [X0 + 0xE0]
	0x0376E074 CBNZ W8, 0x376E080
	0x0376E078 BL 0x1C16DFC
	0x0376E07C LDR X0, [X21]
	0x0376E080 LDR X8, [X0 + 0xB8]
	0x0376E084 LDR X19, [X8]
	0x0376E088 STRB W31, [X31 + 0xC]
	0x0376E08C ADD X1, X31, 0xC
	0x0376E090 MOV X0, X19
	0x0376E094 MOV X2, X31
	0x0376E098 BL 0x33DE64C
	0x0376E09C LDR X0, [X21]
	0x0376E0A0 LDR W8, [X0 + 0xE0]
	0x0376E0A4 CBNZ W8, 0x376E0B0
	0x0376E0A8 BL 0x1C16DFC
	0x0376E0AC LDR X0, [X21]
	0x0376E0B0 LDR X8, [X0 + 0xB8]
	0x0376E0B4 LDR X0, [X8]
	0x0376E0B8 CBZ X0, 0x376E144
	0x0376E0BC MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC73000
	006 Move X20, 0x9AE000
	007 Move W8, [X21+3780]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AE000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3780], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.RemoveControlLayout, X0, X1
	036 Return 
	037 Call 0x1C17F20

Method: System.String TryFindMatchingLayout(UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription)

Disassembly:
	0x0376E0C0 MOV X2, X31
	0x0376E0C4 BL 0x37C2034
	0x0376E0C8 MOV X20, X31
	0x0376E0CC LDRB W8, [X31 + 0xC]
	0x0376E0D0 CBZ W8, 0x376E0E0
	0x0376E0D4 MOV X0, X19
	0x0376E0D8 MOV X1, X31
	0x0376E0DC BL 0x33E14E4
	0x0376E0E0 CBNZ X20, 0x376E13C
	0x0376E0E4 LDP X20, X19, [X31 + 0x20]
	0x0376E0E8 LDP X30, X21, [X31 + 0x10]
	0x0376E0EC ADD X31, X31, 0x30
	0x0376E0F0 RET
	0x0376E0F4 ADRP X0, 0x98A000
	0x0376E0F8 LDR X0, [X0 + 0x528]
	0x0376E0FC BL 0x1C16D08
	0x0376E100 BL 0x1C16F10
	0x0376E104 MOV X19, X0
	0x0376E108 ADRP X0, 0x98F000
	0x0376E10C LDR X0, [X0 + 0xEC8]
	0x0376E110 BL 0x1C16D08
	0x0376E114 MOV X1, X0
	0x0376E118 MOV X0, X19
	0x0376E11C MOV X2, X31
	0x0376E120 BL 0x330E100
	0x0376E124 ADRP X0, 0x9D8000
	0x0376E128 LDR X0, [X0 + 0x8B8]
	0x0376E12C BL 0x1C16D08
	0x0376E130 MOV X1, X0
	0x0376E134 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC73000
	006 Move X20, 0x9AE000
	007 Move W8, [X21+3781]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AE000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3781], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {40}
	029 Move X1, X19
	030 Move W2, W31
	031 Move X3, X31
	032 Call InputManager.TryFindMatchingControlLayout, X0, X1, X2
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call InternedString.op_Implicit, X0
	039 Return X0
	040 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<System.String> ListLayouts()

Disassembly:
	0x0376E138 BL 0x1C16DEC
	0x0376E13C MOV X0, X20
	0x0376E140 BL 0x1C16F18
	0x0376E144 BL 0x1C16F20
	0x0376E148 B 0x376E14C
	0x0376E14C MOV X21, X0
	0x0376E150 CMP W1, 0x1
	0x0376E154 B.NE 0x376E16C
	0x0376E158 MOV X0, X21
	0x0376E15C BL 0x3EB1AD0
	0x0376E160 LDR X20, [X0]
	0x0376E164 BL 0x3EB1AE0
	0x0376E168 B 0x376E0CC
	0x0376E16C MOV X20, X31
	0x0376E170 B 0x376E178
	0x0376E174 MOV X21, X0
	0x0376E178 LDRB W8, [X31 + 0xC]
	0x0376E17C CBZ W8, 0x376E18C
	0x0376E180 MOV X0, X19
	0x0376E184 MOV X1, X31
	0x0376E188 BL 0x33E14E4
	0x0376E18C CBNZ X20, 0x376E198
	0x0376E190 MOV X0, X21
	0x0376E194 BL 0x1D2C690
	0x0376E198 MOV X0, X20
	0x0376E19C BL 0x1C16F18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC73000
	005 Move X19, 0x9AE000
	006 Move W8, [X20+3782]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AE000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3782], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X0, [X8]
	025 Compare X0, 0
	026 JumpIfEqual {34}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Call InputManager.ListControlLayouts, X0, X1
	033 Return X0
	034 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<System.String> ListLayoutsBasedOn(System.String baseLayout)

Disassembly:
	0x0376E1A0 BL 0x1990590
	0x0376E1A4 SUB X31, X31, 0x30
	0x0376E1A8 STP X30, X21, [X31 + 0x10]
	0x0376E1AC STP X20, X19, [X31 + 0x20]
	0x0376E1B0 ADRP X19, 0xC72000
	0x0376E1B4 ADRP X21, 0x9AD000
	0x0376E1B8 LDRB W8, [X19 + 0xED4]
	0x0376E1BC LDR X21, [X21 + 0x270]
	0x0376E1C0 MOV X20, X0
	0x0376E1C4 TBNZ X8, 0x0, 0x376E1DC
	0x0376E1C8 ADRP X0, 0x9AD000
	0x0376E1CC LDR X0, [X0 + 0x270]
	0x0376E1D0 BL 0x1C16CF4
	0x0376E1D4 MOVZ W8, 0x1
	0x0376E1D8 STRB W8, [X19 + 0xED4]
	0x0376E1DC LDR X0, [X21]
	0x0376E1E0 LDR W8, [X0 + 0xE0]
	0x0376E1E4 CBNZ W8, 0x376E1F0
	0x0376E1E8 BL 0x1C16DFC
	0x0376E1EC LDR X0, [X21]
	0x0376E1F0 LDR X8, [X0 + 0xB8]
	0x0376E1F4 LDR X19, [X8]
	0x0376E1F8 STRB W31, [X31 + 0xC]
	0x0376E1FC ADD X1, X31, 0xC
	0x0376E200 MOV X0, X19
	0x0376E204 MOV X2, X31
	0x0376E208 BL 0x33DE64C
	0x0376E20C LDR X0, [X21]
	0x0376E210 LDR W8, [X0 + 0xE0]
	0x0376E214 CBNZ W8, 0x376E220
	0x0376E218 BL 0x1C16DFC
	0x0376E21C LDR X0, [X21]
	0x0376E220 LDR X8, [X0 + 0xB8]
	0x0376E224 LDR X0, [X8]
	0x0376E228 CBZ X0, 0x376E26C
	0x0376E22C MOV X1, X20
	0x0376E230 MOV X2, X31
	0x0376E234 BL 0x37C208C
	0x0376E238 MOV X20, X31
	0x0376E23C LDRB W8, [X31 + 0xC]
	0x0376E240 CBZ W8, 0x376E250
	0x0376E244 MOV X0, X19
	0x0376E248 MOV X1, X31
	0x0376E24C BL 0x33E14E4
	0x0376E250 CBNZ X20, 0x376E264
	0x0376E254 LDP X20, X19, [X31 + 0x20]
	0x0376E258 LDP X30, X21, [X31 + 0x10]
	0x0376E25C ADD X31, X31, 0x30
	0x0376E260 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC73000
	005 Move W8, [X20+3783]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9AE000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3783], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call String.IsNullOrEmpty, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {42}
	023 Move X20, 0x9AE000
	024 Move X20, [X20+624]
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X0, [X8]
	033 Compare X0, 0
	034 JumpIfEqual {60}
	035 Move X1, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, X31
	039 Move X30, [X31+32]
	040 Call InputManager.ListControlLayouts, X0, X1
	041 Return X0
	042 Move X0, 0x98B000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x9D9000
	048 Move X0, [X0+2048]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x9D9000
	055 Move X0, [X0+2056]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC
	060 Call 0x1C17F20

Method: UnityEngine.InputSystem.Layouts.InputControlLayout LoadLayout(System.String name)

Disassembly:
	0x0376E264 MOV X0, X20
	0x0376E268 BL 0x1C16F18
	0x0376E26C BL 0x1C16F20
	0x0376E270 B 0x376E274
	0x0376E274 MOV X21, X0
	0x0376E278 CMP W1, 0x1
	0x0376E27C B.NE 0x376E294
	0x0376E280 MOV X0, X21
	0x0376E284 BL 0x3EB1AD0
	0x0376E288 LDR X20, [X0]
	0x0376E28C BL 0x3EB1AE0
	0x0376E290 B 0x376E23C
	0x0376E294 MOV X20, X31
	0x0376E298 B 0x376E2A0
	0x0376E29C MOV X21, X0
	0x0376E2A0 LDRB W8, [X31 + 0xC]
	0x0376E2A4 CBZ W8, 0x376E2B4
	0x0376E2A8 MOV X0, X19
	0x0376E2AC MOV X1, X31
	0x0376E2B0 BL 0x33E14E4
	0x0376E2B4 CBNZ X20, 0x376E2C0
	0x0376E2B8 MOV X0, X21
	0x0376E2BC BL 0x1D2C690
	0x0376E2C0 MOV X0, X20
	0x0376E2C4 BL 0x1C16F18
	0x0376E2C8 BL 0x1990590
	0x0376E2CC SUB X31, X31, 0x30
	0x0376E2D0 STP X30, X21, [X31 + 0x10]
	0x0376E2D4 STP X20, X19, [X31 + 0x20]
	0x0376E2D8 ADRP X19, 0xC72000
	0x0376E2DC ADRP X21, 0x9AD000
	0x0376E2E0 LDRB W8, [X19 + 0xED5]
	0x0376E2E4 LDR X21, [X21 + 0x270]
	0x0376E2E8 MOV X20, X0
	0x0376E2EC TBNZ X8, 0x0, 0x376E304
	0x0376E2F0 ADRP X0, 0x9AD000
	0x0376E2F4 LDR X0, [X0 + 0x270]
	0x0376E2F8 BL 0x1C16CF4
	0x0376E2FC MOVZ W8, 0x1
	0x0376E300 STRB W8, [X19 + 0xED5]
	0x0376E304 LDR X0, [X21]
	0x0376E308 LDR W8, [X0 + 0xE0]
	0x0376E30C CBNZ W8, 0x376E318
	0x0376E310 BL 0x1C16DFC
	0x0376E314 LDR X0, [X21]
	0x0376E318 LDR X8, [X0 + 0xB8]
	0x0376E31C LDR X19, [X8]
	0x0376E320 STRB W31, [X31 + 0xC]
	0x0376E324 ADD X1, X31, 0xC
	0x0376E328 MOV X0, X19
	0x0376E32C MOV X2, X31
	0x0376E330 BL 0x33DE64C
	0x0376E334 LDR X0, [X21]
	0x0376E338 LDR W8, [X0 + 0xE0]
	0x0376E33C CBNZ W8, 0x376E348
	0x0376E340 BL 0x1C16DFC
	0x0376E344 LDR X0, [X21]
	0x0376E348 LDR X8, [X0 + 0xB8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xC73000
	006 Move W8, [X20+3784]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AE000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3784], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call String.IsNullOrEmpty, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {52}
	024 Move X20, 0x9AE000
	025 Move X20, [X20+624]
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Add X0, X31, 0
	034 Move X1, X19
	035 Move X2, X31
	036 Move X20, [X8]
	037 Move [X31], X31
	038 Move [X31+8], X31
	039 Call InternedString..ctor, X0, X1
	040 Compare X20, 0
	041 JumpIfEqual {70}
	042 Move X1, [X31]
	043 Move X2, [X31+8]
	044 Move X0, X20
	045 Move X3, X31
	046 Call InputManager.TryLoadControlLayout, X0, X1
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Add X31, X31, 48
	051 Return X0
	052 Move X0, 0x98B000
	053 Move X0, [X0+1320]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X19, X0
	057 Move X0, 0x98E000
	058 Move X0, [X0+1416]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call ArgumentNullException..ctor, X0, X1
	064 Move X0, 0x9D9000
	065 Move X0, [X0+2064]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1C17DEC
	070 Call 0x1C17F20

Method: UnityEngine.InputSystem.Layouts.InputControlLayout LoadLayout()

Disassembly:
	0x0220C9F0 BL 0x1C16CF4
	0x0220C9F4 LDR X8, [X20 + 0x38]
	0x0220C9F8 CBNZ X8, 0x220CA08
	0x0220C9FC MOV X0, X20
	0x0220CA00 BL 0x1C5C6E0
	0x0220CA04 LDR X8, [X20 + 0x38]
	0x0220CA08 ADRP X9, 0x1EE7000
	0x0220CA0C LDR X9, [X9 + 0x6C0]
	0x0220CA10 LDR X20, [X8]
	0x0220CA14 LDR X0, [X9]
	0x0220CA18 LDR W9, [X0 + 0xE0]
	0x0220CA1C CBNZ W9, 0x220CA24
	0x0220CA20 BL 0x1C16DFC
	0x0220CA24 MOV X0, X20
	0x0220CA28 MOV X1, X31
	0x0220CA2C BL 0x338C698
	0x0220CA30 ADRP X8, 0x1F0F000
	0x0220CA34 LDR X8, [X8 + 0x270]
	0x0220CA38 MOV X20, X0
	0x0220CA3C LDR X8, [X8]
	0x0220CA40 LDR W9, [X8 + 0xE0]
	0x0220CA44 CBNZ W9, 0x220CA50
	0x0220CA48 MOV X0, X8
	0x0220CA4C BL 0x1C16DFC
	0x0220CA50 MOV X0, X20
	0x0220CA54 MOV X1, X19
	0x0220CA58 LDP X20, X19, [X31 + 0x10]
	0x0220CA5C MOV X2, X31
	0x0220CA60 LDR X30, [X31], #0x20
	0x0220CA64 B 0x376D5AC
	0x0220CA68 SUB X31, X31, 0x30
	0x0220CA6C STR X30, [X31 + 0x10]
	0x0220CA70 STP X20, X19, [X31 + 0x20]
	0x0220CA74 LDR X8, [X1 + 0x38]
	0x0220CA78 MOV X19, X1
	0x0220CA7C MOV X20, X0
	0x0220CA80 CBNZ X8, 0x220CAAC
	0x0220CA84 ADRP X0, 0x1F0F000
	0x0220CA88 LDR X0, [X0 + 0xF90]
	0x0220CA8C BL 0x1C16CF4
	0x0220CA90 ADRP X0, 0x1F0F000
	0x0220CA94 LDR X0, [X0 + 0xF98]
	0x0220CA98 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {19}
	008 Move X0, 0x1F10000
	009 Move X0, [X0+624]
	010 Call 0x1C17CF4
	011 Move X0, 0x1EE8000
	012 Move X0, [X0+1728]
	013 Call 0x1C17CF4
	014 Move X8, [X19+56]
	015 Compare X8, 0
	016 JumpIfNotEqual {19}
	017 Move X0, X19
	018 Call 0x1C5D6E0
	019 Move X20, 0x1F10000
	020 Move X20, [X20+624]
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X20]
	027 Move X9, 0x1EE8000
	028 Move X8, [X0+184]
	029 Move X9, [X9+1728]
	030 Move X0, [X9]
	031 Move X9, [X19+56]
	032 Move X19, [X8]
	033 Move W8, [X0+224]
	034 Move X20, [X9]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Call Type.GetTypeFromHandle, X0
	041 Compare X19, 0
	042 JumpIfEqual {51}
	043 Move X1, X0
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X2, X31
	048 Move X30, [X31+32]
	049 Call InputManager.TryLoadControlLayout, X0, X1
	050 Return X0
	051 Call 0x1C17F20

Method: System.String GetNameOfBaseLayout(System.String layoutName)

Disassembly:
	0x0376E34C LDR X0, [X8]
	0x0376E350 CBZ X0, 0x376E394
	0x0376E354 MOV X1, X20
	0x0376E358 MOV X2, X31
	0x0376E35C BL 0x37C2370
	0x0376E360 MOV X20, X31
	0x0376E364 LDRB W8, [X31 + 0xC]
	0x0376E368 CBZ W8, 0x376E378
	0x0376E36C MOV X0, X19
	0x0376E370 MOV X1, X31
	0x0376E374 BL 0x33E14E4
	0x0376E378 CBNZ X20, 0x376E38C
	0x0376E37C LDP X20, X19, [X31 + 0x20]
	0x0376E380 LDP X30, X21, [X31 + 0x10]
	0x0376E384 ADD X31, X31, 0x30
	0x0376E388 RET
	0x0376E38C MOV X0, X20
	0x0376E390 BL 0x1C16F18
	0x0376E394 BL 0x1C16F20
	0x0376E398 B 0x376E39C
	0x0376E39C MOV X21, X0
	0x0376E3A0 CMP W1, 0x1
	0x0376E3A4 B.NE 0x376E3BC
	0x0376E3A8 MOV X0, X21
	0x0376E3AC BL 0x3EB1AD0
	0x0376E3B0 LDR X20, [X0]
	0x0376E3B4 BL 0x3EB1AE0
	0x0376E3B8 B 0x376E364
	0x0376E3BC MOV X20, X31
	0x0376E3C0 B 0x376E3C8
	0x0376E3C4 MOV X21, X0
	0x0376E3C8 LDRB W8, [X31 + 0xC]
	0x0376E3CC CBZ W8, 0x376E3DC
	0x0376E3D0 MOV X0, X19
	0x0376E3D4 MOV X1, X31
	0x0376E3D8 BL 0x33E14E4
	0x0376E3DC CBNZ X20, 0x376E3E8
	0x0376E3E0 MOV X0, X21
	0x0376E3E4 BL 0x1D2C690
	0x0376E3E8 MOV X0, X20
	0x0376E3EC BL 0x1C16F18
	0x0376E3F0 BL 0x1990590
	0x0376E3F4 STR X30, [X31 - 0x20]!
	0x0376E3F8 STP X20, X19, [X31 + 0x10]
	0x0376E3FC ADRP X20, 0xC72000
	0x0376E400 ADRP X19, 0x9AD000
	0x0376E404 LDRB W8, [X20 + 0xED6]
	0x0376E408 LDR X19, [X19 + 0x270]
	0x0376E40C TBNZ X8, 0x0, 0x376E424
	0x0376E410 ADRP X0, 0x9AD000
	0x0376E414 LDR X0, [X0 + 0x270]
	0x0376E418 BL 0x1C16CF4
	0x0376E41C MOVZ W8, 0x1
	0x0376E420 STRB W8, [X20 + 0xED6]
	0x0376E424 LDR X0, [X19]
	0x0376E428 LDR W8, [X0 + 0xE0]
	0x0376E42C CBNZ W8, 0x376E438
	0x0376E430 BL 0x1C16DFC
	0x0376E434 LDR X0, [X19]
	0x0376E438 LDR X8, [X0 + 0xB8]
	0x0376E43C LDR X8, [X8]
	0x0376E440 CBZ X8, 0x376E454
	0x0376E444 LDR V0, [X8 + 0x14]
	0x0376E448 LDP X20, X19, [X31 + 0x10]
	0x0376E44C LDR X30, [X31], #0x20
	0x0376E450 RET
	0x0376E454 BL 0x1C16F20
	0x0376E458 STR D8, [X31 - 0x20]!
	0x0376E45C STR X30, [X31 + 0x8]
	0x0376E460 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0xC73000
	006 Move W8, [X20+3785]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x9AE000
	013 Move X0, [X0+3512]
	014 Call 0x1C17CF4
	015 Move X0, 0x9AE000
	016 Move X0, [X0+3520]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3785], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Move [X31+16], X31
	023 Move [X31+24], X31
	024 Move [X31], X31
	025 Move [X31+8], X31
	026 Call String.IsNullOrEmpty, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {68}
	031 Move X20, 0x9AE000
	032 Move X20, [X20+3520]
	033 Add X0, X31, 16
	034 Move X1, X19
	035 Move X2, X31
	036 Call InternedString..ctor, X0, X1
	037 Move X0, [X20]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X20]
	043 Move X8, [X0+184]
	044 Move X0, [X8+40]
	045 Compare X0, 0
	046 JumpIfEqual {86}
	047 Move X8, 0x9AE000
	048 Move X8, [X8+3512]
	049 Move X1, [X31+16]
	050 Move X2, [X31+24]
	051 Add X3, X31, 0
	052 Move X4, [X8]
	053 Call Dictionary`2<InternedString, InternedString>.TryGetValue, X0, X1, X2
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {62}
	058 Move X0, [X31]
	059 Move X1, [X31+8]
	060 Move X2, X31
	061 Call InternedString.op_Implicit, X0
	062 Move X0, X31
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X30, [X31+32]
	066 Add X31, X31, 64
	067 Return X0
	068 Move X0, 0x98B000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0x9D9000
	074 Move X0, [X0+2072]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0x9D9000
	081 Move X0, [X0+2080]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC
	086 Call 0x1C17F20

Method: System.Boolean IsFirstLayoutBasedOnSecond(System.String firstLayoutName, System.String secondLayoutName)

Disassembly:
	0x0376E464 ADRP X20, 0xC72000
	0x0376E468 ADRP X19, 0x9AD000
	0x0376E46C LDRB W8, [X20 + 0xED7]
	0x0376E470 LDR X19, [X19 + 0x270]
	0x0376E474 MOV V8.16B, V0.16B
	0x0376E478 TBNZ X8, 0x0, 0x376E490
	0x0376E47C ADRP X0, 0x9AD000
	0x0376E480 LDR X0, [X0 + 0x270]
	0x0376E484 BL 0x1C16CF4
	0x0376E488 MOVZ W8, 0x1
	0x0376E48C STRB W8, [X20 + 0xED7]
	0x0376E490 LDR X0, [X19]
	0x0376E494 LDR W8, [X0 + 0xE0]
	0x0376E498 CBNZ W8, 0x376E4A4
	0x0376E49C BL 0x1C16DFC
	0x0376E4A0 LDR X0, [X19]
	0x0376E4A4 LDR X8, [X0 + 0xB8]
	0x0376E4A8 LDR X0, [X8]
	0x0376E4AC CBZ X0, 0x376E4C8
	0x0376E4B0 LDP X20, X19, [X31 + 0x10]
	0x0376E4B4 LDR X30, [X31 + 0x8]
	0x0376E4B8 MOV V0.16B, V8.16B
	0x0376E4BC MOV X1, X31
	0x0376E4C0 LDR V8, [X31], #0x20
	0x0376E4C4 B 0x37C1E04
	0x0376E4C8 BL 0x1C16F20
	0x0376E4CC SUB X31, X31, 0x40
	0x0376E4D0 STR X30, [X31 + 0x10]
	0x0376E4D4 STP X22, X21, [X31 + 0x20]
	0x0376E4D8 STP X20, X19, [X31 + 0x30]
	0x0376E4DC ADRP X22, 0xC72000
	0x0376E4E0 LDRB W8, [X22 + 0xED8]
	0x0376E4E4 MOV X21, X2
	0x0376E4E8 MOV X19, X1
	0x0376E4EC MOV X20, X0
	0x0376E4F0 TBNZ X8, 0x0, 0x376E508
	0x0376E4F4 ADRP X0, 0x9AD000
	0x0376E4F8 LDR X0, [X0 + 0x270]
	0x0376E4FC BL 0x1C16CF4
	0x0376E500 MOVZ W8, 0x1
	0x0376E504 STRB W8, [X22 + 0xED8]
	0x0376E508 MOV X0, X20
	0x0376E50C MOV X1, X31
	0x0376E510 BL 0x32277A8
	0x0376E514 TBNZ X0, 0x0, 0x376E580
	0x0376E518 ADRP X22, 0x9AD000
	0x0376E51C LDR X22, [X22 + 0x270]
	0x0376E520 LDR X0, [X22]
	0x0376E524 LDR W8, [X0 + 0xE0]
	0x0376E528 CBNZ W8, 0x376E534
	0x0376E52C BL 0x1C16DFC
	0x0376E530 LDR X0, [X22]
	0x0376E534 LDR X8, [X0 + 0xB8]
	0x0376E538 ADD X0, X31, 0x0
	0x0376E53C MOV X1, X21
	0x0376E540 MOV X2, X31
	0x0376E544 LDR X22, [X8]
	0x0376E548 STP X31, X31, [X31]
	0x0376E54C BL 0x3757420
	0x0376E550 CBZ X22, 0x376E5C8
	0x0376E554 LDP X3, X4, [X31]
	0x0376E558 MOV X0, X22
	0x0376E55C MOV X1, X20
	0x0376E560 MOV X2, X19
	0x0376E564 MOV X5, X31
	0x0376E568 BL 0x37BCBC4
	0x0376E56C LDP X20, X19, [X31 + 0x30]
	0x0376E570 LDP X22, X21, [X31 + 0x20]
	0x0376E574 LDR X30, [X31 + 0x10]
	0x0376E578 ADD X31, X31, 0x40
	0x0376E57C RET
	0x0376E580 ADRP X0, 0x98A000
	0x0376E584 LDR X0, [X0 + 0x528]
	0x0376E588 BL 0x1C16D08
	0x0376E58C BL 0x1C16F10
	0x0376E590 MOV X19, X0
	0x0376E594 ADRP X0, 0x9D8000
	0x0376E598 LDR X0, [X0 + 0x8C0]
	0x0376E59C BL 0x1C16D08
	0x0376E5A0 MOV X1, X0
	0x0376E5A4 MOV X0, X19
	0x0376E5A8 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xC73000
	007 Move W8, [X21+3786]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AE000
	015 Move X0, [X0+3520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3786], W8
	019 Move X0, X20
	020 Move X1, X31
	021 Move [X31+16], X31
	022 Move [X31+24], X31
	023 Move [X31], X31
	024 Move [X31+8], X31
	025 Call String.IsNullOrEmpty, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {79}
	030 Move X0, X19
	031 Move X1, X31
	032 Call String.IsNullOrEmpty, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {86}
	037 Add X0, X31, 16
	038 Move X1, X20
	039 Move X2, X31
	040 Call InternedString..ctor, X0, X1
	041 Add X0, X31, 0
	042 Move X1, X19
	043 Move X2, X31
	044 Call InternedString..ctor, X0, X1
	045 Move X0, [X31+16]
	046 Move X1, [X31+24]
	047 Move X2, [X31]
	048 Move X3, [X31+8]
	049 Move X4, X31
	050 Call InternedString.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {56}
	055 Move W0, 1
	056 Move X19, 0x9AE000
	057 Move X19, [X19+3520]
	058 Move X0, [X19]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X19]
	064 Move X8, [X0+184]
	065 Move X1, [X31]
	066 Move X2, [X31+8]
	067 Move X3, [X31+16]
	068 Move X4, [X31+24]
	069 Move X5, X31
	070 Add X0, X8, 16
	071 Call Collection.IsBasedOn, X0, X1, X2
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 And W0, W0, 1
	077 Add X31, X31, 64
	078 Return X0
	079 Move X0, 0x98B000
	080 Move X0, [X0+1320]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0x9D9000
	085 Move X0, [X0+2088]
	086 Move X0, 0x98B000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0x9D9000
	092 Move X0, [X0+2096]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0x9D9000
	099 Move X0, [X0+2104]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC

Method: System.Void RegisterProcessor(System.Type type, System.String name = null)

Disassembly:
	0x0376E5AC BL 0x330E100
	0x0376E5B0 ADRP X0, 0x9D8000
	0x0376E5B4 LDR X0, [X0 + 0x8C8]
	0x0376E5B8 BL 0x1C16D08
	0x0376E5BC MOV X1, X0
	0x0376E5C0 MOV X0, X19
	0x0376E5C4 BL 0x1C16DEC
	0x0376E5C8 BL 0x1C16F20
	0x0376E5CC SUB X31, X31, 0xA0
	0x0376E5D0 STR X30, [X31 + 0x80]
	0x0376E5D4 STP X20, X19, [X31 + 0x90]
	0x0376E5D8 ADRP X20, 0xC72000
	0x0376E5DC LDRB W8, [X20 + 0xED9]
	0x0376E5E0 MOV X19, X0
	0x0376E5E4 TBNZ X8, 0x0, 0x376E5FC
	0x0376E5E8 ADRP X0, 0x9AD000
	0x0376E5EC LDR X0, [X0 + 0x270]
	0x0376E5F0 BL 0x1C16CF4
	0x0376E5F4 MOVZ W8, 0x1
	0x0376E5F8 STRB W8, [X20 + 0xED9]
	0x0376E5FC MOV X0, X19
	0x0376E600 MOV X1, X31
	0x0376E604 BL 0x381DB2C
	0x0376E608 TBNZ X0, 0x0, 0x376E680
	0x0376E60C ADRP X20, 0x9AD000
	0x0376E610 LDR X20, [X20 + 0x270]
	0x0376E614 LDR X0, [X20]
	0x0376E618 LDR W8, [X0 + 0xE0]
	0x0376E61C CBNZ W8, 0x376E628
	0x0376E620 BL 0x1C16DFC
	0x0376E624 LDR X0, [X20]
	0x0376E628 LDR X8, [X0 + 0xB8]
	0x0376E62C LDP V2, V0, [X19 + 0x10]
	0x0376E630 LDR X9, [X19 + 0x30]
	0x0376E634 LDR V1, [X19]
	0x0376E638 LDR X0, [X8]
	0x0376E63C STP V2, V0, [X31 + 0x50]
	0x0376E640 STR X9, [X31 + 0x70]
	0x0376E644 STR V1, [X31 + 0x4]
	0x0376E648 CBZ X0, 0x376E6DC
	0x0376E64C LDP V0, V1, [X31 + 0x40]
	0x0376E650 LDR V2, [X31 + 0x6]
	0x0376E654 LDR X8, [X31 + 0x70]
	0x0376E658 ADD X1, X31, 0x0
	0x0376E65C MOV X2, X31
	0x0376E660 STP V0, V1, [X31]
	0x0376E664 STR V2, [X31 + 0x2]
	0x0376E668 STR X8, [X31 + 0x30]
	0x0376E66C BL 0x37C6028
	0x0376E670 LDP X20, X19, [X31 + 0x90]
	0x0376E674 LDR X30, [X31 + 0x80]
	0x0376E678 ADD X31, X31, 0xA0
	0x0376E67C RET
	0x0376E680 ADRP X0, 0x98D000
	0x0376E684 LDR X0, [X0 + 0x578]
	0x0376E688 BL 0x1C16D08
	0x0376E68C BL 0x1C16F10
	0x0376E690 MOV X19, X0
	0x0376E694 ADRP X0, 0x9D8000
	0x0376E698 LDR X0, [X0 + 0x8D0]
	0x0376E69C BL 0x1C16D08
	0x0376E6A0 MOV X20, X0
	0x0376E6A4 ADRP X0, 0x9D8000
	0x0376E6A8 LDR X0, [X0 + 0x8D8]
	0x0376E6AC BL 0x1C16D08
	0x0376E6B0 MOV X2, X0
	0x0376E6B4 MOV X0, X19
	0x0376E6B8 MOV X1, X20
	0x0376E6BC MOV X3, X31
	0x0376E6C0 BL 0x330E16C
	0x0376E6C4 ADRP X0, 0x9D8000
	0x0376E6C8 LDR X0, [X0 + 0x8E0]
	0x0376E6CC BL 0x1C16D08
	0x0376E6D0 MOV X1, X0
	0x0376E6D4 MOV X0, X19
	0x0376E6D8 BL 0x1C16DEC
	0x0376E6DC BL 0x1C16F20
	0x0376E6E0 STR X30, [X31 - 0x20]!
	0x0376E6E4 STP X20, X19, [X31 + 0x10]
	0x0376E6E8 ADRP X20, 0xC72000
	0x0376E6EC LDRB W8, [X20 + 0xEDA]
	0x0376E6F0 MOV X19, X0
	0x0376E6F4 TBNZ X8, 0x0, 0x376E70C
	0x0376E6F8 ADRP X0, 0x9AD000
	0x0376E6FC LDR X0, [X0 + 0x270]
	0x0376E700 BL 0x1C16CF4
	0x0376E704 MOVZ W8, 0x1
	0x0376E708 STRB W8, [X20 + 0xEDA]
	0x0376E70C CBZ X19, 0x376E74C
	0x0376E710 ADRP X20, 0x9AD000
	0x0376E714 LDR X20, [X20 + 0x270]
	0x0376E718 LDR X0, [X20]
	0x0376E71C LDR W8, [X0 + 0xE0]
	0x0376E720 CBNZ W8, 0x376E72C
	0x0376E724 BL 0x1C16DFC
	0x0376E728 LDR X0, [X20]
	0x0376E72C LDR X8, [X0 + 0xB8]
	0x0376E730 LDR X0, [X8]
	0x0376E734 CBZ X0, 0x376E794
	0x0376E738 MOV X1, X19
	0x0376E73C LDP X20, X19, [X31 + 0x10]
	0x0376E740 MOV X2, X31
	0x0376E744 LDR X30, [X31], #0x20
	0x0376E748 B 0x37C45C8
	0x0376E74C ADRP X0, 0x98A000
	0x0376E750 LDR X0, [X0 + 0x528]
	0x0376E754 BL 0x1C16D08
	0x0376E758 BL 0x1C16F10
	0x0376E75C MOV X19, X0
	0x0376E760 ADRP X0, 0x9AD000
	0x0376E764 LDR X0, [X0 + 0xD20]
	0x0376E768 BL 0x1C16D08
	0x0376E76C MOV X1, X0
	0x0376E770 MOV X0, X19
	0x0376E774 MOV X2, X31
	0x0376E778 BL 0x330E100
	0x0376E77C ADRP X0, 0x9D8000
	0x0376E780 LDR X0, [X0 + 0x8E8]
	0x0376E784 BL 0x1C16D08
	0x0376E788 MOV X1, X0
	0x0376E78C MOV X0, X19
	0x0376E790 BL 0x1C16DEC
	0x0376E794 BL 0x1C16F20
	0x0376E798 STP X30, X21, [X31 - 0x20]!
	0x0376E79C STP X20, X19, [X31 + 0x10]
	0x0376E7A0 ADRP X21, 0xC72000
	0x0376E7A4 ADRP X20, 0x9AD000
	0x0376E7A8 LDRB W8, [X21 + 0xEDB]
	0x0376E7AC LDR X20, [X20 + 0x270]
	0x0376E7B0 MOV X19, X0
	0x0376E7B4 TBNZ X8, 0x0, 0x376E7CC
	0x0376E7B8 ADRP X0, 0x9AD000
	0x0376E7BC LDR X0, [X0 + 0x270]
	0x0376E7C0 BL 0x1C16CF4
	0x0376E7C4 MOVZ W8, 0x1
	0x0376E7C8 STRB W8, [X21 + 0xEDB]
	0x0376E7CC LDR X0, [X20]
	0x0376E7D0 LDR W8, [X0 + 0xE0]
	0x0376E7D4 CBNZ W8, 0x376E7E0
	0x0376E7D8 BL 0x1C16DFC
	0x0376E7DC LDR X0, [X20]
	0x0376E7E0 LDR X8, [X0 + 0xB8]
	0x0376E7E4 LDR X0, [X8]
	0x0376E7E8 CBZ X0, 0x376E804
	0x0376E7EC MOV X1, X19
	0x0376E7F0 LDP X20, X19, [X31 + 0x10]
	0x0376E7F4 MOV W2, W31
	0x0376E7F8 MOV X3, X31
	0x0376E7FC LDP X30, X21, [X31], #0x20
	0x0376E800 B 0x37BC210
	0x0376E804 BL 0x1C16F20
	0x0376E808 STR X30, [X31 - 0x20]!
	0x0376E80C STP X20, X19, [X31 + 0x10]
	0x0376E810 ADRP X20, 0xC72000
	0x0376E814 ADRP X19, 0x9AD000
	0x0376E818 LDRB W8, [X20 + 0xEDC]
	0x0376E81C LDR X19, [X19 + 0x270]
	0x0376E820 TBNZ X8, 0x0, 0x376E838
	0x0376E824 ADRP X0, 0x9AD000
	0x0376E828 LDR X0, [X0 + 0x270]
	0x0376E82C BL 0x1C16CF4
	0x0376E830 MOVZ W8, 0x1
	0x0376E834 STRB W8, [X20 + 0xEDC]
	0x0376E838 LDR X0, [X19]
	0x0376E83C LDR W8, [X0 + 0xE0]
	0x0376E840 CBNZ W8, 0x376E84C
	0x0376E844 BL 0x1C16DFC
	0x0376E848 LDR X0, [X19]
	0x0376E84C LDR X8, [X0 + 0xB8]
	0x0376E850 LDR X0, [X8]
	0x0376E854 CBZ X0, 0x376E868
	0x0376E858 LDP X20, X19, [X31 + 0x10]
	0x0376E85C MOV X1, X31
	0x0376E860 LDR X30, [X31], #0x20
	0x0376E864 B 0x37C642C
	0x0376E868 BL 0x1C16F20
	0x0376E86C STP X30, X21, [X31 - 0x20]!
	0x0376E870 STP X20, X19, [X31 + 0x10]
	0x0376E874 ADRP X21, 0xC72000
	0x0376E878 ADRP X20, 0x9AD000
	0x0376E87C LDRB W8, [X21 + 0xEDD]
	0x0376E880 LDR X20, [X20 + 0x270]
	0x0376E884 MOV X19, X0
	0x0376E888 TBNZ X8, 0x0, 0x376E8A0
	0x0376E88C ADRP X0, 0x9AD000
	0x0376E890 LDR X0, [X0 + 0x270]
	0x0376E894 BL 0x1C16CF4
	0x0376E898 MOVZ W8, 0x1
	0x0376E89C STRB W8, [X21 + 0xEDD]
	0x0376E8A0 LDR X0, [X20]
	0x0376E8A4 LDR W8, [X0 + 0xE0]
	0x0376E8A8 CBNZ W8, 0x376E8B4
	0x0376E8AC BL 0x1C16DFC
	0x0376E8B0 LDR X0, [X20]
	0x0376E8B4 LDR X8, [X0 + 0xB8]
	0x0376E8B8 LDR X0, [X8]
	0x0376E8BC CBZ X0, 0x376E8D4
	0x0376E8C0 MOV X1, X19
	0x0376E8C4 LDP X20, X19, [X31 + 0x10]
	0x0376E8C8 MOV X2, X31
	0x0376E8CC LDP X30, X21, [X31], #0x20
	0x0376E8D0 B 0x37C6C3C
	0x0376E8D4 BL 0x1C16F20
	0x0376E8D8 SUB X31, X31, 0x90
	0x0376E8DC STR D8, [X31 + 0x50]
	0x0376E8E0 STR X30, [X31 + 0x58]
	0x0376E8E4 STP X24, X23, [X31 + 0x60]
	0x0376E8E8 STP X22, X21, [X31 + 0x70]
	0x0376E8EC STP X20, X19, [X31 + 0x80]
	0x0376E8F0 ADRP X21, 0xC72000
	0x0376E8F4 ADRP X19, 0x9AD000
	0x0376E8F8 LDRB W8, [X21 + 0xEDE]
	0x0376E8FC LDR X19, [X19 + 0x270]
	0x0376E900 MOV X20, X0
	0x0376E904 TBNZ X8, 0x0, 0x376E94C
	0x0376E908 ADRP X0, 0x9AD000
	0x0376E90C LDR X0, [X0 + 0xF10]
	0x0376E910 BL 0x1C16CF4
	0x0376E914 ADRP X0, 0x9AD000
	0x0376E918 LDR X0, [X0 + 0xF18]
	0x0376E91C BL 0x1C16CF4
	0x0376E920 ADRP X0, 0x9AD000
	0x0376E924 LDR X0, [X0 + 0xF20]
	0x0376E928 BL 0x1C16CF4
	0x0376E92C ADRP X0, 0x9AD000
	0x0376E930 LDR X0, [X0 + 0x270]
	0x0376E934 BL 0x1C16CF4
	0x0376E938 ADRP X0, 0x9AD000
	0x0376E93C LDR X0, [X0 + 0xF30]
	0x0376E940 BL 0x1C16CF4
	0x0376E944 MOVZ W8, 0x1
	0x0376E948 STRB W8, [X21 + 0xEDE]
	0x0376E94C LDR X0, [X19]
	0x0376E950 STP X31, X31, [X31 + 0x30]
	0x0376E954 STR X31, [X31 + 0x40]
	0x0376E958 ADRP X19, 0x9AD000
	0x0376E95C LDR W8, [X0 + 0xE0]
	0x0376E960 LDR X19, [X19 + 0xF30]
	0x0376E964 CBNZ W8, 0x376E96C
	0x0376E968 BL 0x1C16DFC
	0x0376E96C ADRP X23, 0x9AD000
	0x0376E970 ADRP X24, 0x9AD000
	0x0376E974 ADRP X22, 0x9AD000
	0x0376E978 LDR X23, [X23 + 0xF18]
	0x0376E97C LDR X24, [X24 + 0xF20]
	0x0376E980 LDR X22, [X22 + 0xF10]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X30
	003 Move [X31+80], X28
	004 Move [X31+88], X27
	005 Move [X31+96], X26
	006 Move [X31+104], X25
	007 Move [X31+112], X24
	008 Move [X31+120], X23
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X22, 0xC73000
	014 Move X21, 0x986000
	015 Move W8, [X22+3787]
	016 Move X21, [X21+1728]
	017 Move X20, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {61}
	023 Move X0, 0x9D9000
	024 Move X0, [X0+2112]
	025 Call 0x1C17CF4
	026 Move X0, 0x9D9000
	027 Move X0, [X0+2120]
	028 Call 0x1C17CF4
	029 Move X0, 0x9D9000
	030 Move X0, [X0+2128]
	031 Call 0x1C17CF4
	032 Move X0, 0x9D9000
	033 Move X0, [X0+2136]
	034 Call 0x1C17CF4
	035 Move X0, 0x9D9000
	036 Move X0, [X0+2144]
	037 Call 0x1C17CF4
	038 Move X0, 0x9D9000
	039 Move X0, [X0+2152]
	040 Call 0x1C17CF4
	041 Move X0, 0x9AE000
	042 Move X0, [X0+624]
	043 Call 0x1C17CF4
	044 Move X0, 0x9D9000
	045 Move X0, [X0+2160]
	046 Call 0x1C17CF4
	047 Move X0, 0x9D9000
	048 Move X0, [X0+2168]
	049 Call 0x1C17CF4
	050 Move X0, 0x9D9000
	051 Move X0, [X0+2176]
	052 Call 0x1C17CF4
	053 Move X0, 0x986000
	054 Move X0, [X0+1728]
	055 Call 0x1C17CF4
	056 Move X0, 0x9D9000
	057 Move X0, [X0+2184]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X22+3787], W8
	061 Move X0, [X21]
	062 NotImplemented "Instruction MOVI not yet implemented."
	063 Move [X31+32], V0
	064 Move [X31+40], V0
	065 Move [X31+72], X31
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X19
	071 Move X1, X31
	072 Move X2, X31
	073 Call Type.op_Equality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {243}
	078 Move X0, X20
	079 Move X1, X31
	080 Call String.IsNullOrEmpty, X0
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {115}
	085 Compare X19, 0
	086 JumpIfEqual {242}
	087 Move X8, [X19]
	088 Move X0, X19
	089 Move X9, [X8+424]
	090 Move X1, [X8+432]
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Compare X0, 0
	093 JumpIfEqual {242}
	094 Move X21, 0x9D9000
	095 Move X21, [X21+2184]
	096 Move X2, X31
	097 Move X20, X0
	098 Move X1, [X21]
	099 Call String.EndsWith, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {115}
	104 Move X8, [X21]
	105 Compare X8, 0
	106 JumpIfEqual {242}
	107 Move W9, [X20+16]
	108 Move W8, [X8+16]
	109 Move X0, X20
	110 Move W1, W31
	111 Move X3, X31
	112 Subtract W2, W9, W8
	113 Call String.Substring, X0, X1, X2
	114 Move X20, X0
	115 Move X24, 0x9AE000
	116 Move X24, [X24+624]
	117 Move X0, [X24]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {123}
	121 Call 0x1C17DFC
	122 Move X0, [X24]
	123 Move X8, [X0+184]
	124 Move X8, [X8]
	125 Compare X8, 0
	126 JumpIfEqual {242}
	127 Move X21, [X8+72]
	128 Compare X21, 0
	129 JumpIfEqual {242}
	130 Move X8, 0x9D9000
	131 Move X8, [X8+2128]
	132 Move X22, 0x9D9000
	133 Move X25, 0x9D9000
	134 Move X0, X21
	135 Move X1, [X8]
	136 Move X22, [X22+2176]
	137 Move X25, [X25+2168]
	138 Call Dictionary`2<InternedString, PrecompiledLayout>.get_Keys, X0
	139 Move X8, [X22]
	140 Move X23, X0
	141 Move X0, X8
	142 Call 0x1C17F10
	143 Move X2, [X25]
	144 Move X1, X23
	145 Move X22, X0
	146 Call List`1<InternedString>..ctor, X0, X1
	147 Compare X22, 0
	148 JumpIfEqual {242}
	149 Move X8, 0x9D9000
	150 Move X8, [X8+2160]
	151 Move X26, 0x9D9000
	152 Move X26, [X26+2144]
	153 Move X27, 0x9D9000
	154 Move X1, [X8]
	155 Move X28, 0x9D9000
	156 Move X25, 0x9D9000
	157 Move X27, [X27+2120]
	158 Move X28, [X28+2112]
	159 Move X25, [X25+2136]
	160 Add X8, X31, 0
	161 Move X0, X22
	162 Call List`1<InternedString>.GetEnumerator, X0
	163 Move V0, [X31]
	164 Move V1, [X31+16]
	165 Move [X31+32], V0
	166 Move [X31+40], V1
	167 Move X1, [X26]
	168 Add X0, X31, 32
	169 Call Enumerator<InternedString>.MoveNext, X0
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {207}
	174 Move X22, [X31+48]
	175 Move X23, [X31+56]
	176 Move X3, [X27]
	177 Move X0, X21
	178 Move X1, X22
	179 Move X2, X23
	180 Call Dictionary`2<InternedString, PrecompiledLayout>.get_Item, X0, X1
	181 Move W2, 59
	182 Move X0, X1
	183 Move X1, X20
	184 Move X3, X31
	185 Call StringHelpers.CharacterSeparatedListsHaveAtLeastOneCommonElement, X0, X1, X2
	186 Move TEMP, X0
	187 And TEMP, TEMP, 1
	188 Compare TEMP, 1
	189 JumpIfNotEqual {167}
	190 Move X0, [X24]
	191 Move W8, [X0+224]
	192 Compare W8, 0
	193 JumpIfNotEqual {196}
	194 Call 0x1C17DFC
	195 Move X0, [X24]
	196 Move X8, [X0+184]
	197 Move X8, [X8]
	198 Compare X8, 0
	199 JumpIfEqual {240}
	200 Move X0, [X8+72]
	201 Compare X0, 0
	202 JumpIfEqual {241}
	203 Move X3, [X28]
	204 Move X1, X22
	205 Move X2, X23
	206 Call Dictionary`2<InternedString, PrecompiledLayout>.Remove, X0, X1
	207 Move X1, [X25]
	208 Add X0, X31, 32
	209 Call Enumerator<InternedString>.Dispose, X0
	210 Move X0, [X24]
	211 Move W8, [X0+224]
	212 Compare W8, 0
	213 JumpIfNotEqual {216}
	214 Call 0x1C17DFC
	215 Move X0, [X24]
	216 Move X8, [X0+184]
	217 Move X8, [X8]
	218 Compare X8, 0
	219 JumpIfEqual {242}
	220 Move X8, [X8+88]
	221 Add X0, X31, 72
	222 Move X1, X20
	223 Move X2, X19
	224 Move X3, X31
	225 Move [X31+72], X8
	226 Call TypeTable.AddTypeRegistration, X0, X1, X2
	227 Move X20, [X31+144]
	228 Move X19, [X31+152]
	229 Move X22, [X31+128]
	230 Move X21, [X31+136]
	231 Move X24, [X31+112]
	232 Move X23, [X31+120]
	233 Move X26, [X31+96]
	234 Move X25, [X31+104]
	235 Move X28, [X31+80]
	236 Move X27, [X31+88]
	237 Move X30, [X31+64]
	238 Add X31, X31, 160
	239 Return 
	240 Call 0x1C17F20
	241 Call 0x1C17F20
	242 Call 0x1C17F20
	243 Move X0, 0x98B000
	244 Move X0, [X0+1320]
	245 Call 0x1C17D08
	246 Call 0x1C17F10
	247 Move X19, X0
	248 Move X0, 0x98E000
	249 Move X0, [X0+1512]
	250 Call 0x1C17D08
	251 Move X1, X0
	252 Move X0, X19
	253 Move X2, X31
	254 Call ArgumentNullException..ctor, X0, X1
	255 Move X0, 0x9D9000
	256 Move X0, [X0+2192]
	257 Call 0x1C17D08
	258 Move X1, X0
	259 Move X0, X19
	260 Call 0x1C17DEC
	261 Move X21, X0
	262 NotImplemented "Instruction CMP not yet implemented."
	263 Move X0, X21
	264 Call 0x3EB2AD0
	265 Move X22, [X0]
	266 Call 0x3EB2AE0
	267 Move X1, [X25]
	268 Add X0, X31, 32
	269 Call Enumerator<InternedString>.Dispose, X0
	270 Compare X22, 0
	271 JumpIfEqual {210}
	272 Move X0, X22
	273 Call 0x1C17F18
	274 Move X22, X31
	275 Move X21, X0
	276 Move X1, [X25]
	277 Add X0, X31, 32
	278 Call Enumerator<InternedString>.Dispose, X0
	279 Compare X22, 0
	280 JumpIfNotEqual {283}
	281 Move X0, X21
	282 Call 0x1D2D690
	283 Move X0, X22
	284 Call 0x1C17F18
	285 Call 0x1991590

Method: System.Void RegisterProcessor(System.String name = null)

Disassembly:
	0x0220D920 MOV X20, X0
	0x0220D924 CBZ X0, 0x220DBD4
	0x0220D928 ADRP X25, 0x1EE6000
	0x0220D92C ADRP X26, 0x1F0E000
	0x0220D930 ADRP X27, 0x1EE6000
	0x0220D934 ADRP X28, 0x1F0E000
	0x0220D938 ADRP X29, 0x1F0E000
	0x0220D93C LDR X25, [X25 + 0xE18]
	0x0220D940 LDR X26, [X26 + 0xFD0]
	0x0220D944 LDR X27, [X27 + 0x6C0]
	0x0220D948 LDR X28, [X28 + 0xFC0]
	0x0220D94C LDR X29, [X29 + 0xFC8]
	0x0220D950 LDR X8, [X20]
	0x0220D954 LDR X1, [X25]
	0x0220D958 LDRH W9, [X8 + 0x12E]
	0x0220D95C CBZ X9, 0x220D980
	0x0220D960 LDR X10, [X8 + 0xB0]
	0x0220D964 ADD X10, X10, 0x8
	0x0220D968 LDUR X11, [X10 - 0x8]
	0x0220D96C CMP X11, X1
	0x0220D970 B.EQ 0x220D990
	0x0220D974 SUBS X9, X9, 0x1
	0x0220D978 ADD X10, X10, 0x10
	0x0220D97C B.NE 0x220D968
	0x0220D980 MOV X0, X20
	0x0220D984 MOV W2, W31
	0x0220D988 BL 0x1C5C788
	0x0220D98C B 0x220D99C
	0x0220D990 LDRSW X9, [X10]
	0x0220D994 ADD X8, X8, X9, 0x4, LSL
	0x0220D998 ADD X0, X8, 0x138
	0x0220D99C LDP X8, X1, [X0]
	0x0220D9A0 MOV X0, X20
	0x0220D9A4 BLR X8
	0x0220D9A8 TBZ X0, 0x0, 0x220DB30
	0x0220D9AC LDR X8, [X21 + 0x38]
	0x0220D9B0 LDR X1, [X8 + 0x20]
	0x0220D9B4 LDRB W8, [X1 + 0x135]
	0x0220D9B8 TBNZ X8, 0x0, 0x220D9C8
	0x0220D9BC MOV X0, X1
	0x0220D9C0 BL 0x1C5C684

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {21}
	008 Move X0, 0x1F0F000
	009 Move X0, [X0+624]
	010 Move X20, X1
	011 Call 0x1C17CF4
	012 Move X0, 0x1EE7000
	013 Move X0, [X0+1728]
	014 Call 0x1C17CF4
	015 Move X8, [X20+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {21}
	018 Move X0, X20
	019 Call 0x1C5D6E0
	020 Move X8, [X20+56]
	021 Move X9, 0x1EE7000
	022 Move X9, [X9+1728]
	023 Move X20, [X8]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Call Type.GetTypeFromHandle, X0
	032 Move X8, 0x1F0F000
	033 Move X8, [X8+624]
	034 Move X20, X0
	035 Move X8, [X8]
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, X31
	046 Move X30, [X31+32]
	047 Call InputSystem.RegisterProcessor, X0, X1
	048 Return 

Method: System.Type TryGetProcessor(System.String name)

Disassembly:
	0x0376E984 BL 0x376DAD4
	0x0376E988 LDR X9, [X19]
	0x0376E98C STP X0, X1, [X31 + 0x20]
	0x0376E990 ADD X8, X31, 0x8
	0x0376E994 ADD X0, X31, 0x20
	0x0376E998 MOV X1, X9
	0x0376E99C BL 0x24FD990
	0x0376E9A0 LDUR V0, [X31 + 0x8]
	0x0376E9A4 LDR X8, [X31 + 0x18]
	0x0376E9A8 MOV X19, X31
	0x0376E9AC FMOV D8, -1
	0x0376E9B0 STR V0, [X31 + 0x3]
	0x0376E9B4 STR X8, [X31 + 0x40]
	0x0376E9B8 LDR X1, [X23]
	0x0376E9BC ADD X0, X31, 0x30
	0x0376E9C0 BL 0x2BC496C
	0x0376E9C4 TBZ X0, 0x0, 0x376EA20
	0x0376E9C8 LDR X1, [X24]
	0x0376E9CC ADD X0, X31, 0x30
	0x0376E9D0 BL 0x2BC4998
	0x0376E9D4 CBZ X20, 0x376EA4C
	0x0376E9D8 LDR X8, [X20]
	0x0376E9DC MOV X21, X0
	0x0376E9E0 LDR X9, [X8 + 0x868]
	0x0376E9E4 LDR X2, [X8 + 0x870]
	0x0376E9E8 MOV X0, X20
	0x0376E9EC MOV X1, X21
	0x0376E9F0 BLR X9
	0x0376E9F4 TBZ X0, 0x0, 0x376E9B8
	0x0376E9F8 CBZ X19, 0x376EA10
	0x0376E9FC CBZ X21, 0x376EA50
	0x0376EA00 LDR V0, [X21 + 0x128]
	0x0376EA04 FCMP D0, D8
	0x0376EA08 B.LE 0x376E9B8
	0x0376EA0C B 0x376EA14
	0x0376EA10 CBZ X21, 0x376EA54
	0x0376EA14 LDR V8, [X21 + 0x128]
	0x0376EA18 MOV X19, X21
	0x0376EA1C B 0x376E9B8
	0x0376EA20 LDR X1, [X22]
	0x0376EA24 ADD X0, X31, 0x30
	0x0376EA28 BL 0x2BC4968
	0x0376EA2C MOV X0, X19
	0x0376EA30 LDP X20, X19, [X31 + 0x80]
	0x0376EA34 LDP X22, X21, [X31 + 0x70]
	0x0376EA38 LDP X24, X23, [X31 + 0x60]
	0x0376EA3C LDR X30, [X31 + 0x58]
	0x0376EA40 LDR V8, [X31 + 0x50]
	0x0376EA44 ADD X31, X31, 0x90
	0x0376EA48 RET
	0x0376EA4C BL 0x1C16F20
	0x0376EA50 BL 0x1C16F20
	0x0376EA54 BL 0x1C16F20
	0x0376EA58 B 0x376EA64

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC73000
	005 Move W8, [X20+3788]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9AE000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3788], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Move [X31+8], X31
	019 Call String.IsNullOrEmpty, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {46}
	024 Move X20, 0x9AE000
	025 Move X20, [X20+624]
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move X8, [X8]
	034 Compare X8, 0
	035 JumpIfEqual {64}
	036 Move X8, [X8+88]
	037 Add X0, X31, 8
	038 Move X1, X19
	039 Move X2, X31
	040 Move [X31+8], X8
	041 Call TypeTable.LookupTypeRegistration, X0, X1
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0
	046 Move X0, 0x98B000
	047 Move X0, [X0+1320]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X19, X0
	051 Move X0, 0x98E000
	052 Move X0, [X0+1416]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Move X2, X31
	057 Call ArgumentNullException..ctor, X0, X1
	058 Move X0, 0x9D9000
	059 Move X0, [X0+2200]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Call 0x1C17DEC
	064 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<System.String> ListProcessors()

Disassembly:
	0x0376EA5C B 0x376EA70
	0x0376EA60 B 0x376EA70
	0x0376EA64 MOV X19, X31
	0x0376EA68 B 0x376EA70
	0x0376EA6C B 0x376EA70
	0x0376EA70 CMP W1, 0x1
	0x0376EA74 B.NE 0x376EA9C
	0x0376EA78 BL 0x3EB1AD0
	0x0376EA7C LDR X20, [X0]
	0x0376EA80 BL 0x3EB1AE0
	0x0376EA84 LDR X1, [X22]
	0x0376EA88 ADD X0, X31, 0x30
	0x0376EA8C BL 0x2BC4968
	0x0376EA90 CBZ X20, 0x376EA2C
	0x0376EA94 MOV X0, X20
	0x0376EA98 BL 0x1C16F18
	0x0376EA9C MOV X19, X0
	0x0376EAA0 MOV X20, X31
	0x0376EAA4 B 0x376EAAC
	0x0376EAA8 MOV X19, X0
	0x0376EAAC LDR X1, [X22]
	0x0376EAB0 ADD X0, X31, 0x30
	0x0376EAB4 BL 0x2BC4968
	0x0376EAB8 CBNZ X20, 0x376EAC4
	0x0376EABC MOV X0, X19
	0x0376EAC0 BL 0x1D2C690
	0x0376EAC4 MOV X0, X20
	0x0376EAC8 BL 0x1C16F18
	0x0376EACC BL 0x1990590
	0x0376EAD0 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC73000
	005 Move X19, 0x9AE000
	006 Move W8, [X20+3789]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AE000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3789], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {24}
	022 Call 0x1C17DFC
	023 Move X0, [X19]
	024 Move X8, [X0+184]
	025 Move X8, [X8]
	026 Compare X8, 0
	027 JumpIfEqual {37}
	028 Move X8, [X8+88]
	029 Add X0, X31, 8
	030 Move X1, X31
	031 Move [X31+8], X8
	032 Call TypeTable.get_names, X0
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice> get_devices()

Disassembly:
	0x0376EAD4 STP X20, X19, [X31 + 0x10]
	0x0376EAD8 ADRP X21, 0xC72000
	0x0376EADC ADRP X20, 0x9AD000
	0x0376EAE0 LDRB W8, [X21 + 0xEDF]
	0x0376EAE4 LDR X20, [X20 + 0x270]
	0x0376EAE8 MOV W19, W0
	0x0376EAEC TBNZ X8, 0x0, 0x376EB04
	0x0376EAF0 ADRP X0, 0x9AD000
	0x0376EAF4 LDR X0, [X0 + 0x270]
	0x0376EAF8 BL 0x1C16CF4
	0x0376EAFC MOVZ W8, 0x1
	0x0376EB00 STRB W8, [X21 + 0xEDF]
	0x0376EB04 LDR X0, [X20]
	0x0376EB08 LDR W8, [X0 + 0xE0]
	0x0376EB0C CBNZ W8, 0x376EB18
	0x0376EB10 BL 0x1C16DFC
	0x0376EB14 LDR X0, [X20]
	0x0376EB18 LDR X8, [X0 + 0xB8]
	0x0376EB1C LDR X0, [X8]
	0x0376EB20 CBZ X0, 0x376EB38
	0x0376EB24 MOV W1, W19
	0x0376EB28 LDP X20, X19, [X31 + 0x10]
	0x0376EB2C MOV X2, X31
	0x0376EB30 LDP X30, X21, [X31], #0x20
	0x0376EB34 B 0x37BC094

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC73000
	005 Move X19, 0x9AE000
	006 Move W8, [X20+3790]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AE000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3790], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X0, [X8]
	025 Compare X0, 0
	026 JumpIfEqual {33}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Call InputManager.get_devices, X0
	032 Return X0
	033 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice> get_disconnectedDevices()

Disassembly:
	0x0376EB38 BL 0x1C16F20
	0x0376EB3C STR X30, [X31 - 0x30]!
	0x0376EB40 STP X22, X21, [X31 + 0x10]
	0x0376EB44 STP X20, X19, [X31 + 0x20]
	0x0376EB48 ADRP X21, 0xC72000
	0x0376EB4C ADRP X22, 0x9D8000
	0x0376EB50 ADRP X19, 0x9D8000
	0x0376EB54 ADRP X20, 0x9AD000
	0x0376EB58 LDRB W8, [X21 + 0xEE0]
	0x0376EB5C LDR X22, [X22 + 0x8F0]
	0x0376EB60 LDR X19, [X19 + 0x8F8]
	0x0376EB64 LDR X20, [X20 + 0x270]
	0x0376EB68 TBNZ X8, 0x0, 0x376EB98
	0x0376EB6C ADRP X0, 0x9AD000
	0x0376EB70 LDR X0, [X0 + 0x270]
	0x0376EB74 BL 0x1C16CF4
	0x0376EB78 ADRP X0, 0x9D8000
	0x0376EB7C LDR X0, [X0 + 0x8F8]
	0x0376EB80 BL 0x1C16CF4
	0x0376EB84 ADRP X0, 0x9D8000
	0x0376EB88 LDR X0, [X0 + 0x8F0]
	0x0376EB8C BL 0x1C16CF4
	0x0376EB90 MOVZ W8, 0x1
	0x0376EB94 STRB W8, [X21 + 0xEE0]
	0x0376EB98 LDR X0, [X22]
	0x0376EB9C BL 0x1C16F10
	0x0376EBA0 LDR X1, [X19]
	0x0376EBA4 MOV X19, X0
	0x0376EBA8 BL 0x2FD3664
	0x0376EBAC LDR X0, [X20]
	0x0376EBB0 LDR W8, [X0 + 0xE0]
	0x0376EBB4 CBNZ W8, 0x376EBBC
	0x0376EBB8 BL 0x1C16DFC
	0x0376EBBC MOV X0, X19
	0x0376EBC0 BL 0x376EBD8
	0x0376EBC4 MOV X0, X19
	0x0376EBC8 LDP X20, X19, [X31 + 0x20]
	0x0376EBCC LDP X22, X21, [X31 + 0x10]
	0x0376EBD0 LDR X30, [X31], #0x30

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xC73000
	006 Move X19, 0x9AE000
	007 Move W8, [X20+3791]
	008 Move X19, [X19+624]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x9AE000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move X0, 0x9D8000
	017 Move X0, [X0+80]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3791], W8
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X8, [X8]
	029 Compare X8, 0
	030 JumpIfEqual {48}
	031 Move X9, 0x9D8000
	032 Move X9, [X9+80]
	033 Move X1, [X8+160]
	034 Move W3, [X8+152]
	035 Add X0, X31, 0
	036 Move X4, [X9]
	037 Move W2, W31
	038 Move [X31], X31
	039 Move [X31+8], X31
	040 Call ReadOnlyArray`1<Object>..ctor, X0, X1, X2, X3
	041 Move X0, [X31]
	042 Move X1, [X31+8]
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 48
	047 Return X0
	048 Call 0x1C17F20

Method: System.Void add_onDeviceChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.InputDeviceChange> value)

Disassembly:
	0x0376EBD4 RET
	0x0376EBD8 STP X30, X21, [X31 - 0x20]!
	0x0376EBDC STP X20, X19, [X31 + 0x10]
	0x0376EBE0 ADRP X21, 0xC72000
	0x0376EBE4 ADRP X20, 0x9AD000
	0x0376EBE8 LDRB W8, [X21 + 0xEE1]
	0x0376EBEC LDR X20, [X20 + 0x270]
	0x0376EBF0 MOV X19, X0
	0x0376EBF4 TBNZ X8, 0x0, 0x376EC0C
	0x0376EBF8 ADRP X0, 0x9AD000
	0x0376EBFC LDR X0, [X0 + 0x270]
	0x0376EC00 BL 0x1C16CF4
	0x0376EC04 MOVZ W8, 0x1
	0x0376EC08 STRB W8, [X21 + 0xEE1]
	0x0376EC0C LDR X0, [X20]
	0x0376EC10 LDR W8, [X0 + 0xE0]
	0x0376EC14 CBNZ W8, 0x376EC20
	0x0376EC18 BL 0x1C16DFC
	0x0376EC1C LDR X0, [X20]
	0x0376EC20 LDR X8, [X0 + 0xB8]
	0x0376EC24 LDR X0, [X8]
	0x0376EC28 CBZ X0, 0x376EC40
	0x0376EC2C MOV X1, X19
	0x0376EC30 LDP X20, X19, [X31 + 0x10]
	0x0376EC34 MOV X2, X31
	0x0376EC38 LDP X30, X21, [X31], #0x20
	0x0376EC3C B 0x37C6E58
	0x0376EC40 BL 0x1C16F20
	0x0376EC44 STP X30, X21, [X31 - 0x20]!
	0x0376EC48 STP X20, X19, [X31 + 0x10]
	0x0376EC4C ADRP X21, 0xC72000
	0x0376EC50 ADRP X20, 0x9AD000
	0x0376EC54 LDRB W8, [X21 + 0xEE2]
	0x0376EC58 LDR X20, [X20 + 0x270]
	0x0376EC5C MOV X19, X0
	0x0376EC60 TBNZ X8, 0x0, 0x376EC78
	0x0376EC64 ADRP X0, 0x9AD000
	0x0376EC68 LDR X0, [X0 + 0x270]
	0x0376EC6C BL 0x1C16CF4
	0x0376EC70 MOVZ W8, 0x1
	0x0376EC74 STRB W8, [X21 + 0xEE2]
	0x0376EC78 LDR X0, [X20]
	0x0376EC7C LDR W8, [X0 + 0xE0]
	0x0376EC80 CBNZ W8, 0x376EC8C
	0x0376EC84 BL 0x1C16DFC
	0x0376EC88 LDR X0, [X20]
	0x0376EC8C LDR X8, [X0 + 0xB8]
	0x0376EC90 LDR X0, [X8]
	0x0376EC94 CBZ X0, 0x376ECB4
	0x0376EC98 MOV X1, X19
	0x0376EC9C LDP X20, X19, [X31 + 0x10]
	0x0376ECA0 MOVZ W2, 0x1
	0x0376ECA4 MOV W3, W31
	0x0376ECA8 MOV X4, X31
	0x0376ECAC LDP X30, X21, [X31], #0x20
	0x0376ECB0 B 0x37C5BEC
	0x0376ECB4 BL 0x1C16F20
	0x0376ECB8 STR X30, [X31 - 0x30]!
	0x0376ECBC STP X22, X21, [X31 + 0x10]
	0x0376ECC0 STP X20, X19, [X31 + 0x20]
	0x0376ECC4 ADRP X22, 0xC72000
	0x0376ECC8 ADRP X21, 0x9AD000
	0x0376ECCC LDRB W8, [X22 + 0xEE3]
	0x0376ECD0 LDR X21, [X21 + 0x270]
	0x0376ECD4 MOV W20, W1
	0x0376ECD8 MOV X19, X0
	0x0376ECDC TBNZ X8, 0x0, 0x376ECF4
	0x0376ECE0 ADRP X0, 0x9AD000
	0x0376ECE4 LDR X0, [X0 + 0x270]
	0x0376ECE8 BL 0x1C16CF4
	0x0376ECEC MOVZ W8, 0x1
	0x0376ECF0 STRB W8, [X22 + 0xEE3]
	0x0376ECF4 LDR X0, [X21]
	0x0376ECF8 LDR W8, [X0 + 0xE0]
	0x0376ECFC CBNZ W8, 0x376ED08
	0x0376ED00 BL 0x1C16DFC
	0x0376ED04 LDR X0, [X21]
	0x0376ED08 LDR X8, [X0 + 0xB8]
	0x0376ED0C LDR X0, [X8]
	0x0376ED10 CBZ X0, 0x376ED34
	0x0376ED14 AND W3, W20, 0x1
	0x0376ED18 MOV X1, X19
	0x0376ED1C LDP X20, X19, [X31 + 0x20]
	0x0376ED20 LDP X22, X21, [X31 + 0x10]
	0x0376ED24 MOV W2, W31
	0x0376ED28 MOV X4, X31
	0x0376ED2C LDR X30, [X31], #0x30
	0x0376ED30 B 0x37C5BEC
	0x0376ED34 BL 0x1C16F20
	0x0376ED38 STR X30, [X31 - 0x20]!
	0x0376ED3C STP X20, X19, [X31 + 0x10]
	0x0376ED40 CBZ X0, 0x376ED5C
	0x0376ED44 LDR W8, [X0 + 0xE8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC73000
	007 Move W8, [X19+3792]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x9AE000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3792], W8
	018 Compare X20, 0
	019 JumpIfEqual {63}
	020 Move X21, 0x9AE000
	021 Move X21, [X21+624]
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X19, [X8]
	030 Move [X31+12], W31
	031 Add X1, X31, 12
	032 Move X0, X19
	033 Move X2, X31
	034 Call Monitor.Enter, X0, X1
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move X0, [X8]
	043 Compare X0, 0
	044 JumpIfEqual {83}
	045 Move X1, X20
	046 Move X2, X31
	047 Call InputManager.add_onDeviceChange, X0, X1
	048 Move X20, X31
	049 Move W8, [X31+12]
	050 Compare W8, 0
	051 JumpIfEqual {55}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Monitor.Exit, X0
	055 Compare X20, 0
	056 JumpIfNotEqual {81}
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+16]
	060 Move X21, [X31+24]
	061 Add X31, X31, 48
	062 Return 
	063 Move X0, 0x98B000
	064 Move X0, [X0+1320]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0x990000
	069 Move X0, [X0+3784]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentNullException..ctor, X0, X1
	075 Move X0, 0x9D9000
	076 Move X0, [X0+2208]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC
	081 Move X0, X20
	082 Call 0x1C17F18
	083 Call 0x1C17F20
	084 Move X21, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X21
	087 Call 0x3EB2AD0
	088 Move X20, [X0]
	089 Call 0x3EB2AE0
	090 Move X20, X31
	091 Move X21, X0
	092 Move W8, [X31+12]
	093 Compare W8, 0
	094 JumpIfEqual {98}
	095 Move X0, X19
	096 Move X1, X31
	097 Call Monitor.Exit, X0
	098 Compare X20, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X21
	101 Call 0x1D2D690
	102 Move X0, X20
	103 Call 0x1C17F18
	104 Call 0x1991590

Method: System.Void remove_onDeviceChange(System.Action`2<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.InputDeviceChange> value)

Disassembly:
	0x0376ED48 ADDS W31, W8, 0x1
	0x0376ED4C B.EQ 0x376EDA4
	0x0376ED50 LDP X20, X19, [X31 + 0x10]
	0x0376ED54 LDR X30, [X31], #0x20
	0x0376ED58 B 0x376EE10
	0x0376ED5C ADRP X0, 0x98A000
	0x0376ED60 LDR X0, [X0 + 0x528]
	0x0376ED64 BL 0x1C16D08
	0x0376ED68 BL 0x1C16F10
	0x0376ED6C MOV X19, X0
	0x0376ED70 ADRP X0, 0x9AD000
	0x0376ED74 LDR X0, [X0 + 0xD20]
	0x0376ED78 BL 0x1C16D08
	0x0376ED7C MOV X1, X0
	0x0376ED80 MOV X0, X19
	0x0376ED84 MOV X2, X31
	0x0376ED88 BL 0x330E100
	0x0376ED8C ADRP X0, 0x9D8000
	0x0376ED90 LDR X0, [X0 + 0x900]
	0x0376ED94 BL 0x1C16D08
	0x0376ED98 MOV X1, X0
	0x0376ED9C MOV X0, X19
	0x0376EDA0 BL 0x1C16DEC
	0x0376EDA4 ADRP X8, 0x9D8000
	0x0376EDA8 LDR X8, [X8 + 0x908]
	0x0376EDAC MOV X19, X0
	0x0376EDB0 MOV X0, X8
	0x0376EDB4 BL 0x1C16D08
	0x0376EDB8 MOV X1, X19
	0x0376EDBC MOV X2, X31
	0x0376EDC0 BL 0x321EFD0
	0x0376EDC4 MOV X19, X0
	0x0376EDC8 ADRP X0, 0x985000
	0x0376EDCC LDR X0, [X0 + 0x5B0]
	0x0376EDD0 BL 0x1C16D08
	0x0376EDD4 BL 0x1C16F10
	0x0376EDD8 MOV X1, X19
	0x0376EDDC MOV X2, X31
	0x0376EDE0 MOV X20, X0
	0x0376EDE4 BL 0x337DF1C
	0x0376EDE8 ADRP X0, 0x9D8000
	0x0376EDEC LDR X0, [X0 + 0x900]
	0x0376EDF0 BL 0x1C16D08
	0x0376EDF4 MOV X1, X0
	0x0376EDF8 MOV X0, X20
	0x0376EDFC BL 0x1C16DEC
	0x0376EE00 LDR W8, [X0 + 0xE8]
	0x0376EE04 ADDS W31, W8, 0x1
	0x0376EE08 CSET W0, NE
	0x0376EE0C RET
	0x0376EE10 STR X30, [X31 - 0x20]!
	0x0376EE14 STP X20, X19, [X31 + 0x10]
	0x0376EE18 ADRP X20, 0xC72000
	0x0376EE1C LDRB W8, [X20 + 0xF69]
	0x0376EE20 MOV X19, X0
	0x0376EE24 TBNZ X8, 0x0, 0x376EE3C
	0x0376EE28 ADRP X0, 0x9D8000
	0x0376EE2C LDR X0, [X0 + 0x910]
	0x0376EE30 BL 0x1C16CF4
	0x0376EE34 MOVZ W8, 0x1
	0x0376EE38 STRB W8, [X20 + 0xF69]
	0x0376EE3C MOV X0, X19
	0x0376EE40 MOV X1, X31
	0x0376EE44 BL 0x377F584
	0x0376EE48 MOV X0, X31
	0x0376EE4C BL 0x37FF51C
	0x0376EE50 STR X0, [X31 + 0x8]
	0x0376EE54 LDR X0, [X19 + 0x78]
	0x0376EE58 CBZ X0, 0x376EE84
	0x0376EE5C ADRP X8, 0x9D8000
	0x0376EE60 LDR X8, [X8 + 0x910]
	0x0376EE64 ADD X1, X31, 0x8
	0x0376EE68 LDR X2, [X8]
	0x0376EE6C BL 0x220676C
	0x0376EE70 LDP X20, X19, [X31 + 0x10]
	0x0376EE74 UBFM X8, X0, 0x3F, 0x3F
	0x0376EE78 EOR W0, W8, 0x1
	0x0376EE7C LDR X30, [X31], #0x20
	0x0376EE80 RET
	0x0376EE84 BL 0x1C16F20
	0x0376EE88 STR X30, [X31 - 0x30]!
	0x0376EE8C STP X22, X21, [X31 + 0x10]
	0x0376EE90 STP X20, X19, [X31 + 0x20]
	0x0376EE94 ADRP X22, 0xC72000
	0x0376EE98 ADRP X21, 0x9AD000
	0x0376EE9C LDRB W8, [X22 + 0xEE4]
	0x0376EEA0 LDR X21, [X21 + 0x270]
	0x0376EEA4 MOV W20, W1
	0x0376EEA8 MOV X19, X0
	0x0376EEAC TBNZ X8, 0x0, 0x376EEC4
	0x0376EEB0 ADRP X0, 0x9AD000
	0x0376EEB4 LDR X0, [X0 + 0x270]
	0x0376EEB8 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC73000
	007 Move W8, [X19+3793]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x9AE000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3793], W8
	018 Compare X20, 0
	019 JumpIfEqual {63}
	020 Move X21, 0x9AE000
	021 Move X21, [X21+624]
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X19, [X8]
	030 Move [X31+12], W31
	031 Add X1, X31, 12
	032 Move X0, X19
	033 Move X2, X31
	034 Call Monitor.Enter, X0, X1
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move X0, [X8]
	043 Compare X0, 0
	044 JumpIfEqual {83}
	045 Move X1, X20
	046 Move X2, X31
	047 Call InputManager.remove_onDeviceChange, X0, X1
	048 Move X20, X31
	049 Move W8, [X31+12]
	050 Compare W8, 0
	051 JumpIfEqual {55}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Monitor.Exit, X0
	055 Compare X20, 0
	056 JumpIfNotEqual {81}
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+16]
	060 Move X21, [X31+24]
	061 Add X31, X31, 48
	062 Return 
	063 Move X0, 0x98B000
	064 Move X0, [X0+1320]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0x990000
	069 Move X0, [X0+3784]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentNullException..ctor, X0, X1
	075 Move X0, 0x9D9000
	076 Move X0, [X0+2216]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC
	081 Move X0, X20
	082 Call 0x1C17F18
	083 Call 0x1C17F20
	084 Move X21, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X21
	087 Call 0x3EB2AD0
	088 Move X20, [X0]
	089 Call 0x3EB2AE0
	090 Move X20, X31
	091 Move X21, X0
	092 Move W8, [X31+12]
	093 Compare W8, 0
	094 JumpIfEqual {98}
	095 Move X0, X19
	096 Move X1, X31
	097 Call Monitor.Exit, X0
	098 Compare X20, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X21
	101 Call 0x1D2D690
	102 Move X0, X20
	103 Call 0x1C17F18
	104 Call 0x1991590

Method: System.Void add_onDeviceCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate value)

Disassembly:
	0x0376EEBC MOVZ W8, 0x1
	0x0376EEC0 STRB W8, [X22 + 0xEE4]
	0x0376EEC4 LDR X0, [X21]
	0x0376EEC8 LDR W8, [X0 + 0xE0]
	0x0376EECC CBNZ W8, 0x376EED8
	0x0376EED0 BL 0x1C16DFC
	0x0376EED4 LDR X0, [X21]
	0x0376EED8 LDR X8, [X0 + 0xB8]
	0x0376EEDC LDR X0, [X8]
	0x0376EEE0 CBZ X0, 0x376EF04
	0x0376EEE4 AND W2, W20, 0x1
	0x0376EEE8 MOV X1, X19
	0x0376EEEC LDP X20, X19, [X31 + 0x20]
	0x0376EEF0 LDP X22, X21, [X31 + 0x10]
	0x0376EEF4 MOV X3, X31
	0x0376EEF8 MOV X4, X31
	0x0376EEFC LDR X30, [X31], #0x30
	0x0376EF00 B 0x37C6480
	0x0376EF04 BL 0x1C16F20
	0x0376EF08 CBZ X0, 0x376EF10
	0x0376EF0C B 0x376EF5C
	0x0376EF10 STP X30, X19, [X31 - 0x10]!
	0x0376EF14 ADRP X0, 0x98A000
	0x0376EF18 LDR X0, [X0 + 0x528]
	0x0376EF1C BL 0x1C16D08
	0x0376EF20 BL 0x1C16F10
	0x0376EF24 MOV X19, X0
	0x0376EF28 ADRP X0, 0x9AD000
	0x0376EF2C LDR X0, [X0 + 0xD20]
	0x0376EF30 BL 0x1C16D08
	0x0376EF34 MOV X1, X0
	0x0376EF38 MOV X0, X19
	0x0376EF3C MOV X2, X31
	0x0376EF40 BL 0x330E100
	0x0376EF44 ADRP X0, 0x9D8000
	0x0376EF48 LDR X0, [X0 + 0x918]
	0x0376EF4C BL 0x1C16D08
	0x0376EF50 MOV X1, X0
	0x0376EF54 MOV X0, X19
	0x0376EF58 BL 0x1C16DEC
	0x0376EF5C STR X30, [X31 - 0x20]!
	0x0376EF60 STP X20, X19, [X31 + 0x10]
	0x0376EF64 ADRP X20, 0xC72000
	0x0376EF68 LDRB W8, [X20 + 0xF6A]
	0x0376EF6C MOV X19, X0
	0x0376EF70 TBNZ X8, 0x0, 0x376EF88
	0x0376EF74 ADRP X0, 0x9D8000
	0x0376EF78 LDR X0, [X0 + 0x920]
	0x0376EF7C BL 0x1C16CF4
	0x0376EF80 MOVZ W8, 0x1
	0x0376EF84 STRB W8, [X20 + 0xF6A]
	0x0376EF88 MOV X0, X19
	0x0376EF8C MOV X1, X31
	0x0376EF90 BL 0x377F584
	0x0376EF94 MOV X0, X31
	0x0376EF98 BL 0x37FF488
	0x0376EF9C STR X0, [X31 + 0x8]
	0x0376EFA0 LDR X0, [X19 + 0x78]
	0x0376EFA4 CBZ X0, 0x376EFD0
	0x0376EFA8 ADRP X8, 0x9D8000
	0x0376EFAC LDR X8, [X8 + 0x920]
	0x0376EFB0 ADD X1, X31, 0x8
	0x0376EFB4 LDR X2, [X8]
	0x0376EFB8 BL 0x2206498
	0x0376EFBC LDP X20, X19, [X31 + 0x10]
	0x0376EFC0 UBFM X8, X0, 0x3F, 0x3F
	0x0376EFC4 EOR W0, W8, 0x1
	0x0376EFC8 LDR X30, [X31], #0x20
	0x0376EFCC RET
	0x0376EFD0 BL 0x1C16F20
	0x0376EFD4 SUB X31, X31, 0x40
	0x0376EFD8 STP X30, X23, [X31 + 0x10]
	0x0376EFDC STP X22, X21, [X31 + 0x20]
	0x0376EFE0 STP X20, X19, [X31 + 0x30]
	0x0376EFE4 ADRP X19, 0xC72000
	0x0376EFE8 ADRP X20, 0x9AD000
	0x0376EFEC LDRB W8, [X19 + 0xEE5]
	0x0376EFF0 LDR X20, [X20 + 0x270]
	0x0376EFF4 TBNZ X8, 0x0, 0x376F030
	0x0376EFF8 ADRP X0, 0x9D8000
	0x0376EFFC LDR X0, [X0 + 0x928]
	0x0376F000 BL 0x1C16CF4
	0x0376F004 ADRP X0, 0x9AC000
	0x0376F008 LDR X0, [X0 + 0x270]
	0x0376F00C BL 0x1C16CF4
	0x0376F010 ADRP X0, 0x9D6000
	0x0376F014 LDR X0, [X0 + 0x70]
	0x0376F018 BL 0x1C16CF4
	0x0376F01C ADRP X0, 0x9D6000
	0x0376F020 LDR X0, [X0 + 0xE18]
	0x0376F024 BL 0x1C16CF4
	0x0376F028 MOVZ W8, 0x1
	0x0376F02C STRB W8, [X19 + 0xEE5]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC73000
	007 Move W8, [X19+3794]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x9AE000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3794], W8
	018 Compare X20, 0
	019 JumpIfEqual {63}
	020 Move X21, 0x9AE000
	021 Move X21, [X21+624]
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X19, [X8]
	030 Move [X31+12], W31
	031 Add X1, X31, 12
	032 Move X0, X19
	033 Move X2, X31
	034 Call Monitor.Enter, X0, X1
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move X0, [X8]
	043 Compare X0, 0
	044 JumpIfEqual {83}
	045 Move X1, X20
	046 Move X2, X31
	047 Call InputManager.add_onDeviceCommand, X0, X1
	048 Move X20, X31
	049 Move W8, [X31+12]
	050 Compare W8, 0
	051 JumpIfEqual {55}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Monitor.Exit, X0
	055 Compare X20, 0
	056 JumpIfNotEqual {81}
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+16]
	060 Move X21, [X31+24]
	061 Add X31, X31, 48
	062 Return 
	063 Move X0, 0x98B000
	064 Move X0, [X0+1320]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0x990000
	069 Move X0, [X0+3784]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentNullException..ctor, X0, X1
	075 Move X0, 0x9D9000
	076 Move X0, [X0+2224]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC
	081 Move X0, X20
	082 Call 0x1C17F18
	083 Call 0x1C17F20
	084 Move X21, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X21
	087 Call 0x3EB2AD0
	088 Move X20, [X0]
	089 Call 0x3EB2AE0
	090 Move X20, X31
	091 Move X21, X0
	092 Move W8, [X31+12]
	093 Compare W8, 0
	094 JumpIfEqual {98}
	095 Move X0, X19
	096 Move X1, X31
	097 Call Monitor.Exit, X0
	098 Compare X20, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X21
	101 Call 0x1D2D690
	102 Move X0, X20
	103 Call 0x1C17F18
	104 Call 0x1991590

Method: System.Void remove_onDeviceCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate value)

Disassembly:
	0x0376F030 LDR X0, [X20]
	0x0376F034 LDR W8, [X0 + 0xE0]
	0x0376F038 CBNZ W8, 0x376F040
	0x0376F03C BL 0x1C16DFC
	0x0376F040 BL 0x376DAD4
	0x0376F044 UBFM X21, X1, 0x20, 0x3F
	0x0376F048 CMP W21, 0x1
	0x0376F04C STP X0, X1, [X31]
	0x0376F050 B.LT 0x376F0EC
	0x0376F054 ADRP X22, 0x9D6000
	0x0376F058 ADRP X23, 0x9D7000
	0x0376F05C LDR X22, [X22 + 0xE18]
	0x0376F060 LDR X23, [X23 + 0x928]
	0x0376F064 MOV W19, W31
	0x0376F068 LDR X2, [X22]
	0x0376F06C ADD X0, X31, 0x0
	0x0376F070 MOV W1, W19
	0x0376F074 BL 0x24FDB3C
	0x0376F078 LDR X1, [X23]
	0x0376F07C BL 0x1C16E00
	0x0376F080 CBZ X0, 0x376F0E0
	0x0376F084 LDR X8, [X0]
	0x0376F088 LDR X1, [X23]
	0x0376F08C MOV X20, X0
	0x0376F090 LDRH W9, [X8 + 0x12E]
	0x0376F094 CBZ X9, 0x376F0B8
	0x0376F098 LDR X10, [X8 + 0xB0]
	0x0376F09C ADD X10, X10, 0x8
	0x0376F0A0 LDUR X11, [X10 - 0x8]
	0x0376F0A4 CMP X11, X1
	0x0376F0A8 B.EQ 0x376F0C8
	0x0376F0AC SUBS X9, X9, 0x1
	0x0376F0B0 ADD X10, X10, 0x10
	0x0376F0B4 B.NE 0x376F0A0
	0x0376F0B8 MOV X0, X20
	0x0376F0BC MOV W2, W31
	0x0376F0C0 BL 0x1C5C788
	0x0376F0C4 B 0x376F0D4
	0x0376F0C8 LDRSW X9, [X10]
	0x0376F0CC ADD X8, X8, X9, 0x4, LSL
	0x0376F0D0 ADD X0, X8, 0x138
	0x0376F0D4 LDP X8, X1, [X0]
	0x0376F0D8 MOV X0, X20
	0x0376F0DC BLR X8
	0x0376F0E0 ADD W19, W19, 0x1
	0x0376F0E4 CMP W19, W21
	0x0376F0E8 B.NE 0x376F068
	0x0376F0EC LDP X20, X19, [X31 + 0x30]
	0x0376F0F0 LDP X22, X21, [X31 + 0x20]
	0x0376F0F4 LDP X30, X23, [X31 + 0x10]
	0x0376F0F8 ADD X31, X31, 0x40
	0x0376F0FC RET
	0x0376F100 SUB X31, X31, 0x40
	0x0376F104 STP X30, X23, [X31 + 0x10]
	0x0376F108 STP X22, X21, [X31 + 0x20]
	0x0376F10C STP X20, X19, [X31 + 0x30]
	0x0376F110 ADRP X19, 0xC71000
	0x0376F114 ADRP X20, 0x9AC000
	0x0376F118 LDRB W8, [X19 + 0xEE6]
	0x0376F11C LDR X20, [X20 + 0x270]
	0x0376F120 TBNZ X8, 0x0, 0x376F15C
	0x0376F124 ADRP X0, 0x9D7000
	0x0376F128 LDR X0, [X0 + 0x928]
	0x0376F12C BL 0x1C16CF4
	0x0376F130 ADRP X0, 0x9AC000
	0x0376F134 LDR X0, [X0 + 0x270]
	0x0376F138 BL 0x1C16CF4
	0x0376F13C ADRP X0, 0x9D6000
	0x0376F140 LDR X0, [X0 + 0x70]
	0x0376F144 BL 0x1C16CF4
	0x0376F148 ADRP X0, 0x9D6000
	0x0376F14C LDR X0, [X0 + 0xE18]
	0x0376F150 BL 0x1C16CF4
	0x0376F154 MOVZ W8, 0x1
	0x0376F158 STRB W8, [X19 + 0xEE6]
	0x0376F15C LDR X0, [X20]
	0x0376F160 LDR W8, [X0 + 0xE0]
	0x0376F164 CBNZ W8, 0x376F16C
	0x0376F168 BL 0x1C16DFC
	0x0376F16C BL 0x376DAD4
	0x0376F170 UBFM X21, X1, 0x20, 0x3F
	0x0376F174 CMP W21, 0x1
	0x0376F178 STP X0, X1, [X31]
	0x0376F17C B.LT 0x376F21C
	0x0376F180 ADRP X22, 0x9D6000
	0x0376F184 ADRP X23, 0x9D7000
	0x0376F188 LDR X22, [X22 + 0xE18]
	0x0376F18C LDR X23, [X23 + 0x928]
	0x0376F190 MOV W19, W31
	0x0376F194 LDR X2, [X22]
	0x0376F198 ADD X0, X31, 0x0
	0x0376F19C MOV W1, W19
	0x0376F1A0 BL 0x24FDB3C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC72000
	007 Move W8, [X19+3795]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x9AD000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3795], W8
	018 Compare X20, 0
	019 JumpIfEqual {63}
	020 Move X21, 0x9AD000
	021 Move X21, [X21+624]
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X19, [X8]
	030 Move [X31+12], W31
	031 Add X1, X31, 12
	032 Move X0, X19
	033 Move X2, X31
	034 Call Monitor.Enter, X0, X1
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move X0, [X8]
	043 Compare X0, 0
	044 JumpIfEqual {83}
	045 Move X1, X20
	046 Move X2, X31
	047 Call InputManager.remove_onDeviceCommand, X0, X1
	048 Move X20, X31
	049 Move W8, [X31+12]
	050 Compare W8, 0
	051 JumpIfEqual {55}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Monitor.Exit, X0
	055 Compare X20, 0
	056 JumpIfNotEqual {81}
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+16]
	060 Move X21, [X31+24]
	061 Add X31, X31, 48
	062 Return 
	063 Move X0, 0x98A000
	064 Move X0, [X0+1320]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0x98F000
	069 Move X0, [X0+3784]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentNullException..ctor, X0, X1
	075 Move X0, 0x9D8000
	076 Move X0, [X0+2232]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC
	081 Move X0, X20
	082 Call 0x1C17F18
	083 Call 0x1C17F20
	084 Move X21, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X21
	087 Call 0x3EB2AD0
	088 Move X20, [X0]
	089 Call 0x3EB2AE0
	090 Move X20, X31
	091 Move X21, X0
	092 Move W8, [X31+12]
	093 Compare W8, 0
	094 JumpIfEqual {98}
	095 Move X0, X19
	096 Move X1, X31
	097 Call Monitor.Exit, X0
	098 Compare X20, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X21
	101 Call 0x1D2D690
	102 Move X0, X20
	103 Call 0x1C17F18
	104 Call 0x1991590

Method: System.Void add_onFindLayoutForDevice(UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate value)

Disassembly:
	0x0376F1A4 LDR X1, [X23]
	0x0376F1A8 BL 0x1C16E00
	0x0376F1AC CBZ X0, 0x376F210
	0x0376F1B0 LDR X8, [X0]
	0x0376F1B4 LDR X1, [X23]
	0x0376F1B8 MOV X20, X0
	0x0376F1BC LDRH W9, [X8 + 0x12E]
	0x0376F1C0 CBZ X9, 0x376F1E4
	0x0376F1C4 LDR X10, [X8 + 0xB0]
	0x0376F1C8 ADD X10, X10, 0x8
	0x0376F1CC LDUR X11, [X10 - 0x8]
	0x0376F1D0 CMP X11, X1
	0x0376F1D4 B.EQ 0x376F1F4
	0x0376F1D8 SUBS X9, X9, 0x1
	0x0376F1DC ADD X10, X10, 0x10
	0x0376F1E0 B.NE 0x376F1CC
	0x0376F1E4 MOVZ W2, 0x1
	0x0376F1E8 MOV X0, X20
	0x0376F1EC BL 0x1C5C788
	0x0376F1F0 B 0x376F204
	0x0376F1F4 LDR W9, [X10]
	0x0376F1F8 ADD W9, W9, 0x1
	0x0376F1FC ADD X8, X8, W9, 0x4, SXTW
	0x0376F200 ADD X0, X8, 0x138
	0x0376F204 LDP X8, X1, [X0]
	0x0376F208 MOV X0, X20
	0x0376F20C BLR X8
	0x0376F210 ADD W19, W19, 0x1
	0x0376F214 CMP W19, W21
	0x0376F218 B.NE 0x376F194
	0x0376F21C LDP X20, X19, [X31 + 0x30]
	0x0376F220 LDP X22, X21, [X31 + 0x20]
	0x0376F224 LDP X30, X23, [X31 + 0x10]
	0x0376F228 ADD X31, X31, 0x40
	0x0376F22C RET
	0x0376F230 SUB X31, X31, 0x40
	0x0376F234 STP X30, X23, [X31 + 0x10]
	0x0376F238 STP X22, X21, [X31 + 0x20]
	0x0376F23C STP X20, X19, [X31 + 0x30]
	0x0376F240 ADRP X19, 0xC71000
	0x0376F244 ADRP X20, 0x9AC000
	0x0376F248 LDRB W8, [X19 + 0xEE7]
	0x0376F24C LDR X20, [X20 + 0x270]
	0x0376F250 TBNZ X8, 0x0, 0x376F28C
	0x0376F254 ADRP X0, 0x9D7000
	0x0376F258 LDR X0, [X0 + 0x928]
	0x0376F25C BL 0x1C16CF4
	0x0376F260 ADRP X0, 0x9AC000
	0x0376F264 LDR X0, [X0 + 0x270]
	0x0376F268 BL 0x1C16CF4
	0x0376F26C ADRP X0, 0x9D6000
	0x0376F270 LDR X0, [X0 + 0x70]
	0x0376F274 BL 0x1C16CF4
	0x0376F278 ADRP X0, 0x9D6000
	0x0376F27C LDR X0, [X0 + 0xE18]
	0x0376F280 BL 0x1C16CF4
	0x0376F284 MOVZ W8, 0x1
	0x0376F288 STRB W8, [X19 + 0xEE7]
	0x0376F28C LDR X0, [X20]
	0x0376F290 LDR W8, [X0 + 0xE0]
	0x0376F294 CBNZ W8, 0x376F29C
	0x0376F298 BL 0x1C16DFC
	0x0376F29C BL 0x376DAD4
	0x0376F2A0 UBFM X21, X1, 0x20, 0x3F
	0x0376F2A4 CMP W21, 0x1
	0x0376F2A8 STP X0, X1, [X31]
	0x0376F2AC B.LT 0x376F34C
	0x0376F2B0 ADRP X22, 0x9D6000
	0x0376F2B4 ADRP X23, 0x9D7000
	0x0376F2B8 LDR X22, [X22 + 0xE18]
	0x0376F2BC LDR X23, [X23 + 0x928]
	0x0376F2C0 MOV W19, W31
	0x0376F2C4 LDR X2, [X22]
	0x0376F2C8 ADD X0, X31, 0x0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC72000
	007 Move X21, 0x9AD000
	008 Move W8, [X19+3796]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AD000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3796], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.add_onFindControlLayoutForDevice, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: System.Void remove_onFindLayoutForDevice(UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate value)

Disassembly:
	0x0376F2CC MOV W1, W19
	0x0376F2D0 BL 0x24FDB3C
	0x0376F2D4 LDR X1, [X23]
	0x0376F2D8 BL 0x1C16E00
	0x0376F2DC CBZ X0, 0x376F340
	0x0376F2E0 LDR X8, [X0]
	0x0376F2E4 LDR X1, [X23]
	0x0376F2E8 MOV X20, X0
	0x0376F2EC LDRH W9, [X8 + 0x12E]
	0x0376F2F0 CBZ X9, 0x376F314
	0x0376F2F4 LDR X10, [X8 + 0xB0]
	0x0376F2F8 ADD X10, X10, 0x8
	0x0376F2FC LDUR X11, [X10 - 0x8]
	0x0376F300 CMP X11, X1
	0x0376F304 B.EQ 0x376F324
	0x0376F308 SUBS X9, X9, 0x1
	0x0376F30C ADD X10, X10, 0x10
	0x0376F310 B.NE 0x376F2FC
	0x0376F314 MOVZ W2, 0x2
	0x0376F318 MOV X0, X20
	0x0376F31C BL 0x1C5C788
	0x0376F320 B 0x376F334
	0x0376F324 LDR W9, [X10]
	0x0376F328 ADD W9, W9, 0x2
	0x0376F32C ADD X8, X8, W9, 0x4, SXTW
	0x0376F330 ADD X0, X8, 0x138
	0x0376F334 LDP X8, X1, [X0]
	0x0376F338 MOV X0, X20
	0x0376F33C BLR X8
	0x0376F340 ADD W19, W19, 0x1
	0x0376F344 CMP W19, W21
	0x0376F348 B.NE 0x376F2C4
	0x0376F34C LDP X20, X19, [X31 + 0x30]
	0x0376F350 LDP X22, X21, [X31 + 0x20]
	0x0376F354 LDP X30, X23, [X31 + 0x10]
	0x0376F358 ADD X31, X31, 0x40
	0x0376F35C RET
	0x0376F360 SUB X31, X31, 0x40
	0x0376F364 STR X30, [X31 + 0x10]
	0x0376F368 STP X22, X21, [X31 + 0x20]
	0x0376F36C STP X20, X19, [X31 + 0x30]
	0x0376F370 ADRP X22, 0xC71000
	0x0376F374 ADRP X21, 0x9AC000
	0x0376F378 LDRB W8, [X22 + 0xEE8]
	0x0376F37C LDR X21, [X21 + 0x270]
	0x0376F380 MOV X20, X1
	0x0376F384 MOV X19, X0
	0x0376F388 TBNZ X8, 0x0, 0x376F3A0
	0x0376F38C ADRP X0, 0x9AC000
	0x0376F390 LDR X0, [X0 + 0x270]
	0x0376F394 BL 0x1C16CF4
	0x0376F398 MOVZ W8, 0x1
	0x0376F39C STRB W8, [X22 + 0xEE8]
	0x0376F3A0 ADD X0, X31, 0x0
	0x0376F3A4 MOV X1, X20
	0x0376F3A8 MOV X2, X31
	0x0376F3AC STP X31, X31, [X31]
	0x0376F3B0 BL 0x3757420
	0x0376F3B4 LDR X0, [X21]
	0x0376F3B8 LDR W8, [X0 + 0xE0]
	0x0376F3BC CBNZ W8, 0x376F3C4
	0x0376F3C0 BL 0x1C16DFC
	0x0376F3C4 LDP X1, X2, [X31]
	0x0376F3C8 MOV X0, X19
	0x0376F3CC BL 0x376F3E4
	0x0376F3D0 LDP X20, X19, [X31 + 0x30]
	0x0376F3D4 LDP X22, X21, [X31 + 0x20]
	0x0376F3D8 LDR X30, [X31 + 0x10]
	0x0376F3DC ADD X31, X31, 0x40
	0x0376F3E0 RET
	0x0376F3E4 STP X30, X23, [X31 - 0x30]!
	0x0376F3E8 STP X22, X21, [X31 + 0x10]
	0x0376F3EC STP X20, X19, [X31 + 0x20]
	0x0376F3F0 ADRP X23, 0xC71000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC72000
	007 Move X21, 0x9AD000
	008 Move W8, [X19+3797]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AD000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3797], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.remove_onFindControlLayoutForDevice, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: System.Single get_pollingFrequency()

Disassembly:
	0x0376F3F4 ADRP X22, 0x9AC000
	0x0376F3F8 LDRB W8, [X23 + 0xEE9]
	0x0376F3FC LDR X22, [X22 + 0x270]
	0x0376F400 MOV X19, X2
	0x0376F404 MOV X20, X1
	0x0376F408 MOV X21, X0
	0x0376F40C TBNZ X8, 0x0, 0x376F424
	0x0376F410 ADRP X0, 0x9AC000
	0x0376F414 LDR X0, [X0 + 0x270]
	0x0376F418 BL 0x1C16CF4
	0x0376F41C MOVZ W8, 0x1
	0x0376F420 STRB W8, [X23 + 0xEE9]
	0x0376F424 LDR X0, [X22]
	0x0376F428 LDR W8, [X0 + 0xE0]
	0x0376F42C CBNZ W8, 0x376F438
	0x0376F430 BL 0x1C16DFC
	0x0376F434 LDR X0, [X22]
	0x0376F438 LDR X8, [X0 + 0xB8]
	0x0376F43C LDR X0, [X8]
	0x0376F440 CBZ X0, 0x376F464
	0x0376F444 MOV X1, X21
	0x0376F448 MOV X2, X20
	0x0376F44C MOV X3, X19
	0x0376F450 LDP X20, X19, [X31 + 0x20]
	0x0376F454 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC72000
	005 Move X19, 0x9AD000
	006 Move W8, [X20+3798]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AD000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3798], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8]
	025 Compare X8, 0
	026 JumpIfEqual {32}
	027 Move V0, [X8+20]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return V0
	032 Call 0x1C17F20

Method: System.Void set_pollingFrequency(System.Single value)

Disassembly:
	0x0376F458 MOV X4, X31
	0x0376F45C LDP X30, X23, [X31], #0x30
	0x0376F460 B 0x37C5324
	0x0376F464 BL 0x1C16F20
	0x0376F468 SUB X31, X31, 0x40
	0x0376F46C STR X30, [X31 + 0x10]
	0x0376F470 STP X22, X21, [X31 + 0x20]
	0x0376F474 STP X20, X19, [X31 + 0x30]
	0x0376F478 ADRP X22, 0xC71000
	0x0376F47C ADRP X21, 0x9AC000
	0x0376F480 LDRB W8, [X22 + 0xEEA]
	0x0376F484 LDR X21, [X21 + 0x270]
	0x0376F488 MOV X20, X1
	0x0376F48C MOV X19, X0
	0x0376F490 TBNZ X8, 0x0, 0x376F4A8
	0x0376F494 ADRP X0, 0x9AC000
	0x0376F498 LDR X0, [X0 + 0x270]
	0x0376F49C BL 0x1C16CF4
	0x0376F4A0 MOVZ W8, 0x1
	0x0376F4A4 STRB W8, [X22 + 0xEEA]
	0x0376F4A8 LDR X0, [X21]
	0x0376F4AC LDR W8, [X0 + 0xE0]
	0x0376F4B0 CBNZ W8, 0x376F4BC
	0x0376F4B4 BL 0x1C16DFC
	0x0376F4B8 LDR X0, [X21]
	0x0376F4BC LDR X8, [X0 + 0xB8]
	0x0376F4C0 ADD X0, X31, 0x0
	0x0376F4C4 MOV X1, X20
	0x0376F4C8 MOV X2, X31

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC72000
	006 Move X19, 0x9AD000
	007 Move W8, [X20+3799]
	008 Move X19, [X19+624]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AD000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3799], W8
	019 Move X0, [X19]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X19]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+8]
	032 Move V0, V8
	033 Move X1, X31
	034 Move V8, [X31+32]
	035 Call InputManager.set_pollingFrequency, X0, V0
	036 Return 
	037 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputDevice AddDevice(System.String layout, System.String name = null, System.String variants = null)

Disassembly:
	0x0376F4CC LDR X21, [X8]
	0x0376F4D0 STP X31, X31, [X31]
	0x0376F4D4 BL 0x3757420
	0x0376F4D8 CBZ X21, 0x376F504
	0x0376F4DC LDP X2, X3, [X31]
	0x0376F4E0 MOV X0, X21
	0x0376F4E4 MOV X1, X19
	0x0376F4E8 MOV X4, X31
	0x0376F4EC BL 0x37BCD04
	0x0376F4F0 LDP X20, X19, [X31 + 0x30]
	0x0376F4F4 LDP X22, X21, [X31 + 0x20]
	0x0376F4F8 LDR X30, [X31 + 0x10]
	0x0376F4FC ADD X31, X31, 0x40
	0x0376F500 RET
	0x0376F504 BL 0x1C16F20
	0x0376F508 STP X30, X23, [X31 - 0x30]!
	0x0376F50C STP X22, X21, [X31 + 0x10]
	0x0376F510 STP X20, X19, [X31 + 0x20]
	0x0376F514 ADRP X23, 0xC71000
	0x0376F518 ADRP X22, 0x9AC000
	0x0376F51C LDRB W8, [X23 + 0xEEB]
	0x0376F520 LDR X22, [X22 + 0x270]
	0x0376F524 MOV X19, X2
	0x0376F528 MOV X20, X1
	0x0376F52C MOV X21, X0
	0x0376F530 TBNZ X8, 0x0, 0x376F548
	0x0376F534 ADRP X0, 0x9AC000
	0x0376F538 LDR X0, [X0 + 0x270]
	0x0376F53C BL 0x1C16CF4
	0x0376F540 MOVZ W8, 0x1
	0x0376F544 STRB W8, [X23 + 0xEEB]
	0x0376F548 LDR X0, [X22]
	0x0376F54C LDR W8, [X0 + 0xE0]
	0x0376F550 CBNZ W8, 0x376F55C
	0x0376F554 BL 0x1C16DFC
	0x0376F558 LDR X0, [X22]
	0x0376F55C LDR X8, [X0 + 0xB8]
	0x0376F560 LDR X0, [X8]
	0x0376F564 CBZ X0, 0x376F588
	0x0376F568 MOV X1, X21
	0x0376F56C MOV X2, X20
	0x0376F570 MOV X3, X19
	0x0376F574 LDP X20, X19, [X31 + 0x20]
	0x0376F578 LDP X22, X21, [X31 + 0x10]
	0x0376F57C MOV X4, X31
	0x0376F580 LDP X30, X23, [X31], #0x30
	0x0376F584 B 0x37BCD04
	0x0376F588 BL 0x1C16F20
	0x0376F58C SUB X31, X31, 0x40
	0x0376F590 STR X30, [X31 + 0x10]
	0x0376F594 STP X22, X21, [X31 + 0x20]
	0x0376F598 STP X20, X19, [X31 + 0x30]
	0x0376F59C ADRP X22, 0xC71000
	0x0376F5A0 ADRP X21, 0x9AC000
	0x0376F5A4 LDRB W8, [X22 + 0xEEC]
	0x0376F5A8 LDR X21, [X21 + 0x270]
	0x0376F5AC MOV X20, X1
	0x0376F5B0 MOV X19, X0
	0x0376F5B4 TBNZ X8, 0x0, 0x376F5CC
	0x0376F5B8 ADRP X0, 0x9AC000
	0x0376F5BC LDR X0, [X0 + 0x270]
	0x0376F5C0 BL 0x1C16CF4
	0x0376F5C4 MOVZ W8, 0x1
	0x0376F5C8 STRB W8, [X22 + 0xEEC]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xC72000
	008 Move W8, [X22+3800]
	009 Move X21, X2
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9AD000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3800], W8
	021 Move X0, X20
	022 Move X1, X31
	023 Call String.IsNullOrEmpty, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {60}
	028 Move X22, 0x9AD000
	029 Move X22, [X22+624]
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X22]
	036 Move X8, [X0+184]
	037 Add X0, X31, 0
	038 Move X1, X21
	039 Move X2, X31
	040 Move X22, [X8]
	041 Move [X31], X31
	042 Move [X31+8], X31
	043 Call InternedString..ctor, X0, X1
	044 Compare X22, 0
	045 JumpIfEqual {78}
	046 Move X3, [X31]
	047 Move X4, [X31+8]
	048 Move X0, X22
	049 Move X1, X20
	050 Move X2, X19
	051 Move X5, X31
	052 Call InputManager.AddDevice, X0, X1, X2, X3
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X22, [X31+32]
	056 Move X21, [X31+40]
	057 Move X30, [X31+16]
	058 Add X31, X31, 64
	059 Return X0
	060 Move X0, 0x98A000
	061 Move X0, [X0+1320]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0x9D8000
	066 Move X0, [X0+2240]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Move X2, X31
	071 Call ArgumentNullException..ctor, X0, X1
	072 Move X0, 0x9D8000
	073 Move X0, [X0+2248]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Call 0x1C17DEC
	078 Call 0x1C17F20

Method: TDevice AddDevice(System.String name = null)

Disassembly:
	0x0220C300 ADRP X20, 0x1F0F000
	0x0220C304 LDR X20, [X20 + 0x270]
	0x0220C308 LDR X0, [X20]
	0x0220C30C LDR W8, [X0 + 0xE0]
	0x0220C310 CBNZ W8, 0x220C31C
	0x0220C314 BL 0x1C16DFC
	0x0220C318 LDR X0, [X20]
	0x0220C31C LDR X8, [X0 + 0xB8]
	0x0220C320 LDR X0, [X8]
	0x0220C324 CBZ X0, 0x220C368
	0x0220C328 ADD X1, X19, 0x40
	0x0220C32C MOV X2, X31
	0x0220C330 BL 0x37C7038
	0x0220C334 LDR X8, [X26 + 0x28]
	0x0220C338 LDUR X9, [X29 - 0x10]
	0x0220C33C CMP X8, X9
	0x0220C340 B.NE 0x220C4A4
	0x0220C344 SUB X31, X29, 0x8
	0x0220C348 LDP X20, X19, [X31 + 0x50]
	0x0220C34C LDP X22, X21, [X31 + 0x40]
	0x0220C350 LDP X24, X23, [X31 + 0x30]
	0x0220C354 LDP X26, X25, [X31 + 0x20]
	0x0220C358 LDR X28, [X31 + 0x18]
	0x0220C35C LDP X29, X30, [X31 + 0x8]
	0x0220C360 LDR V8, [X31], #0x60
	0x0220C364 RET
	0x0220C368 BL 0x1C16F20
	0x0220C36C ADRP X0, 0x1EEC000
	0x0220C370 LDR X0, [X0 + 0x528]
	0x0220C374 BL 0x1C16D08
	0x0220C378 BL 0x1C16F10
	0x0220C37C MOV X21, X0
	0x0220C380 ADRP X0, 0x1F0F000
	0x0220C384 LDR X0, [X0 + 0xD20]
	0x0220C388 BL 0x1C16D08
	0x0220C38C MOV X1, X0
	0x0220C390 MOV X0, X21
	0x0220C394 MOV X2, X31
	0x0220C398 BL 0x330E100
	0x0220C39C MOV X0, X21
	0x0220C3A0 B 0x220C49C
	0x0220C3A4 ADRP X0, 0x1F0F000
	0x0220C3A8 LDR X0, [X0 + 0xF80]
	0x0220C3AC BL 0x1C16D08
	0x0220C3B0 MOV X1, X22
	0x0220C3B4 MOV X2, X31
	0x0220C3B8 BL 0x321EFD0
	0x0220C3BC MOV X21, X0
	0x0220C3C0 ADRP X0, 0x1EE7000
	0x0220C3C4 LDR X0, [X0 + 0x5B0]
	0x0220C3C8 BL 0x1C16D08
	0x0220C3CC BL 0x1C16F10
	0x0220C3D0 MOV X1, X21
	0x0220C3D4 MOV X2, X31
	0x0220C3D8 MOV X22, X0
	0x0220C3DC BL 0x337DF1C
	0x0220C3E0 B 0x220C498
	0x0220C3E4 LDR X8, [X20 + 0x38]
	0x0220C3E8 ADRP X0, 0x1EE7000
	0x0220C3EC LDR X21, [X8 + 0x8]
	0x0220C3F0 LDR X0, [X0 + 0x6C0]
	0x0220C3F4 BL 0x1C16D08
	0x0220C3F8 BL 0x19903D0
	0x0220C3FC MOV X0, X21
	0x0220C400 MOV X1, X31
	0x0220C404 BL 0x338C698
	0x0220C408 MOV X21, X0
	0x0220C40C BL 0x19903C0
	0x0220C410 LDR X8, [X21]
	0x0220C414 MOV X0, X21
	0x0220C418 LDP X9, X1, [X8 + 0x1A8]
	0x0220C41C BLR X9
	0x0220C420 MOVZ W8, 0x200
	0x0220C424 MOV X21, X0
	0x0220C428 STR W8, [X19 + 0x20]
	0x0220C42C ADRP X0, 0x1EE7000
	0x0220C430 LDR X0, [X0 + 0x758]
	0x0220C434 BL 0x1C16D08
	0x0220C438 ADD X1, X19, 0x20
	0x0220C43C BL 0x1C16E04
	0x0220C440 MOV X22, X0
	0x0220C444 ADRP X0, 0x1F0F000
	0x0220C448 LDR X0, [X0 + 0xF88]
	0x0220C44C BL 0x1C16D08
	0x0220C450 MOV X1, X21
	0x0220C454 MOV X2, X22
	0x0220C458 MOV X3, X31
	0x0220C45C BL 0x3227BD4
	0x0220C460 MOV X21, X0
	0x0220C464 ADRP X0, 0x1EEF000
	0x0220C468 LDR X0, [X0 + 0x578]
	0x0220C46C BL 0x1C16D08
	0x0220C470 BL 0x1C16F10
	0x0220C474 MOV X22, X0
	0x0220C478 ADRP X0, 0x1F0F000
	0x0220C47C LDR X0, [X0 + 0xD98]
	0x0220C480 BL 0x1C16D08
	0x0220C484 MOV X2, X0
	0x0220C488 MOV X0, X22
	0x0220C48C MOV X1, X21
	0x0220C490 MOV X3, X31
	0x0220C494 BL 0x330E16C
	0x0220C498 MOV X0, X22
	0x0220C49C MOV X1, X20
	0x0220C4A0 BL 0x1C16DEC
	0x0220C4A4 BL 0x3EB1B20
	0x0220C4A8 STR X30, [X31 - 0x20]!
	0x0220C4AC STP X20, X19, [X31 + 0x10]
	0x0220C4B0 LDR X8, [X1 + 0x38]
	0x0220C4B4 MOV X19, X0
	0x0220C4B8 CBNZ X8, 0x220C4EC
	0x0220C4BC ADRP X0, 0x1F0F000
	0x0220C4C0 LDR X0, [X0 + 0x270]
	0x0220C4C4 MOV X20, X1
	0x0220C4C8 BL 0x1C16CF4
	0x0220C4CC ADRP X0, 0x1EE7000
	0x0220C4D0 LDR X0, [X0 + 0x6C0]
	0x0220C4D4 BL 0x1C16CF4
	0x0220C4D8 LDR X8, [X20 + 0x38]
	0x0220C4DC CBNZ X8, 0x220C4EC
	0x0220C4E0 MOV X0, X20
	0x0220C4E4 BL 0x1C5C6E0
	0x0220C4E8 LDR X8, [X20 + 0x38]
	0x0220C4EC ADRP X9, 0x1EE7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X1+56]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {22}
	011 Move X0, 0x1F10000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move X0, 0x1EE8000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move X8, [X19+56]
	018 Compare X8, 0
	019 JumpIfNotEqual {22}
	020 Move X0, X19
	021 Call 0x1C5D6E0
	022 Move X21, 0x1F10000
	023 Move X21, [X21+624]
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X21]
	030 Move X9, 0x1EE8000
	031 Move X8, [X0+184]
	032 Move X9, [X9+1728]
	033 Move X21, [X8]
	034 Move X0, [X9]
	035 Move X9, [X19+56]
	036 Move W8, [X0+224]
	037 Move X22, [X9]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X22
	042 Move X1, X31
	043 Call Type.GetTypeFromHandle, X0
	044 Compare X21, 0
	045 JumpIfEqual {88}
	046 Move X1, X0
	047 Move X0, X21
	048 Move X2, X20
	049 Move X3, X31
	050 Call InputManager.AddDevice, X0, X1, X2
	051 Move X8, [X19+56]
	052 Move X20, X0
	053 Move X1, [X8+8]
	054 Move W8, [X1+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {62}
	059 Move X0, X1
	060 Call 0x1C5D684
	061 Move X1, X0
	062 Move X0, X20
	063 Call 0x1C17E00
	064 Move X8, [X19+56]
	065 Move X22, X0
	066 Move X21, [X8+8]
	067 Move W8, [X21+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {75}
	072 Move X0, X21
	073 Call 0x1C5D684
	074 Move X21, X0
	075 Compare X22, 0
	076 JumpIfEqual {89}
	077 Move X0, X22
	078 Move X1, X21
	079 Call 0x1C17E00
	080 Compare X0, 0
	081 JumpIfEqual {142}
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return X0
	088 Call 0x1C17F20
	089 Compare X20, 0
	090 JumpIfEqual {101}
	091 Move X0, 0x1F10000
	092 Move X0, [X0+624]
	093 Call 0x1C17D08
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move X0, X20
	099 Move X1, X31
	100 Call InputSystem.RemoveDevice, X0
	101 Move X8, [X19+56]
	102 Move X0, 0x1EE8000
	103 Move X20, [X8]
	104 Move X0, [X0+1728]
	105 Call 0x1C17D08
	106 Call 0x19913D0
	107 Move X0, X20
	108 Move X1, X31
	109 Call Type.GetTypeFromHandle, X0
	110 Move X20, X0
	111 Call 0x19913C0
	112 Move X8, [X20]
	113 Move X0, X20
	114 Move X9, [X8+424]
	115 Move X1, [X8+432]
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Move X20, X0
	118 Move X0, 0x1F10000
	119 Move X0, [X0+3840]
	120 Call 0x1C17D08
	121 Move X21, X0
	122 Move X0, 0x1F10000
	123 Move X0, [X0+3848]
	124 Call 0x1C17D08
	125 Move X2, X0
	126 Move X0, X21
	127 Move X1, X20
	128 Move X3, X31
	129 Call String.Concat, X0, X1, X2
	130 Move X20, X0
	131 Move X0, 0x1EE8000
	132 Move X0, [X0+1456]
	133 Call 0x1C17D08
	134 Call 0x1C17F10
	135 Move X1, X20
	136 Move X2, X31
	137 Move X21, X0
	138 Call InvalidOperationException..ctor, X0, X1
	139 Move X0, X21
	140 Move X1, X19
	141 Call 0x1C17DEC
	142 Move X0, X22
	143 Move X1, X21
	144 Call 0x1C181E0

Method: UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description)

Disassembly:
	0x0376F5CC LDR X0, [X21]
	0x0376F5D0 LDR W8, [X0 + 0xE0]
	0x0376F5D4 CBNZ W8, 0x376F5E0
	0x0376F5D8 BL 0x1C16DFC
	0x0376F5DC LDR X0, [X21]
	0x0376F5E0 LDR X8, [X0 + 0xB8]
	0x0376F5E4 ADD X0, X31, 0x0
	0x0376F5E8 MOV X1, X20
	0x0376F5EC MOV X2, X31
	0x0376F5F0 LDR X21, [X8]
	0x0376F5F4 STP X31, X31, [X31]
	0x0376F5F8 BL 0x3757420
	0x0376F5FC CBZ X21, 0x376F628
	0x0376F600 LDP X2, X3, [X31]
	0x0376F604 MOV X0, X21
	0x0376F608 MOV X1, X19
	0x0376F60C MOV X4, X31
	0x0376F610 BL 0x37BCEBC
	0x0376F614 LDP X20, X19, [X31 + 0x30]
	0x0376F618 LDP X22, X21, [X31 + 0x20]
	0x0376F61C LDR X30, [X31 + 0x10]
	0x0376F620 ADD X31, X31, 0x40
	0x0376F624 RET
	0x0376F628 BL 0x1C16F20
	0x0376F62C STP X30, X23, [X31 - 0x30]!
	0x0376F630 STP X22, X21, [X31 + 0x10]
	0x0376F634 STP X20, X19, [X31 + 0x20]
	0x0376F638 ADRP X23, 0xC71000
	0x0376F63C ADRP X22, 0x9AC000
	0x0376F640 LDRB W8, [X23 + 0xEED]
	0x0376F644 LDR X22, [X22 + 0x270]
	0x0376F648 MOV X19, X2
	0x0376F64C MOV X20, X1
	0x0376F650 MOV X21, X0
	0x0376F654 TBNZ X8, 0x0, 0x376F66C
	0x0376F658 ADRP X0, 0x9AC000
	0x0376F65C LDR X0, [X0 + 0x270]
	0x0376F660 BL 0x1C16CF4
	0x0376F664 MOVZ W8, 0x1
	0x0376F668 STRB W8, [X23 + 0xEED]
	0x0376F66C LDR X0, [X22]
	0x0376F670 LDR W8, [X0 + 0xE0]
	0x0376F674 CBNZ W8, 0x376F680
	0x0376F678 BL 0x1C16DFC
	0x0376F67C LDR X0, [X22]
	0x0376F680 LDR X8, [X0 + 0xB8]
	0x0376F684 LDR X0, [X8]
	0x0376F688 CBZ X0, 0x376F6AC
	0x0376F68C MOV X1, X21
	0x0376F690 MOV X2, X20
	0x0376F694 MOV X3, X19
	0x0376F698 LDP X20, X19, [X31 + 0x20]
	0x0376F69C LDP X22, X21, [X31 + 0x10]
	0x0376F6A0 MOV X4, X31
	0x0376F6A4 LDP X30, X23, [X31], #0x30
	0x0376F6A8 B 0x37BCEBC
	0x0376F6AC BL 0x1C16F20
	0x0376F6B0 SUB X31, X31, 0x40
	0x0376F6B4 STR X30, [X31 + 0x10]
	0x0376F6B8 STP X22, X21, [X31 + 0x20]
	0x0376F6BC STP X20, X19, [X31 + 0x30]
	0x0376F6C0 ADRP X20, 0xC71000
	0x0376F6C4 LDRB W8, [X20 + 0xEEE]
	0x0376F6C8 MOV X19, X0
	0x0376F6CC TBNZ X8, 0x0, 0x376F6FC
	0x0376F6D0 ADRP X0, 0x9AC000
	0x0376F6D4 LDR X0, [X0 + 0x270]
	0x0376F6D8 BL 0x1C16CF4
	0x0376F6DC ADRP X0, 0x9D6000

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+144], X20
	004 Move [X31+152], X19
	005 Move X20, 0xC72000
	006 Move W8, [X20+3801]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AD000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3801], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call InputDeviceDescription.get_empty, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {60}
	024 Move X20, 0x9AD000
	025 Move X20, [X20+624]
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move V2, [X19+16]
	034 Move V0, [X19+32]
	035 Move X9, [X19+48]
	036 Move V1, [X19]
	037 Move X0, [X8]
	038 Move [X31+80], V2
	039 Move [X31+88], V0
	040 Move [X31+112], X9
	041 Move [X31+4], V1
	042 Compare X0, 0
	043 JumpIfEqual {83}
	044 Move V0, [X31+64]
	045 Move V1, [X31+80]
	046 Move V2, [X31+6]
	047 Move X8, [X31+112]
	048 Add X1, X31, 0
	049 Move X2, X31
	050 Move [X31], V0
	051 Move [X31+8], V1
	052 Move [X31+2], V2
	053 Move [X31+48], X8
	054 Call InputManager.AddDevice, X0, X1
	055 Move X20, [X31+144]
	056 Move X19, [X31+152]
	057 Move X30, [X31+128]
	058 Add X31, X31, 160
	059 Return X0
	060 Move X0, 0x98D000
	061 Move X0, [X0+1400]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0x9D8000
	066 Move X0, [X0+2256]
	067 Call 0x1C17D08
	068 Move X20, X0
	069 Move X0, 0x9D8000
	070 Move X0, [X0+2264]
	071 Call 0x1C17D08
	072 Move X2, X0
	073 Move X0, X19
	074 Move X1, X20
	075 Move X3, X31
	076 Call ArgumentException..ctor, X0, X1, X2
	077 Move X0, 0x9D8000
	078 Move X0, [X0+2272]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Call 0x1C17DEC
	083 Call 0x1C17F20

Method: System.Void AddDevice(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x0376F6E0 LDR X0, [X0 + 0x70]
	0x0376F6E4 BL 0x1C16CF4
	0x0376F6E8 ADRP X0, 0x9D6000
	0x0376F6EC LDR X0, [X0 + 0xE18]
	0x0376F6F0 BL 0x1C16CF4
	0x0376F6F4 MOVZ W8, 0x1
	0x0376F6F8 STRB W8, [X20 + 0xEEE]
	0x0376F6FC MOV X0, X19
	0x0376F700 MOV X1, X31
	0x0376F704 STP X31, X31, [X31]
	0x0376F708 BL 0x32277A8
	0x0376F70C TBNZ X0, 0x0, 0x376F7A0
	0x0376F710 ADRP X20, 0x9AC000
	0x0376F714 LDR X20, [X20 + 0x270]
	0x0376F718 LDR X0, [X20]
	0x0376F71C LDR W8, [X0 + 0xE0]
	0x0376F720 CBNZ W8, 0x376F72C
	0x0376F724 BL 0x1C16DFC
	0x0376F728 LDR X0, [X20]
	0x0376F72C LDR X8, [X0 + 0xB8]
	0x0376F730 LDR X0, [X8]
	0x0376F734 CBZ X0, 0x376F7E8
	0x0376F738 MOV X1, X31
	0x0376F73C BL 0x37BB5A0
	0x0376F740 UBFM X21, X1, 0x20, 0x3F
	0x0376F744 CMP W21, 0x1
	0x0376F748 STP X0, X1, [X31]
	0x0376F74C B.LT 0x376F788
	0x0376F750 ADRP X22, 0x9D6000
	0x0376F754 LDR X22, [X22 + 0xE18]
	0x0376F758 MOV W20, W31
	0x0376F75C LDR X2, [X22]
	0x0376F760 ADD X0, X31, 0x0
	0x0376F764 MOV W1, W20
	0x0376F768 BL 0x24FDB3C
	0x0376F76C MOV X1, X19
	0x0376F770 MOV W2, W31
	0x0376F774 BL 0x376B4E8
	0x0376F778 CBNZ X0, 0x376F78C
	0x0376F77C ADD W20, W20, 0x1
	0x0376F780 CMP W21, W20
	0x0376F784 B.NE 0x376F75C
	0x0376F788 MOV X0, X31
	0x0376F78C LDP X20, X19, [X31 + 0x30]
	0x0376F790 LDP X22, X21, [X31 + 0x20]
	0x0376F794 LDR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC72000
	005 Move W8, [X20+3802]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9AD000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3802], W8
	016 Compare X19, 0
	017 JumpIfEqual {37}
	018 Move X20, 0x9AD000
	019 Move X20, [X20+624]
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move X0, [X8]
	028 Compare X0, 0
	029 JumpIfEqual {55}
	030 Move X1, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X2, X31
	034 Move X30, [X31+32]
	035 Call InputManager.AddDevice, X0, X1
	036 Return 
	037 Move X0, 0x98A000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0x9AD000
	043 Move X0, [X0+3360]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Move X2, X31
	048 Call ArgumentNullException..ctor, X0, X1
	049 Move X0, 0x9D8000
	050 Move X0, [X0+2280]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call 0x1C17DEC
	055 Call 0x1C17F20

Method: System.Void RemoveDevice(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x0376F798 ADD X31, X31, 0x40
	0x0376F79C RET
	0x0376F7A0 ADRP X0, 0x989000
	0x0376F7A4 LDR X0, [X0 + 0x528]
	0x0376F7A8 BL 0x1C16D08
	0x0376F7AC BL 0x1C16F10
	0x0376F7B0 MOV X19, X0
	0x0376F7B4 ADRP X0, 0x98F000
	0x0376F7B8 LDR X0, [X0 + 0x120]
	0x0376F7BC BL 0x1C16D08
	0x0376F7C0 MOV X1, X0
	0x0376F7C4 MOV X0, X19
	0x0376F7C8 MOV X2, X31
	0x0376F7CC BL 0x330E100
	0x0376F7D0 ADRP X0, 0x9D7000
	0x0376F7D4 LDR X0, [X0 + 0x930]
	0x0376F7D8 BL 0x1C16D08
	0x0376F7DC MOV X1, X0
	0x0376F7E0 MOV X0, X19
	0x0376F7E4 BL 0x1C16DEC
	0x0376F7E8 BL 0x1C16F20
	0x0376F7EC SUB X31, X31, 0x50
	0x0376F7F0 STR X30, [X31 + 0x20]
	0x0376F7F4 STP X22, X21, [X31 + 0x30]
	0x0376F7F8 STP X20, X19, [X31 + 0x40]
	0x0376F7FC ADRP X22, 0xC71000
	0x0376F800 ADRP X21, 0x9AC000
	0x0376F804 MOV X19, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC72000
	006 Move X20, 0x9AD000
	007 Move W8, [X21+3803]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AD000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3803], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {38}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move W2, W31
	033 Move X3, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call InputManager.RemoveDevice, X0, X1, X2
	037 Return 
	038 Call 0x1C17F20

Method: System.Void FlushDisconnectedDevices()

Disassembly:
	0x0376F808 LDRB W8, [X22 + 0xEEF]
	0x0376F80C LDR X21, [X21 + 0x270]
	0x0376F810 MOV X20, X0
	0x0376F814 TBNZ X8, 0x0, 0x376F838
	0x0376F818 ADRP X0, 0x9D7000
	0x0376F81C LDR X0, [X0 + 0x938]
	0x0376F820 BL 0x1C16CF4
	0x0376F824 ADRP X0, 0x9AC000
	0x0376F828 LDR X0, [X0 + 0x270]
	0x0376F82C BL 0x1C16CF4
	0x0376F830 MOVZ W8, 0x1
	0x0376F834 STRB W8, [X22 + 0xEEF]
	0x0376F838 LDR X0, [X21]
	0x0376F83C ADRP X21, 0x9D7000
	0x0376F840 LDR W8, [X0 + 0xE0]
	0x0376F844 LDR X21, [X21 + 0x938]
	0x0376F848 CBNZ W8, 0x376F850
	0x0376F84C BL 0x1C16DFC
	0x0376F850 LDR X1, [X21]
	0x0376F854 ADD X8, X31, 0x0
	0x0376F858 MOV X0, X20
	0x0376F85C BL 0x220B4F0
	0x0376F860 LDP V1, V0, [X31]
	0x0376F864 LDP X22, X21, [X31 + 0x30]
	0x0376F868 LDR X30, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC72000
	005 Move X19, 0x9AD000
	006 Move W8, [X20+3804]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AD000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3804], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X0, [X8]
	025 Compare X0, 0
	026 JumpIfEqual {33}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Call InputManager.FlushDisconnectedDevices, X0
	032 Return 
	033 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputDevice GetDevice(System.String nameOrLayout)

Disassembly:
	0x0376F86C STP V1, V0, [X19]
	0x0376F870 LDP X20, X19, [X31 + 0x40]
	0x0376F874 ADD X31, X31, 0x50
	0x0376F878 RET
	0x0376F87C STR X30, [X31 - 0x20]!
	0x0376F880 STP X20, X19, [X31 + 0x10]
	0x0376F884 ADRP X20, 0xC71000
	0x0376F888 ADRP X19, 0x9AC000
	0x0376F88C LDRB W8, [X20 + 0xEF0]
	0x0376F890 LDR X19, [X19 + 0x270]
	0x0376F894 TBNZ X8, 0x0, 0x376F8AC
	0x0376F898 ADRP X0, 0x9AC000
	0x0376F89C LDR X0, [X0 + 0x270]
	0x0376F8A0 BL 0x1C16CF4
	0x0376F8A4 MOVZ W8, 0x1
	0x0376F8A8 STRB W8, [X20 + 0xEF0]
	0x0376F8AC LDR X0, [X19]
	0x0376F8B0 LDR W8, [X0 + 0xE0]
	0x0376F8B4 CBNZ W8, 0x376F8C0
	0x0376F8B8 BL 0x1C16DFC
	0x0376F8BC LDR X0, [X19]
	0x0376F8C0 LDR X8, [X0 + 0xB8]
	0x0376F8C4 LDR X0, [X8]
	0x0376F8C8 CBZ X0, 0x376F8DC
	0x0376F8CC LDP X20, X19, [X31 + 0x10]
	0x0376F8D0 MOV X1, X31
	0x0376F8D4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC72000
	006 Move X20, 0x9AD000
	007 Move W8, [X21+3805]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AD000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3805], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.TryGetDevice, X0, X1
	036 Return X0
	037 Call 0x1C17F20

Method: TDevice GetDevice()

Disassembly:
	0x0220C600 CBNZ X8, 0x220C634
	0x0220C604 ADRP X0, 0x1F0F000
	0x0220C608 LDR X0, [X0 + 0x270]
	0x0220C60C MOV X20, X1
	0x0220C610 BL 0x1C16CF4
	0x0220C614 ADRP X0, 0x1EE7000
	0x0220C618 LDR X0, [X0 + 0x6C0]
	0x0220C61C BL 0x1C16CF4
	0x0220C620 LDR X8, [X20 + 0x38]
	0x0220C624 CBNZ X8, 0x220C634
	0x0220C628 MOV X0, X20
	0x0220C62C BL 0x1C5C6E0
	0x0220C630 LDR X8, [X20 + 0x38]
	0x0220C634 ADRP X9, 0x1EE7000
	0x0220C638 LDR X9, [X9 + 0x6C0]
	0x0220C63C LDR X20, [X8]
	0x0220C640 LDR X0, [X9]
	0x0220C644 LDR W9, [X0 + 0xE0]
	0x0220C648 CBNZ W9, 0x220C650
	0x0220C64C BL 0x1C16DFC
	0x0220C650 MOV X0, X20
	0x0220C654 MOV X1, X31
	0x0220C658 BL 0x338C698
	0x0220C65C ADRP X8, 0x1F0F000
	0x0220C660 LDR X8, [X8 + 0x270]
	0x0220C664 MOV X20, X0
	0x0220C668 LDR X8, [X8]
	0x0220C66C LDR W9, [X8 + 0xE0]
	0x0220C670 CBNZ W9, 0x220C67C
	0x0220C674 MOV X0, X8
	0x0220C678 BL 0x1C16DFC
	0x0220C67C MOV X0, X20
	0x0220C680 MOV X1, X19
	0x0220C684 LDP X20, X19, [X31 + 0x10]
	0x0220C688 MOV X2, X31
	0x0220C68C LDR X30, [X31], #0x20
	0x0220C690 B 0x3770A34
	0x0220C694 STR X30, [X31 - 0x20]!
	0x0220C698 STP X20, X19, [X31 + 0x10]
	0x0220C69C LDR X8, [X1 + 0x38]
	0x0220C6A0 MOV X19, X0
	0x0220C6A4 CBNZ X8, 0x220C6D8
	0x0220C6A8 ADRP X0, 0x1F0F000
	0x0220C6AC LDR X0, [X0 + 0x270]
	0x0220C6B0 MOV X20, X1
	0x0220C6B4 BL 0x1C16CF4
	0x0220C6B8 ADRP X0, 0x1EE7000
	0x0220C6BC LDR X0, [X0 + 0x6C0]
	0x0220C6C0 BL 0x1C16CF4
	0x0220C6C4 LDR X8, [X20 + 0x38]
	0x0220C6C8 CBNZ X8, 0x220C6D8
	0x0220C6CC MOV X0, X20
	0x0220C6D0 BL 0x1C5C6E0
	0x0220C6D4 LDR X8, [X20 + 0x38]
	0x0220C6D8 ADRP X9, 0x1EE7000
	0x0220C6DC LDR X9, [X9 + 0x6C0]
	0x0220C6E0 LDR X20, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {20}
	008 Move X0, 0x1F10000
	009 Move X0, [X0+624]
	010 Call 0x1C17CF4
	011 Move X0, 0x1EE8000
	012 Move X0, [X0+1728]
	013 Call 0x1C17CF4
	014 Move X8, [X19+56]
	015 Compare X8, 0
	016 JumpIfNotEqual {20}
	017 Move X0, X19
	018 Call 0x1C5D6E0
	019 Move X8, [X19+56]
	020 Move X9, 0x1EE8000
	021 Move X9, [X9+1728]
	022 Move X20, [X8]
	023 Move X0, [X9]
	024 Move W9, [X0+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Call Type.GetTypeFromHandle, X0
	031 Move X8, 0x1F10000
	032 Move X8, [X8+624]
	033 Move X20, X0
	034 Move X8, [X8]
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Call InputSystem.GetDevice, X0
	043 Move X8, [X19+56]
	044 Move X20, X0
	045 Move X19, [X8+8]
	046 Move W8, [X19+309]
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {54}
	051 Move X0, X19
	052 Call 0x1C5D684
	053 Move X19, X0
	054 Compare X20, 0
	055 JumpIfEqual {64}
	056 Move X0, X20
	057 Move X1, X19
	058 Call 0x1C17E00
	059 Compare X0, 0
	060 JumpIfNotEqual {65}
	061 Move X0, X20
	062 Move X1, X19
	063 Call 0x1C181E0
	064 Move X0, X31
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Return X0

Method: UnityEngine.InputSystem.InputDevice GetDevice(System.Type type)

Disassembly:
	0x0376F8D8 B 0x37C26DC
	0x0376F8DC BL 0x1C16F20
	0x0376F8E0 MOV X0, X31
	0x0376F8E4 RET
	0x0376F8E8 RET
	0x0376F8EC SUB X31, X31, 0x40
	0x0376F8F0 STP X30, X23, [X31 + 0x10]
	0x0376F8F4 STP X22, X21, [X31 + 0x20]
	0x0376F8F8 STP X20, X19, [X31 + 0x30]
	0x0376F8FC ADRP X20, 0xC71000
	0x0376F900 ADRP X19, 0x9AC000
	0x0376F904 LDRB W8, [X20 + 0xEF1]
	0x0376F908 LDR X19, [X19 + 0x270]
	0x0376F90C TBNZ X8, 0x0, 0x376F984
	0x0376F910 ADRP X0, 0x9D7000
	0x0376F914 LDR X0, [X0 + 0x940]
	0x0376F918 BL 0x1C16CF4
	0x0376F91C ADRP X0, 0x9D7000
	0x0376F920 LDR X0, [X0 + 0x948]
	0x0376F924 BL 0x1C16CF4
	0x0376F928 ADRP X0, 0x9D7000
	0x0376F92C LDR X0, [X0 + 0x950]
	0x0376F930 BL 0x1C16CF4
	0x0376F934 ADRP X0, 0x9AC000
	0x0376F938 LDR X0, [X0 + 0x270]
	0x0376F93C BL 0x1C16CF4
	0x0376F940 ADRP X0, 0x9D7000
	0x0376F944 LDR X0, [X0 + 0x958]
	0x0376F948 BL 0x1C16CF4
	0x0376F94C ADRP X0, 0x9D7000
	0x0376F950 LDR X0, [X0 + 0x960]
	0x0376F954 BL 0x1C16CF4
	0x0376F958 ADRP X0, 0x9D7000
	0x0376F95C LDR X0, [X0 + 0x968]
	0x0376F960 BL 0x1C16CF4
	0x0376F964 ADRP X0, 0x9D7000
	0x0376F968 LDR X0, [X0 + 0x970]
	0x0376F96C BL 0x1C16CF4
	0x0376F970 ADRP X0, 0x9D7000
	0x0376F974 LDR X0, [X0 + 0x978]
	0x0376F978 BL 0x1C16CF4
	0x0376F97C MOVZ W8, 0x1
	0x0376F980 STRB W8, [X20 + 0xEF1]
	0x0376F984 LDR X0, [X19]
	0x0376F988 ADRP X19, 0x9D7000
	0x0376F98C ADRP X22, 0x9D7000
	0x0376F990 LDR W8, [X0 + 0xE0]
	0x0376F994 LDR X19, [X19 + 0x950]
	0x0376F998 LDR X22, [X22 + 0x978]
	0x0376F99C CBNZ W8, 0x376F9A4
	0x0376F9A0 BL 0x1C16DFC
	0x0376F9A4 LDR X0, [X19]
	0x0376F9A8 ADD X1, X31, 0x8
	0x0376F9AC STRB W31, [X31 + 0x8]
	0x0376F9B0 BL 0x1C16E04
	0x0376F9B4 LDR X8, [X22]
	0x0376F9B8 MOV X19, X0
	0x0376F9BC LDR W9, [X8 + 0xE0]
	0x0376F9C0 CBNZ W9, 0x376F9D0
	0x0376F9C4 MOV X0, X8
	0x0376F9C8 BL 0x1C16DFC
	0x0376F9CC LDR X8, [X22]
	0x0376F9D0 LDR X9, [X8 + 0xB8]
	0x0376F9D4 ADRP X23, 0x9D7000
	0x0376F9D8 LDR X20, [X9 + 0x8]
	0x0376F9DC LDR X23, [X23 + 0x958]
	0x0376F9E0 CBNZ X20, 0x376FA38
	0x0376F9E4 LDR W9, [X8 + 0xE0]
	0x0376F9E8 CBNZ W9, 0x376F9F8
	0x0376F9EC MOV X0, X8
	0x0376F9F0 BL 0x1C16DFC
	0x0376F9F4 LDR X8, [X22]
	0x0376F9F8 ADRP X9, 0x9D7000
	0x0376F9FC LDR X8, [X8 + 0xB8]
	0x0376FA00 LDR X9, [X9 + 0x940]
	0x0376FA04 LDR X21, [X8]
	0x0376FA08 LDR X0, [X9]
	0x0376FA0C BL 0x1C16F10
	0x0376FA10 ADRP X8, 0x9D7000
	0x0376FA14 LDR X8, [X8 + 0x968]
	0x0376FA18 MOV X1, X21
	0x0376FA1C MOV X3, X31
	0x0376FA20 MOV X20, X0
	0x0376FA24 LDR X2, [X8]
	0x0376FA28 BL 0x2D2CB14
	0x0376FA2C LDR X8, [X22]
	0x0376FA30 LDR X8, [X8 + 0xB8]
	0x0376FA34 STR X20, [X8 + 0x8]
	0x0376FA38 LDR X2, [X23]
	0x0376FA3C MOV X0, X19
	0x0376FA40 MOV X1, X20
	0x0376FA44 BL 0x222DBD4
	0x0376FA48 LDR X8, [X22]
	0x0376FA4C MOV X19, X0
	0x0376FA50 LDR W9, [X8 + 0xE0]
	0x0376FA54 CBNZ W9, 0x376FA64
	0x0376FA58 MOV X0, X8
	0x0376FA5C BL 0x1C16DFC
	0x0376FA60 LDR X8, [X22]
	0x0376FA64 LDR X9, [X8 + 0xB8]
	0x0376FA68 ADRP X23, 0x9D7000
	0x0376FA6C LDR X20, [X9 + 0x10]
	0x0376FA70 LDR X23, [X23 + 0x960]
	0x0376FA74 CBNZ X20, 0x376FACC
	0x0376FA78 LDR W9, [X8 + 0xE0]
	0x0376FA7C CBNZ W9, 0x376FA8C
	0x0376FA80 MOV X0, X8
	0x0376FA84 BL 0x1C16DFC
	0x0376FA88 LDR X8, [X22]
	0x0376FA8C ADRP X9, 0x9D7000
	0x0376FA90 LDR X8, [X8 + 0xB8]
	0x0376FA94 LDR X9, [X9 + 0x948]
	0x0376FA98 LDR X21, [X8]
	0x0376FA9C LDR X0, [X9]
	0x0376FAA0 BL 0x1C16F10
	0x0376FAA4 ADRP X8, 0x9D7000
	0x0376FAA8 LDR X8, [X8 + 0x970]
	0x0376FAAC MOV X1, X21
	0x0376FAB0 MOV X3, X31
	0x0376FAB4 MOV X20, X0
	0x0376FAB8 LDR X2, [X8]
	0x0376FABC BL 0x2D2F428
	0x0376FAC0 LDR X8, [X22]
	0x0376FAC4 LDR X8, [X8 + 0xB8]
	0x0376FAC8 STR X20, [X8 + 0x10]
	0x0376FACC LDR X2, [X23]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+80], D8
	003 Move [X31+88], X30
	004 Move [X31+96], X24
	005 Move [X31+104], X23
	006 Move [X31+112], X22
	007 Move [X31+120], X21
	008 Move [X31+128], X20
	009 Move [X31+136], X19
	010 Move X21, 0xC72000
	011 Move X19, 0x9AD000
	012 Move W8, [X21+3806]
	013 Move X19, [X19+624]
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0x9AD000
	020 Move X0, [X0+3856]
	021 Call 0x1C17CF4
	022 Move X0, 0x9AD000
	023 Move X0, [X0+3864]
	024 Call 0x1C17CF4
	025 Move X0, 0x9AD000
	026 Move X0, [X0+3872]
	027 Call 0x1C17CF4
	028 Move X0, 0x9AD000
	029 Move X0, [X0+624]
	030 Call 0x1C17CF4
	031 Move X0, 0x9AD000
	032 Move X0, [X0+3888]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+3806], W8
	036 Move X0, [X19]
	037 Move [X31+48], X31
	038 Move [X31+56], X31
	039 Move [X31+64], X31
	040 Move X19, 0x9AD000
	041 Move W8, [X0+224]
	042 Move X19, [X19+3888]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X23, 0x9AD000
	047 Move X24, 0x9AD000
	048 Move X22, 0x9AD000
	049 Move X23, [X23+3864]
	050 Move X24, [X24+3872]
	051 Move X22, [X22+3856]
	052 Call InputSystem.get_devices
	053 Move X9, [X19]
	054 Move [X31+32], X0
	055 Move [X31+40], X1
	056 Add X8, X31, 8
	057 Add X0, X31, 32
	058 Move X1, X9
	059 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 Move X8, [X31+24]
	062 Move X19, X31
	063 Move D8, -1
	064 Move [X31+3], V0
	065 Move [X31+64], X8
	066 Move X1, [X23]
	067 Add X0, X31, 48
	068 Call Enumerator<Object>.MoveNext, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {99}
	073 Move X1, [X24]
	074 Add X0, X31, 48
	075 Call Enumerator<Object>.get_Current, X0
	076 Compare X20, 0
	077 JumpIfEqual {113}
	078 Move X8, [X20]
	079 Move X21, X0
	080 Move X9, [X8+2152]
	081 Move X2, [X8+2160]
	082 Move X0, X20
	083 Move X1, X21
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {66}
	089 Compare X19, 0
	090 JumpIfEqual {95}
	091 Compare X21, 0
	092 JumpIfEqual {114}
	093 Move V0, [X21+296]
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Compare X21, 0
	096 JumpIfEqual {115}
	097 Move V8, [X21+296]
	098 Move X19, X21
	099 Move X1, [X22]
	100 Add X0, X31, 48
	101 Call Enumerator<Object>.Dispose, X0
	102 Move X0, X19
	103 Move X20, [X31+128]
	104 Move X19, [X31+136]
	105 Move X22, [X31+112]
	106 Move X21, [X31+120]
	107 Move X24, [X31+96]
	108 Move X23, [X31+104]
	109 Move X30, [X31+88]
	110 Move V8, [X31+80]
	111 Add X31, X31, 144
	112 Return X0
	113 Call 0x1C17F20
	114 Call 0x1C17F20
	115 Call 0x1C17F20
	116 Move X19, X31
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Call 0x3EB2AD0
	119 Move X20, [X0]
	120 Call 0x3EB2AE0
	121 Move X1, [X22]
	122 Add X0, X31, 48
	123 Call Enumerator<Object>.Dispose, X0
	124 Compare X20, 0
	125 JumpIfEqual {102}
	126 Move X0, X20
	127 Call 0x1C17F18
	128 Move X19, X0
	129 Move X20, X31
	130 Move X19, X0
	131 Move X1, [X22]
	132 Add X0, X31, 48
	133 Call Enumerator<Object>.Dispose, X0
	134 Compare X20, 0
	135 JumpIfNotEqual {138}
	136 Move X0, X19
	137 Call 0x1D2D690
	138 Move X0, X20
	139 Call 0x1C17F18
	140 Call 0x1991590

Method: TDevice GetDevice(UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x0220C6E4 LDR X0, [X9]
	0x0220C6E8 LDR W9, [X0 + 0xE0]
	0x0220C6EC CBNZ W9, 0x220C6F4
	0x0220C6F0 BL 0x1C16DFC
	0x0220C6F4 MOV X0, X20
	0x0220C6F8 MOV X1, X31
	0x0220C6FC BL 0x338C698
	0x0220C700 ADRP X8, 0x1F0F000
	0x0220C704 LDR X8, [X8 + 0x270]
	0x0220C708 MOV X20, X0
	0x0220C70C LDR X8, [X8]
	0x0220C710 LDR W9, [X8 + 0xE0]
	0x0220C714 CBNZ W9, 0x220C720
	0x0220C718 MOV X0, X8
	0x0220C71C BL 0x1C16DFC
	0x0220C720 MOV X0, X20
	0x0220C724 MOV X1, X19
	0x0220C728 LDP X20, X19, [X31 + 0x10]
	0x0220C72C MOV X2, X31
	0x0220C730 LDR X30, [X31], #0x20
	0x0220C734 B 0x3770A34
	0x0220C738 STR X30, [X31 - 0x30]!
	0x0220C73C STP X22, X21, [X31 + 0x10]
	0x0220C740 STP X20, X19, [X31 + 0x20]
	0x0220C744 LDR X8, [X3 + 0x38]
	0x0220C748 MOV X19, X2
	0x0220C74C MOV X20, X1
	0x0220C750 MOV X21, X0
	0x0220C754 CBNZ X8, 0x220C788
	0x0220C758 ADRP X0, 0x1F0F000
	0x0220C75C LDR X0, [X0 + 0x270]
	0x0220C760 MOV X22, X3
	0x0220C764 BL 0x1C16CF4
	0x0220C768 ADRP X0, 0x1EE7000
	0x0220C76C LDR X0, [X0 + 0x6C0]
	0x0220C770 BL 0x1C16CF4
	0x0220C774 LDR X8, [X22 + 0x38]
	0x0220C778 CBNZ X8, 0x220C788
	0x0220C77C MOV X0, X22
	0x0220C780 BL 0x1C5C6E0
	0x0220C784 LDR X8, [X22 + 0x38]
	0x0220C788 ADRP X9, 0x1EE7000
	0x0220C78C LDR X9, [X9 + 0x6C0]
	0x0220C790 LDR X22, [X8]
	0x0220C794 LDR X0, [X9]
	0x0220C798 LDR W9, [X0 + 0xE0]
	0x0220C79C CBNZ W9, 0x220C7A4
	0x0220C7A0 BL 0x1C16DFC
	0x0220C7A4 MOV X0, X22
	0x0220C7A8 MOV X1, X31
	0x0220C7AC BL 0x338C698
	0x0220C7B0 ADRP X8, 0x1F0F000
	0x0220C7B4 LDR X8, [X8 + 0x270]
	0x0220C7B8 MOV X22, X0
	0x0220C7BC LDR X8, [X8]
	0x0220C7C0 LDR W9, [X8 + 0xE0]
	0x0220C7C4 CBNZ W9, 0x220C7D0
	0x0220C7C8 MOV X0, X8
	0x0220C7CC BL 0x1C16DFC
	0x0220C7D0 MOV X0, X22
	0x0220C7D4 MOV X1, X21
	0x0220C7D8 MOV X2, X20
	0x0220C7DC MOV X3, X19
	0x0220C7E0 LDP X20, X19, [X31 + 0x20]
	0x0220C7E4 LDP X22, X21, [X31 + 0x10]
	0x0220C7E8 MOV X4, X31
	0x0220C7EC LDR X30, [X31], #0x30
	0x0220C7F0 B 0x376CB40
	0x0220C7F4 STP X30, X21, [X31 - 0x20]!
	0x0220C7F8 STP X20, X19, [X31 + 0x10]
	0x0220C7FC LDR X8, [X1 + 0x38]
	0x0220C800 MOV X20, X1
	0x0220C804 MOV X19, X0
	0x0220C808 CBNZ X8, 0x220C834
	0x0220C80C ADRP X0, 0x1F0F000
	0x0220C810 LDR X0, [X0 + 0x270]
	0x0220C814 BL 0x1C16CF4
	0x0220C818 ADRP X0, 0x1EE7000
	0x0220C81C LDR X0, [X0 + 0x6C0]
	0x0220C820 BL 0x1C16CF4
	0x0220C824 LDR X8, [X20 + 0x38]
	0x0220C828 CBNZ X8, 0x220C834
	0x0220C82C MOV X0, X20
	0x0220C830 BL 0x1C5C6E0
	0x0220C834 ADRP X21, 0x1F0F000
	0x0220C838 LDR X21, [X21 + 0x270]
	0x0220C83C LDR X0, [X21]
	0x0220C840 LDR W8, [X0 + 0xE0]
	0x0220C844 CBNZ W8, 0x220C850
	0x0220C848 BL 0x1C16DFC
	0x0220C84C LDR X0, [X21]
	0x0220C850 ADRP X9, 0x1EE7000
	0x0220C854 LDR X8, [X0 + 0xB8]
	0x0220C858 LDR X9, [X9 + 0x6C0]
	0x0220C85C LDR X0, [X9]
	0x0220C860 LDR X9, [X20 + 0x38]
	0x0220C864 LDR X20, [X8]
	0x0220C868 LDR W8, [X0 + 0xE0]
	0x0220C86C LDR X21, [X9]
	0x0220C870 CBNZ W8, 0x220C878
	0x0220C874 BL 0x1C16DFC
	0x0220C878 MOV X0, X21
	0x0220C87C MOV X1, X31
	0x0220C880 BL 0x338C698
	0x0220C884 CBZ X20, 0x220C8A4
	0x0220C888 MOV X1, X0
	0x0220C88C MOV X0, X20
	0x0220C890 MOV X2, X19
	0x0220C894 LDP X20, X19, [X31 + 0x10]
	0x0220C898 MOV X3, X31
	0x0220C89C LDP X30, X21, [X31], #0x20
	0x0220C8A0 B 0x37C3F80
	0x0220C8A4 BL 0x1C16F20
	0x0220C8A8 STP X30, X21, [X31 - 0x20]!
	0x0220C8AC STP X20, X19, [X31 + 0x10]
	0x0220C8B0 LDR X8, [X1 + 0x38]
	0x0220C8B4 MOV X20, X1
	0x0220C8B8 MOV X19, X0
	0x0220C8BC CBNZ X8, 0x220C8DC
	0x0220C8C0 ADRP X0, 0x1F0F000
	0x0220C8C4 LDR X0, [X0 + 0x270]
	0x0220C8C8 BL 0x1C16CF4
	0x0220C8CC LDR X8, [X20 + 0x38]
	0x0220C8D0 CBNZ X8, 0x220C8DC
	0x0220C8D4 MOV X0, X20
	0x0220C8D8 BL 0x1C5C6E0
	0x0220C8DC ADRP X21, 0x1F0F000
	0x0220C8E0 LDR X21, [X21 + 0x270]
	0x0220C8E4 LDR X0, [X21]
	0x0220C8E8 LDR W8, [X0 + 0xE0]
	0x0220C8EC CBNZ W8, 0x220C8F8
	0x0220C8F0 BL 0x1C16DFC
	0x0220C8F4 LDR X0, [X21]
	0x0220C8F8 LDR X8, [X0 + 0xB8]
	0x0220C8FC LDR X0, [X8]
	0x0220C900 CBZ X0, 0x220C91C
	0x0220C904 LDR X8, [X20 + 0x38]
	0x0220C908 MOV X1, X19
	0x0220C90C LDP X20, X19, [X31 + 0x10]
	0x0220C910 LDR X2, [X8]
	0x0220C914 LDP X30, X21, [X31], #0x20
	0x0220C918 B 0x22086E8
	0x0220C91C BL 0x1C16F20
	0x0220C920 STR X30, [X31 - 0x20]!
	0x0220C924 STP X20, X19, [X31 + 0x10]
	0x0220C928 LDR X8, [X1 + 0x38]
	0x0220C92C MOV X19, X0
	0x0220C930 CBNZ X8, 0x220C964
	0x0220C934 ADRP X0, 0x1F0F000
	0x0220C938 LDR X0, [X0 + 0x270]
	0x0220C93C MOV X20, X1
	0x0220C940 BL 0x1C16CF4
	0x0220C944 ADRP X0, 0x1EE7000
	0x0220C948 LDR X0, [X0 + 0x6C0]
	0x0220C94C BL 0x1C16CF4
	0x0220C950 LDR X8, [X20 + 0x38]
	0x0220C954 CBNZ X8, 0x220C964
	0x0220C958 MOV X0, X20
	0x0220C95C BL 0x1C5C6E0
	0x0220C960 LDR X8, [X20 + 0x38]
	0x0220C964 ADRP X9, 0x1EE7000
	0x0220C968 LDR X9, [X9 + 0x6C0]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], D8
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move X8, [X2+56]
	015 Move X19, X2
	016 Move X20, X1
	017 Move X21, X0
	018 Compare X8, 0
	019 JumpIfNotEqual {43}
	020 Move X0, 0x1F10000
	021 Move X0, [X0+3856]
	022 Call 0x1C17CF4
	023 Move X0, 0x1F10000
	024 Move X0, [X0+3864]
	025 Call 0x1C17CF4
	026 Move X0, 0x1F10000
	027 Move X0, [X0+3872]
	028 Call 0x1C17CF4
	029 Move X0, 0x1F10000
	030 Move X0, [X0+624]
	031 Call 0x1C17CF4
	032 Move X0, 0x1F10000
	033 Move X0, [X0+3880]
	034 Call 0x1C17CF4
	035 Move X0, 0x1F10000
	036 Move X0, [X0+3888]
	037 Call 0x1C17CF4
	038 Move X8, [X19+56]
	039 Compare X8, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X19
	042 Call 0x1C5D6E0
	043 Move X8, 0x1F10000
	044 Move X8, [X8+624]
	045 Move [X31+48], X31
	046 Move [X31+56], X31
	047 Move [X31+64], X31
	048 Move X0, [X8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X31
	054 Call InputSystem.get_devices
	055 Move X8, 0x1F10000
	056 Move X8, [X8+3888]
	057 Move [X31+32], X0
	058 Move [X31+40], X1
	059 Add X0, X31, 32
	060 Move X9, [X8]
	061 Add X8, X31, 8
	062 Move X1, X9
	063 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 Move X8, [X31+24]
	066 Move X26, 0x1F10000
	067 Move X27, 0x1F10000
	068 Move X26, [X26+3864]
	069 Move X27, [X27+3872]
	070 Move [X31+3], V1
	071 Move [X31+64], X8
	072 Move X28, 0x1F10000
	073 Move X28, [X28+3880]
	074 Move X23, X31
	075 Move D0, -1
	076 Move V8, V0
	077 Move X22, X23
	078 Move X1, [X26]
	079 Add X0, X31, 48
	080 Call Enumerator<Object>.MoveNext, X0
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {135}
	085 Move X1, [X27]
	086 Add X0, X31, 48
	087 Call Enumerator<Object>.get_Current, X0
	088 Move X8, [X19+56]
	089 Move X23, X0
	090 Move X1, [X8]
	091 Move W8, [X1+309]
	092 Move TEMP, X8
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfEqual {99}
	096 Move X0, X1
	097 Call 0x1C5D684
	098 Move X1, X0
	099 Move X0, X23
	100 Call 0x1C17E00
	101 Move X8, [X19+56]
	102 Move X24, X0
	103 Move X25, [X8]
	104 Move W8, [X25+309]
	105 Move TEMP, X8
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {112}
	109 Move X0, X25
	110 Call 0x1C5D684
	111 Move X25, X0
	112 Compare X24, 0
	113 JumpIfEqual {78}
	114 Move X0, X24
	115 Move X1, X25
	116 Call 0x1C17E00
	117 Move X23, X0
	118 Compare X0, 0
	119 JumpIfEqual {155}
	120 Move X0, X23
	121 Move X1, X31
	122 Call InputControl.get_usages, X0
	123 Move X4, [X28]
	124 Move X2, X21
	125 Move X3, X20
	126 Call 0x223D25C, X0, X1
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {78}
	131 Move V0, [X23+296]
	132 Compare X22, 0
	133 JumpIfEqual {76}
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 Move X8, 0x1F10000
	136 Move X8, [X8+3856]
	137 Add X0, X31, 48
	138 Move X1, [X8]
	139 Call Enumerator<Object>.Dispose, X0
	140 Move X0, X22
	141 Move X20, [X31+160]
	142 Move X19, [X31+168]
	143 Move X22, [X31+144]
	144 Move X21, [X31+152]
	145 Move X24, [X31+128]
	146 Move X23, [X31+136]
	147 Move X26, [X31+112]
	148 Move X25, [X31+120]
	149 Move X28, [X31+96]
	150 Move X27, [X31+104]
	151 Move X30, [X31+88]
	152 Move V8, [X31+80]
	153 Add X31, X31, 176
	154 Return X0
	155 Move X0, X24
	156 Move X1, X25
	157 Call 0x1C181E0
	158 Move X19, X0
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X0, X19
	161 Call 0x3EB2AD0
	162 Move X20, [X0]
	163 Call 0x3EB2AE0
	164 Move X8, 0x1F10000
	165 Move X8, [X8+3856]
	166 Add X0, X31, 48
	167 Move X1, [X8]
	168 Call Enumerator<Object>.Dispose, X0
	169 Compare X20, 0
	170 JumpIfEqual {140}
	171 Move X0, X20
	172 Call 0x1C17F18
	173 Move X20, X31
	174 Move X19, X0
	175 Move X8, 0x1F10000
	176 Move X8, [X8+3856]
	177 Move X1, [X8]
	178 Add X0, X31, 48
	179 Call Enumerator<Object>.Dispose, X0
	180 Compare X20, 0
	181 JumpIfNotEqual {184}
	182 Move X0, X19
	183 Call 0x1D2D690
	184 Move X0, X20
	185 Call 0x1C17F18
	186 Call 0x1991590

Method: TDevice GetDevice(System.String usage)

Disassembly:
	0x0220C96C LDR X20, [X8]
	0x0220C970 LDR X0, [X9]
	0x0220C974 LDR W9, [X0 + 0xE0]
	0x0220C978 CBNZ W9, 0x220C980
	0x0220C97C BL 0x1C16DFC
	0x0220C980 MOV X0, X20
	0x0220C984 MOV X1, X31
	0x0220C988 BL 0x338C698
	0x0220C98C ADRP X8, 0x1F0F000
	0x0220C990 LDR X8, [X8 + 0x270]
	0x0220C994 MOV X20, X0
	0x0220C998 LDR X8, [X8]
	0x0220C99C LDR W9, [X8 + 0xE0]
	0x0220C9A0 CBNZ W9, 0x220C9AC
	0x0220C9A4 MOV X0, X8
	0x0220C9A8 BL 0x1C16DFC
	0x0220C9AC MOV X0, X20
	0x0220C9B0 MOV X1, X19
	0x0220C9B4 LDP X20, X19, [X31 + 0x10]
	0x0220C9B8 MOV X2, X31
	0x0220C9BC LDR X30, [X31], #0x20
	0x0220C9C0 B 0x376D5AC
	0x0220C9C4 STR X30, [X31 - 0x20]!
	0x0220C9C8 STP X20, X19, [X31 + 0x10]
	0x0220C9CC LDR X8, [X1 + 0x38]
	0x0220C9D0 MOV X19, X0
	0x0220C9D4 CBNZ X8, 0x220CA08
	0x0220C9D8 ADRP X0, 0x1F0F000
	0x0220C9DC LDR X0, [X0 + 0x270]
	0x0220C9E0 MOV X20, X1
	0x0220C9E4 BL 0x1C16CF4
	0x0220C9E8 ADRP X0, 0x1EE7000
	0x0220C9EC LDR X0, [X0 + 0x6C0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X8, [X1+56]
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {18}
	010 Move X0, 0x1F10000
	011 Move X0, [X0+624]
	012 Call 0x1C17CF4
	013 Move X8, [X19+56]
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Add X0, X31, 0
	019 Move X1, X20
	020 Move X2, X31
	021 Move [X31], X31
	022 Move [X31+8], X31
	023 Call InternedString..ctor, X0, X1
	024 Move X8, 0x1F10000
	025 Move X8, [X8+624]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X8, [X19+56]
	032 Move X0, [X31]
	033 Move X1, [X31+8]
	034 Move X2, [X8]
	035 Call 0x220C6E4, X0
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Add X31, X31, 48
	040 Return X0

Method: UnityEngine.InputSystem.InputDevice GetDeviceById(System.Int32 deviceId)

Disassembly:
	0x0376FAD0 MOV X0, X19
	0x0376FAD4 MOV X1, X20
	0x0376FAD8 BL 0x222DF14
	0x0376FADC LDP X20, X19, [X31 + 0x30]
	0x0376FAE0 LDP X22, X21, [X31 + 0x20]
	0x0376FAE4 LDP X30, X23, [X31 + 0x10]
	0x0376FAE8 ADD X31, X31, 0x40
	0x0376FAEC RET
	0x0376FAF0 STR X30, [X31 - 0x20]!
	0x0376FAF4 STP X20, X19, [X31 + 0x10]
	0x0376FAF8 ADRP X19, 0xC71000
	0x0376FAFC LDRB W8, [X19 + 0xEF2]
	0x0376FB00 STR X0, [X31 + 0x8]
	0x0376FB04 TBNZ X8, 0x0, 0x376FB1C
	0x0376FB08 ADRP X0, 0x9AC000
	0x0376FB0C LDR X0, [X0 + 0x270]
	0x0376FB10 BL 0x1C16CF4
	0x0376FB14 MOVZ W8, 0x1
	0x0376FB18 STRB W8, [X19 + 0xEF2]
	0x0376FB1C ADD X0, X31, 0x8
	0x0376FB20 MOV X1, X31
	0x0376FB24 BL 0x37F80A4
	0x0376FB28 TBZ X0, 0x0, 0x376FB6C
	0x0376FB2C ADRP X19, 0x9AC000
	0x0376FB30 LDR X19, [X19 + 0x270]
	0x0376FB34 LDR X0, [X19]
	0x0376FB38 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC72000
	006 Move X20, 0x9AD000
	007 Move W8, [X21+3807]
	008 Move X20, [X20+624]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AD000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3807], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move W1, W19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.TryGetDeviceById, X0, X1
	036 Return X0
	037 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.InputSystem.Layouts.InputDeviceDescription> GetUnsupportedDevices()

Disassembly:
	0x0376FB3C CBNZ W8, 0x376FB48
	0x0376FB40 BL 0x1C16DFC
	0x0376FB44 LDR X0, [X19]
	0x0376FB48 LDR X8, [X0 + 0xB8]
	0x0376FB4C LDR X0, [X8]
	0x0376FB50 CBZ X0, 0x376FBC8
	0x0376FB54 LDR X1, [X31 + 0x8]
	0x0376FB58 MOV X2, X31
	0x0376FB5C BL 0x37BCEB8
	0x0376FB60 LDP X20, X19, [X31 + 0x10]
	0x0376FB64 LDR X30, [X31], #0x20
	0x0376FB68 RET
	0x0376FB6C ADRP X0, 0x98C000
	0x0376FB70 LDR X0, [X0 + 0x578]
	0x0376FB74 BL 0x1C16D08
	0x0376FB78 BL 0x1C16F10
	0x0376FB7C MOV X19, X0
	0x0376FB80 ADRP X0, 0x9D7000
	0x0376FB84 LDR X0, [X0 + 0x980]
	0x0376FB88 BL 0x1C16D08
	0x0376FB8C MOV X20, X0
	0x0376FB90 ADRP X0, 0x9AC000
	0x0376FB94 LDR X0, [X0 + 0xD70]
	0x0376FB98 BL 0x1C16D08
	0x0376FB9C MOV X2, X0
	0x0376FBA0 MOV X0, X19
	0x0376FBA4 MOV X1, X20
	0x0376FBA8 MOV X3, X31
	0x0376FBAC BL 0x330E16C
	0x0376FBB0 ADRP X0, 0x9D7000
	0x0376FBB4 LDR X0, [X0 + 0x988]
	0x0376FBB8 BL 0x1C16D08
	0x0376FBBC MOV X1, X0
	0x0376FBC0 MOV X0, X19
	0x0376FBC4 BL 0x1C16DEC
	0x0376FBC8 BL 0x1C16F20
	0x0376FBCC SUB X31, X31, 0x70
	0x0376FBD0 STR D8, [X31 + 0x40]
	0x0376FBD4 STP X30, X21, [X31 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC72000
	007 Move X22, 0x9D8000
	008 Move X19, 0x9D8000
	009 Move X20, 0x9AD000
	010 Move W8, [X21+3808]
	011 Move X22, [X22+2288]
	012 Move X19, [X19+2296]
	013 Move X20, [X20+624]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x9AD000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move X0, 0x9D8000
	022 Move X0, [X0+2296]
	023 Call 0x1C17CF4
	024 Move X0, 0x9D8000
	025 Move X0, [X0+2288]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3808], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call List`1<InputDeviceDescription>..ctor, X0
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X19
	040 Call InputSystem.GetUnsupportedDevices, X0
	041 Move X0, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return X0

Method: System.Int32 GetUnsupportedDevices(System.Collections.Generic.List`1<UnityEngine.InputSystem.Layouts.InputDeviceDescription> descriptions)

Disassembly:
	0x0376FBD8 STP X20, X19, [X31 + 0x60]
	0x0376FBDC MRS X21, 0xC000
	0x0376FBE0 LDR X8, [X21 + 0x28]
	0x0376FBE4 ADRP X20, 0xC71000
	0x0376FBE8 MOV V8.16B, V0.16B
	0x0376FBEC MOV X19, X0
	0x0376FBF0 STR X8, [X31 + 0x38]
	0x0376FBF4 LDRB W8, [X20 + 0xEF3]
	0x0376FBF8 TBNZ X8, 0x0, 0x376FC34
	0x0376FBFC ADRP X0, 0x9AC000
	0x0376FC00 LDR X0, [X0 + 0xED0]
	0x0376FC04 BL 0x1C16CF4
	0x0376FC08 ADRP X0, 0x9D7000
	0x0376FC0C LDR X0, [X0 + 0x990]
	0x0376FC10 BL 0x1C16CF4
	0x0376FC14 ADRP X0, 0x9AC000
	0x0376FC18 LDR X0, [X0 + 0xEC8]
	0x0376FC1C BL 0x1C16CF4
	0x0376FC20 ADRP X0, 0x9AC000
	0x0376FC24 LDR X0, [X0 + 0x270]
	0x0376FC28 BL 0x1C16CF4
	0x0376FC2C MOVZ W8, 0x1
	0x0376FC30 STRB W8, [X20 + 0xEF3]
	0x0376FC34 STP X31, X31, [X31 + 0x20]
	0x0376FC38 STR W31, [X31 + 0x30]
	0x0376FC3C CBZ X19, 0x376FD5C
	0x0376FC40 LDR W0, [X19 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC72000
	006 Move X20, 0x9AD000
	007 Move W8, [X21+3809]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AD000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3809], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.GetUnsupportedDevices, X0, X1
	036 Return X0
	037 Call 0x1C17F20

Method: System.Void EnableDevice(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x0376FC44 CBZ W0, 0x376FD90
	0x0376FC48 ADRP X8, 0x9AC000
	0x0376FC4C LDR X8, [X8 + 0xEC8]
	0x0376FC50 FCMP D8, 0x0
	0x0376FC54 LDR X8, [X8]
	0x0376FC58 LDR X8, [X8 + 0xB8]
	0x0376FC5C B.PL 0x376FCB0
	0x0376FC60 LDR X20, [X8]
	0x0376FC64 CBZ X20, 0x376FD58
	0x0376FC68 ADRP X10, 0x9AC000
	0x0376FC6C LDR X8, [X20]
	0x0376FC70 LDR X10, [X10 + 0xED0]
	0x0376FC74 LDRH W9, [X8 + 0x12E]
	0x0376FC78 LDR X1, [X10]
	0x0376FC7C CBZ X9, 0x376FCA0
	0x0376FC80 LDR X10, [X8 + 0xB0]
	0x0376FC84 ADD X10, X10, 0x8
	0x0376FC88 LDUR X11, [X10 - 0x8]
	0x0376FC8C CMP X11, X1
	0x0376FC90 B.EQ 0x376FCBC
	0x0376FC94 SUBS X9, X9, 0x1
	0x0376FC98 ADD X10, X10, 0x10
	0x0376FC9C B.NE 0x376FC88
	0x0376FCA0 MOVZ W2, 0x13
	0x0376FCA4 MOV X0, X20
	0x0376FCA8 BL 0x1C5C788
	0x0376FCAC B 0x376FCCC
	0x0376FCB0 LDR V0, [X8 + 0x8]
	0x0376FCB4 FADD D0, D0, D8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC72000
	006 Move X20, 0x9AD000
	007 Move W8, [X21+3810]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AD000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3810], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move W2, 1
	033 Move W3, W31
	034 Move X4, X31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call InputManager.EnableOrDisableDevice, X0, X1, X2, X3
	038 Return 
	039 Call 0x1C17F20

Method: System.Void DisableDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean keepSendingEvents = False)

Disassembly:
	0x0376FCB8 B 0x376FCDC
	0x0376FCBC LDR W9, [X10]
	0x0376FCC0 ADD W9, W9, 0x13
	0x0376FCC4 ADD X8, X8, W9, 0x4, SXTW
	0x0376FCC8 ADD X0, X8, 0x138
	0x0376FCCC LDP X8, X1, [X0]
	0x0376FCD0 MOV X0, X20
	0x0376FCD4 BLR X8
	0x0376FCD8 LDR W0, [X19 + 0xE0]
	0x0376FCDC ADRP X19, 0x9AC000
	0x0376FCE0 LDR X19, [X19 + 0x270]
	0x0376FCE4 ADD X8, X31, 0x8
	0x0376FCE8 MOV X1, X31
	0x0376FCEC BL 0x3800CDC
	0x0376FCF0 LDUR V0, [X31 + 0x8]
	0x0376FCF4 LDR W8, [X31 + 0x18]
	0x0376FCF8 LDR X0, [X19]
	0x0376FCFC STR V0, [X31 + 0x2]
	0x0376FD00 STR W8, [X31 + 0x30]
	0x0376FD04 LDR W8, [X0 + 0xE0]
	0x0376FD08 CBNZ W8, 0x376FD14
	0x0376FD0C BL 0x1C16DFC
	0x0376FD10 LDR X0, [X19]
	0x0376FD14 LDR X8, [X0 + 0xB8]
	0x0376FD18 LDR X0, [X8]
	0x0376FD1C CBZ X0, 0x376FD58
	0x0376FD20 ADRP X8, 0x9D7000
	0x0376FD24 LDR X8, [X8 + 0x990]
	0x0376FD28 ADD X1, X31, 0x20
	0x0376FD2C LDR X2, [X8]
	0x0376FD30 BL 0x2208680
	0x0376FD34 LDR X8, [X21 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC72000
	007 Move X21, 0x9AD000
	008 Move W8, [X22+3811]
	009 Move X21, [X21+624]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9AD000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3811], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 And W3, W20, 1
	032 Move X1, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W2, W31
	038 Move X4, X31
	039 Move X30, [X31+48]
	040 Call InputManager.EnableOrDisableDevice, X0, X1, X2, X3
	041 Return 
	042 Call 0x1C17F20

Method: System.Boolean TrySyncDevice(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x0376FD38 LDR X9, [X31 + 0x38]
	0x0376FD3C CMP X8, X9
	0x0376FD40 B.NE 0x376FDD8
	0x0376FD44 LDP X20, X19, [X31 + 0x60]
	0x0376FD48 LDP X30, X21, [X31 + 0x50]
	0x0376FD4C LDR V8, [X31 + 0x40]
	0x0376FD50 ADD X31, X31, 0x70
	0x0376FD54 RET
	0x0376FD58 BL 0x1C16F20
	0x0376FD5C ADRP X0, 0x989000
	0x0376FD60 LDR X0, [X0 + 0x528]
	0x0376FD64 BL 0x1C16D08
	0x0376FD68 BL 0x1C16F10
	0x0376FD6C MOV X19, X0
	0x0376FD70 ADRP X0, 0x9AC000
	0x0376FD74 LDR X0, [X0 + 0xD20]
	0x0376FD78 BL 0x1C16D08
	0x0376FD7C MOV X1, X0
	0x0376FD80 MOV X0, X19
	0x0376FD84 MOV X2, X31
	0x0376FD88 BL 0x330E100
	0x0376FD8C B 0x376FDC0
	0x0376FD90 ADRP X0, 0x984000
	0x0376FD94 LDR X0, [X0 + 0x5B0]
	0x0376FD98 BL 0x1C16D08
	0x0376FD9C BL 0x1C16F10
	0x0376FDA0 MOV X19, X0
	0x0376FDA4 ADRP X0, 0x9D7000
	0x0376FDA8 LDR X0, [X0 + 0x998]
	0x0376FDAC BL 0x1C16D08
	0x0376FDB0 MOV X1, X0
	0x0376FDB4 MOV X0, X19
	0x0376FDB8 MOV X2, X31
	0x0376FDBC BL 0x337DF1C
	0x0376FDC0 ADRP X0, 0x9D7000
	0x0376FDC4 LDR X0, [X0 + 0x9A0]
	0x0376FDC8 BL 0x1C16D08
	0x0376FDCC MOV X1, X0
	0x0376FDD0 MOV X0, X19
	0x0376FDD4 BL 0x1C16DEC
	0x0376FDD8 BL 0x3EB1B20
	0x0376FDDC SUB X31, X31, 0x70
	0x0376FDE0 STR D8, [X31 + 0x40]
	0x0376FDE4 STR X30, [X31 + 0x48]
	0x0376FDE8 STP X22, X21, [X31 + 0x50]
	0x0376FDEC STP X20, X19, [X31 + 0x60]
	0x0376FDF0 MRS X22, 0xC000
	0x0376FDF4 LDR X8, [X22 + 0x28]
	0x0376FDF8 ADRP X21, 0xC71000
	0x0376FDFC MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {13}
	006 Move W8, [X0+232]
	007 Add W31, W8, 1
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Call InputDevice.RequestSync, X0
	012 Return X0
	013 Move X0, 0x98A000
	014 Move X0, [X0+1320]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x9AD000
	019 Move X0, [X0+3360]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call ArgumentNullException..ctor, X0, X1
	025 Move X0, 0x9D8000
	026 Move X0, [X0+2304]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC
	031 Move X8, 0x9D8000
	032 Move X8, [X8+2312]
	033 Move X19, X0
	034 Move X0, X8
	035 Call 0x1C17D08
	036 Move X1, X19
	037 Move X2, X31
	038 Call String.Format, X0, X1
	039 Move X19, X0
	040 Move X0, 0x985000
	041 Move X0, [X0+1456]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X1, X19
	045 Move X2, X31
	046 Move X20, X0
	047 Call InvalidOperationException..ctor, X0, X1
	048 Move X0, 0x9D8000
	049 Move X0, [X0+2304]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X20
	053 Call 0x1C17DEC

Method: System.Void ResetDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean alsoResetDontResetControls = False)

Disassembly:
	0x0376FE88 LDR X10, [X10 + 0xED0]
	0x0376FE8C LDRH W9, [X8 + 0x12E]
	0x0376FE90 LDR X1, [X10]
	0x0376FE94 CBZ X9, 0x376FEB8
	0x0376FE98 LDR X10, [X8 + 0xB0]
	0x0376FE9C ADD X10, X10, 0x8
	0x0376FEA0 LDUR X11, [X10 - 0x8]
	0x0376FEA4 CMP X11, X1
	0x0376FEA8 B.EQ 0x376FED4
	0x0376FEAC SUBS X9, X9, 0x1
	0x0376FEB0 ADD X10, X10, 0x10
	0x0376FEB4 B.NE 0x376FEA0
	0x0376FEB8 MOVZ W2, 0x13
	0x0376FEBC MOV X0, X21
	0x0376FEC0 BL 0x1C5C788
	0x0376FEC4 B 0x376FEE4
	0x0376FEC8 LDR V0, [X8 + 0x8]
	0x0376FECC FADD D0, D0, D8
	0x0376FED0 B 0x376FEF4
	0x0376FED4 LDR W9, [X10]
	0x0376FED8 ADD W9, W9, 0x13
	0x0376FEDC ADD X8, X8, W9, 0x4, SXTW
	0x0376FEE0 ADD X0, X8, 0x138
	0x0376FEE4 LDP X8, X1, [X0]
	0x0376FEE8 MOV X0, X21
	0x0376FEEC BLR X8
	0x0376FEF0 LDR W0, [X20 + 0xE0]
	0x0376FEF4 ADRP X20, 0x9AC000
	0x0376FEF8 LDR X20, [X20 + 0x270]
	0x0376FEFC ADD X8, X31, 0x8
	0x0376FF00 MOV W1, W19
	0x0376FF04 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC72000
	007 Move X21, 0x9AD000
	008 Move W8, [X22+3812]
	009 Move X21, [X21+624]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9AD000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3812], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 And W2, W20, 1
	032 Move X1, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X3, X31
	038 Move X4, X31
	039 Move X30, [X31+48]
	040 Call InputManager.ResetDevice, X0, X1, X2, X3
	041 Return 
	042 Call 0x1C17F20

Method: System.Boolean TryResetDevice(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x0376FF08 BL 0x3807720
	0x0376FF0C LDUR V0, [X31 + 0x8]
	0x0376FF10 LDR X8, [X31 + 0x18]
	0x0376FF14 LDR X0, [X20]
	0x0376FF18 STR V0, [X31 + 0x2]
	0x0376FF1C STR X8, [X31 + 0x30]
	0x0376FF20 LDR W8, [X0 + 0xE0]
	0x0376FF24 CBNZ W8, 0x376FF30
	0x0376FF28 BL 0x1C16DFC
	0x0376FF2C LDR X0, [X20]
	0x0376FF30 LDR X8, [X0 + 0xB8]
	0x0376FF34 LDR X0, [X8]
	0x0376FF38 CBZ X0, 0x376FF78
	0x0376FF3C ADRP X8, 0x9D7000
	0x0376FF40 LDR X8, [X8 + 0x9A8]
	0x0376FF44 ADD X1, X31, 0x20
	0x0376FF48 LDR X2, [X8]
	0x0376FF4C BL 0x2208690
	0x0376FF50 LDR X8, [X22 + 0x28]
	0x0376FF54 LDR X9, [X31 + 0x38]
	0x0376FF58 CMP X8, X9

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {3}
	003 Move [X31-16], X30
	004 Move [X31-8], X19
	005 Move X0, 0x98A000
	006 Move X0, [X0+1320]
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X19, X0
	010 Move X0, 0x9AD000
	011 Move X0, [X0+3360]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Move X2, X31
	016 Call ArgumentNullException..ctor, X0, X1
	017 Move X0, 0x9D8000
	018 Move X0, [X0+2328]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Call 0x1C17DEC

Method: System.Void PauseHaptics()

Disassembly:
	0x0376FFD4 MOV X0, X19
	0x0376FFD8 MOV X2, X31
	0x0376FFDC BL 0x337DF1C
	0x0376FFE0 ADRP X0, 0x9D7000
	0x0376FFE4 LDR X0, [X0 + 0x9B0]
	0x0376FFE8 BL 0x1C16D08
	0x0376FFEC MOV X1, X0
	0x0376FFF0 MOV X0, X19
	0x0376FFF4 BL 0x1C16DEC
	0x0376FFF8 BL 0x3EB1B20
	0x0376FFFC STR X30, [X31 - 0x20]!
	0x03770000 STP X20, X19, [X31 + 0x10]
	0x03770004 ADRP X20, 0xC70000
	0x03770008 ADRP X19, 0x9AB000
	0x0377000C LDRB W8, [X20 + 0xEF5]
	0x03770010 LDR X19, [X19 + 0x270]
	0x03770014 TBNZ X8, 0x0, 0x377002C
	0x03770018 ADRP X0, 0x9AB000
	0x0377001C LDR X0, [X0 + 0x270]
	0x03770020 BL 0x1C16CF4
	0x03770024 MOVZ W8, 0x1
	0x03770028 STRB W8, [X20 + 0xEF5]
	0x0377002C LDR X0, [X19]
	0x03770030 LDR W8, [X0 + 0xE0]
	0x03770034 CBNZ W8, 0x3770040
	0x03770038 BL 0x1C16DFC
	0x0377003C LDR X0, [X19]
	0x03770040 LDR X8, [X0 + 0xB8]
	0x03770044 LDR X0, [X8]
	0x03770048 CBZ X0, 0x377005C
	0x0377004C LDP X20, X19, [X31 + 0x10]
	0x03770050 MOV X1, X31
	0x03770054 LDR X30, [X31], #0x20
	0x03770058 B 0x37C7104
	0x0377005C BL 0x1C16F20
	0x03770060 SUB X31, X31, 0x30
	0x03770064 STP X30, X21, [X31 + 0x10]
	0x03770068 STP X20, X19, [X31 + 0x20]
	0x0377006C ADRP X21, 0xC70000
	0x03770070 ADRP X20, 0x9AB000
	0x03770074 LDRB W8, [X21 + 0xEF6]
	0x03770078 LDR X20, [X20 + 0x270]
	0x0377007C MOV W19, W0
	0x03770080 TBNZ X8, 0x0, 0x3770098
	0x03770084 ADRP X0, 0x9AB000
	0x03770088 LDR X0, [X0 + 0x270]
	0x0377008C BL 0x1C16CF4
	0x03770090 MOVZ W8, 0x1
	0x03770094 STRB W8, [X21 + 0xEF6]
	0x03770098 LDR X0, [X20]
	0x0377009C CBZ W19, 0x37700C8
	0x037700A0 LDR W8, [X0 + 0xE0]
	0x037700A4 CBNZ W8, 0x37700B0
	0x037700A8 BL 0x1C16DFC
	0x037700AC LDR X0, [X20]
	0x037700B0 LDR X8, [X0 + 0xB8]
	0x037700B4 LDR X8, [X8]
	0x037700B8 CBZ X8, 0x37700FC
	0x037700BC LDR W8, [X8 + 0xA8]
	0x037700C0 ANDS W31, W8, W19, 0x0
	0x037700C4 B.EQ 0x3770100
	0x037700C8 LDR W8, [X0 + 0xE0]
	0x037700CC CBNZ W8, 0x37700D8
	0x037700D0 BL 0x1C16DFC
	0x037700D4 LDR X0, [X20]
	0x037700D8 LDR X8, [X0 + 0xB8]
	0x037700DC LDR X0, [X8]
	0x037700E0 CBZ X0, 0x37700FC
	0x037700E4 MOV W1, W19
	0x037700E8 LDP X20, X19, [X31 + 0x20]
	0x037700EC LDP X30, X21, [X31 + 0x10]
	0x037700F0 MOV X2, X31
	0x037700F4 ADD X31, X31, 0x30
	0x037700F8 B 0x37C7130
	0x037700FC BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xC72000
	009 Move X20, 0x9AD000
	010 Move W8, [X19+3813]
	011 Move X20, [X20+624]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x9D8000
	017 Move X0, [X0+2344]
	018 Call 0x1C17CF4
	019 Move X0, 0x9AC000
	020 Move X0, [X0+624]
	021 Call 0x1C17CF4
	022 Move X0, 0x9D6000
	023 Move X0, [X0+112]
	024 Call 0x1C17CF4
	025 Move X0, 0x9D6000
	026 Move X0, [X0+3608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+3813], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Call InputSystem.get_devices
	036 Move X21, X1
	037 ShiftRight X21, 32
	038 And X21, X21, 0x7FFFFFFF
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X31], X0
	041 Move [X31+8], X1
	042 Move X22, 0x9D6000
	043 Move X23, 0x9D7000
	044 Move X22, [X22+3608]
	045 Move X23, [X23+2344]
	046 Move W19, W31
	047 Move X2, [X22]
	048 Add X0, X31, 0
	049 Move W1, W19
	050 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	051 Move X1, [X23]
	052 Call 0x1C17E00
	053 Compare X0, 0
	054 JumpIfEqual {77}
	055 Move X8, [X0]
	056 Move X1, [X23]
	057 Move X20, X0
	058 NotImplemented "Instruction LDRH not yet implemented."
	059 Compare X9, 0
	060 JumpIfEqual {67}
	061 Move X10, [X8+176]
	062 Add X10, X10, 8
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Subtract X9, X9, 1
	066 Add X10, X10, 16
	067 Move X0, X20
	068 Move W2, W31
	069 Call 0x1C5D788
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 Add X8, X8, X9
	072 Add X0, X8, 312
	073 Move X8, [X0]
	074 Move X1, [X0+8]
	075 Move X0, X20
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Add W19, W19, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X30, [X31+16]
	084 Move X23, [X31+24]
	085 Add X31, X31, 64
	086 Return 

Method: System.Void ResumeHaptics()

Disassembly:
	0x03770100 STR W19, [X31 + 0xC]
	0x03770104 ADRP X0, 0x9D6000
	0x03770108 LDR X0, [X0 + 0x9B8]
	0x0377010C BL 0x1C16D08
	0x03770110 ADD X1, X31, 0xC
	0x03770114 BL 0x1C16E04
	0x03770118 MOV X19, X0
	0x0377011C ADRP X0, 0x9AB000
	0x03770120 LDR X0, [X0 + 0x270]
	0x03770124 BL 0x1C16D08
	0x03770128 BL 0x19903D0
	0x0377012C BL 0x37701B0
	0x03770130 MOV X20, X0
	0x03770134 BL 0x19903C0
	0x03770138 LDR W8, [X20 + 0x20]
	0x0377013C ADRP X0, 0x9D6000
	0x03770140 STR W8, [X31 + 0x8]
	0x03770144 LDR X0, [X0 + 0x9C0]
	0x03770148 BL 0x1C16D08
	0x0377014C ADD X1, X31, 0x8
	0x03770150 BL 0x1C16E04
	0x03770154 MOV X20, X0
	0x03770158 ADRP X0, 0x9D6000
	0x0377015C LDR X0, [X0 + 0x9C8]
	0x03770160 BL 0x1C16D08
	0x03770164 MOV X1, X19
	0x03770168 MOV X2, X20
	0x0377016C MOV X3, X31
	0x03770170 BL 0x3227BD4
	0x03770174 MOV X19, X0
	0x03770178 ADRP X0, 0x983000
	0x0377017C LDR X0, [X0 + 0x5B0]
	0x03770180 BL 0x1C16D08
	0x03770184 BL 0x1C16F10
	0x03770188 MOV X1, X19
	0x0377018C MOV X2, X31
	0x03770190 MOV X20, X0
	0x03770194 BL 0x337DF1C
	0x03770198 ADRP X0, 0x9D6000
	0x0377019C LDR X0, [X0 + 0x9D0]
	0x037701A0 BL 0x1C16D08
	0x037701A4 MOV X1, X0
	0x037701A8 MOV X0, X20
	0x037701AC BL 0x1C16DEC
	0x037701B0 STR X30, [X31 - 0x20]!
	0x037701B4 STP X20, X19, [X31 + 0x10]
	0x037701B8 ADRP X20, 0xC70000
	0x037701BC ADRP X19, 0x9AB000
	0x037701C0 LDRB W8, [X20 + 0xEFB]
	0x037701C4 LDR X19, [X19 + 0x270]
	0x037701C8 TBNZ X8, 0x0, 0x37701E0
	0x037701CC ADRP X0, 0x9AB000
	0x037701D0 LDR X0, [X0 + 0x270]
	0x037701D4 BL 0x1C16CF4
	0x037701D8 MOVZ W8, 0x1
	0x037701DC STRB W8, [X20 + 0xEFB]
	0x037701E0 LDR X0, [X19]
	0x037701E4 LDR W8, [X0 + 0xE0]
	0x037701E8 CBNZ W8, 0x37701F4
	0x037701EC BL 0x1C16DFC
	0x037701F0 LDR X0, [X19]
	0x037701F4 LDR X8, [X0 + 0xB8]
	0x037701F8 LDR X8, [X8]
	0x037701FC CBZ X8, 0x3770210
	0x03770200 LDR X0, [X8 + 0x480]
	0x03770204 LDP X20, X19, [X31 + 0x10]
	0x03770208 LDR X30, [X31], #0x20
	0x0377020C RET
	0x03770210 BL 0x1C16F20
	0x03770214 SUB X31, X31, 0x30
	0x03770218 STP X30, X21, [X31 + 0x10]
	0x0377021C STP X20, X19, [X31 + 0x20]
	0x03770220 ADRP X19, 0xC70000
	0x03770224 ADRP X21, 0x9AB000
	0x03770228 LDRB W8, [X19 + 0xEF7]
	0x0377022C LDR X21, [X21 + 0x270]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xC71000
	009 Move X20, 0x9AC000
	010 Move W8, [X19+3814]
	011 Move X20, [X20+624]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x9D7000
	017 Move X0, [X0+2344]
	018 Call 0x1C17CF4
	019 Move X0, 0x9AC000
	020 Move X0, [X0+624]
	021 Call 0x1C17CF4
	022 Move X0, 0x9D6000
	023 Move X0, [X0+112]
	024 Call 0x1C17CF4
	025 Move X0, 0x9D6000
	026 Move X0, [X0+3608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+3814], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Call InputSystem.get_devices
	036 Move X21, X1
	037 ShiftRight X21, 32
	038 And X21, X21, 0x7FFFFFFF
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X31], X0
	041 Move [X31+8], X1
	042 Move X22, 0x9D6000
	043 Move X23, 0x9D7000
	044 Move X22, [X22+3608]
	045 Move X23, [X23+2344]
	046 Move W19, W31
	047 Move X2, [X22]
	048 Add X0, X31, 0
	049 Move W1, W19
	050 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	051 Move X1, [X23]
	052 Call 0x1C17E00
	053 Compare X0, 0
	054 JumpIfEqual {78}
	055 Move X8, [X0]
	056 Move X1, [X23]
	057 Move X20, X0
	058 NotImplemented "Instruction LDRH not yet implemented."
	059 Compare X9, 0
	060 JumpIfEqual {67}
	061 Move X10, [X8+176]
	062 Add X10, X10, 8
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Subtract X9, X9, 1
	066 Add X10, X10, 16
	067 Move W2, 1
	068 Move X0, X20
	069 Call 0x1C5D788
	070 Move W9, [X10]
	071 Add W9, W9, 1
	072 Add X8, X8, W9
	073 Add X0, X8, 312
	074 Move X8, [X0]
	075 Move X1, [X0+8]
	076 Move X0, X20
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Add W19, W19, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X30, [X31+16]
	085 Move X23, [X31+24]
	086 Add X31, X31, 64
	087 Return 

Method: System.Void ResetHaptics()

Disassembly:
	0x03770230 MOV X20, X0
	0x03770234 TBNZ X8, 0x0, 0x377024C
	0x03770238 ADRP X0, 0x9AB000
	0x0377023C LDR X0, [X0 + 0x270]
	0x03770240 BL 0x1C16CF4
	0x03770244 MOVZ W8, 0x1
	0x03770248 STRB W8, [X19 + 0xEF7]
	0x0377024C LDR X0, [X21]
	0x03770250 LDR W8, [X0 + 0xE0]
	0x03770254 CBNZ W8, 0x3770260
	0x03770258 BL 0x1C16DFC
	0x0377025C LDR X0, [X21]
	0x03770260 LDR X8, [X0 + 0xB8]
	0x03770264 LDR X19, [X8]
	0x03770268 STRB W31, [X31 + 0xC]
	0x0377026C ADD X1, X31, 0xC
	0x03770270 MOV X0, X19
	0x03770274 MOV X2, X31
	0x03770278 BL 0x33DE64C
	0x0377027C LDR X0, [X21]
	0x03770280 LDR W8, [X0 + 0xE0]
	0x03770284 CBNZ W8, 0x3770290
	0x03770288 BL 0x1C16DFC
	0x0377028C LDR X0, [X21]
	0x03770290 LDR X8, [X0 + 0xB8]
	0x03770294 LDR X0, [X8]
	0x03770298 CBZ X0, 0x37702DC
	0x0377029C MOV X1, X20
	0x037702A0 MOV X2, X31
	0x037702A4 BL 0x37C23C8
	0x037702A8 MOV X20, X31
	0x037702AC LDRB W8, [X31 + 0xC]
	0x037702B0 CBZ W8, 0x37702C0
	0x037702B4 MOV X0, X19
	0x037702B8 MOV X1, X31
	0x037702BC BL 0x33E14E4
	0x037702C0 CBNZ X20, 0x37702D4
	0x037702C4 LDP X20, X19, [X31 + 0x20]
	0x037702C8 LDP X30, X21, [X31 + 0x10]
	0x037702CC ADD X31, X31, 0x30
	0x037702D0 RET
	0x037702D4 MOV X0, X20
	0x037702D8 BL 0x1C16F18
	0x037702DC BL 0x1C16F20
	0x037702E0 B 0x37702E4
	0x037702E4 MOV X21, X0
	0x037702E8 CMP W1, 0x1
	0x037702EC B.NE 0x3770304
	0x037702F0 MOV X0, X21
	0x037702F4 BL 0x3EB1AD0
	0x037702F8 LDR X20, [X0]
	0x037702FC BL 0x3EB1AE0
	0x03770300 B 0x37702AC
	0x03770304 MOV X20, X31
	0x03770308 B 0x3770310
	0x0377030C MOV X21, X0
	0x03770310 LDRB W8, [X31 + 0xC]
	0x03770314 CBZ W8, 0x3770324
	0x03770318 MOV X0, X19
	0x0377031C MOV X1, X31
	0x03770320 BL 0x33E14E4
	0x03770324 CBNZ X20, 0x3770330
	0x03770328 MOV X0, X21
	0x0377032C BL 0x1D2C690
	0x03770330 MOV X0, X20
	0x03770334 BL 0x1C16F18
	0x03770338 BL 0x1990590
	0x0377033C SUB X31, X31, 0x30
	0x03770340 STP X30, X21, [X31 + 0x10]
	0x03770344 STP X20, X19, [X31 + 0x20]
	0x03770348 ADRP X19, 0xC70000
	0x0377034C ADRP X21, 0x9AB000
	0x03770350 LDRB W8, [X19 + 0xEF8]
	0x03770354 LDR X21, [X21 + 0x270]
	0x03770358 MOV X20, X0
	0x0377035C TBNZ X8, 0x0, 0x3770374

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xC71000
	009 Move X20, 0x9AC000
	010 Move W8, [X19+3815]
	011 Move X20, [X20+624]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x9D7000
	017 Move X0, [X0+2344]
	018 Call 0x1C17CF4
	019 Move X0, 0x9AC000
	020 Move X0, [X0+624]
	021 Call 0x1C17CF4
	022 Move X0, 0x9D6000
	023 Move X0, [X0+112]
	024 Call 0x1C17CF4
	025 Move X0, 0x9D6000
	026 Move X0, [X0+3608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+3815], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Call InputSystem.get_devices
	036 Move X21, X1
	037 ShiftRight X21, 32
	038 And X21, X21, 0x7FFFFFFF
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X31], X0
	041 Move [X31+8], X1
	042 Move X22, 0x9D6000
	043 Move X23, 0x9D7000
	044 Move X22, [X22+3608]
	045 Move X23, [X23+2344]
	046 Move W19, W31
	047 Move X2, [X22]
	048 Add X0, X31, 0
	049 Move W1, W19
	050 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	051 Move X1, [X23]
	052 Call 0x1C17E00
	053 Compare X0, 0
	054 JumpIfEqual {78}
	055 Move X8, [X0]
	056 Move X1, [X23]
	057 Move X20, X0
	058 NotImplemented "Instruction LDRH not yet implemented."
	059 Compare X9, 0
	060 JumpIfEqual {67}
	061 Move X10, [X8+176]
	062 Add X10, X10, 8
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Subtract X9, X9, 1
	066 Add X10, X10, 16
	067 Move W2, 2
	068 Move X0, X20
	069 Call 0x1C5D788
	070 Move W9, [X10]
	071 Add W9, W9, 2
	072 Add X8, X8, W9
	073 Add X0, X8, 312
	074 Move X8, [X0]
	075 Move X1, [X0+8]
	076 Move X0, X20
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Add W19, W19, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X30, [X31+16]
	085 Move X23, [X31+24]
	086 Add X31, X31, 64
	087 Return 

Method: System.Void SetDeviceUsage(UnityEngine.InputSystem.InputDevice device, System.String usage)

Disassembly:
	0x03770360 ADRP X0, 0x9AB000
	0x03770364 LDR X0, [X0 + 0x270]
	0x03770368 BL 0x1C16CF4
	0x0377036C MOVZ W8, 0x1
	0x03770370 STRB W8, [X19 + 0xEF8]
	0x03770374 LDR X0, [X21]
	0x03770378 LDR W8, [X0 + 0xE0]
	0x0377037C CBNZ W8, 0x3770388
	0x03770380 BL 0x1C16DFC
	0x03770384 LDR X0, [X21]
	0x03770388 LDR X8, [X0 + 0xB8]
	0x0377038C LDR X19, [X8]
	0x03770390 STRB W31, [X31 + 0xC]
	0x03770394 ADD X1, X31, 0xC
	0x03770398 MOV X0, X19
	0x0377039C MOV X2, X31
	0x037703A0 BL 0x33DE64C
	0x037703A4 LDR X0, [X21]
	0x037703A8 LDR W8, [X0 + 0xE0]
	0x037703AC CBNZ W8, 0x37703B8
	0x037703B0 BL 0x1C16DFC
	0x037703B4 LDR X0, [X21]
	0x037703B8 LDR X8, [X0 + 0xB8]
	0x037703BC LDR X0, [X8]
	0x037703C0 CBZ X0, 0x3770404
	0x037703C4 MOV X1, X20
	0x037703C8 MOV X2, X31
	0x037703CC BL 0x37C2524
	0x037703D0 MOV X20, X31
	0x037703D4 LDRB W8, [X31 + 0xC]
	0x037703D8 CBZ W8, 0x37703E8
	0x037703DC MOV X0, X19
	0x037703E0 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xC71000
	008 Move X21, 0x9AC000
	009 Move W8, [X22+3816]
	010 Move X21, [X21+624]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x9AC000
	018 Move X0, [X0+624]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3816], W8
	022 Add X0, X31, 0
	023 Move X1, X20
	024 Move X2, X31
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Call InternedString..ctor, X0, X1
	028 Move X0, [X21]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X1, [X31]
	034 Move X2, [X31+8]
	035 Move X0, X19
	036 Call InputSystem.SetDeviceUsage, X0, X1
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X30, [X31+16]
	042 Add X31, X31, 64
	043 Return 

Method: System.Void SetDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x037703E4 BL 0x33E14E4
	0x037703E8 CBNZ X20, 0x37703FC
	0x037703EC LDP X20, X19, [X31 + 0x20]
	0x037703F0 LDP X30, X21, [X31 + 0x10]
	0x037703F4 ADD X31, X31, 0x30
	0x037703F8 RET
	0x037703FC MOV X0, X20
	0x03770400 BL 0x1C16F18
	0x03770404 BL 0x1C16F20
	0x03770408 B 0x377040C
	0x0377040C MOV X21, X0
	0x03770410 CMP W1, 0x1
	0x03770414 B.NE 0x377042C
	0x03770418 MOV X0, X21
	0x0377041C BL 0x3EB1AD0
	0x03770420 LDR X20, [X0]
	0x03770424 BL 0x3EB1AE0
	0x03770428 B 0x37703D4
	0x0377042C MOV X20, X31
	0x03770430 B 0x3770438
	0x03770434 MOV X21, X0
	0x03770438 LDRB W8, [X31 + 0xC]
	0x0377043C CBZ W8, 0x377044C
	0x03770440 MOV X0, X19
	0x03770444 MOV X1, X31
	0x03770448 BL 0x33E14E4
	0x0377044C CBNZ X20, 0x3770458
	0x03770450 MOV X0, X21
	0x03770454 BL 0x1D2C690
	0x03770458 MOV X0, X20
	0x0377045C BL 0x1C16F18
	0x03770460 BL 0x1990590
	0x03770464 SUB X31, X31, 0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xC71000
	008 Move X22, 0x9AC000
	009 Move W8, [X23+3817]
	010 Move X22, [X22+624]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9AC000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3817], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X22]
	029 Move X8, [X0+184]
	030 Move X0, [X8]
	031 Compare X0, 0
	032 JumpIfEqual {45}
	033 Move X1, X21
	034 Move X2, X20
	035 Move X3, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X4, X31
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call InputManager.SetDeviceUsage, X0, X1, X2
	044 Return 
	045 Call 0x1C17F20

Method: System.Void AddDeviceUsage(UnityEngine.InputSystem.InputDevice device, System.String usage)

Disassembly:
	0x03770468 STP X30, X21, [X31 + 0x10]
	0x0377046C STP X20, X19, [X31 + 0x20]
	0x03770470 ADRP X19, 0xC70000
	0x03770474 ADRP X21, 0x9AB000
	0x03770478 LDRB W8, [X19 + 0xEF9]
	0x0377047C LDR X21, [X21 + 0x270]
	0x03770480 MOV X20, X0
	0x03770484 TBNZ X8, 0x0, 0x377049C
	0x03770488 ADRP X0, 0x9AB000
	0x0377048C LDR X0, [X0 + 0x270]
	0x03770490 BL 0x1C16CF4
	0x03770494 MOVZ W8, 0x1
	0x03770498 STRB W8, [X19 + 0xEF9]
	0x0377049C LDR X0, [X21]
	0x037704A0 LDR W8, [X0 + 0xE0]
	0x037704A4 CBNZ W8, 0x37704B0
	0x037704A8 BL 0x1C16DFC
	0x037704AC LDR X0, [X21]
	0x037704B0 LDR X8, [X0 + 0xB8]
	0x037704B4 LDR X19, [X8]
	0x037704B8 STRB W31, [X31 + 0xC]
	0x037704BC ADD X1, X31, 0xC
	0x037704C0 MOV X0, X19
	0x037704C4 MOV X2, X31
	0x037704C8 BL 0x33DE64C
	0x037704CC LDR X0, [X21]
	0x037704D0 LDR W8, [X0 + 0xE0]
	0x037704D4 CBNZ W8, 0x37704E0
	0x037704D8 BL 0x1C16DFC
	0x037704DC LDR X0, [X21]
	0x037704E0 LDR X8, [X0 + 0xB8]
	0x037704E4 LDR X0, [X8]
	0x037704E8 CBZ X0, 0x377052C
	0x037704EC MOV X1, X20
	0x037704F0 MOV X2, X31
	0x037704F4 BL 0x37C257C
	0x037704F8 MOV X20, X31
	0x037704FC LDRB W8, [X31 + 0xC]
	0x03770500 CBZ W8, 0x3770510
	0x03770504 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xC71000
	008 Move X21, 0x9AC000
	009 Move W8, [X22+3818]
	010 Move X21, [X21+624]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x9AC000
	018 Move X0, [X0+624]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3818], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Add X0, X31, 0
	030 Move X1, X20
	031 Move X2, X31
	032 Move X21, [X8]
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call InternedString..ctor, X0, X1
	036 Compare X21, 0
	037 JumpIfEqual {51}
	038 Move X2, [X31]
	039 Move X3, [X31+8]
	040 Move X0, X21
	041 Move X1, X19
	042 Move X4, X31
	043 Call InputManager.AddDeviceUsage, X0, X1, X2
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X30, [X31+16]
	049 Add X31, X31, 64
	050 Return 
	051 Call 0x1C17F20

Method: System.Void AddDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x03770508 MOV X1, X31
	0x0377050C BL 0x33E14E4
	0x03770510 CBNZ X20, 0x3770524
	0x03770514 LDP X20, X19, [X31 + 0x20]
	0x03770518 LDP X30, X21, [X31 + 0x10]
	0x0377051C ADD X31, X31, 0x30
	0x03770520 RET
	0x03770524 MOV X0, X20
	0x03770528 BL 0x1C16F18
	0x0377052C BL 0x1C16F20
	0x03770530 B 0x3770534
	0x03770534 MOV X21, X0
	0x03770538 CMP W1, 0x1
	0x0377053C B.NE 0x3770554
	0x03770540 MOV X0, X21
	0x03770544 BL 0x3EB1AD0
	0x03770548 LDR X20, [X0]
	0x0377054C BL 0x3EB1AE0
	0x03770550 B 0x37704FC
	0x03770554 MOV X20, X31
	0x03770558 B 0x3770560
	0x0377055C MOV X21, X0
	0x03770560 LDRB W8, [X31 + 0xC]
	0x03770564 CBZ W8, 0x3770574
	0x03770568 MOV X0, X19
	0x0377056C MOV X1, X31
	0x03770570 BL 0x33E14E4
	0x03770574 CBNZ X20, 0x3770580
	0x03770578 MOV X0, X21
	0x0377057C BL 0x1D2C690
	0x03770580 MOV X0, X20
	0x03770584 BL 0x1C16F18
	0x03770588 BL 0x1990590

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xC71000
	008 Move X22, 0x9AC000
	009 Move W8, [X23+3819]
	010 Move X22, [X22+624]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9AC000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3819], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X22]
	029 Move X8, [X0+184]
	030 Move X0, [X8]
	031 Compare X0, 0
	032 JumpIfEqual {45}
	033 Move X1, X21
	034 Move X2, X20
	035 Move X3, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X4, X31
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call InputManager.AddDeviceUsage, X0, X1, X2
	044 Return 
	045 Call 0x1C17F20

Method: System.Void RemoveDeviceUsage(UnityEngine.InputSystem.InputDevice device, System.String usage)

Disassembly:
	0x0377058C SUB X31, X31, 0x30
	0x03770590 STP X30, X21, [X31 + 0x10]
	0x03770594 STP X20, X19, [X31 + 0x20]
	0x03770598 ADRP X19, 0xC70000
	0x0377059C ADRP X21, 0x9AB000
	0x037705A0 LDRB W8, [X19 + 0xEFA]
	0x037705A4 LDR X21, [X21 + 0x270]
	0x037705A8 MOV X20, X0
	0x037705AC TBNZ X8, 0x0, 0x37705C4
	0x037705B0 ADRP X0, 0x9AB000
	0x037705B4 LDR X0, [X0 + 0x270]
	0x037705B8 BL 0x1C16CF4
	0x037705BC MOVZ W8, 0x1
	0x037705C0 STRB W8, [X19 + 0xEFA]
	0x037705C4 LDR X0, [X21]
	0x037705C8 LDR W8, [X0 + 0xE0]
	0x037705CC CBNZ W8, 0x37705D8
	0x037705D0 BL 0x1C16DFC
	0x037705D4 LDR X0, [X21]
	0x037705D8 LDR X8, [X0 + 0xB8]
	0x037705DC LDR X19, [X8]
	0x037705E0 STRB W31, [X31 + 0xC]
	0x037705E4 ADD X1, X31, 0xC
	0x037705E8 MOV X0, X19
	0x037705EC MOV X2, X31
	0x037705F0 BL 0x33DE64C
	0x037705F4 LDR X0, [X21]
	0x037705F8 LDR W8, [X0 + 0xE0]
	0x037705FC CBNZ W8, 0x3770608
	0x03770600 BL 0x1C16DFC
	0x03770604 LDR X0, [X21]
	0x03770608 LDR X8, [X0 + 0xB8]
	0x0377060C LDR X0, [X8]
	0x03770610 CBZ X0, 0x3770654
	0x03770614 MOV X1, X20
	0x03770618 MOV X2, X31
	0x0377061C BL 0x37C25D4
	0x03770620 MOV X20, X31
	0x03770624 LDRB W8, [X31 + 0xC]
	0x03770628 CBZ W8, 0x3770638

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xC71000
	008 Move X21, 0x9AC000
	009 Move W8, [X22+3820]
	010 Move X21, [X21+624]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x9AC000
	018 Move X0, [X0+624]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3820], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Add X0, X31, 0
	030 Move X1, X20
	031 Move X2, X31
	032 Move X21, [X8]
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call InternedString..ctor, X0, X1
	036 Compare X21, 0
	037 JumpIfEqual {51}
	038 Move X2, [X31]
	039 Move X3, [X31+8]
	040 Move X0, X21
	041 Move X1, X19
	042 Move X4, X31
	043 Call InputManager.RemoveDeviceUsage, X0, X1, X2
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X30, [X31+16]
	049 Add X31, X31, 64
	050 Return 
	051 Call 0x1C17F20

Method: System.Void RemoveDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)

Disassembly:
	0x0377062C MOV X0, X19
	0x03770630 MOV X1, X31
	0x03770634 BL 0x33E14E4
	0x03770638 CBNZ X20, 0x377064C
	0x0377063C LDP X20, X19, [X31 + 0x20]
	0x03770640 LDP X30, X21, [X31 + 0x10]
	0x03770644 ADD X31, X31, 0x30
	0x03770648 RET
	0x0377064C MOV X0, X20
	0x03770650 BL 0x1C16F18
	0x03770654 BL 0x1C16F20
	0x03770658 B 0x377065C
	0x0377065C MOV X21, X0
	0x03770660 CMP W1, 0x1
	0x03770664 B.NE 0x377067C
	0x03770668 MOV X0, X21
	0x0377066C BL 0x3EB1AD0
	0x03770670 LDR X20, [X0]
	0x03770674 BL 0x3EB1AE0
	0x03770678 B 0x3770624
	0x0377067C MOV X20, X31
	0x03770680 B 0x3770688
	0x03770684 MOV X21, X0
	0x03770688 LDRB W8, [X31 + 0xC]
	0x0377068C CBZ W8, 0x377069C
	0x03770690 MOV X0, X19
	0x03770694 MOV X1, X31
	0x03770698 BL 0x33E14E4
	0x0377069C CBNZ X20, 0x37706A8
	0x037706A0 MOV X0, X21
	0x037706A4 BL 0x1D2C690
	0x037706A8 MOV X0, X20
	0x037706AC BL 0x1C16F18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xC71000
	008 Move X22, 0x9AC000
	009 Move W8, [X23+3821]
	010 Move X22, [X22+624]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9AC000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3821], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X22]
	029 Move X8, [X0+184]
	030 Move X0, [X8]
	031 Compare X0, 0
	032 JumpIfEqual {45}
	033 Move X1, X21
	034 Move X2, X20
	035 Move X3, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X4, X31
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call InputManager.RemoveDeviceUsage, X0, X1, X2
	044 Return 
	045 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputControl FindControl(System.String path)

Disassembly:
	0x037706B0 BL 0x1990590
	0x037706B4 STP X30, X21, [X31 - 0x20]!
	0x037706B8 STP X20, X19, [X31 + 0x10]
	0x037706BC ADRP X21, 0xC70000
	0x037706C0 ADRP X20, 0x983000
	0x037706C4 LDRB W8, [X21 + 0xEFC]
	0x037706C8 LDR X20, [X20 + 0x598]
	0x037706CC MOV X19, X0
	0x037706D0 TBNZ X8, 0x0, 0x37706F4
	0x037706D4 ADRP X0, 0x9AB000
	0x037706D8 LDR X0, [X0 + 0x270]
	0x037706DC BL 0x1C16CF4
	0x037706E0 ADRP X0, 0x983000
	0x037706E4 LDR X0, [X0 + 0x598]
	0x037706E8 BL 0x1C16CF4
	0x037706EC MOVZ W8, 0x1
	0x037706F0 STRB W8, [X21 + 0xEFC]
	0x037706F4 LDR X0, [X20]
	0x037706F8 LDR W8, [X0 + 0xE0]
	0x037706FC CBNZ W8, 0x3770704
	0x03770700 BL 0x1C16DFC
	0x03770704 MOV X0, X19
	0x03770708 MOV X1, X31
	0x0377070C MOV X2, X31
	0x03770710 BL 0x3C3883C
	0x03770714 TBNZ X0, 0x0, 0x37707AC
	0x03770718 ADRP X21, 0x9AB000
	0x0377071C LDR X21, [X21 + 0x270]
	0x03770720 LDR X0, [X21]
	0x03770724 LDR W8, [X0 + 0xE0]
	0x03770728 CBNZ W8, 0x3770734
	0x0377072C BL 0x1C16DFC
	0x03770730 LDR X0, [X21]
	0x03770734 LDR X8, [X0 + 0xB8]
	0x03770738 LDR X8, [X8]
	0x0377073C CBZ X8, 0x37707A8
	0x03770740 LDR X0, [X20]
	0x03770744 LDR X20, [X8 + 0x480]
	0x03770748 LDR W9, [X0 + 0xE0]
	0x0377074C CBNZ W9, 0x3770754
	0x03770750 BL 0x1C16DFC
	0x03770754 MOV X0, X20
	0x03770758 MOV X1, X19
	0x0377075C MOV X2, X31
	0x03770760 BL 0x3C3883C
	0x03770764 TBZ X0, 0x0, 0x3770774
	0x03770768 LDP X20, X19, [X31 + 0x10]
	0x0377076C LDP X30, X21, [X31], #0x20
	0x03770770 RET
	0x03770774 LDR X0, [X21]
	0x03770778 LDR W8, [X0 + 0xE0]
	0x0377077C CBNZ W8, 0x3770788
	0x03770780 BL 0x1C16DFC
	0x03770784 LDR X0, [X21]
	0x03770788 LDR X8, [X0 + 0xB8]
	0x0377078C LDR X0, [X8]
	0x03770790 CBZ X0, 0x37707A8
	0x03770794 MOV X1, X19
	0x03770798 LDP X20, X19, [X31 + 0x10]
	0x0377079C MOV X2, X31
	0x037707A0 LDP X30, X21, [X31], #0x20
	0x037707A4 B 0x37C1598
	0x037707A8 BL 0x1C16F20
	0x037707AC ADRP X0, 0x988000
	0x037707B0 LDR X0, [X0 + 0x528]
	0x037707B4 BL 0x1C16D08
	0x037707B8 BL 0x1C16F10
	0x037707BC MOV X19, X0
	0x037707C0 ADRP X0, 0x98D000
	0x037707C4 LDR X0, [X0 + 0xEC8]
	0x037707C8 BL 0x1C16D08
	0x037707CC MOV X1, X0
	0x037707D0 MOV X0, X19
	0x037707D4 MOV X2, X31
	0x037707D8 BL 0x330E100
	0x037707DC ADRP X0, 0x9D6000
	0x037707E0 LDR X0, [X0 + 0x9D8]
	0x037707E4 BL 0x1C16D08
	0x037707E8 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xC71000
	008 Move W8, [X20+3822]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x9AC000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move X0, 0x9D6000
	018 Move X0, [X0+112]
	019 Call 0x1C17CF4
	020 Move X0, 0x9D6000
	021 Move X0, [X0+3608]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3822], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Move [X31], X31
	028 Move [X31+8], X31
	029 Call String.IsNullOrEmpty, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {76}
	034 Move X20, 0x9AC000
	035 Move X20, [X20+624]
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X20]
	042 Move X8, [X0+184]
	043 Move X0, [X8]
	044 Compare X0, 0
	045 JumpIfEqual {94}
	046 Move X1, X31
	047 Call InputManager.get_devices, X0
	048 Move X21, X1
	049 ShiftRight X21, 32
	050 And X21, X21, 0x7FFFFFFF
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X31], X0
	053 Move [X31+8], X1
	054 Move X22, 0x9D6000
	055 Move X22, [X22+3608]
	056 Move W20, W31
	057 Move X2, [X22]
	058 Add X0, X31, 0
	059 Move W1, W20
	060 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	061 Move X1, X19
	062 Move W2, W31
	063 Call InputControlPath.TryFindControl, X0, X1, X2
	064 Compare X0, 0
	065 JumpIfNotEqual {69}
	066 Add W20, W20, 1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, X31
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X30, [X31+16]
	074 Add X31, X31, 64
	075 Return X0
	076 Move X0, 0x989000
	077 Move X0, [X0+1320]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0x98F000
	082 Move X0, [X0+288]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Move X2, X31
	087 Call ArgumentNullException..ctor, X0, X1
	088 Move X0, 0x9D7000
	089 Move X0, [X0+2352]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Call 0x1C17DEC
	094 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> FindControls(System.String path)

Disassembly:
	0x037707EC MOV X0, X19
	0x037707F0 BL 0x1C16DEC
	0x037707F4 STP X30, X21, [X31 - 0x20]!
	0x037707F8 STP X20, X19, [X31 + 0x10]
	0x037707FC ADRP X21, 0xC70000
	0x03770800 ADRP X20, 0x9AB000
	0x03770804 LDRB W8, [X21 + 0xEFD]
	0x03770808 LDR X20, [X20 + 0x270]
	0x0377080C MOV X19, X0
	0x03770810 TBNZ X8, 0x0, 0x3770828
	0x03770814 ADRP X0, 0x9AB000
	0x03770818 LDR X0, [X0 + 0x270]
	0x0377081C BL 0x1C16CF4
	0x03770820 MOVZ W8, 0x1
	0x03770824 STRB W8, [X21 + 0xEFD]
	0x03770828 LDR X0, [X20]
	0x0377082C LDR W8, [X0 + 0xE0]
	0x03770830 CBNZ W8, 0x377083C
	0x03770834 BL 0x1C16DFC
	0x03770838 LDR X0, [X20]
	0x0377083C LDR X8, [X0 + 0xB8]
	0x03770840 LDR X0, [X8]
	0x03770844 CBZ X0, 0x377085C
	0x03770848 MOV X1, X19
	0x0377084C LDP X20, X19, [X31 + 0x10]
	0x03770850 MOV X2, X31
	0x03770854 LDP X30, X21, [X31], #0x20
	0x03770858 B 0x37C262C
	0x0377085C BL 0x1C16F20
	0x03770860 STP X30, X21, [X31 - 0x20]!
	0x03770864 STP X20, X19, [X31 + 0x10]
	0x03770868 ADRP X21, 0xC70000
	0x0377086C ADRP X20, 0x9AB000
	0x03770870 LDRB W8, [X21 + 0xEFE]
	0x03770874 LDR X20, [X20 + 0x270]
	0x03770878 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0xC71000
	008 Move X21, 0x9AC000
	009 Move X19, X8
	010 Move W8, [X22+3823]
	011 Move X21, [X21+624]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x9D7000
	018 Move X0, [X0+2360]
	019 Call 0x1C17CF4
	020 Move X0, 0x9AC000
	021 Move X0, [X0+624]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3823], W8
	025 Move X0, [X21]
	026 Move X21, 0x9D7000
	027 Move W8, [X0+224]
	028 Move X21, [X21+2360]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X1, [X21]
	033 Add X8, X31, 0
	034 Move X0, X20
	035 Call 0x220C4F0, X0
	036 Move V1, [X31]
	037 Move V0, [X31+16]
	038 Move X22, [X31+48]
	039 Move X21, [X31+56]
	040 Move X30, [X31+32]
	041 Move [X19], V1
	042 Move [X19+8], V0
	043 Move X20, [X31+64]
	044 Move X19, [X31+72]
	045 Add X31, X31, 80
	046 Return X0

Method: UnityEngine.InputSystem.InputControlList`1<TControl> FindControls(System.String path)

Disassembly:
	0x0220C4F0 LDR X9, [X9 + 0x6C0]
	0x0220C4F4 LDR X20, [X8]
	0x0220C4F8 LDR X0, [X9]
	0x0220C4FC LDR W9, [X0 + 0xE0]
	0x0220C500 CBNZ W9, 0x220C508
	0x0220C504 BL 0x1C16DFC
	0x0220C508 MOV X0, X20
	0x0220C50C MOV X1, X31
	0x0220C510 BL 0x338C698
	0x0220C514 ADRP X8, 0x1F0F000
	0x0220C518 LDR X8, [X8 + 0x270]
	0x0220C51C MOV X20, X0
	0x0220C520 LDR X8, [X8]
	0x0220C524 LDR W9, [X8 + 0xE0]
	0x0220C528 CBNZ W9, 0x220C534
	0x0220C52C MOV X0, X8
	0x0220C530 BL 0x1C16DFC
	0x0220C534 MOV X0, X20
	0x0220C538 MOV X1, X19
	0x0220C53C LDP X20, X19, [X31 + 0x10]
	0x0220C540 MOV X2, X31
	0x0220C544 LDR X30, [X31], #0x20
	0x0220C548 B 0x3770D0C
	0x0220C54C STR X30, [X31 - 0x20]!
	0x0220C550 STP X20, X19, [X31 + 0x10]
	0x0220C554 LDR X8, [X1 + 0x38]
	0x0220C558 MOV X19, X0
	0x0220C55C CBNZ X8, 0x220C590
	0x0220C560 ADRP X0, 0x1F0F000
	0x0220C564 LDR X0, [X0 + 0x270]
	0x0220C568 MOV X20, X1
	0x0220C56C BL 0x1C16CF4
	0x0220C570 ADRP X0, 0x1EE7000
	0x0220C574 LDR X0, [X0 + 0x6C0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X9, [X1+56]
	007 Move X21, X1
	008 Move X20, X0
	009 Move X19, X8
	010 Compare X9, 0
	011 JumpIfNotEqual {20}
	012 Move X0, 0x1F10000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move X8, [X21+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {20}
	018 Move X0, X21
	019 Call 0x1C5D6E0
	020 Move X8, 0x1F10000
	021 Move X8, [X8+624]
	022 NotImplemented "Instruction MOVI not yet implemented."
	023 Move [X31], V0
	024 Move [X31+8], V0
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X8, [X21+56]
	031 Add X1, X31, 0
	032 Move X0, X20
	033 Move X2, [X8+8]
	034 Call 0x220C578, X0, X1
	035 Move V0, [X31]
	036 Move V1, [X31+16]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move [X19], V0
	040 Move [X19+8], V1
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Add X31, X31, 64
	044 Return X0

Method: System.Int32 FindControls(System.String path, ref UnityEngine.InputSystem.InputControlList`1<TControl> controls)

Disassembly:
	0x0220C578 BL 0x1C16CF4
	0x0220C57C LDR X8, [X20 + 0x38]
	0x0220C580 CBNZ X8, 0x220C590
	0x0220C584 MOV X0, X20
	0x0220C588 BL 0x1C5C6E0
	0x0220C58C LDR X8, [X20 + 0x38]
	0x0220C590 ADRP X9, 0x1EE7000
	0x0220C594 LDR X9, [X9 + 0x6C0]
	0x0220C598 LDR X20, [X8]
	0x0220C59C LDR X0, [X9]
	0x0220C5A0 LDR W9, [X0 + 0xE0]
	0x0220C5A4 CBNZ W9, 0x220C5AC
	0x0220C5A8 BL 0x1C16DFC
	0x0220C5AC MOV X0, X20
	0x0220C5B0 MOV X1, X31
	0x0220C5B4 BL 0x338C698
	0x0220C5B8 ADRP X8, 0x1F0F000
	0x0220C5BC LDR X8, [X8 + 0x270]
	0x0220C5C0 MOV X20, X0
	0x0220C5C4 LDR X8, [X8]
	0x0220C5C8 LDR W9, [X8 + 0xE0]
	0x0220C5CC CBNZ W9, 0x220C5D8
	0x0220C5D0 MOV X0, X8
	0x0220C5D4 BL 0x1C16DFC
	0x0220C5D8 MOV X0, X20
	0x0220C5DC MOV X1, X19
	0x0220C5E0 LDP X20, X19, [X31 + 0x10]
	0x0220C5E4 MOV X2, X31
	0x0220C5E8 LDR X30, [X31], #0x20
	0x0220C5EC B 0x3770D0C
	0x0220C5F0 STR X30, [X31 - 0x20]!
	0x0220C5F4 STP X20, X19, [X31 + 0x10]
	0x0220C5F8 LDR X8, [X1 + 0x38]
	0x0220C5FC MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X20, X2
	008 Move X19, X1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {20}
	012 Move X0, 0x1F10000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move X8, [X20+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {20}
	018 Move X0, X20
	019 Call 0x1C5D6E0
	020 Move X22, 0x1F10000
	021 Move X22, [X22+624]
	022 Move X0, [X22]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X22]
	028 Move X8, [X0+184]
	029 Move X0, [X8]
	030 Compare X0, 0
	031 JumpIfEqual {43}
	032 Move X8, [X20+56]
	033 Move X1, X21
	034 Move X2, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X3, [X8+8]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Call 0x22095B8, X0, X1, X2
	042 Return X0
	043 Call 0x1C17F20

Method: System.Boolean get_isProcessingEvents()

Disassembly:
	0x0377087C TBNZ X8, 0x0, 0x3770894
	0x03770880 ADRP X0, 0x9AB000
	0x03770884 LDR X0, [X0 + 0x270]
	0x03770888 BL 0x1C16CF4
	0x0377088C MOVZ W8, 0x1
	0x03770890 STRB W8, [X21 + 0xEFE]
	0x03770894 LDR X0, [X20]
	0x03770898 LDR W8, [X0 + 0xE0]
	0x0377089C CBNZ W8, 0x37708A8
	0x037708A0 BL 0x1C16DFC
	0x037708A4 LDR X0, [X20]
	0x037708A8 LDR X8, [X0 + 0xB8]
	0x037708AC LDR X0, [X8]
	0x037708B0 CBZ X0, 0x37708C8
	0x037708B4 MOV X1, X19
	0x037708B8 LDP X20, X19, [X31 + 0x10]
	0x037708BC MOV X2, X31
	0x037708C0 LDP X30, X21, [X31], #0x20
	0x037708C4 B 0x37C2684
	0x037708C8 BL 0x1C16F20
	0x037708CC STR X30, [X31 - 0x20]!
	0x037708D0 STP X20, X19, [X31 + 0x10]
	0x037708D4 ADRP X20, 0xC70000
	0x037708D8 LDRB W8, [X20 + 0xEFF]
	0x037708DC MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC71000
	005 Move X19, 0x9AC000
	006 Move W8, [X20+3824]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AC000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3824], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X0, [X8]
	025 Compare X0, 0
	026 JumpIfEqual {33}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Call InputManager.get_isProcessingEvents, X0
	032 Return X0
	033 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputEventListener get_onEvent()

Disassembly:
	0x037708E0 TBNZ X8, 0x0, 0x3770904
	0x037708E4 ADRP X0, 0x9D6000

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void set_onEvent(UnityEngine.InputSystem.LowLevel.InputEventListener value)

Disassembly:
	0x037708E8 LDR X0, [X0 + 0x9E0]

ISIL:
	001 Return 

Method: System.IObservable`1<UnityEngine.InputSystem.InputControl> get_onAnyButtonPress()

Disassembly:
	0x037708EC BL 0x1C16CF4
	0x037708F0 ADRP X0, 0x9D5000
	0x037708F4 LDR X0, [X0 + 0x2D8]
	0x037708F8 BL 0x1C16CF4
	0x037708FC MOVZ W8, 0x1
	0x03770900 STRB W8, [X20 + 0xEFF]
	0x03770904 CBZ X19, 0x3770938
	0x03770908 ADRP X8, 0x9D5000
	0x0377090C LDR X8, [X8 + 0x2D8]
	0x03770910 ADRP X9, 0x9D6000
	0x03770914 MOV X1, X19
	0x03770918 LDR X8, [X8]
	0x0377091C LDR X9, [X9 + 0x9E0]
	0x03770920 LDP X20, X19, [X31 + 0x10]
	0x03770924 LDR X8, [X8 + 0xB8]
	0x03770928 LDR X2, [X9]
	0x0377092C ADD X0, X8, 0x18
	0x03770930 LDR X30, [X31], #0x20
	0x03770934 B 0x28F14E0
	0x03770938 ADRP X0, 0x988000
	0x0377093C LDR X0, [X0 + 0x528]
	0x03770940 BL 0x1C16D08
	0x03770944 BL 0x1C16F10
	0x03770948 MOV X19, X0
	0x0377094C ADRP X0, 0x98D000
	0x03770950 LDR X0, [X0 + 0xEC8]
	0x03770954 BL 0x1C16D08
	0x03770958 MOV X1, X0
	0x0377095C MOV X0, X19
	0x03770960 MOV X2, X31
	0x03770964 BL 0x330E100
	0x03770968 ADRP X0, 0x9D6000
	0x0377096C LDR X0, [X0 + 0x9E8]
	0x03770970 BL 0x1C16D08
	0x03770974 MOV X1, X0
	0x03770978 MOV X0, X19
	0x0377097C BL 0x1C16DEC
	0x03770980 STR X30, [X31 - 0x20]!
	0x03770984 STP X20, X19, [X31 + 0x10]
	0x03770988 ADRP X20, 0xC70000
	0x0377098C LDRB W8, [X20 + 0xF00]
	0x03770990 MOV X19, X0
	0x03770994 TBNZ X8, 0x0, 0x37709B8
	0x03770998 ADRP X0, 0x9D6000
	0x0377099C LDR X0, [X0 + 0x9F0]
	0x037709A0 BL 0x1C16CF4
	0x037709A4 ADRP X0, 0x9D5000
	0x037709A8 LDR X0, [X0 + 0x2D8]
	0x037709AC BL 0x1C16CF4
	0x037709B0 MOVZ W8, 0x1
	0x037709B4 STRB W8, [X20 + 0xF00]
	0x037709B8 CBZ X19, 0x37709EC
	0x037709BC ADRP X8, 0x9D5000
	0x037709C0 LDR X8, [X8 + 0x2D8]
	0x037709C4 ADRP X9, 0x9D6000
	0x037709C8 MOV X1, X19
	0x037709CC LDR X8, [X8]
	0x037709D0 LDR X9, [X9 + 0x9F0]
	0x037709D4 LDP X20, X19, [X31 + 0x10]
	0x037709D8 LDR X8, [X8 + 0xB8]
	0x037709DC LDR X2, [X9]
	0x037709E0 ADD X0, X8, 0x18
	0x037709E4 LDR X30, [X31], #0x20
	0x037709E8 B 0x28F1650
	0x037709EC ADRP X0, 0x988000
	0x037709F0 LDR X0, [X0 + 0x528]
	0x037709F4 BL 0x1C16D08
	0x037709F8 BL 0x1C16F10
	0x037709FC MOV X19, X0
	0x03770A00 ADRP X0, 0x98D000
	0x03770A04 LDR X0, [X0 + 0xEC8]
	0x03770A08 BL 0x1C16D08
	0x03770A0C MOV X1, X0
	0x03770A10 MOV X0, X19
	0x03770A14 MOV X2, X31
	0x03770A18 BL 0x330E100
	0x03770A1C ADRP X0, 0x9D6000
	0x03770A20 LDR X0, [X0 + 0x9F8]
	0x03770A24 BL 0x1C16D08
	0x03770A28 MOV X1, X0
	0x03770A2C MOV X0, X19
	0x03770A30 BL 0x1C16DEC
	0x03770A34 STR X30, [X31 - 0x30]!
	0x03770A38 STP X22, X21, [X31 + 0x10]
	0x03770A3C STP X20, X19, [X31 + 0x20]
	0x03770A40 ADRP X22, 0xC70000
	0x03770A44 ADRP X21, 0x983000
	0x03770A48 LDRB W8, [X22 + 0xF01]
	0x03770A4C LDR X21, [X21 + 0x6C0]
	0x03770A50 MOV X20, X1
	0x03770A54 MOV X19, X0
	0x03770A58 TBNZ X8, 0x0, 0x3770A88
	0x03770A5C ADRP X0, 0x9AB000
	0x03770A60 LDR X0, [X0 + 0x270]
	0x03770A64 BL 0x1C16CF4
	0x03770A68 ADRP X0, 0x983000
	0x03770A6C LDR X0, [X0 + 0x6C0]
	0x03770A70 BL 0x1C16CF4
	0x03770A74 ADRP X0, 0x9D4000
	0x03770A78 LDR X0, [X0 + 0xF38]
	0x03770A7C BL 0x1C16CF4
	0x03770A80 MOVZ W8, 0x1
	0x03770A84 STRB W8, [X22 + 0xF01]
	0x03770A88 LDR X0, [X21]
	0x03770A8C STR X31, [X31 + 0x8]
	0x03770A90 LDR W8, [X0 + 0xE0]
	0x03770A94 CBNZ W8, 0x3770A9C
	0x03770A98 BL 0x1C16DFC
	0x03770A9C MOV X0, X19
	0x03770AA0 MOV X1, X31
	0x03770AA4 MOV X2, X31
	0x03770AA8 BL 0x3395194
	0x03770AAC TBNZ X0, 0x0, 0x3770B74
	0x03770AB0 MOV X0, X20
	0x03770AB4 MOV X1, X31
	0x03770AB8 BL 0x32277A8
	0x03770ABC TBZ X0, 0x0, 0x3770B1C
	0x03770AC0 CBZ X19, 0x3770B70
	0x03770AC4 LDR X8, [X19]
	0x03770AC8 MOV X0, X19
	0x03770ACC LDP X9, X1, [X8 + 0x1A8]
	0x03770AD0 BLR X9
	0x03770AD4 CBZ X0, 0x3770B70
	0x03770AD8 ADRP X21, 0x9D4000
	0x03770ADC LDR X21, [X21 + 0xF38]
	0x03770AE0 MOV X2, X31
	0x03770AE4 MOV X20, X0
	0x03770AE8 LDR X1, [X21]
	0x03770AEC BL 0x3226588

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xC71000
	009 Move X19, 0x9AC000
	010 Move W8, [X20+3825]
	011 Move X19, [X19+624]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {45}
	016 Move X0, 0x9D7000
	017 Move X0, [X0+2368]
	018 Call 0x1C17CF4
	019 Move X0, 0x9D7000
	020 Move X0, [X0+2376]
	021 Call 0x1C17CF4
	022 Move X0, 0x9D7000
	023 Move X0, [X0+2384]
	024 Call 0x1C17CF4
	025 Move X0, 0x9AC000
	026 Move X0, [X0+624]
	027 Call 0x1C17CF4
	028 Move X0, 0x9D7000
	029 Move X0, [X0+2392]
	030 Call 0x1C17CF4
	031 Move X0, 0x9D7000
	032 Move X0, [X0+2400]
	033 Call 0x1C17CF4
	034 Move X0, 0x9D7000
	035 Move X0, [X0+2408]
	036 Call 0x1C17CF4
	037 Move X0, 0x9D7000
	038 Move X0, [X0+2416]
	039 Call 0x1C17CF4
	040 Move X0, 0x9D7000
	041 Move X0, [X0+2424]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X20+3825], W8
	045 Move X0, [X19]
	046 Move X19, 0x9D7000
	047 Move X22, 0x9D7000
	048 Move W8, [X0+224]
	049 Move X19, [X19+2384]
	050 Move X22, [X22+2424]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, [X19]
	055 Add X1, X31, 8
	056 Move [X31+8], W31
	057 Call 0x1C17E04
	058 Move X8, [X22]
	059 Move X19, X0
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, [X8+184]
	067 Move X23, 0x9D7000
	068 Move X20, [X9+8]
	069 Move X23, [X23+2392]
	070 Compare X20, 0
	071 JumpIfNotEqual {94}
	072 Move W9, [X8+224]
	073 Compare W9, 0
	074 JumpIfNotEqual {78}
	075 Move X0, X8
	076 Call 0x1C17DFC
	077 Move X8, [X22]
	078 Move X9, 0x9D7000
	079 Move X8, [X8+184]
	080 Move X9, [X9+2368]
	081 Move X21, [X8]
	082 Move X0, [X9]
	083 Call 0x1C17F10
	084 Move X8, 0x9D7000
	085 Move X8, [X8+2408]
	086 Move X1, X21
	087 Move X3, X31
	088 Move X20, X0
	089 Move X2, [X8]
	090 Call Func`2<InputEventPtr, Object>..ctor, X0, X1, X2
	091 Move X8, [X22]
	092 Move X8, [X8+184]
	093 Move [X8+8], X20
	094 Move X2, [X23]
	095 Move X0, X19
	096 Move X1, X20
	097 Call 0x222EBD4, X0, X1
	098 Move X8, [X22]
	099 Move X19, X0
	100 Move W9, [X8+224]
	101 Compare W9, 0
	102 JumpIfNotEqual {106}
	103 Move X0, X8
	104 Call 0x1C17DFC
	105 Move X8, [X22]
	106 Move X9, [X8+184]
	107 Move X23, 0x9D7000
	108 Move X20, [X9+16]
	109 Move X23, [X23+2400]
	110 Compare X20, 0
	111 JumpIfNotEqual {134}
	112 Move W9, [X8+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {118}
	115 Move X0, X8
	116 Call 0x1C17DFC
	117 Move X8, [X22]
	118 Move X9, 0x9D7000
	119 Move X8, [X8+184]
	120 Move X9, [X9+2376]
	121 Move X21, [X8]
	122 Move X0, [X9]
	123 Call 0x1C17F10
	124 Move X8, 0x9D7000
	125 Move X8, [X8+2416]
	126 Move X1, X21
	127 Move X3, X31
	128 Move X20, X0
	129 Move X2, [X8]
	130 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	131 Move X8, [X22]
	132 Move X8, [X8+184]
	133 Move [X8+16], X20
	134 Move X2, [X23]
	135 Move X0, X19
	136 Move X1, X20
	137 Call 0x222EF14, X0, X1
	138 Move X20, [X31+48]
	139 Move X19, [X31+56]
	140 Move X22, [X31+32]
	141 Move X21, [X31+40]
	142 Move X30, [X31+16]
	143 Move X23, [X31+24]
	144 Add X31, X31, 64
	145 Return X0

Method: System.Void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x03770AF0 TBZ X0, 0x0, 0x3770B1C
	0x03770AF4 LDR X8, [X21]
	0x03770AF8 CBZ X8, 0x3770B70
	0x03770AFC LDR W9, [X20 + 0x10]
	0x03770B00 LDR W8, [X8 + 0x10]
	0x03770B04 MOV X0, X20
	0x03770B08 MOV W1, W31
	0x03770B0C MOV X3, X31
	0x03770B10 SUB W2, W9, W8
	0x03770B14 BL 0x3228DE4
	0x03770B18 MOV X20, X0
	0x03770B1C ADRP X21, 0x9AB000
	0x03770B20 LDR X21, [X21 + 0x270]
	0x03770B24 LDR X0, [X21]
	0x03770B28 LDR W8, [X0 + 0xE0]
	0x03770B2C CBNZ W8, 0x3770B38
	0x03770B30 BL 0x1C16DFC
	0x03770B34 LDR X0, [X21]
	0x03770B38 LDR X8, [X0 + 0xB8]
	0x03770B3C LDR X8, [X8]
	0x03770B40 CBZ X8, 0x3770B70
	0x03770B44 LDR X8, [X8 + 0x60]
	0x03770B48 ADD X0, X31, 0x8
	0x03770B4C MOV X1, X20
	0x03770B50 MOV X2, X19
	0x03770B54 MOV X3, X31
	0x03770B58 STR X8, [X31 + 0x8]
	0x03770B5C BL 0x3769B8C
	0x03770B60 LDP X20, X19, [X31 + 0x20]
	0x03770B64 LDP X22, X21, [X31 + 0x10]
	0x03770B68 LDR X30, [X31], #0x30
	0x03770B6C RET
	0x03770B70 BL 0x1C16F20
	0x03770B74 ADRP X0, 0x988000
	0x03770B78 LDR X0, [X0 + 0x528]
	0x03770B7C BL 0x1C16D08
	0x03770B80 BL 0x1C16F10
	0x03770B84 MOV X19, X0
	0x03770B88 ADRP X0, 0x98B000
	0x03770B8C LDR X0, [X0 + 0x5E8]
	0x03770B90 BL 0x1C16D08
	0x03770B94 MOV X1, X0
	0x03770B98 MOV X0, X19
	0x03770B9C MOV X2, X31
	0x03770BA0 BL 0x330E100
	0x03770BA4 ADRP X0, 0x9D6000
	0x03770BA8 LDR X0, [X0 + 0xA00]
	0x03770BAC BL 0x1C16D08
	0x03770BB0 MOV X1, X0
	0x03770BB4 MOV X0, X19
	0x03770BB8 BL 0x1C16DEC
	0x03770BBC STR X30, [X31 - 0x20]!
	0x03770BC0 STP X20, X19, [X31 + 0x10]
	0x03770BC4 ADRP X20, 0xC70000
	0x03770BC8 LDRB W8, [X20 + 0xF02]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC71000
	005 Move W8, [X19+3826]
	006 Move [X31+8], X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9AC000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+3826], W8
	016 Add X0, X31, 8
	017 Move X1, X31
	018 Call InputEventPtr.get_valid, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {42}
	023 Move X19, 0x9AC000
	024 Move X19, [X19+624]
	025 Move X0, [X19]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X19]
	031 Move X8, [X0+184]
	032 Move X0, [X8]
	033 Compare X0, 0
	034 JumpIfEqual {65}
	035 Move X1, [X31+8]
	036 Move X2, X31
	037 Call InputManager.QueueEvent, X0, X1
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Return 
	042 Move X0, 0x98C000
	043 Move X0, [X0+1400]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x9D7000
	048 Move X0, [X0+2432]
	049 Call 0x1C17D08
	050 Move X20, X0
	051 Move X0, 0x9AC000
	052 Move X0, [X0+3440]
	053 Call 0x1C17D08
	054 Move X2, X0
	055 Move X0, X19
	056 Move X1, X20
	057 Move X3, X31
	058 Call ArgumentException..ctor, X0, X1, X2
	059 Move X0, 0x9D7000
	060 Move X0, [X0+2440]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC
	065 Call 0x1C17F20

Method: System.Void QueueEvent(ref TEvent inputEvent)

Disassembly:
	0x0220D040 BL 0x1D2C690
	0x0220D044 MOV X0, X22
	0x0220D048 BL 0x1C16F18
	0x0220D04C BL 0x1990590
	0x0220D050 STR X30, [X31 - 0x20]!
	0x0220D054 STP X20, X19, [X31 + 0x10]
	0x0220D058 LDR X8, [X1 + 0x38]
	0x0220D05C MOV X19, X1
	0x0220D060 MOV X20, X0
	0x0220D064 CBNZ X8, 0x220D070
	0x0220D068 MOV X0, X19
	0x0220D06C BL 0x1C5C6E0
	0x0220D070 CBZ X20, 0x220D098
	0x0220D074 MOV X0, X20
	0x0220D078 MOV X1, X31
	0x0220D07C BL 0x3C356F8
	0x0220D080 CBZ X0, 0x220D098
	0x0220D084 LDR X8, [X19 + 0x38]
	0x0220D088 LDP X20, X19, [X31 + 0x10]
	0x0220D08C LDR X1, [X8]
	0x0220D090 LDR X30, [X31], #0x20
	0x0220D094 B 0x21A453C
	0x0220D098 BL 0x1C16F20
	0x0220D09C STP X29, X30, [X31 - 0x60]!
	0x0220D0A0 STP X28, X27, [X31 + 0x10]
	0x0220D0A4 STP X26, X25, [X31 + 0x20]
	0x0220D0A8 STP X24, X23, [X31 + 0x30]
	0x0220D0AC STP X22, X21, [X31 + 0x40]
	0x0220D0B0 STP X20, X19, [X31 + 0x50]
	0x0220D0B4 ADD X29, X31, 0x0
	0x0220D0B8 SUB X31, X31, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X20, X1
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {18}
	010 Move X0, 0x1F0F000
	011 Move X0, [X0+624]
	012 Call 0x1C17CF4
	013 Move X8, [X20+56]
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X20
	017 Call 0x1C5D6E0
	018 Move X21, 0x1F0F000
	019 Move X21, [X21+624]
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X0, [X8]
	028 Compare X0, 0
	029 JumpIfEqual {39}
	030 Move X8, [X20+56]
	031 Move X1, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8+8]
	035 Move X3, [X2]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X3
	039 Call 0x1C17F20

Method: System.Void QueueStateEvent(UnityEngine.InputSystem.InputDevice device, TState state, System.Double time = -1)

Disassembly:
	0x0220D0BC MRS X8, 0xC000
	0x0220D0C0 STUR X8, [X29 - 0x28]
	0x0220D0C4 LDR X8, [X8 + 0x28]
	0x0220D0C8 MOV X20, X2
	0x0220D0CC MOV X23, X0
	0x0220D0D0 STUR X8, [X29 - 0x8]
	0x0220D0D4 STUR X0, [X29 - 0x20]
	0x0220D0D8 LDR X9, [X2 + 0x38]
	0x0220D0DC STUR X1, [X29 - 0x30]
	0x0220D0E0 CBNZ X9, 0x220D104
	0x0220D0E4 ADRP X0, 0x1EE6000
	0x0220D0E8 LDR X0, [X0 + 0xDF8]
	0x0220D0EC BL 0x1C16CF4
	0x0220D0F0 LDR X9, [X20 + 0x38]
	0x0220D0F4 CBNZ X9, 0x220D104
	0x0220D0F8 MOV X0, X20
	0x0220D0FC BL 0x1C5C6E0
	0x0220D100 LDR X9, [X20 + 0x38]
	0x0220D104 LDR X8, [X9]
	0x0220D108 ADD X10, X8, 0x135
	0x0220D10C LDRH W10, [X10]
	0x0220D110 TBNZ X10, 0x0, 0x220D130
	0x0220D114 MOV X0, X8
	0x0220D118 BL 0x1C5C684
	0x0220D11C LDR X9, [X20 + 0x38]
	0x0220D120 LDR X8, [X9]
	0x0220D124 ADD X10, X8, 0x135
	0x0220D128 LDRH W10, [X10]
	0x0220D12C B 0x220D134
	0x0220D130 MOV X0, X8
	0x0220D134 LDR W11, [X0 + 0xFC]
	0x0220D138 ADD X12, X31, 0x0
	0x0220D13C ADD W11, W11, 0x10
	0x0220D140 ADD X11, X11, 0xF
	0x0220D144 AND X11, X11, 0x1FFFFFFFF
	0x0220D148 SUB X25, X12, X11
	0x0220D14C ADD X31, X25, 0x0
	0x0220D150 TBNZ X10, 0x0, 0x220D170
	0x0220D154 MOV X0, X8
	0x0220D158 BL 0x1C5C684
	0x0220D15C LDR X9, [X20 + 0x38]
	0x0220D160 LDR X8, [X9]
	0x0220D164 ADD X10, X8, 0x135
	0x0220D168 LDRH W10, [X10]
	0x0220D16C B 0x220D174
	0x0220D170 MOV X0, X8
	0x0220D174 LDR W11, [X0 + 0xFC]
	0x0220D178 ADD X12, X31, 0x0
	0x0220D17C ADD W11, W11, 0x10
	0x0220D180 ADD X11, X11, 0xF
	0x0220D184 AND X11, X11, 0x1FFFFFFFF
	0x0220D188 SUB X24, X12, X11
	0x0220D18C ADD X31, X24, 0x0
	0x0220D190 LDR W21, [X8 + 0xFC]
	0x0220D194 ADD X11, X31, 0x0
	0x0220D198 ADD X12, X21, 0xF
	0x0220D19C AND X12, X12, 0x1FFFFFFFF
	0x0220D1A0 SUB X22, X11, X12
	0x0220D1A4 ADD X31, X22, 0x0
	0x0220D1A8 TBNZ X10, 0x0, 0x220D1BC
	0x0220D1AC MOV X0, X8
	0x0220D1B0 BL 0x1C5C684
	0x0220D1B4 LDR X9, [X20 + 0x38]
	0x0220D1B8 MOV X8, X0
	0x0220D1BC LDP X10, X1, [X9]
	0x0220D1C0 SUB X9, X29, 0x20
	0x0220D1C4 SUB X5, X29, 0x10
	0x0220D1C8 MOV X0, X8
	0x0220D1CC LDR W10, [X10 + 0x28]
	0x0220D1D0 MOV X2, X25
	0x0220D1D4 MOV X4, X31
	0x0220D1D8 CMP W10, 0x0
	0x0220D1DC CSEL X3, X23, X9, LT
	0x0220D1E0 BL 0x1C17728
	0x0220D1E4 ADRP X8, 0x1EE6000
	0x0220D1E8 LDR X8, [X8 + 0xDF8]
	0x0220D1EC LDUR X23, [X29 - 0x10]
	0x0220D1F0 LDR X0, [X8]
	0x0220D1F4 LDR W8, [X0 + 0xE0]
	0x0220D1F8 CBNZ W8, 0x220D200
	0x0220D1FC BL 0x1C16DFC
	0x0220D200 MOV X0, X23
	0x0220D204 MOV X1, X31
	0x0220D208 BL 0x33B02B8
	0x0220D20C CBZ X0, 0x220D35C
	0x0220D210 MOV X1, X31
	0x0220D214 MOV X23, X0
	0x0220D218 BL 0x3395B7C
	0x0220D21C MOV W25, W0
	0x0220D220 MOV W26, W31
	0x0220D224 BIC W19, W0, W0, 0x1F
	0x0220D228 SUB X28, X29, 0x20
	0x0220D22C CMP W19, W26
	0x0220D230 B.EQ 0x220D2F0
	0x0220D234 MOV X0, X23
	0x0220D238 MOV W1, W26
	0x0220D23C MOV X2, X31
	0x0220D240 BL 0x3395BDC
	0x0220D244 LDR X9, [X20 + 0x38]
	0x0220D248 MOV X27, X0
	0x0220D24C LDR X8, [X9]
	0x0220D250 LDRB W10, [X8 + 0x135]
	0x0220D254 TBNZ X10, 0x0, 0x220D268
	0x0220D258 MOV X0, X8
	0x0220D25C BL 0x1C5C684
	0x0220D260 LDR X9, [X20 + 0x38]
	0x0220D264 MOV X8, X0
	0x0220D268 LDR X10, [X9]
	0x0220D26C LDUR X11, [X29 - 0x20]
	0x0220D270 LDR X1, [X9 + 0x10]
	0x0220D274 SUB X4, X29, 0x10
	0x0220D278 LDR W10, [X10 + 0x28]
	0x0220D27C SUB X5, X29, 0x14
	0x0220D280 MOV X0, X8
	0x0220D284 MOV X2, X24
	0x0220D288 CMP W10, 0x0
	0x0220D28C CSEL X3, X11, X28, LT
	0x0220D290 STUR X27, [X29 - 0x10]
	0x0220D294 BL 0x1C17728
	0x0220D298 LDURB W8, [X29 - 0x14]
	0x0220D29C ADD W26, W26, 0x1
	0x0220D2A0 CBZ W8, 0x220D22C
	0x0220D2A4 SDIV W8, W26, W25
	0x0220D2A8 MSUB W1, W8, W25, W26
	0x0220D2AC MOV X0, X23
	0x0220D2B0 MOV X2, X31
	0x0220D2B4 BL 0x3395BDC
	0x0220D2B8 LDR X8, [X20 + 0x38]
	0x0220D2BC MOV X20, X0
	0x0220D2C0 LDR X1, [X8]
	0x0220D2C4 LDRB W8, [X1 + 0x135]
	0x0220D2C8 TBNZ X8, 0x0, 0x220D2D8
	0x0220D2CC MOV X0, X1
	0x0220D2D0 BL 0x1C5C684
	0x0220D2D4 MOV X1, X0
	0x0220D2D8 MOV X0, X20
	0x0220D2DC MOV X2, X22
	0x0220D2E0 BL 0x1C16E10
	0x0220D2E4 MOV X1, X0
	0x0220D2E8 LDUR X0, [X29 - 0x30]
	0x0220D2EC B 0x220D320
	0x0220D2F0 LDR X8, [X20 + 0x38]
	0x0220D2F4 LDUR X9, [X29 - 0x20]
	0x0220D2F8 MOV X0, X22
	0x0220D2FC MOV X2, X21
	0x0220D300 LDR X8, [X8]
	0x0220D304 LDR W8, [X8 + 0x28]
	0x0220D308 CMP W8, 0x0
	0x0220D30C SUB X8, X29, 0x20
	0x0220D310 CSEL X1, X9, X8, LT
	0x0220D314 BL 0x3EB1AC0
	0x0220D318 LDUR X0, [X29 - 0x30]
	0x0220D31C MOV X1, X22
	0x0220D320 MOV X2, X21
	0x0220D324 BL 0x3EB1AC0
	0x0220D328 LDUR X8, [X29 - 0x28]
	0x0220D32C LDR X8, [X8 + 0x28]
	0x0220D330 LDUR X9, [X29 - 0x8]
	0x0220D334 CMP X8, X9
	0x0220D338 B.NE 0x220D360
	0x0220D33C ADD X31, X29, 0x0
	0x0220D340 LDP X20, X19, [X31 + 0x50]
	0x0220D344 LDP X22, X21, [X31 + 0x40]
	0x0220D348 LDP X24, X23, [X31 + 0x30]
	0x0220D34C LDP X26, X25, [X31 + 0x20]
	0x0220D350 LDP X28, X27, [X31 + 0x10]
	0x0220D354 LDP X29, X30, [X31], #0x60
	0x0220D358 RET
	0x0220D35C BL 0x1C16F20
	0x0220D360 BL 0x3EB1B20
	0x0220D364 STR X30, [X31 - 0x20]!
	0x0220D368 STP X20, X19, [X31 + 0x10]
	0x0220D36C MOV X19, X0
	0x0220D370 LDP X0, X8, [X0 + 0x10]
	0x0220D374 MOV X20, X1
	0x0220D378 CBZ X8, 0x220D39C
	0x0220D37C CBZ X0, 0x220D3C8
	0x0220D380 LDR X9, [X0]
	0x0220D384 MOV X1, X8
	0x0220D388 MOV X2, X20
	0x0220D38C LDR X10, [X9 + 0x278]
	0x0220D390 LDR X3, [X9 + 0x280]
	0x0220D394 BLR X10
	0x0220D398 B 0x220D3B4
	0x0220D39C CBZ X0, 0x220D3C8
	0x0220D3A0 LDR X8, [X0]
	0x0220D3A4 MOV X1, X20
	0x0220D3A8 LDR X9, [X8 + 0x288]
	0x0220D3AC LDR X2, [X8 + 0x290]
	0x0220D3B0 BLR X9
	0x0220D3B4 STR X31, [X19 + 0x10]
	0x0220D3B8 MOV X0, X20
	0x0220D3BC LDP X20, X19, [X31 + 0x10]
	0x0220D3C0 LDR X30, [X31], #0x20
	0x0220D3C4 RET
	0x0220D3C8 BL 0x1C16F20
	0x0220D3CC STR X30, [X31 - 0x20]!
	0x0220D3D0 STP X20, X19, [X31 + 0x10]
	0x0220D3D4 LDR X8, [X1 + 0x38]
	0x0220D3D8 MOV X19, X0
	0x0220D3DC CBNZ X8, 0x220D3F0
	0x0220D3E0 MOV X0, X1
	0x0220D3E4 MOV X20, X1
	0x0220D3E8 BL 0x1C5C6E0
	0x0220D3EC LDR X8, [X20 + 0x38]
	0x0220D3F0 LDR X1, [X8]
	0x0220D3F4 MOV X0, X19
	0x0220D3F8 LDP X20, X19, [X31 + 0x10]
	0x0220D3FC LDR X30, [X31], #0x20
	0x0220D400 B 0x2171BEC
	0x0220D404 STR X30, [X31 - 0x20]!
	0x0220D408 STP X20, X19, [X31 + 0x10]
	0x0220D40C LDR X8, [X1 + 0x38]
	0x0220D410 MOV W19, W0
	0x0220D414 CBNZ X8, 0x220D428
	0x0220D418 MOV X0, X1
	0x0220D41C MOV X20, X1
	0x0220D420 BL 0x1C5C6E0
	0x0220D424 LDR X8, [X20 + 0x38]
	0x0220D428 LDR X1, [X8 + 0x8]
	0x0220D42C MOV W0, W19
	0x0220D430 LDP X20, X19, [X31 + 0x10]
	0x0220D434 LDR X30, [X31], #0x20
	0x0220D438 B 0x2171BE0
	0x0220D43C STR X30, [X31 - 0x20]!
	0x0220D440 STP X20, X19, [X31 + 0x10]
	0x0220D444 LDR X8, [X1 + 0x38]
	0x0220D448 MOV W19, W0
	0x0220D44C CBNZ X8, 0x220D460
	0x0220D450 MOV X0, X1
	0x0220D454 MOV X20, X1
	0x0220D458 BL 0x1C5C6E0
	0x0220D45C LDR X8, [X20 + 0x38]
	0x0220D460 LDR X1, [X8 + 0x8]
	0x0220D464 MOV W0, W19
	0x0220D468 LDP X20, X19, [X31 + 0x10]
	0x0220D46C LDR X30, [X31], #0x20
	0x0220D470 B 0x2171BE8
	0x0220D474 STR X30, [X31 - 0x20]!
	0x0220D478 STP X20, X19, [X31 + 0x10]
	0x0220D47C LDR X8, [X1 + 0x38]
	0x0220D480 MOV W19, W0
	0x0220D484 CBNZ X8, 0x220D498
	0x0220D488 MOV X0, X1
	0x0220D48C MOV X20, X1
	0x0220D490 BL 0x1C5C6E0
	0x0220D494 LDR X8, [X20 + 0x38]
	0x0220D498 LDR X1, [X8 + 0x8]
	0x0220D49C MOV W0, W19
	0x0220D4A0 LDP X20, X19, [X31 + 0x10]
	0x0220D4A4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-96], D8
	002 Move [X31+8], X29
	003 Move [X31+16], X30
	004 Move [X31+24], X28
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 8
	014 Subtract X31, X31, 608
	015 Add X19, X31, 0
	016 NotImplemented "Instruction MRS not yet implemented."
	017 Move X8, [X26+40]
	018 Move X20, X2
	019 Move V8, V0
	020 Move X21, X1
	021 Move [X29-16], X8
	022 Move X8, [X2+56]
	023 Move X22, X0
	024 Compare X8, 0
	025 JumpIfNotEqual {47}
	026 Move X0, 0x1F0F000
	027 Move X0, [X0+3792]
	028 Call 0x1C17CF4
	029 Move X0, 0x1F0F000
	030 Move X0, [X0+3952]
	031 Call 0x1C17CF4
	032 Move X0, 0x1F0F000
	033 Move X0, [X0+3784]
	034 Call 0x1C17CF4
	035 Move X0, 0x1F0F000
	036 Move X0, [X0+624]
	037 Call 0x1C17CF4
	038 Move X0, 0x1F0F000
	039 Move X0, [X0+3960]
	040 Call 0x1C17CF4
	041 Move X8, [X20+56]
	042 Compare X8, 0
	043 JumpIfNotEqual {47}
	044 Move X0, X20
	045 Call 0x1C5D6E0
	046 Move X8, [X20+56]
	047 Move X0, [X8+16]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move W8, [X0+252]
	055 Add X9, X31, 0
	056 Add W8, W8, 16
	057 Add X8, X8, 15
	058 And X8, X8, 0x1FFFFFFFF
	059 Subtract X23, X9, X8
	060 Add X31, X23, 0
	061 Add X0, X19, 64
	062 Move W2, 536
	063 Move W1, W31
	064 Call 0x3EB2B10
	065 Compare X22, 0
	066 JumpIfEqual {191}
	067 Move W8, [X22+232]
	068 Add W31, W8, 1
	069 Move X8, [X20+56]
	070 Move X0, [X8]
	071 Move X8, [X0]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X8, 0x1F0F000
	075 Move X8, [X8+3784]
	076 Move W24, W0
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move X8, [X8]
	079 Move X8, [X8+184]
	080 Move X25, [X8]
	081 Compare X25, 0
	082 JumpIfEqual {190}
	083 Move X10, 0x1F0F000
	084 Move X8, [X25]
	085 Move X10, [X10+3792]
	086 NotImplemented "Instruction LDRH not yet implemented."
	087 Move X1, [X10]
	088 Compare X9, 0
	089 JumpIfEqual {96}
	090 Move X10, [X8+176]
	091 Add X10, X10, 8
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Subtract X9, X9, 1
	095 Add X10, X10, 16
	096 Move W2, 19
	097 Move X0, X25
	098 Call 0x1C5D788
	099 Move V0, [X8+8]
	100 Add D0, D0, D8
	101 Move W9, [X10]
	102 Add W9, W9, 19
	103 Add X8, X8, W9
	104 Add X0, X8, 312
	105 Move X8, [X0]
	106 Move X1, [X0+8]
	107 Move X0, X25
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move W3, [X22+224]
	110 Move W1, 0x4154
	111 Add W2, W24, 24
	112 Add X0, X19, 8
	113 NotImplemented "Instruction MOVK not yet implemented."
	114 Move X4, X31
	115 Move W25, W24
	116 Move [X19+8], X31
	117 Move [X19+16], X31
	118 Move [X19+24], W31
	119 Call InputEvent..ctor, X0, X1, X2, X3, V0
	120 Move W8, [X19+24]
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 Move [X19+48], W8
	123 Move [X19+2], V0
	124 Move X8, [X20+56]
	125 Move X0, [X8+16]
	126 Move W9, [X0+309]
	127 Move TEMP, X9
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {133}
	131 Call 0x1C5D684
	132 Move X8, [X20+56]
	133 Move X1, [X8+24]
	134 Add X5, X19, 0
	135 Move X2, X23
	136 Move X3, X21
	137 Move X4, X31
	138 Call 0x1C18728
	139 Move V0, [X19+2]
	140 Move W8, [X19+48]
	141 Move W9, [X19]
	142 Move [X19+88], W31
	143 Move [X19+4], V0
	144 Move X0, X21
	145 Move [X19+80], W8
	146 Move [X19+84], W9
	147 Move X8, [X20+56]
	148 Add X9, X19, 64
	149 Add X20, X9, 24
	150 Move X1, [X8+32]
	151 Move X8, [X1]
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Move X1, X0
	154 Move X0, X20
	155 Move X2, X25
	156 Move X3, X31
	157 Call UnsafeUtility.MemCpy, X0, X1, X2
	158 Move X20, 0x1F0F000
	159 Move X20, [X20+624]
	160 Move X0, [X20]
	161 Move W8, [X0+224]
	162 Compare W8, 0
	163 JumpIfNotEqual {166}
	164 Call 0x1C17DFC
	165 Move X0, [X20]
	166 Move X8, [X0+184]
	167 Move X0, [X8]
	168 Compare X0, 0
	169 JumpIfEqual {190}
	170 Add X1, X19, 64
	171 Move X2, X31
	172 Call InputManager.QueueEvent, X0, X1
	173 Move X8, [X26+40]
	174 NotImplemented "Instruction LDUR not yet implemented."
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Subtract X31, X29, 8
	177 Move X20, [X31+80]
	178 Move X19, [X31+88]
	179 Move X22, [X31+64]
	180 Move X21, [X31+72]
	181 Move X24, [X31+48]
	182 Move X23, [X31+56]
	183 Move X26, [X31+32]
	184 Move X25, [X31+40]
	185 Move X28, [X31+24]
	186 Move X29, [X31+8]
	187 Move X30, [X31+16]
	188 Move V8, [X31+96]
	189 Return 
	190 Call 0x1C17F20
	191 Move X0, 0x1EEC000
	192 Move X0, [X0+1320]
	193 Call 0x1C17D08
	194 Call 0x1C17F10
	195 Move X21, X0
	196 Move X0, 0x1F0F000
	197 Move X0, [X0+3360]
	198 Call 0x1C17D08
	199 Move X1, X0
	200 Move X0, X21
	201 Move X2, X31
	202 Call ArgumentNullException..ctor, X0, X1
	203 Move X0, X21
	204 Move X0, 0x1F0F000
	205 Move X0, [X0+3968]
	206 Call 0x1C17D08
	207 Move X1, X22
	208 Move X2, X31
	209 Call String.Format, X0, X1
	210 Move X21, X0
	211 Move X0, 0x1EE7000
	212 Move X0, [X0+1456]
	213 Call 0x1C17D08
	214 Call 0x1C17F10
	215 Move X1, X21
	216 Move X2, X31
	217 Move X22, X0
	218 Call InvalidOperationException..ctor, X0, X1
	219 Move X8, [X20+56]
	220 Move X0, 0x1EE7000
	221 Move X21, [X8+8]
	222 Move X0, [X0+1728]
	223 Call 0x1C17D08
	224 Call 0x19913D0
	225 Move X0, X21
	226 Move X1, X31
	227 Call Type.GetTypeFromHandle, X0
	228 Move X21, X0
	229 Call 0x19913C0
	230 Move X8, [X21]
	231 Move X0, X21
	232 Move X9, [X8+424]
	233 Move X1, [X8+432]
	234 NotImplemented "Instruction BLR not yet implemented."
	235 Move W8, 512
	236 Move X21, X0
	237 Move [X19+32], W8
	238 Move X0, 0x1EE7000
	239 Move X0, [X0+1880]
	240 Call 0x1C17D08
	241 Add X1, X19, 32
	242 Call 0x1C17E04
	243 Move X22, X0
	244 Move X0, 0x1F0F000
	245 Move X0, [X0+3976]
	246 Call 0x1C17D08
	247 Move X1, X21
	248 Move X2, X22
	249 Move X3, X31
	250 Call String.Format, X0, X1, X2
	251 Move X21, X0
	252 Move X0, 0x1EEF000
	253 Move X0, [X0+1400]
	254 Call 0x1C17D08
	255 Call 0x1C17F10
	256 Move X22, X0
	257 Move X0, 0x1F0F000
	258 Move X0, [X0+3480]
	259 Call 0x1C17D08
	260 Move X2, X0
	261 Move X0, X22
	262 Move X1, X21
	263 Move X3, X31
	264 Call ArgumentException..ctor, X0, X1, X2
	265 Move X0, X22
	266 Move X1, X20
	267 Call 0x1C17DEC
	268 Call 0x3EB2B20

Method: System.Void QueueDeltaStateEvent(UnityEngine.InputSystem.InputControl control, TDelta delta, System.Double time = -1)

Disassembly:
	0x0220CA9C LDR X8, [X19 + 0x38]
	0x0220CAA0 CBNZ X8, 0x220CAAC
	0x0220CAA4 MOV X0, X19
	0x0220CAA8 BL 0x1C5C6E0
	0x0220CAAC LDRB W8, [X20 + 0x10]!
	0x0220CAB0 CBZ W8, 0x220CAEC
	0x0220CAB4 ADRP X8, 0x1F0F000
	0x0220CAB8 LDR X8, [X8 + 0xF98]
	0x0220CABC MOV X0, X20
	0x0220CAC0 LDR X1, [X8]
	0x0220CAC4 BL 0x243D874
	0x0220CAC8 STP X0, X1, [X31]
	0x0220CACC LDR X8, [X19 + 0x38]
	0x0220CAD0 ADD X0, X31, 0x0
	0x0220CAD4 LDR X1, [X8]
	0x0220CAD8 BL 0x22B4C24
	0x0220CADC LDP X20, X19, [X31 + 0x20]
	0x0220CAE0 LDR X30, [X31 + 0x10]
	0x0220CAE4 ADD X31, X31, 0x30
	0x0220CAE8 RET
	0x0220CAEC ADRP X0, 0x1EE7000
	0x0220CAF0 LDR X0, [X0 + 0x5B0]
	0x0220CAF4 BL 0x1C16D08
	0x0220CAF8 BL 0x1C16F10
	0x0220CAFC MOV X20, X0
	0x0220CB00 ADRP X0, 0x1F0F000
	0x0220CB04 LDR X0, [X0 + 0xFA0]
	0x0220CB08 BL 0x1C16D08
	0x0220CB0C MOV X1, X0
	0x0220CB10 MOV X0, X20
	0x0220CB14 MOV X2, X31
	0x0220CB18 BL 0x337DF1C
	0x0220CB1C MOV X0, X20
	0x0220CB20 MOV X1, X19
	0x0220CB24 BL 0x1C16DEC
	0x0220CB28 STP X29, X30, [X31 - 0x40]!
	0x0220CB2C STP X24, X23, [X31 + 0x10]
	0x0220CB30 STP X22, X21, [X31 + 0x20]
	0x0220CB34 STP X20, X19, [X31 + 0x30]
	0x0220CB38 ADD X29, X31, 0x0
	0x0220CB3C SUB X31, X31, 0x20
	0x0220CB40 MRS X24, 0xC000
	0x0220CB44 LDR X8, [X24 + 0x28]
	0x0220CB48 MOV X19, X2
	0x0220CB4C MOV X20, X1
	0x0220CB50 MOV X21, X0
	0x0220CB54 STUR X8, [X29 - 0x8]
	0x0220CB58 LDR X8, [X2 + 0x38]
	0x0220CB5C CBNZ X8, 0x220CB8C
	0x0220CB60 ADRP X0, 0x1F0F000
	0x0220CB64 LDR X0, [X0 + 0xF90]
	0x0220CB68 BL 0x1C16CF4
	0x0220CB6C ADRP X0, 0x1F0F000
	0x0220CB70 LDR X0, [X0 + 0xF98]
	0x0220CB74 BL 0x1C16CF4
	0x0220CB78 LDR X8, [X19 + 0x38]
	0x0220CB7C CBNZ X8, 0x220CB8C
	0x0220CB80 MOV X0, X19
	0x0220CB84 BL 0x1C5C6E0
	0x0220CB88 LDR X8, [X19 + 0x38]
	0x0220CB8C LDR X8, [X8 + 0x8]
	0x0220CB90 LDR W22, [X8 + 0xFC]
	0x0220CB94 ADD X8, X31, 0x0
	0x0220CB98 ADD X9, X22, 0xF
	0x0220CB9C AND X9, X9, 0x1FFFFFFFF
	0x0220CBA0 SUB X23, X8, X9
	0x0220CBA4 ADD X31, X23, 0x0
	0x0220CBA8 LDRB W8, [X21 + 0x10]!
	0x0220CBAC CBZ W8, 0x220CC24
	0x0220CBB0 ADRP X8, 0x1F0F000
	0x0220CBB4 LDR X8, [X8 + 0xF98]
	0x0220CBB8 MOV X0, X21
	0x0220CBBC LDR X1, [X8]
	0x0220CBC0 BL 0x243D874
	0x0220CBC4 STP X0, X1, [X29 - 0x20]
	0x0220CBC8 LDR X8, [X19 + 0x38]
	0x0220CBCC SUB X2, X29, 0x20
	0x0220CBD0 SUB X3, X29, 0x10
	0x0220CBD4 MOV X4, X23
	0x0220CBD8 LDR X1, [X8]
	0x0220CBDC LDR X0, [X1]
	0x0220CBE0 STUR X23, [X29 - 0x10]
	0x0220CBE4 LDR X8, [X1 + 0x10]
	0x0220CBE8 BLR X8
	0x0220CBEC MOV X0, X20
	0x0220CBF0 MOV X1, X23
	0x0220CBF4 MOV X2, X22
	0x0220CBF8 BL 0x3EB1AC0
	0x0220CBFC LDR X8, [X24 + 0x28]
	0x0220CC00 LDUR X9, [X29 - 0x8]
	0x0220CC04 CMP X8, X9
	0x0220CC08 B.NE 0x220CC60
	0x0220CC0C ADD X31, X29, 0x0
	0x0220CC10 LDP X20, X19, [X31 + 0x30]
	0x0220CC14 LDP X22, X21, [X31 + 0x20]
	0x0220CC18 LDP X24, X23, [X31 + 0x10]
	0x0220CC1C LDP X29, X30, [X31], #0x40
	0x0220CC20 RET
	0x0220CC24 ADRP X0, 0x1EE7000
	0x0220CC28 LDR X0, [X0 + 0x5B0]
	0x0220CC2C BL 0x1C16D08
	0x0220CC30 BL 0x1C16F10
	0x0220CC34 MOV X20, X0
	0x0220CC38 ADRP X0, 0x1F0F000
	0x0220CC3C LDR X0, [X0 + 0xFA0]
	0x0220CC40 BL 0x1C16D08
	0x0220CC44 MOV X1, X0
	0x0220CC48 MOV X0, X20
	0x0220CC4C MOV X2, X31
	0x0220CC50 BL 0x337DF1C
	0x0220CC54 MOV X0, X20
	0x0220CC58 MOV X1, X19
	0x0220CC5C BL 0x1C16DEC
	0x0220CC60 BL 0x3EB1B20
	0x0220CC64 STR X30, [X31 - 0x20]!
	0x0220CC68 STP X20, X19, [X31 + 0x10]
	0x0220CC6C LDR X8, [X1 + 0x38]
	0x0220CC70 MOV X19, X1
	0x0220CC74 MOV X20, X0
	0x0220CC78 CBNZ X8, 0x220CC84
	0x0220CC7C MOV X0, X19
	0x0220CC80 BL 0x1C5C6E0
	0x0220CC84 CBZ X20, 0x220CCA8
	0x0220CC88 MOV X0, X20
	0x0220CC8C MOV X1, X31
	0x0220CC90 BL 0x3C32ECC
	0x0220CC94 LDR X8, [X19 + 0x38]
	0x0220CC98 LDP X20, X19, [X31 + 0x10]
	0x0220CC9C LDR X1, [X8]
	0x0220CCA0 LDR X30, [X31], #0x20
	0x0220CCA4 B 0x220CCAC
	0x0220CCA8 BL 0x1C16F20
	0x0220CCAC STR X30, [X31 - 0x20]!
	0x0220CCB0 STP X20, X19, [X31 + 0x10]
	0x0220CCB4 LDR X8, [X1 + 0x38]
	0x0220CCB8 MOV X20, X1
	0x0220CCBC MOV X19, X0
	0x0220CCC0 CBNZ X8, 0x220CCCC
	0x0220CCC4 MOV X0, X20
	0x0220CCC8 BL 0x1C5C6E0
	0x0220CCCC STR X31, [X31 + 0x8]
	0x0220CCD0 CBZ X19, 0x220CD10
	0x0220CCD4 LDR X8, [X20 + 0x38]
	0x0220CCD8 ADD X1, X31, 0x8
	0x0220CCDC MOV X0, X19
	0x0220CCE0 LDR X2, [X8]
	0x0220CCE4 BL 0x21E6600
	0x0220CCE8 TBZ X0, 0x0, 0x220CCF4
	0x0220CCEC LDR X0, [X31 + 0x8]
	0x0220CCF0 B 0x220CD04
	0x0220CCF4 LDR X8, [X20 + 0x38]
	0x0220CCF8 MOV X0, X19
	0x0220CCFC LDR X1, [X8 + 0x10]
	0x0220CD00 BL 0x21E51FC
	0x0220CD04 LDP X20, X19, [X31 + 0x10]
	0x0220CD08 LDR X30, [X31], #0x20
	0x0220CD0C RET
	0x0220CD10 BL 0x1C16F20
	0x0220CD14 STP X30, X23, [X31 - 0x30]!
	0x0220CD18 STP X22, X21, [X31 + 0x10]
	0x0220CD1C STP X20, X19, [X31 + 0x20]
	0x0220CD20 LDR X8, [X1 + 0x38]
	0x0220CD24 MOV X19, X1
	0x0220CD28 MOV X21, X0
	0x0220CD2C CBNZ X8, 0x220CD74
	0x0220CD30 ADRP X0, 0x1EE7000
	0x0220CD34 LDR X0, [X0 + 0xE00]
	0x0220CD38 BL 0x1C16CF4
	0x0220CD3C ADRP X0, 0x1F0F000
	0x0220CD40 LDR X0, [X0 + 0xFA8]
	0x0220CD44 BL 0x1C16CF4
	0x0220CD48 ADRP X0, 0x1F0F000
	0x0220CD4C LDR X0, [X0 + 0xFB0]
	0x0220CD50 BL 0x1C16CF4
	0x0220CD54 ADRP X0, 0x1EE7000
	0x0220CD58 LDR X0, [X0 + 0xE18]
	0x0220CD5C BL 0x1C16CF4
	0x0220CD60 LDR X8, [X19 + 0x38]
	0x0220CD64 CBNZ X8, 0x220CD74
	0x0220CD68 MOV X0, X19
	0x0220CD6C BL 0x1C5C6E0
	0x0220CD70 LDR X8, [X19 + 0x38]
	0x0220CD74 LDR X0, [X8]
	0x0220CD78 LDRB W8, [X0 + 0x135]
	0x0220CD7C TBNZ X8, 0x0, 0x220CD84
	0x0220CD80 BL 0x1C5C684
	0x0220CD84 BL 0x1C16F10
	0x0220CD88 LDR X8, [X19 + 0x38]
	0x0220CD8C MOV X20, X0
	0x0220CD90 LDR X1, [X8 + 0x8]
	0x0220CD94 BL 0x301B7C4
	0x0220CD98 CBZ X21, 0x220CF88
	0x0220CD9C ADRP X10, 0x1F0F000
	0x0220CDA0 LDR X8, [X21]
	0x0220CDA4 LDR X10, [X10 + 0xFA8]
	0x0220CDA8 LDRH W9, [X8 + 0x12E]
	0x0220CDAC LDR X1, [X10]
	0x0220CDB0 CBZ X9, 0x220CDD4
	0x0220CDB4 LDR X10, [X8 + 0xB0]
	0x0220CDB8 ADD X10, X10, 0x8
	0x0220CDBC LDUR X11, [X10 - 0x8]
	0x0220CDC0 CMP X11, X1
	0x0220CDC4 B.EQ 0x220CDE4
	0x0220CDC8 SUBS X9, X9, 0x1
	0x0220CDCC ADD X10, X10, 0x10
	0x0220CDD0 B.NE 0x220CDBC
	0x0220CDD4 MOV X0, X21
	0x0220CDD8 MOV W2, W31
	0x0220CDDC BL 0x1C5C788
	0x0220CDE0 B 0x220CDF0
	0x0220CDE4 LDRSW X9, [X10]
	0x0220CDE8 ADD X8, X8, X9, 0x4, LSL
	0x0220CDEC ADD X0, X8, 0x138
	0x0220CDF0 LDP X8, X1, [X0]
	0x0220CDF4 MOV X0, X21
	0x0220CDF8 BLR X8
	0x0220CDFC MOV X21, X0
	0x0220CE00 CBZ X0, 0x220CF8C
	0x0220CE04 ADRP X22, 0x1EE7000
	0x0220CE08 ADRP X23, 0x1F0F000
	0x0220CE0C LDR X22, [X22 + 0xE18]
	0x0220CE10 LDR X23, [X23 + 0xFB0]
	0x0220CE14 LDR X8, [X21]
	0x0220CE18 LDR X1, [X22]
	0x0220CE1C LDRH W9, [X8 + 0x12E]
	0x0220CE20 CBZ X9, 0x220CE44
	0x0220CE24 LDR X10, [X8 + 0xB0]
	0x0220CE28 ADD X10, X10, 0x8
	0x0220CE2C LDUR X11, [X10 - 0x8]
	0x0220CE30 CMP X11, X1
	0x0220CE34 B.EQ 0x220CE54
	0x0220CE38 SUBS X9, X9, 0x1
	0x0220CE3C ADD X10, X10, 0x10
	0x0220CE40 B.NE 0x220CE2C
	0x0220CE44 MOV X0, X21
	0x0220CE48 MOV W2, W31
	0x0220CE4C BL 0x1C5C788
	0x0220CE50 B 0x220CE60
	0x0220CE54 LDRSW X9, [X10]
	0x0220CE58 ADD X8, X8, X9, 0x4, LSL
	0x0220CE5C ADD X0, X8, 0x138
	0x0220CE60 LDP X8, X1, [X0]
	0x0220CE64 MOV X0, X21
	0x0220CE68 BLR X8
	0x0220CE6C TBZ X0, 0x0, 0x220CEF4
	0x0220CE70 LDR X8, [X21]
	0x0220CE74 LDR X1, [X23]
	0x0220CE78 LDRH W9, [X8 + 0x12E]
	0x0220CE7C CBZ X9, 0x220CEA0
	0x0220CE80 LDR X10, [X8 + 0xB0]
	0x0220CE84 ADD X10, X10, 0x8
	0x0220CE88 LDUR X11, [X10 - 0x8]
	0x0220CE8C CMP X11, X1
	0x0220CE90 B.EQ 0x220CEB0
	0x0220CE94 SUBS X9, X9, 0x1
	0x0220CE98 ADD X10, X10, 0x10
	0x0220CE9C B.NE 0x220CE88
	0x0220CEA0 MOV X0, X21
	0x0220CEA4 MOV W2, W31
	0x0220CEA8 BL 0x1C5C788
	0x0220CEAC B 0x220CEBC
	0x0220CEB0 LDRSW X9, [X10]
	0x0220CEB4 ADD X8, X8, X9, 0x4, LSL
	0x0220CEB8 ADD X0, X8, 0x138
	0x0220CEBC LDP X8, X1, [X0]
	0x0220CEC0 MOV X0, X21
	0x0220CEC4 BLR X8
	0x0220CEC8 CBZ X0, 0x220CF80
	0x0220CECC LDR X8, [X19 + 0x38]
	0x0220CED0 LDR X1, [X8 + 0x10]
	0x0220CED4 BL 0x21A453C
	0x0220CED8 MOV X1, X0
	0x0220CEDC CBZ X20, 0x220CF84
	0x0220CEE0 LDR X8, [X19 + 0x38]
	0x0220CEE4 LDR X2, [X8 + 0x20]
	0x0220CEE8 MOV X0, X20
	0x0220CEEC BL 0x301C194
	0x0220CEF0 B 0x220CE14
	0x0220CEF4 MOV X22, X31
	0x0220CEF8 CBZ X21, 0x220CF5C
	0x0220CEFC ADRP X10, 0x1EE7000
	0x0220CF00 LDR X8, [X21]
	0x0220CF04 LDR X10, [X10 + 0xE00]
	0x0220CF08 LDRH W9, [X8 + 0x12E]
	0x0220CF0C LDR X1, [X10]
	0x0220CF10 CBZ X9, 0x220CF34
	0x0220CF14 LDR X10, [X8 + 0xB0]
	0x0220CF18 ADD X10, X10, 0x8
	0x0220CF1C LDUR X11, [X10 - 0x8]
	0x0220CF20 CMP X11, X1
	0x0220CF24 B.EQ 0x220CF44
	0x0220CF28 SUBS X9, X9, 0x1
	0x0220CF2C ADD X10, X10, 0x10
	0x0220CF30 B.NE 0x220CF1C
	0x0220CF34 MOV X0, X21
	0x0220CF38 MOV W2, W31
	0x0220CF3C BL 0x1C5C788
	0x0220CF40 B 0x220CF50
	0x0220CF44 LDRSW X9, [X10]
	0x0220CF48 ADD X8, X8, X9, 0x4, LSL
	0x0220CF4C ADD X0, X8, 0x138
	0x0220CF50 LDP X8, X1, [X0]
	0x0220CF54 MOV X0, X21
	0x0220CF58 BLR X8
	0x0220CF5C CBNZ X22, 0x220CF90
	0x0220CF60 CBZ X20, 0x220CF88
	0x0220CF64 LDR X8, [X19 + 0x38]
	0x0220CF68 MOV X0, X20
	0x0220CF6C LDP X20, X19, [X31 + 0x20]
	0x0220CF70 LDP X22, X21, [X31 + 0x10]
	0x0220CF74 LDR X1, [X8 + 0x30]
	0x0220CF78 LDP X30, X23, [X31], #0x30
	0x0220CF7C B 0x301DDC4
	0x0220CF80 BL 0x1C16F20
	0x0220CF84 BL 0x1C16F20
	0x0220CF88 BL 0x1C16F20
	0x0220CF8C BL 0x1C16F20
	0x0220CF90 MOV X0, X22
	0x0220CF94 BL 0x1C16F18
	0x0220CF98 B 0x220CFAC
	0x0220CF9C B 0x220CFAC
	0x0220CFA0 B 0x220CFAC
	0x0220CFA4 B 0x220CFAC
	0x0220CFA8 B 0x220CFAC
	0x0220CFAC CMP W1, 0x1
	0x0220CFB0 B.NE 0x220CFC4
	0x0220CFB4 BL 0x3EB1AD0
	0x0220CFB8 LDR X22, [X0]
	0x0220CFBC BL 0x3EB1AE0
	0x0220CFC0 B 0x220CEF8
	0x0220CFC4 MOV X19, X0
	0x0220CFC8 MOV X22, X31
	0x0220CFCC B 0x220CFD4
	0x0220CFD0 MOV X19, X0
	0x0220CFD4 CBZ X21, 0x220D038
	0x0220CFD8 ADRP X10, 0x1EE7000
	0x0220CFDC LDR X8, [X21]
	0x0220CFE0 LDR X10, [X10 + 0xE00]
	0x0220CFE4 LDRH W9, [X8 + 0x12E]
	0x0220CFE8 LDR X1, [X10]
	0x0220CFEC CBZ X9, 0x220D010
	0x0220CFF0 LDR X10, [X8 + 0xB0]
	0x0220CFF4 ADD X10, X10, 0x8
	0x0220CFF8 LDUR X11, [X10 - 0x8]
	0x0220CFFC CMP X11, X1
	0x0220D000 B.EQ 0x220D020
	0x0220D004 SUBS X9, X9, 0x1
	0x0220D008 ADD X10, X10, 0x10
	0x0220D00C B.NE 0x220CFF8
	0x0220D010 MOV X0, X21
	0x0220D014 MOV W2, W31
	0x0220D018 BL 0x1C5C788
	0x0220D01C B 0x220D02C
	0x0220D020 LDRSW X9, [X10]
	0x0220D024 ADD X8, X8, X9, 0x4, LSL
	0x0220D028 ADD X0, X8, 0x138
	0x0220D02C LDP X8, X1, [X0]
	0x0220D030 MOV X0, X21
	0x0220D034 BLR X8
	0x0220D038 CBNZ X22, 0x220D044
	0x0220D03C MOV X0, X19

ISIL:
	001 Move [X31-96], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Subtract X31, X31, 656
	013 NotImplemented "Instruction MRS not yet implemented."
	014 Move X8, [X25+40]
	015 Move X19, X2
	016 Move V8, V0
	017 Move X21, X1
	018 Move [X31+648], X8
	019 Move X8, [X2+56]
	020 Move X20, X0
	021 Compare X8, 0
	022 JumpIfNotEqual {46}
	023 Move X0, 0x1F10000
	024 Move X0, [X0+3792]
	025 Call 0x1C17CF4
	026 Move X0, 0x1F10000
	027 Move X0, [X0+3896]
	028 Call 0x1C17CF4
	029 Move X0, 0x1F10000
	030 Move X0, [X0+3784]
	031 Call 0x1C17CF4
	032 Move X0, 0x1F10000
	033 Move X0, [X0+3352]
	034 Call 0x1C17CF4
	035 Move X0, 0x1F10000
	036 Move X0, [X0+624]
	037 Call 0x1C17CF4
	038 Move X0, 0x1F10000
	039 Move X0, [X0+3904]
	040 Call 0x1C17CF4
	041 Move X8, [X19+56]
	042 Compare X8, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X19
	045 Call 0x1C5D6E0
	046 Add X0, X31, 96
	047 Move W2, 540
	048 Move W1, W31
	049 Call 0x3EB2B10
	050 Move [X31+64], X31
	051 Move [X31+72], X31
	052 Move [X31+80], W31
	053 Compare X20, 0
	054 JumpIfEqual {204}
	055 Move X26, 0x1F10000
	056 Move X8, [X20+16]
	057 Move X22, [X20+24]
	058 Move X26, [X26+3352]
	059 Move [X31+16], X8
	060 Move [X31+24], X22
	061 Move X0, [X26]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Compare W22, 0
	067 JumpIfNotEqual {217}
	068 Move X22, [X20+120]
	069 Compare X22, 0
	070 JumpIfEqual {203}
	071 Move W8, [X22+232]
	072 Add W31, W8, 1
	073 Move X8, 0x1F10000
	074 Move X8, [X8+3784]
	075 NotImplemented "Instruction FCMP not yet implemented."
	076 Move X8, [X8]
	077 Move X8, [X8+184]
	078 Move X23, [X8]
	079 Compare X23, 0
	080 JumpIfEqual {203}
	081 Move X10, 0x1F10000
	082 Move X8, [X23]
	083 Move X10, [X10+3792]
	084 NotImplemented "Instruction LDRH not yet implemented."
	085 Move X1, [X10]
	086 Compare X9, 0
	087 JumpIfEqual {94}
	088 Move X10, [X8+176]
	089 Add X10, X10, 8
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Subtract X9, X9, 1
	093 Add X10, X10, 16
	094 Move W2, 19
	095 Move X0, X23
	096 Call 0x1C5D788
	097 Move V0, [X8+8]
	098 Add D8, D0, D8
	099 Move W9, [X10]
	100 Add W9, W9, 19
	101 Add X8, X8, W9
	102 Add X0, X8, 312
	103 Move X8, [X0]
	104 Move X1, [X0+8]
	105 Move X0, X23
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move V8, V0
	108 Move X8, [X19+56]
	109 Move X0, [X8]
	110 Move X8, [X0]
	111 NotImplemented "Instruction BLR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move V0, [X20+1]
	114 Move W24, W0
	115 Move X0, [X26]
	116 Move [X31+1], V0
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Add X0, X31, 16
	122 Move X1, X31
	123 Call InputStateBlock.get_alignedSizeInBytes, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W3, [X22+224]
	126 Move W1, 0x5441
	127 Add W2, W24, 28
	128 Add X0, X31, 40
	129 NotImplemented "Instruction MOVK not yet implemented."
	130 Move V0, V8
	131 Move X4, X31
	132 Move W23, W24
	133 Move [X31+40], X31
	134 Move [X31+48], X31
	135 Move [X31+56], W31
	136 Call InputEvent..ctor, X0, X1, X2, X3, V0
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 Move W8, [X31+56]
	139 Move X0, [X26]
	140 Move [X31+4], V0
	141 Move [X31+80], W8
	142 Move V0, [X22+1]
	143 Move [X31+1], V0
	144 Move W9, [X0+224]
	145 Move W8, S0
	146 Compare W9, 0
	147 JumpIfNotEqual {150}
	148 Call 0x1C17DFC
	149 Move W8, [X31+16]
	150 Move W9, [X20+20]
	151 Move W10, [X22+20]
	152 Move V0, [X31+4]
	153 Move W11, [X31+80]
	154 Move [X31+124], W31
	155 Subtract W9, W9, W10
	156 Move [X31+6], V0
	157 Move [X31+112], W11
	158 Move [X31+116], W8
	159 Move [X31+120], W9
	160 Move X8, [X19+56]
	161 Add X9, X31, 96
	162 Move X0, X21
	163 Add X19, X9, 28
	164 Move X1, [X8+24]
	165 Move X8, [X1]
	166 NotImplemented "Instruction BLR not yet implemented."
	167 Move X1, X0
	168 Move X0, X19
	169 Move X2, X23
	170 Move X3, X31
	171 Call UnsafeUtility.MemCpy, X0, X1, X2
	172 Move X19, 0x1F10000
	173 Move X19, [X19+624]
	174 Move X0, [X19]
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {180}
	178 Call 0x1C17DFC
	179 Move X0, [X19]
	180 Move X8, [X0+184]
	181 Move X0, [X8]
	182 Compare X0, 0
	183 JumpIfEqual {203}
	184 Add X1, X31, 96
	185 Move X2, X31
	186 Call InputManager.QueueEvent, X0, X1
	187 Move X8, [X25+40]
	188 Move X9, [X31+648]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Add X31, X31, 656
	191 Move X20, [X31+80]
	192 Move X19, [X31+88]
	193 Move X22, [X31+64]
	194 Move X21, [X31+72]
	195 Move X24, [X31+48]
	196 Move X23, [X31+56]
	197 Move X26, [X31+32]
	198 Move X25, [X31+40]
	199 Move X29, [X31+16]
	200 Move X30, [X31+24]
	201 Move V8, [X31+96]
	202 Return 
	203 Call 0x1C17F20
	204 Move X0, 0x1EED000
	205 Move X0, [X0+1320]
	206 Call 0x1C17D08
	207 Call 0x1C17F10
	208 Move X20, X0
	209 Move X0, 0x1F10000
	210 Move X0, [X0+3424]
	211 Call 0x1C17D08
	212 Move X1, X0
	213 Move X0, X20
	214 Move X2, X31
	215 Call ArgumentNullException..ctor, X0, X1
	216 Move X0, X20
	217 Move X0, 0x1F10000
	218 Move X0, [X0+3912]
	219 Call 0x1C17D08
	220 Move X1, X20
	221 Move X2, X31
	222 Call String.Format, X0, X1
	223 Move X0, 0x1F10000
	224 Move X0, [X0+3920]
	225 Call 0x1C17D08
	226 Move X1, X20
	227 Move X2, X22
	228 Move X3, X31
	229 Call String.Format, X0, X1, X2
	230 Move X20, X0
	231 Move X0, 0x1EE8000
	232 Move X0, [X0+1456]
	233 Call 0x1C17D08
	234 Call 0x1C17F10
	235 Move X1, X20
	236 Move X2, X31
	237 Move X21, X0
	238 Call InvalidOperationException..ctor, X0, X1
	239 Move X8, [X19+56]
	240 Move X0, 0x1EE8000
	241 Move X20, [X8+8]
	242 Move X0, [X0+1728]
	243 Call 0x1C17D08
	244 Call 0x19913D0
	245 Move X0, X20
	246 Move X1, X31
	247 Call Type.GetTypeFromHandle, X0
	248 Move X20, X0
	249 Call 0x19913C0
	250 Move X8, [X20]
	251 Move X0, X20
	252 Move X9, [X8+424]
	253 Move X1, [X8+432]
	254 NotImplemented "Instruction BLR not yet implemented."
	255 Move W8, 512
	256 Move X20, X0
	257 Move [X31+40], W8
	258 Move X0, 0x1EE8000
	259 Move X0, [X0+1880]
	260 Call 0x1C17D08
	261 Add X1, X31, 40
	262 Call 0x1C17E04
	263 Move X21, X0
	264 Move X0, 0x1F10000
	265 Move X0, [X0+3928]
	266 Call 0x1C17D08
	267 Move X1, X20
	268 Move X2, X21
	269 Move X3, X31
	270 Call String.Format, X0, X1, X2
	271 Move X0, 0x1EE8000
	272 Move X0, [X0+2512]
	273 Call 0x1C17D08
	274 Move W1, 4
	275 Call 0x1C17D6C
	276 Move [X31+40], W24
	277 Move X22, 0x1EF0000
	278 Move X22, [X22+1824]
	279 Move X21, X0
	280 Move X0, X22
	281 Call 0x1C17D08
	282 Add X1, X31, 40
	283 Call 0x1C17E04
	284 Move X23, X0
	285 Move X0, X21
	286 Call 0x19913C0
	287 Move X0, X21
	288 Move X1, X23
	289 Call 0x19990B4
	290 Move X0, X21
	291 Move X1, X31
	292 Move X2, X23
	293 Call 0x1994444
	294 Move X8, [X19+56]
	295 Move X0, 0x1EE8000
	296 Move X23, [X8+8]
	297 Move X0, [X0+1728]
	298 Call 0x1C17D08
	299 Call 0x19913D0
	300 Move X0, X23
	301 Move X1, X31
	302 Call Type.GetTypeFromHandle, X0
	303 Move X23, X0
	304 Call 0x19913C0
	305 Move X8, [X23]
	306 Move X0, X23
	307 Move X9, [X8+424]
	308 Move X1, [X8+432]
	309 NotImplemented "Instruction BLR not yet implemented."
	310 Move X23, X0
	311 Move X0, X21
	312 Call 0x19913C0
	313 Move X0, X21
	314 Move X1, X23
	315 Call 0x19990B4
	316 Move W1, 1
	317 Move X0, X21
	318 Move X2, X23
	319 Call 0x1994444
	320 Move X0, X21
	321 Call 0x19913C0
	322 Move X0, X21
	323 Move X1, X20
	324 Call 0x19990B4
	325 Move W1, 2
	326 Move X0, X21
	327 Move X2, X20
	328 Call 0x1994444
	329 Move X0, X20
	330 Call 0x19913C0
	331 Move V0, [X20+1]
	332 Move X0, 0x1F10000
	333 Move [X31+1], V0
	334 Move X0, [X0+3352]
	335 Call 0x1C17D08
	336 Call 0x19913D0
	337 Add X0, X31, 16
	338 Move X1, X31
	339 Call InputStateBlock.get_alignedSizeInBytes, X0
	340 Move [X31+12], W0
	341 Move X0, X22
	342 Call 0x1C17D08
	343 Add X1, X31, 12
	344 Call 0x1C17E04
	345 Move X20, X0
	346 Move X0, X21
	347 Call 0x19913C0
	348 Move X0, X21
	349 Move X1, X20
	350 Call 0x19990B4
	351 Move W1, 3
	352 Move X0, X21
	353 Move X2, X20
	354 Call 0x1994444
	355 Move X0, 0x1F10000
	356 Move X0, [X0+3936]
	357 Call 0x1C17D08
	358 Move X1, X21
	359 Move X2, X31
	360 Call String.Format, X0, X1
	361 Move X20, X0
	362 Move X0, 0x1EF0000
	363 Move X0, [X0+1400]
	364 Call 0x1C17D08
	365 Call 0x1C17F10
	366 Move X21, X0
	367 Move X0, 0x1F0F000
	368 Move X0, [X0+3944]
	369 Call 0x1C17D08
	370 Move X2, X0
	371 Move X0, X21
	372 Move X1, X20
	373 Move X3, X31
	374 Call ArgumentException..ctor, X0, X1, X2
	375 Move X0, X21
	376 Move X1, X19
	377 Call 0x1C17DEC
	378 Call 0x3EB2B20

Method: System.Void QueueConfigChangeEvent(UnityEngine.InputSystem.InputDevice device, System.Double time = -1)

Disassembly:
	0x03770BCC MOV X19, X0
	0x03770BD0 TBNZ X8, 0x0, 0x3770BE8
	0x03770BD4 ADRP X0, 0x9AB000
	0x03770BD8 LDR X0, [X0 + 0x270]
	0x03770BDC BL 0x1C16CF4
	0x03770BE0 MOVZ W8, 0x1
	0x03770BE4 STRB W8, [X20 + 0xF02]
	0x03770BE8 MOV X0, X19
	0x03770BEC MOV X1, X31
	0x03770BF0 STR X31, [X31 + 0x8]
	0x03770BF4 BL 0x32277A8
	0x03770BF8 TBNZ X0, 0x0, 0x3770C48
	0x03770BFC ADRP X20, 0x9AB000
	0x03770C00 LDR X20, [X20 + 0x270]
	0x03770C04 LDR X0, [X20]
	0x03770C08 LDR W8, [X0 + 0xE0]
	0x03770C0C CBNZ W8, 0x3770C18
	0x03770C10 BL 0x1C16DFC
	0x03770C14 LDR X0, [X20]
	0x03770C18 LDR X8, [X0 + 0xB8]
	0x03770C1C LDR X8, [X8]
	0x03770C20 CBZ X8, 0x3770C90
	0x03770C24 LDR X8, [X8 + 0x60]
	0x03770C28 ADD X0, X31, 0x8
	0x03770C2C MOV X1, X19
	0x03770C30 MOV X2, X31
	0x03770C34 STR X8, [X31 + 0x8]
	0x03770C38 BL 0x3769CEC
	0x03770C3C LDP X20, X19, [X31 + 0x10]
	0x03770C40 LDR X30, [X31], #0x20
	0x03770C44 RET
	0x03770C48 ADRP X0, 0x988000
	0x03770C4C LDR X0, [X0 + 0x528]
	0x03770C50 BL 0x1C16D08
	0x03770C54 BL 0x1C16F10
	0x03770C58 MOV X19, X0
	0x03770C5C ADRP X0, 0x98B000
	0x03770C60 LDR X0, [X0 + 0x588]
	0x03770C64 BL 0x1C16D08
	0x03770C68 MOV X1, X0
	0x03770C6C MOV X0, X19
	0x03770C70 MOV X2, X31
	0x03770C74 BL 0x330E100
	0x03770C78 ADRP X0, 0x9D6000
	0x03770C7C LDR X0, [X0 + 0xA08]
	0x03770C80 BL 0x1C16D08
	0x03770C84 MOV X1, X0
	0x03770C88 MOV X0, X19
	0x03770C8C BL 0x1C16DEC
	0x03770C90 BL 0x1C16F20
	0x03770C94 STR X30, [X31 - 0x20]!
	0x03770C98 STP X20, X19, [X31 + 0x10]
	0x03770C9C ADRP X20, 0xC70000
	0x03770CA0 ADRP X19, 0x9AB000
	0x03770CA4 LDRB W8, [X20 + 0xF03]
	0x03770CA8 LDR X19, [X19 + 0x270]
	0x03770CAC TBNZ X8, 0x0, 0x3770CC4
	0x03770CB0 ADRP X0, 0x9AB000
	0x03770CB4 LDR X0, [X0 + 0x270]
	0x03770CB8 BL 0x1C16CF4
	0x03770CBC MOVZ W8, 0x1
	0x03770CC0 STRB W8, [X20 + 0xF03]
	0x03770CC4 LDR X0, [X19]
	0x03770CC8 STR X31, [X31 + 0x8]
	0x03770CCC LDR W8, [X0 + 0xE0]
	0x03770CD0 CBNZ W8, 0x3770CDC
	0x03770CD4 BL 0x1C16DFC
	0x03770CD8 LDR X0, [X19]
	0x03770CDC LDR X8, [X0 + 0xB8]
	0x03770CE0 LDR X8, [X8]
	0x03770CE4 CBZ X8, 0x3770D08
	0x03770CE8 LDR X8, [X8 + 0x60]
	0x03770CEC ADD X0, X31, 0x8
	0x03770CF0 MOV X1, X31
	0x03770CF4 STR X8, [X31 + 0x8]
	0x03770CF8 BL 0x3769788
	0x03770CFC LDP X20, X19, [X31 + 0x10]
	0x03770D00 LDR X30, [X31], #0x20
	0x03770D04 RET
	0x03770D08 BL 0x1C16F20
	0x03770D0C STR X30, [X31 - 0x30]!
	0x03770D10 STP X22, X21, [X31 + 0x10]
	0x03770D14 STP X20, X19, [X31 + 0x20]
	0x03770D18 ADRP X22, 0xC70000
	0x03770D1C ADRP X21, 0x983000
	0x03770D20 LDRB W8, [X22 + 0xF04]
	0x03770D24 LDR X21, [X21 + 0x6C0]
	0x03770D28 MOV X20, X1
	0x03770D2C MOV X19, X0
	0x03770D30 TBNZ X8, 0x0, 0x3770D60
	0x03770D34 ADRP X0, 0x9AB000
	0x03770D38 LDR X0, [X0 + 0x270]
	0x03770D3C BL 0x1C16CF4
	0x03770D40 ADRP X0, 0x983000
	0x03770D44 LDR X0, [X0 + 0x6C0]
	0x03770D48 BL 0x1C16CF4
	0x03770D4C ADRP X0, 0x9D6000
	0x03770D50 LDR X0, [X0 + 0xA10]
	0x03770D54 BL 0x1C16CF4
	0x03770D58 MOVZ W8, 0x1
	0x03770D5C STRB W8, [X22 + 0xF04]
	0x03770D60 LDR X0, [X21]
	0x03770D64 STR X31, [X31 + 0x8]
	0x03770D68 LDR W8, [X0 + 0xE0]
	0x03770D6C CBNZ W8, 0x3770D74
	0x03770D70 BL 0x1C16DFC
	0x03770D74 MOV X0, X19
	0x03770D78 MOV X1, X31
	0x03770D7C MOV X2, X31
	0x03770D80 BL 0x3395194
	0x03770D84 TBNZ X0, 0x0, 0x3770E4C
	0x03770D88 MOV X0, X20
	0x03770D8C MOV X1, X31
	0x03770D90 BL 0x32277A8
	0x03770D94 TBZ X0, 0x0, 0x3770DF4
	0x03770D98 CBZ X19, 0x3770E48
	0x03770D9C LDR X8, [X19]
	0x03770DA0 MOV X0, X19
	0x03770DA4 LDP X9, X1, [X8 + 0x1A8]
	0x03770DA8 BLR X9
	0x03770DAC CBZ X0, 0x3770E48
	0x03770DB0 ADRP X21, 0x9D6000
	0x03770DB4 LDR X21, [X21 + 0xA10]
	0x03770DB8 MOV X2, X31
	0x03770DBC MOV X20, X0
	0x03770DC0 LDR X1, [X21]
	0x03770DC4 BL 0x3226588
	0x03770DC8 TBZ X0, 0x0, 0x3770DF4
	0x03770DCC LDR X8, [X21]
	0x03770DD0 CBZ X8, 0x3770E48
	0x03770DD4 LDR W9, [X20 + 0x10]
	0x03770DD8 LDR W8, [X8 + 0x10]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D8
	003 Move [X31+80], X30
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X20, 0xC71000
	010 Move V8, V0
	011 Move X19, X0
	012 Move [X31+56], X8
	013 Move W8, [X20+3827]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x9AC000
	019 Move X0, [X0+3792]
	020 Call 0x1C17CF4
	021 Move X0, 0x9D7000
	022 Move X0, [X0+2448]
	023 Call 0x1C17CF4
	024 Move X0, 0x9AC000
	025 Move X0, [X0+3784]
	026 Call 0x1C17CF4
	027 Move X0, 0x9AC000
	028 Move X0, [X0+624]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3827], W8
	032 Move [X31+32], X31
	033 Move [X31+40], X31
	034 Move [X31+48], W31
	035 Compare X19, 0
	036 JumpIfEqual {110}
	037 Move W0, [X19+224]
	038 Compare W0, 0
	039 JumpIfEqual {122}
	040 Move X8, 0x9AC000
	041 Move X8, [X8+3784]
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 Move X8, [X8]
	044 Move X8, [X8+184]
	045 Move X20, [X8]
	046 Compare X20, 0
	047 JumpIfEqual {109}
	048 Move X10, 0x9AC000
	049 Move X8, [X20]
	050 Move X10, [X10+3792]
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 Move X1, [X10]
	053 Compare X9, 0
	054 JumpIfEqual {61}
	055 Move X10, [X8+176]
	056 Add X10, X10, 8
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Subtract X9, X9, 1
	060 Add X10, X10, 16
	061 Move W2, 19
	062 Move X0, X20
	063 Call 0x1C5D788
	064 Move V0, [X8+8]
	065 Add D0, D0, D8
	066 Move W9, [X10]
	067 Add W9, W9, 19
	068 Add X8, X8, W9
	069 Add X0, X8, 312
	070 Move X8, [X0]
	071 Move X1, [X0+8]
	072 Move X0, X20
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move W0, [X19+224]
	075 Move X19, 0x9AC000
	076 Move X19, [X19+624]
	077 Add X8, X31, 8
	078 Move X1, X31
	079 Call DeviceConfigurationEvent.Create, X0, V0
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 Move W8, [X31+24]
	082 Move X0, [X19]
	083 Move [X31+2], V0
	084 Move [X31+48], W8
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {90}
	088 Call 0x1C17DFC
	089 Move X0, [X19]
	090 Move X8, [X0+184]
	091 Move X0, [X8]
	092 Compare X0, 0
	093 JumpIfEqual {109}
	094 Move X8, 0x9D7000
	095 Move X8, [X8+2448]
	096 Add X1, X31, 32
	097 Move X2, [X8]
	098 Call InputManager.QueueEvent, X0, X1
	099 Move X8, [X21+40]
	100 Move X9, [X31+56]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X20, [X31+96]
	103 Move X19, [X31+104]
	104 Move X30, [X31+80]
	105 Move X21, [X31+88]
	106 Move V8, [X31+64]
	107 Add X31, X31, 112
	108 Return 
	109 Call 0x1C17F20
	110 Move X0, 0x989000
	111 Move X0, [X0+1320]
	112 Call 0x1C17D08
	113 Call 0x1C17F10
	114 Move X19, X0
	115 Move X0, 0x9AC000
	116 Move X0, [X0+3360]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Move X2, X31
	121 Call ArgumentNullException..ctor, X0, X1
	122 Move X0, 0x984000
	123 Move X0, [X0+1456]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X19, X0
	127 Move X0, 0x9D7000
	128 Move X0, [X0+2456]
	129 Call 0x1C17D08
	130 Move X1, X0
	131 Move X0, X19
	132 Move X2, X31
	133 Call InvalidOperationException..ctor, X0, X1
	134 Move X0, 0x9D7000
	135 Move X0, [X0+2464]
	136 Call 0x1C17D08
	137 Move X1, X0
	138 Move X0, X19
	139 Call 0x1C17DEC
	140 Call 0x3EB2B20

Method: System.Void QueueTextEvent(UnityEngine.InputSystem.InputDevice device, System.Char character, System.Double time = -1)

Disassembly:
	0x03770DDC MOV X0, X20
	0x03770DE0 MOV W1, W31
	0x03770DE4 MOV X3, X31
	0x03770DE8 SUB W2, W9, W8
	0x03770DEC BL 0x3228DE4
	0x03770DF0 MOV X20, X0
	0x03770DF4 ADRP X21, 0x9AB000
	0x03770DF8 LDR X21, [X21 + 0x270]
	0x03770DFC LDR X0, [X21]
	0x03770E00 LDR W8, [X0 + 0xE0]
	0x03770E04 CBNZ W8, 0x3770E10
	0x03770E08 BL 0x1C16DFC
	0x03770E0C LDR X0, [X21]
	0x03770E10 LDR X8, [X0 + 0xB8]
	0x03770E14 LDR X8, [X8]
	0x03770E18 CBZ X8, 0x3770E48
	0x03770E1C LDR X8, [X8 + 0x68]
	0x03770E20 ADD X0, X31, 0x8
	0x03770E24 MOV X1, X20
	0x03770E28 MOV X2, X19
	0x03770E2C MOV X3, X31
	0x03770E30 STR X8, [X31 + 0x8]
	0x03770E34 BL 0x3769B8C
	0x03770E38 LDP X20, X19, [X31 + 0x20]
	0x03770E3C LDP X22, X21, [X31 + 0x10]
	0x03770E40 LDR X30, [X31], #0x30
	0x03770E44 RET
	0x03770E48 BL 0x1C16F20
	0x03770E4C ADRP X0, 0x988000
	0x03770E50 LDR X0, [X0 + 0x528]
	0x03770E54 BL 0x1C16D08
	0x03770E58 BL 0x1C16F10
	0x03770E5C MOV X19, X0
	0x03770E60 ADRP X0, 0x98B000
	0x03770E64 LDR X0, [X0 + 0x5E8]
	0x03770E68 BL 0x1C16D08
	0x03770E6C MOV X1, X0
	0x03770E70 MOV X0, X19
	0x03770E74 MOV X2, X31
	0x03770E78 BL 0x330E100
	0x03770E7C ADRP X0, 0x9D6000
	0x03770E80 LDR X0, [X0 + 0xA18]
	0x03770E84 BL 0x1C16D08
	0x03770E88 MOV X1, X0
	0x03770E8C MOV X0, X19
	0x03770E90 BL 0x1C16DEC
	0x03770E94 STR X30, [X31 - 0x20]!
	0x03770E98 STP X20, X19, [X31 + 0x10]
	0x03770E9C ADRP X20, 0xC70000
	0x03770EA0 LDRB W8, [X20 + 0xF05]
	0x03770EA4 MOV X19, X0
	0x03770EA8 TBNZ X8, 0x0, 0x3770EC0
	0x03770EAC ADRP X0, 0x9AB000
	0x03770EB0 LDR X0, [X0 + 0x270]
	0x03770EB4 BL 0x1C16CF4
	0x03770EB8 MOVZ W8, 0x1
	0x03770EBC STRB W8, [X20 + 0xF05]
	0x03770EC0 MOV X0, X19
	0x03770EC4 MOV X1, X31
	0x03770EC8 STR X31, [X31 + 0x8]
	0x03770ECC BL 0x32277A8
	0x03770ED0 TBNZ X0, 0x0, 0x3770F20
	0x03770ED4 ADRP X20, 0x9AB000
	0x03770ED8 LDR X20, [X20 + 0x270]
	0x03770EDC LDR X0, [X20]
	0x03770EE0 LDR W8, [X0 + 0xE0]
	0x03770EE4 CBNZ W8, 0x3770EF0
	0x03770EE8 BL 0x1C16DFC
	0x03770EEC LDR X0, [X20]
	0x03770EF0 LDR X8, [X0 + 0xB8]
	0x03770EF4 LDR X8, [X8]
	0x03770EF8 CBZ X8, 0x3770F68
	0x03770EFC LDR X8, [X8 + 0x68]
	0x03770F00 ADD X0, X31, 0x8
	0x03770F04 MOV X1, X19
	0x03770F08 MOV X2, X31
	0x03770F0C STR X8, [X31 + 0x8]
	0x03770F10 BL 0x3769CEC
	0x03770F14 LDP X20, X19, [X31 + 0x10]
	0x03770F18 LDR X30, [X31], #0x20
	0x03770F1C RET
	0x03770F20 ADRP X0, 0x988000
	0x03770F24 LDR X0, [X0 + 0x528]
	0x03770F28 BL 0x1C16D08
	0x03770F2C BL 0x1C16F10
	0x03770F30 MOV X19, X0
	0x03770F34 ADRP X0, 0x98B000
	0x03770F38 LDR X0, [X0 + 0x588]
	0x03770F3C BL 0x1C16D08
	0x03770F40 MOV X1, X0
	0x03770F44 MOV X0, X19
	0x03770F48 MOV X2, X31
	0x03770F4C BL 0x330E100
	0x03770F50 ADRP X0, 0x9D6000
	0x03770F54 LDR X0, [X0 + 0xA20]
	0x03770F58 BL 0x1C16D08
	0x03770F5C MOV X1, X0
	0x03770F60 MOV X0, X19
	0x03770F64 BL 0x1C16DEC
	0x03770F68 BL 0x1C16F20
	0x03770F6C MOV X0, X31
	0x03770F70 B 0x3751610
	0x03770F74 STR X30, [X31 - 0x30]!
	0x03770F78 STP X22, X21, [X31 + 0x10]
	0x03770F7C STP X20, X19, [X31 + 0x20]
	0x03770F80 ADRP X21, 0xC70000
	0x03770F84 ADRP X22, 0x9D5000
	0x03770F88 ADRP X19, 0x9D5000
	0x03770F8C ADRP X20, 0x9AB000
	0x03770F90 LDRB W8, [X21 + 0xF06]
	0x03770F94 LDR X22, [X22 + 0x218]
	0x03770F98 LDR X19, [X19 + 0x1E0]
	0x03770F9C LDR X20, [X20 + 0x270]
	0x03770FA0 TBNZ X8, 0x0, 0x3770FD0
	0x03770FA4 ADRP X0, 0x9AB000
	0x03770FA8 LDR X0, [X0 + 0x270]
	0x03770FAC BL 0x1C16CF4
	0x03770FB0 ADRP X0, 0x9D5000
	0x03770FB4 LDR X0, [X0 + 0x1E0]
	0x03770FB8 BL 0x1C16CF4
	0x03770FBC ADRP X0, 0x9D5000
	0x03770FC0 LDR X0, [X0 + 0x218]
	0x03770FC4 BL 0x1C16CF4
	0x03770FC8 MOVZ W8, 0x1
	0x03770FCC STRB W8, [X21 + 0xF06]
	0x03770FD0 LDR X0, [X22]
	0x03770FD4 BL 0x1C16F10
	0x03770FD8 LDR X1, [X19]
	0x03770FDC MOV X19, X0
	0x03770FE0 BL 0x301B7C4
	0x03770FE4 LDR X0, [X20]
	0x03770FE8 LDR W8, [X0 + 0xE0]
	0x03770FEC CBNZ W8, 0x3770FF4
	0x03770FF0 BL 0x1C16DFC
	0x03770FF4 MOV X0, X19
	0x03770FF8 BL 0x3771010

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D8
	003 Move [X31+72], X30
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X22+40]
	010 Move X21, 0xC71000
	011 Move V8, V0
	012 Move W19, W1
	013 Move [X31+56], X8
	014 Move W8, [X21+3828]
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x9AC000
	021 Move X0, [X0+3792]
	022 Call 0x1C17CF4
	023 Move X0, 0x9D7000
	024 Move X0, [X0+2472]
	025 Call 0x1C17CF4
	026 Move X0, 0x9AC000
	027 Move X0, [X0+3784]
	028 Call 0x1C17CF4
	029 Move X0, 0x9AC000
	030 Move X0, [X0+624]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+3828], W8
	034 Move [X31+32], X31
	035 Move [X31+40], X31
	036 Move [X31+48], X31
	037 Compare X20, 0
	038 JumpIfEqual {114}
	039 Move W0, [X20+224]
	040 Compare W0, 0
	041 JumpIfEqual {126}
	042 Move X8, 0x9AC000
	043 Move X8, [X8+3784]
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 Move X8, [X8]
	046 Move X8, [X8+184]
	047 Move X21, [X8]
	048 Compare X21, 0
	049 JumpIfEqual {113}
	050 Move X10, 0x9AC000
	051 Move X8, [X21]
	052 Move X10, [X10+3792]
	053 NotImplemented "Instruction LDRH not yet implemented."
	054 Move X1, [X10]
	055 Compare X9, 0
	056 JumpIfEqual {63}
	057 Move X10, [X8+176]
	058 Add X10, X10, 8
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Subtract X9, X9, 1
	062 Add X10, X10, 16
	063 Move W2, 19
	064 Move X0, X21
	065 Call 0x1C5D788
	066 Move V0, [X8+8]
	067 Add D0, D0, D8
	068 Move W9, [X10]
	069 Add W9, W9, 19
	070 Add X8, X8, W9
	071 Add X0, X8, 312
	072 Move X8, [X0]
	073 Move X1, [X0+8]
	074 Move X0, X21
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move W0, [X20+224]
	077 Move X20, 0x9AC000
	078 Move X20, [X20+624]
	079 Add X8, X31, 8
	080 Move W1, W19
	081 Move X2, X31
	082 Call TextEvent.Create, X0, X1, V0
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 Move X8, [X31+24]
	085 Move X0, [X20]
	086 Move [X31+2], V0
	087 Move [X31+48], X8
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1C17DFC
	092 Move X0, [X20]
	093 Move X8, [X0+184]
	094 Move X0, [X8]
	095 Compare X0, 0
	096 JumpIfEqual {113}
	097 Move X8, 0x9D7000
	098 Move X8, [X8+2472]
	099 Add X1, X31, 32
	100 Move X2, [X8]
	101 Call InputManager.QueueEvent, X0, X1
	102 Move X8, [X22+40]
	103 Move X9, [X31+56]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X20, [X31+96]
	106 Move X19, [X31+104]
	107 Move X22, [X31+80]
	108 Move X21, [X31+88]
	109 Move X30, [X31+72]
	110 Move V8, [X31+64]
	111 Add X31, X31, 112
	112 Return 
	113 Call 0x1C17F20
	114 Move X0, 0x989000
	115 Move X0, [X0+1320]
	116 Call 0x1C17D08
	117 Call 0x1C17F10
	118 Move X19, X0
	119 Move X0, 0x9AC000
	120 Move X0, [X0+3360]
	121 Call 0x1C17D08
	122 Move X1, X0
	123 Move X0, X19
	124 Move X2, X31
	125 Call ArgumentNullException..ctor, X0, X1
	126 Move X0, 0x984000
	127 Move X0, [X0+1456]
	128 Call 0x1C17D08
	129 Call 0x1C17F10
	130 Move X19, X0
	131 Move X0, 0x9D7000
	132 Move X0, [X0+2456]
	133 Call 0x1C17D08
	134 Move X1, X0
	135 Move X0, X19
	136 Move X2, X31
	137 Call InvalidOperationException..ctor, X0, X1
	138 Move X0, 0x9D7000
	139 Move X0, [X0+2480]
	140 Call 0x1C17D08
	141 Move X1, X0
	142 Move X0, X19
	143 Call 0x1C17DEC
	144 Call 0x3EB2B20

Method: System.Void Update()

Disassembly:
	0x03770FFC MOV X0, X19
	0x03771000 LDP X20, X19, [X31 + 0x20]
	0x03771004 LDP X22, X21, [X31 + 0x10]
	0x03771008 LDR X30, [X31], #0x30
	0x0377100C RET
	0x03771010 CBZ X0, 0x377101C
	0x03771014 MOV X1, X31
	0x03771018 B 0x3750DB4
	0x0377101C STP X30, X19, [X31 - 0x10]!
	0x03771020 ADRP X0, 0x987000
	0x03771024 LDR X0, [X0 + 0x528]
	0x03771028 BL 0x1C16D08
	0x0377102C BL 0x1C16F10
	0x03771030 MOV X19, X0
	0x03771034 ADRP X0, 0x9D4000
	0x03771038 LDR X0, [X0 + 0x498]
	0x0377103C BL 0x1C16D08
	0x03771040 MOV X1, X0
	0x03771044 MOV X0, X19
	0x03771048 MOV X2, X31
	0x0377104C BL 0x330E100
	0x03771050 ADRP X0, 0x9D5000
	0x03771054 LDR X0, [X0 + 0xA28]
	0x03771058 BL 0x1C16D08
	0x0377105C MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC70000
	005 Move X19, 0x9AB000
	006 Move W8, [X20+3829]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AB000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3829], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X0, [X8]
	025 Compare X0, 0
	026 JumpIfEqual {33}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Call InputManager.Update, X0
	032 Return 
	033 Call 0x1C17F20

Method: System.Void Update(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)

Disassembly:
	0x03771060 MOV X0, X19
	0x03771064 BL 0x1C16DEC
	0x03771068 STR X30, [X31 - 0x20]!
	0x0377106C STP X20, X19, [X31 + 0x10]
	0x03771070 ADRP X20, 0xC6F000
	0x03771074 ADRP X19, 0x9AA000
	0x03771078 LDRB W8, [X20 + 0xF07]
	0x0377107C LDR X19, [X19 + 0x270]
	0x03771080 TBNZ X8, 0x0, 0x3771098
	0x03771084 ADRP X0, 0x9AA000
	0x03771088 LDR X0, [X0 + 0x270]
	0x0377108C BL 0x1C16CF4
	0x03771090 MOVZ W8, 0x1
	0x03771094 STRB W8, [X20 + 0xF07]
	0x03771098 LDR X0, [X19]
	0x0377109C LDR W8, [X0 + 0xE0]
	0x037710A0 CBNZ W8, 0x37710AC
	0x037710A4 BL 0x1C16DFC
	0x037710A8 LDR X0, [X19]
	0x037710AC LDR X8, [X0 + 0xB8]
	0x037710B0 LDP X20, X19, [X31 + 0x10]
	0x037710B4 LDR X0, [X8 + 0x8]
	0x037710B8 LDR X30, [X31], #0x20
	0x037710BC RET
	0x037710C0 STP X30, X21, [X31 - 0x20]!
	0x037710C4 STP X20, X19, [X31 + 0x10]
	0x037710C8 ADRP X20, 0xC6F000
	0x037710CC ADRP X21, 0x98A000
	0x037710D0 ADRP X19, 0x9D5000
	0x037710D4 LDRB W8, [X20 + 0xF08]
	0x037710D8 LDR X21, [X21 + 0x7C0]
	0x037710DC LDR X19, [X19 + 0xA30]
	0x037710E0 TBNZ X8, 0x0, 0x3771104
	0x037710E4 ADRP X0, 0x98A000
	0x037710E8 LDR X0, [X0 + 0x7C0]
	0x037710EC BL 0x1C16CF4
	0x037710F0 ADRP X0, 0x9D5000
	0x037710F4 LDR X0, [X0 + 0xA30]
	0x037710F8 BL 0x1C16CF4
	0x037710FC MOVZ W8, 0x1
	0x03771100 STRB W8, [X20 + 0xF08]
	0x03771104 LDR X0, [X21]
	0x03771108 BL 0x1C16F10
	0x0377110C LDR X1, [X19]
	0x03771110 MOV X2, X31
	0x03771114 MOV X19, X0
	0x03771118 BL 0x339C314
	0x0377111C MOV X0, X19
	0x03771120 LDP X20, X19, [X31 + 0x10]
	0x03771124 LDP X30, X21, [X31], #0x20
	0x03771128 RET
	0x0377112C STR X30, [X31 - 0x20]!
	0x03771130 STP X20, X19, [X31 + 0x10]
	0x03771134 ADRP X20, 0xC6F000
	0x03771138 ADRP X19, 0x9AA000
	0x0377113C LDRB W8, [X20 + 0xF09]
	0x03771140 LDR X19, [X19 + 0x270]
	0x03771144 TBNZ X8, 0x0, 0x3771168
	0x03771148 ADRP X0, 0x9AA000
	0x0377114C LDR X0, [X0 + 0xED0]
	0x03771150 BL 0x1C16CF4
	0x03771154 ADRP X0, 0x9AA000
	0x03771158 LDR X0, [X0 + 0x270]
	0x0377115C BL 0x1C16CF4
	0x03771160 MOVZ W8, 0x1
	0x03771164 STRB W8, [X20 + 0xF09]
	0x03771168 LDR X0, [X19]
	0x0377116C LDR W8, [X0 + 0xE0]
	0x03771170 CBNZ W8, 0x377117C
	0x03771174 BL 0x1C16DFC
	0x03771178 LDR X0, [X19]
	0x0377117C LDR X8, [X0 + 0xB8]
	0x03771180 LDR X8, [X8]
	0x03771184 CBZ X8, 0x37711FC
	0x03771188 LDR X19, [X8 + 0x440]
	0x0377118C CBZ X19, 0x37711FC
	0x03771190 ADRP X10, 0x9AA000
	0x03771194 LDR X8, [X19]
	0x03771198 LDR X10, [X10 + 0xED0]
	0x0377119C LDRH W9, [X8 + 0x12E]
	0x037711A0 LDR X1, [X10]
	0x037711A4 CBZ X9, 0x37711C8
	0x037711A8 LDR X10, [X8 + 0xB0]
	0x037711AC ADD X10, X10, 0x8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC70000
	007 Move X20, 0x9AB000
	008 Move W8, [X21+3830]
	009 Move X20, [X20+624]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AB000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3830], W8
	020 Move X0, [X20]
	021 Compare W19, 0
	022 JumpIfEqual {34}
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X8, [X8]
	030 Compare X8, 0
	031 JumpIfEqual {52}
	032 Move W8, [X8+168]
	033 And W31, W8, W19
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X20]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {52}
	043 Move W1, W19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Move X2, X31
	049 Add X31, X31, 48
	050 Call InputManager.Update, X0, X1
	051 Return 
	052 Call 0x1C17F20
	053 Move [X31+12], W19
	054 Move X0, 0x9D6000
	055 Move X0, [X0+2488]
	056 Call 0x1C17D08
	057 Add X1, X31, 12
	058 Call 0x1C17E04
	059 Move X19, X0
	060 Move X0, 0x9AB000
	061 Move X0, [X0+624]
	062 Call 0x1C17D08
	063 Call 0x19913D0
	064 Call InputSystem.get_settings
	065 Move X20, X0
	066 Call 0x19913C0
	067 Move W8, [X20+32]
	068 Move X0, 0x9D6000
	069 Move [X31+8], W8
	070 Move X0, [X0+2496]
	071 Call 0x1C17D08
	072 Add X1, X31, 8
	073 Call 0x1C17E04
	074 Move X20, X0
	075 Move X0, 0x9D6000
	076 Move X0, [X0+2504]
	077 Call 0x1C17D08
	078 Move X1, X19
	079 Move X2, X20
	080 Move X3, X31
	081 Call String.Format, X0, X1, X2
	082 Move X19, X0
	083 Move X0, 0x983000
	084 Move X0, [X0+1456]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X1, X19
	088 Move X2, X31
	089 Move X20, X0
	090 Call InvalidOperationException..ctor, X0, X1
	091 Move X0, 0x9D6000
	092 Move X0, [X0+2512]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X20
	096 Call 0x1C17DEC

Method: System.Void add_onBeforeUpdate(System.Action value)

Disassembly:
	0x03771214 LDR X20, [X20 + 0x270]
	0x03771218 MOV W19, W0
	0x0377121C TBNZ X8, 0x0, 0x3771240
	0x03771220 ADRP X0, 0x9AA000
	0x03771224 LDR X0, [X0 + 0xED0]
	0x03771228 BL 0x1C16CF4
	0x0377122C ADRP X0, 0x9AA000
	0x03771230 LDR X0, [X0 + 0x270]
	0x03771234 BL 0x1C16CF4
	0x03771238 MOVZ W8, 0x1
	0x0377123C STRB W8, [X21 + 0xF0A]
	0x03771240 LDR X0, [X20]
	0x03771244 LDR W8, [X0 + 0xE0]
	0x03771248 CBNZ W8, 0x3771254
	0x0377124C BL 0x1C16DFC
	0x03771250 LDR X0, [X20]
	0x03771254 LDR X8, [X0 + 0xB8]
	0x03771258 LDR X8, [X8]
	0x0377125C CBZ X8, 0x37712D8
	0x03771260 LDR X20, [X8 + 0x440]
	0x03771264 CBZ X20, 0x37712D8
	0x03771268 ADRP X10, 0x9AA000
	0x0377126C LDR X8, [X20]
	0x03771270 LDR X10, [X10 + 0xED0]
	0x03771274 LDRH W9, [X8 + 0x12E]
	0x03771278 LDR X1, [X10]
	0x0377127C CBZ X9, 0x37712A0
	0x03771280 LDR X10, [X8 + 0xB0]
	0x03771284 ADD X10, X10, 0x8
	0x03771288 LDUR X11, [X10 - 0x8]
	0x0377128C CMP X11, X1
	0x03771290 B.EQ 0x37712B0
	0x03771294 SUBS X9, X9, 0x1
	0x03771298 ADD X10, X10, 0x10
	0x0377129C B.NE 0x3771288
	0x037712A0 MOVZ W2, 0x18
	0x037712A4 MOV X0, X20
	0x037712A8 BL 0x1C5C788
	0x037712AC B 0x37712C0
	0x037712B0 LDR W9, [X10]
	0x037712B4 ADD W9, W9, 0x18
	0x037712B8 ADD X8, X8, W9, 0x4, SXTW
	0x037712BC ADD X0, X8, 0x138
	0x037712C0 LDP X3, X2, [X0]
	0x037712C4 AND W1, W19, 0x1
	0x037712C8 MOV X0, X20
	0x037712CC LDP X20, X19, [X31 + 0x10]
	0x037712D0 LDP X30, X21, [X31], #0x20
	0x037712D4 BR X3
	0x037712D8 BL 0x1C16F20
	0x037712DC SUB X31, X31, 0x60
	0x037712E0 STP X30, X21, [X31 + 0x40]
	0x037712E4 STP X20, X19, [X31 + 0x50]
	0x037712E8 ADRP X21, 0xC6F000
	0x037712EC ADRP X20, 0x9AA000
	0x037712F0 MOV X19, X8
	0x037712F4 LDRB W8, [X21 + 0xF0B]
	0x037712F8 LDR X20, [X20 + 0x270]
	0x037712FC TBNZ X8, 0x0, 0x3771314
	0x03771300 ADRP X0, 0x9AA000
	0x03771304 LDR X0, [X0 + 0x270]
	0x03771308 BL 0x1C16CF4
	0x0377130C MOVZ W8, 0x1
	0x03771310 STRB W8, [X21 + 0xF0B]
	0x03771314 LDR X0, [X20]
	0x03771318 LDR W8, [X0 + 0xE0]
	0x0377131C CBNZ W8, 0x3771328
	0x03771320 BL 0x1C16DFC
	0x03771324 LDR X0, [X20]
	0x03771328 LDR X8, [X0 + 0xB8]
	0x0377132C LDR X0, [X8]
	0x03771330 CBZ X0, 0x377136C
	0x03771334 ADD X8, X31, 0x8
	0x03771338 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC70000
	007 Move X21, 0x9AB000
	008 Move W8, [X19+3831]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AB000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3831], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.add_onBeforeUpdate, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: System.Void remove_onBeforeUpdate(System.Action value)

Disassembly:
	0x0377133C BL 0x37C13F4
	0x03771340 LDR X8, [X31 + 0x38]
	0x03771344 LDUR V0, [X31 + 0x28]
	0x03771348 LDUR V1, [X31 + 0x18]
	0x0377134C LDUR V2, [X31 + 0x8]
	0x03771350 STR X8, [X19 + 0x30]
	0x03771354 LDP X30, X21, [X31 + 0x40]
	0x03771358 STP V1, V0, [X19 + 0x10]
	0x0377135C STR V2, [X19]
	0x03771360 LDP X20, X19, [X31 + 0x50]
	0x03771364 ADD X31, X31, 0x60
	0x03771368 RET
	0x0377136C BL 0x1C16F20
	0x03771370 MOV X0, X31
	0x03771374 MOV X1, X31
	0x03771378 B 0x377137C
	0x0377137C STR X30, [X31 - 0x30]!
	0x03771380 STP X22, X21, [X31 + 0x10]
	0x03771384 STP X20, X19, [X31 + 0x20]
	0x03771388 ADRP X21, 0xC6F000
	0x0377138C ADRP X22, 0x982000
	0x03771390 LDRB W8, [X21 + 0xF0D]
	0x03771394 LDR X22, [X22 + 0x598]
	0x03771398 MOV X20, X1
	0x0377139C MOV X19, X0
	0x037713A0 TBNZ X8, 0x0, 0x3771400
	0x037713A4 ADRP X0, 0x9D5000
	0x037713A8 LDR X0, [X0 + 0xA38]
	0x037713AC BL 0x1C16CF4
	0x037713B0 ADRP X0, 0x9D5000
	0x037713B4 LDR X0, [X0 + 0xA40]
	0x037713B8 BL 0x1C16CF4
	0x037713BC ADRP X0, 0x9AA000
	0x037713C0 LDR X0, [X0 + 0x270]
	0x037713C4 BL 0x1C16CF4
	0x037713C8 ADRP X0, 0x9D5000
	0x037713CC LDR X0, [X0 + 0xA48]
	0x037713D0 BL 0x1C16CF4
	0x037713D4 ADRP X0, 0x982000
	0x037713D8 LDR X0, [X0 + 0x598]
	0x037713DC BL 0x1C16CF4
	0x037713E0 ADRP X0, 0x9D5000
	0x037713E4 LDR X0, [X0 + 0xA50]
	0x037713E8 BL 0x1C16CF4
	0x037713EC ADRP X0, 0x9D5000
	0x037713F0 LDR X0, [X0 + 0xA58]
	0x037713F4 BL 0x1C16CF4
	0x037713F8 MOVZ W8, 0x1
	0x037713FC STRB W8, [X21 + 0xF0D]
	0x03771400 LDR X0, [X22]
	0x03771404 LDR W8, [X0 + 0xE0]
	0x03771408 CBNZ W8, 0x3771410
	0x0377140C BL 0x1C16DFC
	0x03771410 ADRP X21, 0x9D5000
	0x03771414 ADRP X22, 0x9AA000
	0x03771418 LDR X21, [X21 + 0xA40]
	0x0377141C LDR X22, [X22 + 0x270]
	0x03771420 MOV X0, X20
	0x03771424 MOV X1, X31
	0x03771428 MOV X2, X31
	0x0377142C BL 0x3C3883C
	0x03771430 TBZ X0, 0x0, 0x3771470
	0x03771434 ADRP X8, 0x9D5000
	0x03771438 LDR X8, [X8 + 0xA50]
	0x0377143C LDR X0, [X8]
	0x03771440 BL 0x2241E84
	0x03771444 ADRP X8, 0x9D5000
	0x03771448 LDR X8, [X8 + 0xA38]
	0x0377144C LDR X1, [X8]
	0x03771450 BL 0x21C4D84
	0x03771454 MOV X20, X0
	0x03771458 CBNZ X0, 0x3771470
	0x0377145C ADRP X8, 0x9D5000
	0x03771460 LDR X8, [X8 + 0xA58]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC70000
	007 Move X21, 0x9AB000
	008 Move W8, [X19+3832]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AB000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3832], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.remove_onBeforeUpdate, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: System.Void add_onAfterUpdate(System.Action value)

Disassembly:
	0x03771464 LDR X0, [X8]
	0x03771468 BL 0x22537A0
	0x0377146C MOV X20, X0
	0x03771470 LDR X0, [X21]
	0x03771474 BL 0x1C16F10
	0x03771478 MOV X1, X31
	0x0377147C MOV X21, X0
	0x03771480 BL 0x37CCC2C
	0x03771484 LDR X0, [X22]
	0x03771488 LDR W8, [X0 + 0xE0]
	0x0377148C CBNZ W8, 0x3771498
	0x03771490 BL 0x1C16DFC
	0x03771494 LDR X0, [X22]
	0x03771498 LDR X8, [X0 + 0xB8]
	0x0377149C STR X21, [X8]
	0x037714A0 LDR X8, [X22]
	0x037714A4 LDR X8, [X8 + 0xB8]
	0x037714A8 LDR X21, [X8]
	0x037714AC CBNZ X19, 0x37714D4
	0x037714B0 ADRP X19, 0x9D5000
	0x037714B4 LDR X19, [X19 + 0xA48]
	0x037714B8 LDR X0, [X19]
	0x037714BC LDR W8, [X0 + 0xE0]
	0x037714C0 CBNZ W8, 0x37714CC
	0x037714C4 BL 0x1C16DFC
	0x037714C8 LDR X0, [X19]
	0x037714CC LDR X8, [X0 + 0xB8]
	0x037714D0 LDR X19, [X8]
	0x037714D4 CBZ X21, 0x377150C
	0x037714D8 MOV X0, X21
	0x037714DC MOV X1, X19
	0x037714E0 MOV X2, X20
	0x037714E4 MOV X3, X31
	0x037714E8 BL 0x37C71DC
	0x037714EC LDR X0, [X22]
	0x037714F0 LDR W8, [X0 + 0xE0]
	0x037714F4 CBNZ W8, 0x37714FC
	0x037714F8 BL 0x1C16DFC
	0x037714FC LDP X20, X19, [X31 + 0x20]
	0x03771500 LDP X22, X21, [X31 + 0x10]
	0x03771504 LDR X30, [X31], #0x30
	0x03771508 B 0x3771590
	0x0377150C BL 0x1C16F20
	0x03771510 STR X30, [X31 - 0x20]!
	0x03771514 STP X20, X19, [X31 + 0x10]
	0x03771518 ADRP X20, 0xC6F000
	0x0377151C ADRP X19, 0x9AA000
	0x03771520 LDRB W8, [X20 + 0xF0C]
	0x03771524 LDR X19, [X19 + 0x270]
	0x03771528 TBNZ X8, 0x0, 0x3771540
	0x0377152C ADRP X0, 0x9AA000
	0x03771530 LDR X0, [X0 + 0x270]
	0x03771534 BL 0x1C16CF4
	0x03771538 MOVZ W8, 0x1
	0x0377153C STRB W8, [X20 + 0xF0C]
	0x03771540 LDR X0, [X19]
	0x03771544 LDR W8, [X0 + 0xE0]
	0x03771548 CBNZ W8, 0x3771554
	0x0377154C BL 0x1C16DFC
	0x03771550 LDR X0, [X19]
	0x03771554 LDR X8, [X0 + 0xB8]
	0x03771558 LDR X8, [X8]
	0x0377155C CBZ X8, 0x377156C
	0x03771560 LDP X20, X19, [X31 + 0x10]
	0x03771564 LDR X30, [X31], #0x20
	0x03771568 RET
	0x0377156C LDR W8, [X0 + 0xE0]
	0x03771570 CBNZ W8, 0x3771578
	0x03771574 BL 0x1C16DFC
	0x03771578 LDP X20, X19, [X31 + 0x10]
	0x0377157C MOV X0, X31
	0x03771580 MOV X1, X31
	0x03771584 LDR X30, [X31], #0x20
	0x03771588 B 0x377137C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC70000
	007 Move X21, 0x9AB000
	008 Move W8, [X19+3833]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AB000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3833], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.add_onAfterUpdate, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: System.Void remove_onAfterUpdate(System.Action value)

Disassembly:
	0x0377158C RET
	0x03771590 STR X30, [X31 - 0x10]!
	0x03771594 MOV X0, X31
	0x03771598 BL 0x37325E4
	0x0377159C MOV X0, X31
	0x037715A0 BL 0x37DFEAC
	0x037715A4 MOV X0, X31
	0x037715A8 BL 0x37FCAC8
	0x037715AC MOV X0, X31
	0x037715B0 BL 0x37FCBC8
	0x037715B4 MOV X0, X31
	0x037715B8 BL 0x37DEF84
	0x037715BC MOV X0, X31
	0x037715C0 LDR X30, [X31], #0x10
	0x037715C4 B 0x37F0A8C
	0x037715C8 STR X30, [X31 - 0x20]!
	0x037715CC STP X20, X19, [X31 + 0x10]
	0x037715D0 ADRP X19, 0xC6F000
	0x037715D4 ADRP X20, 0x9AA000
	0x037715D8 LDRB W8, [X19 + 0xF0E]
	0x037715DC LDR X20, [X20 + 0x270]
	0x037715E0 TBNZ X8, 0x0, 0x37715F8
	0x037715E4 ADRP X0, 0x9AA000
	0x037715E8 LDR X0, [X0 + 0x270]
	0x037715EC BL 0x1C16CF4
	0x037715F0 MOVZ W8, 0x1
	0x037715F4 STRB W8, [X19 + 0xF0E]
	0x037715F8 LDR X0, [X20]
	0x037715FC LDR W8, [X0 + 0xE0]
	0x03771600 CBNZ W8, 0x3771608
	0x03771604 BL 0x1C16DFC
	0x03771608 LDP X20, X19, [X31 + 0x10]
	0x0377160C MOV W0, W31
	0x03771610 LDR X30, [X31], #0x20
	0x03771614 B 0x3770060
	0x03771618 STR X30, [X31 - 0x20]!
	0x0377161C STP X20, X19, [X31 + 0x10]
	0x03771620 ADRP X19, 0xC6F000
	0x03771624 ADRP X20, 0x9D5000
	0x03771628 LDRB W8, [X19 + 0xF0F]
	0x0377162C LDR X20, [X20 + 0x978]
	0x03771630 TBNZ X8, 0x0, 0x3771648
	0x03771634 ADRP X0, 0x9D5000
	0x03771638 LDR X0, [X0 + 0x978]
	0x0377163C BL 0x1C16CF4
	0x03771640 MOVZ W8, 0x1
	0x03771644 STRB W8, [X19 + 0xF0F]
	0x03771648 LDR X0, [X20]
	0x0377164C BL 0x1C16F10
	0x03771650 MOV X1, X31
	0x03771654 MOV X19, X0
	0x03771658 BL 0x33BDD8C
	0x0377165C LDR X8, [X20]
	0x03771660 LDR X8, [X8 + 0xB8]
	0x03771664 STR X19, [X8]
	0x03771668 LDP X20, X19, [X31 + 0x10]
	0x0377166C LDR X30, [X31], #0x20
	0x03771670 RET
	0x03771674 MOV X1, X31
	0x03771678 B 0x33BDD8C
	0x0377167C MOV X0, X1
	0x03771680 FMOV S0, -1
	0x03771684 MOVZ W1, 0x1
	0x03771688 B 0x377168C
	0x0377168C SUB X31, X31, 0x110
	0x03771690 STR D8, [X31 + 0xE0]
	0x03771694 STP X29, X30, [X31 + 0xF0]
	0x03771698 STP X20, X19, [X31 + 0x100]
	0x0377169C ADRP X20, 0xC6F000
	0x037716A0 LDRB W8, [X20 + 0xF2D]
	0x037716A4 MOV W19, W1
	0x037716A8 MOV V8.16B, V0.16B
	0x037716AC STR X0, [X31 + 0xE8]
	0x037716B0 TBNZ X8, 0x0, 0x37716C8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xC70000
	007 Move X21, 0x9AB000
	008 Move W8, [X19+3834]
	009 Move X21, [X21+624]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AB000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3834], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X19, [X8]
	028 Move [X31+12], W31
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move X2, X31
	032 Call Monitor.Enter, X0, X1
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Move X8, [X0+184]
	040 Move X0, [X8]
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Move X1, X20
	044 Move X2, X31
	045 Call InputManager.remove_onAfterUpdate, X0, X1
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move X20, X31
	071 Move X21, X0
	072 Move W8, [X31+12]
	073 Compare W8, 0
	074 JumpIfEqual {78}
	075 Move X0, X19
	076 Move X1, X31
	077 Call Monitor.Exit, X0
	078 Compare X20, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X21
	081 Call 0x1D2D690
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Call 0x1991590

Method: UnityEngine.InputSystem.InputSettings get_settings()

Disassembly:
	0x037711B0 LDUR X11, [X10 - 0x8]
	0x037711B4 CMP X11, X1
	0x037711B8 B.EQ 0x37711D8
	0x037711BC SUBS X9, X9, 0x1
	0x037711C0 ADD X10, X10, 0x10
	0x037711C4 B.NE 0x37711B0
	0x037711C8 MOVZ W2, 0x17
	0x037711CC MOV X0, X19
	0x037711D0 BL 0x1C5C788
	0x037711D4 B 0x37711E8
	0x037711D8 LDR W9, [X10]
	0x037711DC ADD W9, W9, 0x17
	0x037711E0 ADD X8, X8, W9, 0x4, SXTW
	0x037711E4 ADD X0, X8, 0x138
	0x037711E8 LDP X2, X1, [X0]
	0x037711EC MOV X0, X19
	0x037711F0 LDP X20, X19, [X31 + 0x10]
	0x037711F4 LDR X30, [X31], #0x20
	0x037711F8 BR X2
	0x037711FC BL 0x1C16F20
	0x03771200 STP X30, X21, [X31 - 0x20]!
	0x03771204 STP X20, X19, [X31 + 0x10]
	0x03771208 ADRP X21, 0xC6F000
	0x0377120C ADRP X20, 0x9AA000
	0x03771210 LDRB W8, [X21 + 0xF0A]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC70000
	005 Move X19, 0x9AB000
	006 Move W8, [X20+3835]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AB000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3835], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8]
	025 Compare X8, 0
	026 JumpIfEqual {32}
	027 Move X0, [X8+1152]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0
	032 Call 0x1C17F20

Method: System.Void set_settings(UnityEngine.InputSystem.InputSettings value)

Disassembly:
	0x037716B4 ADRP X0, 0x9AA000
	0x037716B8 LDR X0, [X0 + 0x270]
	0x037716BC BL 0x1C16CF4
	0x037716C0 MOVZ W8, 0x1
	0x037716C4 STRB W8, [X20 + 0xF2D]
	0x037716C8 MOVI V0.2D, 0x0
	0x037716CC ADD X0, X31, 0xE8
	0x037716D0 MOV X1, X31
	0x037716D4 STP V0, V0, [X31 + 0xC0]
	0x037716D8 STP V0, V0, [X31 + 0xA0]
	0x037716DC STP V0, V0, [X31 + 0x80]
	0x037716E0 STR V0, [X31 + 0x7]
	0x037716E4 BL 0x37F80B4
	0x037716E8 MOVZ W8, 0x4154
	0x037716EC MOVK W8, 0x53540000
	0x037716F0 CMP W0, W8
	0x037716F4 B.EQ 0x3771718
	0x037716F8 ADD X0, X31, 0xE8
	0x037716FC MOV X1, X31
	0x03771700 BL 0x37F80B4
	0x03771704 MOVZ W8, 0x5441
	0x03771708 MOVK W8, 0x444C0000
	0x0377170C CMP W0, W8
	0x03771710 MOV X8, X31
	0x03771714 B.NE 0x37717BC
	0x03771718 FCMP S8, 0x0
	0x0377171C B.PL 0x3771744
	0x03771720 ADRP X8, 0x9AA000
	0x03771724 LDR X8, [X8 + 0x270]
	0x03771728 LDR X0, [X8]
	0x0377172C LDR W8, [X0 + 0xE0]
	0x03771730 CBNZ W8, 0x3771738
	0x03771734 BL 0x1C16DFC
	0x03771738 BL 0x37701B0
	0x0377173C CBZ X0, 0x37717D8
	0x03771740 LDR V8, [X0 + 0x40]
	0x03771744 LDR X0, [X31 + 0xE8]
	0x03771748 ADD X8, X31, 0x0
	0x0377174C MOVZ W1, 0x1
	0x03771750 MOV X2, X31
	0x03771754 MOV V0.16B, V8.16B
	0x03771758 BL 0x3775004
	0x0377175C LDP X2, X1, [X31]
	0x03771760 LDR W3, [X31 + 0x10]
	0x03771764 LDR V0, [X31 + 0x14]
	0x03771768 MOVI V1.2D, 0x0
	0x0377176C ADD X0, X31, 0x0
	0x03771770 STP V1, V1, [X31 + 0x50]
	0x03771774 STP V1, V1, [X31 + 0x30]
	0x03771778 STP V1, V1, [X31 + 0x10]
	0x0377177C STR V1, [X31]
	0x03771780 BL 0x3775980
	0x03771784 ADD X0, X31, 0x70
	0x03771788 ADD X1, X31, 0x0
	0x0377178C MOVZ W2, 0x70
	0x03771790 BL 0x3EB1AC0
	0x03771794 ADD X0, X31, 0x70
	0x03771798 BL 0x3775274
	0x0377179C TBZ X0, 0x0, 0x37717B8
	0x037717A0 LDR X8, [X31 + 0xB8]
	0x037717A4 TBZ X19, 0x0, 0x37717BC
	0x037717A8 CBZ X8, 0x37717D4
	0x037717AC LDRB W9, [X8 + 0xA0]
	0x037717B0 TBZ X9, 0x3, 0x3771794
	0x037717B4 B 0x37717BC
	0x037717B8 MOV X8, X31
	0x037717BC LDP X20, X19, [X31 + 0x100]
	0x037717C0 LDP X29, X30, [X31 + 0xF0]
	0x037717C4 LDR V8, [X31 + 0xE0]
	0x037717C8 MOV X0, X8
	0x037717CC ADD X31, X31, 0x110
	0x037717D0 RET
	0x037717D4 BL 0x1C16F20
	0x037717D8 BL 0x1C16F20
	0x037717DC B 0x37717E0
	0x037717E0 CMP W1, 0x1
	0x037717E4 B.NE 0x3771810
	0x037717E8 BL 0x3EB1AD0
	0x037717EC LDR X19, [X0]
	0x037717F0 BL 0x3EB1AE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC70000
	006 Move X20, 0x983000
	007 Move W8, [X21+3836]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x9AB000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move X0, 0x983000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3836], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {85}
	035 Move X21, 0x9AB000
	036 Move X21, [X21+624]
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X21]
	043 Move X8, [X0+184]
	044 Move X8, [X8]
	045 Compare X8, 0
	046 JumpIfEqual {84}
	047 Move X0, [X20]
	048 Move X20, [X8+1152]
	049 Move W9, [X0+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X19
	055 Move X2, X31
	056 Call Object.op_Equality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {66}
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Return 
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {72}
	070 Call 0x1C17DFC
	071 Move X0, [X21]
	072 Move X8, [X0+184]
	073 Move X0, [X8]
	074 Compare X0, 0
	075 JumpIfEqual {84}
	076 Move X1, X19
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X2, X31
	080 Move X30, [X31+32]
	081 Move X21, [X31+40]
	082 Call InputManager.set_settings, X0, X1
	083 Return 
	084 Call 0x1C17F20
	085 Move X0, 0x988000
	086 Move X0, [X0+1320]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0x98D000
	091 Move X0, [X0+3784]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Move X2, X31
	096 Call ArgumentNullException..ctor, X0, X1
	097 Move X0, 0x9D6000
	098 Move X0, [X0+2520]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X19
	102 Call 0x1C17DEC

Method: System.Void add_onSettingsChange(System.Action value)

Disassembly:
	0x037717F4 MOV X8, X31
	0x037717F8 STR X31, [X31 + 0xB0]
	0x037717FC CBZ X19, 0x37717BC
	0x03771800 MOV X0, X19
	0x03771804 BL 0x1C16F18
	0x03771808 STR X31, [X31 + 0xB0]
	0x0377180C CBNZ X19, 0x3771814
	0x03771810 BL 0x1D2C690
	0x03771814 MOV X0, X19
	0x03771818 BL 0x1C16F18
	0x0377181C BL 0x1990590
	0x03771820 CMP X1, 0x0
	0x03771824 CSET W0, NE
	0x03771828 RET
	0x0377182C STP X29, X30, [X31 - 0x60]!
	0x03771830 STP X28, X27, [X31 + 0x10]
	0x03771834 STP X26, X25, [X31 + 0x20]
	0x03771838 STP X24, X23, [X31 + 0x30]
	0x0377183C STP X22, X21, [X31 + 0x40]
	0x03771840 STP X20, X19, [X31 + 0x50]
	0x03771844 SUB X31, X31, 0x1C0
	0x03771848 ADRP X27, 0xC6F000
	0x0377184C ADRP X26, 0x9D5000
	0x03771850 ADRP X19, 0x9D5000
	0x03771854 ADRP X25, 0x9D5000
	0x03771858 ADRP X24, 0x9D5000
	0x0377185C ADRP X23, 0x9D5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC70000
	006 Move X20, 0x9AB000
	007 Move W8, [X21+3837]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AB000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3837], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.add_onSettingsChange, X0, X1
	036 Return 
	037 Call 0x1C17F20

Method: System.Void remove_onSettingsChange(System.Action value)

Disassembly:
	0x03771860 ADRP X22, 0x9D5000
	0x03771864 ADRP X21, 0x9D5000
	0x03771868 ADRP X20, 0x9D5000
	0x0377186C ADRP X29, 0x986000
	0x03771870 ADRP X28, 0x9D5000
	0x03771874 LDR X26, [X26 + 0xA60]
	0x03771878 LDR X19, [X19 + 0xA68]
	0x0377187C LDR X25, [X25 + 0xA70]
	0x03771880 LDR X24, [X24 + 0xA78]
	0x03771884 LDR X23, [X23 + 0xA80]
	0x03771888 LDR X22, [X22 + 0xA88]
	0x0377188C LDR X21, [X21 + 0xA90]
	0x03771890 LDR X20, [X20 + 0xA98]
	0x03771894 LDR X29, [X29 + 0x468]
	0x03771898 LDR X28, [X28 + 0xAA0]
	0x0377189C LDRB W8, [X27 + 0xF10]
	0x037718A0 TBNZ X8, 0x0, 0x37719FC
	0x037718A4 ADRP X0, 0x9D5000
	0x037718A8 LDR X0, [X0 + 0xA68]
	0x037718AC BL 0x1C16CF4
	0x037718B0 ADRP X0, 0x9D5000
	0x037718B4 LDR X0, [X0 + 0xAA8]
	0x037718B8 BL 0x1C16CF4
	0x037718BC ADRP X0, 0x9D5000
	0x037718C0 LDR X0, [X0 + 0xAB0]
	0x037718C4 BL 0x1C16CF4
	0x037718C8 ADRP X0, 0x9D5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC70000
	006 Move X20, 0x9AB000
	007 Move W8, [X21+3838]
	008 Move X20, [X20+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AB000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3838], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, [X8]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call InputManager.remove_onSettingsChange, X0, X1
	036 Return 
	037 Call 0x1C17F20

Method: System.Void add_onActionChange(System.Action`2<System.Object, UnityEngine.InputSystem.InputActionChange> value)

Disassembly:
	0x037718CC LDR X0, [X0 + 0xA90]
	0x037718D0 BL 0x1C16CF4
	0x037718D4 ADRP X0, 0x9D5000
	0x037718D8 LDR X0, [X0 + 0xAB8]
	0x037718DC BL 0x1C16CF4
	0x037718E0 ADRP X0, 0x9D5000
	0x037718E4 LDR X0, [X0 + 0xA60]
	0x037718E8 BL 0x1C16CF4
	0x037718EC ADRP X0, 0x9D5000
	0x037718F0 LDR X0, [X0 + 0xAA0]
	0x037718F4 BL 0x1C16CF4
	0x037718F8 ADRP X0, 0x9D5000
	0x037718FC LDR X0, [X0 + 0xAC0]
	0x03771900 BL 0x1C16CF4
	0x03771904 ADRP X0, 0x9D5000
	0x03771908 LDR X0, [X0 + 0xAC8]
	0x0377190C BL 0x1C16CF4
	0x03771910 ADRP X0, 0x9D5000
	0x03771914 LDR X0, [X0 + 0xAD0]
	0x03771918 BL 0x1C16CF4
	0x0377191C ADRP X0, 0x9D5000
	0x03771920 LDR X0, [X0 + 0xA80]
	0x03771924 BL 0x1C16CF4
	0x03771928 ADRP X0, 0x986000
	0x0377192C LDR X0, [X0 + 0x468]
	0x03771930 BL 0x1C16CF4
	0x03771934 ADRP X0, 0x9D5000
	0x03771938 LDR X0, [X0 + 0xAD8]
	0x0377193C BL 0x1C16CF4
	0x03771940 ADRP X0, 0x9D5000
	0x03771944 LDR X0, [X0 + 0xA78]
	0x03771948 BL 0x1C16CF4
	0x0377194C ADRP X0, 0x9D5000
	0x03771950 LDR X0, [X0 + 0xAE0]
	0x03771954 BL 0x1C16CF4
	0x03771958 ADRP X0, 0x9D5000
	0x0377195C LDR X0, [X0 + 0xA70]
	0x03771960 BL 0x1C16CF4
	0x03771964 ADRP X0, 0x9D5000
	0x03771968 LDR X0, [X0 + 0xAE8]
	0x0377196C BL 0x1C16CF4
	0x03771970 ADRP X0, 0x9D5000
	0x03771974 LDR X0, [X0 + 0xAF0]
	0x03771978 BL 0x1C16CF4
	0x0377197C ADRP X0, 0x9D5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC70000
	005 Move W8, [X20+3839]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x9D6000
	012 Move X0, [X0+2528]
	013 Call 0x1C17CF4
	014 Move X0, 0x9D5000
	015 Move X0, [X0+728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3839], W8
	019 Compare X19, 0
	020 JumpIfEqual {35}
	021 Move X8, 0x9D5000
	022 Move X8, [X8+728]
	023 Move X9, 0x9D6000
	024 Move X1, X19
	025 Move X8, [X8]
	026 Move X9, [X9+2528]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move X2, [X9]
	031 Add X0, X8, 24
	032 Move X30, [X31+32]
	033 Call 0x28F24E0, X0, X1
	034 Return 
	035 Move X0, 0x988000
	036 Move X0, [X0+1320]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0x98D000
	041 Move X0, [X0+3784]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call ArgumentNullException..ctor, X0, X1
	047 Move X0, 0x9D6000
	048 Move X0, [X0+2536]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC

Method: System.Void remove_onActionChange(System.Action`2<System.Object, UnityEngine.InputSystem.InputActionChange> value)

Disassembly:
	0x03771980 LDR X0, [X0 + 0xA88]
	0x03771984 BL 0x1C16CF4
	0x03771988 ADRP X0, 0x9C6000
	0x0377198C LDR X0, [X0 + 0xB08]
	0x03771990 BL 0x1C16CF4
	0x03771994 ADRP X0, 0x9D5000
	0x03771998 LDR X0, [X0 + 0xAF8]
	0x0377199C BL 0x1C16CF4
	0x037719A0 ADRP X0, 0x9D5000
	0x037719A4 LDR X0, [X0 + 0xB00]
	0x037719A8 BL 0x1C16CF4
	0x037719AC ADRP X0, 0x9D5000
	0x037719B0 LDR X0, [X0 + 0xB08]
	0x037719B4 BL 0x1C16CF4
	0x037719B8 ADRP X0, 0x9D5000
	0x037719BC LDR X0, [X0 + 0xB10]
	0x037719C0 BL 0x1C16CF4
	0x037719C4 ADRP X0, 0x9D5000
	0x037719C8 LDR X0, [X0 + 0xA98]
	0x037719CC BL 0x1C16CF4
	0x037719D0 ADRP X0, 0x9D5000
	0x037719D4 LDR X0, [X0 + 0xB18]
	0x037719D8 BL 0x1C16CF4
	0x037719DC ADRP X0, 0x9D5000
	0x037719E0 LDR X0, [X0 + 0xB20]
	0x037719E4 BL 0x1C16CF4
	0x037719E8 ADRP X0, 0x9D5000
	0x037719EC LDR X0, [X0 + 0xB28]
	0x037719F0 BL 0x1C16CF4
	0x037719F4 MOVZ W8, 0x1
	0x037719F8 STRB W8, [X27 + 0xF10]
	0x037719FC LDR X1, [X26]
	0x03771A00 ADD X0, X31, 0x1B0
	0x03771A04 MOV X2, X31
	0x03771A08 STP X31, X31, [X31 + 0x1B0]
	0x03771A0C BL 0x3757420
	0x03771A10 LDR X8, [X19]
	0x03771A14 LDR V0, [X31 + 0x1B]
	0x03771A18 ADD X0, X31, 0x1A0
	0x03771A1C MOV X2, X31
	0x03771A20 LDR X8, [X8 + 0xB8]
	0x03771A24 STR V0, [X8]
	0x03771A28 LDR X1, [X25]
	0x03771A2C STP X31, X31, [X31 + 0x1A0]
	0x03771A30 BL 0x3757420

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC70000
	005 Move W8, [X20+3840]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x9D6000
	012 Move X0, [X0+2544]
	013 Call 0x1C17CF4
	014 Move X0, 0x9D5000
	015 Move X0, [X0+728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3840], W8
	019 Compare X19, 0
	020 JumpIfEqual {35}
	021 Move X8, 0x9D5000
	022 Move X8, [X8+728]
	023 Move X9, 0x9D6000
	024 Move X1, X19
	025 Move X8, [X8]
	026 Move X9, [X9+2544]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move X2, [X9]
	031 Add X0, X8, 24
	032 Move X30, [X31+32]
	033 Call 0x28F2650, X0, X1
	034 Return 
	035 Move X0, 0x988000
	036 Move X0, [X0+1320]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0x98D000
	041 Move X0, [X0+3784]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call ArgumentNullException..ctor, X0, X1
	047 Move X0, 0x9D6000
	048 Move X0, [X0+2552]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC

Method: System.Void RegisterInteraction(System.Type type, System.String name = null)

Disassembly:
	0x03771A34 LDR X8, [X19]
	0x03771A38 LDR V0, [X31 + 0x1A]
	0x03771A3C ADD X0, X31, 0x190
	0x03771A40 MOV X2, X31
	0x03771A44 LDR X8, [X8 + 0xB8]
	0x03771A48 STR V0, [X8 + 0x1]
	0x03771A4C LDR X1, [X24]
	0x03771A50 STP X31, X31, [X31 + 0x190]
	0x03771A54 BL 0x3757420
	0x03771A58 LDR X8, [X19]
	0x03771A5C LDR V0, [X31 + 0x19]
	0x03771A60 ADD X0, X31, 0x180
	0x03771A64 MOV X2, X31
	0x03771A68 LDR X8, [X8 + 0xB8]
	0x03771A6C STR V0, [X8 + 0x2]
	0x03771A70 LDR X1, [X23]
	0x03771A74 STP X31, X31, [X31 + 0x180]
	0x03771A78 BL 0x3757420
	0x03771A7C LDR X8, [X19]
	0x03771A80 LDR V0, [X31 + 0x18]
	0x03771A84 ADD X0, X31, 0x170
	0x03771A88 MOV X2, X31
	0x03771A8C LDR X8, [X8 + 0xB8]
	0x03771A90 STR V0, [X8 + 0x3]
	0x03771A94 LDR X1, [X22]
	0x03771A98 STP X31, X31, [X31 + 0x170]
	0x03771A9C BL 0x3757420
	0x03771AA0 LDR X8, [X19]
	0x03771AA4 LDR V0, [X31 + 0x17]
	0x03771AA8 ADD X0, X31, 0x160
	0x03771AAC MOV X2, X31
	0x03771AB0 LDR X8, [X8 + 0xB8]
	0x03771AB4 STR V0, [X8 + 0x4]
	0x03771AB8 LDR X1, [X21]
	0x03771ABC STP X31, X31, [X31 + 0x160]
	0x03771AC0 BL 0x3757420
	0x03771AC4 LDR X8, [X19]
	0x03771AC8 LDR V0, [X31 + 0x16]
	0x03771ACC ADD X0, X31, 0x150
	0x03771AD0 MOV X2, X31
	0x03771AD4 LDR X8, [X8 + 0xB8]
	0x03771AD8 STR V0, [X8 + 0x5]
	0x03771ADC LDR X1, [X20]
	0x03771AE0 STP X31, X31, [X31 + 0x150]
	0x03771AE4 BL 0x3757420
	0x03771AE8 LDR X8, [X19]
	0x03771AEC LDR V0, [X31 + 0x15]
	0x03771AF0 ADD X0, X31, 0x140
	0x03771AF4 MOV X2, X31
	0x03771AF8 LDR X8, [X8 + 0xB8]
	0x03771AFC STR V0, [X8 + 0x6]
	0x03771B00 LDR X1, [X29]
	0x03771B04 STP X31, X31, [X31 + 0x140]
	0x03771B08 BL 0x3757420
	0x03771B0C LDR X8, [X19]
	0x03771B10 LDR V0, [X31 + 0x14]
	0x03771B14 ADD X0, X31, 0x130
	0x03771B18 MOV X2, X31
	0x03771B1C LDR X8, [X8 + 0xB8]
	0x03771B20 STR V0, [X8 + 0x7]
	0x03771B24 LDR X1, [X28]
	0x03771B28 STP X31, X31, [X31 + 0x130]
	0x03771B2C BL 0x3757420
	0x03771B30 LDR X8, [X19]
	0x03771B34 LDR V0, [X31 + 0x13]
	0x03771B38 ADD X0, X31, 0x120
	0x03771B3C MOV X2, X31
	0x03771B40 LDR X8, [X8 + 0xB8]
	0x03771B44 STR V0, [X8 + 0x8]
	0x03771B48 ADRP X8, 0x9D5000
	0x03771B4C LDR X8, [X8 + 0xAB0]
	0x03771B50 STP X31, X31, [X31 + 0x120]
	0x03771B54 LDR X1, [X8]
	0x03771B58 BL 0x3757420
	0x03771B5C LDR X8, [X19]
	0x03771B60 LDR V0, [X31 + 0x12]
	0x03771B64 ADD X0, X31, 0x110
	0x03771B68 MOV X2, X31
	0x03771B6C LDR X8, [X8 + 0xB8]
	0x03771B70 STR V0, [X8 + 0x9]
	0x03771B74 ADRP X8, 0x9D5000
	0x03771B78 LDR X8, [X8 + 0xAD0]
	0x03771B7C STP X31, X31, [X31 + 0x110]
	0x03771B80 LDR X1, [X8]
	0x03771B84 BL 0x3757420
	0x03771B88 LDR X8, [X19]
	0x03771B8C LDR V0, [X31 + 0x11]
	0x03771B90 ADD X0, X31, 0x100
	0x03771B94 MOV X2, X31
	0x03771B98 LDR X8, [X8 + 0xB8]
	0x03771B9C STR V0, [X8 + 0xA]
	0x03771BA0 ADRP X8, 0x9D5000
	0x03771BA4 LDR X8, [X8 + 0xAE0]
	0x03771BA8 STP X31, X31, [X31 + 0x100]
	0x03771BAC LDR X1, [X8]
	0x03771BB0 BL 0x3757420
	0x03771BB4 LDR X8, [X19]
	0x03771BB8 LDR V0, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC70000
	007 Move X21, 0x983000
	008 Move W8, [X22+3841]
	009 Move X21, [X21+1728]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x9AB000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move X0, 0x983000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move X0, 0x9D4000
	023 Move X0, [X0+3896]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+3841], W8
	027 Move X0, [X21]
	028 Move [X31+8], X31
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move X1, X31
	035 Move X2, X31
	036 Call Type.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {104}
	041 Move X0, X20
	042 Move X1, X31
	043 Call String.IsNullOrEmpty, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {78}
	048 Compare X19, 0
	049 JumpIfEqual {103}
	050 Move X8, [X19]
	051 Move X0, X19
	052 Move X9, [X8+424]
	053 Move X1, [X8+432]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Compare X0, 0
	056 JumpIfEqual {103}
	057 Move X21, 0x9D4000
	058 Move X21, [X21+3896]
	059 Move X2, X31
	060 Move X20, X0
	061 Move X1, [X21]
	062 Call String.EndsWith, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {78}
	067 Move X8, [X21]
	068 Compare X8, 0
	069 JumpIfEqual {103}
	070 Move W9, [X20+16]
	071 Move W8, [X8+16]
	072 Move X0, X20
	073 Move W1, W31
	074 Move X3, X31
	075 Subtract W2, W9, W8
	076 Call String.Substring, X0, X1, X2
	077 Move X20, X0
	078 Move X21, 0x9AB000
	079 Move X21, [X21+624]
	080 Move X0, [X21]
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {86}
	084 Call 0x1C17DFC
	085 Move X0, [X21]
	086 Move X8, [X0+184]
	087 Move X8, [X8]
	088 Compare X8, 0
	089 JumpIfEqual {103}
	090 Move X8, [X8+96]
	091 Add X0, X31, 8
	092 Move X1, X20
	093 Move X2, X19
	094 Move X3, X31
	095 Move [X31+8], X8
	096 Call TypeTable.AddTypeRegistration, X0, X1, X2
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Return 
	103 Call 0x1C17F20
	104 Move X0, 0x988000
	105 Move X0, [X0+1320]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0x98B000
	110 Move X0, [X0+1512]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call ArgumentNullException..ctor, X0, X1
	116 Move X0, 0x9D6000
	117 Move X0, [X0+2560]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC

Method: System.Void RegisterInteraction(System.String name = null)

Disassembly:
	0x0220D5F0 B.NE 0x220D608
	0x0220D5F4 ADD X31, X29, 0x0
	0x0220D5F8 LDP X20, X19, [X31 + 0x20]
	0x0220D5FC LDP X22, X21, [X31 + 0x10]
	0x0220D600 LDP X29, X30, [X31], #0x30
	0x0220D604 RET
	0x0220D608 BL 0x3EB1B20
	0x0220D60C SUB X31, X31, 0x30
	0x0220D610 STR X30, [X31 + 0x10]
	0x0220D614 STP X20, X19, [X31 + 0x20]
	0x0220D618 LDR X8, [X1 + 0x38]
	0x0220D61C MOV X19, X1
	0x0220D620 MOV X20, X0
	0x0220D624 CBNZ X8, 0x220D650
	0x0220D628 ADRP X0, 0x1EF1000
	0x0220D62C LDR X0, [X0 + 0x6D8]
	0x0220D630 BL 0x1C16CF4
	0x0220D634 ADRP X0, 0x1F0E000
	0x0220D638 LDR X0, [X0 + 0xFB8]
	0x0220D63C BL 0x1C16CF4
	0x0220D640 LDR X8, [X19 + 0x38]
	0x0220D644 CBNZ X8, 0x220D650
	0x0220D648 MOV X0, X19
	0x0220D64C BL 0x1C5C6E0
	0x0220D650 ADRP X8, 0x1F0E000
	0x0220D654 ADRP X9, 0x1EF1000
	0x0220D658 LDR X8, [X8 + 0xFB8]
	0x0220D65C LDR X9, [X9 + 0x6D8]
	0x0220D660 MOV X1, X20
	0x0220D664 MOV X3, X31
	0x0220D668 LDR X0, [X8]
	0x0220D66C LDR X2, [X9]
	0x0220D670 BL 0x32274B8
	0x0220D674 LDR X8, [X19 + 0x38]
	0x0220D678 ADD X3, X31, 0x8
	0x0220D67C ADD X4, X31, 0x18
	0x0220D680 MOV X2, X31
	0x0220D684 LDR X1, [X8]
	0x0220D688 LDR X8, [X1]
	0x0220D68C STR X0, [X31 + 0x8]
	0x0220D690 LDR X9, [X1 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {21}
	008 Move X0, 0x1F0F000
	009 Move X0, [X0+624]
	010 Move X20, X1
	011 Call 0x1C17CF4
	012 Move X0, 0x1EE7000
	013 Move X0, [X0+1728]
	014 Call 0x1C17CF4
	015 Move X8, [X20+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {21}
	018 Move X0, X20
	019 Call 0x1C5D6E0
	020 Move X8, [X20+56]
	021 Move X9, 0x1EE7000
	022 Move X9, [X9+1728]
	023 Move X20, [X8]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Call Type.GetTypeFromHandle, X0
	032 Move X8, 0x1F0F000
	033 Move X8, [X8+624]
	034 Move X20, X0
	035 Move X8, [X8]
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, X31
	046 Move X30, [X31+32]
	047 Call InputSystem.RegisterInteraction, X0, X1
	048 Return 

Method: System.Type TryGetInteraction(System.String name)

Disassembly:
	0x03771BBC ADD X0, X31, 0xF0
	0x03771BC0 MOV X2, X31
	0x03771BC4 LDR X8, [X8 + 0xB8]
	0x03771BC8 STR V0, [X8 + 0xB]
	0x03771BCC ADRP X8, 0x9D5000
	0x03771BD0 LDR X8, [X8 + 0xAA8]
	0x03771BD4 STP X31, X31, [X31 + 0xF0]
	0x03771BD8 LDR X1, [X8]
	0x03771BDC BL 0x3757420
	0x03771BE0 LDR X8, [X19]
	0x03771BE4 LDR V0, [X31 + 0xF]
	0x03771BE8 ADD X0, X31, 0xE0
	0x03771BEC MOV X2, X31
	0x03771BF0 LDR X8, [X8 + 0xB8]
	0x03771BF4 STR V0, [X8 + 0xC]
	0x03771BF8 ADRP X8, 0x9D5000
	0x03771BFC LDR X8, [X8 + 0xAB8]
	0x03771C00 STP X31, X31, [X31 + 0xE0]
	0x03771C04 LDR X1, [X8]
	0x03771C08 BL 0x3757420
	0x03771C0C LDR X8, [X19]
	0x03771C10 LDR V0, [X31 + 0xE]
	0x03771C14 ADD X0, X31, 0xD0
	0x03771C18 MOV X2, X31
	0x03771C1C LDR X8, [X8 + 0xB8]
	0x03771C20 STR V0, [X8 + 0xD]
	0x03771C24 ADRP X8, 0x9C6000
	0x03771C28 LDR X8, [X8 + 0xB08]
	0x03771C2C STP X31, X31, [X31 + 0xD0]
	0x03771C30 LDR X1, [X8]
	0x03771C34 BL 0x3757420
	0x03771C38 LDR X8, [X19]
	0x03771C3C LDR V0, [X31 + 0xD]
	0x03771C40 ADD X0, X31, 0xC0
	0x03771C44 MOV X2, X31
	0x03771C48 LDR X8, [X8 + 0xB8]
	0x03771C4C STR V0, [X8 + 0xE]
	0x03771C50 ADRP X8, 0x9D5000
	0x03771C54 LDR X8, [X8 + 0xAF0]
	0x03771C58 STP X31, X31, [X31 + 0xC0]
	0x03771C5C LDR X1, [X8]
	0x03771C60 BL 0x3757420
	0x03771C64 LDR X8, [X19]
	0x03771C68 LDR V0, [X31 + 0xC]
	0x03771C6C ADD X0, X31, 0xB0
	0x03771C70 MOV X2, X31
	0x03771C74 LDR X8, [X8 + 0xB8]
	0x03771C78 STR V0, [X8 + 0xF]
	0x03771C7C ADRP X8, 0x9D5000
	0x03771C80 LDR X8, [X8 + 0xAC0]
	0x03771C84 STP X31, X31, [X31 + 0xB0]
	0x03771C88 LDR X1, [X8]
	0x03771C8C BL 0x3757420
	0x03771C90 LDR X8, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC70000
	005 Move W8, [X20+3842]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9AB000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3842], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Move [X31+8], X31
	019 Call String.IsNullOrEmpty, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {46}
	024 Move X20, 0x9AB000
	025 Move X20, [X20+624]
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move X8, [X8]
	034 Compare X8, 0
	035 JumpIfEqual {64}
	036 Move X8, [X8+96]
	037 Add X0, X31, 8
	038 Move X1, X19
	039 Move X2, X31
	040 Move [X31+8], X8
	041 Call TypeTable.LookupTypeRegistration, X0, X1
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0
	046 Move X0, 0x988000
	047 Move X0, [X0+1320]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X19, X0
	051 Move X0, 0x98B000
	052 Move X0, [X0+1416]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Move X2, X31
	057 Call ArgumentNullException..ctor, X0, X1
	058 Move X0, 0x9D6000
	059 Move X0, [X0+2568]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Call 0x1C17DEC
	064 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<System.String> ListInteractions()

Disassembly:
	0x03771C94 LDR V0, [X31 + 0xB]
	0x03771C98 ADD X0, X31, 0xA0
	0x03771C9C MOV X2, X31
	0x03771CA0 LDR X8, [X8 + 0xB8]
	0x03771CA4 STR V0, [X8 + 0x10]
	0x03771CA8 ADRP X8, 0x9D5000
	0x03771CAC LDR X8, [X8 + 0xAC8]
	0x03771CB0 STP X31, X31, [X31 + 0xA0]
	0x03771CB4 LDR X1, [X8]
	0x03771CB8 BL 0x3757420
	0x03771CBC LDR X8, [X19]
	0x03771CC0 LDR V0, [X31 + 0xA]
	0x03771CC4 ADD X0, X31, 0x90
	0x03771CC8 MOV X2, X31
	0x03771CCC LDR X8, [X8 + 0xB8]
	0x03771CD0 STR V0, [X8 + 0x11]
	0x03771CD4 ADRP X8, 0x9D5000
	0x03771CD8 LDR X8, [X8 + 0xAE8]
	0x03771CDC STP X31, X31, [X31 + 0x90]
	0x03771CE0 LDR X1, [X8]
	0x03771CE4 BL 0x3757420
	0x03771CE8 LDR X8, [X19]
	0x03771CEC LDR V0, [X31 + 0x9]
	0x03771CF0 ADD X0, X31, 0x80
	0x03771CF4 MOV X2, X31
	0x03771CF8 LDR X8, [X8 + 0xB8]
	0x03771CFC STR V0, [X8 + 0x12]
	0x03771D00 ADRP X8, 0x9D5000
	0x03771D04 LDR X8, [X8 + 0xAF8]
	0x03771D08 STP X31, X31, [X31 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC70000
	005 Move X19, 0x9AB000
	006 Move W8, [X20+3843]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AB000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3843], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {24}
	022 Call 0x1C17DFC
	023 Move X0, [X19]
	024 Move X8, [X0+184]
	025 Move X8, [X8]
	026 Compare X8, 0
	027 JumpIfEqual {37}
	028 Move X8, [X8+96]
	029 Add X0, X31, 8
	030 Move X1, X31
	031 Move [X31+8], X8
	032 Call TypeTable.get_names, X0
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C17F20

Method: System.Void RegisterBindingComposite(System.Type type, System.String name)

Disassembly:
	0x03771D0C LDR X1, [X8]
	0x03771D10 BL 0x3757420
	0x03771D14 LDR X8, [X19]
	0x03771D18 LDR V0, [X31 + 0x8]
	0x03771D1C ADD X0, X31, 0x70
	0x03771D20 MOV X2, X31
	0x03771D24 LDR X8, [X8 + 0xB8]
	0x03771D28 STR V0, [X8 + 0x13]
	0x03771D2C ADRP X8, 0x9D5000
	0x03771D30 LDR X8, [X8 + 0xB18]
	0x03771D34 STP X31, X31, [X31 + 0x70]
	0x03771D38 LDR X1, [X8]
	0x03771D3C BL 0x3757420
	0x03771D40 LDR X8, [X19]
	0x03771D44 LDR V0, [X31 + 0x7]
	0x03771D48 ADD X0, X31, 0x60
	0x03771D4C MOV X2, X31
	0x03771D50 LDR X8, [X8 + 0xB8]
	0x03771D54 STR V0, [X8 + 0x14]
	0x03771D58 ADRP X8, 0x9D5000
	0x03771D5C LDR X8, [X8 + 0xB00]
	0x03771D60 STP X31, X31, [X31 + 0x60]
	0x03771D64 LDR X1, [X8]
	0x03771D68 BL 0x3757420
	0x03771D6C LDR X8, [X19]
	0x03771D70 LDR V0, [X31 + 0x6]
	0x03771D74 ADD X0, X31, 0x50
	0x03771D78 MOV X2, X31
	0x03771D7C LDR X8, [X8 + 0xB8]
	0x03771D80 STR V0, [X8 + 0x15]
	0x03771D84 ADRP X8, 0x9D5000
	0x03771D88 LDR X8, [X8 + 0xB08]
	0x03771D8C STP X31, X31, [X31 + 0x50]
	0x03771D90 LDR X1, [X8]
	0x03771D94 BL 0x3757420
	0x03771D98 LDR X8, [X19]
	0x03771D9C LDR V0, [X31 + 0x5]
	0x03771DA0 ADD X0, X31, 0x40
	0x03771DA4 MOV X2, X31
	0x03771DA8 LDR X8, [X8 + 0xB8]
	0x03771DAC STR V0, [X8 + 0x16]
	0x03771DB0 ADRP X8, 0x9D5000
	0x03771DB4 LDR X8, [X8 + 0xB20]
	0x03771DB8 STP X31, X31, [X31 + 0x40]
	0x03771DBC LDR X1, [X8]
	0x03771DC0 BL 0x3757420
	0x03771DC4 LDR X8, [X19]
	0x03771DC8 LDR V0, [X31 + 0x4]
	0x03771DCC ADD X0, X31, 0x30
	0x03771DD0 MOV X2, X31
	0x03771DD4 LDR X8, [X8 + 0xB8]
	0x03771DD8 STR V0, [X8 + 0x17]
	0x03771DDC ADRP X8, 0x9D5000
	0x03771DE0 LDR X8, [X8 + 0xB28]
	0x03771DE4 STP X31, X31, [X31 + 0x30]
	0x03771DE8 LDR X1, [X8]
	0x03771DEC BL 0x3757420
	0x03771DF0 LDR X8, [X19]
	0x03771DF4 LDR V0, [X31 + 0x3]
	0x03771DF8 ADD X0, X31, 0x20
	0x03771DFC MOV X2, X31
	0x03771E00 LDR X8, [X8 + 0xB8]
	0x03771E04 STR V0, [X8 + 0x18]
	0x03771E08 ADRP X8, 0x9D5000
	0x03771E0C LDR X8, [X8 + 0xAD8]
	0x03771E10 STP X31, X31, [X31 + 0x20]
	0x03771E14 LDR X1, [X8]
	0x03771E18 BL 0x3757420
	0x03771E1C LDR X8, [X19]
	0x03771E20 LDR V0, [X31 + 0x2]
	0x03771E24 ADD X0, X31, 0x10
	0x03771E28 MOV X2, X31
	0x03771E2C LDR X8, [X8 + 0xB8]
	0x03771E30 STR V0, [X8 + 0x19]
	0x03771E34 ADRP X8, 0x9D5000
	0x03771E38 LDR X8, [X8 + 0xB10]
	0x03771E3C STP X31, X31, [X31 + 0x10]
	0x03771E40 LDR X1, [X8]
	0x03771E44 BL 0x3757420
	0x03771E48 LDR X8, [X19]
	0x03771E4C LDR V0, [X31 + 0x1]
	0x03771E50 LDR X8, [X8 + 0xB8]
	0x03771E54 STR V0, [X8 + 0x1A]
	0x03771E58 ADD X31, X31, 0x1C0
	0x03771E5C LDP X20, X19, [X31 + 0x50]
	0x03771E60 LDP X22, X21, [X31 + 0x40]
	0x03771E64 LDP X24, X23, [X31 + 0x30]
	0x03771E68 LDP X26, X25, [X31 + 0x20]
	0x03771E6C LDP X28, X27, [X31 + 0x10]
	0x03771E70 LDP X29, X30, [X31], #0x60
	0x03771E74 RET
	0x03771E78 LDP X8, X1, [X0 + 0x20]
	0x03771E7C MOV X2, X31
	0x03771E80 MOV X0, X8
	0x03771E84 B 0x37577E0
	0x03771E88 STP X30, X19, [X31 - 0x10]!
	0x03771E8C LDRB W8, [X0 + 0xA0]
	0x03771E90 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC70000
	007 Move X21, 0x983000
	008 Move W8, [X22+3844]
	009 Move X21, [X21+1728]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x9AB000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move X0, 0x983000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move X0, 0x9D6000
	023 Move X0, [X0+2576]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+3844], W8
	027 Move X0, [X21]
	028 Move [X31+8], X31
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move X1, X31
	035 Move X2, X31
	036 Call Type.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {104}
	041 Move X0, X20
	042 Move X1, X31
	043 Call String.IsNullOrEmpty, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {78}
	048 Compare X19, 0
	049 JumpIfEqual {103}
	050 Move X8, [X19]
	051 Move X0, X19
	052 Move X9, [X8+424]
	053 Move X1, [X8+432]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Compare X0, 0
	056 JumpIfEqual {103}
	057 Move X21, 0x9D6000
	058 Move X21, [X21+2576]
	059 Move X2, X31
	060 Move X20, X0
	061 Move X1, [X21]
	062 Call String.EndsWith, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {78}
	067 Move X8, [X21]
	068 Compare X8, 0
	069 JumpIfEqual {103}
	070 Move W9, [X20+16]
	071 Move W8, [X8+16]
	072 Move X0, X20
	073 Move W1, W31
	074 Move X3, X31
	075 Subtract W2, W9, W8
	076 Call String.Substring, X0, X1, X2
	077 Move X20, X0
	078 Move X21, 0x9AB000
	079 Move X21, [X21+624]
	080 Move X0, [X21]
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {86}
	084 Call 0x1C17DFC
	085 Move X0, [X21]
	086 Move X8, [X0+184]
	087 Move X8, [X8]
	088 Compare X8, 0
	089 JumpIfEqual {103}
	090 Move X8, [X8+104]
	091 Add X0, X31, 8
	092 Move X1, X20
	093 Move X2, X19
	094 Move X3, X31
	095 Move [X31+8], X8
	096 Call TypeTable.AddTypeRegistration, X0, X1, X2
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Return 
	103 Call 0x1C17F20
	104 Move X0, 0x988000
	105 Move X0, [X0+1320]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0x98B000
	110 Move X0, [X0+1512]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call ArgumentNullException..ctor, X0, X1
	116 Move X0, 0x9D6000
	117 Move X0, [X0+2584]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC

Method: System.Void RegisterBindingComposite(System.String name = null)

Disassembly:
	0x0220D4A8 B 0x2171BF0
	0x0220D4AC STP X29, X30, [X31 - 0x30]!
	0x0220D4B0 STP X22, X21, [X31 + 0x10]
	0x0220D4B4 STP X20, X19, [X31 + 0x20]
	0x0220D4B8 ADD X29, X31, 0x0
	0x0220D4BC SUB X31, X31, 0x20
	0x0220D4C0 MRS X21, 0xC000
	0x0220D4C4 LDR X8, [X21 + 0x28]
	0x0220D4C8 MOV X19, X0
	0x0220D4CC STUR X8, [X29 - 0x8]
	0x0220D4D0 LDR X22, [X1 + 0x38]
	0x0220D4D4 CBNZ X22, 0x220D4E8
	0x0220D4D8 MOV X0, X1
	0x0220D4DC MOV X20, X1
	0x0220D4E0 BL 0x1C5C6E0
	0x0220D4E4 LDR X22, [X20 + 0x38]
	0x0220D4E8 LDR X8, [X22]
	0x0220D4EC LDR W2, [X8 + 0xFC]
	0x0220D4F0 ADD X8, X31, 0x0
	0x0220D4F4 ADD X9, X2, 0xF
	0x0220D4F8 AND X9, X9, 0x1FFFFFFFF
	0x0220D4FC SUB X20, X8, X9
	0x0220D500 ADD X31, X20, 0x0
	0x0220D504 MOV X0, X20
	0x0220D508 MOV X1, X19
	0x0220D50C BL 0x3EB1AC0
	0x0220D510 LDR X1, [X22 + 0x8]
	0x0220D514 SUB X3, X29, 0x18
	0x0220D518 SUB X4, X29, 0xC
	0x0220D51C MOV X2, X31
	0x0220D520 LDR X0, [X1]
	0x0220D524 STUR X20, [X29 - 0x18]
	0x0220D528 LDR X8, [X1 + 0x10]
	0x0220D52C BLR X8
	0x0220D530 LDUR W0, [X29 - 0xC]
	0x0220D534 LDR X8, [X21 + 0x28]
	0x0220D538 LDUR X9, [X29 - 0x8]
	0x0220D53C CMP X8, X9
	0x0220D540 B.NE 0x220D558
	0x0220D544 ADD X31, X29, 0x0
	0x0220D548 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {21}
	008 Move X0, 0x1F0F000
	009 Move X0, [X0+624]
	010 Move X20, X1
	011 Call 0x1C17CF4
	012 Move X0, 0x1EE7000
	013 Move X0, [X0+1728]
	014 Call 0x1C17CF4
	015 Move X8, [X20+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {21}
	018 Move X0, X20
	019 Call 0x1C5D6E0
	020 Move X8, [X20+56]
	021 Move X9, 0x1EE7000
	022 Move X9, [X9+1728]
	023 Move X20, [X8]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Call Type.GetTypeFromHandle, X0
	032 Move X8, 0x1F0F000
	033 Move X8, [X8+624]
	034 Move X20, X0
	035 Move X8, [X8]
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, X31
	046 Move X30, [X31+32]
	047 Call InputSystem.RegisterBindingComposite, X0, X1
	048 Return 

Method: System.Type TryGetBindingComposite(System.String name)

Disassembly:
	0x03771E94 TBNZ X8, 0x0, 0x3771EB8
	0x03771E98 LDR X8, [X19]
	0x03771E9C MOV X0, X19
	0x03771EA0 LDR X9, [X8 + 0x218]
	0x03771EA4 LDR X1, [X8 + 0x220]
	0x03771EA8 BLR X9
	0x03771EAC LDR W8, [X19 + 0xA0]
	0x03771EB0 ORR W8, W8, 0x1
	0x03771EB4 STR W8, [X19 + 0xA0]
	0x03771EB8 LDR X0, [X19 + 0x38]
	0x03771EBC CBNZ X0, 0x3771EC8
	0x03771EC0 LDR X0, [X19 + 0x40]
	0x03771EC4 CBZ X0, 0x3771ED0
	0x03771EC8 LDP X30, X19, [X31], #0x10
	0x03771ECC RET
	0x03771ED0 LDP X0, X1, [X19 + 0x20]
	0x03771ED4 MOV X2, X31
	0x03771ED8 LDP X30, X19, [X31], #0x10
	0x03771EDC B 0x37577E0
	0x03771EE0 STP X30, X19, [X31 - 0x10]!
	0x03771EE4 LDRB W8, [X0 + 0xA0]
	0x03771EE8 TBNZ X8, 0x0, 0x3771F0C
	0x03771EEC LDR X8, [X0]
	0x03771EF0 MOV X19, X0
	0x03771EF4 LDR X9, [X8 + 0x218]
	0x03771EF8 LDR X1, [X8 + 0x220]
	0x03771EFC BLR X9
	0x03771F00 LDR W8, [X19 + 0xA0]
	0x03771F04 ORR W8, W8, 0x1
	0x03771F08 STR W8, [X19 + 0xA0]
	0x03771F0C LDP X30, X19, [X31], #0x10
	0x03771F10 RET
	0x03771F14 STR X1, [X0 + 0x38]
	0x03771F18 RET
	0x03771F1C STP X30, X19, [X31 - 0x10]!
	0x03771F20 LDRB W8, [X0 + 0xA0]
	0x03771F24 MOV X19, X0
	0x03771F28 TBNZ X8, 0x0, 0x3771F4C
	0x03771F2C LDR X8, [X19]
	0x03771F30 MOV X0, X19
	0x03771F34 LDR X9, [X8 + 0x218]
	0x03771F38 LDR X1, [X8 + 0x220]
	0x03771F3C BLR X9
	0x03771F40 LDR W8, [X19 + 0xA0]
	0x03771F44 ORR W8, W8, 0x1
	0x03771F48 STR W8, [X19 + 0xA0]
	0x03771F4C LDR X0, [X19 + 0x48]
	0x03771F50 CBNZ X0, 0x3771F58
	0x03771F54 LDR X0, [X19 + 0x50]
	0x03771F58 LDP X30, X19, [X31], #0x10
	0x03771F5C RET
	0x03771F60 STR X1, [X0 + 0x48]
	0x03771F64 RET
	0x03771F68 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC70000
	005 Move W8, [X20+3845]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9AB000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3845], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Move [X31+8], X31
	019 Call String.IsNullOrEmpty, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {46}
	024 Move X20, 0x9AB000
	025 Move X20, [X20+624]
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move X8, [X8]
	034 Compare X8, 0
	035 JumpIfEqual {64}
	036 Move X8, [X8+104]
	037 Add X0, X31, 8
	038 Move X1, X19
	039 Move X2, X31
	040 Move [X31+8], X8
	041 Call TypeTable.LookupTypeRegistration, X0, X1
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0
	046 Move X0, 0x988000
	047 Move X0, [X0+1320]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X19, X0
	051 Move X0, 0x98B000
	052 Move X0, [X0+1416]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Move X2, X31
	057 Call ArgumentNullException..ctor, X0, X1
	058 Move X0, 0x9D6000
	059 Move X0, [X0+2592]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Call 0x1C17DEC
	064 Call 0x1C17F20

Method: System.Void DisableAllEnabledActions()

Disassembly:
	0x03771F6C STP X20, X19, [X31 + 0x10]
	0x03771F70 MOV X19, X0

ISIL:
	001 Move X0, X31
	002 Call InputActionState.DisableAllActions
	003 Return 

Method: System.Collections.Generic.List`1<UnityEngine.InputSystem.InputAction> ListEnabledActions()

Disassembly:
	0x03771F74 LDR X0, [X0 + 0x30]
	0x03771F78 CBNZ X0, 0x3771F9C
	0x03771F7C LDP X0, X1, [X19 + 0x20]
	0x03771F80 LDR X20, [X19 + 0x80]
	0x03771F84 MOV X2, X31
	0x03771F88 BL 0x37577E0
	0x03771F8C MOV X1, X0
	0x03771F90 MOV X0, X20
	0x03771F94 BL 0x3771FA8
	0x03771F98 STR X0, [X19 + 0x30]
	0x03771F9C LDP X20, X19, [X31 + 0x10]
	0x03771FA0 LDR X30, [X31], #0x20
	0x03771FA4 RET
	0x03771FA8 STP X30, X21, [X31 - 0x20]!
	0x03771FAC STP X20, X19, [X31 + 0x10]
	0x03771FB0 ADRP X21, 0xC6F000
	0x03771FB4 LDRB W8, [X21 + 0xF38]
	0x03771FB8 MOV X19, X1
	0x03771FBC MOV X20, X0
	0x03771FC0 TBNZ X8, 0x0, 0x3771FE4
	0x03771FC4 ADRP X0, 0x984000
	0x03771FC8 LDR X0, [X0 + 0x278]
	0x03771FCC BL 0x1C16CF4
	0x03771FD0 ADRP X0, 0x983000
	0x03771FD4 LDR X0, [X0 + 0xEC8]
	0x03771FD8 BL 0x1C16CF4
	0x03771FDC MOVZ W8, 0x1
	0x03771FE0 STRB W8, [X21 + 0xF38]
	0x03771FE4 MOV X0, X19
	0x03771FE8 MOV X1, X31
	0x03771FEC BL 0x32277A8
	0x03771FF0 MOV W21, W0
	0x03771FF4 CBZ X20, 0x3772024
	0x03771FF8 MOV X0, X20
	0x03771FFC BL 0x3771F68
	0x03772000 TBNZ X21, 0x0, 0x3772064
	0x03772004 ADRP X8, 0x982000
	0x03772008 LDR X8, [X8 + 0xEC8]
	0x0377200C MOV X2, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC70000
	007 Move X22, 0x9D5000
	008 Move X19, 0x9D5000
	009 Move X20, 0x9AB000
	010 Move W8, [X21+3846]
	011 Move X22, [X22+536]
	012 Move X19, [X19+480]
	013 Move X20, [X20+624]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x9AB000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move X0, 0x9D5000
	022 Move X0, [X0+480]
	023 Call 0x1C17CF4
	024 Move X0, 0x9D5000
	025 Move X0, [X0+536]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3846], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call List`1<Object>..ctor, X0
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X19
	040 Call InputSystem.ListEnabledActions, X0
	041 Move X0, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return X0

Method: System.Int32 ListEnabledActions(System.Collections.Generic.List`1<UnityEngine.InputSystem.InputAction> actions)

Disassembly:
	0x03772010 LDP X20, X19, [X31 + 0x10]
	0x03772014 MOV X3, X31
	0x03772018 LDR X1, [X8]
	0x0377201C LDP X30, X21, [X31], #0x20
	0x03772020 B 0x32274B8
	0x03772024 TBZ X21, 0x0, 0x3772040
	0x03772028 ADRP X8, 0x983000
	0x0377202C LDR X8, [X8 + 0x278]
	0x03772030 LDR X8, [X8]
	0x03772034 LDR X8, [X8 + 0xB8]
	0x03772038 LDR X0, [X8]
	0x0377203C B 0x3772064
	0x03772040 CBZ X19, 0x3772090
	0x03772044 MOV X0, X19
	0x03772048 MOV W1, W31
	0x0377204C MOV X2, X31
	0x03772050 BL 0x3222A1C
	0x03772054 AND W8, W0, 0xFFFF
	0x03772058 CMP W8, 0x2F
	0x0377205C B.NE 0x3772070
	0x03772060 MOV X0, X19
	0x03772064 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {6}
	003 Move X1, X31
	004 Call InputActionState.FindAllEnabledActions, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Move [X31-8], X19
	008 Move X0, 0x987000
	009 Move X0, [X0+1320]
	010 Call 0x1C17D08
	011 Call 0x1C17F10
	012 Move X19, X0
	013 Move X0, 0x9D4000
	014 Move X0, [X0+1176]
	015 Call 0x1C17D08
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Call ArgumentNullException..ctor, X0, X1
	020 Move X0, 0x9D5000
	021 Move X0, [X0+2600]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputRemoting get_remoting()

Disassembly:
	0x03772068 LDP X30, X21, [X31], #0x20
	0x0377206C RET
	0x03772070 ADRP X8, 0x982000
	0x03772074 LDR X8, [X8 + 0xEC8]
	0x03772078 MOV X1, X19
	0x0377207C LDP X20, X19, [X31 + 0x10]
	0x03772080 MOV X2, X31
	0x03772084 LDR X0, [X8]
	0x03772088 LDP X30, X21, [X31], #0x20
	0x0377208C B 0x321B938
	0x03772090 BL 0x1C16F20
	0x03772094 LDP X8, X1, [X0 + 0x58]
	0x03772098 MOV X2, X31
	0x0377209C MOV X0, X8
	0x037720A0 B 0x37577E0
	0x037720A4 LDP X8, X1, [X0 + 0x68]
	0x037720A8 MOV X2, X31
	0x037720AC MOV X0, X8
	0x037720B0 B 0x37577E0
	0x037720B4 LDR X0, [X0 + 0x78]
	0x037720B8 RET
	0x037720BC LDR X0, [X0 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC6F000
	005 Move X19, 0x9AA000
	006 Move W8, [X20+3847]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AA000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3847], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Version get_version()

Disassembly:
	0x037720C0 RET
	0x037720C4 SUB X31, X31, 0x30
	0x037720C8 STR X30, [X31 + 0x10]
	0x037720CC STP X20, X19, [X31 + 0x20]
	0x037720D0 ADRP X20, 0xC6E000
	0x037720D4 LDRB W8, [X20 + 0xF11]
	0x037720D8 MOV X19, X0
	0x037720DC TBNZ X8, 0x0, 0x37720F4
	0x037720E0 ADRP X0, 0x9D2000
	0x037720E4 LDR X0, [X0 + 0xF78]
	0x037720E8 BL 0x1C16CF4
	0x037720EC MOVZ W8, 0x1
	0x037720F0 STRB W8, [X20 + 0xF11]
	0x037720F4 LDR X8, [X19 + 0x78]
	0x037720F8 CBZ X8, 0x3772130
	0x037720FC ADRP X9, 0x9D2000
	0x03772100 LDR X9, [X9 + 0xF78]
	0x03772104 LDR X1, [X8 + 0x150]
	0x03772108 LDP W3, W2, [X19 + 0x98]
	0x0377210C ADD X0, X31, 0x0
	0x03772110 LDR X4, [X9]
	0x03772114 STP X31, X31, [X31]
	0x03772118 BL 0x24FD82C
	0x0377211C LDP X0, X1, [X31]
	0x03772120 LDP X20, X19, [X31 + 0x20]
	0x03772124 LDR X30, [X31 + 0x10]
	0x03772128 ADD X31, X31, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC6F000
	006 Move X21, 0x98A000
	007 Move X19, 0x9D5000
	008 Move W8, [X20+3848]
	009 Move X21, [X21+1984]
	010 Move X19, [X19+2608]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x98A000
	016 Move X0, [X0+1984]
	017 Call 0x1C17CF4
	018 Move X0, 0x9D5000
	019 Move X0, [X0+2608]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3848], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, [X19]
	026 Move X2, X31
	027 Move X19, X0
	028 Call Version..ctor, X0, X1
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Boolean get_runInBackground()

Disassembly:
	0x0377212C RET
	0x03772130 BL 0x1C16F20
	0x03772134 SUB X31, X31, 0x30
	0x03772138 STR X30, [X31 + 0x10]
	0x0377213C STP X20, X19, [X31 + 0x20]
	0x03772140 ADRP X20, 0xC6E000
	0x03772144 LDRB W8, [X20 + 0xF12]
	0x03772148 MOV X19, X0
	0x0377214C TBNZ X8, 0x0, 0x3772164
	0x03772150 ADRP X0, 0x9D4000
	0x03772154 LDR X0, [X0 + 0xB30]
	0x03772158 BL 0x1C16CF4
	0x0377215C MOVZ W8, 0x1
	0x03772160 STRB W8, [X20 + 0xF12]
	0x03772164 LDR X8, [X19 + 0x78]
	0x03772168 CBZ X8, 0x37721A0
	0x0377216C ADRP X9, 0x9D4000
	0x03772170 LDR X9, [X9 + 0xB30]
	0x03772174 LDR X1, [X8 + 0x140]
	0x03772178 LDP W3, W2, [X19 + 0x88]
	0x0377217C ADD X0, X31, 0x0
	0x03772180 LDR X4, [X9]
	0x03772184 STP X31, X31, [X31]
	0x03772188 BL 0x24FCC08
	0x0377218C LDP X0, X1, [X31]
	0x03772190 LDP X20, X19, [X31 + 0x20]
	0x03772194 LDR X30, [X31 + 0x10]
	0x03772198 ADD X31, X31, 0x30
	0x0377219C RET
	0x037721A0 BL 0x1C16F20
	0x037721A4 SUB X31, X31, 0x30
	0x037721A8 STR X30, [X31 + 0x10]
	0x037721AC STP X20, X19, [X31 + 0x20]
	0x037721B0 ADRP X20, 0xC6E000
	0x037721B4 LDRB W8, [X20 + 0xF13]
	0x037721B8 MOV X19, X0
	0x037721BC TBNZ X8, 0x0, 0x37721D4
	0x037721C0 ADRP X0, 0x9D4000
	0x037721C4 LDR X0, [X0 + 0xB30]
	0x037721C8 BL 0x1C16CF4
	0x037721CC MOVZ W8, 0x1
	0x037721D0 STRB W8, [X20 + 0xF13]
	0x037721D4 LDR X8, [X19 + 0x78]
	0x037721D8 CBZ X8, 0x3772210
	0x037721DC ADRP X9, 0x9D4000
	0x037721E0 LDR X9, [X9 + 0xB30]
	0x037721E4 LDR X1, [X8 + 0x138]
	0x037721E8 LDP W3, W2, [X19 + 0x90]
	0x037721EC ADD X0, X31, 0x0
	0x037721F0 LDR X4, [X9]
	0x037721F4 STP X31, X31, [X31]
	0x037721F8 BL 0x24FCC08
	0x037721FC LDP X0, X1, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC6F000
	005 Move X19, 0x9AA000
	006 Move W8, [X20+3849]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x9AA000
	013 Move X0, [X0+3792]
	014 Call 0x1C17CF4
	015 Move X0, 0x9AA000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3849], W8
	020 Move X0, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X19]
	026 Move X8, [X0+184]
	027 Move X8, [X8]
	028 Compare X8, 0
	029 JumpIfEqual {60}
	030 Move X19, [X8+1088]
	031 Compare X19, 0
	032 JumpIfEqual {60}
	033 Move X10, 0x9AA000
	034 Move X8, [X19]
	035 Move X10, [X10+3792]
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move X1, [X10]
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 23
	047 Move X0, X19
	048 Call 0x1C5D788
	049 Move W9, [X10]
	050 Add W9, W9, 23
	051 Add X8, X8, W9
	052 Add X0, X8, 312
	053 Move X2, [X0]
	054 Move X1, [X0+8]
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 CallNoReturn X2
	060 Call 0x1C17F20

Method: System.Void set_runInBackground(System.Boolean value)

Disassembly:
	0x03772200 LDP X20, X19, [X31 + 0x20]
	0x03772204 LDR X30, [X31 + 0x10]
	0x03772208 ADD X31, X31, 0x30
	0x0377220C RET
	0x03772210 BL 0x1C16F20
	0x03772214 LDP X8, X1, [X0 + 0x10]
	0x03772218 MOV X0, X8
	0x0377221C RET
	0x03772220 LDRB W8, [X0 + 0xA0]
	0x03772224 UBFM W0, W8, 0x1, 0x1
	0x03772228 RET
	0x0377222C SUB X31, X31, 0x30
	0x03772230 STP X30, X21, [X31 + 0x10]
	0x03772234 STP X20, X19, [X31 + 0x20]
	0x03772238 ADRP X21, 0xC6E000
	0x0377223C LDRB W8, [X21 + 0xF14]
	0x03772240 MOV W20, W1
	0x03772244 MOV X19, X0
	0x03772248 TBNZ X8, 0x0, 0x377226C
	0x0377224C ADRP X0, 0x9A9000
	0x03772250 LDR X0, [X0 + 0xD40]
	0x03772254 BL 0x1C16CF4
	0x03772258 ADRP X0, 0x9A9000
	0x0377225C LDR X0, [X0 + 0xD48]
	0x03772260 BL 0x1C16CF4
	0x03772264 MOVZ W8, 0x1
	0x03772268 STRB W8, [X21 + 0xF14]
	0x0377226C LDR W8, [X19 + 0xA0]
	0x03772270 TBZ X20, 0x0, 0x37722E4
	0x03772274 ORR W8, W8, 0x2
	0x03772278 MOV X0, X19
	0x0377227C STR W8, [X19 + 0xA0]
	0x03772280 BL 0x37720C4
	0x03772284 UBFM X8, X1, 0x20, 0x3F
	0x03772288 CMP W8, 0x1
	0x0377228C STP X0, X1, [X31]
	0x03772290 B.LT 0x37722EC
	0x03772294 ADRP X20, 0x9A9000
	0x03772298 LDR X20, [X20 + 0xD48]
	0x0377229C MOV W19, W31
	0x037722A0 LDR X2, [X20]
	0x037722A4 ADD X0, X31, 0x0
	0x037722A8 MOV W1, W19
	0x037722AC BL 0x24FDB3C
	0x037722B0 CBZ X0, 0x37722D0
	0x037722B4 LDR X2, [X20]
	0x037722B8 ADD X0, X31, 0x0
	0x037722BC MOV W1, W19
	0x037722C0 BL 0x24FDB3C
	0x037722C4 CBZ X0, 0x37722FC
	0x037722C8 MOVZ W1, 0x1
	0x037722CC BL 0x377222C
	0x037722D0 LDR W8, [X31 + 0xC]
	0x037722D4 ADD W19, W19, 0x1
	0x037722D8 CMP W19, W8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC6F000
	006 Move X20, 0x9AA000
	007 Move W8, [X21+3850]
	008 Move X20, [X20+624]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x9AA000
	015 Move X0, [X0+3792]
	016 Call 0x1C17CF4
	017 Move X0, 0x9AA000
	018 Move X0, [X0+624]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3850], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X8, [X8]
	030 Compare X8, 0
	031 JumpIfEqual {64}
	032 Move X20, [X8+1088]
	033 Compare X20, 0
	034 JumpIfEqual {64}
	035 Move X10, 0x9AA000
	036 Move X8, [X20]
	037 Move X10, [X10+3792]
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 Move X1, [X10]
	040 Compare X9, 0
	041 JumpIfEqual {48}
	042 Move X10, [X8+176]
	043 Add X10, X10, 8
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Subtract X9, X9, 1
	047 Add X10, X10, 16
	048 Move W2, 24
	049 Move X0, X20
	050 Call 0x1C5D788
	051 Move W9, [X10]
	052 Add W9, W9, 24
	053 Add X8, X8, W9
	054 Add X0, X8, 312
	055 Move X3, [X0]
	056 Move X2, [X0+8]
	057 And W1, W19, 1
	058 Move X0, X20
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 CallNoReturn X3
	064 Call 0x1C17F20

Method: UnityEngine.InputSystem.LowLevel.InputMetrics get_metrics()

Disassembly:
	0x037722DC B.LT 0x37722A0
	0x037722E0 B 0x37722EC
	0x037722E4 AND W8, W8, 0xFFFFFFFD
	0x037722E8 STR W8, [X19 + 0xA0]
	0x037722EC LDP X20, X19, [X31 + 0x20]
	0x037722F0 LDP X30, X21, [X31 + 0x10]
	0x037722F4 ADD X31, X31, 0x30
	0x037722F8 RET
	0x037722FC BL 0x1C16F20
	0x03772300 LDRB W8, [X0 + 0xA0]
	0x03772304 UBFM W0, W8, 0x2, 0x2
	0x03772308 RET
	0x0377230C LDR W8, [X0 + 0xA0]
	0x03772310 ANDS W31, W1, 0x1
	0x03772314 MOVZ W9, 0x4
	0x03772318 CSEL W9, W9, W31, NE
	0x0377231C AND W8, W8, 0xFFFFFFFB
	0x03772320 ORR W8, W8, W9, 0x0
	0x03772324 STR W8, [X0 + 0xA0]
	0x03772328 RET
	0x0377232C STR X30, [X31 - 0x20]!
	0x03772330 STP X20, X19, [X31 + 0x10]
	0x03772334 MOV W2, W31
	0x03772338 MOV X20, X1
	0x0377233C MOV X19, X0
	0x03772340 BL 0x37723AC
	0x03772344 CBZ X0, 0x3772354
	0x03772348 LDP X20, X19, [X31 + 0x10]
	0x0377234C LDR X30, [X31], #0x20
	0x03772350 RET
	0x03772354 ADRP X0, 0x9D4000
	0x03772358 LDR X0, [X0 + 0xB38]
	0x0377235C BL 0x1C16D08
	0x03772360 MOV X1, X20
	0x03772364 MOV X2, X19
	0x03772368 MOV X3, X31
	0x0377236C BL 0x3227BD4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0xC6F000
	007 Move X20, 0x9AA000
	008 Move X19, X8
	009 Move W8, [X21+3851]
	010 Move X20, [X20+624]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9AA000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3851], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move X0, [X8]
	028 Compare X0, 0
	029 JumpIfEqual {47}
	030 Add X8, X31, 8
	031 Move X1, X31
	032 Call InputManager.get_metrics, X0
	033 Move X8, [X31+56]
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 Move [X19+48], X8
	038 Move X30, [X31+64]
	039 Move X21, [X31+72]
	040 Move [X19+16], V1
	041 Move [X19+24], V0
	042 Move [X19], V2
	043 Move X20, [X31+80]
	044 Move X19, [X31+88]
	045 Add X31, X31, 96
	046 Return X0
	047 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03772370 MOV X19, X0
	0x03772374 ADRP X0, 0x984000
	0x03772378 LDR X0, [X0 + 0x78]

ISIL:
	001 Move X0, X31
	002 Move X1, X31

Method: System.Void RunInitializeInPlayer()

Disassembly:
	0x03772510 MOV X3, X0
	0x03772514 LDR X0, [X8]
	0x03772518 MOV X1, X20
	0x0377251C MOV X2, X21
	0x03772520 MOV X4, X31
	0x03772524 BL 0x3227C18
	0x03772528 LDP X20, X19, [X31 + 0x10]
	0x0377252C LDP X30, X21, [X31], #0x20
	0x03772530 RET
	0x03772534 BL 0x1C16F20
	0x03772538 B 0x3772544
	0x0377253C B 0x3772544
	0x03772540 B 0x3772544
	0x03772544 MOV X20, X0
	0x03772548 CMP W1, 0x1
	0x0377254C B.NE 0x37725BC
	0x03772550 MOV X0, X20
	0x03772554 BL 0x3EB1AD0
	0x03772558 MOV X20, X0
	0x0377255C ADRP X0, 0x981000
	0x03772560 LDR X0, [X0 + 0x7D0]
	0x03772564 BL 0x1C16D08
	0x03772568 LDR X8, [X20]
	0x0377256C LDR X1, [X8]
	0x03772570 BL 0x1C17270
	0x03772574 TBZ X0, 0x0, 0x3772594
	0x03772578 BL 0x3EB1AE0
	0x0377257C LDR X8, [X19]
	0x03772580 MOV X0, X19
	0x03772584 LDP X20, X19, [X31 + 0x10]
	0x03772588 LDP X2, X1, [X8 + 0x168]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC6F000
	005 Move X19, 0x9AA000
	006 Move W8, [X20+3852]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AA000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3852], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8]
	025 Compare X8, 0
	026 JumpIfEqual {31}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return 
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X0, X31
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Call InputSystem.InitializeInPlayer, X0, X1
	041 Return 

Method: System.Void EnsureInitialized()

Disassembly:
	0x0377258C LDP X30, X21, [X31], #0x20

ISIL:
	001 Return 

Method: System.Void InitializeInPlayer(UnityEngine.InputSystem.LowLevel.IInputRuntime runtime = null, UnityEngine.InputSystem.InputSettings settings = null)

Disassembly:
	0x0377237C BL 0x1C16D08
	0x03772380 BL 0x1C16F10
	0x03772384 MOV X1, X19
	0x03772388 MOV X2, X31
	0x0377238C MOV X20, X0
	0x03772390 BL 0x335DC08
	0x03772394 ADRP X0, 0x9D4000
	0x03772398 LDR X0, [X0 + 0xB40]
	0x0377239C BL 0x1C16D08
	0x037723A0 MOV X1, X0
	0x037723A4 MOV X0, X20
	0x037723A8 BL 0x1C16DEC
	0x037723AC STP X30, X23, [X31 - 0x30]!
	0x037723B0 STP X22, X21, [X31 + 0x10]
	0x037723B4 STP X20, X19, [X31 + 0x20]
	0x037723B8 ADRP X22, 0xC6E000
	0x037723BC ADRP X23, 0x9D4000
	0x037723C0 LDRB W8, [X22 + 0xF44]
	0x037723C4 LDR X23, [X23 + 0xB48]
	0x037723C8 MOV W19, W2
	0x037723CC MOV X20, X1
	0x037723D0 MOV X21, X0
	0x037723D4 TBNZ X8, 0x0, 0x37723EC
	0x037723D8 ADRP X0, 0x9D4000
	0x037723DC LDR X0, [X0 + 0xB48]
	0x037723E0 BL 0x1C16CF4
	0x037723E4 MOVZ W8, 0x1
	0x037723E8 STRB W8, [X22 + 0xF44]
	0x037723EC LDR X3, [X23]
	0x037723F0 MOV X0, X21
	0x037723F4 MOV X1, X20
	0x037723F8 MOV W2, W19
	0x037723FC LDP X20, X19, [X31 + 0x20]
	0x03772400 LDP X22, X21, [X31 + 0x10]
	0x03772404 LDP X30, X23, [X31], #0x30
	0x03772408 B 0x21FFA54
	0x0377240C B 0x3772410
	0x03772410 STP X30, X19, [X31 - 0x10]!
	0x03772414 MOV X19, X0
	0x03772418 BL 0x37729EC
	0x0377241C MOV X1, X31
	0x03772420 BL 0x380C47C
	0x03772424 LDR X8, [X19]
	0x03772428 MOV X1, X0
	0x0377242C MOV X0, X19
	0x03772430 LDP X3, X2, [X8 + 0x198]
	0x03772434 LDP X30, X19, [X31], #0x10
	0x03772438 BR X3
	0x0377243C STP X30, X21, [X31 - 0x20]!
	0x03772440 STP X20, X19, [X31 + 0x10]
	0x03772444 ADRP X20, 0xC6E000
	0x03772448 ADRP X21, 0x98A000
	0x0377244C LDRB W8, [X20 + 0xF15]
	0x03772450 LDR X21, [X21 + 0x988]
	0x03772454 MOV X19, X0
	0x03772458 TBNZ X8, 0x0, 0x3772470
	0x0377245C ADRP X0, 0x98A000
	0x03772460 LDR X0, [X0 + 0x988]
	0x03772464 BL 0x1C16CF4
	0x03772468 MOVZ W8, 0x1
	0x0377246C STRB W8, [X20 + 0xF15]
	0x03772470 LDP X0, X1, [X19 + 0x58]
	0x03772474 MOV X2, X31
	0x03772478 BL 0x37577E0
	0x0377247C MOV X20, X0
	0x03772480 MOV X0, X19
	0x03772484 BL 0x3771F68
	0x03772488 LDR X1, [X21]
	0x0377248C MOV X2, X0
	0x03772490 MOV X0, X20
	0x03772494 LDP X20, X19, [X31 + 0x10]
	0x03772498 MOV X3, X31
	0x0377249C LDP X30, X21, [X31], #0x20
	0x037724A0 B 0x32274B8
	0x037724A4 STP X30, X21, [X31 - 0x20]!
	0x037724A8 STP X20, X19, [X31 + 0x10]
	0x037724AC ADRP X20, 0xC6E000
	0x037724B0 LDRB W8, [X20 + 0xF16]
	0x037724B4 MOV X19, X0
	0x037724B8 TBNZ X8, 0x0, 0x37724D0
	0x037724BC ADRP X0, 0x9D4000
	0x037724C0 LDR X0, [X0 + 0xB50]
	0x037724C4 BL 0x1C16CF4
	0x037724C8 MOVZ W8, 0x1
	0x037724CC STRB W8, [X20 + 0xF16]
	0x037724D0 LDR X8, [X19 + 0x78]
	0x037724D4 CBZ X8, 0x3772534
	0x037724D8 LDR W8, [X8 + 0xE8]
	0x037724DC ADDS W31, W8, 0x1
	0x037724E0 B.EQ 0x377257C
	0x037724E4 LDP X0, X1, [X19 + 0x58]
	0x037724E8 MOV X2, X31
	0x037724EC BL 0x37577E0
	0x037724F0 MOV X20, X0
	0x037724F4 MOV X0, X19
	0x037724F8 BL 0x3771F68
	0x037724FC MOV X21, X0
	0x03772500 MOV X0, X19
	0x03772504 BL 0x37725C8
	0x03772508 ADRP X8, 0x9D4000
	0x0377250C LDR X8, [X8 + 0xB50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC6F000
	007 Move X22, 0x982000
	008 Move W8, [X21+3853]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x9D5000
	017 Move X0, [X0+2616]
	018 Call 0x1C17CF4
	019 Move X0, 0x9D5000
	020 Move X0, [X0+2624]
	021 Call 0x1C17CF4
	022 Move X0, 0x9AA000
	023 Move X0, [X0+624]
	024 Call 0x1C17CF4
	025 Move X0, 0x9D5000
	026 Move X0, [X0+2632]
	027 Call 0x1C17CF4
	028 Move X0, 0x982000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0x9D5000
	032 Move X0, [X0+2640]
	033 Call 0x1C17CF4
	034 Move X0, 0x9D5000
	035 Move X0, [X0+2648]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+3853], W8
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X21, 0x9D5000
	045 Move X22, 0x9AA000
	046 Move X21, [X21+2624]
	047 Move X22, [X22+624]
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Equality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {72}
	056 Move X8, 0x9D5000
	057 Move X8, [X8+2640]
	058 Move X0, [X8]
	059 Call 0x2242E84
	060 Move X8, 0x9D5000
	061 Move X8, [X8+2616]
	062 Move X1, [X8]
	063 Call Enumerable.FirstOrDefault, X0
	064 Move X20, X0
	065 Compare X0, 0
	066 JumpIfNotEqual {72}
	067 Move X8, 0x9D5000
	068 Move X8, [X8+2648]
	069 Move X0, [X8]
	070 Call 0x22547A0
	071 Move X20, X0
	072 Move X0, [X21]
	073 Call 0x1C17F10
	074 Move X1, X31
	075 Move X21, X0
	076 Call InputManager..ctor, X0
	077 Move X0, [X22]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X22]
	083 Move X8, [X0+184]
	084 Move [X8], X21
	085 Move X8, [X22]
	086 Move X8, [X8+184]
	087 Move X21, [X8]
	088 Compare X19, 0
	089 JumpIfNotEqual {100}
	090 Move X19, 0x9D5000
	091 Move X19, [X19+2632]
	092 Move X0, [X19]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {98}
	096 Call 0x1C17DFC
	097 Move X0, [X19]
	098 Move X8, [X0+184]
	099 Move X19, [X8]
	100 Compare X21, 0
	101 JumpIfEqual {119}
	102 Move X0, X21
	103 Move X1, X19
	104 Move X2, X20
	105 Move X3, X31
	106 Call InputManager.Initialize, X0, X1, X2
	107 Move X0, [X22]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X20, [X31+32]
	113 Move X19, [X31+40]
	114 Move X22, [X31+16]
	115 Move X21, [X31+24]
	116 Move X30, [X31+48]
	117 Call InputSystem.PerformDefaultPluginInitialization
	118 Return 
	119 Call 0x1C17F20

Method: System.Void RunInitialUpdate()

Disassembly:
	0x037725C8 STP X30, X19, [X31 - 0x10]!
	0x037725CC CBZ X0, 0x37725F8
	0x037725D0 MOV X19, X0
	0x037725D4 BL 0x37729EC
	0x037725D8 MOV X1, X31
	0x037725DC BL 0x380C47C
	0x037725E0 LDR X8, [X19]
	0x037725E4 MOV X1, X0
	0x037725E8 MOV X0, X19
	0x037725EC LDP X3, X2, [X8 + 0x1B8]
	0x037725F0 LDP X30, X19, [X31], #0x10
	0x037725F4 BR X3
	0x037725F8 ADRP X0, 0x986000
	0x037725FC LDR X0, [X0 + 0x528]
	0x03772600 BL 0x1C16D08
	0x03772604 BL 0x1C16F10
	0x03772608 MOV X19, X0
	0x0377260C ADRP X0, 0x9A9000
	0x03772610 LDR X0, [X0 + 0xD60]
	0x03772614 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC6F000
	005 Move X20, 0x9AA000
	006 Move W8, [X19+3854]
	007 Move X20, [X20+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x9AA000
	013 Move X0, [X0+624]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3854], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move W0, W31
	025 Move X30, [X31+32]
	026 Call InputSystem.Update, X0
	027 Return 

Method: System.Void PerformDefaultPluginInitialization()

Disassembly:
	0x03772590 BR X2
	0x03772594 MOVZ W0, 0x8
	0x03772598 BL 0x3EB1AF0
	0x0377259C LDR X8, [X20]
	0x037725A0 STR X8, [X0]
	0x037725A4 ADRP X1, 0x742000
	0x037725A8 ADD X1, X1, 0xE58
	0x037725AC MOV X2, X31
	0x037725B0 BL 0x3EB1B00
	0x037725B4 MOV X20, X0
	0x037725B8 BL 0x3EB1AE0
	0x037725BC MOV X0, X20
	0x037725C0 BL 0x1D2C690
	0x037725C4 BL 0x1990590

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X31
	003 Call UISupport.Initialize
	004 Move X0, X31
	005 Call XInputSupport.Initialize
	006 Move X0, X31
	007 Call DualShockSupport.Initialize
	008 Move X0, X31
	009 Call AndroidSupport.Initialize
	010 Move X0, X31
	011 Call XRSupport.Initialize
	012 Move X0, X31
	013 Move X30, [X31+16]
	014 Call OnScreenSupport.Initialize
	015 Return 

