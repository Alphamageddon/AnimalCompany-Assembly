Type: UnityEngine.InputSystem.InputSettings

Method: UnityEngine.InputSystem.InputSettings/UpdateMode get_updateMode()

Disassembly:
	0x037CE7EC STRB W8, [X21 + 0x243]
	0x037CE7F0 LDR W8, [X20 + 0xAC]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_updateMode(UnityEngine.InputSystem.InputSettings/UpdateMode value)

Disassembly:
	0x037CE7F4 ADDS W31, W8, 0x1
	0x037CE7F8 B.NE 0x37CE81C
	0x037CE7FC LDR X0, [X20 + 0x10]
	0x037CE800 CBZ X0, 0x37CE86C
	0x037CE804 ADRP X8, 0x97A000
	0x037CE808 LDR X8, [X8 + 0x690]

ISIL:
	001 Move W8, [X0+32]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move [X0+32], W1

Method: System.Boolean get_compensateForScreenOrientation()

Disassembly:
	0x037CE8D8 STR W0, [X20 + 0xB0]
	0x037CE8DC LDR X0, [X20 + 0x10]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_compensateForScreenOrientation(System.Boolean value)

Disassembly:
	0x037CE8E0 CBZ X0, 0x37CE92C
	0x037CE8E4 ADRP X21, 0x977000
	0x037CE8E8 LDR X21, [X21 + 0x638]
	0x037CE8EC MOV X1, X31
	0x037CE8F0 BL 0x37367C0
	0x037CE8F4 STP X0, X1, [X31 + 0x20]
	0x037CE8F8 LDR W1, [X20 + 0xB0]

ISIL:
	001 Move W9, [X0+44]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move [X0+44], W8
	006 Call InputSettings.OnChange, X0
	007 Return 

Method: System.Boolean get_filterNoiseOnCurrent()

Disassembly:
	0x037CE8FC LDR X2, [X21]
	0x037CE900 ADD X8, X31, 0x8

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void set_filterNoiseOnCurrent(System.Boolean value)

Disassembly:
	0x037CE904 ADD X0, X31, 0x20

ISIL:
	001 Return 

Method: System.Single get_defaultDeadzoneMin()

Disassembly:
	0x037CE908 BL 0x24FC748
	0x037CE90C LDR X8, [X31 + 0x18]

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_defaultDeadzoneMin(System.Single value)

Disassembly:
	0x037CE910 LDUR V0, [X31 + 0x8]
	0x037CE914 LDP X30, X21, [X31 + 0x30]
	0x037CE918 STR X8, [X19 + 0x10]
	0x037CE91C STR V0, [X19]
	0x037CE920 LDP X20, X19, [X31 + 0x40]
	0x037CE924 ADD X31, X31, 0x50

ISIL:
	001 Move V1, [X0+56]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+56], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Single get_defaultDeadzoneMax()

Disassembly:
	0x037CE928 RET
	0x037CE92C BL 0x1C16F20

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_defaultDeadzoneMax(System.Single value)

Disassembly:
	0x037CE930 STR X1, [X0]
	0x037CE934 RET
	0x037CE938 STR X30, [X31 - 0x10]!
	0x037CE93C LDR X8, [X0]
	0x037CE940 CBZ X8, 0x37CE950
	0x037CE944 LDR X0, [X8 + 0x28]

ISIL:
	001 Move V1, [X0+60]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+60], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Single get_defaultButtonPressPoint()

Disassembly:
	0x037CE948 LDR X30, [X31], #0x10
	0x037CE94C RET

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Void set_defaultButtonPressPoint(System.Single value)

Disassembly:
	0x037CE950 BL 0x1C16F20
	0x037CE954 STR X30, [X31 - 0x10]!
	0x037CE958 LDR X8, [X0]
	0x037CE95C CBZ X8, 0x37CE96C
	0x037CE960 LDR X0, [X8 + 0x30]
	0x037CE964 LDR X30, [X31], #0x10
	0x037CE968 RET
	0x037CE96C BL 0x1C16F20
	0x037CE970 STR X30, [X31 - 0x10]!
	0x037CE974 LDR X8, [X0]
	0x037CE978 CBZ X8, 0x37CE988
	0x037CE97C LDR X0, [X8 + 0x38]
	0x037CE980 LDR X30, [X31], #0x10

ISIL:
	001 Move V1, [X0+64]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move X8, -47071232
	005 Move V1, [X8+3880]
	006 Move TEMP, 0x80800000
	007 Not TEMP
	008 Move W8, TEMP
	009 Move S2, W8
	010 NotImplemented "Instruction FMIN not yet implemented."
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction FCSEL not yet implemented."
	013 Move [X0+64], S0
	014 Call InputSettings.OnChange, X0
	015 Return 

Method: System.Single get_buttonReleaseThreshold()

Disassembly:
	0x037CE984 RET
	0x037CE988 BL 0x1C16F20

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Void set_buttonReleaseThreshold(System.Single value)

Disassembly:
	0x037CE98C STR X30, [X31 - 0x10]!
	0x037CE990 LDR X8, [X0]
	0x037CE994 CBZ X8, 0x37CE9A4
	0x037CE998 LDR X0, [X8 + 0x18]
	0x037CE99C LDR X30, [X31], #0x10
	0x037CE9A0 RET

ISIL:
	001 Move V1, [X0+68]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+68], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Single get_defaultTapTime()

Disassembly:
	0x037CE9A4 BL 0x1C16F20
	0x037CE9A8 STR X30, [X31 - 0x10]!

ISIL:
	001 Move V0, [X0+72]
	002 Return V0

Method: System.Void set_defaultTapTime(System.Single value)

Disassembly:
	0x037CE9AC LDR X8, [X0]
	0x037CE9B0 CBZ X8, 0x37CE9C8
	0x037CE9B4 LDR X0, [X8 + 0x18]
	0x037CE9B8 CBZ X0, 0x37CE9C8
	0x037CE9BC MOV X1, X31
	0x037CE9C0 LDR X30, [X31], #0x10

ISIL:
	001 Move V1, [X0+72]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+72], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Single get_defaultSlowTapTime()

Disassembly:
	0x037CE9C4 B 0x37382CC
	0x037CE9C8 BL 0x1C16F20

ISIL:
	001 Move V0, [X0+76]
	002 Return V0

Method: System.Void set_defaultSlowTapTime(System.Single value)

Disassembly:
	0x037CE9CC STR X30, [X31 - 0x10]!
	0x037CE9D0 LDR X8, [X0]
	0x037CE9D4 CBZ X8, 0x37CE9EC
	0x037CE9D8 LDR X0, [X8 + 0x18]
	0x037CE9DC CBZ X0, 0x37CE9EC
	0x037CE9E0 MOV X1, X31

ISIL:
	001 Move V1, [X0+76]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+76], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Single get_defaultHoldTime()

Disassembly:
	0x037CE9E4 LDR X30, [X31], #0x10
	0x037CE9E8 B 0x3738478

ISIL:
	001 Move V0, [X0+80]
	002 Return V0

Method: System.Void set_defaultHoldTime(System.Single value)

Disassembly:
	0x037CE9EC BL 0x1C16F20
	0x037CE9F0 STR X30, [X31 - 0x10]!
	0x037CE9F4 LDR X8, [X0]
	0x037CE9F8 CBZ X8, 0x37CEA10
	0x037CE9FC LDR X0, [X8 + 0x18]
	0x037CEA00 CBZ X0, 0x37CEA10

ISIL:
	001 Move V1, [X0+80]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+80], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Single get_tapRadius()

Disassembly:
	0x037CEA04 MOV X1, X31
	0x037CEA08 LDR X30, [X31], #0x10

ISIL:
	001 Move V0, [X0+84]
	002 Return V0

Method: System.Void set_tapRadius(System.Single value)

Disassembly:
	0x037CEA0C B 0x37367B0
	0x037CEA10 BL 0x1C16F20
	0x037CEA14 STR X30, [X31 - 0x10]!
	0x037CEA18 CBZ X0, 0x37CEA28
	0x037CEA1C LDR X0, [X0 + 0x18]
	0x037CEA20 LDR X30, [X31], #0x10

ISIL:
	001 Move V1, [X0+84]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+84], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Single get_multiTapDelayTime()

Disassembly:
	0x037CEA24 RET
	0x037CEA28 BL 0x1C16F20

ISIL:
	001 Move V0, [X0+88]
	002 Return V0

Method: System.Void set_multiTapDelayTime(System.Single value)

Disassembly:
	0x037CEA2C STP X30, X25, [X31 - 0x40]!
	0x037CEA30 STP X24, X23, [X31 + 0x10]
	0x037CEA34 STP X22, X21, [X31 + 0x20]
	0x037CEA38 STP X20, X19, [X31 + 0x30]
	0x037CEA3C ADRP X21, 0xC13000
	0x037CEA40 LDRB W8, [X21 + 0x245]

ISIL:
	001 Move V1, [X0+88]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+88], S0
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: UnityEngine.InputSystem.InputSettings/BackgroundBehavior get_backgroundBehavior()

Disassembly:
	0x037CEA44 MOV X19, X1
	0x037CEA48 MOV X20, X0

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_backgroundBehavior(UnityEngine.InputSystem.InputSettings/BackgroundBehavior value)

Disassembly:
	0x037CEA4C TBNZ X8, 0x0, 0x37CEA70
	0x037CEA50 ADRP X0, 0x929000
	0x037CEA54 LDR X0, [X0 + 0x3D8]
	0x037CEA58 BL 0x1C16CF4
	0x037CEA5C ADRP X0, 0x97A000
	0x037CEA60 LDR X0, [X0 + 0x8D8]

ISIL:
	001 Move W8, [X0+48]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move [X0+48], W1
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode get_editorInputBehaviorInPlayMode()

Disassembly:
	0x037CEA64 BL 0x1C16CF4
	0x037CEA68 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_editorInputBehaviorInPlayMode(UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode value)

Disassembly:
	0x037CEA6C STRB W8, [X21 + 0x245]
	0x037CEA70 LDR X8, [X20]
	0x037CEA74 CBZ X8, 0x37CF4F4
	0x037CEA78 ADRP X25, 0x929000
	0x037CEA7C ADRP X24, 0x97A000
	0x037CEA80 LDR X22, [X8 + 0x20]

ISIL:
	001 Move W8, [X0+52]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move [X0+52], W1
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Int32 get_maxEventBytesPerUpdate()

Disassembly:
	0x037CEA84 LDR X25, [X25 + 0x3D8]
	0x037CEA88 LDR X24, [X24 + 0x8D8]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_maxEventBytesPerUpdate(System.Int32 value)

Disassembly:
	0x037CEA8C CBZ X22, 0x37CEFCC
	0x037CEA90 LDR X0, [X25]
	0x037CEA94 LDR X21, [X8 + 0x28]
	0x037CEA98 BL 0x1C16F10
	0x037CEA9C LDR X8, [X22]
	0x037CEAA0 LDR X1, [X24]

ISIL:
	001 Move W8, [X0+36]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move [X0+36], W1
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: System.Int32 get_maxQueuedEventsPerUpdate()

Disassembly:
	0x037CEAA4 MOV X23, X0
	0x037CEAA8 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_maxQueuedEventsPerUpdate(System.Int32 value)

Disassembly:
	0x037CEAAC CBZ X9, 0x37CEAD0
	0x037CEAB0 LDR X10, [X8 + 0xB0]
	0x037CEAB4 ADD X10, X10, 0x8
	0x037CEAB8 LDUR X11, [X10 - 0x8]
	0x037CEABC CMP X11, X1
	0x037CEAC0 B.EQ 0x37CEAE0

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move [X0+40], W1
	005 Call InputSettings.OnChange, X0
	006 Return 

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<System.String> get_supportedDevices()

Disassembly:
	0x037CEAC4 SUBS X9, X9, 0x1
	0x037CEAC8 ADD X10, X10, 0x10
	0x037CEACC B.NE 0x37CEAB8
	0x037CEAD0 MOV X0, X22
	0x037CEAD4 MOV W2, W31
	0x037CEAD8 BL 0x1C5C788
	0x037CEADC B 0x37CEAEC
	0x037CEAE0 LDRSW X9, [X10]
	0x037CEAE4 ADD X8, X8, X9, 0x4, LSL
	0x037CEAE8 ADD X0, X8, 0x138
	0x037CEAEC LDR X2, [X0 + 0x8]
	0x037CEAF0 MOV X0, X23
	0x037CEAF4 MOV X1, X22
	0x037CEAF8 MOV X3, X31
	0x037CEAFC BL 0x2A719B8
	0x037CEB00 CBZ X21, 0x37CF4F4
	0x037CEB04 MOV X0, X21
	0x037CEB08 MOV X1, X23
	0x037CEB0C MOV X2, X31
	0x037CEB10 BL 0x37348FC
	0x037CEB14 LDR X8, [X20]
	0x037CEB18 CBZ X8, 0x37CF4F4
	0x037CEB1C LDR X0, [X25]
	0x037CEB20 LDP X23, X21, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC14000
	007 Move X20, 0x97B000
	008 Move W8, [X21+569]
	009 Move X20, [X20+2080]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x97B000
	016 Move X0, [X0+2080]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+569], W8
	020 Move X1, [X19+24]
	021 Move X2, [X20]
	022 Add X0, X31, 0
	023 Move [X31], X31
	024 Move [X31+8], X31
	025 Call ReadOnlyArray`1<Object>..ctor, X0, X1
	026 Move X0, [X31]
	027 Move X1, [X31+8]
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Void set_supportedDevices(UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<System.String> value)

Disassembly:
	0x037CEB24 BL 0x1C16F10
	0x037CEB28 CBZ X23, 0x37CF4F4
	0x037CEB2C LDR X8, [X23]
	0x037CEB30 LDR X1, [X24]
	0x037CEB34 MOV X22, X0
	0x037CEB38 LDRH W9, [X8 + 0x12E]
	0x037CEB3C CBZ X9, 0x37CEB60
	0x037CEB40 LDR X10, [X8 + 0xB0]
	0x037CEB44 ADD X10, X10, 0x8
	0x037CEB48 LDUR X11, [X10 - 0x8]
	0x037CEB4C CMP X11, X1
	0x037CEB50 B.EQ 0x37CEB70
	0x037CEB54 SUBS X9, X9, 0x1
	0x037CEB58 ADD X10, X10, 0x10
	0x037CEB5C B.NE 0x37CEB48
	0x037CEB60 MOV X0, X23
	0x037CEB64 MOV W2, W31
	0x037CEB68 BL 0x1C5C788
	0x037CEB6C B 0x37CEB7C
	0x037CEB70 LDRSW X9, [X10]
	0x037CEB74 ADD X8, X8, X9, 0x4, LSL
	0x037CEB78 ADD X0, X8, 0x138
	0x037CEB7C LDR X2, [X0 + 0x8]
	0x037CEB80 MOV X0, X22
	0x037CEB84 MOV X1, X23
	0x037CEB88 MOV X3, X31
	0x037CEB8C BL 0x2A719B8
	0x037CEB90 CBZ X21, 0x37CF4F4
	0x037CEB94 MOV X0, X21
	0x037CEB98 MOV X1, X22
	0x037CEB9C MOV X2, X31
	0x037CEBA0 BL 0x3734A5C
	0x037CEBA4 LDR X8, [X20]
	0x037CEBA8 CBZ X8, 0x37CF4F4
	0x037CEBAC LDR X0, [X25]
	0x037CEBB0 LDP X23, X21, [X8 + 0x20]
	0x037CEBB4 BL 0x1C16F10
	0x037CEBB8 CBZ X23, 0x37CF4F4
	0x037CEBBC LDR X8, [X23]
	0x037CEBC0 LDR X1, [X24]
	0x037CEBC4 MOV X22, X0
	0x037CEBC8 LDRH W9, [X8 + 0x12E]
	0x037CEBCC CBZ X9, 0x37CEBF0
	0x037CEBD0 LDR X10, [X8 + 0xB0]
	0x037CEBD4 ADD X10, X10, 0x8
	0x037CEBD8 LDUR X11, [X10 - 0x8]
	0x037CEBDC CMP X11, X1
	0x037CEBE0 B.EQ 0x37CEC00
	0x037CEBE4 SUBS X9, X9, 0x1
	0x037CEBE8 ADD X10, X10, 0x10
	0x037CEBEC B.NE 0x37CEBD8
	0x037CEBF0 MOV X0, X23
	0x037CEBF4 MOV W2, W31
	0x037CEBF8 BL 0x1C5C788
	0x037CEBFC B 0x37CEC0C
	0x037CEC00 LDRSW X9, [X10]
	0x037CEC04 ADD X8, X8, X9, 0x4, LSL
	0x037CEC08 ADD X0, X8, 0x138
	0x037CEC0C LDR X2, [X0 + 0x8]
	0x037CEC10 MOV X0, X22
	0x037CEC14 MOV X1, X23
	0x037CEC18 MOV X3, X31
	0x037CEC1C BL 0x2A719B8
	0x037CEC20 CBZ X21, 0x37CF4F4
	0x037CEC24 MOV X0, X21
	0x037CEC28 MOV X1, X22
	0x037CEC2C MOV X2, X31
	0x037CEC30 BL 0x37349AC
	0x037CEC34 LDR X8, [X20]
	0x037CEC38 CBZ X8, 0x37CF4F4
	0x037CEC3C LDR X0, [X25]
	0x037CEC40 LDR X21, [X8 + 0x30]
	0x037CEC44 LDR X23, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xC14000
	009 Move W8, [X21+570]
	010 Move X19, X0
	011 Move X20, X2
	012 ShiftRight X20, 32
	013 And X20, X20, 0x7FFFFFFF
	014 Move [X31], X1
	015 Move [X31+8], X2
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x97B000
	021 Move X0, [X0+2088]
	022 Call 0x1C17CF4
	023 Move X0, 0x97B000
	024 Move X0, [X0+72]
	025 Call 0x1C17CF4
	026 Move X0, 0x97B000
	027 Move X0, [X0+592]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+570], W8
	031 Move X0, X19
	032 Call InputSettings.get_supportedDevices, X0
	033 Move X8, X1
	034 ShiftRight X8, 32
	035 And X8, X8, 0x7FFFFFFF
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Call InputSettings.get_supportedDevices, X0
	039 Move X8, X1
	040 ShiftRight X8, 32
	041 And X8, X8, 0x7FFFFFFF
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X23, 0x97B000
	044 Move X23, [X23+592]
	045 Move X20, X31
	046 Move X8, [X19+24]
	047 Compare X8, 0
	048 JumpIfEqual {87}
	049 Move W9, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X8, X20
	052 Move X2, [X23]
	053 Move X22, [X8+32]
	054 Add X0, X31, 0
	055 Move W1, W20
	056 Add X21, X31, 0
	057 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	058 Move X1, X0
	059 Move X0, X22
	060 Move X2, X31
	061 Call String.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {71}
	066 Move X0, X19
	067 Add X20, X20, 1
	068 Call InputSettings.get_supportedDevices, X0
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add X21, X31, 0
	071 Move X8, 0x97B000
	072 Move X8, [X8+2088]
	073 Move X0, X21
	074 Move X1, [X8]
	075 Call ReadOnlyArray`1<Object>.ToArray, X0
	076 Move [X19+24], X0
	077 Move X0, X19
	078 Call InputSettings.OnChange, X0
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X30, [X31+16]
	084 Move X23, [X31+24]
	085 Add X31, X31, 64
	086 Return 
	087 Call 0x1C17F20
	088 Call 0x1C17F28

Method: System.Boolean get_disableRedundantEventsMerging()

Disassembly:
	0x037CEC48 BL 0x1C16F10
	0x037CEC4C CBZ X23, 0x37CF4F4

ISIL:
	001 Move W0, [X0+92]
	002 Return X0

Method: System.Void set_disableRedundantEventsMerging(System.Boolean value)

Disassembly:
	0x037CEC50 LDR X8, [X23]
	0x037CEC54 LDR X1, [X24]
	0x037CEC58 MOV X22, X0
	0x037CEC5C LDRH W9, [X8 + 0x12E]
	0x037CEC60 CBZ X9, 0x37CEC84
	0x037CEC64 LDR X10, [X8 + 0xB0]
	0x037CEC68 ADD X10, X10, 0x8

ISIL:
	001 Move W9, [X0+92]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move [X0+92], W8
	006 Call InputSettings.OnChange, X0
	007 Return 

Method: System.Boolean get_shortcutKeysConsumeInput()

Disassembly:
	0x037CEC6C LDUR X11, [X10 - 0x8]
	0x037CEC70 CMP X11, X1

ISIL:
	001 Move W0, [X0+93]
	002 Return X0

Method: System.Void set_shortcutKeysConsumeInput(System.Boolean value)

Disassembly:
	0x037CEC74 B.EQ 0x37CEC94
	0x037CEC78 SUBS X9, X9, 0x1
	0x037CEC7C ADD X10, X10, 0x10
	0x037CEC80 B.NE 0x37CEC6C
	0x037CEC84 MOVZ W2, 0x1
	0x037CEC88 MOV X0, X23
	0x037CEC8C BL 0x1C5C788

ISIL:
	001 Move W9, [X0+93]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move [X0+93], W8
	006 Call InputSettings.OnChange, X0
	007 Return 

Method: System.Void SetInternalFeatureFlag(System.String featureName, System.Boolean enabled)

Disassembly:
	0x037CEC90 B 0x37CECA4
	0x037CEC94 LDR W9, [X10]
	0x037CEC98 ADD W9, W9, 0x1
	0x037CEC9C ADD X8, X8, W9, 0x4, SXTW
	0x037CECA0 ADD X0, X8, 0x138
	0x037CECA4 LDR X2, [X0 + 0x8]
	0x037CECA8 MOV X0, X22
	0x037CECAC MOV X1, X23
	0x037CECB0 MOV X3, X31
	0x037CECB4 BL 0x2A719B8
	0x037CECB8 CBZ X21, 0x37CF4F4
	0x037CECBC MOV X0, X21
	0x037CECC0 MOV X1, X22
	0x037CECC4 MOV X2, X31
	0x037CECC8 BL 0x37348FC
	0x037CECCC LDR X8, [X20]
	0x037CECD0 CBZ X8, 0x37CF4F4
	0x037CECD4 LDR X0, [X25]
	0x037CECD8 LDR X21, [X8 + 0x30]
	0x037CECDC LDR X23, [X8 + 0x20]
	0x037CECE0 BL 0x1C16F10
	0x037CECE4 CBZ X23, 0x37CF4F4
	0x037CECE8 LDR X8, [X23]
	0x037CECEC LDR X1, [X24]
	0x037CECF0 MOV X22, X0
	0x037CECF4 LDRH W9, [X8 + 0x12E]
	0x037CECF8 CBZ X9, 0x37CED1C
	0x037CECFC LDR X10, [X8 + 0xB0]
	0x037CED00 ADD X10, X10, 0x8
	0x037CED04 LDUR X11, [X10 - 0x8]
	0x037CED08 CMP X11, X1
	0x037CED0C B.EQ 0x37CED2C
	0x037CED10 SUBS X9, X9, 0x1
	0x037CED14 ADD X10, X10, 0x10
	0x037CED18 B.NE 0x37CED04
	0x037CED1C MOVZ W2, 0x1
	0x037CED20 MOV X0, X23
	0x037CED24 BL 0x1C5C788
	0x037CED28 B 0x37CED3C
	0x037CED2C LDR W9, [X10]
	0x037CED30 ADD W9, W9, 0x1
	0x037CED34 ADD X8, X8, W9, 0x4, SXTW
	0x037CED38 ADD X0, X8, 0x138
	0x037CED3C LDR X2, [X0 + 0x8]
	0x037CED40 MOV X0, X22
	0x037CED44 MOV X1, X23
	0x037CED48 MOV X3, X31
	0x037CED4C BL 0x2A719B8
	0x037CED50 CBZ X21, 0x37CF4F4
	0x037CED54 MOV X0, X21
	0x037CED58 MOV X1, X22
	0x037CED5C MOV X2, X31
	0x037CED60 BL 0x3734A5C
	0x037CED64 LDR X8, [X20]
	0x037CED68 CBZ X8, 0x37CF4F4
	0x037CED6C LDR X0, [X25]
	0x037CED70 LDR X21, [X8 + 0x30]
	0x037CED74 LDR X23, [X8 + 0x20]
	0x037CED78 BL 0x1C16F10
	0x037CED7C CBZ X23, 0x37CF4F4
	0x037CED80 LDR X8, [X23]
	0x037CED84 LDR X1, [X24]
	0x037CED88 MOV X22, X0
	0x037CED8C LDRH W9, [X8 + 0x12E]
	0x037CED90 CBZ X9, 0x37CEDB4
	0x037CED94 LDR X10, [X8 + 0xB0]
	0x037CED98 ADD X10, X10, 0x8
	0x037CED9C LDUR X11, [X10 - 0x8]
	0x037CEDA0 CMP X11, X1
	0x037CEDA4 B.EQ 0x37CEDC4
	0x037CEDA8 SUBS X9, X9, 0x1
	0x037CEDAC ADD X10, X10, 0x10
	0x037CEDB0 B.NE 0x37CED9C
	0x037CEDB4 MOVZ W2, 0x1
	0x037CEDB8 MOV X0, X23
	0x037CEDBC BL 0x1C5C788
	0x037CEDC0 B 0x37CEDD4
	0x037CEDC4 LDR W9, [X10]
	0x037CEDC8 ADD W9, W9, 0x1
	0x037CEDCC ADD X8, X8, W9, 0x4, SXTW
	0x037CEDD0 ADD X0, X8, 0x138
	0x037CEDD4 LDR X2, [X0 + 0x8]
	0x037CEDD8 MOV X0, X22
	0x037CEDDC MOV X1, X23
	0x037CEDE0 MOV X3, X31
	0x037CEDE4 BL 0x2A719B8
	0x037CEDE8 CBZ X21, 0x37CF4F4
	0x037CEDEC MOV X0, X21
	0x037CEDF0 MOV X1, X22
	0x037CEDF4 MOV X2, X31
	0x037CEDF8 BL 0x37349AC
	0x037CEDFC LDR X8, [X20]
	0x037CEE00 CBZ X8, 0x37CF4F4
	0x037CEE04 LDR X0, [X25]
	0x037CEE08 LDR X21, [X8 + 0x38]
	0x037CEE0C LDR X23, [X8 + 0x20]
	0x037CEE10 BL 0x1C16F10
	0x037CEE14 CBZ X23, 0x37CF4F4
	0x037CEE18 LDR X8, [X23]
	0x037CEE1C LDR X1, [X24]
	0x037CEE20 MOV X22, X0
	0x037CEE24 LDRH W9, [X8 + 0x12E]
	0x037CEE28 CBZ X9, 0x37CEE4C
	0x037CEE2C LDR X10, [X8 + 0xB0]
	0x037CEE30 ADD X10, X10, 0x8
	0x037CEE34 LDUR X11, [X10 - 0x8]
	0x037CEE38 CMP X11, X1
	0x037CEE3C B.EQ 0x37CEE5C
	0x037CEE40 SUBS X9, X9, 0x1
	0x037CEE44 ADD X10, X10, 0x10
	0x037CEE48 B.NE 0x37CEE34
	0x037CEE4C MOVZ W2, 0x2
	0x037CEE50 MOV X0, X23
	0x037CEE54 BL 0x1C5C788
	0x037CEE58 B 0x37CEE6C
	0x037CEE5C LDR W9, [X10]
	0x037CEE60 ADD W9, W9, 0x2
	0x037CEE64 ADD X8, X8, W9, 0x4, SXTW
	0x037CEE68 ADD X0, X8, 0x138
	0x037CEE6C LDR X2, [X0 + 0x8]
	0x037CEE70 MOV X0, X22
	0x037CEE74 MOV X1, X23
	0x037CEE78 MOV X3, X31
	0x037CEE7C BL 0x2A719B8
	0x037CEE80 CBZ X21, 0x37CF4F4
	0x037CEE84 MOV X0, X21
	0x037CEE88 MOV X1, X22
	0x037CEE8C MOV X2, X31
	0x037CEE90 BL 0x37348FC
	0x037CEE94 LDR X8, [X20]
	0x037CEE98 CBZ X8, 0x37CF4F4
	0x037CEE9C LDR X0, [X25]
	0x037CEEA0 LDR X21, [X8 + 0x38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xC14000
	007 Move W8, [X22+571]
	008 Move W20, W2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {41}
	015 Move X0, 0x927000
	016 Move X0, [X0+3104]
	017 Call 0x1C17CF4
	018 Move X0, 0x97B000
	019 Move X0, [X0+2096]
	020 Call 0x1C17CF4
	021 Move X0, 0x927000
	022 Move X0, [X0+3112]
	023 Call 0x1C17CF4
	024 Move X0, 0x927000
	025 Move X0, [X0+3120]
	026 Call 0x1C17CF4
	027 Move X0, 0x951000
	028 Move X0, [X0+4064]
	029 Call 0x1C17CF4
	030 Move X0, 0x97B000
	031 Move X0, [X0+2104]
	032 Call 0x1C17CF4
	033 Move X0, 0x97B000
	034 Move X0, [X0+2112]
	035 Call 0x1C17CF4
	036 Move X0, 0x97B000
	037 Move X0, [X0+2120]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X22+571], W8
	041 Move X0, X21
	042 Move X1, X31
	043 Call String.IsNullOrEmpty, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {137}
	048 Move X8, 0x97B000
	049 Move X8, [X8+2120]
	050 Move X0, X21
	051 Move X2, X31
	052 And W22, W20, 1
	053 Move X1, [X8]
	054 Call String.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {64}
	059 Move X8, 0x951000
	060 Move X8, [X8+4064]
	061 Move X8, [X8]
	062 Move X8, [X8+184]
	063 Move [X8], W22
	064 Move X8, 0x97B000
	065 Move X8, [X8+2104]
	066 Move X0, X21
	067 Move X2, X31
	068 Move X1, [X8]
	069 Call String.op_Equality, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {79}
	074 Move X8, 0x951000
	075 Move X8, [X8+4064]
	076 Move X8, [X8]
	077 Move X8, [X8+184]
	078 Move [X8+1], W22
	079 Move X8, 0x97B000
	080 Move X8, [X8+2112]
	081 Move X0, X21
	082 Move X2, X31
	083 Move X1, [X8]
	084 Call String.op_Equality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {94}
	089 Move X8, 0x951000
	090 Move X8, [X8+4064]
	091 Move X8, [X8]
	092 Move X8, [X8+184]
	093 Move [X8+2], W22
	094 Move X22, [X19+96]
	095 Compare X22, 0
	096 JumpIfNotEqual {107}
	097 Move X8, 0x927000
	098 Move X8, [X8+3120]
	099 Move X0, [X8]
	100 Call 0x1C17F10
	101 Move X8, 0x927000
	102 Move X8, [X8+3112]
	103 Move X22, X0
	104 Move X1, [X8]
	105 Call HashSet`1<Object>..ctor, X0
	106 Move [X19+96], X22
	107 Compare X21, 0
	108 JumpIfEqual {155}
	109 Move X0, X21
	110 Move X1, X31
	111 Call String.ToUpperInvariant, X0
	112 Compare X22, 0
	113 JumpIfEqual {155}
	114 Move X1, X0
	115 Move TEMP, X20
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {124}
	119 Move X8, 0x927000
	120 Move X8, [X8+3104]
	121 Move X0, X22
	122 Move X2, [X8]
	123 Call HashSet`1<Object>.Add, X0, X1
	124 Move X8, 0x97B000
	125 Move X8, [X8+2096]
	126 Move X0, X22
	127 Move X2, [X8]
	128 Call HashSet`1<Object>.Remove, X0, X1
	129 Move X0, X19
	130 Move X20, [X31+32]
	131 Move X19, [X31+40]
	132 Move X22, [X31+16]
	133 Move X21, [X31+24]
	134 Move X30, [X31+48]
	135 Call InputSettings.OnChange, X0
	136 Return 
	137 Move X0, 0x92B000
	138 Move X0, [X0+1320]
	139 Call 0x1C17D08
	140 Call 0x1C17F10
	141 Move X19, X0
	142 Move X0, 0x97B000
	143 Move X0, [X0+2128]
	144 Call 0x1C17D08
	145 Move X1, X0
	146 Move X0, X19
	147 Move X2, X31
	148 Call ArgumentNullException..ctor, X0, X1
	149 Move X0, 0x97B000
	150 Move X0, [X0+2136]
	151 Call 0x1C17D08
	152 Move X1, X0
	153 Move X0, X19
	154 Call 0x1C17DEC
	155 Call 0x1C17F20

Method: System.Boolean IsFeatureEnabled(System.String featureName)

Disassembly:
	0x037CEEA4 LDR X23, [X8 + 0x20]
	0x037CEEA8 BL 0x1C16F10
	0x037CEEAC CBZ X23, 0x37CF4F4
	0x037CEEB0 LDR X8, [X23]
	0x037CEEB4 LDR X1, [X24]
	0x037CEEB8 MOV X22, X0
	0x037CEEBC LDRH W9, [X8 + 0x12E]
	0x037CEEC0 CBZ X9, 0x37CEEE4
	0x037CEEC4 LDR X10, [X8 + 0xB0]
	0x037CEEC8 ADD X10, X10, 0x8
	0x037CEECC LDUR X11, [X10 - 0x8]
	0x037CEED0 CMP X11, X1
	0x037CEED4 B.EQ 0x37CEEF4
	0x037CEED8 SUBS X9, X9, 0x1
	0x037CEEDC ADD X10, X10, 0x10
	0x037CEEE0 B.NE 0x37CEECC
	0x037CEEE4 MOVZ W2, 0x2
	0x037CEEE8 MOV X0, X23
	0x037CEEEC BL 0x1C5C788
	0x037CEEF0 B 0x37CEF04
	0x037CEEF4 LDR W9, [X10]
	0x037CEEF8 ADD W9, W9, 0x2
	0x037CEEFC ADD X8, X8, W9, 0x4, SXTW
	0x037CEF00 ADD X0, X8, 0x138
	0x037CEF04 LDR X2, [X0 + 0x8]
	0x037CEF08 MOV X0, X22
	0x037CEF0C MOV X1, X23
	0x037CEF10 MOV X3, X31
	0x037CEF14 BL 0x2A719B8
	0x037CEF18 CBZ X21, 0x37CF4F4
	0x037CEF1C MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC14000
	006 Move W8, [X21+572]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x96B000
	014 Move X0, [X0+3304]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+572], W8
	018 Move X20, [X20+96]
	019 Compare X20, 0
	020 JumpIfEqual {37}
	021 Compare X19, 0
	022 JumpIfEqual {43}
	023 Move X21, 0x96B000
	024 Move X21, [X21+3304]
	025 Move X0, X19
	026 Move X1, X31
	027 Call String.ToUpperInvariant, X0
	028 Move X2, [X21]
	029 Move X1, X0
	030 Move X0, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call HashSet`1<Object>.Contains, X0, X1
	036 Return X0
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move W0, W31
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0
	043 Call 0x1C17F20

Method: System.Void OnChange()

Disassembly:
	0x037CE80C MOV X2, X31
	0x037CE810 LDR X1, [X8]
	0x037CE814 BL 0x3737CE4
	0x037CE818 STR W0, [X20 + 0xAC]
	0x037CE81C LDR X0, [X20 + 0x10]
	0x037CE820 CBZ X0, 0x37CE86C
	0x037CE824 ADRP X21, 0x977000
	0x037CE828 LDR X21, [X21 + 0x638]
	0x037CE82C MOV X1, X31
	0x037CE830 BL 0x37367C0
	0x037CE834 STP X0, X1, [X31 + 0x20]
	0x037CE838 LDR W1, [X20 + 0xAC]
	0x037CE83C LDR X2, [X21]
	0x037CE840 ADD X8, X31, 0x8
	0x037CE844 ADD X0, X31, 0x20
	0x037CE848 BL 0x24FC748
	0x037CE84C LDR X8, [X31 + 0x18]
	0x037CE850 LDUR V0, [X31 + 0x8]
	0x037CE854 LDP X30, X21, [X31 + 0x30]
	0x037CE858 STR X8, [X19 + 0x10]
	0x037CE85C STR V0, [X19]
	0x037CE860 LDP X20, X19, [X31 + 0x40]
	0x037CE864 ADD X31, X31, 0x50
	0x037CE868 RET
	0x037CE86C BL 0x1C16F20
	0x037CE870 SUB X31, X31, 0x50
	0x037CE874 STP X30, X21, [X31 + 0x30]
	0x037CE878 STP X20, X19, [X31 + 0x40]
	0x037CE87C ADRP X21, 0xC13000
	0x037CE880 LDRB W9, [X21 + 0x244]
	0x037CE884 MOV X20, X0
	0x037CE888 MOV X19, X8
	0x037CE88C TBNZ X9, 0x0, 0x37CE8B0
	0x037CE890 ADRP X0, 0x977000
	0x037CE894 LDR X0, [X0 + 0x638]
	0x037CE898 BL 0x1C16CF4
	0x037CE89C ADRP X0, 0x97A000
	0x037CE8A0 LDR X0, [X0 + 0x8D0]
	0x037CE8A4 BL 0x1C16CF4
	0x037CE8A8 MOVZ W8, 0x1
	0x037CE8AC STRB W8, [X21 + 0x244]
	0x037CE8B0 LDR W8, [X20 + 0xB0]
	0x037CE8B4 ADDS W31, W8, 0x1
	0x037CE8B8 B.NE 0x37CE8DC
	0x037CE8BC LDR X0, [X20 + 0x10]
	0x037CE8C0 CBZ X0, 0x37CE92C
	0x037CE8C4 ADRP X8, 0x97A000
	0x037CE8C8 LDR X8, [X8 + 0x8D0]
	0x037CE8CC MOV X2, X31
	0x037CE8D0 LDR X1, [X8]
	0x037CE8D4 BL 0x3737CE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC14000
	006 Move X21, 0x94E000
	007 Move W8, [X20+573]
	008 Move X21, [X21+624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x94E000
	015 Move X0, [X0+624]
	016 Call 0x1C17CF4
	017 Move X0, 0x926000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+573], W8
	022 Move X0, [X21]
	023 Move X20, 0x926000
	024 Move W8, [X0+224]
	025 Move X20, [X20+1432]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call InputSystem.get_settings
	031 Move X8, [X20]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X19
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {63}
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X21]
	052 Move X8, [X0+184]
	053 Move X0, [X8]
	054 Compare X0, 0
	055 JumpIfEqual {68}
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X1, X31
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Call InputManager.ApplySettings, X0
	062 Return 
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 
	068 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x037CEF20 MOV X1, X22
	0x037CEF24 MOV X2, X31
	0x037CEF28 BL 0x3734A5C
	0x037CEF2C LDR X8, [X20]
	0x037CEF30 CBZ X8, 0x37CF4F4
	0x037CEF34 LDR X0, [X25]
	0x037CEF38 LDR X21, [X8 + 0x38]
	0x037CEF3C LDR X23, [X8 + 0x20]
	0x037CEF40 BL 0x1C16F10
	0x037CEF44 CBZ X23, 0x37CF4F4
	0x037CEF48 LDR X8, [X23]
	0x037CEF4C LDR X1, [X24]
	0x037CEF50 MOV X22, X0
	0x037CEF54 LDRH W9, [X8 + 0x12E]
	0x037CEF58 CBZ X9, 0x37CEF7C
	0x037CEF5C LDR X10, [X8 + 0xB0]
	0x037CEF60 ADD X10, X10, 0x8

ISIL:
	001 Move X8, -47054848
	002 Move V0, [X8+3552]
	003 Move X8, -47054848
	004 Move X1, X31
	005 Move [X0+32], D0
	006 Move V0, [X8+4]
	007 Move W8, 1000
	008 Move [X0+40], W8
	009 Move X8, -47063040
	010 Move [X0+56], V0
	011 Move V0, [X8+14]
	012 Move W8, 1
	013 Move [X0+44], W8
	014 Move W8, 0x3F400000
	015 Move [X0+72], V0
	016 Move [X0+88], W8
	017 Call ScriptableObject..ctor, X0
	018 Return 

