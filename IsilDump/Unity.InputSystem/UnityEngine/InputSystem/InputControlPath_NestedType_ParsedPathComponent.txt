Type: UnityEngine.InputSystem.InputControlPath/ParsedPathComponent

Method: System.String get_layout()

Disassembly:
	0x0377A694 LDR X22, [X22 + 0xEE0]
	0x0377A698 LDR X20, [X20 + 0xF70]

ISIL:
	001 Move X1, X31
	002 Call Substring.ToString, X0
	003 Return X0

Method: System.Collections.Generic.IEnumerable`1<System.String> get_usages()

Disassembly:
	0x0377A69C MOV X19, X0
	0x0377A6A0 TBNZ X8, 0x0, 0x377A6C4
	0x0377A6A4 ADRP X0, 0x9CC000
	0x0377A6A8 LDR X0, [X0 + 0xF70]
	0x0377A6AC BL 0x1C16CF4
	0x0377A6B0 ADRP X0, 0x9CC000
	0x0377A6B4 LDR X0, [X0 + 0xEE0]
	0x0377A6B8 BL 0x1C16CF4
	0x0377A6BC MOVZ W8, 0x1
	0x0377A6C0 STRB W8, [X21 + 0xF59]
	0x0377A6C4 LDR X8, [X22]
	0x0377A6C8 LDR X4, [X20]
	0x0377A6CC MOV X2, X19
	0x0377A6D0 LDP X20, X19, [X31 + 0x20]
	0x0377A6D4 LDR X8, [X8 + 0xB8]
	0x0377A6D8 LDP X22, X21, [X31 + 0x10]
	0x0377A6DC MOVZ W3, 0xA
	0x0377A6E0 ADD X0, X8, 0x10
	0x0377A6E4 ADD X1, X8, 0x8
	0x0377A6E8 LDR X30, [X31], #0x30
	0x0377A6EC B 0x2174728
	0x0377A6F0 STR X30, [X31 - 0x30]!
	0x0377A6F4 STP X22, X21, [X31 + 0x10]
	0x0377A6F8 STP X20, X19, [X31 + 0x20]
	0x0377A6FC ADRP X20, 0xC66000
	0x0377A700 LDRB W8, [X20 + 0xF5A]
	0x0377A704 MOV X19, X0
	0x0377A708 TBNZ X8, 0x0, 0x377A738
	0x0377A70C ADRP X0, 0x9CC000
	0x0377A710 LDR X0, [X0 + 0xF78]
	0x0377A714 BL 0x1C16CF4
	0x0377A718 ADRP X0, 0x9CC000
	0x0377A71C LDR X0, [X0 + 0xF80]
	0x0377A720 BL 0x1C16CF4
	0x0377A724 ADRP X0, 0x9CC000
	0x0377A728 LDR X0, [X0 + 0xEE0]
	0x0377A72C BL 0x1C16CF4
	0x0377A730 MOVZ W8, 0x1
	0x0377A734 STRB W8, [X20 + 0xF5A]
	0x0377A738 ADRP X21, 0xC66000
	0x0377A73C ADRP X20, 0x9CC000
	0x0377A740 LDRB W8, [X21 + 0xF98]
	0x0377A744 LDR X20, [X20 + 0xEE0]
	0x0377A748 CBNZ W8, 0x377A760
	0x0377A74C ADRP X0, 0x9CC000
	0x0377A750 LDR X0, [X0 + 0xEE0]
	0x0377A754 BL 0x1C16CF4
	0x0377A758 MOVZ W8, 0x1
	0x0377A75C STRB W8, [X21 + 0xF98]
	0x0377A760 LDR X8, [X20]
	0x0377A764 ADRP X21, 0x9CC000
	0x0377A768 LDR X8, [X8 + 0xB8]
	0x0377A76C LDR X9, [X8]
	0x0377A770 LDR X21, [X21 + 0xF80]
	0x0377A774 CMP X9, X19
	0x0377A778 B.NE 0x377A7AC
	0x0377A77C ADRP X22, 0xC66000
	0x0377A780 LDRB W9, [X22 + 0xF97]
	0x0377A784 CBNZ W9, 0x377A7A0
	0x0377A788 MOV X0, X20
	0x0377A78C BL 0x1C16CF4
	0x0377A790 LDR X8, [X20]
	0x0377A794 MOVZ W9, 0x1
	0x0377A798 STRB W9, [X22 + 0xF97]
	0x0377A79C LDR X8, [X8 + 0xB8]
	0x0377A7A0 STR X31, [X8]
	0x0377A7A4 LDR X8, [X20]
	0x0377A7A8 LDR X8, [X8 + 0xB8]
	0x0377A7AC LDR X0, [X8 + 0x10]
	0x0377A7B0 LDR W2, [X8 + 0x8]
	0x0377A7B4 LDR X3, [X21]
	0x0377A7B8 MOV X1, X19
	0x0377A7BC BL 0x2179B8C
	0x0377A7C0 ADDS W31, W0, 0x1
	0x0377A7C4 B.EQ 0x377A7F8
	0x0377A7C8 LDR X8, [X20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X21, 0xC67000
	009 Move X20, 0x9CD000
	010 Move X22, 0x9CD000
	011 Move W8, [X21+3912]
	012 Move X20, [X20+3680]
	013 Move X22, [X22+3688]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0x9CD000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x9CD000
	023 Move X0, [X0+3560]
	024 Call 0x1C17CF4
	025 Move X0, 0x9CD000
	026 Move X0, [X0+3680]
	027 Call 0x1C17CF4
	028 Move X0, 0x9CD000
	029 Move X0, [X0+3704]
	030 Call 0x1C17CF4
	031 Move X0, 0x9CD000
	032 Move X0, [X0+3688]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+3912], W8
	036 Move V1, [X19+16]
	037 Move V0, [X19+32]
	038 Move X0, [X20]
	039 Add X1, X31, 0
	040 Move [X31], V1
	041 Move [X31+8], V0
	042 Call 0x1C17E04
	043 Move X8, [X22]
	044 Move X19, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {51}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X8, [X22]
	051 Move X9, [X8+184]
	052 Move X23, 0x9CD000
	053 Move X20, [X9+8]
	054 Move X23, [X23+3696]
	055 Compare X20, 0
	056 JumpIfNotEqual {79}
	057 Move W9, [X8+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {63}
	060 Move X0, X8
	061 Call 0x1C17DFC
	062 Move X8, [X22]
	063 Move X9, 0x9CD000
	064 Move X8, [X8+184]
	065 Move X9, [X9+3560]
	066 Move X21, [X8]
	067 Move X0, [X9]
	068 Call 0x1C17F10
	069 Move X8, 0x9CD000
	070 Move X8, [X8+3704]
	071 Move X1, X21
	072 Move X3, X31
	073 Move X20, X0
	074 Move X2, [X8]
	075 Call Func`2<Substring, Object>..ctor, X0, X1, X2
	076 Move X8, [X22]
	077 Move X8, [X8+184]
	078 Move [X8+8], X20
	079 Move X2, [X23]
	080 Move X0, X19
	081 Move X1, X20
	082 Call Enumerable.Select, X0, X1
	083 Move X20, [X31+64]
	084 Move X19, [X31+72]
	085 Move X22, [X31+48]
	086 Move X21, [X31+56]
	087 Move X30, [X31+32]
	088 Move X23, [X31+40]
	089 Add X31, X31, 80
	090 Return X0

Method: System.String get_name()

Disassembly:
	0x0377A7CC ADRP X9, 0x9CC000
	0x0377A7D0 MOV W2, W0
	0x0377A7D4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Add X0, X0, 48
	002 Move X1, X31
	003 Call Substring.ToString, X0
	004 Return X0

Method: System.String get_displayName()

Disassembly:
	0x0377A7D8 LDR X9, [X9 + 0xF78]
	0x0377A7DC LDP X20, X19, [X31 + 0x20]
	0x0377A7E0 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Add X0, X0, 64
	002 Move X1, X31
	003 Call Substring.ToString, X0
	004 Return X0

Method: System.Boolean get_isWildcard()

Disassembly:
	0x03778F10 STP X31, X31, [X31 + 0x8]
	0x03778F14 STR X31, [X31 + 0x18]
	0x03778F18 BL 0x32277A8
	0x03778F1C TBNZ X0, 0x0, 0x3778F88
	0x03778F20 CBZ X19, 0x3778FA8
	0x03778F24 STR X20, [X31 + 0x8]
	0x03778F28 CBZ X20, 0x3778FF0
	0x03778F2C LDR W8, [X20 + 0x10]
	0x03778F30 MOVI V0.2D, 0x0
	0x03778F34 ADD X0, X31, 0x8
	0x03778F38 MOVZ W2, 0x1
	0x03778F3C MOV X1, X19
	0x03778F40 STP W31, W31, [X31 + 0x14]
	0x03778F44 STP V0, V0, [X31 + 0x20]
	0x03778F48 STP V0, V0, [X31 + 0x40]
	0x03778F4C STR W8, [X31 + 0x10]
	0x03778F50 STUR V0, [X31 + 0x60]
	0x03778F54 BL 0x3778A80
	0x03778F58 TBZ X0, 0x0, 0x3778F74
	0x03778F5C LDR W8, [X31 + 0x18]
	0x03778F60 LDR W9, [X31 + 0x10]
	0x03778F64 CMP W8, W9
	0x03778F68 B.NE 0x3778F74
	0x03778F6C MOVZ W0, 0x1
	0x03778F70 B 0x3778F78

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC69000
	006 Move X21, 0x9AE000
	007 Move W8, [X20+3913]
	008 Move X21, [X21+3824]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9AE000
	015 Move X0, [X0+3824]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3913], W8
	019 Move X0, [X21]
	020 Move X20, [X19+48]
	021 Move X19, [X19+56]
	022 Move X1, X31
	023 Call Substring.op_Implicit, X0
	024 Move X2, X0
	025 Move X3, X1
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X4, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Substring.op_Equality, X0, X1
	034 Return X0

Method: System.Boolean get_isDoubleWildcard()

Disassembly:
	0x0377A7E4 LDR X0, [X8 + 0x10]
	0x0377A7E8 LDR X3, [X9]
	0x0377A7EC ADD X1, X8, 0x8
	0x0377A7F0 LDR X30, [X31], #0x30
	0x0377A7F4 B 0x2177EC0
	0x0377A7F8 LDP X20, X19, [X31 + 0x20]
	0x0377A7FC LDP X22, X21, [X31 + 0x10]
	0x0377A800 LDR X30, [X31], #0x30
	0x0377A804 RET
	0x0377A808 MOV X1, X0
	0x0377A80C ADD X0, X0, 0x1E8
	0x0377A810 MOV X2, X31
	0x0377A814 B 0x37FE270
	0x0377A818 MOV X1, X0
	0x0377A81C ADD X0, X0, 0x1E8
	0x0377A820 MOV X2, X31
	0x0377A824 B 0x37FE3CC
	0x0377A828 MOV X1, X0
	0x0377A82C ADD X0, X0, 0x1E8
	0x0377A830 MOV X2, X31
	0x0377A834 B 0x37FE594
	0x0377A838 MOV X1, X0
	0x0377A83C ADD X0, X0, 0x1E8
	0x0377A840 MOV X2, X31
	0x0377A844 B 0x37FE454

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC67000
	006 Move X21, 0x9CD000
	007 Move W8, [X20+3914]
	008 Move X21, [X21+3712]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9CD000
	015 Move X0, [X0+3712]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3914], W8
	019 Move X0, [X21]
	020 Move X20, [X19+48]
	021 Move X19, [X19+56]
	022 Move X1, X31
	023 Call Substring.op_Implicit, X0
	024 Move X2, X0
	025 Move X3, X1
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X4, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Substring.op_Equality, X0, X1
	034 Return X0

Method: System.String ToHumanReadableString(System.String parentLayoutName, System.String parentControlPath, out System.String referencedLayoutName, out System.String controlPath, UnityEngine.InputSystem.InputControlPath/HumanReadableStringOptions options)

Disassembly:
	0x0377849C STP X28, X27, [X31 + 0x20]
	0x037784A0 STP X26, X25, [X31 + 0x30]
	0x037784A4 STP X24, X23, [X31 + 0x40]
	0x037784A8 STP X22, X21, [X31 + 0x50]
	0x037784AC STP X20, X19, [X31 + 0x60]
	0x037784B0 ADRP X21, 0xC68000
	0x037784B4 LDRB W8, [X21 + 0xF3F]
	0x037784B8 MOV X19, X1
	0x037784BC MOV X20, X0
	0x037784C0 TBNZ X8, 0x0, 0x37784F0
	0x037784C4 ADRP X0, 0x9CE000
	0x037784C8 LDR X0, [X0 + 0xDA8]
	0x037784CC BL 0x1C16CF4
	0x037784D0 ADRP X0, 0x9A3000
	0x037784D4 LDR X0, [X0 + 0xDC8]
	0x037784D8 BL 0x1C16CF4
	0x037784DC ADRP X0, 0x9A3000
	0x037784E0 LDR X0, [X0 + 0xDD0]
	0x037784E4 BL 0x1C16CF4
	0x037784E8 MOVZ W8, 0x1
	0x037784EC STRB W8, [X21 + 0xF3F]
	0x037784F0 STP X31, X31, [X31]
	0x037784F4 LDR X1, [X19 + 0x20]
	0x037784F8 UBFM X8, X1, 0x20, 0x3F
	0x037784FC CMP W8, 0x1
	0x03778500 B.LT 0x3778514
	0x03778504 LDR X0, [X19 + 0x18]
	0x03778508 LDP X2, X3, [X20 + 0x10]
	0x0377850C BL 0x377864C
	0x03778510 TBZ X0, 0x0, 0x3778614
	0x03778514 MOV X21, X19
	0x03778518 LDR W8, [X21 + 0x28]!
	0x0377851C CMP W8, 0x1
	0x03778520 B.LT 0x37785EC
	0x03778524 ADRP X26, 0x9CE000
	0x03778528 ADRP X27, 0x9A3000
	0x0377852C LDR X26, [X26 + 0xDA8]
	0x03778530 LDR X27, [X27 + 0xDD0]
	0x03778534 MOV W22, W31
	0x03778538 LDR X2, [X26]
	0x0377853C MOV X0, X21
	0x03778540 MOV W1, W22
	0x03778544 BL 0x2DED518
	0x03778548 UBFM X8, X1, 0x20, 0x3F
	0x0377854C CMP W8, 0x1
	0x03778550 B.LT 0x37785DC
	0x03778554 LDR X8, [X20 + 0x50]
	0x03778558 UBFM X28, X8, 0x20, 0x3F
	0x0377855C CMP W28, 0x1
	0x03778560 B.LT 0x3778614
	0x03778564 LDR X9, [X20 + 0x48]
	0x03778568 LDR X2, [X27]
	0x0377856C MOV X23, X1
	0x03778570 MOV X24, X0
	0x03778574 ADD X0, X31, 0x0
	0x03778578 MOV W1, W31
	0x0377857C STP X9, X8, [X31]
	0x03778580 BL 0x24FCF28
	0x03778584 MOV X2, X0
	0x03778588 MOV X3, X1
	0x0377858C MOV X0, X24
	0x03778590 MOV X1, X23
	0x03778594 BL 0x377864C
	0x03778598 TBNZ X0, 0x0, 0x37785DC
	0x0377859C MOVZ W25, 0x1
	0x037785A0 CMP W28, W25
	0x037785A4 B.EQ 0x3778614
	0x037785A8 LDUR V0, [X20 + 0x48]
	0x037785AC LDR X2, [X27]
	0x037785B0 ADD X0, X31, 0x0
	0x037785B4 MOV W1, W25
	0x037785B8 STR V0, [X31]
	0x037785BC BL 0x24FCF28
	0x037785C0 MOV X2, X0
	0x037785C4 MOV X3, X1
	0x037785C8 MOV X0, X24
	0x037785CC MOV X1, X23
	0x037785D0 BL 0x377864C
	0x037785D4 ADD W25, W25, 0x1
	0x037785D8 TBZ X0, 0x0, 0x37785A0
	0x037785DC LDR W8, [X21]
	0x037785E0 ADD W22, W22, 0x1
	0x037785E4 CMP W22, W8
	0x037785E8 B.LT 0x3778538
	0x037785EC LDR X1, [X19 + 0x50]
	0x037785F0 UBFM X8, X1, 0x20, 0x3F
	0x037785F4 CMP W8, 0x1
	0x037785F8 B.LT 0x377860C
	0x037785FC LDR X0, [X19 + 0x48]
	0x03778600 LDP X2, X3, [X20]
	0x03778604 BL 0x377864C
	0x03778608 TBZ X0, 0x0, 0x3778614
	0x0377860C MOVZ W0, 0x1
	0x03778610 B 0x3778618
	0x03778614 MOV W0, W31
	0x03778618 LDP X20, X19, [X31 + 0x60]
	0x0377861C LDP X22, X21, [X31 + 0x50]
	0x03778620 LDP X24, X23, [X31 + 0x40]
	0x03778624 LDP X26, X25, [X31 + 0x30]
	0x03778628 LDP X28, X27, [X31 + 0x20]
	0x0377862C LDR X30, [X31 + 0x10]
	0x03778630 ADD X31, X31, 0x70
	0x03778634 RET
	0x03778638 LDR W8, [X0 + 0x10]
	0x0377863C LDR W9, [X0 + 0x8]
	0x03778640 CMP W8, W9
	0x03778644 CSET W0, EQ
	0x03778648 RET
	0x0377864C SUB X31, X31, 0x80
	0x03778650 STP X1, X30, [X31 + 0x18]
	0x03778654 STP X28, X27, [X31 + 0x30]
	0x03778658 STP X26, X25, [X31 + 0x40]
	0x0377865C STP X24, X23, [X31 + 0x50]
	0x03778660 STP X22, X21, [X31 + 0x60]
	0x03778664 STP X20, X19, [X31 + 0x70]
	0x03778668 ADRP X19, 0xC68000
	0x0377866C LDRB W8, [X19 + 0xF40]
	0x03778670 UBFM X25, X1, 0x20, 0x3F
	0x03778674 STP X3, X0, [X31 + 0x8]
	0x03778678 STR X2, [X31]
	0x0377867C TBNZ X8, 0x0, 0x37786A0
	0x03778680 ADRP X0, 0x97D000
	0x03778684 LDR X0, [X0 + 0x170]
	0x03778688 BL 0x1C16CF4
	0x0377868C ADRP X0, 0x97D000
	0x03778690 LDR X0, [X0 + 0xC48]
	0x03778694 BL 0x1C16CF4
	0x03778698 MOVZ W8, 0x1
	0x0377869C STRB W8, [X19 + 0xF40]
	0x037786A0 ADD X0, X31, 0x0
	0x037786A4 MOV X1, X31
	0x037786A8 BL 0x375F788
	0x037786AC MOV W19, W0
	0x037786B0 SUBS W26, W25, 0x1
	0x037786B4 MOV W21, W31
	0x037786B8 B.LT 0x3778870
	0x037786BC CMP W19, 0x1
	0x037786C0 MOV W20, W21
	0x037786C4 B.LT 0x3778874
	0x037786C8 ADRP X27, 0x97D000
	0x037786CC ADRP X28, 0x97D000
	0x037786D0 LDR X22, [X31 + 0x8]
	0x037786D4 LDR X27, [X27 + 0xC48]
	0x037786D8 LDR X28, [X28 + 0x170]
	0x037786DC MOV W20, W31
	0x037786E0 MOV W21, W31
	0x037786E4 ADD X0, X31, 0x10
	0x037786E8 MOV W1, W21
	0x037786EC MOV X2, X31
	0x037786F0 BL 0x3768CD4
	0x037786F4 AND W8, W0, 0xFFFF
	0x037786F8 CMP W8, 0x5C
	0x037786FC B.NE 0x3778728
	0x03778700 ADD W24, W21, 0x1
	0x03778704 CMP W24, W25
	0x03778708 B.GE 0x37787E4
	0x0377870C ADD X0, X31, 0x10
	0x03778710 MOV W1, W24
	0x03778714 MOV X2, X31
	0x03778718 BL 0x3768CD4
	0x0377871C MOV W23, W0
	0x03778720 MOV W21, W24
	0x03778724 B 0x377872C
	0x03778728 MOV W23, W0
	0x0377872C AND W8, W23, 0xFFFF
	0x03778730 CMP W8, 0x2A
	0x03778734 B.NE 0x37787E8
	0x03778738 CMP W21, W26
	0x0377873C B.EQ 0x37788A8
	0x03778740 ADD W21, W21, 0x1
	0x03778744 ADD X0, X31, 0x10
	0x03778748 MOV W1, W21
	0x0377874C MOV X2, X31
	0x03778750 BL 0x3768CD4
	0x03778754 LDR X8, [X27]
	0x03778758 MOV W23, W0
	0x0377875C LDR W9, [X8 + 0xE0]
	0x03778760 CBNZ W9, 0x377876C
	0x03778764 MOV X0, X8
	0x03778768 BL 0x1C16DFC
	0x0377876C MOV X0, X31
	0x03778770 BL 0x3338524
	0x03778774 LDR X8, [X28]
	0x03778778 MOV X24, X0
	0x0377877C LDR W9, [X8 + 0xE0]
	0x03778780 CBNZ W9, 0x377878C
	0x03778784 MOV X0, X8
	0x03778788 BL 0x1C16DFC
	0x0377878C MOV W0, W23
	0x03778790 MOV X1, X24
	0x03778794 MOV X2, X31
	0x03778798 BL 0x331ADB0
	0x0377879C CMP W20, W19
	0x037787A0 B.GE 0x37787D8
	0x037787A4 MOV W23, W0
	0x037787A8 CBZ X22, 0x37788B0
	0x037787AC MOV X0, X22
	0x037787B0 MOV W1, W20
	0x037787B4 MOV X2, X31
	0x037787B8 BL 0x3222A1C
	0x037787BC AND W8, W0, 0xFFFF
	0x037787C0 CMP W8, W23, UXTH
	0x037787C4 B.EQ 0x37787D8
	0x037787C8 ADD W20, W20, 0x1
	0x037787CC CMP W19, W20
	0x037787D0 B.NE 0x37787AC
	0x037787D4 B 0x3778868
	0x037787D8 CMP W20, W19
	0x037787DC B.NE 0x377884C
	0x037787E0 B 0x3778868
	0x037787E4 MOVZ W23, 0x5C
	0x037787E8 LDR X0, [X27]
	0x037787EC LDR W8, [X0 + 0xE0]
	0x037787F0 CBNZ W8, 0x37787F8
	0x037787F4 BL 0x1C16DFC
	0x037787F8 MOV X0, X31
	0x037787FC BL 0x3338524
	0x03778800 LDR X8, [X28]
	0x03778804 MOV X24, X0
	0x03778808 LDR W9, [X8 + 0xE0]
	0x0377880C CBNZ W9, 0x3778818
	0x03778810 MOV X0, X8
	0x03778814 BL 0x1C16DFC
	0x03778818 MOV W0, W23
	0x0377881C MOV X1, X24
	0x03778820 MOV X2, X31
	0x03778824 BL 0x331ADB0
	0x03778828 CBZ X22, 0x37788B0
	0x0377882C MOV W23, W0
	0x03778830 MOV X0, X22
	0x03778834 MOV W1, W20
	0x03778838 MOV X2, X31
	0x0377883C BL 0x3222A1C
	0x03778840 AND W8, W23, 0xFFFF
	0x03778844 CMP W8, W0, UXTH
	0x03778848 B.NE 0x3778868
	0x0377884C ADD W21, W21, 0x1
	0x03778850 CMP W21, W25
	0x03778854 ADD W20, W20, 0x1
	0x03778858 B.GE 0x3778874
	0x0377885C CMP W20, W19
	0x03778860 B.LT 0x37786E4
	0x03778864 B 0x3778874
	0x03778868 MOV W0, W31
	0x0377886C B 0x3778888
	0x03778870 MOV W20, W21
	0x03778874 CMP W20, W19
	0x03778878 CSET W8, EQ
	0x0377887C CMP W21, W25
	0x03778880 CSET W9, EQ
	0x03778884 AND W0, W9, W8, 0x0
	0x03778888 LDP X20, X19, [X31 + 0x70]
	0x0377888C LDP X22, X21, [X31 + 0x60]
	0x03778890 LDP X24, X23, [X31 + 0x50]
	0x03778894 LDP X26, X25, [X31 + 0x40]
	0x03778898 LDP X28, X27, [X31 + 0x30]
	0x0377889C LDR X30, [X31 + 0x20]
	0x037788A0 ADD X31, X31, 0x80
	0x037788A4 RET
	0x037788A8 MOVZ W0, 0x1
	0x037788AC B 0x3778888
	0x037788B0 BL 0x1C16F20
	0x037788B4 SUB X31, X31, 0x60
	0x037788B8 STR X30, [X31 + 0x20]
	0x037788BC STP X24, X23, [X31 + 0x30]
	0x037788C0 STP X22, X21, [X31 + 0x40]
	0x037788C4 STP X20, X19, [X31 + 0x50]
	0x037788C8 ADRP X22, 0xC68000
	0x037788CC ADRP X24, 0x9A3000
	0x037788D0 ADRP X23, 0x9CD000
	0x037788D4 LDRB W8, [X22 + 0xF42]
	0x037788D8 LDR X24, [X24 + 0xE50]
	0x037788DC LDR X23, [X23 + 0xE08]
	0x037788E0 MOV W19, W2
	0x037788E4 MOV X20, X1
	0x037788E8 MOV X21, X0
	0x037788EC TBNZ X8, 0x0, 0x3778928
	0x037788F0 ADRP X0, 0x9A3000
	0x037788F4 LDR X0, [X0 + 0xE58]
	0x037788F8 BL 0x1C16CF4
	0x037788FC ADRP X0, 0x9CE000
	0x03778900 LDR X0, [X0 + 0xE38]
	0x03778904 BL 0x1C16CF4
	0x03778908 ADRP X0, 0x9A3000
	0x0377890C LDR X0, [X0 + 0xE50]
	0x03778910 BL 0x1C16CF4
	0x03778914 ADRP X0, 0x9CD000
	0x03778918 LDR X0, [X0 + 0xE08]
	0x0377891C BL 0x1C16CF4
	0x03778920 MOVZ W8, 0x1
	0x03778924 STRB W8, [X22 + 0xF42]
	0x03778928 ADRP X22, 0x9A3000
	0x0377892C LDR X22, [X22 + 0xE58]
	0x03778930 LDR X3, [X24]
	0x03778934 MOVI V0.2D, 0x0
	0x03778938 ADD X0, X31, 0x0
	0x0377893C MOVZ W1, 0x2
	0x03778940 MOV W2, W31
	0x03778944 STP V0, V0, [X31]
	0x03778948 BL 0x2DFA684
	0x0377894C LDR X4, [X23]
	0x03778950 ADD X3, X31, 0x0
	0x03778954 MOV X0, X21
	0x03778958 MOV X1, X20
	0x0377895C MOV W2, W19
	0x03778960 BL 0x21FFC70
	0x03778964 ADRP X8, 0x9CE000
	0x03778968 LDR X8, [X8 + 0xE38]
	0x0377896C LDR X2, [X8]
	0x03778970 ADD X0, X31, 0x0
	0x03778974 MOV W1, W31
	0x03778978 BL 0x2DFB7F4
	0x0377897C LDR X1, [X22]
	0x03778980 MOV X19, X0
	0x03778984 ADD X0, X31, 0x0
	0x03778988 BL 0x2DFB98C
	0x0377898C MOV X0, X19
	0x03778990 LDP X20, X19, [X31 + 0x50]
	0x03778994 LDP X22, X21, [X31 + 0x40]
	0x03778998 LDP X24, X23, [X31 + 0x30]
	0x0377899C LDR X30, [X31 + 0x20]
	0x037789A0 ADD X31, X31, 0x60
	0x037789A4 RET
	0x037789A8 B 0x37789AC
	0x037789AC MOV X20, X0
	0x037789B0 CMP W1, 0x1
	0x037789B4 B.NE 0x37789E0
	0x037789B8 MOV X0, X20
	0x037789BC BL 0x3EB1AD0
	0x037789C0 LDR X19, [X0]
	0x037789C4 BL 0x3EB1AE0
	0x037789C8 LDR X1, [X22]
	0x037789CC ADD X0, X31, 0x0
	0x037789D0 BL 0x2DFB98C
	0x037789D4 CBZ X19, 0x377898C
	0x037789D8 MOV X0, X19
	0x037789DC BL 0x1C16F18
	0x037789E0 MOV X19, X31
	0x037789E4 B 0x37789EC
	0x037789E8 MOV X20, X0
	0x037789EC LDR X1, [X22]
	0x037789F0 ADD X0, X31, 0x0
	0x037789F4 BL 0x2DFB98C
	0x037789F8 CBNZ X19, 0x3778A04
	0x037789FC MOV X0, X20
	0x03778A00 BL 0x1D2C690
	0x03778A04 MOV X0, X19
	0x03778A08 BL 0x1C16F18
	0x03778A0C BL 0x1990590
	0x03778A10 STR X30, [X31 - 0x40]!
	0x03778A14 STP X24, X23, [X31 + 0x10]
	0x03778A18 STP X22, X21, [X31 + 0x20]
	0x03778A1C STP X20, X19, [X31 + 0x30]
	0x03778A20 ADRP X23, 0xC68000
	0x03778A24 ADRP X24, 0x9CD000
	0x03778A28 LDRB W8, [X23 + 0xF43]
	0x03778A2C LDR X24, [X24 + 0xE08]
	0x03778A30 MOV W20, W3
	0x03778A34 MOV X19, X2
	0x03778A38 MOV X21, X1
	0x03778A3C MOV X22, X0
	0x03778A40 TBNZ X8, 0x0, 0x3778A58
	0x03778A44 ADRP X0, 0x9CD000
	0x03778A48 LDR X0, [X0 + 0xE08]
	0x03778A4C BL 0x1C16CF4
	0x03778A50 MOVZ W8, 0x1
	0x03778A54 STRB W8, [X23 + 0xF43]
	0x03778A58 LDR X4, [X24]
	0x03778A5C MOV X0, X22
	0x03778A60 MOV X1, X21
	0x03778A64 MOV W2, W20
	0x03778A68 MOV X3, X19
	0x03778A6C LDP X20, X19, [X31 + 0x30]
	0x03778A70 LDP X22, X21, [X31 + 0x20]
	0x03778A74 LDP X24, X23, [X31 + 0x10]
	0x03778A78 LDR X30, [X31], #0x40
	0x03778A7C B 0x21FFC70
	0x03778A80 STP X30, X21, [X31 - 0x20]!
	0x03778A84 STP X20, X19, [X31 + 0x10]
	0x03778A88 CBZ X1, 0x3778AE4
	0x03778A8C MOV X20, X1
	0x03778A90 LDR X1, [X1 + 0x80]
	0x03778A94 MOV W19, W2
	0x03778A98 MOV X21, X0
	0x03778A9C CBZ X1, 0x3778AB0
	0x03778AA0 AND W2, W19, 0x1
	0x03778AA4 MOV X0, X21
	0x03778AA8 BL 0x3778A80
	0x03778AAC TBZ X0, 0x0, 0x3778AD0
	0x03778AB0 MOV X0, X21
	0x03778AB4 BL 0x3777230
	0x03778AB8 TBZ X0, 0x0, 0x3778AD4
	0x03778ABC MOV X1, X20
	0x03778AC0 LDP X20, X19, [X31 + 0x10]
	0x03778AC4 ADD X0, X21, 0x18
	0x03778AC8 LDP X30, X21, [X31], #0x20
	0x03778ACC B 0x3778FF4
	0x03778AD0 MOV W19, W31
	0x03778AD4 AND W0, W19, 0x1
	0x03778AD8 LDP X20, X19, [X31 + 0x10]
	0x03778ADC LDP X30, X21, [X31], #0x20
	0x03778AE0 RET
	0x03778AE4 BL 0x1C16F20
	0x03778AE8 SUB X31, X31, 0xA0
	0x03778AEC STP X29, X30, [X31 + 0x40]
	0x03778AF0 STP X28, X27, [X31 + 0x50]
	0x03778AF4 STP X26, X25, [X31 + 0x60]
	0x03778AF8 STP X24, X23, [X31 + 0x70]
	0x03778AFC STP X22, X21, [X31 + 0x80]
	0x03778B00 STP X20, X19, [X31 + 0x90]
	0x03778B04 ADRP X22, 0xC68000
	0x03778B08 LDRB W8, [X22 + 0xF45]
	0x03778B0C MOV W21, W2
	0x03778B10 MOV X20, X1
	0x03778B14 MOV X19, X0
	0x03778B18 TBNZ X8, 0x0, 0x3778B6C
	0x03778B1C ADRP X0, 0x97B000
	0x03778B20 LDR X0, [X0 + 0xE00]
	0x03778B24 BL 0x1C16CF4
	0x03778B28 ADRP X0, 0x9CE000
	0x03778B2C LDR X0, [X0 + 0xE40]
	0x03778B30 BL 0x1C16CF4
	0x03778B34 ADRP X0, 0x97B000
	0x03778B38 LDR X0, [X0 + 0xE18]
	0x03778B3C BL 0x1C16CF4
	0x03778B40 ADRP X0, 0x9CE000
	0x03778B44 LDR X0, [X0 + 0xE48]
	0x03778B48 BL 0x1C16CF4
	0x03778B4C ADRP X0, 0x9A3000
	0x03778B50 LDR X0, [X0 + 0xDC8]
	0x03778B54 BL 0x1C16CF4
	0x03778B58 ADRP X0, 0x9A3000
	0x03778B5C LDR X0, [X0 + 0xDD0]
	0x03778B60 BL 0x1C16CF4
	0x03778B64 MOVZ W8, 0x1
	0x03778B68 STRB W8, [X22 + 0xF45]
	0x03778B6C ADRP X27, 0x9A3000
	0x03778B70 LDR X27, [X27 + 0xDD0]
	0x03778B74 ADD X0, X19, 0x30
	0x03778B78 MOV X1, X31
	0x03778B7C STP X31, X31, [X31 + 0x30]
	0x03778B80 STP X31, X31, [X31 + 0x20]
	0x03778B84 STP X31, X31, [X31 + 0x10]
	0x03778B88 BL 0x3768760
	0x03778B8C TBZ X0, 0x0, 0x3778B98
	0x03778B90 MOV W25, W31
	0x03778B94 B 0x3778BAC
	0x03778B98 LDP X0, X1, [X19 + 0x30]
	0x03778B9C LDP X2, X3, [X20]
	0x03778BA0 BL 0x377864C
	0x03778BA4 TBZ X0, 0x0, 0x3778D6C
	0x03778BA8 MOVZ W25, 0x1
	0x03778BAC ADRP X8, 0x9CE000
	0x03778BB0 LDR X8, [X8 + 0xE48]
	0x03778BB4 ADRP X28, 0x97B000
	0x03778BB8 LDR X28, [X28 + 0xE18]
	0x03778BBC ADRP X29, 0x9CE000
	0x03778BC0 LDR X1, [X8]
	0x03778BC4 ADRP X24, 0x97B000
	0x03778BC8 LDR X29, [X29 + 0xE40]
	0x03778BCC LDR X24, [X24 + 0xE00]
	0x03778BD0 ADD X0, X19, 0x10
	0x03778BD4 BL 0x2DEE724
	0x03778BD8 MOV X19, X0
	0x03778BDC MOV W26, W31
	0x03778BE0 CBZ X19, 0x3778E2C
	0x03778BE4 LDR X8, [X19]
	0x03778BE8 LDR X1, [X28]
	0x03778BEC LDRH W9, [X8 + 0x12E]
	0x03778BF0 CBZ X9, 0x3778C14
	0x03778BF4 LDR X10, [X8 + 0xB0]
	0x03778BF8 ADD X10, X10, 0x8
	0x03778BFC LDUR X11, [X10 - 0x8]
	0x03778C00 CMP X11, X1
	0x03778C04 B.EQ 0x3778C24
	0x03778C08 SUBS X9, X9, 0x1
	0x03778C0C ADD X10, X10, 0x10
	0x03778C10 B.NE 0x3778BFC
	0x03778C14 MOV X0, X19
	0x03778C18 MOV W2, W31
	0x03778C1C BL 0x1C5C788
	0x03778C20 B 0x3778C30
	0x03778C24 LDRSW X9, [X10]
	0x03778C28 ADD X8, X8, X9, 0x4, LSL
	0x03778C2C ADD X0, X8, 0x138
	0x03778C30 LDP X8, X1, [X0]
	0x03778C34 MOV X0, X19
	0x03778C38 BLR X8
	0x03778C3C TBZ X0, 0x0, 0x3778D20

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 528
	014 Move [X31+20], W5
	015 Move [X31+24], X2
	016 Move X21, 0xC69000
	017 Move X24, 0x97E000
	018 Move W8, [X21+3915]
	019 Move X24, [X24+632]
	020 Move X23, X4
	021 Move X20, X3
	022 Move X25, X1
	023 Move X19, X0
	024 Add X22, X31, 496
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {76}
	029 Move X0, 0x9CF000
	030 Move X0, [X0+3496]
	031 Call 0x1C17CF4
	032 Move X0, 0x9A4000
	033 Move X0, [X0+3520]
	034 Call 0x1C17CF4
	035 Move X0, 0x97C000
	036 Move X0, [X0+1880]
	037 Call 0x1C17CF4
	038 Move X0, 0x9A7000
	039 Move X0, [X0+1296]
	040 Call 0x1C17CF4
	041 Move X0, 0x9CF000
	042 Move X0, [X0+3504]
	043 Call 0x1C17CF4
	044 Move X0, 0x9CF000
	045 Move X0, [X0+3512]
	046 Call 0x1C17CF4
	047 Move X0, 0x97E000
	048 Move X0, [X0+632]
	049 Call 0x1C17CF4
	050 Move X0, 0x9CF000
	051 Move X0, [X0+3520]
	052 Call 0x1C17CF4
	053 Move X0, 0x9A4000
	054 Move X0, [X0+2712]
	055 Call 0x1C17CF4
	056 Move X0, 0x97C000
	057 Move X0, [X0+3544]
	058 Call 0x1C17CF4
	059 Move X0, 0x9CF000
	060 Move X0, [X0+3528]
	061 Call 0x1C17CF4
	062 Move X0, 0x9CF000
	063 Move X0, [X0+3536]
	064 Call 0x1C17CF4
	065 Move X0, 0x9CF000
	066 Move X0, [X0+3544]
	067 Call 0x1C17CF4
	068 Move X0, 0x9CF000
	069 Move X0, [X0+3552]
	070 Call 0x1C17CF4
	071 Move X0, 0x987000
	072 Move X0, [X0+3288]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X21+3915], W8
	076 Add X0, X31, 280
	077 Move W2, 216
	078 Move W1, W31
	079 Move [X22+16], X31
	080 Move [X22+24], X31
	081 Move [X22], X31
	082 Move [X22+8], X31
	083 Call 0x3EB2B10
	084 Move [X31+276], W31
	085 Move [X20], X31
	086 Move [X23], X31
	087 Move X8, [X24]
	088 Move X0, X19
	089 Move X8, [X8+184]
	090 Move X21, [X8]
	091 Call ParsedPathComponent.get_isWildcard, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {103}
	096 Move X8, 0x9CF000
	097 Move X8, [X8+3528]
	098 Move X0, X21
	099 Move X2, X31
	100 Move X1, [X8]
	101 Call String.Concat, X0, X1
	102 Move X21, X0
	103 Move X27, X19
	104 Add X27, X27, 16
	105 Move W8, [X27]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X8, [X24]
	108 Move [X31+32], X20
	109 Move [X31+40], X25
	110 Move X20, X23
	111 Move X23, 0x9CF000
	112 Move X8, [X8+184]
	113 Move X25, 0x9CF000
	114 Move W28, W31
	115 Move X26, [X8]
	116 Move X23, [X23+3496]
	117 Move X25, [X25+3520]
	118 Move X2, [X23]
	119 Move X0, X27
	120 Move W1, W28
	121 Call InlinedArray`1<Substring>.get_Item, X0, X1
	122 Move [X22+16], X0
	123 Move [X22+24], X1
	124 Add X0, X31, 512
	125 Move X1, X31
	126 Call Substring.get_isEmpty, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {154}
	131 Move X8, [X24]
	132 Move X0, X26
	133 Move X2, X31
	134 Move X8, [X8+184]
	135 Move X1, [X8]
	136 Call String.op_Inequality, X0, X1
	137 Move X2, [X23]
	138 Move W29, W0
	139 Move X0, X27
	140 Move W1, W28
	141 Call InlinedArray`1<Substring>.get_Item, X0, X1
	142 Call ParsedPathComponent.ToHumanReadableString, X0
	143 Move X2, X0
	144 Move TEMP, X29
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {153}
	148 Move X1, [X25]
	149 Move X0, X26
	150 Move X3, X31
	151 Call String.Concat, X0, X1, X2
	152 Move X26, X0
	153 Move X26, X2
	154 Move W8, [X27]
	155 Add W28, W28, 1
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X8, [X24]
	158 Move X0, X26
	159 Move X2, X31
	160 Move X8, [X8+184]
	161 Move X1, [X8]
	162 Call String.op_Inequality, X0, X1
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {186}
	167 Move X8, [X24]
	168 Move X0, X21
	169 Move X2, X31
	170 Move X8, [X8+184]
	171 Move X1, [X8]
	172 Call String.op_Inequality, X0, X1
	173 Move X25, [X31+40]
	174 Move X23, X20
	175 Move TEMP, X0
	176 And TEMP, TEMP, 1
	177 Compare TEMP, 1
	178 JumpIfNotEqual {189}
	179 Move X8, 0x97C000
	180 Move X8, [X8+3544]
	181 Move X0, X21
	182 Move X2, X26
	183 Move X3, X31
	184 Move X1, [X8]
	185 Call String.Concat, X0, X1, X2
	186 Move X23, X20
	187 Move X20, [X31+32]
	188 Move X25, [X31+40]
	189 Move X0, X21
	190 Move X1, X26
	191 Move X2, X31
	192 Call String.Concat, X0, X1
	193 Move X20, [X31+32]
	194 Move X21, X0
	195 Move X0, X19
	196 Move X1, X31
	197 Call Substring.get_isEmpty, X0
	198 Move TEMP, X0
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfEqual {253}
	202 Move X0, X19
	203 Move X1, X31
	204 Call Substring.ToString, X0
	205 Move [X20], X0
	206 Move X8, 0x9A4000
	207 Move X8, [X8+3520]
	208 Move X0, [X8]
	209 Move W8, [X0+224]
	210 Compare W8, 0
	211 JumpIfNotEqual {213}
	212 Call 0x1C17DFC
	213 Move X0, X31
	214 Call InputControlLayout.get_cache
	215 Move X1, [X20]
	216 Move W2, W31
	217 Move X3, X31
	218 Call Cache.FindOrLoadLayout, X0, X1, X2
	219 Compare X0, 0
	220 JumpIfEqual {229}
	221 Move X26, X0
	222 Move X0, [X0+152]
	223 Move X1, X31
	224 Call String.IsNullOrEmpty, X0
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {233}
	229 Move X0, [X19]
	230 Move X1, [X19+8]
	231 Call ParsedPathComponent.ToHumanReadableString, X0
	232 Move X26, X0
	233 Move X26, [X26+152]
	234 Move X0, X21
	235 Move X1, X31
	236 Call String.IsNullOrEmpty, X0
	237 Move TEMP, X0
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfNotEqual {245}
	241 Move X0, X21
	242 Move X1, X26
	243 Move X2, X31
	244 Call String.Concat, X0, X1
	245 Move X8, 0x97C000
	246 Move X8, [X8+3544]
	247 Move X0, X21
	248 Move X2, X26
	249 Move X3, X31
	250 Move X1, [X8]
	251 Call String.Concat, X0, X1, X2
	252 Move X21, X0
	253 Add X26, X19, 48
	254 Move X0, X26
	255 Move X1, X31
	256 Call Substring.get_isEmpty, X0
	257 Move TEMP, X0
	258 And TEMP, TEMP, 1
	259 Compare TEMP, 1
	260 JumpIfEqual {519}
	261 Move X0, X19
	262 Call ParsedPathComponent.get_isWildcard, X0
	263 Move TEMP, X0
	264 And TEMP, TEMP, 1
	265 Compare TEMP, 1
	266 JumpIfEqual {519}
	267 Move X0, X25
	268 Move X1, X31
	269 Call String.IsNullOrEmpty, X0
	270 Move TEMP, X0
	271 And TEMP, TEMP, 1
	272 Compare TEMP, 1
	273 JumpIfEqual {496}
	274 Move X8, 0x9A4000
	275 Move X8, [X8+3520]
	276 Move X0, [X8]
	277 Move W8, [X0+224]
	278 Compare W8, 0
	279 JumpIfNotEqual {281}
	280 Call 0x1C17DFC
	281 Move X0, X31
	282 Call InputControlLayout.get_cache
	283 Move X27, X0
	284 Add X0, X31, 56
	285 Move X1, X25
	286 Move X2, X31
	287 Move [X31+56], X31
	288 Move [X31+64], X31
	289 Call InternedString..ctor, X0, X1
	290 Move X0, [X31+56]
	291 Move X1, [X31+64]
	292 Move X2, X31
	293 Call InternedString.op_Implicit, X0
	294 Move X1, X0
	295 Move X0, X27
	296 Move W2, W31
	297 Move X3, X31
	298 Call Cache.FindOrLoadLayout, X0, X1, X2
	299 Compare X0, 0
	300 JumpIfEqual {496}
	301 Move X25, X0
	302 Move X0, X26
	303 Move X1, X31
	304 Call Substring.ToString, X0
	305 Move X1, X0
	306 Add X0, X31, 496
	307 Move X2, X31
	308 Call InternedString..ctor, X0, X1
	309 Move X0, [X22]
	310 Move X1, [X22+8]
	311 Move X2, X31
	312 Call InternedString.op_Implicit, X0
	313 Move X1, X0
	314 Add X8, X31, 56
	315 Add X2, X31, 276
	316 Move X0, X25
	317 Move X3, X31
	318 Call InputControlLayout.FindControlIncludingArrayElements, X0, X1, X2
	319 Add X0, X31, 280
	320 Add X1, X31, 56
	321 Move W2, 216
	322 Call 0x3EB2AC0
	323 Move W8, [X31+280]
	324 Compare W8, 0
	325 JumpIfEqual {496}
	326 Move X22, [X31+24]
	327 Move X1, X31
	328 Move X0, X22
	329 Call String.IsNullOrEmpty, X0
	330 Move W8, [X31+276]
	331 Add W31, W8, 1
	332 Move X8, 0x9CF000
	333 Move X8, [X8+3512]
	334 Move TEMP, X0
	335 And TEMP, TEMP, 1
	336 Compare TEMP, 1
	337 Invalid "Jump target not found in method."
	338 Move X1, [X8]
	339 Add X8, X31, 56
	340 Add X0, X31, 280
	341 Call Nullable`1<ControlItem>.get_Value, X0
	342 Move X10, 0x9A7000
	343 Move X8, [X31+56]
	344 Move X9, [X31+64]
	345 Move X10, [X10+1296]
	346 Add X1, X31, 56
	347 Move [X31+56], X8
	348 Move [X31+64], X9
	349 Move X0, [X10]
	350 Call 0x1C17E04
	351 Move X9, 0x97C000
	352 Move W8, [X31+276]
	353 Move X9, [X9+1880]
	354 Move X24, X0
	355 Add X1, X31, 52
	356 Move [X31+52], W8
	357 Move X0, [X9]
	358 Call 0x1C17E04
	359 Move X8, 0x9A4000
	360 Move X8, [X8+2712]
	361 Move X2, X0
	362 Move X1, X24
	363 Move X1, [X8]
	364 Add X8, X31, 56
	365 Add X0, X31, 280
	366 Call Nullable`1<ControlItem>.get_Value, X0
	367 Move X10, 0x9A7000
	368 Move X8, [X31+56]
	369 Move X9, [X31+64]
	370 Move X10, [X10+1296]
	371 Add X1, X31, 56
	372 Move [X31+56], X8
	373 Move [X31+64], X9
	374 Move X0, [X10]
	375 Call 0x1C17E04
	376 Move X9, 0x97C000
	377 Move W8, [X31+276]
	378 Move X9, [X9+1880]
	379 Move X25, X0
	380 Add X1, X31, 52
	381 Move [X31+52], W8
	382 Move X0, [X9]
	383 Call 0x1C17E04
	384 Move X8, 0x9CF000
	385 Move X8, [X8+3544]
	386 Move X3, X0
	387 Move X1, X22
	388 Move X2, X25
	389 Move X8, [X8]
	390 Move X4, X31
	391 Move X0, X8
	392 Call String.Format, X0, X1, X2, X3
	393 Move X1, [X8]
	394 Add X8, X31, 56
	395 Add X0, X31, 280
	396 Call Nullable`1<ControlItem>.get_Value, X0
	397 Move X0, [X31+56]
	398 Move X1, [X31+64]
	399 Move X2, X31
	400 Call InternedString.op_Implicit, X0
	401 Move X1, [X8]
	402 Add X8, X31, 56
	403 Add X0, X31, 280
	404 Call Nullable`1<ControlItem>.get_Value, X0
	405 Move X10, 0x9A7000
	406 Move X8, [X31+56]
	407 Move X9, [X31+64]
	408 Move X10, [X10+1296]
	409 Add X1, X31, 56
	410 Move [X31+56], X8
	411 Move [X31+64], X9
	412 Move X0, [X10]
	413 Call 0x1C17E04
	414 Move X8, 0x9CF000
	415 Move X8, [X8+3536]
	416 Move X2, X0
	417 Move X1, X22
	418 Move X8, [X8]
	419 Move X0, X8
	420 Move X3, X31
	421 Call String.Format, X0, X1, X2
	422 Move W8, [X31+20]
	423 Move [X23], X0
	424 Move TEMP, X8
	425 And TEMP, TEMP, 4
	426 Compare TEMP, 4
	427 JumpIfEqual {429}
	428 Move X23, X31
	429 Move X8, 0x9CF000
	430 Move X8, [X8+3512]
	431 Add X0, X31, 280
	432 Move X1, [X8]
	433 Add X8, X31, 56
	434 Call Nullable`1<ControlItem>.get_Value, X0
	435 Move X23, [X31+120]
	436 Move X0, X23
	437 Move X1, X31
	438 Call String.IsNullOrEmpty, X0
	439 Move TEMP, X0
	440 And TEMP, TEMP, 1
	441 Compare TEMP, 1
	442 JumpIfNotEqual {450}
	443 Move X8, 0x9CF000
	444 Move X8, [X8+3512]
	445 Add X0, X31, 280
	446 Move X1, [X8]
	447 Add X8, X31, 56
	448 Call Nullable`1<ControlItem>.get_Value, X0
	449 Move X23, [X31+112]
	450 Move X0, X23
	451 Move X1, X31
	452 Call String.IsNullOrEmpty, X0
	453 Move X22, X31
	454 Move TEMP, X0
	455 And TEMP, TEMP, 1
	456 Compare TEMP, 1
	457 JumpIfEqual {476}
	458 Move W8, [X31+276]
	459 Add W31, W8, 1
	460 Move X9, 0x97C000
	461 Move X9, [X9+1880]
	462 Add X1, X31, 56
	463 Move [X31+56], W8
	464 Move X0, [X9]
	465 Call 0x1C17E04
	466 Move X8, 0x9CF000
	467 Move X8, [X8+3552]
	468 Move X2, X0
	469 Move X1, X23
	470 Move X3, X31
	471 Move X8, [X8]
	472 Move X0, X8
	473 Call String.Format, X0, X1, X2
	474 Move X22, X0
	475 Move X22, X23
	476 Move X0, [X20]
	477 Move X1, X31
	478 Call String.IsNullOrEmpty, X0
	479 Move TEMP, X0
	480 And TEMP, TEMP, 1
	481 Compare TEMP, 1
	482 JumpIfNotEqual {494}
	483 Move X8, 0x9CF000
	484 Move X8, [X8+3512]
	485 Add X0, X31, 280
	486 Move X1, [X8]
	487 Add X8, X31, 56
	488 Call Nullable`1<ControlItem>.get_Value, X0
	489 Move X0, [X31+72]
	490 Move X1, [X31+80]
	491 Move X2, X31
	492 Call InternedString.op_Implicit, X0
	493 Move [X20], X0
	494 Compare X22, 0
	495 JumpIfNotEqual {500}
	496 Move X0, [X19+48]
	497 Move X1, [X19+56]
	498 Call ParsedPathComponent.ToHumanReadableString, X0
	499 Move X22, X0
	500 Move X0, X21
	501 Move X1, X31
	502 Call String.IsNullOrEmpty, X0
	503 Move TEMP, X0
	504 And TEMP, TEMP, 1
	505 Compare TEMP, 1
	506 JumpIfNotEqual {511}
	507 Move X0, X21
	508 Move X1, X22
	509 Move X2, X31
	510 Call String.Concat, X0, X1
	511 Move X8, 0x97C000
	512 Move X8, [X8+3544]
	513 Move X0, X21
	514 Move X2, X22
	515 Move X3, X31
	516 Move X1, [X8]
	517 Call String.Concat, X0, X1, X2
	518 Move X21, X0
	519 Add X0, X19, 64
	520 Move X1, X31
	521 Call Substring.get_isEmpty, X0
	522 Move TEMP, X0
	523 And TEMP, TEMP, 1
	524 Compare TEMP, 1
	525 JumpIfEqual {556}
	526 Move X0, [X19+64]
	527 Move X1, [X19+72]
	528 Call ParsedPathComponent.ToHumanReadableString, X0
	529 Move X8, 0x987000
	530 Move X8, [X8+3288]
	531 Move X1, X0
	532 Move X3, X31
	533 Move X2, [X8]
	534 Move X0, X2
	535 Call String.Concat, X0, X1, X2
	536 Move X19, X0
	537 Move X0, X21
	538 Move X1, X31
	539 Call String.IsNullOrEmpty, X0
	540 Move TEMP, X0
	541 And TEMP, TEMP, 1
	542 Compare TEMP, 1
	543 JumpIfNotEqual {548}
	544 Move X0, X21
	545 Move X1, X19
	546 Move X2, X31
	547 Call String.Concat, X0, X1
	548 Move X8, 0x97C000
	549 Move X8, [X8+3544]
	550 Move X0, X21
	551 Move X2, X19
	552 Move X3, X31
	553 Move X1, [X8]
	554 Call String.Concat, X0, X1, X2
	555 Move X21, X0
	556 Move X0, X21
	557 Add X31, X31, 528
	558 Move X20, [X31+80]
	559 Move X19, [X31+88]
	560 Move X22, [X31+64]
	561 Move X21, [X31+72]
	562 Move X24, [X31+48]
	563 Move X23, [X31+56]
	564 Move X26, [X31+32]
	565 Move X25, [X31+40]
	566 Move X28, [X31+16]
	567 Move X27, [X31+24]
	568 Move X29, [X31+96]
	569 Move X30, [X31+104]
	570 Return X0

Method: System.String ToHumanReadableString(UnityEngine.InputSystem.Utilities.Substring substring)

Disassembly:
	0x0377A848 STP X30, X19, [X31 - 0x10]!
	0x0377A84C MOV X19, X0
	0x0377A850 BL 0x377295C
	0x0377A854 MOVN W8, 0x0
	0x0377A858 STR X31, [X19 + 0xE0]
	0x0377A85C STR W8, [X19 + 0xE8]
	0x0377A860 LDP X30, X19, [X31], #0x10
	0x0377A864 RET
	0x0377A868 STP X30, X19, [X31 - 0x10]!
	0x0377A86C MOV X19, X0
	0x0377A870 BL 0x377295C
	0x0377A874 MOVN W8, 0x0
	0x0377A878 STR X31, [X19 + 0xE0]
	0x0377A87C STR W8, [X19 + 0xE8]
	0x0377A880 LDP X30, X19, [X31], #0x10
	0x0377A884 RET
	0x0377A888 LDR X9, [X0 + 0x120]
	0x0377A88C LDP V1, V0, [X0 + 0x100]
	0x0377A890 LDR V2, [X0 + 0xF]
	0x0377A894 STR X9, [X8 + 0x30]
	0x0377A898 STP V1, V0, [X8 + 0x10]
	0x0377A89C STR V2, [X8]
	0x0377A8A0 RET
	0x0377A8A4 LDRH W8, [X0 + 0xDC]
	0x0377A8A8 MOVZ W9, 0x120

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X1
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC67000
	007 Move [X31], X0
	008 Move X19, 0x9CD000
	009 Move W8, [X20+3916]
	010 Move X19, [X19+3720]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9CD000
	016 Move X0, [X0+3720]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3916], W8
	020 Add X0, X31, 0
	021 Move X1, X31
	022 Call Substring.ToString, X0
	023 Move X1, [X19]
	024 Move X3, X31
	025 Move X2, X1
	026 Call StringHelpers.Unescape, X0, X1, X2
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Add X31, X31, 48
	031 Return X0

Method: System.Boolean Matches(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x03779FF4 LDR X0, [X0 + 0x198]
	0x03779FF8 RET
	0x03779FFC STR X1, [X0 + 0x198]
	0x0377A000 RET
	0x0377A004 LDR X0, [X0 + 0x1A0]
	0x0377A008 RET
	0x0377A00C STR X1, [X0 + 0x1A0]
	0x0377A010 RET
	0x0377A014 LDR X0, [X0 + 0x1A8]
	0x0377A018 RET
	0x0377A01C STR X1, [X0 + 0x1A8]
	0x0377A020 RET
	0x0377A024 LDR X0, [X0 + 0x1B0]
	0x0377A028 RET
	0x0377A02C STR X1, [X0 + 0x1B0]
	0x0377A030 RET
	0x0377A034 LDR X0, [X0 + 0x1B8]
	0x0377A038 RET
	0x0377A03C STR X1, [X0 + 0x1B8]
	0x0377A040 RET
	0x0377A044 LDR X0, [X0 + 0x1C0]
	0x0377A048 RET
	0x0377A04C STR X1, [X0 + 0x1C0]
	0x0377A050 RET
	0x0377A054 LDR X0, [X0 + 0x1C8]
	0x0377A058 RET
	0x0377A05C STR X1, [X0 + 0x1C8]
	0x0377A060 RET
	0x0377A064 LDR X0, [X0 + 0x1D0]
	0x0377A068 RET
	0x0377A06C STR X1, [X0 + 0x1D0]
	0x0377A070 RET
	0x0377A074 LDR X0, [X0 + 0x1D8]
	0x0377A078 RET
	0x0377A07C STR X1, [X0 + 0x1D8]
	0x0377A080 RET
	0x0377A084 LDR X0, [X0 + 0x1E0]
	0x0377A088 RET
	0x0377A08C STR X1, [X0 + 0x1E0]
	0x0377A090 RET
	0x0377A094 LDR X0, [X0 + 0x180]
	0x0377A098 RET
	0x0377A09C LDR X0, [X0 + 0x188]
	0x0377A0A0 RET
	0x0377A0A4 LDR X0, [X0 + 0x170]
	0x0377A0A8 RET
	0x0377A0AC LDR X0, [X0 + 0x178]
	0x0377A0B0 RET
	0x0377A0B4 LDR X0, [X0 + 0x178]
	0x0377A0B8 RET
	0x0377A0BC LDR X0, [X0 + 0x170]
	0x0377A0C0 RET
	0x0377A0C4 LDR X0, [X0 + 0x188]
	0x0377A0C8 RET
	0x0377A0CC LDR X0, [X0 + 0x180]
	0x0377A0D0 RET
	0x0377A0D4 STP X30, X21, [X31 - 0x20]!
	0x0377A0D8 STP X20, X19, [X31 + 0x10]
	0x0377A0DC CMP W1, 0x21
	0x0377A0E0 B.HI 0x377A1B0
	0x0377A0E4 ADRP X9, 0xFFFFFFFFFD41D000
	0x0377A0E8 MOV W8, W1
	0x0377A0EC ADD X9, X9, 0x914
	0x0377A0F0 ADR X10, 0x10
	0x0377A0F4 LDRB W11, [X9, X8, LSL]
	0x0377A0F8 ADD X10, X10, X11, 0x2, LSL
	0x0377A0FC BR X10
	0x0377A100 LDR X8, [X0 + 0x1B0]
	0x0377A104 CBZ X8, 0x377A1AC
	0x0377A108 ADD X8, X8, 0x120
	0x0377A10C B 0x377A19C
	0x0377A110 LDR X8, [X0 + 0x1B0]
	0x0377A114 CBZ X8, 0x377A1AC
	0x0377A118 ADD X8, X8, 0x128
	0x0377A11C B 0x377A19C
	0x0377A120 LDR X8, [X0 + 0x1B0]
	0x0377A124 CBZ X8, 0x377A1AC
	0x0377A128 ADD X8, X8, 0x130
	0x0377A12C B 0x377A19C
	0x0377A130 LDR X8, [X0 + 0x1B0]
	0x0377A134 CBZ X8, 0x377A1AC
	0x0377A138 ADD X8, X8, 0x138
	0x0377A13C B 0x377A19C
	0x0377A140 ADD X8, X0, 0x178
	0x0377A144 B 0x377A19C
	0x0377A148 ADD X8, X0, 0x188
	0x0377A14C B 0x377A19C
	0x0377A150 ADD X8, X0, 0x180
	0x0377A154 B 0x377A19C
	0x0377A158 ADD X8, X0, 0x170
	0x0377A15C B 0x377A19C
	0x0377A160 ADD X8, X0, 0x190
	0x0377A164 B 0x377A19C
	0x0377A168 ADD X8, X0, 0x198
	0x0377A16C B 0x377A19C
	0x0377A170 ADD X8, X0, 0x1B8
	0x0377A174 B 0x377A19C
	0x0377A178 ADD X8, X0, 0x1C0
	0x0377A17C B 0x377A19C
	0x0377A180 ADD X8, X0, 0x1A0
	0x0377A184 B 0x377A19C
	0x0377A188 ADD X8, X0, 0x1A8
	0x0377A18C B 0x377A19C
	0x0377A190 ADD X8, X0, 0x1D8
	0x0377A194 B 0x377A19C
	0x0377A198 ADD X8, X0, 0x1E0
	0x0377A19C LDR X0, [X8]
	0x0377A1A0 LDP X20, X19, [X31 + 0x10]
	0x0377A1A4 LDP X30, X21, [X31], #0x20
	0x0377A1A8 RET
	0x0377A1AC BL 0x1C16F20
	0x0377A1B0 ADRP X0, 0x9CC000
	0x0377A1B4 LDR X0, [X0 + 0xEC0]
	0x0377A1B8 MOV W19, W1
	0x0377A1BC BL 0x1C16D08
	0x0377A1C0 MOV X20, X0
	0x0377A1C4 ADRP X0, 0x979000
	0x0377A1C8 LDR X0, [X0 + 0x6C0]
	0x0377A1CC BL 0x1C16D08
	0x0377A1D0 BL 0x19903D0
	0x0377A1D4 MOV X0, X20
	0x0377A1D8 MOV X1, X31
	0x0377A1DC BL 0x338C698
	0x0377A1E0 MOV X20, X0
	0x0377A1E4 ADRP X0, 0x9CC000
	0x0377A1E8 LDR X0, [X0 + 0xEC8]
	0x0377A1EC BL 0x1C16D08
	0x0377A1F0 BL 0x1C16F10
	0x0377A1F4 MOV X21, X0
	0x0377A1F8 ADRP X0, 0x9CC000
	0x0377A1FC LDR X0, [X0 + 0xED0]
	0x0377A200 BL 0x1C16D08
	0x0377A204 MOV X1, X0
	0x0377A208 MOV X0, X21
	0x0377A20C MOV W2, W19
	0x0377A210 MOV X3, X20
	0x0377A214 MOV X4, X31
	0x0377A218 BL 0x366013C
	0x0377A21C ADRP X0, 0x9CC000
	0x0377A220 LDR X0, [X0 + 0xED8]
	0x0377A224 BL 0x1C16D08
	0x0377A228 MOV X1, X0
	0x0377A22C MOV X0, X21
	0x0377A230 BL 0x1C16DEC
	0x0377A234 STR X30, [X31 - 0x20]!
	0x0377A238 STP X20, X19, [X31 + 0x10]
	0x0377A23C ADRP X19, 0xC66000
	0x0377A240 ADRP X20, 0x9CC000
	0x0377A244 LDRB W8, [X19 + 0xF55]
	0x0377A248 LDR X20, [X20 + 0xEE0]
	0x0377A24C TBNZ X8, 0x0, 0x377A264
	0x0377A250 ADRP X0, 0x9CC000
	0x0377A254 LDR X0, [X0 + 0xEE0]
	0x0377A258 BL 0x1C16CF4
	0x0377A25C MOVZ W8, 0x1
	0x0377A260 STRB W8, [X19 + 0xF55]
	0x0377A264 LDR X8, [X20]
	0x0377A268 LDP X20, X19, [X31 + 0x10]
	0x0377A26C LDR X8, [X8 + 0xB8]
	0x0377A270 LDR X0, [X8]
	0x0377A274 LDR X30, [X31], #0x20
	0x0377A278 RET
	0x0377A27C STP X30, X21, [X31 - 0x20]!
	0x0377A280 STP X20, X19, [X31 + 0x10]
	0x0377A284 ADRP X20, 0xC66000
	0x0377A288 ADRP X21, 0x9CC000
	0x0377A28C LDRB W8, [X20 + 0xF56]
	0x0377A290 LDR X21, [X21 + 0xEE0]
	0x0377A294 MOV X19, X0
	0x0377A298 TBNZ X8, 0x0, 0x377A2B0
	0x0377A29C ADRP X0, 0x9CC000
	0x0377A2A0 LDR X0, [X0 + 0xEE0]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+56], X27
	004 Move [X31+64], X26
	005 Move [X31+72], X25
	006 Move [X31+80], X24
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X21, 0xC67000
	013 Move W8, [X21+3917]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x9A2000
	021 Move X0, [X0+3512]
	022 Call 0x1C17CF4
	023 Move X0, 0x9CD000
	024 Move X0, [X0+3496]
	025 Call 0x1C17CF4
	026 Move X0, 0x9A2000
	027 Move X0, [X0+3520]
	028 Call 0x1C17CF4
	029 Move X0, 0x9A2000
	030 Move X0, [X0+3528]
	031 Call 0x1C17CF4
	032 Move X0, 0x9A2000
	033 Move X0, [X0+3536]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+3917], W8
	037 Move X0, X20
	038 Move X1, X31
	039 Move [X31+32], X31
	040 Move [X31+40], X31
	041 Move [X31+16], X31
	042 Move [X31+24], X31
	043 Move [X31], X31
	044 Move [X31+8], X31
	045 Call Substring.get_isEmpty, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {109}
	050 Compare X19, 0
	051 JumpIfEqual {232}
	052 Move X23, X19
	053 Move X22, [X20]
	054 Move X21, [X20+8]
	055 Add X23, X23, 88
	056 Move X0, [X23]
	057 Move X2, X31
	058 Move X1, [X23+8]
	059 Call InternedString.op_Implicit, X0
	060 Move X2, X0
	061 Move X0, X22
	062 Move X1, X21
	063 Call ParsedPathComponent.ComparePathElementToString, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {109}
	068 Move V0, [X23]
	069 Move X23, 0x9A2000
	070 Move X23, [X23+3520]
	071 Move X24, 0x9A2000
	072 Move [X31+2], V0
	073 Move X24, [X24+3512]
	074 Move W21, W31
	075 Move X0, [X23]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {81}
	079 Call 0x1C17DFC
	080 Move X0, [X23]
	081 Move X8, [X0+184]
	082 Move X0, [X8+40]
	083 Compare X0, 0
	084 JumpIfEqual {232}
	085 Move X1, [X31+32]
	086 Move X2, [X31+40]
	087 Move X4, [X24]
	088 Add X3, X31, 32
	089 Call Dictionary`2<InternedString, InternedString>.TryGetValue, X0, X1, X2
	090 NotImplemented "Instruction ORN not yet implemented."
	091 Move TEMP, X8
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {105}
	095 Move X21, [X20]
	096 Move X22, [X20+8]
	097 Add X0, X31, 32
	098 Move X1, X31
	099 Call InternedString.ToString, X0
	100 Move X2, X0
	101 Move X0, X21
	102 Move X1, X22
	103 Call ParsedPathComponent.ComparePathElementToString, X0, X1
	104 Move W21, W0
	105 Move TEMP, X21
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {168}
	109 Move X21, X20
	110 Add X21, X21, 16
	111 Move W8, [X21]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X26, 0x9CD000
	114 Move X27, 0x9A2000
	115 Move X26, [X26+3496]
	116 Move X27, [X27+3536]
	117 Move W22, W31
	118 Move X2, [X26]
	119 Move X0, X21
	120 Move W1, W22
	121 Call InlinedArray`1<Substring>.get_Item, X0, X1
	122 Move [X31+16], X0
	123 Move [X31+24], X1
	124 Add X0, X31, 16
	125 Move X1, X31
	126 Call Substring.get_isEmpty, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {134}
	131 Move W8, [X21]
	132 Add W22, W22, 1
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Compare X19, 0
	135 JumpIfEqual {232}
	136 Move X0, X19
	137 Call InputControl.get_usages, X0
	138 Move X8, X1
	139 ShiftRight X8, 32
	140 And X8, X8, 0x7FFFFFFF
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move [X31], X0
	143 Move [X31+8], X1
	144 Move W23, W31
	145 Move X2, [X26]
	146 Move X0, X21
	147 Move W1, W22
	148 Call InlinedArray`1<Substring>.get_Item, X0, X1
	149 Move X2, [X27]
	150 Move X24, X0
	151 Move X25, X1
	152 Add X0, X31, 0
	153 Move W1, W23
	154 Call ReadOnlyArray`1<InternedString>.get_Item, X0, X1
	155 Move X2, X31
	156 Call InternedString.op_Implicit, X0
	157 Move X2, X0
	158 Move X0, X24
	159 Move X1, X25
	160 Call ParsedPathComponent.ComparePathElementToString, X0, X1
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfEqual {131}
	165 Move W8, [X31+12]
	166 Add W23, W23, 1
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W0, W31
	169 Add X0, X20, 48
	170 Move X1, X31
	171 Call Substring.get_isEmpty, X0
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfEqual {198}
	176 Move X0, X20
	177 Call ParsedPathComponent.get_isWildcard, X0
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfEqual {198}
	182 Compare X19, 0
	183 JumpIfEqual {232}
	184 Move X0, [X19+32]
	185 Move X1, [X19+40]
	186 Move X22, [X20+48]
	187 Move X21, [X20+56]
	188 Move X2, X31
	189 Call InternedString.op_Implicit, X0
	190 Move X2, X0
	191 Move X0, X22
	192 Move X1, X21
	193 Call ParsedPathComponent.ComparePathElementToString, X0, X1
	194 Move TEMP, X0
	195 And TEMP, TEMP, 1
	196 Compare TEMP, 1
	197 JumpIfNotEqual {168}
	198 Add X0, X20, 64
	199 Move X1, X31
	200 Call Substring.get_isEmpty, X0
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {219}
	205 Compare X19, 0
	206 JumpIfEqual {232}
	207 Move X20, [X20+64]
	208 Move X21, [X20+72]
	209 Move X0, X19
	210 Call InputControl.get_displayName, X0
	211 Move X2, X0
	212 Move X0, X20
	213 Move X1, X21
	214 Call ParsedPathComponent.ComparePathElementToString, X0, X1
	215 Move TEMP, X0
	216 And TEMP, TEMP, 1
	217 Compare TEMP, 1
	218 JumpIfNotEqual {168}
	219 Move W0, 1
	220 Move X20, [X31+112]
	221 Move X19, [X31+120]
	222 Move X22, [X31+96]
	223 Move X21, [X31+104]
	224 Move X24, [X31+80]
	225 Move X23, [X31+88]
	226 Move X26, [X31+64]
	227 Move X25, [X31+72]
	228 Move X30, [X31+48]
	229 Move X27, [X31+56]
	230 Add X31, X31, 128
	231 Return X0
	232 Call 0x1C17F20

Method: System.Boolean ComparePathElementToString(UnityEngine.InputSystem.Utilities.Substring pathElement, System.String element)

Disassembly:
	0x0377A8AC ANDS W31, W8, W9, 0x0
	0x0377A8B0 B.EQ 0x377A8BC
	0x0377A8B4 MOV W0, W31
	0x0377A8B8 RET
	0x0377A8BC B 0x377A8C0
	0x0377A8C0 SUB X31, X31, 0x30
	0x0377A8C4 STR X30, [X31 + 0x10]
	0x0377A8C8 STP X20, X19, [X31 + 0x20]
	0x0377A8CC ADRP X20, 0xC66000
	0x0377A8D0 LDRB W8, [X20 + 0xF66]
	0x0377A8D4 MOV X19, X0
	0x0377A8D8 TBNZ X8, 0x0, 0x377A8F0
	0x0377A8DC ADRP X0, 0x9CC000
	0x0377A8E0 LDR X0, [X0 + 0xF88]
	0x0377A8E4 BL 0x1C16CF4
	0x0377A8E8 MOVZ W8, 0x1
	0x0377A8EC STRB W8, [X20 + 0xF66]
	0x0377A8F0 LDR W8, [X19 + 0xDC]
	0x0377A8F4 TBNZ X8, 0x6, 0x377A948
	0x0377A8F8 MOV X0, X31
	0x0377A8FC BL 0x37FEDD8
	0x0377A900 ADRP X8, 0x9CC000
	0x0377A904 LDR X8, [X8 + 0xF88]
	0x0377A908 STR X0, [X31]
	0x0377A90C STRB W1, [X31 + 0x8]
	0x0377A910 ADD X1, X31, 0x0
	0x0377A914 LDR X2, [X8]
	0x0377A918 MOV X0, X19
	0x0377A91C BL 0x2205674
	0x0377A920 TBNZ X0, 0x0, 0x377A938
	0x0377A924 LDRB W9, [X31 + 0x8]
	0x0377A928 LDR W8, [X19 + 0xDC]
	0x0377A92C TBNZ X9, 0x0, 0x377A93C
	0x0377A930 ORR W8, W8, 0x80
	0x0377A934 B 0x377A940
	0x0377A938 LDR W8, [X19 + 0xDC]
	0x0377A93C AND W8, W8, 0xFFFFFF7F
	0x0377A940 ORR W8, W8, 0x40
	0x0377A944 STR W8, [X19 + 0xDC]
	0x0377A948 LDP X20, X19, [X31 + 0x20]
	0x0377A94C LDR X30, [X31 + 0x10]
	0x0377A950 ANDS W31, W8, 0x80
	0x0377A954 CSET W0, EQ
	0x0377A958 ADD X31, X31, 0x30
	0x0377A95C RET
	0x0377A960 SUB X31, X31, 0x30
	0x0377A964 STR X30, [X31 + 0x10]
	0x0377A968 STP X20, X19, [X31 + 0x20]
	0x0377A96C ADRP X20, 0xC66000
	0x0377A970 LDRB W8, [X20 + 0xF5B]
	0x0377A974 MOV X19, X0
	0x0377A978 TBNZ X8, 0x0, 0x377A990
	0x0377A97C ADRP X0, 0x9CC000
	0x0377A980 LDR X0, [X0 + 0xF90]
	0x0377A984 BL 0x1C16CF4
	0x0377A988 MOVZ W8, 0x1
	0x0377A98C STRB W8, [X20 + 0xF5B]
	0x0377A990 LDR W8, [X19 + 0xDC]
	0x0377A994 TBNZ X8, 0xC, 0x377A9E8
	0x0377A998 MOV X0, X31
	0x0377A99C BL 0x37FECA4
	0x0377A9A0 STR X0, [X31]
	0x0377A9A4 STRB W1, [X31 + 0x8]
	0x0377A9A8 LDR W8, [X19 + 0xDC]
	0x0377A9AC ADD X1, X31, 0x0
	0x0377A9B0 MOV X0, X19
	0x0377A9B4 ORR W8, W8, 0x1000
	0x0377A9B8 STR W8, [X19 + 0xDC]
	0x0377A9BC ADRP X8, 0x9CC000
	0x0377A9C0 LDR X8, [X8 + 0xF90]
	0x0377A9C4 LDR X2, [X8]
	0x0377A9C8 BL 0x22053A0
	0x0377A9CC TBNZ X0, 0x0, 0x377A9D8
	0x0377A9D0 LDRB W8, [X31 + 0x8]
	0x0377A9D4 TBNZ X8, 0x0, 0x377A9F0
	0x0377A9D8 LDR W8, [X19 + 0xDC]
	0x0377A9DC MOV W0, W31
	0x0377A9E0 AND W8, W8, 0xFFFFF7FF
	0x0377A9E4 B 0x377A9FC
	0x0377A9E8 UBFM W0, W8, 0xB, 0xB
	0x0377A9EC B 0x377AA00
	0x0377A9F0 LDR W8, [X19 + 0xDC]
	0x0377A9F4 MOVZ W0, 0x1
	0x0377A9F8 ORR W8, W8, 0x800
	0x0377A9FC STR W8, [X19 + 0xDC]
	0x0377AA00 LDP X20, X19, [X31 + 0x20]
	0x0377AA04 LDR X30, [X31 + 0x10]
	0x0377AA08 ADD X31, X31, 0x30

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+8], X1
	003 Move [X31+16], X30
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0xC67000
	013 Move W8, [X21+3918]
	014 Move X19, X2
	015 Move X20, X1
	016 Move [X31], X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x97C000
	022 Move X0, [X0+368]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3918], W8
	026 Compare X19, 0
	027 JumpIfEqual {98}
	028 Move W10, [X19+16]
	029 Move X24, X20
	030 ShiftRight X24, 32
	031 And X24, X24, 0x7FFFFFFF
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSET not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Compare W10, 0
	037 JumpIfEqual {84}
	038 Compare W24, 0
	039 JumpIfEqual {84}
	040 Move X26, 0x97C000
	041 Move X26, [X26+368]
	042 Move W21, W31
	043 Move W20, W31
	044 Subtract W25, W10, 1
	045 Add X0, X31, 0
	046 Move W1, W21
	047 Move X2, X31
	048 Call Substring.get_Item, X0, X1
	049 And W8, W0, 0xFFFF
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add W23, W21, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add X0, X31, 0
	054 Move W1, W23
	055 Move X2, X31
	056 Call Substring.get_Item, X0, X1
	057 Move W22, W0
	058 Move W21, W23
	059 Move W22, W0
	060 Move W22, 92
	061 Move X0, [X26]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move W0, W22
	067 Move X1, X31
	068 Call Char.ToLowerInvariant, X0
	069 And W22, W0, 0xFFFF
	070 Move X0, X19
	071 Move W1, W20
	072 Move X2, X31
	073 Call String.get_Chars, X0, X1
	074 Move X1, X31
	075 Call Char.ToLowerInvariant, X0
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Add W21, W21, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CSET not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CSET not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add W20, W20, 1
	084 Xor W8, W9, W8
	085 Xor W0, W8, 1
	086 Move W0, W31
	087 Move X20, [X31+80]
	088 Move X19, [X31+88]
	089 Move X22, [X31+64]
	090 Move X21, [X31+72]
	091 Move X24, [X31+48]
	092 Move X23, [X31+56]
	093 Move X26, [X31+32]
	094 Move X25, [X31+40]
	095 Move X30, [X31+16]
	096 Add X31, X31, 96
	097 Return X0
	098 Call 0x1C17F20

