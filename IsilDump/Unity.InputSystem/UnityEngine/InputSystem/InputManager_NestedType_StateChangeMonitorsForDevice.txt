Type: UnityEngine.InputSystem.InputManager/StateChangeMonitorsForDevice

Method: System.Int32 get_count()

Disassembly:
	0x037CDC24 MOV X0, X19
	0x037CDC28 BL 0x37CD80C

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void Add(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.UInt32 groupIndex)

Disassembly:
	0x037CD34C TBNZ X0, 0x0, 0x37CD378
	0x037CD350 LDR X19, [X31 + 0x88]
	0x037CD354 B 0x37CD314
	0x037CD358 BL 0x37CD5BC
	0x037CD35C LDR X8, [X31 + 0x88]
	0x037CD360 MOV W0, W31
	0x037CD364 MOVI V0.2D, 0x0
	0x037CD368 STP V0, V0, [X8 + 0xC0]
	0x037CD36C STR V0, [X8 + 0xB]
	0x037CD370 STP X31, X31, [X8 + 0x40]
	0x037CD374 B 0x37CD3B8
	0x037CD378 MOV X0, X21
	0x037CD37C MOV X1, X19
	0x037CD380 MOV X2, X31
	0x037CD384 BL 0x37577E0
	0x037CD388 LDR X8, [X31 + 0x88]
	0x037CD38C MOVZ W9, 0x3
	0x037CD390 B 0x37CD3AC
	0x037CD394 MOV X0, X21
	0x037CD398 MOV X1, X19
	0x037CD39C MOV X2, X31
	0x037CD3A0 BL 0x37577E0
	0x037CD3A4 LDR X8, [X31 + 0x88]
	0x037CD3A8 MOVZ W9, 0x2
	0x037CD3AC STR X0, [X8 + 0x18]
	0x037CD3B0 STR W9, [X8 + 0x10]
	0x037CD3B4 MOVZ W0, 0x1
	0x037CD3B8 LDP X20, X19, [X31 + 0xB0]
	0x037CD3BC LDP X22, X21, [X31 + 0xA0]
	0x037CD3C0 LDP X30, X23, [X31 + 0x90]
	0x037CD3C4 ADD X31, X31, 0xC0
	0x037CD3C8 RET
	0x037CD3CC MOV X0, X21
	0x037CD3D0 MOV X1, X19
	0x037CD3D4 MOV X2, X31
	0x037CD3D8 BL 0x37577E0
	0x037CD3DC LDR X9, [X31 + 0x88]
	0x037CD3E0 MOV X8, X0
	0x037CD3E4 MOVZ W0, 0x1
	0x037CD3E8 STR X8, [X9 + 0x18]
	0x037CD3EC STR W0, [X9 + 0x10]
	0x037CD3F0 B 0x37CD3B8
	0x037CD3F4 BL 0x1C16F20
	0x037CD3F8 BL 0x1C16F20
	0x037CD3FC BL 0x1C16F20
	0x037CD400 BL 0x1C16F20
	0x037CD404 BL 0x1C16F20
	0x037CD408 BL 0x1C16F20
	0x037CD40C BL 0x1C16F20
	0x037CD410 BL 0x1C16F20
	0x037CD414 BL 0x1C16F20
	0x037CD418 BL 0x1C16F20
	0x037CD41C BL 0x1C16F20
	0x037CD420 BL 0x1C16F20
	0x037CD424 BL 0x1C16F20
	0x037CD428 BL 0x1C16F20
	0x037CD42C BL 0x1C16F20
	0x037CD430 B 0x37CD4C8
	0x037CD434 B 0x37CD4C8
	0x037CD438 B 0x37CD4C8
	0x037CD43C B 0x37CD4C8
	0x037CD440 B 0x37CD4C8
	0x037CD444 B 0x37CD4C8
	0x037CD448 B 0x37CD4C8
	0x037CD44C B 0x37CD4C8
	0x037CD450 B 0x37CD4C8
	0x037CD454 B 0x37CD4C8
	0x037CD458 B 0x37CD4C8
	0x037CD45C B 0x37CD4C8
	0x037CD460 B 0x37CD4C8
	0x037CD464 B 0x37CD4C8
	0x037CD468 B 0x37CD4C8
	0x037CD46C B 0x37CD4C8
	0x037CD470 B 0x37CD4C8
	0x037CD474 B 0x37CD4C8
	0x037CD478 B 0x37CD4C8
	0x037CD47C B 0x37CD4C8
	0x037CD480 B 0x37CD4C8
	0x037CD484 B 0x37CD4C8

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X25, 0xC15000
	011 Move X24, 0x97C000
	012 Move W8, [X25+529]
	013 Move X24, [X24+1968]
	014 Move W21, W4
	015 Move X22, X3
	016 Move X23, X2
	017 Move X20, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0x97C000
	024 Move X0, [X0+1976]
	025 Call 0x1C17CF4
	026 Move X0, 0x97C000
	027 Move X0, [X0+1968]
	028 Call 0x1C17CF4
	029 Move X0, 0x94F000
	030 Move X0, [X0+3352]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X25+529], W8
	034 Move X4, [X24]
	035 Move W8, [X19+40]
	036 Add X0, X19, 8
	037 Add X1, X31, 12
	038 Add X2, X31, 16
	039 Move W3, 10
	040 Move [X31+16], X20
	041 Move [X31+24], X23
	042 Move [X31+32], X22
	043 Move [X31+8], W31
	044 Move [X31+12], W8
	045 Move [X31+40], W21
	046 Move [X31+44], W31
	047 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	048 Compare X20, 0
	049 JumpIfEqual {97}
	050 Move X8, 0x94F000
	051 Move X8, [X8+3352]
	052 Move W9, [X19+40]
	053 Move X0, [X8]
	054 Move [X31+8], W9
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X8, [X20+120]
	060 Compare X8, 0
	061 JumpIfEqual {97}
	062 Move X21, 0x97C000
	063 Move X21, [X21+1976]
	064 Move W8, [X8+20]
	065 Move W9, [X20+20]
	066 Move W2, [X20+24]
	067 Move W3, [X20+28]
	068 Add X0, X31, 16
	069 Move X4, X31
	070 Subtract W1, W9, W8
	071 Add X20, X19, 16
	072 Move [X31+16], X31
	073 Call BitRegion..ctor, X0, X1, X2, X3
	074 Move X2, [X31+16]
	075 Move X4, [X21]
	076 Add X1, X31, 8
	077 Move W3, 10
	078 Move X0, X19
	079 Call ArrayHelpers.AppendWithCapacity, X0, X1, X2, X3
	080 Move W8, [X19+40]
	081 Move X0, X20
	082 Move X2, X31
	083 Add W1, W8, 1
	084 Call DynamicBitfield.SetLength, X0, X1
	085 Move W8, 1
	086 Move [X19+48], W8
	087 Move X20, [X31+96]
	088 Move X19, [X31+104]
	089 Move X22, [X31+80]
	090 Move X21, [X31+88]
	091 Move X24, [X31+64]
	092 Move X23, [X31+72]
	093 Move X30, [X31+48]
	094 Move X25, [X31+56]
	095 Add X31, X31, 112
	096 Return 
	097 Call 0x1C17F20

Method: System.Void Remove(UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.Boolean deferRemoval)

Disassembly:
	0x037CD644 STR W8, [X19 + 0x10]
	0x037CD648 LDR X1, [X20]
	0x037CD64C ADD X0, X19, 0x50
	0x037CD650 LDP X20, X19, [X31 + 0x10]
	0x037CD654 LDP X30, X21, [X31], #0x20
	0x037CD658 B 0x2C01DC8
	0x037CD65C STP X30, X21, [X31 - 0x20]!
	0x037CD660 STP X20, X19, [X31 + 0x10]
	0x037CD664 ADRP X21, 0xC14000
	0x037CD668 ADRP X20, 0x97B000
	0x037CD66C LDRB W8, [X21 + 0x21C]
	0x037CD670 LDR X20, [X20 + 0x808]
	0x037CD674 MOV X19, X0
	0x037CD678 TBNZ X8, 0x0, 0x37CD690
	0x037CD67C ADRP X0, 0x97B000
	0x037CD680 LDR X0, [X0 + 0x808]
	0x037CD684 BL 0x1C16CF4
	0x037CD688 MOVZ W8, 0x1
	0x037CD68C STRB W8, [X21 + 0x21C]
	0x037CD690 MOVN W8, 0x0
	0x037CD694 STR W8, [X19 + 0x10]
	0x037CD698 LDR X1, [X20]
	0x037CD69C ADD X0, X19, 0x80
	0x037CD6A0 LDP X20, X19, [X31 + 0x10]
	0x037CD6A4 LDP X30, X21, [X31], #0x20
	0x037CD6A8 B 0x2C01DC8
	0x037CD6AC STP X30, X21, [X31 - 0x20]!
	0x037CD6B0 STP X20, X19, [X31 + 0x10]
	0x037CD6B4 ADRP X21, 0xC14000
	0x037CD6B8 ADRP X20, 0x97A000
	0x037CD6BC LDRB W8, [X21 + 0x21D]
	0x037CD6C0 LDR X20, [X20 + 0xC60]
	0x037CD6C4 MOV X19, X0
	0x037CD6C8 TBNZ X8, 0x0, 0x37CD6E0
	0x037CD6CC ADRP X0, 0x97A000
	0x037CD6D0 LDR X0, [X0 + 0xC60]
	0x037CD6D4 BL 0x1C16CF4
	0x037CD6D8 MOVZ W8, 0x1
	0x037CD6DC STRB W8, [X21 + 0x21D]
	0x037CD6E0 MOVN W8, 0x0
	0x037CD6E4 STR W8, [X19 + 0x10]
	0x037CD6E8 LDR X1, [X20]
	0x037CD6EC ADD X0, X19, 0xB0
	0x037CD6F0 LDP X20, X19, [X31 + 0x10]
	0x037CD6F4 LDP X30, X21, [X31], #0x20
	0x037CD6F8 B 0x2C01DC8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X10, [X0+8]
	004 Compare X10, 0
	005 JumpIfEqual {22}
	006 NotImplemented "Instruction LDRSW not yet implemented."
	007 Move X19, X0
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W11, [X10+24]
	010 Move X8, X1
	011 Move X1, X31
	012 Add X0, X19, 16
	013 Add X10, X10, 48
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction LDUR not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X12, [X10]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add X1, X1, 1
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Add X10, X10, 32
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 
	025 Move TEMP, X3
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {43}
	029 NotImplemented "Instruction MOVI not yet implemented."
	030 Move [X10-16], V0
	031 Move [X10-8], V0
	032 Move X8, [X19]
	033 Compare X8, 0
	034 JumpIfEqual {49}
	035 Move W9, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X8, X8, X1
	038 Move X2, X31
	039 Move [X8+32], X31
	040 Call DynamicBitfield.ClearBit, X0, X1
	041 Move W8, 1
	042 Move [X19+49], W8
	043 Move X0, X19
	044 Move X30, [X31+16]
	045 Move X19, [X31+24]
	046 Call StateChangeMonitorsForDevice.RemoveAt, X0, X1
	047 Return 
	048 Call 0x1C17F28
	049 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x037CD488 B 0x37CD4C8
	0x037CD48C B 0x37CD4C8
	0x037CD490 B 0x37CD4C8
	0x037CD494 B 0x37CD4C8
	0x037CD498 B 0x37CD4C8
	0x037CD49C B 0x37CD4C8
	0x037CD4A0 B 0x37CD4C8
	0x037CD4A4 B 0x37CD4C8
	0x037CD4A8 B 0x37CD4C8
	0x037CD4AC B 0x37CD4C8
	0x037CD4B0 B 0x37CD4C8
	0x037CD4B4 B 0x37CD4C8
	0x037CD4B8 B 0x37CD4C8
	0x037CD4BC B 0x37CD4C8
	0x037CD4C0 B 0x37CD4C8
	0x037CD4C4 B 0x37CD4C8
	0x037CD4C8 CMP W1, 0x1
	0x037CD4CC B.NE 0x37CD504
	0x037CD4D0 BL 0x3EB1AD0
	0x037CD4D4 LDR X19, [X0]
	0x037CD4D8 STR X19, [X31 + 0x78]
	0x037CD4DC BL 0x3EB1AE0
	0x037CD4E0 CBNZ X19, 0x37CD4EC
	0x037CD4E4 MOV W0, W31
	0x037CD4E8 B 0x37CD3B8
	0x037CD4EC ADD X8, X31, 0x78

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xC15000
	006 Move X20, 0x97C000
	007 Move W8, [X21+530]
	008 Move X20, [X20+1984]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x97C000
	015 Move X0, [X0+1984]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+530], W8
	019 Move X0, [X19+8]
	020 Move W1, [X19+40]
	021 Move X2, [X20]
	022 Add X20, X19, 16
	023 Call ArrayHelpers.Clear, X0, X1
	024 Move X0, X20
	025 Move W1, W31
	026 Move X2, X31
	027 Call DynamicBitfield.SetLength, X0, X1
	028 Move [X19+49], W31
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

Method: System.Void CompactArrays()

Disassembly:
	0x037CD2E8 LDR V2, [X31 + 0x2]
	0x037CD2EC LDR X19, [X31 + 0x88]
	0x037CD2F0 MOVN W8, 0x4
	0x037CD2F4 STP V0, V1, [X31 + 0x30]
	0x037CD2F8 STR V2, [X31 + 0x5]
	0x037CD2FC STP V1, V2, [X19 + 0xC0]
	0x037CD300 STR V0, [X19 + 0xB]
	0x037CD304 STR W8, [X19 + 0x10]
	0x037CD308 ADRP X23, 0x97A000
	0x037CD30C LDR X23, [X23 + 0xC68]
	0x037CD310 ADD X20, X22, 0x18
	0x037CD314 LDR X1, [X23]
	0x037CD318 ADD X0, X19, 0xB0
	0x037CD31C BL 0x2C01CA0
	0x037CD320 MOV W8, W0
	0x037CD324 LDR X0, [X31 + 0x88]
	0x037CD328 TBZ X8, 0x0, 0x37CD358
	0x037CD32C CBZ X22, 0x37CD3F4
	0x037CD330 LDP X21, X19, [X0 + 0xC0]
	0x037CD334 LDP X1, X2, [X0 + 0x40]
	0x037CD338 MOV X0, X20
	0x037CD33C MOV X3, X21
	0x037CD340 MOV X4, X19
	0x037CD344 MOV X5, X31
	0x037CD348 BL 0x381909C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+40]
	005 Move X19, X0
	006 Subtract W20, W8, 1
	007 Move X8, [X19]
	008 Compare X8, 0
	009 JumpIfEqual {25}
	010 Move W9, [X8+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X8, W20
	013 Move W8, [X8+36]
	014 Compare W8, 0
	015 JumpIfNotEqual {19}
	016 Move X0, X19
	017 Move W1, W20
	018 Call StateChangeMonitorsForDevice.RemoveAt, X0, X1
	019 Subtract W20, W20, 1
	020 Move [X19+49], W31
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20
	026 Call 0x1C17F28

Method: System.Void RemoveAt(System.Int32 i)

Disassembly:
	0x037CDC9C ADRP X22, 0xC14000
	0x037CDCA0 LDRB W8, [X22 + 0x23B]
	0x037CDCA4 MOV W20, W2
	0x037CDCA8 MOV X21, X1
	0x037CDCAC MOV X19, X0
	0x037CDCB0 TBNZ X8, 0x0, 0x37CDD1C
	0x037CDCB4 ADRP X0, 0x927000
	0x037CDCB8 LDR X0, [X0 + 0xC20]
	0x037CDCBC BL 0x1C16CF4
	0x037CDCC0 ADRP X0, 0x97B000
	0x037CDCC4 LDR X0, [X0 + 0x830]
	0x037CDCC8 BL 0x1C16CF4
	0x037CDCCC ADRP X0, 0x927000
	0x037CDCD0 LDR X0, [X0 + 0xC28]
	0x037CDCD4 BL 0x1C16CF4
	0x037CDCD8 ADRP X0, 0x927000
	0x037CDCDC LDR X0, [X0 + 0xC30]
	0x037CDCE0 BL 0x1C16CF4
	0x037CDCE4 ADRP X0, 0x951000
	0x037CDCE8 LDR X0, [X0 + 0xFE0]
	0x037CDCEC BL 0x1C16CF4
	0x037CDCF0 ADRP X0, 0x97B000
	0x037CDCF4 LDR X0, [X0 + 0x838]
	0x037CDCF8 BL 0x1C16CF4
	0x037CDCFC ADRP X0, 0x97B000
	0x037CDD00 LDR X0, [X0 + 0x840]
	0x037CDD04 BL 0x1C16CF4
	0x037CDD08 ADRP X0, 0x97B000
	0x037CDD0C LDR X0, [X0 + 0x848]
	0x037CDD10 BL 0x1C16CF4
	0x037CDD14 MOVZ W8, 0x1
	0x037CDD18 STRB W8, [X22 + 0x23B]
	0x037CDD1C MOV X0, X21
	0x037CDD20 MOV X1, X31
	0x037CDD24 BL 0x32277A8
	0x037CDD28 TBNZ X0, 0x0, 0x37CDE58
	0x037CDD2C ADRP X8, 0x97B000
	0x037CDD30 LDR X8, [X8 + 0x848]
	0x037CDD34 MOV X0, X21
	0x037CDD38 MOV X2, X31
	0x037CDD3C AND W22, W20, 0x1
	0x037CDD40 LDR X1, [X8]
	0x037CDD44 BL 0x321BA08
	0x037CDD48 TBZ X0, 0x0, 0x37CDD64

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC15000
	009 Move X21, 0x97C000
	010 Move X22, 0x97C000
	011 Move W8, [X23+531]
	012 Move X21, [X21+1936]
	013 Move X22, [X22+1928]
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x97C000
	021 Move X0, [X0+1928]
	022 Call 0x1C17CF4
	023 Move X0, 0x97C000
	024 Move X0, [X0+1936]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+531], W8
	028 Move W8, [X19+40]
	029 Move X3, [X21]
	030 Add X1, X31, 12
	031 Move W2, W20
	032 Move [X31+8], W8
	033 Move [X31+12], W8
	034 Move X0, [X19+8]
	035 Add X21, X19, 16
	036 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	037 Move X0, [X19]
	038 Move X3, [X22]
	039 Add X1, X31, 8
	040 Move W2, W20
	041 Call ArrayHelpers.EraseAtWithCapacity, X0, X1, X2
	042 Move W8, [X19+40]
	043 Move X0, X21
	044 Move X2, X31
	045 Subtract W1, W8, 1
	046 Call DynamicBitfield.SetLength, X0, X1
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X30, [X31+16]
	052 Move X23, [X31+24]
	053 Add X31, X31, 64
	054 Return 

Method: System.Void SortMonitorsByIndex()

Disassembly:
	0x037CD8AC LDR X8, [X0 + 0xB8]
	0x037CD8B0 LDR X0, [X8]
	0x037CD8B4 CBZ X0, 0x37CD8D4
	0x037CD8B8 LDP X20, X19, [X31 + 0x10]
	0x037CD8BC MOV X1, X31
	0x037CD8C0 LDP X30, X21, [X31], #0x20
	0x037CD8C4 B 0x37C1690
	0x037CD8C8 LDP X20, X19, [X31 + 0x10]
	0x037CD8CC LDP X30, X21, [X31], #0x20
	0x037CD8D0 RET
	0x037CD8D4 BL 0x1C16F20
	0x037CD8D8 LDRB W0, [X0 + 0x2C]
	0x037CD8DC RET
	0x037CD8E0 LDRB W9, [X0 + 0x2C]
	0x037CD8E4 AND W8, W1, 0x1
	0x037CD8E8 CMP W9, W8
	0x037CD8EC B.NE 0x37CD8F4
	0x037CD8F0 RET
	0x037CD8F4 STRB W8, [X0 + 0x2C]
	0x037CD8F8 B 0x37CD80C
	0x037CD8FC MOV W0, W31
	0x037CD900 RET
	0x037CD904 RET
	0x037CD908 LDR V0, [X0 + 0x38]
	0x037CD90C RET
	0x037CD910 LDR V1, [X0 + 0x38]
	0x037CD914 FCMP S1, S0
	0x037CD918 B.NE 0x37CD920
	0x037CD91C RET
	0x037CD920 STR S0, [X0 + 0x38]
	0x037CD924 B 0x37CD80C
	0x037CD928 LDR V0, [X0 + 0x3C]
	0x037CD92C RET
	0x037CD930 LDR V1, [X0 + 0x3C]
	0x037CD934 FCMP S1, S0
	0x037CD938 B.NE 0x37CD940
	0x037CD93C RET
	0x037CD940 STR S0, [X0 + 0x3C]
	0x037CD944 B 0x37CD80C
	0x037CD948 LDR V0, [X0 + 0x40]
	0x037CD94C RET
	0x037CD950 LDR V1, [X0 + 0x40]
	0x037CD954 FCMP S1, S0
	0x037CD958 B.NE 0x37CD960
	0x037CD95C RET
	0x037CD960 ADRP X8, 0xFFFFFFFFFD31C000
	0x037CD964 LDR V1, [X8 + 0xF28]
	0x037CD968 MOVN W8, 0x80800000
	0x037CD96C FMOV S2, W8
	0x037CD970 FMIN S2, S0, S2
	0x037CD974 FCMP S0, S1
	0x037CD978 FCSEL S0, S2, S1, PL
	0x037CD97C STR S0, [X0 + 0x40]
	0x037CD980 B 0x37CD80C
	0x037CD984 LDR V0, [X0 + 0x44]
	0x037CD988 RET
	0x037CD98C LDR V1, [X0 + 0x44]
	0x037CD990 FCMP S1, S0
	0x037CD994 B.NE 0x37CD99C
	0x037CD998 RET
	0x037CD99C STR S0, [X0 + 0x44]
	0x037CD9A0 B 0x37CD80C
	0x037CD9A4 LDR V0, [X0 + 0x48]
	0x037CD9A8 RET
	0x037CD9AC LDR V1, [X0 + 0x48]
	0x037CD9B0 FCMP S1, S0
	0x037CD9B4 B.NE 0x37CD9BC
	0x037CD9B8 RET
	0x037CD9BC STR S0, [X0 + 0x48]
	0x037CD9C0 B 0x37CD80C
	0x037CD9C4 LDR V0, [X0 + 0x4C]
	0x037CD9C8 RET
	0x037CD9CC LDR V1, [X0 + 0x4C]
	0x037CD9D0 FCMP S1, S0
	0x037CD9D4 B.NE 0x37CD9DC
	0x037CD9D8 RET
	0x037CD9DC STR S0, [X0 + 0x4C]
	0x037CD9E0 B 0x37CD80C
	0x037CD9E4 LDR V0, [X0 + 0x50]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xC15000
	012 Move W8, [X20+532]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x97C000
	019 Move X0, [X0+2000]
	020 Call 0x1C17CF4
	021 Move X0, 0x97C000
	022 Move X0, [X0+2008]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+532], W8
	026 Move W8, [X19+40]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X23, 0x97C000
	029 Move X24, 0x97C000
	030 Move X23, [X23+2008]
	031 Move X24, [X24+2000]
	032 Move W25, 1
	033 Move W26, 48
	034 Move X27, X26
	035 Move X20, X25
	036 Move X8, [X19+8]
	037 Compare X8, 0
	038 JumpIfEqual {87}
	039 Move W9, [X8+24]
	040 Subtract X21, X20, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, [X8]
	043 Move X1, X31
	044 Call InputActionState.GetComplexityFromMonitorIndex, X0
	045 Move X8, [X19+8]
	046 Compare X8, 0
	047 JumpIfEqual {87}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 And X9, X20, 0
	051 Add X8, X8, X9
	052 Move W22, W0
	053 Move X0, [X8+48]
	054 Move X1, X31
	055 Call InputActionState.GetComplexityFromMonitorIndex, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, [X19+8]
	058 Move X3, [X23]
	059 Move W1, W20
	060 Move W2, W21
	061 Call ArrayHelpers.SwapElements, X0, X1, X2
	062 Move X0, [X19]
	063 Move X3, [X24]
	064 Move W1, W20
	065 Move W2, W21
	066 Call ArrayHelpers.SwapElements, X0, X1, X2
	067 Add X8, X21, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Subtract X27, X27, 32
	070 Move X20, X21
	071 Move W8, [X19+40]
	072 Add X25, X25, 1
	073 Add X26, X26, 32
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move [X19+48], W31
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X22, [X31+48]
	079 Move X21, [X31+56]
	080 Move X24, [X31+32]
	081 Move X23, [X31+40]
	082 Move X26, [X31+16]
	083 Move X25, [X31+24]
	084 Move X30, [X31+80]
	085 Move X27, [X31+88]
	086 Return 
	087 Call 0x1C17F20
	088 Call 0x1C17F28

