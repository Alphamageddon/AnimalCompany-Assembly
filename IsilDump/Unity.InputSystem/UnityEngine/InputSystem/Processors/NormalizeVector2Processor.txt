Type: UnityEngine.InputSystem.Processors.NormalizeVector2Processor

Method: UnityEngine.Vector2 Process(UnityEngine.Vector2 value, UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x0381103C MOVZ W8, 0x1
	0x03811040 STRB W8, [X21 + 0x4CE]
	0x03811044 LDR W8, [X19 + 0xA8]
	0x03811048 ANDS W31, W20, 0xFF
	0x0381104C B.EQ 0x381107C
	0x03811050 ADRP X9, 0x8E6000
	0x03811054 LDR X9, [X9 + 0xBF8]
	0x03811058 ORR W8, W8, 0x10
	0x0381105C STR W8, [X19 + 0xA8]
	0x03811060 ADD X0, X31, 0xC
	0x03811064 LDR X1, [X9]
	0x03811068 BL 0x242D58C
	0x0381106C LDR W8, [X19 + 0xA8]
	0x03811070 TBZ X0, 0x0, 0x3811084
	0x03811074 ORR W8, W8, 0x8
	0x03811078 B 0x3811088
	0x0381107C AND W8, W8, 0xFFFFFFEF
	0x03811080 B 0x3811088
	0x03811084 AND W8, W8, 0xFFFFFFF7
	0x03811088 STR W8, [X19 + 0xA8]
	0x0381108C LDP X20, X19, [X31 + 0x20]
	0x03811090 LDP X30, X21, [X31 + 0x10]
	0x03811094 ADD X31, X31, 0x30
	0x03811098 RET
	0x0381109C SUB X31, X31, 0x40
	0x038110A0 STP X30, X23, [X31 + 0x10]
	0x038110A4 STP X22, X21, [X31 + 0x20]
	0x038110A8 STP X20, X19, [X31 + 0x30]
	0x038110AC MOV X19, X1
	0x038110B0 MOV X21, X0
	0x038110B4 MOV X0, X1
	0x038110B8 MOV X1, X31
	0x038110BC MOV X20, X8
	0x038110C0 BL 0x32277A8
	0x038110C4 TBNZ X0, 0x0, 0x38111CC
	0x038110C8 LDR X8, [X21 + 0x90]
	0x038110CC CBZ X8, 0x3811150
	0x038110D0 MOV X22, X31
	0x038110D4 MOV X23, X31
	0x038110D8 LDR W9, [X8 + 0x18]
	0x038110DC CMP X23, W9, SXTW
	0x038110E0 B.GE 0x3811150
	0x038110E4 CMP X23, X9
	0x038110E8 B.CS 0x38111C8
	0x038110EC ADD X8, X8, X22

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move X19, 0xBC9000
	006 Move W8, [X19+2072]
	007 Move V8, V1
	008 Move V9, V0
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x8E3000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+2072], W8
	016 Move X8, 0x8E3000
	017 Move X8, [X8+1448]
	018 Move X0, [X8]
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Move X8, -47341568
	024 Move V2, [X8+380]
	025 Multiply S0, S9, S9
	026 Multiply S1, S8, S8
	027 Add S0, S0, S1
	028 NotImplemented "Instruction FSQRT not yet implemented."
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 NotImplemented "Instruction FDIV not yet implemented."
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 Move X19, 0xBC9000
	033 Move W8, [X19+1935]
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0x8EB000
	037 Move X0, [X0+3848]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X19+1935], W8
	041 Move X8, 0x8EB000
	042 Move X8, [X8+3848]
	043 Move X8, [X8]
	044 Move X8, [X8+184]
	045 Move S0, [X8]
	046 Move S1, [X8+4]
	047 Move X30, [X31+16]
	048 Move X19, [X31+24]
	049 Move D9, [X31+32]
	050 Move D8, [X31+40]
	051 Return X0

Method: System.String ToString()

Disassembly:
	0x038110F0 LDP X0, X1, [X8 + 0x20]
	0x038110F4 MOV X2, X19
	0x038110F8 MOV X3, X31
	0x038110FC BL 0x375F908
	0x03811100 TBNZ X0, 0x0, 0x3811118
	0x03811104 LDR X8, [X21 + 0x90]
	0x03811108 ADD X23, X23, 0x1
	0x0381110C ADD X22, X22, 0xD0
	0x03811110 CBNZ X8, 0x38110D8
	0x03811114 BL 0x1C16F20
	0x03811118 LDR X8, [X21 + 0x90]
	0x0381111C CBZ X8, 0x3811114
	0x03811120 LDR W9, [X8 + 0x18]
	0x03811124 CMP W23, W9
	0x03811128 B.CS 0x38111C8
	0x0381112C ADD X8, X8, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD1000
	005 Move X20, 0x93A000
	006 Move W8, [X19+1207]
	007 Move X20, [X20+1744]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x93A000
	013 Move X0, [X0+1744]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1207], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03811130 MOV X0, X20
	0x03811134 LDP X20, X19, [X31 + 0x30]
	0x03811138 LDP X22, X21, [X31 + 0x20]
	0x0381113C LDP X30, X23, [X31 + 0x10]
	0x03811140 ADD X1, X8, 0x20
	0x03811144 MOVZ W2, 0xD0
	0x03811148 ADD X31, X31, 0x40
	0x0381114C B 0x3EB1AC0
	0x03811150 LDP X8, X9, [X21 + 0x10]
	0x03811154 ADRP X0, 0x90D000
	0x03811158 STP X8, X9, [X31]
	0x0381115C LDR X0, [X0 + 0x510]
	0x03811160 BL 0x1C16D08
	0x03811164 ADD X1, X31, 0x0
	0x03811168 BL 0x1C16E04
	0x0381116C MOV X20, X0
	0x03811170 ADRP X0, 0x939000
	0x03811174 LDR X0, [X0 + 0x718]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBD1000
	006 Move X21, 0x93A000
	007 Move W8, [X20+1208]
	008 Move X21, [X21+1720]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x93A000
	015 Move X0, [X0+1720]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1208], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call InputProcessor`1<Vector2>..ctor, X0
	026 Return 

