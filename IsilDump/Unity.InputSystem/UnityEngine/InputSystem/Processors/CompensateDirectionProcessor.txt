Type: UnityEngine.InputSystem.Processors.CompensateDirectionProcessor

Method: UnityEngine.Vector3 Process(UnityEngine.Vector3 value, UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x038105F8 TBNZ X8, 0x0, 0x3810610
	0x038105FC ADRP X0, 0x90B000
	0x03810600 LDR X0, [X0 + 0x270]
	0x03810604 BL 0x1C16CF4
	0x03810608 MOVZ W8, 0x1
	0x0381060C STRB W8, [X20 + 0x4C1]
	0x03810610 LDR V0, [X19 + 0x10]
	0x03810614 FCMP S0, 0x0
	0x03810618 B.NE 0x3810644
	0x0381061C ADRP X8, 0x90B000
	0x03810620 LDR X8, [X8 + 0x270]
	0x03810624 LDR X0, [X8]
	0x03810628 LDR W8, [X0 + 0xE0]
	0x0381062C CBNZ W8, 0x3810634
	0x03810630 BL 0x1C16DFC
	0x03810634 MOV X0, X31
	0x03810638 BL 0x37701B0
	0x0381063C CBZ X0, 0x3810650
	0x03810640 LDR V0, [X0 + 0x38]
	0x03810644 LDP X20, X19, [X31 + 0x10]
	0x03810648 LDR X30, [X31], #0x20
	0x0381064C RET
	0x03810650 BL 0x1C16F20
	0x03810654 STR X30, [X31 - 0x20]!
	0x03810658 STP X20, X19, [X31 + 0x10]
	0x0381065C ADRP X20, 0xBD1000
	0x03810660 LDRB W8, [X20 + 0x4C2]
	0x03810664 MOV X19, X0
	0x03810668 TBNZ X8, 0x0, 0x3810680
	0x0381066C ADRP X0, 0x90B000
	0x03810670 LDR X0, [X0 + 0x270]
	0x03810674 BL 0x1C16CF4
	0x03810678 MOVZ W8, 0x1
	0x0381067C STRB W8, [X20 + 0x4C2]
	0x03810680 LDR V0, [X19 + 0x14]
	0x03810684 FCMP S0, 0x0
	0x03810688 B.NE 0x38106B4
	0x0381068C ADRP X8, 0x90B000
	0x03810690 LDR X8, [X8 + 0x270]
	0x03810694 LDR X0, [X8]
	0x03810698 LDR W8, [X0 + 0xE0]
	0x0381069C CBNZ W8, 0x38106A4
	0x038106A0 BL 0x1C16DFC
	0x038106A4 MOV X0, X31
	0x038106A8 BL 0x37701B0
	0x038106AC CBZ X0, 0x38106C0
	0x038106B0 LDR V0, [X0 + 0x3C]
	0x038106B4 LDP X20, X19, [X31 + 0x10]
	0x038106B8 LDR X30, [X31], #0x20
	0x038106BC RET
	0x038106C0 BL 0x1C16F20
	0x038106C4 STR D10, [X31 - 0x30]!
	0x038106C8 STP D9, D8, [X31 + 0x8]
	0x038106CC STR X30, [X31 + 0x18]
	0x038106D0 STP X20, X19, [X31 + 0x20]
	0x038106D4 ADRP X20, 0xBC9000
	0x038106D8 LDRB W8, [X20 + 0x818]
	0x038106DC MOV V8.16B, V1.16B
	0x038106E0 MOV V9.16B, V0.16B
	0x038106E4 MOV X19, X0
	0x038106E8 CBNZ W8, 0x3810700
	0x038106EC ADRP X0, 0x8E3000
	0x038106F0 LDR X0, [X0 + 0x5A8]
	0x038106F4 BL 0x1C16CF4
	0x038106F8 MOVZ W8, 0x1
	0x038106FC STRB W8, [X20 + 0x818]
	0x03810700 ADRP X8, 0x8E3000
	0x03810704 LDR X8, [X8 + 0x5A8]
	0x03810708 LDR X0, [X8]
	0x0381070C LDR W8, [X0 + 0xE0]
	0x03810710 CBNZ W8, 0x3810718
	0x03810714 BL 0x1C16DFC
	0x03810718 FMUL S0, S9, S9
	0x0381071C FMUL S1, S8, S8
	0x03810720 FADD S0, S0, S1
	0x03810724 FSQRT S10, S0
	0x03810728 MOV X0, X19
	0x0381072C MOV V0.16B, V10.16B
	0x03810730 BL 0x3810794
	0x03810734 FCMP S0, 0x0
	0x03810738 B.NE 0x3810774
	0x0381073C ADRP X19, 0xBC9000
	0x03810740 LDRB W8, [X19 + 0x78F]
	0x03810744 CBNZ W8, 0x381075C
	0x03810748 ADRP X0, 0x8EB000
	0x0381074C LDR X0, [X0 + 0xF08]
	0x03810750 BL 0x1C16CF4
	0x03810754 MOVZ W8, 0x1
	0x03810758 STRB W8, [X19 + 0x78F]
	0x0381075C ADRP X8, 0x8EB000
	0x03810760 LDR X8, [X8 + 0xF08]
	0x03810764 LDR X8, [X8]
	0x03810768 LDR X8, [X8 + 0xB8]
	0x0381076C LDP S0, S1, [X8]
	0x03810770 B 0x3810780
	0x03810774 FDIV S1, S0, S10
	0x03810778 FMUL S0, S9, S1
	0x0381077C FMUL S1, S8, S1
	0x03810780 LDP X20, X19, [X31 + 0x20]
	0x03810784 LDR X30, [X31 + 0x18]
	0x03810788 LDP D9, D8, [X31 + 0x8]
	0x0381078C LDR V10, [X31], #0x30
	0x03810790 RET
	0x03810794 STP D9, D8, [X31 - 0x20]!
	0x03810798 STP X30, X19, [X31 + 0x10]
	0x0381079C MOV V9.16B, V0.16B
	0x038107A0 MOV X19, X0
	0x038107A4 BL 0x38105E4
	0x038107A8 MOV X0, X19
	0x038107AC MOV V8.16B, V0.16B
	0x038107B0 BL 0x3810654
	0x038107B4 FABS S2, S9
	0x038107B8 MOV V1.16B, V0.16B
	0x038107BC FCMP S2, S8
	0x038107C0 FMOV S0, W31
	0x038107C4 B.MI 0x38107F0
	0x038107C8 FCMP S9, 0x0
	0x038107CC FMOV S0, -1
	0x038107D0 FMOV S3, 1
	0x038107D4 FCSEL S0, S3, S0, GE
	0x038107D8 FCMP S2, S1
	0x038107DC B.GT 0x38107F0
	0x038107E0 FSUB S2, S2, S8
	0x038107E4 FSUB S1, S1, S8

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, 0xBD2000
	012 Move X20, 0x90C000
	013 Move W8, [X19+1193]
	014 Move X20, [X20+624]
	015 Move V8, V2
	016 Move V9, V1
	017 Move V10, V0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x90C000
	023 Move X0, [X0+3792]
	024 Call 0x1C17CF4
	025 Move X0, 0x90C000
	026 Move X0, [X0+3784]
	027 Call 0x1C17CF4
	028 Move X0, 0x90C000
	029 Move X0, [X0+624]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X19+1193], W8
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X31
	039 Call InputSystem.get_settings
	040 Compare X0, 0
	041 JumpIfEqual {136}
	042 Move W8, [X0+44]
	043 Compare W8, 0
	044 JumpIfEqual {122}
	045 Move X20, 0xBC9000
	046 Move X19, 0x90C000
	047 Move W8, [X20+1939]
	048 Move X19, [X19+3784]
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0x8E5000
	052 Move X0, [X0+1448]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X20+1939], W8
	056 Move X8, [X19]
	057 Move X8, [X8+184]
	058 Move X19, [X8]
	059 Compare X19, 0
	060 JumpIfEqual {136}
	061 Move X8, 0x8E5000
	062 Move X8, [X8+1448]
	063 Move X11, 0x90C000
	064 Move X9, [X8]
	065 Move X8, [X19]
	066 Move X10, [X9+184]
	067 Move X11, [X11+3792]
	068 NotImplemented "Instruction LDRH not yet implemented."
	069 Move S11, [X10]
	070 Move S12, [X10+4]
	071 Move S13, [X10+8]
	072 Move S14, [X10+12]
	073 Move X1, [X11]
	074 Compare X9, 0
	075 JumpIfEqual {82}
	076 Move X10, [X8+176]
	077 Add X10, X10, 8
	078 NotImplemented "Instruction LDUR not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Subtract X9, X9, 1
	081 Add X10, X10, 16
	082 Move W2, 26
	083 Move X0, X19
	084 Call 0x1C5D788
	085 Move W9, [X10]
	086 Add W9, W9, 26
	087 Add X8, X8, W9
	088 Add X0, X8, 312
	089 Move X8, [X0]
	090 Move X1, [X0+8]
	091 Move X0, X19
	092 NotImplemented "Instruction BLR not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, -47337472
	097 Move V2, [X8+384]
	098 Move X8, -47341568
	099 Move V2, [X8+3916]
	100 Move X8, -47337472
	101 Move V2, [X8+520]
	102 Move S0, W31
	103 Move V1, V0
	104 Move X0, X31
	105 Call Quaternion.Internal_FromEulerRad, X0
	106 Move V11, V0
	107 Move V12, V1
	108 Move V13, V2
	109 Move V14, V3
	110 Move V0, V11
	111 Move V1, V12
	112 Move V2, V13
	113 Move V3, V14
	114 Move V4, V10
	115 Move V5, V9
	116 Move V6, V8
	117 Move X0, X31
	118 Call Quaternion.op_Multiply, X0, X1
	119 Move V10, V0
	120 Move V9, V1
	121 Move V8, V2
	122 Move V0, V10
	123 Move V1, V9
	124 Move V2, V8
	125 Move X20, [X31+64]
	126 Move X19, [X31+72]
	127 Move X30, [X31+56]
	128 Move D9, [X31+40]
	129 Move D8, [X31+48]
	130 Move D11, [X31+24]
	131 Move D10, [X31+32]
	132 Move D13, [X31+8]
	133 Move D12, [X31+16]
	134 Move V14, [X31+80]
	135 Return X0
	136 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x038107E8 FDIV S1, S2, S1
	0x038107EC FMUL S0, S0, S1
	0x038107F0 LDP X30, X19, [X31 + 0x10]
	0x038107F4 LDP D9, D8, [X31], #0x20
	0x038107F8 RET
	0x038107FC STR X30, [X31 - 0x30]!
	0x03810800 STP X22, X21, [X31 + 0x10]
	0x03810804 STP X20, X19, [X31 + 0x20]
	0x03810808 ADRP X20, 0xBD1000
	0x0381080C ADRP X22, 0x8E3000
	0x03810810 ADRP X21, 0x93A000
	0x03810814 LDRB W8, [X20 + 0x4C3]
	0x03810818 LDR X22, [X22 + 0xA90]
	0x0381081C LDR X21, [X21 + 0x6F8]
	0x03810820 MOV X19, X0
	0x03810824 TBNZ X8, 0x0, 0x3810848

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD2000
	005 Move X20, 0x93B000
	006 Move W8, [X19+1194]
	007 Move X20, [X20+1672]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x93B000
	013 Move X0, [X0+1672]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1194], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: UnityEngine.InputSystem.InputProcessor/CachingPolicy get_cachingPolicy()

Disassembly:
	0x03810828 ADRP X0, 0x8E3000
	0x0381082C LDR X0, [X0 + 0xA90]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03810830 BL 0x1C16CF4
	0x03810834 ADRP X0, 0x93A000
	0x03810838 LDR X0, [X0 + 0x6F8]
	0x0381083C BL 0x1C16CF4
	0x03810840 MOVZ W8, 0x1
	0x03810844 STRB W8, [X20 + 0x4C3]
	0x03810848 MOV X0, X19
	0x0381084C BL 0x38105E4
	0x03810850 LDR X0, [X22]
	0x03810854 ADD X1, X31, 0xC
	0x03810858 STR S0, [X31 + 0xC]
	0x0381085C BL 0x1C16E04
	0x03810860 MOV X20, X0
	0x03810864 MOV X0, X19
	0x03810868 BL 0x3810654
	0x0381086C LDR X0, [X22]
	0x03810870 ADD X1, X31, 0x8
	0x03810874 STR S0, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBD2000
	006 Move X21, 0x93B000
	007 Move W8, [X20+1195]
	008 Move X21, [X21+1680]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x93B000
	015 Move X0, [X0+1680]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1195], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call InputProcessor`1<Vector3>..ctor, X0
	026 Return 

