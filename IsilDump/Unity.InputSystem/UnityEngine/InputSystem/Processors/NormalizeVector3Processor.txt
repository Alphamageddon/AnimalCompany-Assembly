Type: UnityEngine.InputSystem.Processors.NormalizeVector3Processor

Method: UnityEngine.Vector3 Process(UnityEngine.Vector3 value, UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x03811178 BL 0x1C16D08
	0x0381117C MOV X1, X19
	0x03811180 MOV X2, X20
	0x03811184 MOV X3, X31
	0x03811188 BL 0x3227BD4
	0x0381118C MOV X19, X0
	0x03811190 ADRP X0, 0x8E5000
	0x03811194 LDR X0, [X0 + 0x78]
	0x03811198 BL 0x1C16D08
	0x0381119C BL 0x1C16F10
	0x038111A0 MOV X1, X19
	0x038111A4 MOV X2, X31
	0x038111A8 MOV X20, X0
	0x038111AC BL 0x335DC08
	0x038111B0 ADRP X0, 0x939000
	0x038111B4 LDR X0, [X0 + 0x720]
	0x038111B8 BL 0x1C16D08
	0x038111BC MOV X1, X0
	0x038111C0 MOV X0, X20
	0x038111C4 BL 0x1C16DEC
	0x038111C8 BL 0x1C16F28
	0x038111CC ADRP X0, 0x8E7000
	0x038111D0 LDR X0, [X0 + 0x528]
	0x038111D4 BL 0x1C16D08
	0x038111D8 BL 0x1C16F10
	0x038111DC MOV X19, X0
	0x038111E0 ADRP X0, 0x8ED000
	0x038111E4 LDR X0, [X0 + 0x120]
	0x038111E8 BL 0x1C16D08
	0x038111EC MOV X1, X0
	0x038111F0 MOV X0, X19
	0x038111F4 MOV X2, X31
	0x038111F8 BL 0x330E100
	0x038111FC ADRP X0, 0x939000
	0x03811200 LDR X0, [X0 + 0x720]
	0x03811204 BL 0x1C16D08
	0x03811208 MOV X1, X0
	0x0381120C MOV X0, X19
	0x03811210 BL 0x1C16DEC
	0x03811214 SUB X31, X31, 0x1E0
	0x03811218 STP X29, X30, [X31 + 0x1A0]
	0x0381121C STP X24, X23, [X31 + 0x1B0]
	0x03811220 STP X22, X21, [X31 + 0x1C0]
	0x03811224 STP X20, X19, [X31 + 0x1D0]
	0x03811228 ADRP X23, 0xBD0000
	0x0381122C LDRB W9, [X23 + 0x4CF]
	0x03811230 MOV X20, X2
	0x03811234 MOV X22, X1
	0x03811238 MOV X21, X0
	0x0381123C MOV X19, X8
	0x03811240 TBNZ X9, 0x0, 0x3811258
	0x03811244 ADRP X0, 0x939000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, 0xBC8000
	007 Move W8, [X19+1925]
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, 0x8E3000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1925], W8
	018 Move X8, 0x8E3000
	019 Move X8, [X8+1448]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Multiply S0, S10, S10
	026 Multiply S1, S9, S9
	027 Move X8, -47341568
	028 Add S0, S0, S1
	029 Move V1, [X8+380]
	030 Multiply S2, S8, S8
	031 Add S0, S2, S0
	032 NotImplemented "Instruction FSQRT not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FDIV not yet implemented."
	035 NotImplemented "Instruction FDIV not yet implemented."
	036 NotImplemented "Instruction FDIV not yet implemented."
	037 Move X19, 0xBC8000
	038 Move W8, [X19+1923]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x8E3000
	042 Move X0, [X0+1440]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X19+1923], W8
	046 Move X8, 0x8E3000
	047 Move X8, [X8+1440]
	048 Move X8, [X8]
	049 Move X8, [X8+184]
	050 Move S0, [X8]
	051 Move S1, [X8+4]
	052 Move V2, [X8+8]
	053 Move X30, [X31+32]
	054 Move X19, [X31+40]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move V10, [X31+48]
	058 Return X0

Method: System.String ToString()

Disassembly:
	0x03811248 LDR X0, [X0 + 0x728]
	0x0381124C BL 0x1C16CF4
	0x03811250 MOVZ W8, 0x1
	0x03811254 STRB W8, [X23 + 0x4CF]
	0x03811258 MOV X0, X22
	0x0381125C MOV X1, X20
	0x03811260 MOV X2, X31
	0x03811264 BL 0x37577E0
	0x03811268 MOV X1, X31
	0x0381126C BL 0x32277A8
	0x03811270 TBNZ X0, 0x0, 0x381135C
	0x03811274 LDR X8, [X21 + 0x90]
	0x03811278 CBZ X8, 0x38112C8
	0x0381127C MOV X23, X31
	0x03811280 MOV X24, X31
	0x03811284 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBD1000
	005 Move X20, 0x93A000
	006 Move W8, [X19+1209]
	007 Move X20, [X20+1752]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x93A000
	013 Move X0, [X0+1752]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1209], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03811288 CMP X24, W9, SXTW
	0x0381128C B.GE 0x38112C8
	0x03811290 CMP X24, X9
	0x03811294 B.CS 0x3811358
	0x03811298 ADD X8, X8, X23
	0x0381129C LDP X0, X1, [X8 + 0x20]
	0x038112A0 MOV X2, X22
	0x038112A4 MOV X3, X20
	0x038112A8 MOV X4, X31
	0x038112AC BL 0x37564A4
	0x038112B0 TBNZ X0, 0x0, 0x38112DC
	0x038112B4 LDR X8, [X21 + 0x90]
	0x038112B8 ADD X24, X24, 0x1
	0x038112BC ADD X23, X23, 0xD0
	0x038112C0 CBNZ X8, 0x3811284
	0x038112C4 BL 0x1C16F20
	0x038112C8 MOVZ W2, 0xD8
	0x038112CC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBD1000
	006 Move X21, 0x93A000
	007 Move W8, [X20+1210]
	008 Move X21, [X21+1680]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x93A000
	015 Move X0, [X0+1680]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1210], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call InputProcessor`1<Vector3>..ctor, X0
	026 Return 

