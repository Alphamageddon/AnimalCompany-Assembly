Type: UnityEngine.InputSystem.Controls.TouchPhaseControl

Method: System.Void .ctor()

Disassembly:
	0x0375BE58 LDP X20, X19, [X31 + 0x20]
	0x0375BE5C LDP X30, X21, [X31 + 0x10]
	0x0375BE60 MOV X1, X31
	0x0375BE64 LDP D9, D8, [X31], #0x30
	0x0375BE68 B 0x376C754
	0x0375BE6C MOV X0, X19
	0x0375BE70 MOV X1, X31
	0x0375BE74 BL 0x376C624
	0x0375BE78 CMP W0, 0x3
	0x0375BE7C B.EQ 0x375BF1C
	0x0375BE80 CMP W0, 0x2
	0x0375BE84 B.EQ 0x375BF60
	0x0375BE88 CMP W0, 0x1
	0x0375BE8C B.NE 0x375BFAC
	0x0375BE90 ADRP X21, 0xC85000
	0x0375BE94 LDRB W8, [X21 + 0xE20]
	0x0375BE98 TBNZ X8, 0x0, 0x375BEB0
	0x0375BE9C ADRP X0, 0x9C0000
	0x0375BEA0 LDR X0, [X0 + 0xC90]
	0x0375BEA4 BL 0x1C16CF4
	0x0375BEA8 MOVZ W8, 0x1
	0x0375BEAC STRB W8, [X21 + 0xE20]
	0x0375BEB0 LDR V0, [X20 + 0x14]
	0x0375BEB4 FCMP S0, 0x0
	0x0375BEB8 B.GT 0x375BED0
	0x0375BEBC ADRP X8, 0x9C0000
	0x0375BEC0 LDR X8, [X8 + 0xC90]
	0x0375BEC4 LDR X8, [X8]
	0x0375BEC8 LDR X8, [X8 + 0xB8]
	0x0375BECC LDR V0, [X8]
	0x0375BED0 MOV X0, X19
	0x0375BED4 MOV X1, X31
	0x0375BED8 BL 0x376C690
	0x0375BEDC TBZ X0, 0x0, 0x375BFAC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC86000
	007 Move X22, 0x9EC000
	008 Move X20, 0x9C1000
	009 Move W8, [X21+3598]
	010 Move X22, [X22+208]
	011 Move X20, [X20+3352]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x9EC000
	018 Move X0, [X0+208]
	019 Call 0x1C17CF4
	020 Move X0, 0x9C1000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3598], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call InputControl`1<Int32Enum>..ctor, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move X8, [X0+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W8, [X8+12]
	038 Move [X19+16], W8
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: UnityEngine.InputSystem.TouchPhase ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x0375BEE0 MOV X0, X19
	0x0375BEE4 MOV X1, X31
	0x0375BEE8 BL 0x376C62C
	0x0375BEEC MOV X0, X19
	0x0375BEF0 MOV X1, X31
	0x0375BEF4 STR D0, [X20 + 0x18]
	0x0375BEF8 BL 0x376C69C
	0x0375BEFC MOV X0, X20
	0x0375BF00 BL 0x375BD68
	0x0375BF04 MOV X0, X19
	0x0375BF08 LDP X20, X19, [X31 + 0x20]
	0x0375BF0C LDP X30, X21, [X31 + 0x10]
	0x0375BF10 MOV X1, X31
	0x0375BF14 LDP D9, D8, [X31], #0x30
	0x0375BF18 B 0x376C814
	0x0375BF1C ADRP X21, 0xC85000
	0x0375BF20 LDRB W8, [X21 + 0xE20]
	0x0375BF24 TBNZ X8, 0x0, 0x375BF3C
	0x0375BF28 ADRP X0, 0x9C0000
	0x0375BF2C LDR X0, [X0 + 0xC90]
	0x0375BF30 BL 0x1C16CF4
	0x0375BF34 MOVZ W8, 0x1
	0x0375BF38 STRB W8, [X21 + 0xE20]
	0x0375BF3C LDR V0, [X20 + 0x14]
	0x0375BF40 FCMP S0, 0x0
	0x0375BF44 B.GT 0x375BF9C
	0x0375BF48 ADRP X8, 0x9C0000
	0x0375BF4C LDR X8, [X8 + 0xC90]
	0x0375BF50 LDR X8, [X8]
	0x0375BF54 LDR X8, [X8 + 0xB8]
	0x0375BF58 LDR V0, [X8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xC86000
	008 Move X21, 0x9C1000
	009 Move W8, [X22+3599]
	010 Move X21, [X21+3352]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x9C1000
	018 Move X0, [X0+3352]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3599], W8
	022 Move V0, [X20+1]
	023 Move X0, [X21]
	024 Move [X31], V0
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X0, X31, 0
	030 Move X1, X19
	031 Move X2, X31
	032 Call InputStateBlock.ReadInt, X0, X1
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X30, [X31+16]
	038 Add X31, X31, 64
	039 Return X0

Method: System.Void WriteValueIntoState(UnityEngine.InputSystem.TouchPhase value, System.Void* statePtr)

Disassembly:
	0x0375BF5C B 0x375BF9C
	0x0375BF60 MOV X0, X19
	0x0375BF64 MOV X1, X31
	0x0375BF68 BL 0x376C62C
	0x0375BF6C LDR V9, [X20 + 0x18]
	0x0375BF70 MOV X0, X20
	0x0375BF74 MOV V8.16B, V0.16B
	0x0375BF78 BL 0x375BD68
	0x0375BF7C FSUB D1, D8, D9
	0x0375BF80 FCVT S0, S0
	0x0375BF84 FCMP D1, D0
	0x0375BF88 B.LT 0x375BF98
	0x0375BF8C MOV X0, X19
	0x0375BF90 MOV X1, X31
	0x0375BF94 BL 0x376C754
	0x0375BF98 FMOV S0, W31
	0x0375BF9C MOV X0, X19
	0x0375BFA0 MOV X1, X31
	0x0375BFA4 BL 0x376C690
	0x0375BFA8 TBZ X0, 0x0, 0x375BFBC
	0x0375BFAC LDP X20, X19, [X31 + 0x20]
	0x0375BFB0 LDP X30, X21, [X31 + 0x10]
	0x0375BFB4 LDP D9, D8, [X31], #0x30
	0x0375BFB8 RET
	0x0375BFBC MOV X0, X19
	0x0375BFC0 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xC86000
	008 Move X23, 0x9C1000
	009 Move W8, [X22+3600]
	010 Move X23, [X23+3352]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9C1000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3600], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 NotImplemented "Instruction LDRSW not yet implemented."
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move [X8], W20
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+48]
	035 Move X23, [X31+56]
	036 Return 

