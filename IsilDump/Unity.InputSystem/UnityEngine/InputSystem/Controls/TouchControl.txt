Type: UnityEngine.InputSystem.Controls.TouchControl

Method: UnityEngine.InputSystem.Controls.TouchPressControl get_press()

Disassembly:
	0x0375B860 MOV X19, X0
	0x0375B864 TBNZ X8, 0x0, 0x375B8AC

ISIL:
	001 Move X0, [X0+368]
	002 Return X0

Method: System.Void set_press(UnityEngine.InputSystem.Controls.TouchPressControl value)

Disassembly:
	0x0375B868 ADRP X0, 0x9EB000
	0x0375B86C LDR X0, [X0 + 0x120]

ISIL:
	001 Move [X0+368], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.IntegerControl get_displayIndex()

Disassembly:
	0x0375B870 BL 0x1C16CF4
	0x0375B874 ADRP X0, 0x9E9000

ISIL:
	001 Move X0, [X0+376]
	002 Return X0

Method: System.Void set_displayIndex(UnityEngine.InputSystem.Controls.IntegerControl value)

Disassembly:
	0x0375B878 LDR X0, [X0 + 0xE30]
	0x0375B87C BL 0x1C16CF4

ISIL:
	001 Move [X0+376], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.IntegerControl get_touchId()

Disassembly:
	0x0375B880 ADRP X0, 0x9C0000
	0x0375B884 LDR X0, [X0 + 0x780]

ISIL:
	001 Move X0, [X0+384]
	002 Return X0

Method: System.Void set_touchId(UnityEngine.InputSystem.Controls.IntegerControl value)

Disassembly:
	0x0375B888 BL 0x1C16CF4
	0x0375B88C ADRP X0, 0x9C0000

ISIL:
	001 Move [X0+384], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.Vector2Control get_position()

Disassembly:
	0x0375B890 LDR X0, [X0 + 0x788]
	0x0375B894 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+392]
	002 Return X0

Method: System.Void set_position(UnityEngine.InputSystem.Controls.Vector2Control value)

Disassembly:
	0x0375B898 ADRP X0, 0x9C5000
	0x0375B89C LDR X0, [X0 + 0x3D0]

ISIL:
	001 Move [X0+392], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.DeltaControl get_delta()

Disassembly:
	0x0375B8A0 BL 0x1C16CF4
	0x0375B8A4 MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+400]
	002 Return X0

Method: System.Void set_delta(UnityEngine.InputSystem.Controls.DeltaControl value)

Disassembly:
	0x0375B8A8 STRB W8, [X24 + 0xE1A]
	0x0375B8AC LDR X1, [X25]

ISIL:
	001 Move [X0+400], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_pressure()

Disassembly:
	0x0375B8B0 LDR X2, [X21]
	0x0375B8B4 MOV X0, X19

ISIL:
	001 Move X0, [X0+408]
	002 Return X0

Method: System.Void set_pressure(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375B8B8 BL 0x21FC754
	0x0375B8BC STR X0, [X19 + 0x118]

ISIL:
	001 Move [X0+408], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.Vector2Control get_radius()

Disassembly:
	0x0375B8C0 LDR X1, [X23]
	0x0375B8C4 LDR X2, [X21]

ISIL:
	001 Move X0, [X0+416]
	002 Return X0

Method: System.Void set_radius(UnityEngine.InputSystem.Controls.Vector2Control value)

Disassembly:
	0x0375B8C8 MOV X0, X19
	0x0375B8CC BL 0x21FC754

ISIL:
	001 Move [X0+416], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.TouchPhaseControl get_phase()

Disassembly:
	0x0375B8D0 STR X0, [X19 + 0x120]
	0x0375B8D4 LDR X1, [X22]

ISIL:
	001 Move X0, [X0+424]
	002 Return X0

Method: System.Void set_phase(UnityEngine.InputSystem.Controls.TouchPhaseControl value)

Disassembly:
	0x0375B8D8 LDR X2, [X21]
	0x0375B8DC MOV X0, X19

ISIL:
	001 Move [X0+424], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.ButtonControl get_indirectTouch()

Disassembly:
	0x0375B8E0 BL 0x21FC754
	0x0375B8E4 STR X0, [X19 + 0x128]

ISIL:
	001 Move X0, [X0+432]
	002 Return X0

Method: System.Void set_indirectTouch(UnityEngine.InputSystem.Controls.ButtonControl value)

Disassembly:
	0x0375B8E8 LDR X1, [X20]
	0x0375B8EC MOV X0, X19

ISIL:
	001 Move [X0+432], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.ButtonControl get_tap()

Disassembly:
	0x0375B8F0 LDP X20, X19, [X31 + 0x30]
	0x0375B8F4 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move X0, [X0+440]
	002 Return X0

Method: System.Void set_tap(UnityEngine.InputSystem.Controls.ButtonControl value)

Disassembly:
	0x0375B8F8 LDP X24, X23, [X31 + 0x10]
	0x0375B8FC LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X0+440], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.IntegerControl get_tapCount()

Disassembly:
	0x0375B900 B 0x2E0B3A0
	0x0375B904 STP D9, D8, [X31 - 0x30]!

ISIL:
	001 Move X0, [X0+448]
	002 Return X0

Method: System.Void set_tapCount(UnityEngine.InputSystem.Controls.IntegerControl value)

Disassembly:
	0x0375B908 STP X30, X21, [X31 + 0x10]
	0x0375B90C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X0+448], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.DoubleControl get_startTime()

Disassembly:
	0x0375B910 ADRP X21, 0xC85000
	0x0375B914 LDRB W8, [X21 + 0xE1B]

ISIL:
	001 Move X0, [X0+456]
	002 Return X0

Method: System.Void set_startTime(UnityEngine.InputSystem.Controls.DoubleControl value)

Disassembly:
	0x0375B918 MOV X19, X1
	0x0375B91C MOV X20, X0

ISIL:
	001 Move [X0+456], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.Vector2Control get_startPosition()

Disassembly:
	0x0375B920 TBNZ X8, 0x0, 0x375B944
	0x0375B924 ADRP X0, 0x9EB000

ISIL:
	001 Move X0, [X0+464]
	002 Return X0

Method: System.Void set_startPosition(UnityEngine.InputSystem.Controls.Vector2Control value)

Disassembly:
	0x0375B928 LDR X0, [X0 + 0x28]
	0x0375B92C BL 0x1C16CF4

ISIL:
	001 Move [X0+464], X1
	002 Return 

Method: System.Boolean get_isInProgress()

Disassembly:
	0x0375B930 ADRP X0, 0x9C0000
	0x0375B934 LDR X0, [X0 + 0xD18]
	0x0375B938 BL 0x1C16CF4
	0x0375B93C MOVZ W8, 0x1
	0x0375B940 STRB W8, [X21 + 0xE1B]
	0x0375B944 LDR W8, [X20 + 0xD8]
	0x0375B948 MOVZ W9, 0x4333
	0x0375B94C MOVK W9, 0x56450000
	0x0375B950 CMP W8, W9
	0x0375B954 B.NE 0x375B984
	0x0375B958 ADRP X8, 0x9C0000
	0x0375B95C LDR X8, [X8 + 0xD18]
	0x0375B960 LDR X0, [X8]
	0x0375B964 LDR W8, [X0 + 0xE0]
	0x0375B968 CBNZ W8, 0x375B970
	0x0375B96C BL 0x1C16DFC
	0x0375B970 LDRSW X8, [X20 + 0x14]
	0x0375B974 ADD X8, X8, X19
	0x0375B978 LDP S8, S9, [X8]
	0x0375B97C LDR V2, [X8 + 0x8]
	0x0375B980 B 0x375B9D4
	0x0375B984 LDR X0, [X20 + 0x118]
	0x0375B988 CBZ X0, 0x375B9EC
	0x0375B98C ADRP X21, 0x9EB000
	0x0375B990 LDR X21, [X21 + 0x28]
	0x0375B994 MOV X1, X19
	0x0375B998 LDR X2, [X21]
	0x0375B99C BL 0x2E05DE8
	0x0375B9A0 LDR X0, [X20 + 0x120]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xC86000
	005 Move W8, [X20+3593]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x9EC000
	012 Move X0, [X0+48]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3593], W8
	016 Move X0, [X19+424]
	017 Compare X0, 0
	018 JumpIfEqual {33}
	019 Move X8, 0x9EC000
	020 Move X8, [X8+48]
	021 Move X1, [X8]
	022 Call InputControl`1<Int32Enum>.get_value, X0
	023 Move W8, [X0]
	024 Subtract W9, W8, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Move W0, 1
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0
	033 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0375B9A4 CBZ X0, 0x375B9EC
	0x0375B9A8 LDR X2, [X21]
	0x0375B9AC MOV X1, X19
	0x0375B9B0 MOV V8.16B, V0.16B
	0x0375B9B4 BL 0x2E05DE8
	0x0375B9B8 LDR X0, [X20 + 0x128]
	0x0375B9BC CBZ X0, 0x375B9EC
	0x0375B9C0 LDR X2, [X21]
	0x0375B9C4 MOV X1, X19
	0x0375B9C8 MOV V9.16B, V0.16B
	0x0375B9CC BL 0x2E05DE8
	0x0375B9D0 MOV V2.16B, V0.16B
	0x0375B9D4 LDP X20, X19, [X31 + 0x20]
	0x0375B9D8 LDP X30, X21, [X31 + 0x10]
	0x0375B9DC MOV V0.16B, V8.16B
	0x0375B9E0 MOV V1.16B, V9.16B
	0x0375B9E4 LDP D9, D8, [X31], #0x30
	0x0375B9E8 RET
	0x0375B9EC BL 0x1C16F20
	0x0375B9F0 STR D10, [X31 - 0x40]!
	0x0375B9F4 STP D9, D8, [X31 + 0x10]
	0x0375B9F8 STP X30, X21, [X31 + 0x20]
	0x0375B9FC STP X20, X19, [X31 + 0x30]
	0x0375BA00 ADRP X21, 0xC85000
	0x0375BA04 LDRB W8, [X21 + 0xE1C]
	0x0375BA08 MOV X19, X1
	0x0375BA0C MOV V8.16B, V2.16B
	0x0375BA10 MOV V9.16B, V1.16B
	0x0375BA14 MOV V10.16B, V0.16B
	0x0375BA18 MOV X20, X0
	0x0375BA1C TBNZ X8, 0x0, 0x375BA34
	0x0375BA20 ADRP X0, 0x9C0000
	0x0375BA24 LDR X0, [X0 + 0xD18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC86000
	007 Move X22, 0x9EC000
	008 Move X20, 0x9C1000
	009 Move W8, [X21+3594]
	010 Move X22, [X22+56]
	011 Move X20, [X20+3352]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x9EC000
	018 Move X0, [X0+56]
	019 Call 0x1C17CF4
	020 Move X0, 0x9C1000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3594], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call InputControl`1<TouchState>..ctor, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move W8, 0x5543
	034 NotImplemented "Instruction MOVK not yet implemented."
	035 Move [X19+16], W8
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x0375BA48 ADRP X8, 0x9C0000
	0x0375BA4C LDR X8, [X8 + 0xD18]
	0x0375BA50 LDR X0, [X8]
	0x0375BA54 LDR W8, [X0 + 0xE0]
	0x0375BA58 CBNZ W8, 0x375BA60
	0x0375BA5C BL 0x1C16DFC
	0x0375BA60 LDRSW X8, [X20 + 0x14]
	0x0375BA64 LDP X30, X21, [X31 + 0x20]
	0x0375BA68 ADD X8, X8, X19
	0x0375BA6C STP S10, S9, [X8]
	0x0375BA70 STR S8, [X8 + 0x8]
	0x0375BA74 LDP X20, X19, [X31 + 0x30]
	0x0375BA78 LDP D9, D8, [X31 + 0x10]
	0x0375BA7C LDR V10, [X31], #0x40
	0x0375BA80 RET
	0x0375BA84 LDR X0, [X20 + 0x118]
	0x0375BA88 CBZ X0, 0x375BAF4
	0x0375BA8C LDR X8, [X0]
	0x0375BA90 MOV V0.16B, V10.16B
	0x0375BA94 MOV X1, X19
	0x0375BA98 LDR X9, [X8 + 0x258]
	0x0375BA9C LDR X2, [X8 + 0x260]
	0x0375BAA0 BLR X9
	0x0375BAA4 LDR X0, [X20 + 0x120]
	0x0375BAA8 CBZ X0, 0x375BAF4
	0x0375BAAC LDR X8, [X0]
	0x0375BAB0 MOV V0.16B, V9.16B
	0x0375BAB4 MOV X1, X19
	0x0375BAB8 LDR X9, [X8 + 0x258]
	0x0375BABC LDR X2, [X8 + 0x260]
	0x0375BAC0 BLR X9
	0x0375BAC4 LDR X0, [X20 + 0x128]
	0x0375BAC8 CBZ X0, 0x375BAF4
	0x0375BACC LDR X8, [X0]
	0x0375BAD0 MOV V0.16B, V8.16B
	0x0375BAD4 MOV X1, X19
	0x0375BAD8 LDP X20, X19, [X31 + 0x30]
	0x0375BADC LDR X3, [X8 + 0x258]
	0x0375BAE0 LDR X2, [X8 + 0x260]
	0x0375BAE4 LDP X30, X21, [X31 + 0x20]
	0x0375BAE8 LDP D9, D8, [X31 + 0x10]
	0x0375BAEC LDR V10, [X31], #0x40
	0x0375BAF0 BR X3
	0x0375BAF4 BL 0x1C16F20
	0x0375BAF8 STR D10, [X31 - 0x40]!
	0x0375BAFC STP D9, D8, [X31 + 0x8]
	0x0375BB00 STR X30, [X31 + 0x18]
	0x0375BB04 STP X22, X21, [X31 + 0x20]
	0x0375BB08 STP X20, X19, [X31 + 0x30]
	0x0375BB0C ADRP X21, 0xC85000
	0x0375BB10 ADRP X22, 0x9EB000
	0x0375BB14 LDRB W8, [X21 + 0xE1D]
	0x0375BB18 LDR X22, [X22 + 0x128]
	0x0375BB1C MOV X19, X1
	0x0375BB20 MOV X20, X0
	0x0375BB24 TBNZ X8, 0x0, 0x375BB3C
	0x0375BB28 ADRP X0, 0x9EB000
	0x0375BB2C LDR X0, [X0 + 0x128]
	0x0375BB30 BL 0x1C16CF4
	0x0375BB34 MOVZ W8, 0x1
	0x0375BB38 STRB W8, [X21 + 0xE1D]
	0x0375BB3C LDR X2, [X22]
	0x0375BB40 MOV X0, X20
	0x0375BB44 MOV X1, X19
	0x0375BB48 BL 0x2E0A84C
	0x0375BB4C ADRP X19, 0xC7D000
	0x0375BB50 LDRB W8, [X19 + 0x784]
	0x0375BB54 MOV V8.16B, V0.16B
	0x0375BB58 MOV V9.16B, V1.16B
	0x0375BB5C MOV V10.16B, V2.16B
	0x0375BB60 CBNZ W8, 0x375BB78
	0x0375BB64 ADRP X0, 0x998000
	0x0375BB68 LDR X0, [X0 + 0x5A8]
	0x0375BB6C BL 0x1C16CF4
	0x0375BB70 MOVZ W8, 0x1
	0x0375BB74 STRB W8, [X19 + 0x784]
	0x0375BB78 ADRP X8, 0x998000
	0x0375BB7C LDR X8, [X8 + 0x5A8]
	0x0375BB80 LDR X0, [X8]
	0x0375BB84 LDR W8, [X0 + 0xE0]
	0x0375BB88 CBNZ W8, 0x375BB90
	0x0375BB8C BL 0x1C16DFC
	0x0375BB90 FMUL S0, S8, S8
	0x0375BB94 FMUL S1, S9, S9
	0x0375BB98 LDP X20, X19, [X31 + 0x30]
	0x0375BB9C LDP X22, X21, [X31 + 0x20]
	0x0375BBA0 LDR X30, [X31 + 0x18]
	0x0375BBA4 LDP D9, D8, [X31 + 0x8]
	0x0375BBA8 FADD S0, S0, S1
	0x0375BBAC FMUL S1, S10, S10
	0x0375BBB0 FADD S0, S1, S0
	0x0375BBB4 FSQRT S0, S0
	0x0375BBB8 LDR V10, [X31], #0x40
	0x0375BBBC RET
	0x0375BBC0 STR X30, [X31 - 0x30]!
	0x0375BBC4 STP X22, X21, [X31 + 0x10]
	0x0375BBC8 STP X20, X19, [X31 + 0x20]
	0x0375BBCC ADRP X21, 0xC85000
	0x0375BBD0 ADRP X20, 0x9C0000
	0x0375BBD4 LDRB W8, [X21 + 0xE1E]
	0x0375BBD8 LDR X20, [X20 + 0xD18]
	0x0375BBDC MOV X19, X0
	0x0375BBE0 TBNZ X8, 0x0, 0x375BBF8
	0x0375BBE4 ADRP X0, 0x9C0000
	0x0375BBE8 LDR X0, [X0 + 0xD18]
	0x0375BBEC BL 0x1C16CF4
	0x0375BBF0 MOVZ W8, 0x1
	0x0375BBF4 STRB W8, [X21 + 0xE1E]
	0x0375BBF8 LDR X0, [X20]
	0x0375BBFC LDR W8, [X0 + 0xE0]
	0x0375BC00 CBNZ W8, 0x375BC08
	0x0375BC04 BL 0x1C16DFC
	0x0375BC08 LDR W8, [X19 + 0x1C]
	0x0375BC0C CMP W8, 0x60
	0x0375BC10 B.NE 0x375BD38
	0x0375BC14 LDR X0, [X20]
	0x0375BC18 LDR W8, [X0 + 0xE0]
	0x0375BC1C CBNZ W8, 0x375BC24
	0x0375BC20 BL 0x1C16DFC
	0x0375BC24 LDR W8, [X19 + 0x18]
	0x0375BC28 CBNZ W8, 0x375BD38
	0x0375BC2C LDR X8, [X19 + 0x118]
	0x0375BC30 CBZ X8, 0x375BD64
	0x0375BC34 LDR X0, [X20]
	0x0375BC38 LDR W22, [X8 + 0xD8]
	0x0375BC3C LDR W9, [X0 + 0xE0]
	0x0375BC40 CBNZ W9, 0x375BC4C
	0x0375BC44 BL 0x1C16DFC
	0x0375BC48 LDR X0, [X20]
	0x0375BC4C LDR X8, [X0 + 0xB8]
	0x0375BC50 LDR W8, [X8 + 0x2C]
	0x0375BC54 CMP W22, W8
	0x0375BC58 B.NE 0x375BD38
	0x0375BC5C LDR X8, [X19 + 0x120]
	0x0375BC60 CBZ X8, 0x375BD64
	0x0375BC64 LDR W9, [X0 + 0xE0]
	0x0375BC68 LDR W21, [X8 + 0xD8]
	0x0375BC6C CBNZ W9, 0x375BC80
	0x0375BC70 BL 0x1C16DFC
	0x0375BC74 LDR X0, [X20]
	0x0375BC78 LDR X8, [X0 + 0xB8]
	0x0375BC7C LDR W22, [X8 + 0x2C]
	0x0375BC80 CMP W21, W22
	0x0375BC84 B.NE 0x375BD38
	0x0375BC88 LDR X8, [X19 + 0x128]
	0x0375BC8C CBZ X8, 0x375BD64
	0x0375BC90 LDR W9, [X0 + 0xE0]
	0x0375BC94 LDR W22, [X8 + 0xD8]
	0x0375BC98 CBNZ W9, 0x375BCAC
	0x0375BC9C BL 0x1C16DFC
	0x0375BCA0 LDR X0, [X20]
	0x0375BCA4 LDR X8, [X0 + 0xB8]
	0x0375BCA8 LDR W21, [X8 + 0x2C]
	0x0375BCAC CMP W22, W21
	0x0375BCB0 B.NE 0x375BD38
	0x0375BCB4 LDR X21, [X19 + 0x120]
	0x0375BCB8 CBZ X21, 0x375BD64
	0x0375BCBC LDR W8, [X0 + 0xE0]
	0x0375BCC0 CBNZ W8, 0x375BCC8
	0x0375BCC4 BL 0x1C16DFC
	0x0375BCC8 LDR X8, [X19 + 0x118]
	0x0375BCCC CBZ X8, 0x375BD64
	0x0375BCD0 LDR W9, [X8 + 0x14]
	0x0375BCD4 LDR W10, [X21 + 0x14]
	0x0375BCD8 ADD W9, W9, 0x4
	0x0375BCDC CMP W10, W9
	0x0375BCE0 B.NE 0x375BD38
	0x0375BCE4 LDR X21, [X19 + 0x128]
	0x0375BCE8 CBZ X21, 0x375BD64
	0x0375BCEC LDR X0, [X20]
	0x0375BCF0 LDR W9, [X0 + 0xE0]
	0x0375BCF4 CBNZ W9, 0x375BD04
	0x0375BCF8 BL 0x1C16DFC
	0x0375BCFC LDR X8, [X19 + 0x118]
	0x0375BD00 CBZ X8, 0x375BD64
	0x0375BD04 LDR W8, [X8 + 0x14]
	0x0375BD08 LDR W9, [X21 + 0x14]
	0x0375BD0C ADD W8, W8, 0x8
	0x0375BD10 CMP W9, W8
	0x0375BD14 B.NE 0x375BD38
	0x0375BD18 LDR X0, [X20]
	0x0375BD1C LDR W8, [X0 + 0xE0]
	0x0375BD20 CBNZ W8, 0x375BD2C
	0x0375BD24 BL 0x1C16DFC
	0x0375BD28 LDR X0, [X20]
	0x0375BD2C LDR X8, [X0 + 0xB8]
	0x0375BD30 ADD X8, X8, 0x38
	0x0375BD34 B 0x375BD50
	0x0375BD38 LDR X0, [X20]
	0x0375BD3C LDR W8, [X0 + 0xE0]
	0x0375BD40 CBNZ W8, 0x375BD4C
	0x0375BD44 BL 0x1C16DFC
	0x0375BD48 LDR X0, [X20]
	0x0375BD4C LDR X8, [X0 + 0xB8]
	0x0375BD50 LDR W0, [X8]
	0x0375BD54 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X25, 0xC86000
	014 Move X26, 0x9EC000
	015 Move X28, 0x9EC000
	016 Move X24, 0x9EC000
	017 Move X23, 0x9EC000
	018 Move X22, 0x9EC000
	019 Move X21, 0x9A4000
	020 Move X20, 0x9EA000
	021 Move X29, 0x9EC000
	022 Move X27, 0x9EA000
	023 Move X26, [X26+64]
	024 Move X28, [X28+72]
	025 Move X24, [X24+80]
	026 Move X23, [X23+88]
	027 Move X22, [X22+96]
	028 Move X21, [X21+696]
	029 Move X20, [X20+3640]
	030 Move X29, [X29+104]
	031 Move X27, [X27+3608]
	032 Move W8, [X25+3595]
	033 Move X19, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {106}
	038 Move X0, 0x9EC000
	039 Move X0, [X0+112]
	040 Call 0x1C17CF4
	041 Move X0, 0x9EA000
	042 Move X0, [X0+3632]
	043 Call 0x1C17CF4
	044 Move X0, 0x9EA000
	045 Move X0, [X0+3608]
	046 Call 0x1C17CF4
	047 Move X0, 0x9EC000
	048 Move X0, [X0+104]
	049 Call 0x1C17CF4
	050 Move X0, 0x9EC000
	051 Move X0, [X0+120]
	052 Call 0x1C17CF4
	053 Move X0, 0x9EC000
	054 Move X0, [X0+88]
	055 Call 0x1C17CF4
	056 Move X0, 0x9EC000
	057 Move X0, [X0+128]
	058 Call 0x1C17CF4
	059 Move X0, 0x9EC000
	060 Move X0, [X0+72]
	061 Call 0x1C17CF4
	062 Move X0, 0x9EA000
	063 Move X0, [X0+3640]
	064 Call 0x1C17CF4
	065 Move X0, 0x9EC000
	066 Move X0, [X0+136]
	067 Call 0x1C17CF4
	068 Move X0, 0x9EC000
	069 Move X0, [X0+64]
	070 Call 0x1C17CF4
	071 Move X0, 0x9EC000
	072 Move X0, [X0+144]
	073 Call 0x1C17CF4
	074 Move X0, 0x9EC000
	075 Move X0, [X0+152]
	076 Call 0x1C17CF4
	077 Move X0, 0x9EC000
	078 Move X0, [X0+160]
	079 Call 0x1C17CF4
	080 Move X0, 0x9A4000
	081 Move X0, [X0+696]
	082 Call 0x1C17CF4
	083 Move X0, 0x9EC000
	084 Move X0, [X0+168]
	085 Call 0x1C17CF4
	086 Move X0, 0x9EC000
	087 Move X0, [X0+80]
	088 Call 0x1C17CF4
	089 Move X0, 0x9C1000
	090 Move X0, [X0+3944]
	091 Call 0x1C17CF4
	092 Move X0, 0x9EC000
	093 Move X0, [X0+96]
	094 Call 0x1C17CF4
	095 Move X0, 0x9EC000
	096 Move X0, [X0+176]
	097 Call 0x1C17CF4
	098 Move X0, 0x9EC000
	099 Move X0, [X0+184]
	100 Call 0x1C17CF4
	101 Move X0, 0x9EC000
	102 Move X0, [X0+192]
	103 Call 0x1C17CF4
	104 Move W8, 1
	105 Move [X25+3595], W8
	106 Move X1, [X26]
	107 Move X2, [X28]
	108 Move X0, X19
	109 Call 0x21FD754, X0, X1
	110 Move [X19+368], X0
	111 Move X1, [X24]
	112 Move X2, [X23]
	113 Move X0, X19
	114 Call 0x21FD754, X0, X1
	115 Move [X19+376], X0
	116 Move X1, [X22]
	117 Move X2, [X23]
	118 Move X0, X19
	119 Call 0x21FD754, X0, X1
	120 Move [X19+384], X0
	121 Move X1, [X21]
	122 Move X2, [X20]
	123 Move X0, X19
	124 Call 0x21FD754, X0, X1
	125 Move [X19+392], X0
	126 Move X8, 0x9C1000
	127 Move X8, [X8+3944]
	128 Move X2, [X29]
	129 Move X0, X19
	130 Move X1, [X8]
	131 Call 0x21FD754, X0, X1
	132 Move [X19+400], X0
	133 Move X8, 0x9EC000
	134 Move X8, [X8+160]
	135 Move X0, X19
	136 Move X1, [X8]
	137 Move X8, 0x9EA000
	138 Move X8, [X8+3632]
	139 Move X2, [X8]
	140 Call 0x21FD754, X0, X1
	141 Move [X19+408], X0
	142 Move X8, 0x9EC000
	143 Move X8, [X8+168]
	144 Move X2, [X20]
	145 Move X0, X19
	146 Move X1, [X8]
	147 Call 0x21FD754, X0, X1
	148 Move [X19+416], X0
	149 Move X8, 0x9EC000
	150 Move X8, [X8+152]
	151 Move X0, X19
	152 Move X1, [X8]
	153 Move X8, 0x9EC000
	154 Move X8, [X8+128]
	155 Move X2, [X8]
	156 Call 0x21FD754, X0, X1
	157 Move [X19+424], X0
	158 Move X8, 0x9EC000
	159 Move X8, [X8+144]
	160 Move X2, [X27]
	161 Move X0, X19
	162 Move X1, [X8]
	163 Call 0x21FD754, X0, X1
	164 Move [X19+432], X0
	165 Move X8, 0x9EC000
	166 Move X8, [X8+176]
	167 Move X2, [X27]
	168 Move X0, X19
	169 Move X1, [X8]
	170 Call 0x21FD754, X0, X1
	171 Move [X19+440], X0
	172 Move X8, 0x9EC000
	173 Move X8, [X8+184]
	174 Move X2, [X23]
	175 Move X0, X19
	176 Move X1, [X8]
	177 Call 0x21FD754, X0, X1
	178 Move [X19+448], X0
	179 Move X8, 0x9EC000
	180 Move X8, [X8+136]
	181 Move X0, X19
	182 Move X1, [X8]
	183 Move X8, 0x9EC000
	184 Move X8, [X8+120]
	185 Move X2, [X8]
	186 Call 0x21FD754, X0, X1
	187 Move [X19+456], X0
	188 Move X8, 0x9EC000
	189 Move X8, [X8+192]
	190 Move X2, [X20]
	191 Move X0, X19
	192 Move X1, [X8]
	193 Call 0x21FD754, X0, X1
	194 Move [X19+464], X0
	195 Move X8, 0x9EC000
	196 Move X8, [X8+112]
	197 Move X0, X19
	198 Move X20, [X31+80]
	199 Move X19, [X31+88]
	200 Move X22, [X31+64]
	201 Move X21, [X31+72]
	202 Move X1, [X8]
	203 Move X24, [X31+48]
	204 Move X23, [X31+56]
	205 Move X26, [X31+32]
	206 Move X25, [X31+40]
	207 Move X28, [X31+16]
	208 Move X27, [X31+24]
	209 Move X29, [X31+96]
	210 Move X30, [X31+104]
	211 Call InputControl`1<TouchState>.FinishSetup, X0
	212 Return 

Method: UnityEngine.InputSystem.LowLevel.TouchState ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x0375BD58 LDP X22, X21, [X31 + 0x10]
	0x0375BD5C LDR X30, [X31], #0x30
	0x0375BD60 RET
	0x0375BD64 BL 0x1C16F20
	0x0375BD68 STR X30, [X31 - 0x20]!
	0x0375BD6C STP X20, X19, [X31 + 0x10]
	0x0375BD70 ADRP X20, 0xC85000
	0x0375BD74 LDRB W8, [X20 + 0xE1F]
	0x0375BD78 MOV X19, X0
	0x0375BD7C TBNZ X8, 0x0, 0x375BD94
	0x0375BD80 ADRP X0, 0x9C0000
	0x0375BD84 LDR X0, [X0 + 0x270]
	0x0375BD88 BL 0x1C16CF4
	0x0375BD8C MOVZ W8, 0x1
	0x0375BD90 STRB W8, [X20 + 0xE1F]
	0x0375BD94 LDR V0, [X19 + 0x10]
	0x0375BD98 FCMP S0, 0x0
	0x0375BD9C B.GT 0x375BDC8
	0x0375BDA0 ADRP X8, 0x9C0000
	0x0375BDA4 LDR X8, [X8 + 0x270]
	0x0375BDA8 LDR X0, [X8]
	0x0375BDAC LDR W8, [X0 + 0xE0]
	0x0375BDB0 CBNZ W8, 0x375BDB8
	0x0375BDB4 BL 0x1C16DFC
	0x0375BDB8 MOV X0, X31
	0x0375BDBC BL 0x37701B0
	0x0375BDC0 CBZ X0, 0x375BDD4
	0x0375BDC4 LDR V0, [X0 + 0x50]
	0x0375BDC8 LDP X20, X19, [X31 + 0x10]
	0x0375BDCC LDR X30, [X31], #0x20
	0x0375BDD0 RET
	0x0375BDD4 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xC86000
	008 Move X23, 0x9C1000
	009 Move X19, X8
	010 Move W8, [X22+3596]
	011 Move X23, [X23+3352]
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9C1000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3596], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 NotImplemented "Instruction LDRSW not yet implemented."
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Add X8, X8, X20
	032 Move X9, [X8+48]
	033 Move V1, [X8+16]
	034 Move V0, [X8+32]
	035 Move V2, [X8]
	036 Move [X19+48], X9
	037 Move [X19+16], V1
	038 Move [X19+24], V0
	039 Move [X19], V2
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+48]
	043 Move X23, [X31+56]
	044 Return X0

Method: System.Void WriteValueIntoState(UnityEngine.InputSystem.LowLevel.TouchState value, System.Void* statePtr)

Disassembly:
	0x0375BDD8 STR X30, [X31 - 0x20]!
	0x0375BDDC STP X20, X19, [X31 + 0x10]
	0x0375BDE0 ADRP X20, 0xC85000
	0x0375BDE4 LDRB W8, [X20 + 0xE20]
	0x0375BDE8 MOV X19, X0
	0x0375BDEC TBNZ X8, 0x0, 0x375BE04
	0x0375BDF0 ADRP X0, 0x9C0000
	0x0375BDF4 LDR X0, [X0 + 0xC90]
	0x0375BDF8 BL 0x1C16CF4
	0x0375BDFC MOVZ W8, 0x1
	0x0375BE00 STRB W8, [X20 + 0xE20]
	0x0375BE04 LDR V0, [X19 + 0x14]
	0x0375BE08 FCMP S0, 0x0
	0x0375BE0C B.GT 0x375BE24
	0x0375BE10 ADRP X8, 0x9C0000
	0x0375BE14 LDR X8, [X8 + 0xC90]
	0x0375BE18 LDR X8, [X8]
	0x0375BE1C LDR X8, [X8 + 0xB8]
	0x0375BE20 LDR V0, [X8]
	0x0375BE24 LDP X20, X19, [X31 + 0x10]
	0x0375BE28 LDR X30, [X31], #0x20
	0x0375BE2C RET
	0x0375BE30 STP D9, D8, [X31 - 0x30]!
	0x0375BE34 STP X30, X21, [X31 + 0x10]
	0x0375BE38 STP X20, X19, [X31 + 0x20]
	0x0375BE3C MOV X19, X1
	0x0375BE40 MOV X20, X0
	0x0375BE44 MOV X0, X1
	0x0375BE48 MOV X1, X31
	0x0375BE4C BL 0x376C63C
	0x0375BE50 TBZ X0, 0x0, 0x375BE6C
	0x0375BE54 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xC86000
	008 Move X23, 0x9C1000
	009 Move W8, [X22+3597]
	010 Move X23, [X23+3352]
	011 Move X20, X2
	012 Move X19, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x9C1000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move X0, 0x9EC000
	022 Move X0, [X0+200]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+3597], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 NotImplemented "Instruction LDRSW not yet implemented."
	032 Move X1, X19
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W2, 56
	036 Add X0, X8, X20
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X3, X31
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]
	042 Call UnsafeUtility.MemCpy, X0, X1, X2
	043 Return 

