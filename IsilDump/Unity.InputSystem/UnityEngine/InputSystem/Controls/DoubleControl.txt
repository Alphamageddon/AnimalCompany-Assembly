Type: UnityEngine.InputSystem.Controls.DoubleControl

Method: System.Void .ctor()

Disassembly:
	0x0375A3B4 LDP D9, D8, [X31 + 0x10]
	0x0375A3B8 MOV V2.16B, V10.16B
	0x0375A3BC LDR V10, [X31], #0x40
	0x0375A3C0 RET
	0x0375A3C4 BL 0x1C16F20
	0x0375A3C8 STP D11, D10, [X31 - 0x40]!
	0x0375A3CC STP D9, D8, [X31 + 0x10]
	0x0375A3D0 STP X30, X21, [X31 + 0x20]
	0x0375A3D4 STP X20, X19, [X31 + 0x30]
	0x0375A3D8 ADRP X21, 0xC86000
	0x0375A3DC LDRB W8, [X21 + 0xE06]
	0x0375A3E0 MOV X19, X1
	0x0375A3E4 MOV V8.16B, V3.16B
	0x0375A3E8 MOV V9.16B, V2.16B
	0x0375A3EC MOV V10.16B, V1.16B
	0x0375A3F0 MOV V11.16B, V0.16B
	0x0375A3F4 MOV X20, X0
	0x0375A3F8 TBNZ X8, 0x0, 0x375A410
	0x0375A3FC ADRP X0, 0x9C1000
	0x0375A400 LDR X0, [X0 + 0xD18]
	0x0375A404 BL 0x1C16CF4
	0x0375A408 MOVZ W8, 0x1
	0x0375A40C STRB W8, [X21 + 0xE06]
	0x0375A410 LDR W8, [X20 + 0xD8]
	0x0375A414 MOVZ W9, 0x4154
	0x0375A418 MOVK W9, 0x51550000
	0x0375A41C CMP W8, W9
	0x0375A420 B.NE 0x375A460
	0x0375A424 ADRP X8, 0x9C1000
	0x0375A428 LDR X8, [X8 + 0xD18]
	0x0375A42C LDR X0, [X8]
	0x0375A430 LDR W8, [X0 + 0xE0]
	0x0375A434 CBNZ W8, 0x375A43C
	0x0375A438 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC87000
	007 Move X22, 0x9EC000
	008 Move X20, 0x9C2000
	009 Move W8, [X21+3574]
	010 Move X22, [X22+4072]
	011 Move X20, [X20+3352]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x9EC000
	018 Move X0, [X0+4072]
	019 Call 0x1C17CF4
	020 Move X0, 0x9C2000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3574], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call InputControl`1<Double>..ctor, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move X8, [X0+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W8, [X8+48]
	038 Move [X19+16], W8
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Double ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x0375A43C LDRSW X8, [X20 + 0x14]
	0x0375A440 LDP X30, X21, [X31 + 0x20]
	0x0375A444 ADD X8, X8, X19
	0x0375A448 STP S9, S8, [X8 + 0x8]
	0x0375A44C LDP X20, X19, [X31 + 0x30]
	0x0375A450 LDP D9, D8, [X31 + 0x10]
	0x0375A454 STP S11, S10, [X8]
	0x0375A458 LDP D11, D10, [X31], #0x40
	0x0375A45C RET
	0x0375A460 LDR X0, [X20 + 0x120]
	0x0375A464 CBZ X0, 0x375A4F0
	0x0375A468 LDR X8, [X0]
	0x0375A46C MOV V0.16B, V11.16B
	0x0375A470 MOV X1, X19
	0x0375A474 LDR X9, [X8 + 0x258]
	0x0375A478 LDR X2, [X8 + 0x260]
	0x0375A47C BLR X9
	0x0375A480 LDR X0, [X20 + 0x128]
	0x0375A484 CBZ X0, 0x375A4F0
	0x0375A488 LDR X8, [X0]
	0x0375A48C MOV V0.16B, V10.16B
	0x0375A490 MOV X1, X19
	0x0375A494 LDR X9, [X8 + 0x258]
	0x0375A498 LDR X2, [X8 + 0x260]
	0x0375A49C BLR X9
	0x0375A4A0 LDR X0, [X20 + 0x130]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC87000
	007 Move X22, 0x9C2000
	008 Move W8, [X21+3575]
	009 Move X22, [X22+3352]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x9C2000
	017 Move X0, [X0+3352]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3575], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X0, X20, 16
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call InputStateBlock.ReadDouble, X0, X1
	035 Return V0

Method: System.Void WriteValueIntoState(System.Double value, System.Void* statePtr)

Disassembly:
	0x0375A4A4 CBZ X0, 0x375A4F0
	0x0375A4A8 LDR X8, [X0]
	0x0375A4AC MOV V0.16B, V9.16B
	0x0375A4B0 MOV X1, X19
	0x0375A4B4 LDR X9, [X8 + 0x258]
	0x0375A4B8 LDR X2, [X8 + 0x260]
	0x0375A4BC BLR X9
	0x0375A4C0 LDR X0, [X20 + 0x138]
	0x0375A4C4 CBZ X0, 0x375A4F0
	0x0375A4C8 LDR X8, [X0]
	0x0375A4CC MOV V0.16B, V8.16B
	0x0375A4D0 MOV X1, X19
	0x0375A4D4 LDP X20, X19, [X31 + 0x30]
	0x0375A4D8 LDR X3, [X8 + 0x258]
	0x0375A4DC LDR X2, [X8 + 0x260]
	0x0375A4E0 LDP X30, X21, [X31 + 0x20]
	0x0375A4E4 LDP D9, D8, [X31 + 0x10]
	0x0375A4E8 LDP D11, D10, [X31], #0x40
	0x0375A4EC BR X3
	0x0375A4F0 BL 0x1C16F20
	0x0375A4F4 STR X30, [X31 - 0x30]!
	0x0375A4F8 STP X22, X21, [X31 + 0x10]
	0x0375A4FC STP X20, X19, [X31 + 0x20]
	0x0375A500 ADRP X21, 0xC86000
	0x0375A504 ADRP X20, 0x9C1000
	0x0375A508 LDRB W8, [X21 + 0xE07]
	0x0375A50C LDR X20, [X20 + 0xD18]
	0x0375A510 MOV X19, X0
	0x0375A514 TBNZ X8, 0x0, 0x375A52C
	0x0375A518 ADRP X0, 0x9C1000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xC87000
	008 Move X22, 0x9C2000
	009 Move W8, [X21+3576]
	010 Move X22, [X22+3352]
	011 Move X19, X1
	012 Move V8, V0
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9C2000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3576], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Add X0, X20, 16
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call InputStateBlock.WriteDouble, X0, X1, V0
	039 Return 

