Type: UnityEngine.InputSystem.Controls.Vector2Control

Method: UnityEngine.InputSystem.Controls.AxisControl get_x()

Disassembly:
	0x0375C3AC FSUB D1, D8, D9
	0x0375C3B0 FCVT S0, S0

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_x(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375C3B4 FCMP D1, D0
	0x0375C3B8 B.HI 0x375C1C8

ISIL:
	001 Move [X0+272], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_y()

Disassembly:
	0x0375C3BC LDR W8, [X20 + 0x24]
	0x0375C3C0 LDR W9, [X20 + 0x18]

ISIL:
	001 Move X0, [X0+280]
	002 Return X0

Method: System.Void set_y(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375C3C4 ADD W8, W8, 0x1
	0x0375C3C8 CMP W8, W9

ISIL:
	001 Move [X0+280], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x03759F54 STP X22, X21, [X31 + 0x20]
	0x03759F58 STP X20, X19, [X31 + 0x30]
	0x03759F5C SUB X31, X31, 0x230
	0x03759F60 MRS X23, 0xC000
	0x03759F64 LDR X8, [X23 + 0x28]
	0x03759F68 ADRP X20, 0xC87000
	0x03759F6C MOV X19, X0
	0x03759F70 STR X8, [X31 + 0x228]
	0x03759F74 LDRB W8, [X20 + 0xE02]
	0x03759F78 TBNZ X8, 0x0, 0x3759F9C
	0x03759F7C ADRP X0, 0x99C000
	0x03759F80 LDR X0, [X0 + 0xC48]
	0x03759F84 BL 0x1C16CF4
	0x03759F88 ADRP X0, 0x9ED000
	0x03759F8C LDR X0, [X0 + 0x10]
	0x03759F90 BL 0x1C16CF4
	0x03759F94 MOVZ W8, 0x1
	0x03759F98 STRB W8, [X20 + 0xE02]
	0x03759F9C ADD X0, X31, 0x118
	0x03759FA0 MOVZ W2, 0x10C
	0x03759FA4 MOV W1, W31
	0x03759FA8 BL 0x3EB1B10
	0x03759FAC LDR W0, [X19 + 0x130]
	0x03759FB0 ADD X8, X31, 0x8
	0x03759FB4 MOV X1, X31
	0x03759FB8 STR X31, [X19 + 0x38]
	0x03759FBC STR W31, [X19 + 0x134]
	0x03759FC0 BL 0x37FEF70
	0x03759FC4 ADD X0, X31, 0x118
	0x03759FC8 ADD X1, X31, 0x8
	0x03759FCC MOVZ W2, 0x10C
	0x03759FD0 BL 0x3EB1AC0
	0x03759FD4 LDR X0, [X19 + 0x78]
	0x03759FD8 CBZ X0, 0x375A0B4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC88000
	007 Move X22, 0x9ED000
	008 Move X20, 0x9C3000
	009 Move W8, [X21+3603]
	010 Move X22, [X22+4032]
	011 Move X20, [X20+3352]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x9ED000
	018 Move X0, [X0+4032]
	019 Call 0x1C17CF4
	020 Move X0, 0x9C3000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3603], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call InputControl`1<Vector2>..ctor, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move X8, [X0+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W8, [X8+52]
	038 Move [X19+16], W8
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x03759E94 LDR X8, [X0 + 0xB8]
	0x03759E98 LDR W9, [X19 + 0x10]
	0x03759E9C LDR W8, [X8 + 0xC]
	0x03759EA0 CMP W9, W8
	0x03759EA4 B.NE 0x3759ED8
	0x03759EA8 LDR W8, [X0 + 0xE0]
	0x03759EAC CBNZ W8, 0x3759EB4
	0x03759EB0 BL 0x1C16DFC
	0x03759EB4 LDR W8, [X19 + 0x1C]
	0x03759EB8 CMP W8, 0x20
	0x03759EBC B.NE 0x3759ED8
	0x03759EC0 LDR X0, [X20]
	0x03759EC4 LDR W8, [X0 + 0xE0]
	0x03759EC8 CBNZ W8, 0x3759ED0
	0x03759ECC BL 0x1C16DFC
	0x03759ED0 LDR W8, [X19 + 0x18]
	0x03759ED4 CBZ W8, 0x3759F00
	0x03759ED8 LDR X0, [X20]
	0x03759EDC LDR W8, [X0 + 0xE0]
	0x03759EE0 CBNZ W8, 0x3759EEC
	0x03759EE4 BL 0x1C16DFC
	0x03759EE8 LDR X0, [X20]
	0x03759EEC LDR X8, [X0 + 0xB8]
	0x03759EF0 LDR W0, [X8]
	0x03759EF4 LDP X20, X19, [X31 + 0x10]
	0x03759EF8 LDP X30, X21, [X31], #0x20
	0x03759EFC RET
	0x03759F00 LDR X0, [X20]
	0x03759F04 LDR W8, [X0 + 0xE0]
	0x03759F08 CBNZ W8, 0x3759F14
	0x03759F0C BL 0x1C16DFC
	0x03759F10 LDR X0, [X20]
	0x03759F14 LDR X8, [X0 + 0xB8]
	0x03759F18 ADD X8, X8, 0xC
	0x03759F1C B 0x3759EF0
	0x03759F20 LDR W0, [X0 + 0x130]
	0x03759F24 RET
	0x03759F28 STR W1, [X0 + 0x130]
	0x03759F2C RET
	0x03759F30 STP X30, X19, [X31 - 0x10]!
	0x03759F34 MOV X1, X31
	0x03759F38 MOV X19, X0
	0x03759F3C BL 0x3771EE0
	0x03759F40 LDR W0, [X19 + 0x134]
	0x03759F44 LDP X30, X19, [X31], #0x10
	0x03759F48 RET
	0x03759F4C STR X29, [X31 - 0x40]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xC88000
	009 Move X24, 0x9C3000
	010 Move X21, 0x9EC000
	011 Move X22, 0x9C3000
	012 Move X20, 0x9ED000
	013 Move W8, [X23+3604]
	014 Move X24, [X24+1920]
	015 Move X21, [X21+3632]
	016 Move X22, [X22+1928]
	017 Move X20, [X20+4024]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x9ED000
	024 Move X0, [X0+4024]
	025 Call 0x1C17CF4
	026 Move X0, 0x9EC000
	027 Move X0, [X0+3632]
	028 Call 0x1C17CF4
	029 Move X0, 0x9C3000
	030 Move X0, [X0+1920]
	031 Call 0x1C17CF4
	032 Move X0, 0x9C3000
	033 Move X0, [X0+1928]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+3604], W8
	037 Move X1, [X24]
	038 Move X2, [X21]
	039 Move X0, X19
	040 Call 0x21FD754, X0, X1
	041 Move [X19+272], X0
	042 Move X1, [X22]
	043 Move X2, [X21]
	044 Move X0, X19
	045 Call 0x21FD754, X0, X1
	046 Move [X19+280], X0
	047 Move X1, [X20]
	048 Move X0, X19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Call InputControl`1<Vector2>.FinishSetup, X0
	057 Return 

Method: UnityEngine.Vector2 ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x0375C3CC STR W8, [X20 + 0x24]
	0x0375C3D0 B.GE 0x375C40C
	0x0375C3D4 MOVZ W8, 0x2
	0x0375C3D8 MOV X0, X19
	0x0375C3DC MOV X1, X31
	0x0375C3E0 STR W8, [X20 + 0x20]
	0x0375C3E4 BL 0x376C62C
	0x0375C3E8 MOV X0, X20
	0x0375C3EC STR D0, [X20 + 0x30]
	0x0375C3F0 BL 0x375C054
	0x0375C3F4 MOV X0, X19
	0x0375C3F8 LDP X20, X19, [X31 + 0x20]
	0x0375C3FC LDP X30, X21, [X31 + 0x10]
	0x0375C400 MOV X1, X31
	0x0375C404 LDP D9, D8, [X31], #0x30
	0x0375C408 B 0x376C814
	0x0375C40C MOV X0, X19
	0x0375C410 LDP X20, X19, [X31 + 0x20]
	0x0375C414 LDP X30, X21, [X31 + 0x10]
	0x0375C418 MOV X1, X31
	0x0375C41C LDP D9, D8, [X31], #0x30
	0x0375C420 B 0x376C6D4
	0x0375C424 STP X31, X31, [X0 + 0x20]
	0x0375C428 STR X31, [X0 + 0x30]
	0x0375C42C RET
	0x0375C430 MOVZ W8, 0x2
	0x0375C434 MOV X1, X31
	0x0375C438 STR W8, [X0 + 0x18]
	0x0375C43C B 0x33BDD8C
	0x0375C440 STR X30, [X31 - 0x20]!
	0x0375C444 STP X20, X19, [X31 + 0x10]
	0x0375C448 ADRP X20, 0xC84000
	0x0375C44C LDRB W8, [X20 + 0xE25]
	0x0375C450 MOV X19, X0
	0x0375C454 TBNZ X8, 0x0, 0x375C46C
	0x0375C458 ADRP X0, 0x9BF000
	0x0375C45C LDR X0, [X0 + 0xC90]
	0x0375C460 BL 0x1C16CF4
	0x0375C464 MOVZ W8, 0x1
	0x0375C468 STRB W8, [X20 + 0xE25]
	0x0375C46C LDR V0, [X19 + 0x10]
	0x0375C470 FCMP S0, 0x0
	0x0375C474 B.GT 0x375C48C
	0x0375C478 ADRP X8, 0x9BF000
	0x0375C47C LDR X8, [X8 + 0xC90]
	0x0375C480 LDR X8, [X8]
	0x0375C484 LDR X8, [X8 + 0xB8]
	0x0375C488 LDR V0, [X8]
	0x0375C48C LDP X20, X19, [X31 + 0x10]
	0x0375C490 LDR X30, [X31], #0x20
	0x0375C494 RET

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC85000
	007 Move W8, [X21+3605]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x9EB000
	015 Move X0, [X0+40]
	016 Call 0x1C17CF4
	017 Move X0, 0x9C0000
	018 Move X0, [X0+3352]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3605], W8
	022 Move W8, [X20+216]
	023 Move W9, 0x4332
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X8, 0x9C0000
	027 Move X8, [X8+3352]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Add X8, X8, X19
	035 Move S8, [X8]
	036 Move S1, [X8+4]
	037 Move X0, [X20+272]
	038 Compare X0, 0
	039 JumpIfEqual {60}
	040 Move X21, 0x9EB000
	041 Move X21, [X21+40]
	042 Move X1, X19
	043 Move X2, [X21]
	044 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	045 Move X0, [X20+280]
	046 Compare X0, 0
	047 JumpIfEqual {60}
	048 Move X2, [X21]
	049 Move X1, X19
	050 Move V8, V0
	051 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	052 Move V1, V0
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+16]
	056 Move X21, [X31+24]
	057 Move V0, V8
	058 Move V8, [X31+48]
	059 Return X0
	060 Call 0x1C17F20

Method: System.Void WriteValueIntoState(UnityEngine.Vector2 value, System.Void* statePtr)

Disassembly:
	0x0375C498 STP X30, X21, [X31 - 0x20]!
	0x0375C49C STP X20, X19, [X31 + 0x10]
	0x0375C4A0 ADRP X20, 0xC84000
	0x0375C4A4 LDRB W8, [X20 + 0xE26]
	0x0375C4A8 MOV X19, X0
	0x0375C4AC TBNZ X8, 0x0, 0x375C4C4
	0x0375C4B0 ADRP X0, 0x9BF000
	0x0375C4B4 LDR X0, [X0 + 0xC90]
	0x0375C4B8 BL 0x1C16CF4
	0x0375C4BC MOVZ W8, 0x1
	0x0375C4C0 STRB W8, [X20 + 0xE26]
	0x0375C4C4 ADRP X21, 0xC84000
	0x0375C4C8 ADRP X20, 0x9BF000
	0x0375C4CC LDRB W8, [X21 + 0xE25]
	0x0375C4D0 LDR X20, [X20 + 0xC90]
	0x0375C4D4 TBNZ X8, 0x0, 0x375C4EC
	0x0375C4D8 ADRP X0, 0x9BF000
	0x0375C4DC LDR X0, [X0 + 0xC90]
	0x0375C4E0 BL 0x1C16CF4
	0x0375C4E4 MOVZ W8, 0x1
	0x0375C4E8 STRB W8, [X21 + 0xE25]
	0x0375C4EC LDR V0, [X19 + 0x10]
	0x0375C4F0 LDR X8, [X20]
	0x0375C4F4 FCMP S0, 0x0
	0x0375C4F8 B.LE 0x375C504
	0x0375C4FC LDR X8, [X8 + 0xB8]
	0x0375C500 B 0x375C50C
	0x0375C504 LDR X8, [X8 + 0xB8]
	0x0375C508 LDR V0, [X8]
	0x0375C50C LDR V1, [X8 + 0x4]
	0x0375C510 LDP X20, X19, [X31 + 0x10]
	0x0375C514 FMUL S0, S0, S1
	0x0375C518 LDP X30, X21, [X31], #0x20
	0x0375C51C RET
	0x0375C520 STR D8, [X31 - 0x30]!
	0x0375C524 STP X30, X21, [X31 + 0x10]
	0x0375C528 STP X20, X19, [X31 + 0x20]
	0x0375C52C MOV X19, X1
	0x0375C530 MOV X20, X0
	0x0375C534 MOV X0, X1
	0x0375C538 MOV X1, X31
	0x0375C53C BL 0x376C688
	0x0375C540 LDR W8, [X20 + 0x14]
	0x0375C544 MOV V8.16B, V0.16B
	0x0375C548 CMP W8, 0x2
	0x0375C54C B.EQ 0x375C5D8
	0x0375C550 CMP W8, 0x1
	0x0375C554 B.EQ 0x375C660
	0x0375C558 CBNZ W8, 0x375C8BC
	0x0375C55C LDRB W8, [X20 + 0x18]
	0x0375C560 CBZ W8, 0x375C68C
	0x0375C564 MOV X0, X20
	0x0375C568 BL 0x375C498

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xC85000
	008 Move W8, [X21+3606]
	009 Move X19, X1
	010 Move V8, V1
	011 Move V9, V0
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x9C0000
	018 Move X0, [X0+3352]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3606], W8
	022 Move W8, [X20+216]
	023 Move W9, 0x4332
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X8, 0x9C0000
	027 Move X8, [X8+3352]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Move X30, [X31+16]
	035 Move X21, [X31+24]
	036 Add X8, X8, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move [X8], S9
	040 Move [X8+8], S8
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Return 
	044 Move X0, [X20+272]
	045 Compare X0, 0
	046 JumpIfEqual {68}
	047 Move X8, [X0]
	048 Move V0, V9
	049 Move X1, X19
	050 Move X9, [X8+600]
	051 Move X2, [X8+608]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X0, [X20+280]
	054 Compare X0, 0
	055 JumpIfEqual {68}
	056 Move X8, [X0]
	057 Move X1, X19
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+16]
	061 Move X21, [X31+24]
	062 Move X3, [X8+600]
	063 Move X2, [X8+608]
	064 Move V0, V8
	065 Move D9, [X31+48]
	066 Move D8, [X31+56]
	067 CallNoReturn X3
	068 Call 0x1C17F20

Method: System.Single EvaluateMagnitude(System.Void* statePtr)

Disassembly:
	0x0375C56C FCMP S8, S0
	0x0375C570 B.HI 0x375C8BC
	0x0375C574 STRB W31, [X20 + 0x18]
	0x0375C578 ADRP X20, 0xC7D000
	0x0375C57C LDRB W8, [X20 + 0x5AA]
	0x0375C580 CBNZ W8, 0x375C598
	0x0375C584 ADRP X0, 0x99E000
	0x0375C588 LDR X0, [X0 + 0x4B8]
	0x0375C58C BL 0x1C16CF4
	0x0375C590 MOVZ W8, 0x1
	0x0375C594 STRB W8, [X20 + 0x5AA]
	0x0375C598 ADRP X8, 0x99E000
	0x0375C59C LDR X8, [X8 + 0x4B8]
	0x0375C5A0 ADRP X9, 0xFFFFFFFFFD38E000
	0x0375C5A4 LDR V0, [X9 + 0x240]
	0x0375C5A8 FABS S2, S8
	0x0375C5AC LDR X8, [X8]
	0x0375C5B0 FMOV S3, 8
	0x0375C5B4 FMUL S0, S2, S0
	0x0375C5B8 LDR X8, [X8 + 0xB8]
	0x0375C5BC LDR V1, [X8]
	0x0375C5C0 FMUL S1, S1, S3
	0x0375C5C4 FCMP S0, S1
	0x0375C5C8 FCSEL S0, S0, S1, GT
	0x0375C5CC FCMP S2, S0
	0x0375C5D0 B.MI 0x375C88C
	0x0375C5D4 B 0x375C8CC
	0x0375C5D8 LDRB W8, [X20 + 0x18]
	0x0375C5DC CBZ W8, 0x375C75C
	0x0375C5E0 MOV X0, X20
	0x0375C5E4 BL 0x375C498
	0x0375C5E8 FCMP S8, S0
	0x0375C5EC B.HI 0x375C8BC
	0x0375C5F0 MOV X0, X19
	0x0375C5F4 MOV X1, X31
	0x0375C5F8 STRB W31, [X20 + 0x18]
	0x0375C5FC BL 0x376C6D4
	0x0375C600 ADRP X20, 0xC7D000
	0x0375C604 LDRB W8, [X20 + 0x5AA]
	0x0375C608 CBNZ W8, 0x375C620
	0x0375C60C ADRP X0, 0x99E000
	0x0375C610 LDR X0, [X0 + 0x4B8]
	0x0375C614 BL 0x1C16CF4
	0x0375C618 MOVZ W8, 0x1
	0x0375C61C STRB W8, [X20 + 0x5AA]

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xC85000
	009 Move X22, 0x9EB000
	010 Move W8, [X21+3607]
	011 Move X22, [X22+272]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9EB000
	019 Move X0, [X0+272]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3607], W8
	023 Move X2, [X22]
	024 Move X0, X20
	025 Move X1, X19
	026 Call InputControl`1<Vector2>.ReadValueFromStateWithCaching, X0, X1
	027 Move X19, 0xC7E000
	028 Move W8, [X19+2072]
	029 Move V8, V0
	030 Move V9, V1
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x998000
	034 Move X0, [X0+1448]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X19+2072], W8
	038 Move X8, 0x998000
	039 Move X8, [X8+1448]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X30, [X31+16]
	050 Multiply S0, S8, S8
	051 Multiply S1, S9, S9
	052 Add S0, S0, S1
	053 NotImplemented "Instruction FSQRT not yet implemented."
	054 Move D9, [X31+64]
	055 Move D8, [X31+72]
	056 Return V0

Method: UnityEngine.InputSystem.Utilities.FourCC CalculateOptimizedControlDataType()

Disassembly:
	0x0375C620 ADRP X8, 0x99E000
	0x0375C624 LDR X8, [X8 + 0x4B8]
	0x0375C628 ADRP X9, 0xFFFFFFFFFD38E000
	0x0375C62C LDR V0, [X9 + 0x240]
	0x0375C630 FABS S2, S8
	0x0375C634 LDR X8, [X8]
	0x0375C638 FMOV S3, 8
	0x0375C63C FMUL S0, S2, S0
	0x0375C640 LDR X8, [X8 + 0xB8]
	0x0375C644 LDR V1, [X8]
	0x0375C648 FMUL S1, S1, S3
	0x0375C64C FCMP S0, S1
	0x0375C650 FCSEL S0, S0, S1, GT
	0x0375C654 FCMP S2, S0
	0x0375C658 B.MI 0x375C88C
	0x0375C65C B 0x375C8BC
	0x0375C660 LDRB W8, [X20 + 0x18]
	0x0375C664 CBZ W8, 0x375C7C4
	0x0375C668 MOV X0, X20
	0x0375C66C BL 0x375C498
	0x0375C670 FCMP S8, S0
	0x0375C674 B.HI 0x375C8BC
	0x0375C678 MOV X0, X19
	0x0375C67C MOV X1, X31
	0x0375C680 STRB W31, [X20 + 0x18]
	0x0375C684 BL 0x376C6D4
	0x0375C688 B 0x375C88C
	0x0375C68C ADRP X21, 0xC84000
	0x0375C690 LDRB W8, [X21 + 0xE25]
	0x0375C694 TBNZ X8, 0x0, 0x375C6AC
	0x0375C698 ADRP X0, 0x9BF000
	0x0375C69C LDR X0, [X0 + 0xC90]
	0x0375C6A0 BL 0x1C16CF4
	0x0375C6A4 MOVZ W8, 0x1
	0x0375C6A8 STRB W8, [X21 + 0xE25]
	0x0375C6AC LDR V0, [X20 + 0x10]
	0x0375C6B0 FCMP S0, 0x0
	0x0375C6B4 B.GT 0x375C6CC
	0x0375C6B8 ADRP X8, 0x9BF000
	0x0375C6BC LDR X8, [X8 + 0xC90]
	0x0375C6C0 LDR X8, [X8]
	0x0375C6C4 LDR X8, [X8 + 0xB8]
	0x0375C6C8 LDR V0, [X8]
	0x0375C6CC FCMP S8, S0
	0x0375C6D0 B.GE 0x375C7A4
	0x0375C6D4 FCMP S8, 0x0
	0x0375C6D8 B.LE 0x375C6EC
	0x0375C6DC MOV X0, X19
	0x0375C6E0 MOV X1, X31
	0x0375C6E4 BL 0x376C678
	0x0375C6E8 TBZ X0, 0x0, 0x375C8CC
	0x0375C6EC ADRP X20, 0xC7D000
	0x0375C6F0 LDRB W8, [X20 + 0x5AA]
	0x0375C6F4 CBNZ W8, 0x375C70C
	0x0375C6F8 ADRP X0, 0x99E000
	0x0375C6FC LDR X0, [X0 + 0x4B8]
	0x0375C700 BL 0x1C16CF4
	0x0375C704 MOVZ W8, 0x1
	0x0375C708 STRB W8, [X20 + 0x5AA]
	0x0375C70C ADRP X8, 0x99E000
	0x0375C710 LDR X8, [X8 + 0x4B8]
	0x0375C714 ADRP X9, 0xFFFFFFFFFD38E000
	0x0375C718 LDR V0, [X9 + 0x240]
	0x0375C71C FABS S2, S8
	0x0375C720 LDR X8, [X8]
	0x0375C724 FMOV S3, 8
	0x0375C728 FMUL S0, S2, S0
	0x0375C72C LDR X8, [X8 + 0xB8]
	0x0375C730 LDR V1, [X8]
	0x0375C734 FMUL S1, S1, S3
	0x0375C738 FCMP S0, S1
	0x0375C73C FCSEL S0, S0, S1, GT
	0x0375C740 FCMP S2, S0
	0x0375C744 B.PL 0x375C8BC
	0x0375C748 MOV X0, X19
	0x0375C74C MOV X1, X31
	0x0375C750 BL 0x376C678
	0x0375C754 TBNZ X0, 0x0, 0x375C88C
	0x0375C758 B 0x375C8BC
	0x0375C75C ADRP X21, 0xC84000
	0x0375C760 LDRB W8, [X21 + 0xE25]
	0x0375C764 TBNZ X8, 0x0, 0x375C77C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC85000
	007 Move X20, 0x9C0000
	008 Move W8, [X21+3608]
	009 Move X20, [X20+3352]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9C0000
	016 Move X0, [X0+3352]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3608], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W8, [X19+28]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W8, [X19+24]
	033 Compare W8, 0
	034 JumpIfNotEqual {82}
	035 Move X8, [X19+272]
	036 Compare X8, 0
	037 JumpIfEqual {96}
	038 Move X0, [X20]
	039 Move W21, [X8+216]
	040 Move W9, [X0+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X20]
	045 Move X8, [X0+184]
	046 Move W8, [X8+44]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X19+280]
	049 Compare X8, 0
	050 JumpIfEqual {96}
	051 Move W9, [X0+224]
	052 Move W22, [X8+216]
	053 Compare W9, 0
	054 JumpIfNotEqual {59}
	055 Call 0x1C17DFC
	056 Move X0, [X20]
	057 Move X8, [X0+184]
	058 Move W21, [X8+44]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X21, [X19+280]
	061 Compare X21, 0
	062 JumpIfEqual {96}
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X8, [X19+272]
	068 Compare X8, 0
	069 JumpIfEqual {96}
	070 Move W8, [X8+20]
	071 Move W9, [X21+20]
	072 Add W8, W8, 4
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X20]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move X0, [X20]
	080 Move X8, [X0+184]
	081 Add X8, X8, 52
	082 Move X0, [X20]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {88}
	086 Call 0x1C17DFC
	087 Move X0, [X20]
	088 Move X8, [X0+184]
	089 Move W0, [X8]
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Return X0
	096 Call 0x1C17F20

