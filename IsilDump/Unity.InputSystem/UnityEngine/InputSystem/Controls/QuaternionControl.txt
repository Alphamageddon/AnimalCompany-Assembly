Type: UnityEngine.InputSystem.Controls.QuaternionControl

Method: UnityEngine.InputSystem.Controls.AxisControl get_x()

Disassembly:
	0x0375B0C0 STR X30, [X31 - 0x30]!
	0x0375B0C4 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+288]
	002 Return X0

Method: System.Void set_x(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375B0C8 STP X20, X19, [X31 + 0x20]
	0x0375B0CC ADRP X21, 0xC85000

ISIL:
	001 Move [X0+288], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_y()

Disassembly:
	0x0375B0D0 ADRP X22, 0x9C0000
	0x0375B0D4 LDRB W8, [X21 + 0xE12]

ISIL:
	001 Move X0, [X0+296]
	002 Return X0

Method: System.Void set_y(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375B0D8 LDR X22, [X22 + 0xD18]
	0x0375B0DC MOV X20, X1

ISIL:
	001 Move [X0+296], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_z()

Disassembly:
	0x0375B0E0 MOV X19, X0
	0x0375B0E4 TBNZ X8, 0x0, 0x375B0FC

ISIL:
	001 Move X0, [X0+304]
	002 Return X0

Method: System.Void set_z(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375B0E8 ADRP X0, 0x9C0000
	0x0375B0EC LDR X0, [X0 + 0xD18]

ISIL:
	001 Move [X0+304], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_w()

Disassembly:
	0x0375B0F0 BL 0x1C16CF4
	0x0375B0F4 MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+312]
	002 Return X0

Method: System.Void set_w(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375B0F8 STRB W8, [X21 + 0xE12]
	0x0375B0FC LDR X0, [X22]

ISIL:
	001 Move [X0+312], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x0375B100 LDR W8, [X0 + 0xE0]
	0x0375B104 CBNZ W8, 0x375B10C
	0x0375B108 BL 0x1C16DFC
	0x0375B10C LDP W8, W1, [X19 + 0x14]
	0x0375B110 LDR W2, [X19 + 0x1C]
	0x0375B114 SXTW X8, W8
	0x0375B118 ADD X0, X8, X20
	0x0375B11C BL 0x375B20C
	0x0375B120 SUB W8, W0, 0x1
	0x0375B124 CMP W8, 0x4
	0x0375B128 FMOV S1, W31
	0x0375B12C B.HI 0x375B13C
	0x0375B130 ADRP X9, 0xFFFFFFFFFD43C000
	0x0375B134 ADD X9, X9, 0x900
	0x0375B138 LDR V1, [X9, W8, SXTW]
	0x0375B13C LDRB W8, [X19 + 0x124]
	0x0375B140 CBZ W8, 0x375B14C
	0x0375B144 LDR V0, [X19 + 0x128]
	0x0375B148 FMUL S1, S1, S0
	0x0375B14C LDR W8, [X19 + 0x104]
	0x0375B150 CMP W8, 0x1
	0x0375B154 B.EQ 0x375B184
	0x0375B158 CMP W8, 0x3
	0x0375B15C B.NE 0x375B1A0
	0x0375B160 LDR V0, [X19 + 0x108]
	0x0375B164 FCMP S1, S0
	0x0375B168 B.MI 0x375B17C
	0x0375B16C LDR V0, [X19 + 0x10C]
	0x0375B170 FCMP S1, S0
	0x0375B174 MOV V0.16B, V1.16B
	0x0375B178 B.LE 0x375B1A4
	0x0375B17C LDR V0, [X19 + 0x110]
	0x0375B180 B 0x375B1A4
	0x0375B184 LDR V0, [X19 + 0x108]
	0x0375B188 FCMP S1, S0
	0x0375B18C B.MI 0x375B1A4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC86000
	007 Move X22, 0x9EC000
	008 Move X20, 0x9C1000
	009 Move W8, [X21+3587]
	010 Move X22, [X22+24]
	011 Move X20, [X20+3352]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x9EC000
	018 Move X0, [X0+24]
	019 Call 0x1C17CF4
	020 Move X0, 0x9C1000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3587], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call InputControl`1<Quaternion>..ctor, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move W8, 128
	035 Move [X19+28], W8
	036 Move X8, [X0+184]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move W8, [X8+60]
	040 Move [X19+16], W8
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x0375B190 LDR V0, [X19 + 0x10C]
	0x0375B194 FCMP S1, S0
	0x0375B198 FCSEL S0, S0, S1, GT
	0x0375B19C B 0x375B1A4
	0x0375B1A0 MOV V0.16B, V1.16B
	0x0375B1A4 LDRB W9, [X19 + 0x115]
	0x0375B1A8 CBZ W9, 0x375B1C4
	0x0375B1AC LDR V1, [X19 + 0x118]
	0x0375B1B0 LDR V2, [X19 + 0x11C]
	0x0375B1B4 LDR V3, [X19 + 0x120]
	0x0375B1B8 MOV X0, X31
	0x0375B1BC BL 0x380FE18
	0x0375B1C0 LDR W8, [X19 + 0x104]
	0x0375B1C4 CMP W8, 0x2
	0x0375B1C8 B.NE 0x375B1E8
	0x0375B1CC LDR V1, [X19 + 0x108]
	0x0375B1D0 FCMP S0, S1
	0x0375B1D4 B.MI 0x375B1EC
	0x0375B1D8 LDR V1, [X19 + 0x10C]
	0x0375B1DC FCMP S0, S1
	0x0375B1E0 FCSEL S1, S1, S0, GT
	0x0375B1E4 B 0x375B1EC
	0x0375B1E8 MOV V1.16B, V0.16B
	0x0375B1EC LDRB W8, [X19 + 0x114]
	0x0375B1F0 LDP X20, X19, [X31 + 0x20]
	0x0375B1F4 LDP X22, X21, [X31 + 0x10]
	0x0375B1F8 FNEG S0, S1
	0x0375B1FC CMP W8, 0x0
	0x0375B200 FCSEL S0, S1, S0, EQ
	0x0375B204 LDR X30, [X31], #0x30
	0x0375B208 RET
	0x0375B20C STR X30, [X31 - 0x20]!
	0x0375B210 STP X20, X19, [X31 + 0x10]
	0x0375B214 CBZ X0, 0x375B2AC
	0x0375B218 CMP W2, 0x21
	0x0375B21C B.CS 0x375B2E0
	0x0375B220 CMP W1, 0x21
	0x0375B224 B.CC 0x375B248
	0x0375B228 ADD W8, W1, 0x1F
	0x0375B22C CMP W1, 0x0
	0x0375B230 CSEL W8, W8, W1, LT
	0x0375B234 SBFM W9, W8, 0x5, 0x1F
	0x0375B238 AND W8, W8, 0xFFFFFFE0
	0x0375B23C SUB W1, W1, W8
	0x0375B240 UBFM W8, W9, 0x1E, 0x1D
	0x0375B244 ADD X0, X0, W8, SXTW
	0x0375B248 ADD W8, W1, W2
	0x0375B24C CMP W8, 0x8
	0x0375B250 B.HI 0x375B264
	0x0375B254 LDRB W8, [X0]
	0x0375B258 MOVZ W9, 0xFF
	0x0375B25C MOVZ W10, 0x8
	0x0375B260 B 0x375B290
	0x0375B264 CMP W8, 0x10
	0x0375B268 B.HI 0x375B27C
	0x0375B26C LDRH W8, [X0]
	0x0375B270 MOVZ W9, 0xFFFF
	0x0375B274 MOVZ W10, 0x10
	0x0375B278 B 0x375B290
	0x0375B27C CMP W8, 0x20
	0x0375B280 B.HI 0x375B328
	0x0375B284 LDR W8, [X0]
	0x0375B288 MOV W10, W31
	0x0375B28C MOVN W9, 0x0
	0x0375B290 LDP X20, X19, [X31 + 0x10]
	0x0375B294 SUB W10, W10, W2
	0x0375B298 LSRV W9, W9, W10
	0x0375B29C LSRV W8, W8, W1
	0x0375B2A0 AND W0, W8, W9, 0x0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xC86000
	011 Move X26, 0x9C1000
	012 Move X21, 0x9EA000
	013 Move X24, 0x9C1000
	014 Move X23, 0x9C6000
	015 Move X22, 0x9C6000
	016 Move X20, 0x9EC000
	017 Move X26, [X26+1920]
	018 Move W8, [X25+3588]
	019 Move X21, [X21+3632]
	020 Move X24, [X24+1928]
	021 Move X23, [X23+976]
	022 Move X22, [X22+984]
	023 Move X20, [X20+32]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {49}
	029 Move X0, 0x9EC000
	030 Move X0, [X0+32]
	031 Call 0x1C17CF4
	032 Move X0, 0x9EA000
	033 Move X0, [X0+3632]
	034 Call 0x1C17CF4
	035 Move X0, 0x9C1000
	036 Move X0, [X0+1920]
	037 Call 0x1C17CF4
	038 Move X0, 0x9C1000
	039 Move X0, [X0+1928]
	040 Call 0x1C17CF4
	041 Move X0, 0x9C6000
	042 Move X0, [X0+976]
	043 Call 0x1C17CF4
	044 Move X0, 0x9C6000
	045 Move X0, [X0+984]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X25+3588], W8
	049 Move X1, [X26]
	050 Move X2, [X21]
	051 Move X0, X19
	052 Call 0x21FD754, X0, X1
	053 Move [X19+288], X0
	054 Move X1, [X24]
	055 Move X2, [X21]
	056 Move X0, X19
	057 Call 0x21FD754, X0, X1
	058 Move [X19+296], X0
	059 Move X1, [X23]
	060 Move X2, [X21]
	061 Move X0, X19
	062 Call 0x21FD754, X0, X1
	063 Move [X19+304], X0
	064 Move X1, [X22]
	065 Move X2, [X21]
	066 Move X0, X19
	067 Call 0x21FD754, X0, X1
	068 Move [X19+312], X0
	069 Move X1, [X20]
	070 Move X0, X19
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X22, [X31+48]
	074 Move X21, [X31+56]
	075 Move X24, [X31+32]
	076 Move X23, [X31+40]
	077 Move X26, [X31+16]
	078 Move X25, [X31+24]
	079 Move X30, [X31+80]
	080 Call InputControl`1<Quaternion>.FinishSetup, X0
	081 Return 

Method: UnityEngine.Quaternion ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x0375B2A4 LDR X30, [X31], #0x20
	0x0375B2A8 RET
	0x0375B2AC ADRP X0, 0x99D000
	0x0375B2B0 LDR X0, [X0 + 0x528]
	0x0375B2B4 BL 0x1C16D08
	0x0375B2B8 BL 0x1C16F10
	0x0375B2BC MOV X19, X0
	0x0375B2C0 ADRP X0, 0x9C7000
	0x0375B2C4 LDR X0, [X0 + 0x240]
	0x0375B2C8 BL 0x1C16D08
	0x0375B2CC MOV X1, X0
	0x0375B2D0 MOV X0, X19
	0x0375B2D4 MOV X2, X31
	0x0375B2D8 BL 0x330E100
	0x0375B2DC B 0x375B358
	0x0375B2E0 ADRP X0, 0x9A0000
	0x0375B2E4 LDR X0, [X0 + 0x578]
	0x0375B2E8 BL 0x1C16D08
	0x0375B2EC BL 0x1C16F10
	0x0375B2F0 MOV X19, X0
	0x0375B2F4 ADRP X0, 0x9EB000
	0x0375B2F8 LDR X0, [X0 + 0xE8]
	0x0375B2FC BL 0x1C16D08
	0x0375B300 MOV X20, X0
	0x0375B304 ADRP X0, 0x9EB000
	0x0375B308 LDR X0, [X0 + 0xF0]
	0x0375B30C BL 0x1C16D08
	0x0375B310 MOV X2, X0
	0x0375B314 MOV X0, X19
	0x0375B318 MOV X1, X20
	0x0375B31C MOV X3, X31
	0x0375B320 BL 0x330E16C
	0x0375B324 B 0x375B358
	0x0375B328 ADRP X0, 0x9A1000
	0x0375B32C LDR X0, [X0 + 0x758]
	0x0375B330 BL 0x1C16D08
	0x0375B334 BL 0x1C16F10
	0x0375B338 MOV X19, X0
	0x0375B33C ADRP X0, 0x9EB000
	0x0375B340 LDR X0, [X0 + 0xF8]
	0x0375B344 BL 0x1C16D08
	0x0375B348 MOV X1, X0
	0x0375B34C MOV X0, X19
	0x0375B350 MOV X2, X31
	0x0375B354 BL 0x33802E4
	0x0375B358 ADRP X0, 0x9EB000
	0x0375B35C LDR X0, [X0 + 0x100]
	0x0375B360 BL 0x1C16D08
	0x0375B364 MOV X1, X0
	0x0375B368 MOV X0, X19
	0x0375B36C BL 0x1C16DEC
	0x0375B370 STP X30, X19, [X31 - 0x10]!
	0x0375B374 ADRP X0, 0x998000
	0x0375B378 LDR X0, [X0 + 0xB40]
	0x0375B37C BL 0x1C16D08
	0x0375B380 BL 0x1C16F10
	0x0375B384 MOV X1, X31
	0x0375B388 MOV X19, X0
	0x0375B38C BL 0x3380310
	0x0375B390 ADRP X0, 0x9EB000
	0x0375B394 LDR X0, [X0 + 0x108]
	0x0375B398 BL 0x1C16D08
	0x0375B39C MOV X1, X0
	0x0375B3A0 MOV X0, X19
	0x0375B3A4 BL 0x1C16DEC
	0x0375B3A8 B 0x3758088
	0x0375B3AC LDR X0, [X0 + 0x110]
	0x0375B3B0 RET
	0x0375B3B4 STR X1, [X0 + 0x110]
	0x0375B3B8 RET
	0x0375B3BC LDR X0, [X0 + 0x118]
	0x0375B3C0 RET
	0x0375B3C4 STR X1, [X0 + 0x118]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xC86000
	009 Move W8, [X21+3589]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x9EC000
	017 Move X0, [X0+40]
	018 Call 0x1C17CF4
	019 Move X0, 0x9EB000
	020 Move X0, [X0+3984]
	021 Call 0x1C17CF4
	022 Move X0, 0x9C1000
	023 Move X0, [X0+3352]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3589], W8
	027 Move W8, [X20+216]
	028 Move W9, 0x4154
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X8, 0x9C1000
	032 Move X8, [X8+3352]
	033 Move X0, [X8]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 NotImplemented "Instruction LDRSW not yet implemented."
	039 Add X8, X8, X19
	040 Move S8, [X8]
	041 Move S9, [X8+4]
	042 Move S10, [X8+8]
	043 Move S3, [X8+12]
	044 Move X0, [X20+288]
	045 Compare X0, 0
	046 JumpIfEqual {87}
	047 Move X21, 0x9EB000
	048 Move X21, [X21+3984]
	049 Move X1, X19
	050 Move X2, [X21]
	051 Call InputControl`1<Single>.ReadValueFromStateWithCaching, X0, X1
	052 Move X0, [X20+296]
	053 Compare X0, 0
	054 JumpIfEqual {87}
	055 Move X2, [X21]
	056 Move X1, X19
	057 Move V8, V0
	058 Call InputControl`1<Single>.ReadValueFromStateWithCaching, X0, X1
	059 Move X0, [X20+304]
	060 Compare X0, 0
	061 JumpIfEqual {87}
	062 Move X2, [X21]
	063 Move X1, X19
	064 Move V9, V0
	065 Call InputControl`1<Single>.ReadValueFromStateWithCaching, X0, X1
	066 Move X0, [X20+312]
	067 Compare X0, 0
	068 JumpIfEqual {87}
	069 Move X8, 0x9EC000
	070 Move X8, [X8+40]
	071 Move X1, X19
	072 Move V10, V0
	073 Move X2, [X8]
	074 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	075 Move V3, V0
	076 Move V0, V8
	077 Move V1, V9
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Move X30, [X31+32]
	081 Move X21, [X31+40]
	082 Move D9, [X31+16]
	083 Move D8, [X31+24]
	084 Move V2, V10
	085 Move V10, [X31+64]
	086 Return X0
	087 Call 0x1C17F20

Method: System.Void WriteValueIntoState(UnityEngine.Quaternion value, System.Void* statePtr)

Disassembly:
	0x0375B3C8 RET
	0x0375B3CC STR D8, [X31 - 0x30]!
	0x0375B3D0 STP X30, X21, [X31 + 0x10]
	0x0375B3D4 STP X20, X19, [X31 + 0x20]
	0x0375B3D8 ADRP X21, 0xC85000
	0x0375B3DC LDRB W8, [X21 + 0xE15]
	0x0375B3E0 MOV X19, X1
	0x0375B3E4 MOV X20, X0
	0x0375B3E8 TBNZ X8, 0x0, 0x375B40C
	0x0375B3EC ADRP X0, 0x9EB000
	0x0375B3F0 LDR X0, [X0 + 0x28]
	0x0375B3F4 BL 0x1C16CF4
	0x0375B3F8 ADRP X0, 0x9C0000
	0x0375B3FC LDR X0, [X0 + 0xD18]
	0x0375B400 BL 0x1C16CF4
	0x0375B404 MOVZ W8, 0x1
	0x0375B408 STRB W8, [X21 + 0xE15]
	0x0375B40C LDR W8, [X20 + 0xD8]
	0x0375B410 MOVZ W9, 0x4332
	0x0375B414 MOVK W9, 0x56450000
	0x0375B418 CMP W8, W9
	0x0375B41C B.NE 0x375B448
	0x0375B420 ADRP X8, 0x9C0000
	0x0375B424 LDR X8, [X8 + 0xD18]
	0x0375B428 LDR X0, [X8]
	0x0375B42C LDR W8, [X0 + 0xE0]
	0x0375B430 CBNZ W8, 0x375B438
	0x0375B434 BL 0x1C16DFC
	0x0375B438 LDRSW X8, [X20 + 0x14]
	0x0375B43C ADD X8, X8, X19
	0x0375B440 LDP S8, S1, [X8]
	0x0375B444 B 0x375B480
	0x0375B448 LDR X0, [X20 + 0x110]
	0x0375B44C CBZ X0, 0x375B494
	0x0375B450 ADRP X21, 0x9EB000
	0x0375B454 LDR X21, [X21 + 0x28]
	0x0375B458 MOV X1, X19
	0x0375B45C LDR X2, [X21]
	0x0375B460 BL 0x2E05DE8
	0x0375B464 LDR X0, [X20 + 0x118]
	0x0375B468 CBZ X0, 0x375B494
	0x0375B46C LDR X2, [X21]
	0x0375B470 MOV X1, X19
	0x0375B474 MOV V8.16B, V0.16B
	0x0375B478 BL 0x2E05DE8
	0x0375B47C MOV V1.16B, V0.16B
	0x0375B480 LDP X20, X19, [X31 + 0x20]
	0x0375B484 LDP X30, X21, [X31 + 0x10]
	0x0375B488 MOV V0.16B, V8.16B
	0x0375B48C LDR V8, [X31], #0x30
	0x0375B490 RET
	0x0375B494 BL 0x1C16F20
	0x0375B498 STP D9, D8, [X31 - 0x30]!
	0x0375B49C STP X30, X21, [X31 + 0x10]
	0x0375B4A0 STP X20, X19, [X31 + 0x20]
	0x0375B4A4 ADRP X21, 0xC85000
	0x0375B4A8 LDRB W8, [X21 + 0xE16]
	0x0375B4AC MOV X19, X1
	0x0375B4B0 MOV V8.16B, V1.16B
	0x0375B4B4 MOV V9.16B, V0.16B
	0x0375B4B8 MOV X20, X0
	0x0375B4BC TBNZ X8, 0x0, 0x375B4D4
	0x0375B4C0 ADRP X0, 0x9C0000
	0x0375B4C4 LDR X0, [X0 + 0xD18]
	0x0375B4C8 BL 0x1C16CF4
	0x0375B4CC MOVZ W8, 0x1
	0x0375B4D0 STRB W8, [X21 + 0xE16]
	0x0375B4D4 LDR W8, [X20 + 0xD8]
	0x0375B4D8 MOVZ W9, 0x4332
	0x0375B4DC MOVK W9, 0x56450000
	0x0375B4E0 CMP W8, W9
	0x0375B4E4 B.NE 0x375B51C
	0x0375B4E8 ADRP X8, 0x9C0000
	0x0375B4EC LDR X8, [X8 + 0xD18]
	0x0375B4F0 LDR X0, [X8]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xC86000
	010 Move W8, [X21+3590]
	011 Move X19, X1
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x9C1000
	022 Move X0, [X0+3352]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3590], W8
	026 Move W8, [X20+216]
	027 Move W9, 0x4154
	028 NotImplemented "Instruction MOVK not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, 0x9C1000
	031 Move X8, [X8+3352]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Add X8, X8, X19
	041 Move [X8+8], S9
	042 Move [X8+16], S8
	043 Move X20, [X31+48]
	044 Move X19, [X31+56]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move [X8], S11
	048 Move [X8+8], S10
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Return 
	052 Move X0, [X20+288]
	053 Compare X0, 0
	054 JumpIfEqual {96}
	055 Move X8, [X0]
	056 Move V0, V11
	057 Move X1, X19
	058 Move X9, [X8+600]
	059 Move X2, [X8+608]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X0, [X20+296]
	062 Compare X0, 0
	063 JumpIfEqual {96}
	064 Move X8, [X0]
	065 Move V0, V10
	066 Move X1, X19
	067 Move X9, [X8+600]
	068 Move X2, [X8+608]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X0, [X20+304]
	071 Compare X0, 0
	072 JumpIfEqual {96}
	073 Move X8, [X0]
	074 Move V0, V9
	075 Move X1, X19
	076 Move X9, [X8+600]
	077 Move X2, [X8+608]
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X0, [X20+312]
	080 Compare X0, 0
	081 JumpIfEqual {96}
	082 Move X8, [X0]
	083 Move V0, V8
	084 Move X1, X19
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X3, [X8+600]
	088 Move X2, [X8+608]
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Move D9, [X31+16]
	092 Move D8, [X31+24]
	093 Move D11, [X31+64]
	094 Move D10, [X31+72]
	095 CallNoReturn X3
	096 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.FourCC CalculateOptimizedControlDataType()

Disassembly:
	0x0375B4F4 LDR W8, [X0 + 0xE0]
	0x0375B4F8 CBNZ W8, 0x375B500
	0x0375B4FC BL 0x1C16DFC
	0x0375B500 LDRSW X8, [X20 + 0x14]
	0x0375B504 LDP X30, X21, [X31 + 0x10]
	0x0375B508 ADD X8, X8, X19
	0x0375B50C LDP X20, X19, [X31 + 0x20]
	0x0375B510 STP S9, S8, [X8]
	0x0375B514 LDP D9, D8, [X31], #0x30
	0x0375B518 RET
	0x0375B51C LDR X0, [X20 + 0x110]
	0x0375B520 CBZ X0, 0x375B568
	0x0375B524 LDR X8, [X0]
	0x0375B528 MOV V0.16B, V9.16B
	0x0375B52C MOV X1, X19
	0x0375B530 LDR X9, [X8 + 0x258]
	0x0375B534 LDR X2, [X8 + 0x260]
	0x0375B538 BLR X9
	0x0375B53C LDR X0, [X20 + 0x118]
	0x0375B540 CBZ X0, 0x375B568
	0x0375B544 LDR X8, [X0]
	0x0375B548 MOV X1, X19
	0x0375B54C LDP X20, X19, [X31 + 0x20]
	0x0375B550 LDP X30, X21, [X31 + 0x10]
	0x0375B554 LDR X3, [X8 + 0x258]
	0x0375B558 LDR X2, [X8 + 0x260]
	0x0375B55C MOV V0.16B, V8.16B
	0x0375B560 LDP D9, D8, [X31], #0x30
	0x0375B564 BR X3
	0x0375B568 BL 0x1C16F20
	0x0375B56C STP D9, D8, [X31 - 0x40]!
	0x0375B570 STR X30, [X31 + 0x10]
	0x0375B574 STP X22, X21, [X31 + 0x20]
	0x0375B578 STP X20, X19, [X31 + 0x30]
	0x0375B57C ADRP X21, 0xC85000
	0x0375B580 ADRP X22, 0x9EB000
	0x0375B584 LDRB W8, [X21 + 0xE17]
	0x0375B588 LDR X22, [X22 + 0x110]
	0x0375B58C MOV X19, X1
	0x0375B590 MOV X20, X0
	0x0375B594 TBNZ X8, 0x0, 0x375B5AC
	0x0375B598 ADRP X0, 0x9EB000
	0x0375B59C LDR X0, [X0 + 0x110]
	0x0375B5A0 BL 0x1C16CF4
	0x0375B5A4 MOVZ W8, 0x1
	0x0375B5A8 STRB W8, [X21 + 0xE17]
	0x0375B5AC LDR X2, [X22]
	0x0375B5B0 MOV X0, X20
	0x0375B5B4 MOV X1, X19
	0x0375B5B8 BL 0x2E09758
	0x0375B5BC ADRP X19, 0xC7E000
	0x0375B5C0 LDRB W8, [X19 + 0x818]
	0x0375B5C4 MOV V8.16B, V0.16B
	0x0375B5C8 MOV V9.16B, V1.16B
	0x0375B5CC CBNZ W8, 0x375B5E4
	0x0375B5D0 ADRP X0, 0x998000
	0x0375B5D4 LDR X0, [X0 + 0x5A8]
	0x0375B5D8 BL 0x1C16CF4
	0x0375B5DC MOVZ W8, 0x1
	0x0375B5E0 STRB W8, [X19 + 0x818]
	0x0375B5E4 ADRP X8, 0x998000
	0x0375B5E8 LDR X8, [X8 + 0x5A8]
	0x0375B5EC LDR X0, [X8]
	0x0375B5F0 LDR W8, [X0 + 0xE0]
	0x0375B5F4 CBNZ W8, 0x375B5FC
	0x0375B5F8 BL 0x1C16DFC
	0x0375B5FC LDP X20, X19, [X31 + 0x30]
	0x0375B600 LDP X22, X21, [X31 + 0x20]
	0x0375B604 LDR X30, [X31 + 0x10]
	0x0375B608 FMUL S0, S8, S8
	0x0375B60C FMUL S1, S9, S9
	0x0375B610 FADD S0, S0, S1
	0x0375B614 FSQRT S0, S0
	0x0375B618 LDP D9, D8, [X31], #0x40
	0x0375B61C RET
	0x0375B620 STR X30, [X31 - 0x30]!
	0x0375B624 STP X22, X21, [X31 + 0x10]
	0x0375B628 STP X20, X19, [X31 + 0x20]
	0x0375B62C ADRP X21, 0xC85000
	0x0375B630 ADRP X20, 0x9C0000
	0x0375B634 LDRB W8, [X21 + 0xE18]
	0x0375B638 LDR X20, [X20 + 0xD18]
	0x0375B63C MOV X19, X0
	0x0375B640 TBNZ X8, 0x0, 0x375B658
	0x0375B644 ADRP X0, 0x9C0000
	0x0375B648 LDR X0, [X0 + 0xD18]
	0x0375B64C BL 0x1C16CF4
	0x0375B650 MOVZ W8, 0x1
	0x0375B654 STRB W8, [X21 + 0xE18]
	0x0375B658 LDR X0, [X20]
	0x0375B65C LDR W8, [X0 + 0xE0]
	0x0375B660 CBNZ W8, 0x375B668
	0x0375B664 BL 0x1C16DFC
	0x0375B668 LDR W8, [X19 + 0x1C]
	0x0375B66C CMP W8, 0x40
	0x0375B670 B.NE 0x375B738
	0x0375B674 LDR X0, [X20]
	0x0375B678 LDR W8, [X0 + 0xE0]
	0x0375B67C CBNZ W8, 0x375B684
	0x0375B680 BL 0x1C16DFC
	0x0375B684 LDR W8, [X19 + 0x18]
	0x0375B688 CBNZ W8, 0x375B738
	0x0375B68C LDR X8, [X19 + 0x110]
	0x0375B690 CBZ X8, 0x375B764
	0x0375B694 LDR X0, [X20]
	0x0375B698 LDR W21, [X8 + 0xD8]
	0x0375B69C LDR W9, [X0 + 0xE0]
	0x0375B6A0 CBNZ W9, 0x375B6AC
	0x0375B6A4 BL 0x1C16DFC
	0x0375B6A8 LDR X0, [X20]
	0x0375B6AC LDR X8, [X0 + 0xB8]
	0x0375B6B0 LDR W8, [X8 + 0x2C]
	0x0375B6B4 CMP W21, W8
	0x0375B6B8 B.NE 0x375B738
	0x0375B6BC LDR X8, [X19 + 0x118]
	0x0375B6C0 CBZ X8, 0x375B764
	0x0375B6C4 LDR W9, [X0 + 0xE0]
	0x0375B6C8 LDR W22, [X8 + 0xD8]
	0x0375B6CC CBNZ W9, 0x375B6E0
	0x0375B6D0 BL 0x1C16DFC
	0x0375B6D4 LDR X0, [X20]
	0x0375B6D8 LDR X8, [X0 + 0xB8]
	0x0375B6DC LDR W21, [X8 + 0x2C]
	0x0375B6E0 CMP W22, W21
	0x0375B6E4 B.NE 0x375B738
	0x0375B6E8 LDR X21, [X19 + 0x118]
	0x0375B6EC CBZ X21, 0x375B764
	0x0375B6F0 LDR W8, [X0 + 0xE0]
	0x0375B6F4 CBNZ W8, 0x375B6FC
	0x0375B6F8 BL 0x1C16DFC
	0x0375B6FC LDR X8, [X19 + 0x110]
	0x0375B700 CBZ X8, 0x375B764
	0x0375B704 LDR W8, [X8 + 0x14]
	0x0375B708 LDR W9, [X21 + 0x14]
	0x0375B70C ADD W8, W8, 0x4
	0x0375B710 CMP W9, W8
	0x0375B714 B.NE 0x375B738
	0x0375B718 LDR X0, [X20]
	0x0375B71C LDR W8, [X0 + 0xE0]
	0x0375B720 CBNZ W8, 0x375B72C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC86000
	007 Move X20, 0x9C1000
	008 Move W8, [X21+3591]
	009 Move X20, [X20+3352]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9C1000
	016 Move X0, [X0+3352]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3591], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W8, [X19+28]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W8, [X19+24]
	033 Compare W8, 0
	034 JumpIfNotEqual {143}
	035 Move X8, [X19+288]
	036 Compare X8, 0
	037 JumpIfEqual {165}
	038 Move X0, [X20]
	039 Move W22, [X8+216]
	040 Move W9, [X0+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X20]
	045 Move X8, [X0+184]
	046 Move W8, [X8+44]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X19+296]
	049 Compare X8, 0
	050 JumpIfEqual {165}
	051 Move W9, [X0+224]
	052 Move W21, [X8+216]
	053 Compare W9, 0
	054 JumpIfNotEqual {59}
	055 Call 0x1C17DFC
	056 Move X0, [X20]
	057 Move X8, [X0+184]
	058 Move W22, [X8+44]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X8, [X19+304]
	061 Compare X8, 0
	062 JumpIfEqual {165}
	063 Move W9, [X0+224]
	064 Move W22, [X8+216]
	065 Compare W9, 0
	066 JumpIfNotEqual {71}
	067 Call 0x1C17DFC
	068 Move X0, [X20]
	069 Move X8, [X0+184]
	070 Move W21, [X8+44]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X8, [X19+312]
	073 Compare X8, 0
	074 JumpIfEqual {165}
	075 Move W9, [X0+224]
	076 Move W21, [X8+216]
	077 Compare W9, 0
	078 JumpIfNotEqual {83}
	079 Call 0x1C17DFC
	080 Move X0, [X20]
	081 Move X8, [X0+184]
	082 Move W22, [X8+44]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X21, [X19+296]
	085 Compare X21, 0
	086 JumpIfEqual {165}
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Move X8, [X19+288]
	092 Compare X8, 0
	093 JumpIfEqual {165}
	094 Move W9, [X8+20]
	095 Move W10, [X21+20]
	096 Add W9, W9, 4
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X21, [X19+304]
	099 Compare X21, 0
	100 JumpIfEqual {165}
	101 Move X0, [X20]
	102 Move W9, [X0+224]
	103 Compare W9, 0
	104 JumpIfNotEqual {109}
	105 Call 0x1C17DFC
	106 Move X8, [X19+288]
	107 Compare X8, 0
	108 JumpIfEqual {165}
	109 Move W9, [X8+20]
	110 Move W10, [X21+20]
	111 Add W9, W9, 8
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X21, [X19+312]
	114 Compare X21, 0
	115 JumpIfEqual {165}
	116 Move X0, [X20]
	117 Move W9, [X0+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {124}
	120 Call 0x1C17DFC
	121 Move X8, [X19+288]
	122 Compare X8, 0
	123 JumpIfEqual {165}
	124 Move W9, [X8+20]
	125 Move W10, [X21+20]
	126 Add W9, W9, 12
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move W8, [X8+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {143}
	131 Move X8, [X19+296]
	132 Compare X8, 0
	133 JumpIfEqual {165}
	134 Move W8, [X8+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {143}
	137 Move X8, [X19+304]
	138 Compare X8, 0
	139 JumpIfEqual {165}
	140 Move W8, [X8+224]
	141 Compare W8, 0
	142 JumpIfEqual {157}
	143 Move X0, [X20]
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {149}
	147 Call 0x1C17DFC
	148 Move X0, [X20]
	149 Move X8, [X0+184]
	150 Move W0, [X8]
	151 Move X20, [X31+32]
	152 Move X19, [X31+40]
	153 Move X22, [X31+16]
	154 Move X21, [X31+24]
	155 Move X30, [X31+48]
	156 Return X0
	157 Move X0, [X20]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {163}
	161 Call 0x1C17DFC
	162 Move X0, [X20]
	163 Move X8, [X0+184]
	164 Add X8, X8, 60
	165 Call 0x1C17F20

