Type: UnityEngine.InputSystem.Controls.Vector3Control

Method: UnityEngine.InputSystem.Controls.AxisControl get_x()

Disassembly:
	0x0375C768 ADRP X0, 0x9BF000
	0x0375C76C LDR X0, [X0 + 0xC90]

ISIL:
	001 Move X0, [X0+280]
	002 Return X0

Method: System.Void set_x(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375C770 BL 0x1C16CF4
	0x0375C774 MOVZ W8, 0x1

ISIL:
	001 Move [X0+280], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_y()

Disassembly:
	0x0375C778 STRB W8, [X21 + 0xE25]
	0x0375C77C LDR V0, [X20 + 0x10]

ISIL:
	001 Move X0, [X0+288]
	002 Return X0

Method: System.Void set_y(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375C780 FCMP S0, 0x0
	0x0375C784 B.GT 0x375C79C

ISIL:
	001 Move [X0+288], X1
	002 Return 

Method: UnityEngine.InputSystem.Controls.AxisControl get_z()

Disassembly:
	0x0375C788 ADRP X8, 0x9BF000
	0x0375C78C LDR X8, [X8 + 0xC90]

ISIL:
	001 Move X0, [X0+296]
	002 Return X0

Method: System.Void set_z(UnityEngine.InputSystem.Controls.AxisControl value)

Disassembly:
	0x0375C790 LDR X8, [X8]
	0x0375C794 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X0+296], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x0375C798 LDR V0, [X8]
	0x0375C79C FCMP S8, S0
	0x0375C7A0 B.LT 0x375C80C
	0x0375C7A4 MOVZ W8, 0x1
	0x0375C7A8 STRB W8, [X20 + 0x18]
	0x0375C7AC MOV X0, X19
	0x0375C7B0 LDP X20, X19, [X31 + 0x20]
	0x0375C7B4 LDP X30, X21, [X31 + 0x10]
	0x0375C7B8 MOV X1, X31
	0x0375C7BC LDR V8, [X31], #0x30
	0x0375C7C0 B 0x376C754
	0x0375C7C4 ADRP X21, 0xC84000
	0x0375C7C8 LDRB W8, [X21 + 0xE25]
	0x0375C7CC TBNZ X8, 0x0, 0x375C7E4
	0x0375C7D0 ADRP X0, 0x9BF000
	0x0375C7D4 LDR X0, [X0 + 0xC90]
	0x0375C7D8 BL 0x1C16CF4
	0x0375C7DC MOVZ W8, 0x1
	0x0375C7E0 STRB W8, [X21 + 0xE25]
	0x0375C7E4 LDR V0, [X20 + 0x10]
	0x0375C7E8 FCMP S0, 0x0
	0x0375C7EC B.GT 0x375C804
	0x0375C7F0 ADRP X8, 0x9BF000
	0x0375C7F4 LDR X8, [X8 + 0xC90]
	0x0375C7F8 LDR X8, [X8]
	0x0375C7FC LDR X8, [X8 + 0xB8]
	0x0375C800 LDR V0, [X8]
	0x0375C804 FCMP S8, S0
	0x0375C808 B.GE 0x375C8A4
	0x0375C80C MOV X0, X19
	0x0375C810 MOV X1, X31
	0x0375C814 BL 0x376C678
	0x0375C818 FCMP S8, 0x0
	0x0375C81C MOV W20, W0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC85000
	007 Move X22, 0x9EB000
	008 Move X20, 0x9C0000
	009 Move W8, [X21+3609]
	010 Move X22, [X22+280]
	011 Move X20, [X20+3352]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x9EB000
	018 Move X0, [X0+280]
	019 Call 0x1C17CF4
	020 Move X0, 0x9C0000
	021 Move X0, [X0+3352]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3609], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call InputControl`1<Vector3>..ctor, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move X8, [X0+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W8, [X8+56]
	038 Move [X19+16], W8
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x0375C820 B.LE 0x375C828
	0x0375C824 TBZ X20, 0x0, 0x375C8CC
	0x0375C828 ADRP X21, 0xC7D000
	0x0375C82C LDRB W8, [X21 + 0x5AA]
	0x0375C830 CBNZ W8, 0x375C848
	0x0375C834 ADRP X0, 0x99E000
	0x0375C838 LDR X0, [X0 + 0x4B8]
	0x0375C83C BL 0x1C16CF4
	0x0375C840 MOVZ W8, 0x1
	0x0375C844 STRB W8, [X21 + 0x5AA]
	0x0375C848 ADRP X8, 0x99E000
	0x0375C84C LDR X8, [X8 + 0x4B8]
	0x0375C850 ADRP X9, 0xFFFFFFFFFD38E000
	0x0375C854 LDR V0, [X9 + 0x240]
	0x0375C858 FABS S2, S8
	0x0375C85C LDR X8, [X8]
	0x0375C860 FMOV S3, 8
	0x0375C864 FMUL S0, S2, S0
	0x0375C868 LDR X8, [X8 + 0xB8]
	0x0375C86C LDR V1, [X8]
	0x0375C870 FMUL S1, S1, S3
	0x0375C874 FCMP S0, S1
	0x0375C878 FCSEL S0, S0, S1, GT
	0x0375C87C FCMP S2, S0
	0x0375C880 CSET W8, PL
	0x0375C884 ORN W8, W8, W20, 0x0
	0x0375C888 TBNZ X8, 0x0, 0x375C8BC
	0x0375C88C MOV X0, X19
	0x0375C890 LDP X20, X19, [X31 + 0x20]
	0x0375C894 LDP X30, X21, [X31 + 0x10]
	0x0375C898 MOV X1, X31
	0x0375C89C LDR V8, [X31], #0x30
	0x0375C8A0 B 0x376C794
	0x0375C8A4 MOVZ W8, 0x1
	0x0375C8A8 MOV X0, X19
	0x0375C8AC MOV X1, X31
	0x0375C8B0 STRB W8, [X20 + 0x18]
	0x0375C8B4 BL 0x376C678
	0x0375C8B8 TBZ X0, 0x0, 0x375C8CC
	0x0375C8BC LDP X20, X19, [X31 + 0x20]
	0x0375C8C0 LDP X30, X21, [X31 + 0x10]
	0x0375C8C4 LDR V8, [X31], #0x30
	0x0375C8C8 RET
	0x0375C8CC MOV X0, X19
	0x0375C8D0 LDP X20, X19, [X31 + 0x20]
	0x0375C8D4 LDP X30, X21, [X31 + 0x10]
	0x0375C8D8 MOV X1, X31
	0x0375C8DC LDR V8, [X31], #0x30
	0x0375C8E0 B 0x376C69C
	0x0375C8E4 STRB W31, [X0 + 0x18]
	0x0375C8E8 RET
	0x0375C8EC MOV X1, X31
	0x0375C8F0 B 0x33BDD8C
	0x0375C8F4 STR X30, [X31 - 0x20]!
	0x0375C8F8 STP X20, X19, [X31 + 0x10]
	0x0375C8FC ADRP X20, 0xC84000
	0x0375C900 LDRB W8, [X20 + 0xE27]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xC85000
	010 Move X25, 0x9C0000
	011 Move X21, 0x9E9000
	012 Move X23, 0x9C0000
	013 Move X22, 0x9C5000
	014 Move X20, 0x9EB000
	015 Move W8, [X24+3610]
	016 Move X25, [X25+1920]
	017 Move X21, [X21+3632]
	018 Move X23, [X23+1928]
	019 Move X22, [X22+976]
	020 Move X20, [X20+288]
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0x9EB000
	027 Move X0, [X0+288]
	028 Call 0x1C17CF4
	029 Move X0, 0x9E9000
	030 Move X0, [X0+3632]
	031 Call 0x1C17CF4
	032 Move X0, 0x9C0000
	033 Move X0, [X0+1920]
	034 Call 0x1C17CF4
	035 Move X0, 0x9C0000
	036 Move X0, [X0+1928]
	037 Call 0x1C17CF4
	038 Move X0, 0x9C5000
	039 Move X0, [X0+976]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X24+3610], W8
	043 Move X1, [X25]
	044 Move X2, [X21]
	045 Move X0, X19
	046 Call 0x21FD754, X0, X1
	047 Move [X19+280], X0
	048 Move X1, [X23]
	049 Move X2, [X21]
	050 Move X0, X19
	051 Call 0x21FD754, X0, X1
	052 Move [X19+288], X0
	053 Move X1, [X22]
	054 Move X2, [X21]
	055 Move X0, X19
	056 Call 0x21FD754, X0, X1
	057 Move [X19+296], X0
	058 Move X1, [X20]
	059 Move X0, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Call InputControl`1<Vector3>.FinishSetup, X0
	069 Return 

Method: UnityEngine.Vector3 ReadUnprocessedValueFromState(System.Void* statePtr)

Disassembly:
	0x0375C904 MOV X19, X0
	0x0375C908 TBNZ X8, 0x0, 0x375C920
	0x0375C90C ADRP X0, 0x9BF000
	0x0375C910 LDR X0, [X0 + 0x270]
	0x0375C914 BL 0x1C16CF4
	0x0375C918 MOVZ W8, 0x1
	0x0375C91C STRB W8, [X20 + 0xE27]
	0x0375C920 LDR V0, [X19 + 0x10]
	0x0375C924 FCMP S0, 0x0
	0x0375C928 B.GT 0x375C954
	0x0375C92C ADRP X8, 0x9BF000
	0x0375C930 LDR X8, [X8 + 0x270]
	0x0375C934 LDR X0, [X8]
	0x0375C938 LDR W8, [X0 + 0xE0]
	0x0375C93C CBNZ W8, 0x375C944
	0x0375C940 BL 0x1C16DFC
	0x0375C944 MOV X0, X31
	0x0375C948 BL 0x37701B0
	0x0375C94C CBZ X0, 0x375C960
	0x0375C950 LDR V0, [X0 + 0x4C]
	0x0375C954 LDP X20, X19, [X31 + 0x10]
	0x0375C958 LDR X30, [X31], #0x20
	0x0375C95C RET
	0x0375C960 BL 0x1C16F20
	0x0375C964 STR X30, [X31 - 0x20]!
	0x0375C968 STP X20, X19, [X31 + 0x10]
	0x0375C96C ADRP X20, 0xC84000
	0x0375C970 LDRB W8, [X20 + 0xE28]
	0x0375C974 MOV X19, X0
	0x0375C978 TBNZ X8, 0x0, 0x375C990
	0x0375C97C ADRP X0, 0x9BF000
	0x0375C980 LDR X0, [X0 + 0xC90]
	0x0375C984 BL 0x1C16CF4
	0x0375C988 MOVZ W8, 0x1
	0x0375C98C STRB W8, [X20 + 0xE28]
	0x0375C990 LDR V0, [X19 + 0x14]
	0x0375C994 FCMP S0, 0x0
	0x0375C998 B.GT 0x375C9B0
	0x0375C99C ADRP X8, 0x9BF000
	0x0375C9A0 LDR X8, [X8 + 0xC90]
	0x0375C9A4 LDR X8, [X8]
	0x0375C9A8 LDR X8, [X8 + 0xB8]
	0x0375C9AC LDR V0, [X8]
	0x0375C9B0 LDP X20, X19, [X31 + 0x10]
	0x0375C9B4 LDR X30, [X31], #0x20
	0x0375C9B8 RET
	0x0375C9BC STP D9, D8, [X31 - 0x30]!
	0x0375C9C0 STP X30, X21, [X31 + 0x10]
	0x0375C9C4 STP X20, X19, [X31 + 0x20]
	0x0375C9C8 MOV X19, X1
	0x0375C9CC MOV X20, X0
	0x0375C9D0 MOV X0, X1
	0x0375C9D4 MOV X1, X31
	0x0375C9D8 BL 0x376C668
	0x0375C9DC TBZ X0, 0x0, 0x375CA58
	0x0375C9E0 ADRP X21, 0xC84000
	0x0375C9E4 LDRB W8, [X21 + 0xE28]
	0x0375C9E8 TBNZ X8, 0x0, 0x375CA00
	0x0375C9EC ADRP X0, 0x9BF000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xC85000
	008 Move W8, [X21+3611]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x9EB000
	016 Move X0, [X0+40]
	017 Call 0x1C17CF4
	018 Move X0, 0x9C0000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3611], W8
	023 Move W8, [X20+216]
	024 Move W9, 0x4333
	025 NotImplemented "Instruction MOVK not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0x9C0000
	028 Move X8, [X8+3352]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Add X8, X8, X19
	036 Move S8, [X8]
	037 Move S9, [X8+4]
	038 Move V2, [X8+8]
	039 Move X0, [X20+280]
	040 Compare X0, 0
	041 JumpIfEqual {71}
	042 Move X21, 0x9EB000
	043 Move X21, [X21+40]
	044 Move X1, X19
	045 Move X2, [X21]
	046 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	047 Move X0, [X20+288]
	048 Compare X0, 0
	049 JumpIfEqual {71}
	050 Move X2, [X21]
	051 Move X1, X19
	052 Move V8, V0
	053 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	054 Move X0, [X20+296]
	055 Compare X0, 0
	056 JumpIfEqual {71}
	057 Move X2, [X21]
	058 Move X1, X19
	059 Move V9, V0
	060 Call InputControl`1<Single>.ReadUnprocessedValueFromStateWithCaching, X0, X1
	061 Move V2, V0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Move X21, [X31+24]
	066 Move V0, V8
	067 Move V1, V9
	068 Move D9, [X31+48]
	069 Move D8, [X31+56]
	070 Return X0
	071 Call 0x1C17F20

Method: System.Void WriteValueIntoState(UnityEngine.Vector3 value, System.Void* statePtr)

Disassembly:
	0x0375C9F0 LDR X0, [X0 + 0xC90]
	0x0375C9F4 BL 0x1C16CF4
	0x0375C9F8 MOVZ W8, 0x1
	0x0375C9FC STRB W8, [X21 + 0xE28]
	0x0375CA00 LDR V0, [X20 + 0x14]
	0x0375CA04 FCMP S0, 0x0
	0x0375CA08 B.GT 0x375CA20
	0x0375CA0C ADRP X8, 0x9BF000
	0x0375CA10 LDR X8, [X8 + 0xC90]
	0x0375CA14 LDR X8, [X8]
	0x0375CA18 LDR X8, [X8 + 0xB8]
	0x0375CA1C LDR V0, [X8]
	0x0375CA20 MOV X0, X19
	0x0375CA24 MOV X1, X31
	0x0375CA28 BL 0x376C690
	0x0375CA2C TBZ X0, 0x0, 0x375CA58
	0x0375CA30 MOV X0, X19
	0x0375CA34 MOV X1, X31
	0x0375CA38 BL 0x376C62C
	0x0375CA3C STR D0, [X20 + 0x18]
	0x0375CA40 MOV X0, X19
	0x0375CA44 LDP X20, X19, [X31 + 0x20]
	0x0375CA48 LDP X30, X21, [X31 + 0x10]
	0x0375CA4C MOV X1, X31
	0x0375CA50 LDP D9, D8, [X31], #0x30
	0x0375CA54 B 0x376C69C
	0x0375CA58 MOV X0, X19
	0x0375CA5C MOV X1, X31
	0x0375CA60 BL 0x376C678
	0x0375CA64 TBZ X0, 0x0, 0x375CAB8
	0x0375CA68 ADRP X21, 0xC84000
	0x0375CA6C LDRB W8, [X21 + 0xE28]
	0x0375CA70 TBNZ X8, 0x0, 0x375CA88
	0x0375CA74 ADRP X0, 0x9BF000
	0x0375CA78 LDR X0, [X0 + 0xC90]
	0x0375CA7C BL 0x1C16CF4
	0x0375CA80 MOVZ W8, 0x1
	0x0375CA84 STRB W8, [X21 + 0xE28]
	0x0375CA88 LDR V0, [X20 + 0x14]
	0x0375CA8C FCMP S0, 0x0
	0x0375CA90 B.GT 0x375CAA8
	0x0375CA94 ADRP X8, 0x9BF000
	0x0375CA98 LDR X8, [X8 + 0xC90]
	0x0375CA9C LDR X8, [X8]
	0x0375CAA0 LDR X8, [X8 + 0xB8]
	0x0375CAA4 LDR V0, [X8]
	0x0375CAA8 MOV X0, X19
	0x0375CAAC MOV X1, X31
	0x0375CAB0 BL 0x376C690
	0x0375CAB4 TBZ X0, 0x0, 0x375CAC8
	0x0375CAB8 LDP X20, X19, [X31 + 0x20]
	0x0375CABC LDP X30, X21, [X31 + 0x10]
	0x0375CAC0 LDP D9, D8, [X31], #0x30
	0x0375CAC4 RET
	0x0375CAC8 MOV X0, X19
	0x0375CACC MOV X1, X31
	0x0375CAD0 BL 0x376C62C
	0x0375CAD4 LDR V9, [X20 + 0x18]
	0x0375CAD8 MOV X0, X20
	0x0375CADC MOV V8.16B, V0.16B
	0x0375CAE0 BL 0x375C8F4
	0x0375CAE4 FSUB D1, D8, D9
	0x0375CAE8 FCVT S0, S0
	0x0375CAEC MOV X0, X19
	0x0375CAF0 MOV X1, X31
	0x0375CAF4 FCMP D1, D0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xC85000
	009 Move W8, [X21+3612]
	010 Move X19, X1
	011 Move V8, V2
	012 Move V9, V1
	013 Move V10, V0
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x9C0000
	020 Move X0, [X0+3352]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3612], W8
	024 Move W8, [X20+216]
	025 Move W9, 0x4333
	026 NotImplemented "Instruction MOVK not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, 0x9C0000
	029 Move X8, [X8+3352]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Add X8, X8, X19
	039 Move [X8], S10
	040 Move [X8+8], S9
	041 Move [X8+8], S8
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move V10, [X31+64]
	047 Return 
	048 Move X0, [X20+280]
	049 Compare X0, 0
	050 JumpIfEqual {82}
	051 Move X8, [X0]
	052 Move V0, V10
	053 Move X1, X19
	054 Move X9, [X8+600]
	055 Move X2, [X8+608]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X0, [X20+288]
	058 Compare X0, 0
	059 JumpIfEqual {82}
	060 Move X8, [X0]
	061 Move V0, V9
	062 Move X1, X19
	063 Move X9, [X8+600]
	064 Move X2, [X8+608]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X0, [X20+296]
	067 Compare X0, 0
	068 JumpIfEqual {82}
	069 Move X8, [X0]
	070 Move V0, V8
	071 Move X1, X19
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X3, [X8+600]
	075 Move X2, [X8+608]
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Move D9, [X31+16]
	079 Move D8, [X31+24]
	080 Move V10, [X31+64]
	081 CallNoReturn X3
	082 Call 0x1C17F20

Method: System.Single EvaluateMagnitude(System.Void* statePtr)

Disassembly:
	0x0375CAF8 B.GE 0x375CB0C
	0x0375CAFC LDP X20, X19, [X31 + 0x20]
	0x0375CB00 LDP X30, X21, [X31 + 0x10]
	0x0375CB04 LDP D9, D8, [X31], #0x30
	0x0375CB08 B 0x376C794
	0x0375CB0C LDP X20, X19, [X31 + 0x20]
	0x0375CB10 LDP X30, X21, [X31 + 0x10]
	0x0375CB14 LDP D9, D8, [X31], #0x30
	0x0375CB18 B 0x376C6D4
	0x0375CB1C STR X31, [X0 + 0x18]
	0x0375CB20 RET
	0x0375CB24 MOV X1, X31
	0x0375CB28 B 0x33BDD8C
	0x0375CB2C STR X30, [X31 - 0x20]!
	0x0375CB30 STP X20, X19, [X31 + 0x10]
	0x0375CB34 ADRP X20, 0xC84000
	0x0375CB38 LDRB W8, [X20 + 0xE29]
	0x0375CB3C MOV X19, X0
	0x0375CB40 TBNZ X8, 0x0, 0x375CB58
	0x0375CB44 ADRP X0, 0x9BF000
	0x0375CB48 LDR X0, [X0 + 0x270]
	0x0375CB4C BL 0x1C16CF4
	0x0375CB50 MOVZ W8, 0x1
	0x0375CB54 STRB W8, [X20 + 0xE29]
	0x0375CB58 LDR V0, [X19 + 0x10]
	0x0375CB5C FCMP S0, 0x0
	0x0375CB60 B.GT 0x375CB8C
	0x0375CB64 ADRP X8, 0x9BF000
	0x0375CB68 LDR X8, [X8 + 0x270]
	0x0375CB6C LDR X0, [X8]
	0x0375CB70 LDR W8, [X0 + 0xE0]
	0x0375CB74 CBNZ W8, 0x375CB7C
	0x0375CB78 BL 0x1C16DFC
	0x0375CB7C MOV X0, X31
	0x0375CB80 BL 0x37701B0
	0x0375CB84 CBZ X0, 0x375CB98
	0x0375CB88 LDR V0, [X0 + 0x48]
	0x0375CB8C LDP X20, X19, [X31 + 0x10]
	0x0375CB90 LDR X30, [X31], #0x20
	0x0375CB94 RET
	0x0375CB98 BL 0x1C16F20
	0x0375CB9C STR X30, [X31 - 0x20]!
	0x0375CBA0 STP X20, X19, [X31 + 0x10]
	0x0375CBA4 ADRP X20, 0xC84000
	0x0375CBA8 LDRB W8, [X20 + 0xE2A]
	0x0375CBAC MOV X19, X0
	0x0375CBB0 TBNZ X8, 0x0, 0x375CBC8
	0x0375CBB4 ADRP X0, 0x9BF000
	0x0375CBB8 LDR X0, [X0 + 0xC90]
	0x0375CBBC BL 0x1C16CF4

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xC85000
	010 Move X22, 0x9EB000
	011 Move W8, [X21+3613]
	012 Move X22, [X22+296]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x9EB000
	020 Move X0, [X0+296]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3613], W8
	024 Move X2, [X22]
	025 Move X0, X20
	026 Move X1, X19
	027 Call InputControl`1<Vector3>.ReadValueFromStateWithCaching, X0, X1
	028 Move X19, 0xC7D000
	029 Move W8, [X19+1924]
	030 Move V8, V0
	031 Move V9, V1
	032 Move V10, V2
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x998000
	036 Move X0, [X0+1448]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X19+1924], W8
	040 Move X8, 0x998000
	041 Move X8, [X8+1448]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Multiply S0, S8, S8
	048 Multiply S1, S9, S9
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X30, [X31+24]
	054 Move D9, [X31+8]
	055 Move D8, [X31+16]
	056 Add S0, S0, S1
	057 Multiply S1, S10, S10
	058 Add S0, S1, S0
	059 NotImplemented "Instruction FSQRT not yet implemented."
	060 Move V10, [X31+64]
	061 Return V0

Method: UnityEngine.InputSystem.Utilities.FourCC CalculateOptimizedControlDataType()

Disassembly:
	0x0375CBC0 MOVZ W8, 0x1
	0x0375CBC4 STRB W8, [X20 + 0xE2A]
	0x0375CBC8 LDR V0, [X19 + 0x14]
	0x0375CBCC FCMP S0, 0x0
	0x0375CBD0 B.GT 0x375CBE8
	0x0375CBD4 ADRP X8, 0x9BF000
	0x0375CBD8 LDR X8, [X8 + 0xC90]
	0x0375CBDC LDR X8, [X8]
	0x0375CBE0 LDR X8, [X8 + 0xB8]
	0x0375CBE4 LDR V0, [X8]
	0x0375CBE8 LDP X20, X19, [X31 + 0x10]
	0x0375CBEC LDR X30, [X31], #0x20
	0x0375CBF0 RET
	0x0375CBF4 STP X30, X21, [X31 - 0x20]!
	0x0375CBF8 STP X20, X19, [X31 + 0x10]
	0x0375CBFC ADRP X20, 0xC84000
	0x0375CC00 LDRB W8, [X20 + 0xE2B]
	0x0375CC04 MOV X19, X0
	0x0375CC08 TBNZ X8, 0x0, 0x375CC20
	0x0375CC0C ADRP X0, 0x9BF000
	0x0375CC10 LDR X0, [X0 + 0xC90]
	0x0375CC14 BL 0x1C16CF4
	0x0375CC18 MOVZ W8, 0x1
	0x0375CC1C STRB W8, [X20 + 0xE2B]
	0x0375CC20 ADRP X21, 0xC84000
	0x0375CC24 ADRP X20, 0x9BF000
	0x0375CC28 LDRB W8, [X21 + 0xE2A]
	0x0375CC2C LDR X20, [X20 + 0xC90]
	0x0375CC30 TBNZ X8, 0x0, 0x375CC48
	0x0375CC34 ADRP X0, 0x9BF000
	0x0375CC38 LDR X0, [X0 + 0xC90]
	0x0375CC3C BL 0x1C16CF4
	0x0375CC40 MOVZ W8, 0x1
	0x0375CC44 STRB W8, [X21 + 0xE2A]
	0x0375CC48 LDR V0, [X19 + 0x14]
	0x0375CC4C LDR X8, [X20]
	0x0375CC50 FCMP S0, 0x0
	0x0375CC54 B.LE 0x375CC60
	0x0375CC58 LDR X8, [X8 + 0xB8]
	0x0375CC5C B 0x375CC68
	0x0375CC60 LDR X8, [X8 + 0xB8]
	0x0375CC64 LDR V0, [X8]
	0x0375CC68 LDR V1, [X8 + 0x4]
	0x0375CC6C LDP X20, X19, [X31 + 0x10]
	0x0375CC70 FMUL S0, S0, S1
	0x0375CC74 LDP X30, X21, [X31], #0x20
	0x0375CC78 RET
	0x0375CC7C STP D9, D8, [X31 - 0x30]!
	0x0375CC80 STP X30, X21, [X31 + 0x10]
	0x0375CC84 STP X20, X19, [X31 + 0x20]
	0x0375CC88 MOV X19, X1
	0x0375CC8C MOV X20, X0
	0x0375CC90 MOV X0, X1
	0x0375CC94 MOV X1, X31
	0x0375CC98 BL 0x376C63C
	0x0375CC9C TBZ X0, 0x0, 0x375CCB8
	0x0375CCA0 MOV X0, X19
	0x0375CCA4 LDP X20, X19, [X31 + 0x20]
	0x0375CCA8 LDP X30, X21, [X31 + 0x10]
	0x0375CCAC MOV X1, X31
	0x0375CCB0 LDP D9, D8, [X31], #0x30
	0x0375CCB4 B 0x376C794
	0x0375CCB8 MOV X0, X19
	0x0375CCBC MOV X1, X31
	0x0375CCC0 BL 0x376C668
	0x0375CCC4 TBZ X0, 0x0, 0x375CD60
	0x0375CCC8 ADRP X21, 0xC84000
	0x0375CCCC LDRB W8, [X21 + 0xE2A]
	0x0375CCD0 TBNZ X8, 0x0, 0x375CCE8
	0x0375CCD4 ADRP X0, 0x9BF000
	0x0375CCD8 LDR X0, [X0 + 0xC90]
	0x0375CCDC BL 0x1C16CF4
	0x0375CCE0 MOVZ W8, 0x1
	0x0375CCE4 STRB W8, [X21 + 0xE2A]
	0x0375CCE8 LDR V0, [X20 + 0x14]
	0x0375CCEC FCMP S0, 0x0
	0x0375CCF0 B.GT 0x375CD08
	0x0375CCF4 ADRP X8, 0x9BF000
	0x0375CCF8 LDR X8, [X8 + 0xC90]
	0x0375CCFC LDR X8, [X8]
	0x0375CD00 LDR X8, [X8 + 0xB8]
	0x0375CD04 LDR V0, [X8]
	0x0375CD08 MOV X0, X19
	0x0375CD0C MOV X1, X31
	0x0375CD10 BL 0x376C690
	0x0375CD14 TBZ X0, 0x0, 0x375CD60
	0x0375CD18 MOV X0, X19
	0x0375CD1C MOV X1, X31
	0x0375CD20 BL 0x376C62C
	0x0375CD24 MOV X0, X19
	0x0375CD28 MOV X1, X31
	0x0375CD2C STR D0, [X20 + 0x18]
	0x0375CD30 BL 0x376C69C
	0x0375CD34 MOV X0, X20
	0x0375CD38 BL 0x375CB2C
	0x0375CD3C ADRP X8, 0xFFFFFFFFFD38E000
	0x0375CD40 LDR V1, [X8 + 0x17C]
	0x0375CD44 MOV X0, X19
	0x0375CD48 LDP X20, X19, [X31 + 0x20]
	0x0375CD4C LDP X30, X21, [X31 + 0x10]
	0x0375CD50 FADD S0, S0, S1
	0x0375CD54 MOV X1, X31
	0x0375CD58 LDP D9, D8, [X31], #0x30
	0x0375CD5C B 0x376C814
	0x0375CD60 MOV X0, X19
	0x0375CD64 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xC85000
	007 Move X20, 0x9C0000
	008 Move W8, [X21+3614]
	009 Move X20, [X20+3352]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x9C0000
	016 Move X0, [X0+3352]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3614], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W8, [X19+28]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W8, [X19+24]
	033 Compare W8, 0
	034 JumpIfNotEqual {109}
	035 Move X8, [X19+280]
	036 Compare X8, 0
	037 JumpIfEqual {123}
	038 Move X0, [X20]
	039 Move W22, [X8+216]
	040 Move W9, [X0+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X20]
	045 Move X8, [X0+184]
	046 Move W8, [X8+44]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X19+288]
	049 Compare X8, 0
	050 JumpIfEqual {123}
	051 Move W9, [X0+224]
	052 Move W21, [X8+216]
	053 Compare W9, 0
	054 JumpIfNotEqual {59}
	055 Call 0x1C17DFC
	056 Move X0, [X20]
	057 Move X8, [X0+184]
	058 Move W22, [X8+44]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X8, [X19+296]
	061 Compare X8, 0
	062 JumpIfEqual {123}
	063 Move W9, [X0+224]
	064 Move W22, [X8+216]
	065 Compare W9, 0
	066 JumpIfNotEqual {71}
	067 Call 0x1C17DFC
	068 Move X0, [X20]
	069 Move X8, [X0+184]
	070 Move W21, [X8+44]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X21, [X19+288]
	073 Compare X21, 0
	074 JumpIfEqual {123}
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X8, [X19+280]
	080 Compare X8, 0
	081 JumpIfEqual {123}
	082 Move W9, [X8+20]
	083 Move W10, [X21+20]
	084 Add W9, W9, 4
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X21, [X19+296]
	087 Compare X21, 0
	088 JumpIfEqual {123}
	089 Move X0, [X20]
	090 Move W9, [X0+224]
	091 Compare W9, 0
	092 JumpIfNotEqual {97}
	093 Call 0x1C17DFC
	094 Move X8, [X19+280]
	095 Compare X8, 0
	096 JumpIfEqual {123}
	097 Move W8, [X8+20]
	098 Move W9, [X21+20]
	099 Add W8, W8, 8
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, [X20]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {107}
	105 Call 0x1C17DFC
	106 Move X0, [X20]
	107 Move X8, [X0+184]
	108 Add X8, X8, 56
	109 Move X0, [X20]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {115}
	113 Call 0x1C17DFC
	114 Move X0, [X20]
	115 Move X8, [X0+184]
	116 Move W0, [X8]
	117 Move X20, [X31+32]
	118 Move X19, [X31+40]
	119 Move X22, [X31+16]
	120 Move X21, [X31+24]
	121 Move X30, [X31+48]
	122 Return X0
	123 Call 0x1C17F20

