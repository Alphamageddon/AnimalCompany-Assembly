Type: UnityEngine.InputSystem.Utilities.InputActionTrace/ActionEventPtr

Method: UnityEngine.InputSystem.InputAction get_action()

Disassembly:
	0x0375F468 MOVZ W1, 0x3
	0x0375F46C MOV X0, X21
	0x0375F470 MOV X2, X31
	0x0375F474 BL 0x3222A1C
	0x0375F478 AND W8, W0, 0xFFFF
	0x0375F47C B 0x375F428
	0x0375F480 MOVZ W8, 0x20
	0x0375F484 B 0x375F428
	0x0375F488 ADRP X0, 0x999000
	0x0375F48C LDR X0, [X0 + 0x528]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0]
	004 Compare X0, 0
	005 JumpIfEqual {12}
	006 Move X8, [X8+8]
	007 Move X2, X31
	008 NotImplemented "Instruction LDRH not yet implemented."
	009 Move X30, [X31+16]
	010 Call InputActionState.GetActionOrNull, X0, X1
	011 Return X0
	012 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionPhase get_phase()

Disassembly:
	0x0375F490 BL 0x1C16D08
	0x0375F494 BL 0x1C16F10
	0x0375F498 MOV X19, X0

ISIL:
	001 Move X8, [X0+8]
	002 Move W0, [X8+27]
	003 Return X0

Method: UnityEngine.InputSystem.InputControl get_control()

Disassembly:
	0x0375F49C ADRP X0, 0x996000
	0x0375F4A0 LDR X0, [X0 + 0xC80]
	0x0375F4A4 BL 0x1C16D08
	0x0375F4A8 MOV X1, X0
	0x0375F4AC MOV X0, X19
	0x0375F4B0 MOV X2, X31
	0x0375F4B4 BL 0x330E100
	0x0375F4B8 B 0x375F500
	0x0375F4BC ADRP X0, 0x99C000
	0x0375F4C0 LDR X0, [X0 + 0x578]
	0x0375F4C4 BL 0x1C16D08
	0x0375F4C8 BL 0x1C16F10
	0x0375F4CC MOV X19, X0
	0x0375F4D0 ADRP X0, 0x9E7000
	0x0375F4D4 LDR X0, [X0 + 0x280]
	0x0375F4D8 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 Move X8, [X8+24]
	006 Compare X8, 0
	007 JumpIfEqual {16}
	008 Move X9, [X0+8]
	009 Move W10, [X8+24]
	010 NotImplemented "Instruction LDRH not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X8, W9
	013 Move X0, [X8+32]
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20
	017 Call 0x1C17F28

Method: UnityEngine.InputSystem.IInputInteraction get_interaction()

Disassembly:
	0x0375F4DC MOV X20, X0
	0x0375F4E0 ADRP X0, 0x996000
	0x0375F4E4 LDR X0, [X0 + 0xC80]
	0x0375F4E8 BL 0x1C16D08
	0x0375F4EC MOV X2, X0
	0x0375F4F0 MOV X0, X19
	0x0375F4F4 MOV X1, X20
	0x0375F4F8 MOV X3, X31
	0x0375F4FC BL 0x330E16C
	0x0375F500 ADRP X0, 0x9E7000
	0x0375F504 LDR X0, [X0 + 0x288]
	0x0375F508 BL 0x1C16D08
	0x0375F50C MOV X1, X0
	0x0375F510 MOV X0, X19
	0x0375F514 BL 0x1C16DEC
	0x0375F518 RET
	0x0375F51C MOV W0, W0
	0x0375F520 RET
	0x0375F524 SUB X31, X31, 0x40
	0x0375F528 STR X30, [X31 + 0x10]
	0x0375F52C STP X22, X21, [X31 + 0x20]
	0x0375F530 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+8]
	005 Move X1, X31
	006 Call ActionEvent.get_interactionIndex, X0
	007 Add W31, W0, 1
	008 Move X8, [X19]
	009 Compare X8, 0
	010 JumpIfEqual {22}
	011 Move X8, [X8+32]
	012 Compare X8, 0
	013 JumpIfEqual {22}
	014 Move W9, [X8+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X8, W0
	017 Move X0, [X8+32]
	018 Move X0, X31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return X0
	022 Call 0x1C17F20
	023 Call 0x1C17F28

Method: System.Double get_time()

Disassembly:
	0x0375F534 ADRP X19, 0xC81000
	0x0375F538 ADRP X21, 0x994000
	0x0375F53C ADRP X22, 0x996000
	0x0375F540 LDRB W8, [X19 + 0xE45]
	0x0375F544 LDR X21, [X21 + 0x9D0]
	0x0375F548 LDR X22, [X22 + 0x170]
	0x0375F54C MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+8]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call InputEvent.get_time, X0
	008 Return V0
	009 Call 0x1C17F20

Method: System.Double get_startTime()

Disassembly:
	0x0375F550 TBNZ X8, 0x0, 0x375F580
	0x0375F554 ADRP X0, 0x996000
	0x0375F558 LDR X0, [X0 + 0x170]

ISIL:
	001 Move X8, [X0+8]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Return V0

Method: System.Double get_duration()

Disassembly:
	0x0375F55C BL 0x1C16CF4
	0x0375F560 ADRP X0, 0x994000
	0x0375F564 LDR X0, [X0 + 0x9D0]
	0x0375F568 BL 0x1C16CF4
	0x0375F56C ADRP X0, 0x9E7000
	0x0375F570 LDR X0, [X0 + 0x290]
	0x0375F574 BL 0x1C16CF4
	0x0375F578 MOVZ W8, 0x1
	0x0375F57C STRB W8, [X19 + 0xE45]
	0x0375F580 LDR X0, [X21]
	0x0375F584 MOVZ W1, 0x4
	0x0375F588 BL 0x1C16D6C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+8]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call InputEvent.get_time, X0
	009 Move X8, [X19+8]
	010 NotImplemented "Instruction LDUR not yet implemented."
	011 Subtract D0, D0, D1
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return V0
	015 Call 0x1C17F20

Method: System.Int32 get_valueSizeInBytes()

Disassembly:
	0x0375F58C LDR W8, [X20]
	0x0375F590 MOV X19, X0
	0x0375F594 LDR X0, [X22]

ISIL:
	001 Move X0, [X0+8]
	002 Move X1, X31
	003 Call ActionEvent.get_valueSizeInBytes, X0
	004 Return X0

Method: System.Object ReadValueAsObject()

Disassembly:
	0x0375F598 ADD X1, X31, 0x1C
	0x0375F59C SBFM W8, W8, 0x18, 0x1F
	0x0375F5A0 STRH W8, [X31 + 0x1C]
	0x0375F5A4 BL 0x1C16E04
	0x0375F5A8 CBZ X19, 0x375F6D0
	0x0375F5AC MOV X21, X0
	0x0375F5B0 CBZ X0, 0x375F5C8
	0x0375F5B4 LDR X8, [X19]
	0x0375F5B8 MOV X0, X21
	0x0375F5BC LDR X1, [X8 + 0x40]
	0x0375F5C0 BL 0x1C16E00
	0x0375F5C4 CBZ X0, 0x375F6C4
	0x0375F5C8 LDR W8, [X19 + 0x18]
	0x0375F5CC CBZ W8, 0x375F6C0
	0x0375F5D0 STR X21, [X19 + 0x20]
	0x0375F5D4 LDRB W8, [X20 + 0x2]
	0x0375F5D8 LDR X0, [X22]
	0x0375F5DC ADD X1, X31, 0x18
	0x0375F5E0 STRH W8, [X31 + 0x18]
	0x0375F5E4 BL 0x1C16E04
	0x0375F5E8 MOV X21, X0
	0x0375F5EC CBZ X0, 0x375F604
	0x0375F5F0 LDR X8, [X19]
	0x0375F5F4 MOV X0, X21
	0x0375F5F8 LDR X1, [X8 + 0x40]
	0x0375F5FC BL 0x1C16E00
	0x0375F600 CBZ X0, 0x375F6C4
	0x0375F604 LDR W8, [X19 + 0x18]
	0x0375F608 CMP W8, 0x1
	0x0375F60C B.LS 0x375F6C0
	0x0375F610 STR X21, [X19 + 0x28]
	0x0375F614 LDRB W8, [X20 + 0x1]
	0x0375F618 LDR X0, [X22]
	0x0375F61C ADD X1, X31, 0xC
	0x0375F620 STRH W8, [X31 + 0xC]
	0x0375F624 BL 0x1C16E04
	0x0375F628 MOV X21, X0
	0x0375F62C CBZ X0, 0x375F644
	0x0375F630 LDR X8, [X19]
	0x0375F634 MOV X0, X21
	0x0375F638 LDR X1, [X8 + 0x40]
	0x0375F63C BL 0x1C16E00
	0x0375F640 CBZ X0, 0x375F6C4
	0x0375F644 LDR W8, [X19 + 0x18]
	0x0375F648 CMP W8, 0x2
	0x0375F64C B.LS 0x375F6C0
	0x0375F650 STR X21, [X19 + 0x30]
	0x0375F654 LDRB W8, [X20]
	0x0375F658 LDR X0, [X22]
	0x0375F65C ADD X1, X31, 0x8
	0x0375F660 STRH W8, [X31 + 0x8]
	0x0375F664 BL 0x1C16E04
	0x0375F668 MOV X20, X0
	0x0375F66C CBZ X0, 0x375F684
	0x0375F670 LDR X8, [X19]
	0x0375F674 MOV X0, X20
	0x0375F678 LDR X1, [X8 + 0x40]
	0x0375F67C BL 0x1C16E00
	0x0375F680 CBZ X0, 0x375F6C4
	0x0375F684 LDR W8, [X19 + 0x18]
	0x0375F688 CMP W8, 0x3
	0x0375F68C B.LS 0x375F6C0
	0x0375F690 ADRP X8, 0x9E7000
	0x0375F694 LDR X8, [X8 + 0x290]
	0x0375F698 STR X20, [X19 + 0x38]
	0x0375F69C MOV X1, X19
	0x0375F6A0 MOV X2, X31
	0x0375F6A4 LDR X0, [X8]
	0x0375F6A8 BL 0x3227C5C
	0x0375F6AC LDP X20, X19, [X31 + 0x30]
	0x0375F6B0 LDP X22, X21, [X31 + 0x20]
	0x0375F6B4 LDR X30, [X31 + 0x10]
	0x0375F6B8 ADD X31, X31, 0x40
	0x0375F6BC RET
	0x0375F6C0 BL 0x1C16F28
	0x0375F6C4 BL 0x1C16F44
	0x0375F6C8 MOV X1, X31
	0x0375F6CC BL 0x1C16DEC
	0x0375F6D0 BL 0x1C16F20
	0x0375F6D4 LDR W8, [X0]
	0x0375F6D8 CMP W8, W1
	0x0375F6DC CSET W0, EQ
	0x0375F6E0 RET
	0x0375F6E4 STP X30, X21, [X31 - 0x20]!
	0x0375F6E8 STP X20, X19, [X31 + 0x10]
	0x0375F6EC ADRP X21, 0xC81000
	0x0375F6F0 LDRB W8, [X21 + 0xE46]
	0x0375F6F4 MOV X20, X1
	0x0375F6F8 MOV X19, X0
	0x0375F6FC TBNZ X8, 0x0, 0x375F714
	0x0375F700 ADRP X0, 0x9BC000
	0x0375F704 LDR X0, [X0 + 0xD28]
	0x0375F708 BL 0x1C16CF4
	0x0375F70C MOVZ W8, 0x1
	0x0375F710 STRB W8, [X21 + 0xE46]
	0x0375F714 CBZ X20, 0x375F730
	0x0375F718 ADRP X8, 0x9BC000
	0x0375F71C LDR X8, [X8 + 0xD28]
	0x0375F720 LDR X9, [X20]
	0x0375F724 LDR X8, [X8]
	0x0375F728 CMP X9, X8
	0x0375F72C B.EQ 0x375F738
	0x0375F730 MOV W0, W31
	0x0375F734 B 0x375F750
	0x0375F738 MOV X0, X20
	0x0375F73C BL 0x1C16E08
	0x0375F740 LDR W8, [X0]
	0x0375F744 LDR W9, [X19]
	0x0375F748 CMP W9, W8
	0x0375F74C CSET W0, EQ
	0x0375F750 LDP X20, X19, [X31 + 0x10]
	0x0375F754 LDP X30, X21, [X31], #0x20
	0x0375F758 RET
	0x0375F75C LDR W0, [X0]
	0x0375F760 RET
	0x0375F764 CMP W0, W1
	0x0375F768 CSET W0, EQ
	0x0375F76C RET
	0x0375F770 CMP W0, W1
	0x0375F774 CSET W0, NE
	0x0375F778 RET
	0x0375F77C MOV W0, W0
	0x0375F780 RET
	0x0375F784 RET
	0x0375F788 LDR X8, [X0 + 0x8]
	0x0375F78C CBZ X8, 0x375F798
	0x0375F790 LDR W0, [X8 + 0x10]
	0x0375F794 RET
	0x0375F798 MOV W0, W31
	0x0375F79C RET
	0x0375F7A0 LDR X8, [X0 + 0x8]
	0x0375F7A4 CMP X8, 0x0
	0x0375F7A8 CSET W0, EQ
	0x0375F7AC RET
	0x0375F7B0 LDR X0, [X0 + 0x8]
	0x0375F7B4 RET
	0x0375F7B8 STP X30, X21, [X31 - 0x20]!
	0x0375F7BC STP X20, X19, [X31 + 0x10]
	0x0375F7C0 ADRP X21, 0xC81000
	0x0375F7C4 LDRB W8, [X21 + 0xE48]
	0x0375F7C8 MOV X20, X1
	0x0375F7CC MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xC82000
	006 Move W8, [X19+3643]
	007 Move X20, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x9BD000
	013 Move X0, [X0+2128]
	014 Call 0x1C17CF4
	015 Move X0, 0x995000
	016 Move X0, [X0+1728]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3643], W8
	020 Move X0, [X20+8]
	021 Compare X0, 0
	022 JumpIfEqual {132}
	023 Move X1, X31
	024 Call ActionEvent.get_valueData, X0
	025 Move X8, [X20]
	026 Compare X8, 0
	027 JumpIfEqual {131}
	028 Move X9, [X20+8]
	029 Move X19, X0
	030 Move X0, X8
	031 Move X1, X31
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Call InputActionState.get_bindingStates, X0
	034 Add X0, X0, X21
	035 Move X1, X31
	036 Call BindingState.get_isPartOfComposite, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {113}
	041 Move X0, [X20]
	042 Compare X0, 0
	043 JumpIfEqual {131}
	044 Move X1, X31
	045 Move X21, X21
	046 ShiftRight X21, 59
	047 And X21, X21, 0x3FFFFFF
	048 Call InputActionState.get_bindingStates, X0
	049 Add X0, X21, X0
	050 Move X1, X31
	051 Call BindingState.get_compositeOrCompositeBindingIndex, X0
	052 Move X8, [X20]
	053 Compare X8, 0
	054 JumpIfEqual {131}
	055 Move W21, W0
	056 Move X0, X8
	057 Move X1, X31
	058 Call InputActionState.get_bindingStates, X0
	059 Move X8, W21
	060 Add X0, X0, X8
	061 Move X1, X31
	062 Call BindingState.get_compositeOrCompositeBindingIndex, X0
	063 Move X8, [X20]
	064 Compare X8, 0
	065 JumpIfEqual {131}
	066 Move X8, [X8+48]
	067 Compare X8, 0
	068 JumpIfEqual {131}
	069 Move W9, [X8+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add X8, X8, W0
	072 Move X20, [X8+32]
	073 Compare X20, 0
	074 JumpIfEqual {131}
	075 Move X8, [X20]
	076 Move X0, X20
	077 Move X9, [X8+376]
	078 Move X1, [X8+384]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move X8, 0x995000
	081 Move X8, [X8+1728]
	082 Move X21, X0
	083 Move X8, [X8]
	084 Move W9, [X8+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {89}
	087 Move X0, X8
	088 Call 0x1C17DFC
	089 Move X0, X21
	090 Move X1, X31
	091 Move X2, X31
	092 Call Type.op_Equality, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfEqual {151}
	097 Move X8, 0x9BD000
	098 Move X8, [X8+2128]
	099 Move X0, [X8]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X0, X19
	105 Move X20, [X31+16]
	106 Move X19, [X31+24]
	107 Move X1, X21
	108 Move X2, X31
	109 Move X30, [X31+32]
	110 Move X21, [X31+40]
	111 Call Marshal.PtrToStructure, X0, X1
	112 Return X0
	113 Move X0, [X20+8]
	114 Move X1, X31
	115 Call ActionEvent.get_valueSizeInBytes, X0
	116 Move W21, W0
	117 Move X0, X20
	118 Call ActionEventPtr.get_control, X0
	119 Compare X0, 0
	120 JumpIfEqual {131}
	121 Move X8, [X0]
	122 Move X1, X19
	123 Move X20, [X31+16]
	124 Move X19, [X31+24]
	125 Move W2, W21
	126 Move X4, [X8+424]
	127 Move X3, [X8+432]
	128 Move X30, [X31+32]
	129 Move X21, [X31+40]
	130 CallNoReturn X4
	131 Call 0x1C17F20
	132 Move X0, 0x995000
	133 Move X0, [X0+1456]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X19, X0
	137 Move X0, 0x9E8000
	138 Move X0, [X0+536]
	139 Call 0x1C17D08
	140 Move X1, X0
	141 Move X0, X19
	142 Move X2, X31
	143 Call InvalidOperationException..ctor, X0, X1
	144 Move X0, 0x9E8000
	145 Move X0, [X0+544]
	146 Call 0x1C17D08
	147 Move X1, X0
	148 Move X0, X19
	149 Call 0x1C17DEC
	150 Call 0x1C17F28
	151 Move X0, 0x9E8000
	152 Move X0, [X0+552]
	153 Call 0x1C17D08
	154 Move X1, X20
	155 Move X2, X31
	156 Call String.Format, X0, X1
	157 Move X19, X0
	158 Move X0, 0x995000
	159 Move X0, [X0+1456]
	160 Call 0x1C17D08
	161 Call 0x1C17F10
	162 Move X1, X19
	163 Move X2, X31
	164 Move X20, X0
	165 Call InvalidOperationException..ctor, X0, X1
	166 Move X0, 0x9E8000
	167 Move X0, [X0+544]
	168 Call 0x1C17D08
	169 Move X1, X0
	170 Move X0, X20
	171 Call 0x1C17DEC

Method: System.Void ReadValue(System.Void* buffer, System.Int32 bufferSize)

Disassembly:
	0x0375F7D0 TBNZ X8, 0x0, 0x375F800
	0x0375F7D4 ADRP X0, 0x996000
	0x0375F7D8 LDR X0, [X0 + 0xC48]
	0x0375F7DC BL 0x1C16CF4
	0x0375F7E0 ADRP X0, 0x9BF000
	0x0375F7E4 LDR X0, [X0 + 0x510]
	0x0375F7E8 BL 0x1C16CF4
	0x0375F7EC ADRP X0, 0x996000
	0x0375F7F0 LDR X0, [X0 + 0x278]
	0x0375F7F4 BL 0x1C16CF4
	0x0375F7F8 MOVZ W8, 0x1
	0x0375F7FC STRB W8, [X21 + 0xE48]
	0x0375F800 CBZ X20, 0x375F834
	0x0375F804 ADRP X8, 0x9BF000
	0x0375F808 LDR X8, [X8 + 0x510]
	0x0375F80C LDR X9, [X8]
	0x0375F810 LDR X8, [X20]
	0x0375F814 CMP X8, X9
	0x0375F818 B.EQ 0x375F83C
	0x0375F81C ADRP X9, 0x996000
	0x0375F820 LDR X9, [X9 + 0x278]
	0x0375F824 LDR X9, [X9]
	0x0375F828 CMP X8, X9
	0x0375F82C CSEL X20, X20, X31, EQ
	0x0375F830 B.EQ 0x375F860
	0x0375F834 MOV W0, W31
	0x0375F838 B 0x375F854
	0x0375F83C MOV X0, X20
	0x0375F840 BL 0x1C16E08
	0x0375F844 LDR X8, [X0 + 0x8]
	0x0375F848 LDR X9, [X19 + 0x8]
	0x0375F84C CMP X9, X8
	0x0375F850 CSET W0, EQ
	0x0375F854 LDP X20, X19, [X31 + 0x10]
	0x0375F858 LDP X30, X21, [X31], #0x20
	0x0375F85C RET
	0x0375F860 LDR X19, [X19 + 0x8]
	0x0375F864 CBZ X19, 0x375F8B4
	0x0375F868 ADRP X8, 0x996000
	0x0375F86C LDR X8, [X8 + 0xC48]
	0x0375F870 LDR X0, [X8]
	0x0375F874 LDR W8, [X0 + 0xE0]
	0x0375F878 CBNZ W8, 0x375F880
	0x0375F87C BL 0x1C16DFC
	0x0375F880 MOV X0, X31
	0x0375F884 BL 0x3338524
	0x0375F888 CBZ X20, 0x375F8C8
	0x0375F88C MOV X1, X0
	0x0375F890 MOV X0, X20
	0x0375F894 MOV X2, X31
	0x0375F898 BL 0x322B660
	0x0375F89C MOV X1, X0
	0x0375F8A0 MOV X0, X19
	0x0375F8A4 LDP X20, X19, [X31 + 0x10]
	0x0375F8A8 MOV X2, X31
	0x0375F8AC LDP X30, X21, [X31], #0x20
	0x0375F8B0 B 0x3226C14
	0x0375F8B4 MOV X0, X20
	0x0375F8B8 LDP X20, X19, [X31 + 0x10]
	0x0375F8BC MOV X1, X31
	0x0375F8C0 LDP X30, X21, [X31], #0x20
	0x0375F8C4 B 0x32277A8
	0x0375F8C8 BL 0x1C16F20
	0x0375F8CC LDR X8, [X0 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X0
	007 Move X0, [X0+8]
	008 Move X20, X1
	009 Move X1, X31
	010 Move W19, W2
	011 Call ActionEvent.get_valueSizeInBytes, X0
	012 Move W21, W0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, [X22+8]
	015 Move X1, X31
	016 Call ActionEvent.get_valueData, X0
	017 Move X2, W21
	018 Move X1, X0
	019 Move X0, X20
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X22, [X31+16]
	023 Move X21, [X31+24]
	024 Move X3, X31
	025 Move X30, [X31+48]
	026 Call UnsafeUtility.MemCpy, X0, X1, X2
	027 Return 
	028 Move [X31+12], W21
	029 Move X20, 0x995000
	030 Move X20, [X20+1880]
	031 Move X0, X20
	032 Call 0x1C17D08
	033 Add X1, X31, 12
	034 Call 0x1C17E04
	035 Move X21, X0
	036 Move X0, X20
	037 Move [X31+8], W19
	038 Call 0x1C17D08
	039 Add X1, X31, 8
	040 Call 0x1C17E04
	041 Move X19, X0
	042 Move X0, 0x9E8000
	043 Move X0, [X0+560]
	044 Call 0x1C17D08
	045 Move X1, X21
	046 Move X2, X19
	047 Move X3, X31
	048 Call String.Format, X0, X1, X2
	049 Move X19, X0
	050 Move X0, 0x99D000
	051 Move X0, [X0+1400]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X20, X0
	055 Move X0, 0x9C0000
	056 Move X0, [X0+3928]
	057 Call 0x1C17D08
	058 Move X2, X0
	059 Move X0, X20
	060 Move X1, X19
	061 Move X3, X31
	062 Call ArgumentException..ctor, X0, X1, X2
	063 Move X0, 0x9E8000
	064 Move X0, [X0+568]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X20
	068 Call 0x1C17DEC

Method: TValue ReadValue()

Disassembly:
	0x022B6790 STUR X28, [X29 - 0x28]
	0x022B6794 CBZ X28, 0x22B6A6C
	0x022B6798 LDR W22, [X28 + 0x18]
	0x022B679C CMP W22, W25
	0x022B67A0 B.LS 0x22B6A68
	0x022B67A4 MOV X9, X25
	0x022B67A8 LDR X25, [X28]
	0x022B67AC MOV X20, X9
	0x022B67B0 SXTW X9, W9
	0x022B67B4 MOV X0, X23
	0x022B67B8 LDR W8, [X25 + 0x104]
	0x022B67BC MOV X2, X21
	0x022B67C0 STUR X9, [X29 - 0x40]
	0x022B67C4 NOP
	0x022B67C8 MADD X8, X8, X9, X28
	0x022B67CC ADD X1, X8, 0x20
	0x022B67D0 BL 0x3EB1AC0
	0x022B67D4 CMP W22, W27
	0x022B67D8 B.LS 0x22B6A68
	0x022B67DC LDR W8, [X25 + 0x104]
	0x022B67E0 SXTW X22, W27
	0x022B67E4 MOV X0, X26
	0x022B67E8 MOV X2, X21
	0x022B67EC MADD X8, X8, X22, X28
	0x022B67F0 ADD X1, X8, 0x20
	0x022B67F4 BL 0x3EB1AC0
	0x022B67F8 LDUR X8, [X29 - 0x30]
	0x022B67FC CBZ X8, 0x22B6A6C
	0x022B6800 LDP X8, X1, [X19 + 0x18]
	0x022B6804 MOV X9, X26
	0x022B6808 MOV X25, X20
	0x022B680C LDR W10, [X8 + 0x28]
	0x022B6810 LDR X0, [X1]
	0x022B6814 MOV X8, X23
	0x022B6818 TBNZ X10, 0x1F, 0x22B6824
	0x022B681C LDR X8, [X23]
	0x022B6820 LDR X9, [X26]
	0x022B6824 STP X8, X9, [X29 - 0x20]
	0x022B6828 LDR X8, [X1 + 0x10]
	0x022B682C LDUR X2, [X29 - 0x30]
	0x022B6830 SUB X3, X29, 0x20
	0x022B6834 SUB X4, X29, 0xC
	0x022B6838 BLR X8
	0x022B683C LDUR W8, [X29 - 0xC]
	0x022B6840 MOV X20, X24
	0x022B6844 LDUR X24, [X29 - 0x38]
	0x022B6848 TBZ X8, 0x1F, 0x22B6870
	0x022B684C LDR X8, [X24 + 0x38]
	0x022B6850 SUB X2, X29, 0x28
	0x022B6854 MOV W0, W27
	0x022B6858 MOV W1, W25
	0x022B685C LDR X3, [X8 + 0x28]
	0x022B6860 LDR X8, [X3]
	0x022B6864 BLR X8
	0x022B6868 LDUR X28, [X29 - 0x28]
	0x022B686C CBZ X28, 0x22B6A6C
	0x022B6870 LDR W8, [X28 + 0x18]
	0x022B6874 CMP W8, W20
	0x022B6878 B.LS 0x22B6A68
	0x022B687C LDR X8, [X28]
	0x022B6880 SXTW X19, W20
	0x022B6884 MOV X0, X23
	0x022B6888 MOV X2, X21
	0x022B688C LDR W8, [X8 + 0x104]
	0x022B6890 NOP
	0x022B6894 MADD X8, X8, X19, X28
	0x022B6898 ADD X1, X8, 0x20
	0x022B689C BL 0x3EB1AC0
	0x022B68A0 LDR W8, [X28 + 0x18]
	0x022B68A4 CMP W8, W27
	0x022B68A8 B.LS 0x22B6A68
	0x022B68AC LDR X8, [X28]
	0x022B68B0 MOV X0, X26
	0x022B68B4 MOV X2, X21
	0x022B68B8 LDR W8, [X8 + 0x104]
	0x022B68BC NOP
	0x022B68C0 MADD X8, X8, X22, X28
	0x022B68C4 ADD X1, X8, 0x20
	0x022B68C8 BL 0x3EB1AC0
	0x022B68CC LDR X8, [X24 + 0x38]
	0x022B68D0 LDP X9, X1, [X8 + 0x18]
	0x022B68D4 MOV X8, X23
	0x022B68D8 LDR W10, [X9 + 0x28]
	0x022B68DC LDR X0, [X1]
	0x022B68E0 MOV X9, X26
	0x022B68E4 TBNZ X10, 0x1F, 0x22B68F0
	0x022B68E8 LDR X8, [X23]
	0x022B68EC LDR X9, [X26]
	0x022B68F0 STP X8, X9, [X29 - 0x20]
	0x022B68F4 LDR X8, [X1 + 0x10]
	0x022B68F8 LDUR X2, [X29 - 0x30]
	0x022B68FC SUB X3, X29, 0x20
	0x022B6900 SUB X4, X29, 0xC
	0x022B6904 BLR X8
	0x022B6908 LDUR W8, [X29 - 0xC]
	0x022B690C TBZ X8, 0x1F, 0x22B692C
	0x022B6910 LDR X8, [X24 + 0x38]
	0x022B6914 SUB X2, X29, 0x28
	0x022B6918 MOV W0, W27
	0x022B691C MOV W1, W20
	0x022B6920 LDR X3, [X8 + 0x28]
	0x022B6924 LDR X8, [X3]
	0x022B6928 BLR X8
	0x022B692C LDUR X22, [X29 - 0x28]
	0x022B6930 CBZ X22, 0x22B6A6C
	0x022B6934 LDR W8, [X22 + 0x18]
	0x022B6938 CMP W8, W25
	0x022B693C B.LS 0x22B6A68
	0x022B6940 LDR X8, [X22]
	0x022B6944 LDUR X9, [X29 - 0x40]
	0x022B6948 MOV X0, X23
	0x022B694C MOV X2, X21
	0x022B6950 LDR W8, [X8 + 0x104]
	0x022B6954 NOP
	0x022B6958 MADD X8, X8, X9, X22
	0x022B695C ADD X1, X8, 0x20
	0x022B6960 BL 0x3EB1AC0
	0x022B6964 LDR W8, [X22 + 0x18]
	0x022B6968 CMP W8, W20
	0x022B696C B.LS 0x22B6A68
	0x022B6970 LDR X8, [X22]
	0x022B6974 MOV X0, X26
	0x022B6978 MOV X2, X21
	0x022B697C LDR W8, [X8 + 0x104]
	0x022B6980 NOP
	0x022B6984 MADD X8, X8, X19, X22
	0x022B6988 ADD X1, X8, 0x20
	0x022B698C BL 0x3EB1AC0
	0x022B6990 LDR X8, [X24 + 0x38]
	0x022B6994 LDP X9, X1, [X8 + 0x18]
	0x022B6998 LDR W8, [X9 + 0x28]
	0x022B699C LDR X0, [X1]
	0x022B69A0 TBNZ X8, 0x1F, 0x22B69B0
	0x022B69A4 LDR X8, [X23]
	0x022B69A8 LDR X26, [X26]
	0x022B69AC B 0x22B69B4
	0x022B69B0 MOV X8, X23
	0x022B69B4 STP X8, X26, [X29 - 0x20]
	0x022B69B8 LDR X8, [X1 + 0x10]
	0x022B69BC LDUR X2, [X29 - 0x30]
	0x022B69C0 SUB X3, X29, 0x20
	0x022B69C4 SUB X4, X29, 0xC
	0x022B69C8 BLR X8
	0x022B69CC LDUR W8, [X29 - 0xC]
	0x022B69D0 TBZ X8, 0x1F, 0x22B69F0
	0x022B69D4 LDR X8, [X24 + 0x38]
	0x022B69D8 SUB X2, X29, 0x28
	0x022B69DC MOV W0, W20
	0x022B69E0 MOV W1, W25
	0x022B69E4 LDR X3, [X8 + 0x28]
	0x022B69E8 LDR X8, [X3]
	0x022B69EC BLR X8
	0x022B69F0 LDUR X8, [X29 - 0x28]
	0x022B69F4 CBZ X8, 0x22B6A6C
	0x022B69F8 LDR W9, [X8 + 0x18]
	0x022B69FC CMP W9, W20
	0x022B6A00 B.LS 0x22B6A68
	0x022B6A04 LDR X9, [X8]
	0x022B6A08 MOV X0, X23
	0x022B6A0C MOV X2, X21
	0x022B6A10 LDR W9, [X9 + 0x104]
	0x022B6A14 NOP
	0x022B6A18 MADD X8, X9, X19, X8
	0x022B6A1C ADD X1, X8, 0x20
	0x022B6A20 BL 0x3EB1AC0
	0x022B6A24 LDUR X0, [X29 - 0x48]
	0x022B6A28 MOV X1, X23
	0x022B6A2C MOV X2, X21
	0x022B6A30 BL 0x3EB1AC0
	0x022B6A34 LDUR X8, [X29 - 0x50]
	0x022B6A38 LDR X8, [X8 + 0x28]
	0x022B6A3C LDUR X9, [X29 - 0x8]
	0x022B6A40 CMP X8, X9
	0x022B6A44 B.NE 0x22B6A70
	0x022B6A48 ADD X31, X29, 0x0
	0x022B6A4C LDP X20, X19, [X31 + 0x50]
	0x022B6A50 LDP X22, X21, [X31 + 0x40]
	0x022B6A54 LDP X24, X23, [X31 + 0x30]
	0x022B6A58 LDP X26, X25, [X31 + 0x20]
	0x022B6A5C LDP X28, X27, [X31 + 0x10]
	0x022B6A60 LDP X29, X30, [X31], #0x60
	0x022B6A64 RET
	0x022B6A68 BL 0x1C16F28
	0x022B6A6C BL 0x1C16F20
	0x022B6A70 BL 0x3EB1B20
	0x022B6A74 SUB X31, X31, 0x60
	0x022B6A78 STP X30, X27, [X31 + 0x10]
	0x022B6A7C STP X26, X25, [X31 + 0x20]
	0x022B6A80 STP X24, X23, [X31 + 0x30]
	0x022B6A84 STP X22, X21, [X31 + 0x40]
	0x022B6A88 STP X20, X19, [X31 + 0x50]
	0x022B6A8C LDR X8, [X5 + 0x38]
	0x022B6A90 MOV X22, X4
	0x022B6A94 MOV W20, W3

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Add X29, X31, 0
	013 Subtract X31, X31, 32
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X27+40]
	016 Move X19, X2
	017 Move X22, X1
	018 Move X20, X0
	019 Move [X29-8], X8
	020 Move X8, [X2+56]
	021 Compare X8, 0
	022 JumpIfNotEqual {26}
	023 Move X0, X19
	024 Call 0x1C5D6E0
	025 Move X8, [X19+56]
	026 Move X8, [X8+24]
	027 Move W23, [X8+252]
	028 Add X8, X31, 0
	029 Add X9, X23, 15
	030 And X9, X9, 0x1FFFFFFFF
	031 Subtract X26, X8, X9
	032 Add X31, X26, 0
	033 Add X8, X31, 0
	034 Subtract X24, X8, X9
	035 Add X31, X24, 0
	036 Add X8, X31, 0
	037 Subtract X25, X8, X9
	038 Add X31, X25, 0
	039 Move X0, X25
	040 Move W1, W31
	041 Move X2, X23
	042 Call 0x3EB2B10
	043 Move X0, [X20+8]
	044 Move X1, X31
	045 Call ActionEvent.get_valueSizeInBytes, X0
	046 Move X8, [X19+56]
	047 Move W21, W0
	048 Move X8, [X8]
	049 Move X9, [X8]
	050 Move X0, X8
	051 NotImplemented "Instruction BLR not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, [X19+56]
	054 Subtract X3, X29, 16
	055 Move X2, X31
	056 Move X4, X26
	057 Move X1, [X8+16]
	058 Move X0, [X1]
	059 Move [X29-16], X26
	060 Move X8, [X1+16]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move X0, X25
	063 Move X1, X26
	064 Move X2, X23
	065 Call 0x3EB2AC0
	066 Move X8, [X19+56]
	067 Move X0, X25
	068 Move X1, [X8+32]
	069 Move X8, [X1]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move X8, [X20+8]
	072 Move X19, X0
	073 Move X1, X31
	074 Move X0, X8
	075 Call ActionEvent.get_valueData, X0
	076 Move X1, X0
	077 Move X2, W21
	078 Move X0, X19
	079 Move X3, X31
	080 Call UnsafeUtility.MemCpy, X0, X1, X2
	081 Move X0, X24
	082 Move X1, X25
	083 Move X2, X23
	084 Call 0x3EB2AC0
	085 Move X0, X22
	086 Move X1, X24
	087 Move X2, X23
	088 Call 0x3EB2AC0
	089 Move X8, [X27+40]
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add X31, X29, 0
	093 Move X20, [X31+80]
	094 Move X19, [X31+88]
	095 Move X22, [X31+64]
	096 Move X21, [X31+72]
	097 Move X24, [X31+48]
	098 Move X23, [X31+56]
	099 Move X26, [X31+32]
	100 Move X25, [X31+40]
	101 Move X27, [X31+16]
	102 Move X29, [X31+96]
	103 Move X30, [X31+104]
	104 Return X0
	105 Move X0, 0x1E3E000
	106 Move X0, [X0+2512]
	107 Call 0x1C17D08
	108 Move W1, 4
	109 Call 0x1C17D6C
	110 Move X8, [X19+56]
	111 Move X22, X0
	112 Move X0, 0x1E3E000
	113 Move X23, [X8+8]
	114 Move X0, [X0+1728]
	115 Call 0x1C17D08
	116 Call 0x19913D0
	117 Move X0, X23
	118 Move X1, X31
	119 Call Type.GetTypeFromHandle, X0
	120 Move X23, X0
	121 Call 0x19913C0
	122 Move X8, [X23]
	123 Move X0, X23
	124 Move X9, [X8+424]
	125 Move X1, [X8+432]
	126 NotImplemented "Instruction BLR not yet implemented."
	127 Move X23, X0
	128 Move X0, X22
	129 Call 0x19913C0
	130 Move X0, X22
	131 Move X1, X23
	132 Call 0x19990B4
	133 Move X0, X22
	134 Move X1, X31
	135 Move X2, X23
	136 Call 0x1994444
	137 Move X8, [X19+56]
	138 Move X0, [X8]
	139 Move X8, [X0]
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Move [X29-16], W0
	142 Move X23, 0x1E3E000
	143 Move X23, [X23+1880]
	144 Move X0, X23
	145 Call 0x1C17D08
	146 Subtract X1, X29, 16
	147 Call 0x1C17E04
	148 Move X24, X0
	149 Move X0, X22
	150 Call 0x19913C0
	151 Move X0, X22
	152 Move X1, X24
	153 Call 0x19990B4
	154 Move W1, 1
	155 Move X0, X22
	156 Move X2, X24
	157 Call 0x1994444
	158 Move X0, X20
	159 Move X1, X31
	160 Call ActionEventPtr.get_action, X0
	161 Move X20, X0
	162 Move X0, X22
	163 Call 0x19913C0
	164 Move X0, X22
	165 Move X1, X20
	166 Call 0x19990B4
	167 Move W1, 2
	168 Move X0, X22
	169 Move X2, X20
	170 Call 0x1994444
	171 Move X0, X23
	172 Move [X29-20], W21
	173 Call 0x1C17D08
	174 Subtract X1, X29, 20
	175 Call 0x1C17E04
	176 Move X20, X0
	177 Move X0, X22
	178 Call 0x19913C0
	179 Move X0, X22
	180 Move X1, X20
	181 Call 0x19990B4
	182 Move W1, 3
	183 Move X0, X22
	184 Move X2, X20
	185 Call 0x1994444
	186 Move X0, 0x1E67000
	187 Move X0, [X0+2632]
	188 Call 0x1C17D08
	189 Move X1, X22
	190 Move X2, X31
	191 Call String.Format, X0, X1
	192 Move X20, X0
	193 Move X0, 0x1E3E000
	194 Move X0, [X0+1456]
	195 Call 0x1C17D08
	196 Call 0x1C17F10
	197 Move X1, X20
	198 Move X2, X31
	199 Move X21, X0
	200 Call InvalidOperationException..ctor, X0, X1
	201 Move X0, X21
	202 Move X1, X19
	203 Call 0x1C17DEC
	204 Call 0x3EB2B20

Method: System.String ToString()

Disassembly:
	0x0375EDA4 TBZ X0, 0x0, 0x375EDBC
	0x0375EDA8 LDR W8, [X20 + 0x10]
	0x0375EDAC ADD W21, W21, 0x1
	0x0375EDB0 CMP W21, W8
	0x0375EDB4 B.LT 0x375ED64
	0x0375EDB8 B 0x375EE68
	0x0375EDBC ADRP X8, 0x995000
	0x0375EDC0 LDR X8, [X8 + 0x8F0]
	0x0375EDC4 LDR X0, [X8]
	0x0375EDC8 BL 0x1C16F10
	0x0375EDCC MOV X1, X31
	0x0375EDD0 MOV X21, X0
	0x0375EDD4 BL 0x3231AC4
	0x0375EDD8 LDR W8, [X20 + 0x10]
	0x0375EDDC CMP W8, 0x1
	0x0375EDE0 B.LT 0x375EE50
	0x0375EDE4 MOV W22, W31
	0x0375EDE8 MOV X0, X20
	0x0375EDEC MOV W1, W22
	0x0375EDF0 MOV X2, X31
	0x0375EDF4 BL 0x3222A1C
	0x0375EDF8 LDR X8, [X24]
	0x0375EDFC MOV W23, W0
	0x0375EE00 LDR W9, [X8 + 0xE0]
	0x0375EE04 CBNZ W9, 0x375EE10
	0x0375EE08 MOV X0, X8
	0x0375EE0C BL 0x1C16DFC
	0x0375EE10 MOV W0, W23
	0x0375EE14 MOV X1, X31
	0x0375EE18 BL 0x331ABF0
	0x0375EE1C AND W8, W23, 0xFFFF
	0x0375EE20 CMP W8, 0x5F
	0x0375EE24 B.EQ 0x375EE2C
	0x0375EE28 TBZ X0, 0x0, 0x375EE40
	0x0375EE2C CBZ X21, 0x375EE88
	0x0375EE30 MOV X0, X21
	0x0375EE34 MOV W1, W23
	0x0375EE38 MOV X2, X31
	0x0375EE3C BL 0x3233D30
	0x0375EE40 LDR W8, [X20 + 0x10]
	0x0375EE44 ADD W22, W22, 0x1
	0x0375EE48 CMP W22, W8
	0x0375EE4C B.LT 0x375EDE8
	0x0375EE50 CBZ X21, 0x375EE88
	0x0375EE54 LDR X8, [X21]
	0x0375EE58 MOV X0, X21
	0x0375EE5C LDP X9, X1, [X8 + 0x168]
	0x0375EE60 BLR X9
	0x0375EE64 MOV X20, X0
	0x0375EE68 MOV X0, X20
	0x0375EE6C MOV X1, X19
	0x0375EE70 LDP X20, X19, [X31 + 0x30]
	0x0375EE74 LDP X22, X21, [X31 + 0x20]
	0x0375EE78 LDP X24, X23, [X31 + 0x10]
	0x0375EE7C MOV X2, X31
	0x0375EE80 LDR X30, [X31], #0x40
	0x0375EE84 B 0x321B938
	0x0375EE88 BL 0x1C16F20
	0x0375EE8C ADRP X0, 0x99A000
	0x0375EE90 LDR X0, [X0 + 0x528]
	0x0375EE94 BL 0x1C16D08
	0x0375EE98 BL 0x1C16F10
	0x0375EE9C MOV X19, X0
	0x0375EEA0 ADRP X0, 0x99D000
	0x0375EEA4 LDR X0, [X0 + 0x588]
	0x0375EEA8 BL 0x1C16D08
	0x0375EEAC MOV X1, X0
	0x0375EEB0 MOV X0, X19
	0x0375EEB4 MOV X2, X31
	0x0375EEB8 BL 0x330E100
	0x0375EEBC ADRP X0, 0x9E8000
	0x0375EEC0 LDR X0, [X0 + 0x258]
	0x0375EEC4 BL 0x1C16D08
	0x0375EEC8 MOV X1, X0
	0x0375EECC MOV X0, X19
	0x0375EED0 BL 0x1C16DEC
	0x0375EED4 SUB X31, X31, 0x30
	0x0375EED8 STP X30, X21, [X31 + 0x10]
	0x0375EEDC STP X20, X19, [X31 + 0x20]
	0x0375EEE0 ADRP X21, 0xC82000
	0x0375EEE4 LDRB W8, [X21 + 0xE42]
	0x0375EEE8 MOV X19, X1
	0x0375EEEC MOV X20, X0
	0x0375EEF0 TBNZ X8, 0x0, 0x375EF08
	0x0375EEF4 ADRP X0, 0x997000
	0x0375EEF8 LDR X0, [X0 + 0x170]
	0x0375EEFC BL 0x1C16CF4
	0x0375EF00 MOVZ W8, 0x1
	0x0375EF04 STRB W8, [X21 + 0xE42]
	0x0375EF08 MOV X0, X20
	0x0375EF0C MOV X1, X19
	0x0375EF10 BL 0x375EC90
	0x0375EF14 CBZ X0, 0x375EFD8
	0x0375EF18 ADRP X21, 0x997000
	0x0375EF1C LDR X21, [X21 + 0x170]
	0x0375EF20 MOV W1, W31
	0x0375EF24 MOV X2, X31
	0x0375EF28 MOV X19, X0
	0x0375EF2C BL 0x3222A1C
	0x0375EF30 LDR X8, [X21]
	0x0375EF34 MOV W20, W0
	0x0375EF38 LDR W9, [X8 + 0xE0]
	0x0375EF3C CBNZ W9, 0x375EF48
	0x0375EF40 MOV X0, X8
	0x0375EF44 BL 0x1C16DFC
	0x0375EF48 MOV W0, W20
	0x0375EF4C MOV X1, X31
	0x0375EF50 BL 0x331AA58
	0x0375EF54 TBZ X0, 0x0, 0x375EFC4
	0x0375EF58 MOV X0, X19
	0x0375EF5C MOV W1, W31
	0x0375EF60 MOV X2, X31
	0x0375EF64 BL 0x3222A1C
	0x0375EF68 LDR X8, [X21]
	0x0375EF6C MOV W20, W0
	0x0375EF70 LDR W9, [X8 + 0xE0]
	0x0375EF74 CBNZ W9, 0x375EF80
	0x0375EF78 MOV X0, X8
	0x0375EF7C BL 0x1C16DFC
	0x0375EF80 MOV W0, W20
	0x0375EF84 MOV X1, X31
	0x0375EF88 BL 0x331ACB8
	0x0375EF8C STRH W0, [X31 + 0xC]
	0x0375EF90 ADD X0, X31, 0xC
	0x0375EF94 MOV X1, X31
	0x0375EF98 BL 0x330A76C
	0x0375EF9C MOV X20, X0
	0x0375EFA0 MOVZ W1, 0x1
	0x0375EFA4 MOV X0, X19
	0x0375EFA8 MOV X2, X31
	0x0375EFAC BL 0x322B484
	0x0375EFB0 MOV X1, X0
	0x0375EFB4 MOV X0, X20
	0x0375EFB8 MOV X2, X31
	0x0375EFBC BL 0x321B938
	0x0375EFC0 MOV X19, X0
	0x0375EFC4 MOV X0, X19
	0x0375EFC8 LDP X20, X19, [X31 + 0x20]
	0x0375EFCC LDP X30, X21, [X31 + 0x10]
	0x0375EFD0 ADD X31, X31, 0x30
	0x0375EFD4 RET
	0x0375EFD8 BL 0x1C16F20
	0x0375EFDC SUB X31, X31, 0x70
	0x0375EFE0 STP X29, X30, [X31 + 0x10]
	0x0375EFE4 STP X28, X27, [X31 + 0x20]
	0x0375EFE8 STP X26, X25, [X31 + 0x30]
	0x0375EFEC STP X24, X23, [X31 + 0x40]
	0x0375EFF0 STP X22, X21, [X31 + 0x50]
	0x0375EFF4 STP X20, X19, [X31 + 0x60]
	0x0375EFF8 ADRP X22, 0xC82000
	0x0375EFFC ADRP X29, 0x9E8000
	0x0375F000 LDRB W8, [X22 + 0xE43]
	0x0375F004 B 0x3EB193C
	0x0375F008 MOV X20, X2
	0x0375F00C MOV X21, X1
	0x0375F010 MOV X19, X0
	0x0375F014 TBNZ X8, 0x0, 0x375F050
	0x0375F018 ADRP X0, 0x9E7000
	0x0375F01C LDR X0, [X0 + 0x268]
	0x0375F020 BL 0x1C16CF4
	0x0375F024 ADRP X0, 0x9E7000
	0x0375F028 LDR X0, [X0 + 0x270]
	0x0375F02C BL 0x1C16CF4
	0x0375F030 ADRP X0, 0x9E7000
	0x0375F034 LDR X0, [X0 + 0x278]
	0x0375F038 BL 0x1C16CF4
	0x0375F03C ADRP X0, 0x9E7000
	0x0375F040 LDR X0, [X0 + 0x260]
	0x0375F044 BL 0x1C16CF4
	0x0375F048 MOVZ W8, 0x1
	0x0375F04C STRB W8, [X22 + 0xE43]
	0x0375F050 LDR X1, [X29]
	0x0375F054 MOV X0, X19
	0x0375F058 BL 0x28F140C
	0x0375F05C CBZ W0, 0x375F238
	0x0375F060 ADRP X8, 0x9E7000
	0x0375F064 LDR X8, [X8 + 0x268]
	0x0375F068 MOV X0, X19
	0x0375F06C LDR X1, [X8]
	0x0375F070 BL 0x28F17BC
	0x0375F074 LDR X1, [X29]
	0x0375F078 MOV X0, X19
	0x0375F07C BL 0x28F140C
	0x0375F080 CMP W0, 0x1
	0x0375F084 B.LT 0x375F208
	0x0375F088 ADRP X28, 0x9E7000
	0x0375F08C ADRP X23, 0x994000
	0x0375F090 ADRP X24, 0x994000
	0x0375F094 ADRP X25, 0x9BC000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xC83000
	008 Move W8, [X20+3644]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x999000
	015 Move X0, [X0+2424]
	016 Call 0x1C17CF4
	017 Move X0, 0x9E8000
	018 Move X0, [X0]
	019 Call 0x1C17CF4
	020 Move X0, 0x996000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0x9E9000
	024 Move X0, [X0+504]
	025 Call 0x1C17CF4
	026 Move X0, 0x997000
	027 Move X0, [X0+3784]
	028 Call 0x1C17CF4
	029 Move X0, 0x99D000
	030 Move X0, [X0+3416]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3644], W8
	034 Move X8, [X19+8]
	035 Compare X8, 0
	036 JumpIfEqual {67}
	037 Move X0, X19
	038 Call ActionEventPtr.get_action, X0
	039 Compare X0, 0
	040 JumpIfEqual {208}
	041 Move X1, X31
	042 Call InputAction.get_actionMap, X0
	043 Move X20, X0
	044 Move X0, X19
	045 Call ActionEventPtr.get_action, X0
	046 Compare X0, 0
	047 JumpIfEqual {208}
	048 Compare X20, 0
	049 JumpIfEqual {70}
	050 Move X1, X31
	051 Call InputAction.get_actionMap, X0
	052 Compare X0, 0
	053 JumpIfEqual {208}
	054 Move X20, [X0+16]
	055 Move X0, X19
	056 Call ActionEventPtr.get_action, X0
	057 Compare X0, 0
	058 JumpIfEqual {208}
	059 Move X8, 0x997000
	060 Move X2, [X0+16]
	061 Move X8, [X8+3784]
	062 Move X0, X20
	063 Move X3, X31
	064 Move X1, [X8]
	065 Call String.Concat, X0, X1, X2
	066 Move X21, X0
	067 Move X8, 0x99D000
	068 Move X8, [X8+3416]
	069 Move X0, [X8]
	070 Move X21, [X0+16]
	071 Move X8, 0x996000
	072 Move X8, [X8+2512]
	073 Move W1, 7
	074 Move X0, [X8]
	075 Call 0x1C17D6C
	076 Compare X0, 0
	077 JumpIfEqual {208}
	078 Move X20, X0
	079 Compare X21, 0
	080 JumpIfEqual {87}
	081 Move X8, [X20]
	082 Move X0, X21
	083 Move X1, [X8+64]
	084 Call 0x1C17E00
	085 Compare X0, 0
	086 JumpIfEqual {209}
	087 Move W8, [X20+24]
	088 Compare W8, 0
	089 JumpIfEqual {207}
	090 Move [X20+32], X21
	091 Move X9, 0x9E8000
	092 Move X8, [X19+8]
	093 Move X9, [X9]
	094 Add X1, X31, 28
	095 Move W8, [X8+27]
	096 Move X0, [X9]
	097 Move [X31+28], W8
	098 Call 0x1C17E04
	099 Move X21, X0
	100 Compare X0, 0
	101 JumpIfEqual {108}
	102 Move X8, [X20]
	103 Move X0, X21
	104 Move X1, [X8+64]
	105 Call 0x1C17E00
	106 Compare X0, 0
	107 JumpIfEqual {209}
	108 Move W8, [X20+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move [X20+40], X21
	111 Move X0, [X19+8]
	112 Compare X0, 0
	113 JumpIfEqual {208}
	114 Move X22, 0x999000
	115 Move X22, [X22+2424]
	116 Move X1, X31
	117 Call InputEvent.get_time, X0
	118 Move X0, [X22]
	119 Add X1, X31, 8
	120 Move [X31+8], D0
	121 Call 0x1C17E04
	122 Move X21, X0
	123 Compare X0, 0
	124 JumpIfEqual {131}
	125 Move X8, [X20]
	126 Move X0, X21
	127 Move X1, [X8+64]
	128 Call 0x1C17E00
	129 Compare X0, 0
	130 JumpIfEqual {209}
	131 Move W8, [X20+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X0, X19
	134 Move [X20+48], X21
	135 Call ActionEventPtr.get_control, X0
	136 Move X21, X0
	137 Compare X0, 0
	138 JumpIfEqual {145}
	139 Move X8, [X20]
	140 Move X0, X21
	141 Move X1, [X8+64]
	142 Call 0x1C17E00
	143 Compare X0, 0
	144 JumpIfEqual {209}
	145 Move W8, [X20+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X0, X19
	148 Move [X20+56], X21
	149 Call ActionEventPtr.ReadValueAsObject, X0
	150 Move X21, X0
	151 Compare X0, 0
	152 JumpIfEqual {159}
	153 Move X8, [X20]
	154 Move X0, X21
	155 Move X1, [X8+64]
	156 Call 0x1C17E00
	157 Compare X0, 0
	158 JumpIfEqual {209}
	159 Move W8, [X20+24]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X0, X19
	162 Move [X20+64], X21
	163 Call ActionEventPtr.get_interaction, X0
	164 Move X21, X0
	165 Compare X0, 0
	166 JumpIfEqual {173}
	167 Move X8, [X20]
	168 Move X0, X21
	169 Move X1, [X8+64]
	170 Call 0x1C17E00
	171 Compare X0, 0
	172 JumpIfEqual {209}
	173 Move W8, [X20+24]
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move X0, X19
	176 Move [X20+72], X21
	177 Call ActionEventPtr.get_duration, X0
	178 Move X0, [X22]
	179 Add X1, X31, 0
	180 Move [X31], D0
	181 Call 0x1C17E04
	182 Move X19, X0
	183 Compare X0, 0
	184 JumpIfEqual {191}
	185 Move X8, [X20]
	186 Move X0, X19
	187 Move X1, [X8+64]
	188 Call 0x1C17E00
	189 Compare X0, 0
	190 JumpIfEqual {209}
	191 Move W8, [X20+24]
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move X8, 0x9E8000
	194 Move X8, [X8+504]
	195 Move [X20+80], X19
	196 Move X1, X20
	197 Move X2, X31
	198 Move X0, [X8]
	199 Call String.Format, X0, X1
	200 Move X20, [X31+48]
	201 Move X19, [X31+56]
	202 Move X22, [X31+32]
	203 Move X21, [X31+40]
	204 Move X30, [X31+16]
	205 Add X31, X31, 64
	206 Return X0
	207 Call 0x1C17F28
	208 Call 0x1C17F20
	209 Call 0x1C17F44
	210 Move X1, X31
	211 Call 0x1C17DEC

