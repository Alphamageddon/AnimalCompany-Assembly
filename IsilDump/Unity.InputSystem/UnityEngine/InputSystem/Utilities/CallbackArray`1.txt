Type: UnityEngine.InputSystem.Utilities.CallbackArray`1

Method: System.Int32 get_length()

Disassembly:
	0x028F240C BL 0x1C17728
	0x028F2410 LDR X8, [X24]

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: TDelegate get_Item(System.Int32 index)

Disassembly:
	0x028F2414 LDUR X26, [X29 - 0xC8]
	0x028F2418 LDR X8, [X8 + 0xC0]
	0x028F241C LDR X0, [X8 + 0x8]
	0x028F2420 LDRB W9, [X0 + 0x135]
	0x028F2424 TBNZ X9, 0x0, 0x28F2434
	0x028F2428 BL 0x1C5C684
	0x028F242C LDR X8, [X24]
	0x028F2430 LDR X8, [X8 + 0xC0]
	0x028F2434 LDR X1, [X8 + 0x18]
	0x028F2438 SUB X5, X29, 0xC8
	0x028F243C MOV X2, X22
	0x028F2440 MOV X3, X23
	0x028F2444 MOV X4, X31
	0x028F2448 BL 0x1C17728
	0x028F244C LDUR X1, [X29 - 0xC8]
	0x028F2450 MOV X0, X26
	0x028F2454 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move W19, W1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Add X0, X20, 8
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X2, [X8+16]
	021 Move X30, [X31+32]
	022 Call InlinedArray`1<Object>.get_Item, X0, X1
	023 Return X0

Method: System.Void Clear()

Disassembly:
	0x028F2458 BL 0x36F9984
	0x028F245C STP X31, X31, [X29 - 0x88]
	0x028F2460 STUR X31, [X29 - 0x90]
	0x028F2464 STP X31, X31, [X29 - 0x78]
	0x028F2468 STUR W31, [X29 - 0x68]
	0x028F246C CBZ X0, 0x28F2BCC
	0x028F2470 SUB X8, X29, 0x18
	0x028F2474 STUR X27, [X8 - 0x100]
	0x028F2478 SUB X8, X29, 0x28
	0x028F247C STUR X20, [X8 - 0x100]
	0x028F2480 SUB X8, X29, 0x20
	0x028F2484 STUR X25, [X29 - 0xF8]
	0x028F2488 STUR X24, [X29 - 0xE0]
	0x028F248C STUR X21, [X8 - 0x100]
	0x028F2490 ADRP X8, 0x182B000
	0x028F2494 LDR X8, [X8 + 0x948]
	0x028F2498 STP X31, X31, [X29 - 0xC8]
	0x028F249C LDR W1, [X0 + 0x18]
	0x028F24A0 ADRP X20, 0x182B000
	0x028F24A4 LDR X4, [X8]
	0x028F24A8 ADRP X21, 0x182C000
	0x028F24AC LDR X20, [X20 + 0x128]
	0x028F24B0 LDR X21, [X21 + 0x1F0]
	0x028F24B4 MOV X22, X0
	0x028F24B8 SUB X0, X29, 0xC8
	0x028F24BC MOVZ W2, 0x4
	0x028F24C0 MOV W3, W31
	0x028F24C4 BL 0x23E17A0
	0x028F24C8 STP X31, X31, [X29 - 0xA0]
	0x028F24CC LDP X24, X8, [X29 - 0xC8]
	0x028F24D0 LDR W1, [X22 + 0x18]
	0x028F24D4 LDR X4, [X20]
	0x028F24D8 SUB X9, X29, 0x30
	0x028F24DC SUB X0, X29, 0xA0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move X19, X0
	008 Add X21, X0, 8
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, X21
	019 Move X1, [X8+40]
	020 Call InlinedArray`1<Object>.Clear, X0
	021 Move X0, [X20+32]
	022 Add X21, X19, 32
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+192]
	030 Move X0, X21
	031 Move X1, [X8+40]
	032 Call InlinedArray`1<Object>.Clear, X0
	033 Move X0, [X20+32]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X0+192]
	041 Add X0, X19, 56
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X1, [X8+40]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call InlinedArray`1<Object>.Clear, X0
	048 Return 

Method: System.Void AddCallback(TDelegate dlg)

Disassembly:
	0x028F24E0 MOVZ W2, 0x4
	0x028F24E4 MOV W3, W31
	0x028F24E8 STUR X8, [X9 - 0x100]
	0x028F24EC BL 0x23E51BC
	0x028F24F0 STP X31, X31, [X29 - 0xB0]
	0x028F24F4 LDP X28, X8, [X29 - 0xA0]
	0x028F24F8 LDR W1, [X22 + 0x18]
	0x028F24FC LDR X4, [X21]
	0x028F2500 SUB X9, X29, 0x38
	0x028F2504 SUB X0, X29, 0xB0
	0x028F2508 MOVZ W2, 0x4
	0x028F250C MOV W3, W31
	0x028F2510 STUR X8, [X9 - 0x100]
	0x028F2514 BL 0x23F0FB0
	0x028F2518 LDUR V0, [X29 - 0xB0]
	0x028F251C STUR X23, [X29 - 0xD8]
	0x028F2520 STUR V0, [X29 - 0x60]
	0x028F2524 LDR X8, [X22 + 0x18]
	0x028F2528 CMP W8, 0x1
	0x028F252C B.LT 0x28F2648
	0x028F2530 ADRP X26, 0x1801000
	0x028F2534 LDR X26, [X26 + 0x5A8]
	0x028F2538 MOV X27, X31
	0x028F253C SUB W25, W8, 0x1
	0x028F2540 FMOV S14, W31
	0x028F2544 MOVZ W20, 0xC
	0x028F2548 ADRP X23, 0x1AE6000
	0x028F254C CMP X27, W8, UXTW
	0x028F2550 B.CS 0x28F2BC8
	0x028F2554 ADD X21, X22, X27, 0x3, LSL
	0x028F2558 LDR X1, [X21 + 0x20]!
	0x028F255C LDUR X0, [X29 - 0xD0]
	0x028F2560 MOV X2, X31
	0x028F2564 BL 0x36EADF0
	0x028F2568 MADD X8, X27, X20, X24
	0x028F256C CMP X27, X25
	0x028F2570 STR X0, [X8]
	0x028F2574 STR W1, [X8 + 0x8]
	0x028F2578 B.NE 0x28F2588
	0x028F257C ADD X21, X27, 0x1
	0x028F2580 FMOV S0, W31
	0x028F2584 B 0x28F262C
	0x028F2588 LDR W8, [X22 + 0x18]
	0x028F258C CMP X27, X8
	0x028F2590 B.CS 0x28F2BC8
	0x028F2594 LDR X0, [X21]
	0x028F2598 CBZ X0, 0x28F2BCC
	0x028F259C MOV X1, X31
	0x028F25A0 BL 0x3C3F58C
	0x028F25A4 LDR W8, [X22 + 0x18]
	0x028F25A8 ADD X21, X27, 0x1
	0x028F25AC CMP X21, X8
	0x028F25B0 B.CS 0x28F2BC8
	0x028F25B4 ADD X8, X22, X21, 0x3, LSL
	0x028F25B8 LDR X0, [X8 + 0x20]
	0x028F25BC CBZ X0, 0x28F2BCC
	0x028F25C0 MOV X1, X31
	0x028F25C4 MOV V8.16B, V0.16B
	0x028F25C8 MOV V9.16B, V1.16B
	0x028F25CC MOV V10.16B, V2.16B
	0x028F25D0 BL 0x3C3F58C
	0x028F25D4 LDRB W8, [X23 + 0x85C]
	0x028F25D8 MOV V11.16B, V0.16B
	0x028F25DC MOV V12.16B, V1.16B
	0x028F25E0 MOV V13.16B, V2.16B
	0x028F25E4 CBNZ W8, 0x28F25F8
	0x028F25E8 MOV X0, X26
	0x028F25EC BL 0x1C16CF4
	0x028F25F0 MOVZ W8, 0x1
	0x028F25F4 STRB W8, [X23 + 0x85C]
	0x028F25F8 LDR X0, [X26]
	0x028F25FC LDR W8, [X0 + 0xE0]
	0x028F2600 CBNZ W8, 0x28F2608
	0x028F2604 BL 0x1C16DFC
	0x028F2608 FSUB S0, S8, S11
	0x028F260C FSUB S1, S9, S12
	0x028F2610 FSUB S2, S10, S13
	0x028F2614 FMUL S0, S0, S0
	0x028F2618 FMUL S1, S1, S1
	0x028F261C FADD S0, S0, S1
	0x028F2620 FMUL S1, S2, S2
	0x028F2624 FADD S0, S1, S0
	0x028F2628 FSQRT S0, S0
	0x028F262C STR S0, [X28, X27, LSL #2]
	0x028F2630 LDR W8, [X22 + 0x18]
	0x028F2634 FADD S14, S14, S0
	0x028F2638 MOV X27, X21
	0x028F263C CMP X21, W8, SXTW
	0x028F2640 B.LT 0x28F254C
	0x028F2644 B 0x28F264C
	0x028F2648 FMOV S14, W31
	0x028F264C LDP X23, X27, [X29 - 0xE0]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move W8, [X0]
	009 Move X20, X2
	010 Move X21, X0
	011 Move X19, X1
	012 Compare W8, 0
	013 JumpIfEqual {76}
	014 Move X8, [X21+48]
	015 Move V0, [X21+2]
	016 Move [X31+48], X8
	017 Move [X31+2], V0
	018 Move X0, [X20+32]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move X8, [X0+192]
	026 Move V0, [X31+2]
	027 Move X9, [X31+48]
	028 Add X0, X31, 64
	029 Move X2, [X8+48]
	030 Move X1, X19
	031 Move [X31+4], V0
	032 Move [X31+80], X9
	033 Call 0x21FBCBC, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {114}
	038 Move X0, [X20+32]
	039 Add X22, X21, 56
	040 Move W8, [X0+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {46}
	045 Call 0x1C5D684
	046 Move X8, [X0+192]
	047 Move X0, X22
	048 Move X1, X19
	049 Add X21, X21, 32
	050 Move X2, [X8+56]
	051 Call InlinedArray`1<Object>.IndexOf, X0, X1
	052 Add W31, W0, 1
	053 Move W23, W0
	054 Move X0, [X20+32]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move X8, [X0+192]
	062 Move X0, X22
	063 Move W1, W23
	064 Move X2, [X8+64]
	065 Call InlinedArray`1<Object>.RemoveAtByMovingTailWithCapacity, X0, X1
	066 Move X0, [X20+32]
	067 Move W8, [X0+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {73}
	072 Call 0x1C5D684
	073 Move X8, [X0+192]
	074 Move W2, 10
	075 Move X0, X21
	076 Move X8, [X21+24]
	077 NotImplemented "Instruction LDUR not yet implemented."
	078 Move [X31+16], X8
	079 Move [X31], V0
	080 Move X0, [X20+32]
	081 Move W8, [X0+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {87}
	086 Call 0x1C5D684
	087 Move X8, [X0+192]
	088 Move V0, [X31]
	089 Move X9, [X31+16]
	090 Add X0, X31, 64
	091 Move X2, [X8+48]
	092 Move X1, X19
	093 Move [X31+4], V0
	094 Move [X31+80], X9
	095 Call 0x21FBCBC, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {114}
	100 Move X0, [X20+32]
	101 Add X20, X21, 8
	102 Move W8, [X0+309]
	103 Move TEMP, X8
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfEqual {108}
	107 Call 0x1C5D684
	108 Move X8, [X0+192]
	109 Move W2, 4
	110 Move X0, X20
	111 Move X3, [X8+72]
	112 Move X1, X19
	113 Call InlinedArray`1<Object>.AppendWithCapacity, X0, X1, X2
	114 Move X20, [X31+128]
	115 Move X19, [X31+136]
	116 Move X22, [X31+112]
	117 Move X21, [X31+120]
	118 Move X30, [X31+96]
	119 Move X23, [X31+104]
	120 Add X31, X31, 144
	121 Return 

Method: System.Void RemoveCallback(TDelegate dlg)

Disassembly:
	0x028F2650 ADRP X20, 0x182A000
	0x028F2654 LDR X8, [X23]
	0x028F2658 LDR X8, [X8 + 0xC0]
	0x028F265C LDR X0, [X8 + 0x8]
	0x028F2660 LDRB W9, [X0 + 0x135]
	0x028F2664 LDR X20, [X20 + 0xE40]
	0x028F2668 TBNZ X9, 0x0, 0x28F2678
	0x028F266C BL 0x1C5C684
	0x028F2670 LDR X8, [X23]
	0x028F2674 LDR X8, [X8 + 0xC0]
	0x028F2678 LDP X25, X2, [X29 - 0xF8]
	0x028F267C LDR X1, [X8 + 0x20]
	0x028F2680 SUB X5, X29, 0xC8
	0x028F2684 MOV X3, X27
	0x028F2688 MOV X4, X31
	0x028F268C BL 0x1C17728
	0x028F2690 LDP X0, X1, [X29 - 0xD0]
	0x028F2694 SUB X8, X29, 0xC8
	0x028F2698 MOV X2, X31
	0x028F269C BL 0x36EB150
	0x028F26A0 LDUR V0, [X29 - 0xC8]
	0x028F26A4 LDUR X8, [X29 - 0xB8]
	0x028F26A8 LDR X0, [X20]
	0x028F26AC STUR V0, [X29 - 0x90]
	0x028F26B0 STUR X8, [X29 - 0x80]
	0x028F26B4 LDR W8, [X0 + 0xE0]
	0x028F26B8 CBNZ W8, 0x28F26C0
	0x028F26BC BL 0x1C16DFC
	0x028F26C0 ADRP X21, 0x1AE8000
	0x028F26C4 LDRB W8, [X21 + 0x628]
	0x028F26C8 CBNZ W8, 0x28F26E0
	0x028F26CC ADRP X0, 0x182A000
	0x028F26D0 LDR X0, [X0 + 0xE40]
	0x028F26D4 BL 0x1C16CF4
	0x028F26D8 MOVZ W8, 0x1
	0x028F26DC STRB W8, [X21 + 0x628]
	0x028F26E0 LDR X0, [X20]
	0x028F26E4 LDR W8, [X0 + 0xE0]
	0x028F26E8 CBNZ W8, 0x28F26F4
	0x028F26EC BL 0x1C16DFC
	0x028F26F0 LDR X0, [X20]
	0x028F26F4 LDR X8, [X23]
	0x028F26F8 LDR X9, [X0 + 0xB8]
	0x028F26FC LDR X8, [X8 + 0xC0]
	0x028F2700 LDP S8, S9, [X9]
	0x028F2704 LDP S10, S12, [X9 + 0x8]
	0x028F2708 LDP S13, S15, [X9 + 0x10]
	0x028F270C LDR X0, [X8 + 0x8]
	0x028F2710 LDR V11, [X9 + 0x18]
	0x028F2714 LDRB W10, [X0 + 0x135]
	0x028F2718 TBNZ X10, 0x0, 0x28F2728
	0x028F271C BL 0x1C5C684
	0x028F2720 LDR X8, [X23]
	0x028F2724 LDR X8, [X8 + 0xC0]
	0x028F2728 LDUR X2, [X29 - 0xE8]
	0x028F272C LDR X1, [X8 + 0x28]
	0x028F2730 SUB X5, X29, 0xC8
	0x028F2734 MOV X3, X27
	0x028F2738 MOV X4, X31
	0x028F273C BL 0x1C17728
	0x028F2740 LDURB W8, [X29 - 0xC8]
	0x028F2744 CBZ W8, 0x28F27F8
	0x028F2748 LDR X8, [X23]
	0x028F274C LDR X8, [X8 + 0xC0]
	0x028F2750 LDR X0, [X8 + 0x8]
	0x028F2754 LDRB W9, [X0 + 0x135]
	0x028F2758 TBNZ X9, 0x0, 0x28F2768
	0x028F275C BL 0x1C5C684
	0x028F2760 LDR X8, [X23]
	0x028F2764 LDR X8, [X8 + 0xC0]
	0x028F2768 SUB X9, X29, 0x40
	0x028F276C LDUR X2, [X9 - 0x100]
	0x028F2770 LDR X1, [X8 + 0x18]
	0x028F2774 SUB X5, X29, 0xC8
	0x028F2778 MOV X3, X27
	0x028F277C MOV X4, X31
	0x028F2780 BL 0x1C17728
	0x028F2784 LDUR X0, [X29 - 0xC8]
	0x028F2788 CBZ X0, 0x28F2BCC
	0x028F278C MOV X1, X31
	0x028F2790 BL 0x3C3F58C
	0x028F2794 LDR X8, [X23]
	0x028F2798 MOV V8.16B, V0.16B
	0x028F279C MOV V9.16B, V1.16B
	0x028F27A0 MOV V10.16B, V2.16B
	0x028F27A4 LDR X8, [X8 + 0xC0]
	0x028F27A8 LDR X0, [X8 + 0x8]
	0x028F27AC LDRB W9, [X0 + 0x135]
	0x028F27B0 TBNZ X9, 0x0, 0x28F27C0
	0x028F27B4 BL 0x1C5C684
	0x028F27B8 LDR X8, [X23]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move W8, [X0]
	009 Move X20, X2
	010 Move X21, X0
	011 Move X19, X1
	012 Compare W8, 0
	013 JumpIfEqual {79}
	014 Move X8, [X21+72]
	015 NotImplemented "Instruction LDUR not yet implemented."
	016 Move [X31+16], X8
	017 Move [X31], V0
	018 Move X0, [X20+32]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move X8, [X0+192]
	026 Move V0, [X31]
	027 Move X9, [X31+16]
	028 Add X0, X31, 32
	029 Move X2, [X8+48]
	030 Move X1, X19
	031 Move [X31+2], V0
	032 Move [X31+48], X9
	033 Call 0x21FBCBC, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {117}
	038 Move X0, [X20+32]
	039 Add X22, X21, 32
	040 Move W8, [X0+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {46}
	045 Call 0x1C5D684
	046 Move X8, [X0+192]
	047 Move X0, X22
	048 Move X1, X19
	049 Add X21, X21, 56
	050 Move X2, [X8+56]
	051 Call InlinedArray`1<Object>.IndexOf, X0, X1
	052 Add W31, W0, 1
	053 Move W23, W0
	054 Move X0, [X20+32]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move X8, [X0+192]
	062 Move X0, X22
	063 Move W1, W23
	064 Move X2, [X8+64]
	065 Call InlinedArray`1<Object>.RemoveAtByMovingTailWithCapacity, X0, X1
	066 Move X0, [X20+32]
	067 Move W8, [X0+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {73}
	072 Call 0x1C5D684
	073 Move X8, [X0+192]
	074 Move W2, 10
	075 Move X0, X21
	076 Move X1, X19
	077 Move X3, [X8+72]
	078 Call InlinedArray`1<Object>.AppendWithCapacity, X0, X1, X2
	079 Move X0, [X20+32]
	080 Add X21, X21, 8
	081 Move W8, [X0+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {87}
	086 Call 0x1C5D684
	087 Move X8, [X0+192]
	088 Move X0, X21
	089 Move X1, X19
	090 Move X2, [X8+56]
	091 Call InlinedArray`1<Object>.IndexOf, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, -2147483648
	094 Compare TEMP, -2147483648
	095 JumpIfEqual {117}
	096 Move W19, W0
	097 Move X0, [X20+32]
	098 Move W8, [X0+309]
	099 Move TEMP, X8
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {104}
	103 Call 0x1C5D684
	104 Move X8, [X0+192]
	105 Move X0, X21
	106 Move W1, W19
	107 Move X20, [X31+96]
	108 Move X19, [X31+104]
	109 Move X2, [X8+80]
	110 Move X22, [X31+80]
	111 Move X21, [X31+88]
	112 Move X30, [X31+64]
	113 Move X23, [X31+72]
	114 Add X31, X31, 112
	115 Call InlinedArray`1<Object>.RemoveAtWithCapacity, X0, X1
	116 Return 
	117 Move X20, [X31+96]
	118 Move X19, [X31+104]
	119 Move X22, [X31+80]
	120 Move X21, [X31+88]
	121 Move X30, [X31+64]
	122 Move X23, [X31+72]
	123 Add X31, X31, 112
	124 Return 

Method: System.Void LockForChanges()

Disassembly:
	0x028F27BC LDR X8, [X8 + 0xC0]
	0x028F27C0 SUB X9, X29, 0x48
	0x028F27C4 LDUR X2, [X9 - 0x100]

ISIL:
	001 Move W8, 1
	002 Move [X0], W8
	003 Return 

Method: System.Void UnlockForChanges()

Disassembly:
	0x028F27C8 LDR X1, [X8 + 0x20]
	0x028F27CC SUB X5, X29, 0xC8
	0x028F27D0 MOV X3, X27
	0x028F27D4 MOV X4, X31
	0x028F27D8 BL 0x1C17728
	0x028F27DC LDUR X0, [X29 - 0xC8]
	0x028F27E0 CBZ X0, 0x28F2BCC
	0x028F27E4 MOV X1, X31
	0x028F27E8 BL 0x3C3F58C
	0x028F27EC FSUB S8, S8, S0
	0x028F27F0 FSUB S9, S9, S1
	0x028F27F4 FSUB S10, S10, S2
	0x028F27F8 LDR X8, [X23]
	0x028F27FC LDR X8, [X8 + 0xC0]
	0x028F2800 LDR X0, [X8 + 0x8]
	0x028F2804 LDRB W9, [X0 + 0x135]
	0x028F2808 TBNZ X9, 0x0, 0x28F2818
	0x028F280C BL 0x1C5C684
	0x028F2810 LDR X8, [X23]
	0x028F2814 LDR X8, [X8 + 0xC0]
	0x028F2818 LDUR X2, [X29 - 0x100]
	0x028F281C LDR X1, [X8 + 0x30]
	0x028F2820 SUB X5, X29, 0xC8
	0x028F2824 MOV X3, X27
	0x028F2828 MOV X4, X31
	0x028F282C BL 0x1C17728
	0x028F2830 LDURB W8, [X29 - 0xC8]
	0x028F2834 CBZ W8, 0x28F2988
	0x028F2838 LDR X8, [X23]
	0x028F283C LDR X8, [X8 + 0xC0]
	0x028F2840 LDR X0, [X8 + 0x8]
	0x028F2844 LDRB W9, [X0 + 0x135]
	0x028F2848 TBNZ X9, 0x0, 0x28F2864
	0x028F284C MOV V15.16B, V10.16B
	0x028F2850 MOV V13.16B, V9.16B
	0x028F2854 BL 0x1C5C684
	0x028F2858 LDR X8, [X23]
	0x028F285C LDR X8, [X8 + 0xC0]
	0x028F2860 B 0x28F286C
	0x028F2864 MOV V15.16B, V10.16B
	0x028F2868 MOV V13.16B, V9.16B
	0x028F286C SUB X9, X29, 0x50
	0x028F2870 LDUR X2, [X9 - 0x100]
	0x028F2874 LDR X1, [X8 + 0x20]
	0x028F2878 SUB X5, X29, 0xC8
	0x028F287C MOV X3, X27
	0x028F2880 MOV X4, X31
	0x028F2884 MOV V12.16B, V8.16B
	0x028F2888 BL 0x1C17728
	0x028F288C LDUR X0, [X29 - 0xC8]
	0x028F2890 CBZ X0, 0x28F2BCC
	0x028F2894 MOV X1, X31
	0x028F2898 BL 0x3C3DEB4
	0x028F289C MOV X0, X31
	0x028F28A0 BL 0x3C2A260
	0x028F28A4 LDR X8, [X23]
	0x028F28A8 MOV V10.16B, V0.16B
	0x028F28AC MOV V9.16B, V1.16B
	0x028F28B0 MOV V8.16B, V2.16B
	0x028F28B4 LDR X8, [X8 + 0xC0]
	0x028F28B8 MOV V11.16B, V3.16B
	0x028F28BC LDR X0, [X8 + 0x8]
	0x028F28C0 LDRB W9, [X0 + 0x135]
	0x028F28C4 TBNZ X9, 0x0, 0x28F28D4
	0x028F28C8 BL 0x1C5C684
	0x028F28CC LDR X8, [X23]
	0x028F28D0 LDR X8, [X8 + 0xC0]
	0x028F28D4 SUB X9, X29, 0x58
	0x028F28D8 LDUR X2, [X9 - 0x100]
	0x028F28DC LDR X1, [X8 + 0x18]
	0x028F28E0 SUB X5, X29, 0xC8
	0x028F28E4 MOV X3, X27
	0x028F28E8 MOV X4, X31
	0x028F28EC BL 0x1C17728
	0x028F28F0 LDUR X0, [X29 - 0xC8]
	0x028F28F4 CBZ X0, 0x28F2BCC
	0x028F28F8 MOV X1, X31
	0x028F28FC BL 0x3C3DEB4
	0x028F2900 FMUL S4, S11, S0
	0x028F2904 FMUL S5, S10, S3

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X0], W31
	009 Move X19, X0
	010 Add X19, X19, 56
	011 Move W8, [X19]
	012 Move X21, X0
	013 Move X20, X1
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W22, W31
	016 Move X0, [X20+32]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move X8, [X0+192]
	024 Move X0, X19
	025 Move W1, W22
	026 Move X2, [X8+16]
	027 Call InlinedArray`1<Object>.get_Item, X0, X1
	028 Move X8, [X20+32]
	029 Move X23, X0
	030 Move W9, [X8+309]
	031 Move TEMP, X9
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {38}
	035 Move X0, X8
	036 Call 0x1C5D684
	037 Move X8, X0
	038 Move X8, [X8+192]
	039 Move X0, X21
	040 Move X1, X23
	041 Move X2, [X8+88]
	042 Call 0x28F2650, X0, X1
	043 Move W8, [X21+56]
	044 Add W22, W22, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W23, W31
	047 Add X22, X21, 32
	048 Move X0, [X20+32]
	049 Move W24, [X22]
	050 Move W8, [X0+309]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {56}
	055 Call 0x1C5D684
	056 Move X8, [X0+192]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X2, [X8+16]
	059 Move X0, X22
	060 Move W1, W23
	061 Call InlinedArray`1<Object>.get_Item, X0, X1
	062 Move X8, [X20+32]
	063 Move X24, X0
	064 Move W9, [X8+309]
	065 Move TEMP, X9
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {72}
	069 Move X0, X8
	070 Call 0x1C5D684
	071 Move X8, X0
	072 Move X8, [X8+192]
	073 Move X0, X21
	074 Move X1, X24
	075 Move X2, [X8+104]
	076 Call 0x28F24E0, X0, X1
	077 Add W23, W23, 1
	078 Move X1, [X8+40]
	079 Move X0, X22
	080 Call InlinedArray`1<Object>.Clear, X0
	081 Move X0, [X20+32]
	082 Move W8, [X0+309]
	083 Move TEMP, X8
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {88}
	087 Call 0x1C5D684
	088 Move X8, [X0+192]
	089 Move X0, X19
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X22, [X31+32]
	093 Move X21, [X31+40]
	094 Move X1, [X8+40]
	095 Move X24, [X31+16]
	096 Move X23, [X31+24]
	097 Move X30, [X31+64]
	098 Call InlinedArray`1<Object>.Clear, X0
	099 Return 

