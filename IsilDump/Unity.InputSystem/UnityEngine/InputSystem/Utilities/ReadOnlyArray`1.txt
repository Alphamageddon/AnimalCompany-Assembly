Type: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1

Method: System.Void .ctor(TValue[] array)

Disassembly:
	0x024FCFD0 MOV X1, X19
	0x024FCFD4 BL 0x1C16DEC
	0x024FCFD8 BL 0x1C16F28
	0x024FCFDC STR X1, [X0]
	0x024FCFE0 STR W31, [X0 + 0x8]
	0x024FCFE4 CBZ X1, 0x24FCFF0
	0x024FCFE8 LDR W8, [X1 + 0x18]
	0x024FCFEC B 0x24FCFF4

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], W31
	003 Compare X1, 0
	004 JumpIfEqual {6}
	005 Move W8, [X1+24]
	006 Move W8, W31
	007 Move [X0+12], W8
	008 Return 

Method: System.Void .ctor(TValue[] array, System.Int32 index, System.Int32 length)

Disassembly:
	0x024FCFF0 MOV W8, W31
	0x024FCFF4 STR W8, [X0 + 0xC]
	0x024FCFF8 RET

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], W2
	003 Move [X0+12], W3
	004 Return 

Method: TValue[] ToArray()

Disassembly:
	0x024FCFFC STR X1, [X0]
	0x024FD000 STP W2, W3, [X0 + 0x8]
	0x024FD004 RET
	0x024FD008 STR X30, [X31 - 0x20]!
	0x024FD00C STP X20, X19, [X31 + 0x10]
	0x024FD010 MOV X19, X0
	0x024FD014 LDR X0, [X1 + 0x20]
	0x024FD018 LDR W20, [X19 + 0xC]
	0x024FD01C LDRB W8, [X0 + 0x135]
	0x024FD020 TBNZ X8, 0x0, 0x24FD028
	0x024FD024 BL 0x1C5C684
	0x024FD028 LDR X8, [X0 + 0xC0]
	0x024FD02C LDR X0, [X8 + 0x10]
	0x024FD030 LDRB W8, [X0 + 0x135]
	0x024FD034 TBNZ X8, 0x0, 0x24FD03C
	0x024FD038 BL 0x1C5C684
	0x024FD03C MOV W1, W20
	0x024FD040 BL 0x1C16D6C
	0x024FD044 LDR W4, [X19 + 0xC]
	0x024FD048 MOV X20, X0
	0x024FD04C CMP W4, 0x1
	0x024FD050 B.LT 0x24FD06C
	0x024FD054 LDR X0, [X19]
	0x024FD058 LDR W1, [X19 + 0x8]
	0x024FD05C MOV X2, X20
	0x024FD060 MOV W3, W31
	0x024FD064 MOV X5, X31
	0x024FD068 BL 0x339FCE8
	0x024FD06C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X1+32]
	006 Move W20, [X19+12]
	007 Move W8, [X0+309]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {13}
	012 Call 0x1C5D684
	013 Move X8, [X0+192]
	014 Move X0, [X8+16]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move W1, W20
	022 Call 0x1C17D6C
	023 Move W4, [X19+12]
	024 Move X20, X0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, [X19]
	027 Move W1, [X19+8]
	028 Move X2, X20
	029 Move W3, W31
	030 Move X5, X31
	031 Call Array.Copy, X0, X1, X2, X3, X4
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Int32 IndexOf(System.Predicate`1<TValue> predicate)

Disassembly:
	0x024FD070 LDP X20, X19, [X31 + 0x10]
	0x024FD074 LDR X30, [X31], #0x20
	0x024FD078 RET
	0x024FD07C SUB X31, X31, 0x70
	0x024FD080 STP X30, X23, [X31 + 0x40]
	0x024FD084 STP X22, X21, [X31 + 0x50]
	0x024FD088 STP X20, X19, [X31 + 0x60]
	0x024FD08C MOV X19, X2
	0x024FD090 CBZ X1, 0x24FD14C
	0x024FD094 LDR W8, [X0 + 0xC]
	0x024FD098 MOV X22, X0
	0x024FD09C CMP W8, 0x1
	0x024FD0A0 B.LT 0x24FD128
	0x024FD0A4 MOV X21, X1
	0x024FD0A8 MOV W20, W31
	0x024FD0AC MOVZ W23, 0x18
	0x024FD0B0 LDR X8, [X22]
	0x024FD0B4 CBZ X8, 0x24FD144
	0x024FD0B8 LDR W9, [X22 + 0x8]
	0x024FD0BC LDR W10, [X8 + 0x18]
	0x024FD0C0 ADD W9, W20, W9
	0x024FD0C4 CMP W9, W10
	0x024FD0C8 B.CS 0x24FD148
	0x024FD0CC SMADDL X8, X9, X23, X8
	0x024FD0D0 LDR X9, [X8 + 0x30]
	0x024FD0D4 LDR V0, [X8 + 0x2]
	0x024FD0D8 STR X9, [X31 + 0x10]
	0x024FD0DC STR V0, [X31]
	0x024FD0E0 LDR X0, [X19 + 0x20]
	0x024FD0E4 LDRB W8, [X0 + 0x135]
	0x024FD0E8 TBNZ X8, 0x0, 0x24FD0F0
	0x024FD0EC BL 0x1C5C684
	0x024FD0F0 LDR V0, [X31]
	0x024FD0F4 LDR X8, [X31 + 0x10]
	0x024FD0F8 LDR X9, [X21 + 0x18]
	0x024FD0FC LDR X0, [X21 + 0x40]
	0x024FD100 STR V0, [X31 + 0x2]
	0x024FD104 STR X8, [X31 + 0x30]
	0x024FD108 LDR X2, [X21 + 0x28]
	0x024FD10C ADD X1, X31, 0x20
	0x024FD110 BLR X9
	0x024FD114 TBNZ X0, 0x0, 0x24FD12C
	0x024FD118 LDR W8, [X22 + 0xC]
	0x024FD11C ADD W20, W20, 0x1
	0x024FD120 CMP W20, W8
	0x024FD124 B.LT 0x24FD0B0
	0x024FD128 MOVN W20, 0x0
	0x024FD12C MOV W0, W20
	0x024FD130 LDP X20, X19, [X31 + 0x60]
	0x024FD134 LDP X22, X21, [X31 + 0x50]
	0x024FD138 LDP X30, X23, [X31 + 0x40]
	0x024FD13C ADD X31, X31, 0x70
	0x024FD140 RET
	0x024FD144 BL 0x1C16F20
	0x024FD148 BL 0x1C16F28
	0x024FD14C ADRP X0, 0x1BFB000
	0x024FD150 LDR X0, [X0 + 0x528]
	0x024FD154 BL 0x1C16D08
	0x024FD158 BL 0x1C16F10
	0x024FD15C MOV X20, X0
	0x024FD160 ADRP X0, 0x1C1E000
	0x024FD164 LDR X0, [X0 + 0x8F0]
	0x024FD168 BL 0x1C16D08
	0x024FD16C MOV X1, X0
	0x024FD170 MOV X0, X20
	0x024FD174 MOV X2, X31
	0x024FD178 BL 0x330E100
	0x024FD17C MOV X0, X20
	0x024FD180 MOV X1, X19
	0x024FD184 BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+176], X30
	003 Move [X31+184], X25
	004 Move [X31+192], X24
	005 Move [X31+200], X23
	006 Move [X31+208], X22
	007 Move [X31+216], X21
	008 Move [X31+224], X20
	009 Move [X31+232], X19
	010 Move X19, X2
	011 Compare X1, 0
	012 JumpIfEqual {71}
	013 Move W8, [X0+12]
	014 Move X22, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X21, X1
	017 Move W20, W31
	018 Move W24, 88
	019 Move X8, [X22]
	020 Compare X8, 0
	021 JumpIfEqual {69}
	022 Move W9, [X22+8]
	023 Move W10, [X8+24]
	024 Add W9, W20, W9
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction SMADDL not yet implemented."
	027 Add X1, X8, 32
	028 Add X0, X31, 0
	029 Move W2, 88
	030 Call 0x3EB2AC0
	031 Move X0, [X19+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X25, [X21+24]
	039 Move X23, [X21+64]
	040 Add X0, X31, 88
	041 Add X1, X31, 0
	042 Move W2, 88
	043 Call 0x3EB2AC0
	044 Move X2, [X21+40]
	045 Add X1, X31, 88
	046 Move X0, X23
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {58}
	052 Move W8, [X22+12]
	053 Add W20, W20, 1
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W20, TEMP
	058 Move W0, W20
	059 Move X20, [X31+224]
	060 Move X19, [X31+232]
	061 Move X22, [X31+208]
	062 Move X21, [X31+216]
	063 Move X24, [X31+192]
	064 Move X23, [X31+200]
	065 Move X30, [X31+176]
	066 Move X25, [X31+184]
	067 Add X31, X31, 240
	068 Return X0
	069 Call 0x1C17F20
	070 Call 0x1C17F28
	071 Move X0, 0x1BFC000
	072 Move X0, [X0+1320]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0x1C1F000
	077 Move X0, [X0+2288]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X31
	082 Call ArgumentNullException..ctor, X0, X1
	083 Move X0, X20
	084 Move X1, X19
	085 Call 0x1C17DEC

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1/Enumerator<TValue> GetEnumerator()

Disassembly:
	0x024FD188 STR X30, [X31 - 0x30]!
	0x024FD18C STP X22, X21, [X31 + 0x10]
	0x024FD190 STP X20, X19, [X31 + 0x20]
	0x024FD194 LDR X19, [X0]
	0x024FD198 LDP W21, W22, [X0 + 0x8]
	0x024FD19C STP X31, X31, [X8]
	0x024FD1A0 STR X31, [X8 + 0x10]
	0x024FD1A4 LDR X0, [X1 + 0x20]
	0x024FD1A8 MOV X20, X8
	0x024FD1AC LDRB W8, [X0 + 0x135]
	0x024FD1B0 TBNZ X8, 0x0, 0x24FD1B8
	0x024FD1B4 BL 0x1C5C684
	0x024FD1B8 LDR X8, [X0 + 0xC0]
	0x024FD1BC MOV X0, X20
	0x024FD1C0 MOV X1, X19
	0x024FD1C4 MOV W2, W21
	0x024FD1C8 LDR X4, [X8 + 0x38]
	0x024FD1CC MOV W3, W22
	0x024FD1D0 LDP X20, X19, [X31 + 0x20]
	0x024FD1D4 LDP X22, X21, [X31 + 0x10]
	0x024FD1D8 LDR X30, [X31], #0x30
	0x024FD1DC B 0x2BC1F54

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0]
	007 Move W21, [X0+8]
	008 Move W22, [X0+12]
	009 Move [X8], X31
	010 Move [X8+8], X31
	011 Move [X8+16], X31
	012 Move X0, [X1+32]
	013 Move X20, X8
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move X8, [X0+192]
	021 Move X0, X20
	022 Move X1, X19
	023 Move W2, W21
	024 Move X4, [X8+56]
	025 Move W3, W22
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Call 0x2BBDA40, X0, X1, X2, X3
	032 Return X0

Method: System.Collections.Generic.IEnumerator`1<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator()

Disassembly:
	0x024FD1E0 SUB X31, X31, 0x60
	0x024FD1E4 STR X30, [X31 + 0x40]
	0x024FD1E8 STP X20, X19, [X31 + 0x50]
	0x024FD1EC LDR X8, [X1 + 0x20]
	0x024FD1F0 MOV X19, X1
	0x024FD1F4 MOV X20, X0
	0x024FD1F8 LDRB W9, [X8 + 0x135]
	0x024FD1FC TBNZ X9, 0x0, 0x24FD20C
	0x024FD200 MOV X0, X8
	0x024FD204 BL 0x1C5C684
	0x024FD208 MOV X8, X0
	0x024FD20C LDR X8, [X8 + 0xC0]
	0x024FD210 MOV X0, X20
	0x024FD214 LDR X1, [X8 + 0x40]
	0x024FD218 ADD X8, X31, 0x0
	0x024FD21C BL 0x24FD188
	0x024FD220 LDR X8, [X31 + 0x10]
	0x024FD224 LDR V0, [X31]
	0x024FD228 STR X8, [X31 + 0x30]
	0x024FD22C STR V0, [X31 + 0x2]
	0x024FD230 STR V0, [X31]
	0x024FD234 STR X8, [X31 + 0x10]
	0x024FD238 LDR X0, [X19 + 0x20]
	0x024FD23C LDRB W8, [X0 + 0x135]
	0x024FD240 TBNZ X8, 0x0, 0x24FD248
	0x024FD244 BL 0x1C5C684
	0x024FD248 LDR X8, [X0 + 0xC0]
	0x024FD24C ADD X1, X31, 0x0
	0x024FD250 LDR X0, [X8 + 0x30]
	0x024FD254 BL 0x1C16E04
	0x024FD258 LDP X20, X19, [X31 + 0x50]
	0x024FD25C LDR X30, [X31 + 0x40]
	0x024FD260 ADD X31, X31, 0x60
	0x024FD264 RET

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, X20
	018 Move X1, [X8+64]
	019 Add X8, X31, 0
	020 Call 0x24FD188, X0
	021 Move X8, [X31+16]
	022 Move V0, [X31]
	023 Move [X31+48], X8
	024 Move [X31+2], V0
	025 Move [X31], V0
	026 Move [X31+16], X8
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Add X1, X31, 0
	036 Move X0, [X8+48]
	037 Call 0x1C17E04
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Move X30, [X31+64]
	041 Add X31, X31, 96
	042 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x024FD268 SUB X31, X31, 0x60
	0x024FD26C STR X30, [X31 + 0x40]
	0x024FD270 STP X20, X19, [X31 + 0x50]
	0x024FD274 LDR X8, [X1 + 0x20]
	0x024FD278 MOV X19, X1
	0x024FD27C MOV X20, X0
	0x024FD280 LDRB W9, [X8 + 0x135]
	0x024FD284 TBNZ X9, 0x0, 0x24FD294
	0x024FD288 MOV X0, X8
	0x024FD28C BL 0x1C5C684
	0x024FD290 MOV X8, X0
	0x024FD294 LDR X8, [X8 + 0xC0]
	0x024FD298 MOV X0, X20
	0x024FD29C LDR X1, [X8 + 0x40]
	0x024FD2A0 ADD X8, X31, 0x0
	0x024FD2A4 BL 0x24FD188
	0x024FD2A8 LDR X8, [X31 + 0x10]
	0x024FD2AC LDR V0, [X31]
	0x024FD2B0 STR X8, [X31 + 0x30]
	0x024FD2B4 STR V0, [X31 + 0x2]
	0x024FD2B8 STR V0, [X31]
	0x024FD2BC STR X8, [X31 + 0x10]
	0x024FD2C0 LDR X0, [X19 + 0x20]
	0x024FD2C4 LDRB W8, [X0 + 0x135]
	0x024FD2C8 TBNZ X8, 0x0, 0x24FD2D0
	0x024FD2CC BL 0x1C5C684
	0x024FD2D0 LDR X8, [X0 + 0xC0]
	0x024FD2D4 ADD X1, X31, 0x0
	0x024FD2D8 LDR X0, [X8 + 0x30]
	0x024FD2DC BL 0x1C16E04
	0x024FD2E0 LDP X20, X19, [X31 + 0x50]
	0x024FD2E4 LDR X30, [X31 + 0x40]
	0x024FD2E8 ADD X31, X31, 0x60
	0x024FD2EC RET

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, X20
	018 Move X1, [X8+64]
	019 Add X8, X31, 0
	020 Call 0x24FD188, X0
	021 Move X8, [X31+16]
	022 Move V0, [X31]
	023 Move [X31+48], X8
	024 Move [X31+2], V0
	025 Move [X31], V0
	026 Move [X31+16], X8
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Add X1, X31, 0
	036 Move X0, [X8+48]
	037 Call 0x1C17E04
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Move X30, [X31+64]
	041 Add X31, X31, 96
	042 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<TValue> op_Implicit(TValue[] array)

Disassembly:
	0x024FD2F0 STP X30, X19, [X31 - 0x10]!
	0x024FD2F4 LDR X8, [X1 + 0x20]
	0x024FD2F8 MOV X19, X0
	0x024FD2FC LDRB W9, [X8 + 0x135]
	0x024FD300 TBNZ X9, 0x0, 0x24FD30C
	0x024FD304 MOV X0, X8
	0x024FD308 BL 0x1C5C684
	0x024FD30C CBZ X19, 0x24FD31C
	0x024FD310 LDR X8, [X19 + 0x18]
	0x024FD314 UBFM X1, X8, 0x20, 0x1F
	0x024FD318 B 0x24FD320
	0x024FD31C MOV X1, X31
	0x024FD320 MOV X0, X19
	0x024FD324 LDP X30, X19, [X31], #0x10
	0x024FD328 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+32]
	004 Move X19, X0
	005 Move W9, [X8+309]
	006 Move TEMP, X9
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {12}
	010 Move X0, X8
	011 Call 0x1C5D684
	012 Compare X19, 0
	013 JumpIfEqual {18}
	014 Move X8, [X19+24]
	015 Move X1, X8
	016 ShiftRight X1, 32
	017 And X1, X1, 0x7FFFFFFF
	018 Move X1, X31
	019 Move X0, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return X0

Method: System.Int32 get_Count()

Disassembly:
	0x024FD32C LDR W0, [X0 + 0xC]
	0x024FD330 RET

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: TValue get_Item(System.Int32 index)

Disassembly:
	0x024FD334 STR X30, [X31 - 0x20]!
	0x024FD338 STP X20, X19, [X31 + 0x10]
	0x024FD33C TBNZ X1, 0x1F, 0x24FD38C
	0x024FD340 LDR W9, [X0 + 0xC]
	0x024FD344 CMP W9, W1
	0x024FD348 B.LE 0x24FD38C
	0x024FD34C LDR X9, [X0]
	0x024FD350 CBZ X9, 0x24FD3C4
	0x024FD354 LDR W10, [X0 + 0x8]
	0x024FD358 LDR W11, [X9 + 0x18]
	0x024FD35C ADD W10, W10, W1
	0x024FD360 CMP W10, W11
	0x024FD364 B.CS 0x24FD3F0
	0x024FD368 MOVZ W11, 0x18
	0x024FD36C SMADDL X9, X10, X11, X9
	0x024FD370 LDR X10, [X9 + 0x30]
	0x024FD374 LDR V0, [X9 + 0x2]
	0x024FD378 LDP X20, X19, [X31 + 0x10]
	0x024FD37C STR X10, [X8 + 0x10]
	0x024FD380 STR V0, [X8]
	0x024FD384 LDR X30, [X31], #0x20
	0x024FD388 RET
	0x024FD38C ADRP X0, 0x1BFE000
	0x024FD390 LDR X0, [X0 + 0x760]
	0x024FD394 MOV X19, X2
	0x024FD398 BL 0x1C16D08
	0x024FD39C BL 0x1C16F10
	0x024FD3A0 MOV X20, X0
	0x024FD3A4 ADRP X0, 0x1C01000
	0x024FD3A8 LDR X0, [X0 + 0x130]
	0x024FD3AC BL 0x1C16D08
	0x024FD3B0 MOV X1, X0
	0x024FD3B4 MOV X0, X20
	0x024FD3B8 MOV X2, X31
	0x024FD3BC BL 0x3316014
	0x024FD3C0 B 0x24FD3E4
	0x024FD3C4 ADRP X0, 0x1BF6000
	0x024FD3C8 LDR X0, [X0 + 0x5B0]
	0x024FD3CC MOV X19, X2
	0x024FD3D0 BL 0x1C16D08
	0x024FD3D4 BL 0x1C16F10
	0x024FD3D8 MOV X1, X31
	0x024FD3DC MOV X20, X0
	0x024FD3E0 BL 0x337DEC0
	0x024FD3E4 MOV X0, X20
	0x024FD3E8 MOV X1, X19
	0x024FD3EC BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {27}
	008 Move W9, [X0+12]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X9, [X0]
	011 Compare X9, 0
	012 JumpIfEqual {40}
	013 Move W10, [X0+8]
	014 Move W11, [X9+24]
	015 Add W10, W10, W1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W11, 88
	020 NotImplemented "Instruction SMADDL not yet implemented."
	021 Add X1, X9, 32
	022 Move W2, 88
	023 Move X0, X8
	024 Move X30, [X31+32]
	025 Call 0x3EB2AC0
	026 Return X0
	027 Move X0, 0x1BFF000
	028 Move X0, [X0+1888]
	029 Move X19, X2
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Move X0, 0x1C02000
	034 Move X0, [X0+304]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X20
	038 Move X2, X31
	039 Call ArgumentOutOfRangeException..ctor, X0, X1
	040 Move X0, 0x1BF7000
	041 Move X0, [X0+1456]
	042 Move X19, X2
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X1, X31
	046 Move X20, X0
	047 Call InvalidOperationException..ctor, X0
	048 Move X0, X20
	049 Move X1, X19
	050 Call 0x1C17DEC
	051 Call 0x1C17F28

