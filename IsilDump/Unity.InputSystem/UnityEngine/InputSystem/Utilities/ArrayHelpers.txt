Type: UnityEngine.InputSystem.Utilities.ArrayHelpers

Method: System.Int32 LengthSafe(TValue[] array)

Disassembly:
	0x0217C240 CBZ X8, 0x217C2D0
	0x0217C244 CBZ X20, 0x217C2DC
	0x0217C248 LDR X8, [X21 + 0x38]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {4}
	003 Move W0, [X0+24]
	004 Return X0

Method: System.Void Clear(TValue[] array)

Disassembly:
	0x02176AD8 STP X20, X19, [X31 + 0x20]
	0x02176ADC LDR X8, [X4 + 0x38]
	0x02176AE0 MOV X20, X4
	0x02176AE4 MOV W21, W3
	0x02176AE8 MOV W22, W2
	0x02176AEC MOV W23, W1

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move W2, [X0+24]
	004 Move W1, W31
	005 Move X3, X31
	006 Call Array.Clear, X0, X1, X2
	007 Return 
	008 Return 

Method: System.Void Clear(TValue[] array, System.Int32 count)

Disassembly:
	0x02176B30 MOV W2, W22
	0x02176B34 MOV W3, W21
	0x02176B38 LDR X4, [X8 + 0x10]
	0x02176B3C LDP X20, X19, [X31 + 0x20]
	0x02176B40 LDP X22, X21, [X31 + 0x10]
	0x02176B44 MOV W1, W23

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move W2, W1
	004 Move W1, W31
	005 Move X3, X31
	006 Call Array.Clear, X0, X1, X2
	007 Return 
	008 Return 

Method: System.Void Clear(TValue[] array, ref System.Int32 count)

Disassembly:
	0x02176B08 CBZ X8, 0x2176BB8
	0x02176B0C CBZ W22, 0x2176BA8
	0x02176B10 LDR X8, [X19]
	0x02176B14 CBZ X8, 0x2176B50
	0x02176B18 LDR W8, [X8 + 0x18]
	0x02176B1C SUB W8, W8, W23
	0x02176B20 CMP W8, W22
	0x02176B24 B.GE 0x2176BA8
	0x02176B28 LDR X8, [X20 + 0x38]
	0x02176B2C MOV X0, X19

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {13}
	003 Move [X31-16], X30
	004 Move [X31-8], X19
	005 Move W2, [X1]
	006 Move X19, X1
	007 Move W1, W31
	008 Move X3, X31
	009 Call Array.Clear, X0, X1, X2
	010 Move [X19], W31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return 

Method: System.Void EnsureCapacity(ref TValue[] array, System.Int32 count, System.Int32 capacity, System.Int32 capacityIncrement = 10)

Disassembly:
	0x02177AD0 STP V0, V1, [X8 + 0x20]
	0x02177AD4 LDR W9, [X1]
	0x02177AD8 LDR X30, [X31 + 0x90]
	0x02177ADC SUB W8, W9, 0x1
	0x02177AE0 STR W8, [X1]
	0x02177AE4 ADD X31, X31, 0xA0
	0x02177AE8 RET
	0x02177AEC BL 0x1C16F28
	0x02177AF0 BL 0x1C16F20
	0x02177AF4 STR X30, [X31 - 0x10]!
	0x02177AF8 LDR W8, [X1]
	0x02177AFC SUB W9, W8, 0x1
	0x02177B00 CMP W9, W2
	0x02177B04 B.EQ 0x2177B34
	0x02177B08 CBZ X0, 0x2177B6C
	0x02177B0C LDR W8, [X0 + 0x18]
	0x02177B10 CMP W9, W8
	0x02177B14 B.CS 0x2177B68
	0x02177B18 CMP W8, W2
	0x02177B1C B.LS 0x2177B68
	0x02177B20 SXTW X8, W9
	0x02177B24 ADD X9, X0, 0x20
	0x02177B28 LDR V0, [X9, X8, LSL #4]
	0x02177B2C STR V0, [X9, W2, SXTW]
	0x02177B30 LDR W8, [X1]
	0x02177B34 SUBS W9, W8, 0x1
	0x02177B38 B.LT 0x2177B58
	0x02177B3C CBZ X0, 0x2177B6C
	0x02177B40 LDR W8, [X0 + 0x18]
	0x02177B44 CMP W9, W8
	0x02177B48 B.CS 0x2177B68
	0x02177B4C ADD X8, X0, W9, 0x4, UXTW
	0x02177B50 STP X31, X31, [X8 + 0x20]
	0x02177B54 LDR W8, [X1]
	0x02177B58 SUB W8, W8, 0x1
	0x02177B5C STR W8, [X1]
	0x02177B60 LDR X30, [X31], #0x10
	0x02177B64 RET
	0x02177B68 BL 0x1C16F28
	0x02177B6C BL 0x1C16F20
	0x02177B70 SUB X31, X31, 0xA0
	0x02177B74 STR X30, [X31 + 0x90]
	0x02177B78 LDR W9, [X1]
	0x02177B7C SUB W10, W9, 0x1
	0x02177B80 CMP W10, W2
	0x02177B84 B.EQ 0x2177BD4
	0x02177B88 CBZ X0, 0x2177C3C
	0x02177B8C LDR W9, [X0 + 0x18]
	0x02177B90 CMP W10, W9
	0x02177B94 B.CS 0x2177C38
	0x02177B98 MOVZ W8, 0x28
	0x02177B9C SMADDL X10, X10, X8, X0
	0x02177BA0 LDR X11, [X10 + 0x40]
	0x02177BA4 LDP V1, V0, [X10 + 0x20]
	0x02177BA8 CMP W9, W2
	0x02177BAC STR X11, [X31 + 0x80]
	0x02177BB0 STP V1, V0, [X31 + 0x60]
	0x02177BB4 B.LS 0x2177C38
	0x02177BB8 LDR X9, [X31 + 0x80]
	0x02177BBC LDP V1, V0, [X31 + 0x60]
	0x02177BC0 NOP
	0x02177BC4 SMADDL X8, X2, X8, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X20, X4
	009 Move W21, W3
	010 Move W22, W2
	011 Move W23, W1
	012 Move X19, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {21}
	015 Move X0, 0x1F7D000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X8, [X20+56]
	019 Compare X8, 0
	020 JumpIfEqual {76}
	021 Compare W22, 0
	022 JumpIfEqual {69}
	023 Move X8, [X19]
	024 Compare X8, 0
	025 JumpIfEqual {43}
	026 Move W8, [X8+24]
	027 Subtract W8, W8, W23
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X20+56]
	030 Move X0, X19
	031 Move W2, W22
	032 Move W3, W21
	033 Move X4, [X8+16]
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move W1, W23
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call 0x217780C, X0, X1, X2, X3
	042 Return 
	043 Move X8, 0x1F7D000
	044 Move X8, [X8+1448]
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move W0, W22
	051 Move W1, W21
	052 Move X2, X31
	053 Call Math.Max, X0, X1
	054 Move X8, [X20+56]
	055 Move W20, W0
	056 Move X8, [X8+8]
	057 Move W9, [X8+309]
	058 Move TEMP, X9
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {65}
	062 Move X0, X8
	063 Call 0x1C5D684
	064 Move X8, X0
	065 Move X0, X8
	066 Move W1, W20
	067 Call 0x1C17D6C
	068 Move [X19], X0
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Move X23, [X31+56]
	075 Return 
	076 Move X0, X20
	077 Call 0x1C5D6E0
	078 Compare W22, 0
	079 JumpIfNotEqual {23}

Method: System.Void DuplicateWithCapacity(ref TValue[] array, System.Int32 count, System.Int32 capacity, System.Int32 capacityIncrement = 10)

Disassembly:
	0x0217780C CMP W10, W2
	0x02177810 B.LS 0x217784C
	0x02177814 ADD X10, X0, 0x20
	0x02177818 LDR X11, [X10, W8, SXTW]
	0x0217781C STR X11, [X10, W2, SXTW]
	0x02177820 CMP W9, 0x1
	0x02177824 B.LT 0x2177840
	0x02177828 CBZ X0, 0x2177850
	0x0217782C LDR W9, [X0 + 0x18]
	0x02177830 CMP W8, W9
	0x02177834 B.CS 0x217784C
	0x02177838 ADD X9, X0, W8, 0x3, SXTW
	0x0217783C STR X31, [X9 + 0x20]
	0x02177840 STR W8, [X1]
	0x02177844 LDR X30, [X31], #0x10
	0x02177848 RET
	0x0217784C BL 0x1C16F28
	0x02177850 BL 0x1C16F20
	0x02177854 STP X29, X30, [X31 - 0x60]!
	0x02177858 STP X28, X27, [X31 + 0x10]
	0x0217785C STP X26, X25, [X31 + 0x20]
	0x02177860 STP X24, X23, [X31 + 0x30]
	0x02177864 STP X22, X21, [X31 + 0x40]
	0x02177868 STP X20, X19, [X31 + 0x50]
	0x0217786C ADD X29, X31, 0x0
	0x02177870 SUB X31, X31, 0x10
	0x02177874 MRS X26, 0xC000
	0x02177878 LDR X8, [X26 + 0x28]
	0x0217787C MOV X21, X3
	0x02177880 MOV W24, W2
	0x02177884 MOV X19, X1
	0x02177888 STUR X8, [X29 - 0x8]
	0x0217788C LDR X8, [X3 + 0x38]
	0x02177890 MOV X20, X0
	0x02177894 CBNZ X8, 0x21778A4
	0x02177898 MOV X0, X21
	0x0217789C BL 0x1C5C6E0
	0x021778A0 LDR X8, [X21 + 0x38]
	0x021778A4 LDR X8, [X8 + 0x8]
	0x021778A8 LDR W22, [X8 + 0xFC]
	0x021778AC ADD X8, X31, 0x0
	0x021778B0 ADD X9, X22, 0xF
	0x021778B4 AND X9, X9, 0x1FFFFFFFF
	0x021778B8 SUB X23, X8, X9
	0x021778BC ADD X31, X23, 0x0
	0x021778C0 ADD X8, X31, 0x0
	0x021778C4 SUB X25, X8, X9
	0x021778C8 ADD X31, X25, 0x0
	0x021778CC MOV X0, X25
	0x021778D0 MOV W1, W31
	0x021778D4 MOV X2, X22
	0x021778D8 BL 0x3EB1B10
	0x021778DC LDR W8, [X19]
	0x021778E0 SUB W9, W8, 0x1
	0x021778E4 CMP W9, W24
	0x021778E8 B.EQ 0x2177960
	0x021778EC CBZ X20, 0x2177A1C
	0x021778F0 LDR W27, [X20 + 0x18]
	0x021778F4 CMP W9, W27

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X21, X4
	010 Move W22, W3
	011 Move W23, W2
	012 Move W20, W1
	013 Move X19, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {24}
	016 Move X0, 0x1F7D000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X8, [X21+56]
	020 Compare X8, 0
	021 JumpIfNotEqual {24}
	022 Move X0, X21
	023 Call 0x1C5D6E0
	024 Move X8, 0x1F7D000
	025 Move X8, [X8+1448]
	026 Move X24, [X19]
	027 Move X0, [X8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W0, W23
	033 Move W1, W22
	034 Move X2, X31
	035 Call Math.Max, X0, X1
	036 Move X8, [X21+56]
	037 Move W21, W0
	038 Move X8, [X8+8]
	039 Move W9, [X8+309]
	040 Move TEMP, X9
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {47}
	044 Move X0, X8
	045 Call 0x1C5D684
	046 Move X8, X0
	047 Compare X24, 0
	048 JumpIfEqual {59}
	049 Add W1, W21, W20
	050 Move X0, X8
	051 Call 0x1C17D6C
	052 Move X8, [X19]
	053 Move X21, X0
	054 Move X1, X21
	055 Move W2, W20
	056 Move X0, X8
	057 Move X3, X31
	058 Call Array.Copy, X0, X1, X2
	059 Move X0, X8
	060 Move W1, W21
	061 Call 0x1C17D6C
	062 Move X21, X0
	063 Move [X19], X21
	064 Move X20, [X31+48]
	065 Move X19, [X31+56]
	066 Move X22, [X31+32]
	067 Move X21, [X31+40]
	068 Move X24, [X31+16]
	069 Move X23, [X31+24]
	070 Move X30, [X31+64]
	071 Return 

Method: System.Boolean Contains(TValue[] array, TValue value)

Disassembly:
	0x02176D8C MOV X0, X8
	0x02176D90 MOV W1, W20
	0x02176D94 BL 0x1C16D6C
	0x02176D98 STR X0, [X19]
	0x02176D9C LDP X20, X19, [X31 + 0x20]
	0x02176DA0 LDP X22, X21, [X31 + 0x10]
	0x02176DA4 LDP X30, X23, [X31], #0x30
	0x02176DA8 RET
	0x02176DAC MOV X0, X20
	0x02176DB0 BL 0x1C5C6E0
	0x02176DB4 CBNZ W22, 0x2176D00
	0x02176DB8 B 0x2176D9C
	0x02176DBC STP X30, X21, [X31 - 0x20]!
	0x02176DC0 STP X20, X19, [X31 + 0x10]
	0x02176DC4 LDR X8, [X2 + 0x38]
	0x02176DC8 MOV X19, X2
	0x02176DCC MOV W21, W1
	0x02176DD0 MOV X20, X0
	0x02176DD4 CBNZ X8, 0x2176DE4
	0x02176DD8 MOV X0, X19
	0x02176DDC BL 0x1C5C6E0
	0x02176DE0 LDR X8, [X19 + 0x38]
	0x02176DE4 LDR X0, [X20]
	0x02176DE8 LDR X4, [X8 + 0x10]
	0x02176DEC MOVN W3, 0x0
	0x02176DF0 MOV W1, W21
	0x02176DF4 MOV W2, W31
	0x02176DF8 BL 0x21796EC
	0x02176DFC MOV W21, W0
	0x02176E00 ADDS W31, W0, 0x1
	0x02176E04 B.EQ 0x2176E1C
	0x02176E08 LDR X8, [X19 + 0x38]
	0x02176E0C MOV X0, X20
	0x02176E10 MOV W1, W21
	0x02176E14 LDR X2, [X8 + 0x20]
	0x02176E18 BL 0x2177104
	0x02176E1C LDP X20, X19, [X31 + 0x10]
	0x02176E20 ADDS W31, W21, 0x1
	0x02176E24 CSET W0, NE
	0x02176E28 LDP X30, X21, [X31], #0x20
	0x02176E2C RET
	0x02176E30 STP X30, X21, [X31 - 0x20]!
	0x02176E34 STP X20, X19, [X31 + 0x10]
	0x02176E38 LDR X8, [X2 + 0x38]
	0x02176E3C MOV X19, X2
	0x02176E40 MOV X21, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+56]
	008 Move X21, X2
	009 Move W19, W1
	010 Move X20, X0
	011 Compare X8, 0
	012 JumpIfEqual {15}
	013 Compare X20, 0
	014 JumpIfNotEqual {19}
	015 Move X0, X21
	016 Call 0x1C5D6E0
	017 Compare X20, 0
	018 JumpIfEqual {45}
	019 Move X8, [X21+56]
	020 Move X0, [X8+8]
	021 Call 0x211B010
	022 Move X8, [X20+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X21, X0
	025 Move X22, X31
	026 And X8, X8, 0
	027 Add X23, X20, 32
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare X21, 0
	030 JumpIfEqual {54}
	031 Move X8, [X21]
	032 Move W1, [X23]
	033 Move X0, X21
	034 Move W2, W19
	035 Move X9, [X8+440]
	036 Move X3, [X8+448]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {46}
	042 Move W8, [X20+24]
	043 Add X22, X22, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W0, W31
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 And W0, W0, 1
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Return X0
	054 Call 0x1C17F20
	055 Call 0x1C17F28

Method: System.Boolean ContainsReference(TValue[] array, TValue value)

Disassembly:
	0x02177094 LDR W8, [X0 + 0x18]
	0x02177098 CBNZ W21, 0x21770B8
	0x0217709C CMP W8, 0x1
	0x021770A0 B.NE 0x21770B8
	0x021770A4 STR X31, [X19]
	0x021770A8 LDP X20, X19, [X31 + 0x20]
	0x021770AC LDP X22, X21, [X31 + 0x10]
	0x021770B0 LDR X30, [X31], #0x30
	0x021770B4 RET
	0x021770B8 SUB W22, W8, 0x1
	0x021770BC CMP W22, W21
	0x021770C0 B.LE 0x21770E0
	0x021770C4 ORN W9, W31, W21, 0x0
	0x021770C8 ADD W1, W21, 0x1
	0x021770CC ADD W4, W8, W9
	0x021770D0 MOV X2, X0
	0x021770D4 MOV W3, W21
	0x021770D8 MOV X5, X31
	0x021770DC BL 0x339FCE8
	0x021770E0 LDR X8, [X20 + 0x38]
	0x021770E4 MOV X0, X19
	0x021770E8 MOV W1, W22
	0x021770EC LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move X19, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfEqual {22}
	011 Compare X21, 0
	012 JumpIfEqual {26}
	013 Move X8, [X20+56]
	014 Move W1, [X21+24]
	015 Move X2, X19
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X3, [X8+16]
	019 Move X0, X21
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Move X0, X20
	023 Call 0x1C5D6E0
	024 Compare X21, 0
	025 JumpIfNotEqual {13}
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W0, W31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Boolean ContainsReference(TFirst[] array, System.Int32 count, TSecond value)

Disassembly:
	0x021770F0 LDR X2, [X8 + 0x8]
	0x021770F4 LDP X22, X21, [X31 + 0x10]
	0x021770F8 LDR X30, [X31], #0x30
	0x021770FC B 0x211607C
	0x02177100 BL 0x1C16F20
	0x02177104 STR X30, [X31 - 0x30]!
	0x02177108 STP X22, X21, [X31 + 0x10]
	0x0217710C STP X20, X19, [X31 + 0x20]
	0x02177110 LDR X8, [X2 + 0x38]
	0x02177114 MOV X20, X2
	0x02177118 MOV W21, W1
	0x0217711C MOV X19, X0
	0x02177120 CBNZ X8, 0x217712C
	0x02177124 MOV X0, X20
	0x02177128 BL 0x1C5C6E0
	0x0217712C LDR X0, [X19]
	0x02177130 CBZ X0, 0x21771A0
	0x02177134 LDR W8, [X0 + 0x18]
	0x02177138 CBNZ W21, 0x2177158
	0x0217713C CMP W8, 0x1
	0x02177140 B.NE 0x2177158
	0x02177144 STR X31, [X19]
	0x02177148 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X20, X2
	008 Move W19, W1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {16}
	012 Move X0, X3
	013 Move X22, X3
	014 Call 0x1C5D6E0
	015 Move X8, [X22+56]
	016 Move X3, [X8+16]
	017 Move X0, X21
	018 Move X1, X20
	019 Move W2, W19
	020 Call 0x217AB8C, X0, X1, X2
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Add W31, W0, 1
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move X30, [X31+48]
	028 Return X0

Method: System.Boolean ContainsReference(TFirst[] array, System.Int32 startIndex, System.Int32 count, TSecond value)

Disassembly:
	0x021771AC STP X20, X19, [X31 + 0x20]
	0x021771B0 LDR X8, [X2 + 0x38]
	0x021771B4 MOV X20, X2
	0x021771B8 MOV W21, W1
	0x021771BC MOV X19, X0
	0x021771C0 CBNZ X8, 0x21771CC
	0x021771C4 MOV X0, X20
	0x021771C8 BL 0x1C5C6E0
	0x021771CC LDR X0, [X19]
	0x021771D0 CBZ X0, 0x2177240
	0x021771D4 LDR W8, [X0 + 0x18]
	0x021771D8 CBNZ W21, 0x21771F8
	0x021771DC CMP W8, 0x1
	0x021771E0 B.NE 0x21771F8
	0x021771E4 STR X31, [X19]
	0x021771E8 LDP X20, X19, [X31 + 0x20]
	0x021771EC LDP X22, X21, [X31 + 0x10]
	0x021771F0 LDR X30, [X31], #0x30
	0x021771F4 RET
	0x021771F8 SUB W22, W8, 0x1
	0x021771FC CMP W22, W21
	0x02177200 B.LE 0x2177220

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+56]
	007 Move X20, X3
	008 Move W19, W2
	009 Move W21, W1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X4
	014 Call 0x1C5D6E0
	015 Move X0, X22
	016 Move X1, X20
	017 Move W2, W21
	018 Move W3, W19
	019 Call 0x217AC24, X0, X1, X2, X3
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X22, [X31+16]
	023 Move X21, [X31+24]
	024 Add W31, W0, 1
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Move X30, [X31+48]
	027 Return X0

Method: System.Boolean HaveDuplicateReferences(TFirst[] first, System.Int32 index, System.Int32 count)

Disassembly:
	0x0217A014 MOV X0, X21
	0x0217A018 LDR X2, [X9 + 0x18]
	0x0217A01C ADD W1, W22, 0x1
	0x0217A020 BL 0x2115F70
	0x0217A024 SUBS W4, W22, W20
	0x0217A028 B.EQ 0x217A044
	0x0217A02C LDR X0, [X21]
	0x0217A030 ADD W3, W20, 0x1
	0x0217A034 MOV W1, W20
	0x0217A038 MOV X5, X31
	0x0217A03C MOV X2, X0
	0x0217A040 BL 0x339FCE8
	0x0217A044 LDR X21, [X21]
	0x0217A048 ADD X0, X31, 0xB8
	0x0217A04C MOVZ W2, 0x58
	0x0217A050 MOV X1, X19
	0x0217A054 BL 0x3EB1AC0
	0x0217A058 CBZ X21, 0x217A104
	0x0217A05C ADD X0, X31, 0x8
	0x0217A060 ADD X1, X31, 0xB8
	0x0217A064 MOVZ W2, 0x58
	0x0217A068 MOVZ W19, 0x58
	0x0217A06C BL 0x3EB1AC0
	0x0217A070 LDR W8, [X21 + 0x18]
	0x0217A074 CMP W8, W20
	0x0217A078 B.LS 0x217A108
	0x0217A07C SMADDL X8, X20, X19, X21
	0x0217A080 ADD X0, X8, 0x20
	0x0217A084 ADD X1, X31, 0x8
	0x0217A088 B 0x217A0E8
	0x0217A08C CBNZ W20, 0x217A10C
	0x0217A090 LDR X8, [X22 + 0x38]
	0x0217A094 LDR X0, [X8 + 0x8]
	0x0217A098 LDRB W8, [X0 + 0x135]
	0x0217A09C TBNZ X8, 0x0, 0x217A0A4
	0x0217A0A0 BL 0x1C5C684
	0x0217A0A4 MOVZ W1, 0x1
	0x0217A0A8 BL 0x1C16D6C
	0x0217A0AC MOV X20, X0
	0x0217A0B0 STR X0, [X21]
	0x0217A0B4 ADD X0, X31, 0xB8
	0x0217A0B8 MOVZ W2, 0x58
	0x0217A0BC MOV X1, X19
	0x0217A0C0 BL 0x3EB1AC0
	0x0217A0C4 CBZ X20, 0x217A104

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Compare X0, 0
	004 JumpIfEqual {38}
	005 Move X9, [X0+24]
	006 Move X15, X31
	007 Move W8, W31
	008 Move W10, W2
	009 And X11, X9, 0
	010 Move W12, 1
	011 Move W13, W2
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add X14, X15, 1
	014 Subtract W16, W2, W8
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X15, X0, X15
	017 Move X15, [X15+32]
	018 Move W16, 1
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add W17, W8, W16
	021 Add X17, X0, W17
	022 Move X17, [X17+32]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Add W16, W16, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add W8, W8, 1
	028 Subtract W9, W9, 1
	029 NotImplemented "Instruction CSET not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Subtract W13, W13, 2
	032 Move X15, X14
	033 Move W12, W31
	034 And W0, W12, 1
	035 Move X30, [X31+16]
	036 Return X0
	037 Call 0x1C17F28
	038 Call 0x1C17F20

Method: System.Boolean HaveEqualElements(TValue[] first, TValue[] second, System.Int32 count = 2147483647)

Disassembly:
	0x0217A2C0 MOV X5, X31
	0x0217A2C4 MOV X2, X0
	0x0217A2C8 BL 0x339FCE8
	0x0217A2CC LDR X8, [X20]
	0x0217A2D0 CBZ X8, 0x217A334
	0x0217A2D4 LDR W9, [X8 + 0x18]
	0x0217A2D8 CMP W9, W21
	0x0217A2DC B.LS 0x217A338
	0x0217A2E0 ADD X8, X8, W21, 0x1, SXTW
	0x0217A2E4 ADD X8, X8, 0x20
	0x0217A2E8 B 0x217A320
	0x0217A2EC CBNZ W21, 0x217A33C
	0x0217A2F0 LDR X8, [X22 + 0x38]
	0x0217A2F4 LDR X0, [X8 + 0x8]
	0x0217A2F8 LDRB W8, [X0 + 0x135]
	0x0217A2FC TBNZ X8, 0x0, 0x217A304
	0x0217A300 BL 0x1C5C684
	0x0217A304 MOVZ W1, 0x1
	0x0217A308 BL 0x1C16D6C
	0x0217A30C STR X0, [X20]
	0x0217A310 CBZ X0, 0x217A334
	0x0217A314 LDR W8, [X0 + 0x18]
	0x0217A318 CBZ W8, 0x217A338
	0x0217A31C ADD X8, X0, 0x20
	0x0217A320 STRH W19, [X8]
	0x0217A324 LDP X20, X19, [X31 + 0x20]
	0x0217A328 LDP X22, X21, [X31 + 0x10]
	0x0217A32C LDR X30, [X31], #0x30
	0x0217A330 RET
	0x0217A334 BL 0x1C16F20
	0x0217A338 BL 0x1C16F28
	0x0217A33C ADRP X0, 0x1F81000
	0x0217A340 LDR X0, [X0 + 0x760]
	0x0217A344 BL 0x1C16D08
	0x0217A348 BL 0x1C16F10
	0x0217A34C MOV X19, X0
	0x0217A350 ADRP X0, 0x1F84000
	0x0217A354 LDR X0, [X0 + 0x130]
	0x0217A358 BL 0x1C16D08
	0x0217A35C MOV X1, X0
	0x0217A360 MOV X0, X19
	0x0217A364 MOV X2, X31
	0x0217A368 BL 0x3316014
	0x0217A36C MOV X0, X19
	0x0217A370 MOV X1, X22
	0x0217A374 BL 0x1C16DEC
	0x0217A378 STP X29, X30, [X31 - 0x50]!
	0x0217A37C STP X26, X25, [X31 + 0x10]
	0x0217A380 STP X24, X23, [X31 + 0x20]
	0x0217A384 STP X22, X21, [X31 + 0x30]
	0x0217A388 STP X20, X19, [X31 + 0x40]
	0x0217A38C ADD X29, X31, 0x0
	0x0217A390 SUB X31, X31, 0x10
	0x0217A394 MRS X25, 0xC000
	0x0217A398 LDR X8, [X25 + 0x28]
	0x0217A39C MOV X19, X3
	0x0217A3A0 MOV X23, X2
	0x0217A3A4 MOV W22, W1
	0x0217A3A8 STUR X8, [X29 - 0x8]
	0x0217A3AC STUR X2, [X29 - 0x10]
	0x0217A3B0 LDR X8, [X3 + 0x38]
	0x0217A3B4 MOV X24, X0
	0x0217A3B8 CBNZ X8, 0x217A3C8
	0x0217A3BC MOV X0, X19
	0x0217A3C0 BL 0x1C5C6E0
	0x0217A3C4 LDR X8, [X19 + 0x38]
	0x0217A3C8 LDR X9, [X8 + 0x10]
	0x0217A3CC LDR W20, [X9 + 0xFC]
	0x0217A3D0 ADD X9, X31, 0x0
	0x0217A3D4 ADD X10, X20, 0xF
	0x0217A3D8 AND X10, X10, 0x1FFFFFFFF
	0x0217A3DC SUB X21, X9, X10
	0x0217A3E0 ADD X31, X21, 0x0
	0x0217A3E4 LDR X9, [X24]
	0x0217A3E8 CBZ X9, 0x217A4A4
	0x0217A3EC LDR X2, [X8 + 0x18]
	0x0217A3F0 LDR W26, [X9 + 0x18]
	0x0217A3F4 MOV X0, X24
	0x0217A3F8 LDR X8, [X2]
	0x0217A3FC ADD W1, W26, 0x1
	0x0217A400 BLR X8
	0x0217A404 SUBS W4, W26, W22
	0x0217A408 B.EQ 0x217A424
	0x0217A40C LDR X0, [X24]
	0x0217A410 ADD W3, W22, 0x1
	0x0217A414 MOV W1, W22
	0x0217A418 MOV X5, X31
	0x0217A41C MOV X2, X0
	0x0217A420 BL 0x339FCE8
	0x0217A424 LDR X8, [X19 + 0x38]
	0x0217A428 LDR X24, [X24]
	0x0217A42C MOV X0, X21
	0x0217A430 MOV X2, X20
	0x0217A434 LDR X8, [X8 + 0x10]
	0x0217A438 LDR W8, [X8 + 0x28]
	0x0217A43C CMP W8, 0x0
	0x0217A440 SUB X8, X29, 0x10
	0x0217A444 CSEL X1, X23, X8, LT
	0x0217A448 BL 0x3EB1AC0
	0x0217A44C CBZ X24, 0x217A554
	0x0217A450 LDR W8, [X24 + 0x18]
	0x0217A454 CMP W8, W22
	0x0217A458 B.LS 0x217A550
	0x0217A45C LDR X8, [X24]
	0x0217A460 SXTW X9, W22
	0x0217A464 MOV X1, X21
	0x0217A468 MOV X2, X20
	0x0217A46C LDR W8, [X8 + 0x104]
	0x0217A470 NOP
	0x0217A474 MADD X8, X8, X9, X24
	0x0217A478 ADD X0, X8, 0x20
	0x0217A47C BL 0x3EB1AC0
	0x0217A480 LDR X8, [X19 + 0x38]
	0x0217A484 LDR X0, [X8 + 0x10]
	0x0217A488 LDRB W8, [X0 + 0x135]
	0x0217A48C TBNZ X8, 0x0, 0x217A494
	0x0217A490 BL 0x1C5C684
	0x0217A494 LDR W8, [X24 + 0x18]
	0x0217A498 CMP W8, W22
	0x0217A49C B.HI 0x217A524
	0x0217A4A0 B 0x217A550
	0x0217A4A4 CBNZ W22, 0x217A558
	0x0217A4A8 LDR X0, [X8 + 0x8]
	0x0217A4AC LDRB W8, [X0 + 0x135]
	0x0217A4B0 TBNZ X8, 0x0, 0x217A4B8
	0x0217A4B4 BL 0x1C5C684
	0x0217A4B8 MOVZ W1, 0x1
	0x0217A4BC BL 0x1C16D6C
	0x0217A4C0 STR X0, [X24]
	0x0217A4C4 LDR X8, [X19 + 0x38]
	0x0217A4C8 MOV X22, X0
	0x0217A4CC MOV X0, X21

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 32
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X27+40]
	017 Move X19, X3
	018 Move W25, W2
	019 Move X20, X1
	020 Move [X29-8], X8
	021 Move X8, [X3+56]
	022 Move X21, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {34}
	025 Move X0, 0x1F7A000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move X8, [X19+56]
	029 Compare X8, 0
	030 JumpIfNotEqual {34}
	031 Move X0, X19
	032 Call 0x1C5D6E0
	033 Move X8, [X19+56]
	034 Move X8, [X8+32]
	035 Move W22, [X8+252]
	036 Add X8, X31, 0
	037 Add X9, X22, 15
	038 And X9, X9, 0x1FFFFFFFF
	039 Subtract X23, X8, X9
	040 Add X31, X23, 0
	041 Add X8, X31, 0
	042 Subtract X24, X8, X9
	043 Add X31, X24, 0
	044 Compare X21, 0
	045 JumpIfEqual {124}
	046 Compare X20, 0
	047 JumpIfEqual {124}
	048 Move X8, 0x1F7A000
	049 Move X8, [X8+1448]
	050 Move X0, [X8]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move W1, [X21+24]
	056 Move W0, W25
	057 Move X2, X31
	058 Call Math.Min, X0, X1
	059 Move W1, [X20+24]
	060 Move W26, W0
	061 Move W0, W25
	062 Move X2, X31
	063 Call Math.Min, X0, X1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X8, [X19+56]
	066 Move X0, [X8+8]
	067 Move X8, [X0]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W8, W26
	071 Move X25, X0
	072 Move X28, X31
	073 Subtract X26, X8, 1
	074 Move W8, [X21+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, [X21]
	077 Move X0, X23
	078 Move X2, X22
	079 Move W8, [X8+260]
	080 NotImplemented "Instruction NOP not yet implemented."
	081 NotImplemented "Instruction MADD not yet implemented."
	082 Add X1, X8, 32
	083 Call 0x3EB2AC0
	084 Move W8, [X20+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X8, [X20]
	087 Move X0, X24
	088 Move X2, X22
	089 Move W8, [X8+260]
	090 NotImplemented "Instruction NOP not yet implemented."
	091 NotImplemented "Instruction MADD not yet implemented."
	092 Add X1, X8, 32
	093 Call 0x3EB2AC0
	094 Compare X25, 0
	095 JumpIfEqual {146}
	096 Move X8, [X19+56]
	097 Move X9, X24
	098 Move X8, [X8+32]
	099 Move W10, [X8+40]
	100 Move X8, X23
	101 Move TEMP, X10
	102 And TEMP, TEMP, -2147483648
	103 Compare TEMP, -2147483648
	104 JumpIfEqual {107}
	105 Move X8, [X23]
	106 Move X9, [X24]
	107 Move X10, [X25]
	108 Move [X29-32], X8
	109 Move [X29-24], X9
	110 Subtract X3, X29, 32
	111 Subtract X4, X29, 12
	112 Move X1, [X10+448]
	113 Move X2, X25
	114 Move X0, [X1+8]
	115 Move X8, [X1+16]
	116 NotImplemented "Instruction BLR not yet implemented."
	117 NotImplemented "Instruction LDURB not yet implemented."
	118 Compare W8, 0
	119 JumpIfEqual {122}
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Add X28, X28, 1
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CSET not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction CSET not yet implemented."
	126 Move W0, W31
	127 Move W0, 1
	128 Move X8, [X27+40]
	129 NotImplemented "Instruction LDUR not yet implemented."
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add X31, X29, 0
	132 Move X20, [X31+80]
	133 Move X19, [X31+88]
	134 Move X22, [X31+64]
	135 Move X21, [X31+72]
	136 Move X24, [X31+48]
	137 Move X23, [X31+56]
	138 Move X26, [X31+32]
	139 Move X25, [X31+40]
	140 Move X28, [X31+16]
	141 Move X27, [X31+24]
	142 Move X29, [X31+96]
	143 Move X30, [X31+104]
	144 Return X0
	145 Call 0x1C17F28
	146 Call 0x1C17F20
	147 Call 0x3EB2B20

Method: System.Int32 IndexOf(TValue[] array, TValue value, System.Int32 startIndex = 0, System.Int32 count = -1)

Disassembly:
	0x0217A6EC LDR W22, [X9 + 0xFC]
	0x0217A6F0 ADD X9, X31, 0x0
	0x0217A6F4 ADD X10, X22, 0xF
	0x0217A6F8 AND X10, X10, 0x1FFFFFFFF
	0x0217A6FC SUB X24, X9, X10
	0x0217A700 ADD X31, X24, 0x0
	0x0217A704 LDR W1, [X19]
	0x0217A708 LDR X8, [X4]
	0x0217A70C MOV X0, X25
	0x0217A710 MOV W3, W26
	0x0217A714 ADD W2, W1, 0x1
	0x0217A718 BLR X8
	0x0217A71C LDR W8, [X19]
	0x0217A720 SUBS W4, W8, W20
	0x0217A724 B.EQ 0x217A740
	0x0217A728 LDR X0, [X25]
	0x0217A72C ADD W3, W20, 0x1
	0x0217A730 MOV W1, W20
	0x0217A734 MOV X5, X31
	0x0217A738 MOV X2, X0
	0x0217A73C BL 0x339FCE8
	0x0217A740 LDR X8, [X21 + 0x38]
	0x0217A744 LDR X25, [X25]
	0x0217A748 MOV X0, X24
	0x0217A74C MOV X2, X22
	0x0217A750 LDR X8, [X8 + 0x10]
	0x0217A754 LDR W8, [X8 + 0x28]
	0x0217A758 CMP W8, 0x0
	0x0217A75C SUB X8, X29, 0x10
	0x0217A760 CSEL X1, X23, X8, LT
	0x0217A764 BL 0x3EB1AC0
	0x0217A768 CBZ X25, 0x217A7FC
	0x0217A76C LDR W8, [X25 + 0x18]
	0x0217A770 CMP W8, W20
	0x0217A774 B.LS 0x217A7F8
	0x0217A778 LDR X8, [X25]
	0x0217A77C SXTW X9, W20
	0x0217A780 MOV X1, X24
	0x0217A784 MOV X2, X22
	0x0217A788 LDR W8, [X8 + 0x104]
	0x0217A78C NOP
	0x0217A790 MADD X8, X8, X9, X25
	0x0217A794 ADD X0, X8, 0x20
	0x0217A798 BL 0x3EB1AC0
	0x0217A79C LDR X8, [X21 + 0x38]
	0x0217A7A0 LDR X0, [X8 + 0x10]
	0x0217A7A4 LDRB W8, [X0 + 0x135]
	0x0217A7A8 TBNZ X8, 0x0, 0x217A7B0
	0x0217A7AC BL 0x1C5C684
	0x0217A7B0 LDR W8, [X25 + 0x18]
	0x0217A7B4 CMP W8, W20
	0x0217A7B8 B.LS 0x217A7F8
	0x0217A7BC LDR W8, [X19]
	0x0217A7C0 ADD W8, W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X23, X4
	010 Move W22, W3
	011 Move W19, W2
	012 Move W20, W1
	013 Move X21, X0
	014 Compare X8, 0
	015 JumpIfEqual {18}
	016 Compare X21, 0
	017 JumpIfNotEqual {22}
	018 Move X0, X23
	019 Call 0x1C5D6E0
	020 Compare X21, 0
	021 JumpIfEqual {56}
	022 Move TEMP, X22
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfNotEqual {28}
	026 Move W8, [X21+24]
	027 Subtract W22, W8, W19
	028 Move X8, [X23+56]
	029 Move X0, [X8+8]
	030 Call 0x211B010
	031 Add W8, W22, W19
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, W8
	034 Add X9, X21, W19
	035 Move X22, X0
	036 Add X23, X9, 32
	037 Subtract X24, X8, W19
	038 Move W8, [X21+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare X22, 0
	041 JumpIfEqual {69}
	042 Move X8, [X22]
	043 Move W1, [X23]
	044 Move X0, X22
	045 Move W2, W20
	046 Move X9, [X8+440]
	047 Move X3, [X8+448]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {59}
	053 Add W19, W19, 1
	054 Subtract X24, X24, 1
	055 Add X23, X23, 4
	056 Move TEMP, 0
	057 Not TEMP
	058 Move W19, TEMP
	059 Move W0, W19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Return X0
	068 Call 0x1C17F28
	069 Call 0x1C17F20

Method: System.Int32 IndexOf(TValue[] array, System.Predicate`1<TValue> predicate)

Disassembly:
	0x0217A4D0 MOV X2, X20
	0x0217A4D4 LDR X8, [X8 + 0x10]
	0x0217A4D8 LDR W8, [X8 + 0x28]
	0x0217A4DC CMP W8, 0x0
	0x0217A4E0 SUB X8, X29, 0x10
	0x0217A4E4 CSEL X1, X23, X8, LT
	0x0217A4E8 BL 0x3EB1AC0
	0x0217A4EC CBZ X22, 0x217A554
	0x0217A4F0 LDR X23, [X22 + 0x18]
	0x0217A4F4 CBZ W23, 0x217A550
	0x0217A4F8 ADD X0, X22, 0x20
	0x0217A4FC MOV X1, X21
	0x0217A500 MOV X2, X20
	0x0217A504 BL 0x3EB1AC0
	0x0217A508 LDR X8, [X19 + 0x38]
	0x0217A50C LDR X0, [X8 + 0x10]
	0x0217A510 LDRB W8, [X0 + 0x135]
	0x0217A514 TBNZ X8, 0x0, 0x217A520
	0x0217A518 BL 0x1C5C684
	0x0217A51C LDR X23, [X22 + 0x18]
	0x0217A520 CBZ W23, 0x217A550
	0x0217A524 LDR X8, [X25 + 0x28]
	0x0217A528 LDUR X9, [X29 - 0x8]
	0x0217A52C CMP X8, X9
	0x0217A530 B.NE 0x217A594
	0x0217A534 ADD X31, X29, 0x0
	0x0217A538 LDP X20, X19, [X31 + 0x40]
	0x0217A53C LDP X22, X21, [X31 + 0x30]
	0x0217A540 LDP X24, X23, [X31 + 0x20]
	0x0217A544 LDP X26, X25, [X31 + 0x10]
	0x0217A548 LDP X29, X30, [X31], #0x50
	0x0217A54C RET
	0x0217A550 BL 0x1C16F28
	0x0217A554 BL 0x1C16F20
	0x0217A558 ADRP X0, 0x1F81000
	0x0217A55C LDR X0, [X0 + 0x760]
	0x0217A560 BL 0x1C16D08
	0x0217A564 BL 0x1C16F10
	0x0217A568 MOV X20, X0
	0x0217A56C ADRP X0, 0x1F84000
	0x0217A570 LDR X0, [X0 + 0x130]
	0x0217A574 BL 0x1C16D08
	0x0217A578 MOV X1, X0
	0x0217A57C MOV X0, X20
	0x0217A580 MOV X2, X31
	0x0217A584 BL 0x3316014
	0x0217A588 MOV X0, X20
	0x0217A58C MOV X1, X19
	0x0217A590 BL 0x1C16DEC
	0x0217A594 BL 0x3EB1B20
	0x0217A598 SUB X31, X31, 0x80
	0x0217A59C STR X30, [X31 + 0x40]
	0x0217A5A0 STP X24, X23, [X31 + 0x50]
	0x0217A5A4 STP X22, X21, [X31 + 0x60]
	0x0217A5A8 STP X20, X19, [X31 + 0x70]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+176], X30
	003 Move [X31+184], X25
	004 Move [X31+192], X24
	005 Move [X31+200], X23
	006 Move [X31+208], X22
	007 Move [X31+216], X21
	008 Move [X31+224], X20
	009 Move [X31+232], X19
	010 Move X8, [X2+56]
	011 Move X19, X1
	012 Move X20, X0
	013 Compare X8, 0
	014 JumpIfEqual {17}
	015 Compare X20, 0
	016 JumpIfNotEqual {21}
	017 Move X0, X2
	018 Call 0x1C5D6E0
	019 Compare X20, 0
	020 JumpIfEqual {55}
	021 Move X8, [X20+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 And X8, X8, 0
	024 Compare X8, 0
	025 JumpIfEqual {54}
	026 Move X21, X31
	027 Subtract X24, X8, 1
	028 Add X22, X20, 32
	029 Add X0, X31, 0
	030 Move W2, 88
	031 Move X1, X22
	032 Call 0x3EB2AC0
	033 Compare X19, 0
	034 JumpIfEqual {69}
	035 Move X25, [X19+24]
	036 Move X23, [X19+64]
	037 Add X0, X31, 88
	038 Add X1, X31, 0
	039 Move W2, 88
	040 Call 0x3EB2AC0
	041 Move X2, [X19+40]
	042 Add X1, X31, 88
	043 Move X0, X23
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {58}
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, [X20+24]
	051 Add X21, X21, 1
	052 Add X22, X22, 88
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Call 0x1C17F28
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W21, TEMP
	058 Move W0, W21
	059 Move X20, [X31+224]
	060 Move X19, [X31+232]
	061 Move X22, [X31+208]
	062 Move X21, [X31+216]
	063 Move X24, [X31+192]
	064 Move X23, [X31+200]
	065 Move X30, [X31+176]
	066 Move X25, [X31+184]
	067 Add X31, X31, 240
	068 Return X0
	069 Call 0x1C17F20

Method: System.Int32 IndexOf(TValue[] array, System.Predicate`1<TValue> predicate, System.Int32 startIndex = 0, System.Int32 count = -1)

Disassembly:
	0x0217AA40 CBZ X8, 0x217AA5C
	0x0217AA44 CBZ X19, 0x217AA68
	0x0217AA48 LDR W8, [X19 + 0x18]
	0x0217AA4C ADDS W22, W8, 0x1
	0x0217AA50 B.CC 0x217AA6C
	0x0217AA54 MOV X22, X31
	0x0217AA58 B 0x217AABC
	0x0217AA5C MOV X0, X23
	0x0217AA60 BL 0x1C5C6E0
	0x0217AA64 CBNZ X19, 0x217AA48
	0x0217AA68 MOVZ W22, 0x1
	0x0217AA6C LDR X8, [X23 + 0x38]
	0x0217AA70 LDR X0, [X8 + 0x10]
	0x0217AA74 LDRB W8, [X0 + 0x135]
	0x0217AA78 TBNZ X8, 0x0, 0x217AA80
	0x0217AA7C BL 0x1C5C684
	0x0217AA80 MOV W1, W22
	0x0217AA84 BL 0x1C16D6C
	0x0217AA88 CBZ X0, 0x217AAD0
	0x0217AA8C LDR W8, [X0 + 0x18]
	0x0217AA90 MOV X22, X0
	0x0217AA94 CBZ W8, 0x217AAD4
	0x0217AA98 STP X21, X20, [X22 + 0x20]
	0x0217AA9C CBZ X19, 0x217AABC
	0x0217AAA0 LDR W4, [X19 + 0x18]
	0x0217AAA4 MOVZ W3, 0x1
	0x0217AAA8 MOV X0, X19
	0x0217AAAC MOV W1, W31
	0x0217AAB0 MOV X2, X22
	0x0217AAB4 MOV X5, X31
	0x0217AAB8 BL 0x339FCE8
	0x0217AABC MOV X0, X22
	0x0217AAC0 LDP X20, X19, [X31 + 0x20]
	0x0217AAC4 LDP X22, X21, [X31 + 0x10]
	0x0217AAC8 LDP X30, X23, [X31], #0x30
	0x0217AACC RET
	0x0217AAD0 BL 0x1C16F20
	0x0217AAD4 BL 0x1C16F28
	0x0217AAD8 STR X30, [X31 - 0x30]!
	0x0217AADC STP X22, X21, [X31 + 0x10]
	0x0217AAE0 STP X20, X19, [X31 + 0x20]
	0x0217AAE4 LDR X8, [X2 + 0x38]
	0x0217AAE8 MOV X22, X2
	0x0217AAEC MOV X19, X1
	0x0217AAF0 MOV X20, X0
	0x0217AAF4 CBNZ X8, 0x217AB00
	0x0217AAF8 MOV X0, X22
	0x0217AAFC BL 0x1C5C6E0
	0x0217AB00 CMP X20, 0x0
	0x0217AB04 CSET W21, NE
	0x0217AB08 CBZ X19, 0x217AB14
	0x0217AB0C LDR W8, [X19 + 0x18]
	0x0217AB10 ADD W21, W8, W21
	0x0217AB14 CBZ W21, 0x217AB58
	0x0217AB18 LDR X8, [X22 + 0x38]
	0x0217AB1C LDR X0, [X8 + 0x10]
	0x0217AB20 LDRB W8, [X0 + 0x135]
	0x0217AB24 TBNZ X8, 0x0, 0x217AB2C
	0x0217AB28 BL 0x1C5C684
	0x0217AB2C MOV W1, W21
	0x0217AB30 BL 0x1C16D6C
	0x0217AB34 MOV X21, X0
	0x0217AB38 CBZ X20, 0x217AB60
	0x0217AB3C CBZ X21, 0x217AB94
	0x0217AB40 LDR W8, [X21 + 0x18]
	0x0217AB44 CBZ W8, 0x217AB98
	0x0217AB48 MOVZ W3, 0x1
	0x0217AB4C STR X20, [X21 + 0x20]
	0x0217AB50 CBNZ X19, 0x217AB68
	0x0217AB54 B 0x217AB80
	0x0217AB58 MOV X21, X31
	0x0217AB5C B 0x217AB80
	0x0217AB60 MOV W3, W31
	0x0217AB64 CBZ X19, 0x217AB80
	0x0217AB68 LDR W4, [X19 + 0x18]
	0x0217AB6C MOV X0, X19
	0x0217AB70 MOV W1, W31
	0x0217AB74 MOV X2, X21
	0x0217AB78 MOV X5, X31
	0x0217AB7C BL 0x339FCE8
	0x0217AB80 MOV X0, X21
	0x0217AB84 LDP X20, X19, [X31 + 0x20]
	0x0217AB88 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Add X29, X31, 0
	012 Subtract X31, X31, 32
	013 NotImplemented "Instruction MRS not yet implemented."
	014 Move X8, [X26+40]
	015 Move X19, X4
	016 Move W25, W3
	017 Move W24, W2
	018 Move [X29-8], X8
	019 Move X8, [X4+56]
	020 Move X20, X1
	021 Move X21, X0
	022 Compare X8, 0
	023 JumpIfNotEqual {27}
	024 Move X0, X19
	025 Call 0x1C5D6E0
	026 Move X8, [X19+56]
	027 Move X8, [X8+16]
	028 Move W22, [X8+252]
	029 Add X8, X31, 0
	030 Add X9, X22, 15
	031 And X9, X9, 0x1FFFFFFFF
	032 Subtract X23, X8, X9
	033 Add X31, X23, 0
	034 Compare X21, 0
	035 JumpIfEqual {80}
	036 Move TEMP, X25
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfNotEqual {42}
	040 Move W8, [X21+24]
	041 Subtract W25, W8, W24
	042 Add W8, W25, W24
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X24, W24
	045 Move X25, W8
	046 Move W8, [X21+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X21]
	049 Move X0, X23
	050 Move X2, X22
	051 Move W8, [X8+260]
	052 NotImplemented "Instruction NOP not yet implemented."
	053 NotImplemented "Instruction MADD not yet implemented."
	054 Add X1, X8, 32
	055 Call 0x3EB2AC0
	056 Compare X20, 0
	057 JumpIfEqual {99}
	058 Move X8, [X19+56]
	059 Move X9, [X8+16]
	060 Move W10, [X9+40]
	061 Move X9, X23
	062 Move TEMP, X10
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {67}
	066 Move X9, [X23]
	067 Move X1, [X8+24]
	068 Subtract X3, X29, 24
	069 Subtract X4, X29, 12
	070 Move X2, X20
	071 Move X0, [X1]
	072 Move [X29-24], X9
	073 Move X8, [X1+16]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 NotImplemented "Instruction LDURB not yet implemented."
	076 Compare W8, 0
	077 JumpIfNotEqual {83}
	078 Add X24, X24, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move TEMP, 0
	081 Not TEMP
	082 Move W24, TEMP
	083 Move X8, [X26+40]
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W0, W24
	087 Add X31, X29, 0
	088 Move X20, [X31+64]
	089 Move X19, [X31+72]
	090 Move X22, [X31+48]
	091 Move X21, [X31+56]
	092 Move X24, [X31+32]
	093 Move X23, [X31+40]
	094 Move X26, [X31+16]
	095 Move X25, [X31+24]
	096 Move X29, [X31+80]
	097 Move X30, [X31+88]
	098 Return X0
	099 Call 0x1C17F20
	100 Call 0x1C17F28
	101 Call 0x3EB2B20

Method: System.Int32 IndexOfReference(TFirst[] array, TSecond value, System.Int32 count = -1)

Disassembly:
	0x0217AB8C LDR X30, [X31], #0x30
	0x0217AB90 RET
	0x0217AB94 BL 0x1C16F20
	0x0217AB98 BL 0x1C16F28
	0x0217AB9C STP X29, X30, [X31 - 0x30]!
	0x0217ABA0 STP X22, X21, [X31 + 0x10]
	0x0217ABA4 STP X20, X19, [X31 + 0x20]
	0x0217ABA8 SUB X31, X31, 0x440
	0x0217ABAC LDR X8, [X2 + 0x38]
	0x0217ABB0 MOV X22, X2
	0x0217ABB4 MOV X19, X1
	0x0217ABB8 MOV X21, X0
	0x0217ABBC CBZ X8, 0x217ABD8
	0x0217ABC0 CBZ X19, 0x217ABE4
	0x0217ABC4 LDR W8, [X19 + 0x18]
	0x0217ABC8 ADDS W20, W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+56]
	006 Move W19, W2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X3
	012 Call 0x1C5D6E0
	013 Move X1, X20
	014 Move W3, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X0, X21
	018 Move W2, W31
	019 Move X30, [X31+32]
	020 Move X21, [X31+40]
	021 Call 0x217AC24, X0, X1, X2, X3
	022 Return X0

Method: System.Int32 IndexOfReference(TFirst[] array, TSecond value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0217AC24 MOVZ W2, 0x220
	0x0217AC28 BL 0x3EB1AC0
	0x0217AC2C LDR W8, [X20 + 0x18]
	0x0217AC30 CBZ W8, 0x217AC80
	0x0217AC34 ADD X0, X20, 0x20
	0x0217AC38 ADD X1, X31, 0x0
	0x0217AC3C MOVZ W2, 0x220
	0x0217AC40 BL 0x3EB1AC0
	0x0217AC44 CBZ X19, 0x217AC64
	0x0217AC48 LDR W4, [X19 + 0x18]
	0x0217AC4C MOVZ W3, 0x1
	0x0217AC50 MOV X0, X19
	0x0217AC54 MOV W1, W31
	0x0217AC58 MOV X2, X20
	0x0217AC5C MOV X5, X31
	0x0217AC60 BL 0x339FCE8
	0x0217AC64 MOV X0, X20
	0x0217AC68 ADD X31, X31, 0x440
	0x0217AC6C LDP X20, X19, [X31 + 0x20]
	0x0217AC70 LDP X22, X21, [X31 + 0x10]
	0x0217AC74 LDP X29, X30, [X31], #0x30
	0x0217AC78 RET
	0x0217AC7C BL 0x1C16F20
	0x0217AC80 BL 0x1C16F28
	0x0217AC84 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {21}
	004 Move TEMP, X3
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfNotEqual {10}
	008 Move W8, [X0+24]
	009 Subtract W3, W8, W2
	010 Add W8, W3, W2
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, [X0+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSEL not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X9, X0, W2
	017 Move X9, [X9+32]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Subtract W3, W3, 1
	020 Add W2, W2, 1
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W2, TEMP
	024 Move W0, W2
	025 Move X30, [X31+16]
	026 Return X0
	027 Call 0x1C17F28

Method: System.Int32 IndexOfValue(TValue[] array, TValue value, System.Int32 startIndex = 0, System.Int32 count = -1)

Disassembly:
	0x0217ADA4 LDR W8, [X0 + 0x18]
	0x0217ADA8 MOV X21, X0
	0x0217ADAC CBZ W8, 0x217ADEC
	0x0217ADB0 STR X20, [X21 + 0x20]
	0x0217ADB4 CBZ X19, 0x217ADD4
	0x0217ADB8 LDR W4, [X19 + 0x18]
	0x0217ADBC MOVZ W3, 0x1
	0x0217ADC0 MOV X0, X19
	0x0217ADC4 MOV W1, W31
	0x0217ADC8 MOV X2, X21
	0x0217ADCC MOV X5, X31
	0x0217ADD0 BL 0x339FCE8
	0x0217ADD4 MOV X0, X21
	0x0217ADD8 LDP X20, X19, [X31 + 0x20]
	0x0217ADDC LDP X22, X21, [X31 + 0x10]
	0x0217ADE0 LDR X30, [X31], #0x30
	0x0217ADE4 RET
	0x0217ADE8 BL 0x1C16F20
	0x0217ADEC BL 0x1C16F28
	0x0217ADF0 STP X29, X30, [X31 - 0x60]!
	0x0217ADF4 STR X27, [X31 + 0x10]
	0x0217ADF8 STP X26, X25, [X31 + 0x20]
	0x0217ADFC STP X24, X23, [X31 + 0x30]
	0x0217AE00 STP X22, X21, [X31 + 0x40]
	0x0217AE04 STP X20, X19, [X31 + 0x50]
	0x0217AE08 ADD X29, X31, 0x0
	0x0217AE0C SUB X31, X31, 0x10
	0x0217AE10 MRS X25, 0xC000
	0x0217AE14 LDR X8, [X25 + 0x28]
	0x0217AE18 MOV X20, X2
	0x0217AE1C MOV X21, X0
	0x0217AE20 MOV X19, X1
	0x0217AE24 STUR X8, [X29 - 0x8]
	0x0217AE28 STUR X0, [X29 - 0x10]
	0x0217AE2C LDR X23, [X2 + 0x38]
	0x0217AE30 CBNZ X23, 0x217AE40
	0x0217AE34 MOV X0, X20
	0x0217AE38 BL 0x1C5C6E0
	0x0217AE3C LDR X23, [X20 + 0x38]
	0x0217AE40 LDR X8, [X23]
	0x0217AE44 ADD X9, X31, 0x0
	0x0217AE48 LDR W22, [X8 + 0xFC]
	0x0217AE4C ADD X10, X22, 0xF
	0x0217AE50 AND X10, X10, 0x1FFFFFFFF
	0x0217AE54 SUB X24, X9, X10
	0x0217AE58 ADD X31, X24, 0x0
	0x0217AE5C LDR W8, [X8 + 0x28]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X31], X1
	009 Move [X31+8], X2
	010 Move X8, [X5+56]
	011 Move X20, X5
	012 Move W22, W4
	013 Move W19, W3
	014 Move X21, X0
	015 Compare X8, 0
	016 JumpIfEqual {19}
	017 Compare X21, 0
	018 JumpIfNotEqual {23}
	019 Move X0, X20
	020 Call 0x1C5D6E0
	021 Compare X21, 0
	022 JumpIfEqual {50}
	023 Move TEMP, X22
	024 And TEMP, TEMP, -2147483648
	025 Compare TEMP, -2147483648
	026 JumpIfNotEqual {29}
	027 Move W8, [X21+24]
	028 Subtract W22, W8, W19
	029 Add W8, W22, W19
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X8, W8
	032 Add X9, X21, W19
	033 Add X22, X9, 40
	034 Subtract X23, X8, W19
	035 Move W8, [X21+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X20+56]
	038 Move X1, [X22-8]
	039 Move X2, [X22]
	040 Add X0, X31, 0
	041 Move X3, [X8+24]
	042 Call InternedString.Equals, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {53}
	047 Add W19, W19, 1
	048 Subtract X23, X23, 1
	049 Add X22, X22, 16
	050 Move TEMP, 0
	051 Not TEMP
	052 Move W19, TEMP
	053 Move W0, W19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X30, [X31+16]
	059 Move X23, [X31+24]
	060 Add X31, X31, 64
	061 Return X0
	062 Call 0x1C17F28

Method: System.Void Resize(ref Unity.Collections.NativeArray`1<TValue> array, System.Int32 newSize, Unity.Collections.Allocator allocator)

Disassembly:
	0x0217CF00 CMP W8, W9
	0x0217CF04 B.CS 0x217CF3C
	0x0217CF08 LDR X8, [X25 + 0x28]
	0x0217CF0C LDUR X9, [X29 - 0x8]
	0x0217CF10 CMP X8, X9
	0x0217CF14 B.NE 0x217CF40
	0x0217CF18 MOV X0, X24
	0x0217CF1C ADD X31, X29, 0x0
	0x0217CF20 LDP X20, X19, [X31 + 0x40]
	0x0217CF24 LDP X22, X21, [X31 + 0x30]
	0x0217CF28 LDP X24, X23, [X31 + 0x20]
	0x0217CF2C LDR X25, [X31 + 0x10]
	0x0217CF30 LDP X29, X30, [X31], #0x50
	0x0217CF34 RET
	0x0217CF38 BL 0x1C16F20
	0x0217CF3C BL 0x1C16F28
	0x0217CF40 BL 0x3EB1B20
	0x0217CF44 STR X30, [X31 - 0x40]!
	0x0217CF48 STP X24, X23, [X31 + 0x10]
	0x0217CF4C STP X22, X21, [X31 + 0x20]
	0x0217CF50 STP X20, X19, [X31 + 0x30]
	0x0217CF54 LDR X8, [X4 + 0x38]
	0x0217CF58 MOV X21, X4
	0x0217CF5C MOV X19, X3
	0x0217CF60 MOV X20, X2
	0x0217CF64 MOV W22, W1
	0x0217CF68 MOV X23, X0
	0x0217CF6C CBNZ X8, 0x217CF78
	0x0217CF70 MOV X0, X21
	0x0217CF74 BL 0x1C5C6E0
	0x0217CF78 STR X31, [X31 + 0x8]
	0x0217CF7C CBZ X23, 0x217D0B4
	0x0217CF80 LDR X8, [X21 + 0x38]
	0x0217CF84 ADD X2, X31, 0x8
	0x0217CF88 MOV X0, X23
	0x0217CF8C MOV W1, W22
	0x0217CF90 LDR X3, [X8 + 0x10]
	0x0217CF94 BL 0x2A150AC
	0x0217CF98 TBZ X0, 0x0, 0x217CFE4
	0x0217CF9C LDR X0, [X31 + 0x8]
	0x0217CFA0 CBZ X0, 0x217D0B4
	0x0217CFA4 LDR X9, [X21 + 0x38]
	0x0217CFA8 LDR W10, [X0 + 0x1C]
	0x0217CFAC LDR X8, [X0 + 0x10]
	0x0217CFB0 LDR X9, [X9 + 0x30]
	0x0217CFB4 ADD W10, W10, 0x1
	0x0217CFB8 STR W10, [X0 + 0x1C]
	0x0217CFBC CBZ X8, 0x217D0B4
	0x0217CFC0 LDRSW X10, [X0 + 0x18]
	0x0217CFC4 LDR W11, [X8 + 0x18]
	0x0217CFC8 CMP W10, W11
	0x0217CFCC B.CS 0x217D050
	0x0217CFD0 ADD W9, W10, 0x1
	0x0217CFD4 ADD X8, X8, X10, 0x4, LSL
	0x0217CFD8 STR W9, [X0 + 0x18]
	0x0217CFDC STP X20, X19, [X8 + 0x20]
	0x0217CFE0 B 0x217D0A0
	0x0217CFE4 LDR X8, [X21 + 0x38]
	0x0217CFE8 LDR X0, [X8 + 0x28]
	0x0217CFEC LDRB W8, [X0 + 0x135]
	0x0217CFF0 TBNZ X8, 0x0, 0x217CFF8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X3+56]
	009 Move X20, X3
	010 Move W22, W2
	011 Move W21, W1
	012 Move X19, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X20
	016 Call 0x1C5D6E0
	017 Move [X31], X31
	018 Move [X31+8], X31
	019 Move W23, [X19+8]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, [X20+56]
	022 Compare W21, 0
	023 JumpIfEqual {60}
	024 Move X4, [X8+48]
	025 Add X0, X31, 0
	026 Move W3, 1
	027 Move W1, W21
	028 Move W2, W22
	029 Call NativeArray`1<UInt64>..ctor, X0, X1, X2, X3
	030 Compare W23, 0
	031 JumpIfEqual {58}
	032 Move X8, [X20+56]
	033 Move X0, [X31]
	034 Move X1, [X31+8]
	035 Move X2, [X8+56]
	036 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	037 Move X9, [X20+56]
	038 Move X8, [X19]
	039 Move X1, [X19+8]
	040 Move X22, X0
	041 Move X2, [X9+64]
	042 Move X0, X8
	043 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move W8, W8
	047 ShiftRight W8, 29
	048 And W8, W8, 0xFFFFFFF
	049 Move X1, X0
	050 Move X2, W8
	051 Move X0, X22
	052 Move X3, X31
	053 Call UnsafeUtility.MemCpy, X0, X1, X2
	054 Move X8, [X20+56]
	055 Move X0, X19
	056 Move X1, [X8+32]
	057 Call NativeArray`1<UInt64>.Dispose, X0
	058 Move V0, [X31]
	059 Move [X19], V0
	060 Move X9, [X19]
	061 Compare X9, 0
	062 JumpIfEqual {66}
	063 Move X1, [X8+32]
	064 Move X0, X19
	065 Call NativeArray`1<UInt64>.Dispose, X0
	066 Move [X19], X31
	067 Move [X19+8], X31
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X30, [X31+16]
	073 Move X23, [X31+24]
	074 Add X31, X31, 64
	075 Return 

Method: System.Int32 Append(ref TValue[] array, TValue value)

Disassembly:
	0x02173824 LDR V0, [X31 + 0x4]
	0x02173828 LDR X8, [X31 + 0x50]
	0x0217382C STR V0, [X31 + 0x2]
	0x02173830 STR X8, [X31 + 0x30]
	0x02173834 LDR W8, [X0 + 0x18]
	0x02173838 CBZ W8, 0x2173868
	0x0217383C LDR X8, [X31 + 0x30]
	0x02173840 LDR V0, [X31 + 0x2]
	0x02173844 MOV W21, W31
	0x02173848 STR X8, [X0 + 0x30]
	0x0217384C STR V0, [X0 + 0x2]
	0x02173850 MOV W0, W21
	0x02173854 LDP X20, X19, [X31 + 0x70]
	0x02173858 LDP X30, X21, [X31 + 0x60]
	0x0217385C ADD X31, X31, 0x80
	0x02173860 RET
	0x02173864 BL 0x1C16F20
	0x02173868 BL 0x1C16F28
	0x0217386C STR X30, [X31 - 0x30]!
	0x02173870 STP X22, X21, [X31 + 0x10]
	0x02173874 STP X20, X19, [X31 + 0x20]
	0x02173878 LDR X8, [X3 + 0x38]
	0x0217387C MOV X22, X3
	0x02173880 MOV X19, X2
	0x02173884 MOV X20, X1
	0x02173888 MOV X21, X0
	0x0217388C CBNZ X8, 0x2173898
	0x02173890 MOV X0, X22
	0x02173894 BL 0x1C5C6E0
	0x02173898 LDR X8, [X21]
	0x0217389C CBZ X8, 0x21738DC
	0x021738A0 LDR X9, [X22 + 0x38]
	0x021738A4 LDR X22, [X8 + 0x18]
	0x021738A8 MOV X0, X21
	0x021738AC LDR X2, [X9 + 0x18]
	0x021738B0 ADD W1, W22, 0x1
	0x021738B4 BL 0x21464DC
	0x021738B8 LDR X8, [X21]
	0x021738BC CBZ X8, 0x2173924
	0x021738C0 LDR W9, [X8 + 0x18]
	0x021738C4 CMP W22, W9
	0x021738C8 B.CS 0x2173928
	0x021738CC SXTW X9, W22
	0x021738D0 ADD X8, X8, X9, 0x4, LSL
	0x021738D4 STP X20, X19, [X8 + 0x20]
	0x021738D8 B 0x2173910
	0x021738DC LDR X8, [X22 + 0x38]
	0x021738E0 LDR X0, [X8 + 0x8]
	0x021738E4 LDRB W8, [X0 + 0x135]
	0x021738E8 TBNZ X8, 0x0, 0x21738F0
	0x021738EC BL 0x1C5C684
	0x021738F0 MOVZ W1, 0x1
	0x021738F4 BL 0x1C16D6C
	0x021738F8 STR X0, [X21]
	0x021738FC CBZ X0, 0x2173924
	0x02173900 LDR W8, [X0 + 0x18]
	0x02173904 CBZ W8, 0x2173928
	0x02173908 MOV W22, W31
	0x0217390C STP X20, X19, [X0 + 0x20]
	0x02173910 MOV W0, W22
	0x02173914 LDP X20, X19, [X31 + 0x20]
	0x02173918 LDP X22, X21, [X31 + 0x10]
	0x0217391C LDR X30, [X31], #0x30
	0x02173920 RET
	0x02173924 BL 0x1C16F20
	0x02173928 BL 0x1C16F28
	0x0217392C STR X30, [X31 - 0x60]!
	0x02173930 STP X28, X27, [X31 + 0x10]
	0x02173934 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move X8, [X2+56]
	007 Move X21, X2
	008 Move X19, X1
	009 Move X20, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X21
	013 Call 0x1C5D6E0
	014 Move X8, [X20]
	015 Compare X8, 0
	016 JumpIfEqual {42}
	017 Move X9, [X21+56]
	018 Move X21, [X8+24]
	019 Move X0, X20
	020 Move X2, [X9+24]
	021 Add W1, W21, 1
	022 Call Array.Resize, X0, X1
	023 Move X8, [X20]
	024 Move X9, [X19+16]
	025 Move V0, [X19]
	026 Move [X31+80], X9
	027 Move [X31+4], V0
	028 Compare X8, 0
	029 JumpIfEqual {78}
	030 Move V0, [X31+4]
	031 Move X9, [X31+80]
	032 Move [X31], V0
	033 Move [X31+16], X9
	034 Move W9, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X9, [X31+16]
	037 Move V0, [X31]
	038 Move W10, 24
	039 NotImplemented "Instruction SMADDL not yet implemented."
	040 Move [X8+48], X9
	041 Move [X8+2], V0
	042 Move X8, [X21+56]
	043 Move X0, [X8+8]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move W1, 1
	051 Call 0x1C17D6C
	052 Move [X20], X0
	053 Move X8, [X19+16]
	054 Move V0, [X19]
	055 Move [X31+80], X8
	056 Move [X31+4], V0
	057 Compare X0, 0
	058 JumpIfEqual {78}
	059 Move V0, [X31+4]
	060 Move X8, [X31+80]
	061 Move [X31+2], V0
	062 Move [X31+48], X8
	063 Move W8, [X0+24]
	064 Compare W8, 0
	065 JumpIfEqual {79}
	066 Move X8, [X31+48]
	067 Move V0, [X31+2]
	068 Move W21, W31
	069 Move [X0+48], X8
	070 Move [X0+2], V0
	071 Move W0, W21
	072 Move X20, [X31+112]
	073 Move X19, [X31+120]
	074 Move X30, [X31+96]
	075 Move X21, [X31+104]
	076 Add X31, X31, 128
	077 Return X0
	078 Call 0x1C17F20
	079 Call 0x1C17F28

Method: System.Int32 Append(ref TValue[] array, System.Collections.Generic.IEnumerable`1<TValue> values)

Disassembly:
	0x0217402C ADRP X8, 0x1F7F000
	0x02174030 LDR X8, [X8 + 0x5A8]
	0x02174034 LDR X0, [X8]
	0x02174038 LDR W8, [X0 + 0xE0]
	0x0217403C CBNZ W8, 0x2174044
	0x02174040 BL 0x1C16DFC
	0x02174044 MOV W0, W21
	0x02174048 MOV W1, W26
	0x0217404C MOV X2, X31
	0x02174050 BL 0x337EDF0
	0x02174054 LDR X8, [X20 + 0x38]
	0x02174058 MOV W26, W0
	0x0217405C LDR X8, [X8 + 0x20]
	0x02174060 LDRB W9, [X8 + 0x135]
	0x02174064 TBNZ X9, 0x0, 0x2174074
	0x02174068 MOV X0, X8
	0x0217406C BL 0x1C5C684
	0x02174070 MOV X8, X0
	0x02174074 MOV X0, X8
	0x02174078 MOV W1, W26
	0x0217407C BL 0x1C16D6C
	0x02174080 LDUR X8, [X29 - 0x30]
	0x02174084 CMP W21, 0x1
	0x02174088 STR X0, [X8]
	0x0217408C B.LT 0x217415C
	0x02174090 MOV X26, X0
	0x02174094 STP X21, X19, [X29 - 0x48]
	0x02174098 MOV X27, X31
	0x0217409C SUB X28, X21, 0x1
	0x021740A0 SUB X19, X29, 0x28
	0x021740A4 SUB X21, X29, 0xC
	0x021740A8 LDR X8, [X20 + 0x38]
	0x021740AC LDR X0, [X8]
	0x021740B0 LDRB W9, [X0 + 0x135]
	0x021740B4 TBNZ X9, 0x0, 0x21740C0
	0x021740B8 BL 0x1C5C684
	0x021740BC LDR X8, [X20 + 0x38]
	0x021740C0 LDR X9, [X8]
	0x021740C4 LDUR X10, [X29 - 0x28]
	0x021740C8 LDR X1, [X8 + 0x30]
	0x021740CC SUB X4, X29, 0x20
	0x021740D0 LDR W9, [X9 + 0x28]
	0x021740D4 MOV X2, X25
	0x021740D8 MOV X5, X23
	0x021740DC STUR W27, [X29 - 0xC]
	0x021740E0 CMP W9, 0x0
	0x021740E4 CSEL X3, X10, X19, LT
	0x021740E8 STP X21, X23, [X29 - 0x20]
	0x021740EC BL 0x1C17728
	0x021740F0 CBZ X26, 0x21741A4
	0x021740F4 LDR W22, [X26 + 0x18]
	0x021740F8 CMP X27, X22
	0x021740FC B.CS 0x21741A0
	0x02174100 LDR X8, [X26]
	0x02174104 LDUR X2, [X29 - 0x38]
	0x02174108 MOV X1, X23
	0x0217410C LDR W8, [X8 + 0x104]
	0x02174110 NOP
	0x02174114 MADD X8, X27, X8, X26
	0x02174118 ADD X0, X8, 0x20
	0x0217411C BL 0x3EB1AC0
	0x02174120 LDR X8, [X20 + 0x38]
	0x02174124 LDR X0, [X8 + 0x38]
	0x02174128 LDRB W8, [X0 + 0x135]
	0x0217412C TBNZ X8, 0x0, 0x2174138
	0x02174130 BL 0x1C5C684
	0x02174134 LDR W22, [X26 + 0x18]
	0x02174138 CMP X27, X22
	0x0217413C B.CS 0x21741A0
	0x02174140 CMP X28, X27
	0x02174144 B.EQ 0x2174158
	0x02174148 LDUR X8, [X29 - 0x30]
	0x0217414C ADD X27, X27, 0x1
	0x02174150 LDR X26, [X8]
	0x02174154 B 0x21740A8
	0x02174158 LDP X21, X19, [X29 - 0x48]
	0x0217415C MOV W25, W31
	0x02174160 LDR W8, [X24]
	0x02174164 ADD W8, W8, W21
	0x02174168 STR W8, [X24]
	0x0217416C LDR X8, [X19 + 0x28]
	0x02174170 LDUR X9, [X29 - 0x8]
	0x02174174 CMP X8, X9
	0x02174178 B.NE 0x21741A8
	0x0217417C MOV W0, W25
	0x02174180 ADD X31, X29, 0x0
	0x02174184 LDP X20, X19, [X31 + 0x50]
	0x02174188 LDP X22, X21, [X31 + 0x40]
	0x0217418C LDP X24, X23, [X31 + 0x30]
	0x02174190 LDP X26, X25, [X31 + 0x20]
	0x02174194 LDP X28, X27, [X31 + 0x10]
	0x02174198 LDP X29, X30, [X31], #0x60
	0x0217419C RET
	0x021741A0 BL 0x1C16F28
	0x021741A4 BL 0x1C16F20
	0x021741A8 BL 0x3EB1B20
	0x021741AC STR X30, [X31 - 0x30]!
	0x021741B0 STP X22, X21, [X31 + 0x10]
	0x021741B4 STP X20, X19, [X31 + 0x20]
	0x021741B8 LDR X8, [X2 + 0x38]
	0x021741BC MOV X21, X2
	0x021741C0 MOV X19, X1
	0x021741C4 MOV X20, X0
	0x021741C8 CBNZ X8, 0x21741D4
	0x021741CC MOV X0, X21
	0x021741D0 BL 0x1C5C6E0
	0x021741D4 LDR X8, [X20]
	0x021741D8 CBZ X8, 0x2174220
	0x021741DC CBZ X19, 0x217422C
	0x021741E0 LDR X22, [X19 + 0x18]
	0x021741E4 CBZ X22, 0x217422C
	0x021741E8 LDR X9, [X21 + 0x38]
	0x021741EC LDR W21, [X8 + 0x18]
	0x021741F0 MOV X0, X20
	0x021741F4 LDR X2, [X9 + 0x10]
	0x021741F8 ADD W1, W21, W22
	0x021741FC BL 0x21164AC
	0x02174200 LDR X2, [X20]
	0x02174204 MOV X0, X19
	0x02174208 MOV W1, W31
	0x0217420C MOV W3, W21
	0x02174210 MOV W4, W22
	0x02174214 MOV X5, X31
	0x02174218 BL 0x339FCE8
	0x0217421C B 0x2174230
	0x02174220 MOV W21, W31
	0x02174224 STR X19, [X20]
	0x02174228 B 0x2174230
	0x0217422C LDR W21, [X8 + 0x18]
	0x02174230 MOV W0, W21
	0x02174234 LDP X20, X19, [X31 + 0x20]
	0x02174238 LDP X22, X21, [X31 + 0x10]
	0x0217423C LDR X30, [X31], #0x30
	0x02174240 RET
	0x02174244 STR X30, [X31 - 0x30]!
	0x02174248 STP X22, X21, [X31 + 0x10]
	0x0217424C STP X20, X19, [X31 + 0x20]
	0x02174250 LDR X8, [X2 + 0x38]
	0x02174254 MOV X21, X2
	0x02174258 MOV X19, X1
	0x0217425C MOV X20, X0
	0x02174260 CBNZ X8, 0x217426C
	0x02174264 MOV X0, X21
	0x02174268 BL 0x1C5C6E0
	0x0217426C LDR X8, [X20]
	0x02174270 CBZ X8, 0x21742BC
	0x02174274 CBZ X19, 0x21742C8
	0x02174278 LDR X22, [X19 + 0x18]
	0x0217427C CBZ X22, 0x21742C8
	0x02174280 LDR X9, [X21 + 0x38]
	0x02174284 LDR W21, [X8 + 0x18]
	0x02174288 MOV X0, X20
	0x0217428C LDR X2, [X9 + 0x10]
	0x02174290 ADD W1, W21, W22
	0x02174294 LDR X8, [X2]
	0x02174298 BLR X8
	0x0217429C LDR X2, [X20]
	0x021742A0 MOV X0, X19
	0x021742A4 MOV W1, W31
	0x021742A8 MOV W3, W21
	0x021742AC MOV W4, W22
	0x021742B0 MOV X5, X31
	0x021742B4 BL 0x339FCE8
	0x021742B8 B 0x21742CC
	0x021742BC MOV W21, W31
	0x021742C0 STR X19, [X20]
	0x021742C4 B 0x21742CC
	0x021742C8 LDR W21, [X8 + 0x18]
	0x021742CC MOV W0, W21
	0x021742D0 LDP X20, X19, [X31 + 0x20]
	0x021742D4 LDP X22, X21, [X31 + 0x10]
	0x021742D8 LDR X30, [X31], #0x30
	0x021742DC RET
	0x021742E0 STP X30, X23, [X31 - 0x30]!
	0x021742E4 STP X22, X21, [X31 + 0x10]
	0x021742E8 STP X20, X19, [X31 + 0x20]
	0x021742EC LDR X8, [X4 + 0x38]
	0x021742F0 MOV X23, X4
	0x021742F4 MOV W22, W3
	0x021742F8 MOV X20, X2
	0x021742FC MOV X19, X1
	0x02174300 MOV X21, X0
	0x02174304 CBNZ X8, 0x2174310
	0x02174308 MOV X0, X23
	0x0217430C BL 0x1C5C6E0
	0x02174310 LDR X8, [X21]
	0x02174314 CBZ X8, 0x217435C
	0x02174318 LDR W9, [X8 + 0x18]
	0x0217431C LDR W0, [X19]
	0x02174320 CMP W0, W9
	0x02174324 B.NE 0x2174348
	0x02174328 LDR X8, [X23 + 0x38]
	0x0217432C ADD W1, W9, W22
	0x02174330 MOV X0, X21
	0x02174334 LDR X2, [X8 + 0x18]
	0x02174338 BL 0x2112E3C
	0x0217433C LDR X8, [X21]
	0x02174340 CBZ X8, 0x21743B4
	0x02174344 LDR W0, [X19]
	0x02174348 LDR W9, [X8 + 0x18]
	0x0217434C CMP W0, W9
	0x02174350 B.CS 0x21743B0
	0x02174354 ADD X8, X8, W0, 0x3, SXTW
	0x02174358 B 0x2174390
	0x0217435C LDR X8, [X23 + 0x38]
	0x02174360 LDR X0, [X8 + 0x8]
	0x02174364 LDRB W8, [X0 + 0x135]
	0x02174368 TBNZ X8, 0x0, 0x2174370
	0x0217436C BL 0x1C5C684
	0x02174370 MOV W1, W22
	0x02174374 BL 0x1C16D6C
	0x02174378 STR X0, [X21]
	0x0217437C CBZ X0, 0x21743B4
	0x02174380 LDR W9, [X0 + 0x18]
	0x02174384 MOV X8, X0
	0x02174388 CBZ W9, 0x21743B0
	0x0217438C MOV W0, W31
	0x02174390 STR X20, [X8 + 0x20]!
	0x02174394 LDR W8, [X19]
	0x02174398 LDP X22, X21, [X31 + 0x10]
	0x0217439C ADD W8, W8, 0x1
	0x021743A0 STR W8, [X19]
	0x021743A4 LDP X20, X19, [X31 + 0x20]
	0x021743A8 LDP X30, X23, [X31], #0x30
	0x021743AC RET
	0x021743B0 BL 0x1C16F28
	0x021743B4 BL 0x1C16F20
	0x021743B8 STP X30, X23, [X31 - 0x30]!
	0x021743BC STP X22, X21, [X31 + 0x10]
	0x021743C0 STP X20, X19, [X31 + 0x20]
	0x021743C4 LDR X8, [X4 + 0x38]
	0x021743C8 MOV X23, X4
	0x021743CC MOV W22, W3
	0x021743D0 MOV X20, X2
	0x021743D4 MOV X19, X1
	0x021743D8 MOV X21, X0
	0x021743DC CBNZ X8, 0x21743E8
	0x021743E0 MOV X0, X23
	0x021743E4 BL 0x1C5C6E0
	0x021743E8 LDR X8, [X21]
	0x021743EC CBZ X8, 0x2174434
	0x021743F0 LDR W9, [X8 + 0x18]
	0x021743F4 LDR W0, [X19]
	0x021743F8 CMP W0, W9
	0x021743FC B.NE 0x2174420
	0x02174400 LDR X8, [X23 + 0x38]
	0x02174404 ADD W1, W9, W22
	0x02174408 MOV X0, X21
	0x0217440C LDR X2, [X8 + 0x18]
	0x02174410 BL 0x2115A34
	0x02174414 LDR X8, [X21]
	0x02174418 CBZ X8, 0x217448C
	0x0217441C LDR W0, [X19]
	0x02174420 LDR W9, [X8 + 0x18]
	0x02174424 CMP W0, W9
	0x02174428 B.CS 0x2174488
	0x0217442C ADD X8, X8, W0, 0x3, SXTW
	0x02174430 B 0x2174468
	0x02174434 LDR X8, [X23 + 0x38]
	0x02174438 LDR X0, [X8 + 0x8]
	0x0217443C LDRB W8, [X0 + 0x135]
	0x02174440 TBNZ X8, 0x0, 0x2174448
	0x02174444 BL 0x1C5C684
	0x02174448 MOV W1, W22
	0x0217444C BL 0x1C16D6C
	0x02174450 STR X0, [X21]
	0x02174454 CBZ X0, 0x217448C
	0x02174458 LDR W9, [X0 + 0x18]
	0x0217445C MOV X8, X0
	0x02174460 CBZ W9, 0x2174488
	0x02174464 MOV W0, W31
	0x02174468 STR X20, [X8 + 0x20]!
	0x0217446C LDR W8, [X19]
	0x02174470 LDP X22, X21, [X31 + 0x10]
	0x02174474 ADD W8, W8, 0x1
	0x02174478 STR W8, [X19]
	0x0217447C LDP X20, X19, [X31 + 0x20]
	0x02174480 LDP X30, X23, [X31], #0x30
	0x02174484 RET
	0x02174488 BL 0x1C16F28
	0x0217448C BL 0x1C16F20
	0x02174490 STP X30, X23, [X31 - 0x30]!
	0x02174494 STP X22, X21, [X31 + 0x10]
	0x02174498 STP X20, X19, [X31 + 0x20]
	0x0217449C LDR X8, [X4 + 0x38]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 32
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X27+40]
	017 Move X22, X2
	018 Move X20, X1
	019 Move X21, X0
	020 Move [X29-8], X8
	021 Move X19, [X2+56]
	022 Compare X19, 0
	023 JumpIfNotEqual {36}
	024 Move X0, 0x1F80000
	025 Move X0, [X0+3584]
	026 Call 0x1C17CF4
	027 Move X0, 0x1F80000
	028 Move X0, [X0+3608]
	029 Call 0x1C17CF4
	030 Move X19, [X22+56]
	031 Compare X19, 0
	032 JumpIfNotEqual {36}
	033 Move X0, X22
	034 Call 0x1C5D6E0
	035 Move X19, [X22+56]
	036 Move X8, [X19+72]
	037 Move W23, [X8+252]
	038 Add X8, X31, 0
	039 Add X9, X23, 15
	040 And X9, X9, 0x1FFFFFFFF
	041 Subtract X24, X8, X9
	042 Add X31, X24, 0
	043 Add X8, X31, 0
	044 Subtract X25, X8, X9
	045 Add X31, X25, 0
	046 Add X8, X31, 0
	047 Subtract X26, X8, X9
	048 Add X31, X26, 0
	049 Move X0, X26
	050 Move W1, W31
	051 Move X2, X23
	052 Call 0x3EB2B10
	053 Move X8, [X21]
	054 Compare X8, 0
	055 JumpIfEqual {92}
	056 Move X1, [X19+32]
	057 Move W19, [X8+24]
	058 Move X0, X20
	059 Move X8, [X1]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X8, [X22+56]
	062 Add W1, W0, W19
	063 Move X0, X21
	064 Move X2, [X8+40]
	065 Move X8, [X2]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Compare X20, 0
	068 JumpIfEqual {257}
	069 Move X8, [X22+56]
	070 Move X1, [X8+8]
	071 Move W8, [X1+309]
	072 Move TEMP, X8
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {79}
	076 Move X0, X1
	077 Call 0x1C5D684
	078 Move X1, X0
	079 Move X8, [X20]
	080 NotImplemented "Instruction LDRH not yet implemented."
	081 Compare X9, 0
	082 JumpIfEqual {89}
	083 Move X10, [X8+176]
	084 Add X10, X10, 8
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Subtract X9, X9, 1
	088 Add X10, X10, 16
	089 Move X0, X20
	090 Move W2, W31
	091 Call 0x1C5D788
	092 Move X1, [X19+16]
	093 Move X0, X20
	094 Move X8, [X1]
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Move W19, W31
	097 Move [X21], X0
	098 NotImplemented "Instruction LDRSW not yet implemented."
	099 Add X8, X8, X9
	100 Add X0, X8, 312
	101 Move X8, [X0]
	102 Move X1, [X0+8]
	103 Move X0, X20
	104 Move [X29-20], W19
	105 Move [X29-32], X27
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move X20, X0
	108 Compare X0, 0
	109 JumpIfEqual {258}
	110 Move X28, 0x1F80000
	111 Move X28, [X28+3608]
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 Move X8, [X20]
	114 Move X1, [X28]
	115 NotImplemented "Instruction LDRH not yet implemented."
	116 Compare X9, 0
	117 JumpIfEqual {124}
	118 Move X10, [X8+176]
	119 Add X10, X10, 8
	120 NotImplemented "Instruction LDUR not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Subtract X9, X9, 1
	123 Add X10, X10, 16
	124 Move X0, X20
	125 Move W2, W31
	126 Call 0x1C5D788
	127 NotImplemented "Instruction LDRSW not yet implemented."
	128 Add X8, X8, X9
	129 Add X0, X8, 312
	130 Move X8, [X0]
	131 Move X1, [X0+8]
	132 Move X0, X20
	133 NotImplemented "Instruction BLR not yet implemented."
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {207}
	138 Move X8, [X22+56]
	139 Move X1, [X8+56]
	140 Move W8, [X1+309]
	141 Move TEMP, X8
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfEqual {148}
	145 Move X0, X1
	146 Call 0x1C5D684
	147 Move X1, X0
	148 Move X8, [X20]
	149 NotImplemented "Instruction LDRH not yet implemented."
	150 Compare X9, 0
	151 JumpIfEqual {158}
	152 Move X10, [X8+176]
	153 Add X10, X10, 8
	154 NotImplemented "Instruction LDUR not yet implemented."
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Subtract X9, X9, 1
	157 Add X10, X10, 16
	158 Move X0, X20
	159 Move W2, W31
	160 Call 0x1C5D788
	161 NotImplemented "Instruction LDRSW not yet implemented."
	162 Add X8, X8, X9
	163 Add X0, X8, 312
	164 Move [X29-16], X24
	165 Move X1, [X0+8]
	166 Move X0, [X1+8]
	167 Move X8, [X1+16]
	168 Subtract X3, X29, 16
	169 Move X2, X20
	170 Move X4, X24
	171 NotImplemented "Instruction BLR not yet implemented."
	172 Move X0, X26
	173 Move X1, X24
	174 Move X2, X23
	175 Call 0x3EB2AC0
	176 Move X19, [X21]
	177 Move X0, X25
	178 Move X1, X26
	179 Move X2, X23
	180 Call 0x3EB2AC0
	181 Compare X19, 0
	182 JumpIfEqual {256}
	183 Move W8, [X19+24]
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X8, [X19]
	186 Move X9, W27
	187 Move X1, X25
	188 Move X2, X23
	189 Move W8, [X8+260]
	190 NotImplemented "Instruction NOP not yet implemented."
	191 NotImplemented "Instruction MADD not yet implemented."
	192 Add X0, X8, 32
	193 Call 0x3EB2AC0
	194 Move X8, [X22+56]
	195 Move X0, [X8+72]
	196 Move W8, [X0+309]
	197 Move TEMP, X8
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfEqual {202}
	201 Call 0x1C5D684
	202 Move W8, [X19+24]
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Add W8, W27, 1
	205 Move W27, W8
	206 Call 0x1C17F28
	207 NotImplemented "Instruction LDUR not yet implemented."
	208 NotImplemented "Instruction LDUR not yet implemented."
	209 Move X21, X31
	210 Compare X20, 0
	211 JumpIfEqual {235}
	212 Move X10, 0x1F80000
	213 Move X8, [X20]
	214 Move X10, [X10+3584]
	215 NotImplemented "Instruction LDRH not yet implemented."
	216 Move X1, [X10]
	217 Compare X9, 0
	218 JumpIfEqual {225}
	219 Move X10, [X8+176]
	220 Add X10, X10, 8
	221 NotImplemented "Instruction LDUR not yet implemented."
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Subtract X9, X9, 1
	224 Add X10, X10, 16
	225 Move X0, X20
	226 Move W2, W31
	227 Call 0x1C5D788
	228 NotImplemented "Instruction LDRSW not yet implemented."
	229 Add X8, X8, X9
	230 Add X0, X8, 312
	231 Move X8, [X0]
	232 Move X1, [X0+8]
	233 Move X0, X20
	234 NotImplemented "Instruction BLR not yet implemented."
	235 Compare X21, 0
	236 JumpIfNotEqual {259}
	237 Move X8, [X27+40]
	238 NotImplemented "Instruction LDUR not yet implemented."
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move W0, W19
	241 Add X31, X29, 0
	242 Move X20, [X31+80]
	243 Move X19, [X31+88]
	244 Move X22, [X31+64]
	245 Move X21, [X31+72]
	246 Move X24, [X31+48]
	247 Move X23, [X31+56]
	248 Move X26, [X31+32]
	249 Move X25, [X31+40]
	250 Move X28, [X31+16]
	251 Move X27, [X31+24]
	252 Move X29, [X31+96]
	253 Move X30, [X31+104]
	254 Return X0
	255 Call 0x1C17F28
	256 Call 0x1C17F20
	257 Call 0x1C17F20
	258 Call 0x1C17F20
	259 Move X0, X21
	260 Call 0x1C17F18
	261 Call 0x3EB2B20
	262 NotImplemented "Instruction LDUR not yet implemented."
	263 NotImplemented "Instruction LDUR not yet implemented."
	264 Move X22, X0
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Move X0, X22
	267 Call 0x3EB2AD0
	268 Move X21, [X0]
	269 Call 0x3EB2AE0
	270 Move X21, X31
	271 Move X22, X0
	272 Compare X20, 0
	273 JumpIfEqual {297}
	274 Move X10, 0x1F80000
	275 Move X8, [X20]
	276 Move X10, [X10+3584]
	277 NotImplemented "Instruction LDRH not yet implemented."
	278 Move X1, [X10]
	279 Compare X9, 0
	280 JumpIfEqual {287}
	281 Move X10, [X8+176]
	282 Add X10, X10, 8
	283 NotImplemented "Instruction LDUR not yet implemented."
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Subtract X9, X9, 1
	286 Add X10, X10, 16
	287 Move X0, X20
	288 Move W2, W31
	289 Call 0x1C5D788
	290 NotImplemented "Instruction LDRSW not yet implemented."
	291 Add X8, X8, X9
	292 Add X0, X8, 312
	293 Move X8, [X0]
	294 Move X1, [X0+8]
	295 Move X0, X20
	296 NotImplemented "Instruction BLR not yet implemented."
	297 Compare X21, 0
	298 JumpIfNotEqual {301}
	299 Move X0, X22
	300 Call 0x1D2D690
	301 Move X0, X21
	302 Call 0x1C17F18
	303 Call 0x1991590

Method: System.Int32 AppendToImmutable(ref TValue[] array, TValue[] values)

Disassembly:
	0x021751AC MOV W0, W31
	0x021751B0 STP V1, V0, [X8 + 0x40]
	0x021751B4 STP V3, V2, [X8 + 0x20]
	0x021751B8 B 0x2175204
	0x021751BC LDP V0, V1, [X20 + 0x20]
	0x021751C0 LDP V2, V3, [X20]
	0x021751C4 ADD X9, X31, 0x80
	0x021751C8 STP V0, V1, [X31 + 0xA0]
	0x021751CC STP V2, V3, [X31 + 0x80]
	0x021751D0 LDP V1, V0, [X9 + 0x20]
	0x021751D4 LDP V3, V2, [X9]
	0x021751D8 STP V1, V0, [X31 + 0x20]
	0x021751DC STP V3, V2, [X31]
	0x021751E0 LDR W9, [X8 + 0x18]
	0x021751E4 CMP W0, W9
	0x021751E8 B.CS 0x2175224
	0x021751EC LDP V0, V1, [X31 + 0x20]
	0x021751F0 LDP V2, V3, [X31]
	0x021751F4 SXTW X9, W0
	0x021751F8 ADD X8, X8, X9, 0x6, LSL
	0x021751FC STP V0, V1, [X8 + 0x40]
	0x02175200 STP V2, V3, [X8 + 0x20]
	0x02175204 LDR W8, [X19]
	0x02175208 LDP X22, X21, [X31 + 0xD0]
	0x0217520C LDP X30, X23, [X31 + 0xC0]
	0x02175210 ADD W8, W8, 0x1
	0x02175214 STR W8, [X19]
	0x02175218 LDP X20, X19, [X31 + 0xE0]
	0x0217521C ADD X31, X31, 0xF0
	0x02175220 RET
	0x02175224 BL 0x1C16F28
	0x02175228 BL 0x1C16F20
	0x0217522C SUB X31, X31, 0x90
	0x02175230 STP X30, X23, [X31 + 0x60]
	0x02175234 STP X22, X21, [X31 + 0x70]
	0x02175238 STP X20, X19, [X31 + 0x80]
	0x0217523C LDR X8, [X4 + 0x38]
	0x02175240 MOV X23, X4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X21, X2
	008 Move X19, X1
	009 Move X20, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X21
	013 Call 0x1C5D6E0
	014 Move X8, [X20]
	015 Compare X8, 0
	016 JumpIfEqual {35}
	017 Compare X19, 0
	018 JumpIfEqual {37}
	019 Move X22, [X19+24]
	020 Compare X22, 0
	021 JumpIfEqual {37}
	022 Move X9, [X21+56]
	023 Move W21, [X8+24]
	024 Move X0, X20
	025 Move X2, [X9+16]
	026 Add W1, W21, W22
	027 Call Array.Resize, X0, X1
	028 Move X2, [X20]
	029 Move X0, X19
	030 Move W1, W31
	031 Move W3, W21
	032 Move W4, W22
	033 Move X5, X31
	034 Call Array.Copy, X0, X1, X2, X3, X4
	035 Move W21, W31
	036 Move [X20], X19
	037 Move W21, [X8+24]
	038 Move W0, W21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return X0

Method: System.Int32 AppendWithCapacity(ref TValue[] array, ref System.Int32 count, TValue value, System.Int32 capacityIncrement = 10)

Disassembly:
	0x021752E0 LDR W9, [X0 + 0x18]
	0x021752E4 CBZ W9, 0x2175344
	0x021752E8 LDP V1, V0, [X31 + 0x20]
	0x021752EC MOV W0, W31
	0x021752F0 B 0x2175320
	0x021752F4 LDP V1, V0, [X20]
	0x021752F8 ADD X9, X31, 0x40
	0x021752FC STP V1, V0, [X31 + 0x40]
	0x02175300 LDP V1, V0, [X9]
	0x02175304 STP V1, V0, [X31]
	0x02175308 LDR W9, [X8 + 0x18]
	0x0217530C CMP W0, W9
	0x02175310 B.CS 0x2175344
	0x02175314 LDP V1, V0, [X31]
	0x02175318 SXTW X9, W0
	0x0217531C ADD X8, X8, X9, 0x5, LSL
	0x02175320 STP V1, V0, [X8 + 0x20]
	0x02175324 LDR W8, [X19]
	0x02175328 LDP X22, X21, [X31 + 0x70]
	0x0217532C LDP X30, X23, [X31 + 0x60]
	0x02175330 ADD W8, W8, 0x1
	0x02175334 STR W8, [X19]
	0x02175338 LDP X20, X19, [X31 + 0x80]
	0x0217533C ADD X31, X31, 0x90
	0x02175340 RET
	0x02175344 BL 0x1C16F28
	0x02175348 BL 0x1C16F20
	0x0217534C SUB X31, X31, 0xC0
	0x02175350 STP X30, X23, [X31 + 0x90]
	0x02175354 STP X22, X21, [X31 + 0xA0]
	0x02175358 STP X20, X19, [X31 + 0xB0]
	0x0217535C LDR X8, [X4 + 0x38]
	0x02175360 MOV X23, X4
	0x02175364 MOV W22, W3
	0x02175368 MOV X20, X2
	0x0217536C MOV X19, X1
	0x02175370 MOV X21, X0
	0x02175374 CBNZ X8, 0x2175380
	0x02175378 MOV X0, X23
	0x0217537C BL 0x1C5C6E0
	0x02175380 LDR X8, [X21]
	0x02175384 CBZ X8, 0x21753D0
	0x02175388 LDR W9, [X8 + 0x18]
	0x0217538C LDR W0, [X19]
	0x02175390 CMP W0, W9
	0x02175394 B.NE 0x2175438
	0x02175398 LDR X8, [X23 + 0x38]
	0x0217539C ADD W1, W9, W22
	0x021753A0 MOV X0, X21
	0x021753A4 LDR X2, [X8 + 0x18]
	0x021753A8 BL 0x214584C
	0x021753AC LDR X9, [X20 + 0x20]
	0x021753B0 LDP V0, V1, [X20]
	0x021753B4 LDR X8, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X23, X4
	009 Move W22, W3
	010 Move X20, X2
	011 Move X19, X1
	012 Move X21, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X23
	016 Call 0x1C5D6E0
	017 Move X8, [X21]
	018 Compare X8, 0
	019 JumpIfEqual {35}
	020 Move W9, [X8+24]
	021 Move W0, [X19]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, [X23+56]
	024 Add W1, W9, W22
	025 Move X0, X21
	026 Move X2, [X8+24]
	027 Call Array.Resize, X0, X1
	028 Move X8, [X21]
	029 Compare X8, 0
	030 JumpIfEqual {65}
	031 Move W0, [X19]
	032 Move W9, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X8, X8, W0
	035 Move X8, [X23+56]
	036 Move X0, [X8+8]
	037 Move W8, [X0+309]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {43}
	042 Call 0x1C5D684
	043 Move W1, W22
	044 Call 0x1C17D6C
	045 Move [X21], X0
	046 Compare X0, 0
	047 JumpIfEqual {65}
	048 Move W9, [X0+24]
	049 Move X8, X0
	050 Compare W9, 0
	051 JumpIfEqual {64}
	052 Move W0, W31
	053 Move [X8+32], X20
	054 Move W8, [X19]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Add W8, W8, 1
	058 Move [X19], W8
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Return X0
	064 Call 0x1C17F28
	065 Call 0x1C17F20

Method: System.Int32 AppendListWithCapacity(ref TValue[] array, ref System.Int32 length, TValues values, System.Int32 capacityIncrement = 10)

Disassembly:
	0x0217492C ADD W8, W8, 0x1
	0x02174930 STR W8, [X19]
	0x02174934 ADD X31, X31, 0x660
	0x02174938 LDP X20, X19, [X31 + 0x40]
	0x0217493C LDP X22, X21, [X31 + 0x30]
	0x02174940 LDP X24, X23, [X31 + 0x20]
	0x02174944 LDP X30, X25, [X31 + 0x10]
	0x02174948 LDR X29, [X31], #0x50
	0x0217494C RET
	0x02174950 BL 0x1C16F20
	0x02174954 BL 0x1C16F28
	0x02174958 STR D8, [X31 - 0x30]!
	0x0217495C STR X30, [X31 + 0x8]
	0x02174960 STP X22, X21, [X31 + 0x10]
	0x02174964 STP X20, X19, [X31 + 0x20]
	0x02174968 LDR X8, [X3 + 0x38]
	0x0217496C MOV X22, X3
	0x02174970 MOV W21, W2
	0x02174974 MOV V8.16B, V0.16B
	0x02174978 MOV X19, X1
	0x0217497C MOV X20, X0
	0x02174980 CBNZ X8, 0x217498C
	0x02174984 MOV X0, X22
	0x02174988 BL 0x1C5C6E0
	0x0217498C LDR X9, [X20]
	0x02174990 CBZ X9, 0x21749E0
	0x02174994 LDR W10, [X9 + 0x18]
	0x02174998 LDR W8, [X19]
	0x0217499C CMP W8, W10
	0x021749A0 B.NE 0x21749C4
	0x021749A4 LDR X8, [X22 + 0x38]
	0x021749A8 ADD W1, W10, W21
	0x021749AC MOV X0, X20
	0x021749B0 LDR X2, [X8 + 0x18]
	0x021749B4 BL 0x21436CC
	0x021749B8 LDR X9, [X20]
	0x021749BC CBZ X9, 0x2174A38
	0x021749C0 LDR W8, [X19]
	0x021749C4 LDR W10, [X9 + 0x18]
	0x021749C8 CMP W8, W10
	0x021749CC B.CS 0x2174A34
	0x021749D0 ADD X9, X9, W8, 0x2, SXTW
	0x021749D4 MOV W0, W8
	0x021749D8 STR S8, [X9 + 0x20]
	0x021749DC B 0x2174A18
	0x021749E0 LDR X8, [X22 + 0x38]
	0x021749E4 LDR X0, [X8 + 0x8]
	0x021749E8 LDRB W8, [X0 + 0x135]
	0x021749EC TBNZ X8, 0x0, 0x21749F4
	0x021749F0 BL 0x1C5C684
	0x021749F4 MOV W1, W21
	0x021749F8 BL 0x1C16D6C
	0x021749FC STR X0, [X20]
	0x02174A00 CBZ X0, 0x2174A38
	0x02174A04 LDR W8, [X0 + 0x18]
	0x02174A08 CBZ W8, 0x2174A34
	0x02174A0C STR S8, [X0 + 0x20]
	0x02174A10 LDR W8, [X19]
	0x02174A14 MOV W0, W31
	0x02174A18 ADD W8, W8, 0x1
	0x02174A1C STR W8, [X19]
	0x02174A20 LDP X20, X19, [X31 + 0x20]
	0x02174A24 LDP X22, X21, [X31 + 0x10]
	0x02174A28 LDR X30, [X31 + 0x8]
	0x02174A2C LDR V8, [X31], #0x30
	0x02174A30 RET
	0x02174A34 BL 0x1C16F28
	0x02174A38 BL 0x1C16F20
	0x02174A3C STR X30, [X31 - 0x40]!
	0x02174A40 STP X24, X23, [X31 + 0x10]
	0x02174A44 STP X22, X21, [X31 + 0x20]
	0x02174A48 STP X20, X19, [X31 + 0x30]
	0x02174A4C LDR X8, [X5 + 0x38]
	0x02174A50 MOV X24, X5
	0x02174A54 MOV W23, W4
	0x02174A58 MOV X20, X3
	0x02174A5C MOV X21, X2
	0x02174A60 MOV X19, X1
	0x02174A64 MOV X22, X0
	0x02174A68 CBNZ X8, 0x2174A74
	0x02174A6C MOV X0, X24
	0x02174A70 BL 0x1C5C6E0
	0x02174A74 LDR X8, [X22]
	0x02174A78 CBZ X8, 0x2174AC4
	0x02174A7C LDR W9, [X8 + 0x18]
	0x02174A80 LDR W0, [X19]
	0x02174A84 CMP W0, W9
	0x02174A88 B.NE 0x2174AAC
	0x02174A8C LDR X8, [X24 + 0x38]
	0x02174A90 ADD W1, W9, W23
	0x02174A94 MOV X0, X22
	0x02174A98 LDR X2, [X8 + 0x18]
	0x02174A9C BL 0x21437D8
	0x02174AA0 LDR X8, [X22]
	0x02174AA4 CBZ X8, 0x2174B20
	0x02174AA8 LDR W0, [X19]
	0x02174AAC LDR W9, [X8 + 0x18]
	0x02174AB0 CMP W0, W9
	0x02174AB4 B.CS 0x2174B1C
	0x02174AB8 SXTW X9, W0
	0x02174ABC ADD X8, X8, X9, 0x4, LSL
	0x02174AC0 B 0x2174AF8
	0x02174AC4 LDR X8, [X24 + 0x38]
	0x02174AC8 LDR X0, [X8 + 0x8]
	0x02174ACC LDRB W8, [X0 + 0x135]
	0x02174AD0 TBNZ X8, 0x0, 0x2174AD8
	0x02174AD4 BL 0x1C5C684
	0x02174AD8 MOV W1, W23
	0x02174ADC BL 0x1C16D6C
	0x02174AE0 STR X0, [X22]
	0x02174AE4 CBZ X0, 0x2174B20
	0x02174AE8 LDR W9, [X0 + 0x18]
	0x02174AEC MOV X8, X0
	0x02174AF0 CBZ W9, 0x2174B1C
	0x02174AF4 MOV W0, W31
	0x02174AF8 STP X21, X20, [X8 + 0x20]
	0x02174AFC LDR W8, [X19]
	0x02174B00 LDP X22, X21, [X31 + 0x20]
	0x02174B04 LDP X24, X23, [X31 + 0x10]
	0x02174B08 ADD W8, W8, 0x1
	0x02174B0C STR W8, [X19]
	0x02174B10 LDP X20, X19, [X31 + 0x30]
	0x02174B14 LDR X30, [X31], #0x40
	0x02174B18 RET
	0x02174B1C BL 0x1C16F28
	0x02174B20 BL 0x1C16F20
	0x02174B24 STP X30, X23, [X31 - 0x30]!
	0x02174B28 STP X22, X21, [X31 + 0x10]
	0x02174B2C STP X20, X19, [X31 + 0x20]
	0x02174B30 LDR X8, [X4 + 0x38]
	0x02174B34 MOV X23, X4

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X8, [X4+56]
	013 Move X20, X4
	014 Move W24, W3
	015 Move X21, X2
	016 Move X19, X1
	017 Move X23, X0
	018 Compare X8, 0
	019 JumpIfNotEqual {28}
	020 Move X0, 0x1F80000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move X8, [X20+56]
	024 Compare X8, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X20
	027 Call 0x1C5D6E0
	028 Move X9, [X23]
	029 Move W22, [X21]
	030 Compare X9, 0
	031 JumpIfEqual {76}
	032 Move W8, [X19]
	033 Move W26, [X9+24]
	034 Add W25, W8, W22
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, 0x1F80000
	037 Move X8, [X8+1448]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, W25
	044 Move W1, W24
	045 Move X2, X31
	046 Call Math.Max, X0, X1
	047 Move X8, [X20+56]
	048 Add W1, W0, W26
	049 Move X0, X23
	050 Move X2, [X8+64]
	051 Call Array.Resize, X0, X1
	052 Move W8, [X19]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W24, W8
	055 Move X25, X31
	056 Move X26, X24
	057 ShiftRight X26, 32
	058 And X26, X26, 0x7FFFFFFF
	059 Move X27, 1
	060 Move X8, [X20+56]
	061 Move X28, [X23]
	062 Move X0, X21
	063 Move W1, W25
	064 Move X2, [X8+48]
	065 Call 0x2DFB48C, X0, X1
	066 Compare X28, 0
	067 JumpIfEqual {128}
	068 Move W8, [X28+24]
	069 Add X9, X24, X25
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add X25, X25, 1
	072 Add X8, X28, X26
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Add X26, X26, X27
	075 Move [X8+32], X0
	076 Move X8, 0x1F80000
	077 Move X8, [X8+1448]
	078 Move X0, [X8]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move W0, W22
	084 Move W1, W24
	085 Move X2, X31
	086 Call Math.Max, X0, X1
	087 Move X8, [X20+56]
	088 Move W24, W0
	089 Move X8, [X8+32]
	090 Move W9, [X8+309]
	091 Move TEMP, X9
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {98}
	095 Move X0, X8
	096 Call 0x1C5D684
	097 Move X8, X0
	098 Move X0, X8
	099 Move W1, W24
	100 Call 0x1C17D6C
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move [X23], X0
	103 Move X8, [X20+56]
	104 Move X24, X0
	105 Move X0, X21
	106 Move W1, W31
	107 Move X2, [X8+48]
	108 Call 0x2DFB48C, X0, X1
	109 Compare X24, 0
	110 JumpIfEqual {128}
	111 Move X8, X31
	112 Subtract X25, X22, 1
	113 Move W9, [X24+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Add X9, X24, X8
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move [X9+32], X0
	118 Move X9, [X20+56]
	119 Move X24, [X23]
	120 Add W1, W8, 1
	121 Move X0, X21
	122 Move X2, [X9+48]
	123 Add X26, X8, 1
	124 Call 0x2DFB48C, X0, X1
	125 Move X8, X26
	126 Compare X24, 0
	127 JumpIfNotEqual {113}
	128 Call 0x1C17F20
	129 Move W24, W31
	130 Move W8, [X19]
	131 Move W0, W24
	132 Move X24, [X31+48]
	133 Move X23, [X31+56]
	134 Move X26, [X31+32]
	135 Move X25, [X31+40]
	136 Add W8, W8, W22
	137 Move [X19], W8
	138 Move X20, [X31+80]
	139 Move X19, [X31+88]
	140 Move X22, [X31+64]
	141 Move X21, [X31+72]
	142 Move X28, [X31+16]
	143 Move X27, [X31+24]
	144 Move X30, [X31+96]
	145 Return X0
	146 Call 0x1C17F28

Method: System.Int32 AppendWithCapacity(ref Unity.Collections.NativeArray`1<TValue> array, ref System.Int32 count, TValue value, System.Int32 capacityIncrement = 10, Unity.Collections.Allocator allocator = 4)

Disassembly:
	0x02176918 MOV W20, W1
	0x0217691C MOV X19, X0
	0x02176920 CBNZ X8, 0x2176940
	0x02176924 ADRP X0, 0x1F7D000
	0x02176928 LDR X0, [X0 + 0x5A8]
	0x0217692C BL 0x1C16CF4
	0x02176930 LDR X8, [X21 + 0x38]
	0x02176934 CBNZ X8, 0x2176940
	0x02176938 MOV X0, X21
	0x0217693C BL 0x1C5C6E0
	0x02176940 ADRP X8, 0x1F7D000
	0x02176944 LDR X8, [X8 + 0x5A8]
	0x02176948 LDR X24, [X19]
	0x0217694C LDR X0, [X8]
	0x02176950 LDR W8, [X0 + 0xE0]
	0x02176954 CBNZ W8, 0x217695C
	0x02176958 BL 0x1C16DFC
	0x0217695C MOV W0, W23
	0x02176960 MOV W1, W22
	0x02176964 MOV X2, X31
	0x02176968 BL 0x337EDF0
	0x0217696C LDR X8, [X21 + 0x38]
	0x02176970 MOV W21, W0
	0x02176974 LDR X8, [X8 + 0x8]
	0x02176978 LDRB W9, [X8 + 0x135]
	0x0217697C TBNZ X9, 0x0, 0x217698C
	0x02176980 MOV X0, X8
	0x02176984 BL 0x1C5C684
	0x02176988 MOV X8, X0
	0x0217698C CBZ X24, 0x21769BC
	0x02176990 ADD W1, W21, W20
	0x02176994 MOV X0, X8
	0x02176998 BL 0x1C16D6C
	0x0217699C LDR X8, [X19]
	0x021769A0 MOV X21, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X5+56]
	009 Move X23, X5
	010 Move W22, W4
	011 Move W24, W3
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {19}
	017 Move X0, X23
	018 Call 0x1C5D6E0
	019 Move W8, [X21+8]
	020 Move W0, [X20]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, [X23+56]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSINC not yet implemented."
	025 Move X0, X21
	026 Move X3, [X8+24]
	027 Move W2, W22
	028 Call 0x2179CD4, X0, X1, X2
	029 Move W0, [X20]
	030 Move X8, [X21]
	031 Add W9, W0, 1
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X24, [X31+16]
	035 Move X23, [X31+24]
	036 Move [X8], X19
	037 Move [X20], W9
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X30, [X31+64]
	041 Return X0

Method: System.Void InsertAt(ref TValue[] array, System.Int32 index, TValue value)

Disassembly:
	0x0217AFD4 MOV X21, X0
	0x0217AFD8 CBZ X8, 0x217AFF4
	0x0217AFDC CBZ X19, 0x217B000
	0x0217AFE0 LDR W8, [X19 + 0x18]
	0x0217AFE4 ADDS W20, W8, 0x1
	0x0217AFE8 B.CC 0x217B004
	0x0217AFEC MOV X20, X31
	0x0217AFF0 B 0x217B080
	0x0217AFF4 MOV X0, X22
	0x0217AFF8 BL 0x1C5C6E0
	0x0217AFFC CBNZ X19, 0x217AFE0
	0x0217B000 MOVZ W20, 0x1
	0x0217B004 LDR X8, [X22 + 0x38]
	0x0217B008 LDR X0, [X8 + 0x10]
	0x0217B00C LDRB W8, [X0 + 0x135]
	0x0217B010 TBNZ X8, 0x0, 0x217B018
	0x0217B014 BL 0x1C5C684
	0x0217B018 MOV W1, W20
	0x0217B01C BL 0x1C16D6C
	0x0217B020 LDR X8, [X21 + 0x20]
	0x0217B024 LDP V1, V0, [X21]
	0x0217B028 STR X8, [X31 + 0x50]
	0x0217B02C STP V1, V0, [X31 + 0x30]
	0x0217B030 CBZ X0, 0x217B098
	0x0217B034 LDP V0, V1, [X31 + 0x30]
	0x0217B038 LDR X8, [X31 + 0x50]
	0x0217B03C MOV X20, X0
	0x0217B040 STP V0, V1, [X31]
	0x0217B044 STR X8, [X31 + 0x20]
	0x0217B048 LDR W8, [X0 + 0x18]
	0x0217B04C CBZ W8, 0x217B09C
	0x0217B050 LDR X8, [X31 + 0x20]
	0x0217B054 LDP V1, V0, [X31]
	0x0217B058 STR X8, [X20 + 0x40]
	0x0217B05C STP V1, V0, [X20 + 0x20]
	0x0217B060 CBZ X19, 0x217B080
	0x0217B064 LDR W4, [X19 + 0x18]
	0x0217B068 MOVZ W3, 0x1
	0x0217B06C MOV X0, X19
	0x0217B070 MOV W1, W31
	0x0217B074 MOV X2, X20
	0x0217B078 MOV X5, X31
	0x0217B07C BL 0x339FCE8
	0x0217B080 MOV X0, X20
	0x0217B084 LDP X20, X19, [X31 + 0x80]
	0x0217B088 LDP X22, X21, [X31 + 0x70]
	0x0217B08C LDR X30, [X31 + 0x60]
	0x0217B090 ADD X31, X31, 0x90
	0x0217B094 RET
	0x0217B098 BL 0x1C16F20
	0x0217B09C BL 0x1C16F28
	0x0217B0A0 STP X30, X23, [X31 - 0x30]!
	0x0217B0A4 STP X22, X21, [X31 + 0x10]
	0x0217B0A8 STP X20, X19, [X31 + 0x20]
	0x0217B0AC LDR X8, [X3 + 0x38]
	0x0217B0B0 MOV X23, X3
	0x0217B0B4 MOV X19, X2
	0x0217B0B8 MOV X20, X1
	0x0217B0BC MOV X21, X0
	0x0217B0C0 CBZ X8, 0x217B0DC
	0x0217B0C4 CBZ X19, 0x217B0E8
	0x0217B0C8 LDR W8, [X19 + 0x18]
	0x0217B0CC ADDS W22, W8, 0x1
	0x0217B0D0 B.CC 0x217B0EC
	0x0217B0D4 MOV X22, X31
	0x0217B0D8 B 0x217B13C
	0x0217B0DC MOV X0, X23
	0x0217B0E0 BL 0x1C5C6E0
	0x0217B0E4 CBNZ X19, 0x217B0C8
	0x0217B0E8 MOVZ W22, 0x1
	0x0217B0EC LDR X8, [X23 + 0x38]
	0x0217B0F0 LDR X0, [X8 + 0x10]
	0x0217B0F4 LDRB W8, [X0 + 0x135]
	0x0217B0F8 TBNZ X8, 0x0, 0x217B100
	0x0217B0FC BL 0x1C5C684
	0x0217B100 MOV W1, W22
	0x0217B104 BL 0x1C16D6C
	0x0217B108 CBZ X0, 0x217B150
	0x0217B10C LDR W8, [X0 + 0x18]
	0x0217B110 MOV X22, X0
	0x0217B114 CBZ W8, 0x217B154
	0x0217B118 STP X21, X20, [X22 + 0x20]
	0x0217B11C CBZ X19, 0x217B13C
	0x0217B120 LDR W4, [X19 + 0x18]
	0x0217B124 MOVZ W3, 0x1
	0x0217B128 MOV X0, X19
	0x0217B12C MOV W1, W31
	0x0217B130 MOV X2, X22
	0x0217B134 MOV X5, X31
	0x0217B138 BL 0x339FCE8
	0x0217B13C MOV X0, X22
	0x0217B140 LDP X20, X19, [X31 + 0x20]
	0x0217B144 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+272], X29
	003 Move [X31+280], X30
	004 Move [X31+288], X22
	005 Move [X31+296], X21
	006 Move [X31+304], X20
	007 Move [X31+312], X19
	008 Move X8, [X3+56]
	009 Move X22, X3
	010 Move X19, X2
	011 Move W20, W1
	012 Move X21, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X22
	016 Call 0x1C5D6E0
	017 Move X8, [X21]
	018 Compare X8, 0
	019 JumpIfEqual {50}
	020 Move X9, [X22+56]
	021 Move W22, [X8+24]
	022 Move X0, X21
	023 Move X2, [X9+24]
	024 Add W1, W22, 1
	025 Call Array.Resize, X0, X1
	026 Subtract W4, W22, W20
	027 Move X0, [X21]
	028 Add W3, W20, 1
	029 Move W1, W20
	030 Move X5, X31
	031 Move X2, X0
	032 Call Array.Copy, X0, X1, X2, X3, X4
	033 Move X21, [X21]
	034 Add X0, X31, 184
	035 Move W2, 88
	036 Move X1, X19
	037 Call 0x3EB2AC0
	038 Compare X21, 0
	039 JumpIfEqual {89}
	040 Add X0, X31, 8
	041 Add X1, X31, 184
	042 Move W2, 88
	043 Move W19, 88
	044 Call 0x3EB2AC0
	045 Move W8, [X21+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction SMADDL not yet implemented."
	048 Add X0, X8, 32
	049 Add X1, X31, 8
	050 Compare W20, 0
	051 JumpIfNotEqual {91}
	052 Move X8, [X22+56]
	053 Move X0, [X8+8]
	054 Move W8, [X0+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move W1, 1
	061 Call 0x1C17D6C
	062 Move X20, X0
	063 Move [X21], X0
	064 Add X0, X31, 184
	065 Move W2, 88
	066 Move X1, X19
	067 Call 0x3EB2AC0
	068 Compare X20, 0
	069 JumpIfEqual {89}
	070 Add X0, X31, 96
	071 Add X1, X31, 184
	072 Move W2, 88
	073 Call 0x3EB2AC0
	074 Move W8, [X20+24]
	075 Compare W8, 0
	076 JumpIfEqual {90}
	077 Add X0, X20, 32
	078 Add X1, X31, 96
	079 Move W2, 88
	080 Call 0x3EB2AC0
	081 Move X20, [X31+304]
	082 Move X19, [X31+312]
	083 Move X22, [X31+288]
	084 Move X21, [X31+296]
	085 Move X29, [X31+272]
	086 Move X30, [X31+280]
	087 Add X31, X31, 320
	088 Return 
	089 Call 0x1C17F20
	090 Call 0x1C17F28
	091 Move X0, 0x1F81000
	092 Move X0, [X0+1888]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X19, X0
	096 Move X0, 0x1F84000
	097 Move X0, [X0+304]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Move X2, X31
	102 Call ArgumentOutOfRangeException..ctor, X0, X1
	103 Move X0, X19
	104 Move X1, X22
	105 Call 0x1C17DEC

Method: System.Void InsertAtWithCapacity(ref TValue[] array, ref System.Int32 count, System.Int32 index, TValue value, System.Int32 capacityIncrement = 10)

Disassembly:
	0x0217B598 LDR X0, [X8 + 0x48]
	0x0217B59C LDRB W8, [X0 + 0x135]
	0x0217B5A0 TBNZ X8, 0x0, 0x217B5A8
	0x0217B5A4 BL 0x1C5C684
	0x0217B5A8 BL 0x1C16F10
	0x0217B5AC LDR X8, [X20 + 0x38]
	0x0217B5B0 MOV X1, X24
	0x0217B5B4 MOV X25, X0
	0x0217B5B8 LDR X3, [X8 + 0x50]
	0x0217B5BC LDR X2, [X8 + 0x40]
	0x0217B5C0 LDR X9, [X3]
	0x0217B5C4 BLR X9
	0x0217B5C8 LDR X8, [X20 + 0x38]
	0x0217B5CC MOV X0, X23
	0x0217B5D0 MOV X1, X25
	0x0217B5D4 LDR X2, [X8 + 0x58]
	0x0217B5D8 LDR X8, [X2]
	0x0217B5DC BLR X8
	0x0217B5E0 TBNZ X0, 0x0, 0x217B63C
	0x0217B5E4 LDR X8, [X20 + 0x38]
	0x0217B5E8 MOV X0, X24
	0x0217B5EC LDR X8, [X8 + 0x28]
	0x0217B5F0 LDR X1, [X8 + 0x80]
	0x0217B5F4 BL 0x1C16D18
	0x0217B5F8 MOV X1, X0
	0x0217B5FC MOV X0, X22
	0x0217B600 MOV X2, X21
	0x0217B604 BL 0x3EB1AC0
	0x0217B608 LDR X8, [X20 + 0x38]
	0x0217B60C MOV X4, X22
	0x0217B610 LDR X9, [X8 + 0x38]
	0x0217B614 LDR W9, [X9 + 0x28]
	0x0217B618 TBNZ X9, 0x1F, 0x217B620
	0x0217B61C LDR X4, [X22]
	0x0217B620 LDR X1, [X8 + 0x60]
	0x0217B624 SUB X3, X29, 0x10
	0x0217B628 MOV X2, X23
	0x0217B62C LDR X0, [X1]
	0x0217B630 STUR X4, [X29 - 0x10]
	0x0217B634 LDR X8, [X1 + 0x10]
	0x0217B638 BLR X8
	0x0217B63C LDRSW X9, [X19 + 0x18]
	0x0217B640 LDR X8, [X20 + 0x38]
	0x0217B644 ADD X27, X27, 0x1
	0x0217B648 CMP X27, X9
	0x0217B64C B.LT 0x217B520
	0x0217B650 LDR X1, [X8 + 0x68]
	0x0217B654 MOV X0, X23
	0x0217B658 LDR X8, [X1]
	0x0217B65C BLR X8
	0x0217B660 MOV X19, X0
	0x0217B664 B 0x217B66C
	0x0217B668 MOV X19, X24
	0x0217B66C LDR X8, [X26 + 0x28]
	0x0217B670 LDUR X9, [X29 - 0x8]
	0x0217B674 CMP X8, X9
	0x0217B678 B.NE 0x217B6A8
	0x0217B67C MOV X0, X19
	0x0217B680 ADD X31, X29, 0x0
	0x0217B684 LDP X20, X19, [X31 + 0x50]
	0x0217B688 LDP X22, X21, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X8, [X5+56]
	010 Move W23, W4
	011 Move X21, X3
	012 Move W20, W2
	013 Move X19, X1
	014 Move X22, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {21}
	017 Move X0, X5
	018 Move X24, X5
	019 Call 0x1C5D6E0
	020 Move X8, [X24+56]
	021 Move W1, [X19]
	022 Move X4, [X8+8]
	023 Move X0, X22
	024 Move W3, W23
	025 Add W2, W1, 1
	026 Call ArrayHelpers.EnsureCapacity, X0, X1, X2, X3
	027 Move W8, [X19]
	028 Subtract W4, W8, W20
	029 Move X0, [X22]
	030 Add W3, W20, 1
	031 Move W1, W20
	032 Move X5, X31
	033 Move X2, X0
	034 Call Array.Copy, X0, X1, X2, X3, X4
	035 Move X8, [X22]
	036 Move X9, [X21+16]
	037 Move V0, [X21]
	038 Move [X31+48], X9
	039 Move [X31+2], V0
	040 Compare X8, 0
	041 JumpIfEqual {66}
	042 Move V0, [X31+2]
	043 Move X9, [X31+48]
	044 Move [X31], V0
	045 Move [X31+16], X9
	046 Move W9, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X9, [X31+16]
	049 Move V0, [X31]
	050 Move W10, 24
	051 NotImplemented "Instruction SMADDL not yet implemented."
	052 Move [X8+48], X9
	053 Move [X8+2], V0
	054 Move W8, [X19]
	055 Move X22, [X31+96]
	056 Move X21, [X31+104]
	057 Move X24, [X31+80]
	058 Move X23, [X31+88]
	059 Move X30, [X31+64]
	060 Add W8, W8, 1
	061 Move [X19], W8
	062 Move X20, [X31+112]
	063 Move X19, [X31+120]
	064 Add X31, X31, 128
	065 Return 
	066 Call 0x1C17F20
	067 Call 0x1C17F28

Method: System.Void PutAtIfNotSet(ref TValue[] array, System.Int32 index, System.Func`1<TValue> valueFn)

Disassembly:
	0x0217CCD0 LDRB W8, [X0 + 0x135]
	0x0217CCD4 TBNZ X8, 0x0, 0x217CCDC
	0x0217CCD8 BL 0x1C5C684
	0x0217CCDC LDR W8, [X20 + 0x18]
	0x0217CCE0 ADD W1, W8, 0x1
	0x0217CCE4 BL 0x1C16D6C
	0x0217CCE8 LDR W4, [X20 + 0x18]
	0x0217CCEC MOV X21, X0
	0x0217CCF0 MOV X0, X20
	0x0217CCF4 MOV W1, W31
	0x0217CCF8 MOV X2, X21
	0x0217CCFC MOV W3, W31
	0x0217CD00 MOV X5, X31
	0x0217CD04 BL 0x33A303C
	0x0217CD08 CBZ X21, 0x217CD38
	0x0217CD0C LDR X8, [X20 + 0x18]
	0x0217CD10 LDR W9, [X21 + 0x18]
	0x0217CD14 CMP W8, W9
	0x0217CD18 B.CS 0x217CD3C
	0x0217CD1C UBFM X8, X8, 0x20, 0x1F
	0x0217CD20 ADD X8, X21, X8, 0x1E, ASR
	0x0217CD24 STR W19, [X8 + 0x20]
	0x0217CD28 LDP X20, X19, [X31 + 0x10]
	0x0217CD2C MOV X0, X21
	0x0217CD30 LDP X30, X21, [X31], #0x20
	0x0217CD34 RET
	0x0217CD38 BL 0x1C16F20
	0x0217CD3C BL 0x1C16F28
	0x0217CD40 STP X30, X21, [X31 - 0x20]!
	0x0217CD44 STP X20, X19, [X31 + 0x10]
	0x0217CD48 LDR X8, [X2 + 0x38]
	0x0217CD4C MOV X21, X2
	0x0217CD50 MOV X19, X1
	0x0217CD54 MOV X20, X0
	0x0217CD58 CBNZ X8, 0x217CD64
	0x0217CD5C MOV X0, X21
	0x0217CD60 BL 0x1C5C6E0
	0x0217CD64 CBZ X20, 0x217CDD8
	0x0217CD68 LDR X8, [X21 + 0x38]
	0x0217CD6C LDR X0, [X8 + 0x8]
	0x0217CD70 LDRB W8, [X0 + 0x135]
	0x0217CD74 TBNZ X8, 0x0, 0x217CD7C
	0x0217CD78 BL 0x1C5C684
	0x0217CD7C LDR W8, [X20 + 0x18]
	0x0217CD80 ADD W1, W8, 0x1
	0x0217CD84 BL 0x1C16D6C
	0x0217CD88 LDR W4, [X20 + 0x18]
	0x0217CD8C MOV X21, X0
	0x0217CD90 MOV X0, X20
	0x0217CD94 MOV W1, W31
	0x0217CD98 MOV X2, X21
	0x0217CD9C MOV W3, W31
	0x0217CDA0 MOV X5, X31
	0x0217CDA4 BL 0x33A303C
	0x0217CDA8 CBZ X21, 0x217CDD8
	0x0217CDAC LDR X8, [X20 + 0x18]
	0x0217CDB0 LDR W9, [X21 + 0x18]
	0x0217CDB4 CMP W8, W9
	0x0217CDB8 B.CS 0x217CDDC
	0x0217CDBC UBFM X8, X8, 0x20, 0x1F
	0x0217CDC0 ADD X8, X21, X8, 0x1D, ASR
	0x0217CDC4 STR X19, [X8 + 0x20]
	0x0217CDC8 LDP X20, X19, [X31 + 0x10]
	0x0217CDCC MOV X0, X21
	0x0217CDD0 LDP X30, X21, [X31], #0x20
	0x0217CDD4 RET
	0x0217CDD8 BL 0x1C16F20
	0x0217CDDC BL 0x1C16F28
	0x0217CDE0 STP X29, X30, [X31 - 0x50]!
	0x0217CDE4 STR X25, [X31 + 0x10]
	0x0217CDE8 STP X24, X23, [X31 + 0x20]
	0x0217CDEC STP X22, X21, [X31 + 0x30]
	0x0217CDF0 STP X20, X19, [X31 + 0x40]
	0x0217CDF4 ADD X29, X31, 0x0
	0x0217CDF8 SUB X31, X31, 0x10
	0x0217CDFC MRS X25, 0xC000
	0x0217CE00 LDR X8, [X25 + 0x28]
	0x0217CE04 MOV X20, X2
	0x0217CE08 MOV X22, X1
	0x0217CE0C MOV X19, X0
	0x0217CE10 STUR X8, [X29 - 0x8]
	0x0217CE14 STUR X1, [X29 - 0x10]
	0x0217CE18 LDR X8, [X2 + 0x38]
	0x0217CE1C CBNZ X8, 0x217CE2C
	0x0217CE20 MOV X0, X20
	0x0217CE24 BL 0x1C5C6E0
	0x0217CE28 LDR X8, [X20 + 0x38]
	0x0217CE2C LDR X9, [X8 + 0x10]
	0x0217CE30 LDR W21, [X9 + 0xFC]
	0x0217CE34 ADD X9, X31, 0x0
	0x0217CE38 ADD X10, X21, 0xF
	0x0217CE3C AND X10, X10, 0x1FFFFFFFF
	0x0217CE40 SUB X23, X9, X10
	0x0217CE44 ADD X31, X23, 0x0
	0x0217CE48 CBZ X19, 0x217CF38
	0x0217CE4C LDR X0, [X8 + 0x8]
	0x0217CE50 LDRB W8, [X0 + 0x135]
	0x0217CE54 TBNZ X8, 0x0, 0x217CE5C
	0x0217CE58 BL 0x1C5C684
	0x0217CE5C LDR W8, [X19 + 0x18]
	0x0217CE60 ADD W1, W8, 0x1
	0x0217CE64 BL 0x1C16D6C
	0x0217CE68 LDR W4, [X19 + 0x18]
	0x0217CE6C MOV X24, X0
	0x0217CE70 MOV X0, X19
	0x0217CE74 MOV W1, W31
	0x0217CE78 MOV X2, X24
	0x0217CE7C MOV W3, W31
	0x0217CE80 MOV X5, X31
	0x0217CE84 BL 0x33A303C
	0x0217CE88 LDR X8, [X20 + 0x38]
	0x0217CE8C MOV X0, X23
	0x0217CE90 MOV X2, X21
	0x0217CE94 LDR X8, [X8 + 0x10]
	0x0217CE98 LDR W8, [X8 + 0x28]
	0x0217CE9C CMP W8, 0x0
	0x0217CEA0 SUB X8, X29, 0x10
	0x0217CEA4 CSEL X1, X22, X8, LT
	0x0217CEA8 BL 0x3EB1AC0
	0x0217CEAC CBZ X24, 0x217CF38
	0x0217CEB0 LDR X8, [X19 + 0x18]
	0x0217CEB4 LDR W9, [X24 + 0x18]
	0x0217CEB8 CMP W8, W9
	0x0217CEBC B.CS 0x217CF3C
	0x0217CEC0 LDR X9, [X24]
	0x0217CEC4 SXTW X8, W8
	0x0217CEC8 MOV X1, X23
	0x0217CECC MOV X2, X21
	0x0217CED0 LDR W9, [X9 + 0x104]
	0x0217CED4 NOP
	0x0217CED8 MADD X8, X8, X9, X24
	0x0217CEDC ADD X0, X8, 0x20
	0x0217CEE0 BL 0x3EB1AC0
	0x0217CEE4 LDR X8, [X20 + 0x38]
	0x0217CEE8 LDR X0, [X8 + 0x10]
	0x0217CEEC LDRB W8, [X0 + 0x135]
	0x0217CEF0 TBNZ X8, 0x0, 0x217CEF8
	0x0217CEF4 BL 0x1C5C684
	0x0217CEF8 LDR W8, [X19 + 0x18]
	0x0217CEFC LDR W9, [X24 + 0x18]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 48
	015 Move [X29-40], X2
	016 NotImplemented "Instruction MRS not yet implemented."
	017 Move X8, [X28+40]
	018 Move X20, X3
	019 Move W19, W1
	020 Move X24, X0
	021 Move [X29-8], X8
	022 Move X21, [X3+56]
	023 Compare X21, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X20
	026 Call 0x1C5D6E0
	027 Move X21, [X20+56]
	028 Move X8, [X21+56]
	029 Move W22, [X8+252]
	030 Add X8, X31, 0
	031 Add X9, X22, 15
	032 And X9, X9, 0x1FFFFFFFF
	033 Subtract X23, X8, X9
	034 Add X31, X23, 0
	035 Add X8, X31, 0
	036 Subtract X25, X8, X9
	037 Add X31, X25, 0
	038 Add X8, X31, 0
	039 Subtract X26, X8, X9
	040 Add X31, X26, 0
	041 Move X0, X26
	042 Move W1, W31
	043 Move X2, X22
	044 Call 0x3EB2B10
	045 Move X1, [X21+8]
	046 Move X0, [X24]
	047 Move X8, [X1]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Add W1, W19, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X8, [X20+56]
	052 Move X0, X24
	053 Move X2, [X8+24]
	054 Move X8, [X2]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X8, [X20+56]
	057 Move X0, [X8+32]
	058 Move X8, [X0]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X8, [X24]
	061 Compare X8, 0
	062 JumpIfEqual {158}
	063 Move W9, [X8+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X9, [X8]
	066 Move X21, W19
	067 Move X27, X0
	068 Move X0, X23
	069 Move W9, [X9+260]
	070 Move X2, X22
	071 NotImplemented "Instruction MADD not yet implemented."
	072 Add X1, X8, 32
	073 Call 0x3EB2AC0
	074 Move X0, X26
	075 Move W1, W31
	076 Move X2, X22
	077 Call 0x3EB2B10
	078 Move X0, X25
	079 Move X1, X26
	080 Move X2, X22
	081 Call 0x3EB2AC0
	082 Compare X27, 0
	083 JumpIfEqual {158}
	084 Move X8, [X20+56]
	085 Move X8, [X8+56]
	086 Move W8, [X8+40]
	087 Move TEMP, X8
	088 And TEMP, TEMP, -2147483648
	089 Compare TEMP, -2147483648
	090 JumpIfEqual {93}
	091 Move X8, [X23]
	092 Move X25, [X25]
	093 Move X8, X23
	094 Move X9, [X27]
	095 Move [X29-32], X8
	096 Move [X29-24], X25
	097 Subtract X3, X29, 32
	098 Subtract X4, X29, 12
	099 Move X1, [X9+448]
	100 Move X2, X27
	101 Move X0, [X1+8]
	102 Move X8, [X1+16]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 NotImplemented "Instruction LDURB not yet implemented."
	105 Compare W8, 0
	106 JumpIfEqual {141}
	107 NotImplemented "Instruction LDUR not yet implemented."
	108 Compare X2, 0
	109 JumpIfEqual {158}
	110 Move X8, [X20+56]
	111 Move X24, [X24]
	112 Subtract X3, X29, 32
	113 Move X4, X23
	114 Move X1, [X8+80]
	115 Move X0, [X1]
	116 Move [X29-32], X23
	117 Move X8, [X1+16]
	118 NotImplemented "Instruction BLR not yet implemented."
	119 Compare X24, 0
	120 JumpIfEqual {158}
	121 Move W8, [X24+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X8, [X24]
	124 Move X1, X23
	125 Move X2, X22
	126 Move W8, [X8+260]
	127 NotImplemented "Instruction NOP not yet implemented."
	128 NotImplemented "Instruction MADD not yet implemented."
	129 Add X0, X8, 32
	130 Call 0x3EB2AC0
	131 Move X8, [X20+56]
	132 Move X0, [X8+56]
	133 Move W8, [X0+309]
	134 Move TEMP, X8
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfEqual {139}
	138 Call 0x1C5D684
	139 Move W8, [X24+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X8, [X28+40]
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Add X31, X29, 0
	145 Move X20, [X31+80]
	146 Move X19, [X31+88]
	147 Move X22, [X31+64]
	148 Move X21, [X31+72]
	149 Move X24, [X31+48]
	150 Move X23, [X31+56]
	151 Move X26, [X31+32]
	152 Move X25, [X31+40]
	153 Move X28, [X31+16]
	154 Move X27, [X31+24]
	155 Move X29, [X31+96]
	156 Move X30, [X31+104]
	157 Return 
	158 Call 0x1C17F20
	159 Call 0x1C17F28
	160 Call 0x3EB2B20

Method: System.Int32 GrowBy(ref TValue[] array, System.Int32 count)

Disassembly:
	0x02179BD8 LDR X8, [X3 + 0x38]
	0x02179BDC MOV W19, W2
	0x02179BE0 MOV X20, X1
	0x02179BE4 MOV X21, X0
	0x02179BE8 CBNZ X8, 0x2179BFC
	0x02179BEC MOV X0, X3
	0x02179BF0 MOV X22, X3
	0x02179BF4 BL 0x1C5C6E0
	0x02179BF8 LDR X8, [X22 + 0x38]
	0x02179BFC LDR X4, [X8 + 0x10]
	0x02179C00 MOV X0, X21
	0x02179C04 MOV X1, X20
	0x02179C08 MOV W3, W19
	0x02179C0C LDR X5, [X4]
	0x02179C10 LDP X20, X19, [X31 + 0x20]
	0x02179C14 LDP X22, X21, [X31 + 0x10]
	0x02179C18 MOV W2, W31
	0x02179C1C LDR X30, [X31], #0x30
	0x02179C20 BR X5
	0x02179C24 STR X30, [X31 - 0x10]!
	0x02179C28 CBZ X0, 0x2179C74
	0x02179C2C TBZ X3, 0x1F, 0x2179C38
	0x02179C30 LDR W8, [X0 + 0x18]
	0x02179C34 SUB W3, W8, W2
	0x02179C38 ADD W8, W3, W2
	0x02179C3C CMP W8, W2
	0x02179C40 B.LE 0x2179C74
	0x02179C44 LDR W8, [X0 + 0x18]
	0x02179C48 CMP W8, W2
	0x02179C4C CSEL W8, W2, W8, CC
	0x02179C50 CMP W8, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X21, X2
	007 Move W20, W1
	008 Move X19, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X21
	012 Call 0x1C5D6E0
	013 Move X8, [X19]
	014 Compare X8, 0
	015 JumpIfEqual {22}
	016 Move X9, [X21+56]
	017 Move W21, [X8+24]
	018 Move X0, X19
	019 Move X2, [X9+16]
	020 Add W1, W21, W20
	021 Call Array.Resize, X0, X1
	022 Move X8, [X21+56]
	023 Move X0, [X8+8]
	024 Move W8, [X0+309]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {30}
	029 Call 0x1C5D684
	030 Move W1, W20
	031 Call 0x1C17D6C
	032 Move W21, W31
	033 Move [X19], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W0, W21
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

Method: System.Int32 GrowBy(ref Unity.Collections.NativeArray`1<TValue> array, System.Int32 count, Unity.Collections.Allocator allocator = 4)

Disassembly:
	0x02179CD4 LDR X8, [X19 + 0x38]
	0x02179CD8 LDR X8, [X8 + 0x8]
	0x02179CDC LDR W22, [X8 + 0xFC]
	0x02179CE0 ADD X8, X31, 0x0
	0x02179CE4 ADD X9, X22, 0xF
	0x02179CE8 AND X9, X9, 0x1FFFFFFFF
	0x02179CEC SUB X23, X8, X9
	0x02179CF0 ADD X31, X23, 0x0
	0x02179CF4 CBZ X21, 0x2179D68
	0x02179CF8 TBZ X25, 0x1F, 0x2179D04
	0x02179CFC LDR W8, [X21 + 0x18]
	0x02179D00 SUB W25, W8, W24
	0x02179D04 ADD W8, W25, W24
	0x02179D08 CMP W8, W24
	0x02179D0C B.LE 0x2179D68
	0x02179D10 SXTW X24, W24
	0x02179D14 SXTW X25, W8
	0x02179D18 LDR W8, [X21 + 0x18]
	0x02179D1C CMP W24, W8
	0x02179D20 B.CS 0x2179D9C
	0x02179D24 LDR X8, [X21]
	0x02179D28 MOV X0, X23
	0x02179D2C MOV X2, X22
	0x02179D30 LDR W8, [X8 + 0x104]
	0x02179D34 NOP
	0x02179D38 MADD X8, X24, X8, X21
	0x02179D3C ADD X1, X8, 0x20
	0x02179D40 BL 0x3EB1AC0
	0x02179D44 LDR X8, [X19 + 0x38]
	0x02179D48 MOV X1, X23
	0x02179D4C LDR X0, [X8 + 0x8]
	0x02179D50 BL 0x1C16E04
	0x02179D54 CMP X0, X20
	0x02179D58 B.EQ 0x2179D6C
	0x02179D5C ADD X24, X24, 0x1
	0x02179D60 CMP X25, X24
	0x02179D64 B.NE 0x2179D18
	0x02179D68 MOVN W24, 0x0
	0x02179D6C LDR X8, [X26 + 0x28]
	0x02179D70 LDUR X9, [X29 - 0x8]
	0x02179D74 CMP X8, X9
	0x02179D78 B.NE 0x2179DA0
	0x02179D7C MOV W0, W24
	0x02179D80 ADD X31, X29, 0x0
	0x02179D84 LDP X20, X19, [X31 + 0x40]
	0x02179D88 LDP X22, X21, [X31 + 0x30]
	0x02179D8C LDP X24, X23, [X31 + 0x20]
	0x02179D90 LDP X26, X25, [X31 + 0x10]
	0x02179D94 LDP X29, X30, [X31], #0x50
	0x02179D98 RET
	0x02179D9C BL 0x1C16F28
	0x02179DA0 BL 0x3EB1B20
	0x02179DA4 SUB X31, X31, 0x40
	0x02179DA8 STP X30, X23, [X31 + 0x10]
	0x02179DAC STP X22, X21, [X31 + 0x20]
	0x02179DB0 STP X20, X19, [X31 + 0x30]
	0x02179DB4 STP X1, X2, [X31]
	0x02179DB8 LDR X8, [X5 + 0x38]
	0x02179DBC MOV X20, X5

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X8, [X3+56]
	009 Move X21, X3
	010 Move W22, W2
	011 Move W23, W1
	012 Move X19, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X21
	016 Call 0x1C5D6E0
	017 Move [X31+16], X31
	018 Move [X31+24], X31
	019 NotImplemented "Instruction LDRSW not yet implemented."
	020 Compare W20, 0
	021 JumpIfEqual {53}
	022 Move X8, [X21+56]
	023 Add W1, W20, W23
	024 Add X0, X31, 16
	025 Move W3, 1
	026 Move X4, [X8+32]
	027 Move W2, W22
	028 Call NativeArray`1<UInt64>..ctor, X0, X1, X2, X3
	029 Move X8, [X21+56]
	030 Move X0, [X31+16]
	031 Move X1, [X31+24]
	032 Move X2, [X8+40]
	033 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	034 Move X9, [X21+56]
	035 Move X8, [X19]
	036 Move X1, [X19+8]
	037 Move X22, X0
	038 Move X2, [X9+48]
	039 Move X0, X8
	040 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	041 Move X1, X0
	042 Move X2, X20
	043 ShiftRight X2, 61
	044 And X2, X2, 0xFFFFFFF
	045 Move X0, X22
	046 Move X3, X31
	047 Call UnsafeUtility.MemCpy, X0, X1, X2
	048 Move X8, [X21+56]
	049 Move X0, X19
	050 Move X1, [X8+64]
	051 Call NativeArray`1<UInt64>.Dispose, X0
	052 Move V0, [X31+1]
	053 Move [X31], X31
	054 Move [X31+8], X31
	055 Move X8, [X21+56]
	056 Add X0, X31, 0
	057 Move W3, 1
	058 Move W1, W23
	059 Move X4, [X8+32]
	060 Move W2, W22
	061 Call NativeArray`1<UInt64>..ctor, X0, X1, X2, X3
	062 Move V0, [X31]
	063 Move [X19], V0
	064 Move W0, W20
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X22, [X31+48]
	068 Move X21, [X31+56]
	069 Move X30, [X31+32]
	070 Move X23, [X31+40]
	071 Add X31, X31, 80
	072 Return X0

Method: System.Int32 GrowWithCapacity(ref TValue[] array, ref System.Int32 count, System.Int32 growBy, System.Int32 capacityIncrement = 10)

Disassembly:
	0x02179EE8 ADD X9, X22, 0xF
	0x02179EEC ADD X8, X31, 0x0
	0x02179EF0 AND X9, X9, 0x1FFFFFFFF
	0x02179EF4 SUB X24, X8, X9
	0x02179EF8 ADD X31, X24, 0x0
	0x02179EFC CBZ X21, 0x2179F94
	0x02179F00 TBZ X26, 0x1F, 0x2179F0C
	0x02179F04 LDR W8, [X21 + 0x18]
	0x02179F08 SUB W26, W8, W25
	0x02179F0C ADD W8, W26, W25
	0x02179F10 CMP W8, W25
	0x02179F14 B.LE 0x2179F94
	0x02179F18 SXTW X25, W25
	0x02179F1C SXTW X26, W8
	0x02179F20 LDR W8, [X21 + 0x18]
	0x02179F24 CMP W25, W8
	0x02179F28 B.CS 0x2179FCC
	0x02179F2C LDR X8, [X21]
	0x02179F30 MOV X0, X24
	0x02179F34 MOV X2, X22
	0x02179F38 LDR W8, [X8 + 0x104]
	0x02179F3C NOP
	0x02179F40 MADD X8, X25, X8, X21
	0x02179F44 ADD X1, X8, 0x20
	0x02179F48 BL 0x3EB1AC0
	0x02179F4C LDR X8, [X19 + 0x38]
	0x02179F50 LDR X0, [X8 + 0x8]
	0x02179F54 LDRB W9, [X0 + 0x135]
	0x02179F58 TBNZ X9, 0x0, 0x2179F64
	0x02179F5C BL 0x1C5C684
	0x02179F60 LDR X8, [X19 + 0x38]
	0x02179F64 LDR X1, [X8 + 0x18]
	0x02179F68 SUB X4, X29, 0x18
	0x02179F6C SUB X5, X29, 0xC
	0x02179F70 MOV X2, X23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X22, X4
	009 Move W21, W3
	010 Move W20, W2
	011 Move X19, X1
	012 Move X23, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X22
	016 Call 0x1C5D6E0
	017 Move X8, [X23]
	018 Compare X8, 0
	019 JumpIfEqual {21}
	020 Move W9, [X8+24]
	021 Move W9, W31
	022 Move W0, [X19]
	023 Add W8, W0, W20
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, [X22+56]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Move X0, X23
	029 Move X2, [X8+8]
	030 Move X8, [X2]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move W0, [X19]
	033 Add W8, W0, W20
	034 Move [X19], W8
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Return X0

Method: System.Int32 GrowWithCapacity(ref Unity.Collections.NativeArray`1<TValue> array, ref System.Int32 count, System.Int32 growBy, System.Int32 capacityIncrement = 10, Unity.Collections.Allocator allocator = 4)

Disassembly:
	0x02179F74 MOV X3, X20
	0x02179F78 STUR X24, [X29 - 0x18]
	0x02179F7C BL 0x1C17728
	0x02179F80 LDURB W8, [X29 - 0xC]
	0x02179F84 CBNZ W8, 0x2179F98
	0x02179F88 ADD X25, X25, 0x1
	0x02179F8C CMP X26, X25
	0x02179F90 B.NE 0x2179F20
	0x02179F94 MOVN W25, 0x0
	0x02179F98 LDR X8, [X27 + 0x28]
	0x02179F9C LDUR X9, [X29 - 0x8]
	0x02179FA0 CMP X8, X9
	0x02179FA4 B.NE 0x2179FD0
	0x02179FA8 MOV W0, W25
	0x02179FAC ADD X31, X29, 0x0
	0x02179FB0 LDP X20, X19, [X31 + 0x50]
	0x02179FB4 LDP X22, X21, [X31 + 0x40]
	0x02179FB8 LDP X24, X23, [X31 + 0x30]
	0x02179FBC LDP X26, X25, [X31 + 0x20]
	0x02179FC0 LDR X27, [X31 + 0x10]
	0x02179FC4 LDP X29, X30, [X31], #0x60
	0x02179FC8 RET
	0x02179FCC BL 0x1C16F28
	0x02179FD0 BL 0x3EB1B20
	0x02179FD4 SUB X31, X31, 0x140
	0x02179FD8 STP X29, X30, [X31 + 0x110]
	0x02179FDC STP X22, X21, [X31 + 0x120]
	0x02179FE0 STP X20, X19, [X31 + 0x130]
	0x02179FE4 LDR X8, [X3 + 0x38]
	0x02179FE8 MOV X22, X3
	0x02179FEC MOV X19, X2
	0x02179FF0 MOV W20, W1
	0x02179FF4 MOV X21, X0
	0x02179FF8 CBNZ X8, 0x217A004
	0x02179FFC MOV X0, X22
	0x0217A000 BL 0x1C5C6E0
	0x0217A004 LDR X8, [X21]
	0x0217A008 CBZ X8, 0x217A08C
	0x0217A00C LDR X9, [X22 + 0x38]
	0x0217A010 LDR W22, [X8 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X5+56]
	009 Move X23, X5
	010 Move W21, W4
	011 Move W22, W3
	012 Move W20, W2
	013 Move X19, X1
	014 Move X24, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {20}
	017 Move X0, X23
	018 Call 0x1C5D6E0
	019 Move X8, [X23+56]
	020 Move X1, [X8+8]
	021 Move X0, X24
	022 Move X8, [X1]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move W8, W0
	025 Move W0, [X19]
	026 Add W9, W0, W20
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X23+56]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Move X0, X24
	032 Move X3, [X8+24]
	033 Move W2, W21
	034 Move X8, [X3]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move W0, [X19]
	037 Add W9, W0, W20
	038 Move [X19], W9
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 Move X30, [X31+64]
	046 Return X0

Method: TValue[] Join(TValue value, TValue[] values)

Disassembly:
	0x0217B804 LDR W8, [X19 + 0x18]
	0x0217B808 CMP X28, X8
	0x0217B80C B.CS 0x217B954
	0x0217B810 LDR X8, [X19]
	0x0217B814 MOV X0, X22
	0x0217B818 MOV X2, X21
	0x0217B81C LDR W8, [X8 + 0x104]
	0x0217B820 NOP
	0x0217B824 MADD X8, X28, X8, X19
	0x0217B828 ADD X1, X8, 0x20
	0x0217B82C BL 0x3EB1AC0
	0x0217B830 LDR X8, [X20 + 0x38]
	0x0217B834 MOV X0, X25
	0x0217B838 MOV X2, X22
	0x0217B83C MOV W3, W21
	0x0217B840 LDR X8, [X8 + 0x40]
	0x0217B844 LDR X1, [X8 + 0x80]
	0x0217B848 BL 0x1C16D1C
	0x0217B84C LDR X8, [X20 + 0x38]
	0x0217B850 LDR X0, [X8 + 0x60]
	0x0217B854 LDRB W8, [X0 + 0x135]
	0x0217B858 TBNZ X8, 0x0, 0x217B860
	0x0217B85C BL 0x1C5C684
	0x0217B860 BL 0x1C16F10
	0x0217B864 LDR X8, [X20 + 0x38]
	0x0217B868 MOV X1, X25
	0x0217B86C MOV X26, X0
	0x0217B870 LDR X3, [X8 + 0x68]
	0x0217B874 LDR X2, [X8 + 0x58]
	0x0217B878 LDR X9, [X3]
	0x0217B87C BLR X9
	0x0217B880 LDR X8, [X20 + 0x38]
	0x0217B884 MOV X0, X24
	0x0217B888 MOV X1, X26
	0x0217B88C LDR X2, [X8 + 0x70]
	0x0217B890 LDR X8, [X2]
	0x0217B894 BLR X8
	0x0217B898 TBNZ X0, 0x0, 0x217B8F4
	0x0217B89C LDR X8, [X20 + 0x38]
	0x0217B8A0 MOV X0, X25
	0x0217B8A4 LDR X8, [X8 + 0x40]
	0x0217B8A8 LDR X1, [X8 + 0x80]
	0x0217B8AC BL 0x1C16D18
	0x0217B8B0 MOV X1, X0
	0x0217B8B4 MOV X0, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X22, X2
	008 Move X19, X1
	009 Move X20, X0
	010 Compare X8, 0
	011 JumpIfEqual {17}
	012 Compare X19, 0
	013 JumpIfEqual {21}
	014 Move W8, [X19+24]
	015 Add W21, W8, 1
	016 Move X21, X31
	017 Move X0, X22
	018 Call 0x1C5D6E0
	019 Compare X19, 0
	020 JumpIfNotEqual {14}
	021 Move W21, 1
	022 Move X8, [X22+56]
	023 Move X0, [X8+16]
	024 Move W8, [X0+309]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {30}
	029 Call 0x1C5D684
	030 Move W1, W21
	031 Call 0x1C17D6C
	032 Compare X0, 0
	033 JumpIfEqual {55}
	034 Move W8, [X0+24]
	035 Move X21, X0
	036 Compare W8, 0
	037 JumpIfEqual {56}
	038 Move [X21+32], X20
	039 Compare X19, 0
	040 JumpIfEqual {48}
	041 Move W4, [X19+24]
	042 Move W3, 1
	043 Move X0, X19
	044 Move W1, W31
	045 Move X2, X21
	046 Move X5, X31
	047 Call Array.Copy, X0, X1, X2, X3, X4
	048 Move X0, X21
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0
	055 Call 0x1C17F20
	056 Call 0x1C17F28

Method: TValue[] Merge(TValue[] first, TValue[] second)

Disassembly:
	0x0217C294 LDR X1, [X24, X23, LSL #3]
	0x0217C298 LDR X8, [X19 + 0x18]
	0x0217C29C LDR X0, [X19 + 0x40]
	0x0217C2A0 LDR X2, [X19 + 0x28]
	0x0217C2A4 BLR X8
	0x0217C2A8 CBZ X21, 0x217C2F8
	0x0217C2AC LDR W8, [X21 + 0x18]
	0x0217C2B0 CMP X23, X8
	0x0217C2B4 B.CS 0x217C2FC
	0x0217C2B8 ADD X23, X23, 0x1
	0x0217C2BC STP X0, X1, [X25 - 0x8]
	0x0217C2C0 CMP X22, X23
	0x0217C2C4 ADD X25, X25, 0x10
	0x0217C2C8 B.NE 0x217C284
	0x0217C2CC B 0x217C2E0
	0x0217C2D0 MOV X0, X21
	0x0217C2D4 BL 0x1C5C6E0
	0x0217C2D8 CBNZ X20, 0x217C248
	0x0217C2DC MOV X21, X31
	0x0217C2E0 MOV X0, X21
	0x0217C2E4 LDP X20, X19, [X31 + 0x30]
	0x0217C2E8 LDP X22, X21, [X31 + 0x20]
	0x0217C2EC LDP X24, X23, [X31 + 0x10]
	0x0217C2F0 LDP X30, X25, [X31], #0x40
	0x0217C2F4 RET
	0x0217C2F8 BL 0x1C16F20
	0x0217C2FC BL 0x1C16F28
	0x0217C300 STP X29, X30, [X31 - 0x60]!
	0x0217C304 STP X28, X27, [X31 + 0x10]
	0x0217C308 STP X26, X25, [X31 + 0x20]
	0x0217C30C STP X24, X23, [X31 + 0x30]
	0x0217C310 STP X22, X21, [X31 + 0x40]
	0x0217C314 STP X20, X19, [X31 + 0x50]
	0x0217C318 ADD X29, X31, 0x0
	0x0217C31C SUB X31, X31, 0x30
	0x0217C320 MRS X22, 0xC000
	0x0217C324 LDR X8, [X22 + 0x28]
	0x0217C328 MOV X19, X2
	0x0217C32C MOV X20, X1
	0x0217C330 MOV X21, X0
	0x0217C334 STUR X8, [X29 - 0x8]
	0x0217C338 LDR X8, [X2 + 0x38]
	0x0217C33C CBNZ X8, 0x217C34C
	0x0217C340 MOV X0, X19
	0x0217C344 BL 0x1C5C6E0
	0x0217C348 LDR X8, [X19 + 0x38]
	0x0217C34C LDR X9, [X8 + 0x18]
	0x0217C350 LDR X10, [X8 + 0x28]
	0x0217C354 LDR W11, [X9 + 0xFC]
	0x0217C358 LDR W23, [X10 + 0xFC]
	0x0217C35C ADD X9, X31, 0x0
	0x0217C360 ADD X10, X11, 0xF
	0x0217C364 AND X10, X10, 0x1FFFFFFFF
	0x0217C368 SUB X24, X9, X10
	0x0217C36C STUR X11, [X29 - 0x20]
	0x0217C370 ADD X31, X24, 0x0
	0x0217C374 ADD X10, X23, 0xF
	0x0217C378 ADD X9, X31, 0x0
	0x0217C37C AND X10, X10, 0x1FFFFFFFF
	0x0217C380 SUB X25, X9, X10
	0x0217C384 ADD X31, X25, 0x0
	0x0217C388 CBZ X21, 0x217C48C
	0x0217C38C LDR X0, [X8 + 0x8]
	0x0217C390 LDR X27, [X21 + 0x18]
	0x0217C394 LDRB W8, [X0 + 0x135]
	0x0217C398 TBNZ X8, 0x0, 0x217C3A0
	0x0217C39C BL 0x1C5C684
	0x0217C3A0 MOV W1, W27
	0x0217C3A4 BL 0x1C16D6C
	0x0217C3A8 CMP W27, 0x1
	0x0217C3AC MOV X26, X0
	0x0217C3B0 B.LT 0x217C490
	0x0217C3B4 MOV X28, X31
	0x0217C3B8 AND X27, X27, 0x0
	0x0217C3BC STUR X22, [X29 - 0x28]
	0x0217C3C0 LDR W8, [X21 + 0x18]
	0x0217C3C4 CMP X28, X8
	0x0217C3C8 B.CS 0x217C4C4
	0x0217C3CC LDR X8, [X21]
	0x0217C3D0 LDUR X2, [X29 - 0x20]
	0x0217C3D4 MOV X0, X24
	0x0217C3D8 LDR W8, [X8 + 0x104]
	0x0217C3DC NOP
	0x0217C3E0 MADD X8, X28, X8, X21
	0x0217C3E4 ADD X1, X8, 0x20
	0x0217C3E8 BL 0x3EB1AC0
	0x0217C3EC CBZ X20, 0x217C4C8
	0x0217C3F0 LDR X8, [X19 + 0x38]
	0x0217C3F4 LDR X9, [X8 + 0x18]
	0x0217C3F8 LDR W10, [X9 + 0x28]
	0x0217C3FC MOV X9, X24
	0x0217C400 TBNZ X10, 0x1F, 0x217C408
	0x0217C404 LDR X9, [X24]
	0x0217C408 LDR X1, [X8 + 0x20]
	0x0217C40C SUB X3, X29, 0x18
	0x0217C410 MOV X2, X20
	0x0217C414 MOV X4, X25
	0x0217C418 LDR X0, [X1]
	0x0217C41C STP X9, X25, [X29 - 0x18]
	0x0217C420 LDR X8, [X1 + 0x10]
	0x0217C424 BLR X8
	0x0217C428 CBZ X26, 0x217C4C8
	0x0217C42C LDR W22, [X26 + 0x18]
	0x0217C430 CMP X28, X22
	0x0217C434 B.CS 0x217C4C4
	0x0217C438 LDR X8, [X26]
	0x0217C43C MOV X1, X25
	0x0217C440 MOV X2, X23
	0x0217C444 LDR W8, [X8 + 0x104]
	0x0217C448 NOP
	0x0217C44C MADD X8, X28, X8, X26
	0x0217C450 ADD X0, X8, 0x20
	0x0217C454 BL 0x3EB1AC0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X2+56]
	010 Move X20, X2
	011 Move X19, X1
	012 Move X22, X0
	013 Compare X8, 0
	014 JumpIfEqual {17}
	015 Compare X22, 0
	016 JumpIfNotEqual {21}
	017 Move X0, X20
	018 Call 0x1C5D6E0
	019 Compare X22, 0
	020 JumpIfEqual {130}
	021 Compare X19, 0
	022 JumpIfEqual {129}
	023 Move X8, [X20+56]
	024 Move X0, [X8+8]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Call 0x1C17F10
	032 Move X8, [X20+56]
	033 Move X21, X0
	034 Move X1, [X8+16]
	035 Call List`1<InternedString>..ctor, X0
	036 Compare X21, 0
	037 JumpIfEqual {140}
	038 Move X8, [X20+56]
	039 Move X0, X21
	040 Move X1, X22
	041 Move X2, [X8+24]
	042 Call List`1<InternedString>.AddRange, X0, X1
	043 Move W9, [X19+24]
	044 Move X8, [X20+56]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X24, X31
	047 Add X25, X19, 32
	048 Move X0, [X8+40]
	049 Move W8, [X0+309]
	050 Move TEMP, X8
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {55}
	054 Call 0x1C5D684
	055 Call 0x1C17F10
	056 Move X8, [X20+56]
	057 Move X22, X0
	058 Move X1, [X8+48]
	059 Call 0x2375E00, X0
	060 Move W8, [X19+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Compare X22, 0
	063 JumpIfEqual {140}
	064 Move V0, [X25]
	065 Move [X22+1], V0
	066 Move X8, [X20+56]
	067 Move X0, [X8+72]
	068 Move W8, [X0+309]
	069 Move TEMP, X8
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {74}
	073 Call 0x1C5D684
	074 Call 0x1C17F10
	075 Move X8, [X20+56]
	076 Move X1, X22
	077 Move X23, X0
	078 Move X2, [X8+64]
	079 Move X3, [X8+80]
	080 Call Predicate`1<InternedString>..ctor, X0, X1, X2
	081 Move X8, [X20+56]
	082 Move X0, X21
	083 Move X1, X23
	084 Move X2, [X8+88]
	085 Call List`1<InternedString>.Exists, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {113}
	090 Move X9, [X20+56]
	091 Move W10, [X21+28]
	092 Move X1, [X22+16]
	093 Move X2, [X22+24]
	094 Move X8, [X21+16]
	095 Move X9, [X9+96]
	096 Add W10, W10, 1
	097 Move [X21+28], W10
	098 Compare X8, 0
	099 JumpIfEqual {140}
	100 NotImplemented "Instruction LDRSW not yet implemented."
	101 Move W11, [X8+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Add W9, W10, 1
	104 Add X8, X8, X10
	105 Move [X21+24], W9
	106 Move [X8+32], X1
	107 Move [X8+40], X2
	108 Move X8, [X9+32]
	109 Move X0, X21
	110 Move X8, [X8+192]
	111 Move X3, [X8+112]
	112 Call List`1<InternedString>.AddWithResize, X0, X1
	113 NotImplemented "Instruction LDRSW not yet implemented."
	114 Move X8, [X20+56]
	115 Add X24, X24, 1
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X1, [X8+104]
	118 Move X0, X21
	119 Move X20, [X31+48]
	120 Move X19, [X31+56]
	121 Move X22, [X31+32]
	122 Move X21, [X31+40]
	123 Move X24, [X31+16]
	124 Move X23, [X31+24]
	125 Move X30, [X31+64]
	126 Move X25, [X31+72]
	127 Call List`1<InternedString>.ToArray, X0
	128 Return X0
	129 Move X19, X22
	130 Move X0, X19
	131 Move X20, [X31+48]
	132 Move X19, [X31+56]
	133 Move X22, [X31+32]
	134 Move X21, [X31+40]
	135 Move X24, [X31+16]
	136 Move X23, [X31+24]
	137 Move X30, [X31+64]
	138 Move X25, [X31+72]
	139 Return X0
	140 Call 0x1C17F20
	141 Call 0x1C17F28

Method: TValue[] Merge(TValue[] first, TValue[] second, System.Collections.Generic.IEqualityComparer`1<TValue> comparer)

Disassembly:
	0x0217C6AC STR X30, [X31 - 0x30]!
	0x0217C6B0 STP X22, X21, [X31 + 0x10]
	0x0217C6B4 STP X20, X19, [X31 + 0x20]
	0x0217C6B8 LDR X8, [X3 + 0x38]
	0x0217C6BC MOV X21, X3
	0x0217C6C0 MOV W19, W2
	0x0217C6C4 MOV W20, W1
	0x0217C6C8 MOV X22, X0
	0x0217C6CC CBNZ X8, 0x217C6D8
	0x0217C6D0 MOV X0, X21
	0x0217C6D4 BL 0x1C5C6E0
	0x0217C6D8 CBZ X22, 0x217C718
	0x0217C6DC LDR W8, [X22 + 0x18]
	0x0217C6E0 CMP W8, W20
	0x0217C6E4 B.LS 0x217C714
	0x0217C6E8 CMP W8, W19
	0x0217C6EC B.LS 0x217C714
	0x0217C6F0 LDR X8, [X21 + 0x38]
	0x0217C6F4 LDR X2, [X8 + 0x10]
	0x0217C6F8 ADD X8, X22, 0x20
	0x0217C6FC ADD X0, X8, W20, 0x2, SXTW
	0x0217C700 ADD X1, X8, W19, 0x2, SXTW
	0x0217C704 LDP X20, X19, [X31 + 0x20]
	0x0217C708 LDP X22, X21, [X31 + 0x10]
	0x0217C70C LDR X30, [X31], #0x30
	0x0217C710 B 0x22185D4
	0x0217C714 BL 0x1C16F28
	0x0217C718 BL 0x1C16F20
	0x0217C71C LDR X8, [X0, W3, SXTW]
	0x0217C720 LDR X9, [X0, W2, SXTW]
	0x0217C724 STR X8, [X0, W2, SXTW]
	0x0217C728 STR X9, [X0, W3, SXTW]
	0x0217C72C RET
	0x0217C730 STP X29, X30, [X31 - 0x60]!
	0x0217C734 STP X28, X27, [X31 + 0x10]
	0x0217C738 STP X26, X25, [X31 + 0x20]
	0x0217C73C STP X24, X23, [X31 + 0x30]
	0x0217C740 STP X22, X21, [X31 + 0x40]
	0x0217C744 STP X20, X19, [X31 + 0x50]
	0x0217C748 ADD X29, X31, 0x0
	0x0217C74C SUB X31, X31, 0x30
	0x0217C750 MRS X27, 0xC000
	0x0217C754 LDR X8, [X27 + 0x28]
	0x0217C758 MOV X20, X4
	0x0217C75C MOV W19, W3
	0x0217C760 MOV W21, W2
	0x0217C764 STUR X8, [X29 - 0x8]
	0x0217C768 STP X0, X1, [X29 - 0x30]
	0x0217C76C LDR X28, [X4 + 0x38]
	0x0217C770 CBNZ X28, 0x217C780
	0x0217C774 MOV X0, X20
	0x0217C778 BL 0x1C5C6E0
	0x0217C77C LDR X28, [X20 + 0x38]
	0x0217C780 LDR X8, [X28 + 0x18]
	0x0217C784 LDR W22, [X8 + 0xFC]
	0x0217C788 ADD X8, X31, 0x0
	0x0217C78C ADD X9, X22, 0xF
	0x0217C790 AND X9, X9, 0x1FFFFFFFF
	0x0217C794 SUB X26, X8, X9
	0x0217C798 ADD X31, X26, 0x0
	0x0217C79C ADD X8, X31, 0x0
	0x0217C7A0 SUB X24, X8, X9
	0x0217C7A4 ADD X31, X24, 0x0
	0x0217C7A8 ADD X8, X31, 0x0
	0x0217C7AC SUB X23, X8, X9
	0x0217C7B0 ADD X31, X23, 0x0
	0x0217C7B4 ADD X8, X31, 0x0
	0x0217C7B8 SUB X25, X8, X9
	0x0217C7BC ADD X31, X25, 0x0
	0x0217C7C0 MOV X0, X25
	0x0217C7C4 MOV W1, W31
	0x0217C7C8 MOV X2, X22
	0x0217C7CC BL 0x3EB1B10
	0x0217C7D0 LDR X1, [X28 + 0x8]
	0x0217C7D4 SUB X28, X29, 0xC
	0x0217C7D8 SUB X2, X29, 0x30
	0x0217C7DC SUB X3, X29, 0x20
	0x0217C7E0 LDR X0, [X1]
	0x0217C7E4 STUR W21, [X29 - 0xC]
	0x0217C7E8 STP X28, X26, [X29 - 0x20]
	0x0217C7EC LDR X8, [X1 + 0x10]
	0x0217C7F0 MOV X4, X26
	0x0217C7F4 BLR X8
	0x0217C7F8 MOV X0, X25
	0x0217C7FC MOV X1, X26
	0x0217C800 MOV X2, X22
	0x0217C804 BL 0x3EB1AC0
	0x0217C808 LDR X8, [X20 + 0x38]
	0x0217C80C SUB X2, X29, 0x30
	0x0217C810 SUB X3, X29, 0x20
	0x0217C814 MOV X4, X24
	0x0217C818 LDR X1, [X8 + 0x8]
	0x0217C81C LDR X0, [X1]
	0x0217C820 STUR W19, [X29 - 0xC]
	0x0217C824 STP X28, X24, [X29 - 0x20]
	0x0217C828 LDR X8, [X1 + 0x10]
	0x0217C82C BLR X8
	0x0217C830 LDR X8, [X20 + 0x38]
	0x0217C834 SUB X2, X29, 0x30
	0x0217C838 SUB X3, X29, 0x20
	0x0217C83C MOV X4, X24
	0x0217C840 LDR X1, [X8 + 0x20]
	0x0217C844 LDR X0, [X1]
	0x0217C848 STUR W21, [X29 - 0xC]
	0x0217C84C STP X28, X24, [X29 - 0x20]
	0x0217C850 LDR X8, [X1 + 0x10]
	0x0217C854 BLR X8
	0x0217C858 MOV X0, X23
	0x0217C85C MOV X1, X25
	0x0217C860 MOV X2, X22
	0x0217C864 BL 0x3EB1AC0
	0x0217C868 LDR X8, [X20 + 0x38]
	0x0217C86C SUB X2, X29, 0x30
	0x0217C870 SUB X3, X29, 0x20
	0x0217C874 MOV X4, X23
	0x0217C878 LDR X1, [X8 + 0x20]
	0x0217C87C LDR X0, [X1]
	0x0217C880 STUR W19, [X29 - 0xC]
	0x0217C884 STP X28, X23, [X29 - 0x20]
	0x0217C888 LDR X8, [X1 + 0x10]
	0x0217C88C BLR X8
	0x0217C890 LDR X8, [X27 + 0x28]
	0x0217C894 LDUR X9, [X29 - 0x8]
	0x0217C898 CMP X8, X9
	0x0217C89C B.NE 0x217C8C0
	0x0217C8A0 ADD X31, X29, 0x0
	0x0217C8A4 LDP X20, X19, [X31 + 0x50]
	0x0217C8A8 LDP X22, X21, [X31 + 0x40]
	0x0217C8AC LDP X24, X23, [X31 + 0x30]
	0x0217C8B0 LDP X26, X25, [X31 + 0x20]
	0x0217C8B4 LDP X28, X27, [X31 + 0x10]
	0x0217C8B8 LDP X29, X30, [X31], #0x60
	0x0217C8BC RET
	0x0217C8C0 BL 0x3EB1B20
	0x0217C8C4 STR X30, [X31 - 0x30]!
	0x0217C8C8 STP X22, X21, [X31 + 0x10]
	0x0217C8CC STP X20, X19, [X31 + 0x20]
	0x0217C8D0 LDR X8, [X3 + 0x38]
	0x0217C8D4 MOV X22, X3
	0x0217C8D8 MOV W20, W2
	0x0217C8DC MOV W19, W1
	0x0217C8E0 MOV X21, X0
	0x0217C8E4 CBNZ X8, 0x217C8F0
	0x0217C8E8 MOV X0, X22
	0x0217C8EC BL 0x1C5C6E0
	0x0217C8F0 CBZ X21, 0x217C948
	0x0217C8F4 LDR W8, [X21 + 0x18]
	0x0217C8F8 CMP W8, W19
	0x0217C8FC B.LS 0x217C944
	0x0217C900 CMP W8, W20
	0x0217C904 B.LS 0x217C944
	0x0217C908 LDR X8, [X22 + 0x38]
	0x0217C90C LDR X9, [X21]
	0x0217C910 SXTW X10, W19
	0x0217C914 ADD X11, X21, 0x20
	0x0217C918 LDR X2, [X8 + 0x10]
	0x0217C91C LDR W9, [X9 + 0x104]
	0x0217C920 SXTW X8, W20
	0x0217C924 LDP X20, X19, [X31 + 0x20]
	0x0217C928 LDR X3, [X2]
	0x0217C92C LDP X22, X21, [X31 + 0x10]
	0x0217C930 NOP
	0x0217C934 MADD X0, X9, X10, X11
	0x0217C938 MADD X1, X9, X8, X11
	0x0217C93C LDR X30, [X31], #0x30
	0x0217C940 BR X3
	0x0217C944 BL 0x1C16F28
	0x0217C948 BL 0x1C16F20
	0x0217C94C STR X30, [X31 - 0x30]!
	0x0217C950 STP X22, X21, [X31 + 0x10]
	0x0217C954 STP X20, X19, [X31 + 0x20]
	0x0217C958 LDR X8, [X3 + 0x38]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 16
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X27+40]
	017 Move X20, X3
	018 Move X24, X2
	019 Move X19, X1
	020 Move [X29-8], X8
	021 Move X8, [X3+56]
	022 Move X25, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X20
	026 Call 0x1C5D6E0
	027 Move X8, [X20+56]
	028 Move X9, [X8+80]
	029 Move W21, [X9+252]
	030 Add X9, X31, 0
	031 Add X10, X21, 15
	032 And X10, X10, 0x1FFFFFFFF
	033 Subtract X22, X9, X10
	034 Add X31, X22, 0
	035 Move X0, [X8]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Call 0x1C17F10
	043 Move X8, [X20+56]
	044 Move X23, X0
	045 Move X1, [X8+8]
	046 Move X8, [X1]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Compare X23, 0
	049 JumpIfEqual {202}
	050 Move [X23+16], X24
	051 Compare X25, 0
	052 JumpIfEqual {184}
	053 Compare X19, 0
	054 JumpIfEqual {184}
	055 Move X8, [X20+56]
	056 Move X0, [X8+32]
	057 Move W8, [X0+309]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {63}
	062 Call 0x1C5D684
	063 Call 0x1C17F10
	064 Move X8, [X20+56]
	065 Move X24, X0
	066 Move X1, [X8+40]
	067 Move X8, [X1]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Compare X24, 0
	070 JumpIfEqual {202}
	071 Move X8, [X20+56]
	072 Move X0, X24
	073 Move X1, X25
	074 Move X2, [X8+48]
	075 Move X8, [X2]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move W9, [X19+24]
	078 Move X8, [X20+56]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X28, X31
	081 Move X0, [X8+64]
	082 Move W8, [X0+309]
	083 Move TEMP, X8
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {88}
	087 Call 0x1C5D684
	088 Call 0x1C17F10
	089 Move X8, [X20+56]
	090 Move X25, X0
	091 Move X1, [X8+72]
	092 Move X8, [X1]
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Compare X25, 0
	095 JumpIfEqual {202}
	096 Move X8, [X20+56]
	097 Move W1, 8
	098 Move X8, [X8+64]
	099 Move X8, [X8+128]
	100 Add X26, X8, 32
	101 Move X0, X26
	102 Call 0x1C17D14
	103 Move X0, X25
	104 Move X1, X26
	105 Call 0x1C17D18
	106 Move [X0], X23
	107 Move W8, [X19+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X8, [X19]
	110 Move X0, X22
	111 Move X2, X21
	112 Move W8, [X8+260]
	113 NotImplemented "Instruction NOP not yet implemented."
	114 NotImplemented "Instruction MADD not yet implemented."
	115 Add X1, X8, 32
	116 Call 0x3EB2AC0
	117 Move X8, [X20+56]
	118 Move X0, X25
	119 Move X2, X22
	120 Move W3, W21
	121 Move X8, [X8+64]
	122 Move X1, [X8+128]
	123 Call 0x1C17D1C
	124 Move X8, [X20+56]
	125 Move X0, [X8+96]
	126 Move W8, [X0+309]
	127 Move TEMP, X8
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {132}
	131 Call 0x1C5D684
	132 Call 0x1C17F10
	133 Move X8, [X20+56]
	134 Move X1, X25
	135 Move X26, X0
	136 Move X3, [X8+104]
	137 Move X2, [X8+88]
	138 Move X9, [X3]
	139 NotImplemented "Instruction BLR not yet implemented."
	140 Move X8, [X20+56]
	141 Move X0, X24
	142 Move X1, X26
	143 Move X2, [X8+112]
	144 Move X8, [X2]
	145 NotImplemented "Instruction BLR not yet implemented."
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfEqual {175}
	150 Move X8, [X20+56]
	151 Move X0, X25
	152 Move X8, [X8+64]
	153 Move X1, [X8+128]
	154 Call 0x1C17D18
	155 Move X1, X0
	156 Move X0, X22
	157 Move X2, X21
	158 Call 0x3EB2AC0
	159 Move X8, [X20+56]
	160 Move X4, X22
	161 Move X9, [X8+80]
	162 Move W9, [X9+40]
	163 Move TEMP, X9
	164 And TEMP, TEMP, -2147483648
	165 Compare TEMP, -2147483648
	166 JumpIfEqual {168}
	167 Move X4, [X22]
	168 Move X1, [X8+120]
	169 Subtract X3, X29, 16
	170 Move X2, X24
	171 Move X0, [X1]
	172 Move [X29-16], X4
	173 Move X8, [X1+16]
	174 NotImplemented "Instruction BLR not yet implemented."
	175 NotImplemented "Instruction LDRSW not yet implemented."
	176 Move X8, [X20+56]
	177 Add X28, X28, 1
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move X1, [X8+128]
	180 Move X0, X24
	181 Move X8, [X1]
	182 NotImplemented "Instruction BLR not yet implemented."
	183 Move X19, X0
	184 Move X8, [X27+40]
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move X0, X19
	188 Add X31, X29, 0
	189 Move X20, [X31+80]
	190 Move X19, [X31+88]
	191 Move X22, [X31+64]
	192 Move X21, [X31+72]
	193 Move X24, [X31+48]
	194 Move X23, [X31+56]
	195 Move X26, [X31+32]
	196 Move X25, [X31+40]
	197 Move X28, [X31+16]
	198 Move X27, [X31+24]
	199 Move X29, [X31+96]
	200 Move X30, [X31+104]
	201 Return X0
	202 Call 0x1C17F20
	203 Call 0x1C17F28
	204 Call 0x3EB2B20

Method: System.Void EraseAt(ref TValue[] array, System.Int32 index)

Disassembly:
	0x02177FC4 ADD X1, X31, 0x0
	0x02177FC8 MOVZ W2, 0x220
	0x02177FCC BL 0x3EB1AC0
	0x02177FD0 LDR W8, [X19]
	0x02177FD4 SUB W8, W8, 0x1
	0x02177FD8 STR W8, [X19]
	0x02177FDC ADD X31, X31, 0x440
	0x02177FE0 LDP X20, X19, [X31 + 0x20]
	0x02177FE4 LDP X22, X21, [X31 + 0x10]
	0x02177FE8 LDP X29, X30, [X31], #0x30
	0x02177FEC RET
	0x02177FF0 BL 0x1C16F20
	0x02177FF4 BL 0x1C16F28
	0x02177FF8 STR X30, [X31 - 0x20]!
	0x02177FFC STP X20, X19, [X31 + 0x10]
	0x02178000 LDR W8, [X1]
	0x02178004 MOV X19, X1
	0x02178008 MOV X20, X0
	0x0217800C SUB W9, W8, 0x1
	0x02178010 CMP W9, W2
	0x02178014 B.LE 0x2178038
	0x02178018 ORN W9, W31, W2, 0x0
	0x0217801C MOV W3, W2
	0x02178020 ADD W1, W2, 0x1
	0x02178024 ADD W4, W8, W9
	0x02178028 MOV X0, X20
	0x0217802C MOV X2, X20
	0x02178030 MOV X5, X31
	0x02178034 BL 0x339FCE8
	0x02178038 CBZ X20, 0x2178068
	0x0217803C LDR W8, [X19]
	0x02178040 LDR W9, [X20 + 0x18]
	0x02178044 SUB W8, W8, 0x1
	0x02178048 CMP W8, W9
	0x0217804C B.CS 0x217806C
	0x02178050 ADD X9, X20, W8, 0x2, SXTW
	0x02178054 STR W31, [X9 + 0x20]
	0x02178058 STR W8, [X19]
	0x0217805C LDP X20, X19, [X31 + 0x10]
	0x02178060 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X20, X2
	008 Move W21, W1
	009 Move X19, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X20
	013 Call 0x1C5D6E0
	014 Move X0, [X19]
	015 Compare X0, 0
	016 JumpIfEqual {48}
	017 Move W8, [X0+24]
	018 Compare W21, 0
	019 JumpIfNotEqual {28}
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move [X19], X31
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X22, [X31+16]
	025 Move X21, [X31+24]
	026 Move X30, [X31+48]
	027 Return 
	028 Subtract W22, W8, 1
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction ORN not yet implemented."
	031 Add W1, W21, 1
	032 Add W4, W8, W9
	033 Move X2, X0
	034 Move W3, W21
	035 Move X5, X31
	036 Call Array.Copy, X0, X1, X2, X3, X4
	037 Move X8, [X20+56]
	038 Move X0, X19
	039 Move W1, W22
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X2, [X8+8]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Call Array.Resize, X0, X1
	047 Return 
	048 Call 0x1C17F20

Method: System.Void EraseAtWithCapacity(TValue[] array, ref System.Int32 count, System.Int32 index)

Disassembly:
	0x02178C40 STR X0, [X19]
	0x02178C44 LDP X20, X19, [X31 + 0x10]
	0x02178C48 MOV W0, W21
	0x02178C4C LDP X30, X21, [X31], #0x20
	0x02178C50 RET
	0x02178C54 STP X30, X21, [X31 - 0x20]!
	0x02178C58 STP X20, X19, [X31 + 0x10]
	0x02178C5C LDR X8, [X2 + 0x38]
	0x02178C60 MOV X21, X2
	0x02178C64 MOV W20, W1
	0x02178C68 MOV X19, X0
	0x02178C6C CBNZ X8, 0x2178C78
	0x02178C70 MOV X0, X21
	0x02178C74 BL 0x1C5C6E0
	0x02178C78 LDR X8, [X19]
	0x02178C7C CBZ X8, 0x2178CA0
	0x02178C80 LDR X9, [X21 + 0x38]
	0x02178C84 LDR W21, [X8 + 0x18]
	0x02178C88 MOV X0, X19
	0x02178C8C LDR X2, [X9 + 0x10]
	0x02178C90 ADD W1, W21, W20
	0x02178C94 LDR X8, [X2]
	0x02178C98 BLR X8
	0x02178C9C B 0x2178CC4
	0x02178CA0 LDR X8, [X21 + 0x38]
	0x02178CA4 LDR X0, [X8 + 0x8]
	0x02178CA8 LDRB W8, [X0 + 0x135]
	0x02178CAC TBNZ X8, 0x0, 0x2178CB4
	0x02178CB0 BL 0x1C5C684
	0x02178CB4 MOV W1, W20
	0x02178CB8 BL 0x1C16D6C
	0x02178CBC MOV W21, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X1]
	005 Move X19, X1
	006 Move X20, X0
	007 Subtract W9, W8, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction ORN not yet implemented."
	010 Move W3, W2
	011 Add W1, W2, 1
	012 Add W4, W8, W9
	013 Move X0, X20
	014 Move X2, X20
	015 Move X5, X31
	016 Call Array.Copy, X0, X1, X2, X3, X4
	017 Compare X20, 0
	018 JumpIfEqual {32}
	019 Move W8, [X19]
	020 Move W9, [X20+24]
	021 Subtract W8, W8, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X8, X20, W8
	024 Move [X8+32], X31
	025 Move W8, [X19]
	026 Subtract W8, W8, 1
	027 Move [X19], W8
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 
	032 Call 0x1C17F20
	033 Call 0x1C17F28

Method: System.Void EraseAtWithCapacity(Unity.Collections.NativeArray`1<TValue> array, ref System.Int32 count, System.Int32 index)

Disassembly:
	0x021790F0 MOV X19, X3
	0x021790F4 MOV W25, W2
	0x021790F8 MOV X21, X0
	0x021790FC STUR X8, [X29 - 0x8]
	0x02179100 LDR X8, [X3 + 0x38]
	0x02179104 CBNZ X8, 0x2179114
	0x02179108 MOV X0, X19
	0x0217910C BL 0x1C5C6E0
	0x02179110 LDR X8, [X19 + 0x38]
	0x02179114 LDR X8, [X8 + 0x8]
	0x02179118 LDR W22, [X8 + 0xFC]
	0x0217911C ADD X8, X31, 0x0
	0x02179120 ADD X9, X22, 0xF
	0x02179124 AND X9, X9, 0x1FFFFFFFF
	0x02179128 SUB X23, X8, X9
	0x0217912C ADD X31, X23, 0x0
	0x02179130 ADD X8, X31, 0x0
	0x02179134 SUB X24, X8, X9
	0x02179138 ADD X31, X24, 0x0
	0x0217913C ADD X8, X31, 0x0
	0x02179140 SUB X0, X8, X9
	0x02179144 ADD X31, X0, 0x0
	0x02179148 MOV W1, W31
	0x0217914C MOV X2, X22
	0x02179150 STUR X0, [X29 - 0x10]
	0x02179154 BL 0x3EB1B10
	0x02179158 CMP W25, 0x1
	0x0217915C STUR X20, [X29 - 0x38]
	0x02179160 B.LT 0x2179278
	0x02179164 CBZ X21, 0x21792B8
	0x02179168 MOV X20, X31
	0x0217916C MOV W27, W25
	0x02179170 MOVZ W10, 0x1
	0x02179174 STUR X27, [X29 - 0x30]
	0x02179178 STUR W25, [X29 - 0x24]
	0x0217917C LDR W8, [X21 + 0x18]
	0x02179180 CMP X20, X8
	0x02179184 B.CS 0x21792B4
	0x02179188 LDR X8, [X21]
	0x0217918C MOV X0, X23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X22, X4
	009 Move W20, W3
	010 Move X19, X2
	011 Move X21, X1
	012 Move X23, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X22
	016 Call 0x1C5D6E0
	017 Move W8, [X19]
	018 Subtract W8, W8, 1
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X22+56]
	021 Move X0, X23
	022 Move X1, X21
	023 Move X2, [X8+16]
	024 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	025 Move W9, [X19]
	026 Move W10, W20
	027 ShiftRight W10, 29
	028 And W10, W10, 0xFFFFFFF
	029 Add X8, X0, W10
	030 Add W10, W10, 8
	031 Add X1, X0, W10
	032 NotImplemented "Instruction ORN not yet implemented."
	033 Add W9, W9, W10
	034 Move W9, W9
	035 ShiftRight W9, 29
	036 And W9, W9, 0xFFFFFFF
	037 Move X2, W9
	038 Move X0, X8
	039 Move X3, X31
	040 Call UnsafeUtility.MemCpy, X0, X1, X2
	041 Move W8, [X19]
	042 Subtract W8, W8, 1
	043 Move [X19], W8
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return 

Method: System.Boolean Erase(ref TValue[] array, TValue value)

Disassembly:
	0x02177DBC BL 0x1C16F28
	0x02177DC0 STR X30, [X31 - 0x20]!
	0x02177DC4 STP X20, X19, [X31 + 0x10]
	0x02177DC8 LDR W8, [X1]
	0x02177DCC MOV X19, X1
	0x02177DD0 MOV X20, X0
	0x02177DD4 SUB W9, W8, 0x1
	0x02177DD8 CMP W9, W2
	0x02177DDC B.LE 0x2177E00
	0x02177DE0 ORN W9, W31, W2, 0x0
	0x02177DE4 MOV W3, W2
	0x02177DE8 ADD W1, W2, 0x1
	0x02177DEC ADD W4, W8, W9
	0x02177DF0 MOV X0, X20
	0x02177DF4 MOV X2, X20
	0x02177DF8 MOV X5, X31
	0x02177DFC BL 0x339FCE8
	0x02177E00 CBZ X20, 0x2177E38
	0x02177E04 LDR W8, [X19]
	0x02177E08 LDR W9, [X20 + 0x18]
	0x02177E0C SUB W8, W8, 0x1
	0x02177E10 CMP W8, W9
	0x02177E14 B.CS 0x2177E3C
	0x02177E18 ADD X8, X20, W8, 0x2, SXTW
	0x02177E1C STR W31, [X8 + 0x20]
	0x02177E20 LDR W8, [X19]
	0x02177E24 SUB W8, W8, 0x1
	0x02177E28 STR W8, [X19]
	0x02177E2C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move W21, W1
	008 Move X20, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {14}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Move X8, [X19+56]
	014 Move X0, [X20]
	015 Move X4, [X8+16]
	016 Move TEMP, 0
	017 Not TEMP
	018 Move W3, TEMP
	019 Move W1, W21
	020 Move W2, W31
	021 Call 0x217A6EC, X0, X1, X2, X3
	022 Move W21, W0
	023 Add W31, W0, 1
	024 Move X8, [X19+56]
	025 Move X0, X20
	026 Move W1, W21
	027 Move X2, [X8+32]
	028 Call ArrayHelpers.EraseAt, X0, X1
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Add W31, W21, 1
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0

Method: System.Void EraseAtByMovingTail(TValue[] array, ref System.Int32 count, System.Int32 index)

Disassembly:
	0x02178428 LDR X27, [X31 + 0x10]
	0x0217842C LDP X29, X30, [X31], #0x60
	0x02178430 RET
	0x02178434 BL 0x1C16F28
	0x02178438 BL 0x1C16F20
	0x0217843C BL 0x3EB1B20
	0x02178440 SUB X31, X31, 0xA0
	0x02178444 STR X30, [X31 + 0x80]
	0x02178448 STP X20, X19, [X31 + 0x90]
	0x0217844C LDR W8, [X1]
	0x02178450 MOV X19, X1
	0x02178454 MOV X20, X0
	0x02178458 SUB W9, W8, 0x1
	0x0217845C CMP W9, W2
	0x02178460 B.LE 0x2178488
	0x02178464 ORN W9, W31, W2, 0x0
	0x02178468 MOV W3, W2
	0x0217846C ADD W1, W2, 0x1
	0x02178470 ADD W4, W8, W9
	0x02178474 MOV X0, X20
	0x02178478 MOV X2, X20
	0x0217847C MOV X5, X31
	0x02178480 BL 0x339FCE8
	0x02178484 LDR W8, [X19]
	0x02178488 MOVI V0.2D, 0x0
	0x0217848C STP V0, V0, [X31 + 0x60]
	0x02178490 STP V0, V0, [X31 + 0x40]
	0x02178494 CBZ X20, 0x21784EC
	0x02178498 LDP V0, V1, [X31 + 0x40]
	0x0217849C LDP V2, V3, [X31 + 0x60]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X1]
	003 Subtract W9, W8, 1
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Compare X0, 0
	006 JumpIfEqual {27}
	007 Move W8, [X0+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X8, X0, 32
	011 Move X9, [X8]
	012 Move [X8], X9
	013 Move W8, [X1]
	014 Subtract W9, W8, 1
	015 Compare X0, 0
	016 JumpIfEqual {27}
	017 Move W8, [X0+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add X8, X0, W9
	020 Move [X8+32], X31
	021 Move W8, [X1]
	022 Subtract W8, W8, 1
	023 Move [X1], W8
	024 Move X30, [X31+16]
	025 Return 
	026 Call 0x1C17F28
	027 Call 0x1C17F20

Method: TValue[] Copy(TValue[] array)

Disassembly:
	0x0217726C LDR X0, [X19]
	0x02177270 CBZ X0, 0x21772E0
	0x02177274 LDR W8, [X0 + 0x18]
	0x02177278 CBNZ W21, 0x2177298
	0x0217727C CMP W8, 0x1
	0x02177280 B.NE 0x2177298
	0x02177284 STR X31, [X19]
	0x02177288 LDP X20, X19, [X31 + 0x20]
	0x0217728C LDP X22, X21, [X31 + 0x10]
	0x02177290 LDR X30, [X31], #0x30
	0x02177294 RET
	0x02177298 SUB W22, W8, 0x1
	0x0217729C CMP W22, W21
	0x021772A0 B.LE 0x21772C0
	0x021772A4 ORN W9, W31, W21, 0x0
	0x021772A8 ADD W1, W21, 0x1
	0x021772AC ADD W4, W8, W9
	0x021772B0 MOV X2, X0
	0x021772B4 MOV W3, W21
	0x021772B8 MOV X5, X31
	0x021772BC BL 0x339FCE8
	0x021772C0 LDR X8, [X20 + 0x38]
	0x021772C4 MOV X0, X19
	0x021772C8 MOV W1, W22
	0x021772CC LDP X20, X19, [X31 + 0x20]
	0x021772D0 LDR X2, [X8 + 0x8]
	0x021772D4 LDP X22, X21, [X31 + 0x10]
	0x021772D8 LDR X30, [X31], #0x30
	0x021772DC B 0x214478C
	0x021772E0 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X20, X1
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfEqual {29}
	010 Compare X19, 0
	011 JumpIfEqual {33}
	012 Move X8, [X20+56]
	013 Move W20, [X19+24]
	014 Move X0, [X8+8]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move W1, W20
	022 Call 0x1C17D6C
	023 Move X21, X0
	024 Move X0, X19
	025 Move X1, X21
	026 Move W2, W20
	027 Move X3, X31
	028 Call Array.Copy, X0, X1, X2
	029 Move X0, X20
	030 Call 0x1C5D6E0
	031 Compare X19, 0
	032 JumpIfNotEqual {12}
	033 Move X21, X31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X0, X21
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

Method: TValue[] Clone(TValue[] array)

Disassembly:
	0x02176BA0 BL 0x1C16D6C
	0x02176BA4 STR X0, [X19]
	0x02176BA8 LDP X20, X19, [X31 + 0x20]
	0x02176BAC LDP X22, X21, [X31 + 0x10]
	0x02176BB0 LDP X30, X23, [X31], #0x30
	0x02176BB4 RET
	0x02176BB8 MOV X0, X20
	0x02176BBC BL 0x1C5C6E0
	0x02176BC0 CBNZ W22, 0x2176B10
	0x02176BC4 B 0x2176BA8
	0x02176BC8 STP X30, X23, [X31 - 0x30]!
	0x02176BCC STP X22, X21, [X31 + 0x10]
	0x02176BD0 STP X20, X19, [X31 + 0x20]
	0x02176BD4 LDR X8, [X4 + 0x38]
	0x02176BD8 MOV X20, X4
	0x02176BDC MOV W21, W3
	0x02176BE0 MOV W22, W2
	0x02176BE4 MOV W23, W1
	0x02176BE8 MOV X19, X0
	0x02176BEC CBNZ X8, 0x2176C04
	0x02176BF0 ADRP X0, 0x1F7D000
	0x02176BF4 LDR X0, [X0 + 0x5A8]
	0x02176BF8 BL 0x1C16CF4
	0x02176BFC LDR X8, [X20 + 0x38]
	0x02176C00 CBZ X8, 0x2176CB0
	0x02176C04 CBZ W22, 0x2176CA0
	0x02176C08 LDR X8, [X19]
	0x02176C0C CBZ X8, 0x2176C48
	0x02176C10 LDR W8, [X8 + 0x18]
	0x02176C14 SUB W8, W8, W23
	0x02176C18 CMP W8, W22
	0x02176C1C B.GE 0x2176CA0
	0x02176C20 LDR X8, [X20 + 0x38]
	0x02176C24 MOV X0, X19
	0x02176C28 MOV W2, W22
	0x02176C2C MOV W3, W21
	0x02176C30 LDR X4, [X8 + 0x10]
	0x02176C34 LDP X20, X19, [X31 + 0x20]
	0x02176C38 LDP X22, X21, [X31 + 0x10]
	0x02176C3C MOV W1, W23
	0x02176C40 LDP X30, X23, [X31], #0x30
	0x02176C44 B 0x21768F8
	0x02176C48 ADRP X8, 0x1F7D000
	0x02176C4C LDR X8, [X8 + 0x5A8]
	0x02176C50 LDR X0, [X8]
	0x02176C54 LDR W8, [X0 + 0xE0]
	0x02176C58 CBNZ W8, 0x2176C60
	0x02176C5C BL 0x1C16DFC
	0x02176C60 MOV W0, W22
	0x02176C64 MOV W1, W21
	0x02176C68 MOV X2, X31
	0x02176C6C BL 0x337EDF0
	0x02176C70 LDR X8, [X20 + 0x38]
	0x02176C74 MOV W20, W0
	0x02176C78 LDR X8, [X8 + 0x8]
	0x02176C7C LDRB W9, [X8 + 0x135]
	0x02176C80 TBNZ X9, 0x0, 0x2176C90
	0x02176C84 MOV X0, X8
	0x02176C88 BL 0x1C5C684
	0x02176C8C MOV X8, X0
	0x02176C90 MOV X0, X8
	0x02176C94 MOV W1, W20
	0x02176C98 BL 0x1C16D6C
	0x02176C9C STR X0, [X19]
	0x02176CA0 LDP X20, X19, [X31 + 0x20]
	0x02176CA4 LDP X22, X21, [X31 + 0x10]
	0x02176CA8 LDP X30, X23, [X31], #0x30
	0x02176CAC RET
	0x02176CB0 MOV X0, X20
	0x02176CB4 BL 0x1C5C6E0
	0x02176CB8 CBNZ W22, 0x2176C08
	0x02176CBC B 0x2176CA0
	0x02176CC0 STP X30, X23, [X31 - 0x30]!
	0x02176CC4 STP X22, X21, [X31 + 0x10]
	0x02176CC8 STP X20, X19, [X31 + 0x20]
	0x02176CCC LDR X8, [X4 + 0x38]
	0x02176CD0 MOV X20, X4
	0x02176CD4 MOV W21, W3
	0x02176CD8 MOV W22, W2
	0x02176CDC MOV W23, W1
	0x02176CE0 MOV X19, X0
	0x02176CE4 CBNZ X8, 0x2176CFC
	0x02176CE8 ADRP X0, 0x1F7D000
	0x02176CEC LDR X0, [X0 + 0x5A8]
	0x02176CF0 BL 0x1C16CF4
	0x02176CF4 LDR X8, [X20 + 0x38]
	0x02176CF8 CBZ X8, 0x2176DAC
	0x02176CFC CBZ W22, 0x2176D9C
	0x02176D00 LDR X8, [X19]
	0x02176D04 CBZ X8, 0x2176D44
	0x02176D08 LDR W8, [X8 + 0x18]
	0x02176D0C SUB W8, W8, W23
	0x02176D10 CMP W8, W22
	0x02176D14 B.GE 0x2176D9C
	0x02176D18 LDR X8, [X20 + 0x38]
	0x02176D1C MOV X0, X19
	0x02176D20 MOV W2, W22
	0x02176D24 MOV W3, W21
	0x02176D28 LDR X4, [X8 + 0x10]
	0x02176D2C LDP X20, X19, [X31 + 0x20]
	0x02176D30 LDP X22, X21, [X31 + 0x10]
	0x02176D34 MOV W1, W23
	0x02176D38 LDR X5, [X4]
	0x02176D3C LDP X30, X23, [X31], #0x30
	0x02176D40 BR X5
	0x02176D44 ADRP X8, 0x1F7D000
	0x02176D48 LDR X8, [X8 + 0x5A8]
	0x02176D4C LDR X0, [X8]
	0x02176D50 LDR W8, [X0 + 0xE0]
	0x02176D54 CBNZ W8, 0x2176D5C
	0x02176D58 BL 0x1C16DFC
	0x02176D5C MOV W0, W22
	0x02176D60 MOV W1, W21
	0x02176D64 MOV X2, X31
	0x02176D68 BL 0x337EDF0
	0x02176D6C LDR X8, [X20 + 0x38]
	0x02176D70 MOV W20, W0
	0x02176D74 LDR X8, [X8 + 0x8]
	0x02176D78 LDRB W9, [X8 + 0x135]
	0x02176D7C TBNZ X9, 0x0, 0x2176D8C
	0x02176D80 MOV X0, X8
	0x02176D84 BL 0x1C5C684
	0x02176D88 MOV X8, X0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 16
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X26+40]
	017 Move X19, X1
	018 Move X20, X0
	019 Move [X29-8], X8
	020 Move X9, [X1+56]
	021 Compare X9, 0
	022 JumpIfNotEqual {26}
	023 Move X0, X19
	024 Call 0x1C5D6E0
	025 Move X9, [X19+56]
	026 Move X8, [X9+16]
	027 Move W10, [X8+309]
	028 Move TEMP, X10
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {36}
	032 Move X0, X8
	033 Call 0x1C5D684
	034 Move X9, [X19+56]
	035 Move X8, [X9+16]
	036 Move X0, X8
	037 Move W10, [X0+252]
	038 Add X11, X31, 0
	039 Add W10, W10, 16
	040 Add X10, X10, 15
	041 And X10, X10, 0x1FFFFFFFF
	042 Subtract X21, X11, X10
	043 Add X31, X21, 0
	044 Move W22, [X8+252]
	045 Add X8, X31, 0
	046 Add X10, X22, 15
	047 And X10, X10, 0x1FFFFFFFF
	048 Subtract X23, X8, X10
	049 Add X31, X23, 0
	050 Compare X20, 0
	051 JumpIfEqual {124}
	052 Move X0, [X9+8]
	053 Move X25, [X20+24]
	054 Move W8, [X0+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move W1, W25
	061 Call 0x1C17D6C
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X24, X0
	064 Move X27, X31
	065 And X28, X25, 0
	066 Move X8, [X19+56]
	067 Move X0, [X8+16]
	068 Move W8, [X0+309]
	069 Move TEMP, X8
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {74}
	073 Call 0x1C5D684
	074 Move W8, [X20+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, [X20]
	077 Move X9, [X19+56]
	078 Subtract X5, X29, 16
	079 Move X2, X21
	080 Move W8, [X8+260]
	081 Move X1, [X9+24]
	082 Move X4, X31
	083 NotImplemented "Instruction MADD not yet implemented."
	084 Add X3, X8, 32
	085 Call 0x1C18728
	086 Move X8, [X19+56]
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 Move X1, [X8+16]
	089 Move W8, [X1+309]
	090 Move TEMP, X8
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfEqual {97}
	094 Move X0, X1
	095 Call 0x1C5D684
	096 Move X1, X0
	097 Move X0, X25
	098 Move X2, X23
	099 Call 0x1C17E10
	100 Compare X24, 0
	101 JumpIfEqual {144}
	102 Move W25, [X24+24]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X8, [X24]
	105 Move X1, X0
	106 Move X2, X22
	107 Move W8, [X8+260]
	108 NotImplemented "Instruction NOP not yet implemented."
	109 NotImplemented "Instruction MADD not yet implemented."
	110 Add X0, X8, 32
	111 Call 0x3EB2AC0
	112 Move X8, [X19+56]
	113 Move X0, [X8+16]
	114 Move W8, [X0+309]
	115 Move TEMP, X8
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfEqual {121}
	119 Call 0x1C5D684
	120 Move W25, [X24+24]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Add X27, X27, 1
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X24, X31
	125 Move X8, [X26+40]
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X0, X24
	129 Add X31, X29, 0
	130 Move X20, [X31+80]
	131 Move X19, [X31+88]
	132 Move X22, [X31+64]
	133 Move X21, [X31+72]
	134 Move X24, [X31+48]
	135 Move X23, [X31+56]
	136 Move X26, [X31+32]
	137 Move X25, [X31+40]
	138 Move X28, [X31+16]
	139 Move X27, [X31+24]
	140 Move X29, [X31+96]
	141 Move X30, [X31+104]
	142 Return X0
	143 Call 0x1C17F28
	144 Call 0x1C17F20
	145 Call 0x3EB2B20

Method: TNew[] Select(TOld[] array, System.Func`2<TOld, TNew> converter)

Disassembly:
	0x0217D140 ADD W9, W10, 0x1
	0x0217D144 ADD X8, X8, X10, 0x2, LSL
	0x0217D148 STR W9, [X0 + 0x18]
	0x0217D14C STR W19, [X8 + 0x20]
	0x0217D150 B 0x217D208
	0x0217D154 LDR X8, [X20 + 0x38]
	0x0217D158 LDR X0, [X8 + 0x28]
	0x0217D15C LDRB W8, [X0 + 0x135]
	0x0217D160 TBNZ X8, 0x0, 0x217D168
	0x0217D164 BL 0x1C5C684
	0x0217D168 BL 0x1C16F10
	0x0217D16C LDR X8, [X20 + 0x38]
	0x0217D170 MOV X23, X0
	0x0217D174 LDR X1, [X8 + 0x38]
	0x0217D178 BL 0x2FDBF14
	0x0217D17C CBZ X23, 0x217D21C
	0x0217D180 LDR X9, [X20 + 0x38]
	0x0217D184 LDR W10, [X23 + 0x1C]
	0x0217D188 LDR X8, [X23 + 0x10]
	0x0217D18C LDR X9, [X9 + 0x30]
	0x0217D190 ADD W10, W10, 0x1
	0x0217D194 STR W10, [X23 + 0x1C]
	0x0217D198 CBZ X8, 0x217D21C
	0x0217D19C LDRSW X10, [X23 + 0x18]
	0x0217D1A0 LDR W11, [X8 + 0x18]
	0x0217D1A4 CMP W10, W11
	0x0217D1A8 B.CS 0x217D1D8
	0x0217D1AC ADD W9, W10, 0x1
	0x0217D1B0 ADD X8, X8, X10, 0x2, LSL
	0x0217D1B4 STR W9, [X23 + 0x18]
	0x0217D1B8 STR W19, [X8 + 0x20]
	0x0217D1BC B 0x217D1F0
	0x0217D1C0 LDR X8, [X9 + 0x20]
	0x0217D1C4 MOV W1, W19
	0x0217D1C8 LDR X8, [X8 + 0xC0]
	0x0217D1CC LDR X2, [X8 + 0x70]
	0x0217D1D0 BL 0x2FDC70C
	0x0217D1D4 B 0x217D208
	0x0217D1D8 LDR X8, [X9 + 0x20]
	0x0217D1DC MOV X0, X23
	0x0217D1E0 MOV W1, W19
	0x0217D1E4 LDR X8, [X8 + 0xC0]
	0x0217D1E8 LDR X2, [X8 + 0x70]
	0x0217D1EC BL 0x2FDC70C
	0x0217D1F0 LDR X8, [X20 + 0x38]
	0x0217D1F4 MOV X0, X22
	0x0217D1F8 MOV W1, W21
	0x0217D1FC MOV X2, X23
	0x0217D200 LDR X3, [X8 + 0x40]
	0x0217D204 BL 0x2A1368C
	0x0217D208 LDP X20, X19, [X31 + 0x30]
	0x0217D20C LDP X22, X21, [X31 + 0x20]
	0x0217D210 LDP X30, X23, [X31 + 0x10]
	0x0217D214 ADD X31, X31, 0x40
	0x0217D218 RET
	0x0217D21C BL 0x1C16F20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X2+56]
	010 Move X21, X2
	011 Move X19, X1
	012 Move X20, X0
	013 Compare X8, 0
	014 JumpIfEqual {52}
	015 Compare X20, 0
	016 JumpIfEqual {56}
	017 Move X8, [X21+56]
	018 Move X22, [X20+24]
	019 Move X0, [X8+8]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move W1, W22
	027 Call 0x1C17D6C
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X21, X0
	030 Move X23, X31
	031 And X22, X22, 0
	032 Add X24, X20, 40
	033 Add X25, X21, 32
	034 Move W8, [X20+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X19, 0
	037 JumpIfEqual {67}
	038 Move X1, [X24-8]
	039 Move X2, [X24]
	040 Move X8, [X19+24]
	041 Move X0, [X19+64]
	042 Move X3, [X19+40]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X21, 0
	045 JumpIfEqual {67}
	046 Move W8, [X21+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move [X25], X0
	049 Add X23, X23, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X24, X24, 16
	052 Move X0, X21
	053 Call 0x1C5D6E0
	054 Compare X20, 0
	055 JumpIfNotEqual {17}
	056 Move X21, X31
	057 Move X0, X21
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X30, [X31+64]
	065 Move X25, [X31+72]
	066 Return X0
	067 Call 0x1C17F20
	068 Call 0x1C17F28

Method: System.Void Swap(ref TValue first, ref TValue second)

Disassembly:
	0x0217D4D0 MOV X0, X22
	0x0217D4D4 MOV X1, X21
	0x0217D4D8 MOV X2, X23
	0x0217D4DC LDR X3, [X8 + 0x40]
	0x0217D4E0 BL 0x2AA5098

ISIL:
	001 Move X8, [X1]
	002 Move X9, [X0]
	003 Move [X0], X8
	004 Move [X1], X9
	005 Return 

Method: System.Void MoveSlice(TValue[] array, System.Int32 sourceIndex, System.Int32 destinationIndex, System.Int32 count)

Disassembly:
	0x0217C95C MOV X19, X3
	0x0217C960 MOV W20, W2
	0x0217C964 MOV W21, W1
	0x0217C968 MOV X22, X0
	0x0217C96C CBNZ X8, 0x217C978
	0x0217C970 MOV X0, X19
	0x0217C974 BL 0x1C5C6E0
	0x0217C978 CBZ X22, 0x217C9C0
	0x0217C97C LDR W8, [X22 + 0x18]
	0x0217C980 CMP W8, W21
	0x0217C984 B.LS 0x217C9BC
	0x0217C988 CMP W8, W20
	0x0217C98C B.LS 0x217C9BC
	0x0217C990 LDR X8, [X19 + 0x38]
	0x0217C994 SXTW X9, W20
	0x0217C998 SXTW X10, W21
	0x0217C99C LDP X20, X19, [X31 + 0x20]
	0x0217C9A0 LDR X2, [X8 + 0x10]
	0x0217C9A4 ADD X8, X22, 0x20
	0x0217C9A8 LDP X22, X21, [X31 + 0x10]
	0x0217C9AC ADD X0, X8, X10, 0x5, LSL
	0x0217C9B0 ADD X1, X8, X9, 0x5, LSL
	0x0217C9B4 LDR X30, [X31], #0x30
	0x0217C9B8 B 0x2218740
	0x0217C9BC BL 0x1C16F28
	0x0217C9C0 BL 0x1C16F20
	0x0217C9C4 STR X30, [X31 - 0x30]!
	0x0217C9C8 STP X22, X21, [X31 + 0x10]
	0x0217C9CC STP X20, X19, [X31 + 0x20]
	0x0217C9D0 LDR X8, [X3 + 0x38]
	0x0217C9D4 MOV X21, X3
	0x0217C9D8 MOV W19, W2
	0x0217C9DC MOV W20, W1
	0x0217C9E0 MOV X22, X0
	0x0217C9E4 CBNZ X8, 0x217C9F0
	0x0217C9E8 MOV X0, X21
	0x0217C9EC BL 0x1C5C6E0
	0x0217C9F0 CBZ X22, 0x217CA30
	0x0217C9F4 LDR W8, [X22 + 0x18]
	0x0217C9F8 CMP W8, W20
	0x0217C9FC B.LS 0x217CA2C
	0x0217CA00 CMP W8, W19
	0x0217CA04 B.LS 0x217CA2C
	0x0217CA08 LDR X8, [X21 + 0x38]
	0x0217CA0C LDR X2, [X8 + 0x10]
	0x0217CA10 ADD X8, X22, 0x20
	0x0217CA14 ADD X0, X8, W20, 0x3, SXTW
	0x0217CA18 ADD X1, X8, W19, 0x3, SXTW
	0x0217CA1C LDP X20, X19, [X31 + 0x20]
	0x0217CA20 LDP X22, X21, [X31 + 0x10]
	0x0217CA24 LDR X30, [X31], #0x30
	0x0217CA28 B 0x2218760
	0x0217CA2C BL 0x1C16F28
	0x0217CA30 BL 0x1C16F20
	0x0217CA34 STR X30, [X31 - 0x10]!
	0x0217CA38 CBZ X0, 0x217CA74
	0x0217CA3C LDR W8, [X0 + 0x18]
	0x0217CA40 CMP W8, W1
	0x0217CA44 B.LS 0x217CA70
	0x0217CA48 CMP W8, W2
	0x0217CA4C B.LS 0x217CA70
	0x0217CA50 ADD X8, X0, W1, 0x2, SXTW
	0x0217CA54 ADD X9, X0, W2, 0x2, SXTW
	0x0217CA58 LDR W10, [X9 + 0x20]
	0x0217CA5C LDR W11, [X8 + 0x20]!
	0x0217CA60 STR W10, [X8]
	0x0217CA64 STR W11, [X9 + 0x20]
	0x0217CA68 LDR X30, [X31], #0x10
	0x0217CA6C RET
	0x0217CA70 BL 0x1C16F28
	0x0217CA74 BL 0x1C16F20
	0x0217CA78 STR X30, [X31 - 0x10]!
	0x0217CA7C CBZ X0, 0x217CAB8
	0x0217CA80 LDR W8, [X0 + 0x18]
	0x0217CA84 CMP W8, W1
	0x0217CA88 B.LS 0x217CAB4
	0x0217CA8C CMP W8, W2
	0x0217CA90 B.LS 0x217CAB4
	0x0217CA94 ADD X8, X0, W1, 0x3, SXTW
	0x0217CA98 ADD X9, X0, W2, 0x3, SXTW
	0x0217CA9C LDR X10, [X9 + 0x20]
	0x0217CAA0 LDR X11, [X8 + 0x20]!
	0x0217CAA4 STR X10, [X8]
	0x0217CAA8 STR X11, [X9 + 0x20]
	0x0217CAAC LDR X30, [X31], #0x10
	0x0217CAB0 RET
	0x0217CAB4 BL 0x1C16F28
	0x0217CAB8 BL 0x1C16F20
	0x0217CABC STP X29, X30, [X31 - 0x60]!
	0x0217CAC0 STP X28, X27, [X31 + 0x10]
	0x0217CAC4 STP X26, X25, [X31 + 0x20]
	0x0217CAC8 STP X24, X23, [X31 + 0x30]
	0x0217CACC STP X22, X21, [X31 + 0x40]
	0x0217CAD0 STP X20, X19, [X31 + 0x50]
	0x0217CAD4 ADD X29, X31, 0x0
	0x0217CAD8 SUB X31, X31, 0x20
	0x0217CADC MRS X8, 0xC000
	0x0217CAE0 STUR X8, [X29 - 0x20]
	0x0217CAE4 LDR X8, [X8 + 0x28]
	0x0217CAE8 MOV X21, X3
	0x0217CAEC MOV W19, W2
	0x0217CAF0 MOV W23, W1
	0x0217CAF4 STUR X8, [X29 - 0x8]
	0x0217CAF8 LDR X8, [X3 + 0x38]
	0x0217CAFC MOV X20, X0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X8, [X4+56]
	014 Move W20, W3
	015 Move W22, W2
	016 Move W21, W1
	017 Move X19, X0
	018 Compare X8, 0
	019 JumpIfNotEqual {29}
	020 Move X0, 0x1F78000
	021 Move X0, [X0+1448]
	022 Move X23, X4
	023 Call 0x1C17CF4
	024 Move X8, [X23+56]
	025 Compare X8, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X23
	028 Call 0x1C5D6E0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add W23, W20, W21
	032 Add W24, W20, W22
	033 Subtract W8, W23, W22
	034 Subtract W9, W24, W21
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Compare X19, 0
	039 JumpIfEqual {114}
	040 Move W11, [X19+24]
	041 Move W8, W22
	042 Move W9, W21
	043 Move W10, W20
	044 Move X12, X9
	045 ShiftRight X12, 32
	046 And X12, X12, 0x7FFFFFFF
	047 Move X13, X8
	048 ShiftRight X13, 32
	049 And X13, X13, 0x7FFFFFFF
	050 Move X14, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add X15, X19, X12
	054 Add X16, X19, X13
	055 Move X17, [X16+32]
	056 Add X15, X15, 32
	057 Move X0, [X15]
	058 Add X12, X12, X14
	059 Add X9, X9, 1
	060 Add X13, X13, X14
	061 Subtract X10, X10, 1
	062 Add X8, X8, 1
	063 Move [X15], X17
	064 Move [X16+32], X0
	065 Subtract W25, W8, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Compare X19, 0
	068 JumpIfEqual {114}
	069 Move X28, 0x1F78000
	070 Move X28, [X28+1448]
	071 Add X8, X19, W21
	072 Subtract W26, W22, W23
	073 Add X27, X8, 32
	074 Move W29, W22
	075 Move W8, [X19+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Add X8, X19, W29
	079 Move X9, [X27]
	080 Add X8, X8, 32
	081 Move X10, [X8]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move [X8], X9
	084 Move [X27], X10
	085 Subtract W29, W29, W20
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, [X28]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Subtract W8, W21, W29
	093 NotImplemented "Instruction CSNEG not yet implemented."
	094 Subtract W29, W24, W8
	095 Add W8, W29, W20
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSEL not yet implemented."
	098 Add W29, W8, W9
	099 Subtract W25, W25, 1
	100 Move X20, [X31+80]
	101 Move X19, [X31+88]
	102 Move X22, [X31+64]
	103 Move X21, [X31+72]
	104 Move X24, [X31+48]
	105 Move X23, [X31+56]
	106 Move X26, [X31+32]
	107 Move X25, [X31+40]
	108 Move X28, [X31+16]
	109 Move X27, [X31+24]
	110 Move X29, [X31+96]
	111 Move X30, [X31+104]
	112 Return 
	113 Call 0x1C17F28
	114 Call 0x1C17F20

Method: System.Void EraseSliceWithCapacity(ref TValue[] array, ref System.Int32 length, System.Int32 index, System.Int32 count)

Disassembly:
	0x02179984 MOV X0, X24
	0x02179988 MOV X2, X22
	0x0217998C LDR X8, [X27 + 0x20]
	0x02179990 LDR W8, [X8 + 0x28]
	0x02179994 CMP W8, 0x0
	0x02179998 SUB X8, X29, 0x28
	0x0217999C CSEL X1, X20, X8, LT
	0x021799A0 BL 0x3EB1AC0
	0x021799A4 CBZ X26, 0x2179A34
	0x021799A8 LDR X8, [X27 + 0x20]
	0x021799AC MOV X9, X24
	0x021799B0 LDR W10, [X8 + 0x28]
	0x021799B4 MOV X8, X23
	0x021799B8 TBNZ X10, 0x1F, 0x21799C4
	0x021799BC LDR X8, [X23]
	0x021799C0 LDR X9, [X24]
	0x021799C4 LDR X10, [X26]
	0x021799C8 STP X8, X9, [X29 - 0x20]
	0x021799CC SUB X3, X29, 0x20
	0x021799D0 SUB X4, X29, 0xC
	0x021799D4 LDR X1, [X10 + 0x1C0]
	0x021799D8 MOV X2, X26
	0x021799DC LDP X0, X8, [X1 + 0x8]
	0x021799E0 BLR X8
	0x021799E4 LDURB W8, [X29 - 0xC]
	0x021799E8 CBNZ W8, 0x21799FC
	0x021799EC ADD X25, X25, 0x1
	0x021799F0 CMP X28, X25
	0x021799F4 B.NE 0x2179954
	0x021799F8 MOVN W25, 0x0
	0x021799FC LDUR X8, [X29 - 0x30]
	0x02179A00 LDR X8, [X8 + 0x28]
	0x02179A04 LDUR X9, [X29 - 0x8]
	0x02179A08 CMP X8, X9
	0x02179A0C B.NE 0x2179A3C
	0x02179A10 MOV W0, W25
	0x02179A14 ADD X31, X29, 0x0
	0x02179A18 LDP X20, X19, [X31 + 0x50]
	0x02179A1C LDP X22, X21, [X31 + 0x40]
	0x02179A20 LDP X24, X23, [X31 + 0x30]
	0x02179A24 LDP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X1]
	006 Move W19, W3
	007 Move X20, X1
	008 Move X21, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, [X21]
	011 Add W1, W19, W2
	012 Move W3, W2
	013 Subtract W4, W8, W1
	014 Move X2, X0
	015 Move X5, X31
	016 Call Array.Copy, X0, X1, X2, X3, X4
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W8, W31
	019 Subtract W9, W31, W19
	020 Move X11, [X21]
	021 Compare X11, 0
	022 JumpIfEqual {40}
	023 Move W10, [X20]
	024 Move W13, [X11+24]
	025 Add W12, W8, W10
	026 Subtract W12, W12, 1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Subtract W8, W8, 1
	029 Add X11, X11, W12
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X11+32], X31
	032 Move W10, [X20]
	033 Subtract W8, W10, W19
	034 Move [X20], W8
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 
	040 Call 0x1C17F20
	041 Call 0x1C17F28

Method: System.Void SwapElements(TValue[] array, System.Int32 index1, System.Int32 index2)

Disassembly:
	0x0217D63C MOV X2, X19
	0x0217D640 MOV X4, X21
	0x0217D644 B 0x217D71C
	0x0217D648 LDR X28, [X20 + 0x38]
	0x0217D64C MOV X0, X22
	0x0217D650 MOV X2, X26
	0x0217D654 LDR X8, [X28 + 0x8]
	0x0217D658 LDR W8, [X8 + 0x28]
	0x0217D65C CMP W8, 0x0
	0x0217D660 SUB X8, X29, 0x28
	0x0217D664 CSEL X1, X25, X8, LT
	0x0217D668 BL 0x3EB1AC0
	0x0217D66C LDR X0, [X28 + 0x28]
	0x0217D670 LDRB W8, [X0 + 0x135]
	0x0217D674 TBNZ X8, 0x0, 0x217D67C
	0x0217D678 BL 0x1C5C684
	0x0217D67C BL 0x1C16F10
	0x0217D680 LDR X8, [X20 + 0x38]
	0x0217D684 MOV X25, X0
	0x0217D688 LDR X1, [X8 + 0x38]
	0x0217D68C LDR X8, [X1]
	0x0217D690 BLR X8
	0x0217D694 LDR X26, [X20 + 0x38]
	0x0217D698 MOV X0, X21
	0x0217D69C MOV X2, X24
	0x0217D6A0 LDR X8, [X26 + 0x20]
	0x0217D6A4 LDR W8, [X8 + 0x28]
	0x0217D6A8 CMP W8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X21, X3
	008 Move W19, W2
	009 Move W20, W1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X21
	014 Call 0x1C5D6E0
	015 Compare X22, 0
	016 JumpIfEqual {33}
	017 Move W8, [X22+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X21+56]
	021 Move X2, [X8+16]
	022 Add X8, X22, 32
	023 Add X0, X8, W20
	024 Add X1, X8, W19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x22195C0, X0, X1
	031 Return 
	032 Call 0x1C17F28
	033 Call 0x1C17F20

Method: System.Void SwapElements(Unity.Collections.NativeArray`1<TValue> array, System.Int32 index1, System.Int32 index2)

Disassembly:
	0x0217D71C BLR X8
	0x0217D720 LDR X8, [X27 + 0x28]
	0x0217D724 LDUR X9, [X29 - 0x8]
	0x0217D728 CMP X8, X9
	0x0217D72C B.NE 0x217D754

ISIL:
	001 Move X8, [X0]
	002 Move X9, [X0]
	003 Move [X0], X8
	004 Move [X0], X9
	005 Return 

