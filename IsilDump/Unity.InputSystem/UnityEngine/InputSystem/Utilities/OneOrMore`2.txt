Type: UnityEngine.InputSystem.Utilities.OneOrMore`2

Method: System.Int32 get_Count()

Disassembly:
	0x0249B484 TBNZ X9, 0x0, 0x249B49C
	0x0249B488 MOV X0, X8
	0x0249B48C STR X2, [X31 + 0x8]
	0x0249B490 BL 0x1C5C684
	0x0249B494 LDR X2, [X31 + 0x8]
	0x0249B498 MOV X8, X0
	0x0249B49C LDR X8, [X8 + 0xC0]
	0x0249B4A0 MOV X0, X19
	0x0249B4A4 LDP X20, X19, [X31 + 0x10]
	0x0249B4A8 LDR X1, [X8 + 0x60]
	0x0249B4AC LDR X30, [X31], #0x20
	0x0249B4B0 BR X2
	0x0249B4B4 MOV X1, X31
	0x0249B4B8 B 0x33BDD8C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0]
	004 Compare W8, 0
	005 JumpIfEqual {7}
	006 Move W19, 1
	007 Move X8, [X1+32]
	008 Move W19, [X0+28]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {16}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move W0, W19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return X0

Method: TValue get_Item(System.Int32 index)

Disassembly:
	0x0249B4BC MOV X1, X31
	0x0249B4C0 B 0x33BDD8C
	0x0249B4C4 MOV X1, X31
	0x0249B4C8 B 0x33BDD8C
	0x0249B4CC MOV X1, X31
	0x0249B4D0 B 0x33BDD8C
	0x0249B4D4 MOV X1, X31
	0x0249B4D8 B 0x33BDD8C
	0x0249B4DC MOV X1, X31
	0x0249B4E0 B 0x33BDD8C
	0x0249B4E4 MOV X1, X31
	0x0249B4E8 B 0x33BDD8C
	0x0249B4EC MOV X1, X31
	0x0249B4F0 B 0x33BDD8C
	0x0249B4F4 MOV X1, X31
	0x0249B4F8 B 0x33BDD8C
	0x0249B4FC MOV X1, X31
	0x0249B500 B 0x33BDD8C
	0x0249B504 MOV X1, X31
	0x0249B508 B 0x33BDD8C
	0x0249B50C MOV X1, X31
	0x0249B510 B 0x33BDD8C
	0x0249B514 MOV X1, X31
	0x0249B518 B 0x33BDD8C
	0x0249B51C MOV X1, X31
	0x0249B520 B 0x33BDD8C
	0x0249B524 MOV X1, X31
	0x0249B528 B 0x33BDD8C
	0x0249B52C MOV X1, X31
	0x0249B530 B 0x33BDD8C
	0x0249B534 MOV X1, X31
	0x0249B538 B 0x33BDD8C
	0x0249B53C MOV X1, X31
	0x0249B540 B 0x33BDD8C
	0x0249B544 MOV X1, X31
	0x0249B548 B 0x33BDD8C
	0x0249B54C MOV X1, X31
	0x0249B550 B 0x33BDD8C
	0x0249B554 MOV X1, X31
	0x0249B558 B 0x33BDD8C
	0x0249B55C MOV X1, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move W8, [X0]
	006 Move W19, W1
	007 Compare W8, 0
	008 JumpIfEqual {11}
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, [X0+8]
	011 Move V0, [X0+1]
	012 Move [X31], V0
	013 Move X0, [X2+32]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move X8, [X0+192]
	021 Add X0, X31, 0
	022 Move W1, W19
	023 Move X2, [X8+40]
	024 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X30, [X31+16]
	028 Add X31, X31, 48
	029 Return X0
	030 Move X0, 0x1C61000
	031 Move X0, [X0+1888]
	032 Move X19, X2
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X20, X0
	036 Move X0, 0x1C64000
	037 Move X0, [X0+304]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X31
	042 Call ArgumentOutOfRangeException..ctor, X0, X1
	043 Move X0, X20
	044 Move X1, X19
	045 Call 0x1C17DEC

Method: System.Void .ctor(TValue single)

Disassembly:
	0x0249B560 B 0x33BDD8C
	0x0249B564 MOV X1, X31
	0x0249B568 B 0x33BDD8C
	0x0249B56C MOV X1, X31
	0x0249B570 B 0x33BDD8C

ISIL:
	001 Move W8, 1
	002 Move [X0+16], X31
	003 Move [X0+24], X31
	004 Move [X0], W8
	005 Move [X0+8], X1
	006 Return 

Method: System.Void .ctor(TList multiple)

Disassembly:
	0x0249B574 MOV X1, X31
	0x0249B578 B 0x33BDD8C
	0x0249B57C SUB X31, X31, 0x70
	0x0249B580 STP X30, X25, [X31 + 0x30]

ISIL:
	001 Move [X0], W31
	002 Move [X0+8], X31
	003 Move [X0+16], X1
	004 Move [X0+24], X2
	005 Return 

Method: UnityEngine.InputSystem.Utilities.OneOrMore`2<TValue, TList> op_Implicit(TValue single)

Disassembly:
	0x0249B584 STP X24, X23, [X31 + 0x40]
	0x0249B588 STP X22, X21, [X31 + 0x50]
	0x0249B58C STP X20, X19, [X31 + 0x60]
	0x0249B590 STR X31, [X31 + 0x8]
	0x0249B594 LDR X8, [X4 + 0x20]
	0x0249B598 MOV X22, X4
	0x0249B59C MOV W21, W3
	0x0249B5A0 MOV W19, W2
	0x0249B5A4 LDRB W9, [X8 + 0x135]
	0x0249B5A8 MOV X20, X1
	0x0249B5AC MOV X23, X0
	0x0249B5B0 TBNZ X9, 0x0, 0x249B5C0
	0x0249B5B4 MOV X0, X8
	0x0249B5B8 BL 0x1C5C684
	0x0249B5BC MOV X8, X0
	0x0249B5C0 LDR X8, [X8 + 0xC0]
	0x0249B5C4 LDR X0, [X8 + 0x10]
	0x0249B5C8 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X8], V0
	006 Move [X8+8], V0
	007 Move X19, X8
	008 Move X8, [X1+32]
	009 Move X20, X0
	010 Move W9, [X8+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {17}
	015 Move X0, X8
	016 Call 0x1C5D684
	017 Move W8, 1
	018 Move [X19+16], X31
	019 Move [X19+24], X31
	020 Move [X19], W8
	021 Move [X19+8], X20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.InputSystem.Utilities.OneOrMore`2<TValue, TList> op_Implicit(TList multiple)

Disassembly:
	0x0249B5CC TBNZ X8, 0x0, 0x249B5D4
	0x0249B5D0 BL 0x1C5C684
	0x0249B5D4 LDR W8, [X0 + 0xE0]
	0x0249B5D8 CBNZ W8, 0x249B5E0
	0x0249B5DC BL 0x1C16DFC
	0x0249B5E0 LDR X0, [X22 + 0x20]
	0x0249B5E4 LDRB W8, [X0 + 0x135]
	0x0249B5E8 TBNZ X8, 0x0, 0x249B5F0
	0x0249B5EC BL 0x1C5C684
	0x0249B5F0 LDR X8, [X0 + 0xC0]
	0x0249B5F4 LDR X0, [X8 + 0x10]
	0x0249B5F8 LDRB W8, [X0 + 0x135]
	0x0249B5FC TBNZ X8, 0x0, 0x249B604
	0x0249B600 BL 0x1C5C684
	0x0249B604 LDR X8, [X0 + 0xB8]
	0x0249B608 LDR X24, [X8]
	0x0249B60C CBZ X24, 0x249B714
	0x0249B610 LDR X8, [X22 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Move [X8], V0
	007 Move [X8+8], V0
	008 Move X20, X8
	009 Move X8, [X2+32]
	010 Move X19, X1
	011 Move X21, X0
	012 Move W9, [X8+309]
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {19}
	017 Move X0, X8
	018 Call 0x1C5D684
	019 Move [X20], W31
	020 Move [X20+8], X31
	021 Move [X20+16], X21
	022 Move [X20+24], X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return X0

Method: System.Collections.Generic.IEnumerator`1<TValue> GetEnumerator()

Disassembly:
	0x0249B614 ADD X9, X8, 0x135
	0x0249B618 LDRH W9, [X9]
	0x0249B61C TBNZ X9, 0x0, 0x249B638
	0x0249B620 MOV X0, X8
	0x0249B624 BL 0x1C5C684
	0x0249B628 LDR X8, [X22 + 0x20]
	0x0249B62C ADD X9, X8, 0x135
	0x0249B630 LDRH W9, [X9]
	0x0249B634 B 0x249B63C
	0x0249B638 MOV X0, X8
	0x0249B63C LDR X10, [X0 + 0xC0]
	0x0249B640 LDR X10, [X10 + 0x20]
	0x0249B644 LDR X25, [X10]
	0x0249B648 TBNZ X9, 0x0, 0x249B658
	0x0249B64C MOV X0, X8
	0x0249B650 BL 0x1C5C684
	0x0249B654 MOV X8, X0
	0x0249B658 LDR X8, [X8 + 0xC0]
	0x0249B65C ADD X9, X31, 0x8
	0x0249B660 ADD X3, X31, 0x10
	0x0249B664 ADD X4, X31, 0x24
	0x0249B668 LDR X1, [X8 + 0x20]
	0x0249B66C ADD X8, X31, 0x28
	0x0249B670 STR X23, [X31 + 0x28]
	0x0249B674 STP X8, X9, [X31 + 0x10]
	0x0249B678 LDR X8, [X1 + 0x10]
	0x0249B67C MOV X0, X25
	0x0249B680 MOV X2, X24
	0x0249B684 BLR X8
	0x0249B688 LDRB W8, [X31 + 0x24]
	0x0249B68C CBZ W8, 0x249B6FC
	0x0249B690 LDR X23, [X31 + 0x8]
	0x0249B694 CBZ X23, 0x249B714
	0x0249B698 LDR X8, [X22 + 0x20]
	0x0249B69C ADD X9, X8, 0x135
	0x0249B6A0 LDRH W9, [X9]
	0x0249B6A4 TBNZ X9, 0x0, 0x249B6C0
	0x0249B6A8 MOV X0, X8
	0x0249B6AC BL 0x1C5C684
	0x0249B6B0 LDR X8, [X22 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move X19, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, [X8+72]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Call 0x1C17F10
	025 Move X8, [X20+32]
	026 Move X20, X0
	027 Move W9, [X8+309]
	028 Move TEMP, X9
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {35}
	032 Move X0, X8
	033 Call 0x1C5D684
	034 Move X8, X0
	035 Move X8, [X8+192]
	036 Move X0, X20
	037 Move X1, [X8+80]
	038 Call 0x2C06710, X0
	039 Move V1, [X19]
	040 Move V0, [X19+16]
	041 Move [X31], V1
	042 Move [X31+8], V0
	043 Compare X20, 0
	044 JumpIfEqual {55}
	045 Move V1, [X31]
	046 Move V0, [X31+16]
	047 Move X0, X20
	048 Move X30, [X31+32]
	049 Move [X20+40], V0
	050 Move [X20+24], V1
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Add X31, X31, 64
	054 Return X0
	055 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0249B6B4 ADD X9, X8, 0x135
	0x0249B6B8 LDRH W9, [X9]
	0x0249B6BC B 0x249B6C4
	0x0249B6C0 MOV X0, X8
	0x0249B6C4 LDR X10, [X0 + 0xC0]
	0x0249B6C8 LDR X10, [X10 + 0x30]
	0x0249B6CC LDR X22, [X10]
	0x0249B6D0 TBNZ X9, 0x0, 0x249B6E0
	0x0249B6D4 MOV X0, X8
	0x0249B6D8 BL 0x1C5C684
	0x0249B6DC MOV X8, X0
	0x0249B6E0 LDR X8, [X8 + 0xC0]
	0x0249B6E4 AND W3, W21, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+32]
	004 Move X19, X0
	005 Move W9, [X8+309]
	006 Move TEMP, X9
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {13}
	010 Move X0, X8
	011 Call 0x1C5D684
	012 Move X8, X0
	013 Move X8, [X8+192]
	014 Move X0, X19
	015 Move X1, [X8+96]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call 0x249B614, X0
	019 Return X0

