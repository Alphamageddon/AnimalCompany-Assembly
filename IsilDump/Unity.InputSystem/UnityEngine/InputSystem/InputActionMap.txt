Type: UnityEngine.InputSystem.InputActionMap

Method: System.String get_name()

Disassembly:
	0x0373B000 LDR X8, [X19 + 0x30]
	0x0373B004 ADD X23, X23, 0x58

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: UnityEngine.InputSystem.InputActionAsset get_asset()

Disassembly:
	0x0373B008 CBNZ X8, 0x373AFC8
	0x0373B00C B 0x373B318

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Guid get_id()

Disassembly:
	0x0373B010 LDR X8, [X19 + 0x60]
	0x0373B014 CBZ X8, 0x373B050
	0x0373B018 LDR X8, [X19 + 0x40]
	0x0373B01C CBZ X8, 0x373B02C
	0x0373B020 LDR W8, [X8 + 0x18]
	0x0373B024 CMP W20, W8
	0x0373B028 B.EQ 0x373B050
	0x0373B02C CBZ W20, 0x373B04C
	0x0373B030 ADRP X8, 0xA0A000
	0x0373B034 LDR X8, [X8 + 0x2D0]
	0x0373B038 MOV W1, W20
	0x0373B03C LDR X0, [X8]
	0x0373B040 BL 0x1C16D6C
	0x0373B044 STR X0, [X19 + 0x40]
	0x0373B048 B 0x373B050
	0x0373B04C STR X31, [X19 + 0x40]
	0x0373B050 LDR X8, [X19 + 0x30]
	0x0373B054 CBZ X8, 0x373B318
	0x0373B058 STR W31, [X31 + 0x1C]
	0x0373B05C MOV X23, X31
	0x0373B060 MOV W25, W31
	0x0373B064 MOV W26, W31
	0x0373B068 MOVZ W27, 0x58
	0x0373B06C SMADDL X9, X26, X27, X31
	0x0373B070 ADD X22, X9, 0x50

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Move X1, X31
	007 Call String.IsNullOrEmpty, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {21}
	012 Move X0, X31
	013 Call Guid.NewGuid
	014 Move [X31+16], X0
	015 Move [X31+24], X1
	016 Add X0, X31, 16
	017 Move X1, X31
	018 Call Guid.ToString, X0
	019 Move X1, X0
	020 Move [X19+24], X0
	021 Move X1, [X19+24]
	022 Add X0, X31, 0
	023 Move X2, X31
	024 Move [X31], X31
	025 Move [X31+8], X31
	026 Call Guid..ctor, X0, X1
	027 Move X0, [X31]
	028 Move X1, [X31+8]
	029 Move X30, [X31+32]
	030 Move X19, [X31+40]
	031 Add X31, X31, 48
	032 Return X0

Method: System.Guid get_idDontGenerate()

Disassembly:
	0x03738B4C STRB W8, [X21 + 0xCFF]
	0x03738B50 LDR X0, [X19 + 0x18]
	0x03738B54 LDR X1, [X20]
	0x03738B58 BL 0x217B258
	0x03738B5C CMP W0, 0x1
	0x03738B60 B.LT 0x3738BA8
	0x03738B64 LDR X19, [X19 + 0x18]
	0x03738B68 CBZ X19, 0x3738BB8
	0x03738B6C LDR W8, [X19 + 0x18]
	0x03738B70 CMP W8, 0x1
	0x03738B74 B.LT 0x3738BA8
	0x03738B78 MOV W20, W31
	0x03738B7C CMP W20, W8
	0x03738B80 B.CS 0x3738BB4
	0x03738B84 ADD X8, X19, W20, 0x3, SXTW
	0x03738B88 LDR X0, [X8 + 0x20]
	0x03738B8C CBZ X0, 0x3738BB8
	0x03738B90 BL 0x37346C0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Move X1, X31
	007 Call String.IsNullOrEmpty, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {14}
	012 Move [X31], X31
	013 Move [X31+8], X31
	014 Move X1, [X19+24]
	015 Add X0, X31, 0
	016 Move X2, X31
	017 Move [X31], X31
	018 Move [X31+8], X31
	019 Call Guid..ctor, X0, X1
	020 Move X0, [X31]
	021 Move X1, [X31+8]
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Add X31, X31, 32
	025 Return X0

Method: System.Boolean get_enabled()

Disassembly:
	0x037377B0 BL 0x1C16D08
	0x037377B4 MOV X1, X0
	0x037377B8 MOV X0, X20
	0x037377BC BL 0x1C16DEC

ISIL:
	001 Move W8, [X0+72]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputAction> get_actions()

Disassembly:
	0x0373ACBC LDP X22, X21, [X31 + 0x50]
	0x0373ACC0 LDR X30, [X31 + 0x40]
	0x0373ACC4 ADD X31, X31, 0x70
	0x0373ACC8 RET
	0x0373ACCC B 0x373AC2C
	0x0373ACD0 LDR W8, [X0 + 0xC8]
	0x0373ACD4 AND W0, W8, 0x1
	0x0373ACD8 RET
	0x0373ACDC LDR W8, [X0 + 0xC8]
	0x0373ACE0 BFM W8, W1, 0x0, 0x0
	0x0373ACE4 STR W8, [X0 + 0xC8]
	0x0373ACE8 RET
	0x0373ACEC LDRB W8, [X0 + 0xC8]
	0x0373ACF0 UBFM W0, W8, 0x1, 0x1
	0x0373ACF4 RET
	0x0373ACF8 LDR W8, [X0 + 0xC8]
	0x0373ACFC ANDS W31, W1, 0x1
	0x0373AD00 MOVZ W9, 0x2
	0x0373AD04 CSEL W9, W9, W31, NE
	0x0373AD08 AND W8, W8, 0xFFFFFFFD
	0x0373AD0C ORR W8, W8, W9, 0x0
	0x0373AD10 STR W8, [X0 + 0xC8]
	0x0373AD14 RET
	0x0373AD18 LDRB W8, [X0 + 0xC8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCA7000
	007 Move X20, 0xA0C000
	008 Move W8, [X21+3334]
	009 Move X20, [X20+608]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA0C000
	016 Move X0, [X0+608]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3334], W8
	020 Move X1, [X19+40]
	021 Move X2, [X20]
	022 Add X0, X31, 0
	023 Move [X31], X31
	024 Move [X31+8], X31
	025 Call ReadOnlyArray`1<Object>..ctor, X0, X1
	026 Move X0, [X31]
	027 Move X1, [X31+8]
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputBinding> get_bindings()

Disassembly:
	0x0373B0A8 ADDS W31, W8, 0x1
	0x0373B0AC B.EQ 0x373B0C4
	0x0373B0B0 LDR X8, [X19 + 0x30]
	0x0373B0B4 ADD X26, X26, 0x1
	0x0373B0B8 ADD X22, X22, 0x58
	0x0373B0BC CBNZ X8, 0x373B078
	0x0373B0C0 B 0x373B318
	0x0373B0C4 LDR W9, [X21 + 0xB4]
	0x0373B0C8 LDR W8, [X31 + 0x1C]
	0x0373B0CC CMP X23, 0x0
	0x0373B0D0 STR W25, [X21 + 0xB8]
	0x0373B0D4 STR W9, [X31 + 0x18]
	0x0373B0D8 CSEL W8, W26, W8, EQ
	0x0373B0DC CMP W9, 0x1
	0x0373B0E0 STR W8, [X21 + 0xB0]
	0x0373B0E4 B.LT 0x373B310
	0x0373B0E8 MOV W24, W31
	0x0373B0EC MOV W22, W26
	0x0373B0F0 LDR X8, [X19 + 0x30]
	0x0373B0F4 CBZ X8, 0x373B318
	0x0373B0F8 LDR W9, [X8 + 0x18]
	0x0373B0FC CMP W22, W9
	0x0373B100 B.CS 0x373B358
	0x0373B104 SMADDL X8, X22, X27, X8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCA6000
	007 Move X20, 0xA0B000
	008 Move W8, [X21+3335]
	009 Move X20, [X20+632]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA0B000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3335], W8
	020 Move X1, [X19+48]
	021 Move X2, [X20]
	022 Add X0, X31, 0
	023 Move [X31], X31
	024 Move [X31+8], X31
	025 Call 0x24FCFD0, X0, X1
	026 Move X0, [X31]
	027 Move X1, [X31+8]
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.InputBinding> UnityEngine.InputSystem.IInputActionCollection2.get_bindings()

Disassembly:
	0x0373B108 LDR X1, [X8 + 0x50]
	0x0373B10C MOV X0, X19
	0x0373B110 MOV W2, W31
	0x0373B114 BL 0x37376AC
	0x0373B118 CMP X0, X21
	0x0373B11C B.EQ 0x373B1A4
	0x0373B120 CBNZ X23, 0x373B168
	0x0373B124 LDR X8, [X19 + 0x30]
	0x0373B128 CBZ X8, 0x373B318
	0x0373B12C ADRP X9, 0xA09000
	0x0373B130 LDR X9, [X9 + 0xF98]
	0x0373B134 LDR W1, [X8 + 0x18]
	0x0373B138 LDR X0, [X9]
	0x0373B13C BL 0x1C16D6C
	0x0373B140 LDR X8, [X19 + 0x30]
	0x0373B144 MOV X23, X0
	0x0373B148 MOV W1, W31
	0x0373B14C MOV X2, X23
	0x0373B150 MOV X0, X8
	0x0373B154 MOV W3, W31
	0x0373B158 MOV W4, W22
	0x0373B15C MOV X5, X31
	0x0373B160 BL 0x339FCE8
	0x0373B164 STR W22, [X31 + 0x1C]
	0x0373B168 LDR X8, [X19 + 0x30]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCA6000
	007 Move X20, 0xA0B000
	008 Move W8, [X21+3336]
	009 Move X20, [X20+640]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA0B000
	016 Move X0, [X0+640]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3336], W8
	020 Move X0, X19
	021 Call InputActionMap.get_bindings, X0
	022 Move X8, [X20]
	023 Move [X31], X0
	024 Move [X31+8], X1
	025 Add X1, X31, 0
	026 Move X0, X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControlScheme> get_controlSchemes()

Disassembly:
	0x0373B16C CBZ X8, 0x373B318
	0x0373B170 LDR W9, [X8 + 0x18]
	0x0373B174 ADD W22, W22, 0x1
	0x0373B178 CMP W22, W9
	0x0373B17C B.CS 0x373B358
	0x0373B180 SMADDL X8, X22, X27, X8
	0x0373B184 LDR X1, [X8 + 0x50]
	0x0373B188 MOV X0, X19
	0x0373B18C MOV W2, W31
	0x0373B190 BL 0x37376AC
	0x0373B194 CMP X0, X21
	0x0373B198 B.NE 0x373B168
	0x0373B19C CBNZ X23, 0x373B1B0
	0x0373B1A0 B 0x373B204
	0x0373B1A4 CMP W26, W22
	0x0373B1A8 CINC W26, W26, EQ
	0x0373B1AC CBZ X23, 0x373B204
	0x0373B1B0 LDR X8, [X19 + 0x30]
	0x0373B1B4 CBZ X8, 0x373B318
	0x0373B1B8 LDR W9, [X8 + 0x18]
	0x0373B1BC CMP W22, W9
	0x0373B1C0 B.CS 0x373B358
	0x0373B1C4 SMADDL X8, X22, X27, X8
	0x0373B1C8 ADD X1, X8, 0x20
	0x0373B1CC ADD X0, X31, 0x28
	0x0373B1D0 MOVZ W2, 0x58
	0x0373B1D4 BL 0x3EB1AC0
	0x0373B1D8 LDR W8, [X23 + 0x18]
	0x0373B1DC LDR W9, [X31 + 0x1C]
	0x0373B1E0 CMP W9, W8
	0x0373B1E4 B.CS 0x373B358
	0x0373B1E8 SMADDL X8, X9, X27, X23
	0x0373B1EC ADD X0, X8, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCA6000
	006 Move X20, 0x9B9000
	007 Move W8, [X21+3337]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9B9000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3337], W8
	019 Move X0, [X20]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move W8, W0
	030 Move X0, X31
	031 Move X1, X31
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {40}
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {45}
	039 Call InputActionAsset.get_controlSchemes, X0
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Call 0x1C17F20

Method: System.Nullable`1<UnityEngine.InputSystem.InputBinding> get_bindingMask()

Disassembly:
	0x0373B1F0 ADD X1, X31, 0x28
	0x0373B1F4 MOVZ W2, 0x58
	0x0373B1F8 ADD W20, W9, 0x1
	0x0373B1FC BL 0x3EB1AC0

ISIL:
	001 Add X1, X0, 104
	002 Move W2, 96
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_bindingMask(System.Nullable`1<UnityEngine.InputSystem.InputBinding> value)

Disassembly:
	0x0373B200 STR W20, [X31 + 0x1C]
	0x0373B204 LDR X8, [X19 + 0x60]
	0x0373B208 STR X23, [X31 + 0x20]
	0x0373B20C CBZ X8, 0x373B2F8
	0x0373B210 LDR X8, [X19 + 0x30]
	0x0373B214 CBZ X8, 0x373B318
	0x0373B218 LDR W9, [X8 + 0x18]
	0x0373B21C CMP W22, W9
	0x0373B220 B.CS 0x373B358
	0x0373B224 SMADDL X8, X22, X27, X8
	0x0373B228 ADD X0, X8, 0x20
	0x0373B22C MOV X1, X31
	0x0373B230 BL 0x3747CF4
	0x0373B234 TBNZ X0, 0x0, 0x373B2F8
	0x0373B238 LDR X0, [X19 + 0x60]
	0x0373B23C CBZ X0, 0x373B318
	0x0373B240 MOV X1, X31
	0x0373B244 BL 0x374A7E8
	0x0373B248 LDR W8, [X31 + 0x14]
	0x0373B24C ADD W8, W22, W8
	0x0373B250 SXTW X8, W8
	0x0373B254 ADD X8, X0, X8, 0x5, LSL
	0x0373B258 LDRB W29, [X8]
	0x0373B25C CBZ X29, 0x373B2F8
	0x0373B260 LDRH W28, [X8 + 0xE]
	0x0373B264 LDR X8, [X19 + 0x60]
	0x0373B268 CBZ X8, 0x373B318
	0x0373B26C LDR X8, [X8 + 0x18]
	0x0373B270 CBZ X8, 0x373B318
	0x0373B274 LDR W9, [X8 + 0x18]
	0x0373B278 CMP X28, X9
	0x0373B27C B.CS 0x373B358
	0x0373B280 ADD X8, X8, X28, 0x3, LSL
	0x0373B284 LDR X23, [X8 + 0x20]
	0x0373B288 ADRP X8, 0xA0A000
	0x0373B28C LDR X0, [X19 + 0x40]
	0x0373B290 LDP W1, W2, [X21 + 0xB8]
	0x0373B294 LDR X8, [X8 + 0x2B8]
	0x0373B298 MOV X3, X23
	0x0373B29C LDR X4, [X8]
	0x0373B2A0 BL 0x21761AC
	0x0373B2A4 TBNZ X0, 0x0, 0x373B2EC
	0x0373B2A8 LDR X20, [X19 + 0x40]
	0x0373B2AC CBZ X20, 0x373B318
	0x0373B2B0 CBZ X23, 0x373B2C8
	0x0373B2B4 LDR X8, [X20]
	0x0373B2B8 MOV X0, X23
	0x0373B2BC LDR X1, [X8 + 0x40]
	0x0373B2C0 BL 0x1C16E00
	0x0373B2C4 CBZ X0, 0x373B35C
	0x0373B2C8 LDR W8, [X20 + 0x18]
	0x0373B2CC CMP W25, W8
	0x0373B2D0 B.CS 0x373B358
	0x0373B2D4 ADD X8, X20, W25, 0x3, SXTW
	0x0373B2D8 STR X23, [X8 + 0x20]
	0x0373B2DC LDR W8, [X21 + 0xBC]
	0x0373B2E0 ADD W25, W25, 0x1
	0x0373B2E4 ADD W8, W8, 0x1
	0x0373B2E8 STR W8, [X21 + 0xBC]
	0x0373B2EC SUBS X29, X29, 0x1
	0x0373B2F0 ADD X28, X28, 0x1
	0x0373B2F4 B.NE 0x373B264
	0x0373B2F8 LDR W8, [X31 + 0x18]
	0x0373B2FC LDR X23, [X31 + 0x20]
	0x0373B300 ADD W24, W24, 0x1
	0x0373B304 ADD W22, W22, 0x1
	0x0373B308 CMP W24, W8
	0x0373B30C B.NE 0x373B0F0
	0x0373B310 LDR X8, [X19 + 0x30]
	0x0373B314 CBNZ X8, 0x373B06C
	0x0373B318 BL 0x1C16F20
	0x0373B31C CBZ X23, 0x373B328
	0x0373B320 STR X23, [X19 + 0x38]
	0x0373B324 B 0x373B32C

ISIL:
	001 Subtract X31, X31, 464
	002 Move [X31+384], X29
	003 Move [X31+400], X30
	004 Move [X31+408], X25
	005 Move [X31+416], X24
	006 Move [X31+424], X23
	007 Move [X31+432], X22
	008 Move [X31+440], X21
	009 Move [X31+448], X20
	010 Move [X31+456], X19
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X8, [X22+40]
	013 Move X21, 0xCA6000
	014 Move X19, X1
	015 Move X20, X0
	016 Move [X31+376], X8
	017 Move W8, [X21+3338]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xA0A000
	023 Move X0, [X0+3912]
	024 Call 0x1C17CF4
	025 Move X0, 0xA0A000
	026 Move X0, [X0+3928]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3338], W8
	030 Move X21, X20
	031 Add X21, X21, 104
	032 Move W23, [X21]
	033 Add X0, X31, 280
	034 Move W2, 95
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add X1, X21, 1
	037 NotImplemented "Instruction CSET not yet implemented."
	038 Call 0x3EB2AC0
	039 Move X1, X19
	040 Move W25, [X1+1]
	041 Add X0, X31, 184
	042 Move W2, 95
	043 Call 0x3EB2AC0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Xor W8, W24, W8
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {71}
	051 Compare W23, 0
	052 JumpIfEqual {78}
	053 Add X8, X31, 280
	054 Add X1, X8, 7
	055 Add X0, X31, 96
	056 Move W2, 88
	057 Call 0x3EB2AC0
	058 Add X8, X31, 184
	059 Add X1, X8, 7
	060 Add X0, X31, 8
	061 Move W2, 88
	062 Call 0x3EB2AC0
	063 Add X0, X31, 96
	064 Add X1, X31, 8
	065 Move X2, X31
	066 Call InputBinding.op_Equality, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {78}
	071 Move W2, 96
	072 Move X0, X21
	073 Move X1, X19
	074 Call 0x3EB2B30
	075 Move W1, 1
	076 Move X0, X20
	077 Call InputActionMap.LazyResolveBindings, X0, X1
	078 Move X8, [X22+40]
	079 Move X9, [X31+376]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X20, [X31+448]
	082 Move X19, [X31+456]
	083 Move X22, [X31+432]
	084 Move X21, [X31+440]
	085 Move X24, [X31+416]
	086 Move X23, [X31+424]
	087 Move X30, [X31+400]
	088 Move X25, [X31+408]
	089 Move X29, [X31+384]
	090 Add X31, X31, 464
	091 Return 
	092 Call 0x3EB2B20

Method: System.Nullable`1<UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice>> get_devices()

Disassembly:
	0x03736920 BL 0x1C16CF4
	0x03736924 MOVZ W8, 0x1
	0x03736928 STRB W8, [X21 + 0xCF2]
	0x0373692C MOV X21, X20
	0x03736930 LDRB W23, [X21 + 0x30]!
	0x03736934 ADD X0, X31, 0x118
	0x03736938 MOVZ W2, 0x5F
	0x0373693C CMP W23, 0x0
	0x03736940 ADD X1, X21, 0x1
	0x03736944 CSET W24, NE
	0x03736948 BL 0x3EB1AC0
	0x0373694C MOV X1, X19
	0x03736950 LDRB W25, [X1], #0x1
	0x03736954 ADD X0, X31, 0xB8
	0x03736958 MOVZ W2, 0x5F
	0x0373695C BL 0x3EB1AC0
	0x03736960 CMP W25, 0x0
	0x03736964 CSET W8, NE
	0x03736968 EOR W8, W24, W8, 0x0
	0x0373696C TBNZ X8, 0x0, 0x37369B0
	0x03736970 CBZ W23, 0x37369CC
	0x03736974 ADD X8, X31, 0x118
	0x03736978 ADD X1, X8, 0x7
	0x0373697C ADD X0, X31, 0x60
	0x03736980 MOVZ W2, 0x58
	0x03736984 BL 0x3EB1AC0
	0x03736988 ADD X8, X31, 0xB8
	0x0373698C ADD X1, X8, 0x7
	0x03736990 ADD X0, X31, 0x8
	0x03736994 MOVZ W2, 0x58
	0x03736998 BL 0x3EB1AC0
	0x0373699C ADD X0, X31, 0x60
	0x037369A0 ADD X1, X31, 0x8
	0x037369A4 MOV X2, X31
	0x037369A8 BL 0x374A774
	0x037369AC TBNZ X0, 0x0, 0x37369CC
	0x037369B0 MOVZ W2, 0x60
	0x037369B4 MOV X0, X21
	0x037369B8 MOV X1, X19
	0x037369BC BL 0x3EB1B30
	0x037369C0 MOVZ W1, 0x1
	0x037369C4 MOV X0, X20
	0x037369C8 BL 0x37369FC
	0x037369CC LDR X8, [X22 + 0x28]
	0x037369D0 LDR X9, [X31 + 0x178]
	0x037369D4 CMP X8, X9
	0x037369D8 B.NE 0x37369F8
	0x037369DC LDP X20, X19, [X31 + 0x1C0]
	0x037369E0 LDP X22, X21, [X31 + 0x1B0]
	0x037369E4 LDP X24, X23, [X31 + 0x1A0]
	0x037369E8 LDP X30, X25, [X31 + 0x190]
	0x037369EC LDR X29, [X31 + 0x180]
	0x037369F0 ADD X31, X31, 0x1D0
	0x037369F4 RET

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X9, [X21+40]
	009 Move X22, 0xCAB000
	010 Move X20, X0
	011 Move X19, X8
	012 Move [X31+56], X9
	013 Move W9, [X22+3339]
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xA0F000
	019 Move X0, [X0+4024]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3339], W8
	023 Add X0, X20, 216
	024 Add X8, X31, 8
	025 Call DeviceArray.Get, X0
	026 Move W8, [X31+8]
	027 NotImplemented "Instruction LDUR not yet implemented."
	028 Move X9, [X31+24]
	029 Move [X31+2], V0
	030 Move [X31+47], X9
	031 Compare W8, 0
	032 JumpIfEqual {38}
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 Move V0, [X31+2]
	035 Move [X19], W8
	036 Move [X19+16], X9
	037 Move [X19+1], V0
	038 Move X8, [X20+32]
	039 Compare X8, 0
	040 JumpIfEqual {48}
	041 Add X0, X8, 160
	042 Add X8, X31, 8
	043 Call DeviceArray.Get, X0
	044 Move X8, [X31+24]
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 Move [X19+16], X8
	047 Move [X19], V0
	048 Move [X19], X31
	049 Move [X19+8], X31
	050 Move [X19+16], X31
	051 Move X8, [X21+40]
	052 Move X9, [X31+56]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, [X31+96]
	055 Move X19, [X31+104]
	056 Move X22, [X31+80]
	057 Move X21, [X31+88]
	058 Move X30, [X31+64]
	059 Add X31, X31, 112
	060 Return X0
	061 Call 0x3EB2B20

Method: System.Void set_devices(System.Nullable`1<UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice>> value)

Disassembly:
	0x0373B328 STR X8, [X19 + 0x38]
	0x0373B32C LDR W8, [X19 + 0xC8]
	0x0373B330 LDP X22, X21, [X31 + 0xF0]
	0x0373B334 LDP X24, X23, [X31 + 0xE0]
	0x0373B338 LDP X26, X25, [X31 + 0xD0]
	0x0373B33C ORR W8, W8, 0xC
	0x0373B340 STR W8, [X19 + 0xC8]
	0x0373B344 LDP X20, X19, [X31 + 0x100]
	0x0373B348 LDP X28, X27, [X31 + 0xC0]
	0x0373B34C LDP X29, X30, [X31 + 0xB0]
	0x0373B350 ADD X31, X31, 0x110
	0x0373B354 RET
	0x0373B358 BL 0x1C16F28
	0x0373B35C BL 0x1C16F44
	0x0373B360 MOV X1, X31
	0x0373B364 BL 0x1C16DEC
	0x0373B368 LDR W8, [X0 + 0xC8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X8, [X1+16]
	005 Move V0, [X1]
	006 Move X19, X0
	007 Add X0, X0, 216
	008 Add X1, X31, 0
	009 Move [X31+16], X8
	010 Move [X31], V0
	011 Call DeviceArray.Set, X0, X1
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {19}
	016 Move X0, X19
	017 Move W1, W31
	018 Call InputActionMap.LazyResolveBindings, X0, X1
	019 Move X30, [X31+32]
	020 Move X19, [X31+40]
	021 Add X31, X31, 48
	022 Return 

Method: UnityEngine.InputSystem.InputAction get_Item(System.String actionNameOrId)

Disassembly:
	0x0373B36C TBNZ X1, 0x0, 0x373B37C
	0x0373B370 AND W8, W8, 0xFFFFFFF7
	0x0373B374 STR X31, [X0 + 0x38]
	0x0373B378 STR X31, [X0 + 0x138]
	0x0373B37C AND W8, W8, 0xFFFFFFFB
	0x0373B380 STR W8, [X0 + 0xC8]
	0x0373B384 STR X31, [X0 + 0x40]
	0x0373B388 RET
	0x0373B38C LDR W8, [X0 + 0xC8]
	0x0373B390 MOVZ W1, 0x1
	0x0373B394 STP X31, X31, [X0 + 0x38]
	0x0373B398 STR X31, [X0 + 0x138]
	0x0373B39C AND W8, W8, 0xFFFFFFF3
	0x0373B3A0 STR W8, [X0 + 0xC8]
	0x0373B3A4 B 0x3734520
	0x0373B3A8 STP X29, X30, [X31 - 0x60]!
	0x0373B3AC STP X28, X27, [X31 + 0x10]
	0x0373B3B0 STP X26, X25, [X31 + 0x20]
	0x0373B3B4 STP X24, X23, [X31 + 0x30]
	0x0373B3B8 STP X22, X21, [X31 + 0x40]
	0x0373B3BC STP X20, X19, [X31 + 0x50]
	0x0373B3C0 SUB X31, X31, 0x630
	0x0373B3C4 ADRP X19, 0xCA5000
	0x0373B3C8 ADRP X26, 0x9B8000
	0x0373B3CC LDRB W8, [X19 + 0xD1A]
	0x0373B3D0 LDR X26, [X26 + 0x598]
	0x0373B3D4 MOV X20, X0
	0x0373B3D8 TBNZ X8, 0x0, 0x373B444
	0x0373B3DC ADRP X0, 0x9B8000
	0x0373B3E0 LDR X0, [X0 + 0xE00]
	0x0373B3E4 BL 0x1C16CF4
	0x0373B3E8 ADRP X0, 0xA0A000
	0x0373B3EC LDR X0, [X0 + 0xC0]
	0x0373B3F0 BL 0x1C16CF4
	0x0373B3F4 ADRP X0, 0x9B8000
	0x0373B3F8 LDR X0, [X0 + 0xE18]
	0x0373B3FC BL 0x1C16CF4
	0x0373B400 ADRP X0, 0xA0A000
	0x0373B404 LDR X0, [X0 + 0x2D8]
	0x0373B408 BL 0x1C16CF4
	0x0373B40C ADRP X0, 0x9B8000
	0x0373B410 LDR X0, [X0 + 0x598]
	0x0373B414 BL 0x1C16CF4
	0x0373B418 ADRP X0, 0xA0A000
	0x0373B41C LDR X0, [X0 + 0x2E0]
	0x0373B420 BL 0x1C16CF4
	0x0373B424 ADRP X0, 0xA0A000
	0x0373B428 LDR X0, [X0 + 0x2E8]
	0x0373B42C BL 0x1C16CF4
	0x0373B430 ADRP X0, 0xA0A000
	0x0373B434 LDR X0, [X0 + 0x2F0]
	0x0373B438 BL 0x1C16CF4
	0x0373B43C MOVZ W8, 0x1
	0x0373B440 STRB W8, [X19 + 0xD1A]
	0x0373B444 ADRP X25, 0x9B8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {15}
	006 Move W2, W31
	007 Move X19, X1
	008 Call InputActionMap.FindAction, X0, X1, X2
	009 Compare X0, 0
	010 JumpIfEqual {33}
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return X0
	015 Move X0, 0x9BE000
	016 Move X0, [X0+1320]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0xA0B000
	021 Move X0, [X0+144]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Move X2, X31
	026 Call ArgumentNullException..ctor, X0, X1
	027 Move X0, 0xA0B000
	028 Move X0, [X0+648]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call 0x1C17DEC
	033 Move X0, 0xA0B000
	034 Move X0, [X0+656]
	035 Call 0x1C17D08
	036 Move X20, X0
	037 Move X0, 0x9C1000
	038 Move X0, [X0+2480]
	039 Call 0x1C17D08
	040 Move X2, X0
	041 Move X0, X20
	042 Move X1, X19
	043 Move X3, X31
	044 Call String.Concat, X0, X1, X2
	045 Move X19, X0
	046 Move X0, 0x9BC000
	047 Move X0, [X0+120]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X1, X19
	051 Move X2, X31
	052 Move X20, X0
	053 Call KeyNotFoundException..ctor, X0, X1
	054 Move X0, 0xA0B000
	055 Move X0, [X0+648]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X20
	059 Call 0x1C17DEC

Method: System.Void add_actionTriggered(System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> value)

Disassembly:
	0x0373B448 LDR X25, [X25 + 0xE00]
	0x0373B44C MOVI V0.2D, 0x0
	0x0373B450 STRB W31, [X31 + 0x464]
	0x0373B454 STR V0, [X31 + 0x5A]
	0x0373B458 STR V0, [X31 + 0x59]
	0x0373B45C STR V0, [X31 + 0x45]
	0x0373B460 STR V0, [X31 + 0x44]
	0x0373B464 BL 0x373BF80
	0x0373B468 MOV X19, X0
	0x0373B46C MOVI V0.2D, 0x0
	0x0373B470 ADD X0, X31, 0x468
	0x0373B474 MOVZ W2, 0x128
	0x0373B478 MOV W1, W31
	0x0373B47C STR V0, [X31 + 0x5B]
	0x0373B480 STR V0, [X31 + 0x5C]
	0x0373B484 STR V0, [X31 + 0x5D]
	0x0373B488 STR V0, [X31 + 0x5E]
	0x0373B48C STR V0, [X31 + 0x5F]
	0x0373B490 STR V0, [X31 + 0x60]
	0x0373B494 STR V0, [X31 + 0x61]
	0x0373B498 STR V0, [X31 + 0x62]
	0x0373B49C BL 0x3EB1B10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xCA6000
	007 Move X21, 0xA0A000
	008 Move W8, [X22+3340]
	009 Move X21, [X21+3968]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xA0A000
	017 Move X0, [X0+3968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3340], W8
	021 Move X2, [X21]
	022 Add X0, X20, 232
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F24E0, X0, X1
	030 Return 

Method: System.Void remove_actionTriggered(System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> value)

Disassembly:
	0x0373B4A0 LDR X0, [X26]
	0x0373B4A4 LDR X8, [X20 + 0x60]
	0x0373B4A8 LDR X22, [X20 + 0x20]
	0x0373B4AC LDR W9, [X0 + 0xE0]
	0x0373B4B0 CMP X8, 0x0
	0x0373B4B4 CSET W21, EQ
	0x0373B4B8 CBNZ W9, 0x373B4C0
	0x0373B4BC BL 0x1C16DFC
	0x0373B4C0 MOV X0, X22
	0x0373B4C4 MOV X1, X31
	0x0373B4C8 MOV X2, X31
	0x0373B4CC BL 0x3C354F8
	0x0373B4D0 ADRP X27, 0xA0A000
	0x0373B4D4 LDR X27, [X27 + 0x2E0]
	0x0373B4D8 ADD X28, X31, 0x318
	0x0373B4DC TBZ X0, 0x0, 0x373B694
	0x0373B4E0 LDR X0, [X20 + 0x20]
	0x0373B4E4 CBZ X0, 0x373BBE8
	0x0373B4E8 BL 0x3736750
	0x0373B4EC ADRP X8, 0xA0A000
	0x0373B4F0 LDR X8, [X8 + 0x2F0]
	0x0373B4F4 LDR X2, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xCA6000
	007 Move X21, 0xA0A000
	008 Move W8, [X22+3341]
	009 Move X21, [X21+3976]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xA0A000
	017 Move X0, [X0+3976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3341], W8
	021 Move X2, [X21]
	022 Add X0, X20, 232
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x28F2650, X0, X1
	030 Return 

Method: System.Void .ctor()

Disassembly:
	0x037367DC MOV X19, X0
	0x037367E0 TBNZ X8, 0x0, 0x37367F8
	0x037367E4 ADRP X0, 0xA0F000
	0x037367E8 LDR X0, [X0 + 0x38]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move X1, X31
	005 Move [X0+88], W8
	006 Call Object..ctor, X0
	007 Return 

Method: System.Void .ctor(System.String name)

Disassembly:
	0x0373B4F8 ADD X8, X31, 0x318
	0x0373B4FC BL 0x249A5CC
	0x0373B500 LDP V0, V1, [X28]
	0x0373B504 STR V0, [X31 + 0x59]
	0x0373B508 STR V1, [X31 + 0x5A]
	0x0373B50C LDR X8, [X20 + 0x20]
	0x0373B510 CBZ X8, 0x373BBEC
	0x0373B514 ADD X1, X8, 0x30
	0x0373B518 ADD X8, X31, 0x468
	0x0373B51C ADD X0, X8, 0xB8
	0x0373B520 MOVZ W2, 0x60
	0x0373B524 BL 0x3EB1B30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move TEMP, 0
	006 Not TEMP
	007 Move W8, TEMP
	008 Move X1, X31
	009 Move X20, X0
	010 Move [X0+88], W8
	011 Call Object..ctor, X0
	012 Move [X20+16], X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Return 

Method: System.Void Dispose()

Disassembly:
	0x0373B528 LDR X1, [X27]
	0x0373B52C ADD X0, X31, 0x590
	0x0373B530 BL 0x249A614
	0x0373B534 MOV X23, X0
	0x0373B538 CBZ X0, 0x373BBF0

ISIL:
	001 Move X0, [X0+96]
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move X1, X31
	005 Call InputActionState.Dispose, X0
	006 Return 
	007 Return 

Method: System.Int32 FindActionIndex(System.String nameOrId)

Disassembly:
	0x0373B53C ADRP X22, 0x9B8000
	0x0373B540 ADRP X24, 0xA0A000
	0x0373B544 LDR X22, [X22 + 0xE18]
	0x0373B548 LDR X24, [X24 + 0xC0]
	0x0373B54C LDR X8, [X23]
	0x0373B550 LDR X1, [X22]
	0x0373B554 LDRH W9, [X8 + 0x12E]
	0x0373B558 CBZ X9, 0x373B57C
	0x0373B55C LDR X10, [X8 + 0xB0]
	0x0373B560 ADD X10, X10, 0x8
	0x0373B564 LDUR X11, [X10 - 0x8]
	0x0373B568 CMP X11, X1
	0x0373B56C B.EQ 0x373B58C
	0x0373B570 SUBS X9, X9, 0x1
	0x0373B574 ADD X10, X10, 0x10
	0x0373B578 B.NE 0x373B564
	0x0373B57C MOV X0, X23
	0x0373B580 MOV W2, W31
	0x0373B584 BL 0x1C5C788
	0x0373B588 B 0x373B598
	0x0373B58C LDRSW X9, [X10]
	0x0373B590 ADD X8, X8, X9, 0x4, LSL
	0x0373B594 ADD X0, X8, 0x138
	0x0373B598 LDP X8, X1, [X0]
	0x0373B59C MOV X0, X23
	0x0373B5A0 BLR X8
	0x0373B5A4 TBZ X0, 0x0, 0x373B61C
	0x0373B5A8 LDR X8, [X23]
	0x0373B5AC LDR X1, [X24]
	0x0373B5B0 LDRH W9, [X8 + 0x12E]
	0x0373B5B4 CBZ X9, 0x373B5D8
	0x0373B5B8 LDR X10, [X8 + 0xB0]
	0x0373B5BC ADD X10, X10, 0x8
	0x0373B5C0 LDUR X11, [X10 - 0x8]
	0x0373B5C4 CMP X11, X1
	0x0373B5C8 B.EQ 0x373B5E8
	0x0373B5CC SUBS X9, X9, 0x1
	0x0373B5D0 ADD X10, X10, 0x10
	0x0373B5D4 B.NE 0x373B5C0
	0x0373B5D8 MOV X0, X23
	0x0373B5DC MOV W2, W31
	0x0373B5E0 BL 0x1C5C788
	0x0373B5E4 B 0x373B5F4
	0x0373B5E8 LDRSW X9, [X10]
	0x0373B5EC ADD X8, X8, X9, 0x4, LSL
	0x0373B5F0 ADD X0, X8, 0x138
	0x0373B5F4 LDP X8, X1, [X0]
	0x0373B5F8 MOV X0, X23
	0x0373B5FC BLR X8
	0x0373B600 CBZ X0, 0x373BBBC
	0x0373B604 LDR W8, [X0 + 0xC8]
	0x0373B608 UBFM W9, W8, 0x1, 0x1
	0x0373B60C AND W8, W8, 0xFFFFFFF8
	0x0373B610 ORR W21, W9, W21, 0x0
	0x0373B614 STR W8, [X0 + 0xC8]
	0x0373B618 B 0x373B54C
	0x0373B61C MOV X22, X31
	0x0373B620 MOVZ W24, 0x5
	0x0373B624 CBZ X23, 0x373B680
	0x0373B628 LDR X8, [X23]
	0x0373B62C LDR X1, [X25]
	0x0373B630 LDRH W9, [X8 + 0x12E]
	0x0373B634 CBZ X9, 0x373B658
	0x0373B638 LDR X10, [X8 + 0xB0]
	0x0373B63C ADD X10, X10, 0x8
	0x0373B640 LDUR X11, [X10 - 0x8]
	0x0373B644 CMP X11, X1
	0x0373B648 B.EQ 0x373B668
	0x0373B64C SUBS X9, X9, 0x1
	0x0373B650 ADD X10, X10, 0x10
	0x0373B654 B.NE 0x373B640
	0x0373B658 MOV X0, X23
	0x0373B65C MOV W2, W31
	0x0373B660 BL 0x1C5C788
	0x0373B664 B 0x373B674
	0x0373B668 LDRSW X9, [X10]
	0x0373B66C ADD X8, X8, X9, 0x4, LSL
	0x0373B670 ADD X0, X8, 0x138
	0x0373B674 LDP X8, X1, [X0]
	0x0373B678 MOV X0, X23
	0x0373B67C BLR X8
	0x0373B680 CBNZ X22, 0x373BBF4
	0x0373B684 CMP W24, 0x5
	0x0373B688 AND W21, W21, 0x1
	0x0373B68C B.EQ 0x373B6CC
	0x0373B690 CBNZ W24, 0x373BB24
	0x0373B694 ADRP X8, 0xA0A000
	0x0373B698 LDR X8, [X8 + 0x2E8]
	0x0373B69C LDR X1, [X8]
	0x0373B6A0 ADD X8, X31, 0x318
	0x0373B6A4 MOV X0, X20
	0x0373B6A8 BL 0x249A584
	0x0373B6AC LDP V0, V1, [X28]
	0x0373B6B0 STR V0, [X31 + 0x59]
	0x0373B6B4 STR V1, [X31 + 0x5A]
	0x0373B6B8 LDR W8, [X20 + 0xC8]
	0x0373B6BC AND W9, W8, 0x2
	0x0373B6C0 AND W8, W8, 0xFFFFFFF8
	0x0373B6C4 ORR W21, W21, W9, 0x1
	0x0373B6C8 STR W8, [X20 + 0xC8]
	0x0373B6CC MOVI V0.2D, 0x0
	0x0373B6D0 STRB W31, [X31 + 0x464]
	0x0373B6D4 STR V0, [X31 + 0x44]
	0x0373B6D8 STR V0, [X31 + 0x45]
	0x0373B6DC LDR X8, [X20 + 0x60]
	0x0373B6E0 CBZ X8, 0x373B748
	0x0373B6E4 ADD X0, X8, 0x40
	0x0373B6E8 ADD X8, X31, 0x318
	0x0373B6EC MOV X1, X31
	0x0373B6F0 BL 0x374B1F0
	0x0373B6F4 ADD X0, X31, 0x5B0
	0x0373B6F8 ADD X1, X31, 0x318
	0x0373B6FC MOVZ W2, 0x80
	0x0373B700 BL 0x3EB1AC0
	0x0373B704 LDR X0, [X20 + 0x60]
	0x0373B708 CBZ X0, 0x373BBE0
	0x0373B70C ADD X2, X31, 0x440
	0x0373B710 ADD X3, X31, 0x464
	0x0373B714 MOV W1, W21
	0x0373B718 MOV X4, X31
	0x0373B71C BL 0x374B7A0
	0x0373B720 LDR X1, [X20 + 0x60]
	0x0373B724 ADD X0, X31, 0x468
	0x0373B728 MOV W2, W21
	0x0373B72C MOV X3, X31
	0x0373B730 BL 0x3753C18
	0x0373B734 LDR X8, [X20 + 0x60]
	0x0373B738 CBZ X8, 0x373BBE4
	0x0373B73C ADD X0, X8, 0x40

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xCA6000
	009 Move W8, [X21+3342]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x9EA000
	017 Move X0, [X0+3904]
	018 Call 0x1C17CF4
	019 Move X0, 0x9E6000
	020 Move X0, [X0+864]
	021 Call 0x1C17CF4
	022 Move X0, 0x9C4000
	023 Move X0, [X0+1752]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3342], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Move [X31+12], W31
	030 Call String.IsNullOrEmpty, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {145}
	035 Move X8, [X20+40]
	036 Compare X8, 0
	037 JumpIfEqual {145}
	038 Move X0, X20
	039 Call InputActionMap.SetUpActionLookupTable, X0
	040 Move X8, [X20+40]
	041 Compare X8, 0
	042 JumpIfEqual {158}
	043 Compare X19, 0
	044 JumpIfEqual {158}
	045 Move W23, [X8+24]
	046 Move X8, 0x9E6000
	047 Move X8, [X8+864]
	048 Move X0, X19
	049 Move X2, X31
	050 Move X1, [X8]
	051 Call String.StartsWith, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {90}
	056 Move X8, 0x9C4000
	057 Move X8, [X8+1752]
	058 Move X0, X19
	059 Move X2, X31
	060 Move X1, [X8]
	061 Call String.EndsWith, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {90}
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W8, [X19+16]
	068 Move W21, W31
	069 Subtract W22, W8, 2
	070 Move X8, [X20+40]
	071 Compare X8, 0
	072 JumpIfEqual {158}
	073 Move W9, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X8, X8, W21
	076 Move X8, [X8+32]
	077 Compare X8, 0
	078 JumpIfEqual {158}
	079 Move X0, [X8+40]
	080 Move W3, 1
	081 Move W1, W31
	082 Move X2, X19
	083 Move W4, W22
	084 Move X5, X31
	085 Call String.Compare, X0, X1, X2, X3, X4
	086 Compare W0, 0
	087 JumpIfEqual {148}
	088 Add W21, W21, 1
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X0, [X20+312]
	091 Compare X0, 0
	092 JumpIfEqual {158}
	093 Move X8, 0x9EA000
	094 Move X8, [X8+3904]
	095 Add X2, X31, 12
	096 Move X1, X19
	097 Move X3, [X8]
	098 Call Dictionary`2<Object, Int32>.TryGetValue, X0, X1, X2
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {104}
	103 Move W21, [X31+12]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move W22, W31
	106 Move X8, [X20+40]
	107 Compare X8, 0
	108 JumpIfEqual {158}
	109 Move W9, [X8+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X21, W22
	112 Add X8, X8, X21
	113 Move X8, [X8+32]
	114 Compare X8, 0
	115 JumpIfEqual {158}
	116 Move X0, [X8+40]
	117 Move X1, X19
	118 Move X2, X31
	119 Call String.op_Equality, X0, X1
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfEqual {157}
	124 Move X8, [X20+40]
	125 Compare X8, 0
	126 JumpIfEqual {158}
	127 Move W9, [X8+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Add X8, X8, X21
	130 Move X8, [X8+32]
	131 Compare X8, 0
	132 JumpIfEqual {158}
	133 Move X0, [X8+16]
	134 Move W2, 3
	135 Move X1, X19
	136 Move X3, X31
	137 Call String.Compare, X0, X1, X2
	138 Compare W0, 0
	139 JumpIfEqual {157}
	140 Add W22, W22, 1
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move TEMP, 0
	143 Not TEMP
	144 Move W21, TEMP
	145 Move TEMP, 0
	146 Not TEMP
	147 Move W21, TEMP
	148 Move W0, W21
	149 Move X20, [X31+48]
	150 Move X19, [X31+56]
	151 Move X22, [X31+32]
	152 Move X21, [X31+40]
	153 Move X30, [X31+16]
	154 Move X23, [X31+24]
	155 Add X31, X31, 64
	156 Return X0
	157 Move W21, W22
	158 Call 0x1C17F20
	159 Call 0x1C17F28

Method: System.Void SetUpActionLookupTable()

Disassembly:
	0x0373B740 MOV X1, X31
	0x0373B744 BL 0x374B064
	0x0373B748 LDR X1, [X27]
	0x0373B74C ADD X0, X31, 0x590
	0x0373B750 BL 0x249A614
	0x0373B754 MOV X23, X0
	0x0373B758 CBZ X0, 0x373BBD4
	0x0373B75C ADRP X22, 0x9B8000
	0x0373B760 ADRP X24, 0xA0A000
	0x0373B764 LDR X22, [X22 + 0xE18]
	0x0373B768 LDR X24, [X24 + 0xC0]
	0x0373B76C LDR X8, [X23]
	0x0373B770 LDR X1, [X22]
	0x0373B774 LDRH W9, [X8 + 0x12E]
	0x0373B778 CBZ X9, 0x373B79C
	0x0373B77C LDR X10, [X8 + 0xB0]
	0x0373B780 ADD X10, X10, 0x8
	0x0373B784 LDUR X11, [X10 - 0x8]
	0x0373B788 CMP X11, X1
	0x0373B78C B.EQ 0x373B7AC
	0x0373B790 SUBS X9, X9, 0x1
	0x0373B794 ADD X10, X10, 0x10
	0x0373B798 B.NE 0x373B784
	0x0373B79C MOV X0, X23
	0x0373B7A0 MOV W2, W31
	0x0373B7A4 BL 0x1C5C788
	0x0373B7A8 B 0x373B7B8
	0x0373B7AC LDRSW X9, [X10]
	0x0373B7B0 ADD X8, X8, X9, 0x4, LSL
	0x0373B7B4 ADD X0, X8, 0x138
	0x0373B7B8 LDP X8, X1, [X0]
	0x0373B7BC MOV X0, X23
	0x0373B7C0 BLR X8
	0x0373B7C4 TBZ X0, 0x0, 0x373B834
	0x0373B7C8 LDR X8, [X23]
	0x0373B7CC LDR X1, [X24]
	0x0373B7D0 LDRH W9, [X8 + 0x12E]
	0x0373B7D4 CBZ X9, 0x373B7F8
	0x0373B7D8 LDR X10, [X8 + 0xB0]
	0x0373B7DC ADD X10, X10, 0x8
	0x0373B7E0 LDUR X11, [X10 - 0x8]
	0x0373B7E4 CMP X11, X1
	0x0373B7E8 B.EQ 0x373B808
	0x0373B7EC SUBS X9, X9, 0x1
	0x0373B7F0 ADD X10, X10, 0x10
	0x0373B7F4 B.NE 0x373B7E0
	0x0373B7F8 MOV X0, X23
	0x0373B7FC MOV W2, W31
	0x0373B800 BL 0x1C5C788
	0x0373B804 B 0x373B814
	0x0373B808 LDRSW X9, [X10]
	0x0373B80C ADD X8, X8, X9, 0x4, LSL
	0x0373B810 ADD X0, X8, 0x138
	0x0373B814 LDP X8, X1, [X0]
	0x0373B818 MOV X0, X23
	0x0373B81C BLR X8
	0x0373B820 MOV X1, X0
	0x0373B824 ADD X0, X31, 0x468
	0x0373B828 MOV X2, X31
	0x0373B82C BL 0x3753D00
	0x0373B830 B 0x373B76C
	0x0373B834 MOV X22, X31
	0x0373B838 MOVZ W24, 0x9
	0x0373B83C CBZ X23, 0x373B898
	0x0373B840 LDR X8, [X23]
	0x0373B844 LDR X1, [X25]
	0x0373B848 LDRH W9, [X8 + 0x12E]
	0x0373B84C CBZ X9, 0x373B870
	0x0373B850 LDR X10, [X8 + 0xB0]
	0x0373B854 ADD X10, X10, 0x8
	0x0373B858 LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xCA6000
	008 Move W8, [X20+3343]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x9BB000
	015 Move X0, [X0+2848]
	016 Call 0x1C17CF4
	017 Move X0, 0x9BE000
	018 Move X0, [X0+1960]
	019 Call 0x1C17CF4
	020 Move X0, 0x9BB000
	021 Move X0, [X0+2840]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3343], W8
	025 Move X8, [X19+312]
	026 Compare X8, 0
	027 JumpIfEqual {35}
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Move X23, [X31+56]
	034 Return 
	035 Move X8, [X19+40]
	036 Compare X8, 0
	037 JumpIfEqual {28}
	038 Move X8, 0x9BB000
	039 Move X8, [X8+2840]
	040 Move X0, [X8]
	041 Call 0x1C17F10
	042 Move X8, 0x9BB000
	043 Move X8, [X8+2848]
	044 Move X20, X0
	045 Move X1, [X8]
	046 Call Dictionary`2<Object, Int32>..ctor, X0
	047 Move X8, [X19+40]
	048 Move [X19+312], X20
	049 Compare X8, 0
	050 JumpIfEqual {83}
	051 Move W9, [X8+24]
	052 Subtract W22, W9, 1
	053 Move X23, 0x9BE000
	054 Move X23, [X23+1960]
	055 Move W20, W31
	056 Move W9, [X8+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X8, X8, W20
	059 Move X21, [X8+32]
	060 Compare X21, 0
	061 JumpIfEqual {83}
	062 Move X0, X21
	063 Call InputAction.MakeSureIdIsInPlace, X0
	064 Move X0, [X19+312]
	065 Compare X0, 0
	066 JumpIfEqual {83}
	067 Move X1, [X21+16]
	068 Move X3, [X23]
	069 Move W2, W20
	070 Call Dictionary`2<Object, Int32>.set_Item, X0, X1, X2
	071 Move X0, [X19+312]
	072 Compare X0, 0
	073 JumpIfEqual {83}
	074 Move X1, [X21+40]
	075 Move X3, [X23]
	076 Move W2, W20
	077 Call Dictionary`2<Object, Int32>.set_Item, X0, X1, X2
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X8, [X19+40]
	080 Add W20, W20, 1
	081 Compare X8, 0
	082 JumpIfNotEqual {56}
	083 Call 0x1C17F20
	084 Call 0x1C17F28

Method: System.Void ClearActionLookupTable()

Disassembly:
	0x0373B85C CMP X11, X1
	0x0373B860 B.EQ 0x373B880
	0x0373B864 SUBS X9, X9, 0x1
	0x0373B868 ADD X10, X10, 0x10
	0x0373B86C B.NE 0x373B858
	0x0373B870 MOV X0, X23
	0x0373B874 MOV W2, W31
	0x0373B878 BL 0x1C5C788
	0x0373B87C B 0x373B88C
	0x0373B880 LDRSW X9, [X10]
	0x0373B884 ADD X8, X8, X9, 0x4, LSL
	0x0373B888 ADD X0, X8, 0x138
	0x0373B88C LDP X8, X1, [X0]
	0x0373B890 MOV X0, X23
	0x0373B894 BLR X8
	0x0373B898 CBNZ X22, 0x373BBD8
	0x0373B89C CMP W24, 0x9
	0x0373B8A0 B.EQ 0x373B8A8
	0x0373B8A4 CBNZ W24, 0x373BB24
	0x0373B8A8 LDR X22, [X20 + 0x60]
	0x0373B8AC CBZ X22, 0x373B8D4
	0x0373B8B0 ADD X0, X31, 0xC8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xCA6000
	005 Move W8, [X20+3344]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA0B000
	012 Move X0, [X0+664]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3344], W8
	016 Move X0, [X19+312]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0xA0B000
	020 Move X8, [X8+664]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call Dictionary`2<Object, Int32>.Clear, X0
	026 Return 
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return 

Method: System.Int32 FindActionIndex(System.Guid id)

Disassembly:
	0x0373B8B4 ADD X1, X31, 0x468
	0x0373B8B8 MOVZ W2, 0x128
	0x0373B8BC BL 0x3EB1AC0
	0x0373B8C0 ADD X1, X31, 0xC8
	0x0373B8C4 MOV X0, X22
	0x0373B8C8 MOV X2, X31
	0x0373B8CC BL 0x374A894
	0x0373B8D0 B 0x373B928
	0x0373B8D4 ADRP X8, 0xA0A000
	0x0373B8D8 LDR X8, [X8 + 0x2D8]
	0x0373B8DC LDR X0, [X8]
	0x0373B8E0 BL 0x1C16F10
	0x0373B8E4 MOV X22, X0
	0x0373B8E8 MOV X1, X31
	0x0373B8EC BL 0x374B1E8
	0x0373B8F0 ADD X0, X31, 0x318
	0x0373B8F4 ADD X1, X31, 0x468
	0x0373B8F8 MOVZ W2, 0x128
	0x0373B8FC STR X22, [X20 + 0x60]
	0x0373B900 BL 0x3EB1AC0
	0x0373B904 CBZ X22, 0x373BC0C
	0x0373B908 ADD X0, X31, 0x1F0
	0x0373B90C ADD X1, X31, 0x318
	0x0373B910 MOVZ W2, 0x128
	0x0373B914 BL 0x3EB1AC0
	0x0373B918 ADD X1, X31, 0x1F0
	0x0373B91C MOV X0, X22
	0x0373B920 MOV X2, X31
	0x0373B924 BL 0x374A820
	0x0373B928 LDR X0, [X26]
	0x0373B92C LDR X22, [X20 + 0x20]
	0x0373B930 LDR W8, [X0 + 0xE0]
	0x0373B934 CBNZ W8, 0x373B93C
	0x0373B938 BL 0x1C16DFC
	0x0373B93C MOV X0, X22
	0x0373B940 MOV X1, X31
	0x0373B944 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+40]
	008 Compare X8, 0
	009 JumpIfEqual {37}
	010 Move W9, [X8+24]
	011 Subtract W23, W9, 1
	012 Move X20, X2
	013 Move X21, X0
	014 Move X22, X1
	015 Move W19, W31
	016 Move W9, [X8+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Add X8, X8, W19
	019 Move X0, [X8+32]
	020 Compare X0, 0
	021 JumpIfEqual {36}
	022 Call InputAction.get_idDontGenerate, X0
	023 Move X2, X22
	024 Move X3, X20
	025 Move X4, X31
	026 Call Guid.op_Equality, X0, X1
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {40}
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X21+40]
	033 Add W19, W19, 1
	034 Compare X8, 0
	035 JumpIfNotEqual {16}
	036 Call 0x1C17F20
	037 Move TEMP, 0
	038 Not TEMP
	039 Move W19, TEMP
	040 Move W0, W19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return X0
	048 Call 0x1C17F28

Method: UnityEngine.InputSystem.InputAction FindAction(System.String actionNameOrId, System.Boolean throwIfNotFound = False)

Disassembly:
	0x037386AC STRB W8, [X21 + 0xD17]
	0x037386B0 LDR X0, [X20]
	0x037386B4 STP X31, X31, [X31 + 0x30]
	0x037386B8 STR X31, [X31 + 0x40]
	0x037386BC STP X31, X31, [X31 + 0x20]
	0x037386C0 LDR W8, [X0 + 0xE0]
	0x037386C4 LDR X20, [X19 + 0x20]
	0x037386C8 CBNZ W8, 0x37386D0
	0x037386CC BL 0x1C16DFC
	0x037386D0 MOV X0, X20
	0x037386D4 MOV X1, X31
	0x037386D8 MOV X2, X31
	0x037386DC BL 0x3C354F8
	0x037386E0 TBZ X0, 0x0, 0x3738818
	0x037386E4 LDR X0, [X19 + 0x20]
	0x037386E8 CBZ X0, 0x37387D0
	0x037386EC BL 0x3736750
	0x037386F0 ADRP X8, 0xA0D000
	0x037386F4 LDR X8, [X8 + 0x10]
	0x037386F8 STP X0, X1, [X31 + 0x20]
	0x037386FC ADD X0, X31, 0x20
	0x03738700 LDR X9, [X8]
	0x03738704 ADD X8, X31, 0x8
	0x03738708 MOV X1, X9
	0x0373870C BL 0x24FD990
	0x03738710 LDUR V0, [X31 + 0x8]
	0x03738714 LDR X8, [X31 + 0x18]
	0x03738718 ADRP X20, 0xA0D000
	0x0373871C LDR X20, [X20 + 0x20]
	0x03738720 STR V0, [X31 + 0x3]
	0x03738724 STR X8, [X31 + 0x40]
	0x03738728 ADRP X21, 0xA0D000
	0x0373872C LDR X21, [X21 + 0x28]
	0x03738730 LDR X1, [X20]
	0x03738734 ADD X0, X31, 0x30
	0x03738738 BL 0x2BC496C
	0x0373873C TBZ X0, 0x0, 0x37387B4
	0x03738740 LDR X1, [X21]
	0x03738744 ADD X0, X31, 0x30
	0x03738748 BL 0x2BC4998
	0x0373874C CBZ X0, 0x37387CC
	0x03738750 LDR W8, [X0 + 0x48]
	0x03738754 CMP W8, 0x0
	0x03738758 B.LE 0x3738730
	0x0373875C LDR X20, [X19 + 0x20]
	0x03738760 ADRP X0, 0xA0D000
	0x03738764 LDR X0, [X0 + 0x158]
	0x03738768 BL 0x1C16D08
	0x0373876C MOV X1, X20
	0x03738770 MOV X2, X31
	0x03738774 BL 0x321EFD0
	0x03738778 MOV X20, X0
	0x0373877C ADRP X0, 0x9BB000
	0x03738780 LDR X0, [X0 + 0x5B0]
	0x03738784 BL 0x1C16D08
	0x03738788 BL 0x1C16F10
	0x0373878C MOV X21, X0
	0x03738790 MOV X1, X20
	0x03738794 MOV X2, X31
	0x03738798 BL 0x337DF1C
	0x0373879C ADRP X0, 0xA0D000
	0x037387A0 LDR X0, [X0 + 0x160]
	0x037387A4 BL 0x1C16D08
	0x037387A8 MOV X1, X0
	0x037387AC MOV X0, X21
	0x037387B0 BL 0x1C16DEC
	0x037387B4 ADRP X8, 0xA0D000
	0x037387B8 LDR X8, [X8 + 0x18]
	0x037387BC ADD X0, X31, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {29}
	007 Move W21, W2
	008 Move X20, X1
	009 Move X19, X0
	010 Call InputActionMap.FindActionIndex, X0, X1
	011 Add W31, W0, 1
	012 Move X8, [X19+40]
	013 Compare X8, 0
	014 JumpIfEqual {47}
	015 Move W9, [X8+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add X8, X8, W0
	018 Move X0, [X8+32]
	019 Move TEMP, X21
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {49}
	023 Move X0, X31
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return X0
	029 Move X0, 0x9C1000
	030 Move X0, [X0+1320]
	031 Call 0x1C17D08
	032 Call 0x1C17F10
	033 Move X19, X0
	034 Move X0, 0xA0E000
	035 Move X0, [X0+144]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Move X2, X31
	040 Call ArgumentNullException..ctor, X0, X1
	041 Move X0, 0xA0E000
	042 Move X0, [X0+248]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC
	047 Call 0x1C17F20
	048 Call 0x1C17F28
	049 Move X0, 0xA0E000
	050 Move X0, [X0+136]
	051 Call 0x1C17D08
	052 Move X1, X20
	053 Move X2, X19
	054 Move X3, X31
	055 Call String.Format, X0, X1, X2
	056 Move X19, X0
	057 Move X0, 0x9C4000
	058 Move X0, [X0+1400]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X20, X0
	062 Move X0, 0xA0E000
	063 Move X0, [X0+144]
	064 Call 0x1C17D08
	065 Move X2, X0
	066 Move X0, X20
	067 Move X1, X19
	068 Move X3, X31
	069 Call ArgumentException..ctor, X0, X1, X2
	070 Move X0, 0xA0E000
	071 Move X0, [X0+248]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X20
	075 Call 0x1C17DEC

Method: UnityEngine.InputSystem.InputAction FindAction(System.Guid id)

Disassembly:
	0x03738C9C ADRP X0, 0xA0D000
	0x03738CA0 LDR X0, [X0 + 0x1D0]
	0x03738CA4 BL 0x1C16CF4
	0x03738CA8 ADRP X0, 0xA0D000
	0x03738CAC LDR X0, [X0 + 0x1D8]
	0x03738CB0 BL 0x1C16CF4
	0x03738CB4 ADRP X0, 0xA0D000
	0x03738CB8 LDR X0, [X0 + 0x188]
	0x03738CBC BL 0x1C16CF4
	0x03738CC0 ADRP X0, 0xA0D000
	0x03738CC4 LDR X0, [X0 + 0x198]
	0x03738CC8 BL 0x1C16CF4
	0x03738CCC ADRP X0, 0xA0D000
	0x03738CD0 LDR X0, [X0 + 0x1E0]
	0x03738CD4 BL 0x1C16CF4
	0x03738CD8 ADRP X0, 0xA0D000
	0x03738CDC LDR X0, [X0 + 0x178]
	0x03738CE0 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InputActionMap.FindActionIndex, X0, X1
	005 Add W31, W0, 1
	006 Move X8, [X19+40]
	007 Compare X8, 0
	008 JumpIfEqual {17}
	009 Move W9, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, W0
	012 Move X0, [X8+32]
	013 Move X0, X31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0
	017 Call 0x1C17F20
	018 Call 0x1C17F28

Method: System.Boolean IsUsableWithDevice(UnityEngine.InputSystem.InputDevice device)

Disassembly:
	0x03739058 B.CS 0x3739070
	0x0373905C ADD W9, W10, 0x1
	0x03739060 ADD X8, X8, X10, 0x3, LSL
	0x03739064 STR W9, [X0 + 0x18]
	0x03739068 STR X25, [X8 + 0x20]
	0x0373906C B 0x3739084
	0x03739070 LDR X8, [X9 + 0x20]
	0x03739074 MOV X1, X25
	0x03739078 LDR X8, [X8 + 0xC0]
	0x0373907C LDR X2, [X8 + 0x70]
	0x03739080 BL 0x301BF90
	0x03739084 ADRP X8, 0xA0C000
	0x03739088 LDR X8, [X8 + 0x210]
	0x0373908C LDR X0, [X8]
	0x03739090 BL 0x1C16F10
	0x03739094 ADRP X8, 0xA0C000
	0x03739098 LDR X8, [X8 + 0x1E8]
	0x0373909C MOV X25, X0
	0x037390A0 LDR X1, [X8]
	0x037390A4 BL 0x2FCD7F8
	0x037390A8 CBZ X21, 0x3739968
	0x037390AC ADRP X9, 0xA0C000
	0x037390B0 LDR W10, [X21 + 0x1C]
	0x037390B4 LDR X8, [X21 + 0x10]
	0x037390B8 LDR X9, [X9 + 0x1B0]
	0x037390BC ADD W10, W10, 0x1
	0x037390C0 LDR X9, [X9]
	0x037390C4 STR W10, [X21 + 0x1C]
	0x037390C8 CBZ X8, 0x3739968
	0x037390CC LDRSW X10, [X21 + 0x18]
	0x037390D0 LDR W11, [X8 + 0x18]
	0x037390D4 CMP W10, W11
	0x037390D8 B.CS 0x37390F0
	0x037390DC ADD W9, W10, 0x1
	0x037390E0 ADD X8, X8, X10, 0x3, LSL
	0x037390E4 STR W9, [X21 + 0x18]
	0x037390E8 STR X25, [X8 + 0x20]
	0x037390EC B 0x3739108
	0x037390F0 LDR X8, [X9 + 0x20]
	0x037390F4 MOV X0, X21
	0x037390F8 MOV X1, X25
	0x037390FC LDR X8, [X8 + 0xC0]
	0x03739100 LDR X2, [X8 + 0x70]
	0x03739104 BL 0x301BF90
	0x03739108 ADD X0, X31, 0x2F0
	0x0373910C MOV X1, X23
	0x03739110 BL 0x373C814
	0x03739114 MOV X23, X0
	0x03739118 LDR X0, [X31 + 0x58]
	0x0373911C ADRP X8, 0xA0C000
	0x03739120 LDR X8, [X8 + 0x1F8]
	0x03739124 MOV W1, W24
	0x03739128 LDR X2, [X8]
	0x0373912C BL 0x301BCCC
	0x03739130 CBZ X0, 0x3739968
	0x03739134 ADRP X9, 0xA0C000
	0x03739138 LDR W10, [X0 + 0x1C]
	0x0373913C LDR X8, [X0 + 0x10]
	0x03739140 LDR X9, [X9 + 0x1B8]
	0x03739144 ADD W10, W10, 0x1
	0x03739148 LDR X9, [X9]
	0x0373914C STR W10, [X0 + 0x1C]
	0x03739150 CBZ X8, 0x3739968
	0x03739154 LDRSW X10, [X0 + 0x18]
	0x03739158 LDR W11, [X8 + 0x18]
	0x0373915C CMP W10, W11
	0x03739160 B.CS 0x3739178
	0x03739164 ADD W9, W10, 0x1
	0x03739168 ADD X8, X8, X10, 0x3, LSL

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 NotImplemented "Instruction MOVI not yet implemented."
	009 Move [X31+80], X31
	010 Move [X31+48], V0
	011 Move [X31+56], V0
	012 Move [X31+16], V0
	013 Move [X31+24], V0
	014 Move [X31], V0
	015 Compare X1, 0
	016 JumpIfEqual {64}
	017 Move X22, [X0+48]
	018 Compare X22, 0
	019 JumpIfEqual {53}
	020 Move X8, [X22+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X19, X1
	023 Move X23, X31
	024 And X8, X8, 0
	025 Add X20, X22, 32
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X0, X31, 0
	028 Move W2, 88
	029 Move X1, X20
	030 Call 0x3EB2B30
	031 Add X0, X31, 0
	032 Move X1, X31
	033 Call InputBinding.get_effectivePath, X0
	034 Move X1, X31
	035 Move X21, X0
	036 Call String.IsNullOrEmpty, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {49}
	041 Move X0, X21
	042 Move X1, X19
	043 Move X2, X31
	044 Call InputControlPath.Matches, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {62}
	049 Move W8, [X22+24]
	050 Add X23, X23, 1
	051 Add X20, X20, 88
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W0, W31
	054 Move X20, [X31+128]
	055 Move X19, [X31+136]
	056 Move X22, [X31+112]
	057 Move X21, [X31+120]
	058 Move X30, [X31+96]
	059 Move X23, [X31+104]
	060 Add X31, X31, 144
	061 Return X0
	062 Move W0, 1
	063 Call 0x1C17F28
	064 Move X0, 0x9C0000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0x9E3000
	070 Move X0, [X0+3360]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Move X2, X31
	075 Call ArgumentNullException..ctor, X0, X1
	076 Move X0, 0xA0D000
	077 Move X0, [X0+328]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Call 0x1C17DEC

Method: System.Void Enable()

Disassembly:
	0x037392CC STP V3, V4, [X29]
	0x037392D0 BL 0x2FCE0B8
	0x037392D4 LDR W8, [X21 + 0x18]
	0x037392D8 ADD X20, X20, 0x1
	0x037392DC ADD X22, X22, 0x40
	0x037392E0 CMP X20, W8, SXTW
	0x037392E4 B.LT 0x37391CC
	0x037392E8 LDP X21, X8, [X31 + 0x40]
	0x037392EC ADD X19, X19, 0x1
	0x037392F0 CMP X19, X8
	0x037392F4 B.EQ 0x3739308
	0x037392F8 LDR X8, [X31 + 0x20]
	0x037392FC LDR X8, [X8]
	0x03739300 CBNZ X8, 0x3738E3C
	0x03739304 B 0x3739968
	0x03739308 LDR X8, [X31 + 0x20]
	0x0373930C LDR X8, [X8 + 0x8]
	0x03739310 CBZ X8, 0x373996C
	0x03739314 LDR X9, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+40]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W9, [X0+72]
	007 Move W8, [X8+24]
	008 Move X19, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Move X0, X19
	014 Call InputActionMap.ResolveBindingsIfNecessary, X0
	015 Move X0, [X19+96]
	016 Compare X0, 0
	017 JumpIfEqual {24}
	018 Move X1, X19
	019 Move X2, X31
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Call InputActionState.EnableAllActions, X0, X1
	023 Return 
	024 Call 0x1C17F20

Method: System.Void Disable()

Disassembly:
	0x03739478 STR X26, [X8 + 0x20]
	0x0373947C B 0x3739498
	0x03739480 LDR X8, [X9 + 0x20]
	0x03739484 LDR X0, [X31 + 0x50]
	0x03739488 MOV X1, X26
	0x0373948C LDR X8, [X8 + 0xC0]
	0x03739490 LDR X2, [X8 + 0x70]
	0x03739494 BL 0x301BF90
	0x03739498 ADRP X8, 0xA0C000
	0x0373949C LDR X8, [X8 + 0x218]
	0x037394A0 LDR X0, [X8]
	0x037394A4 BL 0x1C16F10
	0x037394A8 ADRP X8, 0xA0C000

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+72]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X1, X0
	005 Move X0, [X0+96]
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move X2, X31
	009 Move X30, [X31+16]
	010 Call InputActionState.DisableAllActions, X0, X1
	011 Return 
	012 Move X30, [X31+16]
	013 Return 
	014 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionMap Clone()

Disassembly:
	0x0373B948 BL 0x3C354F8
	0x0373B94C TBZ X0, 0x0, 0x373BA38
	0x0373B950 LDR X1, [X27]
	0x0373B954 ADD X0, X31, 0x590
	0x0373B958 BL 0x249A614
	0x0373B95C MOV X23, X0
	0x0373B960 CBZ X0, 0x373BC00
	0x0373B964 ADRP X22, 0x9B8000
	0x0373B968 ADRP X24, 0xA0A000
	0x0373B96C LDR X22, [X22 + 0xE18]
	0x0373B970 LDR X24, [X24 + 0xC0]
	0x0373B974 LDR X8, [X23]
	0x0373B978 LDR X1, [X22]
	0x0373B97C LDRH W9, [X8 + 0x12E]
	0x0373B980 CBZ X9, 0x373B9A4
	0x0373B984 LDR X10, [X8 + 0xB0]
	0x0373B988 ADD X10, X10, 0x8
	0x0373B98C LDUR X11, [X10 - 0x8]
	0x0373B990 CMP X11, X1
	0x0373B994 B.EQ 0x373B9B4
	0x0373B998 SUBS X9, X9, 0x1
	0x0373B99C ADD X10, X10, 0x10
	0x0373B9A0 B.NE 0x373B98C
	0x0373B9A4 MOV X0, X23
	0x0373B9A8 MOV W2, W31
	0x0373B9AC BL 0x1C5C788
	0x0373B9B0 B 0x373B9C0
	0x0373B9B4 LDRSW X9, [X10]
	0x0373B9B8 ADD X8, X8, X9, 0x4, LSL
	0x0373B9BC ADD X0, X8, 0x138
	0x0373B9C0 LDP X8, X1, [X0]
	0x0373B9C4 MOV X0, X23
	0x0373B9C8 BLR X8
	0x0373B9CC TBZ X0, 0x0, 0x373BA40
	0x0373B9D0 LDR X8, [X23]
	0x0373B9D4 LDR X1, [X24]
	0x0373B9D8 LDRH W9, [X8 + 0x12E]
	0x0373B9DC CBZ X9, 0x373BA00
	0x0373B9E0 LDR X10, [X8 + 0xB0]
	0x0373B9E4 ADD X10, X10, 0x8
	0x0373B9E8 LDUR X11, [X10 - 0x8]
	0x0373B9EC CMP X11, X1
	0x0373B9F0 B.EQ 0x373BA10
	0x0373B9F4 SUBS X9, X9, 0x1
	0x0373B9F8 ADD X10, X10, 0x10
	0x0373B9FC B.NE 0x373B9E8
	0x0373BA00 MOV X0, X23
	0x0373BA04 MOV W2, W31
	0x0373BA08 BL 0x1C5C788
	0x0373BA0C B 0x373BA1C
	0x0373BA10 LDRSW X9, [X10]
	0x0373BA14 ADD X8, X8, X9, 0x4, LSL
	0x0373BA18 ADD X0, X8, 0x138
	0x0373BA1C LDP X8, X1, [X0]
	0x0373BA20 MOV X0, X23
	0x0373BA24 BLR X8
	0x0373BA28 CBZ X0, 0x373BBC0
	0x0373BA2C LDR X8, [X20 + 0x60]
	0x0373BA30 STR X8, [X0 + 0x60]
	0x0373BA34 B 0x373B974
	0x0373BA38 LDR X20, [X20 + 0x60]
	0x0373BA3C B 0x373BAC4
	0x0373BA40 MOV X22, X31
	0x0373BA44 MOVZ W24, 0xF
	0x0373BA48 CBZ X23, 0x373BAA4
	0x0373BA4C LDR X8, [X23]
	0x0373BA50 LDR X1, [X25]
	0x0373BA54 LDRH W9, [X8 + 0x12E]
	0x0373BA58 CBZ X9, 0x373BA7C
	0x0373BA5C LDR X10, [X8 + 0xB0]
	0x0373BA60 ADD X10, X10, 0x8
	0x0373BA64 LDUR X11, [X10 - 0x8]
	0x0373BA68 CMP X11, X1
	0x0373BA6C B.EQ 0x373BA8C
	0x0373BA70 SUBS X9, X9, 0x1
	0x0373BA74 ADD X10, X10, 0x10
	0x0373BA78 B.NE 0x373BA64
	0x0373BA7C MOV X0, X23
	0x0373BA80 MOV W2, W31
	0x0373BA84 BL 0x1C5C788
	0x0373BA88 B 0x373BA98
	0x0373BA8C LDRSW X9, [X10]
	0x0373BA90 ADD X8, X8, X9, 0x4, LSL
	0x0373BA94 ADD X0, X8, 0x138
	0x0373BA98 LDP X8, X1, [X0]
	0x0373BA9C MOV X0, X23
	0x0373BAA0 BLR X8
	0x0373BAA4 CBNZ X22, 0x373BC04
	0x0373BAA8 CMP W24, 0xF
	0x0373BAAC B.EQ 0x373BAB4
	0x0373BAB0 CBNZ W24, 0x373BB24
	0x0373BAB4 LDR X8, [X20 + 0x20]
	0x0373BAB8 CBZ X8, 0x373BC10
	0x0373BABC LDR X20, [X20 + 0x60]
	0x0373BAC0 STR X20, [X8 + 0x28]
	0x0373BAC4 LDRB W22, [X31 + 0x464]
	0x0373BAC8 ADD X0, X31, 0x318
	0x0373BACC ADD X1, X31, 0x5B0
	0x0373BAD0 MOVZ W2, 0x80
	0x0373BAD4 BL 0x3EB1AC0
	0x0373BAD8 LDR V0, [X31 + 0x44]
	0x0373BADC LDR V1, [X31 + 0x45]
	0x0373BAE0 STP V0, V1, [X31 + 0xA0]
	0x0373BAE4 CBZ X20, 0x373BBFC
	0x0373BAE8 CMP W22, 0x0
	0x0373BAEC ADD X0, X31, 0x20
	0x0373BAF0 ADD X1, X31, 0x318
	0x0373BAF4 MOVZ W2, 0x80
	0x0373BAF8 CSET W22, NE
	0x0373BAFC BL 0x3EB1AC0
	0x0373BB00 LDP V0, V1, [X31 + 0xA0]
	0x0373BB04 STP V0, V1, [X31]
	0x0373BB08 ADD X2, X31, 0x20
	0x0373BB0C ADD X3, X31, 0x0
	0x0373BB10 MOV X0, X20
	0x0373BB14 MOV W1, W22
	0x0373BB18 MOV W4, W21
	0x0373BB1C MOV X5, X31
	0x0373BB20 BL 0x374C180
	0x0373BB24 MOV X21, X31
	0x0373BB28 ADD X0, X31, 0x5B0
	0x0373BB2C MOV X1, X31
	0x0373BB30 BL 0x374B064

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, 0xCA6000
	012 Move X21, 0xA0A000
	013 Move W8, [X19+3345]
	014 Move X21, [X21+3944]
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0xA0A000
	021 Move X0, [X0+3944]
	022 Call 0x1C17CF4
	023 Move X0, 0xA0A000
	024 Move X0, [X0+4016]
	025 Call 0x1C17CF4
	026 Move X0, 0x9BD000
	027 Move X0, [X0+992]
	028 Call 0x1C17CF4
	029 Move X0, 0xA0A000
	030 Move X0, [X0+3992]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X19+3345], W8
	034 Move X0, [X21]
	035 Call 0x1C17F10
	036 Move TEMP, 0
	037 Not TEMP
	038 Move W8, TEMP
	039 Move X1, X31
	040 Move X19, X0
	041 Move [X0+88], W8
	042 Call Object..ctor, X0
	043 Move X8, [X20+16]
	044 Move [X19+16], X8
	045 Move X8, [X20+40]
	046 Compare X8, 0
	047 JumpIfEqual {95}
	048 Move X9, 0xA0A000
	049 Move X9, [X9+4016]
	050 Move W21, [X8+24]
	051 Move X0, [X9]
	052 Move W1, W21
	053 Call 0x1C17D6C
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X22, X0
	056 Move X25, 0x9BD000
	057 Move X25, [X25+992]
	058 Move W24, W31
	059 Move X8, [X20+40]
	060 Compare X8, 0
	061 JumpIfEqual {137}
	062 Move W9, [X8+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X26, W24
	065 Add X8, X8, X26
	066 Move X0, [X25]
	067 Move X27, [X8+32]
	068 Call 0x1C17F10
	069 Move X23, X0
	070 Call InputAction..ctor, X0
	071 Compare X27, 0
	072 JumpIfEqual {137}
	073 Compare X23, 0
	074 JumpIfEqual {137}
	075 Move X8, [X27+16]
	076 Move [X23+200], X19
	077 Move [X23+16], X8
	078 Move W8, [X27+24]
	079 Move [X23+24], W8
	080 Move V0, [X27+3]
	081 Move [X23+3], V0
	082 Move X8, [X27+32]
	083 Move [X23+32], X8
	084 Move W8, [X27+72]
	085 Move [X23+72], W8
	086 Compare X22, 0
	087 JumpIfEqual {137}
	088 Move W8, [X22+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add W24, W24, 1
	091 Add X8, X22, X26
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move [X8+32], X23
	094 Move [X19+40], X22
	095 Move X8, [X20+48]
	096 Compare X8, 0
	097 JumpIfEqual {125}
	098 Move X9, 0xA0A000
	099 Move X9, [X9+3992]
	100 Move X21, [X8+24]
	101 Move X0, [X9]
	102 Move W1, W21
	103 Call 0x1C17D6C
	104 Move X8, [X20+48]
	105 Move X20, X0
	106 Move W1, W31
	107 Move X2, X20
	108 Move X0, X8
	109 Move W3, W31
	110 Move W4, W21
	111 Move X5, X31
	112 Call Array.Copy, X0, X1, X2, X3, X4
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Compare X20, 0
	115 JumpIfEqual {137}
	116 Move W9, [X20+24]
	117 Move X8, X31
	118 And X10, X21, 0
	119 Add X11, X20, 40
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Add X8, X8, 1
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move [X11+88], X31
	124 Move [X19+48], X20
	125 Move X0, X19
	126 Move X20, [X31+64]
	127 Move X19, [X31+72]
	128 Move X22, [X31+48]
	129 Move X21, [X31+56]
	130 Move X24, [X31+32]
	131 Move X23, [X31+40]
	132 Move X26, [X31+16]
	133 Move X25, [X31+24]
	134 Move X30, [X31+80]
	135 Move X27, [X31+88]
	136 Return X0
	137 Call 0x1C17F20
	138 Call 0x1C17F28

Method: System.Object System.ICloneable.Clone()

Disassembly:
	0x0373BB34 CBNZ X21, 0x373BBCC

ISIL:
	001 Call InputActionMap.Clone, X0
	002 Return X0

Method: System.Boolean Contains(UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x0373BB38 MOV X20, X31
	0x0373BB3C CBZ X19, 0x373BB98
	0x0373BB40 LDR X8, [X19]
	0x0373BB44 LDR X1, [X25]
	0x0373BB48 LDRH W9, [X8 + 0x12E]
	0x0373BB4C CBZ X9, 0x373BB70
	0x0373BB50 LDR X10, [X8 + 0xB0]
	0x0373BB54 ADD X10, X10, 0x8
	0x0373BB58 LDUR X11, [X10 - 0x8]
	0x0373BB5C CMP X11, X1
	0x0373BB60 B.EQ 0x373BB80

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {12}
	003 Move X8, [X1+200]
	004 Compare X8, 0
	005 JumpIfEqual {9}
	006 Move X9, [X8+80]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0
	012 Move W0, W31
	013 Return X0

Method: System.String ToString()

Disassembly:
	0x0373BB64 SUBS X9, X9, 0x1
	0x0373BB68 ADD X10, X10, 0x10
	0x0373BB6C B.NE 0x373BB58
	0x0373BB70 MOV X0, X19
	0x0373BB74 MOV W2, W31
	0x0373BB78 BL 0x1C5C788
	0x0373BB7C B 0x373BB8C
	0x0373BB80 LDRSW X9, [X10]
	0x0373BB84 ADD X8, X8, X9, 0x4, LSL
	0x0373BB88 ADD X0, X8, 0x138
	0x0373BB8C LDP X8, X1, [X0]
	0x0373BB90 MOV X0, X19
	0x0373BB94 BLR X8
	0x0373BB98 CBNZ X20, 0x373BBC4
	0x0373BB9C ADD X31, X31, 0x630
	0x0373BBA0 LDP X20, X19, [X31 + 0x50]
	0x0373BBA4 LDP X22, X21, [X31 + 0x40]
	0x0373BBA8 LDP X24, X23, [X31 + 0x30]
	0x0373BBAC LDP X26, X25, [X31 + 0x20]
	0x0373BBB0 LDP X28, X27, [X31 + 0x10]
	0x0373BBB4 LDP X29, X30, [X31], #0x60
	0x0373BBB8 RET
	0x0373BBBC BL 0x1C16F20
	0x0373BBC0 BL 0x1C16F20
	0x0373BBC4 MOV X0, X20
	0x0373BBC8 BL 0x1C16F18
	0x0373BBCC MOV X0, X21
	0x0373BBD0 BL 0x1C16F18
	0x0373BBD4 BL 0x1C16F20
	0x0373BBD8 MOV X0, X22
	0x0373BBDC BL 0x1C16F18
	0x0373BBE0 BL 0x1C16F20
	0x0373BBE4 BL 0x1C16F20
	0x0373BBE8 BL 0x1C16F20
	0x0373BBEC BL 0x1C16F20
	0x0373BBF0 BL 0x1C16F20
	0x0373BBF4 MOV X0, X22
	0x0373BBF8 BL 0x1C16F18
	0x0373BBFC BL 0x1C16F20
	0x0373BC00 BL 0x1C16F20
	0x0373BC04 MOV X0, X22
	0x0373BC08 BL 0x1C16F18
	0x0373BC0C BL 0x1C16F20
	0x0373BC10 BL 0x1C16F20
	0x0373BC14 B 0x373BC88
	0x0373BC18 B 0x373BC88
	0x0373BC1C B 0x373BCAC
	0x0373BC20 B 0x373BC88
	0x0373BC24 B 0x373BC88
	0x0373BC28 B 0x373BC88

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCA6000
	006 Move X20, 0x9B9000
	007 Move W8, [X21+3346]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x9B9000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0xA0B000
	018 Move X0, [X0+672]
	019 Call 0x1C17CF4
	020 Move X0, 0x9C1000
	021 Move X0, [X0+4080]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3346], W8
	025 Move X0, [X20]
	026 Move X20, [X19+32]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {51}
	039 Move X8, 0x9C1000
	040 Move X8, [X8+4080]
	041 Move X1, [X19+32]
	042 Move X2, [X19+16]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X0, [X8]
	046 Move X3, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call String.Format, X0, X1, X2
	050 Return X0
	051 Move X0, [X19+16]
	052 Move X1, X31
	053 Call String.IsNullOrEmpty, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {61}
	058 Move X8, 0xA0B000
	059 Move X8, [X8+672]
	060 Move X0, [X8]
	061 Move X0, [X19+16]
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return X0

Method: System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.InputAction> GetEnumerator()

Disassembly:
	0x0373BC2C B 0x373BC88
	0x0373BC30 B 0x373BC88
	0x0373BC34 B 0x373BD58
	0x0373BC38 B 0x373BC88
	0x0373BC3C B 0x373BC88
	0x0373BC40 B 0x373BC88
	0x0373BC44 B 0x373BC88
	0x0373BC48 B 0x373BC88
	0x0373BC4C B 0x373BC88
	0x0373BC50 B 0x373BC88
	0x0373BC54 B 0x373BC88
	0x0373BC58 B 0x373BC88
	0x0373BC5C B 0x373BC88
	0x0373BC60 B 0x373BC88
	0x0373BC64 B 0x373BC88
	0x0373BC68 B 0x373BDFC
	0x0373BC6C B 0x373BC88
	0x0373BC70 B 0x373BC88
	0x0373BC74 B 0x373BC88
	0x0373BC78 MOV X20, X1
	0x0373BC7C MOV X24, X0
	0x0373BC80 B 0x373BE8C
	0x0373BC84 B 0x373BC88
	0x0373BC88 MOV X24, X0
	0x0373BC8C MOV W20, W1
	0x0373BC90 B 0x373BE8C
	0x0373BC94 MOV X24, X0
	0x0373BC98 MOVZ W8, 0x1
	0x0373BC9C MOV W20, W1
	0x0373BCA0 B 0x373BEC0
	0x0373BCA4 B 0x373BCAC
	0x0373BCA8 B 0x373BCAC
	0x0373BCAC MOV X24, X0
	0x0373BCB0 CMP W1, 0x1
	0x0373BCB4 B.NE 0x373BCD4
	0x0373BCB8 MOV X0, X24
	0x0373BCBC BL 0x3EB1AD0
	0x0373BCC0 LDR X22, [X0]
	0x0373BCC4 BL 0x3EB1AE0
	0x0373BCC8 MOV W24, W31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0xCA6000
	008 Move X21, 0xA0B000
	009 Move X20, 0xA0B000
	010 Move W8, [X22+3347]
	011 Move X21, [X21+680]
	012 Move X20, [X20+688]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xA0B000
	019 Move X0, [X0+688]
	020 Call 0x1C17CF4
	021 Move X0, 0xA0B000
	022 Move X0, [X0+680]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+3347], W8
	026 Move X0, X19
	027 Call InputActionMap.get_actions, X0
	028 Move X9, [X21]
	029 Move [X31+48], X0
	030 Move [X31+56], X1
	031 Add X8, X31, 24
	032 Add X0, X31, 48
	033 Move X1, X9
	034 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 Move X8, [X31+40]
	037 Move X0, [X20]
	038 Add X1, X31, 0
	039 Move [X31], V0
	040 Move [X31+16], X8
	041 Call 0x1C17E04
	042 Move X20, [X31+96]
	043 Move X19, [X31+104]
	044 Move X22, [X31+80]
	045 Move X21, [X31+88]
	046 Move X30, [X31+64]
	047 Add X31, X31, 112
	048 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0373BCCC CBNZ X23, 0x373BA4C

ISIL:
	001 Call InputActionMap.GetEnumerator, X0
	002 Return X0

Method: System.Boolean get_needToResolveBindings()

Disassembly:
	0x0373BCD0 B 0x373BAA4
	0x0373BCD4 MOV X22, X31
	0x0373BCD8 MOV W20, W1

ISIL:
	001 Move W8, [X0+200]
	002 And W0, W8, 1
	003 Return X0

Method: System.Void set_needToResolveBindings(System.Boolean value)

Disassembly:
	0x0373BCDC CBZ X23, 0x373BD38
	0x0373BCE0 LDR X8, [X23]
	0x0373BCE4 LDR X1, [X25]
	0x0373BCE8 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move W8, [X0+200]
	002 NotImplemented "Instruction BFM not yet implemented."
	003 Move [X0+200], W8
	004 Return 

Method: System.Boolean get_bindingResolutionNeedsFullReResolve()

Disassembly:
	0x0373BCEC CBZ X9, 0x373BD10
	0x0373BCF0 LDR X10, [X8 + 0xB0]
	0x0373BCF4 ADD X10, X10, 0x8

ISIL:
	001 Move W8, [X0+200]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

Method: System.Void set_bindingResolutionNeedsFullReResolve(System.Boolean value)

Disassembly:
	0x0373BCF8 LDUR X11, [X10 - 0x8]
	0x0373BCFC CMP X11, X1
	0x0373BD00 B.EQ 0x373BD20
	0x0373BD04 SUBS X9, X9, 0x1
	0x0373BD08 ADD X10, X10, 0x10
	0x0373BD0C B.NE 0x373BCF8
	0x0373BD10 MOV X0, X23
	0x0373BD14 MOV W2, W31

ISIL:
	001 Move W8, [X0+200]
	002 And W31, W1, 1
	003 Move W9, 2
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFFD
	006 Or W8, W8, W9
	007 Move [X0+200], W8
	008 Return 

Method: System.Boolean get_controlsForEachActionInitialized()

Disassembly:
	0x0373BD18 BL 0x1C5C788
	0x0373BD1C B 0x373BD2C
	0x0373BD20 LDRSW X9, [X10]

ISIL:
	001 Move W8, [X0+200]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Void set_controlsForEachActionInitialized(System.Boolean value)

Disassembly:
	0x0373BD24 ADD X8, X8, X9, 0x4, LSL
	0x0373BD28 ADD X0, X8, 0x138
	0x0373BD2C LDP X8, X1, [X0]
	0x0373BD30 MOV X0, X23
	0x0373BD34 BLR X8
	0x0373BD38 CBZ X22, 0x373BE8C
	0x0373BD3C MOV X0, X22
	0x0373BD40 BL 0x1C16F18

ISIL:
	001 Move W8, [X0+200]
	002 And W31, W1, 1
	003 Move W9, 4
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFFB
	006 Or W8, W8, W9
	007 Move [X0+200], W8
	008 Return 

Method: System.Boolean get_bindingsForEachActionInitialized()

Disassembly:
	0x0373BD44 MOV X24, X0
	0x0373BD48 B 0x373BCD8
	0x0373BD4C B 0x373BD58

ISIL:
	001 Move W8, [X0+200]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: System.Void set_bindingsForEachActionInitialized(System.Boolean value)

Disassembly:
	0x0373BD50 B 0x373BDFC
	0x0373BD54 B 0x373BD58
	0x0373BD58 MOV X24, X0
	0x0373BD5C CMP W1, 0x1
	0x0373BD60 B.NE 0x373BD80
	0x0373BD64 MOV X0, X24
	0x0373BD68 BL 0x3EB1AD0
	0x0373BD6C LDR X22, [X0]

ISIL:
	001 Move W8, [X0+200]
	002 And W31, W1, 1
	003 Move W9, 8
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFFFF7
	006 Or W8, W8, W9
	007 Move [X0+200], W8
	008 Return 

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputBinding> GetBindingsForSingleAction(UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x037355FC MOV X0, X20
	0x03735600 MOV X1, X31
	0x03735604 BL 0x374A7E0
	0x03735608 LDRSW X8, [X19 + 0xC0]
	0x0373560C MOVZ W22, 0x30
	0x03735610 MOV X1, X31
	0x03735614 MADD X19, X8, X22, X0
	0x03735618 MOV X0, X19
	0x0373561C BL 0x374CB58
	0x03735620 ADDS W31, W0, 0x1
	0x03735624 B.EQ 0x37356C0
	0x03735628 MOV W21, W0
	0x0373562C MOV X0, X20
	0x03735630 MOV X1, X31
	0x03735634 BL 0x374A7F0
	0x03735638 SMADDL X19, X21, X22, X0
	0x0373563C LDRB W8, [X19 + 0x2]
	0x03735640 CMP W8, 0x2
	0x03735644 B.NE 0x37356D0
	0x03735648 MOV X0, X19
	0x0373564C MOV X1, X31
	0x03735650 BL 0x374CC54
	0x03735654 FMOV S0, W31
	0x03735658 TBZ X0, 0x0, 0x3735690
	0x0373565C LDR V8, [X19 + 0x4]
	0x03735660 LDR V9, [X19 + 0x10]
	0x03735664 MOV X0, X31
	0x03735668 BL 0x37FC688
	0x0373566C FCVT S1, S8
	0x03735670 FADD D2, D9, D1
	0x03735674 FSUB D2, D2, D0
	0x03735678 FCMP D2, 0x0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCAC000
	007 Move W8, [X21+3348]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA10000
	015 Move X0, [X0+3952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3348], W8
	019 Move W8, [X20+200]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 8
	022 Compare TEMP, 8
	023 JumpIfEqual {26}
	024 Move X0, X20
	025 Call InputActionMap.SetUpPerActionControlAndBindingArrays, X0
	026 Compare X19, 0
	027 JumpIfEqual {46}
	028 Move X8, 0xA10000
	029 Move X8, [X8+3952]
	030 Move X1, [X20+56]
	031 Move W2, [X19+176]
	032 Move W3, [X19+180]
	033 Add X0, X31, 0
	034 Move X4, [X8]
	035 Move [X31], X31
	036 Move [X31+8], X31
	037 Call 0x24FCFF0, X0, X1, X2, X3
	038 Move X0, [X31]
	039 Move X1, [X31+8]
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Move X21, [X31+24]
	044 Add X31, X31, 48
	045 Return X0
	046 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControl> GetControlsForSingleAction(UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x037356F4 BL 0x1C16F20
	0x037356F8 SUB X31, X31, 0x20
	0x037356FC STP X30, X19, [X31 + 0x10]
	0x03735700 MOV X19, X0
	0x03735704 MOV X0, X31
	0x03735708 BL 0x337684C
	0x0373570C STP X0, X1, [X31]
	0x03735710 ADD X0, X31, 0x0
	0x03735714 MOV X1, X31
	0x03735718 BL 0x337866C
	0x0373571C STR X0, [X19 + 0x28]
	0x03735720 LDP X30, X19, [X31 + 0x10]
	0x03735724 ADD X31, X31, 0x20
	0x03735728 RET
	0x0373572C STR X30, [X31 - 0x30]!
	0x03735730 STP X22, X21, [X31 + 0x10]
	0x03735734 STP X20, X19, [X31 + 0x20]
	0x03735738 ADRP X20, 0xCAB000
	0x0373573C ADRP X22, 0xA0F000
	0x03735740 ADRP X21, 0xA0F000
	0x03735744 LDRB W8, [X20 + 0xCE9]
	0x03735748 LDR X22, [X22 + 0xF68]
	0x0373574C LDR X21, [X21 + 0xFB0]
	0x03735750 MOV X19, X0
	0x03735754 TBNZ X8, 0x0, 0x3735778
	0x03735758 ADRP X0, 0xA0F000
	0x0373575C LDR X0, [X0 + 0xF68]
	0x03735760 BL 0x1C16CF4
	0x03735764 ADRP X0, 0xA0F000
	0x03735768 LDR X0, [X0 + 0xFB0]
	0x0373576C BL 0x1C16CF4
	0x03735770 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCAC000
	007 Move W8, [X21+3349]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA10000
	015 Move X0, [X0+3960]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3349], W8
	019 Move W8, [X20+200]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 4
	022 Compare TEMP, 4
	023 JumpIfEqual {26}
	024 Move X0, X20
	025 Call InputActionMap.SetUpPerActionControlAndBindingArrays, X0
	026 Compare X19, 0
	027 JumpIfEqual {46}
	028 Move X8, 0xA10000
	029 Move X8, [X8+3960]
	030 Move X1, [X20+64]
	031 Move W2, [X19+184]
	032 Move W3, [X19+188]
	033 Add X0, X31, 0
	034 Move X4, [X8]
	035 Move [X31], X31
	036 Move [X31+8], X31
	037 Call ReadOnlyArray`1<Object>..ctor, X0, X1, X2, X3
	038 Move X0, [X31]
	039 Move X1, [X31+8]
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Move X21, [X31+24]
	044 Add X31, X31, 48
	045 Return X0
	046 Call 0x1C17F20

Method: System.Void SetUpPerActionControlAndBindingArrays()

Disassembly:
	0x0373BD70 BL 0x3EB1AE0
	0x0373BD74 MOV W24, W31
	0x0373BD78 CBNZ X23, 0x373B628
	0x0373BD7C B 0x373B680
	0x0373BD80 MOV X22, X31
	0x0373BD84 MOV W20, W1
	0x0373BD88 CBZ X23, 0x373BDE4
	0x0373BD8C LDR X8, [X23]
	0x0373BD90 LDR X1, [X25]
	0x0373BD94 LDRH W9, [X8 + 0x12E]
	0x0373BD98 CBZ X9, 0x373BDBC
	0x0373BD9C LDR X10, [X8 + 0xB0]
	0x0373BDA0 ADD X10, X10, 0x8
	0x0373BDA4 LDUR X11, [X10 - 0x8]
	0x0373BDA8 CMP X11, X1
	0x0373BDAC B.EQ 0x373BDCC
	0x0373BDB0 SUBS X9, X9, 0x1
	0x0373BDB4 ADD X10, X10, 0x10
	0x0373BDB8 B.NE 0x373BDA4
	0x0373BDBC MOV X0, X23
	0x0373BDC0 MOV W2, W31
	0x0373BDC4 BL 0x1C5C788
	0x0373BDC8 B 0x373BDD8
	0x0373BDCC LDRSW X9, [X10]
	0x0373BDD0 ADD X8, X8, X9, 0x4, LSL
	0x0373BDD4 ADD X0, X8, 0x138
	0x0373BDD8 LDP X8, X1, [X0]
	0x0373BDDC MOV X0, X23
	0x0373BDE0 BLR X8
	0x0373BDE4 CBZ X22, 0x373BE8C
	0x0373BDE8 MOV X0, X22
	0x0373BDEC BL 0x1C16F18
	0x0373BDF0 MOV X24, X0
	0x0373BDF4 B 0x373BD84
	0x0373BDF8 B 0x373BDFC
	0x0373BDFC MOV X24, X0
	0x0373BE00 CMP W1, 0x1
	0x0373BE04 B.NE 0x373BE24
	0x0373BE08 MOV X0, X24
	0x0373BE0C BL 0x3EB1AD0
	0x0373BE10 LDR X22, [X0]
	0x0373BE14 BL 0x3EB1AE0
	0x0373BE18 MOV W24, W31
	0x0373BE1C CBNZ X23, 0x373B840
	0x0373BE20 B 0x373B898
	0x0373BE24 MOV X22, X31
	0x0373BE28 MOV W20, W1
	0x0373BE2C CBZ X23, 0x373BE88
	0x0373BE30 LDR X8, [X23]
	0x0373BE34 LDR X1, [X25]
	0x0373BE38 LDRH W9, [X8 + 0x12E]
	0x0373BE3C CBZ X9, 0x373BE60
	0x0373BE40 LDR X10, [X8 + 0xB0]
	0x0373BE44 ADD X10, X10, 0x8
	0x0373BE48 LDUR X11, [X10 - 0x8]
	0x0373BE4C CMP X11, X1
	0x0373BE50 B.EQ 0x373BE70
	0x0373BE54 SUBS X9, X9, 0x1
	0x0373BE58 ADD X10, X10, 0x10
	0x0373BE5C B.NE 0x373BE48
	0x0373BE60 MOV X0, X23
	0x0373BE64 MOV W2, W31
	0x0373BE68 BL 0x1C5C788
	0x0373BE6C B 0x373BE7C
	0x0373BE70 LDRSW X9, [X10]
	0x0373BE74 ADD X8, X8, X9, 0x4, LSL
	0x0373BE78 ADD X0, X8, 0x138
	0x0373BE7C LDP X8, X1, [X0]
	0x0373BE80 MOV X0, X23
	0x0373BE84 BLR X8
	0x0373BE88 CBNZ X22, 0x373BEEC
	0x0373BE8C CMP W20, 0x1
	0x0373BE90 B.NE 0x373BEA8
	0x0373BE94 MOV X0, X24
	0x0373BE98 BL 0x3EB1AD0
	0x0373BE9C LDR X21, [X0]
	0x0373BEA0 BL 0x3EB1AE0
	0x0373BEA4 B 0x373BB28
	0x0373BEA8 MOV X21, X31
	0x0373BEAC ADD X0, X31, 0x5B0
	0x0373BEB0 MOV X1, X31
	0x0373BEB4 BL 0x374B064
	0x0373BEB8 CBNZ X21, 0x373BEE4
	0x0373BEBC MOVZ W8, 0x1
	0x0373BEC0 CMP W20, W8
	0x0373BEC4 B.NE 0x373BEDC
	0x0373BEC8 MOV X0, X24
	0x0373BECC BL 0x3EB1AD0
	0x0373BED0 LDR X20, [X0]
	0x0373BED4 BL 0x3EB1AE0
	0x0373BED8 B 0x373BB3C
	0x0373BEDC MOV X20, X31
	0x0373BEE0 B 0x373BF0C
	0x0373BEE4 MOV X0, X21
	0x0373BEE8 BL 0x1C16F18
	0x0373BEEC MOV X0, X22
	0x0373BEF0 BL 0x1C16F18
	0x0373BEF4 MOV X24, X0
	0x0373BEF8 B 0x373BE28
	0x0373BEFC MOV X24, X0
	0x0373BF00 MOV W20, W1
	0x0373BF04 B 0x373BEAC
	0x0373BF08 MOV X24, X0
	0x0373BF0C CBZ X19, 0x373BF68
	0x0373BF10 LDR X8, [X19]
	0x0373BF14 LDR X1, [X25]
	0x0373BF18 LDRH W9, [X8 + 0x12E]
	0x0373BF1C CBZ X9, 0x373BF40
	0x0373BF20 LDR X10, [X8 + 0xB0]
	0x0373BF24 ADD X10, X10, 0x8
	0x0373BF28 LDUR X11, [X10 - 0x8]
	0x0373BF2C CMP X11, X1
	0x0373BF30 B.EQ 0x373BF50
	0x0373BF34 SUBS X9, X9, 0x1
	0x0373BF38 ADD X10, X10, 0x10
	0x0373BF3C B.NE 0x373BF28
	0x0373BF40 MOV X0, X19
	0x0373BF44 MOV W2, W31
	0x0373BF48 BL 0x1C5C788
	0x0373BF4C B 0x373BF5C
	0x0373BF50 LDRSW X9, [X10]
	0x0373BF54 ADD X8, X8, X9, 0x4, LSL
	0x0373BF58 ADD X0, X8, 0x138
	0x0373BF5C LDP X8, X1, [X0]
	0x0373BF60 MOV X0, X19
	0x0373BF64 BLR X8
	0x0373BF68 CBNZ X20, 0x373BF74
	0x0373BF6C MOV X0, X24
	0x0373BF70 BL 0x1D2C690
	0x0373BF74 MOV X0, X20
	0x0373BF78 BL 0x1C16F18
	0x0373BF7C BL 0x1990590
	0x0373BF80 STP X30, X21, [X31 - 0x20]!
	0x0373BF84 STP X20, X19, [X31 + 0x10]
	0x0373BF88 ADRP X19, 0xCA5000
	0x0373BF8C ADRP X20, 0xA0A000
	0x0373BF90 LDRB W8, [X19 + 0xD48]
	0x0373BF94 LDR X20, [X20 + 0x2F8]
	0x0373BF98 TBNZ X8, 0x0, 0x373BFBC
	0x0373BF9C ADRP X0, 0xA0A000
	0x0373BFA0 LDR X0, [X0 + 0x300]
	0x0373BFA4 BL 0x1C16CF4
	0x0373BFA8 ADRP X0, 0xA0A000
	0x0373BFAC LDR X0, [X0 + 0x2F8]
	0x0373BFB0 BL 0x1C16CF4
	0x0373BFB4 MOVZ W8, 0x1
	0x0373BFB8 STRB W8, [X19 + 0xD48]
	0x0373BFBC LDR X8, [X20]
	0x0373BFC0 LDR X9, [X8 + 0xB8]
	0x0373BFC4 LDR X9, [X9]
	0x0373BFC8 CBNZ X9, 0x373BFF8
	0x0373BFCC ADRP X8, 0xA0A000
	0x0373BFD0 LDR X8, [X8 + 0x300]
	0x0373BFD4 LDR X0, [X8]
	0x0373BFD8 BL 0x1C16F10
	0x0373BFDC MOV X1, X31
	0x0373BFE0 MOV X19, X0
	0x0373BFE4 BL 0x33BDD8C
	0x0373BFE8 LDR X8, [X20]
	0x0373BFEC LDR X8, [X8 + 0xB8]
	0x0373BFF0 STR X19, [X8]
	0x0373BFF4 LDR X8, [X20]
	0x0373BFF8 LDR X9, [X8 + 0xB8]
	0x0373BFFC LDR X9, [X9]
	0x0373C000 CBZ X9, 0x373C058
	0x0373C004 ADRP X21, 0xCA4000
	0x0373C008 ADRP X19, 0xA08000
	0x0373C00C LDRB W9, [X21 + 0xD6A]
	0x0373C010 LDR X19, [X19 + 0xF68]
	0x0373C014 TBNZ X9, 0x0, 0x373C030
	0x0373C018 ADRP X0, 0xA08000
	0x0373C01C LDR X0, [X0 + 0xF68]
	0x0373C020 BL 0x1C16CF4
	0x0373C024 LDR X8, [X20]
	0x0373C028 MOVZ W9, 0x1
	0x0373C02C STRB W9, [X21 + 0xD6A]
	0x0373C030 LDR X9, [X19]
	0x0373C034 LDP X20, X19, [X31 + 0x10]
	0x0373C038 LDR X9, [X9 + 0xB8]
	0x0373C03C LDR W10, [X9]
	0x0373C040 ADD W10, W10, 0x1
	0x0373C044 STR W10, [X9]
	0x0373C048 LDR X8, [X8 + 0xB8]
	0x0373C04C LDR X0, [X8]
	0x0373C050 LDP X30, X21, [X31], #0x20
	0x0373C054 RET
	0x0373C058 BL 0x1C16F20
	0x0373C05C STP X30, X23, [X31 - 0x30]!
	0x0373C060 STP X22, X21, [X31 + 0x10]
	0x0373C064 STP X20, X19, [X31 + 0x20]
	0x0373C068 ADRP X22, 0xCA4000
	0x0373C06C ADRP X21, 0xA08000
	0x0373C070 LDRB W8, [X22 + 0xD1C]
	0x0373C074 LDR X21, [X21 + 0xFD0]
	0x0373C078 MOV X19, X1
	0x0373C07C MOV X20, X0
	0x0373C080 TBNZ X8, 0x0, 0x373C098
	0x0373C084 ADRP X0, 0xA08000
	0x0373C088 LDR X0, [X0 + 0xFD0]
	0x0373C08C BL 0x1C16CF4
	0x0373C090 MOVZ W8, 0x1
	0x0373C094 STRB W8, [X22 + 0xD1C]
	0x0373C098 LDR X20, [X20 + 0x30]
	0x0373C09C LDR X1, [X21]
	0x0373C0A0 MOV X0, X20
	0x0373C0A4 BL 0x217B240
	0x0373C0A8 CMP W0, 0x1
	0x0373C0AC B.LT 0x373C0F4
	0x0373C0B0 CBZ X20, 0x373C110
	0x0373C0B4 MOV X21, X31
	0x0373C0B8 MOV W23, W0
	0x0373C0BC ADD X22, X20, 0x20
	0x0373C0C0 LDR W8, [X20 + 0x18]
	0x0373C0C4 CMP X21, X8
	0x0373C0C8 B.CS 0x373C10C
	0x0373C0CC MOV X0, X19
	0x0373C0D0 MOV X1, X22
	0x0373C0D4 MOV W2, W31
	0x0373C0D8 MOV X3, X31
	0x0373C0DC BL 0x3752E9C
	0x0373C0E0 TBNZ X0, 0x0, 0x373C0F8
	0x0373C0E4 ADD X21, X21, 0x1
	0x0373C0E8 CMP X23, X21
	0x0373C0EC ADD X22, X22, 0x58
	0x0373C0F0 B.NE 0x373C0C0
	0x0373C0F4 MOVN W21, 0x0
	0x0373C0F8 MOV W0, W21
	0x0373C0FC LDP X20, X19, [X31 + 0x20]
	0x0373C100 LDP X22, X21, [X31 + 0x10]
	0x0373C104 LDP X30, X23, [X31], #0x30
	0x0373C108 RET
	0x0373C10C BL 0x1C16F28
	0x0373C110 BL 0x1C16F20
	0x0373C114 SUB X31, X31, 0x30
	0x0373C118 STR X30, [X31 + 0x10]
	0x0373C11C STP X20, X19, [X31 + 0x20]
	0x0373C120 ADRP X20, 0xCA4000
	0x0373C124 LDRB W8, [X20 + 0xD1D]
	0x0373C128 MOV X19, X0
	0x0373C12C TBNZ X8, 0x0, 0x373C144
	0x0373C130 ADRP X0, 0xA09000
	0x0373C134 LDR X0, [X0 + 0x308]
	0x0373C138 BL 0x1C16CF4
	0x0373C13C MOVZ W8, 0x1
	0x0373C140 STRB W8, [X20 + 0xD1D]
	0x0373C144 CBZ X19, 0x373C178
	0x0373C148 ADRP X8, 0xA09000
	0x0373C14C LDR X8, [X8 + 0x308]
	0x0373C150 MOV X0, X19
	0x0373C154 LDR X1, [X8]
	0x0373C158 BL 0x2211860
	0x0373C15C STP X0, X1, [X31]
	0x0373C160 ADD X0, X31, 0x0
	0x0373C164 BL 0x3738BEC
	0x0373C168 LDP X20, X19, [X31 + 0x20]
	0x0373C16C LDR X30, [X31 + 0x10]
	0x0373C170 ADD X31, X31, 0x30
	0x0373C174 RET
	0x0373C178 ADRP X0, 0x9BC000
	0x0373C17C LDR X0, [X0 + 0x528]
	0x0373C180 BL 0x1C16D08
	0x0373C184 BL 0x1C16F10
	0x0373C188 MOV X19, X0
	0x0373C18C ADRP X0, 0xA09000
	0x0373C190 LDR X0, [X0 + 0xD8]
	0x0373C194 BL 0x1C16D08
	0x0373C198 MOV X1, X0
	0x0373C19C MOV X0, X19
	0x0373C1A0 MOV X2, X31
	0x0373C1A4 BL 0x330E100
	0x0373C1A8 ADRP X0, 0xA09000
	0x0373C1AC LDR X0, [X0 + 0x310]
	0x0373C1B0 BL 0x1C16D08
	0x0373C1B4 MOV X1, X0
	0x0373C1B8 MOV X0, X19
	0x0373C1BC BL 0x1C16DEC
	0x0373C1C0 STR X30, [X31 - 0x20]!
	0x0373C1C4 STP X20, X19, [X31 + 0x10]
	0x0373C1C8 ADRP X20, 0xCA4000
	0x0373C1CC LDRB W8, [X20 + 0xD1E]
	0x0373C1D0 MOV X19, X0
	0x0373C1D4 TBNZ X8, 0x0, 0x373C1EC
	0x0373C1D8 ADRP X0, 0xA09000
	0x0373C1DC LDR X0, [X0 + 0x318]
	0x0373C1E0 BL 0x1C16CF4
	0x0373C1E4 MOVZ W8, 0x1
	0x0373C1E8 STRB W8, [X20 + 0xD1E]
	0x0373C1EC CBZ X19, 0x373C22C
	0x0373C1F0 ADRP X20, 0xA09000
	0x0373C1F4 LDR X20, [X20 + 0x318]
	0x0373C1F8 MOV X0, X19
	0x0373C1FC BL 0x3737110
	0x0373C200 LDR X8, [X20]
	0x0373C204 STR X0, [X31 + 0x8]
	0x0373C208 ADD X1, X31, 0x8
	0x0373C20C MOV X0, X8
	0x0373C210 BL 0x1C16E04
	0x0373C214 MOVZ W1, 0x1
	0x0373C218 MOV X2, X31
	0x0373C21C BL 0x3C86C28
	0x0373C220 LDP X20, X19, [X31 + 0x10]
	0x0373C224 LDR X30, [X31], #0x20
	0x0373C228 RET
	0x0373C22C ADRP X0, 0x9BC000
	0x0373C230 LDR X0, [X0 + 0x528]
	0x0373C234 BL 0x1C16D08
	0x0373C238 BL 0x1C16F10
	0x0373C23C MOV X19, X0
	0x0373C240 ADRP X0, 0xA09000
	0x0373C244 LDR X0, [X0 + 0x320]
	0x0373C248 BL 0x1C16D08
	0x0373C24C MOV X1, X0
	0x0373C250 MOV X0, X19
	0x0373C254 MOV X2, X31
	0x0373C258 BL 0x330E100
	0x0373C25C ADRP X0, 0xA09000
	0x0373C260 LDR X0, [X0 + 0x328]
	0x0373C264 BL 0x1C16D08
	0x0373C268 MOV X1, X0
	0x0373C26C MOV X0, X19
	0x0373C270 BL 0x1C16DEC
	0x0373C274 SUB X31, X31, 0x30
	0x0373C278 STP X30, X21, [X31 + 0x10]
	0x0373C27C STP X20, X19, [X31 + 0x20]
	0x0373C280 ADRP X21, 0xCA4000
	0x0373C284 ADRP X20, 0xA09000
	0x0373C288 LDRB W8, [X21 + 0xD1F]
	0x0373C28C LDR X20, [X20 + 0x318]
	0x0373C290 MOV X19, X0
	0x0373C294 TBNZ X8, 0x0, 0x373C2AC
	0x0373C298 ADRP X0, 0xA09000
	0x0373C29C LDR X0, [X0 + 0x318]
	0x0373C2A0 BL 0x1C16CF4
	0x0373C2A4 MOVZ W8, 0x1
	0x0373C2A8 STRB W8, [X21 + 0xD1F]
	0x0373C2AC MOV X0, X19
	0x0373C2B0 BL 0x373C2E4
	0x0373C2B4 LDR X8, [X20]
	0x0373C2B8 STR X0, [X31 + 0x8]
	0x0373C2BC ADD X1, X31, 0x8
	0x0373C2C0 MOV X0, X8
	0x0373C2C4 BL 0x1C16E04
	0x0373C2C8 MOVZ W1, 0x1
	0x0373C2CC MOV X2, X31
	0x0373C2D0 BL 0x3C86C28
	0x0373C2D4 LDP X20, X19, [X31 + 0x20]
	0x0373C2D8 LDP X30, X21, [X31 + 0x10]
	0x0373C2DC ADD X31, X31, 0x30
	0x0373C2E0 RET
	0x0373C2E4 SUB X31, X31, 0x60
	0x0373C2E8 STP X30, X21, [X31 + 0x40]
	0x0373C2EC STP X20, X19, [X31 + 0x50]
	0x0373C2F0 ADRP X20, 0xCA4000
	0x0373C2F4 ADRP X21, 0xA09000
	0x0373C2F8 LDRB W8, [X20 + 0xD2D]
	0x0373C2FC LDR X21, [X21 + 0xC8]
	0x0373C300 MOV X19, X0
	0x0373C304 TBNZ X8, 0x0, 0x373C31C
	0x0373C308 ADRP X0, 0xA09000
	0x0373C30C LDR X0, [X0 + 0xC8]
	0x0373C310 BL 0x1C16CF4
	0x0373C314 MOVZ W8, 0x1
	0x0373C318 STRB W8, [X20 + 0xD2D]
	0x0373C31C LDR X0, [X21]
	0x0373C320 MOVZ W1, 0x1
	0x0373C324 BL 0x1C16D6C
	0x0373C328 MOV X20, X0
	0x0373C32C ADD X8, X31, 0x20
	0x0373C330 MOV X0, X19
	0x0373C334 BL 0x373CB24
	0x0373C338 CBZ X20, 0x373C368
	0x0373C33C LDP V0, V1, [X31 + 0x20]
	0x0373C340 STP V0, V1, [X31]
	0x0373C344 LDR W8, [X20 + 0x18]
	0x0373C348 CBZ W8, 0x373C36C
	0x0373C34C LDP V1, V0, [X31]
	0x0373C350 MOV X0, X20
	0x0373C354 LDP X30, X21, [X31 + 0x40]
	0x0373C358 STP V1, V0, [X20 + 0x20]
	0x0373C35C LDP X20, X19, [X31 + 0x50]
	0x0373C360 ADD X31, X31, 0x60
	0x0373C364 RET

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+176], X29
	003 Move [X31+184], X30
	004 Move [X31+192], X28
	005 Move [X31+200], X27
	006 Move [X31+208], X26
	007 Move [X31+216], X25
	008 Move [X31+224], X24
	009 Move [X31+232], X23
	010 Move [X31+240], X22
	011 Move [X31+248], X21
	012 Move [X31+256], X20
	013 Move [X31+264], X19
	014 Move X20, 0xCA6000
	015 Move W8, [X20+3350]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0xA0B000
	022 Move X0, [X0+696]
	023 Call 0x1C17CF4
	024 Move X0, 0xA0B000
	025 Move X0, [X0+704]
	026 Call 0x1C17CF4
	027 Move X0, 0xA0B000
	028 Move X0, [X0+712]
	029 Call 0x1C17CF4
	030 Move X0, 0xA0A000
	031 Move X0, [X0+3992]
	032 Call 0x1C17CF4
	033 Move X0, 0xA0B000
	034 Move X0, [X0+720]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3350], W8
	038 Move X8, [X19+48]
	039 Compare X8, 0
	040 JumpIfEqual {49}
	041 Move X20, [X19+80]
	042 Compare X20, 0
	043 JumpIfEqual {51}
	044 Move X0, [X19+96]
	045 Move [X19+56], X8
	046 Compare X0, 0
	047 JumpIfEqual {61}
	048 Move X9, [X0+24]
	049 Move [X19+56], X31
	050 Move [X19+64], X31
	051 Move X0, [X19+96]
	052 Compare X0, 0
	053 JumpIfEqual {147}
	054 Add X8, X31, 128
	055 Move X1, X19
	056 Move X2, X31
	057 Call InputActionState.FetchMapIndices, X0, X1
	058 Move W20, [X31+140]
	059 Move W8, [X31+144]
	060 Move [X31+20], W8
	061 Move X9, X31
	062 Move [X19+64], X9
	063 Move [X20+176], W31
	064 Move X8, [X8+24]
	065 Move [X20+180], W8
	066 Move [X20+184], W31
	067 Compare X0, 0
	068 JumpIfEqual {76}
	069 Move X1, X31
	070 Call InputActionState.get_totalControlCount, X0
	071 Move X8, [X19+80]
	072 Move [X20+188], W0
	073 Move X20, X8
	074 Compare X8, 0
	075 JumpIfNotEqual {77}
	076 Move [X20+188], W31
	077 Move X8, 0xA0B000
	078 Move X0, [X19+64]
	079 Move W2, [X20+188]
	080 Move X8, [X8+712]
	081 Move W1, W31
	082 Move X3, [X8]
	083 Call 0x217A014, X0, X1, X2
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {399}
	088 Move X8, [X19+80]
	089 Compare X8, 0
	090 JumpIfEqual {394}
	091 Move W1, [X8+188]
	092 Move X8, 0xA0B000
	093 Move X8, [X8+720]
	094 Move X0, [X8]
	095 Call 0x1C17D6C
	096 Move X8, [X19+80]
	097 Compare X8, 0
	098 JumpIfEqual {394}
	099 Move X24, 0xA0B000
	100 Move X24, [X24+704]
	101 Move X20, X0
	102 Move W22, W31
	103 Move W23, 4
	104 NotImplemented "Instruction LDRSW not yet implemented."
	105 Subtract X21, X23, 4
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X8, [X19+64]
	108 Compare X8, 0
	109 JumpIfEqual {394}
	110 Move W9, [X8+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X1, [X8]
	113 Move X2, [X24]
	114 Move X0, X20
	115 Call 0x2177094, X0, X1
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {141}
	120 Move X8, [X19+64]
	121 Compare X8, 0
	122 JumpIfEqual {394}
	123 Move W9, [X8+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Compare X20, 0
	126 JumpIfEqual {394}
	127 Move X21, [X8]
	128 Compare X21, 0
	129 JumpIfEqual {136}
	130 Move X8, [X20]
	131 Move X0, X21
	132 Move X1, [X8+64]
	133 Call 0x1C17E00
	134 Compare X0, 0
	135 JumpIfEqual {417}
	136 Move W8, [X20+24]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Add X8, X20, W22
	139 Add W22, W22, 1
	140 Move [X8+32], X21
	141 Move X8, [X19+80]
	142 Add X23, X23, 1
	143 Compare X8, 0
	144 JumpIfNotEqual {104}
	145 Move [X19+64], X20
	146 Move [X8+188], W22
	147 Move [X31+20], W31
	148 Move W20, W31
	149 Move X8, [X19+40]
	150 Compare X8, 0
	151 JumpIfEqual {394}
	152 Move W9, [X8+24]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move W10, W31
	155 NotImplemented "Instruction MOVI not yet implemented."
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Add X11, X8, W10
	158 Move X11, [X11+32]
	159 Compare X11, 0
	160 JumpIfEqual {394}
	161 Add W10, W10, 1
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move [X11+11], V0
	164 Move X8, [X19+48]
	165 Compare X8, 0
	166 JumpIfEqual {394}
	167 Move X9, [X8+24]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X21, X31
	170 And X22, X9, 0
	171 Move W23, 80
	172 Move W9, [X8+24]
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move X1, [X8]
	175 Move X0, X19
	176 Move W2, W31
	177 Call InputActionMap.FindAction, X0, X1, X2
	178 Compare X0, 0
	179 JumpIfEqual {183}
	180 Move W8, [X0+180]
	181 Add W8, W8, 1
	182 Move [X0+180], W8
	183 Add X21, X21, 1
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X8, [X19+48]
	186 Add X23, X23, 88
	187 Compare X8, 0
	188 JumpIfNotEqual {172}
	189 Move X8, [X19+96]
	190 Compare X8, 0
	191 JumpIfEqual {206}
	192 Move X8, [X19+64]
	193 Compare X8, 0
	194 JumpIfEqual {197}
	195 Move W8, [X8+24]
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Compare W20, 0
	198 JumpIfEqual {205}
	199 Move X8, 0xA0A000
	200 Move X8, [X8+720]
	201 Move W1, W20
	202 Move X0, [X8]
	203 Call 0x1C17D6C
	204 Move [X19+64], X0
	205 Move [X19+64], X31
	206 Move X8, [X19+48]
	207 Compare X8, 0
	208 JumpIfEqual {394}
	209 Move [X31+28], W31
	210 Move X23, X31
	211 Move W25, W31
	212 Move W26, W31
	213 Move W27, 88
	214 NotImplemented "Instruction SMADDL not yet implemented."
	215 Add X22, X9, 80
	216 Move X26, W26
	217 Move X9, [X8+24]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move X1, [X8]
	221 Move X0, X19
	222 Move W2, W31
	223 Call InputActionMap.FindAction, X0, X1, X2
	224 Compare X0, 0
	225 JumpIfEqual {229}
	226 Move W8, [X0+176]
	227 Move X21, X0
	228 Add W31, W8, 1
	229 Move X8, [X19+48]
	230 Add X26, X26, 1
	231 Add X22, X22, 88
	232 Compare X8, 0
	233 JumpIfNotEqual {217}
	234 Move W9, [X21+180]
	235 Move W8, [X31+28]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move [X21+184], W25
	238 Move [X31+24], W9
	239 NotImplemented "Instruction CSEL not yet implemented."
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Move [X21+176], W8
	242 Move W24, W31
	243 Move W22, W26
	244 Move X8, [X19+48]
	245 Compare X8, 0
	246 JumpIfEqual {394}
	247 Move W9, [X8+24]
	248 NotImplemented "Instruction CMP not yet implemented."
	249 NotImplemented "Instruction SMADDL not yet implemented."
	250 Move X1, [X8+80]
	251 Move X0, X19
	252 Move W2, W31
	253 Call InputActionMap.FindAction, X0, X1, X2
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Compare X23, 0
	256 JumpIfNotEqual {275}
	257 Move X8, [X19+48]
	258 Compare X8, 0
	259 JumpIfEqual {394}
	260 Move X9, 0xA09000
	261 Move X9, [X9+3992]
	262 Move W1, [X8+24]
	263 Move X0, [X9]
	264 Call 0x1C17D6C
	265 Move X8, [X19+48]
	266 Move X23, X0
	267 Move W1, W31
	268 Move X2, X23
	269 Move X0, X8
	270 Move W3, W31
	271 Move W4, W22
	272 Move X5, X31
	273 Call Array.Copy, X0, X1, X2, X3, X4
	274 Move [X31+28], W22
	275 Move X8, [X19+48]
	276 Compare X8, 0
	277 JumpIfEqual {394}
	278 Move W9, [X8+24]
	279 Add W22, W22, 1
	280 NotImplemented "Instruction CMP not yet implemented."
	281 NotImplemented "Instruction SMADDL not yet implemented."
	282 Move X1, [X8+80]
	283 Move X0, X19
	284 Move W2, W31
	285 Call InputActionMap.FindAction, X0, X1, X2
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Compare X23, 0
	288 JumpIfNotEqual {293}
	289 NotImplemented "Instruction CMP not yet implemented."
	290 NotImplemented "Instruction CINC not yet implemented."
	291 Compare X23, 0
	292 JumpIfEqual {313}
	293 Move X8, [X19+48]
	294 Compare X8, 0
	295 JumpIfEqual {394}
	296 Move W9, [X8+24]
	297 NotImplemented "Instruction CMP not yet implemented."
	298 NotImplemented "Instruction SMADDL not yet implemented."
	299 Add X1, X8, 32
	300 Add X0, X31, 40
	301 Move W2, 88
	302 Call 0x3EB2AC0
	303 Move W8, [X23+24]
	304 Move W9, [X31+28]
	305 NotImplemented "Instruction CMP not yet implemented."
	306 NotImplemented "Instruction SMADDL not yet implemented."
	307 Add X0, X8, 32
	308 Add X1, X31, 40
	309 Move W2, 88
	310 Add W20, W9, 1
	311 Call 0x3EB2AC0
	312 Move [X31+28], W20
	313 Move X8, [X19+96]
	314 Move [X31+32], X23
	315 Compare X8, 0
	316 JumpIfEqual {386}
	317 Move X8, [X19+48]
	318 Compare X8, 0
	319 JumpIfEqual {394}
	320 Move W9, [X8+24]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 NotImplemented "Instruction SMADDL not yet implemented."
	323 Add X0, X8, 32
	324 Move X1, X31
	325 Call InputBinding.get_isComposite, X0
	326 Move TEMP, X0
	327 And TEMP, TEMP, 1
	328 Compare TEMP, 1
	329 JumpIfEqual {386}
	330 Move X0, [X19+96]
	331 Compare X0, 0
	332 JumpIfEqual {394}
	333 Move X1, X31
	334 Call InputActionState.get_bindingStates, X0
	335 Move W8, [X31+20]
	336 Add W8, W22, W8
	337 Move X8, W8
	338 Add X8, X0, X8
	339 Move W29, [X8]
	340 Compare X29, 0
	341 JumpIfEqual {386}
	342 NotImplemented "Instruction LDRH not yet implemented."
	343 Move X8, [X19+96]
	344 Compare X8, 0
	345 JumpIfEqual {394}
	346 Move X8, [X8+24]
	347 Compare X8, 0
	348 JumpIfEqual {394}
	349 Move W9, [X8+24]
	350 NotImplemented "Instruction CMP not yet implemented."
	351 Add X8, X8, X28
	352 Move X23, [X8+32]
	353 Move X8, 0xA0A000
	354 Move X0, [X19+64]
	355 Move W1, [X21+184]
	356 Move W2, [X21+188]
	357 Move X8, [X8+696]
	358 Move X3, X23
	359 Move X4, [X8]
	360 Call 0x21771AC, X0, X1, X2, X3
	361 Move TEMP, X0
	362 And TEMP, TEMP, 1
	363 Compare TEMP, 1
	364 JumpIfEqual {384}
	365 Move X20, [X19+64]
	366 Compare X20, 0
	367 JumpIfEqual {394}
	368 Compare X23, 0
	369 JumpIfEqual {376}
	370 Move X8, [X20]
	371 Move X0, X23
	372 Move X1, [X8+64]
	373 Call 0x1C17E00
	374 Compare X0, 0
	375 JumpIfEqual {417}
	376 Move W8, [X20+24]
	377 NotImplemented "Instruction CMP not yet implemented."
	378 Add X8, X20, W25
	379 Move [X8+32], X23
	380 Move W8, [X21+188]
	381 Add W25, W25, 1
	382 Add W8, W8, 1
	383 Move [X21+188], W8
	384 Subtract X29, X29, 1
	385 Add X28, X28, 1
	386 Move W8, [X31+24]
	387 Move X23, [X31+32]
	388 Add W24, W24, 1
	389 Add W22, W22, 1
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move X8, [X19+48]
	392 Compare X8, 0
	393 JumpIfNotEqual {214}
	394 Call 0x1C17F20
	395 Compare X23, 0
	396 JumpIfEqual {398}
	397 Move [X19+56], X23
	398 Move [X19+56], X8
	399 Move W8, [X19+200]
	400 Move X22, [X31+240]
	401 Move X21, [X31+248]
	402 Move X24, [X31+224]
	403 Move X23, [X31+232]
	404 Move X26, [X31+208]
	405 Move X25, [X31+216]
	406 Or W8, W8, 12
	407 Move [X19+200], W8
	408 Move X20, [X31+256]
	409 Move X19, [X31+264]
	410 Move X28, [X31+192]
	411 Move X27, [X31+200]
	412 Move X29, [X31+176]
	413 Move X30, [X31+184]
	414 Add X31, X31, 272
	415 Return 
	416 Call 0x1C17F28
	417 Call 0x1C17F44
	418 Move X1, X31
	419 Call 0x1C17DEC

Method: System.Void OnWantToChangeSetup()

Disassembly:
	0x03739648 LDR X9, [X9 + 0x1B8]
	0x0373964C ADD W10, W10, 0x1
	0x03739650 LDR X9, [X9]
	0x03739654 STR W10, [X0 + 0x1C]
	0x03739658 CBZ X8, 0x3739968
	0x0373965C LDRSW X10, [X0 + 0x18]
	0x03739660 LDR W11, [X8 + 0x18]
	0x03739664 CMP W10, W11
	0x03739668 B.CS 0x3739680
	0x0373966C ADD W9, W10, 0x1
	0x03739670 ADD X8, X8, X10, 0x3, LSL
	0x03739674 STR W9, [X0 + 0x18]
	0x03739678 STR X25, [X8 + 0x20]
	0x0373967C B 0x3739694
	0x03739680 LDR X8, [X9 + 0x20]
	0x03739684 MOV X1, X25
	0x03739688 LDR X8, [X8 + 0xC0]
	0x0373968C LDR X2, [X8 + 0x70]
	0x03739690 BL 0x301BF90
	0x03739694 LDR X19, [X31 + 0x250]
	0x03739698 CBZ X19, 0x37397F0
	0x0373969C LDR X0, [X31 + 0x40]
	0x037396A0 CBZ X0, 0x3739968
	0x037396A4 ADRP X8, 0xA0C000
	0x037396A8 LDR X8, [X8 + 0x208]
	0x037396AC MOV W1, W24
	0x037396B0 LDR X2, [X8]
	0x037396B4 BL 0x301BCCC
	0x037396B8 LDR X8, [X19 + 0x18]
	0x037396BC CMP W8, 0x1
	0x037396C0 B.LT 0x37397F0
	0x037396C4 MOV X26, X0
	0x037396C8 MOV X20, X31
	0x037396CC AND X8, X8, 0x0
	0x037396D0 ADD X21, X19, 0x20
	0x037396D4 CMP X20, W8, UXTW
	0x037396D8 B.CS 0x3739A84
	0x037396DC LDP V1, V0, [X21 + 0x20]
	0x037396E0 LDP V3, V2, [X21]
	0x037396E4 ADD X8, X31, 0x3C0
	0x037396E8 ADD X0, X31, 0x1D0
	0x037396EC STP V1, V0, [X31 + 0x1F0]
	0x037396F0 STP V3, V2, [X31 + 0x1D0]
	0x037396F4 BL 0x373C680
	0x037396F8 LDP V0, V1, [X31 + 0x3C0]
	0x037396FC LDR V2, [X31 + 0x3E]
	0x03739700 LDP V4, V3, [X27]
	0x03739704 STP V0, V1, [X31 + 0x1A0]
	0x03739708 STR V2, [X31 + 0x1C]
	0x0373970C STP V4, V3, [X31 + 0x180]
	0x03739710 CBZ X25, 0x3739968
	0x03739714 LDR X8, [X25 + 0x10]
	0x03739718 LDP V0, V1, [X31 + 0x1A0]
	0x0373971C LDR V2, [X31 + 0x1C]
	0x03739720 LDP V3, V4, [X31 + 0x180]
	0x03739724 STP V0, V1, [X31 + 0x60]
	0x03739728 STR V2, [X31 + 0x8]
	0x0373972C STP V3, V4, [X31 + 0xC0]
	0x03739730 CBZ X26, 0x3739968
	0x03739734 LDP V0, V1, [X31 + 0x60]
	0x03739738 LDR V2, [X31 + 0x8]
	0x0373973C LDP V3, V4, [X31 + 0xC0]
	0x03739740 LDR X11, [X28]
	0x03739744 STP V0, V1, [X31 + 0x360]
	0x03739748 STR V2, [X31 + 0x38]
	0x0373974C STP V3, V4, [X31 + 0x340]
	0x03739750 LDR W10, [X26 + 0x1C]
	0x03739754 LDR X9, [X26 + 0x10]
	0x03739758 ADD W10, W10, 0x1
	0x0373975C STR W10, [X26 + 0x1C]
	0x03739760 CBZ X9, 0x3739968
	0x03739764 LDRSW X10, [X26 + 0x18]
	0x03739768 LDR W12, [X9 + 0x18]
	0x0373976C CMP W10, W12
	0x03739770 B.CS 0x37397A8
	0x03739774 ADD W11, W10, 0x1
	0x03739778 STR W11, [X26 + 0x18]
	0x0373977C LDP V2, V0, [X31 + 0x370]
	0x03739780 LDR V1, [X31 + 0x36]
	0x03739784 NOP
	0x03739788 MADD X9, X10, X29, X9
	0x0373978C STR X8, [X9 + 0x50]
	0x03739790 STP V2, V0, [X9 + 0x30]
	0x03739794 STR V1, [X9 + 0x2]
	0x03739798 LDP V1, V0, [X31 + 0x340]
	0x0373979C STUR V0, [X9 + 0x68]
	0x037397A0 STUR V1, [X9 + 0x58]
	0x037397A4 B 0x37397DC
	0x037397A8 LDR X9, [X11 + 0x20]
	0x037397AC LDP V0, V1, [X31 + 0x360]
	0x037397B0 LDR V2, [X31 + 0x38]
	0x037397B4 LDP V3, V4, [X31 + 0x340]
	0x037397B8 LDR X9, [X9 + 0xC0]
	0x037397BC ADD X1, X31, 0x3C0
	0x037397C0 MOV X0, X26
	0x037397C4 LDR X2, [X9 + 0x70]
	0x037397C8 STP V0, V1, [X31 + 0x3C0]
	0x037397CC STR V2, [X31 + 0x3E]
	0x037397D0 STR X8, [X31 + 0x3F0]
	0x037397D4 STP V3, V4, [X27]
	0x037397D8 BL 0x2FCE0B8
	0x037397DC LDR W8, [X19 + 0x18]
	0x037397E0 ADD X20, X20, 0x1
	0x037397E4 ADD X21, X21, 0x40
	0x037397E8 CMP X20, W8, SXTW
	0x037397EC B.LT 0x37396D4
	0x037397F0 LDR X8, [X31 + 0x38]
	0x037397F4 LDR X26, [X31 + 0x50]
	0x037397F8 ADD X23, X23, 0x1
	0x037397FC CMP X23, X8
	0x03739800 B.NE 0x37395D8
	0x03739804 LDR X9, [X31 + 0x48]
	0x03739808 LDR X8, [X31 + 0x18]
	0x0373980C CMP X9, 0x0
	0x03739810 CSEL X8, X8, X9, EQ
	0x03739814 STR X8, [X31 + 0x18]
	0x03739818 CBZ X9, 0x3739930
	0x0373981C LDR X0, [X31 + 0x40]
	0x03739820 CBZ X8, 0x3739968
	0x03739824 CBZ X0, 0x3739968
	0x03739828 LDR W19, [X8 + 0x18]
	0x0373982C ADRP X8, 0xA0C000
	0x03739830 LDR X8, [X8 + 0x208]
	0x03739834 MOV W1, W24
	0x03739838 LDR X2, [X8]
	0x0373983C BL 0x301BCCC
	0x03739840 CMP W19, 0x1
	0x03739844 B.LT 0x373994C
	0x03739848 LDR X8, [X31 + 0x48]
	0x0373984C MOV X23, X0
	0x03739850 MOV X20, X31
	0x03739854 ADD X21, X8, 0x20
	0x03739858 LDR X8, [X31 + 0x48]
	0x0373985C LDR W8, [X8 + 0x18]
	0x03739860 CMP X20, X8
	0x03739864 B.CS 0x3739A84
	0x03739868 LDP V1, V0, [X21 + 0x20]
	0x0373986C LDP V3, V2, [X21]
	0x03739870 ADD X8, X31, 0xE0
	0x03739874 ADD X0, X31, 0x140
	0x03739878 STP V1, V0, [X31 + 0x160]
	0x0373987C STP V3, V2, [X31 + 0x140]
	0x03739880 BL 0x373C680
	0x03739884 ADD X0, X31, 0x60
	0x03739888 ADD X1, X31, 0xE0
	0x0373988C MOVZ W2, 0x58
	0x03739890 BL 0x3EB1AC0
	0x03739894 CBZ X23, 0x3739968
	0x03739898 LDR X22, [X28]
	0x0373989C ADD X0, X31, 0x360
	0x037398A0 ADD X1, X31, 0x60
	0x037398A4 MOVZ W2, 0x58
	0x037398A8 BL 0x3EB1AC0
	0x037398AC LDR W9, [X23 + 0x1C]
	0x037398B0 LDR X8, [X23 + 0x10]
	0x037398B4 ADD W9, W9, 0x1
	0x037398B8 STR W9, [X23 + 0x1C]
	0x037398BC CBZ X8, 0x3739968
	0x037398C0 LDRSW X9, [X23 + 0x18]
	0x037398C4 LDR W10, [X8 + 0x18]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+88], X21
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move X21, 0xCA8000
	007 Move X20, 0x9BB000
	008 Move W8, [X21+3351]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xA0D000
	016 Move X0, [X0+24]
	017 Call 0x1C17CF4
	018 Move X0, 0xA0D000
	019 Move X0, [X0+32]
	020 Call 0x1C17CF4
	021 Move X0, 0xA0D000
	022 Move X0, [X0+40]
	023 Call 0x1C17CF4
	024 Move X0, 0x9BB000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0xA0D000
	028 Move X0, [X0+16]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+3351], W8
	032 Move X0, [X20]
	033 Move [X31+48], X31
	034 Move [X31+56], X31
	035 Move [X31+64], X31
	036 Move [X31+32], X31
	037 Move [X31+40], X31
	038 Move W8, [X0+224]
	039 Move X20, [X19+32]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {128}
	051 Move X0, [X19+32]
	052 Compare X0, 0
	053 JumpIfEqual {114}
	054 Call InputActionAsset.get_actionMaps, X0
	055 Move X8, 0xA0D000
	056 Move X8, [X8+16]
	057 Move [X31+32], X0
	058 Move [X31+40], X1
	059 Add X0, X31, 32
	060 Move X9, [X8]
	061 Add X8, X31, 8
	062 Move X1, X9
	063 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 Move X8, [X31+24]
	066 Move X20, 0xA0D000
	067 Move X20, [X20+32]
	068 Move [X31+3], V0
	069 Move [X31+64], X8
	070 Move X21, 0xA0D000
	071 Move X21, [X21+40]
	072 Move X1, [X20]
	073 Add X0, X31, 48
	074 Call Enumerator<Object>.MoveNext, X0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {108}
	079 Move X1, [X21]
	080 Add X0, X31, 48
	081 Call Enumerator<Object>.get_Current, X0
	082 Compare X0, 0
	083 JumpIfEqual {113}
	084 Move W8, [X0+72]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X20, [X19+32]
	087 Move X0, 0xA0D000
	088 Move X0, [X0+344]
	089 Call 0x1C17D08
	090 Move X1, X20
	091 Move X2, X31
	092 Call String.Format, X0, X1
	093 Move X20, X0
	094 Move X0, 0x9BB000
	095 Move X0, [X0+1456]
	096 Call 0x1C17D08
	097 Call 0x1C17F10
	098 Move X21, X0
	099 Move X1, X20
	100 Move X2, X31
	101 Call InvalidOperationException..ctor, X0, X1
	102 Move X0, 0xA0D000
	103 Move X0, [X0+352]
	104 Call 0x1C17D08
	105 Move X1, X0
	106 Move X0, X21
	107 Call 0x1C17DEC
	108 Move X8, 0xA0D000
	109 Move X8, [X8+24]
	110 Add X0, X31, 48
	111 Move X1, [X8]
	112 Call Enumerator<Object>.Dispose, X0
	113 Call 0x1C17F20
	114 Call 0x1C17F20
	115 Move X20, X0
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X0, X20
	118 Call 0x3EB2AD0
	119 Move X21, [X0]
	120 Call 0x3EB2AE0
	121 Move X8, 0xA0D000
	122 Move X8, [X8+24]
	123 Add X0, X31, 48
	124 Move X1, [X8]
	125 Call Enumerator<Object>.Dispose, X0
	126 Compare X21, 0
	127 JumpIfNotEqual {158}
	128 Move W8, [X19+72]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X20, [X31+96]
	131 Move X19, [X31+104]
	132 Move X30, [X31+80]
	133 Move X21, [X31+88]
	134 Add X31, X31, 112
	135 Return 
	136 Move X0, 0xA0D000
	137 Move X0, [X0+360]
	138 Call 0x1C17D08
	139 Move X1, X19
	140 Move X2, X31
	141 Call String.Format, X0, X1
	142 Move X19, X0
	143 Move X0, 0x9BB000
	144 Move X0, [X0+1456]
	145 Call 0x1C17D08
	146 Call 0x1C17F10
	147 Move X1, X19
	148 Move X2, X31
	149 Move X20, X0
	150 Call InvalidOperationException..ctor, X0, X1
	151 Move X0, 0xA0D000
	152 Move X0, [X0+352]
	153 Call 0x1C17D08
	154 Move X1, X0
	155 Move X0, X20
	156 Call 0x1C17DEC
	157 Move X21, X31
	158 Move X0, X21
	159 Call 0x1C17F18
	160 Move X20, X0
	161 Move X8, 0xA0D000
	162 Move X8, [X8+24]
	163 Move X1, [X8]
	164 Add X0, X31, 48
	165 Call Enumerator<Object>.Dispose, X0
	166 Compare X21, 0
	167 JumpIfNotEqual {170}
	168 Move X0, X20
	169 Call 0x1D2D690
	170 Move X0, X21
	171 Call 0x1C17F18
	172 Call 0x1991590

Method: System.Void OnSetupChanged()

Disassembly:
	0x0373994C LDP X8, X21, [X31 + 0x8]
	0x03739950 ADD X21, X21, 0x1
	0x03739954 CMP X21, X8
	0x03739958 B.EQ 0x373996C
	0x0373995C LDP X8, X23, [X31 + 0x20]
	0x03739960 LDR X8, [X8 + 0x8]
	0x03739964 CBNZ X8, 0x3739348
	0x03739968 BL 0x1C16F20
	0x0373996C CBZ X26, 0x3739968
	0x03739970 LDR W8, [X26 + 0x18]
	0x03739974 CMP W8, 0x1
	0x03739978 B.LT 0x3739A50
	0x0373997C ADRP X20, 0xA0C000
	0x03739980 ADRP X21, 0xA0C000
	0x03739984 LDR X20, [X20 + 0x1C8]
	0x03739988 LDR X21, [X21 + 0x1D8]
	0x0373998C MOV W19, W31
	0x03739990 ADRP X8, 0xA0C000
	0x03739994 LDR X8, [X8 + 0x200]
	0x03739998 MOV X0, X26
	0x0373999C MOV W1, W19
	0x037399A0 LDR X2, [X8]
	0x037399A4 BL 0x301BCCC
	0x037399A8 MOV X23, X0
	0x037399AC LDR X0, [X31 + 0x58]
	0x037399B0 CBZ X0, 0x3739968
	0x037399B4 ADRP X8, 0xA0C000
	0x037399B8 LDR X8, [X8 + 0x1F8]
	0x037399BC MOV W1, W19
	0x037399C0 LDR X2, [X8]
	0x037399C4 BL 0x301BCCC
	0x037399C8 CBZ X0, 0x3739968
	0x037399CC LDR X1, [X20]
	0x037399D0 BL 0x301DDC4
	0x037399D4 MOV X24, X0
	0x037399D8 LDR X0, [X31 + 0x40]
	0x037399DC CBZ X0, 0x3739968
	0x037399E0 ADRP X8, 0xA0C000
	0x037399E4 LDR X8, [X8 + 0x208]
	0x037399E8 MOV W1, W19
	0x037399EC LDR X2, [X8]
	0x037399F0 BL 0x301BCCC
	0x037399F4 CBZ X0, 0x3739968
	0x037399F8 LDR X1, [X21]
	0x037399FC BL 0x2FD062C
	0x03739A00 CBZ X23, 0x3739968
	0x03739A04 STP X24, X0, [X23 + 0x28]
	0x03739A08 CBZ X24, 0x3739968
	0x03739A0C LDR W8, [X24 + 0x18]
	0x03739A10 CMP W8, 0x1
	0x03739A14 B.LT 0x3739A40
	0x03739A18 MOV W9, W31
	0x03739A1C CMP W8, W9
	0x03739A20 B.EQ 0x3739A84
	0x03739A24 ADD X10, X24, W9, 0x3, SXTW
	0x03739A28 LDR X10, [X10 + 0x20]
	0x03739A2C CBZ X10, 0x3739968
	0x03739A30 ADD W9, W9, 0x1
	0x03739A34 CMP W8, W9
	0x03739A38 STR X23, [X10 + 0xC8]
	0x03739A3C B.NE 0x3739A1C
	0x03739A40 LDR W8, [X26 + 0x18]
	0x03739A44 ADD W19, W19, 0x1
	0x03739A48 CMP W19, W8
	0x03739A4C B.LT 0x3739990
	0x03739A50 ADRP X8, 0xA0C000
	0x03739A54 LDR X8, [X8 + 0x1D0]
	0x03739A58 MOV X0, X26
	0x03739A5C LDR X1, [X8]
	0x03739A60 BL 0x301DDC4
	0x03739A64 ADD X31, X31, 0x420
	0x03739A68 LDP X20, X19, [X31 + 0x50]
	0x03739A6C LDP X22, X21, [X31 + 0x40]
	0x03739A70 LDP X24, X23, [X31 + 0x30]
	0x03739A74 LDP X26, X25, [X31 + 0x20]
	0x03739A78 LDP X28, X27, [X31 + 0x10]
	0x03739A7C LDP X29, X30, [X31], #0x60
	0x03739A80 RET
	0x03739A84 BL 0x1C16F28
	0x03739A88 LDR X8, [X31 + 0x10]
	0x03739A8C ADRP X0, 0x9BA000
	0x03739A90 ADD W8, W8, 0x1
	0x03739A94 STR W8, [X31 + 0x3C0]
	0x03739A98 LDR X0, [X0 + 0x758]
	0x03739A9C BL 0x1C16D08
	0x03739AA0 ADD X1, X31, 0x3C0
	0x03739AA4 BL 0x1C16E04
	0x03739AA8 MOV X19, X0
	0x03739AAC ADRP X0, 0xA0C000
	0x03739AB0 LDR X0, [X0 + 0x220]
	0x03739AB4 BL 0x1C16D08
	0x03739AB8 LDR X2, [X31 + 0x30]
	0x03739ABC MOV X1, X19
	0x03739AC0 MOV X3, X31
	0x03739AC4 BL 0x3227BD4
	0x03739AC8 MOV X19, X0
	0x03739ACC ADRP X0, 0x9BA000
	0x03739AD0 LDR X0, [X0 + 0x5B0]
	0x03739AD4 BL 0x1C16D08
	0x03739AD8 BL 0x1C16F10
	0x03739ADC MOV X1, X19
	0x03739AE0 MOV X2, X31
	0x03739AE4 MOV X20, X0
	0x03739AE8 BL 0x337DF1C
	0x03739AEC ADRP X0, 0xA0C000
	0x03739AF0 LDR X0, [X0 + 0x228]
	0x03739AF4 BL 0x1C16D08
	0x03739AF8 MOV X1, X0
	0x03739AFC MOV X0, X20
	0x03739B00 BL 0x1C16DEC
	0x03739B04 ADD W8, W19, 0x1
	0x03739B08 STR W8, [X31 + 0x3C0]
	0x03739B0C ADRP X0, 0x9BA000
	0x03739B10 LDR X0, [X0 + 0x758]
	0x03739B14 BL 0x1C16D08
	0x03739B18 ADD X1, X31, 0x3C0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X21, 0xCA8000
	007 Move X20, 0x9BB000
	008 Move W8, [X21+3352]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xA0D000
	016 Move X0, [X0+24]
	017 Call 0x1C17CF4
	018 Move X0, 0xA0D000
	019 Move X0, [X0+32]
	020 Call 0x1C17CF4
	021 Move X0, 0xA0D000
	022 Move X0, [X0+40]
	023 Call 0x1C17CF4
	024 Move X0, 0x9BB000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0xA0D000
	028 Move X0, [X0+16]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+3352], W8
	032 Move X0, [X20]
	033 Move [X31+24], X31
	034 Move [X31+32], X31
	035 Move [X31+40], X31
	036 Move [X31+8], X31
	037 Move [X31+16], X31
	038 Move W8, [X0+224]
	039 Move X20, [X19+32]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {101}
	051 Move X0, [X19+32]
	052 Compare X0, 0
	053 JumpIfEqual {87}
	054 Call InputActionAsset.get_actionMaps, X0
	055 Move X8, 0xA0D000
	056 Move X8, [X8+16]
	057 Move [X31+8], X0
	058 Move [X31+16], X1
	059 Add X0, X31, 8
	060 Move X9, [X8]
	061 Add X8, X31, 24
	062 Move X1, X9
	063 Call ReadOnlyArray`1<Object>.GetEnumerator, X0
	064 Move X20, 0xA0D000
	065 Move X21, 0xA0D000
	066 Move X20, [X20+32]
	067 Move X21, [X21+40]
	068 Move X1, [X20]
	069 Add X0, X31, 24
	070 Call Enumerator<Object>.MoveNext, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {81}
	075 Move X1, [X21]
	076 Add X0, X31, 24
	077 Call Enumerator<Object>.get_Current, X0
	078 Compare X0, 0
	079 JumpIfEqual {86}
	080 Move [X0+96], X31
	081 Move X8, 0xA0D000
	082 Move X8, [X8+24]
	083 Add X0, X31, 24
	084 Move X1, [X8]
	085 Call Enumerator<Object>.Dispose, X0
	086 Call 0x1C17F20
	087 Call 0x1C17F20
	088 Move X20, X0
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X0, X20
	091 Call 0x3EB2AD0
	092 Move X21, [X0]
	093 Call 0x3EB2AE0
	094 Move X8, 0xA0D000
	095 Move X8, [X8+24]
	096 Add X0, X31, 24
	097 Move X1, [X8]
	098 Call Enumerator<Object>.Dispose, X0
	099 Compare X21, 0
	100 JumpIfNotEqual {118}
	101 Move [X19+96], X31
	102 Move W8, [X19+200]
	103 Move W1, 1
	104 Move X0, X19
	105 Move [X19+56], X31
	106 Move [X19+64], X31
	107 And W8, W8, 0xFFFFFFF3
	108 Move [X19+312], X31
	109 Move [X19+200], W8
	110 Call InputActionMap.LazyResolveBindings, X0, X1
	111 Move X20, [X31+64]
	112 Move X19, [X31+72]
	113 Move X30, [X31+48]
	114 Move X21, [X31+56]
	115 Add X31, X31, 80
	116 Return 
	117 Move X21, X31
	118 Move X0, X21
	119 Call 0x1C17F18
	120 Move X20, X0
	121 Move X8, 0xA0D000
	122 Move X8, [X8+24]
	123 Move X1, [X8]
	124 Add X0, X31, 24
	125 Call Enumerator<Object>.Dispose, X0
	126 Compare X21, 0
	127 JumpIfNotEqual {130}
	128 Move X0, X20
	129 Call 0x1D2D690
	130 Move X0, X21
	131 Call 0x1C17F18
	132 Call 0x1991590

Method: System.Void OnBindingModified()

Disassembly:
	0x0373C38C LDR W9, [X8 + 0x18]
	0x0373C390 CMP W9, 0x1
	0x0373C394 B.LT 0x373C3B8
	0x0373C398 MOV W10, W31
	0x0373C39C ADD X11, X8, W10, 0x3, SXTW
	0x0373C3A0 LDR X11, [X11 + 0x20]
	0x0373C3A4 CBZ X11, 0x373C3D4

ISIL:
	001 Move W8, [X0+200]
	002 Move W1, 1
	003 Move [X0+56], X31
	004 Move [X0+64], X31
	005 Move [X0+312], X31
	006 And W8, W8, 0xFFFFFFF3
	007 Move [X0+200], W8
	008 Call InputActionMap.LazyResolveBindings, X0, X1
	009 Return 

Method: System.Void ClearCachedActionData(System.Boolean onlyControls = False)

Disassembly:
	0x0373C368 BL 0x1C16F20
	0x0373C36C BL 0x1C16F28
	0x0373C370 RET
	0x0373C374 STR X30, [X31 - 0x10]!
	0x0373C378 LDR X8, [X0 + 0x28]
	0x0373C37C MOVN W9, 0x0
	0x0373C380 STR X31, [X0 + 0x60]
	0x0373C384 STR W9, [X0 + 0x58]
	0x0373C388 CBZ X8, 0x373C3B8

ISIL:
	001 Move W8, [X0+200]
	002 Move TEMP, X1
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 JumpIfEqual {9}
	006 And W8, W8, 0xFFFFFFF7
	007 Move [X0+56], X31
	008 Move [X0+312], X31
	009 And W8, W8, 0xFFFFFFFB
	010 Move [X0+200], W8
	011 Move [X0+64], X31
	012 Return 

Method: System.Void GenerateId()

Disassembly:
	0x0373B074 SXTW X26, W26
	0x0373B078 LDR X9, [X8 + 0x18]
	0x0373B07C CMP X26, W9, SXTW
	0x0373B080 B.GE 0x373B31C
	0x0373B084 CMP W26, W9
	0x0373B088 B.CS 0x373B358
	0x0373B08C LDR X1, [X8, X22, LSL]
	0x0373B090 MOV X0, X19
	0x0373B094 MOV W2, W31
	0x0373B098 BL 0x37376AC
	0x0373B09C CBZ X0, 0x373B0B0
	0x0373B0A0 LDR W8, [X0 + 0xB0]
	0x0373B0A4 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, X31
	006 Call Guid.NewGuid
	007 Move [X31], X0
	008 Move [X31+8], X1
	009 Add X0, X31, 0
	010 Move X1, X31
	011 Call Guid.ToString, X0
	012 Move [X19+24], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Add X31, X31, 32
	016 Return 

Method: System.Boolean LazyResolveBindings(System.Boolean fullResolve)

Disassembly:
	0x03735520 RET
	0x03735524 BL 0x1C16F20
	0x03735528 STR X30, [X31 - 0x20]!
	0x0373552C STP X20, X19, [X31 + 0x10]
	0x03735530 ADRP X20, 0xCAB000
	0x03735534 LDRB W8, [X20 + 0xCE7]
	0x03735538 MOV X19, X0
	0x0373553C TBNZ X8, 0x0, 0x3735554
	0x03735540 ADRP X0, 0xA0F000
	0x03735544 LDR X0, [X0 + 0xF90]
	0x03735548 BL 0x1C16CF4
	0x0373554C MOVZ W8, 0x1
	0x03735550 STRB W8, [X20 + 0xCE7]
	0x03735554 LDR X8, [X19 + 0xC8]
	0x03735558 CBNZ X8, 0x373556C
	0x0373555C MOV X0, X19
	0x03735560 BL 0x373572C
	0x03735564 LDR X8, [X19 + 0xC8]
	0x03735568 CBZ X8, 0x37355C4
	0x0373556C LDR X0, [X8 + 0x60]
	0x03735570 CBZ X0, 0x37355B8
	0x03735574 ADRP X20, 0xA0F000
	0x03735578 LDR X20, [X20 + 0xF90]
	0x0373557C MOV X1, X31
	0x03735580 BL 0x374A7E0
	0x03735584 LDR X8, [X20]
	0x03735588 LDRSW X9, [X19 + 0xC0]
	0x0373558C MOVZ W10, 0x30
	0x03735590 LDR X8, [X8 + 0xB8]
	0x03735594 NOP
	0x03735598 MADD X9, X9, X10, X0
	0x0373559C LDR W9, [X9 + 0x2C]
	0x037355A0 LDR W8, [X8]
	0x037355A4 CMP W9, W8
	0x037355A8 CSET W9, EQ
	0x037355AC CMP W8, 0x0
	0x037355B0 CSET W8, NE
	0x037355B4 AND W0, W8, W9, 0x0
	0x037355B8 LDP X20, X19, [X31 + 0x10]
	0x037355BC LDR X30, [X31], #0x20
	0x037355C0 RET
	0x037355C4 BL 0x1C16F20
	0x037355C8 STP D9, D8, [X31 - 0x40]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCAC000
	006 Move W8, [X21+3353]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA10000
	014 Move X0, [X0+3944]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3353], W8
	018 Move W8, [X19+200]
	019 Move X9, [X19+96]
	020 Move [X19+64], X31
	021 And W10, W8, 0xFFFFFFFB
	022 Move [X19+200], W10
	023 Compare X9, 0
	024 JumpIfEqual {44}
	025 And W10, W8, 0xFFFFFFF8
	026 And W8, W8, 2
	027 Or W8, W20, W8
	028 Move X9, 0xA10000
	029 And W31, W8, 1
	030 Move W8, 2
	031 Move X9, [X9+3944]
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 Or W8, W10, W8
	034 Or W8, W8, 1
	035 Move [X19+200], W8
	036 Move X8, [X9]
	037 Move W0, W31
	038 Move X8, [X8+184]
	039 Move W8, [X8]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X19
	042 Call InputActionMap.ResolveBindings, X0
	043 Move W0, 1
	044 Move W0, W31
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: System.Boolean ResolveBindingsIfNecessary()

Disassembly:
	0x037356C0 LDRB W8, [X19]
	0x037356C4 FMOV S0, W31
	0x037356C8 CMP W8, 0x3
	0x037356CC B 0x37356D8
	0x037356D0 CMP W8, 0x3
	0x037356D4 FMOV S0, W31
	0x037356D8 FMOV S1, 1
	0x037356DC FCSEL S0, S1, S0, EQ
	0x037356E0 LDP X20, X19, [X31 + 0x30]
	0x037356E4 LDP X22, X21, [X31 + 0x20]
	0x037356E8 LDR X30, [X31 + 0x10]
	0x037356EC LDP D9, D8, [X31], #0x40
	0x037356F0 RET

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+96]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move W9, [X0+200]
	006 Move TEMP, X9
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {13}
	010 Move W8, [X8+194]
	011 Compare W8, 0
	012 JumpIfEqual {14}
	013 Move W0, W31
	014 Call InputActionMap.ResolveBindings, X0
	015 Move W0, 1
	016 Move X30, [X31+16]
	017 Return X0

Method: System.Void ResolveBindings()

Disassembly:
	0x0373C3A8 ADD W10, W10, 0x1
	0x0373C3AC CMP W9, W10
	0x0373C3B0 STR X0, [X11 + 0xC8]
	0x0373C3B4 B.NE 0x373C39C
	0x0373C3B8 LDR W8, [X0 + 0xC8]
	0x0373C3BC STP X31, X31, [X0 + 0x38]
	0x0373C3C0 STR X31, [X0 + 0x138]
	0x0373C3C4 AND W8, W8, 0xFFFFFFF3
	0x0373C3C8 STR W8, [X0 + 0xC8]
	0x0373C3CC LDR X30, [X31], #0x10
	0x0373C3D0 B 0x373A85C
	0x0373C3D4 BL 0x1C16F20
	0x0373C3D8 STR X30, [X31 - 0x30]!
	0x0373C3DC STP X22, X21, [X31 + 0x10]
	0x0373C3E0 STP X20, X19, [X31 + 0x20]
	0x0373C3E4 ADRP X22, 0xCA4000
	0x0373C3E8 ADRP X21, 0xA09000
	0x0373C3EC LDRB W8, [X22 + 0xD20]
	0x0373C3F0 LDR X21, [X21 + 0x330]
	0x0373C3F4 MOV X19, X1
	0x0373C3F8 MOV X20, X0
	0x0373C3FC TBNZ X8, 0x0, 0x373C414
	0x0373C400 ADRP X0, 0xA09000
	0x0373C404 LDR X0, [X0 + 0x330]
	0x0373C408 BL 0x1C16CF4
	0x0373C40C MOVZ W8, 0x1
	0x0373C410 STRB W8, [X22 + 0xD20]
	0x0373C414 LDR X0, [X20 + 0x8]
	0x0373C418 LDR W2, [X20 + 0x4]
	0x0373C41C LDR X3, [X21]
	0x0373C420 MOV X1, X19
	0x0373C424 LDP X20, X19, [X31 + 0x20]
	0x0373C428 LDP X22, X21, [X31 + 0x10]
	0x0373C42C LDR X30, [X31], #0x30
	0x0373C430 B 0x2179B8C
	0x0373C434 STP X30, X21, [X31 - 0x20]!
	0x0373C438 STP X20, X19, [X31 + 0x10]
	0x0373C43C ADRP X21, 0xCA4000
	0x0373C440 LDRB W8, [X21 + 0xD21]
	0x0373C444 MOV X20, X1
	0x0373C448 MOV X19, X0
	0x0373C44C TBNZ X8, 0x0, 0x373C464
	0x0373C450 ADRP X0, 0xA09000
	0x0373C454 LDR X0, [X0 + 0x338]
	0x0373C458 BL 0x1C16CF4
	0x0373C45C MOVZ W8, 0x1
	0x0373C460 STRB W8, [X21 + 0xD21]
	0x0373C464 MOV X0, X19
	0x0373C468 MOV X1, X20
	0x0373C46C BL 0x373C3D8
	0x0373C470 MOV W20, W0
	0x0373C474 TBNZ X0, 0x1F, 0x373C494
	0x0373C478 ADRP X8, 0xA09000
	0x0373C47C LDR X8, [X8 + 0x338]
	0x0373C480 LDR X0, [X19 + 0x8]
	0x0373C484 ADD X1, X19, 0x4
	0x0373C488 MOV W2, W20
	0x0373C48C LDR X3, [X8]
	0x0373C490 BL 0x2177EC0
	0x0373C494 ORN W8, W31, W20, 0x0
	0x0373C498 LDP X20, X19, [X31 + 0x10]
	0x0373C49C UBFM W0, W8, 0x1F, 0x1F
	0x0373C4A0 LDP X30, X21, [X31], #0x20
	0x0373C4A4 RET
	0x0373C4A8 SUB X31, X31, 0x60
	0x0373C4AC STP X30, X23, [X31 + 0x30]
	0x0373C4B0 STP X22, X21, [X31 + 0x40]
	0x0373C4B4 STP X20, X19, [X31 + 0x50]
	0x0373C4B8 ADRP X23, 0xCA4000
	0x0373C4BC ADRP X22, 0x9B7000
	0x0373C4C0 MOV X20, X8
	0x0373C4C4 LDRB W8, [X23 + 0xD24]
	0x0373C4C8 LDR X22, [X22 + 0x830]
	0x0373C4CC MOV X19, X1
	0x0373C4D0 MOV X21, X0
	0x0373C4D4 TBNZ X8, 0x0, 0x373C4EC
	0x0373C4D8 ADRP X0, 0x9B7000
	0x0373C4DC LDR X0, [X0 + 0x830]
	0x0373C4E0 BL 0x1C16CF4
	0x0373C4E4 MOVZ W8, 0x1
	0x0373C4E8 STRB W8, [X23 + 0xD24]
	0x0373C4EC MOV X0, X21
	0x0373C4F0 MOV X1, X31
	0x0373C4F4 BL 0x37522EC
	0x0373C4F8 STP X0, X1, [X31 + 0x8]
	0x0373C4FC ADD X0, X31, 0x8
	0x0373C500 MOV X1, X31
	0x0373C504 BL 0x337866C
	0x0373C508 LDR X8, [X21 + 0x40]
	0x0373C50C LDR X9, [X22]
	0x0373C510 LDP X30, X23, [X31 + 0x30]
	0x0373C514 CMP X8, 0x0
	0x0373C518 CSEL X10, X9, X8, EQ
	0x0373C51C LDR X8, [X21 + 0x48]
	0x0373C520 CMP X8, 0x0
	0x0373C524 CSEL X8, X9, X8, EQ
	0x0373C528 STP X8, X10, [X31 + 0x20]
	0x0373C52C LDR X8, [X21 + 0x50]
	0x0373C530 STP X19, X0, [X20]
	0x0373C534 LDP X22, X21, [X31 + 0x40]
	0x0373C538 CMP X8, 0x0
	0x0373C53C CSEL X8, X9, X8, EQ
	0x0373C540 LDP X9, X10, [X31 + 0x20]
	0x0373C544 STR X8, [X20 + 0x20]
	0x0373C548 STR X8, [X31 + 0x18]
	0x0373C54C STP X10, X9, [X20 + 0x10]
	0x0373C550 LDP X20, X19, [X31 + 0x50]
	0x0373C554 ADD X31, X31, 0x60
	0x0373C558 RET
	0x0373C55C SUB X31, X31, 0xA0
	0x0373C560 STR X30, [X31 + 0x80]
	0x0373C564 STP X20, X19, [X31 + 0x90]
	0x0373C568 MOV X19, X0
	0x0373C56C ADD X0, X31, 0x0
	0x0373C570 MOVZ W2, 0x58
	0x0373C574 MOV X1, X19
	0x0373C578 MOV X20, X8
	0x0373C57C BL 0x3EB1AC0
	0x0373C580 LDR X1, [X19 + 0x30]
	0x0373C584 ADD X8, X31, 0x58
	0x0373C588 ADD X0, X31, 0x0
	0x0373C58C BL 0x373C4A8
	0x0373C590 LDP X8, X30, [X31 + 0x78]
	0x0373C594 LDUR V0, [X31 + 0x68]
	0x0373C598 LDUR V1, [X31 + 0x58]
	0x0373C59C STR X8, [X20 + 0x20]
	0x0373C5A0 STP V1, V0, [X20]
	0x0373C5A4 LDP X20, X19, [X31 + 0x90]
	0x0373C5A8 ADD X31, X31, 0xA0
	0x0373C5AC RET
	0x0373C5B0 SUB X31, X31, 0x90
	0x0373C5B4 STR X30, [X31 + 0x60]
	0x0373C5B8 STP X22, X21, [X31 + 0x70]
	0x0373C5BC STP X20, X19, [X31 + 0x80]
	0x0373C5C0 ADRP X22, 0xCA4000
	0x0373C5C4 ADRP X21, 0x9B7000
	0x0373C5C8 MOV X19, X8
	0x0373C5CC LDRB W8, [X22 + 0xD25]
	0x0373C5D0 LDR X21, [X21 + 0x830]
	0x0373C5D4 MOV X20, X0
	0x0373C5D8 TBNZ X8, 0x0, 0x373C5F0
	0x0373C5DC ADRP X0, 0x9B7000
	0x0373C5E0 LDR X0, [X0 + 0x830]
	0x0373C5E4 BL 0x1C16CF4
	0x0373C5E8 MOVZ W8, 0x1
	0x0373C5EC STRB W8, [X22 + 0xD25]
	0x0373C5F0 MOVI V0.2D, 0x0
	0x0373C5F4 STP V0, V0, [X31 + 0x20]
	0x0373C5F8 STP V0, V0, [X31]
	0x0373C5FC LDR X0, [X20 + 0x10]
	0x0373C600 LDR X1, [X21]
	0x0373C604 MOV X2, X31
	0x0373C608 BL 0x3226EF8
	0x0373C60C MOV X8, X31
	0x0373C610 TBZ X0, 0x0, 0x373C618
	0x0373C614 LDR X8, [X20 + 0x10]
	0x0373C618 STR X8, [X31 + 0x40]
	0x0373C61C LDR X0, [X20 + 0x18]
	0x0373C620 LDR X1, [X21]
	0x0373C624 MOV X2, X31
	0x0373C628 BL 0x3226EF8
	0x0373C62C MOV X8, X31
	0x0373C630 TBZ X0, 0x0, 0x373C638
	0x0373C634 LDR X8, [X20 + 0x18]
	0x0373C638 STR X8, [X31 + 0x48]
	0x0373C63C LDR X0, [X20 + 0x20]
	0x0373C640 LDR X1, [X21]
	0x0373C644 MOV X2, X31
	0x0373C648 BL 0x3226EF8
	0x0373C64C MOV X8, X31
	0x0373C650 TBZ X0, 0x0, 0x373C658
	0x0373C654 LDR X8, [X20 + 0x20]
	0x0373C658 ADD X1, X31, 0x0
	0x0373C65C MOVZ W2, 0x58
	0x0373C660 MOV X0, X19
	0x0373C664 STR X8, [X31 + 0x50]
	0x0373C668 BL 0x3EB1AC0
	0x0373C66C LDP X20, X19, [X31 + 0x80]
	0x0373C670 LDP X22, X21, [X31 + 0x70]
	0x0373C674 LDR X30, [X31 + 0x60]
	0x0373C678 ADD X31, X31, 0x90
	0x0373C67C RET
	0x0373C680 SUB X31, X31, 0x80
	0x0373C684 STR X30, [X31 + 0x60]
	0x0373C688 STP X20, X19, [X31 + 0x70]
	0x0373C68C MOVI V0.2D, 0x0
	0x0373C690 STP V0, V0, [X31 + 0x40]
	0x0373C694 MOV X20, X0
	0x0373C698 LDR X0, [X0]
	0x0373C69C MOV X1, X31
	0x0373C6A0 MOV X19, X8
	0x0373C6A4 BL 0x32277A8
	0x0373C6A8 MOV X8, X31
	0x0373C6AC TBNZ X0, 0x0, 0x373C6B4
	0x0373C6B0 LDR X8, [X20]
	0x0373C6B4 STR X8, [X31 + 0x8]
	0x0373C6B8 LDR X0, [X20 + 0x8]
	0x0373C6BC MOV X1, X31
	0x0373C6C0 BL 0x32277A8
	0x0373C6C4 MOV X8, X31
	0x0373C6C8 TBNZ X0, 0x0, 0x373C6D0
	0x0373C6CC LDR X8, [X20 + 0x8]
	0x0373C6D0 STR X8, [X31 + 0x10]
	0x0373C6D4 LDR X8, [X20 + 0x10]
	0x0373C6D8 MOV X1, X31
	0x0373C6DC STR X8, [X31 + 0x18]
	0x0373C6E0 LDR X0, [X20 + 0x30]
	0x0373C6E4 BL 0x32277A8
	0x0373C6E8 MOV X8, X31
	0x0373C6EC TBNZ X0, 0x0, 0x373C6F4
	0x0373C6F0 LDR X8, [X20 + 0x30]
	0x0373C6F4 STR X8, [X31 + 0x38]
	0x0373C6F8 LDR X0, [X20 + 0x18]
	0x0373C6FC MOV X1, X31
	0x0373C700 BL 0x32277A8
	0x0373C704 MOV X8, X31
	0x0373C708 TBNZ X0, 0x0, 0x373C710
	0x0373C70C LDR X8, [X20 + 0x18]
	0x0373C710 STR X8, [X31 + 0x20]
	0x0373C714 LDR X0, [X20 + 0x20]
	0x0373C718 MOV X1, X31
	0x0373C71C BL 0x32277A8
	0x0373C720 MOV X8, X31
	0x0373C724 TBNZ X0, 0x0, 0x373C72C
	0x0373C728 LDR X8, [X20 + 0x20]
	0x0373C72C STR X8, [X31 + 0x28]
	0x0373C730 LDR X0, [X20 + 0x28]
	0x0373C734 MOV X1, X31
	0x0373C738 BL 0x32277A8
	0x0373C73C MOV X8, X31
	0x0373C740 TBNZ X0, 0x0, 0x373C748
	0x0373C744 LDR X8, [X20 + 0x28]
	0x0373C748 STR X8, [X31 + 0x30]
	0x0373C74C LDRB W1, [X20 + 0x38]
	0x0373C750 ADD X0, X31, 0x8
	0x0373C754 MOV X2, X31
	0x0373C758 BL 0x374753C
	0x0373C75C LDRB W1, [X20 + 0x39]
	0x0373C760 ADD X0, X31, 0x8
	0x0373C764 MOV X2, X31
	0x0373C768 BL 0x374A2A8
	0x0373C76C ADD X1, X31, 0x8
	0x0373C770 MOVZ W2, 0x58
	0x0373C774 MOV X0, X19
	0x0373C778 BL 0x3EB1AC0
	0x0373C77C LDP X20, X19, [X31 + 0x70]
	0x0373C780 LDR X30, [X31 + 0x60]
	0x0373C784 ADD X31, X31, 0x80
	0x0373C788 RET
	0x0373C78C SUB X31, X31, 0x60
	0x0373C790 STR X30, [X31 + 0x30]
	0x0373C794 STP X22, X21, [X31 + 0x40]
	0x0373C798 STP X20, X19, [X31 + 0x50]
	0x0373C79C LDR V0, [X0 + 0x1]
	0x0373C7A0 LDR V1, [X0]
	0x0373C7A4 LDR X21, [X0 + 0x30]
	0x0373C7A8 MOV X1, X31
	0x0373C7AC STR V0, [X31 + 0x2]
	0x0373C7B0 LDR V0, [X0 + 0x2]
	0x0373C7B4 MOV X19, X0
	0x0373C7B8 MOV X20, X8
	0x0373C7BC STP V1, V0, [X31]
	0x0373C7C0 BL 0x3747CF4
	0x0373C7C4 AND W22, W0, 0x1
	0x0373C7C8 MOV X0, X19
	0x0373C7CC MOV X1, X31
	0x0373C7D0 BL 0x3749FA8
	0x0373C7D4 LDR V1, [X31]
	0x0373C7D8 LDR V0, [X31 + 0x2]
	0x0373C7DC AND W8, W0, 0x1
	0x0373C7E0 STR X21, [X20 + 0x30]
	0x0373C7E4 STRB W22, [X20 + 0x38]
	0x0373C7E8 STP V1, V0, [X20]
	0x0373C7EC LDR V0, [X31 + 0x1]
	0x0373C7F0 STUR W31, [X20 + 0x3A]
	0x0373C7F4 STRB W8, [X20 + 0x39]
	0x0373C7F8 STRH W31, [X20 + 0x3E]
	0x0373C7FC STR V0, [X20 + 0x2]
	0x0373C800 LDP X20, X19, [X31 + 0x50]
	0x0373C804 LDP X22, X21, [X31 + 0x40]
	0x0373C808 LDR X30, [X31 + 0x30]
	0x0373C80C ADD X31, X31, 0x60
	0x0373C810 RET
	0x0373C814 STR X30, [X31 - 0x30]!
	0x0373C818 STP X22, X21, [X31 + 0x10]
	0x0373C81C STP X20, X19, [X31 + 0x20]
	0x0373C820 ADRP X21, 0xCA4000
	0x0373C824 LDRB W8, [X21 + 0xD27]
	0x0373C828 MOV X20, X1
	0x0373C82C MOV X19, X0
	0x0373C830 TBNZ X8, 0x0, 0x373C890
	0x0373C834 ADRP X0, 0x9B7000
	0x0373C838 LDR X0, [X0 + 0xDF8]
	0x0373C83C BL 0x1C16CF4
	0x0373C840 ADRP X0, 0xA09000
	0x0373C844 LDR X0, [X0 + 0x340]
	0x0373C848 BL 0x1C16CF4
	0x0373C84C ADRP X0, 0xA09000
	0x0373C850 LDR X0, [X0 + 0x348]
	0x0373C854 BL 0x1C16CF4
	0x0373C858 ADRP X0, 0x9BB000
	0x0373C85C LDR X0, [X0 + 0x3E0]
	0x0373C860 BL 0x1C16CF4
	0x0373C864 ADRP X0, 0x9B7000
	0x0373C868 LDR X0, [X0 + 0x6C0]
	0x0373C86C BL 0x1C16CF4
	0x0373C870 ADRP X0, 0xA09000
	0x0373C874 LDR X0, [X0 + 0x350]
	0x0373C878 BL 0x1C16CF4
	0x0373C87C ADRP X0, 0x9E3000
	0x0373C880 LDR X0, [X0 + 0xF0]
	0x0373C884 BL 0x1C16CF4
	0x0373C888 MOVZ W8, 0x1
	0x0373C88C STRB W8, [X21 + 0xD27]
	0x0373C890 LDR X0, [X19 + 0x20]
	0x0373C894 MOV X1, X31
	0x0373C898 BL 0x32277A8
	0x0373C89C TBNZ X0, 0x0, 0x373C8A8
	0x0373C8A0 LDR X8, [X19 + 0x20]
	0x0373C8A4 STR X8, [X19 + 0x18]
	0x0373C8A8 LDR X0, [X19 + 0x8]
	0x0373C8AC MOV X1, X31
	0x0373C8B0 BL 0x32277A8
	0x0373C8B4 TBZ X0, 0x0, 0x373C8C8
	0x0373C8B8 LDRB W8, [X19 + 0x38]
	0x0373C8BC CBZ W8, 0x373C960
	0x0373C8C0 MOVZ W22, 0x2
	0x0373C8C4 B 0x373C9BC
	0x0373C8C8 ADRP X8, 0x9B7000
	0x0373C8CC LDR X8, [X8 + 0x6C0]
	0x0373C8D0 ADRP X22, 0x9B7000
	0x0373C8D4 LDR X0, [X8]
	0x0373C8D8 ADRP X8, 0xA09000
	0x0373C8DC LDR X8, [X8 + 0x340]
	0x0373C8E0 LDR W9, [X0 + 0xE0]
	0x0373C8E4 LDR X21, [X8]
	0x0373C8E8 LDR X22, [X22 + 0xDF8]
	0x0373C8EC CBNZ W9, 0x373C8F4
	0x0373C8F0 BL 0x1C16DFC
	0x0373C8F4 MOV X0, X21
	0x0373C8F8 MOV X1, X31
	0x0373C8FC BL 0x338C698
	0x0373C900 LDR X8, [X22]
	0x0373C904 LDR X21, [X19 + 0x8]
	0x0373C908 MOV X22, X0
	0x0373C90C LDR W9, [X8 + 0xE0]
	0x0373C910 CBNZ W9, 0x373C91C
	0x0373C914 MOV X0, X8
	0x0373C918 BL 0x1C16DFC
	0x0373C91C MOVZ W2, 0x1
	0x0373C920 MOV X0, X22
	0x0373C924 MOV X1, X21
	0x0373C928 MOV X3, X31
	0x0373C92C BL 0x33AF1B8
	0x0373C930 CBZ X0, 0x373CA60
	0x0373C934 ADRP X8, 0xA09000
	0x0373C938 LDR X8, [X8 + 0x348]
	0x0373C93C LDR X9, [X0]
	0x0373C940 LDR X1, [X8]
	0x0373C944 LDR X8, [X9 + 0x40]
	0x0373C948 LDR X9, [X1 + 0x40]
	0x0373C94C CMP X8, X9
	0x0373C950 B.NE 0x373CA64
	0x0373C954 BL 0x1C16E08
	0x0373C958 LDR W22, [X0]
	0x0373C95C B 0x373C9BC
	0x0373C960 LDRB W8, [X19 + 0x39]
	0x0373C964 CBNZ W8, 0x373C9B8
	0x0373C968 LDR X0, [X19 + 0x18]
	0x0373C96C MOV X1, X31
	0x0373C970 BL 0x32277A8
	0x0373C974 TBNZ X0, 0x0, 0x373C9B8
	0x0373C978 ADRP X8, 0xA09000
	0x0373C97C LDR X0, [X19 + 0x18]
	0x0373C980 LDR X8, [X8 + 0x350]
	0x0373C984 MOV X2, X31
	0x0373C988 LDR X1, [X8]
	0x0373C98C BL 0x321BA08
	0x0373C990 TBNZ X0, 0x0, 0x373C9B0
	0x0373C994 ADRP X8, 0x9E3000
	0x0373C998 LDR X0, [X19 + 0x18]
	0x0373C99C LDR X8, [X8 + 0xF0]
	0x0373C9A0 MOV X2, X31
	0x0373C9A4 LDR X1, [X8]
	0x0373C9A8 BL 0x321BA08
	0x0373C9AC TBZ X0, 0x0, 0x373C9B8
	0x0373C9B0 MOVZ W22, 0x1
	0x0373C9B4 B 0x373C9BC
	0x0373C9B8 MOV W22, W31
	0x0373C9BC ADRP X8, 0x9BB000
	0x0373C9C0 LDR X8, [X8 + 0x3E0]
	0x0373C9C4 CBNZ X20, 0x373C9CC
	0x0373C9C8 LDR X20, [X19]
	0x0373C9CC LDR X0, [X8]
	0x0373C9D0 BL 0x1C16F10
	0x0373C9D4 MOV X1, X20
	0x0373C9D8 MOV W2, W22
	0x0373C9DC MOV X3, X31
	0x0373C9E0 MOV X4, X31
	0x0373C9E4 MOV X5, X31
	0x0373C9E8 MOV X6, X31
	0x0373C9EC MOV X21, X0
	0x0373C9F0 BL 0x3734C54
	0x0373C9F4 LDR X0, [X19 + 0x10]
	0x0373C9F8 MOV X1, X31
	0x0373C9FC BL 0x32277A8
	0x0373CA00 MOV X8, X31
	0x0373CA04 TBNZ X0, 0x0, 0x373CA0C
	0x0373CA08 LDR X8, [X19 + 0x10]
	0x0373CA0C CBZ X21, 0x373CA60
	0x0373CA10 STR X8, [X21 + 0x28]
	0x0373CA14 LDR X0, [X19 + 0x18]
	0x0373CA18 MOV X1, X31
	0x0373CA1C BL 0x32277A8
	0x0373CA20 MOV X8, X31
	0x0373CA24 TBNZ X0, 0x0, 0x373CA2C
	0x0373CA28 LDR X8, [X19 + 0x18]
	0x0373CA2C STR X8, [X21 + 0x20]
	0x0373CA30 LDUR V0, [X19 + 0x28]
	0x0373CA34 LDR W8, [X21 + 0x48]
	0x0373CA38 MOV X0, X21
	0x0373CA3C STR V0, [X21 + 0x3]
	0x0373CA40 LDRB W9, [X19 + 0x39]
	0x0373CA44 AND W8, W8, 0xFFFFFFFE
	0x0373CA48 LDP X20, X19, [X31 + 0x20]
	0x0373CA4C ORR W8, W8, W9, 0x0
	0x0373CA50 STR W8, [X21 + 0x48]
	0x0373CA54 LDP X22, X21, [X31 + 0x10]
	0x0373CA58 LDR X30, [X31], #0x30
	0x0373CA5C RET
	0x0373CA60 BL 0x1C16F20
	0x0373CA64 BL 0x1C171E0
	0x0373CA68 SUB X31, X31, 0x40
	0x0373CA6C STP X30, X21, [X31 + 0x20]
	0x0373CA70 STP X20, X19, [X31 + 0x30]
	0x0373CA74 ADRP X21, 0xCA4000
	0x0373CA78 LDRB W9, [X21 + 0xD28]
	0x0373CA7C MOV X20, X0
	0x0373CA80 MOV X19, X8
	0x0373CA84 TBNZ X9, 0x0, 0x373CA9C
	0x0373CA88 ADRP X0, 0xA09000
	0x0373CA8C LDR X0, [X0 + 0x348]
	0x0373CA90 BL 0x1C16CF4
	0x0373CA94 MOVZ W8, 0x1
	0x0373CA98 STRB W8, [X21 + 0xD28]
	0x0373CA9C STUR W31, [X31 + 0x1B]
	0x0373CAA0 STR W31, [X31 + 0x18]
	0x0373CAA4 CBZ X20, 0x373CB20
	0x0373CAA8 ADRP X8, 0xA09000
	0x0373CAAC LDR X8, [X8 + 0x348]
	0x0373CAB0 MOVN X9, 0x0
	0x0373CAB4 LDR X21, [X20 + 0x10]
	0x0373CAB8 ADD X0, X31, 0x0
	0x0373CABC LDR X8, [X8]
	0x0373CAC0 MOV X1, X31
	0x0373CAC4 STP X8, X9, [X31]
	0x0373CAC8 LDR W8, [X20 + 0x18]
	0x0373CACC STR W8, [X31 + 0x10]
	0x0373CAD0 BL 0x33B162C
	0x0373CAD4 LDR W8, [X20 + 0x18]
	0x0373CAD8 LDP V1, V0, [X20 + 0x20]
	0x0373CADC CBZ W8, 0x373CAEC
	0x0373CAE0 LDRB W8, [X20 + 0x48]
	0x0373CAE4 AND W8, W8, 0x1
	0x0373CAE8 B 0x373CAF0
	0x0373CAEC MOVZ W8, 0x1
	0x0373CAF0 STRB W8, [X19 + 0x30]
	0x0373CAF4 LDUR W8, [X31 + 0x1B]
	0x0373CAF8 LDR W9, [X31 + 0x18]
	0x0373CAFC UNIMPLEMENTED
	0x0373CB00 STP X21, X0, [X19]
	0x0373CB04 STP V1, V0, [X19 + 0x10]
	0x0373CB08 STR W8, [X19 + 0x34]
	0x0373CB0C STUR W9, [X19 + 0x31]
	0x0373CB10 LDP X20, X19, [X31 + 0x30]
	0x0373CB14 LDP X30, X21, [X31 + 0x20]
	0x0373CB18 ADD X31, X31, 0x40
	0x0373CB1C RET
	0x0373CB20 BL 0x1C16F20
	0x0373CB24 SUB X31, X31, 0x130
	0x0373CB28 STR X29, [X31 + 0xD0]
	0x0373CB2C STP X30, X27, [X31 + 0xE0]
	0x0373CB30 STP X26, X25, [X31 + 0xF0]
	0x0373CB34 STP X24, X23, [X31 + 0x100]
	0x0373CB38 STP X22, X21, [X31 + 0x110]
	0x0373CB3C STP X20, X19, [X31 + 0x120]
	0x0373CB40 ADRP X21, 0xCA4000
	0x0373CB44 LDRB W9, [X21 + 0xD2B]
	0x0373CB48 MOV X20, X0
	0x0373CB4C MOV X19, X8
	0x0373CB50 TBNZ X9, 0x0, 0x373CB74
	0x0373CB54 ADRP X0, 0xA09000
	0x0373CB58 LDR X0, [X0 + 0x358]
	0x0373CB5C BL 0x1C16CF4
	0x0373CB60 ADRP X0, 0xA09000
	0x0373CB64 LDR X0, [X0 + 0x360]
	0x0373CB68 BL 0x1C16CF4
	0x0373CB6C MOVZ W8, 0x1
	0x0373CB70 STRB W8, [X21 + 0xD2B]
	0x0373CB74 STP X31, X31, [X31 + 0xC0]
	0x0373CB78 CBZ X20, 0x373CD08
	0x0373CB7C LDR X23, [X20 + 0x28]
	0x0373CB80 CBZ X23, 0x373CC20
	0x0373CB84 ADRP X8, 0xA09000
	0x0373CB88 LDR X8, [X8 + 0x360]
	0x0373CB8C LDR X22, [X23 + 0x18]
	0x0373CB90 LDR X0, [X8]
	0x0373CB94 MOV W1, W22
	0x0373CB98 BL 0x1C16D6C
	0x0373CB9C CMP W22, 0x1
	0x0373CBA0 MOV X21, X0
	0x0373CBA4 B.LT 0x373CC24
	0x0373CBA8 MOV X24, X31
	0x0373CBAC AND X22, X22, 0x0
	0x0373CBB0 ADD X25, X23, 0x20
	0x0373CBB4 ADD X26, X21, 0x20
	0x0373CBB8 LDR W8, [X23 + 0x18]
	0x0373CBBC CMP X24, X8
	0x0373CBC0 B.CS 0x373CD04
	0x0373CBC4 LDR X0, [X25, X24, LSL #3]
	0x0373CBC8 ADD X8, X31, 0x40
	0x0373CBCC BL 0x373CA68
	0x0373CBD0 CBZ X21, 0x373CD08
	0x0373CBD4 LDP V0, V1, [X31 + 0x40]
	0x0373CBD8 LDR V2, [X31 + 0x6]
	0x0373CBDC LDR X8, [X31 + 0x70]
	0x0373CBE0 STP V0, V1, [X31 + 0x80]
	0x0373CBE4 STR V2, [X31 + 0xA]
	0x0373CBE8 STR X8, [X31 + 0xB0]
	0x0373CBEC LDR W8, [X21 + 0x18]
	0x0373CBF0 CMP X24, X8
	0x0373CBF4 B.CS 0x373CD04
	0x0373CBF8 LDP V0, V1, [X31 + 0x80]
	0x0373CBFC LDR X8, [X31 + 0xB0]
	0x0373CC00 LDR V2, [X31 + 0xA]
	0x0373CC04 ADD X24, X24, 0x1
	0x0373CC08 CMP X22, X24
	0x0373CC0C STR X8, [X26 + 0x30]
	0x0373CC10 STP V1, V2, [X26 + 0x10]
	0x0373CC14 STR V0, [X26], #0x38
	0x0373CC18 B.NE 0x373CBB8
	0x0373CC1C B 0x373CC24
	0x0373CC20 MOV X21, X31
	0x0373CC24 LDR X24, [X20 + 0x30]
	0x0373CC28 CBZ X24, 0x373CCBC
	0x0373CC2C ADRP X8, 0xA09000
	0x0373CC30 LDR X8, [X8 + 0x358]
	0x0373CC34 LDR X23, [X24 + 0x18]
	0x0373CC38 LDR X0, [X8]
	0x0373CC3C MOV W1, W23
	0x0373CC40 BL 0x1C16D6C
	0x0373CC44 CMP W23, 0x1
	0x0373CC48 MOV X22, X0
	0x0373CC4C B.LT 0x373CCC0
	0x0373CC50 MOV X25, X31
	0x0373CC54 AND X26, X23, 0x0
	0x0373CC58 ADD X23, X24, 0x20
	0x0373CC5C ADD X27, X22, 0x20
	0x0373CC60 LDR W8, [X24 + 0x18]
	0x0373CC64 CMP X25, X8
	0x0373CC68 B.CS 0x373CD04
	0x0373CC6C ADD X8, X31, 0x40
	0x0373CC70 MOV X0, X23
	0x0373CC74 BL 0x373C78C
	0x0373CC78 CBZ X22, 0x373CD08
	0x0373CC7C LDP V0, V1, [X31 + 0x40]
	0x0373CC80 LDP V2, V3, [X31 + 0x60]
	0x0373CC84 STP V0, V1, [X31]
	0x0373CC88 STP V2, V3, [X31 + 0x20]
	0x0373CC8C LDR W8, [X22 + 0x18]
	0x0373CC90 CMP X25, X8
	0x0373CC94 B.CS 0x373CD04
	0x0373CC98 LDP V0, V1, [X31]
	0x0373CC9C LDP V2, V3, [X31 + 0x20]
	0x0373CCA0 ADD X25, X25, 0x1
	0x0373CCA4 ADD X23, X23, 0x58
	0x0373CCA8 CMP X26, X25
	0x0373CCAC STP V2, V3, [X27 + 0x20]
	0x0373CCB0 STP V0, V1, [X27], #0x40
	0x0373CCB4 B.NE 0x373CC60
	0x0373CCB8 B 0x373CCC0
	0x0373CCBC MOV X22, X31
	0x0373CCC0 LDR X23, [X20 + 0x10]
	0x0373CCC4 MOV X0, X20
	0x0373CCC8 BL 0x373A010
	0x0373CCCC STP X0, X1, [X31 + 0xC0]
	0x0373CCD0 ADD X0, X31, 0xC0
	0x0373CCD4 MOV X1, X31
	0x0373CCD8 BL 0x337866C
	0x0373CCDC STP X23, X0, [X19]
	0x0373CCE0 STP X21, X22, [X19 + 0x10]
	0x0373CCE4 LDP X20, X19, [X31 + 0x120]
	0x0373CCE8 LDP X22, X21, [X31 + 0x110]
	0x0373CCEC LDP X24, X23, [X31 + 0x100]
	0x0373CCF0 LDP X26, X25, [X31 + 0xF0]
	0x0373CCF4 LDP X30, X27, [X31 + 0xE0]
	0x0373CCF8 LDR X29, [X31 + 0xD0]
	0x0373CCFC ADD X31, X31, 0x130
	0x0373CD00 RET
	0x0373CD04 BL 0x1C16F28
	0x0373CD08 BL 0x1C16F20
	0x0373CD0C SUB X31, X31, 0x1B0
	0x0373CD10 STR X29, [X31 + 0x170]
	0x0373CD14 STP X30, X23, [X31 + 0x180]
	0x0373CD18 STP X22, X21, [X31 + 0x190]
	0x0373CD1C STP X20, X19, [X31 + 0x1A0]
	0x0373CD20 CBZ X0, 0x373CDD0
	0x0373CD24 MOV X21, X1
	0x0373CD28 MOV X20, X0
	0x0373CD2C MOV X0, X1
	0x0373CD30 MOV X1, X31
	0x0373CD34 MOV X22, X2
	0x0373CD38 MOV X19, X8
	0x0373CD3C BL 0x32277A8
	0x0373CD40 TBNZ X0, 0x0, 0x373CDF0
	0x0373CD44 ADD X0, X31, 0x98
	0x0373CD48 MOVZ W2, 0x58
	0x0373CD4C MOV X1, X22
	0x0373CD50 ADD X23, X31, 0xF0
	0x0373CD54 BL 0x3EB1AC0
	0x0373CD58 MOVI V0.2D, 0x0
	0x0373CD5C ADD X0, X31, 0xF0
	0x0373CD60 ADD X2, X31, 0x98
	0x0373CD64 MOV X1, X21
	0x0373CD68 MOV X3, X31
	0x0373CD6C MOV X4, X31
	0x0373CD70 STR X31, [X31 + 0x160]
	0x0373CD74 STP V0, V0, [X23 + 0x50]
	0x0373CD78 STP V0, V0, [X23 + 0x30]
	0x0373CD7C STP V0, V0, [X23 + 0x10]
	0x0373CD80 STR V0, [X23]
	0x0373CD84 BL 0x373CE38
	0x0373CD88 ADD X0, X31, 0x8
	0x0373CD8C ADD X1, X31, 0xF0
	0x0373CD90 MOVZ W2, 0x78
	0x0373CD94 BL 0x3EB1AC0
	0x0373CD98 ADD X8, X31, 0x80
	0x0373CD9C ADD X1, X31, 0x8
	0x0373CDA0 MOV X0, X20
	0x0373CDA4 BL 0x373CEDC
	0x0373CDA8 LDR X8, [X31 + 0x90]
	0x0373CDAC LDR V0, [X31 + 0x8]
	0x0373CDB0 LDP X22, X21, [X31 + 0x190]
	0x0373CDB4 LDP X30, X23, [X31 + 0x180]
	0x0373CDB8 STR X8, [X19 + 0x10]
	0x0373CDBC STR V0, [X19]
	0x0373CDC0 LDP X20, X19, [X31 + 0x1A0]
	0x0373CDC4 LDR X29, [X31 + 0x170]
	0x0373CDC8 ADD X31, X31, 0x1B0
	0x0373CDCC RET
	0x0373CDD0 ADRP X0, 0x9BC000
	0x0373CDD4 LDR X0, [X0 + 0x528]
	0x0373CDD8 BL 0x1C16D08
	0x0373CDDC BL 0x1C16F10
	0x0373CDE0 MOV X19, X0
	0x0373CDE4 ADRP X0, 0x9DF000
	0x0373CDE8 LDR X0, [X0 + 0xBF8]
	0x0373CDEC B 0x373CE0C
	0x0373CDF0 ADRP X0, 0x9BC000
	0x0373CDF4 LDR X0, [X0 + 0x528]
	0x0373CDF8 BL 0x1C16D08
	0x0373CDFC BL 0x1C16F10
	0x0373CE00 MOV X19, X0
	0x0373CE04 ADRP X0, 0x9BF000
	0x0373CE08 LDR X0, [X0 + 0x588]
	0x0373CE0C BL 0x1C16D08
	0x0373CE10 MOV X1, X0
	0x0373CE14 MOV X0, X19
	0x0373CE18 MOV X2, X31
	0x0373CE1C BL 0x330E100
	0x0373CE20 ADRP X0, 0xA09000
	0x0373CE24 LDR X0, [X0 + 0x368]
	0x0373CE28 BL 0x1C16D08
	0x0373CE2C MOV X1, X0
	0x0373CE30 MOV X0, X19
	0x0373CE34 BL 0x1C16DEC
	0x0373CE38 STR X30, [X31 - 0x40]!
	0x0373CE3C STP X24, X23, [X31 + 0x10]
	0x0373CE40 STP X22, X21, [X31 + 0x20]
	0x0373CE44 STP X20, X19, [X31 + 0x30]
	0x0373CE48 CBZ X1, 0x373CED8
	0x0373CE4C MOV X23, X1
	0x0373CE50 MOV X22, X2
	0x0373CE54 MOV X21, X0
	0x0373CE58 MOVZ W1, 0x3A
	0x0373CE5C MOV X0, X23
	0x0373CE60 MOV X2, X31
	0x0373CE64 MOV X19, X4
	0x0373CE68 MOV X20, X3
	0x0373CE6C BL 0x322BD98
	0x0373CE70 TBNZ X0, 0x1F, 0x373CEA8
	0x0373CE74 MOV W24, W0
	0x0373CE78 MOV X0, X23
	0x0373CE7C MOV W1, W31
	0x0373CE80 MOV W2, W24
	0x0373CE84 MOV X3, X31
	0x0373CE88 BL 0x3228DE4
	0x0373CE8C STR X0, [X21]
	0x0373CE90 ADD W1, W24, 0x1
	0x0373CE94 MOV X0, X23
	0x0373CE98 MOV X2, X31
	0x0373CE9C BL 0x322B484
	0x0373CEA0 MOV X23, X0
	0x0373CEA4 B 0x373CEAC
	0x0373CEA8 STR X31, [X21]
	0x0373CEAC ADD X0, X21, 0x10
	0x0373CEB0 MOVZ W2, 0x58
	0x0373CEB4 MOV X1, X22
	0x0373CEB8 STR X23, [X21 + 0x8]
	0x0373CEBC BL 0x3EB1B30
	0x0373CEC0 STP X20, X19, [X21 + 0x68]
	0x0373CEC4 LDP X20, X19, [X31 + 0x30]
	0x0373CEC8 LDP X22, X21, [X31 + 0x20]
	0x0373CECC LDP X24, X23, [X31 + 0x10]
	0x0373CED0 LDR X30, [X31], #0x40
	0x0373CED4 RET
	0x0373CED8 BL 0x1C16F20
	0x0373CEDC STP X29, X30, [X31 - 0x30]!
	0x0373CEE0 STP X22, X21, [X31 + 0x10]
	0x0373CEE4 STP X20, X19, [X31 + 0x20]
	0x0373CEE8 SUB X31, X31, 0x260
	0x0373CEEC ADRP X22, 0xCA4000
	0x0373CEF0 LDRB W9, [X22 + 0xD31]
	0x0373CEF4 MOV X20, X1
	0x0373CEF8 MOV X21, X0
	0x0373CEFC MOV X19, X8
	0x0373CF00 TBNZ X9, 0x0, 0x373CF18
	0x0373CF04 ADRP X0, 0xA09000
	0x0373CF08 LDR X0, [X0 + 0x370]
	0x0373CF0C BL 0x1C16CF4
	0x0373CF10 MOVZ W8, 0x1
	0x0373CF14 STRB W8, [X22 + 0xD31]
	0x0373CF18 ADD X0, X31, 0x140
	0x0373CF1C MOVZ W2, 0xA8
	0x0373CF20 MOV W1, W31
	0x0373CF24 BL 0x3EB1B10
	0x0373CF28 STP X31, X31, [X31 + 0x120]
	0x0373CF2C STR X31, [X31 + 0x130]
	0x0373CF30 CBZ X21, 0x373D030
	0x0373CF34 LDR X8, [X21 + 0x10]
	0x0373CF38 STR X8, [X20 + 0x40]
	0x0373CF3C LDR X22, [X21 + 0xC8]
	0x0373CF40 CBNZ X22, 0x373CF54
	0x0373CF44 MOV X0, X21
	0x0373CF48 BL 0x373572C
	0x0373CF4C LDR X22, [X21 + 0xC8]
	0x0373CF50 CBZ X22, 0x373D030
	0x0373CF54 MOV X0, X22
	0x0373CF58 BL 0x37346C0
	0x0373CF5C LDR X21, [X22 + 0x60]
	0x0373CF60 ADD X0, X31, 0xA8
	0x0373CF64 MOVZ W2, 0x78
	0x0373CF68 MOV X1, X20
	0x0373CF6C BL 0x3EB1AC0
	0x0373CF70 LDR W20, [X22 + 0x58]
	0x0373CF74 ADD X0, X31, 0x1E8
	0x0373CF78 ADD X1, X31, 0xA8
	0x0373CF7C MOVZ W2, 0x78

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 1584
	014 Move X19, 0xCA5000
	015 Move X26, 0x9B8000
	016 Move W8, [X19+3354]
	017 Move X26, [X26+1432]
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {49}
	023 Move X0, 0x9B8000
	024 Move X0, [X0+3584]
	025 Call 0x1C17CF4
	026 Move X0, 0xA0A000
	027 Move X0, [X0+192]
	028 Call 0x1C17CF4
	029 Move X0, 0x9B8000
	030 Move X0, [X0+3608]
	031 Call 0x1C17CF4
	032 Move X0, 0xA0A000
	033 Move X0, [X0+728]
	034 Call 0x1C17CF4
	035 Move X0, 0x9B8000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0xA0A000
	039 Move X0, [X0+736]
	040 Call 0x1C17CF4
	041 Move X0, 0xA0A000
	042 Move X0, [X0+744]
	043 Call 0x1C17CF4
	044 Move X0, 0xA0A000
	045 Move X0, [X0+752]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X19+3354], W8
	049 Move X25, 0x9B8000
	050 Move X25, [X25+3584]
	051 NotImplemented "Instruction MOVI not yet implemented."
	052 Move [X31+1124], W31
	053 Move [X31+90], V0
	054 Move [X31+89], V0
	055 Move [X31+69], V0
	056 Move [X31+68], V0
	057 Call InputActionRebindingExtensions.DeferBindingResolution
	058 Move X19, X0
	059 NotImplemented "Instruction MOVI not yet implemented."
	060 Add X0, X31, 1128
	061 Move W2, 296
	062 Move W1, W31
	063 Move [X31+91], V0
	064 Move [X31+92], V0
	065 Move [X31+93], V0
	066 Move [X31+94], V0
	067 Move [X31+95], V0
	068 Move [X31+96], V0
	069 Move [X31+97], V0
	070 Move [X31+98], V0
	071 Call 0x3EB2B10
	072 Move X0, [X26]
	073 Move X8, [X20+96]
	074 Move X22, [X20+32]
	075 Move W9, [X0+224]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CSET not yet implemented."
	078 Compare W9, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X22
	082 Move X1, X31
	083 Move X2, X31
	084 Call Object.op_Inequality, X0, X1
	085 Move X27, 0xA0A000
	086 Move X27, [X27+736]
	087 Add X28, X31, 792
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {209}
	092 Move X0, [X20+32]
	093 Compare X0, 0
	094 JumpIfEqual {576}
	095 Call InputActionAsset.get_actionMaps, X0
	096 Move X8, 0xA0A000
	097 Move X8, [X8+752]
	098 Move X2, [X8]
	099 Add X8, X31, 792
	100 Call 0x249B5CC, X0
	101 Move V0, [X28]
	102 Move V1, [X28+16]
	103 Move [X31+89], V0
	104 Move [X31+90], V1
	105 Move X8, [X20+32]
	106 Compare X8, 0
	107 JumpIfEqual {577}
	108 Add X1, X8, 48
	109 Add X8, X31, 1128
	110 Add X0, X8, 184
	111 Move W2, 96
	112 Call 0x3EB2B30
	113 Move X1, [X27]
	114 Add X0, X31, 1424
	115 Call 0x249B614, X0
	116 Move X23, X0
	117 Compare X0, 0
	118 JumpIfEqual {578}
	119 Move X22, 0x9B8000
	120 Move X24, 0xA0A000
	121 Move X22, [X22+3608]
	122 Move X24, [X24+192]
	123 Move X8, [X23]
	124 Move X1, [X22]
	125 NotImplemented "Instruction LDRH not yet implemented."
	126 Compare X9, 0
	127 JumpIfEqual {134}
	128 Move X10, [X8+176]
	129 Add X10, X10, 8
	130 NotImplemented "Instruction LDUR not yet implemented."
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Subtract X9, X9, 1
	133 Add X10, X10, 16
	134 Move X0, X23
	135 Move W2, W31
	136 Call 0x1C5D788
	137 NotImplemented "Instruction LDRSW not yet implemented."
	138 Add X8, X8, X9
	139 Add X0, X8, 312
	140 Move X8, [X0]
	141 Move X1, [X0+8]
	142 Move X0, X23
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {178}
	148 Move X8, [X23]
	149 Move X1, [X24]
	150 NotImplemented "Instruction LDRH not yet implemented."
	151 Compare X9, 0
	152 JumpIfEqual {159}
	153 Move X10, [X8+176]
	154 Add X10, X10, 8
	155 NotImplemented "Instruction LDUR not yet implemented."
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Subtract X9, X9, 1
	158 Add X10, X10, 16
	159 Move X0, X23
	160 Move W2, W31
	161 Call 0x1C5D788
	162 NotImplemented "Instruction LDRSW not yet implemented."
	163 Add X8, X8, X9
	164 Add X0, X8, 312
	165 Move X8, [X0]
	166 Move X1, [X0+8]
	167 Move X0, X23
	168 NotImplemented "Instruction BLR not yet implemented."
	169 Compare X0, 0
	170 JumpIfEqual {565}
	171 Move W8, [X0+200]
	172 Move W9, W8
	173 ShiftRight W9, 1
	174 And W9, W9, 1
	175 And W8, W8, 0xFFFFFFF8
	176 Or W21, W9, W21
	177 Move [X0+200], W8
	178 Move X22, X31
	179 Move W24, 5
	180 Compare X23, 0
	181 JumpIfEqual {203}
	182 Move X8, [X23]
	183 Move X1, [X25]
	184 NotImplemented "Instruction LDRH not yet implemented."
	185 Compare X9, 0
	186 JumpIfEqual {193}
	187 Move X10, [X8+176]
	188 Add X10, X10, 8
	189 NotImplemented "Instruction LDUR not yet implemented."
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Subtract X9, X9, 1
	192 Add X10, X10, 16
	193 Move X0, X23
	194 Move W2, W31
	195 Call 0x1C5D788
	196 NotImplemented "Instruction LDRSW not yet implemented."
	197 Add X8, X8, X9
	198 Add X0, X8, 312
	199 Move X8, [X0]
	200 Move X1, [X0+8]
	201 Move X0, X23
	202 NotImplemented "Instruction BLR not yet implemented."
	203 Compare X22, 0
	204 JumpIfNotEqual {579}
	205 NotImplemented "Instruction CMP not yet implemented."
	206 And W21, W21, 1
	207 Compare W24, 0
	208 JumpIfNotEqual {519}
	209 Move X8, 0xA0A000
	210 Move X8, [X8+744]
	211 Move X1, [X8]
	212 Add X8, X31, 792
	213 Move X0, X20
	214 Call 0x249B584, X0
	215 Move V0, [X28]
	216 Move V1, [X28+16]
	217 Move [X31+89], V0
	218 Move [X31+90], V1
	219 Move W8, [X20+200]
	220 And W9, W8, 2
	221 And W8, W8, 0xFFFFFFF8
	222 Or W21, W21, W9
	223 Move [X20+200], W8
	224 NotImplemented "Instruction MOVI not yet implemented."
	225 Move [X31+1124], W31
	226 Move [X31+68], V0
	227 Move [X31+69], V0
	228 Move X8, [X20+96]
	229 Compare X8, 0
	230 JumpIfEqual {258}
	231 Add X0, X8, 64
	232 Add X8, X31, 792
	233 Move X1, X31
	234 Call UnmanagedMemory.Clone, X0
	235 Add X0, X31, 1456
	236 Add X1, X31, 792
	237 Move W2, 128
	238 Call 0x3EB2AC0
	239 Move X0, [X20+96]
	240 Compare X0, 0
	241 JumpIfEqual {574}
	242 Add X2, X31, 1088
	243 Add X3, X31, 1124
	244 Move W1, W21
	245 Move X4, X31
	246 Call InputActionState.PrepareForBindingReResolution, X0, X1, X2, X3
	247 Move X1, [X20+96]
	248 Add X0, X31, 1128
	249 Move W2, W21
	250 Move X3, X31
	251 Call InputBindingResolver.StartWithPreviousResolve, X0, X1, X2
	252 Move X8, [X20+96]
	253 Compare X8, 0
	254 JumpIfEqual {575}
	255 Add X0, X8, 64
	256 Move X1, X31
	257 Call UnmanagedMemory.Dispose, X0
	258 Move X1, [X27]
	259 Add X0, X31, 1424
	260 Call 0x249B614, X0
	261 Move X23, X0
	262 Compare X0, 0
	263 JumpIfEqual {571}
	264 Move X22, 0x9B8000
	265 Move X24, 0xA0A000
	266 Move X22, [X22+3608]
	267 Move X24, [X24+192]
	268 Move X8, [X23]
	269 Move X1, [X22]
	270 NotImplemented "Instruction LDRH not yet implemented."
	271 Compare X9, 0
	272 JumpIfEqual {279}
	273 Move X10, [X8+176]
	274 Add X10, X10, 8
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Subtract X9, X9, 1
	278 Add X10, X10, 16
	279 Move X0, X23
	280 Move W2, W31
	281 Call 0x1C5D788
	282 NotImplemented "Instruction LDRSW not yet implemented."
	283 Add X8, X8, X9
	284 Add X0, X8, 312
	285 Move X8, [X0]
	286 Move X1, [X0+8]
	287 Move X0, X23
	288 NotImplemented "Instruction BLR not yet implemented."
	289 Move TEMP, X0
	290 And TEMP, TEMP, 1
	291 Compare TEMP, 1
	292 JumpIfNotEqual {318}
	293 Move X8, [X23]
	294 Move X1, [X24]
	295 NotImplemented "Instruction LDRH not yet implemented."
	296 Compare X9, 0
	297 JumpIfEqual {304}
	298 Move X10, [X8+176]
	299 Add X10, X10, 8
	300 NotImplemented "Instruction LDUR not yet implemented."
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Subtract X9, X9, 1
	303 Add X10, X10, 16
	304 Move X0, X23
	305 Move W2, W31
	306 Call 0x1C5D788
	307 NotImplemented "Instruction LDRSW not yet implemented."
	308 Add X8, X8, X9
	309 Add X0, X8, 312
	310 Move X8, [X0]
	311 Move X1, [X0+8]
	312 Move X0, X23
	313 NotImplemented "Instruction BLR not yet implemented."
	314 Move X1, X0
	315 Add X0, X31, 1128
	316 Move X2, X31
	317 Call InputBindingResolver.AddActionMap, X0, X1
	318 Move X22, X31
	319 Move W24, 9
	320 Compare X23, 0
	321 JumpIfEqual {343}
	322 Move X8, [X23]
	323 Move X1, [X25]
	324 NotImplemented "Instruction LDRH not yet implemented."
	325 Compare X9, 0
	326 JumpIfEqual {333}
	327 Move X10, [X8+176]
	328 Add X10, X10, 8
	329 NotImplemented "Instruction LDUR not yet implemented."
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Subtract X9, X9, 1
	332 Add X10, X10, 16
	333 Move X0, X23
	334 Move W2, W31
	335 Call 0x1C5D788
	336 NotImplemented "Instruction LDRSW not yet implemented."
	337 Add X8, X8, X9
	338 Add X0, X8, 312
	339 Move X8, [X0]
	340 Move X1, [X0+8]
	341 Move X0, X23
	342 NotImplemented "Instruction BLR not yet implemented."
	343 Compare X22, 0
	344 JumpIfNotEqual {572}
	345 NotImplemented "Instruction CMP not yet implemented."
	346 Compare W24, 0
	347 JumpIfNotEqual {519}
	348 Move X22, [X20+96]
	349 Compare X22, 0
	350 JumpIfEqual {359}
	351 Add X0, X31, 200
	352 Add X1, X31, 1128
	353 Move W2, 296
	354 Call 0x3EB2AC0
	355 Add X1, X31, 200
	356 Move X0, X22
	357 Move X2, X31
	358 Call InputActionState.ClaimDataFrom, X0, X1
	359 Move X8, 0xA0A000
	360 Move X8, [X8+728]
	361 Move X0, [X8]
	362 Call 0x1C17F10
	363 Move X22, X0
	364 Move X1, X31
	365 Call InputActionState..ctor, X0
	366 Add X0, X31, 792
	367 Add X1, X31, 1128
	368 Move W2, 296
	369 Move [X20+96], X22
	370 Call 0x3EB2AC0
	371 Compare X22, 0
	372 JumpIfEqual {585}
	373 Add X0, X31, 496
	374 Add X1, X31, 792
	375 Move W2, 296
	376 Call 0x3EB2AC0
	377 Add X1, X31, 496
	378 Move X0, X22
	379 Move X2, X31
	380 Call InputActionState.Initialize, X0, X1
	381 Move X0, [X26]
	382 Move X22, [X20+32]
	383 Move W8, [X0+224]
	384 Compare W8, 0
	385 JumpIfNotEqual {387}
	386 Call 0x1C17DFC
	387 Move X0, X22
	388 Move X1, X31
	389 Move X2, X31
	390 Call Object.op_Inequality, X0, X1
	391 Move TEMP, X0
	392 And TEMP, TEMP, 1
	393 Compare TEMP, 1
	394 JumpIfNotEqual {455}
	395 Move X1, [X27]
	396 Add X0, X31, 1424
	397 Call 0x249B614, X0
	398 Move X23, X0
	399 Compare X0, 0
	400 JumpIfEqual {582}
	401 Move X22, 0x9B8000
	402 Move X24, 0xA0A000
	403 Move X22, [X22+3608]
	404 Move X24, [X24+192]
	405 Move X8, [X23]
	406 Move X1, [X22]
	407 NotImplemented "Instruction LDRH not yet implemented."
	408 Compare X9, 0
	409 JumpIfEqual {416}
	410 Move X10, [X8+176]
	411 Add X10, X10, 8
	412 NotImplemented "Instruction LDUR not yet implemented."
	413 NotImplemented "Instruction CMP not yet implemented."
	414 Subtract X9, X9, 1
	415 Add X10, X10, 16
	416 Move X0, X23
	417 Move W2, W31
	418 Call 0x1C5D788
	419 NotImplemented "Instruction LDRSW not yet implemented."
	420 Add X8, X8, X9
	421 Add X0, X8, 312
	422 Move X8, [X0]
	423 Move X1, [X0+8]
	424 Move X0, X23
	425 NotImplemented "Instruction BLR not yet implemented."
	426 Move TEMP, X0
	427 And TEMP, TEMP, 1
	428 Compare TEMP, 1
	429 JumpIfNotEqual {456}
	430 Move X8, [X23]
	431 Move X1, [X24]
	432 NotImplemented "Instruction LDRH not yet implemented."
	433 Compare X9, 0
	434 JumpIfEqual {441}
	435 Move X10, [X8+176]
	436 Add X10, X10, 8
	437 NotImplemented "Instruction LDUR not yet implemented."
	438 NotImplemented "Instruction CMP not yet implemented."
	439 Subtract X9, X9, 1
	440 Add X10, X10, 16
	441 Move X0, X23
	442 Move W2, W31
	443 Call 0x1C5D788
	444 NotImplemented "Instruction LDRSW not yet implemented."
	445 Add X8, X8, X9
	446 Add X0, X8, 312
	447 Move X8, [X0]
	448 Move X1, [X0+8]
	449 Move X0, X23
	450 NotImplemented "Instruction BLR not yet implemented."
	451 Compare X0, 0
	452 JumpIfEqual {566}
	453 Move X8, [X20+96]
	454 Move [X0+96], X8
	455 Move X20, [X20+96]
	456 Move X22, X31
	457 Move W24, 15
	458 Compare X23, 0
	459 JumpIfEqual {481}
	460 Move X8, [X23]
	461 Move X1, [X25]
	462 NotImplemented "Instruction LDRH not yet implemented."
	463 Compare X9, 0
	464 JumpIfEqual {471}
	465 Move X10, [X8+176]
	466 Add X10, X10, 8
	467 NotImplemented "Instruction LDUR not yet implemented."
	468 NotImplemented "Instruction CMP not yet implemented."
	469 Subtract X9, X9, 1
	470 Add X10, X10, 16
	471 Move X0, X23
	472 Move W2, W31
	473 Call 0x1C5D788
	474 NotImplemented "Instruction LDRSW not yet implemented."
	475 Add X8, X8, X9
	476 Add X0, X8, 312
	477 Move X8, [X0]
	478 Move X1, [X0+8]
	479 Move X0, X23
	480 NotImplemented "Instruction BLR not yet implemented."
	481 Compare X22, 0
	482 JumpIfNotEqual {583}
	483 NotImplemented "Instruction CMP not yet implemented."
	484 Compare W24, 0
	485 JumpIfNotEqual {519}
	486 Move X8, [X20+32]
	487 Compare X8, 0
	488 JumpIfEqual {586}
	489 Move X20, [X20+96]
	490 Move [X8+40], X20
	491 Move W22, [X31+1124]
	492 Add X0, X31, 792
	493 Add X1, X31, 1456
	494 Move W2, 128
	495 Call 0x3EB2AC0
	496 Move V0, [X31+68]
	497 Move V1, [X31+69]
	498 Move [X31+160], V0
	499 Move [X31+168], V1
	500 Compare X20, 0
	501 JumpIfEqual {581}
	502 NotImplemented "Instruction CMP not yet implemented."
	503 Add X0, X31, 32
	504 Add X1, X31, 792
	505 Move W2, 128
	506 NotImplemented "Instruction CSET not yet implemented."
	507 Call 0x3EB2AC0
	508 Move V0, [X31+160]
	509 Move V1, [X31+176]
	510 Move [X31], V0
	511 Move [X31+8], V1
	512 Add X2, X31, 32
	513 Add X3, X31, 0
	514 Move X0, X20
	515 Move W1, W22
	516 Move W4, W21
	517 Move X5, X31
	518 Call InputActionState.FinishBindingResolution, X0, X1, X2, X3, X4
	519 Move X21, X31
	520 Add X0, X31, 1456
	521 Move X1, X31
	522 Call UnmanagedMemory.Dispose, X0
	523 Compare X21, 0
	524 JumpIfNotEqual {569}
	525 Move X20, X31
	526 Compare X19, 0
	527 JumpIfEqual {549}
	528 Move X8, [X19]
	529 Move X1, [X25]
	530 NotImplemented "Instruction LDRH not yet implemented."
	531 Compare X9, 0
	532 JumpIfEqual {539}
	533 Move X10, [X8+176]
	534 Add X10, X10, 8
	535 NotImplemented "Instruction LDUR not yet implemented."
	536 NotImplemented "Instruction CMP not yet implemented."
	537 Subtract X9, X9, 1
	538 Add X10, X10, 16
	539 Move X0, X19
	540 Move W2, W31
	541 Call 0x1C5D788
	542 NotImplemented "Instruction LDRSW not yet implemented."
	543 Add X8, X8, X9
	544 Add X0, X8, 312
	545 Move X8, [X0]
	546 Move X1, [X0+8]
	547 Move X0, X19
	548 NotImplemented "Instruction BLR not yet implemented."
	549 Compare X20, 0
	550 JumpIfNotEqual {567}
	551 Add X31, X31, 1584
	552 Move X20, [X31+80]
	553 Move X19, [X31+88]
	554 Move X22, [X31+64]
	555 Move X21, [X31+72]
	556 Move X24, [X31+48]
	557 Move X23, [X31+56]
	558 Move X26, [X31+32]
	559 Move X25, [X31+40]
	560 Move X28, [X31+16]
	561 Move X27, [X31+24]
	562 Move X29, [X31+96]
	563 Move X30, [X31+104]
	564 Return 
	565 Call 0x1C17F20
	566 Call 0x1C17F20
	567 Move X0, X20
	568 Call 0x1C17F18
	569 Move X0, X21
	570 Call 0x1C17F18
	571 Call 0x1C17F20
	572 Move X0, X22
	573 Call 0x1C17F18
	574 Call 0x1C17F20
	575 Call 0x1C17F20
	576 Call 0x1C17F20
	577 Call 0x1C17F20
	578 Call 0x1C17F20
	579 Move X0, X22
	580 Call 0x1C17F18
	581 Call 0x1C17F20
	582 Call 0x1C17F20
	583 Move X0, X22
	584 Call 0x1C17F18
	585 Call 0x1C17F20
	586 Call 0x1C17F20
	587 Move X20, X1
	588 Move X24, X0
	589 Move X24, X0
	590 Move W20, W1
	591 Move X24, X0
	592 Move W8, 1
	593 Move W20, W1
	594 Move X24, X0
	595 NotImplemented "Instruction CMP not yet implemented."
	596 Move X0, X24
	597 Call 0x3EB2AD0
	598 Move X22, [X0]
	599 Call 0x3EB2AE0
	600 Move W24, W31
	601 Compare X23, 0
	602 JumpIfNotEqual {460}
	603 Move X22, X31
	604 Move W20, W1
	605 Compare X23, 0
	606 JumpIfEqual {628}
	607 Move X8, [X23]
	608 Move X1, [X25]
	609 NotImplemented "Instruction LDRH not yet implemented."
	610 Compare X9, 0
	611 JumpIfEqual {618}
	612 Move X10, [X8+176]
	613 Add X10, X10, 8
	614 NotImplemented "Instruction LDUR not yet implemented."
	615 NotImplemented "Instruction CMP not yet implemented."
	616 Subtract X9, X9, 1
	617 Add X10, X10, 16
	618 Move X0, X23
	619 Move W2, W31
	620 Call 0x1C5D788
	621 NotImplemented "Instruction LDRSW not yet implemented."
	622 Add X8, X8, X9
	623 Add X0, X8, 312
	624 Move X8, [X0]
	625 Move X1, [X0+8]
	626 Move X0, X23
	627 NotImplemented "Instruction BLR not yet implemented."
	628 Compare X22, 0
	629 JumpIfEqual {708}
	630 Move X0, X22
	631 Call 0x1C17F18
	632 Move X24, X0
	633 Move X24, X0
	634 NotImplemented "Instruction CMP not yet implemented."
	635 Move X0, X24
	636 Call 0x3EB2AD0
	637 Move X22, [X0]
	638 Call 0x3EB2AE0
	639 Move W24, W31
	640 Compare X23, 0
	641 JumpIfNotEqual {182}
	642 Move X22, X31
	643 Move W20, W1
	644 Compare X23, 0
	645 JumpIfEqual {667}
	646 Move X8, [X23]
	647 Move X1, [X25]
	648 NotImplemented "Instruction LDRH not yet implemented."
	649 Compare X9, 0
	650 JumpIfEqual {657}
	651 Move X10, [X8+176]
	652 Add X10, X10, 8
	653 NotImplemented "Instruction LDUR not yet implemented."
	654 NotImplemented "Instruction CMP not yet implemented."
	655 Subtract X9, X9, 1
	656 Add X10, X10, 16
	657 Move X0, X23
	658 Move W2, W31
	659 Call 0x1C5D788
	660 NotImplemented "Instruction LDRSW not yet implemented."
	661 Add X8, X8, X9
	662 Add X0, X8, 312
	663 Move X8, [X0]
	664 Move X1, [X0+8]
	665 Move X0, X23
	666 NotImplemented "Instruction BLR not yet implemented."
	667 Compare X22, 0
	668 JumpIfEqual {708}
	669 Move X0, X22
	670 Call 0x1C17F18
	671 Move X24, X0
	672 Move X24, X0
	673 NotImplemented "Instruction CMP not yet implemented."
	674 Move X0, X24
	675 Call 0x3EB2AD0
	676 Move X22, [X0]
	677 Call 0x3EB2AE0
	678 Move W24, W31
	679 Compare X23, 0
	680 JumpIfNotEqual {322}
	681 Move X22, X31
	682 Move W20, W1
	683 Compare X23, 0
	684 JumpIfEqual {706}
	685 Move X8, [X23]
	686 Move X1, [X25]
	687 NotImplemented "Instruction LDRH not yet implemented."
	688 Compare X9, 0
	689 JumpIfEqual {696}
	690 Move X10, [X8+176]
	691 Add X10, X10, 8
	692 NotImplemented "Instruction LDUR not yet implemented."
	693 NotImplemented "Instruction CMP not yet implemented."
	694 Subtract X9, X9, 1
	695 Add X10, X10, 16
	696 Move X0, X23
	697 Move W2, W31
	698 Call 0x1C5D788
	699 NotImplemented "Instruction LDRSW not yet implemented."
	700 Add X8, X8, X9
	701 Add X0, X8, 312
	702 Move X8, [X0]
	703 Move X1, [X0+8]
	704 Move X0, X23
	705 NotImplemented "Instruction BLR not yet implemented."
	706 Compare X22, 0
	707 JumpIfNotEqual {728}
	708 NotImplemented "Instruction CMP not yet implemented."
	709 Move X0, X24
	710 Call 0x3EB2AD0
	711 Move X21, [X0]
	712 Call 0x3EB2AE0
	713 Move X21, X31
	714 Add X0, X31, 1456
	715 Move X1, X31
	716 Call UnmanagedMemory.Dispose, X0
	717 Compare X21, 0
	718 JumpIfNotEqual {726}
	719 Move W8, 1
	720 NotImplemented "Instruction CMP not yet implemented."
	721 Move X0, X24
	722 Call 0x3EB2AD0
	723 Move X20, [X0]
	724 Call 0x3EB2AE0
	725 Move X20, X31
	726 Move X0, X21
	727 Call 0x1C17F18
	728 Move X0, X22
	729 Call 0x1C17F18
	730 Move X24, X0
	731 Move X24, X0
	732 Move W20, W1
	733 Move X24, X0
	734 Compare X19, 0
	735 JumpIfEqual {757}
	736 Move X8, [X19]
	737 Move X1, [X25]
	738 NotImplemented "Instruction LDRH not yet implemented."
	739 Compare X9, 0
	740 JumpIfEqual {747}
	741 Move X10, [X8+176]
	742 Add X10, X10, 8
	743 NotImplemented "Instruction LDUR not yet implemented."
	744 NotImplemented "Instruction CMP not yet implemented."
	745 Subtract X9, X9, 1
	746 Add X10, X10, 16
	747 Move X0, X19
	748 Move W2, W31
	749 Call 0x1C5D788
	750 NotImplemented "Instruction LDRSW not yet implemented."
	751 Add X8, X8, X9
	752 Add X0, X8, 312
	753 Move X8, [X0]
	754 Move X1, [X0+8]
	755 Move X0, X19
	756 NotImplemented "Instruction BLR not yet implemented."
	757 Compare X20, 0
	758 JumpIfNotEqual {761}
	759 Move X0, X24
	760 Call 0x1D2D690
	761 Move X0, X20
	762 Call 0x1C17F18
	763 Call 0x1991590

Method: System.Int32 FindBinding(UnityEngine.InputSystem.InputBinding mask, out UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x037388AC BL 0x2BC4968
	0x037388B0 CBNZ X21, 0x37388BC
	0x037388B4 MOV X0, X20
	0x037388B8 BL 0x1D2C690
	0x037388BC MOV X0, X21
	0x037388C0 BL 0x1C16F18
	0x037388C4 BL 0x1990590
	0x037388C8 STP X30, X21, [X31 - 0x20]!
	0x037388CC STP X20, X19, [X31 + 0x10]
	0x037388D0 ADRP X21, 0xCA8000
	0x037388D4 ADRP X20, 0xA0D000
	0x037388D8 LDRB W8, [X21 + 0xCFE]
	0x037388DC LDR X20, [X20 + 0x100]
	0x037388E0 MOV X19, X0
	0x037388E4 TBNZ X8, 0x0, 0x37388FC
	0x037388E8 ADRP X0, 0xA0D000
	0x037388EC LDR X0, [X0 + 0x100]
	0x037388F0 BL 0x1C16CF4
	0x037388F4 MOVZ W8, 0x1
	0x037388F8 STRB W8, [X21 + 0xCFE]
	0x037388FC LDR X0, [X19 + 0x18]
	0x03738900 LDR X1, [X20]
	0x03738904 BL 0x217B258
	0x03738908 CMP W0, 0x1
	0x0373890C B.LT 0x3738934
	0x03738910 LDR X8, [X19 + 0x18]
	0x03738914 CBZ X8, 0x3738944
	0x03738918 LDR W9, [X8 + 0x18]
	0x0373891C CBZ W9, 0x3738948
	0x03738920 LDR X0, [X8 + 0x20]
	0x03738924 CBZ X0, 0x3738944
	0x03738928 LDP X20, X19, [X31 + 0x10]
	0x0373892C LDP X30, X21, [X31], #0x20
	0x03738930 B 0x373894C
	0x03738934 STR X31, [X19 + 0x28]
	0x03738938 LDP X20, X19, [X31 + 0x10]
	0x0373893C LDP X30, X21, [X31], #0x20
	0x03738940 RET
	0x03738944 BL 0x1C16F20
	0x03738948 BL 0x1C16F28
	0x0373894C SUB X31, X31, 0x50
	0x03738950 STP X30, X21, [X31 + 0x30]
	0x03738954 STP X20, X19, [X31 + 0x40]
	0x03738958 ADRP X21, 0xCA8000
	0x0373895C ADRP X20, 0x9BB000
	0x03738960 LDRB W8, [X21 + 0xD18]
	0x03738964 LDR X20, [X20 + 0x598]
	0x03738968 MOV X19, X0
	0x0373896C TBNZ X8, 0x0, 0x37389B4
	0x03738970 ADRP X0, 0xA0D000
	0x03738974 LDR X0, [X0 + 0x18]
	0x03738978 BL 0x1C16CF4
	0x0373897C ADRP X0, 0xA0D000
	0x03738980 LDR X0, [X0 + 0x20]
	0x03738984 BL 0x1C16CF4
	0x03738988 ADRP X0, 0xA0D000

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+192], X30
	003 Move [X31+208], X22
	004 Move [X31+216], X21
	005 Move [X31+224], X20
	006 Move [X31+232], X19
	007 Move X22, 0xCA9000
	008 Move W8, [X22+3355]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xA0E000
	017 Move X0, [X0+264]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3355], W8
	021 Add X0, X31, 88
	022 Move W2, 88
	023 Move X1, X21
	024 Move [X31+176], X31
	025 Move [X31+184], X31
	026 Call 0x3EB2AC0
	027 Add X1, X31, 88
	028 Move X0, X20
	029 Call InputActionMap.FindBindingRelativeToMap, X0, X1
	030 Add W31, W0, 1
	031 Move W21, W0
	032 Move X0, [X20+80]
	033 Compare X0, 0
	034 JumpIfEqual {37}
	035 Move [X19], X0
	036 Move [X19], X31
	037 Move X0, X20
	038 Call InputActionMap.get_bindings, X0
	039 Move X8, 0xA0E000
	040 Move X8, [X8+264]
	041 Move [X31+176], X0
	042 Move [X31+184], X1
	043 Add X0, X31, 176
	044 Move W1, W21
	045 Move X2, [X8]
	046 Add X8, X31, 0
	047 Call 0x24FD334, X0, X1
	048 Move X1, [X31+48]
	049 Move X0, X20
	050 Move W2, W31
	051 Call InputActionMap.FindAction, X0, X1, X2
	052 Move [X19], X0
	053 Compare X0, 0
	054 JumpIfEqual {64}
	055 Move W1, W21
	056 Call InputAction.BindingIndexOnMapToBindingIndexOnAction, X0, X1
	057 Move X20, [X31+224]
	058 Move X19, [X31+232]
	059 Move X22, [X31+208]
	060 Move X21, [X31+216]
	061 Move X30, [X31+192]
	062 Add X31, X31, 240
	063 Return X0
	064 Call 0x1C17F20

Method: System.Int32 FindBindingRelativeToMap(UnityEngine.InputSystem.InputBinding mask)

Disassembly:
	0x0373D05C CBNZ X20, 0x373D07C
	0x0373D060 STP X31, X31, [X19]
	0x0373D064 STR X31, [X19 + 0x10]
	0x0373D068 ADD X31, X31, 0x260
	0x0373D06C LDP X20, X19, [X31 + 0x20]
	0x0373D070 LDP X22, X21, [X31 + 0x10]
	0x0373D074 LDP X29, X30, [X31], #0x30
	0x0373D078 RET
	0x0373D07C MOV X0, X20
	0x0373D080 BL 0x1C16F18
	0x0373D084 CBNZ X20, 0x373D08C
	0x0373D088 BL 0x1D2C690
	0x0373D08C MOV X0, X20
	0x0373D090 BL 0x1C16F18
	0x0373D094 BL 0x1990590
	0x0373D098 STR X30, [X31 - 0x20]!
	0x0373D09C STP X20, X19, [X31 + 0x10]
	0x0373D0A0 MOV X8, X2
	0x0373D0A4 MOV X20, X0
	0x0373D0A8 STR X1, [X0], #0x8
	0x0373D0AC MOVZ W2, 0x78
	0x0373D0B0 MOV X1, X8
	0x0373D0B4 MOV W19, W3
	0x0373D0B8 BL 0x3EB1B30
	0x0373D0BC STR W19, [X20 + 0x80]
	0x0373D0C0 LDP X20, X19, [X31 + 0x10]
	0x0373D0C4 LDR X30, [X31], #0x20
	0x0373D0C8 RET
	0x0373D0CC SUB X31, X31, 0xA0
	0x0373D0D0 STP X30, X21, [X31 + 0x80]
	0x0373D0D4 STP X20, X19, [X31 + 0x90]
	0x0373D0D8 LDR X21, [X0]
	0x0373D0DC MOV X19, X0
	0x0373D0E0 ADD X1, X0, 0x8
	0x0373D0E4 ADD X0, X31, 0x8
	0x0373D0E8 MOVZ W2, 0x78
	0x0373D0EC MOV X20, X8
	0x0373D0F0 BL 0x3EB1AC0
	0x0373D0F4 LDR W19, [X19 + 0x80]
	0x0373D0F8 MOVZ W2, 0xA8
	0x0373D0FC MOV X0, X20
	0x0373D100 MOV W1, W31
	0x0373D104 BL 0x3EB1B10
	0x0373D108 ADD X2, X31, 0x8
	0x0373D10C MOV X0, X20
	0x0373D110 MOV X1, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xCA4000
	008 Move X21, 0xA08000
	009 Move W8, [X22+3356]
	010 Move X21, [X21+4048]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xA08000
	018 Move X0, [X0+4048]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3356], W8
	022 Move X20, [X20+48]
	023 Move X1, [X21]
	024 Move X0, X20
	025 Call 0x217C240, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Compare X20, 0
	028 JumpIfEqual {58}
	029 Move X21, X31
	030 Move W23, W0
	031 Add X22, X20, 32
	032 Move W8, [X20+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X1, X22
	036 Move W2, W31
	037 Move X3, X31
	038 Call InputBinding.Matches, X0, X1, X2
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {49}
	043 Add X21, X21, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X22, X22, 88
	046 Move TEMP, 0
	047 Not TEMP
	048 Move W21, TEMP
	049 Move W0, W21
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Return X0
	057 Call 0x1C17F28
	058 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionMap[] FromJson(System.String json)

Disassembly:
	0x0373D114 MOV W3, W19
	0x0373D118 BL 0x3742318
	0x0373D11C LDP X20, X19, [X31 + 0x90]
	0x0373D120 LDP X30, X21, [X31 + 0x80]
	0x0373D124 ADD X31, X31, 0xA0
	0x0373D128 RET
	0x0373D12C LDP X9, X10, [X0 + 0x98]
	0x0373D130 LDR W11, [X0 + 0xC]
	0x0373D134 STP X9, X10, [X8]
	0x0373D138 STP W11, W31, [X8 + 0x10]
	0x0373D13C RET
	0x0373D140 STP X30, X19, [X31 - 0x10]!
	0x0373D144 MOV X19, X0
	0x0373D148 LDRB W8, [X19 + 0x90]
	0x0373D14C CBZ W8, 0x373D15C
	0x0373D150 MOV X0, X19
	0x0373D154 BL 0x3742A0C
	0x0373D158 TBNZ X0, 0x0, 0x373D1D8
	0x0373D15C LDRB W8, [X19 + 0x91]
	0x0373D160 CBZ W8, 0x373D170
	0x0373D164 MOV X0, X19
	0x0373D168 BL 0x3742B64
	0x0373D16C TBNZ X0, 0x0, 0x373D1D8
	0x0373D170 MOV X0, X19
	0x0373D174 BL 0x3742850
	0x0373D178 TBZ X0, 0x0, 0x373D1E0
	0x0373D17C LDRB W8, [X19 + 0x92]
	0x0373D180 CBZ W8, 0x373D148
	0x0373D184 LDRB W8, [X19 + 0x93]
	0x0373D188 CBZ W8, 0x373D148
	0x0373D18C LDR X0, [X19]
	0x0373D190 CBZ X0, 0x373D1EC
	0x0373D194 LDR W1, [X19 + 0xC]
	0x0373D198 MOV X2, X31
	0x0373D19C BL 0x374FE58
	0x0373D1A0 MOV X1, X31
	0x0373D1A4 BL 0x374AB68
	0x0373D1A8 LDR X8, [X19]
	0x0373D1AC CBZ X8, 0x373D1EC
	0x0373D1B0 LDR X8, [X8 + 0x30]
	0x0373D1B4 CBZ X8, 0x373D1EC
	0x0373D1B8 LDR W9, [X8 + 0x18]
	0x0373D1BC CMP W0, W9

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xCA4000
	006 Move W8, [X20+3357]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA09000
	013 Move X0, [X0+776]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3357], W8
	017 Compare X19, 0
	018 JumpIfEqual {33}
	019 Move X8, 0xA09000
	020 Move X8, [X8+776]
	021 Move X0, X19
	022 Move X1, [X8]
	023 Call JsonUtility.FromJson, X0
	024 Move [X31], X0
	025 Move [X31+8], X1
	026 Add X0, X31, 0
	027 Call ReadFileJson.ToMaps, X0
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Add X31, X31, 48
	032 Return X0
	033 Move X0, 0x9BC000
	034 Move X0, [X0+1320]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X19, X0
	038 Move X0, 0xA09000
	039 Move X0, [X0+216]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Move X2, X31
	044 Call ArgumentNullException..ctor, X0, X1
	045 Move X0, 0xA09000
	046 Move X0, [X0+784]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Call 0x1C17DEC

Method: System.String ToJson(System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.InputActionMap> maps)

Disassembly:
	0x0373D1C0 B.CS 0x373D1F0
	0x0373D1C4 ADD X8, X8, W0, 0x3, SXTW
	0x0373D1C8 LDR X1, [X8 + 0x20]
	0x0373D1CC MOV X0, X19
	0x0373D1D0 BL 0x3742A7C
	0x0373D1D4 TBZ X0, 0x0, 0x373D148
	0x0373D1D8 MOVZ W0, 0x1
	0x0373D1DC B 0x373D1E4
	0x0373D1E0 MOV W0, W31
	0x0373D1E4 LDP X30, X19, [X31], #0x10
	0x0373D1E8 RET
	0x0373D1EC BL 0x1C16F20
	0x0373D1F0 BL 0x1C16F28
	0x0373D1F4 SUB X31, X31, 0x1C0
	0x0373D1F8 STR X29, [X31 + 0x180]
	0x0373D1FC STP X30, X23, [X31 + 0x190]
	0x0373D200 STP X22, X21, [X31 + 0x1A0]
	0x0373D204 STP X20, X19, [X31 + 0x1B0]
	0x0373D208 ADRP X23, 0xCA3000
	0x0373D20C LDRB W9, [X23 + 0xD32]
	0x0373D210 MOV W22, W2
	0x0373D214 MOV X20, X1
	0x0373D218 MOV X21, X0
	0x0373D21C MOV X19, X8
	0x0373D220 TBNZ X9, 0x0, 0x373D238
	0x0373D224 ADRP X0, 0xA08000
	0x0373D228 LDR X0, [X0 + 0x108]
	0x0373D22C BL 0x1C16CF4
	0x0373D230 MOVZ W8, 0x1
	0x0373D234 STRB W8, [X23 + 0xD32]
	0x0373D238 MOVI V0.2D, 0x0
	0x0373D23C STR X31, [X31 + 0x100]
	0x0373D240 STP V0, V0, [X31 + 0xE0]
	0x0373D244 STP V0, V0, [X31 + 0xC0]
	0x0373D248 STR V0, [X31 + 0xB]
	0x0373D24C CBZ X21, 0x373D34C
	0x0373D250 MOV X0, X20
	0x0373D254 MOV X1, X31
	0x0373D258 BL 0x32277A8
	0x0373D25C TBNZ X0, 0x0, 0x373D36C
	0x0373D260 TBNZ X22, 0x1F, 0x373D3A0
	0x0373D264 MOV X0, X21
	0x0373D268 MOV W1, W22
	0x0373D26C BL 0x3735A88
	0x0373D270 MOVI V0.2D, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xCA4000
	005 Move W8, [X20+3358]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA09000
	012 Move X0, [X0+792]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3358], W8
	016 Compare X19, 0
	017 JumpIfEqual {34}
	018 Move X20, 0xA09000
	019 Move X20, [X20+792]
	020 Move X0, X19
	021 Call WriteFileJson.FromMaps, X0
	022 Move X8, [X20]
	023 Move [X31+8], X0
	024 Add X1, X31, 8
	025 Move X0, X8
	026 Call 0x1C17E04
	027 Move W1, 1
	028 Move X2, X31
	029 Call JsonUtility.ToJson, X0, X1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return X0
	034 Move X0, 0x9BC000
	035 Move X0, [X0+1320]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0xA09000
	040 Move X0, [X0+800]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X19
	044 Move X2, X31
	045 Call ArgumentNullException..ctor, X0, X1
	046 Move X0, 0xA09000
	047 Move X0, [X0+808]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call 0x1C17DEC

Method: System.String ToJson()

Disassembly:
	0x0373D274 STP V0, V0, [X31 + 0x120]
	0x0373D278 STP V0, V0, [X31 + 0x140]
	0x0373D27C STR V0, [X31 + 0x16]
	0x0373D280 STR X31, [X31 + 0x170]
	0x0373D284 LDR X8, [X21 + 0xC8]
	0x0373D288 MOV W22, W0
	0x0373D28C CBNZ X8, 0x373D2A0
	0x0373D290 MOV X0, X21
	0x0373D294 BL 0x373572C
	0x0373D298 LDR X8, [X21 + 0xC8]
	0x0373D29C CBZ X8, 0x373D3E8
	0x0373D2A0 ADRP X23, 0xA08000
	0x0373D2A4 LDR X23, [X23 + 0x108]
	0x0373D2A8 MOV X0, X8
	0x0373D2AC BL 0x373A0A8
	0x0373D2B0 LDR X2, [X23]
	0x0373D2B4 STP X0, X1, [X31 + 0x110]
	0x0373D2B8 ADD X8, X31, 0x58
	0x0373D2BC ADD X0, X31, 0x110
	0x0373D2C0 MOV W1, W22
	0x0373D2C4 BL 0x24FC334
	0x0373D2C8 ADD X0, X31, 0xB0
	0x0373D2CC ADD X1, X31, 0x58
	0x0373D2D0 MOVZ W2, 0x58
	0x0373D2D4 BL 0x3EB1AC0
	0x0373D2D8 ADD X0, X31, 0xB0
	0x0373D2DC MOV X1, X31
	0x0373D2E0 BL 0x37522EC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCA4000
	007 Move X20, 0xA09000
	008 Move W8, [X21+3359]
	009 Move X20, [X20+792]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA09000
	016 Move X0, [X0+792]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3359], W8
	020 Move X0, X19
	021 Call WriteFileJson.FromMap, X0
	022 Move X8, [X20]
	023 Move [X31+8], X0
	024 Add X1, X31, 8
	025 Move X0, X8
	026 Call 0x1C17E04
	027 Move W1, 1
	028 Move X2, X31
	029 Call JsonUtility.ToJson, X0, X1
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Add X31, X31, 48
	035 Return X0

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x0373D370 LDR X0, [X0 + 0x528]

ISIL:
	001 Return 

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x0373D374 BL 0x1C16D08
	0x0373D378 BL 0x1C16F10
	0x0373D37C MOV X19, X0
	0x0373D380 ADRP X0, 0x9BE000
	0x0373D384 LDR X0, [X0 + 0x588]
	0x0373D388 BL 0x1C16D08
	0x0373D38C MOV X1, X0
	0x0373D390 MOV X0, X19
	0x0373D394 MOV X2, X31
	0x0373D398 BL 0x330E100
	0x0373D39C B 0x373D3D0
	0x0373D3A0 ADRP X0, 0x9BE000
	0x0373D3A4 LDR X0, [X0 + 0x760]
	0x0373D3A8 BL 0x1C16D08
	0x0373D3AC BL 0x1C16F10
	0x0373D3B0 MOV X19, X0
	0x0373D3B4 ADRP X0, 0xA08000
	0x0373D3B8 LDR X0, [X0 + 0x378]
	0x0373D3BC BL 0x1C16D08
	0x0373D3C0 MOV X1, X0
	0x0373D3C4 MOV X0, X19
	0x0373D3C8 MOV X2, X31
	0x0373D3CC BL 0x3316014
	0x0373D3D0 ADRP X0, 0xA08000
	0x0373D3D4 LDR X0, [X0 + 0x380]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+40]
	003 Move TEMP, 0
	004 Not TEMP
	005 Move W9, TEMP
	006 Move [X0+96], X31
	007 Move [X0+88], W9
	008 Compare X8, 0
	009 JumpIfEqual {20}
	010 Move W9, [X8+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W10, W31
	013 Add X11, X8, W10
	014 Move X11, [X11+32]
	015 Compare X11, 0
	016 JumpIfEqual {29}
	017 Add W10, W10, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move [X11+200], X0
	020 Move W8, [X0+200]
	021 Move [X0+56], X31
	022 Move [X0+64], X31
	023 Move [X0+312], X31
	024 And W8, W8, 0xFFFFFFF3
	025 Move [X0+200], W8
	026 Move X30, [X31+16]
	027 Call InputActionMap.ClearActionLookupTable, X0
	028 Return 
	029 Call 0x1C17F20

