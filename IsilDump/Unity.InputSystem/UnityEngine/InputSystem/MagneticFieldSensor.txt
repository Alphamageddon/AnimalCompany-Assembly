Type: UnityEngine.InputSystem.MagneticFieldSensor

Method: UnityEngine.InputSystem.Controls.Vector3Control get_magneticField()

Disassembly:
	0x037BFC44 STP X24, X23, [X31 + 0x80]
	0x037BFC48 STP X22, X21, [X31 + 0x90]

ISIL:
	001 Move X0, [X0+368]
	002 Return X0

Method: System.Void set_magneticField(UnityEngine.InputSystem.Controls.Vector3Control value)

Disassembly:
	0x037BFC4C STP X20, X19, [X31 + 0xA0]
	0x037BFC50 ADRP X22, 0xC22000

ISIL:
	001 Move [X0+368], X1
	002 Return 

Method: UnityEngine.InputSystem.MagneticFieldSensor get_current()

Disassembly:
	0x037BFC54 ADRP X20, 0x988000
	0x037BFC58 ADRP X21, 0x988000
	0x037BFC5C LDRB W8, [X22 + 0x1B0]
	0x037BFC60 LDR X20, [X20 + 0x970]
	0x037BFC64 LDR X21, [X21 + 0xFA8]
	0x037BFC68 MOV X19, X0
	0x037BFC6C TBNZ X8, 0x0, 0x37BFCE4
	0x037BFC70 ADRP X0, 0x960000
	0x037BFC74 LDR X0, [X0 + 0x48]
	0x037BFC78 BL 0x1C16CF4
	0x037BFC7C ADRP X0, 0x960000
	0x037BFC80 LDR X0, [X0 + 0x50]
	0x037BFC84 BL 0x1C16CF4
	0x037BFC88 ADRP X0, 0x960000
	0x037BFC8C LDR X0, [X0 + 0x58]
	0x037BFC90 BL 0x1C16CF4
	0x037BFC94 ADRP X0, 0x988000
	0x037BFC98 LDR X0, [X0 + 0xFA8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xC23000
	005 Move X20, 0x989000
	006 Move W8, [X19+408]
	007 Move X20, [X20+3896]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x989000
	013 Move X0, [X0+3896]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+408], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_current(UnityEngine.InputSystem.MagneticFieldSensor value)

Disassembly:
	0x037BFC9C BL 0x1C16CF4
	0x037BFCA0 ADRP X0, 0x960000
	0x037BFCA4 LDR X0, [X0 + 0x60]
	0x037BFCA8 BL 0x1C16CF4
	0x037BFCAC ADRP X0, 0x988000
	0x037BFCB0 LDR X0, [X0 + 0xFA0]
	0x037BFCB4 BL 0x1C16CF4
	0x037BFCB8 ADRP X0, 0x988000
	0x037BFCBC LDR X0, [X0 + 0x920]
	0x037BFCC0 BL 0x1C16CF4
	0x037BFCC4 ADRP X0, 0x988000
	0x037BFCC8 LDR X0, [X0 + 0x960]
	0x037BFCCC BL 0x1C16CF4
	0x037BFCD0 ADRP X0, 0x988000
	0x037BFCD4 LDR X0, [X0 + 0x970]
	0x037BFCD8 BL 0x1C16CF4
	0x037BFCDC MOVZ W8, 0x1
	0x037BFCE0 STRB W8, [X22 + 0x1B0]
	0x037BFCE4 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xC23000
	006 Move X21, 0x989000
	007 Move W8, [X20+409]
	008 Move X21, [X21+3896]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x989000
	015 Move X0, [X0+3896]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+409], W8
	019 Move X8, [X21]
	020 Move X8, [X8+184]
	021 Move [X8], X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 

Method: System.Void MakeCurrent()

Disassembly:
	0x037BFCE8 MOV X1, X31
	0x037BFCEC STP X31, X31, [X31 + 0x30]
	0x037BFCF0 STR X31, [X31 + 0x40]
	0x037BFCF4 BL 0x377EBC4
	0x037BFCF8 LDR X1, [X20]
	0x037BFCFC LDR X2, [X21]
	0x037BFD00 MOV X0, X19
	0x037BFD04 BL 0x21FC754
	0x037BFD08 STR X0, [X19 + 0x1A0]
	0x037BFD0C CBZ X0, 0x37BFF14
	0x037BFD10 ADRP X27, 0x960000
	0x037BFD14 ADRP X22, 0x960000
	0x037BFD18 ADRP X24, 0x960000
	0x037BFD1C ADRP X25, 0x988000
	0x037BFD20 LDR X27, [X27 + 0x60]
	0x037BFD24 LDR X22, [X22 + 0x50]
	0x037BFD28 LDR X24, [X24 + 0x58]
	0x037BFD2C LDR X25, [X25 + 0x960]
	0x037BFD30 LDR X8, [X0 + 0x178]
	0x037BFD34 ADRP X28, 0x988000
	0x037BFD38 ADRP X23, 0x988000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call InputDevice.MakeCurrent, X0
	007 Move X20, 0xC23000
	008 Move W8, [X20+553]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x989000
	012 Move X0, [X0+3896]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+553], W8
	016 Move X8, 0x989000
	017 Move X8, [X8+3896]
	018 Move X8, [X8]
	019 Move X8, [X8+184]
	020 Move [X8], X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void OnRemoved()

Disassembly:
	0x037BFD3C ADRP X26, 0x960000
	0x037BFD40 LDR X28, [X28 + 0x920]
	0x037BFD44 LDR X23, [X23 + 0xFA0]
	0x037BFD48 LDR X26, [X26 + 0x48]
	0x037BFD4C MOV X0, X19
	0x037BFD50 MOV X1, X31
	0x037BFD54 STR X8, [X19 + 0x198]
	0x037BFD58 BL 0x37720C4
	0x037BFD5C LDR X9, [X27]
	0x037BFD60 STP X0, X1, [X31 + 0x20]
	0x037BFD64 ADD X8, X31, 0x0
	0x037BFD68 ADD X0, X31, 0x20
	0x037BFD6C MOV X1, X9
	0x037BFD70 BL 0x24FD990
	0x037BFD74 LDR V0, [X31]
	0x037BFD78 LDR X8, [X31 + 0x10]
	0x037BFD7C MOV W29, W31
	0x037BFD80 STR V0, [X31 + 0x3]
	0x037BFD84 STR X8, [X31 + 0x40]
	0x037BFD88 LDR X1, [X22]
	0x037BFD8C ADD X0, X31, 0x30
	0x037BFD90 BL 0x2BC496C
	0x037BFD94 TBZ X0, 0x0, 0x37BFDDC
	0x037BFD98 LDR X1, [X24]
	0x037BFD9C ADD X0, X31, 0x30
	0x037BFDA0 BL 0x2BC4998
	0x037BFDA4 CBZ X0, 0x37BFD88
	0x037BFDA8 LDR X9, [X0]
	0x037BFDAC LDR X8, [X25]
	0x037BFDB0 LDRB W11, [X9 + 0x130]
	0x037BFDB4 LDRB W10, [X8 + 0x130]
	0x037BFDB8 CMP W11, W10
	0x037BFDBC B.CC 0x37BFD88

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call InputDevice.OnRemoved, X0
	007 Move X20, 0xC23000
	008 Move W8, [X20+554]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x989000
	012 Move X0, [X0+3896]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+554], W8
	016 Move X20, 0x989000
	017 Move X20, [X20+3896]
	018 Move X8, [X20]
	019 Move X8, [X8+184]
	020 Move X9, [X8]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X19, 0xC23000
	023 Move W9, [X19+553]
	024 Compare W9, 0
	025 JumpIfNotEqual {32}
	026 Move X0, X20
	027 Call 0x1C17CF4
	028 Move X8, [X20]
	029 Move W9, 1
	030 Move [X19+553], W9
	031 Move X8, [X8+184]
	032 Move [X8], X31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 

Method: System.Void FinishSetup()

Disassembly:
	0x037BFDC0 LDR X9, [X9 + 0xC8]
	0x037BFDC4 ADD X9, X9, X10, 0x3, LSL
	0x037BFDC8 LDUR X9, [X9 - 0x8]
	0x037BFDCC CMP X9, X8
	0x037BFDD0 B.NE 0x37BFD88
	0x037BFDD4 ADD W29, W29, 0x1
	0x037BFDD8 B 0x37BFD88
	0x037BFDDC LDR X1, [X26]
	0x037BFDE0 ADD X0, X31, 0x30
	0x037BFDE4 BL 0x2BC4968
	0x037BFDE8 LDR X0, [X28]
	0x037BFDEC CMP W29, 0x0
	0x037BFDF0 CSET W8, GT
	0x037BFDF4 SUB W1, W29, W8
	0x037BFDF8 BL 0x1C16D6C
	0x037BFDFC MOV X20, X0
	0x037BFE00 MOV X0, X19
	0x037BFE04 MOV X1, X31
	0x037BFE08 BL 0x37720C4
	0x037BFE0C LDR X9, [X27]
	0x037BFE10 STP X0, X1, [X31 + 0x20]
	0x037BFE14 ADD X8, X31, 0x0
	0x037BFE18 ADD X0, X31, 0x20
	0x037BFE1C MOV X1, X9
	0x037BFE20 BL 0x24FD990
	0x037BFE24 LDR V0, [X31]
	0x037BFE28 LDR X8, [X31 + 0x10]
	0x037BFE2C MOV W27, W31
	0x037BFE30 STR V0, [X31 + 0x3]
	0x037BFE34 STR X8, [X31 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xC23000
	007 Move X21, 0x989000
	008 Move X22, 0x986000
	009 Move W8, [X20+410]
	010 Move X21, [X21+3904]
	011 Move X22, [X22+3536]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x986000
	018 Move X0, [X0+3536]
	019 Call 0x1C17CF4
	020 Move X0, 0x989000
	021 Move X0, [X0+3904]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+410], W8
	025 Move X1, [X21]
	026 Move X2, [X22]
	027 Move X0, X19
	028 Call 0x21FD754, X0, X1
	029 Move [X19+368], X0
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+48]
	037 Call InputControl.FinishSetup, X0
	038 Return 

Method: System.Void .ctor()

Disassembly:
	0x037BFE38 LDR X1, [X22]
	0x037BFE3C ADD X0, X31, 0x30

ISIL:
	001 Move X1, X31
	002 Call InputDevice..ctor, X0
	003 Return 

