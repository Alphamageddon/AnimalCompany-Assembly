Type: UnityEngine.InputSystem.OnScreen.OnScreenStick

Method: System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x037F01EC STR S8, [X8 + 0x104]
	0x037F01F0 STR S9, [X8 + 0x108]
	0x037F01F4 LDR X0, [X9]
	0x037F01F8 LDR W8, [X0 + 0xE0]
	0x037F01FC CBNZ W8, 0x37F0204
	0x037F0200 BL 0x1C16DFC
	0x037F0204 MOV X0, X31
	0x037F0208 BL 0x3E4FF90
	0x037F020C CBZ X0, 0x37F0350
	0x037F0210 LDP X2, X1, [X19 + 0x78]
	0x037F0214 MOV X3, X31
	0x037F0218 BL 0x3E508EC
	0x037F021C LDR X0, [X19 + 0x78]
	0x037F0220 CBZ X0, 0x37F0350
	0x037F0224 LDR W8, [X0 + 0x18]
	0x037F0228 CBZ W8, 0x37F0334
	0x037F022C ADRP X8, 0x959000
	0x037F0230 LDR X8, [X8 + 0x760]
	0x037F0234 ADRP X22, 0x959000
	0x037F0238 ADRP X23, 0x903000
	0x037F023C LDR X1, [X8]
	0x037F0240 LDR X22, [X22 + 0x750]
	0x037F0244 LDR X23, [X23 + 0x598]
	0x037F0248 ADD X8, X31, 0x0
	0x037F024C BL 0x3036D64
	0x037F0250 ADD X0, X31, 0x60
	0x037F0254 ADD X1, X31, 0x0
	0x037F0258 MOVZ W2, 0x60
	0x037F025C BL 0x3EB1AC0
	0x037F0260 LDR X1, [X22]
	0x037F0264 ADD X0, X31, 0x60
	0x037F0268 BL 0x2BC74A0
	0x037F026C TBZ X0, 0x0, 0x37F0320
	0x037F0270 LDR X20, [X31 + 0x70]
	0x037F0274 MOV X0, X19
	0x037F0278 MOV X1, X31
	0x037F027C BL 0x3C32ECC
	0x037F0280 MOV X21, X0
	0x037F0284 LDR X0, [X23]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move W8, [X0+76]
	006 Compare W8, 0
	007 JumpIfEqual {13}
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Move D9, [X31+32]
	011 Move D8, [X31+40]
	012 Return 
	013 Compare X1, 0
	014 JumpIfEqual {29}
	015 Move V8, [X1+260]
	016 Move V9, [X1+264]
	017 Move X19, X0
	018 Move X0, X1
	019 Move X1, X31
	020 Call PointerEventData.get_pressEventCamera, X0
	021 Move X1, X0
	022 Move X0, X19
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Move V0, V8
	026 Move V1, V9
	027 Move D9, [X31+32]
	028 Move D8, [X31+40]
	029 Move X0, 0x909000
	030 Move X0, [X0+1320]
	031 Call 0x1C17D08
	032 Call 0x1C17F10
	033 Move X19, X0
	034 Move X0, 0x95A000
	035 Move X0, [X0+840]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Move X2, X31
	040 Call ArgumentNullException..ctor, X0, X1
	041 Move X0, 0x95A000
	042 Move X0, [X0+1704]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC

Method: System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x037F04D0 MOV W8, W0
	0x037F04D4 MOV X0, X31
	0x037F04D8 TBNZ X8, 0x0, 0x37F04F4
	0x037F04DC MOV X0, X19
	0x037F04E0 MOV X1, X31
	0x037F04E4 BL 0x3E24E68
	0x037F04E8 CBNZ X0, 0x37F04F4
	0x037F04EC MOV X0, X31
	0x037F04F0 BL 0x3C047F8
	0x037F04F4 LDP X20, X19, [X31 + 0x20]
	0x037F04F8 LDP X30, X21, [X31 + 0x10]
	0x037F04FC ADD X31, X31, 0x30
	0x037F0500 RET
	0x037F0504 SUB X31, X31, 0x40
	0x037F0508 STP D9, D8, [X31 + 0x10]
	0x037F050C STR X30, [X31 + 0x20]
	0x037F0510 STP X20, X19, [X31 + 0x30]
	0x037F0514 ADRP X20, 0xBF1000
	0x037F0518 LDRB W8, [X20 + 0x367]
	0x037F051C MOV X19, X0
	0x037F0520 STP X1, X2, [X31]
	0x037F0524 TBNZ X8, 0x0, 0x37F0548
	0x037F0528 ADRP X0, 0x92B000
	0x037F052C LDR X0, [X0 + 0x558]
	0x037F0530 BL 0x1C16CF4
	0x037F0534 ADRP X0, 0x957000
	0x037F0538 LDR X0, [X0 + 0x3C0]
	0x037F053C BL 0x1C16CF4
	0x037F0540 MOVZ W8, 0x1
	0x037F0544 STRB W8, [X20 + 0x367]
	0x037F0548 ADD X0, X31, 0x0
	0x037F054C MOV X1, X31
	0x037F0550 BL 0x3735E8C
	0x037F0554 CBZ X0, 0x37F05E4
	0x037F0558 LDR X0, [X0 + 0x78]
	0x037F055C CBZ X0, 0x37F05E4
	0x037F0560 ADRP X9, 0x957000
	0x037F0564 LDR X9, [X9 + 0x3C0]
	0x037F0568 LDR X8, [X0]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move W8, [X0+76]
	006 Compare W8, 0
	007 JumpIfEqual {13}
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Move D9, [X31+32]
	011 Move D8, [X31+40]
	012 Return 
	013 Compare X1, 0
	014 JumpIfEqual {29}
	015 Move V8, [X1+260]
	016 Move V9, [X1+264]
	017 Move X19, X0
	018 Move X0, X1
	019 Move X1, X31
	020 Call PointerEventData.get_pressEventCamera, X0
	021 Move X1, X0
	022 Move X0, X19
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Move V0, V8
	026 Move V1, V9
	027 Move D9, [X31+32]
	028 Move D8, [X31+40]
	029 Move X0, 0x909000
	030 Move X0, [X0+1320]
	031 Call 0x1C17D08
	032 Call 0x1C17F10
	033 Move X19, X0
	034 Move X0, 0x95A000
	035 Move X0, [X0+840]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Move X2, X31
	040 Call ArgumentNullException..ctor, X0, X1
	041 Move X0, 0x95A000
	042 Move X0, [X0+1736]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC

Method: System.Void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x037F0954 BL 0x1C16CF4
	0x037F0958 ADRP X0, 0x959000
	0x037F095C LDR X0, [X0 + 0x738]
	0x037F0960 BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+76]
	002 Compare W8, 0
	003 Invalid "Jump target not found in method."
	004 Return 

Method: System.Void Start()

Disassembly:
	0x037F0A2C LDR V1, [X0 + 0x3C]
	0x037F0A30 FCMP S1, S0
	0x037F0A34 B.NE 0x37F0A3C
	0x037F0A38 RET
	0x037F0A3C STR S0, [X0 + 0x3C]
	0x037F0A40 B 0x37F0928
	0x037F0A44 LDRB W0, [X0 + 0x4C]
	0x037F0A48 RET
	0x037F0A4C AND W8, W1, 0x1
	0x037F0A50 STRB W8, [X0 + 0x4C]
	0x037F0A54 RET
	0x037F0A58 LDR X0, [X0 + 0x40]
	0x037F0A5C RET
	0x037F0A60 STR X1, [X0 + 0x40]
	0x037F0A64 RET
	0x037F0A68 LDR W0, [X0 + 0x48]
	0x037F0A6C RET
	0x037F0A70 STR W1, [X0 + 0x48]
	0x037F0A74 RET
	0x037F0A78 ADRP X8, 0xFFFFFFFFFD2FD000
	0x037F0A7C LDR V0, [X8 + 0xC20]
	0x037F0A80 MOV X1, X31
	0x037F0A84 STR D0, [X0 + 0x38]
	0x037F0A88 B 0x3C36C30
	0x037F0A8C RET
	0x037F0A90 STR X30, [X31 - 0x10]!
	0x037F0A94 ADD X0, X31, 0x8
	0x037F0A98 MOVZ W1, 0x48
	0x037F0A9C MOVZ W2, 0x49
	0x037F0AA0 MOVZ W3, 0x44
	0x037F0AA4 MOVZ W4, 0x44
	0x037F0AA8 MOV X5, X31
	0x037F0AAC STR W31, [X31 + 0x8]
	0x037F0AB0 BL 0x375AA28
	0x037F0AB4 LDR W0, [X31 + 0x8]
	0x037F0AB8 LDR X30, [X31], #0x10
	0x037F0ABC RET
	0x037F0AC0 STR X30, [X31 - 0x10]!
	0x037F0AC4 ADD X0, X31, 0x8
	0x037F0AC8 MOVZ W1, 0x48
	0x037F0ACC MOVZ W2, 0x49
	0x037F0AD0 MOVZ W3, 0x44
	0x037F0AD4 MOVZ W4, 0x53
	0x037F0AD8 MOV X5, X31
	0x037F0ADC STR W31, [X31 + 0x8]
	0x037F0AE0 BL 0x375AA28
	0x037F0AE4 LDR W0, [X31 + 0x8]
	0x037F0AE8 LDR X30, [X31], #0x10
	0x037F0AEC RET
	0x037F0AF0 STR X30, [X31 - 0x10]!
	0x037F0AF4 ADD X0, X31, 0x8
	0x037F0AF8 MOVZ W1, 0x48
	0x037F0AFC MOVZ W2, 0x49
	0x037F0B00 MOVZ W3, 0x44
	0x037F0B04 MOVZ W4, 0x50
	0x037F0B08 MOV X5, X31
	0x037F0B0C STR W31, [X31 + 0x8]
	0x037F0B10 BL 0x375AA28
	0x037F0B14 LDR W0, [X31 + 0x8]
	0x037F0B18 LDR X30, [X31], #0x10
	0x037F0B1C RET
	0x037F0B20 SUB X31, X31, 0x80
	0x037F0B24 STP X30, X21, [X31 + 0x60]
	0x037F0B28 STP X20, X19, [X31 + 0x70]
	0x037F0B2C ADRP X21, 0xBF1000
	0x037F0B30 LDRB W9, [X21 + 0x36C]
	0x037F0B34 MOV X20, X0
	0x037F0B38 MOV X19, X8
	0x037F0B3C TBNZ X9, 0x0, 0x37F0B54
	0x037F0B40 ADRP X0, 0x959000
	0x037F0B44 LDR X0, [X0 + 0x788]
	0x037F0B48 BL 0x1C16CF4
	0x037F0B4C MOVZ W8, 0x1
	0x037F0B50 STRB W8, [X21 + 0x36C]
	0x037F0B54 LDRB W8, [X20 + 0x170]
	0x037F0B58 CBNZ W8, 0x37F0BA8
	0x037F0B5C LDR X0, [X20 + 0x120]
	0x037F0B60 MOV X1, X31
	0x037F0B64 BL 0x32277A8
	0x037F0B68 TBNZ X0, 0x0, 0x37F0BA0
	0x037F0B6C ADRP X8, 0x959000
	0x037F0B70 LDR X0, [X20 + 0x120]
	0x037F0B74 LDR X8, [X8 + 0x788]
	0x037F0B78 LDR X1, [X8]
	0x037F0B7C ADD X8, X31, 0x0
	0x037F0B80 BL 0x22115D8
	0x037F0B84 LDP V1, V0, [X31 + 0x10]
	0x037F0B88 LDR V2, [X31]
	0x037F0B8C ADD X8, X20, 0x178
	0x037F0B90 STP V1, V0, [X31 + 0x40]
	0x037F0B94 STR V2, [X31 + 0x3]
	0x037F0B98 STP V1, V0, [X8 + 0x10]
	0x037F0B9C STR V2, [X8]
	0x037F0BA0 MOVZ W8, 0x1
	0x037F0BA4 STRB W8, [X20 + 0x170]
	0x037F0BA8 ADD X8, X20, 0x178
	0x037F0BAC LDP V1, V0, [X8 + 0x10]
	0x037F0BB0 LDR V2, [X8]
	0x037F0BB4 LDP X30, X21, [X31 + 0x60]
	0x037F0BB8 STP V1, V0, [X19 + 0x10]
	0x037F0BBC STR V2, [X19]
	0x037F0BC0 LDP X20, X19, [X31 + 0x70]
	0x037F0BC4 ADD X31, X31, 0x80
	0x037F0BC8 RET
	0x037F0BCC SUB X31, X31, 0x180
	0x037F0BD0 STP X29, X30, [X31 + 0x120]
	0x037F0BD4 STP X28, X27, [X31 + 0x130]
	0x037F0BD8 STP X26, X25, [X31 + 0x140]
	0x037F0BDC STP X24, X23, [X31 + 0x150]
	0x037F0BE0 STP X22, X21, [X31 + 0x160]
	0x037F0BE4 STP X20, X19, [X31 + 0x170]
	0x037F0BE8 MRS X24, 0xC000
	0x037F0BEC LDR X8, [X24 + 0x28]
	0x037F0BF0 ADRP X23, 0xBF1000
	0x037F0BF4 ADRP X20, 0x959000
	0x037F0BF8 MOV X21, X2
	0x037F0BFC STR X8, [X31 + 0x118]
	0x037F0C00 LDRB W8, [X23 + 0x36D]
	0x037F0C04 LDR X20, [X20 + 0x790]
	0x037F0C08 MOV X22, X1
	0x037F0C0C MOV X19, X0
	0x037F0C10 TBNZ X8, 0x0, 0x37F0D90
	0x037F0C14 ADRP X0, 0x959000
	0x037F0C18 LDR X0, [X0 + 0x798]
	0x037F0C1C BL 0x1C16CF4
	0x037F0C20 ADRP X0, 0x958000
	0x037F0C24 LDR X0, [X0 + 0xE10]
	0x037F0C28 BL 0x1C16CF4
	0x037F0C2C ADRP X0, 0x959000
	0x037F0C30 LDR X0, [X0 + 0x7A0]
	0x037F0C34 BL 0x1C16CF4
	0x037F0C38 ADRP X0, 0x959000
	0x037F0C3C LDR X0, [X0 + 0x7A8]
	0x037F0C40 BL 0x1C16CF4
	0x037F0C44 ADRP X0, 0x959000
	0x037F0C48 LDR X0, [X0 + 0x7B0]
	0x037F0C4C BL 0x1C16CF4
	0x037F0C50 ADRP X0, 0x959000
	0x037F0C54 LDR X0, [X0 + 0x7B8]
	0x037F0C58 BL 0x1C16CF4
	0x037F0C5C ADRP X0, 0x959000
	0x037F0C60 LDR X0, [X0 + 0x7C0]
	0x037F0C64 BL 0x1C16CF4
	0x037F0C68 ADRP X0, 0x92B000
	0x037F0C6C LDR X0, [X0 + 0xEC0]
	0x037F0C70 BL 0x1C16CF4
	0x037F0C74 ADRP X0, 0x92B000
	0x037F0C78 LDR X0, [X0 + 0x270]
	0x037F0C7C BL 0x1C16CF4
	0x037F0C80 ADRP X0, 0x903000
	0x037F0C84 LDR X0, [X0 + 0x758]
	0x037F0C88 BL 0x1C16CF4
	0x037F0C8C ADRP X0, 0x958000
	0x037F0C90 LDR X0, [X0 + 0x440]
	0x037F0C94 BL 0x1C16CF4
	0x037F0C98 ADRP X0, 0x958000
	0x037F0C9C LDR X0, [X0 + 0xFB0]
	0x037F0CA0 BL 0x1C16CF4
	0x037F0CA4 ADRP X0, 0x903000
	0x037F0CA8 LDR X0, [X0 + 0x9D0]
	0x037F0CAC BL 0x1C16CF4
	0x037F0CB0 ADRP X0, 0x959000
	0x037F0CB4 LDR X0, [X0 + 0x7C8]
	0x037F0CB8 BL 0x1C16CF4
	0x037F0CBC ADRP X0, 0x903000
	0x037F0CC0 LDR X0, [X0 + 0xAC8]
	0x037F0CC4 BL 0x1C16CF4
	0x037F0CC8 ADRP X0, 0x903000
	0x037F0CCC LDR X0, [X0 + 0x6C0]
	0x037F0CD0 BL 0x1C16CF4
	0x037F0CD4 ADRP X0, 0x959000
	0x037F0CD8 LDR X0, [X0 + 0x7D0]
	0x037F0CDC BL 0x1C16CF4
	0x037F0CE0 ADRP X0, 0x959000
	0x037F0CE4 LDR X0, [X0 + 0x790]
	0x037F0CE8 BL 0x1C16CF4
	0x037F0CEC ADRP X0, 0x959000
	0x037F0CF0 LDR X0, [X0 + 0x7D8]
	0x037F0CF4 BL 0x1C16CF4
	0x037F0CF8 ADRP X0, 0x93A000
	0x037F0CFC LDR X0, [X0 + 0x1B8]
	0x037F0D00 BL 0x1C16CF4
	0x037F0D04 ADRP X0, 0x959000
	0x037F0D08 LDR X0, [X0 + 0x7E0]
	0x037F0D0C BL 0x1C16CF4
	0x037F0D10 ADRP X0, 0x903000
	0x037F0D14 LDR X0, [X0 + 0xDD8]
	0x037F0D18 BL 0x1C16CF4
	0x037F0D1C ADRP X0, 0x959000
	0x037F0D20 LDR X0, [X0 + 0x7E8]
	0x037F0D24 BL 0x1C16CF4
	0x037F0D28 ADRP X0, 0x957000
	0x037F0D2C LDR X0, [X0 + 0xDD0]
	0x037F0D30 BL 0x1C16CF4
	0x037F0D34 ADRP X0, 0x959000
	0x037F0D38 LDR X0, [X0 + 0x7F0]
	0x037F0D3C BL 0x1C16CF4
	0x037F0D40 ADRP X0, 0x959000
	0x037F0D44 LDR X0, [X0 + 0x7F8]
	0x037F0D48 BL 0x1C16CF4
	0x037F0D4C ADRP X0, 0x959000
	0x037F0D50 LDR X0, [X0 + 0x800]
	0x037F0D54 BL 0x1C16CF4
	0x037F0D58 ADRP X0, 0x958000
	0x037F0D5C LDR X0, [X0 + 0x690]
	0x037F0D60 BL 0x1C16CF4
	0x037F0D64 ADRP X0, 0x959000
	0x037F0D68 LDR X0, [X0 + 0x808]
	0x037F0D6C BL 0x1C16CF4
	0x037F0D70 ADRP X0, 0x903000
	0x037F0D74 LDR X0, [X0 + 0x988]
	0x037F0D78 BL 0x1C16CF4
	0x037F0D7C ADRP X0, 0x959000
	0x037F0D80 LDR X0, [X0 + 0x810]
	0x037F0D84 BL 0x1C16CF4
	0x037F0D88 MOVZ W8, 0x1
	0x037F0D8C STRB W8, [X23 + 0x36D]
	0x037F0D90 LDR X0, [X20]
	0x037F0D94 STR X31, [X31 + 0xF8]
	0x037F0D98 STR X31, [X31 + 0xA8]
	0x037F0D9C BL 0x1C16F10
	0x037F0DA0 MOV X1, X31
	0x037F0DA4 MOV X20, X0
	0x037F0DA8 BL 0x33BDD8C
	0x037F0DAC MOV X0, X22
	0x037F0DB0 MOV X1, X31
	0x037F0DB4 BL 0x32277A8
	0x037F0DB8 MOV X27, X31
	0x037F0DBC TBZ X0, 0x0, 0x37F1454
	0x037F0DC0 ADRP X29, 0x959000
	0x037F0DC4 LDR X29, [X29 + 0x808]
	0x037F0DC8 LDR X0, [X19]
	0x037F0DCC MOV X2, X31
	0x037F0DD0 LDR X1, [X29]
	0x037F0DD4 BL 0x3226EF8
	0x037F0DD8 MOV X27, X31
	0x037F0DDC TBNZ X0, 0x0, 0x37F1454
	0x037F0DE0 ADD X8, X31, 0xB0
	0x037F0DE4 MOV X0, X19
	0x037F0DE8 MOV X1, X21
	0x037F0DEC BL 0x37F14A8
	0x037F0DF0 LDR V0, [X31 + 0xC]
	0x037F0DF4 LDP X23, X8, [X31 + 0xD0]
	0x037F0DF8 LDP W28, W26, [X31 + 0xB0]
	0x037F0DFC LDP W21, W22, [X31 + 0xB8]
	0x037F0E00 MOV X0, X31
	0x037F0E04 STR X8, [X31 + 0x18]
	0x037F0E08 STR V0, [X31 + 0x10]
	0x037F0E0C BL 0x37F6874
	0x037F0E10 ADRP X8, 0x959000
	0x037F0E14 LDR X8, [X8 + 0x7C8]
	0x037F0E18 STP X0, X1, [X31 + 0xB0]
	0x037F0E1C ADD X1, X31, 0xB0
	0x037F0E20 LDR X8, [X8]
	0x037F0E24 MOV X0, X8
	0x037F0E28 BL 0x1C16E04
	0x037F0E2C MOV X25, X0
	0x037F0E30 ADD X0, X31, 0x60
	0x037F0E34 MOV W1, W22
	0x037F0E38 MOV W2, W21
	0x037F0E3C MOV X3, X31
	0x037F0E40 STR X31, [X31 + 0x60]
	0x037F0E44 BL 0x37F6B00
	0x037F0E48 ADRP X8, 0x959000
	0x037F0E4C LDR X1, [X31 + 0x60]
	0x037F0E50 LDR X8, [X8 + 0x798]
	0x037F0E54 MOV X0, X25
	0x037F0E58 LDR X2, [X8]
	0x037F0E5C BL 0x21BA960
	0x037F0E60 MOV X27, X31
	0x037F0E64 CBZ X23, 0x37F1454
	0x037F0E68 TBZ X0, 0x0, 0x37F1454
	0x037F0E6C LDR X8, [X23 + 0x18]
	0x037F0E70 CMP W8, 0x1
	0x037F0E74 B.LT 0x37F0EE0
	0x037F0E78 STR W26, [X31 + 0x14]
	0x037F0E7C MOV X25, X31
	0x037F0E80 AND X27, X8, 0x0
	0x037F0E84 MOVZ W26, 0x20
	0x037F0E88 CMP X25, W27, UXTW
	0x037F0E8C B.CS 0x37F1488
	0x037F0E90 ADD X1, X23, X26
	0x037F0E94 ADD X0, X31, 0xB0
	0x037F0E98 MOVZ W2, 0x48
	0x037F0E9C BL 0x3EB1AC0
	0x037F0EA0 LDR W8, [X31 + 0xB0]
	0x037F0EA4 AND W8, W8, 0xFFFFFFFE
	0x037F0EA8 CMP W8, 0x30
	0x037F0EAC B.NE 0x37F0EC0
	0x037F0EB0 LDR W8, [X31 + 0xB4]
	0x037F0EB4 CMP W8, 0x1
	0x037F0EB8 B.NE 0x37F0ED0
	0x037F0EBC B 0x37F0EE8
	0x037F0EC0 ADD X0, X31, 0xB0
	0x037F0EC4 BL 0x37F4678
	0x037F0EC8 CBNZ X0, 0x37F0EE8
	0x037F0ECC LDR W27, [X23 + 0x18]
	0x037F0ED0 ADD X25, X25, 0x1
	0x037F0ED4 CMP X25, W27, SXTW
	0x037F0ED8 ADD X26, X26, 0x48
	0x037F0EDC B.LT 0x37F0E88
	0x037F0EE0 MOV X27, X31
	0x037F0EE4 B 0x37F1454
	0x037F0EE8 ADRP X27, 0x903000
	0x037F0EEC LDR X27, [X27 + 0x6C0]
	0x037F0EF0 ADRP X9, 0x959000
	0x037F0EF4 LDR X0, [X27]
	0x037F0EF8 LDR X9, [X9 + 0x7B0]
	0x037F0EFC LDR W8, [X0 + 0xE0]
	0x037F0F00 LDR X25, [X9]
	0x037F0F04 CBNZ W8, 0x37F0F0C
	0x037F0F08 BL 0x1C16DFC
	0x037F0F0C MOV X0, X25
	0x037F0F10 MOV X1, X31
	0x037F0F14 BL 0x338C698
	0x037F0F18 LDR X25, [X29]
	0x037F0F1C CMP W22, 0x1
	0x037F0F20 MOV X26, X0
	0x037F0F24 B.NE 0x37F0F6C
	0x037F0F28 AND W8, W21, 0xFFFFFFFE
	0x037F0F2C CMP W8, 0x4
	0x037F0F30 B.NE 0x37F0F6C
	0x037F0F34 ADRP X8, 0x958000
	0x037F0F38 LDR X0, [X27]
	0x037F0F3C LDR X8, [X8 + 0x690]
	0x037F0F40 LDR X25, [X8]
	0x037F0F44 ADRP X8, 0x958000
	0x037F0F48 LDR X8, [X8 + 0x440]
	0x037F0F4C LDR W9, [X0 + 0xE0]
	0x037F0F50 LDR X26, [X8]
	0x037F0F54 CBNZ W9, 0x37F0F5C
	0x037F0F58 BL 0x1C16DFC
	0x037F0F5C MOV X0, X26
	0x037F0F60 MOV X1, X31
	0x037F0F64 BL 0x338C698
	0x037F0F68 MOV X26, X0
	0x037F0F6C ADRP X8, 0x903000
	0x037F0F70 ADRP X9, 0x958000
	0x037F0F74 LDR X8, [X8 + 0x988]
	0x037F0F78 LDR X9, [X9 + 0x690]
	0x037F0F7C MOV X0, X25
	0x037F0F80 MOV X2, X31
	0x037F0F84 LDR X27, [X8]
	0x037F0F88 LDR X1, [X9]
	0x037F0F8C BL 0x3226EF8
	0x037F0F90 TBZ X0, 0x0, 0x37F102C
	0x037F0F94 CMP W22, 0x1
	0x037F0F98 B.NE 0x37F0FD4
	0x037F0F9C ADRP X8, 0x959000
	0x037F0FA0 LDR X8, [X8 + 0x7A0]
	0x037F0FA4 ADD X1, X31, 0x60
	0x037F0FA8 STR W21, [X31 + 0x60]
	0x037F0FAC LDR X0, [X8]
	0x037F0FB0 BL 0x1C16E04
	0x037F0FB4 ADRP X8, 0x93A000
	0x037F0FB8 LDR X8, [X8 + 0x1B8]
	0x037F0FBC MOV X1, X0
	0x037F0FC0 MOV X2, X31
	0x037F0FC4 LDR X8, [X8]
	0x037F0FC8 MOV X0, X8
	0x037F0FCC BL 0x321EFD0
	0x037F0FD0 B 0x37F1028
	0x037F0FD4 ADRP X8, 0x959000
	0x037F0FD8 LDR X8, [X8 + 0x7D8]
	0x037F0FDC ADD X1, X31, 0x60
	0x037F0FE0 STR W22, [X31 + 0x60]
	0x037F0FE4 LDR X0, [X8]
	0x037F0FE8 BL 0x1C16E04
	0x037F0FEC ADRP X8, 0x903000
	0x037F0FF0 LDR X8, [X8 + 0x758]
	0x037F0FF4 MOV X27, X0
	0x037F0FF8 ADD X1, X31, 0xA4
	0x037F0FFC STR W21, [X31 + 0xA4]
	0x037F1000 LDR X0, [X8]
	0x037F1004 BL 0x1C16E04
	0x037F1008 ADRP X8, 0x958000
	0x037F100C LDR X8, [X8 + 0x7E0]
	0x037F1010 MOV X2, X0
	0x037F1014 MOV X1, X27
	0x037F1018 MOV X3, X31
	0x037F101C LDR X8, [X8]
	0x037F1020 MOV X0, X8
	0x037F1024 BL 0x3227BD4
	0x037F1028 MOV X27, X0
	0x037F102C ADRP X9, 0x92A000
	0x037F1030 LDP V0, V1, [X19]
	0x037F1034 LDR X8, [X19 + 0x30]
	0x037F1038 LDR V2, [X19 + 0x2]
	0x037F103C LDR X9, [X9 + 0xEC0]
	0x037F1040 STR V0, [X31 + 0x6]
	0x037F1044 STR X8, [X31 + 0x90]
	0x037F1048 STP V1, V2, [X31 + 0x70]
	0x037F104C LDR X0, [X9]
	0x037F1050 LDR W8, [X0 + 0xE0]
	0x037F1054 CBNZ W8, 0x37F105C
	0x037F1058 BL 0x1C16DFC
	0x037F105C LDP V0, V1, [X31 + 0x60]
	0x037F1060 LDR V2, [X31 + 0x8]
	0x037F1064 LDR X8, [X31 + 0x90]
	0x037F1068 ADD X0, X31, 0x20
	0x037F106C MOV X1, X31
	0x037F1070 STP V0, V1, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0xBF2000
	009 Move W8, [X20+866]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {86}
	015 Move X0, 0x908000
	016 Move X0, [X0+984]
	017 Call 0x1C17CF4
	018 Move X0, 0x92B000
	019 Move X0, [X0+3576]
	020 Call 0x1C17CF4
	021 Move X0, 0x95A000
	022 Move X0, [X0+1752]
	023 Call 0x1C17CF4
	024 Move X0, 0x904000
	025 Move X0, [X0+2648]
	026 Call 0x1C17CF4
	027 Move X0, 0x95A000
	028 Move X0, [X0+1760]
	029 Call 0x1C17CF4
	030 Move X0, 0x908000
	031 Move X0, [X0+992]
	032 Call 0x1C17CF4
	033 Move X0, 0x95A000
	034 Move X0, [X0+1768]
	035 Call 0x1C17CF4
	036 Move X0, 0x95A000
	037 Move X0, [X0+1776]
	038 Call 0x1C17CF4
	039 Move X0, 0x95A000
	040 Move X0, [X0+1784]
	041 Call 0x1C17CF4
	042 Move X0, 0x95A000
	043 Move X0, [X0+1792]
	044 Call 0x1C17CF4
	045 Move X0, 0x95A000
	046 Move X0, [X0+1800]
	047 Call 0x1C17CF4
	048 Move X0, 0x92B000
	049 Move X0, [X0+4072]
	050 Call 0x1C17CF4
	051 Move X0, 0x92B000
	052 Move X0, [X0+3184]
	053 Call 0x1C17CF4
	054 Move X0, 0x90C000
	055 Move X0, [X0+3168]
	056 Call 0x1C17CF4
	057 Move X0, 0x904000
	058 Move X0, [X0+1728]
	059 Call 0x1C17CF4
	060 Move X0, 0x95A000
	061 Move X0, [X0+1808]
	062 Call 0x1C17CF4
	063 Move X0, 0x956000
	064 Move X0, [X0+1424]
	065 Call 0x1C17CF4
	066 Move X0, 0x95A000
	067 Move X0, [X0+1816]
	068 Call 0x1C17CF4
	069 Move X0, 0x95A000
	070 Move X0, [X0+1824]
	071 Call 0x1C17CF4
	072 Move X0, 0x95A000
	073 Move X0, [X0+1832]
	074 Call 0x1C17CF4
	075 Move X0, 0x95A000
	076 Move X0, [X0+1840]
	077 Call 0x1C17CF4
	078 Move X0, 0x95A000
	079 Move X0, [X0+1848]
	080 Call 0x1C17CF4
	081 Move X0, 0x95A000
	082 Move X0, [X0+1856]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X20+866], W8
	086 Move W8, [X19+76]
	087 Compare W8, 0
	088 JumpIfEqual {275}
	089 Move X8, 0x95A000
	090 Move X8, [X8+1776]
	091 Move X20, 0x95A000
	092 Move X22, 0x92B000
	093 Move X21, 0x95A000
	094 Move X0, [X8]
	095 Move X20, [X20+1768]
	096 Move X22, [X22+3576]
	097 Move X21, [X21+1800]
	098 Call 0x1C17F10
	099 Move X1, [X20]
	100 Move X20, X0
	101 Call List`1<RaycastResult>..ctor, X0
	102 Move [X19+120], X20
	103 Move X0, [X22]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X31
	109 Call EventSystem.get_current
	110 Move X8, [X21]
	111 Move X20, X0
	112 Move X0, X8
	113 Call 0x1C17F10
	114 Move X1, X20
	115 Move X2, X31
	116 Move X21, X0
	117 Call PointerEventData..ctor, X0, X1
	118 Move X0, [X19+80]
	119 Move [X19+128], X21
	120 Compare X0, 0
	121 JumpIfEqual {132}
	122 Move X1, X31
	123 Call InputAction.get_bindings, X0
	124 Move X8, X1
	125 ShiftRight X8, 32
	126 And X8, X8, 0x7FFFFFFF
	127 Compare X8, 0
	128 JumpIfNotEqual {180}
	129 Move X20, [X19+80]
	130 Compare X20, 0
	131 JumpIfNotEqual {140}
	132 Move X8, 0x908000
	133 Move X8, [X8+992]
	134 Move X0, [X8]
	135 Call 0x1C17F10
	136 Move X1, X31
	137 Move X20, X0
	138 Call InputAction..ctor, X0
	139 Move [X19+80], X20
	140 Move X8, 0x95A000
	141 Move X8, [X8+1808]
	142 Move X0, X20
	143 Move X2, X31
	144 Move X3, X31
	145 Move X1, [X8]
	146 Add X8, X31, 8
	147 Move X4, X31
	148 Move X5, X31
	149 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	150 Move X8, 0x95A000
	151 Move X0, [X19+80]
	152 Move X8, [X8+1824]
	153 Move X2, X31
	154 Move X3, X31
	155 Move X4, X31
	156 Move X1, [X8]
	157 Add X8, X31, 8
	158 Move X5, X31
	159 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	160 Move X8, 0x95A000
	161 Move X0, [X19+80]
	162 Move X8, [X8+1816]
	163 Move X2, X31
	164 Move X3, X31
	165 Move X4, X31
	166 Move X1, [X8]
	167 Add X8, X31, 8
	168 Move X5, X31
	169 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	170 Move X8, 0x95A000
	171 Move X0, [X19+80]
	172 Move X8, [X8+1856]
	173 Move X2, X31
	174 Move X3, X31
	175 Move X4, X31
	176 Move X1, [X8]
	177 Add X8, X31, 8
	178 Move X5, X31
	179 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	180 Move X22, 0x908000
	181 Move X21, 0x95A000
	182 Move X0, [X19+88]
	183 Move X22, [X22+984]
	184 Move X21, [X21+1784]
	185 Compare X0, 0
	186 JumpIfEqual {197}
	187 Move X1, X31
	188 Call InputAction.get_bindings, X0
	189 Move X8, X1
	190 ShiftRight X8, 32
	191 And X8, X8, 0x7FFFFFFF
	192 Compare X8, 0
	193 JumpIfNotEqual {235}
	194 Move X20, [X19+88]
	195 Compare X20, 0
	196 JumpIfNotEqual {205}
	197 Move X8, 0x908000
	198 Move X8, [X8+992]
	199 Move X0, [X8]
	200 Call 0x1C17F10
	201 Move X1, X31
	202 Move X20, X0
	203 Call InputAction..ctor, X0
	204 Move [X19+88], X20
	205 Move X8, 0x95A000
	206 Move X8, [X8+1840]
	207 Move X0, X20
	208 Move X2, X31
	209 Move X3, X31
	210 Move X1, [X8]
	211 Add X8, X31, 8
	212 Move X4, X31
	213 Move X5, X31
	214 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	215 Move X8, 0x95A000
	216 Move X0, [X19+88]
	217 Move X8, [X8+1832]
	218 Move X2, X31
	219 Move X3, X31
	220 Move X4, X31
	221 Move X1, [X8]
	222 Add X8, X31, 8
	223 Move X5, X31
	224 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	225 Move X8, 0x956000
	226 Move X0, [X19+88]
	227 Move X8, [X8+1424]
	228 Move X2, X31
	229 Move X3, X31
	230 Move X4, X31
	231 Move X1, [X8]
	232 Add X8, X31, 8
	233 Move X5, X31
	234 Call InputActionSetupExtensions.AddBinding, X0, X1, X2, X3, X4
	235 Move X0, [X22]
	236 Move X20, [X19+80]
	237 Call 0x1C17F10
	238 Move X2, [X21]
	239 Move X1, X19
	240 Move X3, X31
	241 Move X21, X0
	242 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	243 Compare X20, 0
	244 JumpIfEqual {433}
	245 Move X23, 0x95A000
	246 Move X23, [X23+1792]
	247 Move X0, X20
	248 Move X1, X21
	249 Move X2, X31
	250 Call InputAction.add_started, X0, X1
	251 Move X0, [X22]
	252 Move X20, [X19+80]
	253 Call 0x1C17F10
	254 Move X2, [X23]
	255 Move X1, X19
	256 Move X3, X31
	257 Move X21, X0
	258 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	259 Compare X20, 0
	260 JumpIfEqual {433}
	261 Move X0, X20
	262 Move X1, X21
	263 Move X2, X31
	264 Call InputAction.add_canceled, X0, X1
	265 Move X0, [X19+80]
	266 Compare X0, 0
	267 JumpIfEqual {433}
	268 Move X1, X31
	269 Call InputAction.Enable, X0
	270 Move X0, [X19+88]
	271 Compare X0, 0
	272 JumpIfEqual {433}
	273 Move X1, X31
	274 Call InputAction.Enable, X0
	275 Move X0, X19
	276 Move X1, X31
	277 Call Component.get_transform, X0
	278 Compare X0, 0
	279 JumpIfEqual {433}
	280 Move X22, 0x92B000
	281 Move X22, [X22+3184]
	282 Move X8, [X0]
	283 Move X1, [X22]
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Move X1, X31
	286 Call RectTransform.get_anchoredPosition, X0
	287 Move W8, [X19+72]
	288 Move [X19+96], S0
	289 Move [X19+104], S1
	290 Move [X19+104], W31
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Move [X19+108], S0
	293 Move [X19+116], S1
	294 Move X8, 0x90C000
	295 Move X8, [X8+3168]
	296 Move W1, 1
	297 Move X0, [X8]
	298 Call 0x1C17D6C
	299 Move X8, 0x904000
	300 Move X8, [X8+1728]
	301 Move X9, 0x95A000
	302 Move X20, X0
	303 Move X8, [X8]
	304 Move X9, [X9+1760]
	305 Move W10, [X8+224]
	306 Move X21, [X9]
	307 Compare W10, 0
	308 JumpIfNotEqual {311}
	309 Move X0, X8
	310 Call 0x1C17DFC
	311 Move X0, X21
	312 Move X1, X31
	313 Call Type.GetTypeFromHandle, X0
	314 Compare X20, 0
	315 JumpIfEqual {433}
	316 Move X21, X0
	317 Compare X0, 0
	318 JumpIfEqual {325}
	319 Move X8, [X20]
	320 Move X0, X21
	321 Move X1, [X8+64]
	322 Call 0x1C17E00
	323 Compare X0, 0
	324 JumpIfEqual {438}
	325 Move W8, [X20+24]
	326 Compare W8, 0
	327 JumpIfEqual {435}
	328 Move [X20+32], X21
	329 Move X8, 0x904000
	330 Move X8, [X8+2648]
	331 Move X0, [X8]
	332 Call 0x1C17F10
	333 Move X8, 0x95A000
	334 Move X8, [X8+1848]
	335 Move X2, X20
	336 Move X3, X31
	337 Move X21, X0
	338 Move X1, [X8]
	339 Call GameObject..ctor, X0, X1, X2
	340 Compare X21, 0
	341 JumpIfEqual {433}
	342 Move X0, X21
	343 Move X1, X31
	344 Call GameObject.get_transform, X0
	345 Move X20, X0
	346 Move X0, X19
	347 Move X1, X31
	348 Call Component.get_transform, X0
	349 Compare X20, 0
	350 JumpIfEqual {433}
	351 Move X1, X0
	352 Move X0, X20
	353 Move X2, X31
	354 Call Transform.SetParent, X0, X1
	355 Move X8, 0x95A000
	356 Move X8, [X8+1752]
	357 Move X0, X21
	358 Move X1, [X8]
	359 Call 0x21E62E4, X0
	360 Compare X0, 0
	361 JumpIfEqual {433}
	362 Move X8, [X0]
	363 Move S0, 1
	364 Move S1, 1
	365 Move S2, 1
	366 Move X9, [X8+680]
	367 Move X1, [X8+688]
	368 Move S3, W31
	369 Move X20, X0
	370 NotImplemented "Instruction BLR not yet implemented."
	371 Move X0, X21
	372 Move X1, X31
	373 Call GameObject.get_transform, X0
	374 Compare X0, 0
	375 JumpIfEqual {433}
	376 Move X1, [X22]
	377 Move X8, [X0]
	378 Move X21, X0
	379 NotImplemented "Instruction CMP not yet implemented."
	380 Move V0, [X19+60]
	381 Move X0, X21
	382 Move X1, X31
	383 Add S0, S0, S0
	384 Move V1, V0
	385 Call RectTransform.set_sizeDelta, X0, X1
	386 Move S0, 1
	387 Move S1, 1
	388 Move S2, W31
	389 Move X0, X21
	390 Move X1, X31
	391 Call Transform.set_localScale, X0, X1
	392 Move X19, 0xBE9000
	393 Move W8, [X19+1923]
	394 Compare W8, 0
	395 JumpIfNotEqual {401}
	396 Move X0, 0x904000
	397 Move X0, [X0+1440]
	398 Call 0x1C17CF4
	399 Move W8, 1
	400 Move [X19+1923], W8
	401 Move X8, 0x904000
	402 Move X8, [X8+1440]
	403 Move X0, X21
	404 Move X1, X31
	405 Move X8, [X8]
	406 Move X8, [X8+184]
	407 Move S0, [X8]
	408 Move S1, [X8+4]
	409 Move V2, [X8+8]
	410 Call RectTransform.set_anchoredPosition3D, X0, X1
	411 Move W0, 16
	412 Move TEMP, 0
	413 Not TEMP
	414 Move W1, TEMP
	415 Move X2, X31
	416 Call SpriteUtilities.CreateCircleSprite, X0, X1
	417 Move X1, X0
	418 Move X0, X20
	419 Move X2, X31
	420 Call Image.set_sprite, X0, X1
	421 Move S0, 0.5
	422 Move X0, X20
	423 Move X1, X31
	424 Call Image.set_alphaHitTestMinimumThreshold, X0, V0
	425 Move X20, [X31+64]
	426 Move X19, [X31+72]
	427 Move X22, [X31+48]
	428 Move X21, [X31+56]
	429 Move X30, [X31+32]
	430 Move X23, [X31+40]
	431 Add X31, X31, 80
	432 Return 
	433 Call 0x1C17F20
	434 Call 0x1C181E0
	435 Call 0x1C17F28
	436 Move X0, X21
	437 Call 0x1C181E0
	438 Call 0x1C17F44
	439 Move X1, X31
	440 Call 0x1C17DEC

Method: System.Void BeginInteraction(UnityEngine.Vector2 pointerPosition, UnityEngine.Camera uiCamera)

Disassembly:
	0x037F0288 LDR W8, [X0 + 0xE0]
	0x037F028C CBNZ W8, 0x37F0294
	0x037F0290 BL 0x1C16DFC
	0x037F0294 MOV X0, X20
	0x037F0298 MOV X1, X21
	0x037F029C MOV X2, X31
	0x037F02A0 BL 0x3C354F8
	0x037F02A4 TBNZ X0, 0x0, 0x37F0260
	0x037F02A8 ADRP X8, 0x959000
	0x037F02AC LDR X8, [X8 + 0x748]
	0x037F02B0 ADD X0, X31, 0x60
	0x037F02B4 LDR X1, [X8]
	0x037F02B8 BL 0x2BC749C
	0x037F02BC MOV X0, X19
	0x037F02C0 BL 0x37F03D0
	0x037F02C4 MOV X1, X0
	0x037F02C8 MOV X0, X19
	0x037F02CC MOV V0.16B, V8.16B
	0x037F02D0 MOV V1.16B, V9.16B
	0x037F02D4 BL 0x37EF288
	0x037F02D8 ADRP X8, 0x907000
	0x037F02DC LDR X20, [X19 + 0x58]
	0x037F02E0 LDR X8, [X8 + 0x3D8]
	0x037F02E4 LDR X0, [X8]
	0x037F02E8 BL 0x1C16F10
	0x037F02EC ADRP X8, 0x959000
	0x037F02F0 LDR X8, [X8 + 0x768]
	0x037F02F4 MOV X1, X19
	0x037F02F8 MOV X3, X31
	0x037F02FC MOV X21, X0
	0x037F0300 LDR X2, [X8]
	0x037F0304 BL 0x2A719B8
	0x037F0308 CBZ X20, 0x37F0350
	0x037F030C MOV X0, X20
	0x037F0310 MOV X1, X21
	0x037F0314 MOV X2, X31
	0x037F0318 BL 0x3734A04
	0x037F031C B 0x37F0334
	0x037F0320 ADRP X8, 0x959000
	0x037F0324 LDR X8, [X8 + 0x748]
	0x037F0328 ADD X0, X31, 0x60
	0x037F032C LDR X1, [X8]
	0x037F0330 BL 0x2BC749C
	0x037F0334 LDP X20, X19, [X31 + 0x110]
	0x037F0338 LDP X22, X21, [X31 + 0x100]
	0x037F033C LDP X30, X23, [X31 + 0xF0]
	0x037F0340 LDR X29, [X31 + 0xE0]
	0x037F0344 LDP D9, D8, [X31 + 0xD0]
	0x037F0348 ADD X31, X31, 0x120
	0x037F034C RET
	0x037F0350 BL 0x1C16F20
	0x037F0354 B 0x37F035C
	0x037F0358 B 0x37F035C
	0x037F035C MOV X19, X0
	0x037F0360 CMP W1, 0x1
	0x037F0364 B.NE 0x37F0398
	0x037F0368 MOV X0, X19
	0x037F036C BL 0x3EB1AD0
	0x037F0370 LDR X20, [X0]
	0x037F0374 BL 0x3EB1AE0
	0x037F0378 ADRP X8, 0x959000
	0x037F037C LDR X8, [X8 + 0x748]
	0x037F0380 ADD X0, X31, 0x60
	0x037F0384 LDR X1, [X8]
	0x037F0388 BL 0x2BC749C
	0x037F038C CBZ X20, 0x37F0334
	0x037F0390 MOV X0, X20
	0x037F0394 BL 0x1C16F18
	0x037F0398 MOV X20, X31
	0x037F039C B 0x37F03A4
	0x037F03A0 MOV X19, X0
	0x037F03A4 ADRP X8, 0x959000
	0x037F03A8 LDR X8, [X8 + 0x748]
	0x037F03AC LDR X1, [X8]
	0x037F03B0 ADD X0, X31, 0x60
	0x037F03B4 BL 0x2BC749C
	0x037F03B8 CBNZ X20, 0x37F03C4
	0x037F03BC MOV X0, X19
	0x037F03C0 BL 0x1D2C690
	0x037F03C4 MOV X0, X20
	0x037F03C8 BL 0x1C16F18
	0x037F03CC BL 0x1990590
	0x037F03D0 SUB X31, X31, 0x30
	0x037F03D4 STP X30, X21, [X31 + 0x10]
	0x037F03D8 STP X20, X19, [X31 + 0x20]
	0x037F03DC ADRP X20, 0xBF1000
	0x037F03E0 ADRP X21, 0x959000
	0x037F03E4 LDRB W8, [X20 + 0x369]
	0x037F03E8 LDR X21, [X21 + 0x5D8]
	0x037F03EC MOV X19, X0
	0x037F03F0 TBNZ X8, 0x0, 0x37F0438
	0x037F03F4 ADRP X0, 0x959000
	0x037F03F8 LDR X0, [X0 + 0x5D8]
	0x037F03FC BL 0x1C16CF4
	0x037F0400 ADRP X0, 0x959000
	0x037F0404 LDR X0, [X0 + 0x770]
	0x037F0408 BL 0x1C16CF4
	0x037F040C ADRP X0, 0x959000
	0x037F0410 LDR X0, [X0 + 0x778]
	0x037F0414 BL 0x1C16CF4
	0x037F0418 ADRP X0, 0x959000
	0x037F041C LDR X0, [X0 + 0x780]
	0x037F0420 BL 0x1C16CF4
	0x037F0424 ADRP X0, 0x903000
	0x037F0428 LDR X0, [X0 + 0x598]
	0x037F042C BL 0x1C16CF4
	0x037F0430 MOVZ W8, 0x1
	0x037F0434 STRB W8, [X20 + 0x369]
	0x037F0438 LDR X1, [X21]
	0x037F043C MOV X0, X19
	0x037F0440 BL 0x21A3F50
	0x037F0444 CBZ X0, 0x37F04EC
	0x037F0448 ADRP X20, 0x959000
	0x037F044C LDR X20, [X20 + 0x778]
	0x037F0450 MOV X1, X31
	0x037F0454 MOV X19, X0
	0x037F0458 BL 0x3E244BC
	0x037F045C LDR X2, [X20]
	0x037F0460 MOV W1, W0
	0x037F0464 ADD X0, X31, 0x8
	0x037F0468 STR X31, [X31 + 0x8]
	0x037F046C BL 0x24345B8
	0x037F0470 LDP W9, W8, [X31 + 0x8]
	0x037F0474 ANDS W31, W9, 0xFF
	0x037F0478 B.EQ 0x37F0484
	0x037F047C MOV X0, X31
	0x037F0480 CBZ W8, 0x37F04F4
	0x037F0484 ANDS W31, W9, 0xFF
	0x037F0488 B.EQ 0x37F04DC
	0x037F048C CMP W8, 0x1
	0x037F0490 B.NE 0x37F04DC
	0x037F0494 MOV X0, X19
	0x037F0498 MOV X1, X31
	0x037F049C BL 0x3E24E68
	0x037F04A0 ADRP X8, 0x903000
	0x037F04A4 LDR X8, [X8 + 0x598]
	0x037F04A8 MOV X20, X0
	0x037F04AC LDR X8, [X8]
	0x037F04B0 LDR W9, [X8 + 0xE0]
	0x037F04B4 CBNZ W9, 0x37F04C0
	0x037F04B8 MOV X0, X8
	0x037F04BC BL 0x1C16DFC
	0x037F04C0 MOV X0, X20
	0x037F04C4 MOV X1, X31
	0x037F04C8 MOV X2, X31
	0x037F04CC BL 0x3C3883C

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xBF2000
	009 Move W8, [X21+867]
	010 Move X20, X1
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x95A000
	019 Move X0, [X0+1712]
	020 Call 0x1C17CF4
	021 Move X0, 0x904000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move X0, 0x904000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x95A000
	028 Move X0, [X0+1720]
	029 Call 0x1C17CF4
	030 Move X0, 0x92B000
	031 Move X0, [X0+3184]
	032 Call 0x1C17CF4
	033 Move X0, 0x95A000
	034 Move X0, [X0+1728]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+867], W8
	038 Move X0, X19
	039 Move X1, X31
	040 Move [X31+24], X31
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {161}
	044 Move X22, 0x904000
	045 Move X22, [X22+1432]
	046 Move X1, X31
	047 Call Transform.get_parent, X0
	048 Compare X0, 0
	049 JumpIfEqual {55}
	050 Move X8, 0x95A000
	051 Move X8, [X8+1712]
	052 Move X1, [X8]
	053 Call 0x21A4F50, X0
	054 Move X21, X0
	055 Move X21, X31
	056 Move X0, [X22]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X21
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Equality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {81}
	069 Move X8, 0x904000
	070 Move X8, [X8+2600]
	071 Move X0, [X8]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X8, 0x95A000
	077 Move X8, [X8+1728]
	078 Move X1, X31
	079 Move X0, [X8]
	080 Call Debug.LogError, X0
	081 Move W8, [X19+72]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Compare W8, 0
	085 JumpIfNotEqual {153}
	086 Move X8, 0x95A000
	087 Move X8, [X8+1720]
	088 Add X19, X19, 108
	089 Move X0, [X8]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X0, X21
	095 Move V0, V9
	096 Move V1, V8
	097 Move X1, X20
	098 Move X2, X19
	099 Move X3, X31
	100 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	101 Move X8, 0x95A000
	102 Move X8, [X8+1720]
	103 Move X0, [X8]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Add X2, X31, 24
	109 Move X0, X21
	110 Move V0, V9
	111 Move V1, V8
	112 Move X1, X20
	113 Move X3, X31
	114 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	115 Move X0, X19
	116 Move X1, X31
	117 Call Component.get_transform, X0
	118 Compare X0, 0
	119 JumpIfEqual {161}
	120 Move X8, 0x92B000
	121 Move X8, [X8+3184]
	122 Move X1, [X8]
	123 Move X8, [X0]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move S8, [X31+24]
	126 Move S9, [X31+28]
	127 Move X1, X31
	128 Move V0, V8
	129 Move V1, V9
	130 Call RectTransform.set_anchoredPosition, X0, X1
	131 Move [X19+108], S8
	132 Move [X19+116], S9
	133 Move X8, 0x95A000
	134 Move X8, [X8+1720]
	135 Add X22, X19, 108
	136 Move X0, [X8]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move X0, X21
	142 Move V0, V9
	143 Move V1, V8
	144 Move X1, X20
	145 Move X2, X22
	146 Move X3, X31
	147 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	148 Move X0, X19
	149 Move V0, V9
	150 Move V1, V8
	151 Move X1, X20
	152 Call OnScreenStick.MoveStick, X0, X1, X2
	153 Move X20, [X31+48]
	154 Move X19, [X31+56]
	155 Move X22, [X31+32]
	156 Move X21, [X31+40]
	157 Move X30, [X31+16]
	158 Move D9, [X31+64]
	159 Move D8, [X31+72]
	160 Return 
	161 Call 0x1C17F20
	162 Call 0x1C181E0

Method: System.Void MoveStick(UnityEngine.Vector2 pointerPosition, UnityEngine.Camera uiCamera)

Disassembly:
	0x037F056C LDR X1, [X9]
	0x037F0570 LDRB W10, [X8 + 0x130]
	0x037F0574 LDRB W9, [X1 + 0x130]
	0x037F0578 CMP W10, W9
	0x037F057C B.CC 0x37F05E8
	0x037F0580 LDR X8, [X8 + 0xC8]
	0x037F0584 ADD X8, X8, X9, 0x3, LSL
	0x037F0588 LDUR X8, [X8 - 0x8]
	0x037F058C CMP X8, X1
	0x037F0590 B.NE 0x37F05E8
	0x037F0594 LDR X0, [X0 + 0x170]
	0x037F0598 CBZ X0, 0x37F05E4
	0x037F059C ADRP X8, 0x92B000
	0x037F05A0 LDR X8, [X8 + 0x558]
	0x037F05A4 LDR X1, [X8]
	0x037F05A8 BL 0x2E095F8
	0x037F05AC MOV X0, X19
	0x037F05B0 MOV V8.16B, V0.16B
	0x037F05B4 MOV V9.16B, V1.16B
	0x037F05B8 BL 0x37F03D0
	0x037F05BC MOV X1, X0
	0x037F05C0 MOV X0, X19
	0x037F05C4 MOV V0.16B, V8.16B
	0x037F05C8 MOV V1.16B, V9.16B
	0x037F05CC BL 0x37EF56C
	0x037F05D0 LDP X20, X19, [X31 + 0x30]
	0x037F05D4 LDR X30, [X31 + 0x20]
	0x037F05D8 LDP D9, D8, [X31 + 0x10]
	0x037F05DC ADD X31, X31, 0x40
	0x037F05E0 RET
	0x037F05E4 BL 0x1C16F20
	0x037F05E8 BL 0x1C171E0
	0x037F05EC STR X30, [X31 - 0x30]!
	0x037F05F0 STP X22, X21, [X31 + 0x10]
	0x037F05F4 STP X20, X19, [X31 + 0x20]
	0x037F05F8 ADRP X20, 0xBF1000
	0x037F05FC ADRP X22, 0x907000
	0x037F0600 ADRP X21, 0x959000
	0x037F0604 LDRB W8, [X20 + 0x368]
	0x037F0608 LDR X22, [X22 + 0x3D8]
	0x037F060C LDR X21, [X21 + 0x768]
	0x037F0610 MOV X19, X0
	0x037F0614 TBNZ X8, 0x0, 0x37F0638
	0x037F0618 ADRP X0, 0x907000
	0x037F061C LDR X0, [X0 + 0x3D8]
	0x037F0620 BL 0x1C16CF4
	0x037F0624 ADRP X0, 0x959000
	0x037F0628 LDR X0, [X0 + 0x768]
	0x037F062C BL 0x1C16CF4
	0x037F0630 MOVZ W8, 0x1
	0x037F0634 STRB W8, [X20 + 0x368]
	0x037F0638 MOV X0, X19
	0x037F063C BL 0x37EF964
	0x037F0640 LDR X0, [X22]
	0x037F0644 LDR X20, [X19 + 0x58]
	0x037F0648 BL 0x1C16F10
	0x037F064C LDR X2, [X21]
	0x037F0650 MOV X1, X19
	0x037F0654 MOV X3, X31
	0x037F0658 MOV X21, X0
	0x037F065C BL 0x2A719B8
	0x037F0660 CBZ X20, 0x37F0680
	0x037F0664 MOV X0, X20
	0x037F0668 MOV X1, X21
	0x037F066C LDP X20, X19, [X31 + 0x20]
	0x037F0670 LDP X22, X21, [X31 + 0x10]
	0x037F0674 MOV X2, X31
	0x037F0678 LDR X30, [X31], #0x30
	0x037F067C B 0x3734A5C
	0x037F0680 BL 0x1C16F20
	0x037F0684 SUB X31, X31, 0xC0
	0x037F0688 STP D11, D10, [X31 + 0x80]
	0x037F068C STP D9, D8, [X31 + 0x90]
	0x037F0690 STR X30, [X31 + 0xA0]
	0x037F0694 STP X20, X19, [X31 + 0xB0]
	0x037F0698 ADRP X20, 0xBF1000
	0x037F069C LDRB W8, [X20 + 0x36A]
	0x037F06A0 MOV X19, X0
	0x037F06A4 TBNZ X8, 0x0, 0x37F06C8
	0x037F06A8 ADRP X0, 0x903000
	0x037F06AC LDR X0, [X0 + 0x970]
	0x037F06B0 BL 0x1C16CF4
	0x037F06B4 ADRP X0, 0x92A000
	0x037F06B8 LDR X0, [X0 + 0xC70]
	0x037F06BC BL 0x1C16CF4
	0x037F06C0 MOVZ W8, 0x1
	0x037F06C4 STRB W8, [X20 + 0x36A]
	0x037F06C8 MOV X0, X19
	0x037F06CC MOV X1, X31
	0x037F06D0 BL 0x3C32E90
	0x037F06D4 CBZ X0, 0x37F083C
	0x037F06D8 MOV X1, X31
	0x037F06DC BL 0x3C3F49C
	0x037F06E0 CBZ X0, 0x37F083C
	0x037F06E4 ADRP X20, 0x92A000
	0x037F06E8 LDR X20, [X20 + 0xC70]
	0x037F06EC LDR X8, [X0]
	0x037F06F0 LDR X1, [X20]
	0x037F06F4 CMP X8, X1
	0x037F06F8 B.NE 0x37F0840
	0x037F06FC ADD X8, X31, 0x40
	0x037F0700 MOV X1, X31
	0x037F0704 BL 0x3C3F1C8
	0x037F0708 LDP V0, V1, [X31 + 0x40]
	0x037F070C LDP V2, V3, [X31 + 0x60]
	0x037F0710 ADD X0, X31, 0x0
	0x037F0714 MOV X1, X31
	0x037F0718 STP V0, V1, [X31]
	0x037F071C STP V2, V3, [X31 + 0x20]
	0x037F0720 BL 0x3C0D150
	0x037F0724 MOV X0, X19
	0x037F0728 MOV X1, X31
	0x037F072C BL 0x3C32E90
	0x037F0730 CBZ X0, 0x37F083C
	0x037F0734 LDR X1, [X20]
	0x037F0738 LDR X8, [X0]
	0x037F073C CMP X8, X1
	0x037F0740 B.NE 0x37F0840
	0x037F0744 ADRP X20, 0x903000
	0x037F0748 LDR X20, [X20 + 0x970]
	0x037F074C MOV X1, X31
	0x037F0750 BL 0x3C3E7F0
	0x037F0754 LDR X0, [X20]
	0x037F0758 MOV V8.16B, V0.16B
	0x037F075C MOV V9.16B, V1.16B
	0x037F0760 LDR W8, [X0 + 0xE0]
	0x037F0764 CBNZ W8, 0x37F076C
	0x037F0768 BL 0x1C16DFC
	0x037F076C MOV X0, X31
	0x037F0770 BL 0x3C018E4
	0x037F0774 TBZ X0, 0x0, 0x37F077C
	0x037F0778 LDP S8, S9, [X19 + 0x60]
	0x037F077C ADRP X8, 0xFFFFFFFFFD2F9000
	0x037F0780 ADRP X10, 0xFFFFFFFFFD2FA000
	0x037F0784 ADRP X9, 0xFFFFFFFFFD2FA000
	0x037F0788 LDR V10, [X8 + 0xF38]
	0x037F078C LDR V11, [X10 + 0x28C]
	0x037F0790 LDR V1, [X9 + 0x158]
	0x037F0794 FMOV S3, 1
	0x037F0798 MOV V0.16B, V10.16B
	0x037F079C MOV V2.16B, V11.16B
	0x037F07A0 MOV X0, X31
	0x037F07A4 BL 0x3C0D030
	0x037F07A8 LDR X0, [X20]
	0x037F07AC LDR W8, [X0 + 0xE0]
	0x037F07B0 CBNZ W8, 0x37F07B8
	0x037F07B4 BL 0x1C16DFC
	0x037F07B8 MOV X0, X31
	0x037F07BC BL 0x3C018E4
	0x037F07C0 MOV V1.16B, V9.16B
	0x037F07C4 MOV V0.16B, V8.16B
	0x037F07C8 TBZ X0, 0x0, 0x37F07E4
	0x037F07CC LDR W8, [X19 + 0x48]
	0x037F07D0 MOV V1.16B, V9.16B
	0x037F07D4 MOV V0.16B, V8.16B
	0x037F07D8 CMP W8, 0x2
	0x037F07DC B.NE 0x37F07E4
	0x037F07E0 LDP S0, S1, [X19 + 0x6C]
	0x037F07E4 LDR V2, [X19 + 0x38]
	0x037F07E8 BL 0x37F0844
	0x037F07EC LDR W8, [X19 + 0x48]
	0x037F07F0 CMP W8, 0x2
	0x037F07F4 B.NE 0x37F0824
	0x037F07F8 ADRP X8, 0xFFFFFFFFFD2FA000
	0x037F07FC LDR V0, [X8 + 0x3DC]
	0x037F0800 FMOV S3, 1
	0x037F0804 MOV V1.16B, V10.16B
	0x037F0808 MOV V2.16B, V11.16B
	0x037F080C MOV X0, X31
	0x037F0810 BL 0x3C0D030
	0x037F0814 LDR V2, [X19 + 0x3C]
	0x037F0818 MOV V0.16B, V8.16B
	0x037F081C MOV V1.16B, V9.16B
	0x037F0820 BL 0x37F0844
	0x037F0824 LDP X20, X19, [X31 + 0xB0]
	0x037F0828 LDR X30, [X31 + 0xA0]
	0x037F082C LDP D9, D8, [X31 + 0x90]
	0x037F0830 LDP D11, D10, [X31 + 0x80]
	0x037F0834 ADD X31, X31, 0xC0
	0x037F0838 RET
	0x037F083C BL 0x1C16F20
	0x037F0840 BL 0x1C171E0
	0x037F0844 SUB X31, X31, 0x60
	0x037F0848 STR D14, [X31 + 0x10]
	0x037F084C STP D13, D12, [X31 + 0x18]
	0x037F0850 STP D11, D10, [X31 + 0x28]
	0x037F0854 STP D9, D8, [X31 + 0x38]
	0x037F0858 STR X30, [X31 + 0x48]
	0x037F085C STP X20, X19, [X31 + 0x50]
	0x037F0860 ADRP X8, 0xFFFFFFFFFD2F9000
	0x037F0864 LDR V14, [X8 + 0xF4C]
	0x037F0868 MOV V8.16B, V2.16B
	0x037F086C MOV V9.16B, V1.16B
	0x037F0870 MOV V10.16B, V0.16B
	0x037F0874 MOV W19, W31
	0x037F0878 MOVZ W20, 0x3D000000
	0x037F087C SCVTF S0, W19
	0x037F0880 FMOV S1, W20
	0x037F0884 ADD W19, W19, 0x1
	0x037F0888 FMUL S0, S0, S1
	0x037F088C SCVTF S2, W19
	0x037F0890 FMUL S0, S0, S14
	0x037F0894 FMUL S1, S2, S1
	0x037F0898 FADD S0, S0, S0
	0x037F089C FMUL S1, S1, S14
	0x037F08A0 ADD X0, X31, 0xC
	0x037F08A4 ADD X1, X31, 0x8
	0x037F08A8 FADD S11, S1, S1
	0x037F08AC BL 0x3EB1BC0
	0x037F08B0 LDP S0, S1, [X31 + 0x8]
	0x037F08B4 ADD X0, X31, 0x4
	0x037F08B8 ADD X1, X31, 0x0
	0x037F08BC FMUL S0, S0, S8
	0x037F08C0 FMUL S1, S1, S8
	0x037F08C4 FADD S12, S10, S0
	0x037F08C8 MOV V0.16B, V11.16B
	0x037F08CC FADD S13, S9, S1
	0x037F08D0 BL 0x3EB1BC0
	0x037F08D4 LDP S0, S1, [X31]
	0x037F08D8 FMOV S2, W31
	0x037F08DC FMOV S5, W31
	0x037F08E0 MOV X0, X31
	0x037F08E4 FMUL S0, S0, S8
	0x037F08E8 FMUL S1, S1, S8
	0x037F08EC FADD S3, S10, S0
	0x037F08F0 FADD S4, S9, S1
	0x037F08F4 MOV V0.16B, V12.16B
	0x037F08F8 MOV V1.16B, V13.16B
	0x037F08FC BL 0x3C0CB04
	0x037F0900 CMP W19, 0x20
	0x037F0904 B.NE 0x37F087C
	0x037F0908 LDP X20, X19, [X31 + 0x50]
	0x037F090C LDR X30, [X31 + 0x48]
	0x037F0910 LDP D9, D8, [X31 + 0x38]
	0x037F0914 LDP D11, D10, [X31 + 0x28]
	0x037F0918 LDP D13, D12, [X31 + 0x18]
	0x037F091C LDR V14, [X31 + 0x10]
	0x037F0920 ADD X31, X31, 0x60
	0x037F0924 RET
	0x037F0928 STR X30, [X31 - 0x20]!
	0x037F092C STP X20, X19, [X31 + 0x10]
	0x037F0930 ADRP X20, 0xBF1000
	0x037F0934 LDRB W8, [X20 + 0x36B]
	0x037F0938 MOV X19, X0
	0x037F093C TBNZ X8, 0x0, 0x37F096C
	0x037F0940 ADRP X0, 0x903000
	0x037F0944 LDR X0, [X0 + 0x598]
	0x037F0948 BL 0x1C16CF4
	0x037F094C ADRP X0, 0x92A000
	0x037F0950 LDR X0, [X0 + 0xC70]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X21, 0xBF2000
	010 Move W8, [X21+868]
	011 Move X20, X1
	012 Move V8, V1
	013 Move V9, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0x95A000
	020 Move X0, [X0+1712]
	021 Call 0x1C17CF4
	022 Move X0, 0x904000
	023 Move X0, [X0+2600]
	024 Call 0x1C17CF4
	025 Move X0, 0x904000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move X0, 0x95A000
	029 Move X0, [X0+1744]
	030 Call 0x1C17CF4
	031 Move X0, 0x95A000
	032 Move X0, [X0+1720]
	033 Call 0x1C17CF4
	034 Move X0, 0x92B000
	035 Move X0, [X0+3184]
	036 Call 0x1C17CF4
	037 Move X0, 0x95A000
	038 Move X0, [X0+1728]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+868], W8
	042 Move X0, X19
	043 Move X1, X31
	044 Move [X31+56], X31
	045 Call Component.get_transform, X0
	046 Compare X0, 0
	047 JumpIfEqual {267}
	048 Move X22, 0x904000
	049 Move X22, [X22+1432]
	050 Move X1, X31
	051 Call Transform.get_parent, X0
	052 Compare X0, 0
	053 JumpIfEqual {59}
	054 Move X8, 0x95A000
	055 Move X8, [X8+1712]
	056 Move X1, [X8]
	057 Call 0x21A4F50, X0
	058 Move X21, X0
	059 Move X21, X31
	060 Move X0, [X22]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X21
	066 Move X1, X31
	067 Move X2, X31
	068 Call Object.op_Equality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {85}
	073 Move X8, 0x904000
	074 Move X8, [X8+2600]
	075 Move X0, [X8]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X8, 0x95A000
	081 Move X8, [X8+1728]
	082 Move X1, X31
	083 Move X0, [X8]
	084 Call Debug.LogError, X0
	085 Move X8, 0x95A000
	086 Move X8, [X8+1720]
	087 Move X0, [X8]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Add X2, X31, 56
	093 Move X0, X21
	094 Move V0, V9
	095 Move V1, V8
	096 Move X1, X20
	097 Move X3, X31
	098 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	099 Move V0, [X31+56]
	100 Move W8, [X19+72]
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Subtract V2, V0, V1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Compare W8, 0
	106 JumpIfNotEqual {249}
	107 Move X20, 0xBF2000
	108 Move W8, [X20+915]
	109 Move V1, [X19+56]
	110 Move [X31+1], V2
	111 Compare W8, 0
	112 Invalid "Jump target not found in method."
	113 Move X0, 0x904000
	114 Move X0, [X0+1448]
	115 Move [X31], V1
	116 Call 0x1C17CF4
	117 Move V1, [X31]
	118 Move V2, [X31+16]
	119 Move W8, 1
	120 Move [X20+915], W8
	121 NotImplemented "Instruction INVALID not yet implemented."
	122 NotImplemented "Instruction FADDP not yet implemented."
	123 Multiply S0, S1, S1
	124 NotImplemented "Instruction FCMP not yet implemented."
	125 Move X8, 0x904000
	126 Move X8, [X8+1448]
	127 Move X0, [X8]
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {135}
	131 Move [X31], V1
	132 Call 0x1C17DFC
	133 Move V1, [X31]
	134 Move V2, [X31+16]
	135 NotImplemented "Instruction FSQRT not yet implemented."
	136 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	137 NotImplemented "Instruction INVALID not yet implemented."
	138 NotImplemented "Instruction INVALID not yet implemented."
	139 Move [X31+1], V0
	140 Move X0, X19
	141 Move X1, X31
	142 Call Component.get_transform, X0
	143 Compare X0, 0
	144 JumpIfEqual {267}
	145 Move X8, 0x92B000
	146 Move X8, [X8+3184]
	147 Move V1, [X31+1]
	148 Move X1, [X8]
	149 Move X8, [X0]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move V0, [X19+96]
	152 Move X20, 0xBF2000
	153 Move W8, [X20+915]
	154 Move V1, [X19+56]
	155 Move [X31+1], V2
	156 Compare W8, 0
	157 Invalid "Jump target not found in method."
	158 Move X0, 0x904000
	159 Move X0, [X0+1448]
	160 Move [X31], V1
	161 Call 0x1C17CF4
	162 Move V1, [X31]
	163 Move V2, [X31+16]
	164 Move W8, 1
	165 Move [X20+915], W8
	166 NotImplemented "Instruction INVALID not yet implemented."
	167 NotImplemented "Instruction FADDP not yet implemented."
	168 Multiply S0, S1, S1
	169 NotImplemented "Instruction FCMP not yet implemented."
	170 Move X8, 0x904000
	171 Move X8, [X8+1448]
	172 Move X0, [X8]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {180}
	176 Move [X31], V1
	177 Call 0x1C17DFC
	178 Move V1, [X31]
	179 Move V2, [X31+16]
	180 NotImplemented "Instruction FSQRT not yet implemented."
	181 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	182 NotImplemented "Instruction INVALID not yet implemented."
	183 NotImplemented "Instruction INVALID not yet implemented."
	184 Move [X31+1], V0
	185 Move X0, X19
	186 Move X1, X31
	187 Call Component.get_transform, X0
	188 Compare X0, 0
	189 JumpIfEqual {267}
	190 Move X8, 0x92B000
	191 Move X8, [X8+3184]
	192 Move V1, [X31+1]
	193 Move X1, [X8]
	194 Move X8, [X0]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 NotImplemented "Instruction LDUR not yet implemented."
	197 Add V0, V1, V0
	198 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	199 Move V1, [X19+96]
	200 Move X20, 0xBF2000
	201 Move W8, [X20+915]
	202 Move V2, [X19+56]
	203 Subtract V8, V0, V1
	204 Compare W8, 0
	205 Invalid "Jump target not found in method."
	206 Move X0, 0x904000
	207 Move X0, [X0+1448]
	208 Move [X31+1], V2
	209 Call 0x1C17CF4
	210 Move V2, [X31+1]
	211 Move W8, 1
	212 Move [X20+915], W8
	213 NotImplemented "Instruction INVALID not yet implemented."
	214 NotImplemented "Instruction FADDP not yet implemented."
	215 Multiply S0, S2, S2
	216 NotImplemented "Instruction FCMP not yet implemented."
	217 Move X8, 0x904000
	218 Move X8, [X8+1448]
	219 Move X0, [X8]
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {226}
	223 Move [X31+1], V2
	224 Call 0x1C17DFC
	225 Move V2, [X31+1]
	226 NotImplemented "Instruction FSQRT not yet implemented."
	227 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	228 NotImplemented "Instruction INVALID not yet implemented."
	229 NotImplemented "Instruction INVALID not yet implemented."
	230 Move X0, X19
	231 Move X1, X31
	232 Call Component.get_transform, X0
	233 Compare X0, 0
	234 JumpIfEqual {267}
	235 Move X8, 0x92B000
	236 Move X8, [X8+3184]
	237 Move X1, [X8]
	238 Move X8, [X0]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move V0, [X19+96]
	241 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	242 Add V0, V8, V0
	243 Move [X31+1], V1
	244 Move S1, V0.S[1]
	245 Move X1, X31
	246 Call RectTransform.set_anchoredPosition, X0, X1
	247 Move V3, [X31+1]
	248 Move S2, V3.S[1]
	249 Move S3, V2.S[1]
	250 Move X8, 0x95A000
	251 Move V1, [X19+56]
	252 Move X8, [X8+1744]
	253 Move X0, X19
	254 NotImplemented "Instruction FDIV not yet implemented."
	255 Move X1, [X8]
	256 NotImplemented "Instruction FDIV not yet implemented."
	257 Call OnScreenControl.SendValueToControl, X0, X1
	258 Move X20, [X31+80]
	259 Move X19, [X31+88]
	260 Move X22, [X31+64]
	261 Move X21, [X31+72]
	262 Move X30, [X31+48]
	263 Move D9, [X31+32]
	264 Move D8, [X31+40]
	265 Add X31, X31, 96
	266 Return 
	267 Call 0x1C17F20
	268 Call 0x1C181E0

Method: System.Void EndInteraction()

Disassembly:
	0x037F0964 MOVZ W8, 0x1
	0x037F0968 STRB W8, [X20 + 0x36B]
	0x037F096C MOV X0, X19
	0x037F0970 MOV X1, X31
	0x037F0974 BL 0x3C32E90
	0x037F0978 CBZ X0, 0x37F0A08
	0x037F097C ADRP X8, 0x959000
	0x037F0980 LDR X8, [X8 + 0x738]
	0x037F0984 ADRP X20, 0x903000
	0x037F0988 MOV X2, X31
	0x037F098C LDR X1, [X8]
	0x037F0990 LDR X20, [X20 + 0x598]
	0x037F0994 BL 0x3C40E14
	0x037F0998 LDR X8, [X20]
	0x037F099C MOV X20, X0
	0x037F09A0 LDR W9, [X8 + 0xE0]
	0x037F09A4 CBNZ W9, 0x37F09B0
	0x037F09A8 MOV X0, X8
	0x037F09AC BL 0x1C16DFC
	0x037F09B0 MOV X0, X20
	0x037F09B4 MOV X1, X31
	0x037F09B8 BL 0x3C38948
	0x037F09BC TBZ X0, 0x0, 0x37F09FC
	0x037F09C0 CBZ X20, 0x37F0A08
	0x037F09C4 ADRP X8, 0x92A000
	0x037F09C8 LDR X8, [X8 + 0xC70]
	0x037F09CC LDR X1, [X8]
	0x037F09D0 LDR X8, [X20]
	0x037F09D4 CMP X8, X1
	0x037F09D8 B.NE 0x37F0A0C
	0x037F09DC LDR V0, [X19 + 0x3C]
	0x037F09E0 MOV X0, X20
	0x037F09E4 LDP X20, X19, [X31 + 0x10]
	0x037F09E8 MOV X1, X31
	0x037F09EC FADD S0, S0, S0
	0x037F09F0 MOV V1.16B, V0.16B
	0x037F09F4 LDR X30, [X31], #0x20
	0x037F09F8 B 0x3C3E99C
	0x037F09FC LDP X20, X19, [X31 + 0x10]
	0x037F0A00 LDR X30, [X31], #0x20
	0x037F0A04 RET
	0x037F0A08 BL 0x1C16F20
	0x037F0A0C MOV X0, X20
	0x037F0A10 BL 0x1C171E0
	0x037F0A14 LDR V0, [X0 + 0x38]
	0x037F0A18 RET
	0x037F0A1C STR S0, [X0 + 0x38]
	0x037F0A20 RET
	0x037F0A24 LDR V0, [X0 + 0x3C]
	0x037F0A28 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBF2000
	006 Move W8, [X20+869]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x95A000
	013 Move X0, [X0+1744]
	014 Call 0x1C17CF4
	015 Move X0, 0x92B000
	016 Move X0, [X0+3184]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+869], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Move S0, [X19+96]
	024 Move S1, [X19+100]
	025 Move [X19+108], S0
	026 Move [X19+116], S1
	027 Compare X0, 0
	028 JumpIfEqual {61}
	029 Move X8, 0x92B000
	030 Move X8, [X8+3184]
	031 Move X1, [X8]
	032 Move X8, [X0]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, 0x95A000
	035 Move X20, [X20+1744]
	036 Move X1, X31
	037 Call RectTransform.set_anchoredPosition, X0, X1
	038 Move X21, 0xBEA000
	039 Move W8, [X21+1935]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x90C000
	043 Move X0, [X0+3848]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+1935], W8
	047 Move X8, 0x90C000
	048 Move X8, [X8+3848]
	049 Move X1, [X20]
	050 Move X0, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X8, [X8]
	054 Move X8, [X8+184]
	055 Move S0, [X8]
	056 Move S1, [X8+4]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Call OnScreenControl.SendValueToControl, X0, X1
	060 Return 
	061 Call 0x1C17F20
	062 Call 0x1C181E0

Method: System.Void OnPointerDown(UnityEngine.InputSystem.InputAction/CallbackContext ctx)

Disassembly:
	0x037F1074 STR V2, [X31 + 0x4]
	0x037F1078 STR X8, [X31 + 0x50]
	0x037F107C BL 0x3756CD8
	0x037F1080 STR X0, [X31 + 0xF8]
	0x037F1084 LDR X0, [X19 + 0x18]
	0x037F1088 MOV X1, X31
	0x037F108C BL 0x32277A8
	0x037F1090 TBNZ X0, 0x0, 0x37F10A4
	0x037F1094 LDR X0, [X19 + 0x10]
	0x037F1098 MOV X1, X31
	0x037F109C BL 0x32277A8
	0x037F10A0 TBZ X0, 0x0, 0x37F1260
	0x037F10A4 LDR X0, [X19 + 0x18]
	0x037F10A8 MOV X1, X31
	0x037F10AC BL 0x32277A8
	0x037F10B0 TBZ X0, 0x0, 0x37F1240
	0x037F10B4 CBZ W28, 0x37F0EE0
	0x037F10B8 STR W28, [X31 + 0x10]
	0x037F10BC ADRP X8, 0x902000
	0x037F10C0 LDR X8, [X8 + 0x9D0]
	0x037F10C4 MOVZ W1, 0x4
	0x037F10C8 LDR X0, [X8]
	0x037F10CC BL 0x1C16D6C
	0x037F10D0 CBZ X0, 0x37F148C
	0x037F10D4 MOV X28, X0
	0x037F10D8 LDR X0, [X29]
	0x037F10DC CBZ X0, 0x37F10F0
	0x037F10E0 LDR X8, [X28]
	0x037F10E4 LDR X1, [X8 + 0x40]
	0x037F10E8 BL 0x1C16E00
	0x037F10EC CBZ X0, 0x37F1490
	0x037F10F0 LDR W8, [X28 + 0x18]
	0x037F10F4 CBZ W8, 0x37F1488
	0x037F10F8 LDR X8, [X29]
	0x037F10FC ADD X1, X31, 0x60
	0x037F1100 STR X8, [X28 + 0x20]
	0x037F1104 ADRP X8, 0x902000
	0x037F1108 LDR X8, [X8 + 0x758]
	0x037F110C LDR X0, [X8]
	0x037F1110 LDR W8, [X31 + 0x10]
	0x037F1114 STR W8, [X31 + 0x60]
	0x037F1118 BL 0x1C16E04
	0x037F111C MOV X29, X0
	0x037F1120 CBZ X0, 0x37F1138
	0x037F1124 LDR X8, [X28]
	0x037F1128 MOV X0, X29
	0x037F112C LDR X1, [X8 + 0x40]
	0x037F1130 BL 0x1C16E00
	0x037F1134 CBZ X0, 0x37F1490
	0x037F1138 LDR W8, [X28 + 0x18]
	0x037F113C CMP W8, 0x1
	0x037F1140 B.LS 0x37F1488
	0x037F1144 STR X29, [X28 + 0x28]
	0x037F1148 ADRP X8, 0x902000
	0x037F114C LDR X8, [X8 + 0x758]
	0x037F1150 ADD X1, X31, 0xA4
	0x037F1154 LDR X0, [X8]
	0x037F1158 LDR W8, [X31 + 0x14]
	0x037F115C STR W8, [X31 + 0xA4]
	0x037F1160 BL 0x1C16E04
	0x037F1164 MOV X29, X0
	0x037F1168 CBZ X0, 0x37F1180
	0x037F116C LDR X8, [X28]
	0x037F1170 MOV X0, X29
	0x037F1174 LDR X1, [X8 + 0x40]
	0x037F1178 BL 0x1C16E00
	0x037F117C CBZ X0, 0x37F1490
	0x037F1180 LDR W8, [X28 + 0x18]
	0x037F1184 CMP W8, 0x2
	0x037F1188 B.LS 0x37F1488
	0x037F118C STR X29, [X28 + 0x30]
	0x037F1190 CBZ X27, 0x37F11AC
	0x037F1194 LDR X8, [X28]
	0x037F1198 MOV X0, X27
	0x037F119C LDR X1, [X8 + 0x40]
	0x037F11A0 BL 0x1C16E00
	0x037F11A4 CBZ X0, 0x37F1490
	0x037F11A8 LDR W8, [X28 + 0x18]
	0x037F11AC CMP W8, 0x3
	0x037F11B0 B.LS 0x37F1488
	0x037F11B4 STR X27, [X28 + 0x38]
	0x037F11B8 ADRP X8, 0x958000
	0x037F11BC LDR X8, [X8 + 0x810]
	0x037F11C0 MOV X1, X28
	0x037F11C4 MOV X2, X31
	0x037F11C8 LDR X0, [X8]
	0x037F11CC BL 0x3227C5C
	0x037F11D0 ADRP X8, 0x92A000
	0x037F11D4 LDR X8, [X8 + 0xEC0]
	0x037F11D8 MOV X27, X0
	0x037F11DC LDR X8, [X8]
	0x037F11E0 LDR W9, [X8 + 0xE0]
	0x037F11E4 CBNZ W9, 0x37F11F0
	0x037F11E8 MOV X0, X8
	0x037F11EC BL 0x1C16DFC
	0x037F11F0 ADRP X8, 0x958000
	0x037F11F4 ADRP X28, 0x958000
	0x037F11F8 LDR X8, [X8 + 0x7E8]
	0x037F11FC LDR X28, [X28 + 0x7B8]
	0x037F1200 LDR W2, [X31 + 0x14]
	0x037F1204 ADD X0, X31, 0xF8
	0x037F1208 LDR X1, [X8]
	0x037F120C LDR X3, [X28]
	0x037F1210 BL 0x2207C08
	0x037F1214 ADRP X8, 0x958000
	0x037F1218 LDR X8, [X8 + 0x800]
	0x037F121C LDR X3, [X28]
	0x037F1220 LDR W28, [X31 + 0x10]
	0x037F1224 STR X0, [X31 + 0xA8]
	0x037F1228 LDR X1, [X8]
	0x037F122C ADD X0, X31, 0xA8
	0x037F1230 MOV W2, W28
	0x037F1234 BL 0x2207C08
	0x037F1238 STR X0, [X31 + 0xF8]
	0x037F123C B 0x37F12E0
	0x037F1240 ADRP X8, 0x958000
	0x037F1244 LDR X1, [X19 + 0x18]
	0x037F1248 LDR X8, [X8 + 0x7F0]
	0x037F124C MOV X2, X27
	0x037F1250 MOV X3, X31
	0x037F1254 LDR X0, [X8]
	0x037F1258 BL 0x32274B8
	0x037F125C B 0x37F12DC
	0x037F1260 ADRP X8, 0x902000
	0x037F1264 LDR X8, [X8 + 0xAC8]
	0x037F1268 MOVZ W1, 0x5
	0x037F126C LDR X0, [X8]
	0x037F1270 BL 0x1C16D6C
	0x037F1274 CBZ X0, 0x37F148C
	0x037F1278 LDR W8, [X0 + 0x18]
	0x037F127C CBZ W8, 0x37F1488
	0x037F1280 ADRP X9, 0x958000
	0x037F1284 LDR X9, [X9 + 0x7F0]
	0x037F1288 CMP W8, 0x1
	0x037F128C LDR X9, [X9]
	0x037F1290 STR X9, [X0 + 0x20]
	0x037F1294 B.EQ 0x37F1488
	0x037F1298 LDR X9, [X19 + 0x10]
	0x037F129C CMP W8, 0x2
	0x037F12A0 STR X9, [X0 + 0x28]
	0x037F12A4 B.LS 0x37F1488
	0x037F12A8 ADRP X9, 0x902000
	0x037F12AC LDR X9, [X9 + 0xDD8]
	0x037F12B0 CMP W8, 0x3
	0x037F12B4 LDR X9, [X9]
	0x037F12B8 STR X9, [X0 + 0x30]
	0x037F12BC B.EQ 0x37F1488
	0x037F12C0 LDR X9, [X19 + 0x18]
	0x037F12C4 CMP W8, 0x4
	0x037F12C8 STR X9, [X0 + 0x38]
	0x037F12CC B.LS 0x37F1488
	0x037F12D0 MOV X1, X31
	0x037F12D4 STR X27, [X0 + 0x40]
	0x037F12D8 BL 0x32278CC
	0x037F12DC MOV X27, X0
	0x037F12E0 ADRP X8, 0x92A000
	0x037F12E4 LDR X8, [X8 + 0xEC0]
	0x037F12E8 MOV W29, W28
	0x037F12EC LDR X0, [X8]
	0x037F12F0 LDR W8, [X0 + 0xE0]
	0x037F12F4 CBNZ W8, 0x37F12FC
	0x037F12F8 BL 0x1C16DFC
	0x037F12FC ADRP X8, 0x956000
	0x037F1300 ADRP X9, 0x958000
	0x037F1304 LDR X8, [X8 + 0xDD0]
	0x037F1308 LDR X9, [X9 + 0x7B8]
	0x037F130C ADD X0, X31, 0xF8
	0x037F1310 MOV W2, W21
	0x037F1314 LDR X1, [X8]
	0x037F1318 LDR X3, [X9]
	0x037F131C BL 0x2207C08
	0x037F1320 ADRP X8, 0x958000
	0x037F1324 ADRP X9, 0x958000
	0x037F1328 LDR X8, [X8 + 0x7F8]
	0x037F132C LDR X9, [X9 + 0x7C0]
	0x037F1330 STR X0, [X31 + 0xA8]
	0x037F1334 ADD X0, X31, 0xA8
	0x037F1338 LDR X1, [X8]
	0x037F133C LDR X3, [X9]
	0x037F1340 MOV W2, W22
	0x037F1344 BL 0x2207CC0
	0x037F1348 ADRP X8, 0x958000
	0x037F134C LDR X8, [X8 + 0x7A8]
	0x037F1350 STR X0, [X31 + 0xF8]
	0x037F1354 LDR X8, [X8]
	0x037F1358 MOV X0, X8
	0x037F135C BL 0x1C16F10
	0x037F1360 MOV X1, X31
	0x037F1364 MOV X28, X0
	0x037F1368 BL 0x33BDD8C
	0x037F136C CBZ X28, 0x37F148C
	0x037F1370 LDR X8, [X19 + 0x18]
	0x037F1374 LDR W9, [X31 + 0x14]
	0x037F1378 STP W21, W22, [X28 + 0x20]
	0x037F137C STR X8, [X28 + 0x10]
	0x037F1380 STP W29, W9, [X28 + 0x18]
	0x037F1384 LDR V0, [X31 + 0x10]
	0x037F1388 LDR X8, [X31 + 0x18]
	0x037F138C STR X25, [X28 + 0x48]
	0x037F1390 STUR V0, [X28 + 0x28]
	0x037F1394 STP X23, X8, [X28 + 0x38]
	0x037F1398 CBNZ X26, 0x37F13D0
	0x037F139C ADRP X8, 0x902000
	0x037F13A0 LDR X8, [X8 + 0x6C0]
	0x037F13A4 ADRP X9, 0x958000
	0x037F13A8 LDR X0, [X8]
	0x037F13AC LDR W8, [X0 + 0xE0]
	0x037F13B0 LDR X9, [X9 + 0x7B0]
	0x037F13B4 LDR X19, [X9]
	0x037F13B8 CBNZ W8, 0x37F13C0
	0x037F13BC BL 0x1C16DFC
	0x037F13C0 MOV X0, X19
	0x037F13C4 MOV X1, X31
	0x037F13C8 BL 0x338C698
	0x037F13CC MOV X26, X0

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+208], D9
	003 Move [X31+216], D8
	004 Move [X31+224], X29
	005 Move [X31+240], X30
	006 Move [X31+248], X23
	007 Move [X31+256], X22
	008 Move [X31+264], X21
	009 Move [X31+272], X20
	010 Move [X31+280], X19
	011 Move X20, 0xBF1000
	012 Move W8, [X20+870]
	013 Move X19, X0
	014 Move [X31+192], X1
	015 Move [X31+200], X2
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {55}
	020 Move X0, 0x907000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x959000
	024 Move X0, [X0+1864]
	025 Call 0x1C17CF4
	026 Move X0, 0x959000
	027 Move X0, [X0+1872]
	028 Call 0x1C17CF4
	029 Move X0, 0x959000
	030 Move X0, [X0+1880]
	031 Call 0x1C17CF4
	032 Move X0, 0x92A000
	033 Move X0, [X0+3576]
	034 Call 0x1C17CF4
	035 Move X0, 0x92B000
	036 Move X0, [X0+1368]
	037 Call 0x1C17CF4
	038 Move X0, 0x959000
	039 Move X0, [X0+1888]
	040 Call 0x1C17CF4
	041 Move X0, 0x959000
	042 Move X0, [X0+816]
	043 Call 0x1C17CF4
	044 Move X0, 0x903000
	045 Move X0, [X0+1432]
	046 Call 0x1C17CF4
	047 Move X0, 0x959000
	048 Move X0, [X0+1896]
	049 Call 0x1C17CF4
	050 Move X0, 0x957000
	051 Move X0, [X0+960]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X20+870], W8
	055 Move X20, 0xBE9000
	056 Move W8, [X20+1935]
	057 NotImplemented "Instruction MOVI not yet implemented."
	058 Move [X31+160], V0
	059 Move [X31+168], V0
	060 Move [X31+128], V0
	061 Move [X31+136], V0
	062 Move [X31+96], V0
	063 Move [X31+104], V0
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x90B000
	067 Move X0, [X0+3848]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X20+1935], W8
	071 Move X8, 0x90B000
	072 Move X8, [X8+3848]
	073 Add X0, X31, 192
	074 Move X1, X31
	075 Move X8, [X8]
	076 Move X8, [X8+184]
	077 Move S8, [X8]
	078 Move S9, [X8+4]
	079 Call CallbackContext.get_control, X0
	080 Compare X0, 0
	081 JumpIfEqual {105}
	082 Move X8, [X0+120]
	083 Compare X8, 0
	084 JumpIfEqual {105}
	085 Move X9, 0x957000
	086 Move X9, [X9+960]
	087 Move X10, [X8]
	088 Move X9, [X9]
	089 Move W12, [X10+304]
	090 Move W11, [X9+304]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X10, [X10+200]
	093 Add X10, X10, X11
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X0, [X8+368]
	097 Compare X0, 0
	098 JumpIfEqual {215}
	099 Move X8, 0x92B000
	100 Move X8, [X8+1368]
	101 Move X1, [X8]
	102 Call InputControl`1<Vector2>.ReadValue, X0
	103 Move V8, V0
	104 Move V9, V1
	105 Move X8, [X19+128]
	106 Compare X8, 0
	107 JumpIfEqual {215}
	108 Move X9, 0x92A000
	109 Move X9, [X9+3576]
	110 Move [X8+260], S8
	111 Move [X8+264], S9
	112 Move X0, [X9]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X31
	118 Call EventSystem.get_current
	119 Compare X0, 0
	120 JumpIfEqual {215}
	121 Move X2, [X19+120]
	122 Move X1, [X19+128]
	123 Move X3, X31
	124 Call EventSystem.RaycastAll, X0, X1, X2
	125 Move X0, [X19+120]
	126 Compare X0, 0
	127 JumpIfEqual {215}
	128 Move W8, [X0+24]
	129 Compare W8, 0
	130 JumpIfEqual {204}
	131 Move X8, 0x959000
	132 Move X8, [X8+1888]
	133 Move X22, 0x959000
	134 Move X23, 0x903000
	135 Move X1, [X8]
	136 Move X22, [X22+1872]
	137 Move X23, [X23+1432]
	138 Add X8, X31, 0
	139 Call List`1<RaycastResult>.GetEnumerator, X0
	140 Add X0, X31, 96
	141 Add X1, X31, 0
	142 Move W2, 96
	143 Call 0x3EB2AC0
	144 Move X1, [X22]
	145 Add X0, X31, 96
	146 Call Enumerator<RaycastResult>.MoveNext, X0
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {199}
	151 Move X20, [X31+112]
	152 Move X0, X19
	153 Move X1, X31
	154 Call Component.get_gameObject, X0
	155 Move X21, X0
	156 Move X0, [X23]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move X0, X20
	162 Move X1, X21
	163 Move X2, X31
	164 Call Object.op_Inequality, X0, X1
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfEqual {144}
	169 Move X8, 0x959000
	170 Move X8, [X8+1864]
	171 Add X0, X31, 96
	172 Move X1, [X8]
	173 Call Enumerator<RaycastResult>.Dispose, X0
	174 Move X0, X19
	175 Call OnScreenStick.GetCameraFromCanvas, X0
	176 Move X1, X0
	177 Move X0, X19
	178 Move V0, V8
	179 Move V1, V9
	180 Call OnScreenStick.BeginInteraction, X0, X1, X2
	181 Move X8, 0x907000
	182 Move X20, [X19+88]
	183 Move X8, [X8+984]
	184 Move X0, [X8]
	185 Call 0x1C17F10
	186 Move X8, 0x959000
	187 Move X8, [X8+1896]
	188 Move X1, X19
	189 Move X3, X31
	190 Move X21, X0
	191 Move X2, [X8]
	192 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	193 Compare X20, 0
	194 JumpIfEqual {215}
	195 Move X0, X20
	196 Move X1, X21
	197 Move X2, X31
	198 Call InputAction.add_performed, X0, X1
	199 Move X8, 0x959000
	200 Move X8, [X8+1864]
	201 Add X0, X31, 96
	202 Move X1, [X8]
	203 Call Enumerator<RaycastResult>.Dispose, X0
	204 Move X20, [X31+272]
	205 Move X19, [X31+280]
	206 Move X22, [X31+256]
	207 Move X21, [X31+264]
	208 Move X30, [X31+240]
	209 Move X23, [X31+248]
	210 Move X29, [X31+224]
	211 Move D9, [X31+208]
	212 Move D8, [X31+216]
	213 Add X31, X31, 288
	214 Return 
	215 Call 0x1C17F20
	216 Move X19, X0
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move X0, X19
	219 Call 0x3EB2AD0
	220 Move X20, [X0]
	221 Call 0x3EB2AE0
	222 Move X8, 0x959000
	223 Move X8, [X8+1864]
	224 Add X0, X31, 96
	225 Move X1, [X8]
	226 Call Enumerator<RaycastResult>.Dispose, X0
	227 Compare X20, 0
	228 JumpIfEqual {204}
	229 Move X0, X20
	230 Call 0x1C17F18
	231 Move X20, X31
	232 Move X19, X0
	233 Move X8, 0x959000
	234 Move X8, [X8+1864]
	235 Move X1, [X8]
	236 Add X0, X31, 96
	237 Call Enumerator<RaycastResult>.Dispose, X0
	238 Compare X20, 0
	239 JumpIfNotEqual {242}
	240 Move X0, X19
	241 Call 0x1D2D690
	242 Move X0, X20
	243 Call 0x1C17F18
	244 Call 0x1991590

Method: System.Void OnPointerMove(UnityEngine.InputSystem.InputAction/CallbackContext ctx)

Disassembly:
	0x037F1504 ADRP X0, 0x92A000
	0x037F1508 LDR X0, [X0 + 0xD68]
	0x037F150C BL 0x1C16CF4
	0x037F1510 ADRP X0, 0x958000
	0x037F1514 LDR X0, [X0 + 0x808]
	0x037F1518 BL 0x1C16CF4
	0x037F151C MOVZ W8, 0x1
	0x037F1520 STRB W8, [X23 + 0x36E]
	0x037F1524 MOVI V0.2D, 0x0
	0x037F1528 STR X31, [X31 + 0xC8]
	0x037F152C STP X31, X31, [X31 + 0x80]
	0x037F1530 STP X31, X31, [X31 + 0x40]
	0x037F1534 STP V0, V0, [X31 + 0x60]
	0x037F1538 STR V0, [X31 + 0x5]
	0x037F153C LDR X0, [X20]
	0x037F1540 LDR X1, [X22]
	0x037F1544 MOV X2, X31
	0x037F1548 BL 0x3226EF8
	0x037F154C TBNZ X0, 0x0, 0x37F15A0
	0x037F1550 MOVI V0.2D, 0x0
	0x037F1554 STP V0, V0, [X31 + 0xA0]
	0x037F1558 STR V0, [X31 + 0x9]
	0x037F155C LDR X0, [X20 + 0x30]
	0x037F1560 MOV X1, X31
	0x037F1564 BL 0x32277A8
	0x037F1568 TBNZ X0, 0x0, 0x37F16DC
	0x037F156C LDR X0, [X20 + 0x30]
	0x037F1570 ADD X8, X31, 0x0
	0x037F1574 BL 0x37F1BFC
	0x037F1578 LDP V1, V0, [X31 + 0x10]
	0x037F157C STP V1, V0, [X31 + 0xA0]
	0x037F1580 LDR V0, [X31]
	0x037F1584 LDR X8, [X31 + 0xB0]
	0x037F1588 STR V0, [X31 + 0x9]
	0x037F158C CBZ X8, 0x37F16DC
	0x037F1590 LDR X8, [X8 + 0x18]
	0x037F1594 CBZ X8, 0x37F16DC
	0x037F1598 ADD X21, X31, 0x90
	0x037F159C B 0x37F1A14
	0x037F15A0 LDR X8, [X20 + 0x30]
	0x037F15A4 LDP V1, V0, [X20 + 0x10]
	0x037F15A8 LDR V2, [X20]
	0x037F15AC ADRP X0, 0x92D000
	0x037F15B0 STR X8, [X31 + 0x30]
	0x037F15B4 STP V1, V0, [X31 + 0x10]
	0x037F15B8 STR V2, [X31]
	0x037F15BC LDR X0, [X0 + 0x4F0]
	0x037F15C0 BL 0x1C16D08
	0x037F15C4 ADD X1, X31, 0x0
	0x037F15C8 BL 0x1C16E04
	0x037F15CC MOV X19, X0
	0x037F15D0 ADRP X0, 0x958000
	0x037F15D4 LDR X0, [X0 + 0x820]
	0x037F15D8 BL 0x1C16D08
	0x037F15DC MOV X1, X19
	0x037F15E0 MOV X2, X31
	0x037F15E4 BL 0x321EFD0
	0x037F15E8 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xBF1000
	008 Move W8, [X20+871]
	009 Move X19, X0
	010 Move [X31], X1
	011 Move [X31+8], X2
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x92B000
	017 Move X0, [X0+1368]
	018 Call 0x1C17CF4
	019 Move X0, 0x957000
	020 Move X0, [X0+960]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+871], W8
	024 Add X0, X31, 0
	025 Move X1, X31
	026 Call CallbackContext.get_control, X0
	027 Compare X0, 0
	028 JumpIfEqual {66}
	029 Move X0, [X0+120]
	030 Compare X0, 0
	031 JumpIfEqual {66}
	032 Move X9, 0x957000
	033 Move X9, [X9+960]
	034 Move X8, [X0]
	035 Move X1, [X9]
	036 Move W10, [X8+304]
	037 Move W9, [X1+304]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X8, [X8+200]
	040 Add X8, X8, X9
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, [X0+368]
	044 Compare X0, 0
	045 JumpIfEqual {66}
	046 Move X8, 0x92B000
	047 Move X8, [X8+1368]
	048 Move X1, [X8]
	049 Call InputControl`1<Vector2>.ReadValue, X0
	050 Move X0, X19
	051 Move V8, V0
	052 Move V9, V1
	053 Call OnScreenStick.GetCameraFromCanvas, X0
	054 Move X1, X0
	055 Move X0, X19
	056 Move V0, V8
	057 Move V1, V9
	058 Call OnScreenStick.MoveStick, X0, X1, X2
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X30, [X31+32]
	062 Move D9, [X31+16]
	063 Move D8, [X31+24]
	064 Add X31, X31, 64
	065 Return 
	066 Call 0x1C17F20
	067 Call 0x1C181E0

Method: System.Void OnPointerUp(UnityEngine.InputSystem.InputAction/CallbackContext ctx)

Disassembly:
	0x037F15EC ADRP X0, 0x90A000
	0x037F15F0 LDR X0, [X0 + 0x578]
	0x037F15F4 BL 0x1C16D08
	0x037F15F8 BL 0x1C16F10
	0x037F15FC MOV X1, X19
	0x037F1600 MOV X2, X31
	0x037F1604 MOV X20, X0
	0x037F1608 BL 0x3314A68
	0x037F160C ADRP X0, 0x958000
	0x037F1610 LDR X0, [X0 + 0x818]
	0x037F1614 BL 0x1C16D08
	0x037F1618 MOV X1, X0
	0x037F161C MOV X0, X20
	0x037F1620 BL 0x1C16DEC
	0x037F1624 CMP W1, 0x1
	0x037F1628 MOV X22, X0
	0x037F162C B.NE 0x37F1BA8
	0x037F1630 MOV X0, X22
	0x037F1634 BL 0x3EB1AD0
	0x037F1638 MOV X22, X0
	0x037F163C ADRP X0, 0x902000
	0x037F1640 LDR X0, [X0 + 0x7D0]
	0x037F1644 BL 0x1C16D08
	0x037F1648 LDR X8, [X22]
	0x037F164C LDR X1, [X8]
	0x037F1650 BL 0x1C17270
	0x037F1654 TBZ X0, 0x0, 0x37F1904
	0x037F1658 LDR X22, [X22]
	0x037F165C BL 0x3EB1AE0
	0x037F1660 LDR X8, [X20 + 0x30]
	0x037F1664 LDP V1, V0, [X20 + 0x10]
	0x037F1668 LDR V2, [X20]
	0x037F166C ADRP X0, 0x92D000
	0x037F1670 STR X8, [X31 + 0x30]
	0x037F1674 STP V1, V0, [X31 + 0x10]
	0x037F1678 STR V2, [X31]
	0x037F167C LDR X0, [X0 + 0x4F0]
	0x037F1680 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF1000
	007 Move X22, 0x907000
	008 Move X21, 0x959000
	009 Move W8, [X20+872]
	010 Move X22, [X22+984]
	011 Move X21, [X21+1896]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x907000
	018 Move X0, [X0+984]
	019 Call 0x1C17CF4
	020 Move X0, 0x959000
	021 Move X0, [X0+1896]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+872], W8
	025 Move X0, X19
	026 Call OnScreenStick.EndInteraction, X0
	027 Move X0, [X22]
	028 Move X20, [X19+88]
	029 Call 0x1C17F10
	030 Move X2, [X21]
	031 Move X1, X19
	032 Move X3, X31
	033 Move X21, X0
	034 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	035 Compare X20, 0
	036 JumpIfEqual {47}
	037 Move X0, X20
	038 Move X1, X21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X2, X31
	044 Move X30, [X31+48]
	045 Call InputAction.remove_performed, X0, X1
	046 Return 
	047 Call 0x1C17F20

Method: UnityEngine.Camera GetCameraFromCanvas()

Disassembly:
	0x037F13D0 STR X26, [X28 + 0x50]
	0x037F13D4 CBZ X20, 0x37F148C
	0x037F13D8 STR X28, [X20 + 0x10]
	0x037F13DC ADRP X8, 0x957000
	0x037F13E0 LDR X8, [X8 + 0xE10]
	0x037F13E4 LDR X0, [X8]
	0x037F13E8 BL 0x1C16F10
	0x037F13EC ADRP X8, 0x958000
	0x037F13F0 LDR X8, [X8 + 0x7D0]
	0x037F13F4 MOV X1, X20
	0x037F13F8 MOV X3, X31
	0x037F13FC MOV X19, X0
	0x037F1400 LDR X2, [X8]
	0x037F1404 BL 0x2D27AA8
	0x037F1408 ADRP X8, 0x957000
	0x037F140C LDR X1, [X31 + 0xF8]
	0x037F1410 LDR X8, [X8 + 0xFB0]
	0x037F1414 ADD X0, X31, 0x60
	0x037F1418 STP X31, X31, [X31 + 0x60]
	0x037F141C LDR X2, [X8]
	0x037F1420 BL 0x243321C
	0x037F1424 ADRP X8, 0x92A000
	0x037F1428 LDR X8, [X8 + 0x270]
	0x037F142C LDR X0, [X8]
	0x037F1430 LDR W8, [X0 + 0xE0]
	0x037F1434 CBNZ W8, 0x37F143C
	0x037F1438 BL 0x1C16DFC
	0x037F143C LDP X3, X4, [X31 + 0x60]
	0x037F1440 MOV X0, X19
	0x037F1444 MOV X1, X27
	0x037F1448 MOV X2, X25
	0x037F144C MOV X5, X31
	0x037F1450 BL 0x376CED8
	0x037F1454 LDR X8, [X24 + 0x28]
	0x037F1458 LDR X9, [X31 + 0x118]
	0x037F145C CMP X8, X9
	0x037F1460 B.NE 0x37F149C
	0x037F1464 MOV X0, X27
	0x037F1468 LDP X20, X19, [X31 + 0x170]
	0x037F146C LDP X22, X21, [X31 + 0x160]
	0x037F1470 LDP X24, X23, [X31 + 0x150]
	0x037F1474 LDP X26, X25, [X31 + 0x140]
	0x037F1478 LDP X28, X27, [X31 + 0x130]
	0x037F147C LDP X29, X30, [X31 + 0x120]
	0x037F1480 ADD X31, X31, 0x180
	0x037F1484 RET
	0x037F1488 BL 0x1C16F28
	0x037F148C BL 0x1C16F20
	0x037F1490 BL 0x1C16F44
	0x037F1494 MOV X1, X31
	0x037F1498 BL 0x1C16DEC
	0x037F149C BL 0x3EB1B20
	0x037F14A0 MOV X1, X31
	0x037F14A4 B 0x33BDD8C
	0x037F14A8 SUB X31, X31, 0x110
	0x037F14AC STR X29, [X31 + 0xC0]
	0x037F14B0 STP X30, X25, [X31 + 0xD0]
	0x037F14B4 STP X24, X23, [X31 + 0xE0]
	0x037F14B8 STP X22, X21, [X31 + 0xF0]
	0x037F14BC STP X20, X19, [X31 + 0x100]
	0x037F14C0 ADRP X23, 0xBF0000
	0x037F14C4 ADRP X22, 0x958000
	0x037F14C8 MOV X19, X8
	0x037F14CC LDRB W8, [X23 + 0x36E]
	0x037F14D0 LDR X22, [X22 + 0x808]
	0x037F14D4 MOV X21, X1
	0x037F14D8 MOV X20, X0
	0x037F14DC TBNZ X8, 0x0, 0x37F1524
	0x037F14E0 ADRP X0, 0x902000
	0x037F14E4 LDR X0, [X0 + 0x618]
	0x037F14E8 BL 0x1C16CF4
	0x037F14EC ADRP X0, 0x958000
	0x037F14F0 LDR X0, [X0 + 0x818]
	0x037F14F4 BL 0x1C16CF4
	0x037F14F8 ADRP X0, 0x956000
	0x037F14FC LDR X0, [X0 + 0xFE8]
	0x037F1500 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF1000
	007 Move X21, 0x959000
	008 Move W8, [X20+873]
	009 Move X21, [X21+1496]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x959000
	016 Move X0, [X0+1496]
	017 Call 0x1C17CF4
	018 Move X0, 0x959000
	019 Move X0, [X0+1904]
	020 Call 0x1C17CF4
	021 Move X0, 0x959000
	022 Move X0, [X0+1912]
	023 Call 0x1C17CF4
	024 Move X0, 0x959000
	025 Move X0, [X0+1920]
	026 Call 0x1C17CF4
	027 Move X0, 0x903000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+873], W8
	032 Move X1, [X21]
	033 Move X0, X19
	034 Call 0x21A4F50, X0
	035 Compare X0, 0
	036 JumpIfEqual {82}
	037 Move X20, 0x959000
	038 Move X20, [X20+1912]
	039 Move X1, X31
	040 Move X19, X0
	041 Call Canvas.get_renderMode, X0
	042 Move X2, [X20]
	043 Move W1, W0
	044 Add X0, X31, 8
	045 Move [X31+8], X31
	046 Call Nullable`1<Int32Enum>..ctor, X0, X1
	047 Move W9, [X31+8]
	048 Move W8, [X31+12]
	049 And W31, W9, 255
	050 Move X0, X31
	051 Compare W8, 0
	052 JumpIfEqual {84}
	053 And W31, W9, 255
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X19
	056 Move X1, X31
	057 Call Canvas.get_worldCamera, X0
	058 Move X8, 0x903000
	059 Move X8, [X8+1432]
	060 Move X20, X0
	061 Move X8, [X8]
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call Object.op_Equality, X0, X1
	071 Move W8, W0
	072 Move X0, X31
	073 Move TEMP, X8
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {84}
	077 Move X0, X19
	078 Move X1, X31
	079 Call Canvas.get_worldCamera, X0
	080 Compare X0, 0
	081 JumpIfNotEqual {84}
	082 Move X0, X31
	083 Call Camera.get_main
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X30, [X31+16]
	087 Move X21, [X31+24]
	088 Add X31, X31, 48
	089 Return X0

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x037F1684 ADD X1, X31, 0x0
	0x037F1688 BL 0x1C16E04
	0x037F168C MOV X23, X0
	0x037F1690 ADRP X0, 0x958000
	0x037F1694 LDR X0, [X0 + 0x828]
	0x037F1698 BL 0x1C16D08
	0x037F169C MOV X1, X23
	0x037F16A0 MOV X2, X31
	0x037F16A4 BL 0x321EFD0
	0x037F16A8 MOV X23, X0
	0x037F16AC ADRP X0, 0x902000
	0x037F16B0 LDR X0, [X0 + 0xA28]
	0x037F16B4 BL 0x1C16D08
	0x037F16B8 LDR W8, [X0 + 0xE0]
	0x037F16BC CBNZ W8, 0x37F16C4
	0x037F16C0 BL 0x1C16DFC
	0x037F16C4 MOV X0, X23
	0x037F16C8 MOV X1, X31
	0x037F16CC BL 0x3C0649C
	0x037F16D0 MOV X0, X22
	0x037F16D4 MOV X1, X31
	0x037F16D8 BL 0x3C02C84
	0x037F16DC ADD X0, X31, 0x0
	0x037F16E0 MOVZ W1, 0x48
	0x037F16E4 MOVZ W2, 0x49
	0x037F16E8 MOVZ W3, 0x44
	0x037F16EC MOVZ W4, 0x53
	0x037F16F0 MOV X5, X31
	0x037F16F4 STR W31, [X31]
	0x037F16F8 BL 0x375AA28
	0x037F16FC LDR W1, [X31]
	0x037F1700 ADD X0, X31, 0xC8
	0x037F1704 MOVZ W2, 0x8
	0x037F1708 MOV X3, X31
	0x037F170C BL 0x37FE6B4
	0x037F1710 CBZ X21, 0x37F18FC
	0x037F1714 LDR X8, [X21 + 0x18]
	0x037F1718 LDR X0, [X21 + 0x40]
	0x037F171C LDR X2, [X21 + 0x28]
	0x037F1720 ADRP X23, 0x956000
	0x037F1724 LDR X23, [X23 + 0xFE8]
	0x037F1728 ADD X1, X31, 0xC8
	0x037F172C BLR X8
	0x037F1730 CMP X0, 0x1
	0x037F1734 B.LT 0x37F17F0
	0x037F1738 MOV X22, X0
	0x037F173C ADD X0, X31, 0x0
	0x037F1740 MOVZ W1, 0x48
	0x037F1744 MOVZ W2, 0x49
	0x037F1748 MOVZ W3, 0x44
	0x037F174C MOVZ W4, 0x44
	0x037F1750 MOV X5, X31
	0x037F1754 STR W31, [X31]
	0x037F1758 BL 0x375AA28
	0x037F175C LDR W0, [X31]
	0x037F1760 MOV W1, W22
	0x037F1764 MOV X2, X31
	0x037F1768 BL 0x37FEB8C
	0x037F176C LDR X2, [X23]
	0x037F1770 STP X0, X1, [X31 + 0x80]
	0x037F1774 BL 0x2222688
	0x037F1778 MOV X23, X0
	0x037F177C LDR X0, [X21 + 0x40]
	0x037F1780 LDR X8, [X21 + 0x18]
	0x037F1784 LDR X2, [X21 + 0x28]
	0x037F1788 MOV X1, X23
	0x037F178C BLR X8
	0x037F1790 CMP X0, X22
	0x037F1794 B.NE 0x37F17DC
	0x037F1798 MOV X0, X23
	0x037F179C MOV X1, X31
	0x037F17A0 BL 0x37FEB84
	0x037F17A4 ADD X2, X31, 0x90
	0x037F17A8 MOV W1, W22
	0x037F17AC BL 0x37F2AF0
	0x037F17B0 TBZ X0, 0x0, 0x37F17DC
	0x037F17B4 ADRP X8, 0x92A000
	0x037F17B8 LDR X8, [X8 + 0xD68]
	0x037F17BC ADD X0, X31, 0x80
	0x037F17C0 LDR X1, [X8]
	0x037F17C4 BL 0x23C9DBC
	0x037F17C8 ADD X0, X31, 0x90
	0x037F17CC ADD X21, X31, 0x90
	0x037F17D0 BL 0x37F3698
	0x037F17D4 STR X0, [X20 + 0x30]
	0x037F17D8 B 0x37F1A14
	0x037F17DC MOVI V0.2D, 0x0
	0x037F17E0 ADD X0, X31, 0x80
	0x037F17E4 STP V0, V0, [X31 + 0x60]
	0x037F17E8 STR V0, [X31 + 0x5]
	0x037F17EC B 0x37F1A00
	0x037F17F0 ADD X0, X31, 0x0
	0x037F17F4 MOVZ W1, 0x48
	0x037F17F8 MOVZ W2, 0x49
	0x037F17FC MOVZ W3, 0x44
	0x037F1800 MOVZ W4, 0x50
	0x037F1804 MOV X5, X31
	0x037F1808 STR W31, [X31]
	0x037F180C BL 0x375AA28
	0x037F1810 LDR W0, [X31]
	0x037F1814 MOVZ W1, 0x200000
	0x037F1818 MOV X2, X31
	0x037F181C BL 0x37FEB8C
	0x037F1820 LDR X2, [X23]
	0x037F1824 STP X0, X1, [X31 + 0x40]
	0x037F1828 BL 0x2222688
	0x037F182C MOV X22, X0
	0x037F1830 LDR X0, [X21 + 0x40]
	0x037F1834 LDR X8, [X21 + 0x18]
	0x037F1838 LDR X2, [X21 + 0x28]
	0x037F183C MOV X1, X22
	0x037F1840 BLR X8

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], D11
	003 Move [X31+136], D10
	004 Move [X31+144], D9
	005 Move [X31+152], D8
	006 Move [X31+160], X30
	007 Move [X31+176], X20
	008 Move [X31+184], X19
	009 Move X20, 0xBF1000
	010 Move W8, [X20+874]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x903000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x92A000
	020 Move X0, [X0+3184]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+874], W8
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_transform, X0
	027 Compare X0, 0
	028 JumpIfEqual {133}
	029 Move X1, X31
	030 Call Transform.get_parent, X0
	031 Compare X0, 0
	032 JumpIfEqual {133}
	033 Move X20, 0x92A000
	034 Move X20, [X20+3184]
	035 Move X8, [X0]
	036 Move X1, [X20]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X8, X31, 64
	039 Move X1, X31
	040 Call Transform.get_localToWorldMatrix, X0
	041 Move V0, [X31+64]
	042 Move V1, [X31+80]
	043 Move V2, [X31+96]
	044 Move V3, [X31+112]
	045 Add X0, X31, 0
	046 Move X1, X31
	047 Move [X31], V0
	048 Move [X31+8], V1
	049 Move [X31+32], V2
	050 Move [X31+40], V3
	051 Call Gizmos.set_matrix, X0
	052 Move X0, X19
	053 Move X1, X31
	054 Call Component.get_transform, X0
	055 Compare X0, 0
	056 JumpIfEqual {133}
	057 Move X1, [X20]
	058 Move X8, [X0]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, 0x903000
	061 Move X20, [X20+2416]
	062 Move X1, X31
	063 Call RectTransform.get_anchoredPosition, X0
	064 Move X0, [X20]
	065 Move V8, V0
	066 Move V9, V1
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X31
	072 Call Application.get_isPlaying
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {79}
	077 Move S8, [X19+96]
	078 Move S9, [X19+100]
	079 Move X8, -47214592
	080 Move X10, -47210496
	081 Move X9, -47210496
	082 Move V10, [X8+3896]
	083 Move V11, [X10+652]
	084 Move V1, [X9+344]
	085 Move S3, 1
	086 Move V0, V10
	087 Move V2, V11
	088 Move X0, X31
	089 Call Gizmos.set_color, X0
	090 Move X0, [X20]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X31
	096 Call Application.get_isPlaying
	097 Move V1, V9
	098 Move V0, V8
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {109}
	103 Move W8, [X19+72]
	104 Move V1, V9
	105 Move V0, V8
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move S0, [X19+108]
	108 Move S1, [X19+112]
	109 Move V2, [X19+56]
	110 Call OnScreenStick.DrawGizmoCircle, X0, X1, V0
	111 Move W8, [X19+72]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X8, -47210496
	114 Move V0, [X8+988]
	115 Move S3, 1
	116 Move V1, V10
	117 Move V2, V11
	118 Move X0, X31
	119 Call Gizmos.set_color, X0
	120 Move V2, [X19+60]
	121 Move V0, V8
	122 Move V1, V9
	123 Call OnScreenStick.DrawGizmoCircle, X0, X1, V0
	124 Move X20, [X31+176]
	125 Move X19, [X31+184]
	126 Move X30, [X31+160]
	127 Move D9, [X31+144]
	128 Move D8, [X31+152]
	129 Move D11, [X31+128]
	130 Move D10, [X31+136]
	131 Add X31, X31, 192
	132 Return 
	133 Call 0x1C17F20
	134 Call 0x1C181E0

Method: System.Void DrawGizmoCircle(UnityEngine.Vector2 center, System.Single radius)

Disassembly:
	0x037F1844 MOV X23, X0
	0x037F1848 TBNZ X0, 0x0, 0x37F19F0
	0x037F184C ADRP X8, 0x902000
	0x037F1850 LDR X8, [X8 + 0x618]
	0x037F1854 LDR X0, [X8]
	0x037F1858 MOV W1, W23
	0x037F185C BL 0x1C16D6C
	0x037F1860 MOV X24, X0
	0x037F1864 CBZ X0, 0x37F187C
	0x037F1868 LDR W8, [X24 + 0x18]
	0x037F186C ADD X9, X24, 0x20
	0x037F1870 CMP W8, 0x0
	0x037F1874 CSEL X21, X31, X9, EQ
	0x037F1878 B 0x37F1880
	0x037F187C MOV X21, X31
	0x037F1880 MOV X0, X22
	0x037F1884 MOV X1, X31
	0x037F1888 BL 0x37FEB84
	0x037F188C MOV X1, X0
	0x037F1890 MOV X0, X21
	0x037F1894 MOV X2, X23
	0x037F1898 MOV X3, X31
	0x037F189C BL 0x3BFF954
	0x037F18A0 MOV X0, X31
	0x037F18A4 BL 0x3241948
	0x037F18A8 CBZ X0, 0x37F1900
	0x037F18AC LDR X8, [X0]
	0x037F18B0 LDR X9, [X8 + 0x388]
	0x037F18B4 LDR X4, [X8 + 0x390]
	0x037F18B8 MOV X1, X24
	0x037F18BC MOV W2, W31
	0x037F18C0 MOV W3, W23
	0x037F18C4 BLR X9
	0x037F18C8 MOV X21, X0
	0x037F18CC ADD X8, X31, 0x0
	0x037F18D0 BL 0x37F1BFC
	0x037F18D4 LDP V0, V1, [X31]
	0x037F18D8 LDR V2, [X31 + 0x2]
	0x037F18DC ADRP X8, 0x92A000
	0x037F18E0 ADD X0, X31, 0x40
	0x037F18E4 STP V0, V1, [X31 + 0x90]
	0x037F18E8 STR V2, [X31 + 0xB]
	0x037F18EC STR X21, [X20 + 0x30]
	0x037F18F0 LDR X8, [X8 + 0xD68]
	0x037F18F4 ADD X21, X31, 0x90
	0x037F18F8 B 0x37F1A0C
	0x037F18FC BL 0x1C16F20
	0x037F1900 BL 0x1C16F20
	0x037F1904 MOVZ W0, 0x8
	0x037F1908 BL 0x3EB1AF0
	0x037F190C LDR X8, [X22]
	0x037F1910 STR X8, [X0]
	0x037F1914 ADRP X1, 0x6C3000
	0x037F1918 ADD X1, X1, 0xE58
	0x037F191C MOV X2, X31
	0x037F1920 BL 0x3EB1B00
	0x037F1924 B 0x37F1A60

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D14
	003 Move [X31+24], D13
	004 Move [X31+32], D12
	005 Move [X31+40], D11
	006 Move [X31+48], D10
	007 Move [X31+56], D9
	008 Move [X31+64], D8
	009 Move [X31+72], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X8, -47214592
	013 Move V14, [X8+3916]
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Move W19, W31
	018 Move W20, 0x3D000000
	019 NotImplemented "Instruction SCVTF not yet implemented."
	020 Move S1, W20
	021 Add W19, W19, 1
	022 Multiply S0, S0, S1
	023 NotImplemented "Instruction SCVTF not yet implemented."
	024 Multiply S0, S0, S14
	025 Multiply S1, S2, S1
	026 Add S0, S0, S0
	027 Multiply S1, S1, S14
	028 Add X0, X31, 12
	029 Add X1, X31, 8
	030 Add S11, S1, S1
	031 Call 0x3EB2BC0
	032 Move S0, [X31+8]
	033 Move S1, [X31+12]
	034 Add X0, X31, 4
	035 Add X1, X31, 0
	036 Multiply S0, S0, S8
	037 Multiply S1, S1, S8
	038 Add S12, S10, S0
	039 Move V0, V11
	040 Add S13, S9, S1
	041 Call 0x3EB2BC0
	042 Move S0, [X31]
	043 Move S1, [X31+4]
	044 Move S2, W31
	045 Move S5, W31
	046 Move X0, X31
	047 Multiply S0, S0, S8
	048 Multiply S1, S1, S8
	049 Add S3, S10, S0
	050 Add S4, S9, S1
	051 Move V0, V12
	052 Move V1, V13
	053 Call Gizmos.DrawLine, X0, X1
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X20, [X31+80]
	056 Move X19, [X31+88]
	057 Move X30, [X31+72]
	058 Move D9, [X31+56]
	059 Move D8, [X31+64]
	060 Move D11, [X31+40]
	061 Move D10, [X31+48]
	062 Move D13, [X31+24]
	063 Move D12, [X31+32]
	064 Move V14, [X31+16]
	065 Add X31, X31, 96
	066 Return 

Method: System.Void UpdateDynamicOriginClickableArea()

Disassembly:
	0x037F1928 MOV X22, X0
	0x037F192C BL 0x3EB1AE0
	0x037F1930 B 0x37F1BA8
	0x037F1934 MOV X21, X1
	0x037F1938 CMP W21, 0x1
	0x037F193C MOV X22, X0
	0x037F1940 B.NE 0x37F1AE0
	0x037F1944 MOV X0, X22
	0x037F1948 BL 0x3EB1AD0
	0x037F194C MOV X21, X0
	0x037F1950 ADRP X0, 0x902000
	0x037F1954 LDR X0, [X0 + 0x7D0]
	0x037F1958 BL 0x1C16D08
	0x037F195C LDR X8, [X21]
	0x037F1960 LDR X1, [X8]
	0x037F1964 BL 0x1C17270
	0x037F1968 TBZ X0, 0x0, 0x37F1A40
	0x037F196C LDR X21, [X21]
	0x037F1970 BL 0x3EB1AE0
	0x037F1974 LDR X8, [X20 + 0x30]
	0x037F1978 LDP V1, V0, [X20 + 0x10]
	0x037F197C LDR V2, [X20]
	0x037F1980 STR X8, [X31 + 0x30]
	0x037F1984 STP V1, V0, [X31 + 0x10]
	0x037F1988 STR V2, [X31]
	0x037F198C ADRP X0, 0x92D000
	0x037F1990 LDR X0, [X0 + 0x4F0]
	0x037F1994 BL 0x1C16D08
	0x037F1998 ADD X1, X31, 0x0
	0x037F199C BL 0x1C16E04
	0x037F19A0 MOV X20, X0
	0x037F19A4 ADRP X0, 0x958000
	0x037F19A8 LDR X0, [X0 + 0x828]
	0x037F19AC BL 0x1C16D08
	0x037F19B0 MOV X1, X20
	0x037F19B4 MOV X2, X31
	0x037F19B8 BL 0x321EFD0
	0x037F19BC MOV X20, X0
	0x037F19C0 ADRP X0, 0x902000
	0x037F19C4 LDR X0, [X0 + 0xA28]
	0x037F19C8 BL 0x1C16D08
	0x037F19CC LDR W8, [X0 + 0xE0]
	0x037F19D0 CBNZ W8, 0x37F19D8
	0x037F19D4 BL 0x1C16DFC
	0x037F19D8 MOV X0, X20
	0x037F19DC MOV X1, X31
	0x037F19E0 BL 0x3C0649C
	0x037F19E4 MOV X0, X21
	0x037F19E8 MOV X1, X31
	0x037F19EC BL 0x3C02C84
	0x037F19F0 MOVI V0.2D, 0x0
	0x037F19F4 STP V0, V0, [X31 + 0x60]
	0x037F19F8 STR V0, [X31 + 0x5]
	0x037F19FC ADD X0, X31, 0x40
	0x037F1A00 ADRP X8, 0x92A000
	0x037F1A04 LDR X8, [X8 + 0xD68]
	0x037F1A08 ADD X21, X31, 0x50
	0x037F1A0C LDR X1, [X8]
	0x037F1A10 BL 0x23C9DBC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBF1000
	005 Move W8, [X20+875]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x903000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move X0, 0x92A000
	015 Move X0, [X0+3184]
	016 Call 0x1C17CF4
	017 Move X0, 0x959000
	018 Move X0, [X0+1848]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+875], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call Component.get_transform, X0
	025 Compare X0, 0
	026 JumpIfEqual {69}
	027 Move X8, 0x959000
	028 Move X8, [X8+1848]
	029 Move X20, 0x903000
	030 Move X2, X31
	031 Move X1, [X8]
	032 Move X20, [X20+1432]
	033 Call Transform.Find, X0, X1
	034 Move X8, [X20]
	035 Move X20, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X31
	043 Call Object.op_Implicit, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {65}
	048 Compare X20, 0
	049 JumpIfEqual {69}
	050 Move X8, 0x92A000
	051 Move X8, [X8+3184]
	052 Move X1, [X8]
	053 Move X8, [X20]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move V0, [X19+60]
	056 Move X0, X20
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X1, X31
	060 Add S0, S0, S0
	061 Move V1, V0
	062 Move X30, [X31+32]
	063 Call RectTransform.set_sizeDelta, X0, X1
	064 Return 
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Return 
	069 Call 0x1C17F20
	070 Move X0, X20
	071 Call 0x1C181E0

Method: System.Single get_movementRange()

Disassembly:
	0x037F1A14 LDP V1, V0, [X21 + 0x10]
	0x037F1A18 LDR V2, [X21]

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_movementRange(System.Single value)

Disassembly:
	0x037F1A1C LDP X22, X21, [X31 + 0xF0]
	0x037F1A20 LDP X24, X23, [X31 + 0xE0]

ISIL:
	001 Move [X0+56], S0
	002 Return 

Method: System.Single get_dynamicOriginRange()

Disassembly:
	0x037F1A24 STP V1, V0, [X19 + 0x10]
	0x037F1A28 STR V2, [X19]

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_dynamicOriginRange(System.Single value)

Disassembly:
	0x037F1A2C LDP X20, X19, [X31 + 0x100]
	0x037F1A30 LDP X30, X25, [X31 + 0xD0]
	0x037F1A34 LDR X29, [X31 + 0xC0]
	0x037F1A38 ADD X31, X31, 0x110
	0x037F1A3C RET
	0x037F1A40 MOVZ W0, 0x8

ISIL:
	001 Move V1, [X0+60]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move [X0+60], S0
	005 Call OnScreenStick.UpdateDynamicOriginClickableArea, X0
	006 Return 

Method: System.Boolean get_useIsolatedInputActions()

Disassembly:
	0x037F1A44 BL 0x3EB1AF0
	0x037F1A48 LDR X8, [X21]

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_useIsolatedInputActions(System.Boolean value)

Disassembly:
	0x037F1A4C STR X8, [X0]
	0x037F1A50 ADRP X1, 0x6C3000
	0x037F1A54 ADD X1, X1, 0xE58

ISIL:
	001 And W8, W1, 1
	002 Move [X0+76], W8
	003 Return 

Method: System.String get_controlPathInternal()

Disassembly:
	0x037F1A58 MOV X2, X31
	0x037F1A5C BL 0x3EB1B00

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_controlPathInternal(System.String value)

Disassembly:
	0x037F1A60 B 0x37F1AD8
	0x037F1A64 B 0x37F1AD8

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: UnityEngine.InputSystem.OnScreen.OnScreenStick/Behaviour get_behaviour()

Disassembly:
	0x037F1A68 MOV X21, X1
	0x037F1A6C MOV X22, X0

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_behaviour(UnityEngine.InputSystem.OnScreen.OnScreenStick/Behaviour value)

Disassembly:
	0x037F1A70 BL 0x3EB1AE0
	0x037F1A74 B 0x37F1AE0

ISIL:
	001 Move [X0+72], W1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x037F1A78 B 0x37F1AD8
	0x037F1A7C B 0x37F1AD8
	0x037F1A80 B 0x37F1AD8
	0x037F1A84 B 0x37F1AD8
	0x037F1A88 B 0x37F1A8C

ISIL:
	001 Move X8, -47198208
	002 Move V0, [X8+3104]
	003 Move X1, X31
	004 Move [X0+56], D0
	005 Call MonoBehaviour..ctor, X0
	006 Return 

