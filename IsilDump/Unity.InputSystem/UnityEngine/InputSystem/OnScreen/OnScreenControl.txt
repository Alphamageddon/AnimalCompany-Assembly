Type: UnityEngine.InputSystem.OnScreen.OnScreenControl

Method: System.String get_controlPath()

Disassembly:
	0x037EF574 STR X30, [X31 + 0x30]
	0x037EF578 STP X22, X21, [X31 + 0x40]
	0x037EF57C STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+376]
	003 Move X1, [X8+384]
	004 CallNoReturn X2

Method: System.Void set_controlPath(System.String value)

Disassembly:
	0x037EF580 ADRP X21, 0xBF2000
	0x037EF584 LDRB W8, [X21 + 0x364]
	0x037EF588 MOV X20, X1
	0x037EF58C MOV V8.16B, V1.16B
	0x037EF590 MOV V9.16B, V0.16B
	0x037EF594 MOV X19, X0
	0x037EF598 TBNZ X8, 0x0, 0x37EF5F8
	0x037EF59C ADRP X0, 0x95A000
	0x037EF5A0 LDR X0, [X0 + 0x6B0]
	0x037EF5A4 BL 0x1C16CF4
	0x037EF5A8 ADRP X0, 0x904000
	0x037EF5AC LDR X0, [X0 + 0xA28]
	0x037EF5B0 BL 0x1C16CF4
	0x037EF5B4 ADRP X0, 0x904000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+392]
	006 Move X2, [X8+400]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move X0, X19
	009 Move X1, X31
	010 Call Behaviour.get_isActiveAndEnabled, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {18}
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 

Method: UnityEngine.InputSystem.InputControl get_control()

Disassembly:
	0x037EFCD0 LDR X22, [X22 + 0x3D8]
	0x037EFCD4 LDR X21, [X21 + 0x6F8]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.String get_controlPathInternal()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void set_controlPathInternal(System.String value)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void SetupInputControl()

Disassembly:
	0x037EF5B8 LDR X0, [X0 + 0x598]
	0x037EF5BC BL 0x1C16CF4
	0x037EF5C0 ADRP X0, 0x95A000
	0x037EF5C4 LDR X0, [X0 + 0x6D0]
	0x037EF5C8 BL 0x1C16CF4
	0x037EF5CC ADRP X0, 0x95A000
	0x037EF5D0 LDR X0, [X0 + 0x6B8]
	0x037EF5D4 BL 0x1C16CF4
	0x037EF5D8 ADRP X0, 0x92B000
	0x037EF5DC LDR X0, [X0 + 0xC70]
	0x037EF5E0 BL 0x1C16CF4
	0x037EF5E4 ADRP X0, 0x95A000
	0x037EF5E8 LDR X0, [X0 + 0x6C0]
	0x037EF5EC BL 0x1C16CF4
	0x037EF5F0 MOVZ W8, 0x1
	0x037EF5F4 STRB W8, [X21 + 0x364]
	0x037EF5F8 MOV X0, X19
	0x037EF5FC MOV X1, X31
	0x037EF600 STR X31, [X31 + 0x38]
	0x037EF604 BL 0x3C32E90
	0x037EF608 CBZ X0, 0x37EF94C
	0x037EF60C ADRP X22, 0x904000
	0x037EF610 LDR X22, [X22 + 0x598]
	0x037EF614 MOV X1, X31
	0x037EF618 BL 0x3C3F49C
	0x037EF61C CBZ X0, 0x37EF638
	0x037EF620 ADRP X8, 0x95A000
	0x037EF624 LDR X8, [X8 + 0x6B0]
	0x037EF628 LDR X1, [X8]
	0x037EF62C BL 0x21A3F50
	0x037EF630 MOV X21, X0
	0x037EF634 B 0x37EF63C
	0x037EF638 MOV X21, X31
	0x037EF63C LDR X0, [X22]
	0x037EF640 LDR W8, [X0 + 0xE0]
	0x037EF644 CBNZ W8, 0x37EF64C
	0x037EF648 BL 0x1C16DFC
	0x037EF64C MOV X0, X21
	0x037EF650 MOV X1, X31
	0x037EF654 MOV X2, X31
	0x037EF658 BL 0x3C3883C
	0x037EF65C TBZ X0, 0x0, 0x37EF690
	0x037EF660 ADRP X8, 0x904000
	0x037EF664 LDR X8, [X8 + 0xA28]
	0x037EF668 LDR X0, [X8]
	0x037EF66C LDR W8, [X0 + 0xE0]
	0x037EF670 CBNZ W8, 0x37EF678
	0x037EF674 BL 0x1C16DFC
	0x037EF678 ADRP X8, 0x95A000
	0x037EF67C LDR X8, [X8 + 0x6C0]
	0x037EF680 MOV X1, X31
	0x037EF684 LDR X0, [X8]
	0x037EF688 BL 0x3C0649C
	0x037EF68C B 0x37EF934
	0x037EF690 ADRP X8, 0x95A000
	0x037EF694 LDR X8, [X8 + 0x6B8]
	0x037EF698 LDR X0, [X8]
	0x037EF69C LDR W8, [X0 + 0xE0]
	0x037EF6A0 CBNZ W8, 0x37EF6A8
	0x037EF6A4 BL 0x1C16DFC
	0x037EF6A8 ADD X2, X31, 0x38
	0x037EF6AC MOV X0, X21
	0x037EF6B0 MOV V0.16B, V9.16B
	0x037EF6B4 MOV V1.16B, V8.16B
	0x037EF6B8 MOV X1, X20
	0x037EF6BC MOV X3, X31
	0x037EF6C0 BL 0x3E23A98
	0x037EF6C4 LDR V0, [X31 + 0x38]
	0x037EF6C8 LDR W8, [X19 + 0x48]
	0x037EF6CC LDUR V1, [X19 + 0x6C]
	0x037EF6D0 CMP W8, 0x2
	0x037EF6D4 FSUB V2.2S, V0.2S, V1.2S
	0x037EF6D8 B.EQ 0x37EF794
	0x037EF6DC CMP W8, 0x1
	0x037EF6E0 B.EQ 0x37EF848
	0x037EF6E4 CBNZ W8, 0x37EF910
	0x037EF6E8 ADRP X20, 0xBF2000
	0x037EF6EC LDRB W8, [X20 + 0x393]
	0x037EF6F0 LDR V1, [X19 + 0x38]
	0x037EF6F4 STR V2, [X31 + 0x1]
	0x037EF6F8 CBNZ W8, 0x37EF718
	0x037EF6FC ADRP X0, 0x904000
	0x037EF700 LDR X0, [X0 + 0x5A8]
	0x037EF704 STR V1, [X31]
	0x037EF708 BL 0x1C16CF4
	0x037EF70C LDP V1, V2, [X31]
	0x037EF710 MOVZ W8, 0x1
	0x037EF714 STRB W8, [X20 + 0x393]
	0x00000000 INVALID
	0x037EF71C FADDP S8, V0.2S
	0x037EF720 FMUL S0, S1, S1
	0x037EF724 FCMP S8, S0
	0x037EF728 B.LE 0x37EF760
	0x037EF72C ADRP X8, 0x904000
	0x037EF730 LDR X8, [X8 + 0x5A8]
	0x037EF734 LDR X0, [X8]
	0x037EF738 LDR W8, [X0 + 0xE0]
	0x037EF73C CBNZ W8, 0x37EF74C
	0x037EF740 STR V1, [X31]
	0x037EF744 BL 0x1C16DFC
	0x037EF748 LDP V1, V2, [X31]
	0x037EF74C FSQRT S0, S8
	0x037EF750 UNIMPLEMENTED
	0x00000000 INVALID
	0x00000000 INVALID
	0x037EF75C STR V0, [X31 + 0x1]
	0x037EF760 MOV X0, X19
	0x037EF764 MOV X1, X31
	0x037EF768 BL 0x3C32E90
	0x037EF76C CBZ X0, 0x37EF94C
	0x037EF770 ADRP X8, 0x92B000
	0x037EF774 LDR X8, [X8 + 0xC70]
	0x037EF778 LDR V1, [X31 + 0x1]
	0x037EF77C LDR X1, [X8]
	0x037EF780 LDR X8, [X0]
	0x037EF784 CMP X8, X1
	0x037EF788 B.NE 0x37EF950
	0x037EF78C LDR V0, [X19 + 0x60]
	0x037EF790 B 0x37EF83C
	0x037EF794 ADRP X20, 0xBF2000
	0x037EF798 LDRB W8, [X20 + 0x393]
	0x037EF79C LDR V1, [X19 + 0x38]
	0x037EF7A0 STR V2, [X31 + 0x1]
	0x037EF7A4 CBNZ W8, 0x37EF7C4
	0x037EF7A8 ADRP X0, 0x904000
	0x037EF7AC LDR X0, [X0 + 0x5A8]
	0x037EF7B0 STR V1, [X31]
	0x037EF7B4 BL 0x1C16CF4
	0x037EF7B8 LDP V1, V2, [X31]
	0x037EF7BC MOVZ W8, 0x1
	0x037EF7C0 STRB W8, [X20 + 0x393]
	0x00000000 INVALID
	0x037EF7C8 FADDP S8, V0.2S
	0x037EF7CC FMUL S0, S1, S1
	0x037EF7D0 FCMP S8, S0
	0x037EF7D4 B.LE 0x37EF80C
	0x037EF7D8 ADRP X8, 0x904000
	0x037EF7DC LDR X8, [X8 + 0x5A8]
	0x037EF7E0 LDR X0, [X8]
	0x037EF7E4 LDR W8, [X0 + 0xE0]
	0x037EF7E8 CBNZ W8, 0x37EF7F8
	0x037EF7EC STR V1, [X31]
	0x037EF7F0 BL 0x1C16DFC
	0x037EF7F4 LDP V1, V2, [X31]
	0x037EF7F8 FSQRT S0, S8
	0x037EF7FC UNIMPLEMENTED
	0x00000000 INVALID
	0x00000000 INVALID
	0x037EF808 STR V0, [X31 + 0x1]
	0x037EF80C MOV X0, X19
	0x037EF810 MOV X1, X31
	0x037EF814 BL 0x3C32E90
	0x037EF818 CBZ X0, 0x37EF94C
	0x037EF81C ADRP X8, 0x92B000
	0x037EF820 LDR X8, [X8 + 0xC70]
	0x037EF824 LDR V1, [X31 + 0x1]
	0x037EF828 LDR X1, [X8]
	0x037EF82C LDR X8, [X0]
	0x037EF830 CMP X8, X1
	0x037EF834 B.NE 0x37EF950
	0x037EF838 LDUR V0, [X19 + 0x6C]
	0x037EF83C FADD V0.2S, V1.2S, V0.2S
	0x037EF840 UNIMPLEMENTED
	0x037EF844 B 0x37EF8F4
	0x037EF848 LDR V1, [X19 + 0x60]
	0x037EF84C ADRP X20, 0xBF2000
	0x037EF850 LDRB W8, [X20 + 0x393]
	0x037EF854 LDR V2, [X19 + 0x38]
	0x037EF858 FSUB V8.2S, V0.2S, V1.2S
	0x037EF85C CBNZ W8, 0x37EF87C
	0x037EF860 ADRP X0, 0x904000
	0x037EF864 LDR X0, [X0 + 0x5A8]
	0x037EF868 STR V2, [X31 + 0x1]
	0x037EF86C BL 0x1C16CF4
	0x037EF870 LDR V2, [X31 + 0x1]
	0x037EF874 MOVZ W8, 0x1
	0x037EF878 STRB W8, [X20 + 0x393]
	0x00000000 INVALID
	0x037EF880 FADDP S9, V0.2S
	0x037EF884 FMUL S0, S2, S2
	0x037EF888 FCMP S9, S0
	0x037EF88C B.LE 0x37EF8C0
	0x037EF890 ADRP X8, 0x904000
	0x037EF894 LDR X8, [X8 + 0x5A8]
	0x037EF898 LDR X0, [X8]
	0x037EF89C LDR W8, [X0 + 0xE0]
	0x037EF8A0 CBNZ W8, 0x37EF8B0
	0x037EF8A4 STR V2, [X31 + 0x1]
	0x037EF8A8 BL 0x1C16DFC
	0x037EF8AC LDR V2, [X31 + 0x1]
	0x037EF8B0 FSQRT S0, S9
	0x037EF8B4 UNIMPLEMENTED
	0x00000000 INVALID
	0x00000000 INVALID
	0x037EF8C0 MOV X0, X19
	0x037EF8C4 MOV X1, X31
	0x037EF8C8 BL 0x3C32E90
	0x037EF8CC CBZ X0, 0x37EF94C
	0x037EF8D0 ADRP X8, 0x92B000
	0x037EF8D4 LDR X8, [X8 + 0xC70]
	0x037EF8D8 LDR X1, [X8]
	0x037EF8DC LDR X8, [X0]
	0x037EF8E0 CMP X8, X1
	0x037EF8E4 B.NE 0x37EF950
	0x037EF8E8 LDR V0, [X19 + 0x60]
	0x037EF8EC UNIMPLEMENTED
	0x037EF8F0 FADD V0.2S, V8.2S, V0.2S
	0x037EF8F4 STR V1, [X31 + 0x1]
	0x037EF8F8 MOV S1, V0.S[1]
	0x037EF8FC MOV X1, X31
	0x037EF900 BL 0x3C3E880
	0x037EF904 LDR V3, [X31 + 0x1]
	0x037EF908 MOV S2, V3.S[1]
	0x037EF90C B 0x37EF914
	0x037EF910 MOV S3, V2.S[1]
	0x037EF914 ADRP X8, 0x95A000
	0x037EF918 LDR V1, [X19 + 0x38]
	0x037EF91C LDR X8, [X8 + 0x6D0]
	0x037EF920 MOV X0, X19
	0x037EF924 FDIV S0, S2, S1
	0x037EF928 LDR X1, [X8]
	0x037EF92C FDIV S1, S3, S1
	0x037EF930 BL 0x222EB14
	0x037EF934 LDP X20, X19, [X31 + 0x50]
	0x037EF938 LDP X22, X21, [X31 + 0x40]
	0x037EF93C LDR X30, [X31 + 0x30]
	0x037EF940 LDP D9, D8, [X31 + 0x20]
	0x037EF944 ADD X31, X31, 0x60
	0x037EF948 RET
	0x037EF94C BL 0x1C16F20
	0x037EF950 BL 0x1C171E0
	0x037EF954 LDRB W8, [X0 + 0x4C]
	0x037EF958 CBZ W8, 0x37EF960
	0x037EF95C RET
	0x037EF960 B 0x37EF964
	0x037EF964 STP X30, X21, [X31 - 0x20]!
	0x037EF968 STP X20, X19, [X31 + 0x10]
	0x037EF96C ADRP X20, 0xBF2000
	0x037EF970 LDRB W8, [X20 + 0x365]
	0x037EF974 MOV X19, X0
	0x037EF978 TBNZ X8, 0x0, 0x37EF99C
	0x037EF97C ADRP X0, 0x95A000
	0x037EF980 LDR X0, [X0 + 0x6D0]
	0x037EF984 BL 0x1C16CF4
	0x037EF988 ADRP X0, 0x92B000
	0x037EF98C LDR X0, [X0 + 0xC70]
	0x037EF990 BL 0x1C16CF4
	0x037EF994 MOVZ W8, 0x1
	0x037EF998 STRB W8, [X20 + 0x365]
	0x037EF99C MOV X0, X19
	0x037EF9A0 MOV X1, X31
	0x037EF9A4 BL 0x3C32E90
	0x037EF9A8 LDP S0, S1, [X19 + 0x60]
	0x037EF9AC STP S0, S1, [X19 + 0x6C]
	0x037EF9B0 CBZ X0, 0x37EFA24
	0x037EF9B4 ADRP X8, 0x92B000
	0x037EF9B8 LDR X8, [X8 + 0xC70]
	0x037EF9BC LDR X1, [X8]
	0x037EF9C0 LDR X8, [X0]
	0x037EF9C4 CMP X8, X1
	0x037EF9C8 B.NE 0x37EFA28
	0x037EF9CC ADRP X20, 0x95A000
	0x037EF9D0 LDR X20, [X20 + 0x6D0]
	0x037EF9D4 MOV X1, X31
	0x037EF9D8 BL 0x3C3E880
	0x037EF9DC ADRP X21, 0xBEA000
	0x037EF9E0 LDRB W8, [X21 + 0x78F]
	0x037EF9E4 CBNZ W8, 0x37EF9FC
	0x037EF9E8 ADRP X0, 0x90C000
	0x037EF9EC LDR X0, [X0 + 0xF08]
	0x037EF9F0 BL 0x1C16CF4
	0x037EF9F4 MOVZ W8, 0x1
	0x037EF9F8 STRB W8, [X21 + 0x78F]
	0x037EF9FC ADRP X8, 0x90C000
	0x037EFA00 LDR X8, [X8 + 0xF08]
	0x037EFA04 LDR X1, [X20]
	0x037EFA08 MOV X0, X19
	0x037EFA0C LDP X20, X19, [X31 + 0x10]
	0x037EFA10 LDR X8, [X8]
	0x037EFA14 LDR X8, [X8 + 0xB8]
	0x037EFA18 LDP S0, S1, [X8]
	0x037EFA1C LDP X30, X21, [X31], #0x20
	0x037EFA20 B 0x222EB14
	0x037EFA24 BL 0x1C16F20
	0x037EFA28 BL 0x1C171E0
	0x037EFA2C SUB X31, X31, 0x50
	0x037EFA30 STP X30, X23, [X31 + 0x20]
	0x037EFA34 STP X22, X21, [X31 + 0x30]
	0x037EFA38 STP X20, X19, [X31 + 0x40]
	0x037EFA3C ADRP X20, 0xBF2000
	0x037EFA40 LDRB W8, [X20 + 0x362]
	0x037EFA44 MOV X19, X0
	0x037EFA48 TBNZ X8, 0x0, 0x37EFB68
	0x037EFA4C ADRP X0, 0x908000
	0x037EFA50 LDR X0, [X0 + 0x3D8]
	0x037EFA54 BL 0x1C16CF4
	0x037EFA58 ADRP X0, 0x92B000
	0x037EFA5C LDR X0, [X0 + 0xDF8]
	0x037EFA60 BL 0x1C16CF4
	0x037EFA64 ADRP X0, 0x95A000
	0x037EFA68 LDR X0, [X0 + 0x6D8]
	0x037EFA6C BL 0x1C16CF4
	0x037EFA70 ADRP X0, 0x904000
	0x037EFA74 LDR X0, [X0 + 0xA58]
	0x037EFA78 BL 0x1C16CF4
	0x037EFA7C ADRP X0, 0x95A000
	0x037EFA80 LDR X0, [X0 + 0x6E0]
	0x037EFA84 BL 0x1C16CF4
	0x037EFA88 ADRP X0, 0x908000
	0x037EFA8C LDR X0, [X0 + 0x3E0]
	0x037EFA90 BL 0x1C16CF4
	0x037EFA94 ADRP X0, 0x95A000
	0x037EFA98 LDR X0, [X0 + 0x6E8]
	0x037EFA9C BL 0x1C16CF4
	0x037EFAA0 ADRP X0, 0x95A000
	0x037EFAA4 LDR X0, [X0 + 0x6F0]
	0x037EFAA8 BL 0x1C16CF4
	0x037EFAAC ADRP X0, 0x95A000
	0x037EFAB0 LDR X0, [X0 + 0x6F8]
	0x037EFAB4 BL 0x1C16CF4
	0x037EFAB8 ADRP X0, 0x95A000
	0x037EFABC LDR X0, [X0 + 0x700]
	0x037EFAC0 BL 0x1C16CF4
	0x037EFAC4 ADRP X0, 0x95A000
	0x037EFAC8 LDR X0, [X0 + 0x708]
	0x037EFACC BL 0x1C16CF4
	0x037EFAD0 ADRP X0, 0x92B000
	0x037EFAD4 LDR X0, [X0 + 0xFE8]
	0x037EFAD8 BL 0x1C16CF4
	0x037EFADC ADRP X0, 0x92B000
	0x037EFAE0 LDR X0, [X0 + 0xC70]
	0x037EFAE4 BL 0x1C16CF4
	0x037EFAE8 ADRP X0, 0x90C000
	0x037EFAEC LDR X0, [X0 + 0xC60]
	0x037EFAF0 BL 0x1C16CF4
	0x037EFAF4 ADRP X0, 0x904000
	0x037EFAF8 LDR X0, [X0 + 0x6C0]
	0x037EFAFC BL 0x1C16CF4
	0x037EFB00 ADRP X0, 0x95A000
	0x037EFB04 LDR X0, [X0 + 0x710]
	0x037EFB08 BL 0x1C16CF4
	0x037EFB0C ADRP X0, 0x956000
	0x037EFB10 LDR X0, [X0 + 0x590]
	0x037EFB14 BL 0x1C16CF4
	0x037EFB18 ADRP X0, 0x95A000
	0x037EFB1C LDR X0, [X0 + 0x718]
	0x037EFB20 BL 0x1C16CF4
	0x037EFB24 ADRP X0, 0x95A000
	0x037EFB28 LDR X0, [X0 + 0x720]
	0x037EFB2C BL 0x1C16CF4
	0x037EFB30 ADRP X0, 0x95A000
	0x037EFB34 LDR X0, [X0 + 0x728]
	0x037EFB38 BL 0x1C16CF4
	0x037EFB3C ADRP X0, 0x95A000
	0x037EFB40 LDR X0, [X0 + 0x730]
	0x037EFB44 BL 0x1C16CF4
	0x037EFB48 ADRP X0, 0x95A000
	0x037EFB4C LDR X0, [X0 + 0x738]
	0x037EFB50 BL 0x1C16CF4
	0x037EFB54 ADRP X0, 0x95A000
	0x037EFB58 LDR X0, [X0 + 0x740]
	0x037EFB5C BL 0x1C16CF4
	0x037EFB60 MOVZ W8, 0x1
	0x037EFB64 STRB W8, [X20 + 0x362]
	0x037EFB68 LDRB W8, [X19 + 0x4C]
	0x037EFB6C CBZ W8, 0x37EFE1C
	0x037EFB70 ADRP X8, 0x95A000
	0x037EFB74 LDR X8, [X8 + 0x6F0]
	0x037EFB78 ADRP X20, 0x95A000
	0x037EFB7C ADRP X22, 0x92B000
	0x037EFB80 ADRP X21, 0x95A000
	0x037EFB84 LDR X0, [X8]
	0x037EFB88 LDR X20, [X20 + 0x6E8]
	0x037EFB8C LDR X22, [X22 + 0xDF8]
	0x037EFB90 LDR X21, [X21 + 0x708]
	0x037EFB94 BL 0x1C16F10
	0x037EFB98 LDR X1, [X20]
	0x037EFB9C MOV X20, X0
	0x037EFBA0 BL 0x303553C
	0x037EFBA4 STR X20, [X19 + 0x78]
	0x037EFBA8 LDR X0, [X22]
	0x037EFBAC LDR W8, [X0 + 0xE0]
	0x037EFBB0 CBNZ W8, 0x37EFBB8
	0x037EFBB4 BL 0x1C16DFC
	0x037EFBB8 MOV X0, X31
	0x037EFBBC BL 0x3E4FF90
	0x037EFBC0 LDR X8, [X21]
	0x037EFBC4 MOV X20, X0
	0x037EFBC8 MOV X0, X8
	0x037EFBCC BL 0x1C16F10
	0x037EFBD0 MOV X1, X20
	0x037EFBD4 MOV X2, X31
	0x037EFBD8 MOV X21, X0
	0x037EFBDC BL 0x3E4F118
	0x037EFBE0 LDR X0, [X19 + 0x50]
	0x037EFBE4 STR X21, [X19 + 0x80]
	0x037EFBE8 CBZ X0, 0x37EFC04
	0x037EFBEC MOV X1, X31
	0x037EFBF0 BL 0x37345CC
	0x037EFBF4 UBFM X8, X1, 0x20, 0x3F
	0x037EFBF8 CBNZ X8, 0x37EFCC4
	0x037EFBFC LDR X20, [X19 + 0x50]
	0x037EFC00 CBNZ X20, 0x37EFC24
	0x037EFC04 ADRP X8, 0x908000
	0x037EFC08 LDR X8, [X8 + 0x3E0]
	0x037EFC0C LDR X0, [X8]
	0x037EFC10 BL 0x1C16F10
	0x037EFC14 MOV X1, X31
	0x037EFC18 MOV X20, X0
	0x037EFC1C BL 0x3734C10
	0x037EFC20 STR X20, [X19 + 0x50]
	0x037EFC24 ADRP X8, 0x95A000
	0x037EFC28 LDR X8, [X8 + 0x710]
	0x037EFC2C MOV X0, X20
	0x037EFC30 MOV X2, X31
	0x037EFC34 MOV X3, X31
	0x037EFC38 LDR X1, [X8]
	0x037EFC3C ADD X8, X31, 0x8
	0x037EFC40 MOV X4, X31
	0x037EFC44 MOV X5, X31
	0x037EFC48 BL 0x3746870
	0x037EFC4C ADRP X8, 0x95A000
	0x037EFC50 LDR X0, [X19 + 0x50]
	0x037EFC54 LDR X8, [X8 + 0x720]
	0x037EFC58 MOV X2, X31
	0x037EFC5C MOV X3, X31
	0x037EFC60 MOV X4, X31
	0x037EFC64 LDR X1, [X8]
	0x037EFC68 ADD X8, X31, 0x8
	0x037EFC6C MOV X5, X31
	0x037EFC70 BL 0x3746870
	0x037EFC74 ADRP X8, 0x95A000
	0x037EFC78 LDR X0, [X19 + 0x50]
	0x037EFC7C LDR X8, [X8 + 0x718]
	0x037EFC80 MOV X2, X31
	0x037EFC84 MOV X3, X31
	0x037EFC88 MOV X4, X31
	0x037EFC8C LDR X1, [X8]
	0x037EFC90 ADD X8, X31, 0x8
	0x037EFC94 MOV X5, X31
	0x037EFC98 BL 0x3746870
	0x037EFC9C ADRP X8, 0x95A000
	0x037EFCA0 LDR X0, [X19 + 0x50]
	0x037EFCA4 LDR X8, [X8 + 0x740]
	0x037EFCA8 MOV X2, X31
	0x037EFCAC MOV X3, X31
	0x037EFCB0 MOV X4, X31
	0x037EFCB4 LDR X1, [X8]
	0x037EFCB8 ADD X8, X31, 0x8
	0x037EFCBC MOV X5, X31
	0x037EFCC0 BL 0x3746870
	0x037EFCC4 ADRP X22, 0x908000
	0x037EFCC8 ADRP X21, 0x95A000
	0x037EFCCC LDR X0, [X19 + 0x58]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+112], X30
	003 Move [X31+128], X24
	004 Move [X31+136], X23
	005 Move [X31+144], X22
	006 Move [X31+152], X21
	007 Move [X31+160], X20
	008 Move [X31+168], X19
	009 Move X20, 0xBF3000
	010 Move W8, [X20+861]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {69}
	016 Move X0, 0x905000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x95B000
	020 Move X0, [X0+1576]
	021 Call 0x1C17CF4
	022 Move X0, 0x95B000
	023 Move X0, [X0+1584]
	024 Call 0x1C17CF4
	025 Move X0, 0x95B000
	026 Move X0, [X0+1592]
	027 Call 0x1C17CF4
	028 Move X0, 0x95B000
	029 Move X0, [X0+1600]
	030 Call 0x1C17CF4
	031 Move X0, 0x92D000
	032 Move X0, [X0+624]
	033 Call 0x1C17CF4
	034 Move X0, 0x905000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0x95B000
	038 Move X0, [X0+1608]
	039 Call 0x1C17CF4
	040 Move X0, 0x905000
	041 Move X0, [X0+2760]
	042 Call 0x1C17CF4
	043 Move X0, 0x90D000
	044 Move X0, [X0+2480]
	045 Call 0x1C17CF4
	046 Move X0, 0x95B000
	047 Move X0, [X0+1616]
	048 Call 0x1C17CF4
	049 Move X0, 0x95B000
	050 Move X0, [X0+1624]
	051 Call 0x1C17CF4
	052 Move X0, 0x95B000
	053 Move X0, [X0+1632]
	054 Call 0x1C17CF4
	055 Move X0, 0x95B000
	056 Move X0, [X0+1640]
	057 Call 0x1C17CF4
	058 Move X0, 0x95B000
	059 Move X0, [X0+1648]
	060 Call 0x1C17CF4
	061 Move X0, 0x95B000
	062 Move X0, [X0+1656]
	063 Call 0x1C17CF4
	064 Move X0, 0x95B000
	065 Move X0, [X0+1664]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X20+861], W8
	069 NotImplemented "Instruction MOVI not yet implemented."
	070 Move [X31+48], X31
	071 Move [X31+56], X31
	072 Move [X31+120], X31
	073 Move [X31+32], X31
	074 Move [X31], V0
	075 Move [X31+8], V0
	076 Move X8, [X19]
	077 Move X0, X19
	078 Move X9, [X8+376]
	079 Move X1, [X8+384]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X1, X31
	082 Move X22, X0
	083 Call String.IsNullOrEmpty, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {391}
	088 Move X0, X22
	089 Move X1, X31
	090 Call InputControlPath.TryGetDeviceLayout, X0
	091 Compare X0, 0
	092 JumpIfEqual {177}
	093 Move X20, X0
	094 Add X0, X31, 48
	095 Move X1, X20
	096 Move X2, X31
	097 Call InternedString..ctor, X0, X1
	098 Move X24, 0x95B000
	099 Move X24, [X24+1608]
	100 Move X8, [X24]
	101 Move X0, [X8+184]
	102 Move W8, [X0]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X23, 0x95B000
	105 Move X23, [X23+1592]
	106 Move W21, W31
	107 Move X2, [X23]
	108 Add X8, X31, 64
	109 Move W1, W21
	110 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	111 Move X8, [X31+88]
	112 Compare X8, 0
	113 JumpIfEqual {475}
	114 Move X0, [X8+88]
	115 Move X1, [X8+96]
	116 Move X2, [X31+48]
	117 Move X3, [X31+56]
	118 Move X4, X31
	119 Call InternedString.op_Equality, X0, X1
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfEqual {232}
	124 Move X8, [X24]
	125 Add W21, W21, 1
	126 Move X0, [X8+184]
	127 Move W8, [X0]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X21, 0x92D000
	130 Move X21, [X21+624]
	131 Move X0, [X21]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Move X0, X20
	137 Move X1, X31
	138 Move X2, X31
	139 Move X3, X31
	140 Call InputSystem.AddDevice, X0, X1, X2
	141 Move X23, X0
	142 Move X0, [X21]
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {147}
	146 Call 0x1C17DFC
	147 Move X8, 0x95B000
	148 Move X8, [X8+1616]
	149 Move X0, X23
	150 Move X2, X31
	151 Move X1, [X8]
	152 Call InputSystem.AddDeviceUsage, X0, X1
	153 Add X1, X31, 120
	154 Move W2, 4
	155 Move X0, X23
	156 Move X3, X31
	157 Call StateEvent.From, X0, X1, X2
	158 Move [X31+24], X23
	159 Move [X31+32], X31
	160 Move X8, [X31+120]
	161 Move [X31+16], X1
	162 Move X10, 0x95B000
	163 Move X9, [X24]
	164 Move X10, [X10+1576]
	165 Move [X31], X8
	166 Move [X31+8], X0
	167 Move V0, [X31]
	168 Move V1, [X31+16]
	169 Move X0, [X9+184]
	170 Move X2, [X10]
	171 Add X1, X31, 64
	172 Move [X31+64], V0
	173 Move [X31+72], V1
	174 Move [X31+96], X31
	175 Call InlinedArray`1<OnScreenDeviceInfo>.Append, X0, X1
	176 Move W21, W0
	177 Move X8, 0x905000
	178 Move X8, [X8+2760]
	179 Move W1, 5
	180 Move X0, [X8]
	181 Call 0x1C17D6C
	182 Compare X0, 0
	183 JumpIfEqual {475}
	184 Move W8, [X0+24]
	185 Move X20, X0
	186 Compare W8, 0
	187 JumpIfEqual {476}
	188 Move X9, 0x95B000
	189 Move X9, [X9+1656]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move X9, [X9]
	192 Move [X20+32], X9
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move [X20+40], X22
	195 Move X8, 0x95B000
	196 Move X8, [X8+1640]
	197 Move X0, X19
	198 Move X1, X31
	199 Move X8, [X8]
	200 Move [X20+48], X8
	201 Call "il2cpp_vm_object_is_inst", X0
	202 Compare X0, 0
	203 JumpIfEqual {475}
	204 Move X8, [X0]
	205 Move X9, [X8+424]
	206 Move X1, [X8+432]
	207 NotImplemented "Instruction BLR not yet implemented."
	208 Move W8, [X20+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move [X20+56], X0
	212 Move X8, 0x95B000
	213 Move X8, [X8+1664]
	214 Move X0, X20
	215 Move X1, X31
	216 Move X8, [X8]
	217 Move [X20+64], X8
	218 Call String.Concat, X0
	219 Move X8, 0x905000
	220 Move X8, [X8+2600]
	221 Move X20, X0
	222 Move X8, [X8]
	223 Move W9, [X8+224]
	224 Compare W9, 0
	225 JumpIfNotEqual {228}
	226 Move X0, X8
	227 Call 0x1C17DFC
	228 Move X0, X20
	229 Move X1, X19
	230 Move X2, X31
	231 Call Debug.LogError, X0, X1
	232 Move X8, [X24]
	233 Move X2, [X23]
	234 Move W1, W21
	235 Move X0, [X8+184]
	236 Add X8, X31, 64
	237 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	238 Move X23, [X31+88]
	239 Move X0, X23
	240 Move X1, X22
	241 Move W2, W31
	242 Move X3, X31
	243 Call InputControlPath.TryFindControl, X0, X1, X2
	244 Move [X19+32], X0
	245 Compare X0, 0
	246 JumpIfEqual {284}
	247 Move X20, 0x95B000
	248 Move X8, [X24]
	249 Move X20, [X20+1592]
	250 Move W1, W21
	251 Move X0, [X8+184]
	252 Move X2, [X20]
	253 Add X8, X31, 64
	254 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	255 Move X8, [X31+64]
	256 Move W1, W21
	257 Move [X19+48], X8
	258 Move X8, [X24]
	259 Move X2, [X20]
	260 Move X0, [X8+184]
	261 Add X8, X31, 64
	262 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	263 Move X8, [X31+96]
	264 Move V0, [X31+64]
	265 Move V1, [X31+80]
	266 Add X2, X31, 64
	267 Move W1, W21
	268 Move [X31+32], X8
	269 Move [X31], V0
	270 Move [X31+8], V1
	271 Move [X19+40], X8
	272 Move X8, 0x95B000
	273 Move X8, [X8+1600]
	274 Move X9, [X24]
	275 Move [X31+32], X19
	276 Move V0, [X31]
	277 Move V1, [X31+16]
	278 Move X3, [X8]
	279 Move X0, [X9+184]
	280 Move [X31+96], X19
	281 Move [X31+64], V0
	282 Move [X31+72], V1
	283 Call InlinedArray`1<OnScreenDeviceInfo>.set_Item, X0, X1, X2
	284 Move X8, 0x905000
	285 Move X8, [X8+2760]
	286 Move W1, 7
	287 Move X0, [X8]
	288 Call 0x1C17D6C
	289 Compare X0, 0
	290 JumpIfEqual {475}
	291 Move W8, [X0+24]
	292 Move X23, X0
	293 Compare W8, 0
	294 JumpIfEqual {476}
	295 Move X9, 0x95B000
	296 Move X9, [X9+1632]
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Move X9, [X9]
	299 Move [X23+32], X9
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move [X23+40], X22
	302 Move X9, 0x95B000
	303 Move X9, [X9+1648]
	304 NotImplemented "Instruction CMP not yet implemented."
	305 Move X9, [X9]
	306 Move [X23+48], X9
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Move [X23+56], X20
	309 Move X8, 0x95B000
	310 Move X8, [X8+1624]
	311 Move X0, X19
	312 Move X1, X31
	313 Move X8, [X8]
	314 Move [X23+64], X8
	315 Call "il2cpp_vm_object_is_inst", X0
	316 Compare X0, 0
	317 JumpIfEqual {475}
	318 Move X8, [X0]
	319 Move X9, [X8+424]
	320 Move X1, [X8+432]
	321 NotImplemented "Instruction BLR not yet implemented."
	322 Move W8, [X23+24]
	323 NotImplemented "Instruction CMP not yet implemented."
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move [X23+72], X0
	326 Move X8, 0x90D000
	327 Move X8, [X8+2480]
	328 Move X0, X23
	329 Move X1, X31
	330 Move X8, [X8]
	331 Move [X23+80], X8
	332 Call String.Concat, X0
	333 Move X8, 0x905000
	334 Move X8, [X8+2600]
	335 Move X20, X0
	336 Move X8, [X8]
	337 Move W9, [X8+224]
	338 Compare W9, 0
	339 JumpIfNotEqual {342}
	340 Move X0, X8
	341 Call 0x1C17DFC
	342 Move X0, X20
	343 Move X1, X19
	344 Move X2, X31
	345 Call Debug.LogError, X0, X1
	346 Move X20, 0x95B000
	347 Move X8, [X24]
	348 Move X20, [X20+1592]
	349 Move W1, W21
	350 Move X0, [X8+184]
	351 Move X2, [X20]
	352 Add X8, X31, 64
	353 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	354 Move X8, 0x905000
	355 Move X8, [X8+1432]
	356 Move X19, [X31+96]
	357 Move X0, [X8]
	358 Move W8, [X0+224]
	359 Compare W8, 0
	360 JumpIfNotEqual {362}
	361 Call 0x1C17DFC
	362 Move X0, X19
	363 Move X1, X31
	364 Move X2, X31
	365 Call Object.op_Equality, X0, X1
	366 Move TEMP, X0
	367 And TEMP, TEMP, 1
	368 Compare TEMP, 1
	369 JumpIfNotEqual {391}
	370 Move X8, [X24]
	371 Move X2, [X20]
	372 Move W1, W21
	373 Move X0, [X8+184]
	374 Add X8, X31, 64
	375 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	376 Move V0, [X31+64]
	377 Move V1, [X31+80]
	378 Move X8, [X31+96]
	379 Add X0, X31, 0
	380 Move [X31], V0
	381 Move [X31+8], V1
	382 Move [X31+32], X8
	383 Call OnScreenDeviceInfo.Destroy, X0
	384 Move X9, 0x95B000
	385 Move X8, [X24]
	386 Move X9, [X9+1584]
	387 Move W1, W21
	388 Move X0, [X8+184]
	389 Move X2, [X9]
	390 Call InlinedArray`1<OnScreenDeviceInfo>.RemoveAt, X0, X1
	391 Move X20, [X31+160]
	392 Move X19, [X31+168]
	393 Move X22, [X31+144]
	394 Move X21, [X31+152]
	395 Move X24, [X31+128]
	396 Move X23, [X31+136]
	397 Move X30, [X31+112]
	398 Add X31, X31, 176
	399 Return 
	400 Move X21, X0
	401 NotImplemented "Instruction CMP not yet implemented."
	402 Move X0, X21
	403 Call 0x3EB2AD0
	404 Move X21, X0
	405 Move X0, 0x905000
	406 Move X0, [X0+2000]
	407 Call 0x1C17D08
	408 Move X8, [X21]
	409 Move X1, [X8]
	410 Call 0x1C18270
	411 Move TEMP, X0
	412 And TEMP, TEMP, 1
	413 Compare TEMP, 1
	414 JumpIfNotEqual {477}
	415 Move X21, [X21]
	416 Call 0x3EB2AE0
	417 Move X0, 0x905000
	418 Move X0, [X0+2760]
	419 Call 0x1C17D08
	420 Move W1, 5
	421 Call 0x1C17D6C
	422 Compare X0, 0
	423 JumpIfEqual {475}
	424 Move X22, X0
	425 Move X0, 0x95B000
	426 Move X0, [X0+1672]
	427 Call 0x1C17D08
	428 Move W8, [X22+24]
	429 Compare W8, 0
	430 JumpIfEqual {476}
	431 NotImplemented "Instruction CMP not yet implemented."
	432 Move [X22+32], X0
	433 Move [X22+40], X20
	434 Move X0, 0x95B000
	435 Move X0, [X0+1680]
	436 Call 0x1C17D08
	437 Move W8, [X22+24]
	438 NotImplemented "Instruction CMP not yet implemented."
	439 Move [X22+48], X0
	440 Move X0, X19
	441 Move X1, X31
	442 Call "il2cpp_vm_object_is_inst", X0
	443 Compare X0, 0
	444 JumpIfEqual {475}
	445 Move X8, [X0]
	446 Move X9, [X8+424]
	447 Move X1, [X8+432]
	448 NotImplemented "Instruction BLR not yet implemented."
	449 Move W8, [X22+24]
	450 NotImplemented "Instruction CMP not yet implemented."
	451 Move [X22+56], X0
	452 Move X0, 0x95B000
	453 Move X0, [X0+1688]
	454 Call 0x1C17D08
	455 Move W8, [X22+24]
	456 NotImplemented "Instruction CMP not yet implemented."
	457 Move [X22+64], X0
	458 Move X0, X22
	459 Move X1, X31
	460 Call String.Concat, X0
	461 Move X19, X0
	462 Move X0, 0x905000
	463 Move X0, [X0+2600]
	464 Call 0x1C17D08
	465 Move W8, [X0+224]
	466 Compare W8, 0
	467 JumpIfNotEqual {469}
	468 Call 0x1C17DFC
	469 Move X0, X19
	470 Move X1, X31
	471 Call Debug.LogError, X0
	472 Move X0, X21
	473 Move X1, X31
	474 Call Debug.LogException, X0
	475 Call 0x1C17F20
	476 Call 0x1C17F28
	477 Move W0, 8
	478 Call 0x3EB2AF0
	479 Move X8, [X21]
	480 Move [X0], X8
	481 Move X1, 0x6C6000
	482 Add X1, X1, 3672
	483 Move X2, X31
	484 Call 0x3EB2B00
	485 Move X21, X0
	486 Call 0x3EB2AE0
	487 Move X0, X21
	488 Call 0x1D2D690
	489 Call 0x1991590

Method: System.Void SendValueToControl(TValue value)

Disassembly:
	0x0222F7E8 LDR X0, [X0 + 0x208]
	0x0222F7EC BL 0x1C16CF4
	0x0222F7F0 LDR X8, [X20 + 0x38]
	0x0222F7F4 CBNZ X8, 0x222F804
	0x0222F7F8 MOV X0, X20
	0x0222F7FC BL 0x1C5C6E0
	0x0222F800 LDR X8, [X20 + 0x38]
	0x0222F804 LDR X8, [X8 + 0x8]
	0x0222F808 LDR W21, [X8 + 0xFC]
	0x0222F80C ADD X8, X31, 0x0
	0x0222F810 ADD X9, X21, 0xF
	0x0222F814 AND X9, X9, 0x1FFFFFFFF
	0x0222F818 SUB X23, X8, X9
	0x0222F81C ADD X31, X23, 0x0
	0x0222F820 ADD X8, X31, 0x0
	0x0222F824 SUB X24, X8, X9
	0x0222F828 ADD X31, X24, 0x0
	0x0222F82C MOV X0, X24
	0x0222F830 MOV W1, W31
	0x0222F834 MOV X2, X21
	0x0222F838 BL 0x3EB1B10
	0x0222F83C LDR X0, [X25 + 0x10]
	0x0222F840 CBZ X0, 0x222F8DC
	0x0222F844 ADRP X8, 0x1EED000
	0x0222F848 LDR X8, [X8 + 0x208]
	0x0222F84C MOV W1, W22
	0x0222F850 LDR X2, [X8]
	0x0222F854 BL 0x24256C8
	0x0222F858 LDR X8, [X20 + 0x38]
	0x0222F85C SUB X3, X29, 0x18
	0x0222F860 MOV X2, X31
	0x0222F864 MOV X4, X23
	0x0222F868 LDR X1, [X8]
	0x0222F86C LDR X8, [X1]
	0x0222F870 STP X0, X23, [X29 - 0x18]
	0x0222F874 LDR X9, [X1 + 0x10]
	0x0222F878 MOV X0, X8
	0x0222F87C BLR X9
	0x0222F880 MOV X0, X24
	0x0222F884 MOV X1, X23
	0x0222F888 MOV X2, X21
	0x0222F88C BL 0x3EB1AC0
	0x0222F890 MOV X0, X23
	0x0222F894 MOV X1, X24
	0x0222F898 MOV X2, X21
	0x0222F89C BL 0x3EB1AC0
	0x0222F8A0 MOV X0, X19
	0x0222F8A4 MOV X1, X23
	0x0222F8A8 MOV X2, X21
	0x0222F8AC BL 0x3EB1AC0
	0x0222F8B0 LDR X8, [X26 + 0x28]
	0x0222F8B4 LDUR X9, [X29 - 0x8]
	0x0222F8B8 CMP X8, X9
	0x0222F8BC B.NE 0x222F8E0
	0x0222F8C0 ADD X31, X29, 0x0
	0x0222F8C4 LDP X20, X19, [X31 + 0x40]
	0x0222F8C8 LDP X22, X21, [X31 + 0x30]
	0x0222F8CC LDP X24, X23, [X31 + 0x20]
	0x0222F8D0 LDP X26, X25, [X31 + 0x10]
	0x0222F8D4 LDP X29, X30, [X31], #0x50
	0x0222F8D8 RET
	0x0222F8DC BL 0x1C16F20
	0x0222F8E0 BL 0x3EB1B20
	0x0222F8E4 SUB X31, X31, 0x80
	0x0222F8E8 STP X30, X21, [X31 + 0x60]
	0x0222F8EC STP X20, X19, [X31 + 0x70]
	0x0222F8F0 LDR X8, [X2 + 0x38]
	0x0222F8F4 MOV X19, X2
	0x0222F8F8 MOV X21, X1
	0x0222F8FC MOV X20, X0
	0x0222F900 CBNZ X8, 0x222F90C
	0x0222F904 MOV X0, X19
	0x0222F908 BL 0x1C5C6E0
	0x0222F90C LDR W8, [X21]
	0x0222F910 CMP W8, 0x1
	0x0222F914 B.EQ 0x222F954
	0x0222F918 CMP W8, 0xB
	0x0222F91C B.NE 0x222F990
	0x0222F920 LDP V1, V0, [X21 + 0x10]
	0x0222F924 LDR V2, [X21]
	0x0222F928 ADD X0, X31, 0x30
	0x0222F92C MOV X1, X20
	0x0222F930 STP V1, V0, [X31 + 0x10]
	0x0222F934 STR V2, [X31]
	0x0222F938 LDR X8, [X19 + 0x38]
	0x0222F93C LDR X2, [X8]
	0x0222F940 STP V2, V1, [X31 + 0x30]
	0x0222F944 STR V0, [X31 + 0x5]
	0x0222F948 BL 0x22B78B4
	0x0222F94C MOV X19, X0
	0x0222F950 B 0x222F97C
	0x0222F954 LDR X8, [X19 + 0x38]
	0x0222F958 LDR X0, [X8 + 0x8]
	0x0222F95C LDRB W8, [X0 + 0x135]
	0x0222F960 TBNZ X8, 0x0, 0x222F968
	0x0222F964 BL 0x1C5C684
	0x0222F968 BL 0x1C16F10
	0x0222F96C LDR X8, [X19 + 0x38]
	0x0222F970 MOV X19, X0
	0x0222F974 LDR X1, [X8 + 0x10]
	0x0222F978 BL 0x2BA4F48
	0x0222F97C MOV X0, X19
	0x0222F980 LDP X20, X19, [X31 + 0x70]
	0x0222F984 LDP X30, X21, [X31 + 0x60]
	0x0222F988 ADD X31, X31, 0x80
	0x0222F98C RET
	0x0222F990 ADRP X0, 0x1EED000
	0x0222F994 LDR X0, [X0 + 0x220]
	0x0222F998 MOV W20, W8
	0x0222F99C BL 0x1C16D08
	0x0222F9A0 BL 0x1C16F10
	0x0222F9A4 MOV X21, X0
	0x0222F9A8 ADRP X0, 0x1EED000
	0x0222F9AC LDR X0, [X0 + 0x228]
	0x0222F9B0 BL 0x1C16D08
	0x0222F9B4 MOV X1, X0
	0x0222F9B8 MOV X0, X21
	0x0222F9BC MOV W2, W20
	0x0222F9C0 MOV X3, X31
	0x0222F9C4 BL 0x35666D0
	0x0222F9C8 MOV X0, X21
	0x0222F9CC MOV X1, X19
	0x0222F9D0 BL 0x1C16DEC
	0x0222F9D4 SUB X31, X31, 0x80
	0x0222F9D8 STP X30, X21, [X31 + 0x60]
	0x0222F9DC STP X20, X19, [X31 + 0x70]
	0x0222F9E0 LDR X8, [X2 + 0x38]
	0x0222F9E4 MOV X19, X2
	0x0222F9E8 MOV X21, X1
	0x0222F9EC MOV X20, X0
	0x0222F9F0 CBNZ X8, 0x222F9FC
	0x0222F9F4 MOV X0, X19
	0x0222F9F8 BL 0x1C5C6E0
	0x0222F9FC LDR W8, [X21]
	0x0222FA00 CMP W8, 0x1
	0x0222FA04 B.EQ 0x222FA44
	0x0222FA08 CMP W8, 0xB
	0x0222FA0C B.NE 0x222FA80
	0x0222FA10 LDP V1, V0, [X21 + 0x10]
	0x0222FA14 LDR V2, [X21]
	0x0222FA18 ADD X0, X31, 0x30
	0x0222FA1C MOV X1, X20
	0x0222FA20 STP V1, V0, [X31 + 0x10]
	0x0222FA24 STR V2, [X31]
	0x0222FA28 LDR X8, [X19 + 0x38]
	0x0222FA2C LDR X2, [X8]
	0x0222FA30 STP V2, V1, [X31 + 0x30]
	0x0222FA34 STR V0, [X31 + 0x5]
	0x0222FA38 BL 0x22B78B4
	0x0222FA3C MOV X19, X0
	0x0222FA40 B 0x222FA6C
	0x0222FA44 LDR X8, [X19 + 0x38]
	0x0222FA48 LDR X0, [X8 + 0x8]
	0x0222FA4C LDRB W8, [X0 + 0x135]
	0x0222FA50 TBNZ X8, 0x0, 0x222FA58
	0x0222FA54 BL 0x1C5C684
	0x0222FA58 BL 0x1C16F10
	0x0222FA5C LDR X8, [X19 + 0x38]
	0x0222FA60 MOV X19, X0
	0x0222FA64 LDR X1, [X8 + 0x10]
	0x0222FA68 BL 0x2BA5AAC
	0x0222FA6C MOV X0, X19
	0x0222FA70 LDP X20, X19, [X31 + 0x70]
	0x0222FA74 LDP X30, X21, [X31 + 0x60]
	0x0222FA78 ADD X31, X31, 0x80
	0x0222FA7C RET
	0x0222FA80 ADRP X0, 0x1EED000
	0x0222FA84 LDR X0, [X0 + 0x220]
	0x0222FA88 MOV W20, W8
	0x0222FA8C BL 0x1C16D08
	0x0222FA90 BL 0x1C16F10
	0x0222FA94 MOV X21, X0
	0x0222FA98 ADRP X0, 0x1EED000
	0x0222FA9C LDR X0, [X0 + 0x228]
	0x0222FAA0 BL 0x1C16D08
	0x0222FAA4 MOV X1, X0
	0x0222FAA8 MOV X0, X21
	0x0222FAAC MOV W2, W20
	0x0222FAB0 MOV X3, X31
	0x0222FAB4 BL 0x35666D0
	0x0222FAB8 MOV X0, X21
	0x0222FABC MOV X1, X19
	0x0222FAC0 BL 0x1C16DEC
	0x0222FAC4 SUB X31, X31, 0x80
	0x0222FAC8 STP X30, X21, [X31 + 0x60]
	0x0222FACC STP X20, X19, [X31 + 0x70]
	0x0222FAD0 LDR X8, [X2 + 0x38]
	0x0222FAD4 MOV X19, X2
	0x0222FAD8 MOV X21, X1
	0x0222FADC MOV X20, X0
	0x0222FAE0 CBNZ X8, 0x222FAEC
	0x0222FAE4 MOV X0, X19
	0x0222FAE8 BL 0x1C5C6E0
	0x0222FAEC LDR W8, [X21]
	0x0222FAF0 CMP W8, 0x1
	0x0222FAF4 B.EQ 0x222FB38
	0x0222FAF8 CMP W8, 0xB
	0x0222FAFC B.NE 0x222FB78
	0x0222FB00 LDP V1, V0, [X21 + 0x10]
	0x0222FB04 LDR V2, [X21]
	0x0222FB08 ADD X0, X31, 0x0
	0x0222FB0C MOV X1, X20
	0x0222FB10 STP V1, V0, [X31 + 0x40]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X1+56]
	009 Move X19, X1
	010 Move V8, V0
	011 Move X20, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {28}
	014 Move X0, 0x1EED000
	015 Move X0, [X0+3792]
	016 Call 0x1C17CF4
	017 Move X0, 0x1EED000
	018 Move X0, [X0+3784]
	019 Call 0x1C17CF4
	020 Move X0, 0x1EED000
	021 Move X0, [X0+624]
	022 Call 0x1C17CF4
	023 Move X8, [X19+56]
	024 Compare X8, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X19
	027 Call 0x1C5D6E0
	028 Move X21, [X20+32]
	029 Compare X21, 0
	030 JumpIfEqual {71}
	031 Move X8, [X19+56]
	032 Move X0, [X8]
	033 Move W8, [X0+309]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {39}
	038 Call 0x1C5D684
	039 Move X8, [X21]
	040 Move W9, [X0+304]
	041 Move W10, [X8+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X8+200]
	044 Add X8, X8, X9
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, 0x1EED000
	048 Move X8, [X8+3784]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move X22, [X8]
	052 Compare X22, 0
	053 JumpIfEqual {220}
	054 Move X10, 0x1EED000
	055 Move X8, [X22]
	056 Move X10, [X10+3792]
	057 Add X23, X20, 48
	058 NotImplemented "Instruction LDRH not yet implemented."
	059 Move X1, [X10]
	060 Compare X9, 0
	061 JumpIfEqual {68}
	062 Move X10, [X8+176]
	063 Add X10, X10, 8
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Subtract X9, X9, 1
	067 Add X10, X10, 16
	068 Move W2, 19
	069 Move X0, X22
	070 Call 0x1C5D788
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X30, [X31+16]
	076 Move X23, [X31+24]
	077 Move V8, [X31+64]
	078 Return 
	079 Move W9, [X10]
	080 Add W9, W9, 19
	081 Add X8, X8, W9
	082 Add X0, X8, 312
	083 Move X8, [X0]
	084 Move X1, [X0+8]
	085 Move X0, X22
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X0, X23
	088 Move X1, X31
	089 Call InputEventPtr.set_internalTime, X0, V0
	090 Move X8, [X19+56]
	091 Move X1, [X20+48]
	092 Move X0, X21
	093 Move V0, V8
	094 Move X2, [X8+24]
	095 Call 0x21FEF20, X0, X1, X2
	096 Move X8, 0x1EED000
	097 Move X8, [X8+624]
	098 Move X19, [X20+48]
	099 Move X0, [X8]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X0, X19
	105 Move X20, [X31+48]
	106 Move X19, [X31+56]
	107 Move X22, [X31+32]
	108 Move X21, [X31+40]
	109 Move X30, [X31+16]
	110 Move X23, [X31+24]
	111 Move X1, X31
	112 Move V8, [X31+64]
	113 Call InputSystem.QueueEvent, X0
	114 Return 
	115 Move X0, 0x1EC5000
	116 Move X0, [X0+2760]
	117 Call 0x1C17D08
	118 Move W1, 6
	119 Call 0x1C17D6C
	120 Move X21, X0
	121 Call 0x19913C0
	122 Move X0, 0x1EEE000
	123 Move X0, [X0+496]
	124 Call 0x1C17D08
	125 Move X2, X0
	126 Move X0, X21
	127 Move X1, X31
	128 Call 0x1994444
	129 Move X0, X20
	130 Move X1, X31
	131 Call OnScreenControl.get_controlPath, X0
	132 Move X22, X0
	133 Move X0, X21
	134 Call 0x19913C0
	135 Move W1, 1
	136 Move X0, X21
	137 Move X2, X22
	138 Call 0x1994444
	139 Move X0, X21
	140 Call 0x19913C0
	141 Move X0, 0x1EEE000
	142 Move X0, [X0+504]
	143 Call 0x1C17D08
	144 Move X2, X0
	145 Move W1, 2
	146 Move X0, X21
	147 Call 0x1994444
	148 Move X20, [X20+32]
	149 Move X0, X20
	150 Call 0x19913C0
	151 Move X0, X20
	152 Move X1, X31
	153 Call "il2cpp_vm_object_is_inst", X0
	154 Move X20, X0
	155 Call 0x19913C0
	156 Move X8, [X20]
	157 Move X0, X20
	158 Move X9, [X8+424]
	159 Move X1, [X8+432]
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move X20, X0
	162 Move X0, X21
	163 Call 0x19913C0
	164 Move W1, 3
	165 Move X0, X21
	166 Move X2, X20
	167 Call 0x1994444
	168 Move X0, X21
	169 Call 0x19913C0
	170 Move X0, 0x1EEE000
	171 Move X0, [X0+512]
	172 Call 0x1C17D08
	173 Move X2, X0
	174 Move W1, 4
	175 Move X0, X21
	176 Call 0x1994444
	177 Move X8, [X19+56]
	178 Move X0, 0x1EC5000
	179 Move X20, [X8+8]
	180 Move X0, [X0+1728]
	181 Call 0x1C17D08
	182 Call 0x19913D0
	183 Move X0, X20
	184 Move X1, X31
	185 Call Type.GetTypeFromHandle, X0
	186 Move X20, X0
	187 Call 0x19913C0
	188 Move X8, [X20]
	189 Move X0, X20
	190 Move X9, [X8+424]
	191 Move X1, [X8+432]
	192 NotImplemented "Instruction BLR not yet implemented."
	193 Move X20, X0
	194 Move X0, X21
	195 Call 0x19913C0
	196 Move W1, 5
	197 Move X0, X21
	198 Move X2, X20
	199 Call 0x1994444
	200 Move X0, X21
	201 Move X1, X31
	202 Call String.Concat, X0
	203 Move X20, X0
	204 Move X0, 0x1ECD000
	205 Move X0, [X0+1400]
	206 Call 0x1C17D08
	207 Call 0x1C17F10
	208 Move X21, X0
	209 Move X0, 0x1ECF000
	210 Move X0, [X0+3784]
	211 Call 0x1C17D08
	212 Move X2, X0
	213 Move X0, X21
	214 Move X1, X20
	215 Move X3, X31
	216 Call ArgumentException..ctor, X0, X1, X2
	217 Move X0, X21
	218 Move X1, X19
	219 Call 0x1C17DEC
	220 Call 0x1C17F20

Method: System.Void SentDefaultValueToControl()

Disassembly:
	0x037EFDA8 BL 0x2A719B8
	0x037EFDAC CBZ X20, 0x37F0054
	0x037EFDB0 ADRP X23, 0x95A000
	0x037EFDB4 LDR X23, [X23 + 0x700]
	0x037EFDB8 MOV X0, X20
	0x037EFDBC MOV X1, X21
	0x037EFDC0 MOV X2, X31
	0x037EFDC4 BL 0x37348A4
	0x037EFDC8 LDR X0, [X22]
	0x037EFDCC LDR X20, [X19 + 0x50]
	0x037EFDD0 BL 0x1C16F10
	0x037EFDD4 LDR X2, [X23]
	0x037EFDD8 MOV X1, X19
	0x037EFDDC MOV X3, X31
	0x037EFDE0 MOV X21, X0
	0x037EFDE4 BL 0x2A719B8
	0x037EFDE8 CBZ X20, 0x37F0054
	0x037EFDEC MOV X0, X20
	0x037EFDF0 MOV X1, X21
	0x037EFDF4 MOV X2, X31
	0x037EFDF8 BL 0x3734954
	0x037EFDFC LDR X0, [X19 + 0x50]
	0x037EFE00 CBZ X0, 0x37F0054
	0x037EFE04 MOV X1, X31
	0x037EFE08 BL 0x37350C8
	0x037EFE0C LDR X0, [X19 + 0x58]
	0x037EFE10 CBZ X0, 0x37F0054
	0x037EFE14 MOV X1, X31
	0x037EFE18 BL 0x37350C8
	0x037EFE1C MOV X0, X19
	0x037EFE20 MOV X1, X31
	0x037EFE24 BL 0x3C32E90
	0x037EFE28 CBZ X0, 0x37F0054
	0x037EFE2C ADRP X22, 0x92B000
	0x037EFE30 LDR X22, [X22 + 0xC70]
	0x037EFE34 LDR X8, [X0]
	0x037EFE38 LDR X1, [X22]
	0x037EFE3C CMP X8, X1
	0x037EFE40 B.NE 0x37F0058
	0x037EFE44 MOV X1, X31
	0x037EFE48 BL 0x3C3E7F0
	0x037EFE4C LDR W8, [X19 + 0x48]
	0x037EFE50 STP S0, S1, [X19 + 0x60]
	0x037EFE54 STR W31, [X19 + 0x68]
	0x037EFE58 CMP W8, 0x2
	0x037EFE5C B.NE 0x37F0040
	0x037EFE60 STP S0, S1, [X19 + 0x6C]
	0x037EFE64 ADRP X8, 0x90C000
	0x037EFE68 LDR X8, [X8 + 0xC60]
	0x037EFE6C MOVZ W1, 0x1
	0x037EFE70 LDR X0, [X8]
	0x037EFE74 BL 0x1C16D6C
	0x037EFE78 ADRP X8, 0x904000
	0x037EFE7C LDR X8, [X8 + 0x6C0]
	0x037EFE80 ADRP X9, 0x95A000
	0x037EFE84 MOV X20, X0
	0x037EFE88 LDR X8, [X8]
	0x037EFE8C LDR X9, [X9 + 0x6E0]
	0x037EFE90 LDR W10, [X8 + 0xE0]
	0x037EFE94 LDR X21, [X9]
	0x037EFE98 CBNZ W10, 0x37EFEA4
	0x037EFE9C MOV X0, X8
	0x037EFEA0 BL 0x1C16DFC
	0x037EFEA4 MOV X0, X21
	0x037EFEA8 MOV X1, X31
	0x037EFEAC BL 0x338C698
	0x037EFEB0 CBZ X20, 0x37F0054
	0x037EFEB4 MOV X21, X0
	0x037EFEB8 CBZ X0, 0x37EFED0
	0x037EFEBC LDR X8, [X20]
	0x037EFEC0 MOV X0, X21
	0x037EFEC4 LDR X1, [X8 + 0x40]
	0x037EFEC8 BL 0x1C16E00
	0x037EFECC CBZ X0, 0x37F0068
	0x037EFED0 LDR W8, [X20 + 0x18]
	0x037EFED4 CBZ W8, 0x37F005C
	0x037EFED8 STR X21, [X20 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xBF3000
	007 Move W8, [X20+862]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x92D000
	014 Move X0, [X0+3792]
	015 Call 0x1C17CF4
	016 Move X0, 0x92D000
	017 Move X0, [X0+3784]
	018 Call 0x1C17CF4
	019 Move X0, 0x92D000
	020 Move X0, [X0+624]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+862], W8
	024 Move X8, [X19+32]
	025 Compare X8, 0
	026 JumpIfEqual {53}
	027 Move X8, 0x92D000
	028 Move X8, [X8+3784]
	029 Move X8, [X8]
	030 Move X8, [X8+184]
	031 Move X20, [X8]
	032 Compare X20, 0
	033 JumpIfEqual {89}
	034 Move X10, 0x92D000
	035 Move X8, [X20]
	036 Move X10, [X10+3792]
	037 Move X22, 0x92D000
	038 Add X21, X19, 48
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X1, [X10]
	041 Move X22, [X22+624]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move W2, 19
	051 Move X0, X20
	052 Call 0x1C5D788
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return 
	059 Move W9, [X10]
	060 Add W9, W9, 19
	061 Add X8, X8, W9
	062 Add X0, X8, 312
	063 Move X8, [X0]
	064 Move X1, [X0+8]
	065 Move X0, X20
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X0, X21
	068 Move X1, X31
	069 Call InputEventPtr.set_internalTime, X0, V0
	070 Move X0, [X19+32]
	071 Move X1, [X19+48]
	072 Move X2, X31
	073 Call InputControlExtensions.ResetToDefaultStateInEvent, X0, X1
	074 Move X0, [X22]
	075 Move X19, [X19+48]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X19
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X1, X31
	086 Move X30, [X31+48]
	087 Call InputSystem.QueueEvent, X0
	088 Return 
	089 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x037EFEDC ADRP X8, 0x904000

ISIL:
	001 Call OnScreenControl.SetupInputControl, X0
	002 Return 

Method: System.Void OnDisable()

Disassembly:
	0x037EFEE0 LDR X8, [X8 + 0xA58]
	0x037EFEE4 LDR X0, [X8]
	0x037EFEE8 BL 0x1C16F10
	0x037EFEEC ADRP X8, 0x95A000
	0x037EFEF0 LDR X8, [X8 + 0x738]
	0x037EFEF4 MOV X2, X20
	0x037EFEF8 MOV X3, X31
	0x037EFEFC MOV X21, X0
	0x037EFF00 LDR X1, [X8]
	0x037EFF04 BL 0x3C35A8C
	0x037EFF08 CBZ X21, 0x37F0054
	0x037EFF0C MOV X0, X21
	0x037EFF10 MOV X1, X31
	0x037EFF14 BL 0x3C356F8
	0x037EFF18 MOV X20, X0
	0x037EFF1C MOV X0, X19
	0x037EFF20 MOV X1, X31
	0x037EFF24 BL 0x3C32E90
	0x037EFF28 CBZ X20, 0x37F0054
	0x037EFF2C MOV X1, X0
	0x037EFF30 MOV X0, X20
	0x037EFF34 MOV X2, X31
	0x037EFF38 BL 0x3C3FE70
	0x037EFF3C ADRP X8, 0x95A000
	0x037EFF40 LDR X8, [X8 + 0x6D8]
	0x037EFF44 MOV X0, X21
	0x037EFF48 LDR X1, [X8]
	0x037EFF4C BL 0x21E52E4
	0x037EFF50 CBZ X0, 0x37F0054
	0x037EFF54 LDR X8, [X0]
	0x037EFF58 FMOV S0, 1
	0x037EFF5C FMOV S1, 1
	0x037EFF60 FMOV S2, 1
	0x037EFF64 LDR X9, [X8 + 0x2A8]
	0x037EFF68 LDR X1, [X8 + 0x2B0]
	0x037EFF6C FMOV S3, W31
	0x037EFF70 MOV X20, X0
	0x037EFF74 BLR X9
	0x037EFF78 MOV X0, X21
	0x037EFF7C MOV X1, X31
	0x037EFF80 BL 0x3C356F8
	0x037EFF84 CBZ X0, 0x37F0054
	0x037EFF88 LDR X1, [X22]
	0x037EFF8C LDR X8, [X0]
	0x037EFF90 MOV X21, X0
	0x037EFF94 CMP X8, X1
	0x037EFF98 B.NE 0x37F0060
	0x037EFF9C LDR V0, [X19 + 0x3C]
	0x037EFFA0 MOV X0, X21
	0x037EFFA4 MOV X1, X31
	0x037EFFA8 FADD S0, S0, S0
	0x037EFFAC MOV V1.16B, V0.16B
	0x037EFFB0 BL 0x3C3E99C
	0x037EFFB4 FMOV S0, 1
	0x037EFFB8 FMOV S1, 1
	0x037EFFBC FMOV S2, W31
	0x037EFFC0 MOV X0, X21
	0x037EFFC4 MOV X1, X31
	0x037EFFC8 BL 0x3C3FC4C
	0x037EFFCC ADRP X19, 0xBE9000
	0x037EFFD0 LDRB W8, [X19 + 0x783]
	0x037EFFD4 CBNZ W8, 0x37EFFEC
	0x037EFFD8 ADRP X0, 0x904000
	0x037EFFDC LDR X0, [X0 + 0x5A0]
	0x037EFFE0 BL 0x1C16CF4
	0x037EFFE4 MOVZ W8, 0x1
	0x037EFFE8 STRB W8, [X19 + 0x783]
	0x037EFFEC ADRP X8, 0x904000
	0x037EFFF0 LDR X8, [X8 + 0x5A0]
	0x037EFFF4 MOV X0, X21
	0x037EFFF8 MOV X1, X31
	0x037EFFFC LDR X8, [X8]
	0x037F0000 LDR X8, [X8 + 0xB8]
	0x037F0004 LDP S0, S1, [X8]
	0x037F0008 LDR V2, [X8 + 0x8]
	0x037F000C BL 0x3C3EBD4
	0x037F0010 MOVZ W0, 0x10
	0x037F0014 MOVN W1, 0x0
	0x037F0018 MOV X2, X31
	0x037F001C BL 0x3766C6C
	0x037F0020 MOV X1, X0
	0x037F0024 MOV X0, X20
	0x037F0028 MOV X2, X31
	0x037F002C BL 0x3CD3398
	0x037F0030 FMOV S0, 0.5
	0x037F0034 MOV X0, X20
	0x037F0038 MOV X1, X31
	0x037F003C BL 0x3CE02F8
	0x037F0040 LDP X20, X19, [X31 + 0x40]
	0x037F0044 LDP X22, X21, [X31 + 0x30]
	0x037F0048 LDP X30, X23, [X31 + 0x20]
	0x037F004C ADD X31, X31, 0x50
	0x037F0050 RET
	0x037F0054 BL 0x1C16F20
	0x037F0058 BL 0x1C171E0
	0x037F005C BL 0x1C16F28
	0x037F0060 MOV X0, X21
	0x037F0064 BL 0x1C171E0
	0x037F0068 BL 0x1C16F44
	0x037F006C MOV X1, X31
	0x037F0070 BL 0x1C16DEC
	0x037F0074 SUB X31, X31, 0x120
	0x037F0078 STP D9, D8, [X31 + 0xD0]
	0x037F007C STR X29, [X31 + 0xE0]
	0x037F0080 STP X30, X23, [X31 + 0xF0]
	0x037F0084 STP X22, X21, [X31 + 0x100]
	0x037F0088 STP X20, X19, [X31 + 0x110]
	0x037F008C ADRP X20, 0xBF1000
	0x037F0090 LDRB W8, [X20 + 0x366]
	0x037F0094 MOV X19, X0
	0x037F0098 STP X1, X2, [X31 + 0xC0]
	0x037F009C TBNZ X8, 0x0, 0x37F012C
	0x037F00A0 ADRP X0, 0x907000
	0x037F00A4 LDR X0, [X0 + 0x3D8]
	0x037F00A8 BL 0x1C16CF4
	0x037F00AC ADRP X0, 0x959000
	0x037F00B0 LDR X0, [X0 + 0x748]
	0x037F00B4 BL 0x1C16CF4
	0x037F00B8 ADRP X0, 0x959000
	0x037F00BC LDR X0, [X0 + 0x750]
	0x037F00C0 BL 0x1C16CF4
	0x037F00C4 ADRP X0, 0x959000
	0x037F00C8 LDR X0, [X0 + 0x758]
	0x037F00CC BL 0x1C16CF4
	0x037F00D0 ADRP X0, 0x92A000
	0x037F00D4 LDR X0, [X0 + 0xDF8]
	0x037F00D8 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+136], X23
	004 Move [X31+144], X22
	005 Move [X31+152], X21
	006 Move [X31+160], X20
	007 Move [X31+168], X19
	008 Move X20, 0xBF3000
	009 Move W8, [X20+863]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x95B000
	016 Move X0, [X0+1584]
	017 Call 0x1C17CF4
	018 Move X0, 0x95B000
	019 Move X0, [X0+1592]
	020 Call 0x1C17CF4
	021 Move X0, 0x95B000
	022 Move X0, [X0+1600]
	023 Call 0x1C17CF4
	024 Move X0, 0x905000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x95B000
	028 Move X0, [X0+1608]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+863], W8
	032 NotImplemented "Instruction MOVI not yet implemented."
	033 Move [X31+32], X31
	034 Move [X31], V0
	035 Move [X31+8], V0
	036 Move X8, [X19+32]
	037 Compare X8, 0
	038 JumpIfEqual {141}
	039 Move X22, 0x95B000
	040 Move X22, [X22+1608]
	041 Move X9, [X22]
	042 Move X0, [X9+184]
	043 Move W9, [X0]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X23, 0x95B000
	046 Move X21, [X8+120]
	047 Move X23, [X23+1592]
	048 Move W20, W31
	049 Move X2, [X23]
	050 Add X8, X31, 80
	051 Move W1, W20
	052 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	053 Move X8, [X31+104]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X8, [X22]
	056 Add W20, W20, 1
	057 Move X0, [X8+184]
	058 Move W8, [X0]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X8, [X22]
	061 Move X2, [X23]
	062 Move W1, W20
	063 Move X0, [X8+184]
	064 Add X8, X31, 80
	065 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	066 Move X8, [X31+112]
	067 Move V0, [X31+80]
	068 Move V1, [X31+96]
	069 Add X0, X31, 0
	070 Move X1, X19
	071 Move [X31+32], X8
	072 Add X8, X31, 80
	073 Move [X31], V0
	074 Move [X31+8], V1
	075 Call OnScreenDeviceInfo.RemoveControl, X0, X1
	076 Move X8, 0x905000
	077 Move V0, [X31+80]
	078 Move V1, [X31+96]
	079 Move X8, [X8+1432]
	080 Move X21, [X31+112]
	081 Move [X31+48], V0
	082 Move [X31+56], V1
	083 Move X0, [X8]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X21
	089 Move X1, X31
	090 Move X2, X31
	091 Call Object.op_Equality, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {117}
	096 Move X8, [X22]
	097 Move X2, [X23]
	098 Move W1, W20
	099 Move X0, [X8+184]
	100 Add X8, X31, 80
	101 Call InlinedArray`1<OnScreenDeviceInfo>.get_Item, X0, X1
	102 Move V0, [X31+80]
	103 Move V1, [X31+96]
	104 Move X8, [X31+112]
	105 Add X0, X31, 0
	106 Move [X31], V0
	107 Move [X31+8], V1
	108 Move [X31+32], X8
	109 Call OnScreenDeviceInfo.Destroy, X0
	110 Move X9, 0x95A000
	111 Move X8, [X22]
	112 Move X9, [X9+1584]
	113 Move W1, W20
	114 Move X0, [X8+184]
	115 Move X2, [X9]
	116 Call InlinedArray`1<OnScreenDeviceInfo>.RemoveAt, X0, X1
	117 Move X9, 0x95A000
	118 Move X8, [X22]
	119 Move X9, [X9+1600]
	120 Move V0, [X31+48]
	121 Move V1, [X31+64]
	122 Add X2, X31, 80
	123 Move X0, [X8+184]
	124 Move X3, [X9]
	125 Move W1, W20
	126 Move [X31+80], V0
	127 Move [X31+88], V1
	128 Move [X31+112], X21
	129 Call InlinedArray`1<OnScreenDeviceInfo>.set_Item, X0, X1, X2
	130 Move X0, [X19+32]
	131 Move X1, X31
	132 Call InputControlExtensions.CheckStateIsAtDefault, X0
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfEqual {139}
	137 Move X0, X19
	138 Call OnScreenControl.SentDefaultValueToControl, X0
	139 Move [X19+32], X31
	140 Move [X19+48], X31
	141 Move X20, [X31+160]
	142 Move X19, [X31+168]
	143 Move X22, [X31+144]
	144 Move X21, [X31+152]
	145 Move X30, [X31+128]
	146 Move X23, [X31+136]
	147 Add X31, X31, 176
	148 Return 

Method: System.Void .ctor()

Disassembly:
	0x037EF56C SUB X31, X31, 0x60
	0x037EF570 STP D9, D8, [X31 + 0x20]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

