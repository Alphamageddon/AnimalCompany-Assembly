Type: UnityEngine.InputSystem.EnhancedTouch.Touch

Method: System.Boolean get_valid()

Disassembly:
	0x037F899C STP X20, X19, [X31 + 0x10]
	0x037F89A0 ADRP X20, 0xBE9000
	0x037F89A4 ADRP X21, 0x923000
	0x037F89A8 LDRB W8, [X20 + 0x3B0]
	0x037F89AC LDR X21, [X21 + 0x628]
	0x037F89B0 MOV X19, X0
	0x037F89B4 TBNZ X8, 0x0, 0x37F89CC
	0x037F89B8 ADRP X0, 0x923000
	0x037F89BC LDR X0, [X0 + 0x628]
	0x037F89C0 BL 0x1C16CF4
	0x037F89C4 MOVZ W8, 0x1
	0x037F89C8 STRB W8, [X20 + 0x3B0]
	0x037F89CC LDR X0, [X21]
	0x037F89D0 LDR W8, [X0 + 0xE0]
	0x037F89D4 CBNZ W8, 0x37F89DC
	0x037F89D8 BL 0x1C16DFC
	0x037F89DC MOV X0, X19
	0x037F89E0 BL 0x37F89FC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBEA000
	006 Move X20, 0x952000
	007 Move W8, [X21+943]
	008 Move X20, [X20+2856]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x952000
	015 Move X0, [X0+2856]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+943], W8
	019 Move X1, [X20]
	020 Add X0, X19, 8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x25C2504, X0
	026 Return X0

Method: UnityEngine.InputSystem.EnhancedTouch.Finger get_finger()

Disassembly:
	0x037F99F4 ADRP X21, 0x922000
	0x037F99F8 LDR X21, [X21 + 0x628]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: UnityEngine.InputSystem.TouchPhase get_phase()

Disassembly:
	0x037F9998 LDR V0, [X8]
	0x037F999C STR X9, [X31 + 0x10]
	0x037F99A0 STR V0, [X31]
	0x037F99A4 BL 0x1C16E04
	0x037F99A8 LDP X20, X19, [X31 + 0x30]
	0x037F99AC LDR X30, [X31 + 0x20]
	0x037F99B0 ADD X31, X31, 0x40
	0x037F99B4 RET
	0x037F99B8 STP X30, X21, [X31 - 0x20]!
	0x037F99BC STP X20, X19, [X31 + 0x10]
	0x037F99C0 ADRP X20, 0xBE8000
	0x037F99C4 LDRB W8, [X20 + 0x3CA]
	0x037F99C8 MOV X19, X0
	0x037F99CC TBNZ X8, 0x0, 0x37F99F0
	0x037F99D0 ADRP X0, 0x950000
	0x037F99D4 LDR X0, [X0 + 0xC40]
	0x037F99D8 BL 0x1C16CF4
	0x037F99DC ADRP X0, 0x922000
	0x037F99E0 LDR X0, [X0 + 0x628]
	0x037F99E4 BL 0x1C16CF4
	0x037F99E8 MOVZ W8, 0x1
	0x037F99EC STRB W8, [X20 + 0x3CA]
	0x037F99F0 CBZ X19, 0x37F9A34

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+944]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+944], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move W0, [X0+32]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Boolean get_began()

Disassembly:
	0x037F9A44 MOV X19, X0
	0x037F9A48 ADRP X0, 0x904000
	0x037F9A4C LDR X0, [X0 + 0xEC8]
	0x037F9A50 BL 0x1C16D08
	0x037F9A54 MOV X1, X0
	0x037F9A58 MOV X0, X19
	0x037F9A5C MOV X2, X31
	0x037F9A60 BL 0x330E100
	0x037F9A64 ADRP X0, 0x950000
	0x037F9A68 LDR X0, [X0 + 0xC48]
	0x037F9A6C BL 0x1C16D08
	0x037F9A70 MOV X1, X0
	0x037F9A74 MOV X0, X19
	0x037F9A78 BL 0x1C16DEC
	0x037F9A7C STP X30, X21, [X31 - 0x20]!
	0x037F9A80 STP X20, X19, [X31 + 0x10]
	0x037F9A84 ADRP X20, 0xBE8000
	0x037F9A88 LDRB W8, [X20 + 0x3CB]
	0x037F9A8C MOV X19, X0
	0x037F9A90 TBNZ X8, 0x0, 0x37F9AB4
	0x037F9A94 ADRP X0, 0x950000
	0x037F9A98 LDR X0, [X0 + 0xC50]
	0x037F9A9C BL 0x1C16CF4
	0x037F9AA0 ADRP X0, 0x922000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+945]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+945], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_phase, X0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean get_inProgress()

Disassembly:
	0x037F9AA4 LDR X0, [X0 + 0x628]
	0x037F9AA8 BL 0x1C16CF4
	0x037F9AAC MOVZ W8, 0x1
	0x037F9AB0 STRB W8, [X20 + 0x3CB]
	0x037F9AB4 CBZ X19, 0x37F9AF8
	0x037F9AB8 ADRP X21, 0x922000
	0x037F9ABC LDR X21, [X21 + 0x628]
	0x037F9AC0 ADRP X20, 0x950000
	0x037F9AC4 LDR X0, [X21]
	0x037F9AC8 LDR W8, [X0 + 0xE0]
	0x037F9ACC LDR X20, [X20 + 0xC50]
	0x037F9AD0 CBNZ W8, 0x37F9ADC
	0x037F9AD4 BL 0x1C16DFC
	0x037F9AD8 LDR X0, [X21]
	0x037F9ADC LDR X8, [X0 + 0xB8]
	0x037F9AE0 LDR X2, [X20]
	0x037F9AE4 MOV X1, X19
	0x037F9AE8 LDP X20, X19, [X31 + 0x10]
	0x037F9AEC ADD X0, X8, 0x20
	0x037F9AF0 LDP X30, X21, [X31], #0x20
	0x037F9AF4 B 0x28F1650
	0x037F9AF8 ADRP X0, 0x8FF000
	0x037F9AFC LDR X0, [X0 + 0x528]
	0x037F9B00 BL 0x1C16D08
	0x037F9B04 BL 0x1C16F10
	0x037F9B08 MOV X19, X0
	0x037F9B0C ADRP X0, 0x904000
	0x037F9B10 LDR X0, [X0 + 0xEC8]
	0x037F9B14 BL 0x1C16D08
	0x037F9B18 MOV X1, X0
	0x037F9B1C MOV X0, X19
	0x037F9B20 MOV X2, X31
	0x037F9B24 BL 0x330E100
	0x037F9B28 ADRP X0, 0x950000
	0x037F9B2C LDR X0, [X0 + 0xC58]
	0x037F9B30 BL 0x1C16D08
	0x037F9B34 MOV X1, X0
	0x037F9B38 MOV X0, X19
	0x037F9B3C BL 0x1C16DEC
	0x037F9B40 STP X30, X21, [X31 - 0x20]!
	0x037F9B44 STP X20, X19, [X31 + 0x10]
	0x037F9B48 ADRP X20, 0xBE8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBE9000
	006 Move X20, 0x923000
	007 Move W8, [X21+946]
	008 Move X20, [X20+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+946], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_phase, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Call Touch.get_phase, X0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W0, 1
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Call Touch.get_phase, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: System.Boolean get_ended()

Disassembly:
	0x037F9B4C LDRB W8, [X20 + 0x3CC]
	0x037F9B50 MOV X19, X0
	0x037F9B54 TBNZ X8, 0x0, 0x37F9B78
	0x037F9B58 ADRP X0, 0x950000
	0x037F9B5C LDR X0, [X0 + 0xC40]
	0x037F9B60 BL 0x1C16CF4
	0x037F9B64 ADRP X0, 0x922000
	0x037F9B68 LDR X0, [X0 + 0x628]
	0x037F9B6C BL 0x1C16CF4
	0x037F9B70 MOVZ W8, 0x1
	0x037F9B74 STRB W8, [X20 + 0x3CC]
	0x037F9B78 CBZ X19, 0x37F9BBC
	0x037F9B7C ADRP X21, 0x922000
	0x037F9B80 LDR X21, [X21 + 0x628]
	0x037F9B84 ADRP X20, 0x950000
	0x037F9B88 LDR X0, [X21]
	0x037F9B8C LDR W8, [X0 + 0xE0]
	0x037F9B90 LDR X20, [X20 + 0xC40]
	0x037F9B94 CBNZ W8, 0x37F9BA0
	0x037F9B98 BL 0x1C16DFC
	0x037F9B9C LDR X0, [X21]
	0x037F9BA0 LDR X8, [X0 + 0xB8]
	0x037F9BA4 LDR X2, [X20]
	0x037F9BA8 MOV X1, X19
	0x037F9BAC LDP X20, X19, [X31 + 0x10]
	0x037F9BB0 ADD X0, X8, 0xC0
	0x037F9BB4 LDP X30, X21, [X31], #0x20
	0x037F9BB8 B 0x28F14E0
	0x037F9BBC ADRP X0, 0x8FF000
	0x037F9BC0 LDR X0, [X0 + 0x528]
	0x037F9BC4 BL 0x1C16D08
	0x037F9BC8 BL 0x1C16F10
	0x037F9BCC MOV X19, X0
	0x037F9BD0 ADRP X0, 0x904000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBE9000
	006 Move X20, 0x923000
	007 Move W8, [X21+947]
	008 Move X20, [X20+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+947], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_phase, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W0, 1
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Call Touch.get_phase, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0

Method: System.Int32 get_touchId()

Disassembly:
	0x037F993C ADRP X19, 0x922000
	0x037F9940 LDRB W8, [X20 + 0x3C9]
	0x037F9944 LDR X19, [X19 + 0x628]
	0x037F9948 TBNZ X8, 0x0, 0x37F996C
	0x037F994C ADRP X0, 0x950000
	0x037F9950 LDR X0, [X0 + 0xC38]
	0x037F9954 BL 0x1C16CF4
	0x037F9958 ADRP X0, 0x922000
	0x037F995C LDR X0, [X0 + 0x628]
	0x037F9960 BL 0x1C16CF4
	0x037F9964 MOVZ W8, 0x1
	0x037F9968 STRB W8, [X20 + 0x3C9]
	0x037F996C LDR X0, [X19]
	0x037F9970 ADRP X20, 0x950000
	0x037F9974 LDR W8, [X0 + 0xE0]
	0x037F9978 LDR X20, [X20 + 0xC38]
	0x037F997C CBNZ W8, 0x37F9988
	0x037F9980 BL 0x1C16DFC
	0x037F9984 LDR X0, [X19]
	0x037F9988 LDR X8, [X0 + 0xB8]
	0x037F998C LDR X0, [X20]
	0x037F9990 ADD X1, X31, 0x0
	0x037F9994 LDR X9, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+948]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+948], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move W0, [X0]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Single get_pressure()

Disassembly:
	0x037F9BD4 LDR X0, [X0 + 0xEC8]
	0x037F9BD8 BL 0x1C16D08
	0x037F9BDC MOV X1, X0
	0x037F9BE0 MOV X0, X19
	0x037F9BE4 MOV X2, X31
	0x037F9BE8 BL 0x330E100
	0x037F9BEC ADRP X0, 0x950000
	0x037F9BF0 LDR X0, [X0 + 0xC60]
	0x037F9BF4 BL 0x1C16D08
	0x037F9BF8 MOV X1, X0
	0x037F9BFC MOV X0, X19
	0x037F9C00 BL 0x1C16DEC
	0x037F9C04 STP X30, X21, [X31 - 0x20]!
	0x037F9C08 STP X20, X19, [X31 + 0x10]
	0x037F9C0C ADRP X20, 0xBE8000
	0x037F9C10 LDRB W8, [X20 + 0x3CD]
	0x037F9C14 MOV X19, X0
	0x037F9C18 TBNZ X8, 0x0, 0x37F9C3C
	0x037F9C1C ADRP X0, 0x950000
	0x037F9C20 LDR X0, [X0 + 0xC50]
	0x037F9C24 BL 0x1C16CF4
	0x037F9C28 ADRP X0, 0x922000
	0x037F9C2C LDR X0, [X0 + 0x628]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+949]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+949], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move V0, [X0+20]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return V0

Method: UnityEngine.Vector2 get_radius()

Disassembly:
	0x037F9C30 BL 0x1C16CF4
	0x037F9C34 MOVZ W8, 0x1
	0x037F9C38 STRB W8, [X20 + 0x3CD]
	0x037F9C3C CBZ X19, 0x37F9C80
	0x037F9C40 ADRP X21, 0x922000
	0x037F9C44 LDR X21, [X21 + 0x628]
	0x037F9C48 ADRP X20, 0x950000
	0x037F9C4C LDR X0, [X21]
	0x037F9C50 LDR W8, [X0 + 0xE0]
	0x037F9C54 LDR X20, [X20 + 0xC50]
	0x037F9C58 CBNZ W8, 0x37F9C64
	0x037F9C5C BL 0x1C16DFC
	0x037F9C60 LDR X0, [X21]
	0x037F9C64 LDR X8, [X0 + 0xB8]
	0x037F9C68 LDR X2, [X20]
	0x037F9C6C MOV X1, X19
	0x037F9C70 LDP X20, X19, [X31 + 0x10]
	0x037F9C74 ADD X0, X8, 0xC0
	0x037F9C78 LDP X30, X21, [X31], #0x20
	0x037F9C7C B 0x28F1650
	0x037F9C80 ADRP X0, 0x8FF000
	0x037F9C84 LDR X0, [X0 + 0x528]
	0x037F9C88 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+950]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+950], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move S0, [X0+24]
	027 Move S1, [X0+28]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Double get_startTime()

Disassembly:
	0x037F9C8C BL 0x1C16F10
	0x037F9C90 MOV X19, X0
	0x037F9C94 ADRP X0, 0x904000
	0x037F9C98 LDR X0, [X0 + 0xEC8]
	0x037F9C9C BL 0x1C16D08
	0x037F9CA0 MOV X1, X0
	0x037F9CA4 MOV X0, X19
	0x037F9CA8 MOV X2, X31
	0x037F9CAC BL 0x330E100
	0x037F9CB0 ADRP X0, 0x950000
	0x037F9CB4 LDR X0, [X0 + 0xC68]
	0x037F9CB8 BL 0x1C16D08
	0x037F9CBC MOV X1, X0
	0x037F9CC0 MOV X0, X19
	0x037F9CC4 BL 0x1C16DEC
	0x037F9CC8 STP X30, X21, [X31 - 0x20]!
	0x037F9CCC STP X20, X19, [X31 + 0x10]
	0x037F9CD0 ADRP X20, 0xBE8000
	0x037F9CD4 LDRB W8, [X20 + 0x3CE]
	0x037F9CD8 MOV X19, X0
	0x037F9CDC TBNZ X8, 0x0, 0x37F9D00
	0x037F9CE0 ADRP X0, 0x950000
	0x037F9CE4 LDR X0, [X0 + 0xC40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+951]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+951], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move V0, [X0+40]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return V0

Method: System.Double get_time()

Disassembly:
	0x037F9CE8 BL 0x1C16CF4
	0x037F9CEC ADRP X0, 0x922000
	0x037F9CF0 LDR X0, [X0 + 0x628]
	0x037F9CF4 BL 0x1C16CF4
	0x037F9CF8 MOVZ W8, 0x1
	0x037F9CFC STRB W8, [X20 + 0x3CE]
	0x037F9D00 CBZ X19, 0x37F9D44
	0x037F9D04 ADRP X21, 0x922000
	0x037F9D08 LDR X21, [X21 + 0x628]
	0x037F9D0C ADRP X20, 0x950000
	0x037F9D10 LDR X0, [X21]
	0x037F9D14 LDR W8, [X0 + 0xE0]
	0x037F9D18 LDR X20, [X20 + 0xC40]
	0x037F9D1C CBNZ W8, 0x37F9D28
	0x037F9D20 BL 0x1C16DFC
	0x037F9D24 LDR X0, [X21]
	0x037F9D28 LDR X8, [X0 + 0xB8]
	0x037F9D2C LDR X2, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBE9000
	006 Move X20, 0x951000
	007 Move W8, [X21+952]
	008 Move X20, [X20+3032]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x951000
	015 Move X0, [X0+3032]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+952], W8
	019 Move X1, [X20]
	020 Add X0, X19, 8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x25C25DC, X0
	026 Return V0

Method: UnityEngine.InputSystem.Touchscreen get_screen()

Disassembly:
	0x037F9D30 MOV X1, X19
	0x037F9D34 LDP X20, X19, [X31 + 0x10]
	0x037F9D38 ADD X0, X8, 0x70
	0x037F9D3C LDP X30, X21, [X31], #0x20
	0x037F9D40 B 0x28F14E0
	0x037F9D44 ADRP X0, 0x8FF000
	0x037F9D48 LDR X0, [X0 + 0x528]
	0x037F9D4C BL 0x1C16D08
	0x037F9D50 BL 0x1C16F10
	0x037F9D54 MOV X19, X0
	0x037F9D58 ADRP X0, 0x904000
	0x037F9D5C LDR X0, [X0 + 0xEC8]
	0x037F9D60 BL 0x1C16D08
	0x037F9D64 MOV X1, X0
	0x037F9D68 MOV X0, X19
	0x037F9D6C MOV X2, X31
	0x037F9D70 BL 0x330E100
	0x037F9D74 ADRP X0, 0x950000
	0x037F9D78 LDR X0, [X0 + 0xC70]
	0x037F9D7C BL 0x1C16D08
	0x037F9D80 MOV X1, X0
	0x037F9D84 MOV X0, X19
	0x037F9D88 BL 0x1C16DEC
	0x037F9D8C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+953]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+953], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, [X19]
	025 Compare X8, 0
	026 JumpIfEqual {33}
	027 Move X0, [X8+16]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0
	033 Call 0x1C17F20

Method: UnityEngine.Vector2 get_screenPosition()

Disassembly:
	0x037F8AF4 B.EQ 0x37F8B18
	0x037F8AF8 LDR X0, [X20]
	0x037F8AFC LDR W8, [X0 + 0xE0]
	0x037F8B00 CBNZ W8, 0x37F8B08
	0x037F8B04 BL 0x1C16DFC
	0x037F8B08 MOV X0, X19
	0x037F8B0C BL 0x37F8998
	0x037F8B10 CMP W0, 0x5
	0x037F8B14 B.NE 0x37F8B20
	0x037F8B18 MOVZ W0, 0x1
	0x037F8B1C B 0x37F8B40
	0x037F8B20 LDR X0, [X20]
	0x037F8B24 LDR W8, [X0 + 0xE0]
	0x037F8B28 CBNZ W8, 0x37F8B30
	0x037F8B2C BL 0x1C16DFC
	0x037F8B30 MOV X0, X19
	0x037F8B34 BL 0x37F8998
	0x037F8B38 CMP W0, 0x1
	0x037F8B3C CSET W0, EQ
	0x037F8B40 LDP X20, X19, [X31 + 0x10]
	0x037F8B44 LDP X30, X21, [X31], #0x20
	0x037F8B48 RET
	0x037F8B4C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBEA000
	006 Move X21, 0x924000
	007 Move W8, [X20+954]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x924000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+954], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move S0, [X0+4]
	027 Move S1, [X0+8]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: UnityEngine.Vector2 get_startScreenPosition()

Disassembly:
	0x037F9D90 STP X20, X19, [X31 + 0x10]
	0x037F9D94 ADRP X20, 0xBE8000
	0x037F9D98 LDRB W8, [X20 + 0x3CF]
	0x037F9D9C MOV X19, X0
	0x037F9DA0 TBNZ X8, 0x0, 0x37F9DC4
	0x037F9DA4 ADRP X0, 0x950000
	0x037F9DA8 LDR X0, [X0 + 0xC50]
	0x037F9DAC BL 0x1C16CF4
	0x037F9DB0 ADRP X0, 0x922000
	0x037F9DB4 LDR X0, [X0 + 0x628]
	0x037F9DB8 BL 0x1C16CF4
	0x037F9DBC MOVZ W8, 0x1
	0x037F9DC0 STRB W8, [X20 + 0x3CF]
	0x037F9DC4 CBZ X19, 0x37F9E08
	0x037F9DC8 ADRP X21, 0x922000
	0x037F9DCC LDR X21, [X21 + 0x628]
	0x037F9DD0 ADRP X20, 0x950000
	0x037F9DD4 LDR X0, [X21]
	0x037F9DD8 LDR W8, [X0 + 0xE0]
	0x037F9DDC LDR X20, [X20 + 0xC50]
	0x037F9DE0 CBNZ W8, 0x37F9DEC
	0x037F9DE4 BL 0x1C16DFC
	0x037F9DE8 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+955]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+955], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move S0, [X0+48]
	027 Move S1, [X0+52]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: UnityEngine.Vector2 get_delta()

Disassembly:
	0x037F9DEC LDR X8, [X0 + 0xB8]
	0x037F9DF0 LDR X2, [X20]
	0x037F9DF4 MOV X1, X19
	0x037F9DF8 LDP X20, X19, [X31 + 0x10]
	0x037F9DFC ADD X0, X8, 0x70
	0x037F9E00 LDP X30, X21, [X31], #0x20
	0x037F9E04 B 0x28F1650
	0x037F9E08 ADRP X0, 0x8FF000
	0x037F9E0C LDR X0, [X0 + 0x528]
	0x037F9E10 BL 0x1C16D08
	0x037F9E14 BL 0x1C16F10
	0x037F9E18 MOV X19, X0
	0x037F9E1C ADRP X0, 0x904000
	0x037F9E20 LDR X0, [X0 + 0xEC8]
	0x037F9E24 BL 0x1C16D08
	0x037F9E28 MOV X1, X0
	0x037F9E2C MOV X0, X19
	0x037F9E30 MOV X2, X31
	0x037F9E34 BL 0x330E100
	0x037F9E38 ADRP X0, 0x950000
	0x037F9E3C LDR X0, [X0 + 0xC78]
	0x037F9E40 BL 0x1C16D08
	0x037F9E44 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+956]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+956], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move S0, [X0+12]
	027 Move S1, [X0+16]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Int32 get_tapCount()

Disassembly:
	0x037F9E48 MOV X0, X19
	0x037F9E4C BL 0x1C16DEC
	0x037F9E50 SUB X31, X31, 0x50
	0x037F9E54 STR X30, [X31 + 0x20]
	0x037F9E58 STP X22, X21, [X31 + 0x30]
	0x037F9E5C STP X20, X19, [X31 + 0x40]
	0x037F9E60 ADRP X21, 0xBE8000
	0x037F9E64 ADRP X20, 0x922000
	0x037F9E68 LDRB W8, [X21 + 0x3D1]
	0x037F9E6C LDR X20, [X20 + 0x628]
	0x037F9E70 MOV X19, X0
	0x037F9E74 TBNZ X8, 0x0, 0x37F9EE0
	0x037F9E78 ADRP X0, 0x8FD000
	0x037F9E7C LDR X0, [X0 + 0x978]
	0x037F9E80 BL 0x1C16CF4
	0x037F9E84 ADRP X0, 0x8FA000
	0x037F9E88 LDR X0, [X0 + 0x758]
	0x037F9E8C BL 0x1C16CF4
	0x037F9E90 ADRP X0, 0x8FA000
	0x037F9E94 LDR X0, [X0 + 0x9D0]
	0x037F9E98 BL 0x1C16CF4
	0x037F9E9C ADRP X0, 0x950000
	0x037F9EA0 LDR X0, [X0 + 0xC80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+957]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+957], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move W0, [X0+33]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Boolean get_isTap()

Disassembly:
	0x037F9EA4 BL 0x1C16CF4
	0x037F9EA8 ADRP X0, 0x922000
	0x037F9EAC LDR X0, [X0 + 0x628]
	0x037F9EB0 BL 0x1C16CF4
	0x037F9EB4 ADRP X0, 0x902000
	0x037F9EB8 LDR X0, [X0 + 0xF08]
	0x037F9EBC BL 0x1C16CF4
	0x037F9EC0 ADRP X0, 0x950000
	0x037F9EC4 LDR X0, [X0 + 0xC88]
	0x037F9EC8 BL 0x1C16CF4
	0x037F9ECC ADRP X0, 0x950000
	0x037F9ED0 LDR X0, [X0 + 0xC90]
	0x037F9ED4 BL 0x1C16CF4
	0x037F9ED8 MOVZ W8, 0x1
	0x037F9EDC STRB W8, [X21 + 0x3D1]
	0x037F9EE0 LDR X0, [X20]
	0x037F9EE4 LDR W8, [X0 + 0xE0]
	0x037F9EE8 CBNZ W8, 0x37F9EF0
	0x037F9EEC BL 0x1C16DFC
	0x037F9EF0 MOV X0, X19
	0x037F9EF4 BL 0x37F799C
	0x037F9EF8 TBZ X0, 0x0, 0x37FA108
	0x037F9EFC ADRP X8, 0x8FA000
	0x037F9F00 LDR X8, [X8 + 0x9D0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+958]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+958], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move W8, [X0+35]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W0, W8
	030 ShiftRight W0, 4
	031 And W0, W0, 15
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Int32 get_displayIndex()

Disassembly:
	0x037F9F10 LDR X22, [X22 + 0x758]
	0x037F9F14 BL 0x1C16D6C
	0x037F9F18 LDR X8, [X20]
	0x037F9F1C MOV X20, X0
	0x037F9F20 LDR W9, [X8 + 0xE0]
	0x037F9F24 CBNZ W9, 0x37F9F30
	0x037F9F28 MOV X0, X8
	0x037F9F2C BL 0x1C16DFC
	0x037F9F30 MOV X0, X19
	0x037F9F34 BL 0x37F893C
	0x037F9F38 LDR X8, [X22]
	0x037F9F3C STR W0, [X31 + 0x2C]
	0x037F9F40 ADD X1, X31, 0x2C
	0x037F9F44 MOV X0, X8
	0x037F9F48 BL 0x1C16E04
	0x037F9F4C CBZ X20, 0x37FA138
	0x037F9F50 MOV X21, X0
	0x037F9F54 CBZ X0, 0x37F9F6C
	0x037F9F58 LDR X8, [X20]
	0x037F9F5C MOV X0, X21
	0x037F9F60 LDR X1, [X8 + 0x40]
	0x037F9F64 BL 0x1C16E00
	0x037F9F68 CBZ X0, 0x37FA12C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+959]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+959], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move W0, [X0+34]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Boolean get_isInProgress()

Disassembly:
	0x037F8B5C LDRB W8, [X21 + 0x3B3]
	0x037F8B60 LDR X20, [X20 + 0x628]
	0x037F8B64 MOV X19, X0
	0x037F8B68 TBNZ X8, 0x0, 0x37F8B80
	0x037F8B6C ADRP X0, 0x923000
	0x037F8B70 LDR X0, [X0 + 0x628]
	0x037F8B74 BL 0x1C16CF4
	0x037F8B78 MOVZ W8, 0x1
	0x037F8B7C STRB W8, [X21 + 0x3B3]
	0x037F8B80 LDR X0, [X20]
	0x037F8B84 LDR W8, [X0 + 0xE0]
	0x037F8B88 CBNZ W8, 0x37F8B90
	0x037F8B8C BL 0x1C16DFC
	0x037F8B90 MOV X0, X19
	0x037F8B94 BL 0x37F8998
	0x037F8B98 CMP W0, 0x3
	0x037F8B9C B.NE 0x37F8BA8
	0x037F8BA0 MOVZ W0, 0x1
	0x037F8BA4 B 0x37F8BC8
	0x037F8BA8 LDR X0, [X20]
	0x037F8BAC LDR W8, [X0 + 0xE0]
	0x037F8BB0 CBNZ W8, 0x37F8BB8
	0x037F8BB4 BL 0x1C16DFC
	0x037F8BB8 MOV X0, X19
	0x037F8BBC BL 0x37F8998
	0x037F8BC0 CMP W0, 0x4
	0x037F8BC4 CSET W0, EQ
	0x037F8BC8 LDP X20, X19, [X31 + 0x10]
	0x037F8BCC LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBEA000
	006 Move X21, 0x924000
	007 Move W8, [X20+960]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x924000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+960], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_phase, X0
	026 Subtract W8, W0, 1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move W0, 1
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0

Method: System.UInt32 get_updateStepCount()

Disassembly:
	0x037F8BD0 RET
	0x037F8BD4 STP X30, X21, [X31 - 0x20]!
	0x037F8BD8 STP X20, X19, [X31 + 0x10]
	0x037F8BDC ADRP X20, 0xBE9000
	0x037F8BE0 ADRP X21, 0x923000
	0x037F8BE4 LDRB W8, [X20 + 0x3B5]
	0x037F8BE8 LDR X21, [X21 + 0x628]
	0x037F8BEC MOV X19, X0
	0x037F8BF0 TBNZ X8, 0x0, 0x37F8C08
	0x037F8BF4 ADRP X0, 0x923000
	0x037F8BF8 LDR X0, [X0 + 0x628]
	0x037F8BFC BL 0x1C16CF4
	0x037F8C00 MOVZ W8, 0x1
	0x037F8C04 STRB W8, [X20 + 0x3B5]
	0x037F8C08 LDR X0, [X21]
	0x037F8C0C LDR W8, [X0 + 0xE0]
	0x037F8C10 CBNZ W8, 0x37F8C18
	0x037F8C14 BL 0x1C16DFC
	0x037F8C18 MOV X0, X19
	0x037F8C1C BL 0x37F89FC
	0x037F8C20 LDR V0, [X0 + 0x14]
	0x037F8C24 LDP X20, X19, [X31 + 0x10]
	0x037F8C28 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBEA000
	006 Move X21, 0x924000
	007 Move W8, [X20+961]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x924000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+961], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_state, X0
	026 Move W0, [X0+36]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.UInt32 get_uniqueId()

Disassembly:
	0x037F98E0 TBZ X0, 0x0, 0x37F98FC
	0x037F98E4 LDR X4, [X25]
	0x037F98E8 MOVZ W3, 0xA
	0x037F98EC MOV X0, X21
	0x037F98F0 MOV X1, X20
	0x037F98F4 MOV X2, X22
	0x037F98F8 BL 0x2174728
	0x037F98FC LDR W8, [X19 + 0x28]
	0x037F9900 ADD X23, X23, 0x1
	0x037F9904 CMP W23, W8
	0x037F9908 B.LT 0x37F988C
	0x037F990C LDP X20, X19, [X31 + 0x70]
	0x037F9910 LDP X22, X21, [X31 + 0x60]
	0x037F9914 LDP X24, X23, [X31 + 0x50]
	0x037F9918 LDP X30, X25, [X31 + 0x40]
	0x037F991C ADD X31, X31, 0x80
	0x037F9920 RET
	0x037F9924 BL 0x1C16F20
	0x037F9928 BL 0x1C16F28
	0x037F992C SUB X31, X31, 0x40
	0x037F9930 STR X30, [X31 + 0x20]
	0x037F9934 STP X20, X19, [X31 + 0x30]
	0x037F9938 ADRP X20, 0xBE8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE9000
	006 Move X21, 0x923000
	007 Move W8, [X20+962]
	008 Move X21, [X21+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x923000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+962], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Touch.get_extraData, X0
	026 Move W0, [X0+8]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: UnityEngine.InputSystem.LowLevel.TouchState get_state()

Disassembly:
	0x037F99FC ADRP X20, 0x950000
	0x037F9A00 LDR X0, [X21]
	0x037F9A04 LDR W8, [X0 + 0xE0]
	0x037F9A08 LDR X20, [X20 + 0xC40]
	0x037F9A0C CBNZ W8, 0x37F9A18
	0x037F9A10 BL 0x1C16DFC
	0x037F9A14 LDR X0, [X21]
	0x037F9A18 LDR X8, [X0 + 0xB8]
	0x037F9A1C LDR X2, [X20]
	0x037F9A20 MOV X1, X19
	0x037F9A24 LDP X20, X19, [X31 + 0x10]
	0x037F9A28 ADD X0, X8, 0x20
	0x037F9A2C LDP X30, X21, [X31], #0x20
	0x037F9A30 B 0x28F14E0
	0x037F9A34 ADRP X0, 0x8FF000
	0x037F9A38 LDR X0, [X0 + 0x528]
	0x037F9A3C BL 0x1C16D08
	0x037F9A40 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBE9000
	006 Move X20, 0x951000
	007 Move W8, [X21+963]
	008 Move X20, [X20+3000]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x951000
	015 Move X0, [X0+3000]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+963], W8
	019 Move X1, [X20]
	020 Add X0, X19, 8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x25C2A94, X0
	026 Return X0

Method: UnityEngine.InputSystem.EnhancedTouch.Touch/ExtraDataPerTouchState get_extraData()

Disassembly:
	0x037F9F6C LDR W8, [X20 + 0x18]
	0x037F9F70 CBZ W8, 0x37FA128
	0x037F9F74 STR X21, [X20 + 0x20]
	0x037F9F78 LDR X8, [X19]
	0x037F9F7C CBZ X8, 0x37FA138
	0x037F9F80 LDR W8, [X8 + 0x18]
	0x037F9F84 LDR X0, [X22]
	0x037F9F88 ADD X1, X31, 0x28
	0x037F9F8C STR W8, [X31 + 0x28]
	0x037F9F90 BL 0x1C16E04
	0x037F9F94 MOV X21, X0
	0x037F9F98 CBZ X0, 0x37F9FB0
	0x037F9F9C LDR X8, [X20]
	0x037F9FA0 MOV X0, X21
	0x037F9FA4 LDR X1, [X8 + 0x40]
	0x037F9FA8 BL 0x1C16E00
	0x037F9FAC CBZ X0, 0x37FA12C
	0x037F9FB0 LDR W8, [X20 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBE9000
	006 Move X20, 0x951000
	007 Move W8, [X21+964]
	008 Move X20, [X20+3040]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x951000
	015 Move X0, [X0+3040]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+964], W8
	019 Move X1, [X20]
	020 Add X0, X19, 8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x25C2BB4, X0
	026 Return X0

Method: UnityEngine.InputSystem.EnhancedTouch.TouchHistory get_history()

Disassembly:
	0x037F9FB4 CMP W8, 0x1
	0x037F9FB8 B.LS 0x37FA128
	0x037F9FBC MOV X0, X19
	0x037F9FC0 STR X21, [X20 + 0x28]
	0x037F9FC4 BL 0x37F8998
	0x037F9FC8 ADRP X8, 0x950000
	0x037F9FCC LDR X8, [X8 + 0xC80]
	0x037F9FD0 STR W0, [X31 + 0x1C]
	0x037F9FD4 ADD X1, X31, 0x1C
	0x037F9FD8 LDR X8, [X8]
	0x037F9FDC MOV X0, X8
	0x037F9FE0 BL 0x1C16E04
	0x037F9FE4 MOV X21, X0
	0x037F9FE8 CBZ X0, 0x37FA000
	0x037F9FEC LDR X8, [X20]
	0x037F9FF0 MOV X0, X21
	0x037F9FF4 LDR X1, [X8 + 0x40]
	0x037F9FF8 BL 0x1C16E00
	0x037F9FFC CBZ X0, 0x37FA12C
	0x037FA000 LDR W8, [X20 + 0x18]
	0x037FA004 CMP W8, 0x2
	0x037FA008 B.LS 0x37FA128
	0x037FA00C MOV X0, X19
	0x037FA010 STR X21, [X20 + 0x30]
	0x037FA014 BL 0x37F7AF4
	0x037FA018 ADRP X22, 0x901000
	0x037FA01C LDR X22, [X22 + 0xF08]
	0x037FA020 ADD X1, X31, 0x10
	0x037FA024 STP S0, S1, [X31 + 0x10]
	0x037FA028 LDR X0, [X22]
	0x037FA02C BL 0x1C16E04
	0x037FA030 MOV X21, X0
	0x037FA034 CBZ X0, 0x37FA04C
	0x037FA038 LDR X8, [X20]
	0x037FA03C MOV X0, X21
	0x037FA040 LDR X1, [X8 + 0x40]
	0x037FA044 BL 0x1C16E00
	0x037FA048 CBZ X0, 0x37FA12C
	0x037FA04C LDR W8, [X20 + 0x18]
	0x037FA050 CMP W8, 0x3
	0x037FA054 B.LS 0x37FA128
	0x037FA058 MOV X0, X19
	0x037FA05C STR X21, [X20 + 0x38]
	0x037FA060 BL 0x37F8DEC
	0x037FA064 LDR X0, [X22]
	0x037FA068 ADD X1, X31, 0x8
	0x037FA06C STP S0, S1, [X31 + 0x8]
	0x037FA070 BL 0x1C16E04
	0x037FA074 MOV X21, X0
	0x037FA078 CBZ X0, 0x37FA090
	0x037FA07C LDR X8, [X20]
	0x037FA080 MOV X0, X21
	0x037FA084 LDR X1, [X8 + 0x40]
	0x037FA088 BL 0x1C16E00
	0x037FA08C CBZ X0, 0x37FA12C
	0x037FA090 LDR W8, [X20 + 0x18]
	0x037FA094 CMP W8, 0x4
	0x037FA098 B.LS 0x37FA128
	0x037FA09C MOV X0, X19
	0x037FA0A0 STR X21, [X20 + 0x40]
	0x037FA0A4 BL 0x37F8CE8
	0x037FA0A8 ADRP X8, 0x8FC000
	0x037FA0AC LDR X8, [X8 + 0x978]
	0x037FA0B0 ADD X1, X31, 0x0
	0x037FA0B4 STR D0, [X31]
	0x037FA0B8 LDR X0, [X8]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X22, 0xBE9000
	008 Move X21, 0x923000
	009 Move X19, X8
	010 Move W8, [X22+965]
	011 Move X21, [X21+1576]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x923000
	018 Move X0, [X0+1576]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+965], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Call Touch.get_valid, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {63}
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, [X20]
	039 Move X8, [X20+16]
	040 Move V0, [X20]
	041 Move [X31+80], X8
	042 Move [X31+4], V0
	043 Compare X0, 0
	044 JumpIfEqual {81}
	045 Move X8, [X31+80]
	046 Move V0, [X31+4]
	047 Add X1, X31, 0
	048 Move [X31+16], X8
	049 Add X8, X31, 32
	050 Move [X31], V0
	051 Call Finger.GetTouchHistory, X0, X1
	052 Move V1, [X31+32]
	053 Move V0, [X31+48]
	054 Move X22, [X31+112]
	055 Move X21, [X31+120]
	056 Move X30, [X31+96]
	057 Move [X19], V1
	058 Move [X19+8], V0
	059 Move X20, [X31+128]
	060 Move X19, [X31+136]
	061 Add X31, X31, 144
	062 Return X0
	063 Move X0, 0x8FA000
	064 Move X0, [X0+1456]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0x950000
	069 Move X0, [X0+3048]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call InvalidOperationException..ctor, X0, X1
	075 Move X0, 0x950000
	076 Move X0, [X0+3056]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC
	081 Call 0x1C17F20

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.EnhancedTouch.Touch> get_activeTouches()

Disassembly:
	0x037FA0BC BL 0x1C16E04
	0x037FA0C0 MOV X19, X0
	0x037FA0C4 CBZ X0, 0x37FA0DC
	0x037FA0C8 LDR X8, [X20]
	0x037FA0CC MOV X0, X19
	0x037FA0D0 LDR X1, [X8 + 0x40]
	0x037FA0D4 BL 0x1C16E00
	0x037FA0D8 CBZ X0, 0x37FA12C
	0x037FA0DC LDR W8, [X20 + 0x18]
	0x037FA0E0 CMP W8, 0x5
	0x037FA0E4 B.LS 0x37FA128
	0x037FA0E8 STR X19, [X20 + 0x48]
	0x037FA0EC ADRP X8, 0x94F000
	0x037FA0F0 LDR X8, [X8 + 0xC90]
	0x037FA0F4 MOV X1, X20
	0x037FA0F8 MOV X2, X31
	0x037FA0FC LDR X0, [X8]
	0x037FA100 BL 0x3227C5C
	0x037FA104 B 0x37FA114
	0x037FA108 ADRP X8, 0x94F000
	0x037FA10C LDR X8, [X8 + 0xC88]
	0x037FA110 LDR X0, [X8]
	0x037FA114 LDP X20, X19, [X31 + 0x40]
	0x037FA118 LDP X22, X21, [X31 + 0x30]
	0x037FA11C LDR X30, [X31 + 0x20]
	0x037FA120 ADD X31, X31, 0x50
	0x037FA124 RET
	0x037FA128 BL 0x1C16F28
	0x037FA12C BL 0x1C16F44
	0x037FA130 MOV X1, X31
	0x037FA134 BL 0x1C16DEC
	0x037FA138 BL 0x1C16F20
	0x037FA13C STP X30, X21, [X31 - 0x20]!
	0x037FA140 STP X20, X19, [X31 + 0x10]
	0x037FA144 ADRP X21, 0xBE7000
	0x037FA148 LDRB W8, [X21 + 0x3D2]
	0x037FA14C MOV X19, X1
	0x037FA150 MOV X20, X0
	0x037FA154 TBNZ X8, 0x0, 0x37FA16C
	0x037FA158 ADRP X0, 0x94F000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xBE8000
	006 Move X19, 0x922000
	007 Move W8, [X20+966]
	008 Move X19, [X19+1576]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x950000
	014 Move X0, [X0+3064]
	015 Call 0x1C17CF4
	016 Move X0, 0x922000
	017 Move X0, [X0+1576]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+966], W8
	021 Move X0, [X19]
	022 Move X20, 0x950000
	023 Move W8, [X0+224]
	024 Move X20, [X20+3064]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Add X0, X8, 272
	031 Call FingerAndTouchState.UpdateActiveTouches, X0
	032 Move X8, [X19]
	033 Move X4, [X20]
	034 Add X0, X31, 0
	035 Move W2, W31
	036 Move X8, [X8+184]
	037 Move X1, [X8+296]
	038 Move W3, [X8+308]
	039 Move [X31], X31
	040 Move [X31+8], X31
	041 Call ReadOnlyArray`1<Touch>..ctor, X0, X1, X2, X3
	042 Move X0, [X31]
	043 Move X1, [X31+8]
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Add X31, X31, 48
	048 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.EnhancedTouch.Finger> get_fingers()

Disassembly:
	0x037FA6E4 LDR X8, [X0 + 0xB8]
	0x037FA6E8 STR X20, [X8 + 0x8]
	0x037FA6EC LDR W8, [X0 + 0xE0]
	0x037FA6F0 CBNZ W8, 0x37FA6FC
	0x037FA6F4 BL 0x1C16DFC
	0x037FA6F8 LDR X0, [X24]
	0x037FA6FC LDR X8, [X0 + 0xB8]
	0x037FA700 ADRP X26, 0x94F000
	0x037FA704 ADRP X25, 0x94F000
	0x037FA708 LDR X22, [X8 + 0x10]
	0x037FA70C LDR X26, [X26 + 0xCC8]
	0x037FA710 LDR X25, [X25 + 0xCC0]
	0x037FA714 CBNZ X22, 0x37FA768
	0x037FA718 LDR W8, [X0 + 0xE0]
	0x037FA71C CBNZ W8, 0x37FA728
	0x037FA720 BL 0x1C16DFC
	0x037FA724 LDR X0, [X24]
	0x037FA728 ADRP X9, 0x8FA000
	0x037FA72C LDR X8, [X0 + 0xB8]
	0x037FA730 LDR X9, [X9 + 0xE70]
	0x037FA734 LDR X21, [X8]
	0x037FA738 LDR X0, [X9]
	0x037FA73C BL 0x1C16F10
	0x037FA740 ADRP X8, 0x94F000
	0x037FA744 LDR X8, [X8 + 0xCE0]
	0x037FA748 MOV X1, X21
	0x037FA74C MOV X3, X31
	0x037FA750 MOV X22, X0
	0x037FA754 LDR X2, [X8]
	0x037FA758 BL 0x3314368
	0x037FA75C LDR X8, [X24]
	0x037FA760 LDR X8, [X8 + 0xB8]
	0x037FA764 STR X22, [X8 + 0x10]
	0x037FA768 LDR X0, [X26]
	0x037FA76C BL 0x1C16F10
	0x037FA770 LDR X4, [X25]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xBE8000
	006 Move X19, 0x922000
	007 Move W8, [X20+967]
	008 Move X19, [X19+1576]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x950000
	014 Move X0, [X0+3112]
	015 Call 0x1C17CF4
	016 Move X0, 0x922000
	017 Move X0, [X0+1576]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+967], W8
	021 Move X0, [X19]
	022 Move X20, 0x950000
	023 Move W8, [X0+224]
	024 Move X20, [X20+3112]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Move X4, [X20]
	031 Add X0, X31, 0
	032 Move W2, W31
	033 Move X1, [X8+280]
	034 Move W3, [X8+312]
	035 Move [X31], X31
	036 Move [X31+8], X31
	037 Call ReadOnlyArray`1<Object>..ctor, X0, X1, X2, X3
	038 Move X0, [X31]
	039 Move X1, [X31+8]
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Add X31, X31, 48
	044 Return X0

Method: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.EnhancedTouch.Finger> get_activeFingers()

Disassembly:
	0x037FA774 MOV X1, X19
	0x037FA778 MOV X2, X20
	0x037FA77C MOV X3, X22
	0x037FA780 MOV X21, X0
	0x037FA784 BL 0x25D6790
	0x037FA788 LDR X0, [X23]
	0x037FA78C LDR W8, [X0 + 0xE0]
	0x037FA790 CBNZ W8, 0x37FA79C
	0x037FA794 BL 0x1C16DFC
	0x037FA798 LDR X0, [X23]
	0x037FA79C LDR X8, [X0 + 0xB8]
	0x037FA7A0 MOVZ W9, 0x40
	0x037FA7A4 MOVZ W2, 0x134
	0x037FA7A8 MOV W1, W31
	0x037FA7AC ADD X0, X8, 0x1C
	0x037FA7B0 STP X31, X31, [X8]
	0x037FA7B4 STR X31, [X8 + 0x10]
	0x037FA7B8 STR W9, [X8 + 0x18]
	0x037FA7BC BL 0x3EB1B10
	0x037FA7C0 MOV X0, X21
	0x037FA7C4 LDP X20, X19, [X31 + 0x40]
	0x037FA7C8 LDP X22, X21, [X31 + 0x30]
	0x037FA7CC LDP X24, X23, [X31 + 0x20]
	0x037FA7D0 LDP X26, X25, [X31 + 0x10]
	0x037FA7D4 LDR X30, [X31], #0x50
	0x037FA7D8 RET
	0x037FA7DC STR X30, [X31 - 0x20]!
	0x037FA7E0 STP X20, X19, [X31 + 0x10]
	0x037FA7E4 ADRP X19, 0xBE7000
	0x037FA7E8 ADRP X20, 0x921000
	0x037FA7EC LDRB W8, [X19 + 0x3D9]
	0x037FA7F0 LDR X20, [X20 + 0x628]
	0x037FA7F4 TBNZ X8, 0x0, 0x37FA80C
	0x037FA7F8 ADRP X0, 0x921000
	0x037FA7FC LDR X0, [X0 + 0x628]
	0x037FA800 BL 0x1C16CF4
	0x037FA804 MOVZ W8, 0x1
	0x037FA808 STRB W8, [X19 + 0x3D9]
	0x037FA80C LDR X8, [X20]
	0x037FA810 MOVZ W9, 0x40

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xBE8000
	006 Move X19, 0x922000
	007 Move W8, [X20+968]
	008 Move X19, [X19+1576]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x950000
	014 Move X0, [X0+3112]
	015 Call 0x1C17CF4
	016 Move X0, 0x922000
	017 Move X0, [X0+1576]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+968], W8
	021 Move X0, [X19]
	022 Move X20, 0x950000
	023 Move W8, [X0+224]
	024 Move X20, [X20+3112]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Add X0, X8, 272
	031 Call FingerAndTouchState.UpdateActiveFingers, X0
	032 Move X8, [X19]
	033 Move X4, [X20]
	034 Add X0, X31, 0
	035 Move W2, W31
	036 Move X8, [X8+184]
	037 Move X1, [X8+288]
	038 Move W3, [X8+304]
	039 Move [X31], X31
	040 Move [X31+8], X31
	041 Call ReadOnlyArray`1<Object>..ctor, X0, X1, X2, X3
	042 Move X0, [X31]
	043 Move X1, [X31+8]
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Add X31, X31, 48
	048 Return X0

Method: System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.Touchscreen> get_screens()

Disassembly:
	0x037FA92C RET
	0x037FA930 RET
	0x037FA934 SUB X31, X31, 0x40
	0x037FA938 STP X30, X21, [X31 + 0x20]
	0x037FA93C STP X20, X19, [X31 + 0x30]
	0x037FA940 ADRP X21, 0xBE7000
	0x037FA944 ADRP X20, 0x94F000
	0x037FA948 LDRB W8, [X21 + 0x3E0]
	0x037FA94C LDR X20, [X20 + 0xCF0]
	0x037FA950 MOV X19, X0
	0x037FA954 TBNZ X8, 0x0, 0x37FA96C
	0x037FA958 ADRP X0, 0x94F000
	0x037FA95C LDR X0, [X0 + 0xCF0]
	0x037FA960 BL 0x1C16CF4
	0x037FA964 MOVZ W8, 0x1
	0x037FA968 STRB W8, [X21 + 0x3E0]
	0x037FA96C LDP V1, V0, [X19]
	0x037FA970 LDR X0, [X20]
	0x037FA974 STP V1, V0, [X31]
	0x037FA978 BL 0x1C16F10
	0x037FA97C MOV X1, X31
	0x037FA980 MOV X19, X0
	0x037FA984 BL 0x33BDD8C
	0x037FA988 LDP V1, V0, [X31]
	0x037FA98C MOVN W8, 0x0
	0x037FA990 STR W8, [X19 + 0x30]
	0x037FA994 MOV X0, X19
	0x037FA998 STP V1, V0, [X19 + 0x10]
	0x037FA99C LDP X20, X19, [X31 + 0x30]
	0x037FA9A0 LDP X30, X21, [X31 + 0x20]
	0x037FA9A4 ADD X31, X31, 0x40
	0x037FA9A8 RET
	0x037FA9AC STR X30, [X31 - 0x20]!
	0x037FA9B0 STP X20, X19, [X31 + 0x10]
	0x037FA9B4 MOV X19, X1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0xBE8000
	006 Move X19, 0x922000
	007 Move W8, [X20+969]
	008 Move X19, [X19+1576]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x950000
	014 Move X0, [X0+3128]
	015 Call 0x1C17CF4
	016 Move X0, 0x922000
	017 Move X0, [X0+1576]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+969], W8
	021 Move X0, [X19]
	022 Move X20, 0x950000
	023 Move W8, [X0+224]
	024 Move X20, [X20+3128]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Move X0, [X20]
	031 Add X1, X31, 0
	032 Move X9, [X8+16]
	033 Move V0, [X8]
	034 Move [X31+16], X9
	035 Move [X31], V0
	036 Call 0x1C17E04
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X30, [X31+32]
	040 Add X31, X31, 64
	041 Return X0

Method: System.Void add_onFingerDown(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)

Disassembly:
	0x037FA9B8 MOV X1, X31
	0x037FA9BC MOV X20, X0
	0x037FA9C0 BL 0x33BDD8C
	0x037FA9C4 LDP V1, V0, [X19]
	0x037FA9C8 MOVN W8, 0x0
	0x037FA9CC STR W8, [X20 + 0x30]
	0x037FA9D0 STP V1, V0, [X20 + 0x10]
	0x037FA9D4 LDP X20, X19, [X31 + 0x10]
	0x037FA9D8 LDR X30, [X31], #0x20
	0x037FA9DC RET
	0x037FA9E0 B 0x37FA934
	0x037FA9E4 LDR W0, [X0 + 0x10]
	0x037FA9E8 RET
	0x037FA9EC STR X30, [X31 - 0x30]!
	0x037FA9F0 STP X22, X21, [X31 + 0x10]
	0x037FA9F4 STP X20, X19, [X31 + 0x20]
	0x037FA9F8 ADRP X22, 0xBE7000
	0x037FA9FC LDRB W9, [X22 + 0x3E1]
	0x037FAA00 MOV W21, W1
	0x037FAA04 MOV X19, X0
	0x037FAA08 MOV X20, X8
	0x037FAA0C TBNZ X9, 0x0, 0x37FAA24
	0x037FAA10 ADRP X0, 0x94F000
	0x037FAA14 LDR X0, [X0 + 0xB30]
	0x037FAA18 BL 0x1C16CF4
	0x037FAA1C MOVZ W8, 0x1
	0x037FAA20 STRB W8, [X22 + 0x3E1]
	0x037FAA24 MOV X0, X19
	0x037FAA28 BL 0x37FAB24
	0x037FAA2C TBNZ X21, 0x1F, 0x37FAA78
	0x037FAA30 LDR W8, [X19 + 0x10]
	0x037FAA34 CMP W8, W21
	0x037FAA38 B.LE 0x37FAA78
	0x037FAA3C LDR X0, [X19]
	0x037FAA40 CBZ X0, 0x37FAB20
	0x037FAA44 ADRP X8, 0x94F000
	0x037FAA48 LDR X8, [X8 + 0xB30]
	0x037FAA4C LDR W9, [X19 + 0x14]
	0x037FAA50 LDR X19, [X19 + 0x8]
	0x037FAA54 LDR X2, [X8]
	0x037FAA58 SUB W1, W9, W21
	0x037FAA5C BL 0x2E1216C
	0x037FAA60 STP X19, X0, [X20]
	0x037FAA64 STR X1, [X20 + 0x10]
	0x037FAA68 LDP X20, X19, [X31 + 0x20]
	0x037FAA6C LDP X22, X21, [X31 + 0x10]
	0x037FAA70 LDR X30, [X31], #0x30
	0x037FAA74 RET
	0x037FAA78 STR W21, [X31 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE8000
	006 Move W8, [X20+970]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x950000
	013 Move X0, [X0+3136]
	014 Call 0x1C17CF4
	015 Move X0, 0x922000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+970], W8
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X21, 0x922000
	023 Move X21, [X21+1576]
	024 Move X20, 0x950000
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Move X20, [X20+3136]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Add X0, X8, 32
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call 0x28F24E0, X0, X1
	041 Return 
	042 Move X0, 0x8FF000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x904000
	048 Move X0, [X0+3784]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x950000
	055 Move X0, [X0+3144]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void remove_onFingerDown(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)

Disassembly:
	0x037FAA7C ADRP X20, 0x8F9000
	0x037FAA80 LDR X20, [X20 + 0x758]
	0x037FAA84 MOV X0, X20
	0x037FAA88 BL 0x1C16D08
	0x037FAA8C ADD X1, X31, 0xC
	0x037FAA90 BL 0x1C16E04
	0x037FAA94 LDR W8, [X19 + 0x10]
	0x037FAA98 MOV X21, X0
	0x037FAA9C MOV X0, X20
	0x037FAAA0 STR W8, [X31 + 0x8]
	0x037FAAA4 BL 0x1C16D08
	0x037FAAA8 ADD X1, X31, 0x8
	0x037FAAAC BL 0x1C16E04
	0x037FAAB0 MOV X19, X0
	0x037FAAB4 ADRP X0, 0x925000
	0x037FAAB8 LDR X0, [X0 + 0x70]
	0x037FAABC BL 0x1C16D08
	0x037FAAC0 MOV X1, X21
	0x037FAAC4 MOV X2, X19
	0x037FAAC8 MOV X3, X31
	0x037FAACC BL 0x3227BD4
	0x037FAAD0 MOV X19, X0
	0x037FAAD4 ADRP X0, 0x901000
	0x037FAAD8 LDR X0, [X0 + 0x760]
	0x037FAADC BL 0x1C16D08
	0x037FAAE0 BL 0x1C16F10
	0x037FAAE4 MOV X20, X0
	0x037FAAE8 ADRP X0, 0x904000
	0x037FAAEC LDR X0, [X0 + 0x130]
	0x037FAAF0 BL 0x1C16D08
	0x037FAAF4 MOV X2, X0
	0x037FAAF8 MOV X0, X20
	0x037FAAFC MOV X1, X19
	0x037FAB00 MOV X3, X31
	0x037FAB04 BL 0x3311888
	0x037FAB08 ADRP X0, 0x94F000
	0x037FAB0C LDR X0, [X0 + 0xCF8]
	0x037FAB10 BL 0x1C16D08
	0x037FAB14 MOV X1, X0
	0x037FAB18 MOV X0, X20
	0x037FAB1C BL 0x1C16DEC
	0x037FAB20 BL 0x1C16F20
	0x037FAB24 STP X30, X19, [X31 - 0x10]!
	0x037FAB28 LDR X8, [X0 + 0x8]
	0x037FAB2C CBZ X8, 0x37FAB50
	0x037FAB30 LDR X8, [X0]
	0x037FAB34 CBZ X8, 0x37FAB50
	0x037FAB38 LDR W8, [X8 + 0x54]
	0x037FAB3C LDR W9, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE8000
	006 Move W8, [X20+971]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x950000
	013 Move X0, [X0+3152]
	014 Call 0x1C17CF4
	015 Move X0, 0x922000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+971], W8
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X21, 0x922000
	023 Move X21, [X21+1576]
	024 Move X20, 0x950000
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Move X20, [X20+3152]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Add X0, X8, 32
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call 0x28F2650, X0, X1
	041 Return 
	042 Move X0, 0x8FF000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x904000
	048 Move X0, [X0+3784]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x950000
	055 Move X0, [X0+3160]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void add_onFingerUp(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)

Disassembly:
	0x037FAB40 CMP W8, W9
	0x037FAB44 B.NE 0x37FAB70
	0x037FAB48 LDP X30, X19, [X31], #0x10
	0x037FAB4C RET
	0x037FAB50 ADRP X0, 0x8F9000
	0x037FAB54 LDR X0, [X0 + 0x5B0]
	0x037FAB58 BL 0x1C16D08
	0x037FAB5C BL 0x1C16F10
	0x037FAB60 MOV X19, X0
	0x037FAB64 ADRP X0, 0x94F000
	0x037FAB68 LDR X0, [X0 + 0xD00]
	0x037FAB6C B 0x37FAB8C
	0x037FAB70 ADRP X0, 0x8F9000
	0x037FAB74 LDR X0, [X0 + 0x5B0]
	0x037FAB78 BL 0x1C16D08
	0x037FAB7C BL 0x1C16F10
	0x037FAB80 MOV X19, X0
	0x037FAB84 ADRP X0, 0x94F000
	0x037FAB88 LDR X0, [X0 + 0xD08]
	0x037FAB8C BL 0x1C16D08
	0x037FAB90 MOV X1, X0
	0x037FAB94 MOV X0, X19
	0x037FAB98 MOV X2, X31
	0x037FAB9C BL 0x337DF1C
	0x037FABA0 ADRP X0, 0x94F000
	0x037FABA4 LDR X0, [X0 + 0xD10]
	0x037FABA8 BL 0x1C16D08
	0x037FABAC MOV X1, X0
	0x037FABB0 MOV X0, X19
	0x037FABB4 BL 0x1C16DEC
	0x037FABB8 LDR W9, [X0 + 0x20]
	0x037FABBC LDR W8, [X0 + 0x30]
	0x037FABC0 SUB W9, W9, 0x1
	0x037FABC4 CMP W8, W9
	0x037FABC8 B.GE 0x37FABD4
	0x037FABCC ADD W10, W8, 0x1
	0x037FABD0 STR W10, [X0 + 0x30]
	0x037FABD4 CMP W8, W9
	0x037FABD8 CSET W0, LT
	0x037FABDC RET
	0x037FABE0 MOVN W8, 0x0
	0x037FABE4 STR W8, [X0 + 0x30]
	0x037FABE8 RET
	0x037FABEC SUB X31, X31, 0x50
	0x037FABF0 STP X30, X19, [X31 + 0x40]
	0x037FABF4 LDP V1, V0, [X0 + 0x10]
	0x037FABF8 MOV X19, X8
	0x037FABFC ADD X8, X31, 0x8
	0x037FAC00 STP V1, V0, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE8000
	006 Move W8, [X20+972]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x950000
	013 Move X0, [X0+3136]
	014 Call 0x1C17CF4
	015 Move X0, 0x922000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+972], W8
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X21, 0x922000
	023 Move X21, [X21+1576]
	024 Move X20, 0x950000
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Move X20, [X20+3136]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Add X0, X8, 192
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call 0x28F24E0, X0, X1
	041 Return 
	042 Move X0, 0x8FF000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x904000
	048 Move X0, [X0+3784]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x950000
	055 Move X0, [X0+3168]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void remove_onFingerUp(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)

Disassembly:
	0x037FAC04 LDR W1, [X0 + 0x30]
	0x037FAC08 ADD X0, X31, 0x20
	0x037FAC0C BL 0x37FA9EC
	0x037FAC10 LDR X8, [X31 + 0x18]
	0x037FAC14 LDUR V0, [X31 + 0x8]
	0x037FAC18 STR X8, [X19 + 0x10]
	0x037FAC1C STR V0, [X19]
	0x037FAC20 LDP X30, X19, [X31 + 0x40]
	0x037FAC24 ADD X31, X31, 0x50
	0x037FAC28 RET
	0x037FAC2C SUB X31, X31, 0x60
	0x037FAC30 STP X30, X21, [X31 + 0x40]
	0x037FAC34 STP X20, X19, [X31 + 0x50]
	0x037FAC38 ADRP X21, 0xBE7000
	0x037FAC3C ADRP X20, 0x921000
	0x037FAC40 LDRB W8, [X21 + 0x3E2]
	0x037FAC44 LDR X20, [X20 + 0x628]
	0x037FAC48 MOV X19, X0
	0x037FAC4C TBNZ X8, 0x0, 0x37FAC64
	0x037FAC50 ADRP X0, 0x921000
	0x037FAC54 LDR X0, [X0 + 0x628]
	0x037FAC58 BL 0x1C16CF4
	0x037FAC5C MOVZ W8, 0x1
	0x037FAC60 STRB W8, [X21 + 0x3E2]
	0x037FAC64 LDP V1, V0, [X19 + 0x10]
	0x037FAC68 ADD X8, X31, 0x8
	0x037FAC6C ADD X0, X31, 0x20
	0x037FAC70 STP V1, V0, [X31 + 0x20]
	0x037FAC74 LDR W1, [X19 + 0x30]
	0x037FAC78 BL 0x37FA9EC
	0x037FAC7C LDUR V0, [X31 + 0x8]
	0x037FAC80 LDR X8, [X31 + 0x18]
	0x037FAC84 LDR X0, [X20]
	0x037FAC88 ADD X1, X31, 0x20
	0x037FAC8C STR V0, [X31 + 0x2]
	0x037FAC90 STR X8, [X31 + 0x30]
	0x037FAC94 BL 0x1C16E04
	0x037FAC98 LDP X20, X19, [X31 + 0x50]
	0x037FAC9C LDP X30, X21, [X31 + 0x40]
	0x037FACA0 ADD X31, X31, 0x60
	0x037FACA4 RET
	0x037FACA8 RET
	0x037FACAC LDR X0, [X0 + 0x20]
	0x037FACB0 RET
	0x037FACB4 STR X1, [X0 + 0x20]
	0x037FACB8 RET
	0x037FACBC STR X30, [X31 - 0x20]!
	0x037FACC0 STP X20, X19, [X31 + 0x10]
	0x037FACC4 ADRP X19, 0xBE7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE8000
	006 Move W8, [X20+973]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x950000
	013 Move X0, [X0+3152]
	014 Call 0x1C17CF4
	015 Move X0, 0x922000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+973], W8
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X21, 0x922000
	023 Move X21, [X21+1576]
	024 Move X20, 0x950000
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Move X20, [X20+3152]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Add X0, X8, 192
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call 0x28F2650, X0, X1
	041 Return 
	042 Move X0, 0x8FF000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x904000
	048 Move X0, [X0+3784]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x950000
	055 Move X0, [X0+3176]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void add_onFingerMove(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)

Disassembly:
	0x037FACC8 ADRP X20, 0x94F000
	0x037FACCC LDRB W8, [X19 + 0x3E3]
	0x037FACD0 LDR X20, [X20 + 0xD18]
	0x037FACD4 TBNZ X8, 0x0, 0x37FACEC
	0x037FACD8 ADRP X0, 0x94F000
	0x037FACDC LDR X0, [X0 + 0xD18]
	0x037FACE0 BL 0x1C16CF4
	0x037FACE4 MOVZ W8, 0x1
	0x037FACE8 STRB W8, [X19 + 0x3E3]
	0x037FACEC LDR X8, [X20]
	0x037FACF0 LDP X20, X19, [X31 + 0x10]
	0x037FACF4 LDR X8, [X8 + 0xB8]
	0x037FACF8 LDR X0, [X8]
	0x037FACFC LDR X30, [X31], #0x20
	0x037FAD00 RET
	0x037FAD04 STP X30, X21, [X31 - 0x20]!
	0x037FAD08 STP X20, X19, [X31 + 0x10]
	0x037FAD0C ADRP X19, 0xBE7000
	0x037FAD10 LDRB W8, [X19 + 0x3E4]
	0x037FAD14 TBNZ X8, 0x0, 0x37FAD50
	0x037FAD18 ADRP X0, 0x94F000
	0x037FAD1C LDR X0, [X0 + 0xD20]
	0x037FAD20 BL 0x1C16CF4
	0x037FAD24 ADRP X0, 0x8F9000
	0x037FAD28 LDR X0, [X0 + 0xA58]
	0x037FAD2C BL 0x1C16CF4
	0x037FAD30 ADRP X0, 0x8F9000
	0x037FAD34 LDR X0, [X0 + 0x598]
	0x037FAD38 BL 0x1C16CF4
	0x037FAD3C ADRP X0, 0x94F000
	0x037FAD40 LDR X0, [X0 + 0xD18]
	0x037FAD44 BL 0x1C16CF4
	0x037FAD48 MOVZ W8, 0x1
	0x037FAD4C STRB W8, [X19 + 0x3E4]
	0x037FAD50 ADRP X21, 0xBE7000
	0x037FAD54 ADRP X20, 0x94F000
	0x037FAD58 ADRP X19, 0x8F9000
	0x037FAD5C LDRB W8, [X21 + 0x47C]
	0x037FAD60 LDR X20, [X20 + 0xD18]
	0x037FAD64 LDR X19, [X19 + 0x598]
	0x037FAD68 CBNZ W8, 0x37FAD80
	0x037FAD6C ADRP X0, 0x94F000
	0x037FAD70 LDR X0, [X0 + 0xD18]
	0x037FAD74 BL 0x1C16CF4
	0x037FAD78 MOVZ W8, 0x1
	0x037FAD7C STRB W8, [X21 + 0x47C]
	0x037FAD80 LDR X8, [X20]
	0x037FAD84 LDR X0, [X19]
	0x037FAD88 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE8000
	006 Move W8, [X20+974]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x950000
	013 Move X0, [X0+3136]
	014 Call 0x1C17CF4
	015 Move X0, 0x922000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+974], W8
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X21, 0x922000
	023 Move X21, [X21+1576]
	024 Move X20, 0x950000
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Move X20, [X20+3136]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Add X0, X8, 112
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call 0x28F24E0, X0, X1
	041 Return 
	042 Move X0, 0x8FF000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x904000
	048 Move X0, [X0+3784]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x950000
	055 Move X0, [X0+3184]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void remove_onFingerMove(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)

Disassembly:
	0x037FAD8C LDR W9, [X0 + 0xE0]
	0x037FAD90 LDR X19, [X8]
	0x037FAD94 CBNZ W9, 0x37FAD9C
	0x037FAD98 BL 0x1C16DFC
	0x037FAD9C MOV X0, X19
	0x037FADA0 MOV X1, X31
	0x037FADA4 MOV X2, X31
	0x037FADA8 BL 0x3C3883C
	0x037FADAC TBZ X0, 0x0, 0x37FAE54
	0x037FADB0 ADRP X8, 0x8F9000
	0x037FADB4 LDR X8, [X8 + 0xA58]
	0x037FADB8 LDR X0, [X8]
	0x037FADBC BL 0x1C16F10
	0x037FADC0 MOV X1, X31
	0x037FADC4 MOV X19, X0
	0x037FADC8 BL 0x3C35A08
	0x037FADCC CBZ X19, 0x37FAE94
	0x037FADD0 MOV X0, X19
	0x037FADD4 MOV W1, W31
	0x037FADD8 MOV X2, X31
	0x037FADDC BL 0x3C357B4
	0x037FADE0 MOVZ W1, 0x3D
	0x037FADE4 MOV X0, X19
	0x037FADE8 MOV X2, X31
	0x037FADEC BL 0x3C396EC
	0x037FADF0 ADRP X8, 0x94F000
	0x037FADF4 LDR X8, [X8 + 0xD20]
	0x037FADF8 MOV X0, X19
	0x037FADFC LDR X1, [X8]
	0x037FAE00 BL 0x21E51FC
	0x037FAE04 LDR X8, [X20]
	0x037FAE08 LDR X8, [X8 + 0xB8]
	0x037FAE0C STR X0, [X8]
	0x037FAE10 LDRB W8, [X21 + 0x47C]
	0x037FAE14 CBNZ W8, 0x37FAE2C
	0x037FAE18 ADRP X0, 0x94F000
	0x037FAE1C LDR X0, [X0 + 0xD18]
	0x037FAE20 BL 0x1C16CF4
	0x037FAE24 MOVZ W8, 0x1
	0x037FAE28 STRB W8, [X21 + 0x47C]
	0x037FAE2C LDR X8, [X20]
	0x037FAE30 LDR X8, [X8 + 0xB8]
	0x037FAE34 LDR X0, [X8]
	0x037FAE38 CBZ X0, 0x37FAE94
	0x037FAE3C MOV X1, X31
	0x037FAE40 BL 0x3C32ECC
	0x037FAE44 CBZ X0, 0x37FAE94
	0x037FAE48 MOVZ W1, 0x1
	0x037FAE4C MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE8000
	006 Move W8, [X20+975]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x950000
	013 Move X0, [X0+3152]
	014 Call 0x1C17CF4
	015 Move X0, 0x922000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+975], W8
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X21, 0x922000
	023 Move X21, [X21+1576]
	024 Move X20, 0x950000
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Move X20, [X20+3152]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Add X0, X8, 112
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call 0x28F2650, X0, X1
	041 Return 
	042 Move X0, 0x8FF000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x904000
	048 Move X0, [X0+3784]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x950000
	055 Move X0, [X0+3192]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Int32 get_maxHistoryLengthPerFinger()

Disassembly:
	0x037F8F98 MOVZ W8, 0x1
	0x037F8F9C STRB W8, [X21 + 0x3C4]
	0x037F8FA0 LDR X1, [X20]
	0x037F8FA4 ADD X0, X19, 0x8
	0x037F8FA8 LDP X20, X19, [X31 + 0x10]
	0x037F8FAC LDP X30, X21, [X31], #0x20
	0x037F8FB0 B 0x25C1BB4
	0x037F8FB4 SUB X31, X31, 0x90
	0x037F8FB8 STR X30, [X31 + 0x60]
	0x037F8FBC STP X22, X21, [X31 + 0x70]
	0x037F8FC0 STP X20, X19, [X31 + 0x80]
	0x037F8FC4 ADRP X22, 0xBE9000
	0x037F8FC8 ADRP X21, 0x923000
	0x037F8FCC MOV X19, X8
	0x037F8FD0 LDRB W8, [X22 + 0x3C5]
	0x037F8FD4 LDR X21, [X21 + 0x628]
	0x037F8FD8 MOV X20, X0
	0x037F8FDC TBNZ X8, 0x0, 0x37F8FF4
	0x037F8FE0 ADRP X0, 0x923000
	0x037F8FE4 LDR X0, [X0 + 0x628]
	0x037F8FE8 BL 0x1C16CF4
	0x037F8FEC MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBEA000
	005 Move X19, 0x924000
	006 Move W8, [X20+976]
	007 Move X19, [X19+1576]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x924000
	013 Move X0, [X0+1576]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+976], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, [X8+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor(UnityEngine.InputSystem.EnhancedTouch.Finger finger, UnityEngine.InputSystem.LowLevel.InputStateHistory`1/Record<UnityEngine.InputSystem.LowLevel.TouchState> touchRecord)

Disassembly:
	0x037F8B50 STP X20, X19, [X31 + 0x10]
	0x037F8B54 ADRP X21, 0xBE9000
	0x037F8B58 ADRP X20, 0x923000

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], X2
	003 Move [X0+16], X3
	004 Return 

Method: System.String ToString()

Disassembly:
	0x037FAE50 BL 0x3C357B4
	0x037FAE54 LDRB W8, [X21 + 0x47C]
	0x037FAE58 CBNZ W8, 0x37FAE70
	0x037FAE5C ADRP X0, 0x94F000
	0x037FAE60 LDR X0, [X0 + 0xD18]
	0x037FAE64 BL 0x1C16CF4
	0x037FAE68 MOVZ W8, 0x1
	0x037FAE6C STRB W8, [X21 + 0x47C]
	0x037FAE70 LDR X8, [X20]
	0x037FAE74 LDR X8, [X8 + 0xB8]
	0x037FAE78 LDR X0, [X8]
	0x037FAE7C CBZ X0, 0x37FAE94
	0x037FAE80 LDP X20, X19, [X31 + 0x10]
	0x037FAE84 MOVZ W1, 0x1
	0x037FAE88 MOV X2, X31
	0x037FAE8C LDP X30, X21, [X31], #0x20
	0x037FAE90 B 0x3C32410
	0x037FAE94 BL 0x1C16F20
	0x037FAE98 STP X30, X21, [X31 - 0x20]!
	0x037FAE9C STP X20, X19, [X31 + 0x10]
	0x037FAEA0 ADRP X19, 0xBE7000
	0x037FAEA4 LDRB W8, [X19 + 0x3E5]
	0x037FAEA8 TBNZ X8, 0x0, 0x37FAEC0
	0x037FAEAC ADRP X0, 0x8F9000
	0x037FAEB0 LDR X0, [X0 + 0x598]
	0x037FAEB4 BL 0x1C16CF4
	0x037FAEB8 MOVZ W8, 0x1
	0x037FAEBC STRB W8, [X19 + 0x3E5]
	0x037FAEC0 ADRP X20, 0xBE7000
	0x037FAEC4 ADRP X19, 0x8F9000
	0x037FAEC8 LDRB W8, [X20 + 0x47C]
	0x037FAECC LDR X19, [X19 + 0x598]
	0x037FAED0 CBNZ W8, 0x37FAEE8
	0x037FAED4 ADRP X0, 0x94F000
	0x037FAED8 LDR X0, [X0 + 0xD18]
	0x037FAEDC BL 0x1C16CF4
	0x037FAEE0 MOVZ W8, 0x1
	0x037FAEE4 STRB W8, [X20 + 0x47C]
	0x037FAEE8 ADRP X21, 0x94F000
	0x037FAEEC LDR X21, [X21 + 0xD18]
	0x037FAEF0 LDR X0, [X19]
	0x037FAEF4 LDR X8, [X21]
	0x037FAEF8 LDR W9, [X0 + 0xE0]
	0x037FAEFC LDR X8, [X8 + 0xB8]
	0x037FAF00 LDR X19, [X8]
	0x037FAF04 CBNZ W9, 0x37FAF0C
	0x037FAF08 BL 0x1C16DFC
	0x037FAF0C MOV X0, X19
	0x037FAF10 MOV X1, X31
	0x037FAF14 MOV X2, X31
	0x037FAF18 BL 0x3C354F8
	0x037FAF1C TBZ X0, 0x0, 0x37FAF60
	0x037FAF20 LDRB W8, [X20 + 0x47C]
	0x037FAF24 CBNZ W8, 0x37FAF3C
	0x037FAF28 ADRP X0, 0x94F000
	0x037FAF2C LDR X0, [X0 + 0xD18]
	0x037FAF30 BL 0x1C16CF4
	0x037FAF34 MOVZ W8, 0x1
	0x037FAF38 STRB W8, [X20 + 0x47C]
	0x037FAF3C LDR X8, [X21]
	0x037FAF40 LDR X8, [X8 + 0xB8]
	0x037FAF44 LDR X0, [X8]
	0x037FAF48 CBZ X0, 0x37FAF6C
	0x037FAF4C LDP X20, X19, [X31 + 0x10]
	0x037FAF50 MOV W1, W31
	0x037FAF54 MOV X2, X31
	0x037FAF58 LDP X30, X21, [X31], #0x20
	0x037FAF5C B 0x3C32410
	0x037FAF60 LDP X20, X19, [X31 + 0x10]
	0x037FAF64 LDP X30, X21, [X31], #0x20
	0x037FAF68 RET
	0x037FAF6C BL 0x1C16F20
	0x037FAF70 STP X30, X21, [X31 - 0x20]!
	0x037FAF74 STP X20, X19, [X31 + 0x10]
	0x037FAF78 ADRP X19, 0xBE7000
	0x037FAF7C ADRP X20, 0x94F000
	0x037FAF80 ADRP X21, 0x8F9000
	0x037FAF84 LDRB W8, [X19 + 0x3E6]
	0x037FAF88 LDR X20, [X20 + 0xD18]
	0x037FAF8C LDR X21, [X21 + 0x598]
	0x037FAF90 TBNZ X8, 0x0, 0x37FAFB4
	0x037FAF94 ADRP X0, 0x8F9000
	0x037FAF98 LDR X0, [X0 + 0x598]
	0x037FAF9C BL 0x1C16CF4
	0x037FAFA0 ADRP X0, 0x94F000
	0x037FAFA4 LDR X0, [X0 + 0xD18]
	0x037FAFA8 BL 0x1C16CF4
	0x037FAFAC MOVZ W8, 0x1
	0x037FAFB0 STRB W8, [X19 + 0x3E6]
	0x037FAFB4 BL 0x37FAE98
	0x037FAFB8 LDR X8, [X20]
	0x037FAFBC LDR X0, [X21]
	0x037FAFC0 LDR X8, [X8 + 0xB8]
	0x037FAFC4 LDR W9, [X0 + 0xE0]
	0x037FAFC8 LDR X19, [X8]
	0x037FAFCC CBNZ W9, 0x37FAFD4
	0x037FAFD0 BL 0x1C16DFC
	0x037FAFD4 MOV X0, X19
	0x037FAFD8 MOV X1, X31
	0x037FAFDC MOV X2, X31
	0x037FAFE0 BL 0x3C354F8
	0x037FAFE4 TBZ X0, 0x0, 0x37FB030
	0x037FAFE8 LDR X8, [X20]
	0x037FAFEC LDR X8, [X8 + 0xB8]
	0x037FAFF0 LDR X0, [X8]
	0x037FAFF4 CBZ X0, 0x37FB03C
	0x037FAFF8 MOV X1, X31
	0x037FAFFC BL 0x3C32ECC
	0x037FB000 LDR X8, [X21]
	0x037FB004 MOV X19, X0
	0x037FB008 LDR W9, [X8 + 0xE0]
	0x037FB00C CBNZ W9, 0x37FB018
	0x037FB010 MOV X0, X8
	0x037FB014 BL 0x1C16DFC
	0x037FB018 MOV X0, X19
	0x037FB01C MOV X1, X31
	0x037FB020 BL 0x3C394A8
	0x037FB024 LDR X8, [X20]
	0x037FB028 LDR X8, [X8 + 0xB8]
	0x037FB02C STR X31, [X8]
	0x037FB030 LDP X20, X19, [X31 + 0x10]
	0x037FB034 LDP X30, X21, [X31], #0x20
	0x037FB038 RET
	0x037FB03C BL 0x1C16F20
	0x037FB040 STR X30, [X31 - 0x30]!
	0x037FB044 STP X22, X21, [X31 + 0x10]
	0x037FB048 STP X20, X19, [X31 + 0x20]
	0x037FB04C ADRP X21, 0xBE6000
	0x037FB050 LDRB W8, [X21 + 0x3E7]
	0x037FB054 MOV X19, X1
	0x037FB058 MOV X20, X0
	0x037FB05C TBNZ X8, 0x0, 0x37FB0A4
	0x037FB060 ADRP X0, 0x94E000
	0x037FB064 LDR X0, [X0 + 0xD28]
	0x037FB068 BL 0x1C16CF4
	0x037FB06C ADRP X0, 0x94C000
	0x037FB070 LDR X0, [X0 + 0xE58]
	0x037FB074 BL 0x1C16CF4
	0x037FB078 ADRP X0, 0x94E000
	0x037FB07C LDR X0, [X0 + 0xD30]
	0x037FB080 BL 0x1C16CF4
	0x037FB084 ADRP X0, 0x94E000
	0x037FB088 LDR X0, [X0 + 0xD38]
	0x037FB08C BL 0x1C16CF4
	0x037FB090 ADRP X0, 0x920000
	0x037FB094 LDR X0, [X0 + 0x270]
	0x037FB098 BL 0x1C16CF4
	0x037FB09C MOVZ W8, 0x1
	0x037FB0A0 STRB W8, [X21 + 0x3E7]
	0x037FB0A4 CBZ X19, 0x37FB168
	0x037FB0A8 MOV X21, X20
	0x037FB0AC LDR X0, [X21 + 0x30]!
	0x037FB0B0 ADRP X8, 0x94E000
	0x037FB0B4 LDR X8, [X8 + 0xD38]
	0x037FB0B8 MOV X2, X19
	0x037FB0BC MOV X22, X21
	0x037FB0C0 LDR W1, [X22 - 0x8]!
	0x037FB0C4 LDR X3, [X8]
	0x037FB0C8 BL 0x21760F0
	0x037FB0CC TBZ X0, 0x0, 0x37FB0E0
	0x037FB0D0 LDP X20, X19, [X31 + 0x20]
	0x037FB0D4 LDP X22, X21, [X31 + 0x10]
	0x037FB0D8 LDR X30, [X31], #0x30
	0x037FB0DC RET
	0x037FB0E0 ADRP X8, 0x94E000
	0x037FB0E4 LDR X8, [X8 + 0xD28]
	0x037FB0E8 MOVZ W3, 0xA
	0x037FB0EC MOV X0, X21
	0x037FB0F0 MOV X1, X22
	0x037FB0F4 LDR X4, [X8]
	0x037FB0F8 MOV X2, X19
	0x037FB0FC BL 0x2174728
	0x037FB100 ADRP X8, 0x94E000
	0x037FB104 LDR X8, [X8 + 0xD30]
	0x037FB108 ADD X0, X20, 0x38
	0x037FB10C FMOV S0, W31
	0x037FB110 FMOV S1, W31
	0x037FB114 LDR X1, [X8]
	0x037FB118 BL 0x2172D9C
	0x037FB11C ADRP X8, 0x94C000
	0x037FB120 LDR X8, [X8 + 0xE58]
	0x037FB124 ADD X0, X20, 0x40
	0x037FB128 MOV W1, W31
	0x037FB12C LDR X2, [X8]
	0x037FB130 BL 0x2172B6C
	0x037FB134 ADRP X8, 0x920000
	0x037FB138 LDR X8, [X8 + 0x270]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0xBE8000
	008 Move X20, 0x922000
	009 Move W8, [X21+977]
	010 Move X20, [X20+1576]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {42}
	016 Move X0, 0x8FD000
	017 Move X0, [X0+2424]
	018 Call 0x1C17CF4
	019 Move X0, 0x8FA000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0x8FA000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0x950000
	026 Move X0, [X0+3200]
	027 Call 0x1C17CF4
	028 Move X0, 0x922000
	029 Move X0, [X0+1576]
	030 Call 0x1C17CF4
	031 Move X0, 0x902000
	032 Move X0, [X0+3848]
	033 Call 0x1C17CF4
	034 Move X0, 0x950000
	035 Move X0, [X0+3208]
	036 Call 0x1C17CF4
	037 Move X0, 0x950000
	038 Move X0, [X0+3216]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+977], W8
	042 Move X0, [X20]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X19
	048 Call Touch.get_valid, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {196}
	053 Move X8, 0x8FA000
	054 Move X8, [X8+2512]
	055 Move X22, 0x8FA000
	056 Move W1, 6
	057 Move X0, [X8]
	058 Move X22, [X22+1880]
	059 Call 0x1C17D6C
	060 Move X8, [X20]
	061 Move X20, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, X19
	068 Call Touch.get_touchId, X0
	069 Move X8, [X22]
	070 Move [X31+44], W0
	071 Add X1, X31, 44
	072 Move X0, X8
	073 Call 0x1C17E04
	074 Compare X20, 0
	075 JumpIfEqual {210}
	076 Move X21, X0
	077 Compare X0, 0
	078 JumpIfEqual {85}
	079 Move X8, [X20]
	080 Move X0, X21
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {207}
	085 Move W8, [X20+24]
	086 Compare W8, 0
	087 JumpIfEqual {206}
	088 Move [X20+32], X21
	089 Move X8, [X19]
	090 Compare X8, 0
	091 JumpIfEqual {210}
	092 Move W8, [X8+24]
	093 Move X0, [X22]
	094 Add X1, X31, 40
	095 Move [X31+40], W8
	096 Call 0x1C17E04
	097 Move X21, X0
	098 Compare X0, 0
	099 JumpIfEqual {106}
	100 Move X8, [X20]
	101 Move X0, X21
	102 Move X1, [X8+64]
	103 Call 0x1C17E00
	104 Compare X0, 0
	105 JumpIfEqual {207}
	106 Move W8, [X20+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X0, X19
	109 Move [X20+40], X21
	110 Call Touch.get_phase, X0
	111 Move X8, 0x950000
	112 Move X8, [X8+3200]
	113 Move [X31+28], W0
	114 Add X1, X31, 28
	115 Move X8, [X8]
	116 Move X0, X8
	117 Call 0x1C17E04
	118 Move X21, X0
	119 Compare X0, 0
	120 JumpIfEqual {127}
	121 Move X8, [X20]
	122 Move X0, X21
	123 Move X1, [X8+64]
	124 Call 0x1C17E00
	125 Compare X0, 0
	126 JumpIfEqual {207}
	127 Move W8, [X20+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X0, X19
	130 Move [X20+48], X21
	131 Call Touch.get_screenPosition, X0
	132 Move X22, 0x901000
	133 Move X22, [X22+3848]
	134 Add X1, X31, 16
	135 Move [X31+16], S0
	136 Move [X31+24], S1
	137 Move X0, [X22]
	138 Call 0x1C17E04
	139 Move X21, X0
	140 Compare X0, 0
	141 JumpIfEqual {148}
	142 Move X8, [X20]
	143 Move X0, X21
	144 Move X1, [X8+64]
	145 Call 0x1C17E00
	146 Compare X0, 0
	147 JumpIfEqual {207}
	148 Move W8, [X20+24]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X0, X19
	151 Move [X20+56], X21
	152 Call Touch.get_delta, X0
	153 Move X0, [X22]
	154 Add X1, X31, 8
	155 Move [X31+8], S0
	156 Move [X31+16], S1
	157 Call 0x1C17E04
	158 Move X21, X0
	159 Compare X0, 0
	160 JumpIfEqual {167}
	161 Move X8, [X20]
	162 Move X0, X21
	163 Move X1, [X8+64]
	164 Call 0x1C17E00
	165 Compare X0, 0
	166 JumpIfEqual {207}
	167 Move W8, [X20+24]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X0, X19
	170 Move [X20+64], X21
	171 Call Touch.get_time, X0
	172 Move X8, 0x8FC000
	173 Move X8, [X8+2424]
	174 Add X1, X31, 0
	175 Move [X31], D0
	176 Move X0, [X8]
	177 Call 0x1C17E04
	178 Move X19, X0
	179 Compare X0, 0
	180 JumpIfEqual {187}
	181 Move X8, [X20]
	182 Move X0, X19
	183 Move X1, [X8+64]
	184 Call 0x1C17E00
	185 Compare X0, 0
	186 JumpIfEqual {207}
	187 Move W8, [X20+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move [X20+72], X19
	190 Move X8, 0x94F000
	191 Move X8, [X8+3216]
	192 Move X1, X20
	193 Move X2, X31
	194 Move X0, [X8]
	195 Call String.Format, X0, X1
	196 Move X8, 0x94F000
	197 Move X8, [X8+3208]
	198 Move X0, [X8]
	199 Move X20, [X31+64]
	200 Move X19, [X31+72]
	201 Move X22, [X31+48]
	202 Move X21, [X31+56]
	203 Move X30, [X31+32]
	204 Add X31, X31, 80
	205 Return X0
	206 Call 0x1C17F28
	207 Call 0x1C17F44
	208 Move X1, X31
	209 Call 0x1C17DEC
	210 Call 0x1C17F20

Method: System.Boolean Equals(UnityEngine.InputSystem.EnhancedTouch.Touch other)

Disassembly:
	0x037FB13C LDR X0, [X8]
	0x037FB140 LDR W8, [X0 + 0xE0]
	0x037FB144 CBNZ W8, 0x37FB14C
	0x037FB148 BL 0x1C16DFC
	0x037FB14C MOV X0, X19
	0x037FB150 LDP X20, X19, [X31 + 0x20]
	0x037FB154 LDP X22, X21, [X31 + 0x10]
	0x037FB158 MOVZ W1, 0x1
	0x037FB15C MOV X2, X31
	0x037FB160 LDR X30, [X31], #0x30
	0x037FB164 B 0x376ECB8
	0x037FB168 ADRP X0, 0x8FD000
	0x037FB16C LDR X0, [X0 + 0x528]
	0x037FB170 BL 0x1C16D08
	0x037FB174 BL 0x1C16F10
	0x037FB178 MOV X19, X0
	0x037FB17C ADRP X0, 0x92B000
	0x037FB180 LDR X0, [X0 + 0xDA0]
	0x037FB184 BL 0x1C16D08
	0x037FB188 MOV X1, X0
	0x037FB18C MOV X0, X19
	0x037FB190 MOV X2, X31
	0x037FB194 BL 0x330E100
	0x037FB198 ADRP X0, 0x94E000
	0x037FB19C LDR X0, [X0 + 0xD40]
	0x037FB1A0 BL 0x1C16D08
	0x037FB1A4 MOV X1, X0
	0x037FB1A8 MOV X0, X19
	0x037FB1AC BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBE7000
	006 Move W8, [X21+978]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x94F000
	014 Move X0, [X0+3224]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+978], W8
	018 Move X0, [X20]
	019 Move X1, [X19]
	020 Move X2, X31
	021 Call Object.Equals, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {38}
	026 Move X8, 0x94F000
	027 Move X8, [X8+3224]
	028 Move X1, [X19+8]
	029 Move X2, [X19+16]
	030 Add X0, X20, 8
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X3, [X8]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call 0x25C2F38, X0, X1
	037 Return X0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move W0, W31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x037FB1B0 STR X30, [X31 - 0x50]!
	0x037FB1B4 STP X26, X25, [X31 + 0x10]
	0x037FB1B8 STP X24, X23, [X31 + 0x20]
	0x037FB1BC STP X22, X21, [X31 + 0x30]
	0x037FB1C0 STP X20, X19, [X31 + 0x40]
	0x037FB1C4 ADRP X21, 0xBE6000
	0x037FB1C8 LDRB W8, [X21 + 0x3E8]
	0x037FB1CC MOV X19, X1
	0x037FB1D0 MOV X20, X0
	0x037FB1D4 TBNZ X8, 0x0, 0x37FB21C
	0x037FB1D8 ADRP X0, 0x94E000
	0x037FB1DC LDR X0, [X0 + 0xD48]
	0x037FB1E0 BL 0x1C16CF4
	0x037FB1E4 ADRP X0, 0x94E000
	0x037FB1E8 LDR X0, [X0 + 0xD50]
	0x037FB1EC BL 0x1C16CF4
	0x037FB1F0 ADRP X0, 0x94E000
	0x037FB1F4 LDR X0, [X0 + 0xD58]
	0x037FB1F8 BL 0x1C16CF4
	0x037FB1FC ADRP X0, 0x94E000
	0x037FB200 LDR X0, [X0 + 0xD60]
	0x037FB204 BL 0x1C16CF4
	0x037FB208 ADRP X0, 0x920000
	0x037FB20C LDR X0, [X0 + 0x270]
	0x037FB210 BL 0x1C16CF4
	0x037FB214 MOVZ W8, 0x1
	0x037FB218 STRB W8, [X21 + 0x3E8]
	0x037FB21C CBZ X19, 0x37FB35C
	0x037FB220 MOV X22, X20
	0x037FB224 ADRP X8, 0x94E000
	0x037FB228 LDR W2, [X22 + 0x28]!
	0x037FB22C LDR X8, [X8 + 0xD60]
	0x037FB230 MOV X1, X19
	0x037FB234 LDR X0, [X22 + 0x8]
	0x037FB238 LDR X3, [X8]
	0x037FB23C BL 0x2179B8C
	0x037FB240 ADDS W31, W0, 0x1
	0x037FB244 B.EQ 0x37FB340
	0x037FB248 LDR X8, [X20 + 0x48]
	0x037FB24C CBZ X8, 0x37FB2C0
	0x037FB250 ADRP X26, 0x94E000
	0x037FB254 ADRP X25, 0x94E000
	0x037FB258 ADRP X24, 0x94E000
	0x037FB25C LDR X26, [X26 + 0xD48]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0xBE7000
	007 Move W8, [X21+979]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x921000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+979], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X21, 0x921000
	022 Move X21, [X21+1576]
	023 Move X9, [X20]
	024 Move X8, [X21]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X8, [X0+16]
	030 Move V0, [X0]
	031 Move X0, [X21]
	032 Move [X31+48], X8
	033 Move [X31+2], V0
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move V0, [X31+2]
	039 Move X8, [X31+48]
	040 Add X1, X31, 0
	041 Move X0, X19
	042 Move [X31], V0
	043 Move [X31+16], X8
	044 Call Touch.Equals, X0, X1
	045 Move X20, [X31+80]
	046 Move X19, [X31+88]
	047 Move X30, [X31+64]
	048 Move X21, [X31+72]
	049 And W0, W0, 1
	050 Add X31, X31, 96
	051 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x037FB260 LDR X25, [X25 + 0xD58]
	0x037FB264 LDR X24, [X24 + 0xD50]
	0x037FB268 MOV W21, W0
	0x037FB26C MOV X23, X31
	0x037FB270 LDR W9, [X8 + 0x18]
	0x037FB274 CMP X23, W9, SXTW
	0x037FB278 B.GE 0x37FB2C4
	0x037FB27C CMP X23, X9
	0x037FB280 B.CS 0x37FB358
	0x037FB284 ADD X9, X8, X23, 0x3, LSL
	0x037FB288 LDR X9, [X9 + 0x20]
	0x037FB28C CBZ X9, 0x37FB29C
	0x037FB290 LDR X9, [X9 + 0x78]
	0x037FB294 CMP X9, X19
	0x037FB298 B.NE 0x37FB2B8
	0x037FB29C MOVZ W3, 0x4
	0x037FB2A0 MOV X0, X20
	0x037FB2A4 MOV W1, W23
	0x037FB2A8 MOV W2, W21
	0x037FB2AC MOV X4, X31
	0x037FB2B0 BL 0x37FB3A4
	0x037FB2B4 LDR X8, [X20 + 0x48]
	0x037FB2B8 ADD X23, X23, 0x1
	0x037FB2BC CBNZ X8, 0x37FB270
	0x037FB2C0 BL 0x1C16F20
	0x037FB2C4 LDR X0, [X20 + 0x30]
	0x037FB2C8 LDR X3, [X26]
	0x037FB2CC MOV X1, X22
	0x037FB2D0 MOV W2, W21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xBE7000
	006 Move W8, [X20+980]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x94F000
	013 Move X0, [X0+3232]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+980], W8
	017 Move X20, 0x94F000
	018 Move X0, [X19]
	019 Move X20, [X20+3232]
	020 Compare X0, 0
	021 JumpIfEqual {28}
	022 Move X8, [X0]
	023 Move X9, [X8+344]
	024 Move X1, [X8+352]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move W8, 397
	027 Multiply W21, W0, W8
	028 Move W21, W31
	029 Move X1, [X20]
	030 Add X0, X19, 8
	031 Call 0x25C305C, X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Xor W0, W0, W21
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0

Method: System.Void AddTouchscreen(UnityEngine.InputSystem.Touchscreen screen)

Disassembly:
	0x037F8578 B.NE 0x37F8564
	0x037F857C MOV X0, X19
	0x037F8580 MOV W2, W31
	0x037F8584 BL 0x1C5C788
	0x037F8588 B 0x37F8598
	0x037F858C LDRSW X9, [X10]
	0x037F8590 ADD X8, X8, X9, 0x4, LSL
	0x037F8594 ADD X0, X8, 0x138
	0x037F8598 LDP X8, X1, [X0]
	0x037F859C MOV X0, X19
	0x037F85A0 BLR X8
	0x037F85A4 CBNZ X22, 0x37F85FC
	0x037F85A8 CMP W24, 0x5
	0x037F85AC B.EQ 0x37F85BC
	0x037F85B0 CMP W24, 0x4
	0x037F85B4 B.EQ 0x37F85C8
	0x037F85B8 CBNZ W24, 0x37F85D4
	0x037F85BC STP X31, X31, [X20]
	0x037F85C0 STR X31, [X20 + 0x10]
	0x037F85C4 B 0x37F85D4
	0x037F85C8 LDR V0, [X31]
	0x037F85CC STR X21, [X20]
	0x037F85D0 STUR V0, [X20 + 0x8]
	0x037F85D4 LDP X20, X19, [X31 + 0x60]
	0x037F85D8 LDP X22, X21, [X31 + 0x50]
	0x037F85DC LDP X24, X23, [X31 + 0x40]
	0x037F85E0 LDP X26, X25, [X31 + 0x30]
	0x037F85E4 LDR X30, [X31 + 0x20]
	0x037F85E8 ADD X31, X31, 0x70
	0x037F85EC RET
	0x037F85F0 BL 0x1C16F20
	0x037F85F4 BL 0x1C16F20
	0x037F85F8 BL 0x1C16F20
	0x037F85FC MOV X0, X22
	0x037F8600 BL 0x1C16F18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBEA000
	006 Move X20, 0x924000
	007 Move W8, [X21+981]
	008 Move X20, [X20+1576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x952000
	015 Move X0, [X0+2816]
	016 Call 0x1C17CF4
	017 Move X0, 0x924000
	018 Move X0, [X0+1576]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+981], W8
	022 Move X0, [X20]
	023 Move X21, 0x952000
	024 Move W8, [X0+224]
	025 Move X21, [X21+2816]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X0, [X0+184]
	031 Move X3, [X21]
	032 Move W2, 5
	033 Move X1, X19
	034 Call InlinedArray`1<Object>.AppendWithCapacity, X0, X1, X2
	035 Move X8, [X20]
	036 Move X1, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X8, [X8+184]
	040 Add X0, X8, 272
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call FingerAndTouchState.AddFingers, X0, X1
	044 Return 

Method: System.Void RemoveTouchscreen(UnityEngine.InputSystem.Touchscreen screen)

Disassembly:
	0x037F8604 B 0x37F8614
	0x037F8608 B 0x37F8614
	0x037F860C B 0x37F8614
	0x037F8610 B 0x37F8614
	0x037F8614 MOV X21, X0
	0x037F8618 CMP W1, 0x1
	0x037F861C B.NE 0x37F8640
	0x037F8620 MOV X0, X21
	0x037F8624 BL 0x3EB1AD0
	0x037F8628 LDR X22, [X0]
	0x037F862C BL 0x3EB1AE0
	0x037F8630 MOV X21, X31
	0x037F8634 MOV W24, W31
	0x037F8638 MOVI V0.2D, 0x0
	0x037F863C B 0x37F8528
	0x037F8640 MOV X22, X31
	0x037F8644 B 0x37F864C
	0x037F8648 MOV X21, X0
	0x037F864C CBZ X19, 0x37F86A8
	0x037F8650 LDR X8, [X19]
	0x037F8654 LDR X1, [X23]
	0x037F8658 LDRH W9, [X8 + 0x12E]
	0x037F865C CBZ X9, 0x37F8680
	0x037F8660 LDR X10, [X8 + 0xB0]
	0x037F8664 ADD X10, X10, 0x8
	0x037F8668 LDUR X11, [X10 - 0x8]
	0x037F866C CMP X11, X1
	0x037F8670 B.EQ 0x37F8690
	0x037F8674 SUBS X9, X9, 0x1
	0x037F8678 ADD X10, X10, 0x10
	0x037F867C B.NE 0x37F8668
	0x037F8680 MOV X0, X19
	0x037F8684 MOV W2, W31
	0x037F8688 BL 0x1C5C788
	0x037F868C B 0x37F869C
	0x037F8690 LDRSW X9, [X10]
	0x037F8694 ADD X8, X8, X9, 0x4, LSL
	0x037F8698 ADD X0, X8, 0x138
	0x037F869C LDP X8, X1, [X0]
	0x037F86A0 MOV X0, X19
	0x037F86A4 BLR X8
	0x037F86A8 CBNZ X22, 0x37F86B4
	0x037F86AC MOV X0, X21
	0x037F86B0 BL 0x1D2C690
	0x037F86B4 MOV X0, X22
	0x037F86B8 BL 0x1C16F18
	0x037F86BC BL 0x1990590
	0x037F86C0 SUB X31, X31, 0x80
	0x037F86C4 STR X30, [X31 + 0x30]
	0x037F86C8 STP X26, X25, [X31 + 0x40]
	0x037F86CC STP X24, X23, [X31 + 0x50]
	0x037F86D0 STP X22, X21, [X31 + 0x60]
	0x037F86D4 STP X20, X19, [X31 + 0x70]
	0x037F86D8 ADRP X22, 0xBE9000
	0x037F86DC LDRB W9, [X22 + 0x3AE]
	0x037F86E0 MOV X21, X1
	0x037F86E4 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X21, 0xBEA000
	008 Move X20, 0x924000
	009 Move W8, [X21+982]
	010 Move X20, [X20+1576]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x952000
	017 Move X0, [X0+2824]
	018 Call 0x1C17CF4
	019 Move X0, 0x952000
	020 Move X0, [X0+2832]
	021 Call 0x1C17CF4
	022 Move X0, 0x924000
	023 Move X0, [X0+1576]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+982], W8
	027 Move X0, [X20]
	028 Move X22, 0x952000
	029 Move X21, 0x952000
	030 Move W8, [X0+224]
	031 Move X22, [X22+2832]
	032 Move X21, [X21+2824]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move X8, [X0+184]
	038 Move X2, [X22]
	039 Add X0, X31, 32
	040 Move X1, X19
	041 Move X9, [X8+16]
	042 Move V0, [X8]
	043 Move [X31+16], X9
	044 Move [X31], V0
	045 Move [X31+2], V0
	046 Move [X31+48], X9
	047 Call 0x21FC010, X0, X1
	048 Move X8, [X20]
	049 Move X2, [X21]
	050 Move W1, W0
	051 Move X8, [X8+184]
	052 Move X0, X8
	053 Call InlinedArray`1<Object>.RemoveAtWithCapacity, X0, X1
	054 Move X8, [X20]
	055 Move X1, X19
	056 Move X8, [X8+184]
	057 Add X0, X8, 272
	058 Call FingerAndTouchState.RemoveFingers, X0, X1
	059 Move X20, [X31+96]
	060 Move X19, [X31+104]
	061 Move X22, [X31+80]
	062 Move X21, [X31+88]
	063 Move X30, [X31+64]
	064 Add X31, X31, 112
	065 Return 

Method: System.Void BeginUpdate()

Disassembly:
	0x037FB52C BL 0x1C16DFC
	0x037FB530 CMP W21, 0x1
	0x037FB534 ADD X8, X24, X23
	0x037FB538 B.NE 0x37FB580
	0x037FB53C LDR W9, [X20 + 0x54]
	0x037FB540 UBFM W10, W9, 0x1C, 0x1F
	0x037FB544 AND W23, W10, 0x8
	0x037FB548 STRB W23, [X31 + 0x2C]
	0x037FB54C LDR W10, [X20 + 0x50]
	0x037FB550 ADD W27, W10, 0x1
	0x037FB554 STR W27, [X20 + 0x50]
	0x037FB558 CBZ X8, 0x37FB790
	0x037FB55C LDRB W26, [X8 + 0x21]
	0x037FB560 FMOV W28, S10
	0x037FB564 FMOV W29, S9
	0x037FB568 FMOV S11, W31
	0x037FB56C TBZ X9, 0x1F, 0x37FB574
	0x037FB570 STR W19, [X20 + 0x54]
	0x037FB574 FMOV S13, W31
	0x037FB578 MOV V12.16B, V8.16B
	0x037FB57C B 0x37FB630
	0x037FB580 CBZ X8, 0x37FB790
	0x037FB584 LDR W9, [X20 + 0x54]
	0x037FB588 LDR W27, [X8]
	0x037FB58C CMP W9, W19
	0x037FB590 CSET W9, EQ
	0x037FB594 UBFM W23, W9, 0x1D, 0x1C
	0x037FB598 STRB W23, [X31 + 0x2C]
	0x037FB59C LDP S0, S1, [X8 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xBE7000
	005 Move X19, 0x921000
	006 Move W8, [X20+983]
	007 Move X19, [X19+1576]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x921000
	013 Move X0, [X0+1576]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+983], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move W9, [X8+321]
	025 Compare W9, 0
	026 JumpIfEqual {34}
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {33}
	030 Call 0x1C17DFC
	031 Move X8, [X19]
	032 Move X8, [X8+184]
	033 Move [X8+320], W31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 

Method: UnityEngine.InputSystem.EnhancedTouch.Touch/GlobalState CreateGlobalState()

Disassembly:
	0x037FB5A0 LDP W28, W29, [X8 + 0x30]
	0x037FB5A4 LDR V12, [X8 + 0x28]
	0x037FB5A8 LDRB W26, [X8 + 0x21]
	0x037FB5AC CMP W21, 0x3
	0x037FB5B0 FSUB S11, S10, S0
	0x037FB5B4 FSUB S13, S9, S1
	0x037FB5B8 B.NE 0x37FB630
	0x037FB5BC ADRP X8, 0x94B000
	0x037FB5C0 LDR X8, [X8 + 0xD58]
	0x037FB5C4 FSUB D1, D8, D12
	0x037FB5C8 LDR X8, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move W9, 64
	003 Add X0, X8, 28
	004 Move W2, 308
	005 Move W1, W31
	006 Move [X8], X31
	007 Move [X8+8], X31
	008 Move [X8+16], X31
	009 Move [X8+24], W9
	010 Call 0x3EB2B10
	011 Move X30, [X31+16]
	012 Return X0

Method: UnityEngine.InputSystem.Utilities.ISavedState SaveAndResetState()

Disassembly:
	0x037FB5CC LDR X8, [X8 + 0xB8]
	0x037FB5D0 LDR V0, [X8 + 0x8]
	0x037FB5D4 FCVT S0, S0
	0x037FB5D8 FCMP D1, D0
	0x037FB5DC B.HI 0x37FB60C
	0x037FB5E0 FMOV S0, W28
	0x037FB5E4 FMOV S1, W29
	0x037FB5E8 LDR V2, [X8 + 0x10]
	0x037FB5EC FSUB S0, S10, S0
	0x037FB5F0 FSUB S1, S9, S1
	0x037FB5F4 LDRB W23, [X31 + 0x2C]
	0x037FB5F8 FMUL S0, S0, S0
	0x037FB5FC FMUL S1, S1, S1
	0x037FB600 FADD S0, S0, S1
	0x037FB604 FCMP S0, S2
	0x037FB608 B.LS 0x37FB618
	0x037FB60C MOV W8, W31
	0x037FB610 MOV W9, W31
	0x037FB614 B 0x37FB620
	0x037FB618 MOVZ W9, 0x10
	0x037FB61C MOVZ W8, 0x1
	0x037FB620 AND W10, W23, 0xFFFFFFEF
	0x037FB624 ORR W23, W9, W10, 0x0
	0x037FB628 ADD W26, W26, W8
	0x037FB62C STRB W23, [X31 + 0x2C]
	0x037FB630 ADRP X24, 0x94E000
	0x037FB634 LDR X24, [X24 + 0xD70]
	0x037FB638 TBZ X23, 0x3, 0x37FB698
	0x037FB63C LDR X8, [X20 + 0x20]
	0x037FB640 CBZ X8, 0x37FB790
	0x037FB644 LDR X0, [X8 + 0x1A0]
	0x037FB648 LDR X8, [X31 + 0x30]
	0x037FB64C LDR X4, [X24]
	0x037FB650 LDR W9, [X31 + 0xC]
	0x037FB654 ADD X1, X31, 0x40
	0x037FB658 STUR X8, [X31 + 0x54]
	0x037FB65C LDR W8, [X31 + 0x38]
	0x037FB660 MOV W2, W31
	0x037FB664 MOV X3, X22
	0x037FB668 STR W27, [X31 + 0x40]
	0x037FB66C STP S10, S9, [X31 + 0x44]
	0x037FB670 STP S11, S13, [X31 + 0x4C]
	0x037FB674 STRB W21, [X31 + 0x60]
	0x037FB678 STRB W26, [X31 + 0x61]
	0x037FB67C STRB W9, [X31 + 0x62]
	0x037FB680 STRB W23, [X31 + 0x63]
	0x037FB684 STR W31, [X31 + 0x64]
	0x037FB688 STR D12, [X31 + 0x68]
	0x037FB68C STR W8, [X31 + 0x5C]
	0x037FB690 STP W28, W29, [X31 + 0x70]
	0x037FB694 BL 0x2209C24
	0x037FB698 LDR X8, [X20 + 0x20]
	0x037FB69C CBZ X8, 0x37FB790
	0x037FB6A0 ADD X8, X8, 0x1A8
	0x037FB6A4 LDR V0, [X8]
	0x037FB6A8 ADRP X8, 0x94C000
	0x037FB6AC LDR X8, [X8 + 0xFC0]
	0x037FB6B0 ADD X0, X31, 0x10
	0x037FB6B4 MOV W1, W19
	0x037FB6B8 STR V0, [X31 + 0x1]
	0x037FB6BC LDR X2, [X8]
	0x037FB6C0 BL 0x24FDB3C
	0x037FB6C4 LDR X4, [X24]
	0x037FB6C8 LDR X8, [X31 + 0x30]
	0x037FB6CC LDR W9, [X31 + 0x38]
	0x037FB6D0 LDR W10, [X31 + 0xC]
	0x037FB6D4 ADD X1, X31, 0x40
	0x037FB6D8 MOV W2, W31
	0x037FB6DC MOV X3, X22
	0x037FB6E0 STR W27, [X31 + 0x40]
	0x037FB6E4 STP S10, S9, [X31 + 0x44]
	0x037FB6E8 STP S11, S13, [X31 + 0x4C]
	0x037FB6EC STRB W26, [X31 + 0x61]
	0x037FB6F0 STRB W21, [X31 + 0x60]
	0x037FB6F4 STRB W10, [X31 + 0x62]
	0x037FB6F8 STRB W23, [X31 + 0x63]
	0x037FB6FC STR W31, [X31 + 0x64]
	0x037FB700 STR D12, [X31 + 0x68]
	0x037FB704 STUR X8, [X31 + 0x54]
	0x037FB708 STR W9, [X31 + 0x5C]
	0x037FB70C STP W28, W29, [X31 + 0x70]
	0x037FB710 BL 0x2209C24
	0x037FB714 MOV W0, W21
	0x037FB718 MOV X1, X31
	0x037FB71C BL 0x37C1390
	0x037FB720 TBZ X0, 0x0, 0x37FB754
	0x037FB724 LDR X8, [X20 + 0x48]
	0x037FB728 CBZ X8, 0x37FB790
	0x037FB72C LDR W9, [X8 + 0x18]
	0x037FB730 CMP W9, W19
	0x037FB734 B.LS 0x37FB794
	0x037FB738 ADD X8, X8, W19, 0x3, SXTW
	0x037FB73C STR X31, [X8 + 0x20]
	0x037FB740 LDR W8, [X20 + 0x54]
	0x037FB744 CMP W8, W19
	0x037FB748 B.NE 0x37FB754
	0x037FB74C MOVN W8, 0x0
	0x037FB750 STR W8, [X20 + 0x54]
	0x037FB754 LDR X8, [X25 + 0x28]
	0x037FB758 LDR X9, [X31 + 0x78]
	0x037FB75C CMP X8, X9
	0x037FB760 B.NE 0x37FB798
	0x037FB764 LDP X20, X19, [X31 + 0x100]
	0x037FB768 LDP X22, X21, [X31 + 0xF0]
	0x037FB76C LDP X24, X23, [X31 + 0xE0]
	0x037FB770 LDP X26, X25, [X31 + 0xD0]
	0x037FB774 LDP X28, X27, [X31 + 0xC0]
	0x037FB778 LDP X29, X30, [X31 + 0xB0]
	0x037FB77C LDP D9, D8, [X31 + 0xA0]
	0x037FB780 LDP D11, D10, [X31 + 0x90]
	0x037FB784 LDP D13, D12, [X31 + 0x80]
	0x037FB788 ADD X31, X31, 0x110
	0x037FB78C RET
	0x037FB790 BL 0x1C16F20
	0x037FB794 BL 0x1C16F28
	0x037FB798 BL 0x3EB1B20
	0x037FB79C SUB X31, X31, 0x180
	0x037FB7A0 STP X29, X30, [X31 + 0x120]
	0x037FB7A4 STP X28, X27, [X31 + 0x130]
	0x037FB7A8 STP X26, X25, [X31 + 0x140]
	0x037FB7AC STP X24, X23, [X31 + 0x150]
	0x037FB7B0 STP X22, X21, [X31 + 0x160]
	0x037FB7B4 STP X20, X19, [X31 + 0x170]
	0x037FB7B8 ADRP X24, 0xBE6000
	0x037FB7BC STR X1, [X31 + 0x118]
	0x037FB7C0 ADRP X21, 0x94E000
	0x037FB7C4 LDRB W8, [X24 + 0x3E9]
	0x037FB7C8 LDR X21, [X21 + 0xD78]
	0x037FB7CC MOV X23, X2
	0x037FB7D0 MOV X19, X1
	0x037FB7D4 MOV X20, X0
	0x037FB7D8 ADD X22, X31, 0xA0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0xBE7000
	011 Move X23, 0x921000
	012 Move W8, [X19+984]
	013 Move X23, [X23+1576]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {44}
	018 Move X0, 0x8FA000
	019 Move X0, [X0+3696]
	020 Call 0x1C17CF4
	021 Move X0, 0x94F000
	022 Move X0, [X0+3264]
	023 Call 0x1C17CF4
	024 Move X0, 0x94F000
	025 Move X0, [X0+3272]
	026 Call 0x1C17CF4
	027 Move X0, 0x921000
	028 Move X0, [X0+1576]
	029 Call 0x1C17CF4
	030 Move X0, 0x94F000
	031 Move X0, [X0+3280]
	032 Call 0x1C17CF4
	033 Move X0, 0x94F000
	034 Move X0, [X0+3288]
	035 Call 0x1C17CF4
	036 Move X0, 0x94F000
	037 Move X0, [X0+3296]
	038 Call 0x1C17CF4
	039 Move X0, 0x94F000
	040 Move X0, [X0+3304]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X19+984], W8
	044 Move X0, [X23]
	045 Move X24, 0x94F000
	046 Move W8, [X0+224]
	047 Move X24, [X24+3304]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, [X24]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {57}
	055 Call 0x1C17DFC
	056 Move X0, [X24]
	057 Move X8, [X0+184]
	058 Move X9, [X23]
	059 Move X20, [X8+8]
	060 Move X19, [X9+184]
	061 Compare X20, 0
	062 JumpIfNotEqual {84}
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X24]
	068 Move X9, 0x94F000
	069 Move X8, [X0+184]
	070 Move X9, [X9+3280]
	071 Move X21, [X8]
	072 Move X0, [X9]
	073 Call 0x1C17F10
	074 Move X8, 0x94F000
	075 Move X8, [X8+3288]
	076 Move X1, X21
	077 Move X3, X31
	078 Move X20, X0
	079 Move X2, [X8]
	080 Call TypedRestore<GlobalState>..ctor, X0, X1, X2
	081 Move X0, [X24]
	082 Move X8, [X0+184]
	083 Move [X8+8], X20
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {89}
	087 Call 0x1C17DFC
	088 Move X0, [X24]
	089 Move X8, [X0+184]
	090 Move X26, 0x94F000
	091 Move X25, 0x94F000
	092 Move X22, [X8+16]
	093 Move X26, [X26+3272]
	094 Move X25, [X25+3264]
	095 Compare X22, 0
	096 JumpIfNotEqual {118}
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X24]
	102 Move X9, 0x8FA000
	103 Move X8, [X0+184]
	104 Move X9, [X9+3696]
	105 Move X21, [X8]
	106 Move X0, [X9]
	107 Call 0x1C17F10
	108 Move X8, 0x94F000
	109 Move X8, [X8+3296]
	110 Move X1, X21
	111 Move X3, X31
	112 Move X22, X0
	113 Move X2, [X8]
	114 Call Action..ctor, X0, X1, X2
	115 Move X8, [X24]
	116 Move X8, [X8+184]
	117 Move [X8+16], X22
	118 Move X0, [X26]
	119 Call 0x1C17F10
	120 Move X4, [X25]
	121 Move X1, X19
	122 Move X2, X20
	123 Move X3, X22
	124 Move X21, X0
	125 Call SavedStructState`1<GlobalState>..ctor, X0, X1, X2, X3
	126 Move X0, [X23]
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {132}
	130 Call 0x1C17DFC
	131 Move X0, [X23]
	132 Move X8, [X0+184]
	133 Move W9, 64
	134 Move W2, 308
	135 Move W1, W31
	136 Add X0, X8, 28
	137 Move [X8], X31
	138 Move [X8+8], X31
	139 Move [X8+16], X31
	140 Move [X8+24], W9
	141 Call 0x3EB2B10
	142 Move X0, X21
	143 Move X20, [X31+64]
	144 Move X19, [X31+72]
	145 Move X22, [X31+48]
	146 Move X21, [X31+56]
	147 Move X24, [X31+32]
	148 Move X23, [X31+40]
	149 Move X26, [X31+16]
	150 Move X25, [X31+24]
	151 Move X30, [X31+80]
	152 Return X0

Method: System.Void .cctor()

Disassembly:
	0x037FB7DC TBNZ X8, 0x0, 0x37FB83C
	0x037FB7E0 ADRP X0, 0x94E000
	0x037FB7E4 LDR X0, [X0 + 0xD80]
	0x037FB7E8 BL 0x1C16CF4
	0x037FB7EC ADRP X0, 0x94E000
	0x037FB7F0 LDR X0, [X0 + 0xD88]
	0x037FB7F4 BL 0x1C16CF4
	0x037FB7F8 ADRP X0, 0x94E000
	0x037FB7FC LDR X0, [X0 + 0xD78]
	0x037FB800 BL 0x1C16CF4
	0x037FB804 ADRP X0, 0x920000
	0x037FB808 LDR X0, [X0 + 0xC90]
	0x037FB80C BL 0x1C16CF4
	0x037FB810 ADRP X0, 0x94A000
	0x037FB814 LDR X0, [X0 + 0xF88]
	0x037FB818 BL 0x1C16CF4
	0x037FB81C ADRP X0, 0x94E000
	0x037FB820 LDR X0, [X0 + 0xD90]
	0x037FB824 BL 0x1C16CF4
	0x037FB828 ADRP X0, 0x94E000
	0x037FB82C LDR X0, [X0 + 0xD98]
	0x037FB830 BL 0x1C16CF4
	0x037FB834 MOVZ W8, 0x1
	0x037FB838 STRB W8, [X24 + 0x3E9]
	0x037FB83C MOVI V0.2D, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBE7000
	005 Move X20, 0x921000
	006 Move W8, [X19+985]
	007 Move X20, [X20+1576]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x921000
	013 Move X0, [X0+1576]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+985], W8
	017 Move X8, [X20]
	018 Move W9, 64
	019 Move W2, 308
	020 Move W1, W31
	021 Move X8, [X8+184]
	022 Add X0, X8, 28
	023 Move [X8], X31
	024 Move [X8+8], X31
	025 Move [X8+16], X31
	026 Move [X8+24], W9
	027 Call 0x3EB2B10
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

