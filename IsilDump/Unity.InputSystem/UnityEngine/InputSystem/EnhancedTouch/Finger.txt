Type: UnityEngine.InputSystem.EnhancedTouch.Finger

Method: UnityEngine.InputSystem.Touchscreen get_screen()

Disassembly:
	0x037F8818 TBZ X0, 0x0, 0x37F88B8
	0x037F881C ADRP X26, 0x951000

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Int32 get_index()

Disassembly:
	0x037F8820 LDR X26, [X26 + 0xBB8]
	0x037F8824 MOV W21, W31

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Boolean get_isActive()

Disassembly:
	0x037F8828 LDR X1, [X26]
	0x037F882C ADD X0, X31, 0x20
	0x037F8830 BL 0x25C1A94
	0x037F8834 CBZ X0, 0x37F88DC
	0x037F8838 LDR W8, [X0]
	0x037F883C CMP W8, W23
	0x037F8840 B.NE 0x37F8878
	0x037F8844 LDRB W8, [X0 + 0x20]
	0x037F8848 ADD W21, W21, 0x1
	0x037F884C CMP W8, 0x1
	0x037F8850 B.EQ 0x37F8878
	0x037F8854 LDR X1, [X25]
	0x037F8858 ADD X0, X31, 0x20
	0x037F885C BL 0x25C189C
	0x037F8860 LDR X8, [X24]
	0x037F8864 STP X0, X1, [X31 + 0x20]
	0x037F8868 ADD X0, X31, 0x20
	0x037F886C MOV X1, X8
	0x037F8870 BL 0x25C1504
	0x037F8874 TBNZ X0, 0x0, 0x37F8828
	0x037F8878 CBZ W21, 0x37F88B8
	0x037F887C LDR X8, [X20 + 0x20]
	0x037F8880 STP X31, X31, [X19 + 0x10]
	0x037F8884 STP X8, X20, [X19]
	0x037F8888 CBZ X8, 0x37F88DC
	0x037F888C LDR W10, [X8 + 0x54]
	0x037F8890 SUB W9, W22, 0x1
	0x037F8894 STR W10, [X19 + 0x18]
	0x037F8898 TBZ X21, 0x1F, 0x37F88A0
	0x037F889C LDR W21, [X8 + 0x44]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xBEA000
	007 Move X20, 0x924000
	008 Move W8, [X21+934]
	009 Move X20, [X20+1576]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x924000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+934], W8
	020 Add X8, X31, 8
	021 Move X0, X19
	022 Move [X31+8], X31
	023 Move [X31+16], X31
	024 Move [X31+24], X31
	025 Call Finger.get_currentTouch, X0
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 8
	032 Call Touch.get_valid, X0
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 And W0, W0, 1
	038 Add X31, X31, 64
	039 Return X0

Method: UnityEngine.Vector2 get_screenPosition()

Disassembly:
	0x037F89E4 LDRB W0, [X0 + 0x20]
	0x037F89E8 LDP X20, X19, [X31 + 0x10]
	0x037F89EC LDP X30, X21, [X31], #0x20
	0x037F89F0 RET
	0x037F89F4 LDR X0, [X0]
	0x037F89F8 RET
	0x037F89FC STP X30, X21, [X31 - 0x20]!
	0x037F8A00 STP X20, X19, [X31 + 0x10]
	0x037F8A04 ADRP X21, 0xBE9000
	0x037F8A08 ADRP X20, 0x951000
	0x037F8A0C LDRB W8, [X21 + 0x3C3]
	0x037F8A10 LDR X20, [X20 + 0xBB8]
	0x037F8A14 MOV X19, X0
	0x037F8A18 TBNZ X8, 0x0, 0x37F8A30
	0x037F8A1C ADRP X0, 0x951000
	0x037F8A20 LDR X0, [X0 + 0xBB8]
	0x037F8A24 BL 0x1C16CF4
	0x037F8A28 MOVZ W8, 0x1
	0x037F8A2C STRB W8, [X21 + 0x3C3]
	0x037F8A30 LDR X1, [X20]
	0x037F8A34 ADD X0, X19, 0x8
	0x037F8A38 LDP X20, X19, [X31 + 0x10]
	0x037F8A3C LDP X30, X21, [X31], #0x20
	0x037F8A40 B 0x25C1A94
	0x037F8A44 STP X30, X21, [X31 - 0x20]!
	0x037F8A48 STP X20, X19, [X31 + 0x10]
	0x037F8A4C ADRP X20, 0xBE9000
	0x037F8A50 ADRP X21, 0x923000
	0x037F8A54 LDRB W8, [X20 + 0x3B1]
	0x037F8A58 LDR X21, [X21 + 0x628]
	0x037F8A5C MOV X19, X0
	0x037F8A60 TBNZ X8, 0x0, 0x37F8A78
	0x037F8A64 ADRP X0, 0x923000
	0x037F8A68 LDR X0, [X0 + 0x628]
	0x037F8A6C BL 0x1C16CF4
	0x037F8A70 MOVZ W8, 0x1
	0x037F8A74 STRB W8, [X20 + 0x3B1]
	0x037F8A78 LDR X0, [X21]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xBEA000
	007 Move X20, 0x924000
	008 Move W8, [X21+935]
	009 Move X20, [X20+1576]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x924000
	016 Move X0, [X0+1576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+935], W8
	020 Add X8, X31, 8
	021 Move X0, X19
	022 Move [X31+8], X31
	023 Move [X31+16], X31
	024 Move [X31+24], X31
	025 Call Finger.get_lastTouch, X0
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 8
	032 Call Touch.get_valid, X0
	033 Move S0, W31
	034 Move S1, W31
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {46}
	039 Move X0, [X20]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Add X0, X31, 8
	045 Call Touch.get_screenPosition, X0
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Add X31, X31, 64
	051 Return X0

Method: UnityEngine.InputSystem.EnhancedTouch.Touch get_lastTouch()

Disassembly:
	0x037F8A7C LDR W8, [X0 + 0xE0]
	0x037F8A80 CBNZ W8, 0x37F8A88
	0x037F8A84 BL 0x1C16DFC
	0x037F8A88 MOV X0, X19
	0x037F8A8C BL 0x37F8998
	0x037F8A90 LDP X20, X19, [X31 + 0x10]
	0x037F8A94 CMP W0, 0x1
	0x037F8A98 CSET W0, EQ
	0x037F8A9C LDP X30, X21, [X31], #0x20
	0x037F8AA0 RET
	0x037F8AA4 STP X30, X21, [X31 - 0x20]!
	0x037F8AA8 STP X20, X19, [X31 + 0x10]
	0x037F8AAC ADRP X21, 0xBE9000
	0x037F8AB0 ADRP X20, 0x923000
	0x037F8AB4 LDRB W8, [X21 + 0x3B2]
	0x037F8AB8 LDR X20, [X20 + 0x628]
	0x037F8ABC MOV X19, X0
	0x037F8AC0 TBNZ X8, 0x0, 0x37F8AD8
	0x037F8AC4 ADRP X0, 0x923000
	0x037F8AC8 LDR X0, [X0 + 0x628]
	0x037F8ACC BL 0x1C16CF4
	0x037F8AD0 MOVZ W8, 0x1
	0x037F8AD4 STRB W8, [X21 + 0x3B2]
	0x037F8AD8 LDR X0, [X20]
	0x037F8ADC LDR W8, [X0 + 0xE0]
	0x037F8AE0 CBNZ W8, 0x37F8AE8
	0x037F8AE4 BL 0x1C16DFC
	0x037F8AE8 MOV X0, X19
	0x037F8AEC BL 0x37F8998
	0x037F8AF0 CMP W0, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBEA000
	006 Move W9, [X21+936]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x952000
	014 Move X0, [X0+2864]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+936], W8
	018 Move X0, [X20+32]
	019 Compare X0, 0
	020 JumpIfEqual {40}
	021 Move W8, [X0+68]
	022 Compare W8, 0
	023 JumpIfEqual {32}
	024 Move X9, 0x952000
	025 Move X9, [X9+2864]
	026 Subtract W1, W8, 1
	027 Move X2, [X9]
	028 Call 0x2E1316C, X0, X1
	029 Move [X19], X20
	030 Move [X19+8], X0
	031 Move [X19+16], X1
	032 Move [X19], X31
	033 Move [X19+8], X31
	034 Move [X19+16], X31
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0
	040 Call 0x1C17F20

Method: UnityEngine.InputSystem.EnhancedTouch.Touch get_currentTouch()

Disassembly:
	0x037F88A0 STR W21, [X19 + 0x10]
	0x037F88A4 TBZ X9, 0x1F, 0x37F88B0
	0x037F88A8 LDR W8, [X8 + 0x44]
	0x037F88AC SUB W9, W8, 0x1
	0x037F88B0 STR W9, [X19 + 0x14]
	0x037F88B4 B 0x37F88C0
	0x037F88B8 MOVI V0.2D, 0x0
	0x037F88BC STP V0, V0, [X19]
	0x037F88C0 LDP X20, X19, [X31 + 0x70]
	0x037F88C4 LDP X22, X21, [X31 + 0x60]
	0x037F88C8 LDP X24, X23, [X31 + 0x50]
	0x037F88CC LDP X26, X25, [X31 + 0x40]
	0x037F88D0 LDR X30, [X31 + 0x30]
	0x037F88D4 ADD X31, X31, 0x80
	0x037F88D8 RET
	0x037F88DC BL 0x1C16F20
	0x037F88E0 STP X30, X21, [X31 - 0x20]!
	0x037F88E4 STP X20, X19, [X31 + 0x10]
	0x037F88E8 ADRP X20, 0xBE9000
	0x037F88EC ADRP X21, 0x923000
	0x037F88F0 LDRB W8, [X20 + 0x3C2]
	0x037F88F4 LDR X21, [X21 + 0x628]
	0x037F88F8 MOV X19, X0
	0x037F88FC TBNZ X8, 0x0, 0x37F8914
	0x037F8900 ADRP X0, 0x923000
	0x037F8904 LDR X0, [X0 + 0x628]
	0x037F8908 BL 0x1C16CF4
	0x037F890C MOVZ W8, 0x1
	0x037F8910 STRB W8, [X20 + 0x3C2]
	0x037F8914 LDR X0, [X21]
	0x037F8918 LDR W8, [X0 + 0xE0]
	0x037F891C CBNZ W8, 0x37F8924
	0x037F8920 BL 0x1C16DFC
	0x037F8924 MOV X0, X19
	0x037F8928 BL 0x37F8F6C
	0x037F892C LDR W0, [X0 + 0x8]
	0x037F8930 LDP X20, X19, [X31 + 0x10]
	0x037F8934 LDP X30, X21, [X31], #0x20
	0x037F8938 RET
	0x037F893C STP X30, X21, [X31 - 0x20]!
	0x037F8940 STP X20, X19, [X31 + 0x10]
	0x037F8944 ADRP X20, 0xBE9000
	0x037F8948 ADRP X21, 0x923000
	0x037F894C LDRB W8, [X20 + 0x3B4]
	0x037F8950 LDR X21, [X21 + 0x628]
	0x037F8954 MOV X19, X0
	0x037F8958 TBNZ X8, 0x0, 0x37F8970
	0x037F895C ADRP X0, 0x923000
	0x037F8960 LDR X0, [X0 + 0x628]
	0x037F8964 BL 0x1C16CF4
	0x037F8968 MOVZ W8, 0x1
	0x037F896C STRB W8, [X20 + 0x3B4]
	0x037F8970 LDR X0, [X21]
	0x037F8974 LDR W8, [X0 + 0xE0]
	0x037F8978 CBNZ W8, 0x37F8980
	0x037F897C BL 0x1C16DFC
	0x037F8980 MOV X0, X19
	0x037F8984 BL 0x37F89FC
	0x037F8988 LDR W0, [X0]
	0x037F898C LDP X20, X19, [X31 + 0x10]
	0x037F8990 LDP X30, X21, [X31], #0x20
	0x037F8994 RET
	0x037F8998 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0xBEA000
	008 Move X21, 0x924000
	009 Move X19, X8
	010 Move W8, [X22+937]
	011 Move X21, [X21+1576]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x94D000
	018 Move X0, [X0+3984]
	019 Call 0x1C17CF4
	020 Move X0, 0x924000
	021 Move X0, [X0+1576]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+937], W8
	025 Add X8, X31, 8
	026 Move X0, X20
	027 Move [X31+8], X31
	028 Move [X31+16], X31
	029 Move [X31+24], X31
	030 Call Finger.get_lastTouch, X0
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Add X0, X31, 8
	037 Call Touch.get_valid, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {70}
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Add X0, X31, 8
	048 Call Touch.get_isInProgress, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {66}
	053 Move X0, [X21]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Add X0, X31, 8
	059 Call Touch.get_updateStepCount, X0
	060 Move X8, 0x94D000
	061 Move X8, [X8+3984]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move W8, [X8]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X8, [X31+24]
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 Move [X19+16], X8
	069 Move [X19], V0
	070 Move [X19], X31
	071 Move [X19+8], X31
	072 Move [X19+16], X31
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X22, [X31+48]
	076 Move X21, [X31+56]
	077 Move X30, [X31+32]
	078 Add X31, X31, 80
	079 Return X0

Method: UnityEngine.InputSystem.EnhancedTouch.TouchHistory get_touchHistory()

Disassembly:
	0x037F8C2C RET
	0x037F8C30 STP X30, X21, [X31 - 0x20]!
	0x037F8C34 STP X20, X19, [X31 + 0x10]
	0x037F8C38 ADRP X20, 0xBE9000
	0x037F8C3C ADRP X21, 0x923000
	0x037F8C40 LDRB W8, [X20 + 0x3B6]
	0x037F8C44 LDR X21, [X21 + 0x628]
	0x037F8C48 MOV X19, X0
	0x037F8C4C TBNZ X8, 0x0, 0x37F8C64
	0x037F8C50 ADRP X0, 0x923000
	0x037F8C54 LDR X0, [X0 + 0x628]
	0x037F8C58 BL 0x1C16CF4
	0x037F8C5C MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X9, [X0+32]
	003 Move [X8+16], X31
	004 Move [X8+24], X31
	005 Move [X8], X9
	006 Move [X8+8], X0
	007 Compare X9, 0
	008 JumpIfEqual {17}
	009 Move W11, [X9+84]
	010 Move W9, [X9+68]
	011 Subtract W10, W9, 1
	012 Move [X8+16], W9
	013 Move [X8+20], W10
	014 Move [X8+24], W11
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20

Method: System.Void .ctor(UnityEngine.InputSystem.Touchscreen screen, System.Int32 index, UnityEngine.InputSystem.LowLevel.InputUpdateType updateMask)

Disassembly:
	0x037F8C9C LDRB W8, [X20 + 0x3B7]
	0x037F8CA0 LDR X21, [X21 + 0x628]
	0x037F8CA4 MOV X19, X0
	0x037F8CA8 TBNZ X8, 0x0, 0x37F8CC0
	0x037F8CAC ADRP X0, 0x923000
	0x037F8CB0 LDR X0, [X0 + 0x628]
	0x037F8CB4 BL 0x1C16CF4
	0x037F8CB8 MOVZ W8, 0x1
	0x037F8CBC STRB W8, [X20 + 0x3B7]
	0x037F8CC0 LDR X0, [X21]
	0x037F8CC4 LDR W8, [X0 + 0xE0]
	0x037F8CC8 CBNZ W8, 0x37F8CD0
	0x037F8CCC BL 0x1C16DFC
	0x037F8CD0 MOV X0, X19
	0x037F8CD4 BL 0x37F89FC
	0x037F8CD8 LDR V0, [X0 + 0x28]
	0x037F8CDC LDP X20, X19, [X31 + 0x10]
	0x037F8CE0 LDP X30, X21, [X31], #0x20
	0x037F8CE4 RET
	0x037F8CE8 STP X30, X21, [X31 - 0x20]!
	0x037F8CEC STP X20, X19, [X31 + 0x10]
	0x037F8CF0 ADRP X21, 0xBE9000
	0x037F8CF4 ADRP X20, 0x951000
	0x037F8CF8 LDRB W8, [X21 + 0x3B8]
	0x037F8CFC LDR X20, [X20 + 0xBD8]
	0x037F8D00 MOV X19, X0
	0x037F8D04 TBNZ X8, 0x0, 0x37F8D1C
	0x037F8D08 ADRP X0, 0x951000
	0x037F8D0C LDR X0, [X0 + 0xBD8]
	0x037F8D10 BL 0x1C16CF4
	0x037F8D14 MOVZ W8, 0x1
	0x037F8D18 STRB W8, [X21 + 0x3B8]
	0x037F8D1C LDR X1, [X20]
	0x037F8D20 ADD X0, X19, 0x8
	0x037F8D24 LDP X20, X19, [X31 + 0x10]
	0x037F8D28 LDP X30, X21, [X31], #0x20
	0x037F8D2C B 0x25C15DC
	0x037F8D30 STP X30, X21, [X31 - 0x20]!
	0x037F8D34 STP X20, X19, [X31 + 0x10]
	0x037F8D38 ADRP X20, 0xBE9000
	0x037F8D3C ADRP X21, 0x923000
	0x037F8D40 LDRB W8, [X20 + 0x3B9]
	0x037F8D44 LDR X21, [X21 + 0x628]
	0x037F8D48 MOV X19, X0
	0x037F8D4C TBNZ X8, 0x0, 0x37F8D64
	0x037F8D50 ADRP X0, 0x923000
	0x037F8D54 LDR X0, [X0 + 0x628]
	0x037F8D58 BL 0x1C16CF4
	0x037F8D5C MOVZ W8, 0x1
	0x037F8D60 STRB W8, [X20 + 0x3B9]
	0x037F8D64 LDR X0, [X21]
	0x037F8D68 LDR W8, [X0 + 0xE0]
	0x037F8D6C CBNZ W8, 0x37F8D74
	0x037F8D70 BL 0x1C16DFC
	0x037F8D74 LDR X8, [X19]
	0x037F8D78 CBZ X8, 0x37F8D8C
	0x037F8D7C LDR X0, [X8 + 0x10]
	0x037F8D80 LDP X20, X19, [X31 + 0x10]
	0x037F8D84 LDP X30, X21, [X31], #0x20
	0x037F8D88 RET
	0x037F8D8C BL 0x1C16F20
	0x037F8D90 STP X30, X21, [X31 - 0x20]!
	0x037F8D94 STP X20, X19, [X31 + 0x10]
	0x037F8D98 ADRP X20, 0xBE9000
	0x037F8D9C ADRP X21, 0x923000
	0x037F8DA0 LDRB W8, [X20 + 0x3BB]
	0x037F8DA4 LDR X21, [X21 + 0x628]
	0x037F8DA8 MOV X19, X0
	0x037F8DAC TBNZ X8, 0x0, 0x37F8DC4
	0x037F8DB0 ADRP X0, 0x923000
	0x037F8DB4 LDR X0, [X0 + 0x628]
	0x037F8DB8 BL 0x1C16CF4
	0x037F8DBC MOVZ W8, 0x1
	0x037F8DC0 STRB W8, [X20 + 0x3BB]
	0x037F8DC4 LDR X0, [X21]
	0x037F8DC8 LDR W8, [X0 + 0xE0]
	0x037F8DCC CBNZ W8, 0x37F8DD4
	0x037F8DD0 BL 0x1C16DFC
	0x037F8DD4 MOV X0, X19
	0x037F8DD8 BL 0x37F89FC
	0x037F8DDC LDP S0, S1, [X0 + 0x30]
	0x037F8DE0 LDP X20, X19, [X31 + 0x10]
	0x037F8DE4 LDP X30, X21, [X31], #0x20
	0x037F8DE8 RET
	0x037F8DEC STP X30, X21, [X31 - 0x20]!
	0x037F8DF0 STP X20, X19, [X31 + 0x10]
	0x037F8DF4 ADRP X20, 0xBE9000
	0x037F8DF8 ADRP X21, 0x923000
	0x037F8DFC LDRB W8, [X20 + 0x3BC]
	0x037F8E00 LDR X21, [X21 + 0x628]
	0x037F8E04 MOV X19, X0
	0x037F8E08 TBNZ X8, 0x0, 0x37F8E20
	0x037F8E0C ADRP X0, 0x923000
	0x037F8E10 LDR X0, [X0 + 0x628]
	0x037F8E14 BL 0x1C16CF4
	0x037F8E18 MOVZ W8, 0x1
	0x037F8E1C STRB W8, [X20 + 0x3BC]
	0x037F8E20 LDR X0, [X21]
	0x037F8E24 LDR W8, [X0 + 0xE0]
	0x037F8E28 CBNZ W8, 0x37F8E30
	0x037F8E2C BL 0x1C16DFC
	0x037F8E30 MOV X0, X19
	0x037F8E34 BL 0x37F89FC
	0x037F8E38 LDP S0, S1, [X0 + 0xC]
	0x037F8E3C LDP X20, X19, [X31 + 0x10]
	0x037F8E40 LDP X30, X21, [X31], #0x20
	0x037F8E44 RET
	0x037F8E48 STP X30, X21, [X31 - 0x20]!
	0x037F8E4C STP X20, X19, [X31 + 0x10]
	0x037F8E50 ADRP X20, 0xBE9000
	0x037F8E54 ADRP X21, 0x923000
	0x037F8E58 LDRB W8, [X20 + 0x3BD]
	0x037F8E5C LDR X21, [X21 + 0x628]
	0x037F8E60 MOV X19, X0
	0x037F8E64 TBNZ X8, 0x0, 0x37F8E7C
	0x037F8E68 ADRP X0, 0x923000
	0x037F8E6C LDR X0, [X0 + 0x628]
	0x037F8E70 BL 0x1C16CF4
	0x037F8E74 MOVZ W8, 0x1
	0x037F8E78 STRB W8, [X20 + 0x3BD]
	0x037F8E7C LDR X0, [X21]
	0x037F8E80 LDR W8, [X0 + 0xE0]
	0x037F8E84 CBNZ W8, 0x37F8E8C
	0x037F8E88 BL 0x1C16DFC
	0x037F8E8C MOV X0, X19
	0x037F8E90 BL 0x37F89FC
	0x037F8E94 LDRB W0, [X0 + 0x21]
	0x037F8E98 LDP X20, X19, [X31 + 0x10]
	0x037F8E9C LDP X30, X21, [X31], #0x20
	0x037F8EA0 RET
	0x037F8EA4 STP X30, X21, [X31 - 0x20]!
	0x037F8EA8 STP X20, X19, [X31 + 0x10]
	0x037F8EAC ADRP X20, 0xBE9000
	0x037F8EB0 ADRP X21, 0x923000
	0x037F8EB4 LDRB W8, [X20 + 0x3BE]
	0x037F8EB8 LDR X21, [X21 + 0x628]
	0x037F8EBC MOV X19, X0
	0x037F8EC0 TBNZ X8, 0x0, 0x37F8ED8
	0x037F8EC4 ADRP X0, 0x923000
	0x037F8EC8 LDR X0, [X0 + 0x628]
	0x037F8ECC BL 0x1C16CF4
	0x037F8ED0 MOVZ W8, 0x1
	0x037F8ED4 STRB W8, [X20 + 0x3BE]
	0x037F8ED8 LDR X0, [X21]
	0x037F8EDC LDR W8, [X0 + 0xE0]
	0x037F8EE0 CBNZ W8, 0x37F8EE8
	0x037F8EE4 BL 0x1C16DFC
	0x037F8EE8 MOV X0, X19
	0x037F8EEC BL 0x37F89FC
	0x037F8EF0 LDRB W8, [X0 + 0x23]
	0x037F8EF4 LDP X20, X19, [X31 + 0x10]
	0x037F8EF8 UBFM W0, W8, 0x4, 0x4
	0x037F8EFC LDP X30, X21, [X31], #0x20
	0x037F8F00 RET
	0x037F8F04 LDRB W8, [X0 + 0x23]
	0x037F8F08 UBFM W0, W8, 0x4, 0x4
	0x037F8F0C RET
	0x037F8F10 STP X30, X21, [X31 - 0x20]!
	0x037F8F14 STP X20, X19, [X31 + 0x10]
	0x037F8F18 ADRP X20, 0xBE9000
	0x037F8F1C ADRP X21, 0x923000
	0x037F8F20 LDRB W8, [X20 + 0x3BF]
	0x037F8F24 LDR X21, [X21 + 0x628]
	0x037F8F28 MOV X19, X0
	0x037F8F2C TBNZ X8, 0x0, 0x37F8F44
	0x037F8F30 ADRP X0, 0x923000
	0x037F8F34 LDR X0, [X0 + 0x628]
	0x037F8F38 BL 0x1C16CF4
	0x037F8F3C MOVZ W8, 0x1
	0x037F8F40 STRB W8, [X20 + 0x3BF]
	0x037F8F44 LDR X0, [X21]
	0x037F8F48 LDR W8, [X0 + 0xE0]
	0x037F8F4C CBNZ W8, 0x37F8F54
	0x037F8F50 BL 0x1C16DFC
	0x037F8F54 MOV X0, X19
	0x037F8F58 BL 0x37F89FC
	0x037F8F5C LDRB W0, [X0 + 0x22]
	0x037F8F60 LDP X20, X19, [X31 + 0x10]
	0x037F8F64 LDP X30, X21, [X31], #0x20
	0x037F8F68 RET
	0x037F8F6C STP X30, X21, [X31 - 0x20]!
	0x037F8F70 STP X20, X19, [X31 + 0x10]
	0x037F8F74 ADRP X21, 0xBE9000
	0x037F8F78 ADRP X20, 0x951000
	0x037F8F7C LDRB W8, [X21 + 0x3C4]
	0x037F8F80 LDR X20, [X20 + 0xBE0]
	0x037F8F84 MOV X19, X0
	0x037F8F88 TBNZ X8, 0x0, 0x37F8FA0
	0x037F8F8C ADRP X0, 0x951000
	0x037F8F90 LDR X0, [X0 + 0xBE0]
	0x037F8F94 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+144], X29
	003 Move [X31+152], X30
	004 Move [X31+160], X28
	005 Move [X31+168], X27
	006 Move [X31+176], X26
	007 Move [X31+184], X25
	008 Move [X31+192], X24
	009 Move [X31+200], X23
	010 Move [X31+208], X22
	011 Move [X31+216], X21
	012 Move [X31+224], X20
	013 Move [X31+232], X19
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X24+40]
	016 Move X23, 0xBEA000
	017 Move W21, W3
	018 Move W19, W2
	019 Move [X31+136], X8
	020 Move W8, [X23+938]
	021 Move X22, X1
	022 Move X20, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {62}
	027 Move X0, 0x952000
	028 Move X0, [X0+2872]
	029 Call 0x1C17CF4
	030 Move X0, 0x952000
	031 Move X0, [X0+2880]
	032 Call 0x1C17CF4
	033 Move X0, 0x952000
	034 Move X0, [X0+2888]
	035 Call 0x1C17CF4
	036 Move X0, 0x952000
	037 Move X0, [X0+2896]
	038 Call 0x1C17CF4
	039 Move X0, 0x952000
	040 Move X0, [X0+2904]
	041 Call 0x1C17CF4
	042 Move X0, 0x952000
	043 Move X0, [X0+2912]
	044 Call 0x1C17CF4
	045 Move X0, 0x952000
	046 Move X0, [X0+2920]
	047 Call 0x1C17CF4
	048 Move X0, 0x952000
	049 Move X0, [X0+2928]
	050 Call 0x1C17CF4
	051 Move X0, 0x950000
	052 Move X0, [X0+4032]
	053 Call 0x1C17CF4
	054 Move X0, 0x924000
	055 Move X0, [X0+1576]
	056 Call 0x1C17CF4
	057 Move X0, 0x952000
	058 Move X0, [X0+2936]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X23+938], W8
	062 Move X0, X20
	063 Move X1, X31
	064 Call Object..ctor, X0
	065 Move [X20+16], X22
	066 Move [X20+24], W19
	067 Compare X22, 0
	068 JumpIfEqual {217}
	069 Move X25, 0x950000
	070 Move X25, [X25+4032]
	071 Move X23, 0x952000
	072 Add X26, X22, 424
	073 Move X23, [X23+2928]
	074 Move V0, [X26]
	075 Move X2, [X25]
	076 Move X22, 0x952000
	077 Move X27, 0x924000
	078 Move X22, [X22+2920]
	079 Move X27, [X27+1576]
	080 Add X0, X31, 0
	081 Move W1, W19
	082 Move [X31], V0
	083 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	084 Move X8, [X23]
	085 Move X23, X0
	086 Move X0, X8
	087 Call 0x1C17F10
	088 Move X2, [X22]
	089 Move X1, X23
	090 Move X22, X0
	091 Call 0x2E12964, X0, X1
	092 Move X0, [X27]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Call Touch.get_maxHistoryLengthPerFinger
	098 Compare X22, 0
	099 JumpIfEqual {217}
	100 Move X23, 0x952000
	101 Move X27, 0x952000
	102 Move X28, 0x952000
	103 Move X29, 0x952000
	104 Move X23, [X23+2872]
	105 Move X27, [X27+2880]
	106 Move X28, [X28+2896]
	107 Move X29, [X29+2888]
	108 Move W1, W0
	109 Move X0, X22
	110 Move X2, X31
	111 Call InputStateHistory.set_historyDepth, X0, X1
	112 Move W1, 12
	113 Move X0, X22
	114 Move X2, X31
	115 Call InputStateHistory.set_extraMemoryPerRecord, X0, X1
	116 Move X0, [X23]
	117 Call 0x1C17F10
	118 Move X2, [X27]
	119 Move X1, X20
	120 Move X3, X31
	121 Move X23, X0
	122 Call Action`1<Record>..ctor, X0, X1, X2
	123 Move [X22+16], X23
	124 Move X0, [X28]
	125 Call 0x1C17F10
	126 Move X2, [X29]
	127 Move X1, X31
	128 Move X3, X31
	129 Move X23, X0
	130 Call 0x2D4164C, X0, X1, X2
	131 Move X0, X22
	132 Move W1, W21
	133 Move X2, X31
	134 Move [X22+24], X23
	135 Call InputStateHistory.set_updateMask, X0, X1
	136 Move X0, X22
	137 Move X1, X31
	138 Move [X20+32], X22
	139 Call InputStateHistory.StartRecording, X0
	140 Move V0, [X26]
	141 Move X2, [X25]
	142 Add X0, X31, 0
	143 Move W1, W19
	144 Move [X31], V0
	145 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	146 Compare X0, 0
	147 JumpIfEqual {217}
	148 Move X1, X31
	149 Call TouchControl.get_isInProgress, X0
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {200}
	154 Move V0, [X26]
	155 Move X2, [X25]
	156 Move X20, [X20+32]
	157 Add X0, X31, 0
	158 Move W1, W19
	159 Move [X31], V0
	160 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	161 Move V0, [X26]
	162 Move X2, [X25]
	163 Move X21, X0
	164 Add X0, X31, 0
	165 Move W1, W19
	166 Move [X31], V0
	167 Call ReadOnlyArray`1<Object>.get_Item, X0, X1
	168 Compare X0, 0
	169 JumpIfEqual {217}
	170 Move X8, 0x952000
	171 Move X8, [X8+2904]
	172 Move X1, [X8]
	173 Call InputControl`1<TouchState>.get_value, X0
	174 Move X8, [X0+48]
	175 Move V1, [X0+16]
	176 Move V0, [X0+32]
	177 Move V2, [X0]
	178 Move [X31+64], X8
	179 Move [X31+32], V1
	180 Move [X31+40], V0
	181 Move [X31+1], V2
	182 Compare X20, 0
	183 JumpIfEqual {217}
	184 Move X8, 0x952000
	185 Move X8, [X8+2912]
	186 Move V0, [X31+16]
	187 Move V1, [X31+32]
	188 Move V2, [X31+3]
	189 Move X9, [X31+64]
	190 Move X3, [X8]
	191 Move [X31+80], V0
	192 Move [X31+88], V1
	193 Add X2, X31, 80
	194 Move D0, -1
	195 Move X0, X20
	196 Move X1, X21
	197 Move [X31+7], V2
	198 Move [X31+128], X9
	199 Call 0x2E12E94, X0, X1, X2, V0
	200 Move X8, [X24+40]
	201 Move X9, [X31+136]
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move X20, [X31+224]
	204 Move X19, [X31+232]
	205 Move X22, [X31+208]
	206 Move X21, [X31+216]
	207 Move X24, [X31+192]
	208 Move X23, [X31+200]
	209 Move X26, [X31+176]
	210 Move X25, [X31+184]
	211 Move X28, [X31+160]
	212 Move X27, [X31+168]
	213 Move X29, [X31+144]
	214 Move X30, [X31+152]
	215 Add X31, X31, 240
	216 Return 
	217 Call 0x1C17F20
	218 Call 0x3EB2B20

Method: System.Boolean ShouldRecordTouch(UnityEngine.InputSystem.InputControl control, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)

Disassembly:
	0x037F8FF0 STRB W8, [X22 + 0x3C5]
	0x037F8FF4 LDR X0, [X21]
	0x037F8FF8 LDR W8, [X0 + 0xE0]
	0x037F8FFC CBNZ W8, 0x37F9004
	0x037F9000 BL 0x1C16DFC
	0x037F9004 MOV X0, X20
	0x037F9008 BL 0x37F799C
	0x037F900C TBZ X0, 0x0, 0x37F9070
	0x037F9010 LDR X0, [X21]
	0x037F9014 LDR W8, [X0 + 0xE0]
	0x037F9018 CBNZ W8, 0x37F9020
	0x037F901C BL 0x1C16DFC
	0x037F9020 LDR X0, [X20]
	0x037F9024 LDR X8, [X20 + 0x10]
	0x037F9028 LDR V0, [X20]
	0x037F902C STR X8, [X31 + 0x50]
	0x037F9030 STR V0, [X31 + 0x4]
	0x037F9034 CBZ X0, 0x37F90B8
	0x037F9038 LDR X8, [X31 + 0x50]
	0x037F903C LDR V0, [X31 + 0x4]
	0x037F9040 ADD X1, X31, 0x0
	0x037F9044 STR X8, [X31 + 0x10]
	0x037F9048 ADD X8, X31, 0x20
	0x037F904C STR V0, [X31]
	0x037F9050 BL 0x37F86C0
	0x037F9054 LDP V1, V0, [X31 + 0x20]
	0x037F9058 LDP X22, X21, [X31 + 0x70]
	0x037F905C LDR X30, [X31 + 0x60]
	0x037F9060 STP V1, V0, [X19]
	0x037F9064 LDP X20, X19, [X31 + 0x80]
	0x037F9068 ADD X31, X31, 0x90
	0x037F906C RET
	0x037F9070 ADRP X0, 0x8FA000
	0x037F9074 LDR X0, [X0 + 0x5B0]
	0x037F9078 BL 0x1C16D08
	0x037F907C BL 0x1C16F10
	0x037F9080 MOV X19, X0
	0x037F9084 ADRP X0, 0x950000
	0x037F9088 LDR X0, [X0 + 0xBE8]
	0x037F908C BL 0x1C16D08
	0x037F9090 MOV X1, X0
	0x037F9094 MOV X0, X19
	0x037F9098 MOV X2, X31
	0x037F909C BL 0x337DF1C
	0x037F90A0 ADRP X0, 0x950000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xBEA000
	006 Move W8, [X21+939]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x923000
	014 Move X0, [X0+3352]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+939], W8
	018 Compare X20, 0
	019 JumpIfEqual {46}
	020 Move W8, [X20]
	021 Move W9, 0x4154
	022 NotImplemented "Instruction MOVK not yet implemented."
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W9, 0x5441
	025 NotImplemented "Instruction MOVK not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Compare X19, 0
	028 JumpIfEqual {52}
	029 Move X0, X19
	030 Move X1, X31
	031 Call InputControl.get_currentStatePtr, X0
	032 Move X8, 0x923000
	033 Move X8, [X8+3352]
	034 Move W20, [X19+20]
	035 Move X19, X0
	036 Move X8, [X8]
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Add X8, X20, X19
	043 Move W8, [X8+35]
	044 And W31, W8, 32
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Move W0, W31
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: System.Void OnTouchRecorded(UnityEngine.InputSystem.LowLevel.InputStateHistory/Record record)

Disassembly:
	0x037F90D8 TBNZ X8, 0x0, 0x37F90FC
	0x037F90DC ADRP X0, 0x950000
	0x037F90E0 LDR X0, [X0 + 0xBF8]
	0x037F90E4 BL 0x1C16CF4
	0x037F90E8 ADRP X0, 0x922000
	0x037F90EC LDR X0, [X0 + 0x628]
	0x037F90F0 BL 0x1C16CF4
	0x037F90F4 MOVZ W8, 0x1
	0x037F90F8 STRB W8, [X20 + 0x3C6]
	0x037F90FC LDR X0, [X19]
	0x037F9100 ADRP X20, 0x950000
	0x037F9104 LDR W8, [X0 + 0xE0]
	0x037F9108 LDR X20, [X20 + 0xBF8]
	0x037F910C CBNZ W8, 0x37F9118
	0x037F9110 BL 0x1C16DFC
	0x037F9114 LDR X0, [X19]
	0x037F9118 LDR X8, [X0 + 0xB8]
	0x037F911C ADD X0, X8, 0x110
	0x037F9120 BL 0x37F915C
	0x037F9124 LDR X8, [X19]
	0x037F9128 LDR X4, [X20]
	0x037F912C ADD X0, X31, 0x0
	0x037F9130 MOV W2, W31
	0x037F9134 LDR X8, [X8 + 0xB8]
	0x037F9138 LDR X1, [X8 + 0x128]
	0x037F913C LDR W3, [X8 + 0x134]
	0x037F9140 STP X31, X31, [X31]
	0x037F9144 BL 0x24FDFF4
	0x037F9148 LDP X0, X1, [X31]
	0x037F914C LDP X20, X19, [X31 + 0x20]
	0x037F9150 LDR X30, [X31 + 0x10]
	0x037F9154 ADD X31, X31, 0x30
	0x037F9158 RET
	0x037F915C SUB X31, X31, 0x130
	0x037F9160 STP X29, X30, [X31 + 0xD0]
	0x037F9164 STP X28, X27, [X31 + 0xE0]
	0x037F9168 STP X26, X25, [X31 + 0xF0]
	0x037F916C STP X24, X23, [X31 + 0x100]
	0x037F9170 STP X22, X21, [X31 + 0x110]
	0x037F9174 STP X20, X19, [X31 + 0x120]
	0x037F9178 ADRP X20, 0xBE8000
	0x037F917C LDRB W8, [X20 + 0x3DD]
	0x037F9180 MOV X19, X0
	0x037F9184 TBNZ X8, 0x0, 0x37F9214
	0x037F9188 ADRP X0, 0x950000
	0x037F918C LDR X0, [X0 + 0xC00]
	0x037F9190 BL 0x1C16CF4
	0x037F9194 ADRP X0, 0x950000
	0x037F9198 LDR X0, [X0 + 0xC08]
	0x037F919C BL 0x1C16CF4
	0x037F91A0 ADRP X0, 0x950000
	0x037F91A4 LDR X0, [X0 + 0xC10]
	0x037F91A8 BL 0x1C16CF4
	0x037F91AC ADRP X0, 0x950000
	0x037F91B0 LDR X0, [X0 + 0xC18]
	0x037F91B4 BL 0x1C16CF4
	0x037F91B8 ADRP X0, 0x950000
	0x037F91BC LDR X0, [X0 + 0xB70]
	0x037F91C0 BL 0x1C16CF4
	0x037F91C4 ADRP X0, 0x94B000
	0x037F91C8 LDR X0, [X0 + 0xF90]
	0x037F91CC BL 0x1C16CF4
	0x037F91D0 ADRP X0, 0x922000
	0x037F91D4 LDR X0, [X0 + 0xD48]
	0x037F91D8 BL 0x1C16CF4
	0x037F91DC ADRP X0, 0x950000
	0x037F91E0 LDR X0, [X0 + 0xC20]
	0x037F91E4 BL 0x1C16CF4
	0x037F91E8 ADRP X0, 0x922000
	0x037F91EC LDR X0, [X0 + 0x628]
	0x037F91F0 BL 0x1C16CF4
	0x037F91F4 ADRP X0, 0x950000
	0x037F91F8 LDR X0, [X0 + 0xB78]
	0x037F91FC BL 0x1C16CF4
	0x037F9200 ADRP X0, 0x94D000
	0x037F9204 LDR X0, [X0 + 0xC8]
	0x037F9208 BL 0x1C16CF4
	0x037F920C MOVZ W8, 0x1
	0x037F9210 STRB W8, [X20 + 0x3DD]
	0x037F9214 STR W31, [X31 + 0xAC]
	0x037F9218 STP X31, X31, [X31 + 0x90]
	0x037F921C STP X31, X31, [X31 + 0x78]
	0x037F9220 STR X31, [X31 + 0x88]
	0x037F9224 STP X31, X31, [X31 + 0x68]
	0x037F9228 LDRB W8, [X19 + 0x30]
	0x037F922C CBNZ W8, 0x37F96BC
	0x037F9230 LDR X0, [X19 + 0x38]
	0x037F9234 CBZ X0, 0x37F9264
	0x037F9238 MOV X1, X31
	0x037F923C BL 0x380DBDC
	0x037F9240 LDR X8, [X19 + 0x38]
	0x037F9244 CBZ X8, 0x37F96DC
	0x037F9248 STR W31, [X8 + 0x28]
	0x037F924C LDR X0, [X8 + 0x20]
	0x037F9250 ADRP X8, 0x950000
	0x037F9254 LDR X8, [X8 + 0xC08]
	0x037F9258 LDR X1, [X8]
	0x037F925C BL 0x2175AD8
	0x037F9260 B 0x37F92A4
	0x037F9264 ADRP X8, 0x950000
	0x037F9268 LDR X8, [X8 + 0xB70]
	0x037F926C LDR X0, [X8]
	0x037F9270 BL 0x1C16F10
	0x037F9274 ADRP X8, 0x950000
	0x037F9278 LDR X8, [X8 + 0xC18]
	0x037F927C MOV X1, X31
	0x037F9280 MOV X20, X0
	0x037F9284 LDR X2, [X8]
	0x037F9288 BL 0x2E11898
	0x037F928C CBZ X20, 0x37F96DC
	0x037F9290 MOVZ W1, 0xC
	0x037F9294 MOV X0, X20
	0x037F9298 MOV X2, X31
	0x037F929C BL 0x380CDF0
	0x037F92A0 STR X20, [X19 + 0x38]
	0x037F92A4 MOV X9, X19
	0x037F92A8 STR W31, [X9 + 0x24]!
	0x037F92AC LDR W8, [X9 + 0x4]
	0x037F92B0 STR X9, [X31 + 0x40]
	0x037F92B4 STRB W31, [X9 + 0xD]
	0x037F92B8 CMP W8, 0x1
	0x037F92BC B.LT 0x37F96B4
	0x037F92C0 ADRP X8, 0x94B000
	0x037F92C4 LDR X8, [X8 + 0xF90]
	0x037F92C8 MOV W10, W31
	0x037F92CC ADD X9, X19, 0x18
	0x037F92D0 STR X9, [X31 + 0x28]
	0x037F92D4 LDR X8, [X8]
	0x037F92D8 LDR X8, [X8 + 0xB8]
	0x037F92DC LDR W21, [X8]
	0x037F92E0 SUB W8, W21, 0x1
	0x037F92E4 STR W8, [X31 + 0x10]
	0x037F92E8 LDR X8, [X19 + 0x8]
	0x037F92EC CBZ X8, 0x37F96DC
	0x037F92F0 LDR W9, [X8 + 0x18]
	0x037F92F4 CMP W10, W9
	0x037F92F8 B.CS 0x37F96E0
	0x037F92FC ADD X26, X8, W10, 0x3, SXTW
	0x037F9300 LDR X8, [X26 + 0x20]!
	0x037F9304 CBZ X8, 0x37F96DC
	0x037F9308 LDR X8, [X8 + 0x20]
	0x037F930C STR W10, [X31 + 0x14]
	0x037F9310 CBZ X8, 0x37F96DC
	0x037F9314 STR X8, [X31 + 0x20]
	0x037F9318 LDR W8, [X8 + 0x44]
	0x037F931C STR W8, [X31 + 0x48]
	0x037F9320 CBZ W8, 0x37F96A0
	0x037F9324 LDR X8, [X31 + 0x40]
	0x037F9328 LDR W22, [X31 + 0x48]
	0x037F932C LDR X20, [X31 + 0x20]
	0x037F9330 MOV X2, X31
	0x037F9334 LDR W8, [X8]
	0x037F9338 SUBS W1, W22, 0x1
	0x037F933C MOV X0, X20
	0x037F9340 STR W8, [X31 + 0x3C]
	0x037F9344 BL 0x380D18C
	0x037F9348 MOV W1, W0
	0x037F934C MOV X0, X20
	0x037F9350 MOV X2, X31
	0x037F9354 STR W1, [X31 + 0x4C]
	0x037F9358 BL 0x380E878
	0x037F935C MOV X25, X0
	0x037F9360 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xBE9000
	009 Move W8, [X20+940]
	010 Move X19, X0
	011 Move [X31], X1
	012 Move [X31+8], X2
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {40}
	017 Move X0, 0x951000
	018 Move X0, [X0+2944]
	019 Call 0x1C17CF4
	020 Move X0, 0x94C000
	021 Move X0, [X0+3984]
	022 Call 0x1C17CF4
	023 Move X0, 0x923000
	024 Move X0, [X0+1576]
	025 Call 0x1C17CF4
	026 Move X0, 0x951000
	027 Move X0, [X0+2936]
	028 Call 0x1C17CF4
	029 Move X0, 0x951000
	030 Move X0, [X0+2952]
	031 Call 0x1C17CF4
	032 Move X0, 0x951000
	033 Move X0, [X0+2960]
	034 Call 0x1C17CF4
	035 Move X0, 0x951000
	036 Move X0, [X0+2968]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+940], W8
	040 Add X0, X31, 0
	041 Move X1, X31
	042 Call Record.get_recordIndex, X0
	043 Move X8, [X19+32]
	044 Compare X8, 0
	045 JumpIfEqual {178}
	046 Move W21, W0
	047 Move X0, X8
	048 Move W1, W21
	049 Move X2, X31
	050 Call InputStateHistory.GetRecordUnchecked, X0, X1
	051 Move X1, X31
	052 Move X22, X0
	053 Call RecordHeader.get_statePtrWithoutControlIndex, X0
	054 Compare X0, 0
	055 JumpIfEqual {178}
	056 Move X8, 0x94C000
	057 Move X8, [X8+3984]
	058 Move X23, 0x923000
	059 Move X20, X0
	060 Move X8, [X8]
	061 Move X8, [X8+184]
	062 Move W8, [X8]
	063 Move X23, [X23+1576]
	064 Move [X0+36], W8
	065 Move X0, [X23]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X23]
	071 Move X8, [X0+184]
	072 Move [X8+320], W31
	073 Move X0, [X19+32]
	074 Compare X0, 0
	075 JumpIfEqual {178}
	076 Move X1, X31
	077 Call InputStateHistory.get_bytesPerRecord, X0
	078 Move X8, [X23]
	079 Move X10, [X8+184]
	080 Add X8, X22, W0
	081 Subtract X8, X8, 12
	082 Move W9, [X10+316]
	083 Add W9, W9, 1
	084 Move [X10+316], W9
	085 Move [X8+8], W9
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 Move [X8], X9
	088 Move W8, [X20+32]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W8, [X20+35]
	091 Or W8, W8, 128
	092 Move [X20+35], W8
	093 Move X0, [X23]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {99}
	097 Call 0x1C17DFC
	098 Move X0, [X23]
	099 Move X8, 0x951000
	100 Move X8, [X8+2968]
	101 Move W9, 32
	102 Move X0, [X19+32]
	103 Compare X0, 0
	104 JumpIfEqual {178}
	105 Move W9, [X0+80]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Compare W21, 0
	108 JumpIfNotEqual {110}
	109 Move W21, [X0+72]
	110 Subtract W1, W21, 1
	111 Move X2, X31
	112 Call InputStateHistory.GetRecordUnchecked, X0, X1
	113 Move X1, X31
	114 Call RecordHeader.get_statePtrWithoutControlIndex, X0
	115 Compare X0, 0
	116 JumpIfEqual {178}
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction LDUR not yet implemented."
	119 Subtract V0, V0, V1
	120 Move [X20+12], D0
	121 NotImplemented "Instruction INVALID not yet implemented."
	122 Move TEMP, X8
	123 And TEMP, TEMP, -2147483648
	124 Compare TEMP, -2147483648
	125 JumpIfEqual {127}
	126 Move W9, W31
	127 Move W8, [X0+36]
	128 Move W9, [X20+36]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move TEMP, 127
	131 Not TEMP
	132 Move W8, TEMP
	133 NotImplemented "Instruction CSEL not yet implemented."
	134 Move W10, [X20+35]
	135 Move W8, [X20+32]
	136 And W10, W10, 127
	137 Or W9, W10, W9
	138 Move [X20+35], W9
	139 Subtract W9, W8, 3
	140 NotImplemented "Instruction CMP not yet implemented."
	141 NotImplemented "Instruction CMP not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X0, [X23]
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {149}
	147 Call 0x1C17DFC
	148 Move X0, [X23]
	149 Move X8, 0x951000
	150 Move X8, [X8+2960]
	151 Move W9, 192
	152 Move X0, [X23]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {158}
	156 Call 0x1C17DFC
	157 Move X0, [X23]
	158 Move X8, 0x951000
	159 Move X8, [X8+2952]
	160 Move W9, 112
	161 Move X10, 0x951000
	162 Move X10, [X10+2944]
	163 Move X11, [X0+184]
	164 Move X2, [X8]
	165 Move X1, X19
	166 Move X4, [X10]
	167 Add X0, X11, X9
	168 Move X3, X31
	169 Call DelegateHelpers.InvokeCallbacksSafe, X0, X1, X2, X3
	170 Move X20, [X31+48]
	171 Move X19, [X31+56]
	172 Move X22, [X31+32]
	173 Move X21, [X31+40]
	174 Move X30, [X31+16]
	175 Move X23, [X31+24]
	176 Add X31, X31, 64
	177 Return 
	178 Call 0x1C17F20

Method: UnityEngine.InputSystem.EnhancedTouch.Touch FindTouch(System.UInt32 uniqueId)

Disassembly:
	0x037F938C STR X9, [X31 + 0x18]
	0x037F9390 SUB W8, W0, W8
	0x037F9394 SXTW X8, W8
	0x037F9398 STR X8, [X31 + 0x30]
	0x037F939C CBZ W24, 0x37F93D8
	0x037F93A0 LDR W8, [X31 + 0x4C]
	0x037F93A4 SUBS W8, W8, 0x1
	0x037F93A8 B.MI 0x37F93BC
	0x037F93AC STR W8, [X31 + 0x4C]
	0x037F93B0 LDR X8, [X31 + 0x18]
	0x037F93B4 SUB X25, X25, X8
	0x037F93B8 B 0x37F93D8
	0x037F93BC LDR X0, [X31 + 0x20]
	0x037F93C0 MOV X2, X31
	0x037F93C4 LDR W8, [X0 + 0x48]
	0x037F93C8 SUB W1, W8, 0x1
	0x037F93CC STR W1, [X31 + 0x4C]
	0x037F93D0 BL 0x380E878
	0x037F93D4 MOV X25, X0
	0x037F93D8 MOV X0, X25
	0x037F93DC MOV X1, X31
	0x037F93E0 BL 0x380E480
	0x037F93E4 CBZ X0, 0x37F96DC
	0x037F93E8 LDR W8, [X0]
	0x037F93EC LDR W22, [X0 + 0x24]
	0x037F93F0 MOV X27, X0
	0x037F93F4 CMP W8, W20
	0x037F93F8 B.NE 0x37F940C
	0x037F93FC LDRB W0, [X27 + 0x20]
	0x037F9400 MOV X1, X31
	0x037F9404 BL 0x37C1390
	0x037F9408 TBZ X0, 0x0, 0x37F9430
	0x037F940C LDRB W0, [X27 + 0x20]
	0x037F9410 MOV X1, X31
	0x037F9414 BL 0x37C1390
	0x037F9418 TBZ X0, 0x0, 0x37F947C
	0x00000000 INVALID
	0x037F9420 TBNZ X8, 0x1F, 0x37F9464
	0x037F9424 CMP W22, W21
	0x037F9428 B.EQ 0x37F947C
	0x037F942C B 0x37F96A0
	0x037F9430 CMP W22, W21
	0x037F9434 B.NE 0x37F9690
	0x037F9438 LDRB W8, [X27 + 0x20]
	0x037F943C CMP W8, 0x1
	0x037F9440 B.NE 0x37F9690
	0x037F9444 LDR X10, [X31 + 0x60]
	0x037F9448 MOVZ W9, 0x1
	0x037F944C STRB W9, [X10 + 0x20]
	0x037F9450 LDUR X8, [X27 + 0x4]
	0x037F9454 STUR X31, [X10 + 0xC]
	0x037F9458 STUR X8, [X10 + 0x4]
	0x037F945C STRB W9, [X19 + 0x31]
	0x037F9460 B 0x37F9690
	0x037F9464 CMP W22, W21
	0x037F9468 B.EQ 0x37F947C
	0x037F946C LDR W8, [X27 + 0x24]
	0x037F9470 LDR W9, [X31 + 0x10]
	0x037F9474 CMP W8, W9
	0x037F9478 B.NE 0x37F96A0
	0x037F947C LDR X0, [X19 + 0x38]
	0x037F9480 CBZ X0, 0x37F96DC
	0x037F9484 ADD X1, X31, 0xAC
	0x037F9488 MOV X2, X31
	0x037F948C BL 0x380DC58
	0x037F9490 MOV X1, X31
	0x037F9494 MOV X28, X0
	0x037F9498 BL 0x380E488
	0x037F949C LDR X8, [X19 + 0x38]
	0x037F94A0 CBZ X8, 0x37F96DC
	0x037F94A4 MOV X20, X0
	0x037F94A8 MOV X0, X8
	0x037F94AC MOV X1, X31
	0x037F94B0 BL 0x380E804
	0x037F94B4 CBZ X25, 0x37F96DC
	0x037F94B8 CBZ X28, 0x37F96DC
	0x037F94BC LDR V0, [X25]
	0x037F94C0 STR D0, [X28]
	0x037F94C4 LDR X9, [X19 + 0x38]
	0x037F94C8 CBZ X9, 0x37F96DC
	0x037F94CC LDR X8, [X26]
	0x037F94D0 CBZ X8, 0x37F96DC
	0x037F94D4 LDR X8, [X8 + 0x20]
	0x037F94D8 STR X20, [X31 + 0x60]
	0x037F94DC CBZ X8, 0x37F96DC
	0x037F94E0 LDR X10, [X31 + 0x30]
	0x037F94E4 STR X25, [X31 + 0x50]
	0x037F94E8 MOV X1, X31
	0x037F94EC ADD X20, X9, 0x20
	0x037F94F0 ADD X25, X25, X10
	0x037F94F4 ADD X10, X28, W0, SXTW
	0x037F94F8 MOV X0, X8
	0x037F94FC SUB X29, X10, 0xC
	0x037F9500 ADD X23, X9, 0x28
	0x037F9504 BL 0x380D014
	0x037F9508 ADRP X8, 0x922000
	0x037F950C LDR X8, [X8 + 0xD48]
	0x037F9510 STP X0, X1, [X31 + 0x68]
	0x037F9514 ADD X0, X31, 0x68
	0x037F9518 MOV W1, W31
	0x037F951C LDR X2, [X8]
	0x037F9520 BL 0x24FDB3C
	0x037F9524 ADRP X8, 0x950000
	0x037F9528 LDR X8, [X8 + 0xC00]
	0x037F952C MOV X2, X0
	0x037F9530 MOVZ W3, 0xA
	0x037F9534 MOV X0, X20
	0x037F9538 LDR X4, [X8]
	0x037F953C MOV X1, X23
	0x037F9540 BL 0x2174728
	0x037F9544 LDR X20, [X31 + 0x60]
	0x037F9548 STR W0, [X28 + 0xC]
	0x037F954C MOVZ W2, 0x38
	0x037F9550 MOV X1, X27
	0x037F9554 MOV X0, X20
	0x037F9558 MOV X3, X31
	0x037F955C BL 0x3BFF954
	0x037F9560 MOVZ W2, 0xC
	0x037F9564 MOV X0, X29
	0x037F9568 MOV X1, X25
	0x037F956C MOV X3, X31
	0x037F9570 BL 0x3BFF954
	0x037F9574 CMP W22, W21
	0x037F9578 B.EQ 0x37F95B0
	0x037F957C LDRB W8, [X27 + 0x20]
	0x037F9580 SUB W9, W8, 0x1
	0x037F9584 AND W9, W9, 0xFF
	0x037F9588 CMP W9, 0x1
	0x037F958C B.HI 0x37F95B0
	0x037F9590 CMP W8, 0x2
	0x037F9594 B.NE 0x37F95CC
	0x00000000 INVALID
	0x037F959C TBZ X8, 0x1F, 0x37F95CC
	0x037F95A0 LDR W8, [X27 + 0x24]
	0x037F95A4 LDR W9, [X31 + 0x10]
	0x037F95A8 CMP W8, W9
	0x037F95AC B.NE 0x37F95CC
	0x037F95B0 CMP W22, W21
	0x037F95B4 B.EQ 0x37F95DC
	0x00000000 INVALID
	0x037F95BC TBNZ X8, 0x1F, 0x37F95DC
	0x037F95C0 CBZ X20, 0x37F96DC
	0x037F95C4 MOV X8, X31
	0x037F95C8 B 0x37F95E8
	0x037F95CC MOVZ W9, 0x5
	0x037F95D0 MOV X8, X31
	0x037F95D4 STRB W9, [X20 + 0x20]
	0x037F95D8 B 0x37F95E8
	0x037F95DC CBZ X29, 0x37F96DC
	0x037F95E0 CBZ X20, 0x37F96DC
	0x037F95E4 LDR X8, [X29]
	0x037F95E8 STUR X8, [X20 + 0xC]
	0x037F95EC ADRP X8, 0x950000
	0x037F95F0 LDR X25, [X31 + 0x50]
	0x037F95F4 LDR X1, [X19 + 0x38]
	0x037F95F8 LDR W2, [X31 + 0xAC]
	0x037F95FC LDR X8, [X8 + 0xC20]
	0x037F9600 ADD X0, X31, 0x90
	0x037F9604 MOV X3, X28
	0x037F9608 LDR X4, [X8]
	0x037F960C BL 0x25C197C
	0x037F9610 ADRP X8, 0x922000
	0x037F9614 LDR X8, [X8 + 0x628]
	0x037F9618 LDR X20, [X26]
	0x037F961C LDR V0, [X31 + 0x9]
	0x037F9620 LDR X0, [X8]
	0x037F9624 LDR W8, [X0 + 0xE0]
	0x037F9628 CBNZ W8, 0x37F9638
	0x037F962C STR V0, [X31 + 0x5]
	0x037F9630 BL 0x1C16DFC
	0x037F9634 LDR V0, [X31 + 0x5]
	0x037F9638 STR X20, [X31 + 0x78]
	0x037F963C STUR V0, [X31 + 0x80]
	0x037F9640 ADRP X9, 0x950000
	0x037F9644 LDUR V0, [X31 + 0x78]
	0x037F9648 LDR X8, [X31 + 0x88]
	0x037F964C LDR X9, [X9 + 0xC10]
	0x037F9650 LDR X0, [X31 + 0x28]
	0x037F9654 LDR X1, [X31 + 0x40]
	0x037F9658 LDR W2, [X31 + 0x3C]
	0x037F965C LDR X5, [X9]
	0x037F9660 ADD X3, X31, 0xB0
	0x037F9664 MOVZ W4, 0xA
	0x037F9668 STR V0, [X31 + 0xB]
	0x037F966C STR X8, [X31 + 0xC0]
	0x037F9670 BL 0x217A598
	0x037F9674 LDR W20, [X27]
	0x037F9678 ADD X0, X31, 0x78
	0x037F967C BL 0x37F8998
	0x037F9680 CMP W0, 0x5
	0x037F9684 B.EQ 0x37F9690
	0x037F9688 MOVZ W8, 0x1
	0x037F968C STRB W8, [X19 + 0x31]
	0x037F9690 LDR W8, [X31 + 0x48]
	0x037F9694 ADD W24, W24, 0x1
	0x037F9698 CMP W8, W24
	0x037F969C B.NE 0x37F939C
	0x037F96A0 LDR W10, [X31 + 0x14]
	0x037F96A4 LDR W8, [X19 + 0x28]
	0x037F96A8 ADD W10, W10, 0x1
	0x037F96AC CMP W10, W8
	0x037F96B0 B.LT 0x37F92E8
	0x037F96B4 MOVZ W8, 0x1
	0x037F96B8 STRB W8, [X19 + 0x30]
	0x037F96BC LDP X20, X19, [X31 + 0x120]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X19, 0xBE9000
	012 Move W9, [X19+941]
	013 Move W22, W1
	014 Move X21, X0
	015 Move X20, X8
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x8FB000
	021 Move X0, [X0+3584]
	022 Call 0x1C17CF4
	023 Move X0, 0x951000
	024 Move X0, [X0+2976]
	025 Call 0x1C17CF4
	026 Move X0, 0x8FB000
	027 Move X0, [X0+3608]
	028 Call 0x1C17CF4
	029 Move X0, 0x951000
	030 Move X0, [X0+2984]
	031 Call 0x1C17CF4
	032 Move X0, 0x951000
	033 Move X0, [X0+2992]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X19+941], W8
	037 Move [X31+16], X31
	038 Move [X31+24], X31
	039 Move X0, [X21+32]
	040 Compare X0, 0
	041 JumpIfEqual {171}
	042 Move X8, 0x951000
	043 Move X8, [X8+2984]
	044 Move X23, 0x8FB000
	045 Move X1, [X8]
	046 Move X23, [X23+3584]
	047 Call 0x2E1310C, X0
	048 Move X19, X0
	049 Compare X0, 0
	050 JumpIfEqual {172}
	051 Move X24, 0x8FB000
	052 Move X25, 0x951000
	053 Move X26, 0x951000
	054 Move X24, [X24+3608]
	055 Move X25, [X25+2976]
	056 Move X26, [X26+2992]
	057 Move X8, [X19]
	058 Move X1, [X24]
	059 NotImplemented "Instruction LDRH not yet implemented."
	060 Compare X9, 0
	061 JumpIfEqual {68}
	062 Move X10, [X8+176]
	063 Add X10, X10, 8
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Subtract X9, X9, 1
	067 Add X10, X10, 16
	068 Move X0, X19
	069 Move W2, W31
	070 Call 0x1C5D788
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 Add X8, X8, X9
	073 Add X0, X8, 312
	074 Move X8, [X0]
	075 Move X1, [X0+8]
	076 Move X0, X19
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {119}
	082 Move X8, [X19]
	083 Move X1, [X25]
	084 NotImplemented "Instruction LDRH not yet implemented."
	085 Compare X9, 0
	086 JumpIfEqual {93}
	087 Move X10, [X8+176]
	088 Add X10, X10, 8
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Subtract X9, X9, 1
	092 Add X10, X10, 16
	093 Move X0, X19
	094 Move W2, W31
	095 Call 0x1C5D788
	096 NotImplemented "Instruction LDRSW not yet implemented."
	097 Add X8, X8, X9
	098 Add X0, X8, 312
	099 Move X8, [X0]
	100 Move X1, [X0+8]
	101 Move X0, X19
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Move X8, [X26]
	104 Move [X31+16], X0
	105 Move [X31+24], X1
	106 Add X0, X31, 16
	107 Move X1, X8
	108 Call 0x25C2C14, X0
	109 Compare X0, 0
	110 JumpIfEqual {170}
	111 Move W8, [X0+8]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move V0, [X31+1]
	114 Move X22, X31
	115 Move W24, 4
	116 Move [X31], V0
	117 Compare X19, 0
	118 JumpIfNotEqual {126}
	119 NotImplemented "Instruction MOVI not yet implemented."
	120 Move X22, X31
	121 Move X21, X31
	122 Move [X31], V0
	123 Move W24, 5
	124 Compare X19, 0
	125 JumpIfEqual {147}
	126 Move X8, [X19]
	127 Move X1, [X23]
	128 NotImplemented "Instruction LDRH not yet implemented."
	129 Compare X9, 0
	130 JumpIfEqual {137}
	131 Move X10, [X8+176]
	132 Add X10, X10, 8
	133 NotImplemented "Instruction LDUR not yet implemented."
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Subtract X9, X9, 1
	136 Add X10, X10, 16
	137 Move X0, X19
	138 Move W2, W31
	139 Call 0x1C5D788
	140 NotImplemented "Instruction LDRSW not yet implemented."
	141 Add X8, X8, X9
	142 Add X0, X8, 312
	143 Move X8, [X0]
	144 Move X1, [X0+8]
	145 Move X0, X19
	146 NotImplemented "Instruction BLR not yet implemented."
	147 Compare X22, 0
	148 JumpIfNotEqual {173}
	149 NotImplemented "Instruction CMP not yet implemented."
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Compare W24, 0
	152 JumpIfNotEqual {159}
	153 Move [X20], X31
	154 Move [X20+8], X31
	155 Move [X20+16], X31
	156 Move V0, [X31]
	157 Move [X20], X21
	158 Move [X20+8], V0
	159 Move X20, [X31+96]
	160 Move X19, [X31+104]
	161 Move X22, [X31+80]
	162 Move X21, [X31+88]
	163 Move X24, [X31+64]
	164 Move X23, [X31+72]
	165 Move X26, [X31+48]
	166 Move X25, [X31+56]
	167 Move X30, [X31+32]
	168 Add X31, X31, 112
	169 Return X0
	170 Call 0x1C17F20
	171 Call 0x1C17F20
	172 Call 0x1C17F20
	173 Move X0, X22
	174 Call 0x1C17F18
	175 Move X21, X0
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X0, X21
	178 Call 0x3EB2AD0
	179 Move X22, [X0]
	180 Call 0x3EB2AE0
	181 Move X21, X31
	182 Move W24, W31
	183 NotImplemented "Instruction MOVI not yet implemented."
	184 Move X22, X31
	185 Move X21, X0
	186 Compare X19, 0
	187 JumpIfEqual {209}
	188 Move X8, [X19]
	189 Move X1, [X23]
	190 NotImplemented "Instruction LDRH not yet implemented."
	191 Compare X9, 0
	192 JumpIfEqual {199}
	193 Move X10, [X8+176]
	194 Add X10, X10, 8
	195 NotImplemented "Instruction LDUR not yet implemented."
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Subtract X9, X9, 1
	198 Add X10, X10, 16
	199 Move X0, X19
	200 Move W2, W31
	201 Call 0x1C5D788
	202 NotImplemented "Instruction LDRSW not yet implemented."
	203 Add X8, X8, X9
	204 Add X0, X8, 312
	205 Move X8, [X0]
	206 Move X1, [X0+8]
	207 Move X0, X19
	208 NotImplemented "Instruction BLR not yet implemented."
	209 Compare X22, 0
	210 JumpIfNotEqual {213}
	211 Move X0, X21
	212 Call 0x1D2D690
	213 Move X0, X22
	214 Call 0x1C17F18
	215 Call 0x1991590

Method: UnityEngine.InputSystem.EnhancedTouch.TouchHistory GetTouchHistory(UnityEngine.InputSystem.EnhancedTouch.Touch touch)

Disassembly:
	0x037F96C0 LDP X22, X21, [X31 + 0x110]
	0x037F96C4 LDP X24, X23, [X31 + 0x100]
	0x037F96C8 LDP X26, X25, [X31 + 0xF0]
	0x037F96CC LDP X28, X27, [X31 + 0xE0]
	0x037F96D0 LDP X29, X30, [X31 + 0xD0]
	0x037F96D4 ADD X31, X31, 0x130
	0x037F96D8 RET
	0x037F96DC BL 0x1C16F20
	0x037F96E0 BL 0x1C16F28
	0x037F96E4 SUB X31, X31, 0x30
	0x037F96E8 STR X30, [X31 + 0x10]
	0x037F96EC STP X20, X19, [X31 + 0x20]
	0x037F96F0 ADRP X20, 0xBE8000
	0x037F96F4 ADRP X19, 0x922000
	0x037F96F8 LDRB W8, [X20 + 0x3C7]
	0x037F96FC LDR X19, [X19 + 0x628]
	0x037F9700 TBNZ X8, 0x0, 0x37F9724
	0x037F9704 ADRP X0, 0x950000
	0x037F9708 LDR X0, [X0 + 0xC28]
	0x037F970C BL 0x1C16CF4
	0x037F9710 ADRP X0, 0x922000
	0x037F9714 LDR X0, [X0 + 0x628]
	0x037F9718 BL 0x1C16CF4
	0x037F971C MOVZ W8, 0x1
	0x037F9720 STRB W8, [X20 + 0x3C7]
	0x037F9724 LDR X0, [X19]
	0x037F9728 ADRP X20, 0x950000
	0x037F972C LDR W8, [X0 + 0xE0]
	0x037F9730 LDR X20, [X20 + 0xC28]
	0x037F9734 CBNZ W8, 0x37F9740
	0x037F9738 BL 0x1C16DFC
	0x037F973C LDR X0, [X19]
	0x037F9740 LDR X8, [X0 + 0xB8]
	0x037F9744 LDR X4, [X20]
	0x037F9748 ADD X0, X31, 0x0
	0x037F974C MOV W2, W31
	0x037F9750 LDR X1, [X8 + 0x118]
	0x037F9754 LDR W3, [X8 + 0x138]
	0x037F9758 STP X31, X31, [X31]
	0x037F975C BL 0x24FD82C
	0x037F9760 LDP X0, X1, [X31]
	0x037F9764 LDP X20, X19, [X31 + 0x20]
	0x037F9768 LDR X30, [X31 + 0x10]
	0x037F976C ADD X31, X31, 0x30
	0x037F9770 RET
	0x037F9774 SUB X31, X31, 0x30
	0x037F9778 STR X30, [X31 + 0x10]
	0x037F977C STP X20, X19, [X31 + 0x20]
	0x037F9780 ADRP X20, 0xBE8000
	0x037F9784 ADRP X19, 0x922000
	0x037F9788 LDRB W8, [X20 + 0x3C8]
	0x037F978C LDR X19, [X19 + 0x628]
	0x037F9790 TBNZ X8, 0x0, 0x37F97B4
	0x037F9794 ADRP X0, 0x950000
	0x037F9798 LDR X0, [X0 + 0xC28]
	0x037F979C BL 0x1C16CF4
	0x037F97A0 ADRP X0, 0x922000
	0x037F97A4 LDR X0, [X0 + 0x628]
	0x037F97A8 BL 0x1C16CF4
	0x037F97AC MOVZ W8, 0x1
	0x037F97B0 STRB W8, [X20 + 0x3C8]
	0x037F97B4 LDR X0, [X19]
	0x037F97B8 ADRP X20, 0x950000
	0x037F97BC LDR W8, [X0 + 0xE0]
	0x037F97C0 LDR X20, [X20 + 0xC28]
	0x037F97C4 CBNZ W8, 0x37F97D0
	0x037F97C8 BL 0x1C16DFC
	0x037F97CC LDR X0, [X19]
	0x037F97D0 LDR X8, [X0 + 0xB8]
	0x037F97D4 ADD X0, X8, 0x110
	0x037F97D8 BL 0x37F9814
	0x037F97DC LDR X8, [X19]
	0x037F97E0 LDR X4, [X20]
	0x037F97E4 ADD X0, X31, 0x0
	0x037F97E8 MOV W2, W31
	0x037F97EC LDR X8, [X8 + 0xB8]
	0x037F97F0 LDR X1, [X8 + 0x120]
	0x037F97F4 LDR W3, [X8 + 0x130]
	0x037F97F8 STP X31, X31, [X31]
	0x037F97FC BL 0x24FD82C
	0x037F9800 LDP X0, X1, [X31]
	0x037F9804 LDP X20, X19, [X31 + 0x20]
	0x037F9808 LDR X30, [X31 + 0x10]
	0x037F980C ADD X31, X31, 0x30
	0x037F9810 RET
	0x037F9814 SUB X31, X31, 0x80
	0x037F9818 STP X30, X25, [X31 + 0x40]
	0x037F981C STP X24, X23, [X31 + 0x50]
	0x037F9820 STP X22, X21, [X31 + 0x60]
	0x037F9824 STP X20, X19, [X31 + 0x70]
	0x037F9828 ADRP X20, 0xBE8000
	0x037F982C LDRB W8, [X20 + 0x3DC]
	0x037F9830 MOV X19, X0
	0x037F9834 TBNZ X8, 0x0, 0x37F9858
	0x037F9838 ADRP X0, 0x950000
	0x037F983C LDR X0, [X0 + 0xC30]
	0x037F9840 BL 0x1C16CF4
	0x037F9844 ADRP X0, 0x922000
	0x037F9848 LDR X0, [X0 + 0x628]
	0x037F984C BL 0x1C16CF4
	0x037F9850 MOVZ W8, 0x1
	0x037F9854 STRB W8, [X20 + 0x3DC]
	0x037F9858 MOV X20, X19
	0x037F985C STP X31, X31, [X31 + 0x20]
	0x037F9860 STR X31, [X31 + 0x30]
	0x037F9864 STR W31, [X20 + 0x20]!
	0x037F9868 LDR W8, [X20 + 0x8]
	0x037F986C CMP W8, 0x1
	0x037F9870 B.LT 0x37F990C
	0x037F9874 ADRP X24, 0x922000
	0x037F9878 ADRP X25, 0x950000
	0x037F987C LDR X24, [X24 + 0x628]
	0x037F9880 LDR X25, [X25 + 0xC30]
	0x037F9884 MOV X23, X31
	0x037F9888 ADD X21, X19, 0x10
	0x037F988C LDR X8, [X19 + 0x8]
	0x037F9890 CBZ X8, 0x37F9924
	0x037F9894 LDR W9, [X8 + 0x18]
	0x037F9898 CMP W23, W9
	0x037F989C B.CS 0x37F9928
	0x037F98A0 ADD X8, X8, X23, 0x3, LSL
	0x037F98A4 LDR X22, [X8 + 0x20]
	0x037F98A8 CBZ X22, 0x37F9924
	0x037F98AC ADD X8, X31, 0x8
	0x037F98B0 MOV X0, X22
	0x037F98B4 BL 0x37F78A0
	0x037F98B8 LDR X8, [X31 + 0x18]
	0x037F98BC LDUR V0, [X31 + 0x8]
	0x037F98C0 LDR X0, [X24]
	0x037F98C4 STR X8, [X31 + 0x30]
	0x037F98C8 STR V0, [X31 + 0x2]
	0x037F98CC LDR W8, [X0 + 0xE0]
	0x037F98D0 CBNZ W8, 0x37F98D8
	0x037F98D4 BL 0x1C16DFC
	0x037F98D8 ADD X0, X31, 0x20
	0x037F98DC BL 0x37F799C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+64], X26
	004 Move [X31+72], X25
	005 Move [X31+80], X24
	006 Move [X31+88], X23
	007 Move [X31+96], X22
	008 Move [X31+104], X21
	009 Move [X31+112], X20
	010 Move [X31+120], X19
	011 Move X22, 0xBE9000
	012 Move W9, [X22+942]
	013 Move X21, X1
	014 Move X20, X0
	015 Move X19, X8
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0x951000
	021 Move X0, [X0+3000]
	022 Call 0x1C17CF4
	023 Move X0, 0x951000
	024 Move X0, [X0+3008]
	025 Call 0x1C17CF4
	026 Move X0, 0x951000
	027 Move X0, [X0+3016]
	028 Call 0x1C17CF4
	029 Move X0, 0x951000
	030 Move X0, [X0+3024]
	031 Call 0x1C17CF4
	032 Move X0, 0x951000
	033 Move X0, [X0+2856]
	034 Call 0x1C17CF4
	035 Move X0, 0x923000
	036 Move X0, [X0+1576]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X22+942], W8
	040 Move [X31+32], X31
	041 Move [X31+40], X31
	042 Move X8, [X21+8]
	043 Move X9, [X20+32]
	044 Move X22, 0x923000
	045 Move X22, [X22+1576]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X22]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X21
	053 Call Touch.get_uniqueId, X0
	054 Move W1, W0
	055 Add X8, X31, 8
	056 Move X0, X20
	057 Call Finger.FindTouch, X0, X1
	058 Move X8, [X31+24]
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 Move X0, X21
	061 Move [X21+16], X8
	062 Move [X21], V0
	063 Call Touch.get_valid, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {154}
	068 Move X0, [X22]
	069 Move X22, 0x951000
	070 Move W8, [X0+224]
	071 Move X22, [X22+3008]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X21
	076 Call Touch.get_touchId, X0
	077 Move X1, [X22]
	078 Add X24, X21, 8
	079 Move W23, W0
	080 Move X0, X24
	081 Call 0x25C256C, X0
	082 Move W22, W0
	083 Move X0, X21
	084 Call Touch.get_phase, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X25, 0x951000
	087 Move X25, [X25+3024]
	088 Move X0, X24
	089 Move X1, [X25]
	090 Call 0x25C289C, X0
	091 Move X24, 0x951000
	092 Move X24, [X24+2856]
	093 Move [X31+32], X0
	094 Move [X31+40], X1
	095 Add X0, X31, 32
	096 Move X8, [X24]
	097 Move X1, X8
	098 Call 0x25C2504, X0
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {154}
	103 Move X26, 0x951000
	104 Move X26, [X26+3000]
	105 Move W21, W31
	106 Move X1, [X26]
	107 Add X0, X31, 32
	108 Call 0x25C2A94, X0
	109 Compare X0, 0
	110 JumpIfEqual {168}
	111 Move W8, [X0]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W8, [X0+32]
	114 Add W21, W21, 1
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X1, [X25]
	117 Add X0, X31, 32
	118 Call 0x25C289C, X0
	119 Move X8, [X24]
	120 Move [X31+32], X0
	121 Move [X31+40], X1
	122 Add X0, X31, 32
	123 Move X1, X8
	124 Call 0x25C2504, X0
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfEqual {106}
	129 Compare W21, 0
	130 JumpIfEqual {154}
	131 Move X8, [X20+32]
	132 Move [X19+16], X31
	133 Move [X19+24], X31
	134 Move [X19], X8
	135 Move [X19+8], X20
	136 Compare X8, 0
	137 JumpIfEqual {168}
	138 Move W10, [X8+84]
	139 Subtract W9, W22, 1
	140 Move [X19+24], W10
	141 Move TEMP, X21
	142 And TEMP, TEMP, -2147483648
	143 Compare TEMP, -2147483648
	144 JumpIfNotEqual {146}
	145 Move W21, [X8+68]
	146 Move [X19+16], W21
	147 Move TEMP, X9
	148 And TEMP, TEMP, -2147483648
	149 Compare TEMP, -2147483648
	150 JumpIfNotEqual {153}
	151 Move W8, [X8+68]
	152 Subtract W9, W8, 1
	153 Move [X19+20], W9
	154 NotImplemented "Instruction MOVI not yet implemented."
	155 Move [X19], V0
	156 Move [X19+8], V0
	157 Move X20, [X31+112]
	158 Move X19, [X31+120]
	159 Move X22, [X31+96]
	160 Move X21, [X31+104]
	161 Move X24, [X31+80]
	162 Move X23, [X31+88]
	163 Move X26, [X31+64]
	164 Move X25, [X31+72]
	165 Move X30, [X31+48]
	166 Add X31, X31, 128
	167 Return X0
	168 Call 0x1C17F20

