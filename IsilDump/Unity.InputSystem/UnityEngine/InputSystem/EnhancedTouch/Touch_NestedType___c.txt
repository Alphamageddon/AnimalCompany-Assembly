Type: UnityEngine.InputSystem.EnhancedTouch.Touch/<>c

Method: System.Void .cctor()

Disassembly:
	0x037FB848 STR W31, [X31 + 0x7C]
	0x037FB84C STP V0, V0, [X22 + 0x50]
	0x037FB850 STP V0, V0, [X22 + 0x30]
	0x037FB854 STP V0, V0, [X22 + 0x10]
	0x037FB858 STR V0, [X22]
	0x037FB85C LDR X0, [X20 + 0x30]
	0x037FB860 LDR W2, [X20 + 0x28]
	0x037FB864 LDR X3, [X21]
	0x037FB868 MOV X1, X23
	0x037FB86C BL 0x2179B8C
	0x037FB870 CBZ X19, 0x37FBC08
	0x037FB874 MOV W21, W0
	0x037FB878 TBNZ X0, 0x1F, 0x37FBC08
	0x037FB87C LDR W22, [X19]
	0x037FB880 MOVZ W8, 0x4154
	0x037FB884 MOVK W8, 0x53540000
	0x037FB888 CMP W22, W8
	0x037FB88C B.EQ 0x37FB8A0
	0x037FB890 MOVZ W8, 0x5441
	0x037FB894 MOVK W8, 0x444C0000
	0x037FB898 CMP W22, W8
	0x037FB89C B.NE 0x37FBC08
	0x037FB8A0 LDR X8, [X20 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xBE7000
	005 Move X20, 0x94F000
	006 Move W8, [X19+990]
	007 Move X20, [X20+3304]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x94F000
	013 Move X0, [X0+3304]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+990], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x037FB8A4 CBZ X8, 0x37FBA28
	0x037FB8A8 LDR W9, [X8 + 0x18]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <SaveAndResetState>b__80_0(ref UnityEngine.InputSystem.EnhancedTouch.Touch/GlobalState state)

Disassembly:
	0x037FB8AC CMP W21, W9
	0x037FB8B0 B.CS 0x37FBC28
	0x037FB8B4 MOV W26, W21
	0x037FB8B8 ADD X8, X8, X26, 0x3, LSL
	0x037FB8BC LDR X27, [X8 + 0x20]
	0x037FB8C0 CBZ X27, 0x37FBA28
	0x037FB8C4 LDR X25, [X27 + 0x170]
	0x037FB8C8 MOV X1, X19
	0x037FB8CC MOV X2, X22
	0x037FB8D0 MOV X3, X31
	0x037FB8D4 MOV X0, X25
	0x037FB8D8 BL 0x3774680
	0x037FB8DC MOV X24, X0
	0x037FB8E0 CBZ X0, 0x37FB91C
	0x037FB8E4 CBZ X25, 0x37FBA28
	0x037FB8E8 ADRP X8, 0x94E000
	0x037FB8EC LDR X28, [X20 + 0x38]
	0x037FB8F0 LDR X8, [X8 + 0xD98]
	0x037FB8F4 MOV X0, X25
	0x037FB8F8 MOV X1, X24
	0x037FB8FC LDR X2, [X8]
	0x037FB900 BL 0x2E096C0
	0x037FB904 CBZ X28, 0x37FBA28
	0x037FB908 LDR W8, [X28 + 0x18]
	0x037FB90C CMP W21, W8
	0x037FB910 B.CS 0x37FBC28
	0x037FB914 ADD X8, X28, X26, 0x3, LSL
	0x037FB918 STP S0, S1, [X8 + 0x20]
	0x037FB91C LDR X25, [X27 + 0x198]
	0x037FB920 MOV X1, X19
	0x037FB924 MOV X2, X22
	0x037FB928 MOV X3, X31
	0x037FB92C MOV X0, X25

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+336], X29
	003 Move [X31+352], X30
	004 Move [X31+360], X21
	005 Move [X31+368], X20
	006 Move [X31+376], X19
	007 Move X21, 0xBE7000
	008 Move X20, 0x921000
	009 Move W8, [X21+991]
	010 Move X20, [X20+1576]
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x921000
	017 Move X0, [X0+1576]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+991], W8
	021 Add X0, X31, 0
	022 Move W2, 336
	023 Move X1, X19
	024 Call 0x3EB2AC0
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X0, [X0+184]
	032 Add X1, X31, 0
	033 Move W2, 336
	034 Call 0x3EB2AC0
	035 Move X20, [X31+368]
	036 Move X19, [X31+376]
	037 Move X30, [X31+352]
	038 Move X21, [X31+360]
	039 Move X29, [X31+336]
	040 Add X31, X31, 384
	041 Return 

Method: System.Void <SaveAndResetState>b__80_1()

Disassembly:
	0x037FB930 BL 0x3774680

ISIL:
	001 Return 

