Type: UnityEngine.InputSystem.EnhancedTouch.TouchHistory

Method: System.Void .ctor(UnityEngine.InputSystem.EnhancedTouch.Finger finger, UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> history, System.Int32 startIndex = -1, System.Int32 count = -1)

Disassembly:
	0x037F8C60 STRB W8, [X20 + 0x3B6]
	0x037F8C64 LDR X0, [X21]
	0x037F8C68 LDR W8, [X0 + 0xE0]
	0x037F8C6C CBNZ W8, 0x37F8C74
	0x037F8C70 BL 0x1C16DFC
	0x037F8C74 MOV X0, X19
	0x037F8C78 BL 0x37F89FC
	0x037F8C7C LDP S0, S1, [X0 + 0x18]
	0x037F8C80 LDP X20, X19, [X31 + 0x10]
	0x037F8C84 LDP X30, X21, [X31], #0x20
	0x037F8C88 RET
	0x037F8C8C STP X30, X21, [X31 - 0x20]!
	0x037F8C90 STP X20, X19, [X31 + 0x10]
	0x037F8C94 ADRP X20, 0xBE9000
	0x037F8C98 ADRP X21, 0x923000

ISIL:
	001 Move [X31-16], X30
	002 Move [X0], X2
	003 Move [X0+8], X1
	004 Compare X2, 0
	005 JumpIfEqual {23}
	006 Move W8, [X2+84]
	007 Move [X0+24], W8
	008 Move TEMP, X4
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfNotEqual {13}
	012 Move W4, [X2+68]
	013 Move [X0+16], W4
	014 Move TEMP, X3
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfNotEqual {20}
	018 Move W8, [X2+68]
	019 Subtract W3, W8, 1
	020 Move [X0+20], W3
	021 Move X30, [X31+16]
	022 Return 
	023 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.EnhancedTouch.Touch> GetEnumerator()

Disassembly:
	0x037FB934 CBZ X0, 0x37FB970
	0x037FB938 CBZ X25, 0x37FBA28
	0x037FB93C ADRP X8, 0x94E000
	0x037FB940 LDR X27, [X20 + 0x40]
	0x037FB944 LDR X8, [X8 + 0xD90]
	0x037FB948 MOV X1, X0
	0x037FB94C MOV X0, X25
	0x037FB950 LDR X2, [X8]
	0x037FB954 BL 0x2E00AE0
	0x037FB958 CBZ X27, 0x37FBA28
	0x037FB95C LDR W8, [X27 + 0x18]
	0x037FB960 CMP W21, W8
	0x037FB964 B.CS 0x37FBC28
	0x037FB968 ADD X8, X27, X26, 0x2, LSL
	0x037FB96C STR W0, [X8 + 0x20]
	0x037FB970 LDR X8, [X20 + 0x48]
	0x037FB974 CBZ X8, 0x37FBA28
	0x037FB978 ADRP X28, 0x94A000
	0x037FB97C ADRP X27, 0x920000
	0x037FB980 LDR X28, [X28 + 0xF88]
	0x037FB984 LDR X27, [X27 + 0xC90]
	0x037FB988 MOV X25, X31
	0x037FB98C LDR W9, [X8 + 0x18]
	0x037FB990 CMP X25, W9, SXTW
	0x037FB994 B.GE 0x37FBA2C
	0x037FB998 CMP X25, X9
	0x037FB99C B.CS 0x37FBC28
	0x037FB9A0 ADD X8, X8, X25, 0x3, LSL
	0x037FB9A4 LDR X26, [X8 + 0x20]
	0x037FB9A8 CBZ X26, 0x37FBA1C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xBE7000
	007 Move X20, 0x94F000
	008 Move W8, [X21+992]
	009 Move X20, [X20+3312]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x94F000
	016 Move X0, [X0+3312]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+992], W8
	020 Move V1, [X19]
	021 Move V0, [X19+16]
	022 Move X0, [X20]
	023 Move [X31], V1
	024 Move [X31+8], V0
	025 Call 0x1C17F10
	026 Move X1, X31
	027 Move X19, X0
	028 Call Object..ctor, X0
	029 Move V1, [X31]
	030 Move V0, [X31+16]
	031 Move TEMP, 0
	032 Not TEMP
	033 Move W8, TEMP
	034 Move [X19+48], W8
	035 Move X0, X19
	036 Move [X19+16], V1
	037 Move [X19+24], V0
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Add X31, X31, 64
	043 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x037FB9E0 LDR X8, [X27]

ISIL:
	001 Call TouchHistory.GetEnumerator, X0
	002 Return X0

Method: System.Int32 get_Count()

Disassembly:
	0x037FB9E4 LDR X8, [X8 + 0xB8]
	0x037FB9E8 LDP S1, S2, [X8]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: UnityEngine.InputSystem.EnhancedTouch.Touch get_Item(System.Int32 index)

Disassembly:
	0x037FB9EC FMUL S1, S1, S2
	0x037FB9F0 FCMP S0, S1
	0x037FB9F4 B.PL 0x37FBA1C
	0x037FB9F8 MOVZ W3, 0x3
	0x037FB9FC B 0x37FBA08
	0x037FBA00 CBZ X24, 0x37FBA1C
	0x037FBA04 MOVZ W3, 0x2
	0x037FBA08 MOV X0, X20
	0x037FBA0C MOV W1, W25
	0x037FBA10 MOV W2, W21
	0x037FBA14 MOV X4, X19
	0x037FBA18 BL 0x37FB3A4
	0x037FBA1C LDR X8, [X20 + 0x48]
	0x037FBA20 ADD X25, X25, 0x1
	0x037FBA24 CBNZ X8, 0x37FB98C
	0x037FBA28 BL 0x1C16F20
	0x037FBA2C ADD X8, X31, 0x8
	0x037FBA30 FMOV S0, W31
	0x037FBA34 MOVZ W1, 0x1
	0x037FBA38 MOV X0, X19
	0x037FBA3C MOV X2, X23
	0x037FBA40 MOV X3, X31
	0x037FBA44 BL 0x3775004
	0x037FBA48 LDR X8, [X31 + 0x18]
	0x037FBA4C LDUR V0, [X31 + 0x8]
	0x037FBA50 ADD X0, X31, 0x80
	0x037FBA54 MOV X1, X31
	0x037FBA58 STR X8, [X31 + 0x90]
	0x037FBA5C ADD X8, X31, 0x8
	0x037FBA60 STR V0, [X31 + 0x8]
	0x037FBA64 BL 0x377524C
	0x037FBA68 ADD X0, X31, 0xA0
	0x037FBA6C ADD X1, X31, 0x8
	0x037FBA70 MOVZ W2, 0x70
	0x037FBA74 BL 0x3EB1AC0
	0x037FBA78 ADRP X25, 0x94E000
	0x037FBA7C ADRP X26, 0x94E000
	0x037FBA80 LDR X25, [X25 + 0xD88]
	0x037FBA84 LDR X26, [X26 + 0xD80]
	0x037FBA88 ADD X0, X31, 0xA0
	0x037FBA8C MOV X1, X31
	0x037FBA90 BL 0x3775274
	0x037FBA94 TBZ X0, 0x0, 0x37FBBF0
	0x037FBA98 LDR X23, [X31 + 0xE8]
	0x037FBA9C CBZ X23, 0x37FBC2C
	0x037FBAA0 MOV X0, X23
	0x037FBAA4 MOV X1, X31
	0x037FBAA8 BL 0x3773448
	0x037FBAAC TBZ X0, 0x0, 0x37FBA88
	0x037FBAB0 MOV X0, X23
	0x037FBAB4 MOV X1, X19
	0x037FBAB8 MOV X2, X22
	0x037FBABC MOV X3, X31
	0x037FBAC0 BL 0x3774680
	0x037FBAC4 MOV X1, X0
	0x037FBAC8 STR W31, [X31 + 0x7C]
	0x037FBACC LDR X8, [X23]
	0x037FBAD0 LDP X9, X4, [X8 + 0x1C8]
	0x037FBAD4 ADD X2, X31, 0x7C
	0x037FBAD8 MOVZ W3, 0x4
	0x037FBADC MOV X0, X23
	0x037FBAE0 BLR X9
	0x037FBAE4 LDR X8, [X27]
	0x037FBAE8 LDR V0, [X31 + 0x7C]
	0x037FBAEC LDR X8, [X8 + 0xB8]
	0x037FBAF0 LDR V1, [X8]
	0x037FBAF4 FCMP S0, S1
	0x037FBAF8 B.LS 0x37FBA88
	0x037FBAFC LDR X0, [X20 + 0x48]
	0x037FBB00 LDR X3, [X25]
	0x037FBB04 MOVN W2, 0x0
	0x037FBB08 MOV X1, X23
	0x037FBB0C BL 0x2179B8C
	0x037FBB10 MOV W1, W0
	0x037FBB14 TBNZ X1, 0x1F, 0x37FBB30
	0x037FBB18 MOVZ W3, 0x2
	0x037FBB1C MOV X0, X20
	0x037FBB20 MOV W2, W21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xBE7000
	007 Move W9, [X22+993]
	008 Move W21, W1
	009 Move X19, X0
	010 Move X20, X8
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x94F000
	016 Move X0, [X0+2864]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+993], W8
	020 Move X0, X19
	021 Call TouchHistory.CheckValid, X0
	022 Move TEMP, X21
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {47}
	026 Move W8, [X19+16]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, [X19]
	029 Compare X0, 0
	030 JumpIfEqual {89}
	031 Move X8, 0x94F000
	032 Move X8, [X8+2864]
	033 Move W9, [X19+20]
	034 Move X19, [X19+8]
	035 Move X2, [X8]
	036 Subtract W1, W9, W21
	037 Call 0x2E1316C, X0, X1
	038 Move [X20], X19
	039 Move [X20+8], X0
	040 Move [X20+16], X1
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0
	047 Move [X31+12], W21
	048 Move X20, 0x8F9000
	049 Move X20, [X20+1880]
	050 Move X0, X20
	051 Call 0x1C17D08
	052 Add X1, X31, 12
	053 Call 0x1C17E04
	054 Move W8, [X19+16]
	055 Move X21, X0
	056 Move X0, X20
	057 Move [X31+8], W8
	058 Call 0x1C17D08
	059 Add X1, X31, 8
	060 Call 0x1C17E04
	061 Move X19, X0
	062 Move X0, 0x925000
	063 Move X0, [X0+112]
	064 Call 0x1C17D08
	065 Move X1, X21
	066 Move X2, X19
	067 Move X3, X31
	068 Call String.Format, X0, X1, X2
	069 Move X19, X0
	070 Move X0, 0x901000
	071 Move X0, [X0+1888]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X20, X0
	075 Move X0, 0x904000
	076 Move X0, [X0+304]
	077 Call 0x1C17D08
	078 Move X2, X0
	079 Move X0, X20
	080 Move X1, X19
	081 Move X3, X31
	082 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	083 Move X0, 0x94F000
	084 Move X0, [X0+3320]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X20
	088 Call 0x1C17DEC
	089 Call 0x1C17F20

Method: System.Void CheckValid()

Disassembly:
	0x037FBB24 MOV X4, X19
	0x037FBB28 BL 0x37FB3A4
	0x037FBB2C B 0x37FBA88
	0x037FBB30 LDR X0, [X20 + 0x48]
	0x037FBB34 LDR X3, [X26]
	0x037FBB38 MOVN W2, 0x0
	0x037FBB3C MOV X1, X31
	0x037FBB40 BL 0x2179B8C
	0x037FBB44 MOV W24, W0
	0x037FBB48 TBNZ X0, 0x1F, 0x37FBA88
	0x037FBB4C LDR X28, [X20 + 0x48]
	0x037FBB50 CBZ X28, 0x37FBC50
	0x037FBB54 LDR X8, [X23]
	0x037FBB58 LDR X1, [X27]
	0x037FBB5C LDRB W10, [X8 + 0x130]
	0x037FBB60 LDRB W9, [X1 + 0x130]
	0x037FBB64 CMP W10, W9
	0x037FBB68 B.CC 0x37FBC30
	0x037FBB6C LDR X8, [X8 + 0xC8]
	0x037FBB70 ADD X8, X8, X9, 0x3, LSL
	0x037FBB74 LDUR X8, [X8 - 0x8]
	0x037FBB78 CMP X8, X1
	0x037FBB7C B.NE 0x37FBC30
	0x037FBB80 LDR X8, [X28]
	0x037FBB84 LDR X1, [X8 + 0x40]
	0x037FBB88 MOV X0, X23
	0x037FBB8C BL 0x1C16E00
	0x037FBB90 CBZ X0, 0x37FBC44
	0x037FBB94 LDR X8, [X23]
	0x037FBB98 LDR X1, [X27]
	0x037FBB9C LDRB W10, [X8 + 0x130]
	0x037FBBA0 LDRB W9, [X1 + 0x130]
	0x037FBBA4 CMP W10, W9
	0x037FBBA8 B.CC 0x37FBC38
	0x037FBBAC LDR X8, [X8 + 0xC8]
	0x037FBBB0 ADD X8, X8, X9, 0x3, LSL
	0x037FBBB4 LDUR X8, [X8 - 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+8]
	004 Compare X8, 0
	005 JumpIfEqual {15}
	006 Move X8, [X0]
	007 Compare X8, 0
	008 JumpIfEqual {15}
	009 Move W8, [X8+84]
	010 Move W9, [X0+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Move X0, 0x8F9000
	016 Move X0, [X0+1456]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0x94F000
	021 Move X0, [X0+3328]
	022 Move X0, 0x8F9000
	023 Move X0, [X0+1456]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X19, X0
	027 Move X0, 0x94F000
	028 Move X0, [X0+3336]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Move X2, X31
	033 Call InvalidOperationException..ctor, X0, X1
	034 Move X0, 0x94F000
	035 Move X0, [X0+3344]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Call 0x1C17DEC

