Type: System.Collections.Specialized.CompatibleComparer

Method: System.Void .ctor(System.Collections.IComparer comparer, System.Collections.IHashCodeProvider hashCodeProvider)

Disassembly:
	0x03666EC8 MOV X0, X19
	0x03666ECC BL 0x1C16DEC
	0x03666ED0 LDR X0, [X0 + 0x10]
	0x03666ED4 RET
	0x03666ED8 LDR X0, [X0 + 0x18]
	0x03666EDC RET
	0x03666EE0 STP X30, X21, [X31 - 0x20]!
	0x03666EE4 STP X20, X19, [X31 + 0x10]
	0x03666EE8 ADRP X20, 0xD7A000
	0x03666EEC ADRP X21, 0xAD7000
	0x03666EF0 LDRB W8, [X20 + 0x713]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move [X21+16], X20
	011 Move [X21+24], X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Boolean Equals(System.Object a, System.Object b)

Disassembly:
	0x03667BC8 LDP X20, X19, [X31 + 0x30]
	0x03667BCC LDP X22, X21, [X31 + 0x20]
	0x03667BD0 LDP X24, X23, [X31 + 0x10]
	0x03667BD4 LDP X30, X25, [X31], #0x40
	0x03667BD8 RET
	0x03667BDC ADRP X0, 0xA91000
	0x03667BE0 LDR X0, [X0 + 0x528]
	0x03667BE4 BL 0x1C16D08
	0x03667BE8 BL 0x1C16F10
	0x03667BEC MOV X19, X0
	0x03667BF0 ADRP X0, 0xAD6000
	0x03667BF4 LDR X0, [X0 + 0x338]
	0x03667BF8 BL 0x1C16D08
	0x03667BFC MOV X1, X0
	0x03667C00 MOV X0, X19
	0x03667C04 MOV X2, X31
	0x03667C08 BL 0x330E100
	0x03667C0C B 0x3667C74
	0x03667C10 ADRP X0, 0xA94000
	0x03667C14 LDR X0, [X0 + 0x578]
	0x03667C18 BL 0x1C16D08
	0x03667C1C BL 0x1C16F10
	0x03667C20 MOV X19, X0
	0x03667C24 ADRP X0, 0xABD000
	0x03667C28 LDR X0, [X0 + 0x68]
	0x03667C2C BL 0x1C16D08
	0x03667C30 MOV X1, X0
	0x03667C34 MOV X0, X19
	0x03667C38 MOV X2, X31
	0x03667C3C BL 0x3314A68
	0x03667C40 B 0x3667C74
	0x03667C44 ADRP X0, 0xA95000
	0x03667C48 LDR X0, [X0 + 0x758]
	0x03667C4C BL 0x1C16D08
	0x03667C50 BL 0x1C16F10
	0x03667C54 MOV X19, X0
	0x03667C58 ADRP X0, 0xAD6000
	0x03667C5C LDR X0, [X0 + 0x340]
	0x03667C60 BL 0x1C16D08
	0x03667C64 MOV X1, X0
	0x03667C68 MOV X0, X19
	0x03667C6C MOV X2, X31
	0x03667C70 BL 0x33802E4
	0x03667C74 ADRP X0, 0xAD6000
	0x03667C78 LDR X0, [X0 + 0x348]
	0x03667C7C BL 0x1C16D08
	0x03667C80 MOV X1, X0
	0x03667C84 MOV X0, X19
	0x03667C88 BL 0x1C16DEC
	0x03667C8C AND W3, W3, 0x1
	0x03667C90 MOV W4, W31
	0x03667C94 B 0x3667B2C
	0x03667C98 STR X30, [X31 - 0x40]!
	0x03667C9C STP X24, X23, [X31 + 0x10]
	0x03667CA0 STP X22, X21, [X31 + 0x20]
	0x03667CA4 STP X20, X19, [X31 + 0x30]
	0x03667CA8 ADRP X22, 0xD79000
	0x03667CAC ADRP X23, 0xAD6000
	0x03667CB0 LDRB W8, [X22 + 0x726]
	0x03667CB4 LDR X23, [X23 + 0x350]
	0x03667CB8 MOV W21, W2
	0x03667CBC MOV W20, W1
	0x03667CC0 MOV X19, X0
	0x03667CC4 TBNZ X8, 0x0, 0x3667D00
	0x03667CC8 ADRP X0, 0xAD6000
	0x03667CCC LDR X0, [X0 + 0x358]
	0x03667CD0 BL 0x1C16CF4
	0x03667CD4 ADRP X0, 0xAD6000
	0x03667CD8 LDR X0, [X0 + 0x360]
	0x03667CDC BL 0x1C16CF4
	0x03667CE0 ADRP X0, 0xAD6000
	0x03667CE4 LDR X0, [X0 + 0x350]
	0x03667CE8 BL 0x1C16CF4
	0x03667CEC ADRP X0, 0xAD6000
	0x03667CF0 LDR X0, [X0 + 0x368]
	0x03667CF4 BL 0x1C16CF4
	0x03667CF8 MOVZ W8, 0x1
	0x03667CFC STRB W8, [X22 + 0x726]
	0x03667D00 LDR X0, [X23]
	0x03667D04 BL 0x1C16F10
	0x03667D08 MOV X1, X31
	0x03667D0C MOV X22, X0
	0x03667D10 BL 0x33BDD8C
	0x03667D14 MOV X0, X22
	0x03667D18 MOV X1, X31
	0x03667D1C BL 0x32C0774
	0x03667D20 CBZ X22, 0x3667DCC
	0x03667D24 ADRP X8, 0xAD6000
	0x03667D28 LDR X8, [X8 + 0x368]
	0x03667D2C STR X0, [X22 + 0x28]
	0x03667D30 ADRP X23, 0xAD6000
	0x03667D34 ADRP X24, 0xAD6000
	0x03667D38 LDR X0, [X8]
	0x03667D3C LDR X23, [X23 + 0x360]
	0x03667D40 LDR X24, [X24 + 0x358]
	0x03667D44 BL 0x1C16F10
	0x03667D48 CMP W20, 0x1
	0x03667D4C CSEL X8, X23, X24, EQ
	0x03667D50 LDR X2, [X8]
	0x03667D54 MOV X1, X31
	0x03667D58 MOV X23, X0
	0x03667D5C BL 0x366939C
	0x03667D60 LDR X0, [X22 + 0x28]
	0x03667D64 MOV X1, X31
	0x03667D68 STR X23, [X22 + 0x10]
	0x03667D6C BL 0x32C0980
	0x03667D70 MOV X3, X0
	0x03667D74 AND W1, W21, 0x1
	0x03667D78 MOV W0, W20
	0x03667D7C MOV X2, X23
	0x03667D80 BL 0x3669428
	0x03667D84 STR X0, [X22 + 0x20]
	0x03667D88 CBZ X0, 0x3667DCC
	0x03667D8C LDR X8, [X0]
	0x03667D90 LDP X9, X1, [X8 + 0x188]
	0x03667D94 BLR X9
	0x03667D98 TBZ X0, 0x0, 0x3667DB0
	0x03667D9C MOVZ W1, 0x1
	0x03667DA0 MOV X0, X22
	0x03667DA4 BL 0x3667F2C
	0x03667DA8 MOV X22, X31
	0x03667DAC B 0x3667DB4
	0x03667DB0 STR X19, [X22 + 0x18]
	0x03667DB4 MOV X0, X22
	0x03667DB8 LDP X20, X19, [X31 + 0x30]
	0x03667DBC LDP X22, X21, [X31 + 0x20]
	0x03667DC0 LDP X24, X23, [X31 + 0x10]
	0x03667DC4 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD7A000
	007 Move W8, [X22+1807]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAC4000
	016 Move X0, [X0+584]
	017 Call 0x1C17CF4
	018 Move X0, 0xAB7000
	019 Move X0, [X0+2328]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1807], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W0, W31
	025 Compare X20, 0
	026 JumpIfEqual {101}
	027 Compare X19, 0
	028 JumpIfEqual {101}
	029 Move X21, [X21+16]
	030 Compare X21, 0
	031 JumpIfEqual {49}
	032 Move X10, 0xAB7000
	033 Move X8, [X21]
	034 Move X10, [X10+2328]
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Move X1, [X10]
	037 Compare X9, 0
	038 JumpIfEqual {45}
	039 Move X10, [X8+176]
	040 Add X10, X10, 8
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Subtract X9, X9, 1
	044 Add X10, X10, 16
	045 Move X0, X21
	046 Move W2, W31
	047 Call 0x1C5D788
	048 Move W0, 1
	049 Move X22, 0xAC4000
	050 Move X22, [X22+584]
	051 Move X1, [X22]
	052 Move X0, X20
	053 Call 0x1C17E00
	054 Move X21, X0
	055 Compare X0, 0
	056 JumpIfEqual {80}
	057 Move X8, [X21]
	058 Move X1, [X22]
	059 NotImplemented "Instruction LDRH not yet implemented."
	060 Compare X9, 0
	061 JumpIfEqual {68}
	062 Move X10, [X8+176]
	063 Add X10, X10, 8
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Subtract X9, X9, 1
	067 Add X10, X10, 16
	068 Move X0, X21
	069 Move W2, W31
	070 Call 0x1C5D788
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 Add X8, X8, X9
	073 Add X0, X8, 312
	074 Move X8, [X0]
	075 Move X3, [X0+8]
	076 Move X0, X21
	077 Move X1, X20
	078 Move X2, X19
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move X8, [X20]
	081 Move X0, X20
	082 Move X1, X19
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X3, [X8+312]
	086 Move X2, [X8+320]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X30, [X31+48]
	090 CallNoReturn X3
	091 NotImplemented "Instruction LDRSW not yet implemented."
	092 Add X8, X8, X9
	093 Add X0, X8, 312
	094 Move X8, [X0]
	095 Move X2, [X0+8]
	096 Move X0, X21
	097 Move X1, X19
	098 NotImplemented "Instruction BLR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 NotImplemented "Instruction CSET not yet implemented."
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X22, [X31+16]
	104 Move X21, [X31+24]
	105 Move X30, [X31+48]
	106 Return X0
	107 Move X19, X0
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X0, X19
	110 Call 0x3EB2AD0
	111 Move X19, X0
	112 Move X0, 0xA95000
	113 Move X0, [X0+1400]
	114 Call 0x1C17D08
	115 Move X8, [X19]
	116 Move X1, [X8]
	117 Call 0x1C18270
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {124}
	122 Call 0x3EB2AE0
	123 Move W0, W31
	124 Move W0, 8
	125 Call 0x3EB2AF0
	126 Move X8, [X19]
	127 Move [X0], X8
	128 Move X1, 0x84E000
	129 Add X1, X1, 3672
	130 Move X2, X31
	131 Call 0x3EB2B00
	132 Move X19, X0
	133 Call 0x3EB2AE0
	134 Move X0, X19
	135 Call 0x1D2D690
	136 Call 0x1991590

Method: System.Int32 GetHashCode(System.Object obj)

Disassembly:
	0x03667DC8 RET
	0x03667DCC BL 0x1C16F20
	0x03667DD0 STP X30, X21, [X31 - 0x20]!
	0x03667DD4 STP X20, X19, [X31 + 0x10]
	0x03667DD8 LDR X8, [X0]
	0x03667DDC MOV X19, X0
	0x03667DE0 LDR X9, [X8 + 0x288]
	0x03667DE4 LDR X2, [X8 + 0x290]
	0x03667DE8 MOV W1, W31
	0x03667DEC BLR X9
	0x03667DF0 MOV X0, X19
	0x03667DF4 LDP X20, X19, [X31 + 0x10]
	0x03667DF8 MOV X1, X31
	0x03667DFC LDP X30, X21, [X31], #0x20
	0x03667E00 B 0x33CB4DC
	0x03667E04 CMP W1, 0x1
	0x03667E08 MOV X21, X0
	0x03667E0C B.NE 0x3667E3C
	0x03667E10 MOV X0, X21
	0x03667E14 BL 0x3EB1AD0
	0x03667E18 LDR X20, [X0]
	0x03667E1C BL 0x3EB1AE0
	0x03667E20 MOV X0, X19
	0x03667E24 MOV X1, X31
	0x03667E28 BL 0x33CB4DC
	0x03667E2C CBNZ X20, 0x3667E44
	0x03667E30 LDP X20, X19, [X31 + 0x10]
	0x03667E34 LDP X30, X21, [X31], #0x20
	0x03667E38 RET
	0x03667E3C MOV X20, X31
	0x03667E40 B 0x3667E50
	0x03667E44 MOV X0, X20
	0x03667E48 BL 0x1C16F18
	0x03667E4C MOV X21, X0
	0x03667E50 MOV X0, X19
	0x03667E54 MOV X1, X31
	0x03667E58 BL 0x33CB4DC
	0x03667E5C CBNZ X20, 0x3667E68
	0x03667E60 MOV X0, X21
	0x03667E64 BL 0x1D2C690
	0x03667E68 MOV X0, X20
	0x03667E6C BL 0x1C16F18
	0x03667E70 BL 0x1990590
	0x03667E74 STP X30, X21, [X31 - 0x20]!
	0x03667E78 STP X20, X19, [X31 + 0x10]
	0x03667E7C ADRP X21, 0xD79000
	0x03667E80 LDRB W8, [X21 + 0x71D]
	0x03667E84 MOV W19, W1
	0x03667E88 MOV X20, X0
	0x03667E8C TBNZ X8, 0x0, 0x3667EA4
	0x03667E90 ADRP X0, 0xA93000
	0x03667E94 LDR X0, [X0 + 0xC10]
	0x03667E98 BL 0x1C16CF4
	0x03667E9C MOVZ W8, 0x1
	0x03667EA0 STRB W8, [X21 + 0x71D]
	0x03667EA4 TBZ X19, 0x0, 0x3667ECC
	0x03667EA8 ADRP X8, 0xA93000
	0x03667EAC LDR X8, [X8 + 0xC10]
	0x03667EB0 LDR X0, [X8]
	0x03667EB4 LDR W8, [X0 + 0xE0]
	0x03667EB8 CBNZ W8, 0x3667EC0
	0x03667EBC BL 0x1C16DFC
	0x03667EC0 MOV X0, X20
	0x03667EC4 MOV X1, X31
	0x03667EC8 BL 0x33B3E9C
	0x03667ECC LDR X0, [X20 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD7A000
	006 Move W8, [X21+1808]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAC4000
	014 Move X0, [X0+824]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1808], W8
	018 Compare X19, 0
	019 JumpIfEqual {60}
	020 Move X20, [X20+24]
	021 Compare X20, 0
	022 JumpIfEqual {39}
	023 Move X10, 0xAC4000
	024 Move X8, [X20]
	025 Move X10, [X10+824]
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X1, [X10]
	028 Compare X9, 0
	029 JumpIfEqual {36}
	030 Move X10, [X8+176]
	031 Add X10, X10, 8
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Subtract X9, X9, 1
	035 Add X10, X10, 16
	036 Move X0, X20
	037 Move W2, W31
	038 Call 0x1C5D788
	039 Move X8, [X19]
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X2, [X8+344]
	044 Move X1, [X8+352]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 CallNoReturn X2
	048 NotImplemented "Instruction LDRSW not yet implemented."
	049 Add X8, X8, X9
	050 Add X0, X8, 312
	051 Move X3, [X0]
	052 Move X2, [X0+8]
	053 Move X0, X20
	054 Move X1, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 CallNoReturn X3
	060 Move X0, 0xA92000
	061 Move X0, [X0+1320]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0xA98000
	066 Move X0, [X0+2216]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Move X2, X31
	071 Call ArgumentNullException..ctor, X0, X1
	072 Move X0, 0xAD7000
	073 Move X0, [X0+728]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Call 0x1C17DEC

Method: System.Collections.IComparer get_Comparer()

Disassembly:
	0x03667ED0 CBZ X0, 0x3667EDC
	0x03667ED4 AND W1, W19, 0x1

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Collections.IHashCodeProvider get_HashCodeProvider()

Disassembly:
	0x03667ED8 BL 0x3667F2C
	0x03667EDC TBZ X19, 0x0, 0x3667F14

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Collections.IComparer get_DefaultComparer()

Disassembly:
	0x036666B0 LDR X0, [X0 + 0x2B8]
	0x036666B4 BL 0x1C16D08
	0x036666B8 MOV X1, X0
	0x036666BC MOV X0, X20
	0x036666C0 BL 0x1C16DEC
	0x036666C4 STR X30, [X31 - 0x20]!
	0x036666C8 STP X20, X19, [X31 + 0x10]
	0x036666CC LDR W20, [X0 + 0x10]
	0x036666D0 TBNZ X20, 0x1F, 0x3666710
	0x036666D4 MOV X19, X0
	0x036666D8 LDR X0, [X0 + 0x18]
	0x036666DC CBZ X0, 0x3666760
	0x036666E0 LDR X8, [X0]
	0x036666E4 LDR X9, [X8 + 0x218]
	0x036666E8 LDR X1, [X8 + 0x220]
	0x036666EC BLR X9
	0x036666F0 CMP W20, W0
	0x036666F4 B.GE 0x3666710
	0x036666F8 LDR X0, [X19 + 0x18]
	0x036666FC CBZ X0, 0x3666760
	0x03666700 LDR W1, [X19 + 0x10]
	0x03666704 LDP X20, X19, [X31 + 0x10]
	0x03666708 LDR X30, [X31], #0x20
	0x0366670C B 0x3664734
	0x03666710 ADRP X0, 0xAB7000
	0x03666714 LDR X0, [X0 + 0x290]
	0x03666718 BL 0x1C16D08
	0x0366671C MOV X1, X31
	0x03666720 BL 0x320A1E4
	0x03666724 MOV X19, X0
	0x03666728 ADRP X0, 0xA8D000
	0x0366672C LDR X0, [X0 + 0x5B0]
	0x03666730 BL 0x1C16D08
	0x03666734 BL 0x1C16F10
	0x03666738 MOV X1, X19
	0x0366673C MOV X2, X31
	0x03666740 MOV X20, X0
	0x03666744 BL 0x337DF1C
	0x03666748 ADRP X0, 0xAD7000
	0x0366674C LDR X0, [X0 + 0x2C0]
	0x03666750 BL 0x1C16D08
	0x03666754 MOV X1, X0
	0x03666758 MOV X0, X20
	0x0366675C BL 0x1C16DEC
	0x03666760 BL 0x1C16F20
	0x03666764 STP X30, X21, [X31 - 0x20]!
	0x03666768 STP X20, X19, [X31 + 0x10]
	0x0366676C ADRP X21, 0xD7A000
	0x03666770 ADRP X20, 0xAD7000
	0x03666774 LDRB W8, [X21 + 0x70B]
	0x03666778 LDR X20, [X20 + 0x288]
	0x0366677C MOV X19, X0
	0x03666780 TBNZ X8, 0x0, 0x3666798

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xD7B000
	006 Move X21, 0xAD8000
	007 Move W8, [X19+1809]
	008 Move X21, [X21+592]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xAD8000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move X0, 0xAD8000
	017 Move X0, [X0+592]
	018 Call 0x1C17CF4
	019 Move X0, 0xA90000
	020 Move X0, [X0+3144]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X19+1809], W8
	024 Move X8, [X21]
	025 Move X8, [X8+184]
	026 Move X19, [X8]
	027 Call 0x1C17D44
	028 Compare X19, 0
	029 JumpIfNotEqual {53}
	030 Move X8, 0xA90000
	031 Move X8, [X8+3144]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call CultureInfo.get_InvariantCulture
	039 Move X8, 0xAD8000
	040 Move X8, [X8+632]
	041 Move X19, X0
	042 Move X8, [X8]
	043 Move X0, X8
	044 Call 0x1C17F10
	045 Move X1, X19
	046 Move X2, X31
	047 Move X20, X0
	048 Call CaseInsensitiveComparer..ctor, X0, X1
	049 Call 0x1C17D44
	050 Move X8, [X21]
	051 Move X8, [X8+184]
	052 Move [X8], X20
	053 Move X8, [X21]
	054 Move X8, [X8+184]
	055 Move X19, [X8]
	056 Call 0x1C17D44
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0

Method: System.Collections.IHashCodeProvider get_DefaultHashCodeProvider()

Disassembly:
	0x036665D8 CSET W8, LT
	0x036665DC MOV W0, W8
	0x036665E0 LDP X30, X21, [X31], #0x20
	0x036665E4 RET
	0x036665E8 BL 0x1C16F20
	0x036665EC ADRP X0, 0xAB7000
	0x036665F0 LDR X0, [X0 + 0x288]
	0x036665F4 BL 0x1C16D08
	0x036665F8 MOV X1, X31
	0x036665FC BL 0x320A1E4
	0x03666600 MOV X19, X0
	0x03666604 ADRP X0, 0xA8D000
	0x03666608 LDR X0, [X0 + 0x5B0]
	0x0366660C BL 0x1C16D08
	0x03666610 BL 0x1C16F10
	0x03666614 MOV X1, X19
	0x03666618 MOV X2, X31
	0x0366661C MOV X20, X0
	0x03666620 BL 0x337DF1C
	0x03666624 ADRP X0, 0xAD7000
	0x03666628 LDR X0, [X0 + 0x2B0]
	0x0366662C BL 0x1C16D08
	0x03666630 MOV X1, X0
	0x03666634 MOV X0, X20
	0x03666638 BL 0x1C16DEC
	0x0366663C STR X30, [X31 - 0x20]!
	0x03666640 STP X20, X19, [X31 + 0x10]
	0x03666644 LDR X8, [X0 + 0x18]
	0x03666648 CBZ X8, 0x3666670
	0x0366664C LDR W9, [X0 + 0x20]
	0x03666650 LDR W8, [X8 + 0x48]
	0x03666654 CMP W9, W8
	0x03666658 B.NE 0x3666674
	0x0366665C LDP X20, X19, [X31 + 0x10]
	0x03666660 MOVN W8, 0x0
	0x03666664 STR W8, [X0 + 0x10]
	0x03666668 LDR X30, [X31], #0x20
	0x0366666C RET
	0x03666670 BL 0x1C16F20
	0x03666674 ADRP X0, 0xAB7000
	0x03666678 LDR X0, [X0 + 0x288]
	0x0366667C BL 0x1C16D08
	0x03666680 MOV X1, X31
	0x03666684 BL 0x320A1E4
	0x03666688 MOV X19, X0
	0x0366668C ADRP X0, 0xA8D000
	0x03666690 LDR X0, [X0 + 0x5B0]
	0x03666694 BL 0x1C16D08
	0x03666698 BL 0x1C16F10
	0x0366669C MOV X1, X19
	0x036666A0 MOV X2, X31
	0x036666A4 MOV X20, X0
	0x036666A8 BL 0x337DF1C
	0x036666AC ADRP X0, 0xAD7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xD7B000
	006 Move X21, 0xAD8000
	007 Move W8, [X19+1810]
	008 Move X21, [X21+592]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xAD8000
	014 Move X0, [X0+624]
	015 Call 0x1C17CF4
	016 Move X0, 0xAD8000
	017 Move X0, [X0+592]
	018 Call 0x1C17CF4
	019 Move X0, 0xA90000
	020 Move X0, [X0+3144]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X19+1810], W8
	024 Move X8, [X21]
	025 Move X8, [X8+184]
	026 Move X19, [X8+8]
	027 Call 0x1C17D44
	028 Compare X19, 0
	029 JumpIfEqual {33}
	030 Move X8, [X21]
	031 Move X8, [X8+184]
	032 Move X19, [X8+8]
	033 Move X8, 0xA90000
	034 Move X8, [X8+3144]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X31
	041 Call CultureInfo.get_InvariantCulture
	042 Move X8, 0xAD8000
	043 Move X8, [X8+624]
	044 Move X20, X0
	045 Move X8, [X8]
	046 Move X0, X8
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X19, X0
	051 Call CaseInsensitiveHashCodeProvider..ctor, X0, X1
	052 Call 0x1C17D44
	053 Move X8, [X21]
	054 Move X8, [X8+184]
	055 Move [X8+8], X19
	056 Call 0x1C17D44
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0

