Type: System.Collections.Specialized.ListDictionary/NodeEnumerator

Method: System.Void .ctor(System.Collections.Specialized.ListDictionary list)

Disassembly:
	0x03663C90 LDR X0, [X0 + 0xAC8]
	0x03663C94 BL 0x1C16CF4
	0x03663C98 MOVZ W8, 0x1
	0x03663C9C STRB W8, [X20 + 0x6E9]
	0x03663CA0 CBZ X19, 0x3663D00
	0x03663CA4 LDR X8, [X19]
	0x03663CA8 MOV X0, X19
	0x03663CAC LDR X9, [X8 + 0x298]
	0x03663CB0 LDR X1, [X8 + 0x2A0]
	0x03663CB4 BLR X9
	0x03663CB8 CBZ W0, 0x3663D00
	0x03663CBC ADRP X8, 0xA90000
	0x03663CC0 LDR X8, [X8 + 0xAC8]
	0x03663CC4 MOV W20, W0
	0x03663CC8 MOV W1, W20
	0x03663CCC LDR X0, [X8]
	0x03663CD0 BL 0x1C16D6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move [X19+16], X20
	009 Compare X20, 0
	010 JumpIfEqual {20}
	011 Move W8, [X20+24]
	012 Move W9, 1
	013 Move [X19+36], W9
	014 Move [X19+24], X31
	015 Move [X19+32], W8
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Return 
	020 Call 0x1C17F20

Method: System.Object get_Current()

Disassembly:
	0x03663EC0 LDR X9, [X8 + 0x308]
	0x03663EC4 LDR X2, [X8 + 0x310]
	0x03663EC8 BLR X9
	0x03663ECC MOV X0, X21
	0x03663ED0 MOV X1, X20
	0x03663ED4 MOV X2, X22
	0x03663ED8 LDP X20, X19, [X31 + 0x20]
	0x03663EDC LDP X22, X21, [X31 + 0x10]
	0x03663EE0 LDR X30, [X31], #0x30
	0x03663EE4 B 0x3663F60
	0x03663EE8 LDP X20, X19, [X31 + 0x20]
	0x03663EEC LDP X22, X21, [X31 + 0x10]
	0x03663EF0 LDR X30, [X31], #0x30
	0x03663EF4 RET
	0x03663EF8 ADRP X0, 0xA90000
	0x03663EFC LDR X0, [X0 + 0xB40]
	0x03663F00 BL 0x1C16D08
	0x03663F04 BL 0x1C16F10
	0x03663F08 MOV X19, X0
	0x03663F0C ADRP X0, 0xABA000
	0x03663F10 LDR X0, [X0 + 0x68]
	0x03663F14 BL 0x1C16D08
	0x03663F18 MOV X1, X0
	0x03663F1C MOV X0, X19
	0x03663F20 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD7E000
	007 Move X20, 0xA99000
	008 Move W8, [X21+1761]
	009 Move X20, [X20+3856]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA99000
	016 Move X0, [X0+3856]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1761], W8
	020 Move X0, X19
	021 Call NodeEnumerator.get_Entry, X0
	022 Move X8, [X20]
	023 Move [X31], X0
	024 Move [X31+8], X1
	025 Add X1, X31, 0
	026 Move X0, X8
	027 Call 0x1C17E04
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.Collections.DictionaryEntry get_Entry()

Disassembly:
	0x03663F24 BL 0x3379A44
	0x03663F28 ADRP X0, 0xADA000
	0x03663F2C LDR X0, [X0 + 0x220]
	0x03663F30 BL 0x1C16D08
	0x03663F34 MOV X1, X0
	0x03663F38 MOV X0, X19
	0x03663F3C BL 0x1C16DEC
	0x03663F40 BL 0x1C171E0
	0x03663F44 BL 0x1C16F20
	0x03663F48 STR X30, [X31 - 0x10]!
	0x03663F4C BL 0x3665EF4
	0x03663F50 CBZ X0, 0x3663F58
	0x03663F54 LDR X0, [X0 + 0x18]
	0x03663F58 LDR X30, [X31], #0x10
	0x03663F5C RET
	0x03663F60 STR X30, [X31 - 0x30]!
	0x03663F64 STP X22, X21, [X31 + 0x10]
	0x03663F68 STP X20, X19, [X31 + 0x20]
	0x03663F6C ADRP X20, 0xD7D000
	0x03663F70 LDRB W8, [X20 + 0x701]
	0x03663F74 MOV X22, X2
	0x03663F78 MOV X21, X1
	0x03663F7C MOV X19, X0
	0x03663F80 TBNZ X8, 0x0, 0x3663F98
	0x03663F84 ADRP X0, 0xADA000
	0x03663F88 LDR X0, [X0 + 0x228]
	0x03663F8C BL 0x1C16CF4
	0x03663F90 MOVZ W8, 0x1
	0x03663F94 STRB W8, [X20 + 0x701]
	0x03663F98 LDRB W8, [X19 + 0x10]
	0x03663F9C CBNZ W8, 0x3664068

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, [X0+24]
	005 Compare X8, 0
	006 JumpIfEqual {20}
	007 Move X1, [X8+16]
	008 Move X2, [X8+24]
	009 Add X0, X31, 0
	010 Move X3, X31
	011 Move [X31], X31
	012 Move [X31+8], X31
	013 Call DictionaryEntry..ctor, X0, X1, X2
	014 Move X0, [X31]
	015 Move X1, [X31+8]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Add X31, X31, 32
	019 Return X0
	020 Move X0, 0xA91000
	021 Move X0, [X0+1456]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X19, X0
	025 Move X0, 0xABB000
	026 Move X0, [X0+656]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Move X2, X31
	031 Call InvalidOperationException..ctor, X0, X1
	032 Move X0, 0xADB000
	033 Move X0, [X0+432]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X19
	037 Call 0x1C17DEC

Method: System.Object get_Key()

Disassembly:
	0x03663FA0 ADRP X8, 0xADA000
	0x03663FA4 LDR X8, [X8 + 0x228]
	0x03663FA8 LDR X0, [X8]
	0x03663FAC BL 0x1C16F10
	0x03663FB0 MOV X1, X31
	0x03663FB4 MOV X20, X0
	0x03663FB8 BL 0x33BDD8C
	0x03663FBC STP X21, X22, [X20 + 0x10]
	0x03663FC0 CBZ X21, 0x3664018
	0x03663FC4 LDR X22, [X19 + 0x28]
	0x03663FC8 BL 0x1C16D44
	0x03663FCC CBZ X22, 0x3664064
	0x03663FD0 LDR X8, [X22]
	0x03663FD4 MOV X0, X22
	0x03663FD8 MOV X1, X21
	0x03663FDC LDR X9, [X8 + 0x2D8]
	0x03663FE0 LDR X2, [X8 + 0x2E0]
	0x03663FE4 BLR X9
	0x03663FE8 CBNZ X0, 0x366402C
	0x03663FEC LDR X22, [X19 + 0x28]
	0x03663FF0 BL 0x1C16D44
	0x03663FF4 CBZ X22, 0x3664064
	0x03663FF8 LDR X8, [X22]
	0x03663FFC MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+24]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move X0, [X8+16]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xA91000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xABB000
	016 Move X0, [X0+656]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0xADB000
	023 Move X0, [X0+440]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Object get_Value()

Disassembly:
	0x03664000 MOV X1, X21
	0x03664004 MOV X2, X20
	0x03664008 LDR X9, [X8 + 0x278]
	0x0366400C LDR X3, [X8 + 0x280]
	0x03664010 BLR X9
	0x03664014 B 0x366402C
	0x03664018 LDR X21, [X19 + 0x30]
	0x0366401C BL 0x1C16D44
	0x03664020 CBNZ X21, 0x366402C
	0x03664024 BL 0x1C16D44
	0x03664028 STR X20, [X19 + 0x30]
	0x0366402C LDR X0, [X19 + 0x18]
	0x03664030 CBZ X0, 0x3664064
	0x03664034 LDR X8, [X0]
	0x03664038 MOV X1, X20
	0x0366403C LDR X9, [X8 + 0x308]
	0x03664040 LDR X2, [X8 + 0x310]
	0x03664044 BLR X9
	0x03664048 LDR W8, [X19 + 0x48]
	0x0366404C LDP X22, X21, [X31 + 0x10]
	0x03664050 ADD W8, W8, 0x1
	0x03664054 STR W8, [X19 + 0x48]
	0x03664058 LDP X20, X19, [X31 + 0x20]
	0x0366405C LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+24]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move X0, [X8+24]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xA90000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xABA000
	016 Move X0, [X0+656]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0xADA000
	023 Move X0, [X0+448]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean MoveNext()

Disassembly:
	0x03664060 RET
	0x03664064 BL 0x1C16F20
	0x03664068 ADRP X0, 0xAB9000
	0x0366406C LDR X0, [X0 + 0x68]
	0x03664070 BL 0x1C16D08
	0x03664074 MOV X1, X31
	0x03664078 BL 0x320A1E4
	0x0366407C MOV X19, X0
	0x03664080 ADRP X0, 0xA8F000
	0x03664084 LDR X0, [X0 + 0xB40]
	0x03664088 BL 0x1C16D08
	0x0366408C BL 0x1C16F10
	0x03664090 MOV X1, X19
	0x03664094 MOV X2, X31
	0x03664098 MOV X20, X0
	0x0366409C BL 0x3379A44
	0x036640A0 ADRP X0, 0xAD9000
	0x036640A4 LDR X0, [X0 + 0x230]
	0x036640A8 BL 0x1C16D08
	0x036640AC MOV X1, X0
	0x036640B0 MOV X0, X20
	0x036640B4 BL 0x1C16DEC
	0x036640B8 STP X30, X21, [X31 - 0x20]!
	0x036640BC STP X20, X19, [X31 + 0x10]
	0x036640C0 ADRP X21, 0xD7C000
	0x036640C4 LDRB W8, [X21 + 0x6EB]
	0x036640C8 MOV X19, X1
	0x036640CC MOV X20, X0
	0x036640D0 TBNZ X8, 0x0, 0x36640E8
	0x036640D4 ADRP X0, 0xABC000
	0x036640D8 LDR X0, [X0 + 0xBA0]
	0x036640DC BL 0x1C16CF4
	0x036640E0 MOVZ W8, 0x1
	0x036640E4 STRB W8, [X21 + 0x6EB]
	0x036640E8 MOV X0, X20
	0x036640EC MOV X1, X19
	0x036640F0 BL 0x3665EF4
	0x036640F4 CBZ X0, 0x3664134
	0x036640F8 LDR X0, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+16]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X0+32]
	007 Move W10, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W9, [X0+36]
	010 Compare W9, 0
	011 JumpIfEqual {14}
	012 Move X8, [X8+16]
	013 Move [X0+36], W31
	014 Move X8, [X0+24]
	015 Compare X8, 0
	016 JumpIfEqual {19}
	017 Move X8, [X8+32]
	018 Move [X0+24], X8
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CSET not yet implemented."
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return X0
	024 Call 0x1C17F20
	025 Move X0, 0xA90000
	026 Move X0, [X0+1456]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xABA000
	031 Move X0, [X0+648]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call InvalidOperationException..ctor, X0, X1
	037 Move X0, 0xADA000
	038 Move X0, [X0+456]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC

Method: System.Void Reset()

Disassembly:
	0x036640FC CBZ X0, 0x3664134
	0x03664100 ADRP X9, 0xABC000
	0x03664104 LDR X9, [X9 + 0xBA0]
	0x03664108 LDR X8, [X0]
	0x0366410C LDR X1, [X9]
	0x03664110 LDRB W10, [X8 + 0x130]
	0x03664114 LDRB W9, [X1 + 0x130]
	0x03664118 CMP W10, W9
	0x0366411C B.CC 0x3664140
	0x03664120 LDR X8, [X8 + 0xC8]
	0x03664124 ADD X8, X8, X9, 0x3, LSL
	0x03664128 LDUR X8, [X8 - 0x8]
	0x0366412C CMP X8, X1
	0x03664130 B.NE 0x3664140
	0x03664134 LDP X20, X19, [X31 + 0x10]
	0x03664138 LDP X30, X21, [X31], #0x20
	0x0366413C B 0x3663AC4
	0x03664140 BL 0x1C171E0
	0x03664144 STP X30, X21, [X31 - 0x20]!
	0x03664148 STP X20, X19, [X31 + 0x10]
	0x0366414C ADRP X21, 0xD7C000
	0x03664150 LDRB W8, [X21 + 0x6EC]
	0x03664154 MOV X19, X1
	0x03664158 MOV X20, X0
	0x0366415C TBNZ X8, 0x0, 0x3664174
	0x03664160 ADRP X0, 0xABC000
	0x03664164 LDR X0, [X0 + 0xBA0]
	0x03664168 BL 0x1C16CF4
	0x0366416C MOVZ W8, 0x1
	0x03664170 STRB W8, [X21 + 0x6EC]
	0x03664174 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+16]
	004 Compare X8, 0
	005 JumpIfEqual {15}
	006 Move W9, [X0+32]
	007 Move W8, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W8, 1
	010 Move [X0+36], W8
	011 Move [X0+24], X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20
	016 Move X0, 0xA90000
	017 Move X0, [X0+1456]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xABA000
	022 Move X0, [X0+648]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call InvalidOperationException..ctor, X0, X1
	028 Move X0, 0xADA000
	029 Move X0, [X0+464]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC

