Type: System.Collections.Specialized.ListDictionary/NodeKeyValueCollection

Method: System.Void .ctor(System.Collections.Specialized.ListDictionary list, System.Boolean isKeys)

Disassembly:
	0x0366360C STP X20, X19, [X31 + 0x20]
	0x03663610 ADRP X21, 0xD7D000
	0x03663614 LDRB W8, [X21 + 0x6E4]
	0x03663618 MOV X19, X1
	0x0366361C MOV X20, X0
	0x03663620 TBNZ X8, 0x0, 0x3663638
	0x03663624 ADRP X0, 0xADA000
	0x03663628 LDR X0, [X0 + 0x200]
	0x0366362C BL 0x1C16CF4
	0x03663630 MOVZ W8, 0x1
	0x03663634 STRB W8, [X21 + 0x6E4]
	0x03663638 ADRP X22, 0xADA000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move X20, X0
	008 And W21, W2, 1
	009 Call Object..ctor, X0
	010 Move [X20+16], X19
	011 Move [X20+24], W21
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x03664178 MOV X1, X19
	0x0366417C BL 0x3665EF4
	0x03664180 CBZ X0, 0x36641C0
	0x03664184 LDR X0, [X0 + 0x18]
	0x03664188 CBZ X0, 0x36641C0
	0x0366418C ADRP X9, 0xABC000
	0x03664190 LDR X9, [X9 + 0xBA0]
	0x03664194 LDR X8, [X0]
	0x03664198 LDR X1, [X9]
	0x0366419C LDRB W10, [X8 + 0x130]
	0x036641A0 LDRB W9, [X1 + 0x130]
	0x036641A4 CMP W10, W9
	0x036641A8 B.CC 0x36641CC
	0x036641AC LDR X8, [X8 + 0xC8]
	0x036641B0 ADD X8, X8, X9, 0x3, LSL
	0x036641B4 LDUR X8, [X8 - 0x8]
	0x036641B8 CMP X8, X1
	0x036641BC B.NE 0x36641CC
	0x036641C0 LDP X20, X19, [X31 + 0x10]
	0x036641C4 LDP X30, X21, [X31], #0x20
	0x036641C8 B 0x3663C74
	0x036641CC BL 0x1C171E0
	0x036641D0 STR X30, [X31 - 0x30]!
	0x036641D4 STP X22, X21, [X31 + 0x10]
	0x036641D8 STP X20, X19, [X31 + 0x20]
	0x036641DC ADRP X22, 0xD7C000
	0x036641E0 LDRB W8, [X22 + 0x6ED]
	0x036641E4 MOV X20, X2
	0x036641E8 MOV X19, X1
	0x036641EC MOV X21, X0
	0x036641F0 TBNZ X8, 0x0, 0x3664208
	0x036641F4 ADRP X0, 0xABC000
	0x036641F8 LDR X0, [X0 + 0xBA0]
	0x036641FC BL 0x1C16CF4
	0x03664200 MOVZ W8, 0x1
	0x03664204 STRB W8, [X22 + 0x6ED]
	0x03664208 LDRB W8, [X21 + 0x10]
	0x0366420C CBNZ W8, 0x366426C
	0x03664210 ADRP X8, 0xABC000
	0x03664214 LDR X8, [X8 + 0xBA0]
	0x03664218 STP X31, X31, [X21 + 0x58]
	0x0366421C LDR X0, [X8]
	0x03664220 BL 0x1C16F10
	0x03664224 MOVZ W1, 0x1
	0x03664228 MOV X2, X31
	0x0366422C MOV X22, X0
	0x03664230 BL 0x3358210
	0x03664234 CBZ X22, 0x36642B4
	0x03664238 LDR X8, [X22]
	0x0366423C MOV X0, X22
	0x03664240 MOV X1, X20
	0x03664244 LDR X9, [X8 + 0x308]
	0x03664248 LDR X2, [X8 + 0x310]
	0x0366424C BLR X9
	0x03664250 MOV X0, X21
	0x03664254 MOV X1, X19
	0x03664258 MOV X2, X22
	0x0366425C LDP X20, X19, [X31 + 0x20]
	0x03664260 LDP X22, X21, [X31 + 0x10]
	0x03664264 LDR X30, [X31], #0x30
	0x03664268 B 0x36642B8
	0x0366426C ADRP X0, 0xA8F000
	0x03664270 LDR X0, [X0 + 0xB40]
	0x03664274 BL 0x1C16D08
	0x03664278 BL 0x1C16F10
	0x0366427C MOV X19, X0
	0x03664280 ADRP X0, 0xAB9000
	0x03664284 LDR X0, [X0 + 0x68]
	0x03664288 BL 0x1C16D08
	0x0366428C MOV X1, X0
	0x03664290 MOV X0, X19
	0x03664294 MOV X2, X31
	0x03664298 BL 0x3379A44
	0x0366429C ADRP X0, 0xAD9000
	0x036642A0 LDR X0, [X0 + 0x238]
	0x036642A4 BL 0x1C16D08
	0x036642A8 MOV X1, X0
	0x036642AC MOV X0, X19
	0x036642B0 BL 0x1C16DEC
	0x036642B4 BL 0x1C16F20
	0x036642B8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X1, 0
	009 JumpIfEqual {45}
	010 Move W19, W2
	011 Move TEMP, X2
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {63}
	015 Move X8, [X0+16]
	016 Move X21, X0
	017 Compare X8, 0
	018 JumpIfEqual {94}
	019 Move X22, [X8+16]
	020 Compare X22, 0
	021 JumpIfEqual {37}
	022 Move X20, X1
	023 Move W23, 16
	024 Move W24, 24
	025 Move W8, [X21+24]
	026 Move X0, X20
	027 Move W2, W19
	028 Move X3, X31
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Move X1, [X22]
	032 Call Array.SetValue, X0, X1, X2
	033 Move X22, [X22+32]
	034 Add W19, W19, 1
	035 Compare X22, 0
	036 JumpIfNotEqual {25}
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Return 
	045 Move X0, 0xA95000
	046 Move X0, [X0+1320]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X19, X0
	050 Move X0, 0xAB8000
	051 Move X0, [X0+1600]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Move X2, X31
	056 Call ArgumentNullException..ctor, X0, X1
	057 Move X0, 0xADA000
	058 Move X0, [X0+472]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC
	063 Move [X31+12], W19
	064 Move X0, 0xA90000
	065 Move X0, [X0+1880]
	066 Call 0x1C17D08
	067 Add X1, X31, 12
	068 Call 0x1C17E04
	069 Move X19, X0
	070 Move X0, 0xA98000
	071 Move X0, [X0+1888]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X20, X0
	075 Move X0, 0xA9B000
	076 Move X0, [X0+304]
	077 Call 0x1C17D08
	078 Move X21, X0
	079 Move X0, 0xAB8000
	080 Move X0, [X0+1648]
	081 Call 0x1C17D08
	082 Move X3, X0
	083 Move X0, X20
	084 Move X1, X21
	085 Move X2, X19
	086 Move X4, X31
	087 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	088 Move X0, 0xADA000
	089 Move X0, [X0+472]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X20
	093 Call 0x1C17DEC
	094 Call 0x1C17F20

Method: System.Int32 System.Collections.ICollection.get_Count()

Disassembly:
	0x036642BC STP X20, X19, [X31 + 0x10]
	0x036642C0 LDRB W8, [X0 + 0x10]
	0x036642C4 CBNZ W8, 0x3664310
	0x036642C8 MOV X19, X2
	0x036642CC MOV X20, X0
	0x036642D0 MOV X21, X1
	0x036642D4 BL 0x3665EF4
	0x036642D8 CBZ X0, 0x36642F8
	0x036642DC STR X19, [X0 + 0x18]
	0x036642E0 LDR W8, [X20 + 0x48]
	0x036642E4 ADD W8, W8, 0x1
	0x036642E8 STR W8, [X20 + 0x48]
	0x036642EC LDP X20, X19, [X31 + 0x10]
	0x036642F0 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 Move X8, [X8+16]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move W0, W31
	009 Move X8, [X8+32]
	010 Add W0, W0, 1
	011 Compare X8, 0
	012 JumpIfNotEqual {9}
	013 Move W0, W31
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x036642F4 RET
	0x036642F8 MOV X0, X20

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x036642FC MOV X2, X19
	0x03664300 LDP X20, X19, [X31 + 0x10]
	0x03664304 MOV X1, X21
	0x03664308 LDP X30, X21, [X31], #0x20
	0x0366430C B 0x3663F60
	0x03664310 ADRP X0, 0xAB9000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call ListDictionary.get_SyncRoot, X0
	007 Return X0
	008 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x03664314 LDR X0, [X0 + 0x68]
	0x03664318 BL 0x1C16D08
	0x0366431C MOV X1, X31
	0x03664320 BL 0x320A1E4
	0x03664324 MOV X19, X0
	0x03664328 ADRP X0, 0xA8F000
	0x0366432C LDR X0, [X0 + 0xB40]
	0x03664330 BL 0x1C16D08
	0x03664334 BL 0x1C16F10
	0x03664338 MOV X1, X19
	0x0366433C MOV X2, X31
	0x03664340 MOV X20, X0
	0x03664344 BL 0x3379A44
	0x03664348 ADRP X0, 0xAD9000
	0x0366434C LDR X0, [X0 + 0x240]
	0x03664350 BL 0x1C16D08
	0x03664354 MOV X1, X0
	0x03664358 MOV X0, X20
	0x0366435C BL 0x1C16DEC
	0x03664360 STP X31, X31, [X0 + 0x58]
	0x03664364 B 0x3664368
	0x03664368 STR X30, [X31 - 0x40]!
	0x0366436C STP X24, X23, [X31 + 0x10]
	0x03664370 STP X22, X21, [X31 + 0x20]
	0x03664374 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD7D000
	006 Move X21, 0xADA000
	007 Move W8, [X20+1762]
	008 Move X21, [X21+480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xADA000
	015 Move X0, [X0+480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1762], W8
	019 Move X0, [X21]
	020 Move X20, [X19+16]
	021 Move W19, [X19+24]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move W2, W19
	025 Move X21, X0
	026 Call NodeKeyValueEnumerator..ctor, X0, X1, X2
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X0, X21
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

