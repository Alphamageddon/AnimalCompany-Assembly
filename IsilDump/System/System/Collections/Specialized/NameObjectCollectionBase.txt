Type: System.Collections.Specialized.NameObjectCollectionBase

Method: System.Void .ctor()

Disassembly:
	0x036645A4 TBNZ X8, 0x0, 0x36645BC
	0x036645A8 ADRP X0, 0xABC000
	0x036645AC LDR X0, [X0 + 0xBA0]
	0x036645B0 BL 0x1C16CF4
	0x036645B4 MOVZ W8, 0x1
	0x036645B8 STRB W8, [X21 + 0x6EE]
	0x036645BC MOV X0, X20
	0x036645C0 MOV W1, W19
	0x036645C4 BL 0x3664610
	0x036645C8 CBZ X0, 0x3664600
	0x036645CC ADRP X9, 0xABC000
	0x036645D0 LDR X9, [X9 + 0xBA0]
	0x036645D4 LDR X8, [X0]
	0x036645D8 LDR X1, [X9]
	0x036645DC LDRB W10, [X8 + 0x130]
	0x036645E0 LDRB W9, [X1 + 0x130]
	0x036645E4 CMP W10, W9
	0x036645E8 B.CC 0x366460C
	0x036645EC LDR X8, [X8 + 0xC8]
	0x036645F0 ADD X8, X8, X9, 0x3, LSL
	0x036645F4 LDUR X8, [X8 - 0x8]
	0x036645F8 CMP X8, X1
	0x036645FC B.NE 0x366460C
	0x03664600 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD7D000
	006 Move X20, 0xADA000
	007 Move W8, [X21+1785]
	008 Move X20, [X20+512]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xADA000
	015 Move X0, [X0+512]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1785], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, [X8]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call NameObjectCollectionBase..ctor, X0, X1
	033 Return 

Method: System.Void .ctor(System.Collections.IEqualityComparer equalityComparer)

Disassembly:
	0x03664694 LDR X0, [X0 + 0x18]
	0x03664698 LDP X20, X19, [X31 + 0x10]
	0x0366469C LDP X30, X21, [X31], #0x20
	0x036646A0 RET
	0x036646A4 BL 0x1C16F20
	0x036646A8 BL 0x1C171E0
	0x036646AC STP X30, X21, [X31 - 0x20]!
	0x036646B0 STP X20, X19, [X31 + 0x10]
	0x036646B4 ADRP X21, 0xD7C000
	0x036646B8 LDRB W8, [X21 + 0x6EF]
	0x036646BC MOV W19, W1
	0x036646C0 MOV X20, X0
	0x036646C4 TBNZ X8, 0x0, 0x36646DC
	0x036646C8 ADRP X0, 0xABC000
	0x036646CC LDR X0, [X0 + 0xBA0]
	0x036646D0 BL 0x1C16CF4
	0x036646D4 MOVZ W8, 0x1
	0x036646D8 STRB W8, [X21 + 0x6EF]
	0x036646DC MOV X0, X20
	0x036646E0 MOV W1, W19
	0x036646E4 BL 0x3664610
	0x036646E8 CBZ X0, 0x3664720
	0x036646EC ADRP X9, 0xABC000
	0x036646F0 LDR X9, [X9 + 0xBA0]
	0x036646F4 LDR X8, [X0]
	0x036646F8 LDR X1, [X9]
	0x036646FC LDRB W10, [X8 + 0x130]
	0x03664700 LDRB W9, [X1 + 0x130]
	0x03664704 CMP W10, W9
	0x03664708 B.CC 0x366472C
	0x0366470C LDR X8, [X8 + 0xC8]
	0x03664710 ADD X8, X8, X9, 0x3, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD7D000
	006 Move W8, [X21+1786]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xADA000
	014 Move X0, [X0+512]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1786], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Call Object..ctor, X0
	021 Compare X20, 0
	022 JumpIfNotEqual {33}
	023 Move X20, 0xADA000
	024 Move X20, [X20+512]
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X20, [X8]
	033 Compare X19, 0
	034 JumpIfEqual {43}
	035 Move [X19+32], X20
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call NameObjectCollectionBase.Reset, X0
	042 Return 
	043 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 capacity, System.Collections.IEqualityComparer equalityComparer)

Disassembly:
	0x036649FC LDR X3, [X8 + 0x308]
	0x03664A00 LDR X2, [X8 + 0x310]
	0x03664A04 LDR X30, [X31], #0x10
	0x03664A08 BR X3
	0x03664A0C BL 0x1C16F20
	0x03664A10 STR X30, [X31 - 0x10]!
	0x03664A14 LDR X0, [X0 + 0x10]
	0x03664A18 CBZ X0, 0x3664A30
	0x03664A1C LDR X8, [X0]
	0x03664A20 LDR X2, [X8 + 0x328]
	0x03664A24 LDR X1, [X8 + 0x330]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X2
	006 Move X20, X0
	007 Call NameObjectCollectionBase..ctor, X0, X1
	008 Move X0, X20
	009 Move W1, W19
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Call NameObjectCollectionBase.Reset, X0, X1
	014 Return 

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x036648D8 ADRP X0, 0xAD9000
	0x036648DC LDR X0, [X0 + 0x200]
	0x036648E0 BL 0x1C16CF4
	0x036648E4 MOVZ W8, 0x1
	0x036648E8 STRB W8, [X20 + 0x6F0]
	0x036648EC LDR X0, [X21]
	0x036648F0 LDR W8, [X0 + 0xE0]
	0x036648F4 CBNZ W8, 0x36648FC
	0x036648F8 BL 0x1C16DFC
	0x036648FC MOV X0, X19
	0x03664900 LDP X20, X19, [X31 + 0x10]
	0x03664904 MOV X1, X31
	0x03664908 LDP X30, X21, [X31], #0x20
	0x0366490C B 0x33BDD8C
	0x03664910 MOV X1, X31
	0x03664914 B 0x33BDD8C
	0x03664918 STP X30, X21, [X31 - 0x20]!
	0x0366491C STP X20, X19, [X31 + 0x10]
	0x03664920 ADRP X21, 0xD7C000
	0x03664924 LDRB W8, [X21 + 0x6F1]
	0x03664928 MOV W19, W1
	0x0366492C MOV X20, X0
	0x03664930 TBNZ X8, 0x0, 0x3664948
	0x03664934 ADRP X0, 0xA91000
	0x03664938 LDR X0, [X0 + 0x278]
	0x0366493C BL 0x1C16CF4
	0x03664940 MOVZ W8, 0x1
	0x03664944 STRB W8, [X21 + 0x6F1]
	0x03664948 LDR X0, [X20 + 0x10]
	0x0366494C CBZ X0, 0x366498C
	0x03664950 LDR X8, [X0]
	0x03664954 MOV W1, W19
	0x03664958 LDR X9, [X8 + 0x2E8]
	0x0366495C LDR X2, [X8 + 0x2F0]
	0x03664960 BLR X9
	0x03664964 CBZ X0, 0x3664980
	0x03664968 ADRP X8, 0xA91000
	0x0366496C LDR X8, [X8 + 0x278]
	0x03664970 LDR X1, [X8]
	0x03664974 LDR X8, [X0]
	0x03664978 CMP X8, X1
	0x0366497C B.NE 0x3664990
	0x03664980 LDP X20, X19, [X31 + 0x10]
	0x03664984 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD7D000
	007 Move X21, 0xA9D000
	008 Move W8, [X22+1787]
	009 Move X21, [X21+752]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xA9D000
	017 Move X0, [X0+752]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1787], W8
	021 Move X0, X20
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X22, 0xD7D000
	030 Move W8, [X22+1203]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0xA9D000
	034 Move X0, [X0+752]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+1203], W8
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X21]
	044 Move X8, [X0+184]
	045 Move X0, X20
	046 Move W1, W19
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X8, [X8+8]
	050 Move [X20+32], X8
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+48]
	054 Call NameObjectCollectionBase.Reset, X0, X1
	055 Return 

Method: System.Void .ctor(System.DBNull dummy)

Disassembly:
	0x03665910 MOV X1, X31
	0x03665914 BL 0x3291A04

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03664A94 LDR X30, [X31], #0x10
	0x03664A98 BR X3
	0x03664A9C BL 0x1C16F20
	0x03664AA0 STR X30, [X31 - 0x10]!
	0x03664AA4 LDR X0, [X0 + 0x10]
	0x03664AA8 CBZ X0, 0x3664AC0
	0x03664AAC LDR X8, [X0]
	0x03664AB0 LDR X4, [X8 + 0x3A8]
	0x03664AB4 LDR X3, [X8 + 0x3B0]
	0x03664AB8 LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+64], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03666050 MOV X19, X0
	0x03666054 BL 0x33BDD8C
	0x03666058 STR X20, [X19 + 0x18]
	0x0366605C CBZ X20, 0x366607C
	0x03666060 LDR W8, [X20 + 0x48]
	0x03666064 MOVN W9, 0x0
	0x03666068 STR W9, [X19 + 0x10]
	0x0366606C STR W8, [X19 + 0x20]
	0x03666070 LDP X20, X19, [X31 + 0x10]
	0x03666074 LDR X30, [X31], #0x20
	0x03666078 RET
	0x0366607C BL 0x1C16F20
	0x03666080 STR X30, [X31 - 0x10]!
	0x03666084 LDR X0, [X0 + 0x18]
	0x03666088 CBZ X0, 0x36660A0
	0x0366608C LDR X8, [X0]
	0x03666090 LDR X2, [X8 + 0x298]
	0x03666094 LDR X1, [X8 + 0x2A0]
	0x03666098 LDR X30, [X31], #0x10
	0x0366609C BR X2
	0x036660A0 BL 0x1C16F20
	0x036660A4 SUB X31, X31, 0x40
	0x036660A8 STP X30, X23, [X31 + 0x10]
	0x036660AC STP X22, X21, [X31 + 0x20]
	0x036660B0 STP X20, X19, [X31 + 0x30]
	0x036660B4 ADRP X22, 0xD7A000
	0x036660B8 LDRB W8, [X22 + 0x706]
	0x036660BC MOV W20, W2
	0x036660C0 MOV X19, X1
	0x036660C4 MOV X21, X0
	0x036660C8 STR W2, [X31 + 0xC]
	0x036660CC TBNZ X8, 0x0, 0x36660E4
	0x036660D0 ADRP X0, 0xA8D000
	0x036660D4 LDR X0, [X0 + 0xE18]
	0x036660D8 BL 0x1C16CF4
	0x036660DC MOVZ W8, 0x1
	0x036660E0 STRB W8, [X22 + 0x706]
	0x036660E4 CBZ X19, 0x3666250
	0x036660E8 MOV X0, X19
	0x036660EC MOV X1, X31
	0x036660F0 BL 0x339FCE4
	0x036660F4 CMP W0, 0x1
	0x036660F8 B.NE 0x3666298
	0x036660FC TBNZ X20, 0x1F, 0x36662A4
	0x03666100 MOV X0, X19
	0x03666104 MOV X1, X31
	0x03666108 BL 0x3395B7C
	0x0366610C LDR X8, [X21 + 0x18]
	0x03666110 CBZ X8, 0x366624C
	0x03666114 LDR X9, [X8]
	0x03666118 MOV W22, W0
	0x0366611C MOV X0, X8
	0x03666120 LDR X10, [X9 + 0x298]
	0x03666124 LDR X1, [X9 + 0x2A0]
	0x03666128 BLR X10
	0x0366612C SUB W8, W22, W20
	0x03666130 CMP W8, W0
	0x03666134 B.LT 0x3666360
	0x03666138 LDR X8, [X21]
	0x0366613C MOV X0, X21
	0x03666140 LDR X9, [X8 + 0x208]
	0x03666144 LDR X1, [X8 + 0x210]
	0x03666148 BLR X9
	0x0366614C CBZ X0, 0x366624C
	0x03666150 ADRP X22, 0xA8D000
	0x03666154 LDR X22, [X22 + 0xE18]
	0x03666158 MOV X21, X0
	0x0366615C LDR X8, [X21]
	0x03666160 LDR X1, [X22]
	0x03666164 LDRH W9, [X8 + 0x12E]
	0x03666168 CBZ X9, 0x366618C
	0x0366616C LDR X10, [X8 + 0xB0]
	0x03666170 ADD X10, X10, 0x8
	0x03666174 LDUR X11, [X10 - 0x8]
	0x03666178 CMP X11, X1
	0x0366617C B.EQ 0x366619C
	0x03666180 SUBS X9, X9, 0x1
	0x03666184 ADD X10, X10, 0x10
	0x03666188 B.NE 0x3666174
	0x0366618C MOV X0, X21
	0x03666190 MOV W2, W31
	0x03666194 BL 0x1C5C788
	0x03666198 B 0x36661A8
	0x0366619C LDRSW X9, [X10]
	0x036661A0 ADD X8, X8, X9, 0x4, LSL
	0x036661A4 ADD X0, X8, 0x138
	0x036661A8 LDP X8, X1, [X0]
	0x036661AC MOV X0, X21
	0x036661B0 BLR X8
	0x036661B4 TBZ X0, 0x0, 0x3666238
	0x036661B8 LDR X8, [X21]
	0x036661BC LDR X1, [X22]
	0x036661C0 LDRH W9, [X8 + 0x12E]
	0x036661C4 CBZ X9, 0x36661E8
	0x036661C8 LDR X10, [X8 + 0xB0]
	0x036661CC ADD X10, X10, 0x8
	0x036661D0 LDUR X11, [X10 - 0x8]
	0x036661D4 CMP X11, X1
	0x036661D8 B.EQ 0x36661F8
	0x036661DC SUBS X9, X9, 0x1
	0x036661E0 ADD X10, X10, 0x10
	0x036661E4 B.NE 0x36661D0
	0x036661E8 MOVZ W2, 0x1
	0x036661EC MOV X0, X21
	0x036661F0 BL 0x1C5C788
	0x036661F4 B 0x3666208
	0x036661F8 LDR W9, [X10]
	0x036661FC ADD W9, W9, 0x1
	0x03666200 ADD X8, X8, W9, 0x4, SXTW
	0x03666204 ADD X0, X8, 0x138
	0x03666208 LDP X8, X1, [X0]
	0x0366620C MOV X0, X21
	0x03666210 BLR X8
	0x03666214 MOV X1, X0
	0x03666218 ADD W23, W20, 0x1
	0x0366621C MOV X0, X19
	0x03666220 MOV W2, W20
	0x03666224 MOV X3, X31
	0x03666228 STR W23, [X31 + 0xC]
	0x0366622C BL 0x339F798
	0x03666230 MOV W20, W23
	0x03666234 B 0x366615C
	0x03666238 LDP X20, X19, [X31 + 0x30]
	0x0366623C LDP X22, X21, [X31 + 0x20]
	0x03666240 LDP X30, X23, [X31 + 0x10]
	0x03666244 ADD X31, X31, 0x40
	0x03666248 RET
	0x0366624C BL 0x1C16F20
	0x03666250 ADRP X0, 0xA92000
	0x03666254 LDR X0, [X0 + 0x528]
	0x03666258 BL 0x1C16D08
	0x0366625C BL 0x1C16F10
	0x03666260 MOV X19, X0
	0x03666264 ADRP X0, 0xAB5000
	0x03666268 LDR X0, [X0 + 0x640]
	0x0366626C BL 0x1C16D08
	0x03666270 MOV X1, X0
	0x03666274 MOV X0, X19
	0x03666278 MOV X2, X31
	0x0366627C BL 0x330E100
	0x03666280 ADRP X0, 0xAD7000
	0x03666284 LDR X0, [X0 + 0x290]
	0x03666288 BL 0x1C16D08
	0x0366628C MOV X1, X0
	0x03666290 MOV X0, X19
	0x03666294 BL 0x1C16DEC
	0x03666298 ADRP X0, 0xAD7000
	0x0366629C LDR X0, [X0 + 0x298]
	0x036662A0 B 0x3666368
	0x036662A4 ADRP X0, 0xA8D000
	0x036662A8 LDR X0, [X0 + 0x9D0]
	0x036662AC BL 0x1C16D08
	0x036662B0 MOVZ W1, 0x1
	0x036662B4 BL 0x1C16D6C
	0x036662B8 MOV X19, X0
	0x036662BC ADRP X0, 0xA8F000
	0x036662C0 LDR X0, [X0 + 0xC48]
	0x036662C4 BL 0x1C16D08
	0x036662C8 BL 0x19903D0
	0x036662CC MOV X0, X31
	0x036662D0 BL 0x33387A0
	0x036662D4 MOV X1, X0
	0x036662D8 ADD X0, X31, 0xC
	0x036662DC MOV X2, X31
	0x036662E0 BL 0x337B824
	0x036662E4 MOV X20, X0
	0x036662E8 MOV X0, X19
	0x036662EC BL 0x19903C0
	0x036662F0 MOV X0, X19
	0x036662F4 MOV X1, X20
	0x036662F8 BL 0x19980B4
	0x036662FC MOV X0, X19
	0x03666300 MOV X1, X31
	0x03666304 MOV X2, X20
	0x03666308 BL 0x1993444
	0x0366630C ADRP X0, 0xAD7000
	0x03666310 LDR X0, [X0 + 0x2A0]
	0x03666314 BL 0x1C16D08
	0x03666318 MOV X1, X19
	0x0366631C MOV X2, X31
	0x03666320 BL 0x320A16C
	0x03666324 MOV X19, X0
	0x03666328 ADRP X0, 0xA95000
	0x0366632C LDR X0, [X0 + 0x760]
	0x03666330 BL 0x1C16D08
	0x03666334 BL 0x1C16F10
	0x03666338 MOV X20, X0
	0x0366633C ADRP X0, 0xA98000
	0x03666340 LDR X0, [X0 + 0x130]
	0x03666344 BL 0x1C16D08
	0x03666348 MOV X1, X0
	0x0366634C MOV X0, X20
	0x03666350 MOV X2, X19
	0x03666354 MOV X3, X31
	0x03666358 BL 0x3311888
	0x0366635C B 0x3666398
	0x03666360 ADRP X0, 0xAB9000
	0x03666364 LDR X0, [X0 + 0x118]
	0x03666368 BL 0x1C16D08
	0x0366636C MOV X1, X31
	0x03666370 BL 0x320A1E4
	0x03666374 MOV X19, X0
	0x03666378 ADRP X0, 0xA95000
	0x0366637C LDR X0, [X0 + 0x578]
	0x03666380 BL 0x1C16D08
	0x03666384 BL 0x1C16F10
	0x03666388 MOV X1, X19
	0x0366638C MOV X2, X31
	0x03666390 MOV X20, X0
	0x03666394 BL 0x3314A68
	0x03666398 ADRP X0, 0xAD7000
	0x0366639C LDR X0, [X0 + 0x290]
	0x036663A0 BL 0x1C16D08
	0x036663A4 MOV X1, X0
	0x036663A8 MOV X0, X20
	0x036663AC BL 0x1C16DEC
	0x036663B0 STR X30, [X31 - 0x20]!
	0x036663B4 STP X20, X19, [X31 + 0x10]
	0x036663B8 ADRP X20, 0xD7A000
	0x036663BC LDRB W8, [X20 + 0x707]
	0x036663C0 MOV X19, X0
	0x036663C4 TBNZ X8, 0x0, 0x36663DC
	0x036663C8 ADRP X0, 0xA93000
	0x036663CC LDR X0, [X0 + 0xCC0]
	0x036663D0 BL 0x1C16CF4
	0x036663D4 MOVZ W8, 0x1
	0x036663D8 STRB W8, [X20 + 0x707]
	0x036663DC LDR X0, [X19 + 0x50]!
	0x036663E0 CBNZ X0, 0x3666418
	0x036663E4 ADRP X8, 0xA93000
	0x036663E8 LDR X8, [X8 + 0xCC0]
	0x036663EC LDR X0, [X8]
	0x036663F0 BL 0x1C16F10
	0x036663F4 MOV X1, X31
	0x036663F8 MOV X20, X0
	0x036663FC BL 0x33BDD8C
	0x03666400 MOV X0, X19
	0x03666404 MOV X1, X20
	0x03666408 MOV X2, X31
	0x0366640C MOV X3, X31
	0x03666410 BL 0x33EB118
	0x03666414 LDR X0, [X19]
	0x03666418 LDP X20, X19, [X31 + 0x10]
	0x0366641C LDR X30, [X31], #0x20
	0x03666420 RET
	0x03666424 MOV W0, W31
	0x03666428 RET
	0x0366642C STR X30, [X31 - 0x20]!
	0x03666430 STP X20, X19, [X31 + 0x10]
	0x03666434 ADRP X20, 0xD7A000
	0x03666438 LDRB W8, [X20 + 0x709]
	0x0366643C MOV X19, X0
	0x03666440 TBNZ X8, 0x0, 0x3666458
	0x03666444 ADRP X0, 0xAD7000
	0x03666448 LDR X0, [X0 + 0x2A8]
	0x0366644C BL 0x1C16CF4
	0x03666450 MOVZ W8, 0x1
	0x03666454 STRB W8, [X20 + 0x709]
	0x03666458 LDR X20, [X19 + 0x38]
	0x0366645C CBNZ X20, 0x3666484
	0x03666460 ADRP X8, 0xAD7000
	0x03666464 LDR X8, [X8 + 0x2A8]
	0x03666468 LDR X0, [X8]
	0x0366646C BL 0x1C16F10
	0x03666470 MOV X1, X31
	0x03666474 MOV X20, X0
	0x03666478 BL 0x33BDD8C
	0x0366647C STR X19, [X20 + 0x10]
	0x03666480 STR X20, [X19 + 0x38]
	0x03666484 MOV X0, X20
	0x03666488 LDP X20, X19, [X31 + 0x10]
	0x0366648C LDR X30, [X31], #0x20
	0x03666490 RET
	0x03666494 STR X30, [X31 - 0x20]!
	0x03666498 STP X20, X19, [X31 + 0x10]
	0x0366649C MOV X19, X1
	0x036664A0 MOV X1, X31
	0x036664A4 MOV X20, X0
	0x036664A8 BL 0x33BDD8C
	0x036664AC STR X19, [X20 + 0x10]
	0x036664B0 LDP X20, X19, [X31 + 0x10]
	0x036664B4 LDR X30, [X31], #0x20
	0x036664B8 RET
	0x036664BC STR X30, [X31 - 0x20]!
	0x036664C0 STP X20, X19, [X31 + 0x10]
	0x036664C4 ADRP X20, 0xD7A000
	0x036664C8 ADRP X19, 0xA9A000
	0x036664CC LDRB W8, [X20 + 0x70A]
	0x036664D0 LDR X19, [X19 + 0x2F0]
	0x036664D4 TBNZ X8, 0x0, 0x36664F8
	0x036664D8 ADRP X0, 0xAD7000
	0x036664DC LDR X0, [X0 + 0x200]
	0x036664E0 BL 0x1C16CF4
	0x036664E4 ADRP X0, 0xA9A000
	0x036664E8 LDR X0, [X0 + 0x2F0]
	0x036664EC BL 0x1C16CF4
	0x036664F0 MOVZ W8, 0x1
	0x036664F4 STRB W8, [X20 + 0x70A]
	0x036664F8 LDR X0, [X19]
	0x036664FC LDR W8, [X0 + 0xE0]
	0x03666500 CBNZ W8, 0x3666508
	0x03666504 BL 0x1C16DFC
	0x03666508 ADRP X20, 0xD7A000
	0x0366650C LDRB W8, [X20 + 0x4B3]
	0x03666510 CBNZ W8, 0x3666528
	0x03666514 ADRP X0, 0xA9A000
	0x03666518 LDR X0, [X0 + 0x2F0]
	0x0366651C BL 0x1C16CF4
	0x03666520 MOVZ W8, 0x1
	0x03666524 STRB W8, [X20 + 0x4B3]
	0x03666528 LDR X0, [X19]
	0x0366652C ADRP X20, 0xAD7000
	0x03666530 LDR W8, [X0 + 0xE0]
	0x03666534 LDR X20, [X20 + 0x200]
	0x03666538 CBNZ W8, 0x3666544
	0x0366653C BL 0x1C16DFC
	0x03666540 LDR X0, [X19]
	0x03666544 LDR X8, [X0 + 0xB8]
	0x03666548 LDR X9, [X20]
	0x0366654C LDP X20, X19, [X31 + 0x10]
	0x03666550 LDR X8, [X8 + 0x8]
	0x03666554 LDR X9, [X9 + 0xB8]
	0x03666558 STR X8, [X9]
	0x0366655C LDR X30, [X31], #0x20
	0x03666560 RET
	0x03666564 STP X30, X21, [X31 - 0x20]!
	0x03666568 STP X20, X19, [X31 + 0x10]
	0x0366656C MOV X19, X0
	0x03666570 LDR X0, [X0 + 0x18]
	0x03666574 CBZ X0, 0x36665E8
	0x03666578 LDR W8, [X19 + 0x20]
	0x0366657C LDR W9, [X0 + 0x48]
	0x03666580 CMP W8, W9
	0x03666584 B.NE 0x36665EC
	0x03666588 LDR X8, [X0]
	0x0366658C LDR W20, [X19 + 0x10]
	0x03666590 LDR X9, [X8 + 0x218]
	0x03666594 LDR X1, [X8 + 0x220]
	0x03666598 BLR X9
	0x0366659C SUB W21, W0, 0x1
	0x036665A0 CMP W20, W21
	0x036665A4 B.GE 0x36665B4
	0x036665A8 LDR W8, [X19 + 0x10]
	0x036665AC ADD W0, W8, 0x1
	0x036665B0 B 0x36665CC
	0x036665B4 LDR X0, [X19 + 0x18]
	0x036665B8 CBZ X0, 0x36665E8
	0x036665BC LDR X8, [X0]
	0x036665C0 LDR X9, [X8 + 0x218]
	0x036665C4 LDR X1, [X8 + 0x220]
	0x036665C8 BLR X9
	0x036665CC CMP W20, W21
	0x036665D0 STR W0, [X19 + 0x10]
	0x036665D4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0xD7B000
	014 Move W8, [X21+1788]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {80}
	021 Move X0, 0xAD8000
	022 Move X0, [X0+592]
	023 Call 0x1C17CF4
	024 Move X0, 0xAC5000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0xAC5000
	028 Move X0, [X0+1888]
	029 Call 0x1C17CF4
	030 Move X0, 0xAC5000
	031 Move X0, [X0+1896]
	032 Call 0x1C17CF4
	033 Move X0, 0xAD8000
	034 Move X0, [X0+512]
	035 Call 0x1C17CF4
	036 Move X0, 0xAD8000
	037 Move X0, [X0+552]
	038 Call 0x1C17CF4
	039 Move X0, 0xAC0000
	040 Move X0, [X0+352]
	041 Call 0x1C17CF4
	042 Move X0, 0xA8E000
	043 Move X0, [X0+2512]
	044 Call 0x1C17CF4
	045 Move X0, 0xAC0000
	046 Move X0, [X0+368]
	047 Call 0x1C17CF4
	048 Move X0, 0xA8E000
	049 Move X0, [X0+2760]
	050 Call 0x1C17CF4
	051 Move X0, 0xA8E000
	052 Move X0, [X0+1728]
	053 Call 0x1C17CF4
	054 Move X0, 0xAD8000
	055 Move X0, [X0+600]
	056 Call 0x1C17CF4
	057 Move X0, 0xAC5000
	058 Move X0, [X0+1904]
	059 Call 0x1C17CF4
	060 Move X0, 0xAC5000
	061 Move X0, [X0+1912]
	062 Call 0x1C17CF4
	063 Move X0, 0xAB8000
	064 Move X0, [X0+712]
	065 Call 0x1C17CF4
	066 Move X0, 0xAD8000
	067 Move X0, [X0+608]
	068 Call 0x1C17CF4
	069 Move X0, 0xAC5000
	070 Move X0, [X0+1920]
	071 Call 0x1C17CF4
	072 Move X0, 0xAB8000
	073 Move X0, [X0+720]
	074 Call 0x1C17CF4
	075 Move X0, 0xA8F000
	076 Move X0, [X0+672]
	077 Call 0x1C17CF4
	078 Move W8, 1
	079 Move [X21+1788], W8
	080 Compare X19, 0
	081 JumpIfEqual {356}
	082 Move X8, 0xAD8000
	083 Move X8, [X8+608]
	084 Move W2, [X20+16]
	085 Move X21, 0xAD8000
	086 Move X0, X19
	087 Move X1, [X8]
	088 Move X21, [X21+512]
	089 Move X3, X31
	090 Call SerializationInfo.AddValue, X0, X1, X2
	091 Move X0, [X21]
	092 Move X22, [X20+32]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {98}
	096 Call 0x1C17DFC
	097 Move X0, [X21]
	098 Move X8, [X0+184]
	099 Move X25, 0xA8E000
	100 Move X8, [X8]
	101 Move X25, [X25+1728]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X21, [X20+32]
	104 Compare X21, 0
	105 JumpIfEqual {166}
	106 Move X8, 0xAD8000
	107 Move X8, [X8+592]
	108 Move X9, [X21]
	109 Move X8, [X8]
	110 Move W11, [X9+304]
	111 Move W10, [X8+304]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X9, [X9+200]
	114 Add X9, X9, X10
	115 NotImplemented "Instruction LDUR not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X8, 0xAC5000
	118 Move X0, [X25]
	119 Move X8, [X8+1888]
	120 Move W9, [X0+224]
	121 Move X22, [X8]
	122 Compare W9, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move X0, X22
	126 Move X1, X31
	127 Call Type.GetTypeFromHandle, X0
	128 Move X8, 0xAC5000
	129 Move X8, [X8+1920]
	130 Call CompatibleComparer.get_DefaultHashCodeProvider
	131 Move X9, 0xAC5000
	132 Move X8, [X25]
	133 Move X9, [X9+1896]
	134 Move X21, X0
	135 Move W10, [X8+224]
	136 Move X22, [X9]
	137 Compare W10, 0
	138 JumpIfNotEqual {141}
	139 Move X0, X8
	140 Call 0x1C17DFC
	141 Move X0, X22
	142 Move X1, X31
	143 Call Type.GetTypeFromHandle, X0
	144 Move X8, 0xAD8000
	145 Move X8, [X8+600]
	146 Move X3, X0
	147 Move X0, X19
	148 Move X2, X21
	149 Move X1, [X8]
	150 Move X4, X31
	151 Call SerializationInfo.AddValue, X0, X1, X2, X3
	152 Call CompatibleComparer.get_DefaultComparer
	153 Move X8, 0xAC5000
	154 Move X8, [X8+1880]
	155 Move X21, X0
	156 Move X8, [X8]
	157 Move X0, X8
	158 Move X1, X31
	159 Call Type.GetTypeFromHandle, X0
	160 Move X8, 0xAB8000
	161 Move X8, [X8+720]
	162 Move X1, [X8]
	163 Move X3, X0
	164 Move X0, X19
	165 Move X2, X21
	166 Move X8, 0xAC5000
	167 Move X0, [X25]
	168 Move X8, [X8+1896]
	169 Move W9, [X0+224]
	170 Move X21, [X8]
	171 Compare W9, 0
	172 JumpIfNotEqual {174}
	173 Call 0x1C17DFC
	174 Move X0, X21
	175 Move X1, X31
	176 Call Type.GetTypeFromHandle, X0
	177 Move X8, 0xAD8000
	178 Move X8, [X8+600]
	179 Move X3, X0
	180 Move X0, X19
	181 Move X2, X31
	182 Move X1, [X8]
	183 Move X4, X31
	184 Call SerializationInfo.AddValue, X0, X1, X2, X3
	185 Move X8, 0xAC5000
	186 Move X8, [X8+1880]
	187 Move X1, X31
	188 Move X0, [X8]
	189 Call Type.GetTypeFromHandle, X0
	190 Move X8, 0xAB8000
	191 Move X8, [X8+720]
	192 Move X3, X0
	193 Move X0, X19
	194 Move X2, X31
	195 Move X1, [X8]
	196 Move X4, X31
	197 Call SerializationInfo.AddValue, X0, X1, X2, X3
	198 Move X0, [X20+24]
	199 Compare X0, 0
	200 JumpIfEqual {350}
	201 Move X8, [X0]
	202 Move X21, 0xAB8000
	203 Move X22, 0xA8E000
	204 Move X23, 0xA8E000
	205 Move X9, [X8+664]
	206 Move X1, [X8+672]
	207 Move X21, [X21+712]
	208 Move X22, [X22+2760]
	209 Move X23, [X23+2512]
	210 NotImplemented "Instruction BLR not yet implemented."
	211 Move X1, [X21]
	212 Move W24, W0
	213 Move X0, X19
	214 Move W2, W24
	215 Move X3, X31
	216 Call SerializationInfo.AddValue, X0, X1, X2
	217 Move X0, [X22]
	218 Move W1, W24
	219 Call 0x1C17D6C
	220 Move X8, [X23]
	221 Move X22, X0
	222 Move W1, W24
	223 Move X0, X8
	224 Call 0x1C17D6C
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move X21, X0
	227 Move X26, 0xAD8000
	228 Move X26, [X26+552]
	229 Move X23, X31
	230 Move W27, W24
	231 Add X28, X22, 32
	232 Add X29, X21, 32
	233 Move X0, [X20+24]
	234 Compare X0, 0
	235 JumpIfEqual {350}
	236 Move X8, [X0]
	237 Move W1, W23
	238 Move X9, [X8+744]
	239 Move X2, [X8+752]
	240 NotImplemented "Instruction BLR not yet implemented."
	241 Compare X0, 0
	242 JumpIfEqual {350}
	243 Move X8, [X0]
	244 Move X1, [X26]
	245 Move W10, [X8+304]
	246 Move W9, [X1+304]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move X8, [X8+200]
	249 Add X8, X8, X9
	250 NotImplemented "Instruction LDUR not yet implemented."
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Compare X22, 0
	253 JumpIfEqual {350}
	254 Move W8, [X22+24]
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Move X8, [X0+16]
	257 Move [X28], X8
	258 Compare X21, 0
	259 JumpIfEqual {350}
	260 Move X24, [X0+24]
	261 Compare X24, 0
	262 JumpIfEqual {269}
	263 Move X8, [X21]
	264 Move X0, X24
	265 Move X1, [X8+64]
	266 Call 0x1C17E00
	267 Compare X0, 0
	268 JumpIfEqual {353}
	269 Move W8, [X21+24]
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move [X29], X24
	272 Add X23, X23, 1
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Move X8, 0xAC0000
	275 Move X0, [X25]
	276 Move X8, [X8+368]
	277 Move X27, 0xAC5000
	278 Move X26, 0xAC0000
	279 Move X25, 0xAC5000
	280 Move X24, 0xA8F000
	281 Move X27, [X27+1904]
	282 Move W9, [X0+224]
	283 Move X23, [X8]
	284 Move X26, [X26+352]
	285 Move X25, [X25+1912]
	286 Move X24, [X24+672]
	287 Compare W9, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1C17DFC
	290 Move X0, X23
	291 Move X1, X31
	292 Call Type.GetTypeFromHandle, X0
	293 Move X1, [X27]
	294 Move X3, X0
	295 Move X0, X19
	296 Move X2, X22
	297 Move X4, X31
	298 Call SerializationInfo.AddValue, X0, X1, X2, X3
	299 Move X0, [X26]
	300 Move X1, X31
	301 Call Type.GetTypeFromHandle, X0
	302 Move X1, [X25]
	303 Move X3, X0
	304 Move X0, X19
	305 Move X2, X21
	306 Move X4, X31
	307 Call SerializationInfo.AddValue, X0, X1, X2, X3
	308 Move W2, [X20+72]
	309 Move X1, [X24]
	310 Move X0, X19
	311 Move X20, [X31+80]
	312 Move X19, [X31+88]
	313 Move X22, [X31+64]
	314 Move X21, [X31+72]
	315 Move X24, [X31+48]
	316 Move X23, [X31+56]
	317 Move X26, [X31+32]
	318 Move X25, [X31+40]
	319 Move X28, [X31+16]
	320 Move X27, [X31+24]
	321 Move X3, X31
	322 Move X29, [X31+96]
	323 Move X30, [X31+104]
	324 Call SerializationInfo.AddValue, X0, X1, X2
	325 Return 
	326 Move X8, 0xAC5000
	327 Move X0, [X25]
	328 Move X22, [X21+24]
	329 Move X8, [X8+1896]
	330 Move W9, [X0+224]
	331 Move X23, [X8]
	332 Compare W9, 0
	333 JumpIfNotEqual {335}
	334 Call 0x1C17DFC
	335 Move X0, X23
	336 Move X1, X31
	337 Call Type.GetTypeFromHandle, X0
	338 Move X8, 0xAD8000
	339 Move X8, [X8+600]
	340 Move X3, X0
	341 Move X0, X19
	342 Move X2, X22
	343 Move X1, [X8]
	344 Move X4, X31
	345 Call SerializationInfo.AddValue, X0, X1, X2, X3
	346 Move X8, 0xAC5000
	347 Move X21, [X21+16]
	348 Move X8, [X8+1880]
	349 Move X0, [X8]
	350 Call 0x1C17F20
	351 Call 0x1C181E0
	352 Call 0x1C17F28
	353 Call 0x1C17F44
	354 Move X1, X31
	355 Call 0x1C17DEC
	356 Move X0, 0xA93000
	357 Move X0, [X0+1320]
	358 Call 0x1C17D08
	359 Call 0x1C17F10
	360 Move X19, X0
	361 Move X0, 0xAB8000
	362 Move X0, [X0+728]
	363 Call 0x1C17D08
	364 Move X1, X0
	365 Move X0, X19
	366 Move X2, X31
	367 Call ArgumentNullException..ctor, X0, X1
	368 Move X0, 0xAD8000
	369 Move X0, [X0+616]
	370 Call 0x1C17D08
	371 Move X1, X0
	372 Move X0, X19
	373 Call 0x1C17DEC

Method: System.Void OnDeserialization(System.Object sender)

Disassembly:
	0x03666784 ADRP X0, 0xAD7000
	0x03666788 LDR X0, [X0 + 0x288]
	0x0366678C BL 0x1C16CF4
	0x03666790 MOVZ W8, 0x1
	0x03666794 STRB W8, [X21 + 0x70B]
	0x03666798 LDR X0, [X20]
	0x0366679C LDR X19, [X19 + 0x10]
	0x036667A0 BL 0x1C16F10
	0x036667A4 MOV X1, X19
	0x036667A8 MOV X20, X0
	0x036667AC BL 0x3666040
	0x036667B0 MOV X0, X20
	0x036667B4 LDP X20, X19, [X31 + 0x10]
	0x036667B8 LDP X30, X21, [X31], #0x20
	0x036667BC RET
	0x036667C0 STR X30, [X31 - 0x10]!
	0x036667C4 LDR X0, [X0 + 0x10]
	0x036667C8 CBZ X0, 0x36667E0
	0x036667CC LDR X8, [X0]
	0x036667D0 LDR X2, [X8 + 0x218]
	0x036667D4 LDR X1, [X8 + 0x220]
	0x036667D8 LDR X30, [X31], #0x10
	0x036667DC BR X2
	0x036667E0 BL 0x1C16F20
	0x036667E4 SUB X31, X31, 0x40
	0x036667E8 STP X30, X23, [X31 + 0x10]
	0x036667EC STP X22, X21, [X31 + 0x20]
	0x036667F0 STP X20, X19, [X31 + 0x30]
	0x036667F4 ADRP X22, 0xD7A000
	0x036667F8 LDRB W8, [X22 + 0x70C]
	0x036667FC MOV W20, W2
	0x03666800 MOV X19, X1
	0x03666804 MOV X21, X0
	0x03666808 STR W2, [X31 + 0xC]
	0x0366680C TBNZ X8, 0x0, 0x3666824
	0x03666810 ADRP X0, 0xA8D000
	0x03666814 LDR X0, [X0 + 0xE18]
	0x03666818 BL 0x1C16CF4
	0x0366681C MOVZ W8, 0x1
	0x03666820 STRB W8, [X22 + 0x70C]
	0x03666824 CBZ X19, 0x3666984
	0x03666828 MOV X0, X19
	0x0366682C MOV X1, X31
	0x03666830 BL 0x339FCE4
	0x03666834 CMP W0, 0x1
	0x03666838 B.NE 0x36669CC
	0x0366683C TBNZ X20, 0x1F, 0x36669D8
	0x03666840 MOV X0, X19
	0x03666844 MOV X1, X31
	0x03666848 BL 0x3395B7C
	0x0366684C LDR X8, [X21 + 0x10]
	0x03666850 CBZ X8, 0x3666980
	0x03666854 LDR X9, [X8]
	0x03666858 MOV W22, W0
	0x0366685C MOV X0, X8
	0x03666860 LDR X10, [X9 + 0x218]
	0x03666864 LDR X1, [X9 + 0x220]
	0x03666868 BLR X10
	0x0366686C SUB W8, W22, W20
	0x03666870 CMP W8, W0
	0x03666874 B.LT 0x3666A94
	0x03666878 MOV X0, X21
	0x0366687C BL 0x3666764
	0x03666880 CBZ X0, 0x3666980
	0x03666884 ADRP X22, 0xA8D000
	0x03666888 LDR X22, [X22 + 0xE18]
	0x0366688C MOV X21, X0
	0x03666890 LDR X8, [X21]
	0x03666894 LDR X1, [X22]
	0x03666898 LDRH W9, [X8 + 0x12E]
	0x0366689C CBZ X9, 0x36668C0
	0x036668A0 LDR X10, [X8 + 0xB0]
	0x036668A4 ADD X10, X10, 0x8
	0x036668A8 LDUR X11, [X10 - 0x8]
	0x036668AC CMP X11, X1
	0x036668B0 B.EQ 0x36668D0
	0x036668B4 SUBS X9, X9, 0x1
	0x036668B8 ADD X10, X10, 0x10
	0x036668BC B.NE 0x36668A8
	0x036668C0 MOV X0, X21
	0x036668C4 MOV W2, W31
	0x036668C8 BL 0x1C5C788
	0x036668CC B 0x36668DC
	0x036668D0 LDRSW X9, [X10]
	0x036668D4 ADD X8, X8, X9, 0x4, LSL
	0x036668D8 ADD X0, X8, 0x138
	0x036668DC LDP X8, X1, [X0]
	0x036668E0 MOV X0, X21
	0x036668E4 BLR X8
	0x036668E8 TBZ X0, 0x0, 0x366696C
	0x036668EC LDR X8, [X21]
	0x036668F0 LDR X1, [X22]
	0x036668F4 LDRH W9, [X8 + 0x12E]
	0x036668F8 CBZ X9, 0x366691C
	0x036668FC LDR X10, [X8 + 0xB0]
	0x03666900 ADD X10, X10, 0x8
	0x03666904 LDUR X11, [X10 - 0x8]
	0x03666908 CMP X11, X1
	0x0366690C B.EQ 0x366692C
	0x03666910 SUBS X9, X9, 0x1
	0x03666914 ADD X10, X10, 0x10
	0x03666918 B.NE 0x3666904
	0x0366691C MOVZ W2, 0x1
	0x03666920 MOV X0, X21
	0x03666924 BL 0x1C5C788
	0x03666928 B 0x366693C
	0x0366692C LDR W9, [X10]
	0x03666930 ADD W9, W9, 0x1
	0x03666934 ADD X8, X8, W9, 0x4, SXTW
	0x03666938 ADD X0, X8, 0x138
	0x0366693C LDP X8, X1, [X0]
	0x03666940 MOV X0, X21
	0x03666944 BLR X8
	0x03666948 MOV X1, X0
	0x0366694C ADD W23, W20, 0x1
	0x03666950 MOV X0, X19
	0x03666954 MOV W2, W20
	0x03666958 MOV X3, X31
	0x0366695C STR W23, [X31 + 0xC]
	0x03666960 BL 0x339F798
	0x03666964 MOV W20, W23
	0x03666968 B 0x3666890
	0x0366696C LDP X20, X19, [X31 + 0x30]
	0x03666970 LDP X22, X21, [X31 + 0x20]
	0x03666974 LDP X30, X23, [X31 + 0x10]
	0x03666978 ADD X31, X31, 0x40
	0x0366697C RET
	0x03666980 BL 0x1C16F20
	0x03666984 ADRP X0, 0xA92000
	0x03666988 LDR X0, [X0 + 0x528]
	0x0366698C BL 0x1C16D08
	0x03666990 BL 0x1C16F10
	0x03666994 MOV X19, X0
	0x03666998 ADRP X0, 0xAB5000
	0x0366699C LDR X0, [X0 + 0x640]
	0x036669A0 BL 0x1C16D08
	0x036669A4 MOV X1, X0
	0x036669A8 MOV X0, X19
	0x036669AC MOV X2, X31
	0x036669B0 BL 0x330E100
	0x036669B4 ADRP X0, 0xAD7000
	0x036669B8 LDR X0, [X0 + 0x2C8]
	0x036669BC BL 0x1C16D08
	0x036669C0 MOV X1, X0
	0x036669C4 MOV X0, X19
	0x036669C8 BL 0x1C16DEC
	0x036669CC ADRP X0, 0xAD7000
	0x036669D0 LDR X0, [X0 + 0x298]
	0x036669D4 B 0x3666A9C
	0x036669D8 ADRP X0, 0xA8D000
	0x036669DC LDR X0, [X0 + 0x9D0]
	0x036669E0 BL 0x1C16D08
	0x036669E4 MOVZ W1, 0x1
	0x036669E8 BL 0x1C16D6C
	0x036669EC MOV X19, X0
	0x036669F0 ADRP X0, 0xA8F000
	0x036669F4 LDR X0, [X0 + 0xC48]
	0x036669F8 BL 0x1C16D08
	0x036669FC BL 0x19903D0
	0x03666A00 MOV X0, X31
	0x03666A04 BL 0x33387A0
	0x03666A08 MOV X1, X0
	0x03666A0C ADD X0, X31, 0xC
	0x03666A10 MOV X2, X31
	0x03666A14 BL 0x337B824
	0x03666A18 MOV X20, X0
	0x03666A1C MOV X0, X19
	0x03666A20 BL 0x19903C0
	0x03666A24 MOV X0, X19
	0x03666A28 MOV X1, X20
	0x03666A2C BL 0x19980B4
	0x03666A30 MOV X0, X19
	0x03666A34 MOV X1, X31
	0x03666A38 MOV X2, X20
	0x03666A3C BL 0x1993444
	0x03666A40 ADRP X0, 0xAD7000
	0x03666A44 LDR X0, [X0 + 0x2A0]
	0x03666A48 BL 0x1C16D08
	0x03666A4C MOV X1, X19
	0x03666A50 MOV X2, X31
	0x03666A54 BL 0x320A16C
	0x03666A58 MOV X19, X0
	0x03666A5C ADRP X0, 0xA95000
	0x03666A60 LDR X0, [X0 + 0x760]
	0x03666A64 BL 0x1C16D08
	0x03666A68 BL 0x1C16F10
	0x03666A6C MOV X20, X0
	0x03666A70 ADRP X0, 0xA98000
	0x03666A74 LDR X0, [X0 + 0x130]
	0x03666A78 BL 0x1C16D08
	0x03666A7C MOV X1, X0
	0x03666A80 MOV X0, X20
	0x03666A84 MOV X2, X19
	0x03666A88 MOV X3, X31
	0x03666A8C BL 0x3311888
	0x03666A90 B 0x3666ACC
	0x03666A94 ADRP X0, 0xAB9000
	0x03666A98 LDR X0, [X0 + 0x118]
	0x03666A9C BL 0x1C16D08
	0x03666AA0 MOV X1, X31
	0x03666AA4 BL 0x320A1E4
	0x03666AA8 MOV X19, X0
	0x03666AAC ADRP X0, 0xA95000
	0x03666AB0 LDR X0, [X0 + 0x578]
	0x03666AB4 BL 0x1C16D08
	0x03666AB8 BL 0x1C16F10
	0x03666ABC MOV X1, X19
	0x03666AC0 MOV X2, X31
	0x03666AC4 MOV X20, X0
	0x03666AC8 BL 0x3314A68
	0x03666ACC ADRP X0, 0xAD7000
	0x03666AD0 LDR X0, [X0 + 0x2C8]
	0x03666AD4 BL 0x1C16D08
	0x03666AD8 MOV X1, X0
	0x03666ADC MOV X0, X20
	0x03666AE0 BL 0x1C16DEC
	0x03666AE4 STR X30, [X31 - 0x20]!
	0x03666AE8 STP X20, X19, [X31 + 0x10]
	0x03666AEC ADRP X20, 0xD7A000
	0x03666AF0 LDRB W8, [X20 + 0x70D]
	0x03666AF4 MOV X19, X0
	0x03666AF8 TBNZ X8, 0x0, 0x3666B10
	0x03666AFC ADRP X0, 0xA94000
	0x03666B00 LDR X0, [X0 + 0x2F0]
	0x03666B04 BL 0x1C16CF4
	0x03666B08 MOVZ W8, 0x1
	0x03666B0C STRB W8, [X20 + 0x70D]
	0x03666B10 LDR X19, [X19 + 0x10]
	0x03666B14 CBZ X19, 0x3666B84
	0x03666B18 ADRP X10, 0xA94000
	0x03666B1C LDR X8, [X19]
	0x03666B20 LDR X10, [X10 + 0x2F0]
	0x03666B24 LDRH W9, [X8 + 0x12E]
	0x03666B28 LDR X1, [X10]
	0x03666B2C CBZ X9, 0x3666B50
	0x03666B30 LDR X10, [X8 + 0xB0]
	0x03666B34 ADD X10, X10, 0x8
	0x03666B38 LDUR X11, [X10 - 0x8]
	0x03666B3C CMP X11, X1
	0x03666B40 B.EQ 0x3666B60
	0x03666B44 SUBS X9, X9, 0x1
	0x03666B48 ADD X10, X10, 0x10
	0x03666B4C B.NE 0x3666B38
	0x03666B50 MOVZ W2, 0x2
	0x03666B54 MOV X0, X19
	0x03666B58 BL 0x1C5C788
	0x03666B5C B 0x3666B70
	0x03666B60 LDR W9, [X10]
	0x03666B64 ADD W9, W9, 0x2
	0x03666B68 ADD X8, X8, W9, 0x4, SXTW
	0x03666B6C ADD X0, X8, 0x138
	0x03666B70 LDP X2, X1, [X0]
	0x03666B74 MOV X0, X19
	0x03666B78 LDP X20, X19, [X31 + 0x10]
	0x03666B7C LDR X30, [X31], #0x20
	0x03666B80 BR X2
	0x03666B84 BL 0x1C16F20
	0x03666B88 MOV W0, W31
	0x03666B8C RET
	0x03666B90 STR X30, [X31 - 0x20]!
	0x03666B94 STP X20, X19, [X31 + 0x10]
	0x03666B98 ADRP X19, 0xD7A000
	0x03666B9C ADRP X20, 0xAD7000
	0x03666BA0 LDRB W8, [X19 + 0x70E]
	0x03666BA4 LDR X20, [X20 + 0x2D0]
	0x03666BA8 TBNZ X8, 0x0, 0x3666BC0
	0x03666BAC ADRP X0, 0xAD7000
	0x03666BB0 LDR X0, [X0 + 0x2D0]
	0x03666BB4 BL 0x1C16CF4
	0x03666BB8 MOVZ W8, 0x1
	0x03666BBC STRB W8, [X19 + 0x70E]
	0x03666BC0 LDR X0, [X20]
	0x03666BC4 BL 0x1C16D9C
	0x03666BC8 STR X30, [X31 - 0x30]!
	0x03666BCC STP X22, X21, [X31 + 0x10]
	0x03666BD0 STP X20, X19, [X31 + 0x20]
	0x03666BD4 ADRP X22, 0xD7A000
	0x03666BD8 LDRB W8, [X22 + 0x70F]
	0x03666BDC MOV X19, X2
	0x03666BE0 MOV X20, X1
	0x03666BE4 MOV X21, X0
	0x03666BE8 TBNZ X8, 0x0, 0x3666C0C
	0x03666BEC ADRP X0, 0xAC4000
	0x03666BF0 LDR X0, [X0 + 0x248]
	0x03666BF4 BL 0x1C16CF4
	0x03666BF8 ADRP X0, 0xAB7000
	0x03666BFC LDR X0, [X0 + 0x918]
	0x03666C00 BL 0x1C16CF4
	0x03666C04 MOVZ W8, 0x1
	0x03666C08 STRB W8, [X22 + 0x70F]
	0x03666C0C CMP X20, X19
	0x03666C10 B.EQ 0x3666C70
	0x03666C14 MOV W0, W31
	0x03666C18 CBZ X20, 0x3666D3C
	0x03666C1C CBZ X19, 0x3666D3C
	0x03666C20 LDR X21, [X21 + 0x10]
	0x03666C24 CBZ X21, 0x3666C78
	0x03666C28 ADRP X10, 0xAB7000
	0x03666C2C LDR X8, [X21]
	0x03666C30 LDR X10, [X10 + 0x918]
	0x03666C34 LDRH W9, [X8 + 0x12E]
	0x03666C38 LDR X1, [X10]
	0x03666C3C CBZ X9, 0x3666C60
	0x03666C40 LDR X10, [X8 + 0xB0]
	0x03666C44 ADD X10, X10, 0x8
	0x03666C48 LDUR X11, [X10 - 0x8]
	0x03666C4C CMP X11, X1
	0x03666C50 B.EQ 0x3666CD4
	0x03666C54 SUBS X9, X9, 0x1
	0x03666C58 ADD X10, X10, 0x10
	0x03666C5C B.NE 0x3666C48
	0x03666C60 MOV X0, X21
	0x03666C64 MOV W2, W31
	0x03666C68 BL 0x1C5C788
	0x03666C6C B 0x3666CE0
	0x03666C70 MOVZ W0, 0x1
	0x03666C74 B 0x3666D3C
	0x03666C78 ADRP X22, 0xAC4000
	0x03666C7C LDR X22, [X22 + 0x248]
	0x03666C80 LDR X1, [X22]
	0x03666C84 MOV X0, X20
	0x03666C88 BL 0x1C16E00
	0x03666C8C MOV X21, X0
	0x03666C90 CBZ X0, 0x3666CF8
	0x03666C94 LDR X8, [X21]
	0x03666C98 LDR X1, [X22]
	0x03666C9C LDRH W9, [X8 + 0x12E]
	0x03666CA0 CBZ X9, 0x3666CC4
	0x03666CA4 LDR X10, [X8 + 0xB0]
	0x03666CA8 ADD X10, X10, 0x8
	0x03666CAC LDUR X11, [X10 - 0x8]
	0x03666CB0 CMP X11, X1
	0x03666CB4 B.EQ 0x3666D18
	0x03666CB8 SUBS X9, X9, 0x1
	0x03666CBC ADD X10, X10, 0x10
	0x03666CC0 B.NE 0x3666CAC
	0x03666CC4 MOV X0, X21
	0x03666CC8 MOV W2, W31
	0x03666CCC BL 0x1C5C788
	0x03666CD0 B 0x3666D24
	0x03666CD4 LDRSW X9, [X10]
	0x03666CD8 ADD X8, X8, X9, 0x4, LSL
	0x03666CDC ADD X0, X8, 0x138
	0x03666CE0 LDP X8, X3, [X0]
	0x03666CE4 MOV X0, X21
	0x03666CE8 MOV X1, X20
	0x03666CEC MOV X2, X19
	0x03666CF0 BLR X8
	0x03666CF4 B 0x3666D34
	0x03666CF8 LDR X8, [X20]
	0x03666CFC MOV X0, X20
	0x03666D00 MOV X1, X19
	0x03666D04 LDP X20, X19, [X31 + 0x20]
	0x03666D08 LDP X3, X2, [X8 + 0x138]
	0x03666D0C LDP X22, X21, [X31 + 0x10]
	0x03666D10 LDR X30, [X31], #0x30
	0x03666D14 BR X3
	0x03666D18 LDRSW X9, [X10]
	0x03666D1C ADD X8, X8, X9, 0x4, LSL
	0x03666D20 ADD X0, X8, 0x138
	0x03666D24 LDP X8, X2, [X0]
	0x03666D28 MOV X0, X21
	0x03666D2C MOV X1, X19
	0x03666D30 BLR X8
	0x03666D34 CMP W0, 0x0
	0x03666D38 CSET W0, EQ
	0x03666D3C LDP X20, X19, [X31 + 0x20]
	0x03666D40 LDP X22, X21, [X31 + 0x10]
	0x03666D44 LDR X30, [X31], #0x30
	0x03666D48 RET
	0x03666D4C B 0x3666D54
	0x03666D50 B 0x3666D54
	0x03666D54 MOV X19, X0
	0x03666D58 CMP W1, 0x1
	0x03666D5C B.NE 0x3666DBC
	0x03666D60 MOV X0, X19
	0x03666D64 BL 0x3EB1AD0
	0x03666D68 MOV X19, X0
	0x03666D6C ADRP X0, 0xA95000
	0x03666D70 LDR X0, [X0 + 0x578]
	0x03666D74 BL 0x1C16D08
	0x03666D78 LDR X8, [X19]
	0x03666D7C LDR X1, [X8]
	0x03666D80 BL 0x1C17270
	0x03666D84 TBZ X0, 0x0, 0x3666D94
	0x03666D88 BL 0x3EB1AE0
	0x03666D8C MOV W0, W31
	0x03666D90 B 0x3666D3C
	0x03666D94 MOVZ W0, 0x8
	0x03666D98 BL 0x3EB1AF0
	0x03666D9C LDR X8, [X19]
	0x03666DA0 STR X8, [X0]
	0x03666DA4 ADRP X1, 0x84E000
	0x03666DA8 ADD X1, X1, 0xE58
	0x03666DAC MOV X2, X31
	0x03666DB0 BL 0x3EB1B00
	0x03666DB4 MOV X19, X0
	0x03666DB8 BL 0x3EB1AE0
	0x03666DBC MOV X0, X19
	0x03666DC0 BL 0x1D2C690
	0x03666DC4 BL 0x1990590
	0x03666DC8 STP X30, X21, [X31 - 0x20]!
	0x03666DCC STP X20, X19, [X31 + 0x10]
	0x03666DD0 ADRP X21, 0xD7A000
	0x03666DD4 LDRB W8, [X21 + 0x710]
	0x03666DD8 MOV X19, X1
	0x03666DDC MOV X20, X0
	0x03666DE0 TBNZ X8, 0x0, 0x3666DF8
	0x03666DE4 ADRP X0, 0xAC4000
	0x03666DE8 LDR X0, [X0 + 0x338]
	0x03666DEC BL 0x1C16CF4
	0x03666DF0 MOVZ W8, 0x1
	0x03666DF4 STRB W8, [X21 + 0x710]
	0x03666DF8 CBZ X19, 0x3666E88
	0x03666DFC LDR X20, [X20 + 0x18]
	0x03666E00 CBZ X20, 0x3666E4C
	0x03666E04 ADRP X10, 0xAC4000
	0x03666E08 LDR X8, [X20]
	0x03666E0C LDR X10, [X10 + 0x338]
	0x03666E10 LDRH W9, [X8 + 0x12E]
	0x03666E14 LDR X1, [X10]
	0x03666E18 CBZ X9, 0x3666E3C
	0x03666E1C LDR X10, [X8 + 0xB0]
	0x03666E20 ADD X10, X10, 0x8
	0x03666E24 LDUR X11, [X10 - 0x8]
	0x03666E28 CMP X11, X1
	0x03666E2C B.EQ 0x3666E64
	0x03666E30 SUBS X9, X9, 0x1
	0x03666E34 ADD X10, X10, 0x10
	0x03666E38 B.NE 0x3666E24
	0x03666E3C MOV X0, X20
	0x03666E40 MOV W2, W31
	0x03666E44 BL 0x1C5C788
	0x03666E48 B 0x3666E70
	0x03666E4C LDR X8, [X19]
	0x03666E50 MOV X0, X19
	0x03666E54 LDP X20, X19, [X31 + 0x10]
	0x03666E58 LDP X2, X1, [X8 + 0x158]
	0x03666E5C LDP X30, X21, [X31], #0x20
	0x03666E60 BR X2
	0x03666E64 LDRSW X9, [X10]
	0x03666E68 ADD X8, X8, X9, 0x4, LSL
	0x03666E6C ADD X0, X8, 0x138
	0x03666E70 LDP X3, X2, [X0]
	0x03666E74 MOV X0, X20
	0x03666E78 MOV X1, X19
	0x03666E7C LDP X20, X19, [X31 + 0x10]
	0x03666E80 LDP X30, X21, [X31], #0x20
	0x03666E84 BR X3
	0x03666E88 ADRP X0, 0xA92000
	0x03666E8C LDR X0, [X0 + 0x528]
	0x03666E90 BL 0x1C16D08
	0x03666E94 BL 0x1C16F10
	0x03666E98 MOV X19, X0
	0x03666E9C ADRP X0, 0xA98000
	0x03666EA0 LDR X0, [X0 + 0x8A8]
	0x03666EA4 BL 0x1C16D08
	0x03666EA8 MOV X1, X0
	0x03666EAC MOV X0, X19
	0x03666EB0 MOV X2, X31
	0x03666EB4 BL 0x330E100
	0x03666EB8 ADRP X0, 0xAD7000
	0x03666EBC LDR X0, [X0 + 0x2D8]
	0x03666EC0 BL 0x1C16D08
	0x03666EC4 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0xD7B000
	015 Move W8, [X20+1789]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {83}
	021 Move X0, 0xAD8000
	022 Move X0, [X0+592]
	023 Call 0x1C17CF4
	024 Move X0, 0xAC5000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0xAB8000
	028 Move X0, [X0+2328]
	029 Call 0x1C17CF4
	030 Move X0, 0xAC5000
	031 Move X0, [X0+1888]
	032 Call 0x1C17CF4
	033 Move X0, 0xAB8000
	034 Move X0, [X0+2304]
	035 Call 0x1C17CF4
	036 Move X0, 0xAC5000
	037 Move X0, [X0+1896]
	038 Call 0x1C17CF4
	039 Move X0, 0xAC5000
	040 Move X0, [X0+824]
	041 Call 0x1C17CF4
	042 Move X0, 0xAC0000
	043 Move X0, [X0+352]
	044 Call 0x1C17CF4
	045 Move X0, 0xA8E000
	046 Move X0, [X0+2512]
	047 Call 0x1C17CF4
	048 Move X0, 0xAC0000
	049 Move X0, [X0+368]
	050 Call 0x1C17CF4
	051 Move X0, 0xA8E000
	052 Move X0, [X0+2760]
	053 Call 0x1C17CF4
	054 Move X0, 0xA8E000
	055 Move X0, [X0+1728]
	056 Call 0x1C17CF4
	057 Move X0, 0xAD8000
	058 Move X0, [X0+600]
	059 Call 0x1C17CF4
	060 Move X0, 0xAC5000
	061 Move X0, [X0+1904]
	062 Call 0x1C17CF4
	063 Move X0, 0xAC5000
	064 Move X0, [X0+1912]
	065 Call 0x1C17CF4
	066 Move X0, 0xAB8000
	067 Move X0, [X0+712]
	068 Call 0x1C17CF4
	069 Move X0, 0xAD8000
	070 Move X0, [X0+608]
	071 Call 0x1C17CF4
	072 Move X0, 0xAC5000
	073 Move X0, [X0+1920]
	074 Call 0x1C17CF4
	075 Move X0, 0xAB8000
	076 Move X0, [X0+720]
	077 Call 0x1C17CF4
	078 Move X0, 0xA8F000
	079 Move X0, [X0+672]
	080 Call 0x1C17CF4
	081 Move W8, 1
	082 Move [X20+1789], W8
	083 Move X8, [X19+32]
	084 Compare X8, 0
	085 JumpIfNotEqual {480}
	086 Move X25, [X19+64]
	087 Compare X25, 0
	088 JumpIfEqual {495}
	089 Move X0, X25
	090 Move X1, X31
	091 Move [X19+64], X31
	092 Call SerializationInfo.GetEnumerator, X0
	093 Compare X0, 0
	094 JumpIfEqual {511}
	095 Move X1, X31
	096 Move X26, X0
	097 Call SerializationInfoEnumerator.MoveNext, X0
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {422}
	102 Move W21, 0xD537
	103 Move W27, 0xFBF7
	104 Move W28, 0xC1D8
	105 Move X23, X31
	106 Move X22, X31
	107 Move W24, W31
	108 NotImplemented "Instruction MOVK not yet implemented."
	109 NotImplemented "Instruction MOVK not yet implemented."
	110 NotImplemented "Instruction MOVK not yet implemented."
	111 Move [X31+20], W31
	112 Move [X31+24], X31
	113 Move [X31], X31
	114 Move [X31+8], X31
	115 Move X0, X26
	116 Move X1, X31
	117 Call SerializationInfoEnumerator.get_Name, X0
	118 Move X1, X31
	119 Move X29, X0
	120 Call <PrivateImplementationDetails>.ComputeStringHash, X0
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W8, 0xF9D2
	124 NotImplemented "Instruction MOVK not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X8, 0xAD8000
	127 Move X8, [X8+608]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X1, [X8]
	130 Move X0, X29
	131 Move X2, X31
	132 Move X20, X8
	133 Call String.op_Equality, X0, X1
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {415}
	138 Move X1, [X20]
	139 Move X0, X25
	140 Move X2, X31
	141 Call SerializationInfo.GetBoolean, X0, X1
	142 Move [X31+28], W0
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move W8, 0x32ED
	145 NotImplemented "Instruction MOVK not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X8, 0xAD8000
	149 Move X8, [X8+600]
	150 Move X0, X29
	151 Move X2, X31
	152 Move X1, [X8]
	153 Call String.op_Equality, X0, X1
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {415}
	158 Move X8, 0xA8E000
	159 Move X8, [X8+1728]
	160 Move X9, 0xAC5000
	161 Move X0, [X8]
	162 Move W8, [X0+224]
	163 Move X9, [X9+1896]
	164 Move X20, [X9]
	165 Compare W8, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1C17DFC
	168 Move X0, X20
	169 Move X1, X31
	170 Call Type.GetTypeFromHandle, X0
	171 Move X8, 0xAD8000
	172 Move X8, [X8+600]
	173 Move X2, X0
	174 Move X0, X25
	175 Move X3, X31
	176 Move X1, [X8]
	177 Call SerializationInfo.GetValue, X0, X1, X2
	178 Compare X0, 0
	179 JumpIfEqual {407}
	180 Move X8, 0xAC5000
	181 Move X8, [X8+824]
	182 Move X29, X0
	183 Move X20, [X8]
	184 Move X1, X20
	185 Call 0x1C17E00
	186 Move [X31+8], X0
	187 Compare X0, 0
	188 JumpIfNotEqual {415}
	189 Move W8, 0x908B
	190 NotImplemented "Instruction MOVK not yet implemented."
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X8, 0xA8F000
	193 Move X8, [X8+672]
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move X1, [X8]
	196 Move X0, X29
	197 Move X2, X31
	198 Move X20, X8
	199 Call String.op_Equality, X0, X1
	200 Move TEMP, X0
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfNotEqual {415}
	204 Move X1, [X20]
	205 Move X0, X25
	206 Move X2, X31
	207 Call SerializationInfo.GetInt32, X0, X1
	208 Move W8, 1
	209 Move [X31+20], W0
	210 Move [X31+24], W8
	211 Move X9, 0xAB8000
	212 Move X9, [X9+712]
	213 Move W8, 0x225B
	214 NotImplemented "Instruction MOVK not yet implemented."
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move W8, 0xB894
	217 NotImplemented "Instruction MOVK not yet implemented."
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X1, [X9]
	220 Move X0, X29
	221 Move X2, X31
	222 Move X20, X9
	223 Call String.op_Equality, X0, X1
	224 Move TEMP, X0
	225 And TEMP, TEMP, 1
	226 Compare TEMP, 1
	227 JumpIfNotEqual {415}
	228 Move X1, [X20]
	229 Move X0, X25
	230 Move X2, X31
	231 Call SerializationInfo.GetInt32, X0, X1
	232 Move W24, W0
	233 Move X8, 0xAB8000
	234 Move X8, [X8+720]
	235 Move X0, X29
	236 Move X2, X31
	237 Move X1, [X8]
	238 Call String.op_Equality, X0, X1
	239 Move TEMP, X0
	240 And TEMP, TEMP, 1
	241 Compare TEMP, 1
	242 JumpIfNotEqual {415}
	243 Move X8, 0xA8E000
	244 Move X8, [X8+1728]
	245 Move X9, 0xAC5000
	246 Move X0, [X8]
	247 Move W8, [X0+224]
	248 Move X9, [X9+1880]
	249 Move X20, [X9]
	250 Compare W8, 0
	251 JumpIfNotEqual {253}
	252 Call 0x1C17DFC
	253 Move X0, X20
	254 Move X1, X31
	255 Call Type.GetTypeFromHandle, X0
	256 Move X8, 0xAB8000
	257 Move X8, [X8+720]
	258 Move X2, X0
	259 Move X0, X25
	260 Move X3, X31
	261 Move X1, [X8]
	262 Call SerializationInfo.GetValue, X0, X1, X2
	263 Compare X0, 0
	264 JumpIfEqual {408}
	265 Move X8, 0xAB8000
	266 Move X8, [X8+2328]
	267 Move X29, X0
	268 Move X20, [X8]
	269 Move X1, X20
	270 Call 0x1C17E00
	271 Move [X31], X0
	272 Compare X0, 0
	273 JumpIfNotEqual {415}
	274 Move X8, 0xAC5000
	275 Move X8, [X8+1904]
	276 Move X0, X29
	277 Move X2, X31
	278 Move X1, [X8]
	279 Call String.op_Equality, X0, X1
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfNotEqual {415}
	284 Move X8, 0xA8E000
	285 Move X8, [X8+1728]
	286 Move X9, 0xAC0000
	287 Move X0, [X8]
	288 Move W8, [X0+224]
	289 Move X9, [X9+368]
	290 Move X20, [X9]
	291 Compare W8, 0
	292 JumpIfNotEqual {294}
	293 Call 0x1C17DFC
	294 Move X0, X20
	295 Move X1, X31
	296 Call Type.GetTypeFromHandle, X0
	297 Move X8, 0xAC5000
	298 Move X8, [X8+1904]
	299 Move X2, X0
	300 Move X0, X25
	301 Move X3, X31
	302 Move X1, [X8]
	303 Call SerializationInfo.GetValue, X0, X1, X2
	304 Compare X0, 0
	305 JumpIfEqual {409}
	306 Move X8, 0xA8E000
	307 Move X8, [X8+2760]
	308 Move X20, X0
	309 Move X29, [X8]
	310 Move X1, X29
	311 Call 0x1C17E00
	312 Move X22, X0
	313 Compare X0, 0
	314 JumpIfNotEqual {415}
	315 Move X8, 0xAC5000
	316 Move X8, [X8+1920]
	317 Move X0, X29
	318 Move X2, X31
	319 Move X1, [X8]
	320 Call String.op_Equality, X0, X1
	321 Move TEMP, X0
	322 And TEMP, TEMP, 1
	323 Compare TEMP, 1
	324 JumpIfNotEqual {415}
	325 Move X8, 0xA8E000
	326 Move X8, [X8+1728]
	327 Move X9, 0xAC5000
	328 Move W27, W24
	329 Move X0, [X8]
	330 Move W8, [X0+224]
	331 Move X9, [X9+1888]
	332 Move X20, [X9]
	333 Compare W8, 0
	334 JumpIfNotEqual {336}
	335 Call 0x1C17DFC
	336 Move X0, X20
	337 Move X1, X31
	338 Call Type.GetTypeFromHandle, X0
	339 Move X8, 0xAC5000
	340 Move X8, [X8+1920]
	341 Move X2, X0
	342 Move X0, X25
	343 Move X3, X31
	344 Move X1, [X8]
	345 Call SerializationInfo.GetValue, X0, X1, X2
	346 Compare X0, 0
	347 JumpIfEqual {410}
	348 Move X24, 0xAB8000
	349 Move X24, [X24+2304]
	350 Move X29, X0
	351 Move X20, [X24]
	352 Move X1, X20
	353 Call 0x1C17E00
	354 Compare X0, 0
	355 JumpIfEqual {508}
	356 Move [X19+32], X0
	357 Move X20, [X24]
	358 Move X0, X29
	359 Move X1, X20
	360 Call 0x1C17E00
	361 Move W24, W27
	362 Move W27, 0xFBF7
	363 NotImplemented "Instruction MOVK not yet implemented."
	364 Compare X0, 0
	365 JumpIfNotEqual {415}
	366 Move X8, 0xAC5000
	367 Move X8, [X8+1912]
	368 Move X0, X29
	369 Move X2, X31
	370 Move X1, [X8]
	371 Call String.op_Equality, X0, X1
	372 Move TEMP, X0
	373 And TEMP, TEMP, 1
	374 Compare TEMP, 1
	375 JumpIfNotEqual {415}
	376 Move X8, 0xA8E000
	377 Move X8, [X8+1728]
	378 Move X9, 0xAC0000
	379 Move X0, [X8]
	380 Move W8, [X0+224]
	381 Move X9, [X9+352]
	382 Move X20, [X9]
	383 Compare W8, 0
	384 JumpIfNotEqual {386}
	385 Call 0x1C17DFC
	386 Move X0, X20
	387 Move X1, X31
	388 Call Type.GetTypeFromHandle, X0
	389 Move X8, 0xAC5000
	390 Move X8, [X8+1912]
	391 Move X2, X0
	392 Move X0, X25
	393 Move X3, X31
	394 Move X1, [X8]
	395 Call SerializationInfo.GetValue, X0, X1, X2
	396 Compare X0, 0
	397 JumpIfEqual {414}
	398 Move X8, 0xA8E000
	399 Move X8, [X8+2512]
	400 Move X20, X0
	401 Move X29, [X8]
	402 Move X1, X29
	403 Call 0x1C17E00
	404 Move X23, X0
	405 Compare X0, 0
	406 JumpIfNotEqual {415}
	407 Move [X31+8], X31
	408 Move [X31], X31
	409 Move X22, X31
	410 Move W24, W27
	411 Move W27, 0xFBF7
	412 Move [X19+32], X31
	413 NotImplemented "Instruction MOVK not yet implemented."
	414 Move X23, X31
	415 Move X0, X26
	416 Move X1, X31
	417 Call SerializationInfoEnumerator.MoveNext, X0
	418 Move TEMP, X0
	419 And TEMP, TEMP, 1
	420 Compare TEMP, 1
	421 JumpIfEqual {115}
	422 Move [X31+24], X31
	423 Move W24, W31
	424 Move X22, X31
	425 Move X23, X31
	426 Move [X31], X31
	427 Move [X31+8], X31
	428 Move [X31+20], W31
	429 Move X8, [X19+32]
	430 Compare X8, 0
	431 JumpIfNotEqual {448}
	432 Move X25, [X31]
	433 Move X21, [X31+8]
	434 Compare X25, 0
	435 JumpIfEqual {495}
	436 Compare X21, 0
	437 JumpIfEqual {495}
	438 Move X8, 0xAD8000
	439 Move X8, [X8+592]
	440 Move X0, [X8]
	441 Call 0x1C17F10
	442 Move X1, X31
	443 Move X20, X0
	444 Call Object..ctor, X0
	445 Move [X20+16], X25
	446 Move [X20+24], X21
	447 Move [X19+32], X20
	448 Compare X23, 0
	449 JumpIfEqual {495}
	450 Compare X22, 0
	451 JumpIfEqual {495}
	452 Move X0, X19
	453 Move W1, W24
	454 Call NameObjectCollectionBase.Reset, X0, X1
	455 NotImplemented "Instruction CMP not yet implemented."
	456 Move X20, X31
	457 Move W21, W24
	458 Add X24, X22, 32
	459 Add X25, X23, 32
	460 Move W8, [X22+24]
	461 NotImplemented "Instruction CMP not yet implemented."
	462 Move W8, [X23+24]
	463 NotImplemented "Instruction CMP not yet implemented."
	464 Move X1, [X24]
	465 Move X2, [X25]
	466 Move X0, X19
	467 Call NameObjectCollectionBase.BaseAdd, X0, X1, X2
	468 Add X20, X20, 1
	469 NotImplemented "Instruction CMP not yet implemented."
	470 Move W8, [X31+28]
	471 And W8, W8, 1
	472 Move [X19+16], W8
	473 Move W8, [X31+24]
	474 Move TEMP, X8
	475 And TEMP, TEMP, 1
	476 Compare TEMP, 1
	477 JumpIfNotEqual {480}
	478 Move W8, [X31+20]
	479 Move [X19+72], W8
	480 Move X20, [X31+112]
	481 Move X19, [X31+120]
	482 Move X22, [X31+96]
	483 Move X21, [X31+104]
	484 Move X24, [X31+80]
	485 Move X23, [X31+88]
	486 Move X26, [X31+64]
	487 Move X25, [X31+72]
	488 Move X28, [X31+48]
	489 Move X27, [X31+56]
	490 Move X29, [X31+32]
	491 Move X30, [X31+40]
	492 Add X31, X31, 128
	493 Return 
	494 Call 0x1C17F28
	495 Move X0, 0xAB8000
	496 Move X0, [X0+736]
	497 Call 0x1C17D08
	498 Call 0x1C17F10
	499 Move X1, X31
	500 Move X19, X0
	501 Call SerializationException..ctor, X0
	502 Move X0, 0xAD8000
	503 Move X0, [X0+640]
	504 Call 0x1C17D08
	505 Move X1, X0
	506 Move X0, X19
	507 Call 0x1C17DEC
	508 Move X0, X29
	509 Move X1, X20
	510 Call 0x1C181E0
	511 Call 0x1C17F20
	512 Move X0, X20
	513 Move X1, X29
	514 Call 0x1C181E0

Method: System.Void Reset()

Disassembly:
	0x03665EEC LDP X30, X21, [X31], #0x20
	0x03665EF0 RET
	0x03665EF4 STP X30, X21, [X31 - 0x20]!
	0x03665EF8 STP X20, X19, [X31 + 0x10]
	0x03665EFC ADRP X21, 0xD7B000
	0x03665F00 LDRB W8, [X21 + 0x700]
	0x03665F04 MOV X19, X1
	0x03665F08 MOV X20, X0
	0x03665F0C TBNZ X8, 0x0, 0x3665F24
	0x03665F10 ADRP X0, 0xAD8000
	0x03665F14 LDR X0, [X0 + 0x228]
	0x03665F18 BL 0x1C16CF4
	0x03665F1C MOVZ W8, 0x1
	0x03665F20 STRB W8, [X21 + 0x700]
	0x03665F24 CBZ X19, 0x3665F90
	0x03665F28 LDR X20, [X20 + 0x28]
	0x03665F2C BL 0x1C16D44
	0x03665F30 CBZ X20, 0x3665FA8
	0x03665F34 LDR X8, [X20]
	0x03665F38 MOV X0, X20
	0x03665F3C MOV X1, X19
	0x03665F40 LDR X9, [X8 + 0x2D8]
	0x03665F44 LDR X2, [X8 + 0x2E0]
	0x03665F48 BLR X9
	0x03665F4C MOV X19, X0
	0x03665F50 CBZ X0, 0x3665F98
	0x03665F54 ADRP X9, 0xAD8000
	0x03665F58 LDR X9, [X9 + 0x228]
	0x03665F5C LDR X8, [X19]
	0x03665F60 LDR X1, [X9]
	0x03665F64 LDRB W10, [X8 + 0x130]
	0x03665F68 LDRB W9, [X1 + 0x130]
	0x03665F6C CMP W10, W9
	0x03665F70 B.CC 0x3665F88
	0x03665F74 LDR X8, [X8 + 0xC8]
	0x03665F78 ADD X8, X8, X9, 0x3, LSL
	0x03665F7C LDUR X8, [X8 - 0x8]
	0x03665F80 CMP X8, X1
	0x03665F84 B.EQ 0x3665F98
	0x03665F88 MOV X0, X19
	0x03665F8C BL 0x1C171E0
	0x03665F90 LDR X19, [X20 + 0x30]
	0x03665F94 BL 0x1C16D44

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD7C000
	007 Move X22, 0xABC000
	008 Move X21, 0xABF000
	009 Move W8, [X20+1790]
	010 Move X22, [X22+2976]
	011 Move X21, [X21+3512]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xABC000
	018 Move X0, [X0+2976]
	019 Call 0x1C17CF4
	020 Move X0, 0xABF000
	021 Move X0, [X0+3512]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1790], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X20, X0
	029 Call ArrayList..ctor, X0
	030 Move [X19+24], X20
	031 Move X0, [X21]
	032 Move X20, [X19+32]
	033 Call 0x1C17F10
	034 Move X1, X20
	035 Move X2, X31
	036 Move X21, X0
	037 Call Hashtable..ctor, X0, X1
	038 Call 0x1C17D44
	039 Move [X19+40], X21
	040 Call 0x1C17D44
	041 Move W8, [X19+72]
	042 Move [X19+48], X31
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Add W8, W8, 1
	046 Move [X19+72], W8
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+48]
	050 Return 

Method: System.Void Reset(System.Int32 capacity)

Disassembly:
	0x03665F98 MOV X0, X19
	0x03665F9C LDP X20, X19, [X31 + 0x10]
	0x03665FA0 LDP X30, X21, [X31], #0x20
	0x03665FA4 RET
	0x03665FA8 BL 0x1C16F20
	0x03665FAC LDR X0, [X0 + 0x20]
	0x03665FB0 RET
	0x03665FB4 LDRB W0, [X0 + 0x10]
	0x03665FB8 RET
	0x03665FBC STP X30, X21, [X31 - 0x20]!
	0x03665FC0 STP X20, X19, [X31 + 0x10]
	0x03665FC4 MOV X20, X1
	0x03665FC8 MOV X1, X31
	0x03665FCC MOV X19, X2
	0x03665FD0 MOV X21, X0
	0x03665FD4 BL 0x33BDD8C
	0x03665FD8 STP X20, X19, [X21 + 0x10]
	0x03665FDC LDP X20, X19, [X31 + 0x10]
	0x03665FE0 LDP X30, X21, [X31], #0x20
	0x03665FE4 RET
	0x03665FE8 STP X30, X21, [X31 - 0x20]!
	0x03665FEC STP X20, X19, [X31 + 0x10]
	0x03665FF0 ADRP X20, 0xD7B000
	0x03665FF4 ADRP X21, 0xAD8000
	0x03665FF8 LDRB W8, [X20 + 0x705]
	0x03665FFC LDR X21, [X21 + 0x288]
	0x03666000 MOV X19, X0
	0x03666004 TBNZ X8, 0x0, 0x366601C
	0x03666008 ADRP X0, 0xAD7000
	0x0366600C LDR X0, [X0 + 0x288]
	0x03666010 BL 0x1C16CF4
	0x03666014 MOVZ W8, 0x1
	0x03666018 STRB W8, [X20 + 0x705]
	0x0366601C LDR X0, [X21]
	0x03666020 BL 0x1C16F10
	0x03666024 MOV X1, X19
	0x03666028 MOV X20, X0
	0x0366602C BL 0x3666040
	0x03666030 MOV X0, X20
	0x03666034 LDP X20, X19, [X31 + 0x10]
	0x03666038 LDP X30, X21, [X31], #0x20
	0x0366603C RET
	0x03666040 STR X30, [X31 - 0x20]!
	0x03666044 STP X20, X19, [X31 + 0x10]
	0x03666048 MOV X20, X1
	0x0366604C MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD7C000
	008 Move X23, 0xABC000
	009 Move X22, 0xABF000
	010 Move W8, [X21+1791]
	011 Move X23, [X23+2976]
	012 Move X22, [X22+3512]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xABC000
	020 Move X0, [X0+2976]
	021 Call 0x1C17CF4
	022 Move X0, 0xABF000
	023 Move X0, [X0+3512]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1791], W8
	027 Move X0, [X23]
	028 Call 0x1C17F10
	029 Move W1, W20
	030 Move X2, X31
	031 Move X21, X0
	032 Call ArrayList..ctor, X0, X1
	033 Move [X19+24], X21
	034 Move X0, [X22]
	035 Move X21, [X19+32]
	036 Call 0x1C17F10
	037 Move W1, W20
	038 Move X2, X21
	039 Move X3, X31
	040 Move X22, X0
	041 Call Hashtable..ctor, X0, X1, X2
	042 Call 0x1C17D44
	043 Move [X19+40], X22
	044 Call 0x1C17D44
	045 Move W8, [X19+72]
	046 Move [X19+48], X31
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Add W8, W8, 1
	050 Move [X19+72], W8
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return 

Method: System.Collections.Specialized.NameObjectCollectionBase/NameObjectEntry FindEntry(System.String key)

Disassembly:
	0x03666EF4 LDR X21, [X21 + 0x2E0]
	0x03666EF8 MOV X19, X0
	0x03666EFC TBNZ X8, 0x0, 0x3666F14
	0x03666F00 ADRP X0, 0xAD7000
	0x03666F04 LDR X0, [X0 + 0x2E0]
	0x03666F08 BL 0x1C16CF4
	0x03666F0C MOVZ W8, 0x1
	0x03666F10 STRB W8, [X20 + 0x713]
	0x03666F14 LDR X1, [X21]
	0x03666F18 MOV X0, X19
	0x03666F1C LDP X20, X19, [X31 + 0x10]
	0x03666F20 MOV X2, X31
	0x03666F24 LDP X30, X21, [X31], #0x20
	0x03666F28 B 0x338C8D8
	0x03666F2C MOV X2, X31
	0x03666F30 B 0x338C8D8
	0x03666F34 MOV X4, X31
	0x03666F38 B 0x338CA74
	0x03666F3C MOV X3, X31
	0x03666F40 B 0x338C990
	0x03666F44 MOV W3, W31
	0x03666F48 B 0x3666F4C
	0x03666F4C STR X30, [X31 - 0x40]!
	0x03666F50 STP X24, X23, [X31 + 0x10]
	0x03666F54 STP X22, X21, [X31 + 0x20]
	0x03666F58 STP X20, X19, [X31 + 0x30]
	0x03666F5C ADRP X24, 0xD7A000
	0x03666F60 ADRP X23, 0xABC000
	0x03666F64 LDRB W8, [X24 + 0x714]
	0x03666F68 LDR X23, [X23 + 0xD10]
	0x03666F6C MOV W22, W3
	0x03666F70 MOV W20, W2
	0x03666F74 MOV X21, X1
	0x03666F78 MOV X19, X0
	0x03666F7C TBNZ X8, 0x0, 0x3666FA0
	0x03666F80 ADRP X0, 0xACB000
	0x03666F84 LDR X0, [X0 + 0xA18]
	0x03666F88 BL 0x1C16CF4
	0x03666F8C ADRP X0, 0xABC000
	0x03666F90 LDR X0, [X0 + 0xD10]
	0x03666F94 BL 0x1C16CF4
	0x03666F98 MOVZ W8, 0x1
	0x03666F9C STRB W8, [X24 + 0x714]
	0x03666FA0 LDR X0, [X23]
	0x03666FA4 ADRP X23, 0xACB000
	0x03666FA8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD7B000
	006 Move W8, [X21+1792]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAD8000
	014 Move X0, [X0+552]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1792], W8
	018 Compare X19, 0
	019 JumpIfEqual {46}
	020 Move X20, [X20+40]
	021 Call 0x1C17D44
	022 Compare X20, 0
	023 JumpIfEqual {54}
	024 Move X8, [X20]
	025 Move X0, X20
	026 Move X1, X19
	027 Move X9, [X8+728]
	028 Move X2, [X8+736]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X19, X0
	031 Compare X0, 0
	032 JumpIfEqual {48}
	033 Move X9, 0xAD8000
	034 Move X9, [X9+552]
	035 Move X8, [X19]
	036 Move X1, [X9]
	037 Move W10, [X8+304]
	038 Move W9, [X1+304]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, [X8+200]
	041 Add X8, X8, X9
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Call 0x1C181E0
	046 Move X19, [X20+48]
	047 Call 0x1C17D44
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Call 0x1C17F20

Method: System.Collections.IEqualityComparer get_Comparer()

Disassembly:
	0x03666FAC LDR X23, [X23 + 0xA18]
	0x03666FB0 CBNZ W8, 0x3666FB8

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x03666FB4 BL 0x1C16DFC
	0x03666FB8 MOV X0, X19

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void BaseAdd(System.String name, System.Object value)

Disassembly:
	0x03664F60 MOV X2, X31
	0x03664F64 MOV X21, X0
	0x03664F68 BL 0x335A378
	0x03664F6C BL 0x1C16D44
	0x03664F70 STR X21, [X19 + 0x28]
	0x03664F74 BL 0x1C16D44
	0x03664F78 LDR W8, [X19 + 0x48]
	0x03664F7C STR X31, [X19 + 0x30]
	0x03664F80 LDP X22, X21, [X31 + 0x10]
	0x03664F84 ADD W8, W8, 0x1
	0x03664F88 STR W8, [X19 + 0x48]
	0x03664F8C LDP X20, X19, [X31 + 0x20]
	0x03664F90 LDR X30, [X31], #0x30
	0x03664F94 RET
	0x03664F98 STP X30, X23, [X31 - 0x30]!
	0x03664F9C STP X22, X21, [X31 + 0x10]
	0x03664FA0 STP X20, X19, [X31 + 0x20]
	0x03664FA4 ADRP X21, 0xD7C000
	0x03664FA8 ADRP X23, 0xABC000
	0x03664FAC ADRP X22, 0xABF000
	0x03664FB0 LDRB W8, [X21 + 0x6FF]
	0x03664FB4 LDR X23, [X23 + 0xBA0]
	0x03664FB8 LDR X22, [X22 + 0xDB8]
	0x03664FBC MOV W20, W1
	0x03664FC0 MOV X19, X0
	0x03664FC4 TBNZ X8, 0x0, 0x3664FE8
	0x03664FC8 ADRP X0, 0xABC000
	0x03664FCC LDR X0, [X0 + 0xBA0]
	0x03664FD0 BL 0x1C16CF4
	0x03664FD4 ADRP X0, 0xABF000
	0x03664FD8 LDR X0, [X0 + 0xDB8]
	0x03664FDC BL 0x1C16CF4
	0x03664FE0 MOVZ W8, 0x1
	0x03664FE4 STRB W8, [X21 + 0x6FF]
	0x03664FE8 LDR X0, [X23]
	0x03664FEC BL 0x1C16F10
	0x03664FF0 MOV W1, W20
	0x03664FF4 MOV X2, X31
	0x03664FF8 MOV X21, X0
	0x03664FFC BL 0x3358210
	0x03665000 STR X21, [X19 + 0x18]
	0x03665004 LDR X0, [X22]
	0x03665008 LDR X21, [X19 + 0x20]
	0x0366500C BL 0x1C16F10
	0x03665010 MOV W1, W20
	0x03665014 MOV X2, X21
	0x03665018 MOV X3, X31
	0x0366501C MOV X22, X0
	0x03665020 BL 0x335A3A4
	0x03665024 BL 0x1C16D44
	0x03665028 STR X22, [X19 + 0x28]
	0x0366502C BL 0x1C16D44
	0x03665030 LDR W8, [X19 + 0x48]
	0x03665034 STR X31, [X19 + 0x30]
	0x03665038 LDP X22, X21, [X31 + 0x10]
	0x0366503C ADD W8, W8, 0x1
	0x03665040 STR W8, [X19 + 0x48]
	0x03665044 LDP X20, X19, [X31 + 0x20]
	0x03665048 LDP X30, X23, [X31], #0x30
	0x0366504C RET
	0x03665050 STP X29, X30, [X31 - 0x60]!
	0x03665054 STP X28, X27, [X31 + 0x10]
	0x03665058 STP X26, X25, [X31 + 0x20]
	0x0366505C STP X24, X23, [X31 + 0x30]
	0x03665060 STP X22, X21, [X31 + 0x40]
	0x03665064 STP X20, X19, [X31 + 0x50]
	0x03665068 ADRP X21, 0xD7B000
	0x0366506C LDRB W8, [X21 + 0x6FC]
	0x03665070 MOV X19, X1
	0x03665074 MOV X20, X0
	0x03665078 TBNZ X8, 0x0, 0x3665168
	0x0366507C ADRP X0, 0xAD8000
	0x03665080 LDR X0, [X0 + 0x250]
	0x03665084 BL 0x1C16CF4
	0x03665088 ADRP X0, 0xAC5000
	0x0366508C LDR X0, [X0 + 0x758]
	0x03665090 BL 0x1C16CF4
	0x03665094 ADRP X0, 0xAC5000
	0x03665098 LDR X0, [X0 + 0x760]
	0x0366509C BL 0x1C16CF4
	0x036650A0 ADRP X0, 0xAC5000
	0x036650A4 LDR X0, [X0 + 0x768]
	0x036650A8 BL 0x1C16CF4
	0x036650AC ADRP X0, 0xAD8000
	0x036650B0 LDR X0, [X0 + 0x200]
	0x036650B4 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD7D000
	007 Move W8, [X20+1793]
	008 Move X22, X2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xADA000
	016 Move X0, [X0+552]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1793], W8
	020 Move W8, [X19+16]
	021 Compare W8, 0
	022 JumpIfNotEqual {81}
	023 Move X8, 0xADA000
	024 Move X8, [X8+552]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X20, X0
	029 Call Object..ctor, X0
	030 Move [X20+16], X21
	031 Move [X20+24], X22
	032 Compare X21, 0
	033 JumpIfEqual {57}
	034 Move X22, [X19+40]
	035 Call 0x1C17D44
	036 Compare X22, 0
	037 JumpIfEqual {80}
	038 Move X8, [X22]
	039 Move X0, X22
	040 Move X1, X21
	041 Move X9, [X8+728]
	042 Move X2, [X8+736]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfNotEqual {63}
	046 Move X22, [X19+40]
	047 Call 0x1C17D44
	048 Compare X22, 0
	049 JumpIfEqual {80}
	050 Move X8, [X22]
	051 Move X0, X22
	052 Move X1, X21
	053 Move X2, X20
	054 Move X9, [X8+632]
	055 Move X3, [X8+640]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X21, [X19+48]
	058 Call 0x1C17D44
	059 Compare X21, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17D44
	062 Move [X19+48], X20
	063 Move X0, [X19+24]
	064 Compare X0, 0
	065 JumpIfEqual {80}
	066 Move X8, [X0]
	067 Move X1, X20
	068 Move X9, [X8+776]
	069 Move X2, [X8+784]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move W8, [X19+72]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Add W8, W8, 1
	075 Move [X19+72], W8
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+48]
	079 Return 
	080 Call 0x1C17F20
	081 Move X0, 0xAB9000
	082 Move X0, [X0+104]
	083 Call 0x1C17D08
	084 Move X1, X31
	085 Call SR.GetString, X0
	086 Move X19, X0
	087 Move X0, 0xA8F000
	088 Move X0, [X0+2880]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X1, X19
	092 Move X2, X31
	093 Move X20, X0
	094 Call NotSupportedException..ctor, X0, X1
	095 Move X0, 0xAD9000
	096 Move X0, [X0+560]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X20
	100 Call 0x1C17DEC

Method: System.Void BaseRemove(System.String name)

Disassembly:
	0x03665368 BLR X9
	0x0366536C LDR X1, [X21]
	0x03665370 MOV W24, W0
	0x03665374 MOV X0, X19
	0x03665378 MOV W2, W24
	0x0366537C MOV X3, X31
	0x03665380 BL 0x32A8F28
	0x03665384 LDR X0, [X22]
	0x03665388 MOV W1, W24
	0x0366538C BL 0x1C16D6C
	0x03665390 LDR X8, [X23]
	0x03665394 MOV X22, X0
	0x03665398 MOV W1, W24
	0x0366539C MOV X0, X8
	0x036653A0 BL 0x1C16D6C
	0x036653A4 CMP W24, 0x1
	0x036653A8 MOV X21, X0
	0x036653AC B.LT 0x3665468
	0x036653B0 ADRP X26, 0xAD8000
	0x036653B4 LDR X26, [X26 + 0x228]
	0x036653B8 MOV X23, X31
	0x036653BC MOV W27, W24
	0x036653C0 ADD X28, X22, 0x20
	0x036653C4 ADD X29, X21, 0x20
	0x036653C8 LDR X0, [X20 + 0x18]
	0x036653CC CBZ X0, 0x3665578
	0x036653D0 LDR X8, [X0]
	0x036653D4 MOV W1, W23
	0x036653D8 LDR X9, [X8 + 0x2E8]
	0x036653DC LDR X2, [X8 + 0x2F0]
	0x036653E0 BLR X9
	0x036653E4 CBZ X0, 0x3665578
	0x036653E8 LDR X8, [X0]
	0x036653EC LDR X1, [X26]
	0x036653F0 LDRB W10, [X8 + 0x130]
	0x036653F4 LDRB W9, [X1 + 0x130]
	0x036653F8 CMP W10, W9
	0x036653FC B.CC 0x366557C
	0x03665400 LDR X8, [X8 + 0xC8]
	0x03665404 ADD X8, X8, X9, 0x3, LSL
	0x03665408 LDUR X8, [X8 - 0x8]
	0x0366540C CMP X8, X1
	0x03665410 B.NE 0x366557C
	0x03665414 CBZ X22, 0x3665578
	0x03665418 LDR W8, [X22 + 0x18]
	0x0366541C CMP X23, X8
	0x03665420 B.CS 0x3665580
	0x03665424 LDR X8, [X0 + 0x10]
	0x03665428 STR X8, [X28, X23, LSL #3]
	0x0366542C CBZ X21, 0x3665578
	0x03665430 LDR X24, [X0 + 0x18]
	0x03665434 CBZ X24, 0x366544C
	0x03665438 LDR X8, [X21]
	0x0366543C MOV X0, X24
	0x03665440 LDR X1, [X8 + 0x40]
	0x03665444 BL 0x1C16E00
	0x03665448 CBZ X0, 0x3665584
	0x0366544C LDR W8, [X21 + 0x18]
	0x03665450 CMP X23, X8
	0x03665454 B.CS 0x3665580
	0x03665458 STR X24, [X29, X23, LSL #3]
	0x0366545C ADD X23, X23, 0x1
	0x03665460 CMP X27, X23
	0x03665464 B.NE 0x36653C8
	0x03665468 ADRP X8, 0xAC0000
	0x0366546C LDR X0, [X25]
	0x03665470 LDR X8, [X8 + 0x170]
	0x03665474 ADRP X27, 0xAC5000
	0x03665478 ADRP X26, 0xAC0000
	0x0366547C ADRP X25, 0xAC5000
	0x03665480 ADRP X24, 0xA8F000
	0x03665484 LDR X27, [X27 + 0x770]
	0x03665488 LDR W9, [X0 + 0xE0]
	0x0366548C LDR X23, [X8]
	0x03665490 LDR X26, [X26 + 0x160]
	0x03665494 LDR X25, [X25 + 0x778]
	0x03665498 LDR X24, [X24 + 0x2A0]
	0x0366549C CBNZ W9, 0x36654A4
	0x036654A0 BL 0x1C16DFC
	0x036654A4 MOV X0, X23
	0x036654A8 MOV X1, X31
	0x036654AC BL 0x338C698
	0x036654B0 LDR X1, [X27]
	0x036654B4 MOV X3, X0
	0x036654B8 MOV X0, X19
	0x036654BC MOV X2, X22
	0x036654C0 MOV X4, X31
	0x036654C4 BL 0x32A89BC
	0x036654C8 LDR X0, [X26]
	0x036654CC MOV X1, X31
	0x036654D0 BL 0x338C698
	0x036654D4 LDR X1, [X25]
	0x036654D8 MOV X3, X0
	0x036654DC MOV X0, X19
	0x036654E0 MOV X2, X21
	0x036654E4 MOV X4, X31
	0x036654E8 BL 0x32A89BC
	0x036654EC LDR W2, [X20 + 0x48]
	0x036654F0 LDR X1, [X24]
	0x036654F4 MOV X0, X19
	0x036654F8 LDP X20, X19, [X31 + 0x50]
	0x036654FC LDP X22, X21, [X31 + 0x40]
	0x03665500 LDP X24, X23, [X31 + 0x30]
	0x03665504 LDP X26, X25, [X31 + 0x20]
	0x03665508 LDP X28, X27, [X31 + 0x10]
	0x0366550C MOV X3, X31
	0x03665510 LDP X29, X30, [X31], #0x60
	0x03665514 B 0x32A8F28
	0x03665518 ADRP X8, 0xAC5000
	0x0366551C LDR X0, [X25]
	0x03665520 LDR X22, [X21 + 0x18]
	0x03665524 LDR X8, [X8 + 0x768]
	0x03665528 LDR W9, [X0 + 0xE0]
	0x0366552C LDR X23, [X8]
	0x03665530 CBNZ W9, 0x3665538
	0x03665534 BL 0x1C16DFC
	0x03665538 MOV X0, X23
	0x0366553C MOV X1, X31
	0x03665540 BL 0x338C698
	0x03665544 ADRP X8, 0xAD8000
	0x03665548 LDR X8, [X8 + 0x258]
	0x0366554C MOV X3, X0
	0x03665550 MOV X0, X19
	0x03665554 MOV X2, X22
	0x03665558 LDR X1, [X8]
	0x0366555C MOV X4, X31
	0x03665560 BL 0x32A89BC
	0x03665564 ADRP X8, 0xAC5000
	0x03665568 LDR X21, [X21 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xD7C000
	009 Move W8, [X21+1794]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAB9000
	017 Move X0, [X0+2304]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1794], W8
	021 Move W8, [X19+16]
	022 Compare W8, 0
	023 JumpIfNotEqual {125}
	024 Compare X20, 0
	025 JumpIfEqual {89}
	026 Move X21, [X19+40]
	027 Call 0x1C17D44
	028 Compare X21, 0
	029 JumpIfEqual {124}
	030 Move X8, [X21]
	031 Move X0, X21
	032 Move X1, X20
	033 Move X9, [X8+856]
	034 Move X2, [X8+864]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, [X19+24]
	037 Compare X0, 0
	038 JumpIfEqual {124}
	039 Move X8, [X0]
	040 Move X9, [X8+664]
	041 Move X1, [X8+672]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Subtract W21, W0, 1
	044 Move X24, 0xAB9000
	045 Move X24, [X24+2304]
	046 Move X22, [X19+32]
	047 Move X0, X19
	048 Move W1, W21
	049 Call NameObjectCollectionBase.BaseGetKey, X0, X1
	050 Compare X22, 0
	051 JumpIfEqual {124}
	052 Move X8, [X22]
	053 Move X1, [X24]
	054 Move X23, X0
	055 NotImplemented "Instruction LDRH not yet implemented."
	056 Compare X9, 0
	057 JumpIfEqual {64}
	058 Move X10, [X8+176]
	059 Add X10, X10, 8
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract X9, X9, 1
	063 Add X10, X10, 16
	064 Move X0, X22
	065 Move W2, W31
	066 Call 0x1C5D788
	067 NotImplemented "Instruction LDRSW not yet implemented."
	068 Add X8, X8, X9
	069 Add X0, X8, 312
	070 Move X8, [X0]
	071 Move X3, [X0+8]
	072 Move X0, X22
	073 Move X1, X20
	074 Move X2, X23
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {88}
	080 Move X0, [X19+24]
	081 Compare X0, 0
	082 JumpIfEqual {124}
	083 Move X8, [X0]
	084 Move W1, W21
	085 Move X9, [X8+984]
	086 Move X2, [X8+992]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Subtract W21, W21, 1
	089 Call 0x1C17D44
	090 Move X0, [X19+24]
	091 Move [X19+48], X31
	092 Compare X0, 0
	093 JumpIfEqual {124}
	094 Move X8, [X0]
	095 Move X9, [X8+664]
	096 Move X1, [X8+672]
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Subtract W20, W0, 1
	099 Move X0, X19
	100 Move W1, W20
	101 Call NameObjectCollectionBase.BaseGetKey, X0, X1
	102 Compare X0, 0
	103 JumpIfNotEqual {112}
	104 Move X0, [X19+24]
	105 Compare X0, 0
	106 JumpIfEqual {124}
	107 Move X8, [X0]
	108 Move W1, W20
	109 Move X9, [X8+984]
	110 Move X2, [X8+992]
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Subtract W20, W20, 1
	113 Move W8, [X19+72]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X24, [X31+16]
	117 Move X23, [X31+24]
	118 Add W8, W8, 1
	119 Move [X19+72], W8
	120 Move X20, [X31+48]
	121 Move X19, [X31+56]
	122 Move X30, [X31+64]
	123 Return 
	124 Call 0x1C17F20
	125 Move X0, 0xAB9000
	126 Move X0, [X0+104]
	127 Call 0x1C17D08
	128 Move X1, X31
	129 Call SR.GetString, X0
	130 Move X19, X0
	131 Move X0, 0xA8F000
	132 Move X0, [X0+2880]
	133 Call 0x1C17D08
	134 Call 0x1C17F10
	135 Move X1, X19
	136 Move X2, X31
	137 Move X20, X0
	138 Call NotSupportedException..ctor, X0, X1
	139 Move X0, 0xAD9000
	140 Move X0, [X0+584]
	141 Call 0x1C17D08
	142 Move X1, X0
	143 Move X0, X20
	144 Call 0x1C17DEC

Method: System.Void BaseClear()

Disassembly:
	0x03664D74 CBZ X19, 0x3664D90
	0x03664D78 ADRP X8, 0xA91000
	0x03664D7C LDR X8, [X8 + 0x278]
	0x03664D80 LDR X1, [X8]
	0x03664D84 LDR X8, [X19]
	0x03664D88 CMP X8, X1
	0x03664D8C B.NE 0x3664DC0
	0x03664D90 LDR X0, [X21 + 0x10]
	0x03664D94 CBZ X0, 0x3664DBC
	0x03664D98 LDR X8, [X0]
	0x03664D9C MOV W1, W20
	0x03664DA0 MOV X2, X19
	0x03664DA4 LDP X20, X19, [X31 + 0x20]
	0x03664DA8 LDR X4, [X8 + 0x3A8]
	0x03664DAC LDR X3, [X8 + 0x3B0]
	0x03664DB0 LDP X22, X21, [X31 + 0x10]
	0x03664DB4 LDR X30, [X31], #0x30
	0x03664DB8 BR X4
	0x03664DBC BL 0x1C16F20
	0x03664DC0 MOV X0, X19
	0x03664DC4 BL 0x1C171E0
	0x03664DC8 STP X30, X21, [X31 - 0x20]!
	0x03664DCC STP X20, X19, [X31 + 0x10]
	0x03664DD0 ADRP X21, 0xD7C000
	0x03664DD4 LDRB W8, [X21 + 0x6F7]
	0x03664DD8 MOV X19, X1
	0x03664DDC MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+16]
	005 Compare W8, 0
	006 JumpIfNotEqual {12}
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Call NameObjectCollectionBase.Reset, X0
	011 Return 
	012 Move X0, 0xABA000
	013 Move X0, [X0+104]
	014 Call 0x1C17D08
	015 Move X1, X31
	016 Call SR.GetString, X0
	017 Move X19, X0
	018 Move X0, 0xA90000
	019 Move X0, [X0+2880]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X2, X31
	024 Move X20, X0
	025 Call NotSupportedException..ctor, X0, X1
	026 Move X0, 0xADA000
	027 Move X0, [X0+536]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X20
	031 Call 0x1C17DEC

Method: System.Object BaseGet(System.String name)

Disassembly:
	0x03664F48 BL 0x3351F5C
	0x03664F4C STR X20, [X19 + 0x18]
	0x03664F50 LDR X0, [X21]
	0x03664F54 LDR X20, [X19 + 0x20]
	0x03664F58 BL 0x1C16F10
	0x03664F5C MOV X1, X20

ISIL:
	001 Move [X31-16], X30
	002 Call NameObjectCollectionBase.FindEntry, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {6}
	005 Move X0, [X0+24]
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Void BaseSet(System.String name, System.Object value)

Disassembly:
	0x036652B8 MOV X2, X21
	0x036652BC B 0x3665334
	0x036652C0 ADRP X8, 0xAC5000
	0x036652C4 LDR X0, [X25]
	0x036652C8 LDR X8, [X8 + 0x768]
	0x036652CC LDR W9, [X0 + 0xE0]
	0x036652D0 LDR X21, [X8]
	0x036652D4 CBNZ W9, 0x36652DC
	0x036652D8 BL 0x1C16DFC
	0x036652DC MOV X0, X21
	0x036652E0 MOV X1, X31
	0x036652E4 BL 0x338C698
	0x036652E8 ADRP X8, 0xAD8000
	0x036652EC LDR X8, [X8 + 0x258]
	0x036652F0 MOV X3, X0
	0x036652F4 MOV X0, X19
	0x036652F8 MOV X2, X31
	0x036652FC LDR X1, [X8]
	0x03665300 MOV X4, X31
	0x03665304 BL 0x32A89BC
	0x03665308 ADRP X8, 0xAC5000
	0x0366530C LDR X8, [X8 + 0x758]
	0x03665310 MOV X1, X31
	0x03665314 LDR X0, [X8]
	0x03665318 BL 0x338C698
	0x0366531C ADRP X8, 0xAB8000
	0x03665320 LDR X8, [X8 + 0x2D0]
	0x03665324 MOV X3, X0
	0x03665328 MOV X0, X19
	0x0366532C MOV X2, X31
	0x03665330 LDR X1, [X8]
	0x03665334 MOV X4, X31
	0x03665338 BL 0x32A89BC
	0x0366533C LDR X0, [X20 + 0x18]
	0x03665340 CBZ X0, 0x3665578
	0x03665344 LDR X8, [X0]
	0x03665348 ADRP X21, 0xAB8000
	0x0366534C ADRP X22, 0xA8E000
	0x03665350 ADRP X23, 0xA8E000
	0x03665354 LDR X9, [X8 + 0x298]
	0x03665358 LDR X1, [X8 + 0x2A0]
	0x0366535C LDR X21, [X21 + 0x2C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+16]
	006 Compare W8, 0
	007 JumpIfNotEqual {32}
	008 Move X19, X2
	009 Move X20, X0
	010 Move X21, X1
	011 Call NameObjectCollectionBase.FindEntry, X0, X1
	012 Compare X0, 0
	013 JumpIfEqual {23}
	014 Move [X0+24], X19
	015 Move W8, [X20+72]
	016 Add W8, W8, 1
	017 Move [X20+72], W8
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Return 
	023 Move X0, X20
	024 Move X2, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X21
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call NameObjectCollectionBase.BaseAdd, X0, X1, X2
	031 Return 
	032 Move X0, 0xAB9000
	033 Move X0, [X0+104]
	034 Call 0x1C17D08
	035 Move X1, X31
	036 Call SR.GetString, X0
	037 Move X19, X0
	038 Move X0, 0xA8F000
	039 Move X0, [X0+2880]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X1, X19
	043 Move X2, X31
	044 Move X20, X0
	045 Call NotSupportedException..ctor, X0, X1
	046 Move X0, 0xAD9000
	047 Move X0, [X0+576]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X20
	051 Call 0x1C17DEC

Method: System.Object BaseGet(System.Int32 index)

Disassembly:
	0x03665610 LDR X0, [X0 + 0xC48]
	0x03665614 BL 0x1C16CF4
	0x03665618 MOVZ W8, 0x1
	0x0366561C STRB W8, [X19 + 0x712]
	0x03665620 LDR X8, [X21]
	0x03665624 LDR X8, [X8 + 0xB8]
	0x03665628 LDR X19, [X8 + 0x8]
	0x0366562C BL 0x1C16D44
	0x03665630 CBZ X19, 0x3665644
	0x03665634 LDR X8, [X21]
	0x03665638 LDR X8, [X8 + 0xB8]
	0x0366563C LDR X19, [X8 + 0x8]
	0x03665640 B 0x366569C
	0x03665644 ADRP X8, 0xA90000
	0x03665648 LDR X8, [X8 + 0xC48]
	0x0366564C LDR X0, [X8]
	0x03665650 LDR W8, [X0 + 0xE0]
	0x03665654 CBNZ W8, 0x366565C
	0x03665658 BL 0x1C16DFC
	0x0366565C MOV X0, X31
	0x03665660 BL 0x3338524
	0x03665664 ADRP X8, 0xAD8000
	0x03665668 LDR X8, [X8 + 0x270]
	0x0366566C MOV X20, X0
	0x03665670 LDR X8, [X8]
	0x03665674 MOV X0, X8
	0x03665678 BL 0x1C16F10
	0x0366567C MOV X1, X20
	0x03665680 MOV X2, X31
	0x03665684 MOV X19, X0
	0x03665688 BL 0x3351DA4
	0x0366568C BL 0x1C16D44
	0x03665690 LDR X8, [X21]
	0x03665694 LDR X8, [X8 + 0xB8]
	0x03665698 STR X19, [X8 + 0x8]
	0x0366569C BL 0x1C16D44
	0x036656A0 MOV X0, X19
	0x036656A4 LDP X20, X19, [X31 + 0x10]
	0x036656A8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD7C000
	006 Move W8, [X21+1795]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAD9000
	014 Move X0, [X0+552]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1795], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {45}
	021 Move X8, [X0]
	022 Move W1, W19
	023 Move X9, [X8+744]
	024 Move X2, [X8+752]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Compare X0, 0
	027 JumpIfEqual {45}
	028 Move X9, 0xAD9000
	029 Move X9, [X9+552]
	030 Move X8, [X0]
	031 Move X1, [X9]
	032 Move W10, [X8+304]
	033 Move W9, [X1+304]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, [X8+200]
	036 Add X8, X8, X9
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, [X0+24]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Call 0x1C17F20
	046 Call 0x1C181E0

Method: System.String BaseGetKey(System.Int32 index)

Disassembly:
	0x03665734 MOV X19, X0
	0x03665738 LDR X8, [X8]
	0x0366573C MOV X0, X8
	0x03665740 BL 0x1C16F10
	0x03665744 MOV X1, X19
	0x03665748 MOV X2, X31
	0x0366574C MOV X20, X0
	0x03665750 BL 0x3351BB8
	0x03665754 BL 0x1C16D44
	0x03665758 LDR X8, [X21]
	0x0366575C LDR X8, [X8 + 0xB8]
	0x03665760 STR X20, [X8]
	0x03665764 LDR X8, [X21]
	0x03665768 LDR X8, [X8 + 0xB8]
	0x0366576C LDR X19, [X8]
	0x03665770 BL 0x1C16D44
	0x03665774 MOV X0, X19
	0x03665778 LDP X20, X19, [X31 + 0x10]
	0x0366577C LDP X30, X21, [X31], #0x20
	0x03665780 RET
	0x03665784 SUB X31, X31, 0x80
	0x03665788 STP X29, X30, [X31 + 0x20]
	0x0366578C STP X28, X27, [X31 + 0x30]
	0x03665790 STP X26, X25, [X31 + 0x40]
	0x03665794 STP X24, X23, [X31 + 0x50]
	0x03665798 STP X22, X21, [X31 + 0x60]
	0x0366579C STP X20, X19, [X31 + 0x70]
	0x036657A0 ADRP X20, 0xD7B000
	0x036657A4 LDRB W8, [X20 + 0x6FD]
	0x036657A8 MOV X19, X0
	0x036657AC TBNZ X8, 0x0, 0x36658A8
	0x036657B0 ADRP X0, 0xAD8000
	0x036657B4 LDR X0, [X0 + 0x250]
	0x036657B8 BL 0x1C16CF4
	0x036657BC ADRP X0, 0xAC5000
	0x036657C0 LDR X0, [X0 + 0x758]
	0x036657C4 BL 0x1C16CF4
	0x036657C8 ADRP X0, 0xAB8000
	0x036657CC LDR X0, [X0 + 0x918]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD7C000
	006 Move W8, [X21+1796]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAD9000
	014 Move X0, [X0+552]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1796], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {45}
	021 Move X8, [X0]
	022 Move W1, W19
	023 Move X9, [X8+744]
	024 Move X2, [X8+752]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Compare X0, 0
	027 JumpIfEqual {45}
	028 Move X9, 0xAD9000
	029 Move X9, [X9+552]
	030 Move X8, [X0]
	031 Move X1, [X9]
	032 Move W10, [X8+304]
	033 Move W9, [X1+304]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, [X8+200]
	036 Add X8, X8, X9
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, [X0+16]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Call 0x1C17F20
	046 Call 0x1C181E0

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x03666FE8 LDP X20, X19, [X31 + 0x30]
	0x03666FEC LDP X22, X21, [X31 + 0x20]
	0x03666FF0 LDP X24, X23, [X31 + 0x10]
	0x03666FF4 LDR X30, [X31], #0x40
	0x03666FF8 RET
	0x03666FFC AND W3, W3, 0x1
	0x03667000 MOVZ W4, 0x1
	0x03667004 B 0x3667B2C
	0x03667008 LDR X0, [X0 + 0x28]
	0x0366700C CBZ X0, 0x366701C
	0x03667010 LDR X8, [X0]
	0x03667014 LDP X2, X1, [X8 + 0x1A8]
	0x03667018 BR X2
	0x0366701C RET
	0x03667020 LDR X0, [X0 + 0x28]
	0x03667024 CBZ X0, 0x3667034
	0x03667028 LDR X8, [X0]
	0x0366702C LDP X2, X1, [X8 + 0x1D8]
	0x03667030 BR X2
	0x03667034 RET
	0x03667038 LDR X0, [X0 + 0x28]
	0x0366703C CBZ X0, 0x366704C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD7B000
	006 Move X21, 0xAD8000
	007 Move W8, [X20+1797]
	008 Move X21, [X21+648]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAD7000
	015 Move X0, [X0+648]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1797], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call NameObjectKeysEnumerator..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Int32 get_Count()

Disassembly:
	0x03667080 BL 0x3379A44
	0x03667084 ADRP X0, 0xAD6000
	0x03667088 LDR X0, [X0 + 0x2F0]
	0x0366708C BL 0x1C16D08
	0x03667090 MOV X1, X0
	0x03667094 MOV X0, X19
	0x03667098 BL 0x1C16DEC
	0x0366709C STP X30, X19, [X31 - 0x10]!
	0x036670A0 ADRP X0, 0xA8C000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x036670A4 LDR X0, [X0 + 0xB40]
	0x036670A8 BL 0x1C16D08
	0x036670AC BL 0x1C16F10
	0x036670B0 MOV X19, X0
	0x036670B4 ADRP X0, 0xAD6000
	0x036670B8 LDR X0, [X0 + 0x2E8]
	0x036670BC BL 0x1C16D08
	0x036670C0 MOV X1, X0
	0x036670C4 MOV X0, X19
	0x036670C8 MOV X2, X31
	0x036670CC BL 0x3379A44
	0x036670D0 ADRP X0, 0xAD6000
	0x036670D4 LDR X0, [X0 + 0x2F8]
	0x036670D8 BL 0x1C16D08
	0x036670DC MOV X1, X0
	0x036670E0 MOV X0, X19
	0x036670E4 BL 0x1C16DEC
	0x036670E8 STP X30, X19, [X31 - 0x10]!
	0x036670EC ADRP X0, 0xA8C000
	0x036670F0 LDR X0, [X0 + 0xB40]
	0x036670F4 BL 0x1C16D08
	0x036670F8 BL 0x1C16F10
	0x036670FC MOV X19, X0
	0x03667100 ADRP X0, 0xAD6000
	0x03667104 LDR X0, [X0 + 0x2E8]
	0x03667108 BL 0x1C16D08
	0x0366710C MOV X1, X0
	0x03667110 MOV X0, X19
	0x03667114 MOV X2, X31
	0x03667118 BL 0x3379A44
	0x0366711C ADRP X0, 0xAD6000
	0x03667120 LDR X0, [X0 + 0x300]
	0x03667124 BL 0x1C16D08
	0x03667128 MOV X1, X0
	0x0366712C MOV X0, X19
	0x03667130 BL 0x1C16DEC
	0x03667134 STR X30, [X31 - 0x10]!
	0x03667138 LDR X0, [X0 + 0x28]
	0x0366713C CBZ X0, 0x3667154
	0x03667140 LDR X8, [X0]
	0x03667144 LDR X2, [X8 + 0x298]
	0x03667148 LDR X1, [X8 + 0x2A0]
	0x0366714C LDR X30, [X31], #0x10
	0x03667150 BR X2
	0x03667154 BL 0x3667AD0
	0x03667158 STR X30, [X31 - 0x10]!
	0x0366715C LDR X8, [X0 + 0x28]
	0x03667160 CBZ X8, 0x366716C
	0x03667164 LDR X30, [X31], #0x10
	0x03667168 RET
	0x0366716C BL 0x3667AD0
	0x03667170 STP X30, X19, [X31 - 0x10]!
	0x03667174 ADRP X0, 0xA8C000
	0x03667178 LDR X0, [X0 + 0xB40]
	0x0366717C BL 0x1C16D08
	0x03667180 BL 0x1C16F10
	0x03667184 MOV X19, X0
	0x03667188 ADRP X0, 0xAD6000
	0x0366718C LDR X0, [X0 + 0x2E8]
	0x03667190 BL 0x1C16D08
	0x03667194 MOV X1, X0
	0x03667198 MOV X0, X19
	0x0366719C MOV X2, X31
	0x036671A0 BL 0x3379A44
	0x036671A4 ADRP X0, 0xAD6000
	0x036671A8 LDR X0, [X0 + 0x308]
	0x036671AC BL 0x1C16D08
	0x036671B0 MOV X1, X0
	0x036671B4 MOV X0, X19
	0x036671B8 BL 0x1C16DEC
	0x036671BC STP X30, X19, [X31 - 0x10]!
	0x036671C0 ADRP X0, 0xA8C000
	0x036671C4 LDR X0, [X0 + 0xB40]
	0x036671C8 BL 0x1C16D08
	0x036671CC BL 0x1C16F10
	0x036671D0 MOV X19, X0
	0x036671D4 ADRP X0, 0xAD6000
	0x036671D8 LDR X0, [X0 + 0x2E8]
	0x036671DC BL 0x1C16D08
	0x036671E0 MOV X1, X0
	0x036671E4 MOV X0, X19
	0x036671E8 MOV X2, X31
	0x036671EC BL 0x3379A44
	0x036671F0 ADRP X0, 0xAD6000
	0x036671F4 LDR X0, [X0 + 0x310]
	0x036671F8 BL 0x1C16D08
	0x036671FC MOV X1, X0
	0x03667200 MOV X0, X19
	0x03667204 BL 0x1C16DEC
	0x03667208 STR X30, [X31 - 0x10]!
	0x0366720C LDR X0, [X0 + 0x28]
	0x03667210 CBZ X0, 0x3667228
	0x03667214 LDR X8, [X0]
	0x03667218 LDR X2, [X8 + 0x378]
	0x0366721C LDR X1, [X8 + 0x380]
	0x03667220 LDR X30, [X31], #0x10
	0x03667224 BR X2
	0x03667228 BL 0x3667AD0
	0x0366722C STR X30, [X31 - 0x50]!
	0x03667230 STP X26, X25, [X31 + 0x10]
	0x03667234 STP X24, X23, [X31 + 0x20]
	0x03667238 STP X22, X21, [X31 + 0x30]
	0x0366723C STP X20, X19, [X31 + 0x40]
	0x03667240 ADRP X25, 0xD79000
	0x03667244 ADRP X26, 0xA94000
	0x03667248 LDRB W8, [X25 + 0x715]
	0x0366724C LDR X26, [X26 + 0x7D8]
	0x03667250 MOV X19, X5
	0x03667254 MOV X20, X4
	0x03667258 MOV W21, W3
	0x0366725C MOV W22, W2
	0x03667260 MOV X23, X1
	0x03667264 MOV X24, X0
	0x03667268 TBNZ X8, 0x0, 0x3667280
	0x0366726C ADRP X0, 0xA94000
	0x03667270 LDR X0, [X0 + 0x7D8]
	0x03667274 BL 0x1C16CF4
	0x03667278 MOVZ W8, 0x1
	0x0366727C STRB W8, [X25 + 0x715]
	0x03667280 LDR X0, [X26]
	0x03667284 LDR W8, [X0 + 0xE0]
	0x03667288 CBNZ W8, 0x3667290
	0x0366728C BL 0x1C16DFC
	0x03667290 MOV X0, X31
	0x03667294 BL 0x33DD2A8
	0x03667298 LDR X8, [X24]
	0x0366729C MOV X4, X0
	0x036672A0 MOV X0, X24
	0x036672A4 MOV X1, X23
	0x036672A8 LDR X9, [X8 + 0x2D8]
	0x036672AC LDR X5, [X8 + 0x2E0]
	0x036672B0 MOV W2, W22
	0x036672B4 MOV W3, W21
	0x036672B8 BLR X9
	0x036672BC MOV X1, X20
	0x036672C0 MOV X2, X19
	0x036672C4 LDP X20, X19, [X31 + 0x40]
	0x036672C8 LDP X22, X21, [X31 + 0x30]
	0x036672CC LDP X24, X23, [X31 + 0x20]
	0x036672D0 LDP X26, X25, [X31 + 0x10]
	0x036672D4 MOV X3, X31
	0x036672D8 LDR X30, [X31], #0x50
	0x036672DC B 0x33ED028
	0x036672E0 STP X30, X21, [X31 - 0x20]!
	0x036672E4 STP X20, X19, [X31 + 0x10]
	0x036672E8 ADRP X20, 0xD79000
	0x036672EC ADRP X21, 0xABB000
	0x036672F0 LDRB W8, [X20 + 0x716]
	0x036672F4 LDR X21, [X21 + 0xDC0]
	0x036672F8 MOV X19, X1
	0x036672FC TBNZ X8, 0x0, 0x3667314
	0x03667300 ADRP X0, 0xABB000
	0x03667304 LDR X0, [X0 + 0xDC0]
	0x03667308 BL 0x1C16CF4
	0x0366730C MOVZ W8, 0x1
	0x03667310 STRB W8, [X20 + 0x716]
	0x03667314 LDR X1, [X21]
	0x03667318 MOV X0, X19
	0x0366731C LDP X20, X19, [X31 + 0x10]
	0x03667320 LDP X30, X21, [X31], #0x20
	0x03667324 B 0x229BB30
	0x03667328 STR X30, [X31 - 0x10]!
	0x0366732C LDR X0, [X0 + 0x28]
	0x03667330 CBZ X0, 0x3667348
	0x03667334 LDR X8, [X0]
	0x03667338 LDR X5, [X8 + 0x358]
	0x0366733C LDR X4, [X8 + 0x360]
	0x03667340 LDR X30, [X31], #0x10
	0x03667344 BR X5
	0x03667348 BL 0x3667AD0
	0x0366734C STR X30, [X31 - 0x40]!
	0x03667350 STP X24, X23, [X31 + 0x10]
	0x03667354 STP X22, X21, [X31 + 0x20]
	0x03667358 STP X20, X19, [X31 + 0x30]
	0x0366735C ADRP X24, 0xD79000
	0x03667360 ADRP X22, 0xAD6000
	0x03667364 ADRP X23, 0xA8C000
	0x03667368 LDRB W8, [X24 + 0x717]
	0x0366736C LDR X22, [X22 + 0x318]
	0x03667370 LDR X23, [X23 + 0x6C0]
	0x03667374 MOV X19, X2
	0x03667378 MOV X20, X1
	0x0366737C MOV X21, X0
	0x03667380 TBNZ X8, 0x0, 0x36673A4
	0x03667384 ADRP X0, 0xAD6000
	0x03667388 LDR X0, [X0 + 0x318]
	0x0366738C BL 0x1C16CF4
	0x03667390 ADRP X0, 0xA8C000
	0x03667394 LDR X0, [X0 + 0x6C0]
	0x03667398 BL 0x1C16CF4
	0x0366739C MOVZ W8, 0x1
	0x036673A0 STRB W8, [X24 + 0x717]
	0x036673A4 MOV X0, X21
	0x036673A8 MOV X1, X31
	0x036673AC BL 0x33BE520

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xD7A000
	009 Move W8, [X22+1798]
	010 Move W20, W2
	011 Move X19, X1
	012 Move X21, X0
	013 Move [X31+12], W2
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xA8D000
	019 Move X0, [X0+3608]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1798], W8
	023 Compare X19, 0
	024 JumpIfEqual {121}
	025 Move X0, X19
	026 Move X1, X31
	027 Call Array.get_Rank, X0
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move TEMP, X20
	030 And TEMP, TEMP, -2147483648
	031 Compare TEMP, -2147483648
	032 JumpIfEqual {141}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Array.get_Length, X0
	036 Move X8, [X21+24]
	037 Compare X8, 0
	038 JumpIfEqual {120}
	039 Move X9, [X8]
	040 Move W22, W0
	041 Move X0, X8
	042 Move X10, [X9+664]
	043 Move X1, [X9+672]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Subtract W8, W22, W20
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, [X21]
	048 Move X0, X21
	049 Move X9, [X8+520]
	050 Move X1, [X8+528]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Compare X0, 0
	053 JumpIfEqual {120}
	054 Move X22, 0xA8D000
	055 Move X22, [X22+3608]
	056 Move X21, X0
	057 Move X8, [X21]
	058 Move X1, [X22]
	059 NotImplemented "Instruction LDRH not yet implemented."
	060 Compare X9, 0
	061 JumpIfEqual {68}
	062 Move X10, [X8+176]
	063 Add X10, X10, 8
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Subtract X9, X9, 1
	067 Add X10, X10, 16
	068 Move X0, X21
	069 Move W2, W31
	070 Call 0x1C5D788
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 Add X8, X8, X9
	073 Add X0, X8, 312
	074 Move X8, [X0]
	075 Move X1, [X0+8]
	076 Move X0, X21
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {112}
	082 Move X8, [X21]
	083 Move X1, [X22]
	084 NotImplemented "Instruction LDRH not yet implemented."
	085 Compare X9, 0
	086 JumpIfEqual {93}
	087 Move X10, [X8+176]
	088 Add X10, X10, 8
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Subtract X9, X9, 1
	092 Add X10, X10, 16
	093 Move W2, 1
	094 Move X0, X21
	095 Call 0x1C5D788
	096 Move W9, [X10]
	097 Add W9, W9, 1
	098 Add X8, X8, W9
	099 Add X0, X8, 312
	100 Move X8, [X0]
	101 Move X1, [X0+8]
	102 Move X0, X21
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Move X1, X0
	105 Add W23, W20, 1
	106 Move X0, X19
	107 Move W2, W20
	108 Move X3, X31
	109 Move [X31+12], W23
	110 Call Array.SetValue, X0, X1, X2
	111 Move W20, W23
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X30, [X31+16]
	117 Move X23, [X31+24]
	118 Add X31, X31, 64
	119 Return 
	120 Call 0x1C17F20
	121 Move X0, 0xA92000
	122 Move X0, [X0+1320]
	123 Call 0x1C17D08
	124 Call 0x1C17F10
	125 Move X19, X0
	126 Move X0, 0xAB5000
	127 Move X0, [X0+1600]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X19
	131 Move X2, X31
	132 Call ArgumentNullException..ctor, X0, X1
	133 Move X0, 0xAD7000
	134 Move X0, [X0+656]
	135 Call 0x1C17D08
	136 Move X1, X0
	137 Move X0, X19
	138 Call 0x1C17DEC
	139 Move X0, 0xAD7000
	140 Move X0, [X0+664]
	141 Move X0, 0xA8D000
	142 Move X0, [X0+2512]
	143 Call 0x1C17D08
	144 Move W1, 1
	145 Call 0x1C17D6C
	146 Move X19, X0
	147 Move X0, 0xA8F000
	148 Move X0, [X0+3144]
	149 Call 0x1C17D08
	150 Call 0x19913D0
	151 Move X0, X31
	152 Call CultureInfo.get_CurrentCulture
	153 Move X1, X0
	154 Add X0, X31, 12
	155 Move X2, X31
	156 Call Int32.ToString, X0, X1
	157 Move X20, X0
	158 Move X0, X19
	159 Call 0x19913C0
	160 Move X0, X19
	161 Move X1, X20
	162 Call 0x19990B4
	163 Move X0, X19
	164 Move X1, X31
	165 Move X2, X20
	166 Call 0x1994444
	167 Move X0, 0xAD7000
	168 Move X0, [X0+672]
	169 Call 0x1C17D08
	170 Move X1, X19
	171 Move X2, X31
	172 Call SR.GetString, X0, X1
	173 Move X19, X0
	174 Move X0, 0xA95000
	175 Move X0, [X0+1888]
	176 Call 0x1C17D08
	177 Call 0x1C17F10
	178 Move X20, X0
	179 Move X0, 0xA98000
	180 Move X0, [X0+304]
	181 Call 0x1C17D08
	182 Move X1, X0
	183 Move X0, X20
	184 Move X2, X19
	185 Move X3, X31
	186 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	187 Move X0, 0xAB9000
	188 Move X0, [X0+280]
	189 Call 0x1C17D08
	190 Move X1, X31
	191 Call SR.GetString, X0
	192 Move X19, X0
	193 Move X0, 0xA95000
	194 Move X0, [X0+1400]
	195 Call 0x1C17D08
	196 Call 0x1C17F10
	197 Move X1, X19
	198 Move X2, X31
	199 Move X20, X0
	200 Call ArgumentException..ctor, X0, X1
	201 Move X0, 0xAD7000
	202 Move X0, [X0+656]
	203 Call 0x1C17D08
	204 Move X1, X0
	205 Move X0, X20
	206 Call 0x1C17DEC

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x036673B0 LDR X8, [X23]
	0x036673B4 LDR X23, [X22]
	0x036673B8 MOV X22, X0
	0x036673BC LDR W9, [X8 + 0xE0]
	0x036673C0 CBNZ W9, 0x36673CC
	0x036673C4 MOV X0, X8
	0x036673C8 BL 0x1C16DFC
	0x036673CC MOV X0, X23
	0x036673D0 MOV X1, X31
	0x036673D4 BL 0x338C698
	0x036673D8 MOV X1, X0
	0x036673DC MOV X0, X22
	0x036673E0 MOV X2, X31
	0x036673E4 BL 0x3395F0C
	0x036673E8 TBZ X0, 0x0, 0x3667410
	0x036673EC MOV X0, X21
	0x036673F0 MOV X1, X20
	0x036673F4 MOV X2, X19
	0x036673F8 LDP X20, X19, [X31 + 0x30]
	0x036673FC LDP X22, X21, [X31 + 0x20]
	0x03667400 LDP X24, X23, [X31 + 0x10]
	0x03667404 MOV X3, X31
	0x03667408 LDR X30, [X31], #0x40
	0x0366740C B 0x32F1D10
	0x03667410 LDR X0, [X21 + 0x28]
	0x03667414 CBZ X0, 0x3667434
	0x03667418 MOV X1, X20
	0x0366741C MOV X2, X19
	0x03667420 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD7A000
	005 Move W8, [X20+1799]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA93000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1799], W8
	016 Add X19, X19, 80
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {33}
	020 Move X8, 0xA93000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Move X3, X31
	031 Call Interlocked.CompareExchange, X0, X1, X2
	032 Move X0, [X19]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x03667424 LDP X22, X21, [X31 + 0x20]
	0x03667428 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.String[] BaseGetAllKeys()

Disassembly:
	0x036657F4 BL 0x1C16CF4
	0x036657F8 ADRP X0, 0xAC5000
	0x036657FC LDR X0, [X0 + 0x338]
	0x03665800 BL 0x1C16CF4
	0x03665804 ADRP X0, 0xAC0000
	0x03665808 LDR X0, [X0 + 0x160]
	0x0366580C BL 0x1C16CF4
	0x03665810 ADRP X0, 0xA8E000
	0x03665814 LDR X0, [X0 + 0x9D0]
	0x03665818 BL 0x1C16CF4
	0x0366581C ADRP X0, 0xAC0000
	0x03665820 LDR X0, [X0 + 0x170]
	0x03665824 BL 0x1C16CF4
	0x03665828 ADRP X0, 0xA8E000
	0x0366582C LDR X0, [X0 + 0xAC8]
	0x03665830 BL 0x1C16CF4
	0x03665834 ADRP X0, 0xA8E000
	0x03665838 LDR X0, [X0 + 0x6C0]
	0x0366583C BL 0x1C16CF4
	0x03665840 ADRP X0, 0xAD8000
	0x03665844 LDR X0, [X0 + 0x258]
	0x03665848 BL 0x1C16CF4
	0x0366584C ADRP X0, 0xAC5000
	0x03665850 LDR X0, [X0 + 0x770]
	0x03665854 BL 0x1C16CF4
	0x03665858 ADRP X0, 0xAC5000
	0x0366585C LDR X0, [X0 + 0x778]
	0x03665860 BL 0x1C16CF4
	0x03665864 ADRP X0, 0xAB8000
	0x03665868 LDR X0, [X0 + 0x2C8]
	0x0366586C BL 0x1C16CF4
	0x03665870 ADRP X0, 0xAD8000
	0x03665874 LDR X0, [X0 + 0x260]
	0x03665878 BL 0x1C16CF4
	0x0366587C ADRP X0, 0xAC5000
	0x03665880 LDR X0, [X0 + 0x780]
	0x03665884 BL 0x1C16CF4
	0x03665888 ADRP X0, 0xAB8000
	0x0366588C LDR X0, [X0 + 0x2D0]
	0x03665890 BL 0x1C16CF4
	0x03665894 ADRP X0, 0xA8F000
	0x03665898 LDR X0, [X0 + 0x2A0]
	0x0366589C BL 0x1C16CF4
	0x036658A0 MOVZ W8, 0x1
	0x036658A4 STRB W8, [X20 + 0x6FD]
	0x036658A8 LDR X8, [X19 + 0x20]
	0x036658AC CBNZ X8, 0x3665E54
	0x036658B0 LDR X25, [X19 + 0x40]
	0x036658B4 CBZ X25, 0x3665E78

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD7C000
	008 Move W8, [X20+1800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA8F000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1800], W8
	019 Move X0, [X19+24]
	020 Compare X0, 0
	021 JumpIfEqual {56}
	022 Move X8, [X0]
	023 Move X20, 0xA8F000
	024 Move X9, [X8+664]
	025 Move X1, [X8+672]
	026 Move X20, [X20+2760]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X8, [X20]
	029 Move W22, W0
	030 Move W1, W22
	031 Move X0, X8
	032 Call 0x1C17D6C
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, X0
	035 Move X21, X31
	036 Move W22, W22
	037 Add X23, X20, 32
	038 Move X0, X19
	039 Move W1, W21
	040 Call NameObjectCollectionBase.BaseGetKey, X0, X1
	041 Compare X20, 0
	042 JumpIfEqual {56}
	043 Move W8, [X20+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X23], X0
	046 Add X21, X21, 1
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X20
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return X0
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: System.Collections.Specialized.NameObjectCollectionBase/KeysCollection get_Keys()

Disassembly:
	0x0366742C LDR X30, [X31], #0x40
	0x03667430 B 0x3667438
	0x03667434 BL 0x3667AD0
	0x03667438 SUB X31, X31, 0x40
	0x0366743C STP X30, X23, [X31 + 0x10]
	0x03667440 STP X22, X21, [X31 + 0x20]
	0x03667444 STP X20, X19, [X31 + 0x30]
	0x03667448 ADRP X23, 0xD79000
	0x0366744C ADRP X22, 0xA8C000
	0x03667450 LDRB W8, [X23 + 0x71E]
	0x03667454 LDR X22, [X22 + 0x618]
	0x03667458 MOV X19, X2
	0x0366745C MOV X20, X1
	0x03667460 MOV X21, X0
	0x03667464 TBNZ X8, 0x0, 0x36674A0
	0x03667468 ADRP X0, 0xA8C000
	0x0366746C LDR X0, [X0 + 0x618]
	0x03667470 BL 0x1C16CF4
	0x03667474 ADRP X0, 0xAD6000
	0x03667478 LDR X0, [X0 + 0x320]
	0x0366747C BL 0x1C16CF4
	0x03667480 ADRP X0, 0xAB7000
	0x03667484 LDR X0, [X0 + 0x2E8]
	0x03667488 BL 0x1C16CF4
	0x0366748C ADRP X0, 0xABB000
	0x03667490 LDR X0, [X0 + 0x928]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD7A000
	005 Move W8, [X20+1801]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAD7000
	012 Move X0, [X0+680]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1801], W8
	016 Move X20, [X19+56]
	017 Compare X20, 0
	018 JumpIfNotEqual {28}
	019 Move X8, 0xAD7000
	020 Move X8, [X8+680]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call Object..ctor, X0
	026 Move [X20+16], X19
	027 Move [X19+56], X20
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Void .cctor()

Disassembly:
	0x036674BC ADRP X23, 0xAD6000
	0x036674C0 MOV X22, X0
	0x036674C4 LDR X9, [X8 + 0x358]
	0x036674C8 LDR X4, [X8 + 0x360]
	0x036674CC LDR X23, [X23 + 0x320]
	0x036674D0 MOV X0, X21
	0x036674D4 MOV X1, X22
	0x036674D8 MOV W2, W31
	0x036674DC BLR X9
	0x036674E0 LDR X8, [X23]
	0x036674E4 MOV W21, W0
	0x036674E8 LDR X9, [X8 + 0x38]
	0x036674EC CBNZ X9, 0x36674F8
	0x036674F0 MOV X0, X8
	0x036674F4 BL 0x1C5C6E0
	0x036674F8 LDR W8, [X22 + 0x18]
	0x036674FC ADRP X23, 0xAB7000
	0x03667500 LDR X23, [X23 + 0x2E8]
	0x03667504 CMP W21, W8
	0x03667508 B.LS 0x3667514
	0x0366750C MOV X0, X31
	0x03667510 BL 0x339D6EC
	0x03667514 LDR X3, [X23]
	0x03667518 ADD X8, X22, 0x20
	0x0366751C MOV W9, W21
	0x03667520 ADD X0, X31, 0x0
	0x03667524 MOV X1, X20
	0x03667528 MOV X2, X19
	0x0366752C STP X8, X9, [X31]
	0x03667530 BL 0x25FAF94
	0x03667534 MOV W0, W21
	0x03667538 LDP X20, X19, [X31 + 0x30]
	0x0366753C LDP X22, X21, [X31 + 0x20]
	0x03667540 LDP X30, X23, [X31 + 0x10]
	0x03667544 ADD X31, X31, 0x40
	0x03667548 RET
	0x0366754C BL 0x1C16F20
	0x03667550 STR X30, [X31 - 0x50]!
	0x03667554 STP X26, X25, [X31 + 0x10]
	0x03667558 STP X24, X23, [X31 + 0x20]
	0x0366755C STP X22, X21, [X31 + 0x30]
	0x03667560 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD7A000
	005 Move X19, 0xA9A000
	006 Move W8, [X20+1802]
	007 Move X19, [X19+752]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xAD7000
	013 Move X0, [X0+512]
	014 Call 0x1C17CF4
	015 Move X0, 0xA9A000
	016 Move X0, [X0+752]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1802], W8
	020 Move X0, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X20, 0xD7A000
	026 Move W8, [X20+1203]
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0xA9A000
	030 Move X0, [X0+752]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1203], W8
	034 Move X0, [X19]
	035 Move X20, 0xAD7000
	036 Move W8, [X0+224]
	037 Move X20, [X20+512]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X19]
	042 Move X8, [X0+184]
	043 Move X9, [X20]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X8, [X8+8]
	047 Move X9, [X9+184]
	048 Move [X9], X8
	049 Move X30, [X31+32]
	050 Return 

