Type: System.Collections.Specialized.NameObjectCollectionBase/KeysCollection

Method: System.Void .ctor(System.Collections.Specialized.NameObjectCollectionBase coll)

Disassembly:
	0x03667494 BL 0x1C16CF4
	0x03667498 MOVZ W8, 0x1
	0x0366749C STRB W8, [X23 + 0x71E]
	0x036674A0 LDR X0, [X22]
	0x036674A4 MOV W1, W19
	0x036674A8 STP X31, X31, [X31]
	0x036674AC BL 0x1C16D6C
	0x036674B0 CBZ X0, 0x366754C
	0x036674B4 LDR X8, [X21]
	0x036674B8 LDR W3, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x03667764 STRB W8, [X20 + 0x71F]
	0x03667768 LDR X1, [X21]
	0x0366776C ADD X0, X31, 0x0
	0x03667770 BL 0x25BE934
	0x03667774 LDR X8, [X19]
	0x03667778 LDR W3, [X31 + 0x8]
	0x0366777C MOV X1, X0
	0x03667780 MOV X0, X19
	0x03667784 LDR X9, [X8 + 0x388]
	0x03667788 LDR X4, [X8 + 0x390]
	0x0366778C MOV W2, W31
	0x03667790 BLR X9
	0x03667794 LDP X20, X19, [X31 + 0x20]
	0x03667798 LDP X30, X21, [X31 + 0x10]
	0x0366779C ADD X31, X31, 0x30
	0x036677A0 RET
	0x036677A4 STR X30, [X31 - 0x10]!
	0x036677A8 LDR X0, [X0 + 0x28]
	0x036677AC CBZ X0, 0x36677C4
	0x036677B0 LDR X8, [X0]
	0x036677B4 LDR X4, [X8 + 0x268]
	0x036677B8 LDR X3, [X8 + 0x270]
	0x036677BC LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD7A000
	006 Move X20, 0xAD7000
	007 Move W8, [X21+1803]
	008 Move X20, [X20+648]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAD7000
	015 Move X0, [X0+648]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1803], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call NameObjectKeysEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Int32 get_Count()

Disassembly:
	0x036677C0 BR X4
	0x036677C4 BL 0x3667AD0
	0x036677C8 STP X30, X21, [X31 - 0x20]!
	0x036677CC STP X20, X19, [X31 + 0x10]
	0x036677D0 MOV W20, W1
	0x036677D4 MOV X19, X0
	0x036677D8 TBZ X1, 0x0, 0x36677EC
	0x036677DC LDR X0, [X19 + 0x28]
	0x036677E0 CBZ X0, 0x36677EC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+536]
	007 Move X1, [X8+544]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x036677E4 MOV X1, X31
	0x036677E8 BL 0x32F02B8
	0x036677EC AND W1, W20, 0x1
	0x036677F0 STR X31, [X19 + 0x28]
	0x036677F4 MOV X0, X19
	0x036677F8 LDP X20, X19, [X31 + 0x10]
	0x036677FC MOV X2, X31
	0x03667800 LDP X30, X21, [X31], #0x20
	0x03667804 B 0x32F02C8
	0x03667808 CMP W1, 0x1
	0x0366780C MOV X21, X0
	0x03667810 B.NE 0x3667844
	0x03667814 MOV X0, X21
	0x03667818 BL 0x3EB1AD0
	0x0366781C LDR X20, [X0]
	0x03667820 BL 0x3EB1AE0
	0x03667824 MOVZ W1, 0x1
	0x03667828 MOV X0, X19
	0x0366782C MOV X2, X31
	0x03667830 BL 0x32F02C8
	0x03667834 CBNZ X20, 0x366784C
	0x03667838 LDP X20, X19, [X31 + 0x10]
	0x0366783C LDP X30, X21, [X31], #0x20
	0x03667840 RET
	0x03667844 MOV X20, X31
	0x03667848 B 0x3667858
	0x0366784C MOV X0, X20
	0x03667850 BL 0x1C16F18
	0x03667854 MOV X21, X0
	0x03667858 MOVZ W1, 0x1
	0x0366785C MOV X0, X19
	0x03667860 MOV X2, X31
	0x03667864 BL 0x32F02C8
	0x03667868 CBNZ X20, 0x3667874
	0x0366786C MOV X0, X21
	0x03667870 BL 0x1D2C690
	0x03667874 MOV X0, X20
	0x03667878 BL 0x1C16F18
	0x0366787C BL 0x1990590
	0x03667880 STR X30, [X31 - 0x10]!
	0x03667884 LDR X0, [X0 + 0x28]
	0x03667888 CBZ X0, 0x36678A0
	0x0366788C LDR X8, [X0]
	0x03667890 LDR X6, [X8 + 0x2D8]
	0x03667894 LDR X5, [X8 + 0x2E0]
	0x03667898 LDR X30, [X31], #0x10
	0x0366789C BR X6
	0x036678A0 BL 0x3667AD0
	0x036678A4 STP X30, X25, [X31 - 0x40]!
	0x036678A8 STP X24, X23, [X31 + 0x10]
	0x036678AC STP X22, X21, [X31 + 0x20]
	0x036678B0 STP X20, X19, [X31 + 0x30]
	0x036678B4 ADRP X25, 0xD79000
	0x036678B8 ADRP X23, 0xAD6000
	0x036678BC ADRP X24, 0xA8C000
	0x036678C0 LDRB W8, [X25 + 0x71A]
	0x036678C4 LDR X23, [X23 + 0x318]
	0x036678C8 LDR X24, [X24 + 0x6C0]
	0x036678CC MOV X19, X3
	0x036678D0 MOV X20, X2
	0x036678D4 MOV X21, X1
	0x036678D8 MOV X22, X0
	0x036678DC TBNZ X8, 0x0, 0x3667900
	0x036678E0 ADRP X0, 0xAD6000
	0x036678E4 LDR X0, [X0 + 0x318]
	0x036678E8 BL 0x1C16CF4
	0x036678EC ADRP X0, 0xA8C000
	0x036678F0 LDR X0, [X0 + 0x6C0]
	0x036678F4 BL 0x1C16CF4
	0x036678F8 MOVZ W8, 0x1
	0x036678FC STRB W8, [X25 + 0x71A]
	0x03667900 MOV X0, X22
	0x03667904 MOV X1, X31
	0x03667908 BL 0x33BE520
	0x0366790C LDR X8, [X24]
	0x03667910 LDR X24, [X23]
	0x03667914 MOV X23, X0
	0x03667918 LDR W9, [X8 + 0xE0]
	0x0366791C CBNZ W9, 0x3667928
	0x03667920 MOV X0, X8
	0x03667924 BL 0x1C16DFC
	0x03667928 MOV X0, X24
	0x0366792C MOV X1, X31
	0x03667930 BL 0x338C698
	0x03667934 MOV X1, X0
	0x03667938 MOV X0, X23
	0x0366793C MOV X2, X31
	0x03667940 BL 0x3395F0C
	0x03667944 TBNZ X0, 0x0, 0x3667950
	0x03667948 LDR X22, [X22 + 0x28]
	0x0366794C CBZ X22, 0x3667978
	0x03667950 MOV X0, X22
	0x03667954 MOV X1, X21
	0x03667958 MOV X2, X20
	0x0366795C MOV X3, X19
	0x03667960 LDP X20, X19, [X31 + 0x30]
	0x03667964 LDP X22, X21, [X31 + 0x20]
	0x03667968 LDP X24, X23, [X31 + 0x10]
	0x0366796C MOV X4, X31
	0x03667970 LDP X30, X25, [X31], #0x40
	0x03667974 B 0x32F0EF8
	0x03667978 BL 0x3667AD0
	0x0366797C MOV X4, X31
	0x03667980 B 0x32F0EF8
	0x03667984 STR X30, [X31 - 0x10]!
	0x03667988 LDR X0, [X0 + 0x28]
	0x0366798C CBZ X0, 0x36679A4
	0x03667990 LDR X8, [X0]
	0x03667994 LDR X6, [X8 + 0x318]
	0x03667998 LDR X5, [X8 + 0x320]
	0x0366799C LDR X30, [X31], #0x10
	0x036679A0 BR X6
	0x036679A4 BL 0x3667AD0
	0x036679A8 STP X30, X25, [X31 - 0x40]!
	0x036679AC STP X24, X23, [X31 + 0x10]
	0x036679B0 STP X22, X21, [X31 + 0x20]
	0x036679B4 STP X20, X19, [X31 + 0x30]
	0x036679B8 ADRP X25, 0xD79000
	0x036679BC ADRP X23, 0xAD6000
	0x036679C0 ADRP X24, 0xA8C000
	0x036679C4 LDRB W8, [X25 + 0x71B]
	0x036679C8 LDR X23, [X23 + 0x318]
	0x036679CC LDR X24, [X24 + 0x6C0]
	0x036679D0 MOV X19, X3
	0x036679D4 MOV X20, X2
	0x036679D8 MOV X21, X1
	0x036679DC MOV X22, X0
	0x036679E0 TBNZ X8, 0x0, 0x3667A04
	0x036679E4 ADRP X0, 0xAD6000
	0x036679E8 LDR X0, [X0 + 0x318]
	0x036679EC BL 0x1C16CF4
	0x036679F0 ADRP X0, 0xA8C000
	0x036679F4 LDR X0, [X0 + 0x6C0]
	0x036679F8 BL 0x1C16CF4
	0x036679FC MOVZ W8, 0x1
	0x03667A00 STRB W8, [X25 + 0x71B]
	0x03667A04 MOV X0, X22
	0x03667A08 MOV X1, X31
	0x03667A0C BL 0x33BE520
	0x03667A10 LDR X8, [X24]
	0x03667A14 LDR X24, [X23]
	0x03667A18 MOV X23, X0
	0x03667A1C LDR W9, [X8 + 0xE0]
	0x03667A20 CBNZ W9, 0x3667A2C
	0x03667A24 MOV X0, X8
	0x03667A28 BL 0x1C16DFC
	0x03667A2C MOV X0, X24
	0x03667A30 MOV X1, X31
	0x03667A34 BL 0x338C698
	0x03667A38 MOV X1, X0
	0x03667A3C MOV X0, X23
	0x03667A40 MOV X2, X31
	0x03667A44 BL 0x3395F0C
	0x03667A48 TBNZ X0, 0x0, 0x3667A54
	0x03667A4C LDR X22, [X22 + 0x28]
	0x03667A50 CBZ X22, 0x3667A7C
	0x03667A54 MOV X0, X22
	0x03667A58 MOV X1, X21
	0x03667A5C MOV X2, X20
	0x03667A60 MOV X3, X19
	0x03667A64 LDP X20, X19, [X31 + 0x30]
	0x03667A68 LDP X22, X21, [X31 + 0x20]
	0x03667A6C LDP X24, X23, [X31 + 0x10]
	0x03667A70 MOV X4, X31
	0x03667A74 LDP X30, X25, [X31], #0x40
	0x03667A78 B 0x32F199C
	0x03667A7C BL 0x3667AD0
	0x03667A80 MOV X4, X31
	0x03667A84 B 0x32F199C
	0x03667A88 STR X30, [X31 - 0x10]!
	0x03667A8C LDR X0, [X0 + 0x28]
	0x03667A90 CBZ X0, 0x3667AA8
	0x03667A94 LDR X8, [X0]
	0x03667A98 LDR X3, [X8 + 0x2A8]
	0x03667A9C LDR X2, [X8 + 0x2B0]
	0x03667AA0 LDR X30, [X31], #0x10
	0x03667AA4 BR X3
	0x03667AA8 BL 0x3667AD0
	0x03667AAC STR X30, [X31 - 0x10]!
	0x03667AB0 LDR X0, [X0 + 0x28]
	0x03667AB4 CBZ X0, 0x3667ACC
	0x03667AB8 LDR X8, [X0]
	0x03667ABC LDR X5, [X8 + 0x258]
	0x03667AC0 LDR X4, [X8 + 0x260]
	0x03667AC4 LDR X30, [X31], #0x10
	0x03667AC8 BR X5
	0x03667ACC BL 0x3667AD0
	0x03667AD0 STP X30, X19, [X31 - 0x10]!
	0x03667AD4 ADRP X0, 0xAB5000
	0x03667AD8 LDR X0, [X0 + 0x4B8]
	0x03667ADC BL 0x1C16D08
	0x03667AE0 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xD7A000
	009 Move W8, [X22+1804]
	010 Move W20, W2
	011 Move X19, X1
	012 Move X21, X0
	013 Move [X31+12], W2
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xA8D000
	019 Move X0, [X0+3608]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1804], W8
	023 Compare X19, 0
	024 JumpIfEqual {118}
	025 Move X0, X19
	026 Move X1, X31
	027 Call Array.get_Rank, X0
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move TEMP, X20
	030 And TEMP, TEMP, -2147483648
	031 Compare TEMP, -2147483648
	032 JumpIfEqual {138}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Array.get_Length, X0
	036 Move X8, [X21+16]
	037 Compare X8, 0
	038 JumpIfEqual {117}
	039 Move X9, [X8]
	040 Move W22, W0
	041 Move X0, X8
	042 Move X10, [X9+536]
	043 Move X1, [X9+544]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Subtract W8, W22, W20
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, X21
	048 Call KeysCollection.GetEnumerator, X0
	049 Compare X0, 0
	050 JumpIfEqual {117}
	051 Move X22, 0xA8D000
	052 Move X22, [X22+3608]
	053 Move X21, X0
	054 Move X8, [X21]
	055 Move X1, [X22]
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Compare X9, 0
	058 JumpIfEqual {65}
	059 Move X10, [X8+176]
	060 Add X10, X10, 8
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Subtract X9, X9, 1
	064 Add X10, X10, 16
	065 Move X0, X21
	066 Move W2, W31
	067 Call 0x1C5D788
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 Add X8, X8, X9
	070 Add X0, X8, 312
	071 Move X8, [X0]
	072 Move X1, [X0+8]
	073 Move X0, X21
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {109}
	079 Move X8, [X21]
	080 Move X1, [X22]
	081 NotImplemented "Instruction LDRH not yet implemented."
	082 Compare X9, 0
	083 JumpIfEqual {90}
	084 Move X10, [X8+176]
	085 Add X10, X10, 8
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract X9, X9, 1
	089 Add X10, X10, 16
	090 Move W2, 1
	091 Move X0, X21
	092 Call 0x1C5D788
	093 Move W9, [X10]
	094 Add W9, W9, 1
	095 Add X8, X8, W9
	096 Add X0, X8, 312
	097 Move X8, [X0]
	098 Move X1, [X0+8]
	099 Move X0, X21
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X1, X0
	102 Add W23, W20, 1
	103 Move X0, X19
	104 Move W2, W20
	105 Move X3, X31
	106 Move [X31+12], W23
	107 Call Array.SetValue, X0, X1, X2
	108 Move W20, W23
	109 Move X20, [X31+48]
	110 Move X19, [X31+56]
	111 Move X22, [X31+32]
	112 Move X21, [X31+40]
	113 Move X30, [X31+16]
	114 Move X23, [X31+24]
	115 Add X31, X31, 64
	116 Return 
	117 Call 0x1C17F20
	118 Move X0, 0xA92000
	119 Move X0, [X0+1320]
	120 Call 0x1C17D08
	121 Call 0x1C17F10
	122 Move X19, X0
	123 Move X0, 0xAB5000
	124 Move X0, [X0+1600]
	125 Call 0x1C17D08
	126 Move X1, X0
	127 Move X0, X19
	128 Move X2, X31
	129 Call ArgumentNullException..ctor, X0, X1
	130 Move X0, 0xAD7000
	131 Move X0, [X0+712]
	132 Call 0x1C17D08
	133 Move X1, X0
	134 Move X0, X19
	135 Call 0x1C17DEC
	136 Move X0, 0xAD7000
	137 Move X0, [X0+664]
	138 Move X0, 0xA8D000
	139 Move X0, [X0+2512]
	140 Call 0x1C17D08
	141 Move W1, 1
	142 Call 0x1C17D6C
	143 Move X19, X0
	144 Move X0, 0xA8F000
	145 Move X0, [X0+3144]
	146 Call 0x1C17D08
	147 Call 0x19913D0
	148 Move X0, X31
	149 Call CultureInfo.get_CurrentCulture
	150 Move X1, X0
	151 Add X0, X31, 12
	152 Move X2, X31
	153 Call Int32.ToString, X0, X1
	154 Move X20, X0
	155 Move X0, X19
	156 Call 0x19913C0
	157 Move X0, X19
	158 Move X1, X20
	159 Call 0x19990B4
	160 Move X0, X19
	161 Move X1, X31
	162 Move X2, X20
	163 Call 0x1994444
	164 Move X0, 0xAD7000
	165 Move X0, [X0+672]
	166 Call 0x1C17D08
	167 Move X1, X19
	168 Move X2, X31
	169 Call SR.GetString, X0, X1
	170 Move X19, X0
	171 Move X0, 0xA95000
	172 Move X0, [X0+1888]
	173 Call 0x1C17D08
	174 Call 0x1C17F10
	175 Move X20, X0
	176 Move X0, 0xA98000
	177 Move X0, [X0+304]
	178 Call 0x1C17D08
	179 Move X1, X0
	180 Move X0, X20
	181 Move X2, X19
	182 Move X3, X31
	183 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	184 Move X0, 0xAB9000
	185 Move X0, [X0+280]
	186 Call 0x1C17D08
	187 Move X1, X31
	188 Call SR.GetString, X0
	189 Move X19, X0
	190 Move X0, 0xA95000
	191 Move X0, [X0+1400]
	192 Call 0x1C17D08
	193 Call 0x1C17F10
	194 Move X1, X19
	195 Move X2, X31
	196 Move X20, X0
	197 Call ArgumentException..ctor, X0, X1
	198 Move X0, 0xAD7000
	199 Move X0, [X0+712]
	200 Call 0x1C17D08
	201 Move X1, X0
	202 Move X0, X20
	203 Call 0x1C17DEC

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x03667AE4 MOV X19, X0
	0x03667AE8 ADRP X0, 0xABF000
	0x03667AEC LDR X0, [X0 + 0xBE8]
	0x03667AF0 BL 0x1C16D08
	0x03667AF4 MOV X2, X0
	0x03667AF8 MOV X0, X19
	0x03667AFC MOV X1, X31
	0x03667B00 MOV X3, X31
	0x03667B04 BL 0x338C410
	0x03667B08 ADRP X0, 0xAD6000
	0x03667B0C LDR X0, [X0 + 0x330]
	0x03667B10 BL 0x1C16D08
	0x03667B14 MOV X1, X0
	0x03667B18 MOV X0, X19
	0x03667B1C BL 0x1C16DEC
	0x03667B20 MOV W3, W31
	0x03667B24 MOV W4, W31
	0x03667B28 B 0x3667B2C
	0x03667B2C STP X30, X25, [X31 - 0x40]!
	0x03667B30 STP X24, X23, [X31 + 0x10]
	0x03667B34 STP X22, X21, [X31 + 0x20]
	0x03667B38 STP X20, X19, [X31 + 0x30]
	0x03667B3C ADRP X24, 0xD79000
	0x03667B40 ADRP X25, 0xABB000
	0x03667B44 LDRB W8, [X24 + 0x71C]
	0x03667B48 LDR X25, [X25 + 0xD10]
	0x03667B4C MOV W22, W4
	0x03667B50 MOV W20, W3
	0x03667B54 MOV W19, W2
	0x03667B58 MOV X23, X1
	0x03667B5C MOV X21, X0
	0x03667B60 TBNZ X8, 0x0, 0x3667B78
	0x03667B64 ADRP X0, 0xABB000
	0x03667B68 LDR X0, [X0 + 0xD10]
	0x03667B6C BL 0x1C16CF4
	0x03667B70 MOVZ W8, 0x1
	0x03667B74 STRB W8, [X24 + 0x71C]
	0x03667B78 LDR X0, [X25]
	0x03667B7C LDR W8, [X0 + 0xE0]
	0x03667B80 CBNZ W8, 0x3667B88
	0x03667B84 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD7A000
	005 Move W8, [X20+1805]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA94000
	012 Move X0, [X0+752]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1805], W8
	016 Move X19, [X19+16]
	017 Compare X19, 0
	018 JumpIfEqual {46}
	019 Move X10, 0xA94000
	020 Move X8, [X19]
	021 Move X10, [X10+752]
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X1, [X10]
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move W2, 2
	033 Move X0, X19
	034 Call 0x1C5D788
	035 Move W9, [X10]
	036 Add W9, W9, 2
	037 Add X8, X8, W9
	038 Add X0, X8, 312
	039 Move X2, [X0]
	040 Move X1, [X0+8]
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 CallNoReturn X2
	046 Call 0x1C17F20

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x03667B88 MOV X0, X21
	0x03667B8C MOV X1, X31

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03667B90 BL 0x32F27B0
	0x03667B94 CBZ X23, 0x3667BDC
	0x03667B98 CMP W19, 0x2
	0x03667B9C B.CS 0x3667C10
	0x03667BA0 AND W2, W22, 0x1
	0x03667BA4 MOV X0, X23
	0x03667BA8 MOV W1, W19
	0x03667BAC STR X23, [X21 + 0x28]
	0x03667BB0 BL 0x3667C98
	0x03667BB4 STR X0, [X21 + 0x38]
	0x03667BB8 CBZ X0, 0x3667C44
	0x03667BBC AND W8, W20, 0x1
	0x03667BC0 STR W19, [X21 + 0x30]
	0x03667BC4 STRB W8, [X21 + 0x34]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD7A000
	005 Move X20, 0xAD7000
	006 Move W8, [X19+1806]
	007 Move X20, [X20+720]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAD7000
	013 Move X0, [X0+720]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1806], W8
	017 Move X0, [X20]
	018 Call 0x1C17D9C

