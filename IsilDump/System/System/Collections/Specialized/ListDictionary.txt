Type: System.Collections.Specialized.ListDictionary

Method: System.Void .ctor()

Disassembly:
	0x0366324C ADD X1, X31, 0xC
	0x03663250 BL 0x1C16E04

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .ctor(System.Collections.IComparer comparer)

Disassembly:
	0x03663254 MOV X19, X0
	0x03663258 ADRP X0, 0xA98000
	0x0366325C LDR X0, [X0 + 0x760]
	0x03663260 BL 0x1C16D08
	0x03663264 BL 0x1C16F10
	0x03663268 MOV X20, X0
	0x0366326C ADRP X0, 0xA9B000
	0x03663270 LDR X0, [X0 + 0x130]
	0x03663274 BL 0x1C16D08
	0x03663278 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+32], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Object get_Item(System.Object key)

Disassembly:
	0x0366327C ADRP X0, 0xAB8000
	0x03663280 LDR X0, [X0 + 0x670]
	0x03663284 BL 0x1C16D08
	0x03663288 MOV X3, X0
	0x0366328C MOV X0, X20
	0x03663290 MOV X1, X21
	0x03663294 MOV X2, X19
	0x03663298 MOV X4, X31
	0x0366329C BL 0x3312C8C
	0x036632A0 ADRP X0, 0xADA000
	0x036632A4 LDR X0, [X0 + 0x1D8]
	0x036632A8 BL 0x1C16D08
	0x036632AC MOV X1, X0
	0x036632B0 MOV X0, X20
	0x036632B4 BL 0x1C16DEC
	0x036632B8 BL 0x1C16F20
	0x036632BC STR X30, [X31 - 0x10]!
	0x036632C0 LDR X8, [X0 + 0x10]
	0x036632C4 CBZ X8, 0x36632F0
	0x036632C8 LDR X8, [X8 + 0x10]
	0x036632CC CBZ X8, 0x36632E4
	0x036632D0 MOV W0, W31
	0x036632D4 LDR X8, [X8 + 0x20]
	0x036632D8 ADD W0, W0, 0x1
	0x036632DC CBNZ X8, 0x36632D4
	0x036632E0 B 0x36632E8
	0x036632E4 MOV W0, W31
	0x036632E8 LDR X30, [X31], #0x10
	0x036632EC RET
	0x036632F0 BL 0x1C16F20
	0x036632F4 MOV W0, W31
	0x036632F8 RET
	0x036632FC STR X30, [X31 - 0x10]!
	0x03663300 LDR X0, [X0 + 0x10]
	0x03663304 CBZ X0, 0x3663310
	0x03663308 LDR X30, [X31], #0x10
	0x0366330C B 0x3662644
	0x03663310 BL 0x1C16F20
	0x03663314 STP X30, X21, [X31 - 0x20]!
	0x03663318 STP X20, X19, [X31 + 0x10]
	0x0366331C ADRP X20, 0xD7D000
	0x03663320 ADRP X21, 0xADA000
	0x03663324 LDRB W8, [X20 + 0x6E2]
	0x03663328 LDR X21, [X21 + 0x1E0]
	0x0366332C MOV X19, X0
	0x03663330 TBNZ X8, 0x0, 0x3663348
	0x03663334 ADRP X0, 0xADA000
	0x03663338 LDR X0, [X0 + 0x1E0]
	0x0366333C BL 0x1C16CF4
	0x03663340 MOVZ W8, 0x1
	0x03663344 STRB W8, [X20 + 0x6E2]
	0x03663348 LDR X0, [X21]
	0x0366334C LDR X20, [X19 + 0x10]
	0x03663350 LDRB W19, [X19 + 0x18]
	0x03663354 BL 0x1C16F10
	0x03663358 MOV X1, X20
	0x0366335C MOV W2, W19
	0x03663360 MOV X21, X0
	0x03663364 BL 0x3663378
	0x03663368 LDP X20, X19, [X31 + 0x10]
	0x0366336C MOV X0, X21
	0x03663370 LDP X30, X21, [X31], #0x20
	0x03663374 RET
	0x03663378 STP X30, X21, [X31 - 0x20]!
	0x0366337C STP X20, X19, [X31 + 0x10]
	0x03663380 MOV X20, X1
	0x03663384 MOV X1, X31
	0x03663388 MOV X19, X0
	0x0366338C AND W21, W2, 0x1
	0x03663390 BL 0x33BDD8C
	0x03663394 STR X20, [X19 + 0x10]
	0x03663398 STRB W21, [X19 + 0x24]
	0x0366339C CBZ X20, 0x36633C0
	0x036633A0 LDR W8, [X20 + 0x18]
	0x036633A4 MOVZ W9, 0x1
	0x036633A8 STRB W9, [X19 + 0x25]
	0x036633AC STR X31, [X19 + 0x18]
	0x036633B0 STR W8, [X19 + 0x20]
	0x036633B4 LDP X20, X19, [X31 + 0x10]
	0x036633B8 LDP X30, X21, [X31], #0x20
	0x036633BC RET
	0x036633C0 BL 0x1C16F20
	0x036633C4 STP X30, X19, [X31 - 0x10]!
	0x036633C8 LDR X8, [X0 + 0x18]
	0x036633CC CBZ X8, 0x36633F0
	0x036633D0 LDRB W9, [X0 + 0x24]
	0x036633D4 MOVZ W10, 0x10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xD7E000
	009 Move W8, [X21+1750]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xABB000
	017 Move X0, [X0+2328]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1750], W8
	021 Compare X19, 0
	022 JumpIfEqual {89}
	023 Move X21, [X20+32]
	024 Move X23, [X20+16]
	025 Compare X21, 0
	026 JumpIfEqual {77}
	027 Compare X23, 0
	028 JumpIfEqual {79}
	029 Move X24, 0xABB000
	030 Move X24, [X24+2328]
	031 Move X8, [X21]
	032 Move X22, [X23+16]
	033 Move X1, [X24]
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Compare X9, 0
	036 JumpIfEqual {43}
	037 Move X10, [X8+176]
	038 Add X10, X10, 8
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract X9, X9, 1
	042 Add X10, X10, 16
	043 Move X0, X21
	044 Move W2, W31
	045 Call 0x1C5D788
	046 NotImplemented "Instruction LDRSW not yet implemented."
	047 Add X8, X8, X9
	048 Add X0, X8, 312
	049 Move X8, [X0]
	050 Move X3, [X0+8]
	051 Move X0, X21
	052 Move X1, X22
	053 Move X2, X19
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Compare W0, 0
	056 JumpIfEqual {80}
	057 Move X23, [X23+32]
	058 Compare X23, 0
	059 JumpIfEqual {79}
	060 Move X21, [X20+32]
	061 Compare X21, 0
	062 JumpIfNotEqual {31}
	063 Call 0x1C17F20
	064 Move X0, [X23+16]
	065 Compare X0, 0
	066 JumpIfEqual {63}
	067 Move X8, [X0]
	068 Move X1, X19
	069 Move X9, [X8+312]
	070 Move X2, [X8+320]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {80}
	076 Move X23, [X23+32]
	077 Compare X23, 0
	078 JumpIfNotEqual {64}
	079 Move X0, X31
	080 Move X0, [X23+24]
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0
	089 Move X0, 0xA96000
	090 Move X0, [X0+1320]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X19, X0
	094 Move X0, 0xABB000
	095 Move X0, [X0+112]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Move X2, X31
	100 Call ArgumentNullException..ctor, X0, X1
	101 Move X0, 0xADB000
	102 Move X0, [X0+360]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Call 0x1C17DEC

Method: System.Void set_Item(System.Object key, System.Object value)

Disassembly:
	0x036633D8 CMP W9, 0x0
	0x036633DC MOVZ W9, 0x18
	0x036633E0 CSEL X9, X9, X10, EQ
	0x036633E4 LDR X0, [X8, X9, LSL]
	0x036633E8 LDP X30, X19, [X31], #0x10
	0x036633EC RET
	0x036633F0 ADRP X0, 0xA90000
	0x036633F4 LDR X0, [X0 + 0x5B0]
	0x036633F8 BL 0x1C16D08
	0x036633FC BL 0x1C16F10
	0x03663400 MOV X19, X0
	0x03663404 ADRP X0, 0xABA000
	0x03663408 LDR X0, [X0 + 0x290]
	0x0366340C BL 0x1C16D08
	0x03663410 MOV X1, X0
	0x03663414 MOV X0, X19
	0x03663418 MOV X2, X31
	0x0366341C BL 0x337DF1C
	0x03663420 ADRP X0, 0xADA000
	0x03663424 LDR X0, [X0 + 0x1E8]
	0x03663428 BL 0x1C16D08
	0x0366342C MOV X1, X0
	0x03663430 MOV X0, X19
	0x03663434 BL 0x1C16DEC
	0x03663438 STP X30, X19, [X31 - 0x10]!
	0x0366343C LDR X8, [X0 + 0x10]
	0x03663440 CBZ X8, 0x3663488
	0x03663444 LDR W9, [X0 + 0x20]
	0x03663448 LDR W10, [X8 + 0x18]
	0x0366344C CMP W9, W10
	0x03663450 B.NE 0x366348C
	0x03663454 LDRB W9, [X0 + 0x25]
	0x03663458 CBZ W9, 0x3663468
	0x0366345C LDR X8, [X8 + 0x10]
	0x03663460 STRB W31, [X0 + 0x25]
	0x03663464 B 0x3663474
	0x03663468 LDR X8, [X0 + 0x18]
	0x0366346C CBZ X8, 0x3663478
	0x03663470 LDR X8, [X8 + 0x20]
	0x03663474 STR X8, [X0 + 0x18]
	0x03663478 CMP X8, 0x0
	0x0366347C CSET W0, NE
	0x03663480 LDP X30, X19, [X31], #0x10
	0x03663484 RET
	0x03663488 BL 0x1C16F20
	0x0366348C ADRP X0, 0xA90000
	0x03663490 LDR X0, [X0 + 0x5B0]
	0x03663494 BL 0x1C16D08
	0x03663498 BL 0x1C16F10
	0x0366349C MOV X19, X0
	0x036634A0 ADRP X0, 0xABA000
	0x036634A4 LDR X0, [X0 + 0x288]
	0x036634A8 BL 0x1C16D08
	0x036634AC MOV X1, X0
	0x036634B0 MOV X0, X19
	0x036634B4 MOV X2, X31
	0x036634B8 BL 0x337DF1C
	0x036634BC ADRP X0, 0xADA000
	0x036634C0 LDR X0, [X0 + 0x1F0]
	0x036634C4 BL 0x1C16D08
	0x036634C8 MOV X1, X0
	0x036634CC MOV X0, X19
	0x036634D0 BL 0x1C16DEC
	0x036634D4 STP X30, X19, [X31 - 0x10]!
	0x036634D8 LDR X8, [X0 + 0x10]
	0x036634DC CBZ X8, 0x3663504
	0x036634E0 LDR W9, [X0 + 0x20]
	0x036634E4 LDR W8, [X8 + 0x18]
	0x036634E8 CMP W9, W8
	0x036634EC B.NE 0x3663508
	0x036634F0 MOVZ W8, 0x1
	0x036634F4 STRB W8, [X0 + 0x25]
	0x036634F8 STR X31, [X0 + 0x18]
	0x036634FC LDP X30, X19, [X31], #0x10
	0x03663500 RET
	0x03663504 BL 0x1C16F20
	0x03663508 ADRP X0, 0xA90000
	0x0366350C LDR X0, [X0 + 0x5B0]
	0x03663510 BL 0x1C16D08
	0x03663514 BL 0x1C16F10
	0x03663518 MOV X19, X0
	0x0366351C ADRP X0, 0xABA000
	0x03663520 LDR X0, [X0 + 0x288]
	0x03663524 BL 0x1C16D08
	0x03663528 MOV X1, X0
	0x0366352C MOV X0, X19
	0x03663530 MOV X2, X31
	0x03663534 BL 0x337DF1C
	0x03663538 ADRP X0, 0xADA000
	0x0366353C LDR X0, [X0 + 0x1F8]
	0x03663540 BL 0x1C16D08
	0x03663544 MOV X1, X0
	0x03663548 MOV X0, X19
	0x0366354C BL 0x1C16DEC
	0x03663550 STP X30, X21, [X31 - 0x20]!
	0x03663554 STP X20, X19, [X31 + 0x10]
	0x03663558 ADRP X20, 0xD7D000
	0x0366355C ADRP X21, 0xADA000
	0x03663560 LDRB W8, [X20 + 0x6E3]
	0x03663564 LDR X21, [X21 + 0x200]
	0x03663568 MOV X19, X0
	0x0366356C TBNZ X8, 0x0, 0x3663584
	0x03663570 ADRP X0, 0xADA000
	0x03663574 LDR X0, [X0 + 0x200]
	0x03663578 BL 0x1C16CF4
	0x0366357C MOVZ W8, 0x1
	0x03663580 STRB W8, [X20 + 0x6E3]
	0x03663584 LDR X0, [X21]
	0x03663588 LDR W8, [X0 + 0xE0]
	0x0366358C CBNZ W8, 0x3663594
	0x03663590 BL 0x1C16DFC
	0x03663594 MOV X0, X19

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0xD7E000
	011 Move W8, [X22+1751]
	012 Move X20, X2
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xADB000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move X0, 0xABB000
	023 Move X0, [X0+2328]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1751], W8
	027 Compare X21, 0
	028 JumpIfEqual {115}
	029 Move X24, X19
	030 Add X24, X24, 16
	031 Move X8, [X24]
	032 Move W9, [X24+8]
	033 Add W9, W9, 1
	034 Move [X24+8], W9
	035 Compare X8, 0
	036 JumpIfEqual {84}
	037 Move X26, 0xABB000
	038 Move X26, [X26+2328]
	039 Move X23, [X19+32]
	040 Move X22, [X8+16]
	041 Move X25, X8
	042 Compare X23, 0
	043 JumpIfEqual {58}
	044 Move X8, [X23]
	045 Move X1, [X26]
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Compare X9, 0
	048 JumpIfEqual {55}
	049 Move X10, [X8+176]
	050 Add X10, X10, 8
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Subtract X9, X9, 1
	054 Add X10, X10, 16
	055 Move X0, X23
	056 Move W2, W31
	057 Call 0x1C5D788
	058 Compare X22, 0
	059 JumpIfEqual {114}
	060 Move X8, [X22]
	061 Move X0, X22
	062 Move X1, X21
	063 Move X9, [X8+312]
	064 Move X2, [X8+320]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {81}
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 Add X8, X8, X9
	072 Add X0, X8, 312
	073 Move X8, [X0]
	074 Move X3, [X0+8]
	075 Move X0, X23
	076 Move X1, X22
	077 Move X2, X21
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Compare W0, 0
	080 JumpIfEqual {103}
	081 Move X8, [X25+32]
	082 Compare X8, 0
	083 JumpIfNotEqual {39}
	084 Move X25, X31
	085 Move X8, 0xADB000
	086 Move X8, [X8+368]
	087 Move X0, [X8]
	088 Call 0x1C17F10
	089 Move X1, X31
	090 Move X22, X0
	091 Call Object..ctor, X0
	092 Compare X22, 0
	093 JumpIfEqual {114}
	094 Add X8, X25, 32
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSEL not yet implemented."
	097 Move [X22+16], X21
	098 Move [X22+24], X20
	099 Move [X8], X22
	100 Move W8, [X19+28]
	101 Add W8, W8, 1
	102 Move [X19+28], W8
	103 Move [X25+24], X20
	104 Move X20, [X31+64]
	105 Move X19, [X31+72]
	106 Move X22, [X31+48]
	107 Move X21, [X31+56]
	108 Move X24, [X31+32]
	109 Move X23, [X31+40]
	110 Move X26, [X31+16]
	111 Move X25, [X31+24]
	112 Move X30, [X31+80]
	113 Return 
	114 Call 0x1C17F20
	115 Move X0, 0xA96000
	116 Move X0, [X0+1320]
	117 Call 0x1C17D08
	118 Call 0x1C17F10
	119 Move X19, X0
	120 Move X0, 0xABB000
	121 Move X0, [X0+112]
	122 Call 0x1C17D08
	123 Move X1, X0
	124 Move X0, X19
	125 Move X2, X31
	126 Call ArgumentNullException..ctor, X0, X1
	127 Move X0, 0xADB000
	128 Move X0, [X0+376]
	129 Call 0x1C17D08
	130 Move X1, X0
	131 Move X0, X19
	132 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x036635A0 B 0x36635A4
	0x036635A4 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Collections.ICollection get_Keys()

Disassembly:
	0x036635A8 STP X20, X19, [X31 + 0x10]
	0x036635AC ADRP X21, 0xD7D000
	0x036635B0 ADRP X20, 0xADA000
	0x036635B4 LDRB W8, [X21 + 0x6F9]
	0x036635B8 LDR X20, [X20 + 0x200]
	0x036635BC MOV X19, X0
	0x036635C0 TBNZ X8, 0x0, 0x36635D8
	0x036635C4 ADRP X0, 0xADA000
	0x036635C8 LDR X0, [X0 + 0x200]
	0x036635CC BL 0x1C16CF4
	0x036635D0 MOVZ W8, 0x1
	0x036635D4 STRB W8, [X21 + 0x6F9]
	0x036635D8 LDR X0, [X20]
	0x036635DC LDR W8, [X0 + 0xE0]
	0x036635E0 CBNZ W8, 0x36635EC
	0x036635E4 BL 0x1C16DFC
	0x036635E8 LDR X0, [X20]
	0x036635EC LDR X8, [X0 + 0xB8]
	0x036635F0 MOV X0, X19
	0x036635F4 LDP X20, X19, [X31 + 0x10]
	0x036635F8 LDR X1, [X8]
	0x036635FC LDP X30, X21, [X31], #0x20
	0x03663600 B 0x3663694
	0x03663604 STR X30, [X31 - 0x30]!
	0x03663608 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD7E000
	006 Move X21, 0xADB000
	007 Move W8, [X20+1752]
	008 Move X21, [X21+384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xADB000
	015 Move X0, [X0+384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1752], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move W8, 1
	025 Move [X20+16], X19
	026 Move [X20+24], W8
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x0366363C LDR X22, [X22 + 0x200]
	0x03663640 CBZ X19, 0x366365C

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object get_SyncRoot()

Disassembly:
	0x03663644 LDR X0, [X22]
	0x03663648 LDR W8, [X0 + 0xE0]
	0x0366364C CBNZ W8, 0x3663654
	0x03663650 BL 0x1C16DFC
	0x03663654 LDR X21, [X19 + 0x20]
	0x03663658 B 0x3663660
	0x0366365C MOV X21, X31
	0x03663660 LDR X0, [X22]
	0x03663664 LDR W8, [X0 + 0xE0]
	0x03663668 CBNZ W8, 0x3663670
	0x0366366C BL 0x1C16DFC
	0x03663670 MOV X0, X20
	0x03663674 MOV X1, X21
	0x03663678 BL 0x3663694
	0x0366367C MOV X0, X20
	0x03663680 MOV X1, X19
	0x03663684 LDP X20, X19, [X31 + 0x20]
	0x03663688 LDP X22, X21, [X31 + 0x10]
	0x0366368C LDR X30, [X31], #0x30
	0x03663690 B 0x3663714
	0x03663694 STP X30, X21, [X31 - 0x20]!
	0x03663698 STP X20, X19, [X31 + 0x10]
	0x0366369C ADRP X21, 0xD7D000
	0x036636A0 LDRB W8, [X21 + 0x6FA]
	0x036636A4 MOV X20, X1
	0x036636A8 MOV X19, X0
	0x036636AC TBNZ X8, 0x0, 0x36636C4
	0x036636B0 ADRP X0, 0xADA000
	0x036636B4 LDR X0, [X0 + 0x200]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD7E000
	005 Move W8, [X20+1753]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA97000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1753], W8
	016 Add X19, X19, 40
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {33}
	020 Move X8, 0xA97000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Move X3, X31
	031 Call Interlocked.CompareExchange, X0, X1, X2
	032 Move X0, [X19]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.ICollection get_Values()

Disassembly:
	0x036636B8 BL 0x1C16CF4
	0x036636BC MOVZ W8, 0x1
	0x036636C0 STRB W8, [X21 + 0x6FA]
	0x036636C4 MOV X0, X19
	0x036636C8 MOV X1, X31
	0x036636CC BL 0x33BDD8C
	0x036636D0 CBNZ X20, 0x36636F8
	0x036636D4 ADRP X20, 0xADA000
	0x036636D8 LDR X20, [X20 + 0x200]
	0x036636DC LDR X0, [X20]
	0x036636E0 LDR W8, [X0 + 0xE0]
	0x036636E4 CBNZ W8, 0x36636F0
	0x036636E8 BL 0x1C16DFC
	0x036636EC LDR X0, [X20]
	0x036636F0 LDR X8, [X0 + 0xB8]
	0x036636F4 LDR X20, [X8]
	0x036636F8 CBZ X19, 0x3663710
	0x036636FC STR X20, [X19 + 0x20]
	0x03663700 MOV X0, X19
	0x03663704 LDP X20, X19, [X31 + 0x10]
	0x03663708 LDP X30, X21, [X31], #0x20
	0x0366370C B 0x3664EEC
	0x03663710 BL 0x1C16F20
	0x03663714 STR X30, [X31 - 0x50]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD7E000
	006 Move X21, 0xADB000
	007 Move W8, [X20+1754]
	008 Move X21, [X21+384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xADB000
	015 Move X0, [X0+384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1754], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], X19
	025 Move [X20+24], W31
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void Add(System.Object key, System.Object value)

Disassembly:
	0x03663718 STP X26, X25, [X31 + 0x10]
	0x0366371C STP X24, X23, [X31 + 0x20]
	0x03663720 STP X22, X21, [X31 + 0x30]
	0x03663724 STP X20, X19, [X31 + 0x40]
	0x03663728 CBZ X1, 0x366382C
	0x0366372C STP X31, X31, [X0 + 0x58]
	0x03663730 LDR X8, [X1]
	0x03663734 MOV X19, X1
	0x03663738 MOV X20, X0
	0x0366373C MOV X0, X19
	0x03663740 LDR X9, [X8 + 0x218]
	0x03663744 LDR X1, [X8 + 0x220]
	0x03663748 BLR X9
	0x0366374C CMP W0, 0x1
	0x03663750 B.LT 0x3663810
	0x03663754 MOV W21, W0
	0x03663758 MOV W22, W31
	0x0366375C LDR X8, [X19]
	0x03663760 MOV X0, X19
	0x03663764 MOV W1, W22
	0x03663768 LDR X9, [X8 + 0x2B8]
	0x0366376C LDR X2, [X8 + 0x2C0]
	0x03663770 BLR X9
	0x03663774 LDR X8, [X19]
	0x03663778 MOV X23, X0
	0x0366377C MOV X0, X19
	0x03663780 MOV W1, W22
	0x03663784 LDR X9, [X8 + 0x2A8]
	0x03663788 LDR X2, [X8 + 0x2B0]
	0x0366378C BLR X9
	0x03663790 CBZ X0, 0x36637E8
	0x03663794 LDR X8, [X0 + 0x18]
	0x03663798 MOV X24, X0
	0x0366379C CMP W8, 0x1
	0x036637A0 B.LT 0x3663804
	0x036637A4 MOV X25, X31
	0x036637A8 AND X8, X8, 0x0
	0x036637AC ADD X26, X24, 0x20
	0x036637B0 CMP X25, W8, UXTW
	0x036637B4 B.CS 0x3663828
	0x036637B8 LDR X8, [X20]
	0x036637BC LDR X2, [X26, X25, LSL #3]
	0x036637C0 MOV X0, X20
	0x036637C4 MOV X1, X23
	0x036637C8 LDR X9, [X8 + 0x248]
	0x036637CC LDR X3, [X8 + 0x250]
	0x036637D0 BLR X9
	0x036637D4 LDR W8, [X24 + 0x18]
	0x036637D8 ADD X25, X25, 0x1
	0x036637DC CMP X25, W8, SXTW
	0x036637E0 B.LT 0x36637B0
	0x036637E4 B 0x3663804
	0x036637E8 LDR X8, [X20]
	0x036637EC MOV X0, X20
	0x036637F0 MOV X1, X23
	0x036637F4 MOV X2, X31
	0x036637F8 LDR X9, [X8 + 0x248]
	0x036637FC LDR X3, [X8 + 0x250]
	0x03663800 BLR X9
	0x03663804 ADD W22, W22, 0x1
	0x03663808 CMP W22, W21
	0x0366380C B.NE 0x366375C
	0x03663810 LDP X20, X19, [X31 + 0x40]
	0x03663814 LDP X22, X21, [X31 + 0x30]
	0x03663818 LDP X24, X23, [X31 + 0x20]
	0x0366381C LDP X26, X25, [X31 + 0x10]
	0x03663820 LDR X30, [X31], #0x50
	0x03663824 RET
	0x03663828 BL 0x1C16F28
	0x0366382C ADRP X0, 0xA95000
	0x03663830 LDR X0, [X0 + 0x528]
	0x03663834 BL 0x1C16D08
	0x03663838 BL 0x1C16F10
	0x0366383C MOV X19, X0
	0x03663840 ADRP X0, 0xAC5000
	0x03663844 LDR X0, [X0 + 0x538]
	0x03663848 BL 0x1C16D08
	0x0366384C MOV X1, X0
	0x03663850 MOV X0, X19
	0x03663854 MOV X2, X31
	0x03663858 BL 0x330E100
	0x0366385C ADRP X0, 0xADA000
	0x03663860 LDR X0, [X0 + 0x208]
	0x03663864 BL 0x1C16D08
	0x03663868 MOV X1, X0
	0x0366386C MOV X0, X19
	0x03663870 BL 0x1C16DEC
	0x03663874 STR X30, [X31 - 0x30]!
	0x03663878 STP X22, X21, [X31 + 0x10]
	0x0366387C STP X20, X19, [X31 + 0x20]
	0x03663880 ADRP X21, 0xD7D000
	0x03663884 ADRP X22, 0xADA000
	0x03663888 LDRB W8, [X21 + 0x6E5]
	0x0366388C LDR X22, [X22 + 0x200]
	0x03663890 MOV W19, W1
	0x03663894 MOV X20, X0
	0x03663898 TBNZ X8, 0x0, 0x36638B0
	0x0366389C ADRP X0, 0xADA000
	0x036638A0 LDR X0, [X0 + 0x200]
	0x036638A4 BL 0x1C16CF4
	0x036638A8 MOVZ W8, 0x1
	0x036638AC STRB W8, [X21 + 0x6E5]
	0x036638B0 LDR X0, [X22]
	0x036638B4 LDR W8, [X0 + 0xE0]
	0x036638B8 CBNZ W8, 0x36638C0
	0x036638BC BL 0x1C16DFC
	0x036638C0 MOV X0, X20
	0x036638C4 MOV W1, W19
	0x036638C8 LDP X20, X19, [X31 + 0x20]
	0x036638CC LDP X22, X21, [X31 + 0x10]
	0x036638D0 LDR X30, [X31], #0x30
	0x036638D4 B 0x36638D8
	0x036638D8 STR X30, [X31 - 0x30]!
	0x036638DC STP X22, X21, [X31 + 0x10]
	0x036638E0 STP X20, X19, [X31 + 0x20]
	0x036638E4 ADRP X22, 0xD7D000
	0x036638E8 ADRP X21, 0xA9D000
	0x036638EC LDRB W8, [X22 + 0x6FB]
	0x036638F0 LDR X21, [X21 + 0x2F0]
	0x036638F4 MOV W19, W1
	0x036638F8 MOV X20, X0
	0x036638FC TBNZ X8, 0x0, 0x3663914
	0x03663900 ADRP X0, 0xA9D000
	0x03663904 LDR X0, [X0 + 0x2F0]
	0x03663908 BL 0x1C16CF4
	0x0366390C MOVZ W8, 0x1
	0x03663910 STRB W8, [X22 + 0x6FB]
	0x03663914 MOV X0, X20
	0x03663918 MOV X1, X31
	0x0366391C BL 0x33BDD8C
	0x03663920 LDR X0, [X21]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0xD7E000
	011 Move W8, [X22+1755]
	012 Move X21, X2
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xADB000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move X0, 0xABB000
	023 Move X0, [X0+2328]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1755], W8
	027 Compare X19, 0
	028 JumpIfEqual {135}
	029 Move X24, X20
	030 Add X24, X24, 16
	031 Move X8, [X24]
	032 Move W9, [X24+8]
	033 Add W9, W9, 1
	034 Move [X24+8], W9
	035 Compare X8, 0
	036 JumpIfEqual {84}
	037 Move X26, 0xABB000
	038 Move X26, [X26+2328]
	039 Move X23, [X20+32]
	040 Move X22, [X8+16]
	041 Move X25, X8
	042 Compare X23, 0
	043 JumpIfEqual {58}
	044 Move X8, [X23]
	045 Move X1, [X26]
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Compare X9, 0
	048 JumpIfEqual {55}
	049 Move X10, [X8+176]
	050 Add X10, X10, 8
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Subtract X9, X9, 1
	054 Add X10, X10, 16
	055 Move X0, X23
	056 Move W2, W31
	057 Call 0x1C5D788
	058 Compare X22, 0
	059 JumpIfEqual {134}
	060 Move X8, [X22]
	061 Move X0, X22
	062 Move X1, X19
	063 Move X9, [X8+312]
	064 Move X2, [X8+320]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {81}
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 Add X8, X8, X9
	072 Add X0, X8, 312
	073 Move X8, [X0]
	074 Move X3, [X0+8]
	075 Move X0, X23
	076 Move X1, X22
	077 Move X2, X19
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Compare W0, 0
	080 JumpIfEqual {113}
	081 Move X8, [X25+32]
	082 Compare X8, 0
	083 JumpIfNotEqual {39}
	084 Move X25, X31
	085 Move X8, 0xADB000
	086 Move X8, [X8+368]
	087 Move X0, [X8]
	088 Call 0x1C17F10
	089 Move X1, X31
	090 Move X22, X0
	091 Call Object..ctor, X0
	092 Compare X22, 0
	093 JumpIfEqual {134}
	094 Add X8, X25, 32
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSEL not yet implemented."
	097 Move [X22+16], X19
	098 Move [X22+24], X21
	099 Move [X8], X22
	100 Move W8, [X20+28]
	101 Move X22, [X31+48]
	102 Move X21, [X31+56]
	103 Move X24, [X31+32]
	104 Move X23, [X31+40]
	105 Move X26, [X31+16]
	106 Move X25, [X31+24]
	107 Add W8, W8, 1
	108 Move [X20+28], W8
	109 Move X20, [X31+64]
	110 Move X19, [X31+72]
	111 Move X30, [X31+80]
	112 Return 
	113 Move X0, 0xABB000
	114 Move X0, [X0+664]
	115 Call 0x1C17D08
	116 Move X1, X19
	117 Move X2, X31
	118 Call SR.Format, X0, X1
	119 Move X19, X0
	120 Move X0, 0xA99000
	121 Move X0, [X0+1400]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X1, X19
	125 Move X2, X31
	126 Move X20, X0
	127 Call ArgumentException..ctor, X0, X1
	128 Move X0, 0xADB000
	129 Move X0, [X0+392]
	130 Call 0x1C17D08
	131 Move X1, X0
	132 Move X0, X20
	133 Call 0x1C17DEC
	134 Call 0x1C17F20
	135 Move X0, 0xA96000
	136 Move X0, [X0+1320]
	137 Call 0x1C17D08
	138 Call 0x1C17F10
	139 Move X19, X0
	140 Move X0, 0xABB000
	141 Move X0, [X0+112]
	142 Call 0x1C17D08
	143 Move X1, X0
	144 Move X0, X19
	145 Move X2, X31
	146 Call ArgumentNullException..ctor, X0, X1
	147 Move X0, 0xADB000
	148 Move X0, [X0+392]
	149 Call 0x1C17D08
	150 Move X1, X0
	151 Move X0, X19
	152 Call 0x1C17DEC

Method: System.Boolean Contains(System.Object key)

Disassembly:
	0x03663924 LDR W8, [X0 + 0xE0]
	0x03663928 CBNZ W8, 0x3663930
	0x0366392C BL 0x1C16DFC
	0x03663930 ADRP X22, 0xD7D000
	0x03663934 LDRB W8, [X22 + 0x4B3]
	0x03663938 CBNZ W8, 0x3663950
	0x0366393C ADRP X0, 0xA9D000
	0x03663940 LDR X0, [X0 + 0x2F0]
	0x03663944 BL 0x1C16CF4
	0x03663948 MOVZ W8, 0x1
	0x0366394C STRB W8, [X22 + 0x4B3]
	0x03663950 LDR X0, [X21]
	0x03663954 LDR W8, [X0 + 0xE0]
	0x03663958 CBNZ W8, 0x3663964
	0x0366395C BL 0x1C16DFC
	0x03663960 LDR X0, [X21]
	0x03663964 LDR X8, [X0 + 0xB8]
	0x03663968 MOV X0, X20
	0x0366396C MOV W1, W19
	0x03663970 LDP X22, X21, [X31 + 0x10]
	0x03663974 LDR X8, [X8 + 0x8]
	0x03663978 STR X8, [X20 + 0x20]
	0x0366397C LDP X20, X19, [X31 + 0x20]
	0x03663980 LDR X30, [X31], #0x30
	0x03663984 B 0x3664F98
	0x03663988 STP X30, X23, [X31 - 0x30]!
	0x0366398C STP X22, X21, [X31 + 0x10]
	0x03663990 STP X20, X19, [X31 + 0x20]
	0x03663994 ADRP X22, 0xD7D000
	0x03663998 ADRP X23, 0xADA000
	0x0366399C LDRB W8, [X22 + 0x6E6]
	0x036639A0 LDR X23, [X23 + 0x200]
	0x036639A4 MOV X21, X2
	0x036639A8 MOV W19, W1
	0x036639AC MOV X20, X0
	0x036639B0 TBNZ X8, 0x0, 0x36639C8
	0x036639B4 ADRP X0, 0xADA000
	0x036639B8 LDR X0, [X0 + 0x200]
	0x036639BC BL 0x1C16CF4
	0x036639C0 MOVZ W8, 0x1
	0x036639C4 STRB W8, [X22 + 0x6E6]
	0x036639C8 LDR X0, [X23]
	0x036639CC LDR W8, [X0 + 0xE0]
	0x036639D0 CBNZ W8, 0x36639D8
	0x036639D4 BL 0x1C16DFC
	0x036639D8 MOV X0, X20
	0x036639DC MOV X1, X21
	0x036639E0 BL 0x3663694
	0x036639E4 MOV X0, X20
	0x036639E8 MOV W1, W19
	0x036639EC LDP X20, X19, [X31 + 0x20]
	0x036639F0 LDP X22, X21, [X31 + 0x10]
	0x036639F4 LDP X30, X23, [X31], #0x30
	0x036639F8 B 0x3664F98
	0x036639FC STR X30, [X31 - 0x20]!
	0x03663A00 STP X20, X19, [X31 + 0x10]
	0x03663A04 MOV W19, W1
	0x03663A08 MOV X1, X2
	0x03663A0C MOV X20, X0
	0x03663A10 BL 0x3663694
	0x03663A14 MOV X0, X20
	0x03663A18 MOV W1, W19
	0x03663A1C LDP X20, X19, [X31 + 0x10]
	0x03663A20 LDR X30, [X31], #0x20
	0x03663A24 B 0x3664F98
	0x03663A28 STR X30, [X31 - 0x30]!
	0x03663A2C STP X22, X21, [X31 + 0x10]
	0x03663A30 STP X20, X19, [X31 + 0x20]
	0x03663A34 ADRP X21, 0xD7D000
	0x03663A38 ADRP X22, 0xADA000
	0x03663A3C LDRB W8, [X21 + 0x6E7]
	0x03663A40 LDR X22, [X22 + 0x200]
	0x03663A44 MOV X19, X1
	0x03663A48 MOV X20, X0
	0x03663A4C TBNZ X8, 0x0, 0x3663A64
	0x03663A50 ADRP X0, 0xADA000
	0x03663A54 LDR X0, [X0 + 0x200]
	0x03663A58 BL 0x1C16CF4
	0x03663A5C MOVZ W8, 0x1
	0x03663A60 STRB W8, [X21 + 0x6E7]
	0x03663A64 LDR X0, [X22]
	0x03663A68 LDR W8, [X0 + 0xE0]
	0x03663A6C CBNZ W8, 0x3663A74
	0x03663A70 BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xD7E000
	009 Move W8, [X21+1756]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xABB000
	017 Move X0, [X0+2328]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1756], W8
	021 Compare X19, 0
	022 JumpIfEqual {83}
	023 Move X23, [X20+16]
	024 Compare X23, 0
	025 JumpIfEqual {72}
	026 Move X24, 0xABB000
	027 Move X24, [X24+2328]
	028 Move X22, [X20+32]
	029 Move X21, [X23+16]
	030 Compare X22, 0
	031 JumpIfEqual {46}
	032 Move X8, [X22]
	033 Move X1, [X24]
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Compare X9, 0
	036 JumpIfEqual {43}
	037 Move X10, [X8+176]
	038 Add X10, X10, 8
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract X9, X9, 1
	042 Add X10, X10, 16
	043 Move X0, X22
	044 Move W2, W31
	045 Call 0x1C5D788
	046 Compare X21, 0
	047 JumpIfEqual {82}
	048 Move X8, [X21]
	049 Move X0, X21
	050 Move X1, X19
	051 Move X9, [X8+312]
	052 Move X2, [X8+320]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {69}
	058 NotImplemented "Instruction LDRSW not yet implemented."
	059 Add X8, X8, X9
	060 Add X0, X8, 312
	061 Move X8, [X0]
	062 Move X3, [X0+8]
	063 Move X0, X22
	064 Move X1, X21
	065 Move X2, X19
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Compare W0, 0
	068 JumpIfEqual {73}
	069 Move X23, [X23+32]
	070 Compare X23, 0
	071 JumpIfNotEqual {28}
	072 Move W0, W31
	073 Move W0, 1
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Return X0
	082 Call 0x1C17F20
	083 Move X0, 0xA96000
	084 Move X0, [X0+1320]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0xABB000
	089 Move X0, [X0+112]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ArgumentNullException..ctor, X0, X1
	095 Move X0, 0xADB000
	096 Move X0, [X0+400]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Call 0x1C17DEC

Method: System.Void CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x03663A74 MOV X0, X20
	0x03663A78 MOV X1, X31
	0x03663A7C BL 0x33BDD8C
	0x03663A80 STR X19, [X20 + 0x40]
	0x03663A84 LDP X20, X19, [X31 + 0x20]
	0x03663A88 LDP X22, X21, [X31 + 0x10]
	0x03663A8C LDR X30, [X31], #0x30
	0x03663A90 RET
	0x03663A94 STR X30, [X31 - 0x20]!
	0x03663A98 STP X20, X19, [X31 + 0x10]
	0x03663A9C MOV X19, X1
	0x03663AA0 MOV X1, X31
	0x03663AA4 MOV X20, X0
	0x03663AA8 BL 0x33BDD8C
	0x03663AAC STR X19, [X20 + 0x40]
	0x03663AB0 LDP X20, X19, [X31 + 0x10]
	0x03663AB4 LDR X30, [X31], #0x20
	0x03663AB8 RET
	0x03663ABC STP X31, X31, [X0 + 0x58]
	0x03663AC0 RET
	0x03663AC4 STP X30, X23, [X31 - 0x30]!
	0x03663AC8 STP X22, X21, [X31 + 0x10]
	0x03663ACC STP X20, X19, [X31 + 0x20]
	0x03663AD0 ADRP X20, 0xD7D000
	0x03663AD4 LDRB W8, [X20 + 0x6E8]
	0x03663AD8 MOV X19, X0
	0x03663ADC TBNZ X8, 0x0, 0x3663B00
	0x03663AE0 ADRP X0, 0xA90000
	0x03663AE4 LDR X0, [X0 + 0x8F0]
	0x03663AE8 BL 0x1C16CF4
	0x03663AEC ADRP X0, 0xA92000
	0x03663AF0 LDR X0, [X0 + 0x278]
	0x03663AF4 BL 0x1C16CF4
	0x03663AF8 MOVZ W8, 0x1
	0x03663AFC STRB W8, [X20 + 0x6E8]
	0x03663B00 CBZ X19, 0x3663B64
	0x03663B04 LDR X8, [X19]
	0x03663B08 MOV X0, X19
	0x03663B0C LDR X9, [X8 + 0x298]
	0x03663B10 LDR X1, [X8 + 0x2A0]
	0x03663B14 BLR X9
	0x03663B18 CMP W0, 0x1
	0x03663B1C B.NE 0x3663B58
	0x03663B20 LDR X8, [X19]
	0x03663B24 MOV X0, X19
	0x03663B28 MOV W1, W31
	0x03663B2C LDR X9, [X8 + 0x2E8]
	0x03663B30 LDR X2, [X8 + 0x2F0]
	0x03663B34 BLR X9
	0x03663B38 CBZ X0, 0x3663B68
	0x03663B3C ADRP X8, 0xA92000
	0x03663B40 LDR X8, [X8 + 0x278]
	0x03663B44 LDR X1, [X8]
	0x03663B48 LDR X8, [X0]
	0x03663B4C CMP X8, X1
	0x03663B50 B.EQ 0x3663B68
	0x03663B54 BL 0x1C171E0
	0x03663B58 MOV W20, W0
	0x03663B5C CMP W0, 0x2
	0x03663B60 B.GE 0x3663B78
	0x03663B64 MOV X0, X31
	0x03663B68 LDP X20, X19, [X31 + 0x20]
	0x03663B6C LDP X22, X21, [X31 + 0x10]
	0x03663B70 LDP X30, X23, [X31], #0x30
	0x03663B74 RET
	0x03663B78 LDR X8, [X19]
	0x03663B7C MOV X0, X19
	0x03663B80 MOV W1, W31
	0x03663B84 LDR X9, [X8 + 0x2E8]
	0x03663B88 LDR X2, [X8 + 0x2F0]
	0x03663B8C BLR X9
	0x03663B90 ADRP X8, 0xA90000
	0x03663B94 LDR X8, [X8 + 0x8F0]
	0x03663B98 MOV X22, X0
	0x03663B9C LDR X8, [X8]
	0x03663BA0 MOV X0, X8
	0x03663BA4 BL 0x1C16F10
	0x03663BA8 ADRP X23, 0xA92000
	0x03663BAC LDR X23, [X23 + 0x278]
	0x03663BB0 MOV X21, X0
	0x03663BB4 CBZ X22, 0x3663BC8
	0x03663BB8 LDR X1, [X23]
	0x03663BBC LDR X8, [X22]
	0x03663BC0 CMP X8, X1
	0x03663BC4 B.NE 0x3663C6C
	0x03663BC8 MOV X0, X21
	0x03663BCC MOV X1, X22
	0x03663BD0 MOV X2, X31
	0x03663BD4 BL 0x3231CF8
	0x03663BD8 CBZ X21, 0x3663C68
	0x03663BDC CMP W20, 0x1
	0x03663BE0 B.EQ 0x3663C44
	0x03663BE4 MOVZ W22, 0x1
	0x03663BE8 MOVZ W1, 0x2C
	0x03663BEC MOV X0, X21
	0x03663BF0 MOV X2, X31
	0x03663BF4 BL 0x3233D30
	0x03663BF8 LDR X8, [X19]
	0x03663BFC MOV X0, X19
	0x03663C00 MOV W1, W22
	0x03663C04 LDR X9, [X8 + 0x2E8]
	0x03663C08 LDR X2, [X8 + 0x2F0]
	0x03663C0C BLR X9
	0x03663C10 MOV X8, X0
	0x03663C14 CBZ X0, 0x3663C28
	0x03663C18 LDR X1, [X23]
	0x03663C1C LDR X9, [X8]
	0x03663C20 CMP X9, X1
	0x03663C24 B.NE 0x3663C60
	0x03663C28 MOV X0, X21
	0x03663C2C MOV X1, X8
	0x03663C30 MOV X2, X31
	0x03663C34 BL 0x32333E0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0xD7E000
	008 Move W8, [X22+1757]
	009 Move W19, W2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xA99000
	017 Move X0, [X0+3856]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1757], W8
	021 Compare X20, 0
	022 JumpIfEqual {66}
	023 Move TEMP, X19
	024 And TEMP, TEMP, -2147483648
	025 Compare TEMP, -2147483648
	026 JumpIfEqual {78}
	027 Move X0, X20
	028 Move X1, X31
	029 Call Array.get_Length, X0
	030 Move W8, [X21+28]
	031 Subtract W9, W0, W19
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X21, [X21+16]
	034 Compare X21, 0
	035 JumpIfEqual {59}
	036 Move X22, 0xA99000
	037 Move X22, [X22+3856]
	038 Move X1, [X21+16]
	039 Move X2, [X21+24]
	040 Add X0, X31, 16
	041 Move X3, X31
	042 Move [X31+16], X31
	043 Move [X31+24], X31
	044 Call DictionaryEntry..ctor, X0, X1, X2
	045 Move V0, [X31+1]
	046 Move X0, [X22]
	047 Add X1, X31, 0
	048 Move [X31], V0
	049 Call 0x1C17E04
	050 Move X1, X0
	051 Move X0, X20
	052 Move W2, W19
	053 Move X3, X31
	054 Call Array.SetValue, X0, X1, X2
	055 Move X21, [X21+32]
	056 Add W19, W19, 1
	057 Compare X21, 0
	058 JumpIfNotEqual {38}
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X22, [X31+48]
	062 Move X21, [X31+56]
	063 Move X30, [X31+32]
	064 Add X31, X31, 80
	065 Return 
	066 Move X0, 0xA96000
	067 Move X0, [X0+1320]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X19, X0
	071 Move X0, 0xAB9000
	072 Move X0, [X0+1600]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Move X2, X31
	077 Call ArgumentNullException..ctor, X0, X1
	078 Move [X31+16], W19
	079 Move X0, 0xA91000
	080 Move X0, [X0+1880]
	081 Call 0x1C17D08
	082 Add X1, X31, 16
	083 Call 0x1C17E04
	084 Move X19, X0
	085 Move X0, 0xA99000
	086 Move X0, [X0+1888]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X20, X0
	090 Move X0, 0xA9C000
	091 Move X0, [X0+304]
	092 Call 0x1C17D08
	093 Move X21, X0
	094 Move X0, 0xAB9000
	095 Move X0, [X0+1648]
	096 Call 0x1C17D08
	097 Move X3, X0
	098 Move X0, X20
	099 Move X1, X21
	100 Move X2, X19
	101 Move X4, X31
	102 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	103 Move X0, 0xADB000
	104 Move X0, [X0+408]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X20
	108 Call 0x1C17DEC
	109 Move X0, 0xA99000
	110 Move X0, [X0+1400]
	111 Call 0x1C17D08
	112 Call 0x1C17F10
	113 Move X19, X0
	114 Move X0, 0xABD000
	115 Move X0, [X0+280]
	116 Call 0x1C17D08
	117 Move X1, X0
	118 Move X0, X19
	119 Move X2, X31
	120 Call ArgumentException..ctor, X0, X1
	121 Move X0, 0xADB000
	122 Move X0, [X0+408]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X19
	126 Call 0x1C17DEC

Method: System.Collections.IDictionaryEnumerator GetEnumerator()

Disassembly:
	0x03663C38 ADD W22, W22, 0x1
	0x03663C3C CMP W20, W22
	0x03663C40 B.NE 0x3663BE8
	0x03663C44 LDR X8, [X21]
	0x03663C48 MOV X0, X21
	0x03663C4C LDP X20, X19, [X31 + 0x20]
	0x03663C50 LDP X22, X21, [X31 + 0x10]
	0x03663C54 LDP X2, X1, [X8 + 0x168]
	0x03663C58 LDP X30, X23, [X31], #0x30
	0x03663C5C BR X2
	0x03663C60 MOV X0, X8
	0x03663C64 BL 0x1C171E0
	0x03663C68 BL 0x1C16F20
	0x03663C6C MOV X0, X22
	0x03663C70 BL 0x1C171E0
	0x03663C74 STP X30, X21, [X31 - 0x20]!
	0x03663C78 STP X20, X19, [X31 + 0x10]
	0x03663C7C ADRP X20, 0xD7D000
	0x03663C80 LDRB W8, [X20 + 0x6E9]
	0x03663C84 MOV X19, X0
	0x03663C88 TBNZ X8, 0x0, 0x3663CA0
	0x03663C8C ADRP X0, 0xA90000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD7E000
	006 Move X21, 0xADB000
	007 Move W8, [X20+1758]
	008 Move X21, [X21+416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xADB000
	015 Move X0, [X0+416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1758], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call NodeEnumerator..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x03663CD4 LDR X8, [X19]
	0x03663CD8 MOV X21, X0
	0x03663CDC MOV X0, X19
	0x03663CE0 MOV W1, W31
	0x03663CE4 LDR X9, [X8 + 0x378]
	0x03663CE8 LDR X5, [X8 + 0x380]
	0x03663CEC MOV X2, X21
	0x03663CF0 MOV W3, W31
	0x03663CF4 MOV W4, W20
	0x03663CF8 BLR X9
	0x03663CFC B 0x3663D04
	0x03663D00 MOV X21, X31
	0x03663D04 LDP X20, X19, [X31 + 0x10]
	0x03663D08 MOV X0, X21
	0x03663D0C LDP X30, X21, [X31], #0x20
	0x03663D10 RET
	0x03663D14 STP X30, X19, [X31 - 0x10]!
	0x03663D18 LDRB W8, [X0 + 0x10]
	0x03663D1C CBNZ W8, 0x3663D2C
	0x03663D20 STP X31, X31, [X0 + 0x58]
	0x03663D24 LDP X30, X19, [X31], #0x10
	0x03663D28 B 0x3663D74

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD7E000
	006 Move X21, 0xADB000
	007 Move W8, [X20+1759]
	008 Move X21, [X21+416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xADB000
	015 Move X0, [X0+416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1759], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call NodeEnumerator..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Void Remove(System.Object key)

Disassembly:
	0x03663D2C ADRP X0, 0xA90000
	0x03663D30 LDR X0, [X0 + 0xB40]
	0x03663D34 BL 0x1C16D08
	0x03663D38 BL 0x1C16F10
	0x03663D3C MOV X19, X0
	0x03663D40 ADRP X0, 0xABA000
	0x03663D44 LDR X0, [X0 + 0x68]
	0x03663D48 BL 0x1C16D08
	0x03663D4C MOV X1, X0
	0x03663D50 MOV X0, X19
	0x03663D54 MOV X2, X31
	0x03663D58 BL 0x3379A44
	0x03663D5C ADRP X0, 0xADA000
	0x03663D60 LDR X0, [X0 + 0x210]
	0x03663D64 BL 0x1C16D08
	0x03663D68 MOV X1, X0
	0x03663D6C MOV X0, X19
	0x03663D70 BL 0x1C16DEC
	0x03663D74 STR X30, [X31 - 0x20]!
	0x03663D78 STP X20, X19, [X31 + 0x10]
	0x03663D7C LDRB W8, [X0 + 0x10]
	0x03663D80 CBNZ W8, 0x3663D90
	0x03663D84 LDP X20, X19, [X31 + 0x10]
	0x03663D88 LDR X30, [X31], #0x20
	0x03663D8C B 0x3664EEC
	0x03663D90 ADRP X0, 0xABA000
	0x03663D94 LDR X0, [X0 + 0x68]
	0x03663D98 BL 0x1C16D08
	0x03663D9C MOV X1, X31
	0x03663DA0 BL 0x320A1E4
	0x03663DA4 MOV X19, X0
	0x03663DA8 ADRP X0, 0xA90000
	0x03663DAC LDR X0, [X0 + 0xB40]
	0x03663DB0 BL 0x1C16D08
	0x03663DB4 BL 0x1C16F10
	0x03663DB8 MOV X1, X19
	0x03663DBC MOV X2, X31
	0x03663DC0 MOV X20, X0
	0x03663DC4 BL 0x3379A44
	0x03663DC8 ADRP X0, 0xADA000
	0x03663DCC LDR X0, [X0 + 0x218]
	0x03663DD0 BL 0x1C16D08
	0x03663DD4 MOV X1, X0
	0x03663DD8 MOV X0, X20
	0x03663DDC BL 0x1C16DEC
	0x03663DE0 STR X30, [X31 - 0x30]!
	0x03663DE4 STP X22, X21, [X31 + 0x10]
	0x03663DE8 STP X20, X19, [X31 + 0x20]
	0x03663DEC ADRP X22, 0xD7D000
	0x03663DF0 LDRB W8, [X22 + 0x6EA]
	0x03663DF4 MOV X19, X2
	0x03663DF8 MOV X20, X1
	0x03663DFC MOV X21, X0
	0x03663E00 TBNZ X8, 0x0, 0x3663E18
	0x03663E04 ADRP X0, 0xABD000
	0x03663E08 LDR X0, [X0 + 0xBA0]
	0x03663E0C BL 0x1C16CF4
	0x03663E10 MOVZ W8, 0x1
	0x03663E14 STRB W8, [X22 + 0x6EA]
	0x03663E18 LDRB W8, [X21 + 0x10]
	0x03663E1C CBNZ W8, 0x3663EF8
	0x03663E20 ADRP X22, 0xABD000
	0x03663E24 LDR X22, [X22 + 0xBA0]
	0x03663E28 MOV X0, X21
	0x03663E2C MOV X1, X20
	0x03663E30 STP X31, X31, [X21 + 0x58]
	0x03663E34 BL 0x3665EF4
	0x03663E38 CBZ X0, 0x3663E90
	0x03663E3C LDR X0, [X0 + 0x18]
	0x03663E40 LDR X1, [X22]
	0x03663E44 CBZ X0, 0x3663E94
	0x03663E48 LDR X8, [X0]
	0x03663E4C LDRB W9, [X1 + 0x130]
	0x03663E50 LDRB W10, [X8 + 0x130]
	0x03663E54 CMP W10, W9
	0x03663E58 B.CC 0x3663F40
	0x03663E5C LDR X10, [X8 + 0xC8]
	0x03663E60 ADD X9, X10, X9, 0x3, LSL
	0x03663E64 LDUR X9, [X9 - 0x8]
	0x03663E68 CMP X9, X1
	0x03663E6C B.NE 0x3663F40
	0x03663E70 CBZ X19, 0x3663EE8
	0x03663E74 LDR X3, [X8 + 0x308]
	0x03663E78 LDR X2, [X8 + 0x310]
	0x03663E7C MOV X1, X19
	0x03663E80 LDP X20, X19, [X31 + 0x20]
	0x03663E84 LDP X22, X21, [X31 + 0x10]
	0x03663E88 LDR X30, [X31], #0x30
	0x03663E8C BR X3
	0x03663E90 LDR X1, [X22]
	0x03663E94 MOV X0, X1
	0x03663E98 BL 0x1C16F10
	0x03663E9C MOVZ W1, 0x1
	0x03663EA0 MOV X2, X31
	0x03663EA4 MOV X22, X0
	0x03663EA8 BL 0x3358210
	0x03663EAC CBZ X19, 0x3663ECC
	0x03663EB0 CBZ X22, 0x3663F44
	0x03663EB4 LDR X8, [X22]
	0x03663EB8 MOV X0, X22
	0x03663EBC MOV X1, X19

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xD7E000
	011 Move W8, [X21+1760]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xABB000
	019 Move X0, [X0+2328]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1760], W8
	023 Compare X20, 0
	024 JumpIfEqual {103}
	025 Move X23, X19
	026 Add X23, X23, 16
	027 Move X8, [X23]
	028 Move W9, [X23+8]
	029 Add W9, W9, 1
	030 Move [X23+8], W9
	031 Compare X8, 0
	032 JumpIfEqual {92}
	033 Move X25, 0xABB000
	034 Move X25, [X25+2328]
	035 Move X24, X31
	036 Move X22, [X19+32]
	037 Move X21, [X8+16]
	038 Move X26, X8
	039 Compare X22, 0
	040 JumpIfEqual {55}
	041 Move X8, [X22]
	042 Move X1, [X25]
	043 NotImplemented "Instruction LDRH not yet implemented."
	044 Compare X9, 0
	045 JumpIfEqual {52}
	046 Move X10, [X8+176]
	047 Add X10, X10, 8
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Subtract X9, X9, 1
	051 Add X10, X10, 16
	052 Move X0, X22
	053 Move W2, W31
	054 Call 0x1C5D788
	055 Compare X21, 0
	056 JumpIfEqual {102}
	057 Move X8, [X21]
	058 Move X0, X21
	059 Move X1, X20
	060 Move X9, [X8+312]
	061 Move X2, [X8+320]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {78}
	067 NotImplemented "Instruction LDRSW not yet implemented."
	068 Add X8, X8, X9
	069 Add X0, X8, 312
	070 Move X8, [X0]
	071 Move X3, [X0+8]
	072 Move X0, X22
	073 Move X1, X21
	074 Move X2, X20
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Compare W0, 0
	077 JumpIfEqual {82}
	078 Move X8, [X26+32]
	079 Move X24, X26
	080 Compare X8, 0
	081 JumpIfNotEqual {36}
	082 Move X9, [X23]
	083 Move X8, [X26+32]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Compare X24, 0
	086 JumpIfEqual {102}
	087 Add X23, X24, 32
	088 Move [X23], X8
	089 Move W8, [X19+28]
	090 Subtract W8, W8, 1
	091 Move [X19+28], W8
	092 Move X20, [X31+64]
	093 Move X19, [X31+72]
	094 Move X22, [X31+48]
	095 Move X21, [X31+56]
	096 Move X24, [X31+32]
	097 Move X23, [X31+40]
	098 Move X26, [X31+16]
	099 Move X25, [X31+24]
	100 Move X30, [X31+80]
	101 Return 
	102 Call 0x1C17F20
	103 Move X0, 0xA96000
	104 Move X0, [X0+1320]
	105 Call 0x1C17D08
	106 Call 0x1C17F10
	107 Move X19, X0
	108 Move X0, 0xABB000
	109 Move X0, [X0+112]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Move X2, X31
	114 Call ArgumentNullException..ctor, X0, X1
	115 Move X0, 0xADB000
	116 Move X0, [X0+424]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Call 0x1C17DEC

