Type: System.Collections.Generic.SortedList`2/SortedListValueEnumerator

Method: System.Void .ctor(System.Collections.Generic.SortedList`2<TKey, TValue> sortedList)

Disassembly:
	0x025ECEC8 MOV X0, X21
	0x025ECECC MOV X1, X19
	0x025ECED0 BL 0x1C16DEC
	0x025ECED4 LDR X8, [X2 + 0x20]
	0x025ECED8 LDP X2, X3, [X1 + 0x8]
	0x025ECEDC LDR X9, [X8 + 0xC0]
	0x025ECEE0 LDR W8, [X1]
	0x025ECEE4 LDR X4, [X9 + 0x98]
	0x025ECEE8 MOV W1, W8
	0x025ECEEC B 0x25ECDDC
	0x025ECEF0 STR X30, [X31 - 0x30]!
	0x025ECEF4 STP X22, X21, [X31 + 0x10]
	0x025ECEF8 STP X20, X19, [X31 + 0x20]
	0x025ECEFC LDR X8, [X2 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move [X19+16], X20
	009 Compare X20, 0
	010 JumpIfEqual {17}
	011 Move W8, [X20+36]
	012 Move [X19+28], W8
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Return 
	017 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x025ECF00 MOV X20, X0
	0x025ECF04 MOV X21, X2
	0x025ECF08 LDR W3, [X1]

ISIL:
	001 Move [X0+24], W31
	002 Move [X0+32], X31
	003 Move [X0+40], X31
	004 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x025ECF0C LDR X8, [X8 + 0xC0]
	0x025ECF10 LDR X0, [X0 + 0x10]
	0x025ECF14 LDR W2, [X20 + 0x20]
	0x025ECF18 LDR X4, [X20 + 0x28]
	0x025ECF1C LDR X8, [X8 + 0xA0]
	0x025ECF20 MOV X19, X1
	0x025ECF24 MOV W1, W31
	0x025ECF28 LDR X8, [X8 + 0x20]
	0x025ECF2C LDR X8, [X8 + 0xC0]
	0x025ECF30 LDR X5, [X8 + 0x60]
	0x025ECF34 BL 0x22D22F8
	0x025ECF38 CMP W0, 0x0
	0x025ECF3C CSINV W22, W0, W31, GE
	0x025ECF40 TBNZ X22, 0x1F, 0x25ECF94
	0x025ECF44 LDR X8, [X21 + 0x20]
	0x025ECF48 LDR X8, [X8 + 0xC0]
	0x025ECF4C LDR X0, [X8 + 0xA8]
	0x025ECF50 BL 0x2316AC0
	0x025ECF54 LDR X8, [X20 + 0x18]
	0x025ECF58 CBZ X8, 0x25ECFA8
	0x025ECF5C LDR W9, [X8 + 0x18]
	0x025ECF60 CMP W22, W9
	0x025ECF64 B.CS 0x25ECFAC
	0x025ECF68 CBZ X0, 0x25ECFA8
	0x025ECF6C LDR X10, [X0]
	0x025ECF70 MOV W9, W22
	0x025ECF74 ADD X8, X8, X9, 0x4, LSL
	0x025ECF78 LDP X3, X4, [X19 + 0x8]
	0x025ECF7C LDP X1, X2, [X8 + 0x20]
	0x025ECF80 LDP X8, X5, [X10 + 0x1B8]
	0x025ECF84 BLR X8
	0x025ECF88 TBZ X0, 0x0, 0x25ECF94
	0x025ECF8C MOVZ W0, 0x1
	0x025ECF90 B 0x25ECF98
	0x025ECF94 MOV W0, W31
	0x025ECF98 LDP X20, X19, [X31 + 0x20]
	0x025ECF9C LDP X22, X21, [X31 + 0x10]
	0x025ECFA0 LDR X30, [X31], #0x30
	0x025ECFA4 RET
	0x025ECFA8 BL 0x1C16F20
	0x025ECFAC BL 0x1C16F28
	0x025ECFB0 STR X30, [X31 - 0x30]!
	0x025ECFB4 STP X22, X21, [X31 + 0x10]
	0x025ECFB8 STP X20, X19, [X31 + 0x20]
	0x025ECFBC LDR X8, [X2 + 0x20]
	0x025ECFC0 MOV X19, X0
	0x025ECFC4 MOV X20, X2
	0x025ECFC8 LDR W3, [X1]
	0x025ECFCC LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X10, [X0+16]
	005 Compare X10, 0
	006 JumpIfEqual {33}
	007 Move W8, [X0+28]
	008 Move W9, [X10+36]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction LDRSW not yet implemented."
	011 Move W9, [X10+32]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X10, [X10+24]
	014 Compare X10, 0
	015 JumpIfEqual {33}
	016 Move W11, [X10+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Add X10, X10, X8
	019 Move V0, [X10+2]
	020 Add W10, W8, 1
	021 Move [X0+24], W10
	022 Move [X0+2], V0
	023 Add W10, W9, 1
	024 Move [X0+24], W10
	025 Move [X0+32], X31
	026 Move [X0+40], X31
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Move X30, [X31+32]
	032 Return X0
	033 Call 0x1C17F20
	034 Move X0, 0x1B08000
	035 Move X0, [X0+1456]
	036 Move X19, X1
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X20, X0
	040 Move X0, 0x1B32000
	041 Move X0, [X0+648]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X20
	045 Move X2, X31
	046 Call InvalidOperationException..ctor, X0, X1
	047 Move X0, X20
	048 Move X1, X19
	049 Call 0x1C17DEC
	050 Call 0x1C17F28

Method: TValue get_Current()

Disassembly:
	0x025ECFD0 LDR X0, [X0 + 0x10]
	0x025ECFD4 LDR W2, [X19 + 0x20]
	0x025ECFD8 LDR X4, [X19 + 0x28]

ISIL:
	001 Move X8, [X0+32]
	002 Move X1, [X0+40]
	003 Move X0, X8
	004 Return X0

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x025ECFDC LDR X8, [X8 + 0xA0]
	0x025ECFE0 MOV X22, X1
	0x025ECFE4 MOV W1, W31
	0x025ECFE8 LDR X8, [X8 + 0x20]
	0x025ECFEC LDR X8, [X8 + 0xC0]
	0x025ECFF0 LDR X5, [X8 + 0x60]
	0x025ECFF4 BL 0x22D22F8
	0x025ECFF8 CMP W0, 0x0
	0x025ECFFC CSINV W21, W0, W31, GE
	0x025ED000 TBNZ X0, 0x1F, 0x25ED06C
	0x025ED004 LDR X8, [X20 + 0x20]
	0x025ED008 LDR X8, [X8 + 0xC0]
	0x025ED00C LDR X0, [X8 + 0xA8]
	0x025ED010 BL 0x2316AC0
	0x025ED014 LDR X8, [X19 + 0x18]
	0x025ED018 CBZ X8, 0x25ED080
	0x025ED01C LDR W9, [X8 + 0x18]
	0x025ED020 CMP W21, W9
	0x025ED024 B.CS 0x25ED084
	0x025ED028 CBZ X0, 0x25ED080
	0x025ED02C LDR X10, [X0]
	0x025ED030 SXTW X9, W21
	0x025ED034 ADD X8, X8, X9, 0x4, LSL
	0x025ED038 LDP X3, X4, [X22 + 0x8]
	0x025ED03C LDP X1, X2, [X8 + 0x20]
	0x025ED040 LDP X8, X5, [X10 + 0x1B8]
	0x025ED044 BLR X8
	0x025ED048 TBZ X0, 0x0, 0x25ED06C
	0x025ED04C LDR X8, [X20 + 0x20]
	0x025ED050 MOV X0, X19
	0x025ED054 MOV W1, W21
	0x025ED058 LDR X8, [X8 + 0xC0]
	0x025ED05C LDR X2, [X8 + 0xC8]
	0x025ED060 BL 0x25EE954
	0x025ED064 MOVZ W0, 0x1
	0x025ED068 B 0x25ED070
	0x025ED06C MOV W0, W31
	0x025ED070 LDP X20, X19, [X31 + 0x20]
	0x025ED074 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move W8, [X0+24]
	006 Compare W8, 0
	007 JumpIfEqual {26}
	008 Move X9, [X0+16]
	009 Compare X9, 0
	010 JumpIfEqual {42}
	011 Move W9, [X9+32]
	012 Add W9, W9, 1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X1+32]
	015 Move V0, [X0+2]
	016 Add X1, X31, 0
	017 Move X8, [X8+192]
	018 Move [X31], V0
	019 Move X0, [X8+16]
	020 Call 0x1C17E04
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return X0
	026 Move X0, 0x1B07000
	027 Move X0, [X0+1456]
	028 Move X19, X1
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x1B31000
	033 Move X0, [X0+656]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call InvalidOperationException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC
	042 Call 0x1C17F20

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x025ED078 LDR X30, [X31], #0x30
	0x025ED07C RET
	0x025ED080 BL 0x1C16F20
	0x025ED084 BL 0x1C16F28
	0x025ED088 STR X30, [X31 - 0x30]!
	0x025ED08C STP X22, X21, [X31 + 0x10]
	0x025ED090 STP X20, X19, [X31 + 0x20]
	0x025ED094 LDR X8, [X0 + 0x10]
	0x025ED098 CBZ X8, 0x25ED224
	0x025ED09C LDR W8, [X8 + 0x18]
	0x025ED0A0 MOV W21, W1
	0x025ED0A4 CMP W8, W1
	0x025ED0A8 B.EQ 0x25ED214
	0x025ED0AC LDR W8, [X0 + 0x20]
	0x025ED0B0 MOV X20, X2
	0x025ED0B4 MOV X19, X0
	0x025ED0B8 CMP W8, W21
	0x025ED0BC B.GT 0x25ED228
	0x025ED0C0 LDR X8, [X20 + 0x20]
	0x025ED0C4 CMP W21, 0x1
	0x025ED0C8 LDR X8, [X8 + 0xC0]
	0x025ED0CC B.LT 0x25ED164
	0x025ED0D0 LDR X0, [X8 + 0x48]
	0x025ED0D4 LDRB W8, [X0 + 0x135]
	0x025ED0D8 TBNZ X8, 0x0, 0x25ED0E0
	0x025ED0DC BL 0x1C5C684
	0x025ED0E0 MOV W1, W21
	0x025ED0E4 BL 0x1C16D6C
	0x025ED0E8 LDR X8, [X20 + 0x20]
	0x025ED0EC MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {17}
	007 Move W9, [X0+28]
	008 Move W8, [X8+36]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move [X0+24], W31
	013 Move [X0+32], X31
	014 Move [X0+40], X31
	015 Move X30, [X31+32]
	016 Return 
	017 Call 0x1C17F20
	018 Move X0, 0x1B07000
	019 Move X0, [X0+1456]
	020 Move X19, X1
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X20, X0
	024 Move X0, 0x1B31000
	025 Move X0, [X0+648]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X20
	029 Move X2, X31
	030 Call InvalidOperationException..ctor, X0, X1
	031 Move X0, X20
	032 Move X1, X19
	033 Call 0x1C17DEC

