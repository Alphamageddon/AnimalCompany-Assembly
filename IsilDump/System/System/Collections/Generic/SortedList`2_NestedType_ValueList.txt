Type: System.Collections.Generic.SortedList`2/ValueList

Method: System.Void .ctor(System.Collections.Generic.SortedList`2<TKey, TValue> dictionary)

Disassembly:
	0x0278CA7C LDP X20, X19, [X31 + 0x10]
	0x0278CA80 LDR X30, [X31], #0x20
	0x0278CA84 RET
	0x0278CA88 STR X30, [X31 - 0x10]!
	0x0278CA8C LDR X8, [X0 + 0x10]
	0x0278CA90 CBZ X8, 0x278CAA0
	0x0278CA94 LDR W0, [X8 + 0x20]
	0x0278CA98 LDR X30, [X31], #0x10
	0x0278CA9C RET
	0x0278CAA0 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x0278CAA4 MOVZ W0, 0x1
	0x0278CAA8 RET
	0x0278CAAC MOV W0, W31
	0x0278CAB0 RET
	0x0278CAB4 STR X30, [X31 - 0x20]!
	0x0278CAB8 STP X20, X19, [X31 + 0x10]
	0x0278CABC ADRP X20, 0x1C4E000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+32]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x0278CAC0 LDRB W8, [X20 + 0x854]
	0x0278CAC4 MOV X19, X0

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x0278CAC8 TBNZ X8, 0x0, 0x278CAE0
	0x0278CACC ADRP X0, 0x196E000

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x0278CAD0 LDR X0, [X0 + 0x2F0]
	0x0278CAD4 BL 0x1C16CF4
	0x0278CAD8 MOVZ W8, 0x1
	0x0278CADC STRB W8, [X20 + 0x854]
	0x0278CAE0 LDR X19, [X19 + 0x10]
	0x0278CAE4 CBZ X19, 0x278CB54
	0x0278CAE8 ADRP X10, 0x196E000
	0x0278CAEC LDR X8, [X19]
	0x0278CAF0 LDR X10, [X10 + 0x2F0]
	0x0278CAF4 LDRH W9, [X8 + 0x12E]
	0x0278CAF8 LDR X1, [X10]
	0x0278CAFC CBZ X9, 0x278CB20
	0x0278CB00 LDR X10, [X8 + 0xB0]
	0x0278CB04 ADD X10, X10, 0x8
	0x0278CB08 LDUR X11, [X10 - 0x8]
	0x0278CB0C CMP X11, X1
	0x0278CB10 B.EQ 0x278CB30
	0x0278CB14 SUBS X9, X9, 0x1
	0x0278CB18 ADD X10, X10, 0x10
	0x0278CB1C B.NE 0x278CB08
	0x0278CB20 MOVZ W2, 0x2
	0x0278CB24 MOV X0, X19
	0x0278CB28 BL 0x1C5C788
	0x0278CB2C B 0x278CB40
	0x0278CB30 LDR W9, [X10]
	0x0278CB34 ADD W9, W9, 0x2
	0x0278CB38 ADD X8, X8, W9, 0x4, SXTW
	0x0278CB3C ADD X0, X8, 0x138
	0x0278CB40 LDP X2, X1, [X0]
	0x0278CB44 MOV X0, X19
	0x0278CB48 LDP X20, X19, [X31 + 0x10]
	0x0278CB4C LDR X30, [X31], #0x20
	0x0278CB50 BR X2
	0x0278CB54 BL 0x1C16F20
	0x0278CB58 STR X30, [X31 - 0x20]!
	0x0278CB5C STP X20, X19, [X31 + 0x10]
	0x0278CB60 ADRP X0, 0x1967000
	0x0278CB64 LDR X0, [X0 + 0xB40]
	0x0278CB68 MOV X19, X2
	0x0278CB6C BL 0x1C16D08
	0x0278CB70 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1C4F000
	005 Move W8, [X20+2129]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x196F000
	012 Move X0, [X0+752]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2129], W8
	016 Move X19, [X19+16]
	017 Compare X19, 0
	018 JumpIfEqual {46}
	019 Move X10, 0x196F000
	020 Move X8, [X19]
	021 Move X10, [X10+752]
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X1, [X10]
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move W2, 2
	033 Move X0, X19
	034 Call 0x1C5D788
	035 Move W9, [X10]
	036 Add W9, W9, 2
	037 Add X8, X8, W9
	038 Add X0, X8, 312
	039 Move X2, [X0]
	040 Move X1, [X0+8]
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 CallNoReturn X2
	046 Call 0x1C17F20

Method: System.Void Add(TValue key)

Disassembly:
	0x0278CB74 MOV X20, X0
	0x0278CB78 ADRP X0, 0x1991000
	0x0278CB7C LDR X0, [X0 + 0xE38]
	0x0278CB80 BL 0x1C16D08
	0x0278CB84 MOV X1, X0
	0x0278CB88 MOV X0, X20
	0x0278CB8C MOV X2, X31
	0x0278CB90 BL 0x3379A44
	0x0278CB94 MOV X0, X20
	0x0278CB98 MOV X1, X19
	0x0278CB9C BL 0x1C16DEC
	0x0278CBA0 STR X30, [X31 - 0x20]!
	0x0278CBA4 STP X20, X19, [X31 + 0x10]
	0x0278CBA8 ADRP X0, 0x1967000
	0x0278CBAC LDR X0, [X0 + 0xB40]
	0x0278CBB0 MOV X19, X1
	0x0278CBB4 BL 0x1C16D08
	0x0278CBB8 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1968000
	005 Move X0, [X0+2880]
	006 Move X19, X3
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1992000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Void Clear()

Disassembly:
	0x0278CBBC MOV X20, X0
	0x0278CBC0 ADRP X0, 0x1991000
	0x0278CBC4 LDR X0, [X0 + 0xE38]
	0x0278CBC8 BL 0x1C16D08
	0x0278CBCC MOV X1, X0
	0x0278CBD0 MOV X0, X20
	0x0278CBD4 MOV X2, X31
	0x0278CBD8 BL 0x3379A44
	0x0278CBDC MOV X0, X20
	0x0278CBE0 MOV X1, X19
	0x0278CBE4 BL 0x1C16DEC
	0x0278CBE8 STP X29, X30, [X31 - 0x30]!
	0x0278CBEC STP X22, X21, [X31 + 0x10]
	0x0278CBF0 STP X20, X19, [X31 + 0x20]
	0x0278CBF4 ADD X29, X31, 0x0
	0x0278CBF8 SUB X31, X31, 0x20
	0x0278CBFC MRS X21, 0xC000
	0x0278CC00 LDR X8, [X21 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1968000
	005 Move X0, [X0+2880]
	006 Move X19, X1
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1992000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Boolean Contains(TValue value)

Disassembly:
	0x0278CC04 ADD X9, X31, 0x0
	0x0278CC08 STUR X8, [X29 - 0x8]
	0x0278CC0C STUR X1, [X29 - 0x20]
	0x0278CC10 LDR X22, [X2 + 0x20]
	0x0278CC14 LDR X8, [X22 + 0xC0]
	0x0278CC18 LDR X8, [X8 + 0x10]
	0x0278CC1C LDR W2, [X8 + 0xFC]
	0x0278CC20 ADD X10, X2, 0xF
	0x0278CC24 AND X10, X10, 0x1FFFFFFFF

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+24]
	008 Move X30, [X31+16]
	009 Call 0x25EE7F0, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void CopyTo(TValue[] array, System.Int32 arrayIndex)

Disassembly:
	0x0278CC28 SUB X20, X9, X10
	0x0278CC2C ADD X31, X20, 0x0
	0x0278CC30 LDR W8, [X8 + 0x28]
	0x0278CC34 LDR X19, [X0 + 0x10]
	0x0278CC38 MOV X0, X20
	0x0278CC3C CMP W8, 0x0
	0x0278CC40 SUB X8, X29, 0x20
	0x0278CC44 CSEL X1, X1, X8, LT
	0x0278CC48 BL 0x3EB1AC0
	0x0278CC4C CBZ X19, 0x278CCB0
	0x0278CC50 LDR X8, [X22 + 0xC0]
	0x0278CC54 LDP X9, X1, [X8 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move X0, [X8+24]
	006 Move W4, [X8+32]
	007 Move W3, W2
	008 Move X2, X1
	009 Move W1, W31
	010 Move X5, X31
	011 Move X30, [X31+16]
	012 Call Array.Copy, X0, X1, X2, X3, X4
	013 Return 
	014 Call 0x1C17F20

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x0278CC58 LDR W8, [X9 + 0x28]
	0x0278CC5C LDR X0, [X1]
	0x0278CC60 TBNZ X8, 0x1F, 0x278CC68
	0x0278CC64 LDR X20, [X20]
	0x0278CC68 STUR X20, [X29 - 0x18]
	0x0278CC6C LDR X8, [X1 + 0x10]
	0x0278CC70 SUB X3, X29, 0x18
	0x0278CC74 SUB X4, X29, 0xC
	0x0278CC78 MOV X2, X19
	0x0278CC7C BLR X8
	0x0278CC80 LDURB W8, [X29 - 0xC]
	0x0278CC84 LDR X9, [X21 + 0x28]
	0x0278CC88 LDUR X10, [X29 - 0x8]
	0x0278CC8C CMP W8, 0x0
	0x0278CC90 CSET W0, NE
	0x0278CC94 CMP X9, X10
	0x0278CC98 B.NE 0x278CCB4
	0x0278CC9C ADD X31, X29, 0x0
	0x0278CCA0 LDP X20, X19, [X31 + 0x20]
	0x0278CCA4 LDP X22, X21, [X31 + 0x10]
	0x0278CCA8 LDP X29, X30, [X31], #0x30
	0x0278CCAC RET
	0x0278CCB0 BL 0x1C16F20
	0x0278CCB4 BL 0x3EB1B20
	0x0278CCB8 STP X30, X21, [X31 - 0x20]!
	0x0278CCBC STP X20, X19, [X31 + 0x10]
	0x0278CCC0 LDR X0, [X0 + 0x10]
	0x0278CCC4 CBZ X0, 0x278CD0C
	0x0278CCC8 LDR X8, [X3 + 0x20]
	0x0278CCCC MOV X20, X1
	0x0278CCD0 LDR X21, [X0 + 0x18]
	0x0278CCD4 MOV W19, W2
	0x0278CCD8 LDR X8, [X8 + 0xC0]
	0x0278CCDC LDR X1, [X8 + 0x28]
	0x0278CCE0 LDR X8, [X1]
	0x0278CCE4 BLR X8
	0x0278CCE8 MOV X2, X20
	0x0278CCEC MOV W3, W19
	0x0278CCF0 LDP X20, X19, [X31 + 0x10]
	0x0278CCF4 MOV W4, W0
	0x0278CCF8 MOV X0, X21
	0x0278CCFC MOV W1, W31
	0x0278CD00 MOV X5, X31
	0x0278CD04 LDP X30, X21, [X31], #0x20
	0x0278CD08 B 0x339FCE8
	0x0278CD0C BL 0x1C16F20
	0x0278CD10 STR X30, [X31 - 0x30]!
	0x0278CD14 STP X22, X21, [X31 + 0x10]
	0x0278CD18 STP X20, X19, [X31 + 0x20]
	0x0278CD1C MOV X19, X3
	0x0278CD20 MOV W20, W2
	0x0278CD24 MOV X21, X1
	0x0278CD28 MOV X22, X0
	0x0278CD2C CBZ X1, 0x278CD44
	0x0278CD30 MOV X0, X21
	0x0278CD34 MOV X1, X31
	0x0278CD38 BL 0x339FCE4
	0x0278CD3C CMP W0, 0x1
	0x0278CD40 B.NE 0x278CD94
	0x0278CD44 LDR X0, [X22 + 0x10]
	0x0278CD48 CBZ X0, 0x278CD90
	0x0278CD4C LDR X8, [X19 + 0x20]
	0x0278CD50 LDR X22, [X0 + 0x18]
	0x0278CD54 LDR X8, [X8 + 0xC0]
	0x0278CD58 LDR X1, [X8 + 0x28]
	0x0278CD5C LDR X8, [X1]
	0x0278CD60 BLR X8
	0x0278CD64 MOV W4, W0
	0x0278CD68 MOV X0, X22
	0x0278CD6C MOV W1, W31
	0x0278CD70 MOV X2, X21
	0x0278CD74 MOV W3, W20
	0x0278CD78 MOV X5, X31
	0x0278CD7C BL 0x339FCE8
	0x0278CD80 LDP X20, X19, [X31 + 0x20]
	0x0278CD84 LDP X22, X21, [X31 + 0x10]
	0x0278CD88 LDR X30, [X31], #0x30
	0x0278CD8C RET
	0x0278CD90 BL 0x1C16F20
	0x0278CD94 ADRP X0, 0x196F000
	0x0278CD98 LDR X0, [X0 + 0x578]
	0x0278CD9C BL 0x1C16D08
	0x0278CDA0 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X3
	007 Move W20, W2
	008 Move X21, X1
	009 Move X22, X0
	010 Compare X1, 0
	011 JumpIfEqual {16}
	012 Move X0, X21
	013 Move X1, X31
	014 Call Array.get_Rank, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X8, [X22+16]
	017 Compare X8, 0
	018 JumpIfEqual {32}
	019 Move X0, [X8+24]
	020 Move W4, [X8+32]
	021 Move W1, W31
	022 Move X2, X21
	023 Move W3, W20
	024 Move X5, X31
	025 Call Array.Copy, X0, X1, X2, X3, X4
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Return 
	032 Call 0x1C17F20
	033 Move X0, 0x1970000
	034 Move X0, [X0+1400]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X20, X0
	038 Move X0, 0x1991000
	039 Move X0, [X0+776]
	040 Call 0x1C17D08
	041 Move X21, X0
	042 Move X0, 0x1990000
	043 Move X0, [X0+1600]
	044 Call 0x1C17D08
	045 Move X2, X0
	046 Move X0, X20
	047 Move X1, X21
	048 Move X3, X31
	049 Call ArgumentException..ctor, X0, X1, X2
	050 Move X0, X20
	051 Move X1, X19
	052 Call 0x1C17DEC
	053 Move X20, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X20
	056 Call 0x3EB2AD0
	057 Move X20, X0
	058 Move X0, 0x1991000
	059 Move X0, [X0+800]
	060 Call 0x1C17D08
	061 Move X8, [X20]
	062 Move X1, [X8]
	063 Call 0x1C18270
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {76}
	068 Call 0x3EB2AE0
	069 Move X0, 0x1970000
	070 Move X0, [X0+1400]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X20, X0
	074 Move X0, 0x1991000
	075 Move X0, [X0+808]
	076 Move W0, 8
	077 Call 0x3EB2AF0
	078 Move X8, [X20]
	079 Move [X0], X8
	080 Move X1, 0x1729000
	081 Add X1, X1, 3672
	082 Move X2, X31
	083 Call 0x3EB2B00
	084 Move X20, X0
	085 Call 0x3EB2AE0
	086 Move X0, X20
	087 Call 0x1D2D690
	088 Call 0x1991590

Method: System.Void Insert(System.Int32 index, TValue value)

Disassembly:
	0x0278CDA4 MOV X20, X0
	0x0278CDA8 ADRP X0, 0x1990000
	0x0278CDAC LDR X0, [X0 + 0x308]
	0x0278CDB0 B 0x278CE0C
	0x0278CDB4 B 0x278CDB8
	0x0278CDB8 MOV X20, X0
	0x0278CDBC CMP W1, 0x1
	0x0278CDC0 B.NE 0x278CE68
	0x0278CDC4 MOV X0, X20
	0x0278CDC8 BL 0x3EB1AD0
	0x0278CDCC MOV X20, X0
	0x0278CDD0 ADRP X0, 0x1990000
	0x0278CDD4 LDR X0, [X0 + 0x320]
	0x0278CDD8 BL 0x1C16D08
	0x0278CDDC LDR X8, [X20]
	0x0278CDE0 LDR X1, [X8]
	0x0278CDE4 BL 0x1C17270
	0x0278CDE8 TBZ X0, 0x0, 0x278CE40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1968000
	005 Move X0, [X0+2880]
	006 Move X19, X4
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1992000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: TValue get_Item(System.Int32 index)

Disassembly:
	0x0278CDEC BL 0x3EB1AE0
	0x0278CDF0 ADRP X0, 0x196F000
	0x0278CDF4 LDR X0, [X0 + 0x578]
	0x0278CDF8 BL 0x1C16D08
	0x0278CDFC BL 0x1C16F10
	0x0278CE00 MOV X20, X0
	0x0278CE04 ADRP X0, 0x1990000
	0x0278CE08 LDR X0, [X0 + 0x328]
	0x0278CE0C BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+48]
	008 Move X30, [X31+16]
	009 Call 0x25EEF54, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void set_Item(System.Int32 index, TValue value)

Disassembly:
	0x0278CE10 MOV X21, X0
	0x0278CE14 ADRP X0, 0x198F000
	0x0278CE18 LDR X0, [X0 + 0x640]
	0x0278CE1C BL 0x1C16D08
	0x0278CE20 MOV X2, X0
	0x0278CE24 MOV X0, X20
	0x0278CE28 MOV X1, X21
	0x0278CE2C MOV X3, X31
	0x0278CE30 BL 0x330E16C
	0x0278CE34 MOV X0, X20
	0x0278CE38 MOV X1, X19
	0x0278CE3C BL 0x1C16DEC
	0x0278CE40 MOVZ W0, 0x8
	0x0278CE44 BL 0x3EB1AF0
	0x0278CE48 LDR X8, [X20]
	0x0278CE4C STR X8, [X0]
	0x0278CE50 ADRP X1, 0x1728000
	0x0278CE54 ADD X1, X1, 0xE58

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1968000
	005 Move X0, [X0+2880]
	006 Move X19, X4
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1992000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Collections.Generic.IEnumerator`1<TValue> GetEnumerator()

Disassembly:
	0x0278CE58 MOV X2, X31
	0x0278CE5C BL 0x3EB1B00
	0x0278CE60 MOV X20, X0
	0x0278CE64 BL 0x3EB1AE0
	0x0278CE68 MOV X0, X20
	0x0278CE6C BL 0x1D2C690
	0x0278CE70 BL 0x1990590
	0x0278CE74 STR X30, [X31 - 0x20]!
	0x0278CE78 STP X20, X19, [X31 + 0x10]
	0x0278CE7C ADRP X0, 0x1967000
	0x0278CE80 LDR X0, [X0 + 0xB40]
	0x0278CE84 MOV X19, X3
	0x0278CE88 BL 0x1C16D08
	0x0278CE8C BL 0x1C16F10
	0x0278CE90 MOV X20, X0
	0x0278CE94 ADRP X0, 0x1991000
	0x0278CE98 LDR X0, [X0 + 0xE38]
	0x0278CE9C BL 0x1C16D08
	0x0278CEA0 MOV X1, X0
	0x0278CEA4 MOV X0, X20
	0x0278CEA8 MOV X2, X31
	0x0278CEAC BL 0x3379A44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X9, [X1+32]
	005 Move X8, X0
	006 Move X20, [X8+16]
	007 Move X19, X1
	008 Move X9, [X9+192]
	009 Move X0, [X9+56]
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Call 0x1C17F10
	017 Move X8, [X19+32]
	018 Move X1, X20
	019 Move X19, X0
	020 Move X8, [X8+192]
	021 Move X2, [X8+64]
	022 Call 0x25ECEC8, X0, X1
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0278CEB0 MOV X0, X20
	0x0278CEB4 MOV X1, X19
	0x0278CEB8 BL 0x1C16DEC
	0x0278CEBC STP X29, X30, [X31 - 0x30]!
	0x0278CEC0 STP X22, X21, [X31 + 0x10]
	0x0278CEC4 STP X20, X19, [X31 + 0x20]
	0x0278CEC8 ADD X29, X31, 0x0
	0x0278CECC SUB X31, X31, 0x20
	0x0278CED0 MRS X22, 0xC000
	0x0278CED4 LDR X8, [X22 + 0x28]
	0x0278CED8 MOV X19, X2
	0x0278CEDC STUR X8, [X29 - 0x8]
	0x0278CEE0 LDR X8, [X3 + 0x20]
	0x0278CEE4 LDR X8, [X8 + 0xC0]
	0x0278CEE8 LDR X9, [X8 + 0x10]
	0x0278CEEC LDR W20, [X9 + 0xFC]
	0x0278CEF0 ADD X9, X31, 0x0
	0x0278CEF4 ADD X10, X20, 0xF
	0x0278CEF8 AND X10, X10, 0x1FFFFFFFF
	0x0278CEFC SUB X21, X9, X10
	0x0278CF00 ADD X31, X21, 0x0
	0x0278CF04 LDR X2, [X0 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X9, [X1+32]
	005 Move X8, X0
	006 Move X20, [X8+16]
	007 Move X19, X1
	008 Move X9, [X9+192]
	009 Move X0, [X9+56]
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Call 0x1C17F10
	017 Move X8, [X19+32]
	018 Move X1, X20
	019 Move X19, X0
	020 Move X8, [X8+192]
	021 Move X2, [X8+64]
	022 Call 0x25ECEC8, X0, X1
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Int32 IndexOf(TValue value)

Disassembly:
	0x0278CF08 CBZ X2, 0x278CF68
	0x0278CF0C LDR X8, [X8 + 0x30]
	0x0278CF10 SUB X9, X29, 0xC
	0x0278CF14 SUB X3, X29, 0x20
	0x0278CF18 MOV X4, X21
	0x0278CF1C LDR X0, [X8]
	0x0278CF20 STUR W1, [X29 - 0xC]
	0x0278CF24 STP X9, X21, [X29 - 0x20]
	0x0278CF28 LDR X9, [X8 + 0x10]
	0x0278CF2C MOV X1, X8
	0x0278CF30 BLR X9
	0x0278CF34 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move X9, [X3+32]
	006 Move X0, [X8+24]
	007 Move W4, [X8+32]
	008 Move W3, W31
	009 Move X9, [X9+192]
	010 Move X5, [X9+80]
	011 Move X30, [X31+16]
	012 Call Array.IndexOf, X0, X1, X2, X3
	013 Return X0
	014 Call 0x1C17F20

Method: System.Boolean Remove(TValue value)

Disassembly:
	0x0278CF38 MOV X1, X21
	0x0278CF3C MOV X2, X20
	0x0278CF40 BL 0x3EB1AC0
	0x0278CF44 LDR X8, [X22 + 0x28]
	0x0278CF48 LDUR X9, [X29 - 0x8]
	0x0278CF4C CMP X8, X9
	0x0278CF50 B.NE 0x278CF6C
	0x0278CF54 ADD X31, X29, 0x0
	0x0278CF58 LDP X20, X19, [X31 + 0x20]
	0x0278CF5C LDP X22, X21, [X31 + 0x10]
	0x0278CF60 LDP X29, X30, [X31], #0x30
	0x0278CF64 RET
	0x0278CF68 BL 0x1C16F20
	0x0278CF6C BL 0x3EB1B20
	0x0278CF70 STR X30, [X31 - 0x20]!
	0x0278CF74 STP X20, X19, [X31 + 0x10]
	0x0278CF78 ADRP X0, 0x1967000
	0x0278CF7C LDR X0, [X0 + 0xB40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1968000
	005 Move X0, [X0+2880]
	006 Move X19, X3
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1992000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x0278CF80 MOV X19, X3
	0x0278CF84 BL 0x1C16D08
	0x0278CF88 BL 0x1C16F10
	0x0278CF8C MOV X20, X0
	0x0278CF90 ADRP X0, 0x1991000
	0x0278CF94 LDR X0, [X0 + 0xE38]
	0x0278CF98 BL 0x1C16D08
	0x0278CF9C MOV X1, X0
	0x0278CFA0 MOV X0, X20
	0x0278CFA4 MOV X2, X31
	0x0278CFA8 BL 0x3379A44
	0x0278CFAC MOV X0, X20
	0x0278CFB0 MOV X1, X19
	0x0278CFB4 BL 0x1C16DEC
	0x0278CFB8 STR X30, [X31 - 0x20]!
	0x0278CFBC STP X20, X19, [X31 + 0x10]
	0x0278CFC0 LDR X9, [X1 + 0x20]
	0x0278CFC4 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1968000
	005 Move X0, [X0+2880]
	006 Move X19, X2
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1992000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

