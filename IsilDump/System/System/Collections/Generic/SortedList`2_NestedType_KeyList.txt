Type: System.Collections.Generic.SortedList`2/KeyList

Method: System.Void .ctor(System.Collections.Generic.SortedList`2<TKey, TValue> dictionary)

Disassembly:
	0x02EDBBF4 LDR X0, [X0 + 0xE38]
	0x02EDBBF8 BL 0x1C16D08
	0x02EDBBFC MOV X1, X0
	0x02EDBC00 MOV X0, X20
	0x02EDBC04 MOV X2, X31
	0x02EDBC08 BL 0x3379A44
	0x02EDBC0C MOV X0, X20
	0x02EDBC10 MOV X1, X19
	0x02EDBC14 BL 0x1C16DEC
	0x02EDBC18 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x02EDBC1C STP X20, X19, [X31 + 0x10]
	0x02EDBC20 ADRP X0, 0x1218000
	0x02EDBC24 LDR X0, [X0 + 0xB40]
	0x02EDBC28 MOV X19, X2
	0x02EDBC2C BL 0x1C16D08
	0x02EDBC30 BL 0x1C16F10
	0x02EDBC34 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+32]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x02EDBC38 ADRP X0, 0x1242000
	0x02EDBC3C LDR X0, [X0 + 0xE38]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x02EDBC40 BL 0x1C16D08
	0x02EDBC44 MOV X1, X0

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x02EDBC48 MOV X0, X20
	0x02EDBC4C MOV X2, X31
	0x02EDBC50 BL 0x3379A44
	0x02EDBC54 MOV X0, X20
	0x02EDBC58 MOV X1, X19
	0x02EDBC5C BL 0x1C16DEC
	0x02EDBC60 STR X30, [X31 - 0x20]!
	0x02EDBC64 STP X20, X19, [X31 + 0x10]
	0x02EDBC68 MOV X19, X1
	0x02EDBC6C MOV X1, X31
	0x02EDBC70 MOV X20, X0
	0x02EDBC74 BL 0x33BDD8C
	0x02EDBC78 STR X19, [X20 + 0x10]
	0x02EDBC7C LDP X20, X19, [X31 + 0x10]
	0x02EDBC80 LDR X30, [X31], #0x20
	0x02EDBC84 RET
	0x02EDBC88 STR X30, [X31 - 0x10]!
	0x02EDBC8C LDR X8, [X0 + 0x10]
	0x02EDBC90 CBZ X8, 0x2EDBCA0
	0x02EDBC94 LDR W0, [X8 + 0x20]
	0x02EDBC98 LDR X30, [X31], #0x10
	0x02EDBC9C RET
	0x02EDBCA0 BL 0x1C16F20
	0x02EDBCA4 MOVZ W0, 0x1
	0x02EDBCA8 RET
	0x02EDBCAC MOV W0, W31
	0x02EDBCB0 RET
	0x02EDBCB4 STR X30, [X31 - 0x20]!
	0x02EDBCB8 STP X20, X19, [X31 + 0x10]
	0x02EDBCBC ADRP X20, 0x1500000
	0x02EDBCC0 LDRB W8, [X20 + 0xB57]
	0x02EDBCC4 MOV X19, X0
	0x02EDBCC8 TBNZ X8, 0x0, 0x2EDBCE0
	0x02EDBCCC ADRP X0, 0x121F000
	0x02EDBCD0 LDR X0, [X0 + 0x2F0]
	0x02EDBCD4 BL 0x1C16CF4
	0x02EDBCD8 MOVZ W8, 0x1
	0x02EDBCDC STRB W8, [X20 + 0xB57]
	0x02EDBCE0 LDR X19, [X19 + 0x10]
	0x02EDBCE4 CBZ X19, 0x2EDBD54
	0x02EDBCE8 ADRP X10, 0x121F000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1501000
	005 Move W8, [X20+2900]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1220000
	012 Move X0, [X0+752]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2900], W8
	016 Move X19, [X19+16]
	017 Compare X19, 0
	018 JumpIfEqual {46}
	019 Move X10, 0x1220000
	020 Move X8, [X19]
	021 Move X10, [X10+752]
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X1, [X10]
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move W2, 2
	033 Move X0, X19
	034 Call 0x1C5D788
	035 Move W9, [X10]
	036 Add W9, W9, 2
	037 Add X8, X8, W9
	038 Add X0, X8, 312
	039 Move X2, [X0]
	040 Move X1, [X0+8]
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 CallNoReturn X2
	046 Call 0x1C17F20

Method: System.Void Add(TKey key)

Disassembly:
	0x02EDBCEC LDR X8, [X19]
	0x02EDBCF0 LDR X10, [X10 + 0x2F0]
	0x02EDBCF4 LDRH W9, [X8 + 0x12E]
	0x02EDBCF8 LDR X1, [X10]
	0x02EDBCFC CBZ X9, 0x2EDBD20
	0x02EDBD00 LDR X10, [X8 + 0xB0]
	0x02EDBD04 ADD X10, X10, 0x8
	0x02EDBD08 LDUR X11, [X10 - 0x8]
	0x02EDBD0C CMP X11, X1
	0x02EDBD10 B.EQ 0x2EDBD30
	0x02EDBD14 SUBS X9, X9, 0x1
	0x02EDBD18 ADD X10, X10, 0x10
	0x02EDBD1C B.NE 0x2EDBD08
	0x02EDBD20 MOVZ W2, 0x2
	0x02EDBD24 MOV X0, X19
	0x02EDBD28 BL 0x1C5C788
	0x02EDBD2C B 0x2EDBD40
	0x02EDBD30 LDR W9, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1219000
	005 Move X0, [X0+2880]
	006 Move X19, X2
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1243000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Void Clear()

Disassembly:
	0x02EDBD34 ADD W9, W9, 0x2
	0x02EDBD38 ADD X8, X8, W9, 0x4, SXTW
	0x02EDBD3C ADD X0, X8, 0x138
	0x02EDBD40 LDP X2, X1, [X0]
	0x02EDBD44 MOV X0, X19
	0x02EDBD48 LDP X20, X19, [X31 + 0x10]
	0x02EDBD4C LDR X30, [X31], #0x20
	0x02EDBD50 BR X2
	0x02EDBD54 BL 0x1C16F20
	0x02EDBD58 STR X30, [X31 - 0x20]!
	0x02EDBD5C STP X20, X19, [X31 + 0x10]
	0x02EDBD60 ADRP X0, 0x1218000
	0x02EDBD64 LDR X0, [X0 + 0xB40]
	0x02EDBD68 MOV X19, X2
	0x02EDBD6C BL 0x1C16D08
	0x02EDBD70 BL 0x1C16F10
	0x02EDBD74 MOV X20, X0
	0x02EDBD78 ADRP X0, 0x1242000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1219000
	005 Move X0, [X0+2880]
	006 Move X19, X1
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1243000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Boolean Contains(TKey key)

Disassembly:
	0x02EDBD7C LDR X0, [X0 + 0xE38]
	0x02EDBD80 BL 0x1C16D08
	0x02EDBD84 MOV X1, X0
	0x02EDBD88 MOV X0, X20
	0x02EDBD8C MOV X2, X31
	0x02EDBD90 BL 0x3379A44
	0x02EDBD94 MOV X0, X20
	0x02EDBD98 MOV X1, X19
	0x02EDBD9C BL 0x1C16DEC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+24]
	008 Move X30, [X31+16]
	009 Call 0x25EE7A8, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void CopyTo(TKey[] array, System.Int32 arrayIndex)

Disassembly:
	0x02EDBDA0 STR X30, [X31 - 0x20]!
	0x02EDBDA4 STP X20, X19, [X31 + 0x10]
	0x02EDBDA8 ADRP X0, 0x1218000
	0x02EDBDAC LDR X0, [X0 + 0xB40]
	0x02EDBDB0 MOV X19, X1
	0x02EDBDB4 BL 0x1C16D08
	0x02EDBDB8 BL 0x1C16F10
	0x02EDBDBC MOV X20, X0
	0x02EDBDC0 ADRP X0, 0x1242000
	0x02EDBDC4 LDR X0, [X0 + 0xE38]
	0x02EDBDC8 BL 0x1C16D08
	0x02EDBDCC MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move X0, [X8+16]
	006 Move W4, [X8+32]
	007 Move W3, W2
	008 Move X2, X1
	009 Move W1, W31
	010 Move X5, X31
	011 Move X30, [X31+16]
	012 Call Array.Copy, X0, X1, X2, X3, X4
	013 Return 
	014 Call 0x1C17F20

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 arrayIndex)

Disassembly:
	0x02EDBDD0 MOV X0, X20
	0x02EDBDD4 MOV X2, X31
	0x02EDBDD8 BL 0x3379A44
	0x02EDBDDC MOV X0, X20
	0x02EDBDE0 MOV X1, X19
	0x02EDBDE4 BL 0x1C16DEC
	0x02EDBDE8 STP X29, X30, [X31 - 0x30]!
	0x02EDBDEC STP X22, X21, [X31 + 0x10]
	0x02EDBDF0 STP X20, X19, [X31 + 0x20]
	0x02EDBDF4 ADD X29, X31, 0x0
	0x02EDBDF8 SUB X31, X31, 0x20
	0x02EDBDFC MRS X21, 0xC000
	0x02EDBE00 LDR X8, [X21 + 0x28]
	0x02EDBE04 ADD X9, X31, 0x0
	0x02EDBE08 STUR X8, [X29 - 0x8]
	0x02EDBE0C STUR X1, [X29 - 0x20]
	0x02EDBE10 LDR X22, [X2 + 0x20]
	0x02EDBE14 LDR X8, [X22 + 0xC0]
	0x02EDBE18 LDR X8, [X8 + 0x10]
	0x02EDBE1C LDR W2, [X8 + 0xFC]
	0x02EDBE20 ADD X10, X2, 0xF
	0x02EDBE24 AND X10, X10, 0x1FFFFFFFF
	0x02EDBE28 SUB X20, X9, X10
	0x02EDBE2C ADD X31, X20, 0x0
	0x02EDBE30 LDR W8, [X8 + 0x28]
	0x02EDBE34 LDR X19, [X0 + 0x10]
	0x02EDBE38 MOV X0, X20
	0x02EDBE3C CMP W8, 0x0
	0x02EDBE40 SUB X8, X29, 0x20
	0x02EDBE44 CSEL X1, X1, X8, LT
	0x02EDBE48 BL 0x3EB1AC0
	0x02EDBE4C CBZ X19, 0x2EDBEB0
	0x02EDBE50 LDR X8, [X22 + 0xC0]
	0x02EDBE54 LDP X9, X1, [X8 + 0x10]
	0x02EDBE58 LDR W8, [X9 + 0x28]
	0x02EDBE5C LDR X0, [X1]
	0x02EDBE60 TBNZ X8, 0x1F, 0x2EDBE68
	0x02EDBE64 LDR X20, [X20]
	0x02EDBE68 STUR X20, [X29 - 0x18]
	0x02EDBE6C LDR X8, [X1 + 0x10]
	0x02EDBE70 SUB X3, X29, 0x18
	0x02EDBE74 SUB X4, X29, 0xC
	0x02EDBE78 MOV X2, X19
	0x02EDBE7C BLR X8
	0x02EDBE80 LDURB W8, [X29 - 0xC]
	0x02EDBE84 LDR X9, [X21 + 0x28]
	0x02EDBE88 LDUR X10, [X29 - 0x8]
	0x02EDBE8C CMP W8, 0x0
	0x02EDBE90 CSET W0, NE
	0x02EDBE94 CMP X9, X10
	0x02EDBE98 B.NE 0x2EDBEB4
	0x02EDBE9C ADD X31, X29, 0x0
	0x02EDBEA0 LDP X20, X19, [X31 + 0x20]
	0x02EDBEA4 LDP X22, X21, [X31 + 0x10]
	0x02EDBEA8 LDP X29, X30, [X31], #0x30
	0x02EDBEAC RET
	0x02EDBEB0 BL 0x1C16F20
	0x02EDBEB4 BL 0x3EB1B20
	0x02EDBEB8 STP X30, X21, [X31 - 0x20]!
	0x02EDBEBC STP X20, X19, [X31 + 0x10]
	0x02EDBEC0 LDR X0, [X0 + 0x10]
	0x02EDBEC4 CBZ X0, 0x2EDBF0C
	0x02EDBEC8 LDR X8, [X3 + 0x20]
	0x02EDBECC MOV X20, X1
	0x02EDBED0 LDR X21, [X0 + 0x10]
	0x02EDBED4 MOV W19, W2
	0x02EDBED8 LDR X8, [X8 + 0xC0]
	0x02EDBEDC LDR X1, [X8 + 0x28]
	0x02EDBEE0 LDR X8, [X1]
	0x02EDBEE4 BLR X8
	0x02EDBEE8 MOV X2, X20
	0x02EDBEEC MOV W3, W19
	0x02EDBEF0 LDP X20, X19, [X31 + 0x10]
	0x02EDBEF4 MOV W4, W0
	0x02EDBEF8 MOV X0, X21
	0x02EDBEFC MOV W1, W31
	0x02EDBF00 MOV X5, X31
	0x02EDBF04 LDP X30, X21, [X31], #0x20
	0x02EDBF08 B 0x339FCE8
	0x02EDBF0C BL 0x1C16F20
	0x02EDBF10 STR X30, [X31 - 0x30]!
	0x02EDBF14 STP X22, X21, [X31 + 0x10]
	0x02EDBF18 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X3
	007 Move W20, W2
	008 Move X21, X1
	009 Move X22, X0
	010 Compare X1, 0
	011 JumpIfEqual {16}
	012 Move X0, X21
	013 Move X1, X31
	014 Call Array.get_Rank, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X8, [X22+16]
	017 Compare X8, 0
	018 JumpIfEqual {32}
	019 Move X0, [X8+16]
	020 Move W4, [X8+32]
	021 Move W1, W31
	022 Move X2, X21
	023 Move W3, W20
	024 Move X5, X31
	025 Call Array.Copy, X0, X1, X2, X3, X4
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Return 
	032 Call 0x1C17F20
	033 Move X0, 0x1221000
	034 Move X0, [X0+1400]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X20, X0
	038 Move X0, 0x1242000
	039 Move X0, [X0+776]
	040 Call 0x1C17D08
	041 Move X21, X0
	042 Move X0, 0x1241000
	043 Move X0, [X0+1600]
	044 Call 0x1C17D08
	045 Move X2, X0
	046 Move X0, X20
	047 Move X1, X21
	048 Move X3, X31
	049 Call ArgumentException..ctor, X0, X1, X2
	050 Move X0, X20
	051 Move X1, X19
	052 Call 0x1C17DEC
	053 Move X20, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X20
	056 Call 0x3EB2AD0
	057 Move X20, X0
	058 Move X0, 0x1242000
	059 Move X0, [X0+800]
	060 Call 0x1C17D08
	061 Move X8, [X20]
	062 Move X1, [X8]
	063 Call 0x1C18270
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {76}
	068 Call 0x3EB2AE0
	069 Move X0, 0x1221000
	070 Move X0, [X0+1400]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X20, X0
	074 Move X0, 0x1242000
	075 Move X0, [X0+808]
	076 Move W0, 8
	077 Call 0x3EB2AF0
	078 Move X8, [X20]
	079 Move [X0], X8
	080 Move X1, 0xFDA000
	081 Add X1, X1, 3672
	082 Move X2, X31
	083 Call 0x3EB2B00
	084 Move X20, X0
	085 Call 0x3EB2AE0
	086 Move X0, X20
	087 Call 0x1D2D690
	088 Call 0x1991590

Method: System.Void Insert(System.Int32 index, TKey value)

Disassembly:
	0x02EDBF1C MOV X19, X3
	0x02EDBF20 MOV W20, W2
	0x02EDBF24 MOV X21, X1
	0x02EDBF28 MOV X22, X0
	0x02EDBF2C CBZ X1, 0x2EDBF44
	0x02EDBF30 MOV X0, X21
	0x02EDBF34 MOV X1, X31
	0x02EDBF38 BL 0x339FCE4
	0x02EDBF3C CMP W0, 0x1
	0x02EDBF40 B.NE 0x2EDBF94
	0x02EDBF44 LDR X0, [X22 + 0x10]
	0x02EDBF48 CBZ X0, 0x2EDBF90
	0x02EDBF4C LDR X8, [X19 + 0x20]
	0x02EDBF50 LDR X22, [X0 + 0x10]
	0x02EDBF54 LDR X8, [X8 + 0xC0]
	0x02EDBF58 LDR X1, [X8 + 0x28]
	0x02EDBF5C LDR X8, [X1]
	0x02EDBF60 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1219000
	005 Move X0, [X0+2880]
	006 Move X19, X3
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1243000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: TKey get_Item(System.Int32 index)

Disassembly:
	0x02EDBF64 MOV W4, W0
	0x02EDBF68 MOV X0, X22
	0x02EDBF6C MOV W1, W31
	0x02EDBF70 MOV X2, X21
	0x02EDBF74 MOV W3, W20
	0x02EDBF78 MOV X5, X31
	0x02EDBF7C BL 0x339FCE8
	0x02EDBF80 LDP X20, X19, [X31 + 0x20]
	0x02EDBF84 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+48]
	008 Move X30, [X31+16]
	009 Call 0x25EF1AC, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void set_Item(System.Int32 index, TKey value)

Disassembly:
	0x02EDBF88 LDR X30, [X31], #0x30
	0x02EDBF8C RET
	0x02EDBF90 BL 0x1C16F20
	0x02EDBF94 ADRP X0, 0x1220000
	0x02EDBF98 LDR X0, [X0 + 0x578]
	0x02EDBF9C BL 0x1C16D08
	0x02EDBFA0 BL 0x1C16F10
	0x02EDBFA4 MOV X20, X0
	0x02EDBFA8 ADRP X0, 0x1241000
	0x02EDBFAC LDR X0, [X0 + 0x308]
	0x02EDBFB0 B 0x2EDC00C
	0x02EDBFB4 B 0x2EDBFB8
	0x02EDBFB8 MOV X20, X0
	0x02EDBFBC CMP W1, 0x1
	0x02EDBFC0 B.NE 0x2EDC068
	0x02EDBFC4 MOV X0, X20
	0x02EDBFC8 BL 0x3EB1AD0
	0x02EDBFCC MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1219000
	005 Move X0, [X0+2880]
	006 Move X19, X3
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1245000
	011 Move X0, [X0+216]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Collections.Generic.IEnumerator`1<TKey> GetEnumerator()

Disassembly:
	0x02EDBFD0 ADRP X0, 0x1241000
	0x02EDBFD4 LDR X0, [X0 + 0x320]
	0x02EDBFD8 BL 0x1C16D08
	0x02EDBFDC LDR X8, [X20]
	0x02EDBFE0 LDR X1, [X8]
	0x02EDBFE4 BL 0x1C17270
	0x02EDBFE8 TBZ X0, 0x0, 0x2EDC040
	0x02EDBFEC BL 0x3EB1AE0
	0x02EDBFF0 ADRP X0, 0x1220000
	0x02EDBFF4 LDR X0, [X0 + 0x578]
	0x02EDBFF8 BL 0x1C16D08
	0x02EDBFFC BL 0x1C16F10
	0x02EDC000 MOV X20, X0
	0x02EDC004 ADRP X0, 0x1240000
	0x02EDC008 LDR X0, [X0 + 0x328]
	0x02EDC00C BL 0x1C16D08
	0x02EDC010 MOV X21, X0
	0x02EDC014 ADRP X0, 0x123F000
	0x02EDC018 LDR X0, [X0 + 0x640]
	0x02EDC01C BL 0x1C16D08
	0x02EDC020 MOV X2, X0
	0x02EDC024 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X9, [X1+32]
	005 Move X8, X0
	006 Move X20, [X8+16]
	007 Move X19, X1
	008 Move X9, [X9+192]
	009 Move X0, [X9+56]
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Call 0x1C17F10
	017 Move X8, [X19+32]
	018 Move X1, X20
	019 Move X19, X0
	020 Move X8, [X8+192]
	021 Move X2, [X8+64]
	022 Call 0x25EC19C, X0, X1
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02EDC028 MOV X1, X21
	0x02EDC02C MOV X3, X31
	0x02EDC030 BL 0x330E16C
	0x02EDC034 MOV X0, X20
	0x02EDC038 MOV X1, X19
	0x02EDC03C BL 0x1C16DEC
	0x02EDC040 MOVZ W0, 0x8
	0x02EDC044 BL 0x3EB1AF0
	0x02EDC048 LDR X8, [X20]
	0x02EDC04C STR X8, [X0]
	0x02EDC050 ADRP X1, 0xFD8000
	0x02EDC054 ADD X1, X1, 0xE58
	0x02EDC058 MOV X2, X31
	0x02EDC05C BL 0x3EB1B00
	0x02EDC060 MOV X20, X0
	0x02EDC064 BL 0x3EB1AE0
	0x02EDC068 MOV X0, X20
	0x02EDC06C BL 0x1D2C690
	0x02EDC070 BL 0x1990590
	0x02EDC074 STR X30, [X31 - 0x20]!
	0x02EDC078 STP X20, X19, [X31 + 0x10]
	0x02EDC07C ADRP X0, 0x1217000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X9, [X1+32]
	005 Move X8, X0
	006 Move X20, [X8+16]
	007 Move X19, X1
	008 Move X9, [X9+192]
	009 Move X0, [X9+56]
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Call 0x1C17F10
	017 Move X8, [X19+32]
	018 Move X1, X20
	019 Move X19, X0
	020 Move X8, [X8+192]
	021 Move X2, [X8+64]
	022 Call 0x25EC19C, X0, X1
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Int32 IndexOf(TKey key)

Disassembly:
	0x02EDC080 LDR X0, [X0 + 0xB40]
	0x02EDC084 MOV X19, X3
	0x02EDC088 BL 0x1C16D08
	0x02EDC08C BL 0x1C16F10
	0x02EDC090 MOV X20, X0
	0x02EDC094 ADRP X0, 0x1241000
	0x02EDC098 LDR X0, [X0 + 0xE38]
	0x02EDC09C BL 0x1C16D08
	0x02EDC0A0 MOV X1, X0
	0x02EDC0A4 MOV X0, X20
	0x02EDC0A8 MOV X2, X31
	0x02EDC0AC BL 0x3379A44
	0x02EDC0B0 MOV X0, X20
	0x02EDC0B4 MOV X1, X19
	0x02EDC0B8 BL 0x1C16DEC
	0x02EDC0BC STP X29, X30, [X31 - 0x30]!
	0x02EDC0C0 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {18}
	005 Move X9, [X2+32]
	006 Move X0, [X8+16]
	007 Move W2, [X8+32]
	008 Move X4, [X8+40]
	009 Move X9, [X9+192]
	010 Move W3, W1
	011 Move W1, W31
	012 Move X5, [X9+88]
	013 Call Array.BinarySearch, X0, X1, X2, X3, X4
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSINV not yet implemented."
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Boolean Remove(TKey key)

Disassembly:
	0x02EDC0C4 STP X20, X19, [X31 + 0x20]
	0x02EDC0C8 ADD X29, X31, 0x0
	0x02EDC0CC SUB X31, X31, 0x20
	0x02EDC0D0 MRS X22, 0xC000
	0x02EDC0D4 LDR X8, [X22 + 0x28]
	0x02EDC0D8 MOV X19, X2
	0x02EDC0DC STUR X8, [X29 - 0x8]
	0x02EDC0E0 LDR X8, [X3 + 0x20]
	0x02EDC0E4 LDR X8, [X8 + 0xC0]
	0x02EDC0E8 LDR X9, [X8 + 0x10]
	0x02EDC0EC LDR W20, [X9 + 0xFC]
	0x02EDC0F0 ADD X9, X31, 0x0
	0x02EDC0F4 ADD X10, X20, 0xF
	0x02EDC0F8 AND X10, X10, 0x1FFFFFFFF
	0x02EDC0FC SUB X21, X9, X10
	0x02EDC100 ADD X31, X21, 0x0
	0x02EDC104 LDR X2, [X0 + 0x10]
	0x02EDC108 CBZ X2, 0x2EDC168

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1218000
	005 Move X0, [X0+2880]
	006 Move X19, X2
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1242000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x02EDC10C LDR X8, [X8 + 0x30]
	0x02EDC110 SUB X9, X29, 0xC
	0x02EDC114 SUB X3, X29, 0x20
	0x02EDC118 MOV X4, X21
	0x02EDC11C LDR X0, [X8]
	0x02EDC120 STUR W1, [X29 - 0xC]
	0x02EDC124 STP X9, X21, [X29 - 0x20]
	0x02EDC128 LDR X9, [X8 + 0x10]
	0x02EDC12C MOV X1, X8
	0x02EDC130 BLR X9
	0x02EDC134 MOV X0, X19
	0x02EDC138 MOV X1, X21
	0x02EDC13C MOV X2, X20
	0x02EDC140 BL 0x3EB1AC0
	0x02EDC144 LDR X8, [X22 + 0x28]
	0x02EDC148 LDUR X9, [X29 - 0x8]
	0x02EDC14C CMP X8, X9
	0x02EDC150 B.NE 0x2EDC16C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1218000
	005 Move X0, [X0+2880]
	006 Move X19, X2
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1242000
	011 Move X0, [X0+3640]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

