Type: System.Collections.Generic.SortedList`2

Method: System.Void .ctor()

Disassembly:
	0x025EDBE8 LDR X1, [X8]
	0x025EDBEC BL 0x1C16E00
	0x025EDBF0 CBZ X0, 0x25EDE84
	0x025EDBF4 LDR W8, [X20 + 0x20]
	0x025EDBF8 CMP W8, 0x1
	0x025EDBFC B.LT 0x25EDCDC
	0x025EDC00 MOV W25, W22
	0x025EDC04 MOV X21, X0
	0x025EDC08 MOV X23, X31
	0x025EDC0C MOV X24, X31
	0x025EDC10 UBFM X26, X25, 0x20, 0x1F
	0x025EDC14 MOVZ X27, 0x1
	0x025EDC18 LDR X8, [X20 + 0x10]
	0x025EDC1C CBZ X8, 0x25EDD04
	0x025EDC20 LDR W9, [X8 + 0x18]
	0x025EDC24 CMP X24, X9
	0x025EDC28 B.CS 0x25EDD10
	0x025EDC2C LDR X9, [X20 + 0x18]
	0x025EDC30 CBZ X9, 0x25EDD08
	0x025EDC34 LDR W10, [X9 + 0x18]
	0x025EDC38 CMP X24, X10
	0x025EDC3C B.CS 0x25EDD0C
	0x025EDC40 LDR X10, [X19 + 0x20]
	0x025EDC44 ADD X8, X8, X24, 0x2, LSL
	0x025EDC48 LDR W1, [X8 + 0x20]
	0x025EDC4C ADD X9, X9, X23
	0x025EDC50 LDR X8, [X10 + 0xC0]
	0x025EDC54 LDP X2, X3, [X9 + 0x20]
	0x025EDC58 STP X31, X31, [X31 + 0x38]
	0x025EDC5C STR X31, [X31 + 0x48]
	0x025EDC60 LDR X4, [X8 + 0x170]
	0x025EDC64 ADD X0, X31, 0x38
	0x025EDC68 BL 0x2EDE710
	0x025EDC6C LDUR V0, [X31 + 0x38]
	0x025EDC70 LDR X8, [X31 + 0x48]
	0x025EDC74 STR V0, [X31]
	0x025EDC78 STR X8, [X31 + 0x10]
	0x025EDC7C LDR X8, [X19 + 0x20]
	0x025EDC80 LDR X8, [X8 + 0xC0]
	0x025EDC84 LDR X0, [X8 + 0x78]
	0x025EDC88 ADD X1, X31, 0x0
	0x025EDC8C BL 0x1C16E04
	0x025EDC90 MOV X22, X0
	0x025EDC94 CBZ X0, 0x25EDCAC
	0x025EDC98 LDR X8, [X21]
	0x025EDC9C LDR X1, [X8 + 0x40]
	0x025EDCA0 MOV X0, X22
	0x025EDCA4 BL 0x1C16E00
	0x025EDCA8 CBZ X0, 0x25EDD14
	0x025EDCAC LDR W8, [X21 + 0x18]
	0x025EDCB0 ADD X9, X25, X24
	0x025EDCB4 CMP X9, X8
	0x025EDCB8 B.CS 0x25EDD00
	0x025EDCBC ADD X8, X21, X26, 0x1D, ASR
	0x025EDCC0 STR X22, [X8 + 0x20]
	0x025EDCC4 LDRSW X8, [X20 + 0x20]
	0x025EDCC8 ADD X24, X24, 0x1
	0x025EDCCC ADD X23, X23, 0x10
	0x025EDCD0 ADD X26, X26, X27
	0x025EDCD4 CMP X24, X8
	0x025EDCD8 B.LT 0x25EDC18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X0
	008 Call Object..ctor, X0
	009 Move X8, [X20+32]
	010 Move X8, [X8+192]
	011 Move X21, [X8]
	012 Move X8, [X21+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {18}
	015 Move X0, X21
	016 Call 0x1C5D6E0
	017 Move X8, [X21+56]
	018 Move X0, [X8+16]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X8, [X21+56]
	030 Move X0, [X8+16]
	031 Move W8, [X0+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {37}
	036 Call 0x1C5D684
	037 Move X8, [X0+184]
	038 Move X8, [X8]
	039 Move [X19+16], X8
	040 Move X8, [X20+32]
	041 Move X8, [X8+192]
	042 Move X21, [X8+24]
	043 Move X8, [X21+56]
	044 Compare X8, 0
	045 JumpIfNotEqual {49}
	046 Move X0, X21
	047 Call 0x1C5D6E0
	048 Move X8, [X21+56]
	049 Move X0, [X8+16]
	050 Move W8, [X0+309]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {56}
	055 Call 0x1C5D684
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X8, [X21+56]
	061 Move X0, [X8+16]
	062 Move W8, [X0+309]
	063 Move TEMP, X8
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {68}
	067 Call 0x1C5D684
	068 Move X8, [X0+184]
	069 Move X8, [X8]
	070 Move [X19+32], W31
	071 Move [X19+24], X8
	072 Move X8, [X20+32]
	073 Move X8, [X8+192]
	074 Move X0, [X8+40]
	075 Call Comparer`1<Int32>.get_Default
	076 Move [X19+40], X0
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Return 

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x025EDCDC LDP X20, X19, [X31 + 0x90]
	0x025EDCE0 LDP X22, X21, [X31 + 0x80]
	0x025EDCE4 LDP X24, X23, [X31 + 0x70]
	0x025EDCE8 LDP X26, X25, [X31 + 0x60]
	0x025EDCEC LDP X30, X27, [X31 + 0x50]
	0x025EDCF0 ADD X31, X31, 0xA0
	0x025EDCF4 RET
	0x025EDCF8 BL 0x1C16F28
	0x025EDCFC BL 0x1C16F20
	0x025EDD00 BL 0x1C16F28
	0x025EDD04 BL 0x1C16F20
	0x025EDD08 BL 0x1C16F20
	0x025EDD0C BL 0x1C16F28
	0x025EDD10 BL 0x1C16F28
	0x025EDD14 BL 0x1C16F44
	0x025EDD18 MOV X1, X31
	0x025EDD1C BL 0x1C16DEC
	0x025EDD20 STR W22, [X31 + 0x38]
	0x025EDD24 ADRP X0, 0x1B06000
	0x025EDD28 LDR X0, [X0 + 0x758]
	0x025EDD2C BL 0x1C16D08
	0x025EDD30 ADD X1, X31, 0x38
	0x025EDD34 BL 0x1C16E04
	0x025EDD38 MOV X20, X0
	0x025EDD3C ADRP X0, 0x1B0E000
	0x025EDD40 LDR X0, [X0 + 0x760]
	0x025EDD44 BL 0x1C16D08
	0x025EDD48 BL 0x1C16F10
	0x025EDD4C MOV X21, X0
	0x025EDD50 ADRP X0, 0x1B11000
	0x025EDD54 LDR X0, [X0 + 0x130]
	0x025EDD58 BL 0x1C16D08
	0x025EDD5C MOV X22, X0
	0x025EDD60 ADRP X0, 0x1B2E000
	0x025EDD64 LDR X0, [X0 + 0x660]
	0x025EDD68 BL 0x1C16D08
	0x025EDD6C MOV X3, X0
	0x025EDD70 MOV X0, X21
	0x025EDD74 MOV X1, X22
	0x025EDD78 MOV X2, X20
	0x025EDD7C MOV X4, X31
	0x025EDD80 BL 0x3312C8C
	0x025EDD84 MOV X0, X21
	0x025EDD88 B 0x25EDECC
	0x025EDD8C ADRP X0, 0x1B0B000
	0x025EDD90 LDR X0, [X0 + 0x528]
	0x025EDD94 BL 0x1C16D08
	0x025EDD98 BL 0x1C16F10
	0x025EDD9C MOV X20, X0
	0x025EDDA0 ADRP X0, 0x1B2E000
	0x025EDDA4 LDR X0, [X0 + 0x640]
	0x025EDDA8 BL 0x1C16D08
	0x025EDDAC MOV X1, X0
	0x025EDDB0 MOV X0, X20
	0x025EDDB4 MOV X2, X31
	0x025EDDB8 BL 0x330E100
	0x025EDDBC B 0x25EDEC8
	0x025EDDC0 ADRP X0, 0x1B0E000
	0x025EDDC4 LDR X0, [X0 + 0x578]
	0x025EDDC8 BL 0x1C16D08
	0x025EDDCC BL 0x1C16F10
	0x025EDDD0 MOV X20, X0
	0x025EDDD4 ADRP X0, 0x1B2F000
	0x025EDDD8 LDR X0, [X0 + 0x308]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X19, X2
	009 Move X20, X0
	010 Call Object..ctor, X0
	011 Move TEMP, X21
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {50}
	015 Move X8, [X19+32]
	016 Move X8, [X8+192]
	017 Move X0, [X8+72]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W1, W21
	025 Call 0x1C17D6C
	026 Move [X20+16], X0
	027 Move X8, [X19+32]
	028 Move X8, [X8+192]
	029 Move X0, [X8+80]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move W1, W21
	037 Call 0x1C17D6C
	038 Move [X20+24], X0
	039 Move X8, [X19+32]
	040 Move X8, [X8+192]
	041 Move X0, [X8+40]
	042 Call Comparer`1<Int32>.get_Default
	043 Move [X20+40], X0
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 
	050 Move [X31+12], W21
	051 Move X0, 0x1B07000
	052 Move X0, [X0+1880]
	053 Call 0x1C17D08
	054 Add X1, X31, 12
	055 Call 0x1C17E04
	056 Move X20, X0
	057 Move X0, 0x1B0F000
	058 Move X0, [X0+1888]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X21, X0
	062 Move X0, 0x1B31000
	063 Move X0, [X0+88]
	064 Call 0x1C17D08
	065 Move X22, X0
	066 Move X0, 0x1B2F000
	067 Move X0, [X0+1648]
	068 Call 0x1C17D08
	069 Move X3, X0
	070 Move X0, X21
	071 Move X1, X22
	072 Move X2, X20
	073 Move X4, X31
	074 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	075 Move X0, X21
	076 Move X1, X19
	077 Call 0x1C17DEC

Method: System.Void Add(TKey key, TValue value)

Disassembly:
	0x025EDDDC B 0x25EDEA0
	0x025EDDE0 ADRP X0, 0x1B0E000
	0x025EDDE4 LDR X0, [X0 + 0x578]
	0x025EDDE8 BL 0x1C16D08
	0x025EDDEC BL 0x1C16F10
	0x025EDDF0 MOV X20, X0
	0x025EDDF4 ADRP X0, 0x1B2F000
	0x025EDDF8 LDR X0, [X0 + 0x310]
	0x025EDDFC B 0x25EDEA0
	0x025EDE00 ADRP X0, 0x1B0E000
	0x025EDE04 LDR X0, [X0 + 0x578]
	0x025EDE08 BL 0x1C16D08
	0x025EDE0C BL 0x1C16F10
	0x025EDE10 MOV X20, X0
	0x025EDE14 ADRP X0, 0x1B2F000
	0x025EDE18 LDR X0, [X0 + 0x318]
	0x025EDE1C BL 0x1C16D08
	0x025EDE20 MOV X1, X0
	0x025EDE24 MOV X0, X20
	0x025EDE28 MOV X2, X31
	0x025EDE2C BL 0x3314A68
	0x025EDE30 B 0x25EDEC8
	0x025EDE34 B 0x25EDE4C
	0x025EDE38 B 0x25EDE4C
	0x025EDE3C B 0x25EDE4C
	0x025EDE40 B 0x25EDE4C
	0x025EDE44 B 0x25EDE4C
	0x025EDE48 B 0x25EDE4C
	0x025EDE4C MOV X20, X0
	0x025EDE50 CMP W1, 0x1
	0x025EDE54 B.NE 0x25EDEFC
	0x025EDE58 MOV X0, X20
	0x025EDE5C BL 0x3EB1AD0
	0x025EDE60 MOV X20, X0
	0x025EDE64 ADRP X0, 0x1B2F000
	0x025EDE68 LDR X0, [X0 + 0x320]
	0x025EDE6C BL 0x1C16D08
	0x025EDE70 LDR X8, [X20]
	0x025EDE74 LDR X1, [X8]
	0x025EDE78 BL 0x1C17270
	0x025EDE7C TBZ X0, 0x0, 0x25EDED4
	0x025EDE80 BL 0x3EB1AE0
	0x025EDE84 ADRP X0, 0x1B0E000
	0x025EDE88 LDR X0, [X0 + 0x578]
	0x025EDE8C BL 0x1C16D08
	0x025EDE90 BL 0x1C16F10
	0x025EDE94 MOV X20, X0
	0x025EDE98 ADRP X0, 0x1B2F000
	0x025EDE9C LDR X0, [X0 + 0x328]
	0x025EDEA0 BL 0x1C16D08
	0x025EDEA4 MOV X21, X0
	0x025EDEA8 ADRP X0, 0x1B2E000
	0x025EDEAC LDR X0, [X0 + 0x640]
	0x025EDEB0 BL 0x1C16D08
	0x025EDEB4 MOV X2, X0
	0x025EDEB8 MOV X0, X20
	0x025EDEBC MOV X1, X21
	0x025EDEC0 MOV X3, X31
	0x025EDEC4 BL 0x330E16C
	0x025EDEC8 MOV X0, X20
	0x025EDECC MOV X1, X19
	0x025EDED0 BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+32]
	009 Move X22, X0
	010 Move X19, X4
	011 Move X21, X2
	012 Move X8, [X8+192]
	013 Move X0, [X0+16]
	014 Move W2, [X22+32]
	015 Move X4, [X22+40]
	016 Move X5, [X8+96]
	017 Move W23, W1
	018 Move X20, X3
	019 Move W1, W31
	020 Move W3, W23
	021 Call Array.BinarySearch, X0, X1, X2, X3, X4
	022 Move TEMP, X0
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfNotEqual {43}
	026 Move X8, [X19+32]
	027 NotImplemented "Instruction ORN not yet implemented."
	028 Move X0, X22
	029 Move W2, W23
	030 Move X8, [X8+192]
	031 Move X3, X21
	032 Move X4, X20
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X5, [X8+112]
	036 Move X22, [X31+32]
	037 Move X21, [X31+40]
	038 Move X30, [X31+16]
	039 Move X23, [X31+24]
	040 Add X31, X31, 64
	041 Call 0x25EF7C0, X0, X1, X2, X3
	042 Return 
	043 Move [X31+12], W23
	044 Move X8, [X19+32]
	045 Add X1, X31, 12
	046 Move X8, [X8+192]
	047 Move X0, [X8+88]
	048 Call 0x1C17E04
	049 Move X20, X0
	050 Move X0, 0x1B31000
	051 Move X0, [X0+664]
	052 Call 0x1C17D08
	053 Move X1, X20
	054 Move X2, X31
	055 Call SR.Format, X0, X1
	056 Move X20, X0
	057 Move X0, 0x1B0F000
	058 Move X0, [X0+1400]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X21, X0
	062 Move X0, 0x1B31000
	063 Move X0, [X0+112]
	064 Call 0x1C17D08
	065 Move X2, X0
	066 Move X0, X21
	067 Move X1, X20
	068 Move X3, X31
	069 Call ArgumentException..ctor, X0, X1, X2
	070 Move X0, X21
	071 Move X1, X19
	072 Call 0x1C17DEC

Method: System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair`2<TKey, TValue> keyValuePair)

Disassembly:
	0x025EDED4 MOVZ W0, 0x8
	0x025EDED8 BL 0x3EB1AF0
	0x025EDEDC LDR X8, [X20]
	0x025EDEE0 STR X8, [X0]
	0x025EDEE4 ADRP X1, 0x18C7000
	0x025EDEE8 ADD X1, X1, 0xE58
	0x025EDEEC MOV X2, X31

ISIL:
	001 Move X8, [X2+32]
	002 Move X2, [X1+8]
	003 Move X3, [X1+16]
	004 Move X9, [X8+192]
	005 Move W8, [X1]
	006 Move X4, [X9+152]
	007 Move W1, W8
	008 Call 0x25EDDDC, X0, X1, X2
	009 Return 

Method: System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair`2<TKey, TValue> keyValuePair)

Disassembly:
	0x025EDEF0 BL 0x3EB1B00
	0x025EDEF4 MOV X20, X0
	0x025EDEF8 BL 0x3EB1AE0
	0x025EDEFC MOV X0, X20
	0x025EDF00 BL 0x1D2C690
	0x025EDF04 BL 0x1990590
	0x025EDF08 STR X30, [X31 - 0x10]!
	0x025EDF0C LDR X8, [X0 + 0x10]
	0x025EDF10 CBZ X8, 0x25EDF50
	0x025EDF14 LDR X9, [X2 + 0x20]
	0x025EDF18 LDR X8, [X8 + 0x18]
	0x025EDF1C MOVN W10, 0x80100000
	0x025EDF20 LDR X9, [X9 + 0xC0]
	0x025EDF24 UBFM W11, W8, 0x1F, 0x1E
	0x025EDF28 CMP W11, W10
	0x025EDF2C CSEL W10, W11, W10, CC
	0x025EDF30 CMP X8, 0x0
	0x025EDF34 MOVZ W8, 0x4
	0x025EDF38 LDR X2, [X9 + 0x178]
	0x025EDF3C CSEL W8, W8, W10, EQ
	0x025EDF40 CMP W8, W1
	0x025EDF44 CSEL W1, W1, W8, LT
	0x025EDF48 LDR X30, [X31], #0x10
	0x025EDF4C B 0x25ED088
	0x025EDF50 BL 0x1C16F20
	0x025EDF54 STR X30, [X31 - 0x30]!
	0x025EDF58 STP X22, X21, [X31 + 0x10]
	0x025EDF5C STP X20, X19, [X31 + 0x20]
	0x025EDF60 TBNZ X1, 0x1F, 0x25EDFA0
	0x025EDF64 LDR W8, [X0 + 0x20]
	0x025EDF68 CMP W8, W1
	0x025EDF6C B.LE 0x25EDFA0
	0x025EDF70 LDR X8, [X0 + 0x18]
	0x025EDF74 CBZ X8, 0x25EE014
	0x025EDF78 LDR W9, [X8 + 0x18]
	0x025EDF7C CMP W9, W1
	0x025EDF80 B.LS 0x25EE018
	0x025EDF84 MOV W9, W1
	0x025EDF88 ADD X8, X8, X9, 0x4, LSL
	0x025EDF8C LDP X0, X1, [X8 + 0x20]
	0x025EDF90 LDP X20, X19, [X31 + 0x20]
	0x025EDF94 LDP X22, X21, [X31 + 0x10]
	0x025EDF98 LDR X30, [X31], #0x30
	0x025EDF9C RET
	0x025EDFA0 STR W1, [X31 + 0xC]
	0x025EDFA4 ADRP X0, 0x1B06000
	0x025EDFA8 LDR X0, [X0 + 0x758]
	0x025EDFAC MOV X19, X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X20, X0
	008 Move X21, X2
	009 Move W3, [X1]
	010 Move X8, [X8+192]
	011 Move X0, [X0+16]
	012 Move W2, [X20+32]
	013 Move X4, [X20+40]
	014 Move X8, [X8+160]
	015 Move X19, X1
	016 Move W1, W31
	017 Move X8, [X8+32]
	018 Move X8, [X8+192]
	019 Move X5, [X8+96]
	020 Call Array.BinarySearch, X0, X1, X2, X3, X4
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSINV not yet implemented."
	023 Move TEMP, X22
	024 And TEMP, TEMP, -2147483648
	025 Compare TEMP, -2147483648
	026 JumpIfEqual {53}
	027 Move X8, [X21+32]
	028 Move X8, [X8+192]
	029 Move X0, [X8+168]
	030 Call 0x2317AC0
	031 Move X8, [X20+24]
	032 Compare X8, 0
	033 JumpIfEqual {60}
	034 Move W9, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X0, 0
	037 JumpIfEqual {60}
	038 Move X10, [X0]
	039 Move W9, W22
	040 Add X8, X8, X9
	041 Move X3, [X19+8]
	042 Move X4, [X19+16]
	043 Move X1, [X8+32]
	044 Move X2, [X8+40]
	045 Move X8, [X10+440]
	046 Move X5, [X10+448]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {53}
	052 Move W0, 1
	053 Move W0, W31
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return X0
	060 Call 0x1C17F20
	061 Call 0x1C17F28

Method: System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair`2<TKey, TValue> keyValuePair)

Disassembly:
	0x025EDFB0 BL 0x1C16D08
	0x025EDFB4 ADD X1, X31, 0xC
	0x025EDFB8 BL 0x1C16E04
	0x025EDFBC MOV X20, X0
	0x025EDFC0 ADRP X0, 0x1B0E000
	0x025EDFC4 LDR X0, [X0 + 0x760]
	0x025EDFC8 BL 0x1C16D08
	0x025EDFCC BL 0x1C16F10
	0x025EDFD0 MOV X21, X0
	0x025EDFD4 ADRP X0, 0x1B11000
	0x025EDFD8 LDR X0, [X0 + 0x130]
	0x025EDFDC BL 0x1C16D08
	0x025EDFE0 MOV X22, X0
	0x025EDFE4 ADRP X0, 0x1B2E000
	0x025EDFE8 LDR X0, [X0 + 0x660]
	0x025EDFEC BL 0x1C16D08
	0x025EDFF0 MOV X3, X0
	0x025EDFF4 MOV X0, X21
	0x025EDFF8 MOV X1, X22
	0x025EDFFC MOV X2, X20
	0x025EE000 MOV X4, X31
	0x025EE004 BL 0x3312C8C
	0x025EE008 MOV X0, X21
	0x025EE00C MOV X1, X19
	0x025EE010 BL 0x1C16DEC
	0x025EE014 BL 0x1C16F20
	0x025EE018 BL 0x1C16F28
	0x025EE01C SUB X31, X31, 0x70
	0x025EE020 STP X30, X19, [X31 + 0x60]
	0x025EE024 MOVI V0.2D, 0x0
	0x025EE028 STP V0, V0, [X31 + 0x40]
	0x025EE02C STR V0, [X31 + 0x3]
	0x025EE030 LDR X8, [X1 + 0x20]
	0x025EE034 MOV X19, X1
	0x025EE038 MOV X1, X0
	0x025EE03C ADD X0, X31, 0x30
	0x025EE040 LDR X8, [X8 + 0xC0]
	0x025EE044 MOVZ W2, 0x1
	0x025EE048 LDR X3, [X8 + 0x188]
	0x025EE04C BL 0x2BF0904
	0x025EE050 LDP V0, V1, [X31 + 0x30]
	0x025EE054 LDR V2, [X31 + 0x5]
	0x025EE058 ADD X1, X31, 0x0
	0x025EE05C STP V0, V1, [X31]
	0x025EE060 STR V2, [X31 + 0x2]
	0x025EE064 LDR X8, [X19 + 0x20]
	0x025EE068 LDR X8, [X8 + 0xC0]
	0x025EE06C LDR X0, [X8 + 0x180]
	0x025EE070 BL 0x1C16E04
	0x025EE074 LDP X30, X19, [X31 + 0x60]
	0x025EE078 ADD X31, X31, 0x70
	0x025EE07C RET
	0x025EE080 SUB X31, X31, 0x70
	0x025EE084 STP X30, X19, [X31 + 0x60]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X19, X0
	008 Move X20, X2
	009 Move W3, [X1]
	010 Move X8, [X8+192]
	011 Move X0, [X0+16]
	012 Move W2, [X19+32]
	013 Move X4, [X19+40]
	014 Move X8, [X8+160]
	015 Move X22, X1
	016 Move W1, W31
	017 Move X8, [X8+32]
	018 Move X8, [X8+192]
	019 Move X5, [X8+96]
	020 Call Array.BinarySearch, X0, X1, X2, X3, X4
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSINV not yet implemented."
	023 Move TEMP, X0
	024 And TEMP, TEMP, -2147483648
	025 Compare TEMP, -2147483648
	026 JumpIfEqual {59}
	027 Move X8, [X20+32]
	028 Move X8, [X8+192]
	029 Move X0, [X8+168]
	030 Call 0x2317AC0
	031 Move X8, [X19+24]
	032 Compare X8, 0
	033 JumpIfEqual {66}
	034 Move W9, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X0, 0
	037 JumpIfEqual {66}
	038 Move X10, [X0]
	039 Move X9, W21
	040 Add X8, X8, X9
	041 Move X3, [X22+8]
	042 Move X4, [X22+16]
	043 Move X1, [X8+32]
	044 Move X2, [X8+40]
	045 Move X8, [X10+440]
	046 Move X5, [X10+448]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {59}
	052 Move X8, [X20+32]
	053 Move X0, X19
	054 Move W1, W21
	055 Move X8, [X8+192]
	056 Move X2, [X8+200]
	057 Call 0x25EF954, X0, X1
	058 Move W0, 1
	059 Move W0, W31
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Return X0
	066 Call 0x1C17F20
	067 Call 0x1C17F28

Method: System.Void set_Capacity(System.Int32 value)

Disassembly:
	0x025EE088 MOVI V0.2D, 0x0
	0x025EE08C STP V0, V0, [X31 + 0x40]
	0x025EE090 STR V0, [X31 + 0x3]
	0x025EE094 LDR X8, [X1 + 0x20]
	0x025EE098 MOV X19, X1
	0x025EE09C MOV X1, X0
	0x025EE0A0 ADD X0, X31, 0x30
	0x025EE0A4 LDR X8, [X8 + 0xC0]
	0x025EE0A8 MOVZ W2, 0x1
	0x025EE0AC LDR X3, [X8 + 0x188]
	0x025EE0B0 BL 0x2BF0904
	0x025EE0B4 LDP V0, V1, [X31 + 0x30]
	0x025EE0B8 LDR V2, [X31 + 0x5]
	0x025EE0BC ADD X1, X31, 0x0
	0x025EE0C0 STP V0, V1, [X31]
	0x025EE0C4 STR V2, [X31 + 0x2]
	0x025EE0C8 LDR X8, [X19 + 0x20]
	0x025EE0CC LDR X8, [X8 + 0xC0]
	0x025EE0D0 LDR X0, [X8 + 0x180]
	0x025EE0D4 BL 0x1C16E04
	0x025EE0D8 LDP X30, X19, [X31 + 0x60]
	0x025EE0DC ADD X31, X31, 0x70
	0x025EE0E0 RET
	0x025EE0E4 SUB X31, X31, 0x70
	0x025EE0E8 STP X30, X19, [X31 + 0x60]
	0x025EE0EC MOVI V0.2D, 0x0
	0x025EE0F0 STP V0, V0, [X31 + 0x40]
	0x025EE0F4 STR V0, [X31 + 0x3]
	0x025EE0F8 LDR X8, [X1 + 0x20]
	0x025EE0FC MOV X19, X1
	0x025EE100 MOV X1, X0
	0x025EE104 ADD X0, X31, 0x30
	0x025EE108 LDR X8, [X8 + 0xC0]
	0x025EE10C MOVZ W2, 0x2
	0x025EE110 LDR X3, [X8 + 0x188]
	0x025EE114 BL 0x2BF0904
	0x025EE118 LDP V0, V1, [X31 + 0x30]
	0x025EE11C LDR V2, [X31 + 0x5]
	0x025EE120 ADD X1, X31, 0x0
	0x025EE124 STP V0, V1, [X31]
	0x025EE128 STR V2, [X31 + 0x2]
	0x025EE12C LDR X8, [X19 + 0x20]
	0x025EE130 LDR X8, [X8 + 0xC0]
	0x025EE134 LDR X0, [X8 + 0x180]
	0x025EE138 BL 0x1C16E04
	0x025EE13C LDP X30, X19, [X31 + 0x60]
	0x025EE140 ADD X31, X31, 0x70
	0x025EE144 RET
	0x025EE148 SUB X31, X31, 0x70
	0x025EE14C STP X30, X19, [X31 + 0x60]
	0x025EE150 MOVI V0.2D, 0x0
	0x025EE154 STP V0, V0, [X31 + 0x40]
	0x025EE158 STR V0, [X31 + 0x3]
	0x025EE15C LDR X8, [X1 + 0x20]
	0x025EE160 MOV X19, X1
	0x025EE164 MOV X1, X0
	0x025EE168 ADD X0, X31, 0x30
	0x025EE16C LDR X8, [X8 + 0xC0]
	0x025EE170 MOVZ W2, 0x1
	0x025EE174 LDR X3, [X8 + 0x188]
	0x025EE178 BL 0x2BF0904
	0x025EE17C LDP V0, V1, [X31 + 0x30]
	0x025EE180 LDR V2, [X31 + 0x5]
	0x025EE184 ADD X1, X31, 0x0
	0x025EE188 STP V0, V1, [X31]
	0x025EE18C STR V2, [X31 + 0x2]
	0x025EE190 LDR X8, [X19 + 0x20]
	0x025EE194 LDR X8, [X8 + 0xC0]
	0x025EE198 LDR X0, [X8 + 0x180]
	0x025EE19C BL 0x1C16E04
	0x025EE1A0 LDP X30, X19, [X31 + 0x60]
	0x025EE1A4 ADD X31, X31, 0x70
	0x025EE1A8 RET
	0x025EE1AC STR X30, [X31 - 0x30]!
	0x025EE1B0 STP X22, X21, [X31 + 0x10]
	0x025EE1B4 STP X20, X19, [X31 + 0x20]
	0x025EE1B8 TBNZ X1, 0x1F, 0x25EE1F4
	0x025EE1BC LDR W8, [X0 + 0x20]
	0x025EE1C0 CMP W8, W1
	0x025EE1C4 B.LE 0x25EE1F4
	0x025EE1C8 LDR X8, [X0 + 0x10]
	0x025EE1CC CBZ X8, 0x25EE268
	0x025EE1D0 LDR W9, [X8 + 0x18]
	0x025EE1D4 CMP W9, W1
	0x025EE1D8 B.LS 0x25EE26C
	0x025EE1DC ADD X8, X8, W1, 0x2, UXTW
	0x025EE1E0 LDR W0, [X8 + 0x20]
	0x025EE1E4 LDP X20, X19, [X31 + 0x20]
	0x025EE1E8 LDP X22, X21, [X31 + 0x10]
	0x025EE1EC LDR X30, [X31], #0x30
	0x025EE1F0 RET
	0x025EE1F4 STR W1, [X31 + 0xC]
	0x025EE1F8 ADRP X0, 0x1B05000
	0x025EE1FC LDR X0, [X0 + 0x758]
	0x025EE200 MOV X19, X2
	0x025EE204 BL 0x1C16D08
	0x025EE208 ADD X1, X31, 0xC
	0x025EE20C BL 0x1C16E04
	0x025EE210 MOV X20, X0
	0x025EE214 ADRP X0, 0x1B0D000
	0x025EE218 LDR X0, [X0 + 0x760]
	0x025EE21C BL 0x1C16D08
	0x025EE220 BL 0x1C16F10
	0x025EE224 MOV X21, X0
	0x025EE228 ADRP X0, 0x1B10000
	0x025EE22C LDR X0, [X0 + 0x130]
	0x025EE230 BL 0x1C16D08
	0x025EE234 MOV X22, X0
	0x025EE238 ADRP X0, 0x1B2D000
	0x025EE23C LDR X0, [X0 + 0x660]
	0x025EE240 BL 0x1C16D08
	0x025EE244 MOV X3, X0
	0x025EE248 MOV X0, X21
	0x025EE24C MOV X1, X22
	0x025EE250 MOV X2, X20
	0x025EE254 MOV X4, X31
	0x025EE258 BL 0x3312C8C
	0x025EE25C MOV X0, X21
	0x025EE260 MOV X1, X19
	0x025EE264 BL 0x1C16DEC
	0x025EE268 BL 0x1C16F20
	0x025EE26C BL 0x1C16F28
	0x025EE270 SUB X31, X31, 0x30
	0x025EE274 STP X30, X21, [X31 + 0x10]
	0x025EE278 STP X20, X19, [X31 + 0x20]
	0x025EE27C STR W1, [X31 + 0xC]
	0x025EE280 LDR X8, [X2 + 0x20]
	0x025EE284 MOV X20, X0
	0x025EE288 MOV X19, X2
	0x025EE28C LDR X0, [X0 + 0x10]
	0x025EE290 LDR X8, [X8 + 0xC0]
	0x025EE294 LDR W2, [X20 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+16]
	007 Compare X8, 0
	008 JumpIfEqual {127}
	009 Move W8, [X8+24]
	010 Move W21, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, [X0+32]
	013 Move X20, X2
	014 Move X19, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X8, [X20+32]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X8, [X8+192]
	019 Move X0, [X8+72]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move W1, W21
	027 Call 0x1C17D6C
	028 Move X8, [X20+32]
	029 Move X20, X0
	030 Move X8, [X8+192]
	031 Move X8, [X8+80]
	032 Move W9, [X8+309]
	033 Move TEMP, X9
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {40}
	037 Move X0, X8
	038 Call 0x1C5D684
	039 Move X8, X0
	040 Move X0, X8
	041 Move W1, W21
	042 Call 0x1C17D6C
	043 Move W4, [X19+32]
	044 Move X21, X0
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, [X19+16]
	047 Move W1, W31
	048 Move X2, X20
	049 Move W3, W31
	050 Move X5, X31
	051 Call Array.Copy, X0, X1, X2, X3, X4
	052 Move X0, [X19+24]
	053 Move W4, [X19+32]
	054 Move W1, W31
	055 Move X2, X21
	056 Move W3, W31
	057 Move X5, X31
	058 Call Array.Copy, X0, X1, X2, X3, X4
	059 Move [X19+16], X20
	060 Move [X19+24], X21
	061 Move X21, [X8]
	062 Move X8, [X21+56]
	063 Compare X8, 0
	064 JumpIfNotEqual {68}
	065 Move X0, X21
	066 Call 0x1C5D6E0
	067 Move X8, [X21+56]
	068 Move X0, [X8+16]
	069 Move W8, [X0+309]
	070 Move TEMP, X8
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {75}
	074 Call 0x1C5D684
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X8, [X21+56]
	080 Move X0, [X8+16]
	081 Move W8, [X0+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {87}
	086 Call 0x1C5D684
	087 Move X8, [X0+184]
	088 Move X8, [X8]
	089 Move [X19+16], X8
	090 Move X8, [X20+32]
	091 Move X8, [X8+192]
	092 Move X20, [X8+24]
	093 Move X8, [X20+56]
	094 Compare X8, 0
	095 JumpIfNotEqual {99}
	096 Move X0, X20
	097 Call 0x1C5D6E0
	098 Move X8, [X20+56]
	099 Move X0, [X8+16]
	100 Move W8, [X0+309]
	101 Move TEMP, X8
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {106}
	105 Call 0x1C5D684
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Move X8, [X20+56]
	111 Move X0, [X8+16]
	112 Move W8, [X0+309]
	113 Move TEMP, X8
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfEqual {118}
	117 Call 0x1C5D684
	118 Move X8, [X0+184]
	119 Move X8, [X8]
	120 Move [X19+24], X8
	121 Move X20, [X31+32]
	122 Move X19, [X31+40]
	123 Move X22, [X31+16]
	124 Move X21, [X31+24]
	125 Move X30, [X31+48]
	126 Return 
	127 Call 0x1C17F20
	128 Move [X31+12], W21
	129 Move X0, 0x1B06000
	130 Move X0, [X0+1880]
	131 Call 0x1C17D08
	132 Add X1, X31, 12
	133 Call 0x1C17E04
	134 Move X19, X0
	135 Move X0, 0x1B0E000
	136 Move X0, [X0+1888]
	137 Call 0x1C17D08
	138 Call 0x1C17F10
	139 Move X21, X0
	140 Move X0, 0x1B10000
	141 Move X0, [X0+3784]
	142 Call 0x1C17D08
	143 Move X22, X0
	144 Move X0, 0x1B30000
	145 Move X0, [X0+672]
	146 Call 0x1C17D08
	147 Move X3, X0
	148 Move X0, X21
	149 Move X1, X22
	150 Move X2, X19
	151 Move X4, X31
	152 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	153 Move X0, X21
	154 Move X1, X20
	155 Call 0x1C17DEC

Method: System.Void System.Collections.IDictionary.Add(System.Object key, System.Object value)

Disassembly:
	0x025EE298 LDR X4, [X20 + 0x28]
	0x025EE29C MOV W3, W1
	0x025EE2A0 LDR X8, [X8 + 0xA0]
	0x025EE2A4 MOV W1, W31
	0x025EE2A8 LDR X8, [X8 + 0x20]
	0x025EE2AC LDR X8, [X8 + 0xC0]
	0x025EE2B0 LDR X5, [X8 + 0x60]
	0x025EE2B4 BL 0x22D22F8
	0x025EE2B8 CMP W0, 0x0
	0x025EE2BC CSINV W8, W0, W31, GE
	0x025EE2C0 TBNZ X8, 0x1F, 0x25EE2F4
	0x025EE2C4 LDR X9, [X20 + 0x18]
	0x025EE2C8 CBZ X9, 0x25EE354
	0x025EE2CC LDR W10, [X9 + 0x18]
	0x025EE2D0 CMP W8, W10
	0x025EE2D4 B.CS 0x25EE358
	0x025EE2D8 MOV W8, W8
	0x025EE2DC ADD X8, X9, X8, 0x4, LSL
	0x025EE2E0 LDP X0, X1, [X8 + 0x20]
	0x025EE2E4 LDP X20, X19, [X31 + 0x20]
	0x025EE2E8 LDP X30, X21, [X31 + 0x10]
	0x025EE2EC ADD X31, X31, 0x30
	0x025EE2F0 RET
	0x025EE2F4 LDR X8, [X19 + 0x20]
	0x025EE2F8 ADD X0, X31, 0xC
	0x025EE2FC LDR X8, [X8 + 0xC0]
	0x025EE300 LDR X1, [X8 + 0x198]
	0x025EE304 BL 0x337B6E0
	0x025EE308 MOV X20, X0
	0x025EE30C ADRP X0, 0x1B2F000
	0x025EE310 LDR X0, [X0 + 0x2B8]
	0x025EE314 BL 0x1C16D08
	0x025EE318 MOV X1, X20
	0x025EE31C MOV X2, X31
	0x025EE320 BL 0x32094D4
	0x025EE324 MOV X20, X0
	0x025EE328 ADRP X0, 0x1B08000
	0x025EE32C LDR X0, [X0 + 0x78]
	0x025EE330 BL 0x1C16D08
	0x025EE334 BL 0x1C16F10
	0x025EE338 MOV X1, X20
	0x025EE33C MOV X2, X31
	0x025EE340 MOV X21, X0
	0x025EE344 BL 0x335DC08
	0x025EE348 MOV X0, X21
	0x025EE34C MOV X1, X19
	0x025EE350 BL 0x1C16DEC
	0x025EE354 BL 0x1C16F20
	0x025EE358 BL 0x1C16F28
	0x025EE35C STP X30, X23, [X31 - 0x30]!
	0x025EE360 STP X22, X21, [X31 + 0x10]
	0x025EE364 STP X20, X19, [X31 + 0x20]
	0x025EE368 LDR X8, [X4 + 0x20]
	0x025EE36C MOV X21, X0
	0x025EE370 MOV X22, X4
	0x025EE374 MOV X20, X2
	0x025EE378 LDR X8, [X8 + 0xC0]
	0x025EE37C LDR X0, [X0 + 0x10]
	0x025EE380 LDR W2, [X21 + 0x20]
	0x025EE384 LDR X4, [X21 + 0x28]
	0x025EE388 LDR X5, [X8 + 0x60]
	0x025EE38C MOV W23, W1
	0x025EE390 MOV X19, X3
	0x025EE394 MOV W1, W31
	0x025EE398 MOV W3, W23
	0x025EE39C BL 0x22D22F8
	0x025EE3A0 TBNZ X0, 0x1F, 0x25EE3E0
	0x025EE3A4 LDR X8, [X21 + 0x18]
	0x025EE3A8 CBZ X8, 0x25EE410
	0x025EE3AC LDR W9, [X8 + 0x18]
	0x025EE3B0 CMP W0, W9
	0x025EE3B4 B.CS 0x25EE414
	0x025EE3B8 MOV W9, W0
	0x025EE3BC ADD X8, X8, X9, 0x4, LSL
	0x025EE3C0 STP X20, X19, [X8 + 0x20]
	0x025EE3C4 LDR W8, [X21 + 0x24]
	0x025EE3C8 LDP X20, X19, [X31 + 0x20]
	0x025EE3CC ADD W8, W8, 0x1
	0x025EE3D0 STR W8, [X21 + 0x24]
	0x025EE3D4 LDP X22, X21, [X31 + 0x10]
	0x025EE3D8 LDP X30, X23, [X31], #0x30
	0x025EE3DC RET
	0x025EE3E0 LDR X8, [X22 + 0x20]
	0x025EE3E4 ORN W1, W31, W0, 0x0
	0x025EE3E8 MOV X0, X21
	0x025EE3EC MOV X3, X20
	0x025EE3F0 LDR X8, [X8 + 0xC0]
	0x025EE3F4 MOV X4, X19
	0x025EE3F8 LDP X20, X19, [X31 + 0x20]
	0x025EE3FC LDP X22, X21, [X31 + 0x10]
	0x025EE400 LDR X5, [X8 + 0x70]
	0x025EE404 MOV W2, W23
	0x025EE408 LDP X30, X23, [X31], #0x30
	0x025EE40C B 0x25EE7C0
	0x025EE410 BL 0x1C16F20
	0x025EE414 BL 0x1C16F28
	0x025EE418 SUB X31, X31, 0x30
	0x025EE41C STP X30, X21, [X31 + 0x10]
	0x025EE420 STP X20, X19, [X31 + 0x20]
	0x025EE424 LDR X8, [X2 + 0x20]
	0x025EE428 MOV X21, X1
	0x025EE42C MOV X20, X0
	0x025EE430 MOV X0, X21
	0x025EE434 LDR X8, [X8 + 0xC0]
	0x025EE438 MOV X19, X2
	0x025EE43C LDR X1, [X8 + 0x140]
	0x025EE440 BL 0x25EEB94
	0x025EE444 TBZ X0, 0x0, 0x25EE500
	0x025EE448 LDR X8, [X19 + 0x20]
	0x025EE44C LDR X8, [X8 + 0xC0]
	0x025EE450 LDR X1, [X8 + 0x58]
	0x025EE454 LDRB W8, [X1 + 0x135]
	0x025EE458 TBNZ X8, 0x0, 0x25EE468
	0x025EE45C MOV X0, X1
	0x025EE460 BL 0x1C5C684
	0x025EE464 MOV X1, X0
	0x025EE468 CBZ X21, 0x25EE514
	0x025EE46C LDR X8, [X21]
	0x025EE470 LDR X9, [X1 + 0x40]
	0x025EE474 MOV X0, X21
	0x025EE478 LDR X8, [X8 + 0x40]
	0x025EE47C CMP X8, X9
	0x025EE480 B.NE 0x25EE518
	0x025EE484 BL 0x1C16E08
	0x025EE488 LDR X8, [X19 + 0x20]
	0x025EE48C LDR W3, [X0]
	0x025EE490 LDR X0, [X20 + 0x10]
	0x025EE494 LDR W2, [X20 + 0x20]
	0x025EE498 LDR X8, [X8 + 0xC0]
	0x025EE49C LDR X4, [X20 + 0x28]
	0x025EE4A0 MOV W1, W31
	0x025EE4A4 LDR X8, [X8 + 0xA0]
	0x025EE4A8 LDR X8, [X8 + 0x20]
	0x025EE4AC LDR X8, [X8 + 0xC0]
	0x025EE4B0 LDR X5, [X8 + 0x60]
	0x025EE4B4 BL 0x22D22F8
	0x025EE4B8 CMP W0, 0x0
	0x025EE4BC CSINV W8, W0, W31, GE
	0x025EE4C0 TBNZ X0, 0x1F, 0x25EE500
	0x025EE4C4 LDR X9, [X20 + 0x18]
	0x025EE4C8 CBZ X9, 0x25EE514
	0x025EE4CC LDR W10, [X9 + 0x18]
	0x025EE4D0 CMP W8, W10
	0x025EE4D4 B.CS 0x25EE51C
	0x025EE4D8 SXTW X8, W8
	0x025EE4DC ADD X8, X9, X8, 0x4, LSL
	0x025EE4E0 LDP X9, X8, [X8 + 0x20]
	0x025EE4E4 ADD X1, X31, 0x0
	0x025EE4E8 STP X9, X8, [X31]
	0x025EE4EC LDR X8, [X19 + 0x20]
	0x025EE4F0 LDR X8, [X8 + 0xC0]
	0x025EE4F4 LDR X0, [X8 + 0x68]
	0x025EE4F8 BL 0x1C16E04

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X3
	007 Compare X1, 0
	008 JumpIfEqual {94}
	009 Move X20, X2
	010 Compare X2, 0
	011 JumpIfEqual {101}
	012 Move X8, [X19+32]
	013 Move X22, X1
	014 Move X21, X0
	015 Move X8, [X8+192]
	016 Move X1, [X8+88]
	017 Move W8, [X1+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {25}
	022 Move X0, X1
	023 Call 0x1C5D684
	024 Move X1, X0
	025 Move X0, X22
	026 Call 0x1C17E00
	027 Move X8, [X19+32]
	028 Move X8, [X8+192]
	029 Compare X0, 0
	030 JumpIfEqual {114}
	031 Move X1, [X8+104]
	032 Move W8, [X1+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {40}
	037 Move X0, X1
	038 Call 0x1C5D684
	039 Move X1, X0
	040 Move X0, X20
	041 Call 0x1C17E00
	042 Move X8, [X19+32]
	043 Move X8, [X8+192]
	044 Compare X0, 0
	045 JumpIfEqual {138}
	046 Move X1, [X8+88]
	047 Move W8, [X1+309]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {55}
	052 Move X0, X1
	053 Call 0x1C5D684
	054 Move X1, X0
	055 Move X8, [X22]
	056 Move X9, [X1+64]
	057 Move X0, X22
	058 Move X8, [X8+64]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Call 0x1C17E08
	061 Move X8, [X19+32]
	062 Move W22, [X0]
	063 Move X8, [X8+192]
	064 Move X1, [X8+104]
	065 Move W8, [X1+309]
	066 Move TEMP, X8
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {73}
	070 Move X0, X1
	071 Call 0x1C5D684
	072 Move X1, X0
	073 Move X8, [X20]
	074 Move X9, [X1+64]
	075 Move X0, X20
	076 Move X8, [X8+64]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Call 0x1C17E08
	079 Move X8, [X19+32]
	080 Move X2, [X0]
	081 Move X3, [X0+8]
	082 Move X0, X21
	083 Move W1, W22
	084 Move X8, [X8+192]
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X4, [X8+152]
	090 Move X30, [X31+48]
	091 Call 0x25EDDDC, X0, X1, X2
	092 Return 
	093 Call 0x1C181E0
	094 Move X0, 0x1B0B000
	095 Move X0, [X0+1320]
	096 Call 0x1C17D08
	097 Call 0x1C17F10
	098 Move X20, X0
	099 Move X0, 0x1B30000
	100 Move X0, [X0+112]
	101 Move X0, 0x1B0B000
	102 Move X0, [X0+1320]
	103 Call 0x1C17D08
	104 Call 0x1C17F10
	105 Move X20, X0
	106 Move X0, 0x1B10000
	107 Move X0, [X0+3784]
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X20
	111 Move X2, X31
	112 Call ArgumentNullException..ctor, X0, X1
	113 Move X0, X20
	114 Move X0, 0x1B06000
	115 Move X20, [X8+208]
	116 Move X0, [X0+1728]
	117 Call 0x1C17D08
	118 Call 0x19913D0
	119 Move X0, X20
	120 Move X1, X31
	121 Call Type.GetTypeFromHandle, X0
	122 Move X20, X0
	123 Move X0, 0x1B30000
	124 Move X0, [X0+680]
	125 Call 0x1C17D08
	126 Move X1, X22
	127 Move X2, X20
	128 Move X3, X31
	129 Call SR.Format, X0, X1, X2
	130 Move X20, X0
	131 Move X0, 0x1B0E000
	132 Move X0, [X0+1400]
	133 Call 0x1C17D08
	134 Call 0x1C17F10
	135 Move X21, X0
	136 Move X0, 0x1B30000
	137 Move X0, [X0+112]
	138 Move X0, 0x1B06000
	139 Move X21, [X8+216]
	140 Move X0, [X0+1728]
	141 Call 0x1C17D08
	142 Call 0x19913D0
	143 Move X0, X21
	144 Move X1, X31
	145 Call Type.GetTypeFromHandle, X0
	146 Move X21, X0
	147 Move X0, 0x1B30000
	148 Move X0, [X0+680]
	149 Call 0x1C17D08
	150 Move X1, X20
	151 Move X2, X21
	152 Move X3, X31
	153 Call SR.Format, X0, X1, X2
	154 Move X20, X0
	155 Move X0, 0x1B0E000
	156 Move X0, [X0+1400]
	157 Call 0x1C17D08
	158 Call 0x1C17F10
	159 Move X21, X0
	160 Move X0, 0x1B10000
	161 Move X0, [X0+3784]
	162 Call 0x1C17D08
	163 Move X2, X0
	164 Move X0, X21
	165 Move X1, X20
	166 Move X3, X31
	167 Call ArgumentException..ctor, X0, X1, X2
	168 Move X0, X21
	169 Move X1, X19
	170 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x025EE4FC B 0x25EE504
	0x025EE500 MOV X0, X31

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Collections.Generic.IList`1<TKey> get_Keys()

Disassembly:
	0x025EE504 LDP X20, X19, [X31 + 0x20]
	0x025EE508 LDP X30, X21, [X31 + 0x10]
	0x025EE50C ADD X31, X31, 0x30
	0x025EE510 RET

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+224]
	004 Call 0x25EE564, X0
	005 Return X0

Method: System.Collections.Generic.ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys()

Disassembly:
	0x025EE514 BL 0x1C16F20
	0x025EE518 BL 0x1C171E0
	0x025EE51C BL 0x1C16F28
	0x025EE520 STR X30, [X31 - 0x30]!

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+224]
	004 Call 0x25EE564, X0
	005 Return X0

Method: System.Collections.ICollection System.Collections.IDictionary.get_Keys()

Disassembly:
	0x025EE524 STP X22, X21, [X31 + 0x10]
	0x025EE528 STP X20, X19, [X31 + 0x20]
	0x025EE52C LDR X8, [X3 + 0x20]
	0x025EE530 MOV X22, X1

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+224]
	004 Call 0x25EE564, X0
	005 Return X0

Method: System.Collections.Generic.IList`1<TValue> get_Values()

Disassembly:
	0x025EE534 MOV X21, X0
	0x025EE538 MOV X0, X22
	0x025EE53C LDR X8, [X8 + 0xC0]
	0x025EE540 MOV X19, X3

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+256]
	004 Call 0x25EE5C4, X0
	005 Return X0

Method: System.Collections.Generic.ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values()

Disassembly:
	0x025EE544 MOV X20, X2
	0x025EE548 LDR X1, [X8 + 0x140]
	0x025EE54C BL 0x25EEB94
	0x025EE550 TBZ X0, 0x0, 0x25EE604

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+256]
	004 Call 0x25EE5C4, X0
	005 Return X0

Method: System.Collections.ICollection System.Collections.IDictionary.get_Values()

Disassembly:
	0x025EE554 CBZ X20, 0x25EE624
	0x025EE558 LDR X8, [X19 + 0x20]
	0x025EE55C LDR X8, [X8 + 0xC0]
	0x025EE560 LDR X1, [X8 + 0x58]

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+256]
	004 Call 0x25EE5C4, X0
	005 Return X0

Method: System.Collections.Generic.SortedList`2/KeyList<TKey, TValue> GetKeyListHelper()

Disassembly:
	0x025EE564 LDRB W8, [X1 + 0x135]
	0x025EE568 TBNZ X8, 0x0, 0x25EE578
	0x025EE56C MOV X0, X1
	0x025EE570 BL 0x1C5C684
	0x025EE574 MOV X1, X0
	0x025EE578 CBZ X22, 0x25EE660
	0x025EE57C LDR X8, [X22]
	0x025EE580 LDR X9, [X1 + 0x40]
	0x025EE584 MOV X0, X22
	0x025EE588 LDR X8, [X8 + 0x40]
	0x025EE58C CMP X8, X9
	0x025EE590 B.NE 0x25EE664
	0x025EE594 BL 0x1C16E08
	0x025EE598 LDR X8, [X19 + 0x20]
	0x025EE59C LDR W22, [X0]
	0x025EE5A0 LDR X8, [X8 + 0xC0]
	0x025EE5A4 LDR X1, [X8 + 0x68]
	0x025EE5A8 LDRB W8, [X1 + 0x135]
	0x025EE5AC TBNZ X8, 0x0, 0x25EE5BC
	0x025EE5B0 MOV X0, X1
	0x025EE5B4 BL 0x1C5C684
	0x025EE5B8 MOV X1, X0
	0x025EE5BC LDR X8, [X20]
	0x025EE5C0 LDR X9, [X1 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, [X0+48]
	006 Compare X21, 0
	007 JumpIfNotEqual {27}
	008 Move X8, [X1+32]
	009 Move X19, X0
	010 Move X20, X1
	011 Move X8, [X8+192]
	012 Move X0, [X8+232]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Call 0x1C17F10
	020 Move X8, [X20+32]
	021 Move X1, X19
	022 Move X21, X0
	023 Move X8, [X8+192]
	024 Move X2, [X8+288]
	025 Call 0x2EDBBF4, X0, X1
	026 Move [X19+48], X21
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X0, X21
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Collections.Generic.SortedList`2/ValueList<TKey, TValue> GetValueListHelper()

Disassembly:
	0x025EE5C4 LDR X8, [X8 + 0x40]
	0x025EE5C8 CMP X8, X9
	0x025EE5CC B.NE 0x25EE668
	0x025EE5D0 MOV X0, X20
	0x025EE5D4 BL 0x1C16E08
	0x025EE5D8 LDR X8, [X19 + 0x20]
	0x025EE5DC LDP X2, X3, [X0]
	0x025EE5E0 LDR X8, [X8 + 0xC0]
	0x025EE5E4 LDR X4, [X8 + 0x1A0]
	0x025EE5E8 MOV X0, X21
	0x025EE5EC MOV W1, W22
	0x025EE5F0 BL 0x25EE35C
	0x025EE5F4 LDP X20, X19, [X31 + 0x20]
	0x025EE5F8 LDP X22, X21, [X31 + 0x10]
	0x025EE5FC LDR X30, [X31], #0x30
	0x025EE600 RET
	0x025EE604 ADRP X0, 0x1B0A000
	0x025EE608 LDR X0, [X0 + 0x528]
	0x025EE60C BL 0x1C16D08
	0x025EE610 BL 0x1C16F10
	0x025EE614 MOV X20, X0
	0x025EE618 ADRP X0, 0x1B2F000
	0x025EE61C LDR X0, [X0 + 0x70]
	0x025EE620 B 0x25EE640

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, [X0+56]
	006 Compare X21, 0
	007 JumpIfNotEqual {27}
	008 Move X8, [X1+32]
	009 Move X19, X0
	010 Move X20, X1
	011 Move X8, [X8+192]
	012 Move X0, [X8+264]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Call 0x1C17F10
	020 Move X8, [X20+32]
	021 Move X1, X19
	022 Move X21, X0
	023 Move X8, [X8+192]
	024 Move X2, [X8+296]
	025 Call 0x278CA7C, X0, X1
	026 Move [X19+56], X21
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X0, X21
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly()

Disassembly:
	0x025EE624 ADRP X0, 0x1B0A000
	0x025EE628 LDR X0, [X0 + 0x528]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x025EE62C BL 0x1C16D08
	0x025EE630 BL 0x1C16F10

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x025EE634 MOV X20, X0
	0x025EE638 ADRP X0, 0x1B0F000
	0x025EE63C LDR X0, [X0 + 0xEC8]
	0x025EE640 BL 0x1C16D08
	0x025EE644 MOV X1, X0
	0x025EE648 MOV X0, X20
	0x025EE64C MOV X2, X31
	0x025EE650 BL 0x330E100
	0x025EE654 MOV X0, X20
	0x025EE658 MOV X1, X19
	0x025EE65C BL 0x1C16DEC
	0x025EE660 BL 0x1C16F20
	0x025EE664 BL 0x1C171E0
	0x025EE668 MOV X0, X20
	0x025EE66C BL 0x1C171E0
	0x025EE670 CMP W1, 0x1
	0x025EE674 MOV X21, X0
	0x025EE678 B.NE 0x25EE758
	0x025EE67C MOV X0, X21
	0x025EE680 BL 0x3EB1AD0
	0x025EE684 MOV X21, X0
	0x025EE688 ADRP X0, 0x1B0D000
	0x025EE68C LDR X0, [X0 + 0xC08]
	0x025EE690 BL 0x1C16D08
	0x025EE694 LDR X8, [X21]
	0x025EE698 LDR X1, [X8]
	0x025EE69C BL 0x1C17270
	0x025EE6A0 TBZ X0, 0x0, 0x25EE730
	0x025EE6A4 BL 0x3EB1AE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1DEC000
	005 Move W8, [X20+4039]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1B0C000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4039], W8
	016 Add X19, X19, 64
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {33}
	020 Move X8, 0x1B0C000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Move X3, X31
	031 Call Interlocked.CompareExchange, X0, X1, X2
	032 Move X0, [X19]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Void Clear()

Disassembly:
	0x025EE6A8 LDR X8, [X19 + 0x20]
	0x025EE6AC ADRP X0, 0x1B05000
	0x025EE6B0 LDR X8, [X8 + 0xC0]
	0x025EE6B4 LDR X21, [X8 + 0xD8]
	0x025EE6B8 LDR X0, [X0 + 0x6C0]
	0x025EE6BC BL 0x1C16D08
	0x025EE6C0 BL 0x19903D0
	0x025EE6C4 MOV X0, X21
	0x025EE6C8 MOV X1, X31
	0x025EE6CC BL 0x338C698
	0x025EE6D0 MOV X21, X0
	0x025EE6D4 ADRP X0, 0x1B2F000
	0x025EE6D8 LDR X0, [X0 + 0x2A8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W8, [X0+36]
	005 Move X0, [X0+24]
	006 Move W2, [X19+32]
	007 Move W1, W31
	008 Add W8, W8, 1
	009 Move X3, X31
	010 Move [X19+36], W8
	011 Call Array.Clear, X0, X1, X2
	012 Move [X19+32], W31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 

Method: System.Boolean System.Collections.IDictionary.Contains(System.Object key)

Disassembly:
	0x025EE6DC BL 0x1C16D08
	0x025EE6E0 MOV X1, X20
	0x025EE6E4 MOV X2, X21
	0x025EE6E8 MOV X3, X31
	0x025EE6EC BL 0x320A264
	0x025EE6F0 MOV X20, X0
	0x025EE6F4 ADRP X0, 0x1B0D000
	0x025EE6F8 LDR X0, [X0 + 0x578]
	0x025EE6FC BL 0x1C16D08
	0x025EE700 BL 0x1C16F10
	0x025EE704 MOV X21, X0
	0x025EE708 ADRP X0, 0x1B0F000
	0x025EE70C LDR X0, [X0 + 0xEC8]
	0x025EE710 BL 0x1C16D08
	0x025EE714 MOV X2, X0
	0x025EE718 MOV X0, X21
	0x025EE71C MOV X1, X20
	0x025EE720 MOV X3, X31
	0x025EE724 BL 0x330E16C
	0x025EE728 MOV X0, X21
	0x025EE72C B 0x25EE658
	0x025EE730 MOVZ W0, 0x8
	0x025EE734 BL 0x3EB1AF0
	0x025EE738 LDR X8, [X21]
	0x025EE73C STR X8, [X0]
	0x025EE740 ADRP X1, 0x18C6000
	0x025EE744 ADD X1, X1, 0xE58
	0x025EE748 MOV X2, X31
	0x025EE74C BL 0x3EB1B00
	0x025EE750 MOV X21, X0
	0x025EE754 BL 0x3EB1AE0
	0x025EE758 MOV X0, X21
	0x025EE75C BL 0x1D2C690
	0x025EE760 BL 0x1990590
	0x025EE764 STR X30, [X31 - 0x10]!
	0x025EE768 LDR X8, [X2 + 0x20]
	0x025EE76C LDR W2, [X0 + 0x20]
	0x025EE770 LDR X4, [X0 + 0x28]
	0x025EE774 MOV W3, W1
	0x025EE778 LDR X9, [X8 + 0xC0]
	0x025EE77C LDR X8, [X0 + 0x10]
	0x025EE780 MOV W1, W31
	0x025EE784 LDR X5, [X9 + 0x60]
	0x025EE788 MOV X0, X8
	0x025EE78C BL 0x22D22F8
	0x025EE790 CMP W0, 0x0
	0x025EE794 CSINV W0, W0, W31, GE
	0x025EE798 LDR X30, [X31], #0x10
	0x025EE79C RET
	0x025EE7A0 LDR X8, [X3 + 0x20]
	0x025EE7A4 LDR W4, [X0 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X21, X1
	007 Move X19, X0
	008 Move X0, X21
	009 Move X8, [X8+192]
	010 Move X20, X2
	011 Move X1, [X8+320]
	012 Call 0x25EFB94, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {55}
	017 Move X8, [X20+32]
	018 Move X8, [X8+192]
	019 Move X1, [X8+88]
	020 Move W8, [X1+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {28}
	025 Move X0, X1
	026 Call 0x1C5D684
	027 Move X1, X0
	028 Compare X21, 0
	029 JumpIfEqual {61}
	030 Move X8, [X21]
	031 Move X9, [X1+64]
	032 Move X0, X21
	033 Move X8, [X8+64]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Call 0x1C17E08
	036 Move X8, [X20+32]
	037 Move W3, [X0]
	038 Move X0, [X19+16]
	039 Move W2, [X19+32]
	040 Move X8, [X8+192]
	041 Move X4, [X19+40]
	042 Move W1, W31
	043 Move X8, [X8+336]
	044 Move X8, [X8+32]
	045 Move X8, [X8+192]
	046 Move X8, [X8+160]
	047 Move X8, [X8+32]
	048 Move X8, [X8+192]
	049 Move X5, [X8+96]
	050 Call Array.BinarySearch, X0, X1, X2, X3, X4
	051 NotImplemented "Instruction ORN not yet implemented."
	052 Move W0, W8
	053 ShiftRight W0, 31
	054 And W0, W0, 0x7FFFFFFF
	055 Move W0, W31
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return X0
	061 Call 0x1C17F20
	062 Call 0x1C181E0

Method: System.Boolean ContainsKey(TKey key)

Disassembly:
	0x025EE7A8 MOV W3, W31
	0x025EE7AC LDR X9, [X8 + 0xC0]
	0x025EE7B0 LDR X8, [X0 + 0x18]
	0x025EE7B4 LDR X5, [X9 + 0x1A8]
	0x025EE7B8 MOV X0, X8
	0x025EE7BC B 0x22E9FB0
	0x025EE7C0 STR X30, [X31 - 0x40]!
	0x025EE7C4 STP X24, X23, [X31 + 0x10]
	0x025EE7C8 STP X22, X21, [X31 + 0x20]
	0x025EE7CC STP X20, X19, [X31 + 0x30]
	0x025EE7D0 LDR X9, [X0 + 0x10]
	0x025EE7D4 CBZ X9, 0x25EE8BC
	0x025EE7D8 LDR W8, [X0 + 0x20]
	0x025EE7DC LDR W9, [X9 + 0x18]
	0x025EE7E0 MOV X20, X4
	0x025EE7E4 MOV X21, X3
	0x025EE7E8 MOV W23, W2
	0x025EE7EC MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X2+32]
	003 Move W2, [X0+32]
	004 Move X4, [X0+40]
	005 Move W3, W1
	006 Move X8, [X8+192]
	007 Move W1, W31
	008 Move X8, [X8+160]
	009 Move X8, [X8+32]
	010 Move X9, [X8+192]
	011 Move X8, [X0+16]
	012 Move X5, [X9+96]
	013 Move X0, X8
	014 Call Array.BinarySearch, X0, X1, X2, X3, X4
	015 NotImplemented "Instruction ORN not yet implemented."
	016 Move W0, W8
	017 ShiftRight W0, 31
	018 And W0, W0, 0x7FFFFFFF
	019 Move X30, [X31+16]
	020 Return X0

Method: System.Boolean ContainsValue(TValue value)

Disassembly:
	0x025EE7F0 MOV W22, W1
	0x025EE7F4 CMP W8, W9
	0x025EE7F8 B.NE 0x25EE818
	0x025EE7FC LDR X9, [X5 + 0x20]
	0x025EE800 ADD W1, W8, 0x1
	0x025EE804 MOV X0, X19
	0x025EE808 LDR X9, [X9 + 0xC0]
	0x025EE80C LDR X2, [X9 + 0x1B0]
	0x025EE810 BL 0x25EDF08
	0x025EE814 LDR W8, [X19 + 0x20]
	0x025EE818 SUBS W4, W8, W22
	0x025EE81C B.LE 0x25EE85C
	0x025EE820 LDR X0, [X19 + 0x10]
	0x025EE824 ADD W24, W22, 0x1
	0x025EE828 MOV W1, W22
	0x025EE82C MOV W3, W24

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X3+32]
	003 Move W4, [X0+32]
	004 Move W3, W31
	005 Move X8, [X8+192]
	006 Move X8, [X8+344]
	007 Move X8, [X8+32]
	008 Move X9, [X8+192]
	009 Move X8, [X0+24]
	010 Move X5, [X9+424]
	011 Move X0, X8
	012 Call Array.IndexOf, X0, X1, X2, X3
	013 NotImplemented "Instruction ORN not yet implemented."
	014 Move W0, W8
	015 ShiftRight W0, 31
	016 And W0, W0, 0x7FFFFFFF
	017 Move X30, [X31+16]
	018 Return X0

Method: System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair`2<TKey, TValue>[] array, System.Int32 arrayIndex)

Disassembly:
	0x025EE830 MOV X2, X0
	0x025EE834 MOV X5, X31
	0x025EE838 BL 0x339FCE8
	0x025EE83C LDR W8, [X19 + 0x20]
	0x025EE840 LDR X0, [X19 + 0x18]
	0x025EE844 MOV W1, W22
	0x025EE848 MOV W3, W24
	0x025EE84C SUB W4, W8, W22
	0x025EE850 MOV X2, X0
	0x025EE854 MOV X5, X31
	0x025EE858 BL 0x339FCE8
	0x025EE85C LDR X9, [X19 + 0x10]
	0x025EE860 CBZ X9, 0x25EE8BC
	0x025EE864 LDR W8, [X9 + 0x18]
	0x025EE868 CMP W8, W22
	0x025EE86C B.LS 0x25EE8C0
	0x025EE870 SXTW X8, W22
	0x025EE874 ADD X9, X9, X8, 0x2, LSL
	0x025EE878 STR W23, [X9 + 0x20]
	0x025EE87C LDR X9, [X19 + 0x18]
	0x025EE880 CBZ X9, 0x25EE8BC
	0x025EE884 LDR W10, [X9 + 0x18]
	0x025EE888 CMP W10, W22
	0x025EE88C B.LS 0x25EE8C0
	0x025EE890 ADD X8, X9, X8, 0x4, LSL
	0x025EE894 STP X21, X20, [X8 + 0x20]
	0x025EE898 LDR V0, [X19 + 0x20]
	0x025EE89C MOVI V1.2S, 0x1
	0x025EE8A0 LDP X22, X21, [X31 + 0x20]
	0x025EE8A4 LDP X24, X23, [X31 + 0x10]
	0x025EE8A8 ADD S0.2S, S0.2S, S1.2S
	0x025EE8AC STR D0, [X19 + 0x20]
	0x025EE8B0 LDP X20, X19, [X31 + 0x30]
	0x025EE8B4 LDR X30, [X31], #0x40
	0x025EE8B8 RET
	0x025EE8BC BL 0x1C16F20
	0x025EE8C0 BL 0x1C16F28
	0x025EE8C4 STR X30, [X31 - 0x20]!
	0x025EE8C8 STP X20, X19, [X31 + 0x10]
	0x025EE8CC LDR X8, [X3 + 0x20]
	0x025EE8D0 MOV X20, X0
	0x025EE8D4 MOV X19, X2
	0x025EE8D8 LDR X0, [X0 + 0x10]
	0x025EE8DC LDR X8, [X8 + 0xC0]
	0x025EE8E0 LDR W2, [X20 + 0x20]
	0x025EE8E4 LDR X4, [X20 + 0x28]
	0x025EE8E8 MOV W3, W1
	0x025EE8EC LDR X8, [X8 + 0xA0]
	0x025EE8F0 MOV W1, W31
	0x025EE8F4 LDR X8, [X8 + 0x20]
	0x025EE8F8 LDR X8, [X8 + 0xC0]
	0x025EE8FC LDR X5, [X8 + 0x60]
	0x025EE900 BL 0x22D22F8
	0x025EE904 CMP W0, 0x0
	0x025EE908 CSINV W8, W0, W31, GE
	0x025EE90C TBNZ X8, 0x1F, 0x25EE934
	0x025EE910 LDR X9, [X20 + 0x18]
	0x025EE914 CBZ X9, 0x25EE94C
	0x025EE918 LDR W10, [X9 + 0x18]
	0x025EE91C CMP W8, W10
	0x025EE920 B.CS 0x25EE950
	0x025EE924 ADD X9, X9, W8, 0x4, UXTW
	0x025EE928 LDR V0, [X9 + 0x2]
	0x025EE92C STR V0, [X19]
	0x025EE930 B 0x25EE938
	0x025EE934 STP X31, X31, [X19]
	0x025EE938 LDP X20, X19, [X31 + 0x10]
	0x025EE93C ORN W8, W31, W8, 0x0
	0x025EE940 UBFM W0, W8, 0x1F, 0x1F
	0x025EE944 LDR X30, [X31], #0x20
	0x025EE948 RET
	0x025EE94C BL 0x1C16F20
	0x025EE950 BL 0x1C16F28
	0x025EE954 STR X30, [X31 - 0x30]!
	0x025EE958 STP X22, X21, [X31 + 0x10]
	0x025EE95C STP X20, X19, [X31 + 0x20]
	0x025EE960 MOV W20, W1
	0x025EE964 TBNZ X1, 0x1F, 0x25EEA00
	0x025EE968 LDR W8, [X0 + 0x20]
	0x025EE96C MOV X19, X0
	0x025EE970 CMP W8, W20
	0x025EE974 B.LE 0x25EEA00
	0x025EE978 SUB W8, W8, 0x1
	0x025EE97C SUBS W4, W8, W20
	0x025EE980 STR W8, [X19 + 0x20]
	0x025EE984 B.LE 0x25EE9C8
	0x025EE988 LDR X0, [X19 + 0x10]
	0x025EE98C ADD W21, W20, 0x1
	0x025EE990 MOV W1, W21
	0x025EE994 MOV W3, W20
	0x025EE998 MOV X2, X0
	0x025EE99C MOV X5, X31
	0x025EE9A0 BL 0x339FCE8
	0x025EE9A4 LDR W8, [X19 + 0x20]
	0x025EE9A8 LDR X0, [X19 + 0x18]
	0x025EE9AC MOV W1, W21
	0x025EE9B0 MOV W3, W20
	0x025EE9B4 SUB W4, W8, W20
	0x025EE9B8 MOV X2, X0
	0x025EE9BC MOV X5, X31
	0x025EE9C0 BL 0x339FCE8
	0x025EE9C4 LDR W8, [X19 + 0x20]
	0x025EE9C8 LDR X9, [X19 + 0x18]
	0x025EE9CC CBZ X9, 0x25EEA74
	0x025EE9D0 LDR W10, [X9 + 0x18]
	0x025EE9D4 CMP W8, W10
	0x025EE9D8 B.CS 0x25EEA78
	0x025EE9DC ADD X8, X9, W8, 0x4, SXTW
	0x025EE9E0 STP X31, X31, [X8 + 0x20]
	0x025EE9E4 LDR W8, [X19 + 0x24]
	0x025EE9E8 LDP X22, X21, [X31 + 0x10]
	0x025EE9EC ADD W8, W8, 0x1
	0x025EE9F0 STR W8, [X19 + 0x24]
	0x025EE9F4 LDP X20, X19, [X31 + 0x20]
	0x025EE9F8 LDR X30, [X31], #0x30
	0x025EE9FC RET
	0x025EEA00 STR W20, [X31 + 0xC]
	0x025EEA04 ADRP X0, 0x1B05000
	0x025EEA08 LDR X0, [X0 + 0x758]
	0x025EEA0C MOV X19, X2
	0x025EEA10 BL 0x1C16D08
	0x025EEA14 ADD X1, X31, 0xC
	0x025EEA18 BL 0x1C16E04
	0x025EEA1C MOV X20, X0
	0x025EEA20 ADRP X0, 0x1B0D000
	0x025EEA24 LDR X0, [X0 + 0x760]
	0x025EEA28 BL 0x1C16D08
	0x025EEA2C BL 0x1C16F10
	0x025EEA30 MOV X21, X0
	0x025EEA34 ADRP X0, 0x1B10000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], X30
	003 Move [X31+72], X27
	004 Move [X31+80], X26
	005 Move [X31+88], X25
	006 Move [X31+96], X24
	007 Move [X31+104], X23
	008 Move [X31+112], X22
	009 Move [X31+120], X21
	010 Move [X31+128], X20
	011 Move [X31+136], X19
	012 Move X19, X3
	013 Move [X31+40], X31
	014 Move [X31+48], X31
	015 Move [X31+56], X31
	016 Compare X1, 0
	017 JumpIfEqual {115}
	018 Move TEMP, X2
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {89}
	022 Move W8, [X1+24]
	023 Move X20, X1
	024 Subtract W8, W8, W2
	025 Move W9, [X0+32]
	026 Move X21, X0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W24, W2
	030 Move X22, X31
	031 Move X23, X31
	032 Move W25, 24
	033 Move X26, X24
	034 ShiftRight X26, 32
	035 And X26, X26, 0x7FFFFFFF
	036 Move X27, 1
	037 Move X8, [X21+16]
	038 Compare X8, 0
	039 JumpIfEqual {88}
	040 Move W9, [X8+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X9, [X21+24]
	043 Compare X9, 0
	044 JumpIfEqual {88}
	045 Move W10, [X9+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X10, [X19+32]
	048 Add X8, X8, X23
	049 Move W1, [X8+32]
	050 Add X8, X9, X22
	051 Move X10, [X10+192]
	052 Move X2, [X8+32]
	053 Move X3, [X8+40]
	054 Add X0, X31, 40
	055 Move X4, [X10+368]
	056 Call KeyValuePair`2<Int32, ValueTuple`2<Object, Int32>>..ctor, X0, X1, X2
	057 Move X8, [X31+56]
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 Add X9, X24, X23
	060 Move [X31+16], X8
	061 Move [X31], V0
	062 Move W8, [X20+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X8, [X31+16]
	065 Move V0, [X31]
	066 NotImplemented "Instruction SBFM not yet implemented."
	067 NotImplemented "Instruction MADD not yet implemented."
	068 Move [X9+48], X8
	069 Move [X9+2], V0
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 Add X23, X23, 1
	072 Add X22, X22, 16
	073 Add X26, X26, X27
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X20, [X31+128]
	076 Move X19, [X31+136]
	077 Move X22, [X31+112]
	078 Move X21, [X31+120]
	079 Move X24, [X31+96]
	080 Move X23, [X31+104]
	081 Move X26, [X31+80]
	082 Move X25, [X31+88]
	083 Move X30, [X31+64]
	084 Move X27, [X31+72]
	085 Add X31, X31, 144
	086 Return 
	087 Call 0x1C17F28
	088 Call 0x1C17F20
	089 Move [X31+36], W2
	090 Move X0, 0x1B06000
	091 Move X0, [X0+1880]
	092 Call 0x1C17D08
	093 Add X1, X31, 36
	094 Call 0x1C17E04
	095 Move X20, X0
	096 Move X0, 0x1B0E000
	097 Move X0, [X0+1888]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X21, X0
	101 Move X0, 0x1B30000
	102 Move X0, [X0+688]
	103 Call 0x1C17D08
	104 Move X22, X0
	105 Move X0, 0x1B2E000
	106 Move X0, [X0+1632]
	107 Call 0x1C17D08
	108 Move X3, X0
	109 Move X0, X21
	110 Move X1, X22
	111 Move X2, X20
	112 Move X4, X31
	113 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	114 Move X0, X21
	115 Move X0, 0x1B0B000
	116 Move X0, [X0+1320]
	117 Call 0x1C17D08
	118 Call 0x1C17F10
	119 Move X20, X0
	120 Move X0, 0x1B2E000
	121 Move X0, [X0+1600]
	122 Call 0x1C17D08
	123 Move X1, X0
	124 Move X0, X20
	125 Move X2, X31
	126 Call ArgumentNullException..ctor, X0, X1
	127 Move X0, 0x1B0E000
	128 Move X0, [X0+1400]
	129 Call 0x1C17D08
	130 Call 0x1C17F10
	131 Move X20, X0
	132 Move X0, 0x1B2F000
	133 Move X0, [X0+792]
	134 Call 0x1C17D08
	135 Move X1, X0
	136 Move X0, X20
	137 Move X2, X31
	138 Call ArgumentException..ctor, X0, X1
	139 Move X0, X20
	140 Move X1, X19
	141 Call 0x1C17DEC

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x025EEA38 LDR X0, [X0 + 0x130]
	0x025EEA3C BL 0x1C16D08
	0x025EEA40 MOV X22, X0
	0x025EEA44 ADRP X0, 0x1B2D000
	0x025EEA48 LDR X0, [X0 + 0x660]
	0x025EEA4C BL 0x1C16D08
	0x025EEA50 MOV X3, X0
	0x025EEA54 MOV X0, X21
	0x025EEA58 MOV X1, X22
	0x025EEA5C MOV X2, X20
	0x025EEA60 MOV X4, X31
	0x025EEA64 BL 0x3312C8C
	0x025EEA68 MOV X0, X21
	0x025EEA6C MOV X1, X19
	0x025EEA70 BL 0x1C16DEC
	0x025EEA74 BL 0x1C16F20
	0x025EEA78 BL 0x1C16F28
	0x025EEA7C STP X30, X21, [X31 - 0x20]!
	0x025EEA80 STP X20, X19, [X31 + 0x10]
	0x025EEA84 LDR X8, [X2 + 0x20]
	0x025EEA88 MOV X19, X0
	0x025EEA8C MOV X20, X2
	0x025EEA90 LDR X0, [X0 + 0x10]
	0x025EEA94 LDR X8, [X8 + 0xC0]
	0x025EEA98 LDR W2, [X19 + 0x20]
	0x025EEA9C LDR X4, [X19 + 0x28]
	0x025EEAA0 MOV W3, W1
	0x025EEAA4 LDR X8, [X8 + 0xA0]
	0x025EEAA8 MOV W1, W31
	0x025EEAAC LDR X8, [X8 + 0x20]
	0x025EEAB0 LDR X8, [X8 + 0xC0]
	0x025EEAB4 LDR X5, [X8 + 0x60]
	0x025EEAB8 BL 0x22D22F8
	0x025EEABC CMP W0, 0x0
	0x025EEAC0 MOV W21, W0
	0x025EEAC4 CSINV W1, W0, W31, GE
	0x025EEAC8 TBNZ X1, 0x1F, 0x25EEAE0
	0x025EEACC LDR X8, [X20 + 0x20]
	0x025EEAD0 MOV X0, X19
	0x025EEAD4 LDR X8, [X8 + 0xC0]
	0x025EEAD8 LDR X2, [X8 + 0xC8]
	0x025EEADC BL 0x25EE954
	0x025EEAE0 LDP X20, X19, [X31 + 0x10]
	0x025EEAE4 ORN W8, W31, W21, 0x0
	0x025EEAE8 UBFM W0, W8, 0x1F, 0x1F
	0x025EEAEC LDP X30, X21, [X31], #0x20
	0x025EEAF0 RET
	0x025EEAF4 STP X30, X21, [X31 - 0x20]!
	0x025EEAF8 STP X20, X19, [X31 + 0x10]
	0x025EEAFC LDR X8, [X2 + 0x20]
	0x025EEB00 MOV X21, X1
	0x025EEB04 MOV X20, X0
	0x025EEB08 MOV X0, X21
	0x025EEB0C LDR X8, [X8 + 0xC0]
	0x025EEB10 MOV X19, X2
	0x025EEB14 LDR X1, [X8 + 0x140]
	0x025EEB18 BL 0x25EEB94
	0x025EEB1C TBZ X0, 0x0, 0x25EEB80
	0x025EEB20 LDR X8, [X19 + 0x20]
	0x025EEB24 LDR X8, [X8 + 0xC0]
	0x025EEB28 LDR X1, [X8 + 0x58]
	0x025EEB2C LDRB W8, [X1 + 0x135]
	0x025EEB30 TBNZ X8, 0x0, 0x25EEB40
	0x025EEB34 MOV X0, X1
	0x025EEB38 BL 0x1C5C684
	0x025EEB3C MOV X1, X0
	0x025EEB40 CBZ X21, 0x25EEB8C
	0x025EEB44 LDR X8, [X21]
	0x025EEB48 LDR X9, [X1 + 0x40]
	0x025EEB4C MOV X0, X21
	0x025EEB50 LDR X8, [X8 + 0x40]
	0x025EEB54 CMP X8, X9
	0x025EEB58 B.NE 0x25EEB90
	0x025EEB5C BL 0x1C16E08
	0x025EEB60 LDR X8, [X19 + 0x20]
	0x025EEB64 LDR W1, [X0]
	0x025EEB68 MOV X0, X20
	0x025EEB6C LDP X20, X19, [X31 + 0x10]
	0x025EEB70 LDR X8, [X8 + 0xC0]
	0x025EEB74 LDR X2, [X8 + 0x1C0]
	0x025EEB78 LDP X30, X21, [X31], #0x20
	0x025EEB7C B 0x25EEA7C
	0x025EEB80 LDP X20, X19, [X31 + 0x10]
	0x025EEB84 LDP X30, X21, [X31], #0x20
	0x025EEB88 RET
	0x025EEB8C BL 0x1C16F20
	0x025EEB90 BL 0x1C171E0
	0x025EEB94 STR X30, [X31 - 0x20]!
	0x025EEB98 STP X20, X19, [X31 + 0x10]
	0x025EEB9C CBZ X0, 0x25EEBEC
	0x025EEBA0 MOV X19, X0
	0x025EEBA4 LDR X0, [X1 + 0x20]
	0x025EEBA8 LDRB W8, [X0 + 0x135]
	0x025EEBAC TBNZ X8, 0x0, 0x25EEBB4
	0x025EEBB0 BL 0x1C5C684
	0x025EEBB4 LDR X8, [X0 + 0xC0]
	0x025EEBB8 LDR X1, [X8 + 0x58]
	0x025EEBBC LDRB W8, [X1 + 0x135]
	0x025EEBC0 TBNZ X8, 0x0, 0x25EEBD0
	0x025EEBC4 MOV X0, X1
	0x025EEBC8 BL 0x1C5C684
	0x025EEBCC MOV X1, X0
	0x025EEBD0 MOV X0, X19
	0x025EEBD4 BL 0x1C16E00
	0x025EEBD8 LDP X20, X19, [X31 + 0x10]
	0x025EEBDC CMP X0, 0x0
	0x025EEBE0 CSET W0, NE
	0x025EEBE4 LDR X30, [X31], #0x20
	0x025EEBE8 RET
	0x025EEBEC ADRP X0, 0x1B0A000
	0x025EEBF0 LDR X0, [X0 + 0x528]
	0x025EEBF4 MOV X19, X1
	0x025EEBF8 BL 0x1C16D08
	0x025EEBFC BL 0x1C16F10
	0x025EEC00 MOV X20, X0
	0x025EEC04 ADRP X0, 0x1B2F000
	0x025EEC08 LDR X0, [X0 + 0x70]
	0x025EEC0C BL 0x1C16D08
	0x025EEC10 MOV X1, X0
	0x025EEC14 MOV X0, X20
	0x025EEC18 MOV X2, X31
	0x025EEC1C BL 0x330E100
	0x025EEC20 MOV X0, X20
	0x025EEC24 MOV X1, X19
	0x025EEC28 BL 0x1C16DEC
	0x025EEC2C STP X30, X21, [X31 - 0x20]!
	0x025EEC30 STP X20, X19, [X31 + 0x10]
	0x025EEC34 MOV X20, X1
	0x025EEC38 MOV X1, X31
	0x025EEC3C MOV X19, X0
	0x025EEC40 BL 0x33BDD8C
	0x025EEC44 LDR X8, [X20 + 0x20]
	0x025EEC48 LDR X8, [X8 + 0xC0]
	0x025EEC4C LDR X21, [X8]
	0x025EEC50 LDR X8, [X21 + 0x38]
	0x025EEC54 CBNZ X8, 0x25EEC64
	0x025EEC58 MOV X0, X21
	0x025EEC5C BL 0x1C5C6E0
	0x025EEC60 LDR X8, [X21 + 0x38]
	0x025EEC64 LDR X0, [X8 + 0x10]
	0x025EEC68 LDRB W8, [X0 + 0x135]
	0x025EEC6C TBNZ X8, 0x0, 0x25EEC74
	0x025EEC70 BL 0x1C5C684
	0x025EEC74 LDR W8, [X0 + 0xE0]
	0x025EEC78 CBNZ W8, 0x25EEC80
	0x025EEC7C BL 0x1C16DFC
	0x025EEC80 LDR X8, [X21 + 0x38]
	0x025EEC84 LDR X0, [X8 + 0x10]
	0x025EEC88 LDRB W8, [X0 + 0x135]
	0x025EEC8C TBNZ X8, 0x0, 0x25EEC94
	0x025EEC90 BL 0x1C5C684
	0x025EEC94 LDR X8, [X0 + 0xB8]
	0x025EEC98 LDR X8, [X8]
	0x025EEC9C STR X8, [X19 + 0x10]
	0x025EECA0 LDR X8, [X20 + 0x20]
	0x025EECA4 LDR X8, [X8 + 0xC0]
	0x025EECA8 LDR X21, [X8 + 0x18]
	0x025EECAC LDR X8, [X21 + 0x38]
	0x025EECB0 CBNZ X8, 0x25EECC0
	0x025EECB4 MOV X0, X21
	0x025EECB8 BL 0x1C5C6E0
	0x025EECBC LDR X8, [X21 + 0x38]
	0x025EECC0 LDR X0, [X8 + 0x10]
	0x025EECC4 LDRB W8, [X0 + 0x135]
	0x025EECC8 TBNZ X8, 0x0, 0x25EECD0
	0x025EECCC BL 0x1C5C684
	0x025EECD0 LDR W8, [X0 + 0xE0]
	0x025EECD4 CBNZ W8, 0x25EECDC
	0x025EECD8 BL 0x1C16DFC
	0x025EECDC LDR X8, [X21 + 0x38]
	0x025EECE0 LDR X0, [X8 + 0x10]
	0x025EECE4 LDRB W8, [X0 + 0x135]
	0x025EECE8 TBNZ X8, 0x0, 0x25EECF0
	0x025EECEC BL 0x1C5C684
	0x025EECF0 LDR X8, [X0 + 0xB8]
	0x025EECF4 LDR X8, [X8]
	0x025EECF8 STR W31, [X19 + 0x20]
	0x025EECFC STR X8, [X19 + 0x18]
	0x025EED00 LDR X8, [X20 + 0x20]
	0x025EED04 LDR X8, [X8 + 0xC0]
	0x025EED08 LDR X0, [X8 + 0x28]
	0x025EED0C BL 0x291DF4C
	0x025EED10 STR X0, [X19 + 0x28]
	0x025EED14 LDP X20, X19, [X31 + 0x10]
	0x025EED18 LDP X30, X21, [X31], #0x20
	0x025EED1C RET
	0x025EED20 STR X30, [X31 - 0x30]!
	0x025EED24 STP X22, X21, [X31 + 0x10]
	0x025EED28 STP X20, X19, [X31 + 0x20]
	0x025EED2C MOV W21, W1
	0x025EED30 MOV X1, X31
	0x025EED34 MOV X19, X2
	0x025EED38 MOV X20, X0
	0x025EED3C BL 0x33BDD8C
	0x025EED40 TBNZ X21, 0x1F, 0x25EEDB0
	0x025EED44 LDR X8, [X19 + 0x20]
	0x025EED48 LDR X8, [X8 + 0xC0]
	0x025EED4C LDR X0, [X8 + 0x48]
	0x025EED50 LDRB W8, [X0 + 0x135]
	0x025EED54 TBNZ X8, 0x0, 0x25EED5C
	0x025EED58 BL 0x1C5C684
	0x025EED5C MOV W1, W21
	0x025EED60 BL 0x1C16D6C
	0x025EED64 STR X0, [X20 + 0x10]
	0x025EED68 LDR X8, [X19 + 0x20]
	0x025EED6C LDR X8, [X8 + 0xC0]
	0x025EED70 LDR X0, [X8 + 0x50]
	0x025EED74 LDRB W8, [X0 + 0x135]
	0x025EED78 TBNZ X8, 0x0, 0x25EED80
	0x025EED7C BL 0x1C5C684
	0x025EED80 MOV W1, W21
	0x025EED84 BL 0x1C16D6C
	0x025EED88 STR X0, [X20 + 0x18]
	0x025EED8C LDR X8, [X19 + 0x20]
	0x025EED90 LDR X8, [X8 + 0xC0]
	0x025EED94 LDR X0, [X8 + 0x28]
	0x025EED98 BL 0x291DF4C
	0x025EED9C STR X0, [X20 + 0x28]
	0x025EEDA0 LDP X20, X19, [X31 + 0x20]
	0x025EEDA4 LDP X22, X21, [X31 + 0x10]
	0x025EEDA8 LDR X30, [X31], #0x30
	0x025EEDAC RET
	0x025EEDB0 STR W21, [X31 + 0xC]
	0x025EEDB4 ADRP X0, 0x1B05000
	0x025EEDB8 LDR X0, [X0 + 0x758]
	0x025EEDBC BL 0x1C16D08
	0x025EEDC0 ADD X1, X31, 0xC
	0x025EEDC4 BL 0x1C16E04
	0x025EEDC8 MOV X20, X0
	0x025EEDCC ADRP X0, 0x1B0D000
	0x025EEDD0 LDR X0, [X0 + 0x760]
	0x025EEDD4 BL 0x1C16D08
	0x025EEDD8 BL 0x1C16F10
	0x025EEDDC MOV X21, X0
	0x025EEDE0 ADRP X0, 0x1B2F000
	0x025EEDE4 LDR X0, [X0 + 0x58]
	0x025EEDE8 BL 0x1C16D08
	0x025EEDEC MOV X22, X0
	0x025EEDF0 ADRP X0, 0x1B2D000
	0x025EEDF4 LDR X0, [X0 + 0x670]
	0x025EEDF8 BL 0x1C16D08
	0x025EEDFC MOV X3, X0
	0x025EEE00 MOV X0, X21
	0x025EEE04 MOV X1, X22
	0x025EEE08 MOV X2, X20
	0x025EEE0C MOV X4, X31
	0x025EEE10 BL 0x3312C8C
	0x025EEE14 MOV X0, X21
	0x025EEE18 MOV X1, X19
	0x025EEE1C BL 0x1C16DEC
	0x025EEE20 STR X30, [X31 - 0x30]!
	0x025EEE24 STP X22, X21, [X31 + 0x10]
	0x025EEE28 STP X20, X19, [X31 + 0x20]
	0x025EEE2C LDR X8, [X3 + 0x20]
	0x025EEE30 MOV X21, X0
	0x025EEE34 MOV X20, X2
	0x025EEE38 LDR X0, [X0 + 0x10]
	0x025EEE3C LDR X8, [X8 + 0xC0]
	0x025EEE40 LDR W2, [X21 + 0x20]
	0x025EEE44 LDR X4, [X21 + 0x28]
	0x025EEE48 MOV W22, W1
	0x025EEE4C LDR X5, [X8 + 0x60]
	0x025EEE50 MOV X19, X3
	0x025EEE54 MOV W1, W31
	0x025EEE58 MOV W3, W22
	0x025EEE5C BL 0x22D22F8
	0x025EEE60 TBZ X0, 0x1F, 0x25EEE90
	0x025EEE64 LDR X8, [X19 + 0x20]
	0x025EEE68 ORN W1, W31, W0, 0x0
	0x025EEE6C MOV X0, X21
	0x025EEE70 MOV W2, W22
	0x025EEE74 LDR X8, [X8 + 0xC0]
	0x025EEE78 MOV X3, X20
	0x025EEE7C LDP X20, X19, [X31 + 0x20]
	0x025EEE80 LDP X22, X21, [X31 + 0x10]
	0x025EEE84 LDR X4, [X8 + 0x70]
	0x025EEE88 LDR X30, [X31], #0x30
	0x025EEE8C B 0x25F06F8
	0x025EEE90 STR W22, [X31 + 0xC]
	0x025EEE94 LDR X8, [X19 + 0x20]
	0x025EEE98 ADD X1, X31, 0xC
	0x025EEE9C LDR X8, [X8 + 0xC0]
	0x025EEEA0 LDR X0, [X8 + 0x58]
	0x025EEEA4 BL 0x1C16E04
	0x025EEEA8 MOV X20, X0
	0x025EEEAC ADRP X0, 0x1B2F000
	0x025EEEB0 LDR X0, [X0 + 0x298]
	0x025EEEB4 BL 0x1C16D08
	0x025EEEB8 MOV X1, X20
	0x025EEEBC MOV X2, X31
	0x025EEEC0 BL 0x32094D4
	0x025EEEC4 MOV X20, X0
	0x025EEEC8 ADRP X0, 0x1B0D000
	0x025EEECC LDR X0, [X0 + 0x578]
	0x025EEED0 BL 0x1C16D08
	0x025EEED4 BL 0x1C16F10
	0x025EEED8 MOV X21, X0
	0x025EEEDC ADRP X0, 0x1B2F000
	0x025EEEE0 LDR X0, [X0 + 0x70]
	0x025EEEE4 BL 0x1C16D08
	0x025EEEE8 MOV X2, X0
	0x025EEEEC MOV X0, X21
	0x025EEEF0 MOV X1, X20
	0x025EEEF4 MOV X3, X31
	0x025EEEF8 BL 0x330E16C
	0x025EEEFC MOV X0, X21
	0x025EEF00 MOV X1, X19
	0x025EEF04 BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+80], X30
	003 Move [X31+88], X27
	004 Move [X31+96], X26
	005 Move [X31+104], X25
	006 Move [X31+112], X24
	007 Move [X31+120], X23
	008 Move [X31+128], X22
	009 Move [X31+136], X21
	010 Move [X31+144], X20
	011 Move [X31+152], X19
	012 Move X21, 0x1DEC000
	013 Move W8, [X21+4040]
	014 Move X19, X3
	015 Move W22, W2
	016 Move X23, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x1B06000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+4040], W8
	027 Compare X23, 0
	028 JumpIfEqual {236}
	029 Move X0, X23
	030 Move X1, X31
	031 Call Array.get_Rank, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X23
	034 Move W1, W31
	035 Move X2, X31
	036 Call Array.GetLowerBound, X0, X1
	037 Compare W0, 0
	038 JumpIfNotEqual {255}
	039 Move TEMP, X22
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfEqual {210}
	043 Move X0, X23
	044 Move X1, X31
	045 Call Array.get_Length, X0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, X23
	048 Move X1, X31
	049 Call Array.get_Length, X0
	050 Move W8, [X20+32]
	051 Subtract W9, W0, W22
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, [X19+32]
	054 Move X8, [X8+192]
	055 Move X1, [X8+352]
	056 Move W8, [X1+309]
	057 Move TEMP, X8
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {64}
	061 Move X0, X1
	062 Call 0x1C5D684
	063 Move X1, X0
	064 Move X0, X23
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfEqual {120}
	068 Move W8, [X20+32]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W22, W22
	071 Move X21, X0
	072 Move X23, X31
	073 Move X24, X31
	074 Move W25, 24
	075 Move X26, X22
	076 ShiftRight X26, 32
	077 And X26, X26, 0x7FFFFFFF
	078 Move X27, 1
	079 Move X8, [X20+16]
	080 Compare X8, 0
	081 JumpIfEqual {201}
	082 Move W9, [X8+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X9, [X20+24]
	085 Compare X9, 0
	086 JumpIfEqual {201}
	087 Move W10, [X9+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X10, [X19+32]
	090 Add X8, X8, X24
	091 Move W1, [X8+32]
	092 Add X9, X9, X23
	093 Move X8, [X10+192]
	094 Move X2, [X9+32]
	095 Move X3, [X9+40]
	096 Move [X31+56], X31
	097 Move [X31+64], X31
	098 Move [X31+72], X31
	099 Move X4, [X8+368]
	100 Add X0, X31, 56
	101 Call KeyValuePair`2<Int32, ValueTuple`2<Object, Int32>>..ctor, X0, X1, X2
	102 Move X8, [X31+72]
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Add X9, X22, X24
	105 Move [X31+48], X8
	106 Move [X31+2], V0
	107 Move W8, [X21+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X8, [X31+48]
	110 Move V0, [X31+2]
	111 NotImplemented "Instruction SBFM not yet implemented."
	112 NotImplemented "Instruction MADD not yet implemented."
	113 Move [X9+48], X8
	114 Move [X9+2], V0
	115 NotImplemented "Instruction LDRSW not yet implemented."
	116 Add X24, X24, 1
	117 Add X23, X23, 16
	118 Add X26, X26, X27
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X8, 0x1B06000
	121 Move X8, [X8+2512]
	122 Move X0, X23
	123 Move X1, [X8]
	124 Call 0x1C17E00
	125 Compare X0, 0
	126 JumpIfEqual {290}
	127 Move W8, [X20+32]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move W25, W22
	130 Move X21, X0
	131 Move X23, X31
	132 Move X24, X31
	133 Move X26, X25
	134 ShiftRight X26, 32
	135 And X26, X26, 0x7FFFFFFF
	136 Move X27, 1
	137 Move X8, [X20+16]
	138 Compare X8, 0
	139 JumpIfEqual {203}
	140 Move W9, [X8+24]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X9, [X20+24]
	143 Compare X9, 0
	144 JumpIfEqual {204}
	145 Move W10, [X9+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X10, [X19+32]
	148 Add X8, X8, X24
	149 Move W1, [X8+32]
	150 Add X9, X9, X23
	151 Move X8, [X10+192]
	152 Move X2, [X9+32]
	153 Move X3, [X9+40]
	154 Move [X31+56], X31
	155 Move [X31+64], X31
	156 Move [X31+72], X31
	157 Move X4, [X8+368]
	158 Add X0, X31, 56
	159 Call KeyValuePair`2<Int32, ValueTuple`2<Object, Int32>>..ctor, X0, X1, X2
	160 NotImplemented "Instruction LDUR not yet implemented."
	161 Move X8, [X31+72]
	162 Move [X31], V0
	163 Move [X31+16], X8
	164 Move X8, [X19+32]
	165 Move X8, [X8+192]
	166 Move X0, [X8+120]
	167 Add X1, X31, 0
	168 Call 0x1C17E04
	169 Move X22, X0
	170 Compare X0, 0
	171 JumpIfEqual {178}
	172 Move X8, [X21]
	173 Move X1, [X8+64]
	174 Move X0, X22
	175 Call 0x1C17E00
	176 Compare X0, 0
	177 JumpIfEqual {207}
	178 Move W8, [X21+24]
	179 Add X9, X25, X24
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Add X8, X21, X26
	182 Move [X8+32], X22
	183 NotImplemented "Instruction LDRSW not yet implemented."
	184 Add X24, X24, 1
	185 Add X23, X23, 16
	186 Add X26, X26, X27
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X20, [X31+144]
	189 Move X19, [X31+152]
	190 Move X22, [X31+128]
	191 Move X21, [X31+136]
	192 Move X24, [X31+112]
	193 Move X23, [X31+120]
	194 Move X26, [X31+96]
	195 Move X25, [X31+104]
	196 Move X30, [X31+80]
	197 Move X27, [X31+88]
	198 Add X31, X31, 160
	199 Return 
	200 Call 0x1C17F28
	201 Call 0x1C17F20
	202 Call 0x1C17F28
	203 Call 0x1C17F20
	204 Call 0x1C17F20
	205 Call 0x1C17F28
	206 Call 0x1C17F28
	207 Call 0x1C17F44
	208 Move X1, X31
	209 Call 0x1C17DEC
	210 Move [X31+56], W22
	211 Move X0, 0x1B06000
	212 Move X0, [X0+1880]
	213 Call 0x1C17D08
	214 Add X1, X31, 56
	215 Call 0x1C17E04
	216 Move X20, X0
	217 Move X0, 0x1B0E000
	218 Move X0, [X0+1888]
	219 Call 0x1C17D08
	220 Call 0x1C17F10
	221 Move X21, X0
	222 Move X0, 0x1B11000
	223 Move X0, [X0+304]
	224 Call 0x1C17D08
	225 Move X22, X0
	226 Move X0, 0x1B2E000
	227 Move X0, [X0+1632]
	228 Call 0x1C17D08
	229 Move X3, X0
	230 Move X0, X21
	231 Move X1, X22
	232 Move X2, X20
	233 Move X4, X31
	234 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	235 Move X0, X21
	236 Move X0, 0x1B0B000
	237 Move X0, [X0+1320]
	238 Call 0x1C17D08
	239 Call 0x1C17F10
	240 Move X20, X0
	241 Move X0, 0x1B2E000
	242 Move X0, [X0+1600]
	243 Call 0x1C17D08
	244 Move X1, X0
	245 Move X0, X20
	246 Move X2, X31
	247 Call ArgumentNullException..ctor, X0, X1
	248 Move X0, 0x1B0E000
	249 Move X0, [X0+1400]
	250 Call 0x1C17D08
	251 Call 0x1C17F10
	252 Move X20, X0
	253 Move X0, 0x1B2F000
	254 Move X0, [X0+776]
	255 Move X0, 0x1B0E000
	256 Move X0, [X0+1400]
	257 Call 0x1C17D08
	258 Call 0x1C17F10
	259 Move X20, X0
	260 Move X0, 0x1B2F000
	261 Move X0, [X0+784]
	262 Move X0, 0x1B0E000
	263 Move X0, [X0+1400]
	264 Call 0x1C17D08
	265 Call 0x1C17F10
	266 Move X20, X0
	267 Move X0, 0x1B2F000
	268 Move X0, [X0+792]
	269 Call 0x1C17D08
	270 Move X1, X0
	271 Move X0, X20
	272 Move X2, X31
	273 Call ArgumentException..ctor, X0, X1
	274 Move X20, X0
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Move X0, X20
	277 Call 0x3EB2AD0
	278 Move X20, X0
	279 Move X0, 0x1B2F000
	280 Move X0, [X0+800]
	281 Call 0x1C17D08
	282 Move X8, [X20]
	283 Move X1, [X8]
	284 Call 0x1C18270
	285 Move TEMP, X0
	286 And TEMP, TEMP, 1
	287 Compare TEMP, 1
	288 JumpIfNotEqual {310}
	289 Call 0x3EB2AE0
	290 Move X0, 0x1B0E000
	291 Move X0, [X0+1400]
	292 Call 0x1C17D08
	293 Call 0x1C17F10
	294 Move X20, X0
	295 Move X0, 0x1B2F000
	296 Move X0, [X0+808]
	297 Call 0x1C17D08
	298 Move X21, X0
	299 Move X0, 0x1B2E000
	300 Move X0, [X0+1600]
	301 Call 0x1C17D08
	302 Move X2, X0
	303 Move X0, X20
	304 Move X1, X21
	305 Move X3, X31
	306 Call ArgumentException..ctor, X0, X1, X2
	307 Move X0, X20
	308 Move X1, X19
	309 Call 0x1C17DEC
	310 Move W0, 8
	311 Call 0x3EB2AF0
	312 Move X8, [X20]
	313 Move [X0], X8
	314 Move X1, 0x18C7000
	315 Add X1, X1, 3672
	316 Move X2, X31
	317 Call 0x3EB2B00
	318 Move X20, X0
	319 Call 0x3EB2AE0
	320 Move X0, X20
	321 Call 0x1D2D690
	322 Call 0x1991590

Method: System.Void EnsureCapacity(System.Int32 min)

Disassembly:
	0x025EEF08 LDR X8, [X3 + 0x20]
	0x025EEF0C LDR X8, [X8 + 0xC0]
	0x025EEF10 LDR X3, [X8 + 0x98]
	0x025EEF14 B 0x25EEE20
	0x025EEF18 STR X30, [X31 - 0x30]!
	0x025EEF1C STP X22, X21, [X31 + 0x10]
	0x025EEF20 STP X20, X19, [X31 + 0x20]
	0x025EEF24 LDR X8, [X3 + 0x20]
	0x025EEF28 MOV X20, X0
	0x025EEF2C MOV X19, X2
	0x025EEF30 LDR X0, [X0 + 0x10]
	0x025EEF34 LDR X8, [X8 + 0xC0]
	0x025EEF38 LDR W2, [X20 + 0x20]
	0x025EEF3C LDR X4, [X20 + 0x28]
	0x025EEF40 MOV X21, X3
	0x025EEF44 LDR X8, [X8 + 0xA0]
	0x025EEF48 MOV X3, X1
	0x025EEF4C MOV W1, W31
	0x025EEF50 LDR X8, [X8 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {25}
	005 Move X9, [X2+32]
	006 Move X8, [X8+24]
	007 Move TEMP, 0x80100000
	008 Not TEMP
	009 Move W10, TEMP
	010 Move X9, [X9+192]
	011 Move W11, W8
	012 ShiftRight W11, 31
	013 And W11, W11, 0x3FFFFFFF
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSEL not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, 4
	018 Move X2, [X9+376]
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSEL not yet implemented."
	022 Move X30, [X31+16]
	023 Call 0x25EE088, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: TValue GetByIndex(System.Int32 index)

Disassembly:
	0x025EEF54 LDR X8, [X8 + 0xC0]
	0x025EEF58 LDR X5, [X8 + 0x60]
	0x025EEF5C BL 0x22D22F8
	0x025EEF60 CMP W0, 0x0
	0x025EEF64 CSINV W22, W0, W31, GE
	0x025EEF68 TBNZ X22, 0x1F, 0x25EEFB8
	0x025EEF6C LDR X8, [X21 + 0x20]
	0x025EEF70 LDR X8, [X8 + 0xC0]
	0x025EEF74 LDR X0, [X8 + 0xA8]
	0x025EEF78 BL 0x211B0E8
	0x025EEF7C LDR X8, [X20 + 0x18]
	0x025EEF80 CBZ X8, 0x25EEFCC
	0x025EEF84 LDR W9, [X8 + 0x18]
	0x025EEF88 CMP W22, W9
	0x025EEF8C B.CS 0x25EEFD0
	0x025EEF90 CBZ X0, 0x25EEFCC
	0x025EEF94 LDR X9, [X0]
	0x025EEF98 ADD X8, X8, W22, 0x3, UXTW
	0x025EEF9C LDR X1, [X8 + 0x20]
	0x025EEFA0 MOV X2, X19
	0x025EEFA4 LDP X8, X3, [X9 + 0x1B8]
	0x025EEFA8 BLR X8
	0x025EEFAC TBZ X0, 0x0, 0x25EEFB8
	0x025EEFB0 MOVZ W0, 0x1
	0x025EEFB4 B 0x25EEFBC
	0x025EEFB8 MOV W0, W31
	0x025EEFBC LDP X20, X19, [X31 + 0x20]
	0x025EEFC0 LDP X22, X21, [X31 + 0x10]
	0x025EEFC4 LDR X30, [X31], #0x30
	0x025EEFC8 RET
	0x025EEFCC BL 0x1C16F20
	0x025EEFD0 BL 0x1C16F28
	0x025EEFD4 STR X30, [X31 - 0x30]!
	0x025EEFD8 STP X22, X21, [X31 + 0x10]
	0x025EEFDC STP X20, X19, [X31 + 0x20]
	0x025EEFE0 LDR X8, [X3 + 0x20]
	0x025EEFE4 MOV X19, X0
	0x025EEFE8 MOV X21, X2
	0x025EEFEC LDR X0, [X0 + 0x10]
	0x025EEFF0 LDR X8, [X8 + 0xC0]
	0x025EEFF4 LDR W2, [X19 + 0x20]
	0x025EEFF8 LDR X4, [X19 + 0x28]
	0x025EEFFC MOV X20, X3
	0x025EF000 LDR X8, [X8 + 0xA0]
	0x025EF004 MOV X3, X1
	0x025EF008 MOV W1, W31
	0x025EF00C LDR X8, [X8 + 0x20]
	0x025EF010 LDR X8, [X8 + 0xC0]
	0x025EF014 LDR X5, [X8 + 0x60]
	0x025EF018 BL 0x22D22F8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X1
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {27}
	010 Move W8, [X0+32]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X8, [X0+24]
	013 Compare X8, 0
	014 JumpIfEqual {56}
	015 Move W9, [X8+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W9, W1
	018 Add X8, X8, X9
	019 Move X0, [X8+32]
	020 Move X1, [X8+40]
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Return X0
	027 Move [X31+12], W1
	028 Move X0, 0x1B06000
	029 Move X0, [X0+1880]
	030 Move X19, X2
	031 Call 0x1C17D08
	032 Add X1, X31, 12
	033 Call 0x1C17E04
	034 Move X20, X0
	035 Move X0, 0x1B0E000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X21, X0
	040 Move X0, 0x1B11000
	041 Move X0, [X0+304]
	042 Call 0x1C17D08
	043 Move X22, X0
	044 Move X0, 0x1B2E000
	045 Move X0, [X0+1632]
	046 Call 0x1C17D08
	047 Move X3, X0
	048 Move X0, X21
	049 Move X1, X22
	050 Move X2, X20
	051 Move X4, X31
	052 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	053 Move X0, X21
	054 Move X1, X19
	055 Call 0x1C17DEC
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey, TValue>> GetEnumerator()

Disassembly:
	0x025EF01C CMP W0, 0x0
	0x025EF020 CSINV W22, W0, W31, GE
	0x025EF024 TBNZ X0, 0x1F, 0x25EF08C
	0x025EF028 LDR X8, [X20 + 0x20]
	0x025EF02C LDR X8, [X8 + 0xC0]
	0x025EF030 LDR X0, [X8 + 0xA8]
	0x025EF034 BL 0x211B0E8
	0x025EF038 LDR X8, [X19 + 0x18]
	0x025EF03C CBZ X8, 0x25EF0A0
	0x025EF040 LDR W9, [X8 + 0x18]
	0x025EF044 CMP W22, W9
	0x025EF048 B.CS 0x25EF0A4
	0x025EF04C CBZ X0, 0x25EF0A0
	0x025EF050 LDR X9, [X0]
	0x025EF054 ADD X8, X8, W22, 0x3, SXTW
	0x025EF058 LDR X1, [X8 + 0x20]
	0x025EF05C MOV X2, X21
	0x025EF060 LDP X8, X3, [X9 + 0x1B8]
	0x025EF064 BLR X8
	0x025EF068 TBZ X0, 0x0, 0x25EF08C
	0x025EF06C LDR X8, [X20 + 0x20]
	0x025EF070 MOV X0, X19
	0x025EF074 MOV W1, W22
	0x025EF078 LDR X8, [X8 + 0xC0]
	0x025EF07C LDR X2, [X8 + 0xC8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+96], X30
	003 Move [X31+104], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X31+64], V0
	006 Move [X31+72], V0
	007 Move [X31+3], V0
	008 Move X8, [X1+32]
	009 Move X19, X1
	010 Move X1, X0
	011 Add X0, X31, 48
	012 Move X8, [X8+192]
	013 Move W2, 1
	014 Move X3, [X8+392]
	015 Call 0x2BF1904, X0, X1, X2
	016 Move V0, [X31+48]
	017 Move V1, [X31+64]
	018 Move V2, [X31+5]
	019 Add X1, X31, 0
	020 Move [X31], V0
	021 Move [X31+8], V1
	022 Move [X31+2], V2
	023 Move X8, [X19+32]
	024 Move X8, [X8+192]
	025 Move X0, [X8+384]
	026 Call 0x1C17E04
	027 Move X30, [X31+96]
	028 Move X19, [X31+104]
	029 Add X31, X31, 112
	030 Return X0

Method: System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()

Disassembly:
	0x025EF080 BL 0x25F0880
	0x025EF084 MOVZ W0, 0x1
	0x025EF088 B 0x25EF090
	0x025EF08C MOV W0, W31
	0x025EF090 LDP X20, X19, [X31 + 0x20]
	0x025EF094 LDP X22, X21, [X31 + 0x10]
	0x025EF098 LDR X30, [X31], #0x30
	0x025EF09C RET
	0x025EF0A0 BL 0x1C16F20
	0x025EF0A4 BL 0x1C16F28
	0x025EF0A8 STR X30, [X31 - 0x30]!
	0x025EF0AC STP X22, X21, [X31 + 0x10]
	0x025EF0B0 STP X20, X19, [X31 + 0x20]
	0x025EF0B4 LDR X8, [X0 + 0x10]
	0x025EF0B8 CBZ X8, 0x25EF244
	0x025EF0BC LDR W8, [X8 + 0x18]
	0x025EF0C0 MOV W21, W1
	0x025EF0C4 CMP W8, W1
	0x025EF0C8 B.EQ 0x25EF234
	0x025EF0CC LDR W8, [X0 + 0x20]
	0x025EF0D0 MOV X20, X2
	0x025EF0D4 MOV X19, X0
	0x025EF0D8 CMP W8, W21
	0x025EF0DC B.GT 0x25EF248
	0x025EF0E0 LDR X8, [X20 + 0x20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+96], X30
	003 Move [X31+104], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X31+64], V0
	006 Move [X31+72], V0
	007 Move [X31+3], V0
	008 Move X8, [X1+32]
	009 Move X19, X1
	010 Move X1, X0
	011 Add X0, X31, 48
	012 Move X8, [X8+192]
	013 Move W2, 1
	014 Move X3, [X8+392]
	015 Call 0x2BF1904, X0, X1, X2
	016 Move V0, [X31+48]
	017 Move V1, [X31+64]
	018 Move V2, [X31+5]
	019 Add X1, X31, 0
	020 Move [X31], V0
	021 Move [X31+8], V1
	022 Move [X31+2], V2
	023 Move X8, [X19+32]
	024 Move X8, [X8+192]
	025 Move X0, [X8+384]
	026 Call 0x1C17E04
	027 Move X30, [X31+96]
	028 Move X19, [X31+104]
	029 Add X31, X31, 112
	030 Return X0

Method: System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()

Disassembly:
	0x025EF0E4 CMP W21, 0x1
	0x025EF0E8 LDR X8, [X8 + 0xC0]
	0x025EF0EC B.LT 0x25EF184
	0x025EF0F0 LDR X0, [X8 + 0x48]
	0x025EF0F4 LDRB W8, [X0 + 0x135]
	0x025EF0F8 TBNZ X8, 0x0, 0x25EF100
	0x025EF0FC BL 0x1C5C684
	0x025EF100 MOV W1, W21
	0x025EF104 BL 0x1C16D6C
	0x025EF108 LDR X8, [X20 + 0x20]
	0x025EF10C MOV X20, X0
	0x025EF110 LDR X8, [X8 + 0xC0]
	0x025EF114 LDR X8, [X8 + 0x50]
	0x025EF118 LDRB W9, [X8 + 0x135]
	0x025EF11C TBNZ X9, 0x0, 0x25EF12C
	0x025EF120 MOV X0, X8
	0x025EF124 BL 0x1C5C684
	0x025EF128 MOV X8, X0
	0x025EF12C MOV X0, X8
	0x025EF130 MOV W1, W21
	0x025EF134 BL 0x1C16D6C
	0x025EF138 LDR W4, [X19 + 0x20]
	0x025EF13C MOV X21, X0
	0x025EF140 CMP W4, 0x1
	0x025EF144 B.LT 0x25EF17C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+96], X30
	003 Move [X31+104], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X31+64], V0
	006 Move [X31+72], V0
	007 Move [X31+3], V0
	008 Move X8, [X1+32]
	009 Move X19, X1
	010 Move X1, X0
	011 Add X0, X31, 48
	012 Move X8, [X8+192]
	013 Move W2, 2
	014 Move X3, [X8+392]
	015 Call 0x2BF1904, X0, X1, X2
	016 Move V0, [X31+48]
	017 Move V1, [X31+64]
	018 Move V2, [X31+5]
	019 Add X1, X31, 0
	020 Move [X31], V0
	021 Move [X31+8], V1
	022 Move [X31+2], V2
	023 Move X8, [X19+32]
	024 Move X8, [X8+192]
	025 Move X0, [X8+384]
	026 Call 0x1C17E04
	027 Move X30, [X31+96]
	028 Move X19, [X31+104]
	029 Add X31, X31, 112
	030 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x025EF148 LDR X0, [X19 + 0x10]
	0x025EF14C MOV W1, W31
	0x025EF150 MOV X2, X20
	0x025EF154 MOV W3, W31
	0x025EF158 MOV X5, X31
	0x025EF15C BL 0x339FCE8
	0x025EF160 LDR X0, [X19 + 0x18]
	0x025EF164 LDR W4, [X19 + 0x20]
	0x025EF168 MOV W1, W31
	0x025EF16C MOV X2, X21
	0x025EF170 MOV W3, W31
	0x025EF174 MOV X5, X31
	0x025EF178 BL 0x339FCE8
	0x025EF17C STP X20, X21, [X19 + 0x10]
	0x025EF180 B 0x25EF234
	0x025EF184 LDR X21, [X8]
	0x025EF188 LDR X8, [X21 + 0x38]
	0x025EF18C CBNZ X8, 0x25EF19C
	0x025EF190 MOV X0, X21
	0x025EF194 BL 0x1C5C6E0
	0x025EF198 LDR X8, [X21 + 0x38]
	0x025EF19C LDR X0, [X8 + 0x10]
	0x025EF1A0 LDRB W8, [X0 + 0x135]
	0x025EF1A4 TBNZ X8, 0x0, 0x25EF1AC
	0x025EF1A8 BL 0x1C5C684

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+96], X30
	003 Move [X31+104], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X31+64], V0
	006 Move [X31+72], V0
	007 Move [X31+3], V0
	008 Move X8, [X1+32]
	009 Move X19, X1
	010 Move X1, X0
	011 Add X0, X31, 48
	012 Move X8, [X8+192]
	013 Move W2, 1
	014 Move X3, [X8+392]
	015 Call 0x2BF1904, X0, X1, X2
	016 Move V0, [X31+48]
	017 Move V1, [X31+64]
	018 Move V2, [X31+5]
	019 Add X1, X31, 0
	020 Move [X31], V0
	021 Move [X31+8], V1
	022 Move [X31+2], V2
	023 Move X8, [X19+32]
	024 Move X8, [X8+192]
	025 Move X0, [X8+384]
	026 Call 0x1C17E04
	027 Move X30, [X31+96]
	028 Move X19, [X31+104]
	029 Add X31, X31, 112
	030 Return X0

Method: TKey GetKey(System.Int32 index)

Disassembly:
	0x025EF1AC LDR W8, [X0 + 0xE0]
	0x025EF1B0 CBNZ W8, 0x25EF1B8
	0x025EF1B4 BL 0x1C16DFC
	0x025EF1B8 LDR X8, [X21 + 0x38]
	0x025EF1BC LDR X0, [X8 + 0x10]
	0x025EF1C0 LDRB W8, [X0 + 0x135]
	0x025EF1C4 TBNZ X8, 0x0, 0x25EF1CC
	0x025EF1C8 BL 0x1C5C684
	0x025EF1CC LDR X8, [X0 + 0xB8]
	0x025EF1D0 LDR X8, [X8]
	0x025EF1D4 STR X8, [X19 + 0x10]
	0x025EF1D8 LDR X8, [X20 + 0x20]
	0x025EF1DC LDR X8, [X8 + 0xC0]
	0x025EF1E0 LDR X20, [X8 + 0x18]
	0x025EF1E4 LDR X8, [X20 + 0x38]
	0x025EF1E8 CBNZ X8, 0x25EF1F8
	0x025EF1EC MOV X0, X20
	0x025EF1F0 BL 0x1C5C6E0
	0x025EF1F4 LDR X8, [X20 + 0x38]
	0x025EF1F8 LDR X0, [X8 + 0x10]
	0x025EF1FC LDRB W8, [X0 + 0x135]
	0x025EF200 TBNZ X8, 0x0, 0x25EF208
	0x025EF204 BL 0x1C5C684
	0x025EF208 LDR W8, [X0 + 0xE0]
	0x025EF20C CBNZ W8, 0x25EF214
	0x025EF210 BL 0x1C16DFC
	0x025EF214 LDR X8, [X20 + 0x38]
	0x025EF218 LDR X0, [X8 + 0x10]
	0x025EF21C LDRB W8, [X0 + 0x135]
	0x025EF220 TBNZ X8, 0x0, 0x25EF228
	0x025EF224 BL 0x1C5C684
	0x025EF228 LDR X8, [X0 + 0xB8]
	0x025EF22C LDR X8, [X8]
	0x025EF230 STR X8, [X19 + 0x18]
	0x025EF234 LDP X20, X19, [X31 + 0x20]
	0x025EF238 LDP X22, X21, [X31 + 0x10]
	0x025EF23C LDR X30, [X31], #0x30
	0x025EF240 RET
	0x025EF244 BL 0x1C16F20
	0x025EF248 STR W21, [X31 + 0xC]
	0x025EF24C ADRP X0, 0x1B04000
	0x025EF250 LDR X0, [X0 + 0x758]
	0x025EF254 BL 0x1C16D08
	0x025EF258 ADD X1, X31, 0xC
	0x025EF25C BL 0x1C16E04
	0x025EF260 MOV X19, X0
	0x025EF264 ADRP X0, 0x1B0C000
	0x025EF268 LDR X0, [X0 + 0x760]
	0x025EF26C BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X1
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {25}
	010 Move W8, [X0+32]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X8, [X0+16]
	013 Compare X8, 0
	014 JumpIfEqual {54}
	015 Move W9, [X8+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add X8, X8, W1
	018 Move W0, [X8+32]
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X22, [X31+16]
	022 Move X21, [X31+24]
	023 Move X30, [X31+48]
	024 Return X0
	025 Move [X31+12], W1
	026 Move X0, 0x1B05000
	027 Move X0, [X0+1880]
	028 Move X19, X2
	029 Call 0x1C17D08
	030 Add X1, X31, 12
	031 Call 0x1C17E04
	032 Move X20, X0
	033 Move X0, 0x1B0D000
	034 Move X0, [X0+1888]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X21, X0
	038 Move X0, 0x1B10000
	039 Move X0, [X0+304]
	040 Call 0x1C17D08
	041 Move X22, X0
	042 Move X0, 0x1B2D000
	043 Move X0, [X0+1632]
	044 Call 0x1C17D08
	045 Move X3, X0
	046 Move X0, X21
	047 Move X1, X22
	048 Move X2, X20
	049 Move X4, X31
	050 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	051 Move X0, X21
	052 Move X1, X19
	053 Call 0x1C17DEC
	054 Call 0x1C17F20
	055 Call 0x1C17F28

Method: TValue get_Item(TKey key)

Disassembly:
	0x025EF270 BL 0x1C16F10
	0x025EF274 MOV X21, X0
	0x025EF278 ADRP X0, 0x1B0E000
	0x025EF27C LDR X0, [X0 + 0xEC8]
	0x025EF280 BL 0x1C16D08
	0x025EF284 MOV X22, X0
	0x025EF288 ADRP X0, 0x1B2E000
	0x025EF28C LDR X0, [X0 + 0x2A0]
	0x025EF290 BL 0x1C16D08
	0x025EF294 MOV X3, X0
	0x025EF298 MOV X0, X21
	0x025EF29C MOV X1, X22
	0x025EF2A0 MOV X2, X19
	0x025EF2A4 MOV X4, X31
	0x025EF2A8 BL 0x3312C8C
	0x025EF2AC MOV X0, X21
	0x025EF2B0 MOV X1, X20
	0x025EF2B4 BL 0x1C16DEC
	0x025EF2B8 STP X30, X23, [X31 - 0x30]!
	0x025EF2BC STP X22, X21, [X31 + 0x10]
	0x025EF2C0 STP X20, X19, [X31 + 0x20]
	0x025EF2C4 MOV X19, X3
	0x025EF2C8 CBZ X1, 0x25EF3E0
	0x025EF2CC LDR X8, [X19 + 0x20]
	0x025EF2D0 MOV X22, X1
	0x025EF2D4 MOV X20, X2
	0x025EF2D8 MOV X21, X0
	0x025EF2DC LDR X8, [X8 + 0xC0]
	0x025EF2E0 LDR X1, [X8 + 0x58]
	0x025EF2E4 LDRB W8, [X1 + 0x135]
	0x025EF2E8 TBNZ X8, 0x0, 0x25EF2F8
	0x025EF2EC MOV X0, X1
	0x025EF2F0 BL 0x1C5C684
	0x025EF2F4 MOV X1, X0
	0x025EF2F8 MOV X0, X22
	0x025EF2FC BL 0x1C16E00
	0x025EF300 LDR X8, [X19 + 0x20]
	0x025EF304 LDR X8, [X8 + 0xC0]
	0x025EF308 CBZ X0, 0x25EF418
	0x025EF30C LDR X1, [X8 + 0x68]
	0x025EF310 LDRB W8, [X1 + 0x135]
	0x025EF314 TBNZ X8, 0x0, 0x25EF324
	0x025EF318 MOV X0, X1
	0x025EF31C BL 0x1C5C684
	0x025EF320 MOV X1, X0
	0x025EF324 MOV X0, X20
	0x025EF328 BL 0x1C16E00
	0x025EF32C LDR X8, [X19 + 0x20]
	0x025EF330 LDR X8, [X8 + 0xC0]
	0x025EF334 CBZ X20, 0x25EF33C
	0x025EF338 CBZ X0, 0x25EF47C
	0x025EF33C LDR X1, [X8 + 0x58]
	0x025EF340 LDRB W8, [X1 + 0x135]
	0x025EF344 TBNZ X8, 0x0, 0x25EF354
	0x025EF348 MOV X0, X1
	0x025EF34C BL 0x1C5C684
	0x025EF350 MOV X1, X0
	0x025EF354 LDR X8, [X22]
	0x025EF358 LDR X9, [X1 + 0x40]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31+12], W1
	007 Move X8, [X2+32]
	008 Move X20, X0
	009 Move X19, X2
	010 Move X0, [X0+16]
	011 Move X8, [X8+192]
	012 Move W2, [X20+32]
	013 Move X4, [X20+40]
	014 Move W3, W1
	015 Move X8, [X8+160]
	016 Move W1, W31
	017 Move X8, [X8+32]
	018 Move X8, [X8+192]
	019 Move X5, [X8+96]
	020 Call Array.BinarySearch, X0, X1, X2, X3, X4
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSINV not yet implemented."
	023 Move TEMP, X8
	024 And TEMP, TEMP, -2147483648
	025 Compare TEMP, -2147483648
	026 JumpIfEqual {42}
	027 Move X9, [X20+24]
	028 Compare X9, 0
	029 JumpIfEqual {66}
	030 Move W10, [X9+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W8, W8
	033 Add X8, X9, X8
	034 Move X0, [X8+32]
	035 Move X1, [X8+40]
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Add X31, X31, 48
	041 Return X0
	042 Move X8, [X19+32]
	043 Add X0, X31, 12
	044 Move X8, [X8+192]
	045 Move X1, [X8+408]
	046 Call Int32.ToString, X0
	047 Move X20, X0
	048 Move X0, 0x1B2F000
	049 Move X0, [X0+696]
	050 Call 0x1C17D08
	051 Move X1, X20
	052 Move X2, X31
	053 Call SR.Format, X0, X1
	054 Move X20, X0
	055 Move X0, 0x1B08000
	056 Move X0, [X0+120]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X1, X20
	060 Move X2, X31
	061 Move X21, X0
	062 Call KeyNotFoundException..ctor, X0, X1
	063 Move X0, X21
	064 Move X1, X19
	065 Call 0x1C17DEC
	066 Call 0x1C17F20
	067 Call 0x1C17F28

Method: System.Void set_Item(TKey key, TValue value)

Disassembly:
	0x025EF35C MOV X0, X22
	0x025EF360 LDR X8, [X8 + 0x40]
	0x025EF364 CMP X8, X9
	0x025EF368 B.NE 0x25EF500
	0x025EF36C BL 0x1C16E08
	0x025EF370 LDR X8, [X19 + 0x20]
	0x025EF374 LDR W22, [X0]
	0x025EF378 LDR X8, [X8 + 0xC0]
	0x025EF37C LDR X23, [X8 + 0x68]
	0x025EF380 LDRB W8, [X23 + 0x135]
	0x025EF384 TBNZ X8, 0x0, 0x25EF394
	0x025EF388 MOV X0, X23
	0x025EF38C BL 0x1C5C684
	0x025EF390 MOV X23, X0
	0x025EF394 CBZ X20, 0x25EF3B8
	0x025EF398 MOV X0, X20
	0x025EF39C MOV X1, X23
	0x025EF3A0 BL 0x1C16E00
	0x025EF3A4 MOV X2, X0
	0x025EF3A8 CBNZ X0, 0x25EF3BC
	0x025EF3AC MOV X0, X20
	0x025EF3B0 MOV X1, X23
	0x025EF3B4 BL 0x1C171E0
	0x025EF3B8 MOV X2, X31
	0x025EF3BC LDR X8, [X19 + 0x20]
	0x025EF3C0 MOV X0, X21
	0x025EF3C4 MOV W1, W22
	0x025EF3C8 LDP X20, X19, [X31 + 0x20]
	0x025EF3CC LDR X8, [X8 + 0xC0]
	0x025EF3D0 LDP X22, X21, [X31 + 0x10]
	0x025EF3D4 LDR X3, [X8 + 0x98]
	0x025EF3D8 LDP X30, X23, [X31], #0x30
	0x025EF3DC B 0x25EEE20
	0x025EF3E0 ADRP X0, 0x1B09000
	0x025EF3E4 LDR X0, [X0 + 0x528]
	0x025EF3E8 BL 0x1C16D08
	0x025EF3EC BL 0x1C16F10
	0x025EF3F0 MOV X20, X0
	0x025EF3F4 ADRP X0, 0x1B2E000
	0x025EF3F8 LDR X0, [X0 + 0x70]
	0x025EF3FC BL 0x1C16D08
	0x025EF400 MOV X1, X0
	0x025EF404 MOV X0, X20
	0x025EF408 MOV X2, X31
	0x025EF40C BL 0x330E100
	0x025EF410 MOV X0, X20
	0x025EF414 B 0x25EF4F8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+32]
	008 Move X21, X0
	009 Move X22, X4
	010 Move X20, X2
	011 Move X8, [X8+192]
	012 Move X0, [X0+16]
	013 Move W2, [X21+32]
	014 Move X4, [X21+40]
	015 Move X5, [X8+96]
	016 Move W23, W1
	017 Move X19, X3
	018 Move W1, W31
	019 Move W3, W23
	020 Call Array.BinarySearch, X0, X1, X2, X3, X4
	021 Move TEMP, X0
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {44}
	025 Move X8, [X21+24]
	026 Compare X8, 0
	027 JumpIfEqual {60}
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W9, W0
	031 Add X8, X8, X9
	032 Move [X8+32], X20
	033 Move [X8+40], X19
	034 Move W8, [X21+36]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Add W8, W8, 1
	038 Move [X21+36], W8
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Return 
	044 Move X8, [X22+32]
	045 NotImplemented "Instruction ORN not yet implemented."
	046 Move X0, X21
	047 Move X3, X20
	048 Move X8, [X8+192]
	049 Move X4, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X5, [X8+112]
	055 Move W2, W23
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Call 0x25EF7C0, X0, X1, X2, X3
	059 Return 
	060 Call 0x1C17F20
	061 Call 0x1C17F28

Method: System.Object System.Collections.IDictionary.get_Item(System.Object key)

Disassembly:
	0x025EF418 ADRP X0, 0x1B04000
	0x025EF41C LDR X20, [X8 + 0xD0]
	0x025EF420 LDR X0, [X0 + 0x6C0]
	0x025EF424 BL 0x1C16D08
	0x025EF428 BL 0x19903D0
	0x025EF42C MOV X0, X20
	0x025EF430 MOV X1, X31
	0x025EF434 BL 0x338C698
	0x025EF438 MOV X20, X0
	0x025EF43C ADRP X0, 0x1B2E000
	0x025EF440 LDR X0, [X0 + 0x2A8]
	0x025EF444 BL 0x1C16D08
	0x025EF448 MOV X1, X22
	0x025EF44C MOV X2, X20
	0x025EF450 MOV X3, X31
	0x025EF454 BL 0x320A264
	0x025EF458 MOV X20, X0
	0x025EF45C ADRP X0, 0x1B0C000
	0x025EF460 LDR X0, [X0 + 0x578]
	0x025EF464 BL 0x1C16D08
	0x025EF468 BL 0x1C16F10
	0x025EF46C MOV X21, X0
	0x025EF470 ADRP X0, 0x1B2E000
	0x025EF474 LDR X0, [X0 + 0x70]
	0x025EF478 B 0x25EF4DC
	0x025EF47C ADRP X0, 0x1B04000
	0x025EF480 LDR X21, [X8 + 0xD8]
	0x025EF484 LDR X0, [X0 + 0x6C0]
	0x025EF488 BL 0x1C16D08
	0x025EF48C BL 0x19903D0
	0x025EF490 MOV X0, X21
	0x025EF494 MOV X1, X31
	0x025EF498 BL 0x338C698
	0x025EF49C MOV X21, X0
	0x025EF4A0 ADRP X0, 0x1B2E000
	0x025EF4A4 LDR X0, [X0 + 0x2A8]
	0x025EF4A8 BL 0x1C16D08
	0x025EF4AC MOV X1, X20
	0x025EF4B0 MOV X2, X21
	0x025EF4B4 MOV X3, X31
	0x025EF4B8 BL 0x320A264
	0x025EF4BC MOV X20, X0
	0x025EF4C0 ADRP X0, 0x1B0C000
	0x025EF4C4 LDR X0, [X0 + 0x578]
	0x025EF4C8 BL 0x1C16D08
	0x025EF4CC BL 0x1C16F10
	0x025EF4D0 MOV X21, X0
	0x025EF4D4 ADRP X0, 0x1B0E000
	0x025EF4D8 LDR X0, [X0 + 0xEC8]
	0x025EF4DC BL 0x1C16D08
	0x025EF4E0 MOV X2, X0
	0x025EF4E4 MOV X0, X21
	0x025EF4E8 MOV X1, X20
	0x025EF4EC MOV X3, X31
	0x025EF4F0 BL 0x330E16C
	0x025EF4F4 MOV X0, X21
	0x025EF4F8 MOV X1, X19
	0x025EF4FC BL 0x1C16DEC
	0x025EF500 BL 0x1C171E0
	0x025EF504 LDR W0, [X0 + 0x20]
	0x025EF508 RET
	0x025EF50C LDR X8, [X1 + 0x20]
	0x025EF510 LDR X8, [X8 + 0xC0]
	0x025EF514 LDR X1, [X8 + 0xE0]
	0x025EF518 B 0x25EF56C
	0x025EF51C LDR X8, [X1 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X21, X1
	008 Move X20, X0
	009 Move X0, X21
	010 Move X8, [X8+192]
	011 Move X19, X2
	012 Move X1, [X8+320]
	013 Call 0x25EFB94, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {71}
	018 Move X8, [X19+32]
	019 Move X8, [X8+192]
	020 Move X1, [X8+88]
	021 Move W8, [X1+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {29}
	026 Move X0, X1
	027 Call 0x1C5D684
	028 Move X1, X0
	029 Compare X21, 0
	030 JumpIfEqual {78}
	031 Move X8, [X21]
	032 Move X9, [X1+64]
	033 Move X0, X21
	034 Move X8, [X8+64]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Call 0x1C17E08
	037 Move X8, [X19+32]
	038 Move W3, [X0]
	039 Move X0, [X20+16]
	040 Move W2, [X20+32]
	041 Move X8, [X8+192]
	042 Move X4, [X20+40]
	043 Move W1, W31
	044 Move X8, [X8+160]
	045 Move X8, [X8+32]
	046 Move X8, [X8+192]
	047 Move X5, [X8+96]
	048 Call Array.BinarySearch, X0, X1, X2, X3, X4
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSINV not yet implemented."
	051 Move TEMP, X0
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfEqual {71}
	055 Move X9, [X20+24]
	056 Compare X9, 0
	057 JumpIfEqual {78}
	058 Move W10, [X9+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X8, W8
	061 Add X8, X9, X8
	062 Move X9, [X8+32]
	063 Move X8, [X8+40]
	064 Add X1, X31, 0
	065 Move [X31], X9
	066 Move [X31+8], X8
	067 Move X8, [X19+32]
	068 Move X8, [X8+192]
	069 Move X0, [X8+104]
	070 Call 0x1C17E04
	071 Move X0, X31
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X30, [X31+16]
	075 Move X21, [X31+24]
	076 Add X31, X31, 48
	077 Return X0
	078 Call 0x1C17F20
	079 Call 0x1C181E0
	080 Call 0x1C17F28

Method: System.Void System.Collections.IDictionary.set_Item(System.Object key, System.Object value)

Disassembly:
	0x025EF520 LDR X8, [X8 + 0xC0]
	0x025EF524 LDR X1, [X8 + 0xE0]
	0x025EF528 B 0x25EF56C
	0x025EF52C LDR X8, [X1 + 0x20]
	0x025EF530 LDR X8, [X8 + 0xC0]
	0x025EF534 LDR X1, [X8 + 0xE0]
	0x025EF538 B 0x25EF56C
	0x025EF53C LDR X8, [X1 + 0x20]
	0x025EF540 LDR X8, [X8 + 0xC0]
	0x025EF544 LDR X1, [X8 + 0x100]
	0x025EF548 B 0x25EF5CC
	0x025EF54C LDR X8, [X1 + 0x20]
	0x025EF550 LDR X8, [X8 + 0xC0]
	0x025EF554 LDR X1, [X8 + 0x100]
	0x025EF558 B 0x25EF5CC
	0x025EF55C LDR X8, [X1 + 0x20]
	0x025EF560 LDR X8, [X8 + 0xC0]
	0x025EF564 LDR X1, [X8 + 0x100]
	0x025EF568 B 0x25EF5CC
	0x025EF56C STP X30, X21, [X31 - 0x20]!
	0x025EF570 STP X20, X19, [X31 + 0x10]
	0x025EF574 LDR X21, [X0 + 0x30]
	0x025EF578 CBNZ X21, 0x25EF5BC
	0x025EF57C LDR X8, [X1 + 0x20]
	0x025EF580 MOV X19, X0
	0x025EF584 MOV X20, X1
	0x025EF588 LDR X8, [X8 + 0xC0]
	0x025EF58C LDR X0, [X8 + 0xE8]
	0x025EF590 LDRB W8, [X0 + 0x135]
	0x025EF594 TBNZ X8, 0x0, 0x25EF59C
	0x025EF598 BL 0x1C5C684
	0x025EF59C BL 0x1C16F10
	0x025EF5A0 LDR X8, [X20 + 0x20]
	0x025EF5A4 MOV X1, X19
	0x025EF5A8 MOV X21, X0
	0x025EF5AC LDR X8, [X8 + 0xC0]
	0x025EF5B0 LDR X2, [X8 + 0x120]
	0x025EF5B4 BL 0x2EDB154
	0x025EF5B8 STR X21, [X19 + 0x30]
	0x025EF5BC LDP X20, X19, [X31 + 0x10]
	0x025EF5C0 MOV X0, X21
	0x025EF5C4 LDP X30, X21, [X31], #0x20
	0x025EF5C8 RET
	0x025EF5CC STP X30, X21, [X31 - 0x20]!
	0x025EF5D0 STP X20, X19, [X31 + 0x10]
	0x025EF5D4 LDR X21, [X0 + 0x38]
	0x025EF5D8 CBNZ X21, 0x25EF61C
	0x025EF5DC LDR X8, [X1 + 0x20]
	0x025EF5E0 MOV X19, X0
	0x025EF5E4 MOV X20, X1
	0x025EF5E8 LDR X8, [X8 + 0xC0]
	0x025EF5EC LDR X0, [X8 + 0x108]
	0x025EF5F0 LDRB W8, [X0 + 0x135]
	0x025EF5F4 TBNZ X8, 0x0, 0x25EF5FC
	0x025EF5F8 BL 0x1C5C684
	0x025EF5FC BL 0x1C16F10
	0x025EF600 LDR X8, [X20 + 0x20]
	0x025EF604 MOV X1, X19
	0x025EF608 MOV X21, X0
	0x025EF60C LDR X8, [X8 + 0xC0]
	0x025EF610 LDR X2, [X8 + 0x128]
	0x025EF614 BL 0x278BFC8
	0x025EF618 STR X21, [X19 + 0x38]
	0x025EF61C LDP X20, X19, [X31 + 0x10]
	0x025EF620 MOV X0, X21
	0x025EF624 LDP X30, X21, [X31], #0x20
	0x025EF628 RET
	0x025EF62C MOV W0, W31
	0x025EF630 RET
	0x025EF634 MOV W0, W31
	0x025EF638 RET
	0x025EF63C STR X30, [X31 - 0x20]!
	0x025EF640 STP X20, X19, [X31 + 0x10]
	0x025EF644 ADRP X20, 0x1DEA000
	0x025EF648 LDRB W8, [X20 + 0xFC9]
	0x025EF64C MOV X19, X0
	0x025EF650 TBNZ X8, 0x0, 0x25EF668
	0x025EF654 ADRP X0, 0x1B0A000
	0x025EF658 LDR X0, [X0 + 0xCC0]
	0x025EF65C BL 0x1C16CF4
	0x025EF660 MOVZ W8, 0x1
	0x025EF664 STRB W8, [X20 + 0xFC9]
	0x025EF668 LDR X0, [X19 + 0x40]!
	0x025EF66C CBNZ X0, 0x25EF6A4
	0x025EF670 ADRP X8, 0x1B0A000
	0x025EF674 LDR X8, [X8 + 0xCC0]
	0x025EF678 LDR X0, [X8]
	0x025EF67C BL 0x1C16F10
	0x025EF680 MOV X1, X31
	0x025EF684 MOV X20, X0
	0x025EF688 BL 0x33BDD8C
	0x025EF68C MOV X0, X19
	0x025EF690 MOV X1, X20
	0x025EF694 MOV X2, X31
	0x025EF698 MOV X3, X31
	0x025EF69C BL 0x33EB118
	0x025EF6A0 LDR X0, [X19]
	0x025EF6A4 LDP X20, X19, [X31 + 0x10]
	0x025EF6A8 LDR X30, [X31], #0x20
	0x025EF6AC RET
	0x025EF6B0 STP X30, X19, [X31 - 0x10]!
	0x025EF6B4 MOV X19, X0
	0x025EF6B8 LDR W8, [X0 + 0x24]
	0x025EF6BC LDR X0, [X0 + 0x18]
	0x025EF6C0 LDR W2, [X19 + 0x20]
	0x025EF6C4 MOV W1, W31
	0x025EF6C8 ADD W8, W8, 0x1
	0x025EF6CC MOV X3, X31
	0x025EF6D0 STR W8, [X19 + 0x24]
	0x025EF6D4 BL 0x339FA34
	0x025EF6D8 STR W31, [X19 + 0x20]
	0x025EF6DC LDP X30, X19, [X31], #0x10
	0x025EF6E0 RET
	0x025EF6E4 STP X30, X21, [X31 - 0x20]!
	0x025EF6E8 STP X20, X19, [X31 + 0x10]
	0x025EF6EC LDR X8, [X2 + 0x20]
	0x025EF6F0 MOV X21, X1
	0x025EF6F4 MOV X19, X0
	0x025EF6F8 MOV X0, X21
	0x025EF6FC LDR X8, [X8 + 0xC0]
	0x025EF700 MOV X20, X2
	0x025EF704 LDR X1, [X8 + 0x140]
	0x025EF708 BL 0x25F0AC0
	0x025EF70C TBZ X0, 0x0, 0x25EF798
	0x025EF710 LDR X8, [X20 + 0x20]
	0x025EF714 LDR X8, [X8 + 0xC0]
	0x025EF718 LDR X1, [X8 + 0x58]
	0x025EF71C LDRB W8, [X1 + 0x135]
	0x025EF720 TBNZ X8, 0x0, 0x25EF730
	0x025EF724 MOV X0, X1
	0x025EF728 BL 0x1C5C684
	0x025EF72C MOV X1, X0
	0x025EF730 CBZ X21, 0x25EF7A8
	0x025EF734 LDR X8, [X21]
	0x025EF738 LDR X9, [X1 + 0x40]
	0x025EF73C MOV X0, X21
	0x025EF740 LDR X8, [X8 + 0x40]
	0x025EF744 CMP X8, X9
	0x025EF748 B.NE 0x25EF7AC
	0x025EF74C BL 0x1C16E08
	0x025EF750 LDR X8, [X20 + 0x20]
	0x025EF754 LDR W3, [X0]
	0x025EF758 LDR X0, [X19 + 0x10]
	0x025EF75C LDR W2, [X19 + 0x20]
	0x025EF760 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X22, X1
	008 Move X21, X0
	009 Move X0, X22
	010 Move X8, [X8+192]
	011 Move X19, X3
	012 Move X20, X2
	013 Move X1, [X8+320]
	014 Call 0x25EFB94, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {72}
	019 Compare X20, 0
	020 JumpIfEqual {79}
	021 Move X8, [X19+32]
	022 Move X8, [X8+192]
	023 Move X1, [X8+88]
	024 Move W8, [X1+309]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {32}
	029 Move X0, X1
	030 Call 0x1C5D684
	031 Move X1, X0
	032 Compare X22, 0
	033 JumpIfEqual {94}
	034 Move X8, [X22]
	035 Move X9, [X1+64]
	036 Move X0, X22
	037 Move X8, [X8+64]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Call 0x1C17E08
	040 Move X8, [X19+32]
	041 Move W22, [X0]
	042 Move X8, [X8+192]
	043 Move X1, [X8+104]
	044 Move W8, [X1+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {52}
	049 Move X0, X1
	050 Call 0x1C5D684
	051 Move X1, X0
	052 Move X8, [X20]
	053 Move X9, [X1+64]
	054 Move X8, [X8+64]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X20
	057 Call 0x1C17E08
	058 Move X8, [X19+32]
	059 Move X2, [X0]
	060 Move X3, [X0+8]
	061 Move X8, [X8+192]
	062 Move X4, [X8+416]
	063 Move X0, X21
	064 Move W1, W22
	065 Call 0x25EF35C, X0, X1, X2
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return 
	072 Move X0, 0x1B0A000
	073 Move X0, [X0+1320]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X20, X0
	077 Move X0, 0x1B2F000
	078 Move X0, [X0+112]
	079 Move X0, 0x1B0A000
	080 Move X0, [X0+1320]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X20, X0
	084 Move X0, 0x1B0F000
	085 Move X0, [X0+3784]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Move X2, X31
	090 Call ArgumentNullException..ctor, X0, X1
	091 Move X0, X20
	092 Move X1, X19
	093 Call 0x1C17DEC
	094 Call 0x1C17F20
	095 Call 0x1C181E0
	096 Move X0, X20
	097 Call 0x1C181E0
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X21, X0
	100 Move X0, X21
	101 Call 0x3EB2AD0
	102 Move X21, X0
	103 Move X0, 0x1B0D000
	104 Move X0, [X0+3080]
	105 Call 0x1C17D08
	106 Move X8, [X21]
	107 Move X1, [X8]
	108 Call 0x1C18270
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {147}
	113 Call 0x3EB2AE0
	114 Move X8, [X19+32]
	115 Move X0, 0x1B05000
	116 Move X8, [X8+192]
	117 Move X21, [X8+216]
	118 Move X0, [X0+1728]
	119 Call 0x1C17D08
	120 Call 0x19913D0
	121 Move X0, X21
	122 Move X1, X31
	123 Call Type.GetTypeFromHandle, X0
	124 Move X21, X0
	125 Move X0, 0x1B2F000
	126 Move X0, [X0+680]
	127 Call 0x1C17D08
	128 Move X1, X20
	129 Move X2, X21
	130 Move X3, X31
	131 Call SR.Format, X0, X1, X2
	132 Move X20, X0
	133 Move X0, 0x1B0D000
	134 Move X0, [X0+1400]
	135 Call 0x1C17D08
	136 Call 0x1C17F10
	137 Move X21, X0
	138 Move X0, 0x1B0F000
	139 Move X0, [X0+3784]
	140 Call 0x1C17D08
	141 Move X2, X0
	142 Move X0, X21
	143 Move X1, X20
	144 Move X3, X31
	145 Call ArgumentException..ctor, X0, X1, X2
	146 Move X0, X21
	147 Move W0, 8
	148 Call 0x3EB2AF0
	149 Move X8, [X21]
	150 Move [X0], X8
	151 Move X1, 0x18C6000
	152 Add X1, X1, 3672
	153 Move X2, X31
	154 Call 0x3EB2B00
	155 Move X21, X0
	156 Call 0x3EB2AE0
	157 Move X0, X21
	158 Call 0x1D2D690
	159 Call 0x1991590

Method: System.Int32 IndexOfKey(TKey key)

Disassembly:
	0x025EF764 LDR X4, [X19 + 0x28]
	0x025EF768 MOV W1, W31
	0x025EF76C LDR X8, [X8 + 0x150]
	0x025EF770 LDR X8, [X8 + 0x20]
	0x025EF774 LDR X8, [X8 + 0xC0]
	0x025EF778 LDR X8, [X8 + 0xA0]
	0x025EF77C LDR X8, [X8 + 0x20]
	0x025EF780 LDR X8, [X8 + 0xC0]
	0x025EF784 LDR X5, [X8 + 0x60]
	0x025EF788 BL 0x22D22F8
	0x025EF78C ORN W8, W31, W0, 0x0
	0x025EF790 UBFM W0, W8, 0x1F, 0x1F
	0x025EF794 B 0x25EF79C
	0x025EF798 MOV W0, W31
	0x025EF79C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X2+32]
	003 Move W2, [X0+32]
	004 Move X4, [X0+40]
	005 Move W3, W1
	006 Move X9, [X8+192]
	007 Move X8, [X0+16]
	008 Move W1, W31
	009 Move X5, [X9+96]
	010 Move X0, X8
	011 Call Array.BinarySearch, X0, X1, X2, X3, X4
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSINV not yet implemented."
	014 Move X30, [X31+16]
	015 Return X0

Method: System.Int32 IndexOfValue(TValue value)

Disassembly:
	0x025EF7A0 LDP X30, X21, [X31], #0x20
	0x025EF7A4 RET
	0x025EF7A8 BL 0x1C16F20
	0x025EF7AC BL 0x1C171E0
	0x025EF7B0 STR X30, [X31 - 0x10]!
	0x025EF7B4 LDR X8, [X2 + 0x20]
	0x025EF7B8 LDR W2, [X0 + 0x20]
	0x025EF7BC LDR X4, [X0 + 0x28]

ISIL:
	001 Move X8, [X3+32]
	002 Move W4, [X0+32]
	003 Move W3, W31
	004 Move X9, [X8+192]
	005 Move X8, [X0+24]
	006 Move X5, [X9+424]
	007 Move X0, X8
	008 Call Array.IndexOf, X0, X1, X2, X3
	009 Return X0

Method: System.Void Insert(System.Int32 index, TKey key, TValue value)

Disassembly:
	0x025EF7C0 MOV W3, W1
	0x025EF7C4 LDR X8, [X8 + 0xC0]
	0x025EF7C8 MOV W1, W31
	0x025EF7CC LDR X8, [X8 + 0xA0]
	0x025EF7D0 LDR X8, [X8 + 0x20]
	0x025EF7D4 LDR X9, [X8 + 0xC0]
	0x025EF7D8 LDR X8, [X0 + 0x10]
	0x025EF7DC LDR X5, [X9 + 0x60]
	0x025EF7E0 MOV X0, X8
	0x025EF7E4 BL 0x22D22F8
	0x025EF7E8 ORN W8, W31, W0, 0x0
	0x025EF7EC UBFM W0, W8, 0x1F, 0x1F
	0x025EF7F0 LDR X30, [X31], #0x10
	0x025EF7F4 RET
	0x025EF7F8 STR X30, [X31 - 0x10]!
	0x025EF7FC LDR X8, [X2 + 0x20]
	0x025EF800 LDR W3, [X0 + 0x20]
	0x025EF804 MOV W2, W31
	0x025EF808 LDR X8, [X8 + 0xC0]
	0x025EF80C LDR X8, [X8 + 0x158]
	0x025EF810 LDR X8, [X8 + 0x20]
	0x025EF814 LDR X9, [X8 + 0xC0]
	0x025EF818 LDR X8, [X0 + 0x18]
	0x025EF81C LDR X4, [X9 + 0x1A8]
	0x025EF820 MOV X0, X8
	0x025EF824 BL 0x22EEBA4
	0x025EF828 ORN W8, W31, W0, 0x0
	0x025EF82C UBFM W0, W8, 0x1F, 0x1F
	0x025EF830 LDR X30, [X31], #0x10
	0x025EF834 RET
	0x025EF838 SUB X31, X31, 0x60
	0x025EF83C STP X30, X25, [X31 + 0x20]
	0x025EF840 STP X24, X23, [X31 + 0x30]
	0x025EF844 STP X22, X21, [X31 + 0x40]
	0x025EF848 STP X20, X19, [X31 + 0x50]
	0x025EF84C MOV X19, X3
	0x025EF850 STP X31, X31, [X31 + 0x10]
	0x025EF854 CBZ X1, 0x25EF99C
	0x025EF858 TBNZ X2, 0x1F, 0x25EF930
	0x025EF85C LDR W8, [X1 + 0x18]
	0x025EF860 MOV X20, X1
	0x025EF864 SUBS W8, W8, W2
	0x025EF868 B.LT 0x25EF930
	0x025EF86C LDR W9, [X0 + 0x20]
	0x025EF870 MOV X21, X0
	0x025EF874 CMP W8, W9
	0x025EF878 B.LT 0x25EF9D0
	0x025EF87C CMP W9, 0x1
	0x025EF880 B.LT 0x25EF910
	0x025EF884 MOV W23, W2
	0x025EF888 MOV X22, X31
	0x025EF88C UBFM X24, X23, 0x20, 0x1F
	0x025EF890 MOVZ X25, 0x1
	0x025EF894 LDR X8, [X21 + 0x10]
	0x025EF898 CBZ X8, 0x25EF92C
	0x025EF89C LDR W9, [X8 + 0x18]
	0x025EF8A0 CMP X22, X9
	0x025EF8A4 B.CS 0x25EF928
	0x025EF8A8 LDR X9, [X21 + 0x18]
	0x025EF8AC CBZ X9, 0x25EF92C
	0x025EF8B0 LDR W10, [X9 + 0x18]
	0x025EF8B4 CMP X22, X10
	0x025EF8B8 B.CS 0x25EF928
	0x025EF8BC LDR X10, [X19 + 0x20]
	0x025EF8C0 ADD X8, X8, X22, 0x2, LSL

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X9, [X0+16]
	009 Compare X9, 0
	010 JumpIfEqual {70}
	011 Move W8, [X0+32]
	012 Move W9, [X9+24]
	013 Move X20, X4
	014 Move X21, X3
	015 Move W23, W2
	016 Move X19, X0
	017 Move W22, W1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X9, [X5+32]
	020 Add W1, W8, 1
	021 Move X0, X19
	022 Move X9, [X9+192]
	023 Move X2, [X9+432]
	024 Call 0x25EEF08, X0, X1
	025 Move W8, [X19+32]
	026 Subtract W4, W8, W22
	027 Move X0, [X19+16]
	028 Add W24, W22, 1
	029 Move W1, W22
	030 Move W3, W24
	031 Move X2, X0
	032 Move X5, X31
	033 Call Array.Copy, X0, X1, X2, X3, X4
	034 Move W8, [X19+32]
	035 Move X0, [X19+24]
	036 Move W1, W22
	037 Move W3, W24
	038 Subtract W4, W8, W22
	039 Move X2, X0
	040 Move X5, X31
	041 Call Array.Copy, X0, X1, X2, X3, X4
	042 Move X9, [X19+16]
	043 Compare X9, 0
	044 JumpIfEqual {70}
	045 Move W8, [X9+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, W22
	048 Add X9, X9, X8
	049 Move [X9+32], W23
	050 Move X9, [X19+24]
	051 Compare X9, 0
	052 JumpIfEqual {70}
	053 Move W10, [X9+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Add X8, X9, X8
	056 Move [X8+32], X21
	057 Move [X8+40], X20
	058 Move V0, [X19+32]
	059 NotImplemented "Instruction MOVI not yet implemented."
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Add S0, S0, S1
	065 Move [X19+32], D0
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X30, [X31+64]
	069 Return 
	070 Call 0x1C17F20
	071 Call 0x1C17F28

Method: System.Boolean TryGetValue(TKey key, out TValue value)

Disassembly:
	0x025EF8C4 LDR W1, [X8 + 0x20]
	0x025EF8C8 ADD X8, X9, X22, 0x3, LSL
	0x025EF8CC LDR X10, [X10 + 0xC0]
	0x025EF8D0 LDR X2, [X8 + 0x20]
	0x025EF8D4 ADD X0, X31, 0x10
	0x025EF8D8 LDR X3, [X10 + 0x170]
	0x025EF8DC BL 0x2EDF4D4
	0x025EF8E0 LDR W8, [X20 + 0x18]
	0x025EF8E4 ADD X9, X23, X22
	0x025EF8E8 CMP X9, X8
	0x025EF8EC B.CS 0x25EF928
	0x025EF8F0 LDR V0, [X31 + 0x1]
	0x025EF8F4 ADD X8, X20, X24, 0x1C, ASR
	0x025EF8F8 ADD X22, X22, 0x1
	0x025EF8FC ADD X24, X24, X25
	0x025EF900 STR V0, [X8 + 0x2]
	0x025EF904 LDRSW X8, [X21 + 0x20]
	0x025EF908 CMP X22, X8
	0x025EF90C B.LT 0x25EF894
	0x025EF910 LDP X20, X19, [X31 + 0x50]
	0x025EF914 LDP X22, X21, [X31 + 0x40]
	0x025EF918 LDP X24, X23, [X31 + 0x30]
	0x025EF91C LDP X30, X25, [X31 + 0x20]
	0x025EF920 ADD X31, X31, 0x60
	0x025EF924 RET
	0x025EF928 BL 0x1C16F28
	0x025EF92C BL 0x1C16F20
	0x025EF930 STR W2, [X31 + 0xC]
	0x025EF934 ADRP X0, 0x1B04000
	0x025EF938 LDR X0, [X0 + 0x758]
	0x025EF93C BL 0x1C16D08
	0x025EF940 ADD X1, X31, 0xC
	0x025EF944 BL 0x1C16E04
	0x025EF948 MOV X20, X0
	0x025EF94C ADRP X0, 0x1B0C000
	0x025EF950 LDR X0, [X0 + 0x760]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X3+32]
	005 Move X20, X0
	006 Move X19, X2
	007 Move X0, [X0+16]
	008 Move X8, [X8+192]
	009 Move W2, [X20+32]
	010 Move X4, [X20+40]
	011 Move W3, W1
	012 Move X8, [X8+160]
	013 Move W1, W31
	014 Move X8, [X8+32]
	015 Move X8, [X8+192]
	016 Move X5, [X8+96]
	017 Call Array.BinarySearch, X0, X1, X2, X3, X4
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSINV not yet implemented."
	020 Move TEMP, X8
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {32}
	024 Move X9, [X20+24]
	025 Compare X9, 0
	026 JumpIfEqual {42}
	027 Move W10, [X9+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add X9, X9, W8
	030 Move V0, [X9+2]
	031 Move [X19], V0
	032 Move [X19], X31
	033 Move [X19+8], X31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 NotImplemented "Instruction ORN not yet implemented."
	037 Move W0, W8
	038 ShiftRight W0, 31
	039 And W0, W0, 0x7FFFFFFF
	040 Move X30, [X31+32]
	041 Return X0
	042 Call 0x1C17F20
	043 Call 0x1C17F28

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x025EF954 BL 0x1C16D08
	0x025EF958 BL 0x1C16F10
	0x025EF95C MOV X21, X0
	0x025EF960 ADRP X0, 0x1B2E000
	0x025EF964 LDR X0, [X0 + 0x2B0]
	0x025EF968 BL 0x1C16D08
	0x025EF96C MOV X22, X0
	0x025EF970 ADRP X0, 0x1B2C000
	0x025EF974 LDR X0, [X0 + 0x660]
	0x025EF978 BL 0x1C16D08
	0x025EF97C MOV X3, X0
	0x025EF980 MOV X0, X21
	0x025EF984 MOV X1, X22
	0x025EF988 MOV X2, X20
	0x025EF98C MOV X4, X31
	0x025EF990 BL 0x3312C8C
	0x025EF994 MOV X0, X21
	0x025EF998 B 0x25EFA04
	0x025EF99C ADRP X0, 0x1B09000
	0x025EF9A0 LDR X0, [X0 + 0x528]
	0x025EF9A4 BL 0x1C16D08
	0x025EF9A8 BL 0x1C16F10
	0x025EF9AC MOV X20, X0
	0x025EF9B0 ADRP X0, 0x1B2C000
	0x025EF9B4 LDR X0, [X0 + 0x640]
	0x025EF9B8 BL 0x1C16D08
	0x025EF9BC MOV X1, X0
	0x025EF9C0 MOV X0, X20
	0x025EF9C4 MOV X2, X31
	0x025EF9C8 BL 0x330E100
	0x025EF9CC B 0x25EFA00
	0x025EF9D0 ADRP X0, 0x1B0C000
	0x025EF9D4 LDR X0, [X0 + 0x578]
	0x025EF9D8 BL 0x1C16D08
	0x025EF9DC BL 0x1C16F10
	0x025EF9E0 MOV X20, X0
	0x025EF9E4 ADRP X0, 0x1B2D000
	0x025EF9E8 LDR X0, [X0 + 0x318]
	0x025EF9EC BL 0x1C16D08
	0x025EF9F0 MOV X1, X0
	0x025EF9F4 MOV X0, X20
	0x025EF9F8 MOV X2, X31
	0x025EF9FC BL 0x3314A68
	0x025EFA00 MOV X0, X20
	0x025EFA04 MOV X1, X19
	0x025EFA08 BL 0x1C16DEC
	0x025EFA0C SUB X31, X31, 0x70
	0x025EFA10 STR X30, [X31 + 0x20]
	0x025EFA14 STP X26, X25, [X31 + 0x30]
	0x025EFA18 STP X24, X23, [X31 + 0x40]
	0x025EFA1C STP X22, X21, [X31 + 0x50]
	0x025EFA20 STP X20, X19, [X31 + 0x60]
	0x025EFA24 ADRP X23, 0x1DEA000
	0x025EFA28 LDRB W8, [X23 + 0xFCA]
	0x025EFA2C MOV X19, X3
	0x025EFA30 MOV W22, W2
	0x025EFA34 MOV X21, X1
	0x025EFA38 MOV X20, X0
	0x025EFA3C TBNZ X8, 0x0, 0x25EFA54
	0x025EFA40 ADRP X0, 0x1B04000
	0x025EFA44 LDR X0, [X0 + 0x9D0]
	0x025EFA48 BL 0x1C16CF4
	0x025EFA4C MOVZ W8, 0x1
	0x025EFA50 STRB W8, [X23 + 0xFCA]
	0x025EFA54 CBZ X21, 0x25EFD20
	0x025EFA58 MOV X0, X21
	0x025EFA5C MOV X1, X31
	0x025EFA60 BL 0x339FCE4
	0x025EFA64 CMP W0, 0x1
	0x025EFA68 B.NE 0x25EFD54
	0x025EFA6C MOV X0, X21
	0x025EFA70 MOV W1, W31
	0x025EFA74 MOV X2, X31
	0x025EFA78 BL 0x339FA30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W20, W1
	007 Move TEMP, X1
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {50}
	011 Move W8, [X0+32]
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Subtract W8, W8, 1
	015 Subtract W4, W8, W20
	016 Move [X19+32], W8
	017 Move X0, [X19+16]
	018 Add W21, W20, 1
	019 Move W1, W21
	020 Move W3, W20
	021 Move X2, X0
	022 Move X5, X31
	023 Call Array.Copy, X0, X1, X2, X3, X4
	024 Move W8, [X19+32]
	025 Move X0, [X19+24]
	026 Move W1, W21
	027 Move W3, W20
	028 Subtract W4, W8, W20
	029 Move X2, X0
	030 Move X5, X31
	031 Call Array.Copy, X0, X1, X2, X3, X4
	032 Move W8, [X19+32]
	033 Move X9, [X19+24]
	034 Compare X9, 0
	035 JumpIfEqual {79}
	036 Move W10, [X9+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X8, X9, W8
	039 Move [X8+32], X31
	040 Move [X8+40], X31
	041 Move W8, [X19+36]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Add W8, W8, 1
	045 Move [X19+36], W8
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+48]
	049 Return 
	050 Move [X31+12], W20
	051 Move X0, 0x1B05000
	052 Move X0, [X0+1880]
	053 Move X19, X2
	054 Call 0x1C17D08
	055 Add X1, X31, 12
	056 Call 0x1C17E04
	057 Move X20, X0
	058 Move X0, 0x1B0D000
	059 Move X0, [X0+1888]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X21, X0
	063 Move X0, 0x1B10000
	064 Move X0, [X0+304]
	065 Call 0x1C17D08
	066 Move X22, X0
	067 Move X0, 0x1B2D000
	068 Move X0, [X0+1632]
	069 Call 0x1C17D08
	070 Move X3, X0
	071 Move X0, X21
	072 Move X1, X22
	073 Move X2, X20
	074 Move X4, X31
	075 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	076 Move X0, X21
	077 Move X1, X19
	078 Call 0x1C17DEC
	079 Call 0x1C17F20
	080 Call 0x1C17F28

Method: System.Boolean Remove(TKey key)

Disassembly:
	0x025EFA7C CBNZ W0, 0x25EFD74
	0x025EFA80 TBNZ X22, 0x1F, 0x25EFCB4
	0x025EFA84 MOV X0, X21
	0x025EFA88 MOV X1, X31
	0x025EFA8C BL 0x3395B7C
	0x025EFA90 CMP W0, W22
	0x025EFA94 B.LT 0x25EFCB4
	0x025EFA98 MOV X0, X21
	0x025EFA9C MOV X1, X31
	0x025EFAA0 BL 0x3395B7C
	0x025EFAA4 LDR W8, [X20 + 0x20]
	0x025EFAA8 SUB W9, W0, W22
	0x025EFAAC CMP W9, W8
	0x025EFAB0 B.LT 0x25EFD94
	0x025EFAB4 LDR X8, [X19 + 0x20]
	0x025EFAB8 LDR X8, [X8 + 0xC0]
	0x025EFABC LDR X1, [X8 + 0x160]
	0x025EFAC0 LDRB W8, [X1 + 0x135]
	0x025EFAC4 TBNZ X8, 0x0, 0x25EFAD4
	0x025EFAC8 MOV X0, X1
	0x025EFACC BL 0x1C5C684
	0x025EFAD0 MOV X1, X0
	0x025EFAD4 MOV X0, X21
	0x025EFAD8 BL 0x1C16E00
	0x025EFADC CBZ X0, 0x25EFB84
	0x025EFAE0 LDR W8, [X20 + 0x20]
	0x025EFAE4 CMP W8, 0x1
	0x025EFAE8 B.LT 0x25EFC70
	0x025EFAEC MOV W22, W22
	0x025EFAF0 MOV X23, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X19, X0
	007 Move X20, X2
	008 Move X0, [X0+16]
	009 Move X8, [X8+192]
	010 Move W2, [X19+32]
	011 Move X4, [X19+40]
	012 Move W3, W1
	013 Move X8, [X8+160]
	014 Move W1, W31
	015 Move X8, [X8+32]
	016 Move X8, [X8+192]
	017 Move X5, [X8+96]
	018 Call Array.BinarySearch, X0, X1, X2, X3, X4
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move W21, W0
	021 NotImplemented "Instruction CSINV not yet implemented."
	022 Move TEMP, X1
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {31}
	026 Move X8, [X20+32]
	027 Move X0, X19
	028 Move X8, [X8+192]
	029 Move X2, [X8+200]
	030 Call 0x25EF954, X0, X1
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 NotImplemented "Instruction ORN not yet implemented."
	034 Move W0, W8
	035 ShiftRight W0, 31
	036 And W0, W0, 0x7FFFFFFF
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

Method: System.Void System.Collections.IDictionary.Remove(System.Object key)

Disassembly:
	0x025EFAF4 MOV X21, X31
	0x025EFAF8 UBFM X24, X22, 0x20, 0x1F
	0x025EFAFC MOVZ X25, 0x1
	0x025EFB00 LDR X8, [X20 + 0x10]
	0x025EFB04 CBZ X8, 0x25EFC90
	0x025EFB08 LDR W9, [X8 + 0x18]
	0x025EFB0C CMP X21, X9
	0x025EFB10 B.CS 0x25EFC8C
	0x025EFB14 LDR X9, [X20 + 0x18]
	0x025EFB18 CBZ X9, 0x25EFC90
	0x025EFB1C LDR W10, [X9 + 0x18]
	0x025EFB20 CMP X21, X10
	0x025EFB24 B.CS 0x25EFC8C
	0x025EFB28 LDR X10, [X19 + 0x20]
	0x025EFB2C ADD X8, X8, X21, 0x2, LSL
	0x025EFB30 LDR W1, [X8 + 0x20]
	0x025EFB34 ADD X9, X9, X21, 0x3, LSL
	0x025EFB38 LDR X8, [X10 + 0xC0]
	0x025EFB3C LDR X2, [X9 + 0x20]
	0x025EFB40 STP X31, X31, [X31 + 0x10]
	0x025EFB44 ADD X0, X31, 0x10
	0x025EFB48 LDR X3, [X8 + 0x170]
	0x025EFB4C BL 0x2EDF4D4
	0x025EFB50 LDR W8, [X23 + 0x18]
	0x025EFB54 ADD X9, X22, X21
	0x025EFB58 CMP X9, X8
	0x025EFB5C B.CS 0x25EFC8C
	0x025EFB60 LDR V0, [X31 + 0x1]
	0x025EFB64 ADD X8, X23, X24, 0x1C, ASR
	0x025EFB68 ADD X21, X21, 0x1
	0x025EFB6C ADD X24, X24, X25
	0x025EFB70 STR V0, [X8 + 0x2]
	0x025EFB74 LDRSW X8, [X20 + 0x20]
	0x025EFB78 CMP X21, X8
	0x025EFB7C B.LT 0x25EFB00
	0x025EFB80 B 0x25EFC70
	0x025EFB84 ADRP X8, 0x1B04000
	0x025EFB88 LDR X8, [X8 + 0x9D0]
	0x025EFB8C MOV X0, X21
	0x025EFB90 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X21, X1
	007 Move X20, X0
	008 Move X0, X21
	009 Move X8, [X8+192]
	010 Move X19, X2
	011 Move X1, [X8+320]
	012 Call 0x25EFB94, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {47}
	017 Move X8, [X19+32]
	018 Move X8, [X8+192]
	019 Move X1, [X8+88]
	020 Move W8, [X1+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {28}
	025 Move X0, X1
	026 Call 0x1C5D684
	027 Move X1, X0
	028 Compare X21, 0
	029 JumpIfEqual {52}
	030 Move X8, [X21]
	031 Move X9, [X1+64]
	032 Move X0, X21
	033 Move X8, [X8+64]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Call 0x1C17E08
	036 Move X8, [X19+32]
	037 Move W1, [X0]
	038 Move X0, X20
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X8, [X8+192]
	042 Move X2, [X8+448]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call 0x25EFA7C, X0, X1
	046 Return 
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 
	052 Call 0x1C17F20
	053 Call 0x1C181E0

Method: System.Boolean IsCompatibleKey(System.Object key)

Disassembly:
	0x025EFB94 BL 0x1C16E00
	0x025EFB98 CBZ X0, 0x25EFE18
	0x025EFB9C LDR W8, [X20 + 0x20]
	0x025EFBA0 CMP W8, 0x1
	0x025EFBA4 B.LT 0x25EFC70
	0x025EFBA8 MOV W24, W22
	0x025EFBAC MOV X21, X0
	0x025EFBB0 MOV X23, X31
	0x025EFBB4 UBFM X25, X24, 0x20, 0x1F
	0x025EFBB8 MOVZ X26, 0x1
	0x025EFBBC LDR X8, [X20 + 0x10]
	0x025EFBC0 CBZ X8, 0x25EFC98
	0x025EFBC4 LDR W9, [X8 + 0x18]
	0x025EFBC8 CMP X23, X9
	0x025EFBCC B.CS 0x25EFCA4
	0x025EFBD0 LDR X9, [X20 + 0x18]
	0x025EFBD4 CBZ X9, 0x25EFC9C
	0x025EFBD8 LDR W10, [X9 + 0x18]
	0x025EFBDC CMP X23, X10
	0x025EFBE0 B.CS 0x25EFCA0
	0x025EFBE4 LDR X10, [X19 + 0x20]
	0x025EFBE8 ADD X8, X8, X23, 0x2, LSL
	0x025EFBEC LDR W1, [X8 + 0x20]
	0x025EFBF0 ADD X9, X9, X23, 0x3, LSL
	0x025EFBF4 LDR X8, [X10 + 0xC0]
	0x025EFBF8 LDR X2, [X9 + 0x20]
	0x025EFBFC STP X31, X31, [X31 + 0x10]
	0x025EFC00 LDR X3, [X8 + 0x170]
	0x025EFC04 ADD X0, X31, 0x10
	0x025EFC08 BL 0x2EDF4D4
	0x025EFC0C LDR V0, [X31 + 0x1]
	0x025EFC10 STR V0, [X31]
	0x025EFC14 LDR X8, [X19 + 0x20]
	0x025EFC18 LDR X8, [X8 + 0xC0]
	0x025EFC1C LDR X0, [X8 + 0x78]
	0x025EFC20 ADD X1, X31, 0x0
	0x025EFC24 BL 0x1C16E04
	0x025EFC28 MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {32}
	006 Move X19, X0
	007 Move X0, [X1+32]
	008 Move W8, [X0+309]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {14}
	013 Call 0x1C5D684
	014 Move X8, [X0+192]
	015 Move X1, [X8+88]
	016 Move W8, [X1+309]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {24}
	021 Move X0, X1
	022 Call 0x1C5D684
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17E00
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move X30, [X31+32]
	031 Return X0
	032 Move X0, 0x1B0A000
	033 Move X0, [X0+1320]
	034 Move X19, X1
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X20, X0
	038 Move X0, 0x1B2F000
	039 Move X0, [X0+112]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X20
	043 Move X2, X31
	044 Call ArgumentNullException..ctor, X0, X1
	045 Move X0, X20
	046 Move X1, X19
	047 Call 0x1C17DEC

