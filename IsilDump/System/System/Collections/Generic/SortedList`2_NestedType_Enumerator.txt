Type: System.Collections.Generic.SortedList`2/Enumerator

Method: System.Void .ctor(System.Collections.Generic.SortedList`2<TKey, TValue> sortedList, System.Int32 getEnumeratorRetType)

Disassembly:
	0x02BF1904 B.EQ 0x2BF1918
	0x02BF1908 MOV X0, X31
	0x02BF190C BL 0x339E09C
	0x02BF1910 LDR X8, [X19]
	0x02BF1914 CBZ X8, 0x2BF19D0
	0x02BF1918 LDR W10, [X19 + 0xC]
	0x02BF191C LDR W22, [X8 + 0x20]
	0x02BF1920 MOV W23, W10
	0x02BF1924 CMP W10, W22
	0x02BF1928 B.CS 0x2BF19A8
	0x02BF192C LDR X9, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0], X1
	003 Move [X0+32], W31
	004 Compare X1, 0
	005 JumpIfEqual {14}
	006 Move W8, [X1+36]
	007 Move [X0+8], W31
	008 Move [X0+16], X31
	009 Move [X0+24], X31
	010 Move [X0+36], W8
	011 Move [X0+40], W2
	012 Move X30, [X31+16]
	013 Return 
	014 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x02BF1930 ADD W10, W23, 0x1
	0x02BF1934 STR W10, [X19 + 0xC]
	0x02BF1938 CBZ X9, 0x2BF19D0
	0x02BF193C LDR W11, [X9 + 0x18]

ISIL:
	001 Move [X0+8], W31
	002 Move [X0+16], X31
	003 Move [X0+24], X31
	004 Move [X0+32], W31
	005 Return 

Method: System.Object System.Collections.IDictionaryEnumerator.get_Key()

Disassembly:
	0x02BF1940 SUB W10, W10, 0x1
	0x02BF1944 CMP W10, W11
	0x02BF1948 B.CS 0x2BF19D4
	0x02BF194C ADD X11, X9, W23, 0x4, SXTW
	0x02BF1950 LDR W11, [X11 + 0x20]
	0x02BF1954 ADD W10, W10, 0x1
	0x02BF1958 TBNZ X11, 0x1F, 0x2BF1920
	0x02BF195C SXTW X8, W23
	0x02BF1960 ADD X8, X9, X8, 0x4, LSL
	0x02BF1964 LDR W21, [X8 + 0x28]
	0x02BF1968 LDRB W24, [X8 + 0x2C]
	0x02BF196C STR X31, [X31 + 0x8]
	0x02BF1970 LDR X0, [X20 + 0x20]
	0x02BF1974 LDRB W8, [X0 + 0x135]
	0x02BF1978 TBNZ X8, 0x0, 0x2BF1980
	0x02BF197C BL 0x1C5C684
	0x02BF1980 LDR X8, [X0 + 0xC0]
	0x02BF1984 CMP W24, 0x0
	0x02BF1988 CSET W2, NE
	0x02BF198C ADD X0, X31, 0x8
	0x02BF1990 LDR X3, [X8 + 0x38]
	0x02BF1994 MOV W1, W21
	0x02BF1998 BL 0x2EDE9DC
	0x02BF199C LDR X8, [X31 + 0x8]
	0x02BF19A0 STR X8, [X19 + 0x10]
	0x02BF19A4 B 0x2BF19B4
	0x02BF19A8 ADD W8, W22, 0x1
	0x02BF19AC STR W8, [X19 + 0xC]
	0x02BF19B0 STR X31, [X19 + 0x10]
	0x02BF19B4 CMP W23, W22
	0x02BF19B8 LDP X20, X19, [X31 + 0x30]
	0x02BF19BC LDP X22, X21, [X31 + 0x20]
	0x02BF19C0 LDP X24, X23, [X31 + 0x10]
	0x02BF19C4 CSET W0, CC
	0x02BF19C8 LDR X30, [X31], #0x40
	0x02BF19CC RET
	0x02BF19D0 BL 0x1C16F20
	0x02BF19D4 BL 0x1C16F28
	0x02BF19D8 LDR X0, [X0 + 0x10]
	0x02BF19DC RET
	0x02BF19E0 RET
	0x02BF19E4 SUB X31, X31, 0x50
	0x02BF19E8 STR X30, [X31 + 0x20]
	0x02BF19EC STP X22, X21, [X31 + 0x30]
	0x02BF19F0 STP X20, X19, [X31 + 0x40]
	0x02BF19F4 ADRP X21, 0x17EA000
	0x02BF19F8 LDRB W8, [X21 + 0x611]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, [X0+32]
	007 Move X19, X1
	008 Compare W21, 0
	009 JumpIfEqual {43}
	010 Move X22, [X0]
	011 Move X20, X0
	012 Compare X22, 0
	013 JumpIfEqual {58}
	014 Move X0, [X19+32]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move W8, [X22+32]
	022 Add W8, W8, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W8, [X20+8]
	025 Move [X31+12], W8
	026 Move X0, [X19+32]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move X8, [X0+192]
	034 Add X1, X31, 12
	035 Move X0, [X8+16]
	036 Call 0x1C17E04
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return X0
	043 Move X0, 0x1503000
	044 Move X0, [X0+1456]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X20, X0
	048 Move X0, 0x152D000
	049 Move X0, [X0+656]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X20
	053 Move X2, X31
	054 Call InvalidOperationException..ctor, X0, X1
	055 Move X0, X20
	056 Move X1, X19
	057 Call 0x1C17DEC
	058 Call 0x1C17F20

Method: System.Boolean MoveNext()

Disassembly:
	0x02BF19FC MOV X19, X1
	0x02BF1A00 MOV X20, X0
	0x02BF1A04 TBNZ X8, 0x0, 0x2BF1A1C
	0x02BF1A08 ADRP X0, 0x150A000
	0x02BF1A0C LDR X0, [X0 + 0xF10]
	0x02BF1A10 BL 0x1C16CF4
	0x02BF1A14 MOVZ W8, 0x1
	0x02BF1A18 STRB W8, [X21 + 0x611]
	0x02BF1A1C LDR W8, [X20 + 0xC]
	0x02BF1A20 CBZ W8, 0x2BF1A3C
	0x02BF1A24 LDR X9, [X20]
	0x02BF1A28 CBZ X9, 0x2BF1B90
	0x02BF1A2C LDR W9, [X9 + 0x20]
	0x02BF1A30 ADD W9, W9, 0x1
	0x02BF1A34 CMP W8, W9
	0x02BF1A38 B.NE 0x2BF1A44
	0x02BF1A3C MOV X0, X31
	0x02BF1A40 BL 0x339E0E8
	0x02BF1A44 LDR X0, [X19 + 0x20]
	0x02BF1A48 LDR W22, [X20 + 0x18]
	0x02BF1A4C LDRB W8, [X0 + 0x135]
	0x02BF1A50 TBNZ X8, 0x0, 0x2BF1A58
	0x02BF1A54 BL 0x1C5C684
	0x02BF1A58 LDR W21, [X20 + 0x10]
	0x02BF1A5C CMP W22, 0x1
	0x02BF1A60 B.NE 0x2BF1B08
	0x02BF1A64 STR W21, [X31 + 0x2C]
	0x02BF1A68 LDR X0, [X19 + 0x20]
	0x02BF1A6C LDRB W8, [X0 + 0x135]
	0x02BF1A70 TBNZ X8, 0x0, 0x2BF1A78
	0x02BF1A74 BL 0x1C5C684
	0x02BF1A78 LDR X8, [X0 + 0xC0]
	0x02BF1A7C ADD X1, X31, 0x2C
	0x02BF1A80 LDR X0, [X8 + 0x28]
	0x02BF1A84 BL 0x1C16E04
	0x02BF1A88 LDR X8, [X19 + 0x20]
	0x02BF1A8C MOV X21, X0
	0x02BF1A90 ADD X9, X8, 0x135
	0x02BF1A94 LDRH W9, [X9]
	0x02BF1A98 TBNZ X9, 0x0, 0x2BF1AB0
	0x02BF1A9C MOV X0, X8
	0x02BF1AA0 BL 0x1C5C684
	0x02BF1AA4 LDR X8, [X19 + 0x20]
	0x02BF1AA8 ADD X9, X8, 0x135
	0x02BF1AAC LDRH W9, [X9]
	0x02BF1AB0 LDRB W10, [X20 + 0x14]
	0x02BF1AB4 STRB W10, [X31 + 0x28]
	0x02BF1AB8 TBNZ X9, 0x0, 0x2BF1AC8
	0x02BF1ABC MOV X0, X8
	0x02BF1AC0 BL 0x1C5C684
	0x02BF1AC4 MOV X8, X0
	0x02BF1AC8 LDR X8, [X8 + 0xC0]
	0x02BF1ACC ADD X1, X31, 0x28
	0x02BF1AD0 LDR X0, [X8 + 0x30]
	0x02BF1AD4 BL 0x1C16E04
	0x02BF1AD8 MOV X2, X0
	0x02BF1ADC ADD X0, X31, 0x10
	0x02BF1AE0 MOV X1, X21
	0x02BF1AE4 MOV X3, X31
	0x02BF1AE8 STP X31, X31, [X31 + 0x10]
	0x02BF1AEC BL 0x335035C
	0x02BF1AF0 ADRP X8, 0x150A000
	0x02BF1AF4 LDR V0, [X31 + 0x1]
	0x02BF1AF8 LDR X8, [X8 + 0xF10]
	0x02BF1AFC STR V0, [X31]
	0x02BF1B00 LDR X0, [X8]
	0x02BF1B04 B 0x2BF1B74
	0x02BF1B08 LDR X0, [X19 + 0x20]
	0x02BF1B0C ADD X8, X0, 0x135
	0x02BF1B10 LDRH W8, [X8]
	0x02BF1B14 TBNZ X8, 0x0, 0x2BF1B28
	0x02BF1B18 BL 0x1C5C684
	0x02BF1B1C LDR X0, [X19 + 0x20]
	0x02BF1B20 ADD X8, X0, 0x135
	0x02BF1B24 LDRH W8, [X8]
	0x02BF1B28 LDRB W20, [X20 + 0x14]
	0x02BF1B2C STR X31, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, [X0]
	007 Compare X21, 0
	008 JumpIfEqual {70}
	009 Move W8, [X0+36]
	010 Move W9, [X21+36]
	011 Move X19, X0
	012 Move X20, X1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, [X20+32]
	015 Move W22, [X19+32]
	016 Move W8, [X0+309]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {42}
	021 Call 0x1C5D684
	022 Move X8, [X19]
	023 Compare X8, 0
	024 JumpIfEqual {70}
	025 Move W9, [X21+32]
	026 Move X21, X8
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, [X20+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move W8, [X21+32]
	036 Move W0, W31
	037 Move [X19+8], W31
	038 Move [X19+16], X31
	039 Move [X19+24], X31
	040 Add W8, W8, 1
	041 Move [X19+32], W8
	042 Move W8, [X21+32]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X9, [X21+16]
	045 Compare X9, 0
	046 JumpIfEqual {70}
	047 NotImplemented "Instruction LDRSW not yet implemented."
	048 Move W10, [X9+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X9, X9, X8
	051 Move W9, [X9+32]
	052 Move [X19+8], W9
	053 Move X9, [X21+24]
	054 Compare X9, 0
	055 JumpIfEqual {70}
	056 Move W10, [X9+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X9, X9, X8
	059 Move V0, [X9+2]
	060 Add W8, W8, 1
	061 Move W0, 1
	062 Move [X19+32], W8
	063 Move [X19+1], V0
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return X0
	070 Call 0x1C17F20
	071 Move X0, 0x1503000
	072 Move X0, [X0+1456]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X19, X0
	076 Move X0, 0x152D000
	077 Move X0, [X0+648]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Move X2, X31
	082 Call InvalidOperationException..ctor, X0, X1
	083 Move X0, X19
	084 Move X1, X20
	085 Call 0x1C17DEC
	086 Call 0x1C17F28

Method: System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry()

Disassembly:
	0x02BF1B30 TBNZ X8, 0x0, 0x2BF1B38
	0x02BF1B34 BL 0x1C5C684
	0x02BF1B38 LDR X8, [X0 + 0xC0]
	0x02BF1B3C CMP W20, 0x0
	0x02BF1B40 CSET W2, NE
	0x02BF1B44 ADD X0, X31, 0x10
	0x02BF1B48 LDR X3, [X8 + 0x38]
	0x02BF1B4C MOV W1, W21
	0x02BF1B50 BL 0x2EDE9DC
	0x02BF1B54 LDR X8, [X31 + 0x10]
	0x02BF1B58 STR X8, [X31]
	0x02BF1B5C LDR X0, [X19 + 0x20]
	0x02BF1B60 LDRB W8, [X0 + 0x135]
	0x02BF1B64 TBNZ X8, 0x0, 0x2BF1B6C
	0x02BF1B68 BL 0x1C5C684
	0x02BF1B6C LDR X8, [X0 + 0xC0]
	0x02BF1B70 LDR X0, [X8 + 0x10]
	0x02BF1B74 ADD X1, X31, 0x0
	0x02BF1B78 BL 0x1C16E04
	0x02BF1B7C LDP X20, X19, [X31 + 0x40]
	0x02BF1B80 LDP X22, X21, [X31 + 0x30]
	0x02BF1B84 LDR X30, [X31 + 0x20]
	0x02BF1B88 ADD X31, X31, 0x50
	0x02BF1B8C RET
	0x02BF1B90 BL 0x1C16F20
	0x02BF1B94 STP X30, X19, [X31 - 0x10]!
	0x02BF1B98 LDR X8, [X0]
	0x02BF1B9C CBZ X8, 0x2BF1BCC
	0x02BF1BA0 LDR W9, [X0 + 0x8]
	0x02BF1BA4 LDR W8, [X8 + 0x2C]
	0x02BF1BA8 MOV X19, X0
	0x02BF1BAC CMP W9, W8
	0x02BF1BB0 B.EQ 0x2BF1BBC
	0x02BF1BB4 MOV X0, X31
	0x02BF1BB8 BL 0x339E09C
	0x02BF1BBC STR W31, [X19 + 0xC]
	0x02BF1BC0 STR X31, [X19 + 0x10]
	0x02BF1BC4 LDP X30, X19, [X31], #0x10
	0x02BF1BC8 RET
	0x02BF1BCC BL 0x1C16F20
	0x02BF1BD0 SUB X31, X31, 0x40
	0x02BF1BD4 STP X30, X21, [X31 + 0x20]
	0x02BF1BD8 STP X20, X19, [X31 + 0x30]
	0x02BF1BDC LDR W8, [X0 + 0xC]
	0x02BF1BE0 MOV X19, X0
	0x02BF1BE4 MOV X20, X1
	0x02BF1BE8 CBZ W8, 0x2BF1C04
	0x02BF1BEC LDR X9, [X19]
	0x02BF1BF0 CBZ X9, 0x2BF1CC8
	0x02BF1BF4 LDR W9, [X9 + 0x20]
	0x02BF1BF8 ADD W9, W9, 0x1
	0x02BF1BFC CMP W8, W9
	0x02BF1C00 B.NE 0x2BF1C0C
	0x02BF1C04 MOV X0, X31
	0x02BF1C08 BL 0x339E0E8
	0x02BF1C0C LDR X0, [X20 + 0x20]
	0x02BF1C10 ADD X8, X0, 0x135
	0x02BF1C14 LDRH W8, [X8]
	0x02BF1C18 TBNZ X8, 0x0, 0x2BF1C2C
	0x02BF1C1C BL 0x1C5C684
	0x02BF1C20 LDR X0, [X20 + 0x20]
	0x02BF1C24 ADD X8, X0, 0x135
	0x02BF1C28 LDRH W8, [X8]
	0x02BF1C2C LDR W9, [X19 + 0x10]
	0x02BF1C30 STR W9, [X31 + 0xC]
	0x02BF1C34 TBNZ X8, 0x0, 0x2BF1C3C
	0x02BF1C38 BL 0x1C5C684
	0x02BF1C3C LDR X8, [X0 + 0xC0]
	0x02BF1C40 ADD X1, X31, 0xC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move W21, [X0+32]
	008 Move X19, X1
	009 Compare W21, 0
	010 JumpIfEqual {70}
	011 Move X22, [X0]
	012 Move X20, X0
	013 Compare X22, 0
	014 JumpIfEqual {85}
	015 Move X0, [X19+32]
	016 Move W8, [X0+309]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {22}
	021 Call 0x1C5D684
	022 Move W8, [X22+32]
	023 Add W8, W8, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W8, [X20+8]
	026 Move [X31+44], W8
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Add X1, X31, 44
	036 Move X0, [X8+16]
	037 Call 0x1C17E04
	038 Move V0, [X20+1]
	039 Move [X31], V0
	040 Move X8, [X19+32]
	041 Move X19, X0
	042 Move W9, [X8+309]
	043 Move TEMP, X9
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {50}
	047 Move X0, X8
	048 Call 0x1C5D684
	049 Move X8, X0
	050 Move X8, [X8+192]
	051 Add X1, X31, 0
	052 Move X0, [X8+24]
	053 Call 0x1C17E04
	054 Move X2, X0
	055 Add X0, X31, 16
	056 Move X1, X19
	057 Move X3, X31
	058 Move [X31+16], X31
	059 Move [X31+24], X31
	060 Call DictionaryEntry..ctor, X0, X1, X2
	061 Move X0, [X31+16]
	062 Move X1, [X31+24]
	063 Move X20, [X31+64]
	064 Move X19, [X31+72]
	065 Move X22, [X31+48]
	066 Move X21, [X31+56]
	067 Move X30, [X31+32]
	068 Add X31, X31, 80
	069 Return X0
	070 Move X0, 0x1503000
	071 Move X0, [X0+1456]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X20, X0
	075 Move X0, 0x152D000
	076 Move X0, [X0+656]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X20
	080 Move X2, X31
	081 Call InvalidOperationException..ctor, X0, X1
	082 Move X0, X20
	083 Move X1, X19
	084 Call 0x1C17DEC
	085 Call 0x1C17F20

Method: System.Collections.Generic.KeyValuePair`2<TKey, TValue> get_Current()

Disassembly:
	0x02BF1C44 LDR X0, [X8 + 0x28]
	0x02BF1C48 BL 0x1C16E04
	0x02BF1C4C LDR X8, [X20 + 0x20]
	0x02BF1C50 MOV X21, X0
	0x02BF1C54 ADD X9, X8, 0x135
	0x02BF1C58 LDRH W9, [X9]
	0x02BF1C5C TBNZ X9, 0x0, 0x2BF1C74
	0x02BF1C60 MOV X0, X8
	0x02BF1C64 BL 0x1C5C684
	0x02BF1C68 LDR X8, [X20 + 0x20]
	0x02BF1C6C ADD X9, X8, 0x135
	0x02BF1C70 LDRH W9, [X9]
	0x02BF1C74 LDRB W10, [X19 + 0x14]
	0x02BF1C78 STRB W10, [X31 + 0x8]
	0x02BF1C7C TBNZ X9, 0x0, 0x2BF1C8C
	0x02BF1C80 MOV X0, X8
	0x02BF1C84 BL 0x1C5C684
	0x02BF1C88 MOV X8, X0
	0x02BF1C8C LDR X8, [X8 + 0xC0]
	0x02BF1C90 ADD X1, X31, 0x8
	0x02BF1C94 LDR X0, [X8 + 0x30]
	0x02BF1C98 BL 0x1C16E04

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, [X0+8]
	007 Move X21, [X0+16]
	008 Move X22, [X0+24]
	009 Move [X8], X31
	010 Move [X8+8], X31
	011 Move [X8+16], X31
	012 Move X0, [X1+32]
	013 Move X20, X8
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move X8, [X0+192]
	021 Move X0, X20
	022 Move W1, W19
	023 Move X2, X21
	024 Move X4, [X8+64]
	025 Move X3, X22
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Call KeyValuePair`2<Int32, ValueTuple`2<Object, Int32>>..ctor, X0, X1, X2
	032 Return X0

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x02BF1C9C MOV X2, X0
	0x02BF1CA0 ADD X0, X31, 0x10
	0x02BF1CA4 MOV X1, X21
	0x02BF1CA8 MOV X3, X31
	0x02BF1CAC STP X31, X31, [X31 + 0x10]
	0x02BF1CB0 BL 0x335035C
	0x02BF1CB4 LDP X0, X1, [X31 + 0x10]
	0x02BF1CB8 LDP X20, X19, [X31 + 0x30]
	0x02BF1CBC LDP X30, X21, [X31 + 0x20]
	0x02BF1CC0 ADD X31, X31, 0x40
	0x02BF1CC4 RET
	0x02BF1CC8 BL 0x1C16F20
	0x02BF1CCC STR X30, [X31 - 0x20]!
	0x02BF1CD0 STP X20, X19, [X31 + 0x10]
	0x02BF1CD4 LDR W8, [X0 + 0xC]
	0x02BF1CD8 MOV X19, X0
	0x02BF1CDC MOV X20, X1
	0x02BF1CE0 CBZ W8, 0x2BF1CFC
	0x02BF1CE4 LDR X9, [X19]
	0x02BF1CE8 CBZ X9, 0x2BF1D50
	0x02BF1CEC LDR W9, [X9 + 0x20]
	0x02BF1CF0 ADD W9, W9, 0x1
	0x02BF1CF4 CMP W8, W9
	0x02BF1CF8 B.NE 0x2BF1D04
	0x02BF1CFC MOV X0, X31
	0x02BF1D00 BL 0x339E0E8
	0x02BF1D04 LDR X0, [X20 + 0x20]
	0x02BF1D08 ADD X8, X0, 0x135
	0x02BF1D0C LDRH W8, [X8]
	0x02BF1D10 TBNZ X8, 0x0, 0x2BF1D24
	0x02BF1D14 BL 0x1C5C684
	0x02BF1D18 LDR X0, [X20 + 0x20]
	0x02BF1D1C ADD X8, X0, 0x135
	0x02BF1D20 LDRH W8, [X8]
	0x02BF1D24 LDR W9, [X19 + 0x10]
	0x02BF1D28 STR W9, [X31 + 0xC]
	0x02BF1D2C TBNZ X8, 0x0, 0x2BF1D34
	0x02BF1D30 BL 0x1C5C684
	0x02BF1D34 LDR X8, [X0 + 0xC0]
	0x02BF1D38 ADD X1, X31, 0xC
	0x02BF1D3C LDR X0, [X8 + 0x28]
	0x02BF1D40 BL 0x1C16E04
	0x02BF1D44 LDP X20, X19, [X31 + 0x10]
	0x02BF1D48 LDR X30, [X31], #0x20
	0x02BF1D4C RET
	0x02BF1D50 BL 0x1C16F20
	0x02BF1D54 STR X30, [X31 - 0x20]!
	0x02BF1D58 STP X20, X19, [X31 + 0x10]
	0x02BF1D5C LDR W8, [X0 + 0xC]
	0x02BF1D60 MOV X19, X0
	0x02BF1D64 MOV X20, X1
	0x02BF1D68 CBZ W8, 0x2BF1D84
	0x02BF1D6C LDR X9, [X19]
	0x02BF1D70 CBZ X9, 0x2BF1DD8
	0x02BF1D74 LDR W9, [X9 + 0x20]
	0x02BF1D78 ADD W9, W9, 0x1
	0x02BF1D7C CMP W8, W9
	0x02BF1D80 B.NE 0x2BF1D8C
	0x02BF1D84 MOV X0, X31
	0x02BF1D88 BL 0x339E0E8
	0x02BF1D8C LDR X0, [X20 + 0x20]
	0x02BF1D90 ADD X8, X0, 0x135
	0x02BF1D94 LDRH W8, [X8]
	0x02BF1D98 TBNZ X8, 0x0, 0x2BF1DAC
	0x02BF1D9C BL 0x1C5C684
	0x02BF1DA0 LDR X0, [X20 + 0x20]
	0x02BF1DA4 ADD X8, X0, 0x135
	0x02BF1DA8 LDRH W8, [X8]
	0x02BF1DAC LDRB W9, [X19 + 0x14]
	0x02BF1DB0 STRB W9, [X31 + 0xC]
	0x02BF1DB4 TBNZ X8, 0x0, 0x2BF1DBC
	0x02BF1DB8 BL 0x1C5C684
	0x02BF1DBC LDR X8, [X0 + 0xC0]
	0x02BF1DC0 ADD X1, X31, 0xC
	0x02BF1DC4 LDR X0, [X8 + 0x30]
	0x02BF1DC8 BL 0x1C16E04
	0x02BF1DCC LDP X20, X19, [X31 + 0x10]
	0x02BF1DD0 LDR X30, [X31], #0x20
	0x02BF1DD4 RET
	0x02BF1DD8 BL 0x1C16F20
	0x02BF1DDC STR X30, [X31 - 0x10]!
	0x02BF1DE0 STR X1, [X0]
	0x02BF1DE4 CBZ X1, 0x2BF1DFC
	0x02BF1DE8 LDR W8, [X1 + 0x2C]
	0x02BF1DEC STR W31, [X0 + 0x10]
	0x02BF1DF0 STP W31, W8, [X0 + 0x8]
	0x02BF1DF4 LDR X30, [X31], #0x10
	0x02BF1DF8 RET
	0x02BF1DFC BL 0x1C16F20
	0x02BF1E00 RET
	0x02BF1E04 STP X30, X19, [X31 - 0x10]!
	0x02BF1E08 LDR X8, [X0]
	0x02BF1E0C CBZ X8, 0x2BF1EA8
	0x02BF1E10 LDR W9, [X0 + 0xC]
	0x02BF1E14 LDR W10, [X8 + 0x2C]
	0x02BF1E18 MOV X19, X0
	0x02BF1E1C CMP W9, W10
	0x02BF1E20 B.EQ 0x2BF1E34
	0x02BF1E24 MOV X0, X31
	0x02BF1E28 BL 0x339E09C
	0x02BF1E2C LDR X8, [X19]
	0x02BF1E30 CBZ X8, 0x2BF1EA8
	0x02BF1E34 LDR W12, [X19 + 0x8]
	0x02BF1E38 LDR W9, [X8 + 0x20]
	0x02BF1E3C MOV W10, W12
	0x02BF1E40 CMP W12, W9
	0x02BF1E44 B.CS 0x2BF1E8C
	0x02BF1E48 LDR X11, [X8 + 0x18]
	0x02BF1E4C ADD W12, W10, 0x1
	0x02BF1E50 STR W12, [X19 + 0x8]
	0x02BF1E54 CBZ X11, 0x2BF1EA8
	0x02BF1E58 LDR W13, [X11 + 0x18]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+96], X22
	004 Move [X31+104], X21
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 Move X21, 0x17EB000
	008 Move W8, [X21+1551]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x150B000
	016 Move X0, [X0+3856]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1551], W8
	020 Move W21, [X20+32]
	021 Compare W21, 0
	022 JumpIfEqual {121}
	023 Move X22, [X20]
	024 Compare X22, 0
	025 JumpIfEqual {136}
	026 Move X0, [X19+32]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move W8, [X22+32]
	034 Add W8, W8, 1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, [X20+40]
	037 Move W21, [X20+8]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move [X31+92], W21
	040 Move X0, [X19+32]
	041 Move W8, [X0+309]
	042 Move TEMP, X8
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {47}
	046 Call 0x1C5D684
	047 Move X8, [X0+192]
	048 Add X1, X31, 92
	049 Move X0, [X8+16]
	050 Call 0x1C17E04
	051 Move V0, [X20+1]
	052 Move [X31+2], V0
	053 Move X8, [X19+32]
	054 Move X19, X0
	055 Move W9, [X8+309]
	056 Move TEMP, X9
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {63}
	060 Move X0, X8
	061 Call 0x1C5D684
	062 Move X8, X0
	063 Move X8, [X8+192]
	064 Add X1, X31, 32
	065 Move X0, [X8+24]
	066 Call 0x1C17E04
	067 Move X2, X0
	068 Add X0, X31, 0
	069 Move X1, X19
	070 Move X3, X31
	071 Move [X31], X31
	072 Move [X31+8], X31
	073 Call DictionaryEntry..ctor, X0, X1, X2
	074 Move X8, 0x150B000
	075 Move V0, [X31]
	076 Move X8, [X8+3856]
	077 Add X1, X31, 64
	078 Move [X31+4], V0
	079 Move X0, [X8]
	080 Move X22, [X20+16]
	081 Move X20, [X20+24]
	082 Move [X31+32], X31
	083 Move [X31+40], X31
	084 Move [X31+48], X31
	085 Move X0, [X19+32]
	086 Move W8, [X0+309]
	087 Move TEMP, X8
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {92}
	091 Call 0x1C5D684
	092 Move X8, [X0+192]
	093 Add X0, X31, 32
	094 Move W1, W21
	095 Move X2, X22
	096 Move X4, [X8+64]
	097 Move X3, X20
	098 Call KeyValuePair`2<Int32, ValueTuple`2<Object, Int32>>..ctor, X0, X1, X2
	099 Move X8, [X31+48]
	100 Move V0, [X31+2]
	101 Move [X31+16], X8
	102 Move [X31], V0
	103 Move X0, [X19+32]
	104 Move W8, [X0+309]
	105 Move TEMP, X8
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {110}
	109 Call 0x1C5D684
	110 Move X8, [X0+192]
	111 Add X1, X31, 0
	112 Move X0, [X8+56]
	113 Call 0x1C17E04
	114 Move X20, [X31+112]
	115 Move X19, [X31+120]
	116 Move X22, [X31+96]
	117 Move X21, [X31+104]
	118 Move X30, [X31+80]
	119 Add X31, X31, 128
	120 Return X0
	121 Move X0, 0x1503000
	122 Move X0, [X0+1456]
	123 Call 0x1C17D08
	124 Call 0x1C17F10
	125 Move X20, X0
	126 Move X0, 0x152D000
	127 Move X0, [X0+656]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Move X2, X31
	132 Call InvalidOperationException..ctor, X0, X1
	133 Move X0, X20
	134 Move X1, X19
	135 Call 0x1C17DEC
	136 Call 0x1C17F20

Method: System.Object System.Collections.IDictionaryEnumerator.get_Value()

Disassembly:
	0x02BF1E5C SUB W12, W12, 0x1
	0x02BF1E60 CMP W12, W13
	0x02BF1E64 B.CS 0x2BF1EAC
	0x02BF1E68 ADD X13, X11, W10, 0x4, SXTW
	0x02BF1E6C LDR W13, [X13 + 0x20]
	0x02BF1E70 ADD W12, W12, 0x1
	0x02BF1E74 TBNZ X13, 0x1F, 0x2BF1E3C
	0x02BF1E78 SXTW X8, W10
	0x02BF1E7C ADD X8, X11, X8, 0x4, LSL
	0x02BF1E80 LDR W8, [X8 + 0x28]
	0x02BF1E84 STR W8, [X19 + 0x10]
	0x02BF1E88 B 0x2BF1E98
	0x02BF1E8C ADD W8, W9, 0x1
	0x02BF1E90 STR W8, [X19 + 0x8]
	0x02BF1E94 STR W31, [X19 + 0x10]
	0x02BF1E98 CMP W10, W9
	0x02BF1E9C CSET W0, CC
	0x02BF1EA0 LDP X30, X19, [X31], #0x10
	0x02BF1EA4 RET
	0x02BF1EA8 BL 0x1C16F20
	0x02BF1EAC BL 0x1C16F28
	0x02BF1EB0 LDR W0, [X0 + 0x10]
	0x02BF1EB4 RET
	0x02BF1EB8 STR X30, [X31 - 0x20]!
	0x02BF1EBC STP X20, X19, [X31 + 0x10]
	0x02BF1EC0 LDR W8, [X0 + 0x8]
	0x02BF1EC4 MOV X20, X0
	0x02BF1EC8 MOV X19, X1
	0x02BF1ECC CBZ W8, 0x2BF1EE8
	0x02BF1ED0 LDR X9, [X20]
	0x02BF1ED4 CBZ X9, 0x2BF1F24
	0x02BF1ED8 LDR W9, [X9 + 0x20]
	0x02BF1EDC ADD W9, W9, 0x1
	0x02BF1EE0 CMP W8, W9
	0x02BF1EE4 B.NE 0x2BF1EF0
	0x02BF1EE8 MOV X0, X31
	0x02BF1EEC BL 0x339E0E8
	0x02BF1EF0 LDR W8, [X20 + 0x10]
	0x02BF1EF4 STR W8, [X31 + 0xC]
	0x02BF1EF8 LDR X0, [X19 + 0x20]
	0x02BF1EFC LDRB W8, [X0 + 0x135]
	0x02BF1F00 TBNZ X8, 0x0, 0x2BF1F08
	0x02BF1F04 BL 0x1C5C684
	0x02BF1F08 LDR X8, [X0 + 0xC0]
	0x02BF1F0C ADD X1, X31, 0xC
	0x02BF1F10 LDR X0, [X8 + 0x10]
	0x02BF1F14 BL 0x1C16E04
	0x02BF1F18 LDP X20, X19, [X31 + 0x10]
	0x02BF1F1C LDR X30, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move W21, [X0+32]
	008 Move X19, X1
	009 Compare W21, 0
	010 JumpIfEqual {45}
	011 Move X22, [X0]
	012 Move X20, X0
	013 Compare X22, 0
	014 JumpIfEqual {60}
	015 Move X0, [X19+32]
	016 Move W8, [X0+309]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {22}
	021 Call 0x1C5D684
	022 Move W8, [X22+32]
	023 Add W8, W8, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move V0, [X20+1]
	026 Move [X31], V0
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Add X1, X31, 0
	036 Move X0, [X8+24]
	037 Call 0x1C17E04
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X30, [X31+16]
	043 Add X31, X31, 64
	044 Return X0
	045 Move X0, 0x1503000
	046 Move X0, [X0+1456]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X20, X0
	050 Move X0, 0x152D000
	051 Move X0, [X0+656]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X20
	055 Move X2, X31
	056 Call InvalidOperationException..ctor, X0, X1
	057 Move X0, X20
	058 Move X1, X19
	059 Call 0x1C17DEC
	060 Call 0x1C17F20

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x02BF1F20 RET
	0x02BF1F24 BL 0x1C16F20
	0x02BF1F28 STP X30, X19, [X31 - 0x10]!
	0x02BF1F2C LDR X8, [X0]
	0x02BF1F30 CBZ X8, 0x2BF1F60
	0x02BF1F34 LDR W9, [X0 + 0xC]
	0x02BF1F38 LDR W8, [X8 + 0x2C]
	0x02BF1F3C MOV X19, X0
	0x02BF1F40 CMP W9, W8
	0x02BF1F44 B.EQ 0x2BF1F50
	0x02BF1F48 MOV X0, X31
	0x02BF1F4C BL 0x339E09C
	0x02BF1F50 STR W31, [X19 + 0x8]
	0x02BF1F54 STR W31, [X19 + 0x10]
	0x02BF1F58 LDP X30, X19, [X31], #0x10
	0x02BF1F5C RET
	0x02BF1F60 BL 0x1C16F20
	0x02BF1F64 STR X30, [X31 - 0x10]!
	0x02BF1F68 STR X1, [X0]
	0x02BF1F6C CBZ X1, 0x2BF1F84
	0x02BF1F70 LDR W8, [X1 + 0x2C]
	0x02BF1F74 STRB W31, [X0 + 0x10]
	0x02BF1F78 STP W31, W8, [X0 + 0x8]
	0x02BF1F7C LDR X30, [X31], #0x10
	0x02BF1F80 RET
	0x02BF1F84 BL 0x1C16F20
	0x02BF1F88 RET
	0x02BF1F8C STP X30, X19, [X31 - 0x10]!
	0x02BF1F90 LDR X8, [X0]
	0x02BF1F94 CBZ X8, 0x2BF2030
	0x02BF1F98 LDR W9, [X0 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Compare X8, 0
	006 JumpIfEqual {18}
	007 Move W9, [X0+36]
	008 Move W8, [X8+36]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move [X0+8], W31
	013 Move [X0+16], X31
	014 Move [X0+24], X31
	015 Move [X0+32], W31
	016 Move X30, [X31+32]
	017 Return 
	018 Call 0x1C17F20
	019 Move X0, 0x1503000
	020 Move X0, [X0+1456]
	021 Move X19, X1
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X20, X0
	025 Move X0, 0x152D000
	026 Move X0, [X0+648]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Move X2, X31
	031 Call InvalidOperationException..ctor, X0, X1
	032 Move X0, X20
	033 Move X1, X19
	034 Call 0x1C17DEC

