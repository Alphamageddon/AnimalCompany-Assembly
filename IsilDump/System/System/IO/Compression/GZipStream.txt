Type: System.IO.Compression.GZipStream

Method: System.Void .ctor(System.IO.Stream stream, System.IO.Compression.CompressionMode mode)

Disassembly:
	0x03667F44 TBNZ X8, 0x0, 0x3667F68
	0x03667F48 ADRP X0, 0xA93000

ISIL:
	001 Move W3, W31

Method: System.Void .ctor(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, System.Boolean leaveOpen)

Disassembly:
	0x03667F4C LDR X0, [X0 + 0xC10]
	0x03667F50 BL 0x1C16CF4
	0x03667F54 ADRP X0, 0xABB000
	0x03667F58 LDR X0, [X0 + 0xD10]
	0x03667F5C BL 0x1C16CF4
	0x03667F60 MOVZ W8, 0x1
	0x03667F64 STRB W8, [X21 + 0x727]
	0x03667F68 TBZ X20, 0x0, 0x3667F74
	0x03667F6C LDRB W8, [X19 + 0x30]
	0x03667F70 CBZ W8, 0x3667FFC
	0x03667F74 ADRP X20, 0xABB000
	0x03667F78 LDR X20, [X20 + 0xD10]
	0x03667F7C LDR X0, [X20]
	0x03667F80 LDR W8, [X0 + 0xE0]
	0x03667F84 CBNZ W8, 0x3667F90
	0x03667F88 BL 0x1C16DFC
	0x03667F8C LDR X0, [X20]
	0x03667F90 LDR X8, [X0 + 0xB8]
	0x03667F94 LDR X8, [X8]
	0x03667F98 STR X8, [X19 + 0x18]
	0x03667F9C LDR X0, [X19 + 0x20]
	0x03667FA0 STR X31, [X19 + 0x38]
	0x03667FA4 CBZ X0, 0x3667FC8
	0x03667FA8 LDR X8, [X0]
	0x03667FAC LDP X9, X1, [X8 + 0x188]
	0x03667FB0 BLR X9
	0x03667FB4 TBNZ X0, 0x0, 0x3667FC8
	0x03667FB8 LDR X0, [X19 + 0x20]
	0x03667FBC CBZ X0, 0x366802C
	0x03667FC0 MOV X1, X31
	0x03667FC4 BL 0x32C02C4
	0x03667FC8 ADD X19, X19, 0x28
	0x03667FCC MOV X0, X19
	0x03667FD0 MOV X1, X31
	0x03667FD4 BL 0x32C05E4
	0x03667FD8 TBZ X0, 0x0, 0x3667FF0
	0x03667FDC MOV X0, X19
	0x03667FE0 LDP X20, X19, [X31 + 0x10]
	0x03667FE4 MOV X1, X31
	0x03667FE8 LDP X30, X21, [X31], #0x20
	0x03667FEC B 0x32C0794
	0x03667FF0 LDP X20, X19, [X31 + 0x10]
	0x03667FF4 LDP X30, X21, [X31], #0x20
	0x03667FF8 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xD7A000
	009 Move X23, 0xABC000
	010 Move W8, [X24+1812]
	011 Move X23, [X23+3344]
	012 Move W22, W3
	013 Move W20, W2
	014 Move X21, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xACB000
	021 Move X0, [X0+2584]
	022 Call 0x1C17CF4
	023 Move X0, 0xABC000
	024 Move X0, [X0+3344]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+1812], W8
	028 Move X0, [X23]
	029 Move X23, 0xACB000
	030 Move W8, [X0+224]
	031 Move X23, [X23+2584]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X31
	037 Call Stream..ctor, X0
	038 Move X0, [X23]
	039 Call 0x1C17F10
	040 And W3, W22, 1
	041 Move W4, 1
	042 Move X1, X21
	043 Move W2, W20
	044 Move X23, X0
	045 Call DeflateStream..ctor, X0, X1, X2, X3, X4
	046 Move [X19+40], X23
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X30, [X31+64]
	054 Return 

Method: System.Boolean get_CanRead()

Disassembly:
	0x03668008 LDR X8, [X8 + 0xC10]
	0x0366800C LDR X0, [X8]
	0x03668010 LDR W8, [X0 + 0xE0]
	0x03668014 CBNZ W8, 0x366801C
	0x03668018 BL 0x1C16DFC
	0x0366801C MOV X0, X19

ISIL:
	001 Move X0, [X0+40]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+424]
	006 Move X1, [X8+432]
	007 CallNoReturn X2
	008 Return X0

Method: System.Boolean get_CanWrite()

Disassembly:
	0x03668020 MOV X1, X31
	0x03668024 BL 0x33B3E9C
	0x03668028 B 0x3667F9C
	0x0366802C BL 0x1C16F20
	0x03668030 STR X30, [X31 - 0x10]!
	0x03668034 CBZ W3, 0x3668068

ISIL:
	001 Move X0, [X0+40]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+472]
	006 Move X1, [X8+480]
	007 CallNoReturn X2
	008 Return X0

Method: System.Boolean get_CanSeek()

Disassembly:
	0x03668038 CBZ X1, 0x366804C
	0x0366803C LDR W8, [X1 + 0x18]
	0x03668040 CBZ W8, 0x366804C
	0x03668044 ADD X8, X1, 0x20
	0x03668048 B 0x3668050
	0x0366804C MOV X8, X31

ISIL:
	001 Move X0, [X0+40]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+440]
	006 Move X1, [X8+448]
	007 CallNoReturn X2
	008 Return X0

Method: System.Int64 get_Length()

Disassembly:
	0x03668050 LDR X0, [X0 + 0x38]
	0x03668054 CBZ X0, 0x3668074
	0x03668058 ADD X1, X8, W2, SXTW
	0x0366805C MOV W2, W3
	0x03668060 LDR X30, [X31], #0x10
	0x03668064 B 0x3668078
	0x03668068 MOV W0, W31
	0x0366806C LDR X30, [X31], #0x10
	0x03668070 RET
	0x03668074 BL 0x1C16F20
	0x03668078 STP X30, X23, [X31 - 0x30]!
	0x0366807C STP X22, X21, [X31 + 0x10]
	0x03668080 STP X20, X19, [X31 + 0x20]
	0x03668084 ADRP X23, 0xD78000
	0x03668088 ADRP X22, 0xAD5000
	0x0366808C LDRB W8, [X23 + 0x729]
	0x03668090 LDR X22, [X22 + 0x370]
	0x03668094 MOV W20, W2
	0x03668098 MOV X21, X1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xA8C000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xAD6000
	009 Move X0, [X0+744]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xAD6000
	016 Move X0, [X0+752]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Int64 get_Position()

Disassembly:
	0x0366809C MOV X19, X0
	0x036680A0 TBNZ X8, 0x0, 0x36680B8
	0x036680A4 ADRP X0, 0xAD5000
	0x036680A8 LDR X0, [X0 + 0x370]
	0x036680AC BL 0x1C16CF4
	0x036680B0 MOVZ W8, 0x1
	0x036680B4 STRB W8, [X23 + 0x729]
	0x036680B8 LDR X0, [X19 + 0x20]
	0x036680BC MOV X1, X21
	0x036680C0 MOV W2, W20
	0x036680C4 BL 0x36696F4
	0x036680C8 LDR X2, [X22]
	0x036680CC MOV W20, W0
	0x036680D0 MOV X0, X19
	0x036680D4 MOV W1, W20
	0x036680D8 BL 0x36695C8
	0x036680DC MOV W0, W20
	0x036680E0 LDP X20, X19, [X31 + 0x20]
	0x036680E4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xA8C000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xAD6000
	009 Move X0, [X0+744]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xAD6000
	016 Move X0, [X0+760]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void set_Position(System.Int64 value)

Disassembly:
	0x036680E8 LDP X30, X23, [X31], #0x30
	0x036680EC RET
	0x036680F0 STR X30, [X31 - 0x30]!
	0x036680F4 STP X22, X21, [X31 + 0x10]
	0x036680F8 STP X20, X19, [X31 + 0x20]
	0x036680FC LDRB W8, [X0 + 0x35]
	0x03668100 MOV X21, X0
	0x03668104 CBNZ W8, 0x366816C
	0x03668108 MOV X22, X1
	0x0366810C CBZ X1, 0x36681D0
	0x03668110 LDR X8, [X21]
	0x03668114 MOV X0, X21
	0x03668118 MOV W19, W3
	0x0366811C MOV W20, W2
	0x03668120 LDP X9, X1, [X8 + 0x1A8]
	0x03668124 BLR X9
	0x03668128 TBZ X0, 0x0, 0x3668204
	0x0366812C ORR W8, W19, W20, 0x0
	0x03668130 TBNZ X8, 0x1F, 0x3668238

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xA8C000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xAD6000
	009 Move X0, [X0+744]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xAD6000
	016 Move X0, [X0+768]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void Flush()

Disassembly:
	0x03668134 LDR W8, [X22 + 0x18]
	0x03668138 CMP W8, W20
	0x0366813C B.LT 0x3668258
	0x03668140 ADD W9, W19, W20
	0x03668144 CMP W9, W8
	0x03668148 B.GT 0x3668278
	0x0366814C MOV X0, X21
	0x03668150 MOV X1, X22
	0x03668154 MOV W2, W20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)

Disassembly:
	0x03668170 MOV X1, X31
	0x03668174 BL 0x33BE520
	0x03668178 MOV X19, X0
	0x0366817C BL 0x19903C0
	0x03668180 LDR X8, [X19]
	0x03668184 MOV X0, X19
	0x03668188 LDR X9, [X8 + 0x2E8]
	0x0366818C LDR X1, [X8 + 0x2F0]
	0x03668190 BLR X9
	0x03668194 MOV X19, X0
	0x03668198 ADRP X0, 0xAB4000
	0x0366819C LDR X0, [X0 + 0x4B8]
	0x036681A0 BL 0x1C16D08
	0x036681A4 BL 0x1C16F10
	0x036681A8 MOV X1, X19
	0x036681AC MOV X2, X31
	0x036681B0 MOV X20, X0
	0x036681B4 BL 0x338C448
	0x036681B8 ADRP X0, 0xAD5000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xA8C000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xAD6000
	009 Move X0, [X0+744]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xAD6000
	016 Move X0, [X0+776]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void SetLength(System.Int64 value)

Disassembly:
	0x036681BC LDR X0, [X0 + 0x378]
	0x036681C0 BL 0x1C16D08
	0x036681C4 MOV X1, X0
	0x036681C8 MOV X0, X20
	0x036681CC BL 0x1C16DEC
	0x036681D0 ADRP X0, 0xA90000
	0x036681D4 LDR X0, [X0 + 0x528]
	0x036681D8 BL 0x1C16D08
	0x036681DC BL 0x1C16F10
	0x036681E0 MOV X19, X0
	0x036681E4 ADRP X0, 0xAD5000
	0x036681E8 LDR X0, [X0 + 0x380]
	0x036681EC BL 0x1C16D08
	0x036681F0 MOV X1, X0
	0x036681F4 MOV X0, X19
	0x036681F8 MOV X2, X31
	0x036681FC BL 0x330E100
	0x03668200 B 0x36682A8
	0x03668204 ADRP X0, 0xA8B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xA8C000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xAD6000
	009 Move X0, [X0+744]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xAD6000
	016 Move X0, [X0+784]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Int32 ReadByte()

Disassembly:
	0x03668208 LDR X0, [X0 + 0x5B0]
	0x0366820C BL 0x1C16D08
	0x03668210 BL 0x1C16F10
	0x03668214 MOV X19, X0
	0x03668218 ADRP X0, 0xABA000
	0x0366821C LDR X0, [X0 + 0xD88]
	0x03668220 BL 0x1C16D08
	0x03668224 MOV X1, X0
	0x03668228 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+888]
	007 Move X1, [X8+896]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call GZipStream.ThrowStreamClosedException

Method: System.IAsyncResult BeginRead(System.Byte[] array, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)

Disassembly:
	0x0366822C MOV X2, X31
	0x03668230 BL 0x337DF1C
	0x03668234 B 0x36682A8
	0x03668238 ADRP X0, 0xA93000
	0x0366823C LDR X0, [X0 + 0x578]
	0x03668240 BL 0x1C16D08
	0x03668244 BL 0x1C16F10
	0x03668248 MOV X19, X0
	0x0366824C ADRP X0, 0xAD5000
	0x03668250 LDR X0, [X0 + 0x388]
	0x03668254 B 0x3668294
	0x03668258 ADRP X0, 0xA93000
	0x0366825C LDR X0, [X0 + 0x578]
	0x03668260 BL 0x1C16D08
	0x03668264 BL 0x1C16F10
	0x03668268 MOV X19, X0
	0x0366826C ADRP X0, 0xABF000
	0x03668270 LDR X0, [X0 + 0x5C8]
	0x03668274 B 0x3668294
	0x03668278 ADRP X0, 0xA93000
	0x0366827C LDR X0, [X0 + 0x578]
	0x03668280 BL 0x1C16D08
	0x03668284 BL 0x1C16F10
	0x03668288 MOV X19, X0
	0x0366828C ADRP X0, 0xABF000
	0x03668290 LDR X0, [X0 + 0x5D0]
	0x03668294 BL 0x1C16D08
	0x03668298 MOV X1, X0
	0x0366829C MOV X0, X19
	0x036682A0 MOV X2, X31
	0x036682A4 BL 0x3314A68
	0x036682A8 ADRP X0, 0xAD5000
	0x036682AC LDR X0, [X0 + 0x378]
	0x036682B0 BL 0x1C16D08
	0x036682B4 MOV X1, X0
	0x036682B8 MOV X0, X19
	0x036682BC BL 0x1C16DEC
	0x036682C0 STR X30, [X31 - 0x10]!
	0x036682C4 CBZ W3, 0x36682F8
	0x036682C8 CBZ X1, 0x36682DC
	0x036682CC LDR W8, [X1 + 0x18]
	0x036682D0 CBZ W8, 0x36682DC
	0x036682D4 ADD X8, X1, 0x20
	0x036682D8 B 0x36682E0
	0x036682DC MOV X8, X31

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xD79000
	011 Move X26, 0xA94000
	012 Move W8, [X25+1813]
	013 Move X26, [X26+2008]
	014 Move X19, X5
	015 Move X20, X4
	016 Move W21, W3
	017 Move W22, W2
	018 Move X23, X1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xA94000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+1813], W8
	029 Move X0, [X26]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X31
	035 Call CancellationToken.get_None
	036 Move X8, [X24]
	037 Move X4, X0
	038 Move X0, X24
	039 Move X1, X23
	040 Move X9, [X8+728]
	041 Move X5, [X8+736]
	042 Move W2, W22
	043 Move W3, W21
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+64]
	048 Move X19, [X31+72]
	049 Move X22, [X31+48]
	050 Move X21, [X31+56]
	051 Move X24, [X31+32]
	052 Move X23, [X31+40]
	053 Move X26, [X31+16]
	054 Move X25, [X31+24]
	055 Move X3, X31
	056 Move X30, [X31+80]
	057 Call TaskToApm.Begin, X0, X1, X2
	058 Return X0

Method: System.Int32 EndRead(System.IAsyncResult asyncResult)

Disassembly:
	0x036682E0 LDR X0, [X0 + 0x38]
	0x036682E4 CBZ X0, 0x3668300
	0x036682E8 ADD X1, X8, W2, SXTW
	0x036682EC MOV W2, W3
	0x036682F0 LDR X30, [X31], #0x10
	0x036682F4 B 0x3668304
	0x036682F8 LDR X30, [X31], #0x10
	0x036682FC RET
	0x03668300 BL 0x1C16F20
	0x03668304 STP X30, X23, [X31 - 0x30]!
	0x03668308 STP X22, X21, [X31 + 0x10]
	0x0366830C STP X20, X19, [X31 + 0x20]
	0x03668310 ADRP X23, 0xD78000
	0x03668314 ADRP X22, 0xAD5000
	0x03668318 LDRB W8, [X23 + 0x72A]
	0x0366831C LDR X22, [X22 + 0x390]
	0x03668320 MOV W20, W2
	0x03668324 MOV X21, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD79000
	006 Move X21, 0xABB000
	007 Move W8, [X20+1814]
	008 Move X21, [X21+3520]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xABB000
	015 Move X0, [X0+3520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1814], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x229CB30, X0
	026 Return X0

Method: System.Int32 Read(System.Byte[] array, System.Int32 offset, System.Int32 count)

Disassembly:
	0x03668328 MOV X19, X0
	0x0366832C TBNZ X8, 0x0, 0x3668344
	0x03668330 ADRP X0, 0xAD5000
	0x03668334 LDR X0, [X0 + 0x390]
	0x03668338 BL 0x1C16CF4
	0x0366833C MOVZ W8, 0x1
	0x03668340 STRB W8, [X23 + 0x72A]
	0x03668344 LDR X0, [X19 + 0x20]
	0x03668348 MOV X1, X21

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+856]
	007 Move X4, [X8+864]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Int32 Read(System.Span`1<System.Byte> buffer)

Disassembly:
	0x0366834C MOV W2, W20
	0x03668350 BL 0x3669770
	0x03668354 LDR X2, [X22]
	0x03668358 MOV W1, W0
	0x0366835C MOV X0, X19
	0x03668360 LDP X20, X19, [X31 + 0x20]
	0x03668364 LDP X22, X21, [X31 + 0x10]
	0x03668368 LDP X30, X23, [X31], #0x30
	0x0366836C B 0x36695C8
	0x03668370 STR X30, [X31 - 0x30]!
	0x03668374 STP X22, X21, [X31 + 0x10]
	0x03668378 STP X20, X19, [X31 + 0x20]
	0x0366837C LDRB W8, [X0 + 0x35]
	0x03668380 MOV X21, X0
	0x03668384 CBNZ W8, 0x36683E4
	0x03668388 MOV X22, X1
	0x0366838C CBZ X1, 0x3668448
	0x03668390 MOV W20, W2
	0x03668394 TBNZ X2, 0x1F, 0x366847C
	0x03668398 MOV W19, W3
	0x0366839C TBNZ X3, 0x1F, 0x366849C
	0x036683A0 LDR X8, [X21]
	0x036683A4 MOV X0, X21
	0x036683A8 LDP X9, X1, [X8 + 0x1D8]
	0x036683AC BLR X9
	0x036683B0 TBZ X0, 0x0, 0x36684D0
	0x036683B4 LDR W8, [X22 + 0x18]
	0x036683B8 SUB W8, W8, W19
	0x036683BC CMP W8, W20
	0x036683C0 B.LT 0x3668504
	0x036683C4 MOV X0, X21
	0x036683C8 MOV X1, X22
	0x036683CC MOV W2, W20
	0x036683D0 MOV W3, W19
	0x036683D4 LDP X20, X19, [X31 + 0x20]
	0x036683D8 LDP X22, X21, [X31 + 0x10]
	0x036683DC LDR X30, [X31], #0x30
	0x036683E0 B 0x36682C0
	0x036683E4 MOV X0, X21
	0x036683E8 MOV X1, X31
	0x036683EC BL 0x33BE520
	0x036683F0 MOV X19, X0
	0x036683F4 BL 0x19903C0
	0x036683F8 LDR X8, [X19]
	0x036683FC MOV X0, X19
	0x03668400 LDR X9, [X8 + 0x2E8]
	0x03668404 LDR X1, [X8 + 0x2F0]
	0x03668408 BLR X9
	0x0366840C MOV X19, X0
	0x03668410 ADRP X0, 0xAB4000
	0x03668414 LDR X0, [X0 + 0x4B8]
	0x03668418 BL 0x1C16D08
	0x0366841C BL 0x1C16F10
	0x03668420 MOV X1, X19
	0x03668424 MOV X2, X31
	0x03668428 MOV X20, X0
	0x0366842C BL 0x338C448
	0x03668430 ADRP X0, 0xAD5000
	0x03668434 LDR X0, [X0 + 0x398]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xD79000
	009 Move X22, 0xAD6000
	010 Move X23, 0xA8C000
	011 Move W8, [X24+1815]
	012 Move X22, [X22+792]
	013 Move X23, [X23+1728]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xAD6000
	022 Move X0, [X0+792]
	023 Call 0x1C17CF4
	024 Move X0, 0xA8C000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+1815], W8
	029 Move X0, X21
	030 Move X1, X31
	031 Call "il2cpp_vm_object_is_inst", X0
	032 Move X8, [X23]
	033 Move X23, [X22]
	034 Move X22, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X23
	041 Move X1, X31
	042 Call Type.GetTypeFromHandle, X0
	043 Move X1, X0
	044 Move X0, X22
	045 Move X2, X31
	046 Call Type.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {64}
	051 Move X0, X21
	052 Move X1, X20
	053 Move X2, X19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X3, X31
	061 Move X30, [X31+64]
	062 Call Stream.Read, X0, X1
	063 Return X0
	064 Move X0, [X21+40]
	065 Compare X0, 0
	066 JumpIfEqual {76}
	067 Move X1, X20
	068 Move X2, X19
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X30, [X31+64]
	076 Call GZipStream.ThrowStreamClosedException

Method: System.IAsyncResult BeginWrite(System.Byte[] array, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)

Disassembly:
	0x03668550 STP X20, X19, [X31 + 0x10]
	0x03668554 LDRB W8, [X0 + 0x35]
	0x03668558 MOV X19, X0
	0x0366855C CBNZ W8, 0x3668594
	0x03668560 LDR X8, [X19]
	0x03668564 MOV X0, X19
	0x03668568 LDP X9, X1, [X8 + 0x1D8]
	0x0366856C BLR X9
	0x03668570 TBZ X0, 0x0, 0x3668588
	0x03668574 LDR X0, [X19 + 0x38]
	0x03668578 CBZ X0, 0x36685F8
	0x0366857C LDP X20, X19, [X31 + 0x10]
	0x03668580 LDR X30, [X31], #0x20
	0x03668584 B 0x36685FC
	0x03668588 LDP X20, X19, [X31 + 0x10]
	0x0366858C LDR X30, [X31], #0x20
	0x03668590 RET
	0x03668594 MOV X0, X19
	0x03668598 MOV X1, X31
	0x0366859C BL 0x33BE520
	0x036685A0 MOV X19, X0
	0x036685A4 BL 0x19903C0
	0x036685A8 LDR X8, [X19]
	0x036685AC MOV X0, X19
	0x036685B0 LDR X9, [X8 + 0x2E8]
	0x036685B4 LDR X1, [X8 + 0x2F0]
	0x036685B8 BLR X9
	0x036685BC MOV X19, X0
	0x036685C0 ADRP X0, 0xAB4000
	0x036685C4 LDR X0, [X0 + 0x4B8]
	0x036685C8 BL 0x1C16D08
	0x036685CC BL 0x1C16F10
	0x036685D0 MOV X1, X19
	0x036685D4 MOV X2, X31
	0x036685D8 MOV X20, X0
	0x036685DC BL 0x338C448
	0x036685E0 ADRP X0, 0xAD5000
	0x036685E4 LDR X0, [X0 + 0x3A8]
	0x036685E8 BL 0x1C16D08
	0x036685EC MOV X1, X0
	0x036685F0 MOV X0, X20
	0x036685F4 BL 0x1C16DEC
	0x036685F8 BL 0x1C16F20
	0x036685FC STP X30, X21, [X31 - 0x20]!
	0x03668600 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xD79000
	011 Move X26, 0xA94000
	012 Move W8, [X25+1816]
	013 Move X26, [X26+2008]
	014 Move X19, X5
	015 Move X20, X4
	016 Move W21, W3
	017 Move W22, W2
	018 Move X23, X1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xA94000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+1816], W8
	029 Move X0, [X26]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X31
	035 Call CancellationToken.get_None
	036 Move X8, [X24]
	037 Move X4, X0
	038 Move X0, X24
	039 Move X1, X23
	040 Move X9, [X8+792]
	041 Move X5, [X8+800]
	042 Move W2, W22
	043 Move W3, W21
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+64]
	048 Move X19, [X31+72]
	049 Move X22, [X31+48]
	050 Move X21, [X31+56]
	051 Move X24, [X31+32]
	052 Move X23, [X31+40]
	053 Move X26, [X31+16]
	054 Move X25, [X31+24]
	055 Move X3, X31
	056 Move X30, [X31+80]
	057 Call TaskToApm.Begin, X0, X1, X2
	058 Return X0

Method: System.Void EndWrite(System.IAsyncResult asyncResult)

Disassembly:
	0x03668604 ADRP X21, 0xD78000
	0x03668608 ADRP X20, 0xAD5000
	0x0366860C LDRB W8, [X21 + 0x728]

ISIL:
	001 Move X0, X1
	002 Move X1, X31
	003 Call TaskToApm.End, X0
	004 Return 

Method: System.Void Write(System.Byte[] array, System.Int32 offset, System.Int32 count)

Disassembly:
	0x03668610 LDR X20, [X20 + 0x3B0]
	0x03668614 MOV X19, X0
	0x03668618 TBNZ X8, 0x0, 0x3668630
	0x0366861C ADRP X0, 0xAD5000
	0x03668620 LDR X0, [X0 + 0x3B0]
	0x03668624 BL 0x1C16CF4
	0x03668628 MOVZ W8, 0x1
	0x0366862C STRB W8, [X21 + 0x728]
	0x03668630 LDR X0, [X19 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+904]
	007 Move X4, [X8+912]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Void Write(System.ReadOnlySpan`1<System.Byte> buffer)

Disassembly:
	0x03668634 BL 0x3669564
	0x03668638 LDR X2, [X20]
	0x0366863C MOV W1, W0
	0x03668640 MOV X0, X19
	0x03668644 LDP X20, X19, [X31 + 0x10]
	0x03668648 LDP X30, X21, [X31], #0x20
	0x0366864C B 0x36695C8
	0x03668650 STP X30, X25, [X31 - 0x40]!
	0x03668654 STP X24, X23, [X31 + 0x10]
	0x03668658 STP X22, X21, [X31 + 0x20]
	0x0366865C STP X20, X19, [X31 + 0x30]
	0x03668660 ADRP X25, 0xD78000
	0x03668664 LDRB W8, [X25 + 0x720]
	0x03668668 MOV X19, X5
	0x0366866C MOV X20, X4
	0x03668670 MOV W21, W3
	0x03668674 MOV W22, W2
	0x03668678 MOV X23, X1
	0x0366867C MOV X24, X0
	0x03668680 TBNZ X8, 0x0, 0x36686A4
	0x03668684 ADRP X0, 0xAD5000
	0x03668688 LDR X0, [X0 + 0x3B8]
	0x0366868C BL 0x1C16CF4
	0x03668690 ADRP X0, 0xAD5000
	0x03668694 LDR X0, [X0 + 0x3C0]
	0x03668698 BL 0x1C16CF4
	0x0366869C MOVZ W8, 0x1
	0x036686A0 STRB W8, [X25 + 0x720]
	0x036686A4 LDRB W8, [X24 + 0x35]
	0x036686A8 CBNZ W8, 0x3668734
	0x036686AC LDR X8, [X24]
	0x036686B0 MOV X0, X24
	0x036686B4 LDP X9, X1, [X8 + 0x1A8]
	0x036686B8 BLR X9
	0x036686BC TBZ X0, 0x0, 0x3668798
	0x036686C0 CBZ X23, 0x36687CC
	0x036686C4 TBNZ X21, 0x1F, 0x3668800
	0x036686C8 TBNZ X22, 0x1F, 0x3668820
	0x036686CC LDR W8, [X23 + 0x18]
	0x036686D0 ADD W9, W21, W22
	0x036686D4 CMP W9, W8
	0x036686D8 B.GT 0x3668868
	0x036686DC ADRP X8, 0xAD5000
	0x036686E0 LDR X8, [X8 + 0x3C0]
	0x036686E4 ADRP X25, 0xAD5000
	0x036686E8 LDR X0, [X8]
	0x036686EC LDR X25, [X25 + 0x3B8]
	0x036686F0 BL 0x1C16F10
	0x036686F4 LDR X2, [X25]
	0x036686F8 MOV X1, X24
	0x036686FC MOV X25, X0
	0x03668700 BL 0x36688B4
	0x03668704 CBZ X25, 0x36688B0
	0x03668708 MOV X1, X23
	0x0366870C MOV W2, W22
	0x03668710 MOV W3, W21
	0x03668714 MOV X4, X20
	0x03668718 MOV X5, X19
	0x0366871C LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xD79000
	009 Move X22, 0xAD6000
	010 Move X23, 0xA8C000
	011 Move W8, [X24+1817]
	012 Move X22, [X22+792]
	013 Move X23, [X23+1728]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xAD6000
	022 Move X0, [X0+792]
	023 Call 0x1C17CF4
	024 Move X0, 0xA8C000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+1817], W8
	029 Move X0, X21
	030 Move X1, X31
	031 Call "il2cpp_vm_object_is_inst", X0
	032 Move X8, [X23]
	033 Move X23, [X22]
	034 Move X22, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X23
	041 Move X1, X31
	042 Call Type.GetTypeFromHandle, X0
	043 Move X1, X0
	044 Move X0, X22
	045 Move X2, X31
	046 Call Type.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {64}
	051 Move X0, X21
	052 Move X1, X20
	053 Move X2, X19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X3, X31
	061 Move X30, [X31+64]
	062 Call Stream.Write, X0, X1
	063 Return 
	064 Move X0, [X21+40]
	065 Compare X0, 0
	066 JumpIfEqual {76}
	067 Move X1, X20
	068 Move X2, X19
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X30, [X31+64]
	076 Call GZipStream.ThrowStreamClosedException

Method: System.Void CopyTo(System.IO.Stream destination, System.Int32 bufferSize)

Disassembly:
	0x036687A4 BL 0x1C16F10
	0x036687A8 MOV X19, X0
	0x036687AC ADRP X0, 0xABF000
	0x036687B0 LDR X0, [X0 + 0x5F0]
	0x036687B4 BL 0x1C16D08
	0x036687B8 MOV X1, X0
	0x036687BC MOV X0, X19
	0x036687C0 MOV X2, X31
	0x036687C4 BL 0x3379A44

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X4, [X8+616]
	007 Move X3, [X8+624]
	008 Move X30, [X31+16]
	009 CallNoReturn X4
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x036687C8 B 0x3668898
	0x036687CC ADRP X0, 0xA90000
	0x036687D0 LDR X0, [X0 + 0x528]
	0x036687D4 BL 0x1C16D08
	0x036687D8 BL 0x1C16F10
	0x036687DC MOV X19, X0
	0x036687E0 ADRP X0, 0xAB3000
	0x036687E4 LDR X0, [X0 + 0x640]
	0x036687E8 BL 0x1C16D08
	0x036687EC MOV X1, X0
	0x036687F0 MOV X0, X19
	0x036687F4 MOV X2, X31
	0x036687F8 BL 0x330E100
	0x036687FC B 0x3668898
	0x03668800 ADRP X0, 0xA93000
	0x03668804 LDR X0, [X0 + 0x760]
	0x03668808 BL 0x1C16D08
	0x0366880C BL 0x1C16F10
	0x03668810 MOV X19, X0
	0x03668814 ADRP X0, 0xAB3000
	0x03668818 LDR X0, [X0 + 0x648]
	0x0366881C B 0x366883C
	0x03668820 ADRP X0, 0xA93000
	0x03668824 LDR X0, [X0 + 0x760]
	0x03668828 BL 0x1C16D08
	0x0366882C BL 0x1C16F10
	0x03668830 MOV X19, X0
	0x03668834 ADRP X0, 0xABA000
	0x03668838 LDR X0, [X0 + 0xD90]
	0x0366883C BL 0x1C16D08
	0x03668840 MOV X20, X0
	0x03668844 ADRP X0, 0xABF000
	0x03668848 LDR X0, [X0 + 0x5F8]
	0x0366884C BL 0x1C16D08
	0x03668850 MOV X2, X0
	0x03668854 MOV X0, X19
	0x03668858 MOV X1, X20
	0x0366885C MOV X3, X31
	0x03668860 BL 0x3311888
	0x03668864 B 0x3668898
	0x03668868 ADRP X0, 0xA93000
	0x0366886C LDR X0, [X0 + 0x578]
	0x03668870 BL 0x1C16D08
	0x03668874 BL 0x1C16F10
	0x03668878 MOV X19, X0
	0x0366887C ADRP X0, 0xAD5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X19, X0
	007 Move TEMP, X1
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {16}
	011 Move X0, [X19+40]
	012 Compare X0, 0
	013 JumpIfEqual {16}
	014 Move X1, X31
	015 Call Stream.Dispose, X0
	016 And W1, W20, 1
	017 Move [X19+40], X31
	018 Move X0, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X2, X31
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Call Stream.Dispose, X0, X1
	025 Return 
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X21, X0
	028 Move X0, X21
	029 Call 0x3EB2AD0
	030 Move X20, [X0]
	031 Call 0x3EB2AE0
	032 Move W1, 1
	033 Move X0, X19
	034 Move X2, X31
	035 Call Stream.Dispose, X0, X1
	036 Compare X20, 0
	037 JumpIfNotEqual {44}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 
	043 Move X20, X31
	044 Move X0, X20
	045 Call 0x1C17F18
	046 Move X21, X0
	047 Move W1, 1
	048 Move X0, X19
	049 Move X2, X31
	050 Call Stream.Dispose, X0, X1
	051 Compare X20, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X21
	054 Call 0x1D2D690
	055 Move X0, X20
	056 Call 0x1C17F18
	057 Call 0x1991590

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03668880 LDR X0, [X0 + 0x3A0]
	0x03668884 BL 0x1C16D08
	0x03668888 MOV X1, X0
	0x0366888C MOV X0, X19
	0x03668890 MOV X2, X31
	0x03668894 BL 0x3314A68
	0x03668898 ADRP X0, 0xAD5000
	0x0366889C LDR X0, [X0 + 0x3C8]
	0x036688A0 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X6, [X8+728]
	007 Move X5, [X8+736]
	008 Move X30, [X31+16]
	009 CallNoReturn X6
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Threading.Tasks.ValueTask`1<System.Int32> ReadAsync(System.Memory`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = null)

Disassembly:
	0x036688A4 MOV X1, X0
	0x036688A8 MOV X0, X19
	0x036688AC BL 0x1C16DEC
	0x036688B0 BL 0x1C16F20
	0x036688B4 STP X30, X21, [X31 - 0x20]!
	0x036688B8 STP X20, X19, [X31 + 0x10]
	0x036688BC LDR X8, [X2 + 0x8]
	0x036688C0 STP X1, X2, [X0 + 0x20]
	0x036688C4 MOV X19, X0
	0x036688C8 MOV X20, X1
	0x036688CC STR X8, [X0 + 0x10]
	0x036688D0 LDRB W21, [X2 + 0x52]
	0x036688D4 STR X0, [X0 + 0x40]
	0x036688D8 MOV X0, X2
	0x036688DC BL 0x1C16D84
	0x036688E0 TBZ X0, 0x0, 0x36688F8
	0x036688E4 CMP W21, 0x3
	0x036688E8 B.NE 0x3668914
	0x036688EC ADRP X8, 0xFFFFFFFFFE55E000
	0x036688F0 ADD X8, X8, 0x158
	0x036688F4 B 0x3668908
	0x036688F8 CMP W21, 0x2
	0x036688FC B.NE 0x3668910
	0x03668900 ADRP X8, 0xFFFFFFFFFE55E000
	0x03668904 ADD X8, X8, 0x130
	0x03668908 STR X8, [X19 + 0x18]
	0x0366890C B 0x3668924
	0x03668910 CBZ X20, 0x366893C
	0x03668914 LDR X8, [X19 + 0x10]
	0x03668918 LDR X9, [X19 + 0x20]
	0x0366891C STR X8, [X19 + 0x18]
	0x03668920 STR X9, [X19 + 0x40]
	0x03668924 ADRP X8, 0xFFFFFFFFFE55E000
	0x03668928 ADD X8, X8, 0xC8
	0x0366892C STR X8, [X19 + 0x38]
	0x03668930 LDP X20, X19, [X31 + 0x10]
	0x03668934 LDP X30, X21, [X31], #0x20
	0x03668938 RET
	0x0366893C ADRP X1, 0xFFFFFFFFFD4B3000
	0x03668940 ADD X1, X1, 0xEE3
	0x03668944 MOV X0, X31
	0x03668948 BL 0x1C16F3C
	0x0366894C MOV X1, X31
	0x03668950 BL 0x1C16DEC
	0x03668954 SUB X31, X31, 0x60
	0x03668958 STR X30, [X31 + 0x20]
	0x0366895C STP X24, X23, [X31 + 0x30]
	0x03668960 STP X22, X21, [X31 + 0x40]
	0x03668964 STP X20, X19, [X31 + 0x50]
	0x03668968 ADRP X24, 0xD78000
	0x0366896C STP W3, W2, [X31 + 0x28]
	0x03668970 ADRP X23, 0xA8B000
	0x03668974 LDRB W8, [X24 + 0x724]
	0x03668978 LDR X23, [X23 + 0x758]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xD79000
	010 Move X23, 0xAD6000
	011 Move X24, 0xA8C000
	012 Move W8, [X25+1818]
	013 Move X23, [X23+792]
	014 Move X24, [X24+1728]
	015 Move X19, X3
	016 Move X20, X2
	017 Move X21, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xAD6000
	024 Move X0, [X0+792]
	025 Call 0x1C17CF4
	026 Move X0, 0xA8C000
	027 Move X0, [X0+1728]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+1818], W8
	031 Move X0, X22
	032 Move X1, X31
	033 Call "il2cpp_vm_object_is_inst", X0
	034 Move X8, [X24]
	035 Move X24, [X23]
	036 Move X23, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X24
	043 Move X1, X31
	044 Call Type.GetTypeFromHandle, X0
	045 Move X1, X0
	046 Move X0, X23
	047 Move X2, X31
	048 Call Type.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {56}
	053 Move X22, [X22+40]
	054 Compare X22, 0
	055 JumpIfEqual {71}
	056 Move X0, X22
	057 Move X1, X21
	058 Move X2, X20
	059 Move X3, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X4, X31
	067 Move X30, [X31+64]
	068 Move X25, [X31+72]
	069 Call Stream.ReadAsync, X0, X1, X2
	070 Return X0
	071 Call GZipStream.ThrowStreamClosedException

Method: System.Threading.Tasks.Task WriteAsync(System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03668984 MOV X22, X1
	0x03668988 MOV X21, X0
	0x0366898C TBNZ X8, 0x0, 0x36689A4
	0x03668990 ADRP X0, 0xA8B000
	0x03668994 LDR X0, [X0 + 0x758]
	0x03668998 BL 0x1C16CF4
	0x0366899C MOVZ W8, 0x1
	0x036689A0 STRB W8, [X24 + 0x724]
	0x036689A4 LDR X0, [X23]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X6, [X8+792]
	007 Move X5, [X8+800]
	008 Move X30, [X31+16]
	009 CallNoReturn X6
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = null)

Disassembly:
	0x036689A8 ADD X1, X31, 0x2C
	0x036689AC STP X31, X31, [X31 + 0x10]
	0x036689B0 STP X22, X31, [X31]
	0x036689B4 BL 0x1C16E04
	0x036689B8 LDR X8, [X23]
	0x036689BC STR X0, [X31 + 0x8]
	0x036689C0 ADD X1, X31, 0x28
	0x036689C4 MOV X0, X8
	0x036689C8 BL 0x1C16E04
	0x036689CC STR X0, [X31 + 0x10]
	0x036689D0 ADD X1, X31, 0x0
	0x036689D4 MOV X0, X21
	0x036689D8 MOV X2, X20
	0x036689DC MOV X3, X19
	0x036689E0 BL 0x1C16CB0
	0x036689E4 LDP X20, X19, [X31 + 0x50]
	0x036689E8 LDP X22, X21, [X31 + 0x40]
	0x036689EC LDP X24, X23, [X31 + 0x30]
	0x036689F0 LDR X30, [X31 + 0x20]
	0x036689F4 ADD X31, X31, 0x60
	0x036689F8 RET
	0x036689FC STP X30, X25, [X31 - 0x40]!
	0x03668A00 STP X24, X23, [X31 + 0x10]
	0x03668A04 STP X22, X21, [X31 + 0x20]
	0x03668A08 STP X20, X19, [X31 + 0x30]
	0x03668A0C ADRP X25, 0xD78000
	0x03668A10 LDRB W8, [X25 + 0x721]
	0x03668A14 MOV X19, X5
	0x03668A18 MOV X20, X4
	0x03668A1C MOV W21, W3
	0x03668A20 MOV W22, W2
	0x03668A24 MOV X23, X1
	0x03668A28 MOV X24, X0
	0x03668A2C TBNZ X8, 0x0, 0x3668A50
	0x03668A30 ADRP X0, 0xAD5000
	0x03668A34 LDR X0, [X0 + 0x3D0]
	0x03668A38 BL 0x1C16CF4
	0x03668A3C ADRP X0, 0xAD5000
	0x03668A40 LDR X0, [X0 + 0x3D8]
	0x03668A44 BL 0x1C16CF4
	0x03668A48 MOVZ W8, 0x1
	0x03668A4C STRB W8, [X25 + 0x721]
	0x03668A50 LDRB W8, [X24 + 0x35]
	0x03668A54 CBNZ W8, 0x3668AE0
	0x03668A58 LDR X8, [X24]
	0x03668A5C MOV X0, X24
	0x03668A60 LDP X9, X1, [X8 + 0x1D8]
	0x03668A64 BLR X9
	0x03668A68 TBZ X0, 0x0, 0x3668B44
	0x03668A6C CBZ X23, 0x3668B78
	0x03668A70 TBNZ X21, 0x1F, 0x3668BAC
	0x03668A74 TBNZ X22, 0x1F, 0x3668BCC
	0x03668A78 LDR W8, [X23 + 0x18]
	0x03668A7C ADD W9, W21, W22

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xD79000
	010 Move X23, 0xAD6000
	011 Move X24, 0xA8C000
	012 Move W8, [X25+1819]
	013 Move X23, [X23+792]
	014 Move X24, [X24+1728]
	015 Move X19, X3
	016 Move X20, X2
	017 Move X21, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xAD6000
	024 Move X0, [X0+792]
	025 Call 0x1C17CF4
	026 Move X0, 0xA8C000
	027 Move X0, [X0+1728]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+1819], W8
	031 Move X0, X22
	032 Move X1, X31
	033 Call "il2cpp_vm_object_is_inst", X0
	034 Move X8, [X24]
	035 Move X24, [X23]
	036 Move X23, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X24
	043 Move X1, X31
	044 Call Type.GetTypeFromHandle, X0
	045 Move X1, X0
	046 Move X0, X23
	047 Move X2, X31
	048 Call Type.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {56}
	053 Move X22, [X22+40]
	054 Compare X22, 0
	055 JumpIfEqual {71}
	056 Move X0, X22
	057 Move X1, X21
	058 Move X2, X20
	059 Move X3, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X4, X31
	067 Move X30, [X31+64]
	068 Move X25, [X31+72]
	069 Call Stream.WriteAsync, X0, X1, X2
	070 Return X0
	071 Call GZipStream.ThrowStreamClosedException

Method: System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03668A88 ADRP X8, 0xAD5000
	0x03668A8C LDR X8, [X8 + 0x3D8]
	0x03668A90 ADRP X25, 0xAD5000
	0x03668A94 LDR X0, [X8]
	0x03668A98 LDR X25, [X25 + 0x3D0]
	0x03668A9C BL 0x1C16F10
	0x03668AA0 LDR X2, [X25]
	0x03668AA4 MOV X1, X24
	0x03668AA8 MOV X25, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+680]
	007 Move X2, [X8+688]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03668AAC BL 0x3668C60
	0x03668AB0 CBZ X25, 0x3668C5C
	0x03668AB4 MOV X1, X23
	0x03668AB8 MOV W2, W22
	0x03668ABC MOV W3, W21
	0x03668AC0 MOV X4, X20
	0x03668AC4 MOV X5, X19
	0x03668AC8 LDP X20, X19, [X31 + 0x30]
	0x03668ACC LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+600]
	007 Move X4, [X8+608]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call GZipStream.ThrowStreamClosedException

Method: System.Void CheckDeflateStream()

Disassembly:
	0x03668158 MOV W3, W19
	0x0366815C LDP X20, X19, [X31 + 0x20]
	0x03668160 LDP X22, X21, [X31 + 0x10]
	0x03668164 LDR X30, [X31], #0x30
	0x03668168 B 0x3668030
	0x0366816C MOV X0, X21

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+40]
	003 Compare X8, 0
	004 JumpIfEqual {7}
	005 Move X30, [X31+16]
	006 Return 
	007 Call GZipStream.ThrowStreamClosedException

Method: System.Void ThrowStreamClosedException()

Disassembly:
	0x03668AD0 LDP X24, X23, [X31 + 0x10]
	0x03668AD4 MOV X0, X25
	0x03668AD8 LDP X30, X25, [X31], #0x40
	0x03668ADC B 0x3668D00
	0x03668AE0 MOV X0, X24
	0x03668AE4 MOV X1, X31
	0x03668AE8 BL 0x33BE520
	0x03668AEC MOV X19, X0
	0x03668AF0 BL 0x19903C0
	0x03668AF4 LDR X8, [X19]
	0x03668AF8 MOV X0, X19
	0x03668AFC LDR X9, [X8 + 0x2E8]
	0x03668B00 LDR X1, [X8 + 0x2F0]
	0x03668B04 BLR X9
	0x03668B08 MOV X19, X0
	0x03668B0C ADRP X0, 0xAB4000
	0x03668B10 LDR X0, [X0 + 0x4B8]
	0x03668B14 BL 0x1C16D08
	0x03668B18 BL 0x1C16F10
	0x03668B1C MOV X1, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xAB5000
	004 Move X0, [X0+1208]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xABF000
	009 Move X0, [X0+3048]
	010 Call 0x1C17D08
	011 Move X2, X0
	012 Move X0, X19
	013 Move X1, X31
	014 Move X3, X31
	015 Call ObjectDisposedException..ctor, X0, X1, X2
	016 Move X0, 0xAD6000
	017 Move X0, [X0+816]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Call 0x1C17DEC

