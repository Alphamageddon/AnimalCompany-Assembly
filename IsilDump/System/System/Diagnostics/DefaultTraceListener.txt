Type: System.Diagnostics.DefaultTraceListener

Method: System.Void .cctor()

Disassembly:
	0x0364BCB8 MOVZ W1, 0x2
	0x0364BCBC BL 0x1C16D6C
	0x0364BCC0 MOV X21, X0
	0x0364BCC4 LDRB W8, [X19 + 0x82]
	0x0364BCC8 LDR X0, [X24]
	0x0364BCCC ADD X1, X31, 0xC
	0x0364BCD0 STRB W8, [X31 + 0xC]
	0x0364BCD4 BL 0x1C16E04
	0x0364BCD8 CBZ X21, 0x364BF58
	0x0364BCDC MOV X22, X0
	0x0364BCE0 CBZ X0, 0x364BCF8
	0x0364BCE4 LDR X8, [X21]
	0x0364BCE8 MOV X0, X22
	0x0364BCEC LDR X1, [X8 + 0x40]
	0x0364BCF0 BL 0x1C16E00
	0x0364BCF4 CBZ X0, 0x364BF4C
	0x0364BCF8 LDR W8, [X21 + 0x18]
	0x0364BCFC CBZ W8, 0x364BF48
	0x0364BD00 MOV X0, X31
	0x0364BD04 STR X22, [X21 + 0x20]
	0x0364BD08 BL 0x33C1548
	0x0364BD0C MOV X22, X0
	0x0364BD10 CBZ X0, 0x364BD28
	0x0364BD14 LDR X8, [X21]
	0x0364BD18 MOV X0, X22
	0x0364BD1C LDR X1, [X8 + 0x40]
	0x0364BD20 BL 0x1C16E00
	0x0364BD24 CBZ X0, 0x364BF4C
	0x0364BD28 LDR W8, [X21 + 0x18]
	0x0364BD2C CMP W8, 0x1
	0x0364BD30 B.LS 0x364BF48
	0x0364BD34 ADRP X8, 0xAF1000
	0x0364BD38 LDR X8, [X8 + 0x718]
	0x0364BD3C STR X22, [X21 + 0x28]
	0x0364BD40 MOV X0, X20
	0x0364BD44 MOV X2, X21
	0x0364BD48 LDR X1, [X8]
	0x0364BD4C MOV X3, X31
	0x0364BD50 BL 0x3234E54
	0x0364BD54 LDR X0, [X23]
	0x0364BD58 MOVZ W1, 0x2
	0x0364BD5C BL 0x1C16D6C
	0x0364BD60 MOV X21, X0
	0x0364BD64 LDRB W8, [X19 + 0x83]
	0x0364BD68 LDR X0, [X24]
	0x0364BD6C ADD X1, X31, 0x8
	0x0364BD70 STRB W8, [X31 + 0x8]
	0x0364BD74 BL 0x1C16E04
	0x0364BD78 CBZ X21, 0x364BF58
	0x0364BD7C MOV X22, X0
	0x0364BD80 CBZ X0, 0x364BD98
	0x0364BD84 LDR X8, [X21]
	0x0364BD88 MOV X0, X22
	0x0364BD8C LDR X1, [X8 + 0x40]
	0x0364BD90 BL 0x1C16E00
	0x0364BD94 CBZ X0, 0x364BF4C
	0x0364BD98 LDR W8, [X21 + 0x18]
	0x0364BD9C CBZ W8, 0x364BF48
	0x0364BDA0 MOV X0, X31
	0x0364BDA4 STR X22, [X21 + 0x20]
	0x0364BDA8 BL 0x33C1548
	0x0364BDAC MOV X22, X0
	0x0364BDB0 CBZ X0, 0x364BDC8
	0x0364BDB4 LDR X8, [X21]
	0x0364BDB8 MOV X0, X22
	0x0364BDBC LDR X1, [X8 + 0x40]
	0x0364BDC0 BL 0x1C16E00
	0x0364BDC4 CBZ X0, 0x364BF4C
	0x0364BDC8 LDR W8, [X21 + 0x18]
	0x0364BDCC CMP W8, 0x1
	0x0364BDD0 B.LS 0x364BF48
	0x0364BDD4 ADRP X8, 0xAF1000
	0x0364BDD8 LDR X8, [X8 + 0x6D0]
	0x0364BDDC STR X22, [X21 + 0x28]
	0x0364BDE0 MOV X0, X20
	0x0364BDE4 MOV X2, X21
	0x0364BDE8 LDR X1, [X8]
	0x0364BDEC MOV X3, X31
	0x0364BDF0 BL 0x3234E54

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD96000
	006 Move X19, 0xAD0000
	007 Move W8, [X20+1497]
	008 Move X19, [X19+464]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0xAF2000
	014 Move X0, [X0+1600]
	015 Call 0x1C17CF4
	016 Move X0, 0xAD0000
	017 Move X0, [X0+464]
	018 Call 0x1C17CF4
	019 Move X0, 0xAF2000
	020 Move X0, [X0+1688]
	021 Call 0x1C17CF4
	022 Move X0, 0xAF2000
	023 Move X0, [X0+1696]
	024 Call 0x1C17CF4
	025 Move X0, 0xAF2000
	026 Move X0, [X0+1704]
	027 Call 0x1C17CF4
	028 Move X0, 0xAA9000
	029 Move X0, [X0+2440]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+1497], W8
	033 Move X0, [X19]
	034 Move X21, 0xAF2000
	035 Move W8, [X0+224]
	036 Move X21, [X21+1600]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X19]
	041 Move X8, [X0+184]
	042 Move X9, [X21]
	043 NotImplemented "Instruction LDRH not yet implemented."
	044 Move X9, [X9+184]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move [X9], W8
	048 Move X8, 0xAF2000
	049 Move X8, [X8+1696]
	050 Move X20, 0xAF2000
	051 Move X1, X31
	052 Move X0, [X8]
	053 Move X20, [X20+1704]
	054 Call Environment.GetEnvironmentVariable, X0
	055 Move X1, [X20]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Compare X19, 0
	059 JumpIfEqual {89}
	060 Move X0, X19
	061 Move X2, X31
	062 Call String.StartsWith, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {77}
	067 Move X20, 0xAF2000
	068 Move X20, [X20+1688]
	069 Move X0, X19
	070 Move X2, X31
	071 Move X1, [X20]
	072 Call String.StartsWith, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {82}
	077 Move X20, [X20]
	078 Move X0, X19
	079 Move X1, X20
	080 Call DefaultTraceListener.GetPrefix, X0, X1
	081 Move X19, X20
	082 Move X8, 0xAA9000
	083 Move X8, [X8+2440]
	084 Move X0, [X8]
	085 Move X8, [X21]
	086 Move X8, [X8+184]
	087 Move [X8+8], X0
	088 Move [X8+16], X19
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Return 

Method: System.String GetPrefix(System.String var, System.String target)

Disassembly:
	0x0364BDF4 LDR X0, [X23]
	0x0364BDF8 MOVZ W1, 0x2
	0x0364BDFC BL 0x1C16D6C
	0x0364BE00 MOV X21, X0
	0x0364BE04 LDRB W8, [X19 + 0x84]
	0x0364BE08 LDR X0, [X24]
	0x0364BE0C ADD X1, X31, 0x4
	0x0364BE10 STRB W8, [X31 + 0x4]
	0x0364BE14 BL 0x1C16E04
	0x0364BE18 CBZ X21, 0x364BF58
	0x0364BE1C MOV X22, X0
	0x0364BE20 CBZ X0, 0x364BE38
	0x0364BE24 LDR X8, [X21]
	0x0364BE28 MOV X0, X22
	0x0364BE2C LDR X1, [X8 + 0x40]
	0x0364BE30 BL 0x1C16E00
	0x0364BE34 CBZ X0, 0x364BF4C
	0x0364BE38 LDR W8, [X21 + 0x18]
	0x0364BE3C CBZ W8, 0x364BF48
	0x0364BE40 MOV X0, X31
	0x0364BE44 STR X22, [X21 + 0x20]
	0x0364BE48 BL 0x33C1548
	0x0364BE4C MOV X22, X0
	0x0364BE50 CBZ X0, 0x364BE68
	0x0364BE54 LDR X8, [X21]
	0x0364BE58 MOV X0, X22
	0x0364BE5C LDR X1, [X8 + 0x40]
	0x0364BE60 BL 0x1C16E00
	0x0364BE64 CBZ X0, 0x364BF4C
	0x0364BE68 LDR W8, [X21 + 0x18]
	0x0364BE6C CMP W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD96000
	006 Move W8, [X21+1498]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAA9000
	014 Move X0, [X0+2440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1498], W8
	018 Compare X19, 0
	019 JumpIfEqual {42}
	020 Compare X20, 0
	021 JumpIfEqual {42}
	022 Move W9, [X19+16]
	023 Move W8, [X20+16]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Add W1, W8, 1
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call String.Substring, X0, X1
	033 Return X0
	034 Move X8, 0xAA9000
	035 Move X8, [X8+2440]
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X0, [X8]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0364AB74 MOV X0, X20
	0x0364AB78 BL 0x1C16F18
	0x0364AB7C BL 0x1990590
	0x0364AB80 RET
	0x0364AB84 MOVZ W0, 0x1
	0x0364AB88 RET
	0x0364AB8C SUB X31, X31, 0x40
	0x0364AB90 STP X30, X23, [X31 + 0x10]
	0x0364AB94 STP X22, X21, [X31 + 0x20]
	0x0364AB98 STP X20, X19, [X31 + 0x30]
	0x0364AB9C ADRP X23, 0xD96000
	0x0364ABA0 ADRP X19, 0xAF2000
	0x0364ABA4 LDRB W8, [X23 + 0x5D8]
	0x0364ABA8 LDR X19, [X19 + 0x630]
	0x0364ABAC MOV W20, W2
	0x0364ABB0 MOV X21, X1
	0x0364ABB4 MOV X22, X0
	0x0364ABB8 TBNZ X8, 0x0, 0x364ABD0
	0x0364ABBC ADRP X0, 0xAF2000
	0x0364ABC0 LDR X0, [X0 + 0x630]
	0x0364ABC4 BL 0x1C16CF4
	0x0364ABC8 MOVZ W8, 0x1
	0x0364ABCC STRB W8, [X23 + 0x5D8]
	0x0364ABD0 LDR X0, [X19]
	0x0364ABD4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD97000
	006 Move X21, 0xAD2000
	007 Move W8, [X20+1499]
	008 Move X21, [X21+104]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAD2000
	015 Move X0, [X0+104]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1499], W8
	019 Move X20, [X21]
	020 Move W8, 4
	021 Move [X19+28], W8
	022 Move W8, 1
	023 Move X0, X19
	024 Move X1, X31
	025 Move [X19+32], W8
	026 Call MarshalByRefObject..ctor, X0
	027 Move [X19+40], X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: System.String get_LogFileName()

Disassembly:
	0x0364BE70 B.LS 0x364BF48
	0x0364BE74 ADRP X8, 0xAF1000

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void WriteWindowsDebugString(System.Char* message)

Disassembly:
	0x0364BE78 LDR X8, [X8 + 0x710]

ISIL:
	001 Call 0x1C51C08
	002 Return 

Method: System.Void WriteDebugString(System.String message)

Disassembly:
	0x0364BE7C STR X22, [X21 + 0x28]
	0x0364BE80 MOV X0, X20
	0x0364BE84 MOV X2, X21
	0x0364BE88 LDR X1, [X8]
	0x0364BE8C MOV X3, X31
	0x0364BE90 BL 0x3234E54
	0x0364BE94 LDR X0, [X23]
	0x0364BE98 MOVZ W1, 0x2
	0x0364BE9C BL 0x1C16D6C
	0x0364BEA0 CBZ X0, 0x364BF58
	0x0364BEA4 LDR X19, [X19 + 0x40]
	0x0364BEA8 MOV X21, X0
	0x0364BEAC CBZ X19, 0x364BEC4
	0x0364BEB0 LDR X8, [X21]
	0x0364BEB4 MOV X0, X19
	0x0364BEB8 LDR X1, [X8 + 0x40]
	0x0364BEBC BL 0x1C16E00
	0x0364BEC0 CBZ X0, 0x364BF4C
	0x0364BEC4 LDR W8, [X21 + 0x18]
	0x0364BEC8 CBZ W8, 0x364BF48
	0x0364BECC MOV X0, X31
	0x0364BED0 STR X19, [X21 + 0x20]
	0x0364BED4 BL 0x33C1548
	0x0364BED8 MOV X19, X0
	0x0364BEDC CBZ X0, 0x364BEF4
	0x0364BEE0 LDR X8, [X21]
	0x0364BEE4 MOV X0, X19
	0x0364BEE8 LDR X1, [X8 + 0x40]
	0x0364BEEC BL 0x1C16E00
	0x0364BEF0 CBZ X0, 0x364BF4C
	0x0364BEF4 LDR W8, [X21 + 0x18]
	0x0364BEF8 CMP W8, 0x1
	0x0364BEFC B.LS 0x364BF48
	0x0364BF00 ADRP X8, 0xAF1000
	0x0364BF04 LDR X8, [X8 + 0x6E8]
	0x0364BF08 STR X19, [X21 + 0x28]
	0x0364BF0C MOV X0, X20
	0x0364BF10 MOV X2, X21
	0x0364BF14 LDR X1, [X8]
	0x0364BF18 MOV X3, X31
	0x0364BF1C BL 0x3234E54
	0x0364BF20 LDR X8, [X20]
	0x0364BF24 MOV X0, X20
	0x0364BF28 LDP X9, X1, [X8 + 0x168]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD96000
	007 Move X21, 0xAF2000
	008 Move W8, [X22+1500]
	009 Move X21, [X21+1600]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAF2000
	017 Move X0, [X0+1600]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1500], W8
	021 Move X8, [X21]
	022 Move W9, [X8+224]
	023 Compare W9, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X8
	026 Call 0x1C17DFC
	027 Move X8, [X21]
	028 Move X9, [X8+184]
	029 Move W9, [X9]
	030 Compare W9, 0
	031 JumpIfEqual {51}
	032 Compare X19, 0
	033 JumpIfEqual {38}
	034 Move X0, X31
	035 Call RuntimeHelpers.get_OffsetToStringData
	036 Move X8, [X21]
	037 Add X19, X19, W0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Call 0x1C51C08
	050 Return 
	051 Move X0, X20
	052 Move X1, X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]

Method: System.Void WriteMonoTrace(System.String message)

Disassembly:
	0x0364BF2C BLR X9
	0x0364BF30 LDP X20, X19, [X31 + 0x40]
	0x0364BF34 LDP X22, X21, [X31 + 0x30]
	0x0364BF38 LDP X24, X23, [X31 + 0x20]
	0x0364BF3C LDR X30, [X31 + 0x10]
	0x0364BF40 ADD X31, X31, 0x50
	0x0364BF44 RET
	0x0364BF48 BL 0x1C16F28
	0x0364BF4C BL 0x1C16F44
	0x0364BF50 MOV X1, X31
	0x0364BF54 BL 0x1C16DEC
	0x0364BF58 BL 0x1C16F20
	0x0364BF5C B 0x1C4C53C
	0x0364BF60 STR X30, [X31 - 0x20]!
	0x0364BF64 STP X20, X19, [X31 + 0x10]
	0x0364BF68 ADRP X19, 0xD95000
	0x0364BF6C ADRP X20, 0xAB0000
	0x0364BF70 LDRB W8, [X19 + 0x5E3]
	0x0364BF74 LDR X20, [X20 + 0x708]
	0x0364BF78 TBNZ X8, 0x0, 0x364BF90
	0x0364BF7C ADRP X0, 0xAB0000
	0x0364BF80 LDR X0, [X0 + 0x708]
	0x0364BF84 BL 0x1C16CF4
	0x0364BF88 MOVZ W8, 0x1
	0x0364BF8C STRB W8, [X19 + 0x5E3]
	0x0364BF90 LDR X0, [X20]
	0x0364BF94 BL 0x1C16F10
	0x0364BF98 MOV X1, X31
	0x0364BF9C MOV X19, X0
	0x0364BFA0 BL 0x33BDD8C
	0x0364BFA4 CBZ X19, 0x364BFC0
	0x0364BFA8 MOV X0, X19
	0x0364BFAC BL 0x364BFCC
	0x0364BFB0 MOV X0, X19
	0x0364BFB4 LDP X20, X19, [X31 + 0x10]
	0x0364BFB8 LDR X30, [X31], #0x20
	0x0364BFBC RET
	0x0364BFC0 BL 0x1C16F20
	0x0364BFC4 MOV X1, X31
	0x0364BFC8 B 0x33BDD8C
	0x0364BFCC STR X30, [X31 - 0x20]!
	0x0364BFD0 STP X20, X19, [X31 + 0x10]
	0x0364BFD4 ADRP X20, 0xD95000
	0x0364BFD8 LDRB W8, [X20 + 0x5E7]
	0x0364BFDC MOV X19, X0
	0x0364BFE0 TBNZ X8, 0x0, 0x364BFF8
	0x0364BFE4 ADRP X0, 0xAB0000
	0x0364BFE8 LDR X0, [X0 + 0x708]
	0x0364BFEC BL 0x1C16CF4
	0x0364BFF0 MOVZ W8, 0x1
	0x0364BFF4 STRB W8, [X20 + 0x5E7]
	0x0364BFF8 LDRB W8, [X19 + 0x20]
	0x0364BFFC CBNZ W8, 0x364C028
	0x0364C000 ADRP X8, 0xAAF000
	0x0364C004 LDR X8, [X8 + 0x708]
	0x0364C008 LDR X0, [X8]
	0x0364C00C LDR W8, [X0 + 0xE0]
	0x0364C010 CBNZ W8, 0x364C018
	0x0364C014 BL 0x1C16DFC
	0x0364C018 BL 0x1C4C53C
	0x0364C01C MOVZ W8, 0x1
	0x0364C020 STR X0, [X19 + 0x18]
	0x0364C024 STRB W8, [X19 + 0x20]
	0x0364C028 LDP X20, X19, [X31 + 0x10]
	0x0364C02C LDR X30, [X31], #0x20
	0x0364C030 RET
	0x0364C034 STR X30, [X31 - 0x30]!
	0x0364C038 STP X22, X21, [X31 + 0x10]
	0x0364C03C STP X20, X19, [X31 + 0x20]
	0x0364C040 ADRP X21, 0xD94000
	0x0364C044 ADRP X20, 0xAAF000
	0x0364C048 LDRB W8, [X21 + 0x5E4]
	0x0364C04C LDR X20, [X20 + 0x708]
	0x0364C050 MOV X19, X0
	0x0364C054 TBNZ X8, 0x0, 0x364C078
	0x0364C058 ADRP X0, 0xAAF000
	0x0364C05C LDR X0, [X0 + 0x708]
	0x0364C060 BL 0x1C16CF4
	0x0364C064 ADRP X0, 0xAA9000
	0x0364C068 LDR X0, [X0 + 0x570]
	0x0364C06C BL 0x1C16CF4
	0x0364C070 MOVZ W8, 0x1
	0x0364C074 STRB W8, [X21 + 0x5E4]
	0x0364C078 LDR X0, [X20]
	0x0364C07C LDR W8, [X0 + 0xE0]
	0x0364C080 CBNZ W8, 0x364C08C
	0x0364C084 BL 0x1C16DFC
	0x0364C088 LDR X0, [X20]
	0x0364C08C LDR X8, [X0 + 0xB8]
	0x0364C090 ADRP X21, 0xAA9000
	0x0364C094 MOV X0, X19
	0x0364C098 LDRB W22, [X8 + 0x8]
	0x0364C09C LDR X21, [X21 + 0x570]
	0x0364C0A0 BL 0x364C12C
	0x0364C0A4 MOV X19, X0
	0x0364C0A8 CBZ W22, 0x364C104
	0x0364C0AC LDR X0, [X20]
	0x0364C0B0 LDR W8, [X0 + 0xE0]
	0x0364C0B4 CBNZ W8, 0x364C0C0
	0x0364C0B8 BL 0x1C16DFC
	0x0364C0BC LDR X0, [X20]
	0x0364C0C0 LDR X8, [X21]
	0x0364C0C4 LDR X9, [X0 + 0xB8]
	0x0364C0C8 LDR W10, [X8 + 0xE0]
	0x0364C0CC LDR X20, [X9]
	0x0364C0D0 CBNZ W10, 0x364C0DC
	0x0364C0D4 MOV X0, X8
	0x0364C0D8 BL 0x1C16DFC
	0x0364C0DC MOVZ X8, 0x42BD

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD96000
	007 Move X21, 0xAF2000
	008 Move W8, [X20+1501]
	009 Move X21, [X21+1600]
	010 Move X19, X1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xAB1000
	016 Move X0, [X0+2392]
	017 Call 0x1C17CF4
	018 Move X0, 0xAF2000
	019 Move X0, [X0+1600]
	020 Call 0x1C17CF4
	021 Move X0, 0xAF2000
	022 Move X0, [X0+1688]
	023 Call 0x1C17CF4
	024 Move X0, 0xAF2000
	025 Move X0, [X0+1704]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1501], W8
	029 Move X0, [X21]
	030 Move X22, 0xAF2000
	031 Move W8, [X0+224]
	032 Move X22, [X22+1704]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X21]
	037 Move X8, [X0+184]
	038 Move X1, [X22]
	039 Move X2, X31
	040 Move X20, [X8+16]
	041 Move X0, X20
	042 Call String.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {83}
	047 Move X20, 0xAB1000
	048 Move X20, [X20+2392]
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X21, 0xD8E000
	055 Move W8, [X21+4007]
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0xAB1000
	059 Move X0, [X0+2392]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X21+4007], W8
	063 Move X0, [X20]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {69}
	067 Call 0x1C17DFC
	068 Move X0, [X20]
	069 Move X8, [X0+184]
	070 Move X0, [X8]
	071 Compare X0, 0
	072 JumpIfEqual {119}
	073 Move X8, [X0]
	074 Move X1, X19
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X3, [X8+584]
	080 Move X2, [X8+592]
	081 Move X30, [X31+48]
	082 CallNoReturn X3
	083 Move X8, 0xAF1000
	084 Move X8, [X8+1688]
	085 Move X0, X20
	086 Move X2, X31
	087 Move X1, [X8]
	088 Call String.op_Equality, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {120}
	093 Move X20, 0xAB0000
	094 Move X20, [X20+2392]
	095 Move X0, [X20]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X21, 0xD95000
	101 Move W8, [X21+1722]
	102 Compare W8, 0
	103 JumpIfNotEqual {109}
	104 Move X0, 0xAB0000
	105 Move X0, [X0+2392]
	106 Call 0x1C17CF4
	107 Move W8, 1
	108 Move [X21+1722], W8
	109 Move X0, [X20]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {115}
	113 Call 0x1C17DFC
	114 Move X0, [X20]
	115 Move X8, [X0+184]
	116 Move X0, [X8+8]
	117 Compare X0, 0
	118 JumpIfNotEqual {73}
	119 Call 0x1C17F20
	120 Move X0, [X21]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {126}
	124 Call 0x1C17DFC
	125 Move X0, [X21]
	126 Move X8, [X0+184]
	127 Move X1, X19
	128 Move X20, [X31+32]
	129 Move X19, [X31+40]
	130 Move X22, [X31+16]
	131 Move X21, [X31+24]
	132 Move X2, [X8+16]
	133 Move X30, [X31+48]

Method: System.Void WritePrefix()

Disassembly:
	0x0364C358 BIC X8, X8, X8, 0x3F
	0x0364C35C STR X8, [X19 + 0x10]
	0x0364C360 LDP X20, X19, [X31 + 0x10]
	0x0364C364 LDR X30, [X31], #0x20
	0x0364C368 RET
	0x0364C36C STP X30, X21, [X31 - 0x20]!
	0x0364C370 STP X20, X19, [X31 + 0x10]
	0x0364C374 ADRP X20, 0xD94000
	0x0364C378 ADRP X21, 0xAAF000
	0x0364C37C LDRB W8, [X20 + 0x5E9]
	0x0364C380 LDR X21, [X21 + 0x708]
	0x0364C384 MOV X19, X0
	0x0364C388 TBNZ X8, 0x0, 0x364C3A0
	0x0364C38C ADRP X0, 0xAAF000
	0x0364C390 LDR X0, [X0 + 0x708]
	0x0364C394 BL 0x1C16CF4
	0x0364C398 MOVZ W8, 0x1
	0x0364C39C STRB W8, [X20 + 0x5E9]
	0x0364C3A0 LDR X0, [X21]
	0x0364C3A4 LDR W8, [X0 + 0xE0]
	0x0364C3A8 CBNZ W8, 0x364C3B0
	0x0364C3AC BL 0x1C16DFC
	0x0364C3B0 BL 0x1C4C53C
	0x0364C3B4 MOVZ W8, 0x1
	0x0364C3B8 STP X31, X0, [X19 + 0x10]
	0x0364C3BC STRB W8, [X19 + 0x20]
	0x0364C3C0 LDP X20, X19, [X31 + 0x10]
	0x0364C3C4 LDP X30, X21, [X31], #0x20
	0x0364C3C8 RET
	0x0364C3CC STR X30, [X31 - 0x20]!
	0x0364C3D0 STP X20, X19, [X31 + 0x10]
	0x0364C3D4 ADRP X19, 0xD94000
	0x0364C3D8 ADRP X20, 0xAAF000
	0x0364C3DC LDRB W8, [X19 + 0x5EA]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD95000
	006 Move X20, 0xAF1000
	007 Move W8, [X21+1502]
	008 Move X20, [X20+1600]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAF1000
	015 Move X0, [X0+1600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1502], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W9, [X8]
	027 Compare W9, 0
	028 JumpIfEqual {34}
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 
	034 Move W9, [X0+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {40}
	037 Call 0x1C17DFC
	038 Move X8, [X20]
	039 Move X8, [X8+184]
	040 Move X1, [X8+8]
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Call DefaultTraceListener.WriteMonoTrace, X0, X1
	047 Return 

Method: System.Void WriteImpl(System.String message)

Disassembly:
	0x0364C3E0 LDR X20, [X20 + 0x708]
	0x0364C3E4 TBNZ X8, 0x0, 0x364C3FC
	0x0364C3E8 ADRP X0, 0xAAF000
	0x0364C3EC LDR X0, [X0 + 0x708]
	0x0364C3F0 BL 0x1C16CF4
	0x0364C3F4 MOVZ W8, 0x1
	0x0364C3F8 STRB W8, [X19 + 0x5EA]
	0x0364C3FC LDR X8, [X20]
	0x0364C400 LDP X20, X19, [X31 + 0x10]
	0x0364C404 MOVZ W9, 0x9680
	0x0364C408 MOVK W9, 0x980000
	0x0364C40C LDR X8, [X8 + 0xB8]
	0x0364C410 MOVZ W10, 0x1
	0x0364C414 STR X9, [X8]
	0x0364C418 STRB W10, [X8 + 0x8]
	0x0364C41C LDR X30, [X31], #0x20
	0x0364C420 RET
	0x0364C424 MOV X1, X31
	0x0364C428 B 0x33A51F0
	0x0364C42C STP X30, X21, [X31 - 0x20]!
	0x0364C430 STP X20, X19, [X31 + 0x10]
	0x0364C434 ADRP X20, 0xD94000
	0x0364C438 ADRP X21, 0xAF0000
	0x0364C43C LDRB W8, [X20 + 0x5EB]
	0x0364C440 LDR X21, [X21 + 0x730]
	0x0364C444 MOV X19, X0
	0x0364C448 TBNZ X8, 0x0, 0x364C460
	0x0364C44C ADRP X0, 0xAF0000
	0x0364C450 LDR X0, [X0 + 0x730]
	0x0364C454 BL 0x1C16CF4
	0x0364C458 MOVZ W8, 0x1
	0x0364C45C STRB W8, [X20 + 0x5EB]
	0x0364C460 LDR X0, [X21]
	0x0364C464 MOV X1, X31
	0x0364C468 BL 0x320A160
	0x0364C46C MOV X1, X0
	0x0364C470 MOV X0, X19
	0x0364C474 LDP X20, X19, [X31 + 0x10]
	0x0364C478 MOV X2, X31
	0x0364C47C LDP X30, X21, [X31], #0x20
	0x0364C480 B 0x338C8D8
	0x0364C484 MOV X3, X31
	0x0364C488 B 0x338C990
	0x0364C48C MOV X4, X31
	0x0364C490 B 0x338CA74
	0x0364C494 STR W1, [X0 + 0x20]
	0x0364C498 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD95000
	006 Move W8, [X21+1503]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xADA000
	014 Move X0, [X0+2320]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1503], W8
	018 Move X21, 0xADA000
	019 Move W8, [X20+32]
	020 Move X21, [X21+2320]
	021 Compare W8, 0
	022 JumpIfEqual {30}
	023 Move X8, [X20]
	024 Move X0, X20
	025 Move X9, [X8+488]
	026 Move X1, [X8+496]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X0, X20
	029 Call DefaultTraceListener.WritePrefix, X0
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call Debugger.IsLogging
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {51}
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W31
	047 Move X1, X31
	048 Move X2, X19
	049 Move X3, X31
	050 Call Debugger.Log, X0, X1, X2
	051 Move X0, X20
	052 Move X1, X19
	053 Call DefaultTraceListener.WriteDebugString, X0, X1
	054 Move X2, [X20+56]
	055 Move X1, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Call DefaultTraceListener.WriteLogFile, X0, X1, X2
	061 Return 

Method: System.Void WriteLogFile(System.String message, System.String logFile)

Disassembly:
	0x0364C0E0 MOVK X8, 0xE57A0000
	0x0364C0E4 MOVK X8, 0x94D5
	0x0364C0E8 MOVK X8, 0xD6BF0000
	0x0364C0EC SMULH X8, X20, X8, X31
	0x0364C0F0 ADD X8, X8, X20
	0x0364C0F4 SBFM X9, X8, 0x17, 0x3F
	0x0364C0F8 ADD X8, X9, X8, 0x3F, LSR
	0x0364C0FC SDIV X19, X19, X8
	0x0364C100 B 0x364C114
	0x0364C104 LDR X0, [X21]
	0x0364C108 LDR W8, [X0 + 0xE0]
	0x0364C10C CBNZ W8, 0x364C114
	0x0364C110 BL 0x1C16DFC
	0x0364C114 MOV X0, X19
	0x0364C118 LDP X20, X19, [X31 + 0x20]
	0x0364C11C LDP X22, X21, [X31 + 0x10]
	0x0364C120 MOV X1, X31
	0x0364C124 LDR X30, [X31], #0x30
	0x0364C128 B 0x339481C
	0x0364C12C STR X30, [X31 - 0x20]!
	0x0364C130 STP X20, X19, [X31 + 0x10]
	0x0364C134 ADRP X20, 0xD94000
	0x0364C138 LDRB W8, [X20 + 0x5E6]
	0x0364C13C MOV X19, X0
	0x0364C140 TBNZ X8, 0x0, 0x364C158
	0x0364C144 ADRP X0, 0xAAF000
	0x0364C148 LDR X0, [X0 + 0x708]
	0x0364C14C BL 0x1C16CF4
	0x0364C150 MOVZ W8, 0x1
	0x0364C154 STRB W8, [X20 + 0x5E6]
	0x0364C158 LDRB W8, [X19 + 0x20]
	0x0364C15C CBZ W8, 0x364C18C
	0x0364C160 ADRP X8, 0xAAF000
	0x0364C164 LDR X8, [X8 + 0x708]
	0x0364C168 LDR X0, [X8]
	0x0364C16C LDR W8, [X0 + 0xE0]
	0x0364C170 CBNZ W8, 0x364C178
	0x0364C174 BL 0x1C16DFC
	0x0364C178 BL 0x1C4C53C
	0x0364C17C LDP X9, X8, [X19 + 0x10]
	0x0364C180 SUB X8, X0, X8
	0x0364C184 ADD X0, X8, X9
	0x0364C188 B 0x364C190
	0x0364C18C LDR X0, [X19 + 0x10]
	0x0364C190 LDP X20, X19, [X31 + 0x10]
	0x0364C194 LDR X30, [X31], #0x20
	0x0364C198 RET
	0x0364C19C SUB X31, X31, 0x30
	0x0364C1A0 STP X30, X21, [X31 + 0x10]
	0x0364C1A4 STP X20, X19, [X31 + 0x20]
	0x0364C1A8 ADRP X21, 0xD94000
	0x0364C1AC ADRP X20, 0xAAF000
	0x0364C1B0 LDRB W8, [X21 + 0x5E5]
	0x0364C1B4 LDR X20, [X20 + 0x708]
	0x0364C1B8 MOV X19, X0
	0x0364C1BC TBNZ X8, 0x0, 0x364C1EC
	0x0364C1C0 ADRP X0, 0xAF0000
	0x0364C1C4 LDR X0, [X0 + 0x728]
	0x0364C1C8 BL 0x1C16CF4
	0x0364C1CC ADRP X0, 0xAAF000
	0x0364C1D0 LDR X0, [X0 + 0x708]
	0x0364C1D4 BL 0x1C16CF4
	0x0364C1D8 ADRP X0, 0xAA9000
	0x0364C1DC LDR X0, [X0 + 0x570]
	0x0364C1E0 BL 0x1C16CF4
	0x0364C1E4 MOVZ W8, 0x1
	0x0364C1E8 STRB W8, [X21 + 0x5E5]
	0x0364C1EC LDR X0, [X20]
	0x0364C1F0 STR X31, [X31 + 0x8]
	0x0364C1F4 LDR W8, [X0 + 0xE0]
	0x0364C1F8 CBNZ W8, 0x364C204
	0x0364C1FC BL 0x1C16DFC
	0x0364C200 LDR X0, [X20]
	0x0364C204 LDR X8, [X0 + 0xB8]
	0x0364C208 LDRB W8, [X8 + 0x8]
	0x0364C20C CBZ W8, 0x364C260
	0x0364C210 MOV X0, X19
	0x0364C214 BL 0x364C12C
	0x0364C218 LDR X8, [X20]
	0x0364C21C MOV X19, X0
	0x0364C220 LDR W9, [X8 + 0xE0]
	0x0364C224 CBNZ W9, 0x364C234
	0x0364C228 MOV X0, X8
	0x0364C22C BL 0x1C16DFC
	0x0364C230 LDR X8, [X20]
	0x0364C234 LDR X8, [X8 + 0xB8]
	0x0364C238 MOVZ X9, 0xF7CF
	0x0364C23C MOVK X9, 0xE3530000
	0x0364C240 MOVK X9, 0x9BA5
	0x0364C244 LDR X8, [X8]
	0x0364C248 MOVK X9, 0x20C40000
	0x0364C24C SMULH X8, X8, X9, X31
	0x0364C250 SBFM X9, X8, 0x7, 0x3F
	0x0364C254 ADD X8, X9, X8, 0x3F, LSR
	0x0364C258 SDIV X0, X19, X8
	0x0364C25C B 0x364C2BC
	0x0364C260 MOV X0, X19
	0x0364C264 BL 0x364C034
	0x0364C268 ADRP X8, 0xAA9000
	0x0364C26C LDR X8, [X8 + 0x570]
	0x0364C270 STR X0, [X31 + 0x8]
	0x0364C274 LDR X8, [X8]
	0x0364C278 LDR W9, [X8 + 0xE0]
	0x0364C27C CBNZ W9, 0x364C288
	0x0364C280 MOV X0, X8
	0x0364C284 BL 0x1C16DFC
	0x0364C288 ADD X0, X31, 0x8
	0x0364C28C MOV X1, X31
	0x0364C290 BL 0x3394200
	0x0364C294 MOVZ X8, 0x43E00000
	0x0364C298 FMOV D1, X8
	0x0364C29C FCMP D0, D1
	0x0364C2A0 B.GT 0x364C2CC
	0x0364C2A4 MOVZ X8, 0x7FF00000
	0x0364C2A8 FMOV D1, X8
	0x0364C2AC FCVTZS X9, D0
	0x0364C2B0 FCMP D0, D1
	0x0364C2B4 MOVZ X8, 0x80000000
	0x0364C2B8 CSEL X0, X8, X9, EQ
	0x0364C2BC LDP X20, X19, [X31 + 0x20]
	0x0364C2C0 LDP X30, X21, [X31 + 0x10]
	0x0364C2C4 ADD X31, X31, 0x30
	0x0364C2C8 RET
	0x0364C2CC BL 0x1C16F30
	0x0364C2D0 ADRP X8, 0xAF0000
	0x0364C2D4 LDR X8, [X8 + 0x728]
	0x0364C2D8 LDR X1, [X8]
	0x0364C2DC BL 0x1C16DEC
	0x0364C2E0 LDRB W0, [X0 + 0x20]
	0x0364C2E4 RET
	0x0364C2E8 STR X31, [X0 + 0x10]
	0x0364C2EC STRB W31, [X0 + 0x20]
	0x0364C2F0 RET
	0x0364C2F4 STR X30, [X31 - 0x20]!
	0x0364C2F8 STP X20, X19, [X31 + 0x10]
	0x0364C2FC ADRP X20, 0xD94000
	0x0364C300 LDRB W8, [X20 + 0x5E8]
	0x0364C304 MOV X19, X0
	0x0364C308 TBNZ X8, 0x0, 0x364C320
	0x0364C30C ADRP X0, 0xAAF000
	0x0364C310 LDR X0, [X0 + 0x708]
	0x0364C314 BL 0x1C16CF4
	0x0364C318 MOVZ W8, 0x1
	0x0364C31C STRB W8, [X20 + 0x5E8]
	0x0364C320 LDRB W8, [X19 + 0x20]
	0x0364C324 CBZ W8, 0x364C360
	0x0364C328 ADRP X8, 0xAAF000
	0x0364C32C LDR X8, [X8 + 0x708]
	0x0364C330 LDR X20, [X19 + 0x10]
	0x0364C334 LDR X0, [X8]
	0x0364C338 LDR W8, [X0 + 0xE0]
	0x0364C33C CBNZ W8, 0x364C344
	0x0364C340 BL 0x1C16DFC
	0x0364C344 BL 0x1C4C53C
	0x0364C348 LDR X8, [X19 + 0x18]
	0x0364C34C STRB W31, [X19 + 0x20]
	0x0364C350 SUB X8, X0, X8
	0x0364C354 ADD X8, X8, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD95000
	006 Move W8, [X21+1504]
	007 Move X19, X2
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xAEC000
	014 Move X0, [X0+1784]
	015 Call 0x1C17CF4
	016 Move X0, 0xAA8000
	017 Move X0, [X0+3584]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1504], W8
	021 Compare X19, 0
	022 JumpIfEqual {91}
	023 Move W8, [X19+16]
	024 Compare W8, 0
	025 JumpIfEqual {91}
	026 Move X8, 0xAEC000
	027 Move X8, [X8+1784]
	028 Move X0, [X8]
	029 Call 0x1C17F10
	030 Move X1, X19
	031 Move X2, X31
	032 Move X21, X0
	033 Call FileInfo..ctor, X0, X1
	034 Compare X21, 0
	035 JumpIfEqual {96}
	036 Move X8, [X21]
	037 Move X9, [X8+472]
	038 Move X1, [X8+480]
	039 Move X0, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {48}
	045 Move X0, X21
	046 Move X1, X31
	047 Call FileInfo.AppendText, X0
	048 Move X0, X21
	049 Move X1, X31
	050 Call FileInfo.CreateText, X0
	051 Move X19, X0
	052 Compare X0, 0
	053 JumpIfEqual {97}
	054 Move X8, [X19]
	055 Move X9, [X8+584]
	056 Move X2, [X8+592]
	057 Move X0, X19
	058 Move X1, X20
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X8, [X19]
	061 Move X9, [X8+472]
	062 Move X1, [X8+480]
	063 Move X0, X19
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move X20, X31
	066 Move X10, 0xAA8000
	067 Move X8, [X19]
	068 Move X10, [X10+3584]
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 Move X1, [X10]
	071 Compare X9, 0
	072 JumpIfEqual {79}
	073 Move X10, [X8+176]
	074 Add X10, X10, 8
	075 NotImplemented "Instruction LDUR not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Subtract X9, X9, 1
	078 Add X10, X10, 16
	079 Move X0, X19
	080 Move W2, W31
	081 Call 0x1C5D788
	082 NotImplemented "Instruction LDRSW not yet implemented."
	083 Add X8, X8, X9
	084 Add X0, X8, 312
	085 Move X8, [X0]
	086 Move X1, [X0+8]
	087 Move X0, X19
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Compare X20, 0
	090 JumpIfNotEqual {98}
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Return 
	096 Call 0x1C17F20
	097 Call 0x1C17F20
	098 Move X0, X20
	099 Call 0x1C17F18
	100 Move X21, X0
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X0, X21
	103 Call 0x3EB2AD0
	104 Move X19, X0
	105 Move X0, 0xAAE000
	106 Move X0, [X0+3264]
	107 Call 0x1C17D08
	108 Move X8, [X19]
	109 Move X1, [X8]
	110 Call 0x1C18270
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {121}
	115 Move X20, [X31+16]
	116 Move X19, [X31+24]
	117 Move X30, [X31+32]
	118 Move X21, [X31+40]
	119 Call 0x3EB2AE0
	120 Return 
	121 Move W0, 8
	122 Call 0x3EB2AF0
	123 Move X8, [X19]
	124 Move [X0], X8
	125 Move X1, 0x869000
	126 Add X1, X1, 3672
	127 Move X2, X31
	128 Call 0x3EB2B00
	129 Move X21, X0
	130 Call 0x3EB2AE0
	131 Move X21, X0
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X0, X21
	134 Call 0x3EB2AD0
	135 Move X20, [X0]
	136 Call 0x3EB2AE0
	137 Compare X19, 0
	138 JumpIfNotEqual {66}
	139 Move X20, X31
	140 Move X21, X0
	141 Compare X19, 0
	142 JumpIfEqual {166}
	143 Move X10, 0xAA8000
	144 Move X8, [X19]
	145 Move X10, [X10+3584]
	146 NotImplemented "Instruction LDRH not yet implemented."
	147 Move X1, [X10]
	148 Compare X9, 0
	149 JumpIfEqual {156}
	150 Move X10, [X8+176]
	151 Add X10, X10, 8
	152 NotImplemented "Instruction LDUR not yet implemented."
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Subtract X9, X9, 1
	155 Add X10, X10, 16
	156 Move X0, X19
	157 Move W2, W31
	158 Call 0x1C5D788
	159 NotImplemented "Instruction LDRSW not yet implemented."
	160 Add X8, X8, X9
	161 Add X0, X8, 312
	162 Move X8, [X0]
	163 Move X1, [X0+8]
	164 Move X0, X19
	165 NotImplemented "Instruction BLR not yet implemented."
	166 Compare X20, 0
	167 JumpIfNotEqual {170}
	168 Move X0, X21
	169 Call 0x1D2D690
	170 Move X0, X20
	171 Call 0x1C17F18
	172 Call 0x1991590

Method: System.Void Write(System.String message)

Disassembly:
	0x0364C49C STR X30, [X31 - 0x10]!

ISIL:
	001 Call DefaultTraceListener.WriteImpl, X0, X1
	002 Return 

Method: System.Void WriteLine(System.String message)

Disassembly:
	0x0364C4A0 CBZ X1, 0x364C4BC
	0x0364C4A4 LDR W4, [X1 + 0x18]
	0x0364C4A8 MOV X2, X1
	0x0364C4AC MOVZ W1, 0x10
	0x0364C4B0 MOV W3, W31
	0x0364C4B4 LDR X30, [X31], #0x10
	0x0364C4B8 B 0x364C4D4
	0x0364C4BC BL 0x1C16F20
	0x0364C4C0 MOV W4, W3
	0x0364C4C4 MOV W3, W2
	0x0364C4C8 MOV X2, X1
	0x0364C4CC MOVZ W1, 0x10
	0x0364C4D0 B 0x364C4D4
	0x0364C4D4 SUB X31, X31, 0x40
	0x0364C4D8 STP X30, X23, [X31 + 0x10]
	0x0364C4DC STP X22, X21, [X31 + 0x20]
	0x0364C4E0 STP X20, X19, [X31 + 0x30]
	0x0364C4E4 MOV W20, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, X31
	006 Move X19, X1
	007 Call Environment.get_NewLine
	008 Move X1, X0
	009 Move X0, X19
	010 Move X2, X31
	011 Call String.Concat, X0, X1
	012 Move X1, X0
	013 Move X0, X20
	014 Call DefaultTraceListener.WriteImpl, X0, X1
	015 Move W8, 1
	016 Move [X20+32], W8
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 

