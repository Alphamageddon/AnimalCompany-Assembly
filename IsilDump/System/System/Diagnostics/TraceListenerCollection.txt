Type: System.Diagnostics.TraceListenerCollection

Method: System.Void .ctor()

Disassembly:
	0x0364AB0C LDP X22, X21, [X31 + 0x10]
	0x0364AB10 LDR X30, [X31], #0x30
	0x0364AB14 RET
	0x0364AB18 MOV X0, X20
	0x0364AB1C BL 0x1C16F18
	0x0364AB20 BL 0x1C16F20
	0x0364AB24 B 0x364AB28
	0x0364AB28 MOV X21, X0
	0x0364AB2C CMP W1, 0x1
	0x0364AB30 B.NE 0x364AB48
	0x0364AB34 MOV X0, X21
	0x0364AB38 BL 0x3EB1AD0
	0x0364AB3C LDR X20, [X0]
	0x0364AB40 BL 0x3EB1AE0
	0x0364AB44 B 0x364AAF0
	0x0364AB48 MOV X20, X31
	0x0364AB4C B 0x364AB54
	0x0364AB50 MOV X21, X0
	0x0364AB54 LDRB W8, [X31 + 0xC]
	0x0364AB58 CBZ W8, 0x364AB68
	0x0364AB5C MOV X0, X19
	0x0364AB60 MOV X1, X31
	0x0364AB64 BL 0x33E14E4
	0x0364AB68 CBNZ X20, 0x364AB74
	0x0364AB6C MOV X0, X21
	0x0364AB70 BL 0x1D2C690

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD97000
	006 Move X20, 0xAD7000
	007 Move W8, [X21+1487]
	008 Move X20, [X20+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAD7000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1487], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Call 0x1C17F10
	024 Move W1, 1
	025 Move X2, X31
	026 Move X20, X0
	027 Call ArrayList..ctor, X0, X1
	028 Move [X19+16], X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x0364B2A4 BL 0x3EB1AE0
	0x0364B2A8 B 0x364B344
	0x0364B2AC MOV X21, X0
	0x0364B2B0 CMP W1, 0x1
	0x0364B2B4 B.NE 0x364B2D0
	0x0364B2B8 MOV X0, X21
	0x0364B2BC BL 0x3EB1AD0
	0x0364B2C0 LDR X20, [X0]
	0x0364B2C4 BL 0x3EB1AE0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 Add(System.Diagnostics.TraceListener listener)

Disassembly:
	0x0364AC9C BL 0x33E14E4
	0x0364ACA0 CBNZ X20, 0x364ACAC
	0x0364ACA4 MOV X0, X21
	0x0364ACA8 BL 0x1D2C690
	0x0364ACAC MOV X0, X20
	0x0364ACB0 BL 0x1C16F18
	0x0364ACB4 BL 0x1990590
	0x0364ACB8 STP X30, X21, [X31 - 0x20]!
	0x0364ACBC STP X20, X19, [X31 + 0x10]
	0x0364ACC0 ADRP X20, 0xD96000
	0x0364ACC4 ADRP X19, 0xAD0000
	0x0364ACC8 LDRB W8, [X20 + 0x5D9]
	0x0364ACCC LDR X19, [X19 + 0x1D0]
	0x0364ACD0 TBNZ X8, 0x0, 0x364AD24
	0x0364ACD4 ADRP X0, 0xAF2000
	0x0364ACD8 LDR X0, [X0 + 0x640]
	0x0364ACDC BL 0x1C16CF4
	0x0364ACE0 ADRP X0, 0xAD0000
	0x0364ACE4 LDR X0, [X0 + 0x1D0]
	0x0364ACE8 BL 0x1C16CF4
	0x0364ACEC ADRP X0, 0xAF2000
	0x0364ACF0 LDR X0, [X0 + 0x698]
	0x0364ACF4 BL 0x1C16CF4
	0x0364ACF8 ADRP X0, 0xAF2000
	0x0364ACFC LDR X0, [X0 + 0x6A0]
	0x0364AD00 BL 0x1C16CF4
	0x0364AD04 ADRP X0, 0xAF2000
	0x0364AD08 LDR X0, [X0 + 0x6A8]
	0x0364AD0C BL 0x1C16CF4
	0x0364AD10 ADRP X0, 0xAA9000
	0x0364AD14 LDR X0, [X0 + 0x988]
	0x0364AD18 BL 0x1C16CF4
	0x0364AD1C MOVZ W8, 0x1
	0x0364AD20 STRB W8, [X20 + 0x5D9]
	0x0364AD24 LDR X0, [X19]
	0x0364AD28 ADRP X21, 0xAF2000
	0x0364AD2C LDR W8, [X0 + 0xE0]
	0x0364AD30 LDR X21, [X21 + 0x640]
	0x0364AD34 CBNZ W8, 0x364AD40
	0x0364AD38 BL 0x1C16DFC
	0x0364AD3C LDR X0, [X19]
	0x0364AD40 LDR X8, [X0 + 0xB8]
	0x0364AD44 LDR X9, [X21]
	0x0364AD48 LDRH W8, [X8 + 0xA]
	0x0364AD4C LDR X9, [X9 + 0xB8]
	0x0364AD50 CMP W8, 0x5C
	0x0364AD54 CSET W8, EQ
	0x0364AD58 STRB W8, [X9]
	0x0364AD5C B.EQ 0x364ADE8
	0x0364AD60 ADRP X8, 0xAF2000
	0x0364AD64 LDR X8, [X8 + 0x6A0]
	0x0364AD68 ADRP X20, 0xAF2000
	0x0364AD6C MOV X1, X31
	0x0364AD70 LDR X0, [X8]
	0x0364AD74 LDR X20, [X20 + 0x6A8]
	0x0364AD78 BL 0x33C19D0
	0x0364AD7C LDR X1, [X20]
	0x0364AD80 CMP X0, 0x0
	0x0364AD84 CSEL X19, X1, X0, EQ
	0x0364AD88 CBZ X19, 0x364ADE8
	0x0364AD8C MOV X0, X19
	0x0364AD90 MOV X2, X31
	0x0364AD94 BL 0x3226F64
	0x0364AD98 TBNZ X0, 0x0, 0x364ADB8
	0x0364AD9C ADRP X20, 0xAF2000
	0x0364ADA0 LDR X20, [X20 + 0x698]
	0x0364ADA4 MOV X0, X19
	0x0364ADA8 MOV X2, X31
	0x0364ADAC LDR X1, [X20]
	0x0364ADB0 BL 0x3226F64
	0x0364ADB4 TBZ X0, 0x0, 0x364ADD0
	0x0364ADB8 LDR X20, [X20]
	0x0364ADBC MOV X0, X19
	0x0364ADC0 MOV X1, X20
	0x0364ADC4 BL 0x364ADF4
	0x0364ADC8 MOV X19, X20
	0x0364ADCC B 0x364ADDC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD97000
	007 Move X19, 0xAF3000
	008 Move W8, [X22+1488]
	009 Move X19, [X19+1584]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAF3000
	017 Move X0, [X0+1584]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1488], W8
	021 Move X1, X20
	022 Call TraceListenerCollection.InitializeListener, X0, X1
	023 Move X0, [X19]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Move X19, [X8+24]
	031 Move [X31+12], W31
	032 Add X1, X31, 12
	033 Move X0, X19
	034 Move X2, X31
	035 Call Monitor.Enter, X0, X1
	036 Move X0, [X21+16]
	037 Compare X0, 0
	038 JumpIfEqual {63}
	039 Move X8, [X0]
	040 Move X9, [X8+776]
	041 Move X2, [X8+784]
	042 Move X1, X20
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move W21, W0
	045 Move X20, X31
	046 Move W8, [X31+12]
	047 Compare W8, 0
	048 JumpIfEqual {52}
	049 Move X0, X19
	050 Move X1, X31
	051 Call Monitor.Exit, X0
	052 Compare X20, 0
	053 JumpIfNotEqual {61}
	054 Move W0, W21
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return X0
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Call 0x1C17F20
	064 Move X21, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Call 0x3EB2AD0
	068 Move X20, [X0]
	069 Call 0x3EB2AE0
	070 Move W21, W31
	071 Move X20, X31
	072 Move X21, X0
	073 Move W8, [X31+12]
	074 Compare W8, 0
	075 JumpIfEqual {79}
	076 Move X0, X19
	077 Move X1, X31
	078 Call Monitor.Exit, X0
	079 Compare X20, 0
	080 JumpIfNotEqual {83}
	081 Move X0, X21
	082 Call 0x1D2D690
	083 Move X0, X20
	084 Call 0x1C17F18
	085 Call 0x1991590

Method: System.Void Clear()

Disassembly:
	0x0364B3B8 LDR W9, [X0 + 0xE0]
	0x0364B3BC CBNZ W9, 0x364B3CC
	0x0364B3C0 BL 0x1C16DFC
	0x0364B3C4 LDR X8, [X20]
	0x0364B3C8 LDR X8, [X8 + 0xB8]
	0x0364B3CC LDR X1, [X8 + 0x8]
	0x0364B3D0 MOV X0, X19
	0x0364B3D4 LDP X20, X19, [X31 + 0x10]
	0x0364B3D8 LDP X30, X21, [X31], #0x20
	0x0364B3DC B 0x364AF2C
	0x0364B3E0 STP X30, X21, [X31 - 0x20]!
	0x0364B3E4 STP X20, X19, [X31 + 0x10]
	0x0364B3E8 ADRP X21, 0xD95000
	0x0364B3EC LDRB W8, [X21 + 0x5DF]
	0x0364B3F0 MOV X19, X1
	0x0364B3F4 MOV X20, X0
	0x0364B3F8 TBNZ X8, 0x0, 0x364B410
	0x0364B3FC ADRP X0, 0xADA000
	0x0364B400 LDR X0, [X0 + 0x910]
	0x0364B404 BL 0x1C16CF4
	0x0364B408 MOVZ W8, 0x1
	0x0364B40C STRB W8, [X21 + 0x5DF]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD96000
	006 Move X21, 0xAD6000
	007 Move W8, [X20+1489]
	008 Move X21, [X21+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAD6000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1489], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call ArrayList..ctor, X0
	024 Move [X19+16], X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return 

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x0364AF48 MOV X19, X1
	0x0364AF4C TBNZ X8, 0x0, 0x364AF88
	0x0364AF50 ADRP X0, 0xAB1000
	0x0364AF54 LDR X0, [X0 + 0x958]
	0x0364AF58 BL 0x1C16CF4
	0x0364AF5C ADRP X0, 0xAF2000
	0x0364AF60 LDR X0, [X0 + 0x640]
	0x0364AF64 BL 0x1C16CF4
	0x0364AF68 ADRP X0, 0xAF2000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+904]
	007 Move X1, [X8+912]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void InitializeListener(System.Diagnostics.TraceListener listener)

Disassembly:
	0x0364B2C8 CBNZ X19, 0x364B1B0
	0x0364B2CC B 0x364B210
	0x0364B2D0 MOV X20, X31
	0x0364B2D4 B 0x364B2DC
	0x0364B2D8 MOV X21, X0
	0x0364B2DC CBZ X19, 0x364B340
	0x0364B2E0 ADRP X10, 0xAA8000
	0x0364B2E4 LDR X8, [X19]
	0x0364B2E8 LDR X10, [X10 + 0xE00]
	0x0364B2EC LDRH W9, [X8 + 0x12E]
	0x0364B2F0 LDR X1, [X10]
	0x0364B2F4 CBZ X9, 0x364B318
	0x0364B2F8 LDR X10, [X8 + 0xB0]
	0x0364B2FC ADD X10, X10, 0x8
	0x0364B300 LDUR X11, [X10 - 0x8]
	0x0364B304 CMP X11, X1
	0x0364B308 B.EQ 0x364B328
	0x0364B30C SUBS X9, X9, 0x1
	0x0364B310 ADD X10, X10, 0x10
	0x0364B314 B.NE 0x364B300
	0x0364B318 MOV X0, X19
	0x0364B31C MOV W2, W31
	0x0364B320 BL 0x1C5C788
	0x0364B324 B 0x364B334
	0x0364B328 LDRSW X9, [X10]
	0x0364B32C ADD X8, X8, X9, 0x4, LSL
	0x0364B330 ADD X0, X8, 0x138
	0x0364B334 LDP X8, X1, [X0]
	0x0364B338 MOV X0, X19
	0x0364B33C BLR X8
	0x0364B340 CBNZ X20, 0x364B34C
	0x0364B344 MOV X0, X21
	0x0364B348 BL 0x1D2C690
	0x0364B34C MOV X0, X20
	0x0364B350 BL 0x1C16F18
	0x0364B354 BL 0x1990590
	0x0364B358 STP X30, X21, [X31 - 0x20]!
	0x0364B35C STP X20, X19, [X31 + 0x10]
	0x0364B360 ADRP X21, 0xD95000
	0x0364B364 ADRP X20, 0xAF1000
	0x0364B368 LDRB W8, [X21 + 0x5DE]
	0x0364B36C LDR X20, [X20 + 0x640]
	0x0364B370 MOV X19, X0
	0x0364B374 TBNZ X8, 0x0, 0x364B38C
	0x0364B378 ADRP X0, 0xAF1000
	0x0364B37C LDR X0, [X0 + 0x640]
	0x0364B380 BL 0x1C16CF4
	0x0364B384 MOVZ W8, 0x1
	0x0364B388 STRB W8, [X21 + 0x5DE]
	0x0364B38C LDR X0, [X20]
	0x0364B390 LDR W8, [X0 + 0xE0]
	0x0364B394 CBNZ W8, 0x364B3A0
	0x0364B398 BL 0x1C16DFC
	0x0364B39C LDR X0, [X20]
	0x0364B3A0 LDR X8, [X0 + 0xB8]
	0x0364B3A4 LDRB W9, [X8]
	0x0364B3A8 CBZ W9, 0x364B3B8
	0x0364B3AC LDP X20, X19, [X31 + 0x10]
	0x0364B3B0 LDP X30, X21, [X31], #0x20
	0x0364B3B4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD96000
	006 Move W8, [X20+1490]
	007 Move X19, X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAF2000
	013 Move X0, [X0+1584]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1490], W8
	017 Compare X19, 0
	018 JumpIfEqual {54}
	019 Move X20, 0xAF2000
	020 Move X20, [X20+1584]
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call TraceInternal.get_IndentSize
	027 Move W1, W0
	028 Move X0, X19
	029 Call TraceListener.set_IndentSize, X0, X1
	030 Move X21, 0xD96000
	031 Move W8, [X21+1721]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0xAF2000
	035 Move X0, [X0+1584]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+1721], W8
	039 Move X0, [X20]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X20]
	045 Call 0x1C17D0C
	046 Move W8, [X0]
	047 NotImplemented "Instruction BIC not yet implemented."
	048 Move [X19+24], W8
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return 
	054 Move X0, 0xAAE000
	055 Move X0, [X0+1320]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xAF2000
	060 Move X0, [X0+1640]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call ArgumentNullException..ctor, X0, X1
	066 Move X0, 0xAF2000
	067 Move X0, [X0+1648]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x0364B410 ADRP X21, 0xADA000
	0x0364B414 LDRB W8, [X20 + 0x20]
	0x0364B418 LDR X21, [X21 + 0x910]
	0x0364B41C CBZ W8, 0x364B438
	0x0364B420 LDR X8, [X20]
	0x0364B424 MOV X0, X20
	0x0364B428 LDP X9, X1, [X8 + 0x1E8]
	0x0364B42C BLR X9
	0x0364B430 MOV X0, X20
	0x0364B434 BL 0x364B358
	0x0364B438 LDR X0, [X21]
	0x0364B43C LDR W8, [X0 + 0xE0]
	0x0364B440 CBNZ W8, 0x364B448
	0x0364B444 BL 0x1C16DFC
	0x0364B448 MOV X0, X31
	0x0364B44C BL 0x334DD44
	0x0364B450 TBZ X0, 0x0, 0x364B47C
	0x0364B454 LDR X0, [X21]
	0x0364B458 LDR W8, [X0 + 0xE0]
	0x0364B45C CBNZ W8, 0x364B464
	0x0364B460 BL 0x1C16DFC
	0x0364B464 MOV W0, W31
	0x0364B468 MOV X1, X31
	0x0364B46C MOV X2, X19
	0x0364B470 MOV X3, X31
	0x0364B474 BL 0x334DD4C
	0x0364B478 B 0x364B488
	0x0364B47C MOV X0, X20
	0x0364B480 MOV X1, X19
	0x0364B484 BL 0x364AE7C
	0x0364B488 LDR X2, [X20 + 0x38]
	0x0364B48C MOV X1, X19
	0x0364B490 LDP X20, X19, [X31 + 0x10]
	0x0364B494 LDP X30, X21, [X31], #0x20
	0x0364B498 B 0x364B0E0
	0x0364B49C B 0x364B3E0
	0x0364B4A0 STR X30, [X31 - 0x20]!
	0x0364B4A4 STP X20, X19, [X31 + 0x10]
	0x0364B4A8 MOV X20, X0
	0x0364B4AC MOV X0, X31
	0x0364B4B0 MOV X19, X1
	0x0364B4B4 BL 0x33C1548
	0x0364B4B8 MOV X1, X0
	0x0364B4BC MOV X0, X19
	0x0364B4C0 MOV X2, X31
	0x0364B4C4 BL 0x321B938
	0x0364B4C8 MOV X1, X0
	0x0364B4CC MOV X0, X20
	0x0364B4D0 BL 0x364B3E0
	0x0364B4D4 MOVZ W8, 0x1
	0x0364B4D8 STRB W8, [X20 + 0x20]
	0x0364B4DC LDP X20, X19, [X31 + 0x10]
	0x0364B4E0 LDR X30, [X31], #0x20
	0x0364B4E4 RET
	0x0364B4E8 STP X30, X19, [X31 - 0x10]!
	0x0364B4EC MOV X1, X31
	0x0364B4F0 MOV X19, X0
	0x0364B4F4 BL 0x33BDD8C
	0x0364B4F8 MOVI V0.2D, 0x0
	0x0364B4FC STUR X31, [X19 + 0x7D]
	0x0364B500 STP V0, V0, [X19 + 0x60]
	0x0364B504 STP V0, V0, [X19 + 0x40]
	0x0364B508 STP V0, V0, [X19 + 0x20]
	0x0364B50C STR V0, [X19 + 0x1]
	0x0364B510 STUR V0, [X19 + 0x88]
	0x0364B514 STUR V0, [X19 + 0x98]
	0x0364B518 LDP X30, X19, [X31], #0x10
	0x0364B51C RET
	0x0364B520 LDR X0, [X0 + 0x28]
	0x0364B524 RET
	0x0364B528 LDR X0, [X0 + 0x70]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD96000
	007 Move X19, 0xAF2000
	008 Move W8, [X22+1491]
	009 Move X19, [X19+1584]
	010 Move W20, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAF2000
	017 Move X0, [X0+1584]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1491], W8
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X19, [X8+24]
	029 Move [X31+12], W31
	030 Add X1, X31, 12
	031 Move X0, X19
	032 Move X2, X31
	033 Call Monitor.Enter, X0, X1
	034 Move X0, [X21+16]
	035 Compare X0, 0
	036 JumpIfEqual {59}
	037 Move X8, [X0]
	038 Move X9, [X8+984]
	039 Move X2, [X8+992]
	040 Move W1, W20
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X20, X31
	043 Move W8, [X31+12]
	044 Compare W8, 0
	045 JumpIfEqual {49}
	046 Move X0, X19
	047 Move X1, X31
	048 Call Monitor.Exit, X0
	049 Compare X20, 0
	050 JumpIfNotEqual {57}
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Return 
	057 Move X0, X20
	058 Call 0x1C17F18
	059 Call 0x1C17F20
	060 Move X21, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X21
	063 Call 0x3EB2AD0
	064 Move X20, [X0]
	065 Call 0x3EB2AE0
	066 Move X20, X31
	067 Move X21, X0
	068 Move W8, [X31+12]
	069 Compare W8, 0
	070 JumpIfEqual {74}
	071 Move X0, X19
	072 Move X1, X31
	073 Call Monitor.Exit, X0
	074 Compare X20, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X21
	077 Call 0x1D2D690
	078 Move X0, X20
	079 Call 0x1C17F18
	080 Call 0x1991590

Method: System.Object System.Collections.IList.get_Item(System.Int32 index)

Disassembly:
	0x0364B52C RET
	0x0364B530 B 0x1C50CA0
	0x0364B534 STR X30, [X31 - 0x20]!
	0x0364B538 STP X20, X19, [X31 + 0x10]
	0x0364B53C MOV X19, X0
	0x0364B540 CBZ X1, 0x364B56C
	0x0364B544 MOV X0, X31
	0x0364B548 MOV X20, X1
	0x0364B54C BL 0x32C1424

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+744]
	007 Move X2, [X8+752]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)

Disassembly:
	0x0364B550 LDR W2, [X20 + 0x10]
	0x0364B554 ADD X1, X20, W0, SXTW
	0x0364B558 CBZ X19, 0x364B574
	0x0364B55C MOV X0, X19
	0x0364B560 LDP X20, X19, [X31 + 0x10]
	0x0364B564 LDR X30, [X31], #0x20
	0x0364B568 B 0x1C50CA0
	0x0364B56C MOV W2, W31
	0x0364B570 CBNZ X19, 0x364B55C
	0x0364B574 BL 0x1C16F20
	0x0364B578 STP X30, X21, [X31 - 0x20]!
	0x0364B57C STP X20, X19, [X31 + 0x10]
	0x0364B580 ADRP X20, 0xD95000
	0x0364B584 ADRP X21, 0xACF000
	0x0364B588 LDRB W8, [X20 + 0x5E1]
	0x0364B58C LDR X21, [X21 + 0x1D0]
	0x0364B590 MOV X19, X0
	0x0364B594 TBNZ X8, 0x0, 0x364B5B8
	0x0364B598 ADRP X0, 0xAF1000
	0x0364B59C LDR X0, [X0 + 0x6B0]
	0x0364B5A0 BL 0x1C16CF4
	0x0364B5A4 ADRP X0, 0xACF000
	0x0364B5A8 LDR X0, [X0 + 0x1D0]
	0x0364B5AC BL 0x1C16CF4
	0x0364B5B0 MOVZ W8, 0x1
	0x0364B5B4 STRB W8, [X20 + 0x5E1]
	0x0364B5B8 LDR X0, [X21]
	0x0364B5BC LDR W8, [X0 + 0xE0]
	0x0364B5C0 CBNZ W8, 0x364B5C8
	0x0364B5C4 BL 0x1C16DFC
	0x0364B5C8 MOV X0, X19
	0x0364B5CC MOV X1, X31
	0x0364B5D0 BL 0x32EE2E0
	0x0364B5D4 MOV X1, X31
	0x0364B5D8 BL 0x32E57A8
	0x0364B5DC TBZ X0, 0x0, 0x364B638
	0x0364B5E0 ADRP X8, 0xAF1000
	0x0364B5E4 LDR X8, [X8 + 0x6B0]
	0x0364B5E8 LDR X0, [X8]
	0x0364B5EC BL 0x1C16F10
	0x0364B5F0 MOV X1, X31
	0x0364B5F4 MOV X20, X0
	0x0364B5F8 BL 0x33BDD8C
	0x0364B5FC MOVI V0.2D, 0x0
	0x0364B600 MOV X0, X20
	0x0364B604 MOV X1, X19
	0x0364B608 STUR X31, [X20 + 0x7D]
	0x0364B60C STP V0, V0, [X20 + 0x60]
	0x0364B610 STP V0, V0, [X20 + 0x40]
	0x0364B614 STP V0, V0, [X20 + 0x20]
	0x0364B618 STR V0, [X20 + 0x1]
	0x0364B61C STUR V0, [X20 + 0x88]
	0x0364B620 STUR V0, [X20 + 0x98]
	0x0364B624 BL 0x364B534
	0x0364B628 MOV X0, X20
	0x0364B62C LDP X20, X19, [X31 + 0x10]
	0x0364B630 LDP X30, X21, [X31], #0x20
	0x0364B634 RET
	0x0364B638 ADRP X0, 0xAD6000
	0x0364B63C LDR X0, [X0 + 0x7A0]
	0x0364B640 BL 0x1C16D08
	0x0364B644 BL 0x1C16F10
	0x0364B648 MOV X1, X19
	0x0364B64C MOV X2, X31
	0x0364B650 MOV X20, X0
	0x0364B654 BL 0x32E1E68
	0x0364B658 ADRP X0, 0xAF1000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD96000
	007 Move W8, [X22+1492]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAF2000
	016 Move X0, [X0+1592]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1492], W8
	020 Compare X19, 0
	021 JumpIfEqual {49}
	022 Move X8, 0xAF2000
	023 Move X8, [X8+1592]
	024 Move X9, [X19]
	025 Move X8, [X8]
	026 Move W11, [X9+304]
	027 Move W10, [X8+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, [X9+200]
	030 Add X9, X9, X10
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X1, X19
	034 Call TraceListenerCollection.InitializeListener, X0, X1
	035 Move X0, [X21+16]
	036 Compare X0, 0
	037 JumpIfEqual {74}
	038 Move X8, [X0]
	039 Move W1, W20
	040 Move X2, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X4, [X8+760]
	044 Move X3, [X8+768]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 CallNoReturn X4
	049 Move X0, 0xAF2000
	050 Move X0, [X0+1656]
	051 Call 0x1C17D08
	052 Move X1, X31
	053 Call SR.GetString, X0
	054 Move X19, X0
	055 Move X0, 0xAB1000
	056 Move X0, [X0+1400]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X20, X0
	060 Move X0, 0xAB3000
	061 Move X0, [X0+3784]
	062 Call 0x1C17D08
	063 Move X2, X0
	064 Move X0, X20
	065 Move X1, X19
	066 Move X3, X31
	067 Call ArgumentException..ctor, X0, X1, X2
	068 Move X0, 0xAF2000
	069 Move X0, [X0+1664]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X20
	073 Call 0x1C17DEC
	074 Call 0x1C17F20

Method: System.Boolean System.Collections.IList.get_IsReadOnly()

Disassembly:
	0x0364B65C LDR X0, [X0 + 0x6B8]
	0x0364B660 BL 0x1C16D08

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean System.Collections.IList.get_IsFixedSize()

Disassembly:
	0x0364B664 MOV X1, X0
	0x0364B668 MOV X0, X20

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Int32 System.Collections.IList.Add(System.Object value)

Disassembly:
	0x0364B66C BL 0x1C16DEC
	0x0364B670 CBZ X0, 0x364B67C
	0x0364B674 MOV X3, X31
	0x0364B678 B 0x3234E54
	0x0364B67C STR X30, [X31 - 0x10]!
	0x0364B680 BL 0x1C16F20
	0x0364B684 SUB X31, X31, 0x50
	0x0364B688 STR X30, [X31 + 0x10]
	0x0364B68C STP X24, X23, [X31 + 0x20]
	0x0364B690 STP X22, X21, [X31 + 0x30]
	0x0364B694 STP X20, X19, [X31 + 0x40]
	0x0364B698 ADRP X20, 0xD95000
	0x0364B69C ADRP X21, 0xAA8000
	0x0364B6A0 ADRP X23, 0xAA8000
	0x0364B6A4 LDRB W8, [X20 + 0x5E2]
	0x0364B6A8 LDR X21, [X21 + 0x8F0]
	0x0364B6AC LDR X23, [X23 + 0x9D0]
	0x0364B6B0 MOV X19, X0
	0x0364B6B4 TBNZ X8, 0x0, 0x364B780
	0x0364B6B8 ADRP X0, 0xAA8000
	0x0364B6BC LDR X0, [X0 + 0xB58]
	0x0364B6C0 BL 0x1C16CF4
	0x0364B6C4 ADRP X0, 0xAA8000
	0x0364B6C8 LDR X0, [X0 + 0x9D0]
	0x0364B6CC BL 0x1C16CF4
	0x0364B6D0 ADRP X0, 0xAA8000
	0x0364B6D4 LDR X0, [X0 + 0x8F0]
	0x0364B6D8 BL 0x1C16CF4
	0x0364B6DC ADRP X0, 0xAF1000
	0x0364B6E0 LDR X0, [X0 + 0x6C0]
	0x0364B6E4 BL 0x1C16CF4
	0x0364B6E8 ADRP X0, 0xAF1000
	0x0364B6EC LDR X0, [X0 + 0x6C8]
	0x0364B6F0 BL 0x1C16CF4
	0x0364B6F4 ADRP X0, 0xAF1000
	0x0364B6F8 LDR X0, [X0 + 0x6D0]
	0x0364B6FC BL 0x1C16CF4
	0x0364B700 ADRP X0, 0xAF1000
	0x0364B704 LDR X0, [X0 + 0x6D8]
	0x0364B708 BL 0x1C16CF4
	0x0364B70C ADRP X0, 0xAF1000
	0x0364B710 LDR X0, [X0 + 0x6E0]
	0x0364B714 BL 0x1C16CF4
	0x0364B718 ADRP X0, 0xAF1000
	0x0364B71C LDR X0, [X0 + 0x6E8]
	0x0364B720 BL 0x1C16CF4
	0x0364B724 ADRP X0, 0xAF1000
	0x0364B728 LDR X0, [X0 + 0x6F0]
	0x0364B72C BL 0x1C16CF4
	0x0364B730 ADRP X0, 0xAF1000
	0x0364B734 LDR X0, [X0 + 0x6F8]
	0x0364B738 BL 0x1C16CF4
	0x0364B73C ADRP X0, 0xAF1000
	0x0364B740 LDR X0, [X0 + 0x700]
	0x0364B744 BL 0x1C16CF4
	0x0364B748 ADRP X0, 0xAF1000
	0x0364B74C LDR X0, [X0 + 0x708]
	0x0364B750 BL 0x1C16CF4
	0x0364B754 ADRP X0, 0xAF1000
	0x0364B758 LDR X0, [X0 + 0x710]
	0x0364B75C BL 0x1C16CF4
	0x0364B760 ADRP X0, 0xAF1000
	0x0364B764 LDR X0, [X0 + 0x718]
	0x0364B768 BL 0x1C16CF4
	0x0364B76C ADRP X0, 0xAF1000
	0x0364B770 LDR X0, [X0 + 0x720]
	0x0364B774 BL 0x1C16CF4
	0x0364B778 MOVZ W8, 0x1
	0x0364B77C STRB W8, [X20 + 0x5E2]
	0x0364B780 LDR X0, [X21]
	0x0364B784 BL 0x1C16F10
	0x0364B788 MOV X1, X31
	0x0364B78C MOV X20, X0
	0x0364B790 BL 0x3231AC4
	0x0364B794 LDR X0, [X23]
	0x0364B798 MOVZ W1, 0x2
	0x0364B79C BL 0x1C16D6C
	0x0364B7A0 CBZ X0, 0x364BF58
	0x0364B7A4 LDR X22, [X19 + 0x28]
	0x0364B7A8 MOV X21, X0
	0x0364B7AC CBZ X22, 0x364B7C4
	0x0364B7B0 LDR X8, [X21]
	0x0364B7B4 MOV X0, X22
	0x0364B7B8 LDR X1, [X8 + 0x40]
	0x0364B7BC BL 0x1C16E00
	0x0364B7C0 CBZ X0, 0x364BF4C
	0x0364B7C4 LDR W8, [X21 + 0x18]
	0x0364B7C8 CBZ W8, 0x364BF48
	0x0364B7CC MOV X0, X31
	0x0364B7D0 STR X22, [X21 + 0x20]
	0x0364B7D4 BL 0x33C1548
	0x0364B7D8 MOV X22, X0
	0x0364B7DC CBZ X0, 0x364B7F4
	0x0364B7E0 LDR X8, [X21]
	0x0364B7E4 MOV X0, X22
	0x0364B7E8 LDR X1, [X8 + 0x40]
	0x0364B7EC BL 0x1C16E00
	0x0364B7F0 CBZ X0, 0x364BF4C
	0x0364B7F4 LDR W8, [X21 + 0x18]
	0x0364B7F8 CMP W8, 0x1
	0x0364B7FC B.LS 0x364BF48
	0x0364B800 STR X22, [X21 + 0x28]
	0x0364B804 CBZ X20, 0x364BF58
	0x0364B808 ADRP X8, 0xAF1000
	0x0364B80C LDR X8, [X8 + 0x6C8]
	0x0364B810 MOV X0, X20
	0x0364B814 MOV X2, X21
	0x0364B818 MOV X3, X31
	0x0364B81C LDR X1, [X8]
	0x0364B820 BL 0x3234E54
	0x0364B824 LDR X0, [X23]
	0x0364B828 MOVZ W1, 0x2
	0x0364B82C BL 0x1C16D6C
	0x0364B830 CBZ X0, 0x364BF58
	0x0364B834 LDR X22, [X19 + 0x38]
	0x0364B838 MOV X21, X0
	0x0364B83C CBZ X22, 0x364B854
	0x0364B840 LDR X8, [X21]
	0x0364B844 MOV X0, X22

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xD96000
	007 Move W8, [X19+1493]
	008 Move X20, X1
	009 Move X21, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xAF2000
	015 Move X0, [X0+1584]
	016 Call 0x1C17CF4
	017 Move X0, 0xAF2000
	018 Move X0, [X0+1592]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+1493], W8
	022 Compare X20, 0
	023 JumpIfEqual {77}
	024 Move X8, 0xAF2000
	025 Move X8, [X8+1592]
	026 Move X9, [X20]
	027 Move X8, [X8]
	028 Move W11, [X9+304]
	029 Move W10, [X8+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X19, 0xAF2000
	036 Move X19, [X19+1584]
	037 Move X1, X20
	038 Call TraceListenerCollection.InitializeListener, X0, X1
	039 Move X0, [X19]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X19]
	045 Move X8, [X0+184]
	046 Move X19, [X8+24]
	047 Move [X31+12], W31
	048 Add X1, X31, 12
	049 Move X0, X19
	050 Move X2, X31
	051 Call Monitor.Enter, X0, X1
	052 Move X0, [X21+16]
	053 Compare X0, 0
	054 JumpIfEqual {104}
	055 Move X8, [X0]
	056 Move X9, [X8+776]
	057 Move X2, [X8+784]
	058 Move X1, X20
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move W21, W0
	061 Move X20, X31
	062 Move W8, [X31+12]
	063 Compare W8, 0
	064 JumpIfEqual {68}
	065 Move X0, X19
	066 Move X1, X31
	067 Call Monitor.Exit, X0
	068 Compare X20, 0
	069 JumpIfNotEqual {102}
	070 Move W0, W21
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X30, [X31+16]
	074 Move X21, [X31+24]
	075 Add X31, X31, 48
	076 Return X0
	077 Move X0, 0xAF2000
	078 Move X0, [X0+1656]
	079 Call 0x1C17D08
	080 Move X1, X31
	081 Call SR.GetString, X0
	082 Move X19, X0
	083 Move X0, 0xAB1000
	084 Move X0, [X0+1400]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X20, X0
	088 Move X0, 0xAB3000
	089 Move X0, [X0+3784]
	090 Call 0x1C17D08
	091 Move X2, X0
	092 Move X0, X20
	093 Move X1, X19
	094 Move X3, X31
	095 Call ArgumentException..ctor, X0, X1, X2
	096 Move X0, 0xAF2000
	097 Move X0, [X0+1672]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X20
	101 Call 0x1C17DEC
	102 Move X0, X20
	103 Call 0x1C17F18
	104 Call 0x1C17F20
	105 Move X21, X0
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X0, X21
	108 Call 0x3EB2AD0
	109 Move X20, [X0]
	110 Call 0x3EB2AE0
	111 Move W21, W31
	112 Move X20, X31
	113 Move X21, X0
	114 Move W8, [X31+12]
	115 Compare W8, 0
	116 JumpIfEqual {120}
	117 Move X0, X19
	118 Move X1, X31
	119 Call Monitor.Exit, X0
	120 Compare X20, 0
	121 JumpIfNotEqual {124}
	122 Move X0, X21
	123 Call 0x1D2D690
	124 Move X0, X20
	125 Call 0x1C17F18
	126 Call 0x1991590

Method: System.Boolean System.Collections.IList.Contains(System.Object value)

Disassembly:
	0x0364B848 LDR X1, [X8 + 0x40]
	0x0364B84C BL 0x1C16E00
	0x0364B850 CBZ X0, 0x364BF4C
	0x0364B854 LDR W8, [X21 + 0x18]
	0x0364B858 CBZ W8, 0x364BF48
	0x0364B85C MOV X0, X31
	0x0364B860 STR X22, [X21 + 0x20]
	0x0364B864 BL 0x33C1548
	0x0364B868 MOV X22, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+840]
	007 Move X2, [X8+848]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Int32 System.Collections.IList.IndexOf(System.Object value)

Disassembly:
	0x0364B86C CBZ X0, 0x364B884
	0x0364B870 LDR X8, [X21]
	0x0364B874 MOV X0, X22
	0x0364B878 LDR X1, [X8 + 0x40]
	0x0364B87C BL 0x1C16E00
	0x0364B880 CBZ X0, 0x364BF4C
	0x0364B884 LDR W8, [X21 + 0x18]
	0x0364B888 CMP W8, 0x1
	0x0364B88C B.LS 0x364BF48

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+920]
	007 Move X2, [X8+928]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)

Disassembly:
	0x0364B890 ADRP X8, 0xAF1000
	0x0364B894 LDR X8, [X8 + 0x6F0]
	0x0364B898 STR X22, [X21 + 0x28]
	0x0364B89C MOV X0, X20
	0x0364B8A0 MOV X2, X21
	0x0364B8A4 LDR X1, [X8]
	0x0364B8A8 MOV X3, X31
	0x0364B8AC BL 0x3234E54
	0x0364B8B0 LDR X0, [X23]
	0x0364B8B4 MOVZ W1, 0x2
	0x0364B8B8 BL 0x1C16D6C
	0x0364B8BC CBZ X0, 0x364BF58
	0x0364B8C0 LDR X22, [X19 + 0x58]
	0x0364B8C4 MOV X21, X0
	0x0364B8C8 CBZ X22, 0x364B8E0
	0x0364B8CC LDR X8, [X21]
	0x0364B8D0 MOV X0, X22
	0x0364B8D4 LDR X1, [X8 + 0x40]
	0x0364B8D8 BL 0x1C16E00
	0x0364B8DC CBZ X0, 0x364BF4C
	0x0364B8E0 LDR W8, [X21 + 0x18]
	0x0364B8E4 CBZ W8, 0x364BF48
	0x0364B8E8 MOV X0, X31
	0x0364B8EC STR X22, [X21 + 0x20]
	0x0364B8F0 BL 0x33C1548
	0x0364B8F4 MOV X22, X0
	0x0364B8F8 CBZ X0, 0x364B910
	0x0364B8FC LDR X8, [X21]
	0x0364B900 MOV X0, X22
	0x0364B904 LDR X1, [X8 + 0x40]
	0x0364B908 BL 0x1C16E00
	0x0364B90C CBZ X0, 0x364BF4C
	0x0364B910 LDR W8, [X21 + 0x18]
	0x0364B914 CMP W8, 0x1
	0x0364B918 B.LS 0x364BF48
	0x0364B91C ADRP X8, 0xAF1000
	0x0364B920 LDR X8, [X8 + 0x720]
	0x0364B924 STR X22, [X21 + 0x28]
	0x0364B928 MOV X0, X20
	0x0364B92C MOV X2, X21
	0x0364B930 LDR X1, [X8]
	0x0364B934 MOV X3, X31
	0x0364B938 BL 0x3234E54
	0x0364B93C LDR X0, [X23]
	0x0364B940 MOVZ W1, 0x2
	0x0364B944 BL 0x1C16D6C
	0x0364B948 CBZ X0, 0x364BF58
	0x0364B94C LDR X22, [X19 + 0x30]
	0x0364B950 MOV X21, X0
	0x0364B954 CBZ X22, 0x364B96C
	0x0364B958 LDR X8, [X21]
	0x0364B95C MOV X0, X22
	0x0364B960 LDR X1, [X8 + 0x40]
	0x0364B964 BL 0x1C16E00
	0x0364B968 CBZ X0, 0x364BF4C
	0x0364B96C LDR W8, [X21 + 0x18]
	0x0364B970 CBZ W8, 0x364BF48
	0x0364B974 MOV X0, X31
	0x0364B978 STR X22, [X21 + 0x20]
	0x0364B97C BL 0x33C1548
	0x0364B980 MOV X22, X0
	0x0364B984 CBZ X0, 0x364B99C
	0x0364B988 LDR X8, [X21]
	0x0364B98C MOV X0, X22
	0x0364B990 LDR X1, [X8 + 0x40]
	0x0364B994 BL 0x1C16E00
	0x0364B998 CBZ X0, 0x364BF4C
	0x0364B99C LDR W8, [X21 + 0x18]
	0x0364B9A0 CMP W8, 0x1
	0x0364B9A4 B.LS 0x364BF48
	0x0364B9A8 ADRP X8, 0xAF1000
	0x0364B9AC LDR X8, [X8 + 0x6D8]
	0x0364B9B0 STR X22, [X21 + 0x28]
	0x0364B9B4 MOV X0, X20
	0x0364B9B8 MOV X2, X21
	0x0364B9BC LDR X1, [X8]
	0x0364B9C0 MOV X3, X31
	0x0364B9C4 BL 0x3234E54
	0x0364B9C8 LDR X0, [X23]
	0x0364B9CC MOVZ W1, 0x2
	0x0364B9D0 BL 0x1C16D6C
	0x0364B9D4 CBZ X0, 0x364BF58
	0x0364B9D8 LDR X22, [X19 + 0x20]
	0x0364B9DC MOV X21, X0
	0x0364B9E0 CBZ X22, 0x364B9F8
	0x0364B9E4 LDR X8, [X21]
	0x0364B9E8 MOV X0, X22
	0x0364B9EC LDR X1, [X8 + 0x40]
	0x0364B9F0 BL 0x1C16E00
	0x0364B9F4 CBZ X0, 0x364BF4C
	0x0364B9F8 LDR W8, [X21 + 0x18]
	0x0364B9FC CBZ W8, 0x364BF48
	0x0364BA00 MOV X0, X31
	0x0364BA04 STR X22, [X21 + 0x20]
	0x0364BA08 BL 0x33C1548
	0x0364BA0C MOV X22, X0
	0x0364BA10 CBZ X0, 0x364BA28
	0x0364BA14 LDR X8, [X21]
	0x0364BA18 MOV X0, X22
	0x0364BA1C LDR X1, [X8 + 0x40]
	0x0364BA20 BL 0x1C16E00
	0x0364BA24 CBZ X0, 0x364BF4C
	0x0364BA28 LDR W8, [X21 + 0x18]
	0x0364BA2C CMP W8, 0x1
	0x0364BA30 B.LS 0x364BF48
	0x0364BA34 ADRP X8, 0xAF1000
	0x0364BA38 LDR X8, [X8 + 0x6F8]
	0x0364BA3C STR X22, [X21 + 0x28]
	0x0364BA40 MOV X0, X20
	0x0364BA44 MOV X2, X21
	0x0364BA48 LDR X1, [X8]
	0x0364BA4C MOV X3, X31
	0x0364BA50 BL 0x3234E54
	0x0364BA54 LDR X0, [X23]
	0x0364BA58 MOVZ W1, 0x2
	0x0364BA5C BL 0x1C16D6C
	0x0364BA60 CBZ X0, 0x364BF58

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xD96000
	007 Move W8, [X19+1494]
	008 Move X20, X2
	009 Move W21, W1
	010 Move X22, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAF2000
	016 Move X0, [X0+1584]
	017 Call 0x1C17CF4
	018 Move X0, 0xAF2000
	019 Move X0, [X0+1592]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1494], W8
	023 Compare X20, 0
	024 JumpIfEqual {77}
	025 Move X8, 0xAF2000
	026 Move X8, [X8+1592]
	027 Move X9, [X20]
	028 Move X8, [X8]
	029 Move W11, [X9+304]
	030 Move W10, [X8+304]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X9, [X9+200]
	033 Add X9, X9, X10
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X19, 0xAF2000
	037 Move X19, [X19+1584]
	038 Move X1, X20
	039 Call TraceListenerCollection.InitializeListener, X0, X1
	040 Move X0, [X19]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {46}
	044 Call 0x1C17DFC
	045 Move X0, [X19]
	046 Move X8, [X0+184]
	047 Move X19, [X8+24]
	048 Move [X31+12], W31
	049 Add X1, X31, 12
	050 Move X0, X19
	051 Move X2, X31
	052 Call Monitor.Enter, X0, X1
	053 Move X0, [X22+16]
	054 Compare X0, 0
	055 JumpIfEqual {104}
	056 Move X8, [X0]
	057 Move X9, [X8+936]
	058 Move X3, [X8+944]
	059 Move W1, W21
	060 Move X2, X20
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move X20, X31
	063 Move W8, [X31+12]
	064 Compare W8, 0
	065 JumpIfEqual {69}
	066 Move X0, X19
	067 Move X1, X31
	068 Call Monitor.Exit, X0
	069 Compare X20, 0
	070 JumpIfNotEqual {102}
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Return 
	077 Move X0, 0xAF2000
	078 Move X0, [X0+1656]
	079 Call 0x1C17D08
	080 Move X1, X31
	081 Call SR.GetString, X0
	082 Move X19, X0
	083 Move X0, 0xAB1000
	084 Move X0, [X0+1400]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X20, X0
	088 Move X0, 0xAB3000
	089 Move X0, [X0+3784]
	090 Call 0x1C17D08
	091 Move X2, X0
	092 Move X0, X20
	093 Move X1, X19
	094 Move X3, X31
	095 Call ArgumentException..ctor, X0, X1, X2
	096 Move X0, 0xAF2000
	097 Move X0, [X0+1680]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X20
	101 Call 0x1C17DEC
	102 Move X0, X20
	103 Call 0x1C17F18
	104 Call 0x1C17F20
	105 Move X21, X0
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X0, X21
	108 Call 0x3EB2AD0
	109 Move X20, [X0]
	110 Call 0x3EB2AE0
	111 Move X20, X31
	112 Move X21, X0
	113 Move W8, [X31+12]
	114 Compare W8, 0
	115 JumpIfEqual {119}
	116 Move X0, X19
	117 Move X1, X31
	118 Call Monitor.Exit, X0
	119 Compare X20, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X21
	122 Call 0x1D2D690
	123 Move X0, X20
	124 Call 0x1C17F18
	125 Call 0x1991590

Method: System.Void System.Collections.IList.Remove(System.Object value)

Disassembly:
	0x0364BA64 LDR X22, [X19 + 0x68]
	0x0364BA68 MOV X21, X0
	0x0364BA6C CBZ X22, 0x364BA84
	0x0364BA70 LDR X8, [X21]
	0x0364BA74 MOV X0, X22
	0x0364BA78 LDR X1, [X8 + 0x40]
	0x0364BA7C BL 0x1C16E00
	0x0364BA80 CBZ X0, 0x364BF4C
	0x0364BA84 LDR W8, [X21 + 0x18]
	0x0364BA88 CBZ W8, 0x364BF48
	0x0364BA8C MOV X0, X31
	0x0364BA90 STR X22, [X21 + 0x20]
	0x0364BA94 BL 0x33C1548
	0x0364BA98 MOV X22, X0
	0x0364BA9C CBZ X0, 0x364BAB4
	0x0364BAA0 LDR X8, [X21]
	0x0364BAA4 MOV X0, X22
	0x0364BAA8 LDR X1, [X8 + 0x40]
	0x0364BAAC BL 0x1C16E00
	0x0364BAB0 CBZ X0, 0x364BF4C
	0x0364BAB4 LDR W8, [X21 + 0x18]
	0x0364BAB8 CMP W8, 0x1
	0x0364BABC B.LS 0x364BF48
	0x0364BAC0 ADRP X8, 0xAF1000
	0x0364BAC4 LDR X8, [X8 + 0x700]
	0x0364BAC8 STR X22, [X21 + 0x28]
	0x0364BACC MOV X0, X20
	0x0364BAD0 MOV X2, X21
	0x0364BAD4 LDR X1, [X8]
	0x0364BAD8 MOV X3, X31
	0x0364BADC BL 0x3234E54
	0x0364BAE0 LDR X0, [X23]
	0x0364BAE4 MOVZ W1, 0x2
	0x0364BAE8 BL 0x1C16D6C
	0x0364BAEC CBZ X0, 0x364BF58
	0x0364BAF0 LDR X22, [X19 + 0x70]
	0x0364BAF4 MOV X21, X0
	0x0364BAF8 CBZ X22, 0x364BB10
	0x0364BAFC LDR X8, [X21]
	0x0364BB00 MOV X0, X22
	0x0364BB04 LDR X1, [X8 + 0x40]
	0x0364BB08 BL 0x1C16E00
	0x0364BB0C CBZ X0, 0x364BF4C
	0x0364BB10 LDR W8, [X21 + 0x18]
	0x0364BB14 CBZ W8, 0x364BF48
	0x0364BB18 MOV X0, X31
	0x0364BB1C STR X22, [X21 + 0x20]
	0x0364BB20 BL 0x33C1548
	0x0364BB24 MOV X22, X0
	0x0364BB28 CBZ X0, 0x364BB40
	0x0364BB2C LDR X8, [X21]
	0x0364BB30 MOV X0, X22
	0x0364BB34 LDR X1, [X8 + 0x40]
	0x0364BB38 BL 0x1C16E00
	0x0364BB3C CBZ X0, 0x364BF4C
	0x0364BB40 LDR W8, [X21 + 0x18]
	0x0364BB44 CMP W8, 0x1
	0x0364BB48 B.LS 0x364BF48
	0x0364BB4C ADRP X8, 0xAF1000
	0x0364BB50 LDR X8, [X8 + 0x6C0]
	0x0364BB54 STR X22, [X21 + 0x28]
	0x0364BB58 ADRP X24, 0xAA8000
	0x0364BB5C MOV X0, X20
	0x0364BB60 LDR X1, [X8]
	0x0364BB64 LDR X24, [X24 + 0xB58]
	0x0364BB68 MOV X2, X21
	0x0364BB6C MOV X3, X31
	0x0364BB70 BL 0x3234E54
	0x0364BB74 LDR X0, [X23]
	0x0364BB78 MOVZ W1, 0x2
	0x0364BB7C BL 0x1C16D6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD96000
	007 Move X19, 0xAF2000
	008 Move W8, [X22+1495]
	009 Move X19, [X19+1584]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAF2000
	017 Move X0, [X0+1584]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1495], W8
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X19, [X8+24]
	029 Move [X31+12], W31
	030 Add X1, X31, 12
	031 Move X0, X19
	032 Move X2, X31
	033 Call Monitor.Enter, X0, X1
	034 Move X0, [X21+16]
	035 Compare X0, 0
	036 JumpIfEqual {59}
	037 Move X8, [X0]
	038 Move X9, [X8+968]
	039 Move X2, [X8+976]
	040 Move X1, X20
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X20, X31
	043 Move W8, [X31+12]
	044 Compare W8, 0
	045 JumpIfEqual {49}
	046 Move X0, X19
	047 Move X1, X31
	048 Call Monitor.Exit, X0
	049 Compare X20, 0
	050 JumpIfNotEqual {57}
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Return 
	057 Move X0, X20
	058 Call 0x1C17F18
	059 Call 0x1C17F20
	060 Move X21, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X21
	063 Call 0x3EB2AD0
	064 Move X20, [X0]
	065 Call 0x3EB2AE0
	066 Move X20, X31
	067 Move X21, X0
	068 Move W8, [X31+12]
	069 Compare W8, 0
	070 JumpIfEqual {74}
	071 Move X0, X19
	072 Move X1, X31
	073 Call Monitor.Exit, X0
	074 Compare X20, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X21
	077 Call 0x1D2D690
	078 Move X0, X20
	079 Call 0x1C17F18
	080 Call 0x1991590

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x0364BB80 MOV X21, X0

ISIL:
	001 Return X0

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x0364BB84 LDRB W8, [X19 + 0x80]
	0x0364BB88 LDR X0, [X24]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x0364BB8C ADD X1, X31, 0x1C
	0x0364BB90 STRB W8, [X31 + 0x1C]
	0x0364BB94 BL 0x1C16E04
	0x0364BB98 CBZ X21, 0x364BF58
	0x0364BB9C MOV X22, X0
	0x0364BBA0 CBZ X0, 0x364BBB8
	0x0364BBA4 LDR X8, [X21]
	0x0364BBA8 MOV X0, X22
	0x0364BBAC LDR X1, [X8 + 0x40]
	0x0364BBB0 BL 0x1C16E00
	0x0364BBB4 CBZ X0, 0x364BF4C
	0x0364BBB8 LDR W8, [X21 + 0x18]
	0x0364BBBC CBZ W8, 0x364BF48
	0x0364BBC0 MOV X0, X31
	0x0364BBC4 STR X22, [X21 + 0x20]
	0x0364BBC8 BL 0x33C1548
	0x0364BBCC MOV X22, X0
	0x0364BBD0 CBZ X0, 0x364BBE8
	0x0364BBD4 LDR X8, [X21]
	0x0364BBD8 MOV X0, X22
	0x0364BBDC LDR X1, [X8 + 0x40]
	0x0364BBE0 BL 0x1C16E00
	0x0364BBE4 CBZ X0, 0x364BF4C
	0x0364BBE8 LDR W8, [X21 + 0x18]
	0x0364BBEC CMP W8, 0x1
	0x0364BBF0 B.LS 0x364BF48
	0x0364BBF4 ADRP X8, 0xAF1000
	0x0364BBF8 LDR X8, [X8 + 0x6E0]
	0x0364BBFC STR X22, [X21 + 0x28]
	0x0364BC00 MOV X0, X20
	0x0364BC04 MOV X2, X21
	0x0364BC08 LDR X1, [X8]
	0x0364BC0C MOV X3, X31
	0x0364BC10 BL 0x3234E54
	0x0364BC14 LDR X0, [X23]
	0x0364BC18 MOVZ W1, 0x2
	0x0364BC1C BL 0x1C16D6C
	0x0364BC20 MOV X21, X0
	0x0364BC24 LDRB W8, [X19 + 0x81]
	0x0364BC28 LDR X0, [X24]
	0x0364BC2C ADD X1, X31, 0x18
	0x0364BC30 STRB W8, [X31 + 0x18]
	0x0364BC34 BL 0x1C16E04
	0x0364BC38 CBZ X21, 0x364BF58
	0x0364BC3C MOV X22, X0
	0x0364BC40 CBZ X0, 0x364BC58
	0x0364BC44 LDR X8, [X21]
	0x0364BC48 MOV X0, X22
	0x0364BC4C LDR X1, [X8 + 0x40]
	0x0364BC50 BL 0x1C16E00
	0x0364BC54 CBZ X0, 0x364BF4C
	0x0364BC58 LDR W8, [X21 + 0x18]
	0x0364BC5C CBZ W8, 0x364BF48
	0x0364BC60 MOV X0, X31
	0x0364BC64 STR X22, [X21 + 0x20]
	0x0364BC68 BL 0x33C1548
	0x0364BC6C MOV X22, X0
	0x0364BC70 CBZ X0, 0x364BC88
	0x0364BC74 LDR X8, [X21]
	0x0364BC78 MOV X0, X22
	0x0364BC7C LDR X1, [X8 + 0x40]
	0x0364BC80 BL 0x1C16E00
	0x0364BC84 CBZ X0, 0x364BF4C
	0x0364BC88 LDR W8, [X21 + 0x18]
	0x0364BC8C CMP W8, 0x1
	0x0364BC90 B.LS 0x364BF48
	0x0364BC94 ADRP X8, 0xAF1000
	0x0364BC98 LDR X8, [X8 + 0x708]
	0x0364BC9C STR X22, [X21 + 0x28]
	0x0364BCA0 MOV X0, X20
	0x0364BCA4 MOV X2, X21
	0x0364BCA8 LDR X1, [X8]
	0x0364BCAC MOV X3, X31
	0x0364BCB0 BL 0x3234E54
	0x0364BCB4 LDR X0, [X23]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xD96000
	009 Move X19, 0xAF2000
	010 Move W8, [X23+1496]
	011 Move X19, [X19+1584]
	012 Move W20, W2
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xAF2000
	020 Move X0, [X0+1584]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+1496], W8
	024 Move X0, [X19]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X19]
	030 Move X8, [X0+184]
	031 Move X19, [X8+24]
	032 Move [X31+12], W31
	033 Add X1, X31, 12
	034 Move X0, X19
	035 Move X2, X31
	036 Call Monitor.Enter, X0, X1
	037 Move X0, [X22+16]
	038 Compare X0, 0
	039 JumpIfEqual {65}
	040 Move X8, [X0]
	041 Move X9, [X8+872]
	042 Move X3, [X8+880]
	043 Move X1, X21
	044 Move W2, W20
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X20, X31
	047 Move W8, [X31+12]
	048 Compare W8, 0
	049 JumpIfEqual {53}
	050 Move X0, X19
	051 Move X1, X31
	052 Call Monitor.Exit, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {63}
	055 Move X20, [X31+48]
	056 Move X19, [X31+56]
	057 Move X22, [X31+32]
	058 Move X21, [X31+40]
	059 Move X30, [X31+16]
	060 Move X23, [X31+24]
	061 Add X31, X31, 64
	062 Return 
	063 Move X0, X20
	064 Call 0x1C17F18
	065 Call 0x1C17F20
	066 Move X21, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, X21
	069 Call 0x3EB2AD0
	070 Move X20, [X0]
	071 Call 0x3EB2AE0
	072 Move X20, X31
	073 Move X21, X0
	074 Move W8, [X31+12]
	075 Compare W8, 0
	076 JumpIfEqual {80}
	077 Move X0, X19
	078 Move X1, X31
	079 Call Monitor.Exit, X0
	080 Compare X20, 0
	081 JumpIfNotEqual {84}
	082 Move X0, X21
	083 Call 0x1D2D690
	084 Move X0, X20
	085 Call 0x1C17F18
	086 Call 0x1991590

