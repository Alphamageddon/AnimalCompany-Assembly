Type: System.Diagnostics.Stopwatch

Method: System.Int64 GetTimestamp()

Disassembly:
	0x0364CF5C LDP X22, X21, [X31 + 0x50]

ISIL:
	001 Call 0x1C4D53C
	002 Return X0

Method: System.Diagnostics.Stopwatch StartNew()

Disassembly:
	0x0364CF60 LDP X24, X23, [X31 + 0x40]
	0x0364CF64 LDP X26, X25, [X31 + 0x30]
	0x0364CF68 LDP X30, X27, [X31 + 0x20]
	0x0364CF6C ADD X31, X31, 0x70
	0x0364CF70 RET
	0x0364CF74 BL 0x1C16F20
	0x0364CF78 BL 0x1C16F28
	0x0364CF7C ADRP X0, 0xAD4000
	0x0364CF80 LDR X0, [X0 + 0xCE0]
	0x0364CF84 BL 0x1C16D08
	0x0364CF88 BL 0x1C16F10
	0x0364CF8C MOV X19, X0
	0x0364CF90 ADRP X0, 0xAED000
	0x0364CF94 LDR X0, [X0 + 0xF30]
	0x0364CF98 BL 0x1C16D08
	0x0364CF9C MOV X1, X0
	0x0364CFA0 MOV X0, X19
	0x0364CFA4 MOV X2, X31
	0x0364CFA8 BL 0x3252170
	0x0364CFAC ADRP X0, 0xAF0000
	0x0364CFB0 LDR X0, [X0 + 0x768]
	0x0364CFB4 BL 0x1C16D08
	0x0364CFB8 MOV X1, X0
	0x0364CFBC MOV X0, X19
	0x0364CFC0 BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD95000
	005 Move X20, 0xAB0000
	006 Move W8, [X19+1507]
	007 Move X20, [X20+1800]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAB0000
	013 Move X0, [X0+1800]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1507], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Compare X19, 0
	023 JumpIfEqual {31}
	024 Move X0, X19
	025 Call Stopwatch.Start, X0
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0
	031 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0364CFC4 STR X30, [X31 - 0x20]!
	0x0364CFC8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.TimeSpan get_Elapsed()

Disassembly:
	0x0364D034 LDP X20, X19, [X31 + 0x10]
	0x0364D038 LDR X30, [X31], #0x20
	0x0364D03C B 0x364D044
	0x0364D040 BL 0x1C16F20
	0x0364D044 STR X30, [X31 - 0x20]!
	0x0364D048 STP X20, X19, [X31 + 0x10]
	0x0364D04C MOV X19, X0
	0x0364D050 CBZ X0, 0x364D098
	0x0364D054 LDR W20, [X19 + 0x10]
	0x0364D058 CMP W20, 0x1
	0x0364D05C B.LT 0x364D098
	0x0364D060 SUBS W20, W20, 0x1
	0x0364D064 B.LT 0x364D088
	0x0364D068 MOV X0, X19
	0x0364D06C MOV W1, W20
	0x0364D070 MOV X2, X31
	0x0364D074 BL 0x3222A1C
	0x0364D078 ANDS W31, W0, 0xFFFF
	0x0364D07C B.EQ 0x364D060
	0x0364D080 ADD W2, W20, 0x1
	0x0364D084 B 0x364D08C
	0x0364D088 MOV W2, W31
	0x0364D08C LDR W8, [X19 + 0x10]
	0x0364D090 CMP W2, W8
	0x0364D094 B.NE 0x364D0A8
	0x0364D098 MOV X0, X19
	0x0364D09C LDP X20, X19, [X31 + 0x10]
	0x0364D0A0 LDR X30, [X31], #0x20
	0x0364D0A4 RET
	0x0364D0A8 MOV X0, X19
	0x0364D0AC LDP X20, X19, [X31 + 0x10]
	0x0364D0B0 MOV W1, W31
	0x0364D0B4 MOV X3, X31
	0x0364D0B8 LDR X30, [X31], #0x20
	0x0364D0BC B 0x3228DE4
	0x0364D0C0 STR X30, [X31 - 0x40]!
	0x0364D0C4 STP X24, X23, [X31 + 0x10]
	0x0364D0C8 STP X22, X21, [X31 + 0x20]
	0x0364D0CC STP X20, X19, [X31 + 0x30]
	0x0364D0D0 ADRP X21, 0xD93000
	0x0364D0D4 ADRP X23, 0xAEC000
	0x0364D0D8 LDRB W8, [X21 + 0x5F0]
	0x0364D0DC LDR X23, [X23 + 0xF00]
	0x0364D0E0 MOV W20, W1
	0x0364D0E4 MOV X19, X0
	0x0364D0E8 TBNZ X8, 0x0, 0x364D100
	0x0364D0EC ADRP X0, 0xAEC000
	0x0364D0F0 LDR X0, [X0 + 0xF00]
	0x0364D0F4 BL 0x1C16CF4
	0x0364D0F8 MOVZ W8, 0x1
	0x0364D0FC STRB W8, [X21 + 0x5F0]
	0x0364D100 STR W31, [X31 + 0xC]
	0x0364D104 LDR X1, [X19 + 0x10]
	0x0364D108 LDR W2, [X19 + 0x1C]
	0x0364D10C MOV W0, W20
	0x0364D110 BL 0x364D184
	0x0364D114 LDP W2, W8, [X19 + 0x18]
	0x0364D118 LDR X0, [X19 + 0x10]
	0x0364D11C ADD X3, X31, 0xC
	0x0364D120 ADD W1, W8, 0x1
	0x0364D124 BL 0x364C82C
	0x0364D128 LDR W9, [X31 + 0xC]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD94000
	007 Move X20, 0xAAF000
	008 Move W8, [X21+1508]
	009 Move X20, [X20+1800]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAAF000
	016 Move X0, [X0+1800]
	017 Call 0x1C17CF4
	018 Move X0, 0xAA9000
	019 Move X0, [X0+1392]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1508], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X20]
	029 Move X8, [X0+184]
	030 Move X21, 0xAA9000
	031 Move X0, X19
	032 Move W22, [X8+8]
	033 Move X21, [X21+1392]
	034 Call Stopwatch.get_ElapsedTicks, X0
	035 Move X19, X0
	036 Compare W22, 0
	037 JumpIfEqual {61}
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Move X8, [X21]
	045 Move X9, [X0+184]
	046 Move W10, [X8+224]
	047 Move X20, [X9]
	048 Compare W10, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move X8, 0x42BD
	053 NotImplemented "Instruction MOVK not yet implemented."
	054 NotImplemented "Instruction MOVK not yet implemented."
	055 NotImplemented "Instruction MOVK not yet implemented."
	056 NotImplemented "Instruction SMULH not yet implemented."
	057 Add X8, X8, X20
	058 NotImplemented "Instruction SBFM not yet implemented."
	059 Add X8, X9, X8
	060 NotImplemented "Instruction SDIV not yet implemented."
	061 Move X0, [X21]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X1, X31
	072 Move X30, [X31+48]
	073 Call TimeSpan.FromTicks, X0
	074 Return X0

Method: System.Int64 get_ElapsedMilliseconds()

Disassembly:
	0x0364D19C ADD X8, X1, W2, SXTW
	0x00000000 INVALID
	0x0364D1A4 AND W8, W9, 0x1F
	0x0364D1A8 CMP W8, 0x1F
	0x0364D1AC B.EQ 0x364D1C8
	0x0364D1B0 TBNZ X9, 0x1F, 0x364D1C0
	0x0364D1B4 AND W9, W0, 0x1F
	0x0364D1B8 CMP W9, W8
	0x0364D1BC B.NE 0x364D1C8
	0x0364D1C0 LDP X30, X19, [X31], #0x10
	0x0364D1C4 RET
	0x0364D1C8 ADRP X0, 0xAD3000
	0x0364D1CC LDR X0, [X0 + 0xCE0]
	0x0364D1D0 BL 0x1C16D08
	0x0364D1D4 BL 0x1C16F10
	0x0364D1D8 MOV X19, X0
	0x0364D1DC ADRP X0, 0xAEC000
	0x0364D1E0 LDR X0, [X0 + 0xF30]
	0x0364D1E4 BL 0x1C16D08
	0x0364D1E8 MOV X1, X0
	0x0364D1EC MOV X0, X19
	0x0364D1F0 MOV X2, X31
	0x0364D1F4 BL 0x3252170
	0x0364D1F8 ADRP X0, 0xAEF000
	0x0364D1FC LDR X0, [X0 + 0x770]
	0x0364D200 BL 0x1C16D08
	0x0364D204 MOV X1, X0
	0x0364D208 MOV X0, X19
	0x0364D20C BL 0x1C16DEC
	0x0364D210 BL 0x1C16F20
	0x0364D214 BL 0x1C16F28
	0x0364D218 MOVZ W1, 0x10
	0x0364D21C B 0x364D0C0
	0x0364D220 MOVZ W1, 0x11
	0x0364D224 B 0x364D0C0
	0x0364D228 STR X30, [X31 - 0x20]!
	0x0364D22C STP X20, X19, [X31 + 0x10]
	0x0364D230 MOVZ W1, 0x13
	0x0364D234 MOV X19, X0
	0x0364D238 BL 0x364C5C4
	0x0364D23C STR W31, [X31 + 0xC]
	0x0364D240 LDR X0, [X19 + 0x10]
	0x0364D244 LDP W2, W1, [X19 + 0x18]
	0x0364D248 ADD X3, X31, 0xC
	0x0364D24C BL 0x364C82C
	0x0364D250 LDR W8, [X19 + 0x1C]
	0x0364D254 LDR W9, [X31 + 0xC]
	0x0364D258 MOV W20, W0
	0x0364D25C MOV X0, X31
	0x0364D260 ADD W8, W9, W8
	0x0364D264 STR W8, [X19 + 0x1C]
	0x0364D268 BL 0x3242EC8
	0x0364D26C CBZ X0, 0x364D2A4
	0x0364D270 LDR X8, [X0]
	0x0364D274 LDR W2, [X19 + 0x1C]
	0x0364D278 LDR X1, [X19 + 0x10]
	0x0364D27C MOV W3, W20
	0x0364D280 LDR X9, [X8 + 0x388]
	0x0364D284 LDR X4, [X8 + 0x390]
	0x0364D288 BLR X9
	0x0364D28C LDR W8, [X19 + 0x1C]
	0x0364D290 ADD W8, W8, W20
	0x0364D294 STR W8, [X19 + 0x1C]
	0x0364D298 LDP X20, X19, [X31 + 0x10]
	0x0364D29C LDR X30, [X31], #0x20
	0x0364D2A0 B 0x364D044
	0x0364D2A4 BL 0x1C16F20
	0x0364D2A8 STR X30, [X31 - 0x20]!
	0x0364D2AC STP X20, X19, [X31 + 0x10]
	0x0364D2B0 MOVZ W1, 0x16
	0x0364D2B4 MOV X19, X0
	0x0364D2B8 BL 0x364C5C4
	0x0364D2BC STR W31, [X31 + 0xC]
	0x0364D2C0 LDR X0, [X19 + 0x10]
	0x0364D2C4 LDP W2, W1, [X19 + 0x18]
	0x0364D2C8 ADD X3, X31, 0xC
	0x0364D2CC BL 0x364C82C
	0x0364D2D0 LDR W8, [X19 + 0x1C]
	0x0364D2D4 LDR W9, [X31 + 0xC]
	0x0364D2D8 MOV W20, W0
	0x0364D2DC MOV X0, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD94000
	007 Move X20, 0xAAF000
	008 Move W8, [X21+1509]
	009 Move X20, [X20+1800]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xAF0000
	016 Move X0, [X0+1832]
	017 Call 0x1C17CF4
	018 Move X0, 0xAAF000
	019 Move X0, [X0+1800]
	020 Call 0x1C17CF4
	021 Move X0, 0xAA9000
	022 Move X0, [X0+1392]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1509], W8
	026 Move X0, [X20]
	027 Move [X31+8], X31
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X8, [X0+184]
	034 Move W8, [X8+8]
	035 Compare W8, 0
	036 JumpIfEqual {57}
	037 Move X0, X19
	038 Call Stopwatch.get_ElapsedTicks, X0
	039 Move X8, [X20]
	040 Move X19, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {47}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X20]
	047 Move X8, [X8+184]
	048 Move X9, 0xF7CF
	049 NotImplemented "Instruction MOVK not yet implemented."
	050 NotImplemented "Instruction MOVK not yet implemented."
	051 Move X8, [X8]
	052 NotImplemented "Instruction MOVK not yet implemented."
	053 NotImplemented "Instruction SMULH not yet implemented."
	054 NotImplemented "Instruction SBFM not yet implemented."
	055 Add X8, X9, X8
	056 NotImplemented "Instruction SDIV not yet implemented."
	057 Move X0, X19
	058 Call Stopwatch.get_Elapsed, X0
	059 Move X8, 0xAA9000
	060 Move X8, [X8+1392]
	061 Move [X31+8], X0
	062 Move X8, [X8]
	063 Move W9, [X8+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Add X0, X31, 8
	069 Move X1, X31
	070 Call TimeSpan.get_TotalMilliseconds, X0
	071 Move X8, 0x43E00000
	072 Move D1, X8
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 Move X8, 0x7FF00000
	075 Move D1, X8
	076 NotImplemented "Instruction FCVTZS not yet implemented."
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move X8, 0x80000000
	079 NotImplemented "Instruction CSEL not yet implemented."
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X30, [X31+16]
	083 Move X21, [X31+24]
	084 Add X31, X31, 48
	085 Return X0
	086 Call 0x1C17F30
	087 Move X8, 0xAF0000
	088 Move X8, [X8+1832]
	089 Move X1, [X8]
	090 Call 0x1C17DEC

Method: System.Int64 get_ElapsedTicks()

Disassembly:
	0x0364D12C LDR X8, [X23]
	0x0364D130 LDR X21, [X19 + 0x10]
	0x0364D134 LDR W22, [X19 + 0x1C]
	0x0364D138 ADD W9, W0, W9
	0x0364D13C MOV X0, X8
	0x0364D140 ADD W23, W9, 0x1
	0x0364D144 BL 0x1C16F10
	0x0364D148 MOV W1, W20
	0x0364D14C MOV X2, X21
	0x0364D150 MOV W3, W22
	0x0364D154 MOV W4, W23
	0x0364D158 MOV X24, X0
	0x0364D15C BL 0x364C4D4
	0x0364D160 LDR W8, [X19 + 0x1C]
	0x0364D164 MOV X0, X24
	0x0364D168 LDP X22, X21, [X31 + 0x20]
	0x0364D16C ADD W8, W8, W23
	0x0364D170 STR W8, [X19 + 0x1C]
	0x0364D174 LDP X20, X19, [X31 + 0x30]
	0x0364D178 LDP X24, X23, [X31 + 0x10]
	0x0364D17C LDR X30, [X31], #0x40
	0x0364D180 RET
	0x0364D184 STP X30, X19, [X31 - 0x10]!
	0x0364D188 CBZ X1, 0x364D210
	0x0364D18C LDR W8, [X1 + 0x18]
	0x0364D190 CMP W8, W2
	0x0364D194 B.LE 0x364D1C8
	0x0364D198 B.LS 0x364D214

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD94000
	005 Move W8, [X20+1510]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAAF000
	012 Move X0, [X0+1800]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1510], W8
	016 Move W8, [X19+32]
	017 Compare W8, 0
	018 JumpIfEqual {31}
	019 Move X8, 0xAAF000
	020 Move X8, [X8+1800]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call 0x1C4D53C
	027 Move X9, [X19+16]
	028 Move X8, [X19+24]
	029 Subtract X8, X0, X8
	030 Add X0, X8, X9
	031 Move X0, [X19+16]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Boolean get_IsRunning()

Disassembly:
	0x0364D2E0 ADD W8, W9, W8
	0x0364D2E4 STR W8, [X19 + 0x1C]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void Reset()

Disassembly:
	0x0364D2E8 BL 0x3242EC8
	0x0364D2EC CBZ X0, 0x364D324
	0x0364D2F0 LDR X8, [X0]

ISIL:
	001 Move [X0+16], X31
	002 Move [X0+32], W31
	003 Return 

Method: System.Void Start()

Disassembly:
	0x0364CFCC MOVZ W1, 0xC
	0x0364CFD0 MOV X19, X0
	0x0364CFD4 BL 0x364C5C4
	0x0364CFD8 STR W31, [X31 + 0xC]
	0x0364CFDC LDR X0, [X19 + 0x10]
	0x0364CFE0 LDP W2, W1, [X19 + 0x18]
	0x0364CFE4 ADD X3, X31, 0xC
	0x0364CFE8 BL 0x364C82C
	0x0364CFEC LDR W8, [X19 + 0x1C]
	0x0364CFF0 LDR W9, [X31 + 0xC]
	0x0364CFF4 MOV W20, W0
	0x0364CFF8 MOV X0, X31
	0x0364CFFC ADD W8, W9, W8
	0x0364D000 STR W8, [X19 + 0x1C]
	0x0364D004 BL 0x3241948
	0x0364D008 CBZ X0, 0x364D040
	0x0364D00C LDR X8, [X0]
	0x0364D010 LDR W2, [X19 + 0x1C]
	0x0364D014 LDR X1, [X19 + 0x10]
	0x0364D018 MOV W3, W20
	0x0364D01C LDR X9, [X8 + 0x388]
	0x0364D020 LDR X4, [X8 + 0x390]
	0x0364D024 BLR X9
	0x0364D028 LDR W8, [X19 + 0x1C]
	0x0364D02C ADD W8, W8, W20
	0x0364D030 STR W8, [X19 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD95000
	005 Move W8, [X20+1511]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAB0000
	012 Move X0, [X0+1800]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1511], W8
	016 Move W8, [X19+32]
	017 Compare W8, 0
	018 JumpIfNotEqual {30}
	019 Move X8, 0xAAF000
	020 Move X8, [X8+1800]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call 0x1C4D53C
	027 Move W8, 1
	028 Move [X19+24], X0
	029 Move [X19+32], W8
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 

Method: System.Void Stop()

Disassembly:
	0x0364D2F4 LDR W2, [X19 + 0x1C]
	0x0364D2F8 LDR X1, [X19 + 0x10]
	0x0364D2FC MOV W3, W20
	0x0364D300 LDR X9, [X8 + 0x388]
	0x0364D304 LDR X4, [X8 + 0x390]
	0x0364D308 BLR X9
	0x0364D30C LDR W8, [X19 + 0x1C]
	0x0364D310 ADD W8, W8, W20
	0x0364D314 STR W8, [X19 + 0x1C]
	0x0364D318 LDP X20, X19, [X31 + 0x10]
	0x0364D31C LDR X30, [X31], #0x20
	0x0364D320 B 0x364D044
	0x0364D324 BL 0x1C16F20
	0x0364D328 STR X30, [X31 - 0x50]!
	0x0364D32C STP X26, X25, [X31 + 0x10]
	0x0364D330 STP X24, X23, [X31 + 0x20]
	0x0364D334 STP X22, X21, [X31 + 0x30]
	0x0364D338 STP X20, X19, [X31 + 0x40]
	0x0364D33C ADRP X20, 0xD93000
	0x0364D340 ADRP X25, 0xAEF000
	0x0364D344 LDRB W8, [X20 + 0x5F1]
	0x0364D348 LDR X25, [X25 + 0x778]
	0x0364D34C MOV X19, X0
	0x0364D350 TBNZ X8, 0x0, 0x364D3A4
	0x0364D354 ADRP X0, 0xAEC000
	0x0364D358 LDR X0, [X0 + 0xF00]
	0x0364D35C BL 0x1C16CF4
	0x0364D360 ADRP X0, 0xAEF000
	0x0364D364 LDR X0, [X0 + 0x780]
	0x0364D368 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD94000
	005 Move W8, [X20+1512]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAAF000
	012 Move X0, [X0+1800]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1512], W8
	016 Move W8, [X19+32]
	017 Compare W8, 0
	018 JumpIfEqual {34}
	019 Move X8, 0xAAF000
	020 Move X8, [X8+1800]
	021 Move X20, [X19+16]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Call 0x1C4D53C
	028 Move X8, [X19+24]
	029 Move [X19+32], W31
	030 Subtract X8, X0, X8
	031 Add X8, X8, X20
	032 NotImplemented "Instruction BIC not yet implemented."
	033 Move [X19+16], X8
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 

Method: System.Void Restart()

Disassembly:
	0x0364D36C ADRP X0, 0xAEF000
	0x0364D370 LDR X0, [X0 + 0x788]
	0x0364D374 BL 0x1C16CF4
	0x0364D378 ADRP X0, 0xAEF000
	0x0364D37C LDR X0, [X0 + 0x790]
	0x0364D380 BL 0x1C16CF4
	0x0364D384 ADRP X0, 0xAEF000
	0x0364D388 LDR X0, [X0 + 0x798]
	0x0364D38C BL 0x1C16CF4
	0x0364D390 ADRP X0, 0xAEF000
	0x0364D394 LDR X0, [X0 + 0x778]
	0x0364D398 BL 0x1C16CF4
	0x0364D39C MOVZ W8, 0x1
	0x0364D3A0 STRB W8, [X20 + 0x5F1]
	0x0364D3A4 ADRP X24, 0xAEC000
	0x0364D3A8 LDR X24, [X24 + 0xF00]
	0x0364D3AC MOVZ W1, 0x14
	0x0364D3B0 MOV X0, X19
	0x0364D3B4 BL 0x364C5C4
	0x0364D3B8 STR W31, [X31 + 0xC]
	0x0364D3BC LDR X0, [X19 + 0x10]
	0x0364D3C0 LDP W2, W1, [X19 + 0x18]
	0x0364D3C4 ADD X3, X31, 0xC
	0x0364D3C8 BL 0x364C82C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD94000
	006 Move X21, 0xAAF000
	007 Move W8, [X20+1513]
	008 Move X21, [X21+1800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAAF000
	015 Move X0, [X0+1800]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1513], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call 0x1C4D53C
	025 Move W8, 1
	026 Move [X19+16], X31
	027 Move [X19+24], X0
	028 Move [X19+32], W8
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

Method: System.Void .cctor()

Disassembly:
	0x0364D3CC LDR W8, [X19 + 0x1C]
	0x0364D3D0 LDR W9, [X31 + 0xC]
	0x0364D3D4 MOV W20, W0
	0x0364D3D8 ADD W8, W9, W8
	0x0364D3DC STR W8, [X19 + 0x1C]
	0x0364D3E0 LDR X8, [X25]
	0x0364D3E4 LDR W9, [X8 + 0xE0]
	0x0364D3E8 CBNZ W9, 0x364D3F8
	0x0364D3EC MOV X0, X8
	0x0364D3F0 BL 0x1C16DFC
	0x0364D3F4 LDR X8, [X25]
	0x0364D3F8 LDR X9, [X8 + 0xB8]
	0x0364D3FC LDR X10, [X24]
	0x0364D400 ADRP X26, 0xAEF000
	0x0364D404 LDR X22, [X9 + 0x8]
	0x0364D408 LDR X9, [X10 + 0xB8]
	0x0364D40C LDR X26, [X26 + 0x788]
	0x0364D410 ADD X21, X9, 0x8
	0x0364D414 CBNZ X22, 0x364D46C
	0x0364D418 LDR W9, [X8 + 0xE0]
	0x0364D41C CBNZ W9, 0x364D42C
	0x0364D420 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD94000
	005 Move X20, 0xAAF000
	006 Move W8, [X19+1514]
	007 Move X20, [X20+1800]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAAF000
	013 Move X0, [X0+1800]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1514], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W9, 0x9680
	021 NotImplemented "Instruction MOVK not yet implemented."
	022 Move X8, [X8+184]
	023 Move W10, 1
	024 Move [X8], X9
	025 Move [X8+8], W10
	026 Move X30, [X31+32]
	027 Return 

