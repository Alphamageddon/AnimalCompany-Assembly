Type: System.Diagnostics.TraceListener

Method: System.Void .ctor(System.String name)

Disassembly:
	0x0364AFEC BL 0x1C16CF4
	0x0364AFF0 MOVZ W8, 0x1
	0x0364AFF4 STRB W8, [X21 + 0xFA7]
	0x0364AFF8 LDR X0, [X20]
	0x0364AFFC LDR W8, [X0 + 0xE0]
	0x0364B000 CBNZ W8, 0x364B00C
	0x0364B004 BL 0x1C16DFC
	0x0364B008 LDR X0, [X20]
	0x0364B00C LDR X8, [X0 + 0xB8]
	0x0364B010 LDR X0, [X8]
	0x0364B014 CBZ X0, 0x364B0AC
	0x0364B018 LDR X8, [X0]
	0x0364B01C MOV X1, X19
	0x0364B020 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W8, 4
	006 Move W9, 1
	007 Move X1, X31
	008 Move X20, X0
	009 Move [X0+28], W8
	010 Move [X0+32], W9
	011 Call MarshalByRefObject..ctor, X0
	012 Move [X20+40], X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Return 

Method: System.Boolean get_IsThreadSafe()

Disassembly:
	0x0364B024 LDP X22, X21, [X31 + 0x10]
	0x0364B028 LDR X3, [X8 + 0x248]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void Dispose()

Disassembly:
	0x0364B02C LDR X2, [X8 + 0x250]
	0x0364B030 LDR X30, [X31], #0x30
	0x0364B034 BR X3
	0x0364B038 ADRP X8, 0xAF1000
	0x0364B03C LDR X8, [X8 + 0x698]
	0x0364B040 MOV X0, X20
	0x0364B044 MOV X2, X31
	0x0364B048 LDR X1, [X8]
	0x0364B04C BL 0x321BA08
	0x0364B050 TBZ X0, 0x0, 0x364B0B0
	0x0364B054 ADRP X20, 0xAB0000
	0x0364B058 LDR X20, [X20 + 0x958]
	0x0364B05C LDR X0, [X20]
	0x0364B060 LDR W8, [X0 + 0xE0]
	0x0364B064 CBNZ W8, 0x364B06C
	0x0364B068 BL 0x1C16DFC
	0x0364B06C ADRP X21, 0xD95000
	0x0364B070 LDRB W8, [X21 + 0x6BA]
	0x0364B074 CBNZ W8, 0x364B08C
	0x0364B078 ADRP X0, 0xAB0000
	0x0364B07C LDR X0, [X0 + 0x958]
	0x0364B080 BL 0x1C16CF4
	0x0364B084 MOVZ W8, 0x1
	0x0364B088 STRB W8, [X21 + 0x6BA]
	0x0364B08C LDR X0, [X20]
	0x0364B090 LDR W8, [X0 + 0xE0]
	0x0364B094 CBNZ W8, 0x364B0A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD96000
	006 Move X20, 0xAB0000
	007 Move W8, [X21+1484]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAB0000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1484], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+440]
	023 Move X2, [X8+448]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0364B098 BL 0x1C16DFC

ISIL:
	001 Return 

Method: System.Void Flush()

Disassembly:
	0x0364B09C LDR X0, [X20]

ISIL:
	001 Return 

Method: System.Void set_IndentLevel(System.Int32 value)

Disassembly:
	0x0364ABD8 CBNZ W8, 0x364ABE4
	0x0364ABDC BL 0x1C16DFC
	0x0364ABE0 LDR X0, [X19]
	0x0364ABE4 LDR X8, [X0 + 0xB8]
	0x0364ABE8 LDR X19, [X8 + 0x18]
	0x0364ABEC STRB W31, [X31 + 0xC]
	0x0364ABF0 ADD X1, X31, 0xC

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 NotImplemented "Instruction BIC not yet implemented."
	005 Move [X0+24], W8
	006 Move X30, [X31+16]
	007 Return 
	008 Call 0x1C17F20

Method: System.Void set_IndentSize(System.Int32 value)

Disassembly:
	0x0364ABF4 MOV X0, X19
	0x0364ABF8 MOV X2, X31
	0x0364ABFC BL 0x33DE64C
	0x0364AC00 LDR X0, [X22 + 0x10]
	0x0364AC04 CBZ X0, 0x364AC58
	0x0364AC08 LDR X8, [X0]
	0x0364AC0C LDR X9, [X8 + 0x368]
	0x0364AC10 LDR X3, [X8 + 0x370]
	0x0364AC14 MOV X1, X21
	0x0364AC18 MOV W2, W20
	0x0364AC1C BLR X9
	0x0364AC20 MOV X20, X31
	0x0364AC24 LDRB W8, [X31 + 0xC]
	0x0364AC28 CBZ W8, 0x364AC38
	0x0364AC2C MOV X0, X19
	0x0364AC30 MOV X1, X31
	0x0364AC34 BL 0x33E14E4
	0x0364AC38 CBNZ X20, 0x364AC50
	0x0364AC3C LDP X20, X19, [X31 + 0x30]
	0x0364AC40 LDP X22, X21, [X31 + 0x20]
	0x0364AC44 LDP X30, X23, [X31 + 0x10]
	0x0364AC48 ADD X31, X31, 0x40
	0x0364AC4C RET
	0x0364AC50 MOV X0, X20
	0x0364AC54 BL 0x1C16F18
	0x0364AC58 BL 0x1C16F20
	0x0364AC5C B 0x364AC60
	0x0364AC60 MOV X21, X0
	0x0364AC64 CMP W1, 0x1
	0x0364AC68 B.NE 0x364AC80
	0x0364AC6C MOV X0, X21
	0x0364AC70 BL 0x3EB1AD0
	0x0364AC74 LDR X20, [X0]
	0x0364AC78 BL 0x3EB1AE0
	0x0364AC7C B 0x364AC24
	0x0364AC80 MOV X20, X31
	0x0364AC84 B 0x364AC8C
	0x0364AC88 MOV X21, X0
	0x0364AC8C LDRB W8, [X31 + 0xC]
	0x0364AC90 CBZ W8, 0x364ACA0
	0x0364AC94 MOV X0, X19
	0x0364AC98 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X1
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {17}
	010 Move X20, [X31+32]
	011 Move X19, [X31+40]
	012 Move X30, [X31+16]
	013 Move X21, [X31+24]
	014 Move [X0+28], W1
	015 Add X31, X31, 48
	016 Return 
	017 Move [X31+12], W1
	018 Move X0, 0xAAA000
	019 Move X0, [X0+1880]
	020 Call 0x1C17D08
	021 Add X1, X31, 12
	022 Call 0x1C17E04
	023 Move X19, X0
	024 Move X0, 0xAF3000
	025 Move X0, [X0+1616]
	026 Call 0x1C17D08
	027 Move X1, X31
	028 Call SR.GetString, X0
	029 Move X20, X0
	030 Move X0, 0xAB2000
	031 Move X0, [X0+1888]
	032 Call 0x1C17D08
	033 Call 0x1C17F10
	034 Move X21, X0
	035 Move X0, 0xAF3000
	036 Move X0, [X0+1624]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X21
	040 Move X2, X19
	041 Move X3, X20
	042 Move X4, X31
	043 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	044 Move X0, 0xAF3000
	045 Move X0, [X0+1632]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X21
	049 Call 0x1C17DEC

Method: System.Diagnostics.TraceFilter get_Filter()

Disassembly:
	0x0364B0A0 LDR X8, [X0 + 0xB8]
	0x0364B0A4 LDR X0, [X8 + 0x8]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Boolean get_NeedIndent()

Disassembly:
	0x0364B0A8 CBNZ X0, 0x364B018
	0x0364B0AC BL 0x1C16F20

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_NeedIndent(System.Boolean value)

Disassembly:
	0x0364B0B0 LDR X0, [X21]
	0x0364B0B4 LDR W8, [X0 + 0xE0]
	0x0364B0B8 CBNZ W8, 0x364B0C4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+32], W8
	003 Return 

Method: System.Void Write(System.String message)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void WriteIndent()

Disassembly:
	0x0364B0BC BL 0x1C16DFC
	0x0364B0C0 LDR X0, [X21]
	0x0364B0C4 LDR X8, [X0 + 0xB8]
	0x0364B0C8 MOV X1, X19
	0x0364B0CC LDP X20, X19, [X31 + 0x20]
	0x0364B0D0 LDP X22, X21, [X31 + 0x10]
	0x0364B0D4 LDR X2, [X8 + 0x10]
	0x0364B0D8 LDR X30, [X31], #0x30
	0x0364B0DC B 0x364B0E0
	0x0364B0E0 STP X30, X21, [X31 - 0x20]!
	0x0364B0E4 STP X20, X19, [X31 + 0x10]
	0x0364B0E8 ADRP X21, 0xD95000
	0x0364B0EC LDRB W8, [X21 + 0x5E0]
	0x0364B0F0 MOV X19, X2
	0x0364B0F4 MOV X20, X1
	0x0364B0F8 TBNZ X8, 0x0, 0x364B11C
	0x0364B0FC ADRP X0, 0xAEC000
	0x0364B100 LDR X0, [X0 + 0x6F8]
	0x0364B104 BL 0x1C16CF4
	0x0364B108 ADRP X0, 0xAA8000
	0x0364B10C LDR X0, [X0 + 0xE00]
	0x0364B110 BL 0x1C16CF4
	0x0364B114 MOVZ W8, 0x1
	0x0364B118 STRB W8, [X21 + 0x5E0]
	0x0364B11C CBZ X19, 0x364B214
	0x0364B120 LDR W8, [X19 + 0x10]
	0x0364B124 CBZ W8, 0x364B214
	0x0364B128 ADRP X8, 0xAEC000
	0x0364B12C LDR X8, [X8 + 0x6F8]
	0x0364B130 LDR X0, [X8]
	0x0364B134 BL 0x1C16F10
	0x0364B138 MOV X1, X19
	0x0364B13C MOV X2, X31
	0x0364B140 MOV X21, X0
	0x0364B144 BL 0x32EE1AC
	0x0364B148 CBZ X21, 0x364B220
	0x0364B14C LDR X8, [X21]
	0x0364B150 LDP X9, X1, [X8 + 0x1D8]
	0x0364B154 MOV X0, X21
	0x0364B158 BLR X9
	0x0364B15C TBZ X0, 0x0, 0x364B170
	0x0364B160 MOV X0, X21
	0x0364B164 MOV X1, X31
	0x0364B168 BL 0x32EE90C
	0x0364B16C B 0x364B17C
	0x0364B170 MOV X0, X21
	0x0364B174 MOV X1, X31
	0x0364B178 BL 0x32EE8A8
	0x0364B17C MOV X19, X0
	0x0364B180 CBZ X0, 0x364B224
	0x0364B184 LDR X8, [X19]
	0x0364B188 LDR X9, [X8 + 0x248]
	0x0364B18C LDR X2, [X8 + 0x250]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD96000
	008 Move W8, [X20+1485]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xAA9000
	015 Move X0, [X0+3544]
	016 Call 0x1C17CF4
	017 Move X0, 0xAD2000
	018 Move X0, [X0+192]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1485], W8
	022 Move W8, [X19+24]
	023 Move [X19+32], W31
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X21, 0xAD2000
	026 Move X22, 0xAA9000
	027 Move X21, [X21+192]
	028 Move X22, [X22+3544]
	029 Move W20, W31
	030 Move W8, [X19+28]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X19]
	033 Move X1, [X21]
	034 Move X0, X19
	035 Move X9, [X8+472]
	036 Move X2, [X8+480]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W23, W31
	040 Move X8, [X19]
	041 Move X1, [X22]
	042 Move X0, X19
	043 Move X9, [X8+472]
	044 Move X2, [X8+480]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move W8, [X19+28]
	047 Add W23, W23, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W8, [X19+24]
	050 Add W20, W20, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Return 

Method: System.Void WriteLine(System.String message)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void WriteLine(System.String message, System.String category)

Disassembly:
	0x0364B190 MOV X0, X19
	0x0364B194 MOV X1, X20
	0x0364B198 BLR X9
	0x0364B19C LDR X8, [X19]
	0x0364B1A0 LDP X9, X1, [X8 + 0x1D8]
	0x0364B1A4 MOV X0, X19
	0x0364B1A8 BLR X9
	0x0364B1AC MOV X20, X31
	0x0364B1B0 ADRP X10, 0xAA8000
	0x0364B1B4 LDR X8, [X19]
	0x0364B1B8 LDR X10, [X10 + 0xE00]
	0x0364B1BC LDRH W9, [X8 + 0x12E]
	0x0364B1C0 LDR X1, [X10]
	0x0364B1C4 CBZ X9, 0x364B1E8
	0x0364B1C8 LDR X10, [X8 + 0xB0]
	0x0364B1CC ADD X10, X10, 0x8
	0x0364B1D0 LDUR X11, [X10 - 0x8]
	0x0364B1D4 CMP X11, X1
	0x0364B1D8 B.EQ 0x364B1F8
	0x0364B1DC SUBS X9, X9, 0x1
	0x0364B1E0 ADD X10, X10, 0x10
	0x0364B1E4 B.NE 0x364B1D0
	0x0364B1E8 MOV X0, X19
	0x0364B1EC MOV W2, W31
	0x0364B1F0 BL 0x1C5C788
	0x0364B1F4 B 0x364B204
	0x0364B1F8 LDRSW X9, [X10]
	0x0364B1FC ADD X8, X8, X9, 0x4, LSL
	0x0364B200 ADD X0, X8, 0x138
	0x0364B204 LDP X8, X1, [X0]
	0x0364B208 MOV X0, X19
	0x0364B20C BLR X8
	0x0364B210 CBNZ X20, 0x364B228
	0x0364B214 LDP X20, X19, [X31 + 0x10]
	0x0364B218 LDP X30, X21, [X31], #0x20
	0x0364B21C RET
	0x0364B220 BL 0x1C16F20
	0x0364B224 BL 0x1C16F20
	0x0364B228 MOV X0, X20
	0x0364B22C BL 0x1C16F18
	0x0364B230 B 0x364B240
	0x0364B234 B 0x364B240
	0x0364B238 B 0x364B2AC
	0x0364B23C B 0x364B240
	0x0364B240 MOV X21, X0
	0x0364B244 CMP W1, 0x1
	0x0364B248 B.NE 0x364B344
	0x0364B24C MOV X0, X21
	0x0364B250 BL 0x3EB1AD0
	0x0364B254 MOV X19, X0
	0x0364B258 ADRP X0, 0xAAE000
	0x0364B25C LDR X0, [X0 + 0xCC0]
	0x0364B260 BL 0x1C16D08
	0x0364B264 LDR X8, [X19]
	0x0364B268 LDR X1, [X8]
	0x0364B26C BL 0x1C17270
	0x0364B270 TBZ X0, 0x0, 0x364B280
	0x0364B274 LDP X20, X19, [X31 + 0x10]
	0x0364B278 LDP X30, X21, [X31], #0x20
	0x0364B27C B 0x3EB1AE0
	0x0364B280 MOVZ W0, 0x8
	0x0364B284 BL 0x3EB1AF0
	0x0364B288 LDR X8, [X19]
	0x0364B28C STR X8, [X0]
	0x0364B290 ADRP X1, 0x869000
	0x0364B294 ADD X1, X1, 0xE58
	0x0364B298 MOV X2, X31
	0x0364B29C BL 0x3EB1B00
	0x0364B2A0 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xD96000
	008 Move W8, [X22+1486]
	009 Move X21, X2
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xAAB000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move X0, 0xAAD000
	020 Move X0, [X0+2344]
	021 Call 0x1C17CF4
	022 Move X0, 0xAA9000
	023 Move X0, [X0+2440]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1486], W8
	027 Move X0, [X19+48]
	028 Compare X0, 0
	029 JumpIfEqual {49}
	030 Move X9, 0xAA9000
	031 Move X8, [X0]
	032 Move X9, [X9+2440]
	033 Move W3, 16
	034 Move X1, X31
	035 Move W4, W31
	036 Move X2, [X9]
	037 Move X9, [X8+376]
	038 Move X8, [X8+384]
	039 Move X5, X20
	040 Move X6, X31
	041 Move X7, X31
	042 Move [X31], X31
	043 Move [X31+8], X8
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {68}
	049 Compare X21, 0
	050 JumpIfEqual {75}
	051 Move X8, 0xAAD000
	052 Move X8, [X8+2344]
	053 Move X1, [X8]
	054 Compare X20, 0
	055 JumpIfNotEqual {61}
	056 Move X8, 0xAAB000
	057 Move X8, [X8+632]
	058 Move X8, [X8]
	059 Move X8, [X8+184]
	060 Move X20, [X8]
	061 Move X0, X21
	062 Move X2, X20
	063 Move X3, X31
	064 Call String.Concat, X0, X1, X2
	065 Move X8, [X19]
	066 Move X1, X0
	067 Move X0, X19
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X30, [X31+16]
	073 Add X31, X31, 64
	074 Return 
	075 Move X8, [X19]
	076 Move X0, X19
	077 Move X1, X20
	078 Move X3, [X8+504]
	079 Move X2, [X8+512]
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X30, [X31+16]
	085 Add X31, X31, 64
	086 CallNoReturn X3

