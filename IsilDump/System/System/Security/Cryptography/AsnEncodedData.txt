Type: System.Security.Cryptography.AsnEncodedData

Method: System.Void .ctor()

Disassembly:
	0x0364F380 MOVZ W8, 0x1
	0x0364F384 STRB W8, [X20 + 0x60F]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .ctor(System.String oid, System.Byte[] rawData)

Disassembly:
	0x0364F388 STR W31, [X31 + 0xC]
	0x0364F38C LDR X8, [X19 + 0x18]
	0x0364F390 CBZ X8, 0x364F6A0
	0x0364F394 LDR W9, [X8 + 0x18]
	0x0364F398 CMP W9, 0x4
	0x0364F39C B.LT 0x364F5F8
	0x0364F3A0 LDRB W9, [X8 + 0x20]
	0x0364F3A4 CMP W9, 0x3
	0x0364F3A8 B.NE 0x364F5F8
	0x0364F3AC LDRB W9, [X8 + 0x21]
	0x0364F3B0 CMP W9, 0x2
	0x0364F3B4 B.NE 0x364F5F8
	0x0364F3B8 ADRP X11, 0xAA4000
	0x0364F3BC LDRB W9, [X8 + 0x23]
	0x0364F3C0 LDRB W8, [X8 + 0x22]
	0x0364F3C4 LDR X11, [X11 + 0x8F0]
	0x0364F3C8 MOVN W10, 0x0
	0x0364F3CC LSLV W8, W10, W8
	0x0364F3D0 LDR X0, [X11]
	0x0364F3D4 AND W20, W8, W9, 0x0
	0x0364F3D8 STR W20, [X31 + 0xC]
	0x0364F3DC BL 0x1C16F10
	0x0364F3E0 MOV X1, X31
	0x0364F3E4 MOV X19, X0
	0x0364F3E8 BL 0x3231AC4
	0x0364F3EC TBZ X20, 0x7, 0x364F40C
	0x0364F3F0 CBZ X19, 0x364F6A0
	0x0364F3F4 ADRP X8, 0xAED000
	0x0364F3F8 LDR X8, [X8 + 0x8D8]
	0x0364F3FC MOV X0, X19
	0x0364F400 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD92000
	008 Move X22, 0xAEE000
	009 Move W8, [X23+1538]
	010 Move X22, [X22+2016]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xAEE000
	019 Move X0, [X0+2016]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1538], W8
	023 Move X0, X20
	024 Move X1, X31
	025 Call Object..ctor, X0
	026 Move X0, [X22]
	027 Call 0x1C17F10
	028 Move X1, X21
	029 Move X22, X0
	030 Call Oid..ctor, X0, X1
	031 Move [X20+16], X22
	032 Move X0, X20
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X23, [X31+56]

Method: System.Void .ctor(System.Security.Cryptography.Oid oid, System.Byte[] rawData)

Disassembly:
	0x0364F4F4 CBZ X19, 0x364F6A0
	0x0364F4F8 MOV X0, X19
	0x0364F4FC MOV X1, X31
	0x0364F500 BL 0x323260C
	0x0364F504 CMP W0, 0x1
	0x0364F508 B.LT 0x364F524
	0x0364F50C ADRP X8, 0xAA4000
	0x0364F510 LDR X8, [X8 + 0x838]
	0x0364F514 MOV X0, X19
	0x0364F518 MOV X2, X31
	0x0364F51C LDR X1, [X8]
	0x0364F520 BL 0x32333E0
	0x0364F524 ADRP X8, 0xAED000
	0x0364F528 LDR X8, [X8 + 0x8C8]
	0x0364F52C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move X0, X21
	011 Move X1, X20
	012 Call AsnEncodedData.set_Oid, X0, X1
	013 Move X1, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X0, X21
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Call AsnEncodedData.set_RawData, X0, X1
	020 Return 

Method: System.Void .ctor(System.Security.Cryptography.AsnEncodedData asnEncodedData)

Disassembly:
	0x0364F5A8 LDR X8, [X8 + 0x838]
	0x0364F5AC MOV X0, X19
	0x0364F5B0 MOV X2, X31
	0x0364F5B4 LDR X1, [X8]
	0x0364F5B8 BL 0x32333E0
	0x0364F5BC ADRP X8, 0xAED000
	0x0364F5C0 LDR X8, [X8 + 0x8A0]
	0x0364F5C4 MOV X0, X19
	0x0364F5C8 MOV X2, X31
	0x0364F5CC LDR X1, [X8]
	0x0364F5D0 BL 0x32333E0
	0x0364F5D4 TBNZ X20, 0x0, 0x364F610
	0x0364F5D8 ADRP X8, 0xAD7000
	0x0364F5DC LDR X8, [X8 + 0x350]
	0x0364F5E0 ADD X0, X31, 0xC
	0x0364F5E4 MOV X2, X31
	0x0364F5E8 LDR X1, [X8]
	0x0364F5EC BL 0x337B774
	0x0364F5F0 CBNZ X19, 0x364F670
	0x0364F5F4 B 0x364F6A0
	0x0364F5F8 ADRP X8, 0xAED000
	0x0364F5FC LDR X8, [X8 + 0x890]
	0x0364F600 LDR X0, [X8]
	0x0364F604 LDP X20, X19, [X31 + 0x10]
	0x0364F608 LDR X30, [X31], #0x20
	0x0364F60C RET
	0x0364F610 CBZ X19, 0x364F6A0
	0x0364F614 MOV X0, X19
	0x0364F618 MOV X1, X31
	0x0364F61C BL 0x323260C
	0x0364F620 CMP W0, 0x1
	0x0364F624 B.LT 0x364F640
	0x0364F628 ADRP X8, 0xAA4000
	0x0364F62C LDR X8, [X8 + 0x838]
	0x0364F630 MOV X0, X19
	0x0364F634 MOV X2, X31
	0x0364F638 LDR X1, [X8]
	0x0364F63C BL 0x32333E0
	0x0364F640 ADRP X8, 0xAED000
	0x0364F644 LDR X8, [X8 + 0x8B8]
	0x0364F648 MOV X0, X19
	0x0364F64C MOV X2, X31
	0x0364F650 LDR X1, [X8]
	0x0364F654 BL 0x32333E0
	0x0364F658 ADRP X8, 0xAD7000
	0x0364F65C LDR X8, [X8 + 0x350]
	0x0364F660 ADD X0, X31, 0xC
	0x0364F664 MOV X2, X31
	0x0364F668 LDR X1, [X8]
	0x0364F66C BL 0x337B774
	0x0364F670 ADRP X8, 0xAED000
	0x0364F674 LDR X8, [X8 + 0x8D0]
	0x0364F678 MOV X2, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD92000
	007 Move W8, [X21+1539]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAEE000
	015 Move X0, [X0+2016]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1539], W8
	019 Move X0, X20
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Compare X19, 0
	023 JumpIfEqual {46}
	024 Move X21, [X19+16]
	025 Compare X21, 0
	026 JumpIfEqual {37}
	027 Move X8, 0xAEE000
	028 Move X8, [X8+2016]
	029 Move X0, [X8]
	030 Call 0x1C17F10
	031 Move X1, X21
	032 Move X22, X0
	033 Call Oid..ctor, X0, X1
	034 Move X0, X20
	035 Move X1, X22
	036 Call AsnEncodedData.set_Oid, X0, X1
	037 Move X1, [X19+24]
	038 Move X0, X20
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Call AsnEncodedData.set_RawData, X0, X1
	045 Return 
	046 Move X0, 0xAAA000
	047 Move X0, [X0+1320]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X19, X0
	051 Move X0, 0xAEE000
	052 Move X0, [X0+2120]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Move X2, X31
	057 Call ArgumentNullException..ctor, X0, X1
	058 Move X0, 0xAEE000
	059 Move X0, [X0+2128]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Call 0x1C17DEC

Method: System.Security.Cryptography.Oid get_Oid()

Disassembly:
	0x0364F67C MOV X0, X19
	0x0364F680 MOV X3, X31

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Oid(System.Security.Cryptography.Oid value)

Disassembly:
	0x0364F530 MOV X2, X31
	0x0364F534 LDR X1, [X8]
	0x0364F538 BL 0x32333E0
	0x0364F53C TBZ X20, 0x2, 0x364F588
	0x0364F540 CBZ X19, 0x364F6A0
	0x0364F544 MOV X0, X19
	0x0364F548 MOV X1, X31
	0x0364F54C BL 0x323260C
	0x0364F550 CMP W0, 0x1
	0x0364F554 B.LT 0x364F570
	0x0364F558 ADRP X8, 0xAA4000
	0x0364F55C LDR X8, [X8 + 0x838]
	0x0364F560 MOV X0, X19
	0x0364F564 MOV X2, X31
	0x0364F568 LDR X1, [X8]
	0x0364F56C BL 0x32333E0
	0x0364F570 ADRP X8, 0xAED000
	0x0364F574 LDR X8, [X8 + 0x8B0]
	0x0364F578 MOV X0, X19
	0x0364F57C MOV X2, X31
	0x0364F580 LDR X1, [X8]
	0x0364F584 BL 0x32333E0
	0x0364F588 TBZ X20, 0x1, 0x364F5D4
	0x0364F58C CBZ X19, 0x364F6A0
	0x0364F590 MOV X0, X19
	0x0364F594 MOV X1, X31
	0x0364F598 BL 0x323260C
	0x0364F59C CMP W0, 0x1
	0x0364F5A0 B.LT 0x364F5BC
	0x0364F5A4 ADRP X8, 0xAA4000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD92000
	006 Move W8, [X21+1540]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAEE000
	014 Move X0, [X0+2016]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1540], W8
	018 Compare X20, 0
	019 JumpIfEqual {32}
	020 Move X8, 0xAEE000
	021 Move X8, [X8+2016]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X21, X0
	026 Call Object..ctor, X0
	027 Move V0, [X20+1]
	028 Move [X21+1], V0
	029 Move W8, [X20+32]
	030 Move [X21+32], W8
	031 Move [X19+16], X21
	032 Move [X19+16], X31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 

Method: System.Byte[] get_RawData()

Disassembly:
	0x0364F684 LDR X1, [X8]
	0x0364F688 BL 0x3234224

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_RawData(System.Byte[] value)

Disassembly:
	0x0364F404 LDR X1, [X8]
	0x0364F408 BL 0x32333E0
	0x0364F40C TBZ X20, 0x6, 0x364F458
	0x0364F410 CBZ X19, 0x364F6A0
	0x0364F414 MOV X0, X19
	0x0364F418 MOV X1, X31
	0x0364F41C BL 0x323260C
	0x0364F420 CMP W0, 0x1
	0x0364F424 B.LT 0x364F440
	0x0364F428 ADRP X8, 0xAA4000
	0x0364F42C LDR X8, [X8 + 0x838]
	0x0364F430 MOV X0, X19
	0x0364F434 MOV X2, X31
	0x0364F438 LDR X1, [X8]
	0x0364F43C BL 0x32333E0
	0x0364F440 ADRP X8, 0xAED000
	0x0364F444 LDR X8, [X8 + 0x8A8]
	0x0364F448 MOV X0, X19
	0x0364F44C MOV X2, X31
	0x0364F450 LDR X1, [X8]
	0x0364F454 BL 0x32333E0
	0x0364F458 TBZ X20, 0x5, 0x364F4A4
	0x0364F45C CBZ X19, 0x364F6A0
	0x0364F460 MOV X0, X19
	0x0364F464 MOV X1, X31
	0x0364F468 BL 0x323260C
	0x0364F46C CMP W0, 0x1
	0x0364F470 B.LT 0x364F48C
	0x0364F474 ADRP X8, 0xAA4000
	0x0364F478 LDR X8, [X8 + 0x838]
	0x0364F47C MOV X0, X19
	0x0364F480 MOV X2, X31
	0x0364F484 LDR X1, [X8]
	0x0364F488 BL 0x32333E0
	0x0364F48C ADRP X8, 0xAED000
	0x0364F490 LDR X8, [X8 + 0x8C0]
	0x0364F494 MOV X0, X19
	0x0364F498 MOV X2, X31
	0x0364F49C LDR X1, [X8]
	0x0364F4A0 BL 0x32333E0
	0x0364F4A4 TBZ X20, 0x4, 0x364F4F0
	0x0364F4A8 CBZ X19, 0x364F6A0
	0x0364F4AC MOV X0, X19
	0x0364F4B0 MOV X1, X31
	0x0364F4B4 BL 0x323260C
	0x0364F4B8 CMP W0, 0x1
	0x0364F4BC B.LT 0x364F4D8
	0x0364F4C0 ADRP X8, 0xAA4000
	0x0364F4C4 LDR X8, [X8 + 0x838]
	0x0364F4C8 MOV X0, X19
	0x0364F4CC MOV X2, X31
	0x0364F4D0 LDR X1, [X8]
	0x0364F4D4 BL 0x32333E0
	0x0364F4D8 ADRP X8, 0xAD7000
	0x0364F4DC LDR X8, [X8 + 0x198]
	0x0364F4E0 MOV X0, X19
	0x0364F4E4 MOV X2, X31
	0x0364F4E8 LDR X1, [X8]
	0x0364F4EC BL 0x32333E0
	0x0364F4F0 TBZ X20, 0x3, 0x364F53C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD92000
	007 Move W8, [X21+1541]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAA5000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1541], W8
	019 Compare X20, 0
	020 JumpIfEqual {51}
	021 Move X0, X20
	022 Move X1, X31
	023 Call Array.Clone, X0
	024 Compare X0, 0
	025 JumpIfEqual {44}
	026 Move X22, 0xAA5000
	027 Move X22, [X22+1560]
	028 Move X20, X0
	029 Move X21, [X22]
	030 Move X1, X21
	031 Call 0x1C17E00
	032 Compare X0, 0
	033 JumpIfEqual {69}
	034 Move [X19+24], X0
	035 Move X19, [X22]
	036 Move X0, X20
	037 Move X1, X19
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfNotEqual {45}
	041 Move X0, X20
	042 Move X1, X19
	043 Call 0x1C181E0
	044 Move [X19+24], X31
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 
	051 Move X0, 0xAAA000
	052 Move X0, [X0+1320]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0xAEE000
	057 Move X0, [X0+2104]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Move X2, X31
	062 Call ArgumentNullException..ctor, X0, X1
	063 Move X0, 0xAEE000
	064 Move X0, [X0+2112]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Call 0x1C17DEC
	069 Move X0, X20
	070 Move X1, X21
	071 Call 0x1C181E0

Method: System.Void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData)

Disassembly:
	0x0364F68C LDR X8, [X19]
	0x0364F690 MOV X0, X19
	0x0364F694 LDP X9, X1, [X8 + 0x168]
	0x0364F698 BLR X9
	0x0364F69C B 0x364F604
	0x0364F6A0 BL 0x1C16F20
	0x0364F6A4 STP X30, X25, [X31 - 0x40]!
	0x0364F6A8 STP X24, X23, [X31 + 0x10]
	0x0364F6AC STP X22, X21, [X31 + 0x20]
	0x0364F6B0 STP X20, X19, [X31 + 0x30]
	0x0364F6B4 ADRP X25, 0xD91000
	0x0364F6B8 ADRP X24, 0xAED000
	0x0364F6BC ADRP X22, 0xAD2000
	0x0364F6C0 ADRP X23, 0xAEA000
	0x0364F6C4 LDRB W8, [X25 + 0x61D]
	0x0364F6C8 LDR X24, [X24 + 0x7E0]
	0x0364F6CC LDR X22, [X22 + 0x228]
	0x0364F6D0 LDR X23, [X23 + 0x8F8]
	0x0364F6D4 MOV W20, W2
	0x0364F6D8 MOV X21, X1
	0x0364F6DC MOV X19, X0
	0x0364F6E0 TBNZ X8, 0x0, 0x364F710
	0x0364F6E4 ADRP X0, 0xAED000
	0x0364F6E8 LDR X0, [X0 + 0x7E0]
	0x0364F6EC BL 0x1C16CF4
	0x0364F6F0 ADRP X0, 0xAEA000
	0x0364F6F4 LDR X0, [X0 + 0x8F8]
	0x0364F6F8 BL 0x1C16CF4
	0x0364F6FC ADRP X0, 0xAD2000
	0x0364F700 LDR X0, [X0 + 0x228]
	0x0364F704 BL 0x1C16CF4
	0x0364F708 MOVZ W8, 0x1
	0x0364F70C STRB W8, [X25 + 0x61D]
	0x0364F710 MOV X0, X19
	0x0364F714 MOV X1, X31
	0x0364F718 BL 0x33BDD8C
	0x0364F71C LDR X0, [X24]
	0x0364F720 BL 0x1C16F10
	0x0364F724 LDR X24, [X22]
	0x0364F728 LDR X23, [X23]
	0x0364F72C MOV X1, X31
	0x0364F730 MOV X22, X0
	0x0364F734 BL 0x33BDD8C
	0x0364F738 STP X24, X23, [X22 + 0x10]
	0x0364F73C STR X22, [X19 + 0x10]
	0x0364F740 CBZ X21, 0x364F774
	0x0364F744 LDR X1, [X21 + 0x18]
	0x0364F748 AND W8, W20, 0x1
	0x0364F74C MOV X0, X19
	0x0364F750 STRB W8, [X19 + 0x20]
	0x0364F754 STR X1, [X19 + 0x18]
	0x0364F758 BL 0x3650EAC
	0x0364F75C STR W0, [X19 + 0x28]
	0x0364F760 LDP X20, X19, [X31 + 0x30]
	0x0364F764 LDP X22, X21, [X31 + 0x20]
	0x0364F768 LDP X24, X23, [X31 + 0x10]
	0x0364F76C LDP X30, X25, [X31], #0x40
	0x0364F770 RET
	0x0364F774 BL 0x1C16F20
	0x0364F778 STP X30, X25, [X31 - 0x40]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD92000
	007 Move W8, [X21+1542]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAEE000
	015 Move X0, [X0+2016]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1542], W8
	019 Compare X19, 0
	020 JumpIfEqual {55}
	021 Move X21, [X19+16]
	022 Compare X21, 0
	023 JumpIfEqual {34}
	024 Move X8, 0xAEE000
	025 Move X8, [X8+2016]
	026 Move X0, [X8]
	027 Call 0x1C17F10
	028 Move X1, X21
	029 Move X22, X0
	030 Call Oid..ctor, X0, X1
	031 Move X0, X20
	032 Move X1, X22
	033 Call AsnEncodedData.set_Oid, X0, X1
	034 Move X21, 0xD92000
	035 Move W8, [X21+1540]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {45}
	040 Move X0, 0xAEE000
	041 Move X0, [X0+2016]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+1540], W8
	045 Move [X20+16], X31
	046 Move X1, [X19+24]
	047 Move X0, X20
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Call AsnEncodedData.set_RawData, X0, X1
	054 Return 
	055 Move X0, 0xAAA000
	056 Move X0, [X0+1320]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X19, X0
	060 Move X0, 0xAEE000
	061 Move X0, [X0+2120]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Move X2, X31
	066 Call ArgumentNullException..ctor, X0, X1
	067 Move X0, 0xAEE000
	068 Move X0, [X0+2136]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Call 0x1C17DEC

Method: System.String Format(System.Boolean multiLine)

Disassembly:
	0x0364F77C STP X24, X23, [X31 + 0x10]
	0x0364F780 STP X22, X21, [X31 + 0x20]
	0x0364F784 STP X20, X19, [X31 + 0x30]
	0x0364F788 ADRP X25, 0xD91000
	0x0364F78C ADRP X24, 0xAED000
	0x0364F790 ADRP X22, 0xAD4000
	0x0364F794 ADRP X23, 0xAED000
	0x0364F798 LDRB W8, [X25 + 0x67F]
	0x0364F79C LDR X24, [X24 + 0x7E0]
	0x0364F7A0 LDR X22, [X22 + 0x5C8]
	0x0364F7A4 LDR X23, [X23 + 0x8E0]
	0x0364F7A8 MOV W20, W2
	0x0364F7AC MOV X21, X1
	0x0364F7B0 MOV X19, X0
	0x0364F7B4 TBNZ X8, 0x0, 0x364F7E4
	0x0364F7B8 ADRP X0, 0xAED000
	0x0364F7BC LDR X0, [X0 + 0x7E0]
	0x0364F7C0 BL 0x1C16CF4
	0x0364F7C4 ADRP X0, 0xAED000
	0x0364F7C8 LDR X0, [X0 + 0x8E0]
	0x0364F7CC BL 0x1C16CF4
	0x0364F7D0 ADRP X0, 0xAD4000
	0x0364F7D4 LDR X0, [X0 + 0x5C8]
	0x0364F7D8 BL 0x1C16CF4
	0x0364F7DC MOVZ W8, 0x1
	0x0364F7E0 STRB W8, [X25 + 0x67F]
	0x0364F7E4 MOV X0, X19
	0x0364F7E8 MOV X1, X31
	0x0364F7EC BL 0x33BDD8C
	0x0364F7F0 LDR X0, [X24]
	0x0364F7F4 BL 0x1C16F10
	0x0364F7F8 LDR X24, [X22]
	0x0364F7FC LDR X23, [X23]
	0x0364F800 MOV X1, X31
	0x0364F804 MOV X22, X0
	0x0364F808 BL 0x33BDD8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD92000
	006 Move W8, [X21+1543]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAA7000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1543], W8
	018 Move X8, [X20+24]
	019 Compare X8, 0
	020 JumpIfEqual {34}
	021 Move X8, [X20+16]
	022 Compare X8, 0
	023 JumpIfEqual {44}
	024 Move X8, [X20]
	025 And W1, W19, 1
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X3, [X8+408]
	030 Move X2, [X8+416]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 CallNoReturn X3
	034 Move X8, 0xAA7000
	035 Move X8, [X8+632]
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X8, [X8]
	039 Move X8, [X8+184]
	040 Move X0, [X8]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Move X0, X20
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move W1, W31
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]

Method: System.String ToString(System.Boolean multiLine)

Disassembly:
	0x0364F924 STP X24, X23, [X31 + 0x10]
	0x0364F928 STP X22, X21, [X31 + 0x20]
	0x0364F92C STP X20, X19, [X31 + 0x30]
	0x0364F930 ADRP X25, 0xD91000
	0x0364F934 ADRP X24, 0xAED000
	0x0364F938 ADRP X22, 0xAD4000
	0x0364F93C ADRP X23, 0xAEA000
	0x0364F940 LDRB W8, [X25 + 0x69F]
	0x0364F944 LDR X24, [X24 + 0x7E0]
	0x0364F948 LDR X22, [X22 + 0x650]
	0x0364F94C LDR X23, [X23 + 0x910]
	0x0364F950 MOV W20, W2
	0x0364F954 MOV X21, X1
	0x0364F958 MOV X19, X0
	0x0364F95C TBNZ X8, 0x0, 0x364F98C
	0x0364F960 ADRP X0, 0xAED000
	0x0364F964 LDR X0, [X0 + 0x7E0]
	0x0364F968 BL 0x1C16CF4
	0x0364F96C ADRP X0, 0xAD4000
	0x0364F970 LDR X0, [X0 + 0x650]
	0x0364F974 BL 0x1C16CF4
	0x0364F978 ADRP X0, 0xAEA000
	0x0364F97C LDR X0, [X0 + 0x910]
	0x0364F980 BL 0x1C16CF4
	0x0364F984 MOVZ W8, 0x1
	0x0364F988 STRB W8, [X25 + 0x69F]
	0x0364F98C MOV X0, X19
	0x0364F990 MOV X1, X31
	0x0364F994 BL 0x33BDD8C
	0x0364F998 LDR X0, [X24]
	0x0364F99C BL 0x1C16F10
	0x0364F9A0 LDR X24, [X22]
	0x0364F9A4 LDR X23, [X23]
	0x0364F9A8 MOV X1, X31
	0x0364F9AC MOV X22, X0
	0x0364F9B0 BL 0x33BDD8C
	0x0364F9B4 STP X24, X23, [X22 + 0x10]
	0x0364F9B8 STR X22, [X19 + 0x10]
	0x0364F9BC CBZ X21, 0x364F9F0
	0x0364F9C0 LDR X1, [X21 + 0x18]
	0x0364F9C4 AND W8, W20, 0x1
	0x0364F9C8 MOV X0, X19
	0x0364F9CC STRB W8, [X19 + 0x20]
	0x0364F9D0 STR X1, [X19 + 0x18]
	0x0364F9D4 BL 0x365E990
	0x0364F9D8 STR W0, [X19 + 0x38]
	0x0364F9DC LDP X20, X19, [X31 + 0x30]
	0x0364F9E0 LDP X22, X21, [X31 + 0x20]
	0x0364F9E4 LDP X24, X23, [X31 + 0x10]
	0x0364F9E8 LDP X30, X25, [X31], #0x40
	0x0364F9EC RET
	0x0364F9F0 BL 0x1C16F20
	0x0364F9F4 STR X30, [X31 - 0x40]!
	0x0364F9F8 STP X24, X23, [X31 + 0x10]
	0x0364F9FC STP X22, X21, [X31 + 0x20]
	0x0364FA00 STP X20, X19, [X31 + 0x30]
	0x0364FA04 ADRP X23, 0xD91000
	0x0364FA08 LDRB W8, [X23 + 0x610]
	0x0364FA0C MOV X19, X3
	0x0364FA10 MOV X21, X2
	0x0364FA14 MOV X22, X1
	0x0364FA18 MOV X20, X0
	0x0364FA1C TBNZ X8, 0x0, 0x364FA40
	0x0364FA20 ADRP X0, 0xAED000
	0x0364FA24 LDR X0, [X0 + 0x8E8]
	0x0364FA28 BL 0x1C16CF4
	0x0364FA2C ADRP X0, 0xAED000
	0x0364FA30 LDR X0, [X0 + 0x7E0]
	0x0364FA34 BL 0x1C16CF4
	0x0364FA38 MOVZ W8, 0x1
	0x0364FA3C STRB W8, [X23 + 0x610]
	0x0364FA40 MOV X0, X20
	0x0364FA44 MOV X1, X31
	0x0364FA48 BL 0x33BDD8C
	0x0364FA4C CBZ X22, 0x364FAD4
	0x0364FA50 CBZ X21, 0x364FAF4
	0x0364FA54 CBZ X19, 0x364FB14
	0x0364FA58 ADRP X8, 0xAED000
	0x0364FA5C LDR X8, [X8 + 0x7E0]
	0x0364FA60 ADRP X24, 0xAED000
	0x0364FA64 LDR X0, [X8]
	0x0364FA68 LDR X24, [X24 + 0x8E8]
	0x0364FA6C BL 0x1C16F10
	0x0364FA70 MOV X1, X31
	0x0364FA74 MOV X23, X0
	0x0364FA78 BL 0x33BDD8C
	0x0364FA7C LDR V0, [X22 + 0x1]
	0x0364FA80 STR V0, [X23 + 0x1]
	0x0364FA84 LDR W8, [X22 + 0x20]
	0x0364FA88 STR W8, [X23 + 0x20]
	0x0364FA8C STR X23, [X20 + 0x20]
	0x0364FA90 LDR X0, [X24]
	0x0364FA94 BL 0x1C16F10
	0x0364FA98 MOV X1, X21
	0x0364FA9C MOV X22, X0
	0x0364FAA0 BL 0x364E5A8
	0x0364FAA4 STR X22, [X20 + 0x18]
	0x0364FAA8 LDR X0, [X24]
	0x0364FAAC BL 0x1C16F10
	0x0364FAB0 MOV X1, X19
	0x0364FAB4 MOV X21, X0
	0x0364FAB8 BL 0x364E5A8
	0x0364FABC STR X21, [X20 + 0x10]
	0x0364FAC0 LDP X20, X19, [X31 + 0x30]
	0x0364FAC4 LDP X22, X21, [X31 + 0x20]
	0x0364FAC8 LDP X24, X23, [X31 + 0x10]
	0x0364FACC LDR X30, [X31], #0x40
	0x0364FAD0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD92000
	006 Move W8, [X21+1544]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0xAEB000
	014 Move X0, [X0+2240]
	015 Call 0x1C17CF4
	016 Move X0, 0xAEB000
	017 Move X0, [X0+2264]
	018 Call 0x1C17CF4
	019 Move X0, 0xAD5000
	020 Move X0, [X0+1480]
	021 Call 0x1C17CF4
	022 Move X0, 0xAD5000
	023 Move X0, [X0+1616]
	024 Call 0x1C17CF4
	025 Move X0, 0xAD5000
	026 Move X0, [X0+1904]
	027 Call 0x1C17CF4
	028 Move X0, 0xAD3000
	029 Move X0, [X0+552]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1544], W8
	033 Move X8, [X19+16]
	034 Compare X8, 0
	035 JumpIfEqual {151}
	036 Move X9, 0xAD3000
	037 Move X9, [X9+552]
	038 Move X21, [X8+16]
	039 Move X2, X31
	040 Move X1, [X9]
	041 Move X0, X21
	042 Call String.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {53}
	047 And W1, W20, 1
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Move X8, 0xAD5000
	054 Move X8, [X8+1480]
	055 Move X0, X21
	056 Move X2, X31
	057 Move X1, [X8]
	058 Call String.op_Equality, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {71}
	063 And W1, W20, 1
	064 Move X0, X19
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Call AsnEncodedData.EnhancedKeyUsageExtension, X0, X1
	070 Return X0
	071 Move X8, 0xAD5000
	072 Move X8, [X8+1904]
	073 Move X0, X21
	074 Move X2, X31
	075 Move X1, [X8]
	076 Call String.op_Equality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {89}
	081 And W1, W20, 1
	082 Move X0, X19
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X30, [X31+32]
	086 Move X21, [X31+40]
	087 Call AsnEncodedData.KeyUsageExtension, X0, X1
	088 Return X0
	089 Move X8, 0xAD5000
	090 Move X8, [X8+1616]
	091 Move X0, X21
	092 Move X2, X31
	093 Move X1, [X8]
	094 Call String.op_Equality, X0, X1
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {107}
	099 And W1, W20, 1
	100 Move X0, X19
	101 Move X20, [X31+16]
	102 Move X19, [X31+24]
	103 Move X30, [X31+32]
	104 Move X21, [X31+40]
	105 Call AsnEncodedData.SubjectKeyIdentifierExtension, X0, X1
	106 Return X0
	107 Move X8, 0xAEB000
	108 Move X8, [X8+2240]
	109 Move X0, X21
	110 Move X2, X31
	111 Move X1, [X8]
	112 Call String.op_Equality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {125}
	117 And W1, W20, 1
	118 Move X0, X19
	119 Move X20, [X31+16]
	120 Move X19, [X31+24]
	121 Move X30, [X31+32]
	122 Move X21, [X31+40]
	123 Call AsnEncodedData.SubjectAltName, X0, X1
	124 Return X0
	125 Move X8, 0xAEB000
	126 Move X8, [X8+2264]
	127 Move X0, X21
	128 Move X2, X31
	129 Move X1, [X8]
	130 Call String.op_Equality, X0, X1
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {143}
	135 Move X0, X19
	136 Move X20, [X31+16]
	137 Move X19, [X31+24]
	138 Move W1, W31
	139 Move X30, [X31+32]
	140 Move X21, [X31+40]
	141 Call AsnEncodedData.NetscapeCertType, X0, X1
	142 Return X0
	143 Move X0, X19
	144 Move X20, [X31+16]
	145 Move X19, [X31+24]
	146 Move W1, W31
	147 Move X30, [X31+32]
	148 Move X21, [X31+40]
	149 Call AsnEncodedData.Default, X0, X1
	150 Return X0
	151 Call 0x1C17F20

Method: System.String Default(System.Boolean multiLine)

Disassembly:
	0x0364F80C STP X24, X23, [X22 + 0x10]
	0x0364F810 STR X22, [X19 + 0x10]
	0x0364F814 CBZ X21, 0x364F848
	0x0364F818 LDR X1, [X21 + 0x18]
	0x0364F81C AND W8, W20, 0x1
	0x0364F820 MOV X0, X19
	0x0364F824 STRB W8, [X19 + 0x20]
	0x0364F828 STR X1, [X19 + 0x18]
	0x0364F82C BL 0x365CF5C
	0x0364F830 STR W0, [X19 + 0x30]
	0x0364F834 LDP X20, X19, [X31 + 0x30]
	0x0364F838 LDP X22, X21, [X31 + 0x20]
	0x0364F83C LDP X24, X23, [X31 + 0x10]
	0x0364F840 LDP X30, X25, [X31], #0x40
	0x0364F844 RET
	0x0364F848 BL 0x1C16F20
	0x0364F84C STP X30, X25, [X31 - 0x40]!
	0x0364F850 STP X24, X23, [X31 + 0x10]
	0x0364F854 STP X22, X21, [X31 + 0x20]
	0x0364F858 STP X20, X19, [X31 + 0x30]
	0x0364F85C ADRP X25, 0xD91000
	0x0364F860 ADRP X24, 0xAED000
	0x0364F864 ADRP X22, 0xAD4000
	0x0364F868 ADRP X23, 0xAEA000
	0x0364F86C LDRB W8, [X25 + 0x695]
	0x0364F870 LDR X24, [X24 + 0x7E0]
	0x0364F874 LDR X22, [X22 + 0x770]
	0x0364F878 LDR X23, [X23 + 0x8C8]
	0x0364F87C MOV W20, W2
	0x0364F880 MOV X21, X1
	0x0364F884 MOV X19, X0
	0x0364F888 TBNZ X8, 0x0, 0x364F8B8
	0x0364F88C ADRP X0, 0xAED000
	0x0364F890 LDR X0, [X0 + 0x7E0]
	0x0364F894 BL 0x1C16CF4
	0x0364F898 ADRP X0, 0xAEA000
	0x0364F89C LDR X0, [X0 + 0x8C8]
	0x0364F8A0 BL 0x1C16CF4
	0x0364F8A4 ADRP X0, 0xAD4000
	0x0364F8A8 LDR X0, [X0 + 0x770]
	0x0364F8AC BL 0x1C16CF4
	0x0364F8B0 MOVZ W8, 0x1
	0x0364F8B4 STRB W8, [X25 + 0x695]
	0x0364F8B8 MOV X0, X19
	0x0364F8BC MOV X1, X31
	0x0364F8C0 BL 0x33BDD8C
	0x0364F8C4 LDR X0, [X24]
	0x0364F8C8 BL 0x1C16F10
	0x0364F8CC LDR X24, [X22]
	0x0364F8D0 LDR X23, [X23]
	0x0364F8D4 MOV X1, X31
	0x0364F8D8 MOV X22, X0
	0x0364F8DC BL 0x33BDD8C
	0x0364F8E0 STP X24, X23, [X22 + 0x10]
	0x0364F8E4 STR X22, [X19 + 0x10]
	0x0364F8E8 CBZ X21, 0x364F91C
	0x0364F8EC LDR X1, [X21 + 0x18]
	0x0364F8F0 AND W8, W20, 0x1
	0x0364F8F4 MOV X0, X19
	0x0364F8F8 STRB W8, [X19 + 0x20]
	0x0364F8FC STR X1, [X19 + 0x18]
	0x0364F900 BL 0x365DE34
	0x0364F904 STR W0, [X19 + 0x28]
	0x0364F908 LDP X20, X19, [X31 + 0x30]
	0x0364F90C LDP X22, X21, [X31 + 0x20]
	0x0364F910 LDP X24, X23, [X31 + 0x10]
	0x0364F914 LDP X30, X25, [X31], #0x40
	0x0364F918 RET
	0x0364F91C BL 0x1C16F20
	0x0364F920 STP X30, X25, [X31 - 0x40]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD92000
	008 Move X21, 0xAA5000
	009 Move W8, [X20+1545]
	010 Move X21, [X21+2288]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xAA5000
	017 Move X0, [X0+2288]
	018 Call 0x1C17CF4
	019 Move X0, 0xAA5000
	020 Move X0, [X0+3544]
	021 Call 0x1C17CF4
	022 Move X0, 0xAD8000
	023 Move X0, [X0+848]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+1545], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X20, X0
	031 Call StringBuilder..ctor, X0
	032 Move X8, [X19+24]
	033 Compare X8, 0
	034 JumpIfEqual {68}
	035 Move X22, 0xAD8000
	036 Move X23, 0xAA5000
	037 Move X22, [X22+848]
	038 Move X23, [X23+3544]
	039 Move X21, X31
	040 Move W9, [X8+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X1, [X22]
	044 Add X8, X8, X21
	045 Add X0, X8, 32
	046 Move X2, X31
	047 Call Byte.ToString, X0, X1
	048 Compare X20, 0
	049 JumpIfEqual {68}
	050 Move X1, X0
	051 Move X0, X20
	052 Move X2, X31
	053 Call StringBuilder.Append, X0, X1
	054 Move X8, [X19+24]
	055 Compare X8, 0
	056 JumpIfEqual {68}
	057 Move W9, [X8+24]
	058 Subtract W9, W9, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X1, [X23]
	061 Move X0, X20
	062 Move X2, X31
	063 Call StringBuilder.Append, X0, X1
	064 Move X8, [X19+24]
	065 Add X21, X21, 1
	066 Compare X8, 0
	067 JumpIfNotEqual {40}
	068 Call 0x1C17F20
	069 Compare X20, 0
	070 JumpIfEqual {68}
	071 Move X8, [X20]
	072 Move X0, X20
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X2, [X8+360]
	078 Move X1, [X8+368]
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 CallNoReturn X2
	082 Call 0x1C17F28

Method: System.String BasicConstraintsExtension(System.Boolean multiLine)

Disassembly:
	0x0364FAD4 ADRP X0, 0xAA9000
	0x0364FAD8 LDR X0, [X0 + 0x528]
	0x0364FADC BL 0x1C16D08
	0x0364FAE0 BL 0x1C16F10
	0x0364FAE4 MOV X19, X0
	0x0364FAE8 ADRP X0, 0xAD1000
	0x0364FAEC LDR X0, [X0 + 0xBE0]
	0x0364FAF0 B 0x364FB30
	0x0364FAF4 ADRP X0, 0xAA9000
	0x0364FAF8 LDR X0, [X0 + 0x528]
	0x0364FAFC BL 0x1C16D08
	0x0364FB00 BL 0x1C16F10
	0x0364FB04 MOV X19, X0
	0x0364FB08 ADRP X0, 0xAD2000
	0x0364FB0C LDR X0, [X0 + 0xC80]
	0x0364FB10 B 0x364FB30
	0x0364FB14 ADRP X0, 0xAA9000
	0x0364FB18 LDR X0, [X0 + 0x528]
	0x0364FB1C BL 0x1C16D08
	0x0364FB20 BL 0x1C16F10
	0x0364FB24 MOV X19, X0
	0x0364FB28 ADRP X0, 0xAED000
	0x0364FB2C LDR X0, [X0 + 0x8F0]
	0x0364FB30 BL 0x1C16D08
	0x0364FB34 MOV X1, X0
	0x0364FB38 MOV X0, X19
	0x0364FB3C MOV X2, X31
	0x0364FB40 BL 0x330E100
	0x0364FB44 ADRP X0, 0xAED000
	0x0364FB48 LDR X0, [X0 + 0x8F8]
	0x0364FB4C BL 0x1C16D08
	0x0364FB50 MOV X1, X0
	0x0364FB54 MOV X0, X19
	0x0364FB58 BL 0x1C16DEC
	0x0364FB5C LDR X0, [X0 + 0x10]
	0x0364FB60 RET
	0x0364FB64 LDR X0, [X0 + 0x18]
	0x0364FB68 RET
	0x0364FB6C STR X30, [X31 - 0x20]!
	0x0364FB70 STP X20, X19, [X31 + 0x10]
	0x0364FB74 ADRP X20, 0xD91000
	0x0364FB78 LDRB W8, [X20 + 0x611]
	0x0364FB7C MOV X19, X0
	0x0364FB80 TBNZ X8, 0x0, 0x364FBB0
	0x0364FB84 ADRP X0, 0xAED000
	0x0364FB88 LDR X0, [X0 + 0x900]
	0x0364FB8C BL 0x1C16CF4
	0x0364FB90 ADRP X0, 0xAD1000
	0x0364FB94 LDR X0, [X0 + 0xF60]
	0x0364FB98 BL 0x1C16CF4
	0x0364FB9C ADRP X0, 0xAD1000
	0x0364FBA0 LDR X0, [X0 + 0xF48]
	0x0364FBA4 BL 0x1C16CF4
	0x0364FBA8 MOVZ W8, 0x1
	0x0364FBAC STRB W8, [X20 + 0x611]
	0x0364FBB0 LDR X8, [X19 + 0x20]
	0x0364FBB4 CBZ X8, 0x364FC6C
	0x0364FBB8 ADRP X9, 0xAD1000
	0x0364FBBC LDR X9, [X9 + 0xF60]
	0x0364FBC0 LDR X20, [X8 + 0x10]
	0x0364FBC4 MOV X2, X31
	0x0364FBC8 LDR X1, [X9]
	0x0364FBCC MOV X0, X20
	0x0364FBD0 BL 0x321BA08
	0x0364FBD4 TBZ X0, 0x0, 0x364FC0C
	0x0364FBD8 LDR X8, [X19 + 0x10]
	0x0364FBDC CBZ X8, 0x364FC6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD92000
	007 Move X22, 0xAEE000
	008 Move W8, [X21+1546]
	009 Move X22, [X22+2144]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAEE000
	017 Move X0, [X0+2144]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1546], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X21, X0
	024 Move X1, X20
	025 Move W2, W31
	026 Call X509BasicConstraintsExtension..ctor, X0, X1, X2
	027 Compare X21, 0
	028 JumpIfEqual {41}
	029 Move X8, [X21]
	030 Move X9, [X8+408]
	031 Move X2, [X8+416]
	032 And W1, W19, 1
	033 Move X0, X21
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0
	041 Call 0x1C17F20
	042 Move X19, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Call 0x3EB2AD0
	046 Move X19, X0
	047 Move X0, 0xAAB000
	048 Move X0, [X0+3264]
	049 Call 0x1C17D08
	050 Move X8, [X19]
	051 Move X1, [X8]
	052 Call 0x1C18270
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {63}
	057 Call 0x3EB2AE0
	058 Move X0, 0xAA7000
	059 Move X0, [X0+632]
	060 Call 0x1C17D08
	061 Move X8, [X0+184]
	062 Move X0, [X8]
	063 Move W0, 8
	064 Call 0x3EB2AF0
	065 Move X8, [X19]
	066 Move [X0], X8
	067 Move X1, 0x866000
	068 Add X1, X1, 3672
	069 Move X2, X31
	070 Call 0x3EB2B00
	071 Move X19, X0
	072 Call 0x3EB2AE0
	073 Move X0, X19
	074 Call 0x1D2D690
	075 Call 0x1991590

Method: System.String EnhancedKeyUsageExtension(System.Boolean multiLine)

Disassembly:
	0x0364FBE0 ADRP X9, 0xAED000
	0x0364FBE4 LDR X9, [X9 + 0x900]
	0x0364FBE8 LDR X19, [X8 + 0x18]
	0x0364FBEC LDR X0, [X9]
	0x0364FBF0 LDR W9, [X0 + 0xE0]
	0x0364FBF4 CBNZ W9, 0x364FBFC
	0x0364FBF8 BL 0x1C16DFC
	0x0364FBFC MOV X0, X19
	0x0364FC00 LDP X20, X19, [X31 + 0x10]
	0x0364FC04 LDR X30, [X31], #0x20
	0x0364FC08 B 0x364FD10
	0x0364FC0C ADRP X8, 0xAD1000
	0x0364FC10 LDR X8, [X8 + 0xF48]
	0x0364FC14 MOV X0, X20
	0x0364FC18 MOV X2, X31
	0x0364FC1C LDR X1, [X8]
	0x0364FC20 BL 0x321BA08
	0x0364FC24 TBZ X0, 0x0, 0x364FC70
	0x0364FC28 LDR X8, [X19 + 0x10]
	0x0364FC2C CBZ X8, 0x364FC6C
	0x0364FC30 LDR X9, [X19 + 0x18]
	0x0364FC34 CBZ X9, 0x364FC6C
	0x0364FC38 ADRP X10, 0xAED000
	0x0364FC3C LDR X10, [X10 + 0x900]
	0x0364FC40 LDR X19, [X8 + 0x18]
	0x0364FC44 LDR X20, [X9 + 0x18]
	0x0364FC48 LDR X0, [X10]
	0x0364FC4C LDR W8, [X0 + 0xE0]
	0x0364FC50 CBNZ W8, 0x364FC58
	0x0364FC54 BL 0x1C16DFC
	0x0364FC58 MOV X0, X19
	0x0364FC5C MOV X1, X20
	0x0364FC60 LDP X20, X19, [X31 + 0x10]
	0x0364FC64 LDR X30, [X31], #0x20
	0x0364FC68 B 0x36500AC
	0x0364FC6C BL 0x1C16F20
	0x0364FC70 ADRP X0, 0xAA4000
	0x0364FC74 LDR X0, [X0 + 0x9D0]
	0x0364FC78 BL 0x1C16D08
	0x0364FC7C MOVZ W1, 0x1
	0x0364FC80 BL 0x1C16D6C
	0x0364FC84 LDR X19, [X19 + 0x20]
	0x0364FC88 MOV X20, X0
	0x0364FC8C MOV X0, X19
	0x0364FC90 BL 0x19903C0
	0x0364FC94 LDR X19, [X19 + 0x10]
	0x0364FC98 MOV X0, X20
	0x0364FC9C BL 0x19903C0
	0x0364FCA0 MOV X0, X20
	0x0364FCA4 MOV X1, X19
	0x0364FCA8 BL 0x19980B4
	0x0364FCAC MOV X0, X20
	0x0364FCB0 MOV X1, X31
	0x0364FCB4 MOV X2, X19
	0x0364FCB8 BL 0x1993444
	0x0364FCBC ADRP X0, 0xAED000
	0x0364FCC0 LDR X0, [X0 + 0x908]
	0x0364FCC4 BL 0x1C16D08
	0x0364FCC8 MOV X1, X20
	0x0364FCCC MOV X2, X31
	0x0364FCD0 BL 0x320A164
	0x0364FCD4 MOV X19, X0
	0x0364FCD8 ADRP X0, 0xAA4000
	0x0364FCDC LDR X0, [X0 + 0xB40]
	0x0364FCE0 BL 0x1C16D08
	0x0364FCE4 BL 0x1C16F10
	0x0364FCE8 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD92000
	007 Move X22, 0xAEE000
	008 Move W8, [X21+1547]
	009 Move X22, [X22+2152]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAEE000
	017 Move X0, [X0+2152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1547], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X21, X0
	024 Move X1, X20
	025 Move W2, W31
	026 Call X509EnhancedKeyUsageExtension..ctor, X0, X1, X2
	027 Compare X21, 0
	028 JumpIfEqual {41}
	029 Move X8, [X21]
	030 Move X9, [X8+408]
	031 Move X2, [X8+416]
	032 And W1, W19, 1
	033 Move X0, X21
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0
	041 Call 0x1C17F20
	042 Move X19, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Call 0x3EB2AD0
	046 Move X19, X0
	047 Move X0, 0xAAB000
	048 Move X0, [X0+3264]
	049 Call 0x1C17D08
	050 Move X8, [X19]
	051 Move X1, [X8]
	052 Call 0x1C18270
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {63}
	057 Call 0x3EB2AE0
	058 Move X0, 0xAA7000
	059 Move X0, [X0+632]
	060 Call 0x1C17D08
	061 Move X8, [X0+184]
	062 Move X0, [X8]
	063 Move W0, 8
	064 Call 0x3EB2AF0
	065 Move X8, [X19]
	066 Move [X0], X8
	067 Move X1, 0x866000
	068 Add X1, X1, 3672
	069 Move X2, X31
	070 Call 0x3EB2B00
	071 Move X19, X0
	072 Call 0x3EB2AE0
	073 Move X0, X19
	074 Call 0x1D2D690
	075 Call 0x1991590

Method: System.String KeyUsageExtension(System.Boolean multiLine)

Disassembly:
	0x0364FCEC MOV X2, X31
	0x0364FCF0 MOV X20, X0
	0x0364FCF4 BL 0x3379A44
	0x0364FCF8 ADRP X0, 0xAED000
	0x0364FCFC LDR X0, [X0 + 0x910]
	0x0364FD00 BL 0x1C16D08
	0x0364FD04 MOV X1, X0
	0x0364FD08 MOV X0, X20
	0x0364FD0C BL 0x1C16DEC
	0x0364FD10 SUB X31, X31, 0xC0
	0x0364FD14 STP X30, X21, [X31 + 0xA0]
	0x0364FD18 STP X20, X19, [X31 + 0xB0]
	0x0364FD1C ADRP X21, 0xD91000
	0x0364FD20 ADRP X20, 0xAD1000
	0x0364FD24 LDRB W8, [X21 + 0x614]
	0x0364FD28 LDR X20, [X20 + 0xB98]
	0x0364FD2C MOV X19, X0
	0x0364FD30 TBNZ X8, 0x0, 0x364FD60
	0x0364FD34 ADRP X0, 0xAD1000
	0x0364FD38 LDR X0, [X0 + 0xB98]
	0x0364FD3C BL 0x1C16CF4
	0x0364FD40 ADRP X0, 0xAED000
	0x0364FD44 LDR X0, [X0 + 0x900]
	0x0364FD48 BL 0x1C16CF4
	0x0364FD4C ADRP X0, 0xAD2000
	0x0364FD50 LDR X0, [X0 + 0x1A0]
	0x0364FD54 BL 0x1C16CF4
	0x0364FD58 MOVZ W8, 0x1
	0x0364FD5C STRB W8, [X21 + 0x614]
	0x0364FD60 LDR X0, [X20]
	0x0364FD64 MOVI V0.2D, 0x0
	0x0364FD68 STP V0, V0, [X31 + 0x40]
	0x0364FD6C STR V0, [X31 + 0x3]
	0x0364FD70 BL 0x1C16F10
	0x0364FD74 MOV X20, X0
	0x0364FD78 MOV X1, X19
	0x0364FD7C MOV X2, X31
	0x0364FD80 BL 0x31E7A44
	0x0364FD84 CBZ X20, 0x364FF00
	0x0364FD88 MOV X0, X20
	0x0364FD8C MOV X1, X31
	0x0364FD90 BL 0x31E7CC4
	0x0364FD94 CMP W0, 0x0
	0x0364FD98 CSEL X20, X31, X20, EQ
	0x0364FD9C CBZ W0, 0x364FF04
	0x0364FDA0 MOV X0, X20
	0x0364FDA4 MOV W1, W31
	0x0364FDA8 MOV X2, X31
	0x0364FDAC BL 0x31E8704
	0x0364FDB0 MOV X19, X0
	0x0364FDB4 CBZ X0, 0x364FEAC
	0x0364FDB8 LDRB W8, [X19 + 0x10]
	0x0364FDBC CMP W8, 0x2
	0x0364FDC0 CSEL X0, X20, X31, EQ
	0x0364FDC4 B.NE 0x364FEAC
	0x0364FDC8 CBZ X0, 0x364FF54
	0x0364FDCC MOVZ W1, 0x1
	0x0364FDD0 MOV X2, X31
	0x0364FDD4 BL 0x31E8704
	0x0364FDD8 MOV X20, X0
	0x0364FDDC CBZ X0, 0x364FF58
	0x0364FDE0 LDRB W8, [X20 + 0x10]
	0x0364FDE4 CMP W8, 0x2
	0x0364FDE8 B.NE 0x364FF5C
	0x0364FDEC MOV X0, X19
	0x0364FDF0 MOV X1, X31
	0x0364FDF4 BL 0x31E7D00

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD92000
	007 Move X22, 0xAEE000
	008 Move W8, [X21+1548]
	009 Move X22, [X22+2160]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAEE000
	017 Move X0, [X0+2160]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1548], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X21, X0
	024 Move X1, X20
	025 Move W2, W31
	026 Call X509KeyUsageExtension..ctor, X0, X1, X2
	027 Compare X21, 0
	028 JumpIfEqual {41}
	029 Move X8, [X21]
	030 Move X9, [X8+408]
	031 Move X2, [X8+416]
	032 And W1, W19, 1
	033 Move X0, X21
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0
	041 Call 0x1C17F20
	042 Move X19, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Call 0x3EB2AD0
	046 Move X19, X0
	047 Move X0, 0xAAB000
	048 Move X0, [X0+3264]
	049 Call 0x1C17D08
	050 Move X8, [X19]
	051 Move X1, [X8]
	052 Call 0x1C18270
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {63}
	057 Call 0x3EB2AE0
	058 Move X0, 0xAA7000
	059 Move X0, [X0+632]
	060 Call 0x1C17D08
	061 Move X8, [X0+184]
	062 Move X0, [X8]
	063 Move W0, 8
	064 Call 0x3EB2AF0
	065 Move X8, [X19]
	066 Move [X0], X8
	067 Move X1, 0x866000
	068 Add X1, X1, 3672
	069 Move X2, X31
	070 Call 0x3EB2B00
	071 Move X19, X0
	072 Call 0x3EB2AE0
	073 Move X0, X19
	074 Call 0x1D2D690
	075 Call 0x1991590

Method: System.String SubjectKeyIdentifierExtension(System.Boolean multiLine)

Disassembly:
	0x0364FDF8 ADRP X8, 0xAED000
	0x0364FDFC LDR X8, [X8 + 0x900]
	0x0364FE00 MOV X19, X0
	0x0364FE04 LDR X0, [X8]
	0x0364FE08 LDR W8, [X0 + 0xE0]
	0x0364FE0C CBNZ W8, 0x364FE14
	0x0364FE10 BL 0x1C16DFC
	0x0364FE14 MOV X0, X19
	0x0364FE18 BL 0x3650534
	0x0364FE1C MOV X19, X0
	0x0364FE20 MOV X0, X20
	0x0364FE24 MOV X1, X31
	0x0364FE28 BL 0x31E7D00
	0x0364FE2C CBZ X19, 0x364FEFC
	0x0364FE30 ADRP X8, 0xAD2000
	0x0364FE34 LDR X8, [X8 + 0x1A0]
	0x0364FE38 MOV X20, X0
	0x0364FE3C LDR X0, [X8]
	0x0364FE40 BL 0x1C16F10
	0x0364FE44 LDR W8, [X19 + 0x18]
	0x0364FE48 MOV X2, X31
	0x0364FE4C MOV X21, X0
	0x0364FE50 UBFM W1, W8, 0x1D, 0x1C
	0x0364FE54 BL 0x325C420
	0x0364FE58 LDP V0, V1, [X31 + 0x30]
	0x0364FE5C LDR V2, [X31 + 0x5]
	0x0364FE60 STP V0, V1, [X31]
	0x0364FE64 STR V2, [X31 + 0x2]
	0x0364FE68 CBZ X21, 0x364FEFC
	0x0364FE6C LDR X8, [X21]
	0x0364FE70 LDP V0, V1, [X31]
	0x0364FE74 LDR V2, [X31 + 0x2]
	0x0364FE78 ADD X1, X31, 0x60
	0x0364FE7C LDR X9, [X8 + 0x1F8]
	0x0364FE80 STP X20, X19, [X31 + 0x60]
	0x0364FE84 STP V0, V1, [X31 + 0x70]
	0x0364FE88 STR V2, [X31 + 0x9]
	0x0364FE8C LDR X2, [X8 + 0x200]
	0x0364FE90 MOV X0, X21
	0x0364FE94 BLR X9
	0x0364FE98 MOV X0, X21
	0x0364FE9C LDP X20, X19, [X31 + 0xB0]
	0x0364FEA0 LDP X30, X21, [X31 + 0xA0]
	0x0364FEA4 ADD X31, X31, 0xC0
	0x0364FEA8 RET
	0x0364FEAC ADRP X0, 0xAED000
	0x0364FEB0 LDR X0, [X0 + 0x918]
	0x0364FEB4 BL 0x1C16D08
	0x0364FEB8 MOV X1, X31
	0x0364FEBC BL 0x320A160
	0x0364FEC0 MOV X19, X0
	0x0364FEC4 ADRP X0, 0xAD1000
	0x0364FEC8 LDR X0, [X0 + 0xCE0]
	0x0364FECC BL 0x1C16D08
	0x0364FED0 BL 0x1C16F10
	0x0364FED4 MOV X20, X0
	0x0364FED8 MOV X1, X19
	0x0364FEDC MOV X2, X31
	0x0364FEE0 BL 0x3252170
	0x0364FEE4 ADRP X0, 0xAED000
	0x0364FEE8 LDR X0, [X0 + 0x920]
	0x0364FEEC BL 0x1C16D08
	0x0364FEF0 MOV X1, X0
	0x0364FEF4 MOV X0, X20
	0x0364FEF8 BL 0x1C16DEC
	0x0364FEFC BL 0x1C16F20
	0x0364FF00 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD92000
	007 Move X22, 0xAEE000
	008 Move W8, [X21+1549]
	009 Move X22, [X22+2168]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAEE000
	017 Move X0, [X0+2168]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1549], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X21, X0
	024 Move X1, X20
	025 Move W2, W31
	026 Call X509SubjectKeyIdentifierExtension..ctor, X0, X1, X2
	027 Compare X21, 0
	028 JumpIfEqual {41}
	029 Move X8, [X21]
	030 Move X9, [X8+408]
	031 Move X2, [X8+416]
	032 And W1, W19, 1
	033 Move X0, X21
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0
	041 Call 0x1C17F20
	042 Move X19, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Call 0x3EB2AD0
	046 Move X19, X0
	047 Move X0, 0xAAB000
	048 Move X0, [X0+3264]
	049 Call 0x1C17D08
	050 Move X8, [X19]
	051 Move X1, [X8]
	052 Call 0x1C18270
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {63}
	057 Call 0x3EB2AE0
	058 Move X0, 0xAA7000
	059 Move X0, [X0+632]
	060 Call 0x1C17D08
	061 Move X8, [X0+184]
	062 Move X0, [X8]
	063 Move W0, 8
	064 Call 0x3EB2AF0
	065 Move X8, [X19]
	066 Move [X0], X8
	067 Move X1, 0x866000
	068 Add X1, X1, 3672
	069 Move X2, X31
	070 Call 0x3EB2B00
	071 Move X19, X0
	072 Call 0x3EB2AE0
	073 Move X0, X19
	074 Call 0x1D2D690
	075 Call 0x1991590

Method: System.String SubjectAltName(System.Boolean multiLine)

Disassembly:
	0x0364FF04 ADRP X0, 0xAED000
	0x0364FF08 LDR X0, [X0 + 0x928]
	0x0364FF0C BL 0x1C16D08
	0x0364FF10 MOV X1, X31
	0x0364FF14 BL 0x320A160
	0x0364FF18 MOV X19, X0
	0x0364FF1C ADRP X0, 0xAD1000
	0x0364FF20 LDR X0, [X0 + 0xCE0]
	0x0364FF24 BL 0x1C16D08
	0x0364FF28 BL 0x1C16F10
	0x0364FF2C MOV X20, X0
	0x0364FF30 MOV X1, X19
	0x0364FF34 MOV X2, X31
	0x0364FF38 BL 0x3252170
	0x0364FF3C ADRP X0, 0xAED000
	0x0364FF40 LDR X0, [X0 + 0x920]
	0x0364FF44 BL 0x1C16D08
	0x0364FF48 MOV X1, X0
	0x0364FF4C MOV X0, X20
	0x0364FF50 BL 0x1C16DEC
	0x0364FF54 BL 0x1C16F20
	0x0364FF58 BL 0x1C16F20
	0x0364FF5C ADRP X0, 0xAED000
	0x0364FF60 LDR X0, [X0 + 0x930]
	0x0364FF64 BL 0x1C16D08
	0x0364FF68 MOV X1, X31
	0x0364FF6C BL 0x320A160
	0x0364FF70 MOV X19, X0
	0x0364FF74 ADRP X0, 0xAD1000
	0x0364FF78 LDR X0, [X0 + 0xCE0]
	0x0364FF7C BL 0x1C16D08
	0x0364FF80 BL 0x1C16F10
	0x0364FF84 MOV X20, X0
	0x0364FF88 MOV X1, X19
	0x0364FF8C MOV X2, X31
	0x0364FF90 BL 0x3252170
	0x0364FF94 ADRP X0, 0xAED000
	0x0364FF98 LDR X0, [X0 + 0x920]
	0x0364FF9C BL 0x1C16D08
	0x0364FFA0 MOV X1, X0
	0x0364FFA4 MOV X0, X20
	0x0364FFA8 BL 0x1C16DEC
	0x0364FFAC B 0x364FFE8
	0x0364FFB0 B 0x364FFE8
	0x0364FFB4 B 0x364FFE8
	0x0364FFB8 B 0x364FFE8
	0x0364FFBC B 0x364FFE8
	0x0364FFC0 B 0x364FFE8
	0x0364FFC4 B 0x364FFE8
	0x0364FFC8 B 0x364FFE8
	0x0364FFCC B 0x364FFE8
	0x0364FFD0 B 0x364FFE8
	0x0364FFD4 B 0x364FFE8
	0x0364FFD8 B 0x364FFE8
	0x0364FFDC B 0x364FFE8
	0x0364FFE0 B 0x364FFE8
	0x0364FFE4 B 0x364FFE8
	0x0364FFE8 MOV X19, X0
	0x0364FFEC CMP W1, 0x1
	0x0364FFF0 B.NE 0x36500A0
	0x0364FFF4 MOV X0, X19
	0x0364FFF8 BL 0x3EB1AD0
	0x0364FFFC MOV X19, X0
	0x03650000 ADRP X0, 0xAA3000
	0x03650004 LDR X0, [X0 + 0x7D0]
	0x03650008 BL 0x1C16D08
	0x0365000C LDR X8, [X19]
	0x03650010 LDR X1, [X8]
	0x03650014 BL 0x1C17270
	0x03650018 TBZ X0, 0x0, 0x3650078
	0x0365001C LDR X19, [X19]
	0x03650020 BL 0x3EB1AE0
	0x03650024 ADRP X0, 0xAEC000
	0x03650028 LDR X0, [X0 + 0x938]
	0x0365002C BL 0x1C16D08
	0x03650030 MOV X1, X31
	0x03650034 BL 0x320A160
	0x03650038 MOV X20, X0
	0x0365003C ADRP X0, 0xAD0000
	0x03650040 LDR X0, [X0 + 0xCE0]
	0x03650044 BL 0x1C16D08
	0x03650048 BL 0x1C16F10
	0x0365004C MOV X1, X20
	0x03650050 MOV X2, X19
	0x03650054 MOV X3, X31
	0x03650058 MOV X21, X0
	0x0365005C BL 0x325240C
	0x03650060 ADRP X0, 0xAEC000
	0x03650064 LDR X0, [X0 + 0x920]
	0x03650068 BL 0x1C16D08
	0x0365006C MOV X1, X0
	0x03650070 MOV X0, X21
	0x03650074 BL 0x1C16DEC
	0x03650078 MOVZ W0, 0x8
	0x0365007C BL 0x3EB1AF0
	0x03650080 LDR X8, [X19]
	0x03650084 STR X8, [X0]
	0x03650088 ADRP X1, 0x864000
	0x0365008C ADD X1, X1, 0xE58
	0x03650090 MOV X2, X31
	0x03650094 BL 0x3EB1B00
	0x03650098 MOV X19, X0
	0x0365009C BL 0x3EB1AE0
	0x036500A0 MOV X0, X19
	0x036500A4 BL 0x1D2C690
	0x036500A8 BL 0x1990590
	0x036500AC SUB X31, X31, 0xB0
	0x036500B0 STP X30, X23, [X31 + 0x80]
	0x036500B4 STP X22, X21, [X31 + 0x90]
	0x036500B8 STP X20, X19, [X31 + 0xA0]
	0x036500BC ADRP X20, 0xD90000
	0x036500C0 ADRP X23, 0xAD0000
	0x036500C4 LDRB W8, [X20 + 0x613]
	0x036500C8 LDR X23, [X23 + 0xB98]
	0x036500CC MOV X21, X1
	0x036500D0 MOV X19, X0
	0x036500D4 TBNZ X8, 0x0, 0x3650104
	0x036500D8 ADRP X0, 0xAD0000
	0x036500DC LDR X0, [X0 + 0xB98]
	0x036500E0 BL 0x1C16CF4
	0x036500E4 ADRP X0, 0xAD0000
	0x036500E8 LDR X0, [X0 + 0xF40]
	0x036500EC BL 0x1C16CF4
	0x036500F0 ADRP X0, 0xAEC000
	0x036500F4 LDR X0, [X0 + 0x900]
	0x036500F8 BL 0x1C16CF4
	0x036500FC MOVZ W8, 0x1
	0x03650100 STRB W8, [X20 + 0x613]
	0x03650104 LDR X0, [X23]
	0x03650108 MOVI V0.2D, 0x0
	0x0365010C STP V0, V0, [X31 + 0x20]
	0x03650110 BL 0x1C16F10
	0x03650114 MOV X20, X0
	0x03650118 MOV X1, X19
	0x0365011C MOV X2, X31
	0x03650120 BL 0x31E7A44
	0x03650124 CBZ X20, 0x36503A0
	0x03650128 LDRB W8, [X20 + 0x10]
	0x0365012C CMP W8, 0x2
	0x03650130 B.NE 0x36503A4
	0x03650134 MOV X0, X20
	0x03650138 MOV X1, X31
	0x0365013C BL 0x31E7D00
	0x03650140 ADRP X22, 0xAEC000
	0x03650144 LDR X22, [X22 + 0x900]
	0x03650148 MOV X19, X0
	0x0365014C LDR X0, [X22]
	0x03650150 LDR W8, [X0 + 0xE0]
	0x03650154 CBNZ W8, 0x365015C
	0x03650158 BL 0x1C16DFC
	0x0365015C MOV X0, X19
	0x03650160 BL 0x3650534
	0x03650164 MOV X19, X0
	0x03650168 LDR X0, [X23]
	0x0365016C BL 0x1C16F10
	0x03650170 MOV X20, X0
	0x03650174 MOV X1, X21
	0x03650178 MOV X2, X31
	0x0365017C BL 0x31E7A44
	0x03650180 CBZ X20, 0x36502FC
	0x03650184 LDRB W8, [X20 + 0x10]
	0x03650188 CMP W8, 0x30
	0x0365018C B.NE 0x36502FC
	0x03650190 MOV X0, X20
	0x03650194 MOV X1, X31
	0x03650198 BL 0x31E7CC4
	0x0365019C CMP W0, 0x2
	0x036501A0 B.LE 0x36502FC
	0x036501A4 MOV X0, X20
	0x036501A8 MOV W1, W31
	0x036501AC MOV X2, X31
	0x036501B0 BL 0x31E8704
	0x036501B4 CBZ X0, 0x36503F4
	0x036501B8 LDRB W8, [X0 + 0x10]
	0x036501BC CMP W8, 0x2
	0x036501C0 B.NE 0x365034C
	0x036501C4 MOVZ W1, 0x1
	0x036501C8 MOV X0, X20
	0x036501CC MOV X2, X31
	0x036501D0 BL 0x31E8704
	0x036501D4 CBZ X0, 0x36503F8
	0x036501D8 LDRB W8, [X0 + 0x10]
	0x036501DC CMP W8, 0x2
	0x036501E0 B.NE 0x365034C
	0x036501E4 MOVZ W1, 0x2
	0x036501E8 MOV X0, X20
	0x036501EC MOV X2, X31
	0x036501F0 BL 0x31E8704
	0x036501F4 CBZ X0, 0x36503FC
	0x036501F8 LDRB W8, [X0 + 0x10]
	0x036501FC CMP W8, 0x2
	0x03650200 B.NE 0x365034C
	0x03650204 MOV X0, X20
	0x03650208 MOV W1, W31
	0x0365020C MOV X2, X31
	0x03650210 BL 0x31E8704
	0x03650214 CBZ X0, 0x3650400
	0x03650218 MOV X1, X31
	0x0365021C BL 0x31E7D00
	0x03650220 MOV X21, X0
	0x03650224 LDR X0, [X22]
	0x03650228 LDR W8, [X0 + 0xE0]
	0x0365022C CBNZ W8, 0x3650234
	0x03650230 BL 0x1C16DFC
	0x03650234 MOV X0, X21
	0x03650238 BL 0x3650534
	0x0365023C MOV X21, X0
	0x03650240 MOVZ W1, 0x1
	0x03650244 MOV X0, X20
	0x03650248 MOV X2, X31
	0x0365024C BL 0x31E8704
	0x03650250 CBZ X0, 0x3650404
	0x03650254 MOV X1, X31
	0x03650258 BL 0x31E7D00
	0x0365025C BL 0x3650534
	0x03650260 MOV X22, X0
	0x03650264 MOVZ W1, 0x2
	0x03650268 MOV X0, X20
	0x0365026C MOV X2, X31
	0x03650270 BL 0x31E8704
	0x03650274 CBZ X0, 0x3650408
	0x03650278 MOV X1, X31
	0x0365027C BL 0x31E7D00
	0x03650280 BL 0x3650534
	0x03650284 CBZ X19, 0x365039C
	0x03650288 ADRP X8, 0xAD0000
	0x0365028C LDR X8, [X8 + 0xF40]
	0x03650290 MOV X20, X0
	0x03650294 LDR X0, [X8]
	0x03650298 BL 0x1C16F10
	0x0365029C LDR W8, [X19 + 0x18]
	0x036502A0 MOV X2, X31
	0x036502A4 MOV X23, X0
	0x036502A8 UBFM W1, W8, 0x1D, 0x1C
	0x036502AC BL 0x32667F0
	0x036502B0 LDP V0, V1, [X31 + 0x20]
	0x036502B4 STP V0, V1, [X31]
	0x036502B8 CBZ X23, 0x365039C
	0x036502BC LDR X8, [X23]
	0x036502C0 LDP V0, V1, [X31]
	0x036502C4 ADD X1, X31, 0x40
	0x036502C8 MOV X0, X23

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xD92000
	015 Move W8, [X21+1550]
	016 Move W19, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {48}
	022 Move X0, 0xAD2000
	023 Move X0, [X0+2968]
	024 Call 0x1C17CF4
	025 Move X0, 0xAA6000
	026 Move X0, [X0+2520]
	027 Call 0x1C17CF4
	028 Move X0, 0xAA5000
	029 Move X0, [X0+2288]
	030 Call 0x1C17CF4
	031 Move X0, 0xAEE000
	032 Move X0, [X0+2176]
	033 Call 0x1C17CF4
	034 Move X0, 0xAEE000
	035 Move X0, [X0+2184]
	036 Call 0x1C17CF4
	037 Move X0, 0xAA5000
	038 Move X0, [X0+2104]
	039 Call 0x1C17CF4
	040 Move X0, 0xAEE000
	041 Move X0, [X0+2192]
	042 Call 0x1C17CF4
	043 Move X0, 0xAEE000
	044 Move X0, [X0+2200]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1550], W8
	048 Move X21, [X20+24]
	049 Compare X21, 0
	050 JumpIfEqual {198}
	051 Move W8, [X21+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, 0xAD2000
	054 Move X8, [X8+2968]
	055 Move X0, [X8]
	056 Call 0x1C17F10
	057 Move X20, X0
	058 Move X1, X21
	059 Move X2, X31
	060 Call ASN1..ctor, X0, X1
	061 Move X8, 0xAA5000
	062 Move X8, [X8+2288]
	063 Move X0, [X8]
	064 Call 0x1C17F10
	065 Move X21, X0
	066 Move X1, X31
	067 Call StringBuilder..ctor, X0
	068 Compare X20, 0
	069 JumpIfEqual {199}
	070 Move X26, 0xAEE000
	071 Move X28, 0xAEE000
	072 Move X29, 0xAA6000
	073 Move X27, 0xAEE000
	074 Move X26, [X26+2200]
	075 Move X28, [X28+2184]
	076 Move X29, [X29+2520]
	077 Move X27, [X27+2176]
	078 Move W22, W31
	079 Move X0, X20
	080 Move X1, X31
	081 Call ASN1.get_Count, X0
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X0, X20
	084 Move W1, W22
	085 Move X2, X31
	086 Call ASN1.get_Item, X0, X1
	087 Move X24, X0
	088 Compare X0, 0
	089 JumpIfEqual {195}
	090 Move W8, [X24+16]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X23, [X28]
	094 Move X0, X31
	095 Call Encoding.get_ASCII
	096 Move X25, X0
	097 Move X0, X24
	098 Move X1, X31
	099 Call ASN1.get_Value, X0
	100 Move X1, X0
	101 Compare X25, 0
	102 JumpIfEqual {196}
	103 Move X8, [X25]
	104 Move X9, [X8+888]
	105 Move X2, [X8+896]
	106 Move X0, X25
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X23, [X26]
	109 Move X0, X31
	110 Call Encoding.get_ASCII
	111 Move X25, X0
	112 Move X0, X24
	113 Move X1, X31
	114 Call ASN1.get_Value, X0
	115 Move X1, X0
	116 Compare X25, 0
	117 JumpIfEqual {197}
	118 Move X8, [X25]
	119 Move X9, [X8+888]
	120 Move X2, [X8+896]
	121 Move X0, X25
	122 NotImplemented "Instruction BLR not yet implemented."
	123 Move X0, [X29]
	124 Move [X31+12], W8
	125 Add X1, X31, 12
	126 Call 0x1C17E04
	127 Move X1, X0
	128 Move X0, [X27]
	129 Move X2, X31
	130 Call String.Format, X0, X1
	131 Move X23, X0
	132 Move X0, X24
	133 Move X1, X31
	134 Call ASN1.get_Value, X0
	135 Move X1, X31
	136 Call CryptoConvert.ToHex, X0
	137 Move X24, X0
	138 Compare X21, 0
	139 JumpIfEqual {194}
	140 Move X0, X21
	141 Move X1, X23
	142 Move X2, X31
	143 Call StringBuilder.Append, X0, X1
	144 Move X0, X21
	145 Move X1, X24
	146 Move X2, X31
	147 Call StringBuilder.Append, X0, X1
	148 Move TEMP, X19
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {158}
	152 Move X0, X31
	153 Call Environment.get_NewLine
	154 Move X1, X0
	155 Move X0, X21
	156 Move X2, X31
	157 Call StringBuilder.Append, X0, X1
	158 Move X0, X20
	159 Move X1, X31
	160 Call ASN1.get_Count, X0
	161 Subtract W8, W0, 1
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X8, 0xAA4000
	164 Move X8, [X8+2104]
	165 Move X1, [X8]
	166 Move X0, X21
	167 Move X2, X31
	168 Call StringBuilder.Append, X0, X1
	169 Add W22, W22, 1
	170 Move X8, 0xAED000
	171 Move X8, [X8+2192]
	172 Move X0, [X8]
	173 Compare X21, 0
	174 JumpIfEqual {200}
	175 Move X8, [X21]
	176 Move X9, [X8+360]
	177 Move X1, [X8+368]
	178 Move X0, X21
	179 NotImplemented "Instruction BLR not yet implemented."
	180 Move X20, [X31+96]
	181 Move X19, [X31+104]
	182 Move X22, [X31+80]
	183 Move X21, [X31+88]
	184 Move X24, [X31+64]
	185 Move X23, [X31+72]
	186 Move X26, [X31+48]
	187 Move X25, [X31+56]
	188 Move X28, [X31+32]
	189 Move X27, [X31+40]
	190 Move X29, [X31+16]
	191 Move X30, [X31+24]
	192 Add X31, X31, 112
	193 Return X0
	194 Call 0x1C17F20
	195 Call 0x1C17F20
	196 Call 0x1C17F20
	197 Call 0x1C17F20
	198 Call 0x1C17F20
	199 Call 0x1C17F20
	200 Call 0x1C17F20
	201 Move X19, X0
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move X0, X19
	204 Call 0x3EB2AD0
	205 Move X19, X0
	206 Move X0, 0xAAA000
	207 Move X0, [X0+3264]
	208 Call 0x1C17D08
	209 Move X8, [X19]
	210 Move X1, [X8]
	211 Call 0x1C18270
	212 Move TEMP, X0
	213 And TEMP, TEMP, 1
	214 Compare TEMP, 1
	215 JumpIfNotEqual {221}
	216 Call 0x3EB2AE0
	217 Move X0, 0xAA6000
	218 Move X0, [X0+632]
	219 Call 0x1C17D08
	220 Move X8, [X0+184]
	221 Move W0, 8
	222 Call 0x3EB2AF0
	223 Move X8, [X19]
	224 Move [X0], X8
	225 Move X1, 0x865000
	226 Add X1, X1, 3672
	227 Move X2, X31
	228 Call 0x3EB2B00
	229 Move X19, X0
	230 Call 0x3EB2AE0
	231 Move X0, X19
	232 Call 0x1D2D690
	233 Call 0x1991590

Method: System.String NetscapeCertType(System.Boolean multiLine)

Disassembly:
	0x036502CC LDR X9, [X8 + 0x1F8]
	0x036502D0 STP X21, X22, [X31 + 0x40]
	0x036502D4 STP X20, X19, [X31 + 0x50]
	0x036502D8 STP V0, V1, [X31 + 0x60]
	0x036502DC LDR X2, [X8 + 0x200]
	0x036502E0 BLR X9
	0x036502E4 MOV X0, X23
	0x036502E8 LDP X20, X19, [X31 + 0xA0]
	0x036502EC LDP X22, X21, [X31 + 0x90]
	0x036502F0 LDP X30, X23, [X31 + 0x80]
	0x036502F4 ADD X31, X31, 0xB0
	0x036502F8 RET
	0x036502FC ADRP X0, 0xAEC000
	0x03650300 LDR X0, [X0 + 0x940]
	0x03650304 BL 0x1C16D08
	0x03650308 MOV X1, X31
	0x0365030C BL 0x320A160
	0x03650310 MOV X19, X0
	0x03650314 ADRP X0, 0xAD0000
	0x03650318 LDR X0, [X0 + 0xCE0]
	0x0365031C BL 0x1C16D08
	0x03650320 BL 0x1C16F10
	0x03650324 MOV X20, X0
	0x03650328 MOV X1, X19
	0x0365032C MOV X2, X31
	0x03650330 BL 0x3252170
	0x03650334 ADRP X0, 0xAEC000
	0x03650338 LDR X0, [X0 + 0x948]
	0x0365033C BL 0x1C16D08
	0x03650340 MOV X1, X0
	0x03650344 MOV X0, X20
	0x03650348 BL 0x1C16DEC
	0x0365034C ADRP X0, 0xAEC000
	0x03650350 LDR X0, [X0 + 0x950]
	0x03650354 BL 0x1C16D08
	0x03650358 MOV X1, X31
	0x0365035C BL 0x320A160
	0x03650360 MOV X19, X0
	0x03650364 ADRP X0, 0xAD0000
	0x03650368 LDR X0, [X0 + 0xCE0]
	0x0365036C BL 0x1C16D08
	0x03650370 BL 0x1C16F10
	0x03650374 MOV X20, X0
	0x03650378 MOV X1, X19
	0x0365037C MOV X2, X31
	0x03650380 BL 0x3252170
	0x03650384 ADRP X0, 0xAEC000
	0x03650388 LDR X0, [X0 + 0x948]
	0x0365038C BL 0x1C16D08
	0x03650390 MOV X1, X0
	0x03650394 MOV X0, X20
	0x03650398 BL 0x1C16DEC
	0x0365039C BL 0x1C16F20
	0x036503A0 BL 0x1C16F20
	0x036503A4 ADRP X0, 0xAEC000
	0x036503A8 LDR X0, [X0 + 0x958]
	0x036503AC BL 0x1C16D08
	0x036503B0 MOV X1, X31
	0x036503B4 BL 0x320A160
	0x036503B8 MOV X19, X0
	0x036503BC ADRP X0, 0xAD0000
	0x036503C0 LDR X0, [X0 + 0xCE0]
	0x036503C4 BL 0x1C16D08
	0x036503C8 BL 0x1C16F10
	0x036503CC MOV X20, X0
	0x036503D0 MOV X1, X19
	0x036503D4 MOV X2, X31
	0x036503D8 BL 0x3252170
	0x036503DC ADRP X0, 0xAEC000
	0x036503E0 LDR X0, [X0 + 0x948]
	0x036503E4 BL 0x1C16D08
	0x036503E8 MOV X1, X0
	0x036503EC MOV X0, X20
	0x036503F0 BL 0x1C16DEC
	0x036503F4 BL 0x1C16F20
	0x036503F8 BL 0x1C16F20
	0x036503FC BL 0x1C16F20
	0x03650400 BL 0x1C16F20
	0x03650404 BL 0x1C16F20
	0x03650408 BL 0x1C16F20
	0x0365040C B 0x3650468
	0x03650410 B 0x3650468
	0x03650414 B 0x3650468
	0x03650418 B 0x3650468
	0x0365041C B 0x3650468
	0x03650420 B 0x3650468
	0x03650424 B 0x3650468
	0x03650428 B 0x3650468
	0x0365042C B 0x3650468
	0x03650430 B 0x3650468
	0x03650434 B 0x3650468
	0x03650438 B 0x3650468
	0x0365043C B 0x3650468
	0x03650440 B 0x3650468
	0x03650444 B 0x3650468
	0x03650448 B 0x3650468
	0x0365044C B 0x3650468
	0x03650450 B 0x3650468
	0x03650454 B 0x3650468
	0x03650458 B 0x3650468
	0x0365045C B 0x3650468
	0x03650460 B 0x3650468
	0x03650464 B 0x3650468
	0x03650468 MOV X19, X0
	0x0365046C CMP W1, 0x1
	0x03650470 B.NE 0x3650520
	0x03650474 MOV X0, X19
	0x03650478 BL 0x3EB1AD0
	0x0365047C MOV X19, X0
	0x03650480 ADRP X0, 0xAA3000
	0x03650484 LDR X0, [X0 + 0x7D0]
	0x03650488 BL 0x1C16D08
	0x0365048C LDR X8, [X19]
	0x03650490 LDR X1, [X8]
	0x03650494 BL 0x1C17270
	0x03650498 TBZ X0, 0x0, 0x36504F8
	0x0365049C LDR X19, [X19]
	0x036504A0 BL 0x3EB1AE0
	0x036504A4 ADRP X0, 0xAEC000
	0x036504A8 LDR X0, [X0 + 0x938]
	0x036504AC BL 0x1C16D08
	0x036504B0 MOV X1, X31
	0x036504B4 BL 0x320A160
	0x036504B8 MOV X20, X0
	0x036504BC ADRP X0, 0xAD0000
	0x036504C0 LDR X0, [X0 + 0xCE0]
	0x036504C4 BL 0x1C16D08
	0x036504C8 BL 0x1C16F10
	0x036504CC MOV X1, X20
	0x036504D0 MOV X2, X19
	0x036504D4 MOV X3, X31
	0x036504D8 MOV X21, X0
	0x036504DC BL 0x325240C
	0x036504E0 ADRP X0, 0xAEC000
	0x036504E4 LDR X0, [X0 + 0x948]
	0x036504E8 BL 0x1C16D08
	0x036504EC MOV X1, X0
	0x036504F0 MOV X0, X21
	0x036504F4 BL 0x1C16DEC
	0x036504F8 MOVZ W0, 0x8
	0x036504FC BL 0x3EB1AF0
	0x03650500 LDR X8, [X19]
	0x03650504 STR X8, [X0]
	0x03650508 ADRP X1, 0x864000
	0x0365050C ADD X1, X1, 0xE58
	0x03650510 MOV X2, X31
	0x03650514 BL 0x3EB1B00
	0x03650518 MOV X19, X0
	0x0365051C BL 0x3EB1AE0
	0x03650520 MOV X0, X19
	0x03650524 BL 0x1D2C690
	0x03650528 BL 0x1990590
	0x0365052C LDR X0, [X0 + 0x20]
	0x03650530 RET
	0x03650534 STP X30, X21, [X31 - 0x20]!
	0x03650538 STP X20, X19, [X31 + 0x10]
	0x0365053C ADRP X20, 0xD90000
	0x03650540 LDRB W8, [X20 + 0x612]
	0x03650544 MOV X19, X0
	0x03650548 TBNZ X8, 0x0, 0x3650560
	0x0365054C ADRP X0, 0xAA3000
	0x03650550 LDR X0, [X0 + 0x618]
	0x03650554 BL 0x1C16CF4
	0x03650558 MOVZ W8, 0x1
	0x0365055C STRB W8, [X20 + 0x612]
	0x03650560 CBZ X19, 0x36505C0
	0x03650564 LDR W8, [X19 + 0x18]
	0x03650568 CBZ W8, 0x36505C4
	0x0365056C LDRB W9, [X19 + 0x20]
	0x03650570 CBNZ W9, 0x36505B0
	0x03650574 ADRP X9, 0xAA3000
	0x03650578 LDR X9, [X9 + 0x618]
	0x0365057C SUB W20, W8, 0x1
	0x03650580 MOV W1, W20
	0x03650584 LDR X0, [X9]
	0x03650588 BL 0x1C16D6C
	0x0365058C MOV X21, X0
	0x03650590 MOVZ W1, 0x1
	0x03650594 MOV X0, X19
	0x03650598 MOV X2, X21
	0x0365059C MOV W3, W31
	0x036505A0 MOV W4, W20
	0x036505A4 MOV X5, X31
	0x036505A8 BL 0x33A8A9C
	0x036505AC MOV X19, X21
	0x036505B0 MOV X0, X19
	0x036505B4 LDP X20, X19, [X31 + 0x10]
	0x036505B8 LDP X30, X21, [X31], #0x20
	0x036505BC RET
	0x036505C0 BL 0x1C16F20
	0x036505C4 BL 0x1C16F28
	0x036505C8 STP X30, X21, [X31 - 0x20]!
	0x036505CC STP X20, X19, [X31 + 0x10]
	0x036505D0 ADRP X20, 0xD90000
	0x036505D4 ADRP X21, 0xAA3000
	0x036505D8 ADRP X19, 0xAEC000
	0x036505DC LDRB W8, [X20 + 0x615]
	0x036505E0 LDR X21, [X21 + 0x618]
	0x036505E4 LDR X19, [X19 + 0x900]
	0x036505E8 TBNZ X8, 0x0, 0x365060C
	0x036505EC ADRP X0, 0xAA3000
	0x036505F0 LDR X0, [X0 + 0x618]
	0x036505F4 BL 0x1C16CF4
	0x036505F8 ADRP X0, 0xAEC000
	0x036505FC LDR X0, [X0 + 0x900]
	0x03650600 BL 0x1C16CF4
	0x03650604 MOVZ W8, 0x1
	0x03650608 STRB W8, [X20 + 0x615]
	0x0365060C LDR X0, [X21]
	0x03650610 MOV W1, W31
	0x03650614 BL 0x1C16D6C
	0x03650618 LDR X8, [X19]
	0x0365061C LDP X20, X19, [X31 + 0x10]
	0x03650620 LDR X8, [X8 + 0xB8]
	0x03650624 STR X0, [X8]
	0x03650628 LDP X30, X21, [X31], #0x20
	0x0365062C RET
	0x03650630 STP X30, X21, [X31 - 0x20]!
	0x03650634 STP X20, X19, [X31 + 0x10]
	0x03650638 ADRP X21, 0xD90000
	0x0365063C LDRB W8, [X21 + 0x616]
	0x03650640 MOV X20, X1
	0x03650644 MOV X19, X0
	0x03650648 TBNZ X8, 0x0, 0x365066C
	0x0365064C ADRP X0, 0xAEC000
	0x03650650 LDR X0, [X0 + 0x7E0]
	0x03650654 BL 0x1C16CF4
	0x03650658 ADRP X0, 0xAA5000
	0x0365065C LDR X0, [X0 + 0x278]
	0x03650660 BL 0x1C16CF4
	0x03650664 MOVZ W8, 0x1
	0x03650668 STRB W8, [X21 + 0x616]
	0x0365066C MOV X0, X19
	0x03650670 MOV X1, X31
	0x03650674 BL 0x33BDD8C
	0x03650678 CBZ X20, 0x36506EC
	0x0365067C ADRP X8, 0xAEC000
	0x03650680 LDR X8, [X8 + 0x7E0]
	0x03650684 LDR X0, [X8]
	0x03650688 BL 0x1C16F10
	0x0365068C MOV X1, X31
	0x03650690 MOV X21, X0
	0x03650694 BL 0x33BDD8C
	0x03650698 MOV X0, X19
	0x0365069C MOV X1, X21
	0x036506A0 BL 0x364E530

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD91000
	005 Move W8, [X20+1551]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {52}
	011 Move X0, 0xAA4000
	012 Move X0, [X0+2288]
	013 Call 0x1C17CF4
	014 Move X0, 0xAED000
	015 Move X0, [X0+2208]
	016 Call 0x1C17CF4
	017 Move X0, 0xAED000
	018 Move X0, [X0+2216]
	019 Call 0x1C17CF4
	020 Move X0, 0xAED000
	021 Move X0, [X0+2224]
	022 Call 0x1C17CF4
	023 Move X0, 0xAD7000
	024 Move X0, [X0+848]
	025 Call 0x1C17CF4
	026 Move X0, 0xAA4000
	027 Move X0, [X0+2104]
	028 Call 0x1C17CF4
	029 Move X0, 0xAED000
	030 Move X0, [X0+2232]
	031 Call 0x1C17CF4
	032 Move X0, 0xAED000
	033 Move X0, [X0+2240]
	034 Call 0x1C17CF4
	035 Move X0, 0xAED000
	036 Move X0, [X0+2192]
	037 Call 0x1C17CF4
	038 Move X0, 0xAD7000
	039 Move X0, [X0+408]
	040 Call 0x1C17CF4
	041 Move X0, 0xAED000
	042 Move X0, [X0+2248]
	043 Call 0x1C17CF4
	044 Move X0, 0xAED000
	045 Move X0, [X0+2256]
	046 Call 0x1C17CF4
	047 Move X0, 0xAED000
	048 Move X0, [X0+2264]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+1551], W8
	052 Move [X31+12], W31
	053 Move X8, [X19+24]
	054 Compare X8, 0
	055 JumpIfEqual {276}
	056 Move W9, [X8+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W9, [X8+32]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W9, [X8+33]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X11, 0xAA4000
	063 Move W9, [X8+35]
	064 Move W8, [X8+34]
	065 Move X11, [X11+2288]
	066 Move TEMP, 0
	067 Not TEMP
	068 Move W10, TEMP
	069 NotImplemented "Instruction LSLV not yet implemented."
	070 Move X0, [X11]
	071 And W20, W8, W9
	072 Move [X31+12], W20
	073 Call 0x1C17F10
	074 Move X1, X31
	075 Move X19, X0
	076 Call StringBuilder..ctor, X0
	077 Move TEMP, X20
	078 And TEMP, TEMP, 128
	079 Compare TEMP, 128
	080 JumpIfNotEqual {89}
	081 Compare X19, 0
	082 JumpIfEqual {276}
	083 Move X8, 0xAED000
	084 Move X8, [X8+2264]
	085 Move X0, X19
	086 Move X2, X31
	087 Move X1, [X8]
	088 Call StringBuilder.Append, X0, X1
	089 Move TEMP, X20
	090 And TEMP, TEMP, 64
	091 Compare TEMP, 64
	092 JumpIfNotEqual {111}
	093 Compare X19, 0
	094 JumpIfEqual {276}
	095 Move X0, X19
	096 Move X1, X31
	097 Call StringBuilder.get_Length, X0
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X8, 0xAA4000
	100 Move X8, [X8+2104]
	101 Move X0, X19
	102 Move X2, X31
	103 Move X1, [X8]
	104 Call StringBuilder.Append, X0, X1
	105 Move X8, 0xAED000
	106 Move X8, [X8+2216]
	107 Move X0, X19
	108 Move X2, X31
	109 Move X1, [X8]
	110 Call StringBuilder.Append, X0, X1
	111 Move TEMP, X20
	112 And TEMP, TEMP, 32
	113 Compare TEMP, 32
	114 JumpIfNotEqual {133}
	115 Compare X19, 0
	116 JumpIfEqual {276}
	117 Move X0, X19
	118 Move X1, X31
	119 Call StringBuilder.get_Length, X0
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X8, 0xAA4000
	122 Move X8, [X8+2104]
	123 Move X0, X19
	124 Move X2, X31
	125 Move X1, [X8]
	126 Call StringBuilder.Append, X0, X1
	127 Move X8, 0xAED000
	128 Move X8, [X8+2240]
	129 Move X0, X19
	130 Move X2, X31
	131 Move X1, [X8]
	132 Call StringBuilder.Append, X0, X1
	133 Move TEMP, X20
	134 And TEMP, TEMP, 16
	135 Compare TEMP, 16
	136 JumpIfNotEqual {155}
	137 Compare X19, 0
	138 JumpIfEqual {276}
	139 Move X0, X19
	140 Move X1, X31
	141 Call StringBuilder.get_Length, X0
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X8, 0xAA4000
	144 Move X8, [X8+2104]
	145 Move X0, X19
	146 Move X2, X31
	147 Move X1, [X8]
	148 Call StringBuilder.Append, X0, X1
	149 Move X8, 0xAD7000
	150 Move X8, [X8+408]
	151 Move X0, X19
	152 Move X2, X31
	153 Move X1, [X8]
	154 Call StringBuilder.Append, X0, X1
	155 Move TEMP, X20
	156 And TEMP, TEMP, 8
	157 Compare TEMP, 8
	158 JumpIfNotEqual {177}
	159 Compare X19, 0
	160 JumpIfEqual {276}
	161 Move X0, X19
	162 Move X1, X31
	163 Call StringBuilder.get_Length, X0
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X8, 0xAA4000
	166 Move X8, [X8+2104]
	167 Move X0, X19
	168 Move X2, X31
	169 Move X1, [X8]
	170 Call StringBuilder.Append, X0, X1
	171 Move X8, 0xAED000
	172 Move X8, [X8+2248]
	173 Move X0, X19
	174 Move X2, X31
	175 Move X1, [X8]
	176 Call StringBuilder.Append, X0, X1
	177 Move TEMP, X20
	178 And TEMP, TEMP, 4
	179 Compare TEMP, 4
	180 JumpIfNotEqual {199}
	181 Compare X19, 0
	182 JumpIfEqual {276}
	183 Move X0, X19
	184 Move X1, X31
	185 Call StringBuilder.get_Length, X0
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move X8, 0xAA4000
	188 Move X8, [X8+2104]
	189 Move X0, X19
	190 Move X2, X31
	191 Move X1, [X8]
	192 Call StringBuilder.Append, X0, X1
	193 Move X8, 0xAED000
	194 Move X8, [X8+2224]
	195 Move X0, X19
	196 Move X2, X31
	197 Move X1, [X8]
	198 Call StringBuilder.Append, X0, X1
	199 Move TEMP, X20
	200 And TEMP, TEMP, 2
	201 Compare TEMP, 2
	202 JumpIfNotEqual {221}
	203 Compare X19, 0
	204 JumpIfEqual {276}
	205 Move X0, X19
	206 Move X1, X31
	207 Call StringBuilder.get_Length, X0
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X8, 0xAA4000
	210 Move X8, [X8+2104]
	211 Move X0, X19
	212 Move X2, X31
	213 Move X1, [X8]
	214 Call StringBuilder.Append, X0, X1
	215 Move X8, 0xAED000
	216 Move X8, [X8+2208]
	217 Move X0, X19
	218 Move X2, X31
	219 Move X1, [X8]
	220 Call StringBuilder.Append, X0, X1
	221 Move TEMP, X20
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfEqual {240}
	225 Move X8, 0xAD7000
	226 Move X8, [X8+848]
	227 Add X0, X31, 12
	228 Move X2, X31
	229 Move X1, [X8]
	230 Call Int32.ToString, X0, X1
	231 Compare X19, 0
	232 JumpIfNotEqual {264}
	233 Move X8, 0xAED000
	234 Move X8, [X8+2192]
	235 Move X0, [X8]
	236 Move X20, [X31+16]
	237 Move X19, [X31+24]
	238 Move X30, [X31+32]
	239 Return X0
	240 Compare X19, 0
	241 JumpIfEqual {276}
	242 Move X0, X19
	243 Move X1, X31
	244 Call StringBuilder.get_Length, X0
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, 0xAA4000
	247 Move X8, [X8+2104]
	248 Move X0, X19
	249 Move X2, X31
	250 Move X1, [X8]
	251 Call StringBuilder.Append, X0, X1
	252 Move X8, 0xAED000
	253 Move X8, [X8+2232]
	254 Move X0, X19
	255 Move X2, X31
	256 Move X1, [X8]
	257 Call StringBuilder.Append, X0, X1
	258 Move X8, 0xAD7000
	259 Move X8, [X8+848]
	260 Add X0, X31, 12
	261 Move X2, X31
	262 Move X1, [X8]
	263 Call Int32.ToString, X0, X1
	264 Move X8, 0xAED000
	265 Move X8, [X8+2256]
	266 Move X2, X0
	267 Move X0, X19
	268 Move X3, X31
	269 Move X1, [X8]
	270 Call StringBuilder.AppendFormat, X0, X1, X2
	271 Move X8, [X19]
	272 Move X0, X19
	273 Move X9, [X8+360]
	274 Move X1, [X8+368]
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Call 0x1C17F20

