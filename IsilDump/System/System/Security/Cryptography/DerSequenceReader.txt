Type: System.Security.Cryptography.DerSequenceReader

Method: System.Void set_ContentLength(System.Int32 value)

Disassembly:
	0x0364D494 LDR X8, [X25]
	0x0364D498 LDR X9, [X8 + 0xB8]

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x0364D49C LDR X10, [X24]
	0x0364D4A0 LDR X23, [X9 + 0x10]
	0x0364D4A4 LDR X9, [X10 + 0xB8]
	0x0364D4A8 ADD X21, X9, 0x10
	0x0364D4AC CBNZ X23, 0x364D504
	0x0364D4B0 LDR W9, [X8 + 0xE0]
	0x0364D4B4 CBNZ W9, 0x364D4C4
	0x0364D4B8 MOV X0, X8
	0x0364D4BC BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 Move W4, [X1+24]
	005 Move X2, X1
	006 Move W1, 16
	007 Move W3, W31
	008 Move X30, [X31+16]
	009 Call DerSequenceReader..ctor, X0, X1, X2, X3, X4
	010 Return 
	011 Call 0x1C17F20

Method: System.Void .ctor(System.Byte[] data, System.Int32 offset, System.Int32 length)

Disassembly:
	0x0364D4C0 LDR X8, [X25]
	0x0364D4C4 ADRP X9, 0xAEF000
	0x0364D4C8 LDR X8, [X8 + 0xB8]
	0x0364D4CC LDR X9, [X9 + 0x780]
	0x0364D4D0 LDR X24, [X8]

ISIL:
	001 Move W4, W3
	002 Move W3, W2
	003 Move X2, X1
	004 Move W1, 16

Method: System.Void .ctor(System.Security.Cryptography.DerSequenceReader/DerTag tagToEat, System.Byte[] data, System.Int32 offset, System.Int32 length)

Disassembly:
	0x0364D4D4 LDR X0, [X9]
	0x0364D4D8 BL 0x1C16F10
	0x0364D4DC ADRP X8, 0xAEF000
	0x0364D4E0 LDR X8, [X8 + 0x798]
	0x0364D4E4 MOV X1, X24
	0x0364D4E8 MOV X3, X31
	0x0364D4EC MOV X23, X0
	0x0364D4F0 LDR X2, [X8]
	0x0364D4F4 BL 0x2D27AA8
	0x0364D4F8 LDR X8, [X25]
	0x0364D4FC LDR X8, [X8 + 0xB8]
	0x0364D500 STR X23, [X8 + 0x10]
	0x0364D504 LDR X2, [X26]
	0x0364D508 MOV X0, X21
	0x0364D50C MOV X1, X23
	0x0364D510 BL 0x2212A40
	0x0364D514 MOV X21, X0
	0x0364D518 CBZ X22, 0x364D560
	0x0364D51C LDR X8, [X22]
	0x0364D520 LDR X1, [X19 + 0x10]
	0x0364D524 LDR W2, [X19 + 0x1C]
	0x0364D528 LDR X9, [X8 + 0x388]
	0x0364D52C LDR X4, [X8 + 0x390]
	0x0364D530 MOV X0, X22
	0x0364D534 MOV W3, W20
	0x0364D538 BLR X9
	0x0364D53C LDR W8, [X19 + 0x1C]
	0x0364D540 LDP X22, X21, [X31 + 0x30]
	0x0364D544 LDP X24, X23, [X31 + 0x20]
	0x0364D548 LDP X26, X25, [X31 + 0x10]
	0x0364D54C ADD W8, W8, W20
	0x0364D550 STR W8, [X19 + 0x1C]
	0x0364D554 LDP X20, X19, [X31 + 0x40]
	0x0364D558 LDR X30, [X31], #0x50
	0x0364D55C B 0x364D044
	0x0364D560 BL 0x1C16F20
	0x0364D564 B 0x364D568
	0x0364D568 MOV X22, X0
	0x0364D56C CMP W1, 0x1
	0x0364D570 B.NE 0x364D5F4
	0x0364D574 MOV X0, X22
	0x0364D578 BL 0x3EB1AD0
	0x0364D57C MOV X22, X0
	0x0364D580 ADRP X0, 0xAE0000
	0x0364D584 LDR X0, [X0 + 0xBE8]
	0x0364D588 BL 0x1C16D08
	0x0364D58C LDR X8, [X22]
	0x0364D590 LDR X1, [X8]
	0x0364D594 BL 0x1C17270
	0x0364D598 TBZ X0, 0x0, 0x364D5C8
	0x0364D59C BL 0x3EB1AE0
	0x0364D5A0 CBZ X21, 0x364D5E8
	0x0364D5A4 LDR X8, [X21]
	0x0364D5A8 LDR W2, [X19 + 0x1C]
	0x0364D5AC LDR X1, [X19 + 0x10]
	0x0364D5B0 MOV X0, X21
	0x0364D5B4 LDR X9, [X8 + 0x388]
	0x0364D5B8 LDR X4, [X8 + 0x390]
	0x0364D5BC MOV W3, W20
	0x0364D5C0 BLR X9

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W20, W1
	009 Move X1, X31
	010 Move W22, W4
	011 Move W21, W3
	012 Move X23, X2
	013 Move X19, X0
	014 Call Object..ctor, X0
	015 Move TEMP, X21
	016 And TEMP, TEMP, -2147483648
	017 Compare TEMP, -2147483648
	018 JumpIfEqual {53}
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Compare X23, 0
	021 JumpIfEqual {71}
	022 Move W8, [X23+24]
	023 Subtract W8, W8, W21
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add W8, W22, W21
	026 Move X0, X19
	027 Move W1, W20
	028 Move [X19+16], X23
	029 Move [X19+24], W8
	030 Move [X19+28], W21
	031 Call DerSequenceReader.EatTag, X0, X1
	032 Move [X31+12], W31
	033 Move X0, [X19+16]
	034 Move W2, [X19+24]
	035 Move W1, [X19+28]
	036 Add X3, X31, 12
	037 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	038 Move W8, [X19+28]
	039 Move W9, [X31+12]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X30, [X31+16]
	043 Move X23, [X31+24]
	044 Add W8, W9, W8
	045 Add W9, W8, W0
	046 Move [X19+28], W8
	047 Move [X19+32], W0
	048 Move [X19+24], W9
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Add X31, X31, 64
	052 Return 
	053 Move X0, 0xAD4000
	054 Move X0, [X0+3296]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X19, X0
	058 Move X0, 0xAED000
	059 Move X0, [X0+3888]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Move X2, X31
	064 Call CryptographicException..ctor, X0, X1
	065 Move X0, 0xAF0000
	066 Move X0, [X0+1848]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Call 0x1C17DEC
	071 Call 0x1C17F20

Method: System.Boolean get_HasData()

Disassembly:
	0x0364D680 STP X30, X21, [X31 - 0x20]!
	0x0364D684 STP X20, X19, [X31 + 0x10]
	0x0364D688 ADRP X20, 0xD93000
	0x0364D68C ADRP X21, 0xAEF000

ISIL:
	001 Move W9, [X0+24]
	002 Move W8, [X0+28]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Byte PeekTag()

Disassembly:
	0x0364D690 LDRB W8, [X20 + 0x5F2]
	0x0364D694 LDR X21, [X21 + 0x7A8]
	0x0364D698 MOV X19, X0
	0x0364D69C TBNZ X8, 0x0, 0x364D6B4
	0x0364D6A0 ADRP X0, 0xAEF000
	0x0364D6A4 LDR X0, [X0 + 0x7A8]
	0x0364D6A8 BL 0x1C16CF4
	0x0364D6AC MOVZ W8, 0x1
	0x0364D6B0 STRB W8, [X20 + 0x5F2]
	0x0364D6B4 LDR X2, [X21]
	0x0364D6B8 MOV X0, X19
	0x0364D6BC LDP X20, X19, [X31 + 0x10]
	0x0364D6C0 MOVZ W1, 0x17
	0x0364D6C4 LDP X30, X21, [X31], #0x20
	0x0364D6C8 B 0x364D718
	0x0364D6CC STP X30, X21, [X31 - 0x20]!
	0x0364D6D0 STP X20, X19, [X31 + 0x10]
	0x0364D6D4 ADRP X20, 0xD93000
	0x0364D6D8 ADRP X21, 0xAEF000
	0x0364D6DC LDRB W8, [X20 + 0x5F3]
	0x0364D6E0 LDR X21, [X21 + 0x7B0]
	0x0364D6E4 MOV X19, X0
	0x0364D6E8 TBNZ X8, 0x0, 0x364D700
	0x0364D6EC ADRP X0, 0xAEF000
	0x0364D6F0 LDR X0, [X0 + 0x7B0]
	0x0364D6F4 BL 0x1C16CF4
	0x0364D6F8 MOVZ W8, 0x1
	0x0364D6FC STRB W8, [X20 + 0x5F3]
	0x0364D700 LDR X2, [X21]
	0x0364D704 MOV X0, X19
	0x0364D708 LDP X20, X19, [X31 + 0x10]
	0x0364D70C MOVZ W1, 0x18
	0x0364D710 LDP X30, X21, [X31], #0x20
	0x0364D714 B 0x364D718
	0x0364D718 SUB X31, X31, 0x60
	0x0364D71C STR X30, [X31 + 0x10]
	0x0364D720 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+24]
	004 Move W8, [X0+28]
	005 Move X8, W8
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, [X0+16]
	008 Compare X9, 0
	009 JumpIfEqual {37}
	010 Move W10, [X9+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X9, X8
	013 Move W0, [X8+32]
	014 NotImplemented "Instruction ORN not yet implemented."
	015 And W31, W8, 31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0
	019 Move X0, 0xAD4000
	020 Move X0, [X0+3296]
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Move X0, 0xAED000
	025 Move X0, [X0+3888]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Move X2, X31
	030 Call CryptographicException..ctor, X0, X1
	031 Move X0, 0xAF0000
	032 Move X0, [X0+1864]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Call 0x1C17DEC
	037 Call 0x1C17F20
	038 Call 0x1C17F28

Method: System.Void SkipValue()

Disassembly:
	0x0364D724 STP X24, X23, [X31 + 0x30]
	0x0364D728 STP X22, X21, [X31 + 0x40]
	0x0364D72C STP X20, X19, [X31 + 0x50]
	0x0364D730 ADRP X22, 0xD93000
	0x0364D734 LDRB W8, [X22 + 0x5F4]
	0x0364D738 MOV X19, X2
	0x0364D73C MOV W21, W1
	0x0364D740 MOV X20, X0
	0x0364D744 TBNZ X8, 0x0, 0x364D798
	0x0364D748 ADRP X0, 0xAA7000
	0x0364D74C LDR X0, [X0 + 0x9F0]
	0x0364D750 BL 0x1C16CF4
	0x0364D754 ADRP X0, 0xAEC000
	0x0364D758 LDR X0, [X0 + 0xF00]
	0x0364D75C BL 0x1C16CF4
	0x0364D760 ADRP X0, 0xAEF000
	0x0364D764 LDR X0, [X0 + 0x7B8]
	0x0364D768 BL 0x1C16CF4
	0x0364D76C ADRP X0, 0xAEF000
	0x0364D770 LDR X0, [X0 + 0x7C0]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call DerSequenceReader.PeekTag, X0
	006 Move W1, W0
	007 Move X0, X19
	008 Call DerSequenceReader.EatTag, X0, X1
	009 Move [X31+12], W31
	010 Move X0, [X19+16]
	011 Move W2, [X19+24]
	012 Move W1, [X19+28]
	013 Add X3, X31, 12
	014 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	015 Move W8, [X19+28]
	016 Move W9, [X31+12]
	017 Add W8, W9, W8
	018 Add W8, W8, W0
	019 Move [X19+28], W8
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Add X31, X31, 32
	023 Return 

Method: System.Byte[] ReadNextEncodedValue()

Disassembly:
	0x0364D774 BL 0x1C16CF4
	0x0364D778 ADRP X0, 0xAEF000
	0x0364D77C LDR X0, [X0 + 0x7C8]
	0x0364D780 BL 0x1C16CF4
	0x0364D784 ADRP X0, 0xAEF000
	0x0364D788 LDR X0, [X0 + 0x778]
	0x0364D78C BL 0x1C16CF4
	0x0364D790 MOVZ W8, 0x1
	0x0364D794 STRB W8, [X22 + 0x5F4]
	0x0364D798 MOV X0, X20
	0x0364D79C MOV W1, W21
	0x0364D7A0 STR X31, [X31 + 0x8]
	0x0364D7A4 BL 0x364C5C4
	0x0364D7A8 STR W31, [X31 + 0x1C]
	0x0364D7AC LDR X0, [X20 + 0x10]
	0x0364D7B0 LDP W2, W1, [X20 + 0x18]
	0x0364D7B4 ADD X3, X31, 0x1C
	0x0364D7B8 BL 0x364C82C
	0x0364D7BC LDR W8, [X20 + 0x1C]
	0x0364D7C0 LDR W9, [X31 + 0x1C]
	0x0364D7C4 MOV W21, W0
	0x0364D7C8 MOV X0, X31
	0x0364D7CC ADD W8, W9, W8
	0x0364D7D0 STR W8, [X20 + 0x1C]
	0x0364D7D4 BL 0x3242EC8
	0x0364D7D8 CBZ X0, 0x364D90C
	0x0364D7DC LDR X8, [X0]
	0x0364D7E0 LDR W2, [X20 + 0x1C]
	0x0364D7E4 LDR X1, [X20 + 0x10]
	0x0364D7E8 ADRP X24, 0xAEF000
	0x0364D7EC LDR X9, [X8 + 0x388]
	0x0364D7F0 LDR X4, [X8 + 0x390]
	0x0364D7F4 ADRP X22, 0xAEC000
	0x0364D7F8 LDR X24, [X24 + 0x778]
	0x0364D7FC LDR X22, [X22 + 0xF00]
	0x0364D800 MOV W3, W21
	0x0364D804 BLR X9
	0x0364D808 LDR W8, [X20 + 0x1C]
	0x0364D80C ADD W8, W8, W21
	0x0364D810 STR W8, [X20 + 0x1C]
	0x0364D814 LDR X8, [X24]
	0x0364D818 MOV X20, X0
	0x0364D81C LDR W9, [X8 + 0xE0]
	0x0364D820 CBNZ W9, 0x364D830
	0x0364D824 MOV X0, X8
	0x0364D828 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD94000
	007 Move X20, 0xAA7000
	008 Move W8, [X21+1516]
	009 Move X20, [X20+1560]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAA7000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1516], W8
	020 Move X0, X19
	021 Move [X31+12], W31
	022 Call DerSequenceReader.PeekTag, X0
	023 Move W2, [X19+24]
	024 Move W8, [X19+28]
	025 Move X0, [X19+16]
	026 Add X3, X31, 12
	027 Add W1, W8, 1
	028 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	029 Move W9, [X31+12]
	030 Move X8, [X20]
	031 Add W9, W0, W9
	032 Add W20, W9, 1
	033 Move X0, X8
	034 Move W1, W20
	035 Call 0x1C17D6C
	036 Move X8, [X19+16]
	037 Move W1, [X19+28]
	038 Move X21, X0
	039 Move X2, X21
	040 Move X0, X8
	041 Move W3, W31
	042 Move W4, W20
	043 Move X5, X31
	044 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	045 Move W8, [X19+28]
	046 Move X0, X21
	047 Move X30, [X31+16]
	048 Move X21, [X31+24]
	049 Add W8, W8, W20
	050 Move [X19+28], W8
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Add X31, X31, 48
	054 Return X0

Method: System.Boolean ReadBoolean()

Disassembly:
	0x0364D950 MOV X0, X19
	0x0364D954 BL 0x1C16DEC
	0x0364D958 STR X30, [X31 - 0x20]!
	0x0364D95C STP X20, X19, [X31 + 0x10]
	0x0364D960 MOVZ W1, 0x1E
	0x0364D964 MOV X19, X0
	0x0364D968 BL 0x364C5C4
	0x0364D96C STR W31, [X31 + 0xC]
	0x0364D970 LDR X0, [X19 + 0x10]
	0x0364D974 LDP W2, W1, [X19 + 0x18]
	0x0364D978 ADD X3, X31, 0xC
	0x0364D97C BL 0x364C82C
	0x0364D980 LDR W8, [X19 + 0x1C]
	0x0364D984 LDR W9, [X31 + 0xC]
	0x0364D988 MOV W20, W0
	0x0364D98C MOV X0, X31
	0x0364D990 ADD W8, W9, W8
	0x0364D994 STR W8, [X19 + 0x1C]
	0x0364D998 BL 0x3242CD8
	0x0364D99C CBZ X0, 0x364D9D4
	0x0364D9A0 LDR X8, [X0]
	0x0364D9A4 LDR W2, [X19 + 0x1C]
	0x0364D9A8 LDR X1, [X19 + 0x10]
	0x0364D9AC MOV W3, W20
	0x0364D9B0 LDR X9, [X8 + 0x388]
	0x0364D9B4 LDR X4, [X8 + 0x390]
	0x0364D9B8 BLR X9
	0x0364D9BC LDR W8, [X19 + 0x1C]
	0x0364D9C0 ADD W8, W8, W20
	0x0364D9C4 STR W8, [X19 + 0x1C]
	0x0364D9C8 LDP X20, X19, [X31 + 0x10]
	0x0364D9CC LDR X30, [X31], #0x20
	0x0364D9D0 B 0x364D044
	0x0364D9D4 BL 0x1C16F20
	0x0364D9D8 STR X30, [X31 - 0x20]!
	0x0364D9DC STP X20, X19, [X31 + 0x10]
	0x0364D9E0 ADRP X19, 0xD93000
	0x0364D9E4 ADRP X20, 0xAEF000
	0x0364D9E8 LDRB W8, [X19 + 0x5F6]
	0x0364D9EC LDR X20, [X20 + 0x778]
	0x0364D9F0 TBNZ X8, 0x0, 0x364DA08
	0x0364D9F4 ADRP X0, 0xAEF000
	0x0364D9F8 LDR X0, [X0 + 0x778]
	0x0364D9FC BL 0x1C16CF4
	0x0364DA00 MOVZ W8, 0x1
	0x0364DA04 STRB W8, [X19 + 0x5F6]
	0x0364DA08 LDR X0, [X20]
	0x0364DA0C BL 0x1C16F10
	0x0364DA10 MOV X1, X31
	0x0364DA14 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move W1, 1
	005 Move X19, X0
	006 Call DerSequenceReader.EatTag, X0, X1
	007 Move [X31+12], W31
	008 Move X0, [X19+16]
	009 Move W2, [X19+24]
	010 Move W1, [X19+28]
	011 Add X3, X31, 12
	012 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	013 Move W8, [X19+28]
	014 Move W9, [X31+12]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add W8, W9, W8
	017 Move [X19+28], W8
	018 Move X9, [X19+16]
	019 Compare X9, 0
	020 JumpIfEqual {51}
	021 Move W10, [X9+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X9, X9, W8
	024 Move W9, [X9+32]
	025 Add W8, W8, 1
	026 Move [X19+28], W8
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Add X31, X31, 32
	032 Return X0
	033 Move X0, 0xAD4000
	034 Move X0, [X0+3296]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X19, X0
	038 Move X0, 0xAED000
	039 Move X0, [X0+3888]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Move X2, X31
	044 Call CryptographicException..ctor, X0, X1
	045 Move X0, 0xAF0000
	046 Move X0, [X0+1880]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Call 0x1C17DEC
	051 Call 0x1C17F20
	052 Call 0x1C17F28

Method: System.Int32 ReadInteger()

Disassembly:
	0x0364DA18 BL 0x33BDD8C
	0x0364DA1C LDR X8, [X20]
	0x0364DA20 LDR X8, [X8 + 0xB8]
	0x0364DA24 STR X19, [X8]
	0x0364DA28 LDP X20, X19, [X31 + 0x10]
	0x0364DA2C LDR X30, [X31], #0x20
	0x0364DA30 RET
	0x0364DA34 MOV X1, X31
	0x0364DA38 B 0x33BDD8C
	0x0364DA3C STR X30, [X31 - 0x20]!
	0x0364DA40 STP X20, X19, [X31 + 0x10]
	0x0364DA44 ADRP X19, 0xD93000
	0x0364DA48 ADRP X20, 0xAD5000
	0x0364DA4C LDRB W8, [X19 + 0x5F7]
	0x0364DA50 LDR X20, [X20 + 0x828]
	0x0364DA54 TBNZ X8, 0x0, 0x364DA6C
	0x0364DA58 ADRP X0, 0xAD5000
	0x0364DA5C LDR X0, [X0 + 0x828]
	0x0364DA60 BL 0x1C16CF4
	0x0364DA64 MOVZ W8, 0x1
	0x0364DA68 STRB W8, [X19 + 0x5F7]
	0x0364DA6C LDR X0, [X20]
	0x0364DA70 BL 0x1C16F10
	0x0364DA74 MOVZ W2, 0x1
	0x0364DA78 MOV W1, W31
	0x0364DA7C MOV X3, X31
	0x0364DA80 MOV X19, X0
	0x0364DA84 BL 0x323A334
	0x0364DA88 MOV X0, X19
	0x0364DA8C LDP X20, X19, [X31 + 0x10]
	0x0364DA90 LDR X30, [X31], #0x20
	0x0364DA94 RET
	0x0364DA98 STR X30, [X31 - 0x20]!
	0x0364DA9C STP X20, X19, [X31 + 0x10]
	0x0364DAA0 ADRP X19, 0xD93000
	0x0364DAA4 ADRP X20, 0xADC000
	0x0364DAA8 LDRB W8, [X19 + 0x5F8]
	0x0364DAAC LDR X20, [X20 + 0x990]
	0x0364DAB0 TBNZ X8, 0x0, 0x364DAC8
	0x0364DAB4 ADRP X0, 0xADC000
	0x0364DAB8 LDR X0, [X0 + 0x990]
	0x0364DABC BL 0x1C16CF4
	0x0364DAC0 MOVZ W8, 0x1
	0x0364DAC4 STRB W8, [X19 + 0x5F8]
	0x0364DAC8 LDR X0, [X20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xD94000
	008 Move X21, 0xAD4000
	009 Move X20, 0xAE8000
	010 Move W8, [X22+1517]
	011 Move X21, [X21+3024]
	012 Move X20, [X20+2368]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xAD4000
	019 Move X0, [X0+3024]
	020 Call 0x1C17CF4
	021 Move X0, 0xAE8000
	022 Move X0, [X0+2368]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1517], W8
	026 Move W1, 2
	027 Move X0, X19
	028 Call DerSequenceReader.EatTag, X0, X1
	029 Move X0, X19
	030 Call DerSequenceReader.ReadContentAsBytes, X0
	031 Move X1, [X21]
	032 Move X19, X0
	033 Call 0x21475E8, X0
	034 Add X0, X31, 0
	035 Move X1, X19
	036 Move X2, X31
	037 Move [X31], X31
	038 Move [X31+8], X31
	039 Call BigInteger..ctor, X0, X1
	040 Move X0, [X20]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, [X31]
	046 Move X1, [X31+8]
	047 Move X2, X31
	048 Call BigInteger.op_Explicit, X0
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X30, [X31+16]
	054 Add X31, X31, 64
	055 Return X0

Method: System.Byte[] ReadIntegerBytes()

Disassembly:
	0x0364DACC LDP X20, X19, [X31 + 0x10]
	0x0364DAD0 MOV X1, X31
	0x0364DAD4 LDR X30, [X31], #0x20
	0x0364DAD8 B 0x3243998
	0x0364DADC STR X30, [X31 - 0x20]!
	0x0364DAE0 STP X20, X19, [X31 + 0x10]
	0x0364DAE4 ADRP X19, 0xD93000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 2
	004 Move X19, X0
	005 Call DerSequenceReader.EatTag, X0, X1
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]

Method: System.Byte[] ReadBitString()

Disassembly:
	0x0364DB9C BL 0x1C16F20
	0x0364DBA0 MOV X0, X19
	0x0364DBA4 BL 0x1C171E0
	0x0364DBA8 MOV X1, X31
	0x0364DBAC B 0x33BDD8C
	0x0364DBB0 STR X30, [X31 - 0x30]!
	0x0364DBB4 STP X22, X21, [X31 + 0x10]
	0x0364DBB8 STP X20, X19, [X31 + 0x20]
	0x0364DBBC ADRP X22, 0xD93000
	0x0364DBC0 ADRP X21, 0xAEC000
	0x0364DBC4 LDRB W8, [X22 + 0x5FA]
	0x0364DBC8 LDR X21, [X21 + 0x8A8]
	0x0364DBCC MOV X20, X1
	0x0364DBD0 MOV X19, X0
	0x0364DBD4 TBNZ X8, 0x0, 0x364DBEC
	0x0364DBD8 ADRP X0, 0xAEC000
	0x0364DBDC LDR X0, [X0 + 0x8A8]
	0x0364DBE0 BL 0x1C16CF4
	0x0364DBE4 MOVZ W8, 0x1
	0x0364DBE8 STRB W8, [X22 + 0x5FA]
	0x0364DBEC MOV X0, X19
	0x0364DBF0 MOV X1, X31
	0x0364DBF4 BL 0x33BDD8C
	0x0364DBF8 LDR X0, [X21]
	0x0364DBFC LDR W8, [X0 + 0xE0]
	0x0364DC00 CBNZ W8, 0x364DC08
	0x0364DC04 BL 0x1C16DFC
	0x0364DC08 MOV X0, X20
	0x0364DC0C MOV W1, W31
	0x0364DC10 MOV W2, W31
	0x0364DC14 MOV X3, X31
	0x0364DC18 BL 0x35F0B6C
	0x0364DC1C CMP X0, 0x0
	0x0364DC20 CSEL X8, X20, X0, EQ
	0x0364DC24 STR X8, [X19 + 0x10]
	0x0364DC28 STR W31, [X19 + 0x20]
	0x0364DC2C LDP X20, X19, [X31 + 0x20]
	0x0364DC30 LDP X22, X21, [X31 + 0x10]
	0x0364DC34 LDR X30, [X31], #0x30
	0x0364DC38 RET
	0x0364DC3C STP X30, X21, [X31 - 0x20]!
	0x0364DC40 STP X20, X19, [X31 + 0x10]
	0x0364DC44 MOV X20, X1
	0x0364DC48 MOV X1, X31
	0x0364DC4C MOV X19, X2
	0x0364DC50 MOV X21, X0
	0x0364DC54 BL 0x33BDD8C
	0x0364DC58 STP X20, X19, [X21 + 0x10]
	0x0364DC5C LDP X20, X19, [X31 + 0x10]
	0x0364DC60 LDP X30, X21, [X31], #0x20
	0x0364DC64 RET
	0x0364DC68 STR X30, [X31 - 0x20]!
	0x0364DC6C STP X20, X19, [X31 + 0x10]
	0x0364DC70 MOV X20, X1
	0x0364DC74 MOV X1, X31
	0x0364DC78 MOV X19, X0
	0x0364DC7C BL 0x33BDD8C
	0x0364DC80 CBZ X20, 0x364DCA0
	0x0364DC84 LDR V0, [X20 + 0x1]
	0x0364DC88 STR V0, [X19 + 0x1]
	0x0364DC8C LDR W8, [X20 + 0x20]
	0x0364DC90 STR W8, [X19 + 0x20]
	0x0364DC94 LDP X20, X19, [X31 + 0x10]
	0x0364DC98 LDR X30, [X31], #0x20
	0x0364DC9C RET
	0x0364DCA0 ADRP X0, 0xAAB000
	0x0364DCA4 LDR X0, [X0 + 0x528]
	0x0364DCA8 BL 0x1C16D08
	0x0364DCAC BL 0x1C16F10
	0x0364DCB0 MOV X19, X0
	0x0364DCB4 ADRP X0, 0xAD3000
	0x0364DCB8 LDR X0, [X0 + 0xBE0]
	0x0364DCBC BL 0x1C16D08
	0x0364DCC0 MOV X1, X0
	0x0364DCC4 MOV X0, X19
	0x0364DCC8 MOV X2, X31
	0x0364DCCC BL 0x330E100
	0x0364DCD0 ADRP X0, 0xAEF000
	0x0364DCD4 LDR X0, [X0 + 0x7D8]
	0x0364DCD8 BL 0x1C16D08
	0x0364DCDC MOV X1, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD94000
	007 Move W8, [X20+1518]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAA7000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1518], W8
	018 Move W1, 3
	019 Move X0, X19
	020 Call DerSequenceReader.EatTag, X0, X1
	021 Move [X31+12], W31
	022 Move X0, [X19+16]
	023 Move W2, [X19+24]
	024 Move W1, [X19+28]
	025 Add X3, X31, 12
	026 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	027 Move W8, [X19+28]
	028 Move W9, [X31+12]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Add W8, W9, W8
	031 Move [X19+28], W8
	032 Move X9, [X19+16]
	033 Compare X9, 0
	034 JumpIfEqual {86}
	035 Move W10, [X9+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X9, X9, W8
	038 Move W9, [X9+32]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X9, 0xAA7000
	041 Move X9, [X9+1560]
	042 Add W8, W8, 1
	043 Move [X19+28], W8
	044 Subtract W20, W0, 1
	045 Move X8, [X9]
	046 Move W1, W20
	047 Move X0, X8
	048 Call 0x1C17D6C
	049 Move X8, [X19+16]
	050 Move W1, [X19+28]
	051 Move X21, X0
	052 Move X2, X21
	053 Move X0, X8
	054 Move W3, W31
	055 Move W4, W20
	056 Move X5, X31
	057 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	058 Move W8, [X19+28]
	059 Move X0, X21
	060 Move X30, [X31+16]
	061 Move X21, [X31+24]
	062 Add W8, W8, W20
	063 Move [X19+28], W8
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Add X31, X31, 48
	067 Return X0
	068 Move X0, 0xAD4000
	069 Move X0, [X0+3296]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xAED000
	074 Move X0, [X0+3888]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call CryptographicException..ctor, X0, X1
	080 Move X0, 0xAF0000
	081 Move X0, [X0+1888]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC
	086 Call 0x1C17F20
	087 Call 0x1C17F28

Method: System.Byte[] ReadOctetString()

Disassembly:
	0x0364DCE0 MOV X0, X19
	0x0364DCE4 BL 0x1C16DEC
	0x0364DCE8 STR X30, [X31 - 0x30]!
	0x0364DCEC STP X22, X21, [X31 + 0x10]
	0x0364DCF0 STP X20, X19, [X31 + 0x20]
	0x0364DCF4 ADRP X21, 0xD93000
	0x0364DCF8 LDRB W8, [X21 + 0x5FB]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 4
	004 Move X19, X0
	005 Call DerSequenceReader.EatTag, X0, X1
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call DerSequenceReader.ReadContentAsBytes, X0
	010 Return X0

Method: System.String ReadOidAsString()

Disassembly:
	0x0364DCFC MOV W19, W1
	0x0364DD00 MOV X20, X0
	0x0364DD04 TBNZ X8, 0x0, 0x364DD28
	0x0364DD08 ADRP X0, 0xAEC000
	0x0364DD0C LDR X0, [X0 + 0x8A8]
	0x0364DD10 BL 0x1C16CF4
	0x0364DD14 ADRP X0, 0xAEF000
	0x0364DD18 LDR X0, [X0 + 0x7E0]
	0x0364DD1C BL 0x1C16CF4
	0x0364DD20 MOVZ W8, 0x1
	0x0364DD24 STRB W8, [X21 + 0x5FB]
	0x0364DD28 CBZ X20, 0x364DD98
	0x0364DD2C ADRP X8, 0xAEC000
	0x0364DD30 LDR X8, [X8 + 0x8A8]
	0x0364DD34 LDR X0, [X8]
	0x0364DD38 LDR W8, [X0 + 0xE0]
	0x0364DD3C CBNZ W8, 0x364DD44
	0x0364DD40 BL 0x1C16DFC
	0x0364DD44 MOV X0, X20
	0x0364DD48 MOV W1, W19
	0x0364DD4C MOV W2, W31
	0x0364DD50 MOV X3, X31
	0x0364DD54 BL 0x35F05D8
	0x0364DD58 CBZ X0, 0x364DDCC
	0x0364DD5C ADRP X8, 0xAEF000
	0x0364DD60 LDR X8, [X8 + 0x7E0]
	0x0364DD64 MOV X21, X0
	0x0364DD68 LDR X0, [X8]
	0x0364DD6C BL 0x1C16F10
	0x0364DD70 MOV X1, X31
	0x0364DD74 MOV X22, X0
	0x0364DD78 BL 0x33BDD8C
	0x0364DD7C STP X20, X21, [X22 + 0x10]
	0x0364DD80 STR W19, [X22 + 0x20]
	0x0364DD84 MOV X0, X22
	0x0364DD88 LDP X20, X19, [X31 + 0x20]
	0x0364DD8C LDP X22, X21, [X31 + 0x10]
	0x0364DD90 LDR X30, [X31], #0x30
	0x0364DD94 RET
	0x0364DD98 ADRP X0, 0xAAB000
	0x0364DD9C LDR X0, [X0 + 0x528]
	0x0364DDA0 BL 0x1C16D08
	0x0364DDA4 BL 0x1C16F10
	0x0364DDA8 MOV X19, X0
	0x0364DDAC ADRP X0, 0xAEF000
	0x0364DDB0 LDR X0, [X0 + 0x7E8]
	0x0364DDB4 BL 0x1C16D08
	0x0364DDB8 MOV X1, X0
	0x0364DDBC MOV X0, X19
	0x0364DDC0 MOV X2, X31
	0x0364DDC4 BL 0x330E100
	0x0364DDC8 B 0x364DDFC
	0x0364DDCC ADRP X0, 0xAD3000
	0x0364DDD0 LDR X0, [X0 + 0xCE0]
	0x0364DDD4 BL 0x1C16D08
	0x0364DDD8 BL 0x1C16F10
	0x0364DDDC MOV X19, X0
	0x0364DDE0 ADRP X0, 0xAEF000
	0x0364DDE4 LDR X0, [X0 + 0x7F0]
	0x0364DDE8 BL 0x1C16D08
	0x0364DDEC MOV X1, X0
	0x0364DDF0 MOV X0, X19
	0x0364DDF4 MOV X2, X31
	0x0364DDF8 BL 0x3252170
	0x0364DDFC ADRP X0, 0xAEF000
	0x0364DE00 LDR X0, [X0 + 0x7F8]
	0x0364DE04 BL 0x1C16D08
	0x0364DE08 MOV X1, X0
	0x0364DE0C MOV X0, X19
	0x0364DE10 BL 0x1C16DEC
	0x0364DE14 STR X30, [X31 - 0x30]!
	0x0364DE18 STP X22, X21, [X31 + 0x10]
	0x0364DE1C STP X20, X19, [X31 + 0x20]
	0x0364DE20 MOV X21, X1
	0x0364DE24 MOV X1, X31
	0x0364DE28 MOV W19, W3
	0x0364DE2C MOV X20, X2
	0x0364DE30 MOV X22, X0
	0x0364DE34 BL 0x33BDD8C
	0x0364DE38 STP X21, X20, [X22 + 0x10]
	0x0364DE3C STR W19, [X22 + 0x20]
	0x0364DE40 LDP X20, X19, [X31 + 0x20]
	0x0364DE44 LDP X22, X21, [X31 + 0x10]
	0x0364DE48 LDR X30, [X31], #0x30
	0x0364DE4C RET
	0x0364DE50 LDR X0, [X0 + 0x10]
	0x0364DE54 RET
	0x0364DE58 STR X1, [X0 + 0x10]
	0x0364DE5C RET
	0x0364DE60 STP X30, X21, [X31 - 0x20]!
	0x0364DE64 STP X20, X19, [X31 + 0x10]
	0x0364DE68 ADRP X20, 0xD93000
	0x0364DE6C LDRB W8, [X20 + 0x5FC]
	0x0364DE70 MOV X19, X0
	0x0364DE74 TBNZ X8, 0x0, 0x364DE8C
	0x0364DE78 ADRP X0, 0xAEC000
	0x0364DE7C LDR X0, [X0 + 0x8A8]
	0x0364DE80 BL 0x1C16CF4
	0x0364DE84 MOVZ W8, 0x1
	0x0364DE88 STRB W8, [X20 + 0x5FC]
	0x0364DE8C LDR X0, [X19 + 0x18]
	0x0364DE90 CBNZ X0, 0x364DED8
	0x0364DE94 LDR X20, [X19 + 0x10]
	0x0364DE98 CBZ X20, 0x364DED4
	0x0364DE9C ADRP X8, 0xAEC000
	0x0364DEA0 LDR X8, [X8 + 0x8A8]
	0x0364DEA4 LDR W21, [X19 + 0x20]
	0x0364DEA8 LDR X0, [X8]
	0x0364DEAC LDR W8, [X0 + 0xE0]
	0x0364DEB0 CBNZ W8, 0x364DEB8
	0x0364DEB4 BL 0x1C16DFC
	0x0364DEB8 MOVZ W2, 0x1
	0x0364DEBC MOV X0, X20
	0x0364DEC0 MOV W1, W21
	0x0364DEC4 MOV X3, X31
	0x0364DEC8 BL 0x35F05D8
	0x0364DECC STR X0, [X19 + 0x18]
	0x0364DED0 B 0x364DED8
	0x0364DED4 MOV X0, X31
	0x0364DED8 LDP X20, X19, [X31 + 0x10]
	0x0364DEDC LDP X30, X21, [X31], #0x20
	0x0364DEE0 RET
	0x0364DEE4 STR X30, [X31 - 0x30]!
	0x0364DEE8 STP X22, X21, [X31 + 0x10]
	0x0364DEEC STP X20, X19, [X31 + 0x20]
	0x0364DEF0 ADRP X22, 0xD93000
	0x0364DEF4 ADRP X21, 0xAEF000
	0x0364DEF8 ADRP X20, 0xAEF000
	0x0364DEFC LDRB W8, [X22 + 0x5FD]
	0x0364DF00 LDR X21, [X21 + 0x800]
	0x0364DF04 LDR X20, [X20 + 0x808]
	0x0364DF08 MOV X19, X0
	0x0364DF0C TBNZ X8, 0x0, 0x364DF30
	0x0364DF10 ADRP X0, 0xAEF000
	0x0364DF14 LDR X0, [X0 + 0x808]
	0x0364DF18 BL 0x1C16CF4
	0x0364DF1C ADRP X0, 0xAEF000
	0x0364DF20 LDR X0, [X0 + 0x800]
	0x0364DF24 BL 0x1C16CF4
	0x0364DF28 MOVZ W8, 0x1
	0x0364DF2C STRB W8, [X22 + 0x5FD]
	0x0364DF30 MOV X0, X19
	0x0364DF34 MOV X1, X31
	0x0364DF38 BL 0x33BDD8C
	0x0364DF3C LDR X0, [X21]
	0x0364DF40 BL 0x1C16F10
	0x0364DF44 LDR X1, [X20]
	0x0364DF48 MOV X20, X0
	0x0364DF4C BL 0x301B7C4
	0x0364DF50 STR X20, [X19 + 0x10]
	0x0364DF54 LDP X20, X19, [X31 + 0x20]
	0x0364DF58 LDP X22, X21, [X31 + 0x10]
	0x0364DF5C LDR X30, [X31], #0x30
	0x0364DF60 RET
	0x0364DF64 STP X30, X21, [X31 - 0x20]!
	0x0364DF68 STP X20, X19, [X31 + 0x10]
	0x0364DF6C ADRP X21, 0xD93000
	0x0364DF70 LDRB W8, [X21 + 0x5FE]
	0x0364DF74 MOV X19, X1
	0x0364DF78 MOV X20, X0
	0x0364DF7C TBNZ X8, 0x0, 0x364DFA0
	0x0364DF80 ADRP X0, 0xAEF000
	0x0364DF84 LDR X0, [X0 + 0x810]
	0x0364DF88 BL 0x1C16CF4
	0x0364DF8C ADRP X0, 0xAEF000
	0x0364DF90 LDR X0, [X0 + 0x818]
	0x0364DF94 BL 0x1C16CF4
	0x0364DF98 MOVZ W8, 0x1
	0x0364DF9C STRB W8, [X21 + 0x5FE]
	0x0364DFA0 LDR X0, [X20 + 0x10]
	0x0364DFA4 CBZ X0, 0x364E010
	0x0364DFA8 ADRP X9, 0xAEF000
	0x0364DFAC LDR X9, [X9 + 0x810]
	0x0364DFB0 LDP W20, W10, [X0 + 0x18]
	0x0364DFB4 LDR X8, [X0 + 0x10]
	0x0364DFB8 LDR X9, [X9]
	0x0364DFBC SXTW X20, W20
	0x0364DFC0 ADD W10, W10, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+40], X27
	004 Move [X31+48], X26
	005 Move [X31+56], X25
	006 Move [X31+64], X24
	007 Move [X31+72], X23
	008 Move [X31+80], X22
	009 Move [X31+88], X21
	010 Move [X31+96], X20
	011 Move [X31+104], X19
	012 Move X20, 0xD94000
	013 Move W8, [X20+1519]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xAE8000
	020 Move X0, [X0+2368]
	021 Call 0x1C17CF4
	022 Move X0, 0xAA7000
	023 Move X0, [X0+2288]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+1519], W8
	027 Move W1, 6
	028 Move X0, X19
	029 Move [X31+16], X31
	030 Move [X31+24], X31
	031 Call DerSequenceReader.EatTag, X0, X1
	032 Move [X31], W31
	033 Move X0, [X19+16]
	034 Move W2, [X19+24]
	035 Move W1, [X19+28]
	036 Add X3, X31, 0
	037 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	038 Move W8, [X19+28]
	039 Move W9, [X31]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Add W8, W9, W8
	042 Move [X19+28], W8
	043 Move X8, 0xAA7000
	044 Move X8, [X8+2288]
	045 Move W20, W0
	046 Move X0, [X8]
	047 Call 0x1C17F10
	048 Move W1, W20
	049 ShiftRight W1, 30
	050 And W1, W1, 0x1FFFFFFF
	051 Move X2, X31
	052 Move X21, X0
	053 Call StringBuilder..ctor, X0, X1
	054 Move X8, [X19+16]
	055 Compare X8, 0
	056 JumpIfEqual {190}
	057 NotImplemented "Instruction LDRSW not yet implemented."
	058 Move W10, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Compare X21, 0
	061 JumpIfEqual {190}
	062 Add X8, X8, X9
	063 Move W8, [X8+32]
	064 Move X25, 0xAE8000
	065 Move W9, 0xCCCD
	066 Move X25, [X25+2368]
	067 NotImplemented "Instruction MOVK not yet implemented."
	068 And W10, W8, 255
	069 NotImplemented "Instruction UMADDL not yet implemented."
	070 Move X1, X9
	071 ShiftRight X1, 37
	072 And X1, X1, 0x7FFFFFFF
	073 Move W9, 40
	074 Move X0, X21
	075 Move X2, X31
	076 NotImplemented "Instruction MSUB not yet implemented."
	077 Call StringBuilder.Append, X0, X1
	078 Move W1, 46
	079 Move X0, X21
	080 Move X2, X31
	081 Call StringBuilder.Append, X0, X1
	082 Move X0, X21
	083 Move W1, W22
	084 Move X2, X31
	085 Call StringBuilder.Append, X0, X1
	086 Move X0, [X25]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Add X0, X31, 16
	092 Move W1, W31
	093 Move X2, X31
	094 Call BigInteger..ctor, X0, X1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W22, 1
	097 Move W26, 1
	098 Move X8, [X19+16]
	099 Compare X8, 0
	100 JumpIfEqual {190}
	101 Move W9, [X19+28]
	102 Move W10, [X8+24]
	103 Add W9, W26, W9
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add X8, X8, W9
	106 NotImplemented "Instruction INVALID not yet implemented."
	107 Move TEMP, X22
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {115}
	111 Move W1, 46
	112 Move X0, X21
	113 Move X2, X31
	114 Call StringBuilder.Append, X0, X1
	115 Move X0, [X25]
	116 Move X22, [X31+16]
	117 Move X23, [X31+24]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {122}
	121 Call 0x1C17DFC
	122 Move W2, 7
	123 Move X0, X22
	124 Move X1, X23
	125 Move X3, X31
	126 And W24, W27, 127
	127 Call BigInteger.op_LeftShift, X0, X1
	128 Move X22, X0
	129 Move X23, X1
	130 Move [X31+16], X0
	131 Move [X31+24], X1
	132 Move W0, W24
	133 Move X1, X31
	134 Call BigInteger.op_Implicit, X0
	135 Move X2, X0
	136 Move X3, X1
	137 Move X0, X22
	138 Move X1, X23
	139 Move X4, X31
	140 Call BigInteger.op_Addition, X0, X1
	141 NotImplemented "Instruction CMP not yet implemented."
	142 NotImplemented "Instruction CSET not yet implemented."
	143 Move [X31+16], X0
	144 Move [X31+24], X1
	145 Move TEMP, X27
	146 And TEMP, TEMP, -2147483648
	147 Compare TEMP, -2147483648
	148 JumpIfEqual {168}
	149 Move V0, [X31+1]
	150 Move X0, [X25]
	151 Add X1, X31, 0
	152 Move [X31], V0
	153 Call 0x1C17E04
	154 Move X1, X0
	155 Move X0, X21
	156 Move X2, X31
	157 Call StringBuilder.Append, X0, X1
	158 Move X0, [X25]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move W0, W31
	164 Move X1, X31
	165 Call BigInteger.op_Implicit, X0
	166 Move [X31+16], X0
	167 Move [X31+24], X1
	168 Add W26, W26, 1
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move W8, [X19+28]
	171 Move X0, X21
	172 Add W8, W8, W20
	173 Move [X19+28], W8
	174 Move X8, [X21]
	175 Move X9, [X8+360]
	176 Move X1, [X8+368]
	177 NotImplemented "Instruction BLR not yet implemented."
	178 Move X20, [X31+96]
	179 Move X19, [X31+104]
	180 Move X22, [X31+80]
	181 Move X21, [X31+88]
	182 Move X24, [X31+64]
	183 Move X23, [X31+72]
	184 Move X26, [X31+48]
	185 Move X25, [X31+56]
	186 Move X30, [X31+32]
	187 Move X27, [X31+40]
	188 Add X31, X31, 112
	189 Return X0
	190 Call 0x1C17F20
	191 Call 0x1C17F28
	192 Move X0, 0xAD4000
	193 Move X0, [X0+3296]
	194 Call 0x1C17D08
	195 Call 0x1C17F10
	196 Move X19, X0
	197 Move X0, 0xAED000
	198 Move X0, [X0+3888]
	199 Call 0x1C17D08
	200 Move X1, X0
	201 Move X0, X19
	202 Move X2, X31
	203 Call CryptographicException..ctor, X0, X1
	204 Move X0, 0xAF0000
	205 Move X0, [X0+1896]
	206 Call 0x1C17D08
	207 Move X1, X0
	208 Move X0, X19
	209 Call 0x1C17DEC

Method: System.String ReadUtf8String()

Disassembly:
	0x0364DFC4 STR W10, [X0 + 0x1C]
	0x0364DFC8 CBZ X8, 0x364E010
	0x0364DFCC LDR W10, [X8 + 0x18]
	0x0364DFD0 CMP W20, W10
	0x0364DFD4 B.CS 0x364DFEC
	0x0364DFD8 ADD W9, W20, 0x1
	0x0364DFDC ADD X8, X8, X20, 0x3, LSL
	0x0364DFE0 STR W9, [X0 + 0x18]
	0x0364DFE4 STR X19, [X8 + 0x20]
	0x0364DFE8 B 0x364E000
	0x0364DFEC LDR X8, [X9 + 0x20]
	0x0364DFF0 MOV X1, X19
	0x0364DFF4 LDR X8, [X8 + 0xC0]
	0x0364DFF8 LDR X2, [X8 + 0x70]
	0x0364DFFC BL 0x301BF90
	0x0364E000 MOV W0, W20
	0x0364E004 LDP X20, X19, [X31 + 0x10]
	0x0364E008 LDP X30, X21, [X31], #0x20
	0x0364E00C RET
	0x0364E010 BL 0x1C16F20
	0x0364E014 STP X30, X21, [X31 - 0x20]!
	0x0364E018 STP X20, X19, [X31 + 0x10]
	0x0364E01C ADRP X21, 0xD92000
	0x0364E020 LDRB W8, [X21 + 0x5FF]
	0x0364E024 MOV W19, W1
	0x0364E028 MOV X20, X0
	0x0364E02C TBNZ X8, 0x0, 0x364E044
	0x0364E030 ADRP X0, 0xAEE000
	0x0364E034 LDR X0, [X0 + 0x820]
	0x0364E038 BL 0x1C16CF4
	0x0364E03C MOVZ W8, 0x1
	0x0364E040 STRB W8, [X21 + 0x5FF]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 12
	005 Move X19, X0
	006 Call DerSequenceReader.EatTag, X0, X1
	007 Move [X31+12], W31
	008 Move X0, [X19+16]
	009 Move W2, [X19+24]
	010 Move W1, [X19+28]
	011 Add X3, X31, 12
	012 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	013 Move W8, [X19+28]
	014 Move W9, [X31+12]
	015 Move W20, W0
	016 Move X0, X31
	017 Add W8, W9, W8
	018 Move [X19+28], W8
	019 Call Encoding.get_UTF8
	020 Compare X0, 0
	021 JumpIfEqual {35}
	022 Move X8, [X0]
	023 Move W2, [X19+28]
	024 Move X1, [X19+16]
	025 Move W3, W20
	026 Move X9, [X8+904]
	027 Move X4, [X8+912]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move W8, [X19+28]
	030 Add W8, W8, W20
	031 Move [X19+28], W8
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call 0x1C17F20

Method: System.Security.Cryptography.DerSequenceReader ReadCollectionWithTag(System.Security.Cryptography.DerSequenceReader/DerTag expected)

Disassembly:
	0x0364E0C0 ADRP X21, 0xAEE000
	0x0364E0C4 LDRB W8, [X20 + 0x601]
	0x0364E0C8 LDR X21, [X21 + 0x828]
	0x0364E0CC MOV X19, X0
	0x0364E0D0 TBNZ X8, 0x0, 0x364E0E8
	0x0364E0D4 ADRP X0, 0xAEE000
	0x0364E0D8 LDR X0, [X0 + 0x828]
	0x0364E0DC BL 0x1C16CF4
	0x0364E0E0 MOVZ W8, 0x1
	0x0364E0E4 STRB W8, [X20 + 0x601]
	0x0364E0E8 LDR X0, [X21]
	0x0364E0EC BL 0x1C16F10
	0x0364E0F0 MOV X1, X31
	0x0364E0F4 MOV X20, X0
	0x0364E0F8 BL 0x33BDD8C
	0x0364E0FC MOVN W8, 0x0
	0x0364E100 STR X19, [X20 + 0x10]
	0x0364E104 STR W8, [X20 + 0x18]
	0x0364E108 MOV X0, X20
	0x0364E10C LDP X20, X19, [X31 + 0x10]
	0x0364E110 LDP X30, X21, [X31], #0x20
	0x0364E114 RET
	0x0364E118 STR X30, [X31 - 0x20]!
	0x0364E11C STP X20, X19, [X31 + 0x10]
	0x0364E120 MOV X19, X1
	0x0364E124 MOV X1, X31
	0x0364E128 MOV X20, X0
	0x0364E12C BL 0x33BDD8C
	0x0364E130 MOVN W8, 0x0
	0x0364E134 STR X19, [X20 + 0x10]
	0x0364E138 STR W8, [X20 + 0x18]
	0x0364E13C LDP X20, X19, [X31 + 0x10]
	0x0364E140 LDR X30, [X31], #0x20
	0x0364E144 RET
	0x0364E148 B 0x364E0B4
	0x0364E14C STP X30, X23, [X31 - 0x30]!
	0x0364E150 STP X22, X21, [X31 + 0x10]
	0x0364E154 STP X20, X19, [X31 + 0x20]
	0x0364E158 CBZ X1, 0x364E25C
	0x0364E15C MOV X20, X1
	0x0364E160 MOV X21, X0
	0x0364E164 MOV X0, X1
	0x0364E168 MOV X1, X31
	0x0364E16C MOV W19, W2
	0x0364E170 BL 0x339FCE4
	0x0364E174 CMP W0, 0x1
	0x0364E178 B.NE 0x364E290
	0x0364E17C TBNZ X19, 0x1F, 0x364E214
	0x0364E180 MOV X0, X20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xD93000
	009 Move X23, 0xAEC000
	010 Move W8, [X21+1520]
	011 Move X23, [X23+3840]
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xAEC000
	019 Move X0, [X0+3840]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1520], W8
	023 Move [X31+12], W31
	024 Move X1, [X19+16]
	025 Move W2, [X19+28]
	026 Move W0, W20
	027 Call DerSequenceReader.CheckTag, X0, X1, X2
	028 Move W2, [X19+24]
	029 Move W8, [X19+28]
	030 Move X0, [X19+16]
	031 Add X3, X31, 12
	032 Add W1, W8, 1
	033 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	034 Move W9, [X31+12]
	035 Move X8, [X23]
	036 Move X21, [X19+16]
	037 Move W22, [X19+28]
	038 Add W9, W0, W9
	039 Move X0, X8
	040 Add W23, W9, 1
	041 Call 0x1C17F10
	042 Move W1, W20
	043 Move X2, X21
	044 Move W3, W22
	045 Move W4, W23
	046 Move X24, X0
	047 Call DerSequenceReader..ctor, X0, X1, X2, X3, X4
	048 Move W8, [X19+28]
	049 Move X0, X24
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Add W8, W8, W23
	053 Move [X19+28], W8
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X24, [X31+16]
	057 Move X23, [X31+24]
	058 Move X30, [X31+64]
	059 Return X0

Method: System.Security.Cryptography.DerSequenceReader ReadSequence()

Disassembly:
	0x0364E218 LDR X0, [X0 + 0x760]
	0x0364E21C BL 0x1C16D08

ISIL:
	001 Move W1, 16
	002 Call DerSequenceReader.ReadCollectionWithTag, X0, X1
	003 Return X0

Method: System.Security.Cryptography.DerSequenceReader ReadSet()

Disassembly:
	0x0364E220 BL 0x1C16F10
	0x0364E224 MOV X19, X0

ISIL:
	001 Move W1, 17
	002 Call DerSequenceReader.ReadCollectionWithTag, X0, X1
	003 Return X0

Method: System.String ReadPrintableString()

Disassembly:
	0x0364E228 ADRP X0, 0xAB0000
	0x0364E22C LDR X0, [X0 + 0x130]
	0x0364E230 BL 0x1C16D08
	0x0364E234 MOV X20, X0
	0x0364E238 ADRP X0, 0xACD000
	0x0364E23C LDR X0, [X0 + 0x660]
	0x0364E240 BL 0x1C16D08
	0x0364E244 MOV X2, X0
	0x0364E248 MOV X0, X19
	0x0364E24C MOV X1, X20
	0x0364E250 MOV X3, X31
	0x0364E254 BL 0x3311888
	0x0364E258 B 0x364E2E0
	0x0364E25C ADRP X0, 0xAAA000
	0x0364E260 LDR X0, [X0 + 0x528]
	0x0364E264 BL 0x1C16D08
	0x0364E268 BL 0x1C16F10
	0x0364E26C MOV X19, X0
	0x0364E270 ADRP X0, 0xACD000
	0x0364E274 LDR X0, [X0 + 0x640]
	0x0364E278 BL 0x1C16D08
	0x0364E27C MOV X1, X0
	0x0364E280 MOV X0, X19
	0x0364E284 MOV X2, X31
	0x0364E288 BL 0x330E100
	0x0364E28C B 0x364E2E0
	0x0364E290 ADRP X0, 0xAAD000
	0x0364E294 LDR X0, [X0 + 0x578]
	0x0364E298 BL 0x1C16D08
	0x0364E29C BL 0x1C16F10
	0x0364E2A0 MOV X19, X0
	0x0364E2A4 ADRP X0, 0xACE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 19
	005 Move X19, X0
	006 Call DerSequenceReader.EatTag, X0, X1
	007 Move [X31+12], W31
	008 Move X0, [X19+16]
	009 Move W2, [X19+24]
	010 Move W1, [X19+28]
	011 Add X3, X31, 12
	012 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	013 Move W8, [X19+28]
	014 Move W9, [X31+12]
	015 Move W20, W0
	016 Move X0, X31
	017 Add W8, W9, W8
	018 Move [X19+28], W8
	019 Call Encoding.get_ASCII
	020 Compare X0, 0
	021 JumpIfEqual {37}
	022 Move X8, [X0]
	023 Move W2, [X19+28]
	024 Move X1, [X19+16]
	025 Move W3, W20
	026 Move X9, [X8+904]
	027 Move X4, [X8+912]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move W8, [X19+28]
	030 Add W8, W8, W20
	031 Move [X19+28], W8
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call DerSequenceReader.TrimTrailingNulls, X0
	036 Return X0
	037 Call 0x1C17F20

Method: System.String ReadIA5String()

Disassembly:
	0x0364E2A8 LDR X0, [X0 + 0x308]
	0x0364E2AC B 0x364E2CC
	0x0364E2B0 ADRP X0, 0xAAD000
	0x0364E2B4 LDR X0, [X0 + 0x578]
	0x0364E2B8 BL 0x1C16D08
	0x0364E2BC BL 0x1C16F10
	0x0364E2C0 MOV X19, X0
	0x0364E2C4 ADRP X0, 0xACD000
	0x0364E2C8 LDR X0, [X0 + 0x760]
	0x0364E2CC BL 0x1C16D08
	0x0364E2D0 MOV X1, X0
	0x0364E2D4 MOV X0, X19
	0x0364E2D8 MOV X2, X31
	0x0364E2DC BL 0x3314A68
	0x0364E2E0 ADRP X0, 0xAEE000
	0x0364E2E4 LDR X0, [X0 + 0x830]
	0x0364E2E8 BL 0x1C16D08
	0x0364E2EC MOV X1, X0
	0x0364E2F0 MOV X0, X19
	0x0364E2F4 BL 0x1C16DEC
	0x0364E2F8 MOV W0, W31
	0x0364E2FC RET
	0x0364E300 RET
	0x0364E304 STR X30, [X31 - 0x10]!
	0x0364E308 LDR X8, [X0 + 0x10]
	0x0364E30C CBZ X8, 0x364E320
	0x0364E310 LDR W1, [X0 + 0x18]
	0x0364E314 MOV X0, X8
	0x0364E318 LDR X30, [X31], #0x10
	0x0364E31C B 0x364E014
	0x0364E320 BL 0x1C16F20
	0x0364E324 B 0x364E304

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 22
	005 Move X19, X0
	006 Call DerSequenceReader.EatTag, X0, X1
	007 Move [X31+12], W31
	008 Move X0, [X19+16]
	009 Move W2, [X19+24]
	010 Move W1, [X19+28]
	011 Add X3, X31, 12
	012 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	013 Move W8, [X19+28]
	014 Move W9, [X31+12]
	015 Move W20, W0
	016 Move X0, X31
	017 Add W8, W9, W8
	018 Move [X19+28], W8
	019 Call Encoding.get_ASCII
	020 Compare X0, 0
	021 JumpIfEqual {37}
	022 Move X8, [X0]
	023 Move W2, [X19+28]
	024 Move X1, [X19+16]
	025 Move W3, W20
	026 Move X9, [X8+904]
	027 Move X4, [X8+912]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move W8, [X19+28]
	030 Add W8, W8, W20
	031 Move [X19+28], W8
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call DerSequenceReader.TrimTrailingNulls, X0
	036 Return X0
	037 Call 0x1C17F20

Method: System.String ReadT61String()

Disassembly:
	0x0364E328 STR X30, [X31 - 0x20]!
	0x0364E32C STP X20, X19, [X31 + 0x10]
	0x0364E330 MOV X19, X0
	0x0364E334 LDR X0, [X0 + 0x10]
	0x0364E338 CBZ X0, 0x364E370
	0x0364E33C LDR W20, [X19 + 0x18]
	0x0364E340 BL 0x364E06C
	0x0364E344 SUB W8, W0, 0x1
	0x0364E348 CMP W20, W8
	0x0364E34C B.GE 0x364E35C
	0x0364E350 LDR W9, [X19 + 0x18]
	0x0364E354 ADD W9, W9, 0x1
	0x0364E358 STR W9, [X19 + 0x18]
	0x0364E35C CMP W20, W8
	0x0364E360 LDP X20, X19, [X31 + 0x10]
	0x0364E364 CSET W0, LT
	0x0364E368 LDR X30, [X31], #0x20
	0x0364E36C RET
	0x0364E370 BL 0x1C16F20
	0x0364E374 MOVN W8, 0x0
	0x0364E378 STR W8, [X0 + 0x18]
	0x0364E37C RET
	0x0364E380 MOV X1, X31
	0x0364E384 B 0x33BDD8C
	0x0364E388 STP X30, X23, [X31 - 0x30]!
	0x0364E38C STP X22, X21, [X31 + 0x10]
	0x0364E390 STP X20, X19, [X31 + 0x20]
	0x0364E394 ADRP X23, 0xD92000
	0x0364E398 ADRP X22, 0xAEE000
	0x0364E39C LDRB W8, [X23 + 0x602]
	0x0364E3A0 LDR X22, [X22 + 0x7E0]
	0x0364E3A4 MOV X19, X2
	0x0364E3A8 MOV X21, X1
	0x0364E3AC MOV X20, X0
	0x0364E3B0 TBNZ X8, 0x0, 0x364E3C8
	0x0364E3B4 ADRP X0, 0xAEE000
	0x0364E3B8 LDR X0, [X0 + 0x7E0]
	0x0364E3BC BL 0x1C16CF4
	0x0364E3C0 MOVZ W8, 0x1
	0x0364E3C4 STRB W8, [X23 + 0x602]
	0x0364E3C8 MOV X0, X20
	0x0364E3CC MOV X1, X31
	0x0364E3D0 BL 0x33BDD8C
	0x0364E3D4 LDR X0, [X22]
	0x0364E3D8 BL 0x1C16F10
	0x0364E3DC MOV X1, X21
	0x0364E3E0 MOV X22, X0
	0x0364E3E4 BL 0x364DBB0
	0x0364E3E8 STR X22, [X20 + 0x10]
	0x0364E3EC MOV X0, X20
	0x0364E3F0 MOV X1, X19
	0x0364E3F4 LDP X20, X19, [X31 + 0x20]
	0x0364E3F8 LDP X22, X21, [X31 + 0x10]
	0x0364E3FC LDP X30, X23, [X31], #0x30
	0x0364E400 B 0x364E404
	0x0364E404 STR X30, [X31 - 0x30]!
	0x0364E408 STP X22, X21, [X31 + 0x10]
	0x0364E40C STP X20, X19, [X31 + 0x20]
	0x0364E410 ADRP X21, 0xD92000
	0x0364E414 LDRB W8, [X21 + 0x605]
	0x0364E418 MOV X20, X1
	0x0364E41C MOV X19, X0
	0x0364E420 TBNZ X8, 0x0, 0x364E438
	0x0364E424 ADRP X0, 0xAA5000
	0x0364E428 LDR X0, [X0 + 0x618]
	0x0364E42C BL 0x1C16CF4
	0x0364E430 MOVZ W8, 0x1
	0x0364E434 STRB W8, [X21 + 0x605]
	0x0364E438 CBZ X20, 0x364E4A0
	0x0364E43C MOV X0, X20
	0x0364E440 MOV X1, X31
	0x0364E444 BL 0x33A01F0
	0x0364E448 CBZ X0, 0x364E48C
	0x0364E44C ADRP X22, 0xAA5000
	0x0364E450 LDR X22, [X22 + 0x618]
	0x0364E454 MOV X20, X0
	0x0364E458 LDR X21, [X22]
	0x0364E45C MOV X1, X21
	0x0364E460 BL 0x1C16E00
	0x0364E464 CBZ X0, 0x364E4E8
	0x0364E468 STR X0, [X19 + 0x18]
	0x0364E46C LDR X19, [X22]
	0x0364E470 MOV X0, X20
	0x0364E474 MOV X1, X19
	0x0364E478 BL 0x1C16E00
	0x0364E47C CBNZ X0, 0x364E490
	0x0364E480 MOV X0, X20
	0x0364E484 MOV X1, X19
	0x0364E488 BL 0x1C171E0
	0x0364E48C STR X31, [X19 + 0x18]
	0x0364E490 LDP X20, X19, [X31 + 0x20]
	0x0364E494 LDP X22, X21, [X31 + 0x10]
	0x0364E498 LDR X30, [X31], #0x30
	0x0364E49C RET
	0x0364E4A0 ADRP X0, 0xAAA000
	0x0364E4A4 LDR X0, [X0 + 0x528]
	0x0364E4A8 BL 0x1C16D08
	0x0364E4AC BL 0x1C16F10
	0x0364E4B0 MOV X19, X0
	0x0364E4B4 ADRP X0, 0xAEE000
	0x0364E4B8 LDR X0, [X0 + 0x838]
	0x0364E4BC BL 0x1C16D08
	0x0364E4C0 MOV X1, X0
	0x0364E4C4 MOV X0, X19
	0x0364E4C8 MOV X2, X31
	0x0364E4CC BL 0x330E100
	0x0364E4D0 ADRP X0, 0xAEE000
	0x0364E4D4 LDR X0, [X0 + 0x840]
	0x0364E4D8 BL 0x1C16D08
	0x0364E4DC MOV X1, X0
	0x0364E4E0 MOV X0, X19
	0x0364E4E4 BL 0x1C16DEC
	0x0364E4E8 MOV X0, X20
	0x0364E4EC MOV X1, X21
	0x0364E4F0 BL 0x1C171E0
	0x0364E4F4 STP X30, X21, [X31 - 0x20]!
	0x0364E4F8 STP X20, X19, [X31 + 0x10]
	0x0364E4FC MOV X20, X1
	0x0364E500 MOV X1, X31
	0x0364E504 MOV X19, X2
	0x0364E508 MOV X21, X0
	0x0364E50C BL 0x33BDD8C
	0x0364E510 MOV X0, X21
	0x0364E514 MOV X1, X20
	0x0364E518 BL 0x364E530
	0x0364E51C MOV X1, X19
	0x0364E520 LDP X20, X19, [X31 + 0x10]
	0x0364E524 MOV X0, X21
	0x0364E528 LDP X30, X21, [X31], #0x20
	0x0364E52C B 0x364E404
	0x0364E530 STP X30, X21, [X31 - 0x20]!
	0x0364E534 STP X20, X19, [X31 + 0x10]
	0x0364E538 ADRP X21, 0xD92000
	0x0364E53C LDRB W8, [X21 + 0x604]
	0x0364E540 MOV X20, X1
	0x0364E544 MOV X19, X0
	0x0364E548 TBNZ X8, 0x0, 0x364E560
	0x0364E54C ADRP X0, 0xAEE000
	0x0364E550 LDR X0, [X0 + 0x7E0]
	0x0364E554 BL 0x1C16CF4
	0x0364E558 MOVZ W8, 0x1
	0x0364E55C STRB W8, [X21 + 0x604]
	0x0364E560 CBZ X20, 0x364E598
	0x0364E564 ADRP X8, 0xAEE000
	0x0364E568 LDR X8, [X8 + 0x7E0]
	0x0364E56C LDR X0, [X8]
	0x0364E570 BL 0x1C16F10
	0x0364E574 MOV X1, X31
	0x0364E578 MOV X21, X0
	0x0364E57C BL 0x33BDD8C
	0x0364E580 LDR V0, [X20 + 0x1]
	0x0364E584 STR V0, [X21 + 0x1]
	0x0364E588 LDR W8, [X20 + 0x20]
	0x0364E58C STR W8, [X21 + 0x20]
	0x0364E590 STR X21, [X19 + 0x10]
	0x0364E594 B 0x364E59C
	0x0364E598 STR X31, [X19 + 0x10]
	0x0364E59C LDP X20, X19, [X31 + 0x10]
	0x0364E5A0 LDP X30, X21, [X31], #0x20
	0x0364E5A4 RET
	0x0364E5A8 STR X30, [X31 - 0x30]!
	0x0364E5AC STP X22, X21, [X31 + 0x10]
	0x0364E5B0 STP X20, X19, [X31 + 0x20]
	0x0364E5B4 ADRP X21, 0xD92000
	0x0364E5B8 LDRB W8, [X21 + 0x603]
	0x0364E5BC MOV X19, X1
	0x0364E5C0 MOV X20, X0
	0x0364E5C4 TBNZ X8, 0x0, 0x364E5DC
	0x0364E5C8 ADRP X0, 0xAEE000
	0x0364E5CC LDR X0, [X0 + 0x7E0]
	0x0364E5D0 BL 0x1C16CF4
	0x0364E5D4 MOVZ W8, 0x1
	0x0364E5D8 STRB W8, [X21 + 0x603]
	0x0364E5DC MOV X0, X20
	0x0364E5E0 MOV X1, X31
	0x0364E5E4 BL 0x33BDD8C
	0x0364E5E8 CBZ X19, 0x364E634
	0x0364E5EC LDR X21, [X19 + 0x10]
	0x0364E5F0 CBZ X21, 0x364E61C
	0x0364E5F4 ADRP X8, 0xAEE000
	0x0364E5F8 LDR X8, [X8 + 0x7E0]
	0x0364E5FC LDR X0, [X8]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xD93000
	011 Move X25, 0xAEF000
	012 Move W8, [X20+1521]
	013 Move X25, [X25+1912]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0xAEC000
	020 Move X0, [X0+3840]
	021 Call 0x1C17CF4
	022 Move X0, 0xAEF000
	023 Move X0, [X0+1920]
	024 Call 0x1C17CF4
	025 Move X0, 0xAEF000
	026 Move X0, [X0+1928]
	027 Call 0x1C17CF4
	028 Move X0, 0xAEF000
	029 Move X0, [X0+1936]
	030 Call 0x1C17CF4
	031 Move X0, 0xAEF000
	032 Move X0, [X0+1944]
	033 Call 0x1C17CF4
	034 Move X0, 0xAEF000
	035 Move X0, [X0+1912]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+1521], W8
	039 Move X24, 0xAEC000
	040 Move X24, [X24+3840]
	041 Move W1, 20
	042 Move X0, X19
	043 Call DerSequenceReader.EatTag, X0, X1
	044 Move [X31+12], W31
	045 Move X0, [X19+16]
	046 Move W2, [X19+24]
	047 Move W1, [X19+28]
	048 Add X3, X31, 12
	049 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	050 Move W8, [X19+28]
	051 Move W9, [X31+12]
	052 Move W20, W0
	053 Add W8, W9, W8
	054 Move [X19+28], W8
	055 Move X8, [X25]
	056 Move W9, [X8+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {62}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move X8, [X25]
	062 Move X9, [X8+184]
	063 Move X10, [X24]
	064 Move X26, 0xAEF000
	065 Move X22, [X9+8]
	066 Move X9, [X10+184]
	067 Move X26, [X26+1928]
	068 Add X21, X9, 8
	069 Compare X22, 0
	070 JumpIfNotEqual {93}
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {77}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X8, [X25]
	077 Move X9, 0xAEF000
	078 Move X8, [X8+184]
	079 Move X9, [X9+1920]
	080 Move X23, [X8]
	081 Move X0, [X9]
	082 Call 0x1C17F10
	083 Move X8, 0xAEF000
	084 Move X8, [X8+1936]
	085 Move X1, X23
	086 Move X3, X31
	087 Move X22, X0
	088 Move X2, [X8]
	089 Call Func`1<Object>..ctor, X0, X1, X2
	090 Move X8, [X25]
	091 Move X8, [X8+184]
	092 Move [X8+8], X22
	093 Move X2, [X26]
	094 Move X0, X21
	095 Move X1, X22
	096 Call 0x2213A40, X0, X1
	097 Move X8, [X25]
	098 Move X22, X0
	099 Move W9, [X8+224]
	100 Compare W9, 0
	101 JumpIfNotEqual {105}
	102 Move X0, X8
	103 Call 0x1C17DFC
	104 Move X8, [X25]
	105 Move X9, [X8+184]
	106 Move X10, [X24]
	107 Move X23, [X9+16]
	108 Move X9, [X10+184]
	109 Add X21, X9, 16
	110 Compare X23, 0
	111 JumpIfNotEqual {134}
	112 Move W9, [X8+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {118}
	115 Move X0, X8
	116 Call 0x1C17DFC
	117 Move X8, [X25]
	118 Move X9, 0xAEF000
	119 Move X8, [X8+184]
	120 Move X9, [X9+1920]
	121 Move X24, [X8]
	122 Move X0, [X9]
	123 Call 0x1C17F10
	124 Move X8, 0xAEF000
	125 Move X8, [X8+1944]
	126 Move X1, X24
	127 Move X3, X31
	128 Move X23, X0
	129 Move X2, [X8]
	130 Call Func`1<Object>..ctor, X0, X1, X2
	131 Move X8, [X25]
	132 Move X8, [X8+184]
	133 Move [X8+16], X23
	134 Move X2, [X26]
	135 Move X0, X21
	136 Move X1, X23
	137 Call 0x2213A40, X0, X1
	138 Move X21, X0
	139 Compare X22, 0
	140 JumpIfEqual {163}
	141 Move X8, [X22]
	142 Move X1, [X19+16]
	143 Move W2, [X19+28]
	144 Move X9, [X8+904]
	145 Move X4, [X8+912]
	146 Move X0, X22
	147 Move W3, W20
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move W8, [X19+28]
	150 Move X22, [X31+48]
	151 Move X21, [X31+56]
	152 Move X24, [X31+32]
	153 Move X23, [X31+40]
	154 Move X26, [X31+16]
	155 Move X25, [X31+24]
	156 Add W8, W8, W20
	157 Move [X19+28], W8
	158 Move X20, [X31+64]
	159 Move X19, [X31+72]
	160 Move X30, [X31+80]
	161 Call DerSequenceReader.TrimTrailingNulls, X0
	162 Return X0
	163 Call 0x1C17F20
	164 Move X22, X0
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move X0, X22
	167 Call 0x3EB2AD0
	168 Move X22, X0
	169 Move X0, 0xAE0000
	170 Move X0, [X0+3048]
	171 Call 0x1C17D08
	172 Move X8, [X22]
	173 Move X1, [X8]
	174 Call 0x1C18270
	175 Move TEMP, X0
	176 And TEMP, TEMP, 1
	177 Compare TEMP, 1
	178 JumpIfNotEqual {190}
	179 Call 0x3EB2AE0
	180 Compare X21, 0
	181 JumpIfEqual {198}
	182 Move X8, [X21]
	183 Move W2, [X19+28]
	184 Move X1, [X19+16]
	185 Move X0, X21
	186 Move X9, [X8+904]
	187 Move X4, [X8+912]
	188 Move W3, W20
	189 NotImplemented "Instruction BLR not yet implemented."
	190 Move W0, 8
	191 Call 0x3EB2AF0
	192 Move X8, [X22]
	193 Move [X0], X8
	194 Move X1, 0x867000
	195 Add X1, X1, 3672
	196 Move X2, X31
	197 Call 0x3EB2B00
	198 Call 0x1C17F20
	199 Move X22, X0
	200 Call 0x3EB2AE0
	201 Move X0, X22
	202 Call 0x1D2D690
	203 Call 0x1991590

Method: System.DateTime ReadX509Date()

Disassembly:
	0x0364E600 BL 0x1C16F10
	0x0364E604 MOV X1, X21
	0x0364E608 MOV X22, X0
	0x0364E60C BL 0x364DC68
	0x0364E610 MOV X0, X20
	0x0364E614 MOV X1, X22
	0x0364E618 BL 0x364E530
	0x0364E61C LDR X1, [X19 + 0x18]
	0x0364E620 MOV X0, X20
	0x0364E624 LDP X20, X19, [X31 + 0x20]
	0x0364E628 LDP X22, X21, [X31 + 0x10]
	0x0364E62C LDR X30, [X31], #0x30
	0x0364E630 B 0x364E404
	0x0364E634 ADRP X0, 0xAAA000
	0x0364E638 LDR X0, [X0 + 0x528]
	0x0364E63C BL 0x1C16D08
	0x0364E640 BL 0x1C16F10
	0x0364E644 MOV X19, X0
	0x0364E648 ADRP X0, 0xAEE000
	0x0364E64C LDR X0, [X0 + 0x848]
	0x0364E650 BL 0x1C16D08
	0x0364E654 MOV X1, X0
	0x0364E658 MOV X0, X19
	0x0364E65C MOV X2, X31
	0x0364E660 BL 0x330E100
	0x0364E664 ADRP X0, 0xAEE000
	0x0364E668 LDR X0, [X0 + 0x850]
	0x0364E66C BL 0x1C16D08
	0x0364E670 MOV X1, X0
	0x0364E674 MOV X0, X19
	0x0364E678 BL 0x1C16DEC
	0x0364E67C LDR X0, [X0 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call DerSequenceReader.PeekTag, X0
	005 And W8, W0, 255
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call DerSequenceReader.ReadGeneralizedTime, X0
	015 Return X0
	016 Move X0, 0xAD3000
	017 Move X0, [X0+3296]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xAEC000
	022 Move X0, [X0+3888]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call CryptographicException..ctor, X0, X1
	028 Move X0, 0xAEF000
	029 Move X0, [X0+1952]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC

Method: System.DateTime ReadUtcTime()

Disassembly:
	0x0364E680 RET
	0x0364E684 LDR X0, [X0 + 0x18]
	0x0364E688 RET
	0x0364E68C STR X30, [X31 - 0x30]!
	0x0364E690 STP X22, X21, [X31 + 0x10]
	0x0364E694 STP X20, X19, [X31 + 0x20]
	0x0364E698 ADRP X21, 0xD92000
	0x0364E69C LDRB W8, [X21 + 0x606]
	0x0364E6A0 MOV X19, X1
	0x0364E6A4 MOV X20, X0
	0x0364E6A8 TBNZ X8, 0x0, 0x364E6C0
	0x0364E6AC ADRP X0, 0xAEE000
	0x0364E6B0 LDR X0, [X0 + 0x7E0]
	0x0364E6B4 BL 0x1C16CF4
	0x0364E6B8 MOVZ W8, 0x1
	0x0364E6BC STRB W8, [X21 + 0x606]
	0x0364E6C0 CBZ X19, 0x364E734
	0x0364E6C4 LDR X21, [X19 + 0x10]
	0x0364E6C8 CBZ X21, 0x364E6F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD93000
	006 Move X21, 0xAEF000
	007 Move W8, [X20+1522]
	008 Move X21, [X21+1960]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAEF000
	015 Move X0, [X0+1960]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1522], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 23
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call DerSequenceReader.ReadTime, X0, X1, X2
	027 Return X0

Method: System.DateTime ReadGeneralizedTime()

Disassembly:
	0x0364E6CC ADRP X8, 0xAEE000
	0x0364E6D0 LDR X8, [X8 + 0x7E0]
	0x0364E6D4 LDR X0, [X8]
	0x0364E6D8 BL 0x1C16F10
	0x0364E6DC MOV X1, X21
	0x0364E6E0 MOV X22, X0
	0x0364E6E4 BL 0x364DC68
	0x0364E6E8 MOV X0, X20
	0x0364E6EC MOV X1, X22
	0x0364E6F0 BL 0x364E530
	0x0364E6F4 B 0x364E71C
	0x0364E6F8 ADRP X21, 0xD92000
	0x0364E6FC LDRB W8, [X21 + 0x604]
	0x0364E700 TBNZ X8, 0x0, 0x364E718
	0x0364E704 ADRP X0, 0xAEE000
	0x0364E708 LDR X0, [X0 + 0x7E0]
	0x0364E70C BL 0x1C16CF4
	0x0364E710 MOVZ W8, 0x1
	0x0364E714 STRB W8, [X21 + 0x604]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD93000
	006 Move X21, 0xAEF000
	007 Move W8, [X20+1523]
	008 Move X21, [X21+1968]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAEF000
	015 Move X0, [X0+1968]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1523], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 24
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]

Method: System.String ReadBMPString()

Disassembly:
	0x0364E958 ADRP X0, 0xAD5000
	0x0364E95C LDR X0, [X0 + 0x5C8]
	0x0364E960 BL 0x1C16CF4
	0x0364E964 ADRP X0, 0xAD5000
	0x0364E968 LDR X0, [X0 + 0x650]
	0x0364E96C BL 0x1C16CF4
	0x0364E970 ADRP X0, 0xAD5000
	0x0364E974 LDR X0, [X0 + 0x770]
	0x0364E978 BL 0x1C16CF4
	0x0364E97C ADRP X0, 0xAD3000
	0x0364E980 LDR X0, [X0 + 0x228]
	0x0364E984 BL 0x1C16CF4
	0x0364E988 MOVZ W8, 0x1
	0x0364E98C STRB W8, [X21 + 0x608]
	0x0364E990 LDR X8, [X19 + 0x10]
	0x0364E994 CBZ X8, 0x364EAD0
	0x0364E998 ADRP X9, 0xAD3000
	0x0364E99C LDR X9, [X9 + 0x228]
	0x0364E9A0 LDR X21, [X8 + 0x10]
	0x0364E9A4 MOV X2, X31
	0x0364E9A8 LDR X1, [X9]
	0x0364E9AC MOV X0, X21
	0x0364E9B0 BL 0x321BA08
	0x0364E9B4 TBZ X0, 0x0, 0x364E9CC
	0x0364E9B8 AND W1, W20, 0x1
	0x0364E9BC MOV X0, X19
	0x0364E9C0 LDP X20, X19, [X31 + 0x10]
	0x0364E9C4 LDP X30, X21, [X31], #0x20
	0x0364E9C8 B 0x364EAD4
	0x0364E9CC ADRP X8, 0xAD5000
	0x0364E9D0 LDR X8, [X8 + 0x5C8]
	0x0364E9D4 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 30
	005 Move X19, X0
	006 Call DerSequenceReader.EatTag, X0, X1
	007 Move [X31+12], W31
	008 Move X0, [X19+16]
	009 Move W2, [X19+24]
	010 Move W1, [X19+28]
	011 Add X3, X31, 12
	012 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	013 Move W8, [X19+28]
	014 Move W9, [X31+12]
	015 Move W20, W0
	016 Move X0, X31
	017 Add W8, W9, W8
	018 Move [X19+28], W8
	019 Call Encoding.get_BigEndianUnicode
	020 Compare X0, 0
	021 JumpIfEqual {37}
	022 Move X8, [X0]
	023 Move W2, [X19+28]
	024 Move X1, [X19+16]
	025 Move W3, W20
	026 Move X9, [X8+904]
	027 Move X4, [X8+912]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move W8, [X19+28]
	030 Add W8, W8, W20
	031 Move [X19+28], W8
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call DerSequenceReader.TrimTrailingNulls, X0
	036 Return X0
	037 Call 0x1C17F20

Method: System.String TrimTrailingNulls(System.String value)

Disassembly:
	0x0364E044 LDR X0, [X20 + 0x10]
	0x0364E048 CBZ X0, 0x364E068
	0x0364E04C ADRP X8, 0xAEE000
	0x0364E050 LDR X8, [X8 + 0x820]
	0x0364E054 MOV W1, W19
	0x0364E058 LDP X20, X19, [X31 + 0x10]
	0x0364E05C LDR X2, [X8]
	0x0364E060 LDP X30, X21, [X31], #0x20
	0x0364E064 B 0x301BCCC
	0x0364E068 BL 0x1C16F20
	0x0364E06C STR X30, [X31 - 0x20]!
	0x0364E070 STP X20, X19, [X31 + 0x10]
	0x0364E074 ADRP X20, 0xD92000
	0x0364E078 LDRB W8, [X20 + 0x600]
	0x0364E07C MOV X19, X0
	0x0364E080 TBNZ X8, 0x0, 0x364E098
	0x0364E084 ADRP X0, 0xAEE000
	0x0364E088 LDR X0, [X0 + 0x818]
	0x0364E08C BL 0x1C16CF4
	0x0364E090 MOVZ W8, 0x1
	0x0364E094 STRB W8, [X20 + 0x600]
	0x0364E098 LDR X8, [X19 + 0x10]
	0x0364E09C CBZ X8, 0x364E0B0
	0x0364E0A0 LDR W0, [X8 + 0x18]
	0x0364E0A4 LDP X20, X19, [X31 + 0x10]
	0x0364E0A8 LDR X30, [X31], #0x20
	0x0364E0AC RET
	0x0364E0B0 BL 0x1C16F20
	0x0364E0B4 STP X30, X21, [X31 - 0x20]!
	0x0364E0B8 STP X20, X19, [X31 + 0x10]
	0x0364E0BC ADRP X20, 0xD92000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Compare X0, 0
	006 JumpIfEqual {19}
	007 Move W20, [X19+16]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Subtract W20, W20, 1
	010 Move X0, X19
	011 Move W1, W20
	012 Move X2, X31
	013 Call String.get_Chars, X0, X1
	014 And W31, W0, 0xFFFF
	015 Add W2, W20, 1
	016 Move W2, W31
	017 Move W8, [X19+16]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X0, X19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W1, W31
	028 Move X3, X31
	029 Move X30, [X31+32]
	030 Call String.Substring, X0, X1, X2
	031 Return X0

Method: System.DateTime ReadTime(System.Security.Cryptography.DerSequenceReader/DerTag timeTag, System.String formatString)

Disassembly:
	0x0364E718 STR X31, [X20 + 0x10]
	0x0364E71C LDR X1, [X19 + 0x18]
	0x0364E720 MOV X0, X20
	0x0364E724 LDP X20, X19, [X31 + 0x20]
	0x0364E728 LDP X22, X21, [X31 + 0x10]
	0x0364E72C LDR X30, [X31], #0x30
	0x0364E730 B 0x364E404
	0x0364E734 ADRP X0, 0xAAA000
	0x0364E738 LDR X0, [X0 + 0x528]
	0x0364E73C BL 0x1C16D08
	0x0364E740 BL 0x1C16F10
	0x0364E744 MOV X19, X0
	0x0364E748 ADRP X0, 0xAEE000
	0x0364E74C LDR X0, [X0 + 0x848]
	0x0364E750 BL 0x1C16D08
	0x0364E754 MOV X1, X0
	0x0364E758 MOV X0, X19
	0x0364E75C MOV X2, X31
	0x0364E760 BL 0x330E100
	0x0364E764 ADRP X0, 0xAEE000
	0x0364E768 LDR X0, [X0 + 0x858]
	0x0364E76C BL 0x1C16D08
	0x0364E770 MOV X1, X0
	0x0364E774 MOV X0, X19
	0x0364E778 BL 0x1C16DEC
	0x0364E77C STP X30, X21, [X31 - 0x20]!
	0x0364E780 STP X20, X19, [X31 + 0x10]
	0x0364E784 ADRP X21, 0xD92000
	0x0364E788 LDRB W8, [X21 + 0x607]
	0x0364E78C MOV W19, W1
	0x0364E790 MOV X20, X0
	0x0364E794 TBNZ X8, 0x0, 0x364E7AC
	0x0364E798 ADRP X0, 0xAA7000
	0x0364E79C LDR X0, [X0 + 0x278]
	0x0364E7A0 BL 0x1C16CF4
	0x0364E7A4 MOVZ W8, 0x1
	0x0364E7A8 STRB W8, [X21 + 0x607]
	0x0364E7AC LDR X8, [X20 + 0x18]
	0x0364E7B0 CBZ X8, 0x364E7D8
	0x0364E7B4 LDR X8, [X20 + 0x10]
	0x0364E7B8 CBZ X8, 0x364E7F8
	0x0364E7BC LDR X8, [X20]
	0x0364E7C0 AND W1, W19, 0x1
	0x0364E7C4 MOV X0, X20
	0x0364E7C8 LDP X20, X19, [X31 + 0x10]
	0x0364E7CC LDP X3, X2, [X8 + 0x198]
	0x0364E7D0 LDP X30, X21, [X31], #0x20
	0x0364E7D4 BR X3
	0x0364E7D8 ADRP X8, 0xAA7000
	0x0364E7DC LDR X8, [X8 + 0x278]
	0x0364E7E0 LDP X20, X19, [X31 + 0x10]
	0x0364E7E4 LDR X8, [X8]
	0x0364E7E8 LDR X8, [X8 + 0xB8]
	0x0364E7EC LDR X0, [X8]
	0x0364E7F0 LDP X30, X21, [X31], #0x20
	0x0364E7F4 RET
	0x0364E7F8 MOV X0, X20
	0x0364E7FC LDP X20, X19, [X31 + 0x10]
	0x0364E800 MOV W1, W31
	0x0364E804 LDP X30, X21, [X31], #0x20
	0x0364E808 B 0x364E80C
	0x0364E80C STP X30, X23, [X31 - 0x30]!
	0x0364E810 STP X22, X21, [X31 + 0x10]
	0x0364E814 STP X20, X19, [X31 + 0x20]
	0x0364E818 ADRP X20, 0xD92000
	0x0364E81C ADRP X21, 0xAA5000
	0x0364E820 LDRB W8, [X20 + 0x609]
	0x0364E824 LDR X21, [X21 + 0x8F0]
	0x0364E828 MOV X19, X0
	0x0364E82C TBNZ X8, 0x0, 0x364E85C
	0x0364E830 ADRP X0, 0xAA5000
	0x0364E834 LDR X0, [X0 + 0x8F0]
	0x0364E838 BL 0x1C16CF4
	0x0364E83C ADRP X0, 0xAA5000
	0x0364E840 LDR X0, [X0 + 0xDD8]
	0x0364E844 BL 0x1C16CF4
	0x0364E848 ADRP X0, 0xAD8000
	0x0364E84C LDR X0, [X0 + 0x350]
	0x0364E850 BL 0x1C16CF4
	0x0364E854 MOVZ W8, 0x1
	0x0364E858 STRB W8, [X20 + 0x609]
	0x0364E85C LDR X0, [X21]
	0x0364E860 BL 0x1C16F10
	0x0364E864 MOV X1, X31
	0x0364E868 MOV X20, X0
	0x0364E86C BL 0x3231AC4
	0x0364E870 LDR X8, [X19 + 0x18]
	0x0364E874 CBZ X8, 0x364E8FC
	0x0364E878 ADRP X22, 0xAD8000
	0x0364E87C ADRP X23, 0xAA5000
	0x0364E880 LDR X22, [X22 + 0x350]
	0x0364E884 LDR X23, [X23 + 0xDD8]
	0x0364E888 MOV X21, X31
	0x0364E88C LDR W9, [X8 + 0x18]
	0x0364E890 CMP X21, W9, SXTW
	0x0364E894 B.GE 0x364E900
	0x0364E898 CMP X21, X9
	0x0364E89C B.CS 0x364E920
	0x0364E8A0 LDR X1, [X22]
	0x0364E8A4 ADD X8, X8, X21
	0x0364E8A8 ADD X0, X8, 0x20
	0x0364E8AC MOV X2, X31
	0x0364E8B0 BL 0x3319C4C
	0x0364E8B4 CBZ X20, 0x364E8FC
	0x0364E8B8 MOV X1, X0
	0x0364E8BC MOV X0, X20
	0x0364E8C0 MOV X2, X31
	0x0364E8C4 BL 0x32333E0
	0x0364E8C8 LDR X8, [X19 + 0x18]
	0x0364E8CC CBZ X8, 0x364E8FC
	0x0364E8D0 LDR W9, [X8 + 0x18]
	0x0364E8D4 SUB W9, W9, 0x1
	0x0364E8D8 CMP X21, X9
	0x0364E8DC B.EQ 0x364E8F4
	0x0364E8E0 LDR X1, [X23]
	0x0364E8E4 MOV X0, X20
	0x0364E8E8 MOV X2, X31
	0x0364E8EC BL 0x32333E0
	0x0364E8F0 LDR X8, [X19 + 0x18]
	0x0364E8F4 ADD X21, X21, 0x1
	0x0364E8F8 CBNZ X8, 0x364E88C
	0x0364E8FC BL 0x1C16F20
	0x0364E900 CBZ X20, 0x364E8FC
	0x0364E904 LDR X8, [X20]
	0x0364E908 MOV X0, X20
	0x0364E90C LDP X20, X19, [X31 + 0x20]
	0x0364E910 LDP X22, X21, [X31 + 0x10]
	0x0364E914 LDP X2, X1, [X8 + 0x168]
	0x0364E918 LDP X30, X23, [X31], #0x30
	0x0364E91C BR X2
	0x0364E920 BL 0x1C16F28
	0x0364E924 STP X30, X21, [X31 - 0x20]!
	0x0364E928 STP X20, X19, [X31 + 0x10]
	0x0364E92C ADRP X21, 0xD92000
	0x0364E930 LDRB W8, [X21 + 0x608]
	0x0364E934 MOV W20, W1
	0x0364E938 MOV X19, X0
	0x0364E93C TBNZ X8, 0x0, 0x364E990
	0x0364E940 ADRP X0, 0xAEB000
	0x0364E944 LDR X0, [X0 + 0x8C0]
	0x0364E948 BL 0x1C16CF4
	0x0364E94C ADRP X0, 0xAEB000
	0x0364E950 LDR X0, [X0 + 0x8D8]
	0x0364E954 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X22, 0xD93000
	012 Move W8, [X22+1524]
	013 Move X19, X2
	014 Move W21, W1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0xAA7000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move X0, 0xAEC000
	024 Move X0, [X0+3840]
	025 Call 0x1C17CF4
	026 Move X0, 0xAEF000
	027 Move X0, [X0+1976]
	028 Call 0x1C17CF4
	029 Move X0, 0xAEF000
	030 Move X0, [X0+1984]
	031 Call 0x1C17CF4
	032 Move X0, 0xAEF000
	033 Move X0, [X0+1992]
	034 Call 0x1C17CF4
	035 Move X0, 0xAEF000
	036 Move X0, [X0+1912]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X22+1524], W8
	040 Move X0, X20
	041 Move W1, W21
	042 Move [X31+8], X31
	043 Call DerSequenceReader.EatTag, X0, X1
	044 Move [X31+28], W31
	045 Move X0, [X20+16]
	046 Move W2, [X20+24]
	047 Move W1, [X20+28]
	048 Add X3, X31, 28
	049 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	050 Move W8, [X20+28]
	051 Move W9, [X31+28]
	052 Move W21, W0
	053 Move X0, X31
	054 Add W8, W9, W8
	055 Move [X20+28], W8
	056 Call Encoding.get_ASCII
	057 Compare X0, 0
	058 JumpIfEqual {147}
	059 Move X8, [X0]
	060 Move W2, [X20+28]
	061 Move X1, [X20+16]
	062 Move X24, 0xAEF000
	063 Move X9, [X8+904]
	064 Move X4, [X8+912]
	065 Move X22, 0xAEC000
	066 Move X24, [X24+1912]
	067 Move X22, [X22+3840]
	068 Move W3, W21
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move W8, [X20+28]
	071 Add W8, W8, W21
	072 Move [X20+28], W8
	073 Move X8, [X24]
	074 Move X20, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {81}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X8, [X24]
	081 Move X9, [X8+184]
	082 Move X10, [X22]
	083 Move X26, 0xAEF000
	084 Move X25, 0xAA7000
	085 Move X22, [X9+24]
	086 Move X21, [X10+184]
	087 Move X26, [X26+1984]
	088 Move X25, [X25+2544]
	089 Compare X22, 0
	090 JumpIfNotEqual {113}
	091 Move W9, [X8+224]
	092 Compare W9, 0
	093 JumpIfNotEqual {97}
	094 Move X0, X8
	095 Call 0x1C17DFC
	096 Move X8, [X24]
	097 Move X9, 0xAEF000
	098 Move X8, [X8+184]
	099 Move X9, [X9+1976]
	100 Move X23, [X8]
	101 Move X0, [X9]
	102 Call 0x1C17F10
	103 Move X8, 0xAEF000
	104 Move X8, [X8+1992]
	105 Move X1, X23
	106 Move X3, X31
	107 Move X22, X0
	108 Move X2, [X8]
	109 Call Func`1<Object>..ctor, X0, X1, X2
	110 Move X8, [X24]
	111 Move X8, [X8+184]
	112 Move [X8+24], X22
	113 Move X2, [X26]
	114 Move X0, X21
	115 Move X1, X22
	116 Call 0x2213A40, X0, X1
	117 Move X8, [X25]
	118 Move X21, X0
	119 Move W9, [X8+224]
	120 Compare W9, 0
	121 JumpIfNotEqual {124}
	122 Move X0, X8
	123 Call 0x1C17DFC
	124 Add X4, X31, 8
	125 Move W3, 80
	126 Move X0, X20
	127 Move X1, X19
	128 Move X2, X21
	129 Move X5, X31
	130 Call DateTime.TryParseExact, X0, X1, X2, X3, X4
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {148}
	135 Move X0, [X31+8]
	136 Move X30, [X31+16]
	137 Move X20, [X31+80]
	138 Move X19, [X31+88]
	139 Move X22, [X31+64]
	140 Move X21, [X31+72]
	141 Move X24, [X31+48]
	142 Move X23, [X31+56]
	143 Move X26, [X31+32]
	144 Move X25, [X31+40]
	145 Add X31, X31, 96
	146 Return X0
	147 Call 0x1C17F20
	148 Move X0, 0xAD3000
	149 Move X0, [X0+3296]
	150 Call 0x1C17D08
	151 Call 0x1C17F10
	152 Move X19, X0
	153 Move X0, 0xAEC000
	154 Move X0, [X0+3888]
	155 Call 0x1C17D08
	156 Move X1, X0
	157 Move X0, X19
	158 Move X2, X31
	159 Call CryptographicException..ctor, X0, X1
	160 Move X0, 0xAEF000
	161 Move X0, [X0+2000]
	162 Call 0x1C17D08
	163 Move X1, X0
	164 Move X0, X19
	165 Call 0x1C17DEC

Method: System.Byte[] ReadContentAsBytes()

Disassembly:
	0x0364DAE8 ADRP X20, 0xAA8000
	0x0364DAEC LDRB W8, [X19 + 0x5F9]
	0x0364DAF0 LDR X20, [X20 + 0xC48]
	0x0364DAF4 TBNZ X8, 0x0, 0x364DB18
	0x0364DAF8 ADRP X0, 0xAA8000
	0x0364DAFC LDR X0, [X0 + 0xC48]
	0x0364DB00 BL 0x1C16CF4
	0x0364DB04 ADRP X0, 0xADB000
	0x0364DB08 LDR X0, [X0 + 0x328]
	0x0364DB0C BL 0x1C16CF4
	0x0364DB10 MOVZ W8, 0x1
	0x0364DB14 STRB W8, [X19 + 0x5F9]
	0x0364DB18 LDR X0, [X20]
	0x0364DB1C LDR W8, [X0 + 0xE0]
	0x0364DB20 CBNZ W8, 0x364DB28
	0x0364DB24 BL 0x1C16DFC
	0x0364DB28 MOV X0, X31
	0x0364DB2C BL 0x3338524
	0x0364DB30 CBZ X0, 0x364DB9C
	0x0364DB34 LDR X8, [X0]
	0x0364DB38 LDR X9, [X8 + 0x238]
	0x0364DB3C LDR X1, [X8 + 0x240]
	0x0364DB40 BLR X9
	0x0364DB44 CBZ X0, 0x364DB9C
	0x0364DB48 MOV X1, X31
	0x0364DB4C BL 0x3324F44
	0x0364DB50 CBZ X0, 0x364DB9C
	0x0364DB54 ADRP X8, 0xADB000
	0x0364DB58 LDR X8, [X8 + 0x328]
	0x0364DB5C MOV X19, X0
	0x0364DB60 LDR X1, [X8]
	0x0364DB64 LDR X8, [X0]
	0x0364DB68 CMP X8, X1
	0x0364DB6C B.NE 0x364DBA0
	0x0364DB70 LDR X0, [X19 + 0x78]
	0x0364DB74 CBZ X0, 0x364DB9C
	0x0364DB78 LDR X8, [X0]
	0x0364DB7C MOVZ W1, 0x801
	0x0364DB80 LDR X9, [X8 + 0x2F8]
	0x0364DB84 LDR X2, [X8 + 0x300]
	0x0364DB88 BLR X9
	0x0364DB8C MOV X0, X19
	0x0364DB90 LDP X20, X19, [X31 + 0x10]
	0x0364DB94 LDR X30, [X31], #0x20
	0x0364DB98 RET

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD94000
	007 Move X20, 0xAA7000
	008 Move W8, [X21+1525]
	009 Move X20, [X20+1560]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAA7000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1525], W8
	020 Move [X31+12], W31
	021 Move X0, [X19+16]
	022 Move W2, [X19+24]
	023 Move W1, [X19+28]
	024 Add X3, X31, 12
	025 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	026 Move W8, [X19+28]
	027 Move W9, [X31+12]
	028 Add W8, W9, W8
	029 Move [X19+28], W8
	030 Move X8, [X20]
	031 Move W20, W0
	032 Move W1, W20
	033 Move X0, X8
	034 Call 0x1C17D6C
	035 Move X8, [X19+16]
	036 Move W1, [X19+28]
	037 Move X21, X0
	038 Move X2, X21
	039 Move X0, X8
	040 Move W3, W31
	041 Move W4, W20
	042 Move X5, X31
	043 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	044 Move W8, [X19+28]
	045 Move X0, X21
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Add W8, W8, W20
	049 Move [X19+28], W8
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Add X31, X31, 48
	053 Return X0

Method: System.Void EatTag(System.Security.Cryptography.DerSequenceReader/DerTag expected)

Disassembly:
	0x0364D5C4 B 0x364D53C
	0x0364D5C8 MOVZ W0, 0x8
	0x0364D5CC BL 0x3EB1AF0
	0x0364D5D0 LDR X8, [X22]
	0x0364D5D4 STR X8, [X0]
	0x0364D5D8 ADRP X1, 0x867000
	0x0364D5DC ADD X1, X1, 0xE58
	0x0364D5E0 MOV X2, X31
	0x0364D5E4 BL 0x3EB1B00
	0x0364D5E8 BL 0x1C16F20
	0x0364D5EC MOV X22, X0
	0x0364D5F0 BL 0x3EB1AE0
	0x0364D5F4 MOV X0, X22
	0x0364D5F8 BL 0x1D2C690
	0x0364D5FC BL 0x1990590
	0x0364D600 STP X30, X19, [X31 - 0x10]!
	0x0364D604 MOV X19, X0
	0x0364D608 BL 0x364C690
	0x0364D60C AND W8, W0, 0xFF
	0x0364D610 CMP W8, 0x18
	0x0364D614 B.EQ 0x364D62C
	0x0364D618 CMP W8, 0x17
	0x0364D61C B.NE 0x364D638
	0x0364D620 MOV X0, X19
	0x0364D624 LDP X30, X19, [X31], #0x10
	0x0364D628 B 0x364D680
	0x0364D62C MOV X0, X19
	0x0364D630 LDP X30, X19, [X31], #0x10
	0x0364D634 B 0x364D6CC
	0x0364D638 ADRP X0, 0xAD3000
	0x0364D63C LDR X0, [X0 + 0xCE0]
	0x0364D640 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+24]
	004 Move W2, [X0+28]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X8, [X0+16]
	007 Move X19, X0
	008 Move W0, W1
	009 Move X1, X8
	010 Call DerSequenceReader.CheckTag, X0, X1, X2
	011 Move W8, [X19+28]
	012 Add W8, W8, 1
	013 Move [X19+28], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 
	017 Move X0, 0xAD4000
	018 Move X0, [X0+3296]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xAED000
	023 Move X0, [X0+3888]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call CryptographicException..ctor, X0, X1
	029 Move X0, 0xAF0000
	030 Move X0, [X0+1856]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.Void CheckTag(System.Security.Cryptography.DerSequenceReader/DerTag expected, System.Byte[] data, System.Int32 position)

Disassembly:
	0x0364E184 MOV X1, X31
	0x0364E188 BL 0x3395B7C
	0x0364E18C CMP W0, W19
	0x0364E190 B.LE 0x364E214
	0x0364E194 MOV X0, X21
	0x0364E198 BL 0x364E06C
	0x0364E19C MOV W22, W0
	0x0364E1A0 MOV X0, X20
	0x0364E1A4 MOV X1, X31
	0x0364E1A8 BL 0x3395B7C
	0x0364E1AC ADD W8, W22, W19
	0x0364E1B0 CMP W8, W0
	0x0364E1B4 B.GT 0x364E2B0
	0x0364E1B8 MOV X0, X21
	0x0364E1BC BL 0x364E06C
	0x0364E1C0 CMP W0, 0x1
	0x0364E1C4 B.LT 0x364E204
	0x0364E1C8 MOV W22, W31
	0x0364E1CC MOV X0, X21
	0x0364E1D0 MOV W1, W22
	0x0364E1D4 ADD W23, W19, W22
	0x0364E1D8 BL 0x364E014
	0x0364E1DC MOV X1, X0
	0x0364E1E0 MOV X0, X20
	0x0364E1E4 MOV W2, W23
	0x0364E1E8 MOV X3, X31
	0x0364E1EC BL 0x339F798
	0x0364E1F0 MOV X0, X21
	0x0364E1F4 ADD W22, W22, 0x1
	0x0364E1F8 BL 0x364E06C
	0x0364E1FC CMP W22, W0
	0x0364E200 B.LT 0x364E1CC
	0x0364E204 LDP X20, X19, [X31 + 0x20]
	0x0364E208 LDP X22, X21, [X31 + 0x10]
	0x0364E20C LDP X30, X23, [X31], #0x30
	0x0364E210 RET
	0x0364E214 ADRP X0, 0xAAD000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {38}
	005 Move W8, [X1+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X8, X1, W2
	008 NotImplemented "Instruction INVALID not yet implemented."
	009 And W8, W9, 31
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move TEMP, X9
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {17}
	015 And W9, W0, 31
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Move X0, 0xAD3000
	021 Move X0, [X0+3296]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X19, X0
	025 Move X0, 0xAEC000
	026 Move X0, [X0+3888]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Move X2, X31
	031 Call CryptographicException..ctor, X0, X1
	032 Move X0, 0xAEF000
	033 Move X0, [X0+1904]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X19
	037 Call 0x1C17DEC
	038 Call 0x1C17F20
	039 Call 0x1C17F28

Method: System.Int32 EatLength()

Disassembly:
	0x0364D644 BL 0x1C16F10
	0x0364D648 MOV X19, X0
	0x0364D64C ADRP X0, 0xAEC000
	0x0364D650 LDR X0, [X0 + 0xF30]
	0x0364D654 BL 0x1C16D08
	0x0364D658 MOV X1, X0
	0x0364D65C MOV X0, X19
	0x0364D660 MOV X2, X31
	0x0364D664 BL 0x3252170
	0x0364D668 ADRP X0, 0xAEF000
	0x0364D66C LDR X0, [X0 + 0x7A0]
	0x0364D670 BL 0x1C16D08
	0x0364D674 MOV X1, X0
	0x0364D678 MOV X0, X19
	0x0364D67C BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move [X31+12], W31
	006 Move X0, [X0+16]
	007 Move W2, [X19+24]
	008 Move W1, [X19+28]
	009 Add X3, X31, 12
	010 Call DerSequenceReader.ScanContentLength, X0, X1, X2, X3
	011 Move W8, [X19+28]
	012 Move W9, [X31+12]
	013 Add W8, W9, W8
	014 Move [X19+28], W8
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Add X31, X31, 32
	018 Return X0

Method: System.Int32 ScanContentLength(System.Byte[] data, System.Int32 offset, System.Int32 end, out System.Int32 bytesConsumed)

Disassembly:
	0x0364D82C LDR X8, [X24]
	0x0364D830 LDR X9, [X8 + 0xB8]
	0x0364D834 LDR X10, [X22]
	0x0364D838 ADRP X26, 0xAEF000
	0x0364D83C ADRP X25, 0xAA7000
	0x0364D840 LDR X22, [X9 + 0x18]
	0x0364D844 LDR X21, [X10 + 0xB8]
	0x0364D848 LDR X26, [X26 + 0x7C0]
	0x0364D84C LDR X25, [X25 + 0x9F0]
	0x0364D850 CBNZ X22, 0x364D8A8
	0x0364D854 LDR W9, [X8 + 0xE0]
	0x0364D858 CBNZ W9, 0x364D868
	0x0364D85C MOV X0, X8
	0x0364D860 BL 0x1C16DFC
	0x0364D864 LDR X8, [X24]
	0x0364D868 ADRP X9, 0xAEF000
	0x0364D86C LDR X8, [X8 + 0xB8]
	0x0364D870 LDR X9, [X9 + 0x7B8]
	0x0364D874 LDR X23, [X8]
	0x0364D878 LDR X0, [X9]
	0x0364D87C BL 0x1C16F10
	0x0364D880 ADRP X8, 0xAEF000
	0x0364D884 LDR X8, [X8 + 0x7C8]
	0x0364D888 MOV X1, X23
	0x0364D88C MOV X3, X31
	0x0364D890 MOV X22, X0
	0x0364D894 LDR X2, [X8]
	0x0364D898 BL 0x2D27AA8
	0x0364D89C LDR X8, [X24]
	0x0364D8A0 LDR X8, [X8 + 0xB8]
	0x0364D8A4 STR X22, [X8 + 0x18]
	0x0364D8A8 LDR X2, [X26]
	0x0364D8AC MOV X0, X21
	0x0364D8B0 MOV X1, X22
	0x0364D8B4 BL 0x2212A40
	0x0364D8B8 LDR X8, [X25]
	0x0364D8BC MOV X21, X0
	0x0364D8C0 LDR W9, [X8 + 0xE0]
	0x0364D8C4 CBNZ W9, 0x364D8D0
	0x0364D8C8 MOV X0, X8
	0x0364D8CC BL 0x1C16DFC
	0x0364D8D0 ADD X4, X31, 0x8
	0x0364D8D4 MOVZ W3, 0x50
	0x0364D8D8 MOV X0, X20
	0x0364D8DC MOV X1, X19
	0x0364D8E0 MOV X2, X21
	0x0364D8E4 MOV X5, X31
	0x0364D8E8 BL 0x33628F4
	0x0364D8EC TBZ X0, 0x0, 0x364D910
	0x0364D8F0 LDP X0, X30, [X31 + 0x8]
	0x0364D8F4 LDP X20, X19, [X31 + 0x50]
	0x0364D8F8 LDP X22, X21, [X31 + 0x40]
	0x0364D8FC LDP X24, X23, [X31 + 0x30]
	0x0364D900 LDP X26, X25, [X31 + 0x20]
	0x0364D904 ADD X31, X31, 0x60
	0x0364D908 RET
	0x0364D90C BL 0x1C16F20
	0x0364D910 ADRP X0, 0xAD3000
	0x0364D914 LDR X0, [X0 + 0xCE0]
	0x0364D918 BL 0x1C16D08
	0x0364D91C BL 0x1C16F10
	0x0364D920 MOV X19, X0
	0x0364D924 ADRP X0, 0xAEC000
	0x0364D928 LDR X0, [X0 + 0xF30]
	0x0364D92C BL 0x1C16D08
	0x0364D930 MOV X1, X0
	0x0364D934 MOV X0, X19
	0x0364D938 MOV X2, X31
	0x0364D93C BL 0x3252170
	0x0364D940 ADRP X0, 0xAEF000
	0x0364D944 LDR X0, [X0 + 0x7D0]
	0x0364D948 BL 0x1C16D08
	0x0364D94C MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Subtract W9, W2, W1
	004 Compare X0, 0
	005 JumpIfEqual {72}
	006 Move W12, [X0+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X0, W1
	009 NotImplemented "Instruction INVALID not yet implemented."
	010 And W8, W10, 255
	011 Move TEMP, X10
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {20}
	015 NotImplemented "Instruction ORN not yet implemented."
	016 Add W10, W10, W2
	017 Move W9, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move [X3], W9
	020 And W11, W8, 127
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Add W10, W11, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move [X3], W10
	025 Compare W11, 0
	026 JumpIfEqual {54}
	027 Add W8, W10, W1
	028 Add W13, W1, 1
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, W1
	031 NotImplemented "Instruction ORN not yet implemented."
	032 Add X8, X8, X0
	033 Move W14, W31
	034 Subtract W13, W11, 1
	035 Add W12, W15, W12
	036 Add X15, X8, 33
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W8, [X15+1]
	039 Subtract W11, W11, 1
	040 NotImplemented "Instruction BFM not yet implemented."
	041 Move W14, W8
	042 Move TEMP, X8
	043 And TEMP, TEMP, -2147483648
	044 Compare TEMP, -2147483648
	045 JumpIfNotEqual {47}
	046 Move W8, W31
	047 Subtract W9, W9, W10
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W0, W8
	050 Move X30, [X31+16]
	051 Move X19, [X31+24]
	052 Return X0
	053 Call 0x1C17F28
	054 Move X0, 0xAD4000
	055 Move X0, [X0+3296]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xAED000
	060 Move X0, [X0+3888]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call CryptographicException..ctor, X0, X1
	066 Move X0, 0xAF0000
	067 Move X0, [X0+1872]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC
	072 Call 0x1C17F20

