Type: System.Security.Cryptography.OidCollection

Method: System.Void .ctor()

Disassembly:
	0x0364EEE4 ADD X1, X1, 0xE58
	0x0364EEE8 MOV X2, X31
	0x0364EEEC BL 0x3EB1B00
	0x0364EEF0 MOV X19, X0
	0x0364EEF4 BL 0x3EB1AE0
	0x0364EEF8 MOV X0, X19
	0x0364EEFC BL 0x1D2C690
	0x0364EF00 BL 0x1990590
	0x0364EF04 SUB X31, X31, 0x70
	0x0364EF08 STP X29, X30, [X31 + 0x10]
	0x0364EF0C STP X28, X27, [X31 + 0x20]
	0x0364EF10 STP X26, X25, [X31 + 0x30]
	0x0364EF14 STP X24, X23, [X31 + 0x40]
	0x0364EF18 STP X22, X21, [X31 + 0x50]
	0x0364EF1C STP X20, X19, [X31 + 0x60]
	0x0364EF20 ADRP X21, 0xD92000
	0x0364EF24 LDRB W8, [X21 + 0x60E]
	0x0364EF28 MOV W19, W1
	0x0364EF2C MOV X20, X0
	0x0364EF30 TBNZ X8, 0x0, 0x364EF9C
	0x0364EF34 ADRP X0, 0xAD2000
	0x0364EF38 LDR X0, [X0 + 0xB98]
	0x0364EF3C BL 0x1C16CF4
	0x0364EF40 ADRP X0, 0xAA6000
	0x0364EF44 LDR X0, [X0 + 0x9D8]
	0x0364EF48 BL 0x1C16CF4
	0x0364EF4C ADRP X0, 0xAA5000
	0x0364EF50 LDR X0, [X0 + 0x8F0]
	0x0364EF54 BL 0x1C16CF4
	0x0364EF58 ADRP X0, 0xAEE000
	0x0364EF5C LDR X0, [X0 + 0x880]
	0x0364EF60 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD93000
	007 Move X21, 0xAEF000
	008 Move X20, 0xAEF000
	009 Move W8, [X22+1533]
	010 Move X21, [X21+2048]
	011 Move X20, [X20+2056]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xAEF000
	018 Move X0, [X0+2056]
	019 Call 0x1C17CF4
	020 Move X0, 0xAEF000
	021 Move X0, [X0+2048]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1533], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object..ctor, X0
	028 Move X0, [X21]
	029 Call 0x1C17F10
	030 Move X1, [X20]
	031 Move X20, X0
	032 Call List`1<Object>..ctor, X0
	033 Move [X19+16], X20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return 

Method: System.Int32 Add(System.Security.Cryptography.Oid oid)

Disassembly:
	0x0364EF64 ADRP X0, 0xAEE000
	0x0364EF68 LDR X0, [X0 + 0x888]
	0x0364EF6C BL 0x1C16CF4
	0x0364EF70 ADRP X0, 0xAA5000
	0x0364EF74 LDR X0, [X0 + 0x838]
	0x0364EF78 BL 0x1C16CF4
	0x0364EF7C ADRP X0, 0xAEE000
	0x0364EF80 LDR X0, [X0 + 0x890]
	0x0364EF84 BL 0x1C16CF4
	0x0364EF88 ADRP X0, 0xAEE000
	0x0364EF8C LDR X0, [X0 + 0x898]
	0x0364EF90 BL 0x1C16CF4
	0x0364EF94 MOVZ W8, 0x1
	0x0364EF98 STRB W8, [X21 + 0x60E]
	0x0364EF9C LDR X21, [X20 + 0x18]
	0x0364EFA0 CBZ X21, 0x364F1D8
	0x0364EFA4 LDR W8, [X21 + 0x18]
	0x0364EFA8 CMP W8, 0x4
	0x0364EFAC B.LE 0x364F184
	0x0364EFB0 ADRP X8, 0xAD2000
	0x0364EFB4 LDR X8, [X8 + 0xB98]
	0x0364EFB8 LDR X0, [X8]
	0x0364EFBC BL 0x1C16F10
	0x0364EFC0 MOV X20, X0
	0x0364EFC4 MOV X1, X21
	0x0364EFC8 MOV X2, X31
	0x0364EFCC BL 0x31E7A44
	0x0364EFD0 ADRP X8, 0xAA5000
	0x0364EFD4 LDR X8, [X8 + 0x8F0]
	0x0364EFD8 LDR X0, [X8]
	0x0364EFDC BL 0x1C16F10
	0x0364EFE0 MOV X21, X0
	0x0364EFE4 MOV X1, X31
	0x0364EFE8 BL 0x3231AC4
	0x0364EFEC CBZ X20, 0x364F1DC
	0x0364EFF0 ADRP X26, 0xAEE000
	0x0364EFF4 ADRP X28, 0xAEE000
	0x0364EFF8 ADRP X29, 0xAA6000
	0x0364EFFC ADRP X27, 0xAEE000
	0x0364F000 LDR X26, [X26 + 0x898]
	0x0364F004 LDR X28, [X28 + 0x888]
	0x0364F008 LDR X29, [X29 + 0x9D8]
	0x0364F00C LDR X27, [X27 + 0x880]
	0x0364F010 MOV W22, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD93000
	006 Move W8, [X21+1534]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xAEF000
	014 Move X0, [X0+2064]
	015 Call 0x1C17CF4
	016 Move X0, 0xAEF000
	017 Move X0, [X0+2072]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1534], W8
	021 Move X0, [X20+16]
	022 Compare X0, 0
	023 JumpIfEqual {52}
	024 Move X9, 0xAEF000
	025 Move X9, [X9+2064]
	026 Move W20, [X0+24]
	027 Move W10, [X0+28]
	028 Move X8, [X0+16]
	029 Move X9, [X9]
	030 Move X20, W20
	031 Add W10, W10, 1
	032 Move [X0+28], W10
	033 Compare X8, 0
	034 JumpIfEqual {52}
	035 Move W10, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add W9, W20, 1
	038 Add X8, X8, X20
	039 Move [X0+24], W9
	040 Move [X8+32], X19
	041 Move X8, [X9+32]
	042 Move X1, X19
	043 Move X8, [X8+192]
	044 Move X2, [X8+112]
	045 Call List`1<Object>.AddWithResize, X0, X1
	046 Move W0, W20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: System.Security.Cryptography.Oid get_Item(System.Int32 index)

Disassembly:
	0x0364F014 MOV X0, X20
	0x0364F018 MOV X1, X31
	0x0364F01C BL 0x31E7CC4
	0x0364F020 CMP W22, W0
	0x0364F024 B.GE 0x364F194
	0x0364F028 MOV X0, X20
	0x0364F02C MOV W1, W22
	0x0364F030 MOV X2, X31
	0x0364F034 BL 0x31E8704
	0x0364F038 MOV X24, X0
	0x0364F03C CBZ X0, 0x364F1CC
	0x0364F040 LDRB W8, [X24 + 0x10]
	0x0364F044 CMP W8, 0x81
	0x0364F048 B.EQ 0x364F090
	0x0364F04C CMP W8, 0x82
	0x0364F050 B.NE 0x364F0CC
	0x0364F054 LDR X23, [X28]
	0x0364F058 MOV X0, X31
	0x0364F05C BL 0x3242EC8
	0x0364F060 MOV X25, X0
	0x0364F064 MOV X0, X24
	0x0364F068 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD92000
	006 Move W8, [X21+1535]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAEE000
	014 Move X0, [X0+2080]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1535], W8
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xAEE000
	022 Move X8, [X8+2080]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.get_Item, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x0364F06C BL 0x31E7D00
	0x0364F070 MOV X1, X0
	0x0364F074 CBZ X25, 0x364F1D0
	0x0364F078 LDR X8, [X25]
	0x0364F07C LDR X9, [X8 + 0x378]
	0x0364F080 LDR X2, [X8 + 0x380]
	0x0364F084 MOV X0, X25
	0x0364F088 BLR X9
	0x0364F08C B 0x364F104
	0x0364F090 LDR X23, [X26]
	0x0364F094 MOV X0, X31
	0x0364F098 BL 0x3242EC8
	0x0364F09C MOV X25, X0
	0x0364F0A0 MOV X0, X24
	0x0364F0A4 MOV X1, X31
	0x0364F0A8 BL 0x31E7D00
	0x0364F0AC MOV X1, X0
	0x0364F0B0 CBZ X25, 0x364F1D4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD92000
	005 Move W8, [X20+1536]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAEE000
	012 Move X0, [X0+2072]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1536], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {24}
	019 Move W0, [X8+24]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.Security.Cryptography.OidEnumerator GetEnumerator()

Disassembly:
	0x0364F0B4 LDR X8, [X25]
	0x0364F0B8 LDR X9, [X8 + 0x378]
	0x0364F0BC LDR X2, [X8 + 0x380]
	0x0364F0C0 MOV X0, X25
	0x0364F0C4 BLR X9
	0x0364F0C8 B 0x364F104
	0x0364F0CC LDR X0, [X29]
	0x0364F0D0 STRB W8, [X31 + 0xC]
	0x0364F0D4 ADD X1, X31, 0xC
	0x0364F0D8 BL 0x1C16E04
	0x0364F0DC MOV X1, X0
	0x0364F0E0 LDR X0, [X27]
	0x0364F0E4 MOV X2, X31
	0x0364F0E8 BL 0x321EFD0
	0x0364F0EC MOV X23, X0
	0x0364F0F0 MOV X0, X24
	0x0364F0F4 MOV X1, X31
	0x0364F0F8 BL 0x31E7D00
	0x0364F0FC MOV X1, X31
	0x0364F100 BL 0x31FDB80
	0x0364F104 MOV X24, X0
	0x0364F108 CBZ X21, 0x364F1C8
	0x0364F10C MOV X0, X21
	0x0364F110 MOV X1, X23
	0x0364F114 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD92000
	006 Move X21, 0xAEE000
	007 Move W8, [X20+1537]
	008 Move X21, [X21+2088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAEE000
	015 Move X0, [X0+2088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1537], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move TEMP, 0
	025 Not TEMP
	026 Move W8, TEMP
	027 Move [X20+16], X19
	028 Move [X20+24], W8
	029 Move X0, X20
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0364F148 B 0x364F17C

ISIL:
	001 Call OidCollection.GetEnumerator, X0
	002 Return X0

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x0364F14C MOV X0, X20
	0x0364F150 MOV X1, X31
	0x0364F154 BL 0x31E7CC4
	0x0364F158 SUB W8, W0, 0x1
	0x0364F15C CMP W22, W8
	0x0364F160 B.GE 0x364F17C
	0x0364F164 ADRP X8, 0xAA4000
	0x0364F168 LDR X8, [X8 + 0x838]
	0x0364F16C LDR X1, [X8]
	0x0364F170 MOV X0, X21
	0x0364F174 MOV X2, X31
	0x0364F178 BL 0x32333E0
	0x0364F17C ADD W22, W22, 0x1
	0x0364F180 B 0x364F014
	0x0364F184 ADRP X8, 0xAED000
	0x0364F188 LDR X8, [X8 + 0x890]
	0x0364F18C LDR X0, [X8]
	0x0364F190 B 0x364F1A8
	0x0364F194 CBZ X21, 0x364F1E0
	0x0364F198 LDR X8, [X21]
	0x0364F19C LDP X9, X1, [X8 + 0x168]
	0x0364F1A0 MOV X0, X21
	0x0364F1A4 BLR X9
	0x0364F1A8 LDP X20, X19, [X31 + 0x60]
	0x0364F1AC LDP X22, X21, [X31 + 0x50]
	0x0364F1B0 LDP X24, X23, [X31 + 0x40]
	0x0364F1B4 LDP X26, X25, [X31 + 0x30]
	0x0364F1B8 LDP X28, X27, [X31 + 0x20]
	0x0364F1BC LDP X29, X30, [X31 + 0x10]
	0x0364F1C0 ADD X31, X31, 0x70
	0x0364F1C4 RET
	0x0364F1C8 BL 0x1C16F20
	0x0364F1CC BL 0x1C16F20
	0x0364F1D0 BL 0x1C16F20
	0x0364F1D4 BL 0x1C16F20
	0x0364F1D8 BL 0x1C16F20
	0x0364F1DC BL 0x1C16F20
	0x0364F1E0 BL 0x1C16F20
	0x0364F1E4 B 0x364F24C
	0x0364F1E8 B 0x364F24C
	0x0364F1EC B 0x364F24C
	0x0364F1F0 B 0x364F24C
	0x0364F1F4 B 0x364F24C
	0x0364F1F8 B 0x364F24C
	0x0364F1FC B 0x364F24C
	0x0364F200 B 0x364F24C
	0x0364F204 B 0x364F24C
	0x0364F208 B 0x364F24C
	0x0364F20C B 0x364F24C
	0x0364F210 B 0x364F24C
	0x0364F214 B 0x364F24C
	0x0364F218 B 0x364F24C
	0x0364F21C B 0x364F24C
	0x0364F220 B 0x364F24C
	0x0364F224 B 0x364F24C
	0x0364F228 B 0x364F24C
	0x0364F22C B 0x364F24C
	0x0364F230 B 0x364F24C
	0x0364F234 B 0x364F24C
	0x0364F238 B 0x364F24C
	0x0364F23C B 0x364F24C
	0x0364F240 B 0x364F24C
	0x0364F244 B 0x364F24C
	0x0364F248 B 0x364F24C
	0x0364F24C MOV X19, X0
	0x0364F250 CMP W1, 0x1
	0x0364F254 B.NE 0x364F2C0
	0x0364F258 MOV X0, X19
	0x0364F25C BL 0x3EB1AD0
	0x0364F260 MOV X19, X0
	0x0364F264 ADRP X0, 0xAAA000
	0x0364F268 LDR X0, [X0 + 0xCC0]
	0x0364F26C BL 0x1C16D08
	0x0364F270 LDR X8, [X19]
	0x0364F274 LDR X1, [X8]
	0x0364F278 BL 0x1C17270
	0x0364F27C TBZ X0, 0x0, 0x364F298
	0x0364F280 BL 0x3EB1AE0
	0x0364F284 ADRP X0, 0xAA6000
	0x0364F288 LDR X0, [X0 + 0x278]
	0x0364F28C BL 0x1C16D08
	0x0364F290 LDR X8, [X0 + 0xB8]
	0x0364F294 B 0x364F18C
	0x0364F298 MOVZ W0, 0x8
	0x0364F29C BL 0x3EB1AF0
	0x0364F2A0 LDR X8, [X19]
	0x0364F2A4 STR X8, [X0]
	0x0364F2A8 ADRP X1, 0x865000
	0x0364F2AC ADD X1, X1, 0xE58
	0x0364F2B0 MOV X2, X31
	0x0364F2B4 BL 0x3EB1B00
	0x0364F2B8 MOV X19, X0
	0x0364F2BC BL 0x3EB1AE0
	0x0364F2C0 MOV X0, X19
	0x0364F2C4 BL 0x1D2C690
	0x0364F2C8 BL 0x1990590
	0x0364F2CC STR X30, [X31 - 0x20]!
	0x0364F2D0 STP X20, X19, [X31 + 0x10]
	0x0364F2D4 ADRP X20, 0xD91000
	0x0364F2D8 LDRB W8, [X20 + 0x60F]
	0x0364F2DC MOV X19, X0
	0x0364F2E0 TBNZ X8, 0x0, 0x364F388
	0x0364F2E4 ADRP X0, 0xAA4000
	0x0364F2E8 LDR X0, [X0 + 0x8F0]
	0x0364F2EC BL 0x1C16CF4
	0x0364F2F0 ADRP X0, 0xAED000
	0x0364F2F4 LDR X0, [X0 + 0x8A0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {73}
	009 Move X20, X1
	010 Move X21, X0
	011 Move X0, X1
	012 Move X1, X31
	013 Move W19, W2
	014 Call Array.get_Rank, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move TEMP, X19
	017 And TEMP, TEMP, -2147483648
	018 Compare TEMP, -2147483648
	019 JumpIfEqual {56}
	020 Move X0, X20
	021 Move X1, X31
	022 Call Array.get_Length, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X21
	025 Call OidCollection.get_Count, X0
	026 Move W22, W0
	027 Move X0, X20
	028 Move X1, X31
	029 Call Array.get_Length, X0
	030 Add W8, W22, W19
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X21
	033 Call OidCollection.get_Count, X0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W22, W31
	036 Move X0, X21
	037 Move W1, W22
	038 Add W23, W19, W22
	039 Call OidCollection.get_Item, X0, X1
	040 Move X1, X0
	041 Move X0, X20
	042 Move W2, W23
	043 Move X3, X31
	044 Call Array.SetValue, X0, X1, X2
	045 Move X0, X21
	046 Add W22, W22, 1
	047 Call OidCollection.get_Count, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return 
	056 Move X0, 0xAAD000
	057 Move X0, [X0+1888]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xAB0000
	062 Move X0, [X0+304]
	063 Call 0x1C17D08
	064 Move X20, X0
	065 Move X0, 0xACD000
	066 Move X0, [X0+1632]
	067 Call 0x1C17D08
	068 Move X2, X0
	069 Move X0, X19
	070 Move X1, X20
	071 Move X3, X31
	072 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	073 Move X0, 0xAAA000
	074 Move X0, [X0+1320]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xACD000
	079 Move X0, [X0+1600]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Move X2, X31
	084 Call ArgumentNullException..ctor, X0, X1
	085 Move X0, 0xAAD000
	086 Move X0, [X0+1400]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0xACE000
	091 Move X0, [X0+776]
	092 Move X0, 0xAAD000
	093 Move X0, [X0+1400]
	094 Call 0x1C17D08
	095 Call 0x1C17F10
	096 Move X19, X0
	097 Move X0, 0xACD000
	098 Move X0, [X0+1888]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X19
	102 Move X2, X31
	103 Call ArgumentException..ctor, X0, X1
	104 Move X0, 0xAEE000
	105 Move X0, [X0+2096]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X19
	109 Call 0x1C17DEC

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x0364F2F8 BL 0x1C16CF4
	0x0364F2FC ADRP X0, 0xAED000

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object get_SyncRoot()

Disassembly:
	0x0364F300 LDR X0, [X0 + 0x8A8]

ISIL:
	001 Return X0

