Type: System.Security.Cryptography.Oid

Method: System.Void .ctor()

Disassembly:
	0x0364EBA8 B 0x364EB40
	0x0364EBAC MOVZ W0, 0x8

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .ctor(System.String oid)

Disassembly:
	0x0364EBB0 BL 0x3EB1AF0
	0x0364EBB4 LDR X8, [X19]
	0x0364EBB8 STR X8, [X0]
	0x0364EBBC ADRP X1, 0x866000
	0x0364EBC0 ADD X1, X1, 0xE58
	0x0364EBC4 MOV X2, X31
	0x0364EBC8 BL 0x3EB1B00
	0x0364EBCC MOV X19, X0
	0x0364EBD0 BL 0x3EB1AE0
	0x0364EBD4 MOV X0, X19
	0x0364EBD8 BL 0x1D2C690
	0x0364EBDC BL 0x1990590
	0x0364EBE0 STR X30, [X31 - 0x30]!
	0x0364EBE4 STP X22, X21, [X31 + 0x10]
	0x0364EBE8 STP X20, X19, [X31 + 0x20]
	0x0364EBEC ADRP X21, 0xD92000
	0x0364EBF0 ADRP X22, 0xAEE000
	0x0364EBF4 LDRB W8, [X21 + 0x60B]
	0x0364EBF8 LDR X22, [X22 + 0x868]
	0x0364EBFC MOV W19, W1
	0x0364EC00 MOV X20, X0
	0x0364EC04 TBNZ X8, 0x0, 0x364EC1C
	0x0364EC08 ADRP X0, 0xAEE000
	0x0364EC0C LDR X0, [X0 + 0x868]
	0x0364EC10 BL 0x1C16CF4
	0x0364EC14 MOVZ W8, 0x1
	0x0364EC18 STRB W8, [X21 + 0x60B]
	0x0364EC1C LDR X0, [X22]
	0x0364EC20 BL 0x1C16F10
	0x0364EC24 MOV X21, X0
	0x0364EC28 MOV X1, X20
	0x0364EC2C MOV W2, W31
	0x0364EC30 BL 0x364F778
	0x0364EC34 CBZ X21, 0x364EC5C
	0x0364EC38 LDR X8, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD93000
	007 Move X21, 0xAEC000
	008 Move W8, [X22+1530]
	009 Move X21, [X21+2216]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAEC000
	017 Move X0, [X0+2216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1530], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move W1, W31
	031 Move W2, W31
	032 Move X3, X31
	033 Call OidLookup.ToOid, X0, X1, X2
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Move [X19+16], X8
	037 Move [X19+32], W31
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return 

Method: System.Void .ctor(System.String value, System.String friendlyName)

Disassembly:
	0x0364EC3C LDP X9, X2, [X8 + 0x198]
	0x0364EC40 AND W1, W19, 0x1
	0x0364EC44 MOV X0, X21
	0x0364EC48 BLR X9
	0x0364EC4C LDP X20, X19, [X31 + 0x20]
	0x0364EC50 LDP X22, X21, [X31 + 0x10]
	0x0364EC54 LDR X30, [X31], #0x30
	0x0364EC58 RET
	0x0364EC5C BL 0x1C16F20
	0x0364EC60 B 0x364EC68
	0x0364EC64 B 0x364EC68

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move [X21+16], X20
	011 Move [X21+24], X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Void .ctor(System.Security.Cryptography.Oid oid)

Disassembly:
	0x0364EC68 MOV X19, X0
	0x0364EC6C CMP W1, 0x1
	0x0364EC70 B.NE 0x364ECE0
	0x0364EC74 MOV X0, X19
	0x0364EC78 BL 0x3EB1AD0
	0x0364EC7C MOV X19, X0
	0x0364EC80 ADRP X0, 0xAAB000
	0x0364EC84 LDR X0, [X0 + 0xCC0]
	0x0364EC88 BL 0x1C16D08
	0x0364EC8C LDR X8, [X19]
	0x0364EC90 LDR X1, [X8]
	0x0364EC94 BL 0x1C17270
	0x0364EC98 TBZ X0, 0x0, 0x364ECB8
	0x0364EC9C BL 0x3EB1AE0
	0x0364ECA0 ADRP X0, 0xAA7000
	0x0364ECA4 LDR X0, [X0 + 0x278]
	0x0364ECA8 BL 0x1C16D08
	0x0364ECAC LDR X8, [X0 + 0xB8]
	0x0364ECB0 LDR X0, [X8]
	0x0364ECB4 B 0x364EC4C
	0x0364ECB8 MOVZ W0, 0x8
	0x0364ECBC BL 0x3EB1AF0
	0x0364ECC0 LDR X8, [X19]
	0x0364ECC4 STR X8, [X0]
	0x0364ECC8 ADRP X1, 0x866000
	0x0364ECCC ADD X1, X1, 0xE58
	0x0364ECD0 MOV X2, X31
	0x0364ECD4 BL 0x3EB1B00
	0x0364ECD8 MOV X19, X0
	0x0364ECDC BL 0x3EB1AE0
	0x0364ECE0 MOV X0, X19
	0x0364ECE4 BL 0x1D2C690

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Compare X20, 0
	009 JumpIfEqual {18}
	010 Move V0, [X20+1]
	011 Move [X19+1], V0
	012 Move W8, [X20+32]
	013 Move [X19+32], W8
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return 
	018 Move X0, 0xAAB000
	019 Move X0, [X0+1320]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X19, X0
	023 Move X0, 0xAD3000
	024 Move X0, [X0+3040]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Move X2, X31
	029 Call ArgumentNullException..ctor, X0, X1
	030 Move X0, 0xAEF000
	031 Move X0, [X0+2008]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Call 0x1C17DEC

Method: System.Security.Cryptography.Oid FromOidValue(System.String oidValue, System.Security.Cryptography.OidGroup group)

Disassembly:
	0x0364ECE8 BL 0x1990590
	0x0364ECEC STR X30, [X31 - 0x30]!
	0x0364ECF0 STP X22, X21, [X31 + 0x10]
	0x0364ECF4 STP X20, X19, [X31 + 0x20]
	0x0364ECF8 ADRP X21, 0xD92000
	0x0364ECFC ADRP X22, 0xAEE000
	0x0364ED00 LDRB W8, [X21 + 0x60C]
	0x0364ED04 LDR X22, [X22 + 0x870]
	0x0364ED08 MOV W19, W1
	0x0364ED0C MOV X20, X0
	0x0364ED10 TBNZ X8, 0x0, 0x364ED28
	0x0364ED14 ADRP X0, 0xAEE000
	0x0364ED18 LDR X0, [X0 + 0x870]
	0x0364ED1C BL 0x1C16CF4
	0x0364ED20 MOVZ W8, 0x1
	0x0364ED24 STRB W8, [X21 + 0x60C]
	0x0364ED28 LDR X0, [X22]
	0x0364ED2C BL 0x1C16F10
	0x0364ED30 MOV X21, X0
	0x0364ED34 MOV X1, X20
	0x0364ED38 MOV W2, W31
	0x0364ED3C BL 0x364F84C
	0x0364ED40 CBZ X21, 0x364ED68
	0x0364ED44 LDR X8, [X21]
	0x0364ED48 LDP X9, X2, [X8 + 0x198]
	0x0364ED4C AND W1, W19, 0x1
	0x0364ED50 MOV X0, X21
	0x0364ED54 BLR X9
	0x0364ED58 LDP X20, X19, [X31 + 0x20]
	0x0364ED5C LDP X22, X21, [X31 + 0x10]
	0x0364ED60 LDR X30, [X31], #0x30
	0x0364ED64 RET
	0x0364ED68 BL 0x1C16F20
	0x0364ED6C B 0x364ED74
	0x0364ED70 B 0x364ED74
	0x0364ED74 MOV X19, X0
	0x0364ED78 CMP W1, 0x1
	0x0364ED7C B.NE 0x364EDEC
	0x0364ED80 MOV X0, X19
	0x0364ED84 BL 0x3EB1AD0
	0x0364ED88 MOV X19, X0
	0x0364ED8C ADRP X0, 0xAAB000
	0x0364ED90 LDR X0, [X0 + 0xCC0]
	0x0364ED94 BL 0x1C16D08
	0x0364ED98 LDR X8, [X19]
	0x0364ED9C LDR X1, [X8]
	0x0364EDA0 BL 0x1C17270
	0x0364EDA4 TBZ X0, 0x0, 0x364EDC4
	0x0364EDA8 BL 0x3EB1AE0
	0x0364EDAC ADRP X0, 0xAA7000
	0x0364EDB0 LDR X0, [X0 + 0x278]
	0x0364EDB4 BL 0x1C16D08
	0x0364EDB8 LDR X8, [X0 + 0xB8]
	0x0364EDBC LDR X0, [X8]
	0x0364EDC0 B 0x364ED58
	0x0364EDC4 MOVZ W0, 0x8
	0x0364EDC8 BL 0x3EB1AF0
	0x0364EDCC LDR X8, [X19]
	0x0364EDD0 STR X8, [X0]
	0x0364EDD4 ADRP X1, 0x866000
	0x0364EDD8 ADD X1, X1, 0xE58
	0x0364EDDC MOV X2, X31
	0x0364EDE0 BL 0x3EB1B00
	0x0364EDE4 MOV X19, X0
	0x0364EDE8 BL 0x3EB1AE0
	0x0364EDEC MOV X0, X19
	0x0364EDF0 BL 0x1D2C690
	0x0364EDF4 BL 0x1990590
	0x0364EDF8 STR X30, [X31 - 0x30]!
	0x0364EDFC STP X22, X21, [X31 + 0x10]
	0x0364EE00 STP X20, X19, [X31 + 0x20]
	0x0364EE04 ADRP X21, 0xD92000
	0x0364EE08 ADRP X22, 0xAEE000
	0x0364EE0C LDRB W8, [X21 + 0x60D]
	0x0364EE10 LDR X22, [X22 + 0x878]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD93000
	007 Move W8, [X21+1531]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xAEC000
	015 Move X0, [X0+2216]
	016 Call 0x1C17CF4
	017 Move X0, 0xAEF000
	018 Move X0, [X0+2016]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1531], W8
	022 Compare X20, 0
	023 JumpIfEqual {56}
	024 Move X8, 0xAEC000
	025 Move X8, [X8+2216]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move W1, W19
	033 Move W2, W31
	034 Move X3, X31
	035 Call OidLookup.ToFriendlyName, X0, X1, X2
	036 Compare X0, 0
	037 JumpIfEqual {68}
	038 Move X8, 0xAEF000
	039 Move X8, [X8+2016]
	040 Move X21, X0
	041 Move X0, [X8]
	042 Call 0x1C17F10
	043 Move X1, X31
	044 Move X22, X0
	045 Call Object..ctor, X0
	046 Move [X22+16], X20
	047 Move [X22+24], X21
	048 Move [X22+32], W19
	049 Move X0, X22
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Return X0
	056 Move X0, 0xAAB000
	057 Move X0, [X0+1320]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xAEF000
	062 Move X0, [X0+2024]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X19
	066 Move X2, X31
	067 Call ArgumentNullException..ctor, X0, X1
	068 Move X0, 0xAD3000
	069 Move X0, [X0+3296]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xAEF000
	074 Move X0, [X0+2032]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call CryptographicException..ctor, X0, X1
	080 Move X0, 0xAEF000
	081 Move X0, [X0+2040]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC

Method: System.String get_Value()

Disassembly:
	0x0364EE50 LDR X8, [X21]
	0x0364EE54 LDP X9, X2, [X8 + 0x198]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x0364EE58 AND W1, W19, 0x1
	0x0364EE5C MOV X0, X21

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_FriendlyName()

Disassembly:
	0x0364EE60 BLR X9
	0x0364EE64 LDP X20, X19, [X31 + 0x20]
	0x0364EE68 LDP X22, X21, [X31 + 0x10]
	0x0364EE6C LDR X30, [X31], #0x30
	0x0364EE70 RET
	0x0364EE74 BL 0x1C16F20
	0x0364EE78 B 0x364EE80
	0x0364EE7C B 0x364EE80
	0x0364EE80 MOV X19, X0
	0x0364EE84 CMP W1, 0x1
	0x0364EE88 B.NE 0x364EEF8
	0x0364EE8C MOV X0, X19
	0x0364EE90 BL 0x3EB1AD0
	0x0364EE94 MOV X19, X0
	0x0364EE98 ADRP X0, 0xAAB000
	0x0364EE9C LDR X0, [X0 + 0xCC0]
	0x0364EEA0 BL 0x1C16D08
	0x0364EEA4 LDR X8, [X19]
	0x0364EEA8 LDR X1, [X8]
	0x0364EEAC BL 0x1C17270
	0x0364EEB0 TBZ X0, 0x0, 0x364EED0
	0x0364EEB4 BL 0x3EB1AE0
	0x0364EEB8 ADRP X0, 0xAA7000
	0x0364EEBC LDR X0, [X0 + 0x278]
	0x0364EEC0 BL 0x1C16D08
	0x0364EEC4 LDR X8, [X0 + 0xB8]
	0x0364EEC8 LDR X0, [X8]
	0x0364EECC B 0x364EE64
	0x0364EED0 MOVZ W0, 0x8
	0x0364EED4 BL 0x3EB1AF0
	0x0364EED8 LDR X8, [X19]
	0x0364EEDC STR X8, [X0]
	0x0364EEE0 ADRP X1, 0x866000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD93000
	006 Move W8, [X20+1532]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAEC000
	013 Move X0, [X0+2216]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1532], W8
	017 Move X0, [X19+24]
	018 Compare X0, 0
	019 JumpIfNotEqual {38}
	020 Move X20, [X19+16]
	021 Compare X20, 0
	022 JumpIfEqual {37}
	023 Move X8, 0xAEC000
	024 Move X8, [X8+2216]
	025 Move W21, [X19+32]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move W2, 1
	032 Move X0, X20
	033 Move W1, W21
	034 Move X3, X31
	035 Call OidLookup.ToFriendlyName, X0, X1, X2
	036 Move [X19+24], X0
	037 Move X0, X31
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0

Method: System.Void .ctor(System.String value, System.String friendlyName, System.Security.Cryptography.OidGroup group)

Disassembly:
	0x0364EE14 MOV W19, W1
	0x0364EE18 MOV X20, X0
	0x0364EE1C TBNZ X8, 0x0, 0x364EE34
	0x0364EE20 ADRP X0, 0xAEE000
	0x0364EE24 LDR X0, [X0 + 0x878]
	0x0364EE28 BL 0x1C16CF4
	0x0364EE2C MOVZ W8, 0x1
	0x0364EE30 STRB W8, [X21 + 0x60D]
	0x0364EE34 LDR X0, [X22]
	0x0364EE38 BL 0x1C16F10
	0x0364EE3C MOV X21, X0
	0x0364EE40 MOV X1, X20
	0x0364EE44 MOV W2, W31
	0x0364EE48 BL 0x364F920
	0x0364EE4C CBZ X21, 0x364EE74

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X1
	007 Move X1, X31
	008 Move W19, W3
	009 Move X20, X2
	010 Move X22, X0
	011 Call Object..ctor, X0
	012 Move [X22+16], X21
	013 Move [X22+24], X20
	014 Move [X22+32], W19
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X22, [X31+16]
	018 Move X21, [X31+24]
	019 Move X30, [X31+48]
	020 Return 

