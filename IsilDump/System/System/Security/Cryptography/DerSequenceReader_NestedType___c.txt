Type: System.Security.Cryptography.DerSequenceReader/<>c

Method: System.Void .cctor()

Disassembly:
	0x0364E9D8 MOV X2, X31
	0x0364E9DC LDR X1, [X8]
	0x0364E9E0 BL 0x321BA08
	0x0364E9E4 TBZ X0, 0x0, 0x364E9FC
	0x0364E9E8 AND W1, W20, 0x1
	0x0364E9EC MOV X0, X19
	0x0364E9F0 LDP X20, X19, [X31 + 0x10]
	0x0364E9F4 LDP X30, X21, [X31], #0x20
	0x0364E9F8 B 0x364EBE0
	0x0364E9FC ADRP X8, 0xAD5000
	0x0364EA00 LDR X8, [X8 + 0x770]
	0x0364EA04 MOV X0, X21
	0x0364EA08 MOV X2, X31
	0x0364EA0C LDR X1, [X8]
	0x0364EA10 BL 0x321BA08
	0x0364EA14 TBZ X0, 0x0, 0x364EA2C
	0x0364EA18 AND W1, W20, 0x1
	0x0364EA1C MOV X0, X19
	0x0364EA20 LDP X20, X19, [X31 + 0x10]
	0x0364EA24 LDP X30, X21, [X31], #0x20
	0x0364EA28 B 0x364ECEC
	0x0364EA2C ADRP X8, 0xAD5000
	0x0364EA30 LDR X8, [X8 + 0x650]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD93000
	005 Move X20, 0xAEF000
	006 Move W8, [X19+1526]
	007 Move X20, [X20+1912]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAEF000
	013 Move X0, [X0+1912]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1526], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x0364EA34 MOV X0, X21
	0x0364EA38 MOV X2, X31

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Text.Encoding <ReadT61String>b__45_0()

Disassembly:
	0x0364EA3C LDR X1, [X8]
	0x0364EA40 BL 0x321BA08
	0x0364EA44 TBZ X0, 0x0, 0x364EA5C
	0x0364EA48 AND W1, W20, 0x1
	0x0364EA4C MOV X0, X19
	0x0364EA50 LDP X20, X19, [X31 + 0x10]
	0x0364EA54 LDP X30, X21, [X31], #0x20
	0x0364EA58 B 0x364EDF8
	0x0364EA5C ADRP X8, 0xAEB000
	0x0364EA60 LDR X8, [X8 + 0x8C0]
	0x0364EA64 MOV X0, X21
	0x0364EA68 MOV X2, X31
	0x0364EA6C LDR X1, [X8]
	0x0364EA70 BL 0x321BA08
	0x0364EA74 TBZ X0, 0x0, 0x364EA8C
	0x0364EA78 AND W1, W20, 0x1
	0x0364EA7C MOV X0, X19
	0x0364EA80 LDP X20, X19, [X31 + 0x10]
	0x0364EA84 LDP X30, X21, [X31], #0x20
	0x0364EA88 B 0x364EF04
	0x0364EA8C ADRP X8, 0xAEB000
	0x0364EA90 LDR X8, [X8 + 0x8D8]
	0x0364EA94 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD93000
	005 Move X20, 0xAD5000
	006 Move W8, [X19+1527]
	007 Move X20, [X20+2088]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAD5000
	013 Move X0, [X0+2088]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1527], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move W2, 1
	020 Move W1, W31
	021 Move X3, X31
	022 Move X19, X0
	023 Call UTF8Encoding..ctor, X0, X1, X2
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Text.Encoding <ReadT61String>b__45_1()

Disassembly:
	0x0364EA98 MOV X2, X31
	0x0364EA9C LDR X1, [X8]
	0x0364EAA0 BL 0x321BA08
	0x0364EAA4 TBZ X0, 0x0, 0x364EABC
	0x0364EAA8 MOV X0, X19
	0x0364EAAC LDP X20, X19, [X31 + 0x10]
	0x0364EAB0 MOV W1, W31
	0x0364EAB4 LDP X30, X21, [X31], #0x20
	0x0364EAB8 B 0x364F2CC
	0x0364EABC MOV X0, X19
	0x0364EAC0 LDP X20, X19, [X31 + 0x10]
	0x0364EAC4 MOV W1, W31
	0x0364EAC8 LDP X30, X21, [X31], #0x20
	0x0364EACC B 0x364E80C
	0x0364EAD0 BL 0x1C16F20
	0x0364EAD4 STR X30, [X31 - 0x30]!
	0x0364EAD8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD93000
	005 Move X20, 0xADC000
	006 Move W8, [X19+1528]
	007 Move X20, [X20+2448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xADC000
	013 Move X0, [X0+2448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1528], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X1, X31
	021 Move X30, [X31+32]
	022 Call Encoding.GetEncoding, X0
	023 Return X0

Method: System.Globalization.DateTimeFormatInfo <ReadTime>b__51_0()

Disassembly:
	0x0364EADC STP X20, X19, [X31 + 0x20]
	0x0364EAE0 ADRP X21, 0xD92000
	0x0364EAE4 ADRP X22, 0xAEE000
	0x0364EAE8 LDRB W8, [X21 + 0x60A]
	0x0364EAEC LDR X22, [X22 + 0x860]
	0x0364EAF0 MOV W19, W1
	0x0364EAF4 MOV X20, X0
	0x0364EAF8 TBNZ X8, 0x0, 0x364EB10
	0x0364EAFC ADRP X0, 0xAEE000
	0x0364EB00 LDR X0, [X0 + 0x860]
	0x0364EB04 BL 0x1C16CF4
	0x0364EB08 MOVZ W8, 0x1
	0x0364EB0C STRB W8, [X21 + 0x60A]
	0x0364EB10 LDR X0, [X22]
	0x0364EB14 BL 0x1C16F10
	0x0364EB18 MOV X21, X0
	0x0364EB1C MOV X1, X20
	0x0364EB20 MOV W2, W31
	0x0364EB24 BL 0x364F6A4
	0x0364EB28 CBZ X21, 0x364EB50
	0x0364EB2C LDR X8, [X21]
	0x0364EB30 LDP X9, X2, [X8 + 0x198]
	0x0364EB34 AND W1, W19, 0x1
	0x0364EB38 MOV X0, X21
	0x0364EB3C BLR X9
	0x0364EB40 LDP X20, X19, [X31 + 0x20]
	0x0364EB44 LDP X22, X21, [X31 + 0x10]
	0x0364EB48 LDR X30, [X31], #0x30
	0x0364EB4C RET
	0x0364EB50 BL 0x1C16F20
	0x0364EB54 B 0x364EB5C
	0x0364EB58 B 0x364EB5C
	0x0364EB5C MOV X19, X0
	0x0364EB60 CMP W1, 0x1
	0x0364EB64 B.NE 0x364EBD4
	0x0364EB68 MOV X0, X19
	0x0364EB6C BL 0x3EB1AD0
	0x0364EB70 MOV X19, X0
	0x0364EB74 ADRP X0, 0xAAB000
	0x0364EB78 LDR X0, [X0 + 0xCC0]
	0x0364EB7C BL 0x1C16D08
	0x0364EB80 LDR X8, [X19]
	0x0364EB84 LDR X1, [X8]
	0x0364EB88 BL 0x1C17270
	0x0364EB8C TBZ X0, 0x0, 0x364EBAC
	0x0364EB90 BL 0x3EB1AE0
	0x0364EB94 ADRP X0, 0xAA7000
	0x0364EB98 LDR X0, [X0 + 0x278]
	0x0364EB9C BL 0x1C16D08
	0x0364EBA0 LDR X8, [X0 + 0xB8]
	0x0364EBA4 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD93000
	005 Move X20, 0xAA8000
	006 Move W8, [X19+1529]
	007 Move X20, [X20+3144]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xAA8000
	013 Move X0, [X0+3144]
	014 Call 0x1C17CF4
	015 Move X0, 0xADB000
	016 Move X0, [X0+808]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1529], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X31
	026 Call CultureInfo.get_InvariantCulture
	027 Compare X0, 0
	028 JumpIfEqual {58}
	029 Move X8, [X0]
	030 Move X9, [X8+568]
	031 Move X1, [X8+576]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Compare X0, 0
	034 JumpIfEqual {58}
	035 Move X1, X31
	036 Call DateTimeFormatInfo.Clone, X0
	037 Compare X0, 0
	038 JumpIfEqual {58}
	039 Move X8, 0xADB000
	040 Move X8, [X8+808]
	041 Move X19, X0
	042 Move X1, [X8]
	043 Move X8, [X0]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, [X19+120]
	046 Compare X0, 0
	047 JumpIfEqual {58}
	048 Move X8, [X0]
	049 Move W1, 2049
	050 Move X9, [X8+760]
	051 Move X2, [X8+768]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Return X0
	058 Call 0x1C17F20
	059 Move X0, X19
	060 Call 0x1C181E0

