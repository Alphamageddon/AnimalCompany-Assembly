Type: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension

Method: System.Void .ctor()

Disassembly:
	0x03651E04 MOV X1, X22
	0x03651E08 BLR X9
	0x03651E0C CBZ X20, 0x3651ED4
	0x03651E10 MOV X0, X20
	0x03651E14 MOV X1, X23
	0x03651E18 BL 0x3652274
	0x03651E1C B 0x3651D2C
	0x03651E20 CBZ X20, 0x3651ED8
	0x03651E24 MOV X0, X20
	0x03651E28 MOV X1, X22
	0x03651E2C BL 0x3652274
	0x03651E30 B 0x3651D2C
	0x03651E34 MOV X22, X31
	0x03651E38 MOVZ W23, 0x6
	0x03651E3C CBZ X21, 0x3651EA0
	0x03651E40 ADRP X10, 0xAA2000
	0x03651E44 LDR X8, [X21]
	0x03651E48 LDR X10, [X10 + 0xE00]
	0x03651E4C LDRH W9, [X8 + 0x12E]
	0x03651E50 LDR X1, [X10]
	0x03651E54 CBZ X9, 0x3651E78
	0x03651E58 LDR X10, [X8 + 0xB0]
	0x03651E5C ADD X10, X10, 0x8
	0x03651E60 LDUR X11, [X10 - 0x8]
	0x03651E64 CMP X11, X1
	0x03651E68 B.EQ 0x3651E88
	0x03651E6C SUBS X9, X9, 0x1
	0x03651E70 ADD X10, X10, 0x10
	0x03651E74 B.NE 0x3651E60
	0x03651E78 MOV X0, X21
	0x03651E7C MOV W2, W31
	0x03651E80 BL 0x1C5C788
	0x03651E84 B 0x3651E94
	0x03651E88 LDRSW X9, [X10]
	0x03651E8C ADD X8, X8, X9, 0x4, LSL
	0x03651E90 ADD X0, X8, 0x138
	0x03651E94 LDP X8, X1, [X0]
	0x03651E98 MOV X0, X21
	0x03651E9C BLR X8
	0x03651EA0 CBNZ X22, 0x3651EE4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD90000
	008 Move X22, 0xAEC000
	009 Move X20, 0xAD1000
	010 Move X21, 0xAE9000
	011 Move W8, [X23+1564]
	012 Move X22, [X22+2016]
	013 Move X20, [X20+552]
	014 Move X21, [X21+2296]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xAEC000
	021 Move X0, [X0+2016]
	022 Call 0x1C17CF4
	023 Move X0, 0xAE9000
	024 Move X0, [X0+2296]
	025 Call 0x1C17CF4
	026 Move X0, 0xAD1000
	027 Move X0, [X0+552]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+1564], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Call Object..ctor, X0
	034 Move X0, [X22]
	035 Call 0x1C17F10
	036 Move X22, [X20]
	037 Move X21, [X21]
	038 Move X1, X31
	039 Move X20, X0
	040 Call Object..ctor, X0
	041 Move [X20+16], X22
	042 Move [X20+24], X21
	043 Move [X19+16], X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return 

Method: System.Void .ctor(System.Security.Cryptography.AsnEncodedData encodedBasicConstraints, System.Boolean critical)

Disassembly:
	0x036506A4 MOV X0, X19
	0x036506A8 MOV X1, X20
	0x036506AC BL 0x364E404
	0x036506B0 LDR X8, [X20 + 0x18]
	0x036506B4 CBZ X8, 0x36506C8
	0x036506B8 MOV X0, X19
	0x036506BC LDP X20, X19, [X31 + 0x10]
	0x036506C0 LDP X30, X21, [X31], #0x20
	0x036506C4 B 0x3650734
	0x036506C8 ADRP X8, 0xAA5000
	0x036506CC LDR X8, [X8 + 0x278]
	0x036506D0 LDR X8, [X8]
	0x036506D4 LDR X8, [X8 + 0xB8]
	0x036506D8 LDR X8, [X8]
	0x036506DC STR X8, [X19 + 0x20]
	0x036506E0 LDP X20, X19, [X31 + 0x10]
	0x036506E4 LDP X30, X21, [X31], #0x20
	0x036506E8 RET
	0x036506EC ADRP X0, 0xAA8000
	0x036506F0 LDR X0, [X0 + 0x528]
	0x036506F4 BL 0x1C16D08
	0x036506F8 BL 0x1C16F10
	0x036506FC MOV X19, X0
	0x03650700 ADRP X0, 0xAEC000
	0x03650704 LDR X0, [X0 + 0x960]
	0x03650708 BL 0x1C16D08
	0x0365070C MOV X1, X0
	0x03650710 MOV X0, X19
	0x03650714 MOV X2, X31
	0x03650718 BL 0x330E100
	0x0365071C ADRP X0, 0xAEC000
	0x03650720 LDR X0, [X0 + 0x968]
	0x03650724 BL 0x1C16D08
	0x03650728 MOV X1, X0
	0x0365072C MOV X0, X19
	0x03650730 BL 0x1C16DEC
	0x03650734 STP X30, X21, [X31 - 0x20]!
	0x03650738 STP X20, X19, [X31 + 0x10]
	0x0365073C ADRP X20, 0xD90000
	0x03650740 LDRB W8, [X20 + 0x619]
	0x03650744 MOV X19, X0
	0x03650748 TBNZ X8, 0x0, 0x3650784
	0x0365074C ADRP X0, 0xAD0000
	0x03650750 LDR X0, [X0 + 0xB98]
	0x03650754 BL 0x1C16CF4
	0x03650758 ADRP X0, 0xAA5000
	0x0365075C LDR X0, [X0 + 0x278]
	0x03650760 BL 0x1C16CF4
	0x03650764 ADRP X0, 0xAD0000
	0x03650768 LDR X0, [X0 + 0xCF8]
	0x0365076C BL 0x1C16CF4
	0x03650770 ADRP X0, 0xAA3000
	0x03650774 LDR X0, [X0 + 0x838]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xD91000
	010 Move X24, 0xAED000
	011 Move X22, 0xAD2000
	012 Move X23, 0xAEA000
	013 Move W8, [X25+1565]
	014 Move X24, [X24+2016]
	015 Move X22, [X22+552]
	016 Move X23, [X23+2296]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xAED000
	025 Move X0, [X0+2016]
	026 Call 0x1C17CF4
	027 Move X0, 0xAEA000
	028 Move X0, [X0+2296]
	029 Call 0x1C17CF4
	030 Move X0, 0xAD2000
	031 Move X0, [X0+552]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+1565], W8
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object..ctor, X0
	038 Move X0, [X24]
	039 Call 0x1C17F10
	040 Move X24, [X22]
	041 Move X23, [X23]
	042 Move X1, X31
	043 Move X22, X0
	044 Call Object..ctor, X0
	045 Move [X22+16], X24
	046 Move [X22+24], X23
	047 Move [X19+16], X22
	048 Compare X21, 0
	049 JumpIfEqual {66}
	050 Move X1, [X21+24]
	051 And W8, W20, 1
	052 Move X0, X19
	053 Move [X19+32], W8
	054 Move [X19+24], X1
	055 Call X509BasicConstraintsExtension.Decode, X0, X1
	056 Move [X19+40], W0
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X24, [X31+16]
	062 Move X23, [X31+24]
	063 Move X30, [X31+64]
	064 Move X25, [X31+72]
	065 Return 
	066 Call 0x1C17F20

Method: System.Void .ctor(System.Boolean certificateAuthority, System.Boolean hasPathLengthConstraint, System.Int32 pathLengthConstraint, System.Boolean critical)

Disassembly:
	0x03652070 CMP W12, W11
	0x03652074 B.CS 0x3652080
	0x03652078 MOV X19, X31
	0x0365207C B 0x3652094
	0x03652080 LDR X10, [X10 + 0xC8]
	0x03652084 ADD X10, X10, X11, 0x3, LSL
	0x03652088 LDUR X10, [X10 - 0x8]
	0x0365208C CMP X10, X9
	0x03652090 CSEL X19, X8, X31, EQ
	0x03652094 MOV X0, X19
	0x03652098 MOV X1, X31
	0x0365209C BL 0x326C1D8
	0x036520A0 MOV X0, X19
	0x036520A4 LDP X20, X19, [X31 + 0x10]
	0x036520A8 LDR X30, [X31], #0x20
	0x036520AC RET
	0x036520B0 STR X30, [X31 - 0x20]!
	0x036520B4 STP X20, X19, [X31 + 0x10]
	0x036520B8 ADRP X20, 0xD8E000
	0x036520BC LDRB W8, [X20 + 0x628]
	0x036520C0 MOV X19, X0
	0x036520C4 TBNZ X8, 0x0, 0x365213C
	0x036520C8 ADRP X0, 0xAEA000
	0x036520CC LDR X0, [X0 + 0x860]
	0x036520D0 BL 0x1C16CF4
	0x036520D4 ADRP X0, 0xAEA000
	0x036520D8 LDR X0, [X0 + 0x868]
	0x036520DC BL 0x1C16CF4
	0x036520E0 ADRP X0, 0xAEA000
	0x036520E4 LDR X0, [X0 + 0x870]
	0x036520E8 BL 0x1C16CF4
	0x036520EC ADRP X0, 0xAEA000
	0x036520F0 LDR X0, [X0 + 0x878]
	0x036520F4 BL 0x1C16CF4
	0x036520F8 ADRP X0, 0xAD1000
	0x036520FC LDR X0, [X0 + 0x5C8]
	0x03652100 BL 0x1C16CF4
	0x03652104 ADRP X0, 0xAEA000
	0x03652108 LDR X0, [X0 + 0x9E0]
	0x0365210C BL 0x1C16CF4
	0x03652110 ADRP X0, 0xAD1000
	0x03652114 LDR X0, [X0 + 0x650]
	0x03652118 BL 0x1C16CF4
	0x0365211C ADRP X0, 0xAD1000
	0x03652120 LDR X0, [X0 + 0x770]
	0x03652124 BL 0x1C16CF4
	0x03652128 ADRP X0, 0xACF000
	0x0365212C LDR X0, [X0 + 0x228]
	0x03652130 BL 0x1C16CF4
	0x03652134 MOVZ W8, 0x1
	0x03652138 STRB W8, [X20 + 0x628]
	0x0365213C CBZ X19, 0x3652270
	0x03652140 ADRP X8, 0xAEA000
	0x03652144 LDR X8, [X8 + 0x9E0]
	0x03652148 LDR X19, [X19 + 0x10]
	0x0365214C MOV X2, X31
	0x03652150 LDR X1, [X8]
	0x03652154 MOV X0, X19
	0x03652158 BL 0x321BA08
	0x0365215C TBZ X0, 0x0, 0x3652180
	0x03652160 MOV X0, X31
	0x03652164 BL 0x35E1250
	0x03652168 CBZ X0, 0x3652270
	0x0365216C MOV X1, X31
	0x03652170 BL 0x35E1508
	0x03652174 MOV X19, X31
	0x03652178 TBNZ X0, 0x0, 0x365219C
	0x0365217C B 0x3652260
	0x03652180 ADRP X8, 0xACF000
	0x03652184 LDR X8, [X8 + 0x228]
	0x03652188 MOV X0, X19
	0x0365218C MOV X2, X31
	0x03652190 LDR X1, [X8]
	0x03652194 BL 0x321BA08
	0x03652198 TBZ X0, 0x0, 0x36521B8
	0x0365219C ADRP X8, 0xAEA000
	0x036521A0 LDR X8, [X8 + 0x860]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xD8F000
	009 Move W8, [X24+1566]
	010 Move W19, W4
	011 Move W23, W3
	012 Move W22, W2
	013 Move W21, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xAEB000
	020 Move X0, [X0+2016]
	021 Call 0x1C17CF4
	022 Move X0, 0xAE8000
	023 Move X0, [X0+2296]
	024 Call 0x1C17CF4
	025 Move X0, 0xAD0000
	026 Move X0, [X0+552]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X24+1566], W8
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object..ctor, X0
	033 Move TEMP, X22
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move TEMP, X23
	038 And TEMP, TEMP, -2147483648
	039 Compare TEMP, -2147483648
	040 JumpIfEqual {77}
	041 Move [X20+36], W23
	042 Move X8, 0xAEB000
	043 Move X8, [X8+2016]
	044 And W9, W22, 1
	045 And W10, W21, 1
	046 Move [X20+34], W9
	047 Move [X20+33], W10
	048 Move X0, [X8]
	049 Move X21, 0xAD0000
	050 Move X22, 0xAE8000
	051 Move X21, [X21+552]
	052 Move X22, [X22+2296]
	053 Call 0x1C17F10
	054 Move X23, [X21]
	055 Move X22, [X22]
	056 Move X1, X31
	057 Move X21, X0
	058 Call Object..ctor, X0
	059 And W8, W19, 1
	060 Move X0, X20
	061 Move [X21+16], X23
	062 Move [X21+24], X22
	063 Move [X20+16], X21
	064 Move [X20+32], W8
	065 Call X509BasicConstraintsExtension.Encode, X0
	066 Move X1, X0
	067 Move X0, X20
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X30, [X31+64]
	075 Call AsnEncodedData.set_RawData, X0, X1
	076 Return 
	077 Move X0, 0xAAA000
	078 Move X0, [X0+1888]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xAEB000
	083 Move X0, [X0+2424]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Move X2, X31
	088 Call ArgumentOutOfRangeException..ctor, X0, X1
	089 Move X0, 0xAEB000
	090 Move X0, [X0+2432]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Call 0x1C17DEC

Method: System.Boolean get_CertificateAuthority()

Disassembly:
	0x03652300 LDR X8, [X0]
	0x03652304 LDR X2, [X8 + 0x248]
	0x03652308 LDR X1, [X8 + 0x250]
	0x0365230C LDP X30, X19, [X31], #0x10
	0x03652310 BR X2
	0x03652314 BL 0x1C16F20
	0x03652318 STR X30, [X31 - 0x20]!
	0x0365231C STP X20, X19, [X31 + 0x10]
	0x03652320 ADRP X20, 0xD8E000
	0x03652324 LDRB W8, [X20 + 0x625]
	0x03652328 MOV X19, X0
	0x0365232C TBNZ X8, 0x0, 0x3652350
	0x03652330 ADRP X0, 0xACE000
	0x03652334 LDR X0, [X0 + 0xF60]
	0x03652338 BL 0x1C16CF4
	0x0365233C ADRP X0, 0xACE000
	0x03652340 LDR X0, [X0 + 0xF48]
	0x03652344 BL 0x1C16CF4
	0x03652348 MOVZ W8, 0x1
	0x0365234C STRB W8, [X20 + 0x625]
	0x03652350 MOV X0, X19
	0x03652354 MOV X1, X31
	0x03652358 BL 0x326B690
	0x0365235C MOV X0, X19
	0x03652360 BL 0x36522E4
	0x03652364 MOV X20, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+40]
	004 Or W8, W8, 4
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, [X0+33]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xACF000
	011 Move X0, [X0+3296]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xAEB000
	016 Move X0, [X0+2440]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call CryptographicException..ctor, X0, X1
	022 Move X0, 0xAEB000
	023 Move X0, [X0+2448]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_HasPathLengthConstraint()

Disassembly:
	0x03652368 TBZ X0, 0x0, 0x3652414
	0x0365236C LDR X20, [X19 + 0x90]
	0x03652370 BL 0x1C16D44
	0x03652374 CBZ X20, 0x3652380
	0x03652378 LDR X20, [X19 + 0x90]
	0x0365237C B 0x3652410
	0x03652380 LDR X8, [X19]
	0x03652384 MOV X0, X19
	0x03652388 LDR X9, [X8 + 0x208]
	0x0365238C LDR X1, [X8 + 0x210]
	0x03652390 BLR X9
	0x03652394 ADRP X8, 0xACE000
	0x03652398 LDR X8, [X8 + 0xF60]
	0x0365239C MOV X2, X31
	0x036523A0 MOV X20, X0
	0x036523A4 LDR X1, [X8]
	0x036523A8 BL 0x321BA08
	0x036523AC TBZ X0, 0x0, 0x36523CC
	0x036523B0 MOV X0, X19
	0x036523B4 BL 0x3652024
	0x036523B8 CBZ X0, 0x3652424
	0x036523BC LDR X8, [X0]
	0x036523C0 LDR X9, [X8 + 0x258]
	0x036523C4 LDR X1, [X8 + 0x260]
	0x036523C8 B 0x3652400
	0x036523CC ADRP X8, 0xACE000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+40]
	004 Or W8, W8, 4
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, [X0+34]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xACF000
	011 Move X0, [X0+3296]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xAEB000
	016 Move X0, [X0+2440]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call CryptographicException..ctor, X0, X1
	022 Move X0, 0xAEB000
	023 Move X0, [X0+2456]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Int32 get_PathLengthConstraint()

Disassembly:
	0x036523D0 LDR X8, [X8 + 0xF48]
	0x036523D4 MOV X0, X20
	0x036523D8 MOV X2, X31
	0x036523DC LDR X1, [X8]
	0x036523E0 BL 0x321BA08
	0x036523E4 TBZ X0, 0x0, 0x3652428
	0x036523E8 MOV X0, X19
	0x036523EC BL 0x3652024
	0x036523F0 CBZ X0, 0x3652424
	0x036523F4 LDR X8, [X0]
	0x036523F8 LDR X9, [X8 + 0x268]
	0x036523FC LDR X1, [X8 + 0x270]
	0x03652400 BLR X9
	0x03652404 MOV X20, X0
	0x03652408 BL 0x1C16D44
	0x0365240C STR X20, [X19 + 0x90]
	0x03652410 BL 0x1C16D44
	0x03652414 MOV X0, X20
	0x03652418 LDP X20, X19, [X31 + 0x10]
	0x0365241C LDR X30, [X31], #0x20
	0x03652420 RET
	0x03652424 BL 0x1C16F20
	0x03652428 ADRP X0, 0xAA1000
	0x0365242C LDR X0, [X0 + 0xB40]
	0x03652430 BL 0x1C16D08
	0x03652434 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+40]
	004 Or W8, W8, 4
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, [X0+36]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xACF000
	011 Move X0, [X0+3296]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xAEB000
	016 Move X0, [X0+2440]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call CryptographicException..ctor, X0, X1
	022 Move X0, 0xAEB000
	023 Move X0, [X0+2464]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData)

Disassembly:
	0x03652438 MOV X19, X0
	0x0365243C ADRP X0, 0xAEA000
	0x03652440 LDR X0, [X0 + 0x9F0]
	0x03652444 BL 0x1C16D08
	0x03652448 MOV X1, X0
	0x0365244C MOV X0, X19
	0x03652450 MOV X2, X31
	0x03652454 BL 0x3379A44
	0x03652458 ADRP X0, 0xAEA000
	0x0365245C LDR X0, [X0 + 0x9F8]
	0x03652460 BL 0x1C16D08
	0x03652464 MOV X1, X0
	0x03652468 MOV X0, X19
	0x0365246C BL 0x1C16DEC
	0x03652470 STP X30, X19, [X31 - 0x10]!
	0x03652474 ADRP X0, 0xACC000
	0x03652478 LDR X0, [X0 + 0xC50]
	0x0365247C BL 0x1C16D08
	0x03652480 BL 0x1C16F10
	0x03652484 MOV X1, X31
	0x03652488 MOV X19, X0
	0x0365248C BL 0x338E344
	0x03652490 ADRP X0, 0xAEA000
	0x03652494 LDR X0, [X0 + 0xA00]
	0x03652498 BL 0x1C16D08
	0x0365249C MOV X1, X0
	0x036524A0 MOV X0, X19
	0x036524A4 BL 0x1C16DEC
	0x036524A8 STR X30, [X31 - 0x20]!
	0x036524AC STP X20, X19, [X31 + 0x10]
	0x036524B0 MOV X1, X31
	0x036524B4 MOV X19, X0
	0x036524B8 BL 0x326B690
	0x036524BC LDR X20, [X19 + 0x80]
	0x036524C0 BL 0x1C16D44
	0x036524C4 CBNZ X20, 0x36524F0
	0x036524C8 MOV X0, X19
	0x036524CC BL 0x3652024
	0x036524D0 CBZ X0, 0x3652500
	0x036524D4 LDR X8, [X0]
	0x036524D8 LDR X9, [X8 + 0x298]
	0x036524DC LDR X1, [X8 + 0x2A0]
	0x036524E0 BLR X9
	0x036524E4 MOV X20, X0
	0x036524E8 BL 0x1C16D44
	0x036524EC STR X20, [X19 + 0x80]
	0x036524F0 MOV X0, X20
	0x036524F4 LDP X20, X19, [X31 + 0x10]
	0x036524F8 LDR X30, [X31], #0x20
	0x036524FC RET
	0x03652500 BL 0x1C16F20
	0x03652504 MOV X1, X31
	0x03652508 B 0x326C0EC
	0x0365250C MOV X1, X31
	0x03652510 B 0x326BF08
	0x03652514 STR X30, [X31 - 0x40]!
	0x03652518 STP X24, X23, [X31 + 0x10]
	0x0365251C STP X22, X21, [X31 + 0x20]
	0x03652520 STP X20, X19, [X31 + 0x30]
	0x03652524 ADRP X20, 0xD8E000
	0x03652528 LDRB W8, [X20 + 0x626]
	0x0365252C MOV X19, X0
	0x03652530 TBNZ X8, 0x0, 0x3652560
	0x03652534 ADRP X0, 0xAEA000
	0x03652538 LDR X0, [X0 + 0x8E8]
	0x0365253C BL 0x1C16CF4
	0x03652540 ADRP X0, 0xAEA000
	0x03652544 LDR X0, [X0 + 0x7E0]
	0x03652548 BL 0x1C16CF4
	0x0365254C ADRP X0, 0xAEA000
	0x03652550 LDR X0, [X0 + 0x900]
	0x03652554 BL 0x1C16CF4
	0x03652558 MOVZ W8, 0x1
	0x0365255C STRB W8, [X20 + 0x626]
	0x03652560 MOV X0, X19
	0x03652564 MOV X1, X31
	0x03652568 BL 0x326B690
	0x0365256C LDR X20, [X19 + 0x88]
	0x03652570 BL 0x1C16D44
	0x03652574 CBNZ X20, 0x3652644
	0x03652578 LDR X8, [X19]
	0x0365257C MOV X0, X19
	0x03652580 LDR X9, [X8 + 0x208]
	0x03652584 LDR X1, [X8 + 0x210]
	0x03652588 BLR X9
	0x0365258C LDR X8, [X19]
	0x03652590 MOV X20, X0
	0x03652594 MOV X0, X19
	0x03652598 LDR X9, [X8 + 0x218]
	0x0365259C LDR X1, [X8 + 0x220]
	0x036525A0 BLR X9
	0x036525A4 LDR X8, [X19]
	0x036525A8 MOV X21, X0
	0x036525AC MOV X0, X19
	0x036525B0 LDR X9, [X8 + 0x228]
	0x036525B4 LDR X1, [X8 + 0x230]
	0x036525B8 BLR X9
	0x036525BC ADRP X8, 0xAEA000
	0x036525C0 LDR X8, [X8 + 0x7E0]
	0x036525C4 MOV X22, X0
	0x036525C8 LDR X8, [X8]
	0x036525CC MOV X0, X8
	0x036525D0 BL 0x1C16F10
	0x036525D4 MOV X1, X20
	0x036525D8 MOV X23, X0
	0x036525DC BL 0x364DBB0
	0x036525E0 ADRP X20, 0xAEA000
	0x036525E4 LDR X20, [X20 + 0x8E8]
	0x036525E8 LDR X0, [X20]
	0x036525EC BL 0x1C16F10
	0x036525F0 MOV X1, X23
	0x036525F4 MOV X2, X21
	0x036525F8 MOV X24, X0
	0x036525FC BL 0x364E4F4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD8F000
	008 Move W8, [X21+1567]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xAEB000
	016 Move X0, [X0+2016]
	017 Call 0x1C17CF4
	018 Move X0, 0xAE8000
	019 Move X0, [X0+3880]
	020 Call 0x1C17CF4
	021 Move X0, 0xAE8000
	022 Move X0, [X0+2296]
	023 Call 0x1C17CF4
	024 Move X0, 0xAD0000
	025 Move X0, [X0+552]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1567], W8
	029 Compare X20, 0
	030 JumpIfEqual {106}
	031 Move X8, 0xAE8000
	032 Move X8, [X8+3880]
	033 Move X9, [X20]
	034 Move X8, [X8]
	035 Move W11, [X9+304]
	036 Move W10, [X8+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, [X9+200]
	039 Add X9, X9, X10
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0xAEB000
	043 Move X8, [X8+2016]
	044 Move X22, [X20+16]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X21, X0
	048 Compare X22, 0
	049 JumpIfEqual {53}
	050 Move X0, X21
	051 Move X1, X22
	052 Call Oid..ctor, X0, X1
	053 Move X8, 0xAD0000
	054 Move X9, 0xAE8000
	055 Move X8, [X8+552]
	056 Move X9, [X9+2296]
	057 Move X0, X21
	058 Move X1, X31
	059 Move X22, [X8]
	060 Move X23, [X9]
	061 Call Object..ctor, X0
	062 Move [X21+16], X22
	063 Move [X21+24], X23
	064 Move [X19+16], X21
	065 Move X1, [X20+24]
	066 Move X0, X19
	067 Call AsnEncodedData.set_RawData, X0, X1
	068 Move W8, [X20+32]
	069 Move X1, [X19+24]
	070 Move X0, X19
	071 Move [X19+32], W8
	072 Call X509BasicConstraintsExtension.Decode, X0, X1
	073 Move [X19+40], W0
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Move X0, 0xAEB000
	082 Move X0, [X0+2472]
	083 Call 0x1C17D08
	084 Move X1, X31
	085 Call Locale.GetText, X0
	086 Move X19, X0
	087 Move X0, 0xAAA000
	088 Move X0, [X0+1400]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X20, X0
	092 Move X0, 0xAEB000
	093 Move X0, [X0+2120]
	094 Call 0x1C17D08
	095 Move X2, X0
	096 Move X0, X20
	097 Move X1, X19
	098 Move X3, X31
	099 Call ArgumentException..ctor, X0, X1, X2
	100 Move X0, 0xAEB000
	101 Move X0, [X0+2480]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X20
	105 Call 0x1C17DEC
	106 Move X0, 0xAA7000
	107 Move X0, [X0+1320]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xAEB000
	112 Move X0, [X0+2120]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentNullException..ctor, X0, X1
	118 Move X0, 0xAEB000
	119 Move X0, [X0+2480]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC

Method: System.Security.Cryptography.AsnDecodeStatus Decode(System.Byte[] extension)

Disassembly:
	0x03651EAC CBNZ W23, 0x3651EB8
	0x03651EB0 BL 0x1C16D44
	0x03651EB4 STR X20, [X19 + 0x98]
	0x03651EB8 MOV X0, X20
	0x03651EBC LDP X20, X19, [X31 + 0x30]
	0x03651EC0 LDP X22, X21, [X31 + 0x20]
	0x03651EC4 LDP X24, X23, [X31 + 0x10]
	0x03651EC8 LDP X30, X25, [X31], #0x40
	0x03651ECC RET
	0x03651ED0 BL 0x1C16F20
	0x03651ED4 BL 0x1C16F20
	0x03651ED8 BL 0x1C16F20
	0x03651EDC BL 0x1C16F20
	0x03651EE0 BL 0x1C16F20
	0x03651EE4 MOV X0, X22
	0x03651EE8 BL 0x1C16F18
	0x03651EEC B 0x3651F10
	0x03651EF0 B 0x3651F10
	0x03651EF4 B 0x3651F10
	0x03651EF8 B 0x3651F10
	0x03651EFC B 0x3651F10
	0x03651F00 B 0x3651F10
	0x03651F04 B 0x3651F10
	0x03651F08 B 0x3651F10
	0x03651F0C B 0x3651F10
	0x03651F10 MOV X23, X0
	0x03651F14 CMP W1, 0x1
	0x03651F18 B.NE 0x3651F38
	0x03651F1C MOV X0, X23
	0x03651F20 BL 0x3EB1AD0
	0x03651F24 LDR X22, [X0]
	0x03651F28 BL 0x3EB1AE0
	0x03651F2C MOV W23, W31
	0x03651F30 CBNZ X21, 0x3651E40
	0x03651F34 B 0x3651EA0
	0x03651F38 MOV X22, X31
	0x03651F3C B 0x3651F44
	0x03651F40 MOV X23, X0
	0x03651F44 CBZ X21, 0x3651FA8
	0x03651F48 ADRP X10, 0xAA2000
	0x03651F4C LDR X8, [X21]
	0x03651F50 LDR X10, [X10 + 0xE00]
	0x03651F54 LDRH W9, [X8 + 0x12E]
	0x03651F58 LDR X1, [X10]
	0x03651F5C CBZ X9, 0x3651F80
	0x03651F60 LDR X10, [X8 + 0xB0]
	0x03651F64 ADD X10, X10, 0x8
	0x03651F68 LDUR X11, [X10 - 0x8]
	0x03651F6C CMP X11, X1
	0x03651F70 B.EQ 0x3651F90
	0x03651F74 SUBS X9, X9, 0x1
	0x03651F78 ADD X10, X10, 0x10
	0x03651F7C B.NE 0x3651F68
	0x03651F80 MOV X0, X21
	0x03651F84 MOV W2, W31
	0x03651F88 BL 0x1C5C788
	0x03651F8C B 0x3651F9C
	0x03651F90 LDRSW X9, [X10]
	0x03651F94 ADD X8, X8, X9, 0x4, LSL
	0x03651F98 ADD X0, X8, 0x138
	0x03651F9C LDP X8, X1, [X0]
	0x03651FA0 MOV X0, X21
	0x03651FA4 BLR X8
	0x03651FA8 CBNZ X22, 0x3651FB4
	0x03651FAC MOV X0, X23
	0x03651FB0 BL 0x1D2C690
	0x03651FB4 MOV X0, X22
	0x03651FB8 BL 0x1C16F18
	0x03651FBC BL 0x1990590
	0x03651FC0 STP X30, X21, [X31 - 0x20]!
	0x03651FC4 STP X20, X19, [X31 + 0x10]
	0x03651FC8 ADRP X21, 0xD8F000
	0x03651FCC ADRP X20, 0xACF000
	0x03651FD0 LDRB W8, [X21 + 0x688]
	0x03651FD4 LDR X20, [X20 + 0xBA0]
	0x03651FD8 MOV X19, X0
	0x03651FDC TBNZ X8, 0x0, 0x3651FF4
	0x03651FE0 ADRP X0, 0xACF000
	0x03651FE4 LDR X0, [X0 + 0xBA0]
	0x03651FE8 BL 0x1C16CF4
	0x03651FEC MOVZ W8, 0x1
	0x03651FF0 STRB W8, [X21 + 0x688]
	0x03651FF4 MOV X0, X19
	0x03651FF8 MOV X1, X31
	0x03651FFC BL 0x33BDD8C
	0x03652000 LDR X0, [X20]
	0x03652004 BL 0x1C16F10
	0x03652008 MOV X1, X31
	0x0365200C MOV X20, X0
	0x03652010 BL 0x3351F5C
	0x03652014 STR X20, [X19 + 0x10]
	0x03652018 LDP X20, X19, [X31 + 0x10]
	0x0365201C LDP X30, X21, [X31], #0x20
	0x03652020 RET
	0x03652024 STR X30, [X31 - 0x20]!
	0x03652028 STP X20, X19, [X31 + 0x10]
	0x0365202C ADRP X20, 0xD8E000
	0x03652030 LDRB W8, [X20 + 0x629]
	0x03652034 MOV X19, X0
	0x03652038 TBNZ X8, 0x0, 0x3652050
	0x0365203C ADRP X0, 0xAE7000
	0x03652040 LDR X0, [X0 + 0x1C8]
	0x03652044 BL 0x1C16CF4
	0x03652048 MOVZ W8, 0x1
	0x0365204C STRB W8, [X20 + 0x629]
	0x03652050 LDR X8, [X19 + 0x10]
	0x03652054 CBZ X8, 0x3652078
	0x03652058 ADRP X9, 0xAE7000
	0x0365205C LDR X9, [X9 + 0x1C8]
	0x03652060 LDR X10, [X8]
	0x03652064 LDR X9, [X9]
	0x03652068 LDRB W12, [X10 + 0x130]
	0x0365206C LDRB W11, [X9 + 0x130]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD90000
	006 Move W8, [X20+1568]
	007 Move X21, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAD0000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1568], W8
	018 Compare X21, 0
	019 JumpIfEqual {98}
	020 Move X8, [X21+24]
	021 Compare X8, 0
	022 JumpIfEqual {98}
	023 Compare W8, 0
	024 JumpIfEqual {78}
	025 Move W9, [X21+32]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, 0xAD0000
	029 Move X8, [X8+2968]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Move X1, X21
	034 Move X2, X31
	035 Call ASN1..ctor, X0, X1
	036 Compare X20, 0
	037 JumpIfEqual {79}
	038 Move X0, X20
	039 Move W1, W31
	040 Move X2, X31
	041 Call ASN1.get_Item, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {99}
	044 Move W8, [X0+16]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X1, X31
	047 Call ASN1.get_Value, X0
	048 Compare X0, 0
	049 JumpIfEqual {80}
	050 Move W8, [X0+24]
	051 Compare W8, 0
	052 JumpIfEqual {81}
	053 Move W8, [X0+32]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CSET not yet implemented."
	056 Move [X19+33], W8
	057 Move W1, 1
	058 Move X0, X20
	059 Move X2, X31
	060 Call ASN1.get_Item, X0, X1
	061 Compare X0, 0
	062 JumpIfEqual {99}
	063 Move W8, [X0+16]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W8, 1
	066 Move [X19+34], W8
	067 Move X1, X31
	068 Call ASN1Convert.ToInt32, X0
	069 Move W8, W0
	070 Move W0, W31
	071 Move [X19+36], W8
	072 Move W0, 2
	073 Move W8, [X21+33]
	074 Compare W8, 0
	075 JumpIfEqual {28}
	076 Move W0, 3
	077 Move W0, W31
	078 Call 0x1C17F28
	079 Call 0x1C17F20
	080 Call 0x1C17F20
	081 Call 0x1C17F28
	082 Move X19, X0
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X0, X19
	085 Call 0x3EB2AD0
	086 Move X19, X0
	087 Move X0, 0xAA8000
	088 Move X0, [X0+3264]
	089 Call 0x1C17D08
	090 Move X8, [X19]
	091 Move X1, [X8]
	092 Call 0x1C18270
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {104}
	097 Call 0x3EB2AE0
	098 Move W0, 1
	099 Move X20, [X31+16]
	100 Move X19, [X31+24]
	101 Move X30, [X31+32]
	102 Move X21, [X31+40]
	103 Return X0
	104 Move W0, 8
	105 Call 0x3EB2AF0
	106 Move X8, [X19]
	107 Move [X0], X8
	108 Move X1, 0x863000
	109 Add X1, X1, 3672
	110 Move X2, X31
	111 Call 0x3EB2B00
	112 Move X19, X0
	113 Call 0x3EB2AE0
	114 Move X0, X19
	115 Call 0x1D2D690
	116 Call 0x1991590

Method: System.Byte[] Encode()

Disassembly:
	0x036521A4 LDR X0, [X8]
	0x036521A8 BL 0x1C16F10
	0x036521AC MOV X19, X0
	0x036521B0 BL 0x3650E04
	0x036521B4 B 0x3652260
	0x036521B8 ADRP X8, 0xAD1000
	0x036521BC LDR X8, [X8 + 0x770]
	0x036521C0 MOV X0, X19
	0x036521C4 MOV X2, X31
	0x036521C8 LDR X1, [X8]
	0x036521CC BL 0x321BA08
	0x036521D0 TBZ X0, 0x0, 0x36521F0
	0x036521D4 ADRP X8, 0xAEA000
	0x036521D8 LDR X8, [X8 + 0x870]
	0x036521DC LDR X0, [X8]
	0x036521E0 BL 0x1C16F10
	0x036521E4 MOV X19, X0
	0x036521E8 BL 0x36539AC
	0x036521EC B 0x3652260
	0x036521F0 ADRP X8, 0xAD1000
	0x036521F4 LDR X8, [X8 + 0x5C8]
	0x036521F8 MOV X0, X19
	0x036521FC MOV X2, X31
	0x03652200 LDR X1, [X8]
	0x03652204 BL 0x321BA08
	0x03652208 TBZ X0, 0x0, 0x3652228
	0x0365220C ADRP X8, 0xAEA000
	0x03652210 LDR X8, [X8 + 0x868]
	0x03652214 LDR X0, [X8]
	0x03652218 BL 0x1C16F10
	0x0365221C MOV X19, X0
	0x03652220 BL 0x3653A4C
	0x03652224 B 0x3652260
	0x03652228 ADRP X8, 0xAD1000
	0x0365222C LDR X8, [X8 + 0x650]
	0x03652230 MOV X0, X19
	0x03652234 MOV X2, X31
	0x03652238 LDR X1, [X8]
	0x0365223C BL 0x321BA08
	0x03652240 MOV X19, X31
	0x03652244 TBZ X0, 0x0, 0x3652260
	0x03652248 ADRP X8, 0xAEA000
	0x0365224C LDR X8, [X8 + 0x878]
	0x03652250 LDR X0, [X8]
	0x03652254 BL 0x1C16F10
	0x03652258 MOV X19, X0
	0x0365225C BL 0x3653AEC
	0x03652260 MOV X0, X19
	0x03652264 LDP X20, X19, [X31 + 0x10]
	0x03652268 LDR X30, [X31], #0x20
	0x0365226C RET
	0x03652270 BL 0x1C16F20
	0x03652274 STP X30, X19, [X31 - 0x10]!
	0x03652278 CBZ X1, 0x3652298
	0x0365227C LDR X0, [X0 + 0x10]
	0x03652280 CBZ X0, 0x36522E0
	0x03652284 LDR X8, [X0]
	0x03652288 LDR X3, [X8 + 0x308]
	0x0365228C LDR X2, [X8 + 0x310]
	0x03652290 LDP X30, X19, [X31], #0x10
	0x03652294 BR X3
	0x03652298 ADRP X0, 0xAA6000
	0x0365229C LDR X0, [X0 + 0x528]
	0x036522A0 BL 0x1C16D08
	0x036522A4 BL 0x1C16F10
	0x036522A8 MOV X19, X0
	0x036522AC ADRP X0, 0xACF000
	0x036522B0 LDR X0, [X0 + 0x250]
	0x036522B4 BL 0x1C16D08
	0x036522B8 MOV X1, X0
	0x036522BC MOV X0, X19
	0x036522C0 MOV X2, X31
	0x036522C4 BL 0x330E100
	0x036522C8 ADRP X0, 0xAEA000
	0x036522CC LDR X0, [X0 + 0x9E8]
	0x036522D0 BL 0x1C16D08
	0x036522D4 MOV X1, X0
	0x036522D8 MOV X0, X19
	0x036522DC BL 0x1C16DEC
	0x036522E0 BL 0x1C16F20
	0x036522E4 STP X30, X19, [X31 - 0x10]!
	0x036522E8 MOV X1, X31
	0x036522EC MOV X19, X0
	0x036522F0 BL 0x326B690
	0x036522F4 MOV X0, X19
	0x036522F8 BL 0x3652024
	0x036522FC CBZ X0, 0x3652314

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xD8F000
	009 Move X23, 0xACF000
	010 Move W8, [X19+1569]
	011 Move X23, [X23+2968]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xACF000
	018 Move X0, [X0+2968]
	019 Call 0x1C17CF4
	020 Move X0, 0xAA2000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+1569], W8
	025 Move X0, [X23]
	026 Move X24, 0xAA2000
	027 Move X24, [X24+1560]
	028 Call 0x1C17F10
	029 Move W1, 48
	030 Move X2, X31
	031 Move X19, X0
	032 Call ASN1..ctor, X0, X1
	033 Move W8, [X20+33]
	034 Compare W8, 0
	035 JumpIfEqual {60}
	036 Move X0, [X24]
	037 Move W1, 1
	038 Call 0x1C17D6C
	039 Compare X0, 0
	040 JumpIfEqual {103}
	041 Move W8, [X0+24]
	042 Move X21, X0
	043 Compare W8, 0
	044 JumpIfEqual {104}
	045 Move W8, 255
	046 Move [X21+32], W8
	047 Move X0, [X23]
	048 Call 0x1C17F10
	049 Move W1, 1
	050 Move X2, X21
	051 Move X3, X31
	052 Move X22, X0
	053 Call ASN1..ctor, X0, X1, X2
	054 Compare X19, 0
	055 JumpIfEqual {103}
	056 Move X0, X19
	057 Move X1, X22
	058 Move X2, X31
	059 Call ASN1.Add, X0, X1
	060 Move W8, [X20+34]
	061 Compare W8, 0
	062 JumpIfEqual {71}
	063 Move W0, [X20+36]
	064 Compare W0, 0
	065 JumpIfEqual {73}
	066 Move X1, X31
	067 Call ASN1Convert.FromInt32, X0
	068 Compare X19, 0
	069 JumpIfEqual {103}
	070 Move X20, X0
	071 Compare X19, 0
	072 JumpIfNotEqual {91}
	073 Move X0, [X24]
	074 Move W1, 1
	075 Call 0x1C17D6C
	076 Move X8, [X23]
	077 Move X21, X0
	078 Move X0, X8
	079 Call 0x1C17F10
	080 Move W1, 2
	081 Move X2, X21
	082 Move X3, X31
	083 Move X20, X0
	084 Call ASN1..ctor, X0, X1, X2
	085 Compare X19, 0
	086 JumpIfEqual {103}
	087 Move X0, X19
	088 Move X1, X20
	089 Move X2, X31
	090 Call ASN1.Add, X0, X1
	091 Move X8, [X19]
	092 Move X0, X19
	093 Move X20, [X31+48]
	094 Move X19, [X31+56]
	095 Move X22, [X31+32]
	096 Move X21, [X31+40]
	097 Move X2, [X8+376]
	098 Move X1, [X8+384]
	099 Move X24, [X31+16]
	100 Move X23, [X31+24]
	101 Move X30, [X31+64]
	102 CallNoReturn X2
	103 Call 0x1C17F20
	104 Call 0x1C17F28

Method: System.String ToString(System.Boolean multiLine)

Disassembly:
	0x03652600 LDR X0, [X20]
	0x03652604 BL 0x1C16F10
	0x03652608 MOV X1, X23
	0x0365260C MOV X2, X22
	0x03652610 MOV X21, X0
	0x03652614 BL 0x364E4F4
	0x03652618 ADRP X8, 0xAEA000
	0x0365261C LDR X8, [X8 + 0x900]
	0x03652620 LDR X0, [X8]
	0x03652624 BL 0x1C16F10
	0x03652628 MOV X1, X23
	0x0365262C MOV X2, X24
	0x03652630 MOV X3, X21
	0x03652634 MOV X20, X0
	0x03652638 BL 0x364F9F4
	0x0365263C BL 0x1C16D44
	0x03652640 STR X20, [X19 + 0x88]
	0x03652644 MOV X0, X20
	0x03652648 LDP X20, X19, [X31 + 0x30]
	0x0365264C LDP X22, X21, [X31 + 0x20]
	0x03652650 LDP X24, X23, [X31 + 0x10]
	0x03652654 LDR X30, [X31], #0x40
	0x03652658 RET
	0x0365265C STR X30, [X31 - 0x20]!
	0x03652660 STP X20, X19, [X31 + 0x10]
	0x03652664 MOV X1, X31
	0x03652668 MOV X19, X0
	0x0365266C BL 0x326B690
	0x03652670 LDR X20, [X19 + 0x60]
	0x03652674 BL 0x1C16D44
	0x03652678 CBNZ X20, 0x36526A0
	0x0365267C MOV X0, X19
	0x03652680 BL 0x3652024
	0x03652684 CBZ X0, 0x36526B4
	0x03652688 LDR X8, [X0]
	0x0365268C LDP X9, X1, [X8 + 0x1C8]
	0x03652690 BLR X9
	0x03652694 MOV X20, X0
	0x03652698 BL 0x1C16D44
	0x0365269C STR X20, [X19 + 0x60]
	0x036526A0 MOV X0, X20
	0x036526A4 LDP X20, X19, [X31 + 0x10]
	0x036526A8 MOV X1, X31
	0x036526AC LDR X30, [X31], #0x20
	0x036526B0 B 0x3225544
	0x036526B4 BL 0x1C16F20
	0x036526B8 LDR X8, [X0]
	0x036526BC LDR X2, [X8 + 0x248]
	0x036526C0 LDR X1, [X8 + 0x250]
	0x036526C4 BR X2
	0x036526C8 STR X30, [X31 - 0x20]!
	0x036526CC STP X20, X19, [X31 + 0x10]
	0x036526D0 MOV X1, X31
	0x036526D4 MOV X19, X0
	0x036526D8 BL 0x326B690
	0x036526DC LDR X20, [X19 + 0x68]
	0x036526E0 BL 0x1C16D44
	0x036526E4 CBNZ X20, 0x3652718
	0x036526E8 MOV X0, X19
	0x036526EC BL 0x3652024
	0x036526F0 CBZ X0, 0x3652728
	0x036526F4 LDR X8, [X0]
	0x036526F8 LDR X9, [X8 + 0x2C8]
	0x036526FC LDR X1, [X8 + 0x2D0]
	0x03652700 BLR X9
	0x03652704 MOVZ W1, 0x4
	0x03652708 BL 0x364DCE8
	0x0365270C MOV X20, X0
	0x03652710 BL 0x1C16D44
	0x03652714 STR X20, [X19 + 0x68]
	0x03652718 MOV X0, X20
	0x0365271C LDP X20, X19, [X31 + 0x10]
	0x03652720 LDR X30, [X31], #0x20
	0x03652724 RET
	0x03652728 BL 0x1C16F20
	0x0365272C STR X30, [X31 - 0x20]!
	0x03652730 STP X20, X19, [X31 + 0x10]
	0x03652734 MOV X1, X31
	0x03652738 MOV X19, X0
	0x0365273C BL 0x326B690
	0x03652740 LDR X20, [X19 + 0x78]
	0x03652744 BL 0x1C16D44
	0x03652748 CBNZ X20, 0x3652774
	0x0365274C MOV X0, X19
	0x03652750 BL 0x3652024
	0x03652754 CBZ X0, 0x3652784
	0x03652758 LDR X8, [X0]
	0x0365275C LDR X9, [X8 + 0x2D8]
	0x03652760 LDR X1, [X8 + 0x2E0]
	0x03652764 BLR X9
	0x03652768 MOV X20, X0
	0x0365276C BL 0x1C16D44
	0x03652770 STR X20, [X19 + 0x78]
	0x03652774 MOV X0, X20
	0x03652778 LDP X20, X19, [X31 + 0x10]
	0x0365277C LDR X30, [X31], #0x20
	0x03652780 RET
	0x03652784 BL 0x1C16F20
	0x03652788 STR X30, [X31 - 0x10]!
	0x0365278C LDR X8, [X0]
	0x03652790 LDP X9, X1, [X8 + 0x1D8]
	0x03652794 BLR X9
	0x03652798 MOV X1, X31
	0x0365279C LDR X30, [X31], #0x10
	0x036527A0 B 0x32256C4
	0x036527A4 STR X30, [X31 - 0x20]!
	0x036527A8 STP X20, X19, [X31 + 0x10]
	0x036527AC MOV X1, X31
	0x036527B0 MOV X19, X0
	0x036527B4 BL 0x326B690
	0x036527B8 LDR W20, [X19 + 0x70]
	0x036527BC BL 0x1C16D44
	0x036527C0 CBNZ W20, 0x36527EC
	0x036527C4 MOV X0, X19
	0x036527C8 BL 0x3652024
	0x036527CC CBZ X0, 0x36527FC
	0x036527D0 LDR X8, [X0]
	0x036527D4 LDR X9, [X8 + 0x2E8]
	0x036527D8 LDR X1, [X8 + 0x2F0]
	0x036527DC BLR X9
	0x036527E0 MOV W20, W0
	0x036527E4 BL 0x1C16D44
	0x036527E8 STR W20, [X19 + 0x70]
	0x036527EC MOV W0, W20
	0x036527F0 LDP X20, X19, [X31 + 0x10]
	0x036527F4 LDR X30, [X31], #0x20
	0x036527F8 RET
	0x036527FC BL 0x1C16F20
	0x03652800 STR X30, [X31 - 0x20]!
	0x03652804 STP X20, X19, [X31 + 0x10]
	0x03652808 CBZ X0, 0x3652838
	0x0365280C LDR X8, [X0 + 0x18]
	0x03652810 MOV X19, X0
	0x03652814 CBZ X8, 0x3652838
	0x03652818 MOV X0, X31
	0x0365281C BL 0x35E1250
	0x03652820 CBZ X0, 0x3652894
	0x03652824 MOV X1, X19
	0x03652828 LDP X20, X19, [X31 + 0x10]
	0x0365282C MOV X2, X31
	0x03652830 LDR X30, [X31], #0x20
	0x03652834 B 0x35E1510
	0x03652838 ADRP X0, 0xAA9000
	0x0365283C LDR X0, [X0 + 0x578]
	0x03652840 BL 0x1C16D08
	0x03652844 BL 0x1C16F10
	0x03652848 MOV X19, X0
	0x0365284C ADRP X0, 0xAEA000
	0x03652850 LDR X0, [X0 + 0xA08]
	0x03652854 BL 0x1C16D08
	0x03652858 MOV X20, X0
	0x0365285C ADRP X0, 0xAE7000
	0x03652860 LDR X0, [X0 + 0x1E8]
	0x03652864 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD8F000
	006 Move W8, [X21+1570]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {48}
	013 Move X0, 0xAA2000
	014 Move X0, [X0+2288]
	015 Call 0x1C17CF4
	016 Move X0, 0xAA4000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move X0, 0xAD0000
	020 Move X0, [X0+768]
	021 Call 0x1C17CF4
	022 Move X0, 0xAA9000
	023 Move X0, [X0+3784]
	024 Call 0x1C17CF4
	025 Move X0, 0xAD0000
	026 Move X0, [X0+776]
	027 Call 0x1C17CF4
	028 Move X0, 0xAA4000
	029 Move X0, [X0+1944]
	030 Call 0x1C17CF4
	031 Move X0, 0xAA2000
	032 Move X0, [X0+2104]
	033 Call 0x1C17CF4
	034 Move X0, 0xAD0000
	035 Move X0, [X0+784]
	036 Call 0x1C17CF4
	037 Move X0, 0xAEB000
	038 Move X0, [X0+2192]
	039 Call 0x1C17CF4
	040 Move X0, 0xAEB000
	041 Move X0, [X0+2488]
	042 Call 0x1C17CF4
	043 Move X0, 0xAD0000
	044 Move X0, [X0+552]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1570], W8
	048 Move W8, [X20+40]
	049 Subtract W9, W8, 2
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, 0xAA4000
	054 Move X8, [X8+632]
	055 Move X8, [X8]
	056 Move X8, [X8+184]
	057 Move X1, [X20+24]
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Move X8, 0xAEB000
	063 Move X8, [X8+2192]
	064 Move X0, [X8]
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Return X0
	070 Move X8, [X20+16]
	071 Compare X8, 0
	072 JumpIfEqual {178}
	073 Move X0, [X8+16]
	074 Move X8, 0xAD0000
	075 Move X8, [X8+552]
	076 Move X2, X31
	077 Move X1, [X8]
	078 Call String.op_Inequality, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {97}
	083 Move X8, [X20+16]
	084 Compare X8, 0
	085 JumpIfEqual {178}
	086 Move X1, [X8+16]
	087 Move X8, 0xAEB000
	088 Move X8, [X8+2488]
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X2, X31
	092 Move X0, [X8]
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Call String.Format, X0, X1
	096 Return X0
	097 Move X8, 0xAA2000
	098 Move X8, [X8+2288]
	099 Move X0, [X8]
	100 Call 0x1C17F10
	101 Move X1, X31
	102 Move X21, X0
	103 Call StringBuilder..ctor, X0
	104 Compare X21, 0
	105 JumpIfEqual {178}
	106 Move X8, 0xAD0000
	107 Move X8, [X8+768]
	108 Move X0, X21
	109 Move X2, X31
	110 Move X1, [X8]
	111 Call StringBuilder.Append, X0, X1
	112 Move W8, [X20+33]
	113 Move X9, 0xAD0000
	114 Move X10, 0xAA9000
	115 Move X9, [X9+784]
	116 Move X10, [X10+3784]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X0, X21
	119 Move X2, X31
	120 NotImplemented "Instruction CSEL not yet implemented."
	121 Move X1, [X8]
	122 Call StringBuilder.Append, X0, X1
	123 Move TEMP, X19
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {130}
	127 Move X0, X31
	128 Call Environment.get_NewLine
	129 Move X1, X0
	130 Move X8, 0xAA2000
	131 Move X8, [X8+2104]
	132 Move X1, [X8]
	133 Move X0, X21
	134 Move X2, X31
	135 Call StringBuilder.Append, X0, X1
	136 Move X8, 0xAD0000
	137 Move X8, [X8+776]
	138 Move X0, X21
	139 Move X2, X31
	140 Move X1, [X8]
	141 Call StringBuilder.Append, X0, X1
	142 Move W8, [X20+34]
	143 Compare W8, 0
	144 JumpIfEqual {168}
	145 Move W1, [X20+36]
	146 Move X0, X21
	147 Move X2, X31
	148 Call StringBuilder.Append, X0, X1
	149 Move TEMP, X19
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfNotEqual {159}
	153 Move X0, X31
	154 Call Environment.get_NewLine
	155 Move X1, X0
	156 Move X0, X21
	157 Move X2, X31
	158 Call StringBuilder.Append, X0, X1
	159 Move X8, [X21]
	160 Move X20, [X31+16]
	161 Move X19, [X31+24]
	162 Move X0, X21
	163 Move X2, [X8+360]
	164 Move X1, [X8+368]
	165 Move X30, [X31+32]
	166 Move X21, [X31+40]
	167 CallNoReturn X2
	168 Move X8, 0xAA4000
	169 Move X8, [X8+1944]
	170 Move X0, X21
	171 Move X2, X31
	172 Move X1, [X8]
	173 Call StringBuilder.Append, X0, X1
	174 Move TEMP, X19
	175 And TEMP, TEMP, 1
	176 Compare TEMP, 1
	177 JumpIfEqual {153}
	178 Call 0x1C17F20

