Type: System.Security.Cryptography.X509Certificates.PublicKey

Method: System.Void .ctor(System.Security.Cryptography.Oid oid, System.Security.Cryptography.AsnEncodedData parameters, System.Security.Cryptography.AsnEncodedData keyValue)

Disassembly:
	0x036509F4 BL 0x3650820
	0x036509F8 CBZ X0, 0x3650A40
	0x036509FC LDR W8, [X0 + 0x10]
	0x03650A00 MOV X19, X0
	0x03650A04 CMP W8, 0x1
	0x03650A08 B.LT 0x3650A34
	0x03650A0C MOV X0, X31
	0x03650A10 BL 0x33C1548
	0x03650A14 MOV X1, X0
	0x03650A18 MOV X0, X19
	0x03650A1C MOV X2, X31
	0x03650A20 LDP X30, X19, [X31], #0x10
	0x03650A24 B 0x321B938
	0x03650A28 MOVZ W1, 0x80
	0x03650A2C LDP X30, X19, [X31], #0x10
	0x03650A30 B 0x3650820
	0x03650A34 MOV X0, X19
	0x03650A38 LDP X30, X19, [X31], #0x10
	0x03650A3C RET
	0x03650A40 BL 0x1C16F20
	0x03650A44 STR X30, [X31 - 0x40]!
	0x03650A48 STP X24, X23, [X31 + 0x10]
	0x03650A4C STP X22, X21, [X31 + 0x20]
	0x03650A50 STP X20, X19, [X31 + 0x30]
	0x03650A54 ADRP X19, 0xD90000
	0x03650A58 LDRB W8, [X19 + 0x61A]
	0x03650A5C MOV X21, X0
	0x03650A60 TBNZ X8, 0x0, 0x3650A84
	0x03650A64 ADRP X0, 0xAA5000
	0x03650A68 LDR X0, [X0 + 0x170]
	0x03650A6C BL 0x1C16CF4
	0x03650A70 ADRP X0, 0xAA3000
	0x03650A74 LDR X0, [X0 + 0x8F0]
	0x03650A78 BL 0x1C16CF4
	0x03650A7C MOVZ W8, 0x1
	0x03650A80 STRB W8, [X19 + 0x61A]
	0x03650A84 CBZ X21, 0x3650C1C
	0x03650A88 ADRP X20, 0xAA3000
	0x03650A8C LDR X20, [X20 + 0x8F0]
	0x03650A90 MOVZ W1, 0x3D
	0x03650A94 MOV X0, X21
	0x03650A98 MOV X2, X31
	0x03650A9C BL 0x322BD98
	0x03650AA0 ADD W19, W0, 0x1
	0x03650AA4 MOV X0, X21
	0x03650AA8 MOV W1, W31
	0x03650AAC MOV W2, W19
	0x03650AB0 MOV X3, X31
	0x03650AB4 BL 0x3228DE4
	0x03650AB8 LDR X8, [X20]
	0x03650ABC MOV X22, X0
	0x03650AC0 MOV X0, X8
	0x03650AC4 BL 0x1C16F10
	0x03650AC8 MOV X1, X22
	0x03650ACC MOV X2, X31
	0x03650AD0 MOV X20, X0
	0x03650AD4 BL 0x3231CF8
	0x03650AD8 LDR W8, [X21 + 0x10]
	0x03650ADC CMP W19, W8
	0x03650AE0 B.GE 0x3650B20
	0x03650AE4 ADRP X22, 0xAA5000
	0x03650AE8 LDR X22, [X22 + 0x170]
	0x03650AEC LDR X0, [X22]
	0x03650AF0 LDR W8, [X0 + 0xE0]
	0x03650AF4 CBNZ W8, 0x3650AFC
	0x03650AF8 BL 0x1C16DFC
	0x03650AFC MOV X0, X21
	0x03650B00 MOV W1, W19
	0x03650B04 MOV X2, X31
	0x03650B08 BL 0x331BCB0
	0x03650B0C TBZ X0, 0x0, 0x3650B20
	0x03650B10 LDR W8, [X21 + 0x10]
	0x03650B14 ADD W19, W19, 0x1
	0x03650B18 CMP W19, W8
	0x03650B1C B.LT 0x3650AEC
	0x03650B20 MOV X0, X21
	0x03650B24 MOV X1, X31
	0x03650B28 BL 0x322BC30
	0x03650B2C CBZ X0, 0x3650C1C
	0x03650B30 LDR W8, [X0 + 0x10]
	0x03650B34 MOV X21, X0
	0x03650B38 CMP W19, W8
	0x03650B3C B.GE 0x3650BF8
	0x03650B40 ADRP X24, 0xAA5000
	0x03650B44 LDR X24, [X24 + 0x170]
	0x03650B48 MOV W22, W31
	0x03650B4C TBZ X22, 0x0, 0x3650B7C
	0x03650B50 LDR X0, [X24]
	0x03650B54 LDR W8, [X0 + 0xE0]
	0x03650B58 CBNZ W8, 0x3650B60

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xD91000
	009 Move W8, [X23+1552]
	010 Move X19, X3
	011 Move X21, X2
	012 Move X22, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xAED000
	019 Move X0, [X0+2280]
	020 Call 0x1C17CF4
	021 Move X0, 0xAED000
	022 Move X0, [X0+2016]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1552], W8
	026 Move X0, X20
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Compare X22, 0
	030 JumpIfEqual {69}
	031 Compare X21, 0
	032 JumpIfEqual {76}
	033 Compare X19, 0
	034 JumpIfEqual {83}
	035 Move X8, 0xAED000
	036 Move X8, [X8+2016]
	037 Move X24, 0xAED000
	038 Move X0, [X8]
	039 Move X24, [X24+2280]
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X23, X0
	043 Call Object..ctor, X0
	044 Move V0, [X22+1]
	045 Move [X23+1], V0
	046 Move W8, [X22+32]
	047 Move [X23+32], W8
	048 Move [X20+32], X23
	049 Move X0, [X24]
	050 Call 0x1C17F10
	051 Move X1, X21
	052 Move X22, X0
	053 Call AsnEncodedData..ctor, X0, X1
	054 Move [X20+24], X22
	055 Move X0, [X24]
	056 Call 0x1C17F10
	057 Move X1, X19
	058 Move X21, X0
	059 Call AsnEncodedData..ctor, X0, X1
	060 Move [X20+16], X21
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X22, [X31+32]
	064 Move X21, [X31+40]
	065 Move X24, [X31+16]
	066 Move X23, [X31+24]
	067 Move X30, [X31+64]
	068 Return 
	069 Move X0, 0xAA9000
	070 Move X0, [X0+1320]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0xAD1000
	075 Move X0, [X0+3040]
	076 Move X0, 0xAA9000
	077 Move X0, [X0+1320]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xAD2000
	082 Move X0, [X0+3200]
	083 Move X0, 0xAA9000
	084 Move X0, [X0+1320]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0xAED000
	089 Move X0, [X0+2288]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ArgumentNullException..ctor, X0, X1
	095 Move X0, 0xAED000
	096 Move X0, [X0+2296]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Call 0x1C17DEC

Method: System.Security.Cryptography.AsnEncodedData get_EncodedKeyValue()

Disassembly:
	0x03650B5C BL 0x1C16DFC
	0x03650B60 MOV X0, X21

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Security.Cryptography.AsnEncodedData get_EncodedParameters()

Disassembly:
	0x03650B64 MOV W1, W19
	0x03650B68 MOV X2, X31

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Security.Cryptography.AsymmetricAlgorithm get_Key()

Disassembly:
	0x03650B6C BL 0x331BCB0
	0x03650B70 TBZ X0, 0x0, 0x3650B7C
	0x03650B74 MOVZ W22, 0x1
	0x03650B78 B 0x3650BE8
	0x03650B7C LDR X0, [X24]
	0x03650B80 LDR W8, [X0 + 0xE0]
	0x03650B84 CBNZ W8, 0x3650B8C
	0x03650B88 BL 0x1C16DFC
	0x03650B8C MOV X0, X21
	0x03650B90 MOV W1, W19
	0x03650B94 MOV X2, X31
	0x03650B98 BL 0x331BCB0
	0x03650B9C MOV W22, W0
	0x03650BA0 MOV X0, X21
	0x03650BA4 MOV W1, W19
	0x03650BA8 MOV X2, X31
	0x03650BAC BL 0x3222A1C
	0x03650BB0 LDR X8, [X24]
	0x03650BB4 MOV W23, W0
	0x03650BB8 LDR W9, [X8 + 0xE0]
	0x03650BBC CBNZ W9, 0x3650BC8
	0x03650BC0 MOV X0, X8
	0x03650BC4 BL 0x1C16DFC
	0x03650BC8 MOV W0, W23
	0x03650BCC MOV X1, X31
	0x03650BD0 BL 0x331AD34
	0x03650BD4 CBZ X20, 0x3650C1C
	0x03650BD8 MOV W1, W0
	0x03650BDC MOV X0, X20
	0x03650BE0 MOV X2, X31
	0x03650BE4 BL 0x3233D30
	0x03650BE8 LDR W8, [X21 + 0x10]
	0x03650BEC ADD W19, W19, 0x1
	0x03650BF0 CMP W19, W8
	0x03650BF4 B.LT 0x3650B4C
	0x03650BF8 CBZ X20, 0x3650C1C
	0x03650BFC LDR X8, [X20]
	0x03650C00 MOV X0, X20
	0x03650C04 LDP X20, X19, [X31 + 0x30]
	0x03650C08 LDP X22, X21, [X31 + 0x20]
	0x03650C0C LDP X2, X1, [X8 + 0x168]
	0x03650C10 LDP X24, X23, [X31 + 0x10]
	0x03650C14 LDR X30, [X31], #0x40
	0x03650C18 BR X2
	0x03650C1C BL 0x1C16F20
	0x03650C20 STR X30, [X31 - 0x40]!
	0x03650C24 STP X24, X23, [X31 + 0x10]
	0x03650C28 STP X22, X21, [X31 + 0x20]
	0x03650C2C STP X20, X19, [X31 + 0x30]
	0x03650C30 ADRP X21, 0xD90000
	0x03650C34 LDRB W8, [X21 + 0x61B]
	0x03650C38 MOV X20, X1
	0x03650C3C MOV X19, X0
	0x03650C40 TBNZ X8, 0x0, 0x3650C58
	0x03650C44 ADRP X0, 0xAA3000
	0x03650C48 LDR X0, [X0 + 0xAC8]
	0x03650C4C BL 0x1C16CF4
	0x03650C50 MOVZ W8, 0x1
	0x03650C54 STRB W8, [X21 + 0x61B]
	0x03650C58 ORR X8, X19, X20, 0x0
	0x03650C5C CMP X8, 0x0
	0x03650C60 CSET W10, EQ
	0x03650C64 CBZ X19, 0x3650DE4
	0x03650C68 CBZ X20, 0x3650DE4
	0x03650C6C LDR X8, [X19 + 0x28]
	0x03650C70 CBZ X8, 0x3650CDC
	0x03650C74 LDR X9, [X20 + 0x28]
	0x03650C78 CBZ X9, 0x3650CDC
	0x03650C7C LDR W10, [X8 + 0x18]
	0x03650C80 LDR W11, [X9 + 0x18]
	0x03650C84 CMP W10, W11
	0x03650C88 B.NE 0x3650DD8
	0x03650C8C CMP W10, 0x1
	0x03650C90 B.LT 0x3650DE0
	0x03650C94 MOV W12, W31
	0x03650C98 SUB W11, W31, W10
	0x03650C9C ADDS W31, W11, W12
	0x03650CA0 B.EQ 0x3650DFC
	0x03650CA4 SXTW X12, W12
	0x03650CA8 ADD X10, X8, X12
	0x03650CAC ADD X14, X9, X12
	0x03650CB0 LDRB W13, [X10 + 0x20]
	0x03650CB4 LDRB W14, [X14 + 0x20]
	0x03650CB8 ADD W15, W11, W12
	0x03650CBC CMP W13, W14
	0x03650CC0 CSET W10, EQ
	0x03650CC4 ADDS W31, W15, 0x1
	0x03650CC8 B.EQ 0x3650DE4
	0x03650CCC CMP W13, W14
	0x03650CD0 ADD W12, W12, 0x1
	0x03650CD4 B.EQ 0x3650C9C
	0x03650CD8 B 0x3650DE4
	0x03650CDC ADRP X8, 0xAA3000
	0x03650CE0 LDR X8, [X8 + 0xAC8]
	0x03650CE4 MOVZ W1, 0x1
	0x03650CE8 LDR X0, [X8]
	0x03650CEC BL 0x1C16D6C
	0x03650CF0 MOV X21, X0
	0x03650CF4 MOV X0, X31
	0x03650CF8 BL 0x33C1548
	0x03650CFC CBZ X21, 0x3650E00
	0x03650D00 LDR W8, [X21 + 0x18]
	0x03650D04 CBZ W8, 0x3650DFC
	0x03650D08 STR X0, [X21 + 0x20]
	0x03650D0C MOVZ W1, 0x140

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD91000
	005 Move W8, [X20+1553]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0xAED000
	012 Move X0, [X0+2304]
	013 Call 0x1C17CF4
	014 Move X0, 0xAD1000
	015 Move X0, [X0+3936]
	016 Call 0x1C17CF4
	017 Move X0, 0xAD1000
	018 Move X0, [X0+3912]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1553], W8
	022 Move X8, [X19+32]
	023 Compare X8, 0
	024 JumpIfEqual {83}
	025 Move X9, 0xAD1000
	026 Move X9, [X9+3936]
	027 Move X20, [X8+16]
	028 Move X2, X31
	029 Move X1, [X9]
	030 Move X0, X20
	031 Call String.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {51}
	036 Move X8, [X19+16]
	037 Compare X8, 0
	038 JumpIfEqual {83}
	039 Move X9, 0xAED000
	040 Move X9, [X9+2304]
	041 Move X19, [X8+24]
	042 Move X0, [X9]
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X8, 0xAD1000
	052 Move X8, [X8+3912]
	053 Move X0, X20
	054 Move X2, X31
	055 Move X1, [X8]
	056 Call String.op_Equality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {84}
	061 Move X8, [X19+16]
	062 Compare X8, 0
	063 JumpIfEqual {83}
	064 Move X9, [X19+24]
	065 Compare X9, 0
	066 JumpIfEqual {83}
	067 Move X10, 0xAED000
	068 Move X10, [X10+2304]
	069 Move X19, [X8+24]
	070 Move X20, [X9+24]
	071 Move X0, [X10]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X19
	077 Move X1, X20
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move X30, [X31+32]
	081 Call PublicKey.DecodeDSA, X0, X1
	082 Return X0
	083 Call 0x1C17F20
	084 Move X0, 0xAA4000
	085 Move X0, [X0+2512]
	086 Call 0x1C17D08
	087 Move W1, 1
	088 Call 0x1C17D6C
	089 Move X19, [X19+32]
	090 Move X20, X0
	091 Move X0, X19
	092 Call 0x19913C0
	093 Move X19, [X19+16]
	094 Move X0, X20
	095 Call 0x19913C0
	096 Move X0, X20
	097 Move X1, X19
	098 Call 0x19990B4
	099 Move X0, X20
	100 Move X1, X31
	101 Move X2, X19
	102 Call 0x1994444
	103 Move X0, 0xAED000
	104 Move X0, [X0+2312]
	105 Call 0x1C17D08
	106 Move X1, X20
	107 Move X2, X31
	108 Call Locale.GetText, X0, X1
	109 Move X19, X0
	110 Move X0, 0xAA4000
	111 Move X0, [X0+2880]
	112 Call 0x1C17D08
	113 Call 0x1C17F10
	114 Move X1, X19
	115 Move X2, X31
	116 Move X20, X0
	117 Call NotSupportedException..ctor, X0, X1
	118 Move X0, 0xAED000
	119 Move X0, [X0+2320]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X20
	123 Call 0x1C17DEC

Method: System.Security.Cryptography.Oid get_Oid()

Disassembly:
	0x0365152C LDRB W8, [X20 + 0x20]
	0x03651530 LDR X1, [X19 + 0x18]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Byte[] GetUnsignedBigInteger(System.Byte[] integer)

Disassembly:
	0x03651534 MOV X0, X19
	0x03651538 STRB W8, [X19 + 0x20]
	0x0365153C BL 0x3650EAC
	0x03651540 STR W0, [X19 + 0x28]
	0x03651544 LDP X20, X19, [X31 + 0x20]
	0x03651548 LDP X22, X21, [X31 + 0x10]
	0x0365154C LDP X30, X23, [X31], #0x30
	0x03651550 RET
	0x03651554 ADRP X0, 0xAEB000
	0x03651558 LDR X0, [X0 + 0x9A8]
	0x0365155C BL 0x1C16D08
	0x03651560 MOV X1, X31
	0x03651564 BL 0x320A160
	0x03651568 MOV X19, X0
	0x0365156C ADRP X0, 0xAAA000
	0x03651570 LDR X0, [X0 + 0x578]
	0x03651574 BL 0x1C16D08
	0x03651578 BL 0x1C16F10
	0x0365157C MOV X20, X0
	0x03651580 ADRP X0, 0xAEB000
	0x03651584 LDR X0, [X0 + 0x848]
	0x03651588 BL 0x1C16D08
	0x0365158C MOV X2, X0
	0x03651590 MOV X0, X20
	0x03651594 MOV X1, X19
	0x03651598 MOV X3, X31
	0x0365159C BL 0x330E16C
	0x036515A0 ADRP X0, 0xAEB000
	0x036515A4 LDR X0, [X0 + 0x9B0]
	0x036515A8 BL 0x1C16D08
	0x036515AC MOV X1, X0
	0x036515B0 MOV X0, X20
	0x036515B4 BL 0x1C16DEC
	0x036515B8 ADRP X0, 0xAA7000
	0x036515BC LDR X0, [X0 + 0x528]
	0x036515C0 BL 0x1C16D08
	0x036515C4 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD90000
	006 Move W8, [X20+1554]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAA3000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1554], W8
	017 Compare X19, 0
	018 JumpIfEqual {46}
	019 Move W8, [X19+24]
	020 Compare W8, 0
	021 JumpIfEqual {47}
	022 Move W9, [X19+32]
	023 Compare W9, 0
	024 JumpIfNotEqual {40}
	025 Move X9, 0xAA3000
	026 Move X9, [X9+1560]
	027 Subtract W20, W8, 1
	028 Move W1, W20
	029 Move X0, [X9]
	030 Call 0x1C17D6C
	031 Move X21, X0
	032 Move W1, 1
	033 Move X0, X19
	034 Move X2, X21
	035 Move W3, W31
	036 Move W4, W20
	037 Move X5, X31
	038 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	039 Move X19, X21
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0
	046 Call 0x1C17F20
	047 Call 0x1C17F28

Method: System.Security.Cryptography.DSA DecodeDSA(System.Byte[] rawPublicKey, System.Byte[] rawParameters)

Disassembly:
	0x036510AC ADRP X0, 0xAE8000
	0x036510B0 LDR X0, [X0 + 0x8F8]
	0x036510B4 BL 0x1C16CF4
	0x036510B8 ADRP X0, 0xAD0000
	0x036510BC LDR X0, [X0 + 0x228]
	0x036510C0 BL 0x1C16CF4
	0x036510C4 MOVZ W8, 0x1
	0x036510C8 STRB W8, [X24 + 0x61E]
	0x036510CC MOV X0, X20
	0x036510D0 MOV X1, X31
	0x036510D4 BL 0x33BDD8C
	0x036510D8 TBZ X22, 0x0, 0x36510E4
	0x036510DC TBNZ X23, 0x1F, 0x365115C
	0x036510E0 STR W23, [X20 + 0x24]
	0x036510E4 ADRP X8, 0xAEB000
	0x036510E8 LDR X8, [X8 + 0x7E0]
	0x036510EC AND W9, W22, 0x1
	0x036510F0 AND W10, W21, 0x1
	0x036510F4 STRB W9, [X20 + 0x22]
	0x036510F8 STRB W10, [X20 + 0x21]
	0x036510FC LDR X0, [X8]
	0x03651100 ADRP X21, 0xAD0000
	0x03651104 ADRP X22, 0xAE8000
	0x03651108 LDR X21, [X21 + 0x228]
	0x0365110C LDR X22, [X22 + 0x8F8]
	0x03651110 BL 0x1C16F10
	0x03651114 LDR X23, [X21]
	0x03651118 LDR X22, [X22]
	0x0365111C MOV X1, X31
	0x03651120 MOV X21, X0
	0x03651124 BL 0x33BDD8C
	0x03651128 AND W8, W19, 0x1
	0x0365112C MOV X0, X20
	0x03651130 STP X23, X22, [X21 + 0x10]
	0x03651134 STR X21, [X20 + 0x10]
	0x03651138 STRB W8, [X20 + 0x20]
	0x0365113C BL 0x36511A4
	0x03651140 MOV X1, X0
	0x03651144 MOV X0, X20
	0x03651148 LDP X20, X19, [X31 + 0x30]
	0x0365114C LDP X22, X21, [X31 + 0x20]
	0x03651150 LDP X24, X23, [X31 + 0x10]
	0x03651154 LDR X30, [X31], #0x40
	0x03651158 B 0x364E404
	0x0365115C ADRP X0, 0xAAA000
	0x03651160 LDR X0, [X0 + 0x760]
	0x03651164 BL 0x1C16D08
	0x03651168 BL 0x1C16F10
	0x0365116C MOV X19, X0
	0x03651170 ADRP X0, 0xAEB000
	0x03651174 LDR X0, [X0 + 0x978]
	0x03651178 BL 0x1C16D08
	0x0365117C MOV X1, X0
	0x03651180 MOV X0, X19
	0x03651184 MOV X2, X31
	0x03651188 BL 0x3316014
	0x0365118C ADRP X0, 0xAEB000
	0x03651190 LDR X0, [X0 + 0x980]
	0x03651194 BL 0x1C16D08
	0x03651198 MOV X1, X0
	0x0365119C MOV X0, X19
	0x036511A0 BL 0x1C16DEC
	0x036511A4 STR X30, [X31 - 0x40]!
	0x036511A8 STP X24, X23, [X31 + 0x10]
	0x036511AC STP X22, X21, [X31 + 0x20]
	0x036511B0 STP X20, X19, [X31 + 0x30]
	0x036511B4 ADRP X19, 0xD8F000
	0x036511B8 ADRP X23, 0xACF000
	0x036511BC LDRB W8, [X19 + 0x621]
	0x036511C0 LDR X23, [X23 + 0xB98]
	0x036511C4 MOV X20, X0
	0x036511C8 TBNZ X8, 0x0, 0x36511EC
	0x036511CC ADRP X0, 0xACF000
	0x036511D0 LDR X0, [X0 + 0xB98]
	0x036511D4 BL 0x1C16CF4
	0x036511D8 ADRP X0, 0xAA2000
	0x036511DC LDR X0, [X0 + 0x618]
	0x036511E0 BL 0x1C16CF4
	0x036511E4 MOVZ W8, 0x1
	0x036511E8 STRB W8, [X19 + 0x621]
	0x036511EC LDR X0, [X23]
	0x036511F0 ADRP X24, 0xAA2000
	0x036511F4 LDR X24, [X24 + 0x618]
	0x036511F8 BL 0x1C16F10
	0x036511FC MOVZ W1, 0x30
	0x03651200 MOV X2, X31
	0x03651204 MOV X19, X0
	0x03651208 BL 0x31E79E8
	0x0365120C LDRB W8, [X20 + 0x21]
	0x03651210 CBZ W8, 0x3651268
	0x03651214 LDR X0, [X24]
	0x03651218 MOVZ W1, 0x1
	0x0365121C BL 0x1C16D6C
	0x03651220 CBZ X0, 0x36512F8
	0x03651224 LDR W8, [X0 + 0x18]
	0x03651228 MOV X21, X0
	0x0365122C CBZ W8, 0x36512FC
	0x03651230 MOVZ W8, 0xFF
	0x03651234 STRB W8, [X21 + 0x20]
	0x03651238 LDR X0, [X23]
	0x0365123C BL 0x1C16F10
	0x03651240 MOVZ W1, 0x1
	0x03651244 MOV X2, X21
	0x03651248 MOV X3, X31
	0x0365124C MOV X22, X0
	0x03651250 BL 0x31E7A14
	0x03651254 CBZ X19, 0x36512F8
	0x03651258 MOV X0, X19
	0x0365125C MOV X1, X22
	0x03651260 MOV X2, X31
	0x03651264 BL 0x31E7ED0
	0x03651268 LDRB W8, [X20 + 0x22]
	0x0365126C CBZ W8, 0x365128C
	0x03651270 LDR W0, [X20 + 0x24]
	0x03651274 CBZ W0, 0x3651294
	0x03651278 MOV X1, X31
	0x0365127C BL 0x31E8C1C
	0x03651280 CBZ X19, 0x36512F8
	0x03651284 MOV X20, X0
	0x03651288 B 0x36512C8
	0x0365128C CBNZ X19, 0x36512D8
	0x03651290 B 0x36512F8
	0x03651294 LDR X0, [X24]
	0x03651298 MOVZ W1, 0x1
	0x0365129C BL 0x1C16D6C
	0x036512A0 LDR X8, [X23]
	0x036512A4 MOV X21, X0
	0x036512A8 MOV X0, X8
	0x036512AC BL 0x1C16F10
	0x036512B0 MOVZ W1, 0x2
	0x036512B4 MOV X2, X21
	0x036512B8 MOV X3, X31
	0x036512BC MOV X20, X0
	0x036512C0 BL 0x31E7A14
	0x036512C4 CBZ X19, 0x36512F8
	0x036512C8 MOV X0, X19
	0x036512CC MOV X1, X20
	0x036512D0 MOV X2, X31
	0x036512D4 BL 0x31E7ED0
	0x036512D8 LDR X8, [X19]
	0x036512DC MOV X0, X19
	0x036512E0 LDP X20, X19, [X31 + 0x30]
	0x036512E4 LDP X22, X21, [X31 + 0x20]
	0x036512E8 LDP X2, X1, [X8 + 0x178]
	0x036512EC LDP X24, X23, [X31 + 0x10]
	0x036512F0 LDR X30, [X31], #0x40
	0x036512F4 BR X2
	0x036512F8 BL 0x1C16F20
	0x036512FC BL 0x1C16F28
	0x03651300 STP X30, X19, [X31 - 0x10]!
	0x03651304 LDR W8, [X0 + 0x28]
	0x03651308 ORR W8, W8, 0x4
	0x0365130C CMP W8, 0x4
	0x03651310 B.NE 0x3651320
	0x03651314 LDRB W0, [X0 + 0x21]
	0x03651318 LDP X30, X19, [X31], #0x10
	0x0365131C RET
	0x03651320 ADRP X0, 0xACF000
	0x03651324 LDR X0, [X0 + 0xCE0]
	0x03651328 BL 0x1C16D08
	0x0365132C BL 0x1C16F10
	0x03651330 MOV X19, X0
	0x03651334 ADRP X0, 0xAEB000
	0x03651338 LDR X0, [X0 + 0x988]
	0x0365133C BL 0x1C16D08
	0x03651340 MOV X1, X0
	0x03651344 MOV X0, X19
	0x03651348 MOV X2, X31
	0x0365134C BL 0x3252170
	0x03651350 ADRP X0, 0xAEB000
	0x03651354 LDR X0, [X0 + 0x990]
	0x03651358 BL 0x1C16D08
	0x0365135C MOV X1, X0
	0x03651360 MOV X0, X19
	0x03651364 BL 0x1C16DEC
	0x03651368 STP X30, X19, [X31 - 0x10]!
	0x0365136C LDR W8, [X0 + 0x28]
	0x03651370 ORR W8, W8, 0x4
	0x03651374 CMP W8, 0x4
	0x03651378 B.NE 0x3651388
	0x0365137C LDRB W0, [X0 + 0x22]
	0x03651380 LDP X30, X19, [X31], #0x10
	0x03651384 RET
	0x03651388 ADRP X0, 0xACF000
	0x0365138C LDR X0, [X0 + 0xCE0]
	0x03651390 BL 0x1C16D08
	0x03651394 BL 0x1C16F10
	0x03651398 MOV X19, X0
	0x0365139C ADRP X0, 0xAEB000
	0x036513A0 LDR X0, [X0 + 0x988]
	0x036513A4 BL 0x1C16D08
	0x036513A8 MOV X1, X0
	0x036513AC MOV X0, X19
	0x036513B0 MOV X2, X31
	0x036513B4 BL 0x3252170
	0x036513B8 ADRP X0, 0xAEB000
	0x036513BC LDR X0, [X0 + 0x998]
	0x036513C0 BL 0x1C16D08
	0x036513C4 MOV X1, X0
	0x036513C8 MOV X0, X19
	0x036513CC BL 0x1C16DEC
	0x036513D0 STP X30, X19, [X31 - 0x10]!
	0x036513D4 LDR W8, [X0 + 0x28]
	0x036513D8 ORR W8, W8, 0x4
	0x036513DC CMP W8, 0x4
	0x036513E0 B.NE 0x36513F0
	0x036513E4 LDR W0, [X0 + 0x24]
	0x036513E8 LDP X30, X19, [X31], #0x10
	0x036513EC RET
	0x036513F0 ADRP X0, 0xACF000
	0x036513F4 LDR X0, [X0 + 0xCE0]
	0x036513F8 BL 0x1C16D08
	0x036513FC BL 0x1C16F10
	0x03651400 MOV X19, X0
	0x03651404 ADRP X0, 0xAEB000
	0x03651408 LDR X0, [X0 + 0x988]
	0x0365140C BL 0x1C16D08
	0x03651410 MOV X1, X0
	0x03651414 MOV X0, X19
	0x03651418 MOV X2, X31
	0x0365141C BL 0x3252170
	0x03651420 ADRP X0, 0xAEB000
	0x03651424 LDR X0, [X0 + 0x9A0]
	0x03651428 BL 0x1C16D08
	0x0365142C MOV X1, X0
	0x03651430 MOV X0, X19
	0x03651434 BL 0x1C16DEC
	0x03651438 STP X30, X23, [X31 - 0x30]!
	0x0365143C STP X22, X21, [X31 + 0x10]
	0x03651440 STP X20, X19, [X31 + 0x20]
	0x03651444 ADRP X21, 0xD8F000
	0x03651448 LDRB W8, [X21 + 0x61F]
	0x0365144C MOV X20, X1
	0x03651450 MOV X19, X0
	0x03651454 TBNZ X8, 0x0, 0x3651490
	0x03651458 ADRP X0, 0xAEB000
	0x0365145C LDR X0, [X0 + 0x7E0]
	0x03651460 BL 0x1C16CF4
	0x03651464 ADRP X0, 0xAE8000
	0x03651468 LDR X0, [X0 + 0xF28]
	0x0365146C BL 0x1C16CF4
	0x03651470 ADRP X0, 0xAE8000
	0x03651474 LDR X0, [X0 + 0x8F8]
	0x03651478 BL 0x1C16CF4
	0x0365147C ADRP X0, 0xAD0000
	0x03651480 LDR X0, [X0 + 0x228]
	0x03651484 BL 0x1C16CF4
	0x03651488 MOVZ W8, 0x1
	0x0365148C STRB W8, [X21 + 0x61F]
	0x03651490 CBZ X20, 0x36515B8
	0x03651494 ADRP X8, 0xAE8000
	0x03651498 LDR X8, [X8 + 0xF28]
	0x0365149C LDR X9, [X20]
	0x036514A0 LDR X8, [X8]
	0x036514A4 LDRB W11, [X9 + 0x130]
	0x036514A8 LDRB W10, [X8 + 0x130]
	0x036514AC CMP W11, W10
	0x036514B0 B.CC 0x3651554
	0x036514B4 LDR X9, [X9 + 0xC8]
	0x036514B8 ADD X9, X9, X10, 0x3, LSL
	0x036514BC LDUR X9, [X9 - 0x8]
	0x036514C0 CMP X9, X8
	0x036514C4 B.NE 0x3651554
	0x036514C8 ADRP X8, 0xAEB000
	0x036514CC LDR X8, [X8 + 0x7E0]
	0x036514D0 LDR X22, [X20 + 0x10]
	0x036514D4 LDR X0, [X8]
	0x036514D8 BL 0x1C16F10
	0x036514DC MOV X21, X0
	0x036514E0 CBZ X22, 0x36514F4
	0x036514E4 MOV X0, X21
	0x036514E8 MOV X1, X22
	0x036514EC BL 0x364DC68
	0x036514F0 B 0x365151C
	0x036514F4 ADRP X8, 0xAD0000
	0x036514F8 ADRP X9, 0xAE8000
	0x036514FC LDR X8, [X8 + 0x228]
	0x03651500 LDR X9, [X9 + 0x8F8]
	0x03651504 MOV X0, X21
	0x03651508 MOV X1, X31
	0x0365150C LDR X22, [X8]
	0x03651510 LDR X23, [X9]
	0x03651514 BL 0x33BDD8C
	0x03651518 STP X22, X23, [X21 + 0x10]
	0x0365151C STR X21, [X19 + 0x10]
	0x03651520 LDR X1, [X20 + 0x18]
	0x03651524 MOV X0, X19
	0x03651528 BL 0x364E404

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+136], X23
	004 Move [X31+144], X22
	005 Move [X31+152], X21
	006 Move [X31+160], X20
	007 Move [X31+168], X19
	008 Move X20, 0xD90000
	009 Move X23, 0xAD0000
	010 Move W8, [X20+1555]
	011 Move X23, [X23+2968]
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xAD0000
	019 Move X0, [X0+2968]
	020 Call 0x1C17CF4
	021 Move X0, 0xAD0000
	022 Move X0, [X0+3904]
	023 Call 0x1C17CF4
	024 Move X0, 0xAEC000
	025 Move X0, [X0+2304]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1555], W8
	029 Move X0, [X23]
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move [X31+32], V0
	032 Move [X31+40], V0
	033 Call 0x1C17F10
	034 Move X20, X0
	035 Move X1, X19
	036 Move X2, X31
	037 Call ASN1..ctor, X0, X1
	038 Compare X20, 0
	039 JumpIfEqual {214}
	040 Move W8, [X20+16]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, X20
	043 Move X1, X31
	044 Call ASN1.get_Value, X0
	045 Move X22, 0xAEC000
	046 Move X22, [X22+2304]
	047 Move X19, X0
	048 Move X0, [X22]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Call PublicKey.GetUnsignedBigInteger, X0
	055 Move X19, X0
	056 Move X0, [X23]
	057 Call 0x1C17F10
	058 Move X20, X0
	059 Move X1, X21
	060 Move X2, X31
	061 Call ASN1..ctor, X0, X1
	062 Compare X20, 0
	063 JumpIfEqual {173}
	064 Move W8, [X20+16]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X20
	067 Move X1, X31
	068 Call ASN1.get_Count, X0
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, X20
	071 Move W1, W31
	072 Move X2, X31
	073 Call ASN1.get_Item, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {235}
	076 Move W8, [X0+16]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W1, 1
	079 Move X0, X20
	080 Move X2, X31
	081 Call ASN1.get_Item, X0, X1
	082 Compare X0, 0
	083 JumpIfEqual {236}
	084 Move W8, [X0+16]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W1, 2
	087 Move X0, X20
	088 Move X2, X31
	089 Call ASN1.get_Item, X0, X1
	090 Compare X0, 0
	091 JumpIfEqual {237}
	092 Move W8, [X0+16]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, X20
	095 Move W1, W31
	096 Move X2, X31
	097 Call ASN1.get_Item, X0, X1
	098 Compare X0, 0
	099 JumpIfEqual {238}
	100 Move X1, X31
	101 Call ASN1.get_Value, X0
	102 Move X21, X0
	103 Move X0, [X22]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X21
	109 Call PublicKey.GetUnsignedBigInteger, X0
	110 Move X21, X0
	111 Move W1, 1
	112 Move X0, X20
	113 Move X2, X31
	114 Call ASN1.get_Item, X0, X1
	115 Compare X0, 0
	116 JumpIfEqual {239}
	117 Move X1, X31
	118 Call ASN1.get_Value, X0
	119 Call PublicKey.GetUnsignedBigInteger, X0
	120 Move X22, X0
	121 Move W1, 2
	122 Move X0, X20
	123 Move X2, X31
	124 Call ASN1.get_Item, X0, X1
	125 Compare X0, 0
	126 JumpIfEqual {240}
	127 Move X1, X31
	128 Call ASN1.get_Value, X0
	129 Call PublicKey.GetUnsignedBigInteger, X0
	130 Compare X19, 0
	131 JumpIfEqual {213}
	132 Move X8, 0xAD0000
	133 Move X8, [X8+3904]
	134 Move X20, X0
	135 Move X0, [X8]
	136 Call 0x1C17F10
	137 Move W8, [X19+24]
	138 Move X2, X31
	139 Move X23, X0
	140 Move W1, W8
	141 ShiftRight W1, 29
	142 And W1, W1, 0xFFFFFFF
	143 Call DSACryptoServiceProvider..ctor, X0, X1
	144 Move V0, [X31+32]
	145 Move V1, [X31+48]
	146 Move [X31], V0
	147 Move [X31+8], V1
	148 Compare X23, 0
	149 JumpIfEqual {213}
	150 Move X8, [X23]
	151 Move V0, [X31]
	152 Move V1, [X31+16]
	153 Add X1, X31, 64
	154 Move X0, X23
	155 Move X9, [X8+504]
	156 Move [X31+64], X21
	157 Move [X31+72], X22
	158 Move [X31+80], X20
	159 Move [X31+88], X19
	160 Move [X31+96], V0
	161 Move [X31+104], V1
	162 Move X2, [X8+512]
	163 NotImplemented "Instruction BLR not yet implemented."
	164 Move X0, X23
	165 Move X20, [X31+160]
	166 Move X19, [X31+168]
	167 Move X22, [X31+144]
	168 Move X21, [X31+152]
	169 Move X30, [X31+128]
	170 Move X23, [X31+136]
	171 Add X31, X31, 176
	172 Return X0
	173 Move X0, 0xAEC000
	174 Move X0, [X0+2368]
	175 Call 0x1C17D08
	176 Move X1, X31
	177 Call Locale.GetText, X0
	178 Move X19, X0
	179 Move X0, 0xAD0000
	180 Move X0, [X0+3296]
	181 Call 0x1C17D08
	182 Call 0x1C17F10
	183 Move X20, X0
	184 Move X1, X19
	185 Move X2, X31
	186 Call CryptographicException..ctor, X0, X1
	187 Move X0, 0xAEC000
	188 Move X0, [X0+2376]
	189 Call 0x1C17D08
	190 Move X1, X0
	191 Move X0, X20
	192 Call 0x1C17DEC
	193 Move X0, 0xAEC000
	194 Move X0, [X0+2384]
	195 Call 0x1C17D08
	196 Move X1, X31
	197 Call Locale.GetText, X0
	198 Move X19, X0
	199 Move X0, 0xAD0000
	200 Move X0, [X0+3296]
	201 Call 0x1C17D08
	202 Call 0x1C17F10
	203 Move X20, X0
	204 Move X1, X19
	205 Move X2, X31
	206 Call CryptographicException..ctor, X0, X1
	207 Move X0, 0xAEC000
	208 Move X0, [X0+2376]
	209 Call 0x1C17D08
	210 Move X1, X0
	211 Move X0, X20
	212 Call 0x1C17DEC
	213 Call 0x1C17F20
	214 Call 0x1C17F20
	215 Move X0, 0xAEC000
	216 Move X0, [X0+2392]
	217 Call 0x1C17D08
	218 Move X1, X31
	219 Call Locale.GetText, X0
	220 Move X19, X0
	221 Move X0, 0xAD0000
	222 Move X0, [X0+3296]
	223 Call 0x1C17D08
	224 Call 0x1C17F10
	225 Move X20, X0
	226 Move X1, X19
	227 Move X2, X31
	228 Call CryptographicException..ctor, X0, X1
	229 Move X0, 0xAEC000
	230 Move X0, [X0+2376]
	231 Call 0x1C17D08
	232 Move X1, X0
	233 Move X0, X20
	234 Call 0x1C17DEC
	235 Call 0x1C17F20
	236 Call 0x1C17F20
	237 Call 0x1C17F20
	238 Call 0x1C17F20
	239 Call 0x1C17F20
	240 Call 0x1C17F20
	241 Move X19, X0
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Move X0, X19
	244 Call 0x3EB2AD0
	245 Move X19, X0
	246 Move X0, 0xAA3000
	247 Move X0, [X0+2000]
	248 Call 0x1C17D08
	249 Move X8, [X19]
	250 Move X1, [X8]
	251 Call 0x1C18270
	252 Move TEMP, X0
	253 And TEMP, TEMP, 1
	254 Compare TEMP, 1
	255 JumpIfNotEqual {279}
	256 Move X19, [X19]
	257 Call 0x3EB2AE0
	258 Move X0, 0xAEC000
	259 Move X0, [X0+2360]
	260 Call 0x1C17D08
	261 Move X1, X31
	262 Call Locale.GetText, X0
	263 Move X20, X0
	264 Move X0, 0xAD0000
	265 Move X0, [X0+3296]
	266 Call 0x1C17D08
	267 Call 0x1C17F10
	268 Move X1, X20
	269 Move X2, X19
	270 Move X3, X31
	271 Move X21, X0
	272 Call CryptographicException..ctor, X0, X1, X2
	273 Move X0, 0xAEC000
	274 Move X0, [X0+2376]
	275 Call 0x1C17D08
	276 Move X1, X0
	277 Move X0, X21
	278 Call 0x1C17DEC
	279 Move W0, 8
	280 Call 0x3EB2AF0
	281 Move X8, [X19]
	282 Move [X0], X8
	283 Move X1, 0x864000
	284 Add X1, X1, 3672
	285 Move X2, X31
	286 Call 0x3EB2B00
	287 Move X19, X0
	288 Call 0x3EB2AE0
	289 Move X0, X19
	290 Call 0x1D2D690
	291 Call 0x1991590

Method: System.Security.Cryptography.RSA DecodeRSA(System.Byte[] rawPublicKey)

Disassembly:
	0x03650D10 MOV X0, X19
	0x03650D14 BL 0x3650820
	0x03650D18 CBZ X0, 0x3650E00
	0x03650D1C MOVZ W2, 0x1
	0x03650D20 MOV X1, X21
	0x03650D24 MOV X3, X31
	0x03650D28 BL 0x322ADF0
	0x03650D2C MOV X19, X0
	0x03650D30 MOVZ W1, 0x140
	0x03650D34 MOV X0, X20
	0x03650D38 BL 0x3650820
	0x03650D3C CBZ X0, 0x3650E00
	0x03650D40 MOVZ W2, 0x1
	0x03650D44 MOV X1, X21
	0x03650D48 MOV X3, X31
	0x03650D4C BL 0x322ADF0
	0x03650D50 CBZ X19, 0x3650E00
	0x03650D54 MOV X20, X0
	0x03650D58 CBZ X0, 0x3650E00
	0x03650D5C LDR X8, [X19 + 0x18]
	0x03650D60 LDR W9, [X20 + 0x18]
	0x03650D64 CMP W8, W9
	0x03650D68 B.NE 0x3650DD8
	0x03650D6C CMP W8, 0x1
	0x03650D70 B.LT 0x3650DE0
	0x03650D74 MOV X22, X31
	0x03650D78 AND X8, X8, 0x0
	0x03650D7C ADD X23, X19, 0x20
	0x03650D80 ADD X24, X20, 0x20
	0x03650D84 CMP X22, W8, UXTW
	0x03650D88 B.CS 0x3650DFC
	0x03650D8C LDR X0, [X23, X22, LSL #3]
	0x03650D90 BL 0x3650A44
	0x03650D94 LDR W8, [X20 + 0x18]
	0x03650D98 CMP X22, X8
	0x03650D9C B.CS 0x3650DFC
	0x03650DA0 MOV X21, X0
	0x03650DA4 LDR X0, [X24, X22, LSL #3]
	0x03650DA8 BL 0x3650A44
	0x03650DAC MOV X1, X0
	0x03650DB0 MOV X0, X21
	0x03650DB4 MOV X2, X31
	0x03650DB8 BL 0x3226EF8
	0x03650DBC TBNZ X0, 0x0, 0x3650DD0
	0x03650DC0 LDR W8, [X19 + 0x18]
	0x03650DC4 ADD X22, X22, 0x1
	0x03650DC8 CMP X22, W8, SXTW
	0x03650DCC B.LT 0x3650D84
	0x03650DD0 EOR W10, W0, 0x1
	0x03650DD4 B 0x3650DE4
	0x03650DD8 MOV W10, W31
	0x03650DDC B 0x3650DE4
	0x03650DE0 MOVZ W10, 0x1
	0x03650DE4 LDP X20, X19, [X31 + 0x30]
	0x03650DE8 LDP X22, X21, [X31 + 0x20]
	0x03650DEC LDP X24, X23, [X31 + 0x10]
	0x03650DF0 AND W0, W10, 0x1
	0x03650DF4 LDR X30, [X31], #0x40
	0x03650DF8 RET
	0x03650DFC BL 0x1C16F28
	0x03650E00 BL 0x1C16F20
	0x03650E04 STP X30, X23, [X31 - 0x30]!
	0x03650E08 STP X22, X21, [X31 + 0x10]
	0x03650E0C STP X20, X19, [X31 + 0x20]
	0x03650E10 ADRP X23, 0xD90000
	0x03650E14 ADRP X22, 0xAEC000
	0x03650E18 ADRP X20, 0xAD1000
	0x03650E1C ADRP X21, 0xAE9000
	0x03650E20 LDRB W8, [X23 + 0x61C]
	0x03650E24 LDR X22, [X22 + 0x7E0]
	0x03650E28 LDR X20, [X20 + 0x228]
	0x03650E2C LDR X21, [X21 + 0x8F8]
	0x03650E30 MOV X19, X0
	0x03650E34 TBNZ X8, 0x0, 0x3650E64
	0x03650E38 ADRP X0, 0xAEC000
	0x03650E3C LDR X0, [X0 + 0x7E0]
	0x03650E40 BL 0x1C16CF4
	0x03650E44 ADRP X0, 0xAE9000
	0x03650E48 LDR X0, [X0 + 0x8F8]
	0x03650E4C BL 0x1C16CF4
	0x03650E50 ADRP X0, 0xAD1000
	0x03650E54 LDR X0, [X0 + 0x228]
	0x03650E58 BL 0x1C16CF4
	0x03650E5C MOVZ W8, 0x1
	0x03650E60 STRB W8, [X23 + 0x61C]
	0x03650E64 MOV X0, X19
	0x03650E68 MOV X1, X31
	0x03650E6C BL 0x33BDD8C
	0x03650E70 LDR X0, [X22]
	0x03650E74 BL 0x1C16F10
	0x03650E78 LDR X22, [X20]
	0x03650E7C LDR X21, [X21]
	0x03650E80 MOV X1, X31
	0x03650E84 MOV X20, X0
	0x03650E88 BL 0x33BDD8C
	0x03650E8C STP X22, X21, [X20 + 0x10]
	0x03650E90 STR X20, [X19 + 0x10]
	0x03650E94 LDP X20, X19, [X31 + 0x20]
	0x03650E98 LDP X22, X21, [X31 + 0x10]
	0x03650E9C LDP X30, X23, [X31], #0x30
	0x03650EA0 RET
	0x03650EA4 MOV X1, X31
	0x03650EA8 B 0x33BDD8C
	0x03650EAC STP X30, X21, [X31 - 0x20]!
	0x03650EB0 STP X20, X19, [X31 + 0x10]
	0x03650EB4 ADRP X20, 0xD90000
	0x03650EB8 LDRB W8, [X20 + 0x620]
	0x03650EBC MOV X21, X1
	0x03650EC0 MOV X19, X0
	0x03650EC4 TBNZ X8, 0x0, 0x3650EDC
	0x03650EC8 ADRP X0, 0xAD0000
	0x03650ECC LDR X0, [X0 + 0xB98]
	0x03650ED0 BL 0x1C16CF4
	0x03650ED4 MOVZ W8, 0x1
	0x03650ED8 STRB W8, [X20 + 0x620]
	0x03650EDC CBZ X21, 0x365102C
	0x03650EE0 LDR X8, [X21 + 0x18]
	0x03650EE4 CBZ X8, 0x365102C
	0x03650EE8 CBZ W8, 0x3650FCC
	0x03650EEC LDRB W9, [X21 + 0x20]
	0x03650EF0 CMP W9, 0x30
	0x03650EF4 B.NE 0x3650FA8
	0x03650EF8 CMP W8, 0x2
	0x03650EFC B.LE 0x3650FB0
	0x03650F00 ADRP X8, 0xAD0000
	0x03650F04 LDR X8, [X8 + 0xB98]
	0x03650F08 LDR X0, [X8]
	0x03650F0C BL 0x1C16F10
	0x03650F10 MOV X20, X0
	0x03650F14 MOV X1, X21
	0x03650F18 MOV X2, X31
	0x03650F1C BL 0x31E7A44
	0x03650F20 CBZ X20, 0x3650FD0
	0x03650F24 MOV X0, X20
	0x03650F28 MOV W1, W31
	0x03650F2C MOV X2, X31
	0x03650F30 BL 0x31E8704
	0x03650F34 CBZ X0, 0x3651030
	0x03650F38 LDRB W8, [X0 + 0x10]
	0x03650F3C CMP W8, 0x1
	0x03650F40 B.NE 0x3650F7C
	0x03650F44 MOV X1, X31
	0x03650F48 BL 0x31E7D00
	0x03650F4C CBZ X0, 0x3650FD4
	0x03650F50 LDR W8, [X0 + 0x18]
	0x03650F54 CBZ W8, 0x3650FD8
	0x03650F58 LDRB W8, [X0 + 0x20]
	0x03650F5C CMP W8, 0xFF
	0x03650F60 CSET W8, EQ
	0x03650F64 STRB W8, [X19 + 0x21]
	0x03650F68 MOVZ W1, 0x1
	0x03650F6C MOV X0, X20
	0x03650F70 MOV X2, X31
	0x03650F74 BL 0x31E8704
	0x03650F78 CBZ X0, 0x3651030
	0x03650F7C LDRB W8, [X0 + 0x10]
	0x03650F80 CMP W8, 0x2
	0x03650F84 B.NE 0x3650FC4
	0x03650F88 MOVZ W8, 0x1
	0x03650F8C STRB W8, [X19 + 0x22]
	0x03650F90 MOV X1, X31
	0x03650F94 BL 0x31E8F8C
	0x03650F98 MOV W8, W0
	0x03650F9C MOV W0, W31
	0x03650FA0 STR W8, [X19 + 0x24]
	0x03650FA4 B 0x3651030
	0x03650FA8 MOVZ W0, 0x2
	0x03650FAC B 0x3651030
	0x03650FB0 B.NE 0x3650FBC
	0x03650FB4 LDRB W8, [X21 + 0x21]
	0x03650FB8 CBZ W8, 0x3650F00
	0x03650FBC MOVZ W0, 0x3
	0x03650FC0 B 0x3651030
	0x03650FC4 MOV W0, W31
	0x03650FC8 B 0x3651030
	0x03650FCC BL 0x1C16F28
	0x03650FD0 BL 0x1C16F20
	0x03650FD4 BL 0x1C16F20
	0x03650FD8 BL 0x1C16F28
	0x03650FDC B 0x3650FF4
	0x03650FE0 B 0x3650FF4
	0x03650FE4 B 0x3650FF4
	0x03650FE8 B 0x3650FF4
	0x03650FEC B 0x3650FF4
	0x03650FF0 B 0x3650FF4
	0x03650FF4 MOV X19, X0
	0x03650FF8 CMP W1, 0x1
	0x03650FFC B.NE 0x3651064
	0x03651000 MOV X0, X19
	0x03651004 BL 0x3EB1AD0
	0x03651008 MOV X19, X0
	0x0365100C ADRP X0, 0xAA8000
	0x03651010 LDR X0, [X0 + 0xCC0]
	0x03651014 BL 0x1C16D08
	0x03651018 LDR X8, [X19]
	0x0365101C LDR X1, [X8]
	0x03651020 BL 0x1C17270
	0x03651024 TBZ X0, 0x0, 0x365103C
	0x03651028 BL 0x3EB1AE0
	0x0365102C MOVZ W0, 0x1
	0x03651030 LDP X20, X19, [X31 + 0x10]
	0x03651034 LDP X30, X21, [X31], #0x20
	0x03651038 RET
	0x0365103C MOVZ W0, 0x8
	0x03651040 BL 0x3EB1AF0
	0x03651044 LDR X8, [X19]
	0x03651048 STR X8, [X0]
	0x0365104C ADRP X1, 0x863000
	0x03651050 ADD X1, X1, 0xE58
	0x03651054 MOV X2, X31
	0x03651058 BL 0x3EB1B00
	0x0365105C MOV X19, X0
	0x03651060 BL 0x3EB1AE0
	0x03651064 MOV X0, X19
	0x03651068 BL 0x1D2C690
	0x0365106C BL 0x1990590
	0x03651070 STR X30, [X31 - 0x40]!
	0x03651074 STP X24, X23, [X31 + 0x10]
	0x03651078 STP X22, X21, [X31 + 0x20]
	0x0365107C STP X20, X19, [X31 + 0x30]
	0x03651080 ADRP X24, 0xD8F000
	0x03651084 LDRB W8, [X24 + 0x61E]
	0x03651088 MOV W19, W4
	0x0365108C MOV W23, W3
	0x03651090 MOV W22, W2
	0x03651094 MOV W21, W1
	0x03651098 MOV X20, X0
	0x0365109C TBNZ X8, 0x0, 0x36510CC
	0x036510A0 ADRP X0, 0xAEB000
	0x036510A4 LDR X0, [X0 + 0x7E0]
	0x036510A8 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+160], X30
	003 Move [X31+168], X21
	004 Move [X31+176], X20
	005 Move [X31+184], X19
	006 Move X21, 0xD91000
	007 Move X20, 0xAD1000
	008 Move W8, [X21+1556]
	009 Move X20, [X20+2968]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xAD1000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move X0, 0xAED000
	019 Move X0, [X0+2304]
	020 Call 0x1C17CF4
	021 Move X0, 0xAD2000
	022 Move X0, [X0+416]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1556], W8
	026 Move X0, [X20]
	027 NotImplemented "Instruction MOVI not yet implemented."
	028 Move [X31+64], V0
	029 Move [X31+72], V0
	030 Move [X31+3], V0
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Move X1, X19
	034 Move X2, X31
	035 Call ASN1..ctor, X0, X1
	036 Compare X20, 0
	037 JumpIfEqual {146}
	038 Move X0, X20
	039 Move X1, X31
	040 Call ASN1.get_Count, X0
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Compare W0, 0
	044 JumpIfEqual {147}
	045 Move X0, X20
	046 Move W1, W31
	047 Move X2, X31
	048 Call ASN1.get_Item, X0, X1
	049 Move X19, X0
	050 Compare X0, 0
	051 JumpIfEqual {125}
	052 Move W8, [X19+16]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CSEL not yet implemented."
	055 Compare X0, 0
	056 JumpIfEqual {167}
	057 Move W1, 1
	058 Move X2, X31
	059 Call ASN1.get_Item, X0, X1
	060 Move X20, X0
	061 Compare X0, 0
	062 JumpIfEqual {168}
	063 Move W8, [X20+16]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X19
	066 Move X1, X31
	067 Call ASN1.get_Value, X0
	068 Move X8, 0xAED000
	069 Move X8, [X8+2304]
	070 Move X19, X0
	071 Move X0, [X8]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X19
	077 Call PublicKey.GetUnsignedBigInteger, X0
	078 Move X19, X0
	079 Move X0, X20
	080 Move X1, X31
	081 Call ASN1.get_Value, X0
	082 Compare X19, 0
	083 JumpIfEqual {145}
	084 Move X8, 0xAD2000
	085 Move X8, [X8+416]
	086 Move X20, X0
	087 Move X0, [X8]
	088 Call 0x1C17F10
	089 Move W8, [X19+24]
	090 Move X2, X31
	091 Move X21, X0
	092 Move W1, W8
	093 ShiftRight W1, 29
	094 And W1, W1, 0xFFFFFFF
	095 Call RSACryptoServiceProvider..ctor, X0, X1
	096 Move V0, [X31+48]
	097 Move V1, [X31+64]
	098 Move V2, [X31+5]
	099 Move [X31], V0
	100 Move [X31+8], V1
	101 Move [X31+2], V2
	102 Compare X21, 0
	103 JumpIfEqual {145}
	104 Move X8, [X21]
	105 Move V0, [X31]
	106 Move V1, [X31+16]
	107 Move V2, [X31+2]
	108 Add X1, X31, 96
	109 Move X9, [X8+504]
	110 Move [X31+96], X20
	111 Move [X31+104], X19
	112 Move [X31+112], V0
	113 Move [X31+120], V1
	114 Move [X31+9], V2
	115 Move X2, [X8+512]
	116 Move X0, X21
	117 NotImplemented "Instruction BLR not yet implemented."
	118 Move X0, X21
	119 Move X20, [X31+176]
	120 Move X19, [X31+184]
	121 Move X30, [X31+160]
	122 Move X21, [X31+168]
	123 Add X31, X31, 192
	124 Return X0
	125 Move X0, 0xAED000
	126 Move X0, [X0+2328]
	127 Call 0x1C17D08
	128 Move X1, X31
	129 Call Locale.GetText, X0
	130 Move X19, X0
	131 Move X0, 0xAD1000
	132 Move X0, [X0+3296]
	133 Call 0x1C17D08
	134 Call 0x1C17F10
	135 Move X20, X0
	136 Move X1, X19
	137 Move X2, X31
	138 Call CryptographicException..ctor, X0, X1
	139 Move X0, 0xAED000
	140 Move X0, [X0+2336]
	141 Call 0x1C17D08
	142 Move X1, X0
	143 Move X0, X20
	144 Call 0x1C17DEC
	145 Call 0x1C17F20
	146 Call 0x1C17F20
	147 Move X0, 0xAED000
	148 Move X0, [X0+2344]
	149 Call 0x1C17D08
	150 Move X1, X31
	151 Call Locale.GetText, X0
	152 Move X19, X0
	153 Move X0, 0xAD1000
	154 Move X0, [X0+3296]
	155 Call 0x1C17D08
	156 Call 0x1C17F10
	157 Move X20, X0
	158 Move X1, X19
	159 Move X2, X31
	160 Call CryptographicException..ctor, X0, X1
	161 Move X0, 0xAED000
	162 Move X0, [X0+2336]
	163 Call 0x1C17D08
	164 Move X1, X0
	165 Move X0, X20
	166 Call 0x1C17DEC
	167 Call 0x1C17F20
	168 Call 0x1C17F20
	169 Move X0, 0xAED000
	170 Move X0, [X0+2352]
	171 Call 0x1C17D08
	172 Move X1, X31
	173 Call Locale.GetText, X0
	174 Move X19, X0
	175 Move X0, 0xAD1000
	176 Move X0, [X0+3296]
	177 Call 0x1C17D08
	178 Call 0x1C17F10
	179 Move X20, X0
	180 Move X1, X19
	181 Move X2, X31
	182 Call CryptographicException..ctor, X0, X1
	183 Move X0, 0xAED000
	184 Move X0, [X0+2336]
	185 Call 0x1C17D08
	186 Move X1, X0
	187 Move X0, X20
	188 Call 0x1C17DEC
	189 Move X19, X0
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move X0, X19
	192 Call 0x3EB2AD0
	193 Move X19, X0
	194 Move X0, 0xAA3000
	195 Move X0, [X0+2000]
	196 Call 0x1C17D08
	197 Move X8, [X19]
	198 Move X1, [X8]
	199 Call 0x1C18270
	200 Move TEMP, X0
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfNotEqual {227}
	204 Move X19, [X19]
	205 Call 0x3EB2AE0
	206 Move X0, 0xAEC000
	207 Move X0, [X0+2360]
	208 Call 0x1C17D08
	209 Move X1, X31
	210 Call Locale.GetText, X0
	211 Move X20, X0
	212 Move X0, 0xAD0000
	213 Move X0, [X0+3296]
	214 Call 0x1C17D08
	215 Call 0x1C17F10
	216 Move X1, X20
	217 Move X2, X19
	218 Move X3, X31
	219 Move X21, X0
	220 Call CryptographicException..ctor, X0, X1, X2
	221 Move X0, 0xAEC000
	222 Move X0, [X0+2336]
	223 Call 0x1C17D08
	224 Move X1, X0
	225 Move X0, X21
	226 Call 0x1C17DEC
	227 Move W0, 8
	228 Call 0x3EB2AF0
	229 Move X8, [X19]
	230 Move [X0], X8
	231 Move X1, 0x864000
	232 Add X1, X1, 3672
	233 Move X2, X31
	234 Call 0x3EB2B00
	235 Move X19, X0
	236 Call 0x3EB2AE0
	237 Move X0, X19
	238 Call 0x1D2D690
	239 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x036515C8 MOV X19, X0
	0x036515CC ADRP X0, 0xAEB000
	0x036515D0 LDR X0, [X0 + 0x848]
	0x036515D4 BL 0x1C16D08
	0x036515D8 MOV X1, X0
	0x036515DC MOV X0, X19
	0x036515E0 MOV X2, X31
	0x036515E4 BL 0x330E100
	0x036515E8 ADRP X0, 0xAEB000
	0x036515EC LDR X0, [X0 + 0x9B0]
	0x036515F0 BL 0x1C16D08
	0x036515F4 MOV X1, X0
	0x036515F8 MOV X0, X19
	0x036515FC BL 0x1C16DEC
	0x03651600 STP X30, X21, [X31 - 0x20]!
	0x03651604 STP X20, X19, [X31 + 0x10]
	0x03651608 ADRP X21, 0xD8F000
	0x0365160C LDRB W8, [X21 + 0x622]
	0x03651610 MOV W19, W1
	0x03651614 MOV X20, X0
	0x03651618 TBNZ X8, 0x0, 0x36516A8
	0x0365161C ADRP X0, 0xAA2000
	0x03651620 LDR X0, [X0 + 0x8F0]
	0x03651624 BL 0x1C16CF4
	0x03651628 ADRP X0, 0xAA4000
	0x0365162C LDR X0, [X0 + 0x278]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD90000
	006 Move X21, 0xAA3000
	007 Move X19, 0xAEC000
	008 Move W8, [X20+1557]
	009 Move X21, [X21+1560]
	010 Move X19, [X19+2304]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAA3000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xAEC000
	019 Move X0, [X0+2304]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1557], W8
	023 Move X0, [X21]
	024 Move W1, W31
	025 Call 0x1C17D6C
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], X0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

