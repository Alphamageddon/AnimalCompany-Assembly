Type: System.Security.Cryptography.X509Certificates.X509Store

Method: System.Void .ctor(System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation)

Disassembly:
	0x0365B730 LDR X0, [X0 + 0x870]
	0x0365B734 BL 0x1C16CF4
	0x0365B738 ADRP X0, 0xAC8000
	0x0365B73C LDR X0, [X0 + 0x770]
	0x0365B740 BL 0x1C16CF4
	0x0365B744 ADRP X0, 0xAC6000
	0x0365B748 LDR X0, [X0 + 0x228]
	0x0365B74C BL 0x1C16CF4
	0x0365B750 MOVZ W8, 0x1
	0x0365B754 STRB W8, [X21 + 0x66F]
	0x0365B758 LDR X0, [X20 + 0x18]
	0x0365B75C CBZ X0, 0x365B8E8
	0x0365B760 MOV W1, W19
	0x0365B764 BL 0x3658F78
	0x0365B768 CBZ X0, 0x365B8E8
	0x0365B76C LDR X21, [X0 + 0x10]
	0x0365B770 MOV X19, X0
	0x0365B774 CBZ X21, 0x365B8E8
	0x0365B778 MOV X0, X21
	0x0365B77C BL 0x365272C
	0x0365B780 STR X0, [X20 + 0x38]
	0x0365B784 MOV X0, X21
	0x0365B788 BL 0x3652514
	0x0365B78C CBZ X0, 0x365B8E8
	0x0365B790 BL 0x364FB6C
	0x0365B794 STR X0, [X20 + 0x40]
	0x0365B798 MOV X0, X21
	0x0365B79C BL 0x3651BFC
	0x0365B7A0 CBZ X0, 0x365B8E8
	0x0365B7A4 ADRP X8, 0xAC6000
	0x0365B7A8 LDR X8, [X8 + 0x228]
	0x0365B7AC LDR X1, [X8]
	0x0365B7B0 BL 0x36541C8
	0x0365B7B4 CBZ X0, 0x365B7D4
	0x0365B7B8 ADRP X8, 0xAE1000
	0x0365B7BC LDR X8, [X8 + 0x860]
	0x0365B7C0 LDR X9, [X0]
	0x0365B7C4 MOV X22, X0
	0x0365B7C8 LDR X8, [X8]
	0x0365B7CC CMP X9, X8
	0x0365B7D0 B.EQ 0x365B820
	0x0365B7D4 MOV X0, X21
	0x0365B7D8 BL 0x36527A4
	0x0365B7DC CMP W0, 0x3
	0x0365B7E0 B.GE 0x365B7EC
	0x0365B7E4 MOV X22, X31
	0x0365B7E8 B 0x365B7FC
	0x0365B7EC LDR W8, [X19 + 0x28]
	0x0365B7F0 MOV X22, X31
	0x0365B7F4 ORR W8, W8, 0x400
	0x0365B7F8 STR W8, [X19 + 0x28]
	0x0365B7FC MOVZ W23, 0x1
	0x0365B800 MOV X1, X21
	0x0365B804 BL 0x365B410
	0x0365B808 TBNZ X0, 0x0, 0x365B854
	0x0365B80C LDR W8, [X20 + 0x30]
	0x0365B810 SUBS W8, W8, 0x1
	0x0365B814 B.LT 0x365B840
	0x0365B818 STR W8, [X20 + 0x30]
	0x0365B81C B 0x365B854
	0x0365B820 MOV X0, X22
	0x0365B824 BL 0x3651300
	0x0365B828 MOV W23, W31
	0x0365B82C TBNZ X0, 0x0, 0x365B800
	0x0365B830 LDR W8, [X19 + 0x28]
	0x0365B834 ORR W8, W8, 0x400
	0x0365B838 STR W8, [X19 + 0x28]
	0x0365B83C B 0x365B800
	0x0365B840 LDR X8, [X20 + 0x48]
	0x0365B844 CBZ X8, 0x365B854
	0x0365B848 LDR W9, [X8 + 0x28]
	0x0365B84C ORR W9, W9, 0x400
	0x0365B850 STR W9, [X8 + 0x28]
	0x0365B854 TBNZ X23, 0x0, 0x365B888
	0x0365B858 MOV X0, X22

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0xD86000
	008 Move W8, [X22+1691]
	009 Move W19, W2
	010 Move W21, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xAE2000
	017 Move X0, [X0+3152]
	018 Call 0x1C17CF4
	019 Move X0, 0xAA0000
	020 Move X0, [X0+3784]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1691], W8
	024 Move X0, X20
	025 Move X1, X31
	026 Call Object..ctor, X0
	027 Subtract W8, W21, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Subtract W8, W19, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, 0xAA0000
	033 Move X8, [X8+3784]
	034 Move X0, [X8]
	035 Move X8, 0xAE2000
	036 Move X8, [X8+3152]
	037 Move TEMP, 0
	038 Not TEMP
	039 Move X9, TEMP
	040 Add X0, X31, 8
	041 Move X1, X31
	042 Move X8, [X8]
	043 Move [X31+24], W21
	044 Move [X31+8], X8
	045 Move [X31+16], X9
	046 Call Enum.ToString, X0
	047 Move [X20+16], X0
	048 Move [X20+24], W19
	049 Move X20, [X31+64]
	050 Move X19, [X31+72]
	051 Move X22, [X31+48]
	052 Move X21, [X31+56]
	053 Move X30, [X31+32]
	054 Add X31, X31, 80
	055 Return 
	056 Move X0, 0xAA1000
	057 Move X0, [X0+1400]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xAC7000
	062 Move X0, [X0+704]
	063 Move X0, 0xAA1000
	064 Move X0, [X0+1400]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0xAE2000
	069 Move X0, [X0+3160]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentException..ctor, X0, X1
	075 Move X0, 0xAE2000
	076 Move X0, [X0+3168]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC

Method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_Certificates()

Disassembly:
	0x0365B41C MOV X19, X1
	0x0365B420 MOV X0, X1
	0x0365B424 MOV X1, X31
	0x0365B428 BL 0x326B63C
	0x0365B42C MOV X20, X0
	0x0365B430 MOV X0, X19
	0x0365B434 MOV X1, X31
	0x0365B438 BL 0x326B698
	0x0365B43C MOV X1, X0
	0x0365B440 MOV X0, X20
	0x0365B444 LDP X20, X19, [X31 + 0x10]
	0x0365B448 MOV X2, X31
	0x0365B44C LDR X30, [X31], #0x20
	0x0365B450 B 0x321BA08
	0x0365B454 BL 0x1C16F20
	0x0365B458 STP X30, X25, [X31 - 0x40]!
	0x0365B45C STP X24, X23, [X31 + 0x10]
	0x0365B460 STP X22, X21, [X31 + 0x20]
	0x0365B464 STP X20, X19, [X31 + 0x30]
	0x0365B468 ADRP X20, 0xD85000
	0x0365B46C LDRB W8, [X20 + 0x66E]
	0x0365B470 MOV W22, W1
	0x0365B474 MOV X19, X0
	0x0365B478 TBNZ X8, 0x0, 0x365B49C
	0x0365B47C ADRP X0, 0xA99000
	0x0365B480 LDR X0, [X0 + 0x9F0]
	0x0365B484 BL 0x1C16CF4
	0x0365B488 ADRP X0, 0xAC5000
	0x0365B48C LDR X0, [X0 + 0xF48]
	0x0365B490 BL 0x1C16CF4
	0x0365B494 MOVZ W8, 0x1
	0x0365B498 STRB W8, [X20 + 0x66E]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD86000
	005 Move W8, [X20+1692]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAE2000
	012 Move X0, [X0+2800]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1692], W8
	016 Move X20, [X19+32]
	017 Compare X20, 0
	018 JumpIfEqual {26}
	019 Move X8, [X19+48]
	020 Compare X8, 0
	021 JumpIfNotEqual {34}
	022 Move X0, X20
	023 Move X1, X31
	024 Call CollectionBase.Clear, X0
	025 Move X20, [X19+32]
	026 Move X8, 0xAE2000
	027 Move X8, [X8+2800]
	028 Move X0, [X8]
	029 Call 0x1C17F10
	030 Move X1, X31
	031 Move X20, X0
	032 Call CollectionBase..ctor, X0
	033 Move [X19+32], X20
	034 Move X0, X20
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0

Method: Mono.Security.X509.X509Stores get_Factory()

Disassembly:
	0x0365F950 LDR X30, [X31], #0x20
	0x0365F954 RET
	0x0365F958 LDR X0, [X0 + 0x10]
	0x0365F95C RET
	0x0365F960 LDR X0, [X0 + 0x10]
	0x0365F964 RET
	0x0365F968 STR X1, [X0 + 0x10]

ISIL:
	001 Move W8, [X0+24]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X0, X31
	004 Call X509StoreManager.get_CurrentUser
	005 Return X0
	006 Move X0, X31
	007 Call X509StoreManager.get_LocalMachine
	008 Return X0

Method: Mono.Security.X509.X509Store get_Store()

Disassembly:
	0x0365F96C RET
	0x0365F970 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void Close()

Disassembly:
	0x0365B16C BL 0x1C16CF4
	0x0365B170 ADRP X0, 0xAE1000
	0x0365B174 LDR X0, [X0 + 0xBF8]
	0x0365B178 BL 0x1C16CF4
	0x0365B17C MOVZ W8, 0x1
	0x0365B180 STRB W8, [X22 + 0x66B]
	0x0365B184 CBZ X19, 0x365B2C8

ISIL:
	001 Move X8, X0
	002 Move X0, [X0+32]
	003 Move [X8+48], X31
	004 Compare X0, 0
	005 JumpIfEqual {9}
	006 Move X1, X31
	007 Call CollectionBase.Clear, X0
	008 Return 
	009 Return 

Method: System.Void Dispose()

Disassembly:
	0x0365F974 STP X20, X19, [X31 + 0x10]
	0x0365F978 ADRP X21, 0xD81000
	0x0365F97C LDRB W8, [X21 + 0x6AF]
	0x0365F980 MOV X20, X1
	0x0365F984 MOV X19, X0
	0x0365F988 TBNZ X8, 0x0, 0x365F9A0
	0x0365F98C ADRP X0, 0xADC000

ISIL:
	001 Move X8, X0
	002 Move X0, [X0+32]
	003 Move [X8+48], X31
	004 Compare X0, 0
	005 JumpIfEqual {9}
	006 Move X1, X31
	007 Call CollectionBase.Clear, X0
	008 Return 
	009 Return 

Method: System.Void Open(System.Security.Cryptography.X509Certificates.OpenFlags flags)

Disassembly:
	0x0365B85C BL 0x3651368
	0x0365B860 TBZ X0, 0x0, 0x365B888
	0x0365B864 MOV X0, X22
	0x0365B868 BL 0x36513D0
	0x0365B86C LDR W8, [X20 + 0x30]
	0x0365B870 CMP W0, W8
	0x0365B874 B.GE 0x365B888
	0x0365B878 MOV X0, X22
	0x0365B87C BL 0x36513D0
	0x0365B880 STR W0, [X20 + 0x30]
	0x0365B884 STR X19, [X20 + 0x48]
	0x0365B888 MOV X0, X21
	0x0365B88C BL 0x3651BFC
	0x0365B890 CBZ X0, 0x365B8E8
	0x0365B894 ADRP X8, 0xAC8000
	0x0365B898 LDR X8, [X8 + 0x770]
	0x0365B89C LDR X1, [X8]
	0x0365B8A0 BL 0x36541C8
	0x0365B8A4 CBZ X0, 0x365B8D4
	0x0365B8A8 ADRP X8, 0xAE1000
	0x0365B8AC LDR X8, [X8 + 0x870]
	0x0365B8B0 LDR X9, [X0]
	0x0365B8B4 LDR X8, [X8]
	0x0365B8B8 CMP X9, X8
	0x0365B8BC B.NE 0x365B8D4
	0x0365B8C0 BL 0x3655AD4
	0x0365B8C4 TBNZ X0, 0x2, 0x365B8D4
	0x0365B8C8 LDR W8, [X19 + 0x28]
	0x0365B8CC ORR W8, W8, 0x10
	0x0365B8D0 STR W8, [X19 + 0x28]
	0x0365B8D4 MOV X1, X19
	0x0365B8D8 LDP X20, X19, [X31 + 0x20]
	0x0365B8DC LDP X22, X21, [X31 + 0x10]
	0x0365B8E0 LDP X30, X23, [X31], #0x30
	0x0365B8E4 B 0x365BC60
	0x0365B8E8 BL 0x1C16F20
	0x0365B8EC STP X30, X27, [X31 - 0x50]!
	0x0365B8F0 STP X26, X25, [X31 + 0x10]
	0x0365B8F4 STP X24, X23, [X31 + 0x20]
	0x0365B8F8 STP X22, X21, [X31 + 0x30]
	0x0365B8FC STP X20, X19, [X31 + 0x40]
	0x0365B900 LDR X8, [X0]
	0x0365B904 MOV W20, W1
	0x0365B908 MOV X19, X0
	0x0365B90C LDP X9, X8, [X8 + 0x1A8]
	0x0365B910 MOV X1, X8
	0x0365B914 BLR X9
	0x0365B918 CBZ X0, 0x365BA80
	0x0365B91C LDR W8, [X0 + 0x34]
	0x0365B920 CBZ W8, 0x365BA68
	0x0365B924 CMP W8, 0x2
	0x0365B928 B.EQ 0x365B93C
	0x0365B92C CMP W8, 0x1
	0x0365B930 B.NE 0x365BA84
	0x0365B934 MOVZ W21, 0x1
	0x0365B938 B 0x365B940
	0x0365B93C MOV W21, W31
	0x0365B940 LDR X8, [X19 + 0x18]
	0x0365B944 CBZ X8, 0x365BA80
	0x0365B948 LDR X0, [X8 + 0x10]
	0x0365B94C CBZ X0, 0x365BA80
	0x0365B950 LDR X8, [X0]
	0x0365B954 LDR X9, [X8 + 0x298]
	0x0365B958 LDR X1, [X8 + 0x2A0]
	0x0365B95C BLR X9
	0x0365B960 SUBS W22, W0, 0x1
	0x0365B964 B.MI 0x365BA68
	0x0365B968 MOVZ W25, 0x40
	0x0365B96C UBFM W26, W20, 0x10, 0x10
	0x0365B970 MOVK W25, 0x1000000
	0x0365B974 LDR X8, [X19]
	0x0365B978 MOV X0, X19
	0x0365B97C LDP X9, X1, [X8 + 0x1A8]
	0x0365B980 BLR X9
	0x0365B984 CBZ X0, 0x365BA80
	0x0365B988 LDR W8, [X0 + 0x30]
	0x0365B98C ADD W23, W22, 0x1
	0x0365B990 CMP W8, 0x2
	0x0365B994 B.EQ 0x365B9A8
	0x0365B998 CBNZ W8, 0x365B9D4
	0x0365B99C CMP W22, 0x0
	0x0365B9A0 CSET W27, EQ
	0x0365B9A4 B 0x365B9D8
	0x0365B9A8 LDR X8, [X19 + 0x18]
	0x0365B9AC CBZ X8, 0x365BA80
	0x0365B9B0 LDR X0, [X8 + 0x10]
	0x0365B9B4 CBZ X0, 0x365BA80
	0x0365B9B8 LDR X8, [X0]
	0x0365B9BC LDR X9, [X8 + 0x298]
	0x0365B9C0 LDR X1, [X8 + 0x2A0]
	0x0365B9C4 BLR X9
	0x0365B9C8 CMP W23, W0
	0x0365B9CC CSET W27, NE
	0x0365B9D0 B 0x365B9D8
	0x0365B9D4 MOVZ W27, 0x1
	0x0365B9D8 LDR X0, [X19 + 0x18]
	0x0365B9DC CBZ X0, 0x365BA80
	0x0365B9E0 MOV W1, W22
	0x0365B9E4 BL 0x3658F78
	0x0365B9E8 MOV X24, X0
	0x0365B9EC TBZ X26, 0x0, 0x365B9F8
	0x0365B9F0 CBNZ X24, 0x365BA28
	0x0365B9F4 B 0x365BA80
	0x0365B9F8 CBZ X24, 0x365BA80
	0x0365B9FC LDRB W8, [X24 + 0x28]
	0x0365BA00 TBNZ X8, 0x3, 0x365BA28
	0x0365BA04 MOV W26, W31
	0x0365BA08 TBNZ X20, 0x10, 0x365BA38
	0x0365BA0C EOR W8, W27, 0x1
	0x0365BA10 TBNZ X8, 0x0, 0x365BA38
	0x0365BA14 LDR X1, [X24 + 0x10]
	0x0365BA18 BL 0x365B410
	0x0365BA1C TBZ X0, 0x0, 0x365BA44
	0x0365BA20 MOV W26, W31
	0x0365BA24 B 0x365BA38
	0x0365BA28 LDR W8, [X24 + 0x28]
	0x0365BA2C MOVZ W26, 0x1
	0x0365BA30 ORR W8, W8, W25, 0x0
	0x0365BA34 STR W8, [X24 + 0x28]
	0x0365BA38 SUBS W22, W22, 0x1
	0x0365BA3C B.PL 0x365B974
	0x0365BA40 B 0x365BA68
	0x0365BA44 LDR X1, [X24 + 0x10]
	0x0365BA48 LDR W26, [X24 + 0x28]
	0x0365BA4C MOV X0, X19
	0x0365BA50 MOV W2, W23
	0x0365BA54 MOV W3, W21
	0x0365BA58 BL 0x365BF38
	0x0365BA5C ORR W8, W0, W26, 0x0
	0x0365BA60 UBFM W26, W8, 0x2, 0x2
	0x0365BA64 B 0x365BA34
	0x0365BA68 LDP X20, X19, [X31 + 0x40]
	0x0365BA6C LDP X22, X21, [X31 + 0x30]
	0x0365BA70 LDP X24, X23, [X31 + 0x20]
	0x0365BA74 LDP X26, X25, [X31 + 0x10]
	0x0365BA78 LDP X30, X27, [X31], #0x50
	0x0365BA7C RET
	0x0365BA80 BL 0x1C16F20
	0x0365BA84 ADRP X0, 0xAE1000
	0x0365BA88 LDR X0, [X0 + 0xC90]
	0x0365BA8C BL 0x1C16D08
	0x0365BA90 MOV X1, X31
	0x0365BA94 BL 0x320A160
	0x0365BA98 MOV X19, X0
	0x0365BA9C ADRP X0, 0xA98000
	0x0365BAA0 LDR X0, [X0 + 0x5B0]
	0x0365BAA4 BL 0x1C16D08
	0x0365BAA8 BL 0x1C16F10
	0x0365BAAC MOV X1, X19
	0x0365BAB0 MOV X2, X31
	0x0365BAB4 MOV X20, X0
	0x0365BAB8 BL 0x337DF1C
	0x0365BABC ADRP X0, 0xAE1000
	0x0365BAC0 LDR X0, [X0 + 0xC98]
	0x0365BAC4 BL 0x1C16D08
	0x0365BAC8 MOV X1, X0
	0x0365BACC MOV X0, X20
	0x0365BAD0 BL 0x1C16DEC
	0x0365BAD4 STR X30, [X31 - 0x20]!
	0x0365BAD8 STP X20, X19, [X31 + 0x10]
	0x0365BADC MOV X19, X0
	0x0365BAE0 LDR X0, [X0 + 0x18]
	0x0365BAE4 CBZ X0, 0x365BB5C
	0x0365BAE8 MOV W1, W31
	0x0365BAEC BL 0x3658F78
	0x0365BAF0 CBZ X0, 0x365BB5C
	0x0365BAF4 LDR X1, [X0 + 0x10]
	0x0365BAF8 MOV X20, X0
	0x0365BAFC BL 0x365B410
	0x0365BB00 MOV X1, X20
	0x0365BB04 BL 0x365BC60
	0x0365BB08 LDR X8, [X19 + 0x18]
	0x0365BB0C CBZ X8, 0x365BB5C
	0x0365BB10 LDR X0, [X8 + 0x10]
	0x0365BB14 CBZ X0, 0x365BB5C
	0x0365BB18 LDR X8, [X0]
	0x0365BB1C LDR X9, [X8 + 0x298]
	0x0365BB20 LDR X1, [X8 + 0x2A0]
	0x0365BB24 BLR X9
	0x0365BB28 SUBS W20, W0, 0x1
	0x0365BB2C B.MI 0x365BB50
	0x0365BB30 LDR X0, [X19 + 0x18]
	0x0365BB34 CBZ X0, 0x365BB5C
	0x0365BB38 MOV W1, W20
	0x0365BB3C BL 0x3658F78
	0x0365BB40 CBZ X0, 0x365BB5C
	0x0365BB44 BL 0x3658C88
	0x0365BB48 SUBS W20, W20, 0x1
	0x0365BB4C B.PL 0x365BB30
	0x0365BB50 LDP X20, X19, [X31 + 0x10]
	0x0365BB54 LDR X30, [X31], #0x20
	0x0365BB58 RET
	0x0365BB5C BL 0x1C16F20
	0x0365BB60 STR X30, [X31 - 0x20]!
	0x0365BB64 STP X20, X19, [X31 + 0x10]
	0x0365BB68 ADRP X20, 0xD85000
	0x0365BB6C LDRB W8, [X20 + 0x691]
	0x0365BB70 MOV X19, X0
	0x0365BB74 TBNZ X8, 0x0, 0x365BB98
	0x0365BB78 ADRP X0, 0xADE000
	0x0365BB7C LDR X0, [X0 + 0x1C0]
	0x0365BB80 BL 0x1C16CF4
	0x0365BB84 ADRP X0, 0xAC5000
	0x0365BB88 LDR X0, [X0 + 0xCC0]
	0x0365BB8C BL 0x1C16CF4
	0x0365BB90 MOVZ W8, 0x1
	0x0365BB94 STRB W8, [X20 + 0x691]
	0x0365BB98 CBZ X19, 0x365BC24
	0x0365BB9C MOV X0, X19
	0x0365BBA0 BL 0x3652024
	0x0365BBA4 CBZ X0, 0x365BBDC
	0x0365BBA8 ADRP X8, 0xADE000
	0x0365BBAC LDR X8, [X8 + 0x1C0]
	0x0365BBB0 LDR X9, [X0]
	0x0365BBB4 LDR X8, [X8]
	0x0365BBB8 LDRB W11, [X9 + 0x130]
	0x0365BBBC LDRB W10, [X8 + 0x130]
	0x0365BBC0 CMP W11, W10
	0x0365BBC4 B.CC 0x365BBDC
	0x0365BBC8 LDR X9, [X9 + 0xC8]
	0x0365BBCC ADD X9, X9, X10, 0x3, LSL
	0x0365BBD0 LDUR X9, [X9 - 0x8]
	0x0365BBD4 CMP X9, X8
	0x0365BBD8 B.EQ 0x365BC1C
	0x0365BBDC ADRP X20, 0xAC5000
	0x0365BBE0 LDR X20, [X20 + 0xCC0]
	0x0365BBE4 MOV X0, X19
	0x0365BBE8 BL 0x365265C
	0x0365BBEC LDR X8, [X20]
	0x0365BBF0 MOV X19, X0
	0x0365BBF4 MOV X0, X8
	0x0365BBF8 BL 0x1C16F10
	0x0365BBFC MOV X1, X19
	0x0365BC00 MOV X2, X31
	0x0365BC04 MOV X20, X0
	0x0365BC08 BL 0x31EA6BC
	0x0365BC0C MOV X0, X20
	0x0365BC10 LDP X20, X19, [X31 + 0x10]
	0x0365BC14 LDR X30, [X31], #0x20
	0x0365BC18 RET
	0x0365BC1C LDR X0, [X0 + 0xB8]
	0x0365BC20 B 0x365BC10
	0x0365BC24 BL 0x1C16F20
	0x0365BC28 STP X30, X19, [X31 - 0x10]!
	0x0365BC2C CBZ X2, 0x365BC50
	0x0365BC30 MOV X0, X1
	0x0365BC34 MOV X19, X2
	0x0365BC38 BL 0x365BB60

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xD86000
	011 Move W8, [X21+1693]
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0xA99000
	019 Move X0, [X0+3584]
	020 Call 0x1C17CF4
	021 Move X0, 0xADF000
	022 Move X0, [X0+672]
	023 Call 0x1C17CF4
	024 Move X0, 0xAC7000
	025 Move X0, [X0+696]
	026 Call 0x1C17CF4
	027 Move X0, 0xAE2000
	028 Move X0, [X0+3176]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1693], W8
	032 Move X22, X20
	033 Add X22, X22, 16
	034 Move X0, [X22]
	035 Move X1, X31
	036 Call String.IsNullOrEmpty, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {175}
	041 Move X8, 0xAE2000
	042 Move X8, [X8+3176]
	043 Move X0, [X20+16]
	044 Move X21, 0xAC7000
	045 Move X2, X31
	046 Move X1, [X8]
	047 Move X21, [X21+696]
	048 Call String.op_Equality, X0, X1
	049 And W31, W0, 1
	050 Move W8, [X20+24]
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 Move X21, [X9]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, X31
	055 Call X509StoreManager.get_CurrentUser
	056 Move X0, X31
	057 Call X509StoreManager.get_LocalMachine
	058 Compare X0, 0
	059 JumpIfEqual {174}
	060 And W31, W19, 4
	061 NotImplemented "Instruction CSET not yet implemented."
	062 Move X1, X21
	063 Move X3, X31
	064 Call X509Stores.Open, X0, X1, X2
	065 Move [X20+48], X0
	066 Compare X0, 0
	067 JumpIfEqual {180}
	068 Move X1, X31
	069 Move [X20+40], W19
	070 Call X509Store.get_Certificates, X0
	071 Compare X0, 0
	072 JumpIfEqual {174}
	073 Move X24, 0xA99000
	074 Move X24, [X24+3584]
	075 Move X1, X31
	076 Call X509CertificateCollection.GetEnumerator, X0
	077 Move X19, X0
	078 Compare X0, 0
	079 JumpIfEqual {216}
	080 Move X25, 0xADF000
	081 Move X25, [X25+672]
	082 Move X0, X19
	083 Move X1, X31
	084 Call X509CertificateEnumerator.MoveNext, X0
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {130}
	089 Move X0, X19
	090 Move X1, X31
	091 Call X509CertificateEnumerator.get_Current, X0
	092 Move X22, X0
	093 Compare X0, 0
	094 JumpIfEqual {172}
	095 Move X8, [X22]
	096 Move X9, [X8+504]
	097 Move X1, [X8+512]
	098 Move X0, X22
	099 NotImplemented "Instruction BLR not yet implemented."
	100 Move X23, X0
	101 Move X0, [X25]
	102 Call 0x1C17F10
	103 Move X21, X0
	104 Move X1, X23
	105 Call X509Certificate2..ctor, X0, X1
	106 Compare X21, 0
	107 JumpIfEqual {173}
	108 Move X0, X21
	109 Call X509Certificate2.get_Impl, X0
	110 Move X8, [X22]
	111 Move X23, X0
	112 Move X9, [X8+472]
	113 Move X1, [X8+480]
	114 Move X0, X22
	115 NotImplemented "Instruction BLR not yet implemented."
	116 Move X1, X0
	117 Compare X23, 0
	118 JumpIfEqual {170}
	119 Move X8, [X23]
	120 Move X9, [X8+696]
	121 Move X2, [X8+704]
	122 Move X0, X23
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X0, X20
	125 Call X509Store.get_Certificates, X0
	126 Compare X0, 0
	127 JumpIfEqual {171}
	128 Move X1, X21
	129 Call X509Certificate2Collection.Add, X0, X1
	130 Move X20, X31
	131 Move X1, [X24]
	132 Move X0, X19
	133 Call 0x1C17E00
	134 Compare X0, 0
	135 JumpIfEqual {158}
	136 Move X8, [X0]
	137 Move X1, [X24]
	138 Move X19, X0
	139 NotImplemented "Instruction LDRH not yet implemented."
	140 Compare X9, 0
	141 JumpIfEqual {148}
	142 Move X10, [X8+176]
	143 Add X10, X10, 8
	144 NotImplemented "Instruction LDUR not yet implemented."
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Subtract X9, X9, 1
	147 Add X10, X10, 16
	148 Move X0, X19
	149 Move W2, W31
	150 Call 0x1C5D788
	151 NotImplemented "Instruction LDRSW not yet implemented."
	152 Add X8, X8, X9
	153 Add X0, X8, 312
	154 Move X8, [X0]
	155 Move X1, [X0+8]
	156 Move X0, X19
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Compare X20, 0
	159 JumpIfNotEqual {217}
	160 Move X20, [X31+64]
	161 Move X19, [X31+72]
	162 Move X22, [X31+48]
	163 Move X21, [X31+56]
	164 Move X24, [X31+32]
	165 Move X23, [X31+40]
	166 Move X30, [X31+16]
	167 Move X25, [X31+24]
	168 Add X31, X31, 80
	169 Return 
	170 Call 0x1C17F20
	171 Call 0x1C17F20
	172 Call 0x1C17F20
	173 Call 0x1C17F20
	174 Call 0x1C17F20
	175 Move X0, 0xAE2000
	176 Move X0, [X0+3184]
	177 Call 0x1C17D08
	178 Move X1, X31
	179 Call Locale.GetText, X0
	180 Move X0, 0xA99000
	181 Move X0, [X0+2512]
	182 Call 0x1C17D08
	183 Move W1, 1
	184 Call 0x1C17D6C
	185 Move X19, [X22]
	186 Move X20, X0
	187 Call 0x19913C0
	188 Move X0, X20
	189 Move X1, X19
	190 Call 0x19990B4
	191 Move X0, X20
	192 Move X1, X31
	193 Move X2, X19
	194 Call 0x1994444
	195 Move X0, 0xAE2000
	196 Move X0, [X0+3192]
	197 Call 0x1C17D08
	198 Move X1, X20
	199 Move X2, X31
	200 Call Locale.GetText, X0, X1
	201 Move X19, X0
	202 Move X0, 0xAC6000
	203 Move X0, [X0+3296]
	204 Call 0x1C17D08
	205 Call 0x1C17F10
	206 Move X1, X19
	207 Move X2, X31
	208 Move X20, X0
	209 Call CryptographicException..ctor, X0, X1
	210 Move X0, 0xAE2000
	211 Move X0, [X0+3200]
	212 Call 0x1C17D08
	213 Move X1, X0
	214 Move X0, X20
	215 Call 0x1C17DEC
	216 Call 0x1C17F20
	217 Move X0, X20
	218 Call 0x1C17F18
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Call 0x3EB2AD0
	221 Move X20, [X0]
	222 Call 0x3EB2AE0
	223 Move [X31+8], X0
	224 Move X20, X31
	225 Move [X31+8], X0
	226 Move X1, [X24]
	227 Move X0, X19
	228 Call 0x1C17E00
	229 Move X19, X0
	230 Compare X0, 0
	231 JumpIfEqual {253}
	232 Move X8, [X19]
	233 Move X1, [X24]
	234 NotImplemented "Instruction LDRH not yet implemented."
	235 Compare X9, 0
	236 JumpIfEqual {243}
	237 Move X10, [X8+176]
	238 Add X10, X10, 8
	239 NotImplemented "Instruction LDUR not yet implemented."
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Subtract X9, X9, 1
	242 Add X10, X10, 16
	243 Move X0, X19
	244 Move W2, W31
	245 Call 0x1C5D788
	246 NotImplemented "Instruction LDRSW not yet implemented."
	247 Add X8, X8, X9
	248 Add X0, X8, 312
	249 Move X8, [X0]
	250 Move X1, [X0+8]
	251 Move X0, X19
	252 NotImplemented "Instruction BLR not yet implemented."
	253 Compare X20, 0
	254 JumpIfNotEqual {257}
	255 Move X0, [X31+8]
	256 Call 0x1D2D690
	257 Move X0, X20
	258 Call 0x1C17F18
	259 Call 0x1991590

