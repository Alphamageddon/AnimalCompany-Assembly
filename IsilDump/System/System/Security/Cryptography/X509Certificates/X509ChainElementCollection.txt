Type: System.Security.Cryptography.X509Certificates.X509ChainElementCollection

Method: System.Void .ctor()

Disassembly:
	0x03659ECC TBZ X0, 0x0, 0x3659ED8
	0x03659ED0 MOV W0, W31
	0x03659ED4 B 0x3659F2C
	0x03659ED8 LDR X19, [X19 + 0x18]
	0x03659EDC CBZ X19, 0x3659F38
	0x03659EE0 LDR X0, [X19 + 0x10]
	0x03659EE4 CBZ X0, 0x3659F38
	0x03659EE8 LDR X8, [X0]
	0x03659EEC LDR X9, [X8 + 0x298]
	0x03659EF0 LDR X1, [X8 + 0x2A0]
	0x03659EF4 BLR X9
	0x03659EF8 SUB W1, W0, 0x1
	0x03659EFC MOV X0, X19
	0x03659F00 BL 0x3658F78
	0x03659F04 CBZ X0, 0x3659F38
	0x03659F08 MOV X8, X0
	0x03659F0C LDR W9, [X8 + 0x28]
	0x03659F10 MOV W0, W31
	0x03659F14 ORR W9, W9, 0x20
	0x03659F18 STR W9, [X8 + 0x28]
	0x03659F1C B 0x3659F2C
	0x03659F20 MOVZ W0, 0x10000
	0x03659F24 B 0x3659F2C
	0x03659F28 MOVZ W0, 0x80
	0x03659F2C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD88000
	006 Move X20, 0xAC8000
	007 Move W8, [X21+1622]
	008 Move X20, [X20+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAC8000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1622], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call ArrayList..ctor, X0
	027 Move [X19+16], X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x03659F30 LDR X30, [X31], #0x20
	0x03659F34 RET
	0x03659F38 BL 0x1C16F20
	0x03659F3C STP X30, X23, [X31 - 0x30]!
	0x03659F40 STP X22, X21, [X31 + 0x10]
	0x03659F44 STP X20, X19, [X31 + 0x20]
	0x03659F48 LDR X8, [X0 + 0x18]
	0x03659F4C CBZ X8, 0x365A04C
	0x03659F50 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x03659F54 LDR X0, [X8 + 0x10]
	0x03659F58 CBZ X0, 0x365A04C
	0x03659F5C LDR X8, [X0]
	0x03659F60 MOV W20, W1
	0x03659F64 LDR X9, [X8 + 0x298]
	0x03659F68 LDR X1, [X8 + 0x2A0]
	0x03659F6C BLR X9
	0x03659F70 LDR X8, [X19 + 0x18]
	0x03659F74 CBZ X8, 0x365A04C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+712]
	007 Move X1, [X8+720]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509ChainElement get_Item(System.Int32 index)

Disassembly:
	0x03659F78 SUB W21, W0, 0x1
	0x03659F7C MOV W23, W0
	0x03659F80 MOV X0, X8
	0x03659F84 MOV W1, W21
	0x03659F88 BL 0x3658F78
	0x03659F8C CBZ X0, 0x365A04C
	0x03659F90 LDR X22, [X0 + 0x10]
	0x03659F94 TBNZ X20, 0x10, 0x3659FAC
	0x03659F98 MOV X0, X19
	0x03659F9C MOV W1, W21
	0x03659FA0 BL 0x365B458
	0x03659FA4 CBZ W21, 0x365A028
	0x03659FA8 SUB W21, W23, 0x2
	0x03659FAC CBZ X22, 0x365A04C
	0x03659FB0 MOV X0, X22
	0x03659FB4 BL 0x3652514
	0x03659FB8 CBZ X0, 0x365A04C
	0x03659FBC BL 0x364FB6C
	0x03659FC0 STR X0, [X19 + 0x40]
	0x03659FC4 MOV X0, X22
	0x03659FC8 BL 0x36524A8
	0x03659FCC CMP W21, 0x1
	0x03659FD0 STR X0, [X19 + 0x38]
	0x03659FD4 STR W21, [X19 + 0x30]
	0x03659FD8 B.LT 0x3659FFC
	0x03659FDC MOV X0, X19
	0x03659FE0 MOV W1, W21
	0x03659FE4 BL 0x365B458
	0x03659FE8 MOV X0, X19
	0x03659FEC MOV W1, W21
	0x03659FF0 BL 0x365B700
	0x03659FF4 SUBS W21, W21, 0x1
	0x03659FF8 B.GT 0x3659FDC
	0x03659FFC MOV X0, X19
	0x0365A000 MOV W1, W31
	0x0365A004 BL 0x365B458
	0x0365A008 MOV X0, X19
	0x0365A00C MOV W1, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD88000
	006 Move W8, [X21+1623]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAE4000
	014 Move X0, [X0+3096]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1623], W8
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {45}
	021 Move X8, [X0]
	022 Move W1, W19
	023 Move X9, [X8+744]
	024 Move X2, [X8+752]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Compare X0, 0
	027 JumpIfEqual {39}
	028 Move X9, 0xAE4000
	029 Move X9, [X9+3096]
	030 Move X8, [X0]
	031 Move X1, [X9]
	032 Move W10, [X8+304]
	033 Move W9, [X1+304]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, [X8+200]
	036 Add X8, X8, X9
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Call 0x1C181E0
	045 Call 0x1C17F20

Method: System.Object get_SyncRoot()

Disassembly:
	0x0365A010 BL 0x365B8EC
	0x0365A014 MOV X0, X19
	0x0365A018 LDP X20, X19, [X31 + 0x20]
	0x0365A01C LDP X22, X21, [X31 + 0x10]
	0x0365A020 LDP X30, X23, [X31], #0x30
	0x0365A024 B 0x365BAD4
	0x0365A028 LDR X0, [X19 + 0x18]
	0x0365A02C CBZ X0, 0x365A04C
	0x0365A030 MOV W1, W31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+728]
	007 Move X1, [X8+736]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x0365A034 BL 0x3658F78
	0x0365A038 CBZ X0, 0x365A04C
	0x0365A03C LDP X20, X19, [X31 + 0x20]
	0x0365A040 LDP X22, X21, [X31 + 0x10]
	0x0365A044 LDP X30, X23, [X31], #0x30
	0x0365A048 B 0x3658C88
	0x0365A04C BL 0x1C16F20
	0x0365A050 STP X30, X19, [X31 - 0x10]!
	0x0365A054 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X4, [X8+872]
	007 Move X3, [X8+880]
	008 Move X30, [X31+16]
	009 CallNoReturn X4
	010 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator GetEnumerator()

Disassembly:
	0x0365A058 STR W1, [X0]
	0x0365A05C MOV W0, W1
	0x0365A060 BL 0x3658AF8
	0x0365A064 STR X0, [X19 + 0x8]
	0x0365A068 LDP X30, X19, [X31], #0x10
	0x0365A06C RET
	0x0365A070 STP X30, X19, [X31 - 0x10]!
	0x0365A074 LDR X8, [X0 + 0x28]
	0x0365A078 MOV X19, X0
	0x0365A07C CBZ X8, 0x365A08C
	0x0365A080 LDR X8, [X8 + 0x18]
	0x0365A084 CBZ X8, 0x365A08C
	0x0365A088 STR X31, [X19 + 0x28]
	0x0365A08C LDR X8, [X19 + 0x18]
	0x0365A090 CBZ X8, 0x365A168
	0x0365A094 LDR X0, [X8 + 0x10]
	0x0365A098 CBZ X0, 0x365A168
	0x0365A09C LDR X8, [X0]
	0x0365A0A0 LDR X9, [X8 + 0x298]
	0x0365A0A4 LDR X1, [X8 + 0x2A0]
	0x0365A0A8 BLR X9
	0x0365A0AC CMP W0, 0x1
	0x0365A0B0 B.LT 0x365A0D4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD87000
	006 Move X20, 0xAE3000
	007 Move W8, [X21+1624]
	008 Move X20, [X20+3104]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAE3000
	015 Move X0, [X0+3104]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1624], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call X509ChainElementEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0365A168 BL 0x1C16F20
	0x0365A16C MOV X8, X0
	0x0365A170 LDR X0, [X0 + 0x20]
	0x0365A174 STR X31, [X8 + 0x30]
	0x0365A178 CBZ X0, 0x365A184
	0x0365A17C MOV X1, X31
	0x0365A180 B 0x3352028
	0x0365A184 RET
	0x0365A188 STP X30, X21, [X31 - 0x20]!
	0x0365A18C STP X20, X19, [X31 + 0x10]
	0x0365A190 ADRP X20, 0xD86000
	0x0365A194 LDRB W8, [X20 + 0x664]
	0x0365A198 MOV X19, X0
	0x0365A19C TBNZ X8, 0x0, 0x365A1B4
	0x0365A1A0 ADRP X0, 0xAE2000
	0x0365A1A4 LDR X0, [X0 + 0xAF0]
	0x0365A1A8 BL 0x1C16CF4
	0x0365A1AC MOVZ W8, 0x1
	0x0365A1B0 STRB W8, [X20 + 0x664]
	0x0365A1B4 LDR X20, [X19 + 0x50]
	0x0365A1B8 CBNZ X20, 0x365A230
	0x0365A1BC ADRP X8, 0xAE2000
	0x0365A1C0 LDR X8, [X8 + 0xAF0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD87000
	006 Move X20, 0xAE3000
	007 Move W8, [X21+1625]
	008 Move X20, [X20+3104]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAE3000
	015 Move X0, [X0+3104]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1625], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call X509ChainElementEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Void Add(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365A1C4 LDR X0, [X8]
	0x0365A1C8 BL 0x1C16F10
	0x0365A1CC MOV X1, X31
	0x0365A1D0 MOV X20, X0
	0x0365A1D4 BL 0x3351EFC
	0x0365A1D8 MOV X0, X19
	0x0365A1DC BL 0x365A244
	0x0365A1E0 LDR W8, [X19 + 0x10]
	0x0365A1E4 MOV X21, X0
	0x0365A1E8 CMP W8, 0x1
	0x0365A1EC B.NE 0x365A210
	0x0365A1F0 MOV X0, X19
	0x0365A1F4 BL 0x365A330
	0x0365A1F8 CBZ X0, 0x365A240
	0x0365A1FC BL 0x365A41C
	0x0365A200 CBZ X20, 0x365A240
	0x0365A204 MOV X1, X0
	0x0365A208 MOV X0, X20
	0x0365A20C BL 0x3653BC8
	0x0365A210 CBZ X21, 0x365A240
	0x0365A214 MOV X0, X21
	0x0365A218 BL 0x365A41C
	0x0365A21C CBZ X20, 0x365A240
	0x0365A220 MOV X1, X0
	0x0365A224 MOV X0, X20
	0x0365A228 BL 0x3653BC8
	0x0365A22C STR X20, [X19 + 0x50]
	0x0365A230 MOV X0, X20
	0x0365A234 LDP X20, X19, [X31 + 0x10]
	0x0365A238 LDP X30, X21, [X31], #0x20
	0x0365A23C RET
	0x0365A240 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD87000
	007 Move X21, 0xAE3000
	008 Move W8, [X22+1626]
	009 Move X21, [X21+3096]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAE3000
	017 Move X0, [X0+3096]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1626], W8
	021 Move X0, [X21]
	022 Move X20, [X20+16]
	023 Call 0x1C17F10
	024 Move X1, X19
	025 Move X21, X0
	026 Call X509ChainElement..ctor, X0, X1
	027 Compare X20, 0
	028 JumpIfEqual {40}
	029 Move X8, [X20]
	030 Move X0, X20
	031 Move X1, X21
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X3, [X8+776]
	035 Move X2, [X8+784]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 CallNoReturn X3
	040 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x0365A244 STR X30, [X31 - 0x20]!
	0x0365A248 STP X20, X19, [X31 + 0x10]
	0x0365A24C ADRP X20, 0xD86000
	0x0365A250 LDRB W8, [X20 + 0x666]
	0x0365A254 MOV X19, X0
	0x0365A258 TBNZ X8, 0x0, 0x365A270
	0x0365A25C ADRP X0, 0xAE2000
	0x0365A260 LDR X0, [X0 + 0xC48]
	0x0365A264 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+808]
	007 Move X1, [X8+816]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean Contains(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365A268 MOVZ W8, 0x1
	0x0365A26C STRB W8, [X20 + 0x666]
	0x0365A270 LDR X8, [X19 + 0x60]
	0x0365A274 CBNZ X8, 0x365A2AC
	0x0365A278 ADRP X8, 0xAE2000
	0x0365A27C LDR X8, [X8 + 0xC48]
	0x0365A280 LDR X0, [X8]
	0x0365A284 BL 0x1C16F10
	0x0365A288 MOVZ W1, 0x6
	0x0365A28C MOVZ W2, 0x2
	0x0365A290 MOV X20, X0
	0x0365A294 BL 0x365A730
	0x0365A298 STR X20, [X19 + 0x60]
	0x0365A29C CBZ X20, 0x365A2BC
	0x0365A2A0 MOVZ W1, 0x4
	0x0365A2A4 MOV X0, X20
	0x0365A2A8 BL 0x365A85C
	0x0365A2AC LDR X0, [X19 + 0x60]
	0x0365A2B0 LDP X20, X19, [X31 + 0x10]
	0x0365A2B4 LDR X30, [X31], #0x20
	0x0365A2B8 RET
	0x0365A2BC BL 0x1C16F20
	0x0365A2C0 CMP W1, 0x1
	0x0365A2C4 MOV X20, X0
	0x0365A2C8 B.NE 0x365A324
	0x0365A2CC MOV X0, X20
	0x0365A2D0 BL 0x3EB1AD0
	0x0365A2D4 MOV X20, X0
	0x0365A2D8 ADRP X0, 0xA9F000
	0x0365A2DC LDR X0, [X0 + 0xCC0]
	0x0365A2E0 BL 0x1C16D08
	0x0365A2E4 LDR X8, [X20]
	0x0365A2E8 LDR X1, [X8]
	0x0365A2EC BL 0x1C17270
	0x0365A2F0 TBZ X0, 0x0, 0x365A2FC
	0x0365A2F4 BL 0x3EB1AE0
	0x0365A2F8 B 0x365A2AC
	0x0365A2FC MOVZ W0, 0x8
	0x0365A300 BL 0x3EB1AF0
	0x0365A304 LDR X8, [X20]
	0x0365A308 STR X8, [X0]
	0x0365A30C ADRP X1, 0x85A000
	0x0365A310 ADD X1, X1, 0xE58
	0x0365A314 MOV X2, X31
	0x0365A318 BL 0x3EB1B00
	0x0365A31C MOV X20, X0
	0x0365A320 BL 0x3EB1AE0
	0x0365A324 MOV X0, X20
	0x0365A328 BL 0x1D2C690
	0x0365A32C BL 0x1990590
	0x0365A330 STR X30, [X31 - 0x20]!
	0x0365A334 STP X20, X19, [X31 + 0x10]
	0x0365A338 ADRP X20, 0xD86000
	0x0365A33C LDRB W8, [X20 + 0x667]
	0x0365A340 MOV X19, X0
	0x0365A344 TBNZ X8, 0x0, 0x365A35C
	0x0365A348 ADRP X0, 0xAE2000
	0x0365A34C LDR X0, [X0 + 0xC48]
	0x0365A350 BL 0x1C16CF4
	0x0365A354 MOVZ W8, 0x1
	0x0365A358 STRB W8, [X20 + 0x667]
	0x0365A35C LDR X8, [X19 + 0x70]
	0x0365A360 CBNZ X8, 0x365A398
	0x0365A364 ADRP X8, 0xAE2000
	0x0365A368 LDR X8, [X8 + 0xC48]
	0x0365A36C LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD87000
	008 Move W8, [X21+1627]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAE3000
	016 Move X0, [X0+3096]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1627], W8
	020 Move X0, [X20+16]
	021 Compare X0, 0
	022 JumpIfEqual {72}
	023 Move X23, 0xAE3000
	024 Move X23, [X23+3096]
	025 Move W21, W31
	026 Move X8, [X0]
	027 Move X9, [X8+664]
	028 Move X1, [X8+672]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move W22, W0
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, [X20+16]
	033 Compare X0, 0
	034 JumpIfEqual {72}
	035 Move X8, [X0]
	036 Move W1, W21
	037 Move X9, [X8+744]
	038 Move X2, [X8+752]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Compare X0, 0
	041 JumpIfEqual {72}
	042 Move X9, [X0]
	043 Move X8, [X23]
	044 Move W11, [X9+304]
	045 Move W10, [X8+304]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X11, [X9+200]
	048 Add X11, X11, X10
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Compare X19, 0
	052 JumpIfEqual {72}
	053 Move X9, [X9+200]
	054 Add X9, X9, X10
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 Move X10, [X19]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Move X1, [X8+16]
	060 Move X8, [X10+456]
	061 Move X2, [X10+464]
	062 Move X0, X19
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {73}
	068 Move X0, [X20+16]
	069 Add W21, W21, 1
	070 Compare X0, 0
	071 JumpIfNotEqual {26}
	072 Call 0x1C17F20
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 NotImplemented "Instruction CSET not yet implemented."
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Return X0

