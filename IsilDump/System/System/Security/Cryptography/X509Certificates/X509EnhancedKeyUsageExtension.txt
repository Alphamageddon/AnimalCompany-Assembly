Type: System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension

Method: System.Void .ctor()

Disassembly:
	0x03654A4C MOVZ W8, 0x1
	0x03654A50 STRB W8, [X22 + 0x62D]
	0x03654A54 STR W31, [X31 + 0x38]
	0x03654A58 CBZ X19, 0x3655328
	0x03654A5C ADRP X22, 0xAA1000
	0x03654A60 LDR X22, [X22 + 0x278]
	0x03654A64 ADRP X24, 0xAA0000
	0x03654A68 LDR X8, [X22]
	0x03654A6C LDR X24, [X24 + 0x9F0]
	0x03654A70 LDR X8, [X8 + 0xB8]
	0x03654A74 LDR X1, [X24]
	0x03654A78 LDR X23, [X8]
	0x03654A7C LDR W9, [X1 + 0xE0]
	0x03654A80 CBNZ W9, 0x3654A90
	0x03654A84 MOV X0, X1
	0x03654A88 BL 0x1C16DFC
	0x03654A8C LDR X1, [X24]
	0x03654A90 CMP W21, 0xE
	0x03654A94 B.HI 0x3655398
	0x03654A98 LDR X8, [X1 + 0xB8]
	0x03654A9C MOV W25, W21
	0x03654AA0 LDR X8, [X8 + 0x10]
	0x03654AA4 STR X8, [X31 + 0x18]
	0x03654AA8 ADRP X8, 0xFFFFFFFFFD543000
	0x03654AAC ADD X8, X8, 0x5FC
	0x03654AB0 ADR X9, 0x10
	0x03654AB4 LDRB W10, [X8, X25, LSL]
	0x03654AB8 ADD X9, X9, X10, 0x2, LSL
	0x03654ABC BR X9
	0x03654AC0 LDR X1, [X22]
	0x03654AC4 LDR X8, [X19]
	0x03654AC8 CMP X8, X1
	0x03654ACC B.NE 0x3655380
	0x03654AD0 STR X23, [X31 + 0x10]
	0x03654AD4 MOV X23, X19
	0x03654AD8 STR W31, [X31 + 0x4]
	0x03654ADC B 0x3654B80
	0x03654AE0 LDR X1, [X22]
	0x03654AE4 LDR X8, [X19]
	0x03654AE8 CMP X8, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD8D000
	008 Move X22, 0xAE9000
	009 Move X20, 0xAD0000
	010 Move X21, 0xAE9000
	011 Move W8, [X23+1662]
	012 Move X22, [X22+2016]
	013 Move X20, [X20+1480]
	014 Move X21, [X21+2272]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xAE9000
	021 Move X0, [X0+2016]
	022 Call 0x1C17CF4
	023 Move X0, 0xAE9000
	024 Move X0, [X0+2272]
	025 Call 0x1C17CF4
	026 Move X0, 0xAD0000
	027 Move X0, [X0+1480]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+1662], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Call Object..ctor, X0
	034 Move X0, [X22]
	035 Call 0x1C17F10
	036 Move X22, [X20]
	037 Move X21, [X21]
	038 Move X1, X31
	039 Move X20, X0
	040 Call Object..ctor, X0
	041 Move [X20+16], X22
	042 Move [X20+24], X21
	043 Move [X19+16], X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return 

Method: System.Void .ctor(System.Security.Cryptography.AsnEncodedData encodedEnhancedKeyUsages, System.Boolean critical)

Disassembly:
	0x03650778 BL 0x1C16CF4
	0x0365077C MOVZ W8, 0x1
	0x03650780 STRB W8, [X20 + 0x619]
	0x03650784 LDR X21, [X19 + 0x18]
	0x03650788 CBZ X21, 0x36507F4
	0x0365078C LDR W8, [X21 + 0x18]
	0x03650790 CMP W8, 0x2
	0x03650794 B.LE 0x36507F4
	0x03650798 ADRP X8, 0xAD0000
	0x0365079C LDR X8, [X8 + 0xB98]
	0x036507A0 LDR X0, [X8]
	0x036507A4 BL 0x1C16F10
	0x036507A8 MOV X1, X21
	0x036507AC MOV X2, X31
	0x036507B0 MOV X20, X0
	0x036507B4 BL 0x31E7A44
	0x036507B8 ADRP X8, 0xAD0000
	0x036507BC LDR X8, [X8 + 0xCF8]
	0x036507C0 LDR X0, [X8]
	0x036507C4 LDR W8, [X0 + 0xE0]
	0x036507C8 CBNZ W8, 0x36507D0
	0x036507CC BL 0x1C16DFC
	0x036507D0 ADRP X8, 0xAA3000
	0x036507D4 LDR X8, [X8 + 0x838]
	0x036507D8 MOVZ W1, 0x1
	0x036507DC MOVZ W3, 0x1
	0x036507E0 MOV X0, X20
	0x036507E4 LDR X2, [X8]
	0x036507E8 MOV X4, X31
	0x036507EC BL 0x31F2D58
	0x036507F0 B 0x3650808
	0x036507F4 ADRP X8, 0xAA5000
	0x036507F8 LDR X8, [X8 + 0x278]
	0x036507FC LDR X8, [X8]
	0x03650800 LDR X8, [X8 + 0xB8]
	0x03650804 LDR X0, [X8]
	0x03650808 STR X0, [X19 + 0x20]
	0x0365080C LDP X20, X19, [X31 + 0x10]
	0x03650810 LDP X30, X21, [X31], #0x20
	0x03650814 RET
	0x03650818 LDR X0, [X0 + 0x20]
	0x0365081C RET
	0x03650820 STP X30, X23, [X31 - 0x30]!
	0x03650824 STP X22, X21, [X31 + 0x10]
	0x03650828 STP X20, X19, [X31 + 0x20]
	0x0365082C ADRP X21, 0xD90000
	0x03650830 LDRB W8, [X21 + 0x617]
	0x03650834 MOV W19, W1
	0x03650838 MOV X20, X0
	0x0365083C TBNZ X8, 0x0, 0x365086C
	0x03650840 ADRP X0, 0xAD0000
	0x03650844 LDR X0, [X0 + 0xB98]
	0x03650848 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xD91000
	010 Move X24, 0xAED000
	011 Move X22, 0xAD4000
	012 Move X23, 0xAED000
	013 Move W8, [X25+1663]
	014 Move X24, [X24+2016]
	015 Move X22, [X22+1480]
	016 Move X23, [X23+2272]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xAED000
	025 Move X0, [X0+2016]
	026 Call 0x1C17CF4
	027 Move X0, 0xAED000
	028 Move X0, [X0+2272]
	029 Call 0x1C17CF4
	030 Move X0, 0xAD4000
	031 Move X0, [X0+1480]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+1663], W8
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object..ctor, X0
	038 Move X0, [X24]
	039 Call 0x1C17F10
	040 Move X24, [X22]
	041 Move X23, [X23]
	042 Move X1, X31
	043 Move X22, X0
	044 Call Object..ctor, X0
	045 Move [X22+16], X24
	046 Move [X22+24], X23
	047 Move [X19+16], X22
	048 Compare X21, 0
	049 JumpIfEqual {66}
	050 Move X1, [X21+24]
	051 And W8, W20, 1
	052 Move X0, X19
	053 Move [X19+32], W8
	054 Move [X19+24], X1
	055 Call X509EnhancedKeyUsageExtension.Decode, X0, X1
	056 Move [X19+48], W0
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X24, [X31+16]
	062 Move X23, [X31+24]
	063 Move X30, [X31+64]
	064 Move X25, [X31+72]
	065 Return 
	066 Call 0x1C17F20

Method: System.Void .ctor(System.Security.Cryptography.OidCollection enhancedKeyUsages, System.Boolean critical)

Disassembly:
	0x0365E19C STRB W21, [X20 + 0x20]
	0x0365E1A0 B.EQ 0x365E224
	0x0365E1A4 CMP W8, 0x2
	0x0365E1A8 STRB W19, [X20 + 0x21]
	0x0365E1AC B.LS 0x365E224
	0x0365E1B0 UBFM W8, W19, 0x8, 0x1F
	0x0365E1B4 STRB W8, [X20 + 0x22]
	0x0365E1B8 B 0x365E1E4
	0x0365E1BC MOVZ W1, 0x2
	0x0365E1C0 BL 0x1C16D6C
	0x0365E1C4 CBZ X0, 0x365E228
	0x0365E1C8 LDR W8, [X0 + 0x18]
	0x0365E1CC MOV X20, X0
	0x0365E1D0 CBZ W8, 0x365E224
	0x0365E1D4 CMP W8, 0x1
	0x0365E1D8 STRB W21, [X20 + 0x20]
	0x0365E1DC B.EQ 0x365E224
	0x0365E1E0 STRB W19, [X20 + 0x21]
	0x0365E1E4 ADRP X8, 0xAC2000
	0x0365E1E8 LDR X8, [X8 + 0xB98]
	0x0365E1EC LDR X0, [X8]
	0x0365E1F0 BL 0x1C16F10
	0x0365E1F4 MOVZ W1, 0x3
	0x0365E1F8 MOV X2, X20
	0x0365E1FC MOV X3, X31
	0x0365E200 MOV X19, X0
	0x0365E204 BL 0x31E7A14
	0x0365E208 CBZ X19, 0x365E228
	0x0365E20C LDR X8, [X19]
	0x0365E210 MOV X0, X19
	0x0365E214 LDP X20, X19, [X31 + 0x10]
	0x0365E218 LDP X2, X1, [X8 + 0x178]
	0x0365E21C LDP X30, X21, [X31], #0x20
	0x0365E220 BR X2
	0x0365E224 BL 0x1C16F28
	0x0365E228 BL 0x1C16F20
	0x0365E22C STP X30, X23, [X31 - 0x30]!
	0x0365E230 STP X22, X21, [X31 + 0x10]
	0x0365E234 STP X20, X19, [X31 + 0x20]
	0x0365E238 ADRP X21, 0xD82000
	0x0365E23C LDRB W8, [X21 + 0x697]
	0x0365E240 MOV X20, X1
	0x0365E244 MOV X19, X0
	0x0365E248 TBNZ X8, 0x0, 0x365E284
	0x0365E24C ADRP X0, 0xADE000
	0x0365E250 LDR X0, [X0 + 0x7E0]
	0x0365E254 BL 0x1C16CF4
	0x0365E258 ADRP X0, 0xADB000
	0x0365E25C LDR X0, [X0 + 0xF28]
	0x0365E260 BL 0x1C16CF4
	0x0365E264 ADRP X0, 0xADB000
	0x0365E268 LDR X0, [X0 + 0x8C8]
	0x0365E26C BL 0x1C16CF4
	0x0365E270 ADRP X0, 0xAC5000
	0x0365E274 LDR X0, [X0 + 0x770]
	0x0365E278 BL 0x1C16CF4
	0x0365E27C MOVZ W8, 0x1
	0x0365E280 STRB W8, [X21 + 0x697]
	0x0365E284 CBZ X20, 0x365E3AC
	0x0365E288 ADRP X8, 0xADB000
	0x0365E28C LDR X8, [X8 + 0xF28]
	0x0365E290 LDR X9, [X20]
	0x0365E294 LDR X8, [X8]
	0x0365E298 LDRB W11, [X9 + 0x130]
	0x0365E29C LDRB W10, [X8 + 0x130]
	0x0365E2A0 CMP W11, W10
	0x0365E2A4 B.CC 0x365E348
	0x0365E2A8 LDR X9, [X9 + 0xC8]
	0x0365E2AC ADD X9, X9, X10, 0x3, LSL
	0x0365E2B0 LDUR X9, [X9 - 0x8]
	0x0365E2B4 CMP X9, X8
	0x0365E2B8 B.NE 0x365E348
	0x0365E2BC ADRP X8, 0xADE000
	0x0365E2C0 LDR X8, [X8 + 0x7E0]
	0x0365E2C4 LDR X22, [X20 + 0x10]
	0x0365E2C8 LDR X0, [X8]
	0x0365E2CC BL 0x1C16F10
	0x0365E2D0 MOV X21, X0
	0x0365E2D4 CBZ X22, 0x365E2E8
	0x0365E2D8 MOV X0, X21
	0x0365E2DC MOV X1, X22
	0x0365E2E0 BL 0x364DC68
	0x0365E2E4 B 0x365E310
	0x0365E2E8 ADRP X8, 0xAC5000
	0x0365E2EC ADRP X9, 0xADB000
	0x0365E2F0 LDR X8, [X8 + 0x770]
	0x0365E2F4 LDR X9, [X9 + 0x8C8]
	0x0365E2F8 MOV X0, X21
	0x0365E2FC MOV X1, X31
	0x0365E300 LDR X22, [X8]
	0x0365E304 LDR X23, [X9]
	0x0365E308 BL 0x33BDD8C
	0x0365E30C STP X22, X23, [X21 + 0x10]
	0x0365E310 STR X21, [X19 + 0x10]
	0x0365E314 LDR X1, [X20 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0xD83000
	010 Move W8, [X22+1664]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0xADF000
	019 Move X0, [X0+3264]
	020 Call 0x1C17CF4
	021 Move X0, 0xADF000
	022 Move X0, [X0+2016]
	023 Call 0x1C17CF4
	024 Move X0, 0xADF000
	025 Move X0, [X0+2272]
	026 Call 0x1C17CF4
	027 Move X0, 0xAC6000
	028 Move X0, [X0+1480]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+1664], W8
	032 Move X0, X19
	033 Move X1, X31
	034 Call Object..ctor, X0
	035 Compare X20, 0
	036 JumpIfEqual {96}
	037 Move X8, 0xADF000
	038 Move X8, [X8+2016]
	039 Move X22, 0xAC6000
	040 Move X23, 0xADF000
	041 Move X24, 0xADF000
	042 Move X0, [X8]
	043 Move X22, [X22+1480]
	044 Move X23, [X23+2272]
	045 Move X24, [X24+3264]
	046 Call 0x1C17F10
	047 Move X25, [X22]
	048 Move X23, [X23]
	049 Move X1, X31
	050 Move X22, X0
	051 Call Object..ctor, X0
	052 And W8, W21, 1
	053 Move [X22+16], X25
	054 Move [X22+24], X23
	055 Move [X19+16], X22
	056 Move [X19+32], W8
	057 Move X0, [X24]
	058 Call 0x1C17F10
	059 Move X21, X0
	060 Call OidCollection..ctor, X0
	061 Move X0, X20
	062 Move [X19+40], X21
	063 Call OidCollection.GetEnumerator, X0
	064 Compare X0, 0
	065 JumpIfEqual {95}
	066 Move X20, X0
	067 Move X0, X20
	068 Call OidEnumerator.MoveNext, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {81}
	073 Move X0, X20
	074 Call OidEnumerator.get_Current, X0
	075 Move X8, [X19+40]
	076 Compare X8, 0
	077 JumpIfEqual {95}
	078 Move X1, X0
	079 Move X0, X8
	080 Call OidCollection.Add, X0, X1
	081 Move X0, X19
	082 Call X509EnhancedKeyUsageExtension.Encode, X0
	083 Move X1, X0
	084 Move X0, X19
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X22, [X31+32]
	088 Move X21, [X31+40]
	089 Move X24, [X31+16]
	090 Move X23, [X31+24]
	091 Move X30, [X31+64]
	092 Move X25, [X31+72]
	093 Call AsnEncodedData.set_RawData, X0, X1
	094 Return 
	095 Call 0x1C17F20
	096 Move X0, 0xA9B000
	097 Move X0, [X0+1320]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0xADF000
	102 Move X0, [X0+3320]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Move X2, X31
	107 Call ArgumentNullException..ctor, X0, X1
	108 Move X0, 0xADF000
	109 Move X0, [X0+3328]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Call 0x1C17DEC

Method: System.Security.Cryptography.OidCollection get_EnhancedKeyUsages()

Disassembly:
	0x0365E3D4 MOV X2, X31
	0x0365E3D8 BL 0x330E100
	0x0365E3DC ADRP X0, 0xADE000
	0x0365E3E0 LDR X0, [X0 + 0xD58]
	0x0365E3E4 BL 0x1C16D08
	0x0365E3E8 MOV X1, X0
	0x0365E3EC MOV X0, X19
	0x0365E3F0 BL 0x1C16DEC
	0x0365E3F4 STR X30, [X31 - 0x30]!
	0x0365E3F8 STP X22, X21, [X31 + 0x10]
	0x0365E3FC STP X20, X19, [X31 + 0x20]
	0x0365E400 ADRP X21, 0xD82000
	0x0365E404 LDRB W8, [X21 + 0x69A]
	0x0365E408 MOV W19, W1
	0x0365E40C MOV X20, X0
	0x0365E410 TBNZ X8, 0x0, 0x365E500
	0x0365E414 ADRP X0, 0xA95000
	0x0365E418 LDR X0, [X0 + 0x8F0]
	0x0365E41C BL 0x1C16CF4
	0x0365E420 ADRP X0, 0xA97000
	0x0365E424 LDR X0, [X0 + 0x278]
	0x0365E428 BL 0x1C16CF4
	0x0365E42C ADRP X0, 0xADE000
	0x0365E430 LDR X0, [X0 + 0xD60]
	0x0365E434 BL 0x1C16CF4
	0x0365E438 ADRP X0, 0xADE000
	0x0365E43C LDR X0, [X0 + 0xD68]
	0x0365E440 BL 0x1C16CF4
	0x0365E444 ADRP X0, 0xA95000
	0x0365E448 LDR X0, [X0 + 0xDD8]
	0x0365E44C BL 0x1C16CF4
	0x0365E450 ADRP X0, 0xADE000
	0x0365E454 LDR X0, [X0 + 0xD70]
	0x0365E458 BL 0x1C16CF4
	0x0365E45C ADRP X0, 0xADE000
	0x0365E460 LDR X0, [X0 + 0xD78]
	0x0365E464 BL 0x1C16CF4
	0x0365E468 ADRP X0, 0xAC8000
	0x0365E46C LDR X0, [X0 + 0x350]
	0x0365E470 BL 0x1C16CF4
	0x0365E474 ADRP X0, 0xA95000
	0x0365E478 LDR X0, [X0 + 0x838]
	0x0365E47C BL 0x1C16CF4
	0x0365E480 ADRP X0, 0xADE000
	0x0365E484 LDR X0, [X0 + 0xD80]
	0x0365E488 BL 0x1C16CF4
	0x0365E48C ADRP X0, 0xADE000
	0x0365E490 LDR X0, [X0 + 0xD88]
	0x0365E494 BL 0x1C16CF4
	0x0365E498 ADRP X0, 0xADE000
	0x0365E49C LDR X0, [X0 + 0xD90]
	0x0365E4A0 BL 0x1C16CF4
	0x0365E4A4 ADRP X0, 0xA96000
	0x0365E4A8 LDR X0, [X0 + 0x608]
	0x0365E4AC BL 0x1C16CF4
	0x0365E4B0 ADRP X0, 0xADE000
	0x0365E4B4 LDR X0, [X0 + 0xD98]
	0x0365E4B8 BL 0x1C16CF4
	0x0365E4BC ADRP X0, 0xADE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD83000
	005 Move W8, [X19+1665]
	006 Move X20, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xADF000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+1665], W8
	016 Move W8, [X20+48]
	017 Or W8, W8, 4
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X8, 0xADF000
	020 Move X8, [X8+3264]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call OidCollection..ctor, X0
	025 Move X0, [X20+40]
	026 Compare X0, 0
	027 JumpIfEqual {45}
	028 Call OidCollection.GetEnumerator, X0
	029 Compare X0, 0
	030 JumpIfEqual {50}
	031 Move X20, X0
	032 Move X0, X20
	033 Call OidEnumerator.MoveNext, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {45}
	038 Move X0, X20
	039 Call OidEnumerator.get_Current, X0
	040 Compare X19, 0
	041 JumpIfEqual {50}
	042 Move X1, X0
	043 Move X0, X19
	044 Call OidCollection.Add, X0, X1
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return X0
	050 Call 0x1C17F20
	051 Move X0, 0xAC3000
	052 Move X0, [X0+3296]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0xADF000
	057 Move X0, [X0+2440]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Move X2, X31
	062 Call CryptographicException..ctor, X0, X1
	063 Move X0, 0xADF000
	064 Move X0, [X0+3336]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Call 0x1C17DEC

Method: System.Void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData)

Disassembly:
	0x0365E4C0 LDR X0, [X0 + 0x890]
	0x0365E4C4 BL 0x1C16CF4
	0x0365E4C8 ADRP X0, 0xA96000
	0x0365E4CC LDR X0, [X0 + 0x610]
	0x0365E4D0 BL 0x1C16CF4
	0x0365E4D4 ADRP X0, 0xADE000
	0x0365E4D8 LDR X0, [X0 + 0x9B8]
	0x0365E4DC BL 0x1C16CF4
	0x0365E4E0 ADRP X0, 0xAC5000
	0x0365E4E4 LDR X0, [X0 + 0x770]
	0x0365E4E8 BL 0x1C16CF4
	0x0365E4EC ADRP X0, 0xADE000
	0x0365E4F0 LDR X0, [X0 + 0xDA0]
	0x0365E4F4 BL 0x1C16CF4
	0x0365E4F8 MOVZ W8, 0x1
	0x0365E4FC STRB W8, [X21 + 0x69A]
	0x0365E500 LDR W8, [X20 + 0x28]
	0x0365E504 SUB W9, W8, 0x2
	0x0365E508 CMP W9, 0x2
	0x0365E50C B.CC 0x365E534
	0x0365E510 CMP W8, 0x4
	0x0365E514 B.EQ 0x365E810
	0x0365E518 CMP W8, 0x1
	0x0365E51C B.NE 0x365E540
	0x0365E520 ADRP X8, 0xA97000
	0x0365E524 LDR X8, [X8 + 0x278]
	0x0365E528 LDR X8, [X8]
	0x0365E52C LDR X8, [X8 + 0xB8]
	0x0365E530 B 0x365E818
	0x0365E534 LDR X1, [X20 + 0x18]
	0x0365E538 BL 0x3651868
	0x0365E53C B 0x365E81C
	0x0365E540 LDR X8, [X20 + 0x10]
	0x0365E544 CBZ X8, 0x365E94C
	0x0365E548 LDR X0, [X8 + 0x10]
	0x0365E54C ADRP X8, 0xAC5000
	0x0365E550 LDR X8, [X8 + 0x770]
	0x0365E554 MOV X2, X31
	0x0365E558 LDR X1, [X8]
	0x0365E55C BL 0x3226EF8
	0x0365E560 TBZ X0, 0x0, 0x365E588
	0x0365E564 LDR X8, [X20 + 0x10]
	0x0365E568 CBZ X8, 0x365E94C
	0x0365E56C LDR X1, [X8 + 0x10]
	0x0365E570 ADRP X8, 0xADE000
	0x0365E574 LDR X8, [X8 + 0x9B8]
	0x0365E578 MOV X2, X31
	0x0365E57C LDR X0, [X8]
	0x0365E580 BL 0x321EFD0
	0x0365E584 B 0x365E81C
	0x0365E588 LDR W8, [X20 + 0x24]
	0x0365E58C CBZ W8, 0x365E810
	0x0365E590 ADRP X8, 0xA95000
	0x0365E594 LDR X8, [X8 + 0x8F0]
	0x0365E598 LDR X0, [X8]
	0x0365E59C BL 0x1C16F10
	0x0365E5A0 MOV X1, X31
	0x0365E5A4 MOV X21, X0
	0x0365E5A8 BL 0x3231AC4
	0x0365E5AC LDR W22, [X20 + 0x24]
	0x0365E5B0 TBZ X22, 0x7, 0x365E5D4
	0x0365E5B4 CBZ X21, 0x365E94C
	0x0365E5B8 ADRP X8, 0xADE000
	0x0365E5BC LDR X8, [X8 + 0xD98]
	0x0365E5C0 MOV X0, X21
	0x0365E5C4 MOV X2, X31
	0x0365E5C8 LDR X1, [X8]
	0x0365E5CC BL 0x32333E0
	0x0365E5D0 LDR W22, [X20 + 0x24]
	0x0365E5D4 TBZ X22, 0x6, 0x365E624
	0x0365E5D8 CBZ X21, 0x365E94C
	0x0365E5DC MOV X0, X21
	0x0365E5E0 MOV X1, X31
	0x0365E5E4 BL 0x323260C
	0x0365E5E8 CMP W0, 0x1
	0x0365E5EC B.LT 0x365E608
	0x0365E5F0 ADRP X8, 0xA95000
	0x0365E5F4 LDR X8, [X8 + 0x838]
	0x0365E5F8 MOV X0, X21
	0x0365E5FC MOV X2, X31
	0x0365E600 LDR X1, [X8]
	0x0365E604 BL 0x32333E0
	0x0365E608 ADRP X8, 0xADE000
	0x0365E60C LDR X8, [X8 + 0xD88]
	0x0365E610 MOV X0, X21
	0x0365E614 MOV X2, X31
	0x0365E618 LDR X1, [X8]
	0x0365E61C BL 0x32333E0
	0x0365E620 LDR W22, [X20 + 0x24]
	0x0365E624 TBZ X22, 0x5, 0x365E674
	0x0365E628 CBZ X21, 0x365E94C
	0x0365E62C MOV X0, X21
	0x0365E630 MOV X1, X31
	0x0365E634 BL 0x323260C
	0x0365E638 CMP W0, 0x1
	0x0365E63C B.LT 0x365E658
	0x0365E640 ADRP X8, 0xA95000
	0x0365E644 LDR X8, [X8 + 0x838]
	0x0365E648 MOV X0, X21
	0x0365E64C MOV X2, X31
	0x0365E650 LDR X1, [X8]
	0x0365E654 BL 0x32333E0
	0x0365E658 ADRP X8, 0xADE000
	0x0365E65C LDR X8, [X8 + 0xDA0]
	0x0365E660 MOV X0, X21
	0x0365E664 MOV X2, X31
	0x0365E668 LDR X1, [X8]
	0x0365E66C BL 0x32333E0
	0x0365E670 LDR W22, [X20 + 0x24]
	0x0365E674 TBZ X22, 0x4, 0x365E6C4
	0x0365E678 CBZ X21, 0x365E94C
	0x0365E67C MOV X0, X21
	0x0365E680 MOV X1, X31
	0x0365E684 BL 0x323260C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD83000
	008 Move W8, [X21+1666]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xADF000
	016 Move X0, [X0+2016]
	017 Call 0x1C17CF4
	018 Move X0, 0xADC000
	019 Move X0, [X0+3880]
	020 Call 0x1C17CF4
	021 Move X0, 0xADF000
	022 Move X0, [X0+2272]
	023 Call 0x1C17CF4
	024 Move X0, 0xAC6000
	025 Move X0, [X0+1480]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1666], W8
	029 Compare X20, 0
	030 JumpIfEqual {106}
	031 Move X8, 0xADC000
	032 Move X8, [X8+3880]
	033 Move X9, [X20]
	034 Move X8, [X8]
	035 Move W11, [X9+304]
	036 Move W10, [X8+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, [X9+200]
	039 Add X9, X9, X10
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0xADF000
	043 Move X8, [X8+2016]
	044 Move X22, [X20+16]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X21, X0
	048 Compare X22, 0
	049 JumpIfEqual {53}
	050 Move X0, X21
	051 Move X1, X22
	052 Call Oid..ctor, X0, X1
	053 Move X8, 0xAC6000
	054 Move X9, 0xADF000
	055 Move X8, [X8+1480]
	056 Move X9, [X9+2272]
	057 Move X0, X21
	058 Move X1, X31
	059 Move X22, [X8]
	060 Move X23, [X9]
	061 Call Object..ctor, X0
	062 Move [X21+16], X22
	063 Move [X21+24], X23
	064 Move [X19+16], X21
	065 Move X1, [X20+24]
	066 Move X0, X19
	067 Call AsnEncodedData.set_RawData, X0, X1
	068 Move W8, [X20+32]
	069 Move X1, [X19+24]
	070 Move X0, X19
	071 Move [X19+32], W8
	072 Call X509EnhancedKeyUsageExtension.Decode, X0, X1
	073 Move [X19+48], W0
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Move X0, 0xADF000
	082 Move X0, [X0+2472]
	083 Call 0x1C17D08
	084 Move X1, X31
	085 Call Locale.GetText, X0
	086 Move X19, X0
	087 Move X0, 0xA9E000
	088 Move X0, [X0+1400]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X20, X0
	092 Move X0, 0xADF000
	093 Move X0, [X0+2120]
	094 Call 0x1C17D08
	095 Move X2, X0
	096 Move X0, X20
	097 Move X1, X19
	098 Move X3, X31
	099 Call ArgumentException..ctor, X0, X1, X2
	100 Move X0, 0xADF000
	101 Move X0, [X0+3344]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X20
	105 Call 0x1C17DEC
	106 Move X0, 0xA9B000
	107 Move X0, [X0+1320]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xADF000
	112 Move X0, [X0+3352]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentNullException..ctor, X0, X1
	118 Move X0, 0xADF000
	119 Move X0, [X0+3344]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC

Method: System.Security.Cryptography.AsnDecodeStatus Decode(System.Byte[] extension)

Disassembly:
	0x0365DF5C B 0x365DF68
	0x0365DF60 B 0x365DF68
	0x0365DF64 B 0x365DF68
	0x0365DF68 MOV X19, X0
	0x0365DF6C CMP W1, 0x1
	0x0365DF70 B.NE 0x365DFDC
	0x0365DF74 MOV X0, X19
	0x0365DF78 BL 0x3EB1AD0
	0x0365DF7C MOV X19, X0
	0x0365DF80 ADRP X0, 0xA9C000
	0x0365DF84 LDR X0, [X0 + 0xCC0]
	0x0365DF88 BL 0x1C16D08
	0x0365DF8C LDR X8, [X19]
	0x0365DF90 LDR X1, [X8]
	0x0365DF94 BL 0x1C17270
	0x0365DF98 TBZ X0, 0x0, 0x365DFB4
	0x0365DF9C BL 0x3EB1AE0
	0x0365DFA0 MOVZ W0, 0x1
	0x0365DFA4 LDP X20, X19, [X31 + 0x20]
	0x0365DFA8 LDP X22, X21, [X31 + 0x10]
	0x0365DFAC LDP X30, X23, [X31], #0x30
	0x0365DFB0 RET
	0x0365DFB4 MOVZ W0, 0x8
	0x0365DFB8 BL 0x3EB1AF0
	0x0365DFBC LDR X8, [X19]
	0x0365DFC0 STR X8, [X0]
	0x0365DFC4 ADRP X1, 0x857000
	0x0365DFC8 ADD X1, X1, 0xE58
	0x0365DFCC MOV X2, X31
	0x0365DFD0 BL 0x3EB1B00
	0x0365DFD4 MOV X19, X0
	0x0365DFD8 BL 0x3EB1AE0
	0x0365DFDC MOV X0, X19
	0x0365DFE0 BL 0x1D2C690
	0x0365DFE4 BL 0x1990590
	0x0365DFE8 STP X30, X25, [X31 - 0x40]!
	0x0365DFEC STP X24, X23, [X31 + 0x10]
	0x0365DFF0 STP X22, X21, [X31 + 0x20]
	0x0365DFF4 STP X20, X19, [X31 + 0x30]
	0x0365DFF8 ADRP X25, 0xD83000
	0x0365DFFC ADRP X24, 0xADF000
	0x0365E000 ADRP X22, 0xAC5000
	0x0365E004 ADRP X23, 0xADB000
	0x0365E008 LDRB W8, [X25 + 0x696]
	0x0365E00C LDR X24, [X24 + 0x7E0]
	0x0365E010 LDR X22, [X22 + 0x770]
	0x0365E014 LDR X23, [X23 + 0x8C8]
	0x0365E018 MOV W21, W2
	0x0365E01C MOV W20, W1
	0x0365E020 MOV X19, X0
	0x0365E024 TBNZ X8, 0x0, 0x365E054
	0x0365E028 ADRP X0, 0xADE000
	0x0365E02C LDR X0, [X0 + 0x7E0]
	0x0365E030 BL 0x1C16CF4
	0x0365E034 ADRP X0, 0xADB000
	0x0365E038 LDR X0, [X0 + 0x8C8]
	0x0365E03C BL 0x1C16CF4
	0x0365E040 ADRP X0, 0xAC5000
	0x0365E044 LDR X0, [X0 + 0x770]
	0x0365E048 BL 0x1C16CF4
	0x0365E04C MOVZ W8, 0x1
	0x0365E050 STRB W8, [X25 + 0x696]
	0x0365E054 MOV X0, X19
	0x0365E058 MOV X1, X31
	0x0365E05C BL 0x33BDD8C
	0x0365E060 LDR X0, [X24]
	0x0365E064 BL 0x1C16F10
	0x0365E068 LDR X24, [X22]
	0x0365E06C LDR X23, [X23]
	0x0365E070 MOV X1, X31
	0x0365E074 MOV X22, X0
	0x0365E078 BL 0x33BDD8C
	0x0365E07C MOVN W9, 0x80FF
	0x0365E080 AND W8, W21, 0x1
	0x0365E084 ANDS W31, W20, W9, 0x0
	0x0365E088 STP X24, X23, [X22 + 0x10]
	0x0365E08C STRB W8, [X19 + 0x20]
	0x0365E090 CSEL W8, W20, W31, EQ
	0x0365E094 MOV X0, X19
	0x0365E098 STR X22, [X19 + 0x10]
	0x0365E09C STR W8, [X19 + 0x24]
	0x0365E0A0 BL 0x365E0D0
	0x0365E0A4 MOV X1, X0
	0x0365E0A8 MOV X0, X19
	0x0365E0AC LDP X20, X19, [X31 + 0x30]
	0x0365E0B0 LDP X22, X21, [X31 + 0x20]
	0x0365E0B4 LDP X24, X23, [X31 + 0x10]
	0x0365E0B8 LDP X30, X25, [X31], #0x40
	0x0365E0BC B 0x364E404
	0x0365E0C0 MOVN W8, 0x80FF
	0x0365E0C4 ANDS W31, W1, W8, 0x0
	0x0365E0C8 CSEL W0, W1, W31, EQ
	0x0365E0CC RET
	0x0365E0D0 STP X30, X21, [X31 - 0x20]!
	0x0365E0D4 STP X20, X19, [X31 + 0x10]
	0x0365E0D8 ADRP X20, 0xD82000
	0x0365E0DC LDRB W8, [X20 + 0x699]
	0x0365E0E0 MOV X19, X0
	0x0365E0E4 TBNZ X8, 0x0, 0x365E108
	0x0365E0E8 ADRP X0, 0xAC2000
	0x0365E0EC LDR X0, [X0 + 0xB98]
	0x0365E0F0 BL 0x1C16CF4
	0x0365E0F4 ADRP X0, 0xA95000
	0x0365E0F8 LDR X0, [X0 + 0x618]
	0x0365E0FC BL 0x1C16CF4
	0x0365E100 MOVZ W8, 0x1
	0x0365E104 STRB W8, [X20 + 0x699]
	0x0365E108 ADRP X8, 0xA95000
	0x0365E10C LDR W19, [X19 + 0x24]
	0x0365E110 LDR X8, [X8 + 0x618]
	0x0365E114 CBZ W19, 0x365E14C
	0x0365E118 SBFM W9, W19, 0x8, 0x1F
	0x0365E11C CMP W19, 0xFF
	0x0365E120 CSEL W9, W19, W9, LT
	0x0365E124 TBNZ X9, 0x0, 0x365E170
	0x0365E128 MOV W10, W31
	0x0365E12C ADD W21, W10, 0x1
	0x0365E130 TBNZ X9, 0x1, 0x365E174
	0x0365E134 AND W10, W10, 0xFF
	0x0365E138 CMP W10, 0x7
	0x0365E13C SBFM W9, W9, 0x1, 0x1F
	0x0365E140 MOV W10, W21
	0x0365E144 B.CC 0x365E12C
	0x0365E148 B 0x365E174
	0x0365E14C LDR X0, [X8]
	0x0365E150 MOVZ W1, 0x1
	0x0365E154 BL 0x1C16D6C
	0x0365E158 CBZ X0, 0x365E228
	0x0365E15C LDR W8, [X0 + 0x18]
	0x0365E160 MOV X20, X0
	0x0365E164 CBZ W8, 0x365E224
	0x0365E168 STRB W31, [X20 + 0x20]
	0x0365E16C B 0x365E1E4
	0x0365E170 MOV W21, W31
	0x0365E174 LDR X0, [X8]
	0x0365E178 CMP W19, 0xFF
	0x0365E17C B.LE 0x365E1BC
	0x0365E180 MOVZ W1, 0x3
	0x0365E184 BL 0x1C16D6C
	0x0365E188 CBZ X0, 0x365E228
	0x0365E18C LDR W8, [X0 + 0x18]
	0x0365E190 MOV X20, X0
	0x0365E194 CBZ W8, 0x365E224
	0x0365E198 CMP W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xD84000
	010 Move W8, [X20+1667]
	011 Move X21, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xAC4000
	018 Move X0, [X0+2968]
	019 Call 0x1C17CF4
	020 Move X0, 0xAE0000
	021 Move X0, [X0+3264]
	022 Call 0x1C17CF4
	023 Move X0, 0xAE0000
	024 Move X0, [X0+2016]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1667], W8
	028 Compare X21, 0
	029 JumpIfEqual {126}
	030 Move X8, [X21+24]
	031 Compare X8, 0
	032 JumpIfEqual {126}
	033 Compare W8, 0
	034 JumpIfEqual {88}
	035 Move W8, [X21+32]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X19+40]
	038 Compare X8, 0
	039 JumpIfNotEqual {47}
	040 Move X8, 0xAE0000
	041 Move X8, [X8+3264]
	042 Move X0, [X8]
	043 Call 0x1C17F10
	044 Move X20, X0
	045 Call OidCollection..ctor, X0
	046 Move [X19+40], X20
	047 Move X8, 0xAC4000
	048 Move X8, [X8+2968]
	049 Move X0, [X8]
	050 Call 0x1C17F10
	051 Move X20, X0
	052 Move X1, X21
	053 Move X2, X31
	054 Call ASN1..ctor, X0, X1
	055 Compare X20, 0
	056 JumpIfEqual {89}
	057 Move W8, [X20+16]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X25, 0xADF000
	060 Move X25, [X25+2016]
	061 Move W21, W31
	062 Move X0, X20
	063 Move X1, X31
	064 Call ASN1.get_Count, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X22, [X19+40]
	067 Move X0, X20
	068 Move W1, W21
	069 Move X2, X31
	070 Call ASN1.get_Item, X0, X1
	071 Move X1, X31
	072 Call ASN1Convert.ToOid, X0
	073 Move X24, X0
	074 Move X0, [X25]
	075 Call 0x1C17F10
	076 Move X23, X0
	077 Move X1, X24
	078 Call Oid..ctor, X0, X1
	079 Compare X22, 0
	080 JumpIfEqual {87}
	081 Move X0, X22
	082 Move X1, X23
	083 Call OidCollection.Add, X0, X1
	084 Add W21, W21, 1
	085 Move W0, 2
	086 Move W0, W31
	087 Call 0x1C17F20
	088 Call 0x1C17F28
	089 Call 0x1C17F20
	090 Move X0, 0xADF000
	091 Move X0, [X0+3304]
	092 Call 0x1C17D08
	093 Move X1, X31
	094 Call Locale.GetText, X0
	095 Move X19, X0
	096 Move X0, 0xAC3000
	097 Move X0, [X0+3296]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X20, X0
	101 Move X1, X19
	102 Move X2, X31
	103 Call CryptographicException..ctor, X0, X1
	104 Move X0, 0xADF000
	105 Move X0, [X0+3312]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X20
	109 Call 0x1C17DEC
	110 Move X19, X0
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X0, X19
	113 Call 0x3EB2AD0
	114 Move X19, X0
	115 Move X0, 0xA9C000
	116 Move X0, [X0+3264]
	117 Call 0x1C17D08
	118 Move X8, [X19]
	119 Move X1, [X8]
	120 Call 0x1C18270
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {136}
	125 Call 0x3EB2AE0
	126 Move W0, 1
	127 Move X20, [X31+48]
	128 Move X19, [X31+56]
	129 Move X22, [X31+32]
	130 Move X21, [X31+40]
	131 Move X24, [X31+16]
	132 Move X23, [X31+24]
	133 Move X30, [X31+64]
	134 Move X25, [X31+72]
	135 Return X0
	136 Move W0, 8
	137 Call 0x3EB2AF0
	138 Move X8, [X19]
	139 Move [X0], X8
	140 Move X1, 0x857000
	141 Add X1, X1, 3672
	142 Move X2, X31
	143 Call 0x3EB2B00
	144 Move X19, X0
	145 Call 0x3EB2AE0
	146 Move X0, X19
	147 Call 0x1D2D690
	148 Call 0x1991590

Method: System.Byte[] Encode()

Disassembly:
	0x0365E318 MOV X0, X19
	0x0365E31C BL 0x364E404
	0x0365E320 LDRB W8, [X20 + 0x20]
	0x0365E324 LDR X1, [X19 + 0x18]
	0x0365E328 MOV X0, X19
	0x0365E32C STRB W8, [X19 + 0x20]
	0x0365E330 BL 0x365DE34
	0x0365E334 STR W0, [X19 + 0x28]
	0x0365E338 LDP X20, X19, [X31 + 0x20]
	0x0365E33C LDP X22, X21, [X31 + 0x10]
	0x0365E340 LDP X30, X23, [X31], #0x30
	0x0365E344 RET
	0x0365E348 ADRP X0, 0xADE000
	0x0365E34C LDR X0, [X0 + 0x9A8]
	0x0365E350 BL 0x1C16D08
	0x0365E354 MOV X1, X31
	0x0365E358 BL 0x320A160
	0x0365E35C MOV X19, X0
	0x0365E360 ADRP X0, 0xA9D000
	0x0365E364 LDR X0, [X0 + 0x578]
	0x0365E368 BL 0x1C16D08
	0x0365E36C BL 0x1C16F10
	0x0365E370 MOV X20, X0
	0x0365E374 ADRP X0, 0xADE000
	0x0365E378 LDR X0, [X0 + 0x848]
	0x0365E37C BL 0x1C16D08
	0x0365E380 MOV X2, X0
	0x0365E384 MOV X0, X20
	0x0365E388 MOV X1, X19
	0x0365E38C MOV X3, X31
	0x0365E390 BL 0x330E16C
	0x0365E394 ADRP X0, 0xADE000
	0x0365E398 LDR X0, [X0 + 0xD58]
	0x0365E39C BL 0x1C16D08
	0x0365E3A0 MOV X1, X0
	0x0365E3A4 MOV X0, X20
	0x0365E3A8 BL 0x1C16DEC
	0x0365E3AC ADRP X0, 0xA9A000
	0x0365E3B0 LDR X0, [X0 + 0x528]
	0x0365E3B4 BL 0x1C16D08
	0x0365E3B8 BL 0x1C16F10
	0x0365E3BC MOV X19, X0
	0x0365E3C0 ADRP X0, 0xADE000
	0x0365E3C4 LDR X0, [X0 + 0x848]
	0x0365E3C8 BL 0x1C16D08
	0x0365E3CC MOV X1, X0
	0x0365E3D0 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xD83000
	006 Move X21, 0xAC3000
	007 Move W8, [X19+1668]
	008 Move X21, [X21+2968]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAC3000
	015 Move X0, [X0+2968]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+1668], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, 48
	022 Move X2, X31
	023 Move X19, X0
	024 Call ASN1..ctor, X0, X1
	025 Move X0, [X20+40]
	026 Compare X0, 0
	027 JumpIfEqual {62}
	028 Call OidCollection.GetEnumerator, X0
	029 Compare X0, 0
	030 JumpIfEqual {62}
	031 Move X20, X0
	032 Move X0, X20
	033 Call OidEnumerator.MoveNext, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {51}
	038 Move X0, X20
	039 Call OidEnumerator.get_Current, X0
	040 Compare X0, 0
	041 JumpIfEqual {62}
	042 Move X0, [X0+16]
	043 Move X1, X31
	044 Call ASN1Convert.FromOid, X0
	045 Compare X19, 0
	046 JumpIfEqual {62}
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call ASN1.Add, X0, X1
	051 Compare X19, 0
	052 JumpIfEqual {62}
	053 Move X8, [X19]
	054 Move X0, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X2, [X8+376]
	058 Move X1, [X8+384]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 CallNoReturn X2
	062 Call 0x1C17F20

Method: System.String ToString(System.Boolean multiLine)

Disassembly:
	0x0365E688 CMP W0, 0x1
	0x0365E68C B.LT 0x365E6A8
	0x0365E690 ADRP X8, 0xA95000
	0x0365E694 LDR X8, [X8 + 0x838]
	0x0365E698 MOV X0, X21
	0x0365E69C MOV X2, X31
	0x0365E6A0 LDR X1, [X8]
	0x0365E6A4 BL 0x32333E0
	0x0365E6A8 ADRP X8, 0xADE000
	0x0365E6AC LDR X8, [X8 + 0xD90]
	0x0365E6B0 MOV X0, X21
	0x0365E6B4 MOV X2, X31
	0x0365E6B8 LDR X1, [X8]
	0x0365E6BC BL 0x32333E0
	0x0365E6C0 LDR W22, [X20 + 0x24]
	0x0365E6C4 TBZ X22, 0x3, 0x365E714
	0x0365E6C8 CBZ X21, 0x365E94C
	0x0365E6CC MOV X0, X21
	0x0365E6D0 MOV X1, X31
	0x0365E6D4 BL 0x323260C
	0x0365E6D8 CMP W0, 0x1
	0x0365E6DC B.LT 0x365E6F8
	0x0365E6E0 ADRP X8, 0xA95000
	0x0365E6E4 LDR X8, [X8 + 0x838]
	0x0365E6E8 MOV X0, X21
	0x0365E6EC MOV X2, X31
	0x0365E6F0 LDR X1, [X8]
	0x0365E6F4 BL 0x32333E0
	0x0365E6F8 ADRP X8, 0xADE000
	0x0365E6FC LDR X8, [X8 + 0xD60]
	0x0365E700 MOV X0, X21
	0x0365E704 MOV X2, X31
	0x0365E708 LDR X1, [X8]
	0x0365E70C BL 0x32333E0
	0x0365E710 LDR W22, [X20 + 0x24]
	0x0365E714 TBZ X22, 0x2, 0x365E764
	0x0365E718 CBZ X21, 0x365E94C
	0x0365E71C MOV X0, X21
	0x0365E720 MOV X1, X31
	0x0365E724 BL 0x323260C
	0x0365E728 CMP W0, 0x1
	0x0365E72C B.LT 0x365E748
	0x0365E730 ADRP X8, 0xA95000
	0x0365E734 LDR X8, [X8 + 0x838]
	0x0365E738 MOV X0, X21
	0x0365E73C MOV X2, X31
	0x0365E740 LDR X1, [X8]
	0x0365E744 BL 0x32333E0
	0x0365E748 ADRP X8, 0xADE000
	0x0365E74C LDR X8, [X8 + 0xD68]
	0x0365E750 MOV X0, X21
	0x0365E754 MOV X2, X31
	0x0365E758 LDR X1, [X8]
	0x0365E75C BL 0x32333E0
	0x0365E760 LDR W22, [X20 + 0x24]
	0x0365E764 TBZ X22, 0x1, 0x365E7B4
	0x0365E768 CBZ X21, 0x365E94C
	0x0365E76C MOV X0, X21
	0x0365E770 MOV X1, X31
	0x0365E774 BL 0x323260C
	0x0365E778 CMP W0, 0x1
	0x0365E77C B.LT 0x365E798
	0x0365E780 ADRP X8, 0xA95000
	0x0365E784 LDR X8, [X8 + 0x838]
	0x0365E788 MOV X0, X21
	0x0365E78C MOV X2, X31
	0x0365E790 LDR X1, [X8]
	0x0365E794 BL 0x32333E0
	0x0365E798 ADRP X8, 0xADE000
	0x0365E79C LDR X8, [X8 + 0xD70]
	0x0365E7A0 MOV X0, X21
	0x0365E7A4 MOV X2, X31
	0x0365E7A8 LDR X1, [X8]
	0x0365E7AC BL 0x32333E0
	0x0365E7B0 LDR W22, [X20 + 0x24]
	0x0365E7B4 TBZ X22, 0x0, 0x365E804
	0x0365E7B8 CBZ X21, 0x365E94C
	0x0365E7BC MOV X0, X21
	0x0365E7C0 MOV X1, X31
	0x0365E7C4 BL 0x323260C
	0x0365E7C8 CMP W0, 0x1
	0x0365E7CC B.LT 0x365E7E8
	0x0365E7D0 ADRP X8, 0xA95000
	0x0365E7D4 LDR X8, [X8 + 0x838]
	0x0365E7D8 MOV X0, X21
	0x0365E7DC MOV X2, X31
	0x0365E7E0 LDR X1, [X8]
	0x0365E7E4 BL 0x32333E0
	0x0365E7E8 ADRP X8, 0xADE000
	0x0365E7EC LDR X8, [X8 + 0xD80]
	0x0365E7F0 MOV X0, X21
	0x0365E7F4 MOV X2, X31
	0x0365E7F8 LDR X1, [X8]
	0x0365E7FC BL 0x32333E0
	0x0365E800 LDR W22, [X20 + 0x24]
	0x0365E804 TBNZ X22, 0xF, 0x365E82C
	0x0365E808 CBNZ X21, 0x365E878
	0x0365E80C B 0x365E94C
	0x0365E810 ADRP X8, 0xADE000
	0x0365E814 LDR X8, [X8 + 0x890]
	0x0365E818 LDR X0, [X8]
	0x0365E81C LDP X20, X19, [X31 + 0x20]
	0x0365E820 LDP X22, X21, [X31 + 0x10]
	0x0365E824 LDR X30, [X31], #0x30
	0x0365E828 RET
	0x0365E82C CBZ X21, 0x365E94C
	0x0365E830 MOV X0, X21
	0x0365E834 MOV X1, X31
	0x0365E838 BL 0x323260C
	0x0365E83C CMP W0, 0x1
	0x0365E840 B.LT 0x365E85C
	0x0365E844 ADRP X8, 0xA95000
	0x0365E848 LDR X8, [X8 + 0x838]
	0x0365E84C MOV X0, X21
	0x0365E850 MOV X2, X31
	0x0365E854 LDR X1, [X8]
	0x0365E858 BL 0x32333E0
	0x0365E85C ADRP X8, 0xADE000
	0x0365E860 LDR X8, [X8 + 0xD78]
	0x0365E864 MOV X0, X21
	0x0365E868 MOV X2, X31
	0x0365E86C LDR X1, [X8]
	0x0365E870 BL 0x32333E0
	0x0365E874 LDR W22, [X20 + 0x24]
	0x0365E878 ADRP X8, 0xA96000
	0x0365E87C LDR X8, [X8 + 0x610]
	0x0365E880 MOV X0, X21
	0x0365E884 MOV X2, X31
	0x0365E888 LDR X1, [X8]
	0x0365E88C BL 0x32333E0
	0x0365E890 ADRP X20, 0xAC8000
	0x0365E894 LDR X20, [X20 + 0x350]
	0x0365E898 ADD X0, X31, 0xC
	0x0365E89C MOV X2, X31
	0x0365E8A0 STRB W22, [X31 + 0xC]
	0x0365E8A4 LDR X1, [X20]
	0x0365E8A8 BL 0x3319C4C
	0x0365E8AC MOV X1, X0
	0x0365E8B0 MOV X0, X21
	0x0365E8B4 MOV X2, X31
	0x0365E8B8 BL 0x32333E0
	0x0365E8BC CMP W22, 0x100
	0x0365E8C0 B.LT 0x365E904
	0x0365E8C4 ADRP X8, 0xA95000
	0x0365E8C8 LDR X8, [X8 + 0xDD8]
	0x0365E8CC MOV X0, X21
	0x0365E8D0 MOV X2, X31
	0x0365E8D4 LDR X1, [X8]
	0x0365E8D8 BL 0x32333E0
	0x0365E8DC LDR X1, [X20]
	0x0365E8E0 UBFM W8, W22, 0x8, 0x1F
	0x0365E8E4 ADD X0, X31, 0xC
	0x0365E8E8 MOV X2, X31
	0x0365E8EC STRB W8, [X31 + 0xC]
	0x0365E8F0 BL 0x3319C4C
	0x0365E8F4 MOV X1, X0
	0x0365E8F8 MOV X0, X21
	0x0365E8FC MOV X2, X31
	0x0365E900 BL 0x32333E0
	0x0365E904 ADRP X8, 0xA96000
	0x0365E908 LDR X8, [X8 + 0x608]
	0x0365E90C MOV X0, X21
	0x0365E910 MOV X2, X31
	0x0365E914 LDR X1, [X8]
	0x0365E918 BL 0x32333E0
	0x0365E91C TBZ X19, 0x0, 0x365E938
	0x0365E920 MOV X0, X31
	0x0365E924 BL 0x33C1548
	0x0365E928 MOV X1, X0
	0x0365E92C MOV X0, X21
	0x0365E930 MOV X2, X31
	0x0365E934 BL 0x32333E0
	0x0365E938 LDR X8, [X21]
	0x0365E93C MOV X0, X21
	0x0365E940 LDP X9, X1, [X8 + 0x168]
	0x0365E944 BLR X9
	0x0365E948 B 0x365E81C
	0x0365E94C BL 0x1C16F20
	0x0365E950 LDR W8, [X0 + 0x18]
	0x0365E954 CMP W8, 0x1

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0xD83000
	013 Move W8, [X21+1669]
	014 Move W19, W1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {52}
	020 Move X0, 0xA96000
	021 Move X0, [X0+2288]
	022 Call 0x1C17CF4
	023 Move X0, 0xA98000
	024 Move X0, [X0+632]
	025 Call 0x1C17CF4
	026 Move X0, 0xADF000
	027 Move X0, [X0+3360]
	028 Call 0x1C17CF4
	029 Move X0, 0xAC6000
	030 Move X0, [X0+1480]
	031 Call 0x1C17CF4
	032 Move X0, 0xADF000
	033 Move X0, [X0+3368]
	034 Call 0x1C17CF4
	035 Move X0, 0xA96000
	036 Move X0, [X0+2104]
	037 Call 0x1C17CF4
	038 Move X0, 0xA97000
	039 Move X0, [X0+1544]
	040 Call 0x1C17CF4
	041 Move X0, 0xADF000
	042 Move X0, [X0+2192]
	043 Call 0x1C17CF4
	044 Move X0, 0xADF000
	045 Move X0, [X0+2488]
	046 Call 0x1C17CF4
	047 Move X0, 0xADF000
	048 Move X0, [X0+3376]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X21+1669], W8
	052 Move W8, [X20+48]
	053 Subtract W9, W8, 2
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, 0xA98000
	058 Move X8, [X8+632]
	059 Move X8, [X8]
	060 Move X8, [X8+184]
	061 Move X1, [X20+24]
	062 Move X20, [X31+80]
	063 Move X19, [X31+88]
	064 Move X22, [X31+64]
	065 Move X21, [X31+72]
	066 Move X24, [X31+48]
	067 Move X23, [X31+56]
	068 Move X26, [X31+32]
	069 Move X25, [X31+40]
	070 Move X28, [X31+16]
	071 Move X27, [X31+24]
	072 Move X30, [X31+96]
	073 Call X509Extension.FormatUnkownData, X0, X1
	074 Return X0
	075 Move X8, [X20+16]
	076 Compare X8, 0
	077 JumpIfEqual {220}
	078 Move X0, [X8+16]
	079 Move X8, 0xAC6000
	080 Move X8, [X8+1480]
	081 Move X2, X31
	082 Move X1, [X8]
	083 Call String.op_Inequality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {109}
	088 Move X8, [X20+16]
	089 Compare X8, 0
	090 JumpIfEqual {220}
	091 Move X1, [X8+16]
	092 Move X8, 0xADF000
	093 Move X8, [X8+2488]
	094 Move X20, [X31+80]
	095 Move X19, [X31+88]
	096 Move X22, [X31+64]
	097 Move X21, [X31+72]
	098 Move X24, [X31+48]
	099 Move X23, [X31+56]
	100 Move X0, [X8]
	101 Move X26, [X31+32]
	102 Move X25, [X31+40]
	103 Move X28, [X31+16]
	104 Move X27, [X31+24]
	105 Move X2, X31
	106 Move X30, [X31+96]
	107 Call String.Format, X0, X1
	108 Return X0
	109 Move X0, [X20+40]
	110 Compare X0, 0
	111 JumpIfEqual {220}
	112 Call OidCollection.get_Count, X0
	113 Compare W0, 0
	114 JumpIfEqual {187}
	115 Move X8, 0xA96000
	116 Move X8, [X8+2288]
	117 Move X0, [X8]
	118 Call 0x1C17F10
	119 Move X1, X31
	120 Move X21, X0
	121 Call StringBuilder..ctor, X0
	122 Move X0, [X20+40]
	123 Compare X0, 0
	124 JumpIfEqual {220}
	125 Move X24, 0xADF000
	126 Move X25, 0xADF000
	127 Move X26, 0xADF000
	128 Move X27, 0xA97000
	129 Move X28, 0xA96000
	130 Move X24, [X24+3376]
	131 Move X25, [X25+3368]
	132 Move X26, [X26+3360]
	133 Move X27, [X27+1544]
	134 Move X28, [X28+2104]
	135 Move W22, W31
	136 Call OidCollection.get_Count, X0
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X0, [X20+40]
	139 Compare X0, 0
	140 JumpIfEqual {220}
	141 Move W1, W22
	142 Call OidCollection.get_Item, X0, X1
	143 Compare X0, 0
	144 JumpIfEqual {220}
	145 Move X23, X0
	146 Move X0, [X0+16]
	147 Move X1, [X24]
	148 Move X2, X31
	149 Call String.op_Equality, X0, X1
	150 Compare X21, 0
	151 JumpIfEqual {220}
	152 And W31, W0, 1
	153 NotImplemented "Instruction CSEL not yet implemented."
	154 Move X1, [X8]
	155 Move X0, X21
	156 Move X2, X31
	157 Call StringBuilder.Append, X0, X1
	158 Move X1, [X23+16]
	159 Move X0, X21
	160 Move X2, X31
	161 Call StringBuilder.Append, X0, X1
	162 Move X1, [X27]
	163 Move X0, X21
	164 Move X2, X31
	165 Call StringBuilder.Append, X0, X1
	166 Move TEMP, X19
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {173}
	170 Move X0, X31
	171 Call Environment.get_NewLine
	172 Move X1, X0
	173 Move X0, [X20+40]
	174 Compare X0, 0
	175 JumpIfEqual {220}
	176 Call OidCollection.get_Count, X0
	177 Subtract W8, W0, 1
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move X1, [X28]
	180 Move X0, X21
	181 Move X2, X31
	182 Call StringBuilder.Append, X0, X1
	183 Move X0, [X20+40]
	184 Add W22, W22, 1
	185 Compare X0, 0
	186 JumpIfNotEqual {136}
	187 Move X8, 0xADF000
	188 Move X8, [X8+2192]
	189 Move X0, [X8]
	190 Move X20, [X31+80]
	191 Move X19, [X31+88]
	192 Move X22, [X31+64]
	193 Move X21, [X31+72]
	194 Move X24, [X31+48]
	195 Move X23, [X31+56]
	196 Move X26, [X31+32]
	197 Move X25, [X31+40]
	198 Move X28, [X31+16]
	199 Move X27, [X31+24]
	200 Move X30, [X31+96]
	201 Return X0
	202 Compare X21, 0
	203 JumpIfEqual {220}
	204 Move X8, [X21]
	205 Move X0, X21
	206 Move X20, [X31+80]
	207 Move X19, [X31+88]
	208 Move X22, [X31+64]
	209 Move X21, [X31+72]
	210 Move X2, [X8+360]
	211 Move X1, [X8+368]
	212 Move X24, [X31+48]
	213 Move X23, [X31+56]
	214 Move X26, [X31+32]
	215 Move X25, [X31+40]
	216 Move X28, [X31+16]
	217 Move X27, [X31+24]
	218 Move X30, [X31+96]
	219 CallNoReturn X2
	220 Call 0x1C17F20

