Type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection

Method: System.Void .ctor()

Disassembly:
	0x03652FC0 MOV X0, X19
	0x03652FC4 MOV X2, X31
	0x03652FC8 BL 0x32338A8
	0x03652FCC MOV X0, X19
	0x03652FD0 MOV X1, X31
	0x03652FD4 BL 0x3233888
	0x03652FD8 ADRP X8, 0xAD1000
	0x03652FDC LDR X8, [X8 + 0x9B0]
	0x03652FE0 MOV X0, X19
	0x03652FE4 MOV X2, X31
	0x03652FE8 LDR X1, [X8]
	0x03652FEC BL 0x32338A8
	0x03652FF0 LDR X1, [X25]
	0x03652FF4 MOV X0, X19
	0x03652FF8 MOV X2, X31
	0x03652FFC BL 0x32333E0
	0x03653000 LDR X8, [X20]
	0x03653004 MOV X0, X20
	0x03653008 LDP X9, X1, [X8 + 0x1D8]
	0x0365300C BLR X9
	0x03653010 MOV X1, X31
	0x03653014 BL 0x32256C4
	0x03653018 MOV X1, X0
	0x0365301C MOV X0, X19
	0x03653020 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD8F000
	006 Move X20, 0xACF000
	007 Move W8, [X21+1672]
	008 Move X20, [X20+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xACF000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1672], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call ArrayList..ctor, X0
	027 Move [X19+16], X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x03654770 MOV X0, X24
	0x03654774 MOV X1, X25
	0x03654778 MOV X2, X31
	0x0365477C BL 0x31E7ED0
	0x03654780 CBZ X21, 0x3654888
	0x03654784 ADRP X8, 0xA9F000
	0x03654788 LDR X8, [X8 + 0x618]
	0x0365478C LDR W9, [X21 + 0x18]
	0x03654790 LDR X0, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x0365EAB0 MOVZ W0, 0x1
	0x0365EAB4 LDP X20, X19, [X31 + 0x10]
	0x0365EAB8 LDP X30, X21, [X31], #0x20
	0x0365EABC RET
	0x0365EAC0 MOVZ W0, 0x8
	0x0365EAC4 BL 0x3EB1AF0
	0x0365EAC8 LDR X8, [X19]
	0x0365EACC STR X8, [X0]
	0x0365EAD0 ADRP X1, 0x856000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+712]
	007 Move X1, [X8+720]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Object get_SyncRoot()

Disassembly:
	0x0365EAD4 ADD X1, X1, 0xE58

ISIL:
	001 Return X0

Method: System.Security.Cryptography.X509Certificates.X509Extension get_Item(System.String oid)

Disassembly:
	0x036551C8 ADD X8, X8, X9, 0x4, LSL
	0x036551CC ADD X0, X8, 0x138
	0x036551D0 LDP X8, X1, [X0]
	0x036551D4 MOV X0, X20
	0x036551D8 BLR X8
	0x036551DC CBNZ X21, 0x3655378
	0x036551E0 MOV X0, X19
	0x036551E4 LDP X20, X19, [X31 + 0x90]
	0x036551E8 LDP X22, X21, [X31 + 0x80]
	0x036551EC LDP X24, X23, [X31 + 0x70]
	0x036551F0 LDP X26, X25, [X31 + 0x60]
	0x036551F4 LDP X28, X27, [X31 + 0x50]
	0x036551F8 LDP X29, X30, [X31 + 0x40]
	0x036551FC ADD X31, X31, 0xA0
	0x03655200 RET
	0x03655204 LDR X8, [X31 + 0x8]
	0x03655208 STR X8, [X31 + 0x30]
	0x0365520C MOV X0, X28
	0x03655210 BL 0x1C171E0
	0x03655214 LDR X8, [X31 + 0x8]
	0x03655218 STR X8, [X31 + 0x30]
	0x0365521C BL 0x1C16F28
	0x03655220 LDR X8, [X31 + 0x8]
	0x03655224 STR X8, [X31 + 0x30]
	0x03655228 BL 0x1C16F20
	0x0365522C LDR X8, [X31 + 0x8]
	0x03655230 STR X8, [X31 + 0x30]
	0x03655234 BL 0x1C16F20
	0x03655238 LDR X8, [X31 + 0x8]
	0x0365523C STR X8, [X31 + 0x30]
	0x03655240 BL 0x1C16F20
	0x03655244 LDR X8, [X31 + 0x8]
	0x03655248 STR X8, [X31 + 0x30]
	0x0365524C BL 0x1C16F20
	0x03655250 LDR X8, [X31 + 0x8]
	0x03655254 STR X8, [X31 + 0x30]
	0x03655258 BL 0x1C16F20
	0x0365525C LDR X8, [X31 + 0x8]
	0x03655260 STR X8, [X31 + 0x30]
	0x03655264 BL 0x1C16F20
	0x03655268 LDR X8, [X31 + 0x8]
	0x0365526C STR X8, [X31 + 0x30]
	0x03655270 BL 0x1C16F20
	0x03655274 LDR X8, [X31 + 0x8]
	0x03655278 STR X8, [X31 + 0x30]
	0x0365527C BL 0x1C16F20
	0x03655280 LDR X8, [X31 + 0x8]
	0x03655284 STR X8, [X31 + 0x30]
	0x03655288 BL 0x1C16F20
	0x0365528C LDR X8, [X31 + 0x8]
	0x03655290 STR X8, [X31 + 0x30]
	0x03655294 BL 0x1C16F20
	0x03655298 LDR X8, [X31 + 0x8]
	0x0365529C STR X8, [X31 + 0x30]
	0x036552A0 BL 0x1C16F20
	0x036552A4 LDR X8, [X31 + 0x8]
	0x036552A8 STR X8, [X31 + 0x30]
	0x036552AC BL 0x1C16F20
	0x036552B0 LDR X8, [X31 + 0x8]
	0x036552B4 STR X8, [X31 + 0x30]
	0x036552B8 BL 0x1C16F20
	0x036552BC LDR X8, [X31 + 0x8]
	0x036552C0 STR X8, [X31 + 0x30]
	0x036552C4 BL 0x1C16F20
	0x036552C8 LDR X8, [X31 + 0x8]
	0x036552CC STR X8, [X31 + 0x30]
	0x036552D0 BL 0x1C16F20
	0x036552D4 LDR X8, [X31 + 0x8]
	0x036552D8 STR X8, [X31 + 0x30]
	0x036552DC BL 0x1C16F20
	0x036552E0 LDR X8, [X31 + 0x8]
	0x036552E4 STR X8, [X31 + 0x30]
	0x036552E8 BL 0x1C16F20
	0x036552EC LDR X8, [X31 + 0x8]
	0x036552F0 STR X8, [X31 + 0x30]
	0x036552F4 BL 0x1C16F20
	0x036552F8 LDR X8, [X31 + 0x8]
	0x036552FC STR X8, [X31 + 0x30]
	0x03655300 BL 0x1C16F20
	0x03655304 LDR X8, [X31 + 0x8]
	0x03655308 STR X8, [X31 + 0x30]
	0x0365530C BL 0x1C16F20
	0x03655310 LDR X8, [X31 + 0x8]
	0x03655314 STR X8, [X31 + 0x30]
	0x03655318 BL 0x1C16F20
	0x0365531C LDR X8, [X31 + 0x8]
	0x03655320 STR X8, [X31 + 0x30]
	0x03655324 BL 0x1C16F20
	0x03655328 ADRP X0, 0xAA3000
	0x0365532C LDR X0, [X0 + 0x528]
	0x03655330 BL 0x1C16D08
	0x03655334 BL 0x1C16F10
	0x03655338 MOV X19, X0
	0x0365533C ADRP X0, 0xAE7000
	0x03655340 LDR X0, [X0 + 0xB00]
	0x03655344 BL 0x1C16D08
	0x03655348 MOV X1, X0
	0x0365534C MOV X0, X19
	0x03655350 MOV X2, X31
	0x03655354 BL 0x330E100
	0x03655358 ADRP X0, 0xAE7000
	0x0365535C LDR X0, [X0 + 0xB08]
	0x03655360 BL 0x1C16D08
	0x03655364 MOV X1, X0
	0x03655368 MOV X0, X19
	0x0365536C BL 0x1C16DEC
	0x03655370 BL 0x1C16F20
	0x03655374 BL 0x1C16F20
	0x03655378 MOV X0, X21
	0x0365537C BL 0x1C16F18
	0x03655380 MOV X0, X19
	0x03655384 BL 0x1C171E0
	0x03655388 MOV X0, X19
	0x0365538C BL 0x1C171E0
	0x03655390 MOV X0, X19
	0x03655394 BL 0x1C171E0
	0x03655398 ADRP X0, 0xA9E000
	0x0365539C LDR X0, [X0 + 0x9D0]
	0x036553A0 BL 0x1C16D08
	0x036553A4 MOVZ W1, 0x1
	0x036553A8 BL 0x1C16D6C
	0x036553AC MOV X19, X0
	0x036553B0 STR W21, [X31 + 0x2C]
	0x036553B4 ADRP X0, 0xAE7000
	0x036553B8 LDR X0, [X0 + 0xB10]
	0x036553BC BL 0x1C16D08
	0x036553C0 ADD X1, X31, 0x2C
	0x036553C4 BL 0x1C16E04
	0x036553C8 MOV X20, X0
	0x036553CC MOV X0, X19
	0x036553D0 BL 0x19903C0
	0x036553D4 MOV X0, X19
	0x036553D8 MOV X1, X20
	0x036553DC BL 0x19980B4
	0x036553E0 MOV X0, X19
	0x036553E4 MOV X1, X31
	0x036553E8 MOV X2, X20
	0x036553EC BL 0x1993444
	0x036553F0 ADRP X0, 0xAE7000
	0x036553F4 LDR X0, [X0 + 0xB18]
	0x036553F8 BL 0x1C16D08
	0x036553FC MOV X1, X19
	0x03655400 MOV X2, X31
	0x03655404 BL 0x320A164
	0x03655408 MOV X19, X0
	0x0365540C ADRP X0, 0xACB000
	0x03655410 LDR X0, [X0 + 0xCE0]
	0x03655414 BL 0x1C16D08
	0x03655418 BL 0x1C16F10
	0x0365541C MOV X1, X19
	0x03655420 MOV X2, X31
	0x03655424 MOV X20, X0
	0x03655428 BL 0x3252170
	0x0365542C B 0x36555C4
	0x03655430 MOV X0, X19
	0x03655434 BL 0x1C171E0
	0x03655438 LDR X8, [X31 + 0x8]
	0x0365543C MOVZ W0, 0x8
	0x03655440 STR X8, [X31 + 0x30]
	0x03655444 BL 0x3EB1AF0
	0x03655448 LDR X8, [X28]
	0x0365544C STR X8, [X0]
	0x03655450 ADRP X1, 0x85F000
	0x03655454 ADD X1, X1, 0xE58
	0x03655458 MOV X2, X31
	0x0365545C BL 0x3EB1B00
	0x03655460 B 0x3655900
	0x03655464 LDR X8, [X31 + 0x8]
	0x03655468 MOV X21, X1
	0x0365546C MOV X28, X0
	0x03655470 STR X8, [X31 + 0x30]
	0x03655474 B 0x3655480
	0x03655478 MOV X21, X1
	0x0365547C MOV X28, X0
	0x03655480 BL 0x3EB1AE0
	0x03655484 ADRP X22, 0xA9E000
	0x03655488 LDR X19, [X31 + 0x20]
	0x0365548C LDR X22, [X22 + 0xE00]
	0x03655490 MOV X1, X21
	0x03655494 B 0x3655A28
	0x03655498 B 0x3655A10
	0x0365549C B 0x3655504
	0x036554A0 CMP W1, 0x1
	0x036554A4 MOV X28, X0
	0x036554A8 B.NE 0x3655908
	0x036554AC MOV X0, X28
	0x036554B0 BL 0x3EB1AD0
	0x036554B4 MOV X20, X0
	0x036554B8 ADRP X0, 0xA9E000
	0x036554BC LDR X0, [X0 + 0x7D0]
	0x036554C0 BL 0x1C16D08
	0x036554C4 LDR X8, [X20]
	0x036554C8 LDR X1, [X8]
	0x036554CC BL 0x1C17270
	0x036554D0 TBNZ X0, 0x0, 0x3655640
	0x036554D4 MOVZ W0, 0x8
	0x036554D8 BL 0x3EB1AF0
	0x036554DC LDR X8, [X20]
	0x036554E0 STR X8, [X0]
	0x036554E4 ADRP X1, 0x85F000
	0x036554E8 ADD X1, X1, 0xE58
	0x036554EC MOV X2, X31
	0x036554F0 BL 0x3EB1B00
	0x036554F4 B 0x3655900
	0x036554F8 MOV X28, X0
	0x036554FC BL 0x3EB1AE0
	0x03655500 B 0x3655908
	0x03655504 MOV X28, X0
	0x03655508 CMP W1, 0x1
	0x0365550C B.NE 0x3655908
	0x03655510 MOV X0, X28
	0x03655514 BL 0x3EB1AD0
	0x03655518 MOV X20, X0
	0x0365551C ADRP X0, 0xACD000
	0x03655520 LDR X0, [X0 + 0xEB8]
	0x03655524 BL 0x1C16D08
	0x03655528 LDR X8, [X20]
	0x0365552C LDR X1, [X8]
	0x03655530 BL 0x1C17270
	0x03655534 TBZ X0, 0x0, 0x36555DC
	0x03655538 BL 0x3EB1AE0
	0x0365553C ADRP X0, 0xA9E000
	0x03655540 LDR X0, [X0 + 0x9D0]
	0x03655544 BL 0x1C16D08
	0x03655548 MOVZ W1, 0x1
	0x0365554C BL 0x1C16D6C
	0x03655550 MOV X20, X0
	0x03655554 BL 0x19903C0
	0x03655558 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD8C000
	008 Move W8, [X21+1673]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xA9F000
	016 Move X0, [X0+3584]
	017 Call 0x1C17CF4
	018 Move X0, 0xA9F000
	019 Move X0, [X0+3608]
	020 Call 0x1C17CF4
	021 Move X0, 0xAE5000
	022 Move X0, [X0+3880]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1673], W8
	026 Compare X20, 0
	027 JumpIfEqual {175}
	028 Move X0, [X19+16]
	029 Compare X0, 0
	030 JumpIfEqual {174}
	031 Move X8, [X0]
	032 Move X9, [X8+664]
	033 Move X1, [X8+672]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Compare W0, 0
	036 JumpIfEqual {127}
	037 Move W8, [X20+16]
	038 Compare W8, 0
	039 JumpIfEqual {127}
	040 Move X0, [X19+16]
	041 Compare X0, 0
	042 JumpIfEqual {174}
	043 Move X8, [X0]
	044 Move X9, [X8+904]
	045 Move X1, [X8+912]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X19, X0
	048 Compare X0, 0
	049 JumpIfEqual {193}
	050 Move X22, 0xA9F000
	051 Move X23, 0xAE5000
	052 Move X22, [X22+3608]
	053 Move X23, [X23+3880]
	054 Move X8, [X19]
	055 Move X1, [X22]
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Compare X9, 0
	058 JumpIfEqual {65}
	059 Move X10, [X8+176]
	060 Add X10, X10, 8
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Subtract X9, X9, 1
	064 Add X10, X10, 16
	065 Move X0, X19
	066 Move W2, W31
	067 Call 0x1C5D788
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 Add X8, X8, X9
	070 Add X0, X8, 312
	071 Move X8, [X0]
	072 Move X1, [X0+8]
	073 Move X0, X19
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {128}
	079 Move X8, [X19]
	080 Move X1, [X22]
	081 NotImplemented "Instruction LDRH not yet implemented."
	082 Compare X9, 0
	083 JumpIfEqual {90}
	084 Move X10, [X8+176]
	085 Add X10, X10, 8
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract X9, X9, 1
	089 Add X10, X10, 16
	090 Move W2, 1
	091 Move X0, X19
	092 Call 0x1C5D788
	093 Move W9, [X10]
	094 Add W9, W9, 1
	095 Add X8, X8, W9
	096 Add X0, X8, 312
	097 Move X8, [X0]
	098 Move X1, [X0+8]
	099 Move X0, X19
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X21, X0
	102 Compare X0, 0
	103 JumpIfEqual {172}
	104 Move X8, [X21]
	105 Move X1, [X23]
	106 Move W10, [X8+304]
	107 Move W9, [X1+304]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X8, [X8+200]
	110 Add X8, X8, X9
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X8, [X21+16]
	114 Compare X8, 0
	115 JumpIfEqual {173}
	116 Move X0, [X8+16]
	117 Compare X0, 0
	118 JumpIfEqual {171}
	119 Move X1, X20
	120 Move X2, X31
	121 Call String.Equals, X0, X1
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {54}
	126 Move X20, X31
	127 Move X21, X31
	128 Move X20, X31
	129 Move X21, X31
	130 Move X22, 0xA9F000
	131 Move X22, [X22+3584]
	132 Move X0, X19
	133 Move X1, [X22]
	134 Call 0x1C17E00
	135 Compare X0, 0
	136 JumpIfEqual {159}
	137 Move X8, [X0]
	138 Move X1, [X22]
	139 Move X19, X0
	140 NotImplemented "Instruction LDRH not yet implemented."
	141 Compare X9, 0
	142 JumpIfEqual {149}
	143 Move X10, [X8+176]
	144 Add X10, X10, 8
	145 NotImplemented "Instruction LDUR not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Subtract X9, X9, 1
	148 Add X10, X10, 16
	149 Move X0, X19
	150 Move W2, W31
	151 Call 0x1C5D788
	152 NotImplemented "Instruction LDRSW not yet implemented."
	153 Add X8, X8, X9
	154 Add X0, X8, 312
	155 Move X8, [X0]
	156 Move X1, [X0+8]
	157 Move X0, X19
	158 NotImplemented "Instruction BLR not yet implemented."
	159 Compare X20, 0
	160 JumpIfNotEqual {194}
	161 Move X0, X21
	162 Move X20, [X31+32]
	163 Move X19, [X31+40]
	164 Move X22, [X31+16]
	165 Move X21, [X31+24]
	166 Move X30, [X31+48]
	167 Move X23, [X31+56]
	168 Return X0
	169 Move X0, X21
	170 Call 0x1C181E0
	171 Call 0x1C17F20
	172 Call 0x1C17F20
	173 Call 0x1C17F20
	174 Call 0x1C17F20
	175 Move X0, 0xAA4000
	176 Move X0, [X0+1320]
	177 Call 0x1C17D08
	178 Call 0x1C17F10
	179 Move X19, X0
	180 Move X0, 0xACC000
	181 Move X0, [X0+3040]
	182 Call 0x1C17D08
	183 Move X1, X0
	184 Move X0, X19
	185 Move X2, X31
	186 Call ArgumentNullException..ctor, X0, X1
	187 Move X0, 0xAE8000
	188 Move X0, [X0+2768]
	189 Call 0x1C17D08
	190 Move X1, X0
	191 Move X0, X19
	192 Call 0x1C17DEC
	193 Call 0x1C17F20
	194 Move X0, X20
	195 Call 0x1C17F18
	196 Move X21, X0
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Move X0, X21
	199 Call 0x3EB2AD0
	200 Move X20, [X0]
	201 Call 0x3EB2AE0
	202 Move X20, X31
	203 Move X21, X0
	204 Move X22, 0xA9F000
	205 Move X22, [X22+3584]
	206 Move X1, [X22]
	207 Move X0, X19
	208 Call 0x1C17E00
	209 Move X19, X0
	210 Compare X0, 0
	211 JumpIfEqual {233}
	212 Move X8, [X19]
	213 Move X1, [X22]
	214 NotImplemented "Instruction LDRH not yet implemented."
	215 Compare X9, 0
	216 JumpIfEqual {223}
	217 Move X10, [X8+176]
	218 Add X10, X10, 8
	219 NotImplemented "Instruction LDUR not yet implemented."
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Subtract X9, X9, 1
	222 Add X10, X10, 16
	223 Move X0, X19
	224 Move W2, W31
	225 Call 0x1C5D788
	226 NotImplemented "Instruction LDRSW not yet implemented."
	227 Add X8, X8, X9
	228 Add X0, X8, 312
	229 Move X8, [X0]
	230 Move X1, [X0+8]
	231 Move X0, X19
	232 NotImplemented "Instruction BLR not yet implemented."
	233 Compare X20, 0
	234 JumpIfNotEqual {237}
	235 Move X0, X21
	236 Call 0x1D2D690
	237 Move X0, X20
	238 Call 0x1C17F18
	239 Call 0x1991590

Method: System.Int32 Add(System.Security.Cryptography.X509Certificates.X509Extension extension)

Disassembly:
	0x03653274 MOVZ W1, 0x1
	0x03653278 BLR X9
	0x0365327C MOV X1, X0
	0x03653280 MOV X0, X19
	0x03653284 MOV X2, X31
	0x03653288 BL 0x32338A8
	0x0365328C LDR X1, [X25]
	0x03653290 MOV X0, X19
	0x03653294 MOV X2, X31
	0x03653298 BL 0x32333E0
	0x0365329C ADRP X8, 0xAE9000
	0x036532A0 LDR X8, [X8 + 0xA70]
	0x036532A4 LDR X1, [X8]
	0x036532A8 MOV X0, X19
	0x036532AC MOV X2, X31
	0x036532B0 BL 0x32333E0
	0x036532B4 LDR X0, [X21 + 0x18]
	0x036532B8 CBZ X0, 0x3653538
	0x036532BC LDR X8, [X0]
	0x036532C0 LDP X9, X2, [X8 + 0x188]
	0x036532C4 MOVZ W1, 0x1
	0x036532C8 BLR X9
	0x036532CC MOV X1, X0
	0x036532D0 MOV X0, X19
	0x036532D4 MOV X2, X31
	0x036532D8 BL 0x32333E0
	0x036532DC MOV X0, X20
	0x036532E0 BL 0x3652024

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {14}
	005 Move X0, [X0+16]
	006 Compare X0, 0
	007 JumpIfEqual {32}
	008 Move X8, [X0]
	009 Move X3, [X8+776]
	010 Move X2, [X8+784]
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X3
	014 Move X0, 0xAA6000
	015 Move X0, [X0+1320]
	016 Call 0x1C17D08
	017 Call 0x1C17F10
	018 Move X19, X0
	019 Move X0, 0xACF000
	020 Move X0, [X0+592]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Move X2, X31
	025 Call ArgumentNullException..ctor, X0, X1
	026 Move X0, 0xAEA000
	027 Move X0, [X0+2536]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Call 0x1C17DEC
	032 Call 0x1C17F20

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x0365EAD8 MOV X2, X31
	0x0365EADC BL 0x3EB1B00
	0x0365EAE0 MOV X19, X0
	0x0365EAE4 BL 0x3EB1AE0
	0x0365EAE8 MOV X0, X19
	0x0365EAEC BL 0x1D2C690
	0x0365EAF0 BL 0x1990590
	0x0365EAF4 STR X30, [X31 - 0x40]!
	0x0365EAF8 STP X24, X23, [X31 + 0x10]
	0x0365EAFC STP X22, X21, [X31 + 0x20]
	0x0365EB00 STP X20, X19, [X31 + 0x30]
	0x0365EB04 ADRP X22, 0xD82000
	0x0365EB08 LDRB W8, [X22 + 0x6A0]
	0x0365EB0C MOV W21, W2
	0x0365EB10 MOV X20, X1
	0x0365EB14 MOV X19, X0
	0x0365EB18 TBNZ X8, 0x0, 0x365EB54
	0x0365EB1C ADRP X0, 0xA95000
	0x0365EB20 LDR X0, [X0 + 0x618]
	0x0365EB24 BL 0x1C16CF4
	0x0365EB28 ADRP X0, 0xADE000
	0x0365EB2C LDR X0, [X0 + 0x7E0]
	0x0365EB30 BL 0x1C16CF4
	0x0365EB34 ADRP X0, 0xAC5000
	0x0365EB38 LDR X0, [X0 + 0x650]
	0x0365EB3C BL 0x1C16CF4
	0x0365EB40 ADRP X0, 0xADB000
	0x0365EB44 LDR X0, [X0 + 0x910]
	0x0365EB48 BL 0x1C16CF4
	0x0365EB4C MOVZ W8, 0x1
	0x0365EB50 STRB W8, [X22 + 0x6A0]
	0x0365EB54 MOV X0, X19
	0x0365EB58 MOV X1, X31
	0x0365EB5C BL 0x33BDD8C
	0x0365EB60 CBZ X20, 0x365EC28
	0x0365EB64 LDR X8, [X20 + 0x18]
	0x0365EB68 CBZ X8, 0x365EC5C
	0x0365EB6C ADRP X8, 0xADE000
	0x0365EB70 LDR X8, [X8 + 0x7E0]
	0x0365EB74 ADRP X22, 0xAC5000
	0x0365EB78 ADRP X23, 0xADB000
	0x0365EB7C LDR X0, [X8]
	0x0365EB80 LDR X22, [X22 + 0x650]
	0x0365EB84 LDR X23, [X23 + 0x910]
	0x0365EB88 BL 0x1C16F10
	0x0365EB8C LDR X24, [X22]
	0x0365EB90 LDR X23, [X23]
	0x0365EB94 MOV X1, X31
	0x0365EB98 MOV X22, X0
	0x0365EB9C BL 0x33BDD8C
	0x0365EBA0 AND W8, W21, 0x1
	0x0365EBA4 MOV X0, X20
	0x0365EBA8 MOV X1, X31
	0x0365EBAC STP X24, X23, [X22 + 0x10]
	0x0365EBB0 STR X22, [X19 + 0x10]
	0x0365EBB4 STRB W8, [X19 + 0x20]
	0x0365EBB8 BL 0x33A01F0
	0x0365EBBC CBZ X0, 0x365EC00
	0x0365EBC0 ADRP X22, 0xA95000
	0x0365EBC4 LDR X22, [X22 + 0x618]
	0x0365EBC8 MOV X20, X0
	0x0365EBCC LDR X21, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {31}
	007 Move W19, W2
	008 Move TEMP, X2
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {43}
	012 Move X20, X1
	013 Move X21, X0
	014 Move X0, X1
	015 Move X1, X31
	016 Call Array.get_Length, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, [X21+16]
	019 Compare X0, 0
	020 JumpIfEqual {68}
	021 Move X8, [X0]
	022 Move X1, X20
	023 Move W2, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X4, [X8+872]
	027 Move X3, [X8+880]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 CallNoReturn X4
	031 Move X0, 0xA9B000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xABE000
	037 Move X0, [X0+1600]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xA9E000
	044 Move X0, [X0+1888]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xADF000
	049 Move X0, [X0+2728]
	050 Move X0, 0xA9E000
	051 Move X0, [X0+1888]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xADF000
	056 Move X0, [X0+3400]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Move X2, X31
	061 Call ArgumentOutOfRangeException..ctor, X0, X1
	062 Move X0, 0xADF000
	063 Move X0, [X0+3408]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Call 0x1C17DEC
	068 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator GetEnumerator()

Disassembly:
	0x03654794 ADD W1, W9, 0x1
	0x03654798 BL 0x1C16D6C
	0x0365479C LDR W4, [X21 + 0x18]
	0x036547A0 MOV X23, X0
	0x036547A4 MOVZ W3, 0x1
	0x036547A8 MOV X0, X21
	0x036547AC MOV W1, W31
	0x036547B0 MOV X2, X23
	0x036547B4 MOV X5, X31
	0x036547B8 BL 0x33A8A9C
	0x036547BC LDR X0, [X27]
	0x036547C0 BL 0x1C16F10
	0x036547C4 MOVZ W1, 0x3
	0x036547C8 MOV X2, X23
	0x036547CC MOV X3, X31
	0x036547D0 MOV X21, X0
	0x036547D4 BL 0x31E7A14
	0x036547D8 MOV X0, X22
	0x036547DC MOV X1, X21
	0x036547E0 MOV X2, X31
	0x036547E4 BL 0x31E7ED0
	0x036547E8 MOV X0, X31
	0x036547EC BL 0x325D0E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD8D000
	006 Move X20, 0xAE9000
	007 Move W8, [X21+1674]
	008 Move X20, [X20+2704]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAE9000
	015 Move X0, [X0+2704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1674], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call X509ExtensionEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0365EC14 LDP X20, X19, [X31 + 0x30]
	0x0365EC18 LDP X22, X21, [X31 + 0x20]
	0x0365EC1C LDP X24, X23, [X31 + 0x10]
	0x0365EC20 LDR X30, [X31], #0x40
	0x0365EC24 B 0x364E404
	0x0365EC28 ADRP X0, 0xA9A000
	0x0365EC2C LDR X0, [X0 + 0x528]
	0x0365EC30 BL 0x1C16D08
	0x0365EC34 BL 0x1C16F10
	0x0365EC38 MOV X19, X0
	0x0365EC3C ADRP X0, 0xADE000
	0x0365EC40 LDR X0, [X0 + 0xDA8]
	0x0365EC44 BL 0x1C16D08
	0x0365EC48 MOV X1, X0
	0x0365EC4C MOV X0, X19
	0x0365EC50 MOV X2, X31
	0x0365EC54 BL 0x330E100
	0x0365EC58 B 0x365EC8C
	0x0365EC5C ADRP X0, 0xA9D000
	0x0365EC60 LDR X0, [X0 + 0x578]
	0x0365EC64 BL 0x1C16D08
	0x0365EC68 BL 0x1C16F10
	0x0365EC6C MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD83000
	006 Move X20, 0xADF000
	007 Move W8, [X21+1675]
	008 Move X20, [X20+2704]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xADF000
	015 Move X0, [X0+2704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1675], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call X509ExtensionEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Void .cctor()

Disassembly:
	0x0365EC70 ADRP X0, 0xADE000
	0x0365EC74 LDR X0, [X0 + 0xDA8]
	0x0365EC78 BL 0x1C16D08
	0x0365EC7C MOV X1, X0
	0x0365EC80 MOV X0, X19
	0x0365EC84 MOV X2, X31
	0x0365EC88 BL 0x3314A68
	0x0365EC8C ADRP X0, 0xADE000
	0x0365EC90 LDR X0, [X0 + 0xDB0]
	0x0365EC94 BL 0x1C16D08
	0x0365EC98 MOV X1, X0
	0x0365EC9C MOV X0, X19
	0x0365ECA0 BL 0x1C16DEC
	0x0365ECA4 STP X30, X21, [X31 - 0x20]!
	0x0365ECA8 STP X20, X19, [X31 + 0x10]
	0x0365ECAC ADRP X20, 0xD82000
	0x0365ECB0 ADRP X21, 0xAC2000
	0x0365ECB4 LDRB W8, [X20 + 0x6A6]
	0x0365ECB8 LDR X21, [X21 + 0xB98]
	0x0365ECBC MOV X19, X0
	0x0365ECC0 TBNZ X8, 0x0, 0x365ECD8
	0x0365ECC4 ADRP X0, 0xAC2000
	0x0365ECC8 LDR X0, [X0 + 0xB98]
	0x0365ECCC BL 0x1C16CF4
	0x0365ECD0 MOVZ W8, 0x1
	0x0365ECD4 STRB W8, [X20 + 0x6A6]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD83000
	006 Move X21, 0xA96000
	007 Move X19, 0xADF000
	008 Move W8, [X20+1676]
	009 Move X21, [X21+1560]
	010 Move X19, [X19+2520]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xA96000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xADF000
	019 Move X0, [X0+2520]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1676], W8
	023 Move X0, [X21]
	024 Move W1, W31
	025 Call 0x1C17D6C
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], X0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

