Type: System.Security.Cryptography.X509Certificates.X509ChainImplMono

Method: System.Void .ctor(System.Boolean useMachineContext)

Disassembly:
	0x0365A7B0 B 0x365A7D8
	0x0365A7B4 ADRP X8, 0xAE2000
	0x0365A7B8 LDR X8, [X8 + 0xC50]
	0x0365A7BC MOVN X9, 0x0
	0x0365A7C0 ADD X0, X31, 0x8
	0x0365A7C4 MOV X1, X31
	0x0365A7C8 LDR X8, [X8]
	0x0365A7CC STR W21, [X31 + 0x18]
	0x0365A7D0 STP X8, X9, [X31 + 0x8]
	0x0365A7D4 BL 0x33B162C
	0x0365A7D8 STR X0, [X20 + 0x10]
	0x0365A7DC STR W19, [X20 + 0x18]
	0x0365A7E0 LDP X20, X19, [X31 + 0x40]
	0x0365A7E4 LDP X22, X21, [X31 + 0x30]
	0x0365A7E8 LDR X30, [X31 + 0x20]
	0x0365A7EC ADD X31, X31, 0x50
	0x0365A7F0 RET
	0x0365A7F4 ADRP X0, 0xAA1000
	0x0365A7F8 LDR X0, [X0 + 0x578]
	0x0365A7FC BL 0x1C16D08
	0x0365A800 BL 0x1C16F10
	0x0365A804 MOV X19, X0
	0x0365A808 ADRP X0, 0xAC7000
	0x0365A80C LDR X0, [X0 + 0x2C0]
	0x0365A810 B 0x365A830
	0x0365A814 ADRP X0, 0xAA1000
	0x0365A818 LDR X0, [X0 + 0x578]
	0x0365A81C BL 0x1C16D08
	0x0365A820 BL 0x1C16F10
	0x0365A824 MOV X19, X0
	0x0365A828 ADRP X0, 0xAE2000
	0x0365A82C LDR X0, [X0 + 0xC58]
	0x0365A830 BL 0x1C16D08
	0x0365A834 MOV X1, X0
	0x0365A838 MOV X0, X19
	0x0365A83C MOV X2, X31
	0x0365A840 BL 0x3314A68
	0x0365A844 ADRP X0, 0xAE2000
	0x0365A848 LDR X0, [X0 + 0xC60]
	0x0365A84C BL 0x1C16D08
	0x0365A850 MOV X1, X0
	0x0365A854 MOV X0, X19
	0x0365A858 BL 0x1C16DEC
	0x0365A85C SUB X31, X31, 0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD87000
	006 Move W8, [X21+1634]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xAE0000
	014 Move X0, [X0+928]
	015 Call 0x1C17CF4
	016 Move X0, 0xAE0000
	017 Move X0, [X0+840]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1634], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Compare X19, 0
	025 JumpIfEqual {52}
	026 Move X8, 0xAE0000
	027 Move X8, [X8+928]
	028 And W31, W20, 1
	029 Move W9, 1
	030 NotImplemented "Instruction CINC not yet implemented."
	031 Move [X19+16], W9
	032 Move X0, [X8]
	033 Move X21, 0xAE0000
	034 Move X21, [X21+840]
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Call X509ChainElementCollection..ctor, X0
	038 Move [X19+24], X20
	039 Move X0, [X21]
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X20, X0
	043 Call Object..ctor, X0
	044 Move X0, X20
	045 Call X509ChainPolicy.Reset, X0
	046 Move [X19+32], X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 
	052 Call 0x1C17F20

Method: System.Boolean get_IsValid()

Disassembly:
	0x0365A87C MOV X20, X0
	0x0365A880 TBNZ X8, 0x0, 0x365A8BC

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection get_ChainElements()

Disassembly:
	0x0365A884 ADRP X0, 0xA99000
	0x0365A888 LDR X0, [X0 + 0xE00]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Security.Cryptography.X509Certificates.X509ChainPolicy get_ChainPolicy()

Disassembly:
	0x0365A88C BL 0x1C16CF4
	0x0365A890 ADRP X0, 0xADF000

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void AddStatus(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags error)

Disassembly:
	0x0365A894 LDR X0, [X0 + 0x2A0]

ISIL:
	001 Return 

Method: System.Boolean Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365A898 BL 0x1C16CF4
	0x0365A89C ADRP X0, 0xAC7000
	0x0365A8A0 LDR X0, [X0 + 0x2B8]
	0x0365A8A4 BL 0x1C16CF4
	0x0365A8A8 ADRP X0, 0xAE2000
	0x0365A8AC LDR X0, [X0 + 0xC68]
	0x0365A8B0 BL 0x1C16CF4
	0x0365A8B4 MOVZ W8, 0x1
	0x0365A8B8 STRB W8, [X21 + 0x69D]
	0x0365A8BC MOV X22, X20
	0x0365A8C0 LDR X0, [X22 + 0x10]!
	0x0365A8C4 MOV X1, X31
	0x0365A8C8 BL 0x32277A8
	0x0365A8CC TBNZ X0, 0x0, 0x365AAAC
	0x0365A8D0 ADRP X8, 0xAE2000
	0x0365A8D4 LDR X8, [X8 + 0xC68]
	0x0365A8D8 LDR X0, [X20 + 0x10]
	0x0365A8DC ADRP X21, 0xAC7000
	0x0365A8E0 MOV X2, X31
	0x0365A8E4 LDR X1, [X8]
	0x0365A8E8 LDR X21, [X21 + 0x2B8]
	0x0365A8EC BL 0x321BA08
	0x0365A8F0 ANDS W31, W0, 0x1
	0x0365A8F4 LDR W8, [X20 + 0x18]
	0x0365A8F8 CSEL X9, X21, X22, NE
	0x0365A8FC LDR X21, [X9]
	0x0365A900 CMP W8, 0x1
	0x0365A904 B.NE 0x365A914
	0x0365A908 MOV X0, X31
	0x0365A90C BL 0x31F8934
	0x0365A910 B 0x365A91C
	0x0365A914 MOV X0, X31
	0x0365A918 BL 0x31F89FC
	0x0365A91C CBZ X0, 0x365AAA8
	0x0365A920 ANDS W31, W19, 0x4
	0x0365A924 CSET W2, EQ
	0x0365A928 MOV X1, X21
	0x0365A92C MOV X3, X31
	0x0365A930 BL 0x31F8B68
	0x0365A934 STR X0, [X20 + 0x30]
	0x0365A938 CBZ X0, 0x365AAC4
	0x0365A93C MOV X1, X31
	0x0365A940 STR W19, [X20 + 0x28]
	0x0365A944 BL 0x31F7F54
	0x0365A948 CBZ X0, 0x365AAA8
	0x0365A94C ADRP X24, 0xA99000
	0x0365A950 LDR X24, [X24 + 0xE00]
	0x0365A954 MOV X1, X31
	0x0365A958 BL 0x31EDE74
	0x0365A95C MOV X19, X0
	0x0365A960 CBZ X0, 0x365AB54
	0x0365A964 ADRP X25, 0xADF000
	0x0365A968 LDR X25, [X25 + 0x2A0]
	0x0365A96C MOV X0, X19
	0x0365A970 MOV X1, X31
	0x0365A974 BL 0x31EE254
	0x0365A978 TBZ X0, 0x0, 0x365AA0C
	0x0365A97C MOV X0, X19
	0x0365A980 MOV X1, X31
	0x0365A984 BL 0x31EDECC
	0x0365A988 MOV X22, X0
	0x0365A98C CBZ X0, 0x365AAA0
	0x0365A990 LDR X8, [X22]
	0x0365A994 LDP X9, X1, [X8 + 0x1F8]
	0x0365A998 MOV X0, X22
	0x0365A99C BLR X9
	0x0365A9A0 MOV X23, X0
	0x0365A9A4 LDR X0, [X25]
	0x0365A9A8 BL 0x1C16F10
	0x0365A9AC MOV X21, X0
	0x0365A9B0 MOV X1, X23
	0x0365A9B4 BL 0x36519E4
	0x0365A9B8 CBZ X21, 0x365AAA4
	0x0365A9BC MOV X0, X21
	0x0365A9C0 BL 0x3652024
	0x0365A9C4 LDR X8, [X22]
	0x0365A9C8 MOV X23, X0
	0x0365A9CC LDP X9, X1, [X8 + 0x1D8]
	0x0365A9D0 MOV X0, X22
	0x0365A9D4 BLR X9
	0x0365A9D8 MOV X1, X0
	0x0365A9DC CBZ X23, 0x365AA98
	0x0365A9E0 LDR X8, [X23]
	0x0365A9E4 LDR X9, [X8 + 0x2B8]
	0x0365A9E8 LDR X2, [X8 + 0x2C0]
	0x0365A9EC MOV X0, X23
	0x0365A9F0 BLR X9
	0x0365A9F4 MOV X0, X20
	0x0365A9F8 BL 0x365A41C
	0x0365A9FC CBZ X0, 0x365AA9C
	0x0365AA00 MOV X1, X21
	0x0365AA04 BL 0x3653D5C
	0x0365AA08 B 0x365A96C
	0x0365AA0C MOV X20, X31
	0x0365AA10 LDR X1, [X24]
	0x0365AA14 MOV X0, X19
	0x0365AA18 BL 0x1C16E00
	0x0365AA1C CBZ X0, 0x365AA7C
	0x0365AA20 LDR X8, [X0]
	0x0365AA24 LDR X1, [X24]
	0x0365AA28 MOV X19, X0
	0x0365AA2C LDRH W9, [X8 + 0x12E]
	0x0365AA30 CBZ X9, 0x365AA54
	0x0365AA34 LDR X10, [X8 + 0xB0]
	0x0365AA38 ADD X10, X10, 0x8
	0x0365AA3C LDUR X11, [X10 - 0x8]
	0x0365AA40 CMP X11, X1
	0x0365AA44 B.EQ 0x365AA64
	0x0365AA48 SUBS X9, X9, 0x1
	0x0365AA4C ADD X10, X10, 0x10
	0x0365AA50 B.NE 0x365AA3C
	0x0365AA54 MOV X0, X19
	0x0365AA58 MOV W2, W31
	0x0365AA5C BL 0x1C5C788
	0x0365AA60 B 0x365AA70
	0x0365AA64 LDRSW X9, [X10]
	0x0365AA68 ADD X8, X8, X9, 0x4, LSL
	0x0365AA6C ADD X0, X8, 0x138
	0x0365AA70 LDP X8, X1, [X0]
	0x0365AA74 MOV X0, X19
	0x0365AA78 BLR X8
	0x0365AA7C CBNZ X20, 0x365AB58
	0x0365AA80 LDP X20, X19, [X31 + 0x40]
	0x0365AA84 LDP X22, X21, [X31 + 0x30]
	0x0365AA88 LDP X24, X23, [X31 + 0x20]
	0x0365AA8C LDP X30, X25, [X31 + 0x10]
	0x0365AA90 ADD X31, X31, 0x50
	0x0365AA94 RET
	0x0365AA98 BL 0x1C16F20
	0x0365AA9C BL 0x1C16F20
	0x0365AAA0 BL 0x1C16F20
	0x0365AAA4 BL 0x1C16F20
	0x0365AAA8 BL 0x1C16F20
	0x0365AAAC ADRP X0, 0xAE2000
	0x0365AAB0 LDR X0, [X0 + 0xC70]
	0x0365AAB4 BL 0x1C16D08
	0x0365AAB8 MOV X1, X31
	0x0365AABC BL 0x320A160
	0x0365AAC0 B 0x365AB18
	0x0365AAC4 ADRP X0, 0xA99000
	0x0365AAC8 LDR X0, [X0 + 0x9D0]
	0x0365AACC BL 0x1C16D08
	0x0365AAD0 MOVZ W1, 0x1
	0x0365AAD4 BL 0x1C16D6C
	0x0365AAD8 LDR X19, [X22]
	0x0365AADC MOV X20, X0
	0x0365AAE0 BL 0x19903C0
	0x0365AAE4 MOV X0, X20
	0x0365AAE8 MOV X1, X19
	0x0365AAEC BL 0x19980B4
	0x0365AAF0 MOV X0, X20
	0x0365AAF4 MOV X1, X31
	0x0365AAF8 MOV X2, X19
	0x0365AAFC BL 0x1993444
	0x0365AB00 ADRP X0, 0xAE2000
	0x0365AB04 LDR X0, [X0 + 0xC78]
	0x0365AB08 BL 0x1C16D08
	0x0365AB0C MOV X1, X20
	0x0365AB10 MOV X2, X31
	0x0365AB14 BL 0x320A164
	0x0365AB18 MOV X19, X0
	0x0365AB1C ADRP X0, 0xAC6000
	0x0365AB20 LDR X0, [X0 + 0xCE0]
	0x0365AB24 BL 0x1C16D08
	0x0365AB28 BL 0x1C16F10
	0x0365AB2C MOV X1, X19
	0x0365AB30 MOV X2, X31
	0x0365AB34 MOV X20, X0
	0x0365AB38 BL 0x3252170
	0x0365AB3C ADRP X0, 0xAE2000
	0x0365AB40 LDR X0, [X0 + 0xC80]
	0x0365AB44 BL 0x1C16D08
	0x0365AB48 MOV X1, X0
	0x0365AB4C MOV X0, X20
	0x0365AB50 BL 0x1C16DEC
	0x0365AB54 BL 0x1C16F20
	0x0365AB58 MOV X0, X20
	0x0365AB5C BL 0x1C16F18
	0x0365AB60 B 0x365AB90
	0x0365AB64 B 0x365AB90
	0x0365AB68 B 0x365AB90
	0x0365AB6C B 0x365AB90
	0x0365AB70 B 0x365AB90
	0x0365AB74 B 0x365AB90
	0x0365AB78 B 0x365AB90
	0x0365AB7C B 0x365AB90
	0x0365AB80 B 0x365AB90
	0x0365AB84 B 0x365AB90
	0x0365AB88 B 0x365AB90
	0x0365AB8C B 0x365AB90
	0x0365AB90 CMP W1, 0x1
	0x0365AB94 B.NE 0x365ABA8
	0x0365AB98 BL 0x3EB1AD0
	0x0365AB9C LDR X20, [X0]
	0x0365ABA0 BL 0x3EB1AE0
	0x0365ABA4 B 0x365AA10
	0x0365ABA8 STR X0, [X31 + 0x8]
	0x0365ABAC MOV X20, X31
	0x0365ABB0 B 0x365ABB8
	0x0365ABB4 STR X0, [X31 + 0x8]
	0x0365ABB8 LDR X1, [X24]
	0x0365ABBC MOV X0, X19
	0x0365ABC0 BL 0x1C16E00
	0x0365ABC4 MOV X19, X0
	0x0365ABC8 CBZ X0, 0x365AC24
	0x0365ABCC LDR X8, [X19]
	0x0365ABD0 LDR X1, [X24]
	0x0365ABD4 LDRH W9, [X8 + 0x12E]
	0x0365ABD8 CBZ X9, 0x365ABFC
	0x0365ABDC LDR X10, [X8 + 0xB0]
	0x0365ABE0 ADD X10, X10, 0x8
	0x0365ABE4 LDUR X11, [X10 - 0x8]
	0x0365ABE8 CMP X11, X1
	0x0365ABEC B.EQ 0x365AC0C
	0x0365ABF0 SUBS X9, X9, 0x1
	0x0365ABF4 ADD X10, X10, 0x10
	0x0365ABF8 B.NE 0x365ABE4
	0x0365ABFC MOV X0, X19
	0x0365AC00 MOV W2, W31
	0x0365AC04 BL 0x1C5C788
	0x0365AC08 B 0x365AC18
	0x0365AC0C LDRSW X9, [X10]
	0x0365AC10 ADD X8, X8, X9, 0x4, LSL
	0x0365AC14 ADD X0, X8, 0x138
	0x0365AC18 LDP X8, X1, [X0]
	0x0365AC1C MOV X0, X19
	0x0365AC20 BLR X8
	0x0365AC24 CBNZ X20, 0x365AC30
	0x0365AC28 LDR X0, [X31 + 0x8]
	0x0365AC2C BL 0x1D2C690
	0x0365AC30 MOV X0, X20
	0x0365AC34 BL 0x1C16F18
	0x0365AC38 BL 0x1990590
	0x0365AC3C STP X30, X21, [X31 - 0x20]!
	0x0365AC40 STP X20, X19, [X31 + 0x10]
	0x0365AC44 ADRP X20, 0xD86000
	0x0365AC48 LDRB W8, [X20 + 0x66A]
	0x0365AC4C MOV X19, X0
	0x0365AC50 TBNZ X8, 0x0, 0x365AC68
	0x0365AC54 ADRP X0, 0xAE2000
	0x0365AC58 LDR X0, [X0 + 0xAF0]
	0x0365AC5C BL 0x1C16CF4
	0x0365AC60 MOVZ W8, 0x1
	0x0365AC64 STRB W8, [X20 + 0x66A]
	0x0365AC68 LDR X0, [X19 + 0x80]
	0x0365AC6C CBNZ X0, 0x365ACF4
	0x0365AC70 LDR X8, [X19]
	0x0365AC74 MOV X0, X19
	0x0365AC78 LDP X9, X1, [X8 + 0x1A8]
	0x0365AC7C BLR X9
	0x0365AC80 CBZ X0, 0x365AD00
	0x0365AC84 BL 0x365AD04
	0x0365AC88 ADRP X8, 0xAE2000
	0x0365AC8C LDR X8, [X8 + 0xAF0]
	0x0365AC90 MOV X21, X0
	0x0365AC94 LDR X8, [X8]
	0x0365AC98 MOV X0, X8
	0x0365AC9C BL 0x1C16F10
	0x0365ACA0 MOV X1, X31
	0x0365ACA4 MOV X20, X0
	0x0365ACA8 BL 0x3351EFC
	0x0365ACAC MOV X0, X20
	0x0365ACB0 MOV X1, X21
	0x0365ACB4 BL 0x3653BC8
	0x0365ACB8 MOV X0, X19
	0x0365ACBC STR X20, [X19 + 0x80]
	0x0365ACC0 BL 0x365A188
	0x0365ACC4 CBZ X20, 0x365AD00
	0x0365ACC8 MOV X1, X0
	0x0365ACCC MOV X0, X20
	0x0365ACD0 BL 0x3653BC8
	0x0365ACD4 LDR X20, [X19 + 0x80]
	0x0365ACD8 MOV X0, X19
	0x0365ACDC BL 0x365A49C
	0x0365ACE0 CBZ X20, 0x365AD00
	0x0365ACE4 MOV X1, X0
	0x0365ACE8 MOV X0, X20
	0x0365ACEC BL 0x3653BC8
	0x0365ACF0 LDR X0, [X19 + 0x80]
	0x0365ACF4 LDP X20, X19, [X31 + 0x10]
	0x0365ACF8 LDP X30, X21, [X31], #0x20
	0x0365ACFC RET
	0x0365AD00 BL 0x1C16F20
	0x0365AD04 STR X30, [X31 - 0x40]!
	0x0365AD08 STP X24, X23, [X31 + 0x10]
	0x0365AD0C STP X22, X21, [X31 + 0x20]
	0x0365AD10 STP X20, X19, [X31 + 0x30]
	0x0365AD14 ADRP X20, 0xD86000
	0x0365AD18 LDRB W8, [X20 + 0x67B]
	0x0365AD1C MOV X19, X0
	0x0365AD20 TBNZ X8, 0x0, 0x365AD50
	0x0365AD24 ADRP X0, 0xA99000
	0x0365AD28 LDR X0, [X0 + 0xE00]
	0x0365AD2C BL 0x1C16CF4
	0x0365AD30 ADRP X0, 0xAE2000
	0x0365AD34 LDR X0, [X0 + 0xAF0]
	0x0365AD38 BL 0x1C16CF4
	0x0365AD3C ADRP X0, 0xADF000
	0x0365AD40 LDR X0, [X0 + 0x2A0]
	0x0365AD44 BL 0x1C16CF4
	0x0365AD48 MOVZ W8, 0x1
	0x0365AD4C STRB W8, [X20 + 0x67B]
	0x0365AD50 LDR X8, [X19 + 0x28]
	0x0365AD54 CBNZ X8, 0x365AE6C
	0x0365AD58 ADRP X8, 0xAE2000
	0x0365AD5C LDR X8, [X8 + 0xAF0]
	0x0365AD60 LDR X0, [X8]
	0x0365AD64 BL 0x1C16F10
	0x0365AD68 MOV X1, X31
	0x0365AD6C MOV X20, X0
	0x0365AD70 BL 0x3351EFC
	0x0365AD74 LDR X0, [X19 + 0x20]
	0x0365AD78 STR X20, [X19 + 0x28]
	0x0365AD7C CBZ X0, 0x365AE68
	0x0365AD80 BL 0x3657BAC
	0x0365AD84 MOV X21, X0
	0x0365AD88 CBZ X0, 0x365AE88
	0x0365AD8C ADRP X24, 0xADF000
	0x0365AD90 LDR X24, [X24 + 0x2A0]
	0x0365AD94 MOV X0, X21
	0x0365AD98 BL 0x3657FB0
	0x0365AD9C TBZ X0, 0x0, 0x365ADDC
	0x0365ADA0 MOV X0, X21
	0x0365ADA4 BL 0x3657CD8
	0x0365ADA8 MOV X23, X0
	0x0365ADAC LDR X20, [X19 + 0x28]
	0x0365ADB0 LDR X0, [X24]
	0x0365ADB4 BL 0x1C16F10
	0x0365ADB8 MOV X22, X0
	0x0365ADBC MOV X1, X23
	0x0365ADC0 MOV X2, X31
	0x0365ADC4 BL 0x326B404
	0x0365ADC8 CBZ X20, 0x365AE84
	0x0365ADCC MOV X0, X20
	0x0365ADD0 MOV X1, X22
	0x0365ADD4 BL 0x3653D5C
	0x0365ADD8 B 0x365AD94
	0x0365ADDC MOV X20, X31
	0x0365ADE0 MOVZ W22, 0x3
	0x0365ADE4 ADRP X23, 0xA99000
	0x0365ADE8 LDR X23, [X23 + 0xE00]
	0x0365ADEC MOV X0, X21
	0x0365ADF0 LDR X1, [X23]
	0x0365ADF4 BL 0x1C16E00
	0x0365ADF8 CBZ X0, 0x365AE58
	0x0365ADFC LDR X8, [X0]
	0x0365AE00 LDR X1, [X23]
	0x0365AE04 MOV X21, X0
	0x0365AE08 LDRH W9, [X8 + 0x12E]
	0x0365AE0C CBZ X9, 0x365AE30
	0x0365AE10 LDR X10, [X8 + 0xB0]
	0x0365AE14 ADD X10, X10, 0x8
	0x0365AE18 LDUR X11, [X10 - 0x8]
	0x0365AE1C CMP X11, X1
	0x0365AE20 B.EQ 0x365AE40
	0x0365AE24 SUBS X9, X9, 0x1
	0x0365AE28 ADD X10, X10, 0x10
	0x0365AE2C B.NE 0x365AE18
	0x0365AE30 MOV X0, X21
	0x0365AE34 MOV W2, W31
	0x0365AE38 BL 0x1C5C788
	0x0365AE3C B 0x365AE4C
	0x0365AE40 LDRSW X9, [X10]
	0x0365AE44 ADD X8, X8, X9, 0x4, LSL
	0x0365AE48 ADD X0, X8, 0x138
	0x0365AE4C LDP X8, X1, [X0]
	0x0365AE50 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X21, 0xD87000
	014 Move W8, [X21+1635]
	015 Move X20, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0xAC7000
	022 Move X0, [X0+2976]
	023 Call 0x1C17CF4
	024 Move X0, 0xA9A000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move X0, 0xAE3000
	028 Move X0, [X0+3088]
	029 Call 0x1C17CF4
	030 Move X0, 0xAE3000
	031 Move X0, [X0+3128]
	032 Call 0x1C17CF4
	033 Move X0, 0xAC5000
	034 Move X0, [X0+2064]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+1635], W8
	038 Compare X20, 0
	039 JumpIfEqual {339}
	040 Move X8, [X19]
	041 Move X0, X19
	042 Move X9, [X8+472]
	043 Move X1, [X8+480]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X0, X19
	046 Move X1, X20
	047 Call X509ChainImplMono.BuildChainFrom, X0, X1
	048 Move W21, W0
	049 Move X0, X19
	050 Move W1, W21
	051 Call X509ChainImplMono.ValidateChain, X0, X1
	052 Move X8, 0xAC7000
	053 Move X8, [X8+2976]
	054 Move X0, [X8]
	055 Call 0x1C17F10
	056 Move X1, X31
	057 Move X20, X0
	058 Call ArrayList..ctor, X0
	059 Move X0, [X19+24]
	060 Compare X0, 0
	061 JumpIfEqual {335}
	062 Call X509ChainElementCollection.GetEnumerator, X0
	063 Compare X0, 0
	064 JumpIfEqual {335}
	065 Move X23, 0xAC5000
	066 Move X23, [X23+2064]
	067 Move X22, X0
	068 Call X509ChainElementEnumerator.MoveNext, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {114}
	073 Move W24, W31
	074 Move X0, X22
	075 Call X509ChainElementEnumerator.get_Current, X0
	076 Compare X0, 0
	077 JumpIfEqual {335}
	078 Move X25, [X0+24]
	079 Compare X25, 0
	080 JumpIfEqual {335}
	081 Move X8, [X25+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X26, X31
	084 And X8, X8, 0
	085 Add X27, X25, 40
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction BICS not yet implemented."
	089 Move X8, [X27]
	090 Move X0, [X23]
	091 Add X1, X31, 0
	092 Move [X31], X28
	093 Move [X31+8], X8
	094 Call 0x1C17E04
	095 Compare X20, 0
	096 JumpIfEqual {335}
	097 Move X8, [X20]
	098 Move X1, X0
	099 Move X0, X20
	100 Move X9, [X8+776]
	101 Move X2, [X8+784]
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Or W24, W24, W28
	104 Move W8, [X25+24]
	105 Add X26, X26, 1
	106 Add X27, X27, 16
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X0, X22
	109 Call X509ChainElementEnumerator.MoveNext, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {74}
	114 Compare W21, 0
	115 JumpIfEqual {134}
	116 Move W0, W21
	117 Call X509ChainStatus.GetInformation, X0
	118 Move X8, [X23]
	119 Move [X31+8], X0
	120 Add X1, X31, 0
	121 Move [X31], W21
	122 Move [X31+4], W31
	123 Move X0, X8
	124 Call 0x1C17E04
	125 Compare X20, 0
	126 JumpIfEqual {335}
	127 Move X8, [X20]
	128 Move X2, X0
	129 Move X0, X20
	130 Move W1, W31
	131 Move X9, [X8+936]
	132 Move X3, [X8+944]
	133 NotImplemented "Instruction BLR not yet implemented."
	134 Move X8, 0xA9A000
	135 Move X8, [X8+1728]
	136 Move X0, [X8]
	137 Move X8, 0xAE3000
	138 Move X8, [X8+3128]
	139 Move W9, [X0+224]
	140 Move X21, [X8]
	141 Compare W9, 0
	142 JumpIfNotEqual {144}
	143 Call 0x1C17DFC
	144 Move X0, X21
	145 Move X1, X31
	146 Call Type.GetTypeFromHandle, X0
	147 Compare X20, 0
	148 JumpIfEqual {335}
	149 Move X8, [X20]
	150 Move X1, X0
	151 Move X0, X20
	152 Move X9, [X8+1032]
	153 Move X2, [X8+1040]
	154 NotImplemented "Instruction BLR not yet implemented."
	155 Compare X0, 0
	156 JumpIfEqual {357}
	157 Move X22, 0xAE3000
	158 Move X22, [X22+3088]
	159 Move X20, X0
	160 Move X21, [X22]
	161 Move X1, X21
	162 Call 0x1C17E00
	163 Compare X0, 0
	164 JumpIfEqual {336}
	165 Move [X19+40], X0
	166 Move X21, [X22]
	167 Move X0, X20
	168 Move X1, X21
	169 Call 0x1C17E00
	170 Compare X0, 0
	171 JumpIfEqual {336}
	172 Move X8, [X19+40]
	173 Compare X8, 0
	174 JumpIfEqual {335}
	175 Move X8, [X8+24]
	176 Compare X8, 0
	177 JumpIfEqual {319}
	178 Move X8, [X19]
	179 Move X0, X19
	180 Move X9, [X8+424]
	181 Move X1, [X8+432]
	182 NotImplemented "Instruction BLR not yet implemented."
	183 Compare X0, 0
	184 JumpIfEqual {335}
	185 Move W8, [X0+64]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move X20, [X19+40]
	188 Compare X20, 0
	189 JumpIfEqual {335}
	190 Move X8, [X20+24]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X21, X31
	193 And X8, X8, 0
	194 Add X22, X20, 32
	195 Move W23, 0x2000000
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move W8, [X22]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 NotImplemented "Instruction CMP not yet implemented."
	201 NotImplemented "Instruction CMP not yet implemented."
	202 NotImplemented "Instruction CMP not yet implemented."
	203 NotImplemented "Instruction CMP not yet implemented."
	204 NotImplemented "Instruction CMP not yet implemented."
	205 NotImplemented "Instruction CMP not yet implemented."
	206 NotImplemented "Instruction CMP not yet implemented."
	207 NotImplemented "Instruction CMP not yet implemented."
	208 NotImplemented "Instruction CMP not yet implemented."
	209 NotImplemented "Instruction CMP not yet implemented."
	210 NotImplemented "Instruction CMP not yet implemented."
	211 NotImplemented "Instruction CMP not yet implemented."
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X8, [X19]
	214 Move X0, X19
	215 Move X9, [X8+424]
	216 Move X1, [X8+432]
	217 NotImplemented "Instruction BLR not yet implemented."
	218 Compare X0, 0
	219 JumpIfEqual {335}
	220 Move W8, [X0+64]
	221 Move TEMP, X8
	222 And TEMP, TEMP, 16
	223 Compare TEMP, 16
	224 JumpIfEqual {315}
	225 NotImplemented "Instruction CMP not yet implemented."
	226 NotImplemented "Instruction CMP not yet implemented."
	227 NotImplemented "Instruction CMP not yet implemented."
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move X8, [X19]
	230 Move X0, X19
	231 Move X9, [X8+424]
	232 Move X1, [X8+432]
	233 NotImplemented "Instruction BLR not yet implemented."
	234 Compare X0, 0
	235 JumpIfEqual {335}
	236 Move W8, [X0+64]
	237 Move TEMP, X8
	238 And TEMP, TEMP, 128
	239 Compare TEMP, 128
	240 JumpIfEqual {315}
	241 NotImplemented "Instruction CMP not yet implemented."
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Move X8, [X19]
	244 Move X0, X19
	245 Move X9, [X8+424]
	246 Move X1, [X8+432]
	247 NotImplemented "Instruction BLR not yet implemented."
	248 Compare X0, 0
	249 JumpIfEqual {335}
	250 Move W8, [X0+64]
	251 Move TEMP, X8
	252 And TEMP, TEMP, 64
	253 Compare TEMP, 64
	254 JumpIfEqual {315}
	255 Move X8, [X19]
	256 Move X0, X19
	257 Move X9, [X8+424]
	258 Move X1, [X8+432]
	259 NotImplemented "Instruction BLR not yet implemented."
	260 Compare X0, 0
	261 JumpIfEqual {335}
	262 Move W8, [X0+64]
	263 Move TEMP, X8
	264 And TEMP, TEMP, 32
	265 Compare TEMP, 32
	266 JumpIfEqual {315}
	267 Move X8, [X19]
	268 Move X0, X19
	269 Move X9, [X8+424]
	270 Move X1, [X8+432]
	271 NotImplemented "Instruction BLR not yet implemented."
	272 Compare X0, 0
	273 JumpIfEqual {335}
	274 Move W8, [X0+64]
	275 Move TEMP, X8
	276 And TEMP, TEMP, 4
	277 Compare TEMP, 4
	278 JumpIfEqual {315}
	279 Move X8, [X19]
	280 Move X0, X19
	281 Move X9, [X8+424]
	282 Move X1, [X8+432]
	283 NotImplemented "Instruction BLR not yet implemented."
	284 Compare X0, 0
	285 JumpIfEqual {335}
	286 Move W8, [X0+64]
	287 Move TEMP, X8
	288 And TEMP, TEMP, 1
	289 Compare TEMP, 1
	290 JumpIfEqual {315}
	291 Move X8, [X19]
	292 Move X0, X19
	293 Move X9, [X8+424]
	294 Move X1, [X8+432]
	295 NotImplemented "Instruction BLR not yet implemented."
	296 Compare X0, 0
	297 JumpIfEqual {335}
	298 Move W8, [X0+64]
	299 Move TEMP, X8
	300 And TEMP, TEMP, 8
	301 Compare TEMP, 8
	302 JumpIfEqual {315}
	303 Move X8, [X19]
	304 Move X0, X19
	305 Move X9, [X8+424]
	306 Move X1, [X8+432]
	307 NotImplemented "Instruction BLR not yet implemented."
	308 Compare X0, 0
	309 JumpIfEqual {335}
	310 Move W8, [X0+64]
	311 Move TEMP, X8
	312 And TEMP, TEMP, 2
	313 Compare TEMP, 2
	314 JumpIfNotEqual {333}
	315 Move W8, [X20+24]
	316 Add X21, X21, 1
	317 Add X22, X22, 16
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Move W0, 1
	320 Move X20, [X31+96]
	321 Move X19, [X31+104]
	322 Move X22, [X31+80]
	323 Move X21, [X31+88]
	324 Move X24, [X31+64]
	325 Move X23, [X31+72]
	326 Move X26, [X31+48]
	327 Move X25, [X31+56]
	328 Move X28, [X31+32]
	329 Move X27, [X31+40]
	330 Move X30, [X31+16]
	331 Add X31, X31, 112
	332 Return X0
	333 Move W0, W31
	334 Call 0x1C17F28
	335 Call 0x1C17F20
	336 Move X0, X20
	337 Move X1, X21
	338 Call 0x1C181E0
	339 Move X0, 0xAA2000
	340 Move X0, [X0+1400]
	341 Call 0x1C17D08
	342 Call 0x1C17F10
	343 Move X19, X0
	344 Move X0, 0xAE0000
	345 Move X0, [X0+224]
	346 Call 0x1C17D08
	347 Move X1, X0
	348 Move X0, X19
	349 Move X2, X31
	350 Call ArgumentException..ctor, X0, X1
	351 Move X0, 0xAE3000
	352 Move X0, [X0+3136]
	353 Call 0x1C17D08
	354 Move X1, X0
	355 Move X0, X19
	356 Call 0x1C17DEC
	357 Move [X19+40], X31
	358 Call 0x1C17F20
	359 Move X19, X0
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Move X0, X19
	362 Call 0x3EB2AD0
	363 Move X19, X0
	364 Move X0, 0xAC7000
	365 Move X0, [X0+3296]
	366 Call 0x1C17D08
	367 Move X8, [X19]
	368 Move X1, [X8]
	369 Call 0x1C18270
	370 Move TEMP, X0
	371 And TEMP, TEMP, 1
	372 Compare TEMP, 1
	373 JumpIfNotEqual {395}
	374 Move X19, [X19]
	375 Call 0x3EB2AE0
	376 Move X0, 0xAA2000
	377 Move X0, [X0+1400]
	378 Call 0x1C17D08
	379 Call 0x1C17F10
	380 Move X20, X0
	381 Move X0, 0xAE0000
	382 Move X0, [X0+224]
	383 Call 0x1C17D08
	384 Move X1, X0
	385 Move X0, X20
	386 Move X2, X19
	387 Move X3, X31
	388 Call ArgumentException..ctor, X0, X1, X2
	389 Move X0, 0xAE3000
	390 Move X0, [X0+3136]
	391 Call 0x1C17D08
	392 Move X1, X0
	393 Move X0, X20
	394 Call 0x1C17DEC
	395 Move W0, 8
	396 Call 0x3EB2AF0
	397 Move X8, [X19]
	398 Move [X0], X8
	399 Move X1, 0x85B000
	400 Add X1, X1, 3672
	401 Move X2, X31
	402 Call 0x3EB2B00
	403 Move X19, X0
	404 Call 0x3EB2AE0
	405 Move X0, X19
	406 Call 0x1D2D690
	407 Call 0x1991590

Method: System.Void Reset()

Disassembly:
	0x0365B070 RET
	0x0365B074 BL 0x1C16F20
	0x0365B078 STR X30, [X31 - 0x20]!
	0x0365B07C STP X20, X19, [X31 + 0x10]
	0x0365B080 ADRP X20, 0xD85000
	0x0365B084 LDRB W8, [X20 + 0x66D]
	0x0365B088 MOV X19, X1
	0x0365B08C TBNZ X8, 0x0, 0x365B0A4
	0x0365B090 ADRP X0, 0xAE1000
	0x0365B094 LDR X0, [X0 + 0xBF8]
	0x0365B098 BL 0x1C16CF4
	0x0365B09C MOVZ W8, 0x1
	0x0365B0A0 STRB W8, [X20 + 0x66D]
	0x0365B0A4 MOV X1, X19
	0x0365B0A8 BL 0x365B410
	0x0365B0AC TBZ X0, 0x0, 0x365B114
	0x0365B0B0 CBZ X19, 0x365B13C
	0x0365B0B4 MOV X0, X19
	0x0365B0B8 BL 0x36527A4
	0x0365B0BC CMP W0, 0x3
	0x0365B0C0 B.LT 0x365B10C
	0x0365B0C4 MOV X1, X19
	0x0365B0C8 BL 0x365B360
	0x0365B0CC MOV X1, X31
	0x0365B0D0 MOV X20, X0
	0x0365B0D4 BL 0x32277A8
	0x0365B0D8 TBNZ X0, 0x0, 0x365B10C
	0x0365B0DC ADRP X8, 0xAE1000
	0x0365B0E0 LDR X8, [X8 + 0xBF8]
	0x0365B0E4 LDR X0, [X8]
	0x0365B0E8 LDR W8, [X0 + 0xE0]
	0x0365B0EC CBNZ W8, 0x365B0F4
	0x0365B0F0 BL 0x1C16DFC
	0x0365B0F4 MOV X0, X19
	0x0365B0F8 BL 0x365B2CC
	0x0365B0FC MOV X1, X31
	0x0365B100 MOV X19, X0
	0x0365B104 BL 0x32277A8
	0x0365B108 TBZ X0, 0x0, 0x365B124
	0x0365B10C MOVZ W0, 0x1
	0x0365B110 B 0x365B118
	0x0365B114 MOV W0, W31
	0x0365B118 LDP X20, X19, [X31 + 0x10]
	0x0365B11C LDR X30, [X31], #0x20
	0x0365B120 RET
	0x0365B124 MOV X0, X19
	0x0365B128 MOV X1, X20
	0x0365B12C LDP X20, X19, [X31 + 0x10]
	0x0365B130 MOV X2, X31
	0x0365B134 LDR X30, [X31], #0x20
	0x0365B138 B 0x321BA08
	0x0365B13C BL 0x1C16F20
	0x0365B140 STR X30, [X31 - 0x30]!
	0x0365B144 STP X22, X21, [X31 + 0x10]
	0x0365B148 STP X20, X19, [X31 + 0x20]
	0x0365B14C ADRP X22, 0xD85000
	0x0365B150 LDRB W8, [X22 + 0x66B]
	0x0365B154 MOV X19, X2
	0x0365B158 MOV X20, X1
	0x0365B15C MOV X21, X0
	0x0365B160 TBNZ X8, 0x0, 0x365B184
	0x0365B164 ADRP X0, 0xA99000
	0x0365B168 LDR X0, [X0 + 0x9F0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+40]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfEqual {11}
	007 Move X8, [X8+24]
	008 Compare X8, 0
	009 JumpIfEqual {11}
	010 Move [X19+40], X31
	011 Move X8, [X19+24]
	012 Compare X8, 0
	013 JumpIfEqual {79}
	014 Move X0, [X8+16]
	015 Compare X0, 0
	016 JumpIfEqual {79}
	017 Move X8, [X0]
	018 Move X9, [X8+664]
	019 Move X1, [X8+672]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, [X19+24]
	023 Compare X8, 0
	024 JumpIfEqual {79}
	025 Move X0, [X8+16]
	026 Compare X0, 0
	027 JumpIfEqual {79}
	028 Move X8, [X0]
	029 Move X9, [X8+808]
	030 Move X1, [X8+816]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X8, [X19+112]
	033 Compare X8, 0
	034 JumpIfEqual {42}
	035 Move X0, [X8+32]
	036 Move [X8+48], X31
	037 Compare X0, 0
	038 JumpIfEqual {41}
	039 Move X1, X31
	040 Call CollectionBase.Clear, X0
	041 Move [X19+112], X31
	042 Move X8, [X19+96]
	043 Compare X8, 0
	044 JumpIfEqual {52}
	045 Move X0, [X8+32]
	046 Move [X8+48], X31
	047 Compare X0, 0
	048 JumpIfEqual {51}
	049 Move X1, X31
	050 Call CollectionBase.Clear, X0
	051 Move [X19+96], X31
	052 Move X8, [X19+120]
	053 Compare X8, 0
	054 JumpIfEqual {62}
	055 Move X0, [X8+32]
	056 Move [X8+48], X31
	057 Compare X0, 0
	058 JumpIfEqual {61}
	059 Move X1, X31
	060 Call CollectionBase.Clear, X0
	061 Move [X19+120], X31
	062 Move X8, [X19+104]
	063 Compare X8, 0
	064 JumpIfEqual {72}
	065 Move X0, [X8+32]
	066 Move [X8+48], X31
	067 Compare X0, 0
	068 JumpIfEqual {71}
	069 Move X1, X31
	070 Call CollectionBase.Clear, X0
	071 Move [X19+104], X31
	072 NotImplemented "Instruction MOVI not yet implemented."
	073 Move [X19+128], X31
	074 Move [X19+64], V0
	075 Move [X19+72], V0
	076 Move X30, [X31+16]
	077 Move X19, [X31+24]
	078 Return 
	079 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_Roots()

Disassembly:
	0x0365B188 MOV X0, X19
	0x0365B18C MOV X1, X31
	0x0365B190 BL 0x3352004
	0x0365B194 CBZ W0, 0x365B1B8
	0x0365B198 CMP W0, 0x1
	0x0365B19C B.NE 0x365B1C0
	0x0365B1A0 MOV X0, X19
	0x0365B1A4 LDP X20, X19, [X31 + 0x20]
	0x0365B1A8 LDP X22, X21, [X31 + 0x10]
	0x0365B1AC MOV W1, W31
	0x0365B1B0 LDR X30, [X31], #0x30
	0x0365B1B4 B 0x3653C38
	0x0365B1B8 MOV X22, X31
	0x0365B1BC B 0x365B26C
	0x0365B1C0 LDR X8, [X21]
	0x0365B1C4 MOV X0, X21
	0x0365B1C8 LDP X9, X1, [X8 + 0x1A8]
	0x0365B1CC BLR X9
	0x0365B1D0 CBZ X0, 0x365B2C8
	0x0365B1D4 ADRP X9, 0xA99000
	0x0365B1D8 LDR X8, [X0 + 0x48]
	0x0365B1DC LDR X9, [X9 + 0x9F0]
	0x0365B1E0 ADD X1, X31, 0x8
	0x0365B1E4 STR X8, [X31 + 0x8]
	0x0365B1E8 LDR X0, [X9]
	0x0365B1EC BL 0x1C16E04
	0x0365B1F0 MOV X2, X0
	0x0365B1F4 MOVZ W1, 0x6
	0x0365B1F8 MOV X0, X19
	0x0365B1FC MOV W3, W31
	0x0365B200 BL 0x3654990
	0x0365B204 CBZ X0, 0x365B2C8
	0x0365B208 MOV X1, X31
	0x0365B20C MOV X21, X0
	0x0365B210 BL 0x3352004
	0x0365B214 CBZ W0, 0x365B22C
	0x0365B218 CMP W0, 0x1
	0x0365B21C B.NE 0x365B228
	0x0365B220 MOV X0, X21
	0x0365B224 B 0x365B260
	0x0365B228 MOV X19, X21
	0x0365B22C ADRP X8, 0xAE1000
	0x0365B230 LDR X8, [X8 + 0xBF8]
	0x0365B234 LDR X0, [X8]
	0x0365B238 LDR W8, [X0 + 0xE0]
	0x0365B23C CBNZ W8, 0x365B244
	0x0365B240 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD86000
	006 Move W8, [X20+1636]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAE2000
	013 Move X0, [X0+2800]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1636], W8
	017 Move X20, [X19+80]
	018 Compare X20, 0
	019 JumpIfNotEqual {52}
	020 Move X8, 0xAE2000
	021 Move X8, [X8+2800]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call CollectionBase..ctor, X0
	027 Move X0, X19
	028 Call X509ChainImplMono.get_LMRootStore, X0
	029 Move W8, [X19+16]
	030 Move X21, X0
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X19
	033 Call X509ChainImplMono.get_UserRootStore, X0
	034 Compare X0, 0
	035 JumpIfEqual {58}
	036 Call X509Store.get_Certificates, X0
	037 Compare X20, 0
	038 JumpIfEqual {58}
	039 Move X1, X0
	040 Move X0, X20
	041 Call X509Certificate2Collection.AddRange, X0, X1
	042 Compare X21, 0
	043 JumpIfEqual {58}
	044 Move X0, X21
	045 Call X509Store.get_Certificates, X0
	046 Compare X20, 0
	047 JumpIfEqual {58}
	048 Move X1, X0
	049 Move X0, X20
	050 Call X509Certificate2Collection.AddRange, X0, X1
	051 Move [X19+80], X20
	052 Move X0, X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return X0
	058 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_CertificateAuthorities()

Disassembly:
	0x0365B49C LDR X0, [X19 + 0x18]
	0x0365B4A0 CBZ X0, 0x365B6FC
	0x0365B4A4 MOV W1, W22
	0x0365B4A8 BL 0x3658F78
	0x0365B4AC CBZ X0, 0x365B6FC
	0x0365B4B0 LDR X21, [X0 + 0x10]
	0x0365B4B4 MOV X20, X0
	0x0365B4B8 MOV X0, X21
	0x0365B4BC BL 0x365BB60
	0x0365B4C0 LDR X8, [X19 + 0x18]
	0x0365B4C4 CBZ X8, 0x365B6FC
	0x0365B4C8 MOV X23, X0
	0x0365B4CC LDR X0, [X8 + 0x10]
	0x0365B4D0 CBZ X0, 0x365B6FC
	0x0365B4D4 LDR X8, [X0]
	0x0365B4D8 LDR X9, [X8 + 0x298]
	0x0365B4DC LDR X1, [X8 + 0x2A0]
	0x0365B4E0 BLR X9
	0x0365B4E4 SUB W8, W0, 0x1
	0x0365B4E8 CMP W8, W22
	0x0365B4EC B.EQ 0x365B570
	0x0365B4F0 CBZ X23, 0x365B6FC
	0x0365B4F4 LDR X8, [X23]
	0x0365B4F8 MOV X0, X23
	0x0365B4FC LDP X9, X1, [X8 + 0x198]
	0x0365B500 BLR X9
	0x0365B504 ADRP X8, 0xAC5000
	0x0365B508 LDR X8, [X8 + 0xF48]
	0x0365B50C MOV X2, X31
	0x0365B510 LDR X1, [X8]
	0x0365B514 BL 0x321BA08
	0x0365B518 TBZ X0, 0x0, 0x365B570
	0x0365B51C LDR X8, [X23]
	0x0365B520 MOV X0, X23
	0x0365B524 LDP X9, X1, [X8 + 0x1A8]
	0x0365B528 BLR X9
	0x0365B52C CBNZ X0, 0x365B570
	0x0365B530 LDR X0, [X19 + 0x18]
	0x0365B534 CBZ X0, 0x365B6FC
	0x0365B538 ADD W1, W22, 0x1
	0x0365B53C BL 0x3658F78
	0x0365B540 CBZ X0, 0x365B6FC
	0x0365B544 LDR X0, [X0 + 0x10]
	0x0365B548 BL 0x365BB60
	0x0365B54C CBZ X0, 0x365B6FC
	0x0365B550 LDR X8, [X0]
	0x0365B554 LDP X9, X1, [X8 + 0x1A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD86000
	006 Move W8, [X20+1637]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAE2000
	013 Move X0, [X0+2800]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1637], W8
	017 Move X20, [X19+88]
	018 Compare X20, 0
	019 JumpIfNotEqual {52}
	020 Move X8, 0xAE2000
	021 Move X8, [X8+2800]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call CollectionBase..ctor, X0
	027 Move X0, X19
	028 Call X509ChainImplMono.get_LMCAStore, X0
	029 Move W8, [X19+16]
	030 Move X21, X0
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X19
	033 Call X509ChainImplMono.get_UserCAStore, X0
	034 Compare X0, 0
	035 JumpIfEqual {58}
	036 Call X509Store.get_Certificates, X0
	037 Compare X20, 0
	038 JumpIfEqual {58}
	039 Move X1, X0
	040 Move X0, X20
	041 Call X509Certificate2Collection.AddRange, X0, X1
	042 Compare X21, 0
	043 JumpIfEqual {58}
	044 Move X0, X21
	045 Call X509Store.get_Certificates, X0
	046 Compare X20, 0
	047 JumpIfEqual {58}
	048 Move X1, X0
	049 Move X0, X20
	050 Call X509Certificate2Collection.AddRange, X0, X1
	051 Move [X19+88], X20
	052 Move X0, X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return X0
	058 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509Store get_LMRootStore()

Disassembly:
	0x0365B244 MOV X0, X20
	0x0365B248 BL 0x365B2CC
	0x0365B24C MOV X1, X31
	0x0365B250 MOV X20, X0
	0x0365B254 BL 0x32277A8
	0x0365B258 TBZ X0, 0x0, 0x365B280
	0x0365B25C MOV X0, X19
	0x0365B260 MOV W1, W31
	0x0365B264 BL 0x3653C38
	0x0365B268 MOV X22, X0
	0x0365B26C MOV X0, X22
	0x0365B270 LDP X20, X19, [X31 + 0x20]
	0x0365B274 LDP X22, X21, [X31 + 0x10]
	0x0365B278 LDR X30, [X31], #0x30
	0x0365B27C RET
	0x0365B280 MOV X0, X19
	0x0365B284 BL 0x3655B3C
	0x0365B288 CBZ X0, 0x365B2C8
	0x0365B28C MOV X21, X0
	0x0365B290 MOV X0, X21
	0x0365B294 BL 0x3655DC4
	0x0365B298 TBZ X0, 0x0, 0x365B25C
	0x0365B29C MOV X0, X21
	0x0365B2A0 BL 0x3655CD4
	0x0365B2A4 MOV X1, X0
	0x0365B2A8 MOV X22, X0
	0x0365B2AC BL 0x365B360
	0x0365B2B0 MOV X1, X0
	0x0365B2B4 MOV X0, X20
	0x0365B2B8 MOV X2, X31
	0x0365B2BC BL 0x321BA08
	0x0365B2C0 TBZ X0, 0x0, 0x365B290
	0x0365B2C4 B 0x365B26C
	0x0365B2C8 BL 0x1C16F20
	0x0365B2CC STR X30, [X31 - 0x20]!
	0x0365B2D0 STP X20, X19, [X31 + 0x10]
	0x0365B2D4 ADRP X20, 0xD85000
	0x0365B2D8 LDRB W8, [X20 + 0x672]
	0x0365B2DC MOV X19, X0
	0x0365B2E0 TBNZ X8, 0x0, 0x365B304
	0x0365B2E4 ADRP X0, 0xAE1000
	0x0365B2E8 LDR X0, [X0 + 0xBF8]
	0x0365B2EC BL 0x1C16CF4
	0x0365B2F0 ADRP X0, 0xAE1000
	0x0365B2F4 LDR X0, [X0 + 0xC88]
	0x0365B2F8 BL 0x1C16CF4
	0x0365B2FC MOVZ W8, 0x1
	0x0365B300 STRB W8, [X20 + 0x672]
	0x0365B304 MOV X0, X19
	0x0365B308 BL 0x365BB60
	0x0365B30C CBZ X0, 0x365B35C
	0x0365B310 LDR X0, [X0 + 0xB8]
	0x0365B314 CBZ X0, 0x365B35C
	0x0365B318 ADRP X8, 0xAE1000
	0x0365B31C LDR X8, [X8 + 0xC88]
	0x0365B320 ADRP X19, 0xAE1000
	0x0365B324 MOV X2, X31
	0x0365B328 LDR X1, [X8]
	0x0365B32C LDR X19, [X19 + 0xBF8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD86000
	005 Move W8, [X20+1638]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAE2000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1638], W8
	016 Move X8, [X19+96]
	017 Compare X8, 0
	018 JumpIfNotEqual {33}
	019 Move X8, 0xAE2000
	020 Move X8, [X8+3144]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move W1, 6
	024 Move W2, 2
	025 Move X20, X0
	026 Call X509Store..ctor, X0, X1, X2
	027 Move [X19+96], X20
	028 Compare X20, 0
	029 JumpIfEqual {38}
	030 Move W1, 4
	031 Move X0, X20
	032 Call X509Store.Open, X0, X1
	033 Move X0, [X19+96]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, X0
	041 Move X0, X20
	042 Call 0x3EB2AD0
	043 Move X20, X0
	044 Move X0, 0xA9F000
	045 Move X0, [X0+3264]
	046 Call 0x1C17D08
	047 Move X8, [X20]
	048 Move X1, [X8]
	049 Call 0x1C18270
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Call 0x3EB2AE0
	055 Move W0, 8
	056 Call 0x3EB2AF0
	057 Move X8, [X20]
	058 Move [X0], X8
	059 Move X1, 0x85A000
	060 Add X1, X1, 3672
	061 Move X2, X31
	062 Call 0x3EB2B00
	063 Move X20, X0
	064 Call 0x3EB2AE0
	065 Move X0, X20
	066 Call 0x1D2D690
	067 Call 0x1991590

Method: System.Security.Cryptography.X509Certificates.X509Store get_UserRootStore()

Disassembly:
	0x0365B330 BL 0x31F7450
	0x0365B334 LDR X8, [X19]
	0x0365B338 MOV X19, X0
	0x0365B33C LDR W9, [X8 + 0xE0]
	0x0365B340 CBNZ W9, 0x365B34C
	0x0365B344 MOV X0, X8
	0x0365B348 BL 0x1C16DFC
	0x0365B34C MOV X0, X19
	0x0365B350 LDP X20, X19, [X31 + 0x10]
	0x0365B354 LDR X30, [X31], #0x20
	0x0365B358 B 0x365BD48
	0x0365B35C BL 0x1C16F20
	0x0365B360 STR X30, [X31 - 0x20]!
	0x0365B364 STP X20, X19, [X31 + 0x10]
	0x0365B368 ADRP X20, 0xD85000
	0x0365B36C LDRB W8, [X20 + 0x671]
	0x0365B370 MOV X19, X1
	0x0365B374 TBNZ X8, 0x0, 0x365B3A4
	0x0365B378 ADRP X0, 0xA9A000
	0x0365B37C LDR X0, [X0 + 0x278]
	0x0365B380 BL 0x1C16CF4
	0x0365B384 ADRP X0, 0xAE1000
	0x0365B388 LDR X0, [X0 + 0x878]
	0x0365B38C BL 0x1C16CF4
	0x0365B390 ADRP X0, 0xAC8000
	0x0365B394 LDR X0, [X0 + 0x650]
	0x0365B398 BL 0x1C16CF4
	0x0365B39C MOVZ W8, 0x1
	0x0365B3A0 STRB W8, [X20 + 0x671]
	0x0365B3A4 CBZ X19, 0x365B40C
	0x0365B3A8 MOV X0, X19
	0x0365B3AC BL 0x3651BFC
	0x0365B3B0 CBZ X0, 0x365B40C
	0x0365B3B4 ADRP X8, 0xAC8000
	0x0365B3B8 LDR X8, [X8 + 0x650]
	0x0365B3BC LDR X1, [X8]
	0x0365B3C0 BL 0x36541C8
	0x0365B3C4 CBZ X0, 0x365B3E0
	0x0365B3C8 ADRP X8, 0xAE1000
	0x0365B3CC LDR X8, [X8 + 0x878]
	0x0365B3D0 LDR X9, [X0]
	0x0365B3D4 LDR X8, [X8]
	0x0365B3D8 CMP X9, X8
	0x0365B3DC B.EQ 0x365B400
	0x0365B3E0 ADRP X8, 0xA9A000
	0x0365B3E4 LDR X8, [X8 + 0x278]
	0x0365B3E8 LDP X20, X19, [X31 + 0x10]
	0x0365B3EC LDR X8, [X8]
	0x0365B3F0 LDR X8, [X8 + 0xB8]
	0x0365B3F4 LDR X0, [X8]
	0x0365B3F8 LDR X30, [X31], #0x20
	0x0365B3FC RET
	0x0365B400 LDP X20, X19, [X31 + 0x10]
	0x0365B404 LDR X30, [X31], #0x20
	0x0365B408 B 0x365490C
	0x0365B40C BL 0x1C16F20
	0x0365B410 STR X30, [X31 - 0x20]!
	0x0365B414 STP X20, X19, [X31 + 0x10]
	0x0365B418 CBZ X1, 0x365B454

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD86000
	005 Move W8, [X20+1639]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAE2000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1639], W8
	016 Move X8, [X19+112]
	017 Compare X8, 0
	018 JumpIfNotEqual {33}
	019 Move X8, 0xAE2000
	020 Move X8, [X8+3144]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move W1, 6
	024 Move W2, 1
	025 Move X20, X0
	026 Call X509Store..ctor, X0, X1, X2
	027 Move [X19+112], X20
	028 Compare X20, 0
	029 JumpIfEqual {38}
	030 Move W1, 4
	031 Move X0, X20
	032 Call X509Store.Open, X0, X1
	033 Move X0, [X19+112]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, X0
	041 Move X0, X20
	042 Call 0x3EB2AD0
	043 Move X20, X0
	044 Move X0, 0xA9F000
	045 Move X0, [X0+3264]
	046 Call 0x1C17D08
	047 Move X8, [X20]
	048 Move X1, [X8]
	049 Call 0x1C18270
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Call 0x3EB2AE0
	055 Move W0, 8
	056 Call 0x3EB2AF0
	057 Move X8, [X20]
	058 Move [X0], X8
	059 Move X1, 0x85A000
	060 Add X1, X1, 3672
	061 Move X2, X31
	062 Call 0x3EB2B00
	063 Move X20, X0
	064 Call 0x3EB2AE0
	065 Move X0, X20
	066 Call 0x1D2D690
	067 Call 0x1991590

Method: System.Security.Cryptography.X509Certificates.X509Store get_LMCAStore()

Disassembly:
	0x0365B558 BLR X9
	0x0365B55C LDR X8, [X23]
	0x0365B560 MOV X1, X0
	0x0365B564 MOV X0, X23
	0x0365B568 LDP X9, X2, [X8 + 0x1B8]
	0x0365B56C BLR X9
	0x0365B570 LDR X23, [X19 + 0x40]
	0x0365B574 CBZ X23, 0x365B5C4
	0x0365B578 MOV X1, X21
	0x0365B57C MOV X2, X23
	0x0365B580 BL 0x365BC28
	0x0365B584 TBNZ X0, 0x0, 0x365B5F4
	0x0365B588 LDR X8, [X19 + 0x18]
	0x0365B58C CBZ X8, 0x365B6FC
	0x0365B590 LDR X0, [X8 + 0x10]
	0x0365B594 CBZ X0, 0x365B6FC
	0x0365B598 LDR X8, [X0]
	0x0365B59C LDR X9, [X8 + 0x298]
	0x0365B5A0 LDR X1, [X8 + 0x2A0]
	0x0365B5A4 BLR X9
	0x0365B5A8 SUB W8, W0, 0x1
	0x0365B5AC CMP W8, W22
	0x0365B5B0 B.NE 0x365B5E8
	0x0365B5B4 MOV X1, X21
	0x0365B5B8 BL 0x365B410
	0x0365B5BC TBNZ X0, 0x0, 0x365B5E8
	0x0365B5C0 B 0x365B5F4
	0x0365B5C4 CBZ X21, 0x365B6FC
	0x0365B5C8 MOV X0, X21
	0x0365B5CC BL 0x3652514
	0x0365B5D0 CBZ X0, 0x365B6FC
	0x0365B5D4 BL 0x364FB6C
	0x0365B5D8 MOV X1, X21
	0x0365B5DC MOV X2, X0
	0x0365B5E0 BL 0x365BC28
	0x0365B5E4 TBNZ X0, 0x0, 0x365B5F4
	0x0365B5E8 LDR W8, [X20 + 0x28]
	0x0365B5EC ORR W8, W8, 0x8
	0x0365B5F0 STR W8, [X20 + 0x28]
	0x0365B5F4 LDR X8, [X19]
	0x0365B5F8 MOV X0, X19
	0x0365B5FC LDP X9, X1, [X8 + 0x1A8]
	0x0365B600 BLR X9
	0x0365B604 CBZ X0, 0x365B6FC
	0x0365B608 CBZ X21, 0x365B6FC
	0x0365B60C ADRP X25, 0xA99000
	0x0365B610 LDR X22, [X0 + 0x48]
	0x0365B614 LDR X25, [X25 + 0x9F0]
	0x0365B618 MOV X0, X21
	0x0365B61C MOV X1, X31
	0x0365B620 BL 0x326BF08
	0x0365B624 LDR X8, [X25]
	0x0365B628 MOV X24, X0
	0x0365B62C LDR W9, [X8 + 0xE0]
	0x0365B630 CBNZ W9, 0x365B63C
	0x0365B634 MOV X0, X8
	0x0365B638 BL 0x1C16DFC
	0x0365B63C MOV X0, X22
	0x0365B640 MOV X1, X24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD86000
	005 Move W8, [X20+1640]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAE2000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1640], W8
	016 Move X8, [X19+104]
	017 Compare X8, 0
	018 JumpIfNotEqual {33}
	019 Move X8, 0xAE2000
	020 Move X8, [X8+3144]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move W1, 3
	024 Move W2, 2
	025 Move X20, X0
	026 Call X509Store..ctor, X0, X1, X2
	027 Move [X19+104], X20
	028 Compare X20, 0
	029 JumpIfEqual {38}
	030 Move W1, 4
	031 Move X0, X20
	032 Call X509Store.Open, X0, X1
	033 Move X0, [X19+104]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, X0
	041 Move X0, X20
	042 Call 0x3EB2AD0
	043 Move X20, X0
	044 Move X0, 0xA9F000
	045 Move X0, [X0+3264]
	046 Call 0x1C17D08
	047 Move X8, [X20]
	048 Move X1, [X8]
	049 Call 0x1C18270
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Call 0x3EB2AE0
	055 Move W0, 8
	056 Call 0x3EB2AF0
	057 Move X8, [X20]
	058 Move [X0], X8
	059 Move X1, 0x85A000
	060 Add X1, X1, 3672
	061 Move X2, X31
	062 Call 0x3EB2B00
	063 Move X20, X0
	064 Call 0x3EB2AE0
	065 Move X0, X20
	066 Call 0x1D2D690
	067 Call 0x1991590

Method: System.Security.Cryptography.X509Certificates.X509Store get_UserCAStore()

Disassembly:
	0x0365B644 MOV X2, X31
	0x0365B648 BL 0x3363148
	0x0365B64C TBNZ X0, 0x0, 0x365B6A0
	0x0365B650 LDR X8, [X19]
	0x0365B654 MOV X0, X19
	0x0365B658 LDP X9, X1, [X8 + 0x1A8]
	0x0365B65C BLR X9
	0x0365B660 CBZ X0, 0x365B6FC
	0x0365B664 LDR X22, [X0 + 0x48]
	0x0365B668 MOV X0, X21
	0x0365B66C MOV X1, X31
	0x0365B670 BL 0x326C0EC
	0x0365B674 LDR X8, [X25]
	0x0365B678 MOV X24, X0
	0x0365B67C LDR W9, [X8 + 0xE0]
	0x0365B680 CBNZ W9, 0x365B68C
	0x0365B684 MOV X0, X8
	0x0365B688 BL 0x1C16DFC
	0x0365B68C MOV X0, X22
	0x0365B690 MOV X1, X24
	0x0365B694 MOV X2, X31
	0x0365B698 BL 0x3363220
	0x0365B69C TBZ X0, 0x0, 0x365B6AC
	0x0365B6A0 LDR W8, [X20 + 0x28]
	0x0365B6A4 ORR W8, W8, 0x1
	0x0365B6A8 STR W8, [X20 + 0x28]
	0x0365B6AC CBZ X23, 0x365B6E8
	0x0365B6B0 MOV X0, X21
	0x0365B6B4 BL 0x36524A8
	0x0365B6B8 LDR X1, [X19 + 0x38]
	0x0365B6BC BL 0x3650C20
	0x0365B6C0 TBNZ X0, 0x0, 0x365B6D0
	0x0365B6C4 LDR W8, [X20 + 0x28]
	0x0365B6C8 ORR W8, W8, 0x800
	0x0365B6CC STR W8, [X20 + 0x28]
	0x0365B6D0 MOV X1, X21
	0x0365B6D4 LDP X20, X19, [X31 + 0x30]
	0x0365B6D8 LDP X22, X21, [X31 + 0x20]
	0x0365B6DC LDP X24, X23, [X31 + 0x10]
	0x0365B6E0 LDP X30, X25, [X31], #0x40
	0x0365B6E4 B 0x365B410
	0x0365B6E8 LDP X20, X19, [X31 + 0x30]
	0x0365B6EC LDP X22, X21, [X31 + 0x20]
	0x0365B6F0 LDP X24, X23, [X31 + 0x10]
	0x0365B6F4 LDP X30, X25, [X31], #0x40
	0x0365B6F8 RET
	0x0365B6FC BL 0x1C16F20
	0x0365B700 STP X30, X23, [X31 - 0x30]!
	0x0365B704 STP X22, X21, [X31 + 0x10]
	0x0365B708 STP X20, X19, [X31 + 0x20]
	0x0365B70C ADRP X21, 0xD85000
	0x0365B710 LDRB W8, [X21 + 0x66F]
	0x0365B714 MOV W19, W1
	0x0365B718 MOV X20, X0
	0x0365B71C TBNZ X8, 0x0, 0x365B758
	0x0365B720 ADRP X0, 0xAE1000
	0x0365B724 LDR X0, [X0 + 0x860]
	0x0365B728 BL 0x1C16CF4
	0x0365B72C ADRP X0, 0xAE1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD86000
	005 Move W8, [X20+1641]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAE2000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1641], W8
	016 Move X8, [X19+120]
	017 Compare X8, 0
	018 JumpIfNotEqual {33}
	019 Move X8, 0xAE2000
	020 Move X8, [X8+3144]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move W1, 3
	024 Move W2, 1
	025 Move X20, X0
	026 Call X509Store..ctor, X0, X1, X2
	027 Move [X19+120], X20
	028 Compare X20, 0
	029 JumpIfEqual {38}
	030 Move W1, 4
	031 Move X0, X20
	032 Call X509Store.Open, X0, X1
	033 Move X0, [X19+120]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, X0
	041 Move X0, X20
	042 Call 0x3EB2AD0
	043 Move X20, X0
	044 Move X0, 0xA9F000
	045 Move X0, [X0+3264]
	046 Call 0x1C17D08
	047 Move X8, [X20]
	048 Move X1, [X8]
	049 Call 0x1C18270
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Call 0x3EB2AE0
	055 Move W0, 8
	056 Call 0x3EB2AF0
	057 Move X8, [X20]
	058 Move [X0], X8
	059 Move X1, 0x85A000
	060 Add X1, X1, 3672
	061 Move X2, X31
	062 Call 0x3EB2B00
	063 Move X20, X0
	064 Call 0x3EB2AE0
	065 Move X0, X20
	066 Call 0x1D2D690
	067 Call 0x1991590

Method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_CertificateCollection()

Disassembly:
	0x0365BC3C CBZ X0, 0x365BC5C
	0x0365BC40 MOV X1, X19
	0x0365BC44 MOV X2, X31
	0x0365BC48 LDP X30, X19, [X31], #0x10
	0x0365BC4C B 0x31F5EF0
	0x0365BC50 MOV W0, W31
	0x0365BC54 LDP X30, X19, [X31], #0x10
	0x0365BC58 RET
	0x0365BC5C BL 0x1C16F20
	0x0365BC60 STP X30, X23, [X31 - 0x30]!
	0x0365BC64 STP X22, X21, [X31 + 0x10]
	0x0365BC68 STP X20, X19, [X31 + 0x20]
	0x0365BC6C ADRP X20, 0xD85000
	0x0365BC70 LDRB W8, [X20 + 0x670]
	0x0365BC74 MOV X19, X1
	0x0365BC78 TBNZ X8, 0x0, 0x365BC9C
	0x0365BC7C ADRP X0, 0xAC8000
	0x0365BC80 LDR X0, [X0 + 0x770]
	0x0365BC84 BL 0x1C16CF4
	0x0365BC88 ADRP X0, 0xAC6000
	0x0365BC8C LDR X0, [X0 + 0x228]
	0x0365BC90 BL 0x1C16CF4
	0x0365BC94 MOVZ W8, 0x1
	0x0365BC98 STRB W8, [X20 + 0x670]
	0x0365BC9C CBZ X19, 0x365BD44
	0x0365BCA0 LDR X0, [X19 + 0x10]
	0x0365BCA4 CBZ X0, 0x365BD44
	0x0365BCA8 BL 0x3651BFC
	0x0365BCAC CBZ X0, 0x365BD44
	0x0365BCB0 BL 0x3653794
	0x0365BCB4 CBZ X0, 0x365BD44
	0x0365BCB8 MOV X20, X0
	0x0365BCBC BL 0x36538E0
	0x0365BCC0 TBZ X0, 0x0, 0x365BD34
	0x0365BCC4 ADRP X22, 0xAC8000
	0x0365BCC8 ADRP X23, 0xAC6000
	0x0365BCCC LDR X22, [X22 + 0x770]
	0x0365BCD0 LDR X23, [X23 + 0x228]
	0x0365BCD4 MOV X0, X20
	0x0365BCD8 BL 0x36537F0
	0x0365BCDC CBZ X0, 0x365BD44
	0x0365BCE0 LDRB W8, [X0 + 0x20]
	0x0365BCE4 CBZ W8, 0x365BD28
	0x0365BCE8 LDR X8, [X0 + 0x10]
	0x0365BCEC CBZ X8, 0x365BD44
	0x0365BCF0 LDR X21, [X8 + 0x10]
	0x0365BCF4 LDR X1, [X22]
	0x0365BCF8 MOV X2, X31
	0x0365BCFC MOV X0, X21
	0x0365BD00 BL 0x321BA08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD86000
	006 Move W8, [X20+1642]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAE2000
	013 Move X0, [X0+2800]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1642], W8
	017 Move X0, [X19+128]
	018 Compare X0, 0
	019 JumpIfNotEqual {57}
	020 Move X8, [X19]
	021 Move X0, X19
	022 Move X9, [X8+424]
	023 Move X1, [X8+432]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Compare X0, 0
	026 JumpIfEqual {62}
	027 Call X509ChainPolicy.get_ExtraStore, X0
	028 Move X8, 0xAE2000
	029 Move X8, [X8+2800]
	030 Move X21, X0
	031 Move X8, [X8]
	032 Move X0, X8
	033 Call 0x1C17F10
	034 Move X1, X31
	035 Move X20, X0
	036 Call CollectionBase..ctor, X0
	037 Move X0, X20
	038 Move X1, X21
	039 Call X509Certificate2Collection.AddRange, X0, X1
	040 Move X0, X19
	041 Move [X19+128], X20
	042 Call X509ChainImplMono.get_Roots, X0
	043 Compare X20, 0
	044 JumpIfEqual {62}
	045 Move X1, X0
	046 Move X0, X20
	047 Call X509Certificate2Collection.AddRange, X0, X1
	048 Move X20, [X19+128]
	049 Move X0, X19
	050 Call X509ChainImplMono.get_CertificateAuthorities, X0
	051 Compare X20, 0
	052 JumpIfEqual {62}
	053 Move X1, X0
	054 Move X0, X20
	055 Call X509Certificate2Collection.AddRange, X0, X1
	056 Move X0, [X19+128]
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags BuildChainFrom(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365AE54 BLR X8
	0x0365AE58 CBNZ X20, 0x365AE8C
	0x0365AE5C CMP W22, 0x3
	0x0365AE60 B.EQ 0x365AE68
	0x0365AE64 CBNZ W22, 0x365AE6C
	0x0365AE68 LDR X8, [X19 + 0x28]
	0x0365AE6C LDP X20, X19, [X31 + 0x30]
	0x0365AE70 LDP X22, X21, [X31 + 0x20]
	0x0365AE74 LDP X24, X23, [X31 + 0x10]
	0x0365AE78 MOV X0, X8
	0x0365AE7C LDR X30, [X31], #0x40
	0x0365AE80 RET
	0x0365AE84 BL 0x1C16F20
	0x0365AE88 BL 0x1C16F20
	0x0365AE8C MOV X0, X20
	0x0365AE90 BL 0x1C16F18
	0x0365AE94 B 0x365AEA8
	0x0365AE98 B 0x365AEA8
	0x0365AE9C B 0x365AEA8
	0x0365AEA0 B 0x365AEA8
	0x0365AEA4 B 0x365AEA8
	0x0365AEA8 MOV X22, X0
	0x0365AEAC CMP W1, 0x1
	0x0365AEB0 B.NE 0x365AECC
	0x0365AEB4 MOV X0, X22
	0x0365AEB8 BL 0x3EB1AD0
	0x0365AEBC LDR X20, [X0]
	0x0365AEC0 BL 0x3EB1AE0
	0x0365AEC4 MOV W22, W31
	0x0365AEC8 B 0x365ADE4
	0x0365AECC MOV X20, X31
	0x0365AED0 B 0x365AED8
	0x0365AED4 MOV X22, X0
	0x0365AED8 ADRP X23, 0xA99000
	0x0365AEDC LDR X23, [X23 + 0xE00]
	0x0365AEE0 LDR X1, [X23]
	0x0365AEE4 MOV X0, X21
	0x0365AEE8 BL 0x1C16E00
	0x0365AEEC MOV X19, X0
	0x0365AEF0 CBZ X0, 0x365AF4C
	0x0365AEF4 LDR X8, [X19]
	0x0365AEF8 LDR X1, [X23]
	0x0365AEFC LDRH W9, [X8 + 0x12E]
	0x0365AF00 CBZ X9, 0x365AF24
	0x0365AF04 LDR X10, [X8 + 0xB0]
	0x0365AF08 ADD X10, X10, 0x8
	0x0365AF0C LDUR X11, [X10 - 0x8]
	0x0365AF10 CMP X11, X1
	0x0365AF14 B.EQ 0x365AF34
	0x0365AF18 SUBS X9, X9, 0x1
	0x0365AF1C ADD X10, X10, 0x10
	0x0365AF20 B.NE 0x365AF0C
	0x0365AF24 MOV X0, X19
	0x0365AF28 MOV W2, W31
	0x0365AF2C BL 0x1C5C788
	0x0365AF30 B 0x365AF40
	0x0365AF34 LDRSW X9, [X10]
	0x0365AF38 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {73}
	008 Move X20, X1
	009 Move X1, X20
	010 Call X509ChainElementCollection.Add, X0, X1
	011 Move X0, X19
	012 Move X1, X20
	013 Call X509ChainImplMono.IsChainComplete, X0, X1
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {36}
	018 Move X0, X19
	019 Move X1, X20
	020 Call X509ChainImplMono.FindParent, X0, X1
	021 Compare X0, 0
	022 JumpIfEqual {67}
	023 Move X20, X0
	024 Move X0, [X19+24]
	025 Compare X0, 0
	026 JumpIfEqual {73}
	027 Move X1, X20
	028 Call X509ChainElementCollection.Contains, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {68}
	033 Move X0, [X19+24]
	034 Compare X0, 0
	035 JumpIfNotEqual {9}
	036 Move X0, X19
	037 Call X509ChainImplMono.get_Roots, X0
	038 Compare X0, 0
	039 JumpIfEqual {73}
	040 Move X1, X20
	041 Call X509Certificate2Collection.Contains, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {47}
	046 Move W0, W31
	047 Move X19, [X19+24]
	048 Compare X19, 0
	049 JumpIfEqual {73}
	050 Move X0, [X19+16]
	051 Compare X0, 0
	052 JumpIfEqual {73}
	053 Move X8, [X0]
	054 Move X9, [X8+664]
	055 Move X1, [X8+672]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Subtract W1, W0, 1
	058 Move X0, X19
	059 Call X509ChainElementCollection.get_Item, X0, X1
	060 Compare X0, 0
	061 JumpIfEqual {73}
	062 Move X8, X0
	063 Move W9, [X8+40]
	064 Move W0, W31
	065 Or W9, W9, 32
	066 Move [X8+40], W9
	067 Move W0, 0x10000
	068 Move W0, 128
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509Certificate2 SelectBestFromCollection(System.Security.Cryptography.X509Certificates.X509Certificate2 child, System.Security.Cryptography.X509Certificates.X509Certificate2Collection c)

Disassembly:
	0x0365C140 BL 0x33631B4
	0x0365C144 TBZ X0, 0x0, 0x365C164
	0x0365C148 MOVZ W0, 0x4
	0x0365C14C B 0x365C154
	0x0365C150 MOVZ W0, 0x40
	0x0365C154 LDP X20, X19, [X31 + 0x20]
	0x0365C158 LDP X22, X21, [X31 + 0x10]
	0x0365C15C LDR X30, [X31], #0x30
	0x0365C160 RET
	0x0365C164 LDR X8, [X19]
	0x0365C168 LDR X21, [X20 + 0x28]
	0x0365C16C MOV X0, X19
	0x0365C170 LDP X9, X1, [X8 + 0x1A8]
	0x0365C174 BLR X9
	0x0365C178 CBZ X0, 0x365C1D4
	0x0365C17C ADRP X8, 0xA98000
	0x0365C180 LDR X8, [X8 + 0x9F0]
	0x0365C184 LDR X19, [X0 + 0x48]
	0x0365C188 LDR X8, [X8]
	0x0365C18C LDR W9, [X8 + 0xE0]
	0x0365C190 CBNZ W9, 0x365C19C
	0x0365C194 MOV X0, X8
	0x0365C198 BL 0x1C16DFC
	0x0365C19C MOV X0, X21
	0x0365C1A0 MOV X1, X19
	0x0365C1A4 MOV X2, X31
	0x0365C1A8 BL 0x3363148
	0x0365C1AC TBZ X0, 0x0, 0x365C1BC
	0x0365C1B0 MOVZ W0, 0x40
	0x0365C1B4 MOVK W0, 0x1000000
	0x0365C1B8 B 0x365C154
	0x0365C1BC MOV X1, X20
	0x0365C1C0 BL 0x365C654
	0x0365C1C4 ANDS W31, W0, 0x1
	0x0365C1C8 MOVZ W8, 0x40
	0x0365C1CC CSEL W0, W31, W8, NE
	0x0365C1D0 B 0x365C154
	0x0365C1D4 BL 0x1C16F20
	0x0365C1D8 STP X30, X23, [X31 - 0x30]!
	0x0365C1DC STP X22, X21, [X31 + 0x10]
	0x0365C1E0 STP X20, X19, [X31 + 0x20]
	0x0365C1E4 ADRP X20, 0xD84000
	0x0365C1E8 LDRB W8, [X20 + 0x677]
	0x0365C1EC MOV X21, X1
	0x0365C1F0 MOV X19, X0
	0x0365C1F4 TBNZ X8, 0x0, 0x365C20C
	0x0365C1F8 ADRP X0, 0xAE0000
	0x0365C1FC LDR X0, [X0 + 0xBF8]
	0x0365C200 BL 0x1C16CF4
	0x0365C204 MOVZ W8, 0x1
	0x0365C208 STRB W8, [X20 + 0x677]
	0x0365C20C CBZ X21, 0x365C348
	0x0365C210 MOV X0, X21
	0x0365C214 BL 0x365272C
	0x0365C218 CBZ X0, 0x365C348
	0x0365C21C MOV W1, W31
	0x0365C220 BL 0x3650820
	0x0365C224 MOV X1, X21
	0x0365C228 MOV X20, X0
	0x0365C22C BL 0x365B360
	0x0365C230 MOV X21, X0
	0x0365C234 MOV X0, X19
	0x0365C238 BL 0x365A558
	0x0365C23C CBZ X0, 0x365C348
	0x0365C240 ADRP X23, 0xAE0000
	0x0365C244 LDR X23, [X23 + 0xBF8]
	0x0365C248 LDR X22, [X0 + 0x30]
	0x0365C24C LDR X8, [X23]
	0x0365C250 LDR W9, [X8 + 0xE0]
	0x0365C254 CBNZ W9, 0x365C260
	0x0365C258 MOV X0, X8
	0x0365C25C BL 0x1C16DFC
	0x0365C260 MOV X0, X20
	0x0365C264 MOV X1, X21
	0x0365C268 MOV X2, X22
	0x0365C26C BL 0x365C994
	0x0365C270 CBNZ X0, 0x365C338
	0x0365C274 LDR W8, [X19 + 0x10]
	0x0365C278 CMP W8, 0x1
	0x0365C27C B.NE 0x365C2B8
	0x0365C280 MOV X0, X19
	0x0365C284 BL 0x365A644
	0x0365C288 CBZ X0, 0x365C348
	0x0365C28C LDR X8, [X23]
	0x0365C290 LDR X22, [X0 + 0x30]
	0x0365C294 LDR W9, [X8 + 0xE0]
	0x0365C298 CBNZ W9, 0x365C2A4
	0x0365C29C MOV X0, X8
	0x0365C2A0 BL 0x1C16DFC
	0x0365C2A4 MOV X0, X20
	0x0365C2A8 MOV X1, X21
	0x0365C2AC MOV X2, X22
	0x0365C2B0 BL 0x365C994
	0x0365C2B4 CBNZ X0, 0x365C338
	0x0365C2B8 MOV X0, X19
	0x0365C2BC BL 0x365A244
	0x0365C2C0 CBZ X0, 0x365C348
	0x0365C2C4 LDR X8, [X23]
	0x0365C2C8 LDR X22, [X0 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD85000
	007 Move W8, [X22+1643]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xA99000
	016 Move X0, [X0+2544]
	017 Call 0x1C17CF4
	018 Move X0, 0xAE1000
	019 Move X0, [X0+3064]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1643], W8
	023 Compare X19, 0
	024 JumpIfEqual {121}
	025 Move X0, X19
	026 Move X1, X31
	027 Call CollectionBase.get_Count, X0
	028 Compare W0, 0
	029 JumpIfEqual {40}
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move W1, W31
	037 Move X30, [X31+48]
	038 Call X509Certificate2Collection.get_Item, X0, X1
	039 Return X0
	040 Move X22, X31
	041 Move X8, [X21]
	042 Move X0, X21
	043 Move X9, [X8+424]
	044 Move X1, [X8+432]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Compare X0, 0
	047 JumpIfEqual {121}
	048 Move X9, 0xA99000
	049 Move X8, [X0+72]
	050 Move X9, [X9+2544]
	051 Add X1, X31, 8
	052 Move [X31+8], X8
	053 Move X0, [X9]
	054 Call 0x1C17E04
	055 Move X2, X0
	056 Move W1, 6
	057 Move X0, X19
	058 Move W3, W31
	059 Call X509Certificate2Collection.Find, X0, X1, X2, X3
	060 Compare X0, 0
	061 JumpIfEqual {121}
	062 Move X1, X31
	063 Move X21, X0
	064 Call CollectionBase.get_Count, X0
	065 Compare W0, 0
	066 JumpIfEqual {70}
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, X21
	069 Move X19, X21
	070 Move X8, 0xAE1000
	071 Move X8, [X8+3064]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X20
	078 Call X509ChainImplMono.GetAuthorityKeyIdentifier, X0
	079 Move X1, X31
	080 Move X20, X0
	081 Call String.IsNullOrEmpty, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {97}
	086 Move X0, X19
	087 Move W1, W31
	088 Call X509Certificate2Collection.get_Item, X0, X1
	089 Move X22, X0
	090 Move X0, X22
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X22, [X31+16]
	094 Move X21, [X31+24]
	095 Move X30, [X31+48]
	096 Return X0
	097 Move X0, X19
	098 Call X509Certificate2Collection.GetEnumerator, X0
	099 Compare X0, 0
	100 JumpIfEqual {121}
	101 Move X21, X0
	102 Move X0, X21
	103 Call X509Certificate2Enumerator.MoveNext, X0
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {86}
	108 Move X0, X21
	109 Call X509Certificate2Enumerator.get_Current, X0
	110 Move X1, X0
	111 Move X22, X0
	112 Call X509ChainImplMono.GetSubjectKeyIdentifier, X0, X1
	113 Move X1, X0
	114 Move X0, X20
	115 Move X2, X31
	116 Call String.op_Equality, X0, X1
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfNotEqual {102}
	121 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509Certificate2 FindParent(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365BF64 CBZ X0, 0x365C000
	0x0365BF68 LDR X23, [X0 + 0x10]
	0x0365BF6C MOV X1, X23
	0x0365BF70 BL 0x365B410
	0x0365BF74 TBZ X0, 0x0, 0x365BFD0
	0x0365BF78 LDR X8, [X20 + 0x18]
	0x0365BF7C CBZ X8, 0x365C000
	0x0365BF80 LDR X0, [X8 + 0x10]
	0x0365BF84 CBZ X0, 0x365C000
	0x0365BF88 LDR X8, [X0]
	0x0365BF8C LDR X9, [X8 + 0x298]
	0x0365BF90 LDR X1, [X8 + 0x2A0]
	0x0365BF94 BLR X9
	0x0365BF98 SUB W8, W0, 0x1
	0x0365BF9C CMP W21, W8
	0x0365BFA0 B.GE 0x365BFD0
	0x0365BFA4 AND W3, W19, 0x1
	0x0365BFA8 MOV X0, X20
	0x0365BFAC MOV X1, X22
	0x0365BFB0 MOV X2, X23
	0x0365BFB4 BL 0x365C004
	0x0365BFB8 CMP W0, 0x40
	0x0365BFBC B.NE 0x365BFF0
	0x0365BFC0 LDR X0, [X20 + 0x18]
	0x0365BFC4 CBZ X0, 0x365C000
	0x0365BFC8 ADD W21, W21, 0x1
	0x0365BFCC B 0x365BF5C
	0x0365BFD0 AND W3, W19, 0x1
	0x0365BFD4 MOV X0, X20
	0x0365BFD8 MOV X1, X22
	0x0365BFDC LDP X20, X19, [X31 + 0x20]
	0x0365BFE0 LDP X22, X21, [X31 + 0x10]
	0x0365BFE4 MOV X2, X23
	0x0365BFE8 LDP X30, X23, [X31], #0x30
	0x0365BFEC B 0x365C004
	0x0365BFF0 LDP X20, X19, [X31 + 0x20]
	0x0365BFF4 LDP X22, X21, [X31 + 0x10]
	0x0365BFF8 LDP X30, X23, [X31], #0x30
	0x0365BFFC RET
	0x0365C000 BL 0x1C16F20
	0x0365C004 STR X30, [X31 - 0x30]!
	0x0365C008 STP X22, X21, [X31 + 0x10]
	0x0365C00C STP X20, X19, [X31 + 0x20]
	0x0365C010 ADRP X20, 0xD84000
	0x0365C014 LDRB W8, [X20 + 0x675]
	0x0365C018 MOV X22, X2
	0x0365C01C MOV X21, X1
	0x0365C020 MOV X19, X0
	0x0365C024 TBNZ X8, 0x0, 0x365C054
	0x0365C028 ADRP X0, 0xA98000
	0x0365C02C LDR X0, [X0 + 0x9F0]
	0x0365C030 BL 0x1C16CF4
	0x0365C034 ADRP X0, 0xAE0000
	0x0365C038 LDR X0, [X0 + 0x870]
	0x0365C03C BL 0x1C16CF4
	0x0365C040 ADRP X0, 0xAC7000
	0x0365C044 LDR X0, [X0 + 0x770]
	0x0365C048 BL 0x1C16CF4
	0x0365C04C MOVZ W8, 0x1
	0x0365C050 STRB W8, [X20 + 0x675]
	0x0365C054 CBZ X22, 0x365C1D4
	0x0365C058 MOV X0, X22
	0x0365C05C BL 0x3651BFC
	0x0365C060 CBZ X0, 0x365C1D4
	0x0365C064 ADRP X8, 0xAC7000
	0x0365C068 LDR X8, [X8 + 0x770]
	0x0365C06C LDR X1, [X8]
	0x0365C070 BL 0x36541C8
	0x0365C074 CBZ X0, 0x365C098

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD86000
	007 Move W8, [X21+1644]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAE2000
	015 Move X0, [X0+3064]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1644], W8
	019 Move X0, X20
	020 Call X509ChainImplMono.get_CertificateCollection, X0
	021 Compare X19, 0
	022 JumpIfEqual {82}
	023 Move X21, X0
	024 Move X0, X19
	025 Move X1, X31
	026 Call X509Certificate.get_Issuer, X0
	027 Compare X21, 0
	028 JumpIfEqual {82}
	029 Move X22, 0xAE2000
	030 Move X22, [X22+3064]
	031 Move X2, X0
	032 Move W1, 2
	033 Move X0, X21
	034 Move W3, W31
	035 Call X509Certificate2Collection.Find, X0, X1, X2, X3
	036 Move X8, [X22]
	037 Move X21, X0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Call X509ChainImplMono.GetAuthorityKeyIdentifier, X0
	045 Compare X0, 0
	046 JumpIfEqual {63}
	047 Move W8, [X0+16]
	048 Move X22, X0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, X20
	051 Call X509ChainImplMono.get_CertificateCollection, X0
	052 Compare X0, 0
	053 JumpIfEqual {82}
	054 Move W1, 14
	055 Move X2, X22
	056 Move W3, W31
	057 Call X509Certificate2Collection.Find, X0, X1, X2, X3
	058 Compare X21, 0
	059 JumpIfEqual {82}
	060 Move X1, X0
	061 Move X0, X21
	062 Call X509Certificate2Collection.AddRange, X0, X1
	063 Move X0, X20
	064 Move X1, X19
	065 Move X2, X21
	066 Call X509ChainImplMono.SelectBestFromCollection, X0, X1, X2
	067 Move X8, [X19]
	068 Move X20, X0
	069 Move X0, X19
	070 Move X1, X20
	071 Move X9, [X8+456]
	072 Move X2, [X8+464]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 And W31, W0, 1
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X22, [X31+16]
	079 Move X21, [X31+24]
	080 Move X30, [X31+48]
	081 Return X0
	082 Call 0x1C17F20

Method: System.Boolean IsChainComplete(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365C078 ADRP X8, 0xAE0000
	0x0365C07C LDR X8, [X8 + 0x870]
	0x0365C080 LDR X9, [X0]
	0x0365C084 LDR X8, [X8]
	0x0365C088 CMP X9, X8
	0x0365C08C B.NE 0x365C098
	0x0365C090 BL 0x3655AD4
	0x0365C094 TBZ X0, 0x1, 0x365C150
	0x0365C098 MOV X0, X19
	0x0365C09C MOV X1, X22
	0x0365C0A0 BL 0x365C1D8
	0x0365C0A4 CBZ X0, 0x365C150
	0x0365C0A8 MOV X20, X0
	0x0365C0AC MOV X0, X22
	0x0365C0B0 BL 0x3652514
	0x0365C0B4 CBZ X0, 0x365C1D4
	0x0365C0B8 BL 0x364FB6C
	0x0365C0BC MOV X1, X0
	0x0365C0C0 MOV X0, X20
	0x0365C0C4 MOV X2, X31
	0x0365C0C8 BL 0x31F4528
	0x0365C0CC TBZ X0, 0x0, 0x365C150
	0x0365C0D0 MOV X0, X21
	0x0365C0D4 BL 0x365BB60
	0x0365C0D8 MOV X1, X0
	0x0365C0DC MOV X0, X20
	0x0365C0E0 MOV X2, X31
	0x0365C0E4 BL 0x31F3F58
	0x0365C0E8 CBZ X0, 0x365C164
	0x0365C0EC MOV X1, X0
	0x0365C0F0 MOV X21, X0
	0x0365C0F4 BL 0x365C34C
	0x0365C0F8 TBZ X0, 0x0, 0x365C148
	0x0365C0FC LDR X8, [X19]
	0x0365C100 LDR X21, [X21 + 0x18]
	0x0365C104 MOV X0, X19
	0x0365C108 LDP X9, X1, [X8 + 0x1A8]
	0x0365C10C BLR X9
	0x0365C110 CBZ X0, 0x365C1D4
	0x0365C114 ADRP X8, 0xA98000
	0x0365C118 LDR X8, [X8 + 0x9F0]
	0x0365C11C LDR X22, [X0 + 0x48]
	0x0365C120 LDR X8, [X8]
	0x0365C124 LDR W9, [X8 + 0xE0]
	0x0365C128 CBNZ W9, 0x365C134
	0x0365C12C MOV X0, X8
	0x0365C130 BL 0x1C16DFC
	0x0365C134 MOV X0, X21
	0x0365C138 MOV X1, X22
	0x0365C13C MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD85000
	005 Move W8, [X20+1645]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAE1000
	012 Move X0, [X0+3064]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1645], W8
	016 Move X1, X19
	017 Call X509ChainImplMono.IsSelfIssued, X0, X1
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {53}
	022 Compare X19, 0
	023 JumpIfEqual {66}
	024 Move X0, X19
	025 Call X509Certificate2.get_Version, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X1, X19
	028 Call X509ChainImplMono.GetSubjectKeyIdentifier, X0, X1
	029 Move X1, X31
	030 Move X20, X0
	031 Call String.IsNullOrEmpty, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {52}
	036 Move X8, 0xAE1000
	037 Move X8, [X8+3064]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Call X509ChainImplMono.GetAuthorityKeyIdentifier, X0
	045 Move X1, X31
	046 Move X19, X0
	047 Call String.IsNullOrEmpty, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {58}
	052 Move W0, 1
	053 Move W0, W31
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Return X0
	058 Move X0, X19
	059 Move X1, X20
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X2, X31
	063 Move X30, [X31+32]
	064 Call String.op_Equality, X0, X1
	065 Return X0
	066 Call 0x1C17F20

Method: System.Boolean IsSelfIssued(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365C410 MOV X0, X19
	0x0365C414 MOV W2, W31
	0x0365C418 BL 0x1C5C788
	0x0365C41C B 0x365C42C
	0x0365C420 LDRSW X9, [X10]
	0x0365C424 ADD X8, X8, X9, 0x4, LSL
	0x0365C428 ADD X0, X8, 0x138
	0x0365C42C LDP X8, X1, [X0]
	0x0365C430 MOV X0, X19
	0x0365C434 BLR X8
	0x0365C438 MOV W21, W0
	0x0365C43C TBZ X0, 0x0, 0x365C4E8
	0x0365C440 LDR X8, [X19]
	0x0365C444 LDR X1, [X20]
	0x0365C448 LDRH W9, [X8 + 0x12E]
	0x0365C44C CBZ X9, 0x365C470
	0x0365C450 LDR X10, [X8 + 0xB0]
	0x0365C454 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {22}
	006 Move X19, X1
	007 Move X0, X1
	008 Move X1, X31
	009 Call X509Certificate.get_Issuer, X0
	010 Move X20, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Call X509Certificate.get_Subject, X0
	014 Move X1, X0
	015 Move X0, X20
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X2, X31
	019 Move X30, [X31+32]
	020 Call String.op_Equality, X0, X1
	021 Return X0
	022 Call 0x1C17F20

Method: System.Void ValidateChain(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags flag)

Disassembly:
	0x0365AF3C ADD X0, X8, 0x138
	0x0365AF40 LDP X8, X1, [X0]
	0x0365AF44 MOV X0, X19
	0x0365AF48 BLR X8
	0x0365AF4C CBNZ X20, 0x365AF58
	0x0365AF50 MOV X0, X22
	0x0365AF54 BL 0x1D2C690
	0x0365AF58 MOV X0, X20
	0x0365AF5C BL 0x1C16F18
	0x0365AF60 BL 0x1990590
	0x0365AF64 STR X30, [X31 - 0x30]!
	0x0365AF68 STP X22, X21, [X31 + 0x10]
	0x0365AF6C STP X20, X19, [X31 + 0x20]
	0x0365AF70 ADRP X21, 0xD86000
	0x0365AF74 LDRB W8, [X21 + 0x66C]
	0x0365AF78 MOV X19, X1
	0x0365AF7C MOV X20, X0
	0x0365AF80 TBNZ X8, 0x0, 0x365AF98
	0x0365AF84 ADRP X0, 0xAE2000
	0x0365AF88 LDR X0, [X0 + 0xBF8]
	0x0365AF8C BL 0x1C16CF4
	0x0365AF90 MOVZ W8, 0x1
	0x0365AF94 STRB W8, [X21 + 0x66C]
	0x0365AF98 MOV X0, X20
	0x0365AF9C BL 0x365AC3C
	0x0365AFA0 CBZ X19, 0x365B074
	0x0365AFA4 MOV X21, X0
	0x0365AFA8 MOV X0, X19
	0x0365AFAC MOV X1, X31
	0x0365AFB0 BL 0x326B63C
	0x0365AFB4 CBZ X21, 0x365B074
	0x0365AFB8 ADRP X22, 0xAE2000
	0x0365AFBC LDR X22, [X22 + 0xBF8]
	0x0365AFC0 MOV X2, X0
	0x0365AFC4 MOVZ W1, 0x2
	0x0365AFC8 MOV X0, X21
	0x0365AFCC MOV W3, W31
	0x0365AFD0 BL 0x3654990
	0x0365AFD4 LDR X8, [X22]
	0x0365AFD8 MOV X21, X0
	0x0365AFDC LDR W9, [X8 + 0xE0]
	0x0365AFE0 CBNZ W9, 0x365AFEC
	0x0365AFE4 MOV X0, X8
	0x0365AFE8 BL 0x1C16DFC
	0x0365AFEC MOV X0, X19
	0x0365AFF0 BL 0x365B2CC
	0x0365AFF4 CBZ X0, 0x365B034
	0x0365AFF8 LDR W8, [X0 + 0x10]
	0x0365AFFC MOV X22, X0
	0x0365B000 CMP W8, 0x1
	0x0365B004 B.LT 0x365B034
	0x0365B008 MOV X0, X20
	0x0365B00C BL 0x365AC3C
	0x0365B010 CBZ X0, 0x365B074
	0x0365B014 MOVZ W1, 0xE
	0x0365B018 MOV X2, X22
	0x0365B01C MOV W3, W31
	0x0365B020 BL 0x3654990
	0x0365B024 CBZ X21, 0x365B074
	0x0365B028 MOV X1, X0
	0x0365B02C MOV X0, X21
	0x0365B030 BL 0x3653BC8
	0x0365B034 MOV X0, X20
	0x0365B038 MOV X1, X19
	0x0365B03C MOV X2, X21
	0x0365B040 BL 0x365B140
	0x0365B044 LDR X8, [X19]
	0x0365B048 MOV X20, X0
	0x0365B04C MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+24]
	008 Compare X8, 0
	009 JumpIfEqual {90}
	010 Move X19, X0
	011 Move X0, [X8+16]
	012 Compare X0, 0
	013 JumpIfEqual {90}
	014 Move X8, [X0]
	015 Move W20, W1
	016 Move X9, [X8+664]
	017 Move X1, [X8+672]
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X8, [X19+24]
	020 Compare X8, 0
	021 JumpIfEqual {90}
	022 Subtract W21, W0, 1
	023 Move W23, W0
	024 Move X0, X8
	025 Move W1, W21
	026 Call X509ChainElementCollection.get_Item, X0, X1
	027 Compare X0, 0
	028 JumpIfEqual {90}
	029 Move X22, [X0+16]
	030 Move TEMP, X20
	031 And TEMP, TEMP, 0x10000
	032 Compare TEMP, 0x10000
	033 JumpIfEqual {40}
	034 Move X0, X19
	035 Move W1, W21
	036 Call X509ChainImplMono.Process, X0, X1
	037 Compare W21, 0
	038 JumpIfEqual {75}
	039 Subtract W21, W23, 2
	040 Compare X22, 0
	041 JumpIfEqual {90}
	042 Move X0, X22
	043 Call X509Certificate2.get_PublicKey, X0
	044 Compare X0, 0
	045 JumpIfEqual {90}
	046 Call PublicKey.get_Key, X0
	047 Move [X19+64], X0
	048 Move X0, X22
	049 Call X509Certificate2.get_IssuerName, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move [X19+56], X0
	052 Move [X19+48], W21
	053 Move X0, X19
	054 Move W1, W21
	055 Call X509ChainImplMono.Process, X0, X1
	056 Move X0, X19
	057 Move W1, W21
	058 Call X509ChainImplMono.PrepareForNextCertificate, X0, X1
	059 Subtract W21, W21, 1
	060 Move X0, X19
	061 Move W1, W31
	062 Call X509ChainImplMono.Process, X0, X1
	063 Move X0, X19
	064 Move W1, W20
	065 Call X509ChainImplMono.CheckRevocationOnChain, X0, X1
	066 Move X0, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Move X23, [X31+56]
	073 Call X509ChainImplMono.WrapUp, X0
	074 Return 
	075 Move X0, [X19+24]
	076 Compare X0, 0
	077 JumpIfEqual {90}
	078 Move W1, W31
	079 Call X509ChainElementCollection.get_Item, X0, X1
	080 Compare X0, 0
	081 JumpIfEqual {90}
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Move X23, [X31+56]
	088 Call X509ChainElement.UncompressFlags, X0
	089 Return 
	090 Call 0x1C17F20

Method: System.Void Process(System.Int32 n)

Disassembly:
	0x0365C458 LDUR X11, [X10 - 0x8]
	0x0365C45C CMP X11, X1
	0x0365C460 B.EQ 0x365C480
	0x0365C464 SUBS X9, X9, 0x1
	0x0365C468 ADD X10, X10, 0x10
	0x0365C46C B.NE 0x365C458
	0x0365C470 MOVZ W2, 0x1
	0x0365C474 MOV X0, X19
	0x0365C478 BL 0x1C5C788
	0x0365C47C B 0x365C490
	0x0365C480 LDR W9, [X10]
	0x0365C484 ADD W9, W9, 0x1
	0x0365C488 ADD X8, X8, W9, 0x4, SXTW
	0x0365C48C ADD X0, X8, 0x138
	0x0365C490 LDP X8, X1, [X0]
	0x0365C494 MOV X0, X19
	0x0365C498 BLR X8
	0x0365C49C CBZ X0, 0x365C57C
	0x0365C4A0 LDR X8, [X0]
	0x0365C4A4 LDR X1, [X23]
	0x0365C4A8 LDRB W10, [X8 + 0x130]
	0x0365C4AC LDRB W9, [X1 + 0x130]
	0x0365C4B0 CMP W10, W9
	0x0365C4B4 B.CC 0x365C578
	0x0365C4B8 LDR X8, [X8 + 0xC8]
	0x0365C4BC ADD X8, X8, X9, 0x3, LSL
	0x0365C4C0 LDUR X8, [X8 - 0x8]
	0x0365C4C4 CMP X8, X1
	0x0365C4C8 B.NE 0x365C578
	0x0365C4CC LDRB W8, [X0 + 0x18]
	0x0365C4D0 CBZ W8, 0x365C3E0
	0x0365C4D4 LDR X0, [X0 + 0x10]
	0x0365C4D8 LDR X1, [X24]
	0x0365C4DC MOV X2, X31
	0x0365C4E0 BL 0x321BA08
	0x0365C4E4 TBNZ X0, 0x0, 0x365C3E0
	0x0365C4E8 MOV X20, X31
	0x0365C4EC EOR W21, W21, 0x1
	0x0365C4F0 LDR X1, [X22]
	0x0365C4F4 MOV X0, X19
	0x0365C4F8 BL 0x1C16E00
	0x0365C4FC CBZ X0, 0x365C55C
	0x0365C500 LDR X8, [X0]
	0x0365C504 LDR X1, [X22]
	0x0365C508 MOV X19, X0
	0x0365C50C LDRH W9, [X8 + 0x12E]
	0x0365C510 CBZ X9, 0x365C534
	0x0365C514 LDR X10, [X8 + 0xB0]
	0x0365C518 ADD X10, X10, 0x8
	0x0365C51C LDUR X11, [X10 - 0x8]
	0x0365C520 CMP X11, X1
	0x0365C524 B.EQ 0x365C544
	0x0365C528 SUBS X9, X9, 0x1
	0x0365C52C ADD X10, X10, 0x10
	0x0365C530 B.NE 0x365C51C
	0x0365C534 MOV X0, X19
	0x0365C538 MOV W2, W31
	0x0365C53C BL 0x1C5C788
	0x0365C540 B 0x365C550
	0x0365C544 LDRSW X9, [X10]
	0x0365C548 ADD X8, X8, X9, 0x4, LSL
	0x0365C54C ADD X0, X8, 0x138
	0x0365C550 LDP X8, X1, [X0]
	0x0365C554 MOV X0, X19
	0x0365C558 BLR X8
	0x0365C55C CBNZ X20, 0x365C588
	0x0365C560 AND W0, W21, 0x1
	0x0365C564 LDP X20, X19, [X31 + 0x30]
	0x0365C568 LDP X22, X21, [X31 + 0x20]
	0x0365C56C LDP X24, X23, [X31 + 0x10]
	0x0365C570 LDR X30, [X31], #0x40
	0x0365C574 RET
	0x0365C578 BL 0x1C171E0
	0x0365C57C BL 0x1C16F20
	0x0365C580 BL 0x1C16F20
	0x0365C584 BL 0x1C16F20
	0x0365C588 MOV X0, X20
	0x0365C58C BL 0x1C16F18
	0x0365C590 B 0x365C5A4
	0x0365C594 B 0x365C5A4
	0x0365C598 B 0x365C5A4
	0x0365C59C B 0x365C5A4
	0x0365C5A0 B 0x365C5A4
	0x0365C5A4 CMP W1, 0x1
	0x0365C5A8 B.NE 0x365C5C0
	0x0365C5AC BL 0x3EB1AD0
	0x0365C5B0 LDR X20, [X0]
	0x0365C5B4 BL 0x3EB1AE0
	0x0365C5B8 MOVZ W21, 0x1
	0x0365C5BC B 0x365C4F0
	0x0365C5C0 MOV X21, X0
	0x0365C5C4 MOV X20, X31
	0x0365C5C8 B 0x365C5D0
	0x0365C5CC MOV X21, X0
	0x0365C5D0 LDR X1, [X22]
	0x0365C5D4 MOV X0, X19
	0x0365C5D8 BL 0x1C16E00
	0x0365C5DC MOV X19, X0
	0x0365C5E0 CBZ X0, 0x365C63C
	0x0365C5E4 LDR X8, [X19]
	0x0365C5E8 LDR X1, [X22]
	0x0365C5EC LDRH W9, [X8 + 0x12E]
	0x0365C5F0 CBZ X9, 0x365C614
	0x0365C5F4 LDR X10, [X8 + 0xB0]
	0x0365C5F8 ADD X10, X10, 0x8
	0x0365C5FC LDUR X11, [X10 - 0x8]
	0x0365C600 CMP X11, X1
	0x0365C604 B.EQ 0x365C624
	0x0365C608 SUBS X9, X9, 0x1
	0x0365C60C ADD X10, X10, 0x10
	0x0365C610 B.NE 0x365C5FC
	0x0365C614 MOV X0, X19
	0x0365C618 MOV W2, W31
	0x0365C61C BL 0x1C5C788
	0x0365C620 B 0x365C630
	0x0365C624 LDRSW X9, [X10]
	0x0365C628 ADD X8, X8, X9, 0x4, LSL
	0x0365C62C ADD X0, X8, 0x138
	0x0365C630 LDP X8, X1, [X0]
	0x0365C634 MOV X0, X19
	0x0365C638 BLR X8
	0x0365C63C CBNZ X20, 0x365C648
	0x0365C640 MOV X0, X21
	0x0365C644 BL 0x1D2C690
	0x0365C648 MOV X0, X20
	0x0365C64C BL 0x1C16F18
	0x0365C650 BL 0x1990590
	0x0365C654 STR X30, [X31 - 0x50]!
	0x0365C658 STP X26, X25, [X31 + 0x10]
	0x0365C65C STP X24, X23, [X31 + 0x20]
	0x0365C660 STP X22, X21, [X31 + 0x30]
	0x0365C664 STP X20, X19, [X31 + 0x40]
	0x0365C668 ADRP X20, 0xD84000
	0x0365C66C LDRB W8, [X20 + 0x678]
	0x0365C670 MOV X19, X1
	0x0365C674 TBNZ X8, 0x0, 0x365C6BC
	0x0365C678 ADRP X0, 0xA97000
	0x0365C67C LDR X0, [X0 + 0xE00]
	0x0365C680 BL 0x1C16CF4
	0x0365C684 ADRP X0, 0xA97000
	0x0365C688 LDR X0, [X0 + 0xE18]
	0x0365C68C BL 0x1C16CF4
	0x0365C690 ADRP X0, 0xAC5000
	0x0365C694 LDR X0, [X0 + 0xF8]
	0x0365C698 BL 0x1C16CF4
	0x0365C69C ADRP X0, 0xAE0000
	0x0365C6A0 LDR X0, [X0 + 0xCB8]
	0x0365C6A4 BL 0x1C16CF4
	0x0365C6A8 ADRP X0, 0xAE0000
	0x0365C6AC LDR X0, [X0 + 0xC88]
	0x0365C6B0 BL 0x1C16CF4
	0x0365C6B4 MOVZ W8, 0x1
	0x0365C6B8 STRB W8, [X20 + 0x678]
	0x0365C6BC CBZ X19, 0x365C8BC
	0x0365C6C0 LDR X0, [X19 + 0x48]
	0x0365C6C4 CBZ X0, 0x365C8BC
	0x0365C6C8 ADRP X22, 0xA97000
	0x0365C6CC LDR X22, [X22 + 0xE00]
	0x0365C6D0 MOV X1, X31
	0x0365C6D4 BL 0x3352A68
	0x0365C6D8 MOV X19, X0
	0x0365C6DC CBZ X0, 0x365C8C0
	0x0365C6E0 ADRP X23, 0xA97000
	0x0365C6E4 ADRP X24, 0xAC5000
	0x0365C6E8 ADRP X25, 0xAE0000
	0x0365C6EC ADRP X26, 0xAE0000
	0x0365C6F0 LDR X23, [X23 + 0xE18]
	0x0365C6F4 LDR X24, [X24 + 0xF8]
	0x0365C6F8 LDR X25, [X25 + 0xCB8]
	0x0365C6FC LDR X26, [X26 + 0xC88]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xD85000
	010 Move W8, [X20+1646]
	011 Move W22, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xA99000
	018 Move X0, [X0+2544]
	019 Call 0x1C17CF4
	020 Move X0, 0xAC5000
	021 Move X0, [X0+3912]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1646], W8
	025 Move X0, [X19+24]
	026 Compare X0, 0
	027 JumpIfEqual {230}
	028 Move W1, W22
	029 Call X509ChainElementCollection.get_Item, X0, X1
	030 Compare X0, 0
	031 JumpIfEqual {230}
	032 Move X21, [X0+16]
	033 Move X20, X0
	034 Move X0, X21
	035 Call X509Helper2.GetMonoCertificate, X0
	036 Move X8, [X19+24]
	037 Compare X8, 0
	038 JumpIfEqual {230}
	039 Move X23, X0
	040 Move X0, [X8+16]
	041 Compare X0, 0
	042 JumpIfEqual {230}
	043 Move X8, [X0]
	044 Move X9, [X8+664]
	045 Move X1, [X8+672]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Subtract W8, W0, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Compare X23, 0
	050 JumpIfEqual {230}
	051 Move X8, [X23]
	052 Move X0, X23
	053 Move X9, [X8+408]
	054 Move X1, [X8+416]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X8, 0xAC5000
	057 Move X8, [X8+3912]
	058 Move X2, X31
	059 Move X1, [X8]
	060 Call String.op_Equality, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {93}
	065 Move X8, [X23]
	066 Move X0, X23
	067 Move X9, [X8+424]
	068 Move X1, [X8+432]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Compare X0, 0
	071 JumpIfNotEqual {93}
	072 Move X0, [X19+24]
	073 Compare X0, 0
	074 JumpIfEqual {230}
	075 Add W1, W22, 1
	076 Call X509ChainElementCollection.get_Item, X0, X1
	077 Compare X0, 0
	078 JumpIfEqual {230}
	079 Move X0, [X0+16]
	080 Call X509Helper2.GetMonoCertificate, X0
	081 Compare X0, 0
	082 JumpIfEqual {230}
	083 Move X8, [X0]
	084 Move X9, [X8+424]
	085 Move X1, [X8+432]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X8, [X23]
	088 Move X1, X0
	089 Move X0, X23
	090 Move X9, [X8+440]
	091 Move X2, [X8+448]
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move X23, [X19+64]
	094 Compare X23, 0
	095 JumpIfEqual {121}
	096 Move X1, X21
	097 Move X2, X23
	098 Call X509ChainImplMono.IsSignedWith, X0, X1, X2
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {138}
	103 Move X8, [X19+24]
	104 Compare X8, 0
	105 JumpIfEqual {230}
	106 Move X0, [X8+16]
	107 Compare X0, 0
	108 JumpIfEqual {230}
	109 Move X8, [X0]
	110 Move X9, [X8+664]
	111 Move X1, [X8+672]
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Subtract W8, W0, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X1, X21
	116 Call X509ChainImplMono.IsSelfIssued, X0, X1
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {135}
	121 Compare X21, 0
	122 JumpIfEqual {230}
	123 Move X0, X21
	124 Call X509Certificate2.get_PublicKey, X0
	125 Compare X0, 0
	126 JumpIfEqual {230}
	127 Call PublicKey.get_Key, X0
	128 Move X1, X21
	129 Move X2, X0
	130 Call X509ChainImplMono.IsSignedWith, X0, X1, X2
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfEqual {138}
	135 Move W8, [X20+40]
	136 Or W8, W8, 8
	137 Move [X20+40], W8
	138 Move X8, [X19]
	139 Move X0, X19
	140 Move X9, [X8+424]
	141 Move X1, [X8+432]
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Compare X0, 0
	144 JumpIfEqual {230}
	145 Compare X21, 0
	146 JumpIfEqual {230}
	147 Move X25, 0xA99000
	148 Move X22, [X0+72]
	149 Move X25, [X25+2544]
	150 Move X0, X21
	151 Move X1, X31
	152 Call X509Certificate.GetNotBefore, X0
	153 Move X8, [X25]
	154 Move X24, X0
	155 Move W9, [X8+224]
	156 Compare W9, 0
	157 JumpIfNotEqual {160}
	158 Move X0, X8
	159 Call 0x1C17DFC
	160 Move X0, X22
	161 Move X1, X24
	162 Move X2, X31
	163 Call DateTime.op_LessThan, X0, X1
	164 Move TEMP, X0
	165 And TEMP, TEMP, 1
	166 Compare TEMP, 1
	167 JumpIfEqual {194}
	168 Move X8, [X19]
	169 Move X0, X19
	170 Move X9, [X8+424]
	171 Move X1, [X8+432]
	172 NotImplemented "Instruction BLR not yet implemented."
	173 Compare X0, 0
	174 JumpIfEqual {230}
	175 Move X22, [X0+72]
	176 Move X0, X21
	177 Move X1, X31
	178 Call X509Certificate.GetNotAfter, X0
	179 Move X8, [X25]
	180 Move X24, X0
	181 Move W9, [X8+224]
	182 Compare W9, 0
	183 JumpIfNotEqual {186}
	184 Move X0, X8
	185 Call 0x1C17DFC
	186 Move X0, X22
	187 Move X1, X24
	188 Move X2, X31
	189 Call DateTime.op_GreaterThan, X0, X1
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {197}
	194 Move W8, [X20+40]
	195 Or W8, W8, 1
	196 Move [X20+40], W8
	197 Compare X23, 0
	198 JumpIfEqual {221}
	199 Move X0, X21
	200 Call X509Certificate2.get_IssuerName, X0
	201 Move X1, [X19+56]
	202 Call X500DistinguishedName.AreEqual, X0, X1
	203 Move TEMP, X0
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfEqual {210}
	207 Move W8, [X20+40]
	208 Or W8, W8, 2048
	209 Move [X20+40], W8
	210 Move X1, X21
	211 Move X20, [X31+48]
	212 Move X19, [X31+56]
	213 Move X22, [X31+32]
	214 Move X21, [X31+40]
	215 Move X24, [X31+16]
	216 Move X23, [X31+24]
	217 Move X30, [X31+64]
	218 Move X25, [X31+72]
	219 Call X509ChainImplMono.IsSelfIssued, X0, X1
	220 Return 
	221 Move X20, [X31+48]
	222 Move X19, [X31+56]
	223 Move X22, [X31+32]
	224 Move X21, [X31+40]
	225 Move X24, [X31+16]
	226 Move X23, [X31+24]
	227 Move X30, [X31+64]
	228 Move X25, [X31+72]
	229 Return 
	230 Call 0x1C17F20

Method: System.Void PrepareForNextCertificate(System.Int32 n)

Disassembly:
	0x0365C700 LDR X8, [X19]
	0x0365C704 LDR X1, [X23]
	0x0365C708 LDRH W9, [X8 + 0x12E]
	0x0365C70C CBZ X9, 0x365C730
	0x0365C710 LDR X10, [X8 + 0xB0]
	0x0365C714 ADD X10, X10, 0x8
	0x0365C718 LDUR X11, [X10 - 0x8]
	0x0365C71C CMP X11, X1
	0x0365C720 B.EQ 0x365C740
	0x0365C724 SUBS X9, X9, 0x1
	0x0365C728 ADD X10, X10, 0x10
	0x0365C72C B.NE 0x365C718
	0x0365C730 MOV X0, X19
	0x0365C734 MOV W2, W31
	0x0365C738 BL 0x1C5C788
	0x0365C73C B 0x365C74C
	0x0365C740 LDRSW X9, [X10]
	0x0365C744 ADD X8, X8, X9, 0x4, LSL
	0x0365C748 ADD X0, X8, 0x138
	0x0365C74C LDP X8, X1, [X0]
	0x0365C750 MOV X0, X19
	0x0365C754 BLR X8
	0x0365C758 MOV W21, W0
	0x0365C75C TBZ X0, 0x0, 0x365C820
	0x0365C760 LDR X8, [X19]
	0x0365C764 LDR X1, [X23]
	0x0365C768 LDRH W9, [X8 + 0x12E]
	0x0365C76C CBZ X9, 0x365C790
	0x0365C770 LDR X10, [X8 + 0xB0]
	0x0365C774 ADD X10, X10, 0x8
	0x0365C778 LDUR X11, [X10 - 0x8]
	0x0365C77C CMP X11, X1
	0x0365C780 B.EQ 0x365C7A0
	0x0365C784 SUBS X9, X9, 0x1
	0x0365C788 ADD X10, X10, 0x10
	0x0365C78C B.NE 0x365C778
	0x0365C790 MOVZ W2, 0x1
	0x0365C794 MOV X0, X19
	0x0365C798 BL 0x1C5C788
	0x0365C79C B 0x365C7B0
	0x0365C7A0 LDR W9, [X10]
	0x0365C7A4 ADD W9, W9, 0x1
	0x0365C7A8 ADD X8, X8, W9, 0x4, SXTW
	0x0365C7AC ADD X0, X8, 0x138
	0x0365C7B0 LDP X8, X1, [X0]
	0x0365C7B4 MOV X0, X19
	0x0365C7B8 BLR X8
	0x0365C7BC CBZ X0, 0x365C8B8
	0x0365C7C0 LDR X8, [X0]
	0x0365C7C4 LDR X1, [X24]
	0x0365C7C8 LDRB W10, [X8 + 0x130]
	0x0365C7CC LDRB W9, [X1 + 0x130]
	0x0365C7D0 CMP W10, W9
	0x0365C7D4 B.CC 0x365C8B4
	0x0365C7D8 LDR X8, [X8 + 0xC8]
	0x0365C7DC ADD X8, X8, X9, 0x3, LSL
	0x0365C7E0 LDUR X8, [X8 - 0x8]
	0x0365C7E4 CMP X8, X1
	0x0365C7E8 B.NE 0x365C8B4
	0x0365C7EC LDRB W8, [X0 + 0x18]
	0x0365C7F0 CBZ W8, 0x365C700
	0x0365C7F4 LDR X20, [X0 + 0x10]
	0x0365C7F8 LDR X1, [X25]
	0x0365C7FC MOV X0, X20
	0x0365C800 MOV X2, X31
	0x0365C804 BL 0x321BA08
	0x0365C808 TBNZ X0, 0x0, 0x365C700
	0x0365C80C LDR X1, [X26]
	0x0365C810 MOV X0, X20
	0x0365C814 MOV X2, X31
	0x0365C818 BL 0x321BA08
	0x0365C81C TBNZ X0, 0x0, 0x365C700
	0x0365C820 MOV X20, X31
	0x0365C824 EOR W21, W21, 0x1
	0x0365C828 LDR X1, [X22]
	0x0365C82C MOV X0, X19
	0x0365C830 BL 0x1C16E00
	0x0365C834 CBZ X0, 0x365C894
	0x0365C838 LDR X8, [X0]
	0x0365C83C LDR X1, [X22]
	0x0365C840 MOV X19, X0
	0x0365C844 LDRH W9, [X8 + 0x12E]
	0x0365C848 CBZ X9, 0x365C86C
	0x0365C84C LDR X10, [X8 + 0xB0]
	0x0365C850 ADD X10, X10, 0x8
	0x0365C854 LDUR X11, [X10 - 0x8]
	0x0365C858 CMP X11, X1
	0x0365C85C B.EQ 0x365C87C
	0x0365C860 SUBS X9, X9, 0x1
	0x0365C864 ADD X10, X10, 0x10
	0x0365C868 B.NE 0x365C854
	0x0365C86C MOV X0, X19
	0x0365C870 MOV W2, W31
	0x0365C874 BL 0x1C5C788
	0x0365C878 B 0x365C888
	0x0365C87C LDRSW X9, [X10]
	0x0365C880 ADD X8, X8, X9, 0x4, LSL
	0x0365C884 ADD X0, X8, 0x138
	0x0365C888 LDP X8, X1, [X0]
	0x0365C88C MOV X0, X19
	0x0365C890 BLR X8
	0x0365C894 CBNZ X20, 0x365C8C4
	0x0365C898 AND W0, W21, 0x1
	0x0365C89C LDP X20, X19, [X31 + 0x40]
	0x0365C8A0 LDP X22, X21, [X31 + 0x30]
	0x0365C8A4 LDP X24, X23, [X31 + 0x20]
	0x0365C8A8 LDP X26, X25, [X31 + 0x10]
	0x0365C8AC LDR X30, [X31], #0x50
	0x0365C8B0 RET
	0x0365C8B4 BL 0x1C171E0
	0x0365C8B8 BL 0x1C16F20
	0x0365C8BC BL 0x1C16F20
	0x0365C8C0 BL 0x1C16F20
	0x0365C8C4 MOV X0, X20
	0x0365C8C8 BL 0x1C16F18
	0x0365C8CC B 0x365C8E4
	0x0365C8D0 B 0x365C8E4
	0x0365C8D4 B 0x365C8E4
	0x0365C8D8 B 0x365C8E4
	0x0365C8DC B 0x365C8E4
	0x0365C8E0 B 0x365C8E4
	0x0365C8E4 CMP W1, 0x1
	0x0365C8E8 B.NE 0x365C900

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD85000
	008 Move W8, [X21+1647]
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xAE1000
	016 Move X0, [X0+2144]
	017 Call 0x1C17CF4
	018 Move X0, 0xAE1000
	019 Move X0, [X0+2160]
	020 Call 0x1C17CF4
	021 Move X0, 0xAC8000
	022 Move X0, [X0+1904]
	023 Call 0x1C17CF4
	024 Move X0, 0xAC6000
	025 Move X0, [X0+552]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1647], W8
	029 Move X0, [X20+24]
	030 Compare X0, 0
	031 JumpIfEqual {149}
	032 Move W1, W19
	033 Call X509ChainElementCollection.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {149}
	036 Move X21, [X0+16]
	037 Move X19, X0
	038 Compare X21, 0
	039 JumpIfEqual {149}
	040 Move X0, X21
	041 Call X509Certificate2.get_SubjectName, X0
	042 Move [X20+56], X0
	043 Move X0, X21
	044 Call X509Certificate2.get_PublicKey, X0
	045 Compare X0, 0
	046 JumpIfEqual {149}
	047 Call PublicKey.get_Key, X0
	048 Move [X20+64], X0
	049 Move X0, X21
	050 Call X509Certificate2.get_Extensions, X0
	051 Compare X0, 0
	052 JumpIfEqual {149}
	053 Move X8, 0xAC6000
	054 Move X8, [X8+552]
	055 Move X1, [X8]
	056 Call X509ExtensionCollection.get_Item, X0, X1
	057 Compare X0, 0
	058 JumpIfEqual {65}
	059 Move X8, 0xAE1000
	060 Move X8, [X8+2144]
	061 Move X9, [X0]
	062 Move X22, X0
	063 Move X8, [X8]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X21
	066 Call X509Certificate2.get_Version, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X22, X31
	069 Move W8, [X19+40]
	070 Move X22, X31
	071 Or W8, W8, 1024
	072 Move [X19+40], W8
	073 Move W23, 1
	074 Move X1, X21
	075 Call X509ChainImplMono.IsSelfIssued, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {99}
	080 Move W8, [X20+48]
	081 Subtract W8, W8, 1
	082 Move [X20+48], W8
	083 Move X0, X22
	084 Call X509BasicConstraintsExtension.get_CertificateAuthority, X0
	085 Move W23, W31
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {74}
	090 Move W8, [X19+40]
	091 Or W8, W8, 1024
	092 Move [X19+40], W8
	093 Move X8, [X20+72]
	094 Compare X8, 0
	095 JumpIfEqual {99}
	096 Move W9, [X8+40]
	097 Or W9, W9, 1024
	098 Move [X8+40], W9
	099 Move TEMP, X23
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {117}
	103 Move X0, X22
	104 Call X509BasicConstraintsExtension.get_HasPathLengthConstraint, X0
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {117}
	109 Move X0, X22
	110 Call X509BasicConstraintsExtension.get_PathLengthConstraint, X0
	111 Move W8, [X20+48]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X22
	114 Call X509BasicConstraintsExtension.get_PathLengthConstraint, X0
	115 Move [X20+48], W0
	116 Move [X20+72], X19
	117 Move X0, X21
	118 Call X509Certificate2.get_Extensions, X0
	119 Compare X0, 0
	120 JumpIfEqual {149}
	121 Move X8, 0xAC8000
	122 Move X8, [X8+1904]
	123 Move X1, [X8]
	124 Call X509ExtensionCollection.get_Item, X0, X1
	125 Compare X0, 0
	126 JumpIfEqual {140}
	127 Move X8, 0xAE1000
	128 Move X8, [X8+2160]
	129 Move X9, [X0]
	130 Move X8, [X8]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Call X509KeyUsageExtension.get_KeyUsages, X0
	133 Move TEMP, X0
	134 And TEMP, TEMP, 4
	135 Compare TEMP, 4
	136 JumpIfEqual {140}
	137 Move W8, [X19+40]
	138 Or W8, W8, 16
	139 Move [X19+40], W8
	140 Move X1, X19
	141 Move X20, [X31+32]
	142 Move X19, [X31+40]
	143 Move X22, [X31+16]
	144 Move X21, [X31+24]
	145 Move X30, [X31+48]
	146 Move X23, [X31+56]
	147 Call X509ChainImplMono.ProcessCertificateExtensions, X0, X1
	148 Return 
	149 Call 0x1C17F20

Method: System.Void WrapUp()

Disassembly:
	0x0365CAD4 MOV X0, X19
	0x0365CAD8 BL 0x1C5C788
	0x0365CADC B 0x365CAF0
	0x0365CAE0 LDR W9, [X10]
	0x0365CAE4 ADD W9, W9, 0x1
	0x0365CAE8 ADD X8, X8, W9, 0x4, SXTW
	0x0365CAEC ADD X0, X8, 0x138
	0x0365CAF0 LDP X8, X1, [X0]
	0x0365CAF4 MOV X0, X19
	0x0365CAF8 BLR X8
	0x0365CAFC MOV X22, X0
	0x0365CB00 CBZ X0, 0x365CC28
	0x0365CB04 LDR X8, [X22]
	0x0365CB08 LDR X1, [X25]
	0x0365CB0C LDRB W10, [X8 + 0x130]
	0x0365CB10 LDRB W9, [X1 + 0x130]
	0x0365CB14 CMP W10, W9
	0x0365CB18 B.CC 0x365CC20
	0x0365CB1C LDR X8, [X8 + 0xC8]
	0x0365CB20 ADD X8, X8, X9, 0x3, LSL
	0x0365CB24 LDUR X8, [X8 - 0x8]
	0x0365CB28 CMP X8, X1
	0x0365CB2C B.NE 0x365CC20
	0x0365CB30 LDR X0, [X22 + 0x10]
	0x0365CB34 MOV X1, X21
	0x0365CB38 MOV X2, X31
	0x0365CB3C BL 0x321BA08
	0x0365CB40 TBZ X0, 0x0, 0x365CA44
	0x0365CB44 CBZ X20, 0x365CC2C
	0x0365CB48 LDR W8, [X20 + 0x10]
	0x0365CB4C CBZ W8, 0x365CB7C
	0x0365CB50 LDR X0, [X26]
	0x0365CB54 LDR W8, [X0 + 0xE0]
	0x0365CB58 CBNZ W8, 0x365CB60
	0x0365CB5C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {41}
	008 Move W1, W31
	009 Call X509ChainElementCollection.get_Item, X0, X1
	010 Compare X0, 0
	011 JumpIfEqual {41}
	012 Move X1, [X0+16]
	013 Move X20, X0
	014 Call X509ChainImplMono.IsSelfIssued, X0, X1
	015 Move X1, X20
	016 Call X509ChainImplMono.ProcessCertificateExtensions, X0, X1
	017 Move X8, [X19+24]
	018 Compare X8, 0
	019 JumpIfEqual {41}
	020 Move X0, [X8+16]
	021 Compare X0, 0
	022 JumpIfEqual {41}
	023 Move X8, [X0]
	024 Move X9, [X8+664]
	025 Move X1, [X8+672]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Subtract W20, W0, 1
	028 Move X0, [X19+24]
	029 Compare X0, 0
	030 JumpIfEqual {41}
	031 Move W1, W20
	032 Call X509ChainElementCollection.get_Item, X0, X1
	033 Compare X0, 0
	034 JumpIfEqual {41}
	035 Call X509ChainElement.UncompressFlags, X0
	036 Subtract W20, W20, 1
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1C17F20

Method: System.Void ProcessCertificateExtensions(System.Security.Cryptography.X509Certificates.X509ChainElement element)

Disassembly:
	0x0365CC60 B 0x365CC64
	0x0365CC64 MOV X21, X0
	0x0365CC68 CMP W1, 0x1
	0x0365CC6C B.NE 0x365CC84
	0x0365CC70 MOV X0, X21
	0x0365CC74 BL 0x3EB1AD0
	0x0365CC78 LDR X20, [X0]
	0x0365CC7C BL 0x3EB1AE0
	0x0365CC80 B 0x365CB90
	0x0365CC84 MOV X20, X31
	0x0365CC88 B 0x365CC90
	0x0365CC8C MOV X21, X0
	0x0365CC90 LDR X1, [X23]
	0x0365CC94 MOV X0, X19
	0x0365CC98 BL 0x1C16E00
	0x0365CC9C MOV X19, X0
	0x0365CCA0 CBZ X0, 0x365CCFC
	0x0365CCA4 LDR X8, [X19]
	0x0365CCA8 LDR X1, [X23]
	0x0365CCAC LDRH W9, [X8 + 0x12E]
	0x0365CCB0 CBZ X9, 0x365CCD4
	0x0365CCB4 LDR X10, [X8 + 0xB0]
	0x0365CCB8 ADD X10, X10, 0x8
	0x0365CCBC LDUR X11, [X10 - 0x8]
	0x0365CCC0 CMP X11, X1
	0x0365CCC4 B.EQ 0x365CCE4
	0x0365CCC8 SUBS X9, X9, 0x1
	0x0365CCCC ADD X10, X10, 0x10
	0x0365CCD0 B.NE 0x365CCBC
	0x0365CCD4 MOV X0, X19
	0x0365CCD8 MOV W2, W31
	0x0365CCDC BL 0x1C5C788
	0x0365CCE0 B 0x365CCF0
	0x0365CCE4 LDRSW X9, [X10]
	0x0365CCE8 ADD X8, X8, X9, 0x4, LSL
	0x0365CCEC ADD X0, X8, 0x138
	0x0365CCF0 LDP X8, X1, [X0]
	0x0365CCF4 MOV X0, X19
	0x0365CCF8 BLR X8
	0x0365CCFC CBNZ X20, 0x365CD08
	0x0365CD00 MOV X0, X21
	0x0365CD04 BL 0x1D2C690
	0x0365CD08 MOV X0, X20
	0x0365CD0C BL 0x1C16F18
	0x0365CD10 BL 0x1990590
	0x0365CD14 STP X30, X21, [X31 - 0x20]!
	0x0365CD18 STP X20, X19, [X31 + 0x10]
	0x0365CD1C ADRP X20, 0xD84000
	0x0365CD20 ADRP X21, 0xAE0000
	0x0365CD24 ADRP X19, 0xAE0000
	0x0365CD28 LDRB W8, [X20 + 0x67A]
	0x0365CD2C LDR X21, [X21 + 0xC10]
	0x0365CD30 LDR X19, [X19 + 0xBF8]
	0x0365CD34 TBNZ X8, 0x0, 0x365CD58
	0x0365CD38 ADRP X0, 0xAE0000
	0x0365CD3C LDR X0, [X0 + 0xBF8]
	0x0365CD40 BL 0x1C16CF4
	0x0365CD44 ADRP X0, 0xAE0000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD85000
	008 Move W8, [X20+1648]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xAC8000
	015 Move X0, [X0+1904]
	016 Call 0x1C17CF4
	017 Move X0, 0xAC6000
	018 Move X0, [X0+552]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1648], W8
	022 Compare X19, 0
	023 JumpIfEqual {86}
	024 Move X0, [X19+16]
	025 Compare X0, 0
	026 JumpIfEqual {86}
	027 Call X509Certificate2.get_Extensions, X0
	028 Compare X0, 0
	029 JumpIfEqual {86}
	030 Call X509ExtensionCollection.GetEnumerator, X0
	031 Compare X0, 0
	032 JumpIfEqual {86}
	033 Move X20, X0
	034 Call X509ExtensionEnumerator.MoveNext, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {79}
	039 Move X22, 0xAC8000
	040 Move X23, 0xAC6000
	041 Move X22, [X22+1904]
	042 Move X23, [X23+552]
	043 Move X0, X20
	044 Call X509ExtensionEnumerator.get_Current, X0
	045 Compare X0, 0
	046 JumpIfEqual {86}
	047 Move W8, [X0+32]
	048 Compare W8, 0
	049 JumpIfEqual {73}
	050 Move X8, [X0+16]
	051 Compare X8, 0
	052 JumpIfEqual {86}
	053 Move X21, [X8+16]
	054 Move X1, [X22]
	055 Move X2, X31
	056 Move X0, X21
	057 Call String.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {73}
	062 Move X1, [X23]
	063 Move X0, X21
	064 Move X2, X31
	065 Call String.op_Equality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {73}
	070 Move W8, [X19+40]
	071 Or W8, W8, 256
	072 Move [X19+40], W8
	073 Move X0, X20
	074 Call X509ExtensionEnumerator.MoveNext, X0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {43}
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 
	086 Call 0x1C17F20

Method: System.Boolean IsSignedWith(System.Security.Cryptography.X509Certificates.X509Certificate2 signed, System.Security.Cryptography.AsymmetricAlgorithm pubkey)

Disassembly:
	0x0365CC28 BL 0x1C16F20
	0x0365CC2C BL 0x1C16F20
	0x0365CC30 BL 0x1C16F20
	0x0365CC34 BL 0x1C16F20
	0x0365CC38 MOV X0, X20
	0x0365CC3C BL 0x1C16F18
	0x0365CC40 B 0x365CC64
	0x0365CC44 B 0x365CC64
	0x0365CC48 B 0x365CC64
	0x0365CC4C B 0x365CC64
	0x0365CC50 B 0x365CC64
	0x0365CC54 B 0x365CC64
	0x0365CC58 B 0x365CC64
	0x0365CC5C B 0x365CC64

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X2, 0
	004 JumpIfEqual {16}
	005 Move X0, X1
	006 Move X19, X2
	007 Call X509Helper2.GetMonoCertificate, X0
	008 Compare X0, 0
	009 JumpIfEqual {20}
	010 Move X1, X19
	011 Move X2, X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call X509Certificate.VerifySignature, X0, X1
	015 Return X0
	016 Move W0, W31
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return X0
	020 Call 0x1C17F20

Method: System.String GetSubjectKeyIdentifier(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365C360 LDRB W8, [X20 + 0x679]
	0x0365C364 MOV X19, X1
	0x0365C368 TBNZ X8, 0x0, 0x365C3A4
	0x0365C36C ADRP X0, 0xA97000
	0x0365C370 LDR X0, [X0 + 0xE00]
	0x0365C374 BL 0x1C16CF4
	0x0365C378 ADRP X0, 0xA97000
	0x0365C37C LDR X0, [X0 + 0xE18]
	0x0365C380 BL 0x1C16CF4
	0x0365C384 ADRP X0, 0xAC5000
	0x0365C388 LDR X0, [X0 + 0xF8]
	0x0365C38C BL 0x1C16CF4
	0x0365C390 ADRP X0, 0xAE0000
	0x0365C394 LDR X0, [X0 + 0xCB0]
	0x0365C398 BL 0x1C16CF4
	0x0365C39C MOVZ W8, 0x1
	0x0365C3A0 STRB W8, [X20 + 0x679]
	0x0365C3A4 CBZ X19, 0x365C580
	0x0365C3A8 LDR X0, [X19 + 0x20]
	0x0365C3AC CBZ X0, 0x365C580
	0x0365C3B0 ADRP X22, 0xA97000
	0x0365C3B4 LDR X22, [X22 + 0xE00]
	0x0365C3B8 MOV X1, X31
	0x0365C3BC BL 0x3352A68
	0x0365C3C0 MOV X19, X0
	0x0365C3C4 CBZ X0, 0x365C584
	0x0365C3C8 ADRP X20, 0xA97000
	0x0365C3CC ADRP X23, 0xAC5000
	0x0365C3D0 ADRP X24, 0xAE0000
	0x0365C3D4 LDR X20, [X20 + 0xE18]
	0x0365C3D8 LDR X23, [X23 + 0xF8]
	0x0365C3DC LDR X24, [X24 + 0xCB0]
	0x0365C3E0 LDR X8, [X19]
	0x0365C3E4 LDR X1, [X20]
	0x0365C3E8 LDRH W9, [X8 + 0x12E]
	0x0365C3EC CBZ X9, 0x365C410
	0x0365C3F0 LDR X10, [X8 + 0xB0]
	0x0365C3F4 ADD X10, X10, 0x8
	0x0365C3F8 LDUR X11, [X10 - 0x8]
	0x0365C3FC CMP X11, X1
	0x0365C400 B.EQ 0x365C420
	0x0365C404 SUBS X9, X9, 0x1
	0x0365C408 ADD X10, X10, 0x10
	0x0365C40C B.NE 0x365C3F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD85000
	005 Move W8, [X20+1649]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0xA9A000
	012 Move X0, [X0+632]
	013 Call 0x1C17CF4
	014 Move X0, 0xAE1000
	015 Move X0, [X0+2168]
	016 Call 0x1C17CF4
	017 Move X0, 0xAC8000
	018 Move X0, [X0+1616]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1649], W8
	022 Compare X19, 0
	023 JumpIfEqual {53}
	024 Move X0, X19
	025 Call X509Certificate2.get_Extensions, X0
	026 Compare X0, 0
	027 JumpIfEqual {53}
	028 Move X8, 0xAC8000
	029 Move X8, [X8+1616]
	030 Move X1, [X8]
	031 Call X509ExtensionCollection.get_Item, X0, X1
	032 Compare X0, 0
	033 JumpIfEqual {39}
	034 Move X8, 0xAE1000
	035 Move X8, [X8+2168]
	036 Move X9, [X0]
	037 Move X8, [X8]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X8, 0xA9A000
	040 Move X8, [X8+632]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X8, [X8]
	044 Move X8, [X8+184]
	045 Move X0, [X8]
	046 Move X30, [X31+32]
	047 Return X0
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Call X509SubjectKeyIdentifierExtension.get_SubjectKeyIdentifier, X0
	052 Return X0
	053 Call 0x1C17F20

Method: System.String GetAuthorityKeyIdentifier(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)

Disassembly:
	0x0365C2CC LDR W9, [X8 + 0xE0]
	0x0365C2D0 CBNZ W9, 0x365C2DC
	0x0365C2D4 MOV X0, X8
	0x0365C2D8 BL 0x1C16DFC
	0x0365C2DC MOV X0, X20
	0x0365C2E0 MOV X1, X21
	0x0365C2E4 MOV X2, X22
	0x0365C2E8 BL 0x365C994
	0x0365C2EC CBNZ X0, 0x365C338
	0x0365C2F0 LDR W8, [X19 + 0x10]
	0x0365C2F4 CMP W8, 0x1
	0x0365C2F8 B.NE 0x365C334
	0x0365C2FC MOV X0, X19
	0x0365C300 BL 0x365A330
	0x0365C304 CBZ X0, 0x365C348
	0x0365C308 LDR X8, [X23]
	0x0365C30C LDR X19, [X0 + 0x30]
	0x0365C310 LDR W9, [X8 + 0xE0]
	0x0365C314 CBNZ W9, 0x365C320
	0x0365C318 MOV X0, X8
	0x0365C31C BL 0x1C16DFC
	0x0365C320 MOV X0, X20
	0x0365C324 MOV X1, X21
	0x0365C328 MOV X2, X19
	0x0365C32C BL 0x365C994
	0x0365C330 CBNZ X0, 0x365C338
	0x0365C334 MOV X0, X31
	0x0365C338 LDP X20, X19, [X31 + 0x20]
	0x0365C33C LDP X22, X21, [X31 + 0x10]
	0x0365C340 LDP X30, X23, [X31], #0x30
	0x0365C344 RET
	0x0365C348 BL 0x1C16F20
	0x0365C34C STR X30, [X31 - 0x40]!
	0x0365C350 STP X24, X23, [X31 + 0x10]
	0x0365C354 STP X22, X21, [X31 + 0x20]
	0x0365C358 STP X20, X19, [X31 + 0x30]
	0x0365C35C ADRP X20, 0xD84000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD85000
	005 Move W8, [X20+1650]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xAE1000
	012 Move X0, [X0+3064]
	013 Call 0x1C17CF4
	014 Move X0, 0xAE1000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1650], W8
	019 Move X0, X19
	020 Call X509Helper2.GetMonoCertificate, X0
	021 Compare X0, 0
	022 JumpIfEqual {46}
	023 Move X0, [X0+184]
	024 Compare X0, 0
	025 JumpIfEqual {46}
	026 Move X8, 0xAE1000
	027 Move X8, [X8+3208]
	028 Move X19, 0xAE1000
	029 Move X2, X31
	030 Move X1, [X8]
	031 Move X19, [X19+3064]
	032 Call X509ExtensionCollection.get_Item, X0, X1
	033 Move X8, [X19]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Call X509ChainImplMono.GetAuthorityKeyIdentifier, X0
	045 Return X0
	046 Call 0x1C17F20

Method: System.String GetAuthorityKeyIdentifier(Mono.Security.X509.X509Crl crl)

Disassembly:
	0x0365CEAC MOV X1, X0
	0x0365CEB0 MOV X0, X19
	0x0365CEB4 MOV X2, X31
	0x0365CEB8 BL 0x3314A68
	0x0365CEBC ADRP X0, 0xAE0000
	0x0365CEC0 LDR X0, [X0 + 0xCD0]
	0x0365CEC4 BL 0x1C16D08
	0x0365CEC8 MOV X1, X0
	0x0365CECC MOV X0, X19
	0x0365CED0 BL 0x1C16DEC
	0x0365CED4 LDR W0, [X0 + 0x40]
	0x0365CED8 RET
	0x0365CEDC STP X30, X19, [X31 - 0x10]!
	0x0365CEE0 CMP W1, 0x1000
	0x0365CEE4 B.CS 0x365CEF4
	0x0365CEE8 STR W1, [X0 + 0x40]
	0x0365CEEC LDP X30, X19, [X31], #0x10
	0x0365CEF0 RET
	0x0365CEF4 ADRP X0, 0xA9F000
	0x0365CEF8 LDR X0, [X0 + 0x578]
	0x0365CEFC BL 0x1C16D08
	0x0365CF00 BL 0x1C16F10
	0x0365CF04 MOV X19, X0
	0x0365CF08 ADRP X0, 0xAE0000
	0x0365CF0C LDR X0, [X0 + 0xCD8]
	0x0365CF10 BL 0x1C16D08
	0x0365CF14 MOV X1, X0
	0x0365CF18 MOV X0, X19
	0x0365CF1C MOV X2, X31
	0x0365CF20 BL 0x3314A68
	0x0365CF24 ADRP X0, 0xAE0000
	0x0365CF28 LDR X0, [X0 + 0xCE0]
	0x0365CF2C BL 0x1C16D08
	0x0365CF30 MOV X1, X0
	0x0365CF34 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD85000
	005 Move W8, [X20+1651]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xAE1000
	012 Move X0, [X0+3064]
	013 Call 0x1C17CF4
	014 Move X0, 0xAE1000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1651], W8
	019 Compare X19, 0
	020 JumpIfEqual {44}
	021 Move X0, [X19+72]
	022 Compare X0, 0
	023 JumpIfEqual {44}
	024 Move X8, 0xAE1000
	025 Move X8, [X8+3208]
	026 Move X19, 0xAE1000
	027 Move X2, X31
	028 Move X1, [X8]
	029 Move X19, [X19+3064]
	030 Call X509ExtensionCollection.get_Item, X0, X1
	031 Move X8, [X19]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Call X509ChainImplMono.GetAuthorityKeyIdentifier, X0
	043 Return X0
	044 Call 0x1C17F20

Method: System.String GetAuthorityKeyIdentifier(Mono.Security.X509.X509Extension ext)

Disassembly:
	0x0365CD48 LDR X0, [X0 + 0xC10]
	0x0365CD4C BL 0x1C16CF4
	0x0365CD50 MOVZ W8, 0x1
	0x0365CD54 STRB W8, [X20 + 0x67A]
	0x0365CD58 LDR X0, [X21]
	0x0365CD5C MOV W1, W31
	0x0365CD60 BL 0x1C16D6C
	0x0365CD64 LDR X8, [X19]
	0x0365CD68 LDP X20, X19, [X31 + 0x10]
	0x0365CD6C LDR X8, [X8 + 0xB8]
	0x0365CD70 STR X0, [X8]
	0x0365CD74 LDP X30, X21, [X31], #0x20
	0x0365CD78 RET
	0x0365CD7C STP X30, X23, [X31 - 0x30]!
	0x0365CD80 STP X22, X21, [X31 + 0x10]
	0x0365CD84 STP X20, X19, [X31 + 0x20]
	0x0365CD88 ADRP X20, 0xD84000
	0x0365CD8C ADRP X23, 0xAE0000
	0x0365CD90 ADRP X21, 0xA99000
	0x0365CD94 LDRB W8, [X20 + 0x67C]
	0x0365CD98 LDR X23, [X23 + 0xCC0]
	0x0365CD9C LDR X21, [X21 + 0x570]
	0x0365CDA0 MOV X19, X0
	0x0365CDA4 TBNZ X8, 0x0, 0x365CDD4
	0x0365CDA8 ADRP X0, 0xA98000
	0x0365CDAC LDR X0, [X0 + 0x9F0]
	0x0365CDB0 BL 0x1C16CF4
	0x0365CDB4 ADRP X0, 0xAE0000
	0x0365CDB8 LDR X0, [X0 + 0xCC0]
	0x0365CDBC BL 0x1C16CF4
	0x0365CDC0 ADRP X0, 0xA99000
	0x0365CDC4 LDR X0, [X0 + 0x570]
	0x0365CDC8 BL 0x1C16CF4
	0x0365CDCC MOVZ W8, 0x1
	0x0365CDD0 STRB W8, [X20 + 0x67C]
	0x0365CDD4 LDR X0, [X23]
	0x0365CDD8 ADRP X22, 0xA98000
	0x0365CDDC LDR X22, [X22 + 0x9F0]
	0x0365CDE0 BL 0x1C16F10
	0x0365CDE4 MOV X20, X0
	0x0365CDE8 BL 0x364DEE4
	0x0365CDEC STR X20, [X19 + 0x10]
	0x0365CDF0 LDR X0, [X23]
	0x0365CDF4 BL 0x1C16F10
	0x0365CDF8 MOV X20, X0
	0x0365CDFC BL 0x364DEE4
	0x0365CE00 ADRP X8, 0xFFFFFFFFFD491000
	0x0365CE04 LDR V0, [X8 + 0xA18]
	0x0365CE08 STR X20, [X19 + 0x18]
	0x0365CE0C STR X31, [X19 + 0x28]
	0x0365CE10 STR D0, [X19 + 0x30]
	0x0365CE14 LDR X0, [X21]
	0x0365CE18 LDR W8, [X0 + 0xE0]
	0x0365CE1C CBNZ W8, 0x365CE28
	0x0365CE20 BL 0x1C16DFC
	0x0365CE24 LDR X0, [X21]
	0x0365CE28 LDR X8, [X0 + 0xB8]
	0x0365CE2C LDR X8, [X8]
	0x0365CE30 STR W31, [X19 + 0x40]
	0x0365CE34 STR X8, [X19 + 0x38]
	0x0365CE38 LDR X0, [X22]
	0x0365CE3C LDR W8, [X0 + 0xE0]
	0x0365CE40 CBNZ W8, 0x365CE48
	0x0365CE44 BL 0x1C16DFC
	0x0365CE48 MOV X0, X31
	0x0365CE4C BL 0x3361584
	0x0365CE50 STR X0, [X19 + 0x48]
	0x0365CE54 LDP X20, X19, [X31 + 0x20]
	0x0365CE58 LDP X22, X21, [X31 + 0x10]
	0x0365CE5C LDP X30, X23, [X31], #0x30
	0x0365CE60 RET
	0x0365CE64 LDR W0, [X0 + 0x30]
	0x0365CE68 RET
	0x0365CE6C LDR W0, [X0 + 0x34]
	0x0365CE70 RET
	0x0365CE74 STP X30, X19, [X31 - 0x10]!
	0x0365CE78 CMP W1, 0x3
	0x0365CE7C B.CS 0x365CE8C
	0x0365CE80 STR W1, [X0 + 0x34]
	0x0365CE84 LDP X30, X19, [X31], #0x10
	0x0365CE88 RET
	0x0365CE8C ADRP X0, 0xA9F000
	0x0365CE90 LDR X0, [X0 + 0x578]
	0x0365CE94 BL 0x1C16D08
	0x0365CE98 BL 0x1C16F10
	0x0365CE9C MOV X19, X0
	0x0365CEA0 ADRP X0, 0xAE0000
	0x0365CEA4 LDR X0, [X0 + 0xCC8]
	0x0365CEA8 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xD85000
	009 Move W8, [X20+1652]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xAE1000
	016 Move X0, [X0+3232]
	017 Call 0x1C17CF4
	018 Move X0, 0xA98000
	019 Move X0, [X0+2288]
	020 Call 0x1C17CF4
	021 Move X0, 0xA9A000
	022 Move X0, [X0+632]
	023 Call 0x1C17CF4
	024 Move X0, 0xAE1000
	025 Move X0, [X0+3240]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1652], W8
	029 Move [X31+12], W31
	030 Compare X19, 0
	031 JumpIfEqual {78}
	032 Move X8, 0xAE1000
	033 Move X8, [X8+3232]
	034 Move X0, [X8]
	035 Call 0x1C17F10
	036 Move X1, X19
	037 Move X2, X31
	038 Move X20, X0
	039 Call AuthorityKeyIdentifierExtension..ctor, X0, X1
	040 Compare X20, 0
	041 JumpIfEqual {99}
	042 Move X0, X20
	043 Move X1, X31
	044 Call AuthorityKeyIdentifierExtension.get_Identifier, X0
	045 Compare X0, 0
	046 JumpIfEqual {78}
	047 Move X8, 0xA98000
	048 Move X8, [X8+2288]
	049 Move X19, X0
	050 Move X0, [X8]
	051 Call 0x1C17F10
	052 Move X1, X31
	053 Move X20, X0
	054 Call StringBuilder..ctor, X0
	055 Move X8, [X19+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X23, 0xAE1000
	058 Move X23, [X23+3240]
	059 Move X21, X31
	060 And X8, X8, 0
	061 Add X22, X19, 32
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move W8, [X22]
	064 Move X1, [X23]
	065 Add X0, X31, 12
	066 Move X2, X31
	067 Move [X31+12], W8
	068 Call Byte.ToString, X0, X1
	069 Compare X20, 0
	070 JumpIfEqual {99}
	071 Move X1, X0
	072 Move X0, X20
	073 Move X2, X31
	074 Call StringBuilder.Append, X0, X1
	075 Move W8, [X19+24]
	076 Add X21, X21, 1
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X8, 0xA9A000
	079 Move X8, [X8+632]
	080 Move X8, [X8]
	081 Move X8, [X8+184]
	082 Move X0, [X8]
	083 Compare X20, 0
	084 JumpIfEqual {99}
	085 Move X8, [X20]
	086 Move X0, X20
	087 Move X9, [X8+360]
	088 Move X1, [X8+368]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X22, [X31+32]
	093 Move X21, [X31+40]
	094 Move X30, [X31+16]
	095 Move X23, [X31+24]
	096 Add X31, X31, 64
	097 Return X0
	098 Call 0x1C17F28
	099 Call 0x1C17F20

Method: System.Void CheckRevocationOnChain(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags flag)

Disassembly:
	0x0365C8EC BL 0x3EB1AD0
	0x0365C8F0 LDR X20, [X0]
	0x0365C8F4 BL 0x3EB1AE0
	0x0365C8F8 MOVZ W21, 0x1
	0x0365C8FC B 0x365C828
	0x0365C900 MOV X21, X0
	0x0365C904 MOV X20, X31
	0x0365C908 B 0x365C910
	0x0365C90C MOV X21, X0
	0x0365C910 LDR X1, [X22]
	0x0365C914 MOV X0, X19
	0x0365C918 BL 0x1C16E00
	0x0365C91C MOV X19, X0
	0x0365C920 CBZ X0, 0x365C97C
	0x0365C924 LDR X8, [X19]
	0x0365C928 LDR X1, [X22]
	0x0365C92C LDRH W9, [X8 + 0x12E]
	0x0365C930 CBZ X9, 0x365C954
	0x0365C934 LDR X10, [X8 + 0xB0]
	0x0365C938 ADD X10, X10, 0x8
	0x0365C93C LDUR X11, [X10 - 0x8]
	0x0365C940 CMP X11, X1
	0x0365C944 B.EQ 0x365C964
	0x0365C948 SUBS X9, X9, 0x1
	0x0365C94C ADD X10, X10, 0x10
	0x0365C950 B.NE 0x365C93C
	0x0365C954 MOV X0, X19
	0x0365C958 MOV W2, W31
	0x0365C95C BL 0x1C5C788
	0x0365C960 B 0x365C970
	0x0365C964 LDRSW X9, [X10]
	0x0365C968 ADD X8, X8, X9, 0x4, LSL
	0x0365C96C ADD X0, X8, 0x138
	0x0365C970 LDP X8, X1, [X0]
	0x0365C974 MOV X0, X19
	0x0365C978 BLR X8
	0x0365C97C CBNZ X20, 0x365C988
	0x0365C980 MOV X0, X21
	0x0365C984 BL 0x1D2C690
	0x0365C988 MOV X0, X20
	0x0365C98C BL 0x1C16F18
	0x0365C990 BL 0x1990590
	0x0365C994 STR X30, [X31 - 0x50]!
	0x0365C998 STP X26, X25, [X31 + 0x10]
	0x0365C99C STP X24, X23, [X31 + 0x20]
	0x0365C9A0 STP X22, X21, [X31 + 0x30]
	0x0365C9A4 STP X20, X19, [X31 + 0x40]
	0x0365C9A8 ADRP X22, 0xD84000
	0x0365C9AC LDRB W8, [X22 + 0x676]
	0x0365C9B0 MOV X19, X2
	0x0365C9B4 MOV X20, X1
	0x0365C9B8 MOV X21, X0
	0x0365C9BC TBNZ X8, 0x0, 0x365C9F8
	0x0365C9C0 ADRP X0, 0xA97000
	0x0365C9C4 LDR X0, [X0 + 0xE00]
	0x0365C9C8 BL 0x1C16CF4
	0x0365C9CC ADRP X0, 0xA97000
	0x0365C9D0 LDR X0, [X0 + 0xE18]
	0x0365C9D4 BL 0x1C16CF4
	0x0365C9D8 ADRP X0, 0xAE0000
	0x0365C9DC LDR X0, [X0 + 0xBF8]
	0x0365C9E0 BL 0x1C16CF4
	0x0365C9E4 ADRP X0, 0xAC5000
	0x0365C9E8 LDR X0, [X0 + 0x288]
	0x0365C9EC BL 0x1C16CF4
	0x0365C9F0 MOVZ W8, 0x1
	0x0365C9F4 STRB W8, [X22 + 0x676]
	0x0365C9F8 CBZ X19, 0x365CB84
	0x0365C9FC MOV X0, X19
	0x0365CA00 MOV X1, X31
	0x0365CA04 BL 0x31F8158
	0x0365CA08 CBZ X0, 0x365CC30
	0x0365CA0C LDR X8, [X0]
	0x0365CA10 ADRP X23, 0xA97000
	0x0365CA14 LDR X9, [X8 + 0x388]
	0x0365CA18 LDR X1, [X8 + 0x390]
	0x0365CA1C LDR X23, [X23 + 0xE00]
	0x0365CA20 BLR X9
	0x0365CA24 MOV X19, X0
	0x0365CA28 CBZ X0, 0x365CC34
	0x0365CA2C ADRP X24, 0xA97000
	0x0365CA30 ADRP X25, 0xAC5000
	0x0365CA34 ADRP X26, 0xAE0000
	0x0365CA38 LDR X24, [X24 + 0xE18]
	0x0365CA3C LDR X25, [X25 + 0x288]
	0x0365CA40 LDR X26, [X26 + 0xBF8]
	0x0365CA44 LDR X8, [X19]
	0x0365CA48 LDR X1, [X24]
	0x0365CA4C LDRH W9, [X8 + 0x12E]
	0x0365CA50 CBZ X9, 0x365CA74
	0x0365CA54 LDR X10, [X8 + 0xB0]
	0x0365CA58 ADD X10, X10, 0x8
	0x0365CA5C LDUR X11, [X10 - 0x8]
	0x0365CA60 CMP X11, X1
	0x0365CA64 B.EQ 0x365CA84
	0x0365CA68 SUBS X9, X9, 0x1
	0x0365CA6C ADD X10, X10, 0x10
	0x0365CA70 B.NE 0x365CA5C
	0x0365CA74 MOV X0, X19
	0x0365CA78 MOV W2, W31
	0x0365CA7C BL 0x1C5C788
	0x0365CA80 B 0x365CA90
	0x0365CA84 LDRSW X9, [X10]
	0x0365CA88 ADD X8, X8, X9, 0x4, LSL
	0x0365CA8C ADD X0, X8, 0x138
	0x0365CA90 LDP X8, X1, [X0]
	0x0365CA94 MOV X0, X19
	0x0365CA98 BLR X8
	0x0365CA9C TBZ X0, 0x0, 0x365CB8C
	0x0365CAA0 LDR X8, [X19]
	0x0365CAA4 LDR X1, [X24]
	0x0365CAA8 LDRH W9, [X8 + 0x12E]
	0x0365CAAC CBZ X9, 0x365CAD0
	0x0365CAB0 LDR X10, [X8 + 0xB0]
	0x0365CAB4 ADD X10, X10, 0x8
	0x0365CAB8 LDUR X11, [X10 - 0x8]
	0x0365CABC CMP X11, X1
	0x0365CAC0 B.EQ 0x365CAE0
	0x0365CAC4 SUBS X9, X9, 0x1
	0x0365CAC8 ADD X10, X10, 0x10
	0x0365CACC B.NE 0x365CAB8
	0x0365CAD0 MOVZ W2, 0x1

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X8, [X0]
	012 Move W20, W1
	013 Move X19, X0
	014 Move X9, [X8+424]
	015 Move X8, [X8+432]
	016 Move X1, X8
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Compare X0, 0
	019 JumpIfEqual {132}
	020 Move W8, [X0+52]
	021 Compare W8, 0
	022 JumpIfEqual {121}
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W21, 1
	026 Move W21, W31
	027 Move X8, [X19+24]
	028 Compare X8, 0
	029 JumpIfEqual {132}
	030 Move X0, [X8+16]
	031 Compare X0, 0
	032 JumpIfEqual {132}
	033 Move X8, [X0]
	034 Move X9, [X8+664]
	035 Move X1, [X8+672]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Subtract W22, W0, 1
	038 Move W25, 64
	039 Move W26, W20
	040 ShiftRight W26, 16
	041 And W26, W26, 0xFFFF
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 Move X8, [X19]
	044 Move X0, X19
	045 Move X9, [X8+424]
	046 Move X1, [X8+432]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Compare X0, 0
	049 JumpIfEqual {132}
	050 Move W8, [X0+48]
	051 Add W23, W22, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Compare W8, 0
	054 JumpIfNotEqual {69}
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSET not yet implemented."
	057 Move X8, [X19+24]
	058 Compare X8, 0
	059 JumpIfEqual {132}
	060 Move X0, [X8+16]
	061 Compare X0, 0
	062 JumpIfEqual {132}
	063 Move X8, [X0]
	064 Move X9, [X8+664]
	065 Move X1, [X8+672]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CSET not yet implemented."
	069 Move W27, 1
	070 Move X0, [X19+24]
	071 Compare X0, 0
	072 JumpIfEqual {132}
	073 Move W1, W22
	074 Call X509ChainElementCollection.get_Item, X0, X1
	075 Move X24, X0
	076 Move TEMP, X26
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {82}
	080 Compare X24, 0
	081 JumpIfNotEqual {106}
	082 Compare X24, 0
	083 JumpIfEqual {132}
	084 Move W8, [X24+40]
	085 Move TEMP, X8
	086 And TEMP, TEMP, 8
	087 Compare TEMP, 8
	088 JumpIfEqual {106}
	089 Move W26, W31
	090 Move TEMP, X20
	091 And TEMP, TEMP, 0x10000
	092 Compare TEMP, 0x10000
	093 JumpIfEqual {110}
	094 Xor W8, W27, 1
	095 Move TEMP, X8
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {110}
	099 Move X1, [X24+16]
	100 Call X509ChainImplMono.IsSelfIssued, X0, X1
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {111}
	105 Move W26, W31
	106 Move W8, [X24+40]
	107 Move W26, 1
	108 Or W8, W8, W25
	109 Move [X24+40], W8
	110 Subtract W22, W22, 1
	111 Move X1, [X24+16]
	112 Move W26, [X24+40]
	113 Move X0, X19
	114 Move W2, W23
	115 Move W3, W21
	116 Call X509ChainImplMono.CheckRevocation, X0, X1, X2, X3
	117 Or W8, W0, W26
	118 Move W26, W8
	119 ShiftRight W26, 2
	120 And W26, W26, 3
	121 Move X20, [X31+64]
	122 Move X19, [X31+72]
	123 Move X22, [X31+48]
	124 Move X21, [X31+56]
	125 Move X24, [X31+32]
	126 Move X23, [X31+40]
	127 Move X26, [X31+16]
	128 Move X25, [X31+24]
	129 Move X30, [X31+80]
	130 Move X27, [X31+88]
	131 Return 
	132 Call 0x1C17F20
	133 Move X0, 0xAE1000
	134 Move X0, [X0+3216]
	135 Call 0x1C17D08
	136 Move X1, X31
	137 Call Locale.GetText, X0
	138 Move X19, X0
	139 Move X0, 0xA98000
	140 Move X0, [X0+1456]
	141 Call 0x1C17D08
	142 Call 0x1C17F10
	143 Move X1, X19
	144 Move X2, X31
	145 Move X20, X0
	146 Call InvalidOperationException..ctor, X0, X1
	147 Move X0, 0xAE1000
	148 Move X0, [X0+3224]
	149 Call 0x1C17D08
	150 Move X1, X0
	151 Move X0, X20
	152 Call 0x1C17DEC

Method: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CheckRevocation(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Int32 ca, System.Boolean online)

Disassembly:
	0x0365CF38 BL 0x1C16DEC
	0x0365CF3C LDR X0, [X0 + 0x48]
	0x0365CF40 RET
	0x0365CF44 LDR W0, [X0]
	0x0365CF48 RET
	0x0365CF4C STR W1, [X0]
	0x0365CF50 RET
	0x0365CF54 STR X1, [X0 + 0x8]
	0x0365CF58 RET
	0x0365CF5C STP X30, X25, [X31 - 0x40]!
	0x0365CF60 STP X24, X23, [X31 + 0x10]
	0x0365CF64 STP X22, X21, [X31 + 0x20]
	0x0365CF68 STP X20, X19, [X31 + 0x30]
	0x0365CF6C ADRP X20, 0xD84000
	0x0365CF70 LDRB W8, [X20 + 0x683]
	0x0365CF74 MOV X21, X1
	0x0365CF78 MOV X19, X0
	0x0365CF7C TBNZ X8, 0x0, 0x365CFAC
	0x0365CF80 ADRP X0, 0xAC4000
	0x0365CF84 LDR X0, [X0 + 0xB98]
	0x0365CF88 BL 0x1C16CF4
	0x0365CF8C ADRP X0, 0xAE0000
	0x0365CF90 LDR X0, [X0 + 0xCC0]
	0x0365CF94 BL 0x1C16CF4
	0x0365CF98 ADRP X0, 0xAE0000
	0x0365CF9C LDR X0, [X0 + 0x7E0]
	0x0365CFA0 BL 0x1C16CF4
	0x0365CFA4 MOVZ W8, 0x1
	0x0365CFA8 STRB W8, [X20 + 0x683]
	0x0365CFAC CBZ X21, 0x365D150
	0x0365CFB0 LDR X8, [X21 + 0x18]
	0x0365CFB4 CBZ X8, 0x365D150
	0x0365CFB8 CBZ W8, 0x365D09C
	0x0365CFBC LDRB W8, [X21 + 0x20]
	0x0365CFC0 CMP W8, 0x30
	0x0365CFC4 B.NE 0x365D088
	0x0365CFC8 LDR X8, [X19 + 0x28]
	0x0365CFCC CBNZ X8, 0x365CFEC
	0x0365CFD0 ADRP X8, 0xAE0000
	0x0365CFD4 LDR X8, [X8 + 0xCC0]
	0x0365CFD8 LDR X0, [X8]
	0x0365CFDC BL 0x1C16F10
	0x0365CFE0 MOV X20, X0
	0x0365CFE4 BL 0x364DEE4
	0x0365CFE8 STR X20, [X19 + 0x28]
	0x0365CFEC ADRP X8, 0xAC4000
	0x0365CFF0 LDR X8, [X8 + 0xB98]
	0x0365CFF4 LDR X0, [X8]
	0x0365CFF8 BL 0x1C16F10
	0x0365CFFC MOV X20, X0
	0x0365D000 MOV X1, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, X0
	008 Move X0, [X0+24]
	009 Compare X0, 0
	010 JumpIfEqual {64}
	011 Move W19, W3
	012 Move W21, W2
	013 Move X22, X1
	014 Move W1, W21
	015 Call X509ChainElementCollection.get_Item, X0, X1
	016 Compare X0, 0
	017 JumpIfEqual {64}
	018 Move X23, [X0+16]
	019 Move X1, X23
	020 Call X509ChainImplMono.IsSelfIssued, X0, X1
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {47}
	025 Move X8, [X20+24]
	026 Compare X8, 0
	027 JumpIfEqual {64}
	028 Move X0, [X8+16]
	029 Compare X0, 0
	030 JumpIfEqual {64}
	031 Move X8, [X0]
	032 Move X9, [X8+664]
	033 Move X1, [X8+672]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Subtract W8, W0, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 And W3, W19, 1
	038 Move X0, X20
	039 Move X1, X22
	040 Move X2, X23
	041 Call X509ChainImplMono.CheckRevocation, X0, X1, X2, X3
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, [X20+24]
	044 Compare X0, 0
	045 JumpIfEqual {64}
	046 Add W21, W21, 1
	047 And W3, W19, 1
	048 Move X0, X20
	049 Move X1, X22
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X2, X23
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Return X0
	064 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CheckRevocation(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Security.Cryptography.X509Certificates.X509Certificate2 ca_cert, System.Boolean online)

Disassembly:
	0x0365D004 MOV X2, X31
	0x0365D008 BL 0x31E7A44
	0x0365D00C CBZ X20, 0x365D0A0
	0x0365D010 LDRB W8, [X20 + 0x10]
	0x0365D014 CMP W8, 0x30
	0x0365D018 B.NE 0x365D0A4
	0x0365D01C ADRP X25, 0xADF000
	0x0365D020 LDR X25, [X25 + 0x7E0]
	0x0365D024 MOV W21, W31
	0x0365D028 MOV X0, X20
	0x0365D02C MOV X1, X31
	0x0365D030 BL 0x31E7CC4
	0x0365D034 CMP W21, W0
	0x0365D038 B.GE 0x365D090
	0x0365D03C LDR X22, [X19 + 0x28]
	0x0365D040 MOV X0, X20
	0x0365D044 MOV W1, W21
	0x0365D048 MOV X2, X31
	0x0365D04C BL 0x31E8704
	0x0365D050 MOV X1, X31
	0x0365D054 BL 0x31E909C
	0x0365D058 MOV X24, X0
	0x0365D05C LDR X0, [X25]
	0x0365D060 BL 0x1C16F10
	0x0365D064 MOV X23, X0
	0x0365D068 MOV X1, X24
	0x0365D06C BL 0x364DBB0
	0x0365D070 CBZ X22, 0x365D098
	0x0365D074 MOV X0, X22
	0x0365D078 MOV X1, X23
	0x0365D07C BL 0x364DF64
	0x0365D080 ADD W21, W21, 0x1
	0x0365D084 B 0x365D028
	0x0365D088 MOVZ W0, 0x2
	0x0365D08C B 0x365D154
	0x0365D090 MOV W0, W31
	0x0365D094 B 0x365D154
	0x0365D098 BL 0x1C16F20
	0x0365D09C BL 0x1C16F28
	0x0365D0A0 BL 0x1C16F20
	0x0365D0A4 ADRP X0, 0xADF000
	0x0365D0A8 LDR X0, [X0 + 0xCE8]
	0x0365D0AC BL 0x1C16D08
	0x0365D0B0 MOV X1, X31
	0x0365D0B4 BL 0x320A160
	0x0365D0B8 MOV X19, X0
	0x0365D0BC ADRP X0, 0xAC3000
	0x0365D0C0 LDR X0, [X0 + 0xCE0]
	0x0365D0C4 BL 0x1C16D08
	0x0365D0C8 BL 0x1C16F10
	0x0365D0CC MOV X20, X0
	0x0365D0D0 MOV X1, X19
	0x0365D0D4 MOV X2, X31
	0x0365D0D8 BL 0x3252170
	0x0365D0DC ADRP X0, 0xADF000
	0x0365D0E0 LDR X0, [X0 + 0xCF0]
	0x0365D0E4 BL 0x1C16D08
	0x0365D0E8 MOV X1, X0
	0x0365D0EC MOV X0, X20
	0x0365D0F0 BL 0x1C16DEC
	0x0365D0F4 B 0x365D118
	0x0365D0F8 B 0x365D118
	0x0365D0FC B 0x365D118
	0x0365D100 B 0x365D118
	0x0365D104 B 0x365D118
	0x0365D108 B 0x365D118
	0x0365D10C B 0x365D118
	0x0365D110 B 0x365D118
	0x0365D114 B 0x365D118
	0x0365D118 MOV X19, X0
	0x0365D11C CMP W1, 0x1
	0x0365D120 B.NE 0x365D190
	0x0365D124 MOV X0, X19
	0x0365D128 BL 0x3EB1AD0
	0x0365D12C MOV X19, X0
	0x0365D130 ADRP X0, 0xA9C000
	0x0365D134 LDR X0, [X0 + 0xCC0]
	0x0365D138 BL 0x1C16D08
	0x0365D13C LDR X8, [X19]
	0x0365D140 LDR X1, [X8]
	0x0365D144 BL 0x1C17270
	0x0365D148 TBZ X0, 0x0, 0x365D168
	0x0365D14C BL 0x3EB1AE0
	0x0365D150 MOVZ W0, 0x1
	0x0365D154 LDP X20, X19, [X31 + 0x30]
	0x0365D158 LDP X22, X21, [X31 + 0x20]
	0x0365D15C LDP X24, X23, [X31 + 0x10]
	0x0365D160 LDP X30, X25, [X31], #0x40
	0x0365D164 RET
	0x0365D168 MOVZ W0, 0x8
	0x0365D16C BL 0x3EB1AF0
	0x0365D170 LDR X8, [X19]
	0x0365D174 STR X8, [X0]
	0x0365D178 ADRP X1, 0x857000
	0x0365D17C ADD X1, X1, 0xE58
	0x0365D180 MOV X2, X31
	0x0365D184 BL 0x3EB1B00
	0x0365D188 MOV X19, X0
	0x0365D18C BL 0x3EB1AE0
	0x0365D190 MOV X0, X19
	0x0365D194 BL 0x1D2C690
	0x0365D198 BL 0x1990590
	0x0365D19C STP X30, X25, [X31 - 0x40]!
	0x0365D1A0 STP X24, X23, [X31 + 0x10]
	0x0365D1A4 STP X22, X21, [X31 + 0x20]
	0x0365D1A8 STP X20, X19, [X31 + 0x30]
	0x0365D1AC ADRP X22, 0xD83000
	0x0365D1B0 LDRB W8, [X22 + 0x680]
	0x0365D1B4 MOV W21, W2
	0x0365D1B8 MOV X20, X1
	0x0365D1BC MOV X19, X0
	0x0365D1C0 TBNZ X8, 0x0, 0x365D1FC
	0x0365D1C4 ADRP X0, 0xADF000
	0x0365D1C8 LDR X0, [X0 + 0xCC0]
	0x0365D1CC BL 0x1C16CF4
	0x0365D1D0 ADRP X0, 0xADF000
	0x0365D1D4 LDR X0, [X0 + 0x7E0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD84000
	007 Move W8, [X20+1653]
	008 Move X22, X2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xA98000
	016 Move X0, [X0+2544]
	017 Call 0x1C17CF4
	018 Move X0, 0xAE0000
	019 Move X0, [X0+2160]
	020 Call 0x1C17CF4
	021 Move X0, 0xAC7000
	022 Move X0, [X0+1904]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1653], W8
	026 Compare X22, 0
	027 JumpIfEqual {147}
	028 Move X0, X22
	029 Call X509Certificate2.get_Extensions, X0
	030 Compare X0, 0
	031 JumpIfEqual {147}
	032 Move X8, 0xAC7000
	033 Move X8, [X8+1904]
	034 Move X1, [X8]
	035 Call X509ExtensionCollection.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {48}
	038 Move X8, 0xAE0000
	039 Move X8, [X8+2160]
	040 Move X9, [X0]
	041 Move X8, [X8]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Call X509KeyUsageExtension.get_KeyUsages, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 2
	046 Compare TEMP, 2
	047 JumpIfNotEqual {108}
	048 Move X0, X19
	049 Move X1, X22
	050 Call X509ChainImplMono.FindCrl, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {108}
	053 Move X20, X0
	054 Move X0, X22
	055 Call X509Certificate2.get_PublicKey, X0
	056 Compare X0, 0
	057 JumpIfEqual {147}
	058 Call PublicKey.get_Key, X0
	059 Move X1, X0
	060 Move X0, X20
	061 Move X2, X31
	062 Call X509Crl.VerifySignature, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {108}
	067 Move X0, X21
	068 Call X509Helper2.GetMonoCertificate, X0
	069 Move X1, X0
	070 Move X0, X20
	071 Move X2, X31
	072 Call X509Crl.GetCrlEntry, X0, X1
	073 Compare X0, 0
	074 JumpIfEqual {115}
	075 Move X1, X0
	076 Move X21, X0
	077 Call X509ChainImplMono.ProcessCrlEntryExtensions, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {107}
	082 Move X8, [X19]
	083 Move X21, [X21+24]
	084 Move X0, X19
	085 Move X9, [X8+424]
	086 Move X1, [X8+432]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Compare X0, 0
	089 JumpIfEqual {147}
	090 Move X8, 0xA98000
	091 Move X8, [X8+2544]
	092 Move X22, [X0+72]
	093 Move X8, [X8]
	094 Move W9, [X8+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {99}
	097 Move X0, X8
	098 Call 0x1C17DFC
	099 Move X0, X21
	100 Move X1, X22
	101 Move X2, X31
	102 Call DateTime.op_LessThanOrEqual, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {115}
	107 Move W0, 4
	108 Move W0, 64
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Return X0
	115 Move X8, [X19]
	116 Move X21, [X20+40]
	117 Move X0, X19
	118 Move X9, [X8+424]
	119 Move X1, [X8+432]
	120 NotImplemented "Instruction BLR not yet implemented."
	121 Compare X0, 0
	122 JumpIfEqual {147}
	123 Move X8, 0xA98000
	124 Move X8, [X8+2544]
	125 Move X19, [X0+72]
	126 Move X8, [X8]
	127 Move W9, [X8+224]
	128 Compare W9, 0
	129 JumpIfNotEqual {132}
	130 Move X0, X8
	131 Call 0x1C17DFC
	132 Move X0, X21
	133 Move X1, X19
	134 Move X2, X31
	135 Call DateTime.op_LessThan, X0, X1
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {142}
	140 Move W0, 64
	141 NotImplemented "Instruction MOVK not yet implemented."
	142 Move X1, X20
	143 Call X509ChainImplMono.ProcessCrlExtensions, X0, X1
	144 And W31, W0, 1
	145 Move W8, 64
	146 NotImplemented "Instruction CSEL not yet implemented."
	147 Call 0x1C17F20

Method: Mono.Security.X509.X509Crl CheckCrls(System.String subject, System.String ski, Mono.Security.X509.X509Store store)

Disassembly:
	0x0365D994 STP X20, X19, [X31 + 0x10]
	0x0365D998 ADRP X21, 0xD83000
	0x0365D99C LDRB W8, [X21 + 0x686]
	0x0365D9A0 MOV X19, X1
	0x0365D9A4 MOV X20, X0
	0x0365D9A8 TBNZ X8, 0x0, 0x365D9C0
	0x0365D9AC ADRP X0, 0xADC000
	0x0365D9B0 LDR X0, [X0 + 0xF28]
	0x0365D9B4 BL 0x1C16CF4
	0x0365D9B8 MOVZ W8, 0x1
	0x0365D9BC STRB W8, [X21 + 0x686]
	0x0365D9C0 CBZ X19, 0x365DA68
	0x0365D9C4 ADRP X8, 0xADC000
	0x0365D9C8 LDR X8, [X8 + 0xF28]
	0x0365D9CC LDR X9, [X19]
	0x0365D9D0 LDR X8, [X8]
	0x0365D9D4 LDRB W11, [X9 + 0x130]
	0x0365D9D8 LDRB W10, [X8 + 0x130]
	0x0365D9DC CMP W11, W10
	0x0365D9E0 B.CC 0x365DA18
	0x0365D9E4 LDR X9, [X9 + 0xC8]
	0x0365D9E8 ADD X9, X9, X10, 0x3, LSL
	0x0365D9EC LDUR X9, [X9 - 0x8]
	0x0365D9F0 CMP X9, X8
	0x0365D9F4 B.NE 0x365DA18
	0x0365D9F8 MOV X0, X20
	0x0365D9FC MOV X1, X19
	0x0365DA00 BL 0x364E68C
	0x0365DA04 LDRB W8, [X19 + 0x20]
	0x0365DA08 STRB W8, [X20 + 0x20]
	0x0365DA0C LDP X20, X19, [X31 + 0x10]
	0x0365DA10 LDP X30, X21, [X31], #0x20
	0x0365DA14 RET
	0x0365DA18 ADRP X0, 0xADF000
	0x0365DA1C LDR X0, [X0 + 0xD38]
	0x0365DA20 BL 0x1C16D08
	0x0365DA24 MOV X1, X31
	0x0365DA28 BL 0x320A160
	0x0365DA2C MOV X19, X0
	0x0365DA30 ADRP X0, 0xA9E000
	0x0365DA34 LDR X0, [X0 + 0x578]
	0x0365DA38 BL 0x1C16D08
	0x0365DA3C BL 0x1C16F10
	0x0365DA40 MOV X1, X19
	0x0365DA44 MOV X2, X31
	0x0365DA48 MOV X20, X0
	0x0365DA4C BL 0x3314A68
	0x0365DA50 ADRP X0, 0xADF000
	0x0365DA54 LDR X0, [X0 + 0xD40]
	0x0365DA58 BL 0x1C16D08
	0x0365DA5C MOV X1, X0
	0x0365DA60 MOV X0, X20
	0x0365DA64 BL 0x1C16DEC
	0x0365DA68 ADRP X0, 0xA9B000
	0x0365DA6C LDR X0, [X0 + 0x528]
	0x0365DA70 BL 0x1C16D08
	0x0365DA74 BL 0x1C16F10
	0x0365DA78 MOV X19, X0
	0x0365DA7C ADRP X0, 0xADF000
	0x0365DA80 LDR X0, [X0 + 0xD18]
	0x0365DA84 BL 0x1C16D08
	0x0365DA88 MOV X1, X0
	0x0365DA8C MOV X0, X19
	0x0365DA90 MOV X2, X31
	0x0365DA94 BL 0x330E100
	0x0365DA98 ADRP X0, 0xADF000
	0x0365DA9C LDR X0, [X0 + 0xD40]
	0x0365DAA0 BL 0x1C16D08
	0x0365DAA4 MOV X1, X0
	0x0365DAA8 MOV X0, X19
	0x0365DAAC BL 0x1C16DEC
	0x0365DAB0 STR X30, [X31 - 0x10]!
	0x0365DAB4 LDR X0, [X0 + 0x10]
	0x0365DAB8 CBZ X0, 0x365DAD0
	0x0365DABC LDR X8, [X0]
	0x0365DAC0 LDR X2, [X8 + 0x2C8]
	0x0365DAC4 LDR X1, [X8 + 0x2D0]
	0x0365DAC8 LDR X30, [X31], #0x10
	0x0365DACC BR X2
	0x0365DAD0 BL 0x1C16F20
	0x0365DAD4 RET
	0x0365DAD8 STP X30, X21, [X31 - 0x20]!
	0x0365DADC STP X20, X19, [X31 + 0x10]
	0x0365DAE0 CBZ X1, 0x365DB30
	0x0365DAE4 MOV W19, W2
	0x0365DAE8 TBNZ X2, 0x1F, 0x365DB64
	0x0365DAEC MOV X20, X1
	0x0365DAF0 MOV X21, X0
	0x0365DAF4 MOV X0, X1
	0x0365DAF8 MOV X1, X31
	0x0365DAFC BL 0x3395B7C
	0x0365DB00 CMP W0, W19
	0x0365DB04 B.LE 0x365DB84
	0x0365DB08 LDR X0, [X21 + 0x10]
	0x0365DB0C CBZ X0, 0x365DBCC
	0x0365DB10 LDR X8, [X0]
	0x0365DB14 MOV X1, X20
	0x0365DB18 MOV W2, W19
	0x0365DB1C LDP X20, X19, [X31 + 0x10]
	0x0365DB20 LDR X4, [X8 + 0x368]
	0x0365DB24 LDR X3, [X8 + 0x370]
	0x0365DB28 LDP X30, X21, [X31], #0x20
	0x0365DB2C BR X4
	0x0365DB30 ADRP X0, 0xA9B000
	0x0365DB34 LDR X0, [X0 + 0x528]
	0x0365DB38 BL 0x1C16D08
	0x0365DB3C BL 0x1C16F10
	0x0365DB40 MOV X19, X0
	0x0365DB44 ADRP X0, 0xABE000
	0x0365DB48 LDR X0, [X0 + 0x640]
	0x0365DB4C BL 0x1C16D08
	0x0365DB50 MOV X1, X0
	0x0365DB54 MOV X0, X19
	0x0365DB58 MOV X2, X31
	0x0365DB5C BL 0x330E100
	0x0365DB60 B 0x365DBB4
	0x0365DB64 ADRP X0, 0xA9E000
	0x0365DB68 LDR X0, [X0 + 0x760]
	0x0365DB6C BL 0x1C16D08
	0x0365DB70 BL 0x1C16F10
	0x0365DB74 MOV X19, X0
	0x0365DB78 ADRP X0, 0xADF000
	0x0365DB7C LDR X0, [X0 + 0xAA8]
	0x0365DB80 B 0x365DBA0
	0x0365DB84 ADRP X0, 0xA9E000
	0x0365DB88 LDR X0, [X0 + 0x760]
	0x0365DB8C BL 0x1C16D08
	0x0365DB90 BL 0x1C16F10
	0x0365DB94 MOV X19, X0
	0x0365DB98 ADRP X0, 0xADF000
	0x0365DB9C LDR X0, [X0 + 0xD48]
	0x0365DBA0 BL 0x1C16D08
	0x0365DBA4 MOV X1, X0
	0x0365DBA8 MOV X0, X19
	0x0365DBAC MOV X2, X31
	0x0365DBB0 BL 0x3316014
	0x0365DBB4 ADRP X0, 0xADF000
	0x0365DBB8 LDR X0, [X0 + 0xD50]
	0x0365DBBC BL 0x1C16D08
	0x0365DBC0 MOV X1, X0
	0x0365DBC4 MOV X0, X19
	0x0365DBC8 BL 0x1C16DEC
	0x0365DBCC BL 0x1C16F20
	0x0365DBD0 STR X30, [X31 - 0x20]!
	0x0365DBD4 STP X20, X19, [X31 + 0x10]
	0x0365DBD8 MOV X20, X1
	0x0365DBDC MOV X1, X31
	0x0365DBE0 MOV X19, X0
	0x0365DBE4 BL 0x33BDD8C
	0x0365DBE8 CBZ X20, 0x365DC10
	0x0365DBEC LDR X8, [X20]
	0x0365DBF0 MOV X0, X20
	0x0365DBF4 LDR X9, [X8 + 0x388]
	0x0365DBF8 LDR X1, [X8 + 0x390]
	0x0365DBFC BLR X9
	0x0365DC00 STR X0, [X19 + 0x10]
	0x0365DC04 LDP X20, X19, [X31 + 0x10]
	0x0365DC08 LDR X30, [X31], #0x20
	0x0365DC0C RET
	0x0365DC10 BL 0x1C16F20
	0x0365DC14 STP X30, X21, [X31 - 0x20]!
	0x0365DC18 STP X20, X19, [X31 + 0x10]
	0x0365DC1C ADRP X21, 0xD83000
	0x0365DC20 ADRP X20, 0xADF000
	0x0365DC24 LDRB W8, [X21 + 0x68B]
	0x0365DC28 LDR X20, [X20 + 0xA90]
	0x0365DC2C MOV X19, X0
	0x0365DC30 TBNZ X8, 0x0, 0x365DC48
	0x0365DC34 ADRP X0, 0xADF000
	0x0365DC38 LDR X0, [X0 + 0xA90]
	0x0365DC3C BL 0x1C16CF4
	0x0365DC40 MOVZ W8, 0x1
	0x0365DC44 STRB W8, [X21 + 0x68B]
	0x0365DC48 LDR X0, [X20]
	0x0365DC4C LDR X19, [X19 + 0x10]
	0x0365DC50 BL 0x1C16F10
	0x0365DC54 MOV X1, X19
	0x0365DC58 MOV X20, X0
	0x0365DC5C BL 0x365DBD0
	0x0365DC60 MOV X0, X20
	0x0365DC64 LDP X20, X19, [X31 + 0x10]
	0x0365DC68 LDP X30, X21, [X31], #0x20
	0x0365DC6C RET
	0x0365DC70 STP X30, X21, [X31 - 0x20]!
	0x0365DC74 STP X20, X19, [X31 + 0x10]
	0x0365DC78 ADRP X20, 0xD83000
	0x0365DC7C ADRP X21, 0xA96000
	0x0365DC80 ADRP X19, 0xADF000
	0x0365DC84 LDRB W8, [X20 + 0x68C]
	0x0365DC88 LDR X21, [X21 + 0x618]
	0x0365DC8C LDR X19, [X19 + 0x9D8]
	0x0365DC90 TBNZ X8, 0x0, 0x365DCB4
	0x0365DC94 ADRP X0, 0xA96000
	0x0365DC98 LDR X0, [X0 + 0x618]
	0x0365DC9C BL 0x1C16CF4
	0x0365DCA0 ADRP X0, 0xADF000
	0x0365DCA4 LDR X0, [X0 + 0x9D8]
	0x0365DCA8 BL 0x1C16CF4
	0x0365DCAC MOVZ W8, 0x1
	0x0365DCB0 STRB W8, [X20 + 0x68C]
	0x0365DCB4 LDR X0, [X21]
	0x0365DCB8 MOV W1, W31
	0x0365DCBC BL 0x1C16D6C
	0x0365DCC0 LDR X8, [X19]
	0x0365DCC4 LDP X20, X19, [X31 + 0x10]
	0x0365DCC8 LDR X8, [X8 + 0xB8]
	0x0365DCCC STR X0, [X8]
	0x0365DCD0 LDP X30, X21, [X31], #0x20
	0x0365DCD4 RET
	0x0365DCD8 STR X30, [X31 - 0x20]!
	0x0365DCDC STP X20, X19, [X31 + 0x10]
	0x0365DCE0 ADRP X20, 0xD83000
	0x0365DCE4 LDRB W8, [X20 + 0x68E]
	0x0365DCE8 MOV X19, X0
	0x0365DCEC TBNZ X8, 0x0, 0x365DD04
	0x0365DCF0 ADRP X0, 0xA96000
	0x0365DCF4 LDR X0, [X0 + 0xE18]
	0x0365DCF8 BL 0x1C16CF4
	0x0365DCFC MOVZ W8, 0x1
	0x0365DD00 STRB W8, [X20 + 0x68E]
	0x0365DD04 LDR X19, [X19 + 0x10]
	0x0365DD08 CBZ X19, 0x365DD78
	0x0365DD0C ADRP X10, 0xA96000
	0x0365DD10 LDR X8, [X19]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0xD84000
	011 Move W8, [X22+1654]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0xA97000
	020 Move X0, [X0+3584]
	021 Call 0x1C17CF4
	022 Move X0, 0xA97000
	023 Move X0, [X0+3608]
	024 Call 0x1C17CF4
	025 Move X0, 0xAE0000
	026 Move X0, [X0+3064]
	027 Call 0x1C17CF4
	028 Move X0, 0xAC5000
	029 Move X0, [X0+648]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+1654], W8
	033 Compare X19, 0
	034 JumpIfEqual {143}
	035 Move X0, X19
	036 Move X1, X31
	037 Call X509Store.get_Crls, X0
	038 Compare X0, 0
	039 JumpIfEqual {190}
	040 Move X8, [X0]
	041 Move X23, 0xA97000
	042 Move X9, [X8+904]
	043 Move X1, [X8+912]
	044 Move X23, [X23+3584]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X19, X0
	047 Compare X0, 0
	048 JumpIfEqual {191}
	049 Move X24, 0xA97000
	050 Move X25, 0xAC5000
	051 Move X26, 0xAE0000
	052 Move X24, [X24+3608]
	053 Move X25, [X25+648]
	054 Move X26, [X26+3064]
	055 Move X8, [X19]
	056 Move X1, [X24]
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Compare X9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move X0, X19
	067 Move W2, W31
	068 Call 0x1C5D788
	069 NotImplemented "Instruction LDRSW not yet implemented."
	070 Add X8, X8, X9
	071 Add X0, X8, 312
	072 Move X8, [X0]
	073 Move X1, [X0+8]
	074 Move X0, X19
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {144}
	080 Move X8, [X19]
	081 Move X1, [X24]
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Compare X9, 0
	084 JumpIfEqual {91}
	085 Move X10, [X8+176]
	086 Add X10, X10, 8
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Subtract X9, X9, 1
	090 Add X10, X10, 16
	091 Move W2, 1
	092 Move X0, X19
	093 Call 0x1C5D788
	094 Move W9, [X10]
	095 Add W9, W9, 1
	096 Add X8, X8, W9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X19
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X22, X0
	103 Compare X0, 0
	104 JumpIfEqual {188}
	105 Move X8, [X22]
	106 Move X1, [X25]
	107 Move W10, [X8+304]
	108 Move W9, [X1+304]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X8, [X8+200]
	111 Add X8, X8, X9
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, [X22+16]
	115 Move X1, X21
	116 Move X2, X31
	117 Call String.op_Equality, X0, X1
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {55}
	122 Compare X20, 0
	123 JumpIfEqual {189}
	124 Move W8, [X20+16]
	125 Compare W8, 0
	126 JumpIfEqual {142}
	127 Move X0, [X26]
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move X0, X22
	133 Call X509ChainImplMono.GetAuthorityKeyIdentifier, X0
	134 Move X1, X0
	135 Move X0, X20
	136 Move X2, X31
	137 Call String.op_Equality, X0, X1
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {55}
	142 Move X20, X31
	143 Move X22, X31
	144 Move X20, X31
	145 Move X22, X31
	146 Move X1, [X23]
	147 Move X0, X19
	148 Call 0x1C17E00
	149 Compare X0, 0
	150 JumpIfEqual {173}
	151 Move X8, [X0]
	152 Move X1, [X23]
	153 Move X19, X0
	154 NotImplemented "Instruction LDRH not yet implemented."
	155 Compare X9, 0
	156 JumpIfEqual {163}
	157 Move X10, [X8+176]
	158 Add X10, X10, 8
	159 NotImplemented "Instruction LDUR not yet implemented."
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Subtract X9, X9, 1
	162 Add X10, X10, 16
	163 Move X0, X19
	164 Move W2, W31
	165 Call 0x1C5D788
	166 NotImplemented "Instruction LDRSW not yet implemented."
	167 Add X8, X8, X9
	168 Add X0, X8, 312
	169 Move X8, [X0]
	170 Move X1, [X0+8]
	171 Move X0, X19
	172 NotImplemented "Instruction BLR not yet implemented."
	173 Compare X20, 0
	174 JumpIfNotEqual {192}
	175 Move X0, X22
	176 Move X20, [X31+64]
	177 Move X19, [X31+72]
	178 Move X22, [X31+48]
	179 Move X21, [X31+56]
	180 Move X24, [X31+32]
	181 Move X23, [X31+40]
	182 Move X26, [X31+16]
	183 Move X25, [X31+24]
	184 Move X30, [X31+80]
	185 Return X0
	186 Move X0, X22
	187 Call 0x1C181E0
	188 Call 0x1C17F20
	189 Call 0x1C17F20
	190 Call 0x1C17F20
	191 Call 0x1C17F20
	192 Move X0, X20
	193 Call 0x1C17F18
	194 Move X21, X0
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move X0, X21
	197 Call 0x3EB2AD0
	198 Move X20, [X0]
	199 Call 0x3EB2AE0
	200 Move X20, X31
	201 Move X21, X0
	202 Move X1, [X23]
	203 Move X0, X19
	204 Call 0x1C17E00
	205 Move X19, X0
	206 Compare X0, 0
	207 JumpIfEqual {229}
	208 Move X8, [X19]
	209 Move X1, [X23]
	210 NotImplemented "Instruction LDRH not yet implemented."
	211 Compare X9, 0
	212 JumpIfEqual {219}
	213 Move X10, [X8+176]
	214 Add X10, X10, 8
	215 NotImplemented "Instruction LDUR not yet implemented."
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Subtract X9, X9, 1
	218 Add X10, X10, 16
	219 Move X0, X19
	220 Move W2, W31
	221 Call 0x1C5D788
	222 NotImplemented "Instruction LDRSW not yet implemented."
	223 Add X8, X8, X9
	224 Add X0, X8, 312
	225 Move X8, [X0]
	226 Move X1, [X0+8]
	227 Move X0, X19
	228 NotImplemented "Instruction BLR not yet implemented."
	229 Compare X20, 0
	230 JumpIfNotEqual {233}
	231 Move X0, X21
	232 Call 0x1D2D690
	233 Move X0, X20
	234 Call 0x1C17F18
	235 Call 0x1991590

Method: Mono.Security.X509.X509Crl FindCrl(System.Security.Cryptography.X509Certificates.X509Certificate2 caCertificate)

Disassembly:
	0x0365D1D8 BL 0x1C16CF4
	0x0365D1DC ADRP X0, 0xADF000
	0x0365D1E0 LDR X0, [X0 + 0x8E0]
	0x0365D1E4 BL 0x1C16CF4
	0x0365D1E8 ADRP X0, 0xAC6000
	0x0365D1EC LDR X0, [X0 + 0x5C8]
	0x0365D1F0 BL 0x1C16CF4
	0x0365D1F4 MOVZ W8, 0x1
	0x0365D1F8 STRB W8, [X22 + 0x680]
	0x0365D1FC MOV X0, X19
	0x0365D200 MOV X1, X31
	0x0365D204 BL 0x33BDD8C
	0x0365D208 CBZ X20, 0x365D2D0
	0x0365D20C ADRP X8, 0xADF000
	0x0365D210 LDR X8, [X8 + 0x7E0]
	0x0365D214 ADRP X22, 0xAC6000
	0x0365D218 ADRP X23, 0xADF000
	0x0365D21C ADRP X24, 0xADF000
	0x0365D220 LDR X0, [X8]
	0x0365D224 LDR X22, [X22 + 0x5C8]
	0x0365D228 LDR X23, [X23 + 0x8E0]
	0x0365D22C LDR X24, [X24 + 0xCC0]
	0x0365D230 BL 0x1C16F10
	0x0365D234 LDR X25, [X22]
	0x0365D238 LDR X23, [X23]
	0x0365D23C MOV X1, X31
	0x0365D240 MOV X22, X0
	0x0365D244 BL 0x33BDD8C
	0x0365D248 AND W8, W21, 0x1
	0x0365D24C STP X25, X23, [X22 + 0x10]
	0x0365D250 STR X22, [X19 + 0x10]
	0x0365D254 STRB W8, [X19 + 0x20]
	0x0365D258 LDR X0, [X24]
	0x0365D25C BL 0x1C16F10
	0x0365D260 MOV X21, X0
	0x0365D264 BL 0x364DEE4
	0x0365D268 MOV X0, X20
	0x0365D26C STR X21, [X19 + 0x28]
	0x0365D270 BL 0x364E0B4
	0x0365D274 CBZ X0, 0x365D2CC
	0x0365D278 MOV X20, X0
	0x0365D27C MOV X0, X20
	0x0365D280 BL 0x364E328
	0x0365D284 TBZ X0, 0x0, 0x365D2A8
	0x0365D288 MOV X0, X20
	0x0365D28C BL 0x364E304
	0x0365D290 LDR X8, [X19 + 0x28]
	0x0365D294 CBZ X8, 0x365D2CC
	0x0365D298 MOV X1, X0
	0x0365D29C MOV X0, X8
	0x0365D2A0 BL 0x364DF64
	0x0365D2A4 B 0x365D27C
	0x0365D2A8 MOV X0, X19
	0x0365D2AC BL 0x365D318
	0x0365D2B0 MOV X1, X0
	0x0365D2B4 MOV X0, X19
	0x0365D2B8 LDP X20, X19, [X31 + 0x30]
	0x0365D2BC LDP X22, X21, [X31 + 0x20]
	0x0365D2C0 LDP X24, X23, [X31 + 0x10]
	0x0365D2C4 LDP X30, X25, [X31], #0x40
	0x0365D2C8 B 0x364E404
	0x0365D2CC BL 0x1C16F20
	0x0365D2D0 ADRP X0, 0xA9B000
	0x0365D2D4 LDR X0, [X0 + 0x528]
	0x0365D2D8 BL 0x1C16D08
	0x0365D2DC BL 0x1C16F10
	0x0365D2E0 MOV X19, X0
	0x0365D2E4 ADRP X0, 0xADF000
	0x0365D2E8 LDR X0, [X0 + 0xCF8]
	0x0365D2EC BL 0x1C16D08
	0x0365D2F0 MOV X1, X0
	0x0365D2F4 MOV X0, X19
	0x0365D2F8 MOV X2, X31
	0x0365D2FC BL 0x330E100
	0x0365D300 ADRP X0, 0xADF000
	0x0365D304 LDR X0, [X0 + 0xD00]
	0x0365D308 BL 0x1C16D08
	0x0365D30C MOV X1, X0
	0x0365D310 MOV X0, X19
	0x0365D314 BL 0x1C16DEC
	0x0365D318 STP X30, X21, [X31 - 0x20]!
	0x0365D31C STP X20, X19, [X31 + 0x10]
	0x0365D320 ADRP X19, 0xD83000
	0x0365D324 ADRP X21, 0xAC3000
	0x0365D328 LDRB W8, [X19 + 0x684]
	0x0365D32C LDR X21, [X21 + 0xB98]
	0x0365D330 MOV X20, X0
	0x0365D334 TBNZ X8, 0x0, 0x365D34C
	0x0365D338 ADRP X0, 0xAC3000
	0x0365D33C LDR X0, [X0 + 0xB98]
	0x0365D340 BL 0x1C16CF4
	0x0365D344 MOVZ W8, 0x1
	0x0365D348 STRB W8, [X19 + 0x684]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD84000
	008 Move W8, [X20+1655]
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAE0000
	016 Move X0, [X0+3064]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1655], W8
	020 Compare X21, 0
	021 JumpIfEqual {114}
	022 Move X0, X21
	023 Call X509Certificate2.get_SubjectName, X0
	024 Compare X0, 0
	025 JumpIfEqual {114}
	026 Move W1, W31
	027 Call X500DistinguishedName.Decode, X0, X1
	028 Move X1, X21
	029 Move X20, X0
	030 Call X509ChainImplMono.GetSubjectKeyIdentifier, X0, X1
	031 Move X21, X0
	032 Move X0, X19
	033 Call X509ChainImplMono.get_LMCAStore, X0
	034 Compare X0, 0
	035 JumpIfEqual {114}
	036 Move X23, 0xAE0000
	037 Move X23, [X23+3064]
	038 Move X22, [X0+48]
	039 Move X8, [X23]
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X21
	047 Move X2, X22
	048 Call X509ChainImplMono.CheckCrls, X0, X1, X2
	049 Compare X0, 0
	050 JumpIfNotEqual {107}
	051 Move W8, [X19+16]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, X19
	054 Call X509ChainImplMono.get_UserCAStore, X0
	055 Compare X0, 0
	056 JumpIfEqual {114}
	057 Move X8, [X23]
	058 Move X22, [X0+48]
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X20
	065 Move X1, X21
	066 Move X2, X22
	067 Call X509ChainImplMono.CheckCrls, X0, X1, X2
	068 Compare X0, 0
	069 JumpIfNotEqual {107}
	070 Move X0, X19
	071 Call X509ChainImplMono.get_LMRootStore, X0
	072 Compare X0, 0
	073 JumpIfEqual {114}
	074 Move X8, [X23]
	075 Move X22, [X0+48]
	076 Move W9, [X8+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {81}
	079 Move X0, X8
	080 Call 0x1C17DFC
	081 Move X0, X20
	082 Move X1, X21
	083 Move X2, X22
	084 Call X509ChainImplMono.CheckCrls, X0, X1, X2
	085 Compare X0, 0
	086 JumpIfNotEqual {107}
	087 Move W8, [X19+16]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X0, X19
	090 Call X509ChainImplMono.get_UserRootStore, X0
	091 Compare X0, 0
	092 JumpIfEqual {114}
	093 Move X8, [X23]
	094 Move X19, [X0+48]
	095 Move W9, [X8+224]
	096 Compare W9, 0
	097 JumpIfNotEqual {100}
	098 Move X0, X8
	099 Call 0x1C17DFC
	100 Move X0, X20
	101 Move X1, X21
	102 Move X2, X19
	103 Call X509ChainImplMono.CheckCrls, X0, X1, X2
	104 Compare X0, 0
	105 JumpIfNotEqual {107}
	106 Move X0, X31
	107 Move X20, [X31+32]
	108 Move X19, [X31+40]
	109 Move X22, [X31+16]
	110 Move X21, [X31+24]
	111 Move X30, [X31+48]
	112 Move X23, [X31+56]
	113 Return X0
	114 Call 0x1C17F20

Method: System.Boolean ProcessCrlExtensions(Mono.Security.X509.X509Crl crl)

Disassembly:
	0x0365D654 ADRP X0, 0xADF000
	0x0365D658 LDR X0, [X0 + 0xD18]
	0x0365D65C BL 0x1C16D08
	0x0365D660 MOV X1, X0
	0x0365D664 MOV X0, X19
	0x0365D668 MOV X2, X31
	0x0365D66C BL 0x330E100
	0x0365D670 ADRP X0, 0xADF000
	0x0365D674 LDR X0, [X0 + 0xD10]
	0x0365D678 BL 0x1C16D08
	0x0365D67C MOV X1, X0
	0x0365D680 MOV X0, X19
	0x0365D684 BL 0x1C16DEC
	0x0365D688 STR X30, [X31 - 0x60]!
	0x0365D68C STP X28, X27, [X31 + 0x10]
	0x0365D690 STP X26, X25, [X31 + 0x20]
	0x0365D694 STP X24, X23, [X31 + 0x30]
	0x0365D698 STP X22, X21, [X31 + 0x40]
	0x0365D69C STP X20, X19, [X31 + 0x50]
	0x0365D6A0 ADRP X21, 0xD83000
	0x0365D6A4 LDRB W8, [X21 + 0x685]
	0x0365D6A8 MOV W19, W1
	0x0365D6AC MOV X20, X0
	0x0365D6B0 TBNZ X8, 0x0, 0x365D734
	0x0365D6B4 ADRP X0, 0xA96000
	0x0365D6B8 LDR X0, [X0 + 0x8F0]
	0x0365D6BC BL 0x1C16CF4
	0x0365D6C0 ADRP X0, 0xA98000
	0x0365D6C4 LDR X0, [X0 + 0x278]
	0x0365D6C8 BL 0x1C16CF4
	0x0365D6CC ADRP X0, 0xADF000
	0x0365D6D0 LDR X0, [X0 + 0xD20]
	0x0365D6D4 BL 0x1C16CF4
	0x0365D6D8 ADRP X0, 0xAC6000
	0x0365D6DC LDR X0, [X0 + 0x5C8]
	0x0365D6E0 BL 0x1C16CF4
	0x0365D6E4 ADRP X0, 0xADF000
	0x0365D6E8 LDR X0, [X0 + 0xD28]
	0x0365D6EC BL 0x1C16CF4
	0x0365D6F0 ADRP X0, 0xA96000
	0x0365D6F4 LDR X0, [X0 + 0x838]
	0x0365D6F8 BL 0x1C16CF4
	0x0365D6FC ADRP X0, 0xA97000
	0x0365D700 LDR X0, [X0 + 0x608]
	0x0365D704 BL 0x1C16CF4
	0x0365D708 ADRP X0, 0xADF000
	0x0365D70C LDR X0, [X0 + 0x890]
	0x0365D710 BL 0x1C16CF4
	0x0365D714 ADRP X0, 0xADF000
	0x0365D718 LDR X0, [X0 + 0x9B8]
	0x0365D71C BL 0x1C16CF4
	0x0365D720 ADRP X0, 0xADF000
	0x0365D724 LDR X0, [X0 + 0xD30]
	0x0365D728 BL 0x1C16CF4
	0x0365D72C MOVZ W8, 0x1
	0x0365D730 STRB W8, [X21 + 0x685]
	0x0365D734 LDR W8, [X20 + 0x30]
	0x0365D738 SUB W9, W8, 0x2
	0x0365D73C CMP W9, 0x2
	0x0365D740 B.CC 0x365D768
	0x0365D744 CMP W8, 0x4
	0x0365D748 B.EQ 0x365D900
	0x0365D74C CMP W8, 0x1
	0x0365D750 B.NE 0x365D788
	0x0365D754 ADRP X8, 0xA98000
	0x0365D758 LDR X8, [X8 + 0x278]
	0x0365D75C LDR X8, [X8]
	0x0365D760 LDR X8, [X8 + 0xB8]
	0x0365D764 B 0x365D908
	0x0365D768 LDR X1, [X20 + 0x18]
	0x0365D76C LDP X20, X19, [X31 + 0x50]
	0x0365D770 LDP X22, X21, [X31 + 0x40]
	0x0365D774 LDP X24, X23, [X31 + 0x30]
	0x0365D778 LDP X26, X25, [X31 + 0x20]
	0x0365D77C LDP X28, X27, [X31 + 0x10]
	0x0365D780 LDR X30, [X31], #0x60
	0x0365D784 B 0x3651868
	0x0365D788 LDR X8, [X20 + 0x10]
	0x0365D78C CBZ X8, 0x365D954
	0x0365D790 LDR X0, [X8 + 0x10]
	0x0365D794 ADRP X8, 0xAC6000
	0x0365D798 LDR X8, [X8 + 0x5C8]
	0x0365D79C MOV X2, X31
	0x0365D7A0 LDR X1, [X8]
	0x0365D7A4 BL 0x3226EF8
	0x0365D7A8 TBZ X0, 0x0, 0x365D7E4
	0x0365D7AC LDR X8, [X20 + 0x10]
	0x0365D7B0 CBZ X8, 0x365D954
	0x0365D7B4 LDR X1, [X8 + 0x10]
	0x0365D7B8 ADRP X8, 0xADF000
	0x0365D7BC LDR X8, [X8 + 0x9B8]
	0x0365D7C0 LDP X20, X19, [X31 + 0x50]
	0x0365D7C4 LDP X22, X21, [X31 + 0x40]
	0x0365D7C8 LDP X24, X23, [X31 + 0x30]
	0x0365D7CC LDR X0, [X8]
	0x0365D7D0 LDP X26, X25, [X31 + 0x20]
	0x0365D7D4 LDP X28, X27, [X31 + 0x10]
	0x0365D7D8 MOV X2, X31
	0x0365D7DC LDR X30, [X31], #0x60
	0x0365D7E0 B 0x321EFD0
	0x0365D7E4 LDR X0, [X20 + 0x28]
	0x0365D7E8 CBZ X0, 0x365D954
	0x0365D7EC BL 0x364E06C
	0x0365D7F0 CBZ W0, 0x365D900
	0x0365D7F4 ADRP X8, 0xA96000
	0x0365D7F8 LDR X8, [X8 + 0x8F0]
	0x0365D7FC LDR X0, [X8]
	0x0365D800 BL 0x1C16F10
	0x0365D804 MOV X1, X31
	0x0365D808 MOV X21, X0
	0x0365D80C BL 0x3231AC4
	0x0365D810 LDR X0, [X20 + 0x28]
	0x0365D814 CBZ X0, 0x365D954
	0x0365D818 ADRP X24, 0xADF000
	0x0365D81C ADRP X25, 0xADF000
	0x0365D820 ADRP X26, 0xADF000
	0x0365D824 ADRP X27, 0xA97000
	0x0365D828 ADRP X28, 0xA96000
	0x0365D82C LDR X24, [X24 + 0xD30]
	0x0365D830 LDR X25, [X25 + 0xD28]
	0x0365D834 LDR X26, [X26 + 0xD20]
	0x0365D838 LDR X27, [X27 + 0x608]
	0x0365D83C LDR X28, [X28 + 0x838]
	0x0365D840 MOV W22, W31
	0x0365D844 BL 0x364E06C
	0x0365D848 CMP W22, W0
	0x0365D84C B.GE 0x365D928
	0x0365D850 LDR X0, [X20 + 0x28]
	0x0365D854 CBZ X0, 0x365D954
	0x0365D858 MOV W1, W22
	0x0365D85C BL 0x364E014
	0x0365D860 CBZ X0, 0x365D954
	0x0365D864 MOV X23, X0
	0x0365D868 LDR X0, [X0 + 0x10]
	0x0365D86C LDR X1, [X24]
	0x0365D870 MOV X2, X31
	0x0365D874 BL 0x321BA08
	0x0365D878 CBZ X21, 0x365D954
	0x0365D87C ANDS W31, W0, 0x1
	0x0365D880 CSEL X8, X25, X26, NE
	0x0365D884 LDR X1, [X8]
	0x0365D888 MOV X0, X21
	0x0365D88C MOV X2, X31
	0x0365D890 BL 0x32333E0
	0x0365D894 LDR X1, [X23 + 0x10]
	0x0365D898 MOV X0, X21
	0x0365D89C MOV X2, X31
	0x0365D8A0 BL 0x32333E0
	0x0365D8A4 LDR X1, [X27]
	0x0365D8A8 MOV X0, X21
	0x0365D8AC MOV X2, X31
	0x0365D8B0 BL 0x32333E0
	0x0365D8B4 TBZ X19, 0x0, 0x365D8C8
	0x0365D8B8 MOV X0, X31
	0x0365D8BC BL 0x33C1548
	0x0365D8C0 MOV X1, X0
	0x0365D8C4 B 0x365D8E4
	0x0365D8C8 LDR X0, [X20 + 0x28]
	0x0365D8CC CBZ X0, 0x365D954
	0x0365D8D0 BL 0x364E06C
	0x0365D8D4 SUB W8, W0, 0x1
	0x0365D8D8 CMP W22, W8
	0x0365D8DC B.EQ 0x365D8F0
	0x0365D8E0 LDR X1, [X28]
	0x0365D8E4 MOV X0, X21
	0x0365D8E8 MOV X2, X31
	0x0365D8EC BL 0x32333E0
	0x0365D8F0 LDR X0, [X20 + 0x28]
	0x0365D8F4 ADD W22, W22, 0x1
	0x0365D8F8 CBNZ X0, 0x365D844
	0x0365D8FC B 0x365D954
	0x0365D900 ADRP X8, 0xADF000
	0x0365D904 LDR X8, [X8 + 0x890]
	0x0365D908 LDR X0, [X8]
	0x0365D90C LDP X20, X19, [X31 + 0x50]
	0x0365D910 LDP X22, X21, [X31 + 0x40]
	0x0365D914 LDP X24, X23, [X31 + 0x30]
	0x0365D918 LDP X26, X25, [X31 + 0x20]
	0x0365D91C LDP X28, X27, [X31 + 0x10]
	0x0365D920 LDR X30, [X31], #0x60
	0x0365D924 RET
	0x0365D928 CBZ X21, 0x365D954
	0x0365D92C LDR X8, [X21]
	0x0365D930 MOV X0, X21
	0x0365D934 LDP X20, X19, [X31 + 0x50]
	0x0365D938 LDP X22, X21, [X31 + 0x40]
	0x0365D93C LDP X2, X1, [X8 + 0x168]
	0x0365D940 LDP X24, X23, [X31 + 0x30]
	0x0365D944 LDP X26, X25, [X31 + 0x20]
	0x0365D948 LDP X28, X27, [X31 + 0x10]
	0x0365D94C LDR X30, [X31], #0x60
	0x0365D950 BR X2
	0x0365D954 BL 0x1C16F20
	0x0365D958 STR X30, [X31 - 0x20]!
	0x0365D95C STP X20, X19, [X31 + 0x10]
	0x0365D960 MOV X19, X0
	0x0365D964 AND W20, W3, 0x1
	0x0365D968 BL 0x364E388
	0x0365D96C STRB W20, [X19 + 0x20]
	0x0365D970 LDP X20, X19, [X31 + 0x10]
	0x0365D974 LDR X30, [X31], #0x20
	0x0365D978 RET
	0x0365D97C LDRB W0, [X0 + 0x20]
	0x0365D980 RET
	0x0365D984 AND W8, W1, 0x1
	0x0365D988 STRB W8, [X0 + 0x20]
	0x0365D98C RET
	0x0365D990 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xD84000
	011 Move W8, [X20+1656]
	012 Move X19, X1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xA97000
	018 Move X0, [X0+3584]
	019 Call 0x1C17CF4
	020 Move X0, 0xA97000
	021 Move X0, [X0+3608]
	022 Call 0x1C17CF4
	023 Move X0, 0xAC5000
	024 Move X0, [X0+248]
	025 Call 0x1C17CF4
	026 Move X0, 0xAE0000
	027 Move X0, [X0+3256]
	028 Call 0x1C17CF4
	029 Move X0, 0xAE0000
	030 Move X0, [X0+3208]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1656], W8
	034 Compare X19, 0
	035 JumpIfEqual {177}
	036 Move X0, [X19+72]
	037 Compare X0, 0
	038 JumpIfEqual {177}
	039 Move X22, 0xA97000
	040 Move X22, [X22+3584]
	041 Move X1, X31
	042 Call CollectionBase.GetEnumerator, X0
	043 Move X19, X0
	044 Compare X0, 0
	045 JumpIfEqual {178}
	046 Move X23, 0xA97000
	047 Move X24, 0xAC5000
	048 Move X25, 0xAE0000
	049 Move X26, 0xAE0000
	050 Move X23, [X23+3608]
	051 Move X24, [X24+248]
	052 Move X25, [X25+3256]
	053 Move X26, [X26+3208]
	054 Move X8, [X19]
	055 Move X1, [X23]
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Compare X9, 0
	058 JumpIfEqual {65}
	059 Move X10, [X8+176]
	060 Add X10, X10, 8
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Subtract X9, X9, 1
	064 Add X10, X10, 16
	065 Move X0, X19
	066 Move W2, W31
	067 Call 0x1C5D788
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 Add X8, X8, X9
	070 Add X0, X8, 312
	071 Move X8, [X0]
	072 Move X1, [X0+8]
	073 Move X0, X19
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Move W21, W0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {133}
	080 Move X8, [X19]
	081 Move X1, [X23]
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Compare X9, 0
	084 JumpIfEqual {91}
	085 Move X10, [X8+176]
	086 Add X10, X10, 8
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Subtract X9, X9, 1
	090 Add X10, X10, 16
	091 Move W2, 1
	092 Move X0, X19
	093 Call 0x1C5D788
	094 Move W9, [X10]
	095 Add W9, W9, 1
	096 Add X8, X8, W9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X19
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Compare X0, 0
	103 JumpIfEqual {176}
	104 Move X8, [X0]
	105 Move X1, [X24]
	106 Move W10, [X8+304]
	107 Move W9, [X1+304]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X8, [X8+200]
	110 Add X8, X8, X9
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W8, [X0+24]
	114 Compare W8, 0
	115 JumpIfEqual {54}
	116 Move X20, [X0+16]
	117 Move X1, [X25]
	118 Move X0, X20
	119 Move X2, X31
	120 Call String.op_Equality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfEqual {54}
	125 Move X1, [X26]
	126 Move X0, X20
	127 Move X2, X31
	128 Call String.op_Equality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfEqual {54}
	133 Move X20, X31
	134 Xor W21, W21, 1
	135 Move X1, [X22]
	136 Move X0, X19
	137 Call 0x1C17E00
	138 Compare X0, 0
	139 JumpIfEqual {162}
	140 Move X8, [X0]
	141 Move X1, [X22]
	142 Move X19, X0
	143 NotImplemented "Instruction LDRH not yet implemented."
	144 Compare X9, 0
	145 JumpIfEqual {152}
	146 Move X10, [X8+176]
	147 Add X10, X10, 8
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Subtract X9, X9, 1
	151 Add X10, X10, 16
	152 Move X0, X19
	153 Move W2, W31
	154 Call 0x1C5D788
	155 NotImplemented "Instruction LDRSW not yet implemented."
	156 Add X8, X8, X9
	157 Add X0, X8, 312
	158 Move X8, [X0]
	159 Move X1, [X0+8]
	160 Move X0, X19
	161 NotImplemented "Instruction BLR not yet implemented."
	162 Compare X20, 0
	163 JumpIfNotEqual {179}
	164 And W0, W21, 1
	165 Move X20, [X31+64]
	166 Move X19, [X31+72]
	167 Move X22, [X31+48]
	168 Move X21, [X31+56]
	169 Move X24, [X31+32]
	170 Move X23, [X31+40]
	171 Move X26, [X31+16]
	172 Move X25, [X31+24]
	173 Move X30, [X31+80]
	174 Return X0
	175 Call 0x1C181E0
	176 Call 0x1C17F20
	177 Call 0x1C17F20
	178 Call 0x1C17F20
	179 Move X0, X20
	180 Call 0x1C17F18
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Call 0x3EB2AD0
	183 Move X20, [X0]
	184 Call 0x3EB2AE0
	185 Move W21, 1
	186 Move X21, X0
	187 Move X20, X31
	188 Move X21, X0
	189 Move X1, [X22]
	190 Move X0, X19
	191 Call 0x1C17E00
	192 Move X19, X0
	193 Compare X0, 0
	194 JumpIfEqual {216}
	195 Move X8, [X19]
	196 Move X1, [X22]
	197 NotImplemented "Instruction LDRH not yet implemented."
	198 Compare X9, 0
	199 JumpIfEqual {206}
	200 Move X10, [X8+176]
	201 Add X10, X10, 8
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Subtract X9, X9, 1
	205 Add X10, X10, 16
	206 Move X0, X19
	207 Move W2, W31
	208 Call 0x1C5D788
	209 NotImplemented "Instruction LDRSW not yet implemented."
	210 Add X8, X8, X9
	211 Add X0, X8, 312
	212 Move X8, [X0]
	213 Move X1, [X0+8]
	214 Move X0, X19
	215 NotImplemented "Instruction BLR not yet implemented."
	216 Compare X20, 0
	217 JumpIfNotEqual {220}
	218 Move X0, X21
	219 Call 0x1D2D690
	220 Move X0, X20
	221 Call 0x1C17F18
	222 Call 0x1991590

Method: System.Boolean ProcessCrlEntryExtensions(Mono.Security.X509.X509Crl/X509CrlEntry entry)

Disassembly:
	0x0365D34C LDR X0, [X21]
	0x0365D350 BL 0x1C16F10
	0x0365D354 MOVZ W1, 0x30
	0x0365D358 MOV X2, X31
	0x0365D35C MOV X19, X0
	0x0365D360 BL 0x31E79E8
	0x0365D364 LDR X0, [X20 + 0x28]
	0x0365D368 CBZ X0, 0x365D3D0
	0x0365D36C BL 0x364E0B4
	0x0365D370 CBZ X0, 0x365D3D0
	0x0365D374 MOV X20, X0
	0x0365D378 MOV X0, X20
	0x0365D37C BL 0x364E328
	0x0365D380 TBZ X0, 0x0, 0x365D3B4
	0x0365D384 MOV X0, X20
	0x0365D388 BL 0x364E304
	0x0365D38C CBZ X0, 0x365D3D0
	0x0365D390 LDR X0, [X0 + 0x10]
	0x0365D394 MOV X1, X31
	0x0365D398 BL 0x31E8DA0
	0x0365D39C CBZ X19, 0x365D3D0
	0x0365D3A0 MOV X1, X0
	0x0365D3A4 MOV X0, X19
	0x0365D3A8 MOV X2, X31
	0x0365D3AC BL 0x31E7ED0
	0x0365D3B0 B 0x365D378
	0x0365D3B4 CBZ X19, 0x365D3D0
	0x0365D3B8 LDR X8, [X19]
	0x0365D3BC MOV X0, X19
	0x0365D3C0 LDP X20, X19, [X31 + 0x10]
	0x0365D3C4 LDP X2, X1, [X8 + 0x178]
	0x0365D3C8 LDP X30, X21, [X31], #0x20
	0x0365D3CC BR X2
	0x0365D3D0 BL 0x1C16F20
	0x0365D3D4 STR X30, [X31 - 0x20]!
	0x0365D3D8 STP X20, X19, [X31 + 0x10]
	0x0365D3DC ADRP X19, 0xD83000
	0x0365D3E0 LDRB W8, [X19 + 0x681]
	0x0365D3E4 MOV X20, X0
	0x0365D3E8 TBNZ X8, 0x0, 0x365D400
	0x0365D3EC ADRP X0, 0xADF000
	0x0365D3F0 LDR X0, [X0 + 0xCC0]
	0x0365D3F4 BL 0x1C16CF4
	0x0365D3F8 MOVZ W8, 0x1
	0x0365D3FC STRB W8, [X19 + 0x681]
	0x0365D400 LDR W8, [X20 + 0x30]
	0x0365D404 ORR W8, W8, 0x4
	0x0365D408 CMP W8, 0x4
	0x0365D40C B.NE 0x365D478
	0x0365D410 ADRP X8, 0xADF000
	0x0365D414 LDR X8, [X8 + 0xCC0]
	0x0365D418 LDR X0, [X8]
	0x0365D41C BL 0x1C16F10
	0x0365D420 MOV X19, X0
	0x0365D424 BL 0x364DEE4
	0x0365D428 LDR X0, [X20 + 0x28]
	0x0365D42C CBZ X0, 0x365D464
	0x0365D430 BL 0x364E0B4
	0x0365D434 CBZ X0, 0x365D474
	0x0365D438 MOV X20, X0
	0x0365D43C MOV X0, X20
	0x0365D440 BL 0x364E328
	0x0365D444 TBZ X0, 0x0, 0x365D464
	0x0365D448 MOV X0, X20
	0x0365D44C BL 0x364E304
	0x0365D450 CBZ X19, 0x365D474
	0x0365D454 MOV X1, X0
	0x0365D458 MOV X0, X19
	0x0365D45C BL 0x364DF64
	0x0365D460 B 0x365D43C
	0x0365D464 MOV X0, X19
	0x0365D468 LDP X20, X19, [X31 + 0x10]
	0x0365D46C LDR X30, [X31], #0x20
	0x0365D470 RET
	0x0365D474 BL 0x1C16F20
	0x0365D478 ADRP X0, 0xAC3000
	0x0365D47C LDR X0, [X0 + 0xCE0]
	0x0365D480 BL 0x1C16D08
	0x0365D484 BL 0x1C16F10
	0x0365D488 MOV X19, X0
	0x0365D48C ADRP X0, 0xADF000
	0x0365D490 LDR X0, [X0 + 0x988]
	0x0365D494 BL 0x1C16D08
	0x0365D498 MOV X1, X0
	0x0365D49C MOV X0, X19
	0x0365D4A0 MOV X2, X31
	0x0365D4A4 BL 0x3252170
	0x0365D4A8 ADRP X0, 0xADF000
	0x0365D4AC LDR X0, [X0 + 0xD08]
	0x0365D4B0 BL 0x1C16D08
	0x0365D4B4 MOV X1, X0
	0x0365D4B8 MOV X0, X19
	0x0365D4BC BL 0x1C16DEC
	0x0365D4C0 STP X30, X23, [X31 - 0x30]!
	0x0365D4C4 STP X22, X21, [X31 + 0x10]
	0x0365D4C8 STP X20, X19, [X31 + 0x20]
	0x0365D4CC ADRP X21, 0xD83000
	0x0365D4D0 LDRB W8, [X21 + 0x682]
	0x0365D4D4 MOV X20, X1
	0x0365D4D8 MOV X19, X0
	0x0365D4DC TBNZ X8, 0x0, 0x365D518
	0x0365D4E0 ADRP X0, 0xADF000
	0x0365D4E4 LDR X0, [X0 + 0x7E0]
	0x0365D4E8 BL 0x1C16CF4
	0x0365D4EC ADRP X0, 0xADC000
	0x0365D4F0 LDR X0, [X0 + 0xF28]
	0x0365D4F4 BL 0x1C16CF4
	0x0365D4F8 ADRP X0, 0xADF000
	0x0365D4FC LDR X0, [X0 + 0x8E0]
	0x0365D500 BL 0x1C16CF4
	0x0365D504 ADRP X0, 0xAC6000
	0x0365D508 LDR X0, [X0 + 0x5C8]
	0x0365D50C BL 0x1C16CF4
	0x0365D510 MOVZ W8, 0x1
	0x0365D514 STRB W8, [X21 + 0x682]
	0x0365D518 CBZ X20, 0x365D640
	0x0365D51C ADRP X8, 0xADC000
	0x0365D520 LDR X8, [X8 + 0xF28]
	0x0365D524 LDR X9, [X20]
	0x0365D528 LDR X8, [X8]
	0x0365D52C LDRB W11, [X9 + 0x130]
	0x0365D530 LDRB W10, [X8 + 0x130]
	0x0365D534 CMP W11, W10
	0x0365D538 B.CC 0x365D5DC
	0x0365D53C LDR X9, [X9 + 0xC8]
	0x0365D540 ADD X9, X9, X10, 0x3, LSL
	0x0365D544 LDUR X9, [X9 - 0x8]
	0x0365D548 CMP X9, X8
	0x0365D54C B.NE 0x365D5DC
	0x0365D550 ADRP X8, 0xADF000
	0x0365D554 LDR X8, [X8 + 0x7E0]
	0x0365D558 LDR X22, [X20 + 0x10]
	0x0365D55C LDR X0, [X8]
	0x0365D560 BL 0x1C16F10
	0x0365D564 MOV X21, X0
	0x0365D568 CBZ X22, 0x365D57C
	0x0365D56C MOV X0, X21
	0x0365D570 MOV X1, X22
	0x0365D574 BL 0x364DC68
	0x0365D578 B 0x365D5A4
	0x0365D57C ADRP X8, 0xAC6000
	0x0365D580 ADRP X9, 0xADF000
	0x0365D584 LDR X8, [X8 + 0x5C8]
	0x0365D588 LDR X9, [X9 + 0x8E0]
	0x0365D58C MOV X0, X21
	0x0365D590 MOV X1, X31
	0x0365D594 LDR X22, [X8]
	0x0365D598 LDR X23, [X9]
	0x0365D59C BL 0x33BDD8C
	0x0365D5A0 STP X22, X23, [X21 + 0x10]
	0x0365D5A4 STR X21, [X19 + 0x10]
	0x0365D5A8 LDR X1, [X20 + 0x18]
	0x0365D5AC MOV X0, X19
	0x0365D5B0 BL 0x364E404
	0x0365D5B4 LDRB W8, [X20 + 0x20]
	0x0365D5B8 LDR X1, [X19 + 0x18]
	0x0365D5BC MOV X0, X19
	0x0365D5C0 STRB W8, [X19 + 0x20]
	0x0365D5C4 BL 0x365CF5C
	0x0365D5C8 STR W0, [X19 + 0x30]
	0x0365D5CC LDP X20, X19, [X31 + 0x20]
	0x0365D5D0 LDP X22, X21, [X31 + 0x10]
	0x0365D5D4 LDP X30, X23, [X31], #0x30
	0x0365D5D8 RET
	0x0365D5DC ADRP X0, 0xADF000
	0x0365D5E0 LDR X0, [X0 + 0x9A8]
	0x0365D5E4 BL 0x1C16D08
	0x0365D5E8 MOV X1, X31
	0x0365D5EC BL 0x320A160
	0x0365D5F0 MOV X19, X0
	0x0365D5F4 ADRP X0, 0xA9E000
	0x0365D5F8 LDR X0, [X0 + 0x578]
	0x0365D5FC BL 0x1C16D08
	0x0365D600 BL 0x1C16F10
	0x0365D604 MOV X20, X0
	0x0365D608 ADRP X0, 0xADF000
	0x0365D60C LDR X0, [X0 + 0x848]
	0x0365D610 BL 0x1C16D08
	0x0365D614 MOV X2, X0
	0x0365D618 MOV X0, X20
	0x0365D61C MOV X1, X19
	0x0365D620 MOV X3, X31
	0x0365D624 BL 0x330E16C
	0x0365D628 ADRP X0, 0xADF000
	0x0365D62C LDR X0, [X0 + 0xD10]
	0x0365D630 BL 0x1C16D08
	0x0365D634 MOV X1, X0
	0x0365D638 MOV X0, X20
	0x0365D63C BL 0x1C16DEC
	0x0365D640 ADRP X0, 0xA9B000
	0x0365D644 LDR X0, [X0 + 0x528]
	0x0365D648 BL 0x1C16D08
	0x0365D64C BL 0x1C16F10
	0x0365D650 MOV X19, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xD84000
	009 Move W8, [X20+1657]
	010 Move X19, X1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xA97000
	016 Move X0, [X0+3584]
	017 Call 0x1C17CF4
	018 Move X0, 0xA97000
	019 Move X0, [X0+3608]
	020 Call 0x1C17CF4
	021 Move X0, 0xAC5000
	022 Move X0, [X0+248]
	023 Call 0x1C17CF4
	024 Move X0, 0xAE0000
	025 Move X0, [X0+3248]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1657], W8
	029 Compare X19, 0
	030 JumpIfEqual {159}
	031 Move X0, [X19+32]
	032 Compare X0, 0
	033 JumpIfEqual {159}
	034 Move X22, 0xA97000
	035 Move X22, [X22+3584]
	036 Move X1, X31
	037 Call CollectionBase.GetEnumerator, X0
	038 Move X19, X0
	039 Compare X0, 0
	040 JumpIfEqual {160}
	041 Move X20, 0xA97000
	042 Move X23, 0xAC5000
	043 Move X24, 0xAE0000
	044 Move X20, [X20+3608]
	045 Move X23, [X23+248]
	046 Move X24, [X24+3248]
	047 Move X8, [X19]
	048 Move X1, [X20]
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Compare X9, 0
	051 JumpIfEqual {58}
	052 Move X10, [X8+176]
	053 Add X10, X10, 8
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Subtract X9, X9, 1
	057 Add X10, X10, 16
	058 Move X0, X19
	059 Move W2, W31
	060 Call 0x1C5D788
	061 NotImplemented "Instruction LDRSW not yet implemented."
	062 Add X8, X8, X9
	063 Add X0, X8, 312
	064 Move X8, [X0]
	065 Move X1, [X0+8]
	066 Move X0, X19
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move W21, W0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {117}
	073 Move X8, [X19]
	074 Move X1, [X20]
	075 NotImplemented "Instruction LDRH not yet implemented."
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move W2, 1
	085 Move X0, X19
	086 Call 0x1C5D788
	087 Move W9, [X10]
	088 Add W9, W9, 1
	089 Add X8, X8, W9
	090 Add X0, X8, 312
	091 Move X8, [X0]
	092 Move X1, [X0+8]
	093 Move X0, X19
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Compare X0, 0
	096 JumpIfEqual {158}
	097 Move X8, [X0]
	098 Move X1, [X23]
	099 Move W10, [X8+304]
	100 Move W9, [X1+304]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X8, [X8+200]
	103 Add X8, X8, X9
	104 NotImplemented "Instruction LDUR not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move W8, [X0+24]
	107 Compare W8, 0
	108 JumpIfEqual {47}
	109 Move X0, [X0+16]
	110 Move X1, [X24]
	111 Move X2, X31
	112 Call String.op_Equality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfEqual {47}
	117 Move X20, X31
	118 Xor W21, W21, 1
	119 Move X1, [X22]
	120 Move X0, X19
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {146}
	124 Move X8, [X0]
	125 Move X1, [X22]
	126 Move X19, X0
	127 NotImplemented "Instruction LDRH not yet implemented."
	128 Compare X9, 0
	129 JumpIfEqual {136}
	130 Move X10, [X8+176]
	131 Add X10, X10, 8
	132 NotImplemented "Instruction LDUR not yet implemented."
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Subtract X9, X9, 1
	135 Add X10, X10, 16
	136 Move X0, X19
	137 Move W2, W31
	138 Call 0x1C5D788
	139 NotImplemented "Instruction LDRSW not yet implemented."
	140 Add X8, X8, X9
	141 Add X0, X8, 312
	142 Move X8, [X0]
	143 Move X1, [X0+8]
	144 Move X0, X19
	145 NotImplemented "Instruction BLR not yet implemented."
	146 Compare X20, 0
	147 JumpIfNotEqual {161}
	148 And W0, W21, 1
	149 Move X20, [X31+48]
	150 Move X19, [X31+56]
	151 Move X22, [X31+32]
	152 Move X21, [X31+40]
	153 Move X24, [X31+16]
	154 Move X23, [X31+24]
	155 Move X30, [X31+64]
	156 Return X0
	157 Call 0x1C181E0
	158 Call 0x1C17F20
	159 Call 0x1C17F20
	160 Call 0x1C17F20
	161 Move X0, X20
	162 Call 0x1C17F18
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Call 0x3EB2AD0
	165 Move X20, [X0]
	166 Call 0x3EB2AE0
	167 Move W21, 1
	168 Move X21, X0
	169 Move X20, X31
	170 Move X21, X0
	171 Move X1, [X22]
	172 Move X0, X19
	173 Call 0x1C17E00
	174 Move X19, X0
	175 Compare X0, 0
	176 JumpIfEqual {198}
	177 Move X8, [X19]
	178 Move X1, [X22]
	179 NotImplemented "Instruction LDRH not yet implemented."
	180 Compare X9, 0
	181 JumpIfEqual {188}
	182 Move X10, [X8+176]
	183 Add X10, X10, 8
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Subtract X9, X9, 1
	187 Add X10, X10, 16
	188 Move X0, X19
	189 Move W2, W31
	190 Call 0x1C5D788
	191 NotImplemented "Instruction LDRSW not yet implemented."
	192 Add X8, X8, X9
	193 Add X0, X8, 312
	194 Move X8, [X0]
	195 Move X1, [X0+8]
	196 Move X0, X19
	197 NotImplemented "Instruction BLR not yet implemented."
	198 Compare X20, 0
	199 JumpIfNotEqual {202}
	200 Move X0, X21
	201 Call 0x1D2D690
	202 Move X0, X20
	203 Call 0x1C17F18
	204 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x0365DD14 LDR X10, [X10 + 0xE18]
	0x0365DD18 LDRH W9, [X8 + 0x12E]
	0x0365DD1C LDR X1, [X10]
	0x0365DD20 CBZ X9, 0x365DD44
	0x0365DD24 LDR X10, [X8 + 0xB0]
	0x0365DD28 ADD X10, X10, 0x8
	0x0365DD2C LDUR X11, [X10 - 0x8]
	0x0365DD30 CMP X11, X1
	0x0365DD34 B.EQ 0x365DD54
	0x0365DD38 SUBS X9, X9, 0x1
	0x0365DD3C ADD X10, X10, 0x10
	0x0365DD40 B.NE 0x365DD2C
	0x0365DD44 MOVZ W2, 0x1
	0x0365DD48 MOV X0, X19
	0x0365DD4C BL 0x1C5C788
	0x0365DD50 B 0x365DD64
	0x0365DD54 LDR W9, [X10]
	0x0365DD58 ADD W9, W9, 0x1
	0x0365DD5C ADD X8, X8, W9, 0x4, SXTW
	0x0365DD60 ADD X0, X8, 0x138
	0x0365DD64 LDP X2, X1, [X0]
	0x0365DD68 MOV X0, X19
	0x0365DD6C LDP X20, X19, [X31 + 0x10]
	0x0365DD70 LDR X30, [X31], #0x20
	0x0365DD74 BR X2
	0x0365DD78 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD84000
	006 Move X21, 0xAE0000
	007 Move X19, 0xAE0000
	008 Move W8, [X20+1658]
	009 Move X21, [X21+3088]
	010 Move X19, [X19+3064]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAE0000
	016 Move X0, [X0+3064]
	017 Call 0x1C17CF4
	018 Move X0, 0xAE0000
	019 Move X0, [X0+3088]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1658], W8
	023 Move X0, [X21]
	024 Move W1, W31
	025 Call 0x1C17D6C
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], X0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

